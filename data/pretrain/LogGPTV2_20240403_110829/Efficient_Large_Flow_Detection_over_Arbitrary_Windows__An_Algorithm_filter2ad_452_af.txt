(h) 250*2
congested Link
counters
- Non-
Figure 6: False Positive on Small Flows.
of the prior work does not consider the arbitrary window
model.
Counter-based techniques.
Counter-based techniques
maintain a small number of counters, each of which asso-
ciated with a ﬂow or an item. Manku and Motwani [29]
present another well-known counter-based technique called
Lossy Counting. For each stored item, Lossy Counting main-
tains and updates the upper bound and lower bound on the
count of the item. The algorithm stores every new item
and periodically removes items whose upper bound is less
than the threshold. Similar to the MG algorithm discussed
in Section 3.2, the Space Saving algorithm [30] proposed by
Metwally et al. maintains k (item, counter) pairs and in-
creases the corresponding counter of each incoming item.
If the new item e is not stored currently, the stored item
with the lowest count is replaced by the new item, and the
counter increases accordingly.
Multistage ﬁlters identify
Sketch-based techniques.
large ﬂows over ﬁxed time windows [17] and over arbitrary
windows [16]. Fang et al.
[18] propose a similar mul-
tistage algorithm but their algorithm requires more than
one pass over the input stream. Cormode and Muthukr-
ishnan [10] present a novel data structure called count-min
sketch, which summarizes an input stream and can answer
several queries including ﬁnding frequent items. As pointed
out in their paper, despite the fact that the construction
is similar to that of multistage ﬁlters, count-min sketches
can ﬂexibly support negative weights and require only pair-
wise independence hash functions rather than fully indepen-
dent ones.
In general, sketches can support a richer set
of queries with a higher memory overhead compared with
counter-based techniques.
Sampling-based techniques.
Sampled NetFlow [1]
maintains a generic traﬃc summary of sampled packets.
With a sampling rate 1/r, the frequency estimate is derived
by multiplying the count by r. To improve the accuracy
of the estimates, both Sticky sampling [29] and Sample and
Hold [17] examine every incoming item and increase the cor-
responding count if the item is being monitored. If the new
item is not being monitored, it is sampled and added to the
monitoring list with a certain probability. Sampling-based
techniques in general cannot achieve high accuracy due to
220the lack of per-packet information. Duﬃeld [15] studies how
to perform fair sampling in traﬃc ﬂow measurements.
Calders et al.
[7] deﬁne a new frequency measure as the
maximum frequency over all possible windows ending at the
current time. Although their core idea is the same as the
arbitrary window model, their algorithm focuses on accu-
rately estimating the frequency based on the new frequency
measure, whereas we seek to accurately identify large ﬂows.
7. CONCLUSION
EARDet is a deterministic streaming algorithm that ro-
bustly catches all large ﬂows and protects all small ﬂows
regardless of the traﬃc distribution. The core ideas diﬀeren-
tiating EARDet from prior work are that it monitors ﬂows
over arbitrary windows and provides exactness outside an
ambiguity region. We believe that EARDet can aid emerg-
ing applications such as detecting DoS attacks by bursty
ﬂows [25] and enforcing QoS-based SLA compliance [35],
which require robust monitoring for high assurance. One
future direction is to explore the design space of large-ﬂow
algorithms in the arbitrary window model by applying the
no-FP and no-FN theorems to existing landmark-window-
based algorithms. Another interesting future work is to for-
mally examine the robustness of EARDet and prior algo-
rithms against malicious inputs.
8. ACKNOWLEDGMENTS
We gratefully thank our shepherd Darryl Veitch and the
anonymous reviewers for their valuable feedback. This re-
search was supported in part by NSF under grants CNS-
0953600, CNS-1248080, and CNS-1040801.
9. REFERENCES
[1] Random Sampled NetFlow. http://www.cisco.com/en/US/
docs/ios/12_0s/feature/guide/nfstatsa.html.
[2] The CAIDA UCSD Anonymized Internet Traces 2012 -
1220. http://www.caida.org/data/passive/passive_2012_
dataset.xml.
[3] Traces 1 of TCP port 80 traﬃc traces from Federico II.
http://traffic.comics.unina.it/Traces/ttraces.php.
[4] D. G. Andersen, H. Balakrishnan, N. Feamster,
T. Koponen, D. Moon, and S. Shenker. Accountable
Internet Protocol (AIP). In Proceedings of ACM
SIGCOMM, 2008.
[5] A. Arasu and G. S. Manku. Approximate Counts and
Quantiles over Sliding Windows. In Proceedings of ACM
PODS, 2004.
[6] B. Boyer and J. Moore. A Fast Majority Vote Algorithm.
Technical report, ICSCA-CMP-32, Institute for Computer
Science, University of Texas, 1981.
[7] T. Calders, N. Dexters, and B. Goethals. Mining Frequent
Items in a Stream Using Flexible Windows. Intelligent
Data Analysis, 12(3):293–304, 2008.
[8] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.
Introduction to Algorithms, chapter 13: Red-Black Trees.
MIT Press and McGraw-Hill, 2001.
[9] G. Cormode and M. Hadjieleftheriou. Finding Frequent
Items in Data Streams. Proc. VLDB Endow.,
1(2):1530–1541, 2008.
[10] G. Cormode and S. Muthukrishnan. An Improved Data
Stream Summary: The Count-Min Sketch and its
Applications. Journal of Algorithms, 55(1):58–75, 2005.
[11] S. A. Crosby and D. S. Wallach. Denial of Service via
Algorithmic Complexity Attacks. In Proceedings of
USENIX Security, 2003.
[12] A. Dainotti, A. Pescap`e, P. Salvo Rossi, F. Palmieri, and
G. Ventre. Internet Traﬃc Modeling by means of Hidden
Markov Models. Computer Networks (Elsevier),
52:2645–2662, 2008.
[13] A. Dainotti, A. Pescap`e, and G. Ventre. A Cascade
Architecture for DoS attacks Detection based on the
Wavelet Transform. Journal of Computer Security,
17(6/2009):945–968, 2009.
[14] E. D. Demaine, A. L´opez-Ortiz, and J. I. Munro. Frequency
Estimation of Internet Packet Streams with Limited Space.
In Proceedings of ESA, 2002.
[15] N. Duﬃeld. Fair Sampling Across Network Flow
Measurements. In Proceedings of ACM SIGMETRICS,
2012.
[16] C. Estan. Internet Traﬃc Measurement: What’s Going on
in my Network? PhD thesis, 2003.
[17] C. Estan and G. Varghese. New Directions in Traﬃc
Measurement and Accounting: Focusing on the Elephants,
Ignoring the Mice. ACM Transactions on Computer
Systems (TOCS), 21(3):270–313, 2003.
[18] M. Fang and N. Shivakumar. Computing Iceberg Queries
Eﬃciently. In Proceedings of VLDB, 1999.
[19] P. Ferguson and D. Senie. Network Ingress Filtering:
Defeating Denial of Service Attacks which employ IP
Source Address Spooﬁng. RFC 2827 (Best Current
Practice), May 2000. Updated by RFC 3704.
[20] M. Fischer and S. Salzberg. Finding a Majority Among N
Votes: Solution to Problem 81-5. Journal of Algorithms -
JAL, 3(4):362–380, 1982.
[21] L. Golab, D. DeHaan, E. D. Demaine, A. L´opez-Ortiz, and
J. I. Munro. Identifying Frequent Items in Sliding Windows
over On-Line Packet Streams. In Proceedings of ACM IMC,
2003.
[22] M. Guirguis, A. Bestavros, and I. Matta. Exploiting the
Transients of Adaptation for RoQ Attacks on Internet
Resources. In Proceedings of IEEE ICNP, 2004.
[23] R. M. Karp, S. Shenker, and C. H. Papadimitriou. A
Simple Algorithm for Finding Frequent Elements in
Streams and Bags. ACM Transactions on Database
Systems, 28(1):51–55, 2003.
[24] T. Kim, C. Basescu, L. Jia, S. B. Lee, Y.-C. Hu, and
A. Perrig. Lightweight Source Authentication and Path
Validation. In Proceedings of ACM SIGCOMM, 2014.
[25] A. Kuzmanovic and E. Knightly. Low-Rate TCP-Targeted
Denial of Service Attacks and Counter Strategies.
IEEE/ACM Transactions on Networking, 14(4):683–696,
2006.
[26] L. Lee and H. Ting. A Simpler and More Eﬃcient
Deterministic Scheme for Finding Frequent Items over
Sliding Windows. In Proceedings of ACM PODS, 2006.
[27] X. Liu, A. Li, X. Yang, and D. Wetherall. Passport: Secure
and Adoptable Source Authentication. In Proceedings of
USENIX/ACM NSDI, 2008.
[28] S. Machiraju, M. Seshadri, and I. Stoica. A Scalable and
Robust Solution for Bandwidth Allocation. In Proceedings
of IEEE International Workshop on Quality of Service,
volume 00, 2002.
[29] G. Manku and R. Motwani. Approximate Frequency
Counts over Data Streams. In Proceedings of VLDB, 2002.
[30] A. Metwally, D. Agrawal, and A. El Abbadi. Eﬃcient
Computation of Frequent and Top-k Elements in Data
Streams. In Proceedings of ICDT, 2005.
[31] J. Misra and D. Gries. Finding Repeated Elements. Science
of Computer Programming, 2(2):143–152, 1982.
[32] J. Naous, M. Walﬁsh, A. Nicolosi, D. Mazieres, M. Miller,
and A. Seehra. Verifying and Enforcing Network Paths
with ICING. In Proceedings of ACM CoNext, 2011.
[33] S. Shenker, C. Partridge, and R. Guerin. Speciﬁcation of
Guaranteed Quality of Service. RFC 2212 (Proposed
Standard), Sept. 1997.
221[34] I. Stoica, S. Shenker, and H. Zhang. Core-Stateless Fair
Queueing: A Scalable Architecture to Approximate Fair
Bandwidth Allocations in High-Speed Networks.
IEEE/ACM Transactions on Networking, 11(1):33–46, Feb.
2003.
[35] D. M. Turner, V. Prevelakis, and A. D. Keromytis. A
Market-Based Bandwidth Charging Framework. ACM
Transactions on Internet Technology, 10(1):1–30, 2010.
[36] J. Turner. New Directions in Communications (Or Which
Way to the Information Age?). IEEE Communications
Magazine, 24:8–15, 1986.
[37] H. Wu, H.-C. Hsiao, and Y.-C. Yu. Eﬃcient Large Flow
Detection over Arbitrary Windows: An Algorithm Exact
Outside An Ambiguity Region. Technical report,
CMU-CyLab-14-006, CyLab, Carnegie Mellon University,
2014.
[38] M. Yu, L. Jose, and R. Miao. Software Deﬁned Traﬃc
Measurement with OpenSketch. In Proceedings of USENIX
NSDI, 2013.
APPENDIX
A. ENGINEERING THE DETECTOR: SO-
LUTION AND ANALYSIS
We give a detailed solution and analysis to the problem
deﬁned in Section 4.6. The problem can be expressed by the
inequality set (5):
that the inequality sets (5) and (7) are not totally equal, so
there may be additional solutions outside this space.
5
x 10
∆β−n Solution Space
∆β Lower Bound Curve
∆β Upper Bound Curve
4.5
4
3.5
3
2.5
2
1.5
1
0.5
β
∆
0
100
200
300
400
500
600
700
800
900
1000
number of counters (n)
Figure 8: Curve of
the lower bound of βℓ.
(γℓ = 100, 000 byte/s γh = 1, 000, 000 byte/s, ρ =
100, 000, 000 byte/s, α = 1518 bytes, βℓ = 6072 bytes,
tupincb = 1 second.)
According to the inequality set (7), the lower bound of β∆
. We can see β∆ min increases with n, as
is β∆ min = γℓ(α+βℓ)
n+1 −γℓ
Figure 8 shows. Since we can reduce memory consumption
and the burst gap by using a smaller n and β∆, we choose
ρ
n+1
 γℓ
β∆
ρ
n + 1
β∆ ≤
β∆ ≥
ρ
γh − 1
n+1 − γℓ ≤
ρ
γh − 1
ρ
γℓ(α + βℓ)
n >
⇒
tupincb(γh − ρ
n+1 ) − 2(α + βℓ)
2
We can assert that there must exist a solution pair of (n, β∆)
which fulﬁlls the inequality set (7), if and only if there is a
n satisfying nmin ≤ n ≤ nmax, where
nmin = ⌈ρ/
M + pM 2 − 4γhγℓ
2
nmax = ⌊ρ/
M − pM 2 − 4γhγℓ
2
⌉ − 1
⌋ − 1
M = γh + γℓ −
2(α + βℓ)
tupincb ≥ 0
Figure 8 illustrates the solution space. In this ﬁgure, the
(n, β∆) solution pairs are in the space between the two lines
of the lower bound curve and the upper bound curve. Note
(5)
(6)
(7)
(8)
n = nmin = ⌈ρ/
M + pM 2 − 4γhγℓ
2
βT H = βℓ + β∆ min = βℓ +
⌉ − 1
γℓ(α + βℓ)
nmin+1 − γℓ
ρ
(10)
as our ﬁnal answer to the design problem.
We give a numerical example showing how to conﬁgure
EARDet based on the result above. Suppose the adminis-
trator of the detector chooses γℓ = 100KB/s, γh = 1M B/s,
ρ = 100M B/s, α = 1518 bytes, βℓ = 6072 bytes, tupincb =
1 second. Then using Equation (10), we choose n = 101 and
β∆ = 863 bytes. With these two parameters, the incubation
period is 0.7848 seconds which is smaller than tupincb = 1
second, and the no false positive rate is 100450 byte/s which
is larger than γℓ = 100000. The ratio between no false
ρ
n+1 and low-bandwidth threshold rate γℓ is
negative rate
ρ
n+1 /γℓ = 9.80. The results show that to achieve quick re-
action to large ﬂows and a small rate gap, the detector only
needs a small number of extra counters compared with the
− 1 = 99)
minimum number of required counters (i.e.
and a low burst gap.
ρ
γh
We obtain this particular solution by choosing the mini-
mum n and minimum β∆. We can also solve the inequality
set (5) for diﬀerent requirements, such as minimizing the
rate gap between ρ
· ρ.
β∆
α(n−1)+(n+1)β+(n+1)β∆
n+1 and
However, the inequality set (7) may be unsolvable for some
ρ, γℓ, βℓ, γh, α, tupincb. To make it solvable, we need to make
sure M 2 − 8γhγℓ and M are not negative in the inequality
set (9). Namely,
(9)
γh + γℓ −
2(α + βℓ)
tupincb ≥ p4γhγℓ
(11)
(12)
⇐ tupincb ≥
2(α + βℓ)
γh + γℓ − 2√γhγℓ
Moreover, according to Section 4.3, γh > γℓ is necessary
to make the inequality set (7) solvable.
222