code, such as the Bionic libraries, to communicate with the
kernel. Therefore, the path marked with 1 in Figure 3 is not
a feasible attacking path.
1
2
3
4
5
Disguise Usage of APIs.
Because of Java language
ﬂexibility, the fourth attack which is concealing APIs us-
age is feasible. The most well-known case is Java reﬂec-
tion, whose troublesome aspect to bytecode rewriting has
been documented by the existing work [14]. Using APIs
java.lang.reflect package, any ﬁelds or methods of
classes can be accessed or modiﬁed despite public or private
at runtime. Thus, besides normal method invocation, reﬂec-
tion provides another way to invoke methods or change the
behavior of methods. Reﬂection even can be used recursively
(self-reﬂection). Hacker may make use of these powerful ca-
pabilities to disguise APIs usage. However, current bytecode
rewriter [14] proposed defense mechanism against these at-
tacks by detecting and preventing methods invocation of
java.lang.reflect package. Other than Java reﬂection,
other techniques such as polymorphism may also result in
incomplete detection of APIs usages. Dynamic binding [21]
enables methods to be bound during runtime but compila-
tion. Any methods that adopts dynamic binding cannot be
determined at compile time, and hence can escape from de-
tection. However, researchers have discussed how to perform
type inference on Dalvik bytecode eﬀectively [23].
Invoke Native Methods & System Services Directly.
Because the ﬁrst attack path is infeasible and the fourth
attack path has been actively discussed, our main focus is
second and third attack path. In the following sections, we
present our successful attacks with structure of attack mech-
anism, attack evaluation and recommendation on counter-
measure. Attack mechanism illustrates techniques required
to make attack successful. Attack evaluation demonstrates
how applications can bypass current bytecode rewriter using
our attacks. Our evaluation is performed based on Android
4

In the code above, the MyClass class from the package
edu.com declares the myFunc method using the native
modiﬁer, which indicates that this method is actually an
entry point to native library function. At line 6, the shared
library myLib which contains the native functions is loaded
into the DVM. Once the library is loaded, DVM will attempt
to link the native Java method myFunc() to its correspond-
ing native library function. The linking can be conducted in
two diﬀerent ways.
Dynamic Name Resolution.
When the ﬁrst invoca-
tion of the myFunc method happens, DVM searches in the
loaded native libraries to ﬁnd the corresponding native li-
brary function. The searching is performed based on names.
DVM deduces the name of the corresponding native library
function using the following convention:
1. The name uses Java/ as the preﬁx.
2. The package name and class name are appended to the
preﬁx. Since the package name is edu.com and the
class name is MyClass, the resulting string is Java/
edu/com/MyClass.
3. The name of the native Java method is appended to
the above string. Since the method is myFunc, the re-
sulting string is Java/edu/com/MyClass/myFunc.
4. Any "/" in the above string is replaced with "_". This
results in the ﬁnal string Java_edu_com_MyClass_
myFunc.
The DVM will then search the loaded native libraries for
a function called Java_edu_com_MyClass_myFunc. If it
is found, the DVM will set up the internal data structure to
direct all future invocations of myFunc to this native library
function. In the native library, the function corresponding
to myFunc must be deﬁned in the following way:
1
1
2
3
4
5
6
7
1
2
3
4
5
6
7
8
9
10
11
12


JNIEXPORT jlong Java_edu_com_MyClass_myFunc(
JNIEnv* env, jobject thiz);
Static Methods Association In the method mentioned
above, linking to native functions is decided by DVM and
conducted when the ﬁrst invocation occurs. There is another
approach, in which the linking is decided by the native li-
brary through registration, not DVM. This registration typ-
ically happens when the native library is loaded, at which
time a JNI function called JNI_onLoad in the native library
is invoked. This function registers native functions to Java
methods using the RegisterNatives. The following code
snippet from a native library illustrates the process.

static JNINativeMethod method_table [] = {{
"myFunc", "(J)J",
(void *) myFunc_Implementation }};

extern "C" jint JNI_OnLoad(JavaVM* vm, ... ) {
jclass c = env->FindClass("edu/com/MyClass");

env->RegisterNatives(c, method_table, 1); } 
In the above example, within the JNI_OnLoad function,
the myFunc_Implementation native library function is
registered to the myFunc native Java method in the edu/
com/MyClass class. Note that in this case, native func-
tion myFunc_Implementation does not need to follow
the JNI naming convention as that in the previous dynamic
name resolution case. When a shared library is loaded using
the JNI method System.loadLibrary, DVM searches for
JNI_OnLoad in the shared library. If the function is found,
it will be invoked, so DVM can link the future invocation of
myFunc to myFunc_Implementation.
Another technique for static association is to delegate
this responsibility to another native function within the li-
brary and invoke this function after the library is success-
fully loaded. This is commonly used in Android framework.
The following code snippet from android_runtime library
demonstrates this technique:

static JNINativeMethod camMethods[] = {
{ "native_takePicture", "(I)V",
(void*)android_hardware_Camera_takePicture},
... };
int register_android_hardware_Camera(JNIEnv* env)
{ return AndroidRuntime::registerNativeMethods
(env, "andriod/hardware/Camera", camMethods,
...);}

extern "C" jint
Java_com_android_internal_util_WithFramework_

return register_android_hardware_Camera(env); } 
registerNatives(JNIEnv* env, ...) {
In the above example, Java_com_android_internal_
util_WithFramework_registerNatives native library
function can be invoked by registerNatives in com.
android.internal.util.WithFramework class throu-
gh the dynamic JNI naming resolution. This function reg-
isters other native functions to Java methods of Camera
class.
4.
INVOKE NATIVE METHOD DIRECTLY
From the discussions above, it is clear that to access priv-
ileged resources at the kernel, applications have to utilize

shared libraries. Apparently, the shared libraries could be
either provided by the Android platform or introduced by
applications. As we have stated earlier, in this paper, we
follow current bytecode rewriter assumption that app intro-
duced native code is not considered.
Bytecode rewriting enforces access control at the API-
level in Java bytecode, not in native code. Therefore, if an
application can directly invoke the native code without going
through those restricted APIs, the API-level access control
can be bypassed. This path is illustrated in Figure 3 as path
2 and Figure 4. In this section, we analyzed whether it is
possible for application’s Java code to directly invoke the
native code in the shared libraries provided by the Android
platform. We did identify two possible ways. Attack 1 is
presented in this section, and attack 2 is presented in the
section 5.
Figure 4: Invoke Native Library Directly
4.1 Exploit JNI Naming Convention
The way how native library functions are bound to native
Java methods, either through the JNI naming convention or
through registration, ensures that a native library function
is only bound to a particular Java API, i.e., that API is the
only path leading to the native library function. Therefore,
if the bytecode rewriting puts a secure wrapper on that Java
API, all the invocation of the corresponding native library
function has to go through the wrapper, hence going through
the intended access control. If we can ﬁnd a way to invoke
a native library function without going through its corre-
sponding Java API, we can evade the restriction enforced
by the wrapper.
Objective and Approach. The objective of our study is
to evaluate whether there is a way to invoke native library
functions through an unintended Java method, instead of
from the one under the protection. In this subsection, we
focus on the JNI naming convention, i.e., the dynamic nam-
ing resolution. This naming resolution attempts to link a
native library function to a unique Java method, achieving
a one-to-one mapping. Our approach is to study whether
there is a loophole in the naming resolution that allows us
to invoke the same native library function from two diﬀer-
ent Java methods, breaking the one-to-one mapping. Our
attack strategy is illustrated in Figure 5.
Attempt 1 (Failed): As demonstrated in the last exam-
ple, when DVM deduces the name of a native library func-
tion, "/" is replaced with "_". One hypothesis is whether
using "_" in the package, class, or method name can cause
ambiguity in the naming convention, and thus break the one-
to-one mapping. Let us look the following two classes:

//Example 1:
package edu.com;
public class MyClass {
1
2
3
5


Because now two methods can invoke the same native li-
brary function, if the API-level access control only block
the intended API, i.e., my_Func, in order to prevent ap-
plications from accessing privileged operations through the
corresponding native library function, the attacker can by-
pass this blocking and invoke the native library function
through another API.
4.2 Case Study
Our attack works on the native functions that have "_1"
in their names. We searched in the shared libraries pro-
vided by Android, and found some cases. For example,
the sqlite_jni library contains a function called Java_
SQLite_Database_error_1string, with the "_1" pat-
tern in the name. This function maps to the error_string
method in the Database class of the SQLite package. We
evaluated our attack based on this case. The attack ob-
jective is to invoke native library function Java_SQLite_
Database_error_1string of sqlite_jni library from
a diﬀerent Java method 1string of class SQLite.Database.
error.
package SQLite.Database;
public class error {
public static native String 1string(...);

static { System.loadLibrary(’sqlite_jni’); }} 
We had to rename Java method string to 1string di-
rectly on bytecode after compilation to deceive compiler.
Figure 6 taken from logcat output demonstrates that by
invoking SQLite.Database.error.1string we success-
fully invoked Java_SQLite_Database_error_1string.
Because of diﬀerent method signatures, any access control
policies placed on the SQLite.Database.error_string
method by current bytecode rewriter would not aﬀect in-
vocation of method SQLite.Database.error.1string.
Restrictions on the application become ineﬀective.
Figure 6: Successful Attack on SQLite app
Actually, if "_" appears in the name of a package, class, or
native Java method, then the corresponding native library
function must have "_1" in its name, creating an opportu-
nity for our attacks. Having "_" in these names is not a
common practice but at the same time is not totally absent.
Although today, luckily, there are not many native library
functions with this pattern, the existence of this loophole
can cause many problems when more native libraries are
added to Android. To ensure the security of the API-level
access control, this loophole needs to be ﬁxed.
4.3 Recommendations
To circumvent exploiting JNI name convention, bytecode
rewriter can perform checking on naming convention of type
descriptor and method. If any of them starts with numbers,
bytecode rewriter should remove the digit as it is illegal.
6



1
2
3
4
Figure 5: Exploit JNI Naming Convention
native public long my_Func(); }
//Example 2:
package edu.com.MyClass;
public class my {
native public long Func(); }

It appears that both native Java methods will map to
Java_edu_com__MyClass_my_Func. Unfortunately (to
attackers), Android has already thought about such a poten-
tial ambiguity, and its naming resolution replaces any "_"
in the name with "_1". Therefore, the ﬁrst method maps
to Java_edu_com_MyClass_my_1Func, while the second
maps to Java_edu_com_MyClass_my_Func. Other uni-
code characters, such as "&", ";", "[", etc., are also re-
placed in the same fashion. Our attempt failed.
Attempt 2 (Succeeded) Our failed attempt does lead
to another hypothesis: what if we put the number "1" in
front of a package, class, or method name, can we cause
ambiguity?
The reason why the JNI naming convention can use "_1"
to avoid the ambiguity caused by "_" is that in Java, no
package, class, or method name can start with a digit [7].
Any attempts to do so will encounter compile-time errors.
After digging into this, we realize that this naming violation
is only detected at the compile time, not during the run time.
Therefore, an attacker can add the digit to the beginning
of a name at the bytecode level, i.e., through his/her own
bytecode rewriting. We tried this, and have successfully
invoked a native library function from an unintended Java
API. We will show an example in the following.
Based on the JNI naming convention, the native library
function Java_edu_com_MyClass_my_1Func is supposed
to be mapped only to the my_Func function deﬁned in the
ﬁrst example in our previous attempt. However, we can
successful call this same native library function through a
diﬀerent Java method, i.e., the 1Func method. It should be
noted that in our Java code, we used Func() to pass the
compiler, and then changed Func() to 1Func() directly
on the bytecode. Here is what the program looks like if we
convert the modiﬁed bytecode back to Java code:

package edu.com.MyClass;
public class my {
native long 1Func();
static { System.loadLibrary(’myLib’); }}
4
5
6
7
8
9
1
2
3
4

DexClassLoader classLoader = new DexClassLoader(
"Camera.apk", ..., getClassLoader());
Class mClass = classLoader.loadClass("android.
hardware.Camera");
android.hardware.Camera c = (android.hardware.
Camera)mClass.newInstance();
//Access the privileged native code through

someFunc()
c.someFunc();
Unfortunately, the above attack does not work. Appar-
ently, our redeﬁned class was not loaded. We looked into
the code and ﬁnd out where the problem is.
In the class
DexClassLoader, we found that using DexClassLoader,
a Java class cannot be loaded again if it has already been
loaded by this class loader or by its parent class loaders 2.
This loading policy is implemented in DexClassLoader.
Attempt 2 (Succeeded): To make our previous attempt
successful, we need to change the loading policy, which means
we need to change DexClassLoader. This is impossible
without modifying the Android operating system. Fortu-
nately, DVM allows us to write our own customized class
loader. Our idea is to use this customized class loader to
load our redeﬁned android.hardware.Camera class, and
then somehow use this class in the application, instead of the
one provided by Android. DVM does allow two classes with
the same name to coexist, as long as they are in separate
class loaders.
In DVM, the DexClassLoader class is a subclass of
BaseDexClassLoader, and the loading policy is imple-
mented in the loadClass method. We can write another
subclass of BaseDexClassLoader, override its loadClass
method, but we skip the loading policy enforcement logic in
this method, i.e., we load the class without checking whether
it is already loaded by itself or by its parent class loaders.
Here is the implementation of our class loader:

public class MyDexLoader extends
BaseDexClassLoader {
// Constructor omitted
@Override
public Class loadClass(String s) {
Class c;
try { c = super.findClass(s);
return c;
} catch (ClassNotFoundException e) {
// handling the exceptions
return null; } }
}


1
2
3
4
5
6
5. EXPLOIT JAVA CLASS RELOADING
Another way to defeat the secure wrapper is to somehow
modify the implementation of the APIs that the wrapper is
trying to protect. If we can do this, the unauthorized access
can be launched from the modiﬁed implementation, which