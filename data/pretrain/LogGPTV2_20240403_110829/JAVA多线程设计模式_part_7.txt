一般来说，操作测试并不足
---
## Page 70
这样，那调用 check 方法的时候，name 的值会是"Alice",而 address 的值会是"Brazil"。
的原因：这是因为 pass 万法可被多个线程调用的关系。pass 方法是下面 4 行语句程
为什么会出错呢
补充说明：重新审查程序代码
调用pass方法，name字段与address 字段的值已经义被更改了。
好像起正确的，
开头字母不是应该要不相同才对吗？可是显示出 BROKEN 消息了，而调试消息却
调试消息也不可荒
安全的”可能性比较高，
以证明程序的安全性。操作测试（执行实验）所得到的结果，只不过表示“也许是
这时就会显示出BROKEN了。
用 pass 方法时，上面4 行语句可能会是交错依次执行的"1。如果交错的情况是图1-3
序代码所组成的：
全，
生问题、这是确保程序安全性最有效的方法。
个时候就要重新审查程序代码。由多个人仔细阅读程序源代码，检查是否会产
那么，接下来就要开始研究使用List1-2的Gate类时，之所以会显示出BROKEN
连执行测试与调试消息，都无法保证程序的安全性，那要怎么办才好呢？这
注1：在这里是以语句尚作线程的基本操作单位，事实上线程可能是以更小的单位在切换的。
为了在解说时简单（点，现在只考虑两个线程（Alice与 Bobby）。两个线程调
this.address = address;
或许会显示出错误的调试消息：
这也是多线程程序设计中较困难的地方。若调试消息的程序本身就并非线程安
会发生这种现象，是因为某个线程正在执行check 方法时，其他线程正不停地
图1-2的执行结果，姓名号出生地的开头字母真的不同的，其实只有这么一行：
这里既然出现了BROKEN的错误消息，姓名（Bobby）与出生地（Brazil）的
***** BROKEN ***** No.l0l0560: Bcbby. Brazil
不知1道读者有没有注意到图1-2中另外一个不可思议的现象。请看下面这--行：
check(）;
this.name = name;
this.counter++;
***** BROKEN ***** No.2179746: Bobby, Canada
 Single Threaded Execution
一能通过这座桥的，只有一个人
---
## Page 71
卡NA总线程设球模式
需要修改。
称为race condition。有race condition的情况时，就很难预测各字段的值了。
说，也有两个线程在比赛谁先将值改写。像这样子引发竞争（race）的状况，我们
将共享实例的字段改写了。
对此情况并不知情。
Alice 现在执行到的位置正指定 name 结束，还没指定 address的值"，而线程 Bobby
"Bobby",
范例程序2：
范例程序1之所以会显示出BROKEN，是因为线程并没有考虑到其他线程，而
check();
this.address = address;
this.counter++;
线程 Alice
使用 Single Threaded Execution Patterm 的范例
this.name = name;
check();
this.address = address:
this.counter++;
线程Alice
那么，我们就来将 List 1-2的 Gate 类修改成线程安全的版本吧。其他的类则不
以上是没有使用 Single Threaded Execution Patterm 时所发生的现象。
对 name 字段来说，有两个线程在比赛，赢的一方会先将值改写。对 address 来
或者说交错的情况如图 1-4 所示，则调用 check 方法的时刻，name 的值是
通常，线程是不会去考虑其他线程，而自己只会·直不停地跑下去的。“线程
上述哪--种状况，都使字段 name与address 的值出现非预期的结果。
而 address 的值会是"Alaska"。这个时候也会显示出 BROKEN。
图1-3线程 Alice 与线程 Bobby 调用 pass 方法的执行状况（1）
1-4 
线程Alice与线程Bobby调用pass方法的执行状况（2）
check();
this.address=address;
this.name = name;
this.counter++;
线程Bobby
checki);
this.name = name;
this.counter++;
线程Bobby
"Alice"
"Alice"
this rame 的值
*****BROKEN
"Alice"
"Alice"
"Bobby""
（之前的值）
"Bobby"
"Bobby""
"Bobby"
"Alice"
（之前的值）
this.name 的值
★★★★★
"Alaska'
this.address 的值
"Alaska"
"Brazil"
[之前的值]
"Brazil"
"Brazil"
this.address的值
（之前的值)
(之前的值)
"Alaska"
{之前的值]
（之前的值）
(之前的值)
---
## Page 72
synchronized 所扮演的角色
了呢？
全的可能性很高。
键结束程序执行。这个执行结果也并不能证明Gate类的安全性，但是我们可以说安
方法前面都加上 synchronized。这样 Gate 类就成为线程安全的类了。
线程安全的Gate类
为什么只要在 pass 方法与 toString 方法加上 synchronized,就不会显示BROKEN
List 1-4 是线程安全的 Gate 类。需要修改的有两个地方，在 pass 方法与 toString
执行结果如图1-5所示，无论等多久都没有显示BROKEN消息。请按【Ctl+C】
public class Gate f
List 1.4
private void check() {
pubiicsynchronizedString toString() 1
public ynchronizedvoid pass (String name, String address) ↑
i"araumonu = ssaippe Gutris areatid
private String name = "Nobody";
private int counter = O;
if (name.charAt(O) != address.charAt(O)) (
return "No."
check();
this.address = address1
this.counter++;
this.name = rame:
[无论等多久都没有 BROKEN。以Ctrl+C 结束程序）
Chris BEGIN
Bobby BEGIN
Alice BEGIN
 Single Threaded Execution
线程安全的Gate类（Gatejava）
图1-5执行结果
能通过这座桥的，只有一个人
" + address;
---
## Page 73
1-4这类的情况。而-定是图1-6或图1-7的样子。
Alice 执行完pass 方法之后，
Alice 执行完pass 方法之前，
说
能会被多个线程穿插执行。
check(l;
线程 Alice
this.address - address;
this.name = name;
this.counter++;
check();
this.address = address;
this.name = name;
this.counter++;
线程Alice
【解除锁定】
【获取锁定】
【解除锁定】
【获取锁定】
所以只要将 pass 方法声明成 synchronized的方法，就绝对不会出现图1-3或图
synchronized 方法，能够保证同时只有一个线程可以执行它。这句话的意思是
姐前·节后面所说的，
图1-7线程 Alice 与线程 Bobby 调用 synchronized 的 pass 方法时的执行状况（2）
图1-6线程Alice 与线程 Bobby 调用 synchronized 的pass方法时的执行状况（1）
一
this.name = name;
this.counter++;
线程Bobby
this.address=address;
check(};
this.address=address;
this.name = name;
this.counter++;
线程Bobby
【解除锁定】
check(); 
【获取锁定】
【解除锁定】
【获取锁定】
之所以会显示 BROKEN，是因为 pas方法内的程序可
：将锁定解除线程Bobby才可以开始执行pass 方法，
线程 Bobby会在pass方法的入口处被阻挡下。当线程
"Alice"
"Alice"
"Bobby"
"Bobby"
"Bobby"
"Bobby'
"Bobby"
this.name 的值
"Alice"
"Bobby"
"Bobby"
（之前的值）
'Alice'
"Alice"
"Alice"
"Alice"
（之前的值）
this.address 的值
"Alaska"
"Alaska"
"Brazil"
"Brazil"
"Brazil"
"Brazii"
"Brazil"
"Alaska"
"Alaska"
"Alaska"
"Alaska"
this.address 的值
"Brazil"
（之前的值）
(之前的值)
（之前的值）
（之前的值）
---
## Page 74
synchronized方法，就可以实现这个目标。
状态产生矛盾的方法。所以必须加以防卫，使同时不能有多个线程同时执行这个方
方法，而这些方法又分为下面两类：
的类出现。在范例程序2中，Gate类就是这个 SharedResource 参与者。
SharedResource（共享资源）参易者
同时只能有1个线程可以调用它。在 Java 语言中，只要将unsafeMethod 定义成
Threaded Execution Pattern.
接下米就脱离具体的程序代码，使用更
的理由，则留到本章末的练习问题1-3研究。
 Single Threaded Execution Pattern 的
SharedResource参与者是可由多个线程访问的类。SharedResource 会拥有些
所有参与者
在 Single Threaded Execution Pattern 中，我们将 unsafeMethod 加以防卫，限制
unsafeMethod（不安全的方法）则是被多个线程同时执行时，可能会使实例的
·SafeMethod----从多个线程同时调用也不会发生问题的方法：
Single Threaded Execution Pattern 中，有担任 SharedResource（共亨资源）角色
unsafeMethod2 [guardedl
unsafeMethodl (guardedl
类图如图1-8、时序图如图1-9所示。
这个必须只让单线程执行的程序范围，
safeMethod（安全的方法）并不需要特别处理。
·UnsafeMethod—从多个线程同时调用会出问题，而需要加以防护的方法。
相信读者已经在范例程序中抓住 Single Threaded Execution Patten 的感觉了，
而 toString方法需要加上 synchronized的理il，,与check 方法不加上 synchronized
safeMethod2
safeMethodl
SharedResource
 Single Threaded Execution-
图 1-8 Single Threaded Execution Pattern 的类图
我们称为临界区（critical section）。
般的表达方式，来观察、归纳 Single
个线程执行
{guarded}表示方法同时只允许一
能通过这座桥的，只有一个人
5
---
## Page 75
用户就不必考虑需不需要使用 Single Thtreaded Execution Pattern。
Threaded Execution Pattern的必要。我们将这个状态称为线程互不-干涉（interfere）：
实例可能同时被多个线程访问的时候。
截据可被多个线程访问的时候
心有人会突然打开厕所的门了：
家中还是将测所的门锁住的意思一样。既然是一个人住，即使不锁门，也不需要担
略微降低。
但是调用 syhchronized 方法会比调用－-般的方法多花一些时间，所以会使程序性能
多线程时
何时使用（适用性）
8
即使在单线程程序中使用 synchronized方法，也不会对程序的安全性造成危害。
扩展思考方向的提示
有些管理多线程的环境，会帮我们确保线程的独立性，这种情况下这个环境的
就算是多线程程序，如果所有线程完全地独立运行，那也没有使用 Single
在单线程程序中使用 synchronized 方法，就好像在外独居的人，即使一个人在
会需要使用 Single Threaded Execution Pattermn 的情况，是在 SharedResource 的
单线程程序，并不需要使用 Single Threaded Execution Pattern。因此，也不需要
Single Threaded Execution Pattern该在什么情况下使用呢？
图1-9 Single Threaded Execution Pattem 的时序图
-
unsa feMethod?
unsafeMethodl
:ShatedResour.
synobrohlsod
1
---
## Page 76
就造成以下的情况：
的旁边只有一-支汤匙与一支叉子，而要吃意大利面时，同时需要用到汤匙与叉子。
现象。发生死锁附，哪个线程都无法继续执行下去，所以程序会失去生命性。
生命性与死锁
补充说明：线程安全的包装方法
候
需要确保安全性的时候
实例的状态不会改变，所以是不需要用到 synchronized方法的一种Pattern。
Execution Patterm 的必要。
Execution Pattern 的需要。
状志可能变化的时候
程安全地运行。
如果实例创建了以后，从此不会再改变状态，也没有使用 Single Threaded
只有-支的汤匙，被 Alice 拿去了，而只有--支的叉子，却被 Bobby 拿走了。
来举个例子吧。假设Alice 与 Bobby 同吃一个大盘子所盛放的意大利面。盘子
第2章所要介绍的 Immutable Patterm 就像这种情况。在 lmmutable Patterm 中，
所谓的死锁，是指两个线程分别获取了锁定，互相等待另一个线程解除锁定的
使用 Single Threaded Execution Patterm 时，可能会有发生死锁（deadlock）的危险。
接着要思考的是 Single Threaded Execution Pattern的生命性。
细节部分请参阅java.util.Collections 类的 API 参考文件。
● synchronizedSortedSet 方法
● synchronizedSortedMap 方法
● synchronizedSet 方法
●synchronizedList 方法
● synchionizedCollection 方法
所以用广需要考虑自己要用的类需不需要考虑线程安全再使用。
可以让程序的运行速度较高。
例如，Java 2 的集合架构类多半并非线程安全。这是为了在不考虑安全性的时
只有需要确保安全性的时候，才会需要使用 Single Threaded Execution Patterm。
 Single Threaded Execution—
一能通过这座桥的，只有一个人
---
## Page 77
理由(1)：获取锁定要花时间
对多线程程序设计来说，继承也会引起许多麻烦的问题。我们通常称之为继承异常
化时丧失安金性。也就是说，包括子类，若非所有unsafeMehod 都定义成
也就是说好不容易考虑安全性而写出的 SharedResource 参与者，还是有可能在子类
段开放给子类访问时，会有撰写子类的程序员可能写出没有防卫的unsafeMethod。
持不下，使程序无法继续运行的状态，就称为死锁。
临界区的大小与执行性能
可重用性与继承异常
码留到本章末的练习问题1-6研究。
( inheritance anomaly ) :
进入 synchrouized方法时，要获取对象的锁定，这个操作会花一点时间。
--般来说，Single Threaded Execution Pattern会使程序执行性能低落的原因有两个：
假设现在有人写了-个 SharedResource 参与者的子类，当 SharedResource 的字
这里要思考 Single Threaded Execution Pattern 的可重用性。
回过头来看前面吃不到意人利面的两个人这个例子。
SingleThreaded Execution达到下面这些条件时，
这么一来Aice 与Bobby只有面面相，就这样不动了。像这样，多个线程
●握着叉子的 Bobby，--直等着Alice 把汤匙放F：
●掘若汤匙的 Alice，一直等着Bobby 把叉子放下.
（1）、（2）、（3）中只要破坏-种条件，就可以避免死锁的发生，具体的程序代
（2）锁定某个 SharedResource 参与者后，就去锁定其他 SharedResource。就相
（1）多个 SharedResource 参与者，相当于汤匙与叉子。
（3）获取 SharedResource 参与者的顺序不固定（和 SharedResource 参与者是
（2）线程锁定一个 SharedResource 时，还没解除前就去锁定另-一个SharedResource。
（1）具有多个SharedResource参与者，
（3）SharedResource 角但是对等的，就像“拿汤匙→拿叉子”与“拿叉子→拿
对等的），
汤匙”两个操作都可能发生。也就是说在这里汤匙与叉子并没有优先级。
这些操作。
当于握着汤匙而想要获取对方的叉予，或握着叉子而想要获取对方的汤匙
，可能会出现死锁的现象。
---
## Page 78