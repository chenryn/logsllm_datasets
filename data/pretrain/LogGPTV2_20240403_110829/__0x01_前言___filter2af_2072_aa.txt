### **0x01 前言**
ThinkPHP框架是当前国内最流行的PHP框架之一，虽然TP3.2.3这个版本和国外的开源框架还是有一定距离，但是人家教程多，用户量多，中文文档写得奇的优点，现在工作的公司用的是thinkphp3.2框架进行开发，TP框架为我们开发者提供了底层的安全过滤功能，所以我在使用TP框架开发的时候并没有很仔细的去想过安全的问题，而最近也是挤出了一点时间，想知道TP框架底层是如何运作的，底层是如何防注入的，看了一下文档，看了一下源码，找了一些资料，整理出了一些TP框架运行的原理。
### 0x02 简介
通读源码的话，当然要从下载源码开始 : )
下载地址：
版本：[ThinkPHP3.2.3完整版](http://www.jianshu.com/writer)
技术准备：PHP基础，MySql基础
使用工具：Visutal Studio Code
服务器环境：xampp
推荐使用：phpStudy (推荐使用这个免得为了环境的问题浪费时间)
安装教程什么的话，我就省略了，我们直接进入正题
### 0x03 思路
​ 接下来介绍一下大概的思路（完成），然后介绍框架运行的原理，在然后说一下防注入的方法，最后说说审计Tp的思路与方法
​ 本文相关文件：
> 系统公共函数库： \ThinkPHP\Common\functions.php (封装了TP开放给外部的函数)
>
> ThinkPHP Model模型类： ThinkPHP\Library\Think\Model.class.php
> (TP的数据库架构类，提供curd类库，是一个对外的接口 )
>
> TP内部curd类： ThinkPHP\Library\Think\Db\Driver.class.php
> (这个类的函数都被Model类中的curd操作间接的调用)
这里的话要大概说一下Tp在执行数据库操作之前的处理思路。
  1. 函数`M`使用了以后会自动创建`new Model`类并且会实例化为一个对象返回此资源,
Ps：这里我们的`M(‘goods’)` `goods`是你的数据库表名，我们后面都简称为`goods`对象,
  2. 接着这个`goods`对象调用了`where`方法并且格式化处理以后,会将这个值赋值给`goods`对象的一个成员变量`$options`（注：这里需要特别说明一点，如果说我们在`goods`对象中有调用其他的方法赋值例如`where,table,alias,data,field,order,limit,page,group,having,join,union,distinct,lock,cache,comment`等等这种操作方法，那么都会先赋值给`goods`对象，而不是在代码直接进行sql语句拼接，所以我们使用Tp的连贯操作的时候，就不需要像SQL语句拼接那样需要考虑到关键字的顺序问题,想了解有关于`M`函数的具体信息的请下载TP3.2.3开发手册中的模型与连贯操作进行仔细了解，(因为时间的问题这里就不很仔细的讲解）
  3. 处理完了前面选项之后，接下来就会去调用我们的`find()`方法去调用底层的一个`select`方法（Driver.class.php这个类中的select方法）来获取数据。所谓的find()方法就是等同于先给`goods`对象的一个成员变量`$options`赋值操作`limit=1`然后进行`select`操作来获取对应的数据。
  4. 到了`select`操作以后又是一个完全不一样的世界。
最终执行的sql语句的话大概是这样：
    SELECT * FROM `tdb_goods` WHERE goods_name='R510VC 15.6英寸笔记本' limit 1
​ 如果给他赋值了一个操作例如
    M('goods')->field('goods_id,goods_name')->where( array('goods_name'=>$goods_name) )->find();
​ 最终执行的sql语句：
    SELECT goods_id,goods_name FROM `tdb_goods` WHERE goods_name='R510VC 15.6英寸笔记本' limit 1
Driver.class.php这个类中除了处理`curd`操作，还处理`pdo`绑定，这里的`pdo`绑定并不是我们本文的重点内容所以简单提起他知道有这么一个东西就完了，我们的重点是了解TP的`curd`操作是如何进行的。
//这里可以开始真真分析了 说明连接的过程执行的操作等
### 0x04 正文
我们一个一个解释来，先按顺序来介绍Model模型类几个重要的成员变量
#### 4.1、where()方法的执行过程
这里的话，有个画红色方框的地方，我们可以通过官方文档来具体了解他的意思
这里可能有一些人看不懂，我简单的讲解一下 `where()` 方法
  1. 如果 传递的是`$Model->where("id=%d and username='%s' and xx='%f'",array($id,$username,$xx))`这种格式的，
  2. 那么就会进入我们上图 红色方框的流程里面，进行 mysql 的`mysql_escape_string`函数进行处理。 
  3. 处理完成以后就会将已处理完成的数组赋值到goods对象的成员函数`$this->options['where']`随后返回 供我们进行下一步的处理
注：mysql_escape_string 的作用与addslashes 的作用是差不多的。
具体区别：
> 在magic_quotes_sybase=on时将“ '”转换成“ ' '”  
>  在magic_quotes_sybase=off时将“ '”转换成“\ '”  
>  而mysql_escape_string总是将“ '”转换成“\”
#### 4.2 find() 方法的执行过程
这个方法的功能的话就是 获取主键，完善`model`类的成员变量 `options`数组
然后实例化`db`类调用`select`方法获取数据,然后处理数据完以后返回数据。
##### 4.2.1 Find方法使用的`$this->_parseOptions()`讲解
这个方法的主要功能就是 获取操作的表名，查看是否有取别名
获取操作的模型，比对当前表的数据库字段是否一致，如有不一致的字段`$this->options['strict']`设置了时，进行报错处理否则进行删除多余字段的处理。
执行过滤的方法为`_parseType` ,他的功能是数据类型检测并且进行强制转换
> 强制转换的类型为int,float,bool 三种类型
上图中的`_parseType`方法
##### 4.2.2 Find方法使用的`$this->db->select()`方法讲解
`$this->db`是在Driver.class.php 类中的方法，我们跟进去
#### 4.3 parseWhere方法分析
​
我们这里用我们比较重要的`parseWhere`方法进行分析（为什么要用parseWhere方法进行分析呢？因为这个地方比其他的要复杂的多，其次是因为其他的都是拼接字符串，过滤，然后返回，所有没有什么好讲的）
这里的话图很多,调用的函数也很多,我们简单的来说说他的处理过程
  1. 首先说说parseWhere方法
这方法会去判断传进来的变量内容是否是字符串
如果是的话，那么就会直接返回
如果不是字符串而是数组的话，那么就会挨个的解析,并且判断是否是特殊的条件表达式，如果是调用`parseThinkWhere`
方法此方法主要是解析特殊的条件并且调用