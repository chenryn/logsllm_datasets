which moves the code from the memory of 0x00030000 to the .text section:
Figure 5.39 – The rep movsd instruction 
138     Bypassing the Static Engine
6. Next, with the unpacked code in the .text section, we can go to the Memory Map 
tab, right-click on the .text section, and select Follow in Disassembler, as can be 
seen in the following screenshot:
Figure 5.40 – Follow in Disassembler button
7. Now, we land at the region of the unpacked code. Scrolling down, you will notice a 
function prologue that comprises two assembly instructions: push ebp and mov 
ebp, esp. This prologue is the start of the unpacked code— meaning our OEP. 
8. Now, we will need to get the EIP register to point to the address of our OEP, and 
finally, dump our unpacked code using Scylla. Here is how the Scylla screen appears 
once we have the OEP and have selected IAT Autosearch and Get Imports:
Antivirus bypass using packing     139
Figure 5.41 – Scylla view: dump process
9. Now, after clicking on the Dump button to dump the unpacked process and save it 
to a file, click Fix Dump to fix the dumped file, if needed. 
10. In the following screenshot, you can see that the unpacked executable runs perfectly 
and without any issues:
Figure 5.42 – The Hello World.exe file executes successfully after the manual unpacking process
Now that we understand the two unpacking methods, let's proceed with some more 
information about packers.  
140     Bypassing the Static Engine
Packers – false positives
Sometimes, when packing an executable file, antivirus software can falsely detect a 
legitimate file as a malicious one.
The problem occurs with the static detection mechanism of the antivirus software, 
which may perform detection on the file after packing took place. The antivirus software 
compares particular strings to signatures in its database.
For example, if a legitimate file contains a string named UPX0 as well as a string named 
UPX1, the antivirus software could flag this as malware. Obviously, this would be a false 
positive.
The following screenshot demonstrates the results using VirusTotal when we scanned the 
original Windows executable, mspaint.exe:
Figure 5.43 – VirusTotal's results of the original mspaint.exe file 
And here is the result of scanning the same file after packing it with UPX: 
Figure 5.44 – VirusTotal's results of the original mspaint.exe file after packing with UPX
In the preceding screenshot, we can see four antivirus engines and Endpoint Detection 
and Response (EDR) have mistakenly detected the legitimate mspaint.exe file as 
malware.
It is fair to assume that when one of these signature-based defense mechanisms is installed 
on the endpoint, it will not let the file run, even though it is a legitimate file mistakenly 
raising a false positive.
Summary     141
Every packer is built differently and has a different effect on the executable file. Although 
using a packer is today widely seen as an effective method of bypassing antivirus engines, 
it is by no means enough. Antivirus programs contain a large number of automatic 
unpackers, and when antivirus software detects a packed file, it tries to determine which 
packer was used and then attempts to unpack it using the unpacking engine. Most of the 
time, it succeeds.
But there is still another way to bypass antivirus engines using packing. To use this 
method, we must write an "in-house" custom-made packer or use a data compression 
algorithm unknown to the targeted antivirus software, thus causing the antivirus software 
to fail when it tries to unpack the malicious file.
After writing a custom-made packer, it will be nearly impossible to detect the malware, 
because the unpacking engine of the antivirus software does not recognize the custom-
made packer.
To detect custom-made packers, antivirus vendors should know how to identify and 
reverse-engineer the custom-made packer, just as we did before, and then write an 
automated unpacking algorithm to make detection more effective. 
Now that we understand what packers are and why antivirus software cannot detect 
malware that is packed with a custom-made packer, we can now summarize this chapter.
Summary
In this chapter of the book, we learned about three antivirus static engine bypass 
techniques. We learned about rename and control-flow obfuscations, about YARA rules 
and how to bypass them easily, and we also learned about encryption types such as 
oligomorphism, polymorphism, and metamorphism, and why packing is a good method 
to bypass static antivirus engines.
In the next chapter, you will learn about four general antivirus bypass techniques.
6
Other Antivirus 
Bypass Techniques
In this chapter, we will go into deeper layers of understanding antivirus bypass techniques. 
We will first introduce you to Assembly x86 code so you can better understand the 
inner mechanisms of operating systems, compiled binaries, and software, then we will 
introduce you to the concept, usage, and practice of reverse engineering. Afterward, we 
will go through implementing antivirus bypass using binary patching, and then the use 
of junk code to circumvent and harden the analysis conducted by security researchers 
and antivirus software itself. Also, we will learn how to bypass antivirus software using 
PowerShell code, and the concept behind the use of a single malicious functionality.
In this chapter, we will explore the following topics:
• Antivirus bypass using binary patching
• Antivirus bypass using junk code
• Antivirus bypass using PowerShell
• Antivirus bypass using a single malicious functionality
• The power of combining several antivirus bypass techniques
• Antivirus engines that we have bypassed in our research
144     Other Antivirus Bypass Techniques
Technical requirements
To follow along with the topics in the chapter, you will need the following:
• Previous experience with antivirus software
• A basic understanding of detecting malicious PE files
• A basic understanding of the C/C++ or Python programming languages
• A basic understanding of computer systems and operating system architecture
• A basic understanding of PowerShell 
• Nice to have: Experience using debuggers and disassemblers such as IDA Pro and 
x64dbg
Check out the following video to see the code in action: https://bit.ly/3zq6oqd
Antivirus bypass using binary patching
There are other ways to bypass antivirus software than using newly written code. We can 
also use a compiled binary file. 
There are a few antivirus software bypass techniques that can be performed with already 
compiled code that is ready to run, even if it is detected as malware by antivirus engines.
We have used two sub-techniques while performing research toward writing this book:
• Debugging / reverse engineering
• Timestomping
Let's look at these techniques in detail.
Introduction to debugging / reverse engineering
In order to perform reverse engineering on a compiled file in an Intel x86 environment, 
we must first understand the x86 assembly architecture.
Assembly language was developed to replace machine code and let developers create 
programs more easily.
Assembly is considered a low-level language, and as such, it has direct access to the 
computer's hardware, such as the CPU. Using assembly, the developer does not need to 
understand and write machine code. Over the years, many programming languages have 
been developed to make programming simpler for developers.
Antivirus bypass using binary patching     145
Sometimes, if we – as security researchers – cannot decompile a program to get its source 
code, we need to use a tool called a disassembler to transform it from machine code to 
assembly code.
The following diagram illustrates the flow from source code to assembly code:
Figure 6.1 – The flow from source code to assembly code
The debugging technique is based on changing individual values within the loaded 
process and then performing patching on the completed file.
Before we dive into debugging malicious software in order to bypass antivirus, it is helpful 
to understand what reverse engineering involves.
What is reverse engineering?
Reverse engineering is the process of researching and understanding the true intentions 
behind a program or any other system, including discovering its engineering principles 
and technological aspects. In the information security field, this technique is used mostly 
to find vulnerabilities in code. Reverse engineering is also widely used to understand the 
malicious activities of various types of malware.
In order to understand how to reverse engineer a file, we'll include a brief explanation of a 
few important fundamentals.
146     Other Antivirus Bypass Techniques
The stack
The stack is a type of memory used by system processes to store values such as variables 
and function parameters. The stack memory layout is based on the last in, first out 
(LIFO) principle, meaning that the first value that is stored in the stack is the first value to 
be "popped" from the stack. The following diagram demonstrates the LIFO principle: Data 
Element 5 is the last value to be pushed onto the stack, and it is therefore the first element 
to be popped from the stack:
Figure 6.2 – Stack PUSH and POP operations
Now we understand what the stack is, let's continue with the heap and the CPU registers.
The heap
In contrast to stack memory, which is linear, heap memory is "free-style," dynamically 
allocated memory. Heap memory can be allocated at any time and be freed at any time. It's 
used mainly to execute programs at runtime within operating systems.
Antivirus bypass using binary patching     147
Assembly x86 registers
The x86 architecture defines several general-purpose registers (GPRs), along with a 
number of registers for specific operations. The special memory locations are an integral 
part of the CPU and are used directly by the CPU. In today's computers, most registers 
are used for operations other than those for which they were originally intended. For 
example, the 32-bit ECX (or RCX in 64 bit) register is generally used as a counter for 
operations such as loops and comparisons, but it can also be used for other operations. 
The following list of registers describes the general purpose of each:
• EAX – Used generally for arithmetic operations; in practice, used as a memory 
region to store return values, and for other purposes.
• EBX – Generally used to store memory addresses.
• ECX – Mostly used as a counter for loop operations and comparisons.
• EDX – Mostly used for arithmetic division and multiplication operations that 
require more memory to store values. Also, EDX stores addresses used for I/O 
(input/output) operations.
Indexes and pointers
There are the registers used as pointers to specific locations:
• ESI – The source index, mainly used to transfer data from one memory region to 
another memory region destination (EDI).
• EDI – The destination index, mainly used as a destination for data being transferred 
from a source memory region (ESI).
• ESP – Used as part of the stack frame definition, along with the EBP register. ESP 
points to the top of the stack.
• EBP – Also used to define the stack frame, along with the ESP register. EBP points 
to the base of the stack.
• EIP – Points to the next instruction to be executed by the CPU.
148     Other Antivirus Bypass Techniques
Assembly x86 most commonly used instructions
These are the basic and most commonly used CPU instructions:
• MOV – Copies a value from the right operand to the left operand, for example, mov 
eax, 1. This will copy the value of 1 to the EAX register.
• ADD – Adds a value from the right operand to the left operand, for example, add 
eax, 1. This will add the value of 1 to the EAX register. If the EAX register had 
previously stored the value of 2, its value after execution would be 3.
• SUB – Subtracts a value from the left operand, for example, sub eax, 1. This will 
subtract the value stored in the EAX register by 1. If the EAX register had previously 
stored the value of 3, its value after execution would be 2.
• CMP – Compares values between two operands, for example, cmp eax, 2. If the 
EAX register was storing a value equal to 2, usually the following instruction would 
contain a jump instruction that transfers the program execution to another location 
in the code.
• XOR – Conducts a logical XOR operation using the right operand on the left 
operand. The XOR instruction is also used to zeroize CPU registers such as the EAX 
register, for example, xor eax, eax. This executes a logical XOR on the EAX 
register, using the value stored in the EAX register; thus, it will zeroize the value of 
EAX.
• PUSH – Pushes a value onto the stack, for example, push eax. This will push the 
value stored in the EAX register onto the stack.
• POP – Pops the most recent value pushed to the stack, for example, pop eax. This 
will pop the latest value pushed to the stack into the EAX register.
• RET – Returns from the most recent function/subroutine call.
• JMP – An unconditional jump to a specified location, for example, jmp eax. This 
will unconditionally jump to the location whose value is stored in the EAX register.
• JE / JZ – A conditional jump to a specified location if the value equals a 
compared value or if the value is zero (ZF = 1).
• JNE / JNZ – A conditional jump to a specified location if the value does not equal 
a compared value or if the value is non-zero (ZF = 0).
Antivirus bypass using binary patching     149
The CPU has three different modes: 
• Real mode 
• Protected mode
• Long mode
The real mode registers used as 16-bit short like registers: AX, BX, DX, while the protected 
mode is based on 32-bit long registers such as EAX, EBX, EDX, and so on.
The 64-bit long mode registers an extension for 32-bit long registers such as RAX, RBX, 
and RDX.
The following is an illustration to simplify the layout representation of the registers: 
Figure 6.3 – Registers layout illustration
Once we understand the basics of the assembly architecture, let's see some assembly x86 
code examples.
Assembly x86 code examples
Example 1: Here is a basic Assembly x86 program to print a string with a value of 
"Hello, World":
global  _main
    extern  _printf
    section .text
_main:
    push    string
    call    _printf
    add     esp, 4
    ret
150     Other Antivirus Bypass Techniques
string:
    db  'Hello World!', 10, 0
To run this code on your machine, it is recommended to use NASM Assembler. 
You can download NASM from https://www.nasm.us/pub/nasm/
releasebuilds/2.15.05/win64/nasm-2.15.05-installer-x64.exe, and 
gcc, you can get from http://mingw-w64.org/doku.php/download.
To execute the code, use the following commands:
nasm -fwin32 Hello_World.asm
gcc Hello_World.obj -o Hello_World.exe
These are the commands used to compile the Hello_World.asm program:
Figure 6.4 – Hello_World.asm compilation process
The first line declares the main function of our code, and the second line imports the 
printf function.
Next, the section instruction, followed by the .text declaration, will define the 
.text segment of our program, which will include all of the assembly instructions. 
The .text section contains two subroutines: the main subroutine that will execute all 
of the assembly instructions, and the "string" memory region that will hold the Hello 
World! message declared by the db assembly instruction.
Under the _main subroutine, the first line is used to push the "Hello World!" message 
as a parameter to the _printf function, which will be called on the next line.
The following line, call _printf, will call the _printf function and transfer 
execution to it. After the _printf function is executed, our message is printed to the 
screen and the program will return to the next line, add esp, 4, which will, in turn, 
clear the stack. Finally, the last line of ret will return and the program's execution will 
terminate.
Antivirus bypass using binary patching     151
Example 2: This next example is simple symmetric XOR-based encryption, which takes 
a binary byte input of binary 101 and encrypts it with the binary key of 110. Then, the 
program decrypts the XOR-encrypted data with the same key:
IDEAL
MODEL SMALL
STACK 100h
DATASEG
    data db 101B
    key db  110B
CODESEG
encrypt:
        xor dl, key
        mov bl, dl
        ret
decrypt:
        xor bl, key
        mov dl, bl
        ret
start:
        mov ax, @data
        mov ds, ax
        mov bl, data
        mov dl, bl
        call encrypt
        call decrypt
152     Other Antivirus Bypass Techniques
exit:
    mov ah, 4ch
    int 21h
END start
To run this code on your machine, it is recommended to use Turbo Assembler 
(TASM). You can download TASM at https://sourceforge.net/projects/
guitasm8086/.
To execute the code, press F9:
Figure 6.5– Assemble, Build, and Run example
In the DATASEG segment, there are two variable declarations: the data intended to be 
encrypted, and a second variable that serves as our encryption key. 
In the CODESEG segment, we have the actual code or instructions of our program. This 
segment includes a number of subroutines, each with a unique purpose: the encrypt 
subroutine to encrypt our data, and the decrypt subroutine to decrypt our data after 
encryption takes place.
Antivirus bypass using binary patching     153
Our program begins to execute from the start subroutine and will end by calling the 
exit subroutine, which, in turn, uses two lines of code to handle the exit process of our 
program.
The first two lines of the start function initialize the variables defined within the 
DATASEG segment, while the third assigns the input variable to BL, the 8-bit lower 
portion of the 16-bit BX register.
Then, the encryption subroutine is called by the call encrypt instruction.
Once execution is transferred to the encrypt subroutine, our input will be encrypted  
as follows:
1. The XOR instruction encrypts the initialized data in the lower portion of the DX 
register (DL) using the key variable, which was initialized with the encryption key.
2. The XOR-encrypted data is now copied from the lower portion of the DX register 
(DL) to the lower portion of the BX register (BL).
3. Finally, the ret instruction is used to return from the function.
After the program returns from the encryption subroutine, it will call the decrypt 
subroutine using the call decrypt instruction.
Once execution passes to the decrypt subroutine, the input will be decrypted as follows:
1. The XOR instruction decrypts the initialized data in the lower portion of the BX 
register (BL) using the key operand, which was previously initialized with the 
encryption key, just as was done during the encryption phase.
2. The XOR-encrypted data is now copied from the lower portion of the BX register 
(BL) to the lower portion of the DX register (DL).
3. Finally, the ret instruction is used to return from the function.
Finally, the program reaches the exit subroutine, which will handle the termination of 
the program.