### Optimized Text

**Each Trace Record Contains:**
- Input to the FPU.
- Output value.
- The number of FP multiplies.

**FPU Overclocking and Monitoring:**
Initially, the FPU is clocked at its nominal operating frequency. The ISE tool generates all input traces for this frequency. The FPU is then progressively overclocked in incremental steps to emulate the gradual timing degradation experienced during its lifetime. At each step, above the nominal operating frequency, input operand pairs that exercise the longest paths in the FPU are fed into the system. This allows us to measure the overhead of WearMon in the common case when no errors are encountered.

**Mid-Stage Monitoring:**
In mid-stage monitoring, we use two different schemes to determine when to adjust the test interval. The first scheme uses a linear decrease in the test interval as the fail rate of the tests increases. The maximum (initial) test interval for emulation purposes is 100,000 cycles, which will be reduced in equal steps down to 10,000 cycles when the fail rate is detected as being 100%. For example, if one out of the eight previous tests has failed, DTC selects 88,750 cycles as the test interval (100,000 - (90,000/8)).

An alternative scheme reduces the test interval in eight steps by dividing it in half at each step. If the number of test failures in the last eight tests is zero, DTC makes a decision to initiate the next test after 100,000 cycles. If two out of the eight previous tests have failed, DTC selects 250,000 cycles as the test interval. These two schemes allow us to measure how different policies affect the overheads.

**Late-Stage Monitoring:**
In late-stage monitoring, the goal is to emulate the behavior of the CUT (Circuit Under Test) at the time of significant wearout. At every test phase, we read the CUT temperature, which has been collected as part of our trace to emulate delay changes. For each 1.25°C increase in temperature, the test clock period is reduced by 6.66 nanoseconds. This is an unrealistic assumption, but it forces the RMU to test the CUT more frequently, thus increasing the test interval.

**Dynamic Adaptation of RMU:**
Figure 3 shows how DTC dynamically adapts the test interval in late-stage monitoring. The horizontal axis represents the trace record number, which indicates the execution time. The vertical axis shows the test fail rate seen by DTC. The highlighted area in the middle plot shows a dramatic reduction in the test interval, focusing on 20 back-to-back tests.

**Experimental Results:**
- **Area Overhead:** The RMU and FPU implemented on FPGA utilize 4994 FPGA slices, with 4267 used by the FPU and 727 by the RMU. Out of the 8818 SRAM LUTs, 953 are used by the RMU, and 7865 by the FPU. The FPU also uses fifteen dedicated DSP48E slices, while only one is used by the RMU.
- **Monitoring Overhead:** Figure 4(a) shows the execution time overhead of testing compared to the total execution time of the benchmark traces. The horizontal axis shows the number of test injections for each benchmark, and the vertical axis shows the overhead as a percentage of the total trace length. The test interval decreases from 100,000 cycles to 10,000 cycles depending on the test fail rates. Figure 4(b) shows the same results using an exponential test interval adjustment method.

**Opportunistic Testing:**
Testing overhead can be reduced to zero if tests are performed opportunistically when the CUT is idle. Two important characteristics of testing opportunities have been studied:
1. The duration of an opportunity.
2. The distance between opportunities.

For generating these results, we used Simplescalar to identify when the FPU is idle. The distribution of opportunity duration and the distance between opportunities are shown in Figure 6.

**Conclusion:**
The experimental results demonstrate the effectiveness of the WearMon framework in monitoring and adapting to the wearout conditions of the FPU. The dynamic adaptation of the RMU and the opportunistic testing methods provide a robust solution for in-field testing and monitoring.

---

**References:**
- [5] Integrated System Emulation (ISE) Tool.
- IEEE Xplore, 2010. ©2010 IEEE.

**Authorized Use:**
This document is licensed for limited use to Tsinghua University. Downloaded on March 19, 2021, at 07:14:37 UTC from IEEE Xplore. Restrictions apply.