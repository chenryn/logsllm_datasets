[11] I. Bentov and R. Kumaresan. How to use bitcoin to design fair protocols.
In International Cryptology Conference, pages 421–439, 2014.
[12] I. Bentov, R. Kumaresan, and A. Miller. Instantaneous decentralized poker.
In International Conference on the Theory and Application of Cryptology
and Information Security, pages 410–440. Springer, 2017.
[13] Bitinfocharts. Bitcoin (BTC) price stats and information, 2019. https:
//bitinfocharts.com/bitcoin/.
29
[14] E.-O. Blass and F. Kerschbaum. Strain: A secure auction for blockchains.
In European Symposium on Research in Computer Security, pages 87–110,
2018.
[15] P. Bogetoft, D.L. Christensen, I. Damg˚ard, M. Geisler, T. Jakobsen,
M. Krøigaard, J.D. Nielsen, J.B. Nielsen, K. Nielsen, J. Pagter, et al. Se-
In International Conference on
cure multiparty computation goes live.
Financial Cryptography and Data Security, pages 325–343. Springer, 2009.
[16] F. Bonchi, C. Castillo, A. Gionis, and A. Jaimes. Social network analysis
and mining for business applications. ACM Transactions on Intelligent
Systems and Technology (TIST), 2(3):22, 2011.
[17] BOREALIS.
Source code, 2019.
https://github.com/e-o-blass/
BOREALIS-src.
[18] F. Brandt. Fully Private Auctions in a Constant Number of Rounds. In
Proceedings of the 7th International Conference on Financial Cryptography,
FC 2003, pages 223–238, 2003.
[19] F. Brandt. Auctions. In Burton Rosenberg, editor, Handbook of Financial
Cryptography and Security., pages 49–58. Chapman and Hall/CRC, 2010.
[20] C. Cachin. Eﬃcient Private Bidding and Auctions with an Oblivious Third
Party. In Conference on Computer and Communications Security, Singa-
pore, pages 120–127, 1999.
[21] O. Catrina and S. De Hoogh. Improved primitives for secure multiparty
integer computation. In International Conference on Security and Cryp-
tography for Networks, pages 182–199. Springer, 2010.
[22] C. Chang and R.G. Melhem. Arbitrary Size Benes Networks. Parallel
Processing Letters, 7(3):279–284, 1997.
[23] A.R. Choudhuri, M. Green, A. Jain, G. Kaptchuk, and I. Miers. Fairness in
an unfair world: Fair multiparty computation from public bulletin boards.
In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, pages 719–728, 2017.
[24] I. Damg˚ard, M. Geisler, and M. Krøigaard. Eﬃcient and secure compari-
son for on-line auctions. In Information Security and Privacy, 12th Aus-
tralasian Conference, ACISP 2007, Townsville, Australia, July 2-4, 2007,
Proceedings, pages 416–430, 2007.
[25] I. Damg˚ard, M. Geisler, and M. Krøigaard. A correction to ’eﬃcient and
secure comparison for on-line auctions’. IJACT, 1(4):323–324, 2009.
[26] I. Damg˚ard, M. Fitzi, E. Kiltz, J.B. Nielsen, and T. Toft. Unconditionally
secure constant-rounds multi-party computation for equality, comparison,
In Theory of Cryptography Conference, pages
bits and exponentiation.
285–304. Springer, 2006.
30
[27] I. Damg˚ard, V. Pastro, N.P. Smart, and S. Zakarias. Multiparty computa-
tion from somewhat homomorphic encryption. In Advances in Cryptology–
CRYPTO 2012, pages 643–662, 2012.
[28] J. Dreier, J.-G. Dumas, and P. Lafourcade. Brandt’s fully private auction
protocol revisited. Journal of Computer Security, 23(5):587–610, 2015.
[29] F. Emek¸ci, O.D. Sahin, D. Agrawal, and A. El Abbadi. Privacy preserving
decision tree learning over multiple parties. Data & Knowledge Engineering,
63(2):348–361, 2007.
[30] Etherscan.
Ethereum Average BlockTime Chart, 2019.
https://
etherscan.io/chart/blocktime.
[31] M. Fischlin. A cost-eﬀective pay-per-multiplication comparison method for
millionaires. In Cryptographers’ Track at RSA Conference, pages 457–471,
2001.
[32] J. Garay, B. Schoenmakers, and J. Villegas. Practical and secure solu-
In International Workshop on Public Key
tions for integer comparison.
Cryptography, pages 330–342, 2007.
[33] J. Garay, A. Kiayias, and N. Leonardos. The Bitcoin Backbone Protocol:
In Advances in Cryptology - EUROCRYPT
Analysis and Applications.
2015, pages 281–310, 2015.
[34] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. Secure Distributed Key
Generation for Discrete-Log Based Cryptosystems. Journal of Cryptology,
20(1):51–83, 2007.
[35] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game.
In Proceedings of the nineteenth annual ACM symposium on Theory of
computing, pages 218–229, 1987.
[36] J. Groth and A. Sahai. Eﬃcient Non-interactive Proof Systems for Bilinear
In Advances in Cryptology - EUROCRYPT 2008, 27th Annual
Groups.
International Conference on the Theory and Applications of Cryptographic
Techniques, Istanbul, Turkey, April 13-17, 2008. Proceedings, pages 415–
432, 2008. The full version of the paper is available at http://eprint.
iacr.org/2007/155.
[37] V. Kolesnikov, A.-R. Sadeghi, and T. Schneider. Improved garbled circuit
building blocks and applications to auctions and computing minima.
In
International Conference on Cryptology and Network Security, pages 1–20.
Springer, 2009.
[38] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou. Hawk: The
blockchain model of cryptography and privacy-preserving smart contracts.
In 2016 IEEE symposium on security and privacy (SP), pages 839–858,
2016.
31
[39] R. Kumaresan and I. Bentov. How to use bitcoin to incentivize correct
In Proceedings of the 2014 ACM SIGSAC Conference on
computations.
Computer and Communications Security, pages 30–41, 2014.
[40] R. Kumaresan, V. Vaikuntanathan, and P.N. Vasudevan. Improvements
In Proceedings of the 2016 ACM
to secure computation with penalties.
SIGSAC Conference on Computer and Communications Security, pages
406–417, 2016.
[41] Y. Lindell. Secure multiparty computation for privacy preserving data
mining. In Encyclopedia of Data Warehousing and Mining, pages 1005–
1009. 2005.
[42] Y. Lindell. How To Simulate It – A Tutorial on the Simulation Proof
Technique. Cryptology ePrint Archive, Report 2016/046, 2016. http:
//eprint.iacr.org/2016/046.
[43] Y. Lindell, B. Pinkas, N.P. Smart, and A. Yanai. Eﬃcient constant round
multi-party computation combining BMR and SPDZ. In Annual Cryptology
Conference, pages 319–338, 2015.
[44] Y. Lindell, N.P. Smart, and E. Soria-Vazquez. More Eﬃcient Constant-
Round Multi-party Computation from BMR and SHE. In Theory of Cryp-
tography, pages 554–581, 2016.
[45] H. Lipmaa, N Asokan, and V. Niemi. Secure vickrey auctions without
threshold trust. In International Conference on Financial Cryptography,
pages 87–101. Springer, 2002.
[46] MIRACL. Cryptographic SDK, 2018.
https://github.com/miracl/
MIRACL.
[47] M. Naor, B. Pinkas, and R. Sumner. Privacy preserving auctions and
In ACM Conference on Electronic Commerce, pages
mechanism design.
129–139, 1999.
[48] T. Nishide and K. Ohta. Multiparty computation for interval, equality, and
comparison without bit-decomposition protocol. In International Workshop
on Public Key Cryptography, pages 343–360, 2007.
[49] Reuters.
actions,
blockchain/ukrainian-ministry-carries-out-first-blockchain-
transactions-idUSKCN1BH2ME.
Ukrainian ministry carries out ﬁrst blockchain trans-
https://www.reuters.com/article/us-ukraine-
2017.
[50] B. Schoenmakers. A Simple Publicly Veriﬁable Secret Sharing Scheme and
Its Application to Electronic. In Advances in Cryptology - CRYPTO ’99,
19th Annual International Cryptology Conference, Santa Barbara, Califor-
nia, USA, August 15-19, 1999, Proceedings, pages 148–164, 1999.
32
[51] K. Suzuki and M. Yokoo. Secure generalized vickrey auction using homo-
morphic encryption. In International Conference on Financial Cryptogra-
phy, pages 239–249. Springer, 2003.
[52] J. Vaidya and C. Clifton. Privacy-preserving top-k queries. In International
Conference on Data Engineering, pages 545–546, 2005.
[53] M. Vukolic. The Quest for Scalable Blockchain Fabric: Proof-of-Work vs.
BFT Replication. In Open Problems in Network Security, pages 112–125,
2015.
[54] G. Zyskind, O. Nathan, and A. Pentland. Enigma: Decentralized compu-
tation platform with guaranteed privacy. arXiv preprint arXiv:1506.03471,
2015.
A Veriﬁable Secret Sharing
We brieﬂy summarize our variation of Schoenmakers [50]’s scheme for veriﬁable
secret sharing. Let Pi be the dealer, the party which wants to veriﬁably share
a fresh, randomly generated private key ski ∈ Zp. The core modiﬁcation to
Schoenmakers’s scheme is that each party Pj receives an Elgamal encrypted
version of their share in addition to commitments as follows.
Distribution: Let P1 be the generator of our group G1 in which the DDH
$← Zp as (session) private key and computes
holds. P1 randomly selects ski
2 − 1 polynomial
public key pki = ski · P1. Moreover, Pi computes a degree n
2 −1
j=0 αj · xj with α0 = ski and all other coeﬃcients αj random from
f (x) =(cid:80) n
Zp.
ﬁcients Cu = αu · P1, 0 ≤ u ≤ n
indeed the DLOG of pki. For each party Pj, Pi also selects another rj
and publishes Elgamal encryption Yj = Epklt
the blockchain.
Then, Pi publishes on the blockchain: pki, commitments to all of f ’s coef-
2 − 1, and a ZK proof ProofECDLP that ski is
$← Zp
j ⊕ f (j)) on
(f (j)) = (rj ·P1, rj · pklt
j
Pj computes (cid:80) n
2 −1
u=0 ju · Cu and checks whether this equals f (j) · P1.
To verify its share, each party Pj decrypts Yj and gets f (j). Now, each
If the
j · Yj[0] on the blockchain together with
check fails, Pj publishes f (j) and sklt
a ProofECDLP to prove correct multiplication and therewith decryption. If this
proof is correct, Pj ignores Pi for the rest of the protocol. If Pj’s proof of correct
decryption is wrong, all parties exclude Pj (and they could try recovering skj).
If Pi’s initial ProofECDLP is wrong, Pi is excluded, too.
Reconstruction: In case a party Pi’s key has to be recovered, all other parties
j · Yj[0] and ProofECDLP to prove
Pj publish their share f (j) together with sklt
correct decryption. Honest parties use correct f (j)s to interpolate f and ﬁnally
compute Pi’s secret key ski = f (0). As we assume a honest majority of at least
2 − 1 polynomial f .
2 honest parties, they will be able to interpolate degree n
n
33
Table 1: Resources per party
Proof Type
Proof Bit
Proof ECDLP
Proof Enc
Proof DGK per bit
Proof Blind per bit
Proof Shuﬄe per
two ciphertexts
Proof Decrypt
Time
(ms)
5.90
1.78
3.92
8.24
11.0
29.4
1.78
Size
(Byte)
Number of invocations
per party
489
163
326
914
786
1308
196
O(n · (l · log l + log n))
O(1)
O((cid:96))
O(n · (cid:96)2)
O(n · (cid:96))
O(n · (cid:96) · (log (cid:96) + log n))
O((cid:96))
ProofVSS which is a ProofECDLP.
Following our notation in Algorithm 2, VSS outputs ski, encryptions Yj, and
Our modiﬁcation to [50] allows to share an element of Zp instead of G1. At
the same time, our scheme loses the property of public veriﬁability. That is, one
party cannot automatically verify whether the dealer’s output to another party
is valid or not. However in our speciﬁc scenario, this is acceptable.
34
Figure 1: Maximum round computation time
35
100101102103n10−1100101102103Time(s)EthereumBitcoin‘=8‘=16‘=24‘=32