SAT Solving
CodeGen
Linking+Opt
IR Generation
Forwarding Loop Packet Loss
Invariants
Consistency
Figure 10: Performance of Anteater when checking three
invariants. Time is measured by wall-clock seconds. The
left and the right column represent the time of the ﬁrst
run and the total running time for each invariant.
plane has a large number of entries (Bug 87). Anteater is
unable to detect this type of bug.
5.3 Performance and scalability
5.3.1 Performance on the campus network
Figure 10 shows the total running time of Anteater when
checking invariants on the campus network. We present both
the time spent on the ﬁrst run and the total time to issue
all alerts.
Anteater’s running time can be broken into three parts:
(a) compiling and executing the invariant checkers to gen-
erate IR; (b) optimizing the IR with LLVM and generating
SAT formulas; (c) running the SAT solver to resolve the
SAT queries.
The characteristics of the total running time diﬀer for the
three invariants. The reason is that a bug has diﬀerent im-
pact on each invariant; thus the number of routers needed
to be checked during the next run varies greatly. For exam-
ple, if there exists a forwarding loop in the network for some
subnet S, the loop-free forwarding invariant only reports
routers which are involved in the forward loop. Routers that
remain unreported are proved to loop-free with respect to
the snapshot of data plane, provided that the correspond-
ing SAT queries are unsatisﬁable. Therefore, in the next
run, Anteater only needs to check those routers which are
reported to have a loop. The connectivity and consistency
invariants, however, could potentially report that packets
destined for the loopy subnet S from all routers are lost,
due to the loop. That means potentially all routers must be
checked during the next run, resulting in longer run time.
5.3.2
Scalability
Scalability on the campus network. To evaluate Anteater’s
scalability, we scaled down the campus network while hon-
oring its hierarchical structure by removing routers at the
lowest layer of the hierarchy ﬁrst, and continuing upwards
)
s
d
n
o
c
e
s
(
e
m
i
t
g
n
i
n
n
u
R
 400
 350
 300
 250
 200
 150
 100
 50
 0
2
18
)
s
d
n
o
c
e
s
(
e
m
i
t
g
n
i
n
n
u
R
 140
 120
 100
 80
 60
 40
 20
 0
146
178
73
122
100
49
Number of routers
SAT Solving
CodeGen
Linking+Opt
IR Generation
 0
 20
 40
 80  100  120  140  160  180
 60
Number of routers
SAT Solving
Linking+Opt
IR Generation
SAT Solving-fit
Linking+Opt-fit
IRGen-fit
Figure 11: Scalability results of the loop-free forward-
ing invariant on diﬀerent subsets of the campus network.
The parameter k was set to n − 1 for each instance.
Figure 12: Scatter plots for individual components of the
data of Figure 11. Solid lines are quadratic curves ﬁtted
for each category of data points.
until a desired number of nodes remain. Figure 11 presents
the time spent on the ﬁrst run when running the forwarding
loop invariant on diﬀerent subsets of the campus network.
Figure 12 breaks down the running time for IR genera-
tion, linking and optimization, and SAT solving. We omit
the time of code generation since we found that it is negli-
gible. Figure 12 shows that the running time of these three
components are roughly proportional to the square of the
number of routers. Interestingly, the running time for SAT
solver also roughly ﬁts a quadratic curve, implying that it
is able to ﬁnd heuristics to resolve our queries eﬃciently for
this particular network.
Scalability on synthesized autonomous system (AS) networks.
We synthesized FIBs for six AS networks (ASes 1221, 1755,
3257, 3967, 4755, 6461) based on topologies from the Rock-
etfuel project [36], and evaluated the performance of the
forwarding loop invariant. We picked k = 64 in this exper-
iment. To evaluate how sensitive the invariant is to the
complexity of FIB entries, we deﬁned L as a parameter
to control the number of “levels” of preﬁxes in the FIBs.
When L = 1, all preﬁxes are non-overlapping /16s. When
L = 2, half of the preﬁxes (chosen uniform-randomly) are
non-overlapping /16s, and each of the remaining preﬁxes is a
sub-preﬁx of one random preﬁx from the ﬁrst half — thus ex-
ercising the longest-preﬁx match functionality. For example,
with L = 2 and two preﬁxes, we might have p1 = 10.1.0.0/16
and p2 = 10.1.1.0/24. Figure 13 shows Anteater’s running
time on these generated networks; the L = 2 case is only
slightly slower than L = 1.
It takes about half an hour for Anteater to check the
largest network (AS 1221 with 384 vertices). These results
have a large degree of freedom: they depend on the com-
plexity of network topology and FIB information, and the
running time of SAT solvers depends on both heuristics and
random number seeds. These results, though inconclusive,
indicate that Anteater might be capable of handling larger
production networks.
Scalability on networks with packet transformations. We
evaluated the case of our campus network with network ad-
dress translation (NAT) devices deployed. We manually in-
jected NAT rules into the data in three steps. First, we
picked a set of edge routers. For each router R in the set,
we created a phantom router R which only had a bidirec-
tional link to R. Second, we attached a private subnet for
each phantom router R, and updated the FIBs of both R
and R accordingly for the private subnet. Finally, we added
NAT rules as described in §3.4 on the links between R and
R.
Figure 14 presents the running time of the ﬁrst run of the
loop-free forwarding invariant as a function of the number
of routers involved in NAT. We picked the maximum hops
k to be 20 since the maximum length of loop-free paths is 9
in our campus network.
The portion of time spent in IR generation and code gen-
eration is consistent among the diﬀerent number of NAT-
enabled routers. The time spent on linking, optimization
and SAT solving, however, increases slowly with the num-
ber of NAT-enabled routers.
6. DISCUSSION
If FIBs
Collecting FIB snapshots in a dynamic network.
change while they are being collected, then Anteater could
receive an inconsistent or incomplete view of the network.
This could result in false negatives, false positives, or reports
of problems that are only temporary (such as black holes and
transient loops during network convergence).
There are several ways to deal with this problem. First,
one could use a consistent snapshot algorithm [17, 24]. Sec-
ond, if the network uses a software-deﬁned networking ap-
proach [28], forwarding tables can be directly acquired from
centralized controllers.
However, our experience shows that the problem of con-
sistent snapshots may not be critical in many networks, as
the time required to take a snapshot is small compared to
298
)
s
d
n
o
c
e
s
(
e
m
i
t
g
n
i
n
n
u
R
 2000
 1800
 1600
 1400
 1200
 1000
 800
 600
 400
 200
 0
  L=1
  L=2
 0
 50
 100  150  200  250  300  350  400
Number of routers
)
s
d
n
o
c
e
s
(
e
m
i
t
g
n
i
n
n
u
R
 900
 800
 700
 600
 500
 400
 300
 200
 100
 0
0
1
5
10
15
20
Number of NAT-enabled Routers
Linking+Opt
IR Generation
SAT Solving
CodeGen
Figure 13: Scalability results of the loop-free forwarding
invariant on six AS networks from [36]. L is the param-
eter to control the complexity of FIBs. Dots show the
running time of the invariant for each network. Solid
lines are ﬁtted curves generated from the dots.
Figure 14: Running time of the loop-free forwarding in-
variant as a function of the number of routers that have
NAT rules.
the average time between changes of the FIBs in our campus
network. To study the severity of this problem over a longer
timespan, we measured the frequency of FIB changes on
the Abilene Internet2 IP backbone, by replaying Internet2’s
BGP and IS-IS update traces to reconstruct the contents of
router FIBs over time. BGP was responsible for the major-
ity (93%) of FIB changes. Internal network (IS-IS) changes
occurred at an average frequency of just 1.2 events per hour
across the network.
We also note that if changes do occur while downloading
FIBs, we can avoid a silent failure.
In particular, Cisco
routers can be conﬁgured to send an SNMP trap on a FIB
change; if such a trap is registered with the FIB collection
device, and received during the FIB collection process, the
process may be aborted and restarted.
Collecting FIB snapshots in the presence of network fail-
ures. Network reachability problems might make acquir-
ing FIBs diﬃcult. Fortunately, Anteater can make use of
solutions available today, including maintaining separately
tunneled networks at the forwarding plane [22, 13] or op-
erating through out-of-band control circuits [3], in order to
gather data plane state. (More philosophically, we note that
if parts of the network are unreachable, then one problem
has already been discovered.)
Would using control plane analysis reduce overhead? Anteater’s