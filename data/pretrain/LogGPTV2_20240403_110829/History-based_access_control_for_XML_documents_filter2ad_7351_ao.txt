from sending conﬁdential data to a diﬀerent host. As a consequence, even if
an attacker exploits a vulnerability of the user interface, he cannot transfer
the conﬁdential data out of the TVM.
6.2.4 Protection Layer 1: User interface
This protection layer consists of the user interface. The user interface is
written in Java, which is expected to minimize the risk of buﬀer overﬂows.
In addition to this, the user interface can edit conﬁdential documents in
memory and does not need to write them to disk. The server’s authenticity
is checked by verifying the server’s certiﬁcate before answering an attestation
request.
6.2.5 Attestation Protocol
To prevent masquerading attacks on the authenticity of the platform conﬁg-
uration, we use an enhanced remote attestation protocol [STRE06]. These
100
CHAPTER 6. SECURITY ARCHITECTURE
attacks forward the integrity measurements of a conform host to masquer-
ade a conform client state. The enhanced protocol adds a key establishment
phase, to ensure that the channel of attestation is authentic. It also guar-
antees an end-to-end communication and prevents the attestation channel
from becoming compromised by another application which could take over
the attestation channel after the attestation has succeeded.
Figure 6.2: Attestation protocol
The protocol of our remote attestation is illustrated in Figure 6.2. It con-
sists of an initialization phase and an attestation phase. The initialization
phase yields a vAIK credential which is then used in attestation phase to
sign the PCRs. This vAIK credential is signed by an AIK from the hardware
TPM. In the ﬁrst step of the initialization phase, the vTPM is initialized,
which in turn requests a new vAIK credential from the hardware TPM (steps
2 and 3). The hardware TPM issues a vAIK credential and sends it to the
vTPM (steps 5 and 6). The attestation phase is triggered by the document
processor, which sends an attestation request consisting of a nonce and its
public Diﬃe-Hellman key pair ga mod m for the key-establishment to the
user interface (step 7). The user interface generates the corresponding Diﬃe-
Hellman key pair gb mod m and sends this, together with the nonce, to the
vTPM (step 8). The vTPM generates a digital signature using the vAIK
(step 9) and transfers it together with the vAIK credential, to the user in-
terface (step 10). The user interface forwards this data to the DP (step 11).
Next, the DP veriﬁes the authenticity of the user interface and its platform
by inspecting the platform conﬁguration registers (step 12). Finally, both the
Document ProcessorUser InterfacevTPM(7) Request attestation(2) Request vAIK credential(10) sig and vAIK credential(1) Initialize vTPMVirtualization LayerTPM(3) Request vAIK credential(8) Request signed PCRs(9) sig=signvAIK[PCRs] (11) sig and vAIK credential(12) Verify[PCRs]Verify sigVerify vAIKcredential(4) Create vAIK credential...............Attestation EntityVM initialization phase(6) vAIK credential(5) vAIK credentialAttestation phase6.3. EVALUATION OF THE SECURITY MECHANISMS
101
DP and the user interface calculate the shared session key for the following
communication (step 13, not illustrated).
The protocol for performing remote attestations guarantees that the end-
point of the communication is within the attested virtual machine. Therefore,
relay or masquerading attacks are not possible. The combination of attes-
tation and key establishment fulﬁlls Requirement 4, since it prevents the
masquerading of a trustworthy system conﬁguration.
6.3 Evaluation of the Security Mechanisms
In the following section, we evaluate whether the security mechanisms de-
scribed in Section 6.2 prevent the attacks mentioned in Section 6.1.
Software Manipulations.
Each of the protection layers can be either manipulated during runtime or
before it is executed. Runtime attacks are especially critical, since they are
not detected by the current method of integrity measurement, which only
measures components when they are executed. The underlying protection
layer must be manipulated to modify the current layer, because the integrity
of each layer is measured before execution by the layer below. This results
in a chain of trust, with the TPM as a hardware anchor. As a consequence,
the manipulation of any layer either requires a runtime attack or a hardware
attack on the TPM. In the following, we discuss possible runtime attacks on
each layer. The user interface is robust against buﬀer overﬂow attacks, since
it is written in Java, which is commonly believed to decrease the possibility
of buﬀer overﬂows. On the downside, other attacks, such as exploiting other
programming errors, are still possible. The risk of runtime attacks on the op-
erating system is reduced, because software with lower complexity is expected
to have less errors than software with higher complexity. Moreover, we can
choose a strict system conﬁguration to minimize possible attack methods,
e.g., network connections are restricted to the server, the hard disk of the
TVM is read-only and swapping is disabled. As a consequence, in the case
of a successful attack on the operating system, the attacker has no options
to transfer conﬁdential data to another machine. This is an example of a
lower layer preventing a successful attack, when the protection mechanisms
of the layer above failed. Runtime attacks on the hypervisor are diﬃcult,
since it has a lower complexity compared to operating systems and it does
not expose interfaces to the user which could be used for an attack. The
management VM oﬀers no interface either. Moving protection mechanisms
102
CHAPTER 6. SECURITY ARCHITECTURE
of upper layers into this layer, simpliﬁes the veriﬁcation of the correctness
of these mechanisms due to the smaller size of this layer. A critical example
of a runtime attack on the management VM is to masquerade an authentic
system administrator of the management VM, e.g., by guessing the corre-
sponding password. After that, he can perform an attack, e.g., modify the
integrity measurement of the TVM to masquerade a trustworthy TVM.
Masquerading attacks.
Both client and server can be masqueraded, where the cloning of a machine is
a special type of this attack. Since we assume that the server is trustworthy,
we only focus on cloning attacks on the client. An attacker can create an
exact copy of a client’s hard drive, but he cannot copy the content of the
corresponding TPM. The attacker cannot use this cloned client to access the
server, since our attestation protocol uses secrets stored in the TPM and
therefore detects that the client is not authentic. One such secret is the AIK
of the hardware TPM, which is used to sign the vAIK of the vTPM. This
vAIK in turn, is used in the attestation protocol. The server can check the
authenticity of the vAIK with the corresponding AIK credential that was
installed on the server when the system was set up. Using an honest system
to masquerade a trustworthy system state is prevented by our attestation
protocol. This protocol also detects and prevents masquerading of a server,
since the server’s certiﬁcate is checked by the user interface.
Hardware attacks and analogue attacks.
DMA attacks can either be handled entirely in software by emulating all I/O
devices, which causes a high performance degradation. Alternatively, DMA
attacks can be prevented by using hardware support, e.g., Intel’s Trusted
Execution Technology. As a consequence, it depends on the implementa-
tion of our security architecture whether or not DMA attacks are possible.
Probing attacks are diﬃcult to inhibit. At least the TPM is speciﬁed to be
tamper-evident, which allows an attack to be detected afterwards. Analogue
attacks are diﬃcult to prevent with software mechanisms. Fortunately, the
bandwidth of this channel is much lower compared to digitally copying con-
ﬁdential data. In addition to that, this attack method has a higher risk of
being detected, if the machine is located at a monitored location, e.g., an
oﬃce with many co-workers or an oﬃce that is under surveillance by security
cameras. We do not provide a mechanism to prevent this type of attack.
Chapter 7
Implementation
In this chapter, we will describe the implementation of the prototype of
this thesis. This prototype implements the system architecture described in
Chapter 6. The security mechanisms, which we presented in Chapter 6, are
not implemented in this prototype. These mechanisms are implemented in
[RSGE06], [STRE06] and [SBHE07]. The implementations of these mecha-
nisms demonstrate that the described mechanism are feasible. In addition
to this, the current prototype of this thesis can be extended with the mecha-
nisms described in Chapter 6. Since, we do not plan to do a further analysis
on the combined implementation of the model together with its security
architecture, we refrain from adding the security architecture to the imple-
mentation. The prototype of the model is written in Java version 1.5. For
further details concerning the implementation see also [Mel07].
We start by explaining how the implementation represents and stores
the history. Next, we continue with an overview of the components of the
implementation. Then, we present implementation-speciﬁc details of each
component. Finally, we will discuss the results of the performance evaluation
of the implementation.
7.1 History
The model does not specify where the history is stored and how it should
be represented. As a consequence, the implementation needs to deﬁne a way
how to represent and store the history.
In this prototype implementation
the history is split in several parts. One part of the history is stored within
the corresponding document and is represented as XML data. We store the
history within the documents, because this reduces the complexity of the
implementation. In terms of eﬃciency it is better to store the history in a
103
104
CHAPTER 7.
IMPLEMENTATION
separate database, because databases are better optimized for being queried.
The second part of the history is the is-copy-of relation among objects. We
store this part separately and described it together with the Copy Database
in Section 7.2.2.
We store the history of an XML document by adding an History element
to each existing element of the document. We avoid conﬂicts with the names
of existing elements of the document by using an individual XML namespace
(namespaces are explained in Section 2.2.3). This History element has two
child elements. The ﬁrst child element is the Element-History element,
which stores the eﬀects of operations that were performed on the element
itself. The second child element is the Text-History element, which captures
the eﬀects of operations that were performed on the text content of the
corresponding element.
Each part of the History element uses Entry elements to denote the
eﬀects of speciﬁc operations. An Entry element is composed of an Action
element and a Context element. The Action element describes the occurred
operation more precisely. For this purpose, it uses two optional arguments
and a mandatory Op attribute, where the Op speciﬁes the operation and the
arguments give additional details that are speciﬁc for the operation. Table
7.1 lists the arguments of the operations deﬁned in the model.
Op
Arg2
-
-
-
-
-
-
-
Arg1
-
-
-
-
Block ID
Block ID
Block ID
Operation
Create Document Create Element
Create Element
Create Element
Delete Element
Delete Element
Transfer Element Create Element
Create Text
Create Text
Delete Text
Delete Text
Create Text
Transfer Text
Create Attribute
Create Attribute Attribute name Attribute value
Change Attribute Change Attribute Attribute name Attribute value
Delete Attribute
View (Element)
View (Text)
View (Attribute) View Attribute
Delete Attribute
View Element
View Text
Attribute name
-
Block ID
Attribute name
-
-
-
-
Table 7.1: Arguments for storing operations in histories
We use block IDs to reference individual text blocks. In similar fashion,
we also use IDs to reference subjects and roles. To store the context of
an operation, we use a Context element with three attributes. The ﬁrst
attribute speciﬁes the date when an operation was performed, whereas the
7.2. COMPONENTS
105
second attribute stores the role of the corresponding subject and the third
attribute keeps track of the subject itself.
Figure 7.1 illustrates a History element. This example covers three op-
erations. First, the element itself was created. After this, text content was
added to the element. And ﬁnally, the attribute funded-by with the initial
value Company A was created.
Figure 7.1: Example of a history element
7.2 Components
All components described in Chapter 6 are implemented in the prototype.
These components are depicted together with the user of the system in Figure
7.2. These components are the User Interface (UI), the Document Processor
(DP), the Policy Enforcement Point (PEP), the Policy Decision Point (PDP),
the User Database (User DB), the Document Database (Doc DB), the Copy
Database (Copy DB) and the Rule Database (Rule DB). The arrows indicate
which components communicate with each other.
106
CHAPTER 7.
IMPLEMENTATION
Figure 7.2: Components implemented in the prototype
Each component can be conﬁgured to communicate locally or remotely
with the other components. A faster local communication method can be
used, if the corresponding components are executed on the same computer.
In the other case, where the components are running on diﬀerent comput-
ers, a diﬀerent communication method must be used. For this purpose,
classes where used to abstract from the current communication method.
For example, to communicate locally with the Copy Database the class
server.LocalCopyDBConnector must be used. If the Copy DB is located
on a diﬀerent computer the class server.RemoteCopyDBConnector must be
used instead. This approach allows to use the prototype on a single computer,
e.g., when the system is used only by a small number of users. When the
system is used by a large number of users, the components can be distributed
over several computers to give more computational resources to individual
components. After this overview, we discuss the components individually.
We start with the User Interface.
7.2.1 User Interface
Generally speaking, the User Interface presents documents to the user and
oﬀers commands to edit these documents. The component design of the
architecture allows to use any User Interface that is compatible with the in-
terface deﬁned in the implementation. As a consequence, the User Interface
can be designed to edit speciﬁc types of data more eﬃciently in terms of
usability. For example, the user interface can visualize the represented data
in a graphical way and oﬀer editing functions that make use of the semantics
UIASPDPUserDPPEPUser DBCopy DBDoc DBRule DBUIPDPUserDPPEPUser DBCopy DBDoc DBRule DB7.2. COMPONENTS
107