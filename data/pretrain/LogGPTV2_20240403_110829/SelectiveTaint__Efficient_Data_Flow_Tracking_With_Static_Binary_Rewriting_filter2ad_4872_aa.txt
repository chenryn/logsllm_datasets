title:SelectiveTaint: Efficient Data Flow Tracking With Static Binary Rewriting
author:Sanchuan Chen and
Zhiqiang Lin and
Yinqian Zhang
Selectivetaint: Efficient Data Flow Tracking With 
Static Binary Rewriting
Sanchuan Chen, Zhiqiang Lin, and Yinqian Zhang, The Ohio State University
https://www.usenix.org/conference/usenixsecurity21/presentation/chen-sanchuan
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.SELECTIVETAINT: Efﬁcient Data Flow Tracking With
Static Binary Rewriting
Sanchuan Chen
Zhiqiang Lin
Yinqian Zhang
The Ohio State University
{chen.4825, lin.3021, zhang.834}@osu.edu
Abstract
Taint analysis has been widely used in many security applica-
tions such as exploit detection, information ﬂow tracking, mal-
ware analysis, and protocol reverse engineering. State-of-the-
art taint analysis tools are usually built atop dynamic binary
instrumentation, which instruments at every possible instruc-
tion, and rely on runtime information to decide whether a par-
ticular instruction involves taint or not, thereby usually having
high performance overhead. This paper presents SELECTIVE-
TAINT, an efﬁcient selective taint analysis framework for bi-
nary executables. The key idea is to selectively instrument the
instructions involving taint analysis using static binary rewrit-
ing instead of dynamic binary instrumentation. At a high level,
SELECTIVETAINT statically scans taint sources of interest in
the binary code, leverages value set analysis to conservatively
determine whether an instruction operand needs to be tainted
or not, and then selectively taints the instructions of interest.
We have implemented SELECTIVETAINT and evaluated it
with a set of binary programs including 16 coreutils (focusing
on ﬁle I/O) and ﬁve network daemon programs (focusing
on network I/O) such as nginx web server. Our evaluation
results show that the binaries statically instrumented by SE-
LECTIVETAINT has superior performance compared to the
state-of-the-art dynamic taint analysis frameworks (e.g., 1.7x
faster than that of libdft).
1 Introduction
One of the mostly used techniques in software security is
dynamic taint analysis [28], also called dynamic data ﬂow
tracking (DDFT), which tracks the data ﬂow of interest
during program execution and has been widely used in many
security applications, such as exploit detection [14, 28–30],
information ﬂow tracking [34, 41], malware analysis [18, 39],
and protocol reverse engineering [10, 19]. However, the
implementation of taint analysis often has high performance
overhead. For instance, a state-of-the-art dynamic taint
analysis framework libdft [17] imposes about 4x slowdown
for gzip when compressing a ﬁle.
There has been a body of research that seeks to improve
the performance of taint analysis. For instance, Jee et al. [16]
applied compiler-like optimizations to eliminate redundant
logic in taint analysis code. SHADOWREPLICA [15] improved
the performance by decoupling taint logic from program
logic, minimizing the information needed to communicate,
and optimizing the shared data structures between them.
TAINTPIPE [25] explored a parallel and pipeline scheme.
STRAIGHTTAINT [24] combined an online execution
state tracing and ofﬂine symbolic taint analysis for further
performance improvement.
Interestingly, these general DDFT frameworks and their
optimizations are built atop dynamic binary instrumentation
(DBI), particularly Intel’s PIN [22], to instrument the taint
analysis logic at runtime. We believe a fundamental reason of
using DBI for these frameworks is to basically avoid the code
discovery challenge from static binary analysis. Note that PIN
is a DBI tool, and it dynamically disassembles, compiles, and
reassembles the executed code at runtime without any code
discovery issues. The core module of PIN is a virtual machine
(VM) that consists of a just-in-time (JIT) compiler, an emula-
tor, and a dispatcher. PIN also has a rich set of APIs used for
Pintool’s implementations. However, the VM and APIs both
add additional performance overhead to a taint analysis tool.
Unlike DBI, static binary instrumentation (SBI) inserts the
analysis code directly into the native binary and thus avoids
the unnecessary DBI overhead incurred by JIT and emula-
tion. Meanwhile, SBI would have fewer context switches,
since the rewritten binary has a better code locality. While
it is challenging to perform static binary analysis, recently
there are substantial advancements in static binary rewrit-
ing and reassembling (e.g., UROBOROS [37], RAMBLR [36],
MULTIVERSE [6], and recently Datalog Disassembly [13]).
Therefore, it is worthwhile revisiting the taint analysis and
study the feasibility of using static binary rewriting for more
efﬁcient taint analysis.
In addition to the use of DBI, existing taint analysis
frameworks also instrument the binary code at every possible
instruction that can contribute the information ﬂow, and rely
on the execution context to determine whether there is a
need to taint the corresponding operand. However, if a static
analysis could ﬁgure out precisely the instructions that will
never get involved in taint analysis (e.g., via some conser-
vative static analysis), it would have not instrumented them.
Therefore, enabling taint analysis to selectively instrument
the binary code statically is viable and highly desired.
USENIX Association
30th USENIX Security Symposium    1665
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
In this paper, we propose SELECTIVETAINT, an efﬁcient se-
lective taint analysis framework for binary code with static bi-
nary rewriting. There are two salient features in SELECTIVE-
TAINT. First, it directly removes the overhead from dynamic
binary translation, and is built atop SBI instead of DBI. Sec-
ond, it scans taint sources of interest in the binary, statically
determines whether an instruction operand will be involved in
taint analysis by leveraging the value set analysis (VSA) [3,4],
and then selectively taints the instructions of interest. There
are well-known challenges that SELECTIVETAINT must ad-
dress, such as how to deal with point-to (i.e., alias) analysis
inside binary code. SELECTIVETAINT solves this problem
by conservatively identifying the memory addresses that will
never be involved in taint, and then taint the rest.
We have implemented SELECTIVETAINT atop SBI and
evaluated it with a variety of applications consisting of 16
coreutils, and ﬁve network daemon programs such as Nginx
web server. We use these programs as the benchmarks because
they represent both ﬁle I/O and network I/O, the two most
common input channels used by real world programs. The
evaluation results show that SELECTIVETAINT is 1.7x faster
than that of libdft, a state-of-the-art dynamic taint analy-
sis framework. We formally prove that SELECTIVETAINT is
soundy (mostly sound) [21], and also conﬁrm the soundness
of SELECTIVETAINT by using it to detect real-world exploits
against the memory corruptions vulnerabilities in a variety of
software including image decoder, audio normalization, and
assembler.
In short, we make the following contributions:
• We propose SELECTIVETAINT, the ﬁrst static-binary-
rewriting based selective taint analysis framework, to
substantially improve the performance overhead incurred
by earlier DBI-based approaches.
• We also present a conservative tainted instruction
identiﬁcation approach, which statically identiﬁes the
instructions that will never involve tainted memory or
registers by using VSA and then conservatively taints
the rest instructions.
• We have implemented SELECTIVETAINT, and tested
with 16 coreutils and ﬁve network daemons. The
evaluation results show that SELECTIVETAINT has
superior performance compared to the state-of-the-art
taint analysis tools such as libdft.
2 Background
2.1 Taint Analysis
Taint analysis is a widely used program analysis technique
that tracks the ﬂow of data of interest as they propagate during
the program execution [28]. It is also referred as dynamic
data ﬂow tracking (DDFT) or dynamic taint analysis (DTA),
which is usually implemented using virtualization or DBI
and can be performed per-process [17] or system-wide [39].
void process(int client_sock, char *buffer, int size)
{
char ch;
int read_size = recv(client_sock, buffer, 2048, 0);
if(read_size > 0)
{
ch = buffer[0];
if(ch >= 'a' && ch <= 'z')
buffer[0] = ch -32;
write(client_sock, buffer, read_size);
memset(buffer, 0, 1024);
}
}
int server(int client_sock)
{
int i = 0;
char buffer[1024] = {0};
for(i = 0; i < 3; i++)
{
process(client_sock, buffer, 1024);
}
return 0;
}
Figure 1: A simpliﬁed running example
Taint analysis needs taint
tags, which are markings
associated to registers and memory to indicate their taint
status. Taint tags can have different (1) granularities to mark
the taintedness for a bit, a byte, a word, or a block of data, and
(2) sizes to indicate the taintedness to be a bit—tainted or not,
or an integer—which input byte tainted the data. A ﬁner gran-
ularity enhances taint analysis precision but adds performance
costs, e.g., the storage cost for tag-related data structure,
whereas a coarser granularity offers less precision but better
performance. When a tag size is a single bit, it can be used
to represent whether a corresponding register or memory
location is tainted or not; when it is an integer, it can represent
which part of the input (e.g., a particular byte offset) has been
propagated to the tainted registers or memory locations.
A taint analysis typically consists of three components:
taint sources, taint propagation, and taint sinks.
In the
following, we use a simpliﬁed networking program illustrated
in Figure 1, as a running example, to demonstrate how a
typical taint analysis works.
• Taint sources. Taint sources are program points or
memory locations where data of interest is introduced.
Typically, taint analysis is interested in user input com-
ing from locally or remotely. For example, in Figure 1,
if we are interested in the remote input, we will taint
the data stored in buffer right after entering the system
when calling libc function recv at line 4.
• Taint propagation. Taint tags are propagated during
the program execution according to the taint propagation
rules, which are speciﬁed with respect to the semantics
of each instruction, e.g., the speciﬁc operands in the
instruction, and also the side-effect of the instruction.
For instance, for instruction ADD src, dst, a taint
propagation rule could specify that the new tag of dst
1666    30th USENIX Security Symposium
USENIX Association
is a bit-wise OR of the tags of src and dst. In Figure 1,
at line 7 ch is assigned the tainted data of buffer[0]
and at line 9 buffer[0] is calculated based on tainted
ch, which has a data dependency, whereas at lines 8-9
whether buffer[0] is assigned or not depends on the
outcome of the predicate in the if statement, which
involves a tainted ch with a control dependence between
buffer[0] and ch. Note that most of the DDFT works
(e.g., [15–17, 24, 25]) only consider taint propagation
based on data dependencies.
• Taint sinks. Taint sinks are speciﬁc program instructions
where taint analysis checks the existence of taint tags
of interest for various security applications such as de-
tecting control ﬂow hijacks or information ﬂow leakage.
Common taint sinks are control ﬂow transfer instructions
for detecting control ﬂow hijack attacks, or output system
calls (e.g., write, send) for detecting information leak-
age attack (e.g., a tainted secret leaked out). In Figure 1,
line 10 could be a taint sink for information leakage
detection, since it is the libc function write that writes
the content starting at buffer to client_socket.
2.2 Value Set Analysis
Value set analysis (VSA) [3, 4] is a static program analysis
technique. It over-approximates the set of possible values that
each data object of the program could hold at each program
point, and it uses a value set to represent the set of memory
addresses and numeric value quantities.
Memory regions and abstract locations. VSA uses an ab-
stract memory model that separates the address space into
multiple disjoint areas that are referred to as memory regions.
Memory regions in VSA consist of: a global region for mem-
ory locations storing uninitialized and initialized global vari-
ables, a stack region per function for memory locations of acti-
vation record of a procedure, and a heap region per heap allo-
cation for memory locations allocated by a particular malloc-
type of function call site. An abstract location, i.e., an a-loc, is
a variable-like entity which spans from one statically known
location to next statically known location (not including it).
Abstract addresses and value sets. An abstract address in
VSA is represented by a pair (memory-region, offset). A set
of abstract addresses can be represented using:
}}
{i rgni{oi
(global Og,stack Os,heap Oh)
2,...,oi
ni
1,oi
More speciﬁcally, when there are at most one stack memory
region and one heap memory region, the value set can be
speciﬁed as 3-tuple [4]:
abbreviated as (Og,Os,Oh). A set of memory offsets in
(SI): s[l,u], where s is the stride, l and u are lower bound
and upper bound. For instance,({1,3,5},(cid:150),(cid:150)) could be
represented using SI as(2[1,5],(cid:150),(cid:150)).
each memory region is represented by a strided-interval
The analysis is performed on a control-ﬂow graph (CFG)
in which each node represents an instruction (not a basic
block as VSA is calculated for each instruction) and each
edge represents a control ﬂow transfer. A transfer function
that characterizes the instruction semantics is associated with
each edge. Note that since the address values and numeric
values are interleaved in the binary, VSA tracks address values
and numeric values at the same time.
2.3 Binary Instrumentation
Binary instrumentation is the process of instrumenting binary
with additional analysis code added and meanwhile maintain-
ing the original functionality. It is a widely used technique
for many important security applications such as malware
analysis and binary code hardening. Binary instrumentation
could be either static or dynamic.
Static binary rewriting. Static binary instrumentation (SBI),
also known as static binary rewriting, modiﬁes the binary ﬁle
directly. Static binary rewriting can be performed in three
ways, as summarized in RAMBLR [36]: (1) trampoline-based,
(2) lifting and recompiling, (3) symbolization [40] and
reassembling [37]. Speciﬁcally, in trampoline-based ap-
proaches, hooks which detour the control ﬂow to trampolines
are added to the binary. In contrast, for lifting and recompil-
ing, the binary code will be ﬁrst lifted into an intermediate
representation (IR), then inserted with the code of interest in
the IR, and ﬁnally compiled back. The ﬁrst two approaches
have been known in the community for years. Recently,
symbolization and reassembling approach was proposed, in
which a rewriter needs to identify the locations pointed by
memory references ﬁrst, and then symbolize those references.
The process of converting numeric references back to sym-
bols is called symbolization. After symbolization, the rewriter
could correctly relocate binary in reassembling. The ﬁrst two
approaches impose signiﬁcant overhead and the last approach
may mix code with data and may not correctly separate them.
Dynamic binary instrumentation. Dynamic binary in-
strumentation (DBI) recovers the code while program is
executing, which can correctly separate program code from
data. However, compared with static approaches, DBI has
high performance overhead. There are generally two ways
to implement DBI: using a trampoline, or using just-in-time
(JIT) compiling. The trampoline approach replaces the
instruction with a trampoline at run-time which jumps to the
instrumented analysis code, and the JIT compiling approach
dynamically compiles the binary on the ﬂy.
3 Challenges and Insights
3.1 Challenges
To clearly illustrate the challenges of selective taint analysis,
we still use the example code shown in Figure 1. This
USENIX Association
30th USENIX Security Symposium    1667
program receives three messages from a client (line 19-22),
capitalizes the ﬁrst character in each message if needed (line
8-9), and sends the messages back to the client (line 10). It
has a buffer overﬂow vulnerability at line 4, when receiving
the input with size larger than 1,024 bytes. The taint source
of our interest is the network input stored in array buffer,
which is tainted right after the execution of libc function
recv. The taint sink of our interest is the control ﬂow transfer
instruction ret of function server at line 23, assume our
objective is to detect the control ﬂow hijacks.
Performing selective binary code taint analysis using static
binary rewriting is by no means trivial. Unlike DBI-based
approaches where taint analysis logic is instrumented at run-
time, a SBI-based approach has to analyze and rewrite the
binary statically. In addition to the challenges from static bi-
nary disassembling and rewriting (they are orthogonal to the
problem we aim to solve in this paper), SELECTIVETAINT
has to address at least the following unique challenge—how
to determine whether a disassembled instruction needs to be
instrumented by taint analysis. If so, we have to also rewrite
it accordingly based on the taint semantics (e.g., whether
this instruction introduces a taint sources, contributes to taint
propagation, or it is a taint sink).
Essentially, the problem becomes how to determine the
taintedness of an instruction according to its operands includ-
ing both memory addresses and registers without executing
the binary. Determining the taintedness of registers is easier
compared to memory addresses, since registers can be directly
identiﬁed based on names whereas a memory address cannot
be easily resolved. Therefore, determining the taintedness for
memory addresses is much harder in SBI. More speciﬁcally,
different from DTA in which a memory address has a single
runtime address at each program point, static binary taint anal-
ysis can only conservatively infer the possible values for a
symbolic memory address at each program point. Except for
global memory addresses, symbolic addresses of stack and