title:Social Botnet Community Detection: A Novel Approach based on Behavioral
Similarity in Twitter Network using Deep Learning
author:Greeshma Lingam and
Rashmi Ranjan Rout and
Durvasula V. L. N. Somayajulu and
Sajal K. Das
Social Botnet Community Detection: A Novel Approach based on
Behavioral Similarity in Twitter Network using Deep Learning
Department of Computer Science and Engineering
National Institute of Technology, Warangal, 506004, India
Department of Computer Science and Engineering
National Institute of Technology, Warangal, 506004, India
Greeshma Lingam
PI:EMAIL
DVLN Somayajulu
Rashmi Ranjan Rout
PI:EMAIL
Sajal K. Das
Department of Computer Science and Engineering
National Institute of Technology, Warangal, 506004, India
Indian Institute of Information Technology Design and
Manufacturing, Kurnool, Andhra Pradesh, 518002, India
PI:EMAIL
Department of Computer Science
Missouri University of Science and Technology
Rolla, MO 65409, USA
PI:EMAIL
ABSTRACT
Detecting social bots and identifying social botnet communities
are extremely important in online social networks (OSNs). In this
paper, we first construct a weighted signed Twitter network graph
based on the behavioral similarity and trust values between the
participants (i.e., OSN accounts) as weighted edges. The behavioral
similarity is analyzed from the viewpoints of tweet-content similar-
ity, shared URL similarity, interest similarity, and social interaction
similarity for identifying similar types of behavior (malicious or
not) among the participants in the Twitter network; whereas the
participant’s trust value is determined by a random walk model.
Next, we design two algorithms – Social Botnet Community Detec-
tion (SBCD) and Deep Autoencoder based SBCD (called DA-SBCD)
– where the former detects social botnet communities of social bots
with malicious behavioral similarity, while the latter reconstructs
and detects social botnet communities more accurately in presence
of different types of malicious activities. Finally, we evaluate the
performance of proposed algorithms with the help of two Twitter
datasets. Experimental results demonstrate the efficacy of our al-
gorithms with better performance than existing schemes in terms
of normalized mutual information (NMI), precision, recall and F-
measure. More precisely, the DA-SBCD algorithm achieves about
90% precision and exhibits up to 8% improvement on NMI.
KEYWORDS
Behavioral similarity; Trust; Social botnet community detection;
Deep autoencoder.
ACM Reference Format:
Greeshma Lingam, Rashmi Ranjan Rout, DVLN Somayajulu, and Sajal K.
Das. 2020. Social Botnet Community Detection: A Novel Approach based
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-6750-9/20/10...$15.00
https://doi.org/10.1145/3320269.3384770
on Behavioral Similarity in Twitter Network using Deep Learning. In Pro-
ceedings of the 15th ACM Asia Conference on Computer and Communications
Security (ASIA CCS ’20), October 5–9, 2020, Taipei, Taiwan. ACM, New York,
NY, USA, 11 pages. https://doi.org/10.1145/3320269.3384770
1 INTRODUCTION
In recent years, online social networks (OSNs) have been seriously
impacted by social bots [14]. A social botnet is a group of social bots
created and controlled by a botmaster (acting as a leader among
social bots) and performs malicious activities, such as creating mul-
tiple fake accounts, spreading spam, manipulating online ratings,
and so on [13], [17], [28]. To protect against botnet attacks, exist-
ing social botnet detection approaches [9], [1], [29] have mostly
focused on the tweet content and social interactions among the
participants in the Twitter network. In a social network, while all
social bots may not perform malicious activities, a few of them may
be employed for specific benign applications like news or blog feeds
[4]. The social botnet community detection is an important research
challenge where the coordination and cooperation among the social
bots may create strong malicious activities, thereby breaking the
security perimeter of users.
In [18],[19], some methods have been proposed to identify fraud-
sters who sell legitimate online social networking accounts created
in the Twitter network. If a botmaster (malicious user) is willing to
buy legitimate accounts from fraudsters, then it can compromise
a larger number of legitimate participants (OSN accounts) by cre-
ating attack edges between them and the social bot. In fact, the
botmaster can perform devastating malicious activities, such as
spreading social spam content, manipulating online ratings and rec-
ommendations [1]. The social bots can also re-tweet the malicious
tweets posted by the botmaster [29]. Furthermore, the botmaster
may create multiple fake identities and attempt to establish social
relationship between a larger number of legitimate participants to
avoid detection [12], affecting the quality of experience for Twitter
users. Therefore, detecting malicious bots is an important problem.
To protect against botmaster attacks, in this paper, we first con-
struct a weighted signed Twitter network graph based on the trust
values and behavioral similarity between pairs of participants. For
evaluating the trust value of each participant, we adopt a random
Session 13: Malware ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan708walk model [8] in which each participant moves to one of its neigh-
boring participants with equal probability. Initially, we assign the
trust value for each participant based on its behavioral activities.
Later, each participant updates its trust value based on the influence
value of the neighboring participants. The proposed trust-driven
random walk model evaluates the trust value of each participant by
considering important features, such as tweet content, URL-based,
graph-based, profile-based features and influence value of the neigh-
boring participants. We analyze the behavioral similarity of the
participants by considering tweet-content similarity, shared URL
similarity, interest similarity, and social interaction similarity for
identifying similar type of behavior (malicious or non-malicious)
among the participants in the Twitter network.
Next, we propose a Social Botnet Community Detection (SBCD)
algorithm by considering the behavioral similarity matrix in order
to identify the social botnet communities in the weighted signed
Twitter network graph. The social bots with higher (resp. lower)
behavioral similarity edges are densely (resp. sparsely) connected
within the social botnet community. Moreover, the attack edges
between the social bots and legitimate participants are sparsely
connected between the communities. The untrusted edges with
higher behavioral similarity have more social impact on the Twitter
community than trusted edges with lower behavioral similarity. We
also propose a Deep Autoencoder based Social Botnet Community De-
tection (DA-SBCD) algorithm to reconstruct and detect social botnet
communities with different types of malicious activities. Finally, the
effectiveness of DA-SBCD and SBCD are analyzed experimentally
in terms of normalized mutual information (NMI), precision, recall,
and F-measure.
The novel contributions of this paper are summarized as follows:
• Analyze the participants’ behavioral features to identify mali-
cious and non-malicious participants in the Twitter network.
• Evaluate the trust value of each participant based on several
features and influence values of the neighboring participants.
• Design SBCD algorithm to detect social botnet communities
of social bots having higher malicious behavioral similarity.
• Based on deep autoencoder model, develop DA-SBCD algo-
rithm to reconstruct and detect social botnet communities
that exhibit better performance.
• Conduct experiments with two Twitter datasets to demon-
strate the efficacy of the proposed algorithms in terms of nor-
malized mutual information, precision, recall and F-measure.
The paper is organized as follows. Section 2 briefly reviews the
related works while Section 3 presents the problem formulation.
Section 4 deals with the detection of social botnet communities
using deep learning. After analyzing the participants’ behavioral
features and trust-driven random walk model, this section describes
the Social Botnet Community Detection (SBCD) algorithm and and
DA-SBCD) algorithm using deep autoencoder. Section 5 presents
the experimental results while the final section offers conclusions.
2 RELATED WORKS
This section summarizes existing works on social botnet community
detection approaches.
2.1 Detection of Social Bots
The authors in [4] classified the OSN accounts into three categories
– cyborg, bot and human – based on the tweeting behavior and
user profile features, such as follower ratio, malicious URLs in
tweet, and URL ratio. It is shown in [29] how social botnets become
smarter to pretend like benign users, how the botmaster spreads
spam content, and how the social bots maintain relationship with
legitimate participants. Social botnet activities involving network-
based attributes (e.g., betweenness, closeness and degree centrality)
are analyzed in [26] to detect malicious behavior of social bots.
In [17], malicious social bots are detected based on users’ click
streaming behavior (sequence of clicks when a user visits some
URL). In [12], a trust model is derived by considering Dempster-
Shafer theory and Bayes’ theorem based on the spam content in
Twitter. Social botnet attacks exist in OSNs to manipulate user’s (or
item’s) popularity [15], thereby spreading spam content [29] and
creating multiple fake identities [24]. The above existing works rely
on the profile-based, network-based, content-based, and click-based
features to detect malicious social bots. However, our proposed
work in this paper focuses on malicious behavioral similarity among
OSN participants in order to detect different types of malicious
social botnet communities.
2.2 Community Detection in Unsigned
Networks
A deep auto-encoder based clustering algorithm is proposed in
[22] for community detection in social networks. However, these
existing works did not consider the impact of social bots on detect-
ing social botnet communities in OSNs. In [23], bots are detected
by considering correlation graph, and the botnet community is
detected by applying modularity-based clustering approach. The
methods in [22], [23] focus on detecting the communities in large-
scale networks. The SpamCom method has been proposed in [3] to
detect spammer communities based on the user behavioral features.
In contrast, our work in this paper is different from other existing
works [23], [3] in the sense that we focus on detecting social bot-
net communities based on deep autoencoder model with trust and
similarity values.
2.3 Community Detection in Signed Networks
A dynamic algorithm is proposed in [25] for signed social networks.
The authors used normalized mutual information (NMI) to deter-
mine the performance of the detected communities. In [21], [27] is
considered a random walk model (where each participant moves
to one of its neighboring participants with equal probability) to
detect sybil users (e.g., fake multiple identities), which are under
the control of a single malicious user. Such models assumed a lim-
ited number of edges exists between the legitimate community and
the sybil community because legitimate users are more likely to
be a friend of known users. Additionally, the models in [21], [27]
are designed for signed directed graphs to distinguish the social
relationship among users. A positive (resp. negative) relationship
between two participants (users) denotes that participant pi trusts
(resp. distrusts) participant pj. Moreover, the weight describes the
similarity between two participants in terms of interest, interaction
and content similarity. This motivated us to construct a weighted,
Session 13: Malware ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan709signed and directed graph representing the Twitter network. We
propose a Deep Autoencoder based Social Botnet Community De-
tection (called DA-SBCD) algorithm by considering a trust model
with weighted behavioral similarity value, thereby distinguishing
legitimate communities from malicious social botnet communities.
3 PROBLEM FORMULATION
Given a Twitter network G = (P, E), where the vertex-set P =
{p1, p2, ...., pn} represents the set of participants (i.e., OSN accounts)
and E = {} is the set of directed edges representing the
social relationship between pairs of participants pi , pj ∈ P. The
weight on a directed edge is based on the behavioral similarity
features, such as tweet similarity, shared URL similarity, interest
similarity, and interaction similarity (see Section 4.2). The social
trust relationship between two participants pi and pj determines
the siдni ,j of each directed edge . Furthermore, a normal-
ized weighted behavioral similarity matrix S = [wij]n×n, where
wij is the weight of the edge between pi and pj and n = |P| is the
number of participants. Now S is constructed based on the weighted
edges with a goal to partition the participants into different com-
munities (groups), C = {c1, c2, ...., cm}, where m represents the
desired number of communities. We assume that the participants
belonging to the same community have similar type of behavior
(malicious or non-malicious) and higher behavioral similarity.
As illustrated in Fig. 1(a), the botmaster P1 usually establishes
a strong social relationship with other social bots P2, P7, P9 and
P10. In this attack model, the botmaster constructs a re-tweeting
graph, where each node represents the social bot and each directed
edge represents a re-tweeting relationship between two partici-
pants (users). The botmaster thus creates malicious tweets (with
fake information or malicious URL in the tweet) and the social bots
re-tweet them. Additionally, the social bots can spread malicious
tweets to other legitimate participants. Indeed, the aim of the bot-
master is to spread spam content by creating multiple fake identities.
Moreover, in Fig. 1, the botmaster P1 establishes a strong social
relationship not only with social bots (P2, P7, P9 and P10) but also
with legitimate participants (P3, P5 and P8). If a botmaster is willing
to buy the legitimate accounts from fraudsters, then the botmaster
can have more legitimate friends by creating attack edges (e.g.,
between P1 and P3). This type of attack will influence legitimate
users by affecting users’ behavior, opinions and emotions. Many
such malicious activities can be performed either by the botmaster
or social bots.
Definition 1 (Signed Edge Set): Let E′ ⊆ P ×P ×siдn represent
a set of directed edges between the pairs of participants in P and
siдn ∈ {1,−1}. We distinguish two different types of directed edges,
e′ = ∈ E′. If siдnij = 1, it implies there exists a
trusted (non-attack) edge from participant pi to pj. On the other
hand, if siдnij = −1, then there exists an attack (or untrusted) edge
between a social bot and a legitimate participant from pi to pj.
Definition 2 (Weighted Signed Twitter Network Graph): A
weighted signed Twitter network graph G′ = (P, E′,T , S) is con-
structed from four components: a participant set P, a signed edge
set (with trusted and untrusted edges) E′, a trust vector T for all
participants, and a weighted behavioral similarity matrix S.
Problem (Social Botnet Community Detection): A Twitter
network graph G = (P, E) is given with the set of (malicious or
non-malicious) activities performed by each participant pi ∈ P.
The objective is to construct a weighted signed Twitter network
graph G′ = (P, E′,T , S) with the set of trusted (non-attack) and
untrusted (attack) weighted edges based on the behavioral similarity
among the participants with trust values. Here G′ is used to identify
the social botnet communities with different types of malicious
activities. The goal is to determine three functions f : G → G′, д :
G′ → C = {c1, c2, ...., cm} and h : C = {c1, c2, ...., m} → ˜C =
{ ˜c1, ˜c2, ....,
˜cm} for distinguishing legitimate participants among
social botnet communities C (with different types of malicious
activities) and community structure ˜C is reconstructed for detecting
social botnet communities with better accuracy.
Detection of social botnet communities with different types of
malicious activities is a challenging task. In the next section, we
apply the deep autoencoder model to reconstruct the community
˜ci from a community ci based on trust parameter T and behavioral
similarity matrix S. The proposed model is considered accurate
when ci ≈ ˜ci, ∀ci ∈ C, such that the participants belonging to the
same community are more likely to have similar type of (malicious
or non-malicious) behavioral similarities.
4 DEEP LEARNING BASED SOCIAL BOTNET
COMMUNITIES DETECTION
In this section, we first outline a deep learning architecture for so-
cial botnet community detection. Then we analyze the participants’
behavioral features from different perspectives to identify similar
type of behavior (malicious or not) among the participants. The pro-
posed trust-driven random walk model predicts attack edges based
on the participants’ behavioral features in the Twitter network. By
considering both behavioral similarity measure and trust-driven
random walk model, a social botnet community detection (SBCD)
algorithm is presented. This is followed by a DA-SBCD (Deep Au-
toencoder based SBCD) algorithm to detect more accurately social
botnet communities with different type of malicious activities.
4.1 Deep Learning Architecture for SBCD
Fig. 1 shows the proposed deep learning (deep autoencoder) archi-
tecture for detecting social botnet community. The architecture
consists of two phases – community formation and community
reconstruction (which identifies the communities more accurately).
In the first phase, the Twitter network graph G is converted into
a weighted signed Twitter network graph G′ based on the trust
parameter and the participants’ behavioral similarity features, such
as tweet similarity, shared URL similarity, interest similarity and
interaction similarity. The weighted signed Twitter network graph
G′ is used for detecting social botnet communities with different
types of malicious activities, such as posting malicious tweets, post-
ing or redirecting to malicious URLs, and creating multiple fake
identities). In the second phase, the architecture is integrated with
deep autoencoder model consisting of two sub-phases, namely the
encoder and decoder. The proposed model encodes an observed
input community ci with the set of trusted and untrusted weighted
edges using a function f defined in Equation (13). In the decoding
Session 13: Malware ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan710Figure 1: Deep learning architecture for social botnet community detection
sub-phase, a reconstructed community structure ˜ci is to be deter-
mined using the decoding function, i.e., ˜ci ≈ f (ci), for social botnet
community detection with better accuracy.
4.2 Participants’ Behavioral Features
As mentioned, the behavioral features of the participants include
tweet-content similarity, shared URL similarity, social interaction
similarity, and interest similarity. These are discussed below.
4.2.1 Tweet-content Similarity. Each tweet is represented as a term
frequency inverse document frequency (TFIDF) feature vector , where wl represents
(distinct) word in the tweet. The term T F IDF(w, tw,Tw) represents
the importance of w within a tweet tw and a set of tweets posted
by a participant (denoted as Tw ), which is computed as:
T F IDF(w, tw,Tw) = T F(w, tw) × IDF(w,Tw)
(1)
where T F(w, tw) is the ratio of the number of times the word w
appears in the tweet tw and the total number of words in the tweet.
The term IDF(w,Tw) is computed as:
IDF(w,Tw) = log
|{tw ∈ Tw : w ∈ tw}|
(2)
where |Tw | denotes the total number of tweets posted by a partic-