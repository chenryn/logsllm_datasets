Download from finelybook PI:EMAIL
599
interface IStoreWrapper
{
    void SetData(T data);
}
interface IRetrieveWrapper
{
    T GetData();
}
class Wrapper : IStoreWrapper, IRetrieveWrapper
{
    private T storedData;
    void IStoreWrapper.SetData(T data)
    {
       this.storedData = data;
    }
    T IRetrieveWrapper.GetData()
    {
      return this.storedData;
    }
}
Functionally, the Wrapper class is the same as before, except that you
access the SetData and GetData methods through different interfaces.
Click here to view code image
Wrapper stringWrapper = new Wrapper();
IStoreWrapper storedStringWrapper = stringWrapper;
storedStringWrapper.SetData("Hello");
IRetrieveWrapper retrievedStringWrapper = stringWrapper;
Console.WriteLine($"Stored value is
{retrievedStringWrapper.GetData()}");
Thus, is the following code legal?
Click here to view code image
IRetrieveWrapper retrievedObjectWrapper = stringWrapper;
The quick answer is no, and it fails to compile with the same error as
before. But if you think about it, although the C# compiler has deemed that
this statement is not type safe, the reasons for assuming this are no longer
valid. The IRetrieveWrapper interface only allows you to read the data
held in the Wrapper object by using the GetData method, and it does not
provide any way to change the data. In situations such as this where the type
Download from finelybook PI:EMAIL
600
parameter occurs only as the return value of the methods in a generic
interface, you can inform the compiler that some implicit conversions are
legal and that it does not have to enforce strict type safety. You do this by
specifying the out keyword when you declare the type parameter, like this:
Click here to view code image
interface IRetrieveWrapper
{
   T GetData();
}
This feature is called covariance. You can assign an
IRetrieveWrapper object to an IRetrieve-Wrapper reference as long
as there is a valid conversion from type A to type B, or type A derives from
type B. The following code now compiles and runs as expected:
Click here to view code image
// string derives from object, so this is now legal
IRetrieveWrapper retrievedObjectWrapper = stringWrapper;
You can specify the out qualifier with a type parameter only if the type
parameter occurs as the return type of methods. If you use the type parameter
to specify the type of any method parameters, the out qualifier is illegal, and
your code will not compile. Also, covariance works only with reference
types. This is because value types cannot form inheritance hierarchies. So,
the following code will not compile because int is a value type:
Click here to view code image
Wrapper intWrapper = new Wrapper();
IStoreWrapper storedIntWrapper = intWrapper; // this is legal
...
// the following statement is not legal - ints are not objects
IRetrieveWrapper
retrievedObjectWrapper = intWrapper;
Several of the interfaces defined by the .NET Framework exhibit
covariance, including the IEnumerable interface, which is detailed in
Chapter 19, “Enumerating collections.”
Download from finelybook PI:EMAIL
601
Note Only interface and delegate types (which are covered in Chapter
18) can be declared as covariant. You do not specify the out modifier
with generic classes.
Contravariant interfaces
Contravariance follows a similar principle to covariance except that it works
in the opposite direction; it enables you to use a generic interface to reference
an object of type B through a reference to type A as long as type B derives
from type A. This sounds complicated, so it is worth looking at an example
from the .NET Framework class library.
The System.Collections.Generic namespace in the .NET Framework
provides an interface called IComparer, which looks like this:
Click here to view code image
public interface IComparer
{
    int Compare(T x, T y);
}
A class that implements this interface has to define the Compare method,
which is used to compare two objects of the type specified by the T type
parameter. The Compare method is expected to return an integer value: zero
if the parameters x and y have the same value, negative if x is less than y, and
positive if x is greater than y. The following code shows an example that sorts
objects according to their hash code. (The GetHashCode method is
implemented by the Object class. It simply returns an integer value that
identifies the object. All reference types inherit this method and can override
it with their own implementations.)
Click here to view code image
class ObjectComparer : IComparer
{
    int IComparer.Compare(Object x, Object y)
    {
      int xHash = x.GetHashCode();
      int yHash = y.GetHashCode();
      if (xHash == yHash) return 0;
      if (xHash  interface to compare two objects, like this:
Click here to view code image
Object x = ...;
Object y = ...;
ObjectComparer objectComparer = new ObjectComparer();
IComparer objectComparator = objectComparer;
int result = objectComparator.Compare(x, y);
That’s the boring bit. What is more interesting is that you can reference
this same object through a version of the IComparer interface that compares
strings, like this:
Click here to view code image
IComparer stringComparator = objectComparer;
At first glance, this statement seems to break every rule of type safety that
you can imagine. However, if you think about what the IComparer
interface does, this approach makes sense. The purpose of the Compare
method is to return a value based on a comparison between the parameters
passed in. If you can compare Objects, you certainly should be able to
compare Strings, which are just specialized types of Objects. After all, a
String should be able to do anything that an Object can do—that is the
purpose of inheritance.
This still sounds a little presumptive, however. How does the C# compiler
know that you are not going to perform any type-specific operations in the
code for the Compare method that might fail if you invoke the method
through an interface based on a different type? If you revisit the definition of
the IComparer interface, you can see the in qualifier before the type
parameter:
Click here to view code image
public interface IComparer
{
   int Compare(T x, T y);
}
Download from finelybook PI:EMAIL
603
The in keyword tells the C# compiler that you can either pass the type T as
the parameter type to methods or pass any type that derives from T. You
cannot use T as the return type from any methods. Essentially, this makes it
possible for you to reference an object either through a generic interface
based on the object type or through a generic interface based on a type that
derives from the object type. Basically, if type A exposes some operations,
properties, or fields, in that case, if type B derives from type A, it must also
expose the same operations (which might behave differently if they have
been overridden), properties, and fields. Consequently, it should be safe to
substitute an object of type B for an object of type A.
Covariance and contravariance might seem like fringe topics in the world
of generics, but they are useful. For example, the List generic collection
class (in the System.Collections.Generic namespace) uses IComparer
objects to implement the Sort and BinarySearch methods. A List
object can contain a collection of objects of any type, so the Sort and
BinarySearch methods need to be able to sort objects of any type. Without
using contravariance, the Sort and BinarySearch methods would need to
include logic that determines the real types of the items being sorted or
searched and then implement a type-specific sort or search mechanism.
However, unless you are a mathematician, it can be quite difficult to recall
what covariance and contravariance actually do. The way I remember, based
on the examples in this section, is as follows:
Covariance example If the methods in a generic interface can return
strings, they can also return objects. (All strings are objects.)
Contravariance example If the methods in a generic interface can
take object parameters, they can take string parameters. (If you can
perform an operation by using an object, you can perform the same
operation by using a string because all strings are objects.)
Note As with covariance, only interface and delegate types can be
declared as contravariant. You do not specify the in modifier with
generic classes.
Download from finelybook PI:EMAIL
604
Summary
In this chapter, you learned how to use generics to create type-safe classes.
You saw how to instantiate a generic type by specifying a type parameter.
You also saw how to implement a generic interface and define a generic
method. Finally, you learned how to define covariant and contravariant
generic interfaces that can operate with a hierarchy of types.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 18.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Instantiate an object
by using a generic
type
Specify the appropriate generic type parameter. For
example:
Click here to view code image
Queue myQueue = new Queue();
Create a new
generic type
Define the class by using a type parameter. For
example:
Click here to view code image
public class Tree
   ...
}
Restrict the type
that can be
substituted for the
generic type
parameter
Specify a constraint by using a where clause when
defining the class. For example:
Click here to view code image
public class Tree
where TItem : IComparable
{
   ...
}
Download from finelybook PI:EMAIL
605
Define a generic
method
Define the method by using type parameters. For
example:
Click here to view code image
static void InsertIntoTree
(Tree tree, params TItem[] data)
{
   ...
}
Invoke a generic
method
Provide types for each of the type parameters. For
example:
Click here to view code image
InsertIntoTree(charTree, 'Z', 'X');
Define a covariant
interface
Specify the out qualifier for covariant type
parameters. Reference the covariant type parameters
only as the return types from methods and not as the
types for method parameters:
Click here to view code image
interface IRetrieveWrapper
{
   T GetData();
}
Define a
contravariant
interface
Specify the in qualifier for contravariant type
parameters. Reference the contravariant type
parameters only as the types of method parameters
and not as return types:
Click here to view code image
public interface IComparer
{
   int Compare(T x, T y);
}
Download from finelybook PI:EMAIL
606
CHAPTER 18
Using collections
After completing this chapter, you will be able to:
Explain the functionality provided in the different collection classes
available with the  .NET Framework.
Create type-safe collections.
Populate a collection with a set of data.
Manipulate and access the data items held in a collection.
Search a list-oriented collection for matching items by using a
predicate.
Chapter 10, “Using arrays,” introduces arrays for holding sets of data.
Arrays are very useful in this respect, but they have their limitations. Arrays
provide only limited functionality; for example, it is not easy to increase or
reduce the size of an array, and neither is it a simple matter to sort the data
held in an array. Also, arrays only really provide a single means of accessing
data—by using an integer index. If your application needs to store and
retrieve data by using some other mechanism, such as the first-in, first-out
queue mechanism described in Chapter 17, “Introducing generics,” arrays
might not be the most suitable data structure to use. This is where collections
can prove useful.
What are collection classes?
Download from finelybook PI:EMAIL
607
The Microsoft .NET Framework provides several classes that collect
elements together such that an application can access the elements in
specialized ways. These are the collection classes mentioned in Chapter 17,
and they live in the System.Collections.Generic namespace.
As the namespace implies, these collections are generic types; they all
expect you to provide a type parameter indicating the kind of data that your
application will be storing in them. Each collection class is optimized for a
particular form of data storage and access, and each provides specialized
methods that support this functionality. For example, the Stack class
implements a last-in, first-out model, where you add an item to the top of the
stack by using the Push method, and you take an item from the top of the
stack by using the Pop method. The Pop method always retrieves the most
recently pushed item and removes it from the stack. In contrast, the
Queue type provides the Enqueue and Dequeue methods described in
Chapter 17. The Enqueue method adds an item to the queue, while the
Dequeue method retrieves items from the queue in the same order,
implementing a first-in, first-out model. A variety of other collection classes
are also available, and the following table provides a summary of the most
commonly used ones.
Collection
Description
List
A list of objects that can be accessed by index, as with
an array, but with additional methods with which to
search the list and sort the contents of the list.
Queue
A first-in, first-out data structure, with methods to add
an item to one end of the queue, remove an item from
the other end, and examine an item without removing it.
Stack
A first-in, last-out data structure with methods to push
an item onto the top of the stack, pop an item from the
top of the stack and examine the item at the top of the
stack without removing it.
LinkedList
A double-ended ordered list, optimized to support
insertion and removal at either end. This collection can
act like a queue or a stack, but it also supports random
access as a list does.
HashSet
An unordered set of values that is optimized for fast
Download from finelybook PI:EMAIL
608
retrieval of data. It provides set-oriented methods for
determining whether the items it holds are a subset of
those in another HashSet object as well as
computing the intersection and union of HashSet
objects.
Dictionary
A collection of values that can be identified and
retrieved by using keys rather than indexes.
SortedList
A sorted list of key/value pairs. The keys must
implement the IComparable interface.
The following sections provide a brief overview of these collection
classes. Refer to the .NET Framework class library documentation for more
details on each class.
Note The .NET Framework class library also provides another set of
collection types in the System.Collections namespace. These are
nongeneric collections, and they were designed before C# supported
generic types (generics were added to the version of C# developed for
the .NET Framework version 2.0). With one exception, these types all
store object references, and you are required to perform the appropriate
casts when you store and retrieve items. These classes are included for
backward compatibility with existing applications, and it is not
recommended that you use them when building new solutions. In fact,
these classes are not available if you are building Universal Windows
Platform (UWP) apps.
The one class that does not store object references is the BitArray
class. This class implements a compact array of Boolean values by
using an int; each bit indicates true (1) or false (0). If this sounds
familiar, it should; this is very similar to the IntBits struct that you saw
in the examples in Chapter 16, “Handling binary data and using
indexers.” The BitArray class is available to UWP apps.
One other important set of collections is available, and these classes
are defined in the System.Collections.Concurrent namespace. These are
Download from finelybook PI:EMAIL
609
thread-safe collection classes that you can use when you’re building
multithreaded applications. Chapter 24, “Improving response time by
performing asynchronous operations,” provides more information on
these classes.
The List collection class
The generic List class is the simplest of the collection classes. You can
use it much like you use an array—you can reference an existing element in a
List collection by using ordinary array notation, with square brackets and
the index of the element, although you cannot use array notation to add new
elements. However, in general, the List class provides more flexibility
than arrays do and is designed to overcome the following restrictions
exhibited by arrays:
If you want to resize an array, you have to create a new array, copy the
elements (leaving out some if the new array is smaller), and then
update any references to the original array so that they refer to the new
array.
If you want to remove an element from an array, you have to move all
the trailing elements up by one place. Even this doesn’t quite work
because you end up with two copies of the last element.
If you want to insert an element into an array, you have to move
elements down by one place to make a free slot. However, you lose the
last element of the array!
The List collection class provides the following features that preclude
these limitations:
You don’t need to specify the capacity of a List collection when
you create it; it can grow and shrink as you add elements. There is an
overhead associated with this dynamic behavior, and if necessary, you
can specify an initial size. However, if you exceed this size, the
List collection simply grows as necessary.
You can remove a specified element from a List collection by
using the Remove method. The List collection automatically
Download from finelybook PI:EMAIL
610
reorders its elements and closes the gap. You can also remove an item
at a specified position in a List collection by using the RemoveAt
method.
You can add an element to the end of a List collection by using its
Add method. You supply the element to be added. The List
collection resizes itself automatically.
You can insert an element into the middle of a List collection by
using the Insert method. Again, the List collection resizes itself.
You can easily sort the data in a List object by calling the Sort
method.
Note As with arrays, if you use foreach to iterate through a List
collection, you cannot use the iteration variable to modify the contents
of the collection. Additionally, you cannot call the Remove, Add, or
Insert method in a foreach loop that iterates through a
List  collection; any attempt to do so results in an
InvalidOperationException exception.
Here’s an example that shows how you can create, manipulate, and iterate
through the contents of a List collection:
Click here to view code image
using System;
using System.Collections.Generic;
...
List numbers = new List();
// Fill the List by using the Add method