Distance (millions)
(a) Skip list Proof Size
0
1
2
3
Size (millions)
(b) RBB-Tree Proof Size
Figure 10: RBB-Tree performance for di(cid:11)erent snap-
shot sizes. Curve labels indicate the number of keys per
snapshot|from 100 keys to one million keys per snap-
shot. (a) Insertion time vs. tree size. (b) Proof extrac-
tion time vs. tree size. The \knee" around 0.8 million
elements is due to the over(cid:13)ow of the disk block cache.
Keys per snapshot
Tree Size (GB)
100
18
1K 10K 100K 1M
13
0.5
7
2
Table 1: RBB-Tree size on disk as a function of the
snapshot size used to build it. Sizes shown correspond
to trees with three million keys.
per distance. For small distances, di(cid:11)erent proofs
fall within vastly di(cid:11)erent disk blocks, making proof
extraction performance heavily I/O bound. For
larger distances approaching the entire skip list size,
random proofs have many disk blocks in common,
amortizing I/O overheads and lowering the average
cost.
We continue by evaluating the performance char-
acteristics of RBB-Trees. Figure 10 contains two
graphs, one showing how insertion time grows with
tree size (Figure 10(a)) and another showing how
proof extraction time grows with tree size (Fig-
ure 10(b)).
Smaller snapshot sizes have two e(cid:11)ects: more disk
blocks for the same number of elements and more
hashing. The number of disk blocks used is higher
because some keys are replicated across more snap-
shots; the amount of hashing is higher since every
new copy of a key node must have a new hash la-
bel calculated. The (cid:12)rst e(cid:11)ect is evidenced in Ta-
ble 1, which shows the disk size of a three-million-
key RBB-Tree with varying snapshot sizes. The sec-
ond e(cid:11)ect is evidenced in Figure 10(a), plotting in-
sertion times for di(cid:11)erent snapshot sizes.
Proof extraction experiments consisted of 1,000
random searches for every size increment. This op-
eration, which consists of a tree traversal from the
root of the tree to a leaf, is not a(cid:11)ected by snapshot
size, but only by tree size (tree height, speci(cid:12)cally).
Figure 11: Proof sizes (minimum, average, maximum)
in skip lists and RBB-Trees. (a) Proof size vs. distance
between the skip list proof end points. (b) Proof size vs.
RBB-Tree size.
Neither the traversed logical \shape" of the tree, nor
the distribution of keys into disk blocks are depen-
dent on how frequently a tree snapshot is archived.
Finally, we graph proof sizes in skip lists (Fig-
ure 11(a)) and RBB-Trees (Figure 11(b)). Both
graphs show proof sizes in KBytes, over 1,000 uni-
form random trials in a skip list of 100 million ele-
ments and an RBB-Tree of three million elements,
respectively. The skip list curve starts out as a reg-
ular square logarithmic curve, except for large dis-
tances, close to the size of the entire list. We con-
jecture that the reason for this exception is that for
random trials of distances close to the entire list size,
all randomly chosen proofs are worst-case proofs,
including every link of every level between source
and destination, although we must explore this ef-
fect further. The RBB-Tree graph shows a regular
logarithmic curve.
6.2 System Performance
Although microbenchmarks can be helpful in un-
derstanding how the basic blocks of Timeweave per-
form, they cannot give a complete picture of how the
system performs in action. For example, very rarely
does a Timeweave machine need to insert thousands
of elements into a skip list back-to-back. As a re-
sult, the disk block caching available to batched in-
sertions is not available for skip list usage patterns
exhibited by Timeweave. Similarly, most proof ex-
tractions in timelines only span short distances; for
one-second-long timeline time steps with one en-
tanglement process per peer every 10 minutes, a
Timeweave machine barely needs to traverse a dis-
tance of 10 (cid:2) 60 = 600 elements to extract a prece-
dence proof, unlike the random trials measured in
Figure 9.
In this section we measure two performance met-
0
0
4
0
0
3
)
s
m
0
0
2
(
e
m
T
i
0
0
1
0
3
)
s
e
t
y
B
K
0
2
(
e
z
i
S
a
t
a
D
0
1
0
0
0
2
4
6
8
0
2
4
6
8
Threads per step
(a) Thread Processing
Threads per step
(b) Data sent
Figure 12:
Timeweave performance for di(cid:11)erent
Timeweave loads. The errorbars show one standard
deviation around the average.
(a) Time taken by
Timeweave maintenance per step.
(b) Data sent per
time step.
rics of a Timeweave machine in action: mainte-
nance time and data transmitted. Timeweave main-
tenance consists of the di(cid:11)erent computations and
data manipulations performed to verify, archive and
acknowledge timeline threads. Transmitted data
consist of new outgoing threads to the peers of
the Timeweave machine and receipts for threads re-
ceived from those peers.
We measure the change of these two metrics as the
load of a Timeweave machine changes. The load of
a Timeweave machine is roughly the number of in-
coming threads it has to handle per time step. If we
(cid:12)x the duration of each time step to one second, and
the entanglement interval to 10 minutes (600 time
steps), then a load of 5 means that the entanglement
service set consists of 600(cid:2)5 = 3000 Timeweave ma-
chines and, as a result, every Timeweave machine
receives on average 5 threads per second.
Figure 12(a) shows the time it takes a single ma-
chine to perform Timeweave maintainance per one-
second-long time step. The almost perfectly linear
rate at which maintenance processing grows with
the ratio of threads per time step indicates that
all-to-all entanglement can scale to large entangled
service sets only by limiting the entanglement fre-
quency. However, for reasonably large service sets,
up to 1000 Timeweave machines for 10-minute en-
tanglement, maintenance costs range between 2 and
8% of the processing resources of a PC-grade server.
Figure 12(b) shows the amount of data sent per
time step from a single Timeweave machine. Al-
though the data rate itself is no cause for con-
cern, the number of di(cid:11)erent destinations for secure
transmissions could also limit how all-to-all entan-
glement scales. Again, for entangled service sets
and entanglement intervals that do not exceed two
or three threads per time step, Timeweave mainte-
nance should not pose a problem to a low-end server
with reasonable connectivity.
7 Conclusion
In this work we seek to extend the traditional idea
of time stamping into the concept of a secure time-
line, a tamper-evident historic record of the states
through which a system passed in its lifetime. Se-
cure timelines make it possible to reason about the
temporal ordering of system states in a provable
manner. We then proceed to de(cid:12)ne timeline entan-
glement, a technique for creating undeniable tempo-
ral orderings across mutually distrustful service do-
mains. Finally, we design, describe the implementa-
tion of, and evaluate Timeweave, a prototype imple-
mentation of our timeline entanglement machinery,
based on two novel authenticated data structures:
append-only authenticated skip lists and disk-based,
persistent authenticated search trees. Our measure-
ments indicate that sizes of several hundred service
domains can be e(cid:14)ciently entangled at a frequency
of once every ten minutes using Timeweave.
Although our constructs preserve the correctness
of temporal proofs, they are not complete, since
some events in a dishonest service domain can be
hidden from the timelines with which that domain
entangles (Section 4.3). We plan to alleviate this
shortcoming by employing a technique reminiscent
of the signed-messages solution to the traditional
Byzantine Generals problem [15]. Every time ser-
vice A sends a thread to peer B, it also piggybacks
all the signed threads of other services it has re-
ceived and archived since the last time it sent a
thread to B. In such a manner, a service will be able
to verify that all members of the entangled service
set have received the same, unique timeline authen-
ticator from every other service that it has received
and archived, verifying global historic integrity.
We also hope to migrate away from the all-
to-all entanglement model, by employing recently-
developed, highly scalable overlay architectures
such as CAN [22] and Chord [24].
In this way, a
service only entangles its timeline with its imme-
diate neighbors. Temporal proofs involving non-
neighboring service domains use transitive tempo-
ral mapping, over the routing path in the overlay,
perhaps choosing the route of least temporal loss.
Finally, we are working on a large scale dis-
tributed historic (cid:12)le system that enables the auto-
matic maintenance of temporal orderings among (cid:12)le
system operations across the entire system.
8 Acknowledgments
We thank Dan Boneh for su(cid:11)ering through the early
stages of this work, as well as Hector Garcia-Molina
and Neil Daswani for many helpful comments and
pointed questions.
This work is supported by the Stanford Network-
ing Research Center, by DARPA (contract N66001-
00-C-8015) and by Sonera Corporation. Petros Ma-
niatis is supported by a USENIX Scholar Fellow-
ship.
References
[1] Anagnostopoulos, A., Goodrich, M. T., and Tamas-
sia, R. Persistent Authenticated Dictionaries and Their
Applications.
In Proceedings of the Information Se-
curity Conference (ISC 2001) (Malaga, Spain, Oct.
2001), vol. 2200 of Lecture Notes in Computer Science,
Springer, pp. 379{393.
[2] Ansper, A., Buldas, A., Saarepera, M., and
Willemson, J.
Improving the Availability of Time-
Stamping Services.
In Proccedings of the 6th Aus-
tralasian Conference on Information and Privacy
(ACISP 2001) (Sydney, Australia, July 2001).
[3] Bayer, R.
Symmetric binary B-trees: Data struc-
ture and maintenance algorithms. Acta Informatica 1
(1972), 290{306.
[4] Bayer, R., and McCreight, E. M. Organization and
Maintenance of Large Ordered Indexes. Acta Informat-
ica 1, 3 (1972), 173{189.
[5] Benaloh, J., and de Mare, M. E(cid:14)cient Broadcast
Time-stamping. Tech. Rep. TR-MCS-91-1, Clarkson
University, Department of Mathematics and Computer
Science, Apr. 1991.
[6] Buldas, A., Laud, P., and Lipmaa, H. Account-
able Certi(cid:12)cate Management using Undeniable Attes-
tations. In Proceedings of the 7th ACM Conference on
Computer and Communications Security (CCS 2000)
(Athens, Greece, Nov. 2000), pp. 9{17.
[7] Buldas, A., Laud, P., and Lipmaa, H. Eliminat-
ing Counterevidence with Applications to Accountable
Certi(cid:12)cate Management. Jounal of Computer Security
(2002). To appear.
[8] Buldas, A., Laud, P., Lipmaa, H., and Villemson,
J. Time-stamping with Binary Linking Schemes. In Ad-
vances on Cryptology (CRYPTO 1998) (Santa Barbara,
USA, Aug. 1998), H. Krawczyk, Ed., vol. 1462 of Lecture
Notes in Computer Science, Springer, pp. 486{501.
[9] Cormen, T. H., Leiserson, C. E., and Rivest, R. L.
Introduction to Algorithms, (cid:12)rst ed. McGraw-Hill, 1989.
[10] Goodrich, M. T., Tamassia, R., and Schwerin, A.
Implementation of an Authenticated Dictionary with
Skip Lists and Commutative Hashing. In 2001 DARPA
Information Survivability Conference and Exposition
(DISCEX 2001) (Anaheim, CA, USA, June 2001).
[11] Haber, S., and Stornetta, W. S. How to Time-stamp
a Digital Document. Journal of Cryptology: the Jour-
nal of the International Association for Cryptologic Re-
search 3, 2 (1991), 99{111.
[12] Just, M. Some Timestamping Protocol Failures. In Pro-
ceedings of the Symposium on Network and Distributed
Security (NDSS 98) (San Diego, CA, USA, Mar. 1998),
Internet Society.
[13] Kocher, P. On Certi(cid:12)cate Revocation and Valida-
In Financial Cryptography (FC 1998) (1998),
tion.
vol. 1465 of Lecture Notes in Computer Science,
Springer, pp. 172{177.
[14] Lamport, L. Time, Clocks, and the Ordering of Events
in a Distributed System. Communications of the ACM
21, 7 (July 1978), 558{565.
[15] Lamport, L., Shostak, R., and Pease, M. The Byzan-
tine Generals Problem. ACM Transactions on Program-
ming Languages and Systems 4, 3 (July 1982), 382{401.
[16] Maniatis, P., and Baker, M. Enabling the Archival
Storage of Signed Documents.
In Proceedings of the
USENIX Conference on File and Storage Technolo-
gies (FAST 2002) (Monterey, CA, USA, Jan. 2002),
USENIX Association, pp. 31{45.
[17] Merkle, R. C. Protocols for Public Key Cryptosys-
tems. In Proceedings of the 1980 Symposium on Security
and Privacy (Oakland, CA, U.S.A., Apr. 1980), IEEE
Computer Society, pp. 122{133.
[18] Naor, M., and Nissim, K. Certi(cid:12)cate Revocation and
Certi(cid:12)cate Update. In Proceedings of the 7th USENIX
Security Symposium (San Antonio, TX, USA, Jan.
1998), pp. 217{228.
[19] National Institute of Standards and Technology
(NIST). Federal Information Processing Standard Pub-
lication 180-1: Secure Hash Standard. Washington,
D.C., USA, Apr. 1995.
[20] Pugh, W. Skip Lists: a Probabilistic Alternative to
Balanced Trees. Communications of the ACM 33, 6
(June 1990), 668{676.
[21] Quisquater, J. J., Massias, H., Avilla, J. S., Pre-
neel, B., and Van Rompay, B. TIMESEC: Speci(cid:12)-
cation and Implementation of a Timestamping System.
Technical Report WP2, Universit(cid:19)e Catholique de Lou-
vain, 1999.
[22] Ratnasamy, S., Francis, P., Handley, M., Karp, R.,
and Shenker, S. A Scalable Content-Addressable Net-
work. In Proceedings of the ACM SIGCOMM Sympo-
sium on Communication, Architecture, and Protocols
(San Diego, CA, U.S.A., Aug. 2001), ACM SIGCOMM,
pp. 161{172.
[23] Schneier, B., and Kelsey, J. Cryptographic Support
for Secure Logs on Untrusted Machines. In Proceedings
of the 7th USENIX Security Symposium (San Antonio,
TX, USA, Jan. 1998), pp. 53{62.
[24] Stoica, I., Morris, R., Karger, D., Kaashoek,
M. F., and Balakrishnan, H. Chord: A scalable peer-
to-peer lookup service for internet applications. In Pro-
ceedings of the ACM SIGCOMM Symposium on Com-
munication, Architecture, and Protocols (San Diego,
CA, U.S.A., Aug. 2001), ACM SIGCOMM, pp. 149{160.
[25] Surety, Inc. Secure Time/Date Stamping in a Public
Key Infrastructure. Available at http://www.surety.
com/.