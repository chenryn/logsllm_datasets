成功弹窗
## **XML External Entity (local)**
XML实体注入(本地): 在使用XML通信的服务中(如: SOAP服务)。Web系统没有验证与用户通信中XML格式,
攻击者可以构造恶意的XML文件来访问本地服务器上的资源信息。
首先整体浏览网页
用xml语句来查看etc目录下的passwd文件
?xml=]>&xxe;
结果如下
## **XML External Entity (remote)**
XML实体注入(远程): 在使用XML通信的服务中(如: SOAP服务)。Web系统没有验证与用户通信中XML格式,
攻击者可以构造恶意的XML文件来将受害服务器的敏感信息上传到攻击者的服务器上，严重的可以反弹shell。
用xml语句来查看etc目录下的passwd文件
?xml=]>&xxe;
结果如下
## **Server Side Request Forgery**
服务器端请求伪造: 一种由攻击者构造形成的指令并由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统资源。
构造payload：
?path=
如果 IP 地址 x.x.x.x开放了 81 端口, 那么返回得到的信息, 否则返回一个 500 错误。
## **Blind XPath Injection (boolean)**
XPath注入: 与SQL注入类似，当网站使用用户提交的信息来构造XML数据的XPath查询时，会发生XPath注入攻击。
通过将有意的畸形信息发送到网站，攻击者可以了解XML数据的结构，或访问他通常不能访问的数据。
如果XML数据用于认证（例如基于XML的用户文件），他甚至可以提升其在网站上的权限。
XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。
XPath 是 W3C XSLT 标准的主要元素，并且 XQuery 和 XPointer 都构建于 XPath 表达之上。
因此，对 XPath 的理解是很多高级 XML 应用的基础。
首先整体浏览网页：
构造payload：
?name=admin' and substring(password/text(),1,10)='7en8aiDoh!
结果如下
## **Cross Site Request Forgery**
跨站请求伪造: 会导致受害者在当前被认证的Web应用程序上执行一些 “非正常授权”
的操作。通常这类攻击需要借助第三方（如:通过邮件、私信、聊天发送链接等）的一些帮助，攻击者可以强制Web应用程序的用户执行攻击者选择的操作。当受害者是普通用户时,
CSRF攻击可能会影响最终用户数据和操作; 如果受害者是管理员帐户，CSRF攻击可能会危及整个Web应用程序系统的安全。
首先整体浏览网站，发现是Cross Site Scripting (stored)后的页面，会弹xss
构造payload：
    ?comment=I lIke studying">
点击here
结果如下
## **Frame Injection (phishing)**
Frame注入(钓鱼): 属于XSS的范畴, 将HTML的标签注入到存在漏洞的HTTP响应体中, 如: iframe标签。
构造payload:
## **Frame Injection (content spoofing)**
Frame注入(内容欺骗): 同上原理。
构造payload:
成功注入iframe标签
## **Unvalidated Redirect**
未验证的重定向:
当Web应用程序接受不受信任的输入时，可能会导致Web应用程序将请求重定向到包含在不受信任的输入中的URL，从而可能导致未经验证的重定向和转发。
通过将不受信任的URL输入修改为恶意网站，攻击者可能会成功启动网络钓鱼诈骗并窃取用户凭据。
由于修改链接中的服务器名称与原始网站相同，因此网络钓鱼尝试可能具有更可信的外观。
未验证的重定向和转发攻击也可用于恶意制作一个URL，该URL将通过应用程序的访问控制检查，然后将攻击者转发到他们通常无法访问的特权功能。
构造payload：
?redir=
成功跳转
## **Arbitrary Code Execution**
任意代码执行: 开发人员没有严格验证用户输入的数据, 在某些特殊业务场景中, 用户可构造出恶意的代码或系统命令,
来获得服务器上的敏感信息或者得到服务器的控制权限。
构造payload：
?domain=www.google.com; ifconfig
## **Full Path Disclosure**
完整路径泄露:
全路径泄露漏洞使攻击者能够看到Web应用程序在服务器端的完整路径(例如：/var/www/html/)。攻击者会结合其他漏洞对Web系统进一步的攻击(如:
写 Webshell)。
构造payload：
?path=
## **Source Code Disclosure**
源码泄露: 该漏洞会造成允许未授权用户获得服务器端应用程序的源代码。此漏洞会造成企业内部的敏感信息泄露或容易遭受恶意攻击者攻击。
构造payload：
?path=dsvw.py
结果如下
## **Path Traversal**
路径穿越: 路径遍历攻击（也称为目录遍历）旨在访问存储在Web根文件夹外部的文件和目录。通过使用 “../” 或 “..\”
等相对文件路径方式来操纵引用文件的变量，该漏洞会允许访问存储在文件系统上的任意文件和目录。
构造payload：
?path=../../../../etc/passwd
结果如下
## **File Inclusion (remote)**
远程文件包含: 通常利用目标应用程序中实现的 “动态文件包含” 机制，允许攻击者包括一个远程文件。 由于对用户输入的数据没有进行适当的验证，导致出现漏洞。
构造payload：
?include=dsvw.py
结果如下
## **HTTP Header Injection (phishing)**
HTTP响应头拆分(钓鱼): 用户提交的部分参数, 没有经过验证或过滤直接在响应头中输出,
由于HTTP的Header中使用了CRLF(url中的%0d%0a)来分割各个字段中的数据。恶意用户可以构造特殊的数据应该欺骗钓鱼。
构造payload：
    ?charset=utf8%0D%0AX-XSS-Protection:0%0D%0AContent-Length:388%0D%0A%0D%0ALoginUsername:Password:
当用户输入数据的时候会弹框
然后跳转到我们指定的页面
## **Component with Known Vulnerability (pickle)**
使用含有已知漏洞的组件(pickle): pickle存在一个文件序列化漏洞。
整体浏览网页
构造payload：
?object=cos%0Asystem%0A(S'ping -c 5 127.0.0.1'%0AtR.%0A
这里执行了ping -c 5 127.0.0.1 命令
## **Denial of Service (memory)**
拒绝服务(memory): 资源消耗型的 DoS 攻击, 通过大量的恶意请求来访问有缺陷的服务, 从而造成服务器的系统资源消耗(如:
CPU利用率100%、内存耗尽等) 增大, 来影响正常用户的使用。往往会造成正常用户的无法打开或无法访问等一系列问题。
整体浏览网页
构造payload：
?size=99999
可以看到页面一直在刷新
文笔生疏，措辞浅薄，望各位大佬不吝赐教，万分感谢。
免责声明：由于传播或利用此文所提供的信息、技术或方法而造成的任何直接或间接的后果及损失，均由使用者本人负责， 文章作者不为此承担任何责任。
转载声明：儒道易行
拥有对此文章的修改和解释权，如欲转载或传播此文章，必须保证此文章的完整性，包括版权声明等全部内容。未经作者允许，不得任意修改或者增减此文章的内容，不得以任何方式将其用于商业目的。