Other attacks that are beyond the scope of BD security
are those that occur outside the system. For example, we do
not consider identity theft, and implicitly make the assumption
that users only act on behalf of themselves. Another example
is a user copying the content of his friend’s post into his own
public post, thus revealing it to an attacker who knows where
this was copied from. In order for BD security to account for
such a ﬂow, it has to happen “ofﬁcially,” through the system—
by a dedicated re-posting action that copies content from one
post into another. To make an analogy with language-based
security: If the content of a high variable inﬂuences that of
a low variable via the programming language constructs, then
the leak is typically caught; but if the user manually creates
a correlation between the low and high console inputs to the
program, the leak cannot be caught.
In addition to these theoretically inherent limitations, our
veriﬁcation work has practical
limitations concerning code
coverage, resilience under improvements or extensions, and
the ability to cope with alternative social media architectures.
Coverage. First, our conﬁdentiality guarantees refer to the
logic of the application layer. They do not address network-
level attacks, and implicitly count on communication being
perfectly encrypted (even though, for achieving composition-
ality, we empower the attacker beyond the Dolev-Yao model).
Second, we only veriﬁed CoSMeDis’s I/O automaton
kernel, formalized in Isabelle and extracted into Scala (as
discussed in Section IV-C). In particular, we trust the API
layer to be a correct translator of http(s) requests to automaton
actions and of automaton output to JSON output. Crucially,
we trust that session management and the small piece of code
for ﬁle management are implemented correctly. For example,
mixing the identities of two users can entirely compromise
conﬁdentiality. Similarly, overwriting the image ﬁles between
two users compromises post conﬁdentiality. In summary, our
security guarantees are valid for the overall system only if the
code of the external layers does not introduce leaks. Extending
the scope of veriﬁcation to these layers would require us to
step outside the reach of Isabelle. However, compared to the
kernel, these layers require the establishment of much simpler,
noninterference-like properties: that they transport the data
back and forth between the end user and the veriﬁed kernel,
without doing anything “interesting,” like mixing identities.
Such properties seem to be in the scope of static information-
ﬂow analyzers such as Joana [33]—so a hybrid veriﬁcation
scheme (as in, e.g., [39]) might be suitable here.
Future improvements. Our current
implementation of
CoSMeDis is only a prototype, still lacking some important
features for production applications. In particular, (except for
741
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
the post image ﬁles) the system currently runs in memory,
i.e., there is no database or other data persistence facility.
To achieve data persistence on top of the current veriﬁcation
architecture, there are two possible approaches. We could use
an in-memory database such as Redis [4], regularly storing
snapshots for persistence. This worked excellently for CoCon,
a system intended to be used for a single conference for a
limited period of time, but will not scale to a full-ﬂedged social
media platform. A more realistic (but invasive) approach is
to adapt the code generator to directly produce Scalatra code
interacting with an SQL or NoSQL database (with NoSQL
having the advantage that it maps naturally to the ML-style
datatypes of Isabelle/HOL). Both solutions would introduce
new information ﬂow (from and to the persistent storage).
Future extensions. CoSMeDis currently offers a fairly re-
stricted functionality. To become a practically usable platform,
additional features must be added. Examples include searching
for posts whose titles match a string, re-posting/re-tweeting a
friend’s post, offering lists of potential friends based on one’s
proﬁle, and tagging a post by users who read it. Some of these
features, e.g., searching, do not open new channels, hence can
be added without affecting the security guarantees.
Other features would lead to a weakening of the guarantees.
For example, if we want to allow re-posting of private posts,
this would require amending the trigger to acknowledge a new
legitimate ﬂow. Yet other features, such as reader tagging,
would not affect
the existing guarantees, but would make
nontrivial some previously trivial conﬁdentiality questions:
Under which conditions, and to which extent, can a group of
users learn of a post’s readers? In all these cases, BD security
is ﬂexible enough to express the new conﬁdentiality situation,
and it seems that our heuristic for establishing conﬁdentiality
would still work. However, the formal statements and proofs
might need substantial revision. In order to still be able
to instantiate our compositionality framework, we need to
preserve its assumptions, notably secret polarization. The new
features would need to be implemented in a way that respects
the master-slave paradigm discussed in Section VI-A. For
example, the re-posting of a remote post should proceed by
notifying the original node.
Alternative architectures. CoSMeDis is a network of web
applications following a client-server paradigm. This has the
advantage that users can access the system from any device
with a web browser. Moreover,
the extension of CoSMed
to CoSMeDis required only moderate changes to the code,
leading to speciﬁcation and proof reuse.
The disadvantage of this architecture is that users have
to trust
the operators of their node (unless they run one
themselves) and of their friends’ nodes, who have access to
conﬁdential information in the system. This can be alleviated
to some degree by adding a layer of end-to-end encryption
[9,10,30] on top. Moreover, there are distributed architectures
for online social networks based on peer-to-peer (P2P) net-
works, avoiding the client-server paradigm [16,20,35]. They
place the application logic on the clients instead of servers,
and rely on data encryption to ensure privacy.
However, despite encryption and decentralization, we be-
lieve that security goals and challenges similar to those of
our case study also arise when using such architectures—after
all, conﬁdential information is processed in plain text by the
client software running on the end-points of the network. For
example, a high-level security guarantee about the conﬁden-
tiality of private posts would require each client in such a
P2P network to preserve the conﬁdentiality of posts received
from the clients of friends. In principle, such a requirement
could again be formulated as a BD Security property of an
I/O automaton modeling the behavior of the client. However,
instantiating our compositionality result to a P2P architecture
appears to be problematic. This is due to the more complex
communication topology, which goes beyond the single-master
paradigm that we followed for CoSMeDis: In a P2P network,
data is typically forwarded and stored along dynamic paths
through the network, which collides with our assumption of
unique secret polarization.
IX. RELATED WORK
CoSMeDis belongs to a small, but expanding club of run-
ning systems proved to be secure using proof assistants, which
includes an aircraft microprocessor [34] (in ACL2), a hardware
architecture with information ﬂow primitives [22] (in Coq), a
separation kernel [21] (in HOL4), a noninterferent operating
system kernel [51] (in Isabelle/HOL), a secure browser [36]
(in Coq), and an e-voting system [39] (using the KeY theorem
prover jointly with the Joana information ﬂow analyzer).
In practice, security requirements in web applications are
typically implemented using access control. In particular,
for online social networks, relationship-based access control
[27,54] supports policies depending on connections in the
social graph, e.g., friendship links. Here, we aimed for more
than access control: We wanted to protect secrets not only from
direct illegitimate access, but also from leaking to unintended
recipients who draw inferences based on observations of the
system. Such inferences can easily evade access control.
Research in information ﬂow security has a rich history,
mostly unfolded from the pioneering notions of noninterfer-
ence [28] and nondeducibility [62] (of which BD Security
is a generalization). For the work we discuss below, we
employ a well-known taxonomy of controlled information
release (declassiﬁcation) due to Sabelfeld and Sands [59],
which is particularly relevant for the rich information exchange
in web applications: Ideally, security policies should be able
to describe precisely what information can be released (e.g.,
the content of a document), by whom (e.g., the owners or their
designated “friends”), as well as where and/or when (e.g., only
after the document is marked by the owner as public). We focus
on the compositionality of the various approaches.
Language-based approaches [58] concentrate on speciﬁc
programming languages. Since they operate on the level of
language syntax, they often achieve an impressive degree of
automation. For example, Jif [52] extends Java with security
labels for data values and enforces security via a combination
of static and run-time checking. It supports control over who
may declassify information, but not what is declassiﬁed. Joana
[33] checks noninterference of Java programs via static pro-
gram analysis. Control of declassiﬁcation is limited to where
in the program declassiﬁcation may occur. Jeeves [64] extends
a core language for functionality with a language for ﬂexible
security policies. RF(cid:4) [11] uses a relational Hoare logic to
742
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
reason about 2-safety properties of probabilistic programs,
including language-based notions of information ﬂow security.
The What&Where security property [41] allows control over
what is declassiﬁed by concurrent programs, but only in a non-
interactive setting, not suitable for web applications. Secure
multi-execution [24,57] is a run-time enforcement technique
where multiple copies of a program are executed, one for
each security level, controlling the information ﬂows between
the levels. Secure program partitioning [17,66] produces a
distribution of the code and data in a program onto different
hosts according to their different trust levels (e.g., trusted web
server and untrusted client-side browser).
While each of the aforementioned approaches supports
certain forms of declassiﬁcation, they do not consider the
setting and the kind of compositional reasoning that we have
aimed for: given a network of communicating, multi-user
systems, derive a global, complex information ﬂow security
property from the local security properties of the components.
Instead, the preservation of security under composition (or,
similarly challenging, reﬁnement [50]) is often considered w.r.t.
language constructs, such as sequential composition, if-then-
else branches, or while loops, for example in [46].
DStar [67] and Fabric [40] do consider distributed systems,
but they offer only coarse-grained control over what informa-
tion may be declassiﬁed: an assignment of security labels to
both data items and principals speciﬁes which principals may
declassify which data item. In contrast, the declassiﬁcation
bounds of BD Security specify what aspects of conﬁdential in-
formation may be declassiﬁed on a semantic level, formulated
in terms of arbitrary logical formulas. For example, the bound
for remote friendship information (cf. Appendix C) speciﬁes
that an attacker who can observe network trafﬁc may learn
about the existence of a remote friend of a user UID on a given
node, but not about the identity of that friend. The BD Security
policy captures this in a declarative way, independently of the
internal data structures used on the implementation level for
storing and processing conﬁdential information.
Our framework falls into the category of system-based
approaches. They work with security properties expressed
directly on the semantics, on variants of event systems or I/O
automata. Early work in this category [47] has observed that
even seemingly strong security properties are not preserved
under composition in general. Subsequently, comprehensive
frameworks have been developed for the composition of se-
curity properties in various settings, e.g., event systems [44],
reactive systems [56] and process calculi [15,26].
Some of
these focus on formulating classes of security properties that
are always guaranteed to be preserved under a given notion
of composition, such as McCullough’s Restrictiveness [48].
Others, such as Mantel’s MAKS framework [42,44], formulate
side conditions on the local security properties that guarantee
compositionality. Our compositionality result follows the lat-
ter tradition: Our assumptions of observable network trafﬁc
and strong and compatible communication infrastructures fall
into the ﬁrst case of Mantel’s Generalized Zipping Lemma
[44, Lemma 1]. The other cases of that
lemma deal with
scenarios where some communication transitions are neither
observable nor conﬁdential, which leads to additional require-
ments on the local security properties. The MAKS framework
does not require secret polarization: Its security properties are
ﬁne-tuned so that matching problems due to the scheduling of
secrets cannot occur. Hence, its compositionality result is less
restrictive on the communication infrastructure than ours. The
earlier security notions of McLean [49] and Zakinthinos and
Lee [65] are captured as MAKS properties [45].
The above frameworks could not be used for our case
study, because they focus on very strict, noninterference-like
notions of security without support for controlled declassiﬁ-
cation (except for very speciﬁc notions, such as intransitive
noninterference [43]). Chong and van der Meyden [18] discuss
information ﬂow policies (called architectures), where ﬁlter
functions are used to restrict what information may ﬂow be-
tween domains, together with an interpretation of the resulting
security properties in terms of an epistemic logic. However,
they do not consider compositional reasoning in our sense, i.e.,
composing the security properties of multiple components to
a security property of the overall system. The same applies to
the work on temporal logics and model checking approaches
for hyperproperties [19], of which information ﬂow security
properties are an instance. Greiner and Grahl [29] present
a compositionality result that supports what-declassiﬁcation
control, speciﬁed in terms of equivalence relations on com-
munication events, but it cannot express dynamically changing
conﬁdentiality requirements—as needed for web applications
in general and for CoSMeDis in particular. For example,
whether a given post p by user u is conﬁdential for an observer
depends on the (dynamically changing) visibility setting of p
and/or the friendship status between u and the observer.
The security notion from the literature that most closely
resembles ours is a recent one by Guttman and Rowe [31],
formulated on top of blur operators, which are similar to the
declassiﬁcation bounds used for BD Security. A composition-
ality result is presented that focuses on a different question
than ours: Instead of composing the security guarantees of
the individual nodes in a network, it considers a partitioning
of the network into a core of nodes that may handle secret
information and an outer part that is purely observing. It is
proved that the security guarantees of the core are preserved
under modiﬁcation of the outer part. This is not what we
needed in our case study: In CoSMeDis, all nodes of the
network potentially handle secret information, so the “core” is
the complete network. Our framework deals with the question
of how the security properties of the nodes inside the core
compose to an overall conﬁdentiality guarantee.
ACKNOWLEDGMENTS
We are indebted to Jasmin Blanchette, Simon Greiner,
Dieter Hutter, Nikhil Swamy, Dmitriy Traytel, and the anony-
mous reviewers for very useful comments and suggestions. We
gratefully acknowledge support from:
• Innovate UK through the Knowledge Transfer Partnership
010041 between Caritas Anchor House and Middlesex Uni-
versity: “The Global Noticeboard (GNB): a veriﬁed social
media platform with a charitable, humanitarian purpose”,
• EPSRC through grants “VOWS” (EP/N019547/1) and
• DFG through grants “MORES” (Hu 737/5-2) and “SecDed”
(Ni 491/13-3) in the priority program “RS3 – Reliably
Secure Software Systems” (SPP 1496).
“VRBMAS” (EP/K033921/1),
743
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1]
[2]
“CoCon website,” http://www21.in.tum.de/~popescua/rs3/CoCon.html.
“Facebook may have leaked your personal information: Symantec,”
Reuters, May 2011,
http://www.reuters.com/article/us-facebook-idUSTRE74A07R20110511.
“The Heartbleed bug,” http://heartbleed.com/.
“The Redis website,” https://redis.io/.
“The CoSMeDis Homepage,” http://andreipopescu.uk/CoSMeDis.html.
“Caritas Anchor House,” http://caritasanchorhouse.org.uk/, 2016.
“CoSMed website,” https://cosmed.globalnoticeboard.com, 2016.
“The diaspora∗ project,” https://diasporafoundation.org/, 2016.
[3]
[4]
[5]
[6]
[7]