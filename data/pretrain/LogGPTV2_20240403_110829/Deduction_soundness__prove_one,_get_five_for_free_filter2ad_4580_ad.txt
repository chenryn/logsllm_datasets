deﬁnition we set
× (cid:4) → τ ciphertext
SKE
SKE
TSKE := {(cid:4), τ kx
SKE, τ ciphertext
SKE
}
All introduced types are direct subtypes of the base type
(cid:4) (this deﬁnes ≤SKE). The deduction system captures the
security of secret key encryption
⎧⎪⎪⎨
⎪⎪⎩
DSKE :=
⎫⎪⎪⎬
⎪⎪⎭
l
x() m
k
la
x (k l
x(),m) ,
E
la
h
E
(k
l
h(),m)
m
ˆl
c(k
E
,
l
c(),m)
m
These rules are valid for arbitrary labels l, ˆl ∈ labels and
adversarial labels la ∈ labelsA. Read from top left to bot-
tom right, the rules capture the intuition that the adver-
sary can use any honestly generated key to encrypt some
term m, that the adversary knows the message contained
in any adversarial encryption and that the adversary knows
the message contained in any encryption under a corrupted
key.
We now give a concrete implementation ISKE for secret key
encryption. The implementation uses some IND-CCA se-
cure
scheme
(SKE.KeyGen, SKE.Enc, SKE.Dec).
As usual, here
SKE.KeyGen is a generation algorithm for key pairs, SKE.Enc
is an encryption algorithm and SKE.Dec is a decryption al-
gorithm. Note that SKE.Enc is an algorithm that takes
3Note that we distinguish encryptions under honest keys
from encryptions under corrupted keys on the level of func-
tion symbols. We need this to deﬁne forgetful positions later
(Section 8). E.g., a message encrypted with a corrupted key
cannot be hidden.
authenticated
encryption
secret
key
three inputs: the key, the message to be encrypted and the
randomness that is used for encryption.4
The computable interpretations of, kx and Ex (for x ∈
{h, c}) are as follows:
• (MSKE kx)(r): Let k := SKE.KeyGen(1η, r). Return
(cid:14)k, τ kx
SKE
(cid:15)
• (MSKE Ex)(ˆk, m)(r): Parse ˆk as (cid:14)k, τ kx
(cid:15)
SKE.Enc(k, m, r) and return (cid:14)c, τ ciphertext
SKE
SKE
(cid:15). Let c :=
Intuitively, the validSKE predicate guarantees that all keys
that may be used by the adversary later are generated dur-
ing initialization (i.e., with the init query). We only allow
static corruption of keys, i.e., the adversary has to decide
which keys are honest and which are corrupted at this stage.
Keys may only be used for encryption and decryption. This
implicitly prevents key cycles.
Theorem 3. Let M be a symbolic model and I a de-
duction sound implementation of M. If (MSKE,ISKE) and
(M,I) are compatible, then I ∪ ISKE is a deduction sound
implementation of M ∪ MSKE.
7.3 Macs
In this section we show that any deduction sound imple-
mentation can be extended by a mac scheme. More precisely,
we require a strongly EUF-CMA secure mac scheme [5].
We ﬁrst deﬁne the symbolic model (TMAC,≤MAC, ΣMAC,DMAC)
for macs. The signature ΣMAC features the function symbols
k : τ k
MAC
mac : τ k
MAC × (cid:4) → τ mac
MAC
for x ∈ {c, h}. The randomized function symbol k of arity
τ k
MAC represents keys. The randomized function symbol mac
of arity τ k
MAC represents the mac of a message.
To complete the formal deﬁnition we set the types
× (cid:4) → τ mac
MAC
TMAC := {(cid:4), τ k
MAC}
MAC, τ mac
All introduced types are direct subtypes of the base type
(cid:4) (this deﬁnes ≤MAC). The deduction system captures the
security of macs
DMAC :=
l() m
l(),m)
(cid:5)
(cid:6)
mac
k
,
macla (k l(),m)
ˆl(k
m
These rules are valid for arbitrary labels l, ˆl ∈ labels and
adversarial labels la ∈ labelsA. The rules are backed up
by the requirement that macs reveal the message that was
signed and the intuition that the adversary can use known
keys to deduce macs under those keys.
We now give a concrete implementation IMAC for macs.
The implementation uses some strongly EUF-CMA secure
mac scheme (MAC.KeyGen, MAC.Mac, MAC.Vfy). As usual,
here MAC.KeyGen is a generation algorithm for key pairs,
MAC.Mac computes a mac and MAC.Vfy is a veriﬁcation
algorithm. Note that MAC.Mac is an algorithm that takes
three inputs: the key, the message to be authenticated and
the randomness that is used for computing the mac.
The computable interpretations of k and mac are as fol-
lows:
• (MMAC k )(r): Let k := MAC.Mac(1η, r). Return (cid:14)k, τ k
MAC
4Since the message m is of basetype, we require a scheme
with message space {0, 1}∗
.
(cid:15).
1268• (MMAC sig)(ˆk, m; r): Parse ˆk as (cid:14)k, τ k
MAC.Mac(k, m, r) and return (cid:14)σ, m, τ mac
MAC
(cid:15). Let σ :=
(cid:15).
MAC
Analogously to validSKE, the predicate validMAC guarantees
static corruption and the dedicated use of keys.
Theorem 4. Let M be a symbolic model and I be deduc-
tion sound implementation of M. If (MMAC,IMAC) and(M,I)
are compatible, then I ∪ IMAC is a deduction sound imple-
mentation of M ∪ MMAC.
7.4 Public key encryption
In this section we deﬁne a symbolic model MPKE for public
key encryption and a corresponding implementation IPKE
based on an IND-CCA secure public key encryption scheme.
Theorem 5 then restates the result from [13] that adding
public key encryption to a deduction sound implementation
preserves deduction soundness.
We brieﬂy introduce the symbolic model (TPKE, ≤PKE,
ΣPKE, DPKE) for public key encryption. The signature ΣPKE
features the function symbols
→ τ ekx
× (cid:4) → τ ciphertext
dk x : τ dkx
PKE
for x ∈ {h, c}. The deduction system captures the security
of public key encryption
encx : τ ekx
PKE
ek x : τ dkx
PKE
PKE
PKE
⎧⎪⎪⎨
⎪⎪⎩
DPKE :=
l
x() m
ek
la
x (ek l
x(),m) ,
enc
⎫⎪⎪⎬
⎪⎪⎭
enc
la
h
l
h(),m)
(ek
m
,
enc
l
c(),m)
ˆl
c(ek
m
These rules are valid for arbitrary labels l, ˆl ∈ labels and ad-
versarial labels la ∈ labelsA. Read from top left to bottom
right, the rules capture the intuition that the adversary can
use any honestly generated key to encrypt some term m, the
adversary knows the message contained in any adversarial
encryption and the adversary knows the message contained
in any encryption under a corrupted key. The implementa-
tion IPKE is deﬁned in a straightforward way analogously to
the primitives already discussed and is based on an arbitrary
IND-CCA encryption scheme [19].
Theorem 5. Let M be a symbolic model and I a de-
duction sound implementation of M. If (MPKE,IPKE) and
(M,I) are compatible, then I ∪ IPKE is a deduction sound
implementation of M ∪ MPKE.
7.5 Hash functions
In this section we deal with the composition of deduction
sound implementations of arbitrary primitives with hash
functions. We consider hash functions implemented as ran-
dom oracles [7]: in this setting calls to the hash function are
implemented by calls to a random function which can only
be accessed in a black-box way. We model this idea directly
in our framework. In the symbolic model model we consider
a symbolic function that is randomized and which is imple-
mented by a randomized function. We recover the intuition
that hash functions are deterministic by restricting the calls
that an adversary can make: for each term t, the adversary
can only call the hash function with the honest label l(t).
The symbolic model for hash functions is rather standard.
It is given by the tuple (THASH,≤HASH, ΣHASH,DHASH) where
THASH := {(cid:4), τHASH}
and τHASH ≤HASH (cid:4). The signature ΣHASH contains only a
randomized function H : (cid:4) → τHASH characterized by the
deduction rule:
(cid:5)
(cid:6)
DHASH :=
m
H l(m)
where l ∈ labelsH.
The implementation IHASH for hash functions is via a ran-
domized function: when called, the function simply returns
a random value, and we will require that it does so consis-
tently; Concretely (MHASH H )(m; r) returns (cid:14)r, τHASH(cid:15).
The open function for hash functions is described in Figure 6.
If the bitstring to be opened was not the result of a generate
call, then it returns garbage of types either τHASH or (cid:4), de-
pending on what c encodes. Otherwise, it will return the
entry in L that corresponds to c: by the requirements posed
by validHASH below this will be H l(t)(m) for some bitstring
m with L[[m]] = t.
A useful observation is that by the description above, the
library L will never contain an entry of the form (c, H l(m))
for some adversarial label l ∈ labelsA; moreover, if (c, H l(m))
is in L, thenl = l(t) for some t, and L[[m]] = t.
The validHASH predicate. For simplicity we require that no
hash is present in init requests (our results easily extend to
the case where this restriction is not present). In addition we
use the predicate validHASH to enforce deterministic behavior
of our hash implementation. We require that for any term t,
all occurrences of H(t) in generate and sgenerate requests use
the same label. Concretely, we demand that for any term t,
ˆl(t) are labeled with the honest
all generate requests for H
label ˆl = l(t). The choice of label is not important: we
could alternatively request that if H l1 (t) and H l2 (t) occur
in a generate requests, then l1 = l2.
Theorem 6. Let I be a deduction sound implementation
of M. If (MHASH,IHASH) and (M,I) are compatible, then
I∪IHASH is a deduction sound implementation of M∪MHASH
in the random oracle model.
The intuition behind this proof is simple: collisions due
to tagging occur only with probability given by the birthday
bound (so with negligible probability). Given an adversary
that wins the deduction soundness game for the composed
libraries, we construct an adversary that breaks deduction
soundness of (M,I, validI). This latter adversary simulates
the hash function via a randomized transparent function
with no arguments: a generate H l(t)(t) call will be imple-
mented by a generate call to f l(t)(). Due to validHASH the
knowledge set S does not contain any occurrence of H with a
dishonest label, hence the only ”useful” deduction soundness
rule which allows the adversary to learn/manipulate terms
with dishonest labels are not applicable (we can cut them
out of any deduction).
8. FORGETFULNESS
All the theorems from Section 7 have one important draw-
back: key material cannot be sent around as the valid predi-
cates forbid keys from being used in non-key positions. This
takes the analysis of a large class of practical protocols (e.g,
many key exchange protocols) outside the scope of our re-
sults. The problem is that deduction soundness does not
guarantee that no information about non-DY terms is leaked
by the computational implementation. E.g., we could think
1269of a deterministic function symbol f that takes arguments
n
of type nonce with only the rule
f (nl()) . An implementa-
tion of f could leak half of the bits of its input and still
be sound. However, to send key material around, we need
to rely on the fact that information theoretically nothing is
leaked about the suitable positions for keys.
l()
To solve this problem, we introduce forgetful symbolic
models and implementations. A forgetful symbolic model
features function symbols with positions that are marked as
being forgetful. The corresponding implementation has to
guarantee, that no information about the arguments at these
positions will be leaked (except their length). Before we for-
malize these concepts we extend the framework developed
earlier in the paper with several technical details.
To allow the handling of forgetful positions, extend the
deﬁnition for hybrid terms with function symbols carrying
an honest label in the library. Let f be a function symbol
of arity ar(f ) = τ1 × . . . × τn → τ . Then a hybrid term of
f may be f l(a1, . . . , an) where each ai is either a bitstring
from [[τi]] or a term of typeτ i for forgetful positions i. For
normal positions ai must be a bitstring from [[τi]] as usual.
The deﬁnitions for the completeness of a library L and L[[c]]
are changed accordingly.
Forgetful symbolic models and implementations. We
say that a symbolic model M is a forgetful symbolic model if
arguments of a function symbol may be marked as forgetful.
In order to formalize forgetful implementations, the compu-
tational counterpart of forgetful positions, we introduce the
notion of an oblivious implementation.
Definition 3
(oblivious implementation). Let M
be a forgetful symbolic model. I = (M , [[·]], len, open, valid)
is an oblivious implementation of M if I is an implemen-
tation of M with a slightly changed signature: For each
function symbol f ∈ Σ with arity ar(f ) = τ1 × . . . × τn → τ
the signature of (M f ) is θ(τ1)×···×θ (τn)×{0, 1}η → [[τ ]]
where θ(τi) = N if the ith argument of f is forgetful and [[τi]]
otherwise.
Intuitively, oblivious implementations for all forgetful posi-
tions, take as input natural numbers; these will be the length
of the actual inputs on the forgetful positions.
As indicated above, a forgetful implementation is one
which is indistinguishable from an oblivious implementation.