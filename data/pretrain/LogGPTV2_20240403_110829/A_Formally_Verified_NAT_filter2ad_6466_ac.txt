→ S.dst_port = P .dst_port
→ S.src_ip = EXT _IP
→ S.src_port = F (P ).ext_port
→ send packet S
→ S.data = P .data
→ S.iface = internal
→ S.dst_ip = F (P ).int_ip
→ S.dst_port = F (P ).int_port
→ S.src_ip = P .src_ip
→ S.src_port = P .src_port
→ send packet S
} else {
}
} else {
drop packet P
}
Figure 6: A conceptual summary of the formal specification
of the NAT semantic properties (based on RFC 3022).
finds all entries with the same flow ID as the received packet and
updates their timestamps (ll.10–12); if there are no matching entries
(l.13), and if the packet arrived at the internal interface (l.14), and
if the flow table is not full (l.15), then the NAT adds a new entry
in the flow table (l.16). If, at this point, there exists an entry in the
flow table with the packet’s flow ID (l.20), then the NAT forwards
the packet, modifying its headers depending on whether the packet
arrived at the internal or external interface; otherwise, it drops the
packet (l.39).
We wrote a formal machine-readable specification of NAT se-
mantics, organized along similar lines. It merges expire_flows,
update_flow, and forward into a single decision tree. The tree con-
sists of branches over the conditions shown in Fig. 6 (pre-conditions),
such as P.iface = internal, and assertions that check the correspond-
ing output (post-conditions), such as “packet P is dropped” or
5
“S.dst_ip equals P.dst_ip.” Both pre- and post-conditions are writ-
ten in separation logic, formulated as predicates on abstract NAT
state and/or incoming/outgoing packets. The decision tree covers
both branches of each pre-condition, so it provides a complete spec-
ification of how the NAT behaves under every circumstance. We
formally verify that the C implementation of VigNAT implements
the behavior in this formal specification derived from Fig. 6.
Finally, since VigNAT maintains its state in libVig data structures,
we also prove that it uses these data structures correctly (§5.2.4),
i.e., that the data structures’ pre-conditions are satisfied.
4.2 Low-Level Properties
Besides NAT semantics, we also prove that VigNAT is free of the fol-
lowing undesired behaviors: buffer over/underflow, invalid pointer
dereferences, misaligned pointers, out-of-bounds array indexing,
accessing memory that is not owned by the accessor, use after free,
double free, type conversions that would overflow the destination,
division by zero, problematic bit shifts, and integer over/underflow.
Proving these properties boils down to proving that a set of as-
sertions introduced in the VigNAT code—either by default in the
KLEE symbolic execution engine [9] or using the LLVM undefined
behavior sanitizers [42, 43, 57]—always hold.
5 DESIGN AND IMPLEMENTATION
In this section, we describe the design of VigNAT and how we verify
its properties, as well as a few implementation-related highlights.
Full details and source code are available at [58].
While the goal of the work presented in this paper is specifically
to build a formally verified NAT, our broader goal is to find a prac-
tical way to verify any stateful NF, so we took a more principled
approach than strictly necessary. In our view, practicality consists
of the simultaneous achievement of two design goals: competitive
performance and low verification effort. The latter has three com-
ponents: writing the code in a way that can be verified, writing
the proof, and verifying the proof. Vigor supports C, and thus does
not impose an undue burden on writing the NF code, so we focus
on devising a technique for productively writing and verifying a
realistic NF.
Well-known verification approaches that are relevant to this task
include whole-program theorem proving (e.g., seL4 [34]) or per-
path/per-state techniques like symbolic execution [19, 55]. With
the former, verifying a property proof is relatively fast, but writing
the proof is a slow, often manual job. With the latter, verifying
a property in a real NF can take long, even forever, due to path
explosion [19, 55], but is easy to automate. To verify a stateful NF,
neither approach seems practical on its own.
In our approach, we decompose the proof into parts, and prove
each part with whichever technique is suited for that part; after that,
we stitch the proofs together. We posit that most NFs consist of one
part that is common across many NFs (thus making it worthwhile
to invest manual effort in proving its correctness) and another
part that is different in each NF (and thus its verification should
be automatic). We also posit that, over time, NFs will converge to
using a stable, common set of data types to encapsulate NF state,
and the difference between NFs will result primarily from how their
stateless code employs these data types. For VigNAT, we put all
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
A. Zaostrovnykh, S. Pirelli, L. Pedrosa, K. Argyraki, and G. Candea
It is in the proof of P4 and P5 that we find a second scalability
benefit of the lazy proofs technique: Not only does it allow us to
stitch together proofs done with different tools (thereby allowing
us to employ for each sub-proof whichever tool offers the optimal
benefit-to-effort ratio) but also makes it possible to get away with
proving weaker properties. For example, instead of proving that
P5 is universally true and then using this proof to further prove
P2, we first prove P2 assuming P5, and afterward only prove that
P5 holds for the specific way in which the proof of P2 relies on P5.
This use-case-specific proof of P5 is easier than proving P5 for all
possible use cases.
We now describe Vigor’s data structure library and its correct-
ness proof (§5.1), our “lazy proofs” technique and its use for proving
the correctness of VigNAT’s semantics (§5.2), and conclude with
a summary of the Vigor workflow (§5.3) and of the assumptions
underlying our approach (§5.4).
5.1 A Library of Verified NF Data Types
VigNAT consists of stateless application logic that manipulates state
stored in data structures, like hash tables and arrays, provided by
the Vigor library (libVig). For example, in §3, we placed incoming
packets into a ring data structure from libVig. Generally speaking,
stateless NF code should be free of any dynamically allocated state
and complex data structures. It can retain basic program state, such
as statically allocated scalar variables as well as structs of scalars.
Dealing with explicit state in the verification of imperative, non-
typesafe programs is hard, mainly due to the difficulty of tracking
memory ownership and type information, as well as disentangling
pointer aliases. For example, the question of which memory a void*
pointer could ever reference is often undecidable. Functional, type-
safe languages (Haskell, ML, etc.) are appealing for verification,
but to us it was paramount to both support C (preliminary evi-
dence [60] suggests C to be widely popular among NF developers)
and enable verification of a fully stateful NF. We accomplish both
by encapsulating NF state behind libVig’s interface and adopting a
disciplined use of pointers. While this approach is not compatible
with all software, we believe it is a good match for NFs.
Besides data types for NFs, libVig also provides a formal interface
specification that defines the behavior of these data types, along
with a proof that the libVig implementation obeys the specification.
To enable symbolic execution of stateless NF code, libVig also pro-
vides symbolic models of its data types. We verify libVig once, and
the proof carries over to any NF that uses the library.
This subsection details the libVig implementation (§5.1.1), de-
scribes our use of abstraction and contracts to formally specify
libVig’s semantics (§5.1.2), shows how we prove that the implemen-
tation satisfies its interface specification (§5.1.3), and presents the
symbolic models of libVig’s data structures (§5.1.4) to be used by a
symbolic execution engine.
5.1.1
libVig implementation. Competitive performance is an
important design goal, and libVig is a good place to optimize for
performance. A key design decision we made is to preallocate all
of libVig’s memory. While this lacks the flexibility of dynamically
allocating at runtime, it offers control over memory layout, mak-
ing it possible to control cache placement and save the run-time
6
Figure 7: Structure of the VigNAT correctness proof. Pi (X ) ←
Pj symbolizes that the proof of property Pi is done by X un-
der the assumption that Pj holds.
NF state in data structures that reside in a library, and use human-
assisted theorem proving to verify the correctness of this library.
We then use symbolic execution to prove the correctness of the
stateless code.
The challenge is how to stitch together the results of the two
verification techniques. We developed lazy proofs, a way to auto-
matically interface symbolic execution to a proof checker based on
separation logic. We built a Validator that implements this tech-
nique and glues sub-proofs together into the final proof that VigNAT
implements the NAT RFC [53].
The VigNAT proof consists of five sub-proofs, shown in Fig. 7.
The top-level proof objective P1 is to show that VigNAT exhibits
correct NAT semantics. The proof of P1 assumes three things: First,
the code must work properly in a basic sense, such as not crashing
and having no overflows (P2). Second, the implementations of the
library data structures must work as specified in their interface
contracts (P3)—e.g., looking up a just-added flow should return that
flow. Third, the stateless part of the NF must use the data structures
in a way that is consistent with their interfaces (P4)—e.g., a pointer
to the flow table is never mistakenly passed in as a pointer to a flow
entry. Assuming P2 ∧ P3 ∧ P4, the Validator produces a proof of P1
that is mechanically verified by the proof checker.
These three assumptions must of course be proven. To prove
P2—that VigNAT satisfies low-level properties—Vigor symbolically
executes the stateless code and checks that the properties hold
along each execution path. For this to scale, we employ abstract
symbolic models of the library data structures. Therefore, the proof
of P2 must assume that these models are correct (P5), that the data
structure implementations satisfy their interfaces (P3), and that
the stateless code correctly uses the stateful data structures (P4). If
any of these three assumptions were missing, the proof would not
work3. To prove P3, we employ relatively straightforward (but still
tedious) theorem proving to show that the library implementation
satisfies the contracts that define its interface.
3It may seem strange that assumptions P3 and P4 are needed both for the proof of
low-level properties and that of semantic properties, but this is because “satisfying
interface contracts” relates both to high-level interface semantics and to basics like
proper data encapsulation.
P1P3P2P4P5   VigNAT satisfies semantic properties (Validator + Proof Checker)     VigNAT satisfieslow-level properties (Symb Exec Engine)       VigNAT stateless code uses libVig according to libVig's interface contracts (Validator + Proof Checker)      libVig model is faithful to  the libVig interface contracts (Validator + Proof Checker)    libVig implementation behaves according to the libVig contracts (Proof Checker)A Formally Verified NAT
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
memory management overhead. The cost of preallocation is neg-
ligible (e.g., VigNAT’s peak resident set size is 27 MB during our
experiments), and we believe preallocation is fully compatible with
how real NFs use state. In terms of verification with Vigor’s proof
checker, static allocation does not offer noticeable benefits over
dynamic allocation, but may do so for other checkers.
As of this writing, libVig provides several basic data structures
that we needed to develop VigNAT: a flow table, implemented as a
double-keyed hash map, a network flow abstraction, a ring buffer,
an expirator abstraction for tracking and expiring flows, a batcher
for grouping homogeneous items, a port allocator to keep track of
allocated ports, and a classic hash table, array, and vector. libVig
also provides an nf_time abstraction for accessing system time and
a dpdk layer on top of the DPDK framework.
5.1.2 Using abstraction and contracts to formally specify libVig
semantics. We specify the semantics of libVig data types in terms
of abstract state that the data types’ methods operate on. This is
the same approach we took in formalizing the NAT RFC (§4.1).
The pre-conditions and post-conditions for each method form the
contracts that define what each data type is supposed to do.
Fig. 8 shows a snippet of a get method for the libVig flow table.
The pre-condition is on lines 3-6 and the post-condition on lines 7-
14. The contracts are meant for the Validator’s and proof checker’s
consumption, but they can also serve as documentation, when
ambiguous natural language or reading source code fall short.
Each requires pre-condition states the requirements for the func-
tion to run: a relationship between its arguments and the abstract
state, or a memory ownership token for a pointer. Each ensures post-
condition specifies what holds after the completion of the method:
a relationship between the arguments and the return value, the up-
dated value at a certain memory location, or a memory ownership
token.
We adopt a “sanitary” policy on the use of pointers: stateless
code can pass/receive pointers across the libVig interface, but the
libVig data structure remains opaque to the caller. Stateless code
can copy pointers, assign them, compare them for equality, but not
dereference them. Vigor automatically checks that stateless code
obeys this discipline (§5.2.4).
5.1.3 Verifying libVig correctness (P3). Once the formalization
of the interface is complete, we write the proof, i.e., we annotate
the code with assertions, loop invariants, etc. and define lemmas
for the intermediate steps of the proof.
The proof checker starts by assuming the pre-condition (ll.3-6)
and steps through every code statement while developing its set of
assumptions. When it encounters a branch condition, it explores
both branches. Inlined annotations (lines 16-18, 20-22, 24, 28-30)
help the checker along the way to understand the transformations
of abstract state, and it verifies that they indeed correspond to
the transformations of concrete machine state. On memory ac-
cesses (l.19), the proof checker checks the validity of the address
and the memory ownership token. On method calls (l.23), it checks
the pre-condition of the called method and then assumes its post-
condition, in essence replacing the call with an assumption of the
callee’s post-condition (it verifies separately that the post-condition
indeed holds whenever the callee returns). When reaching a return
point (l.31), the proof checker checks the post-condition.
7
(result == 0 &*& *index |-> i)); @*/
/*@ open dmappingp(map, kp1, kp2, hsh1, hsh2,
?fvp, ?bvp, ?rof, ?vsz,
?vk1, ?vk2, ?rp1, ?rp2, ?m)
&*& kp1(key, ?k1) &*& *index |-> ?i; @*/
(struct DoubleMap* map, void* key, int* index)
fvp, bvp, rof, vsz,
vk1, vk2, rp1, rp2, m) &*&
kp1(key, k1) &*& (dmap_has_k1_fp(m, k1) ?
&*&
ind == dmap_get_k1_fp(m, k1) &*&
true == rp1(k1, ind)) :
(result == 1 &*& *index |-> ?ind
1 int dmap_get_by_first_key /*@  @*/
2
3 /*@ requires dmappingp(map, ?kp1, ?kp2, ?hsh1, ?hsh2,
4
5
6
7 /*@ ensures dmappingp(map, kp1, kp2, hsh1, hsh2,
8
9
10
11
12
13
14
15 {
16