# 家用ISP网关MCU的缓冲区溢出漏洞利用
##### 译文声明
本文是翻译文章，文章来源：https://courk.cc/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
由于原文冗长，本文是我在阅读文章思考后选取的一部分重点内容摘要。
[TOC]
## 硬件综述
###  功能简介
从用户的角度来看，我的STB／网关具有以下常用功能：
  * 电视和宽带互联网可通过Cable获得。
  * 它作为家用的网关，可以连接到以太网和WiFi， WPA2是默认启用的。
  * 它也可以作为机顶盒使用，并可以连接到电视。由于附带的遥控器，可以控制此STB。  
我们首先来看一下STB／网关和它的远程控制功能。我网购了很多这样的元件，把他们拆开。  
这个STB／网关由三个主要的PCB组成。  
不出意料的，有一个是负责网关功能的，另一个作为STB。最后一个包含了一个屏幕和一堆按钮，用于用户的交互。  
我费了点时间研究他们的工作、通讯机制。我接下来讲一下这个机制，也让你了解一下本文的主要内容。
* * *
## 网关板
我们不会在这个上做很多事情，而且我也没有花太多时间研究它。
大部分电路板的组件都被封装在焊接金属板的壳里，我不想拆。 主处理器是隐藏的，WiFi模块也是。
对于好奇的读者，我仍然注释了以下图片。（译者注：对标注过的图片上元件不清楚的话，请参阅原文的图片，作者标注非常详细）  
()  
和STB相连的是这块小电路板：  
这些线路传送了电和各种信号。 STB板和网关板之间的主要通信总线似乎是以太网。 其他通信总线似乎包括UART和一些GPIO。
## STB板
在本文的范围内，STB部分将会更加有趣。
如以下带注释的图片所示，电路板的正面主要装有大型处理器和一些RAM。  
这些图片描述了最近的硬件版本。
主CPU是Broadcom的BCM7252。 网上的资料不多，但根据一些新闻稿，它被描述为“高性能双核Brahma15 10.5K DMIPS CPU”。
Brahma15似乎实际上接近Cortex A15架构，并且与ARMv7指令集兼容。
有趣的是，一些以前版本的电路板使用了x86处理器。
在底部，可以找到三个有趣的组件：
  * 一个eMMC
  * PIC单片机，PIC16F1527
  * 一个RF远程通信集成电路CC2534  
在这样的电路板上找到eMMC并不意外。 它包含STB的固件。 尽管这样，寻找PIC微控制器和RF集成电路会更惊人。
## PIC微控制器
PIC16F1527是一款小型8位微控制器，包装在一个64针脚的TQFP中。  
这个PIC的定位，称为“MCU”（微控制器单元），处理一堆简单和低级别的功能。
例如，MCU负责：
  * 处理UI板的按钮（下一节中的更多内容）
  * 处理UI板的屏幕
  * 与RF电路通信  
MCU与主STB CPU进行通信，将其称为“MPU”（用于微处理器单元），通过两条UART总线和网关板通信。
例如，当按下UI板上的一个按钮时，MCU将向MPU或网关发送几个字节（取决于哪一个被按下）来通知它该按钮已被按下。
另外一个例子，如果MPU需要更新UI板的屏幕，它将通过向MCU发送命令来完成。  
幸好我在网上找到了PIC16F1527的[资料表](http://ww1.microchip.com/downloads/en/DeviceDoc/40001458D.pdf)。
## RF集成电路
CC2534的数据表还未公开。尽管如此，这个似乎是与CC2533引脚兼容的，并且似乎具有相似的特征。
因此，该IC符合其制造商Texas Instrument的“用于2.4GHz IEEE 802.15.4和ZigBee应用的True System-on-Chip解决方案”。该IC用于与遥控器进行通信。
这种遥控器其实不单单使用传统的红外LED与STB进行通信。 IR通信也会在设备安装期间使用。配对后，使用称为“Zigbee
RF4CE”的2.4-GHz无线电协议。
**“** Zigbee RF4CE规格为基于Zigbee远程控制和Zigbee输入控制的设备产品提供了即时，低成本，易于实施的网络解决方案。 Zigbee
RF4CE规范旨在为广泛的产品提供低功耗，低延迟的控制，包括家庭娱乐设备，车库开门器，无钥匙进入系统等等。[http://www.zigbee.org/zigbee-for-developers/network-specifications/zigbeerf4ce/**”**](http://www.zigbee.org/zigbee-for-developers/network-specifications/zigbeerf4ce/**%22**)
CC2534通过SPI总线与MCU通信。因此，遥控器发送的按键首先由RF电路接收，然后由MCU接收，最后由MPU接收。
* * *
###
## UI板
该电路板包含以下组件：
  * 显示系统状态的屏幕
  * 三个按钮。  
按下按钮将执行以下操作：
  * 按钮1：WiFi。 用于启用或禁用WiFi。
  * 按钮2：WPS。 按下此按钮将允许设备连接到WiFi网络，而不需要WPA2密钥。 此功能默认启用。
按钮3：电源。 用于开启和关闭STB。  
正如前文所言，屏幕和按钮都直接连到这些负责处理外部设备的MCU上。
###  远程功能
遥控器的内部揭示了两个主要的集成电路：其中一个是我没去玩的微控制器，另一个是另一个CC2534。CC2534和STB板上焊接一个部件的通信。  
如下面所注释的图片所示，主板的一侧包含这些组件，另一侧则全都是触摸式金属圆片开关。  
###  架构总结
对本文其余部分有用的关键点如下：
  * PIC处理用户界面。 它通过两个不同的UART总线与网关板和STB板通信。
  * PIC通过SPI总线与RF集成电路CC2534进行通信。
  * STB板的CC2534与遥控器的CC2534通信。 所使用的无线电协议是“Zigbee RF4CE”。  
现在可以理解体系结构，我们讨论在系统上运行的软件， 是时候dump一些固件了。
* * *
## 逆向工程
###  eMMC固件提取
用热风枪拆下，看到很多引脚，这里用的是153引脚的。我买了一个[读153和169脚eMMC固件的设备](https://www.aliexpress.com/item/Data-recovery-android-phone-DS3000-USB3-0-emmc153-169-tool-for-KYOCERA-Restore-Retrieve-contacts-Sms/32793507014.html),dump后分解SquashFS，是一个linux root的文件系统。  
###  PIC固件提取
因为这里加了保护所以不能直接从PIC的flash读，但是eMMC可以flash PIC的固件，所以只要从上面提出来的固件里找。
###  **反汇编分析**
（译者注：用IDA自带的PIC16xx指令集分析即可）我自己给radare2加上了[PIC的支持](https://github.com/radare/radare2/pull/10199)
###  不破坏设备的固件dump
每个设备都不太一样，我想到了用USB接口去拦截、篡改数据，触发一个远程升级，下载到固件。
###  PIC bootloader的dump
先要知道内存在flash上的布局，我要知道我想要的东西在哪？我反编译到0x200的时候，代码开始有意义了，所以0x200之前是bootloader（译者注：其实不用这么麻烦，查手册很快就能搞定）。
Range | Type  
---|---  
0x0000 – 0x01FF | Bootloader  
0x0200 – 0x3FFF | Main Code  
我为了dump bootloader，如下图连接。  
我最初遇到了困难，觉得像是用了哪种校验，举个两个栗子：
    0x00003df0      0800           return
    0x00003df2      2100           movlb 0x1
    0x00003df4      0430           movlw 0x4
    0x00003df6      c901           clr 0x49, f
    0x00003df8      2000           movlb 0x0
    0x00003dfa      c100           movwf 0x41
    0x00003dfc      0800           return
    0x00003dfe      5600           invalid    ; "These bytes do not decode to a valid instruction"
    0x00003e00      ffff           invalid
    0x00003e02      ffff           invalid
    0x00003e04      ffff           invalid
    0x00003e06      ffff           invalid
    0x00007dae      ed01           clr 0x6d, f
    0x00007db0      dc2f           goto 0x7dc
    0x00007db2      0230           movlw 0x2
    0x00007db4      2100           movlb 0x1
    0x00007db6      ed00           movwf 0x6d
    0x00007db8      2000           movlb 0x0
    0x00007dba      5514           bsf 0x55, 0
    0x00007dbc      0800           return
    0x00007dbe      8700           movwf 0x7    ; "Weird instruction to end and image. The return just above makes more sense"
    0x00007dc0      ffff           invalid
    0x00007dc2      ffff           invalid
    0x00007dc4      ffff           invalid
果然是这样的，我最后确定这就是和`0x51`异或校验的。于是我重新写了一下。
        include 
        DUMP_CODE CODE 0x38C0