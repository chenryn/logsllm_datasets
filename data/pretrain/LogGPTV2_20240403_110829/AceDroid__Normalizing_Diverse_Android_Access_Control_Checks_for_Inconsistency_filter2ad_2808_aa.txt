title:AceDroid: Normalizing Diverse Android Access Control Checks for Inconsistency
Detection
author:Yousra Aafer and
Jianjun Huang and
Yi Sun and
Xiangyu Zhang and
Ninghui Li and
Chen Tian
AceDroid: Normalizing Diverse Android Access
Control Checks for Inconsistency Detection
Yousra Aafer*, Jianjun Huang*, Yi Sun*, Xiangyu Zhang*, Ninghui Li* and Chen Tian†
*Purdue University
†Futurewei Technologies
{yaafer, huang427, sun624}@purdue.edu, {xyzhang, ninghui}@cs.purdue.edu, PI:EMAIL
Abstract—The Android framework has raised increased secu-
rity concerns with regards to its access control enforcement. Par-
ticularly, existing research efforts successfully demonstrate that
framework security checks are not always consistent across app-
accessible APIs. However, existing efforts fall short in addressing
peculiarities that characterize the complex Android access control
and the diversity introduced by the heavy vendor customization.
In this paper, we develop a new analysis framework AceDroid
that models Android access control in a path-sensitive manner
and normalizes diverse checks to a canonical form. We applied
our proposed modeling to perform inconsistency analysis for 12
images. Our tool proved to be quite effective, enabling to detect
a signiﬁcant number of inconsistencies introduced by various
vendors and to suppress substantial false alarms. Through inves-
tigating the results, we uncovered high impact attacks enabling
to write a key logger, send premium sms messages, bypass user
restrictions, perform a major denial of services and other critical
operations.
I.
INTRODUCTION
Over the near-decade since its introduction in 2008, the
Android operating system has been receiving an unprecedented
success, overshadowing the market share of other competing
mobile operating systems. According to [6], on average 1.5
million Android devices are being activated every day. How-
ever, this stunning success does not come at no cost. The
number of identiﬁed vulnerabilities at various Android layers
has soared in the recent years.
Of particular interest are the framework vulnerabilities
which can allow attackers to easily access sensitive and
privileged resources without proper access control. In fact,
the Android framework has raised increased security concerns
with regards to its access control enforcement. Several research
works have questioned the effectiveness and consistency of the
complex Android framework access control and demonstrated
its weaknesses with detected vulnerabilities [33], [8]. The
difﬁculty of determining if critical resources are sufﬁciently
protected lies in the lack of an almighty oracle to determine
the access control needed for a given resource. Therefore, a
popular approximate solution is to compare the access control
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23121
www.ndss-symposium.org
enforced across multiple instances of the same resource and
report inconsistencies as potential vulnerabilities. For instance,
Kratos [33] compares the set of explicit security checks (i.e.,
permissions, UIDs, package names and thread status) in multi-
ple APIs leading to the same resource within the same image.
DroidDiff [8] compares the security conﬁgurations employed
by the different framework releases to detect vulnerabilities.
However, the simple modeling of access control in existing
techniques [33], [8] does not reﬂect the nature of the problem
and hence can hardly meet the challenges imposed by the
increasing complexity of frameworks and the large number of
vendor custimizations. First, most access control checks are
essentially just conditional statements. There are often many
different ways of composing the access control conditional
statements for a given resource as long as they provide the
same level of protection to the resource. These versions are not
only syntactically different, but also semantically different in
many cases (e.g., invoking different APIs). This is particularly
true for vendor customizations. Developers from different
vendors tend to choose diverse ways to implement equivalent
protection for a resource. For instance, to check if a calling
app is running with system privilege, the developer might
compare its UID with the System UID (i.e., 1000), compare its
signature with the ”android” package signature, or compare its
shared user id with ”android.uid.system”. In addition to API
calls that are explicitly related to access control, developers
may use local variables and ﬂag variables, whose relations to
access control are implicit, further compounding the situation.
Second, the access control to a resource may require multiple
checks. Most existing techniques do not model the relations
of these checks, but rather consider the entire set of checks as
the demanded protection. However in practice, these checks
are conjoined and/or disjoined in various fashions dictated by
implementation. Such relations need to be precisely modeled
in order to have legitimate comparison of access control. As
such, a simple approach as that in Kratos [33], which collects
and compares the set of explicit invocations to access control
APIs in a path-insensitive fashion, does not model the essence
of the problem and hence may miss vulnerabilities and produce
many false positives (Section VI-F).
In this paper, we propose a normalization technique for
access control checks. It
identiﬁes diverse security checks
through comprehensive modeling. It further normalizes these
checks and their correlations to a canonical form so that the
different forms of access control checks that denote the same
meaning can be correctly recognized. Particularly, we classify
all the access control related framework modules and classes,
which contain properties that may be used in access control
checks, to two main categories: the app-speciﬁc checks and
user-speciﬁc checks. The former checks if the app that tries
to access the resource has the needed credentials whereas the
latter determines if the user of the app that tries to access the
resource has a certain role (e.g., a primary user or a guest user).
We deﬁne a small number of canonical values for each aspect.
Any access control check can be normalized to one of these
canonical values. For instance, checks by invoking different
APIs and checks with syntactic differences may be normalized
to the same value and hence considered equivalent. Through
program analysis, disjunctions and conjunctions of security
checks lead to the corresponding operations on canonical
values so that program semantics can be faithfully modeled.
At the end, our analysis produces a very concise and precise
canonical security condition for each access to a sensitive
resource. The conditions can be easily compared within a
(framework) image or across different images.
We compared normalized access control for common re-
sources in/across 12 images, including customized ones (by
Samsung, Sony, HTC and LG) and running Android versions
5.0.1 to 7.0. Our analysis led to the discovery of a minimum
of 73 unique true positive access control inconsistencies. To
prove that our detected inconsistencies are security-critical, we
picked 27 instances from the images that we had the physical
device and carried out planned attacks targeting to exploit
the vulnerabilities. Our results are alarming; we were able
to exploit them through high impact attacks, allowing us to
write a key logger and even to inject new touches in some LG
devices, sending premium SMS messages and bypassing user
restrictions on Samsung S6 and S7 Edge, injecting hard key
events on Sony Xperia XA, disallowing SD Card mounting
and wiﬁ enabling on HTC devices, etc. We have ﬁled security
reports to the corresponding vendors. So far, LG, Samsung
and Sony have all reproduced more than 20 of our reported
vulnerabilities. Particularly, LG has classiﬁed two as Critical
security level, while Samsung has classiﬁed three as Medium.
Due to the lack of the corresponding physical devices, we have
not conﬁrmed the remaining cases with real attacks.
Our technique not only enables comparing access control
across different framework images that cannot be achieved
by existing works, due to their lack of support of detecting
equivalent protection with diverse implementation, but also
substantially improves the results of comparing access control
within an image. We compared with Kratos, the state-of-the-
art inconsistency detection framework in its original setting.
Our technique has substantially improved the results of Kratos.
Speciﬁcally, since AceDroid can model much more access
control features and peculiarities, it detects on average 28
actual inconsistencies per image, whereas the simulated Kratos
detects on average 16. Besides, our access control normal-
ization has helped us suppress a substantial number of false
positives. Due to the diverse security checks introduced by
vendor customization, if we simply extend Kratos’s approach
to handle cross-image analysis,
lead to
a tremendous number of false positives (on average, 229
instances per image). Thanks to our proposed normalization,
we are able to reduce this number to 13 instances per image
(on average).
the detection will
Contributions. The scientiﬁc contributions of the paper are
2
outlined below:
• We provide a systematic categorization of access
controls employed by the Android framework. We
propose a path-sensitive modeling and normalization
technique for access control checks.
• We develop a new analysis framework for incon-
sistency detection. We devise several approaches to
improving precision in comparing vendor customized
frameworks to reveal access control discrepancies.
Our analysis uncovered high impact exploitable incon-
sistencies.
•
II. MOTIVATION
Different from access control in regular kernels (e.g, Linux
Kernel), Android framework access control features diversity,
namely, there are many different ways to achieve the same level
of protection. Some of them are even implicit, implemented
by comparisons with local variables and ﬂag variables, which
are not much distinguishable from other conditional statements
that have nothing to do with access control. Framework devel-
opers, especially vendor customization developers, do not have
any gold standard to implement appropriate access control.
Instead, they tend to compose their own version based on their
personal preferences and understanding. As a result, access
control implementation tends to be ad-hoc and error-prone. As
mentioned earlier, comparing multiple access control instances
of a same resource is the most important method to identify
framework access control vulnerabilities. However, the diver-
sity in implementation renders such comparison largely in-
effective. Next, we use an example to illustrate such diversity,
explain how the-state-of-art fails to handle it and how our
technique works.
Diversity Caused by Different Implementations and Path-
Sensitivity. Consider the two simpliﬁed code snippets (Figure
1) extracted from Samsung S6 Edge (6.0.1), both allowing
to install a package (leading to the same sink). As shown in
the code, the two APIs enforce different access control based
on information related to the calling app / user. While the
API installPackageAsUser() enforces multiple checks
along the path to the sink, installPackageForMDM()
enforces a subset of the same checks. A simpliﬁed ﬂow of
the multiple paths is depicted in Figure 2. As illustrated, to
reach the sink from the API installPackageAsUser(),
the calling app ﬁrst needs to hold the system permission
INSTALL_PACKAGE. Second,
it needs to satisfy one of
the checks aiming to make sure that
the caller is privi-
leged enough to install apps for other users. Speciﬁcally,
the calling app needs to belong to either the SYSTEM_UID
1000 or ROOT_UID 0, or hold either one of
the two
system permissions INTERACT_ACROSS_USERS_FULL or
INTERACT_ACROSS_USERS. Finally,
the API enforces
a user
restriction DISALLOW_INSTALL_APPS to verify
whether the calling user is restricted from installing apps.
on
the
As
illustrated
ﬁgure,
installPackageForMDM() enforces a more concise
access control; a SYSTEM_UID check and a user restriction
DISALLOW_INSTALL_APPS along the path to the same
sink.
same
Listing 1. Simpliﬁed Code Snippet for installPackageAsUser ()
1 public void installPackageAsUser(..., int userId){
enforceCallingOrSelfPermission(INSTALL_PACKAGE) ;
2
uid = Binder.getCallingUid();
3
...
4
if (uid != 1000 && uid != 0 ){
5
6
try{enforceCallingOrSelfPermission(
INTERACT_ACROSS_USERS_FULL) ;
}catch(SecurityException se){
enforceCallingOrSelfPermission(INTERACT_ACROSS_USERS) ;
}
}
....
if(UserManager.getUserRestrictions(userId).getBoolean(
DISALLOW_INSTALL_APPS, false) ) return;
Message msg = mHandler.obtainMessage(INIT_COPY);
msg.obj = new InstallParams(...);
mHandler.sendMessage(msg);
sink
7
8
9
10
11
12
13
14
15
16 }
Listing 2. Simpliﬁed Code snippet for installPackageForMDM()
1 public void installPackageForMDM(..., int userId){
2
if (Binder.getCallingUid() != 1000 ) throw new
SecurityException("Unauthorized acccess only system is
allowed");
3
if(UserManager.getUserRestrictions(userId).getBoolean(
DISALLOW_INSTALL_APPS, false) ) return;
...
Message msg = mHandler.obtainMessage(INIT_COPY);
msg.obj = new InstallParams(...);
mHandler.sendMessage(msg);
4
5
6
7
8 }
sink
Fig. 1. Two APIs allowing to install a package on Samsung S6 Edge (6.0.1)
Fig. 2. Two paths allowing to install a package on Samsung S6 Edge
While the checks are syntactically different, their imposed
protection is actually semantically equivalent from the per-
spective of a third-party app. A third-party app cannot obtain
any of the UIDs enforced by the two APIs, nor can it hold the
enforced system level permissions. Thus, this speciﬁc syntactic
inconsistency is actually not exploitable by a third party app.
Kratos’s Solution. Next, let us consider how the state-of-
art tool Kratos [33] would handle this problem. Kratos does
not reason about relations among access control checks (e.g.,
disjunction and conjunctions). It unions all the security checks
from the entry point to the sink and considers the resulted
set the security condition of the sink. It then compares these
conditions across multiple instances of the same resource.
Furthermore, Kratos only models a number of explicit security
3
checks such as checks through permission APIs, UID and
package name comparison. This is largely ﬁne for in-image
analysis on earlier AOSP images (less complex) for which
Kratos was designed, because the security checks in those
images are relatively simple and uniform. However, with
newer features integrated into AOSP and more sophisticated
functionalities added by customization parties, the framework
includes very diverse security checks, such as checks on users
(i.e. owner or guest, current or inactive), processes and package
properties, app status (i.e., foreground or background), etc.
Moreover, conjunctions and disjunctions are commonly used
as well. The design of Kratos can hardly meet these challenges.
that
For the above example, Kratos determines the security
condition for installPackageAsUser is {permission
=INSTALL_PACKAGE,UID=1000,UID=0,permission
= INTERACT_ACROSS_USERS_FULL, permission=
INTERACT_ACROSS_USERS}. Observe
it unions
most checks in the function body without modeling their
correlations. Furthermore, it misses the UserRestriction
= DISALLOW_INSTALL_APPS check because it does not
model the user aspect. It will similarly determine the security
condition for installPackageForMDM is {UID=1000}.
Kratos will thus recognize these two APIs as inconsistent
based on the syntactic differences of the two. We argue this
is not an appropriate way to conduct inconsistency detection
as the security checks imply a semantic equivalence from the
perspective of a third party app, and thus cannot be exploited.
As we will show in our evaluation, the inability to model
and normalize the semantics of security checks has led to a
large number of false positives and false negatives for Kratos.
Note that false negatives occur as some access control related
comparisons are not modeled.
A plausible solution is to make the analysis path-sensitive
such that
the conjunctive and disjunctive relations can be
modeled. For instance, we could derive the conditions for
the individual program paths for installPackageAsUser
as permission= INSTALL_PACKAGE ∧ UID=1000
∧ UserRestriction=DISALLOW_INSTALL_APPS (for
the left-most path in Figure 2), and so on. However, comparing
individual program paths across versions leads to combinato-
rial explosion and hence hardly scales. Furthermore, without
normalization, there would be many paths that have different
checks even though they enforce the same level of protection.
Our Solution. We propose a path-sensitive normalization tech-
nique that extracts and normalizes security checks to canonical
values, which may be conjoined and/or disjoined following
the program semantics. As such, we can derive a canonical
condition value for each sensitive resource access. Comparison
across accesses (that may be even from substantially different
framework customizations) becomes both concise and precise
after the canonicalization. Speciﬁcally, a canonical security
condition consists of two orthogonal aspects, the app aspect
and the user aspect. The former denotes the security enforce-
ment for the calling app and the latter denotes the enforcement
for the user (e.g., primary user or guest). Each aspect has
a small number of canonical values, which is much smaller
than the possible syntactic forms of the security checks. Each
check is normalized to one of these canonical values. For
instance, permission=INSTALL_PACKAGE, UID=1000,
UID 0UID 1000installPackageAsUsersinkSystem permission = INSTALL_PACKAGESystem permission= INTERACT_...System permission = INTERACT_..FULLUser Restriction = DISALLOW_INSTALL_APPSinstallPackageForMDMUID1000User Restriction = DISALLOW_INSTALL_APPS3rdParty AppUID=0 and permission=INTERACT.._FULL are all nor-
malized to a canonical value System to denote they all imply
system privilege. In contrast, permission=INTERNET or
permission= BLUETOOTH are normalized to a canonical
value normal.
These
instance,
can
four
canonical
conjoined
values
the
be
program paths
and
disjoined. For
in
installPackageAsUser in Figure 2 denote disjunctive
relation. Our analysis can strictly follow the program
semantics and perform the corresponding operation on the
canonical values. The disjunction of two canonical values
yields the weaker value. Intuitively, the protection enforced by
multiple paths is equivalent to the weakest protection enforced
by any of them. For example, a disjunction of System and
Normal yields Normal. In contract, the protection enforced by
conjoined conditions is equivalent to the strongest protection
enforced by any them; e.g., a conjunction of System and