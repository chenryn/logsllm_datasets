z 
7A 
JP 
总之，存在对应 ASCII 字符的指令有 AAA、AAS、CMP、DEC、IMUL、INC、JA、JAE、JB、JBE、
JE、JNE、JNO、JNS、JO、JP、JS、POP、POPA、PUSH、PUSHA 和 XOR。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附
附录
录 BB    AARRM
M  
B.1  术语 
初代 ARM 处理器就是 32 位 CPU。所以它的 word 型数据都是 32 位数据。这方面它和 x86 有所不同。 
byte  
8 位数据。声明 byte 型数组和变量的指令是 DB。 
halfword 
16 位数据。声明 halfword 型数组和变量的指令是 DCW。 
word  
32 位数据。声明 word 型数组和变量的指令是 DCD。 
doubleword 
64 位数据。 
quadword  
128 位数据。 
B.2  版本差异 
 ARMv4：开始支持 Thumb 模式的指令。 
 ARMv6：用于第一代 iPhone、iPhone 3G（这些设备的处理器采用了 Samsung 32 位 RISC ARM 
1176IZ（F）-S，支持 Thumb-2 指令）。 
 ARMv7：实现了 Thumb-2 指令（2003）。用于 iPhone 3GS、iPhone 4、iPad 1（ARM Crotex-A8）、
iPad 2（Cortex-A9）和 iPad 3。 
 ARMv7s：添加了新的指令。用于 iPhone 5、iPhone 5c 和 iPad 4（Apple A6）。 
 ARMv8：64 位 CPU，又叫作 ARM64、AArch64。用于 iPhone 5S、iPad Air（Apple A7）。64 位平
台不支持 Thumb 模式，只支持 ARM 模式的指令（4 字节指令）。 
B.3  32 位 ARM（AArch32） 
B.3.1  通用寄存器 
 R0。函数的返回结果通常通过 R0 传递。 
 R1～R12。通用寄存器 GPRs。 
 R13。SP（Stack Pointer/栈指针）。 
 R14。LR（link register/链接寄存器）。 
 R15。PC（程序计数器）。 
R0～R3 也被称为临时寄存器（scratch registers）。它们通常用于传递函数的参数；在函数结束时，也
不必恢复它们的初始状态。 
B.3.2  程序状态寄存器/CPSR 
CPSR 的全称是 Current Program Status Register，其规格如下表所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
932 
逆向工程权威指南（下册） 
位    序 
描    述 
0～4 
M－处理器模式控制位 
5 
T－Thumb 模式控制位 
6 
F－FIQ 禁止位 
7 
I－IRQ/中断禁止位 
8 
A－imprecise data abort disable 
9 
E－数据字节序状态位 
10..15，25，26 
IT－if–then 状态位 
16..19 
GE－greater-than-or-equal-to 
20..23 
DNM－Do Not Modify 
24 
J－Java state 
27 
Q－sticky overflow 表达式整体溢出（相对于各独立因子溢出）标识位 
28 
V－Overflow 溢出标识位 
29 
C－进位/借位/扩展位 
30 
Z－零标识位 
31 
N－负号位/小于标识位 
B.3.3  VFP（浮点）和 NEON 寄存器 
0～31 bits 
32～64 
65～96 
97～127 
Q0 128bits 
D064bits 
D1 
S032bits 
S1 
S2 
S3 
S 寄存器为 32 位寄存器，用于存储单精度数。 
D 寄存器位 64 位寄存器，用于存储双精度数。 
D 寄存器和 S 寄存器的存储地址相通。程序可以通过 S 寄存器的助记符访问 D 寄存器的数据。虽然这
种操作毫无实际意义，但是确实可行。 
与之相似的是，NEON 的 Q 寄存器是 128 位寄存器，与其他浮点数寄存器共用 CPU 的物理存储空间。 
VFP 里有 32 个 S 寄存器，即 S0～S31。VFP v2 里又新增了 16 个 D 寄存器，实际上这些 D 寄存器用
的还是 S0～S31 的存储空间。 
再后来，VFPv3（NEON 或者叫作“Advanced SIMD”）再次添加了 16 个 D 寄存器，形成了 D0～D31。
这几个新增的寄存器，即 D16～D31 寄存器的存储空间，终于和 S 寄存器的存储空间相互独立。 
NEON 或 Advanced SIMD 也有 16 个 128 位 Q 寄存器，它们使用的是 D 寄存器（D0～D31）的存储空间。 
B.4  64 位 ARM（AArch64） 
通用寄存器 
64 位 ARM 的寄存器总数，是 32 位 ARM 的两倍之多。 
 X0。常用于传递函数运算结果。 
 X0～X7。传递函数参数。 
 X8。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 B  ARM 
933 
 X9～X15。临时寄存器，供被调用方函数使用，函数退出时无需恢复。 
 X16。 
 X17。 
 X18。 
 X19～X29。被调用方函数使用的寄存器，在函数退出时需要恢复原值。 
 X29。用作帧指针/FP（至少 GCC 把它当作 FP）。 
 X30。链接寄存器/LR（link register）。 
 X31。这个寄存器一直为 0，又称为 XZR、“零寄存器”。它的 32 位（word 型）部分还叫作 WZR。 
 SP，64 位系统有单独的栈指针寄存器，不再使用通用寄存器。 
详细内容请参见官方的 ARM 资料《Procedure Call Standard for the ARM 64-bit Architecture（AArch64）》
（http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf）。 
程序还可通过其 W 寄存器这样的助记符访问 64 位 X 寄存器的低 32 位空间。W 寄存器和 X 寄存器的
对应关系如下表所示。 
高 32 位部分 
低 32 位部分 
X0 
W0 
B.5  指令 
ARM64 的部分指令存在对应的、带 S 后缀的指令。这个后缀代表着该指令会根据结果设置相应的标
识位，而不带 S 后缀的指令就不设置标识位。以 ADD 和 ADDS 指令为例，前者只进行数学运算而不会设
置标识位。这种功能划分，为 ARM 系统的预处理功能提供了可靠的保证，绝不会意外地影响到 CMP 指令
和其他条件转移需要的各标识位。 
Conditional codes 速查表 
代    码 
描    述 
标  识  位 
EQ 
相等 
Z==1 
NE 
相异 
Z==0 
CS/HS 
Carry 置位/Unsigned，大于或等于 
C==1 
CC/LO 
Carry 为零/Unsigned，小于 
C==0 
MI 
Minus，负数/小于 
N==1 
PL 
Plus，正数或零/大于或等于 
N==0 
VS 
溢出 
V==1 
VC 
未溢出 
V==0 
HI 
Unsigned 大于 
C==1 and Z==0 
LS 
Unsigned 小于或等于 
C==0 or Z==1 
GE 
Signed 大于或等于 
N==V 
LT 
Signed 小于 
N !=V 
GT 
Signed 大于 
Z==0 and N==V 
LE 
Signed 小于或等于 
Z==1 or N !=V 
None/AL 
Always 
Any 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附
附录
录 CC    M
MIIPPSS  
C.1  寄存器 
MIPS 遵循的调用约定是 O32。 
C.1.1  通用寄存器 GPR 
编    号 
别    名 
描    述 
$0 
$ZERO 
总是为零。给这个寄存器赋值到操作相当于 NOP 
$1 
$AT 
汇编宏和伪指令使用到临时寄存器 
$2～$3 
$V0～$V1 
用于传递函数返回值 
$4～$7 
$A0～$A3 
用于传递函数的参数 
$8～$15 
$T0～$T7 
可供临时数据使用 
$16～$23 
$S0～$S7 
可供临时数据使用，被调用方函数必须保全 
$24～$25 
$T8～$T9 
可供临时数据使用 
$26～$27 
$K0～$K1 
OS Kernel 保留 
$28 
$GP 
全局指针/Global Pointer，被调用方函数必须保全 PIC code 以外的值 
$29 
$SP 
栈指针/Stack Pointer 
$30 
$FP 
帧指针/Frame Pointer 
$31 
$RA 
返回地址/Return Address 
n/a 
PC 
PC 
n/a 
HI 
专门存储商或积的高 32 位，可通过 MFHI 访问 
n/a 
LO 
专门存储商或积的低 32 位，可通过 MFLO 访问 
C.1.2  浮点寄存器 FPR 
名    称 
描    述 
$F0～$F1 
函数返回值 
$F2～$F3 
未被使用 
$F4～$F11 
用于临时数据 
$F12～$F15 
函数的前两个参数 
$F16～$F19 
用于临时数据 
$F20～$F31 
用于临时数据，被调用方函数必须保全 
C.2  指令 
MIPS 的指令分为以下 3 类： 
 R-Type，Register/寄存器类指令。此类指令操作 3 个寄存器，具有以下形式： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 C  MIPS 
935 
指令目标寄存器，源寄存器 1，源寄存器 2 
当前两个操作数相同时，IDA 可能会以以下形式进行显示： 
指令目标寄存器/源寄存器 1，源寄存器 2 
这种显示风格与 x86 汇编语言的 Intel 语体十分相似。 
 I-Type，Immediate/立即数类指令。涉及 2 个寄存器和 1 个立即数。 
 J-Type，Jump/转移指令。在 MIPS 转移指令的 opcode 里，共有 26 位空间可存储偏移量的信息。 
转移指令 
实现转移功能的指令可分为 B 开头的指令（BEQ，B 等）和 J 开头的指令（JAL，JALR 等）。这两种
跳转指令的区别在哪里？ 
B-类转移指令属于 I-type 的指令。也就是说，B-指令的 opcode 里封装有 16 位立即数（偏移量）。而 J 和
JAL 属于 J-type 指令，它们的 opocde 里存有 26 位立即数。 
简单地说，B 开头的转移指令可以把转移条件（cc）封装到 opcode 里（B 指令是“BEQ $ZERO, $ZERO, 
Label”的伪指令）。但是 J 开头的转移指令无法在 opcode 里封装转移条件表达式。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附
附录
录 DD    部
部分
分 G
GCCCC 库
库函
函数
数  
名    称 
描    述 
__divdi3 
有符号型数据的除法运算 
__moddi3 
有符号型数据的求模运算（余数） 
__udivdi3 
无符号型数据的除法运算 
__umoddi3 
无符号型数据的求模运算（余数） 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附
附录
录 EE    部
部分
分 M
MSSVVCC 库
库函
函数
数  
在 MSVC 的库函数里，那些名称里带有“LL”的函数都是操作“long long”型数据、即 64 位数据的
函数。 
名    称 
描    述 
__alldiv 
有符号数的除法运算 
__allmul 
乘法运算 
__allrem 
有符号数的求余运算 
__allshl 
左位移运算 
__aulldiv 
无符号数的除法运算 
__aullrem 
无符号数的求余运算 
__aullshr 
无符号数的右移运算 
其中，乘法运算指令、左位移运算指令不区分有符号数和无符号数，所以此处的两条指令不再区分数
据类型。 