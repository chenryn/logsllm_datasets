at least some function arguments, and in the case of indirect
calls the function pointer used. Section IV demonstrates the
feasibility of linking available gadgets to perform a successful
attack, including calling sensitive functions.
F. From Code-reuse to Code-injection
Traditional code-reuse attacks like ROP and return-to-libc
have been shown to be Turing complete [9], [13]. However,
with CFI in place fewer gadgets are available to implement any
functionality, on any application. Therefore, transforming our
code-reuse attack to a code-injection will grant us complete
freedom to implement any desired functionality, since CFI
applies only to existing code. This strategy is not new. Past
exploits [31] begun with a code-reuse payload that sets up a
code-injection, bypassing W⊕X semantics.
Such a transformation is achieved by using gadgets to call
an API or system call to alter the execute bit on an attacker-
controlled buffer and then redirect control to it. This route
of action is not possible under CFI because there is no way
to directly transfer control to a data buffer. To perform code-
injection, we adopt a novel approach that alters the writable bit
of existing code, then proceeds to overwrite that code with our
shellcode, and ﬁnally transfers control to the shellcode, which
now resides in a location where CFI will allow an indirect
transfer. We adopt such a method to bypass even the strictest
of the known CFI mechanisms, CCFIR.
To achieve our goal, we link existing gadgets to ﬁrst call a
function wrapping the system call that allows us to change the
permissions of an existing memory area (e.g., VirtualProtect
on Windows systems). Then, we proceed to copy data from
our buffer to the code area using memcpy, and ﬁnally use an
indirect control-ﬂow transfer to invoke our shellcode.
580
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 



check ecx



check return addr

check return addr











Fig. 6: Function call and return redirection through the spring-
board section in CCFIR.
IV. PROOF-OF-CONCEPT EXPLOITATION
In this section, we describe the construction of a proof-
of-concept (PoC) exploit, which can compromise a vulnerable
binary hardened with CFI. Like before, we assume CCFIR, the
strictest of the loose-CFI frameworks, is in place. Nonetheless,
the way the exploit works is generic, making it applicable to
similar frameworks, like bin-CFI.
The exploit we use is based on a real heap overﬂow in
Internet Explorer [21], which gives control to an indirect jump.
The vulnerability is triggered by accessing the span and width
attributes of an HTML table’s column through JavaScript.
There are some interesting features of this vulnerability, which
we would like to point out. First, using this vulnerability we
can overwrite a virtual function table (VFT) pointer in a button
object, which eventually leads to control over the target of
an indirect jump instruction. Second, we can use the same
overﬂow to overwrite a string object’s size. We also have a
reference to that object, so we can manipulate the string’s size
to perform a memory disclosure attack. Third, we can trigger
the vulnerability multiple times, as long as we are careful so
as to not crash the process.
A. Gadget Locations in CCFIR
To better comprehend what data we need to exﬁltrate and
how gadget chaining is implemented, when CCFIR is de-
ployed, we will brieﬂy explain how it checks indirect control-
ﬂow transfers through its springboard section. We refer readers
to the original paper [16] for additional details.
CCFIR operates using a special memory layout, where all
indirect calls, jumps, and returns are served through a special
springboard section. Lets revisit the example from Fig. 2,
which we redraw in Fig. 6 to reﬂect how a function call/return
is made in CCFIR. For every function with a relocation entry
(CCFIR was implemented for Windows), CCFIR creates a call
function stub, which is placed in the springboard. Call stubs
simply contain a direct jump to their corresponding function.
Similarly, every possible return address (i.e., locations follow-
ing a call instruction) also has a return address stub in the
springboard. The return stubs include a direct jump back to
the corresponding return address, but are also preﬁxed with an
indirect call instruction (call ecx).
To secure indirect calls and returns, CCFIR uses the
information in the relocation and exported functions section
to replace the function pointers in a binary with pointers to
their function stubs (e.g., fptr ← less_than_stub). Notice that
this is only done for non-sensitive functions. It then replaces
indirect calls with a direct jump to the springboard. The call
in the springboard pushes the return stub’s address into the
stack, so the called function can return safely. Information ﬂow
is enforced by aligning the call and return stubs at different
address boundaries, emulating this way two IDs, and then
checking that the address of a function or a return address
follow this alignment. Returns from sensitive functions are
omitted for brevity.
B. Exploitation Requirements
To successfully perform the exploitation, we make use of
two techniques: heap Feng Shui [25] and heap spraying [33].
The ﬁrst technique is required to position the vulnerable buffer,
string object, and the button object in the right order in the
heap, so that when the vulnerable buffer is overﬂowed the
ﬁrst time, the string object’s size property gets overwritten to
build the memory disclosure interface. When the vulnerable
buffer is overﬂowed the second time,
the button object’s
VFT pointer is overwritten. The latter technique is required
to “spray” a specially crafted buffer in memory. This buffer
guides the gadget-chaining process from the initial indirect
transfer instruction to code injection. Heap spraying works
by making many copies of our buffer to get it allocated at
a reliably determined address. This address is written to the
VFT pointer of the button object. Even though there is the
possibility of failure, heap spraying works very well in this
particular exploit, resulting in consistent results over different
runs. In the sections below, we will refer to this buffer as the
sprayed buffer.
C. Memory Disclosure
The PoC exploit uses memory disclosure for bypassing
two constraints. First, we assume ASLR is in place, so we
need to resolve the base addresses of modules of interest (e.g.,
DLLs). Second, because CCFIR uses the springboard to check
and authorize indirect transfers, we also need to obtain the
addresses of function call and return stubs that correspond to
our gadgets. For instance, to return to a CS gadget, we need
to use its return address stub, so that the CFI check will not
fail.
The vulnerability we use allows us to leak memory by
overwriting the size ﬁeld of a string object and reading values
past the original boundary of the object. We now discuss how
we leak the base addresses of the two DLLs containing all the
gadgets used in the exploit, namely mshtml.dll and ieframe.dll,
as well as how we reveal stub addresses in the springboard.
mshtml.dll. The base address of mshtml.dll is revealed by the
VFT pointer (not a function pointer) within the button object.
The location of this pointer is at a constant relative offset from
the string object. Reading this relative offset with the string
object, reveals the pointer value. Because this pointer targets
a constant known offset in mshtml.dll, the base address of the
581
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 
library can be derived by subtracting the known offset from
the pointer value.
ieframe.dll. To ﬁnd its base address, we read the address of
a function contained in iframe.dll and imported in mshtml.dll.
Although, we can compute the absolute address of the location
by reading mshtml.dll, we actually need its value relative to the
string object. Therefore, the address of the string object has to
be revealed ﬁrst. Fortunately, the button object (positioned after
the string object) has a reference to a location that has a ﬁxed
relative distance to the string object. By subtracting the ﬁxed
relative distance from the reference value, we reveal the string
object’s address. Once the string object’s address is known,
the relative distance from the string object to the imported
address can be computed. Consequently, the imported address
will reveal the base of ieframe.dll.
However, assuming that both these DLLs are protected
by CCFIR, the imported function’s address that we extract
from mshtml.dll actually points to a function call stub in the
springboard. To obtain the real location of the function, we
need to perform another read to obtain the jump address (or
offset) from the stub. The rest of the process is the same as
without CCFIR. With the two base addresses in hand, the
gadget offsets in the buffer can be located at run time.
CCFIR stubs. Having the modules’ base addresses and the
offsets for the EP and CS gadgets we intend to use, we need
to reveal the stubs corresponding to the gadgets. In a CCFIR-
protected library all call sites have direct references to their
stubs. Since the call-site offsets in the library are known,
direct references to the stubs can be discovered. By resolving
these direct references, we get the stub for the call-site gadget.
Although the entry-point offsets are also known, they do not
reveal their corresponding stub in the springboard. However,
the entry points that have a stub in the springboard also have a
relocation entry in the code. CCFIR alters the relocation entries
such that they point to the corresponding stubs of the entry
points in the Springboard. Thus, by resolving the relocation
entries, we get the stub for the entry point gadgets.
D. Gadget chaining
The PoC exploit is based on three generic phases. The
ﬁrst phase aims at converting the indirect jump we control
to a return instruction. This gives us further ﬂexibility in
subverting the control ﬂow of the process, since in the presence
of CFI indirect jumps are constrained. However, once we have
control over a return instruction, we need to also leverage
a fake stack so that we can further execute more gadgets.
This task is essentially known as stack pivoting [10] and it
is very common in modern exploits, which in our case is a
more complicated process.2 Therefore, we treat it as a separate
phase in the exploit’s time line. The third and ﬁnal phases aim
at changing memory permissions using available API calls,
such as VirtualProtect and memcpy, for making the shellcode
executable and jumping to it. We discuss each of the three
phases of the PoC exploit in detail. For each phase, we present
the high-level mechanics and (for the interested reader) provide
2Stack pivoting usually involves the leveraging of a fake stack by pointing
esp to the location where the ROP chain is stored. This can be achieved by
using just one gadget, which moves esp accordingly. Simulating the same task
in a constrained environment with EP/CS gadgets is signiﬁcantly harder.
# #"

 &  #"

" 


 "
  #  
    "
   
!+$%,-)!,!-

$ " %
%"+'! &&
)(-+)&!-.+(
(,-+.-%)(
1-!(,%)(-!'!-+)*!+-2&.!

$ " %
"!"%%

 "

%+!-,!+)&&+%(!*

$ " 

%( )0(#!+)&!-)'*)(!(-( &!
')/!1!1$
 "

Fig. 7: Schematic representation of how the four EP gadgets
are chained in the initial phase of the PoC exploit. Using
these four EP gadgets we manage to transfer control from
an indirect jump to a return instruction. Notice that we can
actually leverage small EP gadgets, which essentially resemble
traditional ROP gadgets like the one in Fig. 2 (the EP-R gadget
based on the LocalGetComponentHandle function) which is
composed solely by a mov instruction followed by a retn.
references to the actual gadget code used, which are listed in
the Appendix A.
Phase 1: Transfer control to a return instruction. The
exploit we use grants us control of an indirect jump instruction.
However, because there are far more CS gadgets in number,
as we discuss in Sec. V, and because of the extra steps
required to locate EP gadgets, we want to eventually gain
arbitrary control of a return instruction. In the case of bin-
CFI, jump instructions can transfer control to a CS gadget
(Tab. I). However, in the case of CCFIR transferring control
from an indirect call or jump instruction to a return instruction
is not straightforward. The only function which can be used
for this purpose is longjmp, which returns to a location that
is provided through a buffer. However, CCFIR tags longjmp
as a sensitive function and prevents any indirect control-ﬂow
instruction to direct execution to it.
Therefore, we need to selectively call gadgets that even-
tually give us control of a return instruction. The main idea
is to use the indirect jump we have to jump to code that (a)
pushes on the stack a return address which we can inﬂuence
through the sprayed buffer, and (b) has an indirect call or
indirect jump for calling a “stack smasher” or another EP
gadget. In our PoC, exploit we have chained four gadgets for
carrying out the whole task, which we present in Gadgets 1-1
to 1-4 in Appendix A. Gadget 1-1 pushes an address we control
as a return address on the stack and Gadget 1-2 breaks the
caller’s assumptions by just popping the return address from
the stack. Gadget 1-3 sets a pointer to the sprayed buffer as an
argument on the stack, but requires control over edi, so we use
Gadget 1-4 for this. The order in which the gadgets are chained
is depicted in Figure 7. Notice that we can actually leverage
small EP gadgets which essentially resemble traditional ROP
gadget — like Gadget 1-2 which is composed solely of a mov
instruction followed by a retn.
Phase 2: Stack pivoting. The instruction that is executed just
before the ﬁrst controlled return instruction is a pop instruction
582
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 
which loads the top of the stack into ebp (see Gadget 1-1).
However, the top of the stack contains already a pointer to
our buffer and therefore ebp is loaded with a value we can
inﬂuence. Nevertheless, we still have to move the value of
ebp to esp. This is done by having the ﬁrst controlled return
instruction transfer control to Gadget 2-1, which essentially
points esp to the sprayed buffer. However, we are not there
yet, since we want esp to point to the ROP chain within the
sprayed buffer. We need to further shift esp using Gadget 2-2.
A familiar reader can notice that chaining these gadgets causes
esp to increase by 0x30 bytes (12 dwords) and by 0x18 bytes
(6 dwords), respectively.
Phase 3: Change memory permissions. So far, in phases 1
and 2, we managed to gain control of a return instruction and
point the stack to the ROP chain hosted in the sprayed buffer.
The best way to proceed from here is to transform our code-
reuse attack to a code-injection attack. Since, conventional
ways of injecting code do not work because of DEP and CFI,
we adopt a novel approach, which we already discussed in
Sec. III-F. Instead of making data executable we overwrite
part of the program’s code with shellcode. We do so by
making a code area writable using a call to VirtualProtect
and then overwrite it with shellcode using memcpy. Since, we
cannot directly call VirtualProtect because it is considered to
be a sensitive function for CCFIR, we use a CS-F-R gadget.
memcpy on the other hand is not sensitive, so we can also call
it using a CS-IC-R gadget. The two CS gadgets we used are
Gadgets 3-1 and 3-2.
V. EVALUATION
In this section, our main goal is to show that the type of
gadgets we deﬁned in Sec. III and used in Sec. IV are very
common and can be found on many popular applications. This
serves to show the generality of our attack and to reveal the
extent of the problem.
We selected and analyzed six widely used applications on
Windows 7 x86: Internet Explorer 9.0.20, Firefox 24.0, Adobe
Reader XI 11.0.5, and Word, Excel, and PowerPoint from the
Microsoft Ofﬁce Professional Plus 2013 suite. We launched
the binaries and collected the set of libraries each one uses.
In total, the whole dataset including applications and libraries
consisted of 164 unique PE ﬁles. For each of these ﬁles, we
used the popular disassembler IDA Pro to disassemble and
collect the statistics presented throughout this section.
We collected the gadget types described in Sec. III. In
particular the following: (EP/CS)-R, (EP/CS)-IC-R, (EP/CS)-
F-R, (EP/CS)-IJ, and (EP/CS)-IC. All these types are usable
under CFI and we have demonstrated their use in our proof-
of-concept exploit. Let us use an example to explain the
gadget collection process. Consider the case where we begin
disassembling a function within a PE ﬁle, and we locate a
call instruction. In this case, we deﬁne a CS gadget starting
directly after that instruction, unless we are at the end of the
function. We then analyze the instructions following, until we
reach a ﬁxed call to a function that has a resolved function
name, or an indirect transfer, such as a return, indirect call, or
jump. At that point, we classify that gadget as a CS-F, CS-R,
CS-IC, or CS-IJ. For CS-F and CS-IC gadgets, we can continue
processing until we ﬁnd a return, in which case we classify
the gadget as a CS-F-R or CS-IC-R instead.
TABLE III: Distribution of gadget types in Internet Explorer
9. For gadgets including branches, we count all paths from a
particular CS or EP to an exit instruction.
Gadget
Type
CS-R
CS-IC-R
CS-F-R
CS-IJ
CS-IC
Sum
Unique call sites
EP-R
EP-IC-R
EP-F-R
EP-IJ
EP-IC
Sum
Unique entry points
Internet Explorer 9
Gadgets
w/ Branches
Gadgets
w/o Branches
179098