title:Design and implementation of the \emphidemix anonymous credential
system
author:Jan Camenisch and
Els Van Herreweghen
Design and Implementation of the idemix Anonymous
Credential System
Jan Camenisch and Els Van Herreweghen
IBM Research, Zurich Research Laboratory
8803 R¨uschlikon
Switzerland
{jca,evh}@zurich.ibm.com
ABSTRACT
Anonymous credential systems [8, 9, 12, 24] allow anony-
mous yet authenticated and accountable transactions be-
tween users and service providers. As such, they represent a
powerful technique for protecting users’ privacy when con-
ducting Internet transactions.
In this paper, we describe
the design and implementation of an anonymous credential
system based on the protocols developed by [6]. The system
is based on new high-level primitives and interfaces allowing
for easy integration into access control systems. The pro-
totype was realized in Java. We demonstrate its use and
some deployment issues with the description of an opera-
tional demonstration scenario.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption—Public key cryptosystems
General Terms
Design, Security
Keywords
Privacy, Anonymous Credential Systems, Cryptographic
Protocols
1.
INTRODUCTION
The protection of users’ privacy when performing Inter-
net or web-based transactions is an important factor in the
acceptance and use of Internet and web services.
Solutions for minimizing release of personal information
can be based on one of many proposed techniques for ano-
nymizing the transport medium used between users and ser-
vice providers, e.g., [26, 18, 27]. This may anonymize the
user towards outsiders and, if desired, towards the service
provider.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’02, November 18–22, 2002, Washington, DC, USA.
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
Service providers may require authentication (e.g., for
controlling access to resources) or accountability of users’
actions, in which case users need to prove their identity, or
at least possession of a certiﬁcate or capability of a certain
type. Such a certiﬁcate may contain a pseudonymous iden-
tity of the user, or contain only the necessary attributes
required for accessing a certain service. However, when us-
ing certiﬁcates as deﬁned by X.509 [11] or SPKI [2], or even
certiﬁcates speciﬁcally constructed for conveying policy or
authorization information as in Keynote [3], diﬀerent uses
of the same certiﬁcate still remain linkable to each other.
They can eventually identify a user through a combination
of context and addressing information from one or a series
of transactions. Moreover, the transaction in which the cer-
tiﬁcate was issued can be linked to the transaction where it
is used and thus, it the issuer and the veriﬁer collude, the
user can identiﬁed directly.
These linkabilities can be avoided by using an anonymous
credential system (also called pseudonym system) [8, 9, 12,
24]. In such a system, the organizations (service providers
and credential issuers) know the users only by pseudonyms.
Diﬀerent pseudonyms of the same user cannot be linked.
Yet, an organization can issue a credential to a pseudonym,
and the corresponding user can prove possession of this cre-
dential to another organization (who knows him by a diﬀer-
ent pseudonym), without revealing anything more than the
fact that the user owns such a credential.
In this paper, we describe the design and implementa-
tion of idemix (short for identity mix ), a prototype of the
credential system by Camenisch and Lysyanskaya [6]. We
describe the idemix functionality using high-level primitives.
These primitives allow reasoning about security and privacy
features, while hiding the complexity of the cryptographic
protocols, as well as the diﬀerences between actual protocols
realizing the same primitive. We also developed additional
functionality for service providers and credential issuers to
conﬁgure and enforce resource access control and credential
issuing decisions. As we demonstrate with an example, this
allows the use of the prototype in developing actual appli-
cations using concepts of anonymous and attribute-based
authentication and access control.
After describing the functionality of the credential sys-
tem protocols in Section 2, we describe in Section 3 the
high-level primitives. Section 4 describes the architecture
and implementation of the prototype implementing these
protocols, as well as the additional modules developed to
21support easy conﬁguration, creation, management and de-
ployment of idemix -based applications. The use of the pro-
totype is demonstrated with an implemented scenario. Sec-
tion 6 raises security and infrastructure management issues
related to the deployment of idemix. Section 7 states con-
clusions and lists future work.
2.
IDEMIX PROTOCOLS, PSEUDONYMS
AND CREDENTIALS
In this section we describe the functionality of the cre-
dential system. The basic protocols for issuing and showing
credentials are described in Section 2.1; Sections 2.2 and 2.3
describe optional features of protocols and credentials.
2.1 Basic Credential Protocols
The core of the idemix system consists of the protocols
described in [6]. This section describes these protocols in
terms of parametrized primitives of which functionality can
be easily explained and mapped to system interfaces.
The entities in the system are users, who obtain and show
credentials, and organizations issuing and verifying creden-
tials. Another type of organization, de-anonymizing orga-
nization, is discussed in Section 2.3.11. Thus, a user U can
obtain a credential C from an (issuing) organization OI ; and
then show the credential C to another (verifying) organiza-
tion OV . A credential is always issued on a pseudonym N
under which U is registered with (or known by) the issuing
organization OI . A credential may have certain attributes
(attr). When showing a credential, the user can choose
which of the credential’s attributes shall be revealed (see
Section 3.4).
Pseudonym registration, credential issuing and credential
veriﬁcation are interactive protocols between the user and
the speciﬁc organization. A user U has a (single) master
secret SU , which is linked to all the pseudonyms and creden-
tials issued to that user. Issuing and verifying organizations
all have a public/private key pair. The organization issuing
a credential uses its private key to generate the credential;
the credential can then be veriﬁed using the issuing orga-
nization’s public key, either by the user when receiving the
credential, or later on by any organization to which the user
shows the credential. When showing a credential, the user
uses the public key of the verifying organization which, in
turn, needs its private key in the protocol.
Obtaining a credential from OI and showing it to OV
works as follows (cf. Figure 1). First, U contacts OI and
establishes a pseudonym N with OI . If N is eligible to get a
credential with an attribute attr, OI produces a credential
C by signing a statement containing attr and N and sends C
to U . Now U can show this credential to OV . That is, using
a zero-knowledge proof, U convinces OV of (1) possessing a
signature generated by OI on a statement containing attr
and N , and (2) knowing the master secret key SU related
to N . We stress that U does not reveal any other informa-
tion to OV . In particular, U does not send OV the actual
credential. This way of showing a credential together with
the zero-knowledge property of the proof ensures the un-
linkability of diﬀerent showings of a credential and also the
1In the remainder of the text, organization is used for cre-
dential issuing and/or verifying organizations. Unless ex-
plicitly mentioned, it does not include de-anonymizing or-
ganizations.
cred(N, OI , attr)
)
PPPPPPPPPPPq
show(OI , attr
U (SU )
0)
OI (PKI , SKI )
OV (PKV , SKV )
Figure 1: Basic credential system protocols.
unlinkability of a showing of a credential to the pseudonym
to which the credential was issued. This means that U can
show C to OV (or any other veriﬁer) an unlimited number
of times, without these credential shows becoming linkable
to each other or to a pseudonym. (Exceptions are one-show
credentials, which are discussed in Section 2.2). This un-
linkability is maintained even if OV and OI are the same
organization (or pool their data).
Note that from this unlinkability property it follows that
the user is anonymous towards the verifying organization.
Of course, this property of the pseudonym system can only
provide real anonymity to the user if the communication
channel used supports anonymity [7, 18, 26, 27].
While, in general, this approach to showing a credential is
not very eﬃcient, the special signature scheme used by the
credential system [6] allows for an eﬃcient realization of the
zero-knowledge proof described above. In fact, as indicated
by our performance results, the computational complexity
for both the user and the verifying organization executing
the protocol for showing a credential corresponds to gen-
erating a small number of signatures in the standard RSA
signature scheme.
As all of a user’s credentials are linked to his master se-
cret, sharing a credential would imply also giving away one’s
master secret. This not only ensures that users cannot pool
their credentials (e.g., to obtain a new credential) but also
allows the implementation of measures to discourage users
from sharing their credentials. One way to do this is PKI-
assured non-transferability, where the user’s master secret
key is tied to some valuable secret key from outside the sys-
tem (e.g., the secret key that gives access to the user’s bank
account) [13, 17, 24]. Thus sharing a credential implies also
sharing this valuable secret key. However, such a valuable
key does not always exist. An other, novel way of achieving
this is all-or-nothing non-transferability [6]. Here, sharing
just one pseudonym or credential implies sharing all of the
user’s other credentials and pseudonyms in the system, i.e.,
sharing all of the user’s secret keys inside the system.
In cases where the veriﬁer and the issuer are the same
entity, sharing credentials can be limited by the approach
proposed by Stubblebine, Syverson, and Goldschlag [28]. In
this approach a credential can only be used once, but each
time a credential is used, a new credential is issued. Thus,
when a credential is given away, only the person using the
credential ﬁrst is given the next credential. This mechanism
makes sharing access to a resource tedious.
Using the so-called Fiat-Shamir heuristic [16], the proto-
col for showing a credential can also be turned into a sig-
22show(OI , attr
0, EVD(N ))-
U (SU )
OV (PKV , SKV )
de-anonymize(transcript)
6
N
?
OD (PKD, SKD)
Figure 2: De-Anonymization
nature scheme. The meaning of a signature will then be “a
person possessing a credential issued by OI has signed this
message.”
Both all-or-nothing non-transferability as well as the sig-
nature functionality will only be implemented in a future
version of the prototype.
2.2 Credential Options and Attributes
Credentials can have options (such as one-show, or multi-
show) and attributes. The one-show credentials incorporate
an oﬀ-line double-spending test [10]: when showing a one-
show credential more than once (to the same or diﬀerent
organizations), this results in transcripts from which the is-
suing organization can extract the pseudonym N on which
it was issued.
Examples of credential attributes can be an expiration
date, the user’s age, a credential subtype. When showing a
credential, the user can choose which attribute(s) to prove
something about, and what to prove about them. E.g.,
when showing a credential that has attributes (exp-date
= "2002-05-19", age = 55), the user can decide to prove
only that age > 18 (see also Section 3.4).
2.3 Parameters of the Show Protocol
2.3.1 De-Anonymizible Show of a Credential
De-anonymization mechanisms allow to reveal the iden-
tity of a user (global de-anonymization, also called global
anonymity revocation) or to reveal a user’s pseudonym with
an issuing organization (lobal de-anonymization or local ano-
nymity revocation). Global de-anonymization allows for glo-
bal accountability of transactions (e.g., for identifying a user
performing illegal transactions); local anonymity revocation
can be applied by the issuing organization to take measures
when a user misuses his credential.
Both types of de-anonymization are optional and require
U ’s cooperation when showing a credential. They require
the existence of a designated third party, a de-anonymizing
organization OD (see Figure 2). OD has a public-private
encryption-decryption key pair (PKD, SKD). Using this
variant of the show protocol, U encrypts N with OD’s pub-
lic encryption key. This encryption is veriﬁable (denoted
EVD(N )), which means that OV has proof that OD can de-