variable, i.e., power bus voltage magnitude and phase angles. To
support read access requests, CPAC implements actuation point-
to-sensor measurement information ﬂow analysis to determine how
each sensor measurement is affected as the result of a control input
application anywhere in the system. Following Equation 2’s ﬁrst-
order Taylor expansion around its equlibrium (x0,u0), gives us
x
fu]∆u
∆w = [wu − wx f −1
(6)
where the changes in measurements ∆w that the operators could
have read access request for are calculated as the result of any
change in the system ∆u. The Jacobian matrices wu, wx and fx are
in Figure 13 of Section 9. For more accuracy, second-order Taylor
expansion is given in Section 9. These Taylor series expansions
around the equilibrium points are used by the system to determine
boundary points after perturbing around its equilibrium points and
the physics equations are used to determine the information ﬂow
between different objects or parameters.
5. LOGICAL POLICY ENFORCEMENT
A key of the EMS is the HMI used by operators to facilitate
checking process states, system variables, and control system set-
tings within the physical plant devices. Most software still relies on
user name and password input as the sole method of authentication
and authorization. Some systems contain elements of role based
access control (RBAC) [49], where certain roles are limited to cer-
tain operations through the EMS. However, RBAC requires admin-
istrators to examine all available operations provided by the EMS,
assuming a static policy. Consider a trivial case where Alice cannot
view the voltage or current value of a generator Gi, based on a pol-
icy that Alice should not know the working status of that generator.
Alice can still learn this information by checking the temperature of
Gi. These policies become more complicated when the interaction
of different operations cannot be detected until run-time. Addition-
ally, support for storing detailed provenance [21] of applications
is lacking. Most EMS software provides some logging abilities
to record user activity, however, these logs are mainly designed
for postmortem analysis rather than policy enforcement, where in-
corporating provenance could allow additional ﬁne-grained policy
controls. For instance, we may want to add restrictions dynam-
ically to operators who tried and failed certain operations over a
time window.
5.1 Context-Aware Policy Control
Policy-based access control has been well studied and solutions
including MAC, RBAC and capabilities have been applied into
commodity computer systems [63, 53, 1]. There are also pol-
icy speciﬁcation languages, such as SPL (Security Policy Lan-
guage) [50] and RDL (Role Deﬁnition Language) [40]. Unfortu-
nately, as we have mentioned above, none of these ﬁts perfectly
into the requirements and setting of cyber-physical systems (CPS),
which requires, we argue:
• Information ﬂow control: Unlike normal policy control sys-
tems, whose target are processes, CPS also need to control
144
Symbolic 
Execution Unit
Physical 
Engine 
(Matpower)
Policy Engine 
(Prolog)
Policy 
DB
CPAC PLC
Dom0
Control logic 
instrumented
Figure 5: The CPAC EMS/PLC architecture.
the information ﬂow of a task/process, guaranteeing no sen-
sitive information leakage4.
• Context awareness: Not only user names, but also time
epochs, locations (e.g., IP addresses) and detection of events
(e.g., voltage outages) are needed to make policies more use-
ful and practical.
• Provenance-awareness: All operations should be logged to
allow the use of provenance data to support policies based on
user historical behaviors.
To support ﬁner-grained policy, the CPAC EMS consists of a
general Modbus [2] transport layer from pvbrowser [13], a HMI
access control terminal, the physics engine, the symbolic execution
unit, and the policy engine to enforce the policy control and provide
provenance support as shown in Figure 5. The transport layer (not
shown in the ﬁgure) communicates with the PLC via the Modbus
protocol (widely supported by most PLCs) over TCP, since we aim
for the EMS to be independent of the PLC hardware, while the PLC
is running instrumented control logic. The HMI within the EMS
provides basic user authentication and accepts operation requests.
Both the physical engine and symbolic execution unit provide in-
put for the policy engine, which attempts to authorize operational
requests based on policies and adds provenance meta data to these
requests for future decision making.
5.2 Policy layers of CPAC
We deﬁne three further requirements for a policy control imple-
mentation: simplicity of writing policies, correct and potentially
formally veriﬁable policy control logic, and low operational over-
head. Under such considerations, we implemented our policy en-
gine using Prolog5, transforming a policy enforcement query into a
logic reasoning process. There are four layers in the policy engine,
each in charge of a different policy enforcement task. Each layer is
evaluated in order until a layer results in a check failure or there are
no more layers to check.
1. Physical Layer When CPAC EMS receives an operation
permission request from an EMS, it determines whether an
operation is physically possible using the analysis described
in the previous section. For example, the temperature of CPU
should be only readable but not writable.
2. MAC Layer This acts as a capability system enforcing
which users can do what operations on which variables
4Thanks to the symbolic execution unit on the EMS side, and the
nature of PLC control logic (less branches comparing to normal
x86 binary), taint tracking per task is possible. However, this does
not mean the adversary could not learn anything from the running
program, e.g., via timing side channels.
5Prolog code can be compiled with the native C/C++ code to gen-
erate the binary executable, which runs much faster than its inter-
pretive mode.
on a PLC. For instance, Alice is able to read the voltage,
the current and the temperature of generator 1, but only to
write/change the voltage value. This and the physical layer
implement the security features most EMS software share.
However, unlike traditional implementations, CPAC counts
on logic rules as policies and reasoning as permission check-
ing.
3. Taint Analysis Layer This layer uses taint tracking infor-
mation from the PLC to ﬁnd information leakage missed by
the two previous layers. A trivial example may be that since
Bob is not allowed to read the voltage value, he should not be
allowed to read the current or temperature either. The taint
analysis layer supports both the predeﬁned static taint infor-
mation (which can be derived from physical modeling), and
dynamic tainting provided by the symbolic execution unit
and the taint tracking enabled PLC (Section 6 gives more
details).
4. Context/Provenance-Aware Layer This layer leverages the
time, locations, events and provenance to check for permis-
sions (e.g., operations are only allowed during the day from
certain IP address for Alice; Bob is not allowed to access
variables if a generator fails). As with the above layers, all
policies are written in logic rules and facts, and the permis-
sions check is a matter of querying or reasoning.
Both the physical and MAC layers generate static policies, which
check for the legitimacy of operations. Passing these two layers
proves the validity of an operation request from the traditional ac-
cess control point of view. The next two layers then try to refute the
request using the dynamic tainting information and current running
context. Note that CPAC does not try to blacklist all possible ille-
gal operations, number of which may be inﬁnite. Instead, CPAC
enables system administrators to retrospect a legitimate operation
request in a rich context.
5.3 Formal description of CPAC
To grant permission for an operation, the EMS submits a query
to the logic rule cpac_granted, which is deﬁned with seven argu-
ments {T ,L,U,I ,N ,W ,V }, representing timestamps, locations,
users, operations, PLC variable names, new values (if written) and
the current value of all the PLC variables respectively, as shown
below. Note that V could be viewed as a global variable, whose
value is visible to all rules in the Prolog engine, even though it may
not appear in each logic rule. It represents values of all variables
available on the PLC when the query is submitted.
cpac_granted(T ,L,U,I ,N ,W ,V ) ←
physical_granted(N ,I ,W )∧ mac_granted(U,I ,N )∧
taint_granted(U,I ,N )∧ context_granted(T ,L,U,I ,N ,W ).
physical_granted grants the permission if the I/O operation is read.
Otherwise, it checks if the variable in PLC is writable and if the
new value to be written is in the legal range. Note that this layer
tries to check the permission from the point of PLC’s constrains
without considering any other policies. The system administrator
is responsible for providing legal ranges for all variables based on
speciﬁcations, and writing them in the format of Prolog facts (e.g.,
svi(voltage,0,10,rw) shows the name of the variable, the minimum
value, the maximum value, and the possible I/O operations), which
can be used by the in_range rule (and other rules) directly.
physical_granted(N ,I ,W ) ←
read(I )∨ (write(I )∧ writable(N )∧ in_range(W )).
mac_granted grants the I/O operation based on the user’s capabili-
ties. For all the variables exported by the PLC, the system admin-
istrator should assign different permissions to different users. This
layer implements the general access control applied by most EMS
145
systems. Within the layered access control structure in CPAC,
physical_granted comes ﬁrst. This means even if the operation
would be allowed by mac_granted through the user access con-
trol policy, it may be denied based on rules deﬁned by the physics
layer. The layered approach in CPAC thus provides more modu-
lar access policies. To add a new user or modify existing policies,
the system administrator only needs to create or modify the cor-
responding Prolog facts, such as cap_read(bob,[current]) (giving
bob the permission to read variable current (only)).
mac_granted(U,I ,N ) ←
(read(I)∧ cap_read(U,N ))∨ (write(I )∧ cap_write(U,N )).
taint_granted determines whether the target variable could be
tainted by some other variables not visible to this user, and rejects
the operation accordingly to avoid data leakage. CPAC supports
both taint analysis by writing the static taint rules directly and the
dynamic taint tracking provided by the symbolic execution unit and
PLC during the run time. This layer uncovers missing policies not
easily found in the traditional access control implementations. Z
stands for all the variables visible to the EMS side (same as the
N used in cpac_granted, such as the temperature and current).
Both the static and dynamic rules share similar Prolog construc-
tion, taint_X(z1, z2), meaning variable z1 tainted by variable z2.
As shown below, if variable z2 cannot be accessed by this user, the
request for accessing variable z1 would be rejected.
taint_granted(U,I ,N ) ← ∀z ∈ Z :
((¬taint_static(N ,I ,z))∨ (taint_static(N ,I ,z)∧
cap_read(U,z)))∧ ((¬taint_dynamic(N ,I ,z))∨
(taint_dynamic(N ,I ,z)∧ cap_read(U,z))).
context_granted leverages contextual information to help system
administrators write polices ﬁtting into their speciﬁc domains, (e.g.,
the power grid). To simplify the rule/policy writings, we introduce
an event-driven reasoning framework and ﬁx the default action of
policies to be operation blocking. The ﬁnal permission granting is
then the conjunction of negations of all the blocking rules, which
are context_denied_X, where X is an integer used to differentiate all
these Prolog rules.
context_granted(T ,L,U,I ,N ,W ) ←
(¬context_denied_0(T ,L,U,I ,N ,W ))∧
(¬context_denied_1(T ,L,U,I ,N ,W ))∧ (...).
All blocking rules are event-driven and follow the same construc-
tion. Note that all events should be predeﬁned by the system ad-
ministrator based on domain knowledge. One simple example is
event_g0_failure(V) :- g0_power=<0.6. With event E deﬁned, the
blocking rule is deﬁned as below. Given user U’s access request on
variable N, if event E happens, and the corresponding rule context_-
policy_block contains N in its blocking list B, the context layer will
deny the request.
context_denied_X(T ,L,U,I ,N ,W ) ←
event_E ∧ contex_policy_block(T ,L,E,U,B)∧ member(N,B).
Below we demonstrate a real code snippet within CPAC. We
choose a complicated policy to demonstrate the ease of policy writ-
ing once the corresponding event is predeﬁned by the system ad-
ministrator. This rule states that for any condition, once generator
0 (g0) fails, the temperature value of that generator should not be
visible to the operator ‘dave’7.
6Note that in this Prolog rule, argument V is not used at all, since
this event call be determined solely by checking the power of the
generator. Complex events can have multiple arguments and take
full usage of them.
7In Prolog, ‘_’ is wildcard, meaning that the value of that variable
does not matter.
context_policy_block(_,_,g0_failure,dave,[temp0]).
context_denied_0(T,L,U,I,N,W) :-
event_g0_failure(_),
context_policy_block(_,_,g0_failure,U,B),
member(N,B).
To support provenance both for forensic analysis and run-time
provenance-based policy enforcement (e.g., an event related with
user’s previous operation history), CPAC records each operation
request from the EMS side, either granted or denied, both in a stan-
dalone provenance logging ﬁle and the Prolog engine as a ’fact’,
using the uniﬁed format:
provenance(T ,L,U,I ,N ,W ,R ,V ).
Here R stands for the ﬁnal result for this operation request (granted
(g) or denied (d)) and W is reused to hold the return value for
read operations, as well as the new value for write operations.
Other variables are the same as the ones in the rule cpac_granted.
A concrete example is shown below, where user dave’s request
to read variable temp0 from IP address 10.10.10.10 at time
2015071411550 was granted, with all other variable values at that
time dumped in the list.
provenance(20150714115507, 10-10-10-10, dave, r,
temp0, 3000, g, [3000,4000,5,40,38,17,15]).
With more provenance added into the CPAC EMS Prolog engine,
making provenance-aware polices is possible. For example, users
with more than 10 denials within an hour could be blocked, as
the user account may have been compromised. Also any unseen
IP address used by a certain user could be blocked, which actu-
ally implements a naive intrusion detection mechanism. Since all
provenance is also saved into a standalone logging ﬁle, this ﬁle can
be loaded into the Prolog engine every time the EMS is restarted.
With the help of the Prolog interpreter, one could submit queries,
such as “who read the variable temp0 in the past but was denied”
(provenance(_,_,X,r,temp0,_,d,_).), and Prolog would ﬁnd
all users satisfying the query.
5.4 Trade-offs
Besides all the desired requirements of implementing a policy
enforcement component mentioned before, one of the biggest con-
cerns using a logic programming language to write policies is how
easy it would be for system administrators to use. As shown before,
the logic reasoning framework is already provided, as well as some