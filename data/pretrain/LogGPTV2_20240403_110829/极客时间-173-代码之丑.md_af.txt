# 05 大类：如何避免写出难以理解的大类？

你好，我是郑晔。上一讲我们讨论了长函数这一代码坏味道。本讲我们将探讨另一个常见的问题：大类。

当你听到“大类”这个词时，脑海中可能已经浮现出一片无边无际的代码。一个类之所以成为大类，通常是因为它包含了过多的方法或字段。有时，尽管每个方法都很简短，但数量庞大也会使这个类变得臃肿。本讲将重点讨论这种形式的大类。

## 分模块编程的重要性

首先，我来问你一个问题：为什么不在一个文件中编写所有的代码？除了某些特定场景外，没有人会在正式项目中这样做。那么，把所有代码写在一个文件里究竟有什么问题呢？

事实上，这样做不仅会导致功能模块无法复用，更关键的是，代码复杂度会超出一个人的认知范围。人类面对复杂事物时，倾向于采用分而治之的方法。因此，几乎所有编程语言都提供了某种形式的模块化方案，从最初的文件划分到面向对象中的类划分，都是为了降低理解和管理成本。

明白了这一点后，再来看大类的问题，就容易找到解决方案了——将大类拆分成若干个小类。接下来，我们探讨如何实现这一目标。

## 大类产生的原因及解决策略

### 1. 职责不单一

最常见的大类形成原因是职责不单一。下面通过一个示例说明：

```java
public class User {
    private long userId;
    private String name;
    private String nickname;
    private String email;
    private String phoneNumber;
    private AuthorType authorType;
    private ReviewStatus authorReviewStatus;
    private EditorType editorType;
    ...
}
```

在这个 `User` 类中，字段种类繁多。分析发现，这些字段分别属于用户基本信息、作者信息和编辑信息。显然，对于普通用户而言，作者和编辑相关的字段是无关紧要的；而对于作者来说，编辑的信息也没有意义。这种设计违反了单一职责原则，即一个类只负责一种功能。

为了解决这个问题，我们可以根据角色将字段分开，如下所示：

```java
public class User {
    private long userId;
    private String name;
    private String nickname;
    private String email;
    private String phoneNumber;
    ...
}

public class Author {
    private long userId;
    private AuthorType authorType;
    private ReviewStatus authorReviewStatus;
    ...
}

public class Editor {
    private long userId;
    private EditorType editorType;
    ...
}
```

这样，每个类只关注其特定职责，从而提高了代码可读性和可维护性。

### 2. 字段未分组

另一个导致大类的原因是字段未合理分组。例如，在上述重新设计后的 `User` 类中，虽然比之前小了很多，但依然存在不同类型的字段混杂在一起的情况。对此，可以进一步细分字段：

```java
public class User {
    private long userId;
    private String name;
    private String nickname;
    private Contact contact;
    ...
}

public class Contact {
    private String email;
    private String phoneNumber;
    ...
}
```

这里引入了一个新的 `Contact` 类，专门用于处理用户的联系方式，从而使 `User` 类更加简洁明了。

## 总结

今天我们讨论了大类这一常见代码坏味道，并介绍了两种主要成因及其对应的解决办法。记住，好的软件设计应遵循单一职责原则，尽量保持每个类的小巧与专注。此外，现代编程语言提供的包、命名空间等机制有助于更好地组织和管理大量小型类。如果只能记住一件事，请牢记：**把类写得越小越好**。

思考题：你在实际工作中遇到过哪些大类？又是如何进行拆分的呢？欢迎在评论区分享你的经验。如果你有同事经常写出大类，不妨推荐他阅读本文，或许能有所帮助。感谢阅读，下期再见！