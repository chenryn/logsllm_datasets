veriﬁer only performs two checks (60) and (14). The idea
is to delay exponentiation until those checks are actually
performed. We, therefore, unroll the inner product argument
and separately compute with which exponent each generator
1. The resulting protocol
gi, hi is factored into the ﬁnal g
is presented below with xu being the challenge from Proto-
col 1, and xj being the challenge from round j of Protocol 2.
Lj and Rj are the L, R values from round j of Protocol 2:
, h
1
identity check for
Protocol 3: Part 2: Polynomial
xlpxq, rpxqy “ tpxq
heuristic as in 4.4 the protocol can be turned into an efﬁcient
non interactive proof. We report implementation details and
evaluations in Section 6.
Theorem 4. The arithmetic circuit protocol using the im-
proved inner product argument (Protocol 2) has perfect
completeness, statistical zero-knowledge and computational
soundness under the discrete logarithm assumption.
6. Performance
6.1. Theoretical Performance
In Table 1 we give analytical measurements for the proof
size of different range proof protocols. We compare both
the proof sizes for a single proof and for m proofs for the
range r0, 2n ´ 1s. We compare Bulletproofs against [3] and
a Σ-protocol range proof where the proof commits to each
bit and then shows that the commitment is to 0 or 1. The
table shows that Bulletproofs have a signiﬁcant advantage
when providing multiple range proofs at once. The proof
size for the protocol presented in Section 4.3 only grows
326
´z2 ¨ T
¨ T
´x2
2
if the jth bit of i ´ 1 is 0
´x
1
P G,
g
1
u
#
τx ¨ V
´1 otherwise
π “ tA, S, T1, T2,pLj, Rjqlogpnq
j“1
τ, t, μ, a, b P Zpu
Compute challenges from π :
ty, z, x, xu,pxjqlog2pnq
j“1
t´kpy,zq`z¨x1n,yny
h
bpi, jq “
l “ pl1, . . . , lnq P Z
r “ pr1, . . . , rnq P Z
li “ log2 nź
ri “ y1´i ¨ plog2 nź
j“1
μ ¨ A
¨ a ´ y1´i ¨ z
´bpi,jq
j
bpi,jq
j
´1S
xu¨t
j“1
´x
n
p
n
p
h
h
g
x
x
g
r
l
(88)
(89)
(90)
(91)
?“ 1 (92)
(93)
(94)
(95)
(96)
(97)
i´1q ´ z
¨ b ´ z2 ¨ 2
log2pnqź
j“1
´x2
j R
L
j
´x´2
j
j
?“ 1 (98)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
log2 n
p1q
bpi,jq
j
log2 n
j“1 x
piq “ś
p1q “ pś
x3 “ x
We can combine the two multi-exponentiations in line (92)
and (98) by using a random value c $ÐÝ Zp. This is because
if AcB “ 1 for a random c then with high probability A “
1 ^ B “ 1.
Various algorithms are known to compute the multi-
exponentiations (98) and (92) efﬁciently. As explained in
[65], algorithms like Pippenger’s [66] perform a number of
group operations that scales with O n
logpnq, i.e. sub-linearly.
For realistic problem sizes these dominate veriﬁcation time.
Computing scalars. A further optimization concerns the
computation of the li and ri values. Instead of computing
for each i, we can compute each chal-
x
lenge product using only one multiplication in Zp by apply-
j“1 xjq´1
ing batch division. First we compute x
to get the ﬁrst challenge value using a single inversion.
p2q “ x
p1q
Then computing x
2, and for
x2
x2
1,
p7q “ x
p3q
example x
5. In general in order to compute
x2
lower power of 2 of i ´ 1
piq we let k be the next
piq “ x
pi´kq ¨ x2
x
k`1 which takes only one
and compute x
additional multiplication in Zp and no inversion. Further,
note that the squares of the challenges are computed anyway
in order to check equation (98).
Batch veriﬁcation. A further important optimization con-
cerns the veriﬁcation of multiple proofs. In many appli-
cations described in 1.2 the veriﬁer can verify multiple
proofs at once. For example a Bitcoin node receiving a
block of transactions needs to verify all transactions and thus
range proofs in parallel. As noted above, veriﬁcation boils
down to a large multi-exponentiation. In fact, 2n` 2 of the
generators only depend on the public parameters, and only
2 logpnq ` 5 are proof-dependent. We can therefore apply
batch veriﬁcation [67] in order to reduce the number of
expensive exponentiations. Batch veriﬁcation is based on the
observation that checking gx “ 1 ^ gy “ 1 can be checked
by drawing a random scalar α from a large enough domain
and checking gα¨x`y “ 1. With high probability over the
ladder equation implies that the ﬁrst two hold but the ladder
only uses a single exponentiation. The same trick applies
to multi-exponentiations and can save 2n exponentiations
per additional proof. This is equivalent to the trick that is
used for combining multiple exponentiations into one with
the difference that the bases are equivalent. Verifying m
distinct range proofs of size n now only requires a single
multi-exponentiation of size 2n`2`m¨p2¨logpnq`5q along
with Opm¨ nq scalar operations. Note that this optimization
can even be applied for circuits and proofs for different
circuits if the same public parameter are used.
into the popular library libsecp256k1 which is used in many
cryptocurrency clients. libsecp256k1 uses the elliptic curve
secp256k13 which has 128 bit security.
In their compressed form, secp256k1 points can be
stored as 33 bytes. We use all of the optimizations described
above, except the pre-computation of generators. The prover
uses constant time operations until the computation of l and
r. By Theorem 1, the inner product argument does not need
to hide l and r and can therefore use variable time opera-
tions. The veriﬁer has no secrets and can therefore safely
use variable time operations like the multi-exponentiations.
All experiments were performed on an Intel i7-6820HQ
system throttled to 2.00 GHz and using a single thread.
Less than 100 MB of memory was used in all experiments.
For reference, verifying an ECDSA signature takes 86 μs
on the same system. Table 2 shows that in terms of proof
size Bulletproofs bring a signiﬁcant improvement over the
3.8 KB proof size in [3]. A single 64-bit range proof is
688 bytes. An aggregated proof for 32 ranges is still 1 KB
whereas 32 proofs from [3] would have taken up 121 KB.
The cost to verify a single 64-bit range proof is 3.9 ms but
using batch veriﬁcation of many proofs the amortized cost
can be brought down to 470 μs or 5.5 ECDSA veriﬁcations.
Verifying an aggregated proof for 64 ranges takes 62 ms
or 1.9 ms per range. The marginal cost of verifying an
additional proof is 2.58 ms or 81 μs per range. This is
less than verifying an ECDSA signature, which cannot take
advantage of the same batch validation.
To aid future use of Bulletproofs we also implemented
Protocol 3 for arithmetic circuits and provide a parser for
circuits in the Pinocchio [9] format to the Bulletproofs for-
mat. This hooks Bulletproofs up to the Pinocchio toolchain
which contains a compiler from a subset of C to the circuit
format. To evaluate the implementation we analyse several
circuits for hash preimages in Table 3 and Figure 1.
Speciﬁcally, a SHA256 circuit generated by jsnark4
and a Pedersen hash function over an embedded elliptic
curve similar to Jubjub5 are benchmarked. A Bulletproof
for knowing a 384-bit Pedersen hash preimage is about 1
KB and takes 69 ms to verify. The marginal cost of verifying
a second proof is 4.7 ms. The SHA256 preimage proof is
1.3 KB and takes 832 ms to verify. The marginal cost of
verifying additional proofs is just 58 ms. Figure 1 shows that
the proving and veriﬁcation time grow linearly. The batch
veriﬁcation ﬁrst grows logarithmically and then linearly. For
small circuits the logarithmic number of exponentiations
dominate the cost while for larger circuit the linear scalar
operations do.
Even for a single veriﬁcation we can take advantage of
the fact that most generators are ﬁxed in the public parame-
ters. The veriﬁer can precompute multiples of the generators
and fast lookup tables to speed up exponentiations. The same
techniques can improve the prover’s complexity.
6.3. Implementation and Performance
To evaluate the performance of Bulletproofs in practice
we give a reference implementation in C and integrate it
3. http://www.secg.org/SEC2-Ver-1.0.pdf
4. See https://github.com/akosba/jsnark.
5. See https://z.cash/technology/jubjub.html.
327
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
TABLE 2: Range proofs: performance and proof size
References
Gates
π Size
(bytes)
Problem size
prove
Range proofs (range ˆ aggregation size)
7
8 bit
14
16 bit
32 bit
27
54
64 bit
64 bit ˆ 2
107
54
per range
64 bit ˆ 4
210
53
per range
64 bit ˆ 8
416
52
per range
64 bit ˆ 16
825
per range
52
64 bit ˆ 32
1621
51
per range
8
16
32
64
128
64
256
64
512
64
1024
64
2048
64
490
556
622
688
754
377
820
205
886
111
952
60
1018
32
Timing (ms)
verify
batch
1.0
1.5
2.5
3.9
6.4
3.2
10.7
2.7
19.7
2.5
34.0
2.1
62.2
1.9
0.31
0.35
0.40
0.47
0.57
0.29
0.73
0.18
1.02
0.13
1.56
0.10
2.58
0.08
The ﬁrst 4 instances are n-bit range proofs and the later ones are m
aggregated 64-bit proofs and the normalized costs per range. “batch” is
the marginal cost of verifying an additional proof.
TABLE 3: Protocol 3: Performance numbers and proof sizes
Problem size
Gates
π Size
(bytes)
Timing (ms)
verify
prove
batch
Pedersen hash preimage (input size)
48 bit
96 bit
192 bit
384 bit
768 bit
1536 bit
3072 bit
Unpadded SHA256 preimage
64 byte
128
256
512
1024
2048
4096
8192
864
928
992