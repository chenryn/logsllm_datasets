1.6 min
✗
✗
3.0 GiB
302 MiB
Offline
Online
40 min
28 min
28 GiB
✗
430 MiB
99 MiB
8.7 min
2.0 min
2.9 GiB
✗
700 MiB
61 MiB
phase), we estimate that 151 medians can be computed every 24
hours in AuthMode and 36 in RelMode. For set-union cardinality,
input sharing becomes expensive due to the larger relay inputs, but
even without pipelining, we estimate 533 daily computations can
be performed in AuthMode and 134 in RelMode.
8 RELATED WORK
8.1 Tor Measurement
Previous work on privacy-preserving Tor measurement has fo-
cused on applying partially-homomorphic cryptosystems to the
problem, limiting their functionality and security. The PrivEx [30]
and PrivCount [42] systems can only provide simple sums of the
relay inputs. Moreover, a single malicious relay can add in an arbi-
trary error term to the result, for example adding a random value
to its input and making the sum useless. HisTorε [53] is designed
to solve this problem by allowing each relay a limited number of
input bits. However, it requires an analyst that cannot collude with
any of the aggregating parties. Melis et al. [56] point out the use-
fulness of the median to robustly aggregate Tor inputs and suggest
computing it using a count sketch. Their protocol reveals signifi-
cantly more information about the inputs, however, as it performs
a binary search on the space of possible input values that reveals
the number of inputs in the search interval at every step. It is also
vulnerable to an input party that doesn’t prepare its sketches prop-
erly, where handling such a case is the main goal of computing
the median. The PeerFlow bandwidth-measurement system [45]
requires a robust estimate of the relays’ bandwidth, and it presents
a method to securely compute a median by securely computing
tallies for bins covering the space of input values. This is both
approximate and reveals more about the inputs than just their me-
dian. PSC [31] securely computes an aggregate unique count, but
it uses a hash-table representation that grows linearly with the
maximum count and is thus exponentially more expensive than
our proposed method. The preceding systems generally allow the
relays to store and update measurements obliviously and provide
differentially-private outputs [28]. Their techniques for oblivious
storage are compatible with and orthogonal to our system for ag-
gregation. Our MPC protocols can compute differentially-private
outputs, but we leave the design of such functions to future work.
The Prio system [21] describes how inputs can be securely tested
for validity as expressed by an abritrary Boolean circuit. Similar
to our system, the Prio protocol uses offline/online MPC protocols,
although the offline material can be supplied by the input party for
efficiency. This technique can complement our system by providing
efficient input validation, but it does not replace the need for robust
statistics, as a valid input may still be a relative outlier.
8.2 MPC (Multi-party Computation)
Secure computation was originally introduced by several semi-
nal works in the 1980s [11, 33, 70]. More recently, a long line of
work starting with the work of Damgård et al. [23] has focused on
building efficient secure computation in the preprocessing model
(e.g., [15, 22, 32, 49]). These protocols introduced the notion of com-
puting on authenticated values, and we follow this approach in
our work. To the best of our knowledge, the largest experiment
for real-world deployment of MPC was given by Wang et al. [68]
showing global-scale MPC between 128 parties.
Another related line of work uses committee election to reduce
communication required in large-scale MPC protocols. Original
protocols in this area (e.g., [14, 19, 24, 25, 63, 72]) have focused on
selecting committees that are poly-logarithmic in n, ensuring that
each committee retains an honest majority. For n = 7, 000, these
committee sizes are prohibitively large for the O(n2) communica-
tion of malicious majority MPC protocols, such as the one we use
in our work. It is an interesting question whether we could use
honest majority committees in a practical solution.
A more similar approach to our own is taken by Choudhury
et al. [20] who focus on reducing the communication of MPC for
evaluating large circuits. They also use small committees with at
least one honest party. Their main focus is to ensure robustness
in case of abort, for which they only use one committee at a time.
While they point out that computations can be performed in parallel,
they do not focus on maximizing throughput, as we do here.
Hazay et al. [35, 36] propose the TinyKeys protocol for bandwidth-
efficient triple generation. TinyKeys uses two committees: one (P1)
with at least one honest party, and the other (Ph ) with many hon-
est parties, where increasing the number of honest parties h in
Ph reduces the key length ℓ and thus the communication. In the
setting of randomly-sampled committees from a network that is at
most 25% malicious, over the set of values for h and ℓ considered
for actively-secure TinyKeys (Table 2 [35]), TinyKeys achieves at
most a 6.5x decrease in communication complexity compared to
the protocol of Wang et al. [68]. In contrast, Stormy increases the
triple-generation rate by improving bandwidth utilization via mul-
tiple parallel triple committees. In our simulations, Stormy uses up
to 1,000 committees simultaneously to utilize as much as 25% of
Tor’s bandwidth, where even the highest-bandwidth committee in
those simulations could only use 0.19% of the total bandwidth by
itself. Therefore, we estimate that we increase by 25/0.19 ≈ 132x
the bandwidth available for triple production compared to using a
single committee. Communication costs dominate triple production,
and so we estimate that we increase the triple-generation rate over
TinyKeys by about 132/6.5 ≈ 20.3x (see the technical report [65]
for details).
These approaches seem orthogonal to some extent. It may be
possible to run parallel executions of TinyKeys, thus combining the
reduced communication of TinyKeys with the increased bandwidth
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom628utilization of Stormy. Challenges to making this work include (1)
TinyKeys uses short MAC shares, but the MAC switching protocol
(Figure 2) that we use for parallel composition requires MAC shares
long enough to ensure unpredictable hashes; and (2) TinyKeys
uses larger committees to ensure more honest parties, but a large
committee is more vulnerable to churn, reducing the number of
triple batches it can compute before dying.
9 CONCLUSION AND FUTURE WORK
Although Tor is an important tool for online privacy, experience
has shown that completely hiding all information about the net-
work harms its mission by making the network hard to defend,
understand, and improve. We show that MPC can provide a high
level of control for such decisions. Our implemented system could
be used today to solve existing problems in Tor, and it opens up
possibilities that could not previously be contemplated. Our work
suggests several valuable directions for future work, including im-
proving resilience by adapting MPC protocols with identifiable
abort [38] to identify and then remove misbehaving parties, design-
ing differentially-private statistics with low circuit complexity, and
applying secure computation to proactively detect and mitigate
attacks, failures, and errors in Tor.
ACKNOWLEDGEMENTS
This work has been partially supported by the Office of Naval Re-
search, the Defense Advanced Research Project Agency (DARPA),
and the Department of Homeland Security Science and Technol-
ogy Directorate, Homeland Security Advanced Research Projects
Agency, Cyber Security Division under agreement number
FTCY1500057. This material is based upon work supported by the
Under Secretary of Defense for Research and Engineering under
Air Force Contract No. FA8702-15-D-0001. Any opinions, findings,
conclusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reflect the views of
the Under Secretary of Defense for Research and Engineering or
any other funding agency.
DISTRIBUTION STATEMENT A. Approved for public release. Dis-
tribution is unlimited.
REFERENCES
[1] MIRACL. https://libraries.docs.miracl.com/. Accessed: 2019-07-02.
[2] OpenSSL. https://www.openssl.org/. Accessed: 2019-07-02.
[3] Sodium. https://legacy.gitbook.com/book/jedisct1/libsodium/details. Accessed:
2019-07-02.
[4] Tor directory protocol, version 3. https://gitweb.torproject.org/torspec.git/plain/
dir-spec.txt. Accessed: 2019-07-02.
[5] Tor Metrics. https://metrics.torproject.org. Accessed: 2019-07-02.
[6] Tor path specification. https://gitweb.torproject.org/torspec.git/plain/path-spec.
txt. Accessed: 2019-07-02.
[7] Tor shared random subsystem specification. https://gitweb.torproject.org/torspec.
git/tree/srv-spec.txt. Accessed: 2019-07-02.
[8] Abdelberi, C., Manils, P., and Kâafar, M. A. Digging into Anonymous Traffic:
In Fourth International
A Deep Analysis of the Tor Anonymizing Network.
Conference on Network and System Security, NSS 2010 (2010).
[9] Bauer, K., McCoy, D., Grunwald, D., Kohno, T., and Sicker, D. Low-Resource
Routing Attacks Against Tor. In Proceedings of the Workshop on Privacy in the
Electronic Society (WPES 2007) (2007).
[10] Beaver, D. Efficient Multiparty Protocols Using Circuit Randomization.
In
Advances in Cryptology - CRYPTO ’91 (1991).
[11] Ben-Or, M., Goldwasser, S., and Wigderson, A. Completeness Theorems for
Non-Cryptographic Fault-Tolerant Distributed Computation (Extended Abstract).
In Proceedings of the 20th Annual ACM Symposium on Theory of Computing (1988).
[12] Biryukov, A., Pustogarov, I., and Weinmann, R. Trawling for Tor Hidden
Services: Detection, Measurement, Deanonymization. In 2013 IEEE Symposium
on Security and Privacy, SP 2013 (2013).
[13] Borisov, N., Danezis, G., Mittal, P., and Tabriz, P. Denial of Service or
Denial of Security? In Proceedings of the 2007 ACM Conference on Computer and
Communications Security, CCS 2007 (2007).
[14] Boyle, E., Goldwasser, S., and Tessaro, S. Communication Locality in Secure
Multi-party Computation - How to Run Sublinear Algorithms in a Distributed
Setting. In Theory of Cryptography - 10th Theory of Cryptography Conference,
TCC 2013 (2013).
[15] Burra, S. S., Larraia, E., Nielsen, J. B., Nordholt, P. S., Orlandi, C., Orsini,
E., Scholl, P., and Smart, N. P. High Performance Multi-Party Computation for
Binary Circuits Based on Oblivious Transfer. Cryptology ePrint Archive, Report
2015/472, 2015.
[16] Cangialosi, F., Levin, D., and Spring, N. Ting: Measuring and Exploiting
In Proceedings of the 2015 ACM Internet
Latencies Between All Tor Nodes.
Measurement Conference, IMC 2015 (2015).
[17] Chakravarty, S., Barbera, M. V., Portokalidis, G., Polychronakis, M., and
Keromytis, A. D. On the Effectiveness of Traffic Analysis against Anonymity Net-
works Using Flow Records. In Passive and Active Measurement - 15th International
Conference, PAM 2014 (2014).
[18] Chou, T., and Orlandi, C. The Simplest Protocol for Oblivious Transfer. In
Progress in Cryptology - LATINCRYPT 2015 (2015).
[19] Choudhury, A. Breaking the O(n|C |) Barrier for Unconditionally Secure
Asynchronous Multiparty Computation - (Extended Abstract). In Progress in
Cryptology - INDOCRYPT 2013 (2013).
[20] Choudhury, A., Patra, A., and Smart, N. P. Reducing the Overhead of MPC over
a Large Population. In Security and Cryptography for Networks - 9th International
Conference, SCN 2014 (2014).
[21] Corrigan-Gibbs, H., and Boneh, D. Prio: Private, Robust, and Scalable Compu-
tation of Aggregate Statistics. In 14th USENIX Symposium on Networked Systems
Design and Implementation, NSDI 2017 (2017).
[22] Damgård, I., Keller, M., Larraia, E., Pastro, V., Scholl, P., and Smart, N. P.
Practical Covertly Secure MPC for Dishonest Majority - Or: Breaking the SPDZ
Limits. In Computer Security - ESORICS 2013 (2013).
[23] Damgård, I., Pastro, V., Smart, N. P., and Zakarias, S. Multiparty Computation
from Somewhat Homomorphic Encryption. In Advances in Cryptology - CRYPTO
2012 (2012).
[24] Dani, V., King, V., Movahedi, M., and Saia, J. Brief announcement: Breaking
the O(nm) Bit Barrier: Secure Multiparty Computation with a Static Adversary.
In ACM Symposium on Principles of Distributed Computing, PODC ’12 (2012).
[25] Dani, V., King, V., Movahedi, M., and Saia, J. Quorums Quicken Queries: Effi-
cient Asynchronous Secure Multiparty Computation. In Distributed Computing
and Networking - 15th International Conference, ICDCN 2014 (2014).
[26] Dingledine, R., Mathewson, N., and Syverson, P. F. Tor: The Second-
Generation Onion Router. In Proceedings of the 13th USENIX Security Symposium
(2004).
[27] Durand, M., and Flajolet, P. Loglog Counting of Large Cardinalities (Extended
Abstract). In Algorithms - ESA 2003 (2003).
[28] Dwork, C., and Roth, A. The Algorithmic Foundations of Differential Privacy.
Foundations and Trends in Theoretical Computer Science 9, 3-4 (2014).
[29] Elahi, T., Bauer, K. S., AlSabah, M., Dingledine, R., and Goldberg, I. Changing
of the Guards: A Framework for Understanding and Improving Entry Guard
Selection in Tor. In Proceedings of the 11th annual ACM Workshop on Privacy in
the Electronic Society, WPES 2012 (2012).
[30] Elahi, T., Danezis, G., and Goldberg, I. PrivEx: Private Collection of Traffic
Statistics for Anonymous Communication Networks. In Proceedings of the 2014
ACM SIGSAC Conference on Computer and Communications Security (2014).
[31] Fenske, E., Mani, A., Johnson, A., and Sherr, M. Distributed Measurement with
Private Set-Union Cardinality. In Proceedings of the 2017 ACM SIGSAC Conference
on Computer and Communications Security, CCS 2017 (2017).
[32] Frederiksen, T. K., Keller, M., Orsini, E., and Scholl, P. A Unified Approach
to MPC with Preprocessing Using OT. In Advances in Cryptology - ASIACRYPT
2015 (2015).
[33] Goldreich, O., Micali, S., and Wigderson, A. How to Play any Mental Game
or A Completeness Theorem for Protocols with Honest Majority. In Proceedings
of the 19th Annual ACM Symposium on Theory of Computing (1987).
[34] Goldwasser, S., and Lindell, Y. Secure Multi-Party Computation without
Agreement. J. Cryptology 18, 3 (2005).
[35] Hazay, C., Orsini, E., Scholl, P., and Soria-Vazqez, E. Concretely Efficient
Large-Scale MPC with Active Security (or, TinyKeys for TinyOT). In Advances
in Cryptology - ASIACRYPT 2018 (2018).
[36] Hazay, C., Orsini, E., Scholl, P., and Soria-Vazqez, E. TinyKeys: A New
Approach to Efficient Multi-Party Computation. In Advances in Cryptology -
CRYPTO 2018 (2018).
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom629[37] Heule, S., Nunkesser, M., and Hall, A. HyperLogLog in Practice: Algorithmic
Engineering of a State of The Art Cardinality Estimation Algorithm. In Joint
2013 EDBT/ICDT Conferences, EDBT ’13 Proceedings (2013).
[64] Sun, Y., Edmundson, A., Feamster, N., Chiang, M., and Mittal, P. Counter-
RAPTOR: Safeguarding Tor Against Active Routing Attacks. In 2017 IEEE Sym-
posium on Security and Privacy, SP 2017 (2017).
[38] Ishai, Y., Ostrovsky, R., and Zikas, V. Secure Multi-Party Computation with
[65] Wails, R., Johnson, A., Starin, D., Yerukhimovich, A., and Gordon, S. D.
Identifiable Abort. In Advances in Cryptology - CRYPTO 2014.
Stormy: Statistics in Tor by Measuring Securely. Tech. rep., 2019.
[39] Jaggard, A. D., and Syverson, P. Onions in the Crosshairs: When The Man
really is out to get you. In Proceedings of the 2017 on Workshop on Privacy in the
Electronic Society (2017).
[40] Jansen, R., Bauer, K. S., Hopper, N., and Dingledine, R. Methodically Modeling
the Tor Network. In 5th Workshop on Cyber Security Experimentation and Test,
CSET ’12 (2012).
[41] Jansen, R., and Hopper, N. Shadow: Running Tor in a Box for Accurate and
Efficient Experimentation. In 19th Annual Network and Distributed System Security
Symposium, NDSS 2012 (2012).
[42] Jansen, R., and Johnson, A. Safely Measuring Tor. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security (2016).
[43] Jansen, R., Juárez, M., Galvez, R., Elahi, T., and Díaz, C. Inside Job: Applying
In 25th Annual Network and
Traffic Analysis to Measure Tor from Within.
Distributed System Security Symposium, NDSS 2018 (2018).
[44] Jansen, R., Tschorsch, F., Johnson, A., and Scheuermann, B. The Sniper
Attack: Anonymously Deanonymizing and Disabling the Tor Network. In 21st
Annual Network and Distributed System Security Symposium, NDSS 2014 (2014).
[45] Johnson, A., Jansen, R., Hopper, N., Segal, A., and Syverson, P. PeerFlow:
Secure Load Balancing in Tor. Proceedings on Privacy Enhancing Technologies
2017, 2 (2017).
[46] Johnson, A., Jansen, R., Jaggard, A. D., Feigenbaum, J., and Syverson, P.
Avoiding The Man on the Wire: Improving Tor’s Security with Trust-Aware Path
Selection. In 24th Annual Network and Distributed System Security Symposium,
NDSS 2017 (2017).
[47] Johnson, A., Wacek, C., Jansen, R., Sherr, M., and Syverson, P. F. Users Get
Routed: Traffic Correlation on Tor by Realistic Adversaries. In 2013 ACM SIGSAC
Conference on Computer and Communications Security, CCS’13 (2013).
[48] Keller, M., Orsini, E., and Scholl, P. Actively Secure OT Extension with
Optimal Overhead. In Advances in Cryptology - CRYPTO 2015 (2015).
[49] Keller, M., Orsini, E., and Scholl, P. MASCOT: Faster Malicious Arithmetic
Secure Computation with Oblivious Transfer. In Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications Security (2016).
[50] Khattak, S., Fifield, D., Afroz, S., Javed, M., Sundaresan, S., McCoy, D.,
Paxson, V., and Murdoch, S. J. Do You See What I See? Differential Treatment
of Anonymous Users. In 23rd Annual Network and Distributed System Security
Symposium, NDSS 2016 (2016).
[51] Kissner, L., and Song, D. X. Privacy-Preserving Set Operations. In Advances in
Cryptology - CRYPTO 2005 (2005).
[52] Kolesnikov, V., Sadeghi, A., and Schneider, T. Improved Garbled Circuit Build-
ing Blocks and Applications to Auctions and Computing Minima. In Cryptology
and Network Security, 8th International Conference, CANS 2009 (2009).
[53] Mani, A., and Sherr, M. HisTorϵ : Differentially Private and Robust Statistics