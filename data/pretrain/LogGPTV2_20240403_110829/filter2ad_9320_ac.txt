查看该函数，我们可以看到它需要host_priv端口作为参数，因此除了满足所有沙盒检查之外，执行此调用还需要root权限。host_get_special_port函数从realhost.special[node]得到端口值并返回给调用者。  
回到指针检查，如果我们可以重新映射内核任务，将其写入未使用的端口空间，即realhost.special[4]，然后调用host_get_special_port(4)，这应该就可以得到可用的内核任务。  
[Siguza](https://twitter.com/Siguza)编写的cl0ver中的以下代码就是这样做的。  
该技术也称为hsp4 patch，广泛用于最近的一些越狱中。
## 伪造任务端口
最近一些越狱中使用的最常见技术之一是使用伪造的端口。内核以为是端口，但是实际是用户控制的内存空间。然后使用某些API可以从内核中提取数据。  
让我们看一下osfmk/ipc/ipc_port.h中定义的端口结构体。  
第一个成员是ipc_object，可以在osfmk/ipc/ipc_object.h中找到其定义。  
第一个成员是io_bits，可以在osfmk/ipc/ipc_object.h中找到这些位的详细信息。  
需要设置IO_BITS_ACTIVE以确保该对象存活。IO_BITS_OTYPE指定对象类型。IO_BITS_KOTYPE指定端口类型，是一个任务端口或时钟端口等。创建伪造的端口时需要在io_bits中指定这些值。完整列表可以在osfmk/kern/ipc_kobject.h中找到。  
设置端口的io_bits如下所示。  
ipc_object的io_references也需要被设置为不为0的值确保该对象不释放。  
回到端口结构体，另一个重要成员是struct ipc_space *
receiver，它指向ipc_space结构体。任务的ipc_space结构体定义其IPC功能。每个IPC功能都由一个ipc_entry表示，并放在一个表中，ipc_space结构体中的is_table指向该表。is_table中的端口权限或功能为16位，其名称实际上是is_table的索引。重要的是注意在内核中，端口权限(mach_port_t)通过传递指向适当的端口数据结构体(ipc_port_t)的指针来表示。  
ipc_space是非常重要的结构体，因此，大多数EXP程序都会寻找内核ipc_space以便获得适当的(但仍为假的)内核任务端口。方法是将ipc_space_kernel复制到新的内存，并使假的端口的receiver指向该内存。  
根据io_bits中设置的kobject类型，kobject指向不同的数据结构。因此如果伪造任务端口则需要将kobject指向struct
task，如果是时钟，则指向struct clock。  
下面是async_wake EXP中相关的代码。  
想了解更多详细信息，我强烈建议查看[CanSecWest的演讲](https://www.slideshare.net/i0n1c/cansecwest-2017-portal-to-the-ios-core)。
## pid_for_task()任意读取
如前所述，pid_for_task()将给出相应任务的PID。假设p_pid的偏移量为0x10，并且假设要读取的地址为addr，则可以创建一个伪造端口，然后将其关联到假的任务，使得该任务中的bsd_info为addr-0x10。  
下面是voucher_swap EXP中相关的代码。  
调用两次就可以读取64bit。  
注意偏移量会随着iOS版本以及设备的不同而变化。这些偏移量既可以通过查看内核源代码来找到，也可以通过查看kernelcache文件来找到。  
此技术非常强大，可一次读取4个字节的内核内存。还可以用该函数找到内核偏移。需要做的仅仅是每次向后读取四个字节的内核内存，直到获得魔术值0xfeedfacf为止。该地址是内核基地址，减去用IDA或Hopper打开kernelcache时的起始地址就得到了偏移量。下面是Yalu
EXP中相关的代码。  
获得了内核基地址就可以在内核内存中找到一些重要的结构体，例如`extern struct proclist
allproc;`。可以在/bsd/sys/proc_internal.h中找到它。即使存在KASLR，它相对内核基地址的偏移总是固定的。正如我们从内核代码中看到的那样，该结构体包含进程的列表。也可以使用`jtool2
–analyze`命令找到符号地址，因为Apple错误地发布了含有符号的kernelcache。  
然后，可以再次使用pid_for_task()来遍历这些结构体，通过检查pid=getpid()找到当前proc结构体(这样我们以后可以更改当前proc的cred以逃逸沙盒)，并通过检查pid=0来找到内核proc结构体(这样我们就可以获得内核proc的cred，找到kernel
task，ipc_space_kernel等)。  
## 堆分配基础
下面是关于iOS中堆分配的非常简短的讨论。在iOS中，堆内存分为多个zone。相同大小的分配使用相同的zone，除非某些对象具有自己的特殊zone(ports，vouchers等)。这些zone随着分配对象增多而增长，并且从zone
map中获得新页。在macOS上，可以使用zprint命令看到分配的zone。许多堆分配技术在iOS中仍然相同。另一件事是要注意，iOS也具有zone垃圾回收。  
如上所述，某些对象具有自己的特殊zone。zone是固定大小的数据块的集合，可以对其进行快速分配和释放。例如，在下图中，我们可以看到很多IPC对象，包括ports，vouchers等都有自己的zone。因此如果释放一个voucher那么将无法使用另一种对象占用释放的内存，除非触发zone垃圾回收并将包含该地址的页移动到其它位置，然后再分配另一种对象。  
在最近的几个iOS版本中对堆采取了很多加固措施。我强烈建议阅读这个Stefan
Esser关于iOS内核堆的[PPT](https://gsec.hitb.org/materials/sg2016/D2%20-%20Stefan%20Esser%20-%20iOS%2010%20Kernel%20Heap%20Revisited.pdf)，你也可以阅读内核源代码。可以从osfmk/kern/zalloc.c开始，其中有一些堆分配的注释。  
最近用于heap
spray的常用技术之一是通过发送带有选项MACH_MSG_OOL_PORTS_DESCRIPTOR的Mach消息，以端口指针数组填充内存。这将调用ipc/ipc_kmsg.c中的ipc_kmsg_copyin_ool_ports_descriptor，它会调用kalloc(ports_length)将端口指针填充到堆中。在voucher_swap
EXP中可以看到这样做的好处：虽然分配端口会将它们放入ipc.port
zone，但是如果是端口指针就不是这样，因此可以使用端口指针占用释放的对象。用端口其实也可以，因为进行足够的喷射之后能够迫使内核进行垃圾回收并从zone
map中分配新页，其中可能包括释放的对象。本系列的第2部分将对此进行讨论。
    mach_msg_descriptor_t *
        ipc_kmsg_copyin_ool_ports_descriptor(
            mach_msg_ool_ports_descriptor_t *dsc,
            mach_msg_descriptor_t *user_dsc,
            int is_64bit,
            vm_map_t map,
        .....................
            dsc->address = NULL;  /* for now */
            data = kalloc(ports_length);
            if (data == NULL) {
                *mr = MACH_SEND_NO_BUFFER;
                return NULL;
            }
## 指针验证检查和CoreTrust
ARM 8.3指令集添加了一个称为PAC(Pointer Authentication
Check，指针验证检查)的新功能，目的是检查指针的完整性。它将加密签名附加到指针值里未使用的位中，然后在使用指针之前验证这些签名。由于攻击者没有用于为这些指针创建签名的密钥，因此无法创建有效的指针。  
另一方面，CoreTrust是一个单独的内核扩展(com.apple.kext.CoreTrust)，它不允许自签名二进制文件(jtool2
-sign)在设备上运行。以前，Apple Mobile File Integrity
Kext(AMFI.kext)与用户态amfid守护程序一起检查代码签名。可以通过将代码签名哈希注入AMFI trust cache，hook
amfid异常端口并允许代码继续执行等多种方式来绕过。CoreTrust施加了一些其他检查，这些检查仅允许Apple签名的二进制文件在设备上运行。
## 总结
在本文中，我们研究了iOS安全的一些基础知识，它们将作为接下来两篇文章的基础。下一篇文章将详细讨论voucher_swap，而第三部分将讨论越狱。
## 参考文献
1.Project Zero Issue tracker -   
2.iOS 10 - Kernel Heap Revisited -  
3.Mac OS X Internals: A Systems Approach -   
4.MacOS and iOS Internals, Volume III: Security & Insecurity:
5.CanSecWest 2017 - Port(al) to the iOS Core -