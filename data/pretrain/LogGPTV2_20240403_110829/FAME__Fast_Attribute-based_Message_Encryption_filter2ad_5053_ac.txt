the help of a game ExptΠ,A (λ, b) between a challenger Chal and
an adversary A, where Chal gets both 1λ and b, and A gets 1λ.
• (setup.) Chal runs Setup(1λ) of Π to obtain pk and msk, and
gives pk to A.
• (key query.) A sends a set of attributes S. Chal then runs
KeyGen(msk, S) to obtain a key, which is returned to A. This
step is repeated as many times as A desires.
• (challenge.) A submits two messages msg0, msg1 and an
access structure A⋆. Chal then runs Encrypt(pk, A⋆, msgb)
to get a ciphertext, which is returned to A.
• (key query.) This phase is same as the second one.
A outputs a bit at the end of the game, which is defined to be the
game’s output. It is required that for every S queried by A, S (cid:60) A⋆
(otherwise, b can be trivially guessed).
Π
secure if for all PPT adversaries A,
Definition 2.3. A CP-ABE scheme Π is called fully or adaptively
(λ) :=(cid:12)(cid:12)Pr[ExptΠ,A(λ, 0) = 1] − Pr[ExptΠ,A(λ, 1) = 1](cid:12)(cid:12)
AdvA
is negligible in λ.
2.4 Bi-linear maps and assumption
A map or pairing f from two source groups X and Y to a target
group T, all three of them multiplicative and of size ℓ, is called
bi-linear if for all a, b ∈ Z, x ∈ X, y ∈ Y, it holds that f (xa, yb) =
f (x, y)ab. Further, f is non-degenerate if f (x, y) = 1 implies that
either x = 1 or y = 1. A pairing is asymmetric or Type-III if
no efficiently computable homomorphism exists between the two
source groups [25].
Let GroupGen be an asymmetric pairing group generator that
on input 1λ, outputs description of three groups G, H, GT of prime
order p = Θ(λ) equipped with a non-degenerate efficiently com-
putable bi-linear map e : G × H → GT . It also outputs generators д
and h for G and H, respectively.
Definition 2.4 (Decisional linear assumption). An asymmetric
pairing group generator GroupGen satisfies the decisional linear
assumption (DLIN) if for all PPT adversaries A,
(cid:12)(cid:12)(cid:12)Pr[A(1λ, par, D,T0) = 1]−
AdvA
DLIN(λ) :=
Pr[A(1λ, par, D,T1) = 1](cid:12)(cid:12)(cid:12)
is negligible in λ, where par := (p, G, H, GT , e, д, h) ← GroupGen(1λ);
a1, a2 ←R Z∗
p; s1, s2, s ←R Z; D := (дa1 , дa2 , ha1 , ha2 , дa1s1 , дa2s2 ,
ha1s1 , ha2s2); T0 := (дs1+s2 , hs1+s2); T1 := (дs , hs).
We point out that there are different versions of DLIN on asym-
metric groups. In sDLIN, an adversary is given half of the terms
from above: either all from G or from H [26]. Sometimes a mix
of terms from the two groups is used [30]. Our version is most
similar to the one in Libert et al. [45, Appendix I]. We need such an
assumption because our ciphertexts and keys have elements from
both the groups, which is why SXDH does not work. Note that it is
generically no stronger than the DLIN assumption on symmetric
groups [17].
One can also define a variant of the k-linear family of assump-
tions [54] in a manner similar to Definition 2.4. Our ABE schemes
can in fact be generalized to work for any k ≥ 2 and the security
would then follow from the corresponding assumption. However,
the schemes’ complexity would roughly increase linearly with k.
We have implemented the general version of the scheme [2] but
consider only the most efficient one here (for k = 2).
2.5 Representing group elements
Following [19, 22], we use [x]1, [y]2 and [z]T to denote дx , hy and
e(д, h)z, respectively, for д ∈ G and h ∈ H which will be clear from
context. If v is a vector given by (v1, v2, . . . , vn)T then [v]1 means
(дv1 , дv2 , . . . , дvn)T. [M]1 for a matrix M is defined similarly. These
operations are defined in the groups H and GT in an analogous
manner. Finally, e([A]1,[B]2) for two matrices A, B is defined as
[ATB]T .
6
a1
0
1
 ,
0
a2
1
(cid:21)
(cid:20)s1
s2
and
,
s1
s2
s
 ,
Observe that given [U]1 for a matrix U of size a × b, it is straight-
forward to compute [UV]1 for any matrix V of size b × c by doing
abc exponentiations and ac(b − 1) multiplications in the worst case.
If we define A, s and s′ to be
respectively, then using the notation just described, we can state
the DLIN assumption succinctly as
([A]1,[A]2,[As]1,[As]2) ≈ ([A]1,[A]2,[s′]1,[s′]2),
where ≈ denotes computational indistinguishability. (It is implicit
that an adversary also gets par as an input.) We use this succinct
version in the rest of the paper.
3 FAME: OUR CP-ABE SCHEME
In this section, we give a formal description of our ciphertext-policy
ABE scheme Fame. The scheme uses a hash function H which maps
arbitrary binary strings to elements of the group G. In the security
proof, H will be modeled as a random oracle.
Please note that the description of Fame is not intended to make
the connections to CGW [19] explicit. In fact, we refrain from using
the shorthand for group representation (widely used in CGW and
described in Section 2.5) at this point so that the reader can quickly
estimate the complexity of the scheme in terms of the size of each
component, number of operations required to compute them, etc.
When we set out to prove security of Fame afterwards (Section 4),
we will present an alternate formulation of its algorithms along the
lines of CGW by re-interpreting the outputs of random oracle.
In Fame, two types of inputs will be given to H: inputs of the
form (x, ℓ, t) or that of the form (j, ℓ, t), where x is an arbitrary
string, j is a positive integer, ℓ ∈ {1, 2, 3} and t ∈ {1, 2}. For sim-
plicity, we represent these two inputs as xℓt and 0jℓt, respectively,
appending 0 at the beginning of the second one so that it is not
confused with the first. We assume that the inputs are appropriately
encoded so that no two different tuples collide. Figure 3.1 describes
the scheme.
There are several points to note about Fame. First, every cipher-
text and key has elements from both G and H. (As far as we know,
this feature is unique to our scheme.) In particular, ct0 has 3 ele-
ments from H, ct1, . . . , ctn1 have 3 elements each from G, and ct′
has one element from GT . (Though the time taken to generate a
ciphertext depends on the number of columns n2 in M, the size of
the ciphertext does not.) Also, sk0 has 3 elements from H and sky,
sk′ have 3 elements each from G, for all y ∈ S. Thus, our scheme
is mainly comprised of elements from G and the time taken to
generate ciphertexts and keys is determined by the cost of group
operations in G.
Also observe that the decryption procedure is doing only 6 pair-
ing operations, but a large number of exponentiations in the source
groups. Fortunately, all these exponentiations are in the faster group
G, thus bringing down the decryption time considerably. Moreover,
if we use Lewko-Waters’ approach to convert Boolean formulae
into MSPs (as discussed in §2.1) then the reconstruction coefficients
γi are either 0 or 1. As a result, there will be no exponentiations at
all during decryption—just multiplications in G.
• Setup(1λ) Run GroupGen(1λ) to obtain (p, G, H, GT , e, д, h). Pick a1, a2 ←R Z∗
p and d1, d2, d3 ←R Zp. Output
(h, H1 := ha1 , H2 := ha2 ,T1 := e(д, h)d1a1+d3 ,T2 := e(д, h)d2a2+d3)
as the public key pk. Also, pick b1, b2 ←R Z∗
p and output
(д, h, a1, a2, b1, b2, дd1 , дd2 , дd3)
as the master secret key msk.
• KeyGen(msk, S) Pick r1, r2 ←R Zp and compute
sk0
using h, b1, b2 from msk. For all y ∈ S and t = 1, 2, compute
:= H(y1t) b1r1
at
where σy ←R Zp. Set sky := (sky,1, sky,2, д−σy). Also, compute
sky,t
:=
(hb1r1 , hb2r2 , hr1+r2)
· H(y2t) b2r2
at
· H(y3t) r1 +r2
at
· д
σy
at ,
sk′
t
:= дdt · H(011t) b1r1
at
· H(012t) b2r2
at
· H(013t) r1 +r2
at
σ′
at
· д
2, дd3 · д−σ′). Output (sk0, {sky}y∈S , sk′) as the key.
for t = 1, 2, where σ ′ ←R Zp. Set sk′ = (sk′
• Encrypt(pk,(M, π), msg) Pick s1, s2 ←R Zp. Compute
ct0
1, sk′
using pk. Suppose M has n1 rows and n2 columns. Then, for i = 1, . . . , n1 and ℓ = 1, 2, 3, compute
:= H(π(i)ℓ1)s1 · H(π(i)ℓ2)s2 · n2
(cid:2)H(0jℓ1)s1 · H(0jℓ2)s2(cid:3)(M)i, j ,
cti, ℓ
:=
(H
s1
1 , H
s2
2 , hs1+s2)
where, recall that, (M)i, j denotes the (i, j)th element of M. Set cti := (cti,1, cti,2, cti,3). Also, compute
j=1
ct′
:= T
s1
1 · T
s2
2 · msg.
Output (ct0, ct1, . . . , ctn1 , ct′) as the ciphertext.
• Decrypt(pk, ct, sk) Recall that if the set of attributes S in sk satisfies the MSP (M, π) in ct, then there exists constants {γi}i∈I that
satisfy (2.1). Now, compute
num :=
ctγi
i,1, sk0,1
(cid:32)
1 ·
i∈I
ct′ · e
(cid:32)
(cid:33)
(cid:32)
(cid:32)
i∈I
· e
· e
(cid:33)
ctγi
i,2, sk0,2
2 ·
sk′
(cid:33)
· e
(cid:32)
i∈I
(cid:33)
3 ·
,
ctγi
i,3, sk0,3
(cid:33)
(cid:32)
den
:= e
sk′
,
and output num/den. Here sk0,1, sk0,2, sk0,3 denote the first, second and third elements of sk0; the same for ct0.
i∈I
i∈I
i∈I
skγi
π(i),2, ct0,2
· e
sk′
skγi
π(i),3, ct0,3
skγi
π(i),1, ct0,1
Figure 3.1: Fame: ciphertext-policy attribute-based encryption.
(cid:33)
Please see Appendix A for the correctness of Fame. We now
discuss some issues pertinent to the use of ABE schemes.
Encrypting large messages. As the reader may have noticed, the
plaintext data given to the encryption algorithm in Fame is an
element of the target group. In practice this data would be too
large to be encoded as a single element of GT , and it would be
very expensive to break it into small pieces and ABE encrypt each
piece separately. The standard method is to use a key encapsula-
tion mechanism (KEM) wherein a random element of GT is ABE
encrypted and hashed to derive a session key. This key is then used
to encrypt the plaintext data through a fast symmetric key scheme
like AES. Thus, the overhead of encrypting any amount of data via
an ABE scheme is reduced to the cost of just one application of ABE
encrypt. An even more efficient variant would simply hash T
s2
2
and use the result as the symmetric key—a very similar proof to
the one for Fame would show that this is a secure ABE-KEM.
s1
1 T
One-use restriction. As is true for all known fully secure schemes
secure under standard assumptions, our scheme requires the map-
ping π in an MSP to be an injective function, i.e., no two rows
should be mapped to the same attribute. This is commonly referred
to as the one-use restriction. 6 A common way of getting around
this problem, as suggested in many papers like [42, 57], is to have
k copies of each attribute in the universe for some fixed k chosen
at set-up. For example, ‘Title:Prof’ will be replaced by ‘Title:Prof:1’,
‘Title:Prof:2’, ..., ‘Title:Prof:k’. The downside of this transformation
is that the size of keys grows by a factor of k; but note that the
encryption and decryption time is not affected.7
6Kowalczyk and Lewko KP-ABE schemes [40] also have one-use restriction. The public
parameters in their scheme grow logarithmically rather than linearly in the bound
on attribute re-use, but ciphertexts still grow linearly. Their prime-order construction
was broken and has been removed from the full version.
7We could modify Fame to prevent a multiplicative increase in key-size by borrowing
ideas from the unbounded attribute re-use scheme in [5], but the security assumption
7
Non-monotonicity. Though monotonicity is a very natural prop-
erty for access structures (Section 2.1), non-monotonic policies can
also be useful. For example, a CS department may want to make a
certain set of files accessible to everybody except graduate students.
Fame can be made to support such policies by introducing new
attributes like ‘Title:Not-Grad’, but the problem is that a professor
in the department, for instance, must now get all attributes of the
type ‘Title:Not-*’, which could result in much larger keys. There are
only a handful of schemes in literature that support non-monotonic
access structures directly, with Ostrovsky et al. [48] KP-ABE being
the most popular one. Though these schemes are able to avoid the
‘Title:Not-*’ problem, they also fix the number of attributes any
ciphertext must have and require that the entire ciphertext be used
in every decryption (so that a user cannot pretend not to have a