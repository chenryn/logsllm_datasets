else {
// process exit
}
}
For process exit we have just the process ID we need to save, along with the header data common to all
events. First, we need to allocate storage for the full item representing this event:
Chapter 9: Process and Thread Notifications
272
auto info = (FullItem*)ExAllocatePoolWithTag(PagedPool,
sizeof(FullItem), DRIVER_TAG);
if (info == nullptr) {
KdPrint((DRIVER_PREFIX "failed allocation\n"));
return;
}
If the allocation fails, there is really nothing the driver can do, so it just returns from the callback.
Now it’s time to fill the generic information: time, item type and size, all of which are easy to get:
auto& item = info->Data;
KeQuerySystemTimePrecise(&item.Time);
item.Type = ItemType::ProcessExit;
item.Size = sizeof(ProcessExitInfo);
item.ProcessId = HandleToULong(ProcessId);
item.ExitCode = PsGetProcessExitStatus(Process);
PushItem(&info->Entry);
First, we dig into the data item itself (bypassing the LIST_ENTRY) with the item variable. Next, we
fill the header information: The item type is well-known, since we are in the branch handling a process
exit notification; the time can be obtained with KeQuerySystemTimePrecise that returns the current
system time (UTC, not local time) as a 64-bit integer counting from January 1, 1601 at midnight Universal
Time. Finally, the item size is constant and is the size of the user-facing data structure (not the size of the
FullItem).
Notice the item variable is a reference to the data; without the reference (&), a copy would
have been created, which is not what we want.
The KeQuerySystemTimePrecise API is available starting with Windows 8. For earlier
versions, the KeQuerySystemTime API should be used instead.
The specific data for a process exit event consists of the process ID and the exit code. The process ID is
provided directly by the callback itself. The only thing to do is call HandleToULong so the correct cast
is used to turn a HANDLE value into an unsigned 32-bit integer. The exit code is not given directly, but it’s
easy to retrieve with PsGetProcessExitStatus:
NTSTATUS PsGetProcessExitStatus(_In_ PEPROCESS Process);
All that’s left to do now is add the new item to the end of our linked list. For this purpose, we’ll define and
implement a function named AddItem in the Globals class:
Chapter 9: Process and Thread Notifications
273
void Globals::AddItem(LIST_ENTRY* entry) {
Locker locker(m_Lock);
if (m_Count == m_MaxCount) {
auto head = RemoveHeadList(&m_ItemsHead);
ExFreePool(CONTAINING_RECORD(head,
FullItem, Entry));
m_Count--;
}
InsertTailList(&m_ItemsHead, entry);
m_Count++;
}
AddItem uses the Locker we saw in earlier chapters to acquire the fast mutex (and release it when
the variable goes out of scope) before manipulating the linked list. Remember to set the C++ standard to
C++ 17 at least in the project’s properties so that Locker can be used without explicitly specifying the
type it works on (the compiler makes the inference).
We’ll add new items to the tail of the list. If the number of items in the list is at its maximum, the function
removes the first item (from the head) and frees it with ExFreePool, decrementing the item count.
This is not the only way to handle the case where the number of items is too large. Feel free to use other
ways. A more “precise” way might be tracking the number of bytes used, rather than number of items,
because each item is different in size.
We don’t need to use atomic increment/decrement operations in the AddItem function because
manipulation of the item count is always done under the protection of the fast mutex.
With AddItem implemented, we can call it from our process notify routine:
g_State.AddItem(&info->Entry);
Implement the limit by reading from the registry in DriverEntry. Hint: you can use APIs
such as ZwOpenKey or IoOpenDeviceRegistryKey and then ZwQueryValueKey. We’ll
look at these APIs more closely in chapter 11.
Chapter 9: Process and Thread Notifications
274
Handling Process Create Notifications
Process create notifications are more complex because the amount of information varies. The command
line length is different for different processes. First we need to decide what information to store for process
creation. Here is a first try:
struct ProcessCreateInfo : ItemHeader {
ULONG ProcessId;
ULONG ParentProcessId;
WCHAR CommandLine[1024];
};
We choose to store the process ID, the parent process ID and the command line. Although this structure
can work and is fairly easy to deal with because its size is known in advance.
What might be an issue with the above declaration?
The potential issue here is with the command line. Declaring the command line with constant size is simple,
but not ideal. If the command line is longer than allocated, the driver would have to trim it, possibly hiding
important information. If the command line is shorter than the defined limit, the structure is wasting
memory.
Can we use something like this?
struct ProcessCreateInfo : ItemHeader {
ULONG ProcessId;
ULONG ParentProcessId;
UNICODE_STRING CommandLine;
// can this work?
};
This cannot work. First, UNICODE_STRING is not normally defined in user mode headers. Secondly
(and much worse), the internal pointer to the actual characters normally would point to system space,
inaccessible to user-mode. Thirdly, how would that string be eventually freed?
Here is another option, which we’ll use in our driver:
Chapter 9: Process and Thread Notifications
275
struct ProcessCreateInfo : ItemHeader {
ULONG ProcessId;
ULONG ParentProcessId;
ULONG CreatingThreadId;
ULONG CreatingProcessId;
USHORT CommandLineLength;
WCHAR CommandLine[1];
};
We’ll store the command line length and copy the actual characters at the end of the structure, starting
from CommandLine. The array size is specified as 1 just to make it easier to work with in the code. The
actual number of characters is provided by CommandLineLength.
Given this declaration, we can begin implementation for process creation (CreateInfo is non-NULL):
USHORT allocSize = sizeof(FullItem);
USHORT commandLineSize = 0;
if (CreateInfo->CommandLine) {
commandLineSize = CreateInfo->CommandLine->Length;
allocSize += commandLineSize;
}
auto info = (FullItem*)ExAllocatePoolWithTag(
PagedPool, allocSize, DRIVER_TAG);
if (info == nullptr) {
KdPrint((DRIVER_PREFIX "failed allocation\n"));
return;
}
The total size for an allocation is based on the command line length (if any). Now it’s time to fill in the
fixed-size details:
auto& item = info->Data;
KeQuerySystemTimePrecise(&item.Time);
item.Type = ItemType::ProcessCreate;
item.Size = sizeof(ProcessCreateInfo) + commandLineSize;
item.ProcessId = HandleToULong(ProcessId);
item.ParentProcessId = HandleToULong(CreateInfo->ParentProcessId);
item.CreatingProcessId = HandleToULong(
CreateInfo->CreatingThreadId.UniqueProcess);
item.CreatingThreadId = HandleToULong(
CreateInfo->CreatingThreadId.UniqueThread);
The item size must be calculated to include the command line length.
Next, we need to copy the command line to the address where CommandLine begins, and set the correct
command line length:
Chapter 9: Process and Thread Notifications
276
if (commandLineSize > 0) {
memcpy(item.CommandLine, CreateInfo->CommandLine->Buffer, commandLineSize);
item.CommandLineLength = commandLineSize / sizeof(WCHAR); // len in WCHARs
}
else {
item.CommandLineLength = 0;
}
g_State.AddItem(&info->Entry);
The command line length is stored in characters, rather than bytes. This is not mandatory, of course, but
would probably be easier to use by user mode code. Notice the command line is not NULL terminated - it’s
up to the client not read too many characters. As an alternative, we can make the string null terminated
to simplify client code. In fact, if we do that, the command line length is not even needed.
Make the command line NULL-terminated and remove the command line length.
Astute readers may notice that the calculated data length is actually one character longer
than needed, perfect for adding a NULL-terminator. Why? sizeof(ProcessCreateInfo)
includes one character of the command line.
For easier reference, here is the complete process notify callback implementation:
void OnProcessNotify(PEPROCESS Process, HANDLE ProcessId,
PPS_CREATE_NOTIFY_INFO CreateInfo) {
if (CreateInfo) {
USHORT allocSize = sizeof(FullItem);
USHORT commandLineSize = 0;
if (CreateInfo->CommandLine) {
commandLineSize = CreateInfo->CommandLine->Length;
allocSize += commandLineSize;
}
auto info = (FullItem*)ExAllocatePoolWithTag(
PagedPool, allocSize, DRIVER_TAG);
if (info == nullptr) {
KdPrint((DRIVER_PREFIX "failed allocation\n"));
return;
}
auto& item = info->Data;
KeQuerySystemTimePrecise(&item.Time);
Chapter 9: Process and Thread Notifications
277
item.Type = ItemType::ProcessCreate;
item.Size = sizeof(ProcessCreateInfo) + commandLineSize;
item.ProcessId = HandleToULong(ProcessId);
item.ParentProcessId = HandleToULong(CreateInfo->ParentProcessId);
item.CreatingProcessId = HandleToULong(
CreateInfo->CreatingThreadId.UniqueProcess);
item.CreatingThreadId = HandleToULong(
CreateInfo->CreatingThreadId.UniqueThread);
if (commandLineSize > 0) {
memcpy(item.CommandLine, CreateInfo->CommandLine->Buffer,
commandLineSize);
item.CommandLineLength = commandLineSize / sizeof(WCHAR);
}
else {
item.CommandLineLength = 0;
}
g_State.AddItem(&info->Entry);
}
else {
auto info = (FullItem*)ExAllocatePoolWithTag(
PagedPool, sizeof(FullItem), DRIVER_TAG);
if (info == nullptr) {
KdPrint((DRIVER_PREFIX "failed allocation\n"));
return;
}
auto& item = info->Data;
KeQuerySystemTimePrecise(&item.Time);
item.Type = ItemType::ProcessExit;
item.ProcessId = HandleToULong(ProcessId);
item.Size = sizeof(ProcessExitInfo);
item.ExitCode = PsGetProcessExitStatus(Process);
g_State.AddItem(&info->Entry);
}
}
Providing Data to User Mode
The next thing to consider is how to provide the gathered information to a user-mode client. There are
several options that could be used, but for this driver we’ll let the client poll the driver for information
Chapter 9: Process and Thread Notifications
278
using a read request. The driver will fill the user-provided buffer with as many events as possible, until
either the buffer is exhausted or there are no more events in the queue.
We’ll start the read request by obtaining the address of the user’s buffer with Direct I/O (set up in
DriverEntry):
NTSTATUS SysMonRead(PDEVICE_OBJECT, PIRP Irp) {
auto irpSp = IoGetCurrentIrpStackLocation(Irp);
auto len = irpSp->Parameters.Read.Length;
auto status = STATUS_SUCCESS;
ULONG bytes = 0;
NT_ASSERT(Irp->MdlAddress);
// we're using Direct I/O
auto buffer = (PUCHAR)MmGetSystemAddressForMdlSafe(
Irp->MdlAddress, NormalPagePriority);
if (!buffer) {
status = STATUS_INSUFFICIENT_RESOURCES;
}
Now we need to access our linked list and pull items from its head. We’ll add this support to the Global
class by implementing a method that removed an item from the head and returns it. If the list is empty, it
returns NULL:
LIST_ENTRY* Globals::RemoveItem() {
Locker locker(m_Lock);
auto item = RemoveHeadList(&m_ItemsHead);
if (item == &m_ItemsHead)
return nullptr;
m_Count--;
return item;
}
If the linked list is empty, RemoveHeadList returns the head itself. It’s also possible to use IsListEmpty
to make that determination. Lastly, we can check if m_Count is zero - all these are equivalent. If there is
an item, it’s returned as a LIST_ENTRY pointer.
Back to the Read dispatch routine - we can now loop around, getting an item out, copying its data to the
user-mode buffer, until the list is empty or the buffer is full:
Chapter 9: Process and Thread Notifications
279
else {
while (true) {
auto entry = g_State.RemoveItem();
if (entry == nullptr)
break;
//
// get pointer to the actual data item
//
auto info = CONTAINING_RECORD(entry, FullItem, Entry);
auto size = info->Data.Size;
if (len Data, size);
len -= size;
buffer += size;
bytes += size;
ExFreePool(info);
}
}
return CompleteRequest(Irp, status, bytes);
Globals::RemoveItem is called to retrieve the head item (if any). Then we have to check if the
remaining bytes in the user’s buffer are enough to contain the data of this item. If not, we have to push
the item back to the head of the queue, accomplished with another method in the Globals class:
void Globals::AddHeadItem(LIST_ENTRY* entry) {
Locker locker(m_Lock);
InsertHeadList(&m_ItemsHead, entry);
m_Count++;
}
If there is enough room in the buffer, a simple memcpy is used to copy the actual data (everything except
the LIST_ENTRY to the user’s buffer). Finally, the variables are adjusted based on the size of this item and
the loop repeats.
Once out of the loop, the only thing remaining is to complete the request with whatever status and
information (bytes) have been accumulated thus far.
We need to take a look at the unload routine as well. If there are items in the linked list, they must be freed
explicitly; otherwise, we have a leak on our hands:
Chapter 9: Process and Thread Notifications
280
void SysMonUnload(PDRIVER_OBJECT DriverObject) {
PsSetCreateProcessNotifyRoutineEx(OnProcessNotify, TRUE);
LIST_ENTRY* entry;
while ((entry = g_State.RemoveItem()) != nullptr)
ExFreePool(CONTAINING_RECORD(entry, FullItem, Entry));
UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\\??\\sysmon");
IoDeleteSymbolicLink(&symLink);
IoDeleteDevice(DriverObject->DeviceObject);
}
The linked list items are freed by repeatedly removing items from the list and calling ExFreePool on
each item.
The User Mode Client
Once we have all this in place, we can write a user mode client that polls data using ReadFile and
displays the results.
The main function calls ReadFile in a loop, sleeping a bit so that the thread is not always consuming
CPU. Once some data arrives, it’s sent for display purposes:
#include 
#include 
#include 
#include 
#include "..\SysMon\SysMonPublic.h"
int main() {
auto hFile = CreateFile(L"\\\\.\\SysMon", GENERIC_READ, 0,
nullptr, OPEN_EXISTING, 0, nullptr);
if (hFile == INVALID_HANDLE_VALUE)