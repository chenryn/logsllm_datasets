# 堆利用系列之开篇
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
堆利用这块内容相对独立但是类型较多，希望本系列文章能够让读者掌握堆利用的一些通用方法，建立堆利用的基本知识体系。  
堆是一块需要动态管理的内存，glibc是实现堆管理的库，为了效率更高的管理堆，引入了很多机制，这就给利用堆破坏漏洞实现代码执行提供了很多攻击面。  
但是，相比于栈破坏的利用，堆本身就很复杂，需要理解堆的一些关键部分的工作原理，才能更好的写出利用代码，因此我们这篇文章先学习了解下堆的基本概念和关键实现原理。
## 关于libc的版本
malloc和calloc相关的代码都在libc中，但是不同libc版本，malloc的差异性可能会很大，导致需要利用不同的利用方式来针对同一种类型的漏洞。因此，在利用之前一定要搞清楚libc的版本，是uclibc还是glibc，以及具体的子版本号。
## Malloc Chunk
首先我们要学习一下Chunk的基本概念  
当我们在调用malloc的时候，就会返回一个指针指向一个chunk  
我们的测试代码
    #include 
    #include 
    #include 
    void main(void)
    {
    char *ptr;
    ptr = malloc(0x10);
    strcpy(ptr, "panda");
    }
我们可以看到在panda的前面是有一块描述区的，这一块也是chunk的一部分，我们可以把它叫做metadata部分，他主要是由一块标识前一个chunk大小的和一个表示当前chunk大小的部分组成。在64位中，一个标识的长度是8个字节，在32位中则是4个字节。
    0x0:    0x00     - Previous Chunk Size
    0x8:    0x21     - Chunk Size
    0x10:     "pada"     - Content of chunk
我们可能会发现，在本例中标识前一个块的大小的是0x0，这是什么意思，这个主要是根据chunk
size这个字段的标识0x21，说明前面一个紧邻的chunk是被使用了，因此previouschunksize这个字段实际上是上一个chunk的数据区部分。换句话说，根据chunk
size字段的最后一位的不同，chunk的结构的意义是不一样的，但是大小是不变的。
Chunk size字段的最后一位是标志着前面一块是否在使用的，1代表着在使用，0代表着没有使用
对于被释放的Chunk，他还有两个字段是用来指向在bin链表中相邻的chunk的，注意bin链表中相邻与实际上的相邻chunk是不一样的。有的bin链表是双向链表，需要使用fd和bk两个字段，有的链表是单向链表，只需要使用fd字段，bk无意义。
## Bins
heap中有各种各样的Bin数据结构，当一个chunk被释放了，会被bin数据结构记录，一般是一个链表。根据被释放的chunk的大小，将他们放到不同的bin中，主要有下面几种bin
  * Fast bin：
  * Unsorted bin
  * Small bin
  * Large bin
这个数据结构可以加快下一次分配chunk的时候更加迅速，直接在这些bin中先寻找合适的chunk
###  Fast bin
在x64中，Fastbin
chunk的大小是从0x20，到0x80。Fastbin共有7个链表组成，每个链表上维护的chunk的大小都是相同的，通过GEF的 heap bins
fast可以方便的查看各个fast bin链表上的情况
    ────────────────────── Fastbins for arena 0x7ffff7dd1b20 ──────────────────────
    Fastbins[idx=0, size=0x10]  ←  Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE)  ←  Chunk(addr=0x602030, size=0x20, flags=PREV_INUSE)
    Fastbins[idx=1, size=0x20]  ←  Chunk(addr=0x602050, size=0x30, flags=PREV_INUSE)
    Fastbins[idx=2, size=0x30]  ←  Chunk(addr=0x602080, size=0x40, flags=PREV_INUSE)
    Fastbins[idx=3, size=0x40]  ←  Chunk(addr=0x6020c0, size=0x50, flags=PREV_INUSE)
    Fastbins[idx=4, size=0x50]  ←  Chunk(addr=0x602110, size=0x60, flags=PREV_INUSE)
    Fastbins[idx=5, size=0x60]  ←  Chunk(addr=0x602170, size=0x70, flags=PREV_INUSE)
    Fastbins[idx=6, size=0x70]  ←  Chunk(addr=0x6021e0, size=0x80, flags=PREV_INUSE)
注意要分清楚Fast chunk和fast bin是不同的概念，fast chunk的意思是放在fast
bin链表上的chunk。fastbin本身实际上是一个数组，数组的每个元素是一个fast bin链表指针，fast
bin链表指针指向heap中的chunk的地址，而chunk中有fd指针，又指向了下一个free
chunk，因此这样就形成了一个单向链表。当插入chunk的时候是从头部开始插入的，就是先入后出的。
###  tcache
这个数据结构是在2.26版本中新引入的，每一个线程都会有一个tcache,目的是不需要再多线程中操作heap的时候给bin加锁，这样就可以更加的迅速。tcache是在分配chunk的时候的第一优先考虑的分配来源，甚至比fast
bin还要优先。  
tcache的数据结构与Fast bin类似，都是一个单向链表，都是先入后出的。相关的数据结构源码
    typedef struct tcache_entry
    {
    struct tcache_entry *next;
    /* This field exists to detect double frees.  */
    struct tcache_perthread_struct *key;
    } tcache_entry;
    typedef struct tcache_perthread_struct
    {
    uint16_t counts[TCACHE_MAX_BINS];
    tcache_entry *entries[TCACHE_MAX_BINS];
    } tcache_perthread_struct;
    static __thread bool tcache_shutting_down = false;
    static __thread tcache_perthread_struct *tcache = NULL;
`static __thread tcache_perthread_struct