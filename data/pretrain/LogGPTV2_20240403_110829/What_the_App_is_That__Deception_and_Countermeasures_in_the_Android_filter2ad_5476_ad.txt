### Trusted Indicator for User Interaction

We propose a trusted indicator on the device that reliably and continuously informs the user about the application with which they are interacting. The details of this solution will be discussed in Section VI.

### B. Results

We tested our tool on the following four sets of applications:

1. A set of 500 randomly downloaded apps from the Google Play Store (referred to as "benign1").
2. A set of 500 apps from the "top free" category on the Google Play Store (referred to as "benign2").
3. A set of 20 apps described as app-lockers in the Google Play Store (referred to as "app-locker").
4. A set of 1,260 apps from the Android Malware Genome project [22] (referred to as "malicious").

#### Table IV: Usage of Key Permissions and Techniques

The top part of Table IV shows the usage of five key permissions that apps need to request to carry out various GUI confusion attacks, for each of the four data sets used to evaluate our tool. From this data, it is clear that three out of the five permissions are frequently used by benign applications. Therefore, solely checking for these permissions is not sufficient for detection, as they are too common.

The bottom part of Table IV details how frequently apps call APIs associated with different techniques. A simplistic approach that flags an app as suspicious if it uses, at least once, an API to get information about the device's state and one to perform an attack vector would result in a high number of false positives. Specifically, this approach would classify 33 apps in the benign1 set (6.6%) and 95 in the benign2 set (19.0%) as suspicious.

#### Evaluation on Benign Sets

- **Benign1 Set**: Our tool flagged two apps as suspicious. Manual investigation revealed that these applications monitor the user's activity and, under specific conditions, block normal user interaction with the device. Although these samples do not perform a GUI confusion attack (as they do not mimic the appearance of another application), they are both app-lockers, and we expect our tool to report them.

- **Benign2 Set**: The tool detected 26 applications. Upon review, we found that:
  - Two are app-lockers.
  - Ten are chat or VOIP apps, which display custom notifications using a separate mechanism than the status bar (e.g., stealing focus on an incoming phone call).
  - Four are games with disruptive ads.
  - Four are "performance enhancers" (which monitor and kill background running apps and keep a persistent icon on the screen).
  - Two are anti-virus programs (which jump on top when a malicious app is detected).
  - One is an annoying keyboard app that jumps on top to offer a paid upgrade.
  - Three false positives were identified: two apps that could be used to take pictures and one browser. These apps satisfy the conditions used to flag potentially malicious behavior but do not interfere with the device’s GUI.

The difference in results between the benign2 and benign1 sets is due to the fact that popular apps are generally larger and more complex, calling a wider variety of APIs. Nonetheless, the total number of apps that require manual analysis is small, especially for the random set. Thus, an app store could use our system to pre-filter apps that can potentially launch GUI confusion attacks, followed by manual analysis to confirm or refute the findings.

#### Evaluation on App-Locker Set

To evaluate the detection capabilities and false negative rate of our tool, we downloaded a set of 20 apps described as app-lockers from the Google Play Store. Since these apps exhibit behavior similar to the attacks described in Section III, we expected our tool to detect all of them. Our tool detected 18 out of 20 samples. Manual investigation revealed that of the two undetected samples, one is currently inoperable, and the other has a data dependency between checking the running apps and launching the attack (we only check for dependency in the control flow).

#### Evaluation on Malicious Set

We tested our tool on the malicious set of 1,260 apps from the Android Malware Genome project [22]. Most current Android malware attempts to surreptitiously steal and exfiltrate data while remaining unnoticed. We detected 25 apps as suspicious. Upon manual review, we found that 21 of the detected samples belong to the DroidKungFu malware family, which aggressively displays an Activity on top of any other, asking the user to grant "superuser" privileges or enable "USB debugging." Due to code obfuscation, we could not confirm whether the other four samples were correct detections, so we count them as incorrect detections.

We also ran our tool on a sample of the svpeng [23] malware family, which is known to perform GUI confusion attacks. This sample detects when the official Google Play Store is opened and spawns an Activity mimicking the original "Enter card details" Activity. As expected, our tool detected this malicious sample. Additionally, we tested our tool on an Android ransomware sample (Android.Fakedefender) known to interfere with the GUI. Our tool correctly flagged the app as suspicious, as it uses an enhancing technique (detecting if the user is trying to uninstall it) and an attack vector (going on top of the uninstall Activity to prevent users from using it).

Finally, we used our tool to check for the "inescapable" fullscreen technique. Our tool did not find evidence of its usage in any of the analyzed sets, suggesting that removing this functionality will not break compatibility with existing applications.

### VI. UI Defense Mechanism

As mentioned, our defense approach includes a system designed to inform users and leave the final decision to them, leveraging the fact that the Android system is not fooled by GUI attacks. The root cause of these attacks is that users cannot easily determine with which application they are interacting. To address this, we propose simple modifications to the Android system to establish a trusted path to inform the user without compromising UI functionality.

#### Table VI: Examples of Deception Methods and Defense Systems

| Deception Method | Fernandes et al. [9] |
|------------------|----------------------|
| Keyboard input to the wrong app | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Custom input method to the wrong app (e.g., Google Wallet’s PIN entry) | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Covert app switch | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Faked app switch (through the back or power button) | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| “Sit and Wait” (passive appearance change) | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Similar-looking app icon and name, installed through the market | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Side-loaded app, with the same app icon and name (possibly, through repackaging) | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Confusing GUI elements added by other apps (intercepting or non-intercepting draw-over, toast messages) | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Presenting deceptive elements in non-immersive fullscreen mode | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |
| Presenting deceptive elements in immersive fullscreen mode | Off by default, requires user interaction: The protection is activated only if the user presses a specific key combination. |

This table highlights the methods of deception and whether the defense systems protect against them.