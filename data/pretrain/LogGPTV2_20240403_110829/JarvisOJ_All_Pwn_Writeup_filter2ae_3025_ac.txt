              if ( v26 )
              {
                *v26 = 0;
                v3 = set_str(argv1, nptra);
                store_into_list(g_list, argv1, (int)v3);
              }
            }
但 store_into_list() 函数寻址时是通过变量名之间的比较进行的，也即是即使 var add = “eval”
也是程序允许的，这样我们就可以控制函数指针了。因此直接把某个函数的 method 改成 shellcode 即可。
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_calc.exe/solve.py)
## Guess (300)
这个题目也更像一个逆向题，好在程序没有 strip，看起来比较清楚。
程序先建立了一个 socket，之后的输入输出均通过该 socket 进行。主要逻辑在 is_flag_correct 函数中，而漏洞也出在这里。
        value1 = bin_by_hex[flag_hex[2 * i]];
        value2 = bin_by_hex[flag_hex[2 * i + 1]];
这里使用了下标寻址的方法，flag_hex 是我们的输入，类型是 char *，通过构造负数就可以寻址到 bin_by_hex 上方
    -0000000000000198 flag_hex        dq ?                    ; offset
    -0000000000000190 given_flag      db 50 dup(?)
    -000000000000015E                 db ? ; undefined
    -000000000000015D                 db ? ; undefined
    -000000000000015C                 db ? ; undefined
    -000000000000015B                 db ? ; undefined
    -000000000000015A                 db ? ; undefined
    -0000000000000159                 db ? ; undefined
    -0000000000000158                 db ? ; undefined
    -0000000000000157                 db ? ; undefined
    -0000000000000156                 db ? ; undefined
    -0000000000000155                 db ? ; undefined
    -0000000000000154                 db ? ; undefined
    -0000000000000153                 db ? ; undefined
    -0000000000000152                 db ? ; undefined
    -0000000000000151                 db ? ; undefined
    -0000000000000150 flag            db 50 dup(?)
    -000000000000011E                 db ? ; undefined
    -000000000000011D                 db ? ; undefined
    -000000000000011C                 db ? ; undefined
    -000000000000011B                 db ? ; undefined
    -000000000000011A                 db ? ; undefined
    -0000000000000119                 db ? ; undefined
    -0000000000000118                 db ? ; undefined
    -0000000000000117                 db ? ; undefined
    -0000000000000116                 db ? ; undefined
    -0000000000000115                 db ? ; undefined
    -0000000000000114                 db ? ; undefined
    -0000000000000113                 db ? ; undefined
    -0000000000000112                 db ? ; undefined
    -0000000000000111                 db ? ; undefined
    -0000000000000110 bin_by_hex      db 256 dup(?)
    -0000000000000010                 db ? ; undefined
而 flag 就在 bin_by_hex 上方，这样如果我们构造 value1 = 0, value2 = flag[i]，就可以覆盖 flag[i]
了，这样就可以通过逐位覆盖 flag，根据不同的回显来爆破了。
王一航师傅对这道题目做过很详细的分析，[ _传送门_](https://www.jianshu.com/p/40f846d14450)
## HTTP (350)
这道题目也更像一个逆向，没有 pwn 常见的溢出等漏洞，而是直接可以命令执行
    __int64 __fastcall sub_40102F(const char *a1, char *a2, int a3)
    {
      char *v3; // rbx
      int v5; // [rsp+Ch] [rbp-34h]
      FILE *stream; // [rsp+20h] [rbp-20h]
      int i; // [rsp+2Ch] [rbp-14h]
      v5 = a3;
      stream = popen(a1, "r");                      // rce
      if ( stream )
      {
        for ( i = 0; ; ++i )
        {
          v3 = &a2[i];
          *v3 = fgetc(stream);
          if ( *v3 == -1 || v5 - 1 now = 0 && idx all )         // 2free
        {
          --POSTS->now;
          POSTS->block[idx].inuse = 0LL;
          POSTS->block[idx].len = 0LL;
          free(POSTS->block[idx].content);          // uaf
          puts("Done.");
        }
        else
        {
          puts("Invalid number!");
        }
      }
    }
在 add 和 edit 函数中，新申请的堆块是经过 0x80 对其的，即只能申请 0x80，0x100,0x180 … 这样的堆块。
可以有如下的思路：
  4. 先 leak 堆的地址
  5. 根据 leak 出的堆的地址进行 unlink
  6. unlink 后把 chunk_list 中的某一项改成 got（如atoi@got)，这样 show 就可以 leak libc，edit 就可以 hijack got
  7. 把 atoi@got 改成 system，然后发送 $0\0，sh\0 或 /bin/sh\0 即可 get shell
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_Guestbook2/exp.py)
## [XMAN]level6 (350)
同上，只不过是 32 位的
## [XMAN]level6_x64 (400)
同上
## [61dctf]hsys (400)
这个程序也很大，要耐心看。 程序中存在如下的结构体
    struct HACKER
    {
    	int id;
    	char name[40];
    	char *something;
    	int gender;
    	int age;
    }
程序给了 list, add, show, info, gender 和 exit 几个功能，通过看代码发现还有一个 del 的隐藏功能，只有 id 为 0
，即为 admin 的时候才能触发。
          if ( !strcmp(command, "del") )
          {
            if ( IDX )
            {
              v26 = printf("You must be the system administrator to use del command\n");
            }
            else if ( args && strlen(args) )
            {
              if ( delete(args) == -1 )
              {
                v16 = args;
                v23 = printf("hacker `%s` not found in system\n", args);
              }
              else
              {
                v16 = args;
                v14 = printf("hacker `%s` deleted from system\n", args);
                IDX = -1;
                v24 = v14;
              }
            }
            else
            {
              v25 = printf("usage: del \n");
            }
          }
再看 add 的功能，算法渣表示楞了很久才反应过来到这是一个 hash 表 orz。
    int __cdecl getIndex(const char *a1)
    {
      struct HACKER *v1; // ST18_4
      int v3; // [esp+1Ch] [ebp-1Ch]
      signed int i; // [esp+20h] [ebp-18h]
      unsigned int v5; // [esp+24h] [ebp-14h]
      size_t len; // [esp+28h] [ebp-10h]
      len = strlen(a1);
      if ( len >= 0x28 )
        return -1;
      v5 = getIdxByName(a1);
      v3 = v5;
      for ( i = 0; i name, a1) )
          return (v5 + i) % 1337;