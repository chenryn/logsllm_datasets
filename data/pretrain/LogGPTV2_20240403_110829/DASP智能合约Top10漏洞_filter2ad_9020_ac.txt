  * 在这第二个例子中，block.blockhash正被用来生成一个随机数。
  * 如果将该哈希值blockNumber设置为当前值block.number（出于显而易见的原因）并且因此设置为，则该哈希值未知0。
  * 在blockNumber过去设置为超过256个块的情况下，它将始终为零。
  * 最后，如果它被设置为一个以前的不太旧的区块号码，另一个智能合约可以访问相同的号码并将游戏合约作为同一交易的一部分进行调用。
    function play() public payable {
        require(msg.value >= 1 ether);
        if (block.blockhash(blockNumber) % 2 == 0) {
            msg.sender.transfer(this.balance);
        }
    }
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90)其他资源
> 在以太坊智能合约中预测随机数  
>  contracts-e5358c6b8620>
>
> 在以太坊随机  
> 
* * *
##
## 7.前台运行
也被称为检查时间与使用时间（TOCTOU），竞争条件，事务顺序依赖性（TOD）
> 事实证明，只需要150行左右的Python就可以获得一个正常运行的算法。————Ivan Bogatyy
  * 由于矿工总是通过代表外部拥有地址（EOA）的代码获得gas费用
  * 因此用户可以指定更高的费用以便更快地开展交易。
  * 由于以太坊区块链是公开的，每个人都可以看到其他人未决交易的内容。
  * 这意味着，如果某个用户正在揭示拼图或其他有价值的秘密的解决方案，恶意用户可以窃取解决方案并以较高的费用复制其交易，以抢占原始解决方案。
  * 如果智能合约的开发者不小心，这种情况会导致实际的和毁灭性的前端攻击。
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D)真实世界影响
> Bancor  
>  ethereum-api-d5e2bfd0d798>
>
> ERC-20  
>
>  RLM/>
>
> TheRun  
> 
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例
  1. 一个聪明的合约发布的RSA号（N = prime1 x prime2）。
  2. 对其submitSolution()公共功能的调用与权利prime1并prime2奖励来电者。
  3. Alice成功地将RSA编号考虑在内，并提交解决方案。
  4. 有人在网络上看到Alice的交易（包含解决方案）等待被开采，并以较高的gas价格提交。
  5. 由于支付更高的费用，第二笔交易首先被矿工收回。该攻击者赢得奖金。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90)其他资源
> 在以太坊智能合约中预测随机数  
>  contracts-e5358c6b8620>
>
> 虚拟和解的前卫，悲痛和危险  
>  virtual-settlement-part-1-8554ab283e97>
>
> Frontrunning Bancor  
> 
* * *
##
## 8.时间操纵
也被称为时间戳依赖
> 如果一位矿工持有合约的股份，他可以通过为他正在挖掘的矿区选择合适的时间戳来获得优势。———-Nicola Atzei，Massimo
> Bartoletti和Tiziana Cimoli
  * 从锁定令牌销售到在特定时间为游戏解锁资金，合约有时需要依赖当前时间。
  * 这通常通过Solidity中的block.timestamp别名或其别名完成now。
  * 但是，这个价值从哪里来？来自矿工！
  * 由于交易的矿工在报告采矿发生的时间方面具有回旋余地
  * 所以良好的智能合约将避免强烈依赖所宣传的时间。
  * 请注意，block.timestamp有时（错误）也会在随机数的生成中使用，如＃6所述。坏随机性。
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D)真实世界影响
> 政府  
>  survey/attacks.html#governmental>
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例
  1. 一场比赛在今天午夜付出了第一名球员。
  2. 恶意的矿工包括他或她试图赢得比赛并将时间戳设置为午夜。
  3. 在午夜之前，矿工最终挖掘该块。当前的实时时间“足够接近”到午夜（当前为该块设置的时间戳），网络上的其他节点决定接受该块。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B)代码示例
以下功能只接受特定日期之后的呼叫。由于矿工可以影响他们区块的时间戳（在一定程度上），他们可以尝试挖掘一个包含他们交易的区块，并在未来设定一个区块时间戳。如果足够接近，它将在网络上被接受，交易将在任何其他玩家试图赢得比赛之前给予矿工以太：
    function play() public {
        require(now > 1521763200 && neverPlayed == true);
        neverPlayed = false;
        msg.sender.transfer(1500 ether);
    }
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90)其他资源
> 对以太坊智能合约的攻击调查  
> 
>
> 在以太坊智能合约中预测随机数  
>  contracts-e5358c6b8620>
>
> 让智能合约变得更聪明  
> 
* * *
##
## 9.短地址攻击
也被称为或涉及非连锁问题，客户端漏洞
> 为令牌传输准备数据的服务假定用户将输入20字节长的地址，但实际上并未检查地址的长度。—-PawełBylica
  * 短地址攻击是EVM本身接受不正确填充参数的副作用。
  * 攻击者可以通过使用专门制作的地址来利用这一点，使编码错误的客户端在将它们包含在事务中之前不正确地对参数进行编码。
  * 这是EVM问题还是客户问题？是否应该在智能合约中修复？
  * 尽管每个人都有不同的观点，但事实是，这个问题可能会直接影响很多以太网。
  * 虽然这个漏洞还没有被大规模利用，但它很好地证明了客户和以太坊区块链之间的交互带来的问题。
  * 其他脱链问题存在：重要的是以太坊生态系统对特定的javascript前端，浏览器插件和公共节点的深度信任。
  * 臭名昭着的链外利用被用于Coindash ICO的黑客在他们的网页上修改了公司的以太坊地址，诱骗参与者将ethers发送到攻击者的地址。
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%8F%91%E7%8E%B0%E6%97%B6%E9%97%B4%E8%A1%A8)发现时间表
  * 2017/4/6————如何通过阅读区块链来找到1000万美元
  * 
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D)真实世界影响
> 未知交换（s）  
>  blockchain-6ae9d39fcd95>
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例
  1. 交易所API具有交易功能，可以接收收件人地址和金额。
  2. 然后，API transfer(address _to, uint256 _amount)使用填充参数与智能合约函数进行交互：它将12位零字节的地址（预期的20字节长度）预先设置为32字节长
  3. Bob（0x3bdde1e9fbaef2579dd63e2abbf0be445ab93f00）要求Alice转让他20个代币。他恶意地将她的地址截断以消除尾随的零。
  4. Alice使用交换API和Bob（0x3bdde1e9fbaef2579dd63e2abbf0be445ab93f）的较短的19字节地址。
  5. API用12个零字节填充地址，使其成为31个字节而不是32个字节。有效地窃取以下_amount参数中的一个字节。
  6. 最终，执行智能合约代码的EVM将会注意到数据未被正确填充，并会在_amount参数末尾添加丢失的字节。有效地传输256倍以上的令牌。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90)其他资源
> ERC20短地址攻击说明  
> 
>
> 分析ERC20短地址攻击  
> 
>
> 智能合约短地址攻击缓解失败  
>  failure/>
>
> 从标记中删除短地址攻击检查  
> 
* * *
##
## 10.未知的未知物
> 我们相信更多的安全审计或更多的测试将没有什么区别。主要问题是评审人员不知道要寻找什么。———Christoph Jentzsch
  * 以太坊仍处于起步阶段。
  * 用于开发智能合约的主要语言Solidity尚未达到稳定版本
  * 而生态系统的工具仍处于试验阶段。
  * 一些最具破坏性的智能合约漏洞使每个人都感到惊讶
  * 并且没有理由相信不会有另一个同样出乎意料或同样具有破坏性的漏洞。
  * 只要投资者决定将大量资金用于复杂而轻微审计的代码
  * 我们将继续看到新发现导致可怕后果。
  * 正式验证智能合约的方法尚不成熟，但它们似乎具有很好的前景，可以作为摆脱今天不稳定现状的方式。
  * 随着新类型的漏洞不断被发现，开发人员需要继续努力
  * 并且需要开发新工具来在坏人之前找到它们。
  * 这个Top10可能会迅速发展，直到智能合约开发达到稳定和成熟的状态。
* * *
##
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%8E%9F%E6%96%87%E5%9C%B0%E5%9D%80)