# Vhash (crypto 450p)
###ENG
[PL](#pl-version)
In the task we get access to a webpage where we can login as guest/guest and as a result we get a cookie containing:
`SOME_LONG_HEX_HASH|username=guest&date=2017-02-13T23:45:45+0000&secret_length=8&`
We also get to see the [source code](index.php) of the webpage and a [binary](vhash) which is used to generate  the hash value.
From analysis of the index page we can see that the hash value is generated with
```php
  function create_hmac($data) {
    return do_hash(SECRET . $data);
  }
 ```
So there is some secret glued in front of the cookie data and then `vhash` binary is execute on this input.
When the website is authenticating us with the cookie it takes the cookie data, calculates the hash again and compares it agains what is in the cookie.
The idea is that we can't modify the cookie value (eg, by setting username to `admin`) because the hash would have to be changed as well.
And we can't calculate the proper hash without knowing the secret bytes added by the server.
We notice that the server creates a map out of cookie parameters by parsing them in-order.
As a result if a certain property is defined more than once, only the last value will get stored:
```php
  $pairs = explode('&', $cookie);
  $args = array();
  foreach($pairs as $pair) {
    if(!strpos($pair, '='))
      continue;
    list($name, $value) = explode('=', $pair, 2);
    $args[$name] = $value;
  }
  $username = $args['username'];
```
So if we could append to the cookie `&username=administrator&` we would get past the security check!
Once we reverse engineer vhash binary and analyse it, we can see that it is actually prone to `Hash Length Extension` attack.
The general schema of the algorithm is:
1. Set initial state
2. Split input into blocks
3. For each block:
	- Take input block
	- Use `hash_update` to perform computations over the current state and input block
	- Save the results as new current state
4. Finalize the algorithm by using `hash_update` with a certain fixed block dependent only on length of already hashed input
5. Print current state as final hash
We know that the cookie we get from the page is in fact hashed value of `secret+cookie_payload+final_hash_block`.
If we now set this hash as `current state` of the hashing algorithm and perform `hash_update` with some additional payload we will actually get a proper hash value for `secret+cookie_payload+final_hash_block+additional_payload`!
And since we know exactly how long this payload is, we can also add here the new `final_hash_block2`, as a result getting a proper hash value of `secret+cookie_payload+final_hash_block+additional_payload+final_hash_block2`.
All of this without actually knowing the `secret` bytes at all, just the `state` of the algorithm.
Now let's think what server will do if we pass as cookie payload string of `cookie_payload+final_hash_block+additional_payload`.
The server will add secret bytes in front getting `secret+cookie_payload+final_hash_block+additional_payload` and then will hash it adding the final block at the end, which will result in `secret+cookie_payload+final_hash_block+additional_payload+final_hash_block2`.
And this is exactly the same thing as we mentioned before!
So by passing such input we can actually generate proper hash value without knowing the secret.
We rewritten the hash algorithm into C to be able to test is easily:
```c
#include 
#include 
#include 
#include 
struct vhash_ctx{
    uint32_t state[32];
};
inline unsigned int rol4(unsigned int value, int count) { return _rotl((unsigned int)value, count); }
void vhash_init(vhash_ctx *vctx)
{
    memcpy(vctx, "vhas", 4uLL);
    memcpy(&vctx->state[1], "h: r", 4uLL);
    memcpy(&vctx->state[2], "ock ", 4uLL);
    memcpy(&vctx->state[3], "hard", 4uLL);
    memcpy(&vctx->state[4], " 102", 4uLL);
    memcpy(&vctx->state[5], "4 bi", 4uLL);
    memcpy(&vctx->state[6], "t se", 4uLL);
    memcpy(&vctx->state[7], "curi", 4uLL);
    memcpy(&vctx->state[8], "ty. ", 4uLL);
    memcpy(&vctx->state[9], "For ", 4uLL);
    memcpy(&vctx->state[10], "thos", 4uLL);
    memcpy(&vctx->state[11], "e sp", 4uLL);
    memcpy(&vctx->state[12], "ecia", 4uLL);
    memcpy(&vctx->state[13], "l mo", 4uLL);
    memcpy(&vctx->state[14], "mome", 4uLL);
    memcpy(&vctx->state[15], "nts ", 4uLL);
    memcpy(&vctx->state[16], "when", 4uLL);
    memcpy(&vctx->state[17], " you", 4uLL);
    memcpy(&vctx->state[18], " nee", 4uLL);
    memcpy(&vctx->state[19], "d th", 4uLL);
    memcpy(&vctx->state[20], "robb", 4uLL);
    memcpy(&vctx->state[21], "ing ", 4uLL);
    memcpy(&vctx->state[22], "perf", 4uLL);
    memcpy(&vctx->state[23], "orma", 4uLL);
    memcpy(&vctx->state[24], "nce.", 4uLL);
    memcpy(&vctx->state[25], " Ask", 4uLL);
    memcpy(&vctx->state[26], " you", 4uLL);
    memcpy(&vctx->state[27], "r do", 4uLL);
    memcpy(&vctx->state[28], "ctor", 4uLL);
    memcpy(&vctx->state[29], " abo", 4uLL);
    memcpy(&vctx->state[30], "ut v", 4uLL);
    memcpy(&vctx->state[31], "hash", 4uLL);
}
void vhash_round(vhash_ctx *vctx)
{
    for (int i = 0; i state[i];
    for (int ia = 0; ia state[ia], ia);
        vctx->state[ia] = v1;
    }
    for (int ib = 0; ib state[ib] += vctx->state[((((unsigned int)((ib + 1) >> 31) >> 27) + (uint8_t)ib + 1) & 0x1F)
                                       - ((unsigned int)((ib + 1) >> 31) >> 27)];
    for (int ic = 0; ic state[ic] ^= vctx->state[((((unsigned int)((ic + 7) >> 31) >> 27) + (uint8_t)ic + 7) & 0x1F)
                                       - ((unsigned int)((ic + 7) >> 31) >> 27)];
    uint32_t t = vctx->state[0];
    for (int id = 0; id state[id] = vctx->state[id + 1];
    vctx->state[31] = t;
}
void vhash_update(vhash_ctx *vctx, uint32_t (*in)[4])
{
    for (int i = 0; i state[i] += (*in)[((((unsigned int)((uint64_t)i >> 32) >> 30) + (uint8_t)i) & 3)
    - ((unsigned int)((uint64_t)i >> 32) >> 30)];
    for (int ia = 0; ia state[ib] ^= (*in)[((((unsigned int)((uint64_t)ib >> 32) >> 30) + (uint8_t)ib) & 3)
    - ((unsigned int)((uint64_t)ib >> 32) >> 30)];
    for (int ic = 0; ic state[4 * i],
                vctx->state[4 * i + 1],
                vctx->state[4 * i + 2],
                vctx->state[4 * i + 3]);
    printf("\n");
}
void process_data(const char *data, vhash_ctx* vctx, uint32_t &size, uint32_t len) {
    int done = 0;
    size= 0;
    uint32_t block[4];
    while ( !done )
    {
        memset(block, 0, 0x10uLL);
        for (int i = 0; (unsigned int)i <= 0xF; ++i )
        {
            if ( size<len )
            {
                uint8_t inbyte = data[size];
                ++size;
                block[i / 4] |= inbyte << 8 * (3 - (char)i % 4);
            }
            else
            {
                done = 1;
                break;
            }
        }
        vhash_update(vctx, (uint32_t (*)[4])block);
        if(size==len){
            done=1;
        }
    }