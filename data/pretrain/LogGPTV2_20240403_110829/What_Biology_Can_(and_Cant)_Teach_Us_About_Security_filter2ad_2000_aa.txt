# What Biology Can (and Can't) Teach Us About Security

## Author
David Evans  
University of Virginia, Computer Science

## Presentation Details
**USENIX Security Symposium**  
San Diego, CA  
August 12, 2004

---

### Nature vs. the Real World (Computer Systems)

- **Competition for Limited Resources:**
  - In nature, organisms compete for limited resources.
  - Similarly, in computer systems, entities compete for computational resources.

- **Parasites and Resource Theft:**
  - Parasites in nature cannot reproduce on their own and steal resources from others.
  - In computer systems, malware often steals resources from legitimate users.

- **Evolutionary Solutions:**
  - Evolution can take millions of years to develop solutions to known security problems.
  - In contrast, computer systems need rapid and adaptive solutions to new threats.

- **Buffer Overflows:**
  - Despite advancements, buffer overflows remain a significant security issue after 25 years.
  - Linus Torvalds, in a 2003 New York Times interview, emphasized the responsibility of system providers to address such vulnerabilities.

---

### Brute Force Attacks

- **Image courtesy:** Leeson Photography

---

### Communication Integrity Attacks

- **Bolas Spider:**
  - The Bolas spider emits chemicals that mimic the pheromones of female moths.
  - It attracts and consumes male moths, demonstrating a specialized attack on communication integrity.
  - The spider can attract two different species of moths by adjusting its chemical emissions based on the time of night each moth is active.

- **Image credit:** Australian Museum

---

### Critter-in-the-Middle Attacks (CITM)

- **Blister Beetle (Meloefranciscanus):**
  - Beetle larvae aggregate to mimic the appearance and scent of a female bee.
  - Male bees are tricked into attempting to mate with the larvae, which then attach to the male.
  - When the male finds a real female bee, the beetle larvae are transferred, allowing them to feed on the pollen brought by the female for her offspring.
  - This example illustrates a sophisticated man-in-the-middle attack in nature.

- **References:** Hafernik and Saul-Gershenz (2000)
- **Images:** Iziko Museums of Cape Town

---

### Outline

- **Nature's Security Problems and Solutions:**
  - **Process:**
    - Evolution
  - **Programs (Genotype):**
    - The genetic code that results from evolution.
  - **Executions (Phenotype):**
    - The physical manifestations or behaviors produced by the genetic code.

---

### Insights from Neal Stephenson's Cryptonomicon

- **Existence of Self-Replicating Organisms:**
  - Self-replicating organisms have evolved over billions of years, surviving through competition and adaptation.
  - The success of these organisms is a testament to the robustness and adaptability of natural systems.

- **Survival and Reproduction:**
  - Every living organism is a product of a long line of successful ancestors.
  - The probability of survival and reproduction is a critical factor in the evolution of robust systems.

---

### Remarkable Existence

- **Ancestral Survival:**
  - Each of your ancestors survived long enough to reproduce, making your existence highly improbable.
  - The probability of surviving to reproduce is approximately 0.8, and over 3000 human generations, this equates to an extremely low chance.

---

### Two Important Clarifications

- **Reproduction as the Key:**
  - Survival is necessary but not sufficient; reproduction is the ultimate goal.
  - The unit of evolution is the gene, not the organism. Organisms are merely vessels for propagating genes.

- **Selfish Genes:**
  - Even when organisms appear to act unselfishly, the underlying genes are always selfish, prioritizing their own propagation.
  - Richard Dawkins' "The Selfish Gene" provides a detailed explanation of this concept.

---

### Evolutionary Computing

- **Genetic Algorithms:**
  - These algorithms have shown impressive results in solving optimization problems.
- **Genetic Programming:**
  - Demonstrated inventiveness, with examples including patentable inventions and infringing cases [Koza].

---

### Limitations of the Evolutionary Process

- **Slow and Unreliable:**
  - Evolution is a slow process, taking billions of years to develop solutions.
  - Most species become extinct, indicating a high failure rate.
  - The results of evolution are specific to the environment and may not be adaptable to different contexts.

---

### The Results of Evolution

- **Process:**
  - Evolution
- **Programs (Genotype):**
  - The genetic code that evolves.
- **Executions (Phenotype):**
  - The physical manifestations or behaviors produced by the genetic code.

---

### Brief History of Biology

- **Historical Perspectives:**
  - **1850s:** Life was thought to be about magic ("vitalism").
  - **1950s:** Life was understood to be about chemistry.
  - **2000s:** Life is now seen as being about information and computation.
  - **Classification Work:**
    - Aristotle (300 BC) introduced the concepts of genera and species.
    - Descartes (1641) attempted to explain life mechanically.
    - Schrödinger (1944) proposed that life is fundamentally about information.
    - Oswald Avery (1944) and Watson and Crick (1953) furthered our understanding of the genetic code and DNA structure.

---

### DNA Structure

- **Nucleotides:**
  - DNA is composed of four nucleotides: adenine (A), guanine (G), cytosine (C), and thymine (T).
  - Groups of three nucleotides (codons) encode amino acids and stop/start signals.
  - The double-stranded structure of DNA, with A-T and G-C base pairing, enables copying and transcription.

---

### Central Dogma of Biology

- **Transcription and Translation:**
  - DNA makes RNA, which leaves the nucleus and produces proteins.
  - Proteins, in turn, form the building blocks of organisms.
  - Image credit: University of Michigan Protein Database

---

### Shortest Known Life Program

- **Nanoarchaeum equitans:**
  - A small parasite with 490,885 bases (522 genes) ≈ 40 KB.
  - It lacks metabolic capacity and must steal resources from a host.
  - Contains complete components for information processing, including transcription, replication, and DNA repair enzymes.
  - Comparison: A simple C++ "Hello World" program compiled on Windows (bcc32) is 112,640 bytes, and on Linux (g++) is 11,358 bytes.

---

### The Human Genome

- **Size and Redundancy:**
  - The human genome consists of 3 billion base pairs.
  - Each nucleotide is 2 bits, resulting in a total size of 750 MB.
  - Highly redundant encoding reduces the effective size to about 250 MB.
  - Only about 5% of the genome is transcribed (exons), totaling around 12 MB.
  - The remaining 95% (introns) includes inactive sequences from viruses.

---

### Expressiveness of DNA

- **Human Genetic Variation:**
  - The genetic sequence for two humans differs by only 2 million bases, equivalent to less than 1/2 of a floppy disk.
  - This variation is less than 1% of the size of Windows 2000.

---

### Budget and Research

- **Funding for Biological Research:**
  - The budgets for NIH, NSF, and DARPA are substantial, yet challenges like curing cancer remain unsolved.
  - The complexity of biological systems and the need for interdisciplinary approaches contribute to the difficulty.

---

### Gene Interactions

- **Complexity in Gene Expression:**
  - Cells in an organism have the same DNA but perform different functions due to gene regulation.
  - Structural genes produce proteins, while regulator genes control the rate of transcription of other genes.
  - François Jacob and Jacques Monod (1961) described the genome as a coordinated program of protein synthesis.

---

### Yeast Protein Interactions

- **Saccharomyces cerevisiae:**
  - The yeast genome has 4825 proteins and approximately 15,000 interactions.
  - This complex network highlights the intricate nature of gene expression and protein interactions.

---

### Split Genes

- **Introns and Exons:**
  - Richard Roberts and Phillip Sharp (1977) discovered split genes, where exons (coding regions) are interspersed with introns (non-coding regions).
  - Exons can be spliced together in different ways, allowing for the production of hundreds of different proteins from a single gene.

---

### Challenges in Understanding the Human Genome

- **Complexity of Biological Systems:**
  - Biologists face the challenge of debugging highly concurrent, asynchronous, and type-unsafe programs.
  - The human genome is a self-modifying, undocumented, and environmentally sensitive system.
  - Determining the function of any given gene or sequence is an NP-hard problem.

---

### Observations About Nature’s Programs

- **Expressive and Redundant:**
  - Nature’s programs are highly expressive and redundant, with multiple ways to encode and regulate functions.
- **Awareness and Localization:**
  - They are aware of their surroundings and localized, adapting to environmental changes.
- **Robustness:**
  - Unlike computer systems, they cannot be easily rebooted or patched, except through medical interventions.

---

### Need for Robustness

- **Natural Selection:**
  - Evolution selects based on the phenotype, requiring a stable and reliable mapping between genotypes and phenotypes.
  - Organisms must develop successfully in a variable environment, and transcription errors must be tolerated.

---

### Redundancy in Nature

- **Multiple Layers of Redundancy:**
  - **Gene Level:** Multiple codons can encode the same amino acid.
  - **Genome Level:** Multiple copies of genes.
  - **Regulatory Pathways:** Multiple regulators and metabolic pathways.
  - **Cellular Level:** Trillions of cells, with many dying and being replaced.
  - **Organ Level:** Multiple organs (e.g., two kidneys) and functional redundancy among organs.

---

### Scalability and Segmentation

- **Drosophila (Fruit Fly) Development:**
  - Examples of segmentation in Drosophila, such as the Hunchback and Even-Skipped genes, demonstrate how nature achieves scalable and robust development.
  - Images from FlyEx, © David Kosman and John Reinitz.

---

### Mimicking Nature’s Programs

- **Design Principles:**
  - If we can build programs that are redundant, aware of their surroundings, and localized, they may share nature’s scalability, robustness, and survivability properties.

---

### Foundations and Recent Work

- **Cellular Automata and Reaction-Diffusion:**
  - Early work by von Neumann (1940s) and Conway’s Game of Life (1970).
  - Turing’s reaction-diffusion model (1952).
- **Recent Developments:**
  - Amorphous Computing (Abelson, Nagpal, Sussman).
  - IBM’s Autonomic Computing.
  - Embryonics (Mange, Sipper).
  - Ant Colony Optimization and Swarm Intelligence.

---

### Origami Shape Language

- **Radhika Nagpal, 2001:**
  - An example of a programming language inspired by natural processes.

---

### Swarm Programming

- **Behavioral Description and Environment Model:**
  - Swarm programming involves defining behavior and primitives over groups of devices.
  - **Device Units:**
    - Programmed device units interact in a swarm to achieve complex tasks.
  - **Swarm Program Generator:**
    - Generates programs for individual devices based on the defined behavior and environment.
  - **Primitives Library:**
    - Provides a set of basic operations for swarm programming.
  - **Reference:**
    - Selvin George, David Evans, and Steven Marchette. "A Biological Programming Model for Self-Healing." Workshop on Survivable and Self-Regenerative Systems, 2003.

---

### Long-Range Goal

- **Future Vision:**
  - The long-term goal is to create highly scalable and robust computing systems inspired by nature.

---

### Mickey Mouse Program

- **Simple Example:**
  - A basic program with 20 states and 50 transition rules, illustrating the principles of simple, robust design.

---

For more information, visit: [www.cs.virginia.edu/evans/usenix04](http://www.cs.virginia.edu/evans/usenix04)