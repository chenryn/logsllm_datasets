\[root@se2 \~\]# vim /etc/elasticsearch/elasticsearch.yml
node.name: se2 //另外三台修改为对应se3，se4，se5
\[root@se2 \~\]# systemctl restart elasticsearch
\[root@se2 \~\]# systemctl enable elasticsearch
4）访问测试，如图-2所示：
可以访问61-65的任意一台主机，
集群的节点都是5台，若先启动的是se4或se5，这两个会自动成为各自的集群，解决办法，先启动集群里的se1或se2或se3其中的一台，或者把se4和se5重启，se4和se5会自动加进去
ES 集群验证：返回字段解析：
"status": "green"
集群状态：绿色为正常、黄色表示有问题但不是很严重、红色表示严重故障
"number_of_nodes"： 5, 表示集群中节点的数量
图-2
3 案例3：练习curl命令
3.1 问题
本案例要求：
练习使用curl命令
理解GET POST
使用curl命令访问ES集群
3.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：curl命令的使用
http的请求方法：
常用方法 GET，POST，HEAD
其他方法 OPTIONS，PUT，DELETE，TRACE和CONNECT
ES常用：
PUT \--增
DELETE \--删
POST \--改
GET \--查
系统命令curl：
是一个利用URL规则在命令行下工作的文件传输工具,可以说是一款很强大的http命令行工具。它支持多种请求模式,自定义请求头等强大功能,是一款综合工具
curl 常用参数介绍：
-A 修改请求 agent
-X 设置请求方法
-i 显示返回头信息
1）索引的分片信息，如图-1所示：
\[root@room9pc01 \~\]# curl -X GET http://192.168.1.61:9200/\_cat
图-1
2）显示health的详细信息，如图-2所示：
\[root@room9pc01 \~\]# curl -X GET
http://192.168.1.62:9200/\_cat/health?v
图-2
3）查看nodes的帮助，如图-3所示：
\[root@room9pc01 \~\]# curl -X GET
http://192.168.1.61:9200/\_cat/nodes?help
图-3
4 案例4：练习插件
4.1 问题
本案例要求：
在其中一台机器上部署插件
使用bigdesk查看集群状态
使用head创建index
使用kopf查看数据
4.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：部署插件
插件装在哪一台机器上，只能在哪台机器上使用（这里安装在se5机器上面）
1）使用远程 uri 路径可以直接安装
\[root@se5 \~\]# cd /usr/share/elasticsearch/bin
\[root@se5 bin\]# ./plugin install \\
ftp://192.168.1.254/elk/elasticsearch-head-master.zip //安装head插件
\[root@se5 bin\]# ./plugin install \\
ftp://192.168.1.254/elk/elasticsearch-kopf-master.zip //安装kopf插件
\[root@se5 bin\]# \[root@se5 bin\]# ./plugin install \\
ftp://192.168.1.254/elk/bigdesk-master.zip
//安装bigdesk插件
\[root@se5 bin\]# ./plugin list //查看安装的插件
Installed plugins in /usr/share/elasticsearch/plugins:
\- head
\- kopf
\- bigdesk
2）访问head插件，如图-4所示：
\[root@room9pc01 \~\]# firefox http://192.168.1.65:9200/\_plugin/head
图-4
3）访问kopf插件，如图-5所示：
\[root@room9pc01 \~\]# http://192.168.1.65:9200/\_plugin/kopf
图-5
4）访问bigdesk插件，如图-6所示：
\[root@room9pc01 \~\]# http://192.168.1.65:9200/\_plugin/bigdesk
图-6
步骤二：使用head创建index
\[root@se5 bin\]# curl -X PUT \"http://192.168.1.65:9200/index\" -d \'
\> {
\> \"settings\":{
\> \"index\":{
\> \"number_of_shards\":5, //分片数
\> \"number_of_replicas\":1 //副本数
\> }
\> }
\> }\'
{\"acknowledged\":true}
步骤三：使用kopf查看数据，如图-7所示：
图-7
5 案例5：插入，增加，删除查询数据
5.1 问题
本案例要求：
使用curl命令连接使用ES数据库
使用PUT方法增加数据
使用POST修改数据
使用GET查询数据
使用DELETE删除数据
5.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：增加数据
\[root@se5 \~\]# locale
\[root@se5 \~\]# LANG=en_US.UTF-8 //设置编码
\[root@se5 \~\]# curl -X PUT
\"http://192.168.1.65:9200/taindex/teacher/1\" -d \'{
\"职业\":\"诗人\",
\"名字\":\"李白\",
\"称号\":\"诗仙\",
\"年代\":\"唐\"
}\'
{\"\_index\":\"taindex\",\"\_type\":\"teacher\",\"\_id\":\"1\",\"\_version\":2,\"\_shards\":{\"total\":2,\"successful\":2,\"failed\":0},\"created\":false}
步骤二：修改数据
\[root@se5 \~\]# curl -X PUT
\"http://192.168.1.65:9200/taindex/teacher/1\" -d \'{
\"doc\":{
\"年代\": \"唐代\"
}
}\'
{\"\_index\":\"taindex\",\"\_type\":\"teacher\",\"\_id\":\"1\",\"\_version\":3,\"\_shards\":{\"total\":2,\"successful\":2,\"failed\":0},\"created\":false}
步骤三：查询数据
\[root@se5 \~\]# curl -X GET
\"http://192.168.1.65:9200/taindex/teacher/3?pretty\"
{
\"\_index\" : \"taindex\",
\"\_type\" : \"teacher\",
\"\_id\" : \"3\",
\"found\" : false
}
步骤四：删除数据
\[root@se5 \~\]# curl -X DELETE
\"http://192.168.1.65:9200/taindex/teacher/3?pretty\"
{
\"found\" : false,
\"\_index\" : \"taindex\",
\"\_type\" : \"teacher\",
\"\_id\" : \"3\",
\"\_version\" : 1,
\"\_shards\" : {
\"total\" : 2,
\"successful\" : 2,
\"failed\" : 0
}
}
步骤五：删除索引
\[root@se5 bin\]# curl -X DELETE http://192.168.1.65:9200/taindex/
//删除索引
{\"acknowledged\":true}
\[root@se5 bin\]# curl -X DELETE http://192.168.1.65:9200/\*
//删除所有索引
{\"acknowledged\":true}
6 案例6：安装Kibana
6.1 问题
本案例要求：
安装Kibana
配置启动服务查看5601端口是否正常
通过web页面访问Kibana
6.2 步骤
实现此案例需要按照如下步骤进行
步骤一：安装kibana
1）在另一台主机，配置ip为192.168.1.66，配置yum源，更改主机名
2）安装kibana
\[root@kibana \~\]# yum -y install kibana
\[root@kibana \~\]# rpm -qc kibana
/opt/kibana/config/kibana.yml
\[root@kibana \~\]# vim /opt/kibana/config/kibana.yml
2 server.port: 5601
//若把端口改为80，可以成功启动kibana，但ss时没有端口，没有监听80端口，服务里面写死了，不能用80端口，只能是5601这个端口
5 server.host: \"0.0.0.0\" //服务器监听地址
15 elasticsearch.url: http://192.168.1.61:9200
//声明地址，从哪里查，集群里面随便选一个
23 kibana.index: \".kibana\" //kibana自己创建的索引
26 kibana.defaultAppId: \"discover\"
//打开kibana页面时，默认打开的页面discover
53 elasticsearch.pingTimeout: 1500 //ping检测超时时间
57 elasticsearch.requestTimeout: 30000 //请求超时
64 elasticsearch.startupTimeout: 5000 //启动超时
\[root@kibana \~\]# systemctl restart kibana
\[root@kibana \~\]# systemctl enable kibana
Created symlink from
/etc/systemd/system/multi-user.target.wants/kibana.service to
/usr/lib/systemd/system/kibana.service.
\[root@kibana \~\]# ss -antup \| grep 5601 //查看监听端口
3）浏览器访问kibana，如图-8所示：
\[root@kibana \~\]# firefox 192.168.1.66:5601
图-8
4）点击Status，查看是否安装成功，全部是绿色的对钩,说明安装成功，如图-9所示：
图-9
5）用head插件访问会有.kibana的索引信息，如图-10所示：
\[root@se5 \~\]# firefox 
# \-\-\-\-\-\-\--NSD ARCHITECTURE DAY04\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# Elasticsearch数据导入
map映射
# logstash
![LINUXNSD_V01ARCHITECTUREDAY04_032](media/image135.png){width="7.264583333333333in"
height="3.1465277777777776in"}
![LINUXNSD_V01ARCHITECTUREDAY04_033](media/image136.png){width="7.264583333333333in"
height="3.2090277777777776in"}
# logstash工作结构:
流水线式作业,三个工作模块.
数据源==\>input{}==\>filter{}==\>output{}==\>
input:数据采集
filter:数据加工处理
output:数据输出
# logstash数据类型
![LINUXNSD_V01ARCHITECTUREDAY04_035](media/image137.png){width="7.264583333333333in"
height="5.448611111111111in"}
# logstash条件判断
![LINUXNSD_V01ARCHITECTUREDAY04_036](media/image138.png){width="7.264583333333333in"
height="4.250694444444444in"}
![LINUXNSD_V01ARCHITECTUREDAY04_037](media/image139.png){width="7.264583333333333in"
height="4.334027777777778in"}
# logstash的安装与配置
**1:接着上一天的实验**
192.168.1.10 为kibana
192.168.1.11-192.168.1.15为elasticsearch
192.168.1.20 为web
192.168.1.25 为logstash
每台主机配置了/etc/hosts 文件, 配置了yum源,,其中有个源是自己做的
\[root@logstash \~\]# yum repolist
已加载插件：fastestmirror
Loading mirror speeds from cached hostfile
源标识 源名称 状态
esl esl 4
local_repo CentOS-7 - Base 4,986
repolist: 4,990
**2:安装jdk环境**
\[root@logstash \~\]# yum -y install java
**3:安装logstash**
\[root@logstash \~\]# yum -y install logstash
借助国外支持网站
-e 立即执行，使用命令行里的配置参数启动实例
例如: ./bin/logstash -e 'input {stdin {}} output {stdout {}}'
-f 指定启动实例的配置文件
例如 ./bin/logstash -f config/test.conf
-t 测试配置文件的正确性
例如 ./bin/logstash -f config/test.conf -t
-l 指定日志文件名称
例如 ./bin/logstash -f config/test.conf -l logs/test.log
-w 指定filter线程数量，默认线程数是5
例如 ./bin/logstash -f config/test.conf -w 8
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
**手写配置文件**
\[root@logstash \~\]# vim /etc/logstash/logstash.conf
input{
stdin{} #标准输入
}
filter{}
output{
stdout{ } #标准输出
}
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--基础标准框架\-\-\-\-\-\-\-\-\-\-\--
\[root@logstash logstash\]# /opt/logstash/bin/logstash -f
/etc/logstash/logstash.conf
Settings: Default pipeline workers: 2
Pipeline main started
\[root@logstash \~\]# /opt/logstash/bin/logstash-plugin list
#查看所有插件模块
logstash-codec-json #code可任意使用
logstash-codec-rubydebug #code 可任意使用,规则显示,调试时重要常用
logstash-filter-clone #中间带filter,只能用于filter{}中
logstash-input-tcp #中间带input,只能用于input{}中
logstash-output-tcp #中间带output,只能用于output{}中
\[root@logstash \~\]# vim /etc/logstash/logstash.conf
input{
stdin{ codec =\> \"json\" } #输入使用json模块
}
filter{}
output{
stdout{ codec =\> \"rubydebug\" } #输出使用"rubydebug模块"
}
\[root@logstash \~\]# /opt/logstash/bin/logstash -f
/etc/logstash/logstash.conf
Settings: Default pipeline workers: 2
Pipeline main started
{ \"a\":1} #输入会后,回车,显示如下
{
\"a\" =\> 1,
\"@version\" =\> \"1\",
\"@timestamp\" =\> \"2019-03-26T06:27:29.462Z\",
\"host\" =\> \"logstash\"