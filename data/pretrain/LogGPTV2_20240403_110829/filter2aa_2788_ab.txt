struct tpm_if tpm_20_if
YOU BETRAY ME!
UNMEASURED!
Exploit Scenario of the CVE-2017-16837 (1)
Compromised Software Stack
(1) Leave normal hashes in event logs
BIOS/UEFI
Sleep
(5) Sleep
Compromised Software Stack
(6) Wake up
(2) Extract and calculate the normal hashes
(3) Store the normal hashes in RAM
DCE and DLME (tboot)
(5) Reset the TPM and replay the normal hashes with 
the hooked functions
(4) Hook function pointers in the DCE and the DLME
Hooked
functions
DCE and DLME (tboot)
Faked State (Normal State)
Compromised State
Hash
values
Exploit Scenario of the CVE-2017-16837 (2)
BIOS/UEFI
tboot
GRUB
Compromised
Kernel
User
Application
TPM           
Remote
Attestation
Server
Abnormal
PCRs
Nonce
Sig(PCRs, Nonce) AIK
Exploit Scenario of the CVE-2017-16837 (3)
BIOS/UEFI
tboot
GRUB
User
Application
TPM           
Remote
Attestation
Server
Abnormal
PCRs
Nonce
Sig(PCRs, Nonce) AIK
Compromised
Kernel
Replay Good Hashes
Reset the TPM
with Sleep
Normal
PCRs
~~
Happiness
0
5
10
- 10
- 5
- 1000
- 100
2017
2018
2019
Time
(year)
First Encounter
Second Encounter
CVE-2017-
16837
CVE-2018-
6622
USENIX
Security
Black Hat
Asia
Black Hat Asia
with Napper
Contents - CVE-2018-6622
DRTM measures code 
while waking up!
How about SRTM?
Waking Up Process of the SRTM
OS
ACPI
(BIOS/UEFI)
TPM
(1) Request to
save a state
Sleep
(S3)
(5) Request to
restore a state
(2) Request to 
enter sleep
(4) Wake up
(3) Sleep
(6) Resume OS
“Grey Area” Vulnerability (1)
(CVE-2018-6622)
OS
ACPI
(BIOS/UEFI)
TPM
(1) Request to
save a state
Sleep
(S3)
(5) Request to
restore a state
(2) Request to 
enter sleep
(4) Wake up
(3) Sleep
(6) Resume OS
“Grey Area” Vulnerability (2)
(CVE-2018-6622)
What is the “corrective action”?
This means “reset the TPM”
TPM 2.0
TPM 1.2
“Grey Area” Vulnerability (2)
(CVE-2018-6622)
What is the “corrective action”?
This means “reset the TPM”
TPM 2.0
TPM 1.2
??
YOU BETRAY ME!
I have no idea about “corrective action”
I should do nothing!
“Grey Area” Vulnerability (2)
(CVE-2018-6622)
What is the “corrective action”?
This means “reset the TPM”
TPM 2.0
TPM 1.2
Clear!
Exploit Scenario of the CVE-2018-6622
Compromised Software Stack
(1) Leave normal hashes in event logs
Compromised State
BIOS/UEFI
Sleep
(4) Sleep without  saving the TPM state
Compromised Software Stack
(5) Wake up
Faked State (Normal State)
(2) Extract and calculate the normal hashes
(6) Reset the TPM and replay the normal hashes
(3) Store the normal hashes in RAM
Hash
values
~~
Happiness
0
5
10
- 10
- 5
- 1000
- 100
2017
2018
2019
Time
(year)
First Encounter
Second Encounter
CVE-2017-
16837
CVE-2018-
6622
USENIX
Security
Black Hat
Asia
Black Hat Asia
with Napper
Contents – “Napper”
You! Again!
Manager
Second Encounter!!!
“Napper”?
- Is a tool that can check the ACPI S3 sleep mode 
vulnerability in the TPM
- It is a bootable USB device based-on Ubuntu 18.04
- It has a kernel module and user-level applications
- Makes the system take a nap and checks                          
the vulnerability
- The kernel module exploits the grey area vulnerability (CVE-2018-
6622) while sleeping by patching kernel code
- The user-level applications check the TPM status and show a report
“Napper”?
- Is a tool that can check the ACPI S3 sleep mode 
vulnerability in the TPM
- It is a bootable USB device based-on Ubuntu 18.04
- It has a kernel module and user-level applications
- Makes the system take a nap and checks                          
the vulnerability
- The kernel module exploits the grey area vulnerability (CVE-2018-
6622) while sleeping by patching kernel code
- The user-level applications check the TPM status and show a report
CVE-2017-16837 is a software vulnerability!
Upgrade tBoot if the version is lower than v1.9.7
Napper’s Kernel Module (1)
- Patches the tpm_pm_suspend() function in TPM driver
- The function is invoked by kernel while S3 sleep sequence
- The kernel module changes the function to “return 0;”
Napper’s Kernel Module (2)
Napper’s User-Level Applications
- Consist of TPM-related software and launcher software
- I added a command-line tool, “tpm2_extendpcrs”, to tpm2_tools
- I also made a launcher software for easy-of-use
- Load the kernel module and check the TPM vulnerability
- The launcher loads napper’s kernel module and takes a nap
- It checks if PCRs of the TPM are all ZEROS and extends PCRs
- It gathers and reports the TPM and system information with 
tpm2_getinfo, dmidecode, and journalctl tools
Napper Live-CD and USB Bootable Device
Ubuntu 18.04
+ Kernel 4.18.0-15
TPM-related software
+
Napper Live-CD.iso
User-level Applications
+
+Pinguybuilder_5.1-7
Napper Live-CD and USB Bootable Device
Ubuntu 18.04
Kernel 4.18.0-15
TPM-related software
+
+
Napper Live-CD.iso
Pinguybuilder_5.1-7
User-level Applications
+
Project page: 
https://github.com/kkamagui/napper-for-tpm
Model
Status
BIOS
TPM
Vendor
Version
Release Date
Manufacturer
Vendor String
ASUS
Q170M-C
Vulnerable
American 
Megatrends Inc.
4001
11/09/2018
Infineon (IFX)
SLB9665
Dell
Optiplex 7040
Vulnerable
Dell
1.11.1
10/10/2018
NTC
rls NPCT
Dell
Optiplex 7050
Vulnerable
Dell
1.11.0
11/01/2018
NTC
rls NPCT
GIGABYTE
H170-D3HP
Vulnerable
American 
Megatrends Inc.
F20g
03/09/2018
Infineon (IFX)
SLB9665
GIGABYTE
Q170M-MK
Vulnerable
American 
Megatrends Inc.
F23
04/12/2018
Infineon (IFX)
SLB9665
HP
Spectre x360
Vulnerable
American 
Megatrends Inc.
F.24
01/07/2019
Infineon (IFX)
SLB9665
Intel
NUC5i5MYHE
Vulnerable
Intel
MYBDWi5v.86A. 
0049.2018. 
1107.1046
11/07/2018
Infineon (IFX)
SLB9665
Lenovo T480 
(20L5A00TKR)
Safe
Lenovo
N24ET44W 
(1.19 )
11/07/2018
Infineon (IFX)
SLB9670
Lenovo T580
Safe
Lenovo
N27ET20W 
(1.06 )
01/22/2018
ST-
Microelectronics
Microsoft
Surface Pro 4
Safe
Microsoft 
Corporation
108.2439.769
12/07/2018
Infineon (IFX)
SLB9665
Demo
Napper tool
Countermeasures – CVE-2018-6622
(The Grey Area Vulnerability)
1) Disable the ACPI S3 sleep feature in BIOS menu
- Brutal, but simple and effective
2) Revise TPM 2.0 specification to define “corrective action” 
in detail and patch BIOS/UEFI firmware
- A long time to revise and apply to the TPM or BIOS/UEFI firmware
- But, fundamental solution!
Check and update your BIOS/UEFI firmware!
Countermeasures – CVE-2017-16837
(The Lost Pointer Vulnerability)
1) Apply my patch to tBoot
- https://sourceforge.net/p/tboot/code/ci/521c58e51eb5be105a2998    
3742850e72c44ed80e/
2) Update tBoot to the latest version
Conclusion
- Until now, we have trusted the untrustable hardware and 
software with reputation!
- “Reputation” is not “Trustworthiness”
- Trust nothing only with reputation and check everything for yourself
- Napper helps you to check the TPM vulnerability
- Check your system with Napper or visit the project site for the results
- Update your BIOS/UEFI firmware with the latest version
- If there is no patched firmware yet, disable the ACPI S3 sleep feature in 
BIOS menu right now!
Betrayal of Reputation:
Trusting the Untrustable Hardware and Software with Reputation
Twitter:       @kkamagui1
Seunghun Han
PI:EMAIL
Project: https://github.com/kkamagui/napper-for-tpm
Reference
- Seunghun, H., Wook, S., Jun-Hyeok, P., and HyoungChun K. Finally, I Can Sleep Tonight: Catching Sleep Mode 
Vulnerabilities of the TPM with the Napper. Black Hat Asia. 2019.
- Seunghun, H., Wook, S., Jun-Hyeok, P., and HyoungChun K. A Bad Dream: Subverting Trusted Platform Module 
While You Are Sleeping. USENIX Security. 2018.
- Seunghun, H., Jun-Hyeok, P., Wook, S., Junghwan, K., and HyoungChun K. I Don’t Want to sleep Tonight: 
Subverting Intel TXT with S3 Sleep. Black Hat Asia. 2018.
- Trusted Computing Group. TCG D-RTM Architecture. 2013.
- Trusted Computing Group. TCG PC Client Specific Implementation Specification for Conventional BIOS. 2012.
- Intel. Intel Trusted Execution Technology (Intel TXT). 2017.
- Butterworth, J., Kallenberg, C., Kovah, X., and Herzog, A. Problems with the static root of trust for measurement.
Black Hat USA. 2013.
- Wojtczuk, R., and Rutkowska, J. Attacking intel trusted execution technology. Black Hat DC. 2009.
- Wojtczuk, R., Rutkowska, J., and Tereshkin. A. Another way to circumvent Intel trusted execution technology.
Invisible Things Lab. 2009.
- Wojtczuk, R., and Rutkowska, J. Attacking Intel TXT via SINIT code execution hijacking. Invisible Things Lab. 2011.
- Sharkey, J. Breaking hardware-enforced security with hypervisors. Black Hat USA. 2016.