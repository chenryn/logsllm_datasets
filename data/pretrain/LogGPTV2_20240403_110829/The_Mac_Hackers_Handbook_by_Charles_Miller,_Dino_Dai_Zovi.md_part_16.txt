WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSCallbackConstructor.gcno
WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSCallbackFunction.gcno
WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSCallbackObject.gcno
WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSClassRef.gcno
9955336633cc0055..iinndddd 111177 11//2255//0099 44::4411::0077 PPMM
118 Part II ■ Discovering Vulnerabilities
To test that the coverage data is being generated when executed, run a test
program.
$ ./WebKitBuild/Release/testkjs
Usage: testkjs -f file1 [-f file2…][-p][-- arguments…]
See if .gcda fi les are produced in response to the program being run. These
fi les contain the dynamic code-coverage information—in particular, which lines
of code have been executed.
WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSCallbackConstructor.gcda
WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSCallbackFunction.gcda
WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSCallbackObject.gcda
WebKitBuild/JavaScriptCore.build/Release/JavaScriptCore.build/Objects-
normal/i386/JSClassRef.gcda
Since these fi les show up, we know it is working! Now run the JavaScript
regression tests and see what code they cover.
$ WebKitTools/Scripts/run-webkit-test
This will generate a whole bunch of .gcda fi les, one for each source fi le (plus
headers if they contain code). At this point, we could use gcov to view the results
on a fi le-by-fi le basis, but a better way is to use lcov (http://ltp.sourceforge.
net/coverage/lcov.php) which is a graphical front-end for gcov. The fi rst thing
lcov does is combine all the testing data (.gcda fi les) into one single fi le. WebKit
is pretty complicated and lcov won’t work on it out of the box. To set things up
for lcov, run the following commands:
$ cp Release/DerivedSources/JavaScriptCore/grammar.* JavaScriptCore/
mkdir JavaScriptCore/JavaScriptCore
cd JavaScriptCore/JavaScriptCore
ln -s ../kjs kjs
Then run lcov:
$ lcov -o javascriptcore.lcov -d WebKitBuild/JavaScriptCore.build -c -b
JavaScriptCore
This command will generate a single fi le, in this case javascriptcore.lcov,
which contains all the code-coverage information from the regression-test
suite. lcov comes with a tool called genhtml that makes pretty HTML docu-
ments of this data.
$ genhtml -o javascriptcore-html -f javascriptcore.lcov
9955336633cc0055..iinndddd 111188 11//2255//0099 44::4411::0077 PPMM
Chapter 5 ■ Finding Bugs 119
These HTML documents show code coverage per directory, fi le, and line, as
well as overall program statistics; see Figure 5-1.
Figure 5.1: The main lcov file that describes the code coverage obtained by the
JavaScriptCore regression tests
As you can see, overall 81 percent of the lines have been executed. There is
a lot of useful data here for the bug fi nder. These HTML fi les (as well as the
binary lcov fi les) can be easily searched to identify lines that were executed
and not executed and those that contain certain source-code constructs. For
example, a quick grep will fi nd all the “copies” that have never been executed
during testing.
$ grep -i cpy * | grep lineNoCov
DateMath.h.gcov.html: 112  0 : strncpy(timeZone,
inTm.tm_zone, inZoneSize);
DateMath.h.gcov.html: 157
 0 :
strncpy(timeZone, rhs.timeZone, inZoneSize);
number_object.cpp.gcov.html: 94  0 : strncpy(buf.data(),
result, decimalPoint);
number_object.cpp.gcov.html: 285
 0 : strncpy(buf
+ i, result + 1, fractionalDigits);
number_object.cpp.gcov.html: 366  0 : strcpy(buf + i,
result);
ustring.cpp.gcov.html: 86  0 : memcpy(data, c, length + 1);
ustring.cpp.gcov.html: 102  0 : memcpy(data, b.data, length +
1);
ustring.cpp.gcov.html: 127  0 : memcpy(n, data, length);
ustring.cpp.gcov.html: 129
 0 : memcpy(n+length,
t.data, t.length);
ustring.cpp.gcov.html: 145
 0 : memcpy(data, c,
length + 1);
ustring.cpp.gcov.html: 160  0 : memcpy(data, str.data, length +
1);
ustring.cpp.gcov.html: 743  0 :
memcpy(const_cast&lt;UChar*&gt;(data() + thisSize), t.data(), tSize *
sizeof(UChar));
ustring.cpp.gcov.html: 854  0 : memcpy(d, data(), length *
sizeof(UChar));
Looking at one of these in more detail shows that the entire function has
never been called; see Figure 5-2.
Figure 5.2: Code coverage for one particular source file
9955336633cc0055..iinndddd 112200 11//2255//0099 44::4411::0077 PPMM
Chapter 5 ■ Finding Bugs 121
Notice in Figure 5-2 that some functions containing memory copies were
never executed by the regression suite. How the code coverage of this test suite
changes over time can often be very telling. For example, during this test from
April 2008, 83.8 perecent of the kjs directory (which contains the main JavaScript
parsing code) was executed and 91.1 perecent of the PCRE code was executed.
One year earlier, 79.3 perecent of the kjs directory was tested and 54.7 perecent
of the PCRE library was tested. This discrepancy between the kjs and PCRE
directories in 2007 is what led us to pick so heavily on PCRE, since it was so much
less tested than the JavaScript code. The authors of the JavaScript regression tests
have greatly increased the effectiveness of the PCRE test cases since then.
CanSecWest 2008 Bug
In 2007 and 2008, the CanSecWest security conference sponsored a contest called
Pwn2Own. In 2007 the contest centered on whether a fully patched MacBook
could be exploited. One of the authors of this book, Dino Dai Zovi, won this con-
test, along with the $10,000 prize. In 2008 the contest was expanded to include
computers running Linux and Microsoft Vista. The other author of this book,
Charlie Miller, hacked a MacBook Air to take home the $10,000 prize. By com-
bining code-coverage analysis and source-code auditing, the bug used to win
the second contest was found.
As you’ve seen, code coverage is a useful tool that helps an auditor zero in
on a particular section of code to review. The code-coverage statistics discussed
earlier pointed us to the PCRE code to fi nd a variety of exploitable bugs. So when
the 2008 contest rolled around, we took a hard look at the PCRE code shipped
by Apple and discovered the bug we used to win. We’ll provide a closer look at
this bug to give you a feel for what a real bug might look like in source code.
The main function to compile regular expressions is jsRegExpCompile().
This function takes in the regular expression and calls calculateCompiledPat-
ternLength() to fi gure out how much space will be needed for the “compiled”
regular expression, that is, the internal representation of the regular expression.
It then allocates a buffer of that size.
int length = calculateCompiledPatternLength(pattern, patternLength,
ignoreCase, cd, errorcode);
…
size_t size = length + sizeof(JSRegExp);
JSRegExp* re = reinterpret_cast(new char[size]);
Finally, it calls compileBranch() to fi ll in this re buffer with the compiled
regular expression. A buffer overfl ow will occur if calculateCompiledPattern-
Length() fails to allocate enough space for the compiled regular expression.
Inside this function, a variable called length is constantly increased as more
space seems needed. This is the value returned by the function. The idea in
9955336633cc0055..iinndddd 112211 11//2255//0099 44::4411::0077 PPMM
122 Part II ■ Discovering Vulnerabilities
this particular vulnerability is to keep increasing the length variable until it
overfl ows and becomes small again.
length += (max - min) * (duplength + 3 + 2*LINK_SIZE)
In this case, the attacker controls duplength. Choosing a suffi ciently large value
makes the integer overfl ow so that a small buffer is allocated but a big buffer is
copied in. Normally this might not be exploitable, because it would simply copy
data off the end of mapped memory, but in this case it is possible to make the
copy “error out” by giving it an invalid regular expression. Chapter 8, “Exploiting
Heap Overfl ows,” offers more on this topic.
vi + Changelog = Leopard 0-day
Apple uses some open-source software, which is great. Unfortunately, this
means it always needs to keep its products as up-to-date as the open-source
software it relies upon. This can be diffi cult, as Apple has some overhead that
the open-source developers don’t have, associated with building and testing its
binaries as well as rolling out its products. Worse, sometimes Apple forks an
open-source project, and after a long enough time it can become very diffi cult
to perform “backports” when bugs are fi xed in the open-source product. All
of this is important because it is possible to fi nd 0-days in Leopard by simply
keeping an eye on open-source projects that Apple has forked and exploiting
the bugs fi xed in the open-source project but not yet fi xed in Apple’s project.
You might think this would give you only a few weeks’ head start before Apple
patches, but in reality these types of bugs can go unresolved for a long time,
even years. This is best described by a narrative.
In early 2007, Charlie Miller and Jake Honoroff were looking for a bug in
WebKit. After working out the code coverage of the regression tests as discussed
earlier, they focused in on the PCRE code. Writing a simple regular-expression
fuzzer, they began to see errors like
PCRE compilation failed at offset 6: internal error: code overflow
Although the simple stub program they were using (pcredemo), which uti-
lized the WebKit library, never crashed, this error forced them to do a little
more investigation. They found that the error was caused by invalid POSIX-
type expressions. In fact, each occurrence of the string “[[**]]” in the regular
expression caused a heap buffer to be written an additional one byte past its
end. The more “[[**]]” that appeared, the more memory was corrupted. The
aforementioned error message indicates that a buffer overfl ow has occurred,
9955336633cc0055..iinndddd 112222 11//2255//0099 44::4411::0077 PPMM
Chapter 5 ■ Finding Bugs 123
but, of course, at that point it is too late! In July 2007 this bug was used to exploit
the iPhone, only weeks after it was released. Cute story, but what does this have
to do with changelog-style? Well, the PCRE code that is in WebKit is a fork of
the open-source PCRE project (www.pcre.org). Upon closer investigation, it was
discovered that the iPhone bug had been fi xed in the open-source PCRE in July
2006. The changelog for PCRE 6.7 states the following:
18. A valid (though odd) pattern that looked like a POSIX character
class but used an invalid character after [ (for example [[,abc,]]) caused
pcre_compile() to give the error “Failed: internal error: code overfl ow” or
in some cases to crash with a glibc free() error. This could even happen if
the pattern terminated after [[ but there just happened to be a sequence of
letters, a binary zero, and a closing ] in the memory that followed.
This is exactly the WebKit regular-expression bug! So the question became,
are there other bugs like this that are still in WebKit? The answer was yes. The
following changelog entry revealed another WebKit bug (fi xed at the same time
as the iPhone bug after Charlie Miller pointed it out to Apple):
26. If a subpattern containing a named recursion or subroutine reference such
as (?P>B) was quantifi ed, for example (xxx(?P>B)){3}, the calculation of
the space required for the compiled pattern went wrong and gave too small a
value. Depending on the environment, this could lead to “Failed: internal
error: code overflow at offset 49” or “glibc detected double free or
corruption” errors.
Charlie Miller found this 0-day bug in WebKit without fuzzing and without a
source-code audit—simply by reading a changelog. In his Black Hat–conference
talk given in August 2007, he revealed this technique for fi nding bugs. Surely
this was the end of the “changelog -tyle” bugs, now that the secret was out of
the bag, right? Nope.
As pointed out by Chris Evans, the CanSecWest 2008 bug outlined in the
previous section was also was fi xed in the same version of PCRE! Here is that
entry from this infamous changelog:
11. S ubpatterns that are repeated with specifi c counts have to be replicated in
the compiled pattern. The size of memory for this was computed from the
length of the subpattern and the repeat count. The latter is limited to
65535, but there was no limit on the former, meaning that integer overfl ow
could in principle occur. The compiled length of a repeated subpattern is
now limited to 30,000 bytes in order to prevent this.
So once again, the open-source PCRE was fi xed in July 2006, and as late as
March 2008 these bugs still existed in WebKit products such as Safari. I wonder
how many other bugs lurk in various changelogs.
9955336633cc0055..iinndddd 112233 11//2255//0099 44::4411::0077 PPMM
124 Part II ■ Discovering Vulnerabilities
Apple’s Prerelease-Vulnerability Collection
Another interesting fact about Apple using some open-source products is that
important information can be gleaned from observing the changes in the open-
source project. Apple typically takes many weeks to supply patches for vulnera-
bilities, even those with available exploits. For example, consider that a functional
exploit for the RTSP-response overfl ow was posted at http://milw0rm.com on
November 23, 2007. QuickTime 7.3.1, which fi xed this bug, was not released
until December 13, 2007. This is a period of 21 days from the time the exploit
was made public. Considering the nature of this vulnerability, a simple stack
overfl ow, presumably a large chunk of this time was spent testing the patch. You
can assume that every patch will take a comparable amount of time to release.
While this is interesting in its own right, it is even more interesting when you
consider that Apple puts fi xes in the publicly available WebKit source tree before
beginning to test its patches for its systems. This means keeping your eye on the
WebKit SVN will give you access to vulnerabilities that should last on the order
of two or three weeks! This is much easier (and faster) than reverse-engineering
patches after the fact!
We’ll talk through a few examples to illustrate this point more clearly. The
fi rst one is the original iPhone bug, discussed earlier. Charlie Miller submitted
this to Apple on July 17, 2007. The next day, the following changes showed up
at http://trac.webkit.org/projects/webkit/changeset/24430:
fi x  PCRE computes length wrong for expressions
such as “[**]”
Test: fast/js/regexp-charclass-crash.html
pcre/pcre_compile.c: (pcre_compile2): Fix the prefl ight code that calls check_
posix_syntax to match the actual regular expression compilation code; before it
was missing the check of the fi rst character.
This is exactly the bug, of course. The actual iPhone patch was released on July
31, just beating the Black Hat talk scheduled for two days later. In this case, watch-
ing the SVN server would give an attacker a free period of two weeks to develop
and launch an exploit against WebKit-enabled products around the world.
A second example of this behavior occurred with the CanSecWest 2008 bug,
also discussed previously. This bug was used to win the aforementioned contest
on March 27, 2008. The following changelog entry was posted the next day, as
observed by Rhys Kidd.
Regular expressions with large nested repetition counts can have their compiled
length calculated incorrectly.
pcre/pcre_compile.cpp:
(multiplyWithOverfl owCheck):
9955336633cc0055..iinndddd 112244 11//2255//0099 44::4411::0077 PPMM
Chapter 5 ■ Finding Bugs 125
(calculateCompiledPatternLength): Check for overfl ow when dealing with
nested repetition counts and bail with an error rather than returning incorrect
results.
Later that day, the source-code patch was posted as well. This is more than
enough time to fi nd the bug and develop an exploit. The actual binary patch
was released exactly three weeks later.
The moral of the story is, if you need to break into a Leopard box and you
can code an exploit in fewer than 20 days, wait for the next WebKit bug and get
busy. Don’t worry; you won’t have to wait long.
Fuzz Fun
Fuzzing, as mentioned earlier, is a technique for fi nding bugs in software, par-
ticularly security-related bugs. Doing static analysis, either via source-code
review or by wading through the binary, is extremely time-consuming and
diffi cult work that requires special expertise. Fuzzing, on the other hand, can
be relatively simple to set up and, in some cases, can be quite effective.
The idea behind fuzzing is to test the application by sending in millions of
malformed inputs. These inputs might be command-line arguments, network
traffi c, environment variables, fi les, or any other kind of data the application is
willing to process. These anomalous inputs can cause the application to behave
in a manner not intended by the developer. In particular, such inputs tend
to exercise corner cases and may cause the application to fail completely. For
example, a program may expect an integer to be positive and fail when a value
of zero is used. The researcher must monitor the application being supplied the
inputs and note any abnormal behavior.
The hardest part of fuzzing is creating high-quality fuzzed inputs. There are
a few ways to do it. The fi rst is a mutation-based approach. This method begins
with completely valid inputs. These might be legitimate packet captures, fi les
downloaded from the Internet, valid command-line arguments, etc. Anomalies
can then be added to these valid inputs. These inputs can be changed such
that length fi elds are modifi ed, random bits are fl ipped, strings are replaced
with long sequences of As or format-string specifi ers, or many other possibili-
ties. Using a good old random-number generator, an infi nite number of such
anomalous inputs can be constructed from the valid inputs. Just be sure to use
a variety of valid inputs as starting points to get better fuzz coverage. We’ll
illustrate this technique in the next couple of sections.
Also common is the generation-based approach. Here, inputs are built com-
pletely from the specifi cation. In other words, the researcher needs to under-
stand completely the protocol or format of the inputs the program expects.
With this knowledge, inputs of every conceivable variety can be produced and
9955336633cc0055..iinndddd 112255 11//2255//0099 44::4411::0077 PPMM