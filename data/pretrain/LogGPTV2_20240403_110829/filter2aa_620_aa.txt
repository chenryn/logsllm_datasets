Automated Discovery of 
Deserialization Gadget 
Chains
Ian Haken
DEF CON 26, 2018
Automated Discovery of Deserialization Gadget Chains
Ian Haken
$ whoami
Senior Security Software Engineer on Netflix’s Platform Security team.
Netflix is a microservice ecosystem and we build security services and 
libraries to keep those applications safe:
● Secrets at Scale
● Crypto as a service
● Netflix-wide Authorization
      @ianhaken
      https://github.com/JackOfMostTrades
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Deserialization Gadget Chains
● What is a deserialization vulnerability?
● A brief history of deserialization vulnerabilities
● What is a deserialization gadget chain?
● Why focus on gadget chains?
● Building a tool to find gadget chains
● Exploits discovered
Automated Discovery of Deserialization Gadget Chains
Ian Haken
W hat is a Deserialization Vulnerability?
Automated Discovery of Deserialization Gadget Chains
Ian Haken
In object oriented languages (like Java), data is contained in classes and classes 
contain code.
W hat is a Deserialization Vulnerability?
Automated Discovery of Deserialization Gadget Chains
Ian Haken
In object oriented languages (like Java), data is contained in classes and classes 
contain code.
Controlling Data Types => Controlling Code!
W hat is a Deserialization Vulnerability?
Automated Discovery of Deserialization Gadget Chains
Ian Haken
In object oriented languages (like Java), data is contained in classes and classes 
contain code.
Controlling Data Types => Controlling Code!
W hat is a Deserialization Vulnerability?
@POST
public String renderUser(
       HttpServletRequest request) {
  ObjectInputStream ois =
      new ObjectInputStream(
      request.getInputStream());
  User user = (User) ois.readObject();
  return user.render();
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
In object oriented languages (like Java), data is contained in classes and classes 
contain code.
Controlling Data Types => Controlling Code!
W hat is a Deserialization Vulnerability?
@POST
public String renderUser(
       HttpServletRequest request) {
  ObjectInputStream ois =
      new ObjectInputStream(
      request.getInputStream());
  User user = (User) ois.readObject();
  return user.render();
}
public class User {
  private String name;
  public String render() {
    return name;
  }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
In object oriented languages (like Java), data is contained in classes and classes 
contain code.
Controlling Data Types => Controlling Code!
W hat is a Deserialization Vulnerability?
@POST
public String renderUser(
       HttpServletRequest request) {
  ObjectInputStream ois =
      new ObjectInputStream(
      request.getInputStream());
  User user = (User) ois.readObject();
  return user.render();
}
public class User {
  private String name;
  public String render() {
    return name;
  }
}
public class ThumbnailUser
       extends User {
  private File thumbnail;
  public String render() {
    return Files.read(thumbnail);
  }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Deserialization? That’s so 2016...
1 http://www.blackhat.com/presentations/bh-federal-06/BH-Fed-06-Schoenefeld-up.pdf
2 https://frohoff.github.io/appseccali-marshalling-pickles/
3 https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities
4 https://www.blackhat.com.docs.us-17.thursday.us-17-Munoz-Friday-The-13th-Json-Attacks.pdf
5 https://appsecus2018.sched.com/event/F04J
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● 2006: Pentesting J2EE, Black Hat 2006, Marc Schönefeld1
Deserialization? That’s so 2016...
1 http://www.blackhat.com/presentations/bh-federal-06/BH-Fed-06-Schoenefeld-up.pdf
2 https://frohoff.github.io/appseccali-marshalling-pickles/
3 https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities
4 https://www.blackhat.com.docs.us-17.thursday.us-17-Munoz-Friday-The-13th-Json-Attacks.pdf
5 https://appsecus2018.sched.com/event/F04J
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● 2006: Pentesting J2EE, Black Hat 2006, Marc Schönefeld1
● 2015: Marshalling Pickles, AppSecCali 2015, Frohoff and 
Lawrence2
Deserialization? That’s so 2016...
1 http://www.blackhat.com/presentations/bh-federal-06/BH-Fed-06-Schoenefeld-up.pdf
2 https://frohoff.github.io/appseccali-marshalling-pickles/
3 https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities
4 https://www.blackhat.com.docs.us-17.thursday.us-17-Munoz-Friday-The-13th-Json-Attacks.pdf
5 https://appsecus2018.sched.com/event/F04J
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● 2006: Pentesting J2EE, Black Hat 2006, Marc Schönefeld1
● 2015: Marshalling Pickles, AppSecCali 2015, Frohoff and 
Lawrence2
● 2016: Defending against Java Deserialization Vulnerabilities, 
Bay Area OWASP Meetup, September 2016, Luca Carettoni3
Deserialization? That’s so 2016...
1 http://www.blackhat.com/presentations/bh-federal-06/BH-Fed-06-Schoenefeld-up.pdf
2 https://frohoff.github.io/appseccali-marshalling-pickles/
3 https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities
4 https://www.blackhat.com.docs.us-17.thursday.us-17-Munoz-Friday-The-13th-Json-Attacks.pdf
5 https://appsecus2018.sched.com/event/F04J
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● 2006: Pentesting J2EE, Black Hat 2006, Marc Schönefeld1
● 2015: Marshalling Pickles, AppSecCali 2015, Frohoff and 
Lawrence2
● 2016: Defending against Java Deserialization Vulnerabilities, 
Bay Area OWASP Meetup, September 2016, Luca Carettoni3
● 2017: Friday the 13th: JSON Attacks, Black Hat 2017, Muñoz 
and Mirosh4
Deserialization? That’s so 2016...
1 http://www.blackhat.com/presentations/bh-federal-06/BH-Fed-06-Schoenefeld-up.pdf
2 https://frohoff.github.io/appseccali-marshalling-pickles/
3 https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities
4 https://www.blackhat.com.docs.us-17.thursday.us-17-Munoz-Friday-The-13th-Json-Attacks.pdf
5 https://appsecus2018.sched.com/event/F04J
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● 2006: Pentesting J2EE, Black Hat 2006, Marc Schönefeld1
● 2015: Marshalling Pickles, AppSecCali 2015, Frohoff and 
Lawrence2
● 2016: Defending against Java Deserialization Vulnerabilities, 
Bay Area OWASP Meetup, September 2016, Luca Carettoni3
● 2017: Friday the 13th: JSON Attacks, Black Hat 2017, Muñoz 
and Mirosh4
● 2018: Deserialization: what, how and why [not], AppSec USA, 
October 2018, Alexei Kojenov5
Deserialization? That’s so 2016...
1 http://www.blackhat.com/presentations/bh-federal-06/BH-Fed-06-Schoenefeld-up.pdf
2 https://frohoff.github.io/appseccali-marshalling-pickles/
3 https://www.slideshare.net/ikkisoft/defending-against-java-deserialization-vulnerabilities
4 https://www.blackhat.com.docs.us-17.thursday.us-17-Munoz-Friday-The-13th-Json-Attacks.pdf
5 https://appsecus2018.sched.com/event/F04J
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Magic methods get executed automatically by 
the deserializer, even before deserialization 
finishes!
W hy are Deserialization Vulnerabilities so Bad?
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Magic methods get executed automatically by 
the deserializer, even before deserialization 
finishes!
W hy are Deserialization Vulnerabilities so Bad?
@POST
public String renderUser(
       HttpServletRequest request) {
  ObjectInputStream ois =
      new ObjectInputStream(
      request.getInputStream());
  User user = (User) ois.readObject();
  return user.render();
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Magic methods get executed automatically by 
the deserializer, even before deserialization 
finishes!
W hy are Deserialization Vulnerabilities so Bad?
@POST
public String renderUser(
       HttpServletRequest request) {
  ObjectInputStream ois =
      new ObjectInputStream(
      request.getInputStream());
  User user = (User) ois.readObject();
  return user.render();
}
public class EvilClass {
  public void readObject(
            ObjectInputStream ois) {
    Runtime.exec(ois.readObject());
  }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● readObject() and readResolve() are the main ones…
○ But don’t forget about finalize()!
● Many serializable JDK classes implement these 
magic methods and call other methods, so there’s a 
lot of additional “known entrypoints.”
○ HashMap
■ Object.hashCode()
■ Object.equals()
○ PriorityQueue
■ Comparator.compare()
■ Comparable.compareTo()
Magic methods?
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Magic Methods to Gadget Chains
public class HashMap implements Map {
   private void readObject(ObjectInputStream s) {
       int mappings = s.readInt();
       for (int i = 0; i  implements Map {
   private void readObject(ObjectInputStream s) {
       int mappings = s.readInt();
       for (int i = 0; i  implements Map {
   private void readObject(ObjectInputStream s) {
       int mappings = s.readInt();
       for (int i = 0; i  implements Map {
   private void readObject(ObjectInputStream s) {
       int mappings = s.readInt();
       for (int i = 0; i  implements Map {
   private void readObject(ObjectInputStream s) {
       int mappings = s.readInt();
       for (int i = 0; i < mappings; i++) {
           K key = (K) s.readObject();
           V value = (V) s.readObject();
           putVal(key.hashCode(), key, value);
       }
   }
}
public class AbstractTableModel$ff19274a {
   private IPersistentMap __clojureFnMap;
   public int hashCode() {
       IFn f = __clojureFnMap.get("hashCode");
       return (int)(f.invoke(this));
   }
}
public class FnCompose implements IFn {
   private IFn f1, f2;
   public Object invoke(Object arg) {
       return f2.invoke(f1.invoke(arg));
   }
}
public class FnConstant implements IFn {
   private Object value;
   public Object invoke(Object arg) {
       return value;
   }
}
public class FnEval implements IFn {
   public Object invoke(Object arg) {
       return Runtime.exec(arg);
   }
}
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Example Payload
{
  “@class”: “java.util.HashMap”
  “members”: [
    2,
    {
      “@class”: “AbstractTableModel$ff19274a”
      __clojureFnMap: {
        hashCode: {
          “@class”: “FnCompose”
          f2: { “@class”: “FnConstant”, value: “/usr/bin/calc” },
          f1: { “@class”: “FnEval” }
        }
      }
    },
    “val”
  ]
}
W hat gadget chains are in your 
application has nothing to do 
with code your application is 
calling!
Possible gadget chains are inﬂuenced by the 
cumulative collection of all transitive 
dependencies for your application
Automated Discovery of Deserialization Gadget Chains
Ian Haken
W hat (Java) Libraries are Vulnerable?
● JDK (ObjectInputStream)
● XStream (XML, JSON)
● Jackson (JSON)
● Genson (JSON)
● JSON-IO (JSON)
● FlexSON (JSON)
Libraries have different behavior about what classes they’ll deserialize 
and what “magic methods” can automatically be invoked. Keep this in 
mind for later…
! Spend some time reading Muñoz and Mirosh!
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Finding Vulnerabilities
● Finding potential vulnerabilities is similar to 
finding many application security issues:
○ Does untrusted input (e.g. a request’s body or input stream) 
flow into one of the sinks for this vulnerability type?
○ Existing static and dynamic tools are pretty good at 
discovery
ObjectInputStream.readObject()
XStream.fromXML()
ObjectMapper.readValue()
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Remediation Options
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● Why not use a better serialization strategy?
Remediation Options
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● Why not use a better serialization strategy?
○ “It’s 2016, there are better options.” -Luca Carettoni
Remediation Options
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● Why not use a better serialization strategy?
○ “It’s 2016, there are better options.” -Luca Carettoni
Remediation Options
Automated Discovery of Deserialization Gadget Chains
Ian Haken
● Why not use a better serialization strategy?
○ “It’s 2016, there are better options.” -Luca Carettoni
Remediation Options
● Is it worth the effort to remediate? How should we prioritize 
remediation?
Is my deserialization vulnerability exploitable?
Automated Discovery of Deserialization Gadget Chains
Ian Haken
Finding Exploits
● Known exploits in a few projects:
○ ysoserial: Usually limited to chains in particular libraries and 
focused on JDK ObjectInputStream
○ marshalsec: Wider breadth of exploits for alternative deserialization 
libraries
● But what about…
○ The specific combination of libraries on my classpath?