    Building API
    Building reference CLI
    Building plugins
     flannel
     bridge
     ipvlan
     macvlan
     ptp
     dhcp
     host-local
    ```
5.  现在，我们将执行`priv-net-run.sh`脚本，以创建带有 CNI 插件:
    ```
    ~/cni/scripts$ sudo CNI_PATH=$CNI_PATH ./priv-net-run.sh ifconfig
    eth0      Link encap:Ethernet  HWaddr 8a:72:75:7d:6d:6c
     inet addr:10.22.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
     inet6 addr: fe80::8872:75ff:fe7d:6d6c/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:1 errors:0 dropped:0 overruns:0 frame:0
     TX packets:1 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:90 (90.0 B)  TX bytes:90 (90.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
    的专用网络
6.  运行一个带有网络名称空间的 Docker 容器，该容器是之前使用 CNI 插件
    ```
    ~/cni/scripts$ sudo CNI_PATH=$CNI_PATH ./docker-run.sh --rm busybox:latest /bin/ifconfig
    eth0      Link encap:Ethernet  HWaddr 92:B2:D3:E5:BA:9B
     inet addr:10.22.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
     inet6 addr: fe80::90b2:d3ff:fee5:ba9b/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:2 errors:0 dropped:0 overruns:0 frame:0
     TX packets:2 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:180 (180.0 B)  TX bytes:168 (168.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
    设置的
# 项目 Calico 的 libnetwork 驱动程序
Calico 为连接容器、虚拟机或裸机提供了可扩展的网络解决方案。Calico 使用可扩展的 IP 网络原理作为第 3 层方法来提供连接。Calico 可以在没有覆盖或封装的情况下部署。 Calico 服务应该作为容器部署在每个节点上，并为每个容器提供自己的 IP 地址。它还处理所有必要的 IP 路由、安全策略规则以及跨节点集群的路由分配。
为了提供更好的网络解决方案，卡利科架构包含四个重要组件:
*   Calico worker 流程 Felix 是 Calico 网络的核心，它主要路由主机上的工作负载并提供所需的连接。它还为传出端点流量提供内核接口。
*   BIRD，路由分发开源 BGP，在主机之间交换路由信息。由 BIRD 拾取的内核端点被分发到 BGP 对等体，以便提供主机间路由。两个 BIRD 进程在 calico 节点容器中运行，一个用于 IPv4 (bird)，一个用于 IPv6 (bird6)。
*   Confd 是一个为 BIRD 自动生成配置的模板化过程，它监控 etcd 存储中 BGP 配置的任何变化，例如日志级别和 IPAM 信息。Confd 还根据 etcd 的数据动态生成 BIRD 配置文件，并在更新应用于数据时自动触发。每当配置文件更改时，Confd 都会触发 BIRD 加载新文件。
*   用于配置和启动 Calico 服务的命令行【calicoctl 甚至允许数据存储区(etcd)定义和应用安全策略。该工具还为 Calico 配置的一般管理提供了简单的界面，无论 Calico 是在虚拟机、容器还是裸机上运行。calicoctl 支持以下命令:
    ```
    $ calicoctlOverride the host:port of the ETCD server by setting the environment variable ETCD_AUTHORITY [default: 127.0.0.1:2379]Usage: calicoctl  [...]
    status            Print current status information
    node              Configure the main calico/node container and establish Calico networking
    container         Configure containers and their addresses
    profile           Configure endpoint profiles
    endpoint          Configure the endpoints assigned to existing containers
    pool              Configure ip-pools
    bgp               Configure global bgp
    ipam              Configure IP address management
    checksystem       Check for incompatibilities on the host system
    diags             Save diagnostic information
    version           Display the version of calicoctl
    config            Configure low-level component configuration
    See 'calicoctl  --help' to read about a specific subcommand.
    ```
根据印花布仓库([https://github.com/projectcalico/calico-containers](https://github.com/projectcalico/calico-containers))的官方 GitHub 页面，存在以下印花布集成:
*   Calico as Docker 网络插件
*   没有 Docker 网络的 Calico
*   卡利科与 Kubernetes
*   带介子的印花棉布
*   带有 Docker 群的印花棉布
下图显示了卡利科建筑:
![Project Calico's libnetwork driver](img/00054.jpeg)
在接下来的教程中我们将在搭载 Docker 1.9 的单节点机器上运行 Calico 的手动设置，最终将 libnetwork 从其实验版本带到主版本，Calico 可以直接配置，无需其他 Docker 实验版本:
1.  获取 etcd 最新版本，并在默认端口 2379 上进行配置:
    ```
    $ curl -L https://github.com/coreos/etcd/releases/download/v2.2.1/etcd-v2.2.1-linux-amd64.tar.gz -o etcd-v2.2.1-linux-amd64.tar.gz
     % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
     Dload  Upload   Total   Spent    Left  Speed
    100   606    0   606    0     0    445      0 --:--:--  0:00:01 --:--:--   446
    100 7181k  100 7181k    0     0   441k      0  0:00:16  0:00:16 --:--:-- 1387k
    $ tar xzvf etcd-v2.2.1-linux-amd64.tar.gz
    etcd-v2.2.1-linux-amd64/
    etcd-v2.2.1-linux-amd64/Documentation/
    etcd-v2.2.1-linux-amd64/Documentation/04_to_2_snapshot_migration.md
    etcd-v2.2.1-linux-amd64/Documentation/admin_guide.md
    etcd-v2.2.1-linux-amd64/Documentation/api.md
    contd..
    etcd-v2.2.1-linux-amd64/etcd
    etcd-v2.2.1-linux-amd64/etcdctl
    etcd-v2.2.1-linux-amd64/README-etcdctl.md
    etcd-v2.2.1-linux-amd64/README.md
    $ cd etcd-v2.2.1-linux-amd64
    $ ./etcd
    2016-01-06 15:50:00.065733 I | etcdmain: etcd Version: 2.2.1
    2016-01-06 15:50:00.065914 I | etcdmain: Git SHA: 75f8282
    2016-01-06 15:50:00.065961 I | etcdmain: Go Version: go1.5.1
    2016-01-06 15:50:00.066001 I | etcdmain: Go OS/Arch: linux/amd64
    Contd..
    2016-01-06 15:50:00.107972 I | etcdserver: starting server... [version: 2.2.1, cluster version: 2.2]
    2016-01-06 15:50:00.508131 I | raft: ce2a822cea30bfca is starting a new election at term 5
    2016-01-06 15:50:00.508237 I | raft: ce2a822cea30bfca became candidate at term 6
    2016-01-06 15:50:00.508253 I | raft: ce2a822cea30bfca received vote from ce2a822cea30bfca at term 6
    2016-01-06 15:50:00.508278 I | raft: ce2a822cea30bfca became leader at term 6
    2016-01-06 15:50:00.508313 I | raft: raft.node: ce2a822cea30bfca elected leader ce2a822cea30bfca at term 6
    2016-01-06 15:50:00.509810 I | etcdserver: published {Name:default ClientURLs:[http://localhost:2379 http://localhost:4001]} to cluster 7e27652122e8b2ae
    ```
2.  打开新终端并通过运行以下命令
    ```
    $ service docker stop
    $ docker daemon --cluster-store=etcd://0.0.0.0:2379
    INFO[0000] [graphdriver] using prior storage driver "aufs"
    INFO[0000] API listen on /var/run/docker.sock
    INFO[0000] Firewalld running: false
    INFO[0015] Default bridge (docker0) is assigned with an IP address 172.16.59.1/24\. Daemon option --bip can be used to set a preferred IP address
    WARN[0015] Your kernel does not support swap memory limit.
    INFO[0015] Loading containers: start.
    .....INFO[0034] Skipping update of resolv.conf file with ipv6Enabled: false because file was touched by user
    INFO[0043] Loading containers: done.
    INFO[0043] Daemon has completed initialization
    INFO[0043] Docker daemon       commit=a34a1d5 execdriver=native-0.2 graphdriver=aufs version=1.9.1
    INFO[0043] GET /v1.21/version
    INFO[0043] GET /v1.21/version
    INFO[0043] GET /events
    INFO[0043] GET /v1.21/version
    ```
    用 etcd 键值存储配置 Docker 守护程序
3.  现在，在新的终端中，按照以下方式启动 Calico 容器:
    ```
    $ ./calicoctl node --libnetwork
    No IP provided. Using detected IP: 10.22.0.1
    Pulling Docker image calico/node:v0.10.0
    Calico node is running with id: 79e75fa6d875777d31b8aead10c2712f54485c031df50667edb4d7d7cb6bb26c
    Pulling Docker image calico/node-libnetwork:v0.5.2
    Calico libnetwork driver is running with id: bc7d65f6ab854b20b9b855abab4776056879f6edbcde9d744f218e556439997f
    $ docker ps
    CONTAINER ID        IMAGE                           COMMAND         CREATED             STATUS              PORTS               NAMES
    7bb7a956af37        calico/node-libnetwork:v0.5.2   "./start.sh"           3 minutes ago       Up 3 minutes             calico-libnetwork
    13a0314754d6        calico/node:v0.10.0             "/sbin/start_runit"    3 minutes ago       Up 3 minutes             calico-node
    1f13020cc3a0        weaveworks/plugin:1.4.1         "/home/weave/plugin"   3 days ago          Up 3 minutes             weaveplugin
    ```
4.  使用最近在 Docker CLI 中引入的`docker network`命令创建卡利科桥
5.  Start the `busybox` container connected to the Calico `net1` bridge:
    ```
    $docker run --net=net1 -itd --name=container1 busybox
    1731629b6897145822f73726194b1f7441b6086ee568e973d8a88b554e838366
    $ docker ps
    CONTAINER ID        IMAGE                           COMMAND                CREATED             STATUS              PORTS               NAMES
    1731629b6897        busybox                         "sh"                   6 seconds ago       Up 5 seconds                            container1
    7bb7a956af37        calico/node-libnetwork:v0.5.2   "./start.sh"           6 minutes ago       Up 6 minutes                            calico-libnetwork
    13a0314754d6        calico/node:v0.10.0             "/sbin/start_runit"    6 minutes ago       Up 6 minutes                            calico-node
    1f13020cc3a0        weaveworks/plugin:1.4.1         "/home/weave/plugin"   3 days ago          Up 6 minutes                            weaveplugin
    $ docker attach 1731
    / #
    / # ifconfig
    cali0     Link encap:Ethernet  HWaddr EE:EE:EE:EE:EE:EE
     inet addr:10.0.0.2  Bcast:0.0.0.0  Mask:255.255.255.0
     inet6 addr: fe80::ecee:eeff:feee:eeee/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:29 errors:0 dropped:0 overruns:0 frame:0
     TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:1000
     RX bytes:5774 (5.6 KiB)  TX bytes:648 (648.0 B)
    eth1      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02
     inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
     inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:21 errors:0 dropped:0 overruns:0 frame:0
     TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:4086 (3.9 KiB)  TX bytes:648 (648.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
    在容器内部，我们可以看到容器现在连接到了 Calico 桥，并且可以连接到部署在同一个桥上的其他容器。
# 总结
在这一章中，我们研究了 Docker 网络的一些更深层次和更概念性的方面，其中之一是 libnetworking，这是随着 Docker 1.9 的发布而已经成型的未来 Docker 网络模型。在解释 libnetworking 时，我们还研究了 CNM 模型及其各种对象和组件及其实现代码片段。接下来，我们详细研究了 CNM 的驱动程序，主要驱动程序是覆盖驱动程序，部署是游民设置的一部分。我们还研究了容器与覆盖网络以及 Docker Swarm 和 Docker Machine 的独立集成。在下一节中，我们解释了 CNI 接口、它的可执行插件，以及用 CNI 插件配置 Docker 网络的教程。
在最后一节中，将详细介绍 Calico 项目，该项目提供了一个基于 libnetwork 之外的可扩展网络解决方案，并主要提供与 Docker、Kubernetes、Mesos、裸机和虚拟机的集成。