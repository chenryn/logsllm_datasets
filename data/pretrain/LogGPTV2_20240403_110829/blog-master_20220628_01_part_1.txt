## bytebase x PolarDB x pigsty的圆桌趴 - DBA福音, SQL审核|审查 最佳实践  
### 作者  
digoal  
### 日期  
2022-06-28  
### 标签  
PostgreSQL , SQL审查  
----  
## 背景  
[bytebase x PolarDB x pigsty的圆桌趴](https://zhuanlan.zhihu.com/p/533832715)  
## 1、PolarDB开源项目介绍  
PolarDB是什么?  
- 兼容MySQL与PostgreSQL.  
- 开源、云原生、分布式、存算分离数据库.  
- OLTP+OLAP: HTAP.  
- Apache 2.0 开源协议.  
PolarDB开源官网:  
- https://www.polardbx.com/home  
- https://polardbpg.com/home  
- 开源项目地址: https://github.com/ApsaraDB  
## 2、PolarDB开源生态介绍  
开源的核心指标是什么?  
- 通过开源项目, 建立用户、开发者、生态企业的利益共同体. 促进利益共同体的团结协作, 发挥各自比较优势, 起到滚雪球的效果, 共同提升ROI, 共同繁荣发展.  
开源生态建设目标是什么?  
- 打通产业链上下游, 共同建设生态, 与生态一起为产业用户提供更好的全栈式服务, 为企业用户更好的降本提效.  
- 包括但不限于高校、机构、硬件厂商、操作系统、芯片、ISV、数据库生态工具、服务商、集成商、数据库厂商、开源社区、开源项目、行业协会、企业用户、IT媒体等.  
    - 提升最终用户三个方面的价值, 业务(降本提效)、组织(发展开源人才)、文化(共同协作的开源文化氛围)三个方面.  
生态的繁荣就像滚雪球一样, 是长期的正和博弈游戏, 受益的是所有参与方以及用户.  
- 作为产业链的公司, 通过参与开源生态, 建立生态壁垒, 降低研发成本, 背靠背降低研发风险, 触达更广的用户群体, 提升用户粘性.  
- 作为企业用户使用开源, 降本增效、使用的开源系统相当于接入了一个互相兼容的生态, 用户的多套系统之间的兼容性更好.  
- 作为大型龙头企业用户使用开源, 建立研发团队, 自主掌控开源代码、把握开源项目发展方向, 同时撬动社会其他资源共同为开源项目贡献代码, 实现滚雪球的长期降本提效的效果(典型的代表项目:PostgreSQL).  
- 作为学生, 参与到开源数据库的建设, 提issue, 发论文, review代码, 参与邮件组讨论等, 可以提升学生在数据库圈子的影响力, 未毕业已经积累了数据库的工程能力, 同时更有可能被用人企业发掘.  
希望产业链中的各方一起发挥各自比较优势, 共同建设开源生态, 打造全球影响力, 掀起全球化大规模协作的新浪潮.  
## 3、什么是SQL审查  
对于核心库:  
- 业务上线发布时, 可能涉及到数据库的变更操作(DDL、DML、DCL、DSL等等), 这些变更的SQL在提交给数据库执行前, 通常需要经过检查.  
- 在正常使用过程中, DBA、开发者、测试人员、分析师可能有查询数据、产出报表等需求, 这些SQL通常也需要经过检查.  
## 4、为什么需要SQL审查  
某些SQL可能存在风险, 例如DROP database删库跑路, delete|update 未带限定条件导致所有数据被删除或更新, 未优化的SQL引起数据库负载异常从而影响业务, 甚至雪崩(例如未创建索引的高并发SQL, 消耗光资源).  
SQL审查的核心目的是提前发现SQL风险.  
## 5、如何进行人工SQL审查  
建立SQL规范(数据库按业务分级, 不同等级的数据库, 建立强制、建议等SQL规约), 使用数据库必须遵循规范, 提前避免问题.  
### 1 基于规则的方法  
1、静态规则：SQL，风险等级，不同等级应该审批到哪个级别。  
例如  
```  
drop table  
truncate table  
drop database  
drop user  
drop schema  
delete|update table where true (无条件 或 条件确定为true)  
```  
等等，可以参考 https://www.postgresql.org/docs/current/sql-commands.html 对sql command进行分级。  
静态规则的弊端, 可能无法覆盖所有场景，例如:  
- 1、`select xx from t where x=x`，这样的query，风险等级是什么呢？如果是个主键查询，风险等级可能较低，如果没有主键呢或者没有索引呢？那么还需要考虑查询频率，记录数等。  
- 2、某些慢SQL没有高并发或低并发的输入, 如果是高并发的慢SQL可能风险就较大, 如果是低并发的慢SQL风险可能就较小.  
2、动态规则，首先需要校准代价，然后使用explain来获得被评估sql等执行时间、影响行数等。如何评估？  
通过执行计划（返回记录数，耗时（代价校准后可以转换为时间）等）可以辅助进行风险判定。  
- [《优化器成本因子校对 - PostgreSQL explain cost constants alignment to timestamp》](../201311/20131126_03.md)  
- [《优化器成本因子校对(disk,ssd,memory IO开销精算) - PostgreSQL real seq_page_cost & random_page_cost in disks,ssd,memory》](../201404/20140423_01.md)  
评估可以在任意几个地方执行, 根据实际需要选择即可:  
- 将生产库等统计信息导入到审计库，通过explain，分析执行计划，对sql风险进行归类。  
- 在主库直接explain。  
- 在从库explain。  
例子:  
维度，  
- query  
    - 执行时间，  
    - 影响行数，  
    - 资源消耗，io，cpu，网络，  
    - 锁粒度  
- dml  
    - 执行时间，  
    - 影响行数，  
    - 资源消耗，io，cpu，网络，  
    - 锁粒度  
- ddl  
    - 影响行数，  
    - 是否造成rewrite table，  
    - 是否可以用 concurrently 选项避免最大粒度的排他锁(堵塞select,update,delete,insert等操作)，  