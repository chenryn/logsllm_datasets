### 优化后的文本

---

## Page 223
### 生成脚本
#### 112A
该脚本提供了多种选项集：

- 在初始文件中使用 Shell 风格的注释虽然方便，但可以通过 `STRIPCOMMENTS` 命令将其移除。假设这些注释字符未出现在文件中：
  ```bash
  STRIPCOMMENTS='sed -e "s/#.*$//"'
  ```

- 我们还需要一个过滤器，将数据流格式化为缩进形式（更美观的输出），并将换行符替换为空格：
  ```bash
  JOINLINES='tr "\n" " "'
  INDENT='awk "{print \t\$0}"'
  ```

- 接下来是两个可选的初始文件定义：
  ```bash
  defaultdirectories="$BUILDHOME/directories"
  defaultuserhosts="$BUILDHOME/userhosts"
  ```

- 最后初始化源目录列表：
  ```bash
  SRCDIRS=$(STRIPCOMMENTS $defaultdirectories 2> /dev/null)
  ```
  由于命令替换会将换行符转换为空格，并以空白字符分隔排列，因此在初始化文件中的目录可以写成一行一个或多个目录。

- 如果用户自定义文件不存在，`STRIPCOMMENTS` 会在 `SRCDIRS` 中产生一个空字符串。因此，我们需要测试这种情况，并将 `SRCDIRS` 重新设置为合理的默认值列表：
  ```bash
  if [ -z "$SRCDIRS" ]; then
    SRCDIRS="
      /usr/local/src
      /usr/local/gnu/src
      $HOME/gnu/src
      $HOME/src
      /tmp
      /usr/tmp
      /var/tmp
    "
  fi
  ```
  当前行末尾的 `&&` 运算符后面接反斜杠是 C-Shell 的要求，但在 Bourne-Shell 中同样有效。当前目录（`.`）应包含在列表中，因为我们可能只是将要构建的包文件下载到任意位置。

---

## Page 224
### 212
#### 第8章
现在所有初始化工作已完成，我们已经准备好处理命令行选项。这个任务在所有 Shell 脚本中的处理方式相同：当参数存在时，选择合适的 `case` 分支来处理该参数，然后移动到下一个参数并继续循环。任何需要消耗额外参数的分支都会进行移位。我们允许单个和双个连字号的选项形式，并且它们可以缩短为唯一的前缀：

```bash
while [ $# -gt 0 ]; do
  case $1 in
    --all | --al | --a | -all | -al | -a )
      shift
      ALLTARGETS="$1"
      ;;
    --check | --che | --ch | -check | -che | -ch )
      shift
      CHECK="$1"
      ;;
    --configure | --configur | --configu | --confi | -configure | -configur | -configu | -confi )
      shift
      CONFIGUREFLAGS="$1"
      ;;
    --environment | --environmen | --environme | --environm | --environ | --enviro | --envir | --envi | --env | --en | --e | -environment | -environmen | -environme | -environm | -environ | -enviro | -envir | -envi | -env | -en | -e )
      shift
      EXTRAENVIRONMENT="$1"
      ;;
    --help | -h )
      usage_and_exit
      ;;
    * )
      echo "Unknown option: $1"
      usage_and_exit
      ;;
  esac
  shift
done
```

如果 `userhosts` 变量为空，有两种可能的操作。如果 `ALTUSERHOSTS` 已设置，则保持不变；否则，将其设置为默认文件。然后，我们将 `ALTUSERHOSTS` 文件的内容赋值给 `userhosts` 变量，作为最终列表：

```bash
if [ -z "$userhosts" ]; then
  if [ -n "$ALTUSERHOSTS" ]; then
    userhosts=$(STRIPCOMMENTS $ALTUSERHOSTS 2> /dev/null)
  else
    ALTUSERHOSTS="$BUILDHOME/userhosts"
    userhosts=$(STRIPCOMMENTS $ALTUSERHOSTS 2> /dev/null)
  fi
fi
```

在开始实际操作之前，我们需要确保至少有一个主机。为了避免不必要的目录和日志文件创建，如果 `userhosts` 为空，则提示用户程序用法：

```bash
if [ -z "$userhosts" ]; then
  usage_and_exit
fi
```

最后是外部循环，用于处理包。如果参数列表为空，则不会执行循环体，这正是我们所需要的。这个循环很大，所以我们一次只介绍几行：

```bash
for p in $@; do
  find_package "$p"
  if [ -z "$PARFILE" ]; then
    echo "Package not found: $p" >&2
    continue
  fi
  # 继续处理...
done
```

---

## Page 228
### 216
#### 第8章
另一方面，如果未提供日志目录，或者提供的目录不可写入，我们会尝试在找到包存档文件的目录下创建名为 `logs` 的子目录。如果无法创建或写入，则尝试将日志文件放在用户的 `$HOME/.build/logs` 目录或临时目录内。我们尽量避免使用临时目录 `/tmp`，因为其内容通常在重启后会被删除，所以仅作为最后手段使用。

```bash
LOGDIR="$altlogdir"
if [ -z "$LOGDIR" ] || ! [ -d "$LOGDIR" ] || ! [ -w "$LOGDIR" ]; then
  for LOGDIR in $(dirname "$PARFILE")/logs "$BUILDOOME/logs/$p" /usr/tmp /var/tmp /tmp; do
    if [ -d "$LOGDIR" ] && [ -w "$LOGDIR" ]; then
      break
    fi
  done
fi
```

注意：`dirname` 命令与 `basename` 命令一起使用，`dirname` 会截取其参数中最后一个斜杠之后的所有字符，从完整路径名称中恢复一个目录路径，并将结果显示到标准输出：

```bash
$ dirname /usr/local/bin/nawik
/usr/local/bin
```

如果参数中没有斜杠，`dirname` 会产生一个点号（`.`）表示当前目录：

```bash
$ dirname whimsical-name
.
```

`dirname` 将其参数视为纯文本字符串，而不检查目录是否存在于文件系统中。如果省略参数，`dirname` 的行为由运行时定义。

我们会告知用户日志文件的位置，并将其记录在电子邮件中，因为用户可能会在大型包构建完成之前忘记日志文件的位置：

```bash
msg="Check build logs for $p in $(hostname):$LOGDIR"
echo "$msg"
```

主循环的最后一部分是通过嵌套循环以并行方式启动每台远程主机上的当前包构建。我们再次将大部分工作交给函数处理，这也会结束最外层的循环：

```bash
for u in $userhosts; do
  build_one "$u"
done
```

`build_one` 的调用是连续的，因此我们可以更容易地识别通信问题。然而，它们在远程构建主机上启动的工作以后台方式执行，因此 `build_one` 实际上很快完成。

现在，程序已完成其工作。最后的语句是将累加状态码限制在 125 以内，并将状态码返回给调用者：

```bash
[ $EXITCODE -gt 125 ] && EXITCODE=125
exit $EXITCODE
```

我们已将许多构建过程留在后台执行，将它们的输出信息不断累积在相关的日志文件中，并选择无论结果如何都退出，从而使 `build-all` 执行得非常快。

有人可能会倾向于另一种设计方式，即等待所有后台进程完成后再返回。要改成这种方式也很简单，只需在最后的 `exit` 语句之前插入以下语句：

```bash
wait
```

我们不认为这种方式好，因为它会挂起终端窗口直到所有构建完成为止，或者如果 `build-all` 在后台执行，它的完成通知可能会与其他输出混合，难以找到。

---

希望这些修改使文本更加清晰、连贯和专业。如果有进一步的修改需求，请告诉我！