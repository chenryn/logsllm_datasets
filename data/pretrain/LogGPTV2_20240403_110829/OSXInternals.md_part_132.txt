commands from the pool and returning commands to the pool in a serialized manner.
10.2.6.3. Miscellaneous Classes
The I/O Kit also contains the following miscellaneous classes.
 IONotifier is an abstract base class used for implementing IOService notification requests. It
provides methods for enabling, disabling, and removing notification requests.
 IOPMpriv encapsulates private power management instance variables for IOService objects.
 IOPMprot encapsulates protected power management instance variables for IOService objects.
 IOKernelDebugger acts as a kernel debugger nub, interfacing with the Kernel Debugging Protocol
(KDP) module and dispatching KDP requests to the debugger device, which is typically a subclass of
IOEthernetController.
 IOUserClient is used to implement a mechanism for communicating between in-kernel I/O Kit
objects and user-space programs.
 IODataQueue implements a queue that can be used for passing arbitrary, variable-size data from the
kernel to a user task. The queue instance can also notify the user task of data availability.
10.2.7. The Work Loop
The I/O Kit's work-loop abstraction, which is implemented by the IOWorkLoop class, provides a
synchronization and serialization mechanism to drivers. An IOWorkLoop instance is essentially a thread of
control. A key feature of the class is that one or more event sources can be added to it. Each event represents
work to be done by the loop, hence the name. Examples of events are command requests, interrupts, and
timers. In general, a source can represent any event that should awaken a driver's work loop to perform some
work. Each event source has an associated action, the execution of which manifests the concept of work.
IOWorkLoop incorporates internal locking to ensure that only one unit of work is being processed at a time in
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 10 of 79
a given instance of the classall event sources acquire the work loop's mutex (or close the work-loop gate)
before executing the associated callbacks. Therefore, it is guaranteed that only one action can execute at a
time in a work loop. In this sense, the IOWorkLoop class provides the semantics of a master lock for a given
driver stack. In the case of interrupts, the work loop's thread acts as the context thread for secondary
interrupts (a secondary interrupt is a deferred version of a primary interrupt).
A driver does not usually need to create its own IOWorkLoop instance. It can use its provider's work loop,
which can be retrieved using the getWorkLoop() method of the IOService object representing the provider.
If the driver does have a current work loop, getWorkLoop() will return that; otherwise, it will walk up the
provider chain, calling itself recursively until it finds a valid work loop.
As Figure 103 shows, an IOWorkLoop's main functiontHReadMain()consists of three distinct loops: an
outermost semaphore clear-and-wait loop, a middle loop that terminates when there is no more work, and an
inner loop that traverses the chain of events looking for work. An event source indicates that there is more
work to be done through the checkForWork() method implemented by a subclass of IOEventSource.
checkForWork() is supposed to check the internal state of the subclass and also call out to the action. If
there is more work, the middle loop repeats. Note that the openGate() and closeGate() methods are
simple wrappers around IORecursiveLockUnlock() and IORecursiveLockLock(), respectively, with the
recursive mutex lock being a protected member of the class.
Figure 103. The main function of the IOWorkLoop class
// iokit/Kernel/IOWorkLoop.cpp
void
IOWorkLoop::threadMain()
{
...
// OUTER LOOP
for (;;) {
...
closeGate();
if (ISSETP(&fFlags, kLoopTerminate))
goto exitThread;
// MIDDLE LOOP
do {
workToDo = more = false;
// INNER LOOP
// look at all registered event sources
for (IOEventSource *event = eventChain; event;
event = event->getNext()) {
...
// check if there is any work to do for this source
// a subclass of IOEventSource may or may not do work here
more |= event->checkForWork();
...
}
} while (more);
...
openGate();
...
if (workToDo)
continue;
else
break;
}
exitThread:
workThread = 0;
free();
IOExitThread();
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 11 of 79
Let us look at an example of using IOWorkLoop in a hypothetical driverlet us call it SomeDummyDriverthat
uses IOWorkLoop with two event sources: an interrupt and a command gate. In its start() method, the
driver first creates and initializes its own work loop by calling the IOWorkLoop class' workLoop() method.
In most cases, a driver higher up in a driver stack could use its provider's work loop.
The driver creates an IOInterruptEventSource object. In this example, the provider's IOService
represents the source of interrupts, as specified by the last argument to interruptEventSource(). If this
argument is NULL, the event source assumes that its interruptOccurred() method will be called by the
client somehow. Next, the driver adds the interrupt event source to be monitored by the work loop. It then
calls the work loop's enableAllInterrupts() method, which calls the enable() method in all interrupt
event sources.
The driver also creates an IOCommandGate object, which inherits from IOEventSource, for single-threaded
execution of commands, with commandGateHandler()a static functionbeing the designated action for the
command gate. commandGateHandler() ensures that the object type passed to it is an instance of
SomeDummyDriver and dispatches commands based on its first argument. Actions that are performed
through the runCommand() or runAction() methods of IOCommandGate are guaranteed to be executed in a
single-threaded manner.
Figure 104 shows the relevant portions of code from SomeDummyDriver.
Figure 104. Using IOWorkLoop in a driver
// SomeDummyDriver.h
class SomeDummyDriver : public SomeSuperClass
{
OSDeclareDefaultStructors(SomeDummyDriver)
private:
...
IOWorkLoop *workLoop;
IOCommandGate *commandGate;
IOInterruptEventSource *intSource;
...
static void handleInterrupt(OSObject *owner, IOInterruptEventSource *src,
int count);
static IOReturn commandGateHandler(OSObject *owner, void *arg0,
void *arg1, void *arg2, void *arg3);
...
typedef enum {
someCommand = 1,
someOtherCommand = 2,
...
};
protected:
...
public:
...
virtual void free(void);
virtual bool start(IOService *provider);
virtual bool free(void);
...
IOreturn somePublicMethod_Gated(/* argument list */);
};
bool
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 12 of 79
SomeDummyDriver::start(IOService *provider)
{
if (!super::start(provider))
return false;
workLoop = IOWorkLoop::workLoop(); // Could also use provider->getWorkLoop()
...
intSource = IOInterruptEventSource::interruptEventSource(
this,
// Handler to call when an interrupt occurs
(IOInterruptEventAction)&handleInterrupt,
// The IOService that represents the interrupt source
provider);
...
workLoop->addEventSource(intSource);
...
workLoop->enableAllInterrupts();
...
commandGate = IOCommandGate::commandGate(
this, // Owning client of the new command gate
commandGateHandler); // Action
...
workLoop->addEventSource(commandGate);
}
void
SomeDummyDriver::free(void)
{
...
if (workLoop) {
if (intSource) {
workLoop->removeEventSource(intSource);
intSource->release();
intSource = 0;
}
if (commandGate) {
workLoop->removeEventSource(commandGate);
commandGate->release();
commandGate = 0;
}
workLoop->release(); // Since we created it
}
...
super::free();
}
/* static */ void
SomeDummyDriver::handleInterrupt(OSObject *owner,
IOInterruptEventSource *src,
int count)
{
// Process the "secondary" interrupt
}
/* static */ IOReturn
SomeDummyDriver::commandGateHandler(OSObject *owner,
void *arg0,
void *arg1,
void *arg2,
void *arg3)
{
IOReturn ret;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 13 of 79
SomeDummyDriver *xThis = OSDynamicCast(SomeDummyDriver, owner);
if (xThis == NULL)
return kIOReturnError;
else {
// Use arg0 through arg3 to process the command. For example, arg0
// could be a command identifier, and the rest could be arguments
// to that command.
switch ((int)arg0) {
case someCommand:
ret = xThis->somePublicMethod_Gated(/* argument list */);
...
break;
case someOtherCommand:
...
break;
...
}
return ret;
}
IOReturn
SomeDummyDriver::somePublicMethod_Gated(/* argument list */)
{
// Calls the current action in a single-threaded manner
return commandGate->runCommand(/* argument list */);
}
10.2.8. The I/O Registry
The I/O Registry can be seen as an information hub between the kernel and user spaces. It is a kernel-
resident, in-memory database that is both constructed and maintained dynamically. Its contents include the
set of live I/O Kit objectssuch as families, nubs, and driversin a running system. On discovering new
hardware, whether at boot time or at some point in a running system, the I/O Kit attempts to find a matching
driver for the hardware and load it. If the driver is loaded successfully, the I/O Registry is updated to reflect
the newly added or updated provider-client relationships between driver objects. The I/O Registry also
tracks various other types of information, such as that related to power management and the state of a
network controller. Consequently, the I/O Registry changes in various scenariosfor example, when a system
wakes up from sleep.
The I/O Registry is structured as an inverted tree, each of whose nodes is an object ultimately derived from
the IORegistryEntry class. The tree's root node corresponds to the system's main logic board. A stack of
I/O Kit objects can be visualized as a branch in the tree. A typical node in the tree represents a driver object,
with each node having one or more properties, which can be of various types and in turn are represented by
various data types such as numbers, strings, lists, and dictionaries. A node's properties may have multiple
sources, with a typical source being the driver's personality, which could be seen as a set of key-value pairs
describing the driver. Properties may also represent configurable information, statistics, or arbitrary driver
state.
There can be nodes in the I/O Registry that are contrary to the definition of a tree. For example, in the case
of a RAID disk controller, several disks appear as one logical volume, with the consequence that some
nodes have multiple parents.
The two-dimensional tree structure of the I/O Kit is projected onto multiple conceptual I/O Kit planes, such
as the ones listed here.
The Service plane (IOService), the most general plane, captures the relationships of all I/O Kit
objects to their ancestors.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 14 of 79
The Device Tree plane (IODeviceTree) captures the hierarchy of the Open Firmware device tree.
The Power plane (IOPower) captures the dependencies between I/O Kit objects with respect to power.
It is possible to determine, by traversing the connections in this plane, how power flows from one
node to another (say, from a provider to a client). In particular, the effects of turning a given device's
power on or off can also be visualized.
The FireWire plane (IOFireWire) captures the hierarchy of FireWire devices.
The USB plane (IOUSB) captures the hierarchy of USB devices.
The sets of branches and nodes in different I/O Kit planes are not identical because each plane is a
representation of different provider-client relationships between I/O Kit objects. Even though all I/O
Registry objects exist on all planes, only connections that exist in a particular plane's definition are
expressed in that plane.
The I/O Registry can be examined through the command-line program ioreg or by using graphical tools
such as IORegistryExplorer.app (part of Apple Developer Tools) and Mr. Registry.app (part of the
FireWire SDK).
10.2.9. The I/O Catalog
Whereas the I/O Registry maintains the collection of objects active in the running system, the I/O Catalog
maintains the collection of available driversit is an in-kernel dynamic database containing all I/O Kit driver
personalities. The IOService class uses this resource when matching devices to their associated drivers. In
particular, on discovering a device, a nub consults the I/O Catalog to retrieve the list of all drivers belonging
to the device's family. The IOCatalogue class provides methods for initializing the catalog, adding drivers,
removing drivers, finding drivers based on caller-provided information, and so on.
During bootstrapping, the I/O Catalog is initialized from a list of built-in catalog entries. The list is
represented by the gIOKernelConfigTables string [iokit/KernelConfigTables.cpp], which holds the
built-in drivers' serialized information. Table 101 shows the members of the list. Much of the I/O Catalog's
functionality is implemented in libsa/catalogue.cpp.
Table 101. Initial Entries in the I/O Catalog
IOClass IOProviderClass IONameMatch
IOPanicPlatform IOPlatformExpertDevice
AppleCPU IOPlatformDevice cpu
AppleNMI AppleMacIODevice programmer-switch
AppleNVRAM AppleMacIODevice nvram
IOPanicPlatform represents a catch-all Platform Expert that matches if no legitimate IOPlatformDevice
matches. The start routine of this class causes a kernel panic with a message indicating that no driver for the
unknown platform could be found.
10.2.10. I/O Kit Initialization
We discussed I/O Kit initialization in Section 5.6. As shown in Figure 514, the bulk of I/O Kit initialization
is performed by StartIOKit() [iokit/Kernel/IOStartIOKit.cpp]. OSlibkernInit()
[libkern/c++/OSRuntime.cpp] initializes a kmod_info structure (Figure 105). The kernel variable that
corresponds to this instance of the kmod_info structure is also called kmod_info. This instance is used to
represent the kernel as a fictitious library kernel-module whose name is __kernel__. The module's starting
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 15 of 79
address is set to the kernel's Mach-O header. As with normal kernel extensions, OSRuntimeInitializeCPP
() [libkern/c++/OSRuntime.cpp] is called to initialize the C++ runtime. The OSBoolean class is also
initialized by OSlibkernInit().
Figure 105. The kmod_info structure
// osfmk/mach/kmod.h
typedef struct kmod_info {
struct kmod_info *next;
int info_version;
int id;
char name[KMOD_MAX_NAME];