input shares fbigi2[(cid:20)] into two distinct bit-vectors that correspond to distinct bits. The indistinguishability
argument asserts that the simulated and real views are statistically close, due to the statistical hiding property
of the commitment scheme that we use within the Pass-Wee trapdoor commitment scheme.
On the other hand, when the receiver is corrupted the simulator extracts its input b based on the ﬁrst
message and the queries to the tokens. We note that extraction must be carried out carefully, as the receiver
commits to each bit bi using (cid:20) matrices and may commit to different bits within each set of matrices (specif-
ically, there may be commitment for which the committed bit is not even well deﬁned). Upon extracting b,
the proof continues by considering a sequence of hybrids where we replace the hardcore bits for the posi-
tions fbi (cid:8) 1gi2[(cid:20)]. Speciﬁcally, these are the positions in which the receiver cannot ask for decommitments
gi2[(cid:20)]. Our proof of indistinguishability relies on the list-decoding ability
and hence does not learn fsi
of the Goldreich-Levin hardcore predicate (cf. Theorem 3.9), that allows extraction of the input from an
adversary that can guess the hardcore predicate on the input with probability signiﬁcantly better than a half.
In case the adversary A issues a transfer query
Proof: We consider each corruption case separately.
(transfer;(cid:1)), S transfers the query to the FgWRAP.
Note that in this protocol there is no need to allow transfer queries to the FgWRAP functionality.
bi(cid:8)1
Simulating the corrupted S. Let A be a PPT adversary that corrupts S then we construct a simulator S
as follows,
1. S invokes A on its input and a random string of the appropriate length.
20
2. Adversary A communicates with functionality FgWRAP on behalf of the corrupted party by send-
ing create messages f(Create; sid; S; R; midl; M1)gl2[4(cid:20)2] and (Create; sid; S; R; midl+1; M2). Then
FgWRAP forwards these tokens to the honest party by sending receipt messages f(Receipt; sid; S; R;
midl; M1)gl2[4(cid:20)2] and (Receipt; sid; S; R; midl+1; M2).
3. Upon receiving acknowledgement messages f(Receipt; sid; S; R; midl;(cid:1))gl2[4(cid:20)2+1] that all [4(cid:20)2] + 1
tokens have been created by A, S emulates the role of the honest receiver using an input bit b = 0.
If come is decommitted correctly, S stores this value and rewinds the adversary to the ﬁrst message.
⊕
Otherwise, S halts and outputs A’s view thus far, sending (?;?) to the ideal functionality.
4. S picks two random bit-vectors (b1; : : : ; b(cid:20)) and (b
′
1; : : : ; b
′
(cid:20)
i = 1.
i=1 b
Let e = e1; : : : ; e(cid:20) denote the decommitment of come obained from the previous step. Then, for all
i; j 2 [(cid:20)], S sends matrix M j
′
(cid:20)) such that
(cid:20)
i=1 bi = 0 and
⊕
(
(
whereas the (1 (cid:0) ei)th column is set
(
w.p. 1
2
to
i where the eith column is deﬁned by
) (cid:8) (cid:17)i;j; v4j(cid:0)3
) (cid:8) (cid:17)i;j; v4j(cid:0)2
(Ext(u4j(cid:0)3
(Ext(u4j(cid:0)2
)
)
i
i
i
i
)
(Ext(u4j(cid:0)1
i
(Ext(u4j
(Ext(u4j(cid:0)1
i
(Ext(u4j
) (cid:8) (cid:17)i;j;
i ) (cid:8) 1 (cid:8) (cid:17)i;j;
v4j(cid:0)1
i
v4j
i )
) (cid:8) 1 (cid:8) (cid:17)i;j; v4j(cid:0)1
i
v4j
i )
i ) (cid:8) (cid:17)i;j;
w.p. 1
2
to
)
)
)
)
, and
:
5. Upon receiving the sender’s message the simulator checks if come is decommitted correctly. Oth-
erwise, S rewinds the adversary to before the ﬁrst message was sent and returns to Step 4. In each
rewinding S uses fresh randomness to generate the receiver’s message. It repeatedly rewinds until the
malicious sender successfully decommits e. If it tries to make more than 2(cid:20)=2 attempts, it simply halts
outputting fail.
′
′
Next, to extract s0, it decommits to b1; : : : ; bn (and to extract s1, it decommits to (b
n). Recall
1; : : : ; b
that to reveal a commitment to a value bi the simulator decommits that row of the matrix that adds
up to bi. Notice that by out construction, such a row always exists and is either the ﬁrst row or the
second row with the probability 1=2. We remark here that the simulator S creates the code of the
actual Turing Machine incorporated in the token as opposed to running the token itself. Furthermore,
each of the two extractions start with the Turing Machine in the same start (as opposed to running the
machine in sequence). This is because the code in the malicious token can be stateful and rewinding
it back to the start state prevents stateful behavior. More precisely, the simulator needs to proceed
exactly as the honest receiver would in either case. If for any b 2 f0; 1g extraction fails for sb, then
following the honest receiver’s strategy the simulator sets sb to the default value ?.
6. Finally, S sends (s0; s1) to the trusted party that computes FOT and halts, outputting whatever A does.
We now prove that the sender’s view in both the simulated and real executions is computationally indis-
tinguishable via a sequence of hybrid executions. More formally,
Lemma 4.3 The following two ensembles are computationally indistinguishable,
{
{
}
IDEALFOT;S(z);I ((cid:20); (s0; s1); b)
REAL
FgWRAP
(cid:5)OT;A(z);I ((cid:20); (s0; s1); b)
(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
}
(cid:20)2N;s0;s1;b;z2f0;1g(cid:3)
c(cid:25)
21
Proof: Roughly speaking, we prove that the joint output distribution of both the receiver and the sender is
computationally indistinguishable. Our proof follows by a sequence of hybrid executions deﬁned below. We
denote by HybridiFOT;Si(z);I ((cid:20); (s0; s1); b) the random variable that corresponds to the simulator’s output
in hybrid execution Hi when running against party Si that plays the role of the receiver according to the
speciﬁcations in this hybrid (where S0 refers to the honest real receiver).
Hybrid H0: In the ﬁrst hybrid, we consider a simulator S0 that receives the real input b of the receiver
and simply follows the protocol as the honest receiver would. Finally, it outputs the view of the
adversary and the receiver’s output as computed in the emulation. It follows from construction that
the distribution of the output of the ﬁrst hybrid is identical to the real execution.
Hybrid H1: In this hybrid, the simulator S1 receives the real input of the receiver and proceeds as fol-
lows. It ﬁrst interacts with the adversary with the actual receiver’s input and checks if it successfully
decommits e. If it does not, then the simulator simply outputs the view of the adversary and ? as the
receiver’s output. Otherwise, it proceeds to a rewinding phase. In this phase, it repeatedly rewinds
the adversary to the ﬁrst message and then samples a new ﬁrst message by committing to b using
fresh randomness. Speciﬁcally, S1 invokes token TKPRF;l
i (for
all i 2 [(cid:20)], j 2 [4(cid:20)] where l encodes (i; j)), and continues rewinding A until it obtains an interaction
in which the adversary successfully decommits to e again. If the simulation makes more than 2(cid:20)=2
rewinding attempts, then it aborts.
We now argue that the view produced in this hybrid is statistically close to the view produced within
the previous hybrid. Observe that if the simulation does not cut off after 2(cid:20)=2 attempts, then the view
is identically distributed to the view in H0. Therefore to show that the views are statistically close, it
sufﬁces to prove that the simulation aborts with negligible probability. Let p be the probability with
which the adversary decommits e correctly when the receiver honestly generates a commitment to b.
We consider two cases:
each time on new random inputs uj
S
2(cid:20)=2 , then the probability that the simulation takes more than 2(cid:20)=2 steps can be computed
)
(
(cid:15) If p > (cid:20)
1 (cid:0) (cid:20)
(cid:15) If p  2(cid:20)2
(cid:0)(cid:20)=2: Since jpb (cid:0) p0j  p0 (cid:0) 2
{
(cid:0)O((cid:20)) = 2(cid:20)2
}
(cid:0)(cid:20)=2 (cid:0) 2
(cid:0)O((cid:20)) > (cid:20)2
(cid:0)(cid:20)=2 =
p0
2
Therefore, p0=pb < 2. Now, since min
attempts is
2(cid:20)=2; 1
pb
= 1
pb
, the expected number of rewinding
(1 (cid:0) p0) + p0 (cid:2) 1
pb
< 3
which is polynomial.
Next, we argue regarding the abort probability. Speciﬁcally, the probability that the number of
attempts exceeds 2(cid:20)=2 is given by
(
)
<
1 (cid:0) (cid:20)
2(cid:20)=2
2(cid:20)=2
= O(e
(cid:0)(cid:20)):
(1 (cid:0) pb)2(cid:20)=2
}
{
Therefore, the probability that the simulator aborts is negligible.
(cid:15) p0 < 2(cid:20)2
(cid:0)(cid:20)=2: Since min
2(cid:20)=2; 1
pb
= 2(cid:20)=2, the expected number of rewinding attempts is
(1 (cid:0) p0) + p0 (cid:2) 2(cid:20)=2 < 1 + 2(cid:20)2
which is polynomial.
The abort probability in this case is bounded by p0 which is negligible.
(cid:3)