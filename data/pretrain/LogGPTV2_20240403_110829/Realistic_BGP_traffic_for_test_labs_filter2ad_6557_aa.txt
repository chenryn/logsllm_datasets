title:Realistic BGP traffic for test labs
author:Olaf Maennel and
Anja Feldmann
Realistic BGP Trafﬁc for Test Labs
Olaf Maennel and Anja Feldmann
Saarland University, Saarbr¨ucken
{olafm,anja}@net.uni-sb.de
ABSTRACT
This paper examines the possibility of generating realistic
routing tables of arbitrary size along with realistic BGP
updates of arbitrary frequencies via an automated tool de-
ployable in a small-scale test lab. Such a tool provides the
necessary foundations to study such questions as: the limits
of BGP scalability, the reasons behind routing instability,
and the extent to which routing instability inﬂuences the
forwarding performance of a router.
We ﬁnd that the answer is aﬃrmative. In this paper we
identify important characteristics/metrics of routing tables
and updates which provide the foundation of the proposed
BGP workload model. Based on the insights of an extensive
characterization of BGP traﬃc according to such metrics
as preﬁx length distributions, fanout, amount of nesting of
routing table preﬁxes, AS path length, number and times
between BGP update bursts and number and times between
BGP session resets, etc., we introduce our prototype tool,
RTG. RTG realizes the workload model and is capable of gen-
erating realistic BGP traﬃc. Through its ﬂexibility and pa-
rameterization RTG enables us to study the sensibilities of
test systems in a repeatable and consistent manner while
still providing the possibility of capturing the diﬀerent char-
acteristics from diﬀerent vantage points in the network.
Categories and Subject Descriptors
C.2.2 [Computer Communication Networks]: Routing
Protocols
General Terms
Measurement, Design, Performance
Keywords
BGP, Workload
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’02, August 19-23, 2002, Pittsburgh, Pennsylvania, USA.
Copyright 2002 ACM 1-58113-570-X/02/0008 ...$5.00.
1.
INTRODUCTION
New features (e.g., fair queuing), new components (e.g.,
new router architectures, new software versions), are incor-
porated into the Internet every day. Ideally each component
should be tested for its correctness and evaluated for its ef-
fectiveness in a test environment before it is deployed in the
network. Unfortunately the ability to test many features is
limited by the simplicity of current test setups. Typical test-
beds consist of a small number of routers and test-traﬃc gen-
erators, e.g., IXIA [1] from Ixiacom, Chariot [2] from Net-
IQ, TeraRouter Tester [3] from Spirent Communication and
RIG [4] from Arsin. Some [2] are only capable of generating
test traﬃc, others [1, 3, 4] can also generate routing protocol
traﬃc, but all of them suﬀer a severe shortcoming: the traf-
ﬁc they generate is not necessarily consistent with the traﬃc
in the Internet. For example test-traﬃc often does not re-
ﬂect temporal variability as captured by self-similarity nor
does it capture the full range of IP addresses. While some
commercial tools support routing protocols their abilities
are limited to the basic operations: propagation of simple
updates and participation in the exchange of routing tables
or synchronization of topology databases. This is at least
partly due to our limited understanding of the dynamics of
routing protocols, e.g., [5, 6, 7]. Therefore it is currently im-
possible to, e.g., recreate complex but realistic BGP (Border
Gateway Protocol [8, 9, 10]) routing instabilities as observed
in the Internet in a test-lab, except by replaying a captured
trace.
BGP controls the routing between autonomous systems
(AS). Recent work by researchers [11, 12, 13, 14, 15, 16, 17,
18, 19, 20, 5], and the standardization body, IETF (espe-
cially the working groups on Inter Domain Routing (idr) [21,
22] and on Benchmarking Methodology (bmwg) [23, 24])
have shown that BGP’s dynamics are poorly understood.
On the other hand for network operators it is crucial to un-
derstand BGP’s dynamics, as can be seen by the numerous
presentations and panels on BGP at the network operator
forums, e.g., NANOG [25]. In this work we set out to
(cid:127) identify a structure in BGP traﬃc
(cid:127) characterize the structure using actual measurements
(cid:127) exploit the structure for a BGP workload model
(cid:127) propose a tool, RTG, to realize the workload model
(cid:127) and show, in parts, that RTG can create realistic BGP
traﬃc.
In short the goal of this paper is two-fold: ﬁrst to identify
and characterize BGP traﬃc and therefore contribute to the
basic understanding of BGP dynamics and second to repro-
31duce realistic BGP traﬃc, using our tool RTG, in a small
test-lab consisting of only a few physical components.
Such a tool will allow us to explore BGP in many diﬀer-
ent ways: establishing basic BGP implementation regression
tests, testing BGP implementation features, ﬁnding good
settings for the many BGP parameters (especially the BGP
timers), testing BGP’s scalability, testing the interactions of
BGP’s routing table updates with packet forwarding, exper-
imenting with changes in the BGP workload (e.g., diﬀerent
vantage points or changes to the protocol), understanding
the reasons for BGP instability, etc. But RTG is not just use-
ful for understanding BGP traﬃc, its scalable routing table
models are also useful for packet lookup and classiﬁcation
algorithm designers.
RTGs approach diﬀers from black-box approaches, that just
replay a trace, in that it captures the structure of BGP up-
dates and their imposed changes. It is highly conﬁgurable,
parameterizable and scalable and therefore allows insights
into the reasons behind certain behaviors. In contrast our
ability to scale a trace and/or adapting it to a diﬀerent sce-
nario is rather limited. In addition traces are usually con-
sidered proprietary. But tools, such as RTG, can be used by
people at diﬀerent locations and companies, that normally
could not share data to normalize their workloads [26]. But
maybe most importantly the tool highlights how well we un-
derstand the measured data. Can we capture the essential
pieces in a workload model so that we can reproduce reality
based on a modeled structure?
Our model-based BGP reference stream is designed around
the notion of a workload model that, we believe, captures
the structure of BGP traﬃc in a similar way as other work-
load models, such as SURGE [27] or tcplib [28, 29], capture
the structure and characteristics of Web or TCP traﬃc. In
this paper we
(cid:127) explain the characteristics we decided to include in
the model and our reasoning for including them (Sec-
tion 3).
(cid:127) present a novel characterization of BGP traﬃc follow-
ing the elements of the workload model (Section 4).
(cid:127) discuss how the workload model is used by RTG to gen-
(cid:127) demonstrate with examples that RTG generates realistic
(cid:127) summarize our experience and suggest future research
erate BGP traﬃc (Section 5).
BGP traﬃc (Section 6).
directions (Section 7).
Note that RTGs conﬁguration ﬁles can either be automati-
cally generated via BGP traﬃc analysis or manually derived
or any combination of the two methods.
2. BGP BACKGROUND
The Internet is divided into a collection of autonomous
systems. Routing through the Internet is accomplished on
a preﬁx by preﬁx basis and depends on protocols for rout-
ing within individual ASes, e.g., EIGRP, OSPF, IS-IS, and
RIP [30] and for routing between ASes [8, 31], for which
BGP [9], a path-vector protocol, is the de facto standard.
BGP advertisements are exchanged over BGP sessions be-
tween pairs of routers.
Upon startup the routing tables and the forwarding tables
of a router need to be initialized. For BGP this means that
BGP sessions to all peers of the routers have to be estab-
lished. Once a BGP session to a peer is established, the two
peers have to exchange their BGP routing tables. This is
done by sending BGP updates for each preﬁx in the routing
tables. Each router receiving a BGP announcement applies
some local policy regarding accepting the update, adds the
update to its BGP routing table (possibly replacing an al-
ready existing route for this preﬁx-peer-combination) and,
if the “best” route changes, updates the forwarding table.
In a next step, the router applies its outbound policy to
the new best route and, after potentially rewriting some at-
tributes, sends the update to its other peers. Each router
receiving a BGP withdraw, deletes the entry for this pre-
ﬁx from the peer’s BGP table. It possibly calculates a new
best route to replace the withdrawn route, forwards the up-
date to the other peers and updates its forwarding table.
If no announcement or withdraw is sent for a speciﬁc time
period BGP uses keepalive messages to determine if the ses-
If a router notices a session as down
sion is up or down.
the corresponding routes have to be deleted from the table
and updates, either announcements of alternative routes or
withdraws, have to be sent to the other BGP peers.
BGP updates are limited by timers: e.g., the Min-Route
Advertisement Interval timer [31] limits the number of up-
dates for each preﬁx/session for each peer to one every x
seconds. (A typical value for x is 30 seconds.) Routing up-
dates that ﬂow through a network can cause other updates
to be generated, e.g., consider the scenario shown in Fig-
ure 1. AS1 has added a preﬁx P and is therefore sending
a BGP update to AS2 and AS3 for P with AS path: AS1.
This update is received by AS2, added to the routing tables,
and sent to AS4, since AS2 has not sent an update to AS4
within the last 30 seconds. AS4 receives the update, adds
the preﬁx to its routing table and forwards the update to
AS5. AS3 also receives the update and adds it to its rout-
ing table, but instead of sending the update immediately to
AS4, AS3 has to wait until the Min-Route Advertisement
Interval timer expires. Once AS4 receives the update from
AS3 it realizes that this is a better path, reannounces its
routing table entry for this preﬁx and sends another update
for preﬁx P to AS5. In this rather simple example AS1 orig-
inated one update for preﬁx P, yet AS4 is originating two
updates for the same preﬁx. More general a single update
originated by some AS can cause a sequence of updates,
called update sequence, to be observed at some other AS in
the Internet.
To further limit the number of updates route ﬂap damp-
ing [32] has been introduced. Route ﬂaps can be caused
by administrative changes, such as additions and removals
of network interfaces and network links, or administrative
changes to BGP session characteristics, or due to session
resets due to link failures or transport layer connectivity
failures and other scenarios [22]. Since ﬂaps can generate
update sequences that propagate through the Internet, con-
sume router resources, and may cause other routing updates,
one wants to limit the scope of route ﬂap propagation via
route ﬂap damping. The idea behind route ﬂap damping
is to use the history of updates associated with a preﬁx to
predict its future behavior and in this way suppress oscil-
lating routes until they have stabilized. Typical values for
route ﬂap damping, according to the recommendations from
RIPE [33], are suppression periods of 30− 60 (10− 30) min-
utes for /22 to /32 (all others) after the 4th change. Other
parameter settings impose damping in a progressive fashion:
the more ﬂaps the longer the suppression times.
32AS1
T1: P (AS1)
T1: P (AS1)
AS2
T3: P (AS3, AS1)
AS3
T1: P (AS2, AS1)
AS4
T4: P (AS4, AS3, AS1)
T2: P (AS4, AS2, AS1)
AS5
0;0
 /059
 
0;0
 /059 
0;0
 /059 






1,34:9 
1,34:9 
1,34:9 
$
$

/89
/89


/89
/8
9















1,34:9 
1,34:9 
1,34:9 
1,34:9 
/


/89






1,34:9 
1,34:9 

Fig. 1: Update propagation.
Fig. 2: Example: preﬁx vs. forest.
Fig. 3: Example: Fraction of pre-
ﬁxes updates in session reset.
3. BGP WORKLOAD INGREDIENTS
The goal of this Section is to identify essential components
of BGP traﬃc that will help us build a workload model for
BGP traﬃc. With BGP dynamics one typically refers to a
series of updates caused by routing changes. Accordingly
we need a notion that captures the cause of routing insta-
bilities and their eﬀects: the BGP convergence process [18,
34, 35] that they create and the changes in the BGP table
that they impose. To understand the changes we need a
baseline that captures the basic structure/hierarchy of the
preﬁxes and their attributes1 in the BGP table. In general
the set of AS path attributes reﬂects the interconnectivity
of the various ASes and their peering policies. But from
the viewpoint of a single BGP peering session the AS path
is the ingredient that captures correlations between routing
updates for diﬀerent preﬁxes as well as for the same preﬁx.
Other attributes such as MED and communities reﬂect the
external policy of the peering AS.
We propose to capture the cause of a routing instability by
the notion of an instability creator and the temporal charac-
teristic of the resulting sequence of updates by the notion of
an instability burst. To capture the BGP table we propose
to view the set of preﬁxes as nodes in a graph, where edges
capture the structure (the nesting) of the preﬁxes. Cor-
respondingly we propose to view the preﬁxes in the BGP
table via a preﬁx forest. Instead of modeling the AS topol-
ogy [36, 37] and their peering policies [38, 39, 40] explicitly
we propose to focus on AS path properties as seen via a sin-
gle peering session. After all we are looking for a workload
model that can stimulate a system under test/router or a
simulation but not a full BGP simulation/emulation as for
example provided by SSFNet [41]. To capture the correla-
tions within an instability burst we focus on the attribute
changes between updates for the same preﬁx.
Instability creator
Routing instabilities can be caused by an AS or a preﬁx in
one of the following ways:
(cid:127) BGP session establishment/teardown/reset
(cid:127) BGP session parameter change, including local ﬁlter-
(cid:127) link failure/repair
(cid:127) addition/deletion of network preﬁxes
(cid:127) preﬁx policy changes.
ing policy changes as well as misconﬁgurations
In the ﬁrst case it is easy to identify the instability cre-
ator/creators. The two peering ASes are the instability
creators if an external BGP (EBGP) session is struck. In
1Typical BGP attributes are the AS path, MED, communi-
ties, etc.
case of an internal BGP (IBGP) session two things may hap-
pen: a sizeable set of preﬁxes experiences attribute changes
and these changes are propagated to EBGP or a small num-
ber of preﬁxes suﬀer from the eﬀects. This depends on the
internal structure of the network and the IBGP/IGP (In-
terior Gateway Protocol) conﬁguration. For backbones of
tier-1 providers the latter should aﬀect no2 preﬁx or a small
number of preﬁxes3. If a sizeable fraction of the preﬁxes are
aﬀected the session AS is the creator, otherwise we treat
the updates as preﬁx additions/deletions or preﬁx policy
changes discussed later.
The second case equals the ﬁrst one since historically
changes to the BGP session parameters and the local ﬁl-
tering policies did not take eﬀect until after the BGP ses-
sion has been cleared using a hard reset. Using soft resets
it is not necessary to tear down the BGP session. Yet if
the parameter changes aﬀect a sizeable set of the preﬁxes
using this peering session, a sizeable set of updates will be
created by the two peering ASes or the single AS. Therefore
this case is not distinguishable from the previous one and
the two peering ASes are or the AS or the preﬁxes are
considered to be the instability creators. If only a small set
of the preﬁxes is aﬀected we treat the created instabilities
as preﬁx policy changes.
A link failure/repair of a peering link more or less im-
plies that the corresponding BGP session is torn down/re-
established. Therefore we do not need to consider this case
separately. A link failure/repair of a backbone link is dif-
ferent. It does not cause an IBGP session reset but might
change some IGP path cost and therefore it can create some
number of updates. But most of the time only a small set
of the preﬁxes is aﬀected and we again treat this as a preﬁx
policy change. If an access link fails only preﬁxes connected
via the access link will be aﬀected. Most of the time this
will be a small number and therefore we can again tread this
as preﬁx addition/deletion or policy change.
In the last two cases the instability creator is the preﬁx
rather than any AS. The distinction between these two cases
is that additions and deletions of network preﬁxes occur only
at the originating AS, while policy changes, e.g., changes to
the AS path, the communities, etc., can happen anywhere
along the AS path.
In summary, we consider an AS or two ASes as the insta-
bility creator if some sizeable fraction of the preﬁxes using
this AS are involved in updates within a reasonable short
time period. Otherwise the preﬁx itself is responsible for
the instability. In this way we are able to capture the cor-
2For example if IBGP with route reﬂectors is run on all
backbone routers and each router is peering with at least
two route reﬂectors.
3For example with a fully meshed IBGP conﬁguration.
33updates
update
bursts
possible
session
resets
interarrival time
attributes changes
interarrival time
duration
# of updates
interarrival time
duration
# of updates
# of preﬁxes
routes within the IP address range
preﬁx length
depth
fanout
distance
# of originating routes
# of transiting routes
AS path length
# of unique ASes on AS path
# of duplicate ASes on AS path
position duplicate ASes on AS path
distance of ASes to peer
Tab. 1: Metrics: BGP updates.
Tab. 2: Metrics: Routing table.
Tab. 3: Metrics: Attributes.
relations between updates for diﬀerent BGP preﬁxes. Note
that human misconﬁgurations of BGP [43] can be expressed
either as instabilities caused by an AS or by a preﬁx. This
only depends on the number of aﬀected preﬁxes.
Instability bursts
An instability creator may generate several instability events.
For example a preﬁx instability creator associated with a
ﬂapping link to a single homed customer would create a
withdraw, followed by an announce, followed by a withdraw,
followed by an announce, etc., while an AS instability cre-
ator associated with a session reset to a single homed cus-
tomer AS will create instability events for all preﬁxes origi-
nated by the AS. Each instability event is an update which
may or may not be observable in the measured data. Only
if the AS hop distance is one we can expect to see all insta-
bility events. The larger the distance between the creator
and the observer is the more likely it is that an intermediary
will have an alternative way of reaching the preﬁx. Accord-
ingly the intermediary may or may not relay the original
instability event and the related BGP updates. Therefore
the observer will note a chain of updates, called an update