# 旧酒犹香——Pentestit Test Lab第九期（下）
##### 译文声明
本文是翻译文章，文章原作者 alexeystoletny，文章来源：habr.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## FTP
使用nmap服务器172.16.0.4进行扫描后，我们找到了开放端口21（ftp）和端口22（ssh）。使用之前的ssh账号信息无法登录，所以围绕FTP来看。
ProFTPD
1.3.5有一个已知的漏洞。该漏洞允许在未认证的情况下复制文件，加上Web服务可以实现任意文件下载，比如复制/etc/passwd到/var/www。问题是这台机器上的Web服务器没有运行…
让我们尝试连接到ftp服务器：
匿名登录可用，在dist文件夹中我们找到FTP服务proftpd的源代码。放在这里肯定是有原因的，我们试着研究它。使用ftp客户端（lcd和get命令）下载并解压缩proftpd-dfsg-1.3.5.tar.bz2存档，并尝试查找代码中的更改。搜索CYBEAR子字符串找到src/help.c文件：
[ProFTPD版本1.3.3c中内置了类似的后门程序。](https://www.aldeid.com/wiki/Exploits/proftpd-1.3.3c-backdoor)
让我们尝试使用提供的后门！
好吧，在/home文件夹中我们找到了一些有用的文件
除了“旧”文件夹中的标记之外，我们还发现：
  * 新帐户m.barry，
  * m.barry/upload/test_scripts文件夹中的测试脚本，
  * 带密码的cisco路由器配置文件
  * 带有密码m.barry的trouble.cap文件，表明dev服务器可能使用FTP从test_scripts文件夹下载Python脚本并启动它们。
不幸的是，因为没有足够的权限，不能简单地查看test_scripts中包含的文件，所以必须寻找另一种攻击dev服务器的方法。
## CISCO
从cisco开始尝试使用找到的信息。我们根据网络拓扑回忆IP并使用得到的密码登录路由器：
得到token！现在让我们尝试破解enable 3的哈希：
找到密码，尝试并获得特权模式：
一切准备就绪。路由器的配置文件允许你进行流量监控：
借助这些命令，可以研究通过该子网（即门户网站）的流量。
事实证明，有机会以不同的方式通关，我个人不需要监控流量。因此，我建议将这部分留给读者继续进行。
## NAS和未受保护的备份
继续探索不同的子网，我们遇到了一个NAS服务器：
打开端口3260暗示能够连接到iscsi。如果你关注安全新闻，可能听说过意大利公司Hacking
Team的黑客行为（CyBear32c的原型便是这个）。在网络上，你可以找到有关攻击原理的文章，从中了解很多精彩的内容。
让我们从端口转发到本地机器开始：
安装iscsiadm并尝试连接：
尝试连接，失败。
我们打开调试模式，看到iscsiadm正在尝试连接到192.168.0.3，但是它不在我们的子网中。让我们尝试使用[sshuttle](http://sshuttle.readthedocs.io/en/stable/installation.html)替代端口转发。这样我们可以直接访问真实IP，而无需单独转发每个端口。
连接：
连接成功！现在查看磁盘信息：
现在需要连接这个vmdk：
它在磁盘上开始偏移位置为63 * 512字节，即32,256：
之后，Kali能够自动检测磁盘并直接访问内容：
我们找到用户token_nas_token，但文件系统中没有任何东西。将注册表数据库从WINDOWS\system32\config复制到本地，并尝试查看保存的密码哈希：
为了缩短哈爆破时间，我们将使用在线爆破服务[rainbowtables.it64.com](http://rainbowtables.it64.com/)。你可以自己本地爆破，但在在线服务的帮助下会更快。
我们输入现有的LM哈希值（每行中转储的第一个哈希值）并查看结果。LM哈希是使用大写后的密码计算出来的（译者注：可自行百度LM哈希原理），因此在得到结果后需要使用NTLM哈希恢复正确的密码。
可以在数据库中找到所有哈希值及其相应的密码。将它们（大写）保存在一个单独的文件中，并使用john带上-rules=NT选项来查找正确的密码：
并使用-show选项获取密码：
ask的token在token_nas_token的密码中，同时还获得了d.rector的新凭据。我们继续！
## Terminal
如上所述，在一个地方找到的密码可能出现在另一个地方。在这种情况下，通过扫描terminal2服务器端口，我们得到一个打开的RDP（译者注：国内俗称3389）：
让我们尝试使用来自NAS的d.rector凭据进行连接：
token就在桌面上！
## DEV和MITM
通过访问本地子网192.168.3/24，我们开辟了新的攻击途径。回想一下网络拓扑图，加上在FTP服务器上找到的trouble.cap：
如在trouble.cap中所见，dev服务器很可能在访问FTP
test_scripts文件夹下载所有*.py文件后执行了它们。只有root用户才能获取此文件夹的访问权限。
现在我们有了一个terminal服务器，Intercepter-NG位于其中，我们可以轻松进行MITM攻击。我们来试试吧！
从文件夹C\Intercepter-NG打开Intercepter-NG。第一步是扫描本地网络。右键单击表中的空白区域，设置防止ARP扫描超时并启动云安全扫描。
同时，Intercepter在其子网中发送ARP请求以确定其中的现有主机，然后尝试确定每个主机上安装的操作系统。
好吧，已经定义了两个主机：
Stealth IP是一个不存在的IP地址，Intercepter用它来执行MITM攻击。
由于客户端和服务器位于不同的子网上，因此它们将通过网关相互通信; 我们将3.3添加到NAT，并将3.254添加为网关。
同时需要在ftp服务器上创建一个目录（dev将进入），而不是利用原来的upload文件夹，并且新建目录名称应具有与“upload”一样多的字符，因为Intercepter-NG只能替换相同长度的流量。
当然，在test.py脚本中，我们将设置有效负载-反弹shell到172.16.0.2的6666：
配置拦截器：
流量转换器将用.uploa替换upload，因此，当m.barry进行CWD上传时，它将进入目录.uploa并从那里下载并执行我们的脚本，从而创建一个反向shell。
我们在SSH上开启监听：
我们按下三个按钮打开Incercepter：首先是右上方的常见嗅探，然后是NAT，然后是ARP中毒。
在一分钟内我们得到了shell：
同时发现了服务器的token：
## “Tragick”SITE-TEST
现在让我们将注意力转向站点测试服务器。像往常针对Test Lab的Web服务一样，尝试运行whatweb和dirb来找出服务器上的内容。
该站点是用PHP框架Laravel编写的。此外，还包括详细的报错信息：
从这里，你通常可以获得有关服务器路径等的信息，这些信息对于SQL注入等很有帮助。但在这种情况下，它对我们没有多大帮助……  
使用dirb很快就找到URL：
在管理面板中使用已经收集的凭据尝试登录，都没成功。我们切换到照片上传的地方，简单尝试提交：
再次下载图片，但无法找到添加这些图片的位置（虽然dirb也找到了upload文件夹，但其中的文件无法通过其原始名称访问）。
让我们尝试ImageMagick中的一个漏洞，它被称为[ImageTragick](https://imagetragick.com/)。
构造要下载的文件：
并在SSH服务器上监听端口1234。填写表单并使用上面显示的文本内容加载文件oops.jpg。
连接成功！在根文件夹（cd/）中，我们看到token.txt：
## 打开PORTAL
让我们尝试探索门户服务器，从端口扫描开始吧：
发现了端口8080，我们实际上看到了门户网站：
尝试使用之前找到的密码。例如，使用t.smith和其密码登录成功。密码可以重复使用两次 – 在terminal2和这里。
获得了一页“假期信息”（包含新用户名）：尝试登录或获取a.petrov登录的密码 – 但没有成功。注意cookie：
看起来像base64，解码：