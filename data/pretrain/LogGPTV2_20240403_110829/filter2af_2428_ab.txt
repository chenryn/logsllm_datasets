-x "dq @$extret" poi(wdigest!l_LogSessList)`逐步进行浏览：
这个矩阵的结构包含以下字段：
    typedef struct _KIWI_WDIGEST_LIST_ENTRY {
        struct _KIWI_WDIGEST_LIST_ENTRY *Flink;
        struct _KIWI_WDIGEST_LIST_ENTRY *Blink;
        ULONG   UsageCount;
        struct _KIWI_WDIGEST_LIST_ENTRY *This;
        LUID LocallyUniqueIdentifier;
    } KIWI_WDIGEST_LIST_ENTRY, *PKIWI_WDIGEST_LIST_ENTRY;
在此结构之后是`LSA_UNICODE_STRING`字段，存在于以下三个偏移处：
    • 0x30-用户名
        • 0x40-主机名
        • 0x50-加密密码
可以使用以下命令检查WinDBG的正确路径：
    !list -x "dS @$extret+0x30" poi(wdigest!l_LogSessList)
这会将转储的用户名转储为：
最后，我们可以使用类似的命令转储加密的密码：
    !list -x "db poi(@$extret+0x58)" poi(wdigest!l_LogSessList)
到此，从内存中提取WDigest凭据所需的所有步骤均已完成。
既然我们拥有提取和解密进程所需的所有信息，将这些信息组合到Mimikatz之外的小型独立工具中是否可行？为了探索这一点，我创建了一个备受欢迎(饱受非议)的POC，[传动门](https://gist.github.com/xpn/e3837a4fdee8ea1b05f7fea5e7ea9444)。在Windows
10 x64（内部版本1809）上执行时，它提供有关提取凭据过程的详细信息：
这个poc并不是绝对安全的，但我希望通过它来举例说明我们如何着手制作替代工具。
现在，我们了解了如何获取和解密WDigest高速缓存的凭据，我们可以转到另一个影响纯文本凭据收集的区域`UseLogonCredential`。
**但是UseLogonCredential为0**
众所周知，人们使用mimikatz都是转储明文凭据，因此Microsoft决定默认情况下禁用对该旧协议的支持。当然，有些用户可能正在使用WDigest，因此为了提供重新启用此功能的选项，Microsoft设置了注册表项为`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\UseLogonCredential`。将其从“
0”切换为“ 1”会强制WDigest重新缓存凭据，这当然意味着渗透测试者就白忙活了……
但是有一个陷阱，切换此设置需要重新启动操作系统，我还没有遇到一个客户允许在测试环境之外这样做。
显而易见的问题是：为什么需要重新启动计算机才能使其生效？
正如GentilKiwi指出的那样，此更改无需重新启动即可生效。我在本节末尾解释了原因。
让我们再看一看`SpAcceptCredentials`，经过一番寻找，我们发现了这一点：
可以清楚地看到，该函数使用全局变量检查了两个条件：`g_IsCredGuardEnabled`是否设为`1`或`g_fParameter_UseLogonCredential`是否设为`0`，我们发现采用的代码路径是通过`LogSessHandlerNoPasswordInsert`而不是上面的`LogSessHandlerPasswdSet`来调用。顾名思义，此函数会缓存会话，而不是缓存密码，结果就导致我们在使用Windows
2012+时通常遇到的弹框行为。因此，可以合理地假定此变量由上述注册表项值基于其名称来控制，通过跟踪其分配发现情况确实是这样：
通过了解`WDigest.dll`中的哪些变量可以控制凭据缓存，我们可以在不更新注册表的情况下颠覆它吗？如果我们在运行时使用调试器更新参数`g_fParameter_UseLogonCredential`，那该怎么办？
恢复运行后，我们看到缓存凭据再一次被存储：
当然，当连接了内核调试器时，大多数事情都是可能的，但是如果有一种在不触发`AV/EDR`的情况下操作lsass内存的方法（请参阅我们先前的[Cylance博客文章](https://www.mdsec.co.uk/2019/03/silencing-cylance-a-case-study-in-modern-edrs/)，了解如何执行此操作的示例），那么就肯定可以编写用于操纵此变量的工具。我再次编写了一个冗长的工具，以演示如何完成此工作，该工具可以在[此处找到](https://gist.github.com/xpn/163360379f3cce2443a7b074f0a173b8)。
本示例将搜索并更新内存中`g_fParameter_UseLogonCredential`的值。如果是在受`Credential
Guard`保护的系统上运行，则更新此值所需的修改很简单，留给读者自行练习。
执行POC后，我们发现WDigest现在已重新启用，而无需设置注册表项，从而使我们能够在缓存凭据时提取凭据：
同样，此POC不应被认为是OpSec安全的，只是一个如何制作自己的工具的简单示例。
当然，现在启用WDigest的方法当然会带来风险，主要是对lsass的`WriteProcessMemory`调用，但是如果环境适合，它提供了一种无需设置注册表值即可启用WDigest的好方法。还有其他获取纯文本凭据的方法，这些方法可能更适合WDigest之外的目标（针对`memssp`的对象，我们将在以后的文章中进行回顾）。
悄悄话：正如GentilKiwi所指出的那样，要使`UseLogonCredential`生效其实并不需要重启...所以我们回到反汇编程序。
回顾引用注册表值的其他位置，我们发现了`wdigest!DigestWatchParamKey`，它监视许多键，包括：
用于在更新时触发此函数的Win32 API是`RegNotifyKeyChangeValue`：
而且，如果我们在WinDBG中添加一个`wdigest!DigestWatchParamKey`断点，那么我们会在尝试添加`UseLogonCredential`时成功触发了它：
## 福利环节-将任意DLL加载到LSASS中
因此，在研究分解器时，我想寻找一种替代方法，将代码加载到lsass中，同时避免hook Win32
API调用或加载SSP。经过一些反汇编尝试后，我在lsasrv.dll中遇到了下图内容：
可以在函数`LsapLoadLsaDbExtensionDll`中找到对用户提供的值调用`LoadLibraryExW`的尝试，这使我们可以制作一个要加载到lsass进程中的DLL，例如：
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
    // Insert l33t payload here
    break;
        }
    // Important to avoid BSOD
        return FALSE;
    }
重要的是，在`DllMain`函数结束时，返回一个FALSE用来对`LoadLibraryEx`强行施加错误。这是为了避免随后调用`GetProcAddress`。否则，将导致重新启动时出现BSOD，直到删除DLL或注册表项为止。
制作完DLL之后，我们要做的就是创建上述注册表项：
    New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value "C:\xpnsec.dll"
DLL的加载将在系统重新启动时发生，这使其成为潜在的特权妥协技术，将payload直接注入lsass（当然，只要不启用PPL）即可。
## 福利环节2-将任意DLL远程加载到LSASS
经过进一步的搜索后，在`samsrv.dll`中发现了与上述类似的向量。再次通过`LoadLibraryEx`调用将受控的注册表值加载到lsass中：
同样，我们可以通过添加注册表项并重启来利用此功能，但是触发这种情况要简单得多，因为可以使用SAMR RPC调用来触发它。
有意思的利用方式：通过使用上面的WDigest凭据提取代码来制作DLL，从而为我们转储凭据。
要加载DLL，我们可以使用一个非常简单的`Impacket
Python`脚本来修改注册表，并添加一个密钥到`HKLM\SYSTEM\CurrentControlSet\Services\NTDS\DirectoryServiceExtPt`指向开放SMB共享上托管的DLL，然后使用对`hSamConnect`
RPC的调用来触发DLL的加载。
可以在[此处](https://gist.github.com/xpn/12a6907a2fce97296428221b3bd3b394)找到所用DLL的代码，它是对先前示例的修改。
希望本文能使您对WDigest凭据缓存的工作方式以及Mimikatz在"sekurlsa::wdigest"过程中如何读取和解密密码有所了解。更重要的是，我希望它对打算diy相关工具的任何人提供帮助。
[原文链接](https://blog.xpnsec.com/exploring-mimikatz-part-1/)