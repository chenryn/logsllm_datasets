### Table 3: Timings for Number Theoretic Puzzles and Hash-Based Puzzles
- 3.77
- 14.88
- 5.27

### References

1. **T. Aura and P. Nikander. Stateless connections.**  
   In Y. Han, T. Okamoto, and S. Qing (Eds.), *Proceedings of the First International Conference on Information and Communication Security, ICICS’97, Beijing, China, November 11-14, 1997*, Volume 1334 of Lecture Notes in Computer Science, pages 87–97. Springer, 1997.

2. **S. Babbage, D. Catalano, C. Cid, O. Dunkelman, C. Gehrmann, L. Granboulan, T. Lange, A. Lenstra, P. Q. Nguyen, C. Paar, J. Pelzl, T. Pornin, B. Preneel, C. Rechberger, V. Rijmen, M. Robshaw, A. Rupp, N. Smart, and M. Ward. ECRYPT yearly report on algorithms and keysizes (2007–2008).**  
   July 2008.

3. **A. Back. Hashcash-a denial of service counter-measure.**  
   URL: <http://www.hashcash.org/papers/hashcash.pdf>, 2002.

4. **V. Boyko. A pre-computation scheme for speeding up public-key cryptosystems.**  
   Master’s thesis, Massachusetts Institute of Technology, 1998. Available at: <http://hdl.handle.net/1721.1/47493>.

5. **V. Boyko, M. Peinado, and R. Venkatesan. Speeding up discrete log and factoring based schemes via precomputations.**  
   In K. Nyberg (Ed.), *Advances in Cryptology - EUROCRYPT ’98, Proceedings of the International Conference on the Theory and Application of Cryptographic Techniques, Espoo, Finland, May 31 - June 4, 1998*, Volume 1403 of LNCS, pages 221–235. Springer, 1998.

6. **L. Chen, P. Morrissey, N. Smart, and B. Warinschi. Security notions and generic constructions for client puzzles.**  
   In M. Matsui (Ed.), *Advances in Cryptology - ASIACRYPT 2009, Proceedings of the 15th International Conference on the Theory and Application of Cryptology and Information Security, Tokyo, Japan, December 6-10, 2009*, Volume 5912 of Lecture Notes in Computer Science, pages 505–523. Springer, 2009.

7. **C. Dwork and M. Naor. Pricing via processing or combatting junk mail.**  
   In E. F. Brickell (Ed.), *Advances in Cryptology - CRYPTO ’92, Proceedings of the 12th Annual International Cryptology Conference, Santa Barbara, California, USA, August 16-20, 1992*, Volume 740 of Lecture Notes in Computer Science, pages 139–147. Springer, 1992.

8. **S. D. Galbraith, J. M. Pollard, and R. S. Ruprai. Computing discrete logarithms in an interval.**  
   Cryptology ePrint Archive, Report 2010/617, Accepted to Mathematics of Computation, 2010. <http://eprint.iacr.org/2010/617>.

9. **R. Gennaro. An improved pseudo-random generator based on discrete log.**  
   In M. Bellare (Ed.), *Advances in Cryptology - CRYPTO 2000, Proceedings of the 20th Annual International Cryptology Conference, Santa Barbara, California, USA, August 20-24, 2000*, Volume 1880 of Lecture Notes in Computer Science, pages 469–481. Springer, 2000.

10. **M. Jakobsson and A. Juels. Proofs of work and bread pudding protocols.**  
    In B. Preneel (Ed.), *Secure Information Networks: Communications and Multimedia Security, IFIP TC6/TC11 Joint Working Conference on Communications and Multimedia Security (CMS ’99), September 20-21, 1999, Leuven, Belgium*, Volume 152 of IFIP Conference Proceedings, pages 258–272. Kluwer, 1999.

11. **A. Juels and J. G. Brainard. Client puzzles: A cryptographic countermeasure against connection depletion attacks.**  
    In *Proceedings of the Network and Distributed System Security Symposium, NDSS 1999, San Diego, California, USA*, pages 151–165. The Internet Society, 1999. URL: <http://www.rsa.com/rsalabs/node.asp?id=2050>.

12. **G. Karame and S. Capkun. Low-cost client puzzles based on modular exponentiation.**  
    In D. Gritzalis, B. Preneel, and M. Theoharidou (Eds.), *Computer Security - ESORICS 2010, Proceedings of the 15th European Symposium on Research in Computer Security, Athens, Greece, September 20-22, 2010*, Volume 6345 of Lecture Notes in Computer Science, pages 679–697. Springer, 2010.

13. **P. Nguyen, I. Shparlinski, and J. Stern. Distribution of modular sums and the security of the server aided exponentiation.**  
    In *Proc. Workshop on Cryptography and Computational Number Theory (CCNT’99), Singapore*, pages 257–268. Birkhäuser, 2001.

14. **P. Q. Nguyen and J. Stern. The hardness of the hidden subset sum problem and its cryptographic implications.**  
    In M. J. Wiener (Ed.), *Advances in Cryptology - CRYPTO ’99, Proceedings of the 19th Annual International Cryptology Conference, Santa Barbara, California, USA, August 15-19, 1999*, Volume 1666 of Lecture Notes in Computer Science, pages 31–46. Springer, 1999.

15. **S. Patel and G. S. Sundaram. An efficient discrete log pseudo random generator.**  
    In H. Krawczyk (Ed.), *Advances in Cryptology - CRYPTO ’98, Proceedings of the 18th Annual International Cryptology Conference, Santa Barbara, California, USA, August 23-27, 1998*, Volume 1462 of Lecture Notes in Computer Science, pages 304–317. Springer, 1998.

16. **J. Rangasamy, D. Stebila, L. Kuppusamy, C. Boyd, and J. M. G. Nieto. Efficient modular exponentiation-based puzzles for denial-of-service protection.**  
    In *International Conference on Information Security and Cryptology (ICISC) 2011, LNCS*. Springer, 2012, To appear.

17. **R. L. Rivest, A. Shamir, and D. A. Wagner. Time-lock puzzles and timed-release crypto.**  
    Technical report, Cambridge, MA, USA, 1996.

18. **V. Shoup. Sequences of games: a tool for taming complexity in security proofs.**  
    Cryptology ePrint Archive, Report 2004/332, 2004. <http://eprint.iacr.org/>.

19. **D. Stebila, L. Kuppusamy, J. Rangasamy, C. Boyd, and J. M. G. Nieto. Stronger difficulty notions for client puzzles and denial-of-service-resistant protocols.**  
    In A. Kiayias (Ed.), *Topics in Cryptology - CT-RSA 2011 - Proceedings of The Cryptographers’ Track at the RSA Conference 2011, San Francisco, CA, USA, February 14-18, 2011*, Volume 6558 of Lecture Notes in Computer Science, pages 284–301. Springer, 2011.

20. **P. C. van Oorschot and M. J. Wiener. On Diffie-Hellman key agreement with short exponents.**  
    In U. M. Maurer (Ed.), *Advances in Cryptology - EUROCRYPT ’96, Proceedings of the International Conference on the Theory and Application of Cryptographic Techniques, Saragossa, Spain, May 12-16, 1996*, Volume 1070 of Lecture Notes in Computer Science, pages 332–343. Springer, 1996.

21. **B. Waters, A. Juels, J. A. Halderman, and E. W. Felten. New client puzzle outsourcing techniques for DoS resistance.**  
    In V. Atluri, B. Pfitzmann, and P. D. McDaniel (Eds.), *Proceedings of the 11th ACM Conference on Computer and Communications Security, CCS 2004, Washington, DC, USA, October 25-29, 2004*, pages 246–256. ACM, 2004.

### Appendix

#### A. Statistical Distance for Some Parameter Values

The number of operations required to solve a puzzle ranges from 0 to \(2^{25}\). It is sufficient for the server to choose \(N\) and \(\ell\) such that the indistinguishability bound is less than or equal to \(\epsilon\), the bound for difficulty. Suppose the server wants to fix the difficulty \(Q\) of a puzzle to be \(2^{20}\) and the 40-bit security level \(k\) with a 512-bit modulus \(n\). Let the order of \(g\) be \(M\), where \(M\) is of length 80 bits. From the above table, it is clear that with \(2^{16}\) \((x_i, X_i)\) pre-computed pairs, the server requires only 7 \((\ell - 1)\) modular multiplications to compute a pair \((a, g^a)\) online. The interval length can then be set to \(2^{40}\) so that the best-known solving algorithm requires \(Q = 2^{20}\) operations, and the distinguishability is bounded by \(2^{-20}\).

#### B. Existing Assumptions

We begin by defining the factorization problem and interval discrete log problem specifically for the RSA composite modulus \(n\).

**Definition 6. (Factorization Problem)**  
Given a composite integer \(n\) such that \(n\) is a product of two \(k\)-bit primes \(p\) and \(q\), the factorization problem is to compute either \(p\) or \(q\). Formally, let \(k\) be a security parameter, let \(GenRSA\) be a modulus generation algorithm, and let \(A\) be a probabilistic algorithm. The experiment is as follows:
1. Run \(GenRSA(1^k)\) to obtain \((n, p, q)\).
2. Run \(A\) on input \(n\).

The adversary wins the experiment if it outputs either \(p\) or \(q\) (one of the non-trivial factors of \(n\)). The advantage of \(A\) in violating the factorization assumption is defined as \(AdvFact_{A, GenRSA}(k)\), which is equal to:

\[ AdvFact_{A, GenRSA}(k) = \Pr[x = p \text{ or } q : (n, p, q) \leftarrow GenRSA(1^k), x \leftarrow A(n)] \]

Recent recommendations on RSA key sizes [2] indicate that the time required to factor an \(m\)-bit RSA modulus is \(2^{s(m)}\), where:

\[ s(m) = \frac{64}{9} \left( \frac{\log_2(e) (m \ln 2)}{3 (\ln(m \ln 2))^{2/3}} - 14 \right)^{1/3} \]

**Definition 7. (Composite Interval Discrete Logarithm Problem IDL)**  
Let \(k\) be a security parameter, \(Q\) be a difficulty parameter, and \(GenRSA\) be a modulus generation algorithm. Let \(A\) be a probabilistic algorithm. Define the experiment \(ExpIDL_{A, GenRSA, Q}(k)\) as follows:
1. \(n \leftarrow GenRSA(1^k)\).
2. \(g \leftarrow_R Z_n^*\), \(x \leftarrow_R [1, \phi(n)]\), \(y \leftarrow g^x \mod n\).
3. \(r \leftarrow_R [0, q - 1]\), \(I \leftarrow [x - r, x - r + Q]\).
4. \(x' \leftarrow A(g, y, n, I)\).
5. Output 1 if \(x' = x\) and 0 otherwise.

The advantage of \(A\) in violating the IDL assumption is:

\[ AdvIDL_{A, GenRSA, Q}(k) = \Pr[ExpIDL_{A, GenRSA, Q}(k) = 1] \]

Galbraith et al. [8] have given the best algorithms to date for solving the Interval Discrete Logarithm problem in a group-agnostic manner, which have an average case expected running time of \((1.660 + o(1)) \sqrt{q}\). In groups over a composite modulus \(n\) where factoring \(n\) is hard, this remains the expected running time.

#### C. Unforgeability of DLPuz

**Definition 8. (Puzzle Unforgeability [6])**  
Let \(k\) be a security parameter, \(A\) be a probabilistic algorithm, and \(Puz\) be a client puzzle. Define the experiment \(ExpUF_{A, Puz}(k)\) as follows:
1. \((params, s) \leftarrow Setup(1^k)\).
2. Run \(A(params)\) with oracle access to \(CreatePuz(\cdot)\) and \(CheckPuz(\cdot)\), which are answered as follows:
   - \(CreatePuz(str, Q)\): \(puz \leftarrow GenPuz(s, Q, str)\). Return \(puz\).
   - \(CheckPuz(puz)\): If \(puz\) was not an output for any previous \(CreatePuz(str)\) query and \(VerAuth(s, puz) = true\), stop the experiment and output 1. Otherwise, return false to \(A\).
3. Output 0.

We say that \(A\) wins the game if \(ExpUF_{A, Puz}(k) = 1\) and loses otherwise. The advantage of \(A\) is defined as:

\[ AdvUF_{A, Puz}(k) = \Pr[ExpUF_{A, Puz}(k) = 1] \]

A puzzle \(Puz\) is said to be unforgeable if this advantage is negligible in \(k\) for all probabilistic algorithms \(A\) running in time polynomial in \(k\).

**Theorem 4. (Unforgeability of DLPuz)**  
The client puzzle DLPuz is unforgeable.

**Proof.** We prove the theorem using a sequence of games. Let \(A\) be a probabilistic algorithm with running time \(t\). Let \(S_i\) be the event that \(A\) wins in game \(G_i\).

- **Game \(G_0\):** The original unforgeability game \(ExpUF_{A, DLPuz}(k)\).

  \[ Pr(S_0) = \Pr[ExpUF_{A, DLPuz}(k) = 1] \]

- **Game \(G_1\):** In this game, we modify game \(G_0\) by replacing the HMAC \(H_\rho\) with a truly random function \(H\) to compute \(z\). This change has a negligible effect on adversary \(A\) because of the pseudo-randomness of HMAC \(H_\rho\). Hence,

  \[ |Pr(S_0) - Pr(S_1)| \leq AdvHM_{AC, B}(k) \leq \text{negl}(k) \]

Since the function \(H\) in game \(G_1\) is truly random, the probability that an adversary without access to \(H\) can guess an output is negligible:

\[ \Pr(S_1) \leq \frac{1}{2^k} \]

Combining these results, we obtain that the adversary's success in forging a puzzle is negligible.