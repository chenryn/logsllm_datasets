        094 POP
        095 POP
        096 JUMP              ;  Jump 0x56
        097 STOP              ;
        -----  appandFunctionSelector() Create Code End ---        098 LOG1
        099 PUSH6 627a7a723058
        106 SHA3
        107 MUL
        108 PUSH15 5fd8c2f6fe4103dba9baf9c48c052e
        124 CALLDATALOAD
        125 INVALID
        126 PUSH1 d9
        128 INVALID
        129 INVALID
        130 TIMESTAMP
        131 STATICCALL
        132 INVALID
        133 INVALID
        134 DUP13
        135 INVALID
        136 TIMESTAMP
        137 INVALID
        138 NUMBER
        139 STOP
        140 INVALID
结合编译器的编译过程和编译出来的结果来阅读理解代码之后,可以知道合约汇编代码的结构:
        1.初始化EVM memory
        2.检测TXDATA 里面是否带有合法的函数哈希
        3.函数跳转
        4.函数预校验代码
        5.函数参数获取代码
        6.函数返回代码
        7.函数主体代码
读者可能会有一个疑问,为什么在汇编代码097 STOP
的后面还有多余的代码呢,这些代码的意义何在.我们来阅读CompilerStack::compileContract() 的代码:
        void CompilerStack::compileContract(
            ContractDefinition const& _contract,
            map& _compiledContracts
        )
        {
            // ...
            shared_ptr compiler = make_shared(m_evmVersion, m_optimize, m_optimizeRuns);
            compiledContract.compiler = compiler;
            string metadata = createMetadata(compiledContract);  //  创建元数据
            compiledContract.metadata = metadata;
            bytes cborEncodedMetadata = createCBORMetadata(  //  生成CBOR 元数据
                metadata,
                !onlySafeExperimentalFeaturesActivated(_contract.sourceUnit().annotation().experimentalFeatures)
            );
            try
            {
                // Run optimiser and compile the contract.
                compiler->compileContract(_contract, _compiledContracts, cborEncodedMetadata);  //  编译合约
            }
            catch(eth::OptimizerException const&)
            {
                solAssert(false, "Optimizer exception during compilation");
            }
            // ...
        }
可以看到,编译合约的时候cborEncodedMetadata 的数据也带入compileContract() ,compileContract()
代码如下:
        void Compiler::compileContract(
            ContractDefinition const& _contract,
            std::map const& _contracts,
            bytes const& _metadata
        )
        {
            ContractCompiler runtimeCompiler(nullptr, m_runtimeContext, m_optimize);  //  初始化合约编译类
            runtimeCompiler.compileContract(_contract, _contracts);    //  编译合约代码
            m_runtimeContext.appendAuxiliaryData(_metadata);   //  把CBOR 元数据附加在编译之后合约代码末端
            // ...
        }
那么回来阅读createCBORMetadata() 的代码,发现它其实是使用了元数据来构造出的数据.
        bytes CompilerStack::createCBORMetadata(string _metadata, bool _experimentalMode)
        {
            bytes cborEncodedHash =
                // CBOR-encoding of the key "bzzr0"
                bytes{0x65, 'b', 'z', 'z', 'r', '0'}+
                // CBOR-encoding of the hash
                bytes{0x58, 0x20} + dev::swarmHash(_metadata).asBytes();
            bytes cborEncodedMetadata;
            if (_experimentalMode)
                cborEncodedMetadata =
                    // CBOR-encoding of {"bzzr0": dev::swarmHash(metadata), "experimental": true}
                    bytes{0xa2} +
                    cborEncodedHash +
                    bytes{0x6c, 'e', 'x', 'p', 'e', 'r', 'i', 'm', 'e', 'n', 't', 'a', 'l', 0xf5};
            else
                cborEncodedMetadata =
                    // CBOR-encoding of {"bzzr0": dev::swarmHash(metadata)}
                    bytes{0xa1} +
                    cborEncodedHash;
            solAssert(cborEncodedMetadata.size()  const& _contracts,
            bytes const& _metadata
        )
        {
            ContractCompiler runtimeCompiler(nullptr, m_runtimeContext, m_optimize);  //  编译runtime 代码
            runtimeCompiler.compileContract(_contract, _contracts);
            m_runtimeContext.appendAuxiliaryData(_metadata);  //  插入CBOR 编码
            // This might modify m_runtimeContext because it can access runtime functions at
            // creation time.
            ContractCompiler creationCompiler(&runtimeCompiler, m_context, m_optimize);  //  编译creation 代码
            m_runtimeSub = creationCompiler.compileConstructor(_contract, _contracts);
            m_context.optimise(m_optimize, m_optimizeRuns);  //  优化汇编代码
        }
可以看到Compiler::compileContract() 里面分两部分来编译合约代码:runtime 的代码指的是合约编写逻辑的代码;creation
的代码指的是constructor() 的代码.我们回来看ByteCode 和RuntimeCode 的汇编代码来做对比
ByteCode 汇编:
        ----  Binary  ----        6080604052348015600f57600080fd5b50608d8061001e6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f146044575b600080fd5b348015604f57600080fd5b5060566058565b005b6000607b9050505600a165627a7a72305820026e5fd8c2f6fe4103dba9baf9c48c052e35ca60d9cdee42faca258c284224430029
        ----  Constructor() Code  ----        PUSH1 0x80 
        PUSH1 0x40 
        MSTORE 
        CALLVALUE 
        DUP1 
        ISZERO 
        PUSH1 0xF 
        JUMPI 
        PUSH1 0x0 
        DUP1 
        REVERT 
        JUMPDEST 
        POP 
        PUSH1 0x8D 
        DUP1 
        PUSH2 0x1E 
        PUSH1 0x0 
        CODECOPY 
        PUSH1 0x0 
        RETURN 
        STOP 
        ----  Contract Code  ----        PUSH1 0x80 
        PUSH1 0x40 
        MSTORE 
        PUSH1 0x4 
        CALLDATASIZE 
        LT 
        PUSH1 0x3F 
        JUMPI 
        PUSH1 0x0 
        CALLDATALOAD 
        PUSH29 0x100000000000000000000000000000000000000000000000000000000 
        SWAP1 
        DIV 
        PUSH4 0xFFFFFFFF 
        AND 
        DUP1 
        PUSH4 0xDBE671F 
        EQ 
        PUSH1 0x44 
        JUMPI 
        JUMPDEST 
        PUSH1 0x0 
        DUP1 
        REVERT 
        JUMPDEST 
        CALLVALUE 
        DUP1 
        ISZERO 
        PUSH1 0x4F 
        JUMPI 
        PUSH1 0x0 
        DUP1 
        REVERT 
        JUMPDEST 
        POP 
        PUSH1 0x56 
        PUSH1 0x58 
        JUMP 
        JUMPDEST 
        STOP 
        JUMPDEST 
        PUSH1 0x0 
        PUSH1 0x7B 
        SWAP1 
        POP 
        POP 
        JUMP 
        STOP
RuntimeCode 汇编:
        ----  Binary  ----        608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f146044575b600080fd5b348015604f57600080fd5b5060566058565b005b6000607b9050505600a165627a7a72305820026e5fd8c2f6fe4103dba9baf9c48c052e35ca60d9cdee42faca258c284224430029
        ----  Contract Code  ----        PUSH1 0x80 
        PUSH1 0x40 
        MSTORE 
        PUSH1 0x4 
        CALLDATASIZE 
        LT 
        PUSH1 0x3F 
        JUMPI 
        PUSH1 0x0 
        CALLDATALOAD 
        PUSH29 0x100000000000000000000000000000000000000000000000000000000 
        SWAP1 
        DIV 
        PUSH4 0xFFFFFFFF 
        AND 
        DUP1 
        PUSH4 0xDBE671F 
        EQ 
        PUSH1 0x44 
        JUMPI 
        JUMPDEST 
        PUSH1 0x0 
        DUP1 
        REVERT 
        JUMPDEST 
        CALLVALUE 
        DUP1 
        ISZERO 
        PUSH1 0x4F 
        JUMPI 
        PUSH1 0x0 
        DUP1 
        REVERT 
        JUMPDEST 
        POP 
        PUSH1 0x56 
        PUSH1 0x58 
        JUMP 
        JUMPDEST 
        STOP 
        JUMPDEST 
        PUSH1 0x0 
        PUSH1 0x7B 
        SWAP1 
        POP 
        POP 
        JUMP 
        STOP
所以,我们可以明白在部署合约的时候,EVM 执行Constructor() 函数的代码初始化合约数据,后续用户通过Web3
调用节点上的合约函数时,是直接在RuntimeCode 中开始执行合约代码.TXDATA
中是带有用户希望调用函数的哈希和函数的参数数据的,接下来合约代码初始EVM Memory 之后,根据TXDATA
里面指向用户希望调用的函数哈希来进行代码跳转.执行函数主体代码前做一些预检测并从TXDATA 中提取函数参数到栈,最后执行函数主体代码并退出.