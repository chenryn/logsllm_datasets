最后用一个例子来强调一个极易被忽视的错误。
在消息队列和信号量对象中，都有 IPC_STAT 和 IPC_SET 的操作。但是由于传递参数
的类型不同，造成了它们在使用上的差别。在 msgctl()函数中，IPC_STAT 操作只是简单的
将内核内 msgqid_ds 结构的地址赋予 buf 参数(是一个指针)。而在semctl()函数中，IPC_STAT
操作是将 semid_ds 的内容拷贝到 arg 参数的 buf 成员指针所指的内存中。所以，下面的代
码会产生错误，而 msgctl()函数的类似代码却不会：
void getmode(int sid)
{
int rc;
union semun semopts;
/*下面的语句会产生错误*/
        if((rc = semctl(sid, 0, IPC_STAT, semopts)) == -1)
        {
                perror("semctl");
                exit(1);
        }
        printf("Pemission Mode were %o\n", semopts.buf->sem_perm.mode);
return;
      }
为什么呢？因为实现没有给 buf 指针分配内存，其指向是不确定的。这种“ 不定向”
的指针是 C 程序中最危险的陷阱之一。改正这个错误，只需要提前给 buf 指针准备一块内
存。下面是修改过的代码：
第四章  进程间通信
- 103 -
void getmode(int sid)
{
int rc;
union semun semopts;
struct semid_ds mysemds;
/*给 buf 指针准备一块内存*/
semopts.buf = &mysemds;
/*现在 OK 了*/
        if((rc = semctl(sid, 0, IPC_STAT, semopts)) == -1)
        {
                perror("semctl");
                exit(1);
        }
        printf("Permission Mode were %o\n", semopts.buf->sem_perm.mode);
return;
      }
4.8.3  信号量的实例——semtool，交互式的信号量使用工具
1．背景知识
semtool 工具通过命令行参数来决定它的行为，这样它可以被方便的应用于 shell 脚本
中。semtool 提供了和信号量有关的全部功能，包括创建信号量、操作、删除信号量对象以
及更改信号量权限等。使用它我们可以在命令行上控制资源的共享。
2．semtool 的命令行语法
建立信号量对象：
semtool c (number of semaphores in set)
锁定信号量：
semtool l (semaphore number to lock)
解开信号量的锁定
semtool u (semaphore number to unlock)
改变信号量的权限
semtool m (mode)
删除信号量对象
semtool d
3．semtool 的使用举例
semtool  c 5
semtool  l
semtool  u
semtool  m 660
semtool  d
4．semtool 的源码
semtool 程序的源码如下：
- 104 -
Linux网络编程
#include 
#include 
#include 
#include 
#include 
#include 
#define SEM_RESOURCE_MAX        1       /* Initial value of all semaphores */
void opensem(int *sid, key_t key);
void createsem(int *sid, key_t key, int members);
void locksem(int sid, int member);
void unlocksem(int sid, int member);
void removesem(int sid);
unsigned short get_member_count(int sid);
int getval(int sid, int member);
void dispval(int sid, int member);
void changemode(int sid, char *mode);
void usage(void);
int main(int argc, char *argv[])
{
        key_t key;
        int   semset_id;
        if(argc == 1)
                usage();
        /* Create unique key via call to ftok() */
        key = ftok(".", 's');
        switch(tolower(argv[1][0]))
        {
                case 'c': if(argc != 3)
                                usage();
                          createsem(&semset_id, key,  atoi(argv[2]));
                          break;
                case 'l': if(argc != 3)
                                usage();
                          opensem(&semset_id, key);
                          locksem(semset_id, atoi(argv[2]));
                          break;
                case 'u': if(argc != 3)
                                usage();
第四章  进程间通信
- 105 -
                          opensem(&semset_id, key);
                          unlocksem(semset_id, atoi(argv[2]));
                          break;
                case 'd': opensem(&semset_id, key);
                          removesem(semset_id);
                          break;
                case 'm': opensem(&semset_id, key);
                          changemode(semset_id, argv[2]);
                          break;
                 default: usage();
        }
        return(0);
}
void opensem(int *sid, key_t key)
{
        /* Open the semaphore set - do not create! */
        if((*sid = semget(key, 0, 0666)) == -1)
        {
                printf("Semaphore set does not exist!\n");
                exit(1);
        }
}
void createsem(int *sid, key_t key, int members)
{
        int cntr;
        union semun semopts;
        if(members > SEMMSL) {
                printf("Sorry, max number of semaphores in a set is %d\n",
                        SEMMSL);
                exit(1);
        }
        printf("Attempting to create new semaphore set with %d members\n",
                                members);
        if((*sid = semget(key, members, IPC_CREAT|IPC_EXCL|0666))
                        == -1)
- 106 -
Linux网络编程
        {
                fprintf(stderr, "Semaphore set already exists!\n");
                exit(1);
        }
        semopts.val = SEM_RESOURCE_MAX;
        /* Initialize all members (could be done with SETALL) */
        for(cntr=0; cntr(get_member_count(sid)-1))
        {
                fprintf(stderr, "semaphore member %d out of range\n", member);
                return;
        }
        /* Attempt to lock the semaphore set */
        if(!getval(sid, member))
        {
                fprintf(stderr, "Semaphore resources exhausted (no lock)!\n");
                exit(1);
        }
        sem_lock.sem_num = member;
        if((semop(sid, &sem_lock, 1)) == -1)
        {
                fprintf(stderr, "Lock failed\n");
                exit(1);
        }
        else
                printf("Semaphore resources decremented by one (locked)\n");
        dispval(sid, member);
}
void unlocksem(int sid, int member)
{
第四章  进程间通信
- 107 -
        struct sembuf sem_unlock={ member, 1, IPC_NOWAIT};
        int semval;
        if( member(get_member_count(sid)-1))
        {
                fprintf(stderr, "semaphore member %d out of range\n", member);
                return;
        }
        /* Is the semaphore set locked? */
        semval = getval(sid, member);
        if(semval == SEM_RESOURCE_MAX) {
                fprintf(stderr, "Semaphore not locked!\n");
                exit(1);
        }
        sem_unlock.sem_num = member;
        /* Attempt to lock the semaphore set */
        if((semop(sid, &sem_unlock, 1)) == -1)
        {
                fprintf(stderr, "Unlock failed\n");
                exit(1);
        }
        else
                printf("Semaphore resources incremented by one (unlocked)\n");
        dispval(sid, member);
}
void removesem(int sid)
{
        semctl(sid, 0, IPC_RMID, 0);
        printf("Semaphore removed\n");
}
unsigned short get_member_count(int sid)
{
        union semun semopts;
        struct semid_ds mysemds;
        semopts.buf = &mysemds;
        /* Return number of members in the semaphore set */
- 108 -
Linux网络编程
        return(semopts.buf->sem_nsems);
}
int getval(int sid, int member)
{
        int semval;
        semval = semctl(sid, member, GETVAL, 0);
        return(semval);
}
void changemode(int sid, char *mode)
{
        int rc;
        union semun semopts;
        struct semid_ds mysemds;
        /* Get current values for internal data structure */
        semopts.buf = &mysemds;
        rc = semctl(sid, 0, IPC_STAT, semopts);
        if (rc == -1) {
                perror("semctl");
                exit(1);
        }
        printf("Old permissions were %o\n", semopts.buf->sem_perm.mode);
        /* Change the permissions on the semaphore */
        sscanf(mode, "%ho", &semopts.buf->sem_perm.mode);
        /* Update the internal data structure */
        semctl(sid, 0, IPC_SET, semopts);
        printf("Updated...\n");
}
void dispval(int sid, int member)
{
        int semval;