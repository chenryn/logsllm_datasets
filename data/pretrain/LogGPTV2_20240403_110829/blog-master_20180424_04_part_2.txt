 Planning Time: 0.165 ms    
 JIT:    
   Functions: 5    
   Generation Time: 1.154 ms    
   Inlining: true    
   Inlining Time: 6.152 ms    
   Optimization: true    
   Optimization Time: 22.501 ms    
   Emission Time: 10.273 ms    
 Execution Time: 50.183 ms    
(20 rows)    
Time: 50.771 ms    
```    
6、性能测试      
```      
vacuum tbl_lab;      
```      
```      
vi test.sql      
select * from tbl_lab where dict @> get_vals1(5)      
  order by score desc limit 100;      
```      
```      
pgbench -M extended -n -r -P 1 -f ./test.sql -c 56 -j 56 -T 120      
```      
7、更新、删除维度内容、分值    
例子    
```    
update tbl_lab set score=? where id=?    
update tbl_lab set dict=array_replace(dict,old_val,new_val) where id=?    
```    
## 设计2    
使用分段rum索引，在不损伤精度的情况下，提高最大吞吐的任意维度TOP-K输出。       
1、使用rum阶梯（类似分段、分区）索引    
假设score的取值范围是0到100，我们将score分为100段，每段1个百分点. （实际可按业务的阶段来设置步长）     
同样的手法，在以下案例中也使用过。  
[《PostgreSQL 相似搜索设计与性能 - 地址、QA、POI等文本 毫秒级相似搜索实践》](../201802/20180202_01.md)    
[《PostgreSQL 相似搜索分布式架构设计与实践 - dblink异步调用与多机并行(远程 游标+记录 UDF实例)》](../201802/20180205_03.md)    
如果业务上可以定一个指标，比如说打分在50以下的完全不需要展示，那么索引甚至可以只需要针对50以上的记录。  
```    
do language plpgsql $$    
declare    
begin    
for i in 1..100 loop    
  execute format('create index idx_tbl_lab__%s on tbl_lab using rum (dict rum_anyarray_ops) where score >%s and score  $1 and score >(100-i) and score= $2 then    
      return;    
    end if;    
  end loop;    
  return;    
end;    
$$ language plpgsql strict;    
```    
3、测试性能    
```    
postgres=# select score,itemid from get_dict(get_vals1(1),100)    
;
  score  |  itemid  
---------+----------
 99.9529 | 36742578
 99.9507 | 69844786
  99.941 | 83415934
 99.9284 | 46894536
 99.9181 | 24389328
...
  98.105 | 62905250
 98.1028 | 83484134
 98.1006 | 67573139
 98.0984 | 19020938
 98.0983 | 90873124
  98.093 |  4732945
 98.0885 | 25186764
 98.0316 | 97861252
 98.0246 | 50682057
(173 rows)
Time: 6.397 ms
postgres=# select score,itemid from get_dict(get_vals1(1),20) ; 
  score  |  itemid  
---------+----------
  99.991 | 27411195
 99.9559 | 20090883
 99.9478 | 55444281
 99.9341 | 70071418
 99.9255 |   632316
 99.9252 | 70685672
 99.8897 | 36828714
 99.8714 | 48261720
 99.8506 | 92092732
  99.811 | 57477121
 99.7868 | 52143704
 99.7526 | 13161677
 99.7496 | 92728450
 99.7318 | 73244372
 99.6917 |  1948099
 99.6274 | 48124431
 99.5875 | 76672257
 99.5636 |  7682029
 99.5593 |  4137987
 99.5535 | 93647650
(20 rows)
Time: 1.252 ms
```    
压测  
```    
vi test.sql    
select score,itemid from get_dict(get_vals1(1),100);    
```    
压测结果  
```    
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 56 -j 56 -T 120  
number of transactions actually processed: 964316  
latency average = 6.969 ms  
latency stddev = 14.058 ms  
tps = 8029.326932 (including connections establishing)  
tps = 8029.687576 (excluding connections establishing)  
```    
## 小结      
1、gin_fuzzy_search_limit 起到了限流效果(具备一定随机性，并不精确)，同时性能的提升不明显(5000左右性能较佳)，并且测试中发现gin_fuzzy_search_limit设置为很小时，性能并不好。    
2、使用rum分段索引，可以实现高效率的过滤，本轮测试1亿数据(81 GB数据，81 GB索引)，100个维度，按SCORE排序，随机获取TOP 100，8029的QPS，得到精准的排序后的数据。  
如果需要更好的并发，需要更多的只读节点来支持。    
测试实例为6140 RMB每月的RDS PG 10最高规格。（56核, 480G内存, 2T存储.）    
本方案与[《PostgreSQL ADHoc(任意字段组合)查询 与 字典化 (rum索引加速) - 实践与方案1》](../201802/20180228_01.md)      不同之处，仅仅在于本例输出的结果需要按SCORE排序，所以我们使用分段索引，以及UDF输出，巧妙的提升了整体的处理吞吐。  
同样的分段加速手法，在以下案例中也使用过。  
[《PostgreSQL 相似搜索设计与性能 - 地址、QA、POI等文本 毫秒级相似搜索实践》](../201802/20180202_01.md)    
[《PostgreSQL 相似搜索分布式架构设计与实践 - dblink异步调用与多机并行(远程 游标+记录 UDF实例)》](../201802/20180205_03.md)    
## 参考      
[《PostgreSQL 实践 - 广告位推荐》](../201804/20180420_03.md)        
[《PostgreSQL ADHoc(任意字段组合)查询 与 字典化 (rum索引加速) - 实践与方案1》](../201802/20180228_01.md)        
[《HTAP数据库 PostgreSQL 场景与性能测试之 20 - (OLAP) 用户画像圈人场景 - 多个字段任意组合条件筛选与透视》](../201711/20171107_21.md)        
[《PostgreSQL 多字段任意组合搜索的性能》](../201711/20171102_01.md)        
[《时间、空间、对象多维属性 海量数据任意多维 高效检索 - 阿里云RDS PostgreSQL最佳实践》](../201707/20170722_01.md)        
[《多字段，任意组合条件查询(无需建模) - 毫秒级实时圈人 最佳实践》](../201706/20170607_02.md)        
[《宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树 (GIN)》](../201702/20170205_01.md)        
[《[未完待续] PostgreSQL 全文检索 大结果集优化 - fuzzy match》](../201803/20180316_03.md)        
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")