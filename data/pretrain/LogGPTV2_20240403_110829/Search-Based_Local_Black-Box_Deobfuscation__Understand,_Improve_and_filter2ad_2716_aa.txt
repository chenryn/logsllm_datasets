title:Search-Based Local Black-Box Deobfuscation: Understand, Improve and
Mitigate
author:Gr&apos;egoire Menguy and
S&apos;ebastien Bardin and
Richard Bonichon and
Cauim de Souza Lima
Search-Based Local Black-Box Deobfuscation:
Understand, Improve and Mitigate
Gr√©goire Menguy
PI:EMAIL
Universit√© Paris-Saclay, CEA, List
France
Richard Bonichon
PI:EMAIL
Nomadic Labs
France
S√©bastien Bardin
PI:EMAIL
Universit√© Paris-Saclay, CEA, List
France
Cauim de Souza Lima
PI:EMAIL
Universit√© Paris-Saclay, CEA, List
France
ABSTRACT
Code obfuscation aims at protecting Intellectual Property and other
secrets embedded into software from being retrieved. Recent works
leverage advances in artificial intelligence (AI) with the hope of
getting blackbox deobfuscators completely immune to standard
(whitebox) protection mechanisms. While promising, this new field
of AI-based, and more specifically search-based blackbox deobfus-
cation, is still in its infancy. In this article we deepen the state of
search-based blackbox deobfuscation in three key directions: un-
derstand the current state-of-the-art, improve over it and design
dedicated protection mechanisms. In particular, we define a novel
generic framework for search-based blackbox deobfuscation en-
compassing prior work and highlighting key components; we are
the first to point out that the search space underlying code deob-
fuscation is too unstable for simulation-based methods (e.g., Monte
Carlo Tree Search used in prior work) and advocate the use of robust
methods such as S-metaheuristics; we propose the new optimized
search-based blackbox deobfuscator Xyntia which significantly out-
performs prior work in terms of success rate (especially with small
time budget) while being completely immune to the most recent
anti-analysis code obfuscation methods; and finally we propose
two novel protections against search-based blackbox deobfuscation,
allowing to counter Xyntia powerful attacks.
CCS CONCEPTS
‚Ä¢ Security and privacy‚Üí Software reverse engineering; ‚Ä¢ Com-
puting methodologies‚Üí Randomized search; Game tree search.
KEYWORDS
Binary-level code analysis; deobfuscation; artificial intelligence;
S-metaheuristics
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485250
ACM Reference Format:
Gr√©goire Menguy, S√©bastien Bardin, Richard Bonichon, and Cauim de Souza
Lima. 2021. Search-Based Local Black-Box Deobfuscation: Understand, Im-
prove and Mitigate. In Proceedings of the 2021 ACM SIGSAC Conference
on Computer and Communications Security (CCS ‚Äô21), November 15‚Äì19,
2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 13 pages.
https://doi.org/10.1145/3460120.3485250
1 INTRODUCTION
Context. Software contain valuable assets, such as secret algo-
rithms, business logic or cryptographic keys, that attackers may
try to retrieve. The so-called Man-At-The-End-Attacks scenario
(MATE) considers the case where software users themselves are
adversarial and try to extract such information from the code. Code
obfuscation [12, 13] aims at protecting codes against such attacks, by
transforming a sensitive program ùëÉ into a functionally equivalent
program ùëÉ‚Ä≤ that is more ‚Äúdifficult‚Äù (more expensive, for example,
in money or time) to understand or modify. On the flip side, code
deobfuscation aims to extract information from obfuscated codes.
Whitebox deobfuscation techniques, based on advanced symbolic
program analysis, have proven extremely powerful against standard
obfuscation schemes [3, 5, 10, 22, 28, 30, 36] ‚Äì especially in local
attack scenarios where the attacker analyses pre-identified parts of
the code (e.g., trigger conditions). But they are inherently sensitive
to the syntactic complexity of the code under analysis, leading to
recent and effective countermeasures [12, 25, 26, 37].
Search-based blackbox deobfuscation. Despite being rarely com-
plete or sound, artificial intelligence (AI) techniques are flexible and
often provide good enough solutions to hard problems in reasonable
time. They have been therefore recently applied to binary-level code
deobfuscation. The pioneering work by Blazytko et al. [7] shows
how Monte Carlo Tree Search (MCTS) [9] can be leveraged to solve
local deobfuscation tasks by learning the semantics of pieces of
protected codes in a blackbox manner, in principle immune to the
syntactic complexity of these codes. Their method and prototype,
Syntia, have been successfully used to reverse state-of-the-art pro-
tectors like VMProtect [34], Themida [27] and Tigress [11], drawing
attention from the software security community [8].
Problem. While promising, search-based blackbox (code) deobfus-
cation techniques are still not well understood. Several key ques-
tions of practical relevance (e.g., deobfuscation correctness and
quality, sensitivity to time budget) are not addressed in Blazytko et
Session 10A: Crypto, Symbols and Obfuscation CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2513al.‚Äôs original paper, making it hard to exactly assess the strengths
and weaknesses of the approach. Moreover, as Syntia comes with
many hard-coded design and implementation choices, it is legit-
imate to ask whether other choices lead to better performance,
and to get a broader view of search-based blackbox deobfuscation
methods. Finally, it is unclear how these methods compare with
recent proposals for greybox deobfuscation [16] or general program
synthesis [6, 29], and how to protect from such blackbox attacks.
Goal. We focus on advancing the current state of search-based
blackbox deobfuscation in the following three key directions: (1)
generalize the initial Syntia proposal and refine the initial experi-
ments by Blazytko et al. in order to better understand search-based
blackbox methods, (2) improve the current state-of-the-art (Syntia)
through a careful formalization and exploration of the design space
and evaluate the approach against greybox and program synthe-
sis methods, and finally (3) study how to mitigate such blackbox
attacks. Especially, we study the underlying search space, bringing
new insights for efficient blackbox deobfuscation, and promote the
application of S-metaheuristics [32] instead of MCTS.
Contributions. Our main contributions are the following:
‚Ä¢ We refine Blazytko et al.‚Äôs experiments in a systematic way,
highlighting new strengths and new weaknesses of the initial
Syntia proposal for search-based blackbox deobfuscation
(Section 4). Especially, Syntia (based on Monte Carlo Tree
Search, MCTS) is far less efficient than expected for small
time budgets (typical usage scenario) and lacks robustness;
‚Ä¢ We propose a missing formalization of blackbox deobfuscation
(Section 4) and dig into Syntia internals to rationalize our
observations (Section 4.4). It appears that the search space
underlying blackbox code deobfuscation is too unstable to rely
on MCTS ‚Äì especially assigning a score to a partial state
through simulation leads to poor estimations. As a result,
Syntia is here almost enumerative;
‚Ä¢ We propose to see blackbox deobfuscation as an optimization
problem rather than a single player game (Section 5), allowing
to reuse S-metaheuristics [32], known to be more robust than
MCTS on unstable search spaces (especially, they do not
need to score partial states). We propose Xyntia (Section 5),
an search-based blackbox deobfuscator using Iterated Local
Search (ILS) [24], known among S-metaheuristics for its ro-
bustness. Thorough experiments show that Xyntia keeps the
benefits of Syntia while correcting most of its flaws. Espe-
cially, Xyntia significantly outperforms Syntia, synthesizing
twice more expressions with a budget of 1 s/expr than Syn-
tia with 600 s/expr. Other S-metaheuristics also clearly beat
MCTS, even if they are less effective here than ILS;
‚Ä¢ We evaluate Xyntia against other state-of-the-art attackers
(Section 6), namely the QSynth greybox deobfuscator [16],
program synthesizers CVC4 [6] and STOKE [29], and pattern-
matching based simplifiers. Xyntia outperforms all of them ‚Äì
it finds 2√ó more expressions and is 30√ó faster than QSynth
on heavy protections;
‚Ä¢ We evaluate Xyntia against state-of-the-art defenses (Sec-
tion 7), especially recent anti-analysis proposals [14, 25, 31,
35, 37]. As expected, Xyntia is immune to such defenses. In
particular, it successfully bypasses side-channels [31], path
explosion [25] and MBA [37]. We also use it to synthesize
VM-handlers from state-of-the-art virtualizers [11, 34];
‚Ä¢ Finally, we propose the two first protections against search-
based blackbox deobfuscation (Section 8). We observe that all
phases of blackbox techniques can be thwarted (hypothe-
sis, sampling and learning), we propose two practical meth-
ods exploiting these limitations and we discuss them in the
context of virtualization-based obfuscation: (1) semantically
complex handlers; (2) merged handlers with branch-less con-
ditions. Experiments show that both protections are highly
effective against blackbox attacks.
We hope that our results will help better understand search-based
deobfuscation, and lead to further progress in this promising field.
Availability. Benchmarks and code are available online.1 Additional
experimental data are available in corresponding technical report.2
2 BACKGROUND
2.1 Obfuscation
Program obfuscation [12, 13] is a family of methods designed to
make reverse engineering (understanding programs internals) hard.
It is employed by manufacturers to protect intellectual property
and by malware authors to hinder analysis. It transforms a program
ùëÉ in a functionally equivalent, more complex program ùëÉ‚Ä≤ with an
acceptable performance penalty. Obfuscation does not ensure that
a program cannot be understood ‚Äì this is impossible in the MATE
context [4] ‚Äì but aims to delay the analysis as much as possible
in order to make it unprofitable. Thus, it is especially important
to protect from automated deobfuscation analyses (anti-analysis
obfuscation). We present here two important obfuscation methods.
Mixed Boolean-Arithmetic (MBA) encoding [37] transforms
an arithmetic and/or Boolean expression into an equivalent one,
combining arithmetic and Boolean operations. It can be applied
iteratively to increase the syntactic complexity of the expression.
Eyrolles et al. [18] show that SMT solvers struggle to answer equiv-
alence requests on MBA expressions, preventing the automated
simplification of protected expressions by symbolic methods.
Virtualization [35] translates an initial code ùëÉ into a bytecode
ùêµ together with a custom virtual machine. Execution of the ob-
fuscated code can be divided in 3 steps (Fig. 1): (1) fetch the next
bytecode instruction to execute, (2) decode the bytecode and find
the corresponding handler, (3) and finally execute the handler. Virtu-
alization hides the real control-flow-graph (CFG) of ùëÉ, and reversing
the handlers is key for reversing the VM. Virtualization is notably
used in malware [19, 33].
Fetch
Decode
Execute
Handlers
‚Ñé1(ùë•, ùë¶)
‚Ñé2(ùë•, ùë¶)
‚Ñé3(ùë•, ùë¶)
‚Ñéùëõ(ùë•, ùë¶)
...
Bytecodes
Figure 1: Virtualization based obfuscation
1https://github.com/binsec/xyntia
2https://arxiv.org/abs/2102.04805
Session 10A: Crypto, Symbols and Obfuscation CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea25142.2 Deobfuscation
Deobfuscation aims at reverting an obfuscated program back to
a form close enough to the original one, or at least to a more un-
derstandable version. Along the previous years, symbolic deobfus-
cation methods based on advanced program analysis techniques
have proven to be very efficient at breaking standard protections
[3, 5, 10, 22, 28, 30, 36]. However, very effective countermeasures
start to emerge, based on deep limitations of the underlying code-
level reasoning mechanisms and potentially strongly limiting their
usage [3, 25, 26, 31, 35]. Especially, all such methods are ultimately
sensitive to the syntactic complexity of the code under analysis.
2.3 Search-based blackbox deobfuscation
Search-based blackbox deobfuscation has been recently proposed
by Blazytko et al. [7], implemented in the Syntia tool, to learn the
semantics of well-delimited code fragments, e.g. MBA expressions
or VM handlers. The code under analysis is seen as a blackbox that
can only be queried (i.e., executed under chosen inputs to observe
results). Syntia samples input-output (I/O) relations, then uses a
learning engine to find an expression mapping sampled inputs to
their observed outputs. Because it relies on a limited number of
samples, results are not guaranteed to be correct. However, being
fully blackbox, it is in principle insensitive to syntactic complexity.
Scope. Syntia tries to infer a simple semantics of heavily obfuscated
local code fragments ‚Äì e.g., trigger based conditions or VM handlers.
Understanding these fragments is critical to fulfill analysis.
Workflow. Syntia workflow is representative of search-based black-
box deobfuscators. First, it needs (1) a reverse window i.e., a subset of
code to work on; (2) the location of its inputs and outputs. Consider
the code in Listing 1 evaluating a condition at line 4. To under-
stand this condition, a reverser focuses on the code between lines
1 and 3. This code segment is our reverse window. The reverser
then needs to locate relevant inputs and outputs. The condition
at line 4 is performed on ùë°3. This is our output. The set of inputs
contains any variables (registers or memory locations at assembly
level) influencing the outputs. Here, inputs are ùë• and ùë¶. Armed with
these information, Syntia samples inputs randomly and observes
resulting outputs. In our example, it might consider the samples
(ùë• ‚Ü¶‚Üí 1, ùë¶ ‚Ü¶‚Üí 2), (ùë• ‚Ü¶‚Üí 0, ùë¶ ‚Ü¶‚Üí 1) and (ùë• ‚Ü¶‚Üí 3, ùë¶ ‚Ü¶‚Üí 4) which respec-
tively evaluate ùë°3 to 3, 1 and 7. Syntia then synthesizes an expression
matching these observed behaviors, using Monte Carlo Tree Search
(MCTS) over the space of all possible (partial) expressions. Here,
it rightly infers that ùë°3 ‚Üê ùë• + ùë¶ and the reverser concludes that
the condition is ùë• + ùë¶ = 5, where a symbolic method will typically
simply retrieve that ((ùë• ‚à® 2ùë¶) √ó 2 ‚àí (ùë• ‚äï 2ùë¶) ‚àí ùë¶) = 5.
i n t
i n t
i n t
i f
t 1 = 2 ‚àó y ;
t 2 = x |
t 1 ;
t 3 = t 2 ‚àó 2 ‚àí ( x ^ t 1 ) ‚àí y ;
( t 3 == 5 )
. . .
Listing 1: Obfuscated condition
3 MOTIVATION
3.1 Attacker model
In the MATE scenario, the attacker is the software user himself. He
has only access to the obfuscated version of the code under analysis
1
2
3
4
and can read or run it at will. We consider that the attacker is highly
skilled in reverse engineering but has limited resources in terms of
time or money. We see reverse engineering as a human-in-the-loop
process where the attacker combines manual analysis with auto-
mated state-of-the-art deobfuscation methods (slicing, symbolic
execution, etc.) on critical, heavily obfuscated code fragments like
VM handlers or trigger-based conditions. Thus, an effective defense
strategy is to thwart automated deobfuscation methods.
3.2 Syntactic and semantic complexity
We now intuitively motivate the use of blackbox deobfuscation.
Consider that we reverse a piece of software protected through vir-
tualization. We need to extract the semantics of all handlers, which
usually perform basic operations like ‚Ñé(ùë•, ùë¶) = ùë•+ùë¶. Understanding
‚Ñé is trivial, but it can be protected to hinder analysis. Eq. (1) shows
how MBA encoding hides ‚Ñé semantics.
‚Ñé(ùë•, ùë¶) = ùë• + ùë¶
ùëöùëèùëé‚àí‚Üí (ùë• ‚à® 2ùë¶) √ó 2 ‚àí (ùë• ‚äï 2ùë¶) ‚àí ùë¶
(1)
Such encoding syntactically transforms the expression to make
it incomprehensible while preserving its semantics. To highlight
the difference between syntax and semantics, we distinguish:
(1) The syntactic complexity of expression ùëí is the size of ùëí,
i.e. the number of operators used in it;
(2) The semantic complexity of expression ùëí is the smallest
size of expressions ùëí‚Ä≤ (in a given language) equivalent to ùëí.
For example, in the MBA language, ùë• + ùë¶ is syntactically simpler
than (ùë• ‚à® 2ùë¶) √ó 2 ‚àí (ùë• ‚äï 2ùë¶) ‚àí ùë¶, yet they have the same semantic
complexity as they are equivalent. Conversely, ùë• +ùë¶ is more seman-
tically complex than (ùë• + ùë¶) ‚àß 0, which equals 0. We do not claim
to give a definitive definition of semantic and syntactic complexity
‚Äì as smaller is not always simpler ‚Äì but introduce the idea that two
kinds of complexity exist and are independent.
The encoding in Eq. (1) is simple, but it can be repeatedly ap-
plied to create a more syntactically complex expression, leading the
reverser to either give up or try to simplify it automatically. White-
box methods based on symbolic execution (SE) [28, 36] and formula
simplifications (in the vein of compiler optimizations) can extract