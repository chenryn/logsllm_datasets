itor is a daemon that runs continually in the background
on systems that are part of the Chameleos-x framework
(that is, the servers, ﬁrewalls, and IDSs).
Its responsibil-
ity is to receive the Chameleos-x policy from the Manage-
ment Console, and apply it on its host system. To do so,
the Chameleos-x policy would have to be translated. This
translation process is done by the Chameleos-x Translator,
which is used to convert the Chameleos-x policy into one
or more system-speciﬁc policies. The Translator resides to-
gether with the Chameleos-x Enforcement Monitor (it could
either be part of the Monitor, or a separate entity that is
invoked by the Monitor). Each Chameleos-x variant would
have its own Translator. For instance, if we are working
with the Snort IDS, the Chameleos-ids Translator will con-
vert the Chameleos-ids policy into a Snort conﬁguration ﬁle.
The layout of the components in the Chameleos-x archi-
tecture is shown in Figure 2. The detailed procedures be-
tween components are described as a workﬂow as follows
(the numbers in Figure 2 relates to this description):
1. The evaluator composes one or more Chameleos-x poli-
cies and uses the Management Console to send them
to the Chameleos-x Enforcement Monitor on a host.
2. The Enforcement Monitor receives the policies.
3. The Chameleos-x Enforcement Monitor invokes the
Translator to translate the policies it just received into
system-speciﬁc policies.
4. The Translator performs the translation process. For
instance, a Chameleos-firewall policy could be trans-
lated into a Linux iptables ruleset, while a Chameleos-
ids policy could be translated into a Snort conﬁgura-
tion ﬁle. The translation could result in one or more
system policies, depending on the requirements of the
speciﬁc systems.
5. After the translation is done, the Enforcement Monitor
invokes the execution program (say, Snort in the case
of Chameleos-ids).
363
Chameleos(cid:13)-(cid:13)x(cid:13) Family(cid:13)Chameleos(cid:13)-(cid:13)os(cid:13)Chameleos(cid:13)-(cid:13)firewall(cid:13)Chameleos(cid:13)-(cid:13)ids(cid:13)Ext(cid:13) 1(cid:13)Ext(cid:13) 2(cid:13)Ext(cid:13) 3(cid:13)Linux(cid:13)OpenBSD(cid:13)Windows(cid:13)XP(cid:13)Ext(cid:13)n(cid:13)Ext(cid:13) 1(cid:13)Ext(cid:13) 2(cid:13)Ext(cid:13) 3(cid:13)Linux(cid:13)iptables(cid:13)OpenBSD(cid:13)pf(cid:13)FreeBSD(cid:13)IPFILTER(cid:13)Ext(cid:13)n(cid:13)Ext(cid:13) 1(cid:13)Ext(cid:13) 2(cid:13)Ext(cid:13) 3(cid:13)Snort(cid:13)Prelude(cid:13)Bro(cid:13)Ext(cid:13)n(cid:13)General Framework(cid:13)Specialized Components(cid:13)Specific Extensions(cid:13)Chameleos(cid:13)-(cid:13)x(cid:13)Enforcement(cid:13)Monitor(cid:13)Chameleos(cid:13)-(cid:13)x(cid:13)Translator(cid:13)Host (Security-Aware System)(cid:13)1(cid:13)2(cid:13)3(cid:13)4(cid:13)5(cid:13)6(cid:13)Management(cid:13)Console(cid:13)Chameleos(cid:13)-(cid:13)x(cid:13)policies(cid:13)System(cid:13)policy 1(cid:13)System(cid:13)policy 2(cid:13)System(cid:13)policy(cid:13)n(cid:13)Execution(cid:13)Program(cid:13)6. The execution program loads and applies the trans-
lated policies on the host.
3. EXPERIMENTS AND RESULTS
Our experiments were designed with two objectives: (1)
to test the translation process of each Chameleos-x variant,
and (2) to test the enforcement/execution process of each
Chameleos-x variant. To perform these experiments, we ﬁrst
designed and implemented a test network consisting of six
machines, each of which plays a single role: a ﬁrewall, an
IDS, a server, a “legit” machine that generates good traﬃc,
an “attacker” machine that generates bad traﬃc, and the
management console. Chameleos-x Enforcement Monitors
were installed on the ﬁrewall, IDS, and server. The manage-
ment console’s responsibility is to push Chameleos-x policies
to the Monitors. The Monitor is in charge of translating the
Chameleos-x policy from the management console into the
correct system policy for its host.
To fulﬁll the two experimental objectives, we use two
“conﬁguration suites” for testing each variant. A conﬁg-
uration suite would consist of a speciﬁc ﬁrewall, IDS, and
server operating system and associated servers (such as the
HTTP and FTP servers). Additionally, in order to make the
experiment more accurate, we would have to make sure each
suite is heterogeneous and diﬀerent from the other. Conﬁg-
uration Suite 1 consists of a ﬁrewall running OpenBSD with
the pf ﬁrewalling subsystem, an IDS running Snort, and a
Linux server that is geared to run Apache and vsftpd as its
web and FTP servers respectively. Conﬁguration Suite 2
comprises a Linux ﬁrewall with iptables, the Snort IDS, and
a FreeBSD server conﬁgured to run thttpd and ftpd. We
also used a management console (running NetBSD) with
the IP address 172.16.0.2 to push Chameleos-x policies to
the machines in each suite.
The translated policies showed consistent behavior in both
Conﬁguration Suites 1 and 2, even though the same origi-
nal Chameleos-x policies were used without changes in each
suite. In addition, the translated policies implemented cer-
tain features using the speciﬁc facilities oﬀered by each tar-
get system. For example, groups were deﬁned diﬀerently in
pf and iptables, but the end behavior was consistent.
These favorable results show that a practical and system-
driven policy framework can be used to perform eﬀective
evaluation of a network in a ﬂexible and extensible man-
ner. It also ﬁrmly indicates that our policy framework could
successfully integrate a simple but powerful declarative lan-
guage with an enforcement architecture. The results also
demonstrate that Chameleos-x, with its system- and platform-
independent nature, is indeed capable of facilitating security
policy management for heterogeneous environments, as rep-
resented by the consistent behavior exhibited by the multiple
kinds of systems in Conﬁguration Suites 1 and 2. These ob-
jectives were achieved by designing the framework discussed
in Section 2.
4. CONCLUSION
We have presented the design of Chameleos-x, a practical
and system-driven policy framework that can be used to fa-
cilitate the management of security policies in heterogeneous
environments eﬀectively. The core strength of Chameleos-
x is its ability to specify and enforce security policies con-
sistently across a diverse range of security-aware systems,
such as operating systems, ﬁrewalls, and intrusion detec-
tion systems. Chameleos-x is also designed to assist system
and network developers in the conﬁguration and evaluation
of these systems for conformance to security policies. Our
experiments conﬁrmed that the Chameleos-x policy frame-
work is suﬃciently ﬂexible and extensible to deploy security
policies eﬀectively across multiple security-aware systems.
We strongly believe Chameleos-x would be very beneﬁcial
to organizations, especially those with large and heteroge-
neous information networks. Based on the promising results
obtained through these experiments, we would work on new
components for the Chameleos-x policy framework. Most
of these new components would be part of the Chameleos-
x Translator. These components include a syntax checker,
analyzer, and reverse translator. The syntax checker would
serve as the foundation for all syntax checking requirements
in the other components. The analyzer would be used to
analyze a Chameleos-x policy for conﬂicts and ambiguities.
The analyzer would have to take constraints [1] and conﬂict
resolution techniques [2] into account, especially for complex
systems like SELinux [3]. The reverse translator ’s role is to
translate a system-speciﬁc policy into a Chameleos-x policy.
Acknowledgements
This work was supported, in part, by funds provided by Na-
tional Science Foundation (NSF-IIS-0242393) and Depart-
ment of Energy Early Career Principal Investigator Award
(DE-FG02-03ER25565).
5. REFERENCES
[1] Trent Jaeger. On the increasing importance of
constraints. In Proceedings of the 4th ACM Workshop
on Role-Based Access Control, pages 33–42, Fairfax,
VA, October 1999.
[2] Trent Jaeger, Antony Edwards, and Xiaolan Zhang.
Managing access control policies using access control
spaces. In Proceedings of the 7th ACM Symposium on
Access Control Models and Technologies, pages 3–12,
Monterey, CA, June 2002.
[3] Trent Jaeger, Reiner Sailer, and Xiaolan Zhang.
Resolving constraint conﬂicts. In Proceedings of the 9th
ACM Symposium on Access Control Models and
Technologies (SACMAT 2004), IBM T.J. Watson
Research Center, Yorktown Heights, NY, June 2004.
[4] Lawrence Teo and Gail-Joon Ahn. Towards the
speciﬁcation of access control policies on multiple
operating systems. In Proceedings of the 5th IEEE
Workshop on Information Assurance, pages 210–217,
United States Military Academy, West Point, NY, June
2004.
[5] Lawrence Teo and Gail-Joon Ahn. Supporting access
control policies across multiple operating systems. In
Proceedings of the 43rd ACM Southeast Conference,
volume 2, pages 288–293, Kennesaw, GA, March 2005.
[6] Lawrence Teo, Gail-Joon Ahn, and Yuliang Zheng.
Dynamic and risk-aware network access management.
In Proceedings of the 8th ACM Symposium on Access
Control Models and Technologies (SACMAT 2003),
pages 217–230, Como, Italy, June 2003.
364