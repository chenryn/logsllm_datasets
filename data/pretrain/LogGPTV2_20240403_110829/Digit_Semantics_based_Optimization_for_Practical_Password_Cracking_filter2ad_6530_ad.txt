construct the mangling rule B9214. When applying this rule, the
word alice1997 will be transformed into a series of guesses like
alice9801, alice9802, and alice9803.
Similarly, the mangling rule F63C0 means to replace (F) the
numpad string (6) at the front (3) of the word with the 12th (C) dictio-
nary (Combination). When applying this rule, the word 12369alice
will be transformed into 1101234alice, 1231357alice, etc. (as-
suming that 1101234 and 1231357 are in the dictionary).
Besides, our operations can also be combined with built-in opera-
tions to construct a mangling rule compound of multiple operations.
For example, the rule B9214 $! includes two operations, i.e. B9214
which we have presented above and $! which appends the symbol
! at the end of the word. When applying the mangling rule, the
word alice1997 will be transformed into a series of guesses like
alice9801!, alice9802!, and alice9803!.
5.3 Enforcement
We enforce our operations in both JtR (v1.9.0) and Hashcat (v6.0.0).
Note that our implementation is compatible with the original built-
in operations. Besides, in Hashcat, these two operations can also
run on GPU like other operations. Moreover, our work is mainly
based on the core logic of rule-based attack. Therefore, regular
updates of password cracking tools like adding new hash modes are
compatible with our work (we discuss the changes for new hash
modes in Hashcat in Appendix C.2). Even for updates that modify
the core code, no significant changes are needed if the original
running logic remains.
5.3.1 Enforcement in JtR. To enforce the processing of digit se-
mantics rules, we add two modules to the rule processing engine
of JtR, namely Detection Module and Processing Module.
When a digit semantics operation is processed, the Detection
Module detects whether the digit segment (located by the parame-
ter pos) matches the tag. As introduced in Section 5.1, we conduct
maximum matching for each tag, with the same matching mecha-
nism presented in Section 3.2. However, since the dictionaries of
Postcode, Idiom, and Combination are too huge for fast detection,
we simplify the detection of these tags into limiting the length (for
Postcode) or the maximum length (for Idiom and Combination)
of the digit segment. The length limitation is indicated with p2 in
Tag_Replace.
After the detection, Processing Module transforms or replaces
the word cyclically and generates a series of guesses according to the
process presented in Section 5.1. The implementation of this module
is more complex since the original operation logic is designed to
generate one guess per rule. As we mentioned in Section 2, the
mangling rules might be composed of several operations. Some of
these operations need to access or update the variables that store
the information about the processed word, like length, the last
character, and the original word itself (word-related information).
Therefore, to enable the combination of digit semantics operations
with all of the built-in operations, we check whether there are
operations to update variables in the remaining operations and
determine which variables will be updated before the execution of
Processing Module. Then we add a data structure to store and
restore the word-related information before changing the word
in each cycle. Due to limited space, more details about those two
modules, along with the modifications in the loading process, are
presented in Appendix C.1.
5.3.2 Enforcement in Hashcat. Hashcat utilizes GPU to accelerate
the attacks. After loading and preprocessing needed data in CPU,
Hashcat transfers the wordlist and the rule set to GPU. Then, the
rule processing, as well as the hashing and matching of the guesses,
is executed by GPU in the kernel function. If the matching is suc-
cessful, Hashcat will pass the indexes of the cracked hash, the rule,
and the word to CPU to reconstruct the guess for the output.
To leverage the acceleration brought by GPU, we add the two
modules, i.e. Detection Module and Processing Module, into
the kernel. These two modules have the same running logic as
those we presented in Section 5.3.1. However, unlike in JtR, there
are no variables storing word-related information to be queried or
updated during the processing in the kernel of Hashcat. Therefore,
it is unnecessary to store the word-related information and restore
it each cycle in the Processing Module. However, for Hashcat to
reconstruct the guess on the CPU side, we add two extra 32-bit
data variables, namely Extra_1 and Extra_2, to store the needed
information and pass it to the CPU side. Extra_1 is obtained in
Detection Module and contains the starting and ending positions
of the matched segment, as well as the information needed for the
further transformation, like the day field for Date and the common
difference for Leap. Extra_2 is obtained in Processing Module
and stores the information about the transformed segment. For
example, for the operation Tag_Trans and the tag Date, if p2 in-
dicates transforming the segment into YYMM, Extra_2 will store
the YY field and MM field of the original segment that has been
transformed into. In this case, if we transform the matched segment
into 9801 (YYMM) in a cycle, Extra_2 contains the YY field 98 and
the MM field 01. Due to the limited space, We present more details
about these two variables and another two major differences in
Appendix C.2.
6 EVALUATION OF DIGIT SEMANTICS RULES
To evaluate our work, we generate a rule set of 1,974 digit seman-
tics rules (referred to as Digits) based on the analysis results in
Section 4.2 and test them on passwords from the real world.
520Digit Semantics based Optimization for Practical Password Cracking Tools
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
6.1 Rule Sets and Data Sets
As we introduced in Section 2.1 and Section 5.1, one mangling rule
might include multiple operations and part of these operations
could contain parameters. It is the same with our newly designed
operations, and it is impractical to test all the rules generated from
them. Therefore, based on the analysis results from Section 4.2, we
construct a rule set that contains 1,974 digit semantics rules com-
posed of single digit semantics operation with selected parameters.
For Tag_Trans, we limit the positions to POS_ALL, POS_END,
and POS_START based on the position distribution. Besides, we
assign p1 and p2 according to the length distribution (they are
set to 3 and 13 for Repeat; 3 and 11 for Continuation; 3 and 6 for
Leap; 8 and 13 for Repeat+; 7 and 0 (unused) for Palindrome) or
the corresponding index of date pattern formats that are shown
in Table 2. For Tag_Replace, we do not assign POS_ALL since it
just turns into a repeated dictionary attack with extremely low
efficiency in that case. In addition, we assign all tags for p1, except
Idiom, Postcode, and Combination due to the low efficiency. These
three types of digit segments are detected only based on the length,
thus most of their valid guesses can be generated by other rules.
By doing so, we generate a total of 1,974 digit semantics rules with
1,740 rules of Tag_Trans and 234 rules of Tag_Replace. For the rules
of Tag_Replace, we generate dictionaries from Youku and Rockyou
by utilizing our digit semantics extraction tools, and each dictionary
includes 100 entries with the highest frequency or probability.
In addition, we use several existent rule sets of JtR and Hashcat
as baselines. SpiderLabs (5,146 rules) is a reordered version of the
JtR standard rule set released by KoreLogic [36]. Best64 (77 rules) is
generally used as the default rule set of Hashcat, with rules created
and improved in community competitions [29]. T0XlC (4,085 rules)
and Generated2 (65,117 rules) are more extensive and effective
rule sets created by Hashcat team [29]. Random (15,085 rules) is
a supplementary rule set randomly generated by Liu et al. [29]
to extend existent rule sets. Moreover, Hashcat itself is able to
generate random rules, which we refer to as HR_n, where the n
indicates the number of rules.
Table 5: Data sets for evaluation. The wordlist is dedupli-
cated and sorted by frequency.
Data Set
UUU9
Neopets
Language
Chinese
English
Training
2,209,915
2,115,419
Testing
551,689
528,953
We evaluate our rules both in Chinese passwords (UUU9 [13])
and in English passwords (a random subset with 10,000,000 pass-
words from Neopets [12]). Each evaluation set is divided into the
training set and the testing set according to the ratio of 4:1. Be-
sides, to better show the efficiency of our rules on the utilization
of digit semantics, we filter out the passwords that do not contain
a segment with more than 2 digits in both training and testing
sets. In terms of wordlist, we select Dodonew and XATO as the
wordlist for Chinese and English password cracking, respectively.
The wordlists are deduplicated and reordered by frequency. Besides,
to avoid biases brought by the wordlist and accurately evaluate the
effect of mangling rules, we remove the passwords that appear in
the wordlist from the corresponding training and testing set. The
basic information of the evaluation sets is shown in Table 5.
6.2 JtR
In order to test the enhancement effect of our digit semantics rules
on the existent rule set, we randomly remove 1,974 rules from the
supplementary rule set Random and add the rules left to SpiderLabs,
along with our digit semantics rules. We name those rules as the
rule set Mix_Digits. Besides, we add all the rules from Random
to SpiderLabs to generate another mixed rule set for comparison,
which is referred to as Mix_Compare. The SpiderLabs alone is used
as a baseline, which is referred to as Mix_Base.
Figure 3: Percentage of digit semantics rules in the ordered
Mix_Digits (only for the rules reordered in descending order
of success density). The n in the x-axis represents the top n
rules in the sorted rule set.
6.2.1 Rule Order. According to the work of Liu et al. [29], we re-
order each mixed rule set in descending order of success density.
Success density is defined as the ratio of a rule’s successful guesses
(those matching a password in the target set) to the total number of
guesses [29]. We reorder those rules iteratively to avoid duplicated
guesses. That is, we first select the rule with the highest success
density, then remove the passwords successfully guessed by this
rule before recalculating the success densities of the rules left. When
reordering, we find that after about 5,000 rules (4,648 rules for Chi-
nese passwords and 5,044 rules for English passwords) are executed,
the rules left contribute no new successful guesses. For the rules left,
we reorder them in the order of SpiderLabs, Digits, and Random.
Figure 3 shows the percentage of digit semantics rules in the
reordered Mix_Digits. Considering that the full set of Digits only
accounts for 9.75% of all rules, the percentage of digit semantics
rules is relatively high (higher than 20.00%). Moreover, in the exper-
iment of English passwords, many digit semantics rules are selected
at the beginning of the reordering (15.4% in the top 500 rules). In
the experiment of Chinese passwords, although the percentage of
digit semantics rules is not high at first, the overall result is still
promising.
We further compare the percentages of selected rules in each
rule set. As is shown in Figure 4, a significantly higher percentage
of rules in Digits are selected compared to Random, especially in the
experiment of English passwords. When compared to SpiderLabs,
the percentage in Digits is slightly lower in the top 3,000 rules but
much higher when selecting more rules.
6.2.2 Cracking Results. We further apply the reordered version of
the three mixed rule sets to crack the testing sets. As is shown in
Figure 5, Mix_Digits has the best performance in both experiments
200600100014001800220026003000340038004200460050000%5%10%15%20%25%Rules SelectedPercentofDigitSemanticsRulesDodonew-UUU9XATO-Neopets521ACSAC ’21, December 6–10, 2021, Virtual Event, USA
H. Zhang, C. Wang, W. Ruan, et al.
more passwords than Mix_Base under 107 and 108 guesses, where
the increase of Mix_Digits is 255.33× and 10.04× as much as the
increase of Mix_Compare.
6.2.3 Analysis on Digit Semantics Rules. We further analyze the
digit semantics rules with high performance. In the test of Chinese
passwords (Dodonew-UUU9), we obtain 52 rules of Tag_Trans and
48 rules of Tag_Replace from the top 100 digit semantics rules in
Mix_Digits. In those rules of Tag_Trans, Date is the most frequent
tag (44). It is reasonable since most rules of Tag_Trans is related
to Date. However, among those rules of Tag_Replace, Date (7) is
also the most frequent tag, followed by Continuation (6), Leap
(6), Numpad (6), and Idiom (6). In the test of English passwords
(XATO-Neopets), we obtain 42 and 58 rules of Tag_Trans and of
Tag_Replace from the top 100 digit semantics rules, respectively.
Date (36) is also the most frequent tag in those rules of Tag_Trans.
While in those rules of Tag_Replace, Continuation (12) is the most
frequent tag dictionary used, followed by Leap (7), Date (7), and
Subword (7).
6.3 Hashcat
As we mentioned in Section 2.1, Hashcat follows a complex word-
major order, which means that the Guesses Number Curve for the
test of Hashcat depends more on the wordlist than the rule set.
Therefore, different from the analysis method for JtR, we evaluate
the effect of digit semantics rules in Hashcat by analyzing the
increment of guessed passwords after adding digit semantics rules
from Digits to each existent rule set (Best64, T0XlC, and Generated2)
and exhausting all guesses. In order to analyze the improvement
of adding different amount of rules, we firstly use the training
set to reorder rules in Digits according to the number of guessed
passwords that the corresponding existent rule set cannot guess.
We also sort them iteratively to avoid duplicated guesses.
(a) Dodonew-UUU9
(b) XATO-Neopets
Figure 6: Increase of guessed passwords after adding the top
300 rules from Digits to each existent rule set Best64, T0XlC,
and Generated2.
Figure 6 shows the percentages of guessed passwords in testing
sets after adding the top 300 digit semantics rules to each existent
rule set. We can observe a significant increase when cracking both
Chinese and English passwords under each existent rule set. It is
rather reasonable that the improvements under Best64 and T0XlC
are much more significant since they only contain a small number
of rules. However, we also observe promising results under the
large rule set Generated2 (relatively 10.54% and 6.84% more pass-
words guessed with the top 200 rules added). This result shows the
effectiveness of digit semantics rules. Besides, similar to the results
(a) Dodonew-UUU9
(b) XATO-Neopets
Figure 4: Proportion of selected rules in each rule set.
and is very close to Minauto, which represents the ideal performance
under all the three rule sets [40]. We obtain the Minauto by assigning
each guessed password the minimum guess number across all three
rule sets.
(a) Dodonew-UUU9
(b) XATO-Neopets
Figure 5: Performance comparison of the reordered version
of Mix_Base (gray), Mix_Compare (green), and Mix_Digits
(red). The blue line is Minauto.
The digit semantics rules are significantly effective when crack-
ing Chinese passwords after the number of guesses reaches 109 (gen-
erated by around the top 550 rules) and the gaps between Mix_Digits
and other rule sets are most obvious under 1011 guesses (generated
by around the top 3,320 rules). Mix_Digits cracks relatively 17.58%
more passwords than Mix_Compare under 1011 guesses. Moreover,
under 1011 guesses, compared to Mix_Base, Mix_Digits cracks rel-
atively 23.65% more passwords, which is 4.58× as much as that
of Mix_Compare (5.17% more cracked passwords). Under a small
guess number like 108, we achieve relatively small improvement.
Such a phenomenon is reasonable, because most rules processed
in the beginning are selected from SpiderLabs, as is presented in
Section 6.2.1.
The absolute change in English passwords is less significant
compared to that in Chinese passwords, even though we find richer
digit semantics in English passwords from the perspective of all seg-
ments in Section 4.2. This anomaly may be related to the complexity
of the passwords in the target set itself and the similarity between
wordlist and target set. However, it has little influence when we
compare rule sets in the same attack scenario. We can still observe
a better performance of Mix_Digits. Moreover, the improvement
is more significant under a small number of guesses (107 guesses)
and is stable through all the guesses, which is more advantageous
in some attack scenarios where the guess number is limited [31].
Under 107 and 108 guesses, Mix_Digits cracks relatively 28.47%
and 19.53% more passwords than Mix_Compare. When compared
to Mix_Base, Mix_Digits can crack relatively 28.62% and 22.17%
522Digit Semantics based Optimization for Practical Password Cracking Tools
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 6: Extra guesses and relative increase of guessed passwords after adding different rule sets. Digits_100 includes the top
100 digit semantics rules. HR_n represents n random rules generated by Hashcat.
Wordlist
# Word
Target Set
Rule Set
Extra Guesses
Improvement in Each Built-in Rule Set
Best64
Generated2
T0XlC
Dodonew
10,119,695
UUU9
XATO
5,189,384