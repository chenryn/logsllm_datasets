### **应用背景**
日志分析是应用运维监控的强有效手段，将日志进行采集，实现业务系统日志的统一汇聚，通过关键字模糊匹配，人工经验干预等手段，实现错误日志实时监控和清洗，当前的检测手段比较单一，并且随着日志数量越来越多，格式越来越复杂的条件，当前手段无法快速处理并检测异常。
1.  经验沉淀少，依赖人工干预
    传统日志检测主要基于固定关键字匹配的方式，存在以下问题：
    1）关键字的梳理，依赖于运维人员经验，覆盖面较窄；
    2）日志分析需要大量研发和运维人员参与，问题处理效率与质量较低。
2.  日志越来越复杂，无法快速反应
    日志数量越来越多、越来越复杂，并且格式不统一的情况下，人工经验无法快速发现和检测异常问题，需要提升智能检测手段。
本场景建立语料库，将应用、容器等日志经过分析和处理后录入语料库，通过特征码以及Hierarchical
Clustering算法进行提取，实现日志数据的清洗，筛选错误日志，从大量的语料库文本数据中，自动提取重要信息，进行自动摘要，输出告警。
### **实现方案**
批量接入历史数据，通过spark离线学习运算，利用层级聚类(Hierarchical
Clustering)算法+ Regular
Expression，分析日志模型，参数类型，形成日志模式树，参数树。
实时采集应用以及容器日志，对采集的日志进行模式抽象、参数抽象，与模式库中的样本进行对比，针对新出现的日志模式、参数模式、日志模式占比异常进行告警。
![](media/image34.png){width="5.763888888888889in"
height="2.9106299212598423in"}
图 27 实现流程图
### **主要功能**
#### 应用日志异常检测
##### 数据要求
接入方需要提供以下指标（二选一）供采集：
1、CRM应用日志；
2、CRM调用链数据。
##### **算法**
Hierarchical Clustering
> 层次聚类（Hierarchical
> Clustering）算法的基本思想是：通过某种相似性测度计算节点之间的相似性，并按相似度由高到低排序，逐步重新连接个节点。该方法的优点是可随时停止划分，主要步骤如下：
>
> （1）移除网络中的所有边，得到有n个孤立节点的初始状态；
>
> （2）计算网络中每对节点的相似度；
>
> （3）根据相似度从强到弱连接相应节点对，形成树状图；
>
> （4）根据实际需求横切树状图，获得社区结构
-   算法优势
层次聚类(Hierarchical
Clustering)算法，从已知的正常日志历史数据中，训练得到可能的模式(pattern，又叫signature或log
key)树。假设训练样本足够全面，那么运维人员不再需要关心每一条日志的内容，只需要关注线上日志数据是否过分偏离了模式树即可。
-   模型训练
1)  迭代周期
日志按照周期进行检测，检测过程会对数据进行层次聚类，形成数据模式。
这部分的模式会跟已有模型中的模式相匹配，进行校验，不在模型中的模式会自动添加，估每个检测过程同时也是训练过程，借此达到自动训练效果。
2)  遇到的问题
> 1、日志检测对数据格式没要求，但如果数据不必要内容太多，我们可以适当进行裁剪，以获得更好检测效果；
>
> 2、运维人员如果对检测数据较熟悉，可以在训练过程里面加入正则表达式，除了层次聚类形成的模型外可以适配更多运维人员关注的内容，这部分内容可以作为参数进行检测。
##### **实现功能**
1、通过清洗模型，把采集的应用日志原始数据进行清洗裁剪，形成基础检测数据。其中加入额外标签，例如唯一标签（检测出异常后关联原始日志，以便查看上下文）、中心、集群、进程、ip等，利于检测后的告警或者二次分析，实现数据标签化功能以及数据格式化功能。
原始日志数据
![](media/image53.png){width="5.763888888888889in"
height="2.941317804024497in"}
标签以及裁剪后的基础检测数据
![](media/image54.png){width="5.763888888888889in"
height="0.6564424759405074in"}
2、基础检测数据进行训练前，可通过训练配置加入正则表达，更好去适配基础数据关键内容，训练后会根据适配的内容生成参数，可用于参数检测，实现灵活的数据训练配置功能。
![](media/image55.png){width="5.763888888888889in"
height="5.451011592300962in"}
图 28 新建检测任务界面
3、通过周期性的检测过程中，以模型为基础，识别检测数据的模式以及参数，如果检测数据符合模式库的异常模式或者不匹配模式库中的任何模式会进行告警。
另外检测数据如果匹配上模式库中模式，会识别模式中配置的参数，如果参数不在白名单，也会进行告警。
通过检测，实现异常模式快速发现，异常参数识别，以及异常数据告警的功能。
![](media/image56.png){width="5.763888888888889in"
height="0.8271795713035871in"}
图 29 检测结果
#### 容器日志异常检测
##### 数据要求
接入方需要提供以下指标供采集：
容器程序自身日志，例如docker日志。（非容器所承载应用的数据）
##### **算法**
-   算法描述
Hierarchical Clustering
> 层次聚类（Hierarchical
> Clustering）算法的基本思想是：通过某种相似性测度计算节点之间的相似性，并按相似度由高到低排序，逐步重新连接个节点。该方法的优点是可随时停止划分，主要步骤如下：
>
> （1）移除网络中的所有边，得到有n个孤立节点的初始状态；
>
> （2）计算网络中每对节点的相似度；
>
> （3）根据相似度从强到弱连接相应节点对，形成树状图；
>
> （4）根据实际需求横切树状图，获得社区结构
-   算法优势
层次聚类(Hierarchical
Clustering)算法，从已知的正常日志历史数据中，训练得到可能的模式(pattern，又叫signature或log
key)树。假设训练样本足够全面，那么运维人员不再需要关心每一条日志的内容，只需要关注线上日志数据是否过分偏离了模式树即可。
-   模型训练
1)  迭代周期
日志按照周期进行检测，检测过程会对数据进行层次聚类，形成数据模式。
这部分的模式会跟已有模型中的模式相匹配，进行校验，不在模型中的模式会自动添加，估每个检测过程同时也是训练过程，借此达到自动训练效果。
2)  遇到的问题
> 1、日志检测对数据格式没要求，但如果数据不必要内容太多，我们可以适当进行裁剪，以获得更好检测效果；
>
> 2、运维人员如果对检测数据较熟悉，可以在训练过程里面加入正则表达式，除了层次聚类形成的模型外可以适配更多运维人员关注的内容，这部分内容可以作为参数进行检测。
#####  **实现功能**
1、通过清洗模型，把采集的容器日志原始数据进行清洗裁剪，形成基础检测数据。其中加入额外标签，例如唯一标签（检测出异常后关联原始日志，以便查看上下文）、IP等，利于检测后的告警或者二次分析，实现数据标签化功能以及数据格式化功能。
原始日志数据
![](media/image57.png){width="5.763888888888889in"
height="0.2128105861767279in"}