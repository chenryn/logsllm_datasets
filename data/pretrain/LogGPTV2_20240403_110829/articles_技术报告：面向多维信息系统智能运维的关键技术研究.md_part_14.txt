### **应用背景**

日志分析是应用运维监控的重要手段，通过采集和统一汇聚业务系统的日志数据，可以实现对错误日志的实时监控和清洗。当前的日志检测方法主要依赖于关键字模糊匹配和人工经验干预，但这种方法存在以下问题：

1. **经验沉淀少，依赖人工干预**
   - 传统日志检测基于固定关键字匹配，存在以下问题：
     1. 关键字的梳理依赖于运维人员的经验，覆盖面较窄。
     2. 日志分析需要大量研发和运维人员参与，导致问题处理效率和质量较低。

2. **日志复杂度增加，难以快速响应**
   - 随着日志数量和格式复杂度的增加，人工经验无法快速发现和检测异常问题，亟需提升智能检测手段。

为解决上述问题，本场景将建立语料库，通过特征码和层级聚类（Hierarchical Clustering）算法对日志数据进行清洗，筛选出错误日志，并自动提取重要信息生成摘要，从而输出告警。

### **实现方案**

1. **批量接入历史数据**
   - 使用Spark进行离线学习运算，结合层级聚类（Hierarchical Clustering）算法和正则表达式（Regular Expression），分析日志模型和参数类型，形成日志模式树和参数树。

2. **实时日志采集与分析**
   - 实时采集应用和容器日志，对采集的日志进行模式抽象和参数抽象，与模式库中的样本进行对比。针对新出现的日志模式、参数模式或日志模式占比异常的情况进行告警。

![](media/image34.png){width="5.763888888888889in" height="2.9106299212598423in"}
图 27 实现流程图

### **主要功能**

#### 应用日志异常检测

##### 数据要求
接入方需提供以下指标之一供采集：
- CRM应用日志
- CRM调用链数据

##### 算法
**层级聚类（Hierarchical Clustering）**
- **基本思想**：通过某种相似性测度计算节点之间的相似性，并按相似度由高到低排序，逐步重新连接节点。
- **主要步骤**：
  1. 移除网络中的所有边，得到有n个孤立节点的初始状态。
  2. 计算网络中每对节点的相似度。
  3. 根据相似度从强到弱连接相应节点对，形成树状图。
  4. 根据实际需求横切树状图，获得社区结构。

- **算法优势**：从已知的正常日志历史数据中训练得到可能的模式树。如果训练样本足够全面，运维人员只需关注线上日志数据是否过分偏离了模式树。

- **模型训练**
  1. **迭代周期**：日志按照周期进行检测，检测过程会对数据进行层次聚类，形成数据模式。新模式会与已有模型中的模式相匹配，不在模型中的模式会自动添加，每个检测过程同时也是训练过程。
  2. **遇到的问题**：
     - 如果数据不必要内容太多，可以适当裁剪以提高检测效果。
     - 运维人员可以在训练过程中加入正则表达式，适配更多关注的内容，作为参数进行检测。

##### 实现功能
1. **数据清洗与标签化**：通过清洗模型，对采集的应用日志原始数据进行清洗和裁剪，形成基础检测数据。加入额外标签（如唯一标签、中心、集群、进程、IP等），便于后续告警和二次分析。
   - 原始日志数据
     ![](media/image53.png){width="5.763888888888889in" height="2.941317804024497in"}
   - 标签及裁剪后的基础检测数据
     ![](media/image54.png){width="5.763888888888889in" height="0.6564424759405074in"}

2. **灵活的数据训练配置**：在基础检测数据训练前，可通过训练配置加入正则表达式，更好地适配关键内容。训练后根据适配内容生成参数，用于参数检测。
   - 新建检测任务界面
     ![](media/image55.png){width="5.763888888888889in" height="5.451011592300962in"}

3. **异常检测与告警**：通过周期性的检测，识别检测数据的模式和参数。如果检测数据符合异常模式或不匹配任何模式，系统将进行告警。如果参数不在白名单内，也会进行告警。
   - 检测结果
     ![](media/image56.png){width="5.763888888888889in" height="0.8271795713035871in"}

#### 容器日志异常检测

##### 数据要求
接入方需提供以下指标供采集：
- 容器程序自身日志（例如Docker日志）

##### 算法
**层级聚类（Hierarchical Clustering）**
- **基本思想**：通过某种相似性测度计算节点之间的相似性，并按相似度由高到低排序，逐步重新连接节点。
- **主要步骤**：
  1. 移除网络中的所有边，得到有n个孤立节点的初始状态。
  2. 计算网络中每对节点的相似度。
  3. 根据相似度从强到弱连接相应节点对，形成树状图。
  4. 根据实际需求横切树状图，获得社区结构。

- **算法优势**：从已知的正常日志历史数据中训练得到可能的模式树。如果训练样本足够全面，运维人员只需关注线上日志数据是否过分偏离了模式树。

- **模型训练**
  1. **迭代周期**：日志按照周期进行检测，检测过程会对数据进行层次聚类，形成数据模式。新模式会与已有模型中的模式相匹配，不在模型中的模式会自动添加，每个检测过程同时也是训练过程。
  2. **遇到的问题**：
     - 如果数据不必要内容太多，可以适当裁剪以提高检测效果。
     - 运维人员可以在训练过程中加入正则表达式，适配更多关注的内容，作为参数进行检测。

##### 实现功能
1. **数据清洗与标签化**：通过清洗模型，对采集的容器日志原始数据进行清洗和裁剪，形成基础检测数据。加入额外标签（如唯一标签、IP等），便于后续告警和二次分析。
   - 原始日志数据
     ![](media/image57.png){width="5.763888888888889in" height="0.2128105861767279in"}