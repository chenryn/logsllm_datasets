### Theorem and Its Implications

For any computational run \(R_c\) conforming to \((\Sigma_c, r)\) with \(|R_c| \leq \eta k\), there exists a symbolic run \(R_s\) conforming to \((\Sigma_s, \pi_1(r))\) such that \(R_s \sim_r R_c\).

This theorem considers only computational runs \(R_c\) of polynomial length (i.e., \(|R_c| \leq \eta k\)) with respect to a security parameter \(\eta\). This is crucial because the adversary's strategy is executed at each computational step. Therefore, over the entire run, the adversary can execute probabilistic polynomial-time (PPTIME) algorithms for \(|R_c|\) times. Without a polynomial bound on \(|R_c|\), the adversary could run algorithms outside PPTIME before the end of the run, potentially breaking the underlying cryptographic primitives.

In summary, the theorem states that if we run the computational strategies \(\Sigma_c\) using randomness \(r\), generating a polynomially-bounded run \(R_c\) conformant with \(\Sigma_c\), then, with overwhelming probability, \(R_c\) is coherent with some symbolic run \(R_s\). This run can be obtained by running the strategies \(\Sigma_s\) using the randomness \(\pi_1(r)\), which represents the sequence of even-indexed bits in \(r\) (a technical artifact of our \(\aleph\) construction).

The theorem implicitly uses the compiler in two ways: the translation \(\aleph\) (the obtained computational strategies involve the compilation of the contracts used by the symbolic strategies) and the coherence relation \(\sim\).

### Conclusions

Our work bridges the gap between the cryptography community, where Bitcoin smart contracts were first investigated, and the programming languages community. Specifically, our computational soundness result ensures that if certain safety properties are violated at the computational level, they are also violated at the symbolic level. This means that reachability-based symbolic analyses can be soundly used to prove safety properties of smart contracts.

Although BitML can express many of the smart contracts found in the literature [15], it has some limitations. For example, it cannot express contingent payments, where a participant A promises to pay B an amount \(x\) satisfying a predicate chosen by A (e.g., \(x\) is a prime factor of a given large number). Contingent payments can be implemented in Bitcoin similarly to timed commitments: A pays a deposit, which B can claim after revealing a preimage of \(H(x)\) that satisfies the predicate. An off-chain protocol [18] (which exploits zero-knowledge proofs) is used to ensure that \(H(x)\) is indeed the hash of a value \(x\) satisfying the predicate. Note that, in the Bitcoin scripting language, one can only check trivial predicates, such as equality.

BitML could be extended to express contingent payments by using zero-knowledge proofs similar to those in [18] during the stipulation phase. This would allow our compiler to generate standard Bitcoin transactions. Another type of contract not expressible in BitML involves scenarios where one cannot pre-determine, at compile time, a finite set of transactions, signatures, or execution steps. For example, in crowdfunding contracts [15], participants invest money until a given threshold is reached. Here, we do not statically know the number of participants or their identities, so it is not possible to statically produce (and pre-sign) a set of transactions, as required by BitML. Extending BitML to express this kind of contract while preserving our compilation technique would require suitable extensions of Bitcoin transactions. For instance, recursion could be achieved via extensions similar to those proposed in [49, 53].

### References

[1] 2012. Bitcoin wiki - Contracts. https://en.bitcoin.it/wiki/Contract. (2012).
[2] 2012. Bitcoin wiki - Contracts - Using external state. https://en.bitcoin.it/wiki/Contract#Example_4:_Using_external_state. (2012).
[3] 2015. Bitcoin developer guide - Escrow and arbitration. https://bitcoin.org/en/developer-guide#escrow-and-arbitration. (2015).
[4] 2016. Understanding the DAO attack. (June 2016). http://www.coindesk.com/understanding-dao-hack-journalists/.
[5] 2017. IVY. https://docs.ivy-lang.org/bitcoin/. (2017).
[6] 2017. Parity Wallet Security Alert. (July 2017). https://paritytech.io/blog/security-alert.html.
[7] 2017. A Postmortem on the Parity Multi-Sig Library Self-Destruct. (November 2017). https://goo.gl/Kw3gXi.
[8] 2018. BALZaC: Bitcoin Abstract Language, analyZer and Compiler. https://blockchain.unica.it/balzac/. (2018).
[9] Martín Abadi and Phillip Rogaway. 2007. Reconciling Two Views of Cryptography (The Computational Soundness of Formal Encryption). J. Cryptology 20, 3 (2007), 395. https://doi.org/10.1007/s00145-007-0203-0
[10] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Konstantinos Christidis, Angelo De Caro, David Enyeart, Christopher Ferris, Gennady Laventman, Yacov Manevich, Srinivasan Muralidharan, Chet Murthy, Binh Nguyen, Manish Sethi, Gari Singh, Keith Smith, Alessandro Sorniotti, Chrysoula Stathakopoulou, Marko Vukolic, Sharon Weed Cocco, and Jason Yellick. 2018. Hyperledger Fabric: a distributed operating system for permissioned blockchains. In EuroSys. 30:1–30:15. https://doi.org/10.1145/3190508.3190538
[11] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. 2014. Fair Two-Party Computations via Bitcoin Deposits. In Financial Cryptography Workshops (LNCS), Vol. 8438. Springer, 105–121. https://doi.org/10.1007/978-3-662-44774-1_8
[12] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. 2014. Secure Multiparty Computations on Bitcoin. In IEEE S & P. 443–458. https://doi.org/10.1109/SP.2014.35 First appeared on Cryptology ePrint Archive, http://eprint.iacr.org/2013/784.
[13] Maria Apostolaki, Aviv Zohar, and Laurent Vanbever. 2017. Hijacking Bitcoin: Routing Attacks on Cryptocurrencies. In IEEE Symp. on Security and Privacy. 375–392. https://doi.org/10.1109/SP.2017.29
[14] Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. 2017. A Survey of Attacks on Ethereum Smart Contracts (SoK). In Principles of Security and Trust (POST) (LNCS), Vol. 10204. Springer, 164–186. https://doi.org/10.1007/978-3-662-54455-6_8
[15] Nicola Atzei, Massimo Bartoletti, Tiziana Cimoli, Stefano Lande, and Roberto Zunino. 2018. SoK: unraveling Bitcoin smart contracts. In Principles of Security and Trust (POST) (LNCS), Vol. 10804. Springer, 217–242. https://doi.org/10.1007/978-3-319-89722-6
[16] Nicola Atzei, Massimo Bartoletti, Stefano Lande, and Roberto Zunino. 2018. A formal model of Bitcoin transactions. In Financial Cryptography and Data Security.
[17] Christian Badertscher, Ueli Maurer, Daniel Tschudi, and Vassilis Zikas. 2017. Bitcoin as a Transaction Ledger: A Composable Treatment. In CRYPTO. 324–356. https://doi.org/10.1007/978-3-319-63688-7_11
[18] Waclaw Banasik, Stefan Dziembowski, and Daniel Malinowski. 2016. Efficient Zero-Knowledge Contingent Payments in Cryptocurrencies Without Scripts. In ESORICS (LNCS), Vol. 9879. Springer, 261–280. https://doi.org/10.1007/978-3-319-45741-3_14
[19] Massimo Bartoletti and Livio Pompianu. 2017. An empirical analysis of smart contracts: platforms, applications, and design patterns. In Financial Cryptography Workshops (LNCS), Vol. 10323. Springer, 494–509.
[20] Massimo Bartoletti and Roberto Zunino. 2017. Constant-deposit multiparty lotteries on Bitcoin. In Financial Cryptography Workshops (LNCS), Vol. 10323. Springer. https://doi.org/10.1007/978-3-319-70278-0
[21] Mihir Bellare and Phillip Rogaway. 1993. Random Oracles Are Practical: A Paradigm for Designing Efficient Protocols. In ACM Conference on Computer and Communications Security. ACM, 62–73. https://doi.org/10.1145/168588.168596
[22] Iddo Bentov and Ranjit Kumaresan. 2014. How to Use Bitcoin to Design Fair Protocols. In CRYPTO (LNCS), Vol. 8617. Springer, 421–439. https://doi.org/10.1007/978-3-662-44381-1_24
[23] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cedric Fournet, Anitha Gollamudi, Georges Gonthier, Nadim Kobeissi, Aseem Rastogi, Thomas Sibut-Pinote, Nikhil Swamy, and Santiago Zanella-Beguelin. 2016. Formal Verification of Smart Contracts. In PLAS.
[24] Alex Biryukov, Dmitry Khovratovich, and Sergei Tikhomirov. 2017. Findel: Secure Derivative Contracts for Ethereum. In Financial Cryptography Workshops (LNCS), Vol. 10323. Springer, 453–467. https://doi.org/10.1007/978-3-319-70278-0_28
[25] BitFury group. 2015. Smart Contracts on Bitcoin Blockchain. (2015). http://bitfury.com/content/5-white-papers-research/contracts-1.1.1.pdf.
[26] Dan Boneh and Moni Naor. 2000. Timed Commitments. In CRYPTO (LNCS), Vol. 1880. Springer, 236–254. https://doi.org/10.1007/3-540-44598-6
[27] Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A. Kroll, and Edward W. Felten. 2015. SoK: Research Perspectives and Challenges for Bitcoin and Cryptocurrencies. In IEEE S & P. 104–121. https://doi.org/10.1109/SP.2015.14
[28] Vitalik Buterin. 2013. Ethereum: a next generation smart contract and decentralized application platform. https://github.com/ethereum/wiki/wiki/White-Paper. (2013).
[29] Krishnendu Chatterjee, Amir Kafshdar Goharshady, and Yaron Velner. 2018. Quantitative Analysis of Smart Contracts. In ESOP. 739–767. https://doi.org/10.1007/978-3-319-89884-1_26
[30] Karl Crary and Michael J. Sullivan. 2015. Peer-to-peer affine commitment using Bitcoin. In ACM Conf. on Programming Language Design and Implementation. 479–488. https://doi.org/10.1145/2737924.2737997
[31] Christian Decker and Roger Wattenhofer. 2015. A Fast and Scalable Payment Network with Bitcoin Duplex Micropayment Channels. In Stabilization, Safety, and Security of Distributed Systems (SSS) (LNCS), Vol. 9212. Springer, 3–18. https://doi.org/10.1007/978-3-319-21741-3_1
[32] Sergi Delgado-Segura, Cristina Pérez-Solà, Guillermo Navarro-Arribas, and Jordi Herrera-Joancomartí. 2017. A fair protocol for data trading based on Bitcoin transactions. Future Generation Computer Systems (2017). https://doi.org/10.1016/j.future.2017.08.021
[33] Ittay Eyal and Emin Gün Sirer. 2014. Majority Is Not Enough: Bitcoin Mining Is Vulnerable. In Financial Cryptography (LNCS), Vol. 8437. Springer, 436–454. https://doi.org/10.1007/978-3-662-45472-5_28
[34] Juan A. Garay, Aggelos Kiayias, and Nikos Leonardos. 2015. The Bitcoin Backbone Protocol: Analysis and Applications. In EUROCRYPT (LNCS), Vol. 9057. Springer, 281–310. https://doi.org/10.1007/978-3-662-46803-6_10
[35] David M. Goldschlag, Stuart G. Stubblebine, and Paul F. Syverson. 2010. Temporarily hidden bit commitment and lottery applications. Int. J. Inf. Sec. 9, 1 (2010), 33–50. https://doi.org/10.1007/s10207-009-0094-1
[36] Ilya Grishchenko, Matteo Maffei, and Clara Schneidewind. 2018. Foundations and Tools for the Static Analysis of Ethereum Smart Contracts. In CAV (LNCS), Vol. 10981. Springer, 51–78. https://doi.org/10.1007/978-3-319-96145-3_4
[37] Ilya Grishchenko, Matteo Maffei, and Clara Schneidewind. 2018. A Semantic Framework for the Security Analysis of Ethereum Smart Contracts. In Principles of Security and Trust (POST) (LNCS), Vol. 10804. Springer, 243–269. https://doi.org/10.1007/978-3-319-89722-6_10
[38] Yoichi Hirai. 2017. Defining the Ethereum Virtual Machine for Interactive Theorem Provers. In Financial Cryptography Workshops (LNCS), Vol. 10323. Springer, 520–535. https://doi.org/10.1007/978-3-319-70278-0_33
[39] Simon L. Peyton Jones, Jean-Marc Eber, and Julian Seward. 2000. Composing contracts: an adventure in financial engineering, functional pearl. In International Conference on Functional Programming (ICFP). 280–292. https://doi.org/10.1145/351240.351267
[40] Ahmed E. Kosba, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos Papamanthou. 2016. Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts. In IEEE Symp. on Security and Privacy. 839–858. https://doi.org/10.1109/SP.2016.55
[41] Ranjit Kumaresan and Iddo Bentov. 2014. How to Use Bitcoin to Incentivize Correct Computations. In ACM CCS. 30–41. https://doi.org/10.1145/2660267.2660380
[42] Ranjit Kumaresan, Tal Moran, and Iddo Bentov. 2015. How to Use Bitcoin to Play Decentralized Poker. In ACM CCS. 195–206. https://doi.org/10.1145/2810103.2813712
[43] Eric Lombrozo, Johnson Lau, and Pieter Wuille. 2015. Segregated Witness (Consensus layer). (2015). BIP 141, https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki.
[44] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor. 2016. Making Smart Contracts Smarter. In ACM CCS. 254–269. https://doi.org/10.1145/2976749.2978309
[45] Anastasia Mavridou and Aron Laszka. 2018. Designing Secure Ethereum Smart Contracts: A Finite State Machine Based Approach. In Financial Cryptography and Data Security.
[46] Gregory Maxwell. 2016. The first successful Zero-Knowledge Contingent Payment. https://bitcoincore.org/en/2016/02/26/zero-knowledge-contingent-payments-announcement/. (2016).
[47] Andrew Miller and Iddo Bentov. 2017. Zero-Collateral Lotteries in Bitcoin and Ethereum. In EuroS&P Workshops. 4–13. https://doi.org/10.1109/EuroSPW.2017.44
[48] Andrew Miller, Iddo Bentov, Ranjit Kumaresan, and Patrick McCorry. 2017. Sprites: Payment Channels that Go Faster than Lightning. CoRR abs/1702.05812 (2017). arXiv:1702.05812 http://arxiv.org/abs/1702.05812
[49] Malte Möser, Ittay Eyal, and Emin Gün Sirer. 2016. Bitcoin covenants. In Financial Cryptography Workshops (LNCS), Vol. 9604. Springer, 126–141. https://doi.org/10.1007/978-3-662-53357-4_9
[50] Xavier Nicollin and Joseph Sifakis. 1991. An Overview and Synthesis on Timed Process Algebras. In CAV. 376–398. https://doi.org/10.1007/3-540-55179-4_36
[51] Tobias Nipkow, Lawrence C. Paulson, and Markus Wenzel. 2002. Isabelle/HOL: a proof assistant for higher-order logic. Vol. 2283. Springer Science & Business Media.
[52] Russell O’Connor. 2017. Simplicity: A New Language for Blockchains. In PLAS.
[53] Russell O’Connor and Marta Piekarska. 2017. Enhancing Bitcoin transactions with covenants. In Financial Cryptography Workshops (LNCS), Vol. 10323. Springer. https://doi.org/10.1007/978-3-319-70278-0_12
[54] Joseph Poon and Thaddeus Dryja. 2015. The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments. https://lightning.network/lightning-network-paper.pdf
[55] Ilya Sergey, Amrit Kumar, and Aquinas Hobor. 2018. Scilla: a Smart Contract Intermediate-Level LAnguage. CoRR abs/1801.00687 (2018).
[56] Nikhil Swamy, Catalin Hritcu, Chantal Keller, Aseem Rastogi, Antoine Delignat-Lavaud, Simon Forest, Karthikeyan Bhargavan, Cédric Fournet, Pierre-Yves Strub, Markulf Kohlweiss, Jean Karim Zinzindohoue, and Santiago Zanella Béguelin. 2016. Dependent types and multi-monadic effects in F*. In POPL. https://doi.org/10.1145/2837614.2837655
[57] Paul F. Syverson. 1998. Weakly Secret Bit Commitment: Applications to Lotteries and Fair Exchange. In IEEE CSFW. 2–13. https://doi.org/10.1109/CSFW.1998.683149
[58] Nick Szabo. 1997. Formalizing and Securing Relationships on Public Networks. First Monday 2, 9 (1997). http://firstmonday.org/htbin/cgiwrap/bin/ojs/index.php/fm/article/view/548.
[59] Petar Tsankov, Andrei Marian Dan, Dana Drachsler Cohen, Arthur Gervais, Florian Buenzli, and Martin T. Vechev. 2018. Securify: Practical Security Analysis of Smart Contracts. CoRR abs/1806.01143 (2018).

### Appendix

#### Additional BitML Examples

We present a few additional examples of BitML contracts. In a term `reveal ⃗a.C`, we abbreviate prefixes `reveal ⃗a⃗b` if `p` occurring in `C` as `reveal ⃗b` if `p` if some name in `⃗a` occurs in `p`.

**Variable-refund escrow.** We propose a variant of the escrow contract where M can issue a partial refund of \(\zeta v_B\) to A, and \((1 - \zeta)v_B\) to B. The possible values of \(\zeta\) are given by a finite set \(Z\) in the range \([0, 1]\). The new contract is modeled as:

\[ C = A : \text{withdraw } B + B : \text{withdraw } A + \sum_{\zeta \in Z} M : D_\zeta \]

where

\[ D_\zeta = \text{split} \left( \zeta v \rightarrow \text{withdraw } A | (1 - \zeta)v \rightarrow \text{withdraw } B \right) \]

The case of full refunds is obtained with \(Z = \{0, 1\}\). If \(Z = \{0, 1/2, 1\}\), M can also choose to refund \(v/2\) to both A and B.

**Intermediated payment.** Assume that A wants to send an indirect payment of \(v_C\) to C, routing it through an intermediary B who can choose whether to authorize the payment, in this case retaining a fee \(v_B\), or not. Since A does not trust B, she uses a contract to guarantee that: (i) if B is honest, then \(v_C\) is transferred to C; (ii) if B is not honest, then A does not lose money.

In BitML, we use \(G = A : ! (v_B + v_C) @ x\) as a precondition, and the following contract:

\[ C = B : \text{split} \left( v_B \rightarrow \text{withdraw } B | v_C \rightarrow \text{withdraw } C \right) + \text{after } t : \text{withdraw } A \]

The first branch can only be taken if B authorizes the payment: in this case, B gets his fee, and C gets his payment. If B denies his authorization, the payment reverts to A after a timeout \(t\).