(cid:12)(cid:12)(cid:12)(cid:12) ∀Rc conforming to (Σc, r ) with |Rc| ≤ ηk :
∃Rs conforming to (Σs, π1 (r )) with Rs ∼r Rc
r
strategies, satisfies p. The statement considers only computational
runs Rc having a polynomial length (≤ ηk) with respect to a secu-
rity parameter η. This is crucial, since the adversary strategy is run
at each computational step, hence in the whole run the adversary
can run PPTIME algorithms for |Rc| times. Without a polynomial
bound on |Rc|, the adversary would be able to run algorithms out-
side PPTIME before the end of the run, breaking the underlying
cryptographic primitives. Overall, the theorem states that if we run
the computational strategies Σc using r, generating a polynomially-
bounded run Rc conformant with Σc, then, with overwhelming
probability, Rc is coherent with some symbolic run Rs. Further, this
run can be obtained running the strategies Σs using the randomness
π1 (r ). This stands for the sequence of the even-indexed bits in r
(this is a technical artifact of our ℵ construction).
Finally, note that Theorem 2 implicitly uses the compiler in
two points: the translation ℵ (the obtained computational strate-
gies involve the compilation of the contracts used by the symbolic
strategies), and the coherence relation ∼.
10 CONCLUSIONS
Our work bridges the gap between the cryptography community,
where Bitcoin smart contracts have been investigated first, and the
programming languages community. In particular, our computa-
tional soundness result guarantees that, if some safety properties
are violated at the computational level, then they are also violated
at the symbolic level. So, reachability-based symbolic analyses can
be soundly used to prove safety properties of smart contracts.
Although BitML can express many of the smart contracts ap-
peared in literature [15], it has some limitations. For instance, it can-
not express contingent payments, where a participant A promises
to pay B for a value x satisfying a predicate chosen by A (e.g., x
is a prime factor of a given large number). Contingent payments
can be implemented in Bitcoin similarly to timed commitments:
A pays a deposit, which is taken by B after revealing a preimage
of H (x ) which satisfies the predicate. An off-chain protocol [18]
(which exploits zero-knowledge proofs) is used to guarantee that
H (x ) is indeed the hash of a value x satisfying the predicate (note
that, in the Bitcoin scripting language, one can only check trivial
predicates, like e.g. equality). BitML could be extended to express
contingent payments, by exploiting zero-knowledge proofs simi-
lar to those in [18] in the stipulation phase. This would allow our
compiler to only generate standard Bitcoin transactions. Another
kind of contracts which are not expressible in BitML are those for
which one cannot pre-determine at compile time, a finite set of
transactions, or of signatures, or of execution steps. This is the
case, e.g., of crowdfunding contracts [15], where participants invest
some money until a given threshold is reached. Here, we do not
statically know neither the number of participants, nor their identi-
ties, so it is not possible to statically produce (and pre-sign) a set of
transactions, as required by BitML. Extending BitML to express this
kind of contracts — while preserving our compilation technique —
would require suitable extensions of Bitcoin transactions. For in-
stance, recursion could be obtained via extensions similar to those
proposed in [49, 53].
13
REFERENCES
[1] 2012. Bitcoin wiki - Contracts. https://en.bitcoin.it/wiki/Contract. (2012).
[2] 2012. Bitcoin wiki - Contracts - Using external state. https://en.bitcoin.it/wiki/
Contract#Example_4:_Using_external_state. (2012).
[3] 2015. Bitcoin developer guide - Escrow and arbitration. https://bitcoin.org/en/
developer-guide#escrow-and-arbitration. (2015).
[4] 2016. Understanding the DAO attack. (June 2016). http://www.coindesk.com/
understanding-dao-hack-journalists/.
[5] 2017. IVY. https://docs.ivy-lang.org/bitcoin/. (2017).
[6] 2017. Parity Wallet Security Alert.
(July 2017). https://paritytech.io/blog/
[7] 2017. A Postmortem on the Parity Multi-Sig Library Self-Destruct. (November
security-alert.html.
2017). https://goo.gl/Kw3gXi.
[8] 2018. BALZaC: Bitcoin Abstract Language, analyZer and Compiler. https:
//blockchain.unica.it/balzac/. (2018).
[9] Martín Abadi and Phillip Rogaway. 2007. Reconciling Two Views of Cryptogra-
phy (The Computational Soundness of Formal Encryption). J. Cryptology 20, 3
(2007), 395. https://doi.org/10.1007/s00145-007-0203-0
[10] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Konstanti-
nos Christidis, Angelo De Caro, David Enyeart, Christopher Ferris, Gennady
Laventman, Yacov Manevich, Srinivasan Muralidharan, Chet Murthy, Binh
Nguyen, Manish Sethi, Gari Singh, Keith Smith, Alessandro Sorniotti, Chrysoula
Stathakopoulou, Marko Vukolic, Sharon Weed Cocco, and Jason Yellick. 2018.
Hyperledger Fabric: a distributed operating system for permissioned blockchains.
In EuroSys. 30:1–30:15. https://doi.org/10.1145/3190508.3190538
[11] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz
Mazurek. 2014. Fair Two-Party Computations via Bitcoin Deposits. In Financial
Cryptography Workshops (LNCS), Vol. 8438. Springer, 105–121. https://doi.org/
10.1007/978-3-662-44774-1_8
[12] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz
Mazurek. 2014. Secure Multiparty Computations on Bitcoin. In IEEE S & P. 443–
458. https://doi.org/10.1109/SP.2014.35 First appeared on Cryptology ePrint
Archive, http://eprint.iacr.org/2013/784.
[13] Maria Apostolaki, Aviv Zohar, and Laurent Vanbever. 2017. Hijacking Bitcoin:
Routing Attacks on Cryptocurrencies. In IEEE Symp. on Security and Privacy.
375–392. https://doi.org/10.1109/SP.2017.29
[14] Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. 2017. A Survey of
Attacks on Ethereum Smart Contracts (SoK). In Principles of Security and
Trust (POST) (LNCS), Vol. 10204. Springer, 164–186. https://doi.org/10.1007/
978-3-662-54455-6_8
[15] Nicola Atzei, Massimo Bartoletti, Tiziana Cimoli, Stefano Lande, and Roberto
Zunino. 2018. SoK: unraveling Bitcoin smart contracts. In Principles of Security
and Trust (POST) (LNCS), Vol. 10804. Springer, 217–242. https://doi.org/10.1007/
978-3-319-89722-6
[16] Nicola Atzei, Massimo Bartoletti, Stefano Lande, and Roberto Zunino. 2018.
A formal model of Bitcoin transactions. In Financial Cryptography and Data
Security.
[17] Christian Badertscher, Ueli Maurer, Daniel Tschudi, and Vassilis Zikas. 2017.
Bitcoin as a Transaction Ledger: A Composable Treatment. In CRYPTO. 324–356.
https://doi.org/10.1007/978-3-319-63688-7_11
[18] Waclaw Banasik, Stefan Dziembowski, and Daniel Malinowski. 2016. Efficient
Zero-Knowledge Contingent Payments in Cryptocurrencies Without Scripts.
In ESORICS (LNCS), Vol. 9879. Springer, 261–280. https://doi.org/10.1007/
978-3-319-45741-3_14
[19] Massimo Bartoletti and Livio Pompianu. 2017. An empirical analysis of smart
contracts: platforms, applications, and design patterns. In Financial Cryptography
Workshops (LNCS), Vol. 10323. Springer, 494–509.
[20] Massimo Bartoletti and Roberto Zunino. 2017. Constant-deposit multiparty
lotteries on Bitcoin. In Financial Cryptography Workshops (LNCS), Vol. 10323.
Springer. https://doi.org/10.1007/978-3-319-70278-0
[21] Mihir Bellare and Phillip Rogaway. 1993. Random Oracles Are Practical: A
Paradigm for Designing Efficient Protocols. In ACM Conference on Computer and
Communications Security. ACM, 62–73. https://doi.org/10.1145/168588.168596
Iddo Bentov and Ranjit Kumaresan. 2014. How to Use Bitcoin to Design Fair
Protocols. In CRYPTO (LNCS), Vol. 8617. Springer, 421–439. https://doi.org/10.
1007/978-3-662-44381-1_24
[23] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cedric Fournet, Anitha Gol-
lamudi, Georges Gonthier, Nadim Kobeissi, Aseem Rastogi, Thomas Sibut-Pinote,
Nikhil Swamy, and Santiago Zanella-Beguelin. 2016. Formal Verification of Smart
Contracts. In PLAS.
[24] Alex Biryukov, Dmitry Khovratovich, and Sergei Tikhomirov. 2017. Findel: Secure
Derivative Contracts for Ethereum. In Financial Cryptography Workshops (LNCS),
Vol. 10323. Springer, 453–467. https://doi.org/10.1007/978-3-319-70278-0_28
(2015). http:
[25] BitFury group. 2015. Smart Contracts on Bitcoin Blockchain.
[22]
//bitfury.com/content/5-white-papers-research/contracts-1.1.1.pdf.
[26] Dan Boneh and Moni Naor. 2000. Timed Commitments. In CRYPTO (LNCS),
Vol. 1880. Springer, 236–254. https://doi.org/10.1007/3-540-44598-6
[27]
[36]
[37]
[33]
[34]
Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A.
Kroll, and Edward W. Felten. 2015. SoK: Research Perspectives and Challenges
for Bitcoin and Cryptocurrencies. In IEEE S & P. 104–121. https://doi.org/10.
1109/SP.2015.14
[28] Vitalik Buterin. 2013. Ethereum: a next generation smart contract and decentral-
ized application platform. https://github.com/ethereum/wiki/wiki/White-Paper.
(2013).
[29] Krishnendu Chatterjee, Amir Kafshdar Goharshady, and Yaron Velner. 2018.
Quantitative Analysis of Smart Contracts. In ESOP. 739–767. https://doi.org/10.
1007/978-3-319-89884-1_26
[30] Karl Crary and Michael J. Sullivan. 2015. Peer-to-peer affine commitment using
Bitcoin. In ACM Conf. on Programming Language Design and Implementation.
479–488. https://doi.org/10.1145/2737924.2737997
[31] Christian Decker and Roger Wattenhofer. 2015. A Fast and Scalable Payment
Network with Bitcoin Duplex Micropayment Channels. In Stabilization, Safety,
and Security of Distributed Systems (SSS) (LNCS), Vol. 9212. Springer, 3–18. https:
//doi.org/10.1007/978-3-319-21741-3_1
[32] Sergi Delgado-Segura, Cristina Pérez-Solà, Guillermo Navarro-Arribas, and Jordi
Herrera-Joancomartí. 2017. A fair protocol for data trading based on Bitcoin
transactions. Future Generation Computer Systems (2017). https://doi.org/10.
1016/j.future.2017.08.021
Ittay Eyal and Emin Gün Sirer. 2014. Majority Is Not Enough: Bitcoin Mining
Is Vulnerable. In Financial Cryptography (LNCS), Vol. 8437. Springer, 436–454.
https://doi.org/10.1007/978-3-662-45472-5_28
Juan A. Garay, Aggelos Kiayias, and Nikos Leonardos. 2015. The Bitcoin Backbone
Protocol: Analysis and Applications. In EUROCRYPT (LNCS), Vol. 9057. Springer,
281–310. https://doi.org/10.1007/978-3-662-46803-6_10
[35] David M. Goldschlag, Stuart G. Stubblebine, and Paul F. Syverson. 2010. Tem-
porarily hidden bit commitment and lottery applications. Int. J. Inf. Sec. 9, 1
(2010), 33–50. https://doi.org/10.1007/s10207-009-0094-1
Ilya Grishchenko, Matteo Maffei, and Clara Schneidewind. 2018. Foundations
and Tools for the Static Analysis of Ethereum Smart Contracts. In CAV (LNCS),
Vol. 10981. Springer, 51–78. https://doi.org/10.1007/978-3-319-96145-3_4
Ilya Grishchenko, Matteo Maffei, and Clara Schneidewind. 2018. A Semantic
Framework for the Security Analysis of Ethereum Smart Contracts. In Principles
of Security and Trust (POST) (LNCS), Vol. 10804. Springer, 243–269. https://doi.
org/10.1007/978-3-319-89722-6_10
[38] Yoichi Hirai. 2017. Defining the Ethereum Virtual Machine for Interactive Theo-
rem Provers. In Financial Cryptography Workshops (LNCS), Vol. 10323. Springer,
520–535. https://doi.org/10.1007/978-3-319-70278-0_33
[39] Simon L. Peyton Jones, Jean-Marc Eber, and Julian Seward. 2000. Composing
contracts: an adventure in financial engineering, functional pearl. In International
Conference on Functional Programming (ICFP). 280–292. https://doi.org/10.1145/
351240.351267
[40] Ahmed E. Kosba, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos Pa-
pamanthou. 2016. Hawk: The Blockchain Model of Cryptography and Privacy-
Preserving Smart Contracts. In IEEE Symp. on Security and Privacy. 839–858.
https://doi.org/10.1109/SP.2016.55
[41] Ranjit Kumaresan and Iddo Bentov. 2014. How to Use Bitcoin to Incentivize
Correct Computations. In ACM CCS. 30–41. https://doi.org/10.1145/2660267.
2660380
[42] Ranjit Kumaresan, Tal Moran, and Iddo Bentov. 2015. How to Use Bitcoin to
Play Decentralized Poker. In ACM CCS. 195–206. https://doi.org/10.1145/2810103.
2813712
[43] Eric Lombrozo, Johnson Lau, and Pieter Wuille. 2015. Segregated Witness (Con-
sensus layer). (2015). BIP 141, https://github.com/bitcoin/bips/blob/master/
bip-0141.mediawiki.
[44] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor.
2016. Making Smart Contracts Smarter. In ACM CCS. 254–269. https://doi.org/
10.1145/2976749.2978309
[45] Anastasia Mavridou and Aron Laszka. 2018. Designing Secure Ethereum Smart
Contracts: A Finite State Machine Based Approach. In Financial Cryptography
and Data Security.
successful Zero-Knowledge
Contingent
https://bitcoincore.org/en/2016/02/26/
zero-knowledge-contingent-payments-announcement/. (2016).
[46] Gregory Maxwell.
[47] Andrew Miller and Iddo Bentov. 2017. Zero-Collateral Lotteries in Bitcoin and
Ethereum. In EuroS&P Workshops. 4–13. https://doi.org/10.1109/EuroSPW.2017.44
[48] Andrew Miller, Iddo Bentov, Ranjit Kumaresan, and Patrick McCorry. 2017.
Sprites: Payment Channels that Go Faster than Lightning. CoRR abs/1702.05812
(2017). arXiv:1702.05812 http://arxiv.org/abs/1702.05812
[49] Malte Möser, Ittay Eyal, and Emin Gün Sirer. 2016. Bitcoin covenants. In Financial
Cryptography Workshops (LNCS), Vol. 9604. Springer, 126–141. https://doi.org/
10.1007/978-3-662-53357-4_9
[50] Xavier Nicollin and Joseph Sifakis. 1991. An Overview and Synthesis on Timed
Process Algebras. In CAV. 376–398. https://doi.org/10.1007/3-540-55179-4_36
The first
Payment.
2016.
[55]
[54]
(2015).
http://arxiv.org/abs/1711.03028
[51] Tobias Nipkow, Lawrence C. Paulson, and Markus Wenzel. 2002. Isabelle/HOL:
a proof assistant for higher-order logic. Vol. 2283. Springer Science & Business
Media.
[52] Russell O’Connor. 2017. Simplicity: A New Language for Blockchains. In PLAS.
[53] Russell O’Connor and Marta Piekarska. 2017. Enhancing Bitcoin transac-
tions with covenants. In Financial Cryptography Workshops (LNCS), Vol. 10323.
Springer. https://doi.org/10.1007/978-3-319-70278-0_12
Joseph Poon and Thaddeus Dryja. 2015. The Bitcoin Lightning Network:
Scalable Off-Chain Instant Payments.
https://lightning.network/
lightning-network-paper.pdf
Ilya Sergey, Amrit Kumar, and Aquinas Hobor. 2018. Scilla: a Smart Contract
Intermediate-Level LAnguage. CoRR abs/1801.00687 (2018).
[56] Nikhil Swamy, Catalin Hritcu, Chantal Keller, Aseem Rastogi, Antoine Delignat-
Lavaud, Simon Forest, Karthikeyan Bhargavan, Cédric Fournet, Pierre-Yves Strub,
Markulf Kohlweiss, Jean Karim Zinzindohoue, and Santiago Zanella Béguelin.
2016. Dependent types and multi-monadic effects in F*. In POPL. https://doi.org/
10.1145/2837614.2837655
[57] Paul F. Syverson. 1998. Weakly Secret Bit Commitment: Applications to Lotteries
and Fair Exchange. In IEEE CSFW. 2–13. https://doi.org/10.1109/CSFW.1998.
683149
[58] Nick Szabo. 1997. Formalizing and Securing Relationships on Public Networks.
First Monday 2, 9 (1997). http://firstmonday.org/htbin/cgiwrap/bin/ojs/index.
php/fm/article/view/548.
[59] Petar Tsankov, Andrei Marian Dan, Dana Drachsler Cohen, Arthur Gervais,
Florian Buenzli, and Martin T. Vechev. 2018. Securify: Practical Security Analysis
of Smart Contracts. CoRR abs/1806.01143 (2018).
A APPENDIX
A.1 Additional BitML examples
We show a few additional examples of BitML contracts. Hereafter,
in a term reveal ⃗a.C, we abbreviate prefixes reveal ⃗a⃗b if p oc-
curring in C as reveal ⃗b if p if some name in ⃗a occurs in p.
Variable-refund escrow. We propose a variant of the escrow
contract in Section 2 where M can issue a partial refund of ζvB to
A, and of (1 − ζ )vB to B (similarly to [3, 25]). The possible values
of ζ are given by a finite set Z in the range [0, 1]. We model the
new contract as:
C = A : withdraw B + B : withdraw A +(cid:80)
(cid:16)
ζ ∈Z M : Dζ
ζv → withdraw A | (1 − ζ )v → withdraw B
(cid:17)
Dζ = split
The case of full refunds is obtained with Z = {0, 1}. If Z = {0, 1/2, 1},
M can also choose to refund v/2 B to both.
Intermediated payment. Assume that A wants to send an indi-
rect payment of vCB to C, routing it through an intermediary B
who can choose whether to authorize the payment, in this case
retaining a fee vBB, or not. Since A does not trust B, she wants to
use a contract to guarantee that: (i) if B is honest, then vCB are
transferred to C; (ii) if B is not honest, then A does not lose money.
In BitML, we use G = A:! (vB + vC ) @ x as precondition, and
the following contract:
(cid:16)
vB → withdraw B | vC → withdraw C
(cid:17)
C = B : split
+ after t : withdraw A
The first branch can only be taken if B authorizes the payment: in
this case, B gets his fee, and C gets his payment. If B denies his