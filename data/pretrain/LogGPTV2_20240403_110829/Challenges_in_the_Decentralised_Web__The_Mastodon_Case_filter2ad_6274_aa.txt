title:Challenges in the Decentralised Web: The Mastodon Case
author:Aravindh Raman and
Sagar Joglekar and
Emiliano De Cristofaro and
Nishanth Sastry and
Gareth Tyson
Challenges in the Decentralised Web:
The Mastodon Case
Aravindh Raman
King’s College London
Sagar Joglekar
King’s College London
Emiliano De Cristofaro∗
University College London
Nishanth Sastry
King’s College London
ABSTRACT
The Decentralised Web (DW) has recently seen a renewed momen-
tum, with a number of DW platforms like Mastodon, PeerTube,
and Hubzilla gaining increasing traction. These offer alternatives to
traditional social networks like Twitter, YouTube, and Facebook, by
enabling the operation of web infrastructure and services without
centralised ownership or control. Although their services differ
greatly, modern DW platforms mostly rely on two key innovations:
first, their open source software allows anybody to setup indepen-
dent servers (“instances”) that people can sign-up to and use within
a local community; and second, they build on top of federation
protocols so that instances can mesh together, in a peer-to-peer
fashion, to offer a globally integrated platform.
In this paper, we present a measurement-driven exploration of
these two innovations, using a popular DW microblogging platform
(Mastodon) as a case study. We focus on identifying key challenges
that might disrupt continuing efforts to decentralise the web, and
empirically highlight a number of properties that are creating natu-
ral pressures towards re-centralisation. Finally, our measurements
shed light on the behaviour of both administrators (i.e., people set-
ting up instances) and regular users who sign-up to the platforms,
also discussing a few techniques that may address some of the
issues observed.
CCS CONCEPTS
• Information systems → Social networks; • Networks →
Network measurement.
ACM Reference Format:
Aravindh Raman, Sagar Joglekar, Emiliano De Cristofaro, Nishanth Sastry,
and Gareth Tyson. 2019. Challenges in the Decentralised Web: The Mastodon
Case. In Internet Measurement Conference (IMC ’19), October 21–23, 2019,
Amsterdam, Netherlands. ACM, New York, NY, USA, 13 pages. https://
doi.org/10.1145/3355369.3355572
∗Authors also affiliated with the Alan Turing Institute
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6948-0/19/10...$15.00
https://doi.org/10.1145/3355369.3355572
217
Gareth Tyson∗
Queen Mary University of London
1 INTRODUCTION
The “Decentralised Web” (DW) is an evolving concept, which en-
compasses technologies broadly aimed at providing greater trans-
parency, openness, and democracy on the web [36]. Today, well
known social DW platforms include Mastodon (a microblogging
service), Diaspora (a social network), Hubzilla (a cyberlocker), and
PeerTube (a video sharing platform). Some of these services offer
decentralised equivalents to web giants like Twitter and Facebook,
mostly through the introduction of two key innovations.
First, they decompose their service offerings into independent
servers (“instances”) that anybody can easily bootstrap. In the sim-
plest case, these instances allow users to register and interact with
each other locally (e.g., sharing videos), but they also allow cross-
instance interaction via the second innovation, i.e., federation. This
involves building on decentralised protocols to let instances interact
and aggregate their users to offer a globally integrated service.
DW platforms intend to offer a number of benefits. For example,
data is spread among many independent instances, thus possibly
making privacy-intrusive data mining more difficult. Data owner-
ship is more transparent, and the lack of centralisation could make
the overall system more robust against technical, legal or regula-
tory attacks. However, these properties may also bring inherent
challenges that are difficult to avoid, particularly when considering
the natural pressures towards centralisation in both social [12, 50]
and economic [43] systems. For example, it is unclear how such
systems can securely scale-up, how wide-area malicious activity
might be detected (e.g., spam bots), or how users can be protected
from data loss during instance outages/failures.
As the largest and most popular DW application [14, 35], we
choose Mastodon as a relevant example to study some of these
challenges in-the-wild. Mastodon is a decentralised microblogging
platform, with features similar to Twitter. Anybody can setup an
independent instance by installing the necessary software on a
server. Once an instance has been created, users can sign up and
begin posting “toots,” which are shared with followers. Via feder-
ation, they can also follow accounts registered with other remote
instances. Unlike traditional social networks, this creates an inter-
domain (federated) model, not that dissimilar to the inter-domain
model of the email system.
In this paper, we present a large-scale (case) study of the DW
aiming to understand the feasibility and challenges of running de-
centralised social web systems. We use a 15-month dataset covering
Mastodon’s instance-level and user-level activity, covering 67 mil-
lion toots. Our analysis is performed across two key axes: (i) We
explore the deployment and nature of instances, and how the uncoor-
dinated nature of instance administrators drive system behaviours
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
A. Raman et al.
(Section 4); and (ii) We measure how federation impacts these prop-
erties, and introduces unstudied availability challenges (Section 5).
A common theme across our findings is the discovery of various
pressures that drive greater centralisation; we therefore also explore
techniques that could reduce this propensity.
Main Findings. Overall, our main findings include:
(1) Mastodon enjoys active participation from both administrators
and users. There are a wide range of instance types, with tech
and gaming communities being quite prominent. Certain
topics (e.g., journalism) are covered by many instances, yet
have few users. In contrast, other topics (e.g., adult material)
have a small number of instances but a large number of
users.
(2) There are user-driven pressures towards centralisation. Popu-
larity in Mastodon is heavily skewed towards a few instances,
driving implicit forms of centralisation. 10% of instances host
almost half of the users. This means that a small subset of ad-
ministrators have a disproportionate impact on the federated
system.
(3) There are infrastructure-driven pressures towards centrali-
sation. Due to the simplicity and low costs, there is notable co-
location of instances within a small set of hosting providers.
We find that failures in these ASes can create a ripple effect
that fragments the wider federated graph. For example, the
Largest Connected Component (LCC) in the social follower
graph reduces from 92% of all users to 46% by outages in five
ASes. We observe 6 cases of these AS-wide outages within
our measurement period. We also observe regular outages
by individual instances (likely due to the voluntary nature
of many administrators). Again, this has a notable impact:
11% of instances are unavailable for half of our measurement
period.
(4) There are content-driven pressures towards centralisation.
Due to the differing popularities of toots, we find that out-
ages in just 10 instances could remove 62.69% of global toots.
To ameliorate this problem, we explore the potential of build-
ing toot replication schemes. For example, when a user has
followers from different instances, the content posted by the
user could be stored and indexed (persistently) in the fol-
lowers’ instances. By enabling this type of federation-based
replication, availability improves so that only 11.4% of toots
are lost when the top 3 ASes are offline (rather than 70%
without).
2 MASTODON
In this section, we describe the basic operation of Mastodon, high-
lighting key terminology in bold. We refer readers interested in
more details to a tutorial on The Verge [13].
Mastodon is an open-source DW server platform released in
2016 [33]. It offers microblogging functionality, allowing admin-
istrators to create their own independent Mastodon servers, aka
instances. Each unique Mastodon instance works much like Twit-
ter, allowing users to register new accounts and post toots to their
followers. Users can also boost toots, which is the equivalent of
retweeting in Twitter.
218
Instances can work in isolation, only allowing locally registered
users to follow each other. However, Mastodon instances can also
federate, whereby users registered on one instance can follow
users registered on another instance. This is mediated via the local
instances of the two users. Hence, each Mastodon instance main-
tains a list of all remote accounts its users follow; this results in the
instance subscribing to posts performed on the remote instance,
such that they can be pulled and presented to local users. For sim-
plicity, we refer to users registered on the same instance as local,
and users registered on different instances as remote. Note that
a user registered on their local instance does not need to register
with the remote instance to follow the remote user. Instead, a user
just creates a single account with their local instance; when the
user wants to follow a user on a remote instance, the user’s local
instance performs the subscription on the user’s behalf. This pro-
cess is implemented using an underlying subscription protocol. To
date, Mastodon supports two open protocols: oStatus [37] and Ac-
tivityPub [1] (starting from v1.6). This makes Mastodon compatible
with other decentralised microblogging implementations (notably,
Pleroma).
When a user logs in to their local instance, they are presented
with three timelines: (i) a home timeline, with toots posted by the
accounts whom the user follows; (ii) a local timeline, with all the
toots generated within the same instance; and (iii) a federated time-
line, with all toots that have been retrieved from remote instances.
The latter is not limited to remote toots that the user follows; rather,
it is the union of remote toots retrieved by all users on the instance.
The federated timeline is an innovation driven by Mastodon’s de-
centralised nature; it allows users to observe and discover toots by
remote users, and broaden their follower network.
3 DATASETS
The goal of our paper is to better understand the nature of instances
and federation, using Mastodon as a case study. To do so, we rely
on three primary datasets: (i) Instances: regular snapshots of in-
stance metadata and availability; (ii) Toots: historical user posts
(toots) available on each instance; and (iii) Graphs: the follower and
federation graphs.
Instances. We first extracted a global list of instance URLs and
availability statistics from a dump provided by the mnm.social
website. This site contains a comprehensive index of instances
around the world, allowing us to compile a set of 4,328 unique in-
stances (identifed by their domain). These instances primarily run
the Mastodon server software, although 3.1% run the Pleroma soft-
ware (https://pleroma.social/) instead. This is because, since
2017, these two implementations have federated together using
the same front-end and federation protocol (ActivityPub). Hence,
from a user’s perspective, there is little difference between using
Mastodon or Pleroma instances.
We obtain our data by using the monitoring service of
mnm.social. Every five minutes, mnm.social connected to each in-
stance’s /api/v1/instance API endpoint. The
instance API returned the following information from each instance:
name, version, number of toots, users, federated subscriptions, and
user logins; whether registration is open and if the instance is
online.
Challenges in the Decentralised Web
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
The data on mnm.social goes back to April 11, 2017. We collected
all the data until July 27, 2018. Maxmind was then used to map the
IP address of each instance to their country and hosted Autonomous
System (AS). Although some of these metadata items rarely change
(e.g., country), repeatedly fetching all the data every five minutes
gives us fine-grained temporal data revealing how values evolved
across time. Overall, we observe approximately half a billion data
points.
Toots. In May 2018, we crawled all available toots across the in-
stances. To compile a list of instances to crawl, we started with the
list collected via the mnm.social website. We then filtered these
to only leave instances that were online during May 2018: this left
1.75K active instances which were accessible. This obviously re-
veals a degree of churn in the instance population; across the 15
month measurement cycle 21.3% of instance went offline and never
came back online. We wrote a multi-threaded crawler to connect
with each of these 1.75K instances, via their API, and collected their
entire history of toots. To expedite the process, we parallelised this
across 10 threads on 7 machines. Each thread was responsible for
querying the federated timeline of its designated instance; it did
this by iterating over the entire history of toots on the instance. To
avoid overwhelming instances, we introduced artificial delays be-
tween API calls to limit any effects on the instance operations. For
each toot, the following data were collected: username, toot URL,
creation date, media attachments, number of favorites, followers,
and followings, toot contents, and hashtags.
Our toots dataset contains 67M public toots, generated by 239K
unique users. By comparing this against the publicly listed meta-
data obtained from the instance dataset (recall this contained toot
and user counts), we find that our dataset covers 62% of the entire
toot population. The remaining 38% of toots could not be collected:
approximately 20% of these toots were set to private, and the re-
mainder were hosted on instances that blocked toot crawling.
Follower and Federation Graphs. We also crawled the followers
and following lists for users in July 2018. To this end, we scraped
the follower relationships for the 239K users we encountered who
have tooted at least once. This was performed be iterating over