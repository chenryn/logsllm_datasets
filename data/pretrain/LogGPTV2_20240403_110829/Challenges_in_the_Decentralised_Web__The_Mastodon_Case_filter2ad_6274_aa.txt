# Title: Challenges in the Decentralised Web: The Mastodon Case

## Authors:
- Aravindh Raman, King’s College London
- Sagar Joglekar, King’s College London
- Emiliano De Cristofaro, University College London
- Nishanth Sastry, King’s College London
- Gareth Tyson, Queen Mary University of London

## Abstract
The Decentralised Web (DW) has recently gained renewed momentum, with platforms like Mastodon, PeerTube, and Hubzilla attracting increasing attention. These platforms offer alternatives to traditional social networks such as Twitter, YouTube, and Facebook by enabling web infrastructure and services without centralized ownership or control. Modern DW platforms typically rely on two key innovations: open-source software that allows anyone to set up independent servers ("instances") and federation protocols that enable these instances to interconnect in a peer-to-peer fashion, forming a globally integrated platform.

In this paper, we present a measurement-driven exploration of these two innovations using Mastodon, a popular DW microblogging platform, as a case study. We focus on identifying key challenges that could disrupt efforts to decentralize the web and empirically highlight several properties that create natural pressures towards re-centralization. Our measurements provide insights into the behavior of both instance administrators and regular users, and we discuss potential techniques to address some of the observed issues.

## CCS Concepts
- Information systems → Social networks
- Networks → Network measurement

## ACM Reference Format:
Raman, A., Joglekar, S., De Cristofaro, E., Sastry, N., & Tyson, G. (2019). Challenges in the Decentralised Web: The Mastodon Case. In Internet Measurement Conference (IMC '19), October 21–23, 2019, Amsterdam, Netherlands. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3355369.3355572

*Authors also affiliated with the Alan Turing Institute*

## 1. Introduction
The "Decentralised Web" (DW) is an evolving concept aimed at providing greater transparency, openness, and democracy on the web. Well-known DW platforms include Mastodon (a microblogging service), Diaspora (a social network), Hubzilla (a cyberlocker), and PeerTube (a video sharing platform). These platforms offer decentralized alternatives to traditional social networks, primarily through two key innovations:

1. **Independent Instances**: Open-source software allows anyone to set up independent servers ("instances") where users can register and interact locally.
2. **Federation**: Decentralized protocols enable instances to interconnect, allowing cross-instance interaction and offering a globally integrated service.

DW platforms aim to provide benefits such as data privacy, transparent data ownership, and robustness against technical, legal, or regulatory attacks. However, these properties also bring inherent challenges, particularly the natural pressures towards centralization in social and economic systems. For example, it is unclear how these systems can securely scale, detect wide-area malicious activity, or protect users from data loss during instance outages.

Mastodon, being the largest and most popular DW application, serves as a relevant case study to explore these challenges. Mastodon is a decentralized microblogging platform with features similar to Twitter. Anyone can set up an independent instance by installing the necessary software on a server. Users can sign up and post "toots," which are shared with followers. Through federation, they can also follow accounts registered with other remote instances, creating an inter-domain model similar to the email system.

In this paper, we present a large-scale study of the DW, focusing on the feasibility and challenges of running decentralized social web systems. We use a 15-month dataset covering Mastodon's instance-level and user-level activity, including 67 million toots. Our analysis covers two key aspects:
1. **Instance Deployment and Nature**: We explore the deployment and nature of instances and how the uncoordinated nature of instance administrators drives system behaviors.
2. **Impact of Federation**: We measure how federation impacts these properties and introduces new availability challenges.

Our findings reveal various pressures that drive greater centralization, and we explore techniques to mitigate this trend.

### Main Findings
1. **Active Participation**: Mastodon enjoys active participation from both administrators and users, with a wide range of instance types. Tech and gaming communities are prominent, while certain topics (e.g., journalism) have many instances but few users, and others (e.g., adult material) have a small number of instances but a large number of users.
2. **User-Driven Centralization**: Popularity in Mastodon is heavily skewed towards a few instances, leading to implicit forms of centralization. 10% of instances host almost half of the users, giving a small subset of administrators disproportionate influence.
3. **Infrastructure-Driven Centralization**: Due to simplicity and low costs, there is notable co-location of instances within a small set of hosting providers. Failures in these Autonomous Systems (ASes) can fragment the federated graph. For example, the Largest Connected Component (LCC) in the social follower graph reduces from 92% to 46% due to outages in five ASes. We observed six such AS-wide outages within our measurement period. Regular outages by individual instances (likely due to the voluntary nature of many administrators) also have a significant impact, with 11% of instances unavailable for half of our measurement period.
4. **Content-Driven Centralization**: Due to varying toot popularities, outages in just 10 instances could remove 62.69% of global toots. To address this, we explore the potential of toot replication schemes. By storing and indexing content persistently in followers' instances, availability improves, reducing toot loss to 11.4% when the top 3 ASes are offline (compared to 70% without).

## 2. Mastodon Overview
Mastodon is an open-source DW server platform released in 2016, offering microblogging functionality. Administrators can create independent Mastodon servers, known as instances. Each instance allows users to register accounts and post toots to their followers. Users can also boost toots, similar to retweeting on Twitter.

Instances can operate in isolation, allowing only locally registered users to follow each other. However, instances can also federate, enabling users on one instance to follow users on another. This is mediated via the local instances of the two users. Each Mastodon instance maintains a list of all remote accounts its users follow, subscribing to posts from the remote instance and presenting them to local users. Users registered on the same instance are referred to as local, while those on different instances are remote. A user does not need to register with a remote instance to follow a remote user; instead, the local instance performs the subscription on the user's behalf. Mastodon supports two open protocols: oStatus and ActivityPub (starting from v1.6), making it compatible with other decentralized microblogging implementations like Pleroma.

When a user logs in to their local instance, they see three timelines:
1. **Home Timeline**: Toots posted by the accounts the user follows.
2. **Local Timeline**: All toots generated within the same instance.
3. **Federated Timeline**: All toots retrieved from remote instances, allowing users to discover and follow remote users.

## 3. Datasets
Our goal is to better understand the nature of instances and federation using Mastodon as a case study. We rely on three primary datasets:
1. **Instances**: Regular snapshots of instance metadata and availability.
2. **Toots**: Historical user posts (toots) available on each instance.
3. **Graphs**: Follower and federation graphs.

### Instances
We extracted a global list of instance URLs and availability statistics from the mnm.social website, which provides a comprehensive index of instances. We compiled a set of 4,328 unique instances, primarily running Mastodon server software, with 3.1% running Pleroma. Since 2017, these two implementations have federated together using the same front-end and federation protocol (ActivityPub).

We obtained data using the monitoring service of mnm.social, which connects to each instance's `/api/v1/instance` API endpoint every five minutes. The API returns information such as name, version, number of toots, users, federated subscriptions, and user logins. We collected data from April 11, 2017, to July 27, 2018, and used Maxmind to map the IP addresses of each instance to their country and hosted Autonomous System (AS). This provided fine-grained temporal data, resulting in approximately half a billion data points.

### Toots
In May 2018, we crawled all available toots across the instances. Starting with the list from mnm.social, we filtered to only include instances online during May 2018, leaving 1,750 active instances. This revealed a churn rate of 21.3% over the 15-month measurement cycle. We used a multi-threaded crawler to connect with each instance via their API and collect their entire history of toots. To avoid overwhelming instances, we introduced artificial delays between API calls. For each toot, we collected data such as username, toot URL, creation date, media attachments, number of favorites, followers, and followings, toot contents, and hashtags.

Our toots dataset contains 67 million public toots generated by 239,000 unique users, covering 62% of the entire toot population. The remaining 38% of toots could not be collected, with approximately 20% set to private and the rest hosted on instances that blocked toot crawling.

### Follower and Federation Graphs
We also crawled the follower and following lists for users in July 2018. We scraped the follower relationships for the 239,000 users who had tooted at least once, iterating over their follower and following lists.