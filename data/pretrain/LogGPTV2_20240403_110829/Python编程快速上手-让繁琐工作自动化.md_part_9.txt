Hello, Joe. What is the password? (It is a fish.)
Mary
Who are you?
Joe
Hello, Joe. What is the password? (It is a fish.)
swordfish
Access granted.
第2章 控制流
图2-13 swordfish.py的流程图。打叉的路径在逻辑上永远不会执行，因为循环条件总是True
Python编程快速上手——让繁琐工作自动化
2.7.8 for 循环和range()函数
在条件为True时，while循环就会继续循环（这是它的名称的由来）。但如果你
想让一个代码块执行固定次数，该怎么办？可以通过 for循环语句和 range()函数来
实现。
“类真”和“类假”的值
其他数据类型中的某些值，条件认为它们等价于True和False。在用于条件
时，0、0.0和' '（空字符串）被认为是False，其他值被认为是True。例如，请看
下面的程序：
name = ''
while not name:
print('Enter your name:')
name = input()
print('How many guests will you have?')
numOfGuests = int(input())
if numOfGuests:
print('Be sure to have enough room for all your guests.')
print('Done')
如果用户输入一个空字符串给name，那么while语句的条件就会是True ，
程序继续要求输入名字。如果numOfGuests不是0 ，那么条件就被认为是True，
程序就会为用户打印一条提醒信息。
可以用not name != ' '代替not name，用numOfGuests != 0代替numOfGuests，
但使用类真和类假的值会让代码更容易阅读。
在代码中，for语句看起来像for i in range(5):这样，总是包含以下部分：
 for关键字；
 一个变量名；
 in关键字；
 调用range()方法，最多传入3个参数；
 冒号；
 从下一行开始，缩退的代码块（称为for子句）。
让我们创建一个新的程序，名为fiveTimes.py，看看for循环的效果。
print('My name is')
for i in range(5):
print('Jimmy Five Times (' + str(i) + ')')
for循环子句中的代码运行了5次。第一次运行时，变量i被设为0。子句中的
print()调用将打印出Jimmy Five Times (0)。Python完成for循环子句内所有代码的
一次迭代之后，执行将回到循环的顶部，for语句让i增加1。这就是为什么range(5)
导致子句的5次迭代，i分别被设置为0、1、2、3、4。变量i将递增到（但不包括）
传递给range()函数的整数。图2-14展示了fiveTimes.py程序的流程图。
第2章 控制流
图2-14 fiveTimes.py的流程图
运行这个程序时，它将打印5次Jimmy Five Times和i的值，然后离开for循环。
My name is
Jimmy Five Times (0)
Jimmy Five Times (1)
Jimmy Five Times (2)
Jimmy Five Times (3)
Jimmy Five Times (4)
也可以在循环中使用continue语句。continue语句将让for循环变量继续下一个
值，就像程序执行已经到达循环的末尾并返回开始一样。实际上，只能在 while 和
for循环内部使用continue和break语句。如果试图在别处使用这些语句，Python将
报错。
作为 for 循环的另一个例子，请考虑数学家高斯的故事。当高斯还是一个小孩
时，老师想给全班同学布置很多计算作业。老师让他们从 0 加到 100。高斯想到了
一个聪明办法，在几秒钟内算出了答案，但你可以用for循环写一个Python程序，
替你完成计算。
 total = 0
 for num in range(101):
 total = total + num
 p rint(total)
结果应该是 5050。程序刚开始时，total 变量被设为 0。然后 for 循环执行 100
次total = total + num。当循环完成100次迭代时，0到100的每个整数都加给了total。
Python编程快速上手——让繁琐工作自动化
这时，total被打印到屏幕上。即使在最慢的计算机上，这个程序也不用1秒钟就能
完成计算。
（小高斯想到，有50对数加起来是100：1 + 99, 2 + 98, 3 + 97……直到49 + 51。
因为50 × 100 是5000，再加上中间的50，所以0到100的所有数之和是5050。
聪明的孩子！）
2.7.9 等价的while循环
实际上可以用while循环来做和for循环同样的事，for循环只是更简洁。让我
们用与for循环等价的while循环，重写fiveTimes.py。
print('My name is')
i = 0
while i  4) and (3 == 5)
not (5 > 4)
(5 > 4) or (3 == 5)
not ((5 > 4) or (3 == 5))
(True and True) and (True == False)
(not False) or (not True)
5．6个比较操作符是什么？
6．等于操作符和赋值操作符的区别是什么？
7．解释什么是条件，可以在哪里使用条件。
8．识别这段代码中的3个语句块：
spam = 0
if spam == 10:
print('eggs')
if spam > 5:
print('bacon')
else:
print('ham')
print('spam')
print('spam')
9．编写代码，如果变量spam中存放1，就打印Hello，如果变量中存放2，就
打印Howdy，如果变量中存放其他值，就打印Greetings!
10．如果程序陷在一个无限循环中，你可以按什么键？
11．break和continue之间的区别是什么？
12．在for循环中，range(10)、range(0, 10)和range(0, 10, 1)之间的区别是什么？
13．编写一小段程序，利用for循环，打印出从1到10的数字。然后利用while
循环，编写一个等价的程序，打印出从1到10的数字。
14．如果在名为spam的模块中，有一个名为bacon()的函数，那么在导入spam
模块后，如何调用它？