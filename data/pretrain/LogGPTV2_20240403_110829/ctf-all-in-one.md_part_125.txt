| | ; JMP XREF from 0x080488fc (sub.malloc_816)
| `-> 0x08048903 leave
\ 0x08048904 ret
函数首先分配一个 description 的最大空间，然后分配 user 结构体空间，并将 user
放到 store 数组中，最后调用更新 description 的函数。
user 结构体和 store 数组如下：
struct user {
char *desc;
char name[0x7c];
} user;
struct user *store[50];
store 放在 0x804b080 ，当前 user 个数 user_num 放在 0x804b069 。
1244
6.1.20 pwn 33C3CTF2016 babyfengshui
Delete a user
[0x080485c0]> pdf @ sub.free_905
/ (fcn) sub.free_905 138
| sub.free_905 (int arg_8h);
| ; var int local_1ch @ ebp-0x1c
| ; var int local_ch @ ebp-0xc
| ; arg int arg_8h @ ebp+0x8
| ; CALL XREF from 0x08048b5f (main)
| 0x08048905 push ebp
| 0x08048906 mov ebp, esp
| 0x08048908 sub esp, 0x28
; '('
| 0x0804890b mov eax, dword [arg_8h]
; [0x8:4]=-1 ; 8
| 0x0804890e mov byte [local_1ch], al
; 将参数 i 放到 [local_1ch]
| 0x08048911 mov eax, dword gs:[0x14]
; [0x14:4]=-1 ; 20
| 0x08048917 mov dword [local_ch], eax
| 0x0804891a xor eax, eax
| 0x0804891c movzx eax, byte [0x804b069]
; [0x804b069:1]=0 ; 取出 user_num
| 0x08048923 cmp byte [local_1ch], al
; [0x2:1]=255 ; 2 ; 比较
| ,=desc
| || 0x08048944 sub esp, 0xc
1245
6.1.20 pwn 33C3CTF2016 babyfengshui
| || 0x08048947 push eax
| || 0x08048948 call sym.imp.free
; free(store[i]->desc) 释放 description
| || 0x0804894d add esp, 0x10
| || 0x08048950 movzx eax, byte [local_1ch]
| || 0x08048954 mov eax, dword [eax*4 + 0x804b080]
; 取出 store[i]
| || 0x0804895b sub esp, 0xc
| || 0x0804895e push eax
| || 0x0804895f call sym.imp.free
; free(store[i]) 释放 user
| || 0x08048964 add esp, 0x10
| || 0x08048967 movzx eax, byte [local_1ch]
| || 0x0804896b mov dword [eax*4 + 0x804b080], 0
; 将 store[i] 置为 0
| ,=== 0x08048978 nop
| ||,= 0x0804897b nop
| | | ; JMP XREF from 0x08048979 (sub.free_905)
| | | ; JMP XREF from 0x08048976 (sub.free_905)
| `-`-> 0x0804897c mov eax, dword [local_ch]
| 0x0804897f xor eax, dword gs:[0x14]
| ,= 0x0804898d leave
\ 0x0804898e ret
删除的过程将 description 和 user 依次释放，并将 store[i] 置为 0。
但是 user->desc 没有被置为 0，user_num 也没有减 1，似乎可能导致 UAF，但不
知道怎么用。
Display a user
1246
6.1.20 pwn 33C3CTF2016 babyfengshui
[0x080485c0]> pdf @ sub.name:__s_98f
/ (fcn) sub.name:__s_98f 136
| sub.name:__s_98f (int arg_8h);
| ; var int local_1ch @ ebp-0x1c
| ; var int local_ch @ ebp-0xc
| ; arg int arg_8h @ ebp+0x8
| ; CALL XREF from 0x08048b9d (main)
| 0x0804898f push ebp
| 0x08048990 mov ebp, esp
| 0x08048992 sub esp, 0x28
; '('
| 0x08048995 mov eax, dword [arg_8h]
; [0x8:4]=-1 ; 8
| 0x08048998 mov byte [local_1ch], al
; 将参数 i 放到 [local_1ch]
| 0x0804899b mov eax, dword gs:[0x14]
; [0x14:4]=-1 ; 20
| 0x080489a1 mov dword [local_ch], eax
| 0x080489a4 xor eax, eax
| 0x080489a6 movzx eax, byte [0x804b069]
; [0x804b069:1]=0 ; 取出 user_num
| 0x080489ad cmp byte [local_1ch], al
; [0x2:1]=255 ; 2 ; 比较
| ,=name
| || 0x080489cf sub esp, 8
| || 0x080489d2 push eax
| || 0x080489d3 push str.name:__s
1247
6.1.20 pwn 33C3CTF2016 babyfengshui
; 0x8048cfa ; "name: %s\n"
| || 0x080489d8 call sym.imp.printf
; 打印 store[i]->name
| || 0x080489dd add esp, 0x10
| || 0x080489e0 movzx eax, byte [local_1ch]
| || 0x080489e4 mov eax, dword [eax*4 + 0x804b080]
; [0x804b080:4]=0
| || 0x080489eb mov eax, dword [eax]
; 取出 store[i]->desc
| || 0x080489ed sub esp, 8
| || 0x080489f0 push eax
| || 0x080489f1 push str.description:__s
; 0x8048d04 ; "description: %s\n"
| || 0x080489f6 call sym.imp.printf
; 打印 store[i]->desc
| || 0x080489fb add esp, 0x10
| ,=== 0x08048a00 nop
| ||,= 0x08048a03 nop
| | | ; JMP XREF from 0x08048a01 (sub.name:__s_98f)
| | | ; JMP XREF from 0x080489fe (sub.name:__s_98f)
| `-`-> 0x08048a04 mov eax, dword [local_ch]
| 0x08048a07 xor eax, dword gs:[0x14]
| ,= 0x08048a15 leave
\ 0x08048a16 ret
函数首先判断 store[i] 是否存在，如果是，就打印出 name 和 description。
Update a user description
[0x080485c0]> pdf @ sub.text_length:_724
1248
6.1.20 pwn 33C3CTF2016 babyfengshui
/ (fcn) sub.text_length:_724 242
| sub.text_length:_724 (int arg_8h);
| ; var int local_1ch @ ebp-0x1c
| ; var int local_11h @ ebp-0x11
| ; var int local_10h @ ebp-0x10
| ; var int local_ch @ ebp-0xc
| ; arg int arg_8h @ ebp+0x8
| ; CALL XREF from 0x08048bdb (main)
| ; CALL XREF from 0x080488e7 (sub.malloc_816)
| 0x08048724 push ebp
| 0x08048725 mov ebp, esp
| 0x08048727 sub esp, 0x28
; '('
| 0x0804872a mov eax, dword [arg_8h]
; [0x8:4]=-1 ; 8
| 0x0804872d mov byte [local_1ch], al
; 将参数 i 放到 [local_1ch]
| 0x08048730 mov eax, dword gs:[0x14]
; [0x14:4]=-1 ; 20
| 0x08048736 mov dword [local_ch], eax
| 0x08048739 xor eax, eax
| 0x0804873b movzx eax, byte [0x804b069]
; [0x804b069:1]=0 ; 取出 user_num
| 0x08048742 cmp byte [local_1ch], al
; [0x2:1]=255 ; 2 ; 比较
| ,=desc
| || 0x0804879a mov edx, eax
| || 0x0804879c mov eax, dword [local_10h]
; 取出 test_size
| || 0x0804879f add edx, eax
; store[i]->desc + test_size
| || 0x080487a1 movzx eax, byte [local_1ch]
| || 0x080487a5 mov eax, dword [eax*4 + 0x804b080]
; 取出 store[i]
| || 0x080487ac sub eax, 4
; store[i] - 4
| || 0x080487af cmp edx, eax
; 比较 (store[i]->desc + test_size) 和 (store[i] - 4)
| ,=== 0x080487cd sub esp, 0xc
| || 0x080487d0 push str.text:
; 0x8048cec ; "text: "
| || 0x080487d5 call sym.imp.printf
; int printf(const char *format)
| || 0x080487da add esp, 0x10
| || 0x080487dd mov eax, dword [local_10h]
| || 0x080487e0 lea edx, [eax + 1]
; test_size + 1
| || 0x080487e3 movzx eax, byte [local_1ch]
| || 0x080487e7 mov eax, dword [eax*4 + 0x804b080]
; [0x804b080:4]=0
| || 0x080487ee mov eax, dword [eax]
; 取出 store[i]->desc
| || 0x080487f0 sub esp, 8
| || 0x080487f3 push edx
| || 0x080487f4 push eax
| || 0x080487f5 call sub.fgets_6bb
; 读入 test_size+1 个字符到 store[i]->desc
| || 0x080487fa add esp, 0x10
| ,=== 0x080487ff nop
| ||,= 0x08048802 nop
| | | ; JMP XREF from 0x08048800 (sub.text_length:_724)
| | | ; JMP XREF from 0x080487fd (sub.text_length:_724)
| `-`-> 0x08048803 mov eax, dword [local_ch]
| 0x08048806 xor eax, dword gs:[0x14]
| ,= 0x08048814 leave
\ 0x08048815 ret
1251