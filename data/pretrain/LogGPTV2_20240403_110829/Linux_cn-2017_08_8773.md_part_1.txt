---
author: Jonas Bonér, Viktor Klang
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 9032
date: '2017-08-12 18:30:00'
editorchoice: true
excerpt: 在恒久的迷惑与过多期待的海洋中，登上一组简单响应式设计原则的小岛。
fromurl: https://www.oreilly.com/ideas/reactive-programming-vs-reactive-systems
id: 8773
islctt: true
largepic: /data/attachment/album/201708/12/183025r3x6x37axwc33e63.jpg
permalink: /article-8773-1.html
pic: /data/attachment/album/201708/12/183025r3x6x37axwc33e63.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在恒久的迷惑与过多期待的海洋中，登上一组简单响应式设计原则的小岛。
tags:
- 响应式
thumb: false
title: 响应式编程与响应式系统
titlepic: true
translator: XLCYun
updated: '2017-08-12 18:30:00'
---
> 
> 在恒久的迷惑与过多期待的海洋中，登上一组简单响应式设计原则的小岛。
> 
> 
> 
![](/data/attachment/album/201708/12/183025r3x6x37axwc33e63.jpg)
> 
> 下载 Konrad Malawski 的免费电子书[《为什么选择响应式？企业应用中的基本原则》](http://www.oreilly.com/programming/free/why-reactive.csp?intcmp=il-webops-free-product-na_new_site_reactive_programming_vs_reactive_systems_text_cta)，深入了解更多响应式技术的知识与好处。
> 
> 
> 
自从 2013 年一起合作写了[《响应式宣言》](http://www.reactivemanifesto.org/)之后，我们看着响应式从一种几乎无人知晓的软件构建技术——当时只有少数几个公司的边缘项目使用了这一技术——最后成为 中间件领域   middleware field 大佬们全平台战略中的一部分。本文旨在定义和澄清响应式各个方面的概念，方法是比较在*响应式编程*风格下和把*响应式系统*视作一个紧密整体的设计方法下编写代码的不同之处。
### 响应式是一组设计原则
响应式技术目前成功的标志之一是“ 响应式   reactive ”成为了一个热词，并且跟一些不同的事物与人联系在了一起——常常伴随着像“ 流   streaming ”、“ 轻量级   lightweight ”和“ 实时   real-time ”这样的词。
举个例子：当我们看到一支运动队时（像棒球队或者篮球队），我们一般会把他们看成一个个单独个体的组合，但是当他们之间碰撞不出火花，无法像一个团队一样高效地协作时，他们就会输给一个“更差劲”的队伍。从这篇文章的角度来看，响应式是一组设计原则，一种关于系统架构与设计的思考方式，一种关于在一个分布式环境下，当 实现技术   （    implementation techniques    ） 、工具和设计模式都只是一个更大系统的一部分时如何设计的思考方式。
这个例子展示了不经考虑地将一堆软件拼揍在一起——尽管单独来看，这些软件都很优秀——和响应式系统之间的不同。在一个响应式系统中，正是*不同 组件   （    parts    ） 间的相互作用*让响应式系统如此不同，它使得不同组件能够独立地运作，同时又一致协作从而达到最终想要的结果。
*一个响应式系统* 是一种 架构风格   （    architectural style    ） ，它允许许多独立的应用结合在一起成为一个单元，共同响应它们所处的环境，同时保留着对单元内其它应用的“感知”——这能够表现为它能够做到 放大/缩小规模   （    scale up/down    ） ，负载平衡，甚至能够主动地执行这些步骤。
以响应式的风格（或者说，通过响应式编程）写一个软件是可能的；然而，那也不过是拼图中的一块罢了。虽然在上面的提到的各个方面似乎都足以称其为“响应式的”，但仅就其它们自身而言，还不足以让一个*系统*成为响应式的。
当人们在软件开发与设计的语境下谈论“响应式”时，他们的意思通常是以下三者之一：
* 响应式系统（架构与设计）
* 响应式编程（基于声明的事件的）
* 函数响应式编程（FRP）
我们将调查这些做法与技术的意思，特别是前两个。更明确地说，我们会在使用它们的时候讨论它们，例如它们是怎么联系在一起的，从它们身上又能到什么样的好处——特别是在为多核、云或移动架构搭建系统的情境下。