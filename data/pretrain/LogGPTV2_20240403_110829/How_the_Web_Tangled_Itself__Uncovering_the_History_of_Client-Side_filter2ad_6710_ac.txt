### Communication via postMessages and Security Implications

Web sites often use the `postMessage` API to facilitate communication between documents from different origins. This API ensures the authenticity and confidentiality of messages, allowing receivers to verify the sender's origin and enabling senders to target specific origins, thereby preventing unauthorized access. However, in practice, these security checks are frequently omitted [31]. 

To analyze this issue, we examined our dataset along two dimensions: 
1. Handling of received `postMessage` without performing origin checks.
2. Calls to the `postMessage` API with a wildcard origin.

Given the large volume of data (8,992 distinct scripts), we conducted a lightweight analysis of `postMessage` receivers. Specifically, whenever our static analysis detected a registered `postMessage` receiver, we checked if the script accessed the `origin` property of the message. Although Son and Shmatikov [31] demonstrated that the presence of an origin check does not guarantee the absence of vulnerabilities, we present our results as an estimation over the study period. The findings are summarized in Table 1.

### Crossdomain.xml Files and Wildcards

Crossdomain policy files, such as `crossdomain.xml`, can be used to grant cross-domain access. These files may include wildcards to allow broad access, e.g., `*.domain.com` for any subdomain or `*` for any domain. While the Web Archive stores many of these policy files, we found instances where no policy file was available. Thus, the results presented here should be considered lower bounds.

Figure 8 illustrates the prevalence of `crossdomain.xml` files and the use of dangerous wildcards. In 2008, approximately 7% of domains had wildcards allowing access to any remote origin, with a subsequent decline, likely due to the reduced use of Flash. We also analyzed which domains with wildcard policies had login pages or session cookies, indicating potential vulnerabilities. The results, shown in Figure 8, suggest that at most 3% of domains were vulnerable, aligning with findings by Lekies et al. [16] and Jang et al. [10].

### Usage of Outdated Libraries

JavaScript libraries, particularly jQuery, are widely used on the web. Our analysis revealed that up to 75% of the websites we examined used jQuery. Figure 9 shows the usage pattern of jQuery over time. When third-party code is included in a website, it runs in the origin of the including site, making all sites that include a flawed library vulnerable.

We used `retire.js` [25] to detect known vulnerabilities in the versions of jQuery collected in our study. For each domain using jQuery, we checked if the version had known vulnerabilities at the time of use. The results, depicted in Figure 9, show that a majority of websites used outdated versions of jQuery with known vulnerabilities.

While a vulnerable library does not always directly imply a site is at risk, previous work has shown that outdated libraries can cause severe security issues, such as Client-Side XSS [34]. Besides jQuery, the YUI library was also prevalent, peaking at about 10% in 2011 and dropping to 3.5% by 2016. Similar to jQuery, a high fraction of sites running YUI used vulnerable versions, with 85% of YUI-using sites running a known vulnerable version in 2016. These results are consistent with those reported by Lauinger et al. [14].

### Indicators for Security Awareness

In this section, we highlight several features that indicate whether a site operator is aware of web security mechanisms. Most of these indicators can be found in HTTP headers. The Web Archive records these headers, allowing us to analyze their usage over time. Figure 10 provides an overview of the fraction of domains using these security headers, and Table 2 shows when each security measure was implemented by major browsers.

#### 5.1 HTTP-only Cookies

Cookies are essential for session management but are vulnerable to Cross-Site Scripting (XSS) attacks. To mitigate this, browsers introduced the `HttpOnly` flag in 2001, which restricts cookie access to HTTP requests, disallowing JavaScript access. We marked a domain as using `HttpOnly` cookies if at least one cookie was set with this flag. By 2016, over 40% of domains used `HttpOnly` cookies, indicating awareness of cookie theft risks.

#### 5.2 Disallowing Content Sniffing

Content sniffing is a technique used by browsers to guess the content type when no `Content-Type` header is provided. This can lead to XSS vulnerabilities if, for example, a text file containing HTML is uploaded and rendered as HTML. To prevent this, the `X-Content-Type-Options` header with the value `nosniff` was introduced in 2008. By 2016, almost 47% of analyzed sites used this protective measure.

#### 5.3 Clickjacking Protection

Clickjacking involves tricking users into clicking on hidden elements, potentially leading to actions like soliciting likes or accessing a victim's computer. The `X-Frame-Options` (XFO) header was introduced to protect against this, allowing framing to be blocked, restricted to the same origin, or allowed from specific URLs. Despite its introduction in 2010, usage only increased significantly from 2012, reaching 53% by 2016. However, XFO has been deprecated in favor of the `frame-ancestors` directive in Content Security Policy (CSP).

#### 5.4 Content Security Policy

Content Security Policy (CSP) mitigates the risk of client-side code injection, such as XSS, by whitelisting trusted sources of content. CSP disallows inline scripts and `eval` by default. Although CSP was introduced in 2013, adoption remains low, with less than 10% of sites deploying it by 2016. Setting up CSP for legacy applications is challenging, but its presence is an indicator of security awareness.

#### 5.5 HTTP Strict Transport Security

HTTP Strict Transport Security (HSTS) ensures that connections to a site are always encrypted, mitigating man-in-the-middle attacks. HSTS was introduced to address the growing need for secure data transfer in modern web applications. The adoption and effectiveness of HSTS are critical for maintaining the security of sensitive information.

### Conclusion

Our analysis highlights the importance of implementing and maintaining robust security measures in web applications. While some measures, such as `HttpOnly` cookies and `X-Content-Type-Options`, have seen significant adoption, others like CSP and HSTS still lag behind. Site operators must remain vigilant and proactive in addressing these security gaps to protect their users and data.