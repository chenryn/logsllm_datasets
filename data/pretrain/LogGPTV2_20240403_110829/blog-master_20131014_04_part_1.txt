## Systemtap : stap PROCESSING 5 steps introduce  
### 作者                                                   
digoal                                                     
### 日期                                                                    
2013-10-14                                                 
### 标签                                                 
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                                  
----                                                           
## 背景            
```  
stap处理stp时, 分5步进行, 以下取自man stap :   
第一步 :   
The translator begins pass 1 by parsing the given input script, and all scripts (files named *.stp) found in a tapset directory.   
The directories listed with -I are processed in sequence, each processed in "guru mode".   
"guru mode" : Enable parsing of unsafe expert-level constructs like embedded C.  
For each directory, a number of subdirectories are also searched.   
These subdirectories are derived from the selected kernel version (the -R option), in order to allow more kernel-version-specific scripts to override less specific ones.   
For example, for a kernel version 2.6.12-23.FC3 the following patterns would be searched, in sequence:   
  2.6.12-23.FC3/*.stp,   
  2.6.12/*.stp,   
  2.6/*.stp,   
and finally *.stp Stopping the translator after pass 1 causes it to print the parse trees.  
第一步做的事情是 :   
解析stap输入脚本, 或者-e中指定的内容, 以及tapset库, -I检索路径中的*.stp文件.  
如下 :   
parsed user script and 95 library script.  
[root@db-172-16-3-150 ~]# stap --vp 50000 -I /tmp -e 'probe syscall.read {printf("hello i am digoal.\n"); exit()}'  
Parsed kernel "/lib/modules/2.6.32-358.el6.x86_64/build/.config", containing 3166 tuples  
Parsed kernel /lib/modules/2.6.32-358.el6.x86_64/build/Module.symvers, which contained 5541 vmlinux exports  
Searched: " /usr/share/systemtap/tapset/x86_64/*.stp ", found: 10, processed: 10  
Searched: " /usr/share/systemtap/tapset/*.stp ", found: 82, processed: 82  
Searched: " /tmp/2.6.32-358.el6.x86_64/*.stp ", found: 1, processed: 1  
Searched: " /tmp/2.6.32/*.stp ", found: 1, processed: 1  
Searched: " /tmp/2.6/*.stp ", found: 1, processed: 1  
Pass 1: parsed user script and 95 library script(s) using 203480virt/31780res/3104shr/29416data kb, in 290usr/20sys/307real ms.  
hello i am digoal.  
```  
第一步中, -R在测试时发现一个BUG, 参见 :   
http://blog.163.com/digoal@126/blog/static/16387704020139142437763/  
```  
第二步 :   
分析 stap"执行脚本或者-e中指定内容" 包含的符号(指变量,函数,探针, 条件预编译, 宏 ,符号(probe,function, global..等语法型字符)等) 以及变量类型(猜或指定类型如函数返回值和参数).  
未能直接分析出来的符号, 将通过第一步得到的tapset库进行匹配, 只要匹配到了, 就会把对应的stp(探针库), stpm(宏库)文件选择进来.   
直到所有的符号都分析匹配完.  
In pass 2, the translator analyzes the input script to resolve symbols and types.   
References to variables, functions, and probe aliases that are unresolved internally are satisfied by searching through the parsed tapset script files.   
If any tapset script file is selected because it defines an unresolved symbol, then the entirety of that file is added to the translator's resolution queue.   
This process iterates until all symbols are resolved and a subset of tapset script files is selected.  
接下来校验stap脚本(或-e内容)中用到的所有的探针, 以及探针handler中的target端变量.  
Next, all probe point descriptions are validated against the wide variety supported by the translator.   
Probe points that refer to code locations ("synchronous probe points") require the appropriate kernel debugging information to be installed.   
In the associated probe handlers, target-side variables (whose names begin with "$") are found and have their run-time locations decoded.  
如果未使用stap -u选项, 那么接下来要做的是优化脚本. 移除未使用的变量, 表达式, 函数等.  
```  
具体的优化规则参见 :   
http://blog.163.com/digoal@126/blog/static/16387704020138109459201/  
```  
Next, all probes and functions are analyzed for optimization opportunities, in order to remove variables, expressions, and functions that have no useful value and no side-effect.   
Embedded-C functions are assumed to have side-effects unless they include the magic string /* pure */.   
Since this optimization can hide latent code errors such as type mismatches or invalid $target variables, it sometimes may be useful to disable the optimizations with the -u option.  
pass2最后要做的是, 根据上下文(例如语境或操作符)推测所有变量的类型, 函数的返回值类型和参数类型, 数组中存储的类型, 数组的索引类型.  
Finally, all variable, function, parameter, array, and index types are inferred from context (literals and operators).   
Stopping the translator after pass 2 causes it to list all the probes, functions, and variables, along with all inferred types.   
Any inconsistent or unresolved types cause an error.  
第二步示例输出如下 :   
[root@db-172-16-3-150 ~]# stap --vp 05000 -I /tmp -e 'probe syscall.read {printf("hello i am digoal.\n"); exit()}'  
Attempting to extract kernel debuginfo build ID from /lib/modules/2.6.32-358.el6.x86_64/build/vmlinux.id  
Attempting to extract kernel debuginfo build ID from /sys/kernel/notes  
blacklist regexps:  
blfn: ^(atomic_notifier_call_chain|default_do_nmi|__die|die_nmi|do_debug|do_general_protection|do_int3|do_IRQ|do_page_fault|do_sparc64_fault|do_trap|dummy_nmi_callback|flush_icache_range|ia64_bad_break|ia64_do_page_fault|ia64_fault|io_check_error|mem_parity_error|nmi_watchdog_tick|notifier_call_chain|oops_begin|oops_end|program_check_exception|single_step_exception|sync_regs|unhandled_fault|unknown_nmi_error|xen_[gs]et_debugreg|xen_irq_.*|xen_.*_fl_direct.*|check_events|xen_adjust_exception_frame|xen_iret.*|xen_sysret64.*|test_ti_thread_flag.*|inat_get_opcode_attribute|system_call_after_swapgs|.*raw_.*_lock.*|.*raw_.*_unlock.*|.*raw_.*_trylock.*|.*read_lock.*|.*read_unlock.*|.*read_trylock.*|.*write_lock.*|.*write_unlock.*|.*write_trylock.*|.*write_seqlock.*|.*write_sequnlock.*|.*spin_lock.*|.*spin_unlock.*|.*spin_trylock.*|.*spin_is_locked.*|rwsem_.*lock.*|.*mutex_.*lock.*|raw_.*|atomic_.*|atomic64_.*|get_bh|put_bh|.*apic.*|.*APIC.*|.*softirq.*|.*IRQ.*|.*_intr.*|__delay|.*kernel_text.*|get_current|current_.*|.*exception_tables.*|.*setup_rt_frame.*|.*preempt_count.*|preempt_schedule|__switch_to|special_mapping_.*|.*_pte_.*)$  
blfn_ret: ^(do_exit|sys_exit|sys_exit_group)$  
blfile: ^(kernel/kprobes\.c|arch/.*/kernel/kprobes\.c|.*/include/asm/io\.h|.*/include/asm/io_64\.h|.*/include/asm/bitops\.h|drivers/ide/ide-iops\.c|arch/.*/kernel/paravirt\.c|.*/include/asm/paravirt\.h|fs/seq_file\.c)$  
blsection: ^(\.init\.|\.exit\.|\.devinit\.|\.devexit\.|\.cpuinit\.|\.cpuexit\.|\.meminit\.|\.memexit\.)  
dwarf_builder::build for   
parse 'sys_read', func 'sys_read'  
pattern 'kernel' matches module 'kernel'  
focused on module 'kernel' = [0xffffffff81000000-0xffffffff8203c000, bias 0 file /usr/lib/debug/lib/modules/2.6.32-358.el6.x86_64/vmlinux ELF machine |x86_64 (code 62)  
focused on module 'kernel'  
module function cache kernel size 60247  
module function cache kernel hit sys_read  
selected function sys_read  
function cache kernel:fs/read_write.c size 114  
function cache kernel:fs/read_write.c hit sys_read  
selected function sys_read  
probe sys_read@fs/read_write.c:389 kernel reloc=.dynamic pc=0xffffffff811817b0  
die parent cache kernel:fs/read_write.c size 611  
finding location for local 'fd' near address 0xffffffff811817b0, module bias 0  
get_cfa_ops @0xffffffff811817b0, module_start @0xffffffff81000000  
got dwarf cfi bias: 0x0  
found cfa, info: 16 [start: 0xffffffff811817b0, end: 0xffffffff811817b1, nops: 1  
finding location for local 'buf' near address 0xffffffff811817b0, module bias 0  
get_cfa_ops @0xffffffff811817b0, module_start @0xffffffff81000000  
got dwarf cfi bias: 0x0  
found cfa, info: 16 [start: 0xffffffff811817b0, end: 0xffffffff811817b1, nops: 1  
finding location for local 'count' near address 0xffffffff811817b0, module bias 0  
get_cfa_ops @0xffffffff811817b0, module_start @0xffffffff81000000  
got dwarf cfi bias: 0x0  
found cfa, info: 16 [start: 0xffffffff811817b0, end: 0xffffffff811817b1, nops: 1  
finding location for local 'fd' near address 0xffffffff811817b0, module bias 0  
get_cfa_ops @0xffffffff811817b0, module_start @0xffffffff81000000  
got dwarf cfi bias: 0x0  
found cfa, info: 16 [start: 0xffffffff811817b0, end: 0xffffffff811817b1, nops: 1  
finding location for local 'buf' near address 0xffffffff811817b0, module bias 0  
get_cfa_ops @0xffffffff811817b0, module_start @0xffffffff81000000  
got dwarf cfi bias: 0x0  
found cfa, info: 16 [start: 0xffffffff811817b0, end: 0xffffffff811817b1, nops: 1  
finding location for local 'count' near address 0xffffffff811817b0, module bias 0  
get_cfa_ops @0xffffffff811817b0, module_start @0xffffffff81000000  
got dwarf cfi bias: 0x0  
found cfa, info: 16 [start: 0xffffffff811817b0, end: 0xffffffff811817b1, nops: 1  
deleting module_cache  
Eliding side-effect-free empty block operator '{' at /usr/share/systemtap/tapset/syscalls2.stp:676:1  
Flattening nested block operator '{' at :1:20  
Pass 2: analyzed script: 1 probe(s), 1 function(s), 0 embed(s), 0 global(s) using 358144virt/132372res/79236shr/53812data kb, in 620usr/40sys/655real ms.  
hello i am digoal.  
第三步 :   
将以上解析好的stap脚本转换成c代码.  
In pass 3, the translator writes C code that represents the actions of all selected script files, and creates a Makefile to build that into a kernel object.   
These files are placed into a temporary directory.   
Stopping the translator at this point causes it to print the contents of the C file.  
第三步示例输出如下 :   
[root@db-172-16-3-150 ~]# stap --vp 00500 -I /tmp -e 'probe syscall.read {printf("hello i am digoal.\n"); exit()}'  
Pass 3: using cached /root/.systemtap/cache/e8/stap_e878009262b7836eb07f0b5a0bf0705e_970.c  
hello i am digoal.  
第四步 :   
使用第三步生成的c文件创建linux内核对象文件(.ko).  
In pass 4, the translator invokes the Linux kernel build system to create the actual kernel object file.   
This involves running make in the temporary directory, and requires a kernel module build system (headers, config and Makefiles) to be installed in the usual spot /lib/modules/VERSION/build.   
Stopping the translator after pass 4 is the last chance before running the kernel object.   
This may be useful if you want to archive the file.  
第四步示例输出如下 :   
[root@db-172-16-3-150 ~]# stap --vp 00050 -I /tmp -e 'probe syscall.read {printf("hello i am digoal.\n"); exit()}'  
Pass 4: using cached /root/.systemtap/cache/e8/stap_e878009262b7836eb07f0b5a0bf0705e_970.ko  
hello i am digoal.  
第五步 :   
调用staprun, 将ko文件加载到内核中, 并与之通讯, 拷贝这个内核对象跟踪到的数据到临时文件中. 直到stap运行结束或受到中断请求信号.  
最后staprun 从内核中卸载这个ko模块, 并且清除整个stap过程产生的临时文件.  
In pass 5, the translator invokes the systemtap auxiliary program staprun program for the given kernel object.   
This program arranges to load the module then communicates with it, copying trace data from the kernel into temporary files, until the user sends an interrupt signal.   
Any run-time error encountered by the probe handlers, such as running out of memory, division by zero, exceeding nesting or runtime limits, results in a soft error indication.   
Soft errors in excess of MAXERRORS block of all subsequent probes (except error-handling probes), and terminate the session.   
Finally, staprun unloads the module, and cleans up.  
第五步示例输出如下 :   
[root@db-172-16-3-150 ~]# stap --vp 00005 -I /tmp -e 'probe syscall.read {printf("hello i am digoal.\n"); exit()}'  
Pass 5: starting run.  
Running /usr/bin/staprun -v -v -R /tmp/stapNmEOL6/stap_e878009262b7836eb07f0b5a0bf0705e_970.ko  
staprun:main:387 modpath="/tmp/stapNmEOL6/stap_e878009262b7836eb07f0b5a0bf0705e_970.ko", modname="stap_e878009262b7836eb07f0b5a0bf0705e_970"  
staprun:init_staprun:305 init_staprun  
staprun:insert_module:73 inserting module /tmp/stapNmEOL6/stap_e878009262b7836eb07f0b5a0bf0705e_970.ko  
staprun:insert_module:99 module options: _stp_bufsize=0  
staprun:insert_module:107 module path canonicalized to '/tmp/stapNmEOL6/stap_e878009262b7836eb07f0b5a0bf0705e_970.ko'  
staprun:check_signature:441 checking signature for /tmp/stapNmEOL6/stap_e878009262b7836eb07f0b5a0bf0705e_970.ko  
Signature file /tmp/stapNmEOL6/stap_e878009262b7836eb07f0b5a0bf0705e_970.ko.sgn not found  
staprun:check_signature:454 verify_module returns 0  
staprun:insert_module:170 Renaming module 'stap_e878009262b7836eb07f0b5a0bf0705e_970'  
staprun:insert_module:178 Renamed module to 'stap_e878009262b7836eb07f0b5a0bf070_14544'  
staprun:init_ctl_channel:31 Opened /sys/kernel/debug/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544/.cmd (4)  
staprun:close_ctl_channel:66 Closed ctl fd 4  
execing: /usr/libexec/systemtap/stapio -v -v -R stap_e878009262b7836eb07f0b5a0bf070_14544   
stapio:parse_modpath:408 modpath="/lib/modules/2.6.32-358.el6.x86_64/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544.ko"  
stapio:main:41 modpath="/lib/modules/2.6.32-358.el6.x86_64/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544.ko", modname="stap_e878009262b7836eb07f0b5a0bf070_14544"  
stapio:init_stapio:367 init_stapio  
stapio:init_ctl_channel:31 Opened /sys/kernel/debug/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544/.cmd (4)  
stapio:stp_main_loop:565 in main loop  
stapio:stp_main_loop:584 select_supported: 1  
stapio:init_relayfs:244 initializing relayfs  
stapio:init_relayfs:268 attempting to open /sys/kernel/debug/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544/trace0  
stapio:init_relayfs:268 attempting to open /sys/kernel/debug/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544/trace1  
stapio:init_relayfs:274 ncpus=1, bulkmode = 0  
stapio:init_relayfs:357 starting threads  
stapio:stp_main_loop:736 systemtap_module_init() returned 0  
stapio:stp_main_loop:727 got STP_REQUEST_EXIT  
hello i am digoal.  
stapio:stp_main_loop:720 got STP_EXIT  
stapio:cleanup_and_exit:452 detach=0  
stapio:close_relayfs:373 closing  
stapio:close_relayfs:392 done  
stapio:cleanup_and_exit:469 closing control channel  
stapio:close_ctl_channel:66 Closed ctl fd 4  
stapio:cleanup_and_exit:477   
Renamed module to: stap_e878009262b7836eb07f0b5a0bf070_14544  
stapio:cleanup_and_exit:484 removing stap_e878009262b7836eb07f0b5a0bf070_14544  
staprun:parse_modpath:408 modpath="/lib/modules/2.6.32-358.el6.x86_64/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544.ko"  
staprun:main:387 modpath="/lib/modules/2.6.32-358.el6.x86_64/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544.ko", modname="stap_e878009262b7836eb07f0b5a0bf070_14544"  
staprun:init_staprun:305 init_staprun  
staprun:remove_module:222 stap_e878009262b7836eb07f0b5a0bf070_14544  
staprun:init_ctl_channel:31 Opened /sys/kernel/debug/systemtap/stap_e878009262b7836eb07f0b5a0bf070_14544/.cmd (4)  
staprun:close_ctl_channel:66 Closed ctl fd 4  
staprun:remove_module:247 removing module stap_e878009262b7836eb07f0b5a0bf070_14544  
staprun:remove_module:259 Module stap_e878009262b7836eb07f0b5a0bf070_14544 removed.  
Spawn waitpid result (0x0): 0  
Pass 5: run completed in 0usr/20sys/326real ms.  
Running rm -rf /tmp/stapNmEOL6  
Spawn waitpid result (0x0): 0  
Removed temporary directory "/tmp/stapNmEOL6"  
[其他 ]  
man stap  
运行至某个步骤停止, 一般可用于生成可移动模块.  
       -p NUM Stop  after  pass NUM.  The passes are numbered 1-5: parse, elaborate, translate, compile, run.  See the  
              PROCESSING section for details.  
提高输出详细级别  
       -v     Increase verbosity for all passes.  Produce a larger volume of informative (?) output each  time  option  
              repeated.  
设置各步骤的输出详细级别  
       --vp ABCDE  
              Increase  verbosity  on  a  per-pass basis.  For example, "--vp 002" adds 2 units of verbosity to pass 3  
              only.  The combination "-v --vp 00004" adds 1 unit of verbosity for all passes, and 4 more for pass 5.  
```  
## 参考  
1\. https://sourceware.org/systemtap/man/stap.1.html  
2\. http://blog.163.com/digoal@126/blog/static/16387704020139142437763/  
3\. http://blog.163.com/digoal@126/blog/static/16387704020138109459201/  
4\. 宏以及条件预编译参考  
http://blog.163.com/digoal@126/blog/static/16387704020139831157191/  
http://blog.163.com/digoal@126/blog/static/16387704020139851437162/  
5\.   
```  
[root@db-172-16-3-150 e8]# cat  /root/.systemtap/cache/e8/stap_e878009262b7836eb07f0b5a0bf0705e_970.c  
#define STAP_MSG_RUNTIME_H_01 "myproc-unprivileged tapset function called without is_myproc checking for pid %d (euid %d)"  
#define STAP_MSG_LOC2C_01 "kernel read fault at 0x%p (%s)"  
#define STAP_MSG_LOC2C_02 "kernel write fault at 0x%p (%s)"  
#define STAP_MSG_LOC2C_03 "divide by zero in DWARF operand (%s)"  
#define STAP_VERSION(a, b) ( ((a) locals[c->nesting+1].function_exit;  
  (void) l;  
  #define CONTEXT c  
  #define THIS l  