AES: Since AES does not lend itself well to secure compu-
tation over prime ﬁelds, we use this purely as a benchmark.
We assume an MPC system which is deﬁned over the ﬁnite
ﬁeld F
28 , allowing for eﬃcient evaluation of the S-box [23,
24]. We have
FAES : (F
28 )16 × (F
28 )16 → (F
28 )16.
LowMC: This is a block cipher candidate [4] designed to
be suitable for FHE and MPC style applications; thus it has
a low multiplicative depth and a low number of multiplica-
It operates over F2, so like AES, is not well-suited
tions.
to the MPC applications for which we envisage our block
ciphers being used for. Thus we only consider LowMC as
an additional base line comparison (along with AES) for our
ciphers. LowMC has block size n bits and key size k bits
(we use n = 256 and k = 128), giving:
FLowMC : (F2)k × (F2)n → (F2)n
Naor-Reingold: Let G = (cid:104)g(cid:105) be an elliptic curve group
of prime order p in which DDH is hard, and encode(·) be
a hash function that maps elements of G into elements of
Fp. The Naor-Reingold PRF takes a uniform secret-shared
key in Fn+1
2 (secret-shared over Fp), and
outputs a public Fp element as follows:
, a message in Fn
p
FNR(n) : (Fp)n+1 × (F2)n → Fp
(k, x) (cid:55)→ encode(gk0·(cid:81)n
i=1 k
xi
i )
To evaluate FNR in MPC naively would require computing
exponentiations (or EC scalar multiplications) on secret ex-
ponents, which is very expensive. However, if the PRF out-
put is public, we show how the exponentiation (and hence
PRF evaluation) can be done very eﬃciently, with active se-
curity, using any MPC protocol based on secret sharing.
Legendre Symbol: We also consider an unusual PRF
based on the pseudorandomness of the Legendre symbol.
This is a relatively old idea, going back to a paper of Damg˚ard
in 1988 [20], but has not been studied much by the crypto-
graphic community. The basic version of the PRF is deﬁned
as,
FLeg(bit) : Fp × Fp → F2
(cid:1) ∈
where Lp(a) computes the usual Legendre symbol (cid:0)a
(k, x) (cid:55)→ Lp(x + k)
{−1, 0, 1} and maps this into {0, 1, (p + 1)/2}, by computing
p
(cid:19)
(cid:18)(cid:18) a
(cid:19)
p
Lp(a) =
1
2
+ 1
(mod p).
The output is embedded into Fp, giving a secret-shared out-
put in Fp. If needed, the range can easily be extended to
the whole of Fp by using a key with multiple ﬁeld elements
and performing several evaluations in parallel. This gives a
PRF
FLeg(n) : (Fp)((n+1)·(cid:96)) × (Fp)n → Fp,
for some value (cid:96) = O(log2 p) chosen large enough to ensure
a suﬃcient statistical distance from uniform of the output.
This PRF takes n ﬁnite ﬁeld elements as input and produces
an element in Fp as output, where n is some ﬁxed (and
relatively small) number, say one or two.
Perhaps surprisingly, we show that the Legendre PRF can
be evaluated very eﬃciently in MPC, at the cost of just two
multiplications in three rounds of interaction for FLeg(bit). To
the best of our knowledge, this is the only PRF that can be
evaluated in a constant number of rounds on secret-shared
data, using any arithmetic MPC protocol. Since the under-
lying hard problem is less well-studied than, say, DDH or
factoring, we also provide a brief survey of some known at-
tacks, which are essentially no better than brute force of the
key.
MiMC: This is a very recent class of designs whose pri-
mary application domain are SNARKs [2]. In addition to a
cryptographic hash function, the design also includes a block
cipher which is also usable as a PRF, with up to birthday
bound security. The input, output and keys are all deﬁned
over Fp, so we get:
FMiMC : Fp × Fp → Fp.
The core of the round function is the simple map x (cid:55)→ x3
over Fp. The number of rounds is quite high (for a 128-bit
prime p 82 for full security, 73 for PRF security), but in
terms of Fp multiplications the performance turns out to be
competitive.
The reason for selecting MiMC as a “standard” block ci-
pher is that ﬁrstly it works over a ﬁnite prime ﬁeld of large
characteristic, which is a common requirement for applica-
tions of secret-sharing based MPC that perform arithmetic
on integers or ﬁxed-point data types. Secondly, the depth
of the computation is not too large, being 146. Thirdly, the
number of non-linear operations is also 146, this means that
the oﬄine pre-processing needed (to produce multiplication
triples) will be very small compared to other constructions.
In Table 1 we present an overview of the MPC-friendly
PRFs we consider. The table shows the number of secure
multiplication needed to execute the online evaluation of
the function on shared inputs (since in secret-sharing based
MPC, additions are free) as well as the number of rounds of
communication.
1.5 Length Extension
We end this introduction by noting that FMiMC and FLeg(n)
can be extended to cope with arbitrary length inputs in the
standard way; either by using a CBC-MAC style construc-
tion or a Merkle–Damg˚ard style construction. For example,
to extend FLeg(1)and FMiMC, so that they can be applied to an
input x1, . . . , xn ∈ Fp we can use CBC mode as in Figure 1.
Whereas, to extend FLeg(2) we can apply Merkle–Damgard
as in Figure 2. These two extension techniques are often
more eﬃcient than using an arbitrary length PRF as a base
building block.
Length Extension for FLeg(1)
1. c0 ← n.
2. For i = 1, . . . , n do
(a) ci ← xi + FLeg(1)(k, ci−1).
3. a ← FLeg(1)(k, cn).
4. Return a.
Figure 1: Using CBC Mode With FLeg(1)
Length Extension for FLeg(2)
1. c0 ← n.
2. For i = 1, . . . , n do
(a) ci ← FLeg(2)(k, ci−1, xi).
3. Return cn.
Figure 2: Using Merkle-Damg˚ard With FLeg(2)
2. BACKGROUND
In this section we outline some of the basic material which
we will assume for the rest of this paper.
2.1 Multi-Party Computation Model
The general model of MPC we consider is the so-called
arithmetic black box, which is an ideal functionality that al-
lows parties to input and output values to be secret-shared,
and performs basic arithmetic operations on these secret
values over a ﬁnite ﬁeld Fp. This abstracts away the un-
derlying details of secret-sharing and MPC, and gives us
the commands in Figure 3. Note that as well as addition
and multiplication, FABB has commands for generating ran-
dom values according to various distributions, which allows
more eﬃcient protocols for certain tasks. Finally, the Share
command gives parties access to random, additive shares of
a value stored in the box. This essentially assumes the un-
derlying MPC protocol uses additive secret sharing, but is
only used for the Naor-Reingold PRF protocol (Section 3).
We use the notation [x] to denote a secret-shared value
that is stored in FABB. We also deﬁne addition and multi-
plication operators for the [·] notation; so, for example, the
statement
[w] = [x] · [y] + 2[z]
implicitly means that the Add and Mult commands of FABB
are used to compute the shared value [w].
Functionality FABB
Each value stored in this functionality is associated with a
unique identiﬁer that is given to all parties. Let [x] denote
the identiﬁer for a value x that is stored by the functionality.
Let A ⊂ {1, . . . , n} denote the index set of corrupted parties.
Input: Receive a value x ∈ Fp from some party and store x.
Add([x], [y]): Compute z = x + y and store [z].
Mult([x], [y]): Compute z = x · y and store [z].
Random: Sample r
R← Fp and store [r].
RandomBit: Sample b
R← {0, 1} ⊂ Fp and store [b].
R← Fp and store [s2].
RandomSquare: Sample s
Share([x]): For each i ∈ A, receive xi ∈ Fp from the adver-
sary. Sample uniform honest parties’ shares {xj}j /∈A,
i=1 xi = x. Send xi to
subject to the constraint that (cid:80)n
party Pi.
Output([x]): Send the value x to all parties.
Figure 3: Ideal functionality for arithmetic MPC
Concretely, the MPC protocol we use to implement FABB
is the SPDZ protocol by Damg˚ard et al. [26, 25], which op-
erates over a ﬁnite ﬁeld of size ≥ 2κ (for statistical secu-
rity κ) and provides active security against any number of
corrupted parties. The protocol consists of two stages: a
preprocessing phase, which is independent of the inputs and
done in advance, and a more eﬃcient online phase, where
the actual computation takes place. The purpose of the pre-
processing is to generate enough random shared data that
will be consumed later by the online phase. The main data
produced is one of three diﬀerent forms:
• Multiplication Triples: A triple of random shares
([a], [b], [c]) such that c = a · b mod p.
PRF
log2 p
Output (type)
Online cost
Assumption
FAES
FLowMC
FNR(n)
FLeg(bit)
FLeg(n)
FMiMC
8
2
256
128
128
128
shared
shared
public
shared
shared
shared
Mult.
960
1911
2 · n
2
256 · n
146
Rounds
50
13
–
–
3 + log(n + 1)
EC-DDH
3
3
73
DSLS
DSLS
–
Table 1: Overview of the cost of evaluating the PRFs in MPC.
• Square Pairs: A pair of random shares ([a], [b]) such
that b = a2 mod p.
• Random Bit: A random sharing [a] of a value a ∈
{0, 1}.
The main arithmetic operations in FABB have roughly the
following complexity when implemented in SPDZ. Additions
(and linear operations) are local operations so essentially
for free. A multiplication uses a preprocessed multiplication
triple and requires sending two ﬁeld elements in the online
phase, with one round of interaction. Squaring can be done
using a square pair and sending just one ﬁeld element, again
in one round.
The preprocessing can be implemented using either some-
what homomorphic encryption (SHE) — as in the original
SPDZ protocols — or oblivious transfer (OT), using the re-
cent protocol of Keller et al. [31]. We present runtimes using
the OT-based oﬄine phase only, as it is much more eﬃcient,
even when compared with the weaker covertly secure proto-
cols using SHE.
2.2 MPC Evaluation of AES and LowMC
28 , embedded into F
As a means of comparison for the other PRFs we use
as a base line a two party implementation of AES using
a SPDZ engine over the ﬁnite ﬁeld F
240 ,
as in [24]. We estimate the oﬄine phase costs 200ms per
block, with an online phase latency of 8ms and a through-
put of over 500 blocks per second. Note that recently, much
lower latencies have been obtained by evaluating AES using
secure table lookup [27]. However, this technique requires
far more (i.e., 256 times) preprocessing data, so we do not
consider this. One should also bear in mind that this is only
the time needed to evaluate the PRF. In a given application,
which is likely to be over a diﬀerent ﬁnite ﬁeld, the MPC
engine will also need to convert data between the two ﬁelds
Fp and F
240 . This is likely to incur a more signiﬁcant cost
than the evaluation of the PRF itself.
In addition to AES, we also present comparison execu-
tions for the low complexity block cipher LowMC. This is to
enable a comparison with our Fp based block ciphers against
not only a standard in-use block cipher (AES), but also a
block cipher designed for use in MPC/FHE environments.
2.2.1 FLowMC Deﬁnition
LowMC [4] is a ﬂexible family of block ciphers with oper-
ations over F2, designed to have a low number of multiplica-
tions and a low multiplicative depth when implemented in
MPC. Similar to AES, it is based on an SPN structure where
the block size n, the key size k, the number of Sboxes m in
the substitution layer and the allowed data complexity d of
attacks can independently be chosen. The number of rounds
r needed to reach the security claims is then derived from