MoLFI | Time(sec) | 500
400 | 10K 25K | 50K | 75K | 100K | 125K | 150K | 175K | 200K | LogNGTM 
LKE 
LogMine 
MoLFI | LogNGTM 
LKE 
LogMine 
MoLFI | Time(sec) | 3000
2500 | 10K 25K | 50K | 75K | 100K | 125K | 150K | 175K | 200K | LogNG 
LKE 
LogMine 
MoLFI | LogNG 
LKE 
LogMine 
MoLFI |MoLFI | LogNG 
LKE 
LogMine 
MoLFI |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|| Time(sec) |60 |K |SHISO |SHISO |SHISO |SHISO |K |9K |10K |Time(sec) |2000 |SHISO |SHISO |750K |1000K |1250K |1500K |1750K |2000K |2250K |2500K |Time(sec) |30 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |SHISO |SHISO |Time(sec) |300 |10K 25K |50K |75K |100K |125K |150K |175K |200K |SHISO |SHISO |Time(sec) |2000 |10K 25K |50K |75K |100K |125K |150K |175K |200K |SHISO |SHISO || Time(sec) |40 |K |3K |4K |5K 	6 |K 	7K 	8 |K |9K |10K |Time(sec) |1500 |250K |500K |750K |1000K |1250K |1500K |1750K |2000K |2250K |2500K |Time(sec) |20 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |1.8K |2.0K |Time(sec) |200 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K |Time(sec) |1500 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K || Time(sec) |40 |K |3K |4K |5K 	6 |K 	7K 	8 |K |9K |10K |Time(sec) |1000 |250K |500K |750K |1000K |1250K |1500K |1750K |2000K |2250K |2500K |Time(sec) |20 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |1.8K |2.0K |Time(sec) |200 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K |Time(sec) |1000 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K || Time(sec) |20 |K |3K |4K |5K 	6 |K 	7K 	8 |K |9K |10K |Time(sec) |1000 |250K |500K |750K |1000K |1250K |1500K |1750K |2000K |2250K |2500K |Time(sec) |10 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |1.8K |2.0K |Time(sec) |100 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K |Time(sec) |1000 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K || Time(sec) |20 |K |3K |4K |5K 	6 |K 	7K 	8 |K |9K |10K |Time(sec) |500 |250K |500K |750K |1000K |1250K |1500K |1750K |2000K |2250K |2500K |Time(sec) |10 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |1.8K |2.0K |Time(sec) |100 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K |Time(sec) |500 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K || Time(sec) |0  500 1K |K |3K |4K |5K 	6 |K 	7K 	8 |K |9K |10K |Time(sec) |0 |250K |500K |750K |1000K |1250K |1500K |1750K |2000K |2250K |2500K |Time(sec) |0  200 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |1.8K |2.0K |Time(sec) |0 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K |Time(sec) |0 |10K 25K |50K |75K |100K |125K |150K |175K |200K |225K |250K || Time(sec) |10 8 |K |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |K |9K |10K |Time(sec) |50 40 |250K |500K |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |2000K |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |Time(sec) |25 20 |400 |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |1.6K |logNG  LKE  LogMine  MoLFI  SHISO |logNG  LKE  LogMine  MoLFI  SHISO |Time(sec) |6000 5000 |10K 25K |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |200K |225K |250K |Time(sec) |140 120 |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO || Time(sec) |10 8 |K |(a) Apache. |(a) Apache. |(a) Apache. |(a) Apache. |K |9K |10K |Time(sec) |50 40 |250K |500K |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |2000K |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |Time(sec) |25 20 |400 |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |1.6K |logNG  LKE  LogMine  MoLFI  SHISO |logNG  LKE  LogMine  MoLFI  SHISO |Time(sec) |6000 5000 |10K 25K |(d) HDFS. |(d) HDFS. |(d) HDFS. |(d) HDFS. |(d) HDFS. |(d) HDFS. |200K |225K |250K |Time(sec) |140 120 |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO || Time(sec) |10 8 |K |(a) Apache. |(a) Apache. |(a) Apache. |(a) Apache. |K |9K |10K |Time(sec) |50 40 |250K |500K |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |2000K |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |Time(sec) |25 20 |400 |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |1.6K |logNG  LKE  LogMine  MoLFI  SHISO |logNG  LKE  LogMine  MoLFI  SHISO |Time(sec) |6000 5000 |10K 25K |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO |200K |225K |250K |Time(sec) |140 120 |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |LogNG  LKE  LogMine  MoLFI  SHISO |LogNG  LKE  LogMine  MoLFI  SHISO || Time(sec) |6 |K |logNG |logNG |logNG |logNG |K |9K |10K |Time(sec) |30 |250K |500K |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |2000K | | |Time(sec) |15 |400 |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |1.6K | | |Time(sec) |4000 |10K 25K | | | | | | |200K |225K |250K |Time(sec) |100 |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. | | || Time(sec) |6 |K |LKE  LogMine |LKE  LogMine |LKE  LogMine |LKE  LogMine |K |9K |10K |Time(sec) |20 |250K |500K |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |2000K | | |Time(sec) |15 |400 |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |1.6K | | |Time(sec) |3000 |10K 25K | | | | | | |200K |225K |250K |Time(sec) |80 |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. | | || Time(sec) |4 |K |MoLFI |MoLFI |MoLFI |MoLFI |K |9K |10K |Time(sec) |20 |250K |500K |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |2000K | | |Time(sec) |10 |400 |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |1.6K | | |Time(sec) |3000 |10K 25K | | | | | | |200K |225K |250K |Time(sec) |60 |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. | | || Time(sec) |4 |K |SHISO |SHISO |SHISO |SHISO |K |9K |10K |Time(sec) |20 |250K |500K |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |(b) BGL. |2000K | | |Time(sec) |10 |400 |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |(c) Hadoop. |1.6K | | |Time(sec) |3000 |10K 25K | | | | | | |200K |225K |250K |Time(sec) |60 |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. |(e) HealthApp. | | |2000 
	40
| 2
0
200 | 400 | 600 | 800 | 1.0K | 1.2K | 1.4K | 1.6K | 1.8K | 2.0K | 10 | 2K | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 225K | 20
0
250K | 1K2K 5K7K 10K 14K | 21K | 28K | 35K | 42K | 49K | 56K | 63K | 70K |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|| 2 0 200 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |1.8K |2.0K |10 |2K |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |225K |20 0 250K |1K2K 5K7K 10K 14K |21K |28K |35K |42K |49K |56K |63K |70K || 2 0 200 |400 |600 |800 |1.0K |1.2K |1.4K |1.6K |1.8K |2.0K |0  5001K |2K |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |1000  |225K |20 0 250K |1K2K 5K7K 10K 14K |21K |28K |35K |42K |49K |56K |63K |70K ||  |400 |600 |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |1.6K |1.8K |2.0K | |2K |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |225K |20 0 250K |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |Number of Log Messages |56K |63K |70K ||  |400 |600 |(f) HPC. |(f) HPC. |(f) HPC. |(f) HPC. |1.6K |1.8K |2.0K | |2K |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(g) Proxifier. |(h) Spark. |(h) Spark. |(h) Spark. |(h) Spark. |(h) Spark. |(h) Spark. |(h) Spark. |(h) Spark. |(h) Spark. |(h) Spark. |(i) Thunderbird. |(i) Thunderbird. |(i) Thunderbird. |(i) Thunderbird. |(i) Thunderbird. |(i) Thunderbird. |(i) Thunderbird. |(i) Thunderbird. |225K |20 0 250K |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |56K |63K |70K ||  |400 |600 |(f) HPC. |(f) HPC. |(f) HPC. |(f) HPC. |1.6K |1.8K |2.0K | |2K |Fig. 6.  |Fig. 6.  |Fig. 6.  |Fig. 6.  |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |. 	Running Time of Log Parsing Methods on Data Sets in Different Size |225K |20 0 250K |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |(j) Zookeeper. |56K |63K |70K |offline method can use all the raw log messages from the beginning. But the online method is not, it can only gradually adjust itself [13].
“Table. III” show the comparison of experimental data. The bold data indicates the highest performance value that can be achieved on this data set.From the results of PA, logNG can achieve the highest PA on 10 data sets, which are all above 0.9. The average PA of logNG reaches 0.9509, which is also the highest among all log parsers. The second-ranked parser is LogMine, with an average PA of 0.7613. There is an obvious gap between logNG and LogMine. logNG is not only significantly more effective than other log parsers, but also more comprehensive. It can achieve good or even the best results on each data set.2) Efficiency: Efficiency is also a very important indicator. The current log size is huge and the production speed is fast, which puts forward requirements for the efficiency of the log parser. In order to illustrate the running speed of logNG, we will also conduct experiments on 10 real data sets of different sizes and compare them with the other four log parsing methods.“Fig. 6” shows the running time of the five methods. The red line in the figure is the running time of logNG on log data sets of different sizes. The results show that logNG can achieve the fastest speed on most data sets. Even if it is not optimal for the three data sets of BGL, HDFS and HealthApp, it can still be ranked second. On the whole, logNG running time is maintained at a high level.In addition, our method linearly increases with the increase of log size on most data sets. However, LKE and LogMine are often squared with the log size, causing their images to be out of range. Because their time complexity is O(n2). The time complexity makes them unable to complete the log parsing task in limited time. And online parsing methods (i.e., SHISO, logNG) process log messages one by one, so they enjoy linear time complexity O(n) which makes them run faster. Although LogMine can achieve the second place in accuracy, it costs a lot of time.V. CONCLUSIONIn this work, we propose an online log parsing method based on N-gram. We use an intuitive assumptions: Log messages of the same log template will not have consecutively different tokens. With the assumption, we have realized the processing of raw log messages in a stream. The advantage of this method is that no historical data training is required. In order to prove the effectiveness and efficiency of logNG, we conducted experiments on 10 real-world log data sets collected by the LogPai team [14]. The final results show that logNG can achieve the best accuracy on most data sets, and the running speed is faster than other log parsing methods. However, during our research, we found that some dynamic variables of log templates have multiple value forms. For example, a“” can be either “00:01” or “¨ıs not necessarily a token, but a number of tokens. This type of dynamic variable has an impact on our parsing accuracy, and we next wanted to do further research on log datasets with this type of dynamic variable.REFERENCES
[1] L. Tang, T. Li, and C.-S. Perng, “LogSig: Generating system events 	from raw textual logs,” in CIKM, 2011, pp. 785–794.
[2] Tao Li, Yexi Jiang, Chunqiu Zeng, Bin Xia, Zheng Liu, Wubai Zhou, et al, “Flap: An end-to-end event log analysis platform for system management,” in Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2017, pp. 1547–1556.[3] S. Khatuya, N. Ganguly, J. Basak, M. Bharde and B. Mitra, “ADELE: anomaly detection from event log empiricism,” IEEE INFOCOM 2018 -IEEE Conference on Computer Communications, 2018, pp. 2114-2122. [4] T. Barik, R. DeLine, S. Drucker and D. Fisher, “The bones of the system: A case study of logging and telemetry at Microsoft,” 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C), 2016, pp. 92-101.[5] Wei Xu, Ling Huang, Armando Fox, David Patterson, and Michael I.
Jordan, “Detecting large-scale system problems by mining console logs,”in Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles (SOSP ’09), 2009, pp. 117–132.
[6] Tatsuaki Kimura; Keisuke Ishibashi; Tatsuya Mori; Hiroshi Sawada; Tsuyoshi Toyono; Ken Nishimatsu, et al, “Spatio-temporal factorization of log data for understanding network events,” IEEE INFOCOM 2014- IEEE Conference on Computer Communications, 2014, pp. 610-618.[7] D. Yuan, H. Mai, W. Xiong, L. Tan, Y. Zhou, and S. Pasupa-thy,“Sherlog: Error diagnosis by connecting clues from run-time logs,”SIGARCH Comput. Archit. News, vol. 38, no. 1, pp. 143–154, Mar. 2010.
[8] C. H. Kim, J. Rhee, H. Zhang, N. Arora, G. Jiang, X. Zhang, and D. Xu, “Introperf: Transparent context-sensitive multilayer performance inference using system stack traces,” SIGMETRICS Perform. Eval. Rev., vol. 42, no. 1, pp. 235–247, Jun. 2014.[9] K. Zhang, J. Xu, M. R. Min, G. Jiang, K. Pelechrinis and H. Zhang,“Automated IT system failure prediction: A deep learning approach,”2016 IEEE International Conference on Big Data (Big Data), 2016, pp. 1291-1300.
[10] P. He, J. Zhu, Z. Zheng and M. R. Lyu, “Drain: An online log parsing approach with fixed depth tree,” 2017 IEEE International Conference on Web Services (ICWS), 2017, pp. 33-40.[11] Makanju, A.A., Zincir-Heywood, A.N., Milios, E.E., “Clustering event logs using iterative partitioning,” in Proceedings of the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2009, pp. 1255–1264.
[12] R. Vaarandi and M. Pihelgas, “LogCluster - A Data Clustering and Pattern Mining Algorithm for Event Logs,” in Proceedings of the 11th International Conference on Network and Service Management (CNSM 2015), 2015, pp. 1–7.[13] P. He, J. Zhu, S. He, J. Li and M. R. Lyu, “An evaluation study on log parsing and its use in log mining,” 2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2016, pp. 654-661.
[14] Jieming Zhu, Shilin He, Jinyang Liu, Pinjia He, Qi Xie, Zibin Zheng, and Michael R Lyu, “Tools and benchmarks for automated log pars-ing,” in Proceedings of the 41st International Conference on Software Engineering(ICSE), 2019, pp. 121–130.[15] A. Oliner and J. Stearley, “What Supercomputers Say: A Study of 	Five System Logs,” 37th Annual IEEE/IFIP International Conference 	on Dependable Systems and Networks (DSN’07), 2007, pp. 575-584. [16] B. Schroeder and G. A. Gibson, “Disk failures in the real world: What 	does an MTTF of 1, 000, 000 hours mean to you?” in 5th USENIX 	Conference on File and Storage Technologies, FAST 2007, February 	13-16, 2007, San Jose, CA, USA, 2007, pp. 1–16.[17] H. Mi, H. Wang, Y. Zhou, R. Lyu, and H. Cai, “Toward fine-grained, unsupervised, scalable performance diagnosis for production cloud com-puting systems,” IEEE Transactions on Parallel and Distributed Systems, vol. 24, pp. 1245–1255, 2013.
[18] W. Xu, L. Huang, A. Fox, D. A. Patterson, and M. I. Jordan, “Detecting 	large-scale system problems by mining console logs,” in SOSP, 2009, 	pp. 117–132[19] Wei Xu, Ling Huang, Armando Fox, David Patterson, and Michael 	Jordan, “Largescale system problem detection by mining console logs,”	in Proceedings of SOSP’09, 2009.
[20] W. Xu, L. Huang, and M. I. Jordan, “Experience mining google’s 	production console logs.” in SLAML, 2010.
[21] Z. M. Jiang, A. E. Hassan, P. Flora and G. Hamann, “Abstracting Execution Logs to Execution Events for Enterprise Applications (Short Paper),” 2008 The Eighth International Conference on Quality Software, 2008, pp. 181-186.[22] H. Dai, H. Li, C. S. Chen, W. Shang and T. Chen, “Logram: Efficient log parsing using n-Gram dictionaries,” in IEEE Transactions on Software Engineering, 2020.
[23] Q. Fu, J. Lou, Y. Wang and J. Li, “Execution anomaly detection in distributed systems through unstructured log analysis,” 2009 Ninth IEEE International Conference on Data Mining, 2009, pp. 149-158.[24] H. Hamooni, B. Debnath, J. Xu, H. Zhang, G. Jiang, and A. Mueen,“LogMine: fast pattern recognition for log analytics,” in CIKM, 2016, pp. 1573–1582.
[25] S. Messaoudi, A. Panichella, D. Bianculli, L. Briand, and R. Sasnauskas,“A search-based approach for accurate identification of log message formats,” in ICPC, 2018.
[26] M. Mizutani, “Incremental mining of system log format,” in SCC, 2013, 	pp. 595–602.[27] A. Makanju, A. N. Zincir-Heywood and E. E. Milios, “A Lightweight Algorithm for Message Type Extraction in System Application Logs,”in IEEE Transactions on Knowledge and Data Engineering, vol. 24, no. 11, pp. 1921-1936, Nov. 2012.
[28] D’Souza SC, “LSTM neural network for textual ngrams,” 	, 2018.
[29] He Shilin, Zhu Jieming, He Pinjia and Michael R. Lyu, “Loghub: A Large Collection of System Log Datasets towards Automated Log Analytics,” arXiv preprint arXiv: 2008.06448, 2020.[30] Sasho Nedelkoski, Jasmin Bogatinovski, Alexander Acker, Jorge Car-doso, Odej Kao. Self-supervised Log Parsing.arXiv preprint arXiv: 1907.12412, 2019.