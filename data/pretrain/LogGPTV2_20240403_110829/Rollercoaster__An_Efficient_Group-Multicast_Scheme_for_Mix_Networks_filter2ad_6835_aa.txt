title:Rollercoaster: An Efficient Group-Multicast Scheme for Mix Networks
author:Daniel Hugenroth and
Martin Kleppmann and
Alastair R. Beresford
Rollercoaster: An Efficient Group-Multicast 
Scheme for Mix Networks
Daniel Hugenroth, Martin Kleppmann, and Alastair R. Beresford, 
University of Cambridge
https://www.usenix.org/conference/usenixsecurity21/presentation/hugenroth
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Rollercoaster: An Efﬁcient Group-Multicast
Scheme for Mix Networks
Daniel Hugenroth
Martin Kleppmann
Alastair R. Beresford
University of Cambridge
University of Cambridge
University of Cambridge
Abstract
Mix network designs such as Loopix provide strong metadata
anonymity guarantees that are crucial across many applica-
tions. However, because they limit the rate at which messages
can be sent by each user, they incur high delays when send-
ing many messages to multiple recipients – for instance, in
decentralised collaborative apps.
In this paper we present an efﬁcient multicast scheme
named Rollercoaster that reduces the time for delivering a
message to all members of a group of size m from O(m) to
O(log m). Rollercoaster can be deployed without modiﬁca-
tions to the underlying mix network, allowing it to beneﬁt
from the anonymity set provided by existing users. We fur-
ther develop an extension that achieves the same asymptotic
guarantees in the presence of unreliable group members.
While the scheme is applicable to many mix network de-
signs, we evaluate it for the Loopix network, which is the most
advanced and practical design to date. For this evaluation we
developed a network simulator that allows fast, reproducible,
and inspectable runs while eliminating external inﬂuences.
1 Introduction
Information security often focuses on the conﬁdentiality and
integrity of electronic messages. However, metadata privacy
is frequently also important since merely knowing the parties
involved in a communication can reveal sensitive information
and stigmatise groups and individuals. For example, revealing
the names of people contacting a sexual health clinic may
discourage individuals from seeking treatment; and potential
whistle-blowers may be dissuaded from disclosing illegal or
unethical behaviour to a journalist. Strong metadata privacy is
critical across many domains, not just healthcare and journal-
ism, but also in diplomatic services and military operations.
Protecting metadata privacy is not merely a theoretical
requirement: we ﬁnd ourselves in an era of mass-surveillance
by well-funded state actors as well as pervasive data collection
by private companies and service providers. In this reality
there are many online applications where protecting metadata
privacy is of practical importance.
The Tor [1] network is perhaps the best known example of a
system that provides metadata privacy. Tor brought so-called
anonymous communication networks to a large audience by
providing low-latency communication and anonymous access
to the Internet. However, while the Tor network provides high
throughput and low latency, it does not provide metadata pri-
vacy in the presence of a global adversary who can observe
all communication [2]. Mix network designs and broadcast
schemes provide metadata privacy in the face of global adver-
saries, however they do so at the cost of signiﬁcantly higher
latency and lower overall throughput. A prominent recent
medium-latency mix network design, which protects metadata
privacy in the presence of a global adversary, is Loopix [3].
Many collaborative apps are in use today, including group
messaging services such as WhatsApp, Signal, and iMessage;
productivity tools such as Google Docs and Ofﬁce365; and
ﬁle sharing applications such as Dropbox and Box. At present,
no mainstream collaborative apps provide metadata privacy.
Hence, in this paper, we present a new architecture that en-
ables strong metadata privacy for such applications.
We consider forms of collaboration in which a ﬁle or con-
versation thread is shared by a group of collaborators, and
any update to it needs to be shared with all group members.
Group messaging and collaboration can share the same un-
derlying infrastructure [4]. In collaborative editing applica-
tions individual update messages are usually small and fre-
quent [5]. Such apps therefore require an efﬁcient, reliable,
and timely method of sending messages to all members of a
group. However, the original design of Loopix provides only
one-to-one (unicast) messages, and no built-in mechanism
for group communication (multicast). In this paper we show
that naïvely implementing multicast in an anonymity network
like Loopix results in signiﬁcant overhead in terms of latency
and throughput, typically exceeding the latency required to
provide good user experience. We therefore extend Loopix to
support low-latency group communication while preserving
metadata privacy.
USENIX Association
30th USENIX Security Symposium    3433
This paper makes the following contributions:
• An anonymous group communication scheme called
Rollercoaster, which achieves a group multicast latency
of O(log m) for groups of size m, while ensuring strong
metadata privacy against an active global adversary (§5).
In our evaluation Rollercoaster achieves a 99th percentile
(p99) latency of 12.3 seconds for groups larger than 100
users, whereas the default implementation of Loopix
incurs a latency of 75.6 s (§6.2). Rollercoaster works by
involving many group members, not just the sender of a
message, in the task of disseminating a message.
• An extension to the Rollercoaster scheme that adds fault-
tolerance to gracefully handle the fact that some group
members may be ofﬂine, while preserving scalability
(§5.2). Even in the presence of faulty nodes, Roller-
coaster performs better than default Loopix for mean,
p90, and p99 latency. Our solution reduces p99 latency
to 21.9 s compared to 103.3 s for default Loopix (§6.3)
when evaluated against realistic connectivity patterns.
• The design of the MultiSphinx packet format that allows
limited multicast by designated mix nodes while preserv-
ing strong metadata privacy guarantees (§5.4).
• A deterministic, open-source simulator for Loopix and
Rollercoaster that allows efﬁcient, inspectable, and re-
producible performance evaluations. We use it to empir-
ically compare the latency properties of both systems.
Compared to evaluations using a real network, it reduces
the required CPU hours by a factor of 4500×, allowing
us to explore signiﬁcantly more scenarios and parameter
choices (§6.1).
2 Threat Model and Goals
Our work guarantees strong anonymity against sophisticated
adversaries while providing an efﬁcient, low-latency, and
fault-tolerant group-multicast anonymity network.
Assumptions We assume three types of participants in a
mix network based on the Loopix model [3]: Users are mem-
bers of one or more groups; group members can broadcast
and receive messages to and from all members of the group.
Provider nodes act as the users’ entry points to the anonymity
network; all communication to or from a speciﬁc user ﬂows
through their provider. Mix operators manage a mix node in
the core of the network; mix nodes receive messages from
other mix nodes or providers and send messages to other mix
nodes or providers. Mix nodes do not communicate directly
with users. For further details on the Loopix model and how
these participants communicate, see Section 3.
Security and Anonymity We assume a global active adver-
sary who can observe all trafﬁc, manipulate trafﬁc to remove
messages and insert new ones, as well as corrupt a subset of
mix nodes and providers. As in Loopix, sending a message to
a Rollercoaster user requires that the sender knows both the
addresses and public keys for their provider, the recipient, the
recipient’s provider, and the mix nodes.
Our scheme provides message conﬁdentiality and integrity
as well as the same strong metadata privacy guarantees as
Loopix, including sender-recipient unlinkability (preventing
an adversary from deducing which users are communicating
with each other) and sender/recipient online unobservability
(preventing an adversary from deducing which users are cur-
rently participating in any communication). More details on
these and further deﬁnitions of metadata privacy are given
by Pﬁtzmann and Hansen [6]. In addition we provide mem-
bership unobservability (preventing anyone outside the group
from determining group membership or group size). We as-
sume a group is composed of trusted members and therefore
we do not provide unlinkability or unobservability guarantees
against an attacker who compromises or colludes with group
members. The goal of the attacker is to break the conﬁdential-
ity, integrity, or metadata privacy guarantees.
Our scheme supports efﬁcient communication for group
sizes of two or more and therefore we handle pairwise and
group communication in the same way. An attacker cannot
distinguish between two-party communication and communi-
cation in a larger group.
Application Requirements Low latency is often a require-
ment in group communication. For example, user studies have
highlighted the negative implications of high network delays
in collaborative editing. One previous study [7] asked a group
of participants to transcribe audio lectures using collaborative
text editing software. The researchers investigated the effect
of communication latency by repeating the experiment multi-
ple times and varying artiﬁcial delay on all communication
between participants. A delay of 10 seconds or more had a
signiﬁcant impact in their study, with an increase of error rates
and content redundancy by more than 50%. We therefore set
our target for group multicast latency at 10 seconds for group
sizes of up to 100 people. The group size is motivated by the
active editor limit of Google Docs (100 users) and Microsoft
Sharepoint (99 users). We further require the latency to grow
sub-linearly with the size of the group, allowing effective col-
laboration in large groups. In many multi-user applications,
a large fraction of the data is generated by a small fraction
of the users (a trend that is known as participation inequal-
ity [8]), and our scheme fares well in a system with such a
distribution of activity.
Ofﬂine support is required since mobile devices do not
always have connectivity. As in the Loopix design, provider
nodes in Rollercoaster store messages on behalf of the user
until the user is next online and able to download them.
3434    30th USENIX Security Symposium
USENIX Association
User A
User B
P1
User C
User D
P2
Layer 1
Layer 2
Layer 3
Figure 1: Schematic for a Loopix network with four users
(A, B, C, D), two providers (P1, P2), and a three-layer mix
network. Each node of mix layer L is connected to each node
of layer L + 1. The solid blue arrows depict one possible path
for a payload or drop message from user B to user D. The
dashed red line represents loop trafﬁc induced by a mix node.
On mobile devices, the frequency of sending network pack-
ets has a large impact on energy efﬁciency. Every transmission
promotes the mobile network connection from idle to an ac-
tive sending state after which it remains in a tail state for a few
seconds [9, §5.1]. During the active sending/receiving state
(1680 mW, data for LTE) and the tail state (1060 mW) the
power consumption is higher than during idle (594 mW) [9,
Table 3]. Every promotion from idle to active comes with addi-
tional energy costs. Therefore, sending few but large messages
with long intra-packet pauses is advantageous for battery life
on mobile devices, even if the total volume of data transmitted
is the same. On the other hand, smaller and more frequent
messages lead to lower latency.
We assume that the group membership is ﬁxed and known
to all members; we leave the problems of group formation
and adding or removing group members for future work.
3 Background
Our work builds on Loopix, which we introduce in this section.
Section 3.2 introduces multicast as it is used in this paper.
3.1 Loopix
Loopix is a mix network [10]: messages are sent via several
mix nodes to conceal their sender and destination. The route
is chosen by the sender and encoded in message headers.
Several mix network designs have been proposed: for exam-
ple, in the threshold approach, a mix node waits until a ﬁxed
number of messages have arrived, and then forwards them to
their next hops in a random order. A mix node must wait for
a sufﬁcient number of messages to arrive before forwarding
them to ensure there is signiﬁcant uncertainty in the mapping
between incoming and outgoing messages. Unfortunately,
this batching process can lead to high latency.
message passes through a node, it delays that message by a
duration dµ. For each hop the sender independently chooses
dµ randomly from the exponential distribution with rate pa-
rameter λµ, and includes that value in the message header.
Moreover, Loopix ensures that the timings of messages
sent by any node can be modelled as a Poisson process (i.e.
the interval between messages is exponentially distributed).
Applying exponentially distributed random delay to a Poisson
process yields another Poisson process; moreover, aggregat-
ing the events from several Poisson processes yields another
Poisson process [3]. Message senders can adjust λµ to bal-
ance the trade-off between reducing latency (increase λµ) and
strengthening anonymity (decrease λµ).
An individual mix node may be compromised by the ad-
versary, allowing it to learn the mapping between input and
output messages. However, a mix network provides strong
anonymity guarantees when at least one of the mix nodes on
the message’s path is trustworthy. Cover trafﬁc is added to
hide communication patterns and to prevent an attacker from
inferring message senders and recipients merely by looking
at the set of messages sent and received over time.
Loopix arranges mix nodes in l layers (where l = 3 is a
typical choice), forming a stratiﬁed topology. In this arrange-
ment, each node is connected to all nodes of the next layer,
and a message ﬂows through one mix node in each layer. The
system’s message throughput capacity can be increased by
adding more nodes to each layer.
Access to the mix network is mediated by provider nodes
(see Figure 1). Providers receive and store incoming messages
for each user in an inbox, allowing the end-user device to be
ofﬂine and download messages from the provider later. These
messages are still end-to-end encrypted and providers cannot
distinguish them from cover trafﬁc (see below). The provider
nodes are a required component if the end-user device (e.g.
smartphone) is not always connected to the Internet. More-
over, the provider nodes support revenue generation since the
provider can charge users to cover operating costs without
knowing who their customers are communicating with.
3.1.1 Messages and Trafﬁc
All Loopix messages are encrypted and padded to a ﬁxed size1
using the Sphinx [11] mix message format. The Sphinx mes-
sage format uses layered encryption and ensures the contents
of messages change at every hop in the mix network. Fixed-
size padding renders messages containing payload trafﬁc in-
distinguishable from cover trafﬁc messages. This approach
means the attacker cannot correlate incoming and outgoing
messages based on payload contents or length. Loopix uses
three types of messages:
Drop messages are the primary form of cover trafﬁc. They
are sent by users as a Poisson process with rate parameter λd
1The implementation accompanying the original Loopix paper uses a
Loopix takes a different approach to mixing: whenever a
message size of 1024 bytes, including headers and overheads.
USENIX Association
30th USENIX Security Symposium    3435
dp ∼ exp(λp) Delay between successive payload messages
dd ∼ exp(λd) Delay between successive drop messages
dl ∼ exp(λl) Delay between successive loop messages
dµ ∼ exp(λµ) Delay applied on message forwarding
∆pull (constant) Polling interval for checking inboxes
dM ∼ exp(λM) Delay between successive loop messages
sent by mix nodes
Table 1: Delays are either constant or chosen from an ex-
ponential (exp) distribution with the given parameter. Our
notation slightly differs from the original paper.
and addressed to a randomly chosen user’s inbox. They follow
the full transport route from the sender’s provider through all
layers of the mix network to the recipient’s device. Recipients
download the message from their inboxes, decrypt it, and only
then identify it as drop trafﬁc and discard it.
Payload messages contain application data and are sent as
a Poisson process with rate parameter λp. When an user sends
multiple messages in quick succession, they are added to a
send queue at the client and forwarded to the user’s provider
at an average rate of λp. While they are in the payload send
queue, messages experience delay dQ. When there are no
payload messages waiting to be sent, a drop message is sent
instead. Keeping the send rate constant prevents irregular
trafﬁc patterns that may reveal whether a user is currently
actively communicating.
Loop messages defend against active attacks such as
(n − 1) attacks [12]. In such an attack an adversary tries to
follow the path of a message by blocking all other incoming
trafﬁc for the mix node or replacing it with its own. Loop
messages are injected by both users (at rate λl) and mix nodes
(at rate λM); these messages travel in a loop though all mix
layers, via a provider node, back to the sender. If the loop
messages sent by a node fail to be delivered back to that node,
it can suspect that an active attack is taking place and employ
countermeasures as described in the Loopix paper [3, §4.2.1].
Choosing suitable rate parameters depends heavily on
the application behaviour, the message size, and the capac-
ity of the underlying network. In the original Loopix paper
the values of the parameters λp, λd, and λl range from one
message per second to one message per minute. With a to-