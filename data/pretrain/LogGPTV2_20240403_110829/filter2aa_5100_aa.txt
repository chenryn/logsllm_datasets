# 认证 & 授权
> 注 : 笔记中拓扑图 xmind 源文件在其图片目录下
---
**相关文章**
- [看完这篇 Session、Cookie、Token，和面试官扯皮就没问题了](https://www.cnblogs.com/cxuanBlog/p/12635842.html)
- [还分不清 Cookie、Session、Token、JWT？](https://zhuanlan.zhihu.com/p/164696755)
---
## 基础
**什么是认证(Authentication)**
验证当前用户的身份，证明“你是你自己”
场景
- 用户名密码登录
- 邮箱发送登录链接
- 手机号接收验证码
- 只要你能收到邮箱/验证码，就默认你是账号的主人
**什么是授权(Authorization)**
用户授予第三方应用访问该用户某些资源的权限
场景
- cookie
- token
- SSO
- OAuth
---
## Cookie
**什么是 Cookie**
Cookie 指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
HTTP 协议中的 Cookie 包括 Web Cookie 和浏览器 Cookie，它是服务器发送到 Web 浏览器的一小块数据。服务器发送到浏览器的 Cookie，浏览器会进行存储，并与下一个请求一起发送到服务器。通常，它用于判断两个请求是否来自于同一个浏览器，例如用户保持登录状态。
Cookie 主要用于下面三个目的
- 会话管理
    - 登陆、购物车、游戏得分或者服务器应该记住的其他内容
- 个性化
    - 用户偏好、主题或者其他设置
- 追踪
    - 记录和分析用户行为
**Cookie 的特点**
- HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息）：每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 cookie 或者 session 去实现。
- cookie 存储在客户端： cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。
- cookie 是不可跨域的： 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，一级域名和二级域名之间是允许共享使用的（靠的是 domain）。
**Cookie 的类型**
有两种类型的 Cookies，一种是 Session Cookies，一种是 Persistent Cookies，如果 Cookie 不包含到期日期，则将其视为会话 Cookie。会话 Cookie 存储在内存中，永远不会写入磁盘，当浏览器关闭时，此后 Cookie 将永久丢失。如果 Cookie 包含有效期 ，则将其视为持久性 Cookie。在到期指定的日期，Cookie 将从磁盘中删除。
- 会话 Cookies
    会话 Cookie 有个特征，客户端关闭时 Cookie 会删除，因为它没有指定 Expires 或 Max-Age 指令。
    但是，Web 浏览器可能会使用会话还原，这会使大多数会话 Cookie 保持永久状态，就像从未关闭过浏览器一样。
- 永久性 Cookies
    永久性 Cookie 不会在客户端关闭时过期，而是在特定日期（Expires）或特定时间长度（Max-Age）外过期。例如
    ```
    Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;
    ```
**HttpOnly 的作用**
会话 Cookie 中缺少 HttpOnly 属性会导致攻击者可以通过程序(JS脚本、Applet等)获取到用户的 Cookie 信息，造成 XSS.
HttpOnly 是微软对 Cookie 做的扩展，该值指定 Cookie 是否可通过客户端脚本访问。
如果在 Cookie 中没有设置 HttpOnly 属性为 true，可能导致 Cookie 被窃取。窃取的 Cookie 可以包含标识站点用户的敏感信息，如 ASP.NET 会话 ID 或 Forms 身份验证票证，攻击者可以重播窃取的 Cookie，以便伪装成用户或获取敏感信息，进行跨站脚本攻击等。
**Cookie 的作用域**
Domain 和 Path 标识定义了 Cookie 的作用域：即 Cookie 应该发送给哪些 URL。
Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前主机 (不包含子域名)。如果指定了 Domain，则一般包含子域名。
例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。
例如，设置 Path=/docs，则以下地址都会匹配：
- /docs
- /docs/Web/
- /docs/Web/HTTP
---
## Session
**什么是 Session**
客户端请求服务端，服务端会为这次请求开辟一块内存空间，这个对象便是 Session 对象，存储结构为 ConcurrentHashMap。Session 弥补了 HTTP 无状态特性，服务器可以利用 Session 存储客户端在同一个会话期间的一些操作记录。
session，指的是客户端与服务端维持的一个有状态会话，一种记录服务器和客户端会话状态的机制.
**Session 如何判断是否是同一会话**
- 服务器第一次接收到请求时，开辟了一块 Session 空间（创建了 Session 对象），同时生成一个 sessionId ，并通过响应头的 `Set-Cookie：JSESSIONID=XXXXXXX` 命令，向客户端发送要求设置 Cookie 的响应；
- 客户端收到响应后，在本机客户端设置了一个 `JSESSIONID=XXXXXXX` 的 Cookie 信息，该 Cookie 的过期时间为浏览器会话结束；
- 接下来客户端每次向同一个网站发送请求时，请求头都会带上该 Cookie 信息（包含 sessionId），请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息发送给服务端
- 然后，服务器通过读取请求头中的 Cookie 信息，获取名称为 JSESSIONID 的值，得到此次请求的 sessionId，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。
**Session 的缺点**
Session 机制有个缺点，比如 A 服务器存储了 Session，就是做了负载均衡后，假如一段时间内 A 的访问量激增，会转发到 B 进行访问，但是 B 服务器并没有存储 A 的 Session，会导致 Session 的失效。
**和 Cookie 的关系**
HTTP 协议是一种无状态协议，即每次服务端接收到客户端的请求时，都是一个全新的请求，服务器并不知道客户端的历史请求记录；Session 和 Cookie 的主要目的就是为了弥补 HTTP 的无状态特性。
session 可以基于 cookie 实现，session 存储在服务器端，sessionId 会被存储到客户端的 cookie 中.
cookie 是一个 http 头部，而 session 是一个虚拟概念。cookie 可以用于实现 session，也可以不。cookie 的用法远大于 session。反过来说，session 也未必需要用 cookie 实现。
---
## HTTP_Basic_Auth
**相关文章**
- [一文读懂HTTP Basic身份认证](https://juejin.im/entry/6844903586405564430)
- [HTTP基本认证](https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81)
- [说说HttpClient三种Http Basic Authentication认证方式](https://cloud.tencent.com/developer/article/1499759)
- [HTTP Basic Auth 是怎么样工作的](https://cjting.me/2018/03/31/how-http-basic-auth-work/)
**什么是 HTTP_Basic_Auth**
HTTP Basic Auth 是 HTTP 提供的一种验证方式，因为明文传输用户名和密码，非 HTTPS 环境下很不安全，一般用的非常少。但是在某些情况下用一用还是非常方便的，比如，一些静态站点例如文档系统可以使用 HTTP Basic Auth 进行简单的权限验证。
**优点**
- 基本认证的一个优点是基本上所有流行的网页浏览器都支持基本认证。基本认证很少在可公开访问的互联网网站上使用，有时候会在小的私有系统中使用（如路由器网页管理接口）。后来的机制 HTTP 摘要认证是为替代基本认证而开发的，允许密钥以相对安全的方式在不安全的通道上传输。
- 程序员和系统管理员有时会在可信网络环境中使用基本认证，使用 Telnet 或其他明文网络协议工具手动地测试 Web 服务器。这是一个麻烦的过程，但是网络上传输的内容是人可读的，以便进行诊断。
**流程**
HTTP Basic Auth 使用两个 HTTP Header 实现，分别是 WWW-Authenticate 和 Authorization。
流程如下：
- 客户端请求服务器页面，服务器返回 401 以及 WWW-Authenticate: Basic realm="site"。
- 浏览器弹出对话框，提示用户输入用户名和密码。
- 浏览器再次请求页面，携带 Authorization: Basic ，其中，str=base64(username:password)。
- 服务器返回正常页面。
base64 只是一个编码过程，而不是加密过程，因此，HTTP Basic Auth 是在明文传输用户名和密码，中间设备很容易通过检查数据包获取用户名和密码。
**Realm**
WWW-Authenticate 这个头携带了一个 realm 属性，这个属性用来标注页面所属的区域,指当前认证的保护范围,一般情况下不用在意，随便填写或者不填写都可以。
但是，如果你的网站有两个子目录，每个子目录有自己的用户名和密码的话，realm 属性就比较重要了，这个属性会影响浏览器的密码自动填充过程。
同一个 server，访问受限的资源多种多样，比如资金信息、机密文档等。可以针对不同的资源定义不同的 realm，并且只允许特定的用户访问。跟 Linux 下的账户、分组体系很像，如下例子所示。
两个 URL，用户名和密码不相同。
- xxx.com/a : username: a, password: a, realm: whatever
- xxx.com/b : username: b, password: b, realm: whatever
1. 用户访问 /a，浏览器提示输密码，成功进入，浏览器将密码和 realm=whatever 关联
2. 用户访问 /b，浏览器请求，发现 401，同时 realm=whatever，默认使用上一次输入的密码填充
3. 还是 401，浏览器弹框提示用户输入，然后更新 realm=whatever 的密码关联
4. 用户访问 /a，浏览器自动使用 realm=whatever的密码进行填充（应该是缓存了相关信息，知道 /a 需要密码），收到 401，弹框提示用户输入，更新 realm=whatever 的密码关联
5. 用户访问 /b，和上面的流程一样，还是会导致弹框提示用户输入用户名和密码
也就是说，如果两个子目录的用户名和密码不一样，但是 realm 一样的话，会导致在两个子目录进行切换时，不停地输入用户民和密码。
如果 realm 不一样的话，就没有这个问题了，因为浏览器使用 realm 来关联用户名和密码。
---
## JWT