This attack class deals with the capabilities of malicious
documents to silently modify form data, to write to local ﬁles
on the host’s ﬁle system, or to show a different content based
on the application that is used to open the document.
1) Form Modiﬁcation: The idea of this attack is as follows:
similar to “form data leakage” as described above, the victim
obtains a harmlessly looking PDF document from an attacker
controlled source, for example, a remittance slip or a tax
form. The goal of the attacker is to dynamically, and without
knowledge of the victim, manipulate form ﬁeld data. This can
be achieved by crafting the malicious document in such a
way that it “modiﬁes itself”, and changes certain form ﬁelds
immediately before it is printed or saved. Interesting form
ﬁelds to manipulate could be, for example, the recipient of
a wire transfer or the declarations regarding taxable income.
Technically, form ﬁeld values can be set using an ImportData
action which imports form data from an external source or an
embedded ﬁle, or with JavaScript included in the document.
This novel attack technique can be used by an attacker to either
get the victim into trouble (e.g., tax fraud suspicion) or to gain
ﬁnancial advantages (e.g., by adding herself as recipient of a
tax refund).
Dangerous path
Catalog ⇒ (on print) ⇒ ImportData ⇒ embedded ﬁle
2) File Write Access: As previously described, the PDF
standard enables documents to submit form data to external
webservers. However,
technically the webserver’s URL is
11For NTLMv2, it is estimated that cracking eight character passwords of
any complexity takes around 2,5 hrs on a modern GPU [17]. Previous versions
(NTLMv1, LM) are trivial to crack and can be considered as broken [40].
12Microsoft introduced the possibility to deﬁne “NTLM blocking” in the
Windows security policy, but is has to be actively enabled by administrators.
Furthermore, some ISPs block port 445, however this cannot be relied on.
13Note that the \ character must be escaped in PDF strings, leading to \\.
deﬁned using a PDF File Speciﬁcation. This ambiguity in the
standard may be interpreted by implementations in such a way
that they enable documents to submit PDF form data to a
local ﬁle, thereby writing to this ﬁle. Furthermore, there are
various JavaScript functions which allow to write to local ﬁles
on disk. If successful, this feature can be used to overwrite
arbitrary ﬁles on the victim’s ﬁle system and thereby purge
their content. Furthermore, write access to local ﬁles may even
be escalated to code execution if the attacker has write access
to certain startup scripts (e.g., autoexec.bat on Windows,
.bashrc on macOS and Linux). JavaScript based attacks to
write to local ﬁles have previously been shown, for example,
in CVE-2018-14280 and CVE-2018-14281 for Foxit Reader.
We evaluate write access for a broad range of standard PDF
and JavaScript functions. To the best of our knowledge, we
are the ﬁrst to propose the attack variant based on PDF forms
that automatically submit data to a local ﬁle.
Dangerous path
[All events] ⇒ SubmitForm ⇒ local ﬁle
3) Content Masking: The goal of this attack is to craft a
document that renders differently, depending on the applied
PDF interpreter. This can be used, for example,
to show
different content to different reviewers, to trick content ﬁlters
(AI-based machines as well as human content moderators),
plagiarism detection software, or search engines, which index
a different text than the one shown to users when opening the
document. Content masking attacks using polyglot ﬁles have
been shown in the past by [35, 10]; for example, PDF ﬁles that
are also a valid JPEG images, if opened by image processing
software. Recently, [39] presented “PDF mirage”, which ap-
plies font encoding to present a different displayed content to
humans than to text exﬁltration software. We propose a new
approach which targets edge cases in the PDF speciﬁcation,
leading to different parts of the document actually being
processed by different implementations. To achieve this, we
systematically studied the PDF standard for ambiguities at the
syntax and structural level, as documented below.
• Stream confusion. It is unclear how content streams are
parsed if their Length value does not match the offset of
the endstream marker, or if syntax errors are introduced.
• Object confusion. An object can overlay another object.
The second object may not be processed if it has a
duplicate object number, if it is not listed in the XRef
table, or if other structural syntax errors are introduced.
• Document confusion. A PDF ﬁle can contain yet another
document (e.g., as embedded ﬁle), multiple XRef tables,
etc., which results in ambiguities on the structural level.
• PDF confusion. Objects before the PDF header or after
an EOF marker may be processed by implementations,
introducing ambiguities in the outer document structure.
There are numerous variants of the four test classes men-
tioned above, resulting in a total of 94 different edge cases.
Dangerous path
None (document structure level ﬂaws)
6
1
2
3
4
5
6
7
8
9
10
11
12
D. Code Execution: Launch Action
The goal of this attack is to execute attacker controlled code.
This can be achieved by silently launching an executable ﬁle,
embedded within the document, to infect the host with malware.14
The PDF speciﬁcation deﬁnes the Launch action, which
allows documents to launch arbitrary applications. The ﬁle
to be launched can either be speciﬁed by a local path, a
network share, a URL, or a ﬁle embedded within the PDF
document itself. The standard does not provide any security
considerations regarding this obviously dangerous feature; it
even speciﬁes how to pass command line parameters to the
launched application. Therefore,
it can be said that PDF
offers “command execution by design” – if the standard is
implemented in a straightforward manner. An example of a
malicious document which contains an embedded executable
ﬁle (evil.exe) that is launched once the document is opened
(OpenAction) is depicted in Listing 3.
1 0 obj
> >>
/OpenAction >
B. Denial-of-Service
>>
endobj
2 0 obj
>
stream
[executable code]
endstream
Listing 3. PDF document to launch an embedded executable.
The danger of Launch actions is well-known and has ﬁrst
been discussed in 2008 by Blonce et al. [13] for Acrobat
Reader. Modern PDF viewers should warn the user before
executing potentially malicious ﬁles – or stop supporting this
insecure feature at all. We extend the analysis of Blonce et
al. to a broad set of 28 modern PDF implementations and to
all potentially dangerous paths and thereby show that attack
variants leading to code execution are possible until today.
Dangerous path
[All events] ⇒ Launch ⇒ embedded/local ﬁle or URL
VII. EVALUATION
A. Denial-of-Service
In the following section, we discuss the results for DoS
attacks. Due to the large number of test cases, a fully detailed
evaluation is given in Table VI in the appendix. We classify
an application as vulnerable if it either hangs (e.g., consuming
unusually large amounts of CPU or memory) or if the program
crashes. A controlled program termination (i.e., raising an
exception before closing) is not considered as a vulnerability.
To evaluate the attacks introduced in section VI, we tested
them on 28 popular PDF processing applications that were
assembled from public software directories for the major
platforms (Windows, Linux, macOS, and Web).15 In addition
14Note that there are other methods to gain code execution (e.g., based on
memory corruption); however, they are out of scope in this paper. Our focus
is on abusing of legitimate features, not bugs in PDF viewer implementations.
15Note that some PDF applications are available for multiple platforms. In
such cases we limited our tests to the platform with the highest market share.
In the following section, we discuss the results for DoS
attacks. Due to the large number of test cases, a fully detailed
evaluation is given in Table VI in the appendix. We classify
an application as vulnerable if it either hangs (e.g., consuming
unusually large amounts of CPU or memory) or if the program
crashes. A controlled program termination (i.e., raising an
exception before closing) is not considered as a vulnerability.
1) Inﬁnite Loop: Each of the tested applications running
natively on Windows, macOS, or Linux, except PDF Studio
Viewer/Pro and Evince, was vulnerable to at least one attack
variant and could be tricked into an endless loop. It is notewor-
thy that CVE-2007-0104 still works in six applications until
today. Our novel attack variants, such as GoTo loops (9 vulner-
able), Action loops (9 vulnerable), Outline loops (9 vulnerable)
and JavaScript (13 vulnerable) cause endless loops in various
PDF interpreters. The impact is either a crash of the program,
or the application becoming completely unresponsive, often
combined with a high consumption of CPU time. Browser
based PDF viewers instead perform much better. We observed
that for Chrome, Firefox, and Opera only the current tab gets
stuck in an endless loop and becomes unresponsive, which
is why we classiﬁed the vulnerability as “limited” here. We
assume this is because modern browsers sandbox each tab and
enforce resource limits, thereby restricting the impact of, for
example, a malicious or runaway website.
2) Deﬂate Bomb: To evaluate the impact of compression
bombs, we crafted a valid PDF ﬁle containing a long string
of 10 GB of repeated characters, “AAA...”, within a Deﬂate
compressed content stream. To display this string to the user,
a PDF processing application must ﬁrst decompress it. The
maximum compression ratio that can be achieved with the
Deﬂate algorithm is 1023:1. However, the PDF ﬁle size can be
drastically reduced by applying multiple Deﬂate ﬁlters to the
same stream, resulting in an ampliﬁcation factor of 18 470 265
(i.e., 578 bytes on disk are decompressed to 10 GB in memory).
The attack resulted in memory exhaustion in 20 applications,
of which three applications crashed after a short period of time.
In various cases, the operating system slowed down noticeably
or became completely unresponsive. In contrast
to attacks
7
Version
(2019.012.20035)
(9.7.1)
(2.5.322.9)
(8.0.3.5)
(2018.4.3)
(5.5.9.2)
(2019.012.20035)
(9.7.1)
7.0.326.1
(10.0.0.1)
(2018.4.3)
(13.24.1.467)
(3.0.0.17)
(6.5.0.3929)
(5.1.36)
(11.0.16.2797)
(7.0.30.3196)
(6.8.0.3523)
(10.0.944.4)
(1.4.41)
(3.34.1)
(1.3.2)
(1.16.0)
(70.0.3538.77)
(72.0.2)
(13.1.2)
(57.0.3098.106)
(44.18362.1.0)
s
w
o
d
n
i
W
c
a
M
x
u
n
i
L
b
e
W
Application
Acrobat Reader
Foxit Reader
PDF-XChange Viewer
Perfect PDF Reader
PDF Studio Viewer
Nitro Reader
Acrobat Pro
Foxit PhantomPDF
PDF-XChange Editor
Perfect PDF Premium
PDF Studio Pro
Nitro Pro
Nuance Power PDF
iSkysoft PDF Editor
Master PDF Editor
Soda PDF Desktop
PDF Architect
PDFelement
Preview
Skim
Evince
Okular
MuPDF
Chrome
Firefox
Safari
Opera
Edge
TABLE I.
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35) Vulnerability limited
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35) Not vulnerable
s
s
e
c
c
a
e
t
i
r
w
e
l
i
F
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
g
n
i
k
s
a
m
t
n
e
t
n
o
C
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)