Any stored XSS vulnerabilities in functionality of this kind typically lead
directly to privilege escalation.
7.3.5.4 Test every instance where user-supplied data is stored and displayed
to users. Probe these for XSS and the other response injection attacks
described previously.
7.3.5.5 If you fi nd a vulnerability in which input supplied by one user is displayed
to other users, determine the most effective attack payload with which
you can achieve your objectives, such as session hijacking or request
forgery. If the stored data is displayed only to the same user from whom
it originated, try to fi nd ways of chaining any other vulnerabilities you
have discovered (such as broken access controls) to inject an attack into
other users’ sessions.
cc2211..iinndddd 883311 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 832
832 Chapter 21 n A Web Application Hacker’s Methodology
7.3.5.6 If the application allows upload and download of fi les, always probe this
functionality for stored XSS attacks. If the application allows HTML, JAR,
or text fi les, and does not validate or sanitize their contents, it is almost
certainly vulnerable. If it allows JPEG fi les and does not validate that
they contain valid images, it is probably vulnerable to attacks against
Internet Explorer users. Test the application’s handling of each fi le type
it supports, and confi rm how browsers handle responses containing
HTML instead of the normal content type.
7.3.5.7 In every location where data submitted by one user is displayed to other
users but where the application’s fi lters prevent you from performing
a stored XSS attack, review whether the application’s behavior leaves
it vulnerable to on-site request forgery.
7.4 Test for OS Command Injection
7.4.1 If any of the command injection attack strings listed in step 7.1.3 resulted
in an abnormal time delay before the application responded, this is a
strong indicator that the application is vulnerable to OS command injec-
tion. Repeat the test, manually specifying different values in the -i or
-n parameter, and determine whether the time taken to respond varies
systematically with this value.
7.4.2 Using whichever of the injection strings was found to be successful, try
injecting a more interesting command (such as ls or dir), and determine
whether you can retrieve the results of the command to your browser.
7.4.3 If you are unable to retrieve results directly, other options are open to
you:
n You can attempt to open an out-of-band channel back to your com-
puter. Try using TFTP to copy tools up to the server, using telnet or
netcat to create a reverse shell back to your computer, and using the
mail command to send command output via SMTP.
n You can redirect the results of your commands to a file within the
web root, which you can then retrieve directly using your browser.
For example:
dir > c:\inetpub\wwwroot\foo.txt
7.4.4 If you fi nd a way to inject commands and retrieve the results, you should
determine your privilege level (by using whoami or a similar command,
or attempting to write a harmless fi le to a protected directory). You
may then seek to escalate privileges, gain backdoor access to sensitive
application data, or attack other hosts that can be reached from the
compromised server.
cc2211..iinndddd 883322 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 833
Chapter 21 n A Web Application Hacker’s Methodology 833
7.4.5 If you believe that your input is being passed to an OS command of
some kind, but the attack strings listed are unsuccessful, see if you can
use the  character to direct the contents of a fi le to the command’s
input or to direct the command’s output to a fi le. This may enable you
to read or write arbitrary fi le contents. If you know or can guess the
actual command being executed, try injecting command-line parameters
associated with that command to modify its behavior in useful ways
(for example, by specifying an output fi le within the web root).
7.4.6 If you fi nd that the application is escaping certain key characters you need
to perform a command injection attack, try placing the escape character
before each such character. If the application does not escape the escape
character itself, this usually leads to a bypass of this defensive measure.
If you fi nd that whitespace characters are blocked or sanitized, you may
be able to use $IFS in place of spaces on UNIX-based platforms.
7.5 Test for Path Traversal
7.5.1 For each fuzz test you have performed, review the results generated
by the path traversal attack strings listed in step 7.1.3. You can click the
top of the payload column in Burp Intruder to sort the results table by
payload and group the results for these strings. For any cases where
an unusual error message or a response with an abnormal length was
received, review the response manually to determine whether it contains
the contents of the specifi ed fi le or other evidence that an anomalous
fi le operation occurred.
7.5.2 In your mapping of the application’s attack surface, you should have
noted any functionality that specifi cally supports the reading and writ-
ing of fi les on the basis of user-supplied input. In addition to the general
fuzzing of all parameters, you should manually test this functionality
very carefully to identify any path traversal vulnerabilities that exist.
7.5.3 Where a parameter appears to contain a fi lename, a portion of a fi le-
name, or a directory, modify the parameter’s existing value to insert an
arbitrary subdirectory and a single traversal sequence. For example, if
the application submits this parameter:
file=foo/file1.txt
try submitting this value:
file=foo/bar/../file1.txt
If the application’s behavior is identical in the two cases, it may be
vulnerable, and you should proceed to the next step. If the behavior
is different, the application may be blocking, stripping, or sanitizing
cc2211..iinndddd 883333 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 834
834 Chapter 21 n A Web Application Hacker’s Methodology
traversal sequences, resulting in an invalid fi le path. Try using the
encoding and other attacks described in Chapter 10 in an attempt to
bypass the fi lters.
7.5.4 If the preceding test of using traversal sequences within the base
directory is successful, try using additional sequences to step above
the base directory and access known fi les on the server’s operating
system. If these attempts fail, the application may be imposing vari-
ous fi lters or checks before fi le access is granted. You should probe
further to understand the controls that are implemented and whether
any bypasses exist.
7.5.5 The application may be checking the fi le extension being requested
and allowing access to only certain kinds of fi les. Try using a null byte
or newline attack together with a known accepted fi le extension in an
attempt to bypass the fi lter. For example:
../../../../../boot.ini%00.jpg
../../../../../etc/passwd%0a.jpg
7.5.6 The application may be checking that the user-supplied fi le path starts with
a particular directory or stem. Try appending traversal sequences after
a known accepted stem in an attempt to bypass the fi lter. For example:
/images/../../../../../../../etc/passwd
7.5.7 If these attacks are unsuccessful, try combining multiple bypasses,
working initially entirely within the base directory in an attempt to
understand the fi lters in place and the ways in which the application
handles unexpected input.
7.5.8 If you succeed in gaining read access to arbitrary fi les on the server,
attempt to retrieve any of the following fi les, which may enable you to
escalate your attack:
n Password files for the operating system and application
n Server and application configuration files, to discover other vulner-
abilities or fine-tune a different attack
n Include files that may contain database credentials
n Data sources used by the application, such as MySQL database files
or XML files
n The source code to server-executable pages, to perform a code review
in search of bugs
n Application log files that may contain information such as usernames
and session tokens
cc2211..iinndddd 883344 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 835
Chapter 21 n A Web Application Hacker’s Methodology 835
7.5.9 If you succeed in gaining write access to arbitrary fi les on the server,
examine whether any of the following attacks are feasible in order to
escalate your attack:
n Creating scripts in users’ startup folders
n Modifying files such as in.ftpd to execute arbitrary commands when
a user next connects
n Writing scripts to a web directory with execute permissions and call-
ing them from your browser
7.6 Test for Script Injection
7.6.1 For each fuzz test you have performed, review the results for the string
111111 on its own (that is, not preceded by the rest of the test string).
You can quickly identify these in Burp Intruder by Shift-clicking the
heading for the 111111 Grep string to group all the results containing
this string. Look for any that do not have a check in the Payload Grep
column. Any cases identifi ed are likely to be vulnerable to injection of
scripting commands.
7.6.2 Review all the test cases that used script injection strings, and identify
any containing scripting error messages that may indicate that your input
is being executed but caused an error. These may need to be fi ne-tuned
to perform successful script injection.
7.6.3 If the application appears to be vulnerable, verify this by injecting fur-
ther commands specifi c to the scripting platform in use. For example,
you can use attack payloads similar to those used when fuzzing for OS
command injection:
system(‘ping%20127.0.0.1’)
7.7 Test for File Inclusion
7.7.1 If you received any incoming HTTP connections from the target appli-
cation’s infrastructure during your fuzzing, the application is almost
certainly vulnerable to remote fi le inclusion. Repeat the relevant tests
in a single-threaded and time-throttled way to determine exactly which
parameters are causing the application to issue the HTTP requests.
7.7.2 Review the results of the fi le inclusion test cases, and identify any that
caused an anomalous delay in the application’s response. In these cases,
it may be that the application itself is vulnerable but that the resulting
HTTP requests are timing out due to network-level fi lters.
cc2211..iinndddd 883355 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 836
836 Chapter 21 n A Web Application Hacker’s Methodology
7.7.3 If you fi nd a remote fi le inclusion vulnerability, deploy a web server
containing a malicious script specifi c to the language you are targeting,
and use commands such as those used to test for script injection to verify
that your script is being executed.
8 Test for Function-Specifi c Input Vulnerabilities
In addition to the input-based attacks targeted in the preceding step, a range
of vulnerabilities normally manifest themselves only in particular kinds of
functionality. Before proceeding to the individual steps described in this sec-
tion, you should review your assessment of the application’s attack surface to
identify specifi c application functions where these defects are liable to arise,
and focus your testing on those.
Application mapping results
8.6. Back-end
8.1. SMTP 8.2. Native 8.3. SOAP 8.4. LDAP 8.5. XPath 8.7. XXE
request
injection code flaws injection injection injection injection
injection
Figure 21-9: Testing for functionality-specific input vulnerabilities
8.1 Test for SMTP Injection
8.1.1 For each request employed in e-mail–related functionality, submit each
of the following test strings as each parameter in turn, inserting your
own e-mail address at the relevant position. You can use Burp Intruder
to automate this, as described in step 7.1 for general fuzzing. These test
strings already have special characters URL-encoded, so do not apply
any additional encoding to them.
%0aCc:
%0d%0aCc:
%0aBcc:
%0d%0aBcc:
%0aDATA%0afoo%0a%2e%0aMAIL+FROM:+%0aRCPT+TO:+
cc2211..iinndddd 883366 88//1199//22001111 1122::2222::0044 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 837
Chapter 21 n A Web Application Hacker’s Methodology 837
%0aDATA%0aFrom:+%0aTo:+%0aSubject:+test%0afoo
%0a%2e%0a
%0d%0aDATA%0d%0afoo%0d%0a%2e%0d%0aMAIL+FROM:+%0d%0aRCPT
+TO:+
%0d%0aDATA%0d%0aFrom:+%0d%0aTo:+
%0d%0aSubject:+test%0d%0afoo%0d%0a%2e%0d%0a
8.1.2 Review the results to identify any error messages the application returns.
If these appear to relate to any problem in the e-mail function, investigate
whether you need to fi ne-tune your input to exploit a vulnerability.
8.1.3 Monitor the e-mail address you specifi ed to see if any e-mail messages
are received.
8.1.4 Review closely the HTML form that generates the relevant request. It
may contain clues regarding the server-side software being used. It
may also contain a hidden or disabled fi eld that is used to specify the
To address of the e-mail, which you can modify directly.
8.2 Test for Native Software Vulnerabilities
8.2.1 Test for Buffer Overfl ows
8.2.1.1 For each item of data being targeted, submit a range of long strings with
lengths somewhat longer than common buffer sizes. Target one item of
data at a time to maximize the coverage of code paths in the application.
You can use the character blocks payload source in Burp Intruder to
automatically generate payloads of various sizes. The following buffer
sizes are suitable to test:
1100
4200
33000
8.2.1.2 Monitor the application’s responses to identify any anomalies. An uncon-
trolled overfl ow is almost certain to cause an exception in the applica-
tion, although diagnosing the nature of the problem remotely may be
diffi cult. Look for any of the following anomalies:
n An HTTP 500 status code or error message, where other malformed
(but not overlong) input does not have the same effect
n An informative message indicating that a failure occurred in some
external, native code component
n A partial or malformed response being received from the server
n The TCP connection to the server closing abruptly without returning
a response
cc2211..iinndddd 883377 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 838
838 Chapter 21 n A Web Application Hacker’s Methodology
n The entire web application no longer responding
n Unexpected data being returned by the application, possibly indicat-
ing that a string in memory has lost its null terminator
8.2.2 Test for Integer Vulnerabilities
8.2.2.1 When dealing with native code components, identify any integer-based
data, particularly length indicators, which may be used to trigger integer
vulnerabilities.
8.2.2.2 Within each targeted item, send suitable payloads designed to trigger
any vulnerabilities. For each item of data being targeted, send a series
of different values in turn, representing boundary cases for the signed
and unsigned versions of different sizes of integer. For example:
n 0x7f and 0x80 (127 and 128)
n 0xff and 0x100 (255 and 256)
n 0x7ffff and 0x8000 (32767 and 32768)
n 0xffff and 0x10000 (65535 and 65536)
n 0x7fffffff and 0x80000000 (2147483647 and 2147483648)
n 0xffffffff and 0x0 (4294967295 and 0)
8.2.2.3 When the data being modifi ed is represented in hexadecimal form, send
both little-endian and big-endian versions of each test case, such as ff7f
and 7fff. If hexadecimal numbers are submitted in ASCII form, use
the same case as the application itself uses for alphabetic characters to
ensure that these are decoded correctly.
8.2.2.4 Monitor the application’s responses for anomalous events, as described
in step 8.2.1.2.
8.2.3 Test for Format String Vulnerabilities
8.2.3.1 Targeting each parameter in turn, submit strings containing long sequences
of different format specifi ers. For example:
%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n
%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s
%1!n!%2!n!%3!n!%4!n!%5!n!%6!n!%7!n!%8!n!%9!n!%10!n! etc...
%1!s!%2!s!%3!s!%4!s!%5!s!%6!s!%7!s!%8!s!%9!s!%10!s! etc...
Remember to URL-encode the % character as %25.
8.2.3.2 Monitor the application’s responses for anomalous events, as described
in step 8.2.1.2.
cc2211..iinndddd 883388 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 839
Chapter 21 n A Web Application Hacker’s Methodology 839
8.3 Test for SOAP Injection
8.3.1 Target each parameter in turn that you suspect is being processed via
a SOAP message. Submit a rogue XML closing tag, such as . If
no error occurs, your input is probably not being inserted into a SOAP
message or is being sanitized in some way.
8.3.2 If an error was received, submit instead a valid opening and closing
tag pair, such as . If this causes the error to disappear, the
application may be vulnerable.
8.3.3 If the item you submit is copied back into the application’s responses,
submit the following two values in turn. If you fi nd that either item is
returned as the other, or as simply test, you can be confi dent that your
input is being inserted into an XML-based message.