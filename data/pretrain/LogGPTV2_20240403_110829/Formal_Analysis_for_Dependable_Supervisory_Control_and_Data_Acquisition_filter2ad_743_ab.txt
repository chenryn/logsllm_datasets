some technical failures, cyber attacks (DoS), or a link failure
toward the device. Node i is a Boolean variable that denotes
whether device i is available or not.
Similarly,
To achieve end-to-end security, the communicating devices
must agree in their cryptographic (authentication and encryp-
tion) properties. A device can support none, one, or multiple
cryptographic properties. We model the cryptographic proper-
ties of a device (e.g., i) using Crypt i as a conjunction of one
or more cryptosecurity proﬁles (CryptType i,ks). Each crypto
proﬁle (K, e.g., CryptType i,k = K) speciﬁes an algorithm
(CAlgoK) and a key length (CKey K).
the communication protocols supported by a
device are speciﬁed using CommProtoi. Typically, there are
ICS-speciﬁc protocols (e.g., modbus, DNP3, etc.) for com-
munication. The IP addresses of an RTU is speciﬁed using
IpAddr i. It is worth mentioning that the ID is enough to iden-
tify a device for reachability modeling, as the communication
among ﬁeld devices in SCADA can be abstracted as point to
point (e.g., an IED to an RTU or an RTU to an RTU, without
considering routers, if they exist in some cases).
Modeling of SCADA Topology:
Typically, multiple IEDs are connected with an RTU, while
all or some RTUs are connected to an MTU directly or through
some intermediate RTUs and/or WAN. There can be more
than a single MTU, in which case one of them works as
the main MTU (corresponding to the main control center),
while the rest of the MTUs are connected to the main one.
The measurements and control commands ﬂow through this
communication topology between the devices. In this work,
we consider single MTU-based SCADA systems (Fig. 1).
A link in the topology is identiﬁed by an ID (e.g., l). L
is the set of links in the topology. A communication path
(e.g., a routing path through routers and links from an RTU
to another RTU) can be abstracted as a link as long as the
internal routing path is not considered for analysis in the
model. NodePair l represents the nodes connected by link l
and LinkStatus l speciﬁes if the link is up or down. There
can be other properties, if necessary, such as the link type,
including the medium type (i.e., wireless, ethernet, modem,
etc.), and the link bandwidth.
C. Formal Modeling of k−Resilient Observability
The modeling of this resiliency constraint inherently often
needs to consider another constraint, namely assured data
delivery (AssuredDelivery). AssuredDelivery ensures that the
data is transferred from the data measuring ﬁeld device (i.e.,
an IED) to the ultimate receiver (i.e., the MTU) successfully.
Assured Data Delivery:
AssuredDelivery is developed based on three properties:
(i) reachability, (ii) communication protocol pairing, and (iii)
crypto properties pairing. The reachability property states that
there is a data routing or forwarding path from the sender
to the receiver. We deﬁne the forwarding paths among the
communicating devices based on the given topology that
includes communication links among the devices. Without the
loss of generality, we assume that two devices (IEDs, RTUs, or
the MTU) are reachable if there is a communication path (can
be represented as a link, for the simplicity, although there can
be multiple links on the path) between them. Reachable i,j
states that there is a communication path between device i
and device j. In order to make successful communication, the
communication protocol supported by these two communicat-
ing devices must be the same. If the sender, the receiver, or
the both need authenticated or encrypted data transmission,
the both parties must support
the same crypto properties.
CommProtoPairing i,j and CryptoPropPairing i,j does these
matching functions, respectively.
We consider all possible forwarding paths from an IED (I)
to the MTU, through RTUs. PI represents the set of these
paths and PI,z (PI,z ∈ PI) is the z’th path from IED I to the
MTU. PI,z is a set of communication links {lI,z,1, lI,z,2, ...} ⊆
L that form data transmission or forwarding path from the
IED to the MTU. Then, the following equation formalizes the
conditions when the assured data delivery is ensured:
Ied I∧
∃z∀l∈|PI,z| {i, j} ∈ NodePair l∧
Node i ∧ Node j ∧ Reachable i,j∧
CommPropPairing i,j ∧ CryptoPropPairing i,j
→ AssuredDelivery I
Observability:
The power system is observable when the measurements
can solve a list of unknown variables. Each of these variables
stands for a state. Typically, each measurement represents a
power equation. Therefore, we need to know each equation
regarding a particular measurement, where the equation spec-
iﬁes the variables that produce this measurement. In state
estimation, there is a Jacobian Matrix that represents these re-
lationships between the measurements and the unknown vari-
ables [3]. The observability constraint ensures two conditions:
(i) the received (i.e., recorded by the IEDs and successfully
delivered to the MTU) distinct or unique measurements can
the variables (i.e., unknown states), and (ii) the
cover all
number of these measurements is greater than or equal to
the number of variables. These two conditions are minimal
requirements to ensure that there is a single estimation of
the system variables, and then the system is speciﬁed as
observable. The uniqueness of a measurement needs to be
considered, as there are often more than one measurement
that actually represents the same electrical component. For
example, the power ﬂow through a line can be measured at
both ends of the line [3]. Therefore, these two measurements
(forward line power ﬂow and backward line power ﬂow)
represent the same electrical component. In the following, we
describe the formalizations of the observability constraint.
Each row of the Jacobian matrix has a set of entries (column
values), where each entry is associated with a state/variable:
h1,n
h2,n
...
hm,n
h1,2
h1,1
h2,2
h2,1
...
...
hm,1 hm,2
···
···
...
···
Here, hZ,X is an entry where row Z is associated with mea-
surement Z (1 ≤ Z ≤ m) and column X is associated with
state variable X (1 ≤ X ≤ n). The variables corresponding
to the nonzero entries only have impact on the measurement.
Let StateSet Z be the set of states that constitute measurement
Z. Then, StateSet Z is formalized as follows:
∀X∀Z (hZ,X (cid:54)= 0) → X ∈ StateSet Z
When two measurements represent the same electrical com-
ponent, their corresponding rows must have non-zero entries
on the same columns, and these values must be the same,
although the direction (sign) can be the opposite (e.g., forward
and backward line power ﬂows). We deﬁne U M srSetE as the
set of measurements that represent the same electrical com-
ponent (E). Each pair of sets, U M srSetE and U M srSetE(cid:48),
must satisfy the following property:
∀Z ∃X (hZ,X (cid:54)= hZ(cid:48),X ) ∧ (hZ,X (cid:54)= −hZ(cid:48),X ) →
(Z ∈ U M srSetE) ∧ (Z(cid:48) ∈ U M srSetE(cid:48)) ∧ (Z (cid:54)= Z(cid:48))
The power consumption at a bus is the summation of all the
power ﬂows incident to that bus. Thus, if all of these power
ﬂows are received as measurements, then the bus consumption
measurement is redundant (i.e., not unique).
From the mappings between communicating ﬁeld devices
and measurements, we can logically identify the successfully
delivered measurements (i.e., ∀I AssuredDelivery I), while
from the mappings between the measurements and the states,
we can ﬁnd out whether the delivered measurements can
observe the system. Let IedSet be the set of IEDs that are
responsible to take necessary measurements (meters/sensor
data) and send them to the MTU through one or more RTU.
If MsrSet I is the set of measurements transmitted by IED I
and DZ is a Boolean variable denoting whether measurement
Z is successfully delivered, the following two conditions must
hold if measurement Z is secured:
∀I∈IedSet∀Z (Z ∈ MsrSet I ∧ AssuredDelivery I ) → DZ
If a measurement is successfully delivered, the variables
corresponding to this measurement can be uniquely estimated.
Let DE X denote whether state X be estimated. Then:
∀Z ∀X∈StateSet Z DZ → DE X
We deﬁne DelUMsr E to denote whether one or more
measurements within U M srSetE are successfully delivered:
∀E ∃Z∈UMsrSet E DZ → DelUMsr E
A system is unobservable (¬Observability) when either
the delivered measurements does not cover all of the state
variables or the number of delivered measurements, which are
unique, are less than the number of (unknown) variables.
¬Observability →
(∃X ¬DE X ) ∨ (
(cid:88)
DelUMsr E < m)
k−Resilient Observability:
E
This constraint veriﬁes whether observability is ensured
even if k ﬁeld devices (i.e., IEDs and RTUs) are unavailable.
If IED failures and RTU failures are considered differently,
then this constraint can be speciﬁed as k1, k2−resilient ob-
servability, where k1 is the number of IED failures and k2 is
that of RTU failures. A device is unavailable when it fails to
communicate with the MTU. This is possible because of its
technical failures or remote attacks (e.g., DoS) on it or the
communication route. As we have stated before, we model
this constraint as a threat veriﬁcation. That is, the modeling
will verify if there is a set of devices, no more than k in
number (or k1 IEDs and k2 RTUs), which can make the system
unobservable when they are unavailable. This set is a threat
vector that states that the system is not k−resilient. If there is
not such a threat vector, then it is k−resilient observable.
Remember that Node i denotes if node i (an IED or an RTU)
is available. The number of unavailable devices is computed
by considering the available nodes. Let N be the number of
devices, while N1 and N2 be that of IEDs and RTUs, respec-
tively. Now, we formalize the threat against the k−resilient
observability constraint (¬ResilientObservability) as follows:
((N − (cid:88)
1≤i≤N
Node i) ≤ k) ∧ ¬Observability
→ ¬ResilientObservability
respect
veriﬁcation with
the
constraint,
to
the
above
For
the
threat
k1, k2−resilient
formalization turns to be:
observability
((N1 − (cid:88)
((N2 − (cid:88)
1≤i≤N1
1≤i≤N2
¬Observability
(Node i × Ied i)) ≤ k1)∧
(Node i × Rtu i)) ≤ k1)∧
→ ¬ResilientObservability
The threat vector (V) represents those devices for which the
following equation is true: ∀i∈V¬Node i.
D. Formal Modeling of k−Resilient Secured Observability
The modeling of this resiliency constraint veriﬁcation uti-
lizes secured (assured) data delivery (SecuredDelivery). Un-
like AssuredDelivery, SecuredDelivery ensures that the data
is delivered from the sender (e.g., an IED) to the receiver (e.g.,
an RTU) with necessary security measures (authenticated and
encrypted) successfully.
Secured Data Delivery:
The assured data delivery constraint veriﬁes whether data
can reach from the source to the destination, e.g., from a ﬁeld
device to the MTU, through zero, one, or more intermediate
devices, but does not ensure if the transmission has occurred
under necessary security measures. Although this constraint
checks security pairing between the communicating parties, it
is only to ensure necessary handshaking for communication.
In the secured data delivery constraint (SecuredDelivery),
we verify whether data is sent under proper security measures,
particularly authentication and integrity protection, including
the assured data delivery. That is, the communicating nodes,
e.g., an RTU and the MTU, may have correct security pairing,
as they are using the same security protocol Challenge-
Handshake Authentication Protocol (CHAP). However, this
security pairing on CHAP only ensures authentication. In this
case, the transmission will not be data integrity protected.
Moreover, we need to consider the vulnerabilities of the
security measures in use. For example, if Data Encryption
Standard (DES) is used for data encryption, the transmitted
data cannot be considered as protected, as a good number of
vulnerabilities of DES have already been found.
The formalization of the secured data delivery includes two
more constraints, Authenticated and IntegrityProtected, that
ensure the authentication of the communicating parties and the
integrity of the transmitted data, respectively. In the following,
we present the formalization of secured data delivery.
∃K(∃kCryptType i,k = K)∧
(∃(cid:48)
kCryptType i,k(cid:48) = K)∧
((CAlgoK = hmac ∧ CKey K ≥ 128) ∨ . . .))
→ Authenticated i,j
∃K(∃kCryptType i,k = K)∧
(∃(cid:48)
kCryptType i,k(cid:48) = K)∧
((CAlgoK = sha2 ∧ CKey K ≥ 128) ∨ . . .))
→ IntegrityProtected i,j
Ied I∧
∃z∀l∈|PI,j,z| {i(cid:48), j(cid:48)} ∈ NodePair l∧
Node i(cid:48) ∧ Node j(cid:48) ∧ Reachable i(cid:48),j(cid:48)∧
CommPropPairing i(cid:48),j(cid:48) ∧ CryptoPropPairing i(cid:48),j(cid:48)
Authenticated i(cid:48),j(cid:48) ∧ IntegrityProtected i(cid:48),j(cid:48)
→ SecuredDelivery I
Secured Observability:
We logically identify the secured measurements from the
mappings between communicating ﬁeld devices and mea-
surements. Next, using the mappings between the secured
measurements and the states, we ﬁnd out whether the system
is observable securely. Let SZ be a Boolean variable denoting