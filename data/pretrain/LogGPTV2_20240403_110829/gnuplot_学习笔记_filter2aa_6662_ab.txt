```
---
## 读取文件
**空格分隔**
```
plot 'data.txt'
```
**逗号分隔**
有时，我们的数据文件中各个数据之间是用逗号作为分隔符的，比如标准的以 “CSV” 为后缀的那种数据文件。如果在逗号之后没有空格分隔，默认情况下 gnuplot 是无法直接读取的。
这时可以有两种方案，第一种是提前处理一下数据文件，比如将逗号替换为空格，随便一个文本处理软件都能很轻松的做这种替换。但是有时我们有很多这样的数据文件，每个都这样处理一下也挺麻烦的。
第二种方法就是在 gnuplot 中给出文件分隔符的信息，让 gnuplot 能够读懂我们的文件。下面将要说的就是这种方法。
比如我们有如下的文件：
```
-3,0.1,0.0001234098
-2.9,0.1062699256,0.0002226299
-2.8,0.1131221719,0.000393669
-2.7,0.1206272618,0.0006823281
-2.6,0.1288659794,0.0011592292
-2.5,0.1379310345,0.0019304541
-2.4,0.1479289941,0.0031511116
-2.3,0.1589825119,0.0050417603
-2.2,0.1712328767,0.0079070541
-2.1,0.1848428835,0.0121551783
-2,0.2,0.0183156389
-1.9,0.2169197397,0.0270518469
-1.8,0.2358490566,0.0391638951
-1.7,0.2570694087,0.0555762126
-1.6,0.2808988764,0.0773047404
-1.5,0.3076923077,0.1053992246
-1.4,0.3378378378,0.1408584209
-1.3,0.3717472119,0.184519524
-1.2,0.4098360656,0.2369277587
-1.1,0.4524886878,0.2981972794
-1,0.5,0.3678794412
-0.9,0.5524861878,0.4448580662
-0.8,0.6097560976,0.527292424
-0.7,0.6711409396,0.6126263942
-0.6,0.7352941176,0.6976763261
-0.5,0.8,0.7788007831
-0.4,0.8620689655,0.852143789
-0.3,0.9174311927,0.9139311853
-0.2,0.9615384615,0.9607894392
-0.1,0.9900990099,0.9900498337
0,1,1
0.1,0.9900990099,0.9900498337
0.2,0.9615384615,0.9607894392
0.3,0.9174311927,0.9139311853
0.4,0.8620689655,0.852143789
0.5,0.8,0.7788007831
0.6,0.7352941176,0.6976763261
0.7,0.6711409396,0.6126263942
0.8,0.6097560976,0.527292424
0.9,0.5524861878,0.4448580662
1,0.5,0.3678794412
1.1,0.4524886878,0.2981972794
1.2,0.4098360656,0.2369277587
1.3,0.3717472119,0.184519524
1.4,0.3378378378,0.1408584209
1.5,0.3076923077,0.1053992246
1.6,0.2808988764,0.0773047404
1.7,0.2570694087,0.0555762126
1.8,0.2358490566,0.0391638951
1.9,0.2169197397,0.0270518469
2,0.2,0.0183156389
2.1,0.1848428835,0.0121551783
2.2,0.1712328767,0.0079070541
2.3,0.1589825119,0.0050417603
2.4,0.1479289941,0.0031511116
2.5,0.1379310345,0.0019304541
2.6,0.1288659794,0.0011592292
2.7,0.1206272618,0.0006823281
2.8,0.1131221719,0.000393669
2.9,0.1062699256,0.0002226299
3,0.1,0.0001234098
```
可以看到，数据有三列，用逗号来分隔，我们下面的例子中之用到前两列。如果直接用如下命令的话得到的不是我们希望的结果。
```
plot 'sample.csv'
```
gnuplot 只解析出了第一列的数据。如果我们告诉 gnuplot 我们的数据有两列会怎样呢？
```
Plot 'sample.csv' using 1:2
```
gnuplot 会报错
正确的方法是这样的：
```
plot 'sample.csv' using 1:2 "%lf,%lf"
```
格式字符串的格式与 C 语言中 scanf 的格式字符串是类似的，实际上 gnuplot 最后就是用的 scanf 函数来读取数据。%lf 表示按照 double 型浮点数类型来读取。需要注意的是 gnuplot 的格式化字符串不支持 %f。
---
## 输出文件
在启动时，终端类型设置为 X11。gnuplot 采用标准设计，可以在多个终端设备上绘图。这包括直接打印到多种打印机中，包括 Epson、HP 和 Imagen 打印机。它甚至可以在伪设备中绘图，如 postscript 和 png。这主要涉及生成输出文件，而不是可查看文件或打印输出。这是将你的图表包含在其他报表中的一种技巧。
**设置输出和终端类型**
```
# gnuplot recommends setting terminal before output
set terminal png
# The output filename
set output 'output.png'
plot sin(x)
```
现在，文件 output.png 中有了刚才绘制的图。
所有终端在能力上都不相同。其中的一些（如 LaTeX）可能不支持文本的旋转，所以如果你像我们前面那样设置 ylabel，在不同的终端中可能显示不一样。换句话说，你可以在 LaTeX 的特定终端中使用 LaTex 命令。例如，set ylabel $sin(\\\\theta)$（注意我们使用两个反斜杠产生一个 LaTex 所需的反斜杠 —— gnuplot 在将双引号中所括的字符串传送到终端驱动程序之前，先对其进行反斜杠处理）。现在，你可以使用 \\input{output.tex} 将输出文件包含在 LaTeX 文件中。要在 PostScript 终端中获得相同的结果，使用相应的 PostScript 命令：{/Symbol q}。在 enhanced PostScript 和 LaTeX 中，你可以使用表示法 x^{superscript} 和 x_{subscript} 得到上标文字。还要注意缩写的终端和输出命令：
**eps 驱动程序的能力**
```
# enhanced PostScript, essentially PostScript with bounding boxes
set term post enh
set out 'gplt.eps'
set xlabel '{/Symbol q_1}
set ylabel 'sin^2({/Symbol q_1})'
plot sin(x)**2
```
---
## 3D绘图
**以纵横各 10 条线组成的网格画出 sin(x)*cos(y) 的图形**
```
splot [-pi:pi] [-pi:pi] sin(x)*cos(y)
```
**画等高线图**
```
# 设置三维图表面的网格的数目
set dgrid3d 100,100
# 设置画等高线
set contour
# 设置等高线的疏密和范围，数据从 -0.2 到 0.2 中间每隔 0.01 画一条线
set cntrparam  levels  incremental -0.9,0.1,0.9
# 去掉上面的三维图形
unset surface
set view 0,0
unset key
splot [-pi:pi] [-pi:pi] sin(x)*cos(y)
```
**画 pm3d 图**
```
set pm3d
set isosamples 50,50
splot x**2+y**2
```
```
# 设置视角，（0，0）将投影到底面上去
set view 0,0
# 把z轴上的数字给去掉
unset ztics
unset surface
splot x**2+y**2
reset
```
---
## 绘制时间序列图
通常我们利用数据文件绘图时，XY 坐标的值都是实数，也就是我们要绘制图形的函数是 R 到 R 的映射。可有时横轴或纵轴的数据是时间值，时间的格式每次可能还都不太一样。这时我们就需要特殊设置一下 gnuplot 了。
假设我们有数据文件 “timedat.dat”, 文件的内容如下。
```
#日/月/年 值
01/06/93	100
17/08/93	900
04/10/93	1300
11/10/93	300
28/10/93	1000
```
可以看到，横坐标是时间值，需要将这个信息告诉 gnuplot。利用如下的命令。
```
set xdata time
```
告诉 gnuplot 数据文件中的时间格式是什么样
```
set timefmt "%d/%m/%y"
```
读取文件显示
```
plot 'timedat.dat' using 1:2 with points ps 3 pt 6 title ""
```
可以看到输出的横坐标只有月份和日期，没有年份信息。如果需要加入年份信息，可以这样设置：
```
set format x "%y/%m/%d"
```
执行先前的 plot 命令
```
replot
```
---
## 数据平滑
gnuplot 中可以利用 smooth 关键字实现数据的平滑，平滑的方法有多种，最主要的几种如下：
- unique : unique 的作用是首先将数据点按照 x 的大小关系排序。如果有多个数据点的 x 值相同的话则取这些数据点的平均值。
- frequency : frequency 首先将数据点按照 x 的大小关系排序，但是如果多个数据点的 x 值相同的话则将这些数据点的 y 值叠加。
- bezier : bezier 用 n 次 的 bezier 曲线连接数据点，n 是数据点的个数。曲线保证过头尾两个数据点，但是中间的数据点一般就不会经过了。这样的曲线足够光滑但不能保证通过所有的数据点。
- sbezier : sbezier 相当于首先应用 unique 将数据排序并将相同 x 值的数据取平均，然后应用 bezier。
- csplines : csplines 相当于首先应用 unique 将数据排序并将相同 x 值的数据取平均，然后应用自然样条插值。获得的曲线保证通过所有的数据点 (unique 处理过的数据点)。
- acsplines : acsplines 相当于首先应用 unique 将数据排序并将相同 x 值的数据取平均，然后应用加权的自然样条插值。加权值通过 using 关键字指定。加权后的曲线不一定通过所有的数据点。权值越大就越接近数据点。
下面是一个例子，数据文件 "price.dat"
```
# Average PQR and XYZ stock price (in dollars per share) per calendar year
1975 49 162
1976 52 144
1977 67 140
1978 53 122
1979 67 125
1980 46 117
1981 60 116
1982 50 113
1983 66 96
1984 70 101
1985 91 93
1986 133 92
1987 127 95
1988 136 79
1989 154 78
1990 127 85
1991 147 71
1992 146 54
1993 133 51
1994 144 49
1995 158 43
```
读取文件显示
```
plot "price.dat" using 1:2 with linespoints,"" using 1:2 title "bezier" smooth bezier,"" using 1:2 title "csplines" smooth csplines
```
读取文件显示
```
plot [1975:1995][40:160] "price.dat" using 1:2 with points title "price.dat", "" u 1:2:(1) smooth acsplines title "1", "" using 1:2:(1/50.) smooth acsplines title "1/50", "" using 1:2:(50) smooth acsplines  title "50", "" using 1:2:(1/10000.) smooth acsplines title "1/10000"
```
## 绘图环境参数
- 参考 : https://blog.csdn.net/liyuanbhu/article/details/8502461
---
## Source & Reference
- [win10下gnuplot的安装和使用](https://blog.csdn.net/qq_39516859/article/details/82108976)
- [gnuplot 入门教程](https://blog.csdn.net/liyuanbhu/article/details/8502383)
- [有逼格的画图从gnuplot说起](https://xijunlee.github.io/2016/12/24/2016-12-24-you-bi-ge-de-hua-tu-cong-gnuplotshuo-qi/)
- [gnuplot 入门教程 2](https://blog.csdn.net/liyuanbhu/article/details/8502418)
- [gnuplot 入门教程 3](https://blog.csdn.net/liyuanbhu/article/details/8502450)
- [gnuplot 入门教程 4](https://blog.csdn.net/liyuanbhu/article/details/8502461)
- [gnuplot 读取逗号分隔的数据文件](https://blog.csdn.net/liyuanbhu/article/details/8516417)
- [利用 gnuplot 绘制时间序列图](https://blog.csdn.net/liyuanbhu/article/details/8497582)
- [gnuplot 中的数据平滑](https://blog.csdn.net/liyuanbhu/article/details/7574193)