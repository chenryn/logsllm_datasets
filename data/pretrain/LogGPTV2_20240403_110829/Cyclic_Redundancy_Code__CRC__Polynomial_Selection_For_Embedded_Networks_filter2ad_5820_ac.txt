0x1909
0x372B
114
135
0x573A
0xC86C
12
0x571
none
12
13
16
0x12A5
0x28A9
0x5BD5
19
0x968B
11
11
11
12
15
0xA4F
0x10B7
0x2371
0x630B
0x8FDB
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:55 UTC from IEEE Xplore.  Restrictions apply. 
(6) If Step 5 does not apply or results in a tie, select the
polynomial with best performance at 2048 bits (the maxi-
mum length computed). This yields a polynomial that has
good performance for long data word lengths.
(7) If Step 6 is an approximate tie (the HD weights are
within 1%), pick the polynomial with the best weights at
smaller lengths, even if those smaller lengths are at the
same HD as the break point.
The result of applying this selection process is shown in
Table 3. Each cell in Table 3 has two numbers – a top num-
ber for the break point length at the given HD, and a bottom
“good” polynomial for lengths up to the break point.
Lengths above 2048 bits were not studied in detail, but for
11 bit and smaller CRCs, the given polynomials are also
near-optimal for arbitrarily longer lengths. The underlined
polynomials are ones that have been previously published
as suitable for use in CRCs (see Table 4 for details). Table
3 can be used in the following ways:
• Find a “good” polynomial given CRC size and length:
Select the appropriate CRC size column in Table 3.
Pick the row with the smallest length greater than or
equal to the desired length. The polynomial in that box
will provide the best HD possible at that length and
CRC size. For example, for a 9-bit CRC, a length of 246
would use polynomial 0x14B and achieve HD=4, but
the best HD that can be achieved at length 247 is HD=3
using polynomial 0x167.
• Find the minimum size CRC required to achieve a given
HD at a particular length: Pick the row of Table 3 with
the desired HD. Select the furthest left column in that
row with a length greater than or equal to the desired
length. That is the smallest CRC that can provide the
desired HD at the required length. For example, HD=6
for a data word length of 52 bits can be achieved with a
13-bit CRC using polynomial 0x1909.
Of course this selection table is not without limitations.
For applications that have only a single data word length,
and in which optimal performance is required even at the
expense of more effort in polynomial selection, an optimal
polynomial should be selected.
5.2. Performance of published polynomials
Despite the fact that Table 3 has many novel polynomi-
als, that does not necessarily mean that a previously pub-
lished polynomial will perform poorly in any specific
application. In particular, the self-imposed requirement to
achieve the maximum possible HD for break point values
disqualified some otherwise good standard polynomials.
For example the CAN polynomial 0x62CC is good for
lengths up to 112 bits, but has a break point at 112 bits com-
pared to the bound’s break point at 114 bits for HD=6. For
most applications, the CAN polynomial is likely to be good
enough, and there is little point selecting a novel polyno-
mial. Therefore, it is important to present an evaluation of
the performance of commonly used polynomials so de-
signers can choose between the extra potential effort of
justifying a “non-standard” polynomial selection vs. the
potential error detection gain.
Table 4 is a list of polynomials either in public use or
proposed as “good” polynomials in the literature that we
have encountered. (Only select polynomials from the pub-
lished 8- and 16-bit surveys previously discussed have
been included, since they are for the most part point solu-
tions rather than generic suggested polynomials.) The best
available citation for each polynomial has been given,
along with the most commonly used nickname.
Table 4 gives the performance for data word lengths
through 2048 bits. To keep the data manageable, perfor-
mance is categorized into four columns. The first column
indicates that performance is optimal or near optimal
(within 1% of the best possible performance bound). The
second column indicates that undetected error probabilities
are within a factor of two of the bound, which is a some-
what arbitrary distinction but overall is useful in conveying
which polynomials are close to being good for particular
data ranges. The third column indicates where polyno-
mials have more than twice the undetected error rate of the
bound, and the fourth column indicates where each poly-
nomial’s HD is one or more bits worse than the bound. Un-
derlined entries correspond to recommendations from
Table 3. Tables of weights for these polynomials and
bounds are available from the primary author, and are on
the Web at http://www.ece.cmu.edu/~koopman/crc
Some CRC polynomials appear to be incorrect as a re-
sult of data transcription or similar errors that have oc-
curred as polynomials are passed down over time. For
example [Ottoson01] gives a “CRC-7” value of 0x68 in-
stead of 0x48 as given elsewhere, which might be due to a
one-bit data transcription error into a source code binary
1e-12
d
u
P
1e-15
1e-18
1e-21
1e-24
1e-27
1e-30
1e-33
HD=2
0xA6
HD=3
HD=4
HD=5
0xA6
Bound
8
16
32
64
128
256
512
1024
2048
Data Word Length (bits)
Figure 3. A good 8-bit polynomial for lengths 120
and above.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:55 UTC from IEEE Xplore.  Restrictions apply. 
Table 4. Performance of polynomials at BER = 10-6. Underlined ranges correspond to Table 3.
CRC
Size
(Bits) Nickname Polynomial
Source
3
4
4
5
5
6
6
7
7
7
DARC-6:
CRC-6:
CCITT-4:
CRC-4:
CRC-5:
0x5 = (x3 + x + 1)‡
0x9 = (x4 + x + 1)‡
0xF = (x4 + x3 + x2 + x + 1)
0x15 = (x+1)(x4 + x3 + 1)‡
0x12 = (x5 + x2 + 1)‡
0x2C = (x+1)(x5 + x4 + x2 + x + 1)‡
0x21 = (x6+x+1)‡
0x5B = (x+1)(x6 + x5 + x3 + x2 + 1)‡
0x48 = (x7+x4+1)‡
0x44 = (x7+x3+1)‡
0x72 = (x7+x6+x5+x2+1)‡
0x67 = (x+1)(x3 + x + 1)‡(x3 + x + 1)‡
0x68 = (x+1)(x2 + x + 1)‡(x4 +x3 +1)‡
0x9C = (x8 + x5 + x4 + x3 + 1)
DARC-8:
0x97 = (x+1)(x7 + x6 + x5 + x2 + 1)‡
C2:
DOWCRC: 0x98 = (x+1)(x7+x6+x5+x3+x2+x+1)‡
0x83 = (x+1)(x7+x6+x5+x4+x3+x2+1)‡
ATM-8:
7
7
8
8
8
8
8 WCDMA-8: 0xCD = (x+1)(x7 + x3 + 1)‡
[RFC 3095]
[G704]
[Ottoson01]
[G704]
[USB00]
[ETSI02]
[G704]
new
[G704]
(CRC-7 inverse) [G832]
[Funk88]
[RFC3095]
[Ottoson01]
[ETSI02]
[Baicheva98]
[Whitfield01]
[Ottoson01]
[Ottoson01]
CRC-7:
FT2:
Performance compared to bound at lengths given
Within 1% of
bound
8-2048
8-2048
–
8-10
11-13; 17-2048
12-25
26-28; 37-2048
29-56
87-91; 99-2048
87-91; 99-2048
87-89; 99-2048
–
–
8-9
Within 2x of
bound
Same HD, but
more than 2x
bound
Worse HD
than bound
–
–
–
–
14-16
8-11
29-36
11-28
57-86; 92-98
57-86; 92-98
57-86; 90-98
–
8
–
–
–
12-2048
27-2048
–
58-2048
–
8-10; 121-2048
–
–
–
121-2048
121-2048
248-2048
–
–
8-11
11-26
8-10
26-57
8-25
57-120
8-56
8-56
8-56
8-120
9-120
10-247
27-50; 52; 56-119 18-26; 51; 53-55 10-17; 248-2048 8-9; 120-247
10-18; 248-2048 8-9; 120-247
10-17; 248-2048 8-9; 120-247
10-19; 248-2048 8-9; 120-247
43-119
53-119
28-31; 43-119
19-42
18-52
20-27;32-42
CRC-8:
0xA6 = (x8 +x6 +x3 +x2 +1)‡
new
0xEA = (x+1)(x2+x+1)‡(x5+x4+x3+x2+1)‡
0x13C = (x+1)(x8 +x7 +x6 +x4 +x2+x+1)
0x185 = (x2 + x + 1)‡(x3 +x2 + 1)‡(x4 +x3 +1)‡
[Ottoson01]
new
new
136-140;
210-2048
–
8
13-16
11-15; 120-135;
141-209
20-85
–
–
0x14B = (x+1)(x8 +x7 +x3 +x2 +1)‡
0x167 = (x9 +x7 +x6 +x3 +x2 +x +1)‡
new
new
147-246
26-28; 30-146
45-46; 48;
412-2048
18-44; 47;
247-411
10
8-9; 16-119
10-19; 248-2048
8-9;86-247
503-2048
9-502
9-12; 503-2048
8; 17-502
14-25; 29;
503-2048
8-13;
247-502
14-17
8-13; 49-246
0x28E = (x+1)(x2 + x + 1)‡(x3 +x2 + 1)‡(x4 +x3+1)‡ new
9-12
8; 77-95
22-76; 1014-2048
0x2B9 = (x5 +x2 +1)‡(x5 +x3 +x2 +x +1)‡
new
17-21
13-16
1014-2048
CRC-10:
0x319 = (x+1)(x9 + x4 + 1)‡
[Jaffer03]
306-501
73-305
22-72; 1014-2048
13-21;
96-1013
8-12;
22-1013
8-21;
502-1013
880-2048
32-73; 502-879
22-31
8-21; 74-501
0x327 = (x10 +x9 +x6 +x3 +x2 +x +1)‡
0x571 = (x11 +x9 +x7 +x6 +x5 +x +1)
0x532 = (x+1)(x10 +x9 +x5 +x +1)
new
new
new
8-12
21-22
0x5D7 = (x11 +x9 +x8 +x7 +x5 +x3 +x2 +x +1)‡
new 25-28; 1775-2048
–
13-20
23-24;
1013-1774
2037-2048
2037-2048
–
8
8
9
9
9
9
10
10
10
10
11
11
11
11
11
12
12
12
12
12
12
12
0x583 = (x+1)(x10 +x9 +x7 +x6 +x5 +x4 +x3 +x2 +1)‡ new
625-1012
13-17; 96-624
27-95; 2037-2048
0x64D = (x11 +x10 +x7 +x4 +x3 +x +1)‡
0xA4F = (x+1)(x11 +x10 +x6 +x5 +x4 +x2 +1)
0xB41 = (x+1)(x3 +x2 +1)‡(x8 +x4 +x3 +x2 +1)‡
0x8F8 = (x12 +x8 +x7 +x6 +x5 +x4 +1)
new
new
new
new
0xC05 = (x2+x+1)‡(x2+x+1)‡(x8+x7+x6+x5+x2+x+1)‡
0xC06 = (x12+x11+x3+x2+1)
[Press92]
[Whitfield01]
111-131;
1775-2048
62-110; 96-624;
1013-1774