title:Modeling of Multiple Agent based Cryptographic Key Recovery Protocol
author:Shinyoung Lim and
Sangseung Kang and
Joo-Chan Sohn
M odeling of M ultiple A gent based
C ryptographic K ey R ecovery Protocol
Shinyoung Lim, Sangseung Kang, Joochan Sohn
ETRI, Korea
{limsy, ssk, jcsohn} @etri.re.kr
A bstract
When a receiver of a ciphertext message can not decrypt
the message due to the fact that he has lost his private-key,
Commercial key backup (e.g., AT&T Crypto- Backup
[8]): When data is encrypted, a session-key is encrypted
using the public-key and kept with the data. The user
sends the private-key to a key recovery agent. When a user
the private-key of
the receiver and session-key of
the
needs to recover the key, the key recovery agent provides
message need to be recovered.
In this paper, we
the stored private-key to the user.
demonstrate how we have modeled and analyzed a new type
Key encapsulation (e.g., TIS RecoveryKey [9], CyKey
of multiple agent based key recovery protocol.
It
is
[10], SecretAgent [11], IBM SKR [12], Binding Crypto-
characterized by key encapsulation approach, protocol
generalization, secret choice of key recovery agents and
fork/join of session-keys by random-keys. The proposed
protocol is formally modeled by a new pictorial model, an
Extended Cryptographic Timed Petri Net
(ECTPN).
Recoverability of a session-key as well as performance of
the protocol is verified by using a reachability graph of the
ECTPN.
1. Introduction
Key management, like cryptographic algorithms, is a core
technology in information technology. Key management is
the group of activities that involves generation, distribution,
validation, storage, usage, expiration, and recovery of
cryptographic keys [1]. With regard to key recovery, there
are several conflicts between preservation of personal
privacy and profit of a government because personal secrecy
may be violated by means of the key recovery.
The key recovery techniques, techniques for crypto- graphic
information recovery, are classified by the following
approaches [1,2]:
Key escrow (e.g., Clipper chip or Escrowed encryption
standard [3,4,5]): The user sends the cryptographic key to
one or more escrow agents. When a user needs to recover
the key, the escrow agent provides the stored key to the
user.
Trusted third party (e.g., Yaksha system[6,7], ANSI
X9.17): The user gets their session-key from a trusted third
party (e.g., key distribution center). When the user needs to
recover the key, the trusted third party provides the original
cryptographic key to the user.
graphy): A session-key is encrypted along with other key
recovery information in a capsule (i.e., key recovery block)
which only the user's designated key recovery agent can
decrypt. When the user needs to recover the key, the key
recovery block is sent to the key recovery agent who then
returns the recovered session-key to the user.
Key distribution center and escrow agent are a bottleneck of
the
information
technology
infrastructure with
high
transaction overhead and large
storage
requirements.
Private-key backup reduces the overhead, but many users do
not want to submit their private-key to any kinds of authority
since it provides access to all of their encrypted data. The key
escrow approach is sensitive to violation of privacy, and
suffers from a binding problem [5](i.e., possibility of secret
communication among users without monitoring by the
government). The key encapsulation, however, is relatively
free from violation of privacy (because the owner of a key
has the authority of key recovery) and has many advantages
over other approaches.
However, conventional key encapsulation approaches have
the following problems [9,10,11]. First, they lack a formal
modeling and analysis model as well as implementation
technology which are useful for real developers of key
recovery systems. Second, a user agent who is a requester of
key recovery, needs to directly communicate with one or
more key recovery agents in some approaches [9, 10]. Thus,
all user agents must have complex functions of the key
recovery. Finally,
there
is
no
practical
proposition
concerning the multiple agent based key recovery system
that consists of multiple key recovery agents.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:44:10 UTC from IEEE Xplore.  Restrictions apply. 
Coping with these problems, we have developed a new
data) which is a secret-key for encryption of data. Thus, we
multiple agent based key recovery protocol, and proposed a
can use the key encapsulation approach because the size of
new analysis model, an Extended Cryptographic Timed Petri
a session-key is relatively smaller than that of the data.
Net (ECTPN), for the purpose of formal modeling and
A solution should be formally specified and validated, as
analysis of the protocol. Note that the Petri net model has
been successfully used as a formal and pictorial modeling
and analysis model for concurrent and real time systems
since 1964 [13,14]. The Petri net also has been used for
modeling and analysis of
information flows [15] and
cryptographic protocol
[16] of
information technology
well as performance of the solution should be evaluated.
The key recovery protocol is executed over a conventional
public key infrastructure. Thus, we assume that
the
public-keys and certificates of all agents in the key recovery
protocol have been distributed securely by a key
distribution center or certification authority over a public
security systems.
key infrastructure.
This paper is organized as follows: Section 2 describes
requirements of the key recovery and framework of the
protocol. Section 3 presents a formal modeling and results of
analysis of the protocol by means of an ECTPN model and
its reachability graph. Basic definition of the ECTPN is
presented in Appendix. Section 4 describes and compares
conventional
key
encapsulation
approaches
and
our
approach. Finally, we conclude our approach in section 5.
2. Framework of Research
2.2 Framework of proposed multiple agent
based key recovery protocol
The proposed protocol
is executed over key recovery
systems. The key recovery system is consisted of nested
security domain as shown in Fig. 1. Note that key recovery
provider domain is the most secure domain in the key
recovery system. The key recovery service is only provided
to
user
agents
in
the
key
recovery
domain.
i.e.,
intra-key-recovery
communication. The
key
recovery
scenario of the multiple agent based key recovery protocol is
2.1 Problems and requirements of key recovery
presented as follows:
Assuming a user-A (UA) sends a ciphertext message to a
Phase 1 (initialization): Public-keys of all agents in the
user-B (UB) by means of the cryptographic mechanism over
application domain are distributed by a public key
a public key infrastructure, and if a UB has lost his
infrastructure after certification authority issued certificates
private-key or a UA has been encrypted by a UB's old
for agents. The certificate contains public-key of agents and
public-key, then the session-key can not be obtained and the
information for identification and authentification.
ciphertext data can not be decrypted. Thus, a UB or a law
Phase 2 (communication and key recovery information
enforcement agent should recover the session-key. Basic
generation): A UA secretly or randomly chooses one or
requirements and assumptions about
the key recovery
more key recovery agents among a pool of key recovery
protocol are listed as follows:
agents and generates key recovery information (KRI) by
Key recovery should be done under the control of end
using public-keys of KRC and the chosen key recovery
users or security policy of an organization. In this context,
agent. The KRI is encapsulated within communication
we may not solve the binding problem[8]. Thus a law
message along with the ciphertext of the data. Thus, the
enforcement access field (LEAF)
is not
included in
message is constituted and sent to a UB. A UB, however,
encapsulated key recovery information that is encapsulated
can not decrypt the ciphertext message because he has lost
in a communication message.
his private-key (prkB) or the message has been encrypted by
Target of recovery is restricted to the session-key (not the
his expired public-key. Note that a UB can not know which
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:44:10 UTC from IEEE Xplore.  Restrictions apply. 
key recovery agents are chosen by a UA. And it is also
based Key Recovery Protocol
possible when an information system manager of
the
organization has found that a UA violated the security
policy of the organization (or government).
Phase 3 (key recovery): A UB or a law-enforced third
party, in this case, the information system manager, who
has the recovering message, generates a new key pair
(pukB', prkB'), and registers the pukB‘
to certification
authority. The certification authority gives a certificate
certB, including the new registered key pukB', to a UB. A
UB officially requests key recovery service to the KRC by
sending his certB, reqB and KRI. Thus, the key recovery
process is proceeded according to
~
of Fig. 2.
The multiple agent based key recovery protocol means that
a UA chooses n KRAs from a pool of KRAs in key recovery
provider domain. For example, KRA1 and KRA2 are
involved in the 2 agent based key recovery protocol. A
session-key, ssk, that is to be recovered by the protocol, is
forked into n intermediate-keys, iki, at UA, and joined them
into a recovered key at KRC. The fork and join function are
The basic definition of an Extended Cryptographic Timed
Petri Net (ECTPN), modeling tool for multiple agent based
key recovery protocol, is presented in Appendix. Modeling
activity means constructing of an ECTPN structure for some
protocol. In other word, an ECTPN structure is a pictorial
and formal specification of the multiple agent based key
recovery protocol.
Key, message and data in a protocol are modeled by places
of an ECTPN. Functional components (e.g., cryptographic,
operation and communication functions) and predefined
high-level functional components in a protocol are modeled
by transitions. Availability or activation of data is specified
by a token in corresponding place. An ECTPN model for the
multiple agent based key recovery protocol is constructed by
means of
stepwise refinement
(top-down),
incremental
(bottom- up) or mixed approach.
3.1 Modeling by bottom-up approach
defined as follows:
(1) Modeling of key, message and data by places
fork(ssk, n) = ik1, ... iki, ... ikn (where, ik1 = ssk(cid:59471)rk1, ik2 =
rk1(cid:59471)rk2, ..., iki = rki-1(cid:59471)rki, ..., ikn= rkn-1),
Key places: ssk (session-key), prk (private-key), prk' (a
new private-key for key recovery), puk (public-key), puk' (a
join(ik1, ... iki, ... ikn) = ik1(cid:59471)ik2(cid:59471)...., (cid:59471)iki
...(cid:59471) (cid:59471) ikn,
new public-key for key recovery),
rk (random- key for
(rki is a random-key).
Note that the ssk is preserved because (ssk rk1)
(rk1
rk2)
...., (rki-1
rki), ....
(rkn-2
rkn-1)
rkn-1 = ssk.
An iki
is encrypted at UA and decrypted at KRAi by
public-key and private-key of KRAi. Intermediate-keys are
merged at UA and divided at KRC in order to constitute KRI
and communication message.
3. Modeling and Analysis of multiple agent
Vernam cipher),
ik (intermediate-keys for ssk), s-prk
(private-key for signature), cert (certificate), sig (signature),
s-puk (public-key for verification), krr (key recovery
request)
Message places: msg (message), KRI
(key recover
information)
Data places: data (any data), req (key recovery request),
int(integrity) (Note: For each place pi, size of it, size (pi), is
annotated for the purpose of performance evaluation.)
,
,
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:44:10 UTC from IEEE Xplore.  Restrictions apply. 
(cid:124)(cid:104)
prkA
(cid:119)(cid:106)(cid:106)(cid:140)
pukB
(cid:119)(cid:106)(cid:106)(cid:140)
(cid:124)(cid:105)
prkB
(cid:119)(cid:106)(cid:106)(cid:139)
pukA
(cid:119)(cid:106)(cid:106)(cid:139)
prkA
pukB
prkB
pukA
(cid:119)(cid:114)(cid:106)(cid:90)
data
(cid:124)(cid:104)
s-prkA
certA
pukB
prkB
s-pukA
certA
(cid:124)(cid:105)
data
DSCs
sigA
(cid:119)(cid:114)(cid:106)(cid:88)
sigA
DSCv
int
pukB
prkB
sigA
(cid:119)(cid:114)(cid:106)(cid:88)