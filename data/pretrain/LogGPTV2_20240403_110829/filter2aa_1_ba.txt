     inline scripts
    . These scripts are the cause of many XSS vulnerabilities. (Besides embedding a script inside the HTML page as an inline script, sites can also load JavaScript code as an external file, like this:
    .)
    像这种嵌入在 HTML 文件中而不是从单独的文件加载的脚本被称为内联脚本。这些脚本是许多 XSS 漏洞的根本原因。（除了将脚本嵌入 HTML 页作为内联脚本之外，网站还可以像这样加载 JavaScript 代码作为外部文件：。） 
内联脚本是XSS漏洞的一个主要因素。
    To see why, let’s say that our site contains an HTML form that allows visitors to subscribe to a newsletter (
     Figure 6-2
    ).
    让我们看看为什么，假设我们的网站包含一个 HTML 表单，让访客可以订阅新闻简报（图 6-2）。
       Figure 6-2
      : Our HTML page with an HTML form
      图6-2：我们的HTML页面带有HTML表单。
    The source HTML code of the page looks like this:
    该页面的源HTML代码如下：
Welcome to my site.
This is a cybersecurity newsletter that focuses on bug bounty
news and write-ups. Please subscribe to my newsletter below to
receive new cybersecurity articles in your email inbox.
  Email:
    After a visitor inputs an email address, the website confirms it by displaying it on the screen (
     Figure 6-3
    ).
    在访客输入电子邮件地址后，网站将通过在屏幕上显示来确认它（图6-3）。
       Figure 6-3
      : The confirmation message after a visitor subscribes to our newsletter
      图6-3: 访客订阅我们的新闻通讯后的确认信息。
    The HTML that generates the confirmation message looks like this; HTML
    tags indicate boldface text:
    生成确认消息的HTML代码如下； HTML标签表示加粗文本：
Thanks! You have subscribed PI:EMAIL to the newsletter.
    The page constructs the message by using user input. Now, what if a user decides to input a script instead of an email address in the email form?
    For instance, a script that sets the
     location
    of a web page will make the browser redirect to the location specified:
    如果用户在电子邮件表单中输入脚本而不是电子邮件地址，页面将使用用户输入构建消息。例如，设置网页位置的脚本将使浏览器重定向到指定位置。
    The attacker could enter this script into the email form field and click Submit (
     Figure 6-4
    ).
    攻击者可以将此脚本输入到电子邮件表单字段中并单击提交（图6-4）。
       Figure 6-4
      : An attacker can enter a script instead of an email in the input field.
      图6-4：攻击者可以在输入框中输入脚本代替电子邮件。
    If the website doesn’t validate or sanitize the user input before constructing the confirmation message, the page source code would become the following:
    如果网站在构建确认消息之前不验证或清理用户输入，则页面源代码将变为以下内容：
Thanks! You have subscribed  to the newsletter.
     Validating
    user input means that the application checks that the user input meets a certain standard—in this case, does not contain malicious JavaScript code.
     Sanitizing
    user input, on the other hand, means that the application modifies special characters in the input that can be used to interfere with HTML logic before further processing.
    验证用户输入意味着应用程序检查用户输入是否符合某种标准——在这种情况下，是否不包含恶意JavaScript代码。另一方面，消毒用户输入意味着应用程序修改输入中的特殊字符，这些字符可以在进一步处理之前干扰HTML逻辑。
    As a result, the inline script would cause the page to redirect to
     attacker.com
    . XSS happens when attackers can inject scripts in this manner onto a page that another user is viewing. The attacker can also use a different syntax to embed malicious code. The
     src
    attribute of the HTML
    tag allows you to load JavaScript from an external source. This piece of malicious code will execute the contents of
     http://attacker.com/xss.js/
    on the victim’s browser during an XSS attack:
    因此，内联脚本会导致页面重定向到attacker.com。 XSS发生在攻击者能够以这种方式注入脚本到另一个用户正在查看的页面上。 攻击者也可以使用不同的语法来嵌入恶意代码。 HTML  标签的 src 属性允许您从外部资源加载JavaScript。 在XSS攻击期间，这段恶意代码将执行http://attacker.com/xss.js/的内容在受害者的浏览器上执行。
    This example isn’t really exploitable, because attackers have no way of injecting the malicious script on other users’ pages. The most they could do is redirect themselves to the malicious page. But let’s say that the site also allows users to subscribe to the newsletter by visiting the URL
     https://subscribe.example.com?email=SUBSCRIBER_EMAIL
    . After users visit the URL, they will be automatically subscribed, and the same confirmation will be shown on the web page. In this case, attackers can inject the script by tricking users into visiting a malicious URL:
    这个例子并不是真正的可利用，因为攻击者没有办法在其他用户的页面上注入恶意脚本。他们最多只能将自己重定向到恶意页面。但假设该网站还允许用户通过访问URL https://subscribe.example.com?email=SUBSCRIBER_EMAIL来订阅通讯。用户访问该URL后，将会自动订阅，并在网页上显示相同的确认信息。这种情况下，攻击者可以通过欺骗用户访问恶意URL来注入脚本。
https://subscribe.example.com?email=
    Since the malicious script gets incorporated into the page, the victim’s browser will think the script is part of that site. Then the injected script can access any resources that the browser stores for that site, including cookies and session tokens. Attackers can, therefore, use these scripts to steal information and bypass access control. For example, attackers might steal user cookies by making the victim’s browser send a request to the attacker’s IP with the victim’s cookie as a URL parameter:
    由于恶意脚本被嵌入页面中，受害者浏览器将认为该脚本是该网站的一部分。然后，注入的脚本可以访问浏览器为该网站存储的任何资源，包括Cookie和会话令牌。攻击者因此可以使用这些脚本窃取信息并绕过访问控制。例如，攻击者可能通过使受害者浏览器发送带有受害者Cookie作为URL参数的请求来窃取用户Cookie。
    This script contains JavaScript code to load an image from the attacker’s server, with the user’s cookies as part of the request. The browser will send a GET request to the attacker’s IP, with the URL parameter
     c
    (for
     cookie
    ) containing the user’s
     document.cookie
    , which is the victim user’s cookie on the current site. In this way, attackers can use the XSS to steal other users’ cookies by inspecting incoming requests on their server logs. Note that if the session cookie has the
     HttpOnly
    flag set, JavaScript will not be able to read the cookie, and therefore the attacker will not be able to exfiltrate it. Nevertheless, XSS can be used to execute actions on the victim’s behalf, modify the web page the victim is viewing, and read the victim’s sensitive information, such as CSRF tokens, credit card numbers, and any other details rendered on their page.
    这个脚本包含了JavaScript代码，用于从攻击者的服务器上载入一个图片，并将用户的cookies作为请求的一部分。浏览器将发送一个GET请求到攻击者的IP地址，并带有URL参数c（用于cookie），其中包含用户的document.cookie，也就是当前网站受害用户的cookie。通过这种方式，攻击者可以使用XSS窃取其他用户的cookie，通过检查其服务器日志中的传入请求。请注意，如果会话cookie设置了HttpOnly标志，则JavaScript将无法读取cookie，因此攻击者将无法窍取它。尽管如此，XSS仍可用于代表受害者执行操作，修改受害者正在查看的网页，并读取受害者的敏感信息，例如CSRF令牌、信用卡号码和在其页面上呈现的任何其他详细信息。
    Types of XSS
    There are three kinds of XSS: stored XSS, reflected XSS, and DOM-based XSS. The difference between these types is in how the XSS payload travels before it gets delivered to the victim user. Some XSS flaws also fall into special categories: blind XSS and self-XSS, which we’ll talk about in a bit.
    有三种XSS：存储的XSS、反射的XSS和基于DOM的XSS。这些类型之间的区别在于XSS负载在传递到受害用户之前的方式。某些XSS漏洞也属于特殊类型：盲XSS和自身XSS，稍后我们将讨论它们。
    Stored XSS
     Stored XSS
    happens when user input is stored on a server and retrieved unsafely. When an application accepts user input without validation, stores it in its servers, and then renders it on users’ browsers without sanitization, malicious JavaScript code can make its way into the database and then to victims’ browsers.
    存储型XSS发生在用户输入被存储在服务器上并且未经安全检查就被检索出来。当一个应用程序接受用户输入却没有进行验证，直接在服务器上存储，并在用户浏览器上渲染而不消毒时，有害的JavaScript代码就会进入数据库，进而传递到受害者的浏览器中。
    Stored XSS is the most severe XSS type that we will discuss in this chapter, because it has the potential of attacking many more users than reflected, DOM, or self-XSS. Sometimes during a stored-XSS attack, all the user has to do to become a victim is to view a page with the payload embedded, whereas reflected and DOM XSS usually require the user to click a malicious link. Finally, self-XSS requires a lot of social engineering to succeed.
    存储的XSS是本章讨论的最严重的XSS类型，因为它具有攻击比反射型、DOM或自我XSS更多用户的潜力。在存储的XSS攻击期间，有时用户只需要查看嵌入载荷的页面即可成为受害者，而反射型和DOM XSS通常需要用户点击恶意链接。最后，自我XSS需要大量社会工程才能成功。
    During a stored XSS attack, attackers manage to permanently save their malicious scripts on the target application’s servers for others to access. Perhaps they’re able to inject the script in the application’s user database. Or maybe they get it in the server logs, on a message board, or in comment field. Every time users access the stored information, the XSS executes in their browser.
    在存储型 XSS 攻击中，攻击者成功将他们的恶意脚本永久保存在目标应用程序的服务器上，供他人访问。也许他们能够将脚本注入应用程序的用户数据库中。或者他们在服务器日志、留言板或评论字段中获取它。每次用户访问存储的信息时，XSS 都会在他们的浏览器中执行。
    For example, let’s say a comment field on an internet forum is vulnerable to XSS. When a user submits a comment to a blog post, that user input is not validated or sanitized in any way before it gets rendered to anyone who views that blog post. An attacker can submit a comment with JavaScript code and have that code executed by any user who views that blog post!
    例如，假设某个互联网论坛上的评论字段存在XSS漏洞。当用户向博客文章提交评论时，该用户输入不会被验证或清理，然后就会显示给任何查看该博客文章的用户。攻击者可以提交一个带有JavaScript代码的评论，然后通过查看该博客文章的任何用户来执行该代码！
    A great proof of concept for XSS is to generate an alert box in the browser via injected JavaScript code, so let’s give that a try. The JavaScript code
     alert('XSS by Vickie')
    will generate a pop-up on the victim’s browser that reads
     XSS by Vickie
    :
    通过注入 JavaScript 代码在浏览器上生成一个警报框是 XSS 的巨大概念证明，所以让我们试试。JavaScript 代码 alert('XSS by Vickie') 将在受害者的浏览器上生成一个弹出窗口，其内容为“Vickie 的 XSS”：
    If submitted, this message would become embedded on the forum page’s HTML code, and the page would be displayed to all the visitors who view that comment:
    如果提交，此消息将嵌入在论坛页面的HTML代码中，并将显示给所有查看该评论的访问者：
Vickie's message
What a great post! Thanks for sharing.
Attacker's message
     Figure 6-5
    shows the two messages rendered in a browser.
    图6-5展示了在浏览器中呈现的两个消息。
       Figure 6-5
      : The HTML page with two messages rendered in the browser. You can see that the attacker’s message is blank because the browser interprets it as a script instead of text.
      图6-5：在浏览器中呈现出两条消息的HTML页面。你可以看到，攻击者的消息是空白的，因为浏览器将其解释为脚本而不是文本。
    When you load this HTML page in your browser, you’ll see the attacker’s comment field displayed as blank. This is because your browser interpreted
    located in the
    tags as a script, not as regular text. You should notice a pop-up window that reads
     XSS by Vickie
    .
    当您在浏览器中加载此HTML页面时，您会看到攻击者的注释字段显示为空白。这是因为您的浏览器将位于标记中的解释为一个脚本，而不是普通文本。您应该注意到弹出窗口，其中显示XSS by Vickie。
    Every time a user views the comment on the forum, their browser will execute the embedded JavaScript. Stored XSS tends to be the most dangerous because attackers can attack many victims with a single payload.
    每当用户在论坛上查看评论时，他们的浏览器将执行嵌入式JavaScript。存储的XSS往往是最危险的，因为攻击者可以用单个有效负载攻击许多受害者。
    Blind XSS
     Blind XSS
    vulnerabilities are stored XSS vulnerabilities whose malicious input is stored by the server and executed in another part of the application or in another application that you cannot see.
    盲XSS漏洞是存储XSS漏洞，其恶意输入被服务器存储，然后在您无法看到的应用程序的另一个部分或另一个应用程序中执行。
    For example, let’s say that a page on
     example.com
    allows you to send a message to the site’s support staff. When a user submits a message, that
    input is not validated or sanitized in any way before it gets rendered to the site’s admin page. An attacker can submit a message with JavaScript code and have that code executed by any admin who views that message.
    例如，假设example.com的一个页面允许你发送信息给网站的支持团队。当用户提交信息时，在渲染到网站的管理员页面之前，该输入没有进行任何验证或清洗。攻击者可以提交带有JavaScript代码的消息，并让任何查看该消息的管理员执行该代码。
    These XSS flaws are harder to detect, since you can’t find them by looking for reflected input in the server’s response, but they can be just as dangerous as regular stored XSS vulnerabilities. Often, blind XSS can be used to attack administrators, exfiltrate their data, and compromise their accounts.
    这些XSS漏洞更难检测，因为你无法通过查找服务器响应中的反射输入来发现它们，但它们可能与常规存储的XSS漏洞一样危险。通常，盲目的XSS可以用来攻击管理员，窃取他们的数据并攻陷他们的帐户。
    Reflected XSS
     Reflected XSS
    vulnerabilities happen when user input is returned to the user without being stored in a database. The application takes in user input, processes it server-side, and immediately returns it to the user.
    反射性XSS漏洞发生在未被存储在数据库中的用户输入被返回给用户时。应用程序接受用户输入，经服务器处理后立即返回给用户。
    The first example I showed, with the email form, involved a reflected XSS attack. These issues often happen when the server relies on user input to construct pages that display search results or error messages. For example, let’s say a site has a search functionality. The user can input a search term via a URL parameter, and the page will display a message containing the term at the top of the results page. If a user searches
     abc
    , the source code for the related message might look like this:
    我展示的第一个例子是一个邮件表单，遭受了反射型 XSS 攻击。这种问题通常发生在服务器依赖用户输入构建用于显示搜索结果或错误信息的页面时。例如，假设一个网站有搜索功能。用户可以通过 URL 参数输入搜索词，然后在结果页面顶部显示一个包含该词的消息。如果用户搜索了 abc，相关消息的源代码可能如下所示：
You searched for abc; here are the results!
    If the search functionality displays any user-submitted search string on the results page, a search term like the following would cause a script to become embedded on the results page and executed by the browser:
    如果搜索功能在结果页面上显示了任何用户提交的搜索字符串，那么像以下这样的搜索词将会在结果页面上嵌入一个脚本并由浏览器执行：
https://example.com/search?q=
    If an attacker can trick victims into visiting this URL, the payload will become embedded in their version of the page, making the victim’s browser run whatever code the attacker would like. Unlike stored XSS, which allows attackers to execute code on anyone who accesses their stored resources, reflected XSS enables attackers to execute code on the browsers of victims who click their malicious links.
    如果攻击者能够诱骗受害者访问此URL，则负载将嵌入到其页面版本中，使受害者的浏览器运行攻击者希望运行的任何代码。与存储的XSS不同，其允许攻击者在访问其存储资源的任何人上执行代码，反射型XSS可以使攻击者在点击其恶意链接的受害者的浏览器上执行代码。
    DOM-Based XSS
     DOM-based XSS
    is similar to reflected XSS, except that in DOM-based XSS, the user input never leaves the user’s browser. In DOM-based XSS, the application takes in user input, processes it on the victim’s browser, and then returns it to the user.
    DOM-based XSS与反射式XSS类似，区别在于在DOM-based XSS中，用户输入永远不会离开用户的浏览器。 在DOM-based XSS中，应用程序接收用户输入，通过受害者浏览器上的处理，然后将其返回给用户。
    The
     Document Object Model (DOM)
    is a model that browsers use to render a web page. The DOM represents a web page’s structure; it defines the basic properties and behavior of each HTML element, and helps scripts access and modify the contents of the page. DOM-based XSS targets a web page’s DOM directly: it attacks the client’s local copy of the web page instead of going through the server. Attackers are able to attack the DOM when
    a page takes user-supplied data and dynamically alters the DOM based on that input. JavaScript libraries like jQuery are prone to DOM-based XSS since they dynamically alter DOM elements.
    文档对象模型 (DOM) 是浏览器用于呈现网页的模型。DOM 表示网页的结构；它定义了每个 HTML 元素的基本属性和行为，并帮助脚本访问和修改页面的内容。基于 DOM 的 XSS 直接针对网页的 DOM：它攻击客户端的本地网页副本，而不是通过服务器。攻击者可以在页面采用用户提供的数据并基于输入动态修改 DOM 时攻击 DOM。像 jQuery 这样的 JavaScript 库容易受到基于 DOM 的 XSS 的攻击，因为它们会动态修改 DOM 元素。
    As in reflected XSS, attackers submit DOM-based XSS payloads via the victim’s user input. Unlike reflected XSS, a DOM-based XSS script doesn’t require server involvement, because it executes when user input modifies the source code of the page in the browser directly. The XSS script is never sent to the server, so the HTTP response from the server won’t change.
    与反射型XSS类似，攻击者通过受害者的用户输入提交基于DOM的XSS载荷。不像反射型XSS，基于DOM的XSS脚本不需要服务器参与，因为当用户输入直接修改页面的源代码时，它就会执行。 XSS脚本永远不会发送到服务器，因此服务器的HTTP响应不会改变。
    This might all sound a bit abstract, so let’s consider an example. Say a website allows the user to change their locale by submitting it via a URL parameter:
    这可能听起来有点抽象，那么让我们举个例子。假设一个网站允许用户通过提交 URL 参数来更改地区设置：
https://example.com?locale=north+america
    The web page’s client-side code will use this locale to construct a welcome message whose HTML looks like this:
    网页的客户端代码将使用该区域设置来构建欢迎信息，其HTML格式如下：
Welcome, user from north america!
    The URL parameter isn’t submitted to the server. Instead, it’s used locally, by the user’s browser, to construct a web page by using a client-side script. But if the website doesn’t validate the user-submitted locale parameter, an attacker can trick users into visiting a URL like this one:
    URL参数并未提交到服务器。相反，它是由用户的浏览器本地使用客户端脚本构建网页。但如果网站不验证用户提交的本地语言参数，攻击者可以欺骗用户访问像这样的URL。
https://example.com?locale=
    The site will embed the payload on the user’s web page, and the victim’s browser will execute the malicious script.
    该网站将在用户的网页上嵌入有效载荷，而受害人的浏览器将执行恶意脚本。
    DOM XSS may sound a lot like reflected XSS at first. The difference is that the reflected XSS payload gets sent to the server and returned to the user’s browser within an HTTP response. On the other hand, the DOM XSS payload is injected onto a page because of client-side code rendering user input in an insecure manner. Although the results of the two attacks are similar, the processes of testing for them and protecting against them are different.
    DOM XSS一开始可能听起来很像反射型XSS。区别在于，反射型XSS有效载荷被发送到服务器并在HTTP响应中返回给用户的浏览器。另一方面，DOM XSS有效载荷是通过客户端代码以不安全的方式呈现用户输入而注入到页面中的。尽管这两种攻击的结果类似，但针对它们进行测试和保护的过程却不同。
    The user input fields that can lead to reflected and DOM-based XSS aren’t always URL parameters. Sometimes they show up as URL fragments or pathnames.
     URL fragments
    are strings, located at the end of a URL, that begin with a
     #
    character. They are often used to automatically direct users to a section within a web page or transfer additional information. For example, this is a URL with a fragment that takes the user to the
     #about_us
    section of the site’s home page:
    可以导致反射和基于DOM的XSS的用户输入字段并不总是URL参数。有时它们会出现在URL片段或路径名中。 URL片段是位于URL末尾的字符串，以＃字符开头。它们经常用于自动将用户引导到Web页面中的某个部分或传输额外信息。例如，以下是带有片段的URL，将用户带到站点主页的＃about_us部分：
https://example.com#about_us
    We’ll talk more about the components of a URL in
     Chapter 7