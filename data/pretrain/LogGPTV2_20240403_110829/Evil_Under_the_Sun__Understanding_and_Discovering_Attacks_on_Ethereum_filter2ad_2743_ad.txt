tion of the nodes in the money Ô¨Çow chains. We found that in
19% of money Ô¨Çow chains, illegal proÔ¨Åt was transferred via at
least one money mule. Also intriguing is the observation that
the adversary always converts Ethereum tokens (e.g., Beauty
Coin, Smart Coin, SmartMesh Token) into Ethers before mov-
ing the fund into a long money Ô¨Çow chain, possibly due to
the belief that the latter have better protected values than the
former. For this purpose, a set of Ethereum Exchanges are
used. Figure 6(b) illustrates seven Ethereum Exchanges dis-
covered from our dataset. There are two types of exchange
services in Ethereum: centralized Exchanges (e.g., ShapeShift,
Binance, Poloniex, Gate.io and BitUN.io) and decentralized
Exchanges (e.g., EtherDelta and IDEX). From the data we
collected, apparently miscreants are more in favor of the de-
centralized ones. Particularly, EtherDelta shows up in 53%
(a) Role overlap of attacker EOAs
(b) ProÔ¨Åts of three Fomo3D
: successful
campaigns.
rate;
: proÔ¨Åt.
Figure 7: Dapp attack incident analysis.
of the attack incidents, while ShapeShift, the most popular
one among centralized Exchanges, is just found in 21% of the
incidents.
3.3 Analyzing Attacker EOAs
Then we looked into the role and relationships of 227 attacker
EOAs discovered in our study. Our study shows that attacker
EOAs are organized through a hierarchical structure during
an attack incident, with each of them playing one or more
roles. Further revealed in our study is the competition relation
among different attacker EOAs when exploiting the same
Dapp, across different attack incidents, as elaborated below.
Roles in an incident. We analyzed the roles of 227 attacker
EOAs by Ô¨Årst categorizing them based on the attack stages
(Section 3.2) at which they appeared and then manually in-
vestigating their transactions to understand their behaviors.
More speciÔ¨Åcally, we observed that 19 EOAs acted as exploit
developers which created and tested exploit contracts at the
Ô¨Årst stage (see Section 3.2); 168 EOAs invoked exploit con-
tracts or ran other exploit code, thereby likely playing the
role of attack operators; further 21 EOAs apparently managed
the attack cost inÔ¨Çow through transferring attack cost into
the exploit contracts via intermediary EOAs, behaving like
money managers, and 23 EOAs were found to relay attack
proÔ¨Åts, as money mules did.
Our study shows that attacks on Dapps are organized
through a hierarchical structure in which every actor has a
well-deÔ¨Åned role. There is only a small overlap among differ-
ent roles: Figure 7(a) shows that rarely do we see that an EOA
010203040Number of nodes0.00.20.40.60.81.0Ratio of money flow chains24302,3,0780549/0;045078,99,.4507,947824302:0824302,3,0780549/0;045078,99,.4507,947824302:08








2018-07-092018-07-112018-07-132018-07-152018-07-172018-07-192018-07-212018-07-23Time(day)050100150200250Profit(Eth)Campaign1Campaign2Campaign30.00.20.40.60.81.0Succussful Rateplayed more than one role, except that 21% of the exploit
developers also acted as attack operators.
Campaign competition. As mentioned earlier, 39% of the
victim Dapps have been exploited in more than one attack
incident. Interestingly, our research reveals the presence of
competitions among different attack campaigns on the same
Dapp. Here, a campaign is considered to include all attacker
EOAs showing up in an attack incident against a target Dapp.
Figure 7(b) compares the cumulative attack proÔ¨Åts of three
campaigns on Fomo3D from 2018/06/15 to 2018/08/31. Each
of them involved a completely different set of EOAs from
others and therefore presumably they were organized by dif-
ferent parties. Campaign 1 Ô¨Årst launched a bad randomness
attack on the Dapp on 2018/06/15, followed by Campaign 2
on 2018/07/08 and Campaign 3 on 2018/07/21. Here we use
the exploit success rate, deÔ¨Åned as the number of successful
exploit transactions (i.e., receipt status is 1) among all exploit
transactions, to measure attack effectiveness. Although start-
ing relatively late, Campaign 2 evolved its exploit contract on
2018/7/20 to increase its effectiveness. Hence, it made more
proÔ¨Åts than the other two campaigns. For Campaign 3, even
though it apparently was quite effective (see Figure 7(b)), the
attack only lasted for a short period of time and earned only a
small amount of proÔ¨Åt, probably due to the fact that Fomo3D
had already lost most of its money during the attack.
3.4 Analyzing Dapp Intervention
We further studied how Dapp owners responded to the attack
incidents by analyzing Dapp‚Äôs transactions after an attack oc-
curs. We observe some Dapp owners abandoned their Dapps
(33 out of 56 victim Dapps), while others tried to Ô¨Åght back,
through patching, hiding source code or controlling access to
the critical functions. None of them, however, is found to be
a perfect solution in our research.
Dapp patching. Patching a vulnerable Dapp is complicated
due to the immutability of the code stored on the blockchain.
A typical solution is to create a new contract with the patch.
To understand this procedure, we extracted Dapp‚Äôs original
addresses from its website‚Äôs archive. We found that Ô¨Åve of
the Dapps analyzed in our research updated their contract
addresses after being attacked, and one used delegatecall()
for patching. Interestingly, three Dapps were attacked again
after patching. For instance, Lucky Blocks changed its address
twice to Ô¨Åx vulnerabilities yet still ending up being exploited.
Closed source. Another way is security by obscurity, hiding
source code in an attempt to raise the challenge in reverse-
engineering. A prominent example is Lucky Blocks, a gam-
bling game, whose source code was removed right after a bad
randomness attack. Indeed, we did not see any more attack on
the Dapp after that. This approach, however, could make some
Dapp less trustworthy. Again, for Lucky Blocks, through ana-
lyzing its PRNG in the patched version, we discovered that
the Dapp owner stealthily adjusted the code to limit the range
function getRandom () returns ( var r0 ) {
...
var temp0 = memory [0 x40 :0 x60 ];
memory [ temp0 : temp0 + 0 x20 ] = block . difficulty ;
...
return keccak256 ( memory [ temp1 : temp1 + temp0
- temp1 + 0 x54 ]) % 0 x64 ; //0 x64 =100}
(a)
function getRandom () returns ( var r0 ) {
...
var var1 = 0x5c; //92
var temp0 = memory [0 x40 :0 x60 ];
memory [ temp0 : temp0 + 0 x20 ] = block . difficulty ;
...
var var2 = keccak256 ( memory [ temp3 : temp3 +( temp2 +0 x20 ) - temp3 ]);
if ( var1 ){ return var2 % var1;} else { assert ();}}
(b)
Figure 8: PRNG codes of Lucky Blocks.
of the randomly-produced lucky number, thereby reducing
the winning chance by 8% (Figure 8). The Dapp later indeed
shows higher owner-side revenue.
Administrator list. Finally, we found that 33 of the 56 victim
Dapps utilized administrator lists to restrict access to their
critical functions. However, the administrator list cannot stop
the attack that exploits the vulnerabilities in an authentication
mechanism to bypass access control. An example is the attack
on Morph [45]. Also, this strategy requires the identiÔ¨Åcation
of critical functions beforehand.
4 Finding New Attacks
In this section, we show how the new CTI discovered can help
Ô¨Ånd new attacks, including those on 0-day victim Dapps. Our
key insight is that even though speciÔ¨Åc operations may vary
across different types of attacks on different Dapps, the high-
level behavior patterns (e.g., testing exploit contracts) are
relatively stable in each attack stage (e.g., attack preparation
stage), and can therefore be learned from a set of transactions
and their execution traces. Here we elaborate on a methodol-
ogy, called DEFIER, that utilizes the sequence of transactions
and the operations they trigger to recover attack footprints
and determine the stage of an exploit.
4.1 DEFIER: Idea and Design
DEFIER includes two components, Preprocessing and
Sequence-based ClassiÔ¨Åcation. Preprocessing takes as its
input a set of transactions directly interacting with a Dapp,
automatically extending the set to include those indirectly
related to the Dapp (Section 4.2). These transactions are then
clustered into groups based on the similarity of their execution
traces and the closeness in their invocation times (within a
short window). These transaction groups are then utilized by
Sequence-based ClassiÔ¨Åcation to re-construct potential attack
footprints, in terms of a transaction sequence from multiple
EOAs (Section 4.3). More speciÔ¨Åcally, for each sequence of
transactions (modeled as vectors through graph embedding),
we propose a novel embedding technique to convert the se-
quence into a feature vector that captures the latent intent of
the sequence (through an attention model to focus on each
transaction‚Äôs interactions with the Dapp and an analysis on the
relation between transactions). Those vectors then go through
a multi-class classiÔ¨Åer to output the attack stage they belong
to if they are indeed exploit attempts
Example. To explain how DEFIER works, here we walk
through its workÔ¨Çow using an attack incident on Suoha, a
victim Dapp found at the propagation stage of a bad random-
ness attack on Fomo3D. To investigate this attack incident,
DEFIER identiÔ¨Åes the latent intent (i.e., exploit calling at the
propagation stage) by (1) clustering similar transactions from
EOAs across different Dapps (e.g., transactions that launch
the same exploit on multiple Dapps) and (2) then analyzing
those transactions to Ô¨Ånd the latent intent.
More speciÔ¨Åcally, DEFIER Ô¨Årst runs Preprocessing to
gather transactions, whose to Ô¨Åelds or execution traces con-
tain Suoha‚Äôs address. From those transactions, 286 EOAs
(including those calling 7 contracts to interact with the Dapp)
are extracted. Further, we gather the EOAs‚Äô transactions with
other Dapps, those with a small TG distance with the transac-
tions with Suoha. In this way, 11,088 transactions are iden-
tiÔ¨Åed and further clustered into 142 groups with an average
TG edit distance of 0.2 and a time window of 1.5 hours. For
each of these groups, Sequence-based ClassiÔ¨Åcation Ô¨Årst runs
graph embedding to convert each transaction to a vector and
each group to a vector sequence and then utilizes an LSTM
model to analyze the relation between the vectors in the se-
quence, converting each sequence to a feature vector. Then, a
multilayer perception (MLP) classiÔ¨Åer, trained over the trans-
actions from reported attacks, labels 3 of the sequences as
attack propagation and the remaining 139 as legitimate.
4.2 Preprocessing
The Preprocessing step is meant to gather and cluster relevant
transactions to analyze all EOAs‚Äô operations and their intents
on a Dapp. Such intents sometimes cannot be proÔ¨Åled only
by the transactions directly interacting with the Dapp. For
example, one can only recognize the intent to reuse exploit
code on other Dapps (the propagation stage) by looking at
the transactions on other targets, which look similar to the
exploits on the Dapp (Section 3). Hence in our research, we
include all such similar transactions, even though they are
not directly related to the Dapp. Altogether, we consider the
following two types of transactions during preprocessing:
‚Ä¢ Dapp transactions. We collect the transactions with
the Dapp and those that internally communicate with the
Dapp (the transactions do not have the target Dapp ad-
dress in their To Ô¨Åelds but invoke its functions as discov-
ered from their traces). For this purpose, our implemen-
Figure 9: Sequence representation
tation relies on APIs get_normal_txs_by_address [3] and
get_internal_txs_by_address [4] from Etherscan [2] to iden-
tify those transactions.
‚Ä¢ Semantically-similar transactions. Given those Dapp trans-
actions, to better understand the operational intents of an EOA,
we also gather from the same EOA the transactions with simi-
lar execution traces or occurring concurrently.
SpeciÔ¨Åcally, we Ô¨Årst identify all the EOAs directly inter-
acting with the Dapp, including the addresses directly calling
the Dapp and the ones creating a contract to invoke the call.
To this end, we fetch the transactions whose to Ô¨Åelds or exe-
cution traces contain the Dapp addresses, to identify a set of
EOAs and contracts. Then, given a contract S interacting with
the Dapp via a transaction txs, we collect all the EOAs who
have created, called or transferred money into the contract S.
In this way, we discover all relevant EOAs, which allows us
to use the transactions to proÔ¨Åle the behaviors of each EOA.
Such proÔ¨Åling is done by running Algorithm 1 on seman-
tically similar transactions. In particular, given an EOA u
interacting with the Dapp via a transaction txs, we acquire all
her transactions whose TG distances with txs are within th (a
threshold). In our implementation, we set th to 3 based on an
empirical study (Section 3).
Transaction clustering. As mentioned in Section 3, an oper-
ational intent (e.g., exploit testing, multiple-step game playing
operations) sometimes consists of several transactions from
multiple EOAs. To Ô¨Ånd the transaction clusters under the
same operational context, we utilize the algorithm described
in Section 3 to group the transactions with similar execution
traces or happened within a small time period.
Account de-noising. Complicating our analysis effort is the
presence of Dapp owner EOAs and library contracts (e.g.,
a game playerbook contract for managing players‚Äô informa-
tion or a contract supporting access to external network data),
which should not be included in an attack investigation. To re-
move the noise, we Ô¨Årst identify the library contracts through
a Dapp‚Äôs call execution traces: those invoked proactively by
the Dapp are considered to be library contracts. For this pur-
pose, we Ô¨Ånd all the contracts recorded by the call execution
trace, whose ‚Äúfrom" Ô¨Åelds are the Dapp address and input
Ô¨Åelds are not ‚Äú0x". To handle the library contracts, which had
Bi-LSTMBi-LSTMBi-LSTMMLPeoaiditx1tx2txk............x1x2xky'forwardintentbackward intente1e2ekhŒ±1Œ±2Œ±kAlgorithm 1: Transactions Extension Algorithm
Data: Dapp: a dapp and its addresses.
1 begin
EOAs = extract_eoa_of_dapp(Dapp)
interval = 1 day
threshold = 3
for EOA ‚àà EOAs do
txs = get_txs_by_DappandEoa(Dapp, EOA)
for tx ‚àà txs do
date = tx_date(tx)
focus_period = calculate_period(date, interval)
extend_txs = get_tx_in_period(EOA, date_period)
picked_txs = [etx for etx in extend_txs if distance(tx,
etx) ‚â§ threshold]
save(picked_txs)
end for
end for
2
3
4
5
6
7
8
9
10
11
12
13
14
15 end
not been proactively called yet, we conduct a static analysis
on the bytecode of a Dapp. In particular, we decompile the
bytecode using [7], and then extract the library contract ad-
dresses using a regex "0x[a-fA-F0-9]{40}". Also, we retrieve
Dapp creation transaction receipts (i.e., the receipts contain-
ing the contractAddress Ô¨Åeld of the Dapp address, which
have been collected during the library contracts extraction) to
extract the Dapp creator addresses from the from Ô¨Åeld.
4.3 Sequence-based ClassiÔ¨Åcation
From each transaction cluster, we form a transaction se-
quence, with transactions ordered by their timestamps. For a
transaction sequence, we determine whether it describes an
attack on a Dapp by predicting its latent intent (e.g., exploit
testing, attack propagation, etc.) based upon the knowledge
about other sequences with similar semantics. A semantically-
similar transaction sequence ÀÜs related to a Dapp attack stage
y is represented as 2-tuple ({txi|i = 1...k}, y), where {txi|i =
1...k} are transactions in ÀÜs and y is the label of an attack stage.
The goal of the sequence-based classiÔ¨Åcation is to Ô¨Ånd the
class label y for an input sequence ÀÜs given the classiÔ¨Åer‚Äôs
model parameters Œ∏, i.e., y‚Ä≤ = argmax Pr(y| ÀÜs, Œ∏), where the
parameters are learnt from a training dataset. For this purpose,
we Ô¨Årst convert the transaction sequence ÀÜs into a vector se-
quence, with each element also being a vector that represents
its corresponding transaction graph through a graph embed-
ding. This sequence is then fed to an LSTM model to generate
a vector h that describes the relation between transactions and
highlights the information related to malicious behavior. Here,
we choose LSTM, a modiÔ¨Åed RNN, since it is designed to
learn the long-term dependency relations among the elements
on a sequence [28], which is critical for identifying the pat-
terns that link transactions together at different attack stages.
The vector is later classiÔ¨Åed by a multilayer perceptron (MLP)
to determine whether it is indeed related to an attack stage.
Sequence representation. As illustrated in Figure 9, each
transaction txi in ÀÜs, as described by its associated execution
traces tgi, represents an interaction between the correspond-
ing Dapp and EOA. However, the transaction‚Äôs execution can