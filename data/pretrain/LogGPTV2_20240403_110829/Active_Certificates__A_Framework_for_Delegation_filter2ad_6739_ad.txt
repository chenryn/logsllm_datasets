previous version of the Ninja platform [18] used RMI-
style interfaces, which were a collection of method sig-
natures (i.e. a Java interface). To interpose on a service
that uses a method interface it is necessary to provide an
implementation of each method. Message interfaces, on
the other hand, allow a certiﬁcate to operate as a message
ﬁlter, with only partial or no knowledge of the interface.
This makes expressing “vertical policies”, which are the
same for every request type, very natural.
(An example
of such vertical policy is a name certiﬁcate described in
Section 5.5.) Request-dependent “horizontal” policies can
also be easily represented using message interfaces by
branching on the message type. Even in this case, message
interfaces have the advantage of being able to adapt to
an evolving service interface by denying any unrecognized
request types. A policy that has both horizontal and vertical
components (this will be true of many policies in practice)
is also natural to represent in message interfaces; method
interfaces on the other hand would require code duplication
to implement the vertical components of policies.
This experience suggests that in other systems that use
messages to encode remote calls (e.g. RPC over SOAP [7]),
active certiﬁcates should be implemented as message ﬁlters
instead of RPC wrappers.
6 Related Work
A number of certiﬁcate systems have attempted to in-
corporate the concept of delegation. For example, proxy
certiﬁcates [34] are a proposed way to add delegation to
X.509 [8]; SPKI [10] uses delegation as a central concept
in its operation. Both systems include a mechanism to
restrict delegation: proxy certiﬁcates allow one to specify
a restriction in a (yet-to-be-speciﬁed) policy language, and
SPKI supports application-speciﬁc restriction tags. In both
cases, further standardization on application semantics is
if not general-purpose,
required, and this process must be repeated for each new
application domain.
Several systems have used a general-purpose program-
ming language to specify policy. PolicyMaker [4] is a
system that manages collections of assertions, which can
include arbitrary programs in a safe version of AWK, and
computes policy decisions on their basis. Proof-Carrying
Certiﬁcates [3] use proofs written in Twelf [29], which
is a powerful,
language. Both
systems, in typical usage, lack the transparency of active
certiﬁcates. PolicyMaker applications must deﬁne security
attributes that are relevant and specify local policy in
terms of them. Proof-Carrying Certiﬁcates must prove
an application-dependent theorem, with local policy repre-
sented by axioms. However, a variant of PolicyMaker could
be used to produce a system similar to active certiﬁcates,
wherein an entire request is passed as a query to the
policy management system, and a language appropriate for
parsing such requests is used to deﬁne assertions. Such
a system would lack the full proxying aspects of active
certiﬁcates, and have a less general area of application
than PolicyMaker, but it would combine a number of their
strengths.
Proxy-based solutions can be used to implement general
delegation policies with complete transparency. Several
projects have used proxy technology to perform security
adaptation [32, 12]. However, maintaining an online proxy
imposes signiﬁcant computational, connectivity, and man-
agement overhead on its owner. In addition, prevalence of
such proxies might put excessive bandwidth requirements
on the infrastructure because of the resulting inefﬁcient
routes. Most importantly, the proxy has to maintain its
owner’s private key, which makes it an attractive attack
target.
Active certiﬁcates avoid all of these pitfalls by executing
at the Resource. They are, however, less expressive than
proxies, since they are instantiated only temporarily during
access to the Resource, and cannot maintain persistent state.
To implement policies that require persistent state, a hybrid
solution is possible, wherein an online proxy stores the
persistent state necessary and an active certiﬁcate is used
to specify policy with input from the proxy. The proxy does
not need to store its owner’s public key, instead it can have
its own key recognized by the certiﬁcate. Such a solution
combines the expressive power of proxies with the security
advantages of active certiﬁcates, since the proxy is only
trusted to maintain correct state, but not to authorize use
of Alice’s rights.
7 Future Work
Although active certiﬁcates provide a very powerful del-
egation mechanism, it is important to be able to manage
certiﬁcates effectively in order to exploit their full potential.
In a complicated system with a large pool of available
certiﬁcates, it is important to have automated search mech-
anisms to ﬁnd a sequence of certiﬁcates that will allow
Bob to use the Resource. There has been much research
into the problem of deciding authentication [20, 23, 5, 6]
with varied results; however, it should be clear that the
use of programs to specify policies makes this problem
undecidable. Nonetheless, we hope to be able to attach
attributes to certiﬁcates to make searches for a trust path
feasible in practice, by trying to express which certiﬁcates
may be useful to solve a particular authentication problem.
For example, if a higher-level policy language is translated
into active certiﬁcates, such attributes could take the form
of the original high-level language source. This would
allow active certiﬁcates to be managed in the same way as
conventional certiﬁcates.
Such “translation annotations” can also serve to check
certaincertiﬁcate properties, if it is possible to prove that the
certiﬁcate code is indeed a semantically equivalent transla-
tion of the annotation [30]. Such a proof would ensure that
the certiﬁcate program is bound by any restrictions that are
inherent in the source language. For example, a translation
from a policy language that has a bounded execution time
can ease concerns of resource misuse by the certiﬁcate. We
are also investigating other properties that may be useful to
prove about active certiﬁcates, and other ways of proving
them.
Finally, we are evaluating the performance impact of
using active certiﬁcates. One promising feature of active
certiﬁcates is that complex functions such as interpreting
high-level policies or ﬁnding a trust path are shifted from
servers onto clients;
this allows us to exploit the vast
disparities in the aggregate computing power of services
and their large user bases to improve performance.
8 Conclusions
In this paper we presented a novel approach to delegation
It combines the strengths of
based on active certiﬁcates.
previous approaches, including expressivity, transparency,
ofﬂine operation, and convenience;
these features make
active certiﬁcates useful tools for expressing delegation.
We also explained how to use active certiﬁcates as a
platform to build larger systems;
this approach has im-
portant advantages such as extensibility. We performed a
formal security analysis of active certiﬁcates and built a
prototype implementation validating our techniques. Active
certiﬁcates are an exciting new direction in delegation and
present many directions for further research.
9 Acknowledgments
We would like to thankAdrian Perrig, Mark Miller, David
Wagner, Dawn Song, Oleg Kolesnikov, and the anonymous
referees for insightful comments on earlier versions of this
paper.
References
[1] M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. A
calculus for access control in distributed systems. ACM
Transactions on Programming Languages and Systems,
15(4):706–734, September 1993.
[2] American National Standards
Public key
cryptography for the ﬁnancial service industry: Certiﬁcate
management. ANSI X9.57-1997, 1997.
Institute.
[3] A.W. Appel and E.W. Felten. Proof-carrying authentication.
In 5th ACM Conference on Computer and Communications
Security, pages 52–62, Singapore, November 1999. ACM
Press.
[4] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust
management.
In Proceedings of the IEEE Symposium on
Research in Security and Privacy, Oakland, CA, May 1996.
IEEE Computer Society Press.
[5] M. Blaze, J. Feigenbaum, and M. Strauss. Compliance
checking in the PolicyMaker trust management system. In
Hirschfeld [21], pages 254–274.
[6] D. Clarke, J.-E. Elien, C. Ellison, M. Fredette, A. Morcos,
and R.L. Rivest. Certiﬁcate chain discovery in SPKI/SDSI.
http://theory.lcs.mit.edu/˜rivest/
publications.html.
[7] WWW Consortium. Simple object access protocol (SOAP)
[10] C.M. Ellison, B. Frantz, B. Lampson, R. Rivest, B.M.
Internet
Thomas, and T. Ylonen. SPKI certiﬁcate theory.
Draft, March 1998. Expires: 16 September 1998.
[11] A. Fox, S. D. Gribble, Y. Chawathe, and E. A. Brewer.
Adapting to network and client variation using active
proxies: Lessons and perspectives. Special Issue of IEEE
Personal Communications on Adaptation, August 1998.
[12] A. Fox and S.D. Gribble. Security on the move: Indirect
In 2nd ACM International
authentication using Kerberos.
Conference on Mobile Computing and Networking, Novem-
ber 1996.
[13] G.Back, W.C. Hsieh, and J. Lepreau.
Processes in
KaffeOS: Isolation, resource management, and sharing in
Java.
In Fourth Symposium on Operating Systems Design
and Implementation (OSDI), October 2000.
[14] I. Goldberg, S. Gribble, D. Wagner, and E. Brewer. The
Ninja Jukebox. In Second USENIX Symposium on Internet
Technologies and Systems (USITS), Boulder, CO, October
1999.
1.1. http://www.w3.org/TR/SOAP/.
[8] Consultative Committee on International Telegraphy and
Recommendation X.509: The Directory—
Telephony.
Authentication Framework, 1988.
[9] T. Dierks and C. Allen. The TLS prtocol version 1.0.
RFC2246, January 1999.
[15] L. Gong. Inside Java 2 Platform Security. Addison-Wesley,
June 1999.
[32] S. Ross, J. Hill, M. Chen, A. Joseph, D. Culler, and
E. Brewer. A composable framework for secure multi-
modal access to Internet services from Post-PC devices. In
Third IEEE Workshop on Mobile Computing Systems and
Applications (WMCSA), to appear, Monterey, CA, 2000.
[33] A. Rudys, J. Clements, and D.S. Wallach. Termination
In Network and Distributed
in language-based systems.
Systems Security Symposium ’01, 2001.
[34] S. Tuecke.
Internet X.509 public key infrastructure proxy
certiﬁcate proﬁle. Internet Draft, 2001.
[35] S.R. van den Berg. Procmail - autonomous mail processor.
http://www.procmail.org/.
[36] J.R. von Behren, S. Czerwinski, A.D. Joseph, E.A. Brewer,
and J. Kubiatowicz. NinjaMail: The design of a high
performance clustered, distributed e-mail system.
In First
International Workshop on Scalable Web Services, Toronto,
Canada, August 2000.
[16] J. Gosling, B. Joy, and G. Steele. The Java Language
Speciﬁcation. Addison Wesley, 1997.
[17] S. Gribble, M. Welsh, R. von Behren, E. Brewer,
D. Culler, N. Borisov, S. Czerwinski, R. Gummadi, J. Hill,
A. Josheph, R. Katz, Z. Mao, S. Ross, and B. Zhao.
The Ninja architecture for robust Internet-scale systems and
services. Special Issue of Computer Networks on Pervasive
Computing, March 2001.
[18] S.D. Gribble, M.Welsh, E.A. Brewer, and D.Culler. The
MultiSpace: An evolutionary platform for infrastructural ser-
vices. In Proceedings of the 1999 USENIX Annual Technical
Conference (USENIX-99), pages 157–170, Berkeley, CA,
June 6–11 1999. USENIX Association.
[19] P. Gutmann. X.509 style guide.
http://www.cs.auckland.ac.nz/˜pgut001/
pubs/x509guide.txt, October 2000.
[20] M.H. Harrison, W.L. Ruzzo, and J.D. Ullman. Protection in
operating systems. Communications of the ACM, 19(8):461–
471, 1976.
[21] R. Hirschfeld, editor. Financial Cryptography, Anguilla,
British West Indies, February 1998.
[22] J. Howell and D. Kotz. A formal semantics for SPKI.
In
6th European Symposium on Research in Computer Security,
pages 140–158, 2000.
[23] A.K. Jones, R.J. Lipton, and L. Snyder. A linear time
algorithm for deciding security. In 17h IEEE Symposium on
the Foundations of Computer Science, pages 33–41, 1976.
In
[24] P. Kocher. On certiﬁcate revocation and validation.
Hirschfeld [21], pages 172–177.
[25] S. Micali. Efﬁcient certiﬁcate revocation. Technical Memo
MIT/LCS/TM-542b, Massachusetts Institute of Technology,
Laboratory for Computer Science, March 1996.
[26] Microsoft. Microsoft .NET.
http://www.microsoft.com/net/.
[27] Sun Microsystems. Sun Open Net Environment (Sun ONE).
http://www.sun.com/software/sunone/.
[28] M. Naor and K. Nissim. Certiﬁcate revocation and certiﬁcate
update.
the 7th USENIX Security
Symposium, pages 217–228, Berkeley, January 26–29 1998.
Usenix Association.
In Proceedings of
[29] F. Pfenning and C. Schurmann. System description: Twelf
— a meta-logical framework for deductive sstems. In 16th
International Conference on Automated Deduction (CADE-
16), Trento, Italy, June 1999.
[30] A. Puneli, M. Siegel, and E. Signerman.
Translation
validation.
In 4th International Conference on Tools and
Algorithms for the Construction and Analysis of Systems,
Lisbon, Portugal, March 1998.
[31] R. Rivest. Can we eliminate certiﬁcate revocation lists? In
Hirschfeld [21], pages 178–183.