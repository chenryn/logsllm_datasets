------------+--------+-----------+----------+-----------------------------------------  
 city_id    | bigint |           | not null | nextval('cities_city_id_seq'::regclass)  
 name       | text   |           | not null |   
 population | bigint |           |          |   
Partition of: cities FOR VALUES IN ('a', 'b')  
Indexes:  
    "idx_cities_ab_2" btree (population)  
Check constraints:  
    "city_id_nonzero" CHECK (city_id <> 0)  
postgres=# \d cities_cd  
                               Table "public.cities_cd"  
   Column   |  Type  | Collation | Nullable |                 Default                   
------------+--------+-----------+----------+-----------------------------------------  
 city_id    | bigint |           | not null | nextval('cities_city_id_seq'::regclass)  
 name       | text   |           | not null |   
 population | bigint |           |          |   
Partition of: cities FOR VALUES IN ('c', 'd')  
Check constraints:  
    "city_id_nonzero" CHECK (city_id <> 0)  
```  
在另一个分区上，创建一个本地索引。并且不将这个索引attach到主表的全局壳子索引上。  
那么在删除主表索引时，这个本地索引不会被自动删除。  
```  
postgres=# create index idx_cities_cd_2 on cities_cd (population );  
CREATE INDEX  
postgres=# drop index idx_cities_2;  
DROP INDEX  
postgres=# \d cities  
                                Table "public.cities"  
   Column   |  Type  | Collation | Nullable |                 Default                   
------------+--------+-----------+----------+-----------------------------------------  
 city_id    | bigint |           | not null | nextval('cities_city_id_seq'::regclass)  
 name       | text   |           | not null |   
 population | bigint |           |          |   
Partition key: LIST ("left"(lower(name), 1))  
Number of partitions: 2 (Use \d+ to list them.)  
postgres=# \d cities_ab  
                               Table "public.cities_ab"  
   Column   |  Type  | Collation | Nullable |                 Default                   
------------+--------+-----------+----------+-----------------------------------------  
 city_id    | bigint |           | not null | nextval('cities_city_id_seq'::regclass)  
 name       | text   |           | not null |   
 population | bigint |           |          |   
Partition of: cities FOR VALUES IN ('a', 'b')  
Check constraints:  
    "city_id_nonzero" CHECK (city_id <> 0)  
postgres=# \d cities_cd  
                               Table "public.cities_cd"  
   Column   |  Type  | Collation | Nullable |                 Default                   
------------+--------+-----------+----------+-----------------------------------------  
 city_id    | bigint |           | not null | nextval('cities_city_id_seq'::regclass)  
 name       | text   |           | not null |   
 population | bigint |           |          |   
Partition of: cities FOR VALUES IN ('c', 'd')  
Indexes:  
    "idx_cities_cd_2" btree (population)  
Check constraints:  
    "city_id_nonzero" CHECK (city_id <> 0)  
```  
## 分区索引好处  
分区索引不被全局管理，比较灵活，但是管理麻烦一些。  
好处是不同的分区可以拥有不同的索引定义。在一些数据特殊管理的场景很灵活。  
例如某些分区会经常检索A字段，但是某些分区确经常检索B字段，那么就可以为不同的分区创建不同的本地索引，而不是全局一起构建。可以节约一些成本，但是管理成本可能会上升。  
## 元信息  
元数据中，主表索引显示为'I'类型，分区上的索引显示为'i'类型。  
```  
postgres=# select relname,relkind from pg_class where relname ~ 'citi';  
      relname       | relkind   
--------------------+---------  
 idx_cities_1       | I    # 分区表 - 主表上的索引  
 cities_ab          | r    # 分区表 - 分区表  
 cities_ab_name_idx | i    # 分区表 - 分区表上的索引  
 cities_city_id_seq | S    # 序列  
 cities             | p    # 分区表 - 主表  
(5 rows)  
```  
解释relkind中的含义：  
```  
I = partiton table global index,  分区表 - 主表上的索引  
r = ordinary table,               普通表  
i = index,                        普通表的索引，或者分区表分区上的本地索引  
S = sequence,                     序列  
t = TOAST table,                  切片表（变长字段压缩后超过BLOCK的1/4时，会存到切片表中）  
v = view,                         视图  
m = materialized view,            物化视图  
c = composite type,               自定义复合类型  
f = foreign table,                外部表  
p = partitioned table             分区表 - 主表  
```  
## 小结  
PostgreSQL 11 允许对分区表的主表创建索引，并内部支持了全局索引的管理机制（包括依赖、自动attach等）。  
全局索引带来的好处，  
1、当删除全局索引时，会将所有分区的索引自动删除。  
2、当新增分区时，会自动创建与全局索引一致的索引（假设这个分区已有这样的索引，那么会自动将已有索引attach到全局索引下，便于管理）  
3、对分区表创建索引时，会自动在所有分区下创建本地索引，并将分区本地索引ATTACH到全局索引下便于管理。  
另外，全局索引还有一种壳子模式，即使用only关键字创建，它的好处：  
1、使用ONLY关键字在分区表-主表上创建索引时，索引状态为INVALID，表示新建分区时，不会自动添加这个同类结构的索引，也不会自动ATTACH已有索引到这个全局索引下面。  
2、使用全局索引的壳子模式，对不同的分区采用不同的索引，仅对需要用于管理的索引ATTACH到这个壳子中来管理。可以满足一些特殊业务场景（例如某些分区会经常检索A字段，但是某些分区确经常检索B字段，那么就可以为不同的分区创建不同的本地索引，而不是全局一起构建。可以节约一些成本，但是管理成本可能会上升。）。  
PostgreSQL 11的全局索引使用非常灵活。  
## 参考  
https://www.postgresql.org/docs/devel/static/sql-alterindex.html  
https://www.postgresql.org/docs/devel/static/sql-createindex.html  
https://www.postgresql.org/docs/devel/static/catalog-pg-class.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")