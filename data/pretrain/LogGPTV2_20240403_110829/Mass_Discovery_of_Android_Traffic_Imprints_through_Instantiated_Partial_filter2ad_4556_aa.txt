title:Mass Discovery of Android Traffic Imprints through Instantiated Partial
Execution
author:Yi Chen and
Wei You and
Yeonjoon Lee and
Kai Chen and
XiaoFeng Wang and
Wei Zou
Mass Discovery of Android Tra(cid:128)ic Imprints through Instantiated
Partial Execution
Yi Chen1,3, Wei You2, Yeonjoon Lee2, Kai Chen1,3∗, XiaoFeng Wang2∗, Wei Zou1,3
1{SKLOIS§, CAS-KLONAT†, BKLONSPT‡}, Institute of Information Engineering, Chinese Academy of Sciences
2School of Informatics and Computing, Indiana University Bloomington
3School of Cyber Security, University of Chinese Academy of Sciences
{chenyi,chenkai,zouwei}@iie.ac.cn,{youwei,yl52,xw7}@indiana.edu
ABSTRACT
Monitoring network behaviors of mobile applications, controlling
their resource access and detecting potentially harmful apps are
becoming increasingly important for the security protection within
today’s organizational, ISP and carriers. For this purpose, apps
need to be identi(cid:128)ed from their communication, based upon their
individual tra(cid:129)c signatures (called imprints in our research). Cre-
ating imprints for a large number of apps is nontrivial, due to the
challenges in comprehensively analyzing their network activities
at a large scale, for millions of apps on today’s rapidly-growing
app marketplaces. Prior research relies on automatic exploration
of an app’s user interfaces (UIs) to trigger its network activities,
which is less likely to scale given the cost of the operation (at least 5
minutes per app) and its e(cid:130)ectiveness (limited coverage of an app’s
behaviors).
In this paper, we present Tiger (Tra(cid:129)c Imprint Generator), a
novel technique that makes comprehensive app imprint generation
possible in a massive scale. At the center of Tiger is a unique instan-
tiated slicing technique, which aggressively prunes the program
slice extracted from the app’s network-related code by evaluat-
ing each variable’s impact on possible network invariants, and
removing those unlikely to contribute through assigning them con-
crete values. In this way, Tiger avoids exploring a large number of
program paths unrelated to the app’s identi(cid:128)able tra(cid:129)c, thereby
reducing the cost of the code analysis by more than one order of
magnitude, in comparison with the conventional slicing and execu-
tion approach. Our experiments show that Tiger is capable of recov-
ering an app’s full network activities within 18 seconds, achieving
over 98% coverage of its identi(cid:128)able packets and 0.742% false detec-
tion rate on app identi(cid:128)cation. Further running the technique on
over 200,000 real-world Android apps (including 78.23% potentially
harmful apps) leads to the discovery of surprising new types of
∗ Corresponding Authors.
§ State Key Laboratory of Information Security, IIE, CAS.
† Key Laboratory of Network Assessment Technology, CAS.
‡ Beijing Key Laboratory of Network Security and Protection Technology
.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:128)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:128)rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permi(cid:138)ed. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speci(cid:128)c permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, Texas, USA
© 2017 ACM. ISBN 978-1-4503-4946-8/17/10...$15.00
DOI: h(cid:138)p://dx.doi.org/0.1145/3133956.3134009
tra(cid:129)c invariants, including fake device information, hardcoded
time values, session IDs and credentials, as well as complicated
trigger conditions for an app’s network activities, such as human
involvement, Intent trigger and server-side instructions. Our (cid:128)nd-
ings demonstrate that many network activities cannot easily be
invoked through automatic UI exploration and code-analysis based
approaches present a promising alternative.
CCS CONCEPTS
•Security and privacy → Mobile and wireless security;
KEYWORDS
tra(cid:129)c signature, ISP, large scale, slicing, partial execution
1 INTRODUCTION
(cid:140)e pervasiveness of mobile devices mounts great pressure on to-
day’s network security infrastructures. Just like other desktop or
web applications, mobile apps are supposed to be under the mon-
itoring and protection of the security systems within enterprise,
ISP or carriers. Particularly, with the threat of potentially-harmful
apps (PHAs) [18] [10] [11] on the rise, there is a strong demand
for detecting them at the network level, using the anti-malware
systems deployed by individual organizations or mobile carriers
(through their Managed Security Services [16]). Even for legitimate
apps, those running on the personal devices brought by employees
to their work places (dubbed “bring your own device” or BYOD) are
increasingly required to be subject to the control of next-generation
(cid:128)rewalls (NGFW), for managing their access to corporate resources
(like bandwidth, internal servers, etc.) [17]. To serve these purposes,
most important here is identi(cid:128)cation of individual apps from their
communication tra(cid:129)c, before the PHA detection and access control
can happen. (cid:140)is, however, is by no means trivial. Di(cid:130)erent from
desktop applications, mobile apps typically are hard to be identi-
(cid:128)ed by their protocols and port numbers. Instead, they mainly use
HTTP protocol with their port numbers changing continuously
for every HTTP packet and rarely include app names within the
User-Agent header as recommended for identi(cid:128)cation. Also look-
ing for the servers the apps talk to (within the HOST (cid:128)eld of the
HTTP header) does not work either, simply because increasingly
the same host (o(cid:137)en belonging to third parties) serves many di(cid:130)er-
ent apps (e.g., Baidu Map SDK [4] for location services). (cid:140)erefore,
e(cid:130)ective techniques are needed to (cid:128)ngerprint individual apps from
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA815their network tra(cid:129)c, extracting their signatures (also called im-
prints in our study) from their packets at a large scale, given that
already tens of millions of apps are in the wild.
Imprint mass production: challenges. Note that app tra(cid:129)c im-
prints cannot be produced at a large scale through manual analysis,
as done by some NGFW companies today, which is in no position
to handle any substantial portion of legitimate apps on various
app markets, not even hundreds of thousands of PHAs reported
by VirusTotal [4]. (cid:140)ere are a(cid:138)empts to automate this process, for
example, through analyzing app tra(cid:129)c traces recorded by an ISP
to recover invariable and also distinguishing tokens for individual
apps [28]. A question is for a given app, how to systematically
generate such tra(cid:129)c before the invariants can be extracted. To
this end, large NGFW providers like Palo Alto Networks utilize dy-
namic analysis, running individual apps and trying to trigger their
network activities [31]. Techniques have been proposed to fuzz an
app’s user interfaces (UI) and enhance random testing tools such as
Monkey [3] for a more targeted exploration of di(cid:130)erent UI paths.
However, these techniques are less suitable for mass production of
precise app imprints, due to fundamental limitations of dynamic
analysis and UI fuzzing, which are hard to discover all network
activities the users can possibly trigger. Further, such analysis takes
time: actually, no one knows today how long an app needs to run
in order to disclose all its network activities or when it has indeed
been extensively explored [14] [13]. No techniques are available to
enable a truly large scale and comprehensive analysis of app tra(cid:129)c
for generating their network imprints.
Tiger. To address these challenges, we present a new technique
to support a large-scale discovery of Android app imprints. Our
system, called Tiger (Tra(cid:129)c Imprint Generator), is built upon a
highly e(cid:129)cient invariant recovery mechanism that only partially
executes an app under test, focusing on its code fragments directly
contributing to the formation of the invariable tokens within the
app’s tra(cid:129)c. To this end, Tiger employs a novel backward slicing
technique to work on every network API discovered in the app’s
code. Unlike a conventional slicing algorithm, our technique contin-
uously evaluates every program statement related to the network
API to discover variables which are unlikely to a(cid:130)ect any constant
value of the API’s output (network packets). Once found, such a
variable is immediately instantiated by assigning it an appropriate
concrete value so as to avoid further backtracking other statements
upstream that may have impacts on the variable. Essentially, this
approach automatically prunes the code slice for each network sink,
leaving only a small set of statements believed to contribute to
the creation of invariants (e.g., a special URL, a key-value pair, a
hidden app ID used by the developer) on the app’s tra(cid:129)c, thereby
cu(cid:138)ing down the cost for code analysis and dynamically executing
the slice. To further reduce the analysis complexity, Tiger also
identi(cid:128)es shared code across di(cid:130)erent slices and replaces their out-
put with concrete values generated in previous analysis. In this
way, only such a highly simpli(cid:128)ed slice needs to be executed for
recovering tra(cid:129)c tokens, which are then compared across those
produced by other apps to form the app’s unique tra(cid:129)c imprints.
(cid:140)is instantiated partial execution (IPE) technique is found to be
very e(cid:130)ective: in our evaluation, the IPE outperformed the conven-
tional slicing and execution approach by 12.42 times (Section 4.3).
On average, a commercial app was analyzed within 18 seconds
with all its network sinks fully covered. Compared with prior ap-
proaches (e.g., [14]), which dynamically recover tra(cid:129)c signatures
for app (cid:128)ngerprinting, Tiger produces richer tra(cid:129)c imprints, not
only package names, advertising identi(cid:128)ers (Ad-IDs) and URL, but
also keys and values extracted from HTTP headers and content
(Section 5.2). Particularly, when running our approach against a
prominent app usage identifer that generates easy-to-obtain sig-
natures [39], Tiger discovered 43.98% more packets (Section 4.2)
containing imprints. Further our study shows that among all the
packets with identi(cid:128)able tra(cid:129)c tokens, our approach achieved a
coverage of 98.54%. (cid:140)is is important since mobile users tend to
migrate across di(cid:130)erent networks (LTE and Wi-Fi), causing an or-
ganizational NGFW to miss some identi(cid:128)able packets; therefore,
the more packets an app’s imprints can cover, the more likely it can
be timely identi(cid:128)ed for detection and access control.
Our (cid:128)ndings. (cid:140)e high e(cid:129)ciency achieved by Tiger enabled us to
discover app tra(cid:129)c imprints at an unprecedented scale: we ran our
system on over 200,000 apps including 78.23% PHAs from Virus-
Total. Altogether, 392,645 invariants were discovered, uniquely
characterizing all identi(cid:128)able apps. Interestingly, some of these
apps produce new types of invariable tokens never reported in
prior research, including new keys and values within HTTP head-
ers and content. Particularly, we found that shared libraries send
out fake device information when their host apps do not have per-
missions to do so on mobile devices, and some apps communicate
with their servers using hardcoded time values, credentials and
their developers’ personal information and even (cid:128)xed session and
cookie IDs, which were all automatically recovered as the apps’
unique tra(cid:129)c identi(cid:128)ers. Further we discovered that indeed some
tra(cid:129)c (cid:131)ows involving distinguishing imprints cannot be easily trig-
gered: o(cid:137)entimes human interventions are expected to get through
login pages, and most intriguingly identi(cid:128)able tra(cid:129)c could show
up only when the Activity of an app is invoked by other apps or
by the click on the URL scheme posted by its server to the app’s
webview. We also found that suspicious behaviors containing iden-
ti(cid:128)able imprints can only be triggered by some special conditions
(e.g., a certain event or a remote command). (cid:140)e (cid:128)ndings strongly
indicate that code-analysis based app (cid:128)ngerprinting is a promising
alternative to automatic UI exploration, which is both slow (at least
5 minutes per app) and incapable of triggering the apps’ real-world
network activities in a comprehensive way.
Contributions. (cid:140)e contributions of the paper are summarized as
follows:
• Innovative tra(cid:129)c imprint generation. We present a new technique
that e(cid:129)ciently triggers an app’s network activities and discovers its
invariable tokens. Our approach utilizes a highly-e(cid:129)cient partial
execution technique, which targets potential invariants and signi(cid:128)-
cantly simpli(cid:128)es the code slices for a network sink by instantiating
the variables believed to be unrelated to the invariants. (cid:140)is allows
us to quickly identify the invariable tokens for imprint generation.
With the IPE mechanism, Tiger achieves over 98% coverage of iden-
ti(cid:128)able packets with only 0.74% false detection rate. Not only does it
outperform existing tra(cid:129)c (cid:128)ngerprinting techniques (for Android
apps) but it runs at least an order of magnitude faster than the
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA816conventional slicing and execution, which is critically important
for analyzing app tra(cid:129)c at a large scale.
• Large-scale imprint discovery. Running our technique on over
200,000 recent apps, the largest study of this kind, our research
sheds new light on the tra(cid:129)c features of Android apps, includ-
ing surprising tra(cid:129)c content that can serve as apps’ unique tra(cid:129)c
imprints and complicated conditions for triggering their identi(cid:128)-
able network activities. (cid:140)e (cid:128)ndings help us be(cid:138)er understand
apps’ network behaviors that can uniquely characterize them, high-
lighting the code-analysis based approaches as a promising way to
(cid:128)ngerprint network tra(cid:129)c of apps.
2 BACKGROUND
In this section, we discuss the tra(cid:129)c invariants of Android apps
and explicate the assumptions made in our study.
Tra(cid:129)c imprints of Android apps. Most mobile apps are web
applications, which operate through interacting with their server-
side components. For example, news apps communicate with their
servers for requesting latest news; map and weather utilities use
geo-locations to retrieve from their servers pieces of map images or
weather conditions. (cid:140)ese activities leave invariable tra(cid:129)c content
that could potentially allow apps identi(cid:128)cation. In this study, we
refer to any (cid:128)eld with invariable content (e.g., IP address, host name,
key, value, Ad-ID and their transformations) in network (cid:131)ows as a
token. Once a token or combination of several tokens in one single
packet can uniquely identify an app, we call the combination an
imprint.
(cid:140)e coverage of imprints is important to app access management
and PHA detection. Like desktop or web programs, mobile apps
are also expected to be monitored and controlled within individual
organizations or by ISPs and carriers. Serving this purpose is the
NGFW technologies, through which a (cid:128)rewall uses imprints to
identify apps for capturing harmful code or enforcing security
policies on their access to corporate resources. Note that this is
very di(cid:130)erent from how traditional (cid:128)rewalls work, which largely
rely on IPs and ports to (cid:128)nd the targets they are meant to control.
(cid:140)e approach cannot be applied to apps, since most of them use
HTTP with their port numbers changing continuously for every
HTTP packet. And therefore cannot be di(cid:130)erentiated from each
other according to their port numbers. For these apps, their imprints
(also referred to as signature, (cid:128)ngerprints in prior studies) are the
key to determining their presence.
Such imprints are discovered today through dynamic analysis,
from the tra(cid:129)c (cid:131)ows generated by running individual apps, as all
major NGFW providers (e.g., Palo Alto Networks, Dell, HP, Huawei,
Sophos, MobileIron, etc) do. Various techniques have been devel-
oped for this purpose, for example, systematically fuzzing an app’s
user-interfaces. However, as mentioned earlier, these approaches
cannot comprehensively explore an app’s behavior, triggering all its
network-related activities: for example, an app may require user lo-
gin and a mobile game may need deep human involvements before
moving to the stage where characterizing tra(cid:129)c is generated. Even
more challenging is PHAs, which may include carefully-cra(cid:137)ed