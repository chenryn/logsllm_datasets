BVS
(T ) = maxA AdvSU-CMA
BVS
BVS
We brieﬂy explain the adversary’s actions in this exper-
iment. An adversary is provided with n partial signature
oracles representing n signers. He can make partial signa-
ture queries on any (v, c) pairs he chooses in any order and
run the Combine algorithm to get full signatures from the
partial signatures he received.
In the end, he successfully
breaks the shrink unforgeability if he outputs a valid signa-
ture on a pair (v(cid:48), c(cid:48)) and either of the two following cases
occurred. The ﬁrst case is when a forger A makes signa-
ture queries of the form (∗, c(cid:48)) to less than t signing oracles.
In this case, he should not be able to generate full signa-
tures on any pair of the form (∗, c(cid:48)), since he did not collect
enough partial signatures. The second case is when A made
signature queries of the form (∗, c(cid:48)) to at least t signing ora-
cles and there exists a dimension k such that v(cid:48)[k]  1
and xe ≡ y mod N . Speciﬁcally we denote the advantage
of an adversary B in solving the strong RSA problem as
AdvQR-SRSA(B) = Pr[ e > 1 and xe ≡ y mod N :
p, q $← Primes ∩ {0, 1}κ, N ← pq,
y $← QRN , (x, e) ← B(N, y)
]
and we deﬁne AdvQR-SRSA(T ) = maxB AdvQR-SRSA(B) where
the maximum is taken over all adversaries B executing in
time at most T .
2.4 Decision Difﬁe-Hellman Assumption
Our proof of security also makes use of the decisional
Diﬃe-Hellman (DDH) assumption in the quadratic residue
group QRN when N is the multiplication of two strong
primes. That is, it is diﬃcult for an adversary to distinguish
a triple (ga, gb , gab ) from (ga, gb , gc ) for a, b, and c chosen
randomly and for a generator g of QRN . In particular, we
use a variant of the problem which says that DDH problem
is hard even when the factorization of N is known. It has
been shown that the DDH problem over QRN does not de-
pend on the hardness of factoring [27]. Formally, the DDH
advantage of an adversary D is deﬁned as follows, where
SafePrimes are the primes p of the form p = 2p(cid:48) + 1 where
p(cid:48) is itself a prime:
AdvDDH(D) =
| Pr[ D(p, q, g, ga, gb , gab ) = 1 :
p, q $← SafePrimes ∩ {0, 1}κ, N ← pq, g $← QRN ,
a, b $← Zp(cid:48)q(cid:48) where p(cid:48) = (p − 1)/2, q(cid:48) = (q − 1)/2 ] −
Pr[ D(p, q, g, ga, gb , gc ) = 1 :
p, q $← SafePrimes ∩ {0, 1}κ, N ← pq, g $← QRN ,
a, b, c $← Zp(cid:48)q(cid:48) where p(cid:48) = (p − 1)/2, q(cid:48) = (q − 1)/2 ] |
Let AdvDDH(T ) = maxD AdvDDH(D) where the maximum
is taken over all adversaries D executing in time at most T .
Below, we refer to a triple (ga, gb , gab ) as a valid DDH
triple, and (ga, gb , gc ) as an invalid DDH triple.
3. OUR CONSTRUCTION
In this section, we present a bounded vector signature
construction in the multiparty setting using the threshold
RSA signature scheme of Shoup [38] as the basis of our con-
struction. The novelty of our construction lies in the ob-
servation that values being signed can be moved from the
base of the signature to the exponent. By doing so, we can
encode each value in such a way that arbitrary parties can
increase this value by exponentiating the signature, but can-
not decrease the value without being able to take roots in
the RSA group. In particular, we encode the signature on
the value in a vector dimension as the distance from that
value to the maximum value for that dimension, and then
embed that distance as a root in the RSA group. Thus, by
exponentiating the signature by an exponent corresponding
to this dimension, the distance in that dimension can be de-
creased (and so the value in that dimension is increased).
The context portion of the signature acts as the base of the
RSA signature and provides the meaning behind the values
in the exponent. The context also ensures that vectors in
diﬀerent contexts cannot be combined.
3.1 Construction Description
Here we discuss the operation of each algorithm in our
construction and provide the technical details in Figure 1.
The signature scheme is initialized by running the KeyGen
algorithm, which generates the public veriﬁcation key and
the secret signing keys for each of the n signers. For the
multiparty setting, we consider a trusted dealer1 who gen-
erates two safe primes p = 2p(cid:48) + 1, q = 2q(cid:48) + 1, and a RSA
modulus N = pq. Each dimension k in the vector space
being signed is associated with a maximum value ˆv[k] that
is given as input to the algorithm and a distinct prime ek
chosen by the dealer. The dealer also computes the signing
mod m, where m = p(cid:48)q(cid:48). The
dealer then splits sk into n shares sk 1, . . . , sk n using stan-
dard polynomial secret sharing techniques [37]. Essentially,
this signing key encodes the maximum possible distance for
each dimension in the index.
key sk = Qd
−( ˆv[k]+1)
k
k=1 e
The Sign algorithm allows a signer with signing key sk i to
produce a partial signature on a d-dimensional vector. The
signer ﬁrst creates a context c, which is a text description
of the way the veriﬁer should interpret the signed vector.
Practically speaking, the format of the context is applica-
tion speciﬁc, but its general purpose in our construction is
to ensure that vectors from diﬀerent contexts cannot be com-
bined into a full signature. The output of the Sign algorithm
is a partial signature σi = H(c)n!sk i
v[k]
k mod N , where
H(·) is a hash into the group QRN . The inclusion of n! in
the exponent is taken from the work of Shoup [38] to en-
sure that the Lagrange interpolation performed during the
Combine algorithm produces integers.
Qd
k=1 e
Given a partial or full signature on a vector v, an ar-
bitrary party (without access to any signing key) can run
the Stretch algorithm to increase the value of any compo-
nent of the vector up to the pre-determined maximum set
by the vector ˆv in the KeyGen algorithm. To do so, the
party exponentiates the signature by the prime associated
with the desired dimension to increment the value in that di-
mension (i.e., decreasing the distance from the maximum).
1Existing techniques for removing the assumption of a
trusted dealer may be applied to our construction (e.g., [15]).
The output of the algorithm is a new partial or full sig-
nature σ(cid:48) = (σ)ea
k mod N , where k is the dimension being
incremented and a is the amount by which it is increased.
The Combine algorithm takes t partial signatures on po-
tentially diﬀerent vectors from distinct signers and produces
a full signature from them.
In order to properly combine
partial signatures on diﬀerent vectors, the algorithm be-
gins by applying the Stretch operation on each dimension
of each partial signature to ensure all partial signatures pro-
vided as input sign the same vector. The resultant vec-
tor is actually the component-wise maximum among the t
signed vectors given as input. Once all partial signatures
embed the same vector, the Combine algorithm computes
Lagrange coeﬃcients for each partial signature and interpo-
lates the signing key sk in the exponent. Thus, the output
of the algorithm is a full signature σ = H(c)sk Qd
H(c)
mod N on the vector v. Notice that
in addition to requiring all vectors to be stretched to be iden-
tical, the context of these vectors must also be the same for
the Combine algorithm to successfully produce a full signa-
It is also important to note that this Combine pro-
ture.
cedure, after stretching, is exactly that of Shoup [38], and
so interested readers should refer to that work for detailed
technical explanation of the procedure.
−(ˆv[k]−v[k]+1)
k
v[k]
k =
Qd
k=1 e
k=1 e
Finally, the Verify algorithm takes as input a full signature
and a vector-context pair, and outputs 1 if the full signature
embeds the given vector-context pair. The veriﬁcation pro-
cedure simply checks that H(c) = σ
mod N ,
which only occurs if the signature encodes the given vector
components as the appropriate distance from the predeter-
mined maximum for each dimension.
ˆv[k]−v[k]+1
k=1 e
k
Qd
We prove that this construction is shrink unforgeable un-
der the strong RSA and DDH assumption in the random or-
acle model. Since we model H() as a random oracle, we addi-
tionally quantify the number of queries qh made to H() in the
adversary advantage. More formally, AdvSU-CMA
(T, qh) =
(A) where the maximum is taken over all
maxA AdvSU-CMA
adversaries A running time at most T and making at most
qh queries to H().
BVS
BVS
Theorem 1. Consider the above bounded vector signa-
ture construction with d dimensions and each vector dimen-
sion restricted to the range [0, ˆv]. Then, ignoring terms neg-
ligible in κ,
AdvSU-CMA
BVS
(T, qh)
≤ 2 · qh · d · ˆv ·
«2(t−1) · AdvQR-SRSA(T
„ n
«2(t−1) · (t − 1) · AdvDDH(T
„ n
t − 1
(cid:48)
)
(cid:48)(cid:48)
)
+ d · ˆv ·
t − 1
where T (cid:48) = T (cid:48)(cid:48) = T +O(t(dˆv log(n+d log n)+log(n!))) group
operations.
The proof of the theorem can be found in Appendix A.
3.2 Efﬁciency
With respect to space eﬃciency, the signing keys consist
of a group element in Zm, while the public key is made up of
an RSA modulus and d prime exponents. Both the partial
and full signatures in our construction are represented by a
single group element in QRN .
KeyGen(1κ, t, n, ˆv):
sets N = pq and m = p(cid:48)q(cid:48).
1. Dealer selects random κ-bit primes p = 2p(cid:48) + 1, q = 2q(cid:48) + 1 where p(cid:48) and q(cid:48) are themselves prime. Dealer
2. The dealer chooses d distinct primes e1, . . . , ed with each ei > n and computes sk =Qd
mod m.
3. Dealer also selects t − 1 random integers a1, . . . , at−1 with each ai randomly selected from {0, ..., m − 1}
−( ˆv[k]+1)
k=1 e
k
and computes a secret sharing polynomial f (x) = sk + a1x + . . . + at−1xt−1 mod m.
4. Output is a public veriﬁcation key pk = (N, e1, . . . , ed) and secret signing keys sk 1, . . . , sk n for each signer
Pi, where sk i = f (i) mod m.
Sign(sk i, (v, c)):
1. Output the partial signature σi = H(c)n!sk i
Qd
k=1 e
v[k]
k mod N .
Stretch((σ, v, c), k, a):
1. If v[k] + a > ˆv[k], set a = ˆv[k] − v[k].
2. Output signature on stretched vector σ(cid:48) = σea
k mod N .
Combine((σi1 , vi1 , ci1 ), . . . , (σit , vit , cit )):
1. Check that cij = cij(cid:48) for all j, j(cid:48) = 1, . . . , t.
2. For each dimension k of each partial signature σij :
i. Run Stretch((σij , vij , cij ), k, a) with a = max(vi1 [k], . . . , vit [k]) − vij [k].
Q
Q
j(cid:48)(cid:54)=j (0−ij(cid:48) )
j(cid:48)(cid:54)=j (ij−ij(cid:48) ) for each partial signature σij .
3. Compute modiﬁed Lagrange coeﬃcients (n!)λij = (n!)
= H(c)(n!)2Qd
k=1 e
−(ˆv[k]−v[k]+1)
k
mod N .
4. Compute w =Qt
5. Since gcd((n!)2,Qd
that α(n!)2 + βQd
(n!)λij
ij
j=1 σ
k=1 e( ˆv[k]−v[k]+1)
k=1 e( ˆv[k]−v[k]+1)
k
Qd
6. Output the full signature σ = wαH(c)β = H(c)
k
−(ˆv[k]−v[k]+1)
k=1 e
k
mod N .
Verify(pk , σ, (v(cid:48), c(cid:48))):
1. Output 1 if H(c(cid:48)) = σ
Qd
ˆv[k]−v(cid:48)[k]+1
k=1 e
k
mod N . Otherwise, output 0.
) = 1, we use the extended Euclidean algorithm to compute α, β such
= 1.