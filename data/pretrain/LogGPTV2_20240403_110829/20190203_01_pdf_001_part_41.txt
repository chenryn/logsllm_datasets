directly into the dialog box, adds columns to the edb.emp table.
ALTER TABLE edb.emp ADD COLUMN gender CHAR(1) CHECK(gender IN ('M','F'));
ALTER TABLE edb.emp ADD COLUMN gradelevel VARCHAR2(4);
ALTER TABLE edb.emp ADD COLUMN title VARCHAR2(10);
The following ALTER TABLE statement changes the data type length of the title
column and sets its values with the USING data_type_expr clause.
ALTER TABLE edb.emp
ALTER COLUMN title SET DATA TYPE VARCHAR(25) USING
CASE job
WHEN 'CLERK' THEN 'ADMINISTRATIVE ASSISTANT'
WHEN 'ANALYST' THEN 'R & D SPECIALIST'
WHEN 'SALESMAN' THEN 'MARKETING REPRESENTATIVE'
WHEN 'MANAGER' THEN 'SUPERVISOR'
WHEN 'PRESIDENT' THEN 'CHIEF EXECUTIVE OFFICER'
END;
The following query shows the values assigned to the title column after the DDL
change replication feature applies the preceding ALTER TABLE statement to the
edb.emp table. This change to the title column and assignment of values occurs in all
the subscription databases of a single-master replication system or in all the master nodes
of a multi-master replication system.
edb=# SELECT empno, ename, job, title FROM emp;
empno | ename | job | title
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 495
EDB Postgres Replication Server User’s Guide
-------+--------+-----------+--------------------------
7369 | SMITH | CLERK | ADMINISTRATIVE ASSISTANT
7499 | ALLEN | SALESMAN | MARKETING REPRESENTATIVE
7521 | WARD | SALESMAN | MARKETING REPRESENTATIVE
7566 | JONES | MANAGER | SUPERVISOR
7654 | MARTIN | SALESMAN | MARKETING REPRESENTATIVE
7698 | BLAKE | MANAGER | SUPERVISOR
7782 | CLARK | MANAGER | SUPERVISOR
7788 | SCOTT | ANALYST | R & D SPECIALIST
7839 | KING | PRESIDENT | CHIEF EXECUTIVE OFFICER
7844 | TURNER | SALESMAN | MARKETING REPRESENTATIVE
7876 | ADAMS | CLERK | ADMINISTRATIVE ASSISTANT
7900 | JAMES | CLERK | ADMINISTRATIVE ASSISTANT
7902 | FORD | ANALYST | R & D SPECIALIST
7934 | MILLER | CLERK | ADMINISTRATIVE ASSISTANT
(14 rows)
The following set of ALTER TABLE statements drops the columns that were added in the
first example.
ALTER TABLE edb.emp DROP COLUMN gender;
ALTER TABLE edb.emp DROP COLUMN gradelevel;
ALTER TABLE edb.emp DROP COLUMN title;
The DDL change replication feature can be invoked from either the xDB Replication
Console (see Section 7.8.2) or the xDB Replication Server CLI (see Section 8.3.30).
The next section describes the process that occurs during DDL change replication.
7.8.1 DDL Change Replication Process
The DDL statement is executed in a controlled manner such that the target table is
exclusively locked (by the default setting of configuration option
ddlChangeTableLock) during the course of the operation. This is done to avoid loss of
any transactions while the replication triggers and shadow table are modified by the DDL
change replication process. Only one target table is locked at a time while DDL change
replication takes place on that table, its triggers, and shadow table.
If there is a backlog of pending transactions, it is recommended to perform an explicit
synchronization replication before performing DDL change replication to avoid
prolonging the DDL change replication process for a longer period of time.
DDL change replication should be performed when the OLTP rate is very low (near
zero).
Note: Exclusive acquisition of each target table during the DDL change replication
process can be turned off by setting ddlChangeTableLock to false. However, this
should be done only when there are no write transactions taking place against the target
table, otherwise transactions may not be recorded by the replication system. See Section
10.4.1.11 for additional information on the ddlChangeTableLock configuration option.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 496
EDB Postgres Replication Server User’s Guide
The following is the series of steps that occur during the DDL change replication process.
 The publication server performs a health check across all databases in the
replication system to ensure they can be accessed. If any database is not available
the DDL change replication process is aborted with a notification to the user.
 If the publication server configuration option ddlChangeTableLock is set to its
default value of true, an exclusive table lock is requested on the table to which
the DDL change is to be applied. If another application already has a lock on the
table, there is a wait time of 2 minutes after which the DDL change replication
process is aborted if the lock is not released before then. If
ddlChangeTableLock is set to false, an exclusive table lock is not requested.
 The DDL statement is executed against the target table. The replication triggers
and shadow table are modified accordingly. If an error occurs, the user is
informed and the operation is aborted. If ddlChangeTableLock is set to true,
the exclusive lock is released.
 The preceding two bullet points are repeated on the target table for each database
in the replication system.
 The in-memory table metadata definition is refreshed to reflect the DDL change.
The user is informed of successful completion of the operation.
 If an error occurs during the prior steps, any changes up to that point are rolled
back so that the publication table, replication triggers, and shadow table are
reverted back to their original state prior to the start of this operation. If one or
more databases goes down before completion of the operation, the publication is
marked as dirty to avoid further replication events.
The following section describes how to initiate DDL change replication using the xDB
Replication Console.
7.8.2 DDL Change Replication Using the xDB Replication Console
DDL change replication can be applied using the xDB Replication Console as follows.
Step 1: If you plan to use a file to supply the ALTER TABLE statements to a publication
table, prepare the text file. Make sure this text file is accessible by the operating system
account with which you will open the xDB Replication Console.
Alternatively, you can copy and paste, or directly type in the ALTER TABLE statements
into the Alter Publication Table dialog box without having to save the statements in a file.
Step 2: Make sure the publication server whose node is the parent of the publication
containing the table you wish to change is running and has been registered in the xDB
Replication Console you are using. See Section 5.2.1 for directions on starting and
registering a publication server.
Step 3: Under the publication database of a single-master replication system, or under the
master definition node of a multi-master replication system, open the Alter Publication
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 497
EDB Postgres Replication Server User’s Guide
Table dialog box by clicking the secondary mouse button on the Table node of the table
to be modified and choose Alter Table.
Figure 7-102 - Selecting a table to alter
Step 4: In the Alter Publication Table dialog box, if you saved the ALTER TABLE
statements in a text file, make sure the DDL Script File option is selected, browse for this
file, and click the OK button.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 498
EDB Postgres Replication Server User’s Guide
Figure 7-103 - Alter Publication Table dialog box with DDL script file
Alternatively, if you are directly entering the ALTER TABLE statements, select the DDL
Script option instead of the DDL Script File option. Directly type in, or copy and paste
the ALTER TABLE statements from your source into the text box. Click the OK button.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 499
EDB Postgres Replication Server User’s Guide
Figure 7-104 - Alter Publication Table dialog box with copy and paste
Step 5: If the DDL replicated successfully message box appears, the DDL change was
successful across all databases. Click the OK button.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 500
EDB Postgres Replication Server User’s Guide
Figure 7-105 - DDL replicated successfully
If DDL replication was not successful, the problem must be investigated and resolved on
a case by case basis. Factors to look for include the following:
 Were the modifications in the ALTER TABLE statements successfully applied to
the target table in each database of the replication system?
 For the trigger-based method, were the replication triggers on the target table
modified to account for the ALTER TABLE statements?
 For the trigger-based method, was the shadow table RRST_schema_table
located in the _edb_replicator_pub schema in each database of the
replication system modified to account for the ALTER TABLE statements?
If it is apparent that the replication system is not in a consistent state regarding the table
definitions, see the beginning of Section 7.6.5 for guidance on how to deal with such
issues.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 501
EDB Postgres Replication Server User’s Guide
7.9 Loading Tables From an External Data Source (Offline
Snapshot)
There may be circumstances when you want to initially load your target tables
(subscription tables of a single-master replication system, or non-MDN nodes of a multi-
master replication system) using a method other than the snapshot replication
functionality of xDB Replication Server. This is referred to as using an offline snapshot.
For example, you might initially load the tables by running the Migration Toolkit from
the command line or by using a backup from an external data source.
When you load the target tables using an offline snapshot, special preparations must be
taken to account for the following deviations from the default target table creation and
loading process:
 In the typical, default scenario xDB Replication Server creates the target table
definitions when you define the subscription in a single-master replication system,
or add an additional master node in a multi-master replication system. When
using an offline snapshot, creation of the target table definitions is expected to be
your responsibility. You must therefore prevent xDB Replication Server from
creating the target table definitions.
 In the typical, default scenario xDB Replication Server performs synchronization
replication using batches of SQL statements. If any statement in a batch results in
an error, all statements in the batch are rolled back. When using an offline
snapshot, if there is the possibility that the external data source used to load the
target tables already has transactions applied to it that are also recorded in the
shadow tables of the source tables, then you must perform the first
synchronization replication in non-batch mode. This is because the batch of
synchronization transactions may include SQL statements that have already been
applied to the target, which may result in a statement failure in certain cases.
This section discusses how to deal with the preceding two points for both a single-master
and a multi-master replication system.
First, non-batch mode synchronization and why it must be used in certain cases is
explained in more detail in the following section.
7.9.1 Non-Batch Mode Synchronization
Synchronization replications are done in batches of updates, each batch committed in a
separate transaction. Therefore if any single update in a batch fails, all the updates in the
batch are rolled back.
This process has the following implications.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 502
EDB Postgres Replication Server User’s Guide
Prior to and during the time when the offline snapshot is in progress, there may be
updates to the source tables, which are recorded in the source tables’ shadow tables. After
the offline snapshot completes, there may be additional updates to the source tables that
are also recorded in the shadow tables.
Since xDB Replication Server has no knowledge of the external data source used to load
the target tables, it is unknown to xDB Replication Server whether or not any of the
updates made to the source tables during or after the offline snapshot, have already been
included in the data used to load the target tables.
As a result, the shadow tables may include a mixture of duplicate updates that have
already been applied to the target tables, as well as new updates that have not been
applied to the target tables.
If you then perform synchronization replication, the publication server attempts to apply
all updates recorded in the shadow tables in batches.
If one of the updates had been an insertion of a new row, and this new row is already in
the target table loaded from the offline snapshot, a duplicate key error results when the
publication server attempts to apply the batch containing the INSERT statement for this
row. The duplicate key error forces the rollback of the entire batch. This causes the
exclusion of updates in the batch that may not yet have been carried over to the target
tables. The source tables and target tables are now inconsistent since there were updates
to the source tables that have not been applied to the target tables.
Note: The effects of applying UPDATE and DELETE statements in the batch to a target
table that already has been changed by these updates does not cause the same problem as
repeated application of INSERT statements. The UPDATE statement would just change the
row to the same values a second time. When a DELETE statement affects no rows, this is
not considered an error by the database server, and therefore, no rollback of the batch
occurs.
The solution to the potential rollback of a batch is to apply the shadow table updates in
non-batch mode. That is, each SQL statement is individually committed. In that way, if
an insertion of a row fails due to a duplicate key error, that statement alone is rolled back.
The error does not affect the other shadow table updates that must be applied since all
updates are enclosed within their own, individual transactions.
The batchInitialSync configuration option controls whether the first synchronization
replication occurs in batch or non-batch mode.
If you are using an offline snapshot in an active replication system where updates are
occurring to the source tables and transactions are thus accumulating in the shadow tables
for the trigger-based method, it is advisable to set batchInitialSync to false to
perform the first synchronization replication in non-batch mode.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 503
EDB Postgres Replication Server User’s Guide
Note: An offline snapshot cannot be used to add a subscription or a master node to an
active replication system that uses the log-based method. For the log-based method,
offline snapshots can only be used to initially configure the system, and not to update it
with additional nodes after the publication database or master node is actively receiving
transactions.
If you are using offline snapshots to initially create the entire replication system that has
yet to be activated, and the content of the offline snapshots are all assumed to be
consistent for the source and target tables, then batchInitialSync can be left with its
default setting of true since it is assumed that the first synchronization replication will
not apply any duplicate updates.
7.9.2 Offline Snapshot Configuration Options
The following are the configuration options that you need to modify when using an
offline snapshot.
Note: These options apply to the publication server only.
offlineSnapshot
The offlineSnapshot option must be set to true before creating the subscription for
a single-master replication system, or before adding the master node for a multi-master
replication system.
offlineSnapshot={true | false}
The default value is false.
When set to true, the offlineSnapshot option prevents the usual creation of the
subscription schema and table definitions when the subscription is defined in a single-
master replication system since it is assumed that you are creating the subscription table
definitions and loading them from an external source other than the publication.
When adding the master node in a multi-master replication system, leave the Replicate
Publication Schema and Perform Initial Snapshot boxes unchecked (see Section 6.3).
When offlineSnapshot is set to true, this has the direct effect within the control
schema by setting column has_initial_snapshot to a value of O indicating an
offline snapshot is used for the target subscription or master node represented by the row.
Column has_initial_snapshot is set in table
xdb_publication_subscriptions for a single-master replication system and in
table xdb_mmr_pub_group for a multi-master replication system.
The setting of has_initial_snapshot influences the behavior of the
batchInitialSync option as explained in the following section.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 504
EDB Postgres Replication Server User’s Guide
After the first replication completes to the target subscription or master node,
has_initial_snapshot is changed to Y by xDB Replication Server.
batchInitialSync
The batchInitialSync option is used to control whether the first synchronization
after loading the target tables from an offline snapshot is done in batch mode (the default)
or non-batch mode.
Set the batchInitialSync option to false to perform synchronization replication in
non-batch mode.
The offlineSnapshot configuration option must have first been set to true prior to
creating the subscription or adding the additional master node. A non-batch mode
synchronization occurs only if batchInitialSync is false and the
has_initial_snapshot column in the control schema is set to a value of O as
described for the offlineSnapshot option.
batchInitialSync={true | false}
The default value is true.
7.9.3 Single-Master Replication Offline Snapshot
An offline snapshot can be used to initially load the subscription tables of a single-master
replication system. For a publication that is intended to have multiple subscriptions, it is
possible to create some of the subscriptions using the default xDB Replication Server
snapshot replication process as described in Section 5.4.1, while other subscriptions can
be created from an offline snapshot.
The following steps describe how to create a subscription from an offline snapshot.
Step 1: Register the publication server, add the publication database definition, and
create the publication as described in Section 5.2.
Step 2: Register the subscription server and add the subscription database definition as
described in sections 5.3.1 and 5.3.2, respectively.
Note: Steps 3 and 4 must be performed before creating the subscription. Steps 3 through
9 can be repeated each time you wish to create an additional subscription from an offline
snapshot.
Step 3: Modify the publication server configuration file if these options are not already
set as described by the following:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 505
EDB Postgres Replication Server User’s Guide
 Change the offlineSnapshot option to true. When the publication server is
restarted, offlineSnapshot set to true has the effect that: 1) creating a
subscription does not create the schema and subscription table definitions in the
subscription database as is done with the default setting, and 2) creating a
subscription sets a column in the control schema indicating an offline snapshot is
used to load this subscription.
 Set the batchInitialSync option to the appropriate setting for your particular
situation as discussed at the end of Section 7.9.1.
Step 4: Restart the publication server if the publication server configuration file was
modified in Step 3. See Section 5.2.1 for directions on restarting a publication server.
Step 5: In the subscription database, create the schema, the subscription table definitions,
and load the subscription tables from your offline data source. The subscription database
user name used in Section 5.3.2 must have full privileges over the database objects
created in this step. Also review the beginning of Section 5.3.2 regarding the rules as to
how xDB Replication Server creates the subscription definitions from the publication for
each database type as you must follow these same conventions when you create the target
definitions manually.
Step 6: Add the subscription as described in Section 5.3.3.
Step 7: Perform an on demand synchronization replication. See Section 5.4.2 for
directions on performing an on demand synchronization replication.
Step 8: If you are not planning to load any other subscriptions using an offline snapshot
at this time, change the offlineSnapshot option back to false and the
batchInitialSync option to true in the publication server configuration file.
Step 9: Restart the publication server if you modified the publication server configuration
file in Step 8.
7.9.4 Multi-Master Replication Offline Snapshot
An offline snapshot can be used to initially load the master nodes of a multi-master
replication system. It is possible to load some of the master nodes using the xDB
Replication Server snapshot replication functionality when defining the master node as
described in Section 6.3 or by using an on demand snapshot as described in Section 6.5.1,