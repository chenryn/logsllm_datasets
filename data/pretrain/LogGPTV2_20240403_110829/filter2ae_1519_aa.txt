**作者：小黑猪@平安银河安全实验室  
公众号：**
### 1\. 设备基础信息
设备硬件: D-Link 816-A2
固件版本: 1.11
固件下载地址:
### 2\. 基础准备工作
#### 2.1. 焊接UART接口获取shell
通过拆卸焊接UART接口并测量电压后可以得到如下图所示的UART接口线序。
通过连接串口转换器后，可以使用任意串口管理软件连接转换器查看信息，通过串口可以看到D-Link路由器启动时的引导信息
等系统成功引导以后按下回车键就就可以拿到root权限的shell了。
#### 2.2. 上传测试工具
D-Link 816-A2路由器的busybox shell经过了裁剪，没有 **wget** ， **curl** ， **netcat**
等各种方便上传工具的命令，只能通过 **tftp**
命令进行上传。因此这边可以考虑通过上传一个针对路由器CPU架构静态编译的busybox后即可使用更多的通用命令了。
    \# 在本机上用python运行tftp, 可以使用pip安装
    sudo ptftpd -p 69 en7 -D ./static_tools
    sudo ptftpd -r -p 69 en7 -D ./# 上传静态编译的mips工具
    tftp -g -r mips/busybox.mipsel 192.168.0.200
    tftp -g -r mips/gdbserver.mipsle 192.168.0.200# 赋予工具可执行权限
    chmod +x ./*
#### 2.3. 打包系统文件
在上传了新的busybox后即可使用tar命令对原始的系统文件进行打包。在对打包数据进行回传后即可对程序进行调试和逆向分析了。
    # 打包命令
    ./busybox-mipsel tar -cvf ./system_backup.tar / --exclude=proc --exclude=run -    -exclude=dev --exclude=mnt --exclude=sys
    # 回传打包的数据
    # 在自己本机上运行
    nc -l 8080 > system_backup.tar
    # 在路由器上执行
    ./busybox-mipsel nc 192.168.0.200 8080 < system_backup.tar
至此我们已经成功的获取到路由器的内部文件，可以进一步的堆路由器进行深入分析了。
### 3\. D-Link web管理页面分析
D-Link的Web管理页面是由 **goahead** 进程提供的，该进程监听TCP的80端口并提供路由器的管理功能。
#### 3.1 管理页面权限验证方法分析
D-Link的登录页面如下图所示。
输入账号密码后，将会向 **goform/formLogin** 接口发送如下图所示的数据包进行验证。从数据包中可以看到关键的参数有
**username** ， **password** 以及 **tokenid** ，其中 **username** 使用了base64进行编码，
**password** 则进行了某种加密。
有趣的是在成功认证后，服务器并没有返回session或者Cookie相关的数据，仅仅返回了一个重定向到index页面的数据包。
通过对 **goahead** 程序的 **goform/formLogin** 接口函数进行分析可以看到在验证过程中函数首先会从nvram中读取
**Login** 及 **Password** 等参数。
随后调用 **websGetVar** 函数从我们发送的请求数据中获取 **username** , **password** , **tokenid**
参数的值。
之后将解析完成的，账号密码信息与nvram中保存的账号密码信息进行比对。
如下图所示，当判断认证成功时将会记录用户的IP地址至BSS区的变量 **load_host** 中并修改 **login** 变量为1，失败则会将1写入
**/etc/RAMConfig/confirmlogin** 文件中，并重定向用户到登录页面。
在更新BSS区的变量 **load_host** 后则会检测lan口和wan口的状态并返回对应的登录页面，随后将0写入
**/etc/RAMConfig/confirmlogin** 文件中。
通过上述的分析，实际上D-Link路由器在认证成功后仅仅记录了成功登录的用户IP地址，随后将是否需要验证登录的Flag文件内容设置为了0。
随后我们可以看一下 **goahead** 程序对于不同的url请求所使用的Handler，根据不同的url路径 **goahead**
进程将使用不同的Handler进行处理。下面可以看到有两个全局Handler, **websSecurityHandler** 和
**websDefaultHandler。**
首先我们对默认的全局Handler函数 **websDefaultHandler** 进行分析。 **websDefaultHandler** 会调用
**websValidateUrl** 函数对请求的url地址进行检测，主要的功能是对转义符号进行处理并避免' **../'** 路径穿越的问题。
随后以'\'为分割符，循环遍历url中的路径，根据../及正常路径计算路径深度，避免出现 **../** 越界的情况。若是
**websValidateUrl** 合法，则将继续进行后续处理。
用户访问管理页面时D-Link对全局认证状态的检测过程就在 **websSecurityHandler**
这个全局hanlder中。该函数会首先判断是否启用了portal管理，如果未进行portal管理则首先对login变量进行检测，查看是否存在已登录过的管理主机。
后续的代码根据是否存在已认证的管理主机进行了两段额外的处理，接下来我们首先分析不存在登录管理主机的情况。
此时如果用户请求的是asp的页面，则只允许访问 **/dir_login.asp** 或 **/login_fail.asp**
页面，其他asp页面均会被重定向成 **/dir_login.asp** 页面。
而针对已存在登录管理主机的情况则会检测最近两次请求的间隔是否小于0x258(600)毫秒，如果小于600毫秒也会同样将请求重定向至
**/dir_login.asp** 。
接下来的代码是共通的处理逻辑，在上图中的代码执行完毕后，会再一次对访问间隔进行检测，如果间隔小于0x258(600)毫秒，则会清空
**load_host** 及 **login** 等变量。
如果间隔正常的话，则会继续判断发送请求的主机IP是否与load_host变量中的IP一致，如果不一致则将请求重定向至 **/dir_login.asp**
页面。接下来还会对是否存在访问限制进检测，随后结束这个Handler，将请求交由后续Handler处理。
下图是将判断portal管理模式之后的验证过程进行整理后的流程图，根据下面的流程图可以发现。在 **websSecurityHandler**
中主要是对ASP页面的请求进行了权限控制，认证方法也仅仅是检测了一下当前请求主机的IP地址是否与储存的管理主机的IP地址一致。而针对非ASP页面的请求则交由其他后续的Handler进行权限处理。
另一个重要的Hander就是 **websFormHandler** ，下面将对该Handler的主要判断部分进行分析，该函数首先检查了是否存在
**/etc/RAMConfig/tokenid** 这个文件。如果文件不存在则创建该文件并写入随机数字后读取，存在的话则读取其中的数据。
随后调用 **websGetVar** 函数获取goform请求中的tokenid参数，并调用 **websValueCheck**
对请求数据进行过滤后与文件中的数据进行比对，检查是否一致。
**WebsValueCheck** 函数会对请求的数值进行过滤。过滤的关键字如下图所示，如果请求的数据中包含如下图所示的关键字则不会继续执行该请求。
当tokenid及其他请求的参数全部合法后则代表验证通过，此时将会从符号中读取所请求的form名对应的Handler后跳转执行，如果请求的form在符号中不存在，则会返回form未定义的报错。
这里就出现一个问题了，对应form的请求D-Link只对 **tokenid** 进行了校验，这也意味着只要知道了 **tokenid** ,
无需进行其他验证即可调用所有支持的form请求。根据最初对登录过程的分析， **tokenid** 可以通过访问 **/dir_login.asp**
页面进行获取，这也导致了我们能够直接获取到 **tokenid** ，从而越权调用所有D-Link支持的form请求。
#### 3.2 form越权漏洞利用
通过对goahead的 **main** 函数进行分析，发现了大量的form定义处理的函数注册。
通过对一些列的函数进行分析后，发现了不少有趣的功能，例如下图所示的 **SystemCommand** 。
非常简单粗暴，直接传参command即可进行命令执行。
类似的form有很多，通过对部分form进行分析后发现，除了远程命令执行外，还存在越权修改账号密码、查看系统日志、清空系统日志、重置设备等一系列的危险调用。
### 4\. 固件升级流程分析
D-Link DIR-816的升级页面如下图所示。
选择升级包后点击上传，将会把文件使用post的方式发送给`/cgi-bin/upload.cgi`接口。
根据之前对`goahead`的分析，`cgi-bin`目录所对应的`Handler`函数为`websCgiHandler`该函数最后会通过调用`websLaunchCgiProc`函数执行对应的`cgi-bin`文件。
在`websLaunchCgiProc`函数中将会fork一个子进程，随后调用`execve`来执行cgi-bin文件。
通过在fork函数处下断点。我们可以结合上图的代码间接的分析出execve函数的参数。
POST请求的头部和尾部数据如下图所示。
#### 4.1 upload.cgi分析
通过对 **upload.cgi** 文件进行分析后发现，该文件会从环境变量中读取 **SERVER_SOFTWARE** 及
**UPLOAD_FILENAME** 这两个变量。
因此我们可以利用如下代码直接调用upload.cgi进行测试分析。
    SERVER_SOFTWARE=lbp_server UPLOAD_FILENAME=/var/cgiHNYyMd /etc_ro/web/cgi-bin/upload.cgi
命令执行后 **upload.cgi** 会将上传的固件进行解析随后写入flash中。
接下来继续对upload.cgi进行分析，查看该程序实际执行了哪些操作。在代码头部有一系列的文字处理代码，用途是从我们发送的POST请求数据中提取文件内容，并保存到
**/var/image.img** 文件中。随后调用 **/bin/imgdecrypt** 命令对提取的固件进行解密操作。
完成解密操作后，调用 **/bin/mtd_write** 命令将解压后的固件写入flash中。
upload.cgi的主要工作就是上面说明的这些，因此固件升级的核心部分就是 **/bin/imgdecrypt** 命令。
#### 4.2 imgdecrypt分析