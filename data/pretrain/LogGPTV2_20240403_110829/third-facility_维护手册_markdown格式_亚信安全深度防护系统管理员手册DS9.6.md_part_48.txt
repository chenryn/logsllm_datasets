### 子元素
- **Include**
- **Exclude**

有关 `include` 和 `exclude` 的允许属性和子元素，请参阅 [include/exclude 说明](#第218页)。此处仅包含与该 `EntitySet` 类相关的特定信息。

#### PortSets 的 Include/Exclude 特殊属性
可以使用端口的各种其他属性进行 `include` 和 `exclude` 功能测试。这些测试将某个值与端口的属性值进行比较。请注意，不同平台（甚至同一平台的不同版本）可能不支持所有属性，因此在 `include` 和 `exclude` 标记中使用这些测试时会受到限制。功能测试支持带有通配符 `*` 和 `?` 的 Unix 风格匹配，并且不存在规范化的路径分隔符或其他字符—只是简单的属性值匹配。

- **Path**
  - 检查端口的路径属性与通配符的匹配。例如：
    ```xml
    <PortSet>
      <Include Path="*/iis/*"/>
    </PortSet>
    ```
  - 以上示例将监控由运行主 IIS 二进制文件的进程拥有的端口。

- **Process**
  - 检查端口的进程属性与通配符的匹配。例如：
    ```xml
    <PortSet>
      <Include Process="svchost.exe|outlook.*"/>
    </PortSet>
    ```
  - 以上示例将监控由在 `svchost.exe` 或 `outlook.*` 二进制文件中运行的任何内容拥有的端口。

- **User**
  - 检查端口的用户属性与通配符的匹配。例如：
    ```xml
    <PortSet>
      <Include User="root"/>
    </PortSet>
    ```
  - 以上示例将监控 Unix 系统上由超级用户（root 用户）拥有的端口。

---

### ProcessSet
代表一组进程。

#### 标记属性
相对于完整性监控规则所监控的实体的属性，以下属性是标记本身的 XML 属性。

| 属性       | 描述                   | 必需 | 缺省值 | 允许值     |
|------------|------------------------|------|--------|------------|
| onChange   | 将受实时监控           | 否   | false  | true, false|

#### 实体集属性
以下是可由完整性监控规则监控的实体的属性：

- **CommandLine**: 由 `"ps -f"` (Unix)、`"ps w"` (Linux) 或 Process Explorer (Windows) 显示的完整命令行。
- **Group**: 在之下运行进程的组。在 Unix 下，该属性指进程的“有效”组 ID，可以随时间更改（如果进程丢弃权限或者切换其有效组凭证）。在 Windows 上，该属性是由 Win32 API `GetTokenInformation` 返回的进程的当前主组。
- **Parent**: 创建此进程的进程的 PID。
- **Path**: 进程的二进制文件的完整路径。在某些平台上不可用。
- **Process**: 进程二进制文件的简短名称（无路径）。
- **Threads**: 当前在进程中执行的线程数。在 HP-UX 上不可用。
- **User**: 在之下运行进程的用户。在 Unix 下，该属性指进程的“有效”用户 ID，可以随时间更改（如果进程丢弃权限或者切换其有效用户凭证）。

#### 速记属性
- **Standard**: CommandLine, Group, Parent, Path (如果可用), Process, User

#### "Key" 的含义
`Key` 是 "Process" 属性（可执行文件的简短名称）和 PID 的组合。例如：
- Windows: `notepad.exe\1234`
- Unix: `httpd/1234`

#### 子元素
- **Include**
- **Exclude**

请参阅 [include 概述](#第218页)，了解其允许的属性和子元素。此处仅包含与该 `EntitySet` 类相关的 `include` 和 `exclude` 的特定信息。

#### ProcessSets 的 Include/Exclude 特殊属性
- **CommandLine**
  - 检查进程的 `commandLine` 属性与通配符的匹配。例如：
    ```xml
    <ProcessSet>
      <Include CommandLine="*httpd *"/>
    </ProcessSet>
    ```

- **Group**
  - 检查进程的 `group` 属性与通配符的匹配。例如：
    ```xml
    <ProcessSet>
      <Include Group="root|daemon|lp"/>
    </ProcessSet>
    ```

- **Path**
  - 检查进程的 `path` 属性与通配符的匹配。例如：
    ```xml
    <ProcessSet>
      <Include Path="C:\Windows\System32\*"/>
    </ProcessSet>
    ```

- **User**
  - 检查进程的 `user` 属性与通配符的匹配。例如：
    ```xml
    <ProcessSet>
      <Include User="NT AUTHORITY\SYSTEM|NT AUTHORITY\LOCAL SERVICE|NT AUTHORITY\NETWORK SERVICE"/>
    </ProcessSet>
    ```

---

### RegistryKeySet
描述注册表中的一组项（仅限 Windows）。

#### 标记属性
相对于完整性监控规则所监控的实体的属性，以下属性是标记本身的 XML 属性。

| 属性 | 描述                               | 必需 | 缺省值 | 允许值                |
|------|------------------------------------|------|--------|-----------------------|
| base | 设置 `RegistryKeySet` 的基本项。    | 是   | N/A    | 解析为语法上有效的注册表项路径的字符串值 |

#### 实体集属性
以下是可由完整性监控规则监控的实体的属性：

- **Owner**
- **Group**
- **Permissions**
- **LastModified** (Windows 注册表术语中的 "LastWriteTime")
- **Class**
- **SecurityDescriptorSize**

#### 速记属性
- **Standard**: Group, Owner, Permissions, LastModified

#### "Key" 的含义
注册表项以层次结构形式存储在注册表中，类似于文件系统中的目录。例如：
- 项路径: `HKEY_LOCAL_MACHINE\SOFTWARE\AsiaInfo Security\Deep Security Agent`

`RegistryValueSet` 的 `include` 和 `exclude` "key" 值与项路径匹配。这是一种层次结构模式，其中由 `/` 分隔的模式部分与由 `\` 分隔的项路径部分相匹配。

#### 子元素
- **Include**
- **Exclude**

请参阅 [include 概述](#第218页)，了解其允许的属性和子元素。

---

### RegistryValueSet
一组注册表值（仅限 Windows）。

#### 标记属性
相对于完整性监控规则所监控的实体的属性，以下属性是标记本身的 XML 属性。

| 属性 | 描述                               | 必需 | 缺省值 | 允许值                |
|------|------------------------------------|------|--------|-----------------------|
| base | 设置 `RegistryValueSet` 的基本项。  | 是   | N/A    | 解析为语法上有效的注册表项的字符串值 |

#### 实体集属性
以下是可由完整性监控规则监控的实体的属性：

- **Size**
- **Type**
- **Sha1**
- **Sha256**
- **Md5**

#### 速记属性
- **Contents**: 解析为在策略编辑器中设置的内容哈希算法。
- **Standard**: Size, Type, Contents

#### "Key" 的含义
注册表值是存储在注册表项下的名称/值对。例如：
- 项路径: `HKEY_LOCAL_MACHINE\SOFTWARE\AsiaInfo Security\Deep Security Agent\InstallationFolder`

`RegistryValueSet` 的 `include` 和 `exclude` "key" 值与项路径匹配。这是一种层次结构模式，其中由 `/` 分隔的模式部分与由 `\` 分隔的项路径部分相匹配。

#### 缺省值
每个注册表项都具有未命名值或缺省值。可以通过在模式中使用尾随的 `/` 明确为 `inclusion` 和 `exclusion` 指定此值。例如：
- `**/` 将匹配所有下级未命名值。
- `*Agent/**/` 将匹配与 `*Agent` 匹配的项下的所有未命名值。

注意：注册表值名称可包含任意可打印字符，包括引号、反斜线、`@` 符号等。客户端将实体项名称中的反斜线作为转义符，但仅转义反斜线本身。

#### 示例
- **值**: Hello
- **转义格式**: Hello
- **示例**: `HKLM\Software\Sample\Hello`

希望这些优化后的文本能更好地帮助你理解和使用这些配置。