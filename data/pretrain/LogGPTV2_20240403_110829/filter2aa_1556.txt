# Franz Payer
## Tactical Network Solutions
### [http://cyberexplo.it](http://cyberexplo.it)

### Acknowledgements
- Zachary Cutlip
- Craig Heffner
- Tactical Network Solutions

## Overview
1. Music streaming basics
2. Security investigation process
3. Music player mimicking
4. Exploit demonstration
5. Man-in-the-middle interception
6. Q&A

## What is Streaming?
Streaming is a method of continuously receiving and presenting data while it is being delivered by a provider (Wikipedia). There are two primary methods:
- Custom protocol
- HTTP

## Where Are the Vulnerabilities?
- Music files can be retrieved by mimicking the client player.
- Web traffic is easily intercepted.
- The entire process can be performed from within a browser.

## Process
1. Locate the music file in network traffic.
2. Inspect any parameters in the request.
3. Determine the origin of those parameters (e.g., Page URL, Page source, JavaScript).
4. Attempt to replicate the request.

## Target: Aimini
- **Technology**: Flash
- **Security**: Almost nonexistent
- **Ease of Attack**: Good first target; no need to analyze the code.

## Analyzing the Target
- **Cheap Way Out**: Minimal effort required for exploitation.
- **Song File Analysis**: Detailed inspection of the song file.

## Demo Time

## Target: Grooveshark
- **Technology**: HTML5
- **Security Measures**: Multiple authentication factors, minified JavaScript.
- **Complexity**: Challenging but not impossible.

### Tools
- **JavaScript Beautifier**: [http://jsbeautifier.org/](http://jsbeautifier.org/)

## Analyzing the Target
- **Song File Analysis**
- **more.php Analysis**

### Required Parameters
- **streamKey**
  - How to get it: `more.php - getStreamKeyFromSongIDEx`
- **Session**: `window.GS.config`
- **Token**: ?
- **UUID**: Copied function from `app.min.js`
- **songID**: `window.GS.models.queue.models`
- **CommunicationToken**: `more.php - getCommunicationToken`

### Variable Search
- **Location**: `app.min.js`

## Recap
- **Required Parameters**:
  - **streamKey**: `more.php - getStreamKeyFromSongIDEx`
  - **Session**: `window.GS.config`
  - **Token**: ?
  - **UUID**: Copied function from `app.min.js`
  - **songID**: `window.GS.models.queue.models`
  - **CommunicationToken**: `more.php - getCommunicationToken`

## Demo Time

## Lessons Learned
- Downloading music is inefficient.
- Complete protection of streaming is nearly impossible.
- Hacking can sometimes be easier than coding.

## Key Takeaways
- Many services have poor security.
- Some services will patch their vulnerabilities.
- Others will not.
- Similar web-traffic logging techniques apply to video streaming websites.

## Mitigations
- **Current Technology**:
  - One-time use tokens
  - Encrypted streams (rtmpe)
  - Returning songs in pieces
  - Code obfuscation
- **Future Proofing**:
  - HTML5 audio tag with DRM support
  - "HTTP Live Streaming as a Secure Streaming Method" â€“ Bobby Kania, Luke Gusukuma

## Man-in-the-Middle (MITM) Interception
- **Installation Steps**:
  - Requires an additional Google App
  - Enable Developer Mode
  - Enable Experimental Extension APIs: `chrome://flags`
- **Process**:
  - Redirect requests: `301 - http://localhost:8080`
  - Handle responses: `200 or 206`

### Why No Demo?
- **Stability Issues**:
  - Socket access issues after 1-2 requests.
  - Requires browser restart to fix.
- **Realism**:
  - Unlikely for users to install such a setup.
- **Future Improvements**:
  - Node.js community support
  - Chromify
  - Browserify

## References
- **One Click Music**: [http://cyberexplo.it/static/OneClickMusic.crx](http://cyberexplo.it/static/OneClickMusic.crx)
- **HTTP Live Streaming as a Secure Streaming Method**: [http://vtechworks.lib.vt.edu/bitstream/handle/10919/18662/Instructions%20for%20HTTP%20Live%20Streaming%20Final.pdf](http://vtechworks.lib.vt.edu/bitstream/handle/10919/18662/Instructions%20for%20HTTP%20Live%20Streaming%20Final.pdf)
- **JS Beautifier**: [http://jsbeautifier.org/](http://jsbeautifier.org/)
- **Chromify**: [https://code.google.com/p/chromify/](https://code.google.com/p/chromify/)
- **Browserify**: [https://github.com/substack/node-browserify](https://github.com/substack/node-browserify)

## Questions?