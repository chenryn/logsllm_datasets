Franz Payer
Tactical Network Solutions
http://cyberexplo.it
Acknowledgements
 Zachary Cutlip
 Craig Heffner
 Tactical Network Solutions
What I’m going to talk about
 Music streaming basics
 Security investigation process
 Music player mimicking
 Exploit demo
 Man-in-the-middle interception
 Questions
What is streaming?
 A way to constantly receive and present
data while it is being delivered by a
provider – Wikipedia
 2 methods
 Custom protocol
 HTTP
Where’s the vulnerability?
 Music files can be retrieved by
mimicking the client player
 Web traffic is easily intercepted
 Can be done entirely from the browser
Process
 Locate music file in network traffic
 Inspect any parameters in the request
 Locate origin of those parameters
 Page URL
 Page source
 JavaScript
 Attempt to replicate the request
Target: Aimini
 Flash
 Almost nonexistent security
 Good first target
 Don’t even need to look at the code
Analyzing the target
The cheap way out
The cheap way out
Analyzing the target: song file
Analyzing the target: song file
Demo Time
Target: Grooveshark
 HTML5
 Several factors of authentication
 Minified JavaScript
 Not for the faint of heart
JavaScript beautifier
 You’re going to need it
 http://jsbeautifier.org/
Analyzing the target: song file
Analyzing the target: more.php
Analyzing the target: more.php
So now what?
 We need:
 streamKey
 How do we get it?
 more.php - getStreamKeyFromSongIDEx
 Session - ?
 Token - ?
 UUID - ?
 songID - ?
 more.php - getCommunicationToken
Looking for variables – app.min.js
Recap
 We need:
 streamKey
 How do we get it?
 more.php - getStreamKeyFromSongIDEx
 Session – window.GS.config
 Token - ?
 UUID - ?
 songID - window.GS.models.queue.models
 more.php - getCommunicationToken
Looking for variables – app.min.js
Recap
 We need:
 streamKey
 How do we get it?
 more.php - getStreamKeyFromSongIDEx
 Session – window.GS.config
 Token - ?
 UUID – copied function from app.min.js
 songID - window.GS.models.queue.models
 more.php - getCommunicationToken
Looking for variables – app.min.js
Looking for variables – app.min.js
Demo Time
Things I learned
 Downloading music is a waste of time
 Impossible to completely protect streaming
 Hacking easier than coding?
Things you should know
 People have bad security (shocker)
 Several services will patch their stuff now
 Several services won’t patch their stuff
 The same web-traffic logging will work with
some video streaming websites too.
Mitigations
 Current technology
 One-time use tokens
 Encrypted streams (rtmpe)
 Returning songs in pieces
 Code obfuscation
 Future proofing:
 HTML5 audio tag with DRM support
 “HTTP Live Streaming as a Secure
Streaming Method” – Bobby Kania, Luke
Gusukuma
But Wait, There’s More
 Man-in-the-middle
 Multiple steps to install
 Requires an additional Google-App
 Enable dev mode
 Enable Experimental Extension APIs
chrome://flags
http://music.com/file.mp3
http://music.com/file.mp3
301 – http://localhost:8080
http://localhost:8080
200 or 206
200 or 206
Why no demo?
 Unstable
 Cannot access socket after 1 or 2 requests
 Requires browser-restart to fix
 Unrealistic
 Who would actually install this?
 Try again in a few months
 Node.js community support
 Chromify
 Browserify
References
 One Click Music
http://cyberexplo.it/static/OneClickMusic.crx
 HTTP Live Streaming as a Secure Streaming Method
 http://vtechworks.lib.vt.edu/bitstream/handle/10919/18662/Instru
ctions%20for%20HTTP%20Live%20Streaming%20Final.pdf
 JS Beautifier
http://jsbeautifier.org/
 Chromify
https://code.google.com/p/chromify/
 Browserify
https://github.com/substack/node-browserify
Questions?