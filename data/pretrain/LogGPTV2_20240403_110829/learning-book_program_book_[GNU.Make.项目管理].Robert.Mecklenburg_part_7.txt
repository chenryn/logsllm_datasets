OUTPUT_OPTION=-OS@
你只要变更CC变量的设定值就可以更换C编译器。此外还包括用来设定编译选项的变
量（CFLAGS）、用来设定预处理器选项的变量（CPPFLAGS）以及用来设定结构选项的
变量（TARGET_ARCH）。
在内置规则中使用变量的目的，就是让规则的自定义尽可能简单。因此，当你在makefile
文件中设定这些变量时，务必谨慎。如果设定这些变量时随意为之，将会破坏终端用户
自定义它们的能力。例如，你在makefile文件中做了如下的赋值动作：
CPPFLAGS =-I project/include
如果用户想在命令行上加人CPP的定义，他们一般会像这样来调用make：
$make CPPFLAGS=-DDEBUG
如果他们真的这么做了，将会意外删除（想必是）编译时所需要的-1选项。命令行上
值的详细细节）。所以不当地在makefile中设定CPPFLAGS将会破坏大多数用户预设的
自定义结果。为了避免此问题，你可以使用如下的方式重新定义编译变量：
COMPILE.C=S(CC）S(CFLAGS）$(INCLUDES)$(CPPFLAGS)$（TARGET_ARCH)-C
INCLUDES=-I project/include
或者你可以使用附加形式的赋值动作，我们将会在“其他形式的赋值动作”一节中讨论
此做法。
---
## Page 49
规则
39
支持源代码控制系统的隐含规则
make的隐含规则还针对两种源代码控制系统RCS和SCCS提供了支持。可惜make心有
余而力不足，未能跟上源代码控制系统及现代软件工程日新月异的脚步。我从未发现有
人使用make所支持的源代码控制功能，也未曾看到过任何的源代码控制软件使用make
的这个功能。基于以下几个理由，建议各位不要使用make的这个功能。
首先，make对源代码控制系统RCS和SCCS所提供的支持尽管在当时相当有用，然而
现在RCS和SCCS几平已经完全被ConcurrentVersionSystem（简称CVS）或其他商
用工具所取代。事实上，CVS的内部是使用RCS来管理单独的文件。然而，如果你直接
CVS原先就是设计来填补RCS在这方面的缺陷。make目前尚不支持CVS，这或许不是
一件坏事（注2）。
你不难发现，软件的生命周期变得复杂了，应用程序很难从·个版本顺利地前进到下一
个版本。较典型的例子是：一个应用程序的一个或多个版本同时在进行开发，一个或多
个版本被发布出供大家使用（而且有缺陷需要修正）。CVS所提供的强大功能有助于软
件的多个版本并行开发时的管理工作。不过这也意味着，开发者必须知道他当前所操作
的是程序代码的哪个版本。让makefile于编译期间自动调出源文件，必须注意所调出的
是哪个版本的源文件，以及它是否兼容于开发者工作目录中已经存在的源文件。在许多
实际的开发环境中，开发者一日之内就可以对同一个应用程序的三个以上的不同版本进
行开发。在如此复杂的环境里，很难用软件自动更新你的源代码树。
此外，CVS有一个很有用的功能，那就是允许你访问远程的仓库（repository）。在许多
实际的开发环境中，CVS的仓库（受控文件所构成的数据库）并非放在开发者自己的机
器上，而是放在服务器上。尽管现在网络的访问速度已经很快了（尤其是在局域网络
中），但是在搜索源文件的时候以make来搜索网络服务器并不是一个好主意。
所以，尽管有可能使用隐含规则来连接RCS和SCCS，但却没有任何规则可用来访问CVS
以让你聚集源文件或makefile。我也不认为这么做有多大意义。从另一方面来说，在
makefile中使用CVS却是相当明智的做法。举例来说，这么做可确保当前的源文件被正
确签人（checkin）以及确保版本编号或测试结果的正确性。makefile的作者只需在意
CVS的用法，而不必去管CVS与make要如何整合在一起。
注2：CVS接着又被其他较新的工具所取代。尽管CVS目前是使用得最广泛的源代码控制系
统，不过subversion（http://subversion.tigris.org）看起来有希望成为下一个新浪潮。
---
## Page 50
40
第二章
一个简单的help命令
大型的makefile文件包含了许多工作目标，这让用户很难搞清楚。减少此类问题的方法
之一，就是以一个简洁的help命令为默认目标。然而，手动维护帮助文本（helptext）
总是很麻烦。要避免此问题，可直接从make的规则库中收集可用的命令。接下来的help
#help -The default goal
.PHONY:he1p
help:
16-02-2--]]/.（XM）
（print substr($$1,1,length（ss1)-1))'|
$（SORT）1
此规则的命令脚本组成自一条管道（pipeline）。使用--print-data-base选项可输出
make的规则库，使用--question选项可避免make执行其中的任何命令。此规则库接
着会被送往一个简单的awk过滤器，以便收集任何并非以百分比号和点号开头（分别代
表模式规则和后缀规则）的工作目标以及删掉额外的信息。最后，工作目标列表会经过
排序，并且以四个字段的格式输出。
另一种做法就是对makefile文件本身使用awk命令。这需要对被引入（included）的
makefile文件做特殊的处理（参见“include指令”一节），而且不能处理其所产生的规
则。通过让make处理这些元素以及汇报其所产生的规则，就能自动完成所有的工作。
特殊工作目标
make的默认行为。例如，.PHONY这个特殊工作目标用来声明它的必要条件并不代表一
个实际的文件，而且应该被视为尚未更新。.PHONY将会是最常见的特殊工作目标，但
是你还会看到其他的特殊工作目标。
特殊工作目标的语法跟一般工作目标的语法没有不同，也就是target：prerequisite，
但是target并非文件而是一个假想工作目标。它们实际上比较像是用来修改make内部
算法的指令。
目前共有12个特殊工作目标，可分成三类：第类用来在更新工作目标时修改make的
行为：第二类的动作就好像是make的全局标记，用来忽略相应的工作目标；最后是
.SUFFIXES这个工作目标，用来指定旧式的后缀规则（参见“后缀规则”一节）。
---
## Page 51
规则
41
下面列出（除了.PHONY之外的）最有用的工作目标修饰符（targetmodifier）：
.INTERMEDIATE
这个特殊工作目标的必要条件会被视为中间文件。如果make在更新另一个工作目
标期间创建了该文件，则该文件将会在make运行结束时被自动删除。如果在make
想要更新该文件之际该文件已经存在了，则该文件不会被删除。
当你要自定义规则链时，这会非常有用。举例来说，大多数Java工具都可以接受
Windows形式的文件列表。自定义规则以建立文件列表并把它们的输出文件视为中
间文件，可让make清除这些临时性的文件。
.SECONDARY
这个特殊工作目标的必要条件会被视为中间文件，但不会被自动删除。
.SECONDARY最常用来标示存储在程序库（library）里的目标文件（objectfile）。
按照惯例，这些目标文件一旦被加人档案库后（archive）就会被删除。在项目开发
期间保存这些目标文件，但仍使用make进行程序库的更新，有时会比较方便。
.PRECIOUS
当make在运行期间被中断时，如果自make启动以来该文件被修改过，make将会
删除它正在更新的工作目标文件。因此make不会在编译树（buildtree）中留下尚
未编译完成（可能已经走样）的文件。但有些时候你却不希望make这么做，特别
是在该文件很大而且编译的代价很高时。如果该文件极为珍贵（precious），你就该
用.PRECIOUS来标示它，这样make才不会在自己被中断时删除该文件。
你很少会用到.PRECIOUS，但是当有此需要时，它通常是一个救生员（lifesaver）
的角色。请注意，如果与规则相应的命令在运行时发生错误，make将不会执行自
动删除的动作。make只有在自己被信号中断时才会这么做。
DELETE_ON_ERROR
.DELETE_ON_ERROR的作用与.PRECIOUS相反。将工作目标标示成.DELETE_ON_
ERROR，表示如果与规则相应的任何命令在运行时发生错误的话，就应该删除该工
作目标文件。make通常只有在自己被信号中断时才会删除该工作目标文件。
其他的特殊工作目标将会在适当的时候加以介绍。我们将会在第三章探讨
.EXPORT_ALL_VARIABLES，在第十章探讨涉及并行执行（parallelexecution）的工作
目标。
自动产生依存关系
当我们将单词计数程序重构为使用头文件时，有个棘手的小问题会找上我们。尽管就此
---
## Page 52
42
第二章
例而言，我们可以轻易地在makefile文件中手动加入自标文件与C头文件的依存关系，
但是在正常的程序（而不是玩具程序）里这是一个烦人以及动辑得咎的工作。事实上，
在大多数程序中，这几乎是不可能的事，因为大多数的头文件还会包含其他头文件所形
成的复杂树状结构。举例来说，在我的系统上，头文件stdio.h（这是C语言中最常被引
用的头文件）会被扩展成包含15个其他的头文件。以手动方式解析这些关系是一个令人
绝望的工作。但如果这些文件的重新编译失败，可能会导致数小时的调试，或者更糟的
是因此产生出一个具有缺陷的程序。到底该这么办呢？
计算机擅长于搜索以及模式匹配。让我们使用一个程序来找出这些文件之间的关系，我
们甚至可以使用此程序以makefile的语法编写出这些依存关系。正如你的猜测，此类程
序已经存在，至少对C/C++而言是这样。在gcc中这是一个选项，许多其他的C/C++
编译器也都会读进源文件并写出makefile的依存关系。例如，下面是我为stdio.h寻找依
存关系的方式：
Secho"#include">atdio.c
$gcc-Mstdio.c
stdio.o: stdio.c/usr/include/stdio.h/usr/include/_ansi.h\
/usr/include/newlib.h/usr/include/sys/config.h\
/usr/include/machine/ieeefp.h/usr/include/cygwin/config.h\
/usr/1ib/gcc-1ib/i686-pc-cygwin/3.2/include/stddef.h\
/usr/1ib/gcc-1ib/i686-pc-cygwin/3.2/inc1ude/stdarg.h\
/usr/include/sys/reent.h/usr/include/sys/_types.h\
/usr/include/sys/types.h/usr/include/machine/types.h\
/usr/include/sys/features.h/usr/include/cygwin/types.h\
/usr/include/sys/sysmacros.h /usr/include/stdint.h(
/usr/include/sys/stdio.h
不错吧。你可能会哦着：“现在我必须先运行gcc，再使用编辑器将-M的结果贴到我的
makefile中。真是麻烦！”如果这是最后的答案，你说得没错。传统上有两种方法可用
来将自动产生的依存关系纳人makefile。第一种也是最古老的方法，就是在makefile结
尾加入如下一行内容：
#Automatically generated dependencies follow-Do NotEdit
：然后编写一个脚本以便加人这些自动产生的脚本。这么做当然比手动加人要好，但不是
很漂亮。第二种方法就是为make加入一个include指令。如今大多数的make版本都
支持include指令，GNUmake当然一定可以这么做。
因此，诀窍就是编写一个makefile工作目标，此工作目标的动作就是以-M选项对所有
源文件执行gcc，并将结果存入一个依存文件中（dependencyfile），然后重新执行make
以便把刚才所产生的依存文件引人makefile，这样就可以触发我们所需要的更新（即加
人）动作。在GNUmake中，你可以使用如下的规则来实现此目的：
---
## Page 53
规则
43
depend:count_words.clexer.ccounter.c
include depend
运行make以编译程序之前，你首先应该执行makedepend以产生依存关系。这么做虽
然不错，但是当人们对源文件加人或移除依存关系时，通常不会重新产生depend文件。
这会造成无法重新编译源文件，整个工作又会变得一团乱。
在GNUmake中，你可以使用一个很酷的功能以及一个简单的算法来解决此问题。首先
介绍这个简单的算法。如果我们为每个源文件产生依存关系，将之存人相应的依存文件
（一个扩展名为.d的文件）并以该.d文件为工作目标来加人此依存规则（dependency
rule），这样，当源文件被改变时，make就会知道需要更新该.d文件（以及目标文件）：
counter.o counter.d:src/counter.cinclude/counter.h include/lexer.h
你可以使用如下的模式规则以及（不容易看得懂的）命令脚本（摘录自GNUmake的使
用手册）来产生这项规则：（注3）
.d：8.c
$(CC)-M S(CPPFLAGS)S<>S@.SSSS;
sed's，\(s*\)).o：]*,\1.os@：，g's@;\
rm -f s@.ssss
现在介绍这个很酷的功能。make会把include指令所指定的任何文件视为一个需要更
新的工作目标。所以，如果我们表明要引人.d文件，则make会在读进makefile文件时
自动创建这些.d文件。我们的makefile加人了自动产生依存关系的功能之后会变成下面
这样：
VPATH=srcinclude
CPPFLAGS=-I include
SOURCES=count_words.c
注3：这是一个令人印象深刻的小型命今脚本，不过我认为需要做些说明。首先，我们会以一
M选项来使用C编译器，以便创建一个包含此工作目标的依存关系的临时文件。该临时
文件的名称由工作目标SQ以及具唯一性的数字扩展名S$SS所组成。在sheli中，变量
SS会返回当前所运行的shell的进程编号。因为进程编号具有唯一性，所以这么做将可
以产生一个独一无二的文件名。然后我们会使用sed以.d文件为工作目标加入此规则。
sed表达式由搜索部分\（S*\）\.o[：]*以及替换部分\1.oS@：（以运号为分隔符）
组成。搜索表达式的开头是工作目标的主文件名S*，被括在正则表达式（regular
expression，简称RE）的分组\（\）中，后面跟着扩展名\.O。工作目标的文件名之后，
将会出现零个或多个空格或冒号，即【：]*。替换部分会通过引用第一个RE分组来恢
复最初的工作目标并且附加上扩展名，即\1.O，然后加入依存文件工作目标S@。
---
## Page 54
第二章
lexer.c
counter.c
count_words:counter.olexer.o-lfl
count_words.o:counter.h
counter.o:counter.h lexer.h
lexer.o:lexer.h
include $（subst .C,.d,$(SOURCES))
.d：&.c
S(CC)-MS（CPPFLAGS)$<>$@.SS$S;
sed's,\(s*\)\.o[：],\1.osθ：g's@;
SSSS'D$ J-I
include指令总是应该放在手动编写的依存关系的后面，这样默认目标才不会被某个
依存文件抢走。include指令可用来指定一串文件（文件名中可以包含通配符）。我们
在此处使用了make函数subst来将一串源文件的文件名转换成一串依存文件的文件
名。我们将会在“字符串函数”一节中探讨subst的细节，现在你只要知道subst可
用来将S（SOURCES）里的文本从.c字符串转换成.d字符串。
如果针对此makefile以--just-print选项来运行make，则会得到如下的结果：
make --just-print
Makefile:13:count_words.d:No such file or directory
Makefile:13:lexer.d:No such file or directory
Makefile:13:counter.d:No such file or directory
gcc -M-I include src/counter.c>counter.d.s$;
sed's,\（counter\)\.o[：]*,\1.ocounter.d：，g'
counter.d;\
rm -f counter.d.ss
flex-t src/lexer.1>lexer.c
gcc -M-Iinclude 1exer.c>lexer.d.s$;
sed's,\（lexer\)\.ol：]*,\1.o1exer.d：，g′lexer.d;
rm -f lexer.d.s$
gcc -M-Iinclude src/count_words.c>count_words.d.s$;
sed's,\（count_words\)\.o[:]*,\1.ocount_words.d：，g'<count_words.d.
$S
count_words.d;
rm -f count_words.d.ss
rm lexer.c
gcc-Iinclude -c-o count_words.osrc/count_words.c
gcccount_words.ocounter.olexer.o/lib/libfl.a-ocount_words
一开始，make的响应看起来如同一个make的错误信息。不过不必担心，这只是一个警
告而已。起先make会搜索引人文件，但是找不到它们，所以make会在搜索“用来创建
---
## Page 55
规则
45
样的警告。若不想看到这个警告信息，只要为include指令前置一个连接号（-）即可。