then  C  0 W’ is stabilizing to A. 
0 
Recall  that  W’ and  W  are  designed  based  only  on 
the  knowledge  of  A  and  not  of  C  in  the  graybox  ap- 
proach. This results in the reusability of the wrapper for 
any everywhere(-eventually) implementation of A. 
We  now  focus  our attention  on  distributed  systems. 
The task of verifying everywhere implementation  is dif- 
ficult  for  distributed  implementations,  because  global 
state is not available for instantaneous access, all possi- 
ble interleavings of the steps of multiple processes have 
to be accounted for, and global invariants are hard to cal- 
culate. For effective graybox stabilization of distributed 
systems, we therefore restrict our consideration to a sub- 
class of everywhere specifications, namely  local every- 
where specijications. 
A local  everywhere specification A is one’that is de- 
composable into local specifications, one for every pro- 
’.  Hence,  given  a dis- 
cess i; i.e., A  = (n i  ::  Ai) 
tributed  implementation  C  = (n i  ::  ci) it  suffices 
to verify  that  [Ci  5  Ai] for each process  i.  Verifying 
these  “local  implementations”  is  easier  than  verifying 
[C C A] as the former depends only on  the  local  state 
of each  process  and  is independent of the environment 
of each process (including the ather processes). 
Let  4  =  (n i  ::  Ai), C  =  (n i  ::  Ci), W  = 
(fl i :: Wi), and W’ = (n i ::  Wl). 
Lemma 4.  (Vi :: [Ci 2  Ai]) + [C 
A] 
0 
(Vi  :: 
((Vi  ::  [Ci  Ai])  A 
Lemma  5. 
[W,! c  Wil)) =+  [(C 0 W’) E  (A 0 Wl 
U 
From Lemma 5 and Theorems 2, we get the following. 
‘ A  formula  (op i  :  R.i  :  X.i) denotes  the  value  obtained  by 
performing  the  (commutative and  associative)  op on  the  X.i values 
for all  i that  satisfy  R.Z.  As special  cases, where  op is conjunction, 
we write  (Vi  :  R.i  : X.2). and  where  op is disjunction,  we  write 
( 3  : R.i  : X.Z). Thus, (Vi : R.i  : X . i )  may be read as “if R.i is true 
then so is X.i”, and (32 : R.i  : X.2) may be read as “there exists an Z 
such that both R.Z  and X.i are true”. Where R.i is true, we omit R.i. 
If  X  is a statement then  (Vi : R.i  : X.i) denotes that X  is executed 
for all i that satisfy R.Z. This notation  is adopted  from [7]. 
391 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:03 UTC from IEEE Xplore.  Restrictions apply. 
Theorem 6. 
(Stabilization via local everywhere specifications) 
If  (Vi :: [Ci 5 Ai]), (Vi :: [WL  C Wi]), 
and A  0 U/ is stabilizing to A, 
then C  [I W’ is stabilizing to A. 
0 
::  [W,! C Wi]), 
(Vi  ::  [Ci C C*Ai]),  (Vi 
Corollary 7. 
If 
[ C * A  
then C  1 TY‘  is stabilizing to A. 
C*(A 0 W ) ] ,  ’4 0 W is stabilizing to A, 
0 
Corollary 7 is the formal statement of the amenability 
of  local  everywhere-eventually specifications  for  gray- 
box stabilization.  Again, it  is tacit  that  W,! and Wi are 
designed based only on the knowledge of Ai  and not of 
Cl. 
Although  Corollary  7  clarifies  the  role  of  local 
everywhere-eventually specifications,  it leaves open the 
question  of  how  to  design  wrappers  (n i 
:: Wi) that 
render (n i  ::  Ai) stabilizing.  For  instance, designing 
Wi for each i such that  (Ai 0  Wi) is  stabilizing to Ai 
does not always imply  that  (n i  :: Ai  0 Wi) is stabi- 
lizing  to (n i  ::  Ai); even  though each process i  may 
be  internally  consistent  due to  Wi, the  processes  may 
be mutually  inconsistent. Moreover, Wi that renders Ai 
stabilizing may interfere with the wrappers of other pro- 
cesses  and  hence  with  their  stabilization.  That  is,  we 
need  to  also  design  wrappers  to  resolve  inter-process 
consistency issues. 
3  Timestamp-Based  Distributed  Mutual 
Exclusion (TME) 
Towards applying the graybox method in the context 
of TME, in this section, we begin by giving a specifica- 
tion of TME in  Section 3.1 and then present a local ev- 
erywhere specification, Lspec, for TME in Section 3.2. 
3.1  TME problem 
System model.  The system model for TME problem 
is  message passing;  processes communicate solely  via 
message  passing  on  interprocess  channels.  Execution 
is asynchronous, i.e.,  every process executes at its own 
speed and messages in  the channels are subject to arbi- 
trary but finite transmission delays.  We assume that the 
processes are connected. 
Faults.  The fault model  for TME allows messages to 
be corrupted, lost, or duplicated at any time.  Moreover, 
processes (respectively channels) are subject to transient 
failures  and  their  state  may  be  transiently  (and  arbi- 
trarily)  corrupted at  any  time.  Stabilization  is  desired 
392 
notwithstanding the occurrence of any finite number of 
these faults. 
Th4E  specification. 
The  specification  of  TME, 
ThlE-Spec,  is  standard.  We  express  it  here  in  the 
UNITY specification language [SI. Let p and q be predi- 
cates on program states.  “ p  unless q” denotes that if p  is 
true at some point in the computation and q is not, in the 
next steppremains true or q becomes true. “stable(p)” 
is  defined  as  ( p  unless false).  “q  is  invariant”  iff  q 
holds in the initial states and stabZe(q). “ p  + q”  (pro- 
nounced p  leads  to q )  means that  if  p  is true at  some 
point, q will be true (at that point or a later point) in the 
computation.  “ p  L)  q”  (pronounced p  leads to always 
q )  iff  ( p  + q )  and  stable(q).  For  a  detailed  discus- 
sion of these temporal predicates, we refer the interested 
reader to [5]. 
TFMESpec=MEl  A  ME2  A  ME3, 
where MEI, ME2, and ME3 are defined as follows. 
0  ( M E I )  Mutual Exclusion: 
( V j , k  :: e.j  A  e.k  =+ j  = k )  
0  (ME2) Starvation Freedom:  ( V j  :: h.j  e e.j) 
0  (ME3) First-Come First-Serve: 
(Vj, k  : j  # k  : (h.j  A  REQj !&  REQk) 
e ts.(e.j) < ts.(e.k)) 
Following  the standard terminology, we use e . j  (pro- 
nounced  eatin9.j)  to  denote  that  process  j 
is  ac- 
cessing  the  critical  section  (CS), and  h.j  (pronounced 
h.ungry.j) to denote that j  has requested for the critical 
section but has not yet been granted to access the critical 
section.  We use t.j (pronounced thinking.j) to denote 
that j  is neither eating nor hungry. We use t s . j  to denote 
the timestamp qf the most current event at j ;  for an event 
that occurred at j ,  ts. f j  denotes the timestamp of f j .  
f.1, 
R:EQj is a lower bound for the timestamp of the current 
“request” of j :  If j  has not issued a request for CS (i.e., 
t.j  holds)  then  REQj  = t s . j ,  else REQj  denotes the 
timestamp of the current request of j .  j.REQk  denotes 
j ” s  latest information about REQk, that is, j.REQk  de- 
notes j’s local copy of the timestamp of the last request 
of k .  
The problem of designing graybox stabilization for 
TME.  While designing graybox stabilization for TME, 
one  possibility  is  to  demand  that  TME-Spec  be  an 
everywhere(-eventually) specification.  However  this  is 
unreasonable:  for  instance,  requiring  Mutual  Exclu- 
sion  (MEI) in  all  system  states  is  unreasonably  re- 
strictive,  since  it  is  very  difficult  (if  not  impossible) 
to find an  implementation that everywhere(-eventually) 
’Lamport’s  [ I31 happened-before  relation, &, is the smallest tran- 
f for any two events e and f such that 
sitive relation that satisfies e 
( I) e and f are events on the same process and e occurred before f .  or 
(2) e is a send event in one process and f is the corresponding receive 
event in another process. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:03 UTC from IEEE Xplore.  Restrictions apply. 
implements  MEI.  The  problem  therefore  is  to  find 
an  everywhere(-eventually)  specification  that  implies 
TMESpec.  Moreover, the specification should  be  suit- 
able  for  distributed  systems;  i.e.,  it  should  be  a  local 
everywhere(-eventually) specification. 
to  (i)  find  a 
The  problem  now  reduces 
local 
everywhere(-eventually)  specification Lspec that imple- 
ments  TMESpec from  its initial  states,  and  (ii) design 
a  graybox  wrapper  W ,  such  that  for  any  implementa- 
tion M  that everywhere(-eventually) implements Lspec, 
M  0 W stabilizes to Lspec. 
3.2  Lspec 
Our Lspec  for each j  consists  of  three  parts:  Client 
Spec, Program Spec, Etzvironnient Spec, each of  which 
must be everywhere implemented.  We also specify Init, 
the initial  states of Lspec. 
t . j ) )   A 
-(e.j  A 
t . j )  
(e.j unless t . j )  
Client Spec of j .  
Structural Spec: 
(h.j $ (e.j  V 
Flow Spec: 
(h.j unless e.3)  A 
A  ( t . j  unless h . j )  
CS Spec: 
e.j  H 7 e . j  
Program Spec of j .  
Request Spec: 
REQ,  =REQ:) 
(h.j 
A  h.j  H (Vk : k  # j  : Sent(REQ,,j, k ) )  
Reply Spec: 
(Vk : j  # k  : 
(Received(j.REQk)  A 
:i’.REQk & REQ, 
r-)  Sent(REQ,, j ,  k ) )  
CS Entry Spec: 
( e . j  
(h.j  A 
CS Release Spec: 
t . j   + REQj  = t s . j  
REQj = REQ:)  A 
(Vk : k  # j  : RE&,  ltj.REQk)) w  e.j 
Environment Spec of j .  
Tirnesfamp Spec: 
t s  is from a total domain and 
(Ve, f :: e 
Cornrn mica t ion Spec : 
Channels are FIFO. 
f + ts.e < t s . f )  
ts.j = 0  A  REQj  = 0  A 
Init. 
(t.j  A 
(Vk : k  # j  : j.REQk = 0)  A 
Intuitively speaking, Structural  Spec asserts that  for 
every  process  j ,  in  any  state  exactly  one  of  h.j, e.j, 
or  t.j holds.  Flow Spec imposes  an  order  on  the  sat- 
isfaction  of  h.j, e . j ,  and  t.j; e.g.,  if  h.j  holds  in  the 
(channels are empty)) 
current  state  then  in  the  next  state  t.j  may  not  be- 
come  true.  CS  Spec  states  that  e.j  is  transient;  if 
e.j  holds  in  the  current  state  then  in  some future state 
1 e . j  holds.  Request  Spec ensures that  if  h.j  holds  in 
the current  state, the  value of  R E Q j  is left  unchanged 
(REQI  refers to  the  value  of REQj in  the  preceding 
state), and eventually a request message with timestamp 
R E Q j  will  be  sent  to all processes  (i.e., the  predicate 
“Sent(REQj, j ,  k))” will  be  truthified  for  all  k),  Re- 
p / ) ~  Spec  guarantees  that  each  time  an  earlier  request 
is  received  from  another process  (i.e.,  the predicate  “( 
j.REQk  & R E Q j ) ”  holds), 
Received(j.REQk)  A 
a reply message  will eventually be sent to that process. 
CS Entry  Spec  asserts  that  if  h.j  holds  in  the  current 
state, the value of R E Q j  is preserved,  and additionally 
if  R E Q j  is earlier than all of j ’ s  copy of the requests of 
the other processes then j  eventually enters CS. Release 
Spec asserts that when t.j holds REQj is always set to 
the timestamp of the most current event in j. Timestamp 
Spec states that  the  timestamp values  should  be totally 
ordered and satisfy the “happened-before”, @ , relation 
(i.e., t s  values do not decrease  over time).  Communica- 
tion Spec requires all the channels to be FIFO. 
Theorem 8 (TME-Spec).  Every system M that imple- 
ments Lspec also implements  TMESpec. 
(VM ::  [Ad 
1 
Lspec]i,it  * [Ad c  TMESpec]i,it 
0 
It  is  reasonable  to- demand that  Client  and Program 
specifications be implemented at each process from any 
state; in fact, in  Section 5 we recall  well-known imple- 
mentations from the literature which everywhere imple- 
ment these specifications.  Likewise,  the demand is rea- 
sonable  for  Timestamp Spec,  since  it  admits  local  ev- 
erywhere implementations, for example, logical clocks 
[ 131.  The “less-than’’ relation,  & , induces  a total  or- 
der on the timestamps produced by logical clocks. Also, 
logical clocks satisfy 
relation.  Formally  speaking: 
(Vej, f k   :: 1c.ej  & IC. f k   = 1c.ej  < IC. f k   V 
(1c.ej  = 
IC. f k   A  j  < k ) ) ,  and (Ve, f  :: e !&  f  + 1c.e & IC. f ) .  
4  Graybox  Stabilization  Wrapper  for 
TME 
Based  on  Lspec  described  above,  we  now  design 
a  graybox  wrapper  that  ensures  stabilization  for  all 
everywhere-eventually implementations M  of Lspec. 
Intuitively  speaking,  Lspec  (more  specifically  Pro- 