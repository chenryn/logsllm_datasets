requires that the metadata be made persistent so that is can be restored later.
If the CSSE implementation does not support this functionality, it may not be
able to prevent all higher-order injection attacks. In such a scenario, CSSE could
mark all the input from persistent storage as untrusted, which would prevent
higher-orders attacks but may result in false positives (cf. Section 6.2).
CSSE can also provide a programming interface to access the metadata di-
rectly. This allows the application developer to address special cases, such as
when data read from a potentially unsafe source is explicitly trusted, or when
untrusted data is used in a non-typical context.
Metadata-Preserving String Operations. As we have seen in Section 2, output ex-
pressions are typically constructed from application constants and user-provided
input, using a chain of string operations, e.g., concatenation, substrings, case
conversion or regexp matching.
We want to make sure that the metadata assigned to the string variables
“survives” this chain of operations. Similar to the instrumentation of the input
vectors for the metadata assignment, CSSE also instruments the string functions
provided by the platform. These instrumented string functions are metadata-
aware, and will update the metadata of their operands.
The complexity of the instrumentation depends on the particular string func-
tion. In many cases, this will be trivial, e.g., a function that changes the case of a
string does not change the origin of the string fragments and thus only copying
of the metadata is required. In other cases, more logic might be needed, e.g.,
string concatenation of two strings involves merging the metadata of the two
strings. The number of string operations in a platform is typically quite large,
and for CSSE to be complete, the entire set requires instrumentation.
The metadata in CSSE uses a string abstraction, as opposed to the lower-
level internal representation of strings (i.e., byte or character arrays). In the
rare cases where applications manipulate the internal representation of the data
directly,CSSE might not be able to ensure up-to-date metadata. This can po-
tentially lead to false positives or false negatives (cf. Section 6.2).
The three parts discussed above, form the metadata tracking system of CSSE.
When these parts are implemented, it is possible to distinguish between the user-
provided and developer-provided parts of the output expressions at any stage of
their creation. This satisﬁes the ﬁrst condition mentioned earlier.
Context-Sensitive String Evaluation. Context-sensitive string evaluation is the
ﬁnal part of CSSE, and is responsible for determining and executing the checks
that ensure strict channel separation in the output expressions. This is again
136
T. Pietraszek and C. Vanden Berghe
achieved by an instrumentation of the platform, in this case the output vectors.
This ensures that when the application calls an output vector to “execute” an
output expression, CSSE is able to intercept the execution.
At this point, the complete context is known. The metadata of the output
expression describes the origin of the data and thus determines parts of the
expression that require checking. The function called by the application provides
the second part of the context: the output vector the expression is intended for,
and, following from this, the required checks.
For example, when an application calls mysql_query(), the CSSE instrumenta-
tion of this output vector intercepts this call. As CSSE instruments the function
called, it is also aware that the function is responsible for the MySQL output
vector and can thus determine the required checks on the untrusted fragments
of the output expression.
For some output vectors, CSSE has to perform a limited syntactic analysis
of the output expression. This is illustrated with the example of Section 2.1. In
a single SQL query, the string constant and numerical constant have diﬀerent
interpretations and thus require diﬀerent checks. Another example is HTML,
where the same is true for elements, attributes and character-data parts. The
complexity of the syntactic analysis required depends on the output vector.
When CSSE detects user-originated variable fragments that carry syntactic
content in a given context, it is able to prevent the injection attack or raise an
alert. The actual measures taken for preventing the attack depend on both the
implementation and the particular output vector. Typically, CSSE escapes the
oﬀending content or blocks the request.
5 Implementation
CSSE is a generally applicable method, not tied to any particular platform. There
are, however, several reasons why we chose PHP [14] as the target platform for
our prototype implementation. First, PHP applications are particularly prone
to injection vulnerabilities, owing to the lack of strict typing and proper APIs
for data serialization. Second, numerous open-source PHP web applications are
available, which allows us to easily validate our method and implementation.
Finally, the platform itself is open-source, which enabled us to make the modi-
ﬁcations described in this section.
CSSE can be implemented in diﬀerent layers of the software stack. In partic-
ular, CSSE can be implemented either in the application itself or in the platform
executing the application. The former requires modiﬁcations to the application,
which need to be automated to retain one of the most important advantages of
CSSE, namely, that it does not rely on the application developer. This can be
achieved using a source code preprocessor that instruments the relevant function
calls and operations. A more elegant and ﬂexible solution makes use of the aspect-
oriented programming [5] (AOP) paradigm to weave the necessary functionality
into the application code, either at compile or at run time. As AOP implementa-
tions for PHP [18] do not yet support the necessary features (intercepting string
Defending Against Injection Attacks Through CSSE
137
operations, not merely function calls), in our prototype we implemented CSSE
using the second approach, i.e., by modifying the PHP platform.
The modiﬁcations to the PHP platform, comprised of the PHP interpreter and
run-time libraries, entail the implementation of the four CSSE parts described in
Section 4: metadata representation, metadata assignment, metadata-preserving
string operations and context-sensitive string evaluation. Implementing these
in an existing platform is not a trivial task and, in the case of PHP, involves
numerous changes to a sparsely documented C code.
The goal of our prototype implementation of CSSE is threefold. First, it is
a tool to illustrate our method and gain insight in the complexity involved in
implementing it for an existing platform. Second, it allows us to test and demon-
strate its eﬀectiveness on a real-world application. Finally, it provides us with an
estimate of the performance impact incurred by CSSE. As a goal of our proto-
type is a proof of concept, we have implemented the four parts of CSSE described
in Section 4 up to the level that they support the aforementioned goal.
The prototype described here is based on the version 5.0.2 of the PHP plat-
form. We modiﬁed it such that CSSE can be selectively turned on or oﬀ depend-
ing on the particular application being executed. The scope of our implementa-
tion is to prevent SQL injections in web applications. Therefore, for the input
vectors, we focused on those related to HTTP, i.e., GET, POST, cookies and
other HTTP parameters, and for the output vectors we focused on MySQL. Our
prototype implements the four CSSE parts as follows:
Metadata Representation. CSSE requires that every string variable originating
from user input have metadata associated with it. In our prototype we use a
central metadata repository, which is implemented as a hash table indexed by
the zval pointer — a dynamic memory structure representing a variable in PHP.
The metadata itself is represented as a bitmap of the length of a string, indi-
cating the origin of each character. Currently, we use only one bit of information
per character, to indicate whether certain data is user-provided. As discussed
in Section 4, the remaining bits can be used to keep track of diﬀerent possible
origins of the data (e.g., user input, data read from the database, escaped user
input and escaped data read from the database).
String variables that contain only parts that are not user-provided are identi-
ﬁed by the absence of metadata. This improves both run-time performance and
memory eﬃciency. It should, however, be noted that memory eﬃciency was not
one of the design goals of our prototype implementation. By using more eﬃ-
cient memory representation, the memory eﬃciency of our prototype could be
substantially improved.
Metadata Assignment. When an HTTP request is received by the PHP engine,
all user input is imported into PHP variable space. We instrumented the ap-
propriate functions to associate the proper metadata with each of the variables
during the import phase. In addition, we also mark all strings read from the
database as untrusted, thereby preventing second-order attacks (cf. Table 1).
Assigning metadata to variables imported from the environment and HTTP
requests (GET, POST, cookies and authentication information) required modiﬁ-
138
T. Pietraszek and C. Vanden Berghe
cations to only one function, namely the one responsible for registering of exter-
nal variables as PHP variables (php_register_variable_ex). Other input vectors
(e.g., database input) require modiﬁcations to appropriate external modules,
e.g., ext/mysql in the case of MySQL.
Metadata-Preserving String Operations. Once the appropriate metadata is as-
signed to a string variable, it has to be preserved and updated during the entire
lifetime of this variable. To meet this requirement, we instrumented a set of im-
portant string operations to make them metadata-preserving. This set includes
the most common string operations used in the creation of expressions and con-
sists of string concatenation, string interpolation (e.g., "constant $var1 $var2"),
and the function that escapes metacharacters in the data (addslashes), and was
suﬃcient for performing the evaluation detailed in the next section. We identi-
ﬁed that in a complete implementation, 92 functions (out of the total of 3468
functions in PHP) would require instrumentation. Note that in most cases the
instrumentations involves copying the entire or parts of metadata associated
with the input string.
String operations are very common in applications, and thus special care has
to be taken to minimize the performance impact of CSSE on this type of op-
erations. In a typical application, most string operations will be performed on
operands that contain no metadata, i.e., on variables that are not user-provided.
We have addressed this by implementing the metadata-preserving string opera-
tions in such a way that the overhead is negligible in the absence of metadata
(one hash table lookup for each operand to check whether metadata exists).
Context-Sensitive String Evaluation. In our prototype we focused on MySQL, a
very common output vector for web applications. This required the instrumen-
tation of all the functions responsible for MySQL query execution. When these
functions are called, they will use the available metadata and knowledge about
the output vector to perform the necessary checks on the executed expressions.
When the function that sends the MySQL query to the database is called, it
is intercepted by CSSE. Prior to execution, CSSE checks whether there is any
metadata associated with the SQL expression and if so it performs the neces-
sary checks on the untrusted parts. In the case of MySQL, we require a lim-
ited syntactical analysis of the expression that distinguishes between string con-
stants (e.g., SELECT * from table where user=’$username’) and numerical con-
stants (e.g., SELECT * from table where id=$id). Our method removes all unsafe
characters (unescaped single quotes in the ﬁrst case and all non-numeric char-
acters in the second case) before sending the query to the database server.
6 Experimental Results
This section focuses on testing of the eﬀectiveness and performance of CSSE
on a real-world PHP application. It is important to note that our prototype
was designed without analyzing the source code of this application. Instead, we
determined the set of string operations and input and output vectors relevant
Defending Against Injection Attacks Through CSSE
139
for our prototype based upon our knowledge of web applications in general. This
provides some credibility that our method is valid and will achieve similar results
with other applications.
For our experiments, we opted for the popular open-source bulletin-board
application phpBB [15], based on the following three reasons. First, phpBB is
widely used and thus results are relevant to a large user community. Second, it
has a high degree of complexity and thus our validation shows that the prototype
works eﬀectively on non-trivial examples. Finally, phpBB has been know for
injection vulnerabilities in its older versions [16]. In our experiments we used
version 2.0.0 (dated April 04, 2002), in which several injection vulnerabilities
have been identiﬁed.
6.1 Preventing Injection Attacks
At the time of writing, there were 12 SQL injection vulnerabilities pertaining
to phpBB v2.0.x in the Bugtraq database [16]. We were able to successfully
reproduce seven attacks exploiting these vulnerabilities (Bugtraq IDs: 6634, 9122,
9314, 9942, 9896, 9883, 10722). The other ﬁve were either speciﬁc to versions later
than 2.0.0 or we were not able to reproduce them.
For our experiments, we applied the exploits for these vulnerabilities with
CSSE disabled and made sure that they succeed. Subsequently, we enabled CSSE
and repeated the attacks. The initial prototype prevented six of these seven
attacks, without adversely aﬀecting the usability of the phpBB. The seventh
attack (Bugtraq ID 6634), was also prevented after we instrumented an additional
string function, implode, used by phpBB.
Examination of the source code reveals that by applying syntactic checks for
HTML and script evaluation, our prototype would also prevent known XSS and
script-injection vulnerabilities in phpBB. To illustrate how CSSE works, we will
show how it prevented one of the seven vulnerabilities — the vulnerability with
Bugtraq ID 9112. The vulnerability is caused by the following code in search.php:
The variable $search_id has all the quotes escaped, either by PHP interpreter
(if the “MagicQuotes” option is enabled) or automatically by the script and
therefore the quotes are not a problem here. The problem is that the variable
is used in a numerical context, where the metacharacters are any non-numerical
characters. The condition in the comparison in line 4 evaluates to true when a
non-zero numerical preﬁx in the variable exists, not when the variable contains
only a numerical value (what the developer probably meant). As a result of this
1 { code }
2 $search_id = (
( $HTTP_GET_VARS [ ’ search_id ’ ]) ) ? $HTTP_GET_VARS [ ’
search_id ’] : ’ ’;
3 { code }
4
5
6
(
{
( $search_id ) )
$sql = " SELECT search_array FROM " . SEARCH_TABLE . " WHERE search_id =
$search_id AND session_id = ’" . $userdata [ ’ session_id ’] . " ’" ;
(!( $result = $db - > sql_query ( $sql ) ) )
{ code }
7
8
9 { code }
140
T. Pietraszek and C. Vanden Berghe
invalid comparison, the code is vulnerable to injection attacks. For example,
providing the following value as a $search_id variable “1 or 1=1”, executes the
following query in the database:
search_array
XXX
search_id =
1
or 1=1
session_id =
When CSSE is enabled, metadata associated with variable $sql marks the
fragment “1 or 1=1” as originating from the user. Before the actual query is
executed (line 7), CSSE parses the content of the above SQL query and de-
termines that user-originated data (marked in gray) appears in the numerical
context. Therefore, it detects and removes the part of user-originated data that is
not allowed to occur in this context (marked in black). The result is the same as
if the variable had been casted to an integer using intval($search_id) function,
but the entire process is completely transparent to the application developer.
6.2 False Positives and False Negatives
There are two types of errors related to intrusion detection and prevention meth-
ods, generally referred to as false positives and false negatives. In this context,
false positive are events, in which legitimate actions are considered malicious
and therefore blocked. Conversely, false negatives are events, in which malicious
actions go undetected.
We have shown that CSSE is an eﬀective method for defending against in-
jection attacks, however, in some situations false positives or false negatives can
appear. We identiﬁed the following three scenarios:
Incomplete implementations. A complete CSSE implementation requires that all
relevant input vectors, string operations and output vectors are instrumented.
For example, when a string operation that is not instrumented is used on par-
tially untrusted data, the metadata attached to this data might be lost or out-
dated. This may result in false positives or false negatives. Note that the lack of
metadata may implicity mean that the entire string is safe (a “fail-safe” mode
of CSSE) or unsafe (a “fail-secure” mode of CSSE). It depends on the particular
application and requirements which mode should implemented.
Defending against higher-order injections requires special attention. For CSSE
to correctly address this class of injection vulnerabilities, metadata associated
with persistent data has to be made persistent as well. If this functionality is not
implemented, as is the case with our prototype, this might lead to either false
positives or false negatives depending on the default policy of input retrieved
from persistent storage.
Incorrect implementations. A second scenario, in which false positives or false
negatives might occur, is the incorrect implementation of one of the parts that
make up CSSE. The instrumentation of the output vectors is the most complex
part, as this requires a limited syntactic analysis of the output expressions, and
is therefore most prone to implementation errors. This might result in either
false positives or false negatives.
Defending Against Injection Attacks Through CSSE
141
For example, in our SQL implementation, we assumed that a user-supplied
part might occur in a string or numeric constant. This works well with MySQL,
but other databases may require more complicated checks or syntactic analysis.
Another example is related to XSS attacks. Whereas preventing all HTML tags
in a text is very simple, preventing only unsafe HTML tags requires a more
complex analysis of the document (e.g., even a potentially safe  tag can have
a onMouseOver attribute followed by a script, Bugtraq ID: 6248).
It is worth stressing that CSSE needs to be implemented only once per
platform, and can therefore be developed by specialists and be subject to
stringent testing.
Invalid assumptions. A third scenario pertains to the assumptions made in
CSSE. In rare situations where these assumptions do not hold, this might again
lead to false positives or false negatives.
One important assumption on which CSSE is built, is that user-provided data
does not carry syntactic content. In some special cases we do trust user-provided
data and thus allow the syntactic content in this data. In a CSSE-enabled plat-
form this will result in false positives. However, there are two methods for allevi-
ating this problem: CSSE can be selectively enabled depending on the application
and certain data can be explicitly marked as trusted using a provided API.
The second assumption is related to the string representation. CSSE operates
on a string-abstraction representation of data. When an application performs
direct manipulations on the lower-level representation, e.g., a character array,
CSSE might not be able to update the metadata properly. In such a situation, to
prevent false positives or false negatives, metadata should be manually updated
by the application developer using a provided API.
6.3 Run-Time Measurements
We also analyzed the impact of CSSE on the performance of PHP. We performed
ﬁve tests in which we measured the execution time:
T1-cgi: Requesting the webpage phpBB2/viewforum.php?f=1, containing the con-
tent of one forum. This operation involves several database reads and writes
(including creating and storing a new session ID). PHP was running as a