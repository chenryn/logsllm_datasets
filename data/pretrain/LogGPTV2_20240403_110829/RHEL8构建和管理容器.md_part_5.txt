    命令的参数。
:::
::: itemizedlist
**其它资源**
-   `podman-inspect`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#proc_inspecting-remote-images_assembly_working-with-container-images}检查远程镜像 {.title}
:::
在将镜像拉取到系统之前，使用 `skopeo inspect`{.literal}
命令显示来自远程容器 registry 中的镜像信息。
::: itemizedlist
**流程**
-   检查 `registry.redhat.io/ubi8/ubi-init`{.literal} 镜像：
    ``` literallayout
    # skopeo inspect docker://registry.redhat.io/ubi8/ubi-init
    {
        "Name": "registry.redhat.io/ubi8/ubi8-init",
        "Digest": "sha256:c6d1e50ab...",
        "RepoTags": [
            "8.2-13-source",
            "8.0-15",
            "8.1-28",
            ...
            "latest"
        ],
       "Created": "2020-12-10T07:16:37.250312Z",
        "DockerVersion": "1.13.1",
        "Labels": {
            "architecture": "x86_64",
            "build-date": "2020-12-10T07:16:11.378348",
            "com.redhat.build-host": "cpt-1007.osbs.prod.upshift.rdu2.redhat.com",
            "com.redhat.component": "ubi8-init-container",
            "com.redhat.license_terms": "https://www.redhat.com/en/about/red-hat-end-user-license-agreements#UBI",
            "description": "The Universal Base Image Init is designed to run an init system as PID 1 for running multi-services inside a container
            ...
    ```
:::
::: itemizedlist
**其它资源**
-   `skopeo-inspect`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#proc_copying-container-images_assembly_working-with-container-images}复制容器镜像 {.title}
:::
您可以使用 `skopeo copy 命令将`{.literal}
容器镜像从一个注册表复制到另一个注册表。例如，您可以使用来自外部
registry 的镜像填充内部存储库，或者在两个不同的位置同步镜像 registry。
::: itemizedlist
**流程**
-   将 `skopeo`{.literal} 容器镜像从 `docker://quay.io`{.literal} 复制到
    `docker://registry.example.com`{.literal} ：
    ``` literallayout
    $ skopeo copy docker://quay.io/skopeo/stable:latest docker://registry.example.com/skopeo:latest
    ```
:::
::: itemizedlist
**其它资源**
-   `skopeo-copy`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#proc_copying-image-layers-to-a-local-directory_assembly_working-with-container-images}将镜像层复制到本地目录中 {.title}
:::
您可以使用 `skopeo copy`{.literal} 命令将容器镜像的层复制到本地目录中。
::: orderedlist
**流程**
1.  创建 `/var/lib/images/nginx`{.literal} 目录：
    ``` literallayout
    $ mkdir -p /var/lib/images/nginx
    ```
2.  将 `docker://docker.io/nginx:latest 镜像的`{.literal}
    层复制到新创建的目录中：
    ``` literallayout
    $ skopeo copy docker://docker.io/nginx:latest dir:/var/lib/images/nginx
    ```
:::
::: itemizedlist
**验证**
-   显示 `/var/lib/images/nginx`{.literal} 目录的内容：
    ``` literallayout
    $ ls /var/lib/images/nginx
    08b11a3d692c1a2e15ae840f2c15c18308dcb079aa5320e15d46b62015c0f6f3
    ...
    4fcb23e29ba19bf305d0d4b35412625fea51e82292ec7312f9be724cb6e31ffd  manifest.json
    version
    ```
:::
::: itemizedlist
**其它资源**
-   `skopeo-copy`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#proc_tagging-images_assembly_working-with-container-images}标记镜像 {.title}
:::
使用 `podman tag`{.literal}
命令在本地镜像中添加额外名称。[*此额外名称可由多个部分组成：registryhost/username/NAME:tag*]{.emphasis}。
::: itemizedlist
**先决条件**
-   本地系统上提供了拉取的镜像。
:::
::: orderedlist
**流程**
1.  列出所有镜像：
    ``` literallayout
    $ podman images
    REPOSITORY                           TAG     IMAGE ID      CREATED      SIZE
    registry.redhat.io/ubi8/ubi          latest  3269c37eae33  7 weeks ago  208 MB
    ```
2.  使用以下方法为
    `registry.redhat.io/ubi8/ubi8/ubi 镜像分配 myubi`{.literal}
    名称``{=html} ：
    ::: itemizedlist
    -   镜像名称：
        ``` literallayout
        $ podman tag registry.redhat.io/ubi8/ubi myubi
        ```
    -   镜像 ID：
        ``` literallayout
        $ podman tag 3269c37eae33 myubi
        ```
        两个命令都为您提供相同的结果。
    :::
3.  列出所有镜像：
    ``` literallayout
    $ podman images
    REPOSITORY                           TAG     IMAGE ID      CREATED       SIZE
    registry.redhat.io/ubi8/ubi          latest  3269c37eae33  2 months ago  208 MB
    localhost/myubi                      latest  3269c37eae33  2 months ago  208 MB
    ```
    请注意，两个镜像的默认标签都是
    `latest`{.literal}。您可以看到所有镜像名称都被分配给单个镜像 ID
    3269c37eae33。
4.  使用以下方法将 `8.4`{.literal} 标签添加到
    `registry.redhat.io/ubi8/ubi`{.literal} 镜像中：
    ::: itemizedlist
    -   镜像名称：
        ``` literallayout
        $ podman tag registry.redhat.io/ubi8/ubi myubi:8.4
        ```
    -   镜像 ID：
        ``` literallayout
        $ podman tag 3269c37eae33 myubi:8.4
        ```
        两个命令都为您提供相同的结果。
    :::
5.  列出所有镜像：
    ``` literallayout
    $ podman images
    REPOSITORY                           TAG     IMAGE ID      CREATED       SIZE
    registry.redhat.io/ubi8/ubi          latest  3269c37eae33  2 months ago  208 MB
    localhost/myubi                      latest  3269c37eae33  2 months ago  208 MB
    localhost/myubi                      8.4     3269c37eae33  2 months ago  208 MB
    ```
    请注意，两个镜像的默认标签都是
    `latest`{.literal}。您可以看到所有镜像名称都被分配给单个镜像 ID
    3269c37eae33。
:::
标记 `registry.redhat.io/ubi8/ubi`{.literal}
镜像后，您有三个选项可运行容器：
::: itemizedlist
-   by ID (`3269c37eae33`{.literal})
-   按名称(`localhost/myubi:latest`{.literal})
-   按名称(`localhost/myubi:8.4`{.literal})
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#proc_saving-and-loading-images_assembly_working-with-container-images}保存并加载镜像 {.title}
:::
使用 `podman save`{.literal}
命令将镜像保存到容器存档中。稍后您可以将其恢复到其他容器环境，或将其发送到其他人。您可以使用
`--format`{.literal} 选项指定归档格式。支持的格式有：
::: itemizedlist
-   `docker-archive`{.literal}
-   `OCI-archive`{.literal}
-   `OCI-dir`{.literal} （带有 oci 清单类型的目录）
-   `docker-dir`{.literal} （使用 v2s2 清单类型的目录）
:::
默认格式为 `docker-dir`{.literal} 格式。
使用 `podman load`{.literal}
命令将容器镜像存档中的镜像加载到容器镜像存储中。
::: itemizedlist
**先决条件**
-   本地系统上提供了拉取的镜像。
:::
::: orderedlist
**流程**
1.  将 `registry.redhat.io/rhel8/rsyslog`{.literal} 镜像保存为 tarball：
    ::: itemizedlist
    -   在默认的 `docker-dir`{.literal} 格式中：
        ``` literallayout
        $ podman save -o myrsyslog.tar registry.redhat.io/rhel8/rsyslog:latest
        ```
    -   在 `oci-archive`{.literal} 格式，使用 `--format`{.literal}
        选项：
        ``` literallayout
        $ podman save -o myrsyslog-oci.tar --format=oci-archive registry.redhat.io/rhel8/rsyslog
        ```
        `myrsyslog.tar`{.literal} 和 `myrsyslog-oci.tar`{.literal}
        存档存储在您的当前目录中。接下来的步骤通过
        `myrsyslog.tar`{.literal} tarball 执行。
    :::
2.  检查 `myrsyslog.tar`{.literal} 文件类型：
    ``` literallayout
    $ file myrsyslog.tar
    myrsyslog.tar: POSIX tar archive
    ```
3.  从
    `myrsyslog .tar 加载 registry.redhat.io/rhel8/rsyslog`{.literal}:latest``{=html}
    镜像：
    ``` literallayout
    $ podman load -i myrsyslog.tar
    ...
    Loaded image(s): registry.redhat.io/rhel8/rsyslog:latest
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#proc_redistributing-ubi-images_assembly_working-with-container-images}重新分发 UBI 镜像 {.title}
:::
使用 `podman push`{.literal} 命令将 UBI 镜像推送到您自己的或第三方
registry，并将其与他人共享。您可以根据需要从 UBI yum
存储库升级或添加到该镜像。
::: itemizedlist
**先决条件**
-   本地系统上提供了拉取的镜像。
:::
::: orderedlist
**流程**
1.  可选：在 `ubi`{.literal} 镜像中添加额外名称：
    ``` literallayout
    # podman tag registry.redhat.io/ubi8/ubi registry.example.com:5000/ubi8/ubi
    ```
2.  将 `registry.example.com:5000/ubi8/ubi`{.literal}
    镜像从本地存储推送到 registry:
    ``` literallayout
    # podman push registry.example.com:5000/ubi8/ubi
    ```
    ::: variablelist
    [重要]{.term}
    :   虽然对这些镜像的使用方式的限制不多，但对于如何引用这些镜像会有一些限制。例如，除非通过
        [Red Hat Partner Connect
        Program](https://connect.redhat.com){.link}（使用 Red Hat
        Container Certification 或 Red Hat OpenShift Operator
        认证）获取这些镜像，否则它们不能被称为红帽认证的镜像或获得红帽的支持。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#proc_default-verification-of-the-image-signatures_assembly_working-with-container-images}镜像签名的默认验证 {.title}
:::
Red Hat Container Registries
`/etc/containers/registries.d/registry.access.redhat.com.yaml`{.literal}
和 `/etc/containers/registries.d/registry.redhat.io.yaml`{.literal}
文件的策略 YAML 文件包含在
`container -tools:latest 模块中的 containers-`{.literal}
common``{=html} 软件包中。使用 `podman image trust`{.literal}
命令验证 RHEL 上的容器镜像签名。
::: orderedlist
**流程**
1.  更新 registry.access.redhat.com 的现有信任范围：
    ``` literallayout
    # podman image trust set -f /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release registry.access.redhat.com
    ```
2.  可选。要验证信任策略配置，显示
    `/etc/containers/policy.json`{.literal} 文件：
    ``` literallayout
    ...
    "transports": {
      "docker": {
          "registry.access.redhat.com": [
           {
             "type": "signedBy",