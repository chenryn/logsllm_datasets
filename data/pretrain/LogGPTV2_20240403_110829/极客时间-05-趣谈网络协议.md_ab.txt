## 协议三要素 {#02.html#-}当然，这种协议还是更接近人类语言，机器不能直接读懂，需要进行翻译，翻译的工作教给编译器，也就是程序员常说的compile。这个过程比较复杂，其中的编译原理非常复杂，我在这里不进行详述。 ﻿![](Images/39fa753ab10d761534106ea69de41b48.png){savepage-src="https://static001.geekbang.org/resource/image/47/7a/47f340b2d76fd29bb937006f19dd3e7a.png"}但是可以看得出，计算机语言作为程序员控制一台计算机工作的协议，具备了协议的三要素。-   **语法**，就是这一段内容要符合一定的规则和格式。例如，括号要成对，结束要使用分号等。-   **语义**，就是这一段内容要代表某种意义。例如数字减去数字是有意义的，数字减去文本一般来说就没有意义。-   **顺序**，就是先干啥，后干啥。例如，可以先加上某个数值，然后再减去某个数值。会了计算机语言，你就能够教给一台计算机完成你的工作了。恭喜你，入门了！但是，要想打造互联网世界的通天塔，只教给一台机器做什么是不够的，你需要学会教给一大片机器做什么。这就需要网络协议。**只有通过网络协议，才能使一大片机器互相协作、共同完成一件事。**这个时候，你可能会问，网络协议长啥样，这么神奇，能干成啥事？我先拿一个简单的例子，让你尝尝鲜，然后再讲一个大事。``{=html}当你想要买一个商品，常规的做法就是打开浏览器，输入购物网站的地址。浏览器就会给你显示一个缤纷多彩的页面。那你有没有深入思考过，浏览器是如何做到这件事情的？它之所以能够显示缤纷多彩的页面，是因为它收到了一段来自HTTP 协议的"东西"。我拿网易考拉来举例，格式就像下面这样：    HTTP/1.1 200 OKDate: Tue, 27 Mar 2018 16:50:26 GMTContent-Type: text/html;charset=UTF-8Content-Language: zh-CN   网易考拉 3 周年主会场 这符合协议的三要素吗？我带你来看一下。首先，符合语法，也就是说，只有按照上面那个格式来，浏览器才认。例如，上来是**状态**，然后是**首部**，然后是**内容**。第二，符合语义，就是要按照约定的意思来。例如，状态200，表述的意思是网页成功返回。如果不成功，就是我们常见的"404"。第三，符合顺序，你一点浏览器，就是发送出一个 HTTP请求，然后才有上面那一串 HTTP 返回的东西。浏览器显然按照协议商定好的做了，最后一个五彩缤纷的页面就出现在你面前了。
## 我们常用的网络协议有哪些？ {#02.html#-}接下来揭秘我要说的大事情，"双十一"。这和我们要讲的网络协议有什么关系呢？在经济学领域，有个伦纳德·里德（Leonard E.Read）创作的《铅笔的故事》。这个故事通过一个铅笔的诞生过程，来讲述复杂的经济学理论。这里，我也用一个下单的过程，看看互联网世界的运行过程中，都使用了哪些网络协议。你先在浏览器里面输入 ，这是一个**URL**。浏览器只知道名字是"www.kaola.com"，但是不知道具体的地点，所以不知道应该如何访问。于是，它打开地址簿去查找。可以使用一般的地址簿协议**DNS**去查找，还可以使用另一种更加精准的地址簿查找协议**HTTPDNS**。无论用哪一种方法查找，最终都会得到这个地址：106.114.138.24。这个是**IP**地址，是互联网世界的"门牌号"。知道了目标地址，浏览器就开始打包它的请求。对于普通的浏览请求，往往会使用**HTTP**协议；但是对于购物的请求，往往需要进行加密传输，因而会使用**HTTPS**协议。无论是什么协议，里面都会写明"你要买什么和买多少"。﻿![](Images/ef023a7eca6aee3e46c905ae994d108f.png){savepage-src="https://static001.geekbang.org/resource/image/d8/c6/d8a65ca347ad26acc9f1de49b10320c6.png"}DNS、HTTP、HTTPS所在的层我们称为**应用层**。经过应用层封装后，浏览器会将应用层的包交给下一层去完成，通过socket编程来实现。下一层是**传输层**。传输层有两种协议，一种是无连接的协议**UDP**，一种是面向连接的协议**TCP**。对于支付来讲，往往使用TCP 协议。所谓的面向连接就是，TCP会保证这个包能够到达目的地。如果不能到达，就会重新发送，直至到达。TCP协议里面会有两个端口，一个是浏览器监听的端口，一个是电商的服务器监听的端口。操作系统往往通过端口来判断，它得到的包应该给哪个进程。![](Images/71e56e17f6fc939cf425afff7018c25c.png){savepage-src="https://static001.geekbang.org/resource/image/53/ee/53c753a7d49c9dfe3cfeb26497e47eee.png"}传输层封装完毕后，浏览器会将包交给操作系统的**网络层**。网络层的协议是IP 协议。在 IP 协议里面会有源 IP 地址，即浏览器所在机器的 IP 地址和目标IP 地址，也即电商网站所在服务器的 IP 地址。![](Images/104940f083608f715c2143af13e18f1f.png){savepage-src="https://static001.geekbang.org/resource/image/45/1b/459a421975b27f6187d2aa4673171f1b.png"}操作系统既然知道了目标 IP地址，就开始想如何根据这个门牌号找到目标机器。操作系统往往会判断，这个目标IP地址是本地人，还是外地人。如果是本地人，从门牌号就能看出来，但是显然电商网站不在本地，而在遥远的地方。操作系统知道要离开本地去远方。虽然不知道远方在何处，但是可以这样类比一下：如果去国外要去海关，去外地就要去**网关**。而操作系统启动的时候，就会被DHCP 协议配置 IP 地址，以及默认的网关的 IP 地址 192.168.1.1。操作系统如何将 IP地址发给网关呢？在本地通信基本靠吼，于是操作系统大吼一声，谁是192.168.1.1啊？网关会回答它，我就是，我的本地地址在村东头。这个本地地址就是**MAC**地址，而大吼的那一声是**ARP**协议。![](Images/330d5c1ccd2ac16ac4ebd74cd9cad382.png){savepage-src="https://static001.geekbang.org/resource/image/cc/4f/cc02190ac57af7fb6c3839534f2b674f.png"}于是操作系统将 IP 包交给了下一层，也就是**MAC层**。网卡再将包发出去。由于这个包里面是有 MAC地址的，因而它能够到达网关。网关收到包之后，会根据自己的知识，判断下一步应该怎么走。网关往往是一个路由器，到某个IP 地址应该怎么走，这个叫作路由表。路由器有点像玄奘西行路过的一个个国家的一个个城关。每个城关都连着两个国家，每个国家相当于一个局域网，在每个国家内部，都可以使用本地的地址MAC 进行通信。一旦跨越城关，就需要拿出 IP 头来，里面写着贫僧来自东土大唐（就是源 IP地址），欲往西天拜佛求经（指的是目标 IP地址）。路过宝地，借宿一晚，明日启行，请问接下来该怎么走啊？﻿![](Images/e9da20202f1e733772c05f93d99f06e9.png){savepage-src="https://static001.geekbang.org/resource/image/f7/e2/f7ea602aec91c67b35e710fb72a975e2.png"}城关往往是知道这些"知识"的，因为城关和临近的城关也会经常沟通。到哪里应该怎么走，这种沟通的协议称为**路由协议**，常用的有**OSPF**和**BGP**。﻿![](Images/4f75c606366660f3c9a421619560b812.png){savepage-src="https://static001.geekbang.org/resource/image/b2/d4/b25ad7afba7b79331d95875dd0f451d4.png"}城关与城关之间是一个国家，当网络包知道了下一步去哪个城关，还是要使用国家内部的MAC 地址，通过下一个城关的 MAC地址，找到下一个城关，然后再问下一步的路怎么走，一直到走出最后一个城关。最后一个城关知道这个网络包要去的地方。于是，对着这个国家吼一声，谁是目标IP 啊？目标服务器就会回复一个 MAC 地址。网络包过关后，通过这个 MAC地址就能找到目标服务器。目标服务器发现 MAC 地址对上了，取下 MAC头来，发送给操作系统的网络层。发现 IP 也对上了，就取下 IP 头。IP头里会写上一层封装的是 TCP 协议，然后将其交给传输层，即**TCP 层**。在这一层里，对于收到的每个包，都会有一个回复的包说明收到了。这个回复的包绝非这次下单请求的结果，例如购物是否成功，扣了多少钱等，而仅仅是TCP层的一个说明，即收到之后的回复。当然这个回复，会沿着刚才来的方向走回去，报个平安。因为一旦出了国门，西行路上千难万险，如果在这个过程中，网络包走丢了，例如进了大沙漠，或者被强盗抢劫杀害怎么办呢？因而到了要报个平安。如果过一段时间还是没到，发送端的 TCP层会重新发送这个包，还是上面的过程，直到有一天收到平安到达的回复。**这个重试绝非你的浏览器重新将下单这个动作重新请求一次**。对于浏览器来讲，就发送了一次下单请求，TCP层不断自己闷头重试。除非 TCP这一层出了问题，例如连接断了，才轮到浏览器的应用层重新发送下单请求。当网络包平安到达 TCP 层之后，TCP头中有目标端口号，通过这个端口号，可以找到电商网站的进程正在监听这个端口号，假设一个Tomcat，将这个包发给电商网站。﻿![](Images/612b2a9967ab159819998e85b325f048.png){savepage-src="https://static001.geekbang.org/resource/image/b4/3f/b465ccfafe333bfdfb9daf78f96e123f.png"}电商网站的进程得到 HTTP请求的内容，知道了要买东西，买多少。往往一个电商网站最初接待请求的这个Tomcat只是个接待员，负责统筹处理这个请求，而不是所有的事情都自己做。例如，这个接待员要告诉专门管理订单的进程，登记要买某个商品，买多少，要告诉管理库存的进程，库存要减少多少，要告诉支付的进程，应该付多少钱，等等。如何告诉相关的进程呢？往往通过 RPC调用，即远程过程调用的方式来实现。远程过程调用就是当告诉管理订单进程的时候，接待员不用关心中间的网络互连问题，会由RPC 框架统一处理。RPC 框架有很多种，有基于 HTTP 协议放在 HTTP的报文里面的，有直接封装在 TCP 报文里面的。当接待员发现相应的部门都处理完毕，就回复一个 HTTPS的包，告知下单成功。这个 HTTPS的包，会像来的时候一样，经过千难万险到达你的个人电脑，最终进入浏览器，显示支付成功。
## 小结 {#02.html#-}看到了吧，一个简简单单的下单过程，中间牵扯到这么多的协议。而管理一大片机器，更是一件特别有技术含量的事情。除此之外，像最近比较火的云计算、容器、微服务等技术，也都需要借助各种协议，来达成大规模机器之间的合作。我在这里列一下之后要讲的网络协议，之后我会按照从底层到上层的顺序来讲述。﻿![](Images/b450237e7db6b343f96e97cc6336a0e3.png){savepage-src="https://static001.geekbang.org/resource/image/af/34/afde9b4b90ee1c43c53948ab85fd6734.jpg"}上面的"双十一"故事只是为了给你一个大致的框架，这里面有些协议，我在故事里已经提到了，有些还没有提到。在这门课的最后一章，当所有的协议都讲过之后，我会再重新讲一遍这个故事，到时候你就能明白更多的细节。最后，学完了这一节，给你留一个问题吧。当网络包到达一个城关的时候，可以通过路由表得到下一个城关的 IP地址，直接通过 IP 地址找就可以了，为什么还要通过本地的 MAC 地址呢？欢迎你留言和我讨论。趣谈网络协议，我们下期见！![](Images/55417b60e9c8040807daf07e6bd9cb4b.png){savepage-src="https://static001.geekbang.org/resource/image/b5/fb/b5bc14cb81d3630919fee94a512cc3fb.jpg"}
# 第2讲 \| 网络分层的真实含义是什么？长时间从事计算机网络相关的工作，我发现，计算机网络有一个显著的特点，就是这是一个不仅需要背诵，而且特别需要将原理烂熟于胸的学科。很多问题看起来懂了，但是就怕往细里问，一问就发现你懂得没有那么透彻。我们上一节列了之后要讲的网络协议。这些协议本来没什么稀奇，每一本教科书都会讲，并且都要求你背下来。因为考试会考，面试会问。可以这么说，毕业了去找工作还答不出这类题目的，那你的笔试基本上也就挂了。当你听到什么二层设备、三层设备、四层 LB 和七层 LB中层的时候，是否有点一头雾水，不知道这些所谓的层，对应的各种协议具体要做什么"工作"？
## 这四个问题你真的懂了吗？ {#03.html#-}因为教科书或者老师往往会打一个十分不恰当的比喻：为什么网络要分层呀？因为不同的层次之间有不同的沟通方式，这个叫作协议。例如，一家公司也是分"层次"的，分总经理、经理、组长、员工。总经理之间有他们的沟通方式，经理和经理之间也有沟通方式，同理组长和员工。有没有听过类似的比喻？那么**第一个问题**来了。请问经理在握手的时候，员工在干什么？很多人听过TCP 建立连接的**三次握手协议**，也会把它当知识点背诵。同理问你，TCP在进行三次握手的时候，IP 层和 MAC 层对应都有什么操作呢？除了上面这个不恰当的比喻，教科书还会列出每个层次所包含的协议，然后开始逐层地去讲这些协议。但是这些协议之间的关系呢？却很少有教科书会讲。学习第三层的时候会提到，IP协议里面包含**目标地址**和**源地址。**第三层里往往还会学习**路由协议**。路由就像中转站，我们从原始地址A 到目标地址 D，中间经过两个中转站 A-\>B-\>C-\>D，是通过路由转发的。那么**第二个问题**来了。A 知道自己的下一个中转站是 B，那从 A发出来的包，应该把 B 的 IP 地址放在哪里呢？B 知道自己的下一个中转站是C，从 B 发出来的包，应该把 C 的 IP 地址放在哪里呢？如果放在 IP协议中的目标地址，那包到了中转站，怎么知道最终的目的地址是 D 呢？教科书不会通过场景化的例子，将网络包的生命周期讲出来，所以你就会很困惑，不知道这些协议实际的应用场景是什么。我**再问你一个问题**。你一定经常听说二层设备、三层设备。二层设备处理的通常是MAC 层的东西。那我发送一个 HTTP的包，是在第七层工作的，那是不是不需要经过二层设备？或者即便经过了，二层设备也不处理呢？或者换一种问法，二层设备处理的包里，有没有HTTP 层的内容呢？``{=html}最终，我想问你**一个综合的问题**。从你的电脑，通过 SSH登录到公有云主机里面，都需要经历哪些过程？或者说你打开一个电商网站，都需要经历哪些过程？说得越详细越好。实际情况可能是，很多人会答不上来。尽管对每一层都很熟悉，但是知识点却串不起来。上面的这些问题，有的在这一节就会有一个解释，有的则会贯穿我们整个课程。好在后面一节中我会举一个贯穿的例子，将很多层的细节讲过后，你很容易就能把这些知识点串起来。
## 网络为什么要分层？ {#03.html#-}这里我们先探讨第一个问题，网络为什么要分层？因为，是个复杂的程序都要分层。理解计算机网络中的概念，一个很好的角度是，想象网络包就是一段Buffer，或者一块内存，是有格式的。同时，想象自己是一个处理网络包的程序，而且这个程序可以跑在电脑上，可以跑在服务器上，可以跑在交换机上，也可以跑在路由器上。你想象自己有很多的网口，从某个口拿进一个网络包来，用自己的程序处理一下，再从另一个网口发送出去。当然网络包的格式很复杂，这个程序也很复杂。**复杂的程序都要分层，这是程序设计的要求。**比如，复杂的电商还会分数据库层、缓存层、Compose层、Controller 层和接入层，每一层专注做本层的事情。