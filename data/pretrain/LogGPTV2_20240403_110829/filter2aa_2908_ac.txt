### 重要安装位置

- `/usr/local/bin`
- `/usr/local/lib/mrtg2`
- `/usr/local/share/mrtg2`

### 示例

1. **创建配置文件**  
   首先，您需要为要监控的网络设备创建一个配置文件。在本示例中，我们选择了IP地址`192.168.16.5`。

   ```bash
   cfgmaker --global 'WorkDir: /tmp' --global 'Options[_]: bits,growright' --output /tmp/mrtg.cfg public@192.168.16.5
   ```

2. **初始化数据库**  
   您需要多次运行以下 `mrtg` 命令以初始化数据库。前两次运行时出现错误信息是正常的。

   ```bash
   mrtg /tmp/mrtg.cfg
   mrtg /tmp/mrtg.cfg
   mrtg /tmp/mrtg.cfg
   ```

3. **设置定时任务**  
   创建一个定时任务（cron job），定期调用 `mrtg` 命令：

   ```bash
   mrtg /tmp/mrtg.cfg
   ```

4. **查看图表**  
   运行几次后，在Firefox浏览器中打开 `file:///tmp/192.168.16.5_1.html` 查看生成的图表。

---

### 3.14. NVisionIP (V)

#### 目的
- 动画显示ARGUS文件的二维散点图。

#### 链接
- [主页](http://security.ncsa.uiuc.edu/distribution/NVisionIPDownLoad.html)
- [快速入门指南](http://security.ncsa.uiuc.edu/distribution/NVisionIPDownLoad.html#Run)

#### 重要安装位置
- `/usr/local/bin`
- `/usr/local/lib/NVisionIP`
- `/usr/local/share/NVisionIP`

#### 示例
1. **启动NVisionIP**
   通过KDE启动菜单启动NVisionIP。

2. **加载数据集**
   - 在 `MultiDataSetChooser` 窗口中点击“加载”按钮。
   - 在文件打开对话框中导航到 `/usr/local/share/NVisionIP/samples`。
   - 打开目录中的一个文件，例如 `ArgusData_178_78`。

3. **配置和查看**
   - 在 `MultiDataSetChooser` 窗口中的 `ClassB IP Header` 字段中输入 `178.78`。
   - 点击“确定”按钮。
   - 数据集现在已加载。
   - 移动窗口底部的滑块以在时间线上前进散点图。

---

### 3.15. Parvis (V)

#### 目的
- 将数据渲染为平行坐标显示。

#### 链接
- [主页](http://home.subnet.at/flo/mv/parvis/)
- [介绍](http://home.subnet.at/flo/mv/parvis/introduction.html)
- [用户手册](http://home.subnet.at/flo/mv/parvis/documentation.html)

#### 重要安装位置
- `/usr/local/bin`
- `/usr/local/lib/parvis`
- `/usr/local/share/parvis`

#### 示例
1. **启动Parvis**
   通过KDE启动菜单启动Parvis。

2. **打开数据集**
   - 在窗口菜单中选择 `File\Open`。
   - 在文件打开对话框中导航到 `/usr/local/share/parvis/data`。
   - 打开目录中的一个图形文件，例如 `voyager.stf`。

3. **使用刷子工具**
   - 在工具栏中点击“Brush”按钮。
   - 现在您可以选择要详细检查的线条。选择时不是单个线条，而是定义一个角度。
   - 要进行新的选择，请在工具栏中点击“Reset All”按钮。

---

### 3.16. Ploticus (V)

#### 目的
- 生成各种类型的图表。

#### 链接
- [主页](http://ploticus.sourceforge.net/doc/welcome.html)
- [预制手册](http://ploticus.sourceforge.net/doc/prefabs.html)

#### 重要安装位置
- `/usr/local/bin`
- `/usr/local/share/ploticus`

#### 示例
1. **创建数据文件**
   打开终端并创建一个名为 `data.csv` 的文件，内容如下：

   ```
   Dogs,10
   Cats,20
   Birds,25
   Spiders,10
   Rats,5
   Mice,40
   ```

2. **生成饼图**
   使用以下命令生成饼图：

   ```bash
   pl -prefab pie values=2 labels=1 data=data.csv delim=comma
   ```

---

### 3.17. p0f (C)

#### 目的
- 识别远程主机的操作系统。

#### 链接
- [主页](http://lcamtuf.coredump.cx/p0f.shtml)

#### 重要安装位置
- `/etc/p0f`
- `/usr/sbin`

#### 示例
1. **启动p0f**
   打开终端并执行以下命令：

   ```bash
   p0f
   ```

2. **查看输出**
   - 打开Firefox并浏览一些网站。
   - `p0f` 的输出类似于以下内容：

     ```
     p0f - passive os fingerprinting utility, version 2.0.8
     (C) M. Zalewski , W. Stearns
     p0f: listening (SYN) on 'eth0', 262 sigs (14 generic, cksum 0F1F5CA2), rule: 'all'.
     192.168.16.220:36390 - Linux 2.6 (newer, 2) (up: 4 hrs)
       -> 216.92.151.5:80 (distance 0, link: ethernet/modem)
     192.168.16.220:35442 - Linux 2.6 (newer, 2) (up: 4 hrs)
       -> 216.92.177.115:80 (distance 0, link: ethernet/modem)
     192.168.16.220:50819 - Linux 2.6 (newer, 2) (up: 4 hrs)
       -> 209.85.161.147:80 (distance 0, link: ethernet/modem)
     ...
     ```

---

### 3.18. R Project (V)

#### 目的
- 提供统计分析和多种绘图功能的工具。

#### 链接
- [主页](http://www.r-project.org/)
- [介绍](http://cran.r-project.org/doc/manuals/R-intro.html)
- [手册](http://cran.r-project.org/manuals.html)

#### 重要安装位置
- `/usr/local/bin`
- `/usr/local/lib/R`

#### 示例
1. **启动R Project**
   通过KDE启动菜单启动R Project。

2. **运行演示**
   - 在R命令提示符下执行以下命令以开始图形演示：

     ```R
     demo(graphics())
     ```

   - 按回车键逐步查看演示。

3. **启动R Commander**
   - 返回R命令提示符后，执行以下命令以启动R Commander：

     ```R
     library("Rcmdr")
     ```

4. **加载样本数据集**
   - 在窗口菜单中选择 `Data\Data in packages\Read data set from an attached package...`。
   - 双击 `datasets` 条目。

5. **绘制直方图**
   - 在窗口菜单中选择 `Graph\Histogram...`。
   - 在直方图配置对话框中选择要可视化的变量，例如 `height`，然后确认对话框。
   - 直方图将被绘制出来。

---

### 3.19. RRDtool (V)

#### 目的
- 用于绘制时间序列数据的工具。

#### 链接
- [主页](http://oss.oetiker.ch/rrdtool/)
- [教程](http://oss.oetiker.ch/rrdtool/tut/rrdtutorial.en.html)

#### 重要安装位置
- `/usr/local/bin`
- `/usr/local/lib`
- `/usr/local/rrdtool-1.2.26`
- `/usr/local/share/rrdtool`

#### 示例
1. **创建循环数据库**
   使用以下命令创建循环数据库：

   ```bash
   rrdtool create test.rrd --start 920804400 DS:speed:COUNTER:600:U:U RRA:AVERAGE:0.5:1:24 RRA:AVERAGE:0.5:6:10
   ```

2. **更新数据库**
   使用以下命令更新数据库：

   ```bash
   rrdtool update test.rrd 920804700:12345 920805000:12357 920805300:12363
   rrdtool update test.rrd 920805600:12363 920805900:12363 920806200:12373
   rrdtool update test.rrd 920806500:12383 920806800:12393 920807100:12399
   rrdtool update test.rrd 920807400:12405 920807700:12411 920808000:12415
   rrdtool update test.rrd 920808300:12420 920808600:12422 920808900:12423
   ```

3. **生成图表**
   使用以下命令生成PNG格式的图表：

   ```bash
   rrdtool graph speed.png --start 920804400 --end 920808000 DEF:myspeed=test.rrd:speed:AVERAGE LINE2:myspeed#FF0000
   ```

4. **查看图像**
   使用GQview查看生成的 `speed.png` 图像。

---

### 3.20. RT Graph 3D (V)

#### 目的
- 实时3D可视化链接图。

#### 链接
- [主页](http://www.secdev.org/projects/rtgraph3d/)

#### 重要安装位置
- `/usr/local/bin`
- `/usr/local/lib/rtgraph3d`

#### 示例
1. **启动RT Graph 3D Server**
   通过KDE启动菜单启动RT Graph 3D Server。

2. **等待服务器启动**
   等待名为 `RealTime Graph 3D` 的窗口出现。

3. **启动RT Graph 3D Client**
   通过KDE启动菜单启动RT Graph 3D Client。

4. **连接节点**
   - 在客户端的RTG提示符下输入：`edge a b`
   - 链接图应现在显示出来。

5. **查看帮助**
   - 在客户端的RTG提示符下输入：`help`
   - 显示可能的命令列表。

---

### 3.21. rumint (V)

#### 目的
- 可视化实时和录制的网络捕获。由于rumint在Wine中运行，因此不支持实时流量嗅探。

#### 链接
- [主页](http://www.rumint.org/)

#### 重要安装位置
- `./root/.wine/drive_c/Program Files/rumint`

#### 示例
1. **捕获网络流量**
   由于rumint在Wine中运行，无法捕获实时网络流量。因此，您需要使用Wireshark或tcpdump捕获流量。

2. **启动rumint**
   通过KDE启动菜单启动rumint。

3. **加载捕获文件**
   - 在窗口菜单中选择 `File\Load PCAP Dataset`。
   - 在文件打开对话框中导航到您的捕获文件并打开它。

4. **查看散点图和平行坐标图**
   - 在窗口菜单中选择 `View\Scatter Plot` 和 `View\Parallel Plot`。
   - 在 `Scatter Plot` 窗口中选择 `Source IP` 作为X轴，`Dest IP` 作为Y轴。
   - 在 `Parallel Coordinate Plot` 窗口中选择左侧的 `TCP Source Port` 和右侧的 `TCP Dest Port`。
   - 点击播放按钮开始可视化网络流量。

---

### 3.22. Scapy (CPV)

#### 目的
- 捕获和操作TCP/IP流量。
- 可视化路由跟踪。

#### 链接
- [主页](http://www.secdev.org/projects/scapy/)
- [教程](http://www.secdev.org/projects/scapy/demo.html)

#### 重要安装位置
- `/usr/lib/python2.5`
- `/usr/local/bin`

#### 示例：路由跟踪
1. **启动Scapy**
   打开终端并执行以下命令：

   ```bash
   scapy
   ```

2. **执行路由跟踪**
   - 执行以下命令以对一系列主机进行路由跟踪：

     ```python
     res,unans = traceroute(["www.microsoft.com","www.cisco.com"], dport=[80,443], maxttl=20, retry=-2)
     ```

3. **绘制图形**
   - 使用以下命令绘制图形：

     ```python
     res.graph()
     ```

   - 使用以下命令生成三维图形：

     ```python
     res.trace3D()
     ```

#### 示例：抓包
1. **启动Scapy**
   打开终端并执行以下命令：

   ```bash
   scapy
   ```

2. **抓取网络流量**
   - 抓取一些网络流量：

     ```python
     p = sniff(count=50)
     ```

3. **绘制统计图**
   - 使用以下命令绘制统计图：

     ```python
     p.plot(lambda x: len(x))
     ```

---

### 3.23. Shell Tools (P)

#### 目的
- 处理文本文件的常见UNIX工具。

#### 链接
- [awk教程](http://www.grymoire.com/Unix/Awk.html)
- [grep教程](http://www.panix.com/~elflord/unix/grep.html)
- [sed教程](http://www.grymoire.com/Unix/Sed.html)

#### 重要安装位置
- `/usr/bin`

#### 示例
1. **提取列**
   - 提取冒号分隔文本文件的第一列：

     ```bash
     awk -F\: '{print $1}' /etc/passwd
     ```

2. **查找特定行**
   - 从文本文件中查找以 `root` 开头的行：

     ```bash
     grep "^root" /etc/passwd
     ```

3. **多模式匹配**
   - 从文本文件中查找包含多个模式的行：

     ```bash
     egrep "^root|^apache" /etc/passwd
     ```

---

### 3.24. Shoki Packet Hustler (V)

#### 目的
- 将网络流量可视化为三维散点图。

#### 链接
- [主页](http://shoki.sourceforge.net/)
- [手册](http://shoki.sourceforge.net/hustler/manual.html)

#### 重要安装位置
- `/usr/local/shoki`

#### 示例
1. **创建捕获文件**
   首先，使用Wireshark创建一个捕获文件。

2. **启动Shoki Packet Hustler**
   通过KDE启动菜单启动Shoki Packet Hustler。

3. **选择捕获文件**
   - 在文件打开对话框中选择捕获文件。
   - 网络流量的散点图将显示出来。

---

### 3.25. tcpdump (C)

#### 目的
- 用于嗅探网络流量的命令行工具。

#### 链接
- [主页](http://www.tcpdump.org/)
- [手册](http://www.tcpdump.org/tcpdump_man.html)

#### 重要安装位置
- `/usr/sbin`

#### 示例
1. **捕获网络流量**
   打开终端并执行以下命令以捕获网络接口 `eth0` 上的流量并保存到文件 `test.cap` 中：

   ```bash
   tcpdump -s0 -i eth0 -w test.cap
   ```

---

### 3.26. Timesearcher 1 (V)

#### 目的
- 分析时间序列数据。

#### 链接
- [主页](http://www.cs.umd.edu/hcil/timesearcher/)
- [手册](http://www.cs.umd.edu/hcil/timesearcher/docs/index.html)

#### 重要安装位置
- `/usr/local/bin`
- `/usr/local/lib/timesearcher1`
- `/usr/local/share/timesearcher1`

#### 示例
1. **启动Timesearcher 1**
   通过KDE启动菜单启动Timesearcher 1。

2. **选择数据文件**
   - 在文件对话框中点击“浏览”按钮，并导航到 `/usr/local/share/timesearcher1/data`。
   - 打开目录中的一个图形文件，例如 `52weeks.tqd`。
   - 图形将显示出来。

---

### 3.27. tnv (V)

#### 目的
- 基于时间的网络流量分析。

#### 链接
- [主页](http://tnv.sourceforge.net/)
- [教程](http://tnv.sourceforge.net/start.php)

#### 重要安装位置
- `/usr/local/bin`

希望这些优化后的文本能更好地帮助您理解和使用这些工具。如果有任何进一步的问题，请随时告诉我！