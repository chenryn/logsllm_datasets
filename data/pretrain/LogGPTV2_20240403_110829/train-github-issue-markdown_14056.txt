**Oleksandr Alesinskyy** opened **SPR-2503** and provided the following details:

### Context
I have the following `context.xml` configuration:
```xml
<bean class="de.ntec.lms.impl.topology.TopologyAddressFactoryBuilder">
    <bean factory-bean="topologyAddressFactoryBuilder" factory-method="create"/>
</bean>

<bean destroy-method="close">
    <!-- Additional bean configurations -->
</bean>

<bean class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="mappingResources">
        <list>
            <value>de/ntec/lms/impl/topology/Company.hbm.xml</value>
            <value>de/ntec/lms/impl/topology/Site.hbm.xml</value>
            <value>de/ntec/lms/impl/topology/Location.hbm.xml</value>
            <value>de/ntec/lms/impl/topology/Rack.hbm.xml</value>
            <value>de/ntec/lms/impl/topology/Cell.hbm.xml</value>
            <value>de/ntec/lms/impl/topology/Place.hbm.xml</value>
        </list>
    </property>
    <property name="hibernateProperties">
        <props>
            <prop key="hibernate.dialect">org.hibernate.dialect.DerbyDialect</prop>
        </props>
    </property>
</bean>

<bean class="org.springframework.orm.hibernate3.HibernateTransactionManager"/>

<bean class="de.ntec.lms.impl.topology.PlaceDao" init-method="init"/>
<bean class="de.ntec.lms.impl.topology.CellDao" init-method="init"/>
<bean class="de.ntec.lms.impl.topology.RackDao" init-method="init"/>
<bean class="de.ntec.lms.impl.topology.LocationDao" init-method="init"/>
<bean class="de.ntec.lms.impl.topology.SiteDao" init-method="init"/>
<bean class="de.ntec.lms.impl.topology.CompanyDao" init-method="init"/>
<bean class="de.ntec.lms.impl.topology.TopologyServiceImpl" init-method="init"/>
```

And the following `log4j` configuration:
```xml
<log4j:configuration>
    <!-- Log4j configuration details -->
</log4j:configuration>
```

### Issue Description
When I run a set of unit tests with the above configuration, everything works smoothly. However, if I change the log level for the `org.springframework` logger to `debug`, the tests immediately fail with the following exception:

```java
junit.framework.AssertionFailedError: Exception in constructor: testDummy (java.lang.ExceptionInInitializerError)
    at de.ntec.lms.TopologyTest.<init>(TopologyTest.java:18)
    at de.ntec.lms.impl.topology.PlacePerformanceTest.<init>(PlacePerformanceTest.java:15)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
    at junit.framework.TestSuite.createTest(TestSuite.java:131)
    at junit.framework.TestSuite.addTestMethod(TestSuite.java:114)
    at junit.framework.TestSuite.<init>(TestSuite.java:75)
    at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.getTest(JUnit3TestLoader.java:102)
    at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.loadTests(JUnit3TestLoader.java:59)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:445)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor': Instantiation of bean failed; nested exception is java.lang.NullPointerException
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:432)
    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:242)
    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:141)
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:239)
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:155)
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:303)
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348)
    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:92)
    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:77)
    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:68)
    at de.ntec.lms.TestContext.<init>(TestContext.java:23)
    ... 15 more
Caused by: java.lang.NullPointerException
    at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.getTransactionAttributeSource(TransactionAttributeSourceAdvisor.java:102)
    at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.hashCode(TransactionAttributeSourceAdvisor.java:121)
    at java.lang.Object.toString(Object.java:209)
    at java.lang.String.valueOf(String.java:2577)
    at java.lang.StringBuffer.append(StringBuffer.java:220)
    at org.springframework.aop.support.AbstractPointcutAdvisor.toString(AbstractPointcutAdvisor.java:71)
    at java.lang.String.valueOf(String.java:2577)
    at java.lang.StringBuffer.append(StringBuffer.java:220)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:383)
    ... 25 more
```

### Additional Observations
- If the `context.xml` does not contain the `<tx:annotation-driven/>` tag, the log level does not affect the behavior, even when there is an XML configuration for transactional AOP.
- The issue is related to the `TransactionAttributeSourceAdvisor` and a `NullPointerException` that occurs when the log level is set to `debug`.

### Affects
- **Version:** 2.0 RC3

### Issue Links
- **#7102** NPE with `TransactionAttributeSourceAdvisor.TransactionAttributeSourcePointcut` when debug enabled (marked as a duplicate)

This issue needs to be addressed to ensure that the log level setting does not interfere with the successful execution of the unit tests.