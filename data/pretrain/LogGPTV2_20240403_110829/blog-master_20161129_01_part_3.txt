perf report输出为本文，可以较为详细的进行代码瓶颈的分析。  
### 6. 生成火焰图
如果你觉得perf report的文本输出不够直观，可以生成火焰图，就更加直观了。    
生成火焰图需要将perf record的原始数据弄出来，然后绘图。   
perf.data的原始数据perf script即可输出。    
生成火焰图  
```
# git clone https://github.com/brendangregg/FlameGraph      # or download it from github
# mv perf.data FlameGraph/
# cd FlameGraph
# perf script | ./stackcollapse-perf.pl > out.perf-folded
# cat out.perf-folded | ./flamegraph.pl > perf-kernel.svg
```
[perf-kernel.svg](20161129_01_svg_001.svg)  
svg可以使用浏览器打开，转换的图片如下  
![pic](20161129_01_pic_001.png)  
## 指定内核内置事件跟踪
perf top|stat|record 都支持通过-e指定事件进行跟踪。  
支持的事件如下  
```
perf list
  cpu-cycles OR cycles                               [Hardware event]
  stalled-cycles-frontend OR idle-cycles-frontend    [Hardware event]
  stalled-cycles-backend OR idle-cycles-backend      [Hardware event]
  instructions                                       [Hardware event]
  cache-references                                   [Hardware event]
  cache-misses                                       [Hardware event]
  branch-instructions OR branches                    [Hardware event]
  branch-misses                                      [Hardware event]
  bus-cycles                                         [Hardware event]
......................略........................
```
事件支持写通配符，多个事件使用逗号隔开。    
```
perf top -ag -e xfs:xfs_attr_list_sf,skb:kfree_skb,block:*,irq:softirq*
No CONFIG_PERF_EVENTS=y kernel support configured? 编译内核是需要配置CONFIG_PERF_EVENTS=y
```
```
perf stat -e xfs:xfs_attr_list_sf,skb:kfree_skb,block:*,irq:softirq* -- sleep 10
 Performance counter stats for 'sleep 10':
                 0 xfs:xfs_attr_list_sf                                        
                 0 skb:kfree_skb                                               
                 0 block:block_rq_abort                                        
                 0 block:block_rq_requeue                                      
                 0 block:block_rq_complete                                     
                 0 block:block_rq_insert                                       
                 0 block:block_rq_issue                                        
                 0 block:block_bio_bounce                                      
                 0 block:block_bio_complete                                    
                 0 block:block_bio_backmerge                                   
                 0 block:block_bio_frontmerge                                   
                 0 block:block_bio_queue                                       
                 0 block:block_getrq                                           
                 0 block:block_sleeprq                                         
                 0 block:block_plug                                            
                 0 block:block_unplug_timer                                    
                 0 block:block_unplug_io                                       
                 0 block:block_split                                           
                 0 block:block_remap                                           
                 0 block:block_rq_remap                                        
                 0 irq:softirq_entry                                           
                 0 irq:softirq_exit                                            
                 0 irq:softirq_raise                                           
      10.001021697 seconds time elapsed
```
```
perf record -avg -e xfs:xfs_attr_list_sf,skb:kfree_skb,block:*,irq:softirq* -- sleep 10
perf report -vg --stdio
# Events: 17  skb:kfree_skb
#
# Overhead         Command                                Shared Object            Symbol
# ........  ..............  ...........................................  ................
#
    35.29%            init  [kernel.kallsyms]                            0xffffffff8103c94b k [k] native_safe_halt
                      |
                      --- native_safe_halt
    11.76%       syslog-ng  /lib64/libpthread-2.12.so                    0xea10           B [.] __recvmsg
                 |
                 --- __recvmsg
...........略.......................
```
## kernel source 动态跟踪
如果perf list列出的事件不能满足跟踪需求，你可以自行添加任意代码进行跟踪。   
这个功能需要perf和内核的支持，详见[《Linux 性能诊断(profiling) perf使用指南》](20161127_01.md)     
```
1. Listing variables available for tcp_sendmsg():
# perf probe -V tcp_sendmsg
Available variables at tcp_sendmsg
        @
                size_t  size
                struct kiocb*   iocb
                struct msghdr*  msg
                struct sock*    sk
2. Creating a probe for tcp_sendmsg() with the "size" variable:
# perf probe --add 'tcp_sendmsg size'
Added new event:
  probe:tcp_sendmsg    (on tcp_sendmsg with size)
3. You can now use it in all perf tools, such as: 
        perf record -e probe:tcp_sendmsg -aR sleep 1
```
## PostgreSQL source 动态跟踪
这个功能需要perf和软件编译时的支持，详见[《Linux 性能诊断(profiling) perf使用指南》](20161127_01.md)      
```
sudo perf record -g dwarf -e block:block_rq_*,syscalls:sys_enter_write,syscalls:sys_enter_fsync -p 4495
```
```
sudo perf probe  -x `which postgres` XLogFileInit
sudo perf probe  -x `which postgres` XLogFileOpen
sudo perf probe  -x `which postgres` XLogFlush
```
```
sudo perf probe -l
  probe_postgres:XLogFileInit (on 0x000000000009a360)
  probe_postgres:XLogFileOpen (on 0x000000000009a860)
  probe_postgres:XLogFlush (on 0x00000000000a0670)
```
```
sudo perf record -g dwarf -u postgres -e probe_postgres:XLogFileInit,probe_postgres:XLogFileOpen,probe_postgres:XLogFlush
```
```
sudo perf stat -e probe_postgres:XLogFileInit,probe_postgres:XLogFileOpen,probe_postgres:XLogFlush -a -- /usr/pgsql-9.2/bin/pgbench -U postgres craig -c 2 -t 10000
starting vacuum...end.
transaction type: TPC-B (sort of)
scaling factor: 100
query mode: simple
number of clients: 2
number of threads: 1
number of transactions per client: 10000
number of transactions actually processed: 20000/20000
tps = 715.854663 (including connections establishing)
tps = 716.092133 (excluding connections establishing)
 Performance counter stats for '/usr/pgsql-9.2/bin/pgbench -U postgres craig -c 2 -t 10000':
      64 probe_postgres:XLogFileInit       [100.00%]
       0 probe_postgres:XLogFileOpen       [100.00%]
  55,440 probe_postgres:XLogFlush                                    
 27.987364469 seconds time elapsed
```
## 参考
1\. https://wiki.postgresql.org/wiki/Profiling_with_perf  
2\. http://blog.2ndquadrant.com/tracing-postgresql-perf/  
3\. [《Linux 性能诊断(profiling) perf使用指南》](20161127_01.md)  
4\. http://blog.2ndquadrant.com/testing-postgresql-vagrant-computer/  
5\. http://blog.2ndquadrant.com/devops-testing-postgresql-with-vagrant-on-your-computer-part-two/  
6\. https://www.quora.com/How-do-I-compile-a-Linux-perf-tool-with-all-features-For-Linux-4-0-on-Ubuntu  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")