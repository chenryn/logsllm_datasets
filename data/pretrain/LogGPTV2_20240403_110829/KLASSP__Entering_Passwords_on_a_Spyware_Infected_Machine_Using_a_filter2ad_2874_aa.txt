title:KLASSP: Entering Passwords on a Spyware Infected Machine Using a
Shared-Secret Proxy
author:Dinei A. F. Florêncio and
Cormac Herley
KLASSP: Entering Passwords on a Spyware Infected
Machine Using a Shared-Secret Proxy
Dinei Florˆencio and Cormac Herley
Microsoft Research
One Microsoft Way
Redmond, WA
ABSTRACT
In this paper we examine the problem of entering sen-
sitive data, such as passwords, from an untrusted ma-
chine. By untrusted we mean that it is suspected to be
infected with spyware which snoops on the user’s activ-
ity. Using such a machine is obviously undesirable, and
yet roaming users often have no choice. They are in
no position to judge the security status of internet cafe,
airport lounge or business center machines. Either mal-
ice or negligence on the part of an administrator means
that any such machine can easily be running a keylog-
ger. The roaming user has no reliable way of determin-
ing whether it is safe, and has no alternative to typing
the password.
We consider whether it is possible to enter data to
confound spyware assumed to be running on the ma-
chine in question. The diﬃculty of mounting a collu-
sion attack on a single user’s password makes the prob-
lem more tractable than it might appear. We explore
several approaches. In the ﬁrst, we show how the user
can embed a password in random keystrokes to confuse
spyware, while leaving the actual login unaﬀected. In
the second we employ a proxy server to strip random
keys. In the third we again employ a proxy that inverts
a key mapping performed by the user. We examine also
several potential attacks.
1.
INTRODUCTION
Attacks that target user information on client work-
stations are certainly not new. Spyware is a very di-
verse phenomenon [16] and includes a broad range of
techniques that snoop on user activity, deploy Trojan
downloaders, or infest with adware. However, the last
few years have seen a surge in various ploys targeting
information that can be directly exploited for ﬁnancial
gain. The popular and technical presses contain many
accounts of the growth of this problem.
Keylogging is one of the most insidious threats to
a user’s personal information. Passwords, credit card
numbers, and other sensitive or personally identifying
information are potentially exposed. Writing a keylog-
ger is a trivially easy task [11], there are numerous free-
ware oﬀerings, and many of them make eﬀorts to con-
ceal their presence. For example, they will not show
up in a process list. The incidence of keyloggers in-the-
wild is growing rapidly. Keylogging is more worrisome
in many respects than the related threat of phishing.
In phishing the attacker lures the victim into typing
a password into a malicious web-site. The social en-
gineering aspect of the attack is important, since the
attacker generally does not have any code (beyond pos-
sible browser scripts) running on the victims machine.
In the problem of spyware, or keylogging, by contrast,
the attacker is assumed to have compromised the ma-
chine in use.
Enterprize users can most likely trust their desktop
systems provided their network administrators main-
tain good ﬁrewall and anti-virus regimes. Knowledge-
able home users who keep their systems updated are
probably almost as well protected. However home users
who are less proﬁcient, or confused, or who leave their
systems unpatched are at greater risk. Roaming users
who use their own laptops are subject to wireless and
network snooping attacks, but are no more at risk from
spyware if their perimeter defenses are good. However
roaming users who use unfamiliar machines are in the
worst case of all: the spyware infection status of public
machines must be regarded as unknown. Safety requires
knowing that the administrator is both competent and
trustworthy. As things stand, a roaming user has no
reliable way to determine if a machine is running a key-
logger or not. In this environment every session on such
a machine must be assumed to be logged. We call out
system KLASSP: KeyLogger Avoidance using a Shared
Secret Proxy.
1.1 The Problem and Limitations of Our Ap-
proaches
The problem we address is to determine what a user
can do when she must login to a password protected ac-
count from an untrusted machine. One answer is that
she should never do so. This is a simple advice, but un-
satisfactory, and millions upon millions ignore it every
day. If this advice were followed internet cafes, business
centers and airport kiosks would have no customers.
1
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Clearly, this is not the case. While every machine is
an untrusted machine to some degree, and every user
is at risk, we are principally interested in those most
at risk: roaming users of public machines. Furthermore
— while all data typed by the user may be sensitive —
we are principally interested in protecting passwords.
We assume that preventing a password falling into the
wrong hands is more important than protecting the rest
of the data from a login session. This last fact is im-
portant, since the solutions we explore will require ad-
ditional steps or eﬀort on the user’s part when enter-
ing the password; this eﬀort may be well worthwhile to
protect a password, but not ordinary search queries for
example.
We make several requirements of the solutions in or-
der to be useful.
• No change to the login server. The techniques we
explore must work with existing login servers; i.e.
we don’t expect that login servers are going to alter
anything.
• No change to the browser or client software envi-
ronment. We do not assume that the roaming user
has installation privileges.
• User cares most about obscuring her password; it
matters less if other activity is captured.
• A roaming user is unlikely to login more than once
or twice to the same account from the same un-
trusted machine. We further assume that collusion
among spyware infected machines is unlikely. For
example a keylogger on a machine in the airport
in San Francisco is unlikely to be able to collude
with one running on an internet cafe machine in
Milan.
The general approach we use is to obscure the pass-
word typed by the user, and employ a Proxy to map
the typed keystrokes to the actual password. We have
two general approaches. The ﬁrst resembles a winnow-
ing and chaﬃng [14] algorithm, where the actual pass-
word is typed in the clear, but embedded in random
keystrokes. This makes the attackers job of extracting
the actual password extremely hard. The second ap-
proach involves mapping the keys of the password us-
ing a mapping agreed in advance with the proxy server;
this is described in Section 3.4. In the next section we
describe previous and related work.
2. RELATED WORK
Much of the recent work on desktop computer secu-
rity has been directed at securing the perimeter. Com-
mercial anti-virus technologies attempt to detect ﬁles
with malicious payloads. More recently there have been
anti-spyware oﬀerings that attempt to address the prob-
lem of code that maliciously spies and reports on a
2
user’s activity. Some commercial oﬀerings attempt sig-
nature based identiﬁcation of spyware applications on
desktop machines. For an excellent overview of the
range of threats and the technologies employed against
them see [18]. Excellent systematic studies of spyware
in the wild using honeypot techniques are [16, 20]. An
interesting analysis of the diﬃculty of ensuring the in-
tegrity of user key and mouse events is given in [10]. We
refer interested readers to [11, 18] for excellent accounts
of the diﬃculties of this ﬁeld.
Rather than have users key their passwords some web
sites have experimented with on-screen keyboards as a
method of secure data entry. These schemes can be
attacked by having the keylogger do a screen capture
at each mouse click event. The problem of password
phishing has attracted lots of attention recently [15, 12,
9, 6]. Generally the target of a phishing attack is the
password or other sensitive information such as credit
card number of the victim. In contrast to the spyware
case the machine being used is not generally compro-
mised. Rather the user is directed to a web page that
manipulates them into willingly typing their password
into a malicious site (in the belief that the site is be-
nign).
Password management systems are one approach to
helping users with the risks and diﬃculties associated
with managing multiple passwords. We distinguish be-
tween those that store the passwords on the client, e.g.
[15, 9], and those that store in the cloud [8]. An early in-
the-cloud example, proposed by Gaber et al. [8], used
a master password when a browser session was initi-
ated to access a web proxy, and unique domain-speciﬁc
passwords were used for other web sites. Since users au-
thenticated themselves by typing the master password,
this clearly oﬀers no defence against keyloggers. The
same is true of other in-the-cloud password protected
management systems such as Passport, where the user
authenticates herself using a master password.
There are several client based password management
systems. These are interesting, but less relevant to the
problem of protecting roaming users. Ross et al.
[15]
propose a solution that, like [8], uses domain-speciﬁc
passwords for web sites. A browser plug-in hashes the
password salted with the domain name of the request-
ing site. Halderman et al.
[9] also propose a system
to manage a user’s passwords. Passwords both for web
sites and other applications on the user’s computer are
protected. While client password management schemes
can help with the problem of phishing they are of lit-
tle help if a keylogger captures the password, and of-
fer roaming users no protection. Using bookmarklets
(i.e. Javascript functions that can be stored as favorites
in the browser) Zarate [1] describes how to automat-
ically populate password ﬁelds, with domain speciﬁc
passwords by typing only a master password. This of
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006course would not help roaming users.
The surge of spyware and keyloggers is a somewhat
recent phenomenon, so there have been relatively few
works on protecting the roaming users of untrusted ma-
chines. An interesting work by Tan et al.
[19] ad-
dresses the question of minimizing the chances that a
password entered using an on-screen keyboard is cap-
tured by an observer. This work addresses the “shoul-
der surﬁng” risk rather than the risk that the machine
itself is running spyware, but has interesting analysis
of the usability of various alternative password entering
mechanisms.
The closest work to the system we propose here is the
Impostor system of Pashalidis and Mitchell [13], which
speciﬁcally addresses the question of entering passwords
on compromised machines. This is a password man-
agement system where roaming users can access their
credentials. Rather than have users authenticate them-
selves by typing a master password, a challenge response
authentication is used. The user is assigned a large
string that forms the secret. When requesting access
the user is challenged to provide characters from ran-
domly selected positions in the string, and is authen-
ticated only if she responds correctly. In this way the
user reveals only a small portion of the secret string
to any compromised machine. A replay attack is not
possible, since the challenge positions change each time
the user contacts the proxy. In common with our sys-
tem and [8] Impostor also runs as a Man-In-The-Middle
(MITM) proxy, and the user must direct their browser
to the proxy. The are several points of diﬀerence be-
tween KLASSP and [13]. First we do not store the
user’s password. This has the eﬀect that KLASSP user
must trust the proxy machine only when the alterna-
tive is trusting an internet caf´e. More importantly, it
removes the burden of maintaining up to date password
information at the proxy. As with most password man-
agement systems the Impostor user must update their
passwords at the proxy whenever one changes. By con-
trast the KLASSP user need register only once by giving
(userid, url) pairs, and these seldom change. Since users
are likely to use a proxy only when using untrusted ma-
chines (presumably a small portion of their total logins
for most users), we believe that reducing the burden of
maintaining the account is a key advantage. Also, a spy-
ware attacker that discovers the secret used by Impostor
gains access to all of the accounts managed, while an
attacker who gains access to the KLASSP secret gains
access only to accounts where he also observes a success-
ful login. Second, Impostor requires that the user carry
a piece of paper with the secret string. Of the meth-
ods we describe only that of Section 3.4 requires the
user to carry something. Using the method of Section
3.2 the user need merely be able to distinguish picture
uploaded by her from randomly chosen other images.
Knowing the secret string allows access to all of the ac-