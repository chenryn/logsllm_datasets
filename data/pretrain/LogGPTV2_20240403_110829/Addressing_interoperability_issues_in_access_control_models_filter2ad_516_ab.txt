Trapdoor Collision There is an efﬁcient algorithm that on input
the trap-door SK, any pair m1, r1, and any additional message
m2, ﬁnds a value r2 such that CHK(m1, r1) = CHK(m2, r2).
Uniformity All messages m induce the same probability distribu-
tion on CHK(m, r) for a given r chosen uniformly at random.
Frameworks like CBAC [14], exploit above listed advantages for
collaborative environment by modeling abstraction over the ab-
stract elements from collaborating RBAC domains (introducing a
set of abstract elements, for example, COALITION, PARTNEROR-
GANIZATION, ORGANIZATIONASSETS, etc.) The resulting entity
after integrating the domains is a virtual organization and RBAC
Henceforth, we shall use a principal’s name as subscript to his pub-
lic key, i.e., KA denotes public-key of principal A and the use of
corresponding private key SKA is implied when reference is made
to ﬁnd chameleon hash collisions by the principal. Therefore, CHKA
denotes the chameleon hash function associated with principal KA.
We alternatively refer a principal by his public key.
DEFINITION 2. Commitment hash: A principal “A”, denoted
by its public-key KA, constructs a message MA and randomly
chooses a number RA to obtain chameleon hash value XA by
applying CHKA(., .) over MA and RA, i.e., CHKA (MA, RA) = XA.
The message MA used to produce the commitment hash is called
commitment-hash-message.
EXAMPLE 1. “Collaborators”, “Employees”, “TeamDBA”
are examples of valid identiﬁers.
A local name is a pair consisting of a public key and an arbitrary
identiﬁer. Each public key has its own associated local name space.
A commitment hash XA produced over pre-image (MA, RA) by prin-
cipal KA is denoted by a four-tuple: .
DEFINITION 5. [13] A local name is a sequence of length two
consisting of a key followed by a single identiﬁer.
DEFINITION 3. Commitment: Principal “A” issues a commit-
ment for a message mi over commitment hash 
by ﬁnding ri, such that CHKA (mi, ri) = CHKA (MA, RA) = XA. The
message mi used to produce the commitment is called commitment-
message.
A commitment ri, issued by principal KA (using its trapdoor), over
a commitment hash  for a given commitment-
message
six-tuple:
. Commitments for a given commitment
hash can only be found with the knowledge of trapdoor.
denoted
mi
is
by
a
Having provided the deﬁnitions and properties of chameleon hash
functions, we would like to proceed to our name deﬁnition fa-
cility in next sub-section. We would like to note that, the input
messages (commitment-hash-message and commitment-message)
to chameleon hash functions are text strings. We are free to decide
the contents of these strings. One can use this fact to convey desired
semantics. A principal can utilize the commitment-hash-message
M to convey certain semantics, by choosing an R and generating
the hash X. Thus, the commitment hash  is an as-
sertion made by the principal K about M. To enforce the semantics
in M, the principal K issues commitments to intended principals by
embedding their identities (e.g., public-key) into the commitment-
messages. For example,  is a commitment
issued by principal K to principal KV , if m1 = KV . In the follow-
ing sub-section, we exploit this setting to deﬁne names and binding
entities to them.
2.3 Deﬁning names and binding entities to
names
The concept of empowering a domain administrator to aggregate
collaboration speciﬁc entities under local and extended names is
motivated by SPKI/SDSI [13] philosophy. However, our approach
differs from SPKI/SDSI in the technique used to deﬁne and bind
names. SPKI/SDSI uses certiﬁcates to deﬁne and bind names while
we use chameleon hash functions. The discussion of relative mer-
its of our mechanism are deferred until Section 5. We borrow the
following deﬁnitions from SPKI/SDSI and give our constructions
to deﬁne and bind names using chameleon hash functions.
All principals are represented by their public keys. A principal is
an individual, process, or active entity whose messages are distinc-
tively recognizable because of the cryptographic operations (com-
mitment hash and commitments) they perform on them using the
public key that represents them.
It is convenient to say that the
principal is its public key.
DEFINITION 4. [13] An identiﬁer is a word over some given
standard alphabet.
EXAMPLE 2. “KA Collaborators”, “KB Collaborators”,
“KA Users”, “KB TeamDBA” are valid local names.
Local names in different name spaces are unrelated to each other,
even if they use the same identiﬁer. There are many reasons to use
local names:
• To provide a convenient user-friendly handle for referring to
another principal.
• To provide a level of abstraction that separates name one uses
to refer to the principal from the keys the principal uses, since
the later may change.
• To allow another party to provide the desired deﬁnition, by
having one name deﬁned in terms of a name deﬁned by an-
other party.
• To have a name that refers to a collection (or group) of prin-
cipals.
• To have a name that can be used as an binary attribute–by
deﬁning the group of principals that possess that attributes.
DEFINITION 6. [13] An extended name is a sequence consist-
ing of a key followed by two or more identiﬁers.
EXAMPLE 3. “KA CID411Users TeamDBA” is a valid ex-
tended name which is bound to local name “KA CID499Users”
in the following way.
In the following we provide our constructions for deﬁning local
names, extended names, authorizations and binding subjects to
them.
Deﬁning a Local Name: A principal chooses an arbitrary identiﬁer
and constructs the commitment-hash-message in a manner shown in
Figure 1, to generate a commitment hash by applying its chameleon
hash function. For example, principal KA deﬁnes a local name
“KA CID411Users” by constructing MA as shown below and pro-
ducing commitment hash XA such that CHKA (MA, RA) = XA. By
identiﬁer string “CID411Users” we try to convey principal KA’s
intention to club together users taking part in a collaboration iden-
tiﬁed by number “411”. To distinguish other potential name deﬁni-
tions by principal KA, we put an additional (small-letter) subscript
to the commitment-hash-message, the corresponding random seed,
and the commitment hash. And, the same subscript will follow for
respective commitment messages used for name bindings. Thus,
we would like to denote the name deﬁnition mentioned above, as:
CHKA (MAa, RAa) = XAa and the corresponding four-tuple notation
by: .
Binding Subjects to Local Names: To bind a subject to a local
name, owner of the local name constructs a commitment-message
in a manner shown in Figure 2, to generate a commitment for a
given commitment hash (i.e., local name). For example, princi-
pal KA binds a subject KU1 to its local name “KA CID411Users”
by constructing mAa1 as shown below and ﬁnding rAa1 such
that CHKA(MAa, RAa) = CHKA (mAa1 , rAa1 ) = XAa, holds. Unlike
SPKI/SDSI, where both name deﬁnition and binding are done just
by issuing a name certiﬁcate, one must issue a commitment hash
pertaining to a local name deﬁnition in order to bind subjects to it.
For the sake of brevity, we use the following notation to show name
binding:
trol. That is, any requester that can prove its membership to one
of the listed names in ACLs is allowed to access the resource. The
same algorithm for name rewriting and certiﬁcate chain discovery
[13] can be used for our cryptographic constructions. On input
a set of commitments (name bindings), the algorithm efﬁciently
ﬁnds name membership proofs, if any. Due to space limitations we
exclude elaborating the algorithm for proof construction and show
it only intuitively. Principals KU1 , KU2 , KU3 , KU4 can successfully
access resources under the control of principal KB. Proofs for prin-
cipals KU1 , KU2 , and KU3 are straight forward since their respective
commitments (cf. Equations (1), (2), and (3)) prove their member-
ship to name “KA CID411Users”. Whereas, proofs of principals
KU3 , KU4 consists of chaining of two commitments – one from prin-
cipal KU3 and other from KU1. Principal KU3 can access resources
under KB’s control in two different capacities (roles), since it pos-
sesses two proofs satisfying the ACLs. KU4’s proof is sketched
below.
KA CID411Users −→ KU1
to bind principals KU2, KU3
Similarly,
to local name
“KA CID411Users”, principal KA constructs commitment-messages
mAa2 and mAa3 in similar fashion shown above and ﬁnds rAa2 and
rAa3, respectively. Therefore,
(1)
Since, KA CID411Users −→ KU3 TeamDBA (cf. Equation (7))
and, KU3 TeamDBA −→ KU4 (cf. Equation (6))
∴ KA CID411Users −→ KU4
and,
KA CID411Users −→ KU2
KA CID411Users −→ KU3
(2)
(3)
For the sake of convenience and simplicity, we collectively denote
Equations 1, 2, and 3 by the following:
KA CID411Users −→ {KU1 , KU2 , KU3 }
(4)
A subject can be a local name. Therefore, following assignment is
valid.
KA CID411Users −→ KU3 TeamDBA
(5)
where KU3’s name deﬁnition for “TeamDBA” is given in Figure 3,
and its members are bound by Equation 6 below.
KU3 TeamDBA −→ {KU3 , KU4 }
(6)
Therefore,
KA CID411Users −→ {KU1 , KU2 , KU3 , KU3 TeamDBA}
(7)
We have seen that a subject can be a key or a local name. Following
is an example where subject is an extended name which is bound
to local name “KA CID499Users”.
KA CID499Users −→ KA CID411Users TeamDBA
(8)
The meaning of extended names is deﬁned in terms of the mean-
ing of related local names.
Informally, in above binding, mem-
bers of local name “KA CID499Users” are members of name
“TeamDBA” deﬁned in name space of principals belonging to local
name “KA CID411Users”. Therefore, intuitively;
KA CID499Users −→ {KU3 , KU4 }
(9)
A name is thus either a local name or an extended name.
Name Membership Proofs: Local names and extended names
can be used as rules in ACLs of protected resources. Consider
a scenario in which principal KB puts “KA CID499Users” and
“KA CID411Users” into positive ACLs of resources under its con-
Extending Deﬁnition 2, we say that;
DEFINITION 7. A commitment hash produced in order to de-
ﬁne a local name is called name commitment hash. The respective
commitments issued to bind subjects to the name are called name
commitments.
EXAMPLE 4. All constructions shown above are examples of
name commitment hash and name commitments.
DEFINITION 8. An authorization commitment hash is sim-
ilar to name commitment hash by construction except
that
the commitment-hash-message contains an additional construct
“PERMS” to indicate what all permissions members of
the
“Name” construct (i.e., name) shall inherit. The respective com-
mitments issued to bind subjects to the name are called authoriza-
tion commitments
EXAMPLE 5. Figure 4 shows a typical construction of name
commitment-hash-message MBa by principal KB to deﬁne name
“KB CID244” with authorizations speciﬁed under “PERMS” con-
struct.
Note the composition of “PERMS” construct. Principal KB, owner
of the name “KB CID244” has used the set of permissions at its dis-
posal by the underlying access control model; RBAC in this case.
The above authorization commitment hash is intended to regulate
access requests (by placing this authorization commitment hash in
ACL of protected resource, say a database, under KB’s administra-
tion) from members of KB’s “CID244” group, which is binded to
its collaborator KA by the following binding (authorization com-
mitment).
KB CID244 −→ KA CID411Users
(10)
Thus, principals KU1 , KU2 , KU3 , KU4 – all members of
“KA CID411Users” group, can exercise all permissions over KB’s
protected resource that are allowed to the “Manager” ROLE in KB’s
administrative domain; except the “Update” operation.
Name commitments are distinguished from authorization commit-
ments by the presence or absence of the “PERMS” construct. Sim-
ilarly, commitment-hash-messages.
MA :=
Name
Validity
:= KA CID411Users
:=
not-before “2006-09-01 00:00:00”
not-after “2007-08-31 23:59:59”
Enriching the commitment-hash-message: As mentioned be-
fore, the commitment-hash-message part of the pre-image to a
chameleon hash function is a text string and its composition can
be done as per the requirements. Here we provide one more useful
construct that is typically required in collaborations – accommo-
dating collaborator until the life time of a task. In our previous ex-
amples of commitment-hash-message compositions we have seen
the construct “Validity” used to specify literal time intervals. We
show another example of using this construct to hold a temporal
variable “TASK”. Figure 5 shows one such composition validating
the authorizations for group “KB CID244” only for the life time of
TASK “T ”. In Appendix A we show how the facility of delegation
can be incorporated by introducing a construct “Also-honor”.
2.4 Overlays as Bridges for Collaborators
In the previous sub-section, we have seen the ability of principals to
deﬁne and bind names and authorizations. Here we shall see how
principals can utilize these abilities to form overlays for the pur-
pose of collaboration. An overlay is an interface provided to a peer
collaborator in order to accommodate each others’ resources and
users. An overlay in its simplest form consists of a pair of name and
authorization deﬁnitions. Name deﬁnitions for aggregating users of
host domain, and authorization deﬁnitions for specifying what au-
thorizations on host domain’s shared resources are permissible for
users from visiting domain. Therefore, for a collaboration, the col-
laborators design their respective overlays taking into consideration
each others’ requirements. In other words, a collaborator (say, KB)
can demand a certain group-wise structure (cf. Equation 4) or hi-
erarchy (cf. Equation 5, and 6) over the collaborating users from
visiting domain (i.e., KA’s administrative domain). Vice versa, KA’s
requirements shall be incorporated in name deﬁnitions constituting
KB’s overlay.
For example, consider two administrative domains A and B willing
to collaborate. Let principals KA and KB be the administrators con-
trolling users and resources in domains A and B, respectively. For
the sake of simplicity, let us assume that resources from domain A
and users from domain B are not participating in the collaboration
(In next Section we provide a comprehensive example where both
counterparts are contributing their users and resources). Therefore,
overlay of domain A will have only name deﬁnitions and overlay
of domain B will have only authorization deﬁnitions. Upon mutual
agreement, following are their overlays.
Overlay from domain A:
Overlay from domain B:
(11)
(12)
Enforcing Collaboration: To enforce the collaboration, principal
KB i) empowers the users of KA by issuing an authorization com-
mitment (for the name deﬁnition provided by KA in its overlay),
and ii) signs the commitment hash of name deﬁnitions from KA’s
Figure 1: Typical usage of commitment-hash-message part of
the pre-image to deﬁne local names
mAa1 :=
Subject
:= KU1
Figure 2: Typical usage of commitment-message part of the pre-
image to bind subjects to local names
MU3a :=
Name
Validity
:= KU3 TeamDBA
:=
not-before “2006-09-01 00:00:00”
not-after “2007-08-31 23:59:59”
Figure 3: KU3’s name deﬁnition for “TeamDBA”
MBa :=
Name