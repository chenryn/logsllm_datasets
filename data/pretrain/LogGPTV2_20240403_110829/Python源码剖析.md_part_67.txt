f
join(self,timeout=None):
run(self):
_sleep(0.000001)
_start_new_thread(self.
active_limbo_lock.release()
limbo{self)
self
Belf
self.
self
elf
stop(self):
bootstrap(seif):
deadline=
except:
Ly
self
Ery:
self.
whiTe
del
self.
whilenot
aetive_limbo_lock.release()
activel
self.
block.acquire()
block.release()
ai=paddon
pass
self.
self.run0)
initlalized = True
stopped = False
started
name:三
limbo[self]
args=（),kwargs=O）,
not
target(*self.
delay>ALIGNMENT_SHIFT;
不同种类的block的sizeclass分别为：8，16，32，，256。每个size class对应一个size
这个上限值在Python2.5中被设置为256
限，Pyhon就会将对内存的请求转交给第一层的内存管理机制，即pyMen函数族，来处理。
Python可以使用不同种类的block来满足对内存的需求；当申请的内存大小超过了这个上
//size class转换到size class index
#define INDEX2SIZE（I)《(（uint）（I)
[obmalloc.c]
#aefine NB_SMALL_SIZE_CLASSES
Request in bytes
[obmalloc.c]
ldefine
现在，需要指出一个相当关键的点，虽然我们这里谈论了很多block，但是在Python
也就是说，当我们申请一块大小为28字节的内存时，实际上PyObject_Mal1oc从内
0,257 and upt routed to the underlying allocator.
根据SMALL_REQUEST_THRESHOLD和ALIGNMENT的限定，实际上，我们可以由此得到
249-256
同时，Pyhon为block的大小设定了一个上限，当申请的内存大小小于这个上限时，
65-72
41-48