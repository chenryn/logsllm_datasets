Table 3: Detection Rate and False Alarm Rate
attack
SGWIPM
FDDN
PSCMME
DistAppGaurd-MS-AE
FAR
w=30
w=1 w=5
0.98
0.97
0.78
1%
0.73
0.96
0.1%
0.97
0.69
0.94
0.01% 0.95
0.99
0.98
0.92
1%
0.1%
0.92
0.98
0.99
0.96
0.95
0.01% 0.85
0.95
0.98
0.97
1%
0.91
0.98
0.1%
0.96
0.01% 0.96
0.97
0.89
Malchain[14]
Bag of n-grams[21]
BoSC[6]
DistAppGaurd-AE
w=1 w=5 w=30 w=1 w=5 w=30 w=1 w=5 w=30 w=1 w=5 w=30
0.96
0.38
0.28
0.95
0.24
0.91
0.71
0.93
0.91
0.67
0.60
0.80
0.44
0.96
0.44
0.95
0.91
0.32
0.53
0.38
0.32
0.76
0.75
0.68
0.60
0.58
0.41
0.95
0.94
0.82
0.96
0.95
0.90
0.94
0.94
0.88
0.75
0.70
0.52
0.97
0.97
0.91
0.91
0.89
0.85
0.90
0.85
0.78
0.85
0.80
0.72
0.86
0.84
0.80
0.83
0.80
0.71
0.94
0.88
0.73
0.89
0.86
0.81
0.61
0.59
0.32
0.91
0.90
0.83
0.85
0.81
0.75
0.54
0.36
0.31
0.75
0.72
0.63
0.63
0.57
0.53
0.59
0.43
0.38
0.88
0.79
0.75
0.76
0.58
0.55
0.41
0.29
0.28
0.90
0.84
0.77
0.69
0.61
0.60
0.47
0.34
0.29
0.49
0.41
0.35
0.58
0.52
0.34
anomaly detection techniques is to achieve a high detection rate
while having a low false alarm rate.
Table 3 shows the detection rate of the models at false alarm
rates of 0.01%, 0.1%, and 1% and time window of 1s, 5s, and 30s.
Time window of 5s has the best results on average. However, for
FDDN attack 30s time window is slightly better in some cases as
well as 1s time window for SGWIPM. This is expected since the
SGWIPM attack has a very short time of action approximately
around 1 second, while the FDDN attack is performed for a longer
period of time than 5 seconds which makes it more detectable in a
30 seconds time window.
At 0.01% and 0.1% false alarm rate, DistAppGaurd-MS-AE achieves
the best detection rate. However, at 1% false alarm rate in two cases
out of nine DistAppGaurd-AE has an equal or better detection
rate. This is due to the fact that more complex neural networks
are more prone to being overfitted to the training dataset which
results in a better performance in few cases but worse in most cases.
Malchain detects 88%, 84% and 75% of the attacks on average at
1%, 0.1% and 0.001% false alarm rates, respectively. Compared to
DistAppGaurd-MS-AE, Malchain has 15% less detection rate on
average. Bag of n-grams and Bag of System Calls approaches fail
to detect the attacks with an acceptable detection rate at all three
false alarm rates.
For a thorough analysis of the models at all possible decision
thresholds we use the receiver operating characteristic (ROC) curves.
ROC curves are commonly used to measure the performance of
various models over several decision thresholds. Fig. 10 shows the
comparison of ROCs for different approaches on each type of at-
tack at 5 second time window. From the figure, we can see both
ML models used by DistAppGaurd modeled our data and distin-
guish between the normal and abnormal behaviour of the appli-
cations much better than the other approaches. The average area
under the curve (AUC) of each model is used for the final compar-
ison. DistAppGaurd-MS-AE has an average AUC of 0.995, while
DistAppGaurd-AE, Malchain, Bag of n-grams and Bag of System
Calls have 0.984, 0.957, 0.926 and 0.853, respectively.
Please note that although based on AUC metric, our microservice-
aware Autoencoder model is performing only slightly (1%) better
than a classical fully connected Autoencoder, but in terms of deploy-
ability, the performance of an anomaly detection technique should
be considered at the low false alarm rates which are tolerable. For
example, a false alarm rate of 1% for a 5-second time window leads
(a) SGWIPM ROC
(b) FDDN ROC
(c) PSCMME ROC
Figure 10: Detection evaluation using ROC curves
to 172 false alarms on average per day which is not acceptable
in the production, while 0.01% false alarm rate only produces 2
0.00.20.40.60.81.0False Alarm Rate0.00.20.40.60.81.0Detection RateDistAppGaurd-MS-AE(auc=0.994)DistAppGaurd-AE(auc=0.987)Malchain(auc=0.930)Bag of n-grams(auc=0.874)Bag of System Calls(auc=0.777)0.00.20.40.60.81.0False Alarm Rate0.00.20.40.60.81.0Detection RateDistAppGaurd-MS-AE(auc=0.998)DistAppGaurd-AE(auc=0.986)Malchain(auc=0.979)Bag of n-grams(auc=0.969)Bag of System Calls(auc=0.930)0.00.20.40.60.81.0False Alarm Rate0.00.20.40.60.81.0Detection RateDistAppGaurd-MS-AE(auc=0.993)DistAppGaurd-AE(auc=0.980)Malchain(auc=0.963)Bag of n-grams(auc=0.937)Bag of System Calls(auc=0.853)845ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Ghorbani et al.
false alarms. At 0.01% false alarm rate, our microservice-aware Au-
toencoder model is performing 9% better than the fully connected
Autoencoder.
5.4 Runtime Performance and Analysis
The SystemTap tool is used to capture system calls. There are sev-
eral other applications for collecting system calls, such as auditd.
However, we find that SystemTap offers the most complete input
data with acceptable performance based on our tests. SystemTap
uses dynamic instrumentation for kernel tracing, which allows
users to define and hook probes dynamically in the kernel using a
simple scripting language. We measured that SystemTap produces
a maximum of 3.1% overhead to the host’s CPU utilization, while
system call streaming generates a maximum of 2.3% of CPU utiliza-
tion (bringing the total to a maximum of 5.4%). Furthermore, the
system calls were streamed out of the hosts at less than 2 Mbps. It is
worth mentioning that collecting all system calls and streaming out
to a central node, a typical approach in classical system call-based
behaviour profiling, adds 11.4% and 6.2% (17.6% in total) CPU over-
head for collecting and streaming, respectively. Therefore, resource
consumption for data collection in our approach is comparatively
low.
Figure 11: Graph generation and vectorization for each ap-
plication in different time windows
Fig. 11 shows the speed of graph generation and passing it
through the Autoencoder in DistAppGaurd and compares it with
other approaches. Our results show that the overhead being less
than 2ms is acceptable for the applications and the time windows
that we consider. Although, by increasing the time window, the
number of created and deleted processes in each application will
grow, since we mapped them to the process role IDs, the size of the
graph representing the application in that time window will not
increase significantly. This, in turn, leads to a slight increase in the
execution time (less than 20% between 1s and 30s). These results
show that our approach has low costs of execution, even for larger
time windows.
6 DISCUSSION
In this section, we first discuss the limitation of this work, then,
we discuss the detection of the three attacks in detail to show
how DistAppGaurd’s profiling techniques help to better detect the
attacks.
6.1 Limitation
Threat Model. The proposed framework, DistAppGaurd, is specif-
ically designed for securing containerized microservice-based ap-
plications, therefore, attacks targeting cloud infrastructures can not
be detected. DistAppGaurd learns the comprehensive and complex
correlations and patterns in an application’s behaviour using the
calculated data flows between the application’s components using
system calls captured in the host OS. Hence, the system call collec-
tion on the host OS is considered to be safe and protected against
tampering by the intruders. The in-scope attacks include any attack
that changes application behaviours by performing system call in-
vocations or changing the value of the arguments of the system
calls.