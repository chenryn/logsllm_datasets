        |  | | +-----  NT Nested Task Flag  (286+ only)  
|  | +-----  0  
|  +-----  RF Resume Flag (386+ only)  
+------  VM  Virtual Mode Flag (386+ only)  
- see   PUSHF  POPF  STI  CLI  STD  CLD  
MSW - Machine Status Word (286+ only)  
      |31|30-5|4|3|2|1|0|  Machine Status Word  
        |   |  | | | | +---- Protection Enable (PE)  
        |   |  | | | +----- Math Present (MP)  
        |   |  | | +------ Emulation (EM)  
        |   |  | +------- Task Switched (TS)  
        |   |  +-------- Extension Type (ET)  
        |   +---------- Reserved  
        +------------- Paging (PG)  
        Bit 0   PE      Protection Enable, switches processor between                         
protected and real mode  
        Bit 1   MP      Math Present, controls function of the WAIT                         
instruction  
        Bit 2   EM      Emulation, indicates whether coprocessor functions                         
are to be emulated  
网络安全屋 
        Bit 3   TS      Task Switched, set and interrogated by coprocessor                         
on task switches and when interpretting coprocessor                         instructions  
        Bit 4   ET      Extension Type, indicates type of coprocessor in  
                        system         Bits 5-30       Reserved         bit 31  PG      Paging, 
indicates whether the processor uses page                         tables to translate 
linear addresses to physical  
                        addresses  
        - see   SMSW  LMSW  
8086/80186/80286/80386/80486 Instruction Set  
AAA - Ascii Adjust for Addition  
        Usage:  AAA  
        Modifies flags: AF CF (OF,PF,SF,ZF undefined)  
        Changes contents of AL to valid unpacked decimal.  The high order         nibble 
is zeroed.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        none              8     3     4     3             1  
AAD - Ascii Adjust for Division  
        Usage:  AAD  
Modifies flags: SF ZF PF (AF,CF,OF undefined)  
Used before dividing unpacked decimal numbers.   Multiplies AH by         
10 and the adds result into AL.  Sets AH to zero.  This instruction         is also 
known to have an undocumented behavior.  
        AL := 10*AH+AL  
        AH := 0  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        none              60    14    19    14            2  
AAM - Ascii Adjust for Multiplication  
        Usage:  AAM  
        Modifies flags: PF SF ZF (AF,CF,OF undefined)  
        AH := AL / 10  
        AL := AL mod 10  
网络安全屋 
        Used after multiplication of two unpacked decimal numbers, this         
instruction adjusts an unpacked decimal number.  The high order         
nibble of each byte must be zeroed before using this instruction.         This 
instruction is also known to have an undocumented behavior.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        none              83    16    17    15            2  
AAS - Ascii Adjust for Subtraction  
        Usage:  AAS  
        Modifies flags: AF CF (OF,PF,SF,ZF undefined)  
        Corrects result of a previous unpacked decimal subtraction in AL.         
High order nibble is zeroed.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        none              8     3     4     3             1  
ADC - Add With Carry  
        Usage:  ADC     dest,src  
        Modifies flags: AF CF OF SF PF ZF  
        Sums two binary operands placing the result in the destination.         
If CF is set, a 1 is added to the destination.  
                                Clocks                  Size  
Operands         808x  286   386   486          Bytes  
reg,reg           3     2     2     1             2  
        mem,reg         16+EA   7     7     3            2-4  (W88=24+EA) reg,mem          9+EA   7     
6     2            2-4  (W88=13+EA)  
        reg,immed         4     3     2     1            3-4  
        mem,immed       17+EA   7     7     3            3-6  (W88=23+EA)         accum,immed       
4     3     2     1            2-3  
ADD - Arithmetic Addition  
        Usage:  ADD     dest,src  
        Modifies flags: AF CF OF PF SF ZF  
网络安全屋 
        Adds "src" to "dest" and replacing the original contents of "dest".         
Both operands are binary.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg,reg           3     2     2     1             2         mem,reg         16+EA   7     7     3            
2-4  (W88=24+EA)         reg,mem          9+EA   7     6     2            2-4  (W88=13+EA)         
reg,immed         4     3     2     1            3-4  
        mem,immed       17+EA   7     7     3            3-6  (W88=23+EA)         accum,immed       
4     3     2     1            2-3  
AND - Logical And  
        Usage:  AND     dest,src  
        Modifies flags: CF OF PF SF ZF (AF undefined)  
        Performs a logical AND of the two operands replacing the destination         
with the result.  
                                Clocks                  Size  
        Operands         808x  286   386   486          Bytes  
        reg,reg           3     2     2     1             2         mem,reg         16+EA   7     7     3            
2-4  (W88=24+EA)         reg,mem          9+EA   7     6     1            2-4  (W88=13+EA)         
reg,immed         4     3     2     1            3-4  
        mem,immed       17+EA   7     7     3            3-6  (W88=23+EA)         accum,immed       
4     3     2     1            2-3  
ARPL - Adjusted Requested Privilege Level of Selector (286+ PM)  
        Usage:  ARPL    dest,src  
        (286+ protected mode)  
        Modifies flags: ZF  
        Compares the RPL bits of "dest" against "src".  If the RPL bits         of 
"dest" are less than "src", the destination RPL bits are set         equal to the 
source RPL bits and the Zero Flag is set.  Otherwise the Zero Flag is 
cleared.  
                                Clocks                  Size  
        Operands         808x  286   386   486          Bytes  
        reg,reg           -     10    20    9             2         mem,reg           -     11    
21    9             4  
BOUND - Array Index Bound Check (80188+)  
        Usage:  BOUND   src,limit  
        Modifies flags: None  
网络安全屋 
        Array index in source register is checked against upper and lower         
bounds in memory source.  The first word located at "limit" is         the lower 
boundary and the word at "limit+2" is the upper array bound.         Interrupt 5 
occurs if the source value is less than or higher than         the source.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg16,mem32       -   nj=13 nj=10   7             2         reg32,mem64       -   
nj=13 nj=10   7             2  
        - nj = no jump taken  
BSF - Bit Scan Forward (386+)  
        Usage:  BSF     dest,src  
        Modifies flags: ZF  
        Scans source operand for first bit set.  Sets ZF if a bit is found         set 
and loads the destination with an index to first set bit.  Clears         ZF is no 
bits are found set.  BSF scans forward across bit pattern         (0-n) while 
BSR scans in reverse (n-0).  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg,reg           -     -   10+3n  6-42           3         reg,mem           -     -   
10+3n  7-43          3-7         reg32,reg32       -     -   10+3n  6-42          3-7         
reg32,mem32       -     -   10+3n  7-43          3-7  
BSR - Bit Scan Reverse  (386+)  
        Usage:  BSR     dest,src  
        Modifies flags: ZF  
        Scans source operand for first bit set.  Sets ZF if a bit is found         set 
and loads the destination with an index to first set bit.  Clears         ZF is no 
bits are found set.  BSF scans forward across bit pattern         (0-n) while 
BSR scans in reverse (n-0).  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg,reg           -     -   10+3n  6-103          3         reg,mem           -     -   
10+3n  7-104         3-7         reg32,reg32       -     -   10+3n  6-103         3-7  
        reg32,mem32       -     -   10+3n  7-104         3-7  
网络安全屋 
BSWAP - Byte Swap       (486+)  
        Usage:  BSWAP   reg32  
        Modifies flags: none  
        Changes the byte order of a 32 bit register from big endian to         
little endian or vice versa.   Result left in destination register         is 
undefined if the operand is a 16 bit register.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg32             -     -     -     1             2  
BT - Bit Test           (386+)  
        Usage:  BT      dest,src  
        Modifies flags: CF  
        The destination bit indexed by the source value is copied into the         
Carry Flag.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg16,immed8      -     -     3     3            4-8         mem16,immed8      -     
-     6     6            4-8         reg16,reg16       -     -     3     3            3-7  
        mem16,reg16       -     -     12    12           3-7  
BTC - Bit Test with Compliment (386+)  
        Usage:  BTC     dest,src  
        Modifies flags: CF  
        The destination bit indexed by the source value is copied into the         
Carry Flag after being complimented (inverted).  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg16,immed8      -     -     6     6            4-8         mem16,immed8      -     
-     8     8            4-8         reg16,reg16       -     -     6     6            3-7  
        mem16,reg16       -     -     13    13           3-7 BTR - Bit Test with Reset 
(386+)  
        Usage:  BTR     dest,src  
        Modifies flags: CF  
网络安全屋 
        The destination bit indexed by the source value is copied into the         
Carry Flag and then cleared in the destination.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg16,immed8      -     -     6     6            4-8         mem16,immed8      -     
-     8     8            4-8         reg16,reg16       -     -     6     6            3-7         
mem16,reg16       -     -     13    13           3-7  
BTS - Bit Test and Set  (386+)  
        Usage:  BTS     dest,src  
        Modifies flags: CF  
        The destination bit indexed by the source value is copied into the         
Carry Flag and then set in the destination.  
                                 Clocks                 Size  
        Operands         808x  286   386   486          Bytes  
        reg16,immed8      -     -     6     6            4-8         mem16,immed8      -     
-     8     8            4-8         reg16,reg16       -     -     6     6            3-7         
mem16,reg16       -     -     13    13           3-7  
CALL - Procedure Call  
        Usage:  CALL    destination  
        Modifies flags: None  
        Pushes Instruction Pointer (and Code Segment for far calls) onto         
stack and loads Instruction Pointer with the address of proc-name.         
Code continues with execution at CS:IP.  
                                                         Clocks  
                   Operands                     808x   286     386     486  
        rel16 (near, IP relative)                19     7      7+m      3         rel32 (near, IP 
relative)                -      -      7+m      3  
        reg16 (near, register indirect)          16     7      7+m      5         reg32 (near, 
register indirect)          -      -      7+m      5  
        mem16 (near, memory indirect)          21+EA    11    10+m      5         mem32 (near, 
memory indirect)            -      -     10+m      5  
        ptr16:16 (far, full ptr supplied)        28     13    17+m      18         ptr16:32 (far, full ptr 
supplied)        -      -     17+m      18         ptr16:16 (far, ptr supplied, prot. mode) -      26    
34+m      20         ptr16:32 (far, ptr supplied, prot. mode) -      -     34+m      20         
m16:16 (far, indirect)                 37+EA    16    22+m      17         m16:32 (far, indirect)                   
网络安全屋 
-      -     22+m      17         m16:16 (far, indirect, prot. mode)       -      29    38+m      20         
m16:32 (far, indirect, prot. mode)       -      -     38+m      20  
        ptr16:16 (task, via TSS or task gate)    -     177     TS     37+TS         m16:16 
(task, via TSS or task gate)      -   180/185  5+TS    37+TS         m16:32 (task)                            
-      -      TS     37+TS         m16:32 (task)                            -      -     5+TS    37+TS  
        ptr16:16 (gate, same privilege)          -      41    52+m      35         ptr16:32 (gate, 
same privilege)          -      -     52+m      35         m16:16 (gate, same privilege)            -      
44    56+m      35         m16:32 (gate, same privilege)            -      -     56+m      35  
        ptr16:16 (gate, more priv, no parm)      -      82    86+m      69         ptr16:32 (gate, 
more priv, no parm)      -      -     86+m      69         m16:16 (gate, more priv, no parm)        
-      83    90+m      69         m16:32 (gate, more priv, no parm)        -      -     90+m      69  
        ptr16:16 (gate, more priv, x parms)      -    86+4x  94+4x+m  77+4x         ptr16:32 
(gate, more priv, x parms)      -      -    94+4x+m  77+4x         m16:16 (gate, more priv, x 
parms)        -    90+4x  98+4x+m  77+4x         m16:32 (gate, more priv, x parms)        -      
-    98+4x+m  77+4x  
CBW - Convert Byte to Word  
        Usage:  CBW  
        Modifies flags: None  