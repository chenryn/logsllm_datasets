User: I am working on an application in which I may potentially need to log the entire traffic reaching the server. This feature may be turned on or off, or may be used when exceptions are caught. 
In any case, I am concerned about the blocking nature of disk I/O operations and their impact on the performance of the server. The business logic that is applied when a request is handled (mostly POST http requests), is asynchronous in such that every network or db calls are asynchronously executed.
On the other hand, I am concerned about the delay to the thread while it is waiting for the disk IO operation to complete. The logged messages can be a few bytes to a few KBs but in some cases a few MBs. There is no real need for the thread to pause while data is written to disk, the http request can definitely complete at that point and there is no reason that the ioloop thread not to work on another task while data is written to disk.
So my questions are:

am I over-worried about this issue? is logging to standard output
and    later redirecting it to a file "good enough"?  
what is the    common    approach, or the one you found most practical for logging    in    tornado-based applications? even for simple logging and not    the    (extreme) case I outlined above? 
is this basically an ideal case for    queuing the logging messages and consume them from a  dedicated    thread?  
Say I do offload the logging to a different thread (like    Homer Simpson's "Can't Someone Else Do It?"), if the thread that    performs the disk logging is waiting for the disk io operation to    complete, does the linux kernel takes that point as an opportunity a    context switch?

Any comments or suggestion are much appreciated, 
Erez
Assistant: " write asynchronously to a pipe or socket to another process
  (syslog?"

How can it be? log_requestis a normal function - not a coroutine and all default python handlers are not driven by asyncio event loop so they are not truly asynchronous. This is imho one of the factors that make Tornado less performant than ie. aiohttp. Writing to the memory or using udp is fast but it is not async anyway.