# 【技术分享】基于Arachni构建黑盒扫描平台
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[b1ngzz](http://bobao.360.cn/member/contribute?uid=1341571432)
预估稿费：300RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**0x01 简介**
对于企业来说，构建自动化黑盒扫描平台是企业安全建设中的一个重要环节，自动化扫描能够有效提升效率，在一定程度上减少常规安全问题的发生。
对于大型互联网和土豪公司来说，都会选择招人自研扫描器或直接购买付费产品，但是对于安全资源有限的公司来说，自研或购买付费产品都是不太现实的，那么性价比较高的方式就是选择基于开源扫描器构建自动化扫描平台。
那么问题来了，目前开源的扫描器有好几种，如何选择一个适合的呢？
首先简单说一说我司情况，主要为APP接口和H5页面，扫描的前端展示自己写，然后调用引擎的API进行扫描，获取结果存储在数据库。
扫描需求包括:
主动扫描: 用户可以在界面上手工填写配置(url，cookie，自动登录等)，提交扫描任务
被动扫描: 通过设置代理的方式，收集测试和预发环境下的请求信息，然后定时扫描
公司之前使用 [W3AF](http://w3af.org/) 作为黑盒扫描的引擎，总体使用起来效果不是太好，首先其[ API
](http://docs.w3af.org/en/latest/api/index.html#api-endpoints)不完全是 REST
风格的，且不支持单接口 POST 扫描（给定请求参数进行扫描）等，所以决定更换一个扫描引擎。
对市面上的开源扫描器简单研究了下，主要从以下几个方面评估：
扫描准确率
性能
支持的扫描漏洞类型
爬取页面时，能够模拟用户交互，即是否支持DOM，AJAX等技术
支持指定请求参数进行 GET / POST 扫描
是否提供 API，且易于使用
是否支持登录扫描(带 Cookie 或 自动登录)
部署是否方便，文档是否完善，扫描报告内容是否易于判断误报
社区是否活跃，技术支持是否有保证
…
列的要求比较多，评估的时候尽可能满足就好…
这里根据试用结果和网上资料，对照要求给出结论：
准确率：因为时间有限，没有一一测试，参考的的是
[sectool](http://docs.w3af.org/en/latest/api/index.html#api-endpoints)的报告，按照表中的结果，[Arachni](https://github.com/Arachni/Arachni) 排在前几位
性能：时间原因，没有一一测试
漏洞类型: [Arachni ](https://github.com/Arachni/Arachni)对于常见的漏洞类型基本都覆盖到了，完整的类型可以参考
[checks](https://github.com/Arachni/arachni#checks)
模拟用户交互：[ Arachni](https://github.com/Arachni/Arachni) 内置
[PhantomJS](https://github.com/Arachni/Arachni/blob/master/components/plugins/vector_feed.rb)
带参数扫描：[Arachni](https://github.com/Arachni/Arachni) 能够通过 [vector feed
plugin](https://github.com/Arachni/Arachni/wiki/REST-API) 来支持，支持 GET 和 POST
API: [Arachni](https://github.com/Arachni/Arachni) 基于 ruby 语言编写，提供了完整的 [REST
API](https://github.com/Arachni/Arachni/wiki/REST-API)
登录扫描：支持设置 cookie 参数，并支持 [autologin plugin](http://support.arachni-scanner.com/kb/general-use/logging-in-and-maintaining-a-valid-session) 来实现自动登录
[Arachni](http://support.arachni-scanner.com/kb/general-use/logging-in-and-maintaining-a-valid-session) 提供自包含 package，无需安装依赖；[wiki
](http://support.arachni-scanner.com/kb/general-use/logging-in-and-maintaining-a-valid-session)写的比较详细；报告内容总体还算比较详细，支持多种格式，如 html, json 等
[Arachni](https://github.com/Arachni/Arachni) 代码目前还在更新中，之前在 github 上提
issue，作者都会积极回答，回复速度也比较快，技术支持比较有保障
…
所以，最后就决定使用 [Arachni](https://github.com/Arachni/Arachni) 了。
在使用 Arachni 的过程中，遇到过一些坑，这里给大家分享一下这段时间使用的一些经验，比如常用场景的配置、注意事项、二次开发等等，希望对大家有帮助～
**0x02 部署**
在部署方面，Arachni 提供了 self-contained 的 package，所以只需要下载后解压就可以运行了，非常方便，下载地址
稳定版，开发版本，推荐先使用稳定版本
平台支持 Linux, MacOS, Windows，以 linux 为例，下载解压后，运行 rest api server
    #./bin/Arachni_rest_server  --address 0.0.0.0 --port 8888
    Arachni - Web APPlication Security Scanner Framework v2.0dev
       Author: Tasos "Zapotek" Laskos 
               (With the support of the community and the Arachni Team.)
       Website:       http://Arachni-scanner.com
       Documentation: http://Arachni-scanner.com/wiki
     [*] Listening on http://0.0.0.0:8888
**0x03 配置**
这里先大致介绍一下 Arachni Rest API 创建扫描任务的配置项，完整的参数和说明可以对照命令行参数说明:
    {
      "url" : null,   // 扫描链接，必须
      "checks" : ["sql*", "xss*", "csrf"], // 必须，扫描的漏洞类型，支持通配符 * ，和反选 -xss*，即不扫描所有类型的 xss
      "http" : { // http请求相关配置，比如设置 cookie 和 header
        "user_agent" : "Arachni/v2.0dev",
        "request_headers" : {},
        "cookie_string" : {} // 请求中的完整 cookie 字段
      }, 
      "audit" : {  // 扫描相关配置，比如哪些参数需要扫描，是否要对 cookie，json 进行扫描等
        "exclude_vector_patterns" : [],
        "include_vector_patterns" : [],
        "forms": true,  // 扫描 表单
        "cookies": true,  // 扫描 cookies
        "headers": true, // 扫描 headers
      },
      "input" : { // 设置请求参数的值
        "values" : {}
      },  
      "scope" : {  // 扫描范围相关，比如限制爬取页面数，限制扫描url路径
        "page_limit" : 5,
        "path_exclude_pattern" : []
      },
      "session" : {}, // 登录会话管理，如当前会话有效性验证
      "plugins" : {}  // 插件，比如设置自动登录，指定请求参数进行扫描
    }
接下来以 DVWA 1.9 为测试目标，介绍一些常见场景的扫描配置，DVWA 1.9 的安装和使用大家可以网上搜一下，这里就不做介绍了。
因为 DVWA 1.9 默认登录后返回的 security 级别为 impossible，会导致使用自动登录插件后无法扫出漏洞，这里修改了代码，让它默认返回
low
修改 config/config.inc.php
    # Default value for the secuirty level with each session.
    # $_DVWA[ 'default_security_level' ] = 'impossible';
    $_DVWA[ 'default_security_level' ] = 'low';
**场景: 带cookie扫描**
**配置如下:**
    {
      "url": "http://192.168.1.129/dvwa/vulnerabilities/csrf/",
      "checks": [
        "csrf"  // 只扫描 csrf
      ],
      "audit": { // 只扫描表单字段
        "forms": true,
        "cookies": false,  
        "headers": false
      },
      "scope": {
        "page_limit": 4,  // 限制爬虫数
        "exclude_path_patterns": [ // 不扫描的页面
          "logout",
          "security",
          "login",
          "setup"
        ]  
      },
      "http": {
        "cookie_string": "security=low; path=/, PHPSESSID=6oes10c6fem520jid06tv40i16; path=/"
      }
    }
**扫描说明：**
checks：仅扫描 csrf
audit：扫描 form 表单，但不扫描 cookie 和 header
scope：限制爬取页面数为 4，不扫描 logout 等会导致 cookie 失效的页面
http: 设置请求的 cookie，这里需要注意的是，每个 cookie 项后都有一个 path 属性，指定作用域。因为如果不指定，cookie
的作用域就是 url 中的 path，比如这里为
/dvwa/vulnerabilities/csrf/，这个时候如果在爬取过程中，爬取到其父路径，请求就不会带上 cookie，导致 server 返回
set-cookie 响应头，覆盖原有 cookie，导致会话失效，所以这里最好设置成根目录 /。
**场景: 自动登录扫描**
**配置如下:**
    {
      "url": "http://192.168.1.129/dvwa/vulnerabilities/sqli/",
      "checks": [
        "sql_injection"
      ],
      "audit": {
        "forms": true,
        "cookies": false,  
        "headers": false
      },
      "scope": {
        "page_limit": 5,
        "exclude_path_patterns": [
          "logout",
          "security",
          "login",
          "setup"
        ]  
      },
      "plugins": {
        "autologin": {
          "url": "http://192.168.1.129/dvwa/login.php",
          "parameters": "username=admin&password=password&Login=Login",
          "check": "PHPIDS"
        }
      },
      "session": {
        "check_url": "http://192.168.1.129/dvwa/index.php",
        "check_pattern": "PHPIDS"
      }
    }
**扫描说明：**
checks：仅扫描 sql_injection
audit：扫描 form 表单，但不扫描 cookie 和 header
scope：限制爬取页面数为 5，不扫描 logout 等会导致 cookie 失效的页面
plugins & session：使用自动登录插件，url 为登录入口，parameters 为登录需要的参数，格式为
query_sting，通过响应中是否包含 check 的内容来来判断是否登录成功，因为 DVWA
登录成功后返回的是302跳转，响应body为空，导致check失败，此时可以通过配置 session 下的 check_url 和
check_pattern 来实现(引擎会优先使用 session 下的配置)，这里检查 index 页面为是否包含 PHPIDS 来判断是否登录成功