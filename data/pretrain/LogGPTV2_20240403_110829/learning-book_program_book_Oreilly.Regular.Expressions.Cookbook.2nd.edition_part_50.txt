Problem
You want to match all lines that contain the word error anywhere within them.
362 I Chapter 5: Words, Lines, and Special Characters
---
## Page 379
Solution
^ *\berror\b.*$
Regex options: Case insensitive, ~ and $ match at line breaks (°dot matches line
breaks” must not be set)
Regexflarr: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
It’'s often useful to match complete lines in order to collect or remove them. To match
any line that contains the word error, we start with the regular expression . The word boundary tokens on both ends make sure that we match *error” only
when it appears as a complete word, as explained in Recipe 2.6.
To expand the regex to match a complete line, add  ,* at both ends. The dot-asterisk
sequences match zero or more characters within the current line. The asterisk quanti-
fiers are greedy, so they will match as much text as possible. The first dot-asterisk
matches until the last occurrence of °error" on the line, and the second dot-asterisk
matches any non-line-break characters that occur after it.
Finally, place caret and dollar sign anchors at the begining and end of the regular
expression, respectively, to ensure that matches contain a complete line. Strictly speak-
ing, the dollar sign anchor at the end is redundant since the dot and greedy asterisk will
always match until the end of the line. However, it doesn’t hurt to add it, and makes
the regular expression a little more self-explanatory. Adding line or string anchors to
your regexes, when appropriate, can sometimes help you avoid unexpected issues, so
it's a good habit to form. Note that unlike the dollar sign, the caret at the beginning of
the regular expression is not necessarily redundant, since it ensures that the regex only
matches complete lines, even if the search starts in the middle of a line for some reason.
Remember that the three key metacharacters used to restrict matches to a single line
(the (^) and ($) anchors, and the dot) do not have fixed meanings. To make them all
line-oriented, you have to enable the option to let ^ and $ match at line breaks, and
make sure that the option to let the dot match line breaks is not enabled. Recipe 3.4
shows how to apply these options in code. If you're using JavaScript or Ruby, there is
one less option to worry about, because JavaScript does not have an option to let dot
match line breaks, and Ruby's caret and dollar sign anchors always match at line breaks.
Variations
To search for lines that contain any one of multiple words, use altermation:
^ *\b(one| two |three)\b,*$
Regex options: Case insensitive, ^ and $ match at line breaks (°dot matches line
breaks” must not be set)
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
5.10 Match Complete Lines That Contain a Word I 363
---
## Page 380
This regular expression matches any line that contains at least one of the words “one,*
apn “sng sasodand omi aaas spuom aui punoue sassuuaued au aanp, 1o om,
limit the reach of the alternation, and second, they capture the specific word that was
found on the line to backreference 1. If the line contains more than one of the words,
the backreference will hold the one that occurs farthest to the right. This is because the
asterisk quantifier that appears before the parentheses is greedy, and will expand the
twothree)\b,*$), backreference 1 will contain the word from your list that appears
dot to match as much text as possible. If you make the asterisk lazy, as with \btwo\b)(?=,*?\bthree\b) +$
Regex options: Case insensitive, ^ and $ match at line breaks (°dot matches line
breaks" must not be set)
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
This regular expression uses positive lookahead to match lines that contain three re-
quired words anywhere within them., The  ,+ at the end is used to actually match the
line, after the lookaheads have determined that the line meets the requirements.
See Also
Recipe 5.11 shows how to match complete lines that do not contain a particular word.
If you’re not concermed with matching complete lines, Recipe 5.1 describes how to
match a specific word, and Recipe 5.2 shows how to match any of multiple words.
Recipe 3.21 includes code listings for searching through text line by line, which can
simplify the process of searching within and identifying lines of interest.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.4 explains that the dot matches any character. Recipe 2.5 explains anchors.
Recipe 2.6 explains word boundaries. Recipe 2.8 explains altermation. Recipe 2.9 ex-
plains grouping. Recipe 2.12 explains repetition. Recipe 2.16 explains lookaround.
5.11MatchCompleteLinesThatDoNotContainaWord
Problem
You want to match complete lines that do not contain the word error.
Solution
^(?:(?!\berror\b).)*$
Regexoptions: Case insensitive, ^ and $ match at line breaks (°dot matches line
breaks” must not be set)
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
364 | Chapter 5: Words, Lines, and Special Characters
---
## Page 381
Discussion
In order to match a line that does not contain something, use negative lookahead (de-
scribed in Recipe 2.16). Notice that in this regular expression, a negative lookahead
and a dot are repeated together using a noncapturing group. This is necessary to ensure
that the regex \berror\b fails at every position in the line. The <> and $) anchors at
the edges of the regular expression make sure you match a complete line, and addi-
tionally prevent the group containing the negative lookahead from limiting it’s tests to
only some part of the line.
The options you apply to this regular expression determine whether it tries to match
the entire subject string or just one line at a time. With the option to let ~ and S match
at line breaks enabled and the option to let dot match line breaks disabled, this regular
expression works as described and matches line by line If you inver the state of these
wo options, the regular expression will match any complete string that does not con-
tain the word “error."
Testing a negative lookahead against every position in a line or string is
rather ineficient. This solution is intended to be used in situations
where one regular expression is all that can be used, such as when using
an application that cant be programmed. When programming, it is
code for this.
more efficient to search through text line by line. Recipe 3.21 shows the
See Also
Recipe 5.10 shows how to match complete lines that do contain a particular word.
Recipe 3.21 includes code listings for searching through text line by line, which can
simplify the process of searching within and identifying lines of interest.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2-
Recipe 2.4 explains that the dot matches any character. Recipe 2.5 explains anchors.
Recipe 2.6 explains word boundaries. Recipe 2.9 explains grouping. Recipe 2.12 ex-
plains repetition. Recipe 2.16 explains lookaround.
5.12TrimLeading andTrailingWhitespace
Problem
You want to remove leading and trailing whitespace from a string. For instance, you
might need to do this to clean up data submitted by users in a web form before passing
their input to one of the validation regexes in Chapter 4.
5.12 Trim Leading and Trailing Whitespace I 365
---
## Page 382
Solution
To keep things simple and fast, the best all-around solution is to use two
substitutions—one to remove leading whitespace, and another to remove trailing
whitespace.
Leading whitespace:
\A′s+
Regexoptions: None
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
\,s+
Regexoptions: None (*^ and $S match at line breaks" must not be set)
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Trailing whitespace:
\s+\Z
Regexoptions: None
Regexflarer: .NET, Java, PCRE, Perl, Python, Ruby
\s+$
Regexoptions: None (*^ and $ match at line breaks" must not be set)
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Simply replace matches found using one of the *leading whitespace" regexes and one
of the *trailing whitespace? regexes with the empty string. Follow the code in
Recipe 3.14 to perform replacements. With both the leading and trailing whitespace
regular expressions, you only need to replace the first match found since the regexes
match all leading or trailing whitespace in one go.
Discussion
Removing leading and trailing whitespace is a simple but common task. The regular
expressions just shown contain three parts each: the shorthand character class to match
any whitespace character ( and ($) at the end.
We’ve included rwo options for matching both leading and trailing whitespace because
of incompatibilities between Ruby and JavaScript. With the other regex flavors, you
can chose either option. The versions with  and $) don’t work correctly in Ruby,
because Ruby always lets these anchors match at the beginning and end of any line.
JavaScript doesn’t support the A and ^Z anchors.
e ds o w pe ensn uoou e apaod senue uuod ue
can remove leading and trailing whitespace for you. Table 5-2 shows how to use this
built-in function or method in a variery of programming languages.
366 | Chapter5: Words, Lines, and Special Characters
---
## Page 383
Table 5-2. Standard functions to remove leading and trailing whitespace
Language
Function
CI, VB.NET
String. Trim([Chors])
Java, lavascript
string.trim()
 PHP
trin($string)
Python, Ruby
string.strip()
Perl does not have an equivalent function in its standard library, but you can create
your own by using the regular expressions shown earlier in this recipe:
sub trim 
my $string = shift;
$string =~ s/^\s+/;
$string =α s/\s+$//;
return Sstring;
JavaScript’s string.trin() method is a recent addition to the language. For older
browsers (prior to Internet Explorer 9 and Firefox 3.5), you can add it like this:
// Add the trim nethod for browsers that don’t already include it
1f (!String-prototype.trin) {
String-prototype.trim = function() (
return this.replace(/^\s+/, "*) .replace(/\s+$/, "*);
};
In both Perl and JavaScript, s matches any character defined as white
space by the Unicode standard, in addition to the space, tab, line feed,
whitespace.
Variations
There are in fact many different ways you can write a regular expression to help you
trim a string. However, the alternatives are usually slower than using two simple sub-
stitutions when working with long strings (when performance matters most). Following
are some of the more common alternative solutions you might encounter. They are all
breaks" option, the regular expressions use [\s\S] to match any single character,
written in JavaScript, and since standard JavaScript doesn't have a *dot matches line
including line breaks. In other programming languages, use a dot instead, and enable
the *dot matches line breaks? option.
5.12 Trim Leading and Trailing Whitespace | 367
---
## Page 384
string-replace(/^\s+|\s+$/g, "*);
This is probably the most common solution. It combines the two simple regexes
rather than just the first (it will match rwice when its target contains both leading
via alternation (see Recipe 2.8), and uses the /g (global) flag to replace all matches
and trailing whitespace). This isn’t a terrible approach, but it'’s slower than using
rwo simple substitutions when working with long strings since the two alternation
options need to be tested at every character position.
（s。“/$s([s\s\])s\/)edaxux5
This regex works by matching the entire string and capturing the sequence from
the first to the last nonwhitespace characters (if any) to backreference 1. By re-
placing the entire string with backreference 1, you're left with a trimmed version
of the string.
This approach is conceptually simple, but the lazy quantifier inside the capturing
group makes the regex do a lot of extra work (i.e., backtracking), and therefore
tends to make this option slow with long target strings.
Let's step back to look at how this actually works. After the regex enters the cap-
turing group, the ≤[s\$] class’s lazy *?> quantifier requires that it be repeated as
few times as possible. Thus, the regex matches one character at a time, stopping
after each characterto try to match the remaining \s*$> pattern. Ifthat fails because
nonwhitespace characters remain somewhere after the current position in the
string, the regex matches one more character, updates the backreference, and then
tries the remainder of the pattern again.
（$。/$s\(S\[S}s])+s\/)>edax8ux5
This is similar to the last regex, but it replaces the lazy quantifier with a greedy one
for performance reasons. To make sure that the capturing group still only matches
up to the last nonwhitespace character, a trailing ^5> is required. However, since
the regex must be able to match whitespace-only strings, the entire capruring group
is made optional by adding a trailing question mark quantifier.
Here, the gredy asterisk in [s\5]*> repeats its any-character pattem to the end
of the string. The regex then backtracks one character at a time until it’'s able to
match the following  quantifier repeats the  that you might prefer
to use here since it is specifically designed to match horizontal whitespace. It also