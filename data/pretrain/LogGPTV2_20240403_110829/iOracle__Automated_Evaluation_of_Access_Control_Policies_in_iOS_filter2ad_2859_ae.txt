rity mechanisms. Several security researchers have shared findings
after reverse engineering the iOS sandbox mechanism15, 16, 17 [1, 6].
Finally, Watson [28] provides a survey of access control extensibility
in which he discusses several access control mechanisms including
iOS sandboxing.
Prior work creates logical models of access control systems.
Chaudhuri et al. [3] use Datalog to model dynamic access con-
trol systems (e.g., creating processes) including Windows Vista and
Asbestos. SEAL [18], a language similar to Datalog, is designed for
specifying and analyzing label-based access control systems such
as Windows 7, Asbestos, and HiStar. Chen et al. [4] use Prolog to
model and compare attack graphs for SELinux and AppArmor.
The multi-stage nature of jailbreak gadgets could be represented
as state transitions in an attack graph. Sheyner et al. [22] use the
15http://www.slideshare.net/i0n1c/
ruxcon-2014-stefan-esser-ios8-containers-sandboxes-and-entitlements
16http://2013.zeronights.org/includes/docs/
Meder_Kydyraliev_-_Mining_Mach_Services_within_OS_X_Sandbox.pdf
17http://newosxbook.com/files/HITSB.pdf
NuSMV model checker to automatically construct attack graphs
representing networks. MulVAL [19] uses Datalog to create a logic-
based attack graph that integrates network configurations with
data from reported vulnerabilities. Saha [20] extended MulVAL to
include complex security policies (e.g., SELinux), logical characteri-
zation of negation, and more efficient reconstruction of the attack
graph after changes are made. Sawilla and Ou [21] develop an algo-
rithm that uses vulnerabilities and attacker privileges to prioritize
vertices in a network attack graph.
iOracle is related to prior work in Android. Gasparis et al. [12]
learn from legitimate rooting applications in order to detect Android
malware containing rooting exploits. SEAndroid [23] ports SELinux
to Android, and EASEAndroid [25] automatically refines SEAndroid
policies by using semi-supervised learning. SPOKE [24] models the
attack surface of SEAndroid using functional tests.
9 CONCLUSIONS
In order to automate the evaluation of the iOS protection system,
we constructed iOracle. Working with a closed-source system, we
modeled the iOS protection system to detect policy flaws. We per-
formed a case study of four recent jailbreaks and iOracle helped
detect the executables exploited by them. Finally, iOracle has led
us to five previously undiscovered policy flaws.
iOS access control must continue to increase in complexity in
order to meet the demands of new features and increasingly sophis-
ticated attacks. The iOracle framework allows security researchers
to scale analysis efforts to keep pace with increasing complexity.
10 ACKNOWLEDGMENTS
We thank Micah Bushouse, Brad Reaves, and the WolfPack Secu-
rity and Privacy Research (WSPR) lab as a whole for their helpful
comments. We also thank Dennis Bahler for his advice on Prolog
and other logic programming languages.
This work was supported in part by the Army Research Office
(ARO) grants W911NF-16-1-0299 and W911NF-16-1-0127, the Na-
tional Science Foundation (NSF) CAREER grant CNS-1253346. This
work has been co-funded by the DFG as part of projects P3, S2 and
E4 within the CRC 1119 CROSSING. This work has been funded
by University Politehnica of Bucharest, through the “Excellence
Research Grants” Program, UPB-GEX2017, Ctr. No. 19/2017. Any
opinions, findings, conclusions, or recommendations expressed in
this material are those of the authors and do not necessarily reflect
the views of the funding agencies.
REFERENCES
[1] Dionysus Blazakis. 2011. The Apple Sandbox. In Blackhat DC.
[2] Mihai Bucicoiu, Lucas Davi, Razvan Deaconescu, and Ahmad-Reza Sadeghi.
2015. XiOS: Extended Application Sandboxing on iOS. In Proceedings of the ACM
Symposium on Information, Computer and Communications Security (ASIACCS).
[3] Avik Chaudhuri, Prasad Naldurg, Sriram K Rajamani, Ganesan Ramalingam,
and Lakshmisubrahmanyam Velaga. 2008. EON: Modeling and Analyzing Dy-
namic Access Control Systems with Logic Programs. In Proceedings of the ACM
Conference on Computer and Communications Security (CCS).
[4] Hong Chen, Ninghui Li, and Ziqing Mao. 2009. Analyzing and Comparing the
Protection Quality of Security Enhanced Operating Systems. In Proceedings of
the Network and Distributed Systems Security Symposium (NDSS).
[5] Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang,
Bin Ma, Aohui Wang, Yingjun Zhang, and Wei Zou. 2016. Following Devil’s
Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android
and iOS. In Proceedings of the IEEE Symposium on Security and Privacy.
[6] Dino A Dai Zovi. 2011. Apple iOS 4 security evaluation. Black Hat USA.
[7] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten
Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A
Framework to Mitigate Control-Flow Attacks on Smartphones. In Proceedings of
the Network and Distributed Systems Symposium (NDSS).
[8] Razvan Deaconescu, Luke Deshotels, Mihai Bucicoiu, William Enck, Lucas Davi,
and Ahmad-Reza Sadeghi. 2016. SandBlaster: Reversing the Apple Sandbox. (Aug.
2016). https://arxiv.org/abs/1608.04303 arXiv: 1608.04303.
[9] Zhui Deng, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2015.
iRiS: Vetting Private API Abuse in iOS Applications. In Proceedings of the ACM
Conference on Computer and Communications Security (CCS).
[10] Luke Deshotels, Razvan Deaconescu, Mihai Chiroiu, Lucas Davi, William Enck,
and Ahmad-Reza Sadeghi. 2016. SandScout: Automatic Detection of Flaws in
iOS Sandbox Profiles. In Proceedings of the ACM Conference on Computer and
Communications Security (CCS).
[11] Manuel Egele, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. 2011. PiOS:
Detecting Privacy Leaks in iOS Applications.. In Proceedings of the Network and
Distributed Systems Security Symposium (NDSS).
[12] Ioannis Gasparis, Zhiyun Qian, Chengyu Song, and Srikanth V Krishnamurthy.
2017. Detecting Android Root Exploits by Learning from Root Providers. In
Proceedings of the USENIX Security Symposium.
[13] Jin Han, Su Mon Kywe, Qiang Yan, Feng Bao, Robert Deng, Debin Gao, Yingjiu
Li, and Jianying Zhou. 2013. Launching Generic Attacks on iOS with Approved
Third-Party Applications. In Proceedings of the International Conference on Applied
Cryptography and Network Security (ACNS).
[14] Jin Han, Qiang Yan, Debin Gao, Jianying Zhou, and Robert Deng. 2013. Comparing
Mobile Privacy Protection Through Cross-Platform Applications. In Proceedings
of the Network and Distributed Systems Security Symposium (NDSS).
[15] Andreas Kurtz, Hugo Gascon, Tobias Becker, Konrad Rieck, and Felix Freiling.
2016. Fingerprinting Mobile Devices Using Personalized Configurations. Pro-
ceedings on Privacy Enhancing Technologies (PoPETS) 1 (2016).
[16] Jonathan Levin. 2016. MacOS and iOS Internals, Volume III: Security & Insecurity.
Technologeeks Press.
[17] Charlie Miller, Dion Blazakis, Dino DaiZovi, Stefan Esser, Vincenzo Iozzo, and
Ralf-Philip Weinmann. 2012. iOS Hacker’s Handbook. John Wiley & Sons.
[18] Prasad Naldurg and Raghavendra KR. 2011. SEAL: A Logic Programming Frame-
work for Specifying and Verifying Access Control Models. In Proceedings of the
ACM Symposium on Access Control Models and Technologies (SACMAT).
[19] Xinming Ou, Sudhakar Govindavajhala, and Andrew W Appel. 2005. MulVAL: A
Logic-based Network Security Analyzer. In Proceedings of the USENIX Security
Symposium.
[20] Diptikalyan Saha. 2008. Extending Logical Attack Graphs for Efficient Vulnera-
bility Analysis. In Proceedings of the ACM Conference on Computer and Commu-
nications Security (CCS).
[21] Reginald E Sawilla and Xinming Ou. 2008. Identifying Critical Attack Assets
in Dependency Attack Graphs. In Proceedings of the European Symposium on
Research in Computer Security (ESORICS).
[22] Oleg Sheyner, Joshua Haines, Somesh Jha, Richard Lippmann, and Jeannette M
Wing. 2002. Automated Generation and Analysis of Attack Graphs. In Proceedigns
of the IEEE Symposium on Security and Privacy.
[23] Stephen Smalley and Robert Craig. 2013. PSecurity Enhanced (SE) Android:
Bringing Flexible MAC to Android. In Proceedings of the Network and Distributed
Systems Security Symposium (NDSS).
[24] Ruowen Wang, Ahmed M. Azab, William Enck, Ninghui Li, Peng Ning, Xun
Chen, Wenbo Shen, and Yueqiang Cheng. 2017. SPOKE: Scalable Knowledge
Collection and Attack Surface Analysis of Access Control Policy for Security
Enhanced Android. In Proceedings of the ACM Asia Conference on Computer and
Communications Security (ASIACCS).
[25] Ruowen Wang, William Enck, Douglas Reeves, Xinwen Zhang, Peng Ning, Ding-
bang Xu, Wu Zhou, and Ahmed M Azab. 2015. EASEAndroid: Automatic Policy
Analysis and Refinement for Security Enhanced Android via Large-scale Semi-
supervised Learning. In Proceedings of the USENIX Security Symposium.
[26] Tielei Wang, Yeongjin Jang, Yizheng Chen, Simon Chung, Billy Lau, and Wenke
Lee. 2014. On the Feasibility of Large-Scale Infections of iOS Devices. In Proceed-
ings of the USENIX Security Symposium.
[27] Tielei Wang, Kangjie Lu, Long Lu, Simon Chung, and Wenke Lee. 2013. Jekyll
on iOS: When Benign Apps Become Evil. In Proceedings of the USENIX Security
Symposium.
[28] Robert NM Watson. 2013. A Decade of OS Access-Control Extensibility. Commun.
ACM 56, 2 (2013), 52–63.
[29] Tim Werthmann, Ralf Hund, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten
Holz. 2013. PSiOS: Bring Your Own Privacy & Security to iOS Devices. In
Proceedings of the ACM Symposium on Information, Computer and Communications
Security (ASIACCS).
[30] Luyi Xing, Xiaolong Bai, Tongxin Li, XiaoFeng Wang, Kai Chen, Xiaojing Liao, Shi-
Min Hu, and Xinhui Han. 2015. Cracking App Isolation on Apple: Unauthorized
Cross-App Resource Access on MAC OS. In Proceedings of the ACM Conference
on Computer and Communications Security (CCS).
Description/iOS Version
sandbox profiles
used sandbox profiles
unused sandbox profiles
unsandboxed executables
sandboxed executables
percent sandboxed
executables sharing container
facts generated for container
sandbox operations
non-mobile sandboxed processes
root processes
mobile processes
other user processes
unique entitlement keys (system apps)
unique sandbox extensions
default allow profiles
default deny profiles
Unix users
Unix groups
files on firmware rootfs
and DDI images
7.0
63
49
14
248
66
21
12
1048
114
3
23
54
4
312
17
1
62
11
67
68k
7.1
63
49
14
250
66
20.9
12
1051
114
3
23
54
4
320
17
1
62
11
67
70k
8.0
95
73
22
311
100
24.3
22
1238
114
5
29
93
6
503
31
1
94
14
69
89k
8.1
95
73
22
311
100
24.3
22
1245
114
5
29
93
6
505
31
1
94
14
69
90k
8.2
99
72
27
342
102
23
26
1296
114
5
29
93
6
544
31
1
98
14
69
98k
8.3
100
75
25
369
106
22.3
27
1322
114
5
29
93
6
562
33
1
99
14
69
100k
Table 3: Measuring the Increasing Complexity of iOS Access Control
8.4
100
75
25
372
107
22.3
28
1337
114
5
29