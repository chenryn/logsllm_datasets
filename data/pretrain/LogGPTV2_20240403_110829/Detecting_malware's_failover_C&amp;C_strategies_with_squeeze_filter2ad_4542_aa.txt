title:Detecting malware's failover C&amp;C strategies with squeeze
author:Matthias Neugschwandtner and
Paolo Milani Comparetti and
Christian Platzer
Detecting Malware’s Failover C&C Strategies with
SQUEEZE
Matthias Neugschwandtner1, Paolo Milani Comparetti1, and Christian Platzer1
1Vienna University of Technology, {mneug,pmilani,cplatzer}@seclab.tuwien.ac.at
ABSTRACT
The ability to remote-control infected PCs is a fundamental com-
ponent of modern malware campaigns. At the same time, the com-
mand and control (C&C) infrastructure that provides this capability
is an attractive target for mitigation. In recent years, more or less
successful takedown operations have been conducted against bot-
nets employing both client-server and peer-to-peer C&C architec-
tures. To improve their robustness against such disruptions of their
illegal business, botnet operators routinely deploy redundant C&C
infrastructure and implement failover C&C strategies.
Introduction
In this paper, we propose techniques based on multi-path ex-
ploration [1] to discover how malware behaves when faced with
the simulated take-down of some of the network endpoints it com-
municates with. We implement these techniques in a tool called
SQUEEZE, and show that it allows us to detect backup C&C servers,
increasing the coverage of an automatically generated C&C black-
list by 19.7%, and can trigger domain generation algorithms that
malware implements for disaster-recovery.
1
Malicious code, also known as malware, is an essential compo-
nent of criminal activity on the internet. Miscreants use a variety
of strategies to infect computers with malware and organize them
into networks of remote-controlled bots. These botnets can then
be used for a variety of harmful activities. These include identity
theft (such as stealing a user’s credit card number or online bank-
ing credentials), sending out unwanted email (SPAM), performing
distributed denial of service attacks (DDoS), tricking the user into
purchasing fake anti-virus products, or generating advertisement
revenue by producing fake “clicks” on advertisement links. In fact,
internet criminals are always looking for new ways to proﬁt from
the computers they control at the expense of their legitimate users
or of the internet at large.
To be successful and maximize their proﬁts, botnet operators
need to be able to dynamically control and update their malware
installations. This allows them to adapt a botnet’s behavior to the
dynamic, adversarial environment in which they operate. For in-
stance, a successful SPAM operation has to frequently modify the
structure and content of the messages being sent, not only because
the goals of the campaign may change rapidly over time (from
advertising online pharmacy web-sites, to distributing attachments
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
that contain an exploit) but also because they need to remain one
step ahead of anti-SPAM efforts.
The Command and Control (C&C) infrastructure that botmas-
ters use to control and update their bots is thus a critical component
of their operations. At the same time, C&C is an attractive tar-
get for those who wish to mitigate the damage caused by malware.
Disabling a botnet’s C&C infrastructure can effectively take down
the botnet. If botmasters lose control of their bots, they are pre-
vented from using them to cause further mischief, even though the
malware infections of the individual bots may not themselves have
been remediated.
In recent years, botnet operators have therefore deployed a vari-
ety of client-server or peer-to-peer (P2P) C&C architectures, de-
signed to be robust against take-down attempts. Recent client-
server botnets include Pushdo/Cutwail [2], Torpig [3], Rustock [4]
and Zeus (strictly speaking, Zeus is a toolkit for building botnets [5]).
Examples of P2P botnets include Storm [6, 7], Nugache [8] and
Waledac [9]. A few botnets, such as later versions of Conﬁcker,
combine both C&C approaches [10]. Modern client-server bot-
nets do not naively rely on a single C&C server. Instead, they try
to achieve robustness using domain ﬂux [3], frequent updates of
the C&C endpoints, and a high level of redundancy. For instance,
the Koobface botnet uses about one hundred C&C servers running
on compromised hosts [11]. In many cases, the botnets are also
partitioned such that a single bot installation does not contain the
coordinates of the entire C&C infrastructure.
Nonetheless, both client-server and P2P botnets have been the
target of more or less successful node enumeration [12], inﬁltra-
tion [7, 3, 13, 11, 14] or take-down [15, 16, 17, 18] operations.
Most recently Rustock, one of the largest SPAM botnets, was suc-
cessfully taken down as a result of legal action led by Microsoft [19].
From a technical point of view, this involved identifying all of the
C&C servers employed by the botnet, and taking them down simul-
taneously. Furthermore, the botmasters had to be prevented from
registering speciﬁc domains in China that they could have used to
recover control of their bots. In some cases it may not be feasible
to take down identiﬁed C&C servers in a timely manner. However,
even in such cases a blacklist of C&C servers, such as the ones
provided by FIRE [20] or Zeus Tracker1, can be extremely useful.
By deploying such a blacklist, network administrators are able to
detect infected machines in their network and to prevent them from
receiving further commands from the botmasters.
A common way of building a C&C blacklist is to run malware
samples in an analysis sandbox such as Anubis [21] or CWSand-
box [22] and detect the C&C trafﬁc they generate [20, 23, 24, 25,
26]. This approach, however, suffers from the familiar limitations
of dynamic analysis: incomplete coverage. That is, a single execu-
tion of a malware sample is unlikely to reveal several, let alone all,
of the redundant C&C servers that the bot is able to contact. Fur-
thermore, so long as the botnet’s main C&C servers are available,
1https://zeustracker.abuse.ch/
(cid:2)(cid:1)
the bot will not reveal any fallback strategies it may be provided
with to recover from C&C takedown. For instance, after all of its
C&C servers were taken down in 2008, the Srzbi botnet was able
to get back online because it implemented a domain generation al-
gorithm (DGA) as a recovery mechanism [16].
The goal of this work is to improve the amount of C&C behavior
that can be observed during malware execution. Speciﬁcally, our
aim is to increase the number of C&C servers that are contacted
during an analysis run and can therefore be detected, and to trick
malware into revealing backup C&C strategies such as DGA algo-
rithms. For this, we use a specialized, targeted form of multi-path
exploration [1]. The basic idea is that, if a bot is blocked from con-
tacting a speciﬁc C&C server, it may try to contact alternative C&C
endpoints.
When a bot attempts to contact an endpoint, an analysis sys-
tem can either allow the communication to proceed, or block it.
By making such a decision for each endpoint, we are essentially
exploring a binary tree of execution paths. This tree grows in size
exponentially with the number of endpoints that a sample may con-
tact. During its execution, a malware sample frequently contacts a
signiﬁcant number of endpoints, most of which are not related to
C&C, and are, therefore, uninteresting for our purposes. There-
fore, it is not feasible in practice to explore the entire execution
tree. Furthermore, before C&C behavior can be observed, we may
need to allow the bot to contact speciﬁc endpoints, that it uses to
test the state of its internet connection or to download additional
code. Therefore, intelligent strategies are needed to explore the
execution tree and discover the largest amount of C&C endpoints
within a reasonable time frame.
In Section 3, we introduce two
such strategies. Furthermore, fast exploration of the execution tree
requires the ability to revert the state of the analysis environment to
the moment before a connection was blocked or allowed, to imme-
diately explore the alternative branch.
In this work, we introduce a system called SQUEEZE, that is able
to increase the amount of C&C endpoints and strategies that are
revealed during dynamic analysis. We evaluate our tool on over
8000 malware samples. Results show that, even with a relatively
short run-time, SQUEEZE can reveal hundreds of domains and IPs
of C&C servers that were never observed in a normal run of our
Anubis sandbox. As a result, we are able to increase the number
of entries in an automatically-generated C&C blacklist by 19.7%.
Furthermore, we show that our tool can reveal malware’s ability to
use failover strategies such as DGA algorithms.
In summary, our contributions are the following:
• We introduce two effective strategies for exploring the tree of
executions generated by a malware sample when faced with the
availability or absence of contacted network endpoints.
• We design and implement a system that is able to efﬁciently ex-
ecute multiple paths within this tree. For this, we employ tech-
niques for reverting the execution state of the analysis sandbox
and dynamically re-conﬁguring its network environment.
• We evaluate the proposed techniques on a diverse and represen-
tative collection of real-world malware samples, and show that
they lead to the detection of hundreds of additional C&C end-
points. This allows us to increase the size of an automatically-
generated C&C blacklist by 19.7%. Furthermore, we show that
SQUEEZE can reveal alternative C&C strategies that are used by
malware to recover from the takedown of its primary C&C infras-
tructure.
2 Approach
To discover backup C&C servers and fallback strategies, we use
a dynamic approach. That is, we run malware samples in a con-
trolled environment and observe their C&C communication. Our
approach is targeted against client-server C&C architectures. The
basic idea is to simulate the takedown of a malware’s primary C&C
servers to trick it into revealing the servers and algorithms it is pro-
vided with for failover. For this, the obvious approach would be to
simply block all trafﬁc originating from the sandbox environment.
There are, however, several reasons why this does not work in prac-
tice. First of all, a bot binary may be delivered by a dropper, as is
the case in pay-per-install afﬁliate programs. In such cases, a naive
approach would not allow the interesting bot binary to be down-
loaded in the ﬁrst place. Furthermore, malware authors frequently
contact a popular server to check their internet connectivity. If it is
not available, the sample quits or idles until the network becomes
available. Simply dropping all trafﬁc would cause exactly this un-
desired behavior. Finally, unless we allow trafﬁc to potential C&C
endpoints, we are unable to verify if the trafﬁc is indeed related to
C&C activity.
These considerations provide us with a starting point for the de-
sign of a system for triggering malware’s failover C&C. First of
all, we need to treat C&C trafﬁc differently than other network
trafﬁc. Trafﬁc that is not related to C&C communication should
be allowed through, to the extent that this is possible without al-
lowing the malware to cause harm. On the other hand, C&C trafﬁc
should be blocked to trigger backup behavior. For this, we require
some knowledge about C&C communication, such as signatures
for C&C trafﬁc, that can be used to detect new C&C endpoints.
Finally, to trick the malware into communicating with several of
its redundant C&C servers, we need to be able to block C&C traf-
ﬁc after having allowed through enough of it for our models of
C&C communication to detect it. For this, we need to “rewind”
the malware execution to the moment before the C&C connection
was successfully established. This can be achieved by reverting to
a previously taken snapshot in a virtual machine.
Our approach is essentially a specialized form of multi-path ex-
ploration [1]. For this, it relies on a knowledge base on malware
C&C communication, and on snapshotting functionality that al-
lows it to explore multiple execution paths within a single analy-
sis run. Whenever an analyzed sample attempts to contact a new
endpoint, we take a snapshot before deciding whether to allow this
trafﬁc. Later in the analysis, we are able to revert to this snapshot
to explore the alternative branch. The C&C knowledgebase pro-
vides some domain knowledge to help us decide which execution
branches to explore. This knowledge could come in the form of
network-based signatures for C&C trafﬁc [24, 25] or of network-
based [23] or host-based [26] behavioral models.
3 Exploration Strategies
To describe possible strategies for exploring a malware sample’s
network behavior on different execution paths, we will use a run-
ning example. Figure 1 shows the different components of a mal-
ware, the endpoints it connects to and the effect that connectivity
to these endpoints has on its network behavior. In this example a
dropper is used to distribute the malware. As a ﬁrst step, the drop-
per will connect to a remote server (File-Server A) and down-
load the actual bot component. If the server is not accessible, the
dropper employs a simple failover strategy and will try to contact
backup server File-Server B. If either download is successful,
the downloaded payload is executed, launching the actual bot. In
this case, the dropper does not actually save the payload to disk be-
fore running it. Instead, it injects the downloaded code into another
process and starts a remote thread [2]. Before executing any mali-
cious behavior, the bot performs a connectivity check by attempting
to access a popular web site, in this case the Yahoo home page. If
the connectivity check fails, no further action is taken. Otherwise,
(cid:1)(cid:1)
the bot registers itself at the primary C&C server and receives fur-
ther instructions. These commands will cause the bot to launch a
spam engine or a port scan, connecting to even more endpoints.
The endpoints that are of primary interest to us, however, are those
associated with C&C communication. If the primary C&C server
is unreachable, our example tries to connect to a different hard-
coded endpoint. Only if this backup is also unavailable, the bot
falls back to a Domain Generation Algorithm. The DGA generates
large numbers of domains based on the current date (obtained by
parsing the Yahoo home page, rather than from the system clock).
In case the two main C&C servers were taken ofﬂine, the botmas-
ters would register a few of these domains each day, and use them
to provide their bots with an updated list of C&C servers.
Figure 1: Running example: network endpoints contacted by a malware
sample. A line between two endpoints indicates that the malware attempts
to contact the endpoints one after the other. Lines with an arrow represent
behavior following a successful connection, while crossed lines originate
from unreachable endpoints. A crossed circle indicates no further network
activity.
Every time SQUEEZE encounters an endpoint a decision has to
be taken on whether to block this endpoint or allow the commu-
nication to succeed, inﬂuencing the behavior of the malware and
the further endpoints it will or will not contact as a result. By rep-
resenting the endpoints as nodes, the decision whether or not to
block a connection as node expansion and the result as edges, the
process of analyzing a malware’s network behavior can be mod-