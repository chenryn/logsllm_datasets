gate (since 1 bit is needed to generate a triple and 2 bits are
needed to verify each triple using another).
N B , thus enabling us to use B(cid:2)
N B−1 to 1
The idea behind the protocol improvement is as follows.
The veriﬁcation of a multiplication gate in the circuit uses
one multiplication triple, with the property that if the gate is
incorrect and the triple is valid (meaning that c = ab), then the
adversary will be caught with probability 1. Thus, as long as
all triples are valid with very high probability, the adversary
cannot cheat. The improvement that we propose here works
by observing that if a correct multiplication gate is veriﬁed
using an incorrect triple or an incorrect multiplication gate
is veriﬁed using a correct triple, then the adversary will be
caught. Thus, if the array of multiplication triples is randomly
shufﬂed after the circuit is computed, then the adversary can
only successfully cheat if the random shufﬂe happens to match
good triples with good gates and bad triples with bad gates.
As we will see, this signiﬁcantly reduces the probability that
the adversary can cheat and so the bucket size can be reduced
by 1. Note that although the number of triples is reduced (since
the bucket size is reduced), the number of shufﬂes remains the
same. The modiﬁed protocol is described in Protocol 3.6; the
steps reference the formal speciﬁcation of [11] in Appendix A.
Observe that in the reshufﬂe stage in Protocol 3.6, the
random permutation is computed over the entire array, and
does not use the cache-efﬁcient shufﬂing of Section III-A.
This is due to the fact that unlike the triples generated in the
preprocessing/ofﬂine phase, no triples of the circuit emulation
phase can be opened. Thus, the adversary could actually make
as many triples as it wishes in the circuit emulation phase
be incorrect. In order to see why this is a problem, consider
850
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:59 UTC from IEEE Xplore.  Restrictions apply. 
PROTOCOL 3.6 (Secure Computation – Smaller Buckets):
• Inputs and Auxiliary Input: Same as in Protocol A.2; In
• The protocol – ofﬂine phase: Generate multiplication triples
addition, the parties hold a parameter L.
by calling Protocol 3.1; let (cid:2)d be the output.
• The protocol – online phase:
1) Input sharing and circuit emulation: Exactly as in Proto-
col A.2.
2) Reshufﬂe stage: The parties jointly and securely generate a
random permutation over {1, . . . , N} and then each locally
shufﬂe (cid:2)d accordingly.
3) Veriﬁcation and output stages: Exactly as in Protocol A.2.
1
1
the case that the adversary choose to corrupt one subarray in
each of (cid:2)D1, . . . , (cid:2)DB and make X − 1 out of the X triples
incorrect. Since C = 1, this implies that the adversary is not
caught when opening triples in subarrays (cid:2)D2, . . . , (cid:2)DB with
probability X−B+1. Furthermore, the probability that these
subarrays with all-bad triples are matched equals L−B+1.
Thus, the adversary succeeds in have an all-bad bucket in
the preprocessing phase with probability
N B−1
as proven in Theorem 3.4. Now, if the cache-efﬁcient shufﬂe
is further used in the circuit computation phase, then the
adversary can make a subarray all-bad there as well (recall that
nothing is opened) and this will be matched with probability
1/L only. Thus, the overall cheating probability is bounded by
L ·
1
N B . As a result, the shufﬂing procedure used in
the online circuit-computation phase is a full permutation, and
not the cache-efﬁcient method of Section III-A. We remark
that even when using a full permutation shufﬂe, we need
to make an additional assumption regarding the parameters.
However, this assumption is fortunately very mild and easy to
meet, as will be apparent below.
(XL)B−1 > 1
to model this protocol variant.
As previously, we begin by deﬁning a combinatorial game
Game2(A, X, L, B, C):
1) Run Game1(A, X, L, B, C) once. If the output is 0, then
output 0. Otherwise, proceed to the next step with the
buckets B1, ...BN .
2) The adversary A prepares an additional set (cid:2)d of N balls
3) The set (cid:2)d is shufﬂed. Then, the ith ball in (cid:2)d is added to
where each ball can be either bad or good.
the bucket Bi.
4) The output of the game is 1 if and only if each bucket is
fully good or fully bad.
Note that in this game we do not explicitly require that the
adversary can only win if there exists a bucket that is fully
bad, since this condition is already fulﬁlled by the execution
of Game1 in the ﬁrst step. We proceed to bound the winning
probability of the adversary in this game.
Theorem 3.7: If B ≥ 2, then for every adversary A and for
every L > 0 and 0  0). Plugging this into Eq. (3) we have
(cid:7)−L(B−1)
(cid:6)
Pr[Game2(A, X, L, B, C) = 1]
X
.
X L(B−1)
Now, using the assumption that X L ≥ (X · L)2, which
implies X L(B−1) ≥ (X · L)2(B−1) ≥ (X · L)B when B ≥ 2
(which is indeed the minimal size of a bucket as assumed
in the theorem), we obtain that
Pr[Game2(A, X, L, B, C) = 1]
≤
(L · X)B
(L · (X − C))B =
(cid:6)
X − C
X L(B−1)
1
N B
≤
X
1
=
=
1
1
1
1
=
.
−σ
We have the following corollary:
Corollary 3.8: Let L, X, C and B be such that σ ≤ B log N
where B ≥ 2, L  0, X L ≥ (X · L)2 and
N = (X − C)L. Then for every adversary A, it holds that
Pr[Game2(A, X, L, B, C) = 1] ≤ 2
Concrete parameters and a tradeoff. As we have described
above, this shows that setting C = 1, B = 2 and X, L such
that N = (X − C)L = 220 yields a security bound of 2
−40 as
desired. Thus, we can reduce the size of each bucket by 1, and
can use only 2 arrays in the triple generation phase (shufﬂing
just one of them), at the expense of an additional shufﬂe in
the online phase.
Clearly, in some cases one would not settle on any increase
of the online work. Nevertheless, our analysis gives a clear
trade-off of the ofﬂine communication complexity vs.
the
online computational complexity.
The latency vs throughput
tradeoff. By reducing the
number of triples sent and by reducing the communication,
the protocol improvement here should considerably improve
851
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:59 UTC from IEEE Xplore.  Restrictions apply. 
throughput. However, it is important to note that the fact that
the online shufﬂe is not cache efﬁcient means that the through-
put increase is not optimal. In addition, it also means that the
online time is considerably increased. Thus, when the secure
computation is used in an application where low latency is
needed, then this improvement may not be suitable. However,
when the focus is on high throughput secure computation, this
is of importance.
Practical limitations. Although theoretically attractive, in
most practical settings, the implementation of this protocol
improvement is actually very problematic. Speciﬁcally, if a
circuit computation involving N AND gates is used for a large
N, then the improvement is suitable. However, in many (if not
most) cases, circuits of smaller sizes are used and a large N
is desired in order to achieve good parameters. For example,
220 triples sufﬁce for approximately 180 AES computation. In
such a case, this protocol variant cannot be used. In particular,
either the application has to wait for all AES computations to
complete before beginning veriﬁcation of the ﬁrst (recall that
the shufﬂe must take place after the circuit computation) or a
full shufﬂe of what is left of the large array must be carried
out after each computation. The former solution is completely
unreasonable for most applications and the latter solution will
result in a very signiﬁcant performance penalty. We address
this issue in the next section.
C. Smaller Buckets With On-Demand Secure Computation
In this section, we address the problem described at the
end of Section III-B. Speciﬁcally, we describe a protocol
variant that has smaller buckets as in Section III-B, but enables
the utilization of multiplication triples on demand without
reshufﬂing large arrays multiple times. Thus, this protocol
variant is suitable for settings where many triples are generated
and then used on-demand as requests for secure computations
are received by an application.
The protocol variant that we present here, described in
Protocol 3.9, works in the following way. First, we generate
2 arrays (cid:2)d1, (cid:2)d2 of N multiplication triples each, using Proto-
col 3.1 (and using a smaller B as in Section III-B). Then, in
order to verify a multiplication gate, a random triple is chosen
from (cid:2)d1 and replaced with the next unused triple in (cid:2)d2. After N
multiplication gates have been processed, the triples in (cid:2)d2 will
be all used and Protocol 3.1 will be called again to replenish
it. Note that (cid:2)d1 always contains N triples, as any used triple
is immediately replaced using (cid:2)d2.
As before, we need to show that
this way of working
achieves the same level of security as when a full shufﬂe is
run on the array. Formally, we will show that for N triples and
buckets of size B, the probability that the adversary succeeds
in cheating is bounded by 1
N B , just as in Section III-B. Note
that Protocol 3.9 as described is actually continuous and does
not halt. Nevertheless, for simplicity, we start by presenting
the bound for the case of computing N gates, and then use it
for computing the bound in the continuous analysis.
In order to prove the bound, we begin by deﬁning the com-
binatorial game Game3(A, X, L, B, C) which is equivalent to
the process described in Protocol 3.9 When computing N
gates.
PROTOCOL 3.9 (On-Demand with Smaller Buckets):
• Inputs and Auxiliary Input: Same as in Protocol A.2.
• The protocol – triple initialization:
1) The parties run Protocol 3.1 twice with input N and obtain
two vectors (cid:2)d1, (cid:2)d2 of sharings of random multiplication
triples.
• The protocol – circuit computation: Upon receiving a request
to compute a circuit:
1) Sharing the inputs: Same as in Protocol A.2.
2) Circuit emulation: Same as in Protocol A.2.
3) Veriﬁcation stage: Before the secrets on the output wires are
reconstructed, the parties verify that all the multiplications
were carried out correctly, as follows. For k = 1, . . . , N:
a) Denote by ([x], [y]) the shares of the input wires to the
kth AND gate, and denote by [z] the shares of the output
wire of the kth AND gate.
b) The parties run a secure coin-tossing protocol in order
to generate a random j ∈ [N ]. (In [11], it is shown
that secure coin-tossing can be non-interactively and
efﬁciently computed in this setting.)
triple
check the
([x], [y], [z]) using
c) The parties
d) If a party rejects any of the checks, it sends ⊥ to the
e) Each party replaces its shares of ([aj], [bj], [cj]) in (cid:2)d1
([aj], [bj], [cj]) (the jth triple in (cid:2)d1).
other parties and outputs ⊥.
with the next unused triple in (cid:2)d2.
4) Output reconstruction and output: Same as in Protocol A.2.
• Replenish: If (cid:2)d2 is empty (or close to empty) then the parties
1, . . . , B(cid:2)
N .
4) For i = 1 to N:
to the next step. Otherwise, output 0.
run Protocol 3.1 with input N to obtain a new (cid:2)d2.
Game3(A, X, L, B, C):
two lists of buckets B1, . . . , BN and B(cid:2)
1) Run steps 1-3 of Game1(A, X, L, B, C) twice to receive
2) If all buckets are either fully good or fully bad proceed
3) The adversary A prepares N new balls denoted by
b1, . . . , bN , where each ball can be either bad or good, with
the requirement that at least one of the balls must be bad.
a) The ball bi is thrown into a random bucket Bk (k ∈ [N ]).
b) If the bucket Bk is fully bad output 1.
c) If the bucket Bk is not fully good or fully bad output 0.
d) Replace Bk with the bucket B(cid:2)
i.
Observe that in this game, the adversary is forced to choose
a bad ball only when it prepares the N additional balls. This
means that in order for it to win, there must be at least one bad
bucket among B1, . . . , BN . For this to happen, the adversary
must win in at least one of Game1 executions. Thus, in the
proof of the following theorem, we will use the bound stating
that the probability that the adversary wins in Game1 is at
most 1/N B−1. In addition, note that from the condition in the
last step, the adversary wins if and only if the ﬁrst bad ball
is thrown into a fully bad bucket (even if a bad ball is later
thrown into a fully good bucket meaning that the adversary
will be detected). This is in contrast to previous games where
the adversary only wins if all bad balls are thrown into fully
bad buckets. This is due to the fact that output may be provided
after only using some of the triples. If one of the triples was
bad, then this will be a breach of security, and the fact that
the adversary is caught later does not help (in the sense that