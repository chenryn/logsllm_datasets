title:Kerberoid: A Practical Android App Decompilation System with Multiple
Decompilers
author:Heejun Jang and
Beomjin Jin and
Sangwon Hyun and
Hyoungshick Kim
0
2
0
2
y
a
M
1
2
]
E
S
.
s
c
[
1
v
5
1
3
1
1
.
5
0
0
2
:
v
i
X
r
a
Java Decompiler Diversity and its Application to Meta-decompilation
Nicolas Harrandࢩ, César Soto-Valero, Martin Monperrus and Benoit Baudry
KTH Royal Institute of Technology, SE-100 44 Stockholm, Sweden
ARTICLE INFO
Keywords:
Java bytecode
decompilation
reverse engineering
source code analysis
ABSTRACT
During compilation from Java source code to bytecode, some information is irreversibly lost. In other
words, compilation and decompilation of Java code is not symmetric. Consequently, decompilation,
whichaimsatproducingsourcecodefrombytecode, reliesonstrategiestoreconstructtheinformation
that has been lost. Diﬀerent Java decompilers use distinct strategies to achieve proper decompilation.
In this work, we hypothesize that the diverse ways in which bytecode can be decompiled has a direct
impact on the quality of the source code produced by decompilers.
Inthispaper, weassessthestrategiesofeightJavadecompilerswithrespecttothreequalityindica-
tors: syntactic correctness, syntactic distortion and semantic equivalence modulo inputs. Our results
show that no single modern decompiler is able to correctly handle the variety of bytecode structures
coming from real-world programs. The highest ranking decompiler in this study produces syntacti-
cally correct, and semantically equivalent code output for 84%, respectively 78%, of the classes in our
dataset. Our results demonstrate that each decompiler correctly handles a diﬀerent set of bytecode
classes.
We propose a new decompiler called Arlecchino that leverages the diversity of existing decompil-
ers. To do so, we merge partial decompilation into a new one based on compilation errors. Arlecchino
handles 37.6% of bytecode classes that were previously handled by no decompiler. We publish the
sources of this new bytecode decompiler.
1. Introduction
In the Java programming language, source code is com-
piled into an intermediate stack-based representation known
as bytecode, which is interpreted by the Java Virtual Ma-
chine (JVM). In the process of translating source code to
bytecode, the compiler performs various analyses. Even if
mostoptimizationsaretypicallyperformedatruntimebythe
just-in-time (JIT) compiler, several pieces of information re-
siding in the original source code are already not present in
thebytecodeanymoreduetocompileroptimization[28,27].
For example the structure of loops is altered and local vari-
able names may be modiﬁed [17].
Decompilation is the inverse process, it consists in trans-
formingthebytecodeinstructionsintosourcecode[31]. De-
compilation can be done with several goals in mind. First,
it can be used to help developers understand the code of the
libraries they use. This is why Java IDEs such as IntelliJ
and Eclipse include built-in decompilers to help developers
analyze the third-party classes for which the source code is
not available. In this case, the readability of the decompiled
code is paramount. Second, decompilation may be a pre-
liminary step before another compilation pass, for example
with a diﬀerent compiler. In this case, the main goal is that
the decompiled code is syntactically correct and can be re-
compiled. Some other applications of decompilation with
slightly diﬀerent criteria include clone detection [34], mal-
ware analysis [46, 7] and software archaeology [35].
ࢩCorresponding author
PI:EMAIL (N. Harrand); PI:EMAIL (C.
Soto-Valero); PI:EMAIL (M. Monperrus);
PI:EMAIL (B. Baudry)
0000-0003-0541-6411 (C. Soto-Valero); 0000-0003-3505-3383 (M.
Monperrus); 0000-0002-4015-4640 (B. Baudry)
ORCID(s): 0000-0002-2491-2771 (N. Harrand);
Harrand et al.: Preprint submitted to Elsevier
Overall, the ideal decompiler is one that transforms all
inputs into source code that faithfully reﬂects the original
code: the decompiled code 1) can be recompiled with a Java
compiler and 2) behaves the same as the original program.
However, previous studies that compared Java decompilers
[15, 23] found that this ideal Java decompiler does not ex-
ist, because of the irreversible data loss that happens dur-
ing compilation. In this paper, we perform a comprehensive
assessment of three aspects of decompilation: the syntactic
correctness of the decompiled code (the decompiled code
can recompile); the semantic equivalence with the original
source (the decompiled code passes all tests); the syntac-
tic similarity to the original source (the decompiled source
looksliketheoriginal). Weevaluateeightrecentandnotable
decompilers on 2041 Java classes, making this study one or-
der of magnitude larger than the related work [15, 23].
Next,weisolateasubsetof 157Javaclassesthatnostate-
of-the-art decompiler can correctly handle. The presence
of generics and wildcards is a major challenge that prevents
successfuldecompilation. Meanwhile, wenotethatdiﬀerent
decompilers fail for diverse reasons. This raises the oppor-
tunity to merge the results of several incorrect decompiled
sources to produce a version that can be recompiled. We call
this process meta-decompilation. Meta-decompilation is a
novel approach for decompilation: 1) it leverages the natu-
ral diversity of existing decompilers by merging the results
of diﬀerent decompilers 2) it is able to provide decompiled
sources for classes that no decompiler in isolation can han-
dle. Weimplementthisapproachinanovelmeta-decompiler
called Arlecchino.
Our results have important implications: 1) for all users
ofdecompilation,ourpapershowssigniﬁcantdiﬀerencesbe-
tween decompilers and provide well-founded empirical evi-
dence to choose the best ones; 2) for researchers in decom-
Page 1 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
pilation, our results show that the problem is not solved;
3) for authors of decompilers, our experiments have iden-
tiﬁed bugs in their decompilers (3 have already been ﬁxed,
andcounting)andourmethodologyofsemanticequivalence
modulo inputs can be embedded in the QA process of all de-
compilers in the world.
In summary, this paper makes the following contribu-
tions:
• anempiricalcomparisonofeightJavadecompilersba-
sed on 2041 real-world Java classes, tested by 25019
testcases,identifyingthekeystrengthsandlimitations
of Java bytecode decompilation;
• meta-decompilation, a novel approach to decompila-
tion that leverages decompilers diversity to improve
decompilation eﬀectiveness;
• a tool and a dataset for future research on Java decom-
pilers publicly available at https://github.com/
castor-software/decompilercmp
as well as
the diﬀerent
2. Background
In this section, we present an example drawn from
the Apache commons-codec library. We wish to illus-
trate information loss during compilation of Java source
strategies
code,
that byte-
code decompilers adopt
to cope with this loss when
they generate source code from bytecode.
Listing 1
shows the original source code of
the utility class
org.apache.commons.codec.net.Utils, while List-
ing 2 shows an excerpt of the bytecode produced by the stan-
dard javac compiler.1 Here, we omit the constant pool as
well as the table of local variables and replace references to-
wards these tables with comments to save space and make
the bytecode more human readable.
As mentioned, the key challenge of decompilation re-
sides in the many ways in which information is lost dur-
ing compilation. Consequently, Java decompilers need to
make several assumptions when interpreting bytecode in-
structions, which can also be generated in diﬀerent ways.
To illustrate this phenomenon, Listing 3 and Listing 4 show
the Java sources produced by the Fernﬂower and Dava de-
compilers when interpreting the bytecode of Listing 2. In
both cases, the decompilation produces correct Java code
(i.e., recompilable) with the same functionality as the in-
put bytecode. Notice that Fernﬂower guesses that the series
of StringBuilder (bytecode instruction 23 to 27) calls is
the compiler’s way of translating string concatenation and is
able to revert it. On the contrary, the Dava decompiler does
not reverse this transformation.
the decompiled sources are diﬀerent
from the original in at least three points: 1) In the orig-
inal sources, the local variable  was final, but javac
1There are various Java compilers available, notably Oracle javac and
Eclipse ecj, which can produce diﬀerent bytecode for the same Java input.
As we notice,
1 class Utils {
2
3
private static final int RADIX = 16;
static int digit16(final byte b) throws
DecoderException {
final int i = Character.digit((char) b, RADIX);
if (i == -1) {
throw new DecoderException("Invalid URL
encoding: not a valid digit (radix " +
RADIX + "): " + b);
}
return i;
4
5
6
7
8
9
}
10 }Listing 1: Source code of Java class correspondig to
org.apache.commons.codec.net.Utils.
1 class org.apache.commons.codec.net.Utils {
2
static int digit16(byte) throws
org.apache.commons.codec.DecoderException;
0: ILOAD_0 //Parameter byte b
1: I2C
2: BIPUSH 16
4: INVOKESTATIC #19 //Character.digit:(CI)I
7: ISTORE_1 //Variable int i
8: ILOAD_1
9: ICONST_m1
10: IF_ICMPNE 37
3
4
5
6
7
8
9
10
11 //org/apache/commons/codec/DecoderException
12
13
14
15
16 //"Invalid URL encoding: not a valid digit (radix
13: NEW #17
16: DUP
17: NEW #25 //java/lang/StringBuilder
20: DUP
16):"
21: LDC #27
27: INVOKEVIRTUAL #32
23: INVOKESPECIAL #29
26: ILOAD_0
17
18 //StringBuilder."":(Ljava/lang/String;)V
19
20
21 //StringBuilder.append:(I)Ljava/lang/StringBuilder;
22
23 //StringBuilder.toString:()Ljava/lang/String;
24
25 //DecoderException."":(Ljava/lang/String;)V
26
27
28
29
33: INVOKESPECIAL #40
36: ATHROW
37: ILOAD_1
38: IRETURN
30: INVOKEVIRTUAL #36
30 }Listing 2: Excerpt of disassembled bytecode from code in
Listing 1.
lost this information during compilation. 2) The if state-
ment had originally no else clause. Indeed, when an ex-
ception is thrown in a method that does not catch it, the
execution of the method is interrupted. Therefore, leav-
ing the return statement outside of the if is equiva-
lent to putting it inside an else clause. 3) In the orig-
inal code the String "Invalid URL encoding: not
" was actually com-
puted with "Invalid URL encoding:
not a valid
In
this case, URLCodec.RADIX is actually a ﬁnal static ﬁeld
that always contains the value 16 and cannot be changed.
Thus, it is safe for the compiler to perform this optimization,
but the information is lost in the bytecode.
digit (radix " + URLCodec.RADIX + "):
a valid digit (radix 16):
".
Harrand et al.: Preprint submitted to Elsevier
Page 2 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
1 class Utils {
2
3
private static final int RADIX = 16;
static int digit16(byte b) throws DecoderException
{
int i = Character.digit((char)b, 16);
if(i == -1) {
throw new DecoderException("Invalid URL
encoding: not a valid digit (radix 16):
" + b);
} else {
return i;
}
decompiled results. This metric, called syntactic distortion,
allows to measure the diﬀerences that go beyond variable
names. The description of the metric is as follows:
Deﬁnition 2. Syntactic distortion. The minimum number
of atomic edits required to transform the AST of the original
source code of a program into the AST of the corresponding
decompiled version of it.
In the general case, determining if two program are se-
mantically equivalent is undecidable. For some cases, the
decompiled sources can be recompiled into bytecode that is
equivalent to the original, modulo reordering of the constant
pool. We call these cases strictly equivalent programs. We
measure this equivalence with a bytecode comparison tool
named Jardiﬀ.2
Inspired by the work of [25] and [47], we check if the de-
compiled and recompiled program are semantically equiva-
lent modulo inputs. This means that for a given set of inputs,
the two programs produce equivalent outputs. In our case,
we select the set of relevant inputs and assess equivalence
based on the existing test suite of the original program.
Deﬁnition 3. Semantic equivalence modulo inputs. We
call a decompiled program semantically equivalent modulo
inputs to the original if it passes the set of tests from the orig-
inal test suite.
In the case where the decompiled and recompiled pro-
gramproducenon-equivalentoutputs,thatdemonstratesthat
the sources generated by the decompiler express a diﬀer-
ent behavior than the original. As explained by Hamilton
and colleagues [15], this is particularly problematic as it can
mislead decompiler users in their attempt to understand the
original behavior of the program. We refer to theses cases
as deceptive decompilation results.
Deﬁnition 4. Deceptive decompilation: Decompiler output
that is syntactically correct but not semantically equivalent
to the original input.
3.2. Research Questions
on the characteristics of modern Java decompilers.
RQ1: To what extent is decompiled Java code syn-
tactically correct? In this research question, we investigate
the eﬀectiveness of decompilers for producing syntactically
correct and hence recompilable source code from bytecode
produced by the javac and ecj compilers.
RQ2: To what extent is decompiled Java code seman-
tically equivalent modulo inputs? Le and colleagues [25]
propose to use equivalence modulo inputs assessment as a
way to test transformations that are meant to be semantic
preserving (in particular compilation). In this research ques-
tion, we adapt this concept in the context of decompilation
testing. Inthispaperwerelyontheexistingtestsuiteinstead
of generating inputs.
We elaborated ﬁve research questions to guide our study
2
https://github.com/scala/jardiff
4
5
6
7