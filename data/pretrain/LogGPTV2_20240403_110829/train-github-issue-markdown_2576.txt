For me, a increasingly common issue is that I have duplicate translation
files. Let me explain with a use case:
Given an entity named 'Article', say you want users to create articles on your
website. To make that happen you create a form, and for convenience you set up
a convention notation for each of the entity's fields:
    # forms.en.yml
    article:
      fields:
        title: Title
        summary: Summary
        body: Article text
        datetime_published: Publish at
And the user sees nicely labeled fields at the form.
Now imagine a CMS for this website, where you want to list the articles. The
column names could be the same as above, but since the context is different,
you'll want some translations to be different, like this:
    # cms.en.yml
    article:
      fields:
        title: Title
        summary: Summary
        body: Body
        datetime_published: Publication date
As your website gets larger and/or the number of entities grow, so do the
duplicate translations. There are more use cases to think of where you'd want
some sort of inheritance. Something that would work like this:
    # domain.en.yml
    article:
      fields:
        title: Title
        summary: Summary
        body: Body
        datetime_published: Publication date
    # forms.en.yml
    imports:
      - { resource: %kernel.root_dir%/../src/Acme/DemoBundle/Resources/translations/domain.en.yml }
    article:
      fields:
        body: Article text
        datetime_published: Publish at
    # cms.en.yml
    imports:
      - { resource: %kernel.root_dir%/../src/Acme/DemoBundle/Resources/translations/domain.en.yml }
I have a working proof of concept in a project that's currently running in
production. Basically I've extended the regular translation file loader with
one that looks for imports in translations, and merges them with the rest of
the translation file.
I'm curious if this is something that more people want. Comments and feedback
are welcome.