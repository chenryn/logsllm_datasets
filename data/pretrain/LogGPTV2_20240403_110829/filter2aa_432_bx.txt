VLINK=”#000080”
ALINK=”#FF0000”
 >
It Worked!
- 300 -
Linux网络编程
If you can see this, it means that the installation of the
Apache
software on this Red Hat Linux system was
successful. You may now add content to
this directory and replace this page.
If you are seeing this instead of the content you expected, please
contact the administrator of the site involved.  If
you send mail about this to the authors of the Apache software or Red
Hat Software, who almost
certainly have nothing to do with this site, your message will be
ignored.
The Apache
documentation
has been included with this distribution. For documentation
and information on Red Hat
Linux, please visit the web site of Red
Hat Software. The manual for Red Hat Linux is available here.
You are free to use the image below on an Apache-powered web
server.  Thanks for using Apache!
You are free to use the image below on a Red Hat Linux-powered web
server. Thanks for using Red Hat Linux!
第 14 章  www 上 http 协议
- 301 -
root@bbs#_
好了，我们现在已经可以取得一台服务器的首页了。如果你有兴趣，可以对 HTML 超
文本进行分析，然后在屏幕上像 Netscape 或 Internet Expoler 那样画出页面来。
14.4  小结
在这章中，我们简单的介绍了 Web 的发展，Web 浏览器和服务器的行为，以及 HTTP
协议。最后我们自己写了一个可以取得服务器首页的小程序，来模拟 Web 浏览器的简单行
为。
- 302 -
Linux网络编程
附录 A  有关网络通信的服务和网络库函数
accept 系统调用
用法：
retcode = accept ( socket, addr, addrlen ) ;
说明：
服务器调用 socket 创建一个套接字，用 bind 指定一个本地 IP 地址和协议端口号，然
后用 listen 使套接字处于被动状态，并设置连接请求队列的长度。accept 从队列中取走下一
个连接请求（或一直在那里等待下一个连接请求的到达），为请求创建一个新套接字，并返
回新的套接字描述符。 accept 只用于流套接字（如 TCP 套接字）。
参数：
socket 类型为 int，，含义是是由 socket 函数创建的一个套接字描述符。
addr 类型为&sockaddr，含义是一个地址结构的指针。accept 在该结构中填入远程
机器的 IP 号和协议端口号。
addrlen 类型为&int 含义是一个整数指针，初始指定为 sockaddr 参数的大小，当调
用返回十，指定为存储在 addr 中的字节数。
返回码：
accept 成功时返回一个非负套接字描述符。发生错误的时候返回 –1。
当发生错误时，全局变量 errno 含有如下值之一：
EBADF  错误原因是第一个参数未指定合法的描述符。
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
EOPNOTSUPP  错误原因是套接字类型不是 SOCK_STREAM。
EFAULT  错误原因是第二个参数中的指针非法
EWOULDBLOCK  错误原因是套接字被标记为非阻塞的，且没有正等待连接的
联入请求。
bind 系统调用
用法:
retcode = bind ( socket, localaddr, addrlen ) ;
说明：
bind 为一个套接字指明一个本地 IP 和协议端口号。 bind 主要由服务器使用，它需要
指定一个知名协议口。
参数：
socket 类型为 int，含义是由 socket 调用创建一个套接字描述符
localaddr 类型为&sockaddr，含义是一个地址结构，指定一个 IP 地址和协议端口
附录 A  有关网络通信的服务和网络库函数
- 303 -
号
addrlen 类型为 int，含义是地址结构的字节数大小。
返回码：
bind 若成功则返回 0 ，返回 –1 表示发生了错误。当错误发生时，全局变量 errno 含
有下面的错误代码：
EBADF  错误原因是第一个参数未指定合法的描述符。
ENOTSOCK  错误原因是第一个参数未指定一个套接字描述符
EADDRNOTAVAIL  错误原因是指明的地址不可用（比如一个 IP 地址与本地接
口不匹配）
EADDRINUSE  错误原因是指明的地址正在使用（如另外一个进程已经分配了协
议端口）
EINVAL  错误原因是套接字已经帮定到一个地址上
EACCES  错误原因是不允许应用程序指明的地址
EFAULT  错误原因是参数 localaddr 中的指针非法
close 系统调用
用法：
retcode = close ( socket ) ;
说明：
应用程序使用完一个套接字后调用 close 。close 文明的中止通信，并删除套接字。任
何正在套接字上等待被读取的数据都将被丢弃。
实际上，Linux 实现了引用计数器制，它允许多个进程共享一个套接字。如果 n 个进
程共享一个套接字，引用计数器将为 n 。close 每被一个进程调用一次，就将引用计数器减
1。一旦引用计数器减到 0 ，套接字将被释放。
参数：
socket 类型为 int，含义是将被关闭的套接字描述符
返回值：
close 若成果就返回 0 ，如果返回 –1 则代表有错误 fasheng.dang 错误发生时，全局变
量 errno 将含有以下值：
EBADF  错误原因是参数 socket 未指定一个合法的描述符
connect 系统调用
用法：
retcode = connect ( socket, addr, addrlen ) ;
说明：
connect 允许调用者为先前创建的套接字指明远程端点的地址。如果套接字使用了
TCP ，connect 就使用三方握手建立一个连接；如果套接字使用 UDP ，connect 仅指明远
程端点，但不向它传送任何数据报。
- 304 -
Linux网络编程
参数：
socket 类型为 int，含义是一个套接字的描述符
addr 类型为&sockaddr_in，含义是远程机器端点地址
addrlen 类型为 int，含义是第二个参数的长度
返回值：
connect 若成功就返回 0 ，返回 –1 代表发生了错误。当错误发生时，全局变量 errno
含有下面的值：
EBADF  错误原因是参数 socket 未指定一个合法的描述符
ENOTSOCK  错误原因是参数 socket 未指定一个套接字描述符
EAFNOSUPPORT  错误原因是远程端点指定的地址族不能与这种类型的套接字
一起使用
EADDRNOTAVAIL  错误原因是指定的地址不可用
EISCONN  错误原因是套接字已被连接
ETIMEDOUT  错误原因是（只用于 TCP）协议因未成功建立一个连接而超时
ECONNREFUSED  错误原因是（只用于 TCP）连接被远程机器拒绝
ENETUNREACH  错误原因是（只用于 TCP）网络当前不可到达
EADDRINUSE  错误原因是指定的地址正在使用
EINPROGRESS  错误原因是（只用于 TCP）套接字是非阻塞的，且一个连接尝
试将北阻塞
EALREADY  错误原因是（只用于 TCP）套接字是非阻塞的，且调用将等待前一
个连接尝试完成
fork 系统调用
用法：
retcode = fork () ;
说明：
虽然 fork 并不于套接字通信直接相关，但是由于服务器使用它创建并发的进程，因此
它很重要。 fork 创建一个新进程，执行与原进程相同的代码。两个进程共享在调用 fork 时
已打开的所有套接字和文件描述符。两个进程有不同的进程标识符和不同的父进程标识符。
参数：
没有任何参数
返回值：
如果成功，fork 给子进程返回 0 ，给父进程返回子进程的进程标识符（非零）。如果
发生了错误，它将返回 –1 。全局变量可能是下面的值：
EAGAIN  错误原因是已经达到了系统限制的进程总数，或已经达到了对每个用
户的进程限制。
ENOMEM  错误原因是系统没有足够的内存用于新进程。
gethostbyaddr 库函数
附录 A  有关网络通信的服务和网络库函数
- 305 -
用法：
retcode = gethostbyaddr ( addr, len, type ) ;
说明：
gethostbyaddr 搜索关于某个给定 IP 地址的主机信息。
参数：
addr 类型为&char，含义是指向一个数组的指针，该数组含有一个主机地址（如 IP
地址）
len 类型为 int，含义是一个整数，它给出地址长度（IP 地址长度是 4）
type 类型为 int，含义是一个整数，它给出地址类型（IP 地址类型为 AF_INET）
返回值：
gethostbyaddr 如果成功，返回一个 hostent 结构的指针。如果发生错误，返回 0 。
hostent 结构声明如下：
struct hostent
{
/* 一个主机项 */
char h_name ;
/* 正式主机名 */
char h_aliases[] ;
/* 其它别名列表 */
int
h_addrtype ;
/* 主机地址类型 */
int
h_length ;
/* 主机地址长度 */
char **h_addr_list
/* 主机地址列表 */.
} ;
当发生错误时，全局变量 h_errno 中含有下列值之一：
HOST_NOT_FOUND  错误原因是不知道所指定的名字
TRY_AGAIN  错误原因是暂时错误：本地服务器现在不能于授权机构联系
NO_RECOVERY  错误原因是发生了无法恢复的错误。
NO_ADDRESS  错误原因是指明的名字有效，但是它无法于某个 IP 地址对应
gethostbyname 库调用
用法：
retcode = gethostbyname ( name ) ;
说明：
gethostbyname 将一个主机名映射为一个 IP 地址。
参数：
name 类型为&char，含义是一个含有主机名字符串的地址
返回值：
gethostbyname 如果成功就返回一个 hostent 结构的指针，如发生错误则返回 0 。hostent
结构声明为：
struct hostent
{
/* 一个主机项 */
- 306 -
Linux网络编程
char h_name ;
/* 正式主机名 */
char h_aliases[] ;
/* 其它别名列表 */
int
h_addrtype ;
/* 主机地址类型 */
int
h_length ;
/* 主机地址长度 */
char **h_addr_list
/* 主机地址列表 */.
} ;
当发生错误时，全局变量 h_errno 含有下列值之一：
HOST_NOT_FOUND  错误原因是不知道所指定的名字
TRY_AGAIN  错误原因是暂时错误：本地服务器
NO_RECOVERY  错误原因是发生了无法恢复的错误。
NO_ADDRESS  错误原因是指明的名字有效，但是它无法于某个 IP 地址对应
gethostid 系统调用
用法：
hostid = gethostid () ;
说明：
应用程序调用 gethostid 以获取指派给本地机器的唯一的 32 位的主机标识符。通常，
主机标识符是机器的主 IP 地址。