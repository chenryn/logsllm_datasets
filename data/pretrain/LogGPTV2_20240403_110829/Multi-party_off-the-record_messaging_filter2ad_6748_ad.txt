Outstanding ← Outstanding \ { ˆY };
Deniable Signature Key Exchange is an n-party interac-
tive protocol operating over common inputs: sid — a fresh
session identiﬁer, and P — the set of participants for the ses-
sion identiﬁed by sid. When the protocol concludes, each
participant outputs a termination condition (either accept
or reject) and a set R relating the members of P to public
signature keys (e.g. R = {(E ˆA, ˆA), (E ˆB, ˆB), . . .}).
Two-party signature key exchange.
The goal of two party signature exchange (Algorithm 4)
is to allow Alice and Bob to exchange signing key pairs
(E ˆA, e ˆA) and (E ˆB, e ˆB), respectively, such that: (i) Alice is
assured that Bob knows e ˆB corresponding to E ˆB; (ii) Alice is
assured that Bob, if honest, will not associate E (cid:54)= E ˆA with
Alice; and (iii) Alice is assured that after completing the ex-
change Bob cannot prove to a third party Charlie (without
Alice’s consent) that Alice has associated herself with E ˆA
and knows e ˆA. The same conditions must hold for Bob with
respect to Alice.
(E ˆA, e ˆA)
Algorithm 4: AuthU ser(sid, ˆB, E ˆA, e ˆA) — obtain and
associate ˆB with a signing key pair, and send ˆB one’s
own signing key E ˆA.
Input: session id sid, peer identity ˆB, signature pair
Output: associate ˆB with E ˆB or ⊥
k, km ← denAKE( ˆA, ˆB);
Send( ˆB, SymM acEnckm
(E ˆB, sid(cid:48), ˆB(cid:48), ˆA(cid:48)) ← SymDeckm
Send( ˆB, SymEnckm
m ← SymDeckm
if (sid(cid:48) = sid) ∧ ( ˆA(cid:48) = ˆA) ∧ ( ˆB(cid:48) = ˆB)
k (Receive( ˆB));
(E ˆB, sid, ˆA, ˆB));
k (E ˆA, sid, ˆA, ˆB));
k (Signe ˆA
k (Receive( ˆB));
∧V erif y(m, E ˆB, (E ˆA, sid(cid:48), ˆB, ˆA)) == 1 then
return ˆB, E ˆB;
return ⊥;
else
The signature exchange proceeds as follows: ﬁrst Alice
and Bob run a deniable two-party key agreement protocol
denAKE( ˆA, ˆB) to derive a shared secret. Using symmetric
key techniques they exchange signature keys that they in-
364tend to use in the subsequent chatroom. Finally, both users
sign the ephemeral public key of their peer along with both
Alice’s and Bob’s identities under their ephemeral keys for
the current session.
Assume that denAKE() is a secure, deniable authenti-
cated key agreement protocol. Let SymM acEnckm
k () be an
algorithm that encrypts and authenticates messages with the
symmetric keys k and km, and let Sign() be an existentially
unforgeable signature scheme. The protocol denAKE() pro-
vides keying material only to Bob and Alice. Hence, they
are assured about each other’s identity. Since Bob signs
Alice’s ephemeral public signature key she is assured that
the signature that Bob generated is not a replay from other
sessions and that Bob knows the corresponding ephemeral
private key. Bob is assured that E ˆA is connected with Alice
because he did not generate E ˆA and his peer has to know
k and km to complete the protocol. Since denAKE() is
secure, the only party other than Bob that could have com-
puted k and km is Alice. Likewise, Alice is assured that an
honest Bob will not associate E (cid:54)= E ˆA with her because Bob
will only associate an ephemeral key with Alice if Bob re-
ceived it through a secure channel that only Bob and Alice
share. The only proof that Bob has about communicating
with Alice is the denAKE() transcript. Since denAKE() is
deniable Alice can argue that any transcript between her-
self and Bob was created without her contribution; in other
words, Bob’s view cannot associate Alice to E ˆA unless Alice
admits the association. Thus Algorithm 4 achieves the three
conditions that we described.
We conclude by saying that that E ˆA and E ˆB are “pseudo-
nyms” that Alice and Bob exchange. As long as the cor-
responding private keys are not leaked each one of them is
assured about the identity behind the pseudonym and mes-
sages signed with the keys, but cannot prove to a third party
the relation between the pseudonym and a real entity. Fur-
thermore, any party Mallory can create a fake pseudonym
for Alice or Bob.
Multi-party signature key exchange.
We extend the two-party algorithm to the multi-party set-
ting. In particular, given a set of participants P, every pair
of users in P runs Algorithm 4. For a given identiﬁer sid,
Alice uses the same key pair (E ˆA, e ˆA).
The next stage is for participants to assure each other
of the consistency of the association table that they build.
Let (E ˆA, ˆA), . . . , (E ˆX , ˆX), be the association table built by
Alice, lexicographically ordered on the signing keys. Each
user computes a hash of that table, signs the hash with her
ephemeral signing key and sends it to the rest of the par-
ticipants9. As a result each participant is assured that the
remaining members have the same view about the associa-
tion table. Note that the exchange does not reveal anything
about the table. The set of participants can collaborate to
introduce “non-existent” users into the chatroom. In other
words, if agreed, a set of users can create a transcript that
allegedly involves an absent user Alice. Such a transcript
can be indistinguishable from a transcript where Alice did
take part.
9This can be incorporated into Attest()
Deniable AKE.
By a “secure” key agreement protocol we mean the stan-
dard indistinguishable from random key notion introduced
by Bellare and Rogaway [3]. However, we are concerned
with malicious insiders so protocols that meet models as in-
troduced in [17] are more suitable for our needs, since they
allow the adversary to adaptively introduce malicious par-
ties to the system.
In contrast to secure key exchange, “deniable” key ex-
change has not been as widely studied. On one hand there
is a formal deﬁnition, presented in [11, Deﬁnition 1], that
relies on the fact that a receiver’s view can be simulated.
The authors prove the deniability of SKEME [13] according
to their deﬁnition. However, there are some pitfalls related
to leaking static secrets and the deniability of SKEME. If
the judge J has access to the static secrets of the alleged
participants, J can distinguish between authentic and sim-
ulated transcripts. Therefore, SKEME does not meet our
privacy requirement (§3.2.3).
On the other hand, Diﬃe-Hellman variants like MQV [14]
provide plausible deniability as outlined in [7]. The shared
key is derived only from public values, so a peer can plau-
sibly argue that he did not take part in the key agreement.
Additionally, implicitly authenticated protocols that meet
the security deﬁnition of [17] appear to meet our privacy
notion. This allows any such protocol to be used in settings
where the participants may expose their long-lived secrets
without sacriﬁcing deniability.
As suggested in [7], one can achieve improved deniability
via self-signed certiﬁcates that users authenticate. At the
extreme it is possible for users not to have any static secrets
but to authenticate each other via out-of-band means for
every session. While such a solution is possible, its usability
is questionable. We accept that users cannot convincingly
deny their static secrets in order to achieve a less compli-
cated protocol. The users can still deny taking part in any
ﬁxed chatroom and the content of messages that they sent.
4.2.2 Group Key Agreement
Assuming that users successfully run the signature ex-
change protocol, they can proceed to establish group keys.
Given sid and an association table from sid users run a typ-
ical key group key agreement protocol to derive a shared se-
cret key gk to ensure that they have a means for conﬁdential
communication. Note that when the group key agreement is
based on the session-speciﬁc signature keys, Alice can deny
knowing gk by arguing that she took no part in the protocol
— recall there is no proof of her relation with E ˆA.
4.2.3 Properties
Alice can plausibly argue that she did not take part in
a chat because it is possible to create a protocol transcript
that includes users who did not actually take part in the
chat. This can happen if all participants collaborate to in-
troduce such non-existent users.
In the limit, this allows
a single party to create a transcript involving any number
of other non-cooperating parties. With an appropriate deni-
able signature key exchange, the forging party need not even
be a member of P. The issue of modifying existing messages
in a transcript will be addressed in the shutdown phase.
3654.3 Communication phase
During the communication phase, chat participants may
exchange conﬁdential messages with the assurance of ori-
gin authentication — that they have received messages un-
changed from their purported authors. Given a chatroom in-
stance C1 with participant set P1, we use the group key gk1,
ephemeral public keys of the participants E ˆX,1 ( ˆX ∈ P1)
and session id sid1 for C1 in a standard Encrypt-then-Sign
construction to provide authenticated encryption [2] for mes-
sages sent to the chatroom. Algorithms AuthSend() and
AuthReceive() give our construction.
Algorithm 5: AuthSend(M ) — broadcast message M
authenticated under party ˆX’s ephemeral signing key to
chatroom Ci.
Input: message M , session id sidi, shared chat
encryption key gki, ephemeral private signing
key e ˆX,i
Output: authenticated encryption of M is broadcast
to chat channel
Sent ← Sent ∪ {( ˆX, M )};
C ← Encryptgki (M ), σ ← Signe ˆX,i
Broadcast( (sidi, C, σ) );
( (sidi, C) );
Algorithm 6: AuthReceive() — attempt to receive an
authenticated message from Ci, return the sender and
plaintext on success, sender and ⊥ on failure.
Input: session id sidi, shared chat encryption key gki,
ephemeral public signature keys of other
participants {E ˆY ,i | ˆY ∈ Pi}
or ⊥ on failure
Output: sender identity ˆY and plaintext message M ,
( ˆY , (sid, C, σ)) ← Receive();
if sid (cid:54)= sidi ∨ V erif y( (sid,C), σ, E ˆY ,i) (cid:54)= 1 then
M ← Decryptgki (C) ; // returns ⊥ on failure
if M (cid:54)= ⊥ then
return ( ˆY ,⊥); // Bad signature or session id
Received ← Received ∪ {( ˆY , M )};
return ( ˆY , M );
When ˆA sends a message to the chatroom, she ﬁrst en-
crypts the message under the shared key of the chatroom gk1
to ensure that only legitimate chat participants (P1) will be
able to read it. Then, ˆA signs the session id sid1 and cipher-
text using his ephemeral signing key e ˆA,1 and broadcasts the
session id, ciphertext, and signature to the network allowing
all recipients to verify that ˆA has sent the ciphertext to C1
and that it has been received unmodiﬁed.
We assume that Encrypt() and Decrypt() constitute a se-
cure encryption scheme indistinguishable under chosen plain-
text attack (IND-CPA) [2], GKA() is a secure group key
agreement scheme [5], DSKE() is secure as described in
§4.2.1, Sign() and V erif y() constitute an existentially un-
forgeable signature scheme, and session identiﬁers are glob-
ally unique. Under these assumptions, we can transform any
conﬁdentiality adversary O (§3.2.1) into a successful adver-
sary against the encryption scheme, the group key agreement
that derives the encryption key gki, or the deniable signature
key exchange scheme that distributes the ephemeral signa-
ture keys that are used to authenticate messages sent during
the group key agreement. Therefore, under the assumption
that the above protocols are secure, our full scheme is secure
against any conﬁdentiality adversary O.
Likewise, the security of DSKE() and the signature scheme
imply that the adversary cannot forge messages that are ac-
ceptable by AuthReceive(). Including the globally unique
session id in the message to be signed prevents a message
from one session from being replayed in another session. We
can also achieve this by deriving a chatroom-speciﬁc MAC
key from gki, which veriﬁes that messages are designated
for sidi. While a consensus adversary T is unable to suc-
cessfully forge messages, she can attempt to break consensus
by dropping or duplicating messages or by sending diﬀerent
correctly authenticated messages from a corrupted partici-
pant to disjoint subsets of honest participants. E.g. T uses
corrupted participant ˆC to send M1 to ˆX and M2 to ˆY where
M1 (cid:54)= M2. We address these last three threats during the
shutdown phase.
4.4 Shutdown phase
When the application determines that there are no out-
standing in-ﬂight messages between participants and that
the chat session should be ended, it invokes the Shutdown()
algorithm. Shutdown() is responsible for determining whe-
ther all participants have reached a consensus and for pub-
lishing the ephemeral signature key generated for the cur-
rent session. All in-ﬂight messages must have been delivered
before invoking shutdown for two reasons: (i) in-ﬂight mes-
sages will cause unnecessary failure to reach consensus; and
(ii) publication of the ephemeral signature key would allow
the adversary to modify any in-ﬂight messages.
To establish consensus, the local party ( ˆX) takes a digest
over all the messages authored by ˆX during the chat session
and sends it along with the distinguished message “shut-
down” to all the other parties. This message allows each
other participant to verify that his transcript of received
messages from ˆX is identical to ˆX’s view. To ensure that
out-of-order message delivery does not aﬀect this digest, the
messages are taken in lexical order. Note, however, that
should messages include a suitable order ﬁngerprint, then
lexical order can coincide with delivery or creation order,
hence our ordering is unrestrictive. For example, if each mes-