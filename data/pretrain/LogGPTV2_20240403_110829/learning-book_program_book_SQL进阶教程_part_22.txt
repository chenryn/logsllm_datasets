好拥有全部技术的员工，结果只有神崎一人。
---
## Page 143
●130-
第1章神奇的 SQL
EXISTS谓词的用法
SQL中的请词逻辑
支撑SQL的基础理论有两个：一个是我们之前花大篇幅介绍过的集合论，另一个是作为现代逻辑学
标准的谓词逻辑。本节主要介绍谓词逻辑，尤其是用于在SQL中表示量化的重要谓词EXISTS的特性，
这里将通过介绍它的一些用途来加深我们对SQL的理解。
写在前面
支撑SQL和关系数据库的基础理论主要有两个：一个是数学领域的
集合论，另一个是作为现代逻辑学标准体系的谓词逻辑（predicatelogic），
准确地说是“一阶谓词逻辑”。本书到目前为止着重介绍了SQL中与集合
论相关的内容。本节换个角度，介绍一下另一个重要内容一谓词逻辑。
本节将重点介绍EXISTS谓词。EXISTS不仅可以将多行数据作为整
体来表达高级的条件，而且使用关联子查询时性能仍然非常好，这对SQL
来说是不可或缺的功能。但是引入这个谓词的目的是什么，它的机制又是
什么，很多人都不太了解。
这一强大功能而被引入SQL的。如果能理解这个概念并且能灵活运用
EXISTS谓词，数据库工程师的能力会提升许多。
本节前半部分将简单介绍一下与谓词逻辑和EXISTS相关的理论知识，
后半部分则介绍一下实际的应用。如果觉得边看例题边理解更容易，也可
以从后半部分开始阅读，根据需要适当地参考前半部分的内容。
理论篇
什么是谓词
SQL的保留字中，有很多都被归为谓词一类。例如，“-、”等比
---
## Page 144
1-8 EXISTS请词的用法—131
较谓词，以及BETWEEN、LIKE、IN、IS NULL等。在写 SQL语句时我们
几乎离不开这些谓词，那么到底什么是谓词呢？几乎每天都在用，但是突
然被问起来时却答不上来的人应该不少吧。当然，我们说的谓词和主语！
谓语中的谓语，以及英语中的动词是不一样的。
在前面几节，我们多次用到了谓词这个说法，现在给出它的定义。用
一句话来说，谓词就是函数。当然，谓词与SUM或AVG这样的函数并不
一样，否则就无需再分出谓词这一类，而是统一都叫作函数了。
实际上，谓词是一种特殊的函数，返回值是真值。前面提到的每个谓
词，返回值都是true、false或者unknown（一般的谓词逻辑里没有
unknown，但是SQL采用的是三值逻辑，因此具有三种真值）。
谓词逻辑提供谓词是为了判断命题（可以理解成陈述句）的真假。例
假命题。在谓词逻辑出现之前，命题逻辑中并没有像这样能够深入调查命
题内部的工具。谓词逻辑的出现具有划时代的意义，原因就在于为命题分
析提供了函数式的方法
在关系数据库里，表中的一行数据可以看作是一个命题。
Tbl_A
 性别》
ag(年龄）
田中
男
28
铃木
女
21
山田
男
32
例如，这张表里第一行数据就可以认为表示这样一个命题：田中性别
是男，而且年龄是28岁。表常常被认为是行的集合，但从谓词逻辑的观
注0
点看，也可以认为是命题的集合（=陈述句的集合）.C.J.Date曾经这样
“确实，1969 年Cod 在开始思
调佩过：数据库这种叫法有点名不副实，它存储的与其说是数据，还不如
和名字无关)实际上井非是数
考关系梗型时管强调过，数据库
说是命题
据的展合。而是事买[即真命题）
的集合。* 1Dutabese  Dept/;
同样，我们平时使用的WHERB子句，其实也可以看成是由多个谓词组
Relctiral Tlexry for fract/tibners
0°Rellly Med ta, 2005 )
合而成的新谓词。只有能让WHERE子句的返回值为真的命题，才能从表（命
题的集合）中查询到。
图灵社区会员非洲铜（PI:EMAIL）专享尊重版权
---
## Page 145
132—第1章神奇的SOL
实体的阶层
同样是谓词，但是与-、B&TWEEN等相比，EXISTS的用法还是大不
相同的。概括来说，区别在于“谓词的参数可以取什么值”。
“x-y”或"xBETWEENy”等谓词可以取的参数是像“13”或者“本
田”这样的单一值，我们称之为标量值。而EXISTS可以取的参数究竞是
什么呢？从下面这条SQL语句来看，EXISTS的参数不像是单一值。
SEL&CT id
FROM Foo F
ISBLBCT *
FROM Bar B
WHERE F.id=B.id )/
不过，看不出来也不用苦恼。因为如果有人间SUN{）函数的参数是什
么，我们只要看一下括号里的内容就知道了。同样地，看一下EXISTS{)
的括号中的内容，我们就能知道它的参数是什么。现在再看上面的SQL
语句，就能知道它的参数是下面这样一条SELECT子句。
SBLBCT ·
WHERE A.id =- T2.id
换言之，参数是行数据的集合。之所以这么说，是因为无论子查询中
选择什么样的列，对于EXISTS来说都是一样的。在EXISTS的子查询里，
SELECT子句的列表可以有下面这三种写法。
1.通配符：SELECT*
2.常量：SELECT'这里的内容任意
3.列名：SELECT col
但是，不管采用上面这三种写法中的哪一种，得到的结果都是一样的。
---
## Page 146
18EXISTS谓闻的用法
133
LIKE
true
BETWEEN
unknown
false
IN
EXISTS以外的谓词的输入值是一行数据
EXISTS
true
false
unknown
EXISTS的输入值是行数据的集合
从上面的图表我们可以知道，XISTS的特殊性在于输入值的阶数（输
出值和其他谓词一样，都是真值）。谓词逻辑中，根据输入值的阶数对谓
词进行分类。-或者BETWEEEN等输入值为一行的谓词叫作“一阶谓词”，
而像EXISTs这样输入值为行的集合的谓词叫作“二阶谓词”阶（order）
是用来区分集合或谓词的阶数的概念。
三阶谓词=输入值为“集合的集合”的谓词
四阶谓词=输入值为“集合的集合的集合”的谓词
*****
我们可以像上面这样无限地扩展阶数，但是SQL里并不会出现三阶
以上的情况，所以不用太在意。
使用过List、Hakell等函数式语言或者Java的读者可能知道“高阶函
数”这一概念。它指的是不以一般的原子性的值为参数，而以函数为参数
念原本就源于集合论和谓词逻辑）。EXISTS因接受的参数是集合这样的一
阶实体而被称为二阶谓词，但是谓词也是函数的一种，因此我们也可以说
EXISTS是高阶函数。
---
## Page 147
●134—第1章神奇的SOL
关系数据库中实体的阶层
2阶：表的集合
1阶：表[行的集合）
0阶：行
在本节开头我们说过，SQL中采用的是狭义的“一阶谓词逻辑”，这
是因为SQL里的EXISTS谓词最高只能接受一阶的实体作为参数。如果想
要支持二阶、三阶等更高阶的实体，SQL必须提供相应的支持。理论上这
注0
也是可以做到的，只是目前还没有实现。
其买。1969年Codd在开始患考
关系模型时, 曾经考虑过以二阶
如果将来SQL能支持二阶谓词逻辑，那么我们就能对表进行量化。
请词逐辑作为基础，但是在次年
的 1970 年又及,时地修改成 了以
正如C.J.Date所说，现在的SQL只能进行“是否存在包含供应商SI的行？
一阶调词逻辑为基确。评情请参
考本书 2-1 节。
这样的查询，而如果能支持二阶谓词逻辑，那么就能够表达更复杂的查询，
比如“是否存在包含供应商SI的表？这样一来，SQL的查询能力就能提
升一个等级。到那时SQL作为一门编程语言将有质的飞跃。
全称量化和存在量化
从这些我们可以知道，形式语盲没必要同时星式地支持EXISTS和
FORALL两著。但是实际上，我们希望同时支持这两者，因为有些同题适合
使用EXISTS来解决，而有的问题适合使用 FORALL。例如，SQL支持
EXISTS，不支持FORALL。于是会有一些查询只能选择用 EXISTS，那么代
注9
码写起未就会非常麻烦。·
Theory for Prectitjomers+
Dscroase in Deptn: Relatoxe7
C.J. Date
0′RelTly Med'a, 2006,
谓词逻辑中有量词（限量词、数量词）这类特殊的谓词。我们可以用
它们来表达一些这样的命题：“所有的x都满足条件P”或者“存在（至少
---
## Page 148
8EXISTS谓词的用法—13.5
分别记作V、3。这两个符号看起来很奇怪。其实，全称量词的符号其实
是将字母A上下顺倒而形成的，存在量词则是将字母E左右颠倒而形成的。
的英语是“there Existsx that.."”，这就是这两个符号的由来
也许大家已经明白了，SQL中的EXISTS谓词实现了谓词逻辑中的存
在量词。然而遗憾的是，对于与本节核心内容有关的另一个全称量词，
SQL 却并没有予以实现。CJ.Date 在自己的书里写了FORALL 谓词，但实
际上SQL里并没有这个实现。
但是没有全称量词并不算是SQL的致命缺陷。因为全称量词和存在
量词只要定义了一个，另一个就可以被推导出来。具体可以参考下面这个
等价改写的规则（德·摩根定律）。
dx E -= xx A
（所有的x都满足条件P=不存在不满足条件P的x）
xdx A  = xdx E
（存在x满足条件P=并非所有的x都不满足条件P）
因此在SQL中，为了表达全称量化，需要将“所有的行都满足条件P”
这样的命题转换成“不存在不满足条件P的行”。就像CJ.Date所说，虽
然SQL里有全称量词会很方便，但是既然SQL并没有实现它，我们也就
没有办法了。
到此为止，本节简要介绍了SQL基础理论中的谓词逻辑，特别是量
化相关的理论知识。接下来的“实践篇”将通过具体的例题介绍一下量化
在 SQL中是如何使用的。
实践篇
查询表中“不”存在的数据
一般来说，我们从数据库中查询数据时，都是从表里存在的数据中选
出满足某些条件的数据。但是在有些情况下，我们不得不从表中查找出“不
---
## Page 149
136—第1章神奇的SQL
存在的数据”。这听起来可能很奇怪，但是这种需求并不算少。例如下面
这样的情况，大家是不是遇到过呢？
Meetings
hng [会议]
第1次
伊藤
第1次
水岛
第1次
版东
第2次
伊藤
第2次
田昂
第3次
版东
第3次
水岛
第3次
官田
显然，从这张表中求出“参加了某次会议的人”是很容易的。但是，
如果反过来求“没有参加某次会议的人”，该怎么做呢？例如，伊藤参加
了第1次会议和第2次会议，但是没有参加第3次会议：坂东没有参加第
2次会议。也就是说，目标结果如下所示，是各次会议缺席者的列表。
neet.ing
person
第1次
官田
第2次
坂东
第2次
水岛
第3次
伊藤
我们并不是要根据存在的数据查询“满足这样那样条件”的数据，而
是要查询“数据是否存在”，从阶层上来说，这是更高一阶的问题，即所
谓的“二阶查询”。这种时候正是EXISTS谓词大显身手的好时机。思路是
先假设所有人都参加了全部会议，并以此生成一个集合，然后从中减去实
际参加会议的人。这样就能得到缺席会议的人。
所有人都参加了全部会议的集合可以通过下面这样的交叉连接来
求得。
SSLECT DISTINCT N1.meeting, N2 -person
FEOM Keetings N1 CEOSS JOIN Neetinga M2;
图灵社区会员非洲铜(PI:EMAIL）专享尊重版权
---
## Page 150
18EXISTS谓润的用法 —
—137
所有人都参加了全部会议时
eing（会议）
）
第1次
伊藤
第1次
宫田
第1次
坂东
第1次
水岛
第2次
伊幕
第2次
宫田
第2次
坂东
第2次
水岛
第3次
伊蒂
第3次
宫田
第3次
坂东
第3次
水岛
结果是3次×4人，
，一共12行数据。然后我们从这张表中减掉实际