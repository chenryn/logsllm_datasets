title:CEC: Continuous eventual checkpointing for data stream processing
operators
author:Zoe Sebepou and
Kostas Magoutis
CEC: Continuous Eventual Checkpointing for Data Stream Processing Operators 
Zoe Sebepou and Kostas Magoutis 
Institute of Computer Science (ICS) 
Foundation for Research and Technology – Hellas (FORTH) 
Heraklion GR-70013, Crete, Greece 
e-mail: {sebepou,magoutis}@ics.forth.gr 
Abstract—  The  checkpoint  roll-backward  methodology  is  the 
underlying  technology  of  several  fault-tolerance  solutions  for 
continuous  stream  processing  systems  today,  implemented 
either using the memories of replica nodes or a distributed file 
system.  In  this  scheme  the  recovering  node  loads  its  most 
recent checkpoint and requests log replay to reach a consistent 
pre-failure  state.  Challenges  with  that  technique  include  its 
complexity  (typically  implemented  via  copy-on-write),  the 
associated overhead (exception handling under state updates), 
and  limits  to  the  frequency  of  checkpointing.  The  latter  limit 
affects  the  amount  of  information  that  needs  to  be  replayed 
leading  to  long  recovery  times.  In  this  work  we  introduce 
continuous  eventual  checkpointing  (CEC),  a  novel  mechanism 
to  provide  fault-tolerance  guarantees  by  taking  continuous 
incremental  state  checkpoints  with  minimal  pausing  of 
operator  processing.  We  achieve  this  by  separating  operator 
state 
frequent 
independent partial checkpoints of them. Our results show that 
our  method  can  achieve  low  overhead  fault-tolerance  with 
adjustable checkpoint intensity, trading off recovery time with 
performance. 
independent  parts  and  producing 
into 
Keywords; Continuous Stream Processing; Fault-Tolerance; 
I. 
 INTRODUCTION 
Sources  of  continuously-flowing  information  today  are 
growing  in  both  number  and  data  rates  produced  [1][9]. 
Consider  for  example  the  streams  of  call-detail  records 
(CDRs) produced by mobile telephony base stations; credit-
card 
transaction  authorizations;  stock-price  feeds  from 
financial  markets;  and  camera  video  streams  used  for 
surveillance.  The  need  for  online  processing  of  such 
information streams has led to the design of complex event 
processing systems supporting continuous queries expressed 
in stream-oriented query languages [4][5]. The data operated 
on  (often  referred  to  as  tuples)  are  associated  with  a 
monotonically  increasing  timestamp,  forming  a  time  series. 
A continuous stream processing query is composed of one or 
more interconnected operators, each computing a function on 
incoming 
that  accumulate  state  by 
computing a function over sets (also known as windows) of 
tuples are known as stateful operators. 
tuples.  Operators 
An  important  concern,  especially  in  the  case  of  stateful 
operators  is  that  a  failure  in  the  underlying  infrastructure 
may lead to long recovery times and/or irrecoverable loss of 
operator  state.  These  risks  are  not  acceptable  in  many 
application  domains  with  stringent  response  time  and  data 
reliability  requirements.  Several  fault  tolerance  solutions 
and 
have  been  proposed  in  the  past  [6][10][11][19]  to  address 
this  challenge  most  of  them  relying  on  replicating  operator 
state  either  in  the  memories  of  different  nodes  or  on  disk 
(Section VI provides an overview of these solutions). 
roll-backward  methodology 
A  prominent  fault-tolerance  solution  used  today  is  the 
checkpointing 
[10], 
hereafter  referred  to  as  CRB.  In  CRB  the  recovering  node 
loads  the  more  recent  checkpoint  and  replays  events  that 
postdate  the  checkpoint  to  reach  the  pre-failure  state. 
Efficient 
implementations  of  CRB  use  copy-on-write 
[10][17]  mechanisms  to  reduce  the  amount  of  time  an 
operator  freezes  processing  while  saving  the  checkpoint  to 
stable  store.  Challenges  with  CRB  include  its  complexity 
(such  as  in  the  implementation  of  copy-on-write),  the 
associated  overhead  (exception  handling  during  state 
updates), startup overhead (one needs to compute what needs 
to be checkpointed, especially if incremental checkpoints are 
being  used)  and  limits  to  the  frequency  of  checkpointing 
(one cannot start a new checkpoint while the previous one is 
still  in  progress).  The  latter  limit  affects  the  amount  of 
information  that  needs  to  be  replayed  during  recovery 
leading to potentially long unavailability periods. 
to 
Straightforward  applications  of  CRB 
stream 
processing  systems  [17]  consider  the  entire  operator  state 
when  constructing  checkpoints  (namely  all  windows  that 
have  changed  since  the  previous  checkpoint).  As  such, 
operators  accumulating  large  amounts  of  state  (that  is, 
several  GBs  in  today’s  systems)  require  inter-checkpoint 
intervals in the order of tens of seconds (for example, a 4GB 
state  can  take  at  least  40  seconds  to  checkpoint  over  a 
1Gbit/s  line,  assuming  stable  storage  can  sustain  the  same 
rate). Incremental checkpoints do not seem to help much in 
that  aspect  when  state  changes  between  checkpoints  are 
spread across the majority of operator’s windows. 
One way to improve CRB in stream processing systems 
is to take advantage of the observation that certain window 
state transitions (such as the closure of a window) are leaving 
a  “footprint”  in  the  operator’s  output  stream  (an  output 
tuple). This “footprint” can also serve as a recovery point for 
that window in case of operator failure. Intuitively speaking, 
it contains the information that the state of the window was 
closed as of the time the output tuple was produced. We can 
build on this observation by creating other types of window 
state  “footprints”  by  inserting  special  output  tuples  in  the 
operator’s output  stream,  such  as  when  a  window  opens or 
the state at an arbitrary point in time. A recovery mechanism 
can  examine  the  operator’s  output  stream  to  find  the  most 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:28:57 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE145recent  “footprints”  of  all  windows  that  comprised  the 
operator  state  at  some  point  in  time.  In  this  paper  we 
formalize the above observations into a novel checkpointing 
mechanism that we term continuous eventual checkpointing 
(CEC). 
into  parts 
CEC  splits  operator  state 
that  can  be 
checkpointed  independently  and  in  an  as-needed  basis.  In 
contrast  to  conventional  approaches  where  a  checkpoint  is 
statically constructed at checkpoint-capture time, in CEC the 
checkpoint  is  an  evolving  entity  that  is  continuously  and 
incrementally  updated  by  adding  partial  checkpoints  to  it. 
Partial checkpoints take the form of control tuples containing 
window  state  and  intermixing  with  actual  data-carrying 
tuples  (preserving  time  order)  in  the  operator’s  output 
stream.  To  ensure  that  the  checkpoint  is  recoverable  in  the 
event of a node failure, CEC requires that the output stream 
be written to stable storage. The interleaving between control 
and regular output tuples means that the checkpoint is spread 
over  the  persistent  representation  of  the  operator’s  output 
stream, rather than being a single cohesive entity at a single 
location  in  stable  storage.  As  such,  the  CEC  checkpoint  is 
not 
immediately  available  for  recovery  but  must  be 
reconstructed  through  a  process  described  in  detail  in  this 
paper. 
Since  checkpoints  can  be  performed  asynchronously  at 
the pace of the operator’s choosing, the operator can exploit 
a  tradeoff  between  overhead  and  recovery  speed  (i.e.,  how 
often  to  write  control  tuples  to  stable  storage  vs.  how  far 
back  to  seek  into  the  output  queue  to  reconstruct  the  CEC 
checkpoint vs. how far back to replay from upstream output 
queues). By mixing control and regular output tuples in the 
output  stream,  CEC  can  leverage  an  existing  persistence 
mechanism 
the 
operator’s  output  queue  [20])  to  also  persist  its  evolving 
checkpoint.  Besides 
its 
implementation, such a scheme enjoys I/O efficiencies due to 
the sequential access pattern involved. These characteristics 
make  CEC  an  efficient  CRB  methodology  for  streaming 
operators  that  can  provide  rapid  recovery  with  adjustable 
overhead characteristics. 
(originally  developed 
straightforward 
for  persisting 
Our contributions in this paper include: 
•  A novel state checkpointing technique for window-
based  streaming  operators  that  takes  independent 
checkpoints of parts of the operator state in the form 
of control tuples integrated with regular tuples at the 
operator’s output queue. 
Implementation  of  the  technique  (including  both 
failure-free and recovery paths) in the context of the 
Borealis [8] open-source streaming middleware. 
•  Evaluation  of  the  prototype  system  under  a  variety 
• 
being 
in 
of scenarios. 
The  remainder  of  paper  is  structured  as  follows.  In 
Section  II  we  describe  the  detailed  design  of  the  CEC 
mechanism and in Section III our prototype implementation. 
In Section IV we present the experimental evaluation of CEC 
and in Section VI we present related work on fault-tolerant 
streaming. Finally we draw our conclusions in Section VII. 
II.  DESIGN 
In  this  paper  we  assume  a  fairly  general  continuous 
stream  processing  model  in  which  a  continuous  query  is 
expressed as a graph of operators interconnected via streams 
between  input  and  output  queues.  As  shown  in  Figure  1 
operators  receive  tuples  in  their  input  queues  (1),  process 
those tuples (2), and preserve results in their output queues 
(3) until receiving an acknowledgment from all downstream 
nodes. Each stream is associated with an information schema 
describing  the  tuples  that  flow  through  it.  Each  operator 
implements a function such as filter, union, aggregate, join, 
etc.  and  may  or  may  not  be  accumulating  state  over  time. 
The latter distinction separates operators into stateless (such 
as  filter,  union)  and  stateful  (such  as  aggregate, join) ones. 
Operators are executing in stream-processing engines (SPEs) 
that are distributed and communicating over the network. 
Figure 1. Checkpoint roll-backward (CRB). 
In  explaining  the  CEC  technique  we  will  use  as  a 
canonical  example  of  a  stateful  operator  the  aggregate 
operator. The aggregate operator computes a function (such 
as  count,  minimum,  maximum,  sum,  or  average)  on  a 
specific tuple field over windows of eligible tuples (defined 
through another field). A typical example would be a query 
stating “Compute the average talk time of all telephone calls 
(described  by  CDRs)  originating  from  a  specific  phone 
number  over  a  window  of  1  hour,  grouped  by  phone 
number”.  The  duration  that  a  window  remains  open  (and 
thus  accumulates  state)  can  either  be  time-based,  as  in  the 
previous example, or count-based (remains open for a fixed 
number  of  tuples).  The  specification  of  the  aggregate 
operator allows overlap between successive incarnations of a 
window  (i.e.,  advancing  the  window  for  less  than  its  size) 
taking  tuples  from  the  previous  incarnation  into  account 
when computing the next result. In practical implementations 
(as  for  example  in  Borealis  [3][8])  such  windows  are 
implemented  as  two  separate  physical  windows,  both 
accumulating  tuples during  the overlap period,  and thus  do 
not  present  additional  challenges  compared 
to  non-
overlapping windows. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:28:57 UTC from IEEE Xplore.  Restrictions apply. 
146In what follows we briefly describe the general principles 
of  the  checkpoint  roll-backward  technique  in  Section  II.A 
and then move into the details of the CEC methodology in 
Section  II.B.  A  brief  description  of  the  stream  persistence 
architecture that we developed for logging output tuples and 
CEC checkpoints to storage appears in Section IX (see [20] 
for a full paper). 
A.  Checkpoint roll-backward 
in  CRB.  Downstream  operators  are 
Figure 1 provides an abstract view of the checkpointing 
procedure 
taking 
checkpoints of their state (b) and send acknowledgments to 
upstream  queues  that  they  no  longer  depend  on  the 
corresponding input tuples to reconstruct it. In the standard 
implementation of CRB the operator state is a point-in-time 
consistent  view  of  all  open  windows  at  checkpoint-capture 
time. The  full  checkpoint includes  the  state  of the operator 
itself and its input and output queues. We call this an instant 
checkpoint  of  the  operator.  For  the  rest  of  the  paper  we 
assume  without  loss  of  generality  that  only  output  queues 