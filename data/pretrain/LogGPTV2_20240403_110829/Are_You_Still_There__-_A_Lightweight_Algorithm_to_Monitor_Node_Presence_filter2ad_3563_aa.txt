title:Are You Still There? - A Lightweight Algorithm to Monitor Node Presence
in Self-Configuring Networks
author:Henrik C. Bohnenkamp and
Johan Gorter and
Jarno Guidi and
Joost-Pieter Katoen
(cid:151) A Lightweight Algorithm To Monitor Node Presence in Self-Con(cid:2)guring Networks (cid:151)
Are You Still There?
Henrik Bohnenkampa, Johan Gortera, Jarno Guidib and Joost-Pieter Katoen(cid:3);a;c
a University of Twente, 7500 AE Enschede, the Netherlands
b Philips Research, Prof. Holstlaan 4, 5656 AA Eindhoven, the Netherlands
c Aachen University of Technology, 52056 Aachen, Germany
(cid:3) Contact author. E-mail: PI:EMAIL, tel: +31-53-4895675
Abstract
This paper is concerned with the design of a distributed
algorithm to monitor the availability of nodes in self-
con(cid:2)guring networks. It is intended as extension to service
discovery protocols such as SSDP, SLP, Rendezvous and
Jini that allow for fast node detection. The simple scheme
to regularly probe a node(cid:151)(cid:147)are you still there?(cid:148)(cid:151)may
easily lead to over- or underloading. The essence of our
algorithm is therefore to automatically adapt the probing
frequency. We show that a self-adaptive scheme to con-
trol the probe load, originally proposed as an extension to
the UPnPT M (Universal Plug and Play) standard, leads to
an unfair treatment of nodes: some nodes probe fast while
others almost starve. An alternative distributed algorithm
is proposed that overcomes this problem and that tolerates
highly dynamic network topology changes. The algorithm
is very simple and can be implemented on large networks
of small computing devices such as mobile phones, PDAs,
and so on. The distributed algorithms are modeled using
the formal modeling language MODEST and are analyzed
by means of the discrete-event simulator of the M Â¤OBIUS
tool.
Keywords: discrete-event simulation, distributed al-
gorithms, formal speci(cid:2)cation, performability evaluation,
plug-and-play networks, self-con(cid:2)guring networks
1. Introduction
Home and of(cid:2)ce environments typically consist of a
multitude of devices, ranging from desktop PCs and tele-
visions to remote controls, thermostat controls and mobile
phones. Such devices no longer act as stand-alone entities,
but interact with each other via so-called plug-and-play
networks. These networks are highly dynamic (devices can
join and leave at a high frequency), typically contain hun-
dreds of devices, and are self-con(cid:2)guring(cid:151)there is no cen-
tralized device that manages the network. For economic
reasons, the protocols running these networks should be
simple to implement and should impose low memory and
processing requirements. The distributed management and
control of such networks is a challenging issue that cur-
rently is faced by, amongst others, the UPnPT M Forum
(Universal Plug and Play, www.upnp.org) in which over
700 companies world wide (such as consumer electronics,
home automation, and IT companies) are involved.
This paper is considered with the membership manage-
ment of these highly dynamic, self-con(cid:2)guring networks.
In particular, we are concerned with the design and analysis
of a distributed algorithm that is aimed to maintain (and to
some extent disseminate) up-to-date information about the
presence (or absence) of devices (also called nodes). That
is to say, the distributed algorithm allows for the monitor-
ing of the availability of a node by other nodes. Normally,
when a node goes off-line, it informs other nodes by send-
ing a bye-message, but if it suddenly becomes unavailable,
no such indication is sent, and the studied algorithm comes
into play. An important requirement is that the absence of
nodes should be detected quickly (e.g., in the order of one
second) while avoiding to overload nodes. As the basic
mechanism of our membership management algorithm is
to simply regularly check (i.e., probe) whether a node is
still present, we refer to it as the probe protocol.
Related protocols are failure detection and monitoring
protocols. Failure detection protocols [15, 17] aim to iden-
tify whether in a group of nodes, one or more nodes stop
executing correctly. In our setting there are two types of
nodes, devices and control points and only the failure of
a single type of node is relevant (devices). Monitoring
protocols involve the aggregation of various sorts of data
such as (cid:2)nding aggregated statistics (like average, sum
1
and the like) that are distributed among nodes in the net-
work [14, 16]. The probe protocol considered in this pa-
per shares many aspects with the newscast computing ap-
proach [14]: it maintains up-to-date (membership) infor-
mation in a self-organizing way, without any central in-
tervention, in a dynamically changing and large-scale dis-
tributed environment.
In particular, it continues to op-
erate properly without manual intervention under the(cid:151)
according to varying patterns(cid:151)joining and (un)intentional
leaves of devices.
This paper describes two probe protocols for mem-
bership management, presents the essential ingredients of
their formal models, and discusses analysis results ob-
tained by means of discrete-event simulation. The simplest
scheme one could consider is to regularly probe a device(cid:151)
(cid:147)are you still there?(cid:148). This scheme, however, easily leads
to over- or underloading of devices. The essence of our
algorithms is therefore to automatically adapt the probing
frequency. We show that a self-adaptive scheme to control
the probe load of a probed device leads to an unfair treat-
ment of control points (CPs): some CPs probe fast while
others almost starve. This protocol [3] can be implemented
as an (proprietary) extension of the UPnPT M (Universal
Plug and Play) standard.
The main contribution of this paper is an alternative dis-
tributed algorithm that overcomes this problem and that
tolerates highly dynamic network topology changes. The
simplicity of the algorithm allows for the implementation
on large networks of small computing devices such as mo-
bile phones, PDAs, and so on. Although the presented dis-
tributed algorithm is intended as an extension to service
discovery protocols (such as SSDP [19], SLP [13], Ren-
dezvous and Jini [11]) in home and of(cid:2)ce environments,
its principles can also be used for neighbor unreachabil-
ity detection in IPv6 and for membership management in
other dynamically changing distributed environments.
The paper is further organized as follows. Section 2
describes the probe protocol as proposed by Bodlaender et
al. [3] and focuses in particular on the self-adaptive scheme
to regulate the probe frequency. Section 3 presents the
main details of the model of this probe protocol and dis-
cusses its analysis results. Section 4 and 5 describe the
alternative probe protocol, its formal model and analysis
results, respectively. Finally, Section 8 concludes.
2. The Self-Adaptive Probe Protocol
Two types of nodes are distinguished: simple nodes (de-
vices) and somewhat more intelligent ones, called control
points (CPs). The basic protocol mechanism is that a CP
continuously probes a device that in turn replies to the CP,
if it is still present. The CP adapts the probing frequency
automatically in case a device tends to get over- or under-
loaded. The CPs are dynamically organized in an overlay
network by letting the device, on each probe, return the ids
of the last two (distinct) processes that probed it. On de-
tecting the absence of a device, the CP uses this overlay
network to inform all CPs about the leave of the device
rapidly. The latter information dissemination phase of the
protocol is inspired by Chord [18]. It is further considered
in Section 6.
Device behaviour. A device maintains a probe-counter
pc that keeps track of the number of times the device has
been probed so far. On the receipt of a probe, this counter
is incremented by the natural (cid:1), and a reply is sent to the
probing CP with as parameters the (just updated) value of
pc, and the ids of the last two distinct CPs that probed the
device. The latter information is needed to maintain the
overlay network of CPs1, whereas the returned value of pc
is used by CPs to estimate the load of the device. (cid:1) is
device-dependent, and typically only known to the device.
Its value may change during execution. A CP cannot there-
fore distill the actual probing frequency of a device, but
only its own perceived probing frequency, the experienced
probe load, denoted as Lexp .
The factor (cid:1) is used by a device to control its load,
e.g., for a larger (cid:1), CPs consider the device to be more (or
even over-) loaded sooner, and will adjust (i.e., lower) their
probing frequency accordingly resulting in a lower probe-
load at the device. This works as follows. We assume a
so-called ideal probe load, denoted by Lideal, known to all
CPs and devices. Lideal is the ideal probe load that a device
should be able to cope with, but it is a reference constant
only and must have an unrealistic high value. CPs try to
keep their Lexp values close to Lideal.
In addition, a device is assumed to have a private nom-
inal probe load Lnom, representing the actual load the de-
vice can or wants to maintain during normal operation.
De(cid:2)ning now
(cid:1) = (cid:24) Lideal
Lnom (cid:25) ;
enables the device to slow down the CPs (assuming
Lideal >> Lnom) as it informs the CPs that it is a factor (cid:1)
more (cid:147)busy(cid:148) than is really the case. Note that the optimal
probe frequency for a CP with k CPs in total is Lnom =k,
but as neither k nor Lnom are known to a CP, the adap-
tive mechanism described below must take care of keeping
the probing frequencies of the CPs reasonably close to this
optimum.
1By returning two distinct CP ids, the overlay network forms a tree
with depth log2 N where N is the number of CPs, with a high probability.
2
CP behaviour. The behaviour of a CP is more intricate.
The basic mechanism for communicating with a device is
a bounded retransmission protocol ((cid:30)a la [8]): a CP sends
a probe ((cid:147)are you still there?(cid:148)), and waits for a reply. In
absence of a reply, it retransmits the probe (cf. Fig. 1).
Otherwise, the CP considers the reply as a noti(cid:2)cation of
the presence of the device, and continues its normal op-
eration. Probes are retransmitted maximally three times.
If on none of the four probes a reply is received, the CP
considers the device to have left the network, and starts to
disseminate this information to other CPs using the over-
lay network. The protocol allows to distinguish between
the timeout value TOF after the (cid:2)rst probe and the timeout
value TOS after the other (maximally three) probes. Typi-
cally, TOS  1:
Note that (cid:12) is just a constant. Assume the CP receives a
reply on a probe with probe-count pc at time t. (In case
of a failed probe, the time at which the retransmitted probe
has been sent is taken.) The next reply is received at time
t0 > t, and let pcâbe its returned probe-count. t0(cid:0)t, thus, is
the time delay between two successive successful probes.
The experienced probe load is now given by:
Lexp =
pcâ(cid:0) pc
:
t0 (cid:0) t
The inter-probe-cycle delay (cid:14) is adapted according to the
following scheme, where (cid:14) 0 and (cid:14) refer to the new and cur-
rent value of (cid:14), respectively:
min(cid:0)(cid:11)inc (cid:1) (cid:14); (cid:14)max(cid:1)
max(cid:16) 1
(cid:1) (cid:14); (cid:14)min(cid:17)
if Lexp > (cid:12)(cid:1)Lideal
if Lexp :
(cid:14)
where (cid:11)inc > 1 and (cid:11)dec > 1.
This scheme is justi(cid:2)ed as follows2.
In case the just
perceived probe load Lexp exceeds the maximal load, the
delay (cid:14) is extended (by a factor (cid:11)inc > 1) with the aim to
reduce the load. As (cid:14) should not exceed the maximal de-
lay (cid:14)max , we obtain the (cid:2)rst clause of the above formula.
This rule thus readjusts the probing frequency of a CP in
case the number of CPs (probing the device) suddenly in-
creases. If Lexp is too low, the delay is shortened in a sim-
ilar way while obeying (cid:14)min 6 (cid:14). The second rule thus
readjusts the probing frequency of a CP in case the num-
ber of CPs (probing the device) suddenly decreases. In all
other cases, the load is between the maximal and minimal
load, and there is no need to adjust the delay. Note that the
maximal frequency at which a CP may probe a device(cid:151)
given that the protocol is in a stabilized situation(cid:151)is given
by min( 1
(cid:14)min
; (cid:12)(cid:1)Lnom).
Adapting the probing frequency. Let us now consider
the mechanism for a CP to determine the probing fre-
quency of a device. A probe cycle starts with a probe
and ends with either a reply (a successful probe) or with a
timeout after three retransmissions of the probe (an unsuc-
cessful probe), cf. Fig. 1. Let (cid:14) be the delay between two
consecutive probe cycles. There is a minimal and maximal
inter-probe-cycle delay, i.e., a CP has to obey:
(cid:14)min 6 (cid:14) 6 (cid:14)max
for constants (cid:14)min and (cid:14)max with (cid:14)max >> (cid:14)min. The
value of (cid:14) is adapted to keep the probe load Lexp as per-
3. Modeling and Analysis
The probe protocol has been modeled using MOD-
EST, a modeling formalism for stochastic and timed sys-
tems [5, 7]. MODEST is a formalism that is aimed to sup-
port (i) the modular description of reactive systemâs be-
haviour while covering both (ii) functional and (iii) non-
functional system aspects such as timing and quality-of-
service constraints in a single speci(cid:2)cation. The lan-
guage contains features such as simple and structured data
2To avoid clustering of CPs, in fact, a CP adds a small random value
to (cid:14)0. For the sake of simplicity, this is not described any further here.
3
types, structuring mechanisms like parallel composition
and abstraction, means to control the granularity of assign-
ments, exception handling, and non-deterministic and ran-
dom branching and timing. Elaborate descriptions of the
MODEST language can be found in [5, 7]. Here, we only
explain the language constructs needed for the main parts
of the protocol model.
The entire model consists of the parallel composition
of a number of CPs, a number of devices and a network
process. By making a precise model of the probe proto-
col, some small unclarities in the original protocol descrip-
tion [3] were revealed, such as, e.g., the way in which the
ids of the last two (distinct) probing CPs were managed.
The network is modeled as a simple (cid:2)rst-in, (cid:2)rst-out buffer
with a suf(cid:2)cient capacity such that the probability of a full
buffer is negligible. Three probabilistic cases are distin-
guished: a fast, slow or standard transmission.
Device model. Each device has an input and an output
buffer (denoted in and out, respectively). Access to these
buffers is determined by a shared variable lck. The model
of the device is as follows, where for the sake of simplic-
ity, the returned CP ids in a reply (and the accompanied
administration) are omitted.
process Device (int id) {
const int Delta = (int)(#eval(L_IDEAL / L_NOM));
clock x;
int cp, pc = 0;
float r;
// timer for reply time
// probe counter
// reply delay
Once the condition of the when-clause holds, an action
is executed (that can be used for synchronization purposes
in a parallel composition), and the assignments in the f=
.... =g-clause are executed atomically. In particular,
r is determined by sampling a uniform distribution, and(cid:151)
simultaneously(cid:151)clock x is reset. The subsequent when-
clause is executed as soon as r time units have elapsed (and
the output buffer is empty). Then the repetitive behaviour
restarts by waiting for the next probe.
CP model. The model for the CP is a bit more intri-
cate and its essential behaviour is as follows. For sake of
brevity, the model has been condensed and follows not the
precise MODEST syntax. The complete model is available
from the net [10].
process CP (int id ) {
clock x, y;
do {
:: probe {= i = 1, x = 0, to = TOF =};
do {
:: when ( (x >= to) && (i  beta * L_IDEAL? :
d = min(d*a_inc, d_max),
if L_EXP = d) break // wait and re-probe
:: when ( (x >= to) && (i == 4) )
dev_abs {= i = 0, pc = 0 =};
do {
:: when (in.lck)
handle_probe {=
// probe in input-buffer
] }
}
when (x >= d) break // wait and re-probe
pc += Delta,
r = min + (max - min)*Uniform(0,1),
cp = in.src,