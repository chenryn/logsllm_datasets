title:Inferring Spammers in the Network Core
author:Dominik Schatzmann and
Martin Burkhart and
Thrasyvoulos Spyropoulos
Inferring Spammers in the Network Core
Dominik Schatzmann, Martin Burkhart, and Thrasyvoulos Spyropoulos
Computer Engineering and Networks Laboratory, ETH Zurich, Switzerland
{schatzmann,burkhart,spyropoulos}@tik.ee.ethz.ch
Abstract. Despite a large amount of effort devoted in the past years trying to
limit unsolicited mail, spam is still a major global concern. Content-analysis tech-
niques and blacklists, the most popular methods used to identify and block spam,
are beginning to lose their edge in the battle. We argue here that one not only
needs to look into the network-related characteristics of spam trafﬁc, as has been
recently suggested, but also to look deeper into the network core, to counter the
increasing sophistication of spammers. At the same time, local knowledge avail-
able at a given server can often be irreplaceable in identifying speciﬁc spammers.
To this end, in this paper we show how the local intelligence of mail servers
can be gathered and correlated passively, scalably, and with low-processing cost
at the ISP-level providing valuable network-wide information. First, we use a
large network ﬂow trace from a major national ISP, to demonstrate that the pre-
ﬁltering decisions and thus spammer-related knowledge of individual mail servers
can be easily and accurately tracked and combined at the ﬂow level. Then, we
argue that such aggregated knowledge not only allows ISPs to monitor remotely
what their “own” servers are doing, but also to develop new methods for ﬁghting
spam.
1 Introduction
According to IronPort’s 2008 Security Trend Report [1], as much as 90% of inbound
mail is spam today. Moreover, spam is no longer simply an irritant but becomes in-
creasingly dangerous. 83% of spam contains a URL. Thus, phishing sites and trojan
infections of ofﬁce and home systems alike are just one click away. The rapid increase
of spam trafﬁc over the last years poses signiﬁcant processing, storage, and scalability
challenges for end-host systems, creating a need to at least perform some fast “pre-
ﬁltering” on the email server level. To do this, email servers evaluate information re-
ceived at various steps of the SMTP session using local (e.g., user database, greylisting
[2]) and global knowledge (e.g., blacklists [3,4] or SPF [5]) to identify and reject mali-
cious messages, without the need to look at the content.
Nevertheless, traditional pre-ﬁltering methods like blacklists are starting to lose their
edge in the battle. Spammers can easily manipulate an IP block for a short time to do
enough damage before they can be reported in a blacklist [6,7]. To amend this, new
ﬁltering approaches focusing on general network-level characteristics of spammers are
developed [8,9,10,11], which are more difﬁcult for a spammer to manipulate. An ex-
ample of such characteristics are geodesic distance between sender and recipient [12],
round trip time [9] or MTA link graph properties [13,14]. These methods have been
shown to successfully unveil additional malicious trafﬁc that slips under the radar of
S.B. Moon et al. (Eds.): PAM 2009, LNCS 5448, pp. 229–238, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009
230
D. Schatzmann, M. Burkhart, and T. Spyropoulos
traditional pre-ﬁltering. Yet, they require different amounts of information and pro-
cessing, ranging from simply peeking into a few entries of the packet header to less
lightweight, more intrusive approaches.
Our work is in the same spirit, in that we are also interested in the network-level
characteristics of spammers. However, we look at the problem from a somewhat differ-
ent perspective. Speciﬁcally, we look at the problem from an AS or ISP point of view
comprising a network with a large number of email servers. We assume that a number
of servers in this network (if not all) already perform some level of pre-ﬁltering, e.g.
dropping a session to an unknown recipient, using a blacklist, or even using sophis-
ticated network characteristics based mechanisms like the one proposed in [12]. This
essentially implies that (a) each server is not performing equally “well” in identifying
and blocking spammers, and (b) each server has a limited, local view or opinion about
which senders are suspicious or malicious. In this context, we’re interested in answering
the following question: can one use a 100% passive, minimally intrusive, and scalable
network-level method to (a) infer and monitor the pre-ﬁltering performance and/or pol-
icy of individual servers, and (b) collect and combine local server knowledge in order
to re-use it to improve server performance?
Although one could potentially use individual server logs to gain the needed pre-
ﬁltering information, in order to collect network-wide spam statistics an ISP would have
to gather the logs of all mail servers in the network. As these servers are usually located
in many different organizational domains, this is a tedious process that is hindered by
privacy concerns of server operators. Instead, we demonstrate that the pre-ﬁltering de-
cisions of individual servers can be passively and accurately inferred in the network
using little ﬂow size information captured in the network core as illustrated in Fig. 1.
Having validated this methodology, we then use it to analyze the incoming SMTP trafﬁc
of a major national ISP network with 320 internal email servers. We found that internal
servers perform very differently. Some servers accept up to 90% of all incoming SMTP
ﬂows, while many accept only 10 − 20%. We look further into the causes of these dis-
crepancies, and after ruling out various “benign” causes, we conclude that many servers
in the network seem to be mis-conﬁgured or simply under-performing. Based on this,
we investigate how and to what extent the collective knowledge of well-performing
servers could be used to improve the pre-ﬁltering performance of everyone.
Summarizing, our method avoids the cumbersome process of log gathering and cor-
relation. It also requires minimal processing and session information, implying that this
method is scalable enough to keep up with the high amount of information constantly
gathered at the network core. Finally, it is complementary to recently proposed, sophis-
ticated spam detection mechanisms based on network characteristics, in that the whole
system could beneﬁt from such increased capabilities deployed a given server or subset
of them.
2 Preliminaries
The email reception process on a server consists of three phases as depicted in Fig. 2,
TCP handshake, SMTP email envelope exchange, and email data exchange. Pre-ﬁltering
is employed in the second phase: in order to identify and quickly reject malicious trafﬁc
Inferring Spammers in the Network Core
231
Fig. 1. The ISP view of the network
Fig. 2. The three phases of email reception
based on the message envelope only a server may use “global” knowledge (e.g., sender
listed in a blacklist), local knowledge (e.g., attempt to reach unknown recipients), or
policy-based decisions (e.g., greylisting).
We analyzed the log of a university mail server serving around 2400 user accounts
and receiving on average 2800 SMTP ﬂows per hour to look into such pre-ﬁltering
performance in more detail. We found that as much as 78.3% of the sessions were
rejected in the pre-ﬁltering phase. 45% of the rejects were based on local information
(e.g., user database or greylisting) and only 37.5% were due to blacklists. This illustrates
the importance of local mail server knowledge for spam detection.
Based on the server’s decisions, we classify observed SMTP sessions as either failed,
rejected or accepted. Our key observation is that, whenever a sender manages to get to
the next phase, the overall transferred information is signiﬁcantly increased. For exam-
ple, if a sender is accepted and allowed to send email content, he is able to transmit
much more data than a sender already rejected in phase two. As a consequence, we
conjecture that ﬂow properties reﬂecting the size or length of SMTP sessions, such as
the ﬂow size or packet count, should be an accurate indicator for the phase in which an
SMTP session was closed.
We validate this assumption in Section 3. For this purpose, we have used three weeks
of unsampled NetFlow data from January, February and September 2008 (referred to
as week 1, 2, 3), captured at the border routers of a major national ISP [15] serving
more than 30 universities and government institutions. The IP address range contains
about 2.2 million internal IP addresses and the trafﬁc volume varies between 60 and
140 million NetFlow records per hour. The identiﬁcation of SMTP trafﬁc is based on
TCP destination port 251. Based on the SMTP trafﬁc, a list of active internal email
servers was generated and veriﬁed by active probing. We detected 320 internal servers,
receiving up to 2 million SMTP ﬂows per hour.
3 SMTP Flow Characteristics
In this Section, we demonstrate how the effect of pre-ﬁltering on ﬂow characteristics
can be used to track the servers’ decisions for each SMTP session.
1 Note that only the trafﬁc ﬂowing from external SMTP clients to internal servers is considered.
232
D. Schatzmann, M. Burkhart, and T. Spyropoulos
s
w
o
l
f
f
o
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 1
 0.8
 0.6
 0.4
 0.2
e
v
i
t
i
s
o
p
e
u
r
T
332
1559
Connection failed
Rejected
Accepted
All Flows
 0
 1000
 2000
 3000
 4000
 5000
Bytes
 0
 0
 0.2
 1
 0.975
 0.95
 0.925
2000
1559
1100
322
390
160
 0.9
 0
 0.05
 0.1
failed-rejected
rejected-accepted
 0.4
 0.6
False positve
 0.8
 1
Fig. 3. Byte count distribution
Fig. 4. ROC curve for bytes per ﬂow metric
Table 1. Classiﬁcation performance for x bytes per ﬂow
x  1559
7 (0.07%)
Failed 9302 (95.64%)
Rejected 11008 (3.59%)
Accepted
55 (0.09%)
417 (4.28%)
409675 (96.66%)
1662 (2.74%)
3132 (0.74%)
58845 (97.16%)
The CDF of byte counts for ﬂows arriving at the mail server in week 1 is presented
in Fig 3. The class of failed connections mainly consists of very small ﬂows as only a
small number of packets could be sent. 97% of these ﬂows have less than 322 bytes.
The size of most rejected ﬂows is between 400 and 800 bytes. This corresponds to the
size of the SMTP envelope. Lastly, the distribution of accepted ﬂow sizes is dominated
by the overall email size distribution and reaches 50% at around 5000 bytes. This is
consistent with the ﬁndings of Gomes et al. [16]. The CDF for “all ﬂows” in Fig. 3 is a