Modeling Program Semantics with Logic Formulas. An
intuitive way is to represent program concrete semantics
with logic formulas (as in a typical symbolic execution ap-
proach [77]), and perform whole-program static reasoning
until a ﬁxed point is reached. The overall workﬂow exhibits
a typical dataﬂow analysis procedure, and upon termination,
each program point maintains a program state that maps vari-
ables (i.e., registers, CPU ﬂags, and memory cells) to sets of
formulas representing the possible values each variable may
hold regarding any execution paths and inputs. For ease of
USENIX Association
28th USENIX Security Symposium    659
x = A[key]key	=	10key	=	50key	should	be	10key	should	be	50Memory cellsCache linesholds the same public or secret symbol. Therefore, a
memory store could overturn the entire memory space.
• Even if memory addresses are tracked in a more pre-
cise way, representing any secret value and their de-
pendencies coarsely as one free secret symbol yields
many false positives (since secret-dependent memory
accesses do not necessarily lead to vulnerable cache ac-
cesses; see our cache modeling in Sec. 5). Tentative
tests of the AES case report a false positive rate of 20%
(8 out of 40) due to such modeling.
In contrast, our
novel program modeling yields no false positive when
testing this case (see Sec. 8).
Motivation of Our Approach. This paper presents a novel
abstract domain that enables abstract interpretation of large-
scale cryptosystems in the wild. Our observation is that im-
precise tracking of secrets impedes the accurate modeling
of cache behaviors (cache access modeling is discussed in
Sec. 5). Nevertheless, tracking too much information, such
as modeling whole-program semantics with logic formulas,
could face scalability issues when analyzing real-world cryp-
tosystems due to various practical challenges.
Our study of real-world cryptosystems actually reveals an
interesting and intuitive ﬁnding. That is, program secrets
and their dependencies usually exhibit at a very small por-
tion of program points, and even in such secret-carrying
points, most variables maintain only public information. It
should be noted that in common scenarios non-secret in-
formation is not critical for modeling cache-based timing
channels. Hence, based on our observation, we promote a
novel abstract domain that is particularly designed to model
the secret-dependent semantics of real-world crypto systems.
Our abstract domain delivers ﬁne-grained tracking of pro-
gram secrets and their dependencies with different identi-
ﬁers for each piece of secret information, while performing
coarse-grained tracking of other public values to effectively
enhance scalability.
4 Secret-Augmented Symbolic Domain
This section presents the deﬁnition of our abstract domain
SAS. We formally deﬁne each component following conven-
tion, including the concrete semantics, the abstract domain,
and the abstract transfer functions. We also prove that the
computations speciﬁed in SAS correctly over-approximate
concrete semantics. Due to space limitations, we highlight
only certain necessary components to make the paper self-
contained. We refer readers to the extended version of this
paper for more details [76] .
4.1 Abstract Values
We start by deﬁning abstract values f ∈ AV (soon we will
show that SAS is deﬁned as the powerset of AV). Compa-
rable to “symbolic formulas” in symbolic execution, f com-
bines symbols and constants via operators. Elementary sym-
bols in each abstract value are deﬁned as follows:
• p: a unique symbol representing all the program public
information.
∈ Z
n
⊕ ::= + | −
⊗ ::= × | ÷ | % | AND | OR | XOR | SHIFT
t
Literal
OP1
OP2
Atom
Expression exp ::= t | t ⊕ exp | t ⊗ exp
Formula
::= (cid:62) | p | si | n
::= e | exp | e⊕ exp
f
Figure 3: Syntax of abstract value.
• si: a symbol representing a piece of program secrets;
• e: a unique symbol representing the initial value of the
for instance, the i-th element of a secret array.
x86 stack register esp.
While only one free symbol p is used to represent any and
all unknown non-secret information (e.g., initial value edi0
of register edi in Fig. 1b), we retain ﬁner-grained informa-
tion about program secrets. Multiple si are generated, and
are mapped to different pieces of program secrets (e.g., a
symbol s1 representing k1 in Fig. 1c). Therefore, different
si symbols are semantically different, meaning each of them
stands for different secrets.
Syntax. The syntax of a core of abstract values f ∈ AV is
deﬁned in Fig. 3. Literal speciﬁes that concrete data is pre-
served in AV. OP1 and OP2 explain typical operators in
AV. Atom includes symbols and literals, among which (cid:62)
(top) is the abstraction of any concrete value. Expression
and Formula additionally deﬁne expressions and formulas.
Note that stack memory expands linearly in the process ad-
dress space, and stack register esp at any program point shall
hold a value which adds or subtracts an offset from the initial
value of esp (i.e., e). In the syntax deﬁnition, stack memory
offsets could be a constant or an exp.
Since the symbol {si} represents the secrets, which our
analysis intends to keep track of, the formulas that con-
tain these symbols usually need to be specially treated. We
denote this inﬁnite set of special formulas by AVs, where
AVs = { f ∈ AV | ∃s ∈ {si} s.t. s occurs in f}.
Reduction of Abstract Formulas. We now deﬁne the oper-
ator semantics of abstract value f ∈ AV. For any operator
(cid:12) ∈ {⊕}∪{⊗}, we deﬁne a reduction rule T(cid:12) : AV×AV →
AV such that(cid:74)a1 (cid:12) a2(cid:75) = T(cid:12)((cid:74)a1(cid:75),(cid:74)a2(cid:75)) for any a1,a2 ∈ AV,
where(cid:74)·(cid:75) denotes the semantics. We then deﬁne T(cid:12)(a1,a2)
as follows:
(cid:62)
(cid:62)
p
a1 (cid:12) a2
T(cid:12)(a1,a2) =
if a1 = (cid:62) or a2 = (cid:62)
else if a1 = p∧ a2 ∈ AVs or
a2 = p∧ a1 ∈ AVs
else if a1 = p∧ a2 /∈ AVs or
a2 = p∧ a1 /∈ AVs
otherwise
Essentially, the ﬁrst three cases perform reasonable over-
approximation on f ∈ AV with different degrees of abstrac-
tion. The last case would apply if no other case can be
matched; indeed similar to symbolic execution, most oper-
ations on f ∈ AV “concatenates” abstract values via abstract
660    28th USENIX Security Symposium
USENIX Association
operators following this rule. For the implementation, we
also implement “constant folding” rules for operands of con-
crete data; such rules help the reduction of stack increment
and decrement operations.
Since abstract interpretation typically needs to process
sets of facts, we extend T(cid:12) so that it can be applied to pairs
of subsets of abstract values f ∈ AV, where
∀X,Y ∈ P(AV),∀(cid:12) ∈ {⊕}∪{⊗},
T(cid:12)(X,Y ) = {T(cid:12)(a,b) | a ∈ X,b ∈ Y}
4.2 Abstract Domain
Naturally, each element in SAS represents the possible val-
ues that a program variable may hold; therefore each element
in SAS forms a set of abstract values. That is,
Deﬁnition 1. Let AV be the set of abstract values. Then
SAS = P(AV)
forms a domain whose elements are subsets of all valid ab-
stract values.
Claim 1. SAS forms a lattice, with the top element (cid:62)SAS,
bottom element ⊥SAS and a join operator (cid:116) deﬁned over
SAS.
We specify the (cid:62), ⊥, and join operator (cid:116) in Appendix A.
We bound the size of each element in SAS with a maximal
number N (therefore the lattice has a ﬁnite height) and give
corresponding evaluations in Appendix B. For further dis-
cussion, see the extended version [76].
Example. Fig. 1 explains typical computations within
SAS. We present a set of abstract values for each register
in Fig. 1c. While the computations over secret symbol si are
precisely tracked (line 3 in Fig. 1c), the computations over
p preserve this symbol (line 5 in Fig. 1c), and the computa-
tions between abstract value a ∈ AVs and p lead to (cid:62) (line 7
in Fig. 1c).
5 Pinpointing Information Leakage Sites
Upon the termination of static analysis, we check abstract
memory addresses of each memory load and store instruc-
tion. When a secret-dependent address a ∈ AVs is identi-
ﬁed, its corresponding memory access instruction is consid-
ered to be “secret-dependent.” We then translate each secret-
dependent address a into an SMT formula f for constraint
checking (this translation is discussed in Sec. 6.4).
In this research, we adopt a cache model proposed by the
existing work to check each secret-dependent memory ac-
cess [77]. Given an SMT formula f translated from a ∈ AVs
that represents a memory address, CacheS checks potential
cache line access variants by solving the satisﬁability of the
following predicate:
f (cid:29) L (cid:54)= f [s(cid:48)
i/si] (cid:29) L
(1)
As discussed in Sec. 2, assuming the cache has the line
size of 2L bytes, for a memory address of N bits, the up-
per N − L bits map a memory access to its corresponding
i, we obtain f [s(cid:48)
cache line access. In other words, the upper N−L bits decide
which cache line the upcoming memory access would visit.
Therefore, for an SMT formula f derived from a ∈ AVs, we
right shift f by L bits, and the result f (cid:29) L indicates the
cache line being accessed. Furthermore, by replacing each si
i/si] (cid:29) L. As a
with a fresh secret symbol s(cid:48)
standard setting, the cache line size is assumed to be 64 (26)
in this work; therefore, we set L as 6.
The constructed constraint checks whether different se-
crets (si and s(cid:48)
i) can lead to the access of different cache lines
at this memory access. Recall the threat model shown in
Fig. 2, the existence of at least one satisﬁable solution re-
veals potential side channels at this point. From an attacker’s
perspective, by (indirectly) observing the access of different
cache lines, a certain number of secrets could be leaked to
adversaries. In addition, while this constraint assumes that
accesses to different offsets within cache lines are indistin-
guishable, Constraint 1 can be extended to detect related is-
sues. For example, information leaks which enable cache
bank attacks can be detected by changing L from 6 to 2 [87].
6 Design of CacheS
We now present CacheS, a tool that uses precise and scal-
able static analysis to detect cache-based timing channels
in real-world cryptosystems. Fig. 4 presents the workﬂow
of CacheS. Given a binary as the input, CacheS ﬁrst lever-
ages a reverse engineering tool to recover the assembly code
and the control ﬂow structures from the input. The assem-
bly instructions are further lifted into platform-independent
representations before analysis. Technical details on reverse
engineering are discussed in Sec. 7.
Given all the recovered program information, we initialize
the abstract program state at each program point. In particu-
lar, we update the initial state of certain program points with
one or several “secret” symbols to represent program secrets
(e.g., a sequence of memory cells) when the analysis starts.
We then perform abstract interpretation on the whole pro-
gram until the ﬁxed point in SAS is reached.
Abstract
interpretation reasons the program execution
within SAS (Sec. 6.1), and as mentioned, the proposed ab-
stract domain performs ﬁne-grained tracking of program
secret-related semantics while maintaining only coarse-
grained public information for scalability. The entire anal-
ysis framework forms a standard worklist algorithm, where
each program point maintains its own program state mapping
variables to sets of abstract values (Sec. 6.1.2).
We deﬁne information ﬂow rules to propagate secret in-
formation (Sec. 6.2) in our context-sensitive and interproce-
dural analysis (Sec. 6.3). Upon the termination of analyz-
ing one function, we identify secret-dependent memory ac-
cesses and translate corresponding memory addressing for-
mulas into SMT formulas (Sec. 6.4) and check for side chan-
nels (Sec. 5).
Application Scope. In this research we design our abstract
domain SAS to analyze assembly code: program memory
access can be accurately uncovered by analyzing assembly
USENIX Association
28th USENIX Security Symposium    661
Figure 4: The overall workﬂow of CacheS.
code, thus supporting a “down-to-earth” modeling of cache
behavior (see Sec. 5).
To assist the analysis of off-the-shelf cryptosystems and
capture information leaks in the wild, we designed CacheS to
directly process binary executables, including stripped exe-
cutables with no debug or relocation information. We rely on
reverse engineering tools to recover program control struc-
tures from the input binary, and further build our analysis
framework on top of that (see Sec. 7).
6.1 Abstract Interpretation
In this section, we discuss how the proposed abstract do-
main SAS is adopted in our tool, and elaborate on several
key points to deliver a practical and scalable analysis.
6.1.1 Initialization
Before the analysis, we ﬁrst initialize certain program points
with {si} to represent the initial secret program information;
for the rest their corresponding initial states are naturally de-
ﬁned as {}, or {e} for the stack register esp.
Program secrets are maintained in registers or memory
cells (e.g., on the stack) during execution. Since CacheS is
designed to directly analyze binary code, we must ﬁrst rec-
ognize the location of program secrets. We reverse-engineer
the input binary and mark the location of secrets manually.
Once the locations of secrets are ﬂagged, we update the ini-
tial value set of corresponding variables (i.e., registers or
memory cells) with a secret symbol si. Additionally, while
“manual reverse engineering” is sufﬁcient for studies in this
research, it is always feasible to leverage automatic tech-
niques [26] to search for secrets directly from executables or
secret-aware compilers to track secret locations when source
code is available. We leave this to future work.
In addition, since program secrets may be stored in a re-
gion of sequential memory cells (e.g., in an array), we create
another identiﬁer named u to represent the base address of
the secret memory region. While u itself is treated as pub-
lic information, we specify that memory loading from u will
obtain program secrets; that is, we introduce one si for each
memory loading via u.
6.1.2 Program State
At each program point, CacheS maintains a lookup table that
maps variables to value sets; each value set S ∈ SAS consists
of abstract values f ∈ AV representing possible values of a
variable at the current program point. While the “lookup
table” is an essential piece of any non-trivial analysis frame-
work, our study has shown that naively-designed program
state representations in CacheS could consume signiﬁcant
Figure 5: A sample program state lookup table. esp0, eax0
and esi0 in the “key” and “value” entries are symbols repre-
senting the register initial values. Symbol ! means pointer
dereference, for example !(eax) means memory loading
from address stored in eax. Lookup tables at each program
point are the major factor for memory usage, and we op-
timize the design by replacing “key” and “value” columns
with “new key” and “new value” columns, respectively (see
Sec. 6.1.2). Hence, shaded boxes are eliminated in CacheS.
amounts of computing resources and impede the analysis of
non-trivial programs. Thus, at this step we seek to design a
concise and practical representation of program states. For
the rest of this section, we ﬁrst explain a “baseline” imple-
mentation of the lookup table, and further discuss two reﬁne-
ments.
The “Baseline” Approach. A sample lookup table is shown
in Fig. 5 (the “key” and “value” columns), where each table
maps registers and memory addressing formulas to their cor-
responding sets for logic formulas l ∈ L. When it encounters
a memory access instruction, CacheS computes the mem-
ory addressing formula and searches for its existence in the
lookup table. (This requires some “equivalence checking”;
the details will be explained in Sec. 6.1.4).
If the search
identiﬁes an entry in the table, CacheS extracts or updates
the content of that entry accordingly. Consider the example
in Listing 1, where we ﬁrst store concrete data 14 into mem-
ory via address stored in eax, and further load it out into
ebx.
Listing 1: Sample instructions.
store eax , 14
load
ebx , eax
662    28th USENIX Security Symposium
USENIX Association