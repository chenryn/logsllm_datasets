Another tool of note, the Chrome ExtensionBB10/PlayBook App Manager, provides a convenient method of
sideloading apps and generally controlling what is installed
(https://chrome.google.com/webstore/detail/bb10-playbook-app-
manager/kmbaalodpmjjhpobkgljnelbpblnikkp?hl=en).
In enterprises, BlackBerry World introduces a concept of a work channel:
…application can be deployed over-the-air by administrators as an optional application or as a required
application, where the user cannot remove it.
−http://developer.blackberry.com/distribute/enterprise_application_distribution.html
This feature allows administrators to control and mandate which apps are installed or installable on enterprise-
managed devices using the core AppWorld technologies and distribution mechanisms.
PPS Objects
PPS is a long-standing QNX concept that has been used extensively in the context of BlackBerry 10. QNX
describes PPS as follows:
The QNX Persistent Publish/Subscribe (PPS) service is a small, extensible publish/subscribe service that
offers persistence across reboots. It is designed to provide a simple and easy-to-use solution for both
publish/subscribe and persistence in embedded systems, answering a need for building loosely connected
systems using asynchronous publications and notifications.
With PPS, publishing is asynchronous: the subscriber need not be waiting for the publisher. In fact, the
publisher and subscriber rarely know each other; their only connection is an object which has a meaning and
purpose for both publisher and subscriber.
−http://www.qnx.co.uk/developers/docs/6.5.0/index.jsp?
topic=%2Fcom.qnx.doc.neutrino_pps%2Fpps.html
As with Authman and Launcher, PPS has been reused for certain high-level purposes in other QNX-derived
platforms, thus the PPS Object Reference for QNX CAR translates in a majority of cases to BlackBerry 10
(http://support7 .qnx.com/download/download/26319/PPS_Objects_Reference.pdf).
Generally, these PPS objects are not accessed directly; instead they are abstracted by higher level APIs that
BlackBerry makes available to developers via libraries. An example of this abstraction is when using the
Bluetooth API published by BlackBerry
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.bluetooth/topic/t_bluetooth_use_spp.html
and actually uses PPS under the hood.
This knowledge can be useful when you're researching the platform for exposed, yet undocumented features in
devices and service endpoints.
Understanding the BlackBerry 10 Security Model
Most of the BlackBerry-specific aspects of QNX are higher-level concepts that are built on top of operating
system primitives. For example, app sandboxing is primarily enforced through a combination of user and group
filesystem permissions (for varying definitions of the file), separate operating system users and associated
groups for each app, and PF firewall rules. In the sections that follow we describe these features in more detail.
Process Sandboxing
For BlackBerry 10 process sandboxing is described in some detail in the “BlackBerry Enterprise Server 10
Technical Overview” (http://docs.blackberry
.com/en/admin/deliverables/66547/BES10_v10.2.4_BDS_Security_Technical_Overview_en.pdf). It also
discusses in detail app sandboxing:
The BlackBerry 10 OS uses a security mechanism called sandboxing to separate and restrict the capabilities
and permissions of apps that run on the BlackBerry 10 device. Each application process runs in its own
sandbox, which is a virtual container that consists of the memory and the part of the filesystem that the
application process has access to at a specific time.
Each sandbox is associated with both the app and the space that it is used in. For example, an app on a
BlackBerry Balance device can have one sandbox in the personal space and another sandbox in the work
space; each sandbox is isolated from the other sandbox.
The BlackBerry 10 OS evaluates the requests that an application's process makes for memory outside of its
sandbox. If a process tries to access memory outside of its sandbox without approval from the BlackBerry 10
OS, the BlackBerry 10 OS ends the process, reclaims all of the memory that the process is using, and restarts
the process without negatively affecting other processes.
When the BlackBerry 10 OS is installed, it assigns a unique group ID to each app. Two apps cannot share the
same group ID, and the BlackBerry 10 OS does not reuse group IDs after apps are removed. An app's group ID
remains the same when the app is upgraded.
−http://docs.blackberry.com/en/admin/deliverables/66547/BES10_v10.2.4_BDS_Security_Technical_Overview_en.pdf
Application Capabilities
Within BlackBerry 10 a core security foundation is the per-process capabilities model. The existence of this
high-level capability context is detailed in the “Security Technical Overview for BlackBerry Device Service 6.0
and BlackBerry PlayBook Tablet 2.0” document (http://docs.blackberry.com/en/admin/
deliverables/40478/BlackBerry_Device_Service_6.0_and_BlackBerry_PlayBook_Tablet_2.0.1-
Security_Technical_Overview-1329934562720-6.0-en.pdf). PlayBook OS was the precursor to BlackBerry 10,
and many fundamental concepts were devised during its design.
The PlayBook OS uses sandboxing to separate and restrict the capabilities and permissions of applications
that run on the tablet. Each application process runs in its own sandbox.
…
The BlackBerry PlayBook tablet is designed to minimize the number of processes running as root. Only the
most essential first-party processes and no third-party processes can run as root. A subset of root capabilities
is available to first-party processes that do not need full root capabilities.…
The kernel validates requests for resources and an authorization manager controls how applications access
the capabilities of the tablet.
BlackBerry publishes a list of permissions that are allowed in third party–developed apps
(http://developer.blackberry.com/native/documentation/core/com.qnx.doc.native_sdk.devguide/topic/c_appfund_accessing_restricted_functionality.html
These are as of September 2014 (article last updated July 2014):
bbm_connect—Connect to BlackBerry Messenger (BBM). You can use this permission to access contact lists
and user profiles, invite BBM contacts to download your app, initiate BBM chats, share content from within
your app, and stream data between apps.
access_pimdomain_calendars—Access the calendar on the device. This access includes viewing, adding, and
deleting calendar appointments.
use_camera—Access data that's received from the cameras on the device. With this permission, your app can
take pictures, record videos, and use the flash.
use_camera_desktop—Take a screenshot or video of any information visible on the screen of the device. This
permission also allows the app to share the user's screen.
access_pimdomain_contacts—Access the contacts that are stored on the device. This access includes viewing,
creating, and deleting contacts.
read_device_identifying_ information—Access unique device identifiers, such as the PIN or the serial
number. This permission also allows you to access SIM card information on the device.
access_pimdomain_messages—Access the email and PIN messages that are stored on the device. This access
includes viewing, creating, sending, and deleting messages.
use_gamepad—Access gamepad functionality. This permission also indicates that the app has official gamepad
support in the BlackBerry World storefront.
read_geolocation—Read the current GPS location of the device (deprecated).
_sys__manage_pimdomain_ external_accounts *—Create a custom account that's accessible in the
BlackBerry Hub. This capability requires special permissions from BlackBerry.
_sys_access_pim_unified *—Integrate with the BlackBerry Hub. With this permission, your app can create
and manage data in the BlackBerry Hub. This capability requires special permissions from BlackBerry.
access_internet—Use the Internet connection from a Wi-Fi, wired, or other type of connection to access
locations that are not local on the device.
access_location_services—Access the current location of the device, as well as locations that the user has
saved.
record_audio—Access the audio stream from the microphone on the device.
read_personally_identifiable_information—Access user information on the device, such as the first name,
last name, and BlackBerry ID username of the user currently associated with this device.
narrow_landscape_exit—Reduce the width of the region along the bottom bezel of the device that accepts
swipe-up gestures. When you use this permission, swipe-up gestures are recognized in a more narrow area
along the bottom bezel.
access_pimdomain_notebooks—Access the content that's stored in notebooks on the device. This access
includes adding entries to, and deleting entries from, the notebooks.
access_notify_settings_control—Change global notification settings. Apps have permission to read their
own notification settings.
access_phone—Determine when a user is on a phone call. This access also allows an app to access the phone
number assigned to the device and send DTMF (Dual Tone Multi-Frequency) tones.
_sys_inject_voice—Add audio to a phone call.
read_phonecall_details—View the status of phone calls that are in progress and the phone number of the
remote party.
access_pimdomain_calllogs—View the logs of previous incoming or outgoing phone calls.
control_phone—Control the current phone call. This access includes ending a phone call and sending DTMF
tones to the phone.
post_notification—Post notifications to the notification area of the device screen. This permission does not
require the user to grant your app access.
_sys_use_consumer_push—Access the Push service to receive and request push messages.
run_when_backgrounded—Perform background processing. Without this permission, your app stops all
processing when the user changes focus to another app.
_sys_run_headless—Perform certain tasks in the background, without opening the app, for a short period of
time.
_sys_headless_nostop—Run in the background always. You must request access before your app can run as a
long-running headless app.
access_shared—Read and write files that are shared between all apps on the device. With this permission,
your app can access pictures, music, documents, and other files that are stored on the user's device, at a
remote storage provider, or on a media card.
_sys_access_smartcard_api*—Encrypt, decrypt, sign, and verify data using a smartcard. This capability
requires special permissions from BlackBerry.
_sys_smart_card_driver*—Allow third-party smartcard drivers and smartcard reader drivers to integrate
with the Smartcard service. This capability requires special permissions from BlackBerry.
_sys_access_extended_smart_card_functionality *—Use APDU (Application Protocol Data Unit) for
custom commands. This permission is restricted. This capability requires special permissions from
BlackBerry.
access_sms_mms—Access the text messages that are stored on the device. This access includes viewing,
creating, sending, and deleting text messages.
access_wifi_public—Receive Wi-Fi event notifications such as Wi-Fi scan results or changes in the Wi-Fi
connection state.
Code Signing
As you would expect there is code signing on BlackBerry 10. This is done to ensure integrity of the BARs as well
as to authorize the use of capabilities within your app:
Each app must be signed to allow BlackBerry to validate the application's capabilities and issue unique
identifiers for it.
However, in recent SDKs you don't actually have to back up and look after the keys yourself. These are taken
care of by being stored under your BlackBerry ID (yes, this does mean BlackBerry has a copy
(http://devblog.blackberry .com/2013/08/code-signing-keys-be-gone-welcome-blackberry-id/). The signing
process itself is simple to do:
blackberry-signer -proxyhost 192.168.1.1 -proxyport 80 -register -csjpin
 -storepass  
BlackBerry Balance
BlackBerry Balance (mentioned in a quotation earlier in this chapter) is a technology that allows two digital
worlds to exist—one for corporate data and one for personal. BlackBerry provides extensive documentation on
the architecture of this technology in the document “How BlackBerry Balance Works at a Platform Level”
(http://uk.blackberry.com/content/dam/blackBerry/pdf/business/english/Separating-Work-and-Personal-
How-BlackBerry-Balance-Works-at-the-Platform-Level.pdf) and in the already-mentioned “BlackBerry
Enterprise Server 10 Technical Overview.”
However, in the context of BlackBerry Balance, recognizing that the separation is only as robust as the kernel
and the associated integrity mechanisms is important. BlackBerry Balance is not implemented as a hypervisor
(virtualization) with two separate kernels. Instead it is implemented within the same kernel using a mixture of
filesystem, object controls, higher-level capabilities, and logical separation to provide the dual world. BlackBerry
Balance can be thought of as akin to Samsung's KNOX for Android, and it is useful to understand the limitations
of this architecture.
BlackBerry Balance offers the following at its core:
Process separation—Enforced by the QNX kernel
Process capabilities—To control what level of access a process has
Process users—To facilitate separation and restrict what resources a process can access
Process groups—To facilitate separation and restrict what resources a process can access
Access control lists—On file object
Firewall rules—Restricts network traffic including traffic destined for local host
NOTE
For details on the exploit mitigation features refer to Chapter 17 and the section titled, “Compiler and
Linker Defenses.”
BlackBerry 10 Jailbreaking
One public jailbreak thus far has affected QNX-based BlackBerry devices — DingleBerry, released in November
2011 (http://crackberry.com/so-you-want-rootjailbreak-your-blackberry-playbook-dingleberry-
here%E2%80%99s-how-do-it). No jailbreaks have directly affected BlackBerry 10. However, this jailbreak is worth
discussing in the context of the platform because the PlayBook OS provides the foundations to BlackBerry 10.
The DingleBerry jailbreak worked by exploiting a weakness in the backup and restore process, which allowed the
overwriting of the smb.conf file used by the Samba server that ran as root. In short, a window of opportunity
during the restore process allowed the overwriting of smb.conf to have it reinterpreted by the Samba daemon.
Thus allowing the execution of arbitrary commands as root. This ability was then used to allow root to SSH
(Secure Shell) into the device and thus provide a jailbreak.
This example demonstrates that, as with all mobile OSs (Linux/Android, Linux/FireFoxOS, iOS, Windows
Phone, and so on), the goal of a jailbreak is to escalate privileges to root or higher.
In response to this type of risk, BlackBerry introduced a number of new defense in-depth mechanisms designed
to improve device integrity verification. These mechanisms were designed to thwart similar exploitation
techniques if discovered and used in the future.
However, jailbreaking the simulator is still possible. Note: This is not considered a security issue and is an
accepted risk. Jailbreaking the simulator is possible because no chain of trust exists from the CPU and beyond
during the boot and execution process to verify code signing of the different software components.
Thus if you are looking to investigate the platform or assess apps that don't have a native code element in a
dynamic manner, then the jailbreaking capability may be useful. The most common way to leverage the
capability to jailbreak (in the loosest sense of the term) is to run an app within the simulator, boot a standard
QNX image, and mount the virtual storage that was previously attached to the BlackBerry 10 simulator within
VMware. This approach allows you to investigate the data stored and generated logs that would otherwise be off
limits.
If, on the other hand, you do have an app that needs to be run on a real device due to the use of native code, you
can repackage the BAR file and use Developer mode to run the device within the devuser context.
Using Developer Mode
Developer mode enables you to sideload apps onto the device outside of AppWorld, which allows you to SSH
into the device as devuser and run unsigned binaries. To do this, follow these steps:
1. Enable Developer mode by going to Settings Security & Privacy Developer Mode as shown in Figure 14.1.
A notification appears in the Hub.
2. Generate an RSA 4096 key pair; for example, on Linux:
ssh-keygen -b 4096 -t rsa
3. Run blackberry-connect from the SDK to transfer the public key to the device:
blackberry-connect YOUR_DEVICEIP -password YOUR_DEVICE_PASSWD
-sshPublicKey id_rsa.pub
4. You should see output similar to the following if the connection is successful:
./blackberry-connect 169.254.0.1 -devicePassword BB4Life
-sshPublicKey Key_4096_rsa.pub
Info: Connecting to target 169.254.0.1:4455
Info: Authenticating with target 169.254.0.1:4455
Info: Encryption parameters verified
Info: Authenticating with target credentials.
Info: Successfully authenticated with target credentials.
Info: Sending ssh key to target 169.254.0.1:4455
Info: ssh key successfully transferred.
Info: Successfully connected. This application must remain running in
order to use debug tools. Exiting the application will terminate this
connection.
5. You can now SSH into the device using the private key as devuser:
ssh devuser@YOUR_DEVICE_IP_ADDRESS
Voilà — you will be SSHed in and able to run compiled binaries of your choice within the constraints of
devuser.
Figure 14.1 The Developer Mode menu
To install apps in a non-release manner you need a debug token. This allows you to install apps via the
blackberry-deploy tool but only on the device to which the debug token is assigned. Note that debug tokens are
valid for only 30 days by default and thus their value in real-world deployments is limited.
The BlackBerry 10 Device Simulator
The BlackBerry 10 Device Simulator design (http://developer.blackberry .com/develop/simulator/)
represents a departure in terms of approach when compared to BlackBerry Legacy. Due to architectural
differences between the device and a PC (ARM versus X86/X64), VMWare Virtual Machine images are used.
Due to the use of Virtual Machine images there are both positive and negative aspects. The primary positive is
that these images are easy to investigate and get root on the platform via a number of ways.
As previously mentioned the most common way to get root is to mount the disk using a standard QNX image
(http://www.qnx.com/download/feature .html?programid=21367) and either replace a binary or modify the
configuration files to yield root access (such as smb.conf). The negative aspect of using the simulator is that due
to the architectural differences you can't run native code that is intended for a device on the simulator.
However, for WebWorks and Android apps, the simulator can still be highly effective as a means to doing
analysis due to no difference other than CPU architecture when compared to a real device.
Accessing App Data from a Device
In the very earliest days of BlackBerry PlayBook, obtaining access to the backed-up app data the .bbb files
produced was possible via Desktop Manager. This ability, however, raised concerns from multiple software
vendors due to the risk of piracy on the platform. So to combat this issue BlackBerry started encrypting the .tar
files, which are contained in the .bbb named zip files prior to transfer to the desktop. Elcomsoft publicly
disclosed how the backup encryption worked:
Backups generated by BlackBerry Link are encrypted using the key generated by BlackBerry servers, provided
the BlackBerry ID, password, and device ID. The first and third components can be obtained from the backup
itself, and if you have the password, then we are able to get the encryption key and decrypt the backup
−http://www.forensicfocus.com/Forums/viewtopic/
printertopic=1/t=10493/start=7/postdays=0/postorder=asc/vote=viewresult/
Elcomsoft's capability to decrypt BlackBerry 10 backups has subsequently been incorporated into two
commercial products:
Elcomsoft Phone Password Breaker Forensic Edition—http://www .elcomsoft.co.uk/eppb.html –
http://www.elcomsoft.co.uk/help/en/eppb/decrypt_blackberry_link_backup.html
Oxygen Forensic® Suite 2014, which licenses Elcomsoft's technology—http://www.oxygen-
forensic.com/en/events/press-releases/326-oxygen-forensic-suite-2014-breaks-into-blackberry-10-
backups
Using this approach of decrypting the backup files using either of the products mentioned you can access
configuration files and logs from a live device, as shown in Figure 14.2.
Figure 14.2 Elcomsoft cracking the BlackBerry backup encryption
After the backups are decrypted, you end up with a .bbb file that contains three .tar files. The appdata.tar file
contains the app-related information you are interested in for each of the installed applications.
Accessing BAR Files
Accessing BAR files for arbitrary applications in BlackBerry World (formerly App World) isn't currently