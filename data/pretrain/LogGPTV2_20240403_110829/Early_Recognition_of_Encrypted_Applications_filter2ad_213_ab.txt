n
o
i
t
r
o
p
o
r
P
0.4
0.3
0.2
0.1
0
3
4
5
7
6
10
First Application packet
8
9
11
12
Fig. 3. Position of the ﬁrst packet with application data
5.3 Application Identiﬁcation
Once we have identiﬁed an SSL connection and the packets corresponding to the ap-
plication, we recognize the encrypted application based on the sizes of its packets. SSL
can use different encryption algorithms, which will modify packet sizes differently.
Figure 4(a) shows the most common encryption algorithm used in the P6-2004 and P6-
2006 traces. The speciﬁcations for SSL allows for more than 50 encryption methods.
However, we can see that the ﬁve most common algorithms account for more than 98%
of SSL connections.
Cipher
RC4 128 MD5 (0x04)
DHE-RSA-AES256-SHA (0x39)
AES 256 SHA (0x35)
RC4 128 SHA (0x05)
RC4 40 MD5 (0x03)
Other
P6-2004 P6-2006
79.7% 66.0%
5.9% 13.6%
1.0% 10.4%
7.0%
9.7%
2.0%
2.1%
< 2% < 1%
140
120
100
80
60
40
20
t
e
k
c
a
P
d
e
t
p
y
r
c
n
E
f
o
e
z
S
i
(a) Proportion of each cipher
Not encrypted
AES (0x35, 0x39)
RC4_xx_MD5 (0x03, 0x04)
RCA_128_SHA (0x05)
10
20
40
30
80
(b) Size of encrypted packets
Packet Size (Bytes)
50
60
70
90
100
Fig. 4. SSL ciphers
To evaluate the inﬂuence of encryption algorithms on the sizes of exchanged pack-
ets, we design a small application that sends packets with different sizes over an SSL
connection. Figure 4(b) shows the relationship between the size of application payload
and the ﬁnal size of the ciphered packet depending on the encryption algorithm (we
focus on packets with less than 100 bytes, but the evolution remains the same for larger
values). This ﬁgure shows that encryption mechanisms increase the size of the packets
by an amount that depends on the cipher. For RC4 based ciphers, this increase is ﬁxed:
172
L. Bernaille and R. Teixeira
25 bytes for RC4 128 SHA and 21 bytes for the other two. For AES-based ciphers, the
increase varies by steps, because they use blocks.
These results are encouraging because even if encryption alters packet sizes, this
change is limited and predictable. The most accurate method to decide on the size of
the original packet, is to look up the encryption method in the handshake packets and
transform the size of application packets accordingly. However, for the ﬁve most com-
mon ciphers this method is overkill because the increase varies from 21 to 33 bytes.
Therefore, instead of keeping track of the cipher, we use a simple heuristic to decide
on the size of the original packet: subtract 21 from the size of the encrypted packet
regardless of the cipher.
We apply the same method of section 5.1 to the transformed sizes of the ﬁrst packets
with encrypted data to decide on the encrypted application. We extend the Cluster+Port
labeling heuristic to take into account SSL-speciﬁc ports: we use 443 for HTTPS, 993
for IMAPS and 995 for POP3S.
6 Evaluation
In this section, we ﬁrst evaluate our method to recognize SSL on the P6-2006 trace.
Then, we validate our method to recognize encrypted applications on real Https and
Pop3s trafﬁc extracted from the P6-2006 trace and on manually encrypted connections.
The test sets do not include any of the training samples.
6.1 Recognition of SSL Trafﬁc
To evaluate the accuracy of our classiﬁer to recognize SSL connections, we use two
metrics: the proportion of connections accurately classiﬁed for all applications in our
test data set (True Positives) and the proportion of connections that are wrongly labeled
with each application (False Positives). Our test set consists of 50,000 connections, with
more than 2,000 connections for each application. Table 2 presents both metrics for our
two labeling heuristics: Dominant and Cluster+Port (deﬁned in Section 5.1). Most mis-
classiﬁcation errors for the Dominant heuristic happen when a connection is assigned to
a cluster consisting of two (or more) applications and does not belong to the application
that predominates. For all protocols the use of the Cluster+Port improves the quality of
the classiﬁcation because the port number helps determinate the application. Even with
Cluster+Port there are some misclassifcations. These misclassiﬁcations happen when a
connection in the test set follows a behavior that was not present in the training set or
when a connection is assigned to a cluster with more than one application and when the
server port does not help.
This table shows that our classiﬁer, based on the sizes of the ﬁrst three data packets
achieves a very high accuracy and that it recognizes SSLv2 and SSLv3 for more than
80% of the connections with Cluster+Port. With the Dominant heuristic, some SSL
connections are assigned to clusters which contain SSL and another application that
predominates. The reason for the 2.3% of false positives for SSLv2 is that, some SSLv3
connections are classiﬁed as SSLv2 (hence the only 81% true positives for SSLv3). This
is not unexpected because behaviors of SSLv2 and SSLv3 are similar in some cases.
Early Recognition of Encrypted Applications
173
Table 2. Application detection, including SSL(P6-2006 Trace)
Heuristice
Application True Positives False Positives True Positives False Positives
Cluster+Port
Dominant
bittorent
edonkey
ftp
http
msn
nntp
pop3
smtp
ssh
sslv2
sslv3
74.65%
94.76%
91.00%
96.50%
95.36%
94.40%
96.65%
86.35%
97.73%
82.07%
67.75%
0.01%
2.89%
0.04%
2.96%
0.90%
0.34%
2.67%
0.42%
0.00%
2.20%
0.33%
97.30%
95.08%
97.95%
98.95%
100.00%
99.15%
99.25%
98.85%
96.10%
94.71%
81.20%
0.23%
0.18%
0.04%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
2.30%
0.27%
However, we can easily limit the impact of this misclassiﬁcation by inspecting packets
from connections classiﬁed as SSLv2 to decide on the real SSL version that is used.
6.2 Recognition of Encrypted Applications
We evaluate the recognition of encrypted applications on two different test sets. First,
we extract real HTTPS and POP3S connections from the P6-2006 trace: we ﬁlter SSL
trafﬁc directed to known web and mail servers from the university and obtain more than
5000 connections for both applications. Then, to evaluate our method against other ap-
plications, we manually encrypt 500 connections of FTP, Bittorent and Edonkey trafﬁc
and apply our classiﬁer on resulting connections. We perform this classiﬁcation using
the same model we used in section 6.1 and therefore each connection was given a label
among the 11 applications in our model.
Table 3 presents the proportion of connections correctly labeled. This table shows
that applications that often use SSL (HTTP and POP3) are very well recognized when
they are encrypted. The last three rows of this table evaluate our mechanism for ap-
plications that cannot be detected with port-based methods and are usually recognized
based on signatures. Our classiﬁer accurately classiﬁes these applications when they are
encrypted with more than 85% accuracy for the Cluster+port heuristic. We tested this
classiﬁcation without the modiﬁcation of the payload size (i.e. without subtracting 21
Table 3. Detection of Encrypted Applications (HTTP and POP from P6-2006 trace, FTP, Bit-
torent, Edonkey manually encrypted)
Real Applications Dominant Cluster+Port Manually Encrypted Dominant Cluster+Port
http
pop3
99.95%
98.45%
99.95%
98.45%
ftp
bittorent
edonkey
90.58%
77.87%
94.56%
92.67%
86.48%
96.57%
174
L. Bernaille and R. Teixeira
bytes to each encrypted payload). The results where not as good but we were still able
to achieve more than 80% accuracy for the Cluster+Port heuristic.
7 Conclusion
The contributions of this paper are two-fold. First, a characterization of SSL usage
on two campus networks. Our analysis shows that the usage of SSL is growing and
that the number of applications using SSL is increasing. Second, a mechanism to rec-
ognize the underlying application in SSL encrypted connections based on the size
of the ﬁrst packets in the connections. We show that our method achieves more than
85% accuracy. The implementation and the data used in this study are available at:
http://rp.lip6.fr/ bernaill/earlyclassif.html.
In future work, we plan to extend our method to other encryption mechanisms such
as SSH and IPsec. For both these protocols, the isolation of connections and the deter-
mination of the ﬁrst application packets will be more challenging. Besides, the latest
SSL implementations include options for compressing data and sending empty seg-
ments. These options would affect our detection mechanism and we plan to extend it to
take them into account.
Acknowledgements
This study was achieved with ﬁnancial support from the RNRT through the project
OSCAR and from the ACI “S´ecurit´e Informatique” through the project METROSEC.
References
1. Karagiannis, T., Broido, A., Brownlee, N., Claffy, K., Faloutsos, M.: Is p2p dying or just
hiding? In: Globecom. (2004)
2. Paxson, V.: Bro: a system for detecting network intruders in real-time. Computer Networks
(Amsterdam, Netherlands: 1999) 31 (1999) 2435–2463
3. Snort: http://www.snort.org.
4. Ma, Levchenko, Kreibich, Savage, Voelker: Unexpected means of protocol inference. In:
Internet Measurement Confererence. (2006)
5. Song, D.X., Wagner, D., Tian, X.: Timing analysis of keystrokes and timing attacks on ssh.
In: Proc. 10th USENIX Security Symposium. (2001)
6. Hintz, A.: Fingerprinting websites using trafﬁc analysis (2002)
7. Roughan, M., Sen, S., Spatscheck, O., Dufﬁeld, N.: A statistical signature-based approach
to ip trafﬁc classiﬁcation. In: IMC. (2004)
8. McGregor, A., Hall, M., Lorier, P., Brunskill, J.: Flow clustering using machine learning
techniques. In: Passive and Active Measurement. (2004)
9. Zuev, D., Moore, A.: Trafﬁc classiﬁcation using a statistical approach. In: Passive and Active
Measurement. (2005)
10. Moore, A., Zuev, D.: Internet trafﬁc classiﬁcation using bayesian analysis. In: Sigmetrics.
(2005)
11. Erman, J., Arlitt, M., Mahanti, A.: Trafﬁc classiﬁcation using clustering algorithms.
In:
MineNet ’06: Proceedings of the 2006 SIGCOMM workshop on Mining network data, New
York, NY, USA, ACM Press (2006) 281–286
Early Recognition of Encrypted Applications
175
12. Bernaille, L., Teixeira, R., Akodkenou, I., Soule, A., Salamatian, K.: Trafﬁc classiﬁcation on
the ﬂy. SIGCOMM Comput. Commun. Rev. 36 (2006) 23–26
13. Bernaille, L., Teixeira, R., Salamatian, K.: Early application identiﬁcation. In: To appear in
Conference on Future Networking Technologies. (2006)
14. Wright, Monrose, Masson: On inferring application protocol behaviors in encrypted network
trafﬁc. the Journal of Machine Learning Research Special Topic on Machine Learning for
Computer Security (2006)
15. Karagiannis, T., Papagiannaki, D., Faloutsos, M.: Blinc: Multilevel trafﬁc classiﬁcation in
the dark. In: SIGCOMM. (2005)
16. Wright, Monrose, Masson: Using visual motifs to classify encrypted trafﬁc. Workshop on
Visualization for Computer Security (2006)
17. SSLv2: http://wp.netscape.com/eng/security/SSL 2.html.
18. SSLv3.0: http://wp.netscape.com/eng/ssl3/draft302.txt.
19. TLS: http://www.ietf.org/rfc/rfc2246.txt.
20. Netcraft: http://www.netcraft.com.