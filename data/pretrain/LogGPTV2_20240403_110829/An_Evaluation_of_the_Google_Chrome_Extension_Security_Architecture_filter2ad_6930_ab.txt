14
5
3
6
Popular
Random
15
2
6
18
12
1
11
22
Total
27
3
17
40
Vulnerable Component
Core extension
Content script
Website
Any
Table 2: The number of extensions with vulnerabilities,
of 50 popular and 50 randomly-selected extensions.
3.2 Vulnerabilities
We found 70 vulnerabilities across 40 extensions. The
appendix identiﬁes the vulnerable extensions. Table 1
categorizes the vulnerabilities by the location of the vul-
nerability and the type of attacker that could exploit it.
More of the vulnerabilities can be leveraged by a net-
work attacker than by a web attacker, which reﬂects the
fact that two of the Chrome extension platform’s secu-
rity measures were primarily designed to prevent web at-
tacks. A bug may be vulnerable to both web and network
attacks; we count it as a single vulnerability but list it in
both categories in Table 1 for illustrative purposes.
The vulnerabilities are evenly distributed between
popular and randomly-selected extensions.
Table 2
shows the distribution. Although popular extensions are
more likely to be professionally written, this does not
result in a lower vulnerability rate in the set of popular
extensions that we examined. We hypothesize that pop-
ular extensions have more complex communication with
websites and servers, which increases their attack sur-
face and neutralizes the security beneﬁts of having been
professionally developed. The most popular vulnerable
extension had 768,154 users in June 2011.
3.3 Developer Security Effort
Most extension developers are not security experts.
However, there are two best practices that a security-
conscious extension developer can follow without any
expertise. First, developers can use HTTPS instead of
HTTP when it is available, to prevent a network attacker
from inserting data or code into an extension. Second,
developers can use innerText instead of innerHTML
when adding untrusted, non-HTML data to a page;
innerText does not allow inline scripts to execute. We
evaluate developers’ use of these best practices in order
to determine how security-conscious they are.
We ﬁnd that 31 extensions contain at least one vulner-
ability that was caused by not following these two sim-
ple best practices. This demonstrates that a substantial
fraction of developers do not make use of optional se-
curity mechanisms, even if the security mechanisms are
very simple to understand and use. As such, we advocate
mandatory security mechanisms that force developers to
follow best security practices (Section 7).
3.4 Author Notiﬁcation
We disclosed the extensions’ vulnerabilities to all of the
developers that we were able to contact. We found con-
tact information for 80% of the vulnerable extensions.5
Developers were contacted between June and September
2011, depending on when we completed each review. We
sent developers follow-up e-mails if they did not respond
to our initial vulnerability disclosure within a month.
Of the 32 developers that we contacted, 19 acknowl-
edged and ﬁxed the vulnerabilities in their extensions,
and 7 acknowledged the vulnerabilities but have not
completely ﬁxed them as of February 7, 2012. Two of
the un-patched extensions are ofﬁcial Google extensions.
As requested, we provided guidance on how the security
bugs could be ﬁxed. None of the developers disputed the
legitimacy of the vulnerabilities, although one developer
argued that a vulnerability was too difﬁcult to ﬁx.
The appendix identiﬁes the extensions that have been
ﬁxed. However, the “ﬁxed” extensions are not necessar-
ily secure despite our review. While checking on the sta-
tus of vulnerabilities, we discovered that developers of
several extensions have introduced new security vulner-
abilities that were not present during our initial review.
We do not discuss the new vulnerabilities in this paper.
4 Evaluation of Isolated Worlds
The isolated worlds mechanism is intended to pro-
tect content scripts from malicious websites,
includ-
ing otherwise-benign websites that have been altered by
a network attacker. We evaluate whether the isolated
worlds mechanism is sufﬁcient to protect content scripts
from websites. Our security review indicates that iso-
lated worlds largely succeeds: only 3 of the 100 exten-
sions have content script vulnerabilities, and only 2 of
the vulnerabilities allow arbitrary code execution.
Developers face four main security challenges when
writing extensions that interact with websites. We dis-
cuss whether and how well the isolated worlds mecha-
nism helps prevent these vulnerability classes.
5For the remaining 20%, contact information was unavailable, the
extension had been removed from the directory, or we were unable to
contact the developer in a language spoken by the developer.
Data as HTML. One potential web development mis-
take is to insert untrusted data as HTML into a page,
thereby allowing untrusted data to run as code. The iso-
lated worlds mechanism mitigates this type of error in
content scripts. When a content script inserts data as
HTML into a website, any scripts in the data are executed
within the website’s isolated world instead of the exten-
sion’s. This means that an extension can read data from a
website’s DOM, edit it, and then re-insert it into the page
without introducing a content script vulnerability. Alter-
nately, an extension can copy data from one website into
another website. In this case, the extension will have in-
troduced a vulnerability into the edited website, but the
content script itself will be unaffected.
We expect that content scripts would exhibit a higher
vulnerability rate if the isolated worlds mechanism did
not mitigate data-as-HTML bugs. Six extensions’ con-
tent scripts contained data-as-HTML errors that resulted
in web site vulnerabilities, instead of the more-dangerous
content script vulnerabilities. Furthermore, we found
that 20 of the 50 (40%) core extension vulnerabilities are
caused by inserting untrusted data into HTML; core ex-
tensions do not have the beneﬁt of the isolated worlds
mechanism to ameliorate this class of error. Since it is
unlikely that developers exercise greater caution when
writing content scripts than when writing core exten-
sions, we conclude that the isolated worlds mechanism
reduces the rate of content script vulnerabilities by miti-
gating data-as-HTML errors.
Eval. Developers can introduce vulnerabilities into their
extensions by using eval to execute untrusted data. If an
extension reads data from a website’s DOM and evals
the data in a content script, the resulting code will run in
the content script’s isolated world. As such, the isolated
worlds mechanism does not prevent or mitigate vulnera-
bilities due to the use of eval in a content script.
We ﬁnd that relatively few developers use eval, possi-
bly because its use has been responsible for well-known
security problems in the past [8, 27]. Only 14 extensions
use eval or equivalent constructs to convert strings to
code in their content scripts, and most of those use it
only once in a library function. However, we did ﬁnd
two content script vulnerabilities that arise because of an
extension’s use of eval in its content script. For exam-
ple, the Blank Canvas Script Handler extension can be
customized with supplemental scripts, which the exten-
sion downloads from a website and evals in a content
script. Although the developer is intentionally running
data from the website as code, the integrity of the HTTP
website that hosts the supplemental scripts could be com-
promised by a network attacker.
Click Injection. Extensions can register event handlers
for DOM elements on websites. For example, an ex-
tension might register a handler for a button’s onClick
event. However, extensions cannot differentiate between
events that are triggered by the user and events that are
generated by a malicious web site. A website can launch
a click injection attack by invoking an extension’s event
handler, thereby tricking the extension into performing
an action that was not requested by the user. Although
this attack does not allow the attacker to run arbitrary
code in the vulnerable content script, it does allow the
website to control the content script’s behavior.
The isolated worlds mechanism does not prevent or
mitigate click injection attacks at all. However, the at-
tack surface is small because relatively few extensions
register event handlers for websites’ DOM elements. Of
the 17 extensions that register event handlers, most are
for simple buttons that toggle UI state. We observed only
one click injection vulnerability, in the Google Voice ex-
tension. The extension changes phone numbers on web-
sites into links. When a user clicks a phone number
link, Google Voice inserts a conﬁrmation dialog onto the
DOM of the website to ensure that the user wants to place
a phone call. Google Voice will place the call following
the user’s conﬁrmation. However, a malicious website
could ﬁre the extension’s event handlers on the link and
conﬁrmation dialog, thereby placing a phone call from
the user’s Google Voice account without user consent.
Prototypes and Capabilities. In the past, many vulner-
abilities due to prototype poisoning and capability leaks
have been observed in bookmarklets and Firefox exten-
sions [20, 32, 2]. The isolated worlds mechanism pro-
vides heap separation, which prevents both of these types
of attacks. Regardless of developer behavior, these at-
tacks are not possible in Chrome extensions as long as
the isolation mechanism works correctly.
Based on our security review,
the isolated worlds
mechanism is highly effective at shielding content scripts
from malicious websites. It mitigates data-as-HTML er-
rors, which we found were very common in the Chrome
extensions that we reviewed. Heap separation also pre-
vents prototype poisoning and capability leaks, which are
common errors in bookmarklets and Firefox extensions.
Although the isolated worlds mechanism does not pre-
vent click injection or eval-based attacks, we ﬁnd that
developers rarely make these mistakes. We acknowledge
that our manual review could have missed some content
script vulnerabilities. However, we ﬁnd it unlikely that
we could have missed many, given our success at ﬁnd-
ing the same types of vulnerabilities in core extensions.
We therefore conclude that the isolated worlds mecha-
nism is effective, and other extension platforms should
implement it if they have not yet done so.
5 Evaluation of Privilege Separation
Privilege separation is intended to shield the privileged
core extension from attacks. The isolated worlds mecha-
nism serves as the ﬁrst line of defense against malicious
websites, and privilege separation is supposed to protect
the core extension when isolated worlds fails. We eval-
uate the effectiveness of extension privilege separation
and ﬁnd that, although it is unneeded, it would be par-
tially successful at accomplishing its purpose if the iso-
lated worlds mechanism were to fail.
5.1 Cross-Component Vulnerabilities
Some developers give content scripts access to core
extension permissions, which removes the defense-in-
depth beneﬁts of privilege separation. We evaluate the
impact of developer behavior on the effectiveness of ex-
tension privilege separation.
Vulnerable Content Scripts. The purpose of privilege
separation is to limit the impact of content script vulner-
abilities. Even if a content script is vulnerable, privi-
lege separation should prevent an attacker from execut-
ing code with the extension’s permissions. We iden-
tiﬁed two extensions with content script vulnerabilities
that permit arbitrary code execution; these two exten-
sions could beneﬁt from privilege separation.
Despite privilege separation, both of the vulnerabili-
ties yield access to some core extension privileges. The
vulnerable content scripts can send messages to their
respective core extensions, requesting that the core ex-
tensions exercise their privileges.
In both extensions,
the core extension makes arbitrary XHRs on behalf of
the content script and returns the result to the content
script. This means that the two vulnerable content scripts
could trigger arbitrary HTTP XHRs even though con-
tent scripts should not have access to a cross-origin
XMLHttpRequest object. These vulnerable extensions
represent a partial success for privilege separation be-
cause the attacker cannot gain full privileges, but also
a partial failure because the attacker can gain the ability
to make cross-origin XHRs.
Hypothetical Vulnerabilities. Due to the success of
the isolated worlds mechanism, our set of vulnerabilities
only includes two extensions that need privilege separa-
tion as a second line of defense. To expand the scope of
our evaluation of privilege separation, we explore a hy-
pothetical scenario:
if the currently-secure extensions’
content scripts had vulnerabilities, would privilege sepa-
ration mitigate these vulnerabilities?
Of the 98 extensions that do not have content script
vulnerabilities, 61 have content scripts. We reviewed the
message passing boundary between these content scripts
Permissions
All of the extension’s permissions
Partial: Cross-origin XHRs2
Partial: Tab control
Partial: Other
Number of Scripts
4
9
5
5
Table 3: 61 extensions have content scripts that do not
have code injection vulnerabilities. If an attacker were
hypothetically able to compromise the content scripts,
these are the permissions that the attacker could gain ac-
cess to via the message-passing channel with the cores.
and their core extensions. We determined that 38% of
content scripts can leverage communication with their
core extensions to abuse some core extension privileges:
4 extensions’ content scripts can use all of their cores’
permissions, and 19 can use some of their cores’ permis-
sions. Table 3 shows which permissions attackers would
be able to obtain via messages if they were able to com-
promise the content scripts. This demonstrates that privi-
lege separation could be a relatively effective layer of de-
fense, if needed: we can expect that privilege separation
would be effective at limiting the damage of a content
script vulnerability 62% of the time.
Example. The AdBlock extension allows its content
script to execute a set of pre-deﬁned functions in the core
extension. To do this, the content script sends a mes-
sage to the core extension. A string in the message is
used to index the window object, allowing the content
script to select a pre-deﬁned function to run. Unfortu-
nately, this also permits arbitrary code execution because
the window object provides access to eval. As such,
a compromised content script would have unfettered ac-
cess to the core extension’s permissions.
Example. A bug in the Web Developer extension unin-
tentionally grants its content script full privileges.
Its
content script can post small notices to the popup page,
which is part of the core extension. The notices are in-
serted using innerHTML. The notices are supposed to be
text, but a compromised content script could send a no-
tice with an inline script that would execute in the popup
page with full core extension permissions.
5.2 Web Site Metadata Vulnerabilities
The Chrome extension platform applies privilege separa-
tion with the expectation that malicious website data will
ﬁrst enter an extension via a vulnerable content script.
However, it is possible for a website to attack a core ex-
tension without crossing the privilege separation bound-
ary. Website-controlled metadata such as titles and URLs
can be accessed by the core extension through browser
Type
Website content
Website metadata
HTTP XHR
HTTP script
Total
Vulnerabilities
2
5
16
28
50
Table 4: The types of core extension vulnerabilities.
managers (e.g., the history, bookmark, and tab man-
agers). This metadata may include inline scripts, and
mishandled metadata can lead to a core extension vulner-
ability. Website metadata does not ﬂow through content
scripts, so privilege separation does not impede it. We
identiﬁed ﬁve vulnerabilities from metadata that would
allow an attacker to circumvent privilege separation.
Example. The Speeddial extension replicates Chrome’s
built-in list of recently closed pages. Speeddial keeps
track of the tabs opened using the tabs manager and does
not sanitize the titles of these pages before adding them
to the HTML of one of its core extension pages. If a title
were to contain an inline script, it would execute with the
core extension’s permissions.
5.3 Direct Network Attacks
Privilege separation is intended to protect the core exten-
sion from web attackers and HTTP websites that have
been compromised by network attackers. However, the
core extension may also be subject to direct network at-
tacks. Nothing separates a core extension from code
in HTTP scripts or data in HTTP XMLHttpRequests.
HTTP scripts in the core extension give a network at-
tacker the ability to execute code with the extension’s
full permissions, and HTTP XHRs cause vulnerabilities
when extensions allow the HTTP data to execute.
Direct network attacks comprise the largest class
of core extension vulnerabilities, as Table 4 illus-
trates. Of the 50 core extension vulnerabilities, 44 vul-
nerabilities (88%) stem from HTTP scripts or HTTP
XMLHttpRequests, as opposed to website data. For ex-
ample, many extensions put the HTTP version of the
Google Analytics script in the core extension to track
which of the extensions’ features are used.
Example. Google Dictionary allows a user to look up
deﬁnitions of words by double clicking on a word. The
desired deﬁnition is fetched by making a HTTP request
to google.com servers. The response is inserted into
one of the core extension’s pages using innerHTML. A
network attacker could modify the response to contain