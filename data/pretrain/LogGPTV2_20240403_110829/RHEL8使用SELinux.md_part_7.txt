```
::: title
**不正确的上下文**
:::
`matchpathcon`{.literal}
工具检查文件路径的上下文，并将其与该路径的默认标签进行比较。以下示例演示了在包含错误标记文件的目录中使用
`matchpathcon`{.literal}：
``` screen
$ matchpathcon -V /var/www/html/*
/var/www/html/index.html has context unconfined_u:object_r:user_home_t:s0, should be system_u:object_r:httpd_sys_content_t:s0
/var/www/html/page1.html has context unconfined_u:object_r:user_home_t:s0, should be system_u:object_r:httpd_sys_content_t:s0
```
在本例中，`index.html`{.literal} 和 `page1.html`{.literal} 文件使用
`user_home_t`{.literal}
类型进行标识。这种类型用于用户主目录中的文件。使用 `mv`{.literal}
命令从主目录中移动文件可能会导致文件使用 `user_home_t`{.literal}
类型进行标记。这个类型不应存在于主目录之外。使用 `restorecon`{.literal}
实用程序将这些文件恢复到其正确类型：
``` screen
# restorecon -v /var/www/html/index.html
restorecon reset /var/www/html/index.html context unconfined_u:object_r:user_home_t:s0->system_u:object_r:httpd_sys_content_t:s0
```
要恢复目录中所有文件的上下文，请使用 `-R`{.literal} 选项：
``` screen
# restorecon -R -v /var/www/html/
restorecon reset /var/www/html/page1.html context unconfined_u:object_r:samba_share_t:s0->system_u:object_r:httpd_sys_content_t:s0
restorecon reset /var/www/html/index.html context unconfined_u:object_r:samba_share_t:s0->system_u:object_r:httpd_sys_content_t:s0
```
::: title
**以非标准方式配置受限应用程序**
:::
服务可以以多种方式运行。要考虑这一点，您需要指定如何运行您的服务。您可以通过
SELinux 布尔值达到此目的，允许在运行时更改 SELinux
策略的部分。这启用了更改，比如允许服务访问 NFS
卷而无需重新载入或者重新编译 SELinux
策略。另外，在非默认端口号中运行服务需要使用 `semanage`{.literal}
命令更新策略配置。
例如：要允许 Apache HTTP 服务器与 MariaDB 通信，启用
`httpd_can_network_connect_db`{.literal} 布尔值：
``` screen
# setsebool -P httpd_can_network_connect_db on
```
请注意，该 `-P`{.literal} 选项可使系统重启后设置具有持久性。
如果特定服务无法访问，请使用 `getsebool`{.literal} 和 `grep`{.literal}
工具查看是否有布尔值可用于访问。例如，使用
`getsebool -a | grep ftp`{.literal} 命令搜索 FTP 相关的布尔值：
``` screen
$ getsebool -a | grep ftp
ftpd_anon_write --> off
ftpd_full_access --> off
ftpd_use_cifs --> off
ftpd_use_nfs --> off
ftpd_connect_db --> off
httpd_enable_ftp_server --> off
tftp_anon_write --> off
```
要获得布尔值列表并找出是否启用或禁用它们，请使用
`getsebool -a`{.literal}
命令。要获得包括布尔值的列表，并找出它们是否启用或禁用，请安装
`selinux-policy-devel`{.literal} 软件包并以 root 用户身份使用
`semanage boolean -l`{.literal} 命令。
::: title
**端口号**
:::
根据策略配置，服务只能在某些端口号中运行。尝试更改服务在没有更改策略的情况下运行的端口可能会导致服务无法启动。例如，以
root 运行 `semanage port -l | grep http`{.literal} 命令列出
`http`{.literal} 相关端口：
``` screen
# semanage port -l | grep http
http_cache_port_t              tcp      3128, 8080, 8118
http_cache_port_t              udp      3130
http_port_t                    tcp      80, 443, 488, 8008, 8009, 8443
pegasus_http_port_t            tcp      5988
pegasus_https_port_t           tcp      5989
```
`http_port_t`{.literal} 端口类型定义了 Apache HTTP
服务器可侦听的端口，在本例中为 TCP 端口 80、443、488、8008、8009 和
8443。如果管理员配置了 `httpd.conf`{.literal}，`httpd`{.literal}
侦听端口
9876（`Listen 9876`{.literal}），但没有更新策略来反应这一点，以下命令会失败：
``` screen
# systemctl start httpd.service
Job for httpd.service failed. See 'systemctl status httpd.service' and 'journalctl -xn' for details.
# systemctl status httpd.service
httpd.service - The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)
   Active: failed (Result: exit-code) since Thu 2013-08-15 09:57:05 CEST; 59s ago
  Process: 16874 ExecStop=/usr/sbin/httpd $OPTIONS -k graceful-stop (code=exited, status=0/SUCCESS)
  Process: 16870 ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND (code=exited, status=1/FAILURE)
```
记录类似于 `/var/log/audit/audit.log`{.literal} 的 SELinux 拒绝信息：
``` screen
type=AVC msg=audit(1225948455.061:294): avc:  denied  { name_bind } for  pid=4997 comm="httpd" src=9876 scontext=unconfined_u:system_r:httpd_t:s0 tcontext=system_u:object_r:port_t:s0 tclass=tcp_socket
```
要允许 `httpd`{.literal} 侦听没有列出的 `http_port_t`{.literal}
端口，使用 `semanage port`{.literal} 命令为端口分配不同的标签：
``` screen
# semanage port -a -t http_port_t -p tcp 9876
```
`-a`{.literal} 选项添加一个新记录; `-t`{.literal} 选项定义了一个类型;
`-p`{.literal} 选项定义了一个协议。最后的参数是要添加的端口号。
::: title
**个别情况、演变或损坏的应用程序以及被破坏的系统**
:::
应用程序可能会包含程序漏洞，从而导致 SELinux 拒绝访问。另外，SELinux
规则会不断演变 - SELinux
可能没有了解某个应用程序会以某种特定方式运行，因此即使应用程序按预期工作，也有可能出现拒绝访问的问题。例如，当一个
PostgreSQL
的新版本发布后，它可能会执行一些当前策略无法处理的操作，从而导致访问被拒绝，即使应该允许访问。
对于这种情况，在访问被拒绝后，使用 `audit2allow`{.literal}
工具创建自定义策略模块来允许访问。您可以在 [**[Red Hat
Bugzilla](https://bugzilla.redhat.com/){.link}**]{.strong} 中报告
SELinux 策略中缺少的规则。对于 Red Hat Enterprise Linux 8，针对
`Red Hat Enterprise Linux 8`{.literal} 产品创建程序漏洞，并选择
`selinux-policy`{.literal} 组件。在此类程序漏洞报告中包含
`audit2allow -w -a`{.literal} 和 `audit2allow -a`{.literal} 命令的输出。
如果应用程序请求主要的安全特权，这可能代表，应用程序可能已被破坏。使用入侵检测工具检查此类行为。
[红帽客户门户网站](https://access.redhat.com/){.link}中的 [**[Solution
Engine](https://access.redhat.com/solution-engine/){.link}**]{.strong}
也以文章的形式提供了相关的指导信息。它包括了您遇到的相同或非常类似的问题的解决方案。选择相关的产品和版本，并使用与
SELinux 相关的关键字，如 [*selinux*]{.emphasis} 或
[*avc*]{.emphasis}，以及您被阻断的服务或应用程序的名称，例如：
`selinux samba`{.literal}。
:::
::: section
::: titlepage
# []{#troubleshooting-problems-related-to-selinux_using-selinux.html#selinux-denials-in-the-audit-log_troubleshooting-problems-related-to-selinux}审计日志中的 SELinux 拒绝 {.title}
:::
Linux 审计系统默认在 `/var/log/audit/audit.log`{.literal}
文件中存储日志条目。
要只列出与 SELinux 相关的记录，请使用将 message type 参数设置为
`AVC`{.literal} 和 `AVC_USER`{.literal} 的 `ausearch`{.literal}
命令，例如：
``` screen
# ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR
```
审计日志文件中的 SELinux 拒绝条目类似如下：
``` screen
type=AVC msg=audit(1395177286.929:1638): avc:  denied  { read } for  pid=6591 comm="httpd" name="webpages" dev="0:37" ino=2112 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:nfs_t:s0 tclass=dir
```
这个条目最重要的部分是：
::: itemizedlist
-   `avc: denied`{.literal} - SELinux 执行的操作，并在 AVC 中记录
-   `{ read }`{.literal} - 被拒绝的操作
-   `pid=6591`{.literal} - 试图执行被拒绝操作的主体的进程识别符
-   `comm="httpd"`{.literal} - 用于调用分析进程的命令名称
-   `httpd_t`{.literal} - 进程的 SELinux 类型
-   `nfs_t`{.literal} - 受进程操作影响的对象的 SELinux 类型
-   `tclass=dir`{.literal} - 目标对象类
:::
以前的日志条目可转换为：
[*SELinux 拒绝了 PID 为 6591、类型为 `httpd_t`{.literal} 的
`httpd`{.literal} 进程从 `nfs_t`{.literal}
类型的目录中读取。*]{.emphasis}
当 Apache HTTP 服务器试图访问使用 Samba 套件类型标记的目录时，会出现以下
SELinux 拒绝信息：
``` screen
type=AVC msg=audit(1226874073.147:96): avc:  denied  { getattr } for  pid=2465 comm="httpd" path="/var/www/html/file1" dev=dm-0 ino=284133 scontext=unconfined_u:system_r:httpd_t:s0 tcontext=unconfined_u:object_r:samba_share_t:s0 tclass=file
```
::: itemizedlist
-   `{ getattr }`{.literal} - `getattr`{.literal}
    条目表示源进程正在尝试读取目标文件的状态信息。这在读取文件前发生。SELinux
    会拒绝这个操作，因为进程会访问该文件，且没有适当的标签。通常的权限包括
    `getattr`{.literal}、`read`{.literal} 和 `write`{.literal}。
-   `path="/var/www/html/file1"`{.literal} -
    该进程试图访问的对象（目标）的路径。
-   `scontext="unconfined_u:system_r:httpd_t:s0"`{.literal} -
    试图拒绝动作的进程（源）的 SELinux 上下文。在这个示例中，它是 Apache
    HTTP 服务器的 SELinux 上下文，它使用 `httpd_t`{.literal} 类型运行。
-   `tcontext="unconfined_u:object_r:samba_share_t:s0"`{.literal} -
    试图访问的进程的对象（目标）的 SELinux 上下文。在这个示例中，它是
    `file1`{.literal} 的 SELinux 上下文。
:::
这个 SELinux 拒绝信息可以被解释为：
[*SELinux 拒绝了 PID 为 2465 的 `httpd`{.literal} 进程访问带有
`samba_share_t`{.literal} 类型的 `/var/www/html/file1`{.literal}
文件。除非有其他配置，在 `httpd_t`{.literal}
域中运行的进程无法访问该文件。*]{.emphasis}
::: itemizedlist
**其它资源**
-   `auditd(8)`{.literal} 和 `ausearch(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#troubleshooting-problems-related-to-selinux_using-selinux.html#additional-resources-troubleshooting-problems-related-to-selinux}其它资源 {.title}
:::
::: itemizedlist
-   [CLI 中基本 SELinux
    故障排除](https://access.redhat.com/articles/2191331){.link}
-   [SELinux 尝试告诉我什么？SELinux 错误的 4
    个关键原因](https://fedorapeople.org/~dwalsh/SELinux/Presentations/selinux_four_things.pdf){.link}
:::
:::
:::
[]{#using-multi-level-security-mls_using-selinux.html}
::: chapter
::: titlepage
# []{#using-multi-level-security-mls_using-selinux.html#using-multi-level-security-mls_using-selinux}第 6 章 使用多级别安全（MLS） {.title}
:::
多级别安全（Multi-Level Security，简称
MLS）策略使用许可[*级别*]{.emphasis}的概念，这个概念首先由美国国防人员设计。MLS
根据严格控制的环境（如军事）中的信息管理，满足一组非常宽松的安全要求。
使用 MLS 比较复杂，且无法很好地映射到一般用例情景。
::: section
::: titlepage
# []{#using-multi-level-security-mls_using-selinux.html#multi-level-security-mls_using-multi-level-security-mls}多级别安全（MLS） {.title}
:::
多级别安全(MLS)技术使用信息安全级别将数据分类为分级分类，例如：
::: itemizedlist
-   \[Low\] 非保密
-   \[low\] 保密
-   \[high\] 机密
-   \[Highest\] 顶端机密
:::
默认情况下，MongoS SELinux 策略使用 16 个敏感级别：
::: itemizedlist
-   `s0`{.literal} 是最不安全的。
-   `s15`{.literal} 是最为敏感.
:::
在 MLS 中：
::: itemizedlist
-   [**用户和进程称为主体
    []{.strong}，其敏感度级别称为许可级别**]{.strong}。
-   [**文件、设备和其他系统的被动组件称为对象
    []{.strong}，其敏感度级别称为分类**]{.strong}。
:::
为实施 MLS，SELinux 使用 [**Bell-La Padula Model**]{.strong}
(BLP)模型。这个模型根据附加到每个主体和对象的标签指定系统中如何进行信息流。
BLP[**的基本原理是\"无读取，没有写操作\"。这意味着用户只能读取自己敏感级别和较低级别的文件**]{.strong}，数据只能从较低级别传输到更高的级别，且永远不会相反。
MLS SELinux 策略（即在 RHEL 上实施 MLS）中，我们应用了一个名为
[**Bell-La Padula
且具有写入相等性的已修改原则**]{.strong}。这意味着用户可以在自己的敏感级别和较低级别读取文件，但只能自己写入。例如，这可防止低克隆用户将内容写入到
top-secret 文件中。
MLS 环境中的非特权用户的安全上下文为：
``` screen
user_u:user_r:user_t:s1
```
其中：
::: variablelist
[`user_u`{.literal}]{.term}
:   是 SELinux 用户。
[`user_r`{.literal}]{.term}
:   是 SELinux 角色。
[`user_t`{.literal}]{.term}
:   是 SELinux 类型。
[`s1`{.literal}]{.term}
:   是 MLS 敏感度级别。
:::
系统始终将 MLS
访问规则与传统的文件访问权限相结合。例如，如果安全性级别为 \"Secret\"
的用户使用 Discretionary Access
Control(DAC)来阻止其他用户对文件的访问，即使\"Top
Secret\"用户无法访问该文件。高安全许可不会自动允许用户浏览整个文件系统。
拥有顶级别的用户不会自动获得多级系统的管理权限。虽然他们可能有权访问系统上的所有敏感信息，但这与具有管理权限不同。