"/
我们可以使用它们定义一个行范围的结果位置。然后，将脚本的
QQ群：
“description'
50192241
- 112 -
我们定义一个在两模式之间的行范围地
。这里要做和的是插入.Rh 宏和一些月
例如语法行中的那些。所以
第五章
在许多情况下，
，我们可以看到用空行分隔
一些空行分隔了
基本 sed 命令
因为宏
将相
应
我
用
最
劳
上
中
---
## Page 113
分的地址时，
我们遇到的下一部分是描述。这一部分使用的空行来分隔段落。在指定这一部
的输出。
这是一个展示正则表达式的能力的很好的示例。再一次，让我们提前预览示例
分，并且在替换期间回调。
制表符和连字符分隔成两个部分的行。采用反斜杠一圆括号的形式保存每个部
述格式化成具有缩进斜体字标签的段落。首先，输出.Rh宏，然后我们搜索由
下面是USAGE部分，
一个副作用是当前行从模式空间中被删除了。
在更改命令之后，
代标签和空行。
5
/DESC: /,/RETURNS/ 
IP "\flfdesc\fR" 15n
Rh Usage
/DESC:/i\
八\(.*\)·-\(. *\)/s//. IP "\\fI\1\\fR" 15n\
/USAGE:/c\
/USAGE: /, /~ $/ 
.ad b 
.fi\
.ft R\
.in -5n\
/~$/c\
 na
Rh Syntax\
/SYNTAX:/c\
/SYNTAX: /, /~$/ 
Rh Usage
nf\
ft B\
in +5n\
我们使用下一个标签“RETURNS”
每个输入行都以一个反斜杠结束，最后一行除外。更改从的
由一个或多个变量的相应描述组成。在这里我们将每个描
QQ群：
50192241
- 113 -
第五章
基本 sed 命令 
---
## Page 114
我们的脚本被插入到一个文件中，文件命名为refsed.下面是完整的脚本：
我们做的最后一件事是删除剩下的空行。
地增加以下替换：
我们更改了很少的内容，用“ReturnValue”取代标签“RETURNS”，
下一部分（标记的“RETURNS”）采用与 SYNTAX部分相同的方式处理。
在第二种情况下，引用首部宏被输出并且后面跟有一个换行符。
用于搜索后面跟有一个空格和一个或多个字符的标签。
时，它位于第二段的起始处。所以我们必须增加另外的模式来处理这种情况
其他问题。作者对标签“SEDC”的使用不一致致。通常，
个空格。虽然这对于样本文件是可行的，但是当我们使用比较大的样本时还有
在 DESC标签后面有一个空格。我们修改正则表达式来寻找标签后面的零个或多
因。然后我们对样本文件测试 sed脚本的这一部分时，
们应在这里插入.LE）
（在USAGE部分我们可能也使用了-mm包中的变量列表宏，假如这样的话，
我们要做的第一件事是插入段落宏，因为前面的USAGE部分由缩进的段落组成
s//.Rh 0 "/
/~·/s///
# refsed－给参考页添加格式化编码
/SYNTAX: /c\
/SYNTAX: /, /~$/ {
s/$/"/
s/ - /"
/NAME: /
/:·/s//:/
/^\*1**\*$/d
/~$/d
s/There is no return value\.*/None. /
s/DESC: \(. *\) /. Rh Descr iption\
s/DESC: *$/.Rh Description/
s/~$/. LP/ 
s/DESC: *$/. Rh Description/
111/
QQ群：
。这只能做一次，
50192241
114-
，这就是它成为“DESC”标签的关键原
第五章
它不起作用，这是因为
，它自己占据一行；有
基本 sed 命令 
，并且相应
我
---
## Page 115
上一次运行导致的问题要容易。
你会发现，
重
正如我们已经说明的那样，
定向到另一个文件或使它转到屏幕上。如果 sed脚本不能正确地工作，那么
$ sed -f refsed refpage
/RETURNS:/c\
/RETURNS: /,/~$/ 
s/~$/. LP/ 
1/
s/DESC:
s/DESC: *$/.Rh Description/ 
/DESC:/i\
/DESC: /,/RETURNS/
八\(.*)·-
/USAGE:/,/~$/ {
ft R\
.in -5n\
/~$/c\
Rh Syntax
p/$~/
s/There is no return value\.*/None. /
Rh "Return Value"
Rh Usage
/USAGE:/c\
 ad b
fi\
. na
.in +5n\
3
3
Rh O "DBclose"
LP
nf\
ft B\
Rh Syntax\
B
+5n
，更改脚本并在原始文件上重新运行它，比编写一个新的脚本来纠正
\(. *\)/. Rh Descr iption\
\(.*\)/s//. IP"\\fI\1\\fR" 15n\
QQ群：
"closes a database"
，不应该让 sed 改写原始文件。最好是将 sed 的输出
50192241
- 115 -
第五章
基本 sed 命令
---
## Page 116
quit的另一个可能的用法是在从文件中提取了想要的内容后退出脚本。例如，
UNIX head 命令类似。
它打印每一行，
10）。例如，
它只适用于单行的地址。
的语法为：
退出命令（a）会使 sed 停止读取新的输入行（并停止将它们发送到输出）。它
退出
update
$ sed’100q'
[line-address]q 
None.
DBclose() is analogous to the CLOSE statement in BASIC.
Note that there is no default file as there is in BASIC.
LP
Iocks and pending writes are not changed.
LP
*fdesc becomes invalid.
Your pending writes
DBclose() closes a file when given its database file descriptor.
Rh Description
pointer to database file descriptor.
IP"\flfdesc\fR" 15n 
Rh Usage
in -5n 
DBFILE *fdesc;
void DBclose (fdesc)
LP
LP
LP
ad
f
ft
R
下面一行命令使用退出命令从文件中打印前100行：
直到它到达行100并且退出。在这点上，这个命令的功能与
QQ群：
test
一旦找到和 address 匹配的行，那么脚本就结束（注
s to that file will be completed before the
50192241
- 116 -
’中介绍）的应用中，在sed已经找
第五章
基本 sed 命令
---
## Page 117
令进行练习。
如果你还没有这么做，那么在进入下一章高级命令之前应该使用本章出现的命
下一个示例也打印前10行，
好。下面这个简单的 shell程序打印文件的前10 行，然后退出：
如果比较下面的两个 shell脚本，
需要这个文件的很小的一部分，
注10：
找其他可能的匹配。
的地方终止脚本）。sed 程序当场退出，并且不再继续遍历文件的剩余部分寻
被执行，
以上命令组阻止了行：
因此，我们可以按照下面的方式在 getmac shelI脚本中修订这个 sed 脚本：
到它寻找的东西之后继续扫描庞大的文件是相当低效的。
以
因为这个宏定义文件不长，
忽略。然而，
for file
for file
/~1. 1. $/a 
done
done
}" $file
/^\. 1. $/g
/^\. de *$mac/, /^\. \. $/{
 sed 10q $file
 sed -n 1,10p $file
直到 sed 找到了要寻找的宏的结尾（这一行本身在第一个宏定义结束
况下使用α是初学者常犯的危险错误。
一部分并保留剩余部分不改变的情况下，不要全用α命令。在这种情
你需要小心，
对于非常庞大的文件或者一个复杂的、
QQ群：
 在将编辑操作写回到原始文件的任何程序中不要使用α
而且脚本本身也不复杂，所以从脚本节省的时间可
它采用打印命令并抑制默认的输出：
50192241
，这种类型的脚本对时间节省意义重大。
，就会发现第一个脚本比第二个要运行得更
- 117 -
第五章
多行脚本，
基本 sed 命令 
它们可能只
---
## Page 118
开始。并在下一行的开始处结束的短语。其他一些模式只有当在多行上重复时
作的。亲自验证结果比只是简单地阅读能更好的理解脚本。
我们建议你测式本章中的脚本，
你编写很难的脚本时，测式它来看看命令如何工作对你会有好处。
改控制流会使脚本更加难以阅读和理解。
中的命令被执行，某些特定的情况除外，
本章中的脚本由于各种原因中断或暂停了正常的控制流。它们也许想阻止脚本
用于那一行。当达到脚本的底部时，输出这一行并且清空模式空间。然后新行
序。通常，一行被读入模式空间并且用脚本中的每个命令（一个接一个地））
4.编写使用分支和条件指令的脚本来更改控制流（：、b、t）。
在前面正则表达式的讨论中，
多行模式空间
本章的高级脚本都做一件共同的事，那就是它们改变了执行或控制的流程顺
?
2．处理了多行模式空间(N、D、P)。
高级命令分成了3个组：
的命令，那么就可以认为自己是真正的 sed 的主人了。
从标准的文档中学习比学习任何基本的命令都困难。一旦你理解了这里所给出
本章中，我们介绍剩下的 sed 命令。这些命令需要用更大的决心来掌握，而且
流。
本章内容：
采用保持空间来保存模式空间的内容并使它可用于后续的命令（H、h、G、
g、x）
加入一个短语
高级的流控制命令
包含那一行
学习案例 
多行模式空间
QQ群：
50192241
我们强调模式匹配是面向行的。像grep 这样的程
并且通过增加或删除命令来理解脚本是如何工
- 118 -
事实上，
或者阻止模式空间的内容被清除。
写脚本比读脚本更容易。
高级 sed 命令
第六章高级 sed 命令
第六章
---
## Page 119
字符串中插入换行符。你必须使用反斜杠转义换行符，如下所示：
下面的脚本寻找行结尾处的“Operator”，读取下一个输入行，然后进行替换。
例如，下面示例文本的几行：
Next 命令与 next 命令不同，next 输出模式空间的内容，然后读取新的输入
多行Next（N）命令通过读取新的输入行，
行命令（N、D、P）对应于上一章出现的小写字母的基本命令（n、d、p）。
sed 能查看模式空间的多个行。这就是允许匹配模式扩展到多行上。在本节
才有意义。
了嵌入的换行符，
了第一行和第二行，在这显示就太长了，
换行符。当这个脚本在样本文件上运行中，
在这个例子中，
“Operator”和“Guide”被分开了。
第一个示例是，
“Installation Guide”
空
之
追加下一行
内
中
行next 命令之后，控制将被传递给脚本中的后续命令。
间中，
。在模式空间中嵌入的换行符可以利用转义序列“\n”来匹配。在多行模式
后来创建多行模式空间。模式空间最初的内容和新的输入行之间用换行符
容，D只删除多行模式空间的第一行。
，删除命令（D）是删除命令（d）的多行形式。区别是：d删除模式空间的
我们将来看一下创建多行模式空间并处理它的内容的命令。这里的3个
 s/Owner and Operator\nGuide /lnstallation Guide\
s/0wner and Operator\nGuide/Installation Guide/
/0perator$/{
available on your system.
Consult Section 3.1 in the Owner and Operator
“$”只匹配模式空间中最后的换行符，
，我们假设想要将“Owner and Operator Guide”换成
我们知道行在哪里被拆分成两行，
QQ群：
但是没有取代它。可惜的是，
匹配空间中的第一个字条，而不匹配换行符后面的字符。
，但是我们发现它出现在文件中的两行上，
50192241
- 119 -
发生这种情况的原因是替换命令匹
，并将它添加到模式空间的现有内容
它产生两行输出，其中的一行合并
，而不匹配任何嵌入的换行符。在
我们不能用使用“\n”在替换
并且知道在哪里指定嵌入的
第六章高级 sed 命令
例
---
## Page 120
不管它被分成怎样的两行。下面是扩展的测式文件：
式空间，
关为什么这是必要的讨论）。