>>> state.mem[0x1000].long.concrete # .concrete 获得 Python i
nt
4L
初始化的 state 可以经过模拟执行得到一系列的 states，模拟管理器（Simulation
Managers）的作用就是对这些 states 进行管理：
>>> simgr = proj.factory.simulation_manager(state)
>>> simgr
>>> simgr.active # 当前 state
[]
>>> simgr.step() # 模拟执行一个 basic block
>>> simgr.active # 当前 state 被更新
[]
>>> simgr.active[0].regs.rip # active[0] 是当前 state
>>> state.regs.rip # 但原始的 state 并没有改变
angr 提供了大量函数用于程序分析，在这些函数在 Project.analyses. ，例
如：
777
5.3.1 angr
>>> cfg = p.analyses.CFGFast() # 得到 control-flow graph
>>> cfg
>>> cfg.graph
 # 详
情请查看 networkx
>>> len(cfg.graph.nodes())
934
>>> entry_node = cfg.get_any_node(proj.entry) # 得到给定地址的 C
FGNode
>>> entry_node
>>> len(list(cfg.graph.successors(entry_node)))
2
如果要想画出图来，还需要安装 matplotlib。
>>> import networkx as nx
>>> import matplotlib
>>> matplotlib.use('Agg')
>>> import matplotlib.pyplot as plt
>>> nx.draw(cfg.graph) # 画图
>>> plt.savefig('temp.png') # 保存
二进制文件加载器
我们知道 angr 是高度模块化的，接下来我们就分别来看看这些组成模块，其中用
于二进制加载模块称为 CLE。主类为 cle.loader.Loader ，它导入所有的对象
文件并导出一个进程内存的抽象。类 cle.backends 是加载器的后端，根据二进
制文件类型区分为
cle.backends.elf 、 cle.backends.pe 、 cle.backends.macho 等。
首先我们来看加载器的一些常用参数：
auto_load_libs ：是否自动加载主对象文件所依赖的共享库
except_missing_libs ：当有共享库没有找到时抛出异常
force_load_libs ：强制加载列表指定的共享库，不论其是否被依赖
778
5.3.1 angr
skip_libs ：不加载列表指定的共享库，即使其被依赖
custom_ld_path ：可以到列表指定的路径查找共享库
如果希望对某个对象文件单独指定加载参数，可以使用 main_ops 和
lib_opts 以字典的形式指定参数。一些通用的参数如下：
backend ：使用的加载器后端，如："elf", "pe", "mach-o", "ida", "blob" 等
custom_arch ：使用的 archinfo.Arch 对象
custom_base_addr ：指定对象文件的基址
custom_entry_point ：指定对象文件的入口点
举个例子：
angr.Project(main_opts={'backend': 'ida', 'custom_arch': 'i386'}
, lib_opts={'libc.so.6': {'backend': 'elf'}})
加载对象文件和细分类型如下：
>>> for obj in proj.loader.all_objects:
... print obj
...
proj.loader.main_object ：主对象文件
proj.loader.shared_objects ：共享对象文件
proj.loader.extern_object ：外部对象文件
proj.loader.all_elf_object ：所有 elf 对象文件
proj.loader.kernel_object ：内核对象文件
通过对这些对象文件进行操作，可以解析出相关信息：
779
5.3.1 angr
>>> obj = proj.loader.main_object
>>> obj
>>> hex(obj.entry) # 入口地址
'0x401370'
>>> hex(obj.min_addr), hex(obj.max_addr) # 起始地址和结束地址
('0x400000', '0x60721f')
>>> for seg in obj.segments: # segments
... print seg
...
>>> for sec in obj.sections: # sections
... print sec
...
...etc
根据地址查找我们需要的东西：
>>> proj.loader.find_object_containing(0x400000) # 包含指定地址的
object
>>> free = proj.loader.find_symbol('free') # 根据名字或地址
在 project 中查找 symbol
>>> free
>>> free.name # 符号名
u'free'
>>> free.owner_obj # 所属 object
>>> hex(free.rebased_addr) # 全局地址空间中
的地址
'0x1083ab0'
780
5.3.1 angr
>>> hex(free.linked_addr) # 相对于预链接基
址的地址
'0x83ab0'
>>> hex(free.relative_addr) # 相对于对象基址
的地址
'0x83ab0'
>>> free.is_export # 是否为导出符号
True
>>> free.is_import # 是否为导入符号
False
>>> obj.find_segment_containing(obj.entry) # 包含指定地址的
segment
>>> obj.find_section_containing(obj.entry) # 包含指定地址的
section
>>> main_free = obj.get_symbol('free') # 根据名字在当前
object 中查找 symbol
>>> main_free
>>> main_free.is_export
False
>>> main_free.is_import
True
>>> main_free.resolvedby # 从哪个 object
获得解析
>>> hex(obj.linked_base) # 预链接的基址
'0x0'
>>> hex(obj.mapped_base) # 实际映射的基址
'0x400000'
通过 obj.relocs 可以查看所有的重定位符号信息，或者通过 obj.imports
可以得到一个符号信息的字典：
781
5.3.1 angr
>>> for imp in obj.imports:
... print imp, obj.imports[imp]
...
strncmp 
lseek 
malloc 
>>> obj.imports['free'].symbol # 从重定向信息得
到导入符号
>>> obj.imports['free'].owner_obj # 从重定向信息得
到所属的 object
这一部分还有个 hooking 机制，用于将共享库中的代码替换为其他的操作。使用函
数 proj.hook(addr, hook) 和 proj.hook_symbol(name, hook) 来做到这一
点，其中 hook 是一个 SimProcedure 的实例。通过 .is_hooked 、 .unhook
和 .hooked_by 来进行管理：
782
5.3.1 angr
>>> stub_func = angr.SIM_PROCEDURES['stubs']['ReturnUnconstraine
d'] # 获得一个类
>>> stub_func
>>> proj.hook(0x10000, stub_func()) # 使用类的一个实例来 hook
>>> proj.is_hooked(0x10000)
True
>>> proj.hooked_by(0x10000)
>>> proj.hook_symbol('free', stub_func())
17316528
>>> proj.is_symbol_hooked('free')
True
>>> proj.is_hooked(17316528)
True
当然也可以利用装饰器编写自己的 hook 函数：
>>> @proj.hook(0x20000, length=5) # length 参数可选，表示程
序执行完 hook 后跳过几个字节
... def my_hook(state):
... state.regs.rax = 1
...
>>> proj.is_hooked(0x20000)
True
求解器引擎
angr 是一个符号执行工具，它通过符号表达式来模拟程序的执行，将程序的输出表
示成包含这些符号的逻辑或数学表达式，然后利用约束求解器进行求解。
从前面的内容中我们已经知道 bitvectors 是一个比特串，并且看到了 bitvectors 做
的一些具体的数学运算。其实 bitvectors 不仅可以表示具体的数值，还可以表示虚
拟的数值，即符号变量。
783
5.3.1 angr
>>> x = state.solver.BVS("x", 64)
>>> x
>>> y = state.solver.BVS("y", 64)
>>> y
而符号变量之间的运算同样不会时具体的数值，而是一个 AST，所以我们接下来同
样使用 bitvector 来指代 AST：
>>> x + 0x10
>>> (x + 0x10) / 2
>>> x - y
每个 AST 都有一个 .op 和一个 .args 属性：
>>> tree = (x + 1) / (y + 2)
>>> tree
>>> tree.op # op 是表示操作
符的字符串
'__floordiv__'
>>> tree.args # args 是操作数
(, )
>>> tree.args[0].op
'__add__'
>>> tree.args[0].args
(, )
>>> tree.args[0].args[1].op
'BVV'
>>> tree.args[0].args[1].args
(1L, 64)
知道了符号变量的表示，接下来看符号约束：
784
5.3.1 angr
>>> x == 1 # AST 比较会得到
一个符号化的布尔值
>>> x + y > 100
 0x64>
>>> state.solver.BVV(1, 64) > 0 # 无符号数 1
>>> state.solver.BVV(-1, 64) > 0 # 无符号数 0xff
ffffffffffffff
正因为布尔值是符号化的，所以在需要做 if 或者 while 判断的时候，不要直接使用
比较作为条件，而应该使用 .is_true 和 .is_false 来进行判断：
>>> yes = state.solver.BVV(1, 64) > 0
>>> yes
>>> state.solver.is_true(yes)
True
>>> state.solver.is_false(yes)
False
>>> maybe = x == y
>>> maybe
>>> state.solver.is_true(maybe)
False
>>> state.solver.is_false(maybe)
False
为了进行符号求解，首先要将符号化布尔值作为符号变量有效值的断言加入到
state 中，作为限制条件，当然如果添加了无法满足的限制条件，将无法求解：
785
5.3.1 angr
>>> state.solver.add(x > y) # 添加限制条件
[ y_1_64>]
>>> state.solver.add(y > 2)
[ 0x2>]
>>> state.solver.add(10 > x)
[]
>>> state.satisfiable() # 可以求解
True
>>> state.solver.eval(x + y) # eval 求解得到
任意一个符合条件的值
15L
>> state.solver.eval_one(x + y) # 求解得到结果，
如果有不止一个结果则抛出异常
>>> state.solver.eval_upto(x + y, 5) # 给出最多 5 个
结果
[16L, 13L, 8L, 9L, 17L]