    5.  You can inspect your linked container with the `docker inspect` command:
        ```
        root@ubuntu:~# docker inspect -f "{{ .HostConfig.Links }}" sshclient
        [/sshserver:/sshclient/sshserver]
        ```
        现在你可以用它的 IP 成功地 ssh 到 sshserver 了。
        ```
        #ssh root@172.17.0.3 –p 22
        ```
    使用`--link`参数，Docker 在容器之间创建了一个安全通道，不需要在容器外部暴露任何端口。
# 配置 Docker 桥
Docker 服务器在 Linux 内核内部默认创建了一个名为`docker0`的网桥，它可以在其他物理或虚拟网络接口之间来回传递数据包，使它们表现为单个以太网。运行以下命令，找出虚拟机中的接口列表及其连接的 IP 地址:
```
root@ubuntu:~# ifconfig
docker0   Link encap:Ethernet  HWaddr 56:84:7a:fe:97:99
 inet addr:172.17.42.1  Bcast:0.0.0.0  Mask:255.255.0.0
 inet6 addr: fe80::5484:7aff:fefe:9799/64 Scope:Link
 inet6 addr: fe80::1/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
 RX packets:11909 errors:0 dropped:0 overruns:0 frame:0
 TX packets:14826 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:516868 (516.8 KB)  TX bytes:46460483 (46.4 MB)
eth0      Link encap:Ethernet  HWaddr 00:0c:29:0d:f4:2c
 inet addr:192.168.186.129  Bcast:192.168.186.255  Mask:255.255.255.0
 inet6 addr: fe80::20c:29ff:fe0d:f42c/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
 RX packets:108865 errors:0 dropped:0 overruns:0 frame:0
 TX packets:31708 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:1000
 RX bytes:59902195 (59.9 MB)  TX bytes:3916180 (3.9 MB)
lo        Link encap:Local Loopback
 inet addr:127.0.0.1  Mask:255.0.0.0
 inet6 addr: ::1/128 Scope:Host
 UP LOOPBACK RUNNING  MTU:65536  Metric:1
 RX packets:4 errors:0 dropped:0 overruns:0 frame:0
 TX packets:4 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:336 (336.0 B)  TX bytes:336 (336.0 B)
```
一旦一个或多个容器启动并运行，您可以通过在主机上运行`brctl`命令并查看输出的`interfaces`列来确认 Docker 已将它们正确连接到`docker0`桥。
在配置`docker0`桥之前，安装桥实用程序:
```
# apt-get install bridge-utils
```
这是一台连接了两个不同容器的主机:
```
root@ubuntu:~# brctl show
bridge name     bridge id               STP enabled     interfaces
docker0         8000.56847afe9799       no              veth21b2e16
 veth7092a45
```
每当创建容器时，Docker 都会使用`docker0`桥接设置。每当创建新容器时，它都会从网桥上可用的范围中分配一个新的 IP 地址，如下所示:
```
root@ubuntu:~# docker run -t -i --name container1 ubuntu:latest /bin/bash
root@e54e9312dc04:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:07
 inet addr:172.17.0.7  Bcast:0.0.0.0  Mask:255.255.0.0
 inet6 addr: 2001:db8:1::242:ac11:7/64 Scope:Global
 inet6 addr: fe80::42:acff:fe11:7/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
 RX packets:7 errors:0 dropped:0 overruns:0 frame:0
 TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:738 (738.0 B)  TX bytes:696 (696.0 B)
lo        Link encap:Local Loopback
 inet addr:127.0.0.1  Mask:255.0.0.0
 inet6 addr: ::1/128 Scope:Host
 UP LOOPBACK RUNNING  MTU:65536  Metric:1
 RX packets:0 errors:0 dropped:0 overruns:0 frame:0
 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
root@e54e9312dc04:/# ip route
default via 172.17.42.1 dev eth0
172.17.0.0/16 dev eth0  proto kernel  scope link  src 172.17.0.7
```
默认情况下，Docker 提供一个名为`docker0`的虚拟网络，其 IP 地址为`172.17.42.1`。Docker 容器的 IP 地址在`172.17.0.0/16`的范围内。
要更改 Docker 中的默认设置，请修改文件`/etc/default/docker`。
将默认桥从`docker0`更改为`br0`可以这样进行:
```
# sudo service docker stop
# sudo ip link set dev docker0 down
# sudo brctl delbr docker0
# sudo iptables -t nat -F POSTROUTING
# echo 'DOCKER_OPTS="-b=br0"' >> /etc/default/docker
# sudo brctl addbr br0
# sudo ip addr add 192.168.10.1/24 dev br0
# sudo ip link set dev br0 up
# sudo service docker start
```
以下命令显示 Docker 服务的新桥名和 IP 地址范围:
```
root@ubuntu:~# ifconfig
br0       Link encap:Ethernet  HWaddr ae:b2:dc:ed:e6:af
 inet addr:192.168.10.1  Bcast:0.0.0.0  Mask:255.255.255.0
 inet6 addr: fe80::acb2:dcff:feed:e6af/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
 RX packets:0 errors:0 dropped:0 overruns:0 frame:0
 TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:0 (0.0 B)  TX bytes:738 (738.0 B)
eth0      Link encap:Ethernet  HWaddr 00:0c:29:0d:f4:2c
 inet addr:192.168.186.129  Bcast:192.168.186.255  Mask:255.255.255.0
 inet6 addr: fe80::20c:29ff:fe0d:f42c/64 Scope:Link
 UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
 RX packets:110823 errors:0 dropped:0 overruns:0 frame:0
 TX packets:33148 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:1000
 RX bytes:60081009 (60.0 MB)  TX bytes:4176982 (4.1 MB)
lo        Link encap:Local Loopback
 inet addr:127.0.0.1  Mask:255.0.0.0
 inet6 addr: ::1/128 Scope:Host
 UP LOOPBACK RUNNING  MTU:65536  Metric:1
 RX packets:4 errors:0 dropped:0 overruns:0 frame:0
 TX packets:4 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:336 (336.0 B)  TX bytes:336 (336.0 B)
```
# 覆盖网络和底层网络
覆盖层是建立在底层网络基础设施(底层)之上的虚拟网络。的目的是实现物理网络中不可用的网络服务。
网络覆盖极大地增加了可以在物理网络上创建的虚拟子网的数量，从而支持多租户和虚拟化。
Docker 中的每个容器都被分配了一个 IP 地址，用于与其他容器进行通信。如果容器必须与外部网络通信，您可以在主机系统中设置网络，并将端口从容器公开或映射到主机。这样，在容器内运行的应用将无法通告它们的外部 IP 和端口，因为这些信息对它们不可用。
解决方案是以某种方式为所有主机上的每个 Docker 容器分配唯一的 IP，并拥有一些在主机之间路由流量的网络产品。
有不同的项目来处理 Docker 网络，如下所示:
*   Flannel
*   织法
*   打开 vSwitch
Flannel 通过给每个容器一个可用于容器间通信的 IP，提供了一个解决方案。使用数据包封装，它在主机网络上创建一个虚拟覆盖网络。默认情况下，Flannel 为主机提供一个`/24`子网，Docker 守护程序从该子网向容器分配 IP。下图显示了使用 Flannel 的容器之间的通信:
![Overlay networks and underlay networks](img/00016.jpeg)
Flannel 在每台主机上运行一个代理**Flannel**，负责从预配置的地址空间中分配子网租约。Flannel 使用 etcd 存储网络配置、分配的子网和辅助数据(如主机的 IP)。
Flannel 使用通用 TUN/TAP 设备，并使用 UDP 创建覆盖网络来封装 IP 数据包。子网分配是在 etcd 的帮助下完成的，etcd 维护覆盖子网到主机的映射。
Weave 创建了一个虚拟网络，将跨主机/虚拟机部署的 Docker 容器连接起来，并支持它们的自动发现。下图显示了一个 Weave 网络:
![Overlay networks and underlay networks](img/00017.jpeg)
Weave 可以穿越防火墙，在部分连接的网络中运行。流量可以选择加密，从而允许主机/虚拟机通过不受信任的网络进行连接。
Weave 增强了 Docker 现有的(单主机)网络能力，例如`docker0`桥，因此这些可以继续被容器使用。
Open vSwitch 是一个开放的源支持 OpenFlow 的虚拟交换机，通常与虚拟机管理程序一起使用，以跨网络互连主机内和不同主机之间的虚拟机。覆盖网络需要使用支持的隧道封装来创建虚拟数据路径，例如 VXLAN 和 GRE。
覆盖数据路径被提供在驻留在 Docker 主机中的隧道端点之间，这给出了给定提供商段内的所有主机彼此直接连接的外观。
当新容器上线时，路由协议中的前缀会更新，通过隧道端点宣布其位置。当其他 Docker 主机接收到更新时，会将转发规则安装到主机所在的隧道端点的 OVS 中。当主机被解除供应时，类似的过程发生，隧道端点 Docker 主机移除解除供应的容器的转发条目。下图显示了通过基于 OVS 的 VXLAN 隧道在多台主机上运行的容器之间的通信:
![Overlay networks and underlay networks](img/00018.jpeg)
# 总结
在本章中，我们讨论了 Docker 的内部网络架构。我们在 Docker 中学习了 IPv4、IPv6 和 DNS 配置。在本章的后面，我们介绍了 Docker 桥以及单个主机和多个主机中容器之间的通信。
我们还讨论了覆盖隧道和在 Docker 网络中实现的不同方法，如 OVS、Flannel 和 Weave。
在下一章中，我们将学习用各种框架组合起来的动手 Docker 网络。