# 技术分享：基于802.11 Fuzzing技术的研究

### 译文声明
本文为翻译文章，原文来源：安全客。
译文仅供参考，具体内容以原文为准。
- 作者：[icecolor](http://bobao.360.cn/member/contribute?uid=775238387)
- 稿费：500 RMB（欢迎投稿！）
- 投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿。

### 背景介绍
在国内关于无线Fuzzing技术的资料较为稀缺。经过数月的学习和研究，我整理并翻译了相关资料，旨在填补这一空白，并希望与广大无线爱好者进行更多交流。在各类安全漏洞挖掘方法中，Fuzzing 是一种非常流行的技术。它是一种黑盒软件测试技术，通过注入畸形或半自动化生成的数据来发现执行错误。对于协议层面，尤其是当源代码不可用时，Fuzzing 尤其有用。在802.11协议中，Fuzzing可以应用于驱动程序和接入点等多个层面。

### 802.11状态机
802.11标准定义的状态机包括以下三个主要状态：
- **State1**：客户端设备的初始状态。
- **State2**：通过对接入点进行身份验证后的认证状态。
- **State3**：授权发送和接收数据通信帧并通过无线接入点和有线网络关联的状态。

这些状态是确保802.11协议正常运行的关键，也是Fuzzing的主要目标之一。

### 802.11帧类型
802.11还定义了三种帧类型：
- **Class1 Frames**：允许从State1、2和3发起探测请求/响应、信标、身份验证请求/响应/解除认证。
- **Class2 Frames**：只有在成功认证后，可以从State2和3发起(重新)关联请求/响应/解除关联。
- **Class3 Frames**：只有在成功关联请求后，可以在State3内解除认证。

### Access Points Fuzzing 802.11 的介绍

#### 1. Fuzzing原理
在802.11协议中，Beacon帧是一个重要组成部分，包含了几乎所有接入点的重要配置信息。通过构建畸形数据包并对Wi-Fi设备进行测试，可以发现已知和未知的漏洞。

#### 2. Fuzzing举例
Scapy是一个开源的网络编程语言，基于Python，可以用于重放数据、捕获分析和生成随机数据包。有人基于Scapy开发了一个名为wifuzz的工具，可以对多种接入点进行Fuzzing，检测出堆栈错误或崩溃。

示例命令：
```bash
$ sudo python wifuzz.py -s fuzztest auth
```
输出示例：
```plaintext
Thur Sep 26 21:41:36 2016 {MAIN} Target SSID: fuzztest; Interface: wlan0; Ping timeout: 60; PCAP directory: /dev/shm; Test mode? False; Fuzzer(s): auth;
Thur Sep 26 21:41:36 2016 {WIFI} Waiting for a beacon from SSID=[fuzztest] Thur Sep 26 21:41:36 2016 {WIFI} Beacon from SSID=[fuzztest] found (MAC=[11:22:33:44:55:66])
...
```

### 基于802.11 Driver 的Fuzzing

#### 802.11协议标准解析
- **帧类型**：管理帧、数据帧、控制帧。
- **信令**：速率、信道、网络名称、密码等。
- **驱动程序**：固件/驱动程序必须解析所有这些信息。针对闭源驱动程序进行逆向工程或开源驱动程序进行黑白盒审计是一项复杂且耗时的任务，因此Fuzzing是一种很好的选择。

#### Madwifi
Madwifi是一个Linux下的无线驱动程序，支持Atheros芯片组。802.11芯片提供了多种操作模式，如监听802.11层、作为接入点、Ad-Hoc网络和Station。

#### 扫描技术
- **主动扫描**：发送探测请求并监听探测响应。
- **被动扫描**：监听Beacon和信道跳跃。

### 信息元素
信息元素是管理帧中的必要字段，由类型、长度和值组成。例如SSID属性的最小值为0，最大值为32字节。如果长度超过缓冲区大小，则可能导致溢出。

### 总结
通过对802.11协议的深入理解，我们可以使用Fuzzing技术来发现和修复潜在的安全漏洞。无论是对接入点还是驱动程序进行Fuzzing，都能显著提高系统的安全性。希望本文能为无线爱好者提供有价值的参考。