# 单核
我们说，作为一个工具包，SwarmKit 不仅会运行容器集群，还会运行 unikernels 集群。
什么是 unikernels，为什么它们如此神奇？
如果你使用 Docker For Mac，你已经在使用单内核了。它们是这些系统的核心。在 Mac 上，**xyve，**FreeBSD 虚拟化系统的一个端口 **(bhyve)，**在单内核模式下运行 Docker 主机。
我们都喜欢容器，因为它们又小又快，但是拥有一种机制来抽象内核并使其组件(容器)共享系统资源、库、二进制文件的安全含义确实令人担忧。只要在任何搜索引擎上寻找关于容器安全的 CVEs 公告。这是一个严重的问题。
Unikernels 承诺在最高级别重新评估软件架构。这里很快解释一下。有一种有效的方法来保证最大的安全性，并且由于它们的性质，它们以非常非常小的尺寸运行。在我们谈论 Terabytes、Petabytes 和更高版本的世界中，你会惊讶地知道像 ukvm 这样的 KVM 的单内核实现可以容纳 67Kb(千字节)、300Kb 的网络服务器二进制文件或几兆字节量级的操作系统映像。
这是可能的，因为 unikernels 基本上不会向栈公开所有的系统调用，但是这些调用包含在二进制文件本身中。一个 **ping** 二进制不需要任何系统调用来访问磁盘、使用加密函数或管理系统进程。那么，为什么不切断 ping 的这些呼叫，并为其提供所需的最低限度呢？这是 unikernels 背后的主要思想。在内部会用*编译一个 ping 命令，一些网络输入输出，原始套接字，仅此而已。*
对于 unikernels，内核和用户空间没有区别，因为地址表是统一的。这意味着地址表是*连续的*。如前所述，这是可能的，因为编译单内核二进制文件时，会在二进制文件中嵌入所需的系统功能，如输入/输出操作、内存管理或共享库*。在传统的操作系统模型中，应用在*运行时*查看和使用系统调用，而对于 unikernels，这些系统调用在*编译时*静态链接。*
![Unikernels](img/image_11_002.jpg)
乍一看这可能很奇怪，但就进程隔离和安全性而言，这是一个巨大的进步。即使有人能够欺诈性地引入一些运行单内核的系统，她也几乎不可能发现任何安全漏洞。攻击面是如此之小，以至于除了正在使用的系统调用或功能之外，极不可能有任何可利用的未使用的系统调用或功能，可能已经被强化了。没有外壳可以调用，没有外部实用程序库或脚本，没有配置或密码文件，没有额外的端口绑定。
那么 unikernels 和 Docker 呢？
在巴塞罗那的 DockerConEU 15 上，一些人跳到舞台上展示如何将 Docker 与 unikernels 集成，后来 Docker Inc .最终收购了该公司，在其他事物之间签署了 Docker For Mac 的诞生。
在柏林举行的 Docker Summit 16 上，有人提到了 unikernels 与容器一起在 SwarmKit 中运行。融合的未来即将到来。
# 向 Docker 投稿
Docker 中的所有这些创新都是可能的，因为这些项目依赖于非常广泛的社区。Docker 是一个非常紧张和活跃的项目，分为几个 Github 存储库，其中最值得注意的是:
*   Docker 本身，发动机:[www.github.com/docker/docker](https://github.com/docker/docker)
*   机器，Docker 托管实例化器:[www.github.com/docker/machine](https://github.com/docker/machine)
*   Swarm，编排服务:[www.github.com/docker/swarmkit](https://github.com/docker/swarmkit)
*   组合，微服务建模工具:[www.github.com/docker/compose](https://github.com/docker/compose)
*   Infrakit，基础设施经理:[www.github.com/docker/infrakit](https://github.com/docker/infrakit)
但是，没有它们的库，这些项目也不会运行，例如 Libcontainer、Libnet、Libcust(等待与 not 合并)和许多其他项目。
没有 Docker 团队和 Docker 社区的承诺，所有这些代码都不会存在。
## Github
鼓励任何公司或个人为项目做出贡献。在[https://github . com/docker/docker/blob/master/CONTINUED . MD](https://github.com/docker/docker/blob/master/CONTRIBUTING.md)有一些指南。
## 文件问题
一个很好的开始方式是通过在相关项目的 GitHub 空间中打开问题来报告异常、bug 或提交想法。
## 代码
另一个很受欢迎的帮助方式是提交请求来修复问题或提出新的特性。这些报告应遵循并参考记录在“问题”页面中的一些问题，并与指导原则保持一致。
## 带等项目
此外，伴随着这本书，许多迷你项目开始了:
*   Swarm2k 和 Swarm3k，作为面向社区的实验，大规模创建 Swarm。一些代码、指令和结果可在[www.github.com/swarmzilla](https://github.com/swarmzilla)各自的存储库中获得。
*   皮带作为 Docker 主机供应器。目前只包括 DigitalOcean 驱动，但可以进一步扩展。
*   用于 Swarm、Machine 和 Docker 证书的可转换模块，将在可转换游戏手册中使用。
*   容器被推送到 Docker Hub 以说明特定组件(如`fsoppelsa/etcd`)或引入新功能(如`fsoppelsa/swarmkit`)。
*   其他次要的请求、黑客攻击和代码部分..
本着开源的精神，以上所有都是自由软件，任何贡献、改进或批评都非常值得赞赏。
# 总结
最后，几句关于这本书历史的话，以及一个关于 Docker 发展速度惊人的注释。
当写一本关于 Docker Swarm 的书的项目刚刚起草时，当时只有旧的 Docker Swarm 独立模式，Swarm 容器负责编排容器的基础设施，不得不依赖外部发现系统，如 Etcd、Consul 或 Zookeeper。
回顾这些时间，就在几个月前，就像思考史前史。就在 6 月下旬，当 SwarmKit 作为一个编排工具包开源，并作为 Swarm Mode 包含在引擎中时，Docker 在编排方面向前迈出了一大步。发布了一个完整的、可扩展的、安全的、简单的本地编排 Docker 的方法。然后，事实证明，编排 Docker 的最佳方式只是 Docker 本身。
但是当 Infrakit 在 2016 年 10 月开源时，在基础设施方面又向前迈出了一大步:现在不仅业务流程和容器组是原语，而且其他对象组，甚至混合在 Infrakit 的原始意图中，也是:容器、虚拟机、单内核，可能还有裸机。
在(不久的)将来，我们可以期望所有这些项目都被粘合起来，让 Infrakit 作为基础设施管理器，能够提供群集(任何东西)，其中容器或其他对象被编排、互连、存储(完全状态)、滚动更新、通过覆盖网络互连和保护。
Swarm 只是这个大生态系统的开始。