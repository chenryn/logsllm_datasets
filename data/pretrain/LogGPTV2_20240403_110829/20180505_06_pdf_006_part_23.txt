SQL> BEGIN
DBMS_LOGMNR.ADD_LOGFILE('/u01/app/oracle/oradata/orcl/redo02.log');
END;
/
PL/SQL procedure successfully completed.
3. Start Log Miner using the procedure:
DBMS_LOGMNR.START_LOGMNR
SQL> BEGIN
DBMS_LOGMNR.START_LOGMNR(options=>
dbms_logmnr.dict_from_online_catalog);
END;
/
PL/SQL procedure successfully completed.
4. Run a DML statement as an example which we will analyze using Log Miner:
SQL> UPDATE HR.EMPLOYEES
SET SALARY=SALARY+1000
WHERE EMPLOYEE_ID=116;
COMMIT; 288
5. Querying the table to view the DML commands captured using Log Miner:
V$LOGMNR_CONTENTS
SQL> SELECT TO_CHAR(TIMESTAMP,'mm/dd/yy hh24:mi:ss') TIMESTAMP,
SEG_NAME, OPERATION, SQL_REDO, SQL_UNDO
FROM V$LOGMNR_CONTENTS
WHERE TABLE_NAME = 'EMPLOYEES'
AND OPERATION = 'UPDATE';
TIMESTAMP SEG_NAME OPERATION SQL_REDO SQL_UNDO
----------------- ---------- ---------- ------------------------------ ------------------------------
10/09/17 06:43:44 EMPLOYEES UPDATE update "HR"."EMPLOYEES" set "S update "HR"."EMPLOYEES" set "S
ALARY" = '3900' where "SALARY" ALARY" = '2900' where "SALARY"
= '2900' and ROWID = 'AAAViUA = '3900' and ROWID = 'AAAViUA
AEAAABVvAAQ'; AEAAABVvAAQ';
For additional information on Oracle LogMiner:
https://docs.oracle.com/cd/E11882_01/server.112/e22490/logminer.htm#SUTIL019
Migration to: PostgreSQL Logging Options
[Back to TOC]
Overview
PostgreSQL does not provide a feature that is directly equivalent to Oracle Log Miner. However, several
alternatives exist which allow viewing historical database activity in PostgreSQL.
Using
PG_STAT_STATEMENTS
Extension module for tracking query execution details with statistical information. The
view presents a single row for each database operation that was logged, including
PG_STAT_STATEMENTS
information about the user, query, number of row retrieved by the query and more.
Examples
Configure and use to view past database activity:
PG_STAT_STATEMENTS
1. On the AWS Management Console, navigate to RDS > Parameter Groups.
289
2. Select the current database parameter group:
3. Set the following parameters:
shared_preload_libraries = 'pg_stat_statements'
pg_stat_statements.max = 10000
pg_stat_statements.track = all
Note: A database reboot may be required for the updated values to take effect.
4. Connect to the and run the following command:
psql=> CREATE EXTENSION PG_STAT_STATEMENTS;
290
5. Test the view to see captured database activity:
PG_STAT_STATEMENTS
psql=> UPDATE EMPLOYEES
SET SALARY=SALARY+1000
WHERE EMPLOYEE_ID=116;
psql=> SELECT *
FROM PG_STAT_STATEMENTS
WHERE LOWER(QUERY) LIKE '%update%';
-[ RECORD 1 ]-------+-----------------------------
userid | 16393
dbid | 16394
queryid | 2339248071
query | UPDATE EMPLOYEES +
| SET SALARY=SALARY+?+
| WHERE EMPLOYEE_ID=?
calls | 1
total_time | 11.989
min_time | 11.989
max_time | 11.989
mean_time | 11.989
stddev_time | 0
rows | 1
shared_blks_hit | 15
shared_blks_read | 10
shared_blks_dirtied | 0
shared_blks_written | 0
local_blks_hit | 0
local_blks_read | 0
local_blks_dirtied | 0
local_blks_written | 0
temp_blks_read | 0
temp_blks_written | 0
blk_read_time | 0
blk_write_time | 0
Note: PostgreSQL does not provide a feature that is equivalent to
PG_STAT_STATEMENTS
LogMiner’s column.
SQL_UNDO
DML / DDL Database Activity Logging
DML and DML operations can be tracked inside the PostgreSQL log file ( ) and
postgres.log
viewed using AWS console.
291
Example
1. On the AWS Console, navigate to RDS > Parameter Groups.
2. Set the following parameters:
log_statement = 'ALL'
log_min_duration_statement = 1
Note: A reboot may be required for the parameters to take effect.
3. Test DDL/DML logging:
- On the AWS Management Console, navigate to RDS > Instances > Select Instance > Logs
- Sort via the Last Written column to show recent logs (click on column header).
- Click View on the relevant log. For example, the PostgreSQL log file shown here with a
logged UPDATE command:
292
Amazon Aurora Performance Insights
The Amazon Aurora Performance Insights dashboard provides information about current and historical SQL
statements, executions and workloads. Note, enhanced monitoring should be enabled during Amazon Aurora
instance configuration.
Example
1. On the AWS Management Console, navigate to RDS > Instances.
2. Select the relevant instance and choose Instance Actions > Modify.
3. Ensure that Enable Enhanced Monitoring option is set to Yes.
4. Mark the checkbox for Apply Immediately.
5. Click Continue.
6. On the AWS Management Console, navigate to RDS > Performance Insights.
7. Select the relevant instance to monitor.
8. Select the timeframe and monitor scope (Waits, SQL, Hosts and Users).
For additional information:
https://www.postgresql.org/docs/9.6/static/runtime-config-logging.html
https://www.postgresql.org/docs/current/static/pgstatstatements.html
http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.Concepts.PostgreSQL.html
293
Migrating from: Oracle Instance Parameters
[Back to TOC]
Overview
Oracle Instance and database-level parameters can be configured via commands. Certain
ALTER SYSTEM
parameters can be configured dynamically and take immediate effect, while other parameters require an
instance restart.
1. All Oracle instance and database-level parameters are stored in a binary file known as the (or
SPFILE
Server Parameter FILE).
2. The binary server parameter file ( ) can be exported to a text file via the following command:
SPFILE
CREATE PFILE = 'my_init.ora' FROM SPFILE = 's_params.ora';
When modifying parameters, the DBA can choose the persistency of the changed values with one of the three
following options:
• Make the change applicable only after a restart by specifying .
scope=spfile
• Make the change dynamically but not persistent after a restart by specifying .
scope=memory
• Make the change both dynamically and persistent by specifying .
scope=both
Example
Use the command for configuring a value for an Oracle parameter
ALTER SYSTEM SET
ALTER SYSTEM SET QUERY_REWRITE_ENABLED = TRUE SCOPE=BOTH;
For additional details about Oracle initialize Parameters and ALTER SYSTEM command:
https://docs.oracle.com/database/121/ADMQS/GUID-EFF3CCE9-DD06-4755-B2DA-32CDD26F7A18.htm#ADMQS0511
https://docs.oracle.com/database/121/SQLRF/statements_2017.htm#SQLRF00902
Migration to: Amazon Aurora DB Parameter Groups
[Back to TOC]
294
Overview
When running your PostgreSQL databases as Amazon Aurora Clusters, changes to cluster-level and database-
level parameters are performed via Parameter Groups.
Most of the PostgreSQL parameters are configurable in an Amazon Aurora PostgreSQL cluster, but some are
disabled and non-modifiable. Since Amazon Aurora clusters restrict access to the underlying operating system,
modification to PostgreSQL parameters are done using parameter groups.
Amazon Aurora is a cluster of DB instances and, as a direct result, some of the PostgreSQL parameters apply to
the entire cluster, while other parameters apply only to a particular database instance in the cluster.
Aurora PostgreSQL Controlled Via
Parameter Class
Cluster-level parameters Managed via cluster parameter groups
Single cluster parameter For example:
group per Amazon Aurora • The PostgreSQL parameter is controlled via a
wal_buffers
Cluster cluster parameter group.
• The PostgreSQL parameter is controlled via a
autovacuum
cluster parameter group.
• The parameter is controlled via a cluster
client_encoding
parameter group.
Database Instance-Level Managed via database parameter groups
parameters
For example:
Every instance in your • The PostgreSQL memory cache
shared_buffers
Amazon Aurora cluster can configuration parameter is controlled via a database parameter
be associated with a unique group with an AWS-optimized default value based on the
database parameter group configured database class:
{DBInstanceClassMemory/10922}
• The PostgreSQL parameter which
max_connections
controls maximum number of client connections allowed to
the PostgreSQL instance, is controlled via a database
parameter group. Default value is optimized by AWS based on
the configured database class:
LEAST({DBInstanceClassMemory/9531392},5000)
• The PostgreSQL which informs
effective_cache_size
the query optimizer how much cache is present in the kernel
and helps control how expensive large index scans will be, is
controlled via a database level parameter group. The default
value is optimized by AWS based on database class (RAM):
{DBInstanceClassMemory/10922}
295
Aurora PostgreSQL Controlled Via
Parameter Class
• The parameter, which
authentication_timeout
controls the maximum time to complete client authentication,
in seconds, is controlled via a database parameter group.
• The parameter
superuser_reserved_connections
which determines the number of reserved
connection "slots" for PostgreSQL superusers, is configured via
a database parameter group.
Examples
Create and configure the Amazon Aurora database and cluster parameter groups:
1. Navigate to the RDS Service section of the AWS Console.
2. Click Parameters Group on the left-hand navigation menu and select Create Parameter Group.
Note: you cannot edit the default parameter group, you will need to create a custom parameter
group to apply changes to your Amazon Aurora cluster and its database instances.
3. Complete all the required configuration and click Create.
296
• Parameter group family – select the database engine type for this group. For example – “
aurora-
” should be selected for Amazon Aurora PostgreSQL clusters.
postgresql9.6
• Type – cluster or database-level parameter group.
• Specify a custom name for your new parameter group.
• Specify a description for your parameter group.
4. Once the new parameter group is created, you can configure its parameters by clicking Edit
Parameters:
5. Setting the values for specific parameters inside the parameter groups is performed by searching
for the parameter name (for example, the parameter) and
authentication_timeout
specifying a new value (for example, 3 minutes). Once the modification is complete, click Save
Changes.
297
6. To associate an Aurora PostgreSQL Cluster with a specific parameter group, do the following:
• Navigate to the Instances List page.
• Select your desired Amazon Aurora instance.
• Click Instance Actions.
• In the context menu, click Modify.
7. In the configuration page, select the desired parameter group.
298
Note: These changes will require an instance restart
8. To apply the changes:
• Navigate to the Amazon Aurora instance list page.
• Expand the instance properties (1).
• Click the Details button (2). If the parameter group is listed as “pending reboot”, an instance
restart is required.
9. To restart your Aurora instance, select Instance Actions and click Reboot.
299
Migrating from: Oracle Session Parameters
[Back to TOC]
Overview
Certain parameters and configuration options in the Oracle database are modifiable on a per-session level.
This is accomplished using the command , which configures parameters for the scope of
ALTER SESSION
the connected session only.
Note:
Not all Oracle configuration options and parameters can be modified on a per-session basis. To view a list of all
configurable parameters that can be set for the scope of a specific session, you will need to query the
view:
v$parameter
SELECT NAME, VALUE FROM V$PARAMETER WHERE ISSES_MODIFIABLE='TRUE';
Example
1. Change the (codepage) parameter of the current session using an command:
NLS_LANAUGE ALTER SESSION
SQL> alter session set nls_language='SPANISH';
Sesi≤n modificada.
SQL> alter session set nls_language='ENGLISH';
Session altered.
SQL> alter session set nls_language='FRENCH';
Session modifiΘe.
SQL> alter session set nls_language='GERMAN';
Session wurde geΣndert.
2. Specify the format of dates values returned from the database using the session parameter:
NLS_DATE_FORMAT
300
SQL> select sysdate from dual;
SYSDATE
---------
SEP-09-17
SQL> alter session set nls_date_format='DD-MON-RR';
Session altered.
SQL> select sysdate from dual;
SYSDATE
---------
09-SEP-17
SQL> alter session set nls_date_format='MM-DD-YYYY';
Session altered.
SQL> select sysdate from dual;
SYSDATE
----------
09-09-2017
SQL> alter session set nls_date_format='DAY-MON-RR';
Session altered.
For additional details about Oracle session parameters:
https://docs.oracle.com/database/121/SQLRF/statements_2015.htm#i2143260
Migration to: PostgreSQL Session Parameters
[Back to TOC]
Overview
PostgreSQL provides session-modifiable parameters that are configured using the command.
SET SESSION
Configuration of parameters using will only be applicable in the current session. To view the list of
SET SESSION
parameters that can be set with , you can query :
SET SESSION pg_settings
SELECT * FROM pg_settings where context = 'user';
Examples of commonly-used session parameters:
1. client_encoding - configures the connected client character set.
2. force_parallel_mode - forces use of parallel query for the session.
3. lock_timeout - sets the maximum allowed duration of time to wait for a database lock to release.
4. search_path - sets the schema search order for object names that are not schema-qualified.
5. transaction_isolation - sets the current Transaction Isolation Level for the session.
Example
301
Change the Date format of the connected session:
mydb=> set session DateStyle to POSTGRES, DMY;
SET
mydb=> select now();
now
-------------------------------------
Sat 09 Sep 11:03:43.597202 2017 UTC
(1 row)
mydb=> set session DateStyle to ISO, MDY;
SET
mydb=> select now();
now
-----------------------------
2017-09-09 11:04:01.3859+00
(1 row)
Oracle vs. PostgreSQL Session parameter examples
Please note that the list below is partial and is meant to highlight various session-level configuration
parameters in both Oracle and PostgreSQL. Not all parameters are directly comparable.
Oracle PostgreSQL
Configure time SET SESSION datestyle to 'SQL,
ALTER SESSION SET
and date format DMY';
nls_date_format =
'dd/mm/yyyy hh24:mi:ss';
Configure the ALTER SESSION SET current SET SESSION SEARCH_PATH TO
current default schema=’schema_name’ schemaname;
schema/database
Generate traces ALTER SESSION SET events N/A
for specific errors '10053 trace name context
forever';
Run trace for a ALTER SESSION SET N/A
SQL statement sql_trace=TRUE;
ALTER SYSTEM SET EVENTS
'sql_trace [sql:&&sql_id]
bind=true, wait=true';
Modify query ALTER SESSION SET SET SESSION random_page_cost
optimizer cost for optimizer_index_cost_adj = TO 6;
index access 50
Modify query ALTER SESSION SET N/A
optimizer row optimizer_mode=all_rows;
access strategy
Memory allocated ALTER SESSION SET SET SESSION work_mem TO '6MB';
to sort operations sort_area_size=6321;
Memory allocated ALTER SESSION SET SET SESSION work_mem TO '6MB';
to hash-joins hash_area_size=1048576000;
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-set.html
302
Migrating from: Oracle Alert.log and logs files
[Back to TOC]
Overview
The primary error log file for the Oracle database is known as the “Alert Log” with a file name that in the
following format: “ ”. The Alert Log contains verbose information regarding the activity
alert.log
of the Oracle database including informational messages and errors. Each event includes a timestamp
indicating when the event occurred.
When encountering database issues, the Oracle Alert Log is the first place to look for troubleshooting and
to investigate errors, failures or for any other messages that might indicate a potential database problem.
Example
1. Partial contents of the Oracle database Alert Log File:
Common events logged in the Alert Log include:
1. Database startup or shutdown.
2. Database redo log switch.
3. Database errors and warnings, starting with and followed by an Oracle error number.
ORA-
4. Network and connection issues
5. Links for a detailed trace files regarding a specific database event
The Oracle Alert Log can be found inside the database Automatic Diagnostics Repository (ADR), a
hierarchical file-based repository for diagnostic information:
$ADR_BASE/diag/rdbms/{DB-name}/{SID}/trace
In addition, several other Oracle server components have their own unique log files, such as the
database listener, Automatic Storage Manager (ASM), etc.
For additional details:
https://docs.oracle.com/cd/B28359_01/server.111/b28310/diag005.htm#ADMIN11267
https://docs.oracle.com/database/121/SUTIL/GUID-E0FF3013-2EBF-4110-88BF-69E7DD2BBD7C.htm#SUTIL1474
303
Migration to: PostgreSQL Error Log via Amazon RDS Console
[Back to TOC]
PostgreSQL provides detailed logging and reporting of errors that occur during the database and connected
sessions lifecycle. In an Amazon Aurora deployment, these informational and error messages are accessible
using the Amazon RDS console.
PostgreSQL vs. Oracle error codes
Oracle error codes start with the “ ” prefix. PostgreSQL messages expressed by assigning five-character
ORA-
error codes divided by message class such as: successful completion, warning, no data and more.
Oracle PostgreSQL
ORA-00001: unique SQLSTATE[23505]: Unique violation: 7 ERROR:
constraint duplicate key value violates unique constraint
(string.string) "constraint_name"
violated