title:Inside Job: Applying Traffic Analysis to Measure Tor from Within
author:Rob Jansen and
Marc Ju&apos;arez and
Rafa Galvez and
Tariq Elahi and
Claudia D&apos;ıaz
Inside Job: Applying Trafﬁc Analysis to Measure
Tor from Within
Rob Jansen†∗, Marc Juarez‡∗, Rafa G´alvez‡, Tariq Elahi‡ and Claudia Diaz‡
†U.S. Naval Research Laboratory, PI:EMAIL
‡imec-COSIC KU Leuven, {marc.juarez, rafa, tariq}@kuleuven.be, {claudia.diaz}@esat.kuleuven.be
Abstract—In this paper, we explore trafﬁc analysis attacks
on Tor that are conducted solely with middle relays rather
than with relays from the entry or exit positions. We create a
methodology to apply novel Tor circuit and website ﬁngerprinting
from middle relays to detect onion service usage; that is, we
are able to identify websites with hidden network addresses
by their trafﬁc patterns. We also carry out the ﬁrst privacy-
preserving popularity measurement of a single social networking
website hosted as an onion service by deploying our novel circuit
and website ﬁngerprinting techniques in the wild. Our results
show: (i) that the middle position enables wide-scale monitoring
and measurement not possible from a comparable resource
deployment in other relay positions, (ii) that trafﬁc ﬁngerprinting
techniques are as effective from the middle relay position as prior
works show from a guard relay, and (iii) that an adversary can
use our ﬁngerprinting methodology to discover the popularity
of onion services, or as a ﬁlter to target speciﬁc nodes in the
network, such as particular guard relays.
I.
INTRODUCTION
Tor [8] network entry and exit points have received con-
siderable focus over the years through continuous research
activity because the entry and exit points directly connect to
the end-user and destination, respectively. However, potential
threats from middle relay positions have received far less
attention. We believe that this is because there is a common
misconception that malicious or compromised middle relays
are not a signiﬁcant threat to end-users’ privacy since they do
not directly connect to either the end-user or the destination
and thus are unable to link both parties together. While middle
relays are not privy to the network addresses of the client
and destination, they can still passively yet directly observe a
plethora of other information including service access times,
transfer volumes and data ﬂow directions, and the preceding
and succeeding relays chosen for connections. This informa-
tion leakage could be analyzed to discover client usage and
network patterns in the Tor network and thus yield potential
attack vectors, and we believe that such threats present a wide
gamut of possible avenues for research.
∗ Equally credited authors.
This paper is authored by an employee(s) of the United States Government and
is in the public domain. Non-exclusive copying or redistribution is allowed,
provided that the article citation is given and the authors and agency are clearly
identiﬁed as its source.
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23261
www.ndss-symposium.org
In this work we focus on the novel application of different
trafﬁc analysis techniques such as circuit ﬁngerprinting [22]
and website ﬁngerprinting (WF) [4], [14], [26], [28], [29], [30]
performed from middle relays as opposed to the usual guard
relays. We design the ﬁrst circuit and website ﬁngerprinting
algorithms speciﬁcally for use at middle relays, and we are
the ﬁrst to apply machine learning to detect from which of
many possible circuit positions a relay is serving. Using our
novel circuit purpose, relay position, and website ﬁngerprint-
ing algorithms, we produce a classiﬁcation pipeline (i.e., a
python library) that can identify which onion service websites
accessible through the Tor network are visited by Tor users. In
selecting this speciﬁc scope we are keen to focus on sensitive
usages of Tor (i.e., onion services) where assumption failures
may lead to high-stakes consequences. We are also speciﬁc
enough to yield a concrete methodology, tangible code, and
data artifacts, as well as empirical results that were thoroughly
analyzed with well understood limitations. We provide our
viable framework of tools1 so that future work may use them
as foundations for the study of attacks and their mitigation.
In the interest of real-world applicability, we deploy our
classiﬁcation pipeline in the ﬁrst real-world measurement
study using WF with real Tor users. For the sake of ethical
research and limiting the impact on user privacy, our pipeline is
augmented with PrivCount [19], a privacy-preserving statistics
collection suite designed to provide differentially-private [9]
results, hiding individual user activity. We use PrivCount to
measure onion services while focusing on the popularity of
only a single well-known social networking platform (SNS) to
further limit the impact on user privacy: the site we measure is
accessible through a single-hop onion service indicating that
the service itself does not require anonymity. Our measurement
not only yields useful information about this particular onion
service, but
that our
classiﬁcation pipeline can be used at middle relays as a vector
for information leakage. We note that while we as ethical
researchers are constrained by the differentially-private (i.e.,
noisy) results, a malicious actor is not and would be able
to produce measurements of higher accuracy. Therefore, our
results represent a lower bound on the information leakage
potential of WF at middle relays.
it also serves as a proof-of-concept
We highlight that in this work we treat website ﬁnger-
printing techniques as general tools to identify websites. In
contrast, previous work on Tor website ﬁngerprinting assumes
a malicious guard relay or a monitored node on the client-to-
guard network path; under this previous model, it is assumed
that an adversary already knows or can easily discover a
1https://github.com/onionpop
target client’s IP address and all that remains in order to
mount a linking attack is to identify the website that the client
visits. In that setting it constitutes an attack to merely perform
WF successfully, whereas in this work we use WF to detect
revealing information about the Tor network and its usage. One
could then leverage that information, e.g., to perform wide-
scale monitoring of onion site usage or to mount an attack
linking client to destination (see Section IX-B).
Our results include: (i) our circuit purpose and relay
position classiﬁers achieve 92.41% ± 0.07 and 98.48% ± 0.01
accuracy respectively; (ii) our WF at the middle classiﬁer
achieves more than 60% accuracy for a closed world of
1,000 onion services, which is competitive with classical
WF applications; (iii) our one-class classiﬁer for real-world
deployment is bounded to 0.6% false positive rate at a cost
of decreasing the true positive rate to 40%; and (iv) our real-
world deployment shows that the social networking website’s
onion service accounts for 0.52% of all onion service circuits
created. These results are compelling and provide evidence
that WF is viable at the middle relay position, that we can
effectively target onion service trafﬁc, and that real-world
deployments can yield actionable results.
We make the following contributions in this paper:
1) we design the ﬁrst classiﬁer to detect relay position,
and the ﬁrst classiﬁer to detect circuit purpose from a
middle relay position using a novel feature set that utilizes
internal Tor protocol meta-data;
2) we are the ﬁrst to show that trafﬁc ﬁngerprinting tech-
niques are effective from a middle relay position for both
closed-world and one-class open-world problems;
3) we produce a classiﬁcation pipeline that combines circuit
purpose, relay position, and WF classiﬁers for real-world
deployment; and
4) we perform the ﬁrst measurement study that applies
trafﬁc ﬁngerprinting to discover Tor onion service
popularity,
privacy-preserving
statistics collection methods.
ethically with
done
II. BACKGROUND
A. Tor
Clients use Tor by ﬁrst telescoping a long-lived circuit
through a series of three volunteer relays: the client chooses a
persistent entry guard relay as its ﬁrst relay (using this same
guard for three months before rotating to a new one), chooses a
new random middle relay, and chooses a last exit relay that will
allow it to connect to the intended Internet service external to
the Tor network. The relays forward trafﬁc in both directions
through the circuit to facilitate communication between the
client and its communicating peer.
Tor’s popularity is partly due to the ﬂexibility provided by
its design: the external peer need not run Tor or even be aware
that the client is connecting through the Tor network. However,
clients who connect to external peers must still rely on the
existing DNS and SSL/TLS certiﬁcate authentication systems,
and the external peers themselves are not anonymous. To
mitigate these issues, Tor also develops and maintains an onion
service protocol, a communication mode in which both the
user and its peer run Tor and build circuits that are connected
together. All communication is internal to the Tor network, and
therefore the user and its peer both enjoy anonymity and end-
to-end encryption without relying on external insecure name
and certiﬁcate authentication systems.
Fig. 1. Circuits built and relays used during an onion service connection. The
I-S-M2 relay serves as the introduction point, and the R-C-M2 relay serves
as the rendezvous point.
B. Onion Service Protocol
The protocol that Tor clients and onion services use to
establish a connection is as follows. In order to advertise them-
selves and be reachable by clients, onion services maintain a
few long-term circuits that last at least one hour. Relays at the
end of these long-term circuits play the role of Introduction
Points (IP). The addresses of IPs along with other onion service
information such as their public keys are stored as descriptors
in a distributed database formed by Tor relays that have been
assigned the HSDir ﬂag. To create an IP circuit, the onion
service must create a regular three-hop circuit and send an
establish_intro cell to the last relay. The last relay
replies with an intro_established cell if it agrees to
act as the IP on this circuit.
To establish a connection with the onion service, the client
ﬁrst selects a middle relay to serve as a Rendezvous Point (RP)
and builds a circuit ending at that relay. The client then sends
an establish_rendezvous cell to the RP which replies
with a redezvous_established cell. The client must
then inform the onion service of this RP using the service’s IP.
To learn the IP, the client builds a circuit to an HSDir, sends
the service’s .onion address that was communicated out-of-
band, and receives the onion service’s descriptor (including the
addresses of the service’s current IPs). The client then builds
a circuit to one of the IPs and sends it an introduce cell
which contains the RP’s address and a one-time secret, all
encrypted with the onion service’s public key. The IP relays
the cell to the onion service which acknowledges the receipt
by sending a introduce_ack back to the client.
The onion service decrypts the RP address, builds a circuit
to it, and sends it a rendezvous cell that contains the one-
time secret provided by the client for authentication. The RP
relays this cell to the client who will verify the one-time secret
and acknowledge receipt to the onion service. At this point, a
six-hop circuit exists between the client and the onion service
and can be used for application communication. Figure 1
depicts the four main types of circuits that have been created
(excluding the HSDir circuit): an onion service to IP, a client
to IP, a client to RP and an onion service to RP. Note that the
circuits created for this process are dedicated to the onion ser-
vice protocol and cannot be reused for other communications.
C. Stream Isolation
Applications tunnel peer connections, called streams,
through Tor circuits. The Tor software decides if a new stream
should be assigned to an existing used circuit, an existing
unused circuit, or if a new circuit should be built to handle the
stream. Tor would like to provide unlinkability of unrelated
trafﬁc in order to reduce the exposure to honest-but-curious
exit nodes that may track unrelated visits by the same user.
However, completely isolating each stream to its own circuit
2
would signiﬁcantly degrade Tor’s performance while allowing
malicious servers to cause a client to create an arbitrary number
of circuits, which would increase the probability that a client
selects a compromised node for at least one of them. For
this reason, Tor prefers to isolate groups of streams to their
own circuit. In TorBrowser, a hardened fork of Firefox and
the recommended web browser to use with Tor, streams are
grouped by the ﬁrst-party domain that appears in the URL
bar (across different tabs). This means that almost all streams
generated during a page download will go through the same
circuit, including requests to third parties. Note that, although
unlikely, Tor may create a new circuit while fetching a web
page; for example, a restrictive exit policy of a circuit may
cause Tor to create a new circuit with an exit that supports the
fetch of a particular resource (e.g., transitions from HTTP to
HTTPS and vice versa).
However, the rules for handling onion service trafﬁc are
different. Since onion service circuits do not exit
the Tor
network and require that a Rendezvous Point is agreed upon
between the client and the onion service, there is currently no
stream grouping by the ﬁrst-party domain of the onion URL
in the address bar. Therefore, a user visiting an onion service
with mixed ﬁrst-party onion service and third-party onion or
non-onion service content may create multiple circuits to fetch
the content; it will create a circuit to fetch all of the ﬁrst party
content, a circuit to fetch all non-onion service third party
content (even if each third party is served from a different
domain), and a circuit for each third-party embedded resource
hosted from a unique onion service.
These peculiarities of the onion service protocol limit the
visibility of an adversary monitoring the trafﬁc at the middle:
while an adversary at the entry or client-to-entry link is able
to capture all the trafﬁc that a user generates during a visit
to an onion service, the adversary we consider would only be
able to record the trafﬁc for the ﬁrst-party content.
D. Trafﬁc Fingerprinting
The trafﬁc analysis techniques that we study in this
paper are based on applying supervised learning methods on
the encrypted and anonymized trafﬁc traces that are captured
from middle relays we control. We study trafﬁc ﬁngerprinting
attacks such as circuit and website ﬁngerprinting that use side-
channel information leaking from encrypted network packet
timing and lengths to discover patterns in the communication.
In particular, circuit ﬁngerprinting allows an attacker to distin-
guish between visits to onion services from regular sites and
website ﬁngerprinting enables one to identify the website being
accessed. To the best of our knowledge, all previous website
ﬁngerprinting studies in Tor have been conducted either at the
entry guard or somewhere on the network path between the
client and the guard.
Most studies evaluate WF in a closed world model in which
it is assumed that the classiﬁer could be trained on data for all
of the sites that the user was possibly going to visit. This as-
sumption is unrealistic because there are potentially billions of
websites and the resources necessary to collect, store, and pro-
cess the data for all such sites would be overwhelming. A more
realistic evaluation method uses an open world model in which
only a small fraction of the sites are available to the adversary
for training. However, the closed world has been considered
a realistic scenario if
the adversary aims at detecting only
onion services [6]. It has been shown that a local and passive
3
Fig. 2. The adversary runs a middle relay and monitors the Tor messages
that it relays. The adversary will observe circuits carrying trafﬁc for onion
services internal to Tor and regular web servers external to Tor.
adversary can effectively ﬁrst detect onion service visits using
circuit ﬁngerprinting, and then apply website ﬁngerprinting
methods to infer to which website they belong [22], [27].
In this paper, we evaluate the effectiveness of trafﬁc
ﬁngerprinting from Tor middle relays under both open and
closed world models while focusing on onion services. WF is
particularly threatening for onion services for two reasons [6],
[25]: (i) there are fewer onion services than regular sites and,
since the adversary can ﬁlter out visits to regular sites, it needs
less resources to ﬁngerprint onion services effectively; and (ii)
onion services hide their location on the network so that it is
difﬁcult to censor them and may host sensitive content, and
therefore visitors of those sites are especially vulnerable if the
WF attack is successful.
III. REQUIREMENTS AND ETHICAL RESEARCH
We now describe the capabilities required to ﬁngerprint
onion service websites from the middle relay position and
discuss ethical considerations.
A. Requirements
To apply the techniques described in the following
sections, we do not depend on the ability to break the
encryption of Tor but do depend on the ability to eavesdrop
on all network trafﬁc to and from relays we control. We
can obtain a trafﬁc trace or sample of both the encrypted
network packets and the Tor protocol messages (i.e., cells).
We are able to observe, decrypt, and read the headers and
payloads of Tor cells that are destined for the middle relays
we control, but we can only observe and read the headers of
cells intended for another destination and forwarded through
our relay (the payloads of such cells are encrypted).
We also need to deploy at least one middle relay that
contributes bandwidth to Tor. Our attacks become more sta-
tistically sound as we observe more circuits, and the fraction