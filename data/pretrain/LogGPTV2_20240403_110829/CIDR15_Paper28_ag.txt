| 6.1 |Llama and YARN |on the request execution path. However, because shared |
Llama is a standalone daemon to which all Impala daemons send per-query resource requests. Each resource request is
state is received asynchronously, Impala daemons may make decisions locally that result in exceeding limits specified by| the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN.Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. | the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN.Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. | Geometric Mean (in secs) | 250 |Impala
SparkSQL 	216
Presto
Hive 0.13
 | 
Impala
SparkSQL 	216
Presto
Hive 0.13
 | 
Impala
SparkSQL 	216
Presto
Hive 0.13
 |
|---|---|---|---|---|---|---|| the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |Geometric Mean (in secs) |200 | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  || the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |Geometric Mean (in secs) |150 | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  || the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |Geometric Mean (in secs) |100 | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  || the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |Geometric Mean (in secs) |50 | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  || the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |the policy. In practice this has not been problematic because state is typically updated faster than non-trivial queries. Fur-ther, the admission control mechanism is designed primarily to be a simple throttling mechanism rather than a resource management solution such as YARN. Resource pools are defined hierarchically. Incoming re-quests are assigned to a resource pool based on a placement policy and access to pools can be controlled using ACLs. The configuration is specified with a YARN fair scheduler allocation file and Llama configuration, and Cloudera Man-ager provides a simple user interface to configure resource pools, which can be modified without restarting any running services. |Geometric Mean (in secs) |0 | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  | Impala SparkSQL 	216 Presto Hive 0.13  || 7. |EVALUATION |Interactive  |Interactive  |Interactive  |Reporting |Analytic |
| 	The purpose of this section is not to exhaustively evaluate the performance of Impala, but mostly to give some indi- |	The purpose of this section is not to exhaustively evaluate the performance of Impala, but mostly to give some indi- |Figure 6: Comparison of query response times on single-user runs. |Figure 6: Comparison of query response times on single-user runs. |Figure 6: Comparison of query response times on single-user runs. |Figure 6: Comparison of query response times on single-user runs. |Figure 6: Comparison of query response times on single-user runs. |cations. There are independent academic studies that have
| derived similar conclusions, e.g. [6]. | derived similar conclusions, e.g. [6]. | derived similar conclusions, e.g. [6]. | performance advantage against Hive 0.13 (from an average | performance advantage against Hive 0.13 (from an average | performance advantage against Hive 0.13 (from an average | ur | 2500 |