==>
( event ( I n t e n d T o P a i r ( User , PhysicalChannelA ,
PhysicalChannelB ) )
| |
event ( CompromiseUser ( UserId ) )
( event ( CompromiseDevice ( PhysicalChannelA ) ) &&
event ( CompromiseDevice ( PhysicalChannelB ) ) ) ) .
| |
As expected, ProVerif returned false for the query and produced
a counterexample, i.e. an execution trace that violates the security
property. There are two versions of the query, one with Physical-
ChannelA and another with PhysicalChannelB on the second line.
The queries can be refined to exclude already analysed attacks or
to focus on specific cases.
Figure 6: Double misbinding
Investigating further, we found five different types of misbinding
attacks with ProVerif. One of them is the basic misbinding attack
described in Section 3 and shown in Figure 2(b). In that attack, the
compromised device is the non-initiator B, and there is a compro-
mised user with physical access to the third device C. Other attacks
arise as variations of the first one: On one hand, the compromised
device can be the initiator A or the non-initiator B. On the other
hand, device C may be a compromised one or an uncompromised
device accessed by a compromised user. These choices make four
different variants of the misbinding attack.
It came as a surprise to us that there is a fifth type of misbinding
attack, which we call double misbinding. In this attack, shown in
Figure 6, there are two honest users. Each one of them is trying to
pair two devices, one of which is compromised. The compromised
devices collude so that, as the end result, the two uncompromised
devices are paired.
wirelessin-bandchannelphysicalOOB channelsACauthenticationrelayedauthenticationBunauthenticated key exchangeDrelayedauthenticationSession 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand460Figure 7: Five variants of misbinding found by ProVerif
Double misbinding is easiest to understand in the out-of-band
mode of Bluetooth SSP, where the user transfers some information
OOB from one device to another. In that case, one compromised
device receives the OOB message from the first honest user and for-
wards it secretly to the second compromised device, which outputs
it to the second honest user. The attack is also possible in SSP with
numeric comparison because all the values needed for computing
the verification codes Va and Vb are transmitted on the wireless
link (see Figure 4). The attacker can sniff these values, compute Va
and Vb, and show them on the displays of the two compromised
devices (devices B and C in Figure 6).
The five variants of misbinding are summarized in Figure 7. Each
sub-figure shows two rooms. The honest user tries to pair two de-
vices, initiator A1 and non-initiator B1, in her room but one of
them ends up being paired (indicated by the thick red arrow) with a
device in the room above. The sub-figures show the locations of the
honest users, compromised users, and compromised devices. The
black one-directional arrow is specific to Bluetooth SSP with nu-
meric comparison. It shows how the attacker forwards the six-digit
code from one device to another or, in the double-misbinding case
of Figure 7(e), sniffs its inputs from the wireless communication.
Afterwards, we systematically enumerated the different com-
binations of initiator and non-initiator devices, compromised and
uncompromised users and devices, and user physical access in a
setting of maximum two users and four devices. This analysis con-
firmed that, after removing impossible and equivalent cases, the
five attack variants remain. Increasing the number of users and
devices does not seem to give raise to any new types of attacks
because there is maximum that can be involved in a single pairing.
4.2 Modelling device bootstrapping
Although the ProVerif models of EAP-NOOB and Bluetooth differ
greatly, the parts relevant to detecting misbinding are similar. The
main difference is that, in EAP-NOOB, only the peer device is
identified by the physical access channel. The EAP-NOOB server
has a strong cryptographically verifiable identity (HTTPS URL
and web certificates), and we assume that the server cannot be
compromised. The query for the absence of misbinding attacks is
as follows:
query OobChannelS : channel , OobChannelP : channel , K : Key_t ,
User : User_t ;
( event ( HttpsAccess ( User , OobChannelS ) ) &&
event ( ServerComplete ( OobChannelS , K) ) &&
event ( PeerComplete ( OobChannelP , K) ) )
==>
( event ( CompromiseUser ( User ) )
event ( I n t e n d T o P a i r ( User , OobChannelS , OobChannelP ) )
( event ( CompromisePeer ( OobChannelP ) ) &&
event ( CompromiseServer ( OobChannelS ) ) ) ) .
| |
| |
Again, ProVerif finds a counterexample to this query. Because
only the peer side can be compromised, there are only two possible
variants of misbinding. One is the attack of Figure 3(b) with server
as A, compromised peer device as B, and an uncompromised peer
device as C. In the other attack variant, both peer devices are com-
promised and there is no need for a user to operate device C. These
variants correspond to Figure 7(a) and 7(c) if we interpret A1 as the
authentication server, B1 as Alice’s wireless device, and B2 as the
attacker’s device.
5 MITIGATION
5.1 Authentication solutions
As explained in Section 2.2, the STS and SIGMA protocols and
their variants [9, 15, 33] tackle misbinding by binding endpoint
identities cryptographically to the created session. These solutions
are suitable for situations where the devices have certificates, public
keys for authentication, and unique names. This is typically not the
case in device pairing. Moreover, as we explained in Section 3, the
endpoints in device pairing have no a-priory knowledge of each
other’s identifiers, and neither does the typical user who is assisting
the key exchange.
The common way to communicate the device identifier, such as
model and serial number, to the user is printing them on an iden-
tification plate attached to the device. Together with a certificate
issued by the manufacturer, this information can be used for authen-
ticating the device. Another possibility is to print a fingerprint of
the device’s public-key onto the device, e.g. as a hexadecimal value.
If a metal plate, sticker or printing on the device is not considered
tamper-proof enough, the identifiers could be etched to the device
enclosure. While such physical indicators can ultimately be coun-
terfeited, the burden on the attacker is increased significantly. The
disadvantage of these solutions is that the user needs to compare
the authenticated device identifiers with the serial-number plates
or key fingerprints, which complicates the pairing process.
5.2 Presence checking
As noted in Section 2.4, trusted-computing research has not put
much faith in the printed serial numbers or public-key fingerprints.
Instead, the researchers have tried to find more secure ways of
checking the presence of a DRTM inside a physical device. We
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand461can generalize these approaches from DRTM to any device with
a trusted computing base (TCB) that is surrounded by potentially
compromised layers of software. The techniques for DRTM pres-
ence checking could be applied to checking the physical presence
of the pairing endpoint for a given device, which could prevent the
misbinding attacks.
The round-trip time measurement suggested by Fink [21] de-
pends on the latency caused by the cuckoo in the communication
chain. In our attacks against device pairing, the in-band communica-
tion takes place directly with the third device, and timing measure-
ment is unlikely to be able distinguish between two devices within
the Bluetooth radio range. This issue of distance bounding has been
widely studied in relation to RFIDs and wireless keys [25][41].
Ding et al. [18] provide a summary of several other solutions.
One is a hardware-based secure channel, i.e. a trusted path, that
allows the user to communicate directly with the DRTM or TCB
inside the device. This could, for example, be an LED indicator light
or a special-purpose USB port. The need for such a feature in smart
devices is well known, but the idea has never been widely adopted
by device manufacturers. The great variety of manufacturers and
form factors in smart devices would also make it difficult for the user
to know which feature can be truly trusted. Another solution is to
enclose the devices into a Faraday cage to prevent them from com-
municating with external entities during the key-presence checking.
This approach was previously suggested for bootstrapping sensor
nodes wirelessly [34]. Zhang et al. [46] propose several presence
checking methods based on analog channels, which do not provide
strong security guarantees but make the attacks impractical. One
method is based on comparing the GPS location measurements
by the two endpoints, and another on comparing images captured
by co-located devices of their immediate environment. They also
propose measuring the timing of a screen-to-camera video channel,
which would be difficult to forward to a remote device without
causing a detectable delay.
5.3 Asset tracking
We believe the practical approach to detecting misrepresented de-
vice identities might be asset tracking, i.e. bookkeeping of the phys-
ical assets that belongs to an organization or an individual. This
requires each device to have a unique identifier, which is registered
into a database when the user purchases a device. In the simplest
case, the database is accessed only by human users, in which case
any existing asset tracking system or database can be used.
When the organization knows the models and serial numbers of
its devices and the purpose assigned to each one, the information
can be used for cross-checking during device pairing. For example,
if there is only one new display device allocated for Alice, Alice
can compare the device information from the database with the
identifier authenticated in the device pairing process when she
deploys the device.
For this to work, each device needs to know its own identifier and
learn the peer identifier during the key exchange. The identifiers
should be bound to the cryptographic key exchange in such a
way that agreement on session key cannot be reached without also
agreeing on the identifiers. Each device should show the identifier of
its peer to the user, e.g. when initiating the pairing protocol or when
confirming the numeric comparison. In Bluetooth SSP protocol,
this would require changes to the input of the verification codes,
while EAP-NOOB already has a built-in authenticated message field
(PeerInfo) for communicating such auxiliary peer information. Of
course, the software of an uncompromised device should not allow
the users to modify the device identifier. As the result of these
measures, device A in the scenario of Figure 2(b) would show the
identifier of the unknown device C to the user and the attacker
cannot replace it with the expected identifier of device B.
Manufacturer-issued device certificates [16, 27] can further help
the process by providing secure information about the types and
models of the devices. This will reduce the reliance on the asset
database because all other information except correctness of the
device identifier can be communicated in the certificate.
For the average consumer, it is difficult to keep track of purchased
devices over any longer span of time. However, this obstacle may be
disappearing as smart devices are increasingly cloud connected and
their ownership is therefore often registered by the manufacturer or
some other cloud service. The same online service can replace the
corporate asset-tracking system for an individual user. Furthermore,
there are proposals for logging Internet-of-Things devices to a
blockchain [32, 39], which could also be used for asset tracking.
Above, we have mostly discussed device pairing and Bluetooth,
but the same solutions also work for EAP-NOOB and device regis-
tration to the cloud. The main difference is that only one endpoint
of the key exchange is a physical asset that needs to be tracked.
The fact that the authentication server is online and provided to the
user as a service means that it could help with ownership tracking
or connect directly to the manufacturers on the user’s behalf.
5.4 On Bluetooth SSP and double misbinding
As noted in Section 4.1, SSP with numeric comparison is vulnerable
to double misbinding because all the inputs for computing the
verification codes Va and Vb are transmitted on the wireless link
and can be sniffed. If Va and Vb were computed as function of the
ECDH shared secret, the two compromised devices could not show
the value on their displays. This would prevent double misbinding,
although not the simpler misbinding attacks. Similar protocols
in the future might consider taking advantage of the secrecy to
limit the space that the attacker has for maneuvering. A possible
disadvantage is that the devices would have to compute the ECDH
shared secret before displaying the verification codes, which could
impact the user experience on devices with slow processors. The
current SSP protocol also has a clean design where the six-digit
verification codes are not at all expected to be secret.
6 DISCUSSION
It remains to be discussed how serious the misbinding vulnerability
is and whether we should really be worried about it. We do not
want to be alarmist but instead try to provide balanced arguments
for thinking about the issue.
First, the vulnerability is not specific to Bluetooth SSP and EAP-
NOOB, the examples discussed in this paper. To back this claim,
let us briefly consider another prominent bootstrapping protocol.
Device Provisioning Protocol (DPP) [5] is a bootstrapping mecha-
nism recently standardized by the Wi-Fi Alliance for configuring
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand462Wi-Fi network information on devices with limited user interfaces.
DPP relies on a configurator, e.g. a smartphone application, for boot-
strapping all other devices, called enrollees, in the network. Every
enrollee must have an asymmetric key pair, which is communicated
to the configurator over an out-of-band (OOB) channel together
with communication metadata such as the radio channel and band.
The misbinding attack against DPP is almost trivial: when the user
is configuring a compromised device B, the attacker simply replaces
the public key and communication metadata output from B with
those of another device C. In one variant of DPP, public key is
printed as a QR code, and in that case, the device compromise is
equal to replacing this piece of paper.
Any pairing or bootstrapping protocol that relies solely on the
user’s physical identification of the endpoints will be equally vul-
nerable regardless of the protocol design. In fact, even strong au-
thentication of the endpoint identifiers does not prevent misbinding
unless each endpoint knows what the other’s identifier should be.