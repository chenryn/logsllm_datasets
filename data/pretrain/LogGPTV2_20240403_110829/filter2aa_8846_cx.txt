 Lacks a formal feedback cycle
 Reactive instead of proactive
Waterfall  Linear sequential lifecycle
 Each phase is completed before continuing
 Lacks a formal way to make changes during a cycle
 Project is completed before collecting feedback and starting again
V-shaped  Based on the waterfall model
 Each phase is complete before continuing
 Allows for verification and validation after each phase
 Does not contain a risk analysis phase
Prototyping  Three main models:
 Rapid prototyping uses a quick sample to test the current project.
 Evolutionary prototyping uses incremental improvements to a design.
 Operational prototypes provide incremental improvements, but are intended to
be used in production.
Incremental  Uses multiple cycles for development (think multiple waterfalls)
 The entire process can restart at any time as a different phase
 Easy to introduce new requirements
86
 Delivers incremental updates to software
Spiral  Iterative approach to development
 Performs risk analysis during development
 Future information and requirements are funneled into the risk analysis
 Allows for testing early in development
Rapid application
development
 Uses rapid prototyping
 Designed for quick development
 Analysis and design are quickly demonstrated
 Testing and requirements are often revisited
Agile  Umbrella term for multiple methods
 Highlights efficiency and iterative development
 User stories describe what a user does and why
 Prototypes are filtered down to individual features
 Maturity models. There are five maturity levels of the Capability Maturity Model Integration (CMMI):
1. Initial. The development process is ad hoc, inefficient, inconsistent and unpredictable.
2. Repeatable. A formal structure provides change control, quality assurance and testing.
3. Defined. Processes and procedures are designed and followed during the project.
4. Managed. Processes and procedures are used to collect data from the development cycle to make
improvements.
5. Optimizing. There is a model of continuous improvement for the development cycle.
 Operation and maintenance. After a product has been developed, tested and released, the next phase of the
process is to provide operational support and maintenance of the released product. This can include resolving
unforeseen problems or developing new features to address new requirements.
 Change management. Changes can disrupt development, testing and release. An organization should have a
change control process that includes documenting and understanding a change before attempting to implement
it. This is especially true the later into the project the change is requested. Each change request must be evaluated
for capability, risk and security concerns, impacts to the timeline, and more.
 Integrated product team. Software development and IT have typically been two separate departments or groups
within an organization. Each group typically has different goals: developers want to distribute finished code, and IT
wants to efficiently manage working systems. With DevOps, these teams work together to align their goals so that
software releases are consistent and reliable.
87
8.2 Identify and apply security controls in development environments
The source code and repositories that make up an application can represent hundreds or thousands of hours of work and
comprise important intellectual property for an organization. Organizations must be prepared to take multiple levels of risk
mitigation to protect the code, as well as the applications.
 Security of the software environments. Historically, security has been an afterthought or a bolt-on after an
application has been developed and deployed, instead of a part of the lifecycle. When developing an application,
considerations must be made for the databases, external connections and sensitive data that are being handled
by the application.
 Security weaknesses and vulnerabilities at the source-code level. The MITRE organization publishes a list of
the 25 most dangerous software errors that can cause weaknesses and vulnerabilities in an application
(http://cwe.mitre.org/top25/#Listing). For example, if an input field is not verified for content and length, then
unexpected errors can occur. Additionally, if file access or encryption is lacking in an application, then users could
potentially access information that they do not have permissions for. Code reviews, static analysis, testing and
validation can all help mitigate risks in developing software.
 Configuration management as an aspect of secure coding. The change control process should be tightly
integrated with development to ensure that security considerations are made for any new requirements, features
or requests. A centralized code repository helps in managing changes and tracking when and where revisions to
the code. The repository can track versions of an application so you can easily roll back to a previous version if
necessary.
 Security of code repositories. The version control system that houses source code and intellectual property is
the code repository. There might be different repositories for active development, testing and quality assurance. A
best practice for securing code repositories is to ensure that they are as far away from the internet as possible,
even if that means that they are on a separate internal network that does not have internet access. Any remote
access to a repository should use a VPN or another secure connection method.
 Security of application programming interfaces. There are five generations of programming languages. The
higher the generation, the more abstract the language is and the less a developer needs to know about the details
of the operating system or hardware behind the code. The five generations are:
1: Machine language. This is the binary representation that is understood and used by the computer
processor.
2: Assembly language. Assembly is a symbolic representation of the machine-level instructions.
Mnemonics represent the binary code, and commands such as ADD, PUSH and POP are used. The
assemblers translate the code into machine language.
3: High-level language. High-level languages introduce the ability to use IF, THEN and ELSE statements as
part of the code logic. The low-level system architecture is handled by the programming language.
FORTRAN and COLBOL are examples of generation 3 programming languages.
88
4: Very high-level language. Generation 4 languages further reduce the amount of code that is required,
so programmers can focus on algorithms. Python, C++, C# and Java are examples of generation 4
programming languages.
5: Natural language. Generation 5 languages enable a system to learn and change on its own, as with
artificial intelligence. Instead of developing code with a specific purpose or goal, programmers only define
the constraints and goal; the application then solves the problem on its own based on this information.
Prolog and Mercury are examples of generation 5 programming languages.
8.3 Assess the effectiveness of software security
Putting protections in place is not enough security to give you peace of mind. To know that those protections are working
as designed, organizations should routinely audit their access protections. You should also revisit your implementations to
identify new risks that might need to be mitigated, and to ensure that the project is meeting the requirements that were
agreed upon.
 Auditing and logging of changes. The processes and procedures for change control should be evaluated during
an audit. Changes that are introduced in the middle of the development phase can cause problems that might not
yet be discovered or caused in testing. The effectiveness of the change control methods should be an aspect of
auditing the development phase.
 Risk analysis and mitigation. Most of the development methodologies discussed in section 8.1 include a process
to perform a risk analysis of the current development cycle. When a risk has been identified, a mitigation strategy
should be created to avoid that risk. Additionally, you can document why a risk might be ignored or not addressed
during a certain phase of the development process.
8.4 Assess security impact of acquired software
When an organization merges with or purchases another organization, the acquired source code, repository access and
design, and intellectual property should be analyzed and reviewed. The phases of the development cycle should also be
reviewed. You should try to identify any new risks that have appeared by acquiring the new software development process.
8.5 Define and apply secure coding guidelines and standards
Many organizations have a security strategy that is focused at the infrastructure level; it deals with things like network
security, identity and access management, and endpoint security. Organizations that develop code internally should also
include coding in their security strategy. They should specify practices for ensuring the security of the code as well as coding
standards, such as the preferred programming language for particular use cases.
 Security weaknesses and vulnerabilities at the source-code level. Just about every application (or chunk of
source code) has bugs. While not all bugs are specifically related to security, they can sometimes lead to a security
vulnerability. One effective way of finding and fixing bugs is to use source code analysis tools, which are also called
static application security testing (SAST) tools. These tools are most effective during the software development
89
process, since it’s more difficult to rework code after it is in production. However, be aware that these tools can’t
find many weaknesses and they introduce extra work for the teams, especially if they generate a lot of false
positives. Today, with security being of paramount concern, the expectation is that all source code is scanned
during development and after release into production.
 Security of application programming interfaces. Application programming interfaces (APIs) enable applications
to make calls to other applications. Without proper security, APIs are a perfect way for malicious individuals to
compromise your environment or application. The security of APIs starts with requiring authentication using a
method such as OAuth or API keys. Authorization should also be used and enforced. For example, one API key
might enable you to read information but you need a separate API key to alter or write information. Many
companies use an API security gateway to centralize API calls and perform checks on the calls (checking tokens,
parameters, messages, etc.) to ensure they meet the organization’s requirements. Other common methods to
secure your APIs is to use throttling (which protects against DoS or similar misuse), scan your APIs for weaknesses,
and use encryption (such as with an API gateway).
 Secure coding practices. There are established practices you should follow to maximize the security of your code.
Some of the most common ones are:
 Input validation. Validate input, especially from untrusted sources, and reject invalid input.
 Don’t ignore compiler warnings. When compiling code, use the highest warning level available and
address all warnings that are generated.
 Deny by default. By default, everybody should be denied access. Grant access as needed.
 Authentication and password management. Require authentication for everything that is not meant
to be available to the public. Hash passwords and salt the hashes.
 Access control. Restrict access using the principle of least privilege, and deny access if there are issues
checking access control systems.
 Cryptographic practices. Protect secrets and master keys by establishing and enforcing cryptographic
standards for your organization.
 Error handling and logging. Avoid exposing sensitive information in log files or error messages. Restrict
access to logs.
 Data protection. Encrypt sensitive information, everywhere.
 Communication security. Use Transport Layer Security (TLS) everywhere possible.
 System configuration. Lock down servers and devices. Keep software versions up to date with fast
turnaround for security fixes. You can find good information for securing your servers and devices from
NIST. Visit https://www.nist.gov to search for standards and guides related to your environment.
 Memory management. Use input and output control, especially for untrusted data, and watch for
buffer size issues (use static buffers). Free memory when it is no longer required.
90
Domain 8 Review Questions
Read and answer the following questions. If you do not get one at least one of them correct, spend more time with the
subject.
1. You are a software development manager starting a new development project. You want to focus the development
process around user stories. The development process must be efficient and have multiple iterations as changes
and requirements are discovered. Which development methodology should you use?
a. Agile
b. Waterfall
c. Spiral
d. Rapid application development
2. You are in the early stages of the development lifecycle and creating design requirements. The application will
contain several forms that allow users to enter information to be saved in a database. The forms should require
users to submit up to 200 alphanumeric characters, but should prevent certain strings. What should you perform
on the text fields?
a. Input validation
b. Unit testing
c. Prototyping
d. Buffer regression