        raise(SIGCONT);//向自身发送SIGCONT信号，表示继续执行
        char *str1="what is your name?\n";
        static char name[0x10];
        char *ptr_name=name;
        mywrite(str1);
        myread(ptr_name,0x10);
        puts("welcome!");
        mywrite(ptr_name);
    }
    void tracer(pid_t child_pid)
    {
        int status;
        struct user_regs_struct regs;
        waitpid(child_pid, &status, 0);
        //如果子进程的ptrace被patch掉，则无法接收到status
        if (!WIFSTOPPED(status))
        {//宏用来指出子进程是正常退出的，返回一个非零值
            printf("gg\n");
            exit(1);
        }
        ptrace(PTRACE_SETOPTIONS, child_pid, 0, PTRACE_O_EXITKILL);
        //如果子进程处于退出状态则发送一个SIGKILL信号给它
        while (WIFSTOPPED(status))
        {
            ptrace(PTRACE_SYSCALL, child_pid, 0, 0);//在子进程进程syscall之前断下
            waitpid(child_pid, &status, 0);
            ptrace(PTRACE_GETREGS, child_pid, 0, &regs);//获取寄存器值
            if (regs.orig_rax == SYS_CALL_mywrite)
            {
                //str,strlen(str),1
                regs.orig_rax = SYS_write;
                unsigned long long int tmp = regs.rdx;
                regs.rdx = regs.rsi;
                regs.rsi = regs.rdi;
                regs.rdi=tmp;
                ptrace(PTRACE_SETREGS, child_pid, 0, &regs);
                //设置寄存器值，使其改为正确的syscall
            }
            if (regs.orig_rax == SYS_CALL_myread)
            {
                //str,strlen(str),0
                regs.orig_rax = SYS_read;
                unsigned long long int tmp = regs.rdx;
                regs.rdx = regs.rsi;
                regs.rsi = regs.rdi;
                regs.rdi=tmp;
                ptrace(PTRACE_SETREGS, child_pid, 0, &regs);
            }
            ptrace(PTRACE_SYSCALL, child_pid, 0, 0);
            waitpid(child_pid, &status, 0);
        }
    }
    int main() 
    {
        pid_t child_pid = fork();
        if (child_pid 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    void test()
    {
        FILE *fp;
        int TracerPid=0;
        fp=fopen("/proc/self/status","r");
        // printf("%p\n",fp);
        static char buf[0x100];
        char *ptr=&buf;
        while(fgets(ptr, 0x100, fp))
        {
            if (strstr(ptr,"TracerPid"))
            {   
                char tmp[0x10];
                int len=strlen(ptr);
                TracerPid=atoi((char *)ptr+len-3);
                if (TracerPid != 0)
                {
                    puts("don't debug me!");
                }
            }
        }
    }
    int main(int argc, char const *argv[])
    {
        while(1)
        {
            test();
            sleep(1);
        }
    }
类似的操作还有扫描整个虚拟地址空间，在text段查找被修改的字节码，如当调试器下断点的时候实际上会插入int3的字节码，从而达到断下的目的，如果扫描到这些特征字节码（如0xcc等等）就马上停止程序，从而达到反调试的作用，同样的比较容易被绕过，这里就只提供一种思路，不再举具体例子
**2.检测/proc/self/cmdline**
这种操作本质上就是在检测输入的命令内容，如果输入执行`gdb ./xx`或者`strace ./xx`就会被检测到
总体还是还是比较鸡肋的，如果先进gdb在attach pid的话就检测不到。。。
    #include 
    #include 
    int main(int argc, char *argv[]) 
    {
       char buf1[0x20], buf2[0x100];
       FILE* fp;
       snprintf(buf1, 24, "/proc/%d/cmdline", getppid());
       fp = fopen(buf1, "r");
       fgets(buf2, 0x100, fp);
       fclose(fp);
       if(!strcmp(buf2, "gdb") || !strcmp(buf2, "strace")||!strcmp(buf2, "ltrace"))
       {
           printf("Debugger detected");
           return 1;
       }  
       printf("All good");
       return 0;
    }
**3.忽略int3异常信号**
调试中最常见的操作便是下断点，而一般的下断点的方法就是在即将执行的指令前插入int3的字节码 (CC) ，在程序执行到int3时，就会触发 SIGTRAP
信号，而调试器就会接收到这些信号进行并对子进程进行处理，而如果子进程通过设置signal函数忽略SIGTRAP
信号，就可以使得断点无效，也就能达到反调试的作用
但是这个操作似乎只适用于反调试远古时期的gdb，现在的最新版本gdb基本上都防不住，仅提供一种思路
**4.设置时间间隔**
在程序启动时，通过alarm设置定时，到达时则中止程序 ，这样就不能长时间调试程序
    #include 
    #include 
    #include 
    void alarmHandler(int sig)
    {
       printf("don' t debug me");
       exit(1);
    }
    void__attribute__((constructor))setupSig(void) 
    {//设置程序一开始就执行
       signal(SIGALRM, alarmHandler);
       alarm(3);
    }
    int main(int argc, char *argv[]) 
    {
       getchar();
       puts("hello!");
       puts("hello!");
       puts("hello!");
       return 0;
    }
当然还是比较容易绕过，方法很多很多
## 参考链接