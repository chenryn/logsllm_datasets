Deﬁnition 2: Symmetric-Key Encryption
A symmetric key encryption (SEnc, SDec) with key space K is deﬁned as:
• SEnc(K, m): given a key K and a message m, outputs a ciphertext ct.
• SDec(K, ct): given a key K and a ciphertext ct, outputs a plaintext.
The following must hold.
Correctness. For all messages m in the message space, Pr[SDec(K, SEnc(K, m)) =
m] = 1, where the probability is taken over K ←R K.
One-time Security. For any PPT adversary A, the following advantage is negligible:
AdvOT
SKE,A(λ) :=(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Prb′ = b :
(m0, m1) ← A(1λ)
K ←R K, b ←R {0, 1}, ct = SEnc(K, mb)
b′ ← A(ct)
 −
.
1
2(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Authenticated Encryption
Deﬁnition 3: Authenticated Encryption
An authenticated symmetric encryption (AE) with message-space M and key-space K
consists of two polynomial-time deterministic algorithms (EncAE, DecAE):
• The encryption algorithm EncAE(K, M) generates C, encryption of the message M
with the secret key K.
• The decryption algorithm DecAE(K, C), returns a message M or ⊥.
The following must hold.
Perfect correctness. For all λ, for all K ∈ K and m ∈ M, we have
DecAE(K, EncAE(K, M)) = m.
One-time Privacy and Authenticity. For any PPT adversary A, we have:
Advae-ot
AE,A(λ) :=(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Pr"b′ = b : K ←R K; b ←R {0, 1}
b′ ←R AEncO(·,·),DecO(·)(1λ,M,K) # − 1/2(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
where EncO(m0, m1), on input two messages m0 and m1, returns EncAE(K, mb), and
DecO(φ) returns DecAE(K, φ) if b = 0, ⊥ otherwise. A is allowed at most one call to each
oracle EncO and DecO, and the query to DecO must be diﬀerent from the output of EncO.
A is also given the description of the key-space K as input.
= negl(λ),
Public-Key Encryption
2.1 Notations and Basics
21
Deﬁnition 4: Public-Key Encryption
A Public-Key Encryption (PKE) consists of the following PPT algorithms (ParamPKE,
GenPKE, EncPKE, DecPKE):
• GenPKE(1λ): on input the security parameter, generates a pair of public and secret
keys (pk, sk).
• EncPKE(pk, M): on input the public key and a message, returns a ciphertext ct.
• DecPKE(pk, sk, ct): deterministic algorithm that returns a message M or ⊥, where
⊥ is a special rejection symbol.
The following must hold.
Perfect correctness. For all λ, we have
Pr"DecPKE(pk, sk, ct) = M(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(pk, sk) ←R GenPKE(1λ);
ct ←R EncPKE(pk, M)
# = 1.
Deﬁnition 5: Multi-ciphertext CCA security [BBM00]
A public-key encryption PKE is IND-CCA secure if for any PPT adversary A, we have:
AdvIND-CCA
PKE,A (λ) :=(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
where:
Pr b = b′
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
CEnc := ∅, b ←R {0, 1}
(pk, sk) ←R GenPKE(1λ)
b′ ← ADecO(·),EncO(·,·)(1λ, pk)
= negl(λ)
 − 1/2(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
• On input the pair of messages (m0, m1), EncO(m0, m1) returns EncPKE(pk, mb) and
sets CEnc := CEnc ∪ {ct}.
• DecO(ct) returns DecPKE(pk, sk, ct) if ct /∈ CEnc, ⊥ otherwise.
Key-Encapsulation Mechanism
Deﬁnition 6: Tag-based KEM
A tag-based Key-Encapsulation Mechanism (KEM) for tag space T and key space K
consists of three PPT algorithms (GenKEM, EncKEM, DecKEM):
• GenKEM(1λ): on input the security parameter, generates a pair of public and secret
keys (pk, sk).
• EncKEM(pk, τ): on input the public key and a tag τ, returns a pair (K, C) where K
is a uniformly distributed symmetric key in K and C is a ciphertext, with respect
to the tag τ ∈ T .
• DecKEM(pk, sk, τ, C): deterministic algorithm that returns a key K ∈ K, or a special
rejection symbol ⊥ if it fails.
The following must hold.
22
Chapter 2. Preliminaries
Perfect correctness. For all λ, for all tags τ ∈ T , we have
Pr"DecKEM(pk, sk, τ, C) = K(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(pk, sk) ←R GenKEM(1λ);
(K, C) ←R EncKEM(pk, τ) # = 1.
Deﬁnition 7: Multi-ciphertext PCA security [OP01].
A key encapsulation mechanism KEM is IND-PCE secure if for any adversary A, we
have:
where:
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
AdvIND-PCA
Pr b = b′
TEnc = TDec := ∅, b ←R {0, 1}
(pk, sk) ←R GenKEM(1λ)
b′ ← ADecO(·,·,·),EncO(·)(1λ, pk)
KEM,A (λ) :=(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
 − 1/2(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
• The decryption oracle DecO(τ, C,cK) computes K := DecKEM(pk, sk, τ, C).
turns 1 if cK = K ∧ τ /∈ TEnc, 0 otherwise. Then it sets TDec := TDec ∪ {τ}.
• The oracle EncO(τ) computes (K, C) ←R EncKEM(pk, τ), sets K0 := K and K1 ←R
K. If τ /∈ TDec ∪ TEnc, it returns (C, Kb), and sets TEnc := TEnc ∪ {τ}; otherwise it
returns ⊥.
= negl(λ)
It re-
Cryptographic Assumptions
Prime-Order Groups
Let GGen be a PPT algorithm that on input 1λ returns a description G = (G, q, P ) of an
additive cyclic group G of order p for a 2λ-bit prime p, whose generator is P .
We use implicit representation of group elements as introduced in [EHK+13]. For a ∈ Zp,
deﬁne [a] = aP ∈ G as the implicit representation of a in G. More generally, for a matrix
A = (aij) ∈ Zn×m
we deﬁne [A] as the implicit representation of A in G:
p
[A] :=
a11P ... a1mP
an1P ... anmP
 ∈ Gn×m
We will always use this implicit notation of elements in G, i.e., we let [a] ∈ G be an element
in G. Note that from [a] ∈ G it is generally hard to compute the value a (discrete logarithm
problem in G). Obviously, given [a], [b] ∈ G and a scalar x ∈ Zp, one can eﬃciently compute
[ax] ∈ G and [a + b] ∈ G.
Deﬁnition 8: Computational Diﬃe-Hellman Assumption
The Computational Diﬃe-Hellman (CDH) assumption [DH76] states that, in a prime-
order group G ←R GGen(1λ), no PPT adversary can compute [xy], from [x] and [y] for
x, y ←R Zp, with non-negligible success probability.
Equivalently, this assumption states it is hard to compute [a2] from [a] for a ←R Zp. This
comes from the fact that 4 · [xy] = [(x + y)2] − [(x − y)2].
2.2 Cryptographic Assumptions
23
Pairing Groups
The use of pairing friendly elliptic curves for cryptography has been initiated by [BF01,
BF03, Jou00, Jou04]. We refer to [GPS08] for further details on the use of pairing for cryp-
tography. Let PGGen be a PPT algorithm that on input 1λ returns a description PG =
(G1, G2, GT , p, P1, P2, e) of asymmetric pairing groups where G1, G2, GT are cyclic group
of order p for a 2λ-bit prime p, P1 and P2 are generators of G1 and G2, respectively, and
e : G1 × G2 → GT is an eﬃciently computable (non-degenerate) bilinear map. Deﬁne
PT := e(P1, P2), which is a generator of GT . We again use implicit representation of group
elements. For s ∈ {1, 2, T} and a ∈ Zp, deﬁne [a]s = aPs ∈ Gs as the implicit representation
of a in Gs . More generally, for a matrix A = (aij) ∈ Zn×m
we deﬁne [A]s as the implicit
representation of A in Gs:
p
[A]s :=
 ∈ Gn×m
s
a11P ... a1mP
an1P ... anmP
We will always use this implicit notation of elements in Gs, i.e., we let [a]s ∈ Gs be an element
in Gs. Note that from [b]T ∈ GT , it is hard to compute the value [b]1 ∈ G1 and [b]2 ∈ G2
(pairing inversion problem). Obviously, given [a]s ∈ Gs and a scalar x ∈ Zp, one can eﬃciently
compute [ax]s ∈ Gs. Further, Given [a]1, [a]2, one can eﬃciently compute [ab]T using the
pairing e. For two matrices A, B with matching dimensions deﬁne e([A]1, [B]2) := [AB]T in
GT .
Matrix Diﬃe-Hellman
We recall the deﬁnitions of the Matrix Decision Diﬃe-Hellman (MDDH) assumption from
[EHK+13].
Deﬁnition 9: Matrix Distribution
Let k, ℓ ∈ N, with ℓ > k, and a prime p. We call Dℓ,k(p) a matrix distribution if it outputs
in polynomial time matrices in Zℓ×k
of full rank k and satisfying the following property:
p
Pr[orth(A) ⊆ Span(B)] =
where A, B ←R Dℓ,k(p). We write Dk(p) := Dk+1,k(p).
1
Ω(p)
,
Without loss of generality, we assume the ﬁrst k rows of A ←R Dℓ,k(p) form an invertible
matrix. The Dℓ,k(p)-Matrix Diﬃe-Hellman problem in a group Gs of order p, is to distinguish
the two distributions ([A]s, [Aw]s) and ([A]s, [u]s) where A ←R Dℓ,k(p), w ←R Zk
p and u ←R
Zℓ
p.
Deﬁnition 10: Dℓ,k(p)-Matrix Diﬃe-Hellman assumption, Dℓ,k(p)-MDDH
Let Dℓ,k(p) be a matrix distribution. We say that the Dℓ,k(p)-Matrix Diﬃe-Hellman
(Dℓ,k(p)-MDDH) assumption holds in a group Gs, if for all PPT adversaries A:
Adv
Dℓ,k(p)-mddh
Gs,A
(λ) := | Pr[A(Gs, [A]s, [Aw]s) = 1] − Pr[A(Gs, [A]s, [u]s) = 1]| = negl(λ),
where the probability is taken over A ←R Dℓ,k(p), w ←R Zk
p, u ←R Zℓ
p.
24
Chapter 2. Preliminaries
p
, U ←R Zℓ×Q
Let Q ≥ 1. For W ←R Zk×Q
, we consider the Q-fold Dℓ,k(p)-MDDH as-
sumption in the group G, which consists in distinguishing the distributions ([A]s, [AW]s) from
([A]s, [U]s). That is, a challenge for the Q-fold Dℓ,k(p)-MDDH assumption consists of Q inde-
pendent challenges of the Dℓ,k(p)-MDDH assumption (with the same A but diﬀerent random-
ness w). As shown in [EHK+13] (and recalled in Lemma 1), the Dℓ,k(p)-MDDH assumption
is random self reducible, that is, it implies its Q-fold variant.
p
Deﬁnition 11: Q-fold Dℓ,k(p)-MDDH assumption
Let Q ≥ 1, and Dℓ,k(p) be a matrix distribution. We say that the Q-fold Dℓ,k(p)-MDDH
assumption holds in a group Gs, if for all PPT adversaries A:
Adv
Q-Dℓ,k(p)-mddh
Gs,A
(λ) := | Pr[A(Gs, [A]s, [AW]s) = 1]−Pr[A(Gs, [A]s, [U]s) = 1]| = negl(λ),
where the probability is taken over A ←R Dℓ,k(p), W ←R Zk×Q
p
, U ←R Zℓ×Q
p
.
Lemma 1: Dℓ,k(p)-MDDH ⇒ Q-fold Dℓ,k(p)-MDDH [EHK+13]
Let Q, ℓ, k ∈ N∗ such that ℓ > k, and a group Gs of prime order p. For any PPT adversary
A, there exists a PPT adversary B such that:
Adv
Q-Dℓ,k(p)-mddh
Gs,A
(λ) ≤
Q · Adv
(ℓ − k) · Adv
Dℓ,k(p)-mddh
Gs,B
(λ)
Dℓ,k(p)-mddh
Gs,B
if 1 ≤ Q ≤ ℓ − k
(λ) + 1
p−1
if Q > ℓ − k
p
where the probability is taken over A ←R Uℓ,k(p), W ←R Zk×Q
For each k ≥ 1, [EHK+13] speciﬁes distributions Lk, SCk, Ck (and others) over Z(k+1)×k
such that the corresponding Dk(p)-MDDH assumptions are generically secure in prime-order
groups and form a hierarchy of increasingly weaker assumptions. Lk-MDDH is the well known
k-Linear assumption, denote as k-Lin for short, with 1-Lin = DDH, the decisional Diﬃe-
Hellman assumption. In this work we are particularly interested in the uniform matrix distri-
bution Uℓ,k(p).
, U ←R Zℓ×Q
.
p
p
Deﬁnition 12: Uniform distribution
Let ℓ, k ∈ N, with ℓ > k, and p be a prime. We denote by Uℓ,k(p) the uniform distribution
over all full-rank ℓ × k matrices over Zp. Let Uk(p) := Uk+1,k(p).
In [GHKW16], it shown that for any ℓ, k ∈ N∗ such that ℓ > k, the Uℓ,k(p)-MDDH assump-
tion is equivalent to the Uk(p)-MDDH assumption.
Lemma 2: Uℓ,k(p)-MDDH ⇔ Uk(p)-MDDH [GHKW16]
Let ℓ, k ∈ N∗, with ℓ > k, s ∈ {1, 2, T}, and a group Gs of prime-order p. For any PPT
adversary A, there exists a PPT adversary B (and vice versa) such that:
Adv
Uℓ,k(p)-mddh
Gs,A
(λ) = AdvUk(p)-mddh
Gs,B
(λ).
Together with Lemma 1, this implies the following corollary.
2.2 Cryptographic Assumptions
25
Corollary 1: Uk(p)-MDDH ⇒ Q-fold Uℓ,k(p)-MDDH
Let Q, ℓ, k ∈ N∗, with ℓ > k, and a group Gs of prime order p. For any PPT adversary
A, there exists a PPT adversary B such that:
Adv
Q-Uℓ,k(p)-mddh
Gs,A
(λ) ≤ AdvUk(p)-mddh
Gs,B
(λ) +
1
p − 1
.
Among all possible matrix distributions Dℓ,k(p), the uniform matrix distribution Uk(p) is
the hardest possible instance as stated in Lemma 3, so in particular k-Lin ⇒ Uk-MDDH.
Lemma 3: Dℓ,k(p)-MDDH ⇒ Uℓ,k(p)-MDDH, [EHK+13]
Let Dℓ,k(p) be a matrix distribution, and Gs be a group of prime order p. For any PPT
adversary A, there exists a PPT adversary B such that:
Adv
Uℓ,k-mddh
Gs,A
(λ) ≤ Adv
Dℓ,k(p)-mddh
Gs,B
(λ).
We now present a standard assumption in asymmetric pairing groups, known as the Deci-
sional Bilinear Diﬃe Hellman (DBDH) assumption.
Deﬁnition 13: DBDH assumption
We say that the DBDH assumption holds in a pairing group PG := (G1, G2, p, P1, P2, e),
if for all PPT adversaries A:
AdvDBDH
PG,A (λ) := | Pr[A(PG, [a]1, [b]1, [b]2, [c]2, [abc]T ) = 1]
− Pr[A(PG, [a]1, [b]1, [b]2, [c]2, [s]T ) = 1]|