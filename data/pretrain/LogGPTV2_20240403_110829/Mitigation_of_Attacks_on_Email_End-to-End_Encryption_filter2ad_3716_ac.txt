the adversary may mask this by using a suitable alias. If the victim
simply answers to this email, the cleartext will be leaked to the
adversary. Figure 2 (b) displays a typical example for an attack from
[31]: Both the SMTP and the MIME contexts are altered to redirect
replies and to hide the plaintext when the victim reads the email.
4 DECRYPTION CONTEXTS
We have seen in the previous section that EFAIL-DE and REPLY
attacks induce changes to the SMTP context of an encrypted MIME
element, to its MIME context, or both. We also know that EFAIL-MG
attacks will be mitigated, in novel or upcoming versions of both
S/MIME and OpenPGP, by the introduction of AEAD encryption.
Our basic idea is as follows: We generate a representation of the
SMTP and MIME contexts which is (a) invariant under standard
email operations (low false positive rate) and (b) changed by all
EFAIL-DE and REPLY attacks (high true positive rate). We call this
representation the decryption context DC of the encrypted MIME
element, and use DC as associated data in the AEAD encryption.
Thus if an EFAIL-DE or REPLY attack occurs, DC will be altered,
the AEAD decryption will return an error, and the email client can
no longer be used as a decryption oracle.
4.1 Canonicalization of RFC 822 Headers
We represent the SMTP and the MIME contexts by selections of
RFC 822 email headers: the Content-Type headers to protect the
MIME contexts, and all headers which contain email addresses to
protect the SMTP context. These RFC 822 headers may be altered
slightly during SMTP transport. Line breaks may be inserted into
long header lines, whitespaces may be added or removed, and up-
per case letters may be substituted by lower case letters. Without
canonicalization, any such minor change would change the decryp-
tion context and decryption would fail. To reduce this false positive
rate, we borrow the idea of header canonicalization from the DKIM
standard [9], and apply the relaxed canonicalization algorithm de-
scribed in [9, Section 3.4.2] to each header before including it in
the decryption context.
4.2 Defining Decryption Contexts
In this section, we specify precisely what the SMTP and MIME con-
texts are, and how to use them to compute the decryption context
as a single byte-string DC. To allow the sender to set the desired
security level, we allow for some flexibility in the form of a de-
cryption context policy P from which the decryption context is
derived. For a specific example of our syntax (which is inspired by
DKIM [9]), see Figure 3 and Figure 4.
Definition 1. An SMTP policy PSMTP is a list of RFC 822 header
names (h1, h2, . . . , hn), in lowercase notation. It is serialized by join-
ing all elements with the separator ":" and prepending "h=".
Definition 2. The SMTP context DCSMTP of an encrypted MIME
part M with respect to policy PSMTP is a list of contexts for each
header name from PSMTP. Each context for a header name is the list
of values for that header in the email containing M, preserving the
original order. When serializing this list of lists, no separators are
used. Instead, (header || ":") is prepended and "\r\n" appended to
each element in the context for any header name, and all resulting
strings are concatenated in list order.
This definition is very permissive and allows for insecure policies
which may not mitigate REPLY. In Section 5 we therefore conducted
an evaluation of headers which potentially determine the reply
target in actual email clients. This evaluation is the basis to define
a single policy Pstrong
SMTP in Subsection 7.2 which is applicable to all
emails, and this policy will be the basis for our security proof.
Definition 3. A MIME policy PMIME is list of keywords. It is seri-
alized by joining all elements with the separator ":" and prepending
"m=". Currently, only the single keyword "mimepath" is defined.
Definition 4. The MIME context DCMIME of an encrypted MIME
element M with respect to a policy PMIME is a list of contexts for each
keyword from PMIME. Each context for a keyword is a list of printable
US-ASCII strings not containing the characters "\r" (carriage return),
"\n" (newline) or ":". When serializing this list of lists, no separators
are used. Instead, (":" || keyword || ":") is prepended and "\r\n"
appended to each element in the context for any keyword, and all
resulting strings are concatenated in list order.
The MIME context for "mimepath" is the list of canonicalized
Content-Type headers, with the boundary parameter removed, from
the root of the MIME tree down to the encrypted MIME element M.
We have to drop the boundary parameter from the Content-Type
header, because some email services rewrite the boundary iden-
tifier (see Section 8). Note that the leading ":" in the definition
distinguishes all MIME context components of DC from all SMTP
context components.
Again, this definition is very permissive, since it allows insecure
sequences like (multipart/mixed,multipart/encrypted) from
Figure 2. However, it is up to the sender to decide which level of
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1652Figure 2: Changes of email context of Figure 1 for different attack classes. (a) EFAIL-DE ([33], MIME context), (b) REPLY ([31],
SMTP and MIME context), (c) REPLY ([22], SMTP context only)
security an email needs. Security against EFAIL-DE attacks can
only be shown for mime elements Mstrong with special values of
DCMIME, which will be defined in Subsection 7.2.
Definition 5. The DC policy P is the tuple
P (cid:66) (PSMTP, PMIME).
It is serialized by joining the serialization of its components with the
separator ";".
Definition 6. The decryption context DC of an email is the 3-
tuple
DC (cid:66) (DCSMTP, DCMIME, P).
It is serialized by the concatenation of the serialization of its compo-
nents without any (additional) separators: DCSMTP || DCMIME || P.
4.3 Decryption Contexts in AEAD
We use the decryption context DC as associated data in the AEAD
schemes which are implemented to mitigate EFAIL malleability
gadget attacks (cf. Subsection 2.3). Thus we unify the different
mitigation approaches, without additional overhead in the cryp-
tographic core implementation. From the properties of an AEAD
scheme [38] it is clear that if the email and MIME element M was
modified by the adversary to M∗ in such a way that the new decryp-
tion context DC∗ is different from DC (DC (cid:44) DC∗), then AEAD.Dec
returns a decryption error and the attack fails since no plaintext is
returned.
If we can modify the encrypted content of a MIME element itself,
for example, through the use of EFAIL malleability gadgets [33],
then decryption contexts can be circumvented. This is because the
ciphertext itself or the underlying plaintext can never be part of the
decryption context DC. Therefore, it is essential that authenticated
encryption is used.
4.4 Decryption Context Policies
Each recipient needs to be able to recompute DC, otherwise the
message can not be decrypted. Hence we have to include P in the
source code of the email.
Explicit policies vs. hardcoded policies. Only very few vari-
ants of secure policies to generate decryption contexts exist, and
in our evaluation we use one specific such policy Pstrong (cf. Sub-
section 7.2). Therefore naturally the question arises if we should
not simply include this policy in the code of each email client, so
From: Alice 
To: Bob 
CC: Carol 
CC: Curt 
Subject: Confidential
Decryption-Context: h=from:reply-to:to:cc:bcc:subject;m=mimepath
Content-type: application/pkcs7-mime; smime-type=enveloped-data
Content-Transfer-Encoding: base64
MIAGCSqGSIb3DQEHA6CAMIACAQAxggHXMIIB0wIB...
1
2
3
4
5
6
7
8
9
10
Figure 3: Encrypted email with decryption context policy.
that there is no need to transmit it explicitly. By selecting an AEAD
cipher for email encryption, this policy would automatically be acti-
vated. The reason why we prefer explicit policy transmission is the
flexibility in updating such policies. Suppose a new attack vector
is discovered in the future, for example, involving a newly stan-
dardized SMTP header. If the DC policy is hardcoded, the senders
have no means to protect against this attack, since they have to
rely on all recipients to install an updated version of their email
client. With explicit DC policy transmission, the senders remain in
control of the security of their emails.
Example. Figure 3 shows an example of an encrypted email with
a DC policy. This policy is sent in a novel Decryption-Context
header and contains two directives: an SMTP directive to create
DCSMTP and a MIME directive to create DCMIME. The SMTP di-
rective contains references to the From, Reply-to, To, Cc, Bcc and
Subject headers. This has the following effect. First, the existing
From header is canonicalized and used as the starting byte sequence
of DCSMTP. Since no Reply-to header exists, the empty string is
appended to DCSMTP. Next, the single canonicalized To header is
appended. Since we have two CC headers, first the header containing
Carol’s email address is appended, then the one containing Curt’s.
Since no BCC is present, the empty string is appended (cf. Subsec-
tion 4.5). Finally, the Subject header is appended, completing the
computation of DCSMTP. The MIME directive contains the parame-
ter mimepath which indicates that the normalized Content-Type
headers from the root of the MIME tree to the encrypted element
should be concatenated to form DCMIME. Since the ciphertext is the
root element, only one such header forms DCMIME. The resulting
decryption context DC is shown in Figure 4.
Including P in DC. The policy P itself is also part of DC. Other-
wise, if the Decryption-Context header would not be protected,
AliceBobCarolmultipart/encryptedREPLYREPLYtext/htmlFrom: PI:EMAIL: PI:EMAIL: Carol@c.netDate:Subject: Secret!Content-Type: multipart/mixedtext/htmlAttackerHTTP GETAttackerBobmultipart/encryptedREPLYFrom: PI:EMAIL: PI:EMAIL: Carol@c.netDate:Subject:Content-Type: multipart/mixedtext/plainAliceBobCarolFrom: PI:EMAIL: PI:EMAIL: Carol@c.netDate:Subject: Secret!Content-Type: multipart/encryptedContent-Type: application/pgp-encryptedContent-Type: application/octet-streamREPLYREPLYAttacker(a)(b)(c)Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA16531
2
3
4
5
6
7
from:Alice \r\n
to:Bob \r\n
cc:Carol \r\n
cc:Curt \r\n
subject:Confidential\r\n
:mimepath:application/pkcs7-mime; smime-type=enveloped-data\r\n
h=from:reply-to:to:cc:bcc:subject;m=mimepath
Figure 4: Decryption context DC for the email in Figure 3.
For readability, the single string is broken up into sev-
eral lines: The SMTP context (lines 1-5), the MIME context
(line 6), and the policy string (line 7).
the adversary could try to manipulate both the email source code
M and the policy P to get a new source code M∗ and a new policy
P∗ with
DC(M, P) = DC(M
∗
, P∗).
By including the policy in DC, we effectively disable all manipula-
tions of the policy string in Decryption-Context.
4.5 Blind Carbon Copy (BCC)
In [3], Adam Barth and Dan Boneh warn against the use of BCC
in encrypted email standards like OpenPGP and S/MIME, since en-
cryption will leak the identities of the BCC recipients. We therefore
assume that the sender of an encrypted email does not include any
BCC recipients, as it is best practice in encrypted email communi-
cation. If a BCC recipient was present in the email sent, none of the
recipients would be able to decrypt the message; our policy Pstrong
SMTP
contains the header name bcc since surprisingly BCC headers may
define the target of a reply action in some email clients (see Table 2).
So, a non-empty BCC string would be present in DC, which cannot
be computed by any of the recipients because BCC headers will be
stripped by SMTP servers.
5 REPLY BEHAVIOR IN EMAIL CLIENTS
Since the initial specification of basic email headers in RFC 822, new
official and custom headers have been introduced in subsequent
standards (e.g., [36]) and by email clients. Every header can poten-
tially influence the Reply- or Reply-All-Action of email clients. An
unprotected header with such a behavior allows for a REPLY attack
by modifying the SMTP context of an encrypted email. Therefore,
in order to define a secure DC policy, we need to answer two ques-
tions: (1) Which email headers exist? (2) How do these headers
influence the email client response behavior?
To answer our questions, we selected a number of popular email
clients supporting S/MIME or OpenPGP encryption and tested their
behavior when responding to messages including different headers.
Our selection covered 75 percent of the email client market share in
2019.2 For these email clients, we reverse-engineered the algorithm
that determines the SMTP context of a draft email generated from
the Reply- or Reply-All-Action. Initially, we used these actions on
a very large email containing all possible header fields known to
us. This email was generated from public mailing list archives3 and
2The 2019 Email Client Market Share, Litmus Software: https://litmus.com/blog/
infographic-the-2019-email-client-market-share
3Mailing list archives: https://markmail.org/ and https://lists.ubuntu.com/.
spam datasets.4 We identified 8091 unique headers and included
every header twice (with unique email addresses as values) in our
test email to catch if the first, the last, or both copies of a header
field would be included in the reply. For example, the header field
Return-To would be included in the test email as such:
return-to: dctest+PI:EMAIL
return-to: dctest+PI:EMAIL
By opening this email in the email client, and using the Reply-
and Reply-All actions, we could identify all header fields that were
included in the draft as recipients in the To, Cc and other fields.
Because the presence of some header fields can shadow others (for
example, Reply-To takes precedence over From), we then removed
one of the detected headers from the test email and iterated the
process until the draft email is empty and has no recipients, or the
action became unavailable. The result is shown in Table 2.
Many email clients use the same known headers to generate
the recipient list for Reply actions. These include Reply-To and
From common to Reply and Reply-All actions, and additionally
To and Cc only for Reply-All Actions. Some email clients show
exceptional behavior, though. Support for Mail-Reply-To and
Mail-Followup-To is inconsistent, but can be traced back to the
recommendations of Daniel J. Bernstein for handling replies to
mailing list posts.5 Our tests uncovered a parser bug in KMail that
accepts unique prefixes of header names, for example, Reply is
parsed as Reply-To. Outlook 2016 and Outlook.com were the only
email clients tested that also made use of the Sender field. Interest-
ingly, iMail and Oulook.com include Bcc in the list of recipients for
Reply-All actions, which allows an attacker to covertly insert the
attacker’s email address into the list of reply recipients.6
In summary, we identified several uncommon header fields that
affect the Reply and Reply-All actions in popular email clients.
These header fields could potentially be exploited by an attacker,
and any countermeasure against REPLY attacks must protect against
all these headers. We include the reverse engineered algorithm of
all tested email clients in the artifacts for download, and give one
example in appendix D.
6 IMPLEMENTATION
We implemented a prototype of the decryption context described
in Section 3 for OpenPGP in Thunderbird,7 a popular free email
client, extending the Enigmail8 plugin and its OpenPGP backend
GnuPG.9 A development version of GnuPG was chosen because
it has experimental support for the AEAD mode described in the
draft RFC 4880bis-08 [25].
GnuPG. We added a command line option --associated-data
, usable for decryption and encryption, which extends the
AD already used in the OpenPGP AEAD mode by a custom (ASCII)
string. The provided string, in our case the decryption context DC,
is appended to the AD of every cipher- or cleartext chunk processed
by GnuPG.
4Spam archives: http://untroubled.org/spam/ and http://artinvoice.hu/spams/.
5https://cr.yp.to/proto/replyto.html