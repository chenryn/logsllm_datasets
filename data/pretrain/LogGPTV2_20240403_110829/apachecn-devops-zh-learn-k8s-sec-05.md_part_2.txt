root           1  0.2  0.0  99660  7596 ?        Ss   22:54   0:10 /usr/lib/systemd/systemd noresume noswap cros_efi
root          20  0.0  0.0      0     0 ?        I 10.60.0.10.domain: 35359+ A? www.google.com.default.svc.cluster.local. (58)
23:18:36.604817 IP (tos 0x0, ttl 64, id 27473, offset 0, flags [DF], proto UDP (17), length 86)
    10.56.1.14.37059 > 10.60.0.10.domain: 35789+ AAAA? www.google.com.default.svc.cluster.local. (58)
23:18:36.606864 IP (tos 0x0, ttl 62, id 8294, offset 0, flags [DF], proto UDP (17), length 179)
    10.60.0.10.domain > 10.56.1.14.37059: 35789 NXDomain 0/1/0 (151)
23:18:36.606959 IP (tos 0x0, ttl 62, id 8295, offset 0, flags [DF], proto UDP (17), length 179)
    10.60.0.10.domain > 10.56.1.14.37059: 35359 NXDomain 0/1/0 (151)
23:18:36.607013 IP (tos 0x0, ttl 64, id 27474, offset 0, flags [DF], proto UDP (17), length 78)
    10.56.1.14.59177 > 10.60.0.10.domain: 7489+ A? www.google.com.svc.cluster.local. (50)
23:18:36.607053 IP (tos 0x0, ttl 64, id 27475, offset 0, flags [DF], proto UDP (17), length 78)
    10.56.1.14.59177 > 10.60.0.10.domain: 7915+ AAAA? www.google.com.svc.cluster.local. (50)
```
前面的输出显示，在一个容器内，有`tcpdump`在监听网络接口`cali01fb9a4e4b4`，它是为另一个 Pod 的网络通信而创建的。有了主机网络名称空间和`CAP_NET_ADMIN`授权，您可以嗅探来自容器内整个工作节点的网络流量。一般来说，授予容器的功能越少，其他微服务的边界就越安全。
## 在系统层包装安全边界
专用的 Linux 命名空间和默认分配给容器或 Pod 的有限的 Linux 功能为微服务建立了良好的安全边界。但是，仍然允许用户配置主机名称空间或向工作负载添加额外的 Linux 功能。这将解除在同一工作节点上运行的其他微服务的安全边界。你这样做应该非常小心。通常，监控工具或安全工具需要访问主机名称空间才能完成其监控工作或检测工作。并且强烈建议使用`PodSecurityPolicy`来限制主机名称空间的使用以及额外的功能，从而加强微服务的安全边界。
接下来，让我们从微服务的角度来看一下 netw 工作层中设置的安全边界。
# 网络层的安全边界
Kubernetes 网络策略为允许相互通信的不同 Pods 组定义了规则。在前一章中，我们简要讨论了 Kubernetes 网络策略的出口规则，该规则可用于实施微服务的最小权限原则。在本节中，我们将详细介绍 Kubernetes 网络策略，并将重点介绍入口规则。我们将展示网络策略的入口规则如何帮助建立微服务之间的信任边界。
## 网络策略
如前一章所述，根据网络模型要求，集群内部的 Pods 可以相互通信。但是，从安全角度来看，您可能希望将您的微服务限制为仅被少数服务访问。我们如何在 Kubernetes 实现这一目标？让我们快速浏览一下以下 Kubernetes 网络策略示例:
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except: