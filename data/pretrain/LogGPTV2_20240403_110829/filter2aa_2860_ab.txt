47
Julian Grizzard
DEFCON 13
Memory Hierarchy Detail
48
Julian Grizzard
DEFCON 13
Spine Architecture - Attacking
49
Julian Grizzard
DEFCON 13
Example 2 (VFS - /proc)
50
Julian Grizzard
DEFCON 13
Example 2 - Sys Call Uses VFS
51
Julian Grizzard
DEFCON 13
Example 2 - /proc Filesystem
52
Julian Grizzard
DEFCON 13
Example 2 - File Operations
53
Julian Grizzard
DEFCON 13
Example 2 - Read Directory
54
Julian Grizzard
DEFCON 13
Example 2 - Attacking
55
Julian Grizzard
DEFCON 13
Recovery Methods
•
Manual methods similar to SCT work
•
Generally, consistency checking on function
pointers and hashing of execution code works
•
Must maintain a good copy of the known good
state in order to repair
•
IRS can do it automatically
56
Julian Grizzard
DEFCON 13
Demos
Intrusion Recovery System
Demonstration
57
Julian Grizzard
DEFCON 13
Limitations and Conclusions
• Can an attacker install a microkernel-level
rootkit?
• What if attacker has physical access?
• There is no be all end all solution!
However, an IRS can make systems more
reliable.
58
Julian Grizzard
DEFCON 13
Thanks!
• Henry Owen
• John Levine
• Sven Krasser
• Greg Conti
• Jonathan Torian
• Lawrence Phillips
• Jessica Frame
• Andrew Davenport
• Many more…
59
Julian Grizzard
DEFCON 13
Links
[ Network and Security Architecture website ]
http://www.ece.gatech.edu/research/labs/nsa/index.shtml
[ Georgia Tech Information Security Center ]
http://www.gtisc.gatech.edu/
[ Fiasco project ]
http://os.inf.tu-dresden.de/fiasco/
[ Xen ]
http://www.cl.cam.ac.uk/Research/SRG/netos/xen/
[ Samhain Labs ]
http://la-samhna.de
[ Chkrootkit ]
http://www.chkrootkit.org
[ DaWheel, “So you don’t have to reinvent it!” ]
http://www.dawheel.org
60
Julian Grizzard
DEFCON 13
Questions?
Starter Questions:
1. How many have personally dealt
with recovery from a rootkit?
2. Has anyone seen any rootkits
that use direct memory access?
3. Has anyone ever cleaned a system
infected with a rootkit without reinstalling?
Julian Grizzard
grizzard AT ece.gatech.edu
61
Julian Grizzard
DEFCON 13
Additional Slides
Additional Slides Provided
Beyond this Point
62
Julian Grizzard
DEFCON 13
User-Level versus Kernel-Level
• User-Level
– Modify/replace system binaries
– e.g. ps, netstat, ls, top, passwd
• Kernel-Level
– Modify/replace kernel process
– e.g. system call table
63
Julian Grizzard
DEFCON 13
Additional Malware Functionality
• Information harvesting
– Credit cards
– Bank accounts
• Resource usage
– Spam relaying
– Distributed denial of service
64
Julian Grizzard
DEFCON 13
Entry Redirection
Original read system
call.  No longer
pointed to by SCT.
Trojaned read
system call.  Active
SCT points to it.
65
Julian Grizzard
DEFCON 13
Entry Overwrite
System call code
overwritten; SCT still
intact
66
Julian Grizzard
DEFCON 13
Table Redirection
Original SCT
intact
Original system
calls intact
Handler points to
Trojan table
67
Julian Grizzard
DEFCON 13
History of Kernel-Level Rootkits
• Heroin – October 1997
– First public LKM
• Knark – June 1999
– Highly popular LKM
• SucKIT – December 2001
– First public /dev/kmem entry
• Adore-ng 0.31 – January 2004
– Uses VFS redirection; works on Linux 2.6.X
68
Julian Grizzard
DEFCON 13
Kernel-Level Rootkit Targets
• System call table
• Interrupt descriptor table
• Virtual file system layer
• Kernel data structures
69
Julian Grizzard
DEFCON 13
Kernel Entry
• Linux kernel module (LKM)
• /dev/kmem, /dev/mem, /dev/port
• Direct memory access (DMA)
• Modify kernel image on disk
70
Julian Grizzard
DEFCON 13
System Call Table Modifications
• System calls are the main gateway from
user space to kernel space
• Most commonly targeted kernel structure
• Can redirect individual system calls or the
entire table
71
Julian Grizzard
DEFCON 13
Example Kernel-Level Rootkits
VFS Redirection
Module
adore-ng
SCT Table Redirection
kmem
r.tgz
SCT Table Redirection
kmem
zk
SCT Table Redirection
kmem
sucKIT
SCT Entry Redirection
Module
adore
SCT Entry Redirection
Module
knark
SCT Entry Redirection
Module
heroin
Modification
Kernel Entry
Rootkit
72
Julian Grizzard
DEFCON 13
System Call Table Tools
• Developed tools that can query the state
of the system call table and repair it
• Tools based on sucKIT source code and
work from user space
• Algorithm to recover from rootkits is
similar to algorithm used by rootkits
73
Julian Grizzard
DEFCON 13
Virtual Machines/Hypervisors
• VMware
• User Mode Linux
• Xen
• L4
74
Julian Grizzard
DEFCON 13
History of Microkernels
• Mach project started at CMU (1985)
• QNX
• Windows NT
• LynxOS
• Chorus
• Mac OS X
75
Julian Grizzard
DEFCON 13
Microkernel Requirements
• Tasks
• IPC
• I/O Support
That’s it!
76
Julian Grizzard
DEFCON 13
L4 IPC’s
• Fast IPCS
• Flexpages
• Clans and chiefs
• System calls, page faults are IPC’s
77
Julian Grizzard
DEFCON 13
L4 I/O (from Fiasco lecture slides)
• Hardware interrupts: mapped to IPC
– Special thread id for interrupts
– IPC sender indicates interrupt source
– Kernel provides no sharing support, one thread per interrupt
– Malicious driver could potentially block all interrupts if given
access to PIC
– Cli/sti only allowed in kernel and trusted servers
• I/O memory and I/O ports: flexpages
• Missing kernel feature: pass interrupt association
– Security hole
• I/O port access
• DMA - big security risk
78
Julian Grizzard
DEFCON 13
Rmgr (lecture slides)
• Resources  --- serves page faults
– Physical memory
– I/O ports
– Tasks
– Interrupts
79
Julian Grizzard
DEFCON 13
Booting the System (lecture slides)
• Modified grub
• Multi-boot specification
• Rmgr, sigma0, root task (rmgr II), …
• IDT
– General Protection Exception #13
– Page Fault #14
– Divide by zero #0
– Invalid opcode #6
– System calls Int30 IPC
• Global Descriptor Table (GDT) vs. Local Descriptor
Table (LDT)
80
Julian Grizzard
DEFCON 13
L4 Security Problems?
• Passing interrupt association
• Direct memory access
• Fill up page mapping database
• Kernel accessible on disk
• Cli/sti
• A few more…
81
Julian Grizzard
DEFCON 13
Spine Architecture Details
• Uses L4 Fiasco microkernel
• L4Linux runs on top of microkernel
• User tasks run on L4Linux
• Intrusion recovery system consists of
levels 0 through 3
82
Julian Grizzard
DEFCON 13
L4Linux
• Port of Linux kernel to L4 architecture
• “paravirtualization” vs. pure virtualization
• Linux kernel runs in user space
• Binary compatible
83
Julian Grizzard
DEFCON 13
Intrusion Recovery System
• Capable of recovering from rootkit
installations
• Maintain a copy of known good state to
verify system integrity and repair if needed
• Must be integral part of operating system
84
Julian Grizzard
DEFCON 13
IRS Cont…
• Intrusion detection system is part of IRS
– Must be able to detect that an intrusion has occurred
in order to recover from it
• Most difficult part of problem is verifying system
integrity
– How to verify data structures, config files, etc.
• Another important challenge is verifying integrity
of IRS itself
– Malware has been known to disable IDS’s
85
Julian Grizzard
DEFCON 13
Multi-Level IRS Reasoning
• Difficult to monitor state of entire system
from one vantage point
• Difficulty comes in bridging the semantic
gap between layers of the system
• We use a multi-level approach
86
Julian Grizzard
DEFCON 13
Multi-Leveled IRS Detail
• L3 - verify file system state and repair if needed
• L2 - kernel module to verify integrity of L4Linux
and L3 and repair if needed
• L1 - microkernel modifications to verify state of
L2 and repair if needed; also provides secure
storage for known good state
• L0 - hardware support for maintaining isolation
and verifying L1 (more hardware needed)