S: On receiving a (challenged, id, Q) message from GL,H
jc
jc
jc
jc
jc
.
.
jc
Finish
S: On receiving (sold, id), (not sold, id), or (aborted, id) from GL,H
jc
, S outputs this
message and terminates the protocol.
On receiving a (challenged, id, Q) message from GL,H
, he generates the corre-
sponding response by computing Rq ‚Üê GenerateResponse(œÜ, x, k, Q) and sends
(respond, id, Rq) to GL,H
If no (sold, id) message and no (challenged, id,¬∑) message from GL,H
after timeout T1, he sends a (f inalize, id) message to GL,H
. He continues in the Challenge-Response-phase.
jc was received
jc
jc
.
jc
11
B: On receiving (invalid, id) from GL,H
, B outputs (bought, id, x(cid:48)) and terminates
the protocol.
, B outputs
(cancelled, id)
On
(not bought, id, x(cid:48)) and terminates the protocol.
On receiving (aborted, id), B outputs this message and terminates the protocol.
(valid, id)
from GL,H
jc
receiving
jc
or
3.5 Extensions and Optimizations
The challenge-response procedure is very expensive to run compared with the optimistic
case execution. We distinguish three dierent dimensions that inuence the cost for running
the dispute: (1) The large data storage which consists of all values the Seller submits during
dispute increases the transaction costs drastically. (2) The runtime of the sub-protocol mainly
depends on the number of challenge rounds which increases with the depth of the circuit œÜ.
(3) Additionally, the complexity of the judge contract also depends on œÜ. The main factor
here is the size of the instruction set of the circuit, since the judge needs to be able to
evaluate any possible gate. Depending on the circuit and the application, it can be smart to
optimize the dispute procedure.
Reducing contract storage. Storing data in a contract is costly since it becomes part of the
blockchain state and every single miner has to allocate space for this data. Therefore, the
costs of running a contract can be reduced if storage is re-used. In the case of our judge
contract, the storage requirements of the dispute sub-procedure can be optimized. Instead of
storing all challenges and responses, it only stores the latest ones. This means the Seller needs
to commit to all computed values using a Merkle tree root re computed over the intermediate
values of the evaluation œÜ(x). Now, for every revealed element the Seller includes a Merkle
proof about the item, which is veried and stored by the Buyer. This data allows him to
generate a proof including elements which have been revealed in a previous round but are
no longer stored in the contract.
Reducing round complexity. The worst case round complexity is xed for every circuit. In
order to reduce the maximal and average number of challenge rounds the parties could agree
to challenge and reveal outputs of multiple gates at the same time. Depending on the circuit
they could also agree on dierent challenge strategies which can again help to reduce this
parameter. For circuits that are very balanced and have a tree like structure it makes a lot of
sense to start with the last gate and always query one predecessor gate, for which the Seller
provided a divergent output. This basic strategy results in an upper bound for the overall
round complexity in case of dispute of 4 + 2 ‚àó ((Œ¥ ‚àí 1)(cid:96) + 1) rounds. For very deep circuits
with a low width œâ this strategy is not optimal but instead a binary search will be better
suited (cf. Figure 1). This strategy results in an upper bound of 4 + 2 ‚àó ((cid:100)log2 Œ¥(cid:101) ‚àó œâ + 1)
rounds. Knowing the circuit-dependent parameters Œ¥, (cid:96) and œâ, the more ecient strategy
can be chosen. Both strategies can even be combined for optimal results. Another option is
to combine multiple gates into one by dening new combined instructions. This can change
the overall structure of the circuit and lower its challenge costs, creating trade-o between
round complexity and contract complexity.
Reducing contract complexity. For complicated circuits with many instructions the logic of
the judge contract can get very complex. Since the majority of its logic is only required for
dispute handling and evaluating the PoM, the contract can be split into two parts. This is
an approach which has been introduced in [27]. It allows to deploy the dispute logic only in
case the Buyer triggers the dispute. This trick drastically reduces the deployment costs and,
hence, lowers the costs of the optimistic case.
12
challenge chain
x1
x2
x3
x4
œÜ1
œÜ2
œÜ3
œÜ4
œÜ5
‚Üê
œÜ6
‚Üê
œÜ7
‚Üê
œÜ8
0/1
x1
œÜ1
‚Üê
x2
œÜ2 œÜ3 œÜ4 œÜ5
‚Üí
challenge
chain
œÜ8 0/1
‚Üê
œÜ6
œÜ7
Fig. 1. Back-to-front (left) and binary search (right) challenge strategies.
To generalize over all improvements made in this section we will abstract from specic
challenge strategies and encapsulate this into a function NextChallenge that selects the next
challenge query based on the circuit and the previous response (more on this in Appendix C
and D).
At this point we have presented most features of OptiSwap and can give a full list
of all required auxiliary information aux = (c, rz, re, rœÜ, aœÜ, fS , fB, T1, T2). The parameter
rœÜ denotes a commitment to the verication circuit œÜ and fS , fB being the fee parameter,
which will be explained in the next section. Moreover, aux contains two timeout parameters
T1 and T2.
4 OptiSwap Evaluation and Transaction Fees
In this section we evaluate the eciency of our protocol. We start with a discussion about
the communication complexity in the honest execution, which is the main improvement of
OptiSwap compared to FairSwap. Then, we analyze the runtime and costs of our protocol.
We also discuss how we incorporated transaction fees into OptiSwap to prevent grieving. In
order to illustrate the evaluation of our protocol, we consider the le sale application which
we describe in the following.
File sale application. For exact measurements and better comparison we implemented3 the
le sale application of [14] as a concrete instantiation of circuit œÜ. In this case the witness is a
le x consisting of n chunks x1, . . . xn of size Œª = 512 Byte and it is identied via its Merkle
hash h = MTHash(x). The verication circuit œÜ computes the Merkle hash of the input
and compares it with the expected value, i.e., œÜ(x) = 1 ‚áî MTHash(x) = h. The required
instruction set consists of a Hash function evaluation and one check-if-equal instruction.
4.1 Communication Complexity in the Optimistic Execution
Table 1. Communication overhead in FairSwap [14] for dierent applications.
Application
le sale (32 Bytes chunk size)
le sale (4 Bytes chunk size)
matrix multiplication (2 √ó 2)
matrix multiplication (10 √ó 10)
AES-256
Witness size
|x|
1 GByte
1 GByte
256 Bytes
6 400 Bytes
Encoding size
|z| in [14]
2 GBytes
9 GBytes
864 Bytes
73 568 Bytes
32 Bytes
1 088 000 Bytes
3 github.com/CryBtoS/OptiSwap
Communication overhead
|z|
|x| in [14]
2
9
3.38
11.5
34 000
13
The goal of OptiSwap is to improve the optimistic execution. Assuming both Seller and
Buyer behave honestly, the transferred witness x is correct and unlike in FairSwap there is
no necessity to exchange information about the predicate evaluation œÜ(x) in order to prove
misbehavior. Concretely, in the optimistic execution of OptiSwap, most of the protocol
messages have a constant size (independent of the witness). Only in the rst round, the data
transferred from Seller to Buyer depends on the size of the witness x. This in particular
means that compared to previous solutions like FairSwap [14], the size of this message is
independent of the circuit œÜ. Thus, OptiSwap removes the overhead of FairSwap from the
rst protocol message, where this overhead is given as the ratio of the message size |z| to
the size of the witness |x|. To show the advantage of our OptiSwap protocol compared
to FairSwap, we consider three dierent use cases and show the resulting communication
overhead in FairSwap. We start by taking a look at the overhead in the le sale application.
Since our protocol can also be used for arbitrary applications that are based on an arithmetic
or a Boolean verication circuit, we then analyze the communication overhead for matrix
multiplication as well as an AES-256 bug bounty application. Table 1 lists the communication
overhead of the rst protocol message in FairSwap for the dierent applications. We stress
that the overhead as dened above in OptiSwap is always 1, which basically means there
is no overhead.
First, we consider the le sale application as described above. For the le sale application
it holds that the size of the verication circuit depends on the size of a single le chunk. The
smaller the le chunks, the larger the circuit size and the more data has to be transferred
in the rst protocol message in FairSwap. Table 1 shows that the overhead increases for the
le sale application if the size of each le chunk decreases. This is a drawback since a small
le chunk size is preferable over a big one as we will see in the following. In case of dispute,
the Buyer is responsible for creating a PoM. Assuming the Seller sent an incorrect witness,
the PoM might contain a small part of the le in order to show that its hash results in a
dierent hash value than computed by the Seller. Since the PoM is sent to the judge smart
contract, the data is on-chain and, hence, publicly visible. This data leakage increases in
the size of the le chunks. An additional drawback is that more storage on the Blockchain
results into higher gas costs. In contrast, the smaller the le chunk size the less data needs
to be published in the worst case. Using a le chunk size of 1 Byte, the size of the encoding
in the FairSwap protocol is 33 times the size of the witness.
It is easy to see that this overhead is way too high for large witnesses, e.g., 1 GByte
les, therefore, it is unreasonable to use small le chunks in the FairSwap protocol. On the
contrary, OptiSwap does not suer from the overhead and, hence, the le chunk size can
be chosen arbitrarily small. It is important to note that a small le chunk size also results
in a higher circuit depth leading to an increased number of rounds in the dispute resolution.
However, halving the le chunk size increases the circuit depth only by one.
Second, we consider matrix multiplication as an example for arithmetic circuits. In this
scenario, the Buyer asks for two quadratic matrices whose product is equal to a predened
result. We assume that each element in one of the two input matrices is represented by 32
Bytes4. The resulting communication overhead increases with the parameter n for n √ó n-
matrix multiplication. Table 1 lists the concrete overhead for n = 2 and n = 10. If we use
larger values for n, the overhead will be even more signicant.
As a third use case for evaluating the overheads of our solution compared to FairSwap
we consider a bug bounty scenario. Here, the Buyer oers a bounty for a Seller if Seller can
break AES-256 by providing an input to the encryption algorithm such that the output is
equal to a predened ciphertext. We use a Boolean circuit of the AES-256 cipher containing
34 000 gates for the analysis. Since the circuit size is high compared to the input size, the
overhead becomes very huge. Instead of just transferring the 32 Byte input, the encoding
size is greater than 1 MByte. Although the output of a gate within a Boolean circuit is just
one bit, we consider the encryption scheme as proposed in [14] where each ciphertext has a
4 This memory size is based on the integer representation in Solidity.
14
size of 32 Byte. This can possibly be improved using a dierent encryption scheme that can
eciently be realized on Ethereum.
We summarize that our OptiSwap protocol is always preferable over the FairSwap pro-
tocol in case of two honest parties. The advantage increases for applications with a small
witness size and a high verication circuit size. Next, we analyze the gas costs of our ref-
erence implementation of the le sale application. We show that our protocol is aordable
and costs are roughly the same as for the FairSwap protocol.
4.2 Runtime and Gas Costs
Table 2. Gas cost for the le sale application in OptiSwap.
Standalone
deploy
optimistic case
pessimistic case
2 273 398 gas
101 307 gas
6 412 569 gas
$ 5.94
$ 0.26
$ 16.77
Split Contract
optimistic deploy
pessimistic deploy
952 939 gas
1 962 992 gas
$ 2.49
$ 5.13
In Ethereum, transaction fees are paid in gas and every instruction of the Ethereum
virtual machine code has a gas value assigned to it. This gives a deterministic gas amount
for every transaction. The total amount of gas required for a transaction can be used as
eciency indicator. The gasprice5 can be set individually for every transaction and describes
the exchange rate between Ether and gas. We assume that the gasprice will be xed for the
duration of the protocol run.
We compare OptiSwap against the FairSwap protocol implementation of the le sale of
1 GByte with 512 Byte-sized le chunks. In this setting, the circuit depth is Œ¥ = 21 and the
max fan-in is (cid:96) = 2. When we analyze the costs for the OptiSwap protocol we distinguish
between deployment costs and the execution costs in the optimistic and pessimistic case (cf.
Table 2). We also analyze an optimized version of the contracts which we call split contract.
Here we apply the idea from [27], where we create two versions of the judge contract. The rst
part is responsible for the execution in the optimistic case and the second part only for the
dispute. The key idea is that we only need to deploy the second contract in case the parties
start the dispute. This reduces the costs for the purely optimistic case. In case of the le sale
application the complex logic for the interactive dispute can be encapsulated in the dispute
contract which makes the optimistic case even slightly cheaper compared to FairSwap. The
authors of [14] claim deployment costs of 1 050 000 gas for the le sale implementation of the
FairSwap-protocol. It is reasonable that this value is much less than the deployment costs
of the standalone version of OptiSwap, since the challenge-response functionality is not
required in FairSwap. However, our optimized split contract implementation shows that the
deployment costs for an optimistic execution can be even further reduced. A more extensive
analysis and comparison of gas costs is given in Appendix F.
Optimistic case execution Without a complaint the protocol runs in either 4 or 5 rounds,
depending on the Buyer. In comparison to FairSwap, the rst message of OptiSwap does
not contain information about œÜ(x) and the Seller does not have to compute œÜ(x) in this case.
This reduces both the message and computation complexity. The biggest part of transaction
5 We consider an average gas price of 14.4 GWei and an exchange rate of 181.57 USD per ether.
This data is taken from https://etherscan.io on November 18, 2019.
15
fees in this case are the deployment fees (cf. Table 2) which are paid by the Seller in the rst
round6. The costs for deployment and protocol fees of the Seller can be taken into account