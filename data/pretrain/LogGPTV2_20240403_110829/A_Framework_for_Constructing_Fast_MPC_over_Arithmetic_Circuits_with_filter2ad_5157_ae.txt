i =1.
We now proceed to the main protocol, that computes an arith-
metic circuit on the private inputs of the parties. The protocol
works by computing the circuit using a private semi-honest proto-
col, and then running a veri(cid:27)cation step where the computations of
all multiplication gates are veri(cid:27)ed using the random triples from
the o(cid:31)ine phase. A full description appears in Protocol 4.2. Note
that the veri(cid:27)cation stage of the protocol has two versions, as we
have two protocols for verifying triples: the (cid:27)rst uses share opening
whereas the second uses semi-honest multiplication. If the second
veri(cid:27)cation protocol is used, then πmult also needs to be secure up
to an additive attack.
We now prove the security of the protocol. The proof follow
a straightforward simulation strategy, with the simulator provid-
ing shares of random values throughout (except for the output
phase). The fact that the simulation works is due to the proofs al-
ready carried out that the adversary can cheat with only negligible
probability.
Theorem 4.3. Let f be a n-party functionality and let πmult be a
private semi-honest multiplication protocol (if VERSION 2 is used: that
is secure up to additive attack). Then, Protocol 4.2 securely computes
f with abort in the (Fcoin, Frand)-hybrid model with statistical error
2−σ , in the presence of a malicious adversary controlling t  2σ (e.g., F = Zp with
p being a 40-bit prime, and where the allowed statistic error is 2−40),
it su(cid:28)ces to take δ = 1. In this case, the cost of the (cid:27)rst version of
the protocol is 2 · t(πmult) + 2 · t(Frand) + 3 · t(open) and the cost
of the second version is 6 · t(πmult) + 3 · t(Frand). Thus, when 4
semi-honest multiplications plus one random-share generation are
cheaper than 3 openings, the second protocol version is preferable.
5 THE PROTOCOL FRAMEWORK FOR SMALL
FIELDS
In this section, we describe a protocol for generating multiplication
triples in small (cid:27)elds, that combines the veri(cid:27)cation method of Sec-
tion 4 together with the “cut-and-choose” methodology designed
for Boolean circuits in [19]. Informally speaking, the parties start
by generating N B + C random triples by calling Frand and running
the semi-honest multiplication protocol πmult for each triple. Next,
the parties randomly permute the triples. Then, the parties open
the (cid:27)rst C triples, so that if one of the opened triples is incorrect,
the honest parties will detect it and abort. The remaining triples are
divided into N bucket of size B, and the (cid:27)rst triple in each bucket
is veri(cid:27)ed using the other B − 1 triples. The required property in
this check is that if one of the bucket is “mixed”, i.e., contains both
correct and incorrect triples, then the honest parties will detect
cheating with probability 1. The important observation is that this
veri(cid:27)cation of triples in a bucket can be carried out using Proto-
col 3.4 (veri(cid:27)cation based on openings), since by Lemma 3.5 if an
incorrect triple is veri(cid:27)ed by a correct triple, then the honest parties
will abort with probability 1. However, the result is much stronger
than that achieved in [19]. Speci(cid:27)cally, when considering Boolean
circuits, the adversary can evade detection if a bucket contains only
incorrect triples. However, in our setting where |F| > 2, even if a
bucket has only bad triples, the adversary can still get caught. Thus,
the cheating probability of the adversary is much lower.
For the formal description, we de(cid:27)ne the Fperm ideal functional-
ity that receives a vector from all the parties and returns a random
permutation of it to the parties. The functionality can be securely
computed by generating randomness via Fcoin and then using that
randomness to compute a permutation using the Fisher-Yates algo-
rithm [20]. The pre-processing protocol for (cid:27)elds of small size is
formally described in Protocol 5.1.
We now prove that the main protocol securely computes any
functionality in the presence of a malicious adversary who controls
a minority of the parties, when using Protocol 5.1 in its o(cid:31)ine
phase.
PROTOCOL 5.1 (Generating Random Multiplication Triples
Using Cut-and-Choose).
Let πmult be a private semi-honest multiplication protocol according
to De(cid:27)nition 2.5.
• Input: The number N of triples to be generated.
• Auxiliary input: Parameters B and C.
• The Protocol:
.
.
i =1
i =1
(2) Generate multiplication triples: For i = 1, . . . , N B + C, the
(1) Generate random sharings: The parties invoke 2(N B + C)
calls to Frand; denote the shares that they receive by
[([ai], [bi])]N B+C
parties run πmult to compute [ci] = [ai] · [bi].
Denote (cid:174)D = [([ai], [bi], [ci])]N B+C
(3) Cut and bucket: Let M = N B + C. In this stage, the parties
perform a (cid:27)rst veri(cid:27)cation that the triples were generated
correctly by opening C triples, and then randomly divide