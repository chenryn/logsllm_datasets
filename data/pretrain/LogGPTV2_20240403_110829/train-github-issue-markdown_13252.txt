@SepiaGroup: 'Enhance the existing REST Unique API to support multiple indexes
in one call: in reference to
https://groups.google.com/forum/?fromgroups#!topic/neo4j/-YryBO8SkkI
http://localhost:7474/db/data/index/node/unique {  
"indexes": [ {"index":"indexName1", "key": "uid", "value": "Tobias"},  
{"index":"indexName2", "key": "email", "value": "PI:EMAIL"}, ... ]  
, "properties": {"name": "Tobias", "sequence"  
: 1}}
would only be for unique indexes because wouldn't this call only be use for
unique indexes regardless of how many index/key/value pairs were passed to it?
any other index updates would be called on another REST call as usual and not
part of Unique transaction.
My thinking is that to ensure uniqueness you need to do the update to multiple
indexes in one transaction and that is only possible (as far as i am aware of)
over REST if the db does it.
Now thinking about the next step - updating: if you agree with the above then
we would also need a way to update the index when required
http://localhost:7474/db/data/index/node/unique {  
"indexes": [ {"index":"indexName1", "key": "uid", "value": "Tobias"},  
{"index":"indexName2", "key": "email", "value": "PI:EMAIL"}, ... ]  
, "properties": {"name": "Tobias", "sequence"  
: 1}  
, "uri":"http://localhost:7474/db/data/node/116"}
would be the update call where uri points to the existing node, similar to
http://docs.neo4j.org/chunked/stable/rest-api-unique-indexes.html#rest-api-
add-a-node-to-an-index-unless-a-node-already-exists-for-the-given-mapping
all index/key/value pairs would need to be checked against the key/values
passed in the properties and if any duplicates are found the update fails for
the entire call. Just like in sql if a key constraint is placed on a column in
a table.
With this approach there is a very good chance that the index gets out of sync
with the node properties (forget to add a index to the update call for
example). maybe you can come up with some magic knowing the internals of the
indexing better.
just my thoughts.  
thanks'