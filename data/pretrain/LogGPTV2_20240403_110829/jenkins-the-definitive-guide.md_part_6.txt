When you open Jenkins in your browser, you should see a screen like the one shown in Figure 2.7, “The
Jenkins start page”. You are now ready to take your first steps with Jenkins!
Figure 2.7. The Jenkins start page
12 http://jenkins-ci.org
13 http://http://jenkins-ci.org
14 http://www.wakaleo.com/books/jenkins-the-definitive-guide
16
2.4. Configuring the Tools
Before we get started, we do need to do a little configuration. More precisely, we need to tell Jenkins
about the build tools and JDK versions we will be using for our builds.
Click on the Manage Jenkins link on the home page (see Figure 2.7, “The Jenkins start page”). This will
take you to the Manage Jenkins page, the central one-stop-shop for all your Jenkins configuration. From
this screen, you can configure your Jenkins server, install and upgrade plugins, keep track of system
load, manage distributed build servers, and more! For now, however, we’ll keep it simple. Just click on
the Configuring System link at the top of the list (see Figure 2.8, “The Manage Jenkins screen”).
Figure 2.8. The Manage Jenkins screen
This will take you to Jenkins’s main configuration screen (see Figure 2.9, “The Configure Jenkins
screen”). From here you can configure everything from security configuration and build tools to email
servers, version control systems and integration with third-party software. The screen contains a lot of
information, but most of the fields contain sensible default values, so you can safely ignore them for now.
17
Figure 2.9. The Configure Jenkins screen
For now, you will just need to configure the tools required to build our sample project. The application
we will be building is a Java application, built using Maven. So in this case, all we need to do is to set
up a recent JDK and Maven installation.
However before we start, take a look at the little blue question mark icons lined to the right of the screen.
These are Jenkins’s contextual help buttons. If you are curious about a particular field, click on the help
icon next to it and Jenkins will display a very detailed description about what it is and how it works.
2.4.1. Configuring Your Maven Setup
Our sample project uses Maven, so we will need to install and configure Maven first. Jenkins provides
great out-of-the-box support for Maven. Scroll down until you reach the Maven section in the Configure
System screen (see Figure 2.10, “Configuring a Maven installation”).
Jenkins provides several options when it comes to configuring Maven. If you already have Maven
installed on your machine, you can simply provide the path in the MAVEN_HOME field. Alternatively,
you can install a Maven distribution by extracting a zip file located in a shared directory, or execute a
home-rolled installation script. Or you can let Jenkins do all the hard work and download Maven for you.
To choose this option, just tick the Install automatically checkbox. Jenkins will download and install
Maven from the Apache website the first time a build job needs it. Just choose the Maven version you
want to install and Jenkins will do the rest. You will also need to give a name for your Maven version
(imaginatively called “Maven 2.2.1” in the example), so that you can refer to it in your build jobs.
18
For this to work, you need to have an Internet connection. If you are behind a proxy, you’ll need to
provide your proxy information—we discuss how to set this up in Section 4.9, “Configuring a Proxy”.
Figure 2.10. Configuring a Maven installation
One of the nice things about the Jenkins Maven installation process is how well it works with remote
build agents. Later on in the book, we’ll see how Jenkins can also run builds on remote build servers.
You can define a standard way of installing Maven for all of your build servers (downloading from the
Internet, unzipping a distribution bundle on a shared server, etc.)—all of these options will work when
you add a new remote build agent or set up a new build server using this Jenkins configuration.
2.4.2. Configuring the JDK
Once you have configured your Maven installation, you will also need to configure a JDK installation
(see Figure 2.11, “Configuring a JDK installation”). Again, if you have a Java JDK (as opposed to a Java
Runtime Environment—the JDK contains extra development tools such as the Java compiler) already
installed on your workstation, you can simply provide the path to your JDK in the JAVA_HOME field.
Otherwise, you can ask Jenkins to download the JDK from the Oracle website15 the first time a build
job requires it. This is similar to the automatic Maven installation feature—just pick the JDK version
you need and Jenkins will take care of all the logistics. However, for licensing reasons, you will also
need to tick a checkbox to indicate that you agree with the Java SDK License Agreement.
15 http://www.oracle.com/technetwork/java/index.html
19
Figure 2.11. Configuring a JDK installation
Now go to the bottom of the screen and click on the Save button.
2.4.3. Notification
Another important aspect you would typically set up is notification. When a Jenkins build breaks, and
when it works again, it can send out email messages to the team to spread the word. Using plugins, you
can also get it to send instant messages or SMS messages, post entries on Twitter, or get people notified
in a few other ways. It all depends on what works best for your organizational culture. Email notification
is easy enough to set up if you know your local SMTP server address—just provide this value in the
Email Notification section towards the bottom of the main configuration page. However, to keep things
simple, we’re not going to worry about notifications just yet.
2.4.4. Setting Up Git
The last thing we need to configure for this demo is to get Jenkins working with Git. Jenkins comes with
support for Subversion and CVS out of the box, but you will need to install the Jenkins Git plugin to be
able to complete the rest of this tutorial. Don’t worry, the process is pretty simple. First of all, click on the
Manage Jenkins link to the left of the screen to go back to the main configuration screen (see Figure 2.8,
“The Manage Jenkins screen”). Then click on Manage Plugins. This will open the plugin configuration
screen, which is where you manage the extra features you want to install on your Jenkins server. You
should see four tabs: Updates, Available, Installed, and Advanced (see Figure 2.12, “Managing plugins
in Jenkins”).
20
Figure 2.12. Managing plugins in Jenkins
For now, just click on the Available tab. Here you will see a very long list of available plugins. Find
the Git Plugin entry in this list and tick the corresponding checkbox (see Figure 2.13, “Installing the Git
plugin”), and then scroll down to the bottom of the screen and click on Install. This will download and
install the Jenkins Git plugin into your local Jenkins instance.
Figure 2.13. Installing the Git plugin
Once it is done, you will need to restart Jenkins for the changes to take effect. To do this, you can simply
click on the “Restart Jenkins when no jobs are running” button displayed on the installation screen, or
alternatively shut down and restart Jenkins by hand.
That is all we need to configure at this stage. You are now ready to set up your first Jenkins build job!
2.5. Your First Jenkins Build Job
Build jobs are at the heart of the Jenkins build process. Simply put, you can think of a Jenkins build job
as a particular task or step in your build process. This may involve simply compiling your source code
21
and running your unit tests. Or you might want a build job to do other related tasks, such as running your
integration tests, measuring code coverage or code quality metrics, generating technical documentation,
or even deploying your application to a web server. A real project usually requires many separate but
related build jobs.
Our sample application is a simple Java implementation of John Conway’s “Game of Life.”16 The Game
of Life is a mathematical game which takes place on a two dimensional grid of cells, which we will
refer to as the Universe. Each cell can be either alive or dead. Cells interact with their direct neighbors
to determine whether they will live or die in the next generation of cells. For each new generation of
cells, the following rules are applied:
• Any live cell with fewer than two live neighbors dies of underpopulation.
• Any live cell with more than three live neighbors dies of overcrowding.
• Any live cell with two or three live neighbors lives on to the next generation.
• Any dead cell with exactly three live neighbors becomes a live cell.
Our application is a Java module, built using Maven, that implements the core business logic of the
Game of Life. We’ll worry about the user interfaces later on. For now, let’s see how we can automate
this build in Jenkins. If you are not familiar with Maven, or prefer Ant or another build framework—
don’t worry! The examples don’t require much knowledge of Maven, and we’ll be looking at plenty of
examples of using other build tools later on in the book.
For our first build job, we will keep it simple: we are just going to compile and test our sample
application. Click on the New Job link. You should get to a screen similar to Figure 2.14, “Setting up
your first build job in Jenkins”. Jenkins supports several different types of build jobs. The two most
commonly-used are the freestyle builds and the Maven 2/3 builds. The freestyle projects allow you to
configure just about any sort of build job: they are highly flexible and very configurable. The Maven
2/3 builds understand the Maven project structure, and can use this to let you set up Maven build jobs
with less effort and a few extra features. There are also plugins that provide support for other types of
build jobs. Nevertheless, although our project does use Maven, we are going to use a freestyle build job,
just to keep things simple and general to start with. So choose “Build a freestyle software project”, as
shown in Figure 2.14, “Setting up your first build job in Jenkins”.
You’ll also need to give your build job a sensible name. In this case, call it gameoflife-default, as it will
be the default CI build for our Game of Life project.
16See http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life.
22
Figure 2.14. Setting up your first build job in Jenkins
Once you click on OK, Jenkins will display the project configuration screen (see Figure 2.15, “Telling
Jenkins where to find the source code”).
In a nutshell, Jenkins works by checking out the source code of your project and building it in its own
workspace. So the next thing you need to do is to tell Jenkins where it can find the source code for your
project. You do this in the Source Code Management section (see Figure 2.15, “Telling Jenkins where
to find the source code”). Jenkins provides support for CVS and Subversion out of the box, and many
others such as Git, Mercurial, ClearCase, Perforce and many more via plugins.
For this project, we will be getting the source code from the GitHub repository we set up earlier.
On the Jenkins screen, choose “Git” and enter the Repository URL we defined in Section 2.2.5,
“Forking the Sample Repository” (see Figure 2.15, “Telling Jenkins where to find the source code”).
Make sure this is the URL of your fork, and not of the original repository: it should have the form
PI:EMAIL:/game-of-life.git, where  is the username for your own
GitHub account. You can leave all of the other options up until here with their default values.
23
Figure 2.15. Telling Jenkins where to find the source code
Once we have told Jenkins where to find the source code for our application, we need to tell it how often
it should check for updates. We want Jenkins to monitor the repository and start a build whenever any
changes have been committed. This is a common way to set up a build job in a Continuous Integration
context, as it provides fast feedback if the build fails. Other approaches include building on regular
intervals (for example, once a day), requiring a user to kick of the build manually, or even triggering a
build remotely using a “post-commit” hook in your SCM.
We configure all of this in the Build Triggers section (see Figure 2.16, “Scheduling the build jobs”).
Pick the Poll SCM option and enter “* * * * *” (that’s five asterisks separated by spaces) in the Schedule
box. Jenkins schedules are configured using the cron syntax, well-known in the Unix world. The cron
syntax consists of five fields separated by white space, indicating respectively the minute (0–59), hour
(0–23), day of the month (1–31), month (1–12) and the day of the week (0–7, with 0 and 7 being Sunday).
The star is a wildcard character which accepts any valid value for that field. So five stars basically means
“every minute of every hour of every day.” You can also provide ranges of values: “* 9-17 * * *” would
mean “every minute of every day, between 9am and 5pm.” You can also space out the schedule using
intervals: “*/5 * * * *” means “every 5 minutes,” for example. Finally, there are some other convenient
short-hands, such as “@daily” and “@hourly”.
24
Don’t worry if your Unix skills are a little rusty—if you click on the blue question mark icon on the side
of the schedule box, Jenkins will bring up a very complete refresher.
Figure 2.16. Scheduling the build jobs
The next step is to configure the actual build itself. In a freestyle build job, you can break down your
build job into a number of build steps. This makes it easier to organize builds in clean, separate stages.
For example, a build might run a suite of functional tests in one step, and then tag the build in a second
step if all of the functional tests succeed. In technical terms, a build step might involve invoking an
Ant task or a Maven target, or running a shell script. There are also Jenkins plugins that let you use
additional types of build steps: Gant, Grails, Gradle, Rake, Ruby, MSBuild and many other build tools
are all supported.
For now, we just want to run a simple Maven build. Scroll down to the Build section and click on the
“Add build step” and choose “Invoke top-level Maven targets” (see Figure 2.17, “Adding a build step”).
Then enter “clean package” in the Goals field. If you are not familiar with Maven, this will delete any
previous build artifacts, compile our code, run our unit tests, and generate a JAR file.
Figure 2.17. Adding a build step
By default, this build job will fail if the code does not compile or if any of the unit tests fail. That’s
the most fundamental thing that you’d expect of any build server. But Jenkins also does a great job of
helping you display your test results and test result trends.
The de facto standard for test reporting in the Java world is an XML format used by JUnit. This format is
also used by many other Java testing tools, such as TestNG, Spock and Easyb. Jenkins understands this
format, so if your build produces JUnit XML test results, Jenkins can generate nice graphical test reports
and statistics on test results over time, and also let you view the details of any test failures. Jenkins also
25
keeps track of how long your tests take to run, both globally, and per test—this can come in handy if
you need to track down performance issues.
So the next thing we need to do is to get Jenkins to keep tabs on our unit tests.
Go to the Post-build Actions section (see Figure 2.18, “Configuring JUnit test reports and artifact
archiving”) and tick “Publish JUnit test result report” checkbox. When Maven runs unit tests in a project,
it automatically generates the XML test reports in a directory called surefire-reports in the target
directory. So enter “**/target/surefire-reports/*.xml” in the “Test report XMLs” field. The two asterisks
at the start of the path (“**”) are a best practice to make the configuration a bit more robust: they allow
Jenkins to find the target directory no matter how we have configured Jenkins to check out the source
code.
Another thing you often want to do is to archive your build results. Jenkins can store a copy of the binary
artifacts generated by your build, allowing you to download the binaries produced by a build directly
from the build results page. It will also post the latest binary artifacts on the project home page, which is
a convenient way to distribute the latest and greatest version of your application. You can activate this
option by ticking the “Archive the artifacts” checkbox and indicating which binary artifacts you want
Jenkins to archive. In Figure 2.18, “Configuring JUnit test reports and artifact archiving”, for example,
we have configured Jenkins to store all of the JAR files generated by this build job.
Figure 2.18. Configuring JUnit test reports and artifact archiving
Now we’re done—just click on the Save button at the bottom of the screen. Our build job should now
be ready to run. So let’s see it in action!
2.6. Your First Build Job in Action
Once you save your new build job, Jenkins will display the home page for this job (see Figure 2.19,
“Your first build job running”). This is where Jenkins displays details about the latest build results and
the build history.
If you wait a minute or so, the build should kick off automatically—you can see the stripy progress bar
in the Build History section in the bottom left hand corner of Figure 2.19, “Your first build job running”.
Or, if you are impatient, you can also trigger the build manually using the Build Now button.
26
Figure 2.19. Your first build job running
The build will also now figure proudly on your Jenkins server’s home page (see Figure 2.20, “The
Jenkins dashboard”). This page shows a summary of all of your build jobs, including the current build
status and general state of heath of each of your builds. It tells you when each build ran successfully for
the last time, and when it last failed, and also the result of the last build.
Once of Jenkins’s specialities is the way it lets you get an idea of build behavior over time. For example,
Jenkins uses a weather metaphor to help give you an idea of the stability of your builds. Essentially,
the more your builds fail, the worse the weather gets. This helps you get an idea of whether a particular
broken build is an isolated event, or if the build is breaking on a regular basis, in which case it might
need some special attention.
You can also manually trigger a build job here, using the build schedule button (that’s the one that looks
a bit like a green play button on top of a clock).
Figure 2.20. The Jenkins dashboard
27
When the build finishes, the ball in the Build History box becomes solid blue. This means the build was
a success. Build failures are generally indicated by a red ball. For some types of project, you can also
distinguish between a build error (such as a compiler error), indicated by a red ball, and other sorts of
build failures, such as unit test failures or insufficient code coverage, which are indicated by a yellow
ball. There are also some other details about the latest test results, when the last build was run, and so on.
But before we look at the details, let’s get back to the core business model of a Continuous Integration
server—kicking off builds when someone changes the code!
We are going to commit a code change to GitHub and see what happens, using the source code we
checked out in Section 2.2.5, “Forking the Sample Repository”. We now have Jenkins configured to
monitor our GitHub fork, so if we make any changes, Jenkins should be able to pick them up.
So let’s make a change. The idea is to introduce a code change that will cause the unit tests to fail. If
your Java is a bit rusty, don’t worry, you won’t need to know any Java to be able to break the build—
just follow the instructions!
Now in normal development, you would first modify the unit test that describes this behaviour. Then
you would verify that the test fails with the existing code, and implement the code to ensure that the test
passes. Then you would commit your changes to your version control system, allowing Jenkins to build
them. However this would be a poor demonstration of how Jenkins handles unit test failures. So in this
example, we will, against all best practices, simply modify the application code directly.
First of all, open the Cell.java file, which you will find in the gameoflife-core/src/main/java/
com/wakaleo/gameoflife/domain directory. Open this file in your favorite text editor. You should
see something like this:
package com.wakaleo.gameoflife.domain;
public enum Cell {
LIVE_CELL("*"), DEAD_CELL(".");
private String symbol;
private Cell(String symbol) {
this.symbol = symbol;
}
@Override
public String toString() {
return symbol;
}
static Cell fromSymbol(String symbol) {
Cell cellRepresentedBySymbol = null;
for (Cell cell : Cell.values()) {
if (cell.symbol.equals(symbol)) {
cellRepresentedBySymbol = cell;
break;
}