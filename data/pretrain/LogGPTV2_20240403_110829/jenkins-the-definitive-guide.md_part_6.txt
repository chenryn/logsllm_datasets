### Getting Started with Jenkins

When you open Jenkins in your browser, you should see a screen similar to the one shown in Figure 2.7, "The Jenkins Start Page." You are now ready to take your first steps with Jenkins!

**Figure 2.7. The Jenkins Start Page**

---

### 2.4. Configuring the Tools

Before we get started, we need to configure some tools. Specifically, we need to inform Jenkins about the build tools and JDK versions we will be using for our builds.

1. Click on the **Manage Jenkins** link on the home page (see Figure 2.7, "The Jenkins Start Page"). This will take you to the **Manage Jenkins** page, which is the central configuration hub for all Jenkins settings.
2. From this screen, you can configure your Jenkins server, install and upgrade plugins, monitor system load, manage distributed build servers, and more. For now, click on the **Configure System** link at the top of the list (see Figure 2.8, "The Manage Jenkins Screen").

**Figure 2.8. The Manage Jenkins Screen**

3. This will take you to Jenkins's main configuration screen (see Figure 2.9, "The Configure Jenkins Screen"). Here, you can configure everything from security settings and build tools to email servers, version control systems, and third-party integrations. Most fields have sensible default values, so you can safely ignore them for now.

**Figure 2.9. The Configure Jenkins Screen**

4. For this example, you will need to configure the tools required to build a sample Java application using Maven. This involves setting up a recent JDK and Maven installation.

**Helpful Tip:** Look for the small blue question mark icons to the right of the screen. These are Jenkins's contextual help buttons. Clicking on one will provide detailed information about the corresponding field.

### 2.4.1. Configuring Your Maven Setup

Our sample project uses Maven, so we need to install and configure it first. Jenkins provides excellent out-of-the-box support for Maven.

1. Scroll down to the **Maven** section in the **Configure System** screen (see Figure 2.10, "Configuring a Maven Installation").
2. Jenkins offers several options for configuring Maven:
   - If Maven is already installed on your machine, provide the path in the **MAVEN_HOME** field.
   - Alternatively, you can install Maven by extracting a zip file from a shared directory or executing a custom installation script.
   - You can also let Jenkins download and install Maven for you by checking the **Install automatically** checkbox. Jenkins will download and install Maven from the Apache website when needed. Choose the desired Maven version and give it a name (e.g., "Maven 2.2.1").

**Figure 2.10. Configuring a Maven Installation**

**Note:** Ensure you have an internet connection. If you are behind a proxy, provide the proxy details as described in Section 4.9, "Configuring a Proxy."

### 2.4.2. Configuring the JDK

After configuring Maven, you need to set up a JDK installation (see Figure 2.11, "Configuring a JDK Installation").

1. If you have a Java JDK (not just a JRE) installed on your workstation, provide the path in the **JAVA_HOME** field.
2. Alternatively, Jenkins can download the JDK from the Oracle website the first time a build job requires it. Select the JDK version and agree to the Java SDK License Agreement.

**Figure 2.11. Configuring a JDK Installation**

3. Click the **Save** button at the bottom of the screen to apply the changes.

### 2.4.3. Notification

Another important aspect is setting up notifications. Jenkins can send email messages, instant messages, SMS, or post on Twitter when a build breaks or succeeds. For simplicity, we will not configure notifications now, but you can do so later if needed.

### 2.4.4. Setting Up Git

Finally, we need to configure Jenkins to work with Git. Jenkins supports Subversion and CVS out of the box, but you need to install the Git plugin for this tutorial.

1. Click on the **Manage Jenkins** link to return to the main configuration screen (see Figure 2.8, "The Manage Jenkins Screen").
2. Click on **Manage Plugins**. This will open the plugin configuration screen, where you can manage additional features (see Figure 2.12, "Managing Plugins in Jenkins").

**Figure 2.12. Managing Plugins in Jenkins**

3. Click on the **Available** tab and find the **Git Plugin** entry. Check the corresponding checkbox (see Figure 2.13, "Installing the Git Plugin") and click **Install** at the bottom of the screen. This will download and install the Git plugin into your Jenkins instance.

**Figure 2.13. Installing the Git Plugin**

4. After installation, restart Jenkins for the changes to take effect. You can do this by clicking the **Restart Jenkins when no jobs are running** button or manually restarting Jenkins.

### 2.5. Your First Jenkins Build Job

Build jobs are the core of the Jenkins build process. A build job can involve compiling source code, running unit tests, and other tasks like integration testing, code coverage, documentation generation, and deployment.

#### 2.5.1. Creating a New Build Job

1. Click on the **New Item** link. You should see a screen similar to Figure 2.14, "Setting up your first build job in Jenkins."
2. Jenkins supports various types of build jobs, including freestyle builds and Maven 2/3 builds. Freestyle projects are highly flexible, while Maven 2/3 builds understand the Maven project structure. For this example, choose **Freestyle project** and name it **gameoflife-default** (see Figure 2.14, "Setting up your first build job in Jenkins").

**Figure 2.14. Setting up your first build job in Jenkins**

3. Click **OK** to proceed to the project configuration screen (see Figure 2.15, "Telling Jenkins where to find the source code").

**Figure 2.15. Telling Jenkins where to find the source code**

4. In the **Source Code Management** section, select **Git** and enter the repository URL from your GitHub fork (see Section 2.2.5, "Forking the Sample Repository"). Use the format `https://github.com/your-username/game-of-life.git`. Leave the other options with their default values.

### 2.6. Scheduling the Build Jobs

Next, we need to tell Jenkins how often to check for updates and start builds.

1. Go to the **Build Triggers** section (see Figure 2.16, "Scheduling the build jobs").
2. Select the **Poll SCM** option and enter `* * * * *` in the **Schedule** box. This cron syntax means "every minute of every hour of every day."

**Figure 2.16. Scheduling the build jobs**

### 2.7. Configuring the Build Steps

Now, we need to configure the actual build steps.

1. Scroll down to the **Build** section and click **Add build step**. Choose **Invoke top-level Maven targets** (see Figure 2.17, "Adding a build step").
2. Enter `clean package` in the **Goals** field. This will clean the previous build artifacts, compile the code, run unit tests, and generate a JAR file.

**Figure 2.17. Adding a build step**

### 2.8. Post-build Actions

Finally, we need to configure post-build actions to publish test results and archive artifacts.

1. Go to the **Post-build Actions** section (see Figure 2.18, "Configuring JUnit test reports and artifact archiving").
2. Check the **Publish JUnit test result report** checkbox and enter `**/target/surefire-reports/*.xml` in the **Test report XMLs** field.
3. Check the **Archive the artifacts** checkbox and specify the binary artifacts to archive (e.g., `**/target/*.jar`).

**Figure 2.18. Configuring JUnit test reports and artifact archiving**

4. Click the **Save** button at the bottom of the screen.

### 2.9. Running Your First Build Job

Once you save your new build job, Jenkins will display the job's home page (see Figure 2.19, "Your first build job running"). Here, you can see details about the latest build results and build history.

**Figure 2.19. Your first build job running**

If you wait a minute, the build should start automatically. You can also trigger the build manually using the **Build Now** button.

### 2.10. Monitoring the Build

The build will also appear on your Jenkins server's dashboard (see Figure 2.20, "The Jenkins dashboard"), which shows a summary of all build jobs, including their current status and health.

**Figure 2.20. The Jenkins dashboard**

When the build finishes, the ball in the **Build History** box will turn solid blue, indicating success. Red indicates a failure, and yellow may indicate other issues like unit test failures or insufficient code coverage.

### 2.11. Testing the Build Process

To test the build process, commit a code change to your GitHub fork that will cause the unit tests to fail. This will demonstrate how Jenkins handles build failures.

1. Open the `Cell.java` file in the `gameoflife-core/src/main/java/com/wakaleo/gameoflife/domain` directory.
2. Modify the `fromSymbol` method to break the unit tests. For example, change the condition in the loop to `if (cell.symbol.equals("X"))`.

```java
package com.wakaleo.gameoflife.domain;

public enum Cell {
    LIVE_CELL("*"), DEAD_CELL(".");
    
    private String symbol;
    
    private Cell(String symbol) {
        this.symbol = symbol;
    }
    
    @Override
    public String toString() {
        return symbol;
    }
    
    static Cell fromSymbol(String symbol) {
        Cell cellRepresentedBySymbol = null;
        for (Cell cell : Cell.values()) {
            if (cell.symbol.equals("X")) { // Intentionally break the test
                cellRepresentedBySymbol = cell;
                break;
            }
        }
        return cellRepresentedBySymbol;
    }
}
```

3. Commit the changes and push them to your GitHub fork. Jenkins should detect the change and start a new build. The build should fail due to the broken unit tests.

This completes the setup and testing of your first Jenkins build job. You are now ready to explore more advanced features and configurations!