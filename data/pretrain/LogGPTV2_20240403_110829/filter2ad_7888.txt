# 前端变量劫持漏洞详解

## 0x1 基础知识
当页面中存在`iframe`时，父页面和子页面可以相互访问对方的`window`对象。本文不考虑`iframe`的`sandbox`属性，所有测试均在无任何`sandbox`限制的情况下进行。

### 父页面访问子页面
- `document.getElementById("iframe1").contentWindow;` // 获取iframe的window对象
- `window.frames[0];` // 获取iframe的window对象
- `window[0];` // 这个比较有意思，`window`是本页面的window对象，而`window[0]`是子页面的window对象

### 子页面访问父页面
- `window.parent;` // 获取上一级的window对象，如果还是iframe，则获取该iframe的window对象
- `window.top;` // 获取最顶级容器的window对象，即打开页面的文档

若父页面与子页面同源，可以通过`window`对象访问到任何内容，包括但不限于`document`、`name`、`location`等。但在非同源情况下，`iframe`的`window`对象大多数属性会被同源策略阻止访问，但有两个特殊属性：
1. `frames`：可读但不可写。意味着可以读取不同域的子页面中的iframe的`window`对象。
2. `location`：可写但不可读。意味着父子页面可以相互修改彼此的`location`。

**结合以上两点可以推导出，父页面可以修改孙页面（或反之）的`location`。**

例如，父页面通过`window.frames[0]`获取子页面的`window`对象，再通过`frames`获取孙页面的`window`对象，然后修改其`location`。

### 示例
```javascript
// 爷页面修改孙页面的location
var grandChildWindow = window.frames[0].frames[0];
grandChildWindow.location.href = "http://example.com";
```

## 0x2 重新审视 id 属性
在浏览器中，所有全局变量都存储在`window`对象中，并作为`window`的属性被访问。例如：

```javascript
> content = "i am content storage in window";
> window.content; // 输出: "i am content storage in window"
> window.content == content; // 输出: true
```

那么，id属性是否会覆盖已存在的全局变量呢？我们来验证一下：

```html
<script>
    var test = "test";
    var test2 = "test2";
</script>
<iframe id="test"></iframe>
<iframe id="test2"></iframe>
```

在控制台输入：

```javascript
> test; // 输出: "test"
> test2; // 输出: "test2"
```

**事实证明，无法覆盖已定义的变量，但可以定义新的变量。**

如何让页面中出现未定义的全局变量呢？从Chrome 74开始，默认的XSS Auditor从block模式变为filter模式，可以利用这个特性删除页面中的代码。（此问题将在文章最后演示）

另外，如果在页面中定义了两个相同id的元素，使用`document.getElementById`将无法获取这些元素，但这并不意味着全局变量不存在。例如：

```html
<iframe id="test" src="A.html"></iframe>
<iframe id="test" src="B.html"></iframe>
```

在控制台输入：

```javascript
> test; // 输出: 第一个iframe的window对象
> test == document.getElementsByTagName('iframe')[0].contentWindow; // 输出: true
> test == document.getElementsByTagName('iframe')[1].contentWindow; // 输出: false
```

### 利用示例
假设有一个A.html文件：

```html
<!DOCTYPE html>
<html>
<head>
    <title>A Page</title>
</head>
<body>
    <iframe id="VUL" src="http://B.com/B.html"></iframe>
    <script>
        VUL = "hacked";
    </script>
</body>
</html>
```

访问`A.com/A.html`后，会发现`B.com/B.html`中的`VUL`已被劫持。

## 结论
虽然变量劫持的利用面较小，只能将一个变量劫持为`window`对象，但仍期待更多的挖掘和探索新的利用场景。