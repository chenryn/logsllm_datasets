title:A Data-Centric Approach to Insider Attack Detection in Database Systems
author:Sunu Mathew and
Michalis Petropoulos and
Hung Q. Ngo and
Shambhu J. Upadhyaya
A Data-Centric Approach to Insider Attack
Detection in Database Systems
Sunu Mathew(cid:63)1, Michalis Petropoulos2, Hung Q. Ngo2, and Shambhu
Upadhyaya2
1 Information Security,
Amazon.com Inc., Seattle WA 98104, USA,
PI:EMAIL,
2 Computer Science and Engineering,
University at Buﬀalo, Buﬀalo NY 14260, USA,
(mpertropo, hungngo, shambhu)@buffalo.edu
Abstract. The insider threat against database management systems is
a dangerous security problem. Authorized users may abuse legitimate
privileges to masquerade as another user or to maliciously harvest data.
We propose a new direction to address the problem. We model users’
access patterns by proﬁling the data points that users access, in contrast
to analyzing the query expressions in prior approaches. Our data-centric
approach is based on the key observation that query syntax alone is a
poor discriminator of user intent, which is much better rendered by what
is accessed. We present a feature-extraction method to model users’ ac-
cess patterns. Statistical learning algorithms are trained and tested using
data from a real Graduate Admission database. Experimental results in-
dicate that the technique is very eﬀective, accurate, and is promising
in complementing existing database security solutions. Practical perfor-
mance issues are also addressed.
1
Introduction
Ensuring the security and privacy of data assets is a crucial and very diﬃcult
problem in our modern networked world. Relational database management sys-
tems (RDBMS) is the fundamental means of data organization, storage and
access in most organizations, services, and applications. Naturally, the preva-
lence of RDBMS’s led to the prevalence of security threats against RDBMS’s.
An intruder from the outside, for example, may be able to gain unauthorized
access to data by sending carefully crafted queries to a back-end database of a
Web application. This class of so-called SQL injection attacks are well-known
and well-documented, yet still very dangerous [1]. They can be mitigated by
adopting suitable safeguards, for example, by adopting defensive programming
techniques and by using SQL prepare statements [2].
An insider attack against an RDBMS, however, is much more diﬃcult to de-
tect, and potentially much more dangerous [3–5]. According to the most recent
(cid:63) Work done as a graduate student at the University at Buﬀalo.
U.S. Secret Service/CERT/Microsoft E-Crime report, insider attacks constitute
34% of all surveyed attacks (outsiders 37%, and the remaining 29% have un-
known sources). For example, insiders to an organization such as (former) em-
ployees or system administrators might abuse their already existing privileges to
conduct masquerading, data harvesting, or simply sabotage attacks [6].
More formally, the RAND workshop devoted to insider threats [7] deﬁned an
insider as “someone with access, privilege or knowledge of information systems
and services,” and the insider threat problem as “malevolent (or possibly inadver-
tent) actions by an already trusted person with access to sensitive information
and information systems.” Examples of insider attacks include masquerading
and privilege abuse which are well-known threats in the ﬁnancial, corporate and
military domains; attackers may abuse legitimate privileges to conduct snooping
or data-harvesting [3] with malicious intent (e.g., espionage).
1.1 Main Ideas
By deﬁnition, detecting insider attacks by specifying explicit rules or policies is
a moot point: an insider is always deﬁned relative to a set of policies. Conse-
quently, we believe that the most eﬀective method to deal with the insider threat
problem is to statistically proﬁle normal users’ (computing) behaviors and raise
a ﬂag when a user deviates from his/her routines. Intuitively, a good statisti-
cal proﬁler should be able to detect non-stealthy sabotage attacks, quick data
harvesting attacks, or masquerading attack because the computing footprints
of those actions should be signiﬁcantly diﬀerent from the day-to-day activities,
from a statistical point of view.
The user proﬁling idea for insider threat detection in particular and anomaly
detection in general is certainly not new (see, e.g., [8]). In the context of an
RDBMS (or any problem requiring statistical proﬁling), the novelty is in the
answers to two critical questions: (1) what is a user proﬁle (and how to construct
it)? and (2) which machine-learning techniques and models should we adopt so
that the proﬁles are practically useful for the detection problem? By “useful” we
mean some relevant classes of insider attacks can be detected to a good degree
of accuracy. By “practical” we mean the method can be deployed and perform
eﬀectively in a real RDBMS. The novelty and contributions of this paper come
from answering the above two questions.
Prior studies (e.g., [9–14]) have led to the development of intrusion detection
systems (IDS) that aimed to protect databases from attacks. Our contribution
is complementary, and is speciﬁcally on analyzing users’ interactions with an
RDBMS. Other behavioral features useful in insider threat detection (location
of the attacker, informational correlation between consecutive queries, and tem-
poral features such as time between queries, duration of session, etc.) are beyond
the scope of this paper, and are considered future work.
Perhaps the most natural user “proﬁle” is the set of SQL queries a user daily
issues to the database, or more generally some feature vectors representing past
queries. Indeed, [14] relied on the SQL-expression syntax of queries to construct
user proﬁles. This approach has the advantage that the query processing of the
insider detection system is computationally light: a new query is analyzed by
some statistical engine; only queries accepted by the engine are then issued to
the database. However, as we shall later demonstrate in this paper, this syntax-
centric view is ineﬀective and error-prone for database anomaly detection in
general, and for database insider threat detection, in particular. On the one hand,
queries may diﬀer widely in syntax yet produce the same “normal” (i.e., good)
output, causing the syntax-based detection engine to generate false positives.
On the other hand, syntactically similar queries may produce vastly diﬀerent
results, leading the syntax-based engine to generate false negatives.
Our main idea and also our conviction is that the best way to distinguish
normal vs. abnormal (or good vs. malicious) access patterns is to look directly
at what the user is trying to access – the result of the query itself – rather
than how he expresses it, i.e. the SQL expressions. In other words, this data-
centric approach values the semantics of the queries more than their syntax.
When a malicious insider tries to acquire new knowledge about data points
and their relationships, the data points accessed are necessarily diﬀerent from
the old accessed points. The deviation occurs in the data harvesting attacks, the
masquerading attacks, and also the compromised account case where an intruder
gains access to an insider’s account.
1.2 Contributions
Our ﬁrst contribution is the proposed data-centric viewpoint, which to the best
of our knowledge has not been studied in the database security and the insider
threat literature. Intuitively, the data-centric approach has the following advan-
tage: for an insider to evade our system, he has to generate queries with result
statistically similar to the ones he would have gotten anyhow with legitimate
queries using his existing privileges, rendering the attempt at circumvention in-
consequential. In contrast, in the syntax-based approach queries with similar
syntax can give diﬀerent results: the attacker may be able to craft a “good-
looking” malicious query bypassing the syntax-based detection engine to access
data he’s not supposed to access. This point is validated in Sections 3, 5 and 6.
The second contribution is a method to extract a feature vector from the
result set of a query, which is the core of our answer to question (1) above. The
dimension of the feature vector is only dependent on the database schema, but
independent from size of the database. In particular, a query’s feature vector’s
dimension is independent of how large the result set of a query is. This bounded
dimensionality also partially addresses scalability and performance concerns the
acute reader might have had. Section 4 details the method.
The third contribution is to address the following potential performance prob-
lem: a query has to be executed before the decision can be made on whether or
not it is malicious. What if a malicious query asks for hundreds of gigabytes of
data? Will the query have to be executed, and will our detection engine have to
process this huge “result set” before detecting the anomaly? These legitimate
concerns are within the scope of question (2) above. We will show that this
performance-accuracy tradeoﬀ is not at all as bad as it seems at ﬁrst glance. We
experimentally show that a representative constant number of result tuples per
query are suﬃcient for the detection engine to perform well, especially when the
right statistical features and distance function (between normal and abnormal
result sets) are chosen. Furthermore, these (constant number of) result tuples
can be computed eﬃciently by leveraging the pipelined query execution model
of commercial RDBMS’s.
The fourth contribution, presented in Section 5, is a taxonomy of anomalous
database access patterns, which is needed to systematically evaluate the accuracy
of both the data-centric and the syntax-centric approaches.
The ﬁfth contribution is a relatively extensive evaluation of several statis-
tical learning algorithms using the data-centric approach. Speciﬁcally, for the
masquerade detection problem on a real Graduate Admission data set, we found
that k-means clustering works very well, with detection rates of around 95-99%.
For data harvesting detection, we develop an outlier detection method based
on attribute deviation (a sort of clustering using the L∞-norm) which performs
well. Furthermore, this method is suitable when the features are only extracted
from a constant number of tuples of the result set, thus making it practical.
In summary, though our results are derived in the limited context of insider
threat detection within database security, this paper is a ﬁrst step in exploring
the larger potential of the data-centric approach in anomaly detection.
Paper Outline The rest of this paper is organized as follows. Section 2 sur-
veys background and related work. Section 3 demonstrates the limitations of the
syntax-based approach, thus motivating the data-centric approach introduced in
Section 4. Section 5 gives a brief taxonomy of query anomalies facilitating the
experiments presented in Section 6. We further discuss our solution, its implica-
tions, and future research directions in Section 7.
2 Related Work
IDSs with direct or indirect focus on databases have been presented in the lit-
erature [15, 16]. In [17], temporal properties of data are utilized for intrusion
detection in applications such as real-time stock trading. Anomaly detection
schemes dealing with SQL injection attacks in Web applications were studied
in [18, 12]. SQL injection attacks are a speciﬁc kind of database query anomaly
that is detected by our approach in a straightforward manner as we shall show.
Data correlation between transactions is used to aid anomaly detection in
[11]. Similarly, in [19], dependency between database attributes is used to gen-
erate rules based on which malicious transactions are identiﬁed. The DEMIDS
system [9] detects intrusions by building user proﬁles based on their working
scopes which consist of feature/value pairs representing their activities. These
features are typically based on syntactical analysis of the queries. A system to
detect database attacks by comparison with a set of known legitimate database
transactions is the focus of [10], which is another syntax-based system where
SQL statements are summarized as regular expressions which are considered to
be “ﬁngerprints” for legitimate transactions. Yet another syntax-based approach
was considered in [20] for web databases, where ﬁngerprints of all SQL statements
that an application can generate are proﬁled. A binary vector with length equal
to the number of ﬁngerprints is used to build session proﬁles and aid in anomaly
detection. This approach made assumptions such as restrictions on the number
of distinct queries possible, and may complement our approach in cases where
the assumptions are valid. In [21], database transactions are represented by di-
rected graphs describing the execution paths (select, insert, delete etc.) and used
for malicious data access detection. This approach cannot handle adhoc queries
(as the authors themselves state) and works at the coarse-grained transaction
level as opposed to the ﬁne-grained query level. Database session identiﬁcation
is the focus of [22]: queries within a session are considered to be related to each
other, and an information theoretic metric (entropy) is used to separate sessions;
however, whole queries are used as the basic unit for n-gram-statistical modeling
of sessions. A multiagent based approach to database intrusion detection is pre-
sented in [23]; relatively simple metrics such as access frequency, object requests
and utilization and execution denials/violations are used to audit user behavior.
Prior approaches in the literature that most resemble ours are [13] and [14].
The solution in [13] is similar in the use of statistical measurements; however the
focus of the approach is mainly on detecting anomalies in database modiﬁcation
(e.g., inserts) rather than queries). The query anomaly detection component is
mentioned only in passing and only a limited set of features (e.g., session dura-
tion, number of tuples aﬀected) are considered. The recent syntax-based work
in [14] has the same overall detection goals as our work: detection of anomalies
in database access by means of user queries. A primary focus on this paper will
be on exposing the limitations of syntax based detection schemes; the approach
in [14] will be used in this paper as a benchmark for evaluating the performance
of our approach.
3
Limitations of Syntax-Centric Approach
This section demonstrates that two syntactically similar queries may generate
vastly diﬀerent results, and two syntactically distinct queries may give similar
results. Consequently, SQL expressions are poor discriminators of users’ intents.
For example, a syntax-based approach may model a query with a frequency
vector, each of whose coordinates counts the number of occurrences (or marks
the presence) of some keywords or mathematical operators [14].
Consider the following query:
SELECT p.product_name, p.product_id
FROM PRODUCT p
WHERE p.cost = 100 AND p.weight > 80;
A syntactical analysis of this query and subsequent feature extraction (e.g.,
[14]) might result in the following features for query data representation – SQL
Command – SELECT, Select Clause Relations – PRODUCT, Select Clause
Attributes – product name, product id, Where Clause Relation – PRODUCT,
Where Clause Attributes – cost. Now consider the alternate query:
SELECT p.product_name, p.product_id
FROM PRODUCT p
WHERE p.cost > 100 AND p.weight = 80;
This query has the same syntax-based feature set as the previous one; how-
ever, the data tuples accessed in the two cases are vastly diﬀerent.
Conversely, suppose we rewrite the ﬁrst query as follows:
SELECT p.product_name, p.product_id
FROM PRODUCT p
WHERE p.cost = 100 AND p.weight > 80
AND p.product_name IS NOT NULL;
This query is syntactically diﬀerent (two columns and a conjunction operator
in the WHERE clause), but produces the same result tuples as the ﬁrst (under
the reasonable assumption that all products in the database have a valid product
name). Most syntax-based anomaly detection schemes are likely to ﬂag this query
as anomalous with respect to the ﬁrst.
Syntax analysis, even if very detailed (taking into account diﬀerences in the
operand diﬀerence between ‘=’ and ‘>’ in the above examples) is complicated
given the expressiveness of the SQL language, and involves determining query