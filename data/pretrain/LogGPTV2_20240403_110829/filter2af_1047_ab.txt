同时，利用 `tmsh` 将jdwp监听端口8777开放出去
    [root@localhost:NO LICENSE:Standalone] / # tmsh
    root@(localhost)(cfg-sync Standalone)(NO LICENSE)(/Common)(tmos)# security firewall
    root@(localhost)(cfg-sync Standalone)(NO LICENSE)(/Common)(tmos.security.firewall)# modify management-ip-rules rules add { allow-access-8777 { action accept destination { ports add { 8777 } } ip-protocol tcp place-before first } }
然后直接杀掉这个进程，会自动重启并开放8777调试端口
根据
    [root@localhost:NO LICENSE:Standalone] cat /proc/21186/cmdline 
    /usr/lib/jvm/jre/bin/java
    -D java.util.logging.manager=com.f5.rest.common.RestLogManager
    -D java.util.logging.config.file=/etc/restjavad.log.conf
    -D log4j.defaultInitOverride=true
    -D org.quartz.properties=/etc/quartz.properties -Xss384k 
    -XX:+PrintFlagsFinal
    -D sun.jnu.encoding=UTF-8
    -D file.encoding=UTF-8 
    -XX:+PrintGC -Xloggc:/var/log/restjavad-gc.log 
    -XX:+UseGCLogFileRotation 
    -XX:NumberOfGCLogFiles=2 
    -XX:GCLogFileSize=1M 
    -XX:+PrintGCDateStamps 
    -XX:+PrintGCTimeStamps 
    -XX:MaxPermSize=72m -Xms96m -Xmx192m 
    -XX:-UseLargePages 
    -XX:StringTableSize=60013 
    -classpath :/usr/share/java/rest/f5.rest.adc.bigip.jar:/usr/share/java/rest/f5.rest.adc.shared.jar:/usr/share/java/rest/f5.rest.asm.jar:/usr/share/java/rest/f5.rest.icr.jar:/usr/share/java/rest/f5.rest.jar:/usr/share/java/rest/f5.rest.live-update.jar:/usr/share/java/rest/f5.rest.nsyncd.jar:/usr/share/java/rest/libs/axis-1.1.jar:/usr/share/java/rest/libs/bcpkix-1.59.jar:/usr/share/java/rest/libs/bcprov-1.59.jar:/usr/share/java/rest/libs/cal10n-api-0.7.4.jar:/usr/share/java/rest/libs/commonj.sdo-2.1.1.jar:/usr/share/java/rest/libs/commons-codec.jar:/usr/share/java/rest/libs/commons-discovery.jar:/usr/share/java/rest/libs/commons-exec-1.3.jar:/usr/share/java/rest/libs/commons-io-1.4.jar:/usr/share/java/rest/libs/commons-lang.jar:/usr/share/java/rest/libs/commons-lang3-3.2.1.jar:/usr/share/java/rest/libs/commons-logging.jar:/usr/share/java/rest/libs/concurrent-trees-2.5.0.jar:/usr/share/java/rest/libs/core4j-0.5.jar:/usr/share/java/rest/libs/eclipselink-2.4.2.jar:/usr/share/java/rest/libs/f5.asmconfig.jar:/usr/share/java/rest/libs/f5.rest.mcp.mcpj.jar:/usr/share/java/rest/libs/f5.rest.mcp.schema.jar:/usr/share/java/rest/libs/f5.soap.licensing.jar:/usr/share/java/rest/libs/federation.jar:/usr/share/java/rest/libs/gson-2.8.2.jar:/usr/share/java/rest/libs/guava-20.0.jar:/usr/share/java/rest/libs/httpasyncclient.jar:/usr/share/java/rest/libs/httpclient.jar:/usr/share/java/rest/libs/httpcore-nio.jar:/usr/share/java/rest/libs/httpcore.jar:/usr/share/java/rest/libs/httpmime.jar:/usr/share/java/rest/libs/icrd-src.jar:/usr/share/java/rest/libs/icrd.jar:/usr/share/java/rest/libs/jackson-annotations-2.9.5.jar:/usr/share/java/rest/libs/jackson-core-2.9.5.jar:/usr/share/java/rest/libs/jackson-databind-2.9.5.jar:/usr/share/java/rest/libs/jackson-dataformat-yaml-2.9.5.jar:/usr/share/java/rest/libs/javax.persistence-2.1.1.jar:/usr/share/java/rest/libs/javax.servlet-api.jar:/usr/share/java/rest/libs/jaxrpc-1.1.jar:/usr/share/java/rest/libs/jetty-all.jar:/usr/share/java/rest/libs/joda-time-2.9.9.jar:/usr/share/java/rest/libs/jsch-0.1.53.jar:/usr/share/java/rest/libs/json_simple.jar:/usr/share/java/rest/libs/jsr311-api-1.1.1.jar:/usr/share/java/rest/libs/libthrift.jar:/usr/share/java/rest/libs/log4j.jar:/usr/share/java/rest/libs/lucene-analyzers-common-4.10.4.jar:/usr/share/java/rest/libs/lucene-core-4.10.4.jar:/usr/share/java/rest/libs/lucene-facet-4.10.4.jar:/usr/share/java/rest/libs/odata4j-0.7.0-core.jar:/usr/share/java/rest/libs/quartz-2.2.1.jar:/usr/share/java/rest/libs/slf4j-api.jar:/usr/share/java/rest/libs/slf4j-ext-1.6.3.jar:/usr/share/java/rest/libs/slf4j-log4j12.jar:/usr/share/java/rest/libs/snakeyaml-1.18.jar:/usr/share/java/rest/libs/swagger-annotations-1.5.19.jar:/usr/share/java/rest/libs/swagger-core-1.5.19.jar:/usr/share/java/rest/libs/swagger-models-1.5.19.jar:/usr/share/java/rest/libs/swagger-parser-1.0.35.jar:/usr/share/java/rest/libs/validation-api-1.1.0.Final.jar:/usr/share/java/rest/libs/wsdl4j-1.1.jar:/usr/share/java/f5-avr-reporter-api.jar com.f5.rest.workers.RestWorkerHost 
    --port=8100 
    --outboundConnectionTimeoutSeconds=60 
    --icrdConnectionTimeoutSeconds=60 
    --workerJarDirectory=/usr/share/java/rest 
    --configIndexDirectory=/var/config/rest/index 
    --storageDirectory=/var/config/rest/storage 
    --storageConfFile=/etc/rest.storage.BIG-IP.conf 
    --restPropertiesFiles=/etc/rest.common.properties,/etc/rest.BIG-IP.properties 
    --machineId=ff716f6f-1be0-4de5-8ca8-17beb749e271
可知，主类为com.f5.rest.workers.RestWorkerHost
在idea按两下shift搜索RestWorkerHost即可搜到文件RestWorkerHost.class
经过大佬指点，我把/usr/share/java/rest目录下面的jar包全部反编译，然后用VS Code打开审计
先看一下RestWorkerHost.java,从其中main函数开始向下审计
    public static void main(String[] args) throws Exception {
          Thread.setDefaultUncaughtExceptionHandler(DieOnUncaughtErrorHandler.getHandler());
          CommandArgumentParser.parse(RestWorkerHost.class, args);
          try {
             host = new RestWorkerHost();
             host.start();
          } catch (Exception var5) {
             LOGGER.severe(RestHelper.throwableStackToString(var5));
          } finally {
             Thread.sleep(1000L);
             System.exit(1);
          }
       }
实例化了一个RestWorkerHost对象，然后调用start函数
    void start() throws Exception {
      ...
            this.server = new RestServer(port);
      ...
            this.server.start();
      ...
      }
在start函数中，实例化了一个RestServer对象server,然后调用start函数，在这里一定不要急着去看RestServer类的start函数，先看看RestServer这个类的构造函数
    public RestServer(int port) {
          this(port, new JettyHost());
       }
        public RestServer(int port, JettyHost jettyHost) {
            this.pathToWorkerMap = new ConcurrentSkipListMap();
            this.workerToCollectionPathsMap = new ConcurrentSkipListMap();
            this.checkRestWorkerShutdownMillis = (int)TimeUnit.MINUTES.toMillis(1L);
            this.supportWorkersStarted = false;
            this.allowStackTracesInPublicResponse = false;
            this.storageUri = null;
            this.configIndexUri = null;
            this.groupResolverUri = null;
            this.deviceResolverUri = null;
            this.forwarderUri = null;
            this.machineId = null;
            this.discoveryAddress = null;
            this.scheduleTaskManager = (new ScheduleTaskManager()).setLogger(LOGGER);
            this.readyWorkerSet = new ConcurrentSkipListSet();
            this.indexRebuildCoordinator = new RunnableCoordinator(1);
            this.forwardRequestValidator = null;
            if (port < 0) {
                throw new IllegalArgumentException("port");
            } else {
                this.listenPort = port;
                this.jettyHost = jettyHost;
                this.processRequestsTask = new Runnable() {
                    public void run() {
                        RestServer.this.processQueuedRequests();
                    }
                };
            }
        }
可以看出，这里又会实例化一个JettyHost对象，然后我们再去看RestServer类的start函数
    public int start() throws Exception {
       ......
             this.listenPort = this.jettyHost.start(this.listenPort, RestWorkerHost.isPublic, this.extraConfig);
       ......
       }
可以看出又会去调用jettyHost这个对象的start函数，JettyHost这个类没有构造函数，我们直接去看JettyHost这个类的start函数
    public int start(int port, boolean isPublic, com.f5.rest.app.JettyHost.ExtraConfig extraConfig) throws Exception {
       ......
          ServletContextHandler contextHandler = new ServletContextHandler();
          contextHandler.setContextPath("/");
          ServletHolder asyncHolder = contextHandler.addServlet(RestServerServlet.class, "/*");
          asyncHolder.setAsyncSupported(true);
          handlers.addHandler(contextHandler);
       ......
       }
可以看出，针对性的处理的代码位于RestServerServlet中，找到了对应处理的servlet，其实就很简单了，剩下的工作就去研究servlet里面的内容就好了，主要逻辑都在其中
由于其继承了HttpServlet，所以我们直接看重载的service函数
    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            final AsyncContext context = req.startAsync();
            context.start(new Runnable() {
                public void run() {
                    RestOperation op = null;
                    try {
                        op = RestServerServlet.this.createRestOperationFromServletRequest((HttpServletRequest)context.getRequest());
                        ......
                        }
                    } catch (Exception var4) {
                        ......
                    }
                    op.setCompletion(new RestRequestCompletion() {
                        public void completed(RestOperation operation) {
                            RestServerServlet.sendRestOperation(context, operation);
                        }
                        public void failed(Exception ex, RestOperation operation) {
                            RestServerServlet.failRequest(context, operation, ex, operation.getStatusCode());
                        }
                    });
                    try {
                        ServletInputStream inputStream = context.getRequest().getInputStream();
                        inputStream.setReadListener(RestServerServlet.this.new ReadListenerImpl(context, inputStream, op));
                    } catch (IOException var3) {
                        RestServerServlet.failRequest(context, op, var3, 500);
                    }
                }
            });
        }
其中，createRestOperationFromServletRequest针对
http包头做了一些处理，但是我们关注的是根据request的处理动作，所以我们需要聚焦于setReadListener，去看看ReadListenerImpl的处理,根据[ReadListener接口文档](https://docs.oracle.com/javaee/7/api/javax/servlet/ReadListener.html)，我们直接看ReadListenerImpl这个类实现的onAllDataRead函数
    public void onAllDataRead() throws IOException {
                if (this.outputStream != null) {
                    if (this.operation.getContentType() == null) {
                        this.operation.setIncomingContentType("application/json");
                    }
                    if (RestHelper.contentTypeUsesBinaryBody(this.operation.getContentType())) {
                        byte[] binaryBody = this.outputStream.toByteArray();
                        this.operation.setBinaryBody(binaryBody, this.operation.getContentType());
                    } else {
                        String body = this.outputStream.toString(StandardCharsets.UTF_8.name());
                        this.operation.setBody(body, this.operation.getContentType());
                    }
                }
                RestOperationIdentifier.setIdentityFromAuthenticationData(this.operation, new Runnable() {
                    public void run() {
                        if (!RestServer.trySendInProcess(ReadListenerImpl.this.operation)) {
                            RestServerServlet.failRequest(ReadListenerImpl.this.context, ReadListenerImpl.this.operation, new RestWorkerUriNotFoundException(ReadListenerImpl.this.operation.getUri().toString()), 404);
                        }
                    }
                });
                RestServer.trace(this.operation);
            }
其中，第一个if判断是处理包的content-type头信息，不是很重要，看后边setIdentityFromAuthenticationData这个方法：
    public static void setIdentityFromAuthenticationData(RestOperation request, Runnable completion) {
            if (!setIdentityFromDeviceAuthToken(request, completion)) {
                if (setIdentityFromF5AuthToken(request)) {
                    completion.run();
                } else if (setIdentityFromBasicAuth(request)) {
                    completion.run();
                } else {
                    completion.run();
                }
            }
        }
看一下if里面的判断setIdentityFromDeviceAuthToken,
会检查包头里面有没有em_server_auth_token，没有则返回false，我们这里没有，所以直接返回false
然后会进入setIdentityFromF5AuthToken方法
    private static boolean setIdentityFromF5AuthToken(RestOperation request) {
            AuthTokenItemState token = request.getXF5AuthTokenState();
            if (token == null) {
                return false;
            } else {
                request.setIdentityData(token.userName, token.user, AuthzHelper.toArray(token.groupReferences));
                return true;
            }
        }
由于我们并没有设置X-F5-Auth-Token的值，所以此处返回token是null,直接返回false
自然，后边就会进入setIdentityFromBasicAuth方法
    private static boolean setIdentityFromBasicAuth(RestOperation request) {
            String authHeader = request.getBasicAuthorization();
            if (authHeader == null) {
                return false;
            } else {
                BasicAuthComponents components = AuthzHelper.decodeBasicAuth(authHeader);
                request.setIdentityData(components.userName, (RestReference)null, (RestReference[])null);
                return true;
            }
        }
由于我们设置了Authorization的值，所以authHeader的值为YWRtaW46，进入setIdentityData
    public RestOperation setIdentityData(String userName, RestReference userReference, RestReference[] groupReferences) {
            if (userName == null && !RestReference.isNullOrEmpty(userReference)) {
                String segment = UrlHelper.getLastPathSegment(userReference.link);
                if (userReference.link.equals(UrlHelper.buildPublicUri(UrlHelper.buildUriPath(new String[]{WellKnownPorts.AUTHZ_USERS_WORKER_URI_PATH, segment})))) {
                    userName = segment;
                }
            }
            if (userName != null && RestReference.isNullOrEmpty(userReference)) {
                userReference = new RestReference(UrlHelper.buildPublicUri(UrlHelper.buildUriPath(new String[]{WellKnownPorts.AUTHZ_USERS_WORKER_URI_PATH, userName})));
            }
            this.identityData = new RestOperation.IdentityData();
            this.identityData.userName = userName;
            this.identityData.userReference = userReference;
            this.identityData.groupReferences = groupReferences;
            return this;
        }
这里会根据Authorization头的值解码获得的username生成一个新的userReference，到底怎么根据用户名生成的reference其实我们也不需要太过深究，动态调试知道是这么个结构就可以了：
这一步完了之后，再回顾setIdentityFromAuthenticationData
    public static void setIdentityFromAuthenticationData(RestOperation request, Runnable completion) {
            if (!setIdentityFromDeviceAuthToken(request, completion)) {
                if (setIdentityFromF5AuthToken(request)) {
                    completion.run();
                } else if (setIdentityFromBasicAuth(request)) {
                    completion.run();
                } else {
                    completion.run();
                }
            }
        }
调用completion.run(),这个函数在调用函数onAllDataRead中规定好了
    public void onAllDataRead() throws IOException {
        if (this.outputStream != null) {
            if (this.operation.getContentType() == null) {
                this.operation.setIncomingContentType("application/json");
            }
            if (RestHelper.contentTypeUsesBinaryBody(this.operation.getContentType())) {
                byte[] binaryBody = this.outputStream.toByteArray();
                this.operation.setBinaryBody(binaryBody, this.operation.getContentType());
            } else {
                String body = this.outputStream.toString(StandardCharsets.UTF_8.name());