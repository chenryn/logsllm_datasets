tests/test_thoughts.py::test_create_me_thought PASSED [ 5%]
...
tests/test_token_validation.py::test_valid_token_header PASSED [100%]
===== 17 passed, 177 warnings in 2.14 seconds ===
$
```
这个环境文件对于任何需要连接到数据库的服务都很有用，例如在本地部署服务。
# 在本地部署 Docker 服务
有了所有这些元素，我们可以创建服务来本地部署思想服务:
```
     server:
        env_file: environment.env
        image: thoughts_server
        build:
            context: .
            dockerfile: docker/app/Dockerfile
        ports:
            - "8000:8000"
        depends_on:
            - db
```
我们需要确保添加`db`数据库服务的依赖性。我们还绑定了内部端口，这样我们就可以在本地访问它。
We start the service with the `up` command. There are some differences between the `up` and the `run` commands, but the main one is that `run` is for single commands that start and stop, while `up` is designed for services. For example, `run` creates an interactive Terminal, which displays colors, and `up` shows the standard output as logs, including the time when they were generated, accepts the `-d` flag to run in the background, and so on. Using one instead of the other is normally okay, however, `up` exposes ports and allows other containers and services to connect, while `run` does not.
我们现在可以使用以下命令启动服务:
```
$ docker-compose up server
Creating network "ch3_default" with the default driver
Creating ch3_db_1 ... done
Creating ch3_server_1 ... done
Attaching to ch3_server_1
server_1 | [uWSGI] getting INI configuration from /opt/uwsgi/uwsgi.ini
server_1 | *** Starting uWSGI 2.0.18 (64bit) on [Sun Jun 2 
...
server_1 | spawned uWSGI master process (pid: 6)
server_1 | spawned uWSGI worker 1 (pid: 7, cores: 1)
server_1 | spawned uWSGI http 1 (pid: 8)
```
现在在浏览器中访问`localhost:8000`中的服务:
![](img/741100a2-4db5-4976-9d76-557fb89dcdaf.png)
您可以在终端中看到日志。点击 *Ctrl* + *C* 将停止服务器。也可以使用`-d`标志启动服务，以分离终端并以守护模式运行:
```
$ docker-compose up -d server
Creating network "ch3_default" with the default driver
Creating ch3_db_1 ... done
Creating ch3_server_1 ... done
$
```
检查正在运行的服务及其当前状态，并用`docker-compose ps`打开端口:
```
$ docker-compose ps
 Name Command State Ports
------------------------------------------------------------------------------
ch3_db_1 postgres Up 0.0.0.0:5432->5432/tcp
ch3_server_1 /bin/sh /opt/uwsgi/start_s ... Up 0.0.0.0:8000->8000/tcp
```
正如我们之前看到的，我们可以直接访问数据库并在其中运行原始的 SQL 命令。这对于调试问题或进行实验非常有用:
```
$ PGPASSWORD=somepassword pgcli -h localhost -U postgres thoughts
Server: PostgreSQL 11.3
Version: 2.0.2
postgres@localhost:thoughts> 
INSERT INTO thought_model (username, text, timestamp) 
VALUES ('peterparker', 'A great power carries a great
 responsability', now());
INSERT 0 1
Time: 0.014s
postgres@localhost:thoughts>
```
现在这个想法可以通过下面的应用编程接口获得:
```
$ curl http://localhost:8000/api/thoughts/
[{"id": 1, "username": "peterparker", "text": "A great power carries a great responsability", "timestamp": "2019-06-02T19:44:34.384178"}]
```
如果需要在分离模式下查看日志，可以使用`docker-compose logs `命令:
```
$ docker-compose logs server
Attaching to ch3_server_1
server_1 | [uWSGI] getting INI configuration from /opt/uwsgi/uwsgi.ini
server_1 | *** Starting uWSGI 2.0.18 (64bit) on [Sun Jun 2 19:44:15 2019] ***
server_1 | compiled with version: 8.3.0 on 02 June 2019 11:00:48
...
server_1 | [pid: 7|app: 0|req: 2/2] 172.27.0.1 () {28 vars in 321 bytes} [Sun Jun 2 19:44:41 2019] GET /api/thoughts/ => generated 138 bytes in 4 msecs (HTTP/1.1 200) 2 headers in 72 bytes (1 switches on core 0)
```
要完全停止集群，请调用`docker-compose down`:
```
$ docker-compose down
Stopping ch3_server_1 ... done
Stopping ch3_db_1 ... done
Removing ch3_server_1 ... done
Removing ch3_db_1 ... done
Removing network ch3_default
```
这将停止所有容器。
# 将 Docker 映像推送到远程注册表
我们看到的所有操作都与我们本地的 Docker 存储库一起工作。考虑到 Docker 映像的结构和每个层都可以独立工作的事实，它们很容易上传和共享。为此，我们需要使用远程存储库，或者 Docker 术语中的注册表，它将接受推送到它的映像，并允许从它那里提取映像。
The structure of a Docker image is composed of each of the layers. Each of them can be pushed independently, as long as the registry contains the layer it depends on. This saves space if the previous layers are already present, as they will be stored only once. 
# 从 Docker 集线器获取公共映像
默认注册表是 Docker Hub。这是默认配置的，它是公共映像的主要来源。您可以在[https://hub.docker.com/](https://hub.docker.com/)中自由访问它，并搜索可用的映像，以将您的映像基于:
![](img/11179995-9c90-434a-9807-c307bd277d53.png)
每个映像都有关于使用方法和可用标签的信息。不需要单独下载图片，只需要使用图片的名称或者运行`docker pull`命令即可。如果未指定其他注册表，Docker 将自动从 Docker Hub 中提取:
![](img/fa6ae25c-9a50-42dc-88be-d66941b5743f.png)
映像的名称也是 Dockerfiles 中我们的`FROM`命令中使用的名称。
Docker is a fantastic way of distributing a tool. It's very common right now for an open source tool to have an official image in Docker Hub that can be downloaded and started in a standalone model, standardizing the access.
This can be used either for a quick demo, for something such as Ghost—[https://hub.docker.com/_/ghost](https://hub.docker.com/_/ghost) (a blogging platform), or a Redis ([https://hub.docker.com/_/redis](https://hub.docker.com/_/redis)) instance to act as cache with minimal work. Try to run the Ghost example locally.
# 使用标签
标签是用来标记同一映像的不同版本的描述符。有一个映像，`alpine:3.9`，还有一个映像，`alpine:3.8`。对于不同的解释器(3.6、3.7、2.7 等等)，也有 Python 的官方映像，但是除了版本之外，解释器可能会参考映像的创建方式。
例如，这些映像具有相同的效果。第一个是包含 Python 3.7 解释器的完整映像:
```
$ docker run -it python:3.7
Python 3.7.3 (default, May 8 2019, 05:28:42)
[GCC 6.3.0 20170516] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```
第二个也有一个 Python 3.7 解释器。注意名称中的`slim`变化:
```
$ docker run -it python:3.7-slim
Python 3.7.3 (default, May 8 2019, 05:31:59)
[GCC 6.3.0 20170516] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```
但是，映像的大小有很大不同:
```
$ docker images | grep python
python 3.7-slim ca7f9e245002 4 weeks ago 143MB
python 3.7      a4cc999cf2aa 4 weeks ago 929MB
```
如果没有指定其他标签，任何构建都会自动使用`latest`标签。
Keep in mind that tags can be overwritten. This may be confusing, given some of the similarities between the way Docker and Git work, as the term "tag" in Git means something that can't change. A tag in Docker is similar to a branch in Git.
单个映像可以用不同的标签标记多次。例如`latest`标签也可以是版本`v1.5`:
```
$ docker tag thoughts-backend:latest thoughts-backend:v1.5
$ docker images
REPOSITORY       TAG    IMAGE ID     CREATED    SIZE
thoughts-backend latest c7a8499623e7 5 min ago 144MB
thoughts-backend v1.5   c7a8499623e7 5 min ago 144MB
```
注意`image id`是如何相同的。使用标签可以让您标记特定的映像，因此我们知道它们已经准备好部署或赋予它们某种意义。
# 推入注册表
一旦我们标记了我们的映像，我们就可以把它推送到一个共享的注册表中，这样其他服务就可以使用它了。
部署您自己的 Docker 注册表是可能的，但是，除非绝对必要，否则最好避免它。有云提供商允许您创建自己的注册中心，无论是公共的还是私有的，甚至可以在自己的私有云网络中创建。如果你想让你的映像可用，最好的选择是 Docker Hub，因为它是标准的，而且最容易访问。在本章中，我们将在这里创建一个，但我们将在本书的后面探索其他选项。
It's worth saying it again: maintaining your own Docker registry is much more expensive than using a provider one. Commercial prices for registries, unless you require a lot of repos will be in the range of tens of dollars per month, and there are options from well-known cloud providers such as AWS, Azure, and Google Cloud.
除非真的需要，否则避免使用自己的注册表。
我们将在 Docker Hub 注册中心创建一个新的回购。你可以免费创建一个私人回购，也可以创建任意多个公共回购。您需要创建一个新用户，这可能是下载 Docker 时的情况。
A repo, in Docker terms, is a set of images with different tags; for example, all the tags of `thoughts-backend`. This is different from the registry, which is a server that contains several repos.
在更非正式的术语中，通常将注册表称为*转贴*，将转贴称为*映像*，尽管纯粹来说，映像是唯一的，可能是一个标签(也可能不是)。
然后，您可以创建一个新的回购，如下所示:
![](img/d617ceee-0f7b-451a-9bc8-affb75606f9a.png)
一旦回购被创建，我们需要相应地标记我们的形象。这意味着它应该在 Docker Hub 中包含用户名来标识回购。另一种方法是直接用用户名命名映像:
```
$ docker tag thoughts-backend:latest jaimebuelta/thoughts-backend:latest
```
为了能够访问回购，我们需要使用 Docker Hub 中的用户名和密码登录 Docker:
```
$ docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: jaimebuelta
Password:
Login Succeeded
```
登录后，您可以推送您的映像:
```
$ docker push jaimebuelta/thoughts-backend:latest
The push refers to repository [docker.io/jaimebuelta/thoughts-backend]
1ebb4000a299: Pushed
669047e32cec: Pushed
6f7246363f55: Pushed
ac1d27280799: Pushed
c43bb774a4bb: Pushed
992e49acee35: Pushed
11c1b6dd59b3: Pushed
7113f6aae2a4: Pushed
5275897866cf: Pushed
bcf2f368fe23: Mounted from library/alpine
latest: digest: sha256:f1463646b5a8dec3531842354d643f3d5d62a15cc658ac4a2bdbc2ecaf6bb145 size: 2404
```
假设本地 Docker 已正确记录，您现在可以共享该映像并从任何地方提取它。当我们部署一个生产集群时，我们需要确保执行它的 Docker 服务器能够访问注册表，并且它被正确记录。
# 摘要
在本章中，我们学习了如何使用 Docker 命令来创建和操作容器。我们学习了大部分常用的 Docker 命令，如`build`、`run`、`exec`、`ps`、`images`、`tag`、`push`。
我们看到了如何构建 web 服务容器，包括配置文件的准备，如何构造 Dockerfile，以及如何使我们的映像尽可能小。我们还介绍了如何使用`docker-compose`进行本地操作，并通过`docker-compose.yaml`文件连接在集群配置中运行的不同容器。这包括创建一个数据库容器，允许使用相同的工具进行更接近生产部署的测试。
我们看到了如何使用环境变量来配置我们的服务，以及如何通过`docker-compose`配置注入它们来允许不同的模式，比如测试。
最后，我们分析了如何使用注册表来共享我们的映像，以及如何适当地标记它们，并允许将它们从本地开发中移出，以便在部署中使用。
在下一章中，我们将看到如何利用创建的容器和动作来自动运行测试，并让自动化工具为我们完成繁重的工作，以确保我们的代码始终是高质量的！
# 问题
1.  `FROM`关键字在 Dockerfile 中有什么作用？
2.  如何用预定义的命令启动容器？
3.  为什么创建一个删除 Dockerfile 中文件的步骤不会使映像变小？
4.  你能描述一下多阶段 Docker 构建是如何工作的吗？
5.  `run`和`exec`命令有什么区别？
6.  当使用`run`和`exec`命令时，我们应该什么时候使用`-it`标志？
7.  你知道有什么替代 uWSGI 来服务 Python 网络应用吗？
8.  `docker-compose`是干什么用的？
9.  你能描述一下什么是 Docker 标签吗？
10.  为什么有必要将映像推送到远程注册表？
# 进一步阅读
为了加深您对 Docker 和容器的了解，您可以查看*Mastering Docker-第三版*一书([https://www . packtpub . com/eu/虚拟化和云/Mastering-Docker-第三版](https://www.packtpub.com/eu/virtualization-and-cloud/mastering-docker-third-edition))。有关调整容器和学习如何使应用更具性能，请参见 *Docker 高性能-第二版*([https://www . packtpub . com/eu/networking-and-servers/Docker-高性能-第二版](https://www.packtpub.com/eu/networking-and-servers/docker-high-performance-second-edition))，其中涵盖了许多分析和发现性能问题的技术。