### Fault Injection and Recovery Results

In our fault injection experiments, we injected over 12,500 faults, which resulted in 347 detectable crashes. These crashes were categorized as follows:
- 226 exits due to internal panics (65%)
- 109 kill signals due to CPU and MMU exceptions (31%)
- 12 restarts due to missing heartbeat messages (4%)

The subsequent recovery was successful in 100% of the induced failures. Preliminary tests on real hardware showed a success rate of more than 99% for detectable failures. In a very small number of cases (less than 5), the network card was confused by the faulty driver and could not be reinitialized by the restarted driver. Instead, a low-level BIOS reset was required. If the card had a 'master reset' command, the problem could have been resolved by our driver, but our card did not support this feature. Further testing with different drivers and hardware configurations is needed to gain more insight into possible hardware limitations. This will be part of our future work.

### Reengineering Effort

An important lesson learned during the prototype implementation is that the recovery procedure requires an integrated approach for optimal results, meaning that certain components need to be recovery-aware. To measure the reengineering effort, we counted the number of lines of executable code (LoC) required to support recovery. Blank lines, comments, and definitions in header files were omitted from the count. The line counting was done using the `sclc.pl` Perl script [2]. Figure 9 summarizes the results.

Fortunately, the changes required to handle driver failures are both limited and local. The reincarnation server and service utility's logic for dynamically starting servers and drivers is reused to support recovery. Most of the new code relates to defect detection and execution of the recovery scripts. The virtual file system and file server remain largely unchanged, with modifications centralized in the device I/O routines. Additionally, the recovery code in the network server represents a minimal extension to the code needed to start a new driver. Finally, the process manager and microkernel are not affected at all.

Most importantly, the device drivers in our system are minimally affected. Generally, only a minimal change to reply to heartbeat and shutdown requests from the reincarnation server is needed. For most drivers, this change comprises exactly 5 lines of code in the shared driver library to handle the new request types. Device-specific driver code almost never needs to be changed. However, for a few drivers, the initialization code had to be modified to support reinitialization. Overall, the changes are negligible compared to the amount of driver code that can be protected by our design.

### General Applicability

The ideas presented in this paper are generally applicable and can be used in commodity operating systems. While the degree of isolation provided by our prototype platform, MINIX 3, enabled us to implement and test our ideas with relatively little effort, we believe that other systems can also benefit from our approach. There is a trend towards isolating untrusted extensions in other operating systems. For example, user-mode drivers have been successfully tested on Linux [25] and adopted by Windows [27]. If the drivers are properly isolated, these systems can build on the principles presented here to provide policy-driven recovery services like ours.

### Source Code Statistics

Figure 9 provides source code statistics on the total code base and the reengineering effort specific to recovery, expressed in lines of executable code (LoC).

| Component              | Total LoC | Recovery LoC | % Recovery LoC |
|------------------------|-----------|--------------|----------------|
| Reincarnation Server   | 2,002     | 593          | 30%            |
| Data Store             | 384       | 59           | 15%            |
| VFS Server             | 5,464     | 274          | 5%             |
| File Server            | 3,356     | 22           | <1%            |
| SATA Driver            | 2,443     | 5            | <1%            |
| RAM Disk               | 454       | 0            | 0%             |
| Network Server         | 20,019    | 124          | <1%            |
| RTL8139 Driver         | 2,398     | 5            | <1%            |
| DP8390 Driver          | 2,769     | 5            | <1%            |
| Process Manager        | 2,954     | 0            | 0%             |
| Microkernel            | 4,832     | 0            | 0%             |
| **Total**              | 39,011    | 1,072        | -              |

### Conclusion

Our research explores the possibility of building a dependable operating system from unreliable, buggy components. Inspired by other failure-resilient designs, we extended this idea to device driver failures, which are particularly important since device drivers form a large fraction of the operating system code and tend to be buggy. We presented an operating system architecture where common failures in drivers and other critical extensions can be transparently repaired. The system is continuously monitored by the reincarnation server, and malfunctioning components can be replaced in a policy-driven recovery procedure, masking failures for both users and applications. We illustrated our ideas with concrete recovery schemes for network, block device, and character device drivers.

We evaluated our design through various methods. Performance overhead due to our recovery mechanisms can be as low as 1%. Fault-injection experiments demonstrated that our design can recover from realistic failures and provide continuous operation in more than 99% of the detectable failures. Source code analysis showed that the reengineering effort needed is both limited and local. Overall, we believe that our work on failure resilience for device drivers represents a significant step towards more dependable operating systems.

### Availability

MINIX 3 is free, open-source software available via the Internet. You can download MINIX 3 from the official homepage at: http://www.minix3.org/, which also contains the source code, documentation, news, and more.

### Acknowledgments

We would like to thank the anonymous reviewers for their suggestions that improved this paper. This work was supported by the Netherlands Organization for Scientific Research (NWO) under grant 612-060-420.

### References

[References listed as provided in the original text]

---

This optimized version aims to make the text more coherent, clear, and professional, while maintaining the technical details and structure of the original content.