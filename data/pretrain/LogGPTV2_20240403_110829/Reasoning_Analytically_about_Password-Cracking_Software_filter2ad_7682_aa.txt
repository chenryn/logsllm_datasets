title:Reasoning Analytically about Password-Cracking Software
author:Enze Liu and
Amanda Nakanishi and
Maximilian Golla and
David Cash and
Blase Ur
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Reasoning Analytically About
Password-Cracking Software
†
Enze Liu, Amanda Nakanishi, Maximilian Golla
University of Chicago, † Ruhr University Bochum
Email: {alexliu0809, anakanishi, davidcash, blase}@uchicago.edu, PI:EMAIL
, David Cash, Blase Ur
Abstract—A rich literature has presented efﬁcient techniques
for estimating password strength by modeling password-cracking
algorithms. Unfortunately, these previous techniques only apply
to probabilistic password models, which real attackers seldom
use. In this paper, we introduce techniques to reason analytically
and efﬁciently about transformation-based password cracking in
software tools like John the Ripper and Hashcat. We deﬁne two
new operations, rule inversion and guess counting, with which
we analyze these tools without needing to enumerate guesses.
We implement these techniques and ﬁnd orders-of-magnitude
reductions in the time it takes to estimate password strength. We
also present four applications showing how our techniques enable
increased scientiﬁc rigor in optimizing these attacks’ conﬁgura-
tions. In particular, we show how our techniques can leverage
revealed password data to improve orderings of transformation
rules and to identify rules and words potentially missing from
an attack conﬁguration. Our work thus introduces some of the
ﬁrst principled mechanisms for reasoning scientiﬁcally about the
types of password-guessing attacks that occur in practice.
I. INTRODUCTION
Humans use predictable patterns in passwords [1], [2]. Mod-
ern password cracking exploits these patterns using data-driven
methods relying on large corpora of leaked passwords [3]–
[5]. It has become typical to measure password strength by
simulating such password cracking [6]–[9]. Many password-
cracking algorithms are probabilistic, creating a model and
then assigning a probability to each possible password. Assum-
ing the attacker rationally guesses passwords in descending
order of likelihood, the strength of a password is proportional
to the number of passwords with higher probability by that
model. Researchers have developed efﬁcient algorithms for
estimating this mapping for the major probabilistic algorithms:
Markov models [10]–[12], neural networks [13], and proba-
bilistic context-free grammars [7], [10], [14].
Unfortunately, real-world attackers rarely use probabilistic
they use software like John the Ripper (JtR) and
tools;
Hashcat [15]. Their reasons are pragmatic. In ofﬂine attacks,
the wall-clock time to make and check a guess includes the
time to generate a candidate, as well as the time to hash
the candidate and see if it appears in the target store. While
probabilistic algorithms perform well on a guess-by-guess
basis, they impose a high computational cost for generating
a guess [8]. Thus, for all but the slowest hash functions, it
is faster to crack a comparable number of passwords using
these software tools. While the likelihood of a password by
a probabilistic model may correlate with the order in which
software tools guess passwords [8], this proxy is imperfect.
JtR and Hashcat’s mangled-wordlist attacks are their most
commonly used [15] and most intellectually interesting. These
attacks leverage the insight that passwords tend to differ in
small and predictable ways; while one person may append
a digit to a word, another might append a symbol to that
same word. In a mangled-wordlist attack, the attacker creates a
wordlist of common passwords and natural-language content,
as well as a rule list of mangling rules (e.g., replace ‘s’ with
‘$’ and append a digit) written in a transformation language
speciﬁed by the tool. The full attack applies each mangling
rule to each word in the order speciﬁed by the input lists.
Thus, the practical strength of a password pw is strongly
affected by if and when JtR/Hashcat would guess pw, yet it
is difﬁcult to compute this information. To date, one would
simply run JtR/Hashcat on a given rule list and wordlist,
enumerating guesses and recording when pw is generated [8].
This has several limitations. Generating a huge number of
guesses is computationally expensive, and when one stops the
attack it is not known which unguessed passwords would ever
be guessed. Moreover, it is unclear which rule list and wordlist
an intelligent attacker should choose, and how they should be
ordered. Re-running JtR/Hashcat on the myriad possible lists
is intractable. Knowledge of these tools’ complex behaviors is
limited to glimpses obtained via expense computations.
Our ﬁrst contribution: An analytical approach to modeling
transformation-based password guessing. We develop a
more efﬁcient approach for studying mangled-wordlist attacks
without actually running them. We design and implement
tools that analytically compute properties of JtR and Hashcat,
including whether they would generate a particular password
and how many guesses each rule generates. These techniques
enable estimation of a password’s strength by accurately and
efﬁciently computing how many passwords would be guessed
before it in an attack using these tools in a particular con-
ﬁguration. We term this process a guess-number calculator.
While prior work has developed guess-number calculators for
Markov models [10], probabilistic context-free grammars [7],
and neural networks [13], ours is the ﬁrst computationally
efﬁcient approach for modeling widely used cracking software.
In particular, we develop modules for rule inversion and
guess counting. Rule inversion efﬁciently computes a compact
representation describing the preimage set of a rule for a
password pw (the set of words the rule will mangle into pw).
This allows one to easily see whether a rule would generate
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:38)(cid:79)(cid:91)(cid:70)(cid:1)(cid:45)(cid:74)(cid:86)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:24)(cid:17)
(cid:20)(cid:25)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:17 UTC from IEEE Xplore.  Restrictions apply. 
a target password with a given wordlist. Guess counting
computes the number of guesses generated by a rule without
running it. Both modules run much faster than naive execution.
For example, consider the task of determining whether
passwords password156 and monkey! would be generated
by a rule that appends two digits to every entry of a given
wordlist. One could ﬁrst invert that rule by attempting to
remove two digits from the end of the password. If this inver-
sion is successful (password156 becomes password1),
then the task is reduced to a constant-time lookup of whether
password1 is in the wordlist.
is,
password156 would be guessed. Because monkey! does
not end in two digits, we determine it cannot be guessed by
that rule. We can also determine how many guesses this rule
issues: 100 times the number of entries in the wordlist.
(and only if)
If
it
While these computations were straightforward for this
simple rule, JtR and Hashcat support dozens of more complex
transformations (e.g., substitutions, purging classes of charac-
ters, conditionally rejecting candidate guesses). Furthermore,
a rule can compose many individual
transformations. We
formally analyze both tools’ full rule languages, building
efﬁcient algorithms for handling most complex rules. Our tool
can invert and guess count the vast majority of transformations
supported by JtR/Hashcat, as well as arbitrary compositions of
transformations. However, for some rules (e.g., character purg-
ing), we must resort to brute-force execution of JtR/Hashcat.
Given a password pw, our guess calculator determines how
many guesses JtR/Hashcat would issue before guessing pw.
Doing so efﬁciently enables quick estimation of a password’s
strength. After some moderate precomputation, our calculator
responds in only a few seconds even for attacks making
300 trillion guesses, enabling the ﬁrst real-time estimation of
password strength against common mangled-wordlist attacks.
Our second contribution: Conﬁguration tools/experiments.
Probabilistic password-cracking algorithms use training data
(typically huge sets of passwords) to model the probability
of previously unseen passwords. While each probabilistic
algorithm is somewhat sensitive to tweakable conﬁguration
parameters (e.g., the amount of smoothing [11] or the number
of features [13]), tools’ mangled-wordlist attacks are highly
sensitive to their conﬁguration [8]. This conﬁguration encom-
passes what words and rules are included in the wordlist and
rule list, as well as how those words and rules are ordered.
What words and rules are included impacts whether passwords
would be guessed at all, and the ordering impacts how quickly
they will be guessed. In practice, attackers order rules based
on intuition or taste, and experienced attackers closely guard
personal lists they have developed and reﬁned over years of
cracking passwords [15]. The academic community gets small
glimpses into these lists, such as through example lists [16] re-
leased as part of password-cracking contests [17] or distributed
with the JtR and Hashcat software. Experienced attackers’
lists, however, outperform those released publicly [8].
We extend our analytical approach to design, implement,
and evaluate four optimization techniques that collectively en-
able data-driven conﬁguration of transformation-based attacks.
These optimizations make conﬁguration more principled and
less ad-hoc, and they also better align academic models with
passwords’ vulnerability to real-world attacks by experts using
non-public lists. These four applications optimize both the
order and the completeness of both rule lists and wordlists.
First, we present a principled way to order the rules in a
rule list. Applying this optimizer to six real-world rule lists, we
estimate the best possible guessing effectiveness of an attacker
who might have sorted the rules differently. We ﬁnd that the
optimal order is fairly consistent across sets of passwords
created under similar composition policies, but notably less
consistent otherwise. Interestingly, we ﬁnd that the order of
one well-known rule list (SpiderLabs [18]) can be substantially
improved, while another rule list (Megatron [19]) is already in
nearly optimal order. We then apply an analogous process to
optimizing the order of words in a wordlist, ﬁnding that doing
so generally overﬁts to data and worsens conﬁgurations.
Finally, we use our tools to analyze the completeness of
these lists in a principled way. We generate 15,085 JtR rules
and integrate them into existing rule lists. Doing so results in
passwords being guessed more quickly, and a larger fraction
of passwords being guessed overall. We then analyze the
completeness of our wordlists. We apply rule inversion to
identify words that would have generated target passwords
in evaluation sets had they been in wordlists, adding those
that appear most often. This method suggests semantically
meaningful words and short strings that collectively enable
guessing passwords that otherwise would not be guessed.
In sum, we introduce some of the ﬁrst techniques for rea-
soning analytically about the transformation-based password-
guessing attacks that actually occur in the wild. Our guess-
number calculator enables real-time, server-side password
checking, while our optimizations better align academic mod-
els with experts’ closely guarded conﬁgurations. To encourage
further scientiﬁc modeling, we are open-sourcing our code.1
II. RELATED WORK
We ﬁrst present prior work using password-cracking al-
gorithms as metrics of password strength. We then discuss
probabilistic models of passwords and ways of analyzing
them. Finally, we discuss the limited prior work analyzing
transformation-based password-cracking software. Our work
focuses on trawling password-guessing attacks. While pass-
word guessing on live servers can be rate-limited, large-scale
(ofﬂine) guessing remains an important threat for three rea-
sons: (1) humans often reuse credentials across accounts [20];
(2) rate-limiting is not always implemented correctly [21]; and
(3) guessing against encrypted ﬁles (where cryptographic keys
are derived from passwords) cannot be rate-limited without
proportionally increasing the cost of legitimate accesses.
A. Metrics of Password Strength
Entropy was historically used as a metric of password
strength. However, entropy is calculated for distributions, not
1https://github.com/UChicagoSUPERgroup/analytic-password-cracking
(cid:20)(cid:25)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:17 UTC from IEEE Xplore.  Restrictions apply. 
individual passwords, and ad-hoc attempts to estimate entropy
for single passwords using heuristics are often inaccurate [7],
[9], [22]. In response, Bonneau introduced partial guessing
metrics that model attackers who guess optimally based on
statistical properties of passwords in a target set [1]. While
such methods have advantages, they require huge amounts of
data and do not model actual attacks [8].
Many researchers thus model password strength by running
or simulating password cracking [2], [7], [9], [11], [23]–[29].
This metric, parameterized password guessability, considers
the strength of a given password against a trawling, non-
targeted attack to be proportional to the number of other
passwords that would be guessed before it [7]–[9]. We use
the term guess number to refer to the number of passwords
guessed before a given password in an attack.
B. Password-Cracking Algorithms
Large corpora of passwords are the best source of guesses.
However, attacks can make billions of guesses per second [5],
yet only a few billion real passwords have been leaked [30].
Thus, after guessing previously seen passwords in descend-
ing order of frequency, attackers turn to password-cracking
algorithms. Academic studies of password cracking focus on
the following probabilistic algorithms, which construct models
mapping passwords to probabilities based on training data:
1) Markov Models: In 2005, Narayanan and Shmatikov ﬁrst
proposed using Markov models of natural language to guess
passwords [31]. Researchers subsequently proposed adaptive
Markov Models trained on passwords [6] and mechanisms for
more efﬁciently enumerating guesses [12]. Ma et al. analyzed
Markov models’ ability to guess different password sets,
ﬁnding 6-gram Markov models with additive smoothing to
guess English-language passwords most effectively [11].
2) Probabilistic Context-Free Grammars:
In 2009, Weir
et al. proposed using a probabilistic context-free grammar
(PCFG) to guess passwords [14]. Training on sets of pass-
words, a PCFG models a password’s probability as the
probability of its character-class (or semantic [32]) structure
multiplied by the probabilities of its component strings.
3) Neural Networks:
In 2016, Melicher et al. proposed
recurrent neural networks composed of long short-term mem-
ory (LSTM) units to guess passwords [13]. Like Markov mod-
els, this approach calculates the probability of a subsequent
character in a candidate password based on the preceding
characters, yet does so using a multi-layer neural network.
C. Efﬁciently Analyzing Password-Cracking Algorithms
Because calculating a guess number requires running or
simulating a password-cracking algorithm, it is crucial to do so
efﬁciently. Researchers have developed efﬁcient techniques for
the three main probabilistic algorithms. Kelley et al. proposed
fast lookups of a password’s guess number by accepting a
time-space tradeoff, precomputing very large lookup tables of
probabilities of structures and terminal strings for PCFGs [7].
Dell’Amico et al. relied on Monte Carlo methods to esti-
mate the mapping between a given password’s probability
and the number of passwords with higher probability [10],
efﬁciently computing guess numbers for Markov models and
PCFGs. Melicher et al. extended this Monte Carlo approach
to neural networks, further leveraging a very small model
size to perform client-side password-strength evaluation [13].
Finally, Ma et al.
introduced probability-threshold graphs,
which can be computed efﬁciently and enable comparisons
of the relative strength of password sets [11]. This technique,
however, cannot be used directly to calculate guess numbers.
While these techniques enable efﬁcient analysis of prob-
abilistic models, real attackers rarely use such models [5].
Sadly, these techniques cannot be applied to the software at-
tackers actually use because such tools do not model probabil-
ities [15]. We ﬁll this gap by introducing analytical techniques
to reason efﬁciently about password-cracking software.
The password-cracking community has developed anec-
dotal and informal best practices for conﬁguring cracking
software [5], [15]. Little work, however, has attempted to
optimize, or even reason about, these tools in a principled
or scientiﬁc way. Chrysanthou presents a multi-stage attack
for Hashcat based on numerous empirical experiments on
one test set [33]. These experiments require enumerating
guesses and thus preclude efﬁcient analysis at scale. Absent
methods of reasoning about such tools, many researchers use
them in their default conﬁguration [9], [27], [34]–[36]. Ur et
al. [8] found these conﬁgurations to severely underestimate
passwords’ vulnerability to attacks. In Section VIII, we show
that Ur et al.’s approach itself underestimates vulnerability.
III. BACKGROUND
Best practice dictates storing passwords salted and hashed
using a computationally expensive hash function (e.g., scrypt,
Argon2), though fast hash functions (e.g., MD5) are widely
used [30]. When data breaches occur, attackers generate likely
candidates, hash them, and compare these hashes to those
revealed in the breach. A similar process occurs when cracking
password-protected ﬁles. In targeted attacks, which are out of
scope, the best sources for guesses are the user’s personal
information [37] and passwords associated with the same
username in prior breaches [20]. For the trawling attacks we
model, the best sources of guesses are any real passwords
that have been previously revealed in descending order of
frequency [8]. To date, over 5 billion accounts have been
breached [30]. Attacking fast hashes with GPUs, however,
takes under one second to make 5 billion guesses [15]. To gen-
erate vastly more guesses, attackers use data-driven approaches
perturbing leaked data. In this section, we explain JtR and
Hashcat’s transformation-based approaches. Our techniques
enable the ﬁrst principled analysis of such approaches.
A. Transformation-Based Mangled-Wordlist Attacks
Password-cracking software is most frequently and canoni-
cally used to perform what we term mangled-wordlist attacks
(“wordlist mode” in JtR and “rule-based attacks” in Hashcat).
Our techniques focus on these attacks, which take both a
wordlist and a rule list as input. Wordlists typically contain
(cid:20)(cid:25)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:17 UTC from IEEE Xplore.  Restrictions apply. 
passwords from data breaches, words from dictionaries, and
natural-language data (e.g., phrases) [15]. Rule lists contain
rules, which are compositions of individual transformations
(including conditional logic) written in tool-speciﬁc languages
that we detail in the following section.
In a mangled-wordlist attack, each word from the wordlist
is mangled, or transformed, as speciﬁed by each rule from the
rule list. Note that JtR and Hashcat order guesses differently.
JtR proceeds in rule-major order, applying a given rule from
the rule list to all words on the wordlist before proceeding
to the next rule. Hashcat conceptually follows word-major
order, applying many rules from the rule list to a given word
before proceeding to the next word to minimize disk I/O.
In practice, Hashcat follows a more complex and hardware-
dependent batching strategy (see Section IV-D) to further
improve performance. To guess a larger fraction of passwords
more quickly, both wordlists and rule lists should be ordered
in descending order of likelihood for generating a successful
guess. Because of the ordering, however, JtR’s effectiveness is
particularly sensitive to the ordering of the rule list, whereas
Hashcat’s is more sensitive to the order of the wordlist.
Both JtR and Hashcat come with preliminary rule lists,
sample conﬁguration ﬁles, and short sample wordlists. As they
gain experience, attackers augment and reﬁne their own lists.
From the results of contests [17] and real-world hacks [15],
these closely guarded personal lists are far more effective
than these preliminary lists, or even others released publicly.
Most rules contained in rule lists were initially created by
human experts using their intuition about how humans create
passwords by transforming natural language or by manually
examining patterns within released password sets [18]. There
have been some limited attempts to automate this process.
For example, Marechal proposed ordering rules based on
the number of passwords they cracked in a given evaluation
set [38], while Hashcat’s generated2.rule was created
by randomly generating rules and testing their effectiveness
cracking sets of passwords [8]. Taking a data-driven approach,
Marechal automatically generated potential prepend and ap-
pend rules by searching for words on the wordlist as substrings
of passwords in evaluation sets [38]. Kacherginsky built on this
work, using the Reverse Levenshtein Path between wordlist
entries and passwords in evaluation sets to generate rules [39].
The techniques we introduce provide a more generalized
framework for data-driven rule creation (Section X).
B. Language of Transformation Rules
Password-cracking software tools have well-deﬁned, well-
documented rule languages that enable rule creators to express
potential ways in which natural language or previously seen
passwords might have been transformed to create a password.
We use the term transformations to refer to the individual
commands that, when applied to a wordlist in a mangled-
wordlist attack, change an input word to generate a new
candidate guess or express conditional logic related to whether
or not to make that guess. Each individual transformation has a
unique function name. JtR supports 52 individual transforma-
tions [40], while Hashcat supports 55 individual transforma-
tions [41]. The two tools have 32 transformations in common.
Some transformations do not take parameters. For example,
C in both JtR and Hashcat lowercases the ﬁrst character of
the input and uppercases the rest. Other transformations take
parameters that are either characters or numerical (a position,
length, or count). For example, both tools’ sXY transformation
replaces all instances of the character X with the character Y.
Each rule in a rule list consists of one or more trans-
formations and is parsed left
to right. Table I gives our
categorization of the transformations each tool supports, in
addition to whether those transformations can be reasoned
about analytically (Section IV). As detailed below, some trans-
formations modify the input in ways that are straightforward
to describe, and many (but not all) of these are straightforward
to reason about. Some transformations express logic related to
rejection (choosing not to make a guess if certain conditions
are not met), and much of the complexity in the design of
our analytical techniques derives from how this conditional
rejection logic interacts with other transformations in a rule.
Some example JtR rules follow. Az"[0-9]" appends a
digit to the end of the input word, thus making ten guesses
(one per digit) for each input word. Slightly more complex,
/a saA >5 /?d /?a immediately rejects the guess unless
the input word contains “a,” and otherwise replaces every
“a” with “A.” It
then rejects the guess unless it contains
more than 5 characters, as well as both a digit and a letter
(uppercase or lowercase). Accounting for parameterizations
(e.g., which characters are being substituted), there are over
15,000 JtR valid rules containing only a single transformation
(see Section X). This increases exponentially with length; there
are hundreds of millions of possible length-2 rules.
1) Straightforward Transformations: The transformations
most straightforward to describe directly modify some aspect
of the input word. These include transformations that shift the
case of letters in the input word (e.g., l lowercases the word),
insert or delete either a character or a set of characters (e.g., $c
appends “c” while D6 deletes the 7th character, zero-indexed).
Other transformations substitute characters (e.g., R shifts each
character one key right on a QWERTY keyboard) or rearranges
them (e.g., r reverses the input). Other JtR transformations use
heuristics to simulate English grammar rules for pluralization
and putting words into either the past tense or gerund form.
2) Rejection Transformations: To avoid making guesses
that have not modiﬁed the input word, that (after transfor-
mation) do not comply with a password-composition policy,
or that are otherwise redundant, both tools include rejection
transformations (not making a guess unless conditions are