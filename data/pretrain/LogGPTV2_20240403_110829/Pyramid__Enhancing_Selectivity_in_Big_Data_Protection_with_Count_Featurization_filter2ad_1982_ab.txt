### Data Management and Security at MediaCo

MediaCo employs a robust data management strategy to ensure the security and privacy of user data. All raw observations are stored in an encrypted repository, with read access disabled by default. Access to this repository is granted temporarily and on a case-by-case basis to engineers who can demonstrate a legitimate need for statistics beyond those maintained by Pyramid, the company's data management system.

In addition to targeting and personalization workloads, MediaCo handles other non-ML workloads such as business analytics, trend studies, and forensics. For these tasks, count featurization may not be applicable. Therefore, MediaCo provides direct access to the raw data store for engineers managing these workloads, while isolating their computational resources from the targeting and personalization teams. This configuration ensures that access to collected data is minimized and granted only when necessary.

### Threat Model and Guarantees

Pyramid, MediaCo's data management system, offers several guarantees to protect user data, similar to forward secrecy. These guarantees include:

1. **Hiding Past Observations**: Any observations preceding the "hot window" (the period during which data is actively used) will be hidden from the attacker.
2. **Individual Observation Hiding**: During the retention period, individual observations are protected, and in bulk past the retention period, they are phased out of the historical statistics store and protected separately.
3. **Limited Access to Historical Data**: Engineers are granted access to historical raw data only in exceptional circumstances.

With these guarantees, MediaCo can negotiate lower data loss insurance premiums and gain public relations benefits for its efforts to protect user data.

### Threat Model Details

**Figure 1: Threat Model**

- **Tattack**: The time the attack starts.
- **Tstop_attack**: The time the attack is eradicated.
- **Δhot**: The length of the hot window.
- **Δretention**: The company’s data retention period.

#### Assumptions:
- The attack has a well-defined start time (Tattack) and end time (Tstop_attack).
- Adversaries do not have access to the system before Tattack or after Tstop_attack.
- The attacker's goal is to exfiltrate individual user activity observations.
- Historical raw data is assumed to be protected through independent means and not compromised in this attack.

#### Types of Adversaries:
- **External Adversary**: A hacker who breaks into the company’s infrastructure to find valuable data.
- **Internal Adversary**: A privacy-transgressing employee who decides to look into past actions of a family member or friend.

#### Data Representations:
- **Hot Data Store**: Contains plaintext observations and is not protected.
- **Historical Statistics Store**: Contains differentially private count tables, protecting individual records.
- **Trained Models**: Models are retrained when observations are removed from the hot data store, limiting what the attacker can learn.

### Protection Levels Provided by Pyramid

1. **P1 - No Protection for Present or Future Observations**:
   - Observations in the hot data store when the attack begins and any added during the attack receive no protection.
   - Observations between (Tattack − Δhot) and Tstop_attack are unprotected.

2. **P2 - Individual Observation Protection for Retention Period**:
   - Statistics about observations are retained in differentially private count tables for a predefined retention period (Δretention).
   - The attacker can learn broad statistics but cannot confidently determine if a specific observation is present.

3. **P3 - Bulk Protection Past Retention Period**:
   - Observations older than Tattack − Δretention are phased out of the historical statistics store and protected separately.

### Design Requirements

Given the threat model, the design requirements for Pyramid are:

1. **R1 - Limit Widely Accessible Data**:
   - The size of the hot data window must be limited to minimize exposure, while still meeting application-level requirements like model accuracy.

2. **R2 - Avoid Accesses to Historical Raw Data**:
   - Pyramid must handle as many current and evolving workload needs as possible to limit access to the historical raw data.

3. **R3 - Support Retention Policies**:
   - Pyramid must enforce the company’s data retention policies. Securely deleting data is considered the strongest form of protection.

4. **R4 - Limit Impact on Accuracy, Performance, and Scalability**:
   - The functional properties of applications and models running on Pyramid should be preserved.

### Pyramid Architecture

Pyramid is a selective data management architecture that leverages count-based featurization to meet the design requirements.

#### Background on Count-Based Featurization

Count-based featurization is a popular technique for handling high-cardinality categorical variables. Instead of using the value of a categorical variable directly, it featurizes the data with the number of times a particular feature value was observed with each label and the conditional probability of the label given the feature value. This approach significantly reduces dimensionality, making it feasible to apply advanced nonlinear models like neural networks, boosted trees, and random forests.

#### Architectural Components

**Figure 2: Pyramid’s Architecture**

Pyramid manages collected data (observations) on behalf of application models hosted by a model management system, such as Velox, built on Spark. Velox facilitates ML-based targeting and personalization services by implementing three functions:

1. **Fast Incorporation of New Observations**:
   - New observations are quickly, but incompletely, incorporated into models registered with Velox.
   
2. **Low-Latency Prediction Serving**:
   - Predictions are served with low latency from these models.
   
3. **Periodic Retraining**:
   - Models are periodically retrained to maintain accuracy.

By combining succinct data representation with powerful learning models, Pyramid enables substantial reduction of training data with minimal loss in predictive performance, thereby limiting data exposure and enhancing security.