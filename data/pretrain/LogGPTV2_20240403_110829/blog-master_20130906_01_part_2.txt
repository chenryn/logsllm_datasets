patching file src/backend/catalog/indexing.c  
patching file src/backend/commands/constraint.c  
patching file src/backend/commands/copy.c  
patching file src/backend/executor/execUtils.c  
patching file src/backend/executor/nodeModifyTable.c  
patching file src/backend/nodes/copyfuncs.c  
patching file src/backend/nodes/equalfuncs.c  
patching file src/backend/nodes/nodeFuncs.c  
patching file src/backend/nodes/outfuncs.c  
patching file src/backend/nodes/readfuncs.c  
patching file src/backend/optimizer/plan/createplan.c  
patching file src/backend/optimizer/plan/planner.c  
patching file src/backend/parser/analyze.c  
patching file src/backend/parser/gram.y  
patching file src/include/access/genam.h  
patching file src/include/access/nbtree.h  
patching file src/include/catalog/catversion.h  
patching file src/include/catalog/pg_am.h  
patching file src/include/catalog/pg_proc.h  
patching file src/include/executor/executor.h  
patching file src/include/nodes/execnodes.h  
patching file src/include/nodes/nodes.h  
patching file src/include/nodes/parsenodes.h  
patching file src/include/nodes/plannodes.h  
patching file src/include/optimizer/planmain.h  
patching file src/include/parser/kwlist.h  
patching file src/include/utils/rel.h  
patching file src/test/isolation/expected/insert-duplicate-key.out  
patching file src/test/isolation/isolation_schedule  
patching file src/test/isolation/specs/insert-duplicate-key.spec  
gmake  
gmake install  
```  
测试 :   
```  
digoal=# create table t(id int primary key, info text unique, crt_time timestamp);  
CREATE TABLE  
digoal=# \d+ t  
                                      Table "public.t"  
  Column  |            Type             | Modifiers | Storage  | Stats target | Description   
----------+-----------------------------+-----------+----------+--------------+-------------  
 id       | integer                     | not null  | plain    |              |   
 info     | text                        |           | extended |              |   
 crt_time | timestamp without time zone |           | plain    |              |   
Indexes:  
    "t_pkey" PRIMARY KEY, btree (id)  
    "t_info_key" UNIQUE CONSTRAINT, btree (info)  
Has OIDs: no  
digoal=# insert into t values (1,'a',now());  
INSERT 0 1  
digoal=# insert into t values (1,'a',now()) on duplicate key ignore;  
INSERT 0 0  
digoal=# insert into t values (2,'b',now());  
INSERT 0 1  
```  
使用returning rejects *可以返回未被插入的行.  
```  
digoal=# insert into t values (1,'a',now()) on duplicate key ignore returning rejects *;  
 id | info |          crt_time            
----+------+----------------------------  
  1 | a    | 2013-09-06 09:03:18.962054  
(1 row)  
INSERT 0 0  
digoal=# select ctid,* from t;  
 ctid  | id | info |          crt_time            
-------+----+------+----------------------------  
 (0,1) |  1 | a    | 2013-09-06 09:01:41.58451  
 (0,2) |  2 | b    | 2013-09-06 09:02:10.369413  
(2 rows)  
```  
使用on duplicate key ignore 后, 插入违反唯一约束的话, 记录不会被插入, 同时也不会消耗实际的item.  
如果不使用on duplicate key ignore, 会消耗item. 例如.  
```  
digoal=# insert into t values (1,'a',now());  
ERROR:  duplicate key value violates unique constraint "t_pkey"  
DETAIL:  Key (id)=(1) already exists.  
digoal=# insert into t values (1,'a',now());  
ERROR:  duplicate key value violates unique constraint "t_pkey"  
DETAIL:  Key (id)=(1) already exists.  
digoal=# insert into t values (1,'a',now());  
ERROR:  duplicate key value violates unique constraint "t_pkey"  
DETAIL:  Key (id)=(1) already exists.  
```  
以上SQL插入报错了, 同时将消耗3条item.  
```  
digoal=# insert into t values (3,'c',now());  
INSERT 0 1  
digoal=# select ctid,* from t;  
 ctid  | id | info |          crt_time            
-------+----+------+----------------------------  
 (0,1) |  1 | a    | 2013-09-06 09:01:41.58451  
 (0,2) |  2 | b    | 2013-09-06 09:02:10.369413  
 (0,6) |  3 | c    | 2013-09-06 09:04:13.720437  
(3 rows)  
```  
使用on duplicate key, 插入时如果遇到已有的key, 锁和不使用on duplicate key情形一样.  
不使用on duplicate key ignore  
```  
session a:  
digoal=# begin;  
BEGIN  
digoal=# insert into t values (4,'d',now());  
INSERT 0 1  
session b:  
digoal=# begin;  
BEGIN  
digoal=# insert into t values (4,'d',now());  
-- 等待中  
使用on duplicate key ignore, 同样处于等待.  
session b:  
digoal=# begin;  
BEGIN  
digoal=# insert into t values (4,'d',now()) on duplicate key ignore;  
```  
从锁信息中可以看到, session b 在等待session a的事务锁.  
```  
digoal=# select query,waiting from pg_stat_activity;  
                            query                            | waiting   
-------------------------------------------------------------+---------  
 insert into t values (4,'d',now());                         | f  
 insert into t values (4,'d',now()) on duplicate key ignore; | t  
 select query,waiting from pg_stat_activity;                 | f  
(3 rows)  
digoal=# select query,waiting,pid from pg_stat_activity;  
                            query                            | waiting |  pid    
-------------------------------------------------------------+---------+-------  
 insert into t values (4,'d',now());                         | f       | 30999  
 insert into t values (4,'d',now()) on duplicate key ignore; | t       | 24139  
 select query,waiting,pid from pg_stat_activity;             | f       | 23361  
(3 rows)  
digoal=# select * from pg_locks where pid=24139;  
   locktype    | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtransaction |  
  pid  |       mode       | granted | fastpath   
---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+--------------------+  
-------+------------------+---------+----------  
 relation      |    16384 |    16426 |      |       |            |               |         |       |          | 3/3864             |  
 24139 | RowExclusiveLock | t       | t  
 relation      |    16384 |    16424 |      |       |            |               |         |       |          | 3/3864             |  
 24139 | RowExclusiveLock | t       | t  
 relation      |    16384 |    16418 |      |       |            |               |         |       |          | 3/3864             |  
 24139 | RowExclusiveLock | t       | t  
 virtualxid    |          |          |      |       | 3/3864     |               |         |       |          | 3/3864             |  
 24139 | ExclusiveLock    | t       | t  
 transactionid |          |          |      |       |            |          1712 |         |       |          | 3/3864             |  
 24139 | ShareLock        | f       | f  
(5 rows)  
digoal=# select * from pg_locks where pid=30999;  
   locktype    | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtransaction |  
  pid  |       mode       | granted | fastpath   
---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+--------------------+  
-------+------------------+---------+----------  
 relation      |    16384 |    16418 |      |       |            |               |         |       |          | 2/1217             |  
 30999 | RowExclusiveLock | t       | t  
 virtualxid    |          |          |      |       | 2/1217     |               |         |       |          | 2/1217             |  
 30999 | ExclusiveLock    | t       | t  
 transactionid |          |          |      |       |            |          1712 |         |       |          | 2/1217             |  
 30999 | ExclusiveLock    | t       | f  
(3 rows)  
```  
## 参考  
1\. http://dev.mysql.com/doc/refman/5.5/en/replace.html  
2\. https://commitfest.postgresql.org/action/patch_view?id=1201  
3\. http://dev.mysql.com/doc/refman/5.6/en/insert-on-duplicate.html  
4\. https://commitfest.postgresql.org/3/35/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")