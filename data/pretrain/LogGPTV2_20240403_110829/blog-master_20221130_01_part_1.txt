## PolarDB for PostgreSQL 采用iprange和SPGiST index 实现超光速 - 全球化业务根据来源IP智能DNS路由就近分配本地机房访问, 提升用户体验   
### 作者              
digoal              
### 日期              
2022-11-30             
### 标签              
PostgreSQL , PolarDB , 全国业务 , 多机房 , 就近访问 , 智能DNS            
----              
## 背景    
[《如何获得IP地址对应的地理信息库, 实现智能DNS解析? 就近路由提升全球化部署业务的访问性能》](../202211/20221124_09.md)    
上一篇信息提到了如何获取IP地址段的地理信息库, 本篇信息将使用PolarDB for PostgreSQL来加速根据来源IP快速找到对应的IP地址段, 将用到PolarDB for PostgreSQL的SPGiST索引和inet数据类型.   
相比于把IP地址段存储为2个int8字段作between and的匹配, SPGiST索引和inet数据类型至少可以提升20倍性能.  
https://www.postgresql.org/docs/15/functions-net.html  
```  
inet >>= inet → boolean  
Does subnet contain or equal subnet?  
inet '192.168.1/24' >>= inet '192.168.1/24' → t  
```  
## 详情  
1、将数据导入PolarDB for PostgreSQL, 使用inet类型存储地址段, 并创建spgist索引.   
```  
create table ip2geo (id serial primary key, ip inet, province text, city text);  
copy ip2geo(ip,province,city) from '/Users/digoal/c.csv' (format csv);  
COPY 8617
create index idx_1 on ip2geo using spgist (ip);  
```  
```  
postgres=# select ip,host(ip), masklen(ip) from ip2geo limit 10;  
     ip      |   host   | masklen   
-------------+----------+---------  
 1.0.1.0/24  | 1.0.1.0  |      24  
 1.0.2.0/23  | 1.0.2.0  |      23  
 1.0.8.0/21  | 1.0.8.0  |      21  
 1.0.32.0/19 | 1.0.32.0 |      19  
 1.1.0.0/24  | 1.1.0.0  |      24  
 1.1.2.0/23  | 1.1.2.0  |      23  
 1.1.4.0/22  | 1.1.4.0  |      22  
 1.1.8.0/24  | 1.1.8.0  |      24  
 1.1.9.0/24  | 1.1.9.0  |      24  
 1.1.10.0/23 | 1.1.10.0 |      23  
(10 rows)  
```  
2、IP地址段包含查询例子  
```  
postgres=# select * FROM ip2geo where  ip >>= '1.88.0.10/32' ;  
 id |     ip      | province |   city   
----+-------------+----------+----------
 53 | 1.88.0.0/14 | 北京市   | 歌华宽带
(1 row)
postgres=# select * FROM ip2geo where  ip >>= '1.88.0.0/24' ; 
 id |     ip      | province |   city   
----+-------------+----------+----------
 53 | 1.88.0.0/14 | 北京市   | 歌华宽带
(1 row)
```  
3、对比索引扫描的性能提升, 相比全表扫描性能相差25倍:  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * FROM ip2geo where  ip >>= '1.88.0.0/24' ;  
                                                      QUERY PLAN                                                        
----------------------------------------------------------------------------------------------------------------------  
 Index Scan using idx_1 on public.ip2geo  (cost=0.15..2.37 rows=1 width=35) (actual time=0.019..0.020 rows=1 loops=1)
   Output: id, ip, province, city
   Index Cond: (ip2geo.ip >>= '1.88.0.0/24'::inet)
   Buffers: shared hit=4
 Planning Time: 0.057 ms
 Execution Time: 0.031 ms
(6 rows)  
postgres=# set enable_indexscan=off;  
SET  
postgres=# set enable_bitmapscan=off;  
SET  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * FROM ip2geo where  ip >>= '1.88.0.0/24' ;  
                                                QUERY PLAN                                                  
----------------------------------------------------------------------------------------------------------  
 Seq Scan on public.ip2geo  (cost=0.00..175.71 rows=1 width=35) (actual time=0.013..0.783 rows=1 loops=1)
   Output: id, ip, province, city
   Filter: (ip2geo.ip >>= '1.88.0.0/24'::inet)
   Rows Removed by Filter: 8616
   Buffers: shared hit=68
 Planning Time: 0.056 ms
 Execution Time: 0.793 ms 
(7 rows)  
```  
4、压力测试方法, 随机从地址库中取一条记录并生成这个地址段内的随机IP地址.  
```  
create or replace function getipaddr(int default ceil(8617*random())) returns inet as $$  
  select ip + (floor(random()*(2^(32-masklen(ip)))))::int8 from ip2geo where id=$1;  
$$ language sql strict immutable;  
```  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * FROM ip2geo where  ip >>=  getipaddr(); 
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Seq Scan on public.ip2geo  (cost=0.00..175.71 rows=1 width=35) (actual time=0.098..0.955 rows=1 loops=1)
   Output: id, ip, province, city
   Filter: (ip2geo.ip >>= '43.243.11.49/22'::inet)
   Rows Removed by Filter: 8616
   Buffers: shared hit=68
 Planning:
   Buffers: shared hit=14
 Planning Time: 0.370 ms
 Execution Time: 0.962 ms
(9 rows)
postgres=# explain (analyze,verbose,timing,costs,buffers) select * FROM ip2geo where  ip >>=  getipaddr();  
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Seq Scan on public.ip2geo  (cost=0.00..175.71 rows=1 width=35) (actual time=0.087..1.285 rows=1 loops=1)
   Output: id, ip, province, city
   Filter: (ip2geo.ip >>= '43.236.136.57/22'::inet)
   Rows Removed by Filter: 8616
   Buffers: shared hit=68
 Planning:
   Buffers: shared hit=1
 Planning Time: 0.244 ms
 Execution Time: 1.293 ms
(9 rows)
postgres=# explain (analyze,verbose,timing,costs,buffers) select * FROM ip2geo where  ip >>=  getipaddr(); 
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Seq Scan on public.ip2geo  (cost=0.00..175.71 rows=1 width=35) (actual time=0.780..0.890 rows=1 loops=1)
   Output: id, ip, province, city
   Filter: (ip2geo.ip >>= '203.19.72.14/24'::inet)
   Rows Removed by Filter: 8616
   Buffers: shared hit=68
 Planning:
   Buffers: shared hit=1
 Planning Time: 0.199 ms
 Execution Time: 0.899 ms
(9 rows)
```  
5、使用prepared statement, 随机地址段包含匹配查询  
```  
alter function getipaddr(int) volatile;  
create or replace function dyn_pre() returns setof ip2geo as $$  
declare  
  v inet;   
begin  
  v := getipaddr();  
  return query execute format('execute p(%L)', v);  
  exception when others then  
    execute format('prepare p(inet) as select * from ip2geo where ip >>= $1');  
    return query execute format('execute p(%L)', v);  
end;  
$$ language plpgsql strict;  
```  
```  
postgres=# select dyn_pre();  
               dyn_pre                 
-------------------------------------  
 (43.227.192.0/22,浙江省杭州市,电信)  
(1 row)  
postgres=# select dyn_pre();  
           dyn_pre              
------------------------------  
 (103.25.64.0/22,上海市,电信)  
(1 row)  
postgres=# select dyn_pre();  
         dyn_pre           
-------------------------  
 (45.119.232.0/22,中国,)  
(1 row)  
postgres=# select dyn_pre();  
               dyn_pre                  
--------------------------------------  
 (103.205.252.0/22,江苏省宿迁市,联通)  
(1 row)  
postgres=# select dyn_pre();  
         dyn_pre           
-------------------------  
 (103.87.4.0/22,北京市,)  
(1 row)  
```  
6、压力测试  
```  
vi test.sql  
select dyn_pre();  
pgbench -M simple -n -r -P 1 -f ./test.sql -c 12 -j 12 -T 120  
```  
除去获取随机IP的时间, 在2018款macbook pro i5的机器上, 实际约8万qps.  
PolarDB for PostgreSQL 作为智能DNS的数据搜索引擎, 节省几十倍的成本, 同时提升终端用户就近访问的体验, 特别适合例如“社交、游戏、多媒体、云盘、多地办公等等全球化或者全国部署业务”.  
## 为什么spgist索引比btree combine 2字段索引范围搜索更高效?    
spgist索引不管搜索什么范围, 搜索到目标数据基本上只需要扫描几个数据块.    
而使用btree, 由于是2个字段符合搜索, 必然的会出现数据在驱动列大范围的匹配到后, 再通过第二个字段二次过滤的情况. 扫描的数据更多了, 效率立马就下降了.     
测试过程:    
1、创建inet转int8的函数    
```    
create or replace function inet2int8 (inet) returns int8 as $$    
  select (v[1]::bit(8)||v[2]::bit(8)||v[3]::bit(8)||v[4]::bit(8))::bit(32)::int8 from ( values ((regexp_split_to_array(host($1),'\.'))::int[]) ) t (v);    
$$ language sql strict;    
postgres=# select inet2int8('203.88.32.0');    
 inet2int8      
------------    
 3411550208    
(1 row)    
```    
2、将ip2geo拆成int8存储    
```    
create table ip2int8geo (id serial primary key, f int8,t int8, province text, city text);    