off, temporarily removing the peer as a routing option.
At any given instant, some peers are responsible for larger por-
tions of the ID space than others. FOAF routing results in requests
being distributed more proportionally to peers, rather than simply
reflective of the amount of space a peer occupies on the circle. Over
time, as peers come and go, the distribution becomes more equal.
Hops-to-Live. Freenet uses a hops-to-live (HTL) counter to prevent
block requests from propagating indefinitely. Generally, the HTL
begins at 18 and is decremented by each relay node until it is zero,
in which case a not-found error is returned (if downloading).
A requester would be revealed if Freenet were to always start
with an HTL of 18. To anonymize the requester, a requesting node
will randomly choose, with probability 0.5, whether to use 18 or 17
before originating a request to a peer. Once an initial HTL value is
selected, it is permanent for all originating requests sent to that peer.
The decision also applies when relaying requests received with an
HTL of 18. Insert requests have some variations in behavior (see
§4.4). Regardless, the HTL does not reveal the originator. For clarity,
Date
December 2016 – January 2017
December 2017 – January 2018
December 2018 – January 2019
December 2019 – January 2020
Percent
34.5%
38.7%
31.8%
30.6%
Table 1: Requests related to CSAM. HTL 18 and 17 only.
we describe requests with an HTL of 18 or 17 as potentially being
from a requester, and 16 or below as not being from a requester.
However, our technique would work even if other initial HTL values
were selected by a user.
Data and FEC Blocks. The number of content blocks Freenet in-
serts into the network is considerably more than what one would
expect by simply dividing the file’s data into 32KB blocks. In addi-
tion to the data blocks, Freenet uses Reed-Solomon codes to generate
forward error correction (FEC) blocks. These FEC blocks provide
redundancy and the ability to recreate missing blocks. Freenet sub-
divides a file into segments. For each n data blocks in a segment,
Freenet inserts n + 1 FEC blocks. A segment may not reference
more than 256 total blocks. To recreate the file data represented by
a segment, Freenet must successfully fetch n content blocks, using
any combination of data or FEC blocks. If Freenet fails to fetch a
block, it will randomly select another block from the segment to
fetch. Freenet can fail on half of the blocks, yet still succeed in its
download.
Freenet attempts to increase the availability of recently requested
files. Once a segment has been reassembled, the requesting node
will “heal” the file by regenerating then inserting each block in the
segment that it had requested but failed to fetch. To further increase
block availability, a node that is downloading blocks may randomly
re-insert a fetched block, with each block having a 0.5% probability
of being selected for re-insertion.
3 MEASUREMENT OF CSAM ON FREENET
We harvested more than 124,000 manifest keys posted to freesites
and Frost boards explicitly dedicated to child exploitation, and
Freenet was queried for the block keys associated with those mani-
fests, resulting in the collection of more than 300 million distinct
keys. We did not download the files.
A file’s SHA1 hash is often available as metadata in the file’s
manifest block. We were able to identify the SHA1 file hashes for
approximately 68,000 of the harvested manifests. Law enforcement
confirmed that about 22,000 of the SHA1 hashes were known to
them as CSAM, and approximately 14,000 of those were identified
as being severe. Severe CSAM is typically defined to either have very
young victims or involve violent acts against the victims. We believe
that the files whose SHA1 values were not known stand a good
chance of being CSAM; this was confirmed by law enforcement
visually inspecting some of the unknown files.
Measurements. We operated a minimum of ten Freenet opennet
nodes from November 2016 through April 2020, inclusive. Past
work has measured Freenet extensively, including active probes
from Roos et al. [39, 43]. We did not probe the network or modify
the software except to log friend-of-a-friend routing information
sent to our nodes, and to log requests sent to our nodes for keys
that matched those that we harvested. We also logged a count of
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1499the block requests sent to our nodes having an HTL of 18 or 17,
regardless of whether the keys had been identified.
During December 2019 and January 2020, 31% of such requests
were for those keys that we harvested; see Table 1. A consistently
high percentage of Freenet requests are related to these manifests:
we observed 32% during the same period in the year before, and 39%
and 35% for the two years prior. Over 250 million block requests
were observed during each period. As noted, law enforcement iden-
tified more than 22,000 files in these 124,000 manifests, and though
some remain unconfirmed, it is also unlikely that we have har-
vested all requested CSAM manifests. In sum, it is reasonable to
assume that a minimum of 30% of Freenet’s traffic is related to child
exploitation material.
We also seek to estimate the number of distinct Freenet users.
Such estimates are difficult to come by, as prior longitudinal studies
have been discontinued [44]. In September 2019, we began running
an additional 20 opennet nodes to perform our upload experiments.
These nodes were modified to log: (i) Freenet neighbor and FOAF lo-
cations reported by their peers, (ii) data and insert requests received
from their neighbors, and (iii) data and insert requests initiated or
relayed by those nodes. During March 2020, 16,971 distinct opennet
peer locations were visible to our nodes, with an average of 4,607
distinct locations per day. Tor and BitTorrent are reported to have
many more users [27, 45], but because Freenet is heavily used for
CSAM trafficking, there would be motivation for law enforcement
to focus investigations on Freenet.
4 INVESTIGATIVE TECHNIQUE
The goal of the investigator is to identify whether a neighbor is
the requester node, i.e. the downloader or uploader of a file, or is
instead a relayer node, i.e. forwarding requests from others. In this
section, we develop an investigative model to distinguish between
the two scenarios. The HTL of a request, whether 18 or 17, does not
indicate that the sender is a requester or relayer. Freenet’s source
code makes this assertion,2 but it was never proven formally; we
provide a proof below. Thus, another approach is required.
Our method is based on a simple observation. In our model, an
observer who is one of д neighbors of the actual requester can
expect to receive about 1
of all requests, due to FOAF routing.
д
Block locations, derived from a hash, are modeled as being evenly
distributed on the circle. If the observer is actually two hops away
from the original requester, then only about 1
of the requests
дh
will be received, assuming the requester has h neighbors. Since
the manifest key is overt, an observing peer can determine the
number of insert or download requests expected. Accordingly, given
the number of requests received, the observer can quantify the
probability of whether the requests were relayed by or originated
with its neighbor.
4.1 Assumptions and Model
We assume the investigator has collected manifest keys for a limited
set of files of interest, which are, for example, openly published on
Freenet freesites and forums related to CSAM. Freenet provides a
2https://github.com/freenet/fred/blob/build01475/src/freenet/node/PeerNode.java#
L1603
mechanism to harvest block hashes given a manifest key. Keys can
be logged before or after manifests are published publicly.
For simplicity, we assume the investigator operates a single peer
in the Freenet network, which we call the observer. Running multi-
ple independent nodes is possible and efficiently allows for parallel
investigations. The observer is strictly passive: it participates in
the network by forwarding requests as usual, but also logs the
SHA256 hash keys of any request it sees, together with the HTL,
location of the sending peer, and the count of that peer’s neighbors.
Surprisingly, these are all the steps required.
4.2 Description
For each manifest key from the files of interest, the investigator
fetches the manifest blocks and obtains the keys of each file’s con-
tent blocks. The observer node passively logs insert and download
block requests from its peers. The observer can easily map the
requests to the files of interest by the key values. Requests that
don’t map are not retained. The observer then counts the requests
received on a per-peer, per-HTL, and per-file basis, for all known
files of interest. Based on the counts, the observer can calculate the
likelihood that a given peer is either:
• the actual requester, who is requesting to download or upload
• a relayer for the actual requester.
blocks for a specific file; or,
We call the observer’s peer who sends the requests the subject, as
they may be in either role. Figure 1 illustrates the two scenarios.
• Let H1 be the hypothesis that the subject is the actual re-
• Let H2 be the hypothesis that the subject is a relayer and a
quester.
peer of the actual requester.
Assuming the default maximum HTL of 18, requests that originated
at the subject would only have an HTL of 18 or 17; we do not need to
count requests with lower HTLs. For the remainder of this section,
we consider only requests with HTLs of 18 or 17.
HTLs of 18 and 17 provide equivalent information. Freenet’s
original design [1] used a flawed anonymity mechanism. More
than a decade ago, Freenet’s codebase introduced a new approach:
requests with the maximum HTL value (of 18) are probabilistically
decremented [36]. Does receiving requests with an HTL of 18 versus
17 affect the probability that the subject is the original requester?
Let Pr(H1|Y) and Pr(H2|Y) denote the probability that H1 or H2
are true, respectively, given a run of requests with HTL of Y, where
Y = 18 or Y = 17.
THEOREM 1: The probability that hypothesis H1 is true is no
different when a run is composed of requests with HTLs of 18 or
17, regardless of the distance of the requester from the observer,
if the probability is 1/2 that an 18 is decremented; i.e.,
Pr(H1 is true |Y = 17) = Pr(H1 is true |Y = 18).
The proof appears in Appendix A. Theorem 1 implies a different ap-
proach is required to distinguish a relayer from an actual requester.
Our approach. The intuition for the investigative technique is
now easy to describe. For large files, the actual requester will make
a large number of requests for blocks from the manifest, and those
requests will be spread randomly among its peers. An observer
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1500relayer and a peer one or more hops from the actual requester, we
let p = 1
. (In cases where the actual requester is two or more
дh
hops away, p could be modeled with a smaller value; however, this
approach is sufficient to distinguish the requester.)
As stated above, the technique assumes that the subject is either
the actual requester or a relayer directly connected to him. Using
a Bayesian framework [46], this assumption can be modeled as
follows. We seek the probability of H1 given that the observer has
received X = r requests.
Pr(H1|X=r) = Pr(H1)Pr(X=r|H1)
Pr(X=r)
Pr(H1)Pr(X=r|H1)
=
Pr(H1)Pr(X=r|H1) + Pr(H2)Pr(X=r|H2) .
Pr(X = r|H1) = Binom(r;T , 1/д) ,
(1)
We know that
and similarly,
Pr(X = r|H2) = Binom(r;T , 1/дh) .
To set the priors Pr(H1) and Pr(H2), we use the number of peers
of the subject as a guide. Assuming that among the subject or
his peers, each is equally likely to be the actual requester, we get
д+1 and Pr(H2) = д
Pr(H1) = 1
д+1; we discuss our choice of priors
further in Section 4.5. Altogether, we have
д+1 Binom(r;T , 1/д)
1
Pr(H1|X = r) =
д+1 Binom(r;T , 1/д) + д
1
д+1 Binom(r;T , 1/дh) ,
where Pr(H2|X = r) is the complement of the above. Eq. 2 repre-
sents a standard hypothesis test [46]. One could compare Pr(H1|X =
r) to Pr(H2|X = r) and select the hypothesis with the greater prob-
ability. However, our goal is to reduce false positives at the expense
of false negatives, and we use a higher standard of selecting H1
only if Pr(H1|X = r) > t for some threshold 1/2 < t < 1.
This model is straightforward, but there are further considera-
tions. Presently, we address how we modify the values above to
account for Freenet’s real operation. Throughout this paper, we con-
sider false positives. For example, we evaluate the summed traffic
from multiple concurrent relayers in Section 6.2.
(2)
4.4 Modifications for Real Freenet Traffic
Recall that Eq. 2 estimates the probability that a given subject is
a requester on the basis of: д, the number of peers of the subject,
which we can observe directly; r, the (possibly adjusted) number of
requests observed; h, the number of peers of a possible third-party
downloader, which we estimate; and T , the total number of requests
made by the requester, which we also estimate. In this section, we
describe how we set these values given Freenet’s real operation.
Defining rrr. To apply Eq. 2 to real data, the investigator’s node
observes and logs requests that are sent to it. Requests for keys
can be compared to a table of keys harvested from manifests. Thus,
any keys in the table can be mapped to a specific file. Requests
contain the key, an HTL, the sender’s IP address and Freenet lo-
cation, and the request type (retrieve or insert). The observer also
logs a timestamp and the number of peers of the sender. The log is
then analyzed to identify runs of requests. To reduce potential false
positives, we define a run to be a collection of observations where:
Figure 1: The observer’s goal is to distinguish between these
two scenarios.
who is a peer of the actual requester will expect to see a certain
number of those requests, with some variance. On the other hand,
if the observer is a peer of a relayer, it will see only a fraction of