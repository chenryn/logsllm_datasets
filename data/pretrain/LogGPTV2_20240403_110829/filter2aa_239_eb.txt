      public MainWindow()
      {
        InitializeComponent();
      }
      private string _remoteHost = "localhost";
      public string RemoteHost
      {
        get { return _remoteHost; }
        set { SetProperty(ref _remoteHost, value); }
      }
      private int _serverPort = 8800;
      public int ServerPort
      {
        get { return _serverPort; }
        set { SetProperty(ref _serverPort, value); }
      }
      private string _sessionId;
      public string SessionId
      {
        get { return _sessionId; }
        set { SetProperty(ref _sessionId, value); }
      }
      private CustomProtocolCommand _activeCommand;
      public CustomProtocolCommand ActiveCommand
      {
        get { return _activeCommand; }
        set { SetProperty(ref _activeCommand, value); }
      }
      private string _log;
      public string Log
      {
        get { return _log; }
        set { SetProperty(ref _log, value); }
      }
      private string _status;
      public string Status
      {
        get { return _status; }
        set { SetProperty(ref _status, value); }
      }
      //...
    }
当用户单击Connect按钮时，调用方法OnConnect。建立到TCP服务器的连接，调用
TcpClient类的ConnectAsync方法。如果连接处于失效模式，且再次调用OnConnect方法，
就抛出一个SocketException异常，其中ErrorCode设置为0x2748。这里使用C# 6异常过滤器
来处理SocketException，创建一个新的TcpClient，所以再次调用OnConnect可能会成功：
    private async void OnConnect(object sender, RoutedEventArgs e)
    {
      try
      {
        await _client.ConnectAsync(RemoteHost, ServerPort);
      }
      catch (SocketException ex) when (ex.ErrorCode == 0x2748)
      {
        _client.Close();
        _client = new TcpClient();
        MessageBox.Show("please retry connect");
      }
      catch (Exception ex)
      {
        MessageBox.Show(ex.Message);
      }
    }
请求发送到TCP服务器是由OnSendCommand方法处理的。这里的代码非常类似于服
务器上的收发代码。GetStream方法返回一个NetworkStream，这用于把（WriteAsync）数
据写入服务器，从服务器中读取（ReadAsync）数据：
    private async void OnSendCommand(object sender, RoutedEventArgs e)
    {
      try
      {
        if (! VerifyIsConnected()) return;
        NetworkStream stream = _client.GetStream();
        byte[] writeBuffer = Encoding.ASCII.GetBytes(GetCommand());
        await stream.WriteAsync(writeBuffer, 0, writeBuffer.Length);
        await stream.FlushAsync();
        byte[] readBuffer = new byte[1024];
        int read = await stream.ReadAsync(readBuffer, 0, readBuffer.Length);
        string messageRead = Encoding.ASCII.GetString(readBuffer, 0, read);
        Log += messageRead + Environment.NewLine;
        ParseMessage(messageRead);
      }
      catch (Exception ex)
      {
        MessageBox.Show(ex.Message);
      }
    }
为了建立可以发送到服务器的数据，从OnSendCommand内部调用GetCommand方法。
GetCommand又调用方法GetSessionHeader来建立会话标识符，然后提取ActiveCommand属
性（其类型是CustomProtocolCommand），其中包含选中的命令名称和输入的数据：
    private string GetCommand() =>
        $"{GetSessionHeader()}{ActiveCommand? .Name}::{ActiveCommand? .Action}";
    private string GetSessionHeader()
    {
      if (string.IsNullOrEmpty(SessionId)) return string.Empty;
      return $"ID::{SessionId}::";
    }
从服务器接收数据后使用ParseMessage方法。这个方法拆分消息以设置Status和
SessionId属性：
    private void ParseMessage(string message)
    {
      if (string.IsNullOrEmpty(message)) return;
      string[] messageColl = message.Split(
        new string[] { "::" }, StringSplitOptions.RemoveEmptyEntries);
      Status = messageColl[0];
      SessionId = GetSessionId(messageColl);
    }
运行应用程序时，可以连接到服务器，选择命令，设置回应和反向发送的值，查看来
自服务器的所有消息，如图25-5所示。
图25-5
25.5.4 TCP和UDP
本节要介绍的另一个协议是UDP（用户数据报协议）。UDP是一个几乎没有开销的简
单协议。在使用TCP发送和接收数据之前，需要建立连接。而这对于UDP是没有必要的。
使用UDP只需要开始发送或接收。当然，这意味着UDP开销低于TCP，但也更不可靠。当
使用UDP发送数据时，接收这些数据时就没有得到信息。UDP经常用于速度和性能需求大
于可靠性要求的情形，例如视频流。UDP还可以把消息广播到一组节点。相反，TCP提供
了许多功能来确保数据的传输，它还提供了错误校正以及当数据丢失或数据包损坏时重新
传输它们的功能。最后，TCP可缓冲传入和传出的数据，还保证在传输过程中，在把数据
包传送给应用程序之前重组杂乱的一系列数据包。即使有一些额外的开销，TCP仍是在
Internet上使用最广泛的协议，因为它有非常高的可靠性。
25.6 使用UDP
为了演示UDP，创建两个控制台应用程序（包）项目，显示UDP的各种特性：直接将
数据发送到主机，在本地网络上把数据广播到所有主机上，把数据多播到属于同一个组的
一组节点上。
UdpSender和UdpReceiver项目使用以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Net.NameResolution
名称空间：
    System
    System.Linq
    System.Net
    System.Net.Sockets
    System.Text
    System.Threading.Tasks
    static System.Console
25.6.1 建立UDP接收器
从接收应用程序开始。该应用程序使用命令行参数来控制应用程序的不同功能。所需
的命令行参数是-p，它指定接收器可以接收数据的端口号。可选参数-g与一个组地址用于
多播。ParseCommandLine方法解析命令行参数，并将结果放入变量port和groupAddress中
（代码文件UdpReceiver/ Program.cs）：
    static void Main(string[] args)
    {
      int port;
      string groupAddress;
      if (! ParseCommandLine(args, out port, out groupAddress))
      {
        ShowUsage();
        return;
      }
      ReaderAsync(port, groupAddress).Wait();
      ReadLine();
    }
    private static void ShowUsage()
    {
      WriteLine("Usage: UdpReceiver -p port  [-g groupaddress]");
    }
Reader方法使用在程序参数中传入的端口号创建一个UdpClient对象。ReceiveAsync方
法等到一些数据的到来。这些数据可以使用UdpReceiveResult和Buffer属性找到。数据编
码为字符串后，写入控制台，继续循环，等待下一个要接收的数据：
    private static async Task ReaderAsync(int port, string groupAddress)
    {
      using (var client = new UdpClient(port))
      {
        if (groupAddress ! = null)
        {
        client.JoinMulticastGroup(IPAddress.Parse(groupAddress));
        WriteLine(
            $"joining the multicast group {IPAddress.Parse(groupAddress)}");
        }
        bool completed = false;
        do
        {
        WriteLine("starting the receiver");
        UdpReceiveResult result = await client.ReceiveAsync();
        byte[] datagram = result.Buffer;
        string received = Encoding.UTF8.GetString(datagram);
        WriteLine($"received {received}");
        if (received == "bye")
        {
          completed = true;
        }
        } while (! completed);
        WriteLine("receiver closing");
        if (groupAddress ! = null)
        {
        client.DropMulticastGroup(IPAddress.Parse(groupAddress));
        }
      }
    }
启动应用程序时，它等待发送方发送数据。目前，忽略多播组，只使用参数和端口
号，因为多播在创建发送器后讨论。
25.6.2 创建UDP发送器
UDP发送器应用程序还允许通过命令行选项进行配置。它比接收应用程序有更多的选
项。除了命令行参数- p指定端口号之外，发送方还允许使用- b在本地网络中广播到所有
节点，使用- h识别特定的主机，使用-g指定一个组，使用-ipv6表明应该使用IPv6取代IPv4
（代码文件UdpSender /Program.cs）:
    static void Main(string[] args)
    {
      int port;
      string hostname;
      bool broadcast;
      string groupAddress;
      bool ipv6;
      if (! ParseCommandLine(args, out port, out hostname, out broadcast,
        out groupAddress, out ipv6))
      {
        ShowUsage();
        ReadLine();
        return;
      }
      IPEndpoint endpoint = GetIPEndPoint(port, hostname, broadcast,
        groupAddress, ipv6).Result;
      Sender(endpoint, broadcast, groupAddress).Wait();
      WriteLine("Press return to exit...");
      ReadLine();
    }
    private static void ShowUsage()
    {
      WriteLine("Usage: UdpSender -p port [-g groupaddress | -b | -h hostname] " 
+
        "[-ipv6]");
      WriteLine("\t-p port number\tEnter a port number for the sender");
      WriteLine("\t-g group address\tGroup address in the range 224.0.0.0 " +
        "to 239.255.255.255");
      WriteLine("\t-b\tFor a broadcast");
      WriteLine("\t-h hostname\tUse the hostname option if the message should " +
        "be sent to a single host");
    }
发送数据时，需要一个IPEndPoint。根据程序参数，以不同的方式创建它。对于广
播，IPv4定义了从IPAddress.Broadcast返回的地址255.255.255.255。没有用于广播的IPv6地
址，因为IPv6不支持广播。IPv6用多播替代广播。多播也添加到IPv4中。
传递主机名时，主机名使用DNS查找功能和Dns类来解析。GetHostEntryAsync方法返
回一个IPHostEntry，其中IPAddress可以从AddressList属性中检索。根据使用IPv4还是
IPv6，从这个列表中提取不同的IPAddress。根据网络环境，只有一个地址类型是有效
的。如果把一个组地址传递给方法，就使用IPAddress.Parse解析地址：
    public static async Task GetIPEndPoint(int port, string hostName,
        bool broadcast, string groupAddress, bool ipv6)
    {
      IPEndPoint endpoint = null;
      try
      {
        if (broadcast)
        {
        endpoint = new IPEndPoint(IPAddress.Broadcast, port);
        }
        else if (hostName ! = null)
        {
        IPHostEntry hostEntry = await Dns.GetHostEntryAsync(hostName);
        IPAddress address = null;
        if (ipv6)
        {
          address = hostEntry.AddressList.Where(
              a => a.AddressFamily == AddressFamily.InterNetworkV6)
              .FirstOrDefault();
        }
        else
        {
          address = hostEntry.AddressList.Where(
              a => a.AddressFamily == AddressFamily.InterNetwork)
              .FirstOrDefault();
        }
        if (address == null)
        {
          Func ipversion = () => ipv6 ? "IPv6" : "IPv4";
          WriteLine($"no {ipversion()} address for {hostName}");
          return null;
        }
        endpoint = new IPEndPoint(address, port);
        }
        else if (groupAddress ! = null)
        {
        endpoint = new IPEndPoint(IPAddress.Parse(groupAddress), port);
        }
        else
        {
        throw new InvalidOperationException($"{nameof(hostName)}, "
          + "{nameof(broadcast)}, or {nameof(groupAddress)} must be set");
        }
      }
      catch (SocketException ex)
      {
        WriteLine(ex.Message);
      }
      return endpoint;
    }
现在，关于UDP协议，讨论发送器最重要的部分。在创建一个UdpClient实例，并将
字符串转换为字节数组后，就使用SendAsync方法发送数据。请注意接收器不需要侦听，