• Create W1 ← oGb(1λ, ω1, (cid:96)) and W2 ← oGb(1λ, ω2, (cid:96)).
• Check if ∃v1, v2 ∈ {0, 1}(cid:96) such that Wv1
1 = w2 and
2 = w1. If the check fails output bad and termiante.
Wv2
• Check if ∃v ∈ {0, 1}(cid:96) such that Wv
1 = w2 and Wv
2 = w1.
If check fails output (r1, r2). Else, output v.
Figure 5: Secure validation subroutine SV.
values; and (3) augmenting the equality step to let parties to also
input r1, r2 such that (r1, r2) is revealed iff the equality test fails.
Unfortunately, the above idea turns out to be naïve mainly be-
cause although the equality test detects leakage it does not quite
help in identifying the deviating party (that must then be penal-
ized). Perhaps even more severely, a malicious party that simply
supplies junk input to the equality test can easily learn (r1, r2) and
then deny honest party from learning this output. (This is possible
since the equality step is implemented using a unfair secure com-
putation protocol.) This results in a honest party losing its coins to
the malicious party.
These obstacles lead us to design a more sophisticated secure
validation subroutine. Speciﬁcally, we enforce that parties indeed
supply the correct output keys by using a very speciﬁc garbling
scheme proposed in [22]. At a high level, using a seed (for a PRG)
we generate the parties’ output keys in situ thereby preventing a
malicious party from learning (r1, r2) by supplying junk input.
Unfortunately this does not prevent other attacks. Speciﬁcally, a
malicious party may provide legitimate output keys and yet fail the
equality test (e.g., by providing inconsistent keys thereby produc-
ing different outputs). This necessitates the use of a protocol for
“secure computation with penalties” (cf. Figure 2) to implement
the secure validation step. Now a malicious party may abort the
secure validation step after learning (r1, r2) but in this case it is
forced to pay a penalty. Our secure validation subroutine SV is de-
scribed in Figure 5. Our protocol is constructed in the F (cid:63)
SV-hybrid
model. A bonus side-effect of working in the F (cid:63)
SV-hybrid model is
that our protocol guarantees fairness (in the sense of [11]).
Although, we have resolved the “fairness” problem, we are still
left with the possibility that a malicious party may force the out-
put of F (cid:63)
SV to be (r1, r2) by simply providing inconsistent inputs.
To resolve this attack, we employ a sophisticated key transfer sub-
routine (Figure 4) that generates the parties’ input keys in situ and
further distributes keys based on the parties’ inputs (i.e., subsuming
the oblivious transfer step). All of the above steps now ensure that
information leakage can happen only due to false function attacks.
Inputs: P1, P2 respectively hold inputs x1, x2 ∈ {0, 1}m.
Preliminaries. Let (com, dec) be a perfectly binding commit-
ment scheme. Let NP language L be such that u = (a, b) ∈ L
iff there exists α, β such that a = Gb(1λ, f, α) and b =
com(α; β). Let (K,P,V) be a non-interactive zero knowl-
edge scheme for L. Let crs ← K(1λ) denote the common
reference string. Let H be a collision-resistant hash function.
Protocol: For each i ∈ {1, 2}, Pi does the following: Let
j ∈ {1, 2}, j (cid:54)= i.
1. Pick ωi at random and compute Gi ← Gb(f, ωi).
2. Send (input, sid, ssid, (m, xi, ωi)) to FKT. If the output
j, g(cid:48)
j).
from FKT is abort, terminate. Else let output equal (U(cid:48)
3. Send Gi to Pj and receive Gj from Pj.
4. Compute wi ← Eval(Gj, U(cid:48)
j).
5. Choose random ri and send hi = H(ri) to Pj.
6. Let Xi = (Gj, g(cid:48)
j, hj), and let φi(w; Xi) = 1 iff w = (α,
i), α) = 1 and H(β) = hj. Send
8. Send (input, sid, ssid, ((cid:96)i, wi, ωi, ri, hj, g(cid:48)
β) such that V(crs, (Gi, g(cid:48)
(deposit, sid, ssid, i, j, φi(·; Xi), τ, coins(q)) to F (cid:63)
7. If no corresponding deposit message was received from
F (cid:63)
CR on behalf of Pj, then wait until round τ + 1 to receive
refund message from F (cid:63)
j), coins(d)) to
F (cid:63)
SV. Let zi denote the output received from F (cid:63)
SV. Do: (1)
If zi = ⊥, then terminate. (2) Else if zi = z, then out-
put z and terminate. (3) Else if zi = (r1, r2), then com-
pute πi ← P(crs, (Gi, g(cid:48)
i), ωi) and send (claim, sid, ssid,
j, i, φj, τ, q, (πi, rj)) to F (cid:63)
CR, receive (claim, sid, ssid, j,
i, φj, τ, coins(q)) and terminate.
CR and terminate.
CR.
Figure 6: Realizing F (cid:63)
f,leak.
Recall that the equality test does not help in identifying the deviat-
ing party. On the other hand, a false function attack can be readily
detected by simply asking the parties to prove in zero-knowledge
(ZK) that they computed the garbled circuit correctly. Thus, we
ask the F (cid:63)
CR transaction to release coins(q) to the other party if it
reveals the preimage to both hash values and also provides a ZK
proof that its garbled circuit was constructed correctly. (Observe
that ZK proofs are required to ensure privacy of honest inputs.)
All of the above ideas still need to be integrated together with
great care to ensure that the protocol is as secure as the DualEx
protocol of [23]. Our protocol is described in Figure 6.
Efﬁciency. Note that in an optimistic setting, i.e., when both par-
ties follow the protocol, there is no need for any party to compute
a NIZK proof (whose cost is proportional to the circuit size of f),
no F (cid:63)
CR transactions are claimed, and thus optimal validation com-
plexity is simply hash veriﬁcation (required in F (cid:63)
SV [11]). It is easy
to see that for very large circuits with |f| (cid:29) m + (cid:96), the optimal
computation/communication complexity is essentially the same as
that of the DualEx protocol. In practical instantiations, it is desir-
able to instantiate the PRG used for generating the garbled circuit
via a cryptographic hash function as described in Section 2. Also,
one may use NIZKs constructed in [18] to support very fast ver-
iﬁcation and have very short size (e.g., 7 group elements from a
bilinear group). In Appendix A we formally prove:
Theorem 1. Let f : {0, 1}m × {0, 1}m → {0, 1}(cid:96) and λ be a
computational security parameter. Assume that collision-resistant
hash functions, perfectly binding commitment schemes, and non-
interactive zero knowledge (NIZK) arguments exist for NP. Then
assuming that Gb is a secure garbling scheme as in [22], there ex-
36ists a protocol in the (FOT,F (cid:63)
F (cid:63)
f,leak (cf. Deﬁnition 1) and has the following properties:
CR)-hybrid model that SCC realizes
Its optimistic communication/computation complexity is 2 ·
|Gb(1λ, f,·)|+poly(k, m, (cid:96)) where |Gb(1λ, f,·)| denotes the
output length of Gb (i.e., size of the garbled circuit), and the
optimistic validation complexity is O(1) hash veriﬁcations.
Its worst case validation complexity equals the complexity of
NIZK veriﬁcation in addition to O(1) hash veriﬁcations.
5. FAIR COMPUTATION
In this section, we show how to design fair protocols that are
more round-efﬁcient than prior constructions [11]. Our efﬁciency
gains are due to use of a new Bitcoin transaction functionality
which we formalize as an ideal functionality below.
Ideal functionality F (cid:63)
ML (cf. Figure 7) is
to allow n parties to jointly lock their coins in an atomic fash-
ion, where each party Pi commits to a statement of the following
kind: “Before round τ, I need to reveal a witness wi that satisﬁes
φi(wi) = 1, or else I will forfeit my security deposit of x coins.”
Hence F (cid:63)
ML. The purpose of F (cid:63)
ML satisﬁes the following:
The atomic nature of F (cid:63)
ML guarantees that either all the n par-
ties agreed on the circuits φi(·), the limit τ, and the security
deposit amount x, or else none of the coins become locked.
Each corrupt party who aborts after the coins become locked
is forced to pay coins( x
If Pi reveals a correct wi then wi becomes public to everyone.
The limit τ prevents the possibility that a corrupt party learns
the witness of an honest party, and then waits for an indeﬁnite
amount of time before recovering its own coins amount.
n−1 ) to each honest party.
The Bitcoin realization of F (cid:63)
ML is presented in Figure 10. The pa-
rameter ˜τ denotes the double-spending safety distance, and the pa-
rameter τ(cid:48) denotes how many ˜τ intervals exist in a single “Bitcoin
round”. See [11, Appendices G and F] for technical Bitcoin details.
Given F (cid:63)
ML, the following theorem is easy to prove.
Theorem 2. Assuming the existence of one-way functions, for ev-
ery n-party functionality f there exists a protocol that securely
computes f with penalties in the (FOT,F (cid:63)
ML)-hybrid model. Fur-
ther, the protocol requires O(1) rounds, a single invocation of
ML, and each party deposits (n − 1) times the penalty amount.
F (cid:63)
Proof sketch. The protocol proceeds in two stages.
In the ﬁrst
stage, parties run a (unfair) secure computation protocol in the
FOT-hybrid model that accepts input yi, then computes z ←
f (y1, . . . , yn), and then uses the pubNMSS primitive [11], which
essentially additively shares z into sh1, . . . , shn, and then for ev-
ery j ∈ [n], computes (honest binding) commitments Tagj on
share with the corresponding decommitment Tokenj. At the end
of this stage, each Pj obtains (AllTags,{Tokenj}j∈[n]) where
AllTags = {Tagi}i∈[n]. In the second stage, parties run a protocol
for “fair reconstruction” of the shares.
Note that our ﬁrst stage is exactly the same as in [11]. While
they use F (cid:63)
ML. Let
φj(Tokenj; Tagj) = 1 iff Tokeni is a valid decommitment of
Tagj. Recall that {Tagj}j∈[n] are public, hence the relations φj
can be speciﬁed by anyone, but the corresponding witness Tokenj
is known only to Pj. Given this, the protocol is quite straight-
forward. Let d be a deposit parameter (which we will set later).
Let Di = (d, φ1, . . . , φn, τ ) for every i ∈ [n]. Each party sends
(lock, sid, ssid, i, Di, coins(d)) to F (cid:63)
If they receive abort
from F (cid:63)
ML, then they abort the protocol. Else, in round τ, each
Pj sends (redeem, sid, ssid, j, Tokenj) to F (cid:63)
ML, and receives back
CR to implement the second stage, we use F (cid:63)
ML.
coins(d).
If in round τ party Pi received (redeem, sid, ssid, j,
Tokenj) for Pj, then it extracts the shares from each token, and re-
constructs z, and terminates the protocol. Else it proceeds to round
τ + 1 and collects messages (payout, sid, ssid, j, i, coins(d(cid:48))) for
each j for which Pi does not possess Tokenj. This completes the
description of the protocol. The protocol has a fairly straightfor-
ward simulation and follows ideas in [11]. Due to space limitations,
we omit the simulation.
Efﬁciency. In contrast to the constructions of [11] where the n par-
ties broadcast O(n) messages in O(n) “Bitcoin rounds”, with F (cid:63)
ML
the parties broadcast O(n2) messages in O(1) rounds. Note that if
all parties are honest then F (cid:63)
ML requires only O(n) transactions on
the Bitcoin ledger, though O(n2) transaction data and O(n2) sig-
natures (to assure compensations after the τ limit) are still needed.
5.1 Bitcoin protocol enhancement proposal
In [3, Section 3.2], the authors propose to modify the Bitcoin
protocol so that in order to create a transaction txnew that re-
deems an unspent output i of an earlier transaction txold, this out-
put will be referenced in txnew via (SHA256d(txsimp
old ), i) instead of
(SHA256d(txold), i). In other words, the id of txold shall be de-
rived from the simpliﬁed form txsimp
old , i.e., the form that excludes
the input scripts which are required for txold to become valid. One
important advantage of [3, Section 3.2] is allowing a user to commit
coins on condition that another transaction would become valid, by
referencing the simpliﬁed form of that other transaction. This en-
ables users to have more rich kinds of contracts, and in particular it
enables F (cid:63)
ML. There is also a disadvantage, which is that we lose
some of the expressive power that Bitcoin scripts currently allow.
For example, suppose that P1 can redeem an unspent output by re-
vealing a witness w or w(cid:48) (e.g. preimages of hardcoded hashed
values H(w), H(w(cid:48))). When P1 broadcasts a transaction that re-
deems that output, and its transaction is added to the blockchain,
the simpliﬁed id hash will not express whether P1 revealed w or
w(cid:48). Therefore, if P2 and P3 have some contract that depend on the
witness that P1 revealed, they may not be able to settle their con-
tract since there would be plausible deniability that P1 broadcast
the other witness.
Our proposal here is to enhance [3, Section 3.2] and get the
best of both worlds, by still using SHA256d(txold) as the id
of txold for the Merkle tree in which the transaction txold re-
sides, but using SHA256d(txsimp
old ) to refer to txold in the transac-
tion txnew, i.e., the output that txnew spends shall be speciﬁed as
(SHA256d(txsimp
old ), i). This way, the PoW computations on the
root of the Merkle tree to which SHA256d(txold) belongs will com-
mit to the witness that redeemed txold, thus the disadvantage is
eliminated. Let us note that inserting SHA256d(txsimp
old ) as the id of
txold in the UTXO set (i.e. a tree of the currently unspent outputs
that Bitcoin nodes maintain) would commonly not even require an
extra SHA256d invocation, since SHA256d(txsimp
old ) has to be com-
puted when verifying the signature of txold for the ﬁrst time.
ML with the current Bitcoin protocol, in step (6) of
Figure 10 the parties need to run any unfair secure MPC protocol
to obtain idlock = SHA256d(txlock). To elaborate, the input of
each Pi for this MPC is inpi = Signski
lock ), and the output
lock , inp1, . . . , inpn). This MPC can
to all parties is SHA256d(txsimp
be unfair because the inputs {inpi}n
i=1 remain private, hence the
coins cannot become locked until step (11) of Figure 10 executes.
6. NON-INTERACTIVE BOUNTIES
(txsimp