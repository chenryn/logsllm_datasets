例 25.2. strtok
cha
char *strtok(char *str,
root
root
S
#include 
bin:x:2:2:bin:/bin:/bin/sh
root:x:0:0:root:/root:/bin/bash
./a.out
cat
int main(void) 
：X：.
 /etc/passwd
也就是说记录之间的分隔符是换行符,
r(char
return 0;
token =strtok(str,
char 
(token 
个人信息、主目录、登录Shell，
一些分隔符或者叫界定符（Delimiter），
"root:x::0:root:/root:/bin/bash:";
token);
 strtok(NULL,
，可以指定一个或多个分隔符，strtok遇到其中任何一
":");
 token);
，C标准库提供的strtok函数可以很方便地完成
del:
每条记录又由若干个字段组成，
im,
":")）!= NULL)
，字段之间的分隔符是:号。解析
，例如/etc/passwd文件
这些字段
---
## Page 456
写回到这个指针变量中（这是一
用者需要自己分配一个指针变量来维护字符串中的当前处理位置，每次调用时把这个指针变量的地
刚才提到在strtok函数中应该有一个静态指针变量记住上次处理到字符串中的什么位置，所以不需
改成\＇，分割出一
用gb跟踪这个程序，
(Reentrant)
强
过strtok函数中的一个静态指针变量记住的）。
数只要传NULL就可以了，
的Token被忽略。第一次调用要把字符串首地址传给strtok的第一个参数，
成"root"、
例 25.3. strtok_r
l: str =
.
(gdb）n
main （)
Breakpoint 1 at 0x8048415: file main.c, line 5.
2
(gdb）
L
(gdb）
(gdb) start
 str
:usea/uta/:4001/:4001:0::x000\4001, = 12s
 str = "root\000x::0:root:/root:/bin/bash:"
str 
"x"、
个很好的例子：
 Subdelim\n",
int main(int argc, char *argv[l)
r = "root\000x\000:0:root:/root:/bin/bash:"
at main.c:5
"root\000x\000:0:root:/root: /bin/bash:"
一个小字符串，并返回这个小字符串的首地址。
"o"、
char
char
while (.
 while（(token 
printf("%s\n"
token = strtok(str, ":");
char str[] = "root:x::0:root:/root:/bin/bash:";
"root"、
*saveptrl,
*strl,
.h>
 printf("%s\n"
(token = strtok(NULL,
"/root"、
*str2,
argv[0]);
 *saveptr2;
token);
*token,
" /bin/bash"、
"Usage: %s string delim
 token);
*subtoken;
但是在函数中使用静态变量是不好的，
每次调用strtok把str中的一个分隔符
、""等几个Token,
":")）!=NULL)
":")） != NULL)
它的内部没有静态变量,
以后每次调用第一个参
但空字符串
调
---
## Page 457
础。
更深刻地理解这两个函数的工作原理，也为以后理解"可重入"和"线程安全"这两个重要概念打下基
习题请点评
Man Page的BUGS部分指出了用strtok和strtok_r函数需要注意的问题:
1、出于练习的目的，
解strtok_r函数的工作方式。
前处理位置,
分割成a、bbb、
·strtok函数使用了静态变量，它不是线程安全的，
·在做了分割之后，字符串中的分隔符就被o覆盖了
·这两个函数不能用于常量字符串，因为试图改写.rodata段会产生段错误
·这两个函数要改写字符串以达到分割的效果
后再详细介绍"可重入"和"线程安全"这两个概念
 a/bbb/ / /cc
./a.out 
>
 所以这个例子可以在按一级分隔符分割整个字符串的过程中穿插着用二级分隔符分割
YYY
XXX
cc
&saveptr2);
&saveptrl);
'a/bbb/ / /cc;xxx:yyy: '
strtok和strtok_r函数非常值得自已动手实现一遍，在这个过程中不仅可以
exit(EXIT_SUCCESS);
，由于strtok_r不使用静态变量,
(uayo‘'"u\s%:p%)uTd
if (token == NULL)
exit(EXIT_FAILURE）;
 二级分隔符是/，
printf("
if （subtoken == NULL)
break;
':;'
，一级分隔符是:号或;号，
break;
只有第一
--> %s\n", subtoken);
，必要时应该用可重入的strtok_r函数，以
argv[2],
一个子串中有二级分隔符，
，把这个字符串分割
argv[3],
，它被进一步
---
## Page 458
数写一个Man Page。
果函数中有动态分配内存的操作，还要另外实现一
对URL进行切分,
现在要求实现一个函数，
Pair）组成，以&隔开，有些键对应的值可能是空字符串，
CN&ie=GB2312&g=linux&meta=是查询字符串，
http://www.baidu.com/s?wd=linux&cl=3
2、解析URL中的路径和查询字符串。动态网页的URL末尾通常带有查询，例如:
第25章C标准库
，将路径部分和各键值对分别传出，
传入-
一个带查询字符串的URL
全国嵌入式人才培训基地
起始页
请仔细设计函数接口以便传出这些字符串。
首先检查输入格式的合法性,
，比如这个例子中的键meta。
2.标准I/O库函数
然后
下一
如
---
## Page 459
2.2. fopen/fclose 请点评
看该文件的内容：
5678四个字符各占一个字节，vi会自动在文件末尾加一个换行符，所以文件长度是5。用od命令查
在第5.1节“目标文件"中我们用hexdump命令查看过一个二进制文件。我们再做一个小实验，
2.1.文件的基本概念 请点评
2.标准IO库函数 遣点评
含不可见字符的也算，
不包含最高位是1的非ASCII码字节。
的各种配置文件，
文本文件是-
高位都是0。以后我们会经常用到od命令。
符，
进制显示，
的ASCI码以字符形式列出来。和hexdump类似,
-tx1选项表示将文件中的字节以十六进制的形式列出来，
令，有些字节表示各Section和Segment在文件中的位置，有些字节表示各Segment的加载地址。
二进制文件不是用来保存字符的，文件中的字节表示其它含义,
某种编码（例如ASCII或UTF-8）
文件、可执行文件和库文件是二进制文件。文本文件是用来保存字符的，
文件可分为文本文件（Text File）和二进制文件（Binary File）两种，
件stdio.h中声明，称为标准I/O库函数。
准库对文件进行读写操作，
我们已经多次用到了文件，
上一页
，以ASCII码保存。ASCII码的范围是O~127，所以ASCII码文本文件中每个字节只用到低7位，
000005
$ od -txl 
S
，-Ax选项要求以十六进制显示文件中的地址。这样我们看到，这个文件中保存了5个字
rw-r-
 ls -l textfile
一个模糊的概念。有些时候说文本文件是指用vi可以编辑出来的文件,
这些文件中只包含ASCI码中的可见字符，
 -tc -Ax textfile
，采用其它字符编码（例如UTF-8编码）的也算。
 akaedu akaedu 5 2009-03-20 10:58 textfile
，对文件的读写也属于I/O操作的一种，本节介绍的大部分函数在头文
例如源文件、
用cat命令可以查看其中的字符,
从广义上来说，
全国嵌入式人才培训基地
、目标文件、可执行文件、库文件等，现在学习如何用C标
第25章C标准库
2.标准I/O库函数
，输出结果最左边的一列是文件中的地址，
只要是专门保存字符的文件都算文本文件，
，每组一个字节，
，而不包含像这种不可见字符，也
例如可执行文件中有些字节表示指
用vi可以编辑其中的字符，
，源文件是文本文件，而目标
 -tc选项表示将文件中
文件中的字节都是字符的
例如/etc目录下
默认以八
下二
最
---
## Page 460
符有以下6种合法的组合：
操作系统的文本文件和二进制文件格式不同，
mode参数是一个字符串，
用chdir(2)函数改变自己的当前工作目录。
命令启动新的进程，
通常Linux发行版都把Shel配置成在提示符前面显示当前工作目录，
‘帐
fopen("Desktop/file3",
操作，再比如fp =fopen("../a.out",
接访问这些成员，
函数接口之间传来传去，
函数与Unbuffered I/O函数"将会讲到这个标识叫做文件描述符）、I/O缓冲区和当前读写位置等信
path是文件的路径名，
下面说说参数path和mode，path可以是相对路径也可以是绝对路径，mode表示打开方式是读还是
就无法再操作这个文件了。
对文件做各种操作，关闭文件则释放文件在操作系统中占用的资源，使文件的标识失效，用户程户
分配一些资源用于保存该文件的状态信息，
在操作文件之前要用fopen打开文件，
'w"
(Append）
（Handle），
是相对路径，
，Shell进程的当前工作目录可以用pwd命令查看：
，但调用者不必知道FILE结构体都有哪些成员，
新
只写，
只读，文件必须已存在
/etcs表示当前工作目录是/etc。
写
/home/akaedu
#include 
 pwd
，也就是替换掉原来的文件内容
，如果文件不存在则创建，如果文件已存在则把文件长度截断（Truncate）为0字节再重
，抓住这个把手就可以打开门或抽屉，但用户只能抓这个把手，而不能直接抓门或抽
在文件末尾追加数据使文件的尺寸增大。t表示文本文件，
...........
这种编程思想在面向对象方法论中称为封装（Encapsulation）：
则该进程的当前工作目录继承自Shell进程的当前工作目录，该进程也可以调
，mode表示打开方式。如果文件打开成功，
 由rwatb+六个字符组合而成，
，操作完毕要用fclose关闭文件。打开文件就是在操作系统中
。用cd命令可以改变Shel进程的当前工作目录。在Shell下敲
其中包含该文件在内核中标识（在第2节“C标准IO库
 并得到该文件的标识，以后用户程序就可以用这个标
，而在UNIX系统中，无论文本文件还是二进制文件都
我们很快就会看到，
，r表示读，w表示写，a表示追加
 每个进程都有自己的当前工作目
就返回-
 例如-s表示当前工作目录是主
以指明对哪个文件进行操 
调用者只是把文件指针在
，b表示二进制文件，
一个FILE*文件指针来标识
只做写操作，path也可
调用者不应该
像FILE*这样白
460
有些
读
可
耳
库
序
---
## Page 461
做I/O操作而是对终端设备做I/O操作。所谓终端（Terminal）是指人机交互的设备，也就是可以接
我们经常用printf打印到屏幕，也用过scanf读键盘输入，这些也属于I/O操作，但不是对文件
2.3. stdin/stdout/stderr 请点评
越多的系统资源。
绍，EOF在stdio.h中定义：
如果fclose调用出错（比如传给它一个无效的文件指针）则返回Eor并设置errno，errno稍后介
用fclose,
把文件指针传给fclose可以关闭它所标识的文件，
再说说fclose函数。
比如/tmp/file1这个文件不存在，
'a+
W+
r+
'a
允许读和追加数据，如果文件不存在则创建
允许读和写，
允许读和写，
只能在文件末尾追加数据，如果文件不存在则创建
#endif
返回值：成功返回0，
#include 
if （ (fp = fopen("/tmp/filel"
 在进程退出时系统会自动关闭文件，
define EOF （-1)
exit(1);
，如果文件不存在则创建，如果文件已存在则把文件长度截断为0字节再重新写
，文件必须已存在
 throughout
......................
，而r打开方式又不会创建这个文件，fopen就会出错返回。
 the library rely on this being -1.
...............
"r")）
但是不能因此就忽略fclose调用，
 打开文件操作完之后一定要记得关闭。如果不调
，关闭之后该文件指针就无效了，
.............................
== NULL)
........
.............
，如果写一个长
，不能再使用了。
*/
461
年
---
## Page 462
么错误。比较好的办法是用perror或strerror函数将errno解释成字符串再打印。
如果在程序中打印错误信息时直接打印errno变量,
整型变量，所有错误码都是正整数。
很多系统函数在错误返回时将错误原因记录在libc定义的全局变量errno中，每种错误原因对应-
2.4.errno与perror函数请点评
样就可以把正常的运行结果和错误提示分开，而不是混在一起打印到屏幕了。
是打印到终端设备（也就是屏幕）了，
fputs函数将在稍后详细介绍。不管是打印到标准输出还是打印到标准错误输出效果是一样的，都
个错误码,
讲到重定向操作，可以把标准输出重定向到一
示（例如gcc报的警告和错误）打印到标准错误输出，所以fopen的错误处理写成这样更符合惯例:
件指针。这三个文件指针的打开方式都是可读可写的，
针stdin、stdout和stder，这三个文件指针是libc中定义的全局变量,
没开始执行之前）会自动把终端设备打开三次，分别赋给三个FILE*指
那为什么printf和scanf不用打开就能对终端设备进行操作呢？因为在程序启动时（在main函数还
(Standard Input)
File）这个词。
通文件还是设备
备
找到相应的驱动程序,
标识内核中的一个设备驱动程序，
一个设备。用1s命令查看这个文件：
的控制终端）。也就是说，
的终端通常是键盘和显示器。终端设备和文件一
受用户输入并输出信息给用户的设备。
明
N
中不严格
对应，
保存数据
文件的这
头的c表示文件类型是字符设备。中间的5，0是它的设备号，
：printf向stdout写，
#include 
这
crw-rw-rw-
S
请查阅errno(3)的Man Page了解各种错误码，errno在头文件errno.h中声明，是一个
 ls -l /dev/tty
各区分"文件"和“设备"这两个概念，
些
设备文件也可以像普通文件一样打开、
对设备文件
一列
备
显示设备
如果需要强调是保存在磁盘上的普通文件，
，stdout只用于写操作，称为标准输出（Standard Output）
，完成对该设备的操作。我们知道常规文件的这一列应该显示文件尺寸，
1 root dialout 5, 0 2009-03-20 19:31 /dev/tty
键盘、
备
做读写
台
，/dev/tty不是一个普通的文件，
显示名
写
次设备号标识该设备驱动程序管理的一个设备
作并不是读写磁盘上的数据，而是在读写设各
。在计算机刚诞生的年代，终端是电传打字机和打印机，
，遇到“文件"这个词，读者可以根据上下文理解它是指音
，后面我们会看到，用户程序也可以直接使用这三个文
一个常规文件，
、磁盘等设备在/dev目
一样也需要先打开后操作，
通常程厅
，打印出来的只是一个整数值，
、读、写和关闭，
== NULL）{
，但通常stdin只用于读操作，称为标准输入