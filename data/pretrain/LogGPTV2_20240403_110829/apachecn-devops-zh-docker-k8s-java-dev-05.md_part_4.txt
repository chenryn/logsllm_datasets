在这其中，``是另一个 Dockerfile 构建指令，它将在稍后构建子映像时被触发。有一些限制:`ONBUILD`指令不允许链接另一条`ONBUILD`指令，也不允许`FROM`和`MAINTAINER`指令作为`ONBUILD`触发器。
如果您正在构建一个将用作构建其他映像基础的映像，这将非常有用。例如，可以使用特定于用户的配置定制的应用构建环境或守护程序。`ONBUILD`指令非常有用([https://docs.docker.com/engine/reference/builder/#onbuild](https://docs.docker.com/engine/reference/builder/#onbuild)和[https://docs . docker . com/engine/reference/builder/# maintainer-弃用](https://docs.docker.com/engine/reference/builder/#maintainer-deprecated))，用于自动构建您选择的软件栈。考虑下面关于 Maven 和构建 Java 应用的例子(是的，Maven 也可以作为 Docker 容器使用)。基本上，您的项目的 Dockerfile 需要做的就是引用包含`ONBUILD`指令的基本容器:
```
FROM maven:3.3-jdk-8-onbuild CMD ["java","-jar","/usr/src/app/target/app-1.0-SNAPSHOT-jar-with-dependencies.jar"]  
```
没有魔法，只要你查看父母的档案，一切都会变得清晰。在我们的例子中，它将是一个在 GitHub 上可用的`docker-maven` Dockerfile:
```
FROM maven:3-jdk-8
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
ONBUILD ADD . /usr/src/app
ONBUILD RUN mvn install  
```
有一个安装了 Java 和 Maven 的基础映像，以及一系列复制文件和运行 Maven 的指令。
`ONBUILD`指令向映像添加了一条触发指令，当映像用作另一个构建的基础时，该指令将在以后执行。触发器将在子构建的上下文中执行，就好像它是在子`Dockerfile`中的`FROM`指令之后立即插入的一样。
当 Docker 在构建过程中遇到`ONBUILD`指令时，构建器会向正在构建的映像的元数据添加一种触发器。但这是影响这一形象的唯一方式。在构建结束时，所有触发器的列表存储在映像清单中的`OnBuild`键下。你可以看到他们使用`docker inspect`命令，我们已经知道了。
稍后，可以使用`FROM`指令，将映像用作新构建的基础。作为处理`FROM`指令的一部分，Docker builder 查找`ONBUILD`触发器，并按照注册它们的相同顺序执行它们。如果任何一个触发器失败，则`FROM`指令被中止，这将使构建失败。如果所有触发器都成功，则`FROM`指令完成，构建继续。
# 停止信号
要指定应该向容器发送什么系统调用信号来退出，请使用`STOPSIGNAL`指令。该信号可以是与内核的`syscall`表中的位置匹配的有效无符号数字:例如`9`，或者是格式为`SIGNAME`的信号名称，例如`SIGKILL`。
# 健康检查
`HEALTHCHECK`指令可用于通知 Docker 如何测试容器，以检查其是否仍在工作。这可以是检查我们的 rest 服务是响应`HTTP`呼叫还是只监听指定端口。
一个容器可以有几种状态，可以使用`docker ps`命令列出。这些可以是`created`、`restarting`、`running`、`paused`、`exited`或`dead`。但有时这还不够；从 Docker 的角度来看，一个容器可能仍然是活动的，但是应用可能会以其他方式挂起或失败。对应用状态的额外检查会很有用，`HEALTHCHECK`会派上用场。
`HEALTHCHECK`状态开始。只要健康检查通过，它就会变成`healthy`(无论它之前处于什么状态)。连续失败一定次数后，就变成了`unhealthy`。
`HEALTHCHECK`指令的语法如下:
```
HEALTHCHECK --interval= --timeout= CMD 
```
``(默认值为 30 秒)和``(同样，默认值为 30 秒)是时间值，相应地指定检查间隔和超时。``是用于检查应用是否仍在运行的命令。Docker 正在使用``的退出代码来确定健康检查是失败还是成功。这些值可以是`0`，表示容器是健康的，可以使用；也可以是`1`，表示有问题，容器工作不正常。Java 微服务`healthcheck`实现可能只是一个简单的`/ping` REST 端点，返回任何东西(作为时间戳)，甚至返回一个空响应，其中带有证明它是活动的`HTTP 200`状态代码。我们的`HEALTHCHECK`可以在这个端点上执行`GET`方法，检查服务是否响应:
```
HEALTHCHECK --interval=5m --timeout=2s --retries=3 CMD curl -f http://localhost/ping || exit 1
```
在前面的例子中，命令`curl -f http://localhost/ping`将每 5 分钟执行一次，最长超时为 2 秒。如果单次检查耗时超过 2 秒，则认为检查失败。如果连续三次重试失败，容器将获得`unhealthy`状态。
There can only be one `HEALTHCHECK` instruction in a Dockerfile. If you list more than one then only the last `HEALTHCHECK` will take effect.
`HEALTCHECK`指令为您提供了微调容器监控的可能性，从而确保您的容器工作正常。比只是`running`、`exited`或者`dead`标准的 Docker 状态要好。
既然我们已经理解了`Dockerfile`指令，我们就准备好我们的映像了。让我们把事情自动化一点。我们将使用 Maven 创建和运行我们的映像。
# 使用 Maven 创建映像
自然，我们可以使用 Docker 本身来构建我们的 Docker 映像。但这不是 Spring 开发人员的典型用例。我们的一个典型用例是使用 Maven。如果您设置了连续的集成流程，例如使用 Jenkins，这可能特别有用。将映像构建过程委托给 Maven 给了你很大的灵活性，也节省了很多时间。GitHub 上至少有两个免费的 Docker Maven 插件，例如:
*   [https://github.com/spotify/docker-maven-plugin](https://github.com/spotify/docker-maven-plugin):一个由 Spotify 构建和推送 Docker 图片的 Maven 插件。
*   [https://github . com/aleexec/dock-maven 插件](https://github.com/alexec/docker-maven-plugin)。
*   [https://github.com/fabric8io/docker-maven-plugin](https://github.com/fabric8io/docker-maven-plugin):这是我觉得最有用最可配置的一个。在撰写本文时，Docker 的所有 Maven 插件中，Fabric8 似乎是最健壮的。Fabric8 是一个集成的开源 DevOps 和集成平台，可以在任何 Kubernetes 或 OpenShift 环境下开箱即用地工作，并提供持续交付、管理、ChatOps 和混沌猴子。我们将在本章的剩余部分使用这个。
我们的用例将使用 Maven 打包 Spring Boot 可执行 JAR，然后将构建工件复制到 Docker 映像中。将 Maven 插件用于 Docker 主要集中在两个方面:
*   构建和推送包含构建工件的 Docker 映像
*   启动和停止用于集成测试和开发的 Docker 容器。这就是我们将在[第 6 章](06.html)、*用 Java 应用运行容器*中关注的内容
现在让我们从插件目标和可能的配置选项开始，专注于创建一个映像。
fabric8 Docker 插件提供了几个 Maven 目标:
*   `docker:build`:这使用来自 maven-assembly-plugin 的程序集描述符格式来指定将从映像中的子目录添加的内容(默认情况下为`/maven`)
*   `docker:push`:用这个插件构建的映像可以被推送到公共或私有的 Docker 注册表中
*   `docker:start`和`docker:stop`:用于启动和停止容器
*   `docker:watch`:这将依次执行`docker:build`和`docker:run`。它可以永远在后台运行(单独的控制台)，除非你用 CTRL+C 停止它。它可以观察程序集文件的变化并重新运行构建。它节省了很多时间
*   `docker:remove`:这是用来清理映像和容器的
*   `docker:logs`:这会打印出正在运行的容器的输出
*   `docker:volume-create`和`docker:volume-remove`:分别用于创建和删除卷。我们将在本章的后面部分回到这些
在我们运行这些目标之前，我们需要指示插件应该如何运行。我们在项目的`pom.xml`文件中的插件配置中这样做:
*   maven docker 外挂程式组态
插件定义中的重要部分是``元素。这是你设置插件行为的地方。``中有两个主要元素:
*   指定如何构建映像的``配置
*   描述如何创建和启动容器的``配置
下面是 Docker 的`fabric8` Maven 插件配置的一个最简单的例子:
```
 io.fabric8
 docker-maven-plugin
 0.20.1
 http://127.0.0.1:2375
 true
 rest-example:${project.version}
 Dockerfile
 artifact
```
``指定了正在运行的 Docker 引擎的 IP 地址和端口，所以当然，要构建它，您需要首先运行 Docker。在前面的例子中，如果你从外壳运行`mvn clean package docker:build`命令，Fabric8 Docker 插件将使用你提供的`Dockerfile`来构建映像。但是还有另外一种建立形象的方式，完全不用`Dockerfile`，至少不用明确定义。为此，我们需要稍微改变一下插件配置。看看修改后的配置:
```
 rest-example:${project.version}
 rest-example
 jeanblanchard/java:8
 artifact
 java -jar 
 maven/${project.name}-${project.version}.jar
```
如你所见，我们不再提供`Dockerfile`。相反，我们只是提供`Dockerfile`指令作为插件配置元素。这非常方便，因为我们不再需要硬编码可执行的 jar 名称、版本等。它将取自 Maven 构建范围。例如，将为``元素提供罐子的名称。这将导致自动在`Dockerfile`中生成有效的`CMD`指令。如果我们现在使用`mvn clean package docker:build`命令构建项目，Docker 将使用我们的应用构建一个映像。让我们按字母顺序列出可供我们使用的配置元素:
| **元素** | **描述** |
| `assembly` | ``元素定义了如何构建工件和其他可以进入 Docker 映像的文件。您可以使用`targetDir`元素来提供一个目录，在该目录下包含在组件中的文件和工件将被复制到映像中。这个的默认值是`/maven`。在我们的示例中，我们将使用``来提供预定义的装配描述符之一。``是一种便捷的捷径，可以取以下值:
*   `artifact-with-dependencies`:附加一个项目的工件及其所有依赖项。此外，当目标目录中存在类路径文件时，它将被添加到。
*   `artifact`:只附加项目的工件，不附加依赖项。
*   `project`:附加整个 Maven 项目，但没有`target/`目录。
*   `rootWar`:将神器复制为`ROOT.war`到`exposed`目录。例如，Tomcat 然后可以在`root`上下文下部署战争。
 |
| `buildArgs` | 允许提供指定 Docker `buildArgs`值的映射，当使用使用构建参数的外部 Dockerfile 构建映像时，应使用该映射。键值语法与定义 Maven 属性(或`labels`或`env`)时相同。 |
| `buildOptions` | 指定构建映像时提供给 Docker 守护程序的构建选项的映射。 |
| `cleanup` | 这有助于在每次构建后清理未标记的映像(包括从它们创建的任何容器)。默认值是`try`，它试图删除旧的映像，但是如果这是不可能的，则不会导致构建失败，例如，因为该映像仍由正在运行的容器使用。 |
| `cmd` | 这相当于我们已经知道的`CMD`指令，用于提供默认执行的命令。 |
| `compression` | 可以取`none`(默认)、`gzip`或`bzip2`值。它允许我们指定压缩模式以及如何将构建档案传输到 Docker 守护程序(`docker:build`)。 |
| `entryPoint` | 相当于 Dockerfile 中的`ENTRYPOINT`。 |
| `env` | 相当于 Dockerfile 中的`ENV`。 |
| `from` | 相当于 Dockerfile 中的`FROM`，用于指定基础映像。 |
| `healthCheck` | 相当于 Dockerfile 中的`HEALTHCHECK`。 |
| `labels` | 用于定义标签，与 Dockerfile 中的`LABEL`相同。 |
| `maintainer` | 相当于 Dockerfile 中的`MAINTAINER`。 |
| `nocache` | 用于禁用 Docker 的构建层缓存。这可以通过在运行 Maven 命令时设置系统属性`docker.nocache`来覆盖。 |
| `optimize` | 如果设置为真，那么它将把所有的`runCmds`压缩成一个单一的`RUN`指令。强烈建议尽量减少创建的映像层数。 |
| `ports` | 相当于 Dockerfile 中的`EXPOSE`。这是一个``元素列表，每个端口暴露一个。格式可以是纯数字的`"8080"`或附加协议的`"8080/tcp"`。 |
| `runCmds` | 相当于`RUN`，在构建过程中要运行的命令。它包含将被传递到外壳的``元素。 |
| `tags` | 可以包含一个``元素列表，以提供映像在构建后要标记的附加标签。 |
| `user` | 相当于 Dockerfile 中的`USER`，它指定 Dockerfile 应该切换到的用户。 |
| `volumes` | 包含一个等效的`VOLUME`列表，一个创建容器体积的``元素列表。 |