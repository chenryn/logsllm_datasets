petition is Ô¨Åerce in the browsers‚Äô scene, and vendors are
trying hard to adopt new technologies and provide a better
platform for web applications. Based on that observation,
in this section, we examine if we can determine a browser‚Äôs
version based on the new functionality that it introduces. We
chose Google Chrome as our testing browser and created
a library in JavaScript that tests if speciÔ¨Åc functionality is
implemented by the browser. The features that we selected to
capture different functionality were inspired by web design
compatibility tests (where web developers verify if their web
application is compatible with a speciÔ¨Åc browser). In total,
we chose 187 features to test in 202 different versions of
Google Chrome, spanning from version 1.0.154.59 up to
22.0.1229.8, which we downloaded from oldapps.com and
which covered all 22 major versions of Chrome. We found
that not all of the 187 features were useful; only 109 actually
changed during Google Chrome‚Äôs evolution. These browser
550
	
	





























Figure 4. A comparison between how many distinguishable feature sets
and minor Google Chrome versions we have per Google Chrome‚Äôs major
versions.
versions covered not only releases from the stable channel
of Google Chrome, but also from Beta and Dev channels.
We refer to a major version as the Ô¨Årst number of Google
Chrome‚Äôs versioning system, and to minor version as the
full number of the version. We used a virtual machine with
Windows XP to setup all browser versions, and used all
versions to visit our functionality-Ô¨Ångerprinting page.
In total, we found 71 sets of features that can be used to
identify a speciÔ¨Åc version of Google Chrome. Each feature
set could identify versions that range from a single Google
Chrome version up to 14 different versions. The 14 Chrome
versions that were sharing the same feature set were all part
of the 12.0.742.* releases. Among all 71 sets, there were
only four cases where the same feature set was identifying
more than a single major version of the browser. In all of
these cases, the features overlapped with the Ô¨Årst Dev release
of the next major version, while subsequent releases from
that point on had different features implemented. In Figure 4,
we show how many minor versions of Chrome we examined
per major version and how many distinct feature sets we
found for each major version. The results show that we can
not only identify the major version, but in most cases, we
have several different feature sets on the same major version.
This makes the identiÔ¨Åcation of the exact browser version
even more Ô¨Åne-grained.
In Figure 5, we show how one can distinguish all
Google Chrome‚Äôs major versions by checking for speciÔ¨Åc
features. Every pair of major versions is separated by a
feature that was introduced into the newer version and
did not exist in the previous one. Thus, if anyone wants
to distinguish between two consecutive versions, a check
of a single feature is sufÔ¨Åcient to do so. Notice that our
results indicate that we can perform even more Ô¨Åne-grained
version detection than the major version of Google Chrome
(we had 71 distinct sets of enabled features compared to 22
versions of Chrome), but for simplicity we examined only
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 






 !





"

!
 




 

#
 




 










   
   
 	 
  
Figure 5. Feature-based Ô¨Ångerprinting to distinguish between Google Chrome major versions
the major version feature changes in detail.
Miscellaneous:
In this section, we list additional
browser-speciÔ¨Åc behaviors that were uncovered through our
experiment but that do not fall in the previous categories.
Our enumeration of object-properties indirectly uses
the method toString() for the examined objects. By
comparing the formatted output of some speciÔ¨Åc prop-
erties and methods, we noticed that different browsers
treated them in slightly different ways. For
instance,
when calling toString() on the natively implemented
navigator.javaEnabled method, browsers simply
state that it is a ‚Äúnative function.‚Äù Although all the examined
browser families print ‚Äúfunction javaEnabled() { [native
code] },‚Äù Firefox uses newline characters after the opening
curly-bracket and before the closing one. Interestingly, Inter-
net Explorer does not list the navigator.javaEnabled
when requested to enumerate the navigator object, but
still provides the ‚Äúnative function‚Äù print-out when asked
speciÔ¨Åcally about the javaEnabled method. In the same
spirit, when our scripts invoked the toString() method
on the navigator.plugins object, Google Chrome
reported ‚Äú[object DOMPluginArray],‚Äù Internet Explorer re-
ported ‚Äú[object],‚Äù while both Mozilla Firefox and Opera
reported ‚Äú[object PluginArray].‚Äù
Lastly, while trying out our Ô¨Ångerprinting page with
various browsers, we discovered that Internet Explorer lacks
native support for Base64 encoding and decoding (atob and
btoa, respectively) which our script used to encode data
before sending them to the server.
C. Summary
Overall, one can see how various implementation choices,
either major ones, such as the traversal algorithms for
JavaScript objects and the development of new features, or
minor ones, such as the presence or absence of a newline
character, can reveal the true nature of a browser and its
JavaScript engine.
V. ANALYSIS OF USER-AGENT-SPOOFING EXTENSIONS
With the advent of browser add-ons, many developers
have created extensions that can increase the security of
users (e.g., extensions showing HTML forms with non-
secure destinations) or their privacy (e.g., blocking known
ads and web-tracking scripts).
Extension
#Installations
User Rating
Mozilla Firefox
604,349
23,245
11,044
5,648
2,262
2,157
1,657
1,138
123,133
21,108
28,623
4/5
4/5
4/5
3/5
4/5
5/5
4/5
3/5
4/5
3.5/5
4/5
UserAgent Switcher
UserAgent RG
UAControl
UserAgentUpdater
Masking Agent
User Agent Quick Switch
randomUserAgent
Override User Agent
Google Chrome
User-Agent Switcher for Chrome
User-Agent Switcher
Ultimate User Agent Switcher,
URL sniffer
LIST OF USER-AGENT-SPOOFING BROWSER EXTENSIONS
Table IV
In the context of this paper, we were interested in studying
the completeness and robustness of extensions that attempt
to hide the true nature of a browser from an inspecting
website. As shown in Table I, while the studied companies
do attempt to Ô¨Ångerprint a user‚Äôs browser customizations,
they currently focus only on browser-plugins and do not
attempt to discover any installed browser-extensions. Given
however the sustained popularity of browser-extensions [33],
we consider it likely that Ô¨Ångerprinting extensions will be
the logical next step. Note that, unlike browser plugins,
extensions are not enumerable through JavaScript and, thus,
can only be detected through their side-effects. For instance,
some sites currently detect the use of Adblock Plus [34]
by searching for the absence of speciÔ¨Åc iframes and DOM
elements that are normally created by advertising scripts.
Since a browser exposes its identity through the user-
agent Ô¨Åeld (available both as an HTTP header and as a
property of the JavaScript-accessible navigator object),
we focused on extensions that advertised themselves as
capable of spooÔ¨Ång a browser‚Äôs user agent. These extensions
usually serve two purposes. First, they allow users to surf to
websites that impose strict browser requirements onto their
visitors, without fulÔ¨Ålling these requirements. For instance,
some sites are developed and tested using one speciÔ¨Åc
browser and, due to the importance of the content loading
correctly, refuse to load on other browsers. Using a user-
agent-spooÔ¨Ång extension, a user can visit such a site, by
pretending to use one of the white-listed browsers.
551
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
Google
Chrome
navigator.product
Gecko
navigator.appCodeName Mozilla
navigator.appName
Netscape
Mozilla
Firefox
Gecko
Mozilla
Netscape
navigator.platform
navigator.vendor
Linux
i686
Google
Inc.
Linux
x86 64
(empty
string)
MSIE
Opera
N/A
Mozilla
Microsoft
Internet
Explorer
Win32
N/A
N/A
Mozilla
Opera
Linux
N/A
STANDARD PROPERTIES OF THE NAVIGATOR OBJECT AND THEIR
Table V
VALUES ACROSS DIFFERENT BROWSER FAMILIES
Another reason for using these extensions is to protect
the privacy of a user. Eckeresly, while gathering data for
the Panopticlick project, discovered that there were users
whose browsers were reporting impossible conÔ¨Ågurations,
for instance, a device was pretending to be an iPhone, but
at the same time had Adobe Flash support. In that case, these
were users who were obviously trying to get a non-unique
browser Ô¨Ångerprint by Panopticlick. Since Eckersley‚Äôs study
showed the viability of using common browser features
as parts of a unique Ô¨Ångerprint, it is reasonable to expect
that legitimate users utilize such extensions to reduce the
trackability of their online activities, even if the extensions‚Äô
authors never anticipated such a use. Recently, Trusteer
discovered in an ‚Äúunderground‚Äù forum a spooÔ¨Ång-guide that
provided step-by-step instructions for cybercriminals who
wished to fool fraud-detection mechanisms that used device-
Ô¨Ångerprinting [35]. Among other advice, the reader was
instructed to download an extension that changes the User-
Agent of their browser to make their sessions appear as if
they were originating by different computers with different
browsers and operating systems.
Table IV shows the Mozilla Firefox and Google Chrome
extensions that we downloaded and tested, together with
their user base (measured in July 2012) and the rating
that their users had provided. The extensions were discov-
ered by visiting each market, searching for ‚Äúuser-agent‚Äù
and then downloading all the relevant extensions with a
sufÔ¨Åciently large user base and an above-average rating.
A high rating is important because it indicates the user‚Äôs
satisfaction in the extension fulÔ¨Ålling its purpose. Our testing
consisted of listing the navigator and screen objects
through JavaScript and inspecting the HTTP headers sent
with browser requests, while the extensions were actively
spooÔ¨Ång the identity of the browser. As in Section IV,
we chose to focus on these two objects since they are
the ones that are the most vendor-speciÔ¨Åc as well as the
most probed by the Ô¨Ångerprinting libraries. Through our
analysis, we discovered that, unfortunately,
in all cases,
the extensions were inadequately hiding the real identity of
the browser, which could still be straightforwardly exposed
through JavaScript. Apart from being vulnerable to every
Ô¨Ångerprinting technique that we introduced in Section IV,
each extension had one or more of the following issues:
‚Ä¢ Incomplete coverage of the navigator object. In
many cases, while an extension was modifying the
navigator.userAgent property,
it would leave
intact other revealing properties of the navigator ob-
ject, such as appName, appVersion and vendor
- Table V. Moreover, the extensions usually left the
navigator.platform property intact, which al-
lowed for improbable scenarios, like a Microsoft In-
ternet Explorer browser running on Linux.
‚Ä¢ Impossible conÔ¨Ågurations. None of the studied ex-
tensions attempted to alter the screen object. Thus,
users who were utilizing laptops or normal workstations
and pretended to be mobile devices, were reporting
impossible screen width and height (e.g., a reported
1920x1080 resolution for an iPhone).
‚Ä¢ Mismatch between User-agent values. As discussed
earlier, the user-agent of any given browser is accessible
through the HTTP headers of a browser request and
through the userAgent property of the navigator
object. We found that some extensions would change
the HTTP headers of the browser, but not of the
navigator object. Two out of three Chrome exten-
sions were presenting this behavior.
We want to stress that these extensions are not malicious
in nature. They are legitimately-written software that unfor-
tunately did not account for all possible ways of discovering
the true identity of the browsers on which they are installed.
The downside here is that, not only Ô¨Ångerprinting libraries
can potentially detect the actual identity of a browser, thus,
undermining the goals of the extension, but also that they
can discover the discrepancies between the values reported
by the extensions and the values reported by the browser,
and then use these differences as extra features of their
Ô¨Ångerprints. The discrepancies of each speciÔ¨Åc extension
can be modeled and thus, as with Adblock Plus, used to
uncover the presence of speciÔ¨Åc extensions, through their
side-effects.
The presence of any user-agent-spooÔ¨Ång extension is a
discriminatory feature, under the assumption that the major-
ity of browsing users are not familiar enough with privacy