### Evaluation of Property Domain Similarity Using SemDS

SemDS is a function used to evaluate the similarity between the domains (concept classes) of two properties, denoted as \( o \) and \( i \). For instance, the properties "gDay" and "day" have their respective domain concepts, TheDate and Calendar-Date. This can be represented as:
- \( d(gDay) = \text{TheDate} \)
- \( d(day) = \text{Calendar-Date} \)

To calculate the similarity, SemDS, between TheDate and Calendar-Date, we use the following formula:
\[ \text{SemDS(TheDate, Calendar-Date)} = \frac{| p(\text{TheDate}) \cap p(\text{Calendar-Date}) |}{| p(\text{TheDate}) \cup p(\text{Calendar-Date}) |} \]

Where:
- \( p(\text{TheDate}) = \{ gMonth, gYear, gDay \} \)
- \( p(\text{Calendar-Date}) = \{ \text{absolute_time, year, month, day, dayOfTheWeek, monthOfTheYear} \} \)

Using this, we get:
\[ \text{SemDS(TheDate, Calendar-Date)} = \frac{1}{2} = 0.5 \]

This result indicates that the domains of the properties "gDay" and "day" are somewhat similar, which aligns with our understanding that TheDate and Calendar-Date are related concepts.

### Syntactic Similarity Using SynS

The second function, SynS, evaluates the syntactic similarity between the names of two properties, \( no \) and \( ni \). For example, the similarity between "gDay" and "day" is calculated as:
\[ \text{SynS(gDay, day)} = 0.8 \]

This high value suggests a close syntactic similarity between the two property names. Other examples include:
- \( \text{SynS(gDay, dayOfTheWeek)} = 0.29 \)
- \( \text{SynS(gMonth, monthOfTheYear)} = 0.44 \)

### Range Similarity Using SemRS

The third function, SemRS, calculates the similarity of the ranges of two properties, \( o \) and \( i \). For the properties "gDay" and "day", the range similarity is:
\[ \text{SemRS(r(gDay), r(day))} = \text{SemRS(short, integer)} = 1.0 \]

This result indicates that the workflow system supports connecting parameters of type "short" to those of type "integer". An example of an unsupported connection is:
\[ \text{SemRS(r(gDay), r(dayOfTheWeek))} = \text{SemRS(short, string)} = 0.0 \]

### Overall Similarity Using Function S

With the values from SemDS, SynS, and SemRS, we can compute the overall similarity using the function \( S \):
\[ S(o, i) = \text{SemDS} \times \text{SynS} \times \text{SemRS} \]

For "gDay" and "day":
\[ S(gDay, day) = 0.5 \times 00.8 \times 1.0 = 0.74 \]

### Table of Similarity Results

Table 4-7 shows the results of applying function \( S(o, i) \) to various properties of the concept classes TheDate and Calendar-Date.

| \( o \)        | \( i \)              | SemDS | SynS | SemRS | \( S \)  |
|----------------|----------------------|-------|------|-------|----------|
| gMonth         | dayOfTheWeek         | 0.5   | 0.12 | 0.0   | 0.0      |
| gYear          | monthOfTheYear       | 0.5   | 0.35 | 0.0   | 0.0      |
| gDay           | month                | 0.5   | 0.0  | 1.0   | 0.0      |
| gDay           | year                 | 0.5   | 0.0  | 1.0   | 0.0      |
| gDay           | day                  | 0.5   | 0.8  | 1.0   | 0.74     |
| gDay           | time                 | 0.5   | 0.0  | 1.0   | 0.0      |
| gDay           | monthOfTheYear       | 0.5   | 0.0  | 0.0   | 0.0      |
| gYear          | year                 | 0.5   | 0.86 | 1.0   | 0.75     |
| gMonth         | monthOfTheYear       | 0.5   | 0.44 | 0.0   | 0.0      |
| gMonth         | month                | 0.5   | 0.89 | 1.0   | 0.76     |

### Cumulative Degree of Similarity Using SemS’’

Once all possible mappings between the properties of the output concept class TheDate and the input concept class Calendar-Date are evaluated, the function SemS’’ (TheDate, Calendar-Date) returns the cumulative degree of similarity. Table 4-8 shows the results for five cases initially considered.

| ST            | O                    | I                | SemS’’(O, I) |
|---------------|----------------------|------------------|--------------|
| (a) TheDate   | Date                 | 2.58             |
| (b) TheDate   | Calendar-Date        | 2.25             |
| (c) TheDate   | Event                | 2.14             |
| (d) TheDate   | Scientific-Event     | 2.05             |
| (e) TheDate   | Time-Point           | 0.00             |

### Normalized Similarity Using Function p

The function \( p(O, I) \) normalizes SemS’’ (O, I) with respect to the number of input properties of the concept class \( I \). Table 4-9 shows the results.

| ST            | O                    | I                | \( p(O, I) \) |
|---------------|----------------------|------------------|---------------|
| (a) TheDate   | Date                 | 0.65             |
| (b) TheDate   | Calendar-Date        | 0.38             |
| (c) TheDate   | Event                | 0.31             |
| (d) TheDate   | Scientific-Event     | 0.26             |
| (e) TheDate   | Time-Point           | 0.00             |

### Mapping Outputs with Inputs

While the algorithm does not explicitly show how the mapping between the outputs and inputs of two services is constructed, it achieves this by keeping track of the best mapping obtained when computing functions \( P(Os, Is) \) and SemS’’ (O, I).

### System Architecture

Our prototype system consists of two main services: registry service and discovery service, as illustrated in Figure 4-9. Both services are implemented using servlets and are accessible via HTTP. We are considering extending the access to allow RMI calls.

#### Registry Service
Suppliers can advertise and unadvertise their Web services. To advertise, a supplier registers a DAML-S service object (SO) with the system. To unadvertise, only the service name is required.

#### Discovery Service
Clients and customers can find previously registered Web services by sending a service template (ST) to the system. The ST specifies the requirements for the service to be discovered. Service templates are described using DAML-S, specifically the profile.daml ontology.

### Related Work

Our work is closely related to ontology-based Web service discovery, search, match, and integration. Key related works include:

- **Paolucci, Kawamura et al. (2002)**: They present an algorithm for localizing Web services but do not address interoperability. Their approach considers only matching input/output concepts defined by the same ontology.
- **González-Castillo, Trastour et al. (2001)**: They use DAML+OIL to semantically describe Web services and match services based on a subsumption tree. However, they do not account for relationships among concepts defined within different ontologies.
- **LARKS (Sycara, Klusch et al. 1999)**: This system uses a specific language for service advertisements and requests. It does not provide an automatic solution for computing the similarity of concepts defined in distinct ontologies.
- **(KA)2 (Bejamins and Fensel 1998)**: An ontology-based information retrieval system that allows a community to build a knowledge base collectively.
- **FindUr (McGuinness 1998)**: Focuses on query expansion and online searching, improving search recall and precision.
- **OntoSeek (Guarino, Masolo et al. 1999)**: Improves content-based searches in specific information repositories like yellow pages and product catalogues.
- **Richardson and Smeaton (1995)**: Introduce a semantic distance measurement for information retrieval.
- **Carnot, InfoSleuth, SIMS, OBSERVER, COIN**: These projects use ontologies for information integration but require user involvement to resolve differences among ontologies.

### Conclusions

In this paper, we address the challenges brought by the emergence of Web services and e-services. We present a methodology and set of algorithms for Web service discovery based on syntax, operational metrics, and semantics. This approach allows for efficient discovery and integration of Web services into workflows, facilitating the translation of organizational visions into business processes. Our prototype system uses ontologies to describe workflow tasks and Web service interfaces, enabling the resolution of structural and semantic differences during integration.