that different users are assigned with different tokens, and
we can therefore align and diff their requests for the same
web API by using two different users. Such a protocol
alignment and difﬁng approach has been widely used by
many protocol reverse engineering systems (e.g., [2], [9],
[42], [43]), and we just use the one from the Protocol
Informatics (PI) project [2].
C. Implementation
We have implemented our analysis tool atop the Xposed [3]
framework, which allows the dynamic interception of all of the
Android APIs including system APIs. The execution of these
APIs is logged into a log ﬁle, in which each entry contains
the API name,
the value of parameters, and return value.
To resolve the web APIs from the log ﬁle, we just develop
standard parsing with python scripts. In particular, we depend
on urllib, zlib, json, and xml python libraries to parse
and decode the content of the web API. Finally, to infer the
tokens in the request and response messages, we use the open
source message ﬁeld alignment and difﬁng implementation
from PI [2].
The last piece of our tool is a standalone data scraping
component that is able to collect the nearby driver information
by sending a large volume of request messages to the RHS
server with proper parameters. With our web API reverse en-
gineering component, the implementation of this task becomes
quite simple. In particular, we just developed a python script
that sends HTTP(S) request messages to the servers by using
the token obtained in the web API reverse engineering and
mutating the GPS coordinates of our interest. If the token
requires refresh, we execute the refresh token API with proper
parameters as well. Please note that these parameters have
already been identiﬁed by our data dependency algorithm.
To summarize, for each analyzed RHS app, we ﬁrst in-
stalled the app in an instrumented Android device where
most of the Android APIs are interposed and their executions
are logged. For each selected app, we also created two user
accounts for each service. Then, we performed a user login
request and reached the view where the cars are displayed
on a map, by using the two users we registered. Next, we
analyze the log ﬁle to resolve the web APIs of our interest and
Rider App
RL1
RL2
SM1
SM2
GPS
AN1
AN2
Uber
Easy
Gett
Lyft
myTaxi
Taxify
BiTaksi
Heetch
Jeeny
Flywheel
GoCatch
miCab
RideAustin
Ztrip
eCab
GroundLink
HelloCabs
Ride LA
Bounce
DC Taxi Rider
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
∞
∞
∞
24h
∞
∞
∞
∞
∞
20m
∞
∞
∞
30m
∞
∞
∞
∞
∞
∞
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
∞
∞
∞
∞
20m
∞
∞
∞
20m
10m
∞
∞
∞
∞
∞
∞
∞
∞
∞
∞
#
#
#
#
#
#
Table II: List of countermeasures. Values:   for countermea-
sure present, # for countermeasure missing, "-" for unknown,
and ∞ for not expired. Columns: RL1 for Reqs/s, RL2 for
Different IPs, SM1 for Authn, SM2 for Session Life-Span,
GPS for Anti-GPS Spooﬁng, AN1 for Identiﬁer Life-Span,
AN2 for Driver Info.
identify the dependencies. After that, we run our standalone
data scraping component to scrape the nearby cars. We refer
to §IV and §V for the description of the individual test of the
apps.
IV. SECURITY ANALYSIS OF NEARBY CARS API
We now present our security analysis of Nearby Cars APIs.
The goal of this analysis is to identify server-side mechanisms
and possible countermeasures that can block or slow down
the attacker’s operations. The list of the countermeasures is
presented in §IV-A and the analysis results are presented in
§IV-B.
A. Analysis Description
The ﬁrst step of our analysis is to prepare a list of
countermeasures to evaluate. We reviewed publicly available
documents such as ride-hailing apps’ API documentation for
developers and the best practices for web service development4
to search for known countermeasures covering the following
categories: rate limiting, anti-GPS spooﬁng, session manage-
ment, data anonymization, and anti-data scraping. Table II
shows the list of countermeasures. In the rest of this section,
we discuss each category and provide details of our tests.
Rate Limiting. Rate limiting is a technique that is used to limit
the number of requests processed by online services, and it is
often used to counter denial of service (DoS) attacks. Based on
our threat model, the attacker can take advantage of multiple
computers to perform a large number of requests. Accordingly,
we considered two countermeasures: per-user rate limits on the
4See, the "OWASP REST Security Cheat Sheet" https://www.owasp.org/
index.php/REST_Security_Cheat_Sheet and the "OWASP Web Service Se-
curity Cheat Sheet" https://www.owasp.org/index.php/Web_Service_Security_
Cheat_Sheet
number of requests and per-user limits on the number of IPs
used.
(RL1) Rate Limits Reqs/s: Servers can limit the number
of requests processed over a period of time. The
rate limits can be enforced for each user or
web server. When the limit is reached, the web
server may respond with a “429 Too Many
Requests” response status. We populated this
column using the information we gathered from
the ride-hailing service documentations. Only
Uber and Lyft describe the rate limits based on
the frequency of requests per second and the total
amount of requests per user. The other services
do not share these details. However, during our
experiments, we discovered that Taxify and eCab
implement rate limits. Nevertheless, these limits
are enforced when administrators suspect under-
going malicious activities, e.g., DoS.
(RL2) Different IPs: RHSes may be recording the IPs
for every user who logs in as a measure to mit-
igate session hijacking attacks. When the server
detects a new IP,
it may require the user to
be re-authenticated. To populate this column, we
checked the behavior of the server when process-
ing parallel requests from the same user session
using different source IPs. We used two sources:
an IP of the DigitalOcean Inc. network, and the
other of our own campus network.
Session Management. Session management encompasses the
mechanisms to establish and maintain a valid user session.
It includes user authentication, generation, and validation of
session identiﬁers. In this analysis, we focus on those aspects
that can limit attacker activities.
(SM1) Authentication: The ﬁrst aspect we intend to
check is whether the access to Nearby Cars API is
restricted to the authenticated user only. We verify
this by checking for the presence of a session ID
in the Nearby Cars API request.
(SM2) Session Lifespan: The second aspect is the life-
span of user sessions that may slow down attack-
ers. For example, shorter validity time windows
may require the attacker to re-authenticated fre-
quently. We measure the session lifespan by call-
ing the Nearby Cars API over an extended period.
When we receive an error message, e.g., HTTP
response “4xx” series status code or a response
with a different response body format (e.g., keys
of JSON objects), we mark this session as expired.
We did not design ad-hoc experiments for that,
but we monitored errors during the experiments
of §V.
Anti-GPS Spooﬁng. The attacker spoofs GPS coordinates to
fetch nearby cars. As such, services may deploy mechanisms to
verify whether the GPS position is consistent with other mea-
surements, e.g., nearby WiFi networks and nearby cell towers5.
For this category, we do not enumerate and test possible
5See https://developer.android.com/guide/topics/location/strategies
6
countermeasures, but we verify the presence of mechanisms
that would prevent an attacker from rapidly changing position
via GPS spooﬁng. For this test, we spoofed GPS coordinates
so that the users will appear in very distant places at the same
time. We ﬁrst identiﬁed at least two cities where each ride-
hailing service operates. For example, for Lyft, we selected 11
cities and performed one request per second for each city for
twenty times. Four services, i.e., Bounce, RideAustin, RideLA,
and DC Taxi Rider, operate in a single city. In these cases, we
picked distant points within the same city.
Anonymization. This category contains countermeasures to
hide sensitive information and make it hard for an attacker
to reveal drivers’ identities. We derived this list by manually
inspecting the content of Nearby Cars API responses.
(AN1)
Identiﬁer Lifespan: As shown in Figure 2, the
Nearby Cars API’s responses carry identiﬁers for
either cars or drivers in most cases. In this study,
we assume each driver is binding to a unique
car, which means the identiﬁer for a car and
for a driver is conceptually equivalent. These
identiﬁers can be used to track cars and drivers
across different responses. Shortening the lifespan
of identiﬁers may mitigate this problem. Then,
we tested the time it takes for an identiﬁer to be
updated. As discussed for the session ID lifespan,
we measured the identiﬁer lifespans during the
experiments of §V.
(AN2) Personally Identiﬁable Information: We inspect
the responses looking for personally identiﬁable
information. We looked for the ﬁrst and last name,
email, phone numbers, and others.
B. Results
We now present the main results of our analysis. Results
are presented in Table II.
Rate Limiting. Uber, Lyft, and Gett are the only three services
provide publicly available API documentations. According to
Uber’s documentation, Uber enforces a limit of 2, 000 requests
per hour and a maximum peaks of 500 requests per second per
user. In our experiments, we observed that the real rate limit
is much lower, i.e., one request per second. As the Nearby
Cars API is undocumented, we speculated that this may be a
particular rate limit of the Nearby Cars API only. Lyft reports
the presence of rate limits; however, they do not disclose the
actual thresholds. Gett does not report the presence of rate
limits.
For Taxify and eCab, we discovered rate limits at about
two requests per second. These limits were not always present,
but they were enforced after they notiﬁed us about suspicious
trafﬁc originated from our servers.
Service name
Sensitive information
Lyft
HelloCabs
Ride LA
DC Taxi Rider
miCab
Bounce
Driver avatar
Name, phone number
Name, phone number
Name, phone number, email
Account creating time, account
number, hiring status
Name, date of birth, driver avatar, phone number, social
security number, driver license number, driver license ex-
piration date, home address, bank account number, routing
number, account balance, vehicle inspection details, vehicle
insurance details
last update time, device
Table III: List of personally identiﬁable information of drivers