21}
---
## Page 938
CTF特训营：技术详解、解题方法与
25.2使用IDAPro静态分析
938/1144
图25-3IDAPro查看反编译的C代码
可能有读者会产生这样的疑问，这个JNI_OnLoad函数为什么与
标准的定义不一样？里面的代码要如何处理？这里就要讲一下逆向过
程中的第一个技巧：重定义函数参数类型
首先，我们将光标移动到函数名“JNI_OnLoad”上，然后右键
选择“Setitemtype”或者直接按y快捷键，弹出修改函数名称及参数
的选项，将函数定义改成标准形式（这里还是保留”fastcall”参
数），如图25-4所示。
Cencel
图25-4IDAPro修改参数类型
然后点击OK，函数的参数就被修改了，同时，代码中原先的各
种调用也成功显示出来了，如图25-5所示。
---
## Page 939
CTF特训营：技术详解、解题方法与
25.2使用IDAPro静态分析
939/1144
1int
fastcall JNI_OnLoad（JavaVM *vm,void *reserved)
2
E
intv2;//r4@1
int result;//r0@5
5
intv4;//
[sp+0h]
[bp-10h]@3
6
intv5;//
[sp+4h]
[bp-Ch]e5
7
V2
65542;
9
if
（（int（*）（void))（*vm)->GetEnv)()）
10
11
V2
-1;
12
上
13
else
if（1sub_1900（v4)）
14
15
V2
-1;
16
17
result =
stack chk_guard-v5;
18
if（
stack_chk_guard
v5）
19
result =v2;
20
return result;
21}
图25-5IDAPro查看反编译效果
同样的，在处理标准的Native方法命名的函数时也是一样的思路。
因为标准的Native方法命名的函数，其前两个参数是确定的，但是后
面还有几个参数，这个是与Java层里面的定义相关的。有时候，IDA
Pro并不能正确地识别参数个数，需要手动修改函数的定义，我们只
需要将函数参数类型修改为正确的类型即可，例如jobject、jstring、
jint等，这些AndroidNDK的标准类型目前都是受IDAPro支持的。
下面讲解在逆向分析过程中往往会被忽视的部分一init_array
---
## Page 940
CTF特训营：技术详解、解题方法与
25.2使用IDAPro静态分析
940/1144
段。
要想查看该字段，首先要打开IDAPro的Segments窗口，具体方
法我们可以依次点击菜单栏的View→Opensubviews→Segments来操
作，如图25-6所示是某个so文件的Segments窗口。
ID....
Ps...
Pr..
Ps..
He...
St..
En...
Name
Start
End
R
XM
D
L
Align
BaseTy
plt
000011DC
00001484
R
X
L
01
PL
.text
00001484
00002F28
R
x
L
pomp
02
ARM.extab
00002F28
00002F64
R
L
puomp
03
PL
.rodata
00003098
000051D9
R
L
qword
04
fini_array
W
PL
00006DCO
00006DC8
R
L
dword
05
init_array
00006DC8
00006DD0
R
W
L
dword
06
PL
-got
00006EF8
00007000
R
W
L
dword
07
.data
00007000
0000700C
W
L
puomp
08
PL
.bss
0000700C
0000700D
R
W
L
byte
09
PL
extern
00007010
000070A4
？
？
L
para
OA
PL
abs
00007160
0000716C
？
？
7
L
para
OB
PL
图25-6IDAPro查看段表
我们可以从这里看到init_array，双击进入该字段，如图25-7所示。
rray:00006Dc8
;Segment type:Puredata
rray:00006Dc8
AREA.init_array,DATA
rray:00006DC8
;ORG0x6DC8
rray:00006DC8
DCD sub_14C0+1
rray:00006Dcc
ALIGN 0x10
rray:00006Dcc;.init_array
ends
---
## Page 941
CTF特训营：技术详解、解题方法与
25.2使用IDAPro静态分析
941/1144
图25-7
IDAPro查看init_array
双击进入sub_14C0，可以看到隐藏的代码，如图25-8所示。
0
;Attributes: bp-based frame
0 sub_14c0
;DATaxREF:.init_array:00006Dc8↓o
opid
var_190
-0x194
口
-0x190
form
0x110
var_10
-0x90
-0x10
M'HSO
(R4-R11,LR)
ADD
SP,SP,#0x18C
R7,SP，
SUB
1OxC
LDR
RO,
SP,#0x198+format
stack_chk_guard_ptr-0x14D4)
ADD
LDR
R4,S
R2,0x80
R1,
=（aSijkNAiaSisIik-0x14D6)
MOVS
图25-8
IDAPro查看init_array代码
那么，空的init_array段是什么样呢，如图25-9所示，全部为0。
.init_array:00003E40
AREA .init_array,DATA,ALIGN=O
.init_array:00003E40
;ORG 0x3E40
init_array:00003E40
DCB
.init_array:00003E41
DCB
0
.init_array:00003E42
DCB
0
0
.init_array:00003E43
.init_array:00003E43;.init_array
DCB
ends
0
图25-9IDAPro查看空的init_array
在比赛时，一定不要忘记看一眼init_array段，说不定会有不一样
的收获。
下一节，我们将介绍多种动态调试的方法。
---
## Page 942
CTF特训营：技术详解、解题方法与.
25.3动态调试
942/1144
25.3动态调试
本节将介绍在Android题目解题过程中经常使用到的动态调试和
HOoK方法。Native层的动态调试，与Dalvik层的动态调试的出发点
类似，都是为了绕过静态调试的究长过程，争取一步得到答案。但是
Native层的动态调试有其特殊性，因为Native层的函数可以做得很复
杂，有时静态逆向完全看不懂，此时必须以动态调试来辅助。因此
在做题时，静态调试和动态调试总是相辅相成的，不能割裂开来。
本节将介绍使用最多的两种动态调试方法一IDAPro调试和
GDB调试，还将介绍FridaHOOK框架在Native层中的应用以及一些常
用的小技巧。
---
## Page 943
CTF特训营：技术详解、解题方法与
25.3.1使用IDAPro进行动态调试
943/1144
25.3.1使用IDAPro进行动态调试
使用IDAPro进行动态调试对初学者来说最容易上手，且它的调
试界面更为友好。
使用IDAPro进行动态调试，首先需要有一个能够ROOT的手
机。现在假设我们已经有了一个能够ROOT的手机，然后开始本节的
教程。
第一步，在手机端启动lDAPro的远程调试器客户端。
先找到iDAPro自录下的androidserver文件，这个文件对应看32
立ARM处理器的Android系统调试，64位ARM处理器的Android系统调
试需要android_server64文件。如果不知道这个文件在哪里，那么直
接在IDAPro的目录下搜索即可。
找到android_server文件之后，将该文件传到手机端的/data/local/
tmp目录下。随后进入adbshell，并切换到ROoT权限，启动
android_server（没有赋予运行权限的请先赋予运行权）。下面我们
将完整命令列出，如下：
---
## Page 944
CTF特训营：技术详解、解题方法与
25.3.1使用IDAPro进行动态调试
944/1144
$adbpush android_server/data/local/tmp
Sadbshell
shell@hammerhead:/$su
shell@hammerhead:/#cd data/local/tmp/
shell@hammerhead:/data/local/tmp#chhmod777android_server
shell@hammerhead:/data/local/tmp#/android_server
IDA Android 32-bit remote debug server(ST) v1.21. Hex-Rays (c) 2004-2016
Listening on port #23946...
第二步，打开端口转发。从上面的输出可以看出，IDAPro的
android_server监听在23946端口，因此我们需要将Android上的这个
端口流量转发到调试主机上来，使用adb命令即可办到，命令如下：
$ adb forward tcp:23946 tcp:23946
这样，手机上的23946端口就绑定到我们调试主机的23946端口
了。
第三步，运行IDAPro并连接调试客户端。依次选择Debugger一
Attach→RemoteARMLinux/Androiddebugger，并填写目标调试客户
端的IP和端口，如图25-10所示，这里我们选择连接到本机的23946端
口。
---
## Page 945
CTF特训营：技术详解、解题方法与
25.3.1使用IDAPro进行动态调试
945/1144
Debug application setup:armlinux
NOTE:all paths must be valid on the remote computer
Debugoptions
Hostname
127.0.0.1
Port
23946
Password
Save network settings as default
Help
Cancel
图25-10IDAPro动态调试
点击“OK”，IDAPro会弹出一个供你选择调试进程的窗口，如
图25-11所示。
---
## Page 946
CTF特训营：技术详解、解题方法与
25.3.1使用IDAPro进行动态调试
946/1144
toattach tc
Name
1
[32]/init
1039
[32] com.android.inputmethod.latin