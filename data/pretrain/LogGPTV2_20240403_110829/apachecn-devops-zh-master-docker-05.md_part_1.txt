# 五、Docker 组合
在本章中，我们将了解另一个名为 Docker Compose 的核心 Docker 工具，以及目前正在开发的 Docker 应用。我们将把这一章分成以下几节:
*   Docker 组合简介
*   我们的第一个 Docker 编写应用
*   docker 由 YAML 文件组成
*   Docker 合成命令
*   Docker 应用
# 技术要求
与前几章一样，我们将继续使用本地 Docker 安装。同样，本章的截图将来自我的首选操作系统，macOS。
和以前一样，我们将运行的 Docker 命令将在迄今为止安装了 Docker 的所有三个操作系统上运行。然而，一些支持命令可能只适用于 macOS 和基于 Linux 的操作系统，而且数量很少。
本章所用代码的完整副本可在以下网址找到:[https://github . com/PacktPublishing/Mastering-Docker-第三版/tree/master/chapter05](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter05) 。
查看以下视频，了解《行为准则》:
[http://bit.ly/2q7MJZU](http://bit.ly/2q7MJZU)
# 介绍 Docker 写作
在第 1 章*【Docker 概述】*中，我们讨论了 Docker 旨在解决的一些问题。我们解释了它如何通过将进程隔离到单个容器中来解决并行运行两个应用的挑战，这意味着您可以在同一台主机上运行同一个软件栈的两个完全不同的版本，比如 PHP 5.6 和 PHP 7，就像我们在[第 2 章](02.html) *构建容器映像*中所做的那样。
在[第 4 章](04.html) *【管理容器】*的结尾，我们启动了一个由多个容器组成的应用，而不是在单个容器中运行所需的软件栈。我们启动的示例应用莫比计数器是用 Node.js 编写的，它使用 Redis 作为后端来存储键值，在我们的例子中，键值是 Docker 徽标在屏幕上的位置。
这意味着我们必须启动两个容器，一个用于应用，一个用于 Redis。虽然这样做很简单，因为应用本身是非常基本的，但是手动启动单个容器有很多缺点。
例如，如果我希望同事部署相同的应用，我必须向他们传递以下命令:
```
$ docker image pull redis:alpine
$ docker image pull russmckendrick/moby-counter
$ docker network create moby-counter
$ docker container run -d --name redis --network moby-counter redis:alpine
$ docker container run -d --name moby-counter --network moby-counter -p 8080:80 russmckendrick/moby-counter
```
好吧，我可以摆脱前两个命令的丢失，因为如果映像还没有被拉出来，它们将在运行期间被拉出来，但是随着应用变得越来越复杂，我将不得不开始传递一组不断增长的命令和指令。
我还必须说明，它们必须考虑到命令需要执行的顺序。此外，我的笔记必须包括任何潜在问题的细节，以支持他们解决任何问题，这可能意味着我们发现自己现在处于一个“T0”工作就是 DevOps 问题的场景中，这是我们不惜一切代价都要避免的。
虽然 Docker 的责任应该结束于创建映像和使用这些映像启动容器，但他们认为这是一个场景，该技术旨在阻止我们发现自己。多亏了 Docker，人们不再需要担心他们启动应用的环境中的不一致性，因为它们现在可以以映像形式运输。
为此，早在 2014 年 7 月，Docker 收购了一家英国小型初创公司，该公司提供两种基于容器的产品，名为“果园实验室”。
这两款产品中的第一款是基于 Docker 的托管平台:可以将其视为 Docker Machine(我们将在后面的章节中讨论)和 Docker 本身的混合。通过单个命令`orchard`，您可以启动一台主机，然后将您的 Docker 命令代理到新启动的主机；例如，您可以使用以下命令:
```
$ orchard hosts create
$ orchard docker run -p 6379:6379 -d orchardup/redis
```
这些将在果园的平台上推出一个 Docker 主机，然后推出一个 Redis 容器。
第二个产品是一个名为 **Fig** 的开源项目。Fig 允许您使用一个`YAML`文件来定义您希望您的多容器应用如何被结构化。然后，它将获取`YAML`文件，并按照定义自动启动容器。这样做的好处是，因为这是一个 YAML 文件，所以开发人员可以很容易地在他们的代码库中将`fig.yml`文件与他们的 Dockerfiles 一起发送。
在这两种产品中，Docker 为 Fig 购买了果园实验室，不久后，果园服务停止，2015 年 2 月，Fig 成为 Docker Compose。
作为我们在[第 1 章](01.html)*【Docker 概述】*中安装 Docker for Mac、Docker for Windows 和 Docker on Linux 的一部分，我们安装了 Docker Compose，因此我们不再进一步讨论它的功能，而是尝试使用 Docker Compose 调出上一章末尾手动启动的双容器应用。
# 我们的第一个 Docker 编写应用
如前所述，Docker Compose 使用一个 YAML 文件，通常命名为`dockercompose.yml`，来定义您的多容器应用应该是什么样子。我们在[第 4 章](04.html) *【管理容器】*中启动的双容器应用的 Docker Compose 表示如下:
```
version: "3"
services:
 redis:
 image: redis:alpine
 volumes:
 - redis_data:/data
 restart: always
 mobycounter:
 depends_on:
 - redis
 image: russmckendrick/moby-counter
 ports:
 - "8080:80"
 restart: always
volumes:
 redis_data:
```
即使不处理文件中的每一行，也应该很容易理解正在发生的事情。要启动我们的应用，我们只需切换到包含您的`docker-compose.yml`文件的文件夹，并运行以下命令:
```
$ docker-compose up
```
从下面的终端输出可以看出，它启动时发生了很多事情:
![](img/4e69ce24-f7a6-4080-a784-5b049cc7c666.png)
如您所见，从前几行，Docker Compose 执行了以下操作:
*   它使用我们在`docker-compose.yml`文件末尾定义的默认驱动程序创建了一个名为`mobycounter_redis_data`的卷。
*   它使用默认网络驱动程序创建了一个名为`mobycounter_default`的网络——我们从未要求 Docker Compose 这样做。一会儿再谈这个。
*   它推出了两个容器，一个叫做`mobycounter_redis_1`，第二个叫做`mobycounter_mobycounter_1`。
您可能还发现了我们的多容器应用中的 Docker Compose 名称空间，它在所有内容前面都加上了`mobycounter`。它从我们的 Docker Compose 文件存储的文件夹中取了这个名字。
一旦启动，Docker Compose 就会附加到`mobycounter_redis_1`和`mobycounter_mobycounter_1`上，并将输出流式传输到我们的终端会话。在终端屏幕上，您可以看到`redis_1`和`mobycounter_1`开始相互交互。
使用`docker-compose up`运行 Docker 作曲时，会在前台运行。按下 *Ctrl* + *C* 将停止容器并返回到您的终端会话。
# Docker 合成 YAML 文件
在我们更多地考虑使用 Docker Compose 之前，我们应该更深入地了解`docker-compose.yml`文件，因为这些是 Docker Compose 的核心。
YAML is a recursive acronym that stands for **YAML Ain't Markup Language**. It is used by a lot of different applications for both configuration and also for defining data in a human-readable structured data format. The indentation you see in the examples is very important as it helps to define the structure of the data.
# 莫比计数器应用
我们用来启动多容器应用的`docker-compose.yml`文件被分成三个独立的部分。
第一部分简单地指定了我们使用的 Docker Compose 定义语言的版本；在我们的例子中，当我们运行 Docker 和 Docker Compose 的最新版本时，我们使用的是版本 3:
```
version: "3"
```
下一部分是我们定义容器的地方；这部分是服务部分。它采用以下格式:
```
services: --> container name: ----> container options --> container name: ----> container options
```
在我们的例子中，我们定义了两个容器。为了便于阅读，我把它们分开了:
```
services:
 redis:
 image: redis:alpine
 volumes:
 - redis_data:/data
 restart: always
 mobycounter:
 depends_on:
 - redis
 image: russmckendrick/moby-counter
 ports:
 - "8080:80"
 restart: always
```
定义服务的语法类似于使用`docker container run`命令启动容器。我说关闭，是因为尽管当你阅读定义时，它非常有意义，但只有仔细观察，你才会意识到 Docker Compose 语法和`docker container run`命令之间实际上有很大的不同。
例如，运行`docker container run`命令时，没有以下标志:
*   `image:`这告诉 Docker Compose 下载和使用哪个映像。在命令行上运行`docker container run`时，该选项不存在，因为您只能运行一个容器；正如我们在前面几章中看到的，映像总是在命令的末尾定义，而不需要传递标志。
*   `volume:`这相当于`--volume flag`，但它可以接受多个卷。它只使用在 Docker Compose YAML 文件中声明的卷；稍后会有更多的介绍。
*   `depends_on:`这永远不会作为`docker container run`调用工作，因为该命令仅针对单个容器。谈到 Docker Compose，`depends_on`用来帮助构建一些逻辑到你的容器被启动的顺序中。例如，只有当容器 A 已经成功启动时，才启动容器 B。
*   `ports:`这基本上是`--publish`标志，接受端口列表。
在运行`docker container run`时，我们使用的命令中唯一具有等效标志的部分是:
*   `restart:`这与使用`--restart`标志相同，接受相同的输入。
我们的 Docker Compose YAML 文件的最后一部分是我们申报卷的地方:
```
volume:
 redis_data:
```
# 投票应用示例
如前所述，莫比计数器应用的 Docker Compose 文件是一个非常简单的例子。让我们看一下一个更复杂的 Docker Compose 文件，看看我们如何引入构建容器和多个网络。
在这本书的存储库中，你会在`chapter05`目录中找到一个名为`example-voting-app`的文件夹。这是来自官方 Docker 示例存储库的投票应用的分叉。
如您所见，如果您打开`docker-compose.yml`文件，应用由五个容器、两个网络和一个卷组成。暂时忽略其他文件；我们将在以后的章节中研究其中的一些。让我们浏览一下`docker-compose.yml`文件，因为有很多事情正在发生:
```
version: "3"
services:
```
如您所见，它从定义版本开始，然后开始列出服务。我们的第一个容器叫做`vote`；它是一个 Python 应用，允许用户提交他们的投票。从下面的定义可以看出，我们实际上不是下载映像，而是通过使用`build`而不是`image`命令从头开始构建映像:
```
 vote:
 build: ./vote
 command: python app.py
 volumes:
 - ./vote:/app
 ports:
 - "5000:80"
 networks:
 - front-tier
 - back-tier
```
这里的构建指令告诉 Docker Compose 使用 Dockerfile 构建一个容器，该文件可以在`./vote`文件夹中找到。对于 Python 应用来说，Dockerfile 本身非常简单。
一旦容器启动，我们就将`./vote`文件夹从我们的主机安装到容器中，这是通过传递我们想要安装的文件夹的路径以及我们想要它安装在容器中的什么位置来实现的。
我们告诉容器在启动时运行`python app.py`。我们正在将主机上的端口`5000`映射到容器上的端口`80`，最后，我们进一步将两个网络连接到容器，一个称为`front-tier`，另一个称为`back-tier`。
`front-tier`网络将具有必须将端口映射到主机的容器；`back-tier`网络是为不需要暴露其端口的容器保留的，充当一个私有的、隔离的网络。
接下来，我们有另一个连接到`front-tier`网络的容器。此容器显示投票结果。`result`容器包含一个 Node.js 应用，该应用连接到 PostgreSQL 数据库，稍后我们将进入该数据库，并在`vote`容器中进行投票时实时显示结果。像`vote`容器一样，映像是使用`Dockerfile`在本地构建的，可以在`./result`文件夹中找到:
```
 result:
 build: ./result
 command: nodemon server.js
 volumes:
 - ./result:/app
 ports:
 - "5001:80"
 - "5858:5858"
 networks:
 - front-tier
 - back-tier
```
我们正在暴露端口`5001`，这是我们可以连接查看结果的地方。下一个也是最后一个应用容器叫做`worker`:
```
 worker: