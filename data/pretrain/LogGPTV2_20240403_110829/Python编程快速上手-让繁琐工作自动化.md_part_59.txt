行文本。如果你先打印了一个换行字符，就不会擦除以前打印的内容。
要擦除文本，就打印\b 退格转义字符。这个特殊字符擦除屏幕当前行末尾的字
符。代码行利用字符串复制，得到了许多\b 字符构成的字符串，长度与positionStr
中保存的字符串长度一样，效果就是擦除了前面打印的字符串。
print() 调用打印\b 退格键字符时，总是传入 flush=True（其技术上的理由超出
了本书的范围）。否则，屏幕可能不会按期望更新。
while循环重复非常快，用户实际上不会注意到你在屏幕上删除并重新打印整个数
字。例如，如果x坐标是563，鼠标右移一个像素，看起来就像563中的3变成了4。
Python编程快速上手——让繁琐工作自动化
如果运行程序，只有两行打印输出。看起来像这样：
Press Ctrl-C to quit.
X: 290 Y: 424
第一行显示指令：按Ctrl-C退出。第二行显示鼠标坐标，当你在屏幕上移动鼠
标时，会变化。利用这个程序，就能搞清楚鼠标坐标，用于你的GUI自动化脚本。
18.5 控制鼠标交互
既然你知道了如何移动鼠标，弄清楚了它在屏幕上的位置，就可以开始点击、
拖动和滚动鼠标。
18.5.1 点击鼠标
要向计算机发送虚拟的鼠标点击，就调用pyautogui.click() 方法。默认情况下，
点击将使用鼠标左键，点击发生在鼠标当前所在位置。如果希望点击在鼠标当前位
置以外的地方发生，可以传入x、y坐标作为可选的第一第二参数。
如果想指定鼠标按键，就加入 button 关键字参数，值分别为 'left'、'middle'
或 'right'。例如，pyautogui.click（100，150，button='left'）将在坐标（100，150）
处点击鼠标左键。而pyautogui.click（200，250，button='right'）将在坐标（200，250）
处点击右键。
在交互式环境中输入以下内容：
>>> import pyautogui
>>> pyautogui.click(10, 5)
你应该看到鼠标移到屏幕左上角的位置，并点击一次。完整的“点击”是指按下
鼠标按键，然后放开，同时不移动位置。实现点击也可以调用pyautogui. mouseDown()，
这只是按下鼠标按键，再调用 pyautogui.mouseUp()，这只是释放鼠标按键。这些函数
的参数与click() 相同。实际上，click() 函数只是这两个函数调用的方便封装。
为了进一步方便，pyautogui.doubleClick() 函数只执行双击鼠标左键。
pyautogui.rightClick() 和pyautogui.middleClick() 函数将分别执行双击右键和双击中键。
18.5.2 拖动鼠标
“拖动”意味着移动鼠标，同时按住一个按键不放。例如，可以通过拖动文件
图标，在文件夹之间移动文件，或在日历应用中移动预约。
PyAutoGUI提供了pyautogui.dragTo() 和pyautogui.dragRel() 函数，将鼠标拖动
到一个新的位置，或相对当前位置的位置。dragTo() 和 dragRel() 的参数与
moveTo() 和 moveRel() 相同：x 坐标/水平移动，y 坐标/垂直移动，以及可选的时间间
第18章 用GUI自动化控制键盘和鼠标
隔（在OS X上，如果鼠标移动太快，拖动会不对，所以建议提供duration关键字参数）。
要尝试这些函数，请打开一个绘图应用，如 Windows 上的 Paint，OS X 上的
Paintbrush，或Linux上的GNU Paint（如果没有绘图应用，可以使用在线绘图，网
址是 http://sumopaint.com/）。我将使用 PyAutoGUI 在这些应用中绘图。
让鼠标停留在绘图应用的画布上，同时选中铅笔或画笔工具，在新的文件编辑
窗口中输入以下内容，保存为spiralDraw.py：
import pyautogui, time
 time.sleep(5)
 pyautogui.click() # click to put drawing program in focus
distance = 200
while distance > 0:
 pyautogui.dragRel(distance, 0, duration=0.2) # move right
 distance = distance - 5
 pyautogui.dragRel(0, distance, duration=0.2) # move down
 pyautogui.dragRel(-distance, 0, duration=0.2) # move left
distance = distance - 5
pyautogui.dragRel(0, -distance, duration=0.2) # move up
在运行这个程序时，会有5秒钟的延迟，让你选中铅笔或画笔工具，并让鼠
标停留在画图工具的窗口上。然后spiralDraw.py将控制鼠标，点击画图程序获得焦
点。如果窗口有闪烁的光标，它就获得了“焦点”，这时你的动作（例如打字，或
这个例子中的拖动鼠标），就会影响该窗口。画图程序获取焦点后，spiralDraw.py
将绘制一个正方形旋转图案，如图18-2所示。
图18-2 pyautogui.dragRel() 例子的结果
Python编程快速上手——让繁琐工作自动化
distance 变量从 200 开始，所以在 while 循环的第一次迭代中，第一次
dragRel() 调用将光标向右拖动200像素，花了0.2秒。然后distance降到195，
第二次dragRel() 调用将光标向下拖动195像素。第三次dragRel() 调用将光标水平
拖动−195（向左 195），distance 降到 190，最后一次 dragRel 调用将光标向上拖
动190。每次迭代，鼠标都向右、向下、向左、向上拖动，distance都比前一次迭代
小一点。通过这段代码循环，就可以移动鼠标光标，画出正方形旋转图案。
可以手工画出这个漩涡（或者说用鼠标），但一定要画得很慢，才能这么精确。
pyautogui能够几秒钟就画完。
注意 你可以在代码中使用pillow模块的画图函数，画出这个图形，更多信息请参见
第17章。但利用GUI自动化就能使用画图程序提供的高级画图工具，如灰度、不同
的画笔或填充工具。
18.5.3 滚动鼠标
最后一个 pyautogui 鼠标函数是 scroll()。你向它提供一个整型参数，说明向上
或向下滚动多少单位。单位的意义在每个操作系统和应用上不一样，所以你必须试
验，看看在你的情况下滚动多远。滚动发生在鼠标的当前位置。传递正整数表示向
上滚动，传递负整数表示向下滚动。将鼠标停留在 IDLE 窗口上，在 IDLE 的交互
式环境中运行以下代码：
>>> pyautogui.scroll(200)
你会看到 IDLE 轻松地向上滚动，然后又向下滚回来。发生向下滚动是因为，
在执行完指令后，IDLE自动向下滚动到底部。输入以下代码作为替代：
>>> import pyperclip
>>> numbers = ''
>>> for i in range(200):
numbers = numbers + str(i) + '\n'
>>> pyperclip.copy(numbers)
这导入了pyperclip，并建立一个空字符串numbers。代码然后循环200个数字，
将每个数字和换行符加入numbers。在pyperclip.copy（numbers）之后，剪贴板中将
保存200行数字。打开一个新的文件编辑窗口，将文本粘贴进去。这将得到一个很
大的文本窗口，让你尝试滚动。在交互式环境中输入以下代码：
>>> import time, pyautogui
>>> time.sleep(5); pyautogui.scroll(100)
在第二行，输入的两条命令以分号分隔，这告诉Python在运行这些命令时，就
像它们在独立的行中一样。唯一的区别在于，交互式环境不会在两个命令之间提示
第18章 用GUI自动化控制键盘和鼠标
你输入。这对于这个例子很重要，因为我们希望pyautogui.scroll() 调用在等待之后自
动发生（请注意，虽然在交互式环境中，将两条命令放在一行中可能有用，但在你
的程序中，还是应该让每条命令独占一行）。
按下回车运行代码后，你有5秒钟的时间点击文件编辑窗口，让它获得焦点。
在5秒钟的延迟结束后，pyautogui.scroll() 调用将导致文件编辑窗口向上滚动。
18.6 处理屏幕
你的 GUI 自动化程序没有必要盲目地点击和输入。pyautogui 拥有屏幕快照的
功能，可以根据当前屏幕的内容创建图形文件。这些函数也可以返回一个Pillow的
Image 对象，包含当前屏幕的内容。如果你是跳跃式地阅读本书，可能需要阅读第
17章，安装pillow模块，然后再继续本节的内容。
在Linux计算机上，需要安装scrot程序，才能在pyautogui中使用屏幕快照功
能。在终端窗口中，执行sudo apt-get install scrot，安装该程序。如果你使用Windows
或OS X，就跳过这一步，继续本节的内容。
18.6.1 获取屏幕快照
要在Python中获取屏幕快照，就调用pyautogui.screenshot() 函数。在交互式环
境中输入以下内容：
>>> import pyautogui
>>> im = pyautogui.screenshot()
im变量将包含一个屏幕快照的Image对象。现在可以调用im变量中Image对
象的方法，就像所有其他Image对象一样。在交互式环境中输入以下内容：
>>> im.getpixel((0, 0))
(176, 176, 175)
>>> im.getpixel((50, 200))
(130, 135, 144)
向getpixel() 函数传入坐标元组，如（0，0）或（50，200），它将告诉你图像中
这些坐标处的像素颜色。getpixel() 函数的返回值是一个RGB元组，包含3个整数，表
示像素的红绿蓝值（没有第四个值表示alpha，因为屏幕快照是完全不透明的）。这
就是你的程序“看到”当前屏幕上内容的方法。
18.6.2 分析屏幕快照
假设你的GUI自动化程序中，有一步是点击灰色按钮。在调用click() 方法之前，
你可以获取屏幕快照，查看脚本要点击处的像素。如果它的颜色和灰色按钮不一样，
那么程序就知道出问题了。也许窗口发生了意外的移动，或者弹出式对话框挡住了
Python编程快速上手——让繁琐工作自动化
该按钮。这时，不应该继续（可能会点击到错误的东西，造成严重破坏），程序可以
“看到”它没有点击在正确的东西上，并自行停止。
如果屏幕上指定的 x、y 坐标处的像素与指定的颜色匹配，PyAutoGUI 的
pixelMatchesColor() 函数将返回True。第一和第二个参数是整数，对应x和y坐标。第
三个参数是一个元组，包含 3 个整数，是屏幕像素必须匹配的 RGB 颜色。在交互
式环境中输入以下内容：
>>> import pyautogui
>>> im = pyautogui.screenshot()
 >>> im.getpixel((50, 200))
(130, 135, 144)
 >>> pyautogui.pixelMatchesColor(50, 200, (130, 135, 144))
True
 >>> pyautogui.pixelMatchesColor(50, 200, (255, 135, 144))
F alse
在获取屏幕快照，并用getpixel() 函数取得特定坐标处像素颜色的RGB元组之
后，将同样的坐标和RGB元组传递给pixelMatchesColor() ，这应该返回True。
然后改变RBG 元组中的一个值，用同样的坐标再次调用 pixelMatches Color() ，
这应该返回 False。你的GUI自动化程序要调用 click() 之前，这种方法应该有用。
请注意，给定坐标处的颜色应该“完全”匹配。即使只是稍有差异（例如，是（255，
255，254）而不是（255，255，255）），那么函数也会返回False。
18.7 项目：扩展 mouseNow 程序
可以扩展本章前面的 mouseNow.py 项目，让它不仅给出鼠标当前位置的 x、
y坐标，也给出这个像素的 RGB颜色。将mouseNow.py中while循环内的代码修
改为：
#! python3
# mouseNow.py - Displays the mouse cursor's current position.
--snip--
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
pixelColor = pyautogui.screenshot().getpixel((x, y))
positionStr += ' RGB: (' + str(pixelColor[0]).rjust(3)
positionStr += ', ' + str(pixelColor[1]).rjust(3)
positionStr += ', ' + str(pixelColor[2]).rjust(3) + ')'
print(positionStr, end='')
--snip--
现在，如果运行 mouseNow.py，那么输出将包括鼠标光标处像素的 RGB 颜
色值。
Press Ctrl-C to quit.
X: 406 Y: 17 RGB: (161, 50, 50)
第18章 用GUI自动化控制键盘和鼠标
这个信息，配合pixelMatchesColor() 函数，应该使得给GUI自动化脚本添加颜
色检查变得容易。
18.8 图像识别
但是，如果事先不知道应该点击哪里，怎么办？可以使用图像识别。向
PyAutoGUI提供希望点击的图像，让它去弄清楚坐标。
例如，如果你以前获得了屏幕快照，截取了提交按钮的图像，保存为submit.png，那
么 locateOnScreen() 函数将返回图像所在处的坐标。要了解 locateOnScreen()函数的
工作方式，请获取屏幕上一小块区域的屏幕快照，保存该图像，并在交互式环境中
输入以下内容，用你的屏幕快照文件名代替 'submit. png'：
>>> import pyautogui
>>> pyautogui.locateOnScreen('submit.png')
(643, 745, 70, 29)
locateOnScreen() 函数返回４个整数的元组，是屏幕上首次发现该图像时左边的
x 坐标、顶边的 y坐标、宽度以及高度。如果你用自己的屏幕快照，在你的计算机
上尝试，那么返回值会和这里显示的不一样。
如果屏幕上找不到该图像，locateOnScreen() 函数将返回 None。请注意要成功
识别，屏幕上的图像必须与提供的图像完全匹配。即使只差一个像素，locateOn
Screen() 函数也会返回None。
如果该图像在屏幕上能够找到多处，locateAllOnScreen() 函数将返回一个
Generator 对象。可以将它传递给 list() ，返回一个 4 整数元组的列表。继续在交互
式环境的例子中输入以下内容（用你自己的图像文件名取代 'submit.png'）：
>>> list(pyautogui.locateAllOnScreen('submit.png'))
[(643, 745, 70, 29), (1007, 801, 70, 29)]
每个４整数元组代表了屏幕上的一个区域。如果图像只找到一次，返回的列表
就只包含一个元组。
在得到图像所在屏幕区域的4整数元组后，就可以点击这个区域的中心。将元
组传递给center() 函数，它将返回该区域中心的x、y坐标。在交互式环境中输入以
下内容，用你自己的文件名、4整数元组和坐标对，来取代参数：
>>> pyautogui.locateOnScreen('submit.png')
(643, 745, 70, 29)
>>> pyautogui.center((643, 745, 70, 29))
(678, 759)
>>> pyautogui.click((678, 759))
用 center() 得到中心坐标后，将 click() 坐标传递给函数，就会点击屏幕上该区
域的中心，这个区域匹配你传递给locateOnScreen() 函数的图像。
Python编程快速上手——让繁琐工作自动化
18.9 控制键盘
pyautogui也有一些函数向计算机发送虚拟按键，让你能够填充表格，或在应用
中输入文本。