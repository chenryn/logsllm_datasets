####  加载自定义插件
这是由猪猪侠在去年的先知白帽大会上提出的，通过hook网络层的API来解决。但问题是，Chromium的headless模式是无法加载插件的，官方也明确表示目前没有对headless模式加载插件功能的开发计划，也就是说，
**只要你开启了headless模式，那么就无法使用插件** 。
这是个很关键的问题，因为我们的爬虫几乎都是在服务器上运行，不可能去使用图形化的桌面版本，更不可能使用windows
server，这会极大降低速度和稳定性。这是一个非常好的思路，但很遗憾不能在实际环境中大规模运用。
####  不稳定的onbeforeunload
在之前，我想通过设置`onbeforeunload`访问，当触发确认弹窗时自动执行`dialog.dimiss()`来取消当前的前端导航请求，如在页面中注入以下代码：
    window.onbeforeunload = function(e){
        console.log("onbeforeunload trigger.")
    };
设置自动dimiss弹窗：
    import asyncio
    from pyppeteer import dialog
    async def close_dialog(dialog_handler: dialog):
        await dialog_handler.dismiss()
    page.on("dialog", lambda dialog_handle: asyncio.ensure_future(close_dialog(dialog_handle)))
按照理想中的情况，每一次离开当前页面的导航都会弹窗询问（是否离开当前页面），如果点击取消，那么此次导航请求就会被取消，同时当前页面不会刷新。
但这个方法有个严重的问题，无法获取即将跳转的url，即`onbeforeunload`回调函数中无法拿到相关的值。并且经过一段时间的测试，这个方法并不可靠，它的触发有一些前置条件，官方说需要用户在当前页面
**存在有效的交互操作** ，才会触发此回调函数。即使我已经尝试用各种API去模拟用户点击等操作，但最后依旧不是百分百触发。
    To combat unwanted pop-ups, some browsers don't display prompts created in beforeunload event handlers unless the page has been interacted with. Moreover, some don't display them at all.
所以这个方法最后也被我否决了。
####  204状态码
这是我目前找到的 **最优雅的解决方案** ，不用修改源码，不用加载插件，在拦截请求的同时返回 **状态码为204**
的响应，可以让浏览器对该请求不做出反应，即不刷新页面，继续显示原来的文档。
在[RFC7231](https://tools.ietf.org/html/rfc7231#section-6.3.5)中我们可以看到如下说明：
    The 204 response allows a server to indicate that the action has been successfully applied to the target resource, while implying that the user agent does not need to traverse away from its current "document view" (if any)
意思是，服务端说明操作已经执行成功，同时告诉浏览器不需要离开当前的文档内容。
以下示例代码是拦截当前页面`top frame`的导航请求并返回204状态码：
    import asyncio
    from pyppeteer.network_manager import Request
    async def intercept_request(request: Request):
        if request.isNavigationRequest() and not request.frame.parentFram:
            await request.respond({
                "status": 204
            })
            # 保存 request 到任务队列
    page.on('request', lambda request: asyncio.ensure_future(
                intercept_request(request)))
这样，我们成功的Hook住了前端导航，并将目标请求保存到了任务队列。
###  处理后端重定向
许多时候，后端会根据当前用户是否登录来决定重定向，但其实响应的body中依旧包含了内容。最常见的情况就是未登录的情况下访问某些后台管理页面，虽然body中不包含任何用户的信息，但多数情况都会有许多接口，甚至我们能找到一些未授权访问的接口，所以对于重定向的body内容一定不能忽略。
在解决了前端的导航请求问题之后，处理后端重定向响应就很简单了。当后端重定向响应的body中不包含内容，则跟随跳转或者返回location的值然后退出。如果后端重定向响应的body中含有内容，则无视重定向，渲染body内容，并返回location的值。
目前puppeteer并没有拦截修改响应的接口，所以这需要我们思考如何手动完成这个操作。具体方法不再赘述，思路是用requests等库请求该url，并用
`request.respond`手动设置响应状态码为200。
## 0x04 表单处理
过去静态爬虫通过解析form节点手动构造POST请求，放到现在已经显得过时。越来越复杂的前端处理逻辑，从填写表单到发出POST请求，期间会经过复杂的JS逻辑处理，最后得到的请求内容格式和静态构造的往往差别较大，可以说静态爬虫现在几乎无法正确处理表单的提交问题。
所以我们必须模拟正常的表单填写以及点击提交操作，从而让JS发送出正确格式的请求。
###  表单填充
填充数据虽然很简单，但需要考虑各种不同的输入类型，常见的输入类型有：`text`、`email`、`password`、`radio`、`file`、`textarea`、`hidden`等等。我们分为几种类型来单独说明需要注意的问题。
####  文本
这部分包括`text`、`mail`、`password`等只需要输入文本的类型，处理较为简单，综合判断 id 、name 、class
等属性中的关键字和输入类型来选择对应的填充文本。如包含mail关键字或者输入类型为`email`，则填充邮箱地址。如果包含phone、tel等关键字或输入类型为`tel`，则填充手机号码。具体不再赘述。
####  选择
这部分包括`radio`、`checkbox`和`select`，前面两个比较简单，找到节点后调用 `elementHandle.click()`
方法即可，或者直接为其设置属性值`checked=true`。
对于`select`
稍微复杂一些，首先找到select节点，获取所有的option子节点的值，然后再选择其中一个执行`page.select(selector,
...values)` 方法。示例代码如下：
    def get_all_options_values_js():
        return """
            function get_all_options_values_sec_auto (node) {
                let result = [];
                for (let option of node.children) {
                    let value = option.getAttribute("value");
                    if (value)
                        result.push(value) 
                }
                return result;
            }
        """
    async def fill_multi_select():
        select_elements = await page_handler.querySelectorAll("select")
        for each in select_elements:
            random_str = get_random_str()
            # 添加自定义属性 方便后面定位
            await page_handler.evaluate("(ele, value) => ele.setAttribute('sec_auto_select', value)", each, random_str)
            attr_str = "sec_auto_select="%s"" % random_str
            attr_selector = "select[%s]" % attr_str
            value_list = await page_handler.querySelectorEval(attr_selector, get_all_options_values_js())
            if len(value_list) > 0:
                # 默认选择第一个
                await page_handler.select(attr_selector, value_list[0])
####  文件
表单中常见必须要求文件上传文件，有时JS还限制了上传的文件后缀和文件类型。我们无法覆盖所有的文件类型情况，但可以准备几种常见的文件类型，如：`png`、`doc`、`xlsx`、`zip`等。当然，对于一些简单的限制，我们还是可以去掉的，比如找到文件上传的dom节点并删除
`accept` 和 `required` 属性：
    input_node.removeAttribute('accept');
    input_node.removeAttribute('required');
这样可以尽可能的让我们的文件上传成功。
这里有个问题需要注意一下，在过去版本的`Chromium` headles模式下上传文件时，`request intercept`
抓取到的postData内容将为空，这是个Chromium的BUG，官方在[新版本已经修复了这个问题](https://github.com/GoogleChrome/puppeteer/issues/3471)，请在开发时避开相应的版本。
###  表单提交
提交表单也有一些需要注意的问题，直接点击form表单的提交按钮会导致页面重载，我们并不希望当前页面刷新，所以除了Hook住前端导航请求之外，我们还可以为form节点设置target属性，指向一个隐藏的iframe。具体操作的话就是新建隐藏iframe然后将form表单的target指向它即可，我在这里就不赘述了。
要成功的提交表单，就得正确触发表单的submit操作。不是所有的前端内容都有规范的表单格式，或许有一些form连个button都没有，所以这里有三种思路可供尝试，保险起见建议全部都运行一次：
  * 在form节点的子节点内寻找`type=submit`的节点，执行`elementHandle.click()`方法。
  * 直接对form节点执行JS语句：`form.submit()`，注意，如果form内有包含属性值`name=submit`的节点，将会抛出异常，所以注意捕获异常。
  * 在form节点的子节点内寻找所有button节点，全部执行一次`elementHandle.click()`方法。因为我们之前已经重定义并锁定了表单重置函数，所以不用担心会清空表单。
这样，绝大部分表单我们都能触发了。
## 0x05 事件触发
关于事件触发这部分其实有多种看法，我在这里的观点还是觉得应该去触发所有已注册的事件，并且，除了允许自身的冒泡之外，还应该 **手动进行事件传递**
，即对触发事件节点的子节点继续触发事件。当然，为了性能考虑，你可以将层数控制到三层，且对兄弟节点随机选择一个触发。简单画图说明：
ID为parent的节点存在onclick的内联事件，对其子节点，同一层随机选择一个触发。上图中彩色为触发的节点。
> 事件冒泡是指向父节点传递，事件传递指向子节点传递，遗憾的是我在 **CustomEvent**
> 中没有找到传递方式指定为事件传递的参数选项，所以简单手动实现。
###  内联事件
对于内联事件，因为无法通过Hook去收集注册事件，所以需要查询整个DOM树，找出包含关键字属性的节点，常见的内联事件属性如下：
    inline_events = ["onabort", "onblur", "onchange", "onclick", "ondblclick", "onerror","onfocus", "onkeydown","onkeypress", "onkeyup", "onload", "onmousedown","onmousemove", "onmouseout", "onmouseover","onmouseup", "onreset", "onresize", "onselect", "onsubmit", "onunload"]
然后遍历每个事件名，找出节点并自定义触发事件：
    def get_trigger_inline_event_js():
        return """
            async function trigger_all_inline_event(nodes, event_name) {
                for (let node of nodes) {
                    let evt = document.createEvent('CustomEvent');
                    evt.initCustomEvent(event_name, false, true, null);
                    try {
                        node.dispatchEvent(evt);
                    }
                    catch {}
                }
            }
        """
    for event_name in ChromeConfig.inline_events:
        await self.page_handler.querySelectorAllEval("[%s]" % event_name, get_trigger_inline_event_js(), event_name.replace("on", ""))
至于DOM事件，将收集到的事件依次触发即可，不再赘述。
## 0x06 链接收集
除了常见的属性 `src`和`href`， 还要收集一些如 `data-url`
、`longDesc`、`lowsrc`等属性，以及一些多媒体资源URI。以收集`src`属性值举例：
    def get_src_or_href_js():
        return """
            function get_src_or_href_sec_auto(nodes) {
                let result = [];
                for (let node of nodes) {
                    let src = node.getAttribute("src");
                    if (src) {
                        result.push(src)
                    }