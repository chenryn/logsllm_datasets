数据同步
对于单元化业务，我们提供了本单元访问本地Tair的能力，对于有些非单元化
业务，我们也提供了更灵活的访问模型。同步延迟是我们一直在做的事情，2017年
双11每秒同步数据已经达到了千万级别，那么，如何更好地解决非单元化业务在多
单元写入数据冲突问题？这也是我们一直考虑的。
性能优化降成本
服务器成本并不是随着访问量线性增长，每年以百分之三四十成本在下降，我们
主要通过服务器性能优化、客户端性能优化和不同的业务解决方案三方面达到此目的。
内存数据结构
208 > 9年双11：互联网技术超级工程
图为MDB内存数据结构示意图，我们在进程启动之后会申请一大块内存，在内
存中将格式组织起来。主要有slab分配器、hashmap和内存池，内存写满后会经过
LRU链进行数据淘汰。随着服务器CPU核数不断增加，如果不能很好处理锁竞争，
很难提升整体性能。
参考了各种文献和操作系统的设计，我们使用了细粒度锁、无锁数据结构、
CPU本地数据结构和读拷贝更新（读链表时不需要加锁）。左图为未经过优化时锁竞
争各个功能模块消耗图，可以看到网络部分和数据查找部分消耗最多，优化后（右图）
有80%的处理都是在网络和数据查找，这是符合我们期望的。
用户态协议栈
锁优化后，我们发现很多CPU消耗在内核态上，这时我们采用DPDK+Aliso-
cket来替换掉原有内核态协议栈，Alisocket采用DPDK在用户态进行网卡收包，
并利用自身协议栈提供socket API，对其进行集成。我们与业内类似系统进行了对
比，如图。
新基础  9年双11：互联网技术超级工程
内存网格
如何与业务结合来降低整体Tair与业务成本？Tair提供了多级存储一体化解决
业务问题，比如安全风控场景，读写量超大、有大量本地计算，我们可以在业务机器
本地存下该业务机器所要访问的数据，大量读会命中在本地，而且写在一段时间内是
可合并的，在一定周期后，合并写到远端Tair集群上作为最终存储。我们提供读写
穿透，包括合并写和原有Tair本身具有多单元复制的能力，双11时业务对Tair读
取降至27.68%，对Tair写入降至55.75%。
新基础  9年双11：互联网技术超级工程
经过多种方案的探索，采用了热点散列方案。我们评估过客户端本地cache方
案和二级缓存方案，它们可以在一定程度上解决热点问题，但各有弊端。而热点散列
直接在数据节点上加hotzone区域，让hotzone承担热点数据存储。对于整个方案
来说，最关键有以下几步：
智能识别。热点数据总是在变化的，或是频率热点，或是流量热点。
●
实时反馈。采用多级LRU的数据结构，设定不同权值放到不同层级的LRU
●
上，一旦LRU数据写满后，会从低级LRU链开始淘汰，确保权值高的得到
保留。
动态散列。当访问到热点时，Appserver和服务端就会联动起来，根据预先设
●
定好的访问模型动态散列到其它数据节点hotzone上去访问，集群中所有节
点都会承担这个功能。
通过这种方式，我们将原来单点访问承担的流量通过集群中部分机器来承担。
可以看到，双11零点的刹那，我们吸收了800多万次的热点访问。如果没有做
热点散列，散列前的指数都会超过死亡水位线。
新基础  9年双11：互联网技术超级工程
2017 双 11 交易系统 TMF2.0 技术揭秘，
实现全链路管理
毗卢
阿里巴巴资深技术专家毗卢
毗卢，阿里巴巴资深技术专家，主导设计了TMF2.0框架，并基于该框架完成
交易平台架构升级改造，目前负责商品中心，专注电商领域业务建模与工程交付相结
合的研究与平台推广。
交易平台遇到的挑战
在刚刚过去的2017双11，交易峰值达到了32.5万笔/秒，这给整个交易系统
带来了非常大的挑战。一方面，系统需要支撑全集团几十个事业部的所有交易类需
求：要考虑如何能更快响应需求、加快发布周期；如何能为新小业务提供快速支撑、
降低准入门槛；是否足够开放使得业务方能做到自助式扩展；新需求是否已经在其他
新基础  9年双11：互联网技术超级工程
另外，要注重管理域与运行域分离。业务逻辑不能依靠运行期动态计算，要能在
静态期进行定义并可视化呈现。业务定义中出现的规则叠加冲突，也在静态器进行冲
突决策。在运行期，严格按照静态器定义的业务规则、冲突决策策略执行。
下文将针对这三块的内容分别展开来详细介绍。
业务定制包与平台分离的架构
如上所示的业务定制包与平台分离架构可以分为四个层次。最底层是交易规范
层，包括一些交易模型、交易领域的划分、业务领域的划分、以及交易启动环境下的
配置项。基于这个理论模型，就可以进行一些定义及规范工作，比如接口定义、流程
规范、模型规范等，而且其中的很多内容都可以在不同的领域进行复用。
上面一层是解决方案层。大家都知道阿里巴巴目前正在走国际化的战略，所以面
对不同的市场会构建不同的解决方案，不同的解决方案中也就有自己不同的业务玩法、
业务逻辑。所以要将不同的市场解决方案和他们自身的流程、规则结合起来。但是这一
过程中会发现，不同的市场解决方案会有很多可以复用的地方，比如营销模式。所以
形成的可复用基础实现就可以在不同的解决方案中得到复用，所那么在面对不同的市
场时就不用考虑可复用基础实现的内容，只需要关注市场相关的业务就可以了。
新基础 < 217
往上一层是业务定制层。即使是在一个市场内，也会有各种细分的定制玩法，这
些不同的细分点就会有各自不同的业务逻辑，这就是制定业务定制层的原因。团队
会根据底层的需求点来进行一些业务定制包的组装，就可以实现不同的业务逻辑和
玩法了。
在这样一个复杂的分离架构中，最重要的是要将不同层次间的职责划分清晰，整
个代码都严格地、有意识地进行分离。所以在最后的部署过程中，首先要完成底层业
务的复用，然后形成不同市场的解决方案，再在解决方案下对不同的业务实现差异化
的点。
业务身份定义标准化
上面所讲的是业务和平台的分离，在业务和平台分离之后就要进行业务和业务
之间的隔离，即统一的业务身份，类似于身份证号码，在整个交易链路上必须是唯一
的。业务身份需要通过人、货、场三个维度进行抽象，比如市场类型、垂直市场、渠
道来源等等，确定了这个唯一的业务身份后就可以将业务流程和业务规则进行关联。
基于业务识别，团队也提供了一个基于UIL的业务身份识别方案，总体设计基于
标准模型来抽象，自定义语法，统一管理模型。事实上，通过样品模型、买家模型、
卖家模型、类目模型这四个维度，99%的商品都可以有效地进行标识。业务身份确
定后，就可以按照业务身份维度，对业务配置、部署进行统一管理，在这其中要注意
配置隔离性、热部署、配置回滚、配置确定性等核心要素。
业务管理域与运行域分离的框架