称为部分回收（partial collection）。
行的长时间的停顿。我们可以每次只做部分垃圾回收工作，从而减少一次停顿的长度。我们可
7.7
对象按照字母顺序被加人到队列中。
同时假设
同时假设
过程刚结束的时间段内，该对象所经历的列表的序列。
间移动对象。对于练习7.6.1中的每个对象网络中的每个对象，指出从垃圾回收过程刚开始到该
7.6.77.6节的练习
以按照时间来分割工作任务，使垃圾回收和增变者的运行交错进行。我们也可以按照空间来分
估算都忽略了处理根集的开销。
所有可达对象的内容。对于大型对象，或者那些经历了多轮垃圾收集过程的生命周期长的对象
7.6.6开销的比较
o内的某个引用所指向的对象之前还没有被访问过，那么第（9）行中对 LookupNewLocation 的调用
Cheney算法的优势在于它不会涉及任何不可达对象。另一方面，拷贝垃圾回收器必须移动
言，这个过程的开销特别高。我们对本节给出的四种算法的运行时间进行总结。下面的每个
练习7.6.3：假设我们在练习7.6.1中的各个网络上执行了一个标记并压缩垃圾回收过程。
运行时刻环境
简单的基于跟踪的回收器是以全面停顿的方式进行垃圾回收的，它可能造成用户程序的运
在垃圾回收完成之后，每个保留下来的对象o的 NewLocation(o)的值是什么？
3）From 半空间从位置0 开始，To半空间从位置 10 000 开始。
2）待扫描的列表按照队列的方式进行管理，并且当一个对象具有多个指针时，被访问到的
1）每个对象的大小为100字节。
在垃圾回收过程结束之后，各个对象的地址是什么？
2）
1）每个对象的大小是100个字节。
练习7.6. 2：Baker 的标记－清扫式算法在四个列表 Free、Unreached、Unscanned 和 Scanned 之
练
4)
3）
2）
1）
练习7.6.1：当下列事件发生时，给出标记－清扫式垃圾回收器的处理步骤。
?Cheney 的拷贝回收器(算法7.16）：与可达对象的总大小成正比。
?Baker 的标记－清扫式算法(算法7.14）：与可达对象的数目成正比。
●基本的标记－清扫式算法(算法7.12)：与堆区中存储块的数目成正比。
短停顿垃圾回收 
在开始时刻，堆区中的9个对象按照字母顺序从堆区的第0个字节开始排列。
图 7-20 中对象 B 被删除。
图7-20 中指针 A→D 被删除。
图 7-19 中指针 A→C 被删除
图 7-19中指针 A→>B被删除。
正比。
基本的标记并压缩算法(算法7.15)：与堆区中存储块的数目和可达对象的总大小成
311
口
---
## Page 328
行为更改如下：
集合S必须满足
圾-—漂浮垃圾-
开销会变得很大，因此增量式回收器并不试图在跟踪结束时回收所有的垃圾。任何遗留下的垃
之后，可达对象的集合为：
时，可达对象的集合只可能：
前空间就被耗尽，那么回收器将不再允许增变者执行，并完成金部跟踪过程。在任何情况下，当
可中断的方式处理程序的根集，此时没有来自增变者的干扰。在找到了待扫描对象的初始集合
圾一
bage）。我们当然期望漂浮垃圾越少越好。明确地说，增量式回收器不应该遗漏那些在回收周期
要在每一轮中回收所有的垃圾。我们将每次回收之后留下的垃圾称为漂浮垃圾（floating gar-
2
中并行回收对象的算法，见7.8.1节。
代算法和列车算法的工作原理。
理较新的和较成熟的对象。我们将在7.7.3节讨论有关部分回收的基本算法，然后详细地描述世
熟的对象。这两个算法可以联合使用，构成一个部分回收器。这个回收器使用不同的方法来处
时间的长短来划分对象，并且较频繁地回收新创建的对象，因为这些对象的生命周期往往较短。
7.7.1节看到，寻找一个稍微保守的解决方法将使得跟踪更加高效。
合，
交错运行。可达集合会随着增变者的运行发生变化，因此增量式回收是很复杂的。我们将在
跟
简
之
开
.7.1增量式垃圾回收
另一种可选的算法是列车算法(train algorithm），也是每次只回收一部分垃圾。它最适合回收较成
另
后，增变者的动作与跟踪步骤交错进行。在这个阶段，任何可能改变可达性的增变者动作都被
312
·在垃圾回收开始之前已经存在的所有引用都被保留。也就是说，在增变者覆写一个引用
我们首先描述一种用来找到集合 RU New 的上界的简单跟踪算法。在跟踪期间，增变者的
如果在每次增变者丢失了一个指向某个对象的引用之后都重新确定该对象的可达性，那么
并令 Lost 表示在跟踪开始之后因为引!用丢失而变得不可达的对象的集合。那么当跟踪完成
换句话说，增量式垃圾回收器会过多地估算可达对象集合，从而保证安全性。它们首先以不
-定会在下一轮中被回收。因此不会因为这个垃圾回收方法而产生内存泄漏问题。
增量式回收器是保守的。虽然垃圾回收器一定不能回收不是垃圾的对象，但是它并不--定
来自于增量回收算法和部分回收算法的思想经过修改，可以用于构造一个在多处理器系统
最有名的部分回收算法是世代垃圾回收（generational garbage collection）。它根据对象已分配
增量式回收器将可达性分析任务分割成为若干个较小单元，并允许增变者和这些任务单元
简单的增量式跟踪
令垃圾回收开始时的可达对象集合为 R，令 New 表示在垃圾回收期间创建并分配的对象集
2）
1）因为垃圾回收开始之后的某个新对象的分配而增长。
一旦对象成为不可达的，该对象就不可能再变成可达的。因此，在垃圾回收和增变者运行
增量回收的准确性 
完成后，空间回收以原语的方式完成。
因为失去了指向已分配对象的引用而缩小。
一应该是 Lost 对象的一个子集。如果形式化地描述，那通过跟踪找到的对象
(R UNeu) - Lost CS  (R UNeu)
（R UNew） -Lost
第7章
---
## Page 329
留很多的不可达对象。
运算要比写运算多得多。转换关卡没有什么竞争力，因为很多对象“英年早逝”，这种方法会保
仍然被认为是可达的。也就是说，找到的可达对象集合介于(RUNew）－Lost 与（RUNew)之间。
么这个对象就一直被认为是可达的。即使在跟踪过程结束之前所有指向它的引用都被覆写，
问题的引用传递，算法可以在跟踪过程中按照下列方式修改增变者的动作：
前未被访问对象的引用从一个尚未扫描的对象中拷贝到已扫描对象中的动作。为了截获可能有
有被扫描过。
写
前处于未被访问或待扫描状态的对象o2中将一个指向的引用拷贝到，中。
对
式
能
7.7.2增量式可达性分析
本轮垃圾回收结束时不可达，我们就可以避免这部分工作，同时还可以提高算法的准确性。下--
在垃圾回收结束时可能已经是不可达的。如果我们能够探测到哪些被覆写的引用所指的对象在
所有的写运算，并记住所有被覆写的引用。这些工作中的一部分是不必要的，因为它涉及的对象
集合，New是所有新分配的对象的集合。然而，这种方案付出的代价也很高，因为算法需要拦截
个
到02中指向的引用。
了这个指针；也可能o2已经变得不可达，因此一直没有进人待扫描状态，因此它内部的指针没
象。考虑下面的场景：
，即一个已扫描对象中的引用只能指向已扫描或待扫描的对象，这些引用不可以指向未被访问
会被错认为是不可达的。问题的根源在于增变者的动作可能会违反这个算法的-个关键不变
算法在这两个方面都做了很好的改进。
运行时刻环境
上面给出的可选算法中写关卡方法是最有效的。读关卡方法的代价较高，因为一般来说读
要得到一个更加准确且正确的增量式跟踪方法，关键在于我们必须注意所有将一个指向当
现在，可以通过对象到达，但是垃圾回收器可能既没有看到中指向。的引用，也没有
3）增变者失去了对象2中指向的引用。它可能已经在扫描o2中指向的引用之前就覆
2）增变者将一个指向未被访问(但可达)的对象的引用存放到已扫描对象o，中。.它从当
如果我们让增变者和一个像算法7.12那样的基本跟踪算法交替执行，那么一些可达对象可
我们可以用两种方式来实现写关卡。第一种方式是在增变阶段记录下所有被写入到已扫描
写关卡的实现
上述几种做法都不能找到最小的可达对象集合。如果跟踪过程确定一个对象是可达的，那
●写关卡。截获把一个指向未被访问的对象。的引用写人--个已扫描对象；的运算。在这
1）垃圾回收器发现对象，可达并扫描o，中的指针，因而将置于已扫描状态。
®
●所有新创建的对象立即就被认为是可达的，并被放置在待扫描状态中。
个引用本身放人待扫描集合。
被访问或待扫描对象中的引用时，保存即将被覆写的引用并将其设为可达的，然后将这
传递关卡。截获在未被访问或待扫描对象中原引用丢失的情况。只要增变者覆写-个未
访问或待扫描状态中的对象读取一个指向对象。的引用时，就将设为可达的，并将其放
读关卡。截获对未被访问或待扫描对象中的引用的读运算。只要增变者从一个处于未被
到待扫描集合中，使得我们可以再次扫描它。
种情况下，将。作为可达对象并将其放入待扫描集合。另一种方法是将被写对象o；放回
之前，它原来的值被记住，并被当作一个只包含这个引用的附加待扫描对象。
人待扫描对象的集合。
313
---
## Page 330
而，这么做需要跟踪所有的对象，而这正是我们首先要试图避免的事情。实际上，部分回收器只
(stable)集。在理想状态下，一个部分回收器应该回收目标集中所有无法从根集到达的对象。然
到一个由列车算法管理的独立堆区中。
策略合并的好方法是对年轻对象使用世代回收，而一旦一-个对象变得相当成熟，则将它“提升”
象上花费太多的时间，但是它能够有效限制因垃圾回收而造成的程序停顿时间。因此，将这两个
频繁，所以它通常可以用相对较少的工作量回收大量的垃圾。另一方面，列车算法没有在年轻对
会在各轮垃圾回收中被一次次地拷贝。世代回收在包含最年轻对象的堆区域中的回收工作最
收器中，同一个成熟对象会在各轮垃圾回收中被发现是可达的。如果使用拷贝回收器，这些对象
收过程启动之前就已经变得不可达了。因此，频繁地对新对象进行垃圾具有相当高的性价比。
百万条指令之内，或者在再分配了另外的几兆字节之前就消亡了。也就是说，对象通常在垃圾
7.7.3部分回收概述
置。所有这些指针在最后都需要被转换成指向 To空间的新位置。
针解引用时，如果在To空间中存在对应于该指针的新位置，那么这个指针就被翻译成这个新位
第二种方法是，我们可以让程序直接改变 To 空间中的表示。当增变者对一个指向 From 空间的指
所有的运算，只是在垃圾回收结束的时候才更新所有的指针，并将所有的内容都拷贝到 To空间。
定位之后的地址的映射。
半空间，另一个位于 To半空间。和算法7.16 一样，我们必须保存一个从对象的旧地址到其重新
响，
都要在跟踪过程的最后进行重新扫描。
象中的所有引用都要进行重新扫描。在后两种方案中，在被修改的卡片或页中的所有可达对象
要再次执行的扫描工作量。在第一种方案中，无论实际上修改了被修改对象中的哪个引用，该对
被写的位置并不重要。因此，有多种技术支持我们记录较少的有关被覆写的确切位置的细节。
们，其中可能会消除重复的位置。请注意，只要所有被写的位置都被重新扫描，那么是否精确记录
掉，因此可能被忽略。
的大小和对已扫描对象的写运算的数量成正比。注意，列表中的引用本身可能在后来又被覆写
对象中的新引用。我们可以将这些引用放人一个列表。如果不考虑从列表中剔除重复引用，列表
我们把将在一轮部分回收中被回收的对象集合称为目标(targel)集，而将其他对象称为稳定
然而，经历了一次回收的对象很可能在多次回收之后依然存在。在迄今为止描述的垃圾[
我们可以选择两种更新引用的方法。第一种方法是，我们可以让增变者在From 空间中完成
314
一个基本的事实是，对象通常“英年早逝”。
它的实现要稍微复杂一点。处于已扫描或待扫描状态中的对象有两个地址，-一个位于 From
第二种，也是更有效的方式是记住写运算发生的位置。我们可以用被写位置的列表来记录它
上述的方法对于标记－清扫式垃圾回收来说已经足够了。因为拷贝回收和增变者的相互影
结合增量和拷贝技术 
般来说，通过增大被覆写位置的记录粒度就可以减少所需的存储空间，但代价是增加了需
算。因为这样的写运算会引发一个保护错误，操作系统将引发一个程序异常。
为被保护状态。那么，不需执行任何显式的指令就可以检测到任何对已扫描对象的写运
我们可以选择记录下包含了被写位置的页。我们可以只将那些包含了已扫描对象的页置
记录曾经被写人的卡片。
我们可以将地址空间分成固定大小的块，这些块被称为卡片（card），并使用一个位数组来
及字段。
，人们发现，通常80%～98%的新分配对象在！
第7章
为
回
回
2
---
## Page 331
世代的对象进行写运算，以及将对象提升到下一世代时都不需要更新任何被记忆集。如果我们
和较老的世代一起回收。
原因促使我们采用这个策略：
组成。在讠上激活的一次部分回收的根集包括了区域i及更低区域的被记忆集。
每个区域i保持了一个被记忆集，该集合由指向区域讠中对象且位于大于的区域中的所有对象