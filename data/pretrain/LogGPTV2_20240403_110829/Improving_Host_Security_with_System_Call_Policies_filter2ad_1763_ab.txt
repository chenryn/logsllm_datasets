### Enhancing Policy Language for Effective Security

#### Introduction
The complexity of a policy language increases with the need to create effective policies. A well-constructed policy should allow only the necessary actions for an application's intended functionality while denying all other actions. This can be achieved by enumerating all possible actions required for correct execution and disallowing any unlisted actions.

#### Policy Construction
Our policy language is designed to be simple, allowing each policy statement to be evaluated independently. This modular approach enables iterative policy refinement by appending new statements as needed. For example, the following partial policy for a name daemon demonstrates how specific actions are permitted:

```
Policy: /usr/sbin/named, Emulation: native
native-sysctl: permit
native-accept: permit
native-bind: sockaddr match "inet-*:53" then permit
native-break: permit
native-chdir: filename eq "/" then permit
native-chdir: filename eq "/namedb" then permit
native-chroot: filename eq "/var/named" then permit
native-close: permit
native-connect: sockaddr eq "/dev/log" then permit
...
```

Each policy statement, such as the one for `bind`, allows the daemon to listen for DNS requests on any interface. The simplicity and modularity of the policy language facilitate easy updates and extensions.

#### Automated Policy Generation
We automate policy generation by running an application and recording its system calls. The system call arguments are then transformed into policy statements. If an application attempts a system call not covered by the existing policy, a new policy statement is appended to permit this action. This method captures the complete semantics of system calls, providing robust protection against evasion attacks.

For applications that generate random file names, manual policy editing may be necessary to account for non-determinism. We assume that the application does not contain malicious code and operates with benign data. If these assumptions do not hold, or if it is impossible to exercise all code paths, interactive policy generation is used. This involves user intervention when a policy decision is required, ensuring that the policy remains comprehensive and secure.

#### Interactive Policy Generation
Interactive policy generation assists users in making informed decisions when the current policy does not cover an attempted system call. A graphical notification provides all relevant information, allowing the user to either improve the policy, terminate the application, or decide to allow or deny the system call. This iterative process ensures that the policy covers all legitimate actions, even if not all code paths are exercised during the initial training run.

#### Privilege Elevation
In addition to restricting an application to its expected behavior, we also support privilege elevation for specific system calls. This is particularly useful for applications that require special privileges for certain operations. By elevating the privilege of a single system call, we adhere to the principle of least privilege, minimizing the risk of unauthorized access.

For example, the `ping` program requires special privileges to create raw sockets. With privilege elevation, `ping` can be executed without special privileges, and a policy statement grants it the necessary privilege to create a raw socket.

#### Implementation Overview
Systrace, our implementation, is available for Linux, Mac OS X, NetBSD, and OpenBSD. We focus on the OpenBSD implementation, which emphasizes simplicity and security. The system call interception architecture involves an in-kernel policy database and a user space policy daemon. The kernel consults the policy database to make quick decisions, deferring more complex decisions to the user space daemon.

When a system call is made, the kernel checks the policy database. If the policy decision is not immediate, the kernel suspends the process and communicates with the user space daemon via the `/dev/systrace` device. The user space daemon translates system call arguments and evaluates the policy, returning a decision to the kernel.

#### Security Analysis
To effectively enforce security policies, Systrace addresses several challenges, including incorrect replication of OS semantics, resource aliasing, lack of atomicity, and side effects of denying system calls. We resolve these issues by normalizing system call arguments, resolving symbolic links, and using a read-only look-aside buffer in the kernel. This ensures that evasion attacks are prevented and that system calls are allowed only if their arguments match a policy statement.

Additionally, Systrace handles secure process detaching and policy switching, ensuring that new programs are monitored with appropriate policies. This comprehensive approach ensures robust and flexible policy enforcement, enhancing the security of applications.