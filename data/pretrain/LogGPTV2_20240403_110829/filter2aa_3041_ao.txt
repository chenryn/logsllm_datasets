型。本章后面会继续探讨内嵌类型。正是这层额外的内嵌类型阻止了复制。不是所有的结构类型
都需要或者应该实现类似的额外保护。程序员需要能识别出每个类型的本质，并使用这个本质来
决定如何组织类型。 
让我们看一下 Open 函数的实现，如代码清单 5-32 所示。
代码清单 5-32 golang.org/src/os/file.go：第 238 行到第 240 行 
238 func Open(name string) (file *File, err error) { 
239 
 return OpenFile(name, O_RDONLY, 0) 
240 } 
代码清单 5-32 展示了 Open 函数的实现，调用者得到的是一个指向 File 类型值的指针。
Open 创建了 File 类型的值，并返回指向这个值的指针。如果一个创建用的工厂函数返回了一
个指针，就表示这个被返回的值的本质是非原始的。 
即便函数或者方法没有直接改变非原始的值的状态，依旧应该使用共享的方式传递，如代码
清单 5-33 所示。 
代码清单 5-33 golang.org/src/os/file.go：第 224 行到第 232 行 
224 func (f *File) Chdir() error { 
225 
 if f == nil { 
226 
 return ErrInvalid 
227 
 } 
228 
 if e := syscall.Fchdir(f.fd); e != nil { 
229 
 return &PathError{"chdir", f.name, e} 
230 
 } 
231 
 return nil 
232 } 
代码清单 5-33 中的 Chdir 方法展示了，即使没有修改接收者的值，依然是用指针接收者来
声明的。因为 File 类型的值具备非原始的本质，所以总是应该被共享，而不是被复制。
是使用值接收者还是指针接收者，不应该由该方法是否修改了接收到的值来决定。这个决策
应该基于该类型的本质。这条规则的一个例外是，需要让类型值符合某个接口的时候，即便类型
的本质是非原始本质的，也可以选择使用值接收者声明方法。这样做完全符合接口值调用方法的
机制。5.4 节会讲解什么是接口值，以及使用接口值调用方法的机制。 
5.4  接口 
多态是指代码可以根据类型的具体实现采取不同行为的能力。如果一个类型实现了某个接
口，所有使用这个接口的地方，都可以支持这种类型的值。标准库里有很好的例子，如 io 包里
实现的流式处理接口。io 包提供了一组构造得非常好的接口和函数，来让代码轻松支持流式数
据处理。只要实现两个接口，就能利用整个 io 包背后的所有强大能力。
不过，我们的程序在声明和实现接口时会涉及很多细节。即便实现的是已有接口，也需要了
解这些接口是如何工作的。在探究接口如何工作以及实现的细节之前，我们先来看一下使用标准
库里的接口的例子。 
5.4.1  标准库 
我们先来看一个示例程序，这个程序实现了流行程序 curl 的功能，如代码清单 5-34 所示。 
代码清单 5-34 listing34.go 
01 // 这个示例程序展示如何使用 io.Reader 和 io.Writer 接口 
02 // 写一个简单版本的 curl 程序 
03 package main 
04 
05 import ( 
06 
 "fmt" 
07 
 "io" 
08 
 "net/http" 
09 
 "os" 
10 ) 
11 
12 // init 在 main 函数之前调用 
13 func init() { 
14 
 if len(os.Args) != 2 { 
15 
 fmt.Println("Usage: ./example2 ") 
16 
 os.Exit(-1) 
17 
 } 
18 } 
19 
20 // main 是应用程序的入口 
21 func main() { 
22 
 // 从 Web 服务器得到响应 
23 
 r, err := http.Get(os.Args[1]) 
24 
 if err != nil { 
25 
 fmt.Println(err) 
26 
 return 
27 
 } 
28 
29 
 // 从 Body 复制到 Stdout 
30 
 io.Copy(os.Stdout, r.Body) 
31 
 if err := r.Body.Close(); err != nil { 
32 
 fmt.Println(err) 
33 
 } 
34 } 
代码清单 5-34 展示了接口的能力以及在标准库里的应用。只用了几行代码我们就通过两个
函数以及配套的接口，完成了 curl 程序。在第 23 行，调用了 http 包的 Get 函数。在与服务器
成功通信后，http.Get 函数会返回一个 http.Response 类型的指针。http.Response 类
型包含一个名为 Body 的字段，这个字段是一个 io.ReadCloser 接口类型的值。
在第 30 行，Body 字段作为第二个参数传给 io.Copy 函数。io.Copy 函数的第二个参数，
接受一个 io.Reader 接口类型的值，这个值表示数据流入的源。Body 字段实现了 io.Reader
接口，因此我们可以将 Body 字段传入 io.Copy，使用 Web 服务器的返回内容作为源。
io.Copy 的第一个参数是复制到的目标，这个参数必须是一个实现了 io.Writer 接口的
值。对于这个目标，我们传入了 os 包里的一个特殊值 Stdout。这个接口值表示标准输出设备，
并且已经实现了 io.Writer 接口。当我们将 Body 和 Stdout 这两个值传给 io.Copy 函数后，
这个函数会把服务器的数据分成小段，源源不断地传给终端窗口，直到最后一个片段读取并写入
终端，io.Copy 函数才返回。
io.Copy 函数可以以这种工作流的方式处理很多标准库里已有的类型，如代码清单 5-35
所示。 
代码清单 5-35 listing35.go 
01 // 这个示例程序展示 bytes.Buffer 也可以 
02 // 用于 io.Copy 函数 
03 package main 
04 
05 import ( 
06 
 "bytes" 
07 
 "fmt" 
08 
 "io" 
09 
 "os" 
10 ) 
11 
12 // main 是应用程序的入口 
13 func main() { 
14 
 var b bytes.Buffer 
15 
16 
 // 将字符串写入 Buffer 
17 
 b.Write([]byte("Hello")) 
18 
19 
 // 使用 Fprintf 将字符串拼接到 Buffer 
20 
 fmt.Fprintf(&b, "World!") 
21 
22 
 // 将 Buffer 的内容写到 Stdout 
23 
 io.Copy(os.Stdout, &b) 
24 } 
代码清单 5-35 展示了一个程序，这个程序使用接口来拼接字符串，并将数据以流的方式输
出到标准输出设备。在第 14 行，创建了一个 bytes 包里的 Buffer 类型的变量 b，用于缓冲数
据。之后在第 17 行使用 Write 方法将字符串 Hello 写入这个缓冲区 b。第 20 行，调用 fmt
包里的 Fprintf 函数，将第二个字符串追加到缓冲区 b 里。
fmt.Fprintf 函数接受一个 io.Writer 类型的接口值作为其第一个参数。由于
bytes.Buffer 类型的指针实现了 io.Writer 接口，所以可以将缓存 b 传入 fmt.Fprintf
函数，并执行追加操作。最后，在第 23 行，再次使用 io.Copy 函数，将字符写到终端窗口。
由于 bytes.Buffer 类型的指针也实现了 io.Reader 接口，io.Copy 函数可以用于在终端窗
口显示缓冲区 b 的内容。
希望这两个小程序展示出接口的好处，以及标准库内部是如何使用接口的。下一步，让我们
看一下实现接口的细节。 
5.4.2  实现 
接口是用来定义行为的类型。这些被定义的行为不由接口直接实现，而是通过方法由用户
定义的类型实现。如果用户定义的类型实现了某个接口类型声明的一组方法，那么这个用户定
义的类型的值就可以赋给这个接口类型的值。这个赋值会把用户定义的类型的值存入接口类型
的值。 
对接口值方法的调用会执行接口值里存储的用户定义的类型的值对应的方法。因为任何用户
定义的类型都可以实现任何接口，所以对接口值方法的调用自然就是一种多态。在这个关系里，
用户定义的类型通常叫作实体类型，原因是如果离开内部存储的用户定义的类型的值的实现，接
口值并没有具体的行为。 
并不是所有值都完全等同，用户定义的类型的值或者指针要满足接口的实现，需要遵守一些
规则。这些规则在 5.4.3 节介绍方法集时有详细说明。探寻方法集的细节之前，了解接口类型值
大概的形式以及用户定义的类型的值是如何存入接口的，会有很多帮助。 
图 5-1 展示了在 user 类型值赋值后接口变量的值的内部布局。接口值是一个两个字长度
的数据结构，第一个字包含一个指向内部表的指针。这个内部表叫作 iTable，包含了所存储的
值的类型信息。iTable 包含了已存储的值的类型信息以及与这个值相关联的一组方法。第二个
字是一个指向所存储值的指针。将类型信息和指针组合在一起，就将这两个值组成了一种特殊
的关系。 
图 5-1  实体值赋值后接口值的简图 
图 5-2 展示了一个指针赋值给接口之后发生的变化。在这种情况里，类型信息会存储一个指
向保存的类型的指针，而接口值第二个字依旧保存指向实体值的指针。 
图 5-2  实体指针赋值后接口值的简图 
5.4.3  方法集 
方法集定义了接口的接受规则。看一下代码清单 5-36 所示的代码，有助于理解方法集在接
口中的重要角色。 
代码清单 5-36 listing36.go 
01 // 这个示例程序展示 Go 语言里如何使用接口 
02 package main 
03 
04 import ( 
05 
 "fmt" 
06 ) 
07 
08 // notifier 是一个定义了 
09 // 通知类行为的接口 
10 type notifier interface { 
11 
 notify() 
12 } 
13 
14 // user 在程序里定义一个用户类型 
15 type user struct { 
16 
 name  string 
17 
 email string 
18 } 
19 
20 // notify 是使用指针接收者实现的方法 
21 func (u *user) notify() { 
22 
 fmt.Printf("Sending user email to %s\n", 
23 
 u.name, 
24 
 u.email) 
25 } 
26 
27 // main 是应用程序的入口 
28 func main() { 
29 
 // 创建一个 user 类型的值，并发送通知 
30 
 u := user{"Bill", "PI:EMAIL"} 
31 
32 
 sendNotification(u) 
33 
34 
 // ./listing36.go:32: 不能将 u（类型是 user）作为 
35 
 // 
 sendNotification 的参数类型 notifier： 
36 
 //   user 类型并没有实现 notifier 
37 
 //     
 （notify 方法使用指针接收者声明） 
38 } 
39 
40 // sendNotification 接受一个实现了 notifier 接口的值 
41 // 并发送通知 
42 func sendNotification(n notifier) { 
43 
 n.notify() 
44 } 
代码清单 5-36 中的程序虽然看起来没问题，但实际上却无法通过编译。在第 10 行中，声明
了一个名为 notifier 的接口，包含一个名为 notify 的方法。第 15 行中，声明了名为 user
的实体类型，并通过第 21 行中的方法声明实现了 notifier 接口。这个方法是使用 user 类型
的指针接收者实现的。 
代码清单 5-37 listing36.go：第 40 行到第 44 行 
40 // sendNotification 接受一个实现了 notifier 接口的值 
41 // 并发送通知 
42 func sendNotification(n notifier) { 
43 
 n.notify() 
44 } 
在代码清单 5-37 的第 42 行，声明了一个名为 sendNotification 的函数。这个函数接收
一个 notifier 接口类型的值。之后，使用这个接口值来调用 notify 方法。任何一个实现了
notifier 接口的值都可以传入 sendNotification 函数。现在让我们来看一下 main 函数，
如代码清单 5-38 所示。 
代码清单 5-38 listing36.go：第 28 行到第 38 行 
28 func main() { 
29 
 // 创建一个 user 类型的值，并发送通知 
30 
 u := user{"Bill", "PI:EMAIL"} 
31 
32 
 sendNotification(u) 
33 
34 
 // ./listing36.go:32: 不能将 u（类型是 user）作为 
35 
 // 
 sendNotification 的参数类型 notifier： 
36 
 //   user 类型并没有实现 notifier 
37 
 //     
 （notify 方法使用指针接收者声明） 
38 } 