# Charlie Miller: Exploring the NFC Attack Surface

## File Types and Libraries

| Application | File Type | Library Used (if known) |
|-------------|-----------|-------------------------|
| Contacts    | vCard     | -                       |
| Gallery     | png       | libpng 1.2.42 (Jan 2010) |
|             | jpg       | libjpg 6n (1998)        |
|             | gif       | libgif 4.1.6 (2007)     |
|             | bmp       | -                       |
|             | tiff      | libtiff 3.9.4 (Jul 2010)|
| Videos      | mp4       | -                       |
|             | wmv       | -                       |
|             | 3gp       | -                       |
|             | mp3       | -                       |
|             | aac       | -                       |
|             | flac      | -                       |
|             | wma       | -                       |
|             | amr       | -                       |
|             | wav       | -                       |
|             | ogg       | -                       |
| Documents   | pdf       | poppler 16.6 (May 2011) |
|             | txt       | -                       |
|             | doc(x)    | docximport.so (KDE 4.74, Dec 2011) |
|             | xls(x)    | xlsximport.so (KDE 4.74) |
|             | ppt(x)    | powerpointimport.so (KDE 4.74) |

## Actual Nokia N9 Attack Surface

### Possible Attacks

Based on the above discussion, several potential attack vectors are identified. We will explore a few in detail, assuming an attacker can get close enough to an active phone to initiate an NFC transaction. We also assume that the screen is on and, when necessary, the device is not locked. This could involve getting very close to someone using their phone, placing a device next to a legitimate NFC payment terminal, or using an antenna setup to initiate the transaction from a distance of up to 1.5 meters [22].

### Android NFC Stack Bug

Exploiting a bug in the Android NFC stack could allow an attacker to gain control of the NFC Service. However, the `AndroidManifest.xml` file for `com.android.nfc` does not include Internet permissions, making it difficult for an attacker to exfiltrate data over the Internet. The NFC Service does have `BLUETOOTH` and `BLUETOOTH_ADMIN` permissions, which could enable the establishment of a Bluetooth connection with the attacker's device. As we will see for the N9, if an attacker can pair via Bluetooth, they can potentially take complete control of the device.

### Android Browser

An attacker can force an active device to display an arbitrary web page by using an NFC tag. If the attacker has an exploit for the Android browser, they can compromise the device. In this scenario, the attacker's code would run within the browser, not the NFC service.

### N9 Bluetooth Pairing

If the N9 has NFC enabled and "Confirm sharing and connecting" is disabled, presenting a Bluetooth pairing message via an NFC tag will automatically pair the device without user confirmation, even if Bluetooth is disabled. An example of such an NDEF message is:

```
[0000] d4 0c 27 6e 6f 6b 69 61 2e 63 6f 6d 3a 62 74 01  ..'nokia.com:bt.
[0010] 00 1d 4f 92 90 e2 20 04 18 31 32 33 34 00 00 00  ..O... ..1234...
[0020] 00 00 00 00 00 00 00 00 00 0c 54 65 73 74 20 6d  ..........Test m
[0030] 61 63 62 6f 6f 6b                                acbook         
```

In this message, a PIN of "1234," a Bluetooth address, and the device name are provided. Once paired, tools like `obexfs`, `gsmsendsms`, or `xgnokii` can be used to perform actions on the device. If a user simply enables NFC without making other changes, the device can be completely controlled by an attacker who can read an NFC tag.

If "Confirm sharing and connecting" is enabled, a prompt appears, as shown in Figure 19.

### N9 Bugs

If the "Confirm sharing and connecting" feature is enabled, the attacker must resort to content sharing as an attack vector. Without user interaction, it is possible to force the Nokia N9 to parse and display various file formats, often using outdated libraries. For example, the version of PNG shipped with the latest N9 firmware is 1.2.42, which has at least two critical vulnerabilities that have been found and patched since its release [26].

To find new vulnerabilities, one could use fuzzing. We briefly fuzzed the Documents application on the Nokia N9 and found several interesting crashes, as seen in valgrind:

- **PPT Rendering Crash:**
  ```
  ==3572== Thread 2:
  ==3572== Invalid free() / delete / delete[] / realloc()
  ==3572==    at 0x48347B4: free (vg_replace_malloc.c:366)
  ==3572==    by 0x5DE780F: free_mem (in /lib/libc-2.10.1.so)
  ==3572==    by 0x5DE71F7: __libc_freeres (in /lib/libc-2.10.1.so)
  ==3572==    by 0x48285B7: _vgnU_freeres (vg_preloaded.c:61)
  ==3572==    by 0x5DB5AC3: __libc_enable_asynccancel (libc-cancellation.c:66)
  ==3572==    by 0x6826CAF: ??? (in /lib/libglib-2.0.so.0.2800.4)
  ==3572==  Address 0x7491f30 is not stack'd, malloc'd or (recently) free'd
  ```

- **PDF Rendering Crash:**
  ```
  ==4002== Invalid write of size 1
  ==4002==    at 0x7290FB4: SplashXPathScanner::clipAALine(SplashBitmap*, int*, 
  int*, int) (in /usr/lib/libpoppler.so.13.0.0)
  ==4002==  Address 0xf8dc5090 is not stack'd, malloc'd or (recently) free'd
  ```

- **DOC Rendering Crash:**
  (Note: This is a 0-day for both the Nokia N9 via NFC and KOffice, which uses the same libraries.)

  ```cpp
  bool STD::read( U16 baseSize, U16 totalSize, OLEStreamReader* stream, bool 
  preservePos )
  ...
      grupxLen = totalSize - ( stream->tell() - startOffset );
      grupx = new U8[ grupxLen ];
      int offset = 0;
      for ( U8 i = 0; i readU16();  // size of the next UPX
          stream->seek( -2, G_SEEK_CUR ); // rewind the "lookahead"
          cbUPX += 2;                     // ...and correct the size
          for ( U16 j = 0; j readU8();  // read the whole UPX
          }
  ...
  ```

  In this function, a buffer for the array `grupx` is allocated based on a parameter passed to the function. It then fills this array based on an unsigned short read directly from the file, stored in the variable `cbUPX`. This leads to a heap overflow, allowing an attacker to potentially gain control of the process. Below is a demonstration of one such trial:

  ```
  Program received signal SIGSEGV, Segmentation fault.
  0x18ebffaa in ?? ()
  (gdb) bt
  #0  0x18ebffaa in ?? ()
  #1  0x41f61f64 in wvWare::Parser::~Parser() () from /usr/lib/libkowv2.so.9
  #2  0x41f6537c in ?? () from /usr/lib/libkowv2.so.9
  #3  0x41f6537c in ?? () from /usr/lib/libkowv2.so.9
  (gdb) x/2i 0x41f61f5c
  0x41f61f5c : ldr r12, [r3, #4]
  0x41f61f60 : blx r12
  (gdb) print /x $r3
  $3 = 0x41414141
  ```

  In this case, a value read from the file is used as a pointer, leading to control of program flow and ultimately code execution.

## Summary

Adding new data entry methods, such as NFC, introduces potential remote exploitation risks. Users typically think that NFC data is limited to a few bytes embedded in an NFC tag. However, this document shows that the attack surface introduced by NFC is extensive. The code responsible for parsing NFC transmissions spans from kernel drivers to services and applications. We provide techniques and tools for fuzzing the low-level protocol stacks associated with NFC.

At a higher level, for both Android and MeeGo devices, it is possible through the NFC interface to make the device parse web pages, image files, office documents, videos, etc., without user interaction, which most users would likely find surprising. While NFC offers convenience for sharing files and making mobile payments, the ability of an attacker to force the device to parse over 20 different formats without user interaction raises significant security concerns.

## Acknowledgements

This was a long project, mostly out of my comfort zone. I would like to thank the following individuals and organizations for their help:

- **Accuvant:** Provided financial support while allowing me to work on this project.
- **Cyber Fast Track:** Partially funded the work.
- **Josh Drake:** Assisted with Android exploitation.
- **Crowdstrike (especially Georg Wicherski):** Shared and walked me through their Android browser exploit.
- **Michael Ossmann:** Helped with GNU Radio.
- **Travis Goodspeed:** Provided assistance with N9 basics.
- **Kevin Finisterre:** Offered Bluetooth help.
- **Corey Benninger and Max Sobell:** Assisted with GNU Radio and basic NFC.
- **Collin Mulliner:** Attempted to help with NFC memory injection, although I did not use it.
- **Adam Laurie:** Convinced me that card emulation could be successful.
- **Jon Larimer:** Pointed out that one of my crashes corresponded to the double free fixed in 4.0.1.
- **Shawn Moyer:** Proofread the document.

## References

[1] ISO 14443 Part 2: Radio frequency power and signal interface
[2] NFC and GNU Radio, part 1, Miller
[3] NFC and GNU Radio, part 2, Miller
[4] ISO 14443 Part 3: Initialization and anticollision
[5] Type 1 Tag Operation Specification
[6] Interview: Karsten Nohl
[7] Type 2 Tag Operation Specification
[8] Type 3 Tag Operation Specification
[9] Type 4 Tag Operation Specification
[10] Logical Link Control Protocol
[11] NFC Data Exchange Format (NDEF)
[12] NFC Record Type Definition (RTD)
[13] Text Record Type Definition
[14] proxmark3
[15] NFC Digital Protocol
[16] Fuzzing the Phone in your Phone
[17] Android NPP push protocol
[18] Simple NDEF Exchange Protocol Technical Specification
[19] Platform Versions
[20] Discover Android
[21] SNEP protocol and P2P response
[22] Long range NFC Detection
[23] Zero-Permission Android Applications
[24] Practical attacks on NFC enabled cell phones, Verdult and Kooman
[25] libpng.org
[26] Securing Near Field Communications, Kortvedt
[27] ISO 14443 Library Reference Guide
[28] Near Field Communication
[29] NDEF Push / Android Beam / NFC Tags Demo Applet