Charlie Miller: Exploring the NFC Attack Surface 
App
File type
Library used (if known)
Contacts
vCard
Gallery
png
libpng 1.2.42 - Jan 2010
jpg
libjpg 6n - 1998
gif
libgif 4.1.6 - 2007
bmp
tiff
libtiff 3.9.4 - Jul 2010
Videos (video-suite)
mp4
wmv
3gp
mp3
aac
ﬂac
wma
amr
wav
ogg
Documents (ofﬁce-suite)
pdf
poppler 16.6 - May 2011
txt
doc(x)
docximport.so - KDE 4.74 - Dec 2011
xls(x)
xlsximport.so - KDE 4.74
ppt(x)
powerpointimport.so - KDE 4.74
Charlie Miller: Exploring the NFC Attack Surface 
Figure 18: Actual Nokia N9 attack surface
Possible attacks
Looking at the above discussion, there are a few avenues of attack.  We’ll discuss a few 
in detail.  In each of them we assume an attacker can get close enough to an active 
phone to cause an NFC transaction to occur.  We also assume that the screen is on 
and, when necessary, the device is not locked.  This might be getting very close to 
someone using their phone, putting a device next to a legitimate NFC payment terminal, 
or using some kind of antenna setup to do it across the room, see [22].
From [23], active reads have been made of NFC from a distance of up to 1.5 meters.  
Android NFC Stack bug
If one were to exploit one of the NFC stack bugs shown earlier in Android, you could 
imagine exploiting it and getting control of the NFC Service.  This isn’t necessarily the 
best process for an attacker to control.  If you look at the AndroidManﬁest.xml ﬁle for 
com.android.nfc, you see it does not contain Internet permissions.  It will be difﬁcult for 
an attacker to exﬁltrate data over the Internet without this permission, although it is 
possible, see [24].  However, the NFC Service does have BLUETOOTH and 
BLUETOOTH_ADMIN, so it is probably possible to establish a Bluetooth connection 
Charlie Miller: Exploring the NFC Attack Surface 
with the attacker.  As we’ll see for the N9 below, if an attacker can bluetooth pair with 
the device, it is possible to take complete control of the device.
Android Browser
Since an attacker can force an active device to display an arbitrary web page, armed 
with an Android browser exploit, an attacker can compromise an active device with an 
NFC tag.  In this case, the attacker will be running code in the browser itself and not in 
the NFC service.
N9 Bluetooth pairing
If the N9 has NFC enabled and does not have “Conﬁrm sharing and connecting” 
enabled (see Figure 17), if you present it a Bluetooth Pairing message, it will 
automatically pair with the device in the message without user conﬁrmation, even if 
Bluetooth is disabled.
An example of such an NDEF message is 
  [0000] d4 0c 27 6e 6f 6b 69 61 2e 63 6f 6d 3a 62 74 01  ..'nokia.com:bt.
  [0010] 00 1d 4f 92 90 e2 20 04 18 31 32 33 34 00 00 00  ..O... ..1234...
  [0020] 00 00 00 00 00 00 00 00 00 0c 54 65 73 74 20 6d  ..........Test m
  [0030] 61 63 62 6f 6f 6b                                acbook         
In this message, a PIN is given as “1234”, a Bluetooth address, and a name of the 
device are also provided.  Once paired, it is possible to use tools such as obexfs, 
gsmsendsms, or xgnokii to perform actions with the device.  Basically, if a user just 
enables NFC and makes no other changes to the device, it can be completely controlled 
by an attacker if the attacker can get it read an NFC tag.  
On the other hand, If you have “Conﬁrm sharing and connecting” enabled, a prompt 
appears that looks like that seen in Figure 19, below.
Charlie Miller: Exploring the NFC Attack Surface 
Figure 19: The prompt raised if notiﬁcation is required
A similar attack against a Nokia 6212 was outlined in [25] except the authors didn’t 
know how to make the device complete the pairing process and so tried additional ways 
to try to activate the Bluetooth.  Also, due to the fact they never succeeded in pairing, 
they uploaded an app instead of trying to control the device.  Finally, on the 6212, by 
default, the device prompted before pairing where by default the N9 does not.
N9 bugs
If the victim has the Conﬁrm sharing and connecting feature enabled, then the attacker 
will have to resort to Content Sharing as an attack vector.  Recall that without user 
interaction, it is possible to force the Nokia N9 to parse and display a variety of ﬁle 
formats, oftentimes in outdated libraries.  
If one were to try to use PNG ﬁles, for example, the version of PNG shipped on the 
latest N9 ﬁrmwares is 1.2.42.  There are at least two critical vulnerabilities that have 
been found and patched since that release, as shown in [26].
If one wanted to ﬁnd their own vulnerabilities, they would just have to spend some time 
fuzzing.  To demonstrate this, we brieﬂy fuzzed the Documents application on the Nokia 
N9.  Here are a couple of interesting crashes that we found, as seen in valgrind.  
Charlie Miller: Exploring the NFC Attack Surface 
First a crash for PPT rendering, 
==3572== Thread 2:
==3572== Invalid free() / delete / delete[] / realloc()
==3572==    at 0x48347B4: free (vg_replace_malloc.c:366)
==3572==    by 0x5DE780F: free_mem (in /lib/libc-2.10.1.so)
==3572==    by 0x5DE71F7: __libc_freeres (in /lib/libc-2.10.1.so)
==3572==    by 0x48285B7: _vgnU_freeres (vg_preloaded.c:61)
==3572==    by 0x5DB5AC3: __libc_enable_asynccancel (libc-cancellation.c:66)
==3572==    by 0x6826CAF: ??? (in /lib/libglib-2.0.so.0.2800.4)
==3572==  Address 0x7491f30 is not stack'd, malloc'd or (recently) free'd
Here is one for PDF rendering.
==4002== Invalid write of size 1
==4002==    at 0x7290FB4: SplashXPathScanner::clipAALine(SplashBitmap*, int*, 
int*, int) (in /usr/lib/libpoppler.so.13.0.0)
==4002==  Address 0xf8dc5090 is not stack'd, malloc'd or (recently) free'd
Finally, here is one in DOC rendering.  (Note, this is a 0-day not only for Nokia N9 via 
NFC, but also for Kofﬁce, which utilizes the same libraries).  The following excerpt 
comes from the ﬁle kofﬁce-2.3.3/ﬁlters/kword/msword-odf/wv2/src/styles.cpp.  
bool STD::read( U16 baseSize, U16 totalSize, OLEStreamReader* stream, bool 
preservePos )
...
    grupxLen = totalSize - ( stream->tell() - startOffset );
    grupx = new U8[ grupxLen ];
    int offset = 0;
    for ( U8 i = 0; i readU16();  // size of the next UPX
        stream->seek( -2, G_SEEK_CUR ); // rewind the "lookahead"
        cbUPX += 2;                     // ...and correct the size
        for ( U16 j = 0; j readU8();  // read the whole UPX
        }
...
In this function, it allocates a buffer for the array grupx based on a parameter passed to 
this function.  It then ﬁlls in this array based on an unsigned short read in directly from 
the ﬁle, stored in the variable cbUPX.  In this case, the length of a copy and the data 
being copied is read directly from the supplied ﬁle, which leads to an ideal heap 
overﬂow.  Depending on the way memory is manipulated, it is possible to get control of 
the process using this vulnerability.  Below demonstrates one such trial.
Program received signal SIGSEGV, Segmentation fault.
0x18ebffaa in ?? ()
(gdb) bt
#0  0x18ebffaa in ?? ()
#1  0x41f61f64 in wvWare::Parser::~Parser() () from /usr/lib/libkowv2.so.9
#2  0x41f6537c in ?? () from /usr/lib/libkowv2.so.9
#3  0x41f6537c in ?? () from /usr/lib/libkowv2.so.9
(gdb) x/2i 0x41f61f5c
Charlie Miller: Exploring the NFC Attack Surface 
   0x41f61f5c : 
ldr 
r12, [r3, #4]
   0x41f61f60 : 
blx 
r12
(gdb) print /x $r3
$3 = 0x41414141
In this case, a value read from the ﬁle is used as a pointer.  This data where this pointer 
points is then read and used as a function pointer.  With minimal work, this would lead 
to control of program ﬂow and ultimately code execution.
Summary
Any time a new way for data to enter a device is added, it opens up the possibility of 
remote exploitation by an attacker.  In the case of NFC, a user would typically think that 
the new data would be limited to just a few bytes embedded in an NFC tag.  This 
document shows that the new attack surface introduced by NFC is actually quite large.  
The code responsible for parsing NFC transmissions begins in kernel drivers, proceeds 
through services meant to handle NFC data, and eventually ends at applications which 
act on that data.  We provide techniques and tools to carry out fuzzing of the low level 
protocol stacks associated with NFC.
At a higher level, for both the Android and MeeGo device we examined, it is possible 
through the NFC interface to make the device, without user interaction, parse web 
pages, image ﬁles, ofﬁce documents, videos, etc which most users of NFC would 
probably be surprised to learn.  
NFC offers convenience to share ﬁles and games as well as make mobile payments. 
However, since anytime an attacker is in close proximity to a victim, she can force the 
victim’s device to parse one of over 20 different formats without user interaction, it has 
to raise security concerns.
Charlie Miller: Exploring the NFC Attack Surface 
Acknowledgements
This was a long project, mostly out of my comfort zone.  I’m sure I’m forgetting some 
people but here is a list of folks I’d like to thank for their help in no particular order.
Accuvant: Gave me a paycheck while letting me do this work
Cyber Fast Track: Partially funded all this work
Josh Drake: Android exploitation help
Crowdstrike (especially Georg Wicherski) For sharing and walking me through their 
Android browser exploit
Michael Ossmann: GNU Radio help
Travis Goodspeed: Help with N9 basics
Kevin Finisterre: Bluetooth help
Corey Benninger and Max Sobell: GNU Radio and basic NFC stuffs
Collin Mulliner: For trying to help me do NFC memory injection, although I never used it
Adam Laurie: For convincing me that you could do card emulation successfully
Jon Larimer: For pointing out one of my crashes corresponded to the double free they 
ﬁxed in 4.0.1
Shawn Moyer: For proofreading this doc!
Charlie Miller: Exploring the NFC Attack Surface 
References
[1] ISO 14443 Part 2: Radio frequency power and signal interface http://
www.waazaa.org/download/fcd-14443-2.pdf
[2] NFC and GNU Radio, part 1, Miller, https://www.openrce.org/repositories/users/
camill8/nfc-usrp.pdf
[3] NFC and GNU Radio, part 2, Miller, https://www.openrce.org/repositories/users/
camill8/nfc-usrp-2.pdf
[4] ISO 14443 Part 3: Initialization and anticollision http://www.waazaa.org/download/
fcd-14443-3.pdf
[5] Type 1 Tag Operation Speciﬁcation http://apps4android.org/nfc-speciﬁcations/
NFCForum-TS-Type-1-Tag_1.1.pdf
[6] Interview: Karsten Nohl http://www.thetechherald.com/articles/Interview-Karsten-
Nohl-Mifare-Classic-researcher-speaks-up/6954/
[7] Type 2 Tag Operation Speciﬁcation http://apps4android.org/nfc-speciﬁcations/
NFCForum-TS-Type-2-Tag_1.1.pdf
[8] Type 3 Tag Operation Speciﬁcation http://apps4android.org/nfc-speciﬁcations/
NFCForum-TS-Type-3-Tag_1.1.pdf
[9] Type 4 Tag Operation Speciﬁcation http://apps4android.org/nfc-speciﬁcations/
NFCForum-TS-Type-4-Tag_2.0.pdf
[10] Logical Link Control Protocol NFCForum-TS-LLCP_1.1
[11] NFC Data Exchange Format (NDEF) http://www.maintag.fr/ﬁchiers/pdf-fr/nfcforum-
ts-ndef-1-0.pdf
[12] NFC Record Type Deﬁnition (RTD) http://www.maintag.fr/ﬁchiers/pdf-fr/nfcforum-ts-
rtd-1-0-1.pdf
[13] Text Record Type Deﬁnition http://www.maintag.fr/ﬁchiers/pdf-fr/nfcforum-ts-rtd-
text-1-0.pdf
[14] proxmark3 http://proxmark3.com/
[15] NFC Digital Protocol ftp://ftp.heanet.ie/disk1/sourceforge/n/project/nf/nfsresearch/
Open%20NFC/custom_layout12.pdf
[16] Fuzzing the Phone in your Phone http://www.blackhat.com/presentations/bh-
usa-09/MILLER/BHUSA09-Miller-FuzzingPhone-PAPER.pdf
[17] Android NPP push protocol http://source.android.com/compatibility/ndef-push-
protocol.pdf
[18] Simple NDEF Exchange Protocol Technical Speciﬁcation
[19] Platform Versions http://developer.android.com/resources/dashboard/platform-
versions.html
[20] Discover Android http://www.android.com/about/
[21] SNEP protocol and P2P response http://www.libnfc.org/community/topic/559/
android-nfc-snep-protocol-and-p2p-response/
[22] http://2012.hackitoergosum.org/blog/wp-content/uploads/2012/04/HES-2012-
rlifchitz-contactless-payments-insecurity.pdf
[23] Long range NFC Detection, http://www.youtube.com/watch?v=Wwy8ButHbcU
[24] Zero-Permission Android Applications http://leviathansecurity.com/blog/archives/17-
Zero-Permission-Android-Applications.html
Charlie Miller: Exploring the NFC Attack Surface 
[25] Practical attacks on NFC enabled cell phones, Verdult and Kooman, http://
www.cs.ru.nl/~rverdult/Practical_attacks_on_NFC_enabled_cell_phones-NFC11.pdf
[26] http://www.libpng.org/pub/png/libpng.html
Other useful references:
Securing Near Field Communications, Kortvedt, http://ntnu.diva-portal.org/smash/get/
diva2:347744/FULLTEXT01
ISO 14443 Library Reference Guide http://www.ti.com/rﬁd/docs/manuals/refmanuals/
RF-MGR-MNMN-14443-refGuide.pdf
Near Field Communication http://en.wikipedia.org/wiki/Near_ﬁeld_communication
NDEF Push / Android Beam / NFC Tags Demo Applet http://grundid.de/nfc/
Charlie Miller: Exploring the NFC Attack Surface