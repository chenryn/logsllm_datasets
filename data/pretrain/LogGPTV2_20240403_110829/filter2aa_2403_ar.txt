          push    ecx 
          push    OFFSET $SG3834 ; 'You entered %d... ', 0aH, 00H 
          call    _printf 
          add     esp, 8 
          jmp     SHORT $LN1@main 
$LN2@main: 
          push    OFFSET $SG3836 ; 'What you entered? Huh? ', 0aH, 00H 
          call    _printf 
          add     esp, 4 
$LN1@main: 
          xor     eax, eax 
① 请参照 http://msdn.microsoft.com/en-us/library/9y6s16x1(VS.71).aspx。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
75 
当被调用方函数 callee（本例中是 scanf()函数）使用 EAX 寄存器向调用方函数 caller（本例中是 main()
函数）传递返回值。 
之后，“CMP EAX，1”指令对返回值进行比对，检查其值是否为 1。 
JNE 是条件转移指令其全称是“Jump if Not Equal”。在两值不相同时进行跳转。 
就是说，如果 EAX 寄存器里的值不是 1，则程序将跳转到 JNE 所指明的地址（本例中会跳到
$LN1@main）；在将控制权指向这个地址之后，CPU 会执行其后的打印指令，显示“What you entered? Huh?”。
另一种情况是 scanf()成功读取指定数据类型的数据，其返回值就会是 1，此时不会发生跳转，而是继续执
行 JNE 以后的指令，显示‘You entered %d…’和变量 x 的值。 
在 scanf()函数成功地给变量赋值的情况下，程序会一路执行到 JMP（无条件转移）指令。这条指令会
跳过第二条调用 printf()函数的指令，从“XOR EAX,EAX”指令开始执行，从而完成 return 0 的操作。 
可见，“一般地说”条件判断语句会出现成对的“CMP/Jcc”指令。此处cc是英文“condition code”
的缩写。比较两个值的CMP指令会设置处理器的标志位
①
7.3.2 MSVC：x86：IDA 
。Jcc指令会检查这些标志位，判断是否进行跳
转。 
但是上述的说法容易产生误导，实际上 CMP 指令进行的操作是减法运算。确切地说，不仅是 CMP
指令所有的“数学/算术计算”指令都会设置标志位。如果将 1 与 1 进行比较，1−1=0，ZF 标志位（“零”
标识位，最终运算结果是 0）将被计算指令设定为 1。将两个不同的数值进行 CMP 比较时，ZF 标志位
的值绝不会是 1。JNE 指令会依据 ZF 标志位的状态判断是否需要进行跳转，实际上此两者（Jump if Not 
Zero）的同义指令。JNE 和 JNZ 的 opcode 都相同。所以，即使使用减法运算操作指令 SUB 替换 CMP
指令，Jcc 指令也可以进行正常的跳转。不过在使用 SUB 指令时，我们还需要分配一个寄存器保存运算
结果，而 CMP 则不需要使用寄存器保存运算结果。 
现在来让 IDA 大显身手。对于多数初学者来说，使用 MSVC 编译器的/MD 选项是个值得推荐的
好习惯。这个选项会要求编译器“不要链接（link）标准函数”，而是从 MSVCR＊.DLL 里导入这些
标准函数。总之，使用/MD 选项编译出来的代码一目了然，便于我们观察它在哪里、调用了哪些标
准函数。 
在使用 IDA 分析程序的时候，应当充分利用它的标记功能。比如说，分析这段程序的时候，我们明
白在发生错误的时候会执行 JNE 跳转。此时就可以用鼠标单击跳转的 JNE 指令，按下“n”键，把相应
的标签（lable）改名为“error”；然后把正常退出的标签重命名为“exit”。这种修改就可大幅度增强代码
的可读性。 
.text:00401000 _main proc near 
.text:00401000 
.text:00401000 var_4 = dword ptr -4 
.text:00401000 argc  = dword ptr  8 
.text:00401000 argv  = dword ptr  0Ch 
.text:00401000 envp  = dword ptr  10h 
.text:00401000 
.text:00401000        push     ebp 
.text:00401001        mov      ebp, esp 
.text:00401003        push     ecx 
.text:00401004        push     offset Format ; "Enter X：\n" 
.text:00401009        call     ds:printf 
.text:0040100F        add      esp, 4 
.text:00401012        lea      eax, [ebp+var_4] 
.text:00401015        push     eax 
.text:00401016        push     offset aD ; "%d" 
.text:0040101B        call     ds:scanf 
① processor flags,参见 http://en.wikipedia.org/wiki/FLAGS_register_(computing)。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
76 
逆向工程权威指南（上册） 
.text:00401021        add      esp, 8 
.text:00401024        cmp      eax, 1 
.text:00401027        jnz      short error 
.text:00401029        mov      ecx, [ebp+var_4] 
.text:0040102C        push     ecx 
.text:0040102D        push     offset aYou ; "You entered %d...\n" 
.text:00401032        call     ds:printf 
.text:00401038        add      esp, 8 
.text:0040103B        jmp      short exit 
.text:0040103D 
.text:0040103D error: ; CODE XREF: _main+27 
.text:0040103D        push     offset aWhat ; "What you entered? Huh?\n" 
.text:00401042        call     ds:printf 
.text:00401048        add      esp, 4 
.text:0040104B 
.text:0040104B exit:  ; CODE XREF: _main+3B 
.text:0040104B        xor      eax, eax 
.text:0040104D        mov      esp, ebp 
.text:0040104F        pop      ebp 
.text:00401050        retn 
.text:00401050 _main endp 
如此一来，这段代码就容易理解了。虽然重命名标签的功能很强大，但是逐一修改每条指令的标签则
无疑是画蛇添足。 
此外，IDA 还有如下一些高级用法。 
整理代码： 
标记某段代码之后，按下键盘数字键的“－”减号，整段代码将被隐藏，只留下首地址和标签。下面
的例子中，我隐藏了两段代码，并对整段代码进行了重命名。 
.text:00401000 _text  segment para public 'CODE' use32 
.text:00401000         assume cs:_text 
.text:00401000         ;org 401000h 
.text:00401000 ;  ask for X 
.text:00401012 ;  get X 
.text:00401024         cmp     eax, 1 
.text:00401027         jnz     short error 
.text:00401029 ;  print result 
.text:0040103B         jmp     short exit 
.text:0040103D 
.text:0040103D error: ; CODE XREF: _main+27 
.text:0040103D         push  offset aWhat ; "What you entered? Huh?\n" 
.text:00401042         call  ds:printf 
.text:00401048         add   esp, 4 
.text:0040104B 
.text:0040104B exit:  ; CODE XREF: _main+3B 
.text:0040104B         xor   eax, eax 
.text:0040104D         mov   esp, ebp 
.text:0040104F         pop   ebp 
.text:00401050         retn 
.text:00401050 _main endp 
如需显示先前隐藏的代码，可以直接使用数字键盘上的“＋”加号。 
图解模式： 
按下空格键，IDA 将会进入图解的显示方式。其效果如图 7.7 所示。 
判断语句会分出两个箭头，一条是红色、一条是绿色。当判断条件表达式的值为真时，程序会走绿色
箭头所示的流程；如果判断条件表达式不成立，程序会采用红色箭头所标示的流程。 
图解模式下，也可以对各分支节点命名和收缩。图 7.8 处理了 3 个模块。 
这种图解模式非常实用。逆向工程工作经验不多的人，可使用这种方式来大幅度地减少他需要处理
的信息量。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
77 
图 7.7  IDA 的图解模式 
图 7.8  IDA 图解模式下的收缩操作 
7.3.3 MSVC：x86+OllyDbg 
我们使用 OllyDbg 调试刚才的程序，在 scanf()异常返回的情况下强制其继续运行余下的指令。 
在把本地变量的地址传递给 scanf()的时候，变量本身处于未初始化状态，其值应当是随机的噪声数据。
如图 7.9 所示，变量 x 的值为 0x6E494714。 
图 7.9  使用 OllyDbg 观察 scanf()的变量传递过程 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
78 
逆向工程权威指南（上册） 
在执行 scanf()函数的时候，我们输入非数字的内容，例如 “asdasd”。这时候 scanf()会通过 EAX 寄存
器返回 0，如图 7.10 所示。这个零意味着 scanf()函数遇到某种错误。 
图 7.10  使用 OllyDbg 观察 scanf()的异常处理 
执行 scanf()前后，变量 x 的值没有发生变化。在上述情况下，scanf()函数仅仅返回 0，而没对变量进行
赋值。 
现在来“hack”一下。右键单击 EAX，选中“Set to 1”。 
在此之后 EAX 寄存器存储的值被人为设定为 1，程序将完成后续的操作，
printf()函数会在控制台里显示数据栈里变量 x 的值。 
我们使用 F9 键继续运行程序。此后控制台的情况如图 7.11 所示。 
1850296084 是十进制值，其十六进制值就是我们刚才看到的 0x6E494714。 
7.3.4 MSVC：x86+Hiew 
下面，我们一起修改可执行文件。所谓的“修改”可执行文件，就是对其打补丁（即人们常说的“patch”）。
通过打补丁的方法，我们可以强制程序在所有情况下都进行输出。 
首先，我们要启用 MSVC 的编译选项/MD。这样编译出来的可执行文件将把标准函数链接到
MSVCR*.DLL，以方便我们在可执行文件的文本段里找到 main()函数。此后，我们使用 Hiew 工具打开可
执行文件，找到.text 段开头部分的 main()函数（依次使用 Enter, F8, F6, Enter, Enter）。 
然后会看到图 7.12 所示的界面。 
图 7.12  使用 Hiew 观察 main()函数 
图 7.11  控制台窗口 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
79 
Hiew 能够识别并显示 ASCIIZ，即以 null 为结束字节的 ASCII 字符串。它还能识别导入函数的函数名称。 
如图 7.13 所示，将鼠标光标移至.0040127 处（即 JNZ 指令的所在位置，我们使其失效），按 F3 键，
然后输入“9090”。“9090”是两个连续的 NOP（No Operation，空操作）的 opcode。 
图 7.13  在 Hiew 中把 JNZ 替换为两条 NOP 指令 
然后按 F9 键（更新），把修改后的可执行文件保存至磁盘。 
连续的 9090 是典型的修改特征，有的人会觉得不甚美观。此外还可以把这个 opcode 的第二个字节改
为零（opcode 的两个字节代表 jump offset），令 jcc 指令跳转的偏移量为 0，从而继续运行下一条指令。 
刚才的修改方法可使转移指令失效。除此以外我们还可以强制程序进行转我们可以把 jcc 对应的 opcode 的第
一个字节替换为“EB”，不去修改第二字节（offset）。这种修改方法把条件转移指令替换为了无条件跳转指令。经
过这样的调整之后，本例中的可执行文件都会无条件地显示错误处理信息“What you entered? Huh?”。 
7.3.5 MSVC:x64 
本例使用的变量 x 是 int 型整数变量。在 x64 系统里，int 型变量还是 32 位数据。在 64 位平台上访问寄存
器的（低）32 位时，计算机就要使用助记符以 E-头的寄存器名称。然而在访问 x64 系统的 64 位指针时，我们
就需要使用 R-字头的寄存器名称、处理完整的 64 位数据。 
指令清单 7.12  MSVC 2012 x64 
_DATA   SEGMENT 
$SG2924 DB     
'Enter X: ', 0aH, 00H 
$SG2926 DB     
'%d', 00H 
$SG2927 DB     
'You entered %d... ', 0aH, 00H 
$SG2929 DB     
'What you entered? Huh? ', 0aH, 00H 
_DATA   ENDS 
_TEXT   SEGMENT 
x$ = 32 
main    PROC 
$LN5: 
         sub     rsp, 56 
         lea     rcx, OFFSET FLAT:$SG2924 ; 'Enter X: ' 
         call    printf 
         lea    
rdx, QWORD PTR x$[rsp] 
         lea     rcx, OFFSET FLAT:$SG2926 ; '%d' 
         call    scanf 
         cmp     eax, 1 
         jne     SHORT $LN2@main 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
80 
逆向工程权威指南（上册） 
         mov     edx, DWORD PTR x$[rsp] 
         lea     rcx, OFFSET FLAT:$SG2927 ; 'You entered %d... ' 
         call    printf 
         jmp     SHORT $LN1@main 
$LN2@main: 
         lea     rcx, OFFSET FLAT:$SG2929 ; 'What you entered? Huh? ' 
         call    printf 
$LN1@main: 
         ; return 0 
         xor     eax, eax 
         add     rsp, 56 
         ret     0 
main    ENDP 
_TEXT   ENDS 
END 
7.3.6 ARM 
ARM: Optimizing Keil 6/2013 (Thumb 模式) 
指令清单 7.13  Optimizing Keil 6/2013 (Thumb 模式) 
var_8   
= -8 
PUSH   
{R3,LR} 
ADR   
R0, aEnterX  
; "Enter X:\n" 
BL   
__2printf 
MOV   
R1, SP 
ADR   
R0, aD  
; "%d" 
BL   
__0scanf 
CMP   
R0, #1 
BEQ   
loc_1E 
ADR   
R0, aWhatYouEntered  ; "What you entered? Huh?\n" 
BL   
__2printf 
loc_1A  
; CODE XREF: main+26 
MOVS   
R0, #0 
POP   
{R3,PC} 
loc_1E   
; CODE XREF: main+12 
LDR   
R1, [SP,#8+var_8] 
ADR   
R0, aYouEnteredD___  ; "You entered %d...\n" 
BL   
__2printf 
B  
loc_1A 
这里我们见到了未介绍过的 CMP 和 BEQ 指令。 
ARM 系统的 CMP 与 x86 系统的同名指令相似。它们都是将两个参数相减，并设置相应的标志位。 
BEQ 是条件转移指令（Branch if EQual），在 CMP 操作数相等的情况下进行跳转。如果 CMP 比较
的两个值相同，则 ZF 标志寄存器的值就会是 1，那么 BEQ 指令就会跳转到它指定的偏移量上去。它
与 x86 的 JZ 指令作用相同。 
其余的指令并不难理解：程序流有两个分支，这两个分支最终收敛于 loc_1A 处，通过“MOV R0, #0”
指令把返回值保存于 R0 寄存器，然后退出。 
ARM64 
指令清单 7.14  Non-optimizing GCC 4.9.1 ARM64 
 1 .LC0: 
 2  
.string "Enter X:" 
 3 .LC1: 
 4  
.string "%d" 
 5 .LC2: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
81 
 6  
.string "You entered %d...\n" 
 7 .LC3: 
 8  
.string "What you entered? Huh?" 
 9 f6: 
10 ; save FP and LR in stack frame: 
11  
stp     x29, x30, [sp, -32]! 
12 ; set stack frame (FP=SP) 
13  
add     x29, sp, 0 
14 ; load pointer to the "Enter X:" string: 
15  
adrp    x0, .LC0 
16  
add     x0, x0, :lo12:.LC0 
17  
bl      puts 
18 ; load pointer to the "%d" string: 
19  
adrp    x0, .LC1 
20  
add     x0, x0, :lo12:.LC1 
21 ; calculate address of x variable in the local stack 
22  
add     x1, x29, 28 
23  
bl      __isoc99_scanf 
24 ; scanf() returned result in W0. 
25 ; check it: 
26  
cmp     w0, 1 
27 ; BNE is Branch if Not Equal 
28 ; so if W0<>0, jump to L2 will be occurred 
29  
bne    .L2 
30 ; at this moment W0=1, meaning no error 
31 ; load x value from the local stack 
32  
ldr     w1, [x29,28] 
33 ; load pointer to the "You entered %d...\n" string: 
34  