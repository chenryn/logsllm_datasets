# IPv6 Address Discovery and Scanning Optimization

## Overview
This document outlines a method for discovering and scanning IPv6 addresses, with a focus on optimizing the process to be more efficient and cost-effective. The primary goal is not to identify new addresses but to improve the discovery and scanning of existing ones.

### Key Points
- **Size Reduction**: 15mm * 15mm
- **Cost Consideration**: Expensive!
- **Scanning Budget**: Not suitable for continuous scanning
- **Generation Method**: 666gen

## IPv6 Address Clustering and Upgrades
### Cluster Evaluation
1. **For Each IPv6 Address**:
   - Evaluate the best cluster upgrades by adding only one wildcard.
   - Remove clusters that do not have good upgrades (stardust).
   - Sort upgrades by density.
   - Continuously improve the cluster score by taking the next best upgrade, re-evaluating, and adding the upgraded cluster to the set.
   - De-duplicate the cluster set.

### Generation Process
1. **Select a Cluster Randomly** from the cluster set.
2. **For i in 0..32**:
   - Roll a weighted die to determine the nybble source.
     - Generate from stardust probability distribution.
     - Generate from the selected cluster.

## Fanning Out
### Nybble-Adjacent Fanout
1. **For Each Discovered Address**:
   - Generate up to 465 candidate addresses, each differing by one nybble.
   - The number of generated addresses (15-465) depends on the target network mask.
   - **Target Network**: 2000::/4
   - **Starting IP Address**: 2001:0558:0110:0000:ffff:ffff:0000:0021
   - Example Addresses:
     - 2001:0558:0110:0000:ffff:ffff:0000:0020
     - 2001:0558:0110:0000:ffff:ffff:0000:0022
     - 2001:0558:0110:0000:ffff:ffff:0000:0023
     - ...
     - 2001:0558:0110:0000:ffff:ffff:0000:002f
     - 2101:0558:0110:0000:ffff:ffff:0000:0021
     - 2201:0558:0110:0000:ffff:ffff:0000:0021
     - 2301:0558:0110:0000:ffff:ffff:0000:0021
     - ...
     - 2f01:0558:0110:0000:ffff:ffff:0000:0021

### /64 Sequential Fanout
1. **Sequentially Fan Out from Each Discovered ::1/64 Address**:
   - **/64 Networks**:
     - Neighboring ::1/64 addresses (sequentially increasing and decreasing).
   - **Hosts within a /64**:
     - Neighboring ::X/64 addresses (sequentially increasing).
   - **Target IP Address**: 2001:0558:0110:2fab::1
   - Example Neighboring /64 Networks:
     - 2001:0558:0110:4fa9::1
     - 2001:0558:0110:4faa::1
     - 2001:0558:0110:4fac::1
     - 2001:0558:0110:4fad::1
     - ...
   - Example Neighboring /64 Hosts:
     - 2001:0558:0110:4fab::2
     - 2001:0558:0110:4fab::3
     - 2001:0558:0110:4fab::4
     - ...

## Improved Discovery Rate
### Version 0.2
- **Addresses Found**: 58,838 in eight days
- **New IPs**: ~80% not found in public data sets
- **Rate**: 0.068 new IPs / second

### Version 0.3
- **Addresses Found**: 1.57M in one hour
- **New IPs**: ~78% not found in public data sets
- **Rate**: 342.19 new IPs / second
- **Improvement**: 503,234%

## Port Scanning Results
- **Port Scanned**: ~100K addresses from the newly discovered set
- **Common Ports Tested**:
  - **Port 21**: 2,593
  - **Port 22**: 17,979
  - **Port 23**: 2,620
  - **Port 80**: 9,604
  - **Port 443**: 8,491
  - **Port 445**: 173
  - **Port 3000**: 111
  - **Port 3306**: 643
  - **Port 5000**: 58
  - **Port 5432**: 159
  - **Port 8000**: 155
  - **Port 8080**: 687
  - **Port 8443**: 755
  - **Port 8888**: 93
  - **Port 27017**: 7
  - **Port 49152**: 77
  - **Port 49153**: 81
  - **Port 49154**: 133

- **Findings**:
  - Lots of network equipment (both infrastructure and CPE)
  - No-auth Mongo instances
  - Many ancient SSH and telnet servers

## Crowdsourced Scan Data
### Cloud Integration
- **Data Accessibility**: Users of IPv666 can optionally push scan results to the cloud.
- **Aggregation**: Scan results are aggregated into a queryable datastore.

### Online Portal
- **Query Interface**: An online portal where users can query the crowdsourced scan result set.
- **Official v0.4 Release**:
  - Install with `go get github.com/lavalamp-/ipv666/ipv666`
  - Push crowdsourced scan results to the cloud

## Conclusion
### Recap
- **Background**
- **The Scanning Problem**
- **Honeypotting for PSLAAC**
- **Modeling for non-PSLAAC**
- **Being Less Dumb**
- **Results**
- **To The Cloud**
- **IPv666**

### Links
- **IPv666 Blog Post**: <https://l.avala.mp/?p=285>
- **IPv666 GitHub Repository**: <https://github.com/lavalamp-/ipv666>
- **Entropy/IP**: <http://www.entropy-ip.com/>
- **6gen**: <https://zakird.com/papers/imc17-6gen.pdf>
- **Clustering of IPv6 address structure**: <https://arxiv.org/pdf/1806.01633.pdf>
- **IPv6 hitlist**: <https://ipv6hitlist.github.io/>

### Q&A
- **Thank You!**
- **Chris Grayson**: @_lavalamp
- **Marc Newlin**: @marcnewlin