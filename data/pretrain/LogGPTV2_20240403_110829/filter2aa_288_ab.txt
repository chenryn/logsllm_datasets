Not intended to identify new addresses 
15mm * 15mm 
EXPENSIVE! 
EXPENSIVE! 
Scanning budget not great for 
continuous scanning 
666gen 
●  For every IPv6 address 
○  Evaluate best cluster upgrades with adding only one wildcard 
●  Remove all clusters that had no good upgrades (stardust) 
●  Sort upgrades by density 
●  While cluster score still improving 
○  Take the next best upgrade 
○  Evaluate best cluster upgrades with adding only one wildcard 
○  Add the upgraded cluster to the cluster set 
○  De-duplicate 
15mm 
significant size reduction 
no scanning budget 
expensive! 
666gen Generation 
●  Select a cluster from cluster set at random 
●  For i in 0..32 
○  Roll a weighted die to determine nybble source 
■  Generate from stardust probability distribution 
■  Generate from selected cluster 
Fanning Out 
● 
Fan-out to discover addresses similar to 
those generated with modeling 
● 
Addresses with a 1-nybble difference from 
a newly discovered address 
● 
Sequentially-neighboring /64 networks and 
hosts 
Nybble-Adjacent Fanout 
● 
For each discovered address, generate up to 
465 candidate addresses, each differing by 
one nybble 
● 
15-465 addresses are generated depending 
on the target network mask 
● 
Target network 
2000::/4 
● 
Starting IP address 
2001:0558:0110:0000:ffff:ffff:0000:0021 
Nybble-Adjacent Fanout 
● 
For each discovered address, generate up to 
465 candidate addresses, each differing by 
one nybble 
● 
15-465 addresses are generated depending 
on the target network mask 
● 
Target network 
2000::/4 
● 
Starting IP address 
2001:0558:0110:0000:ffff:ffff:0000:0021 
2001:0558:0110:0000:ffff:ffff:0000:0020 
Nybble-Adjacent Fanout 
● 
For each discovered address, generate up to 
465 candidate addresses, each differing by 
one nybble 
● 
15-465 addresses are generated depending 
on the target network mask 
● 
Target network 
2000::/4 
● 
Starting IP address 
2001:0558:0110:0000:ffff:ffff:0000:0021 
2001:0558:0110:0000:ffff:ffff:0000:0020 
2001:0558:0110:0000:ffff:ffff:0000:0022 
Nybble-Adjacent Fanout 
● 
For each discovered address, generate up to 
465 candidate addresses, each differing by 
one nybble 
● 
15-465 addresses are generated depending 
on the target network mask 
● 
Target network 
2000::/4 
● 
Starting IP address 
2001:0558:0110:0000:ffff:ffff:0000:0021 
2001:0558:0110:0000:ffff:ffff:0000:0020 
2001:0558:0110:0000:ffff:ffff:0000:0022 
2001:0558:0110:0000:ffff:ffff:0000:0023 
Nybble-Adjacent Fanout 
● 
For each discovered address, generate up to 
465 candidate addresses, each differing by 
one nybble 
● 
15-465 addresses are generated depending 
on the target network mask 
● 
Target network 
2000::/4 
● 
Starting IP address 
2001:0558:0110:0000:ffff:ffff:0000:0021 
2001:0558:0110:0000:ffff:ffff:0000:0020 
2001:0558:0110:0000:ffff:ffff:0000:0022 
2001:0558:0110:0000:ffff:ffff:0000:0023 
... 
2001:0558:0110:0000:ffff:ffff:0000:002f 
Nybble-Adjacent Fanout 
● 
For each discovered address, generate up to 
465 candidate addresses, each differing by 
one nybble 
● 
15-465 addresses are generated depending 
on the target network mask 
● 
Target network 
2000::/4 
● 
Starting IP address 
2001:0558:0110:0000:ffff:ffff:0000:0021 
2001:0558:0110:0000:ffff:ffff:0000:0020 
2001:0558:0110:0000:ffff:ffff:0000:0022 
2001:0558:0110:0000:ffff:ffff:0000:0023 
... 
2001:0558:0110:0000:ffff:ffff:0000:002f 
... 
Nybble-Adjacent Fanout 
● 
For each discovered address, generate up to 
465 candidate addresses, each differing by 
one nybble 
● 
15-465 addresses are generated depending 
on the target network mask 
● 
Target network 
2000::/4 
● 
Starting IP address 
2001:0558:0110:0000:ffff:ffff:0000:0021 
2001:0558:0110:0000:ffff:ffff:0000:0020 
2001:0558:0110:0000:ffff:ffff:0000:0022 
2001:0558:0110:0000:ffff:ffff:0000:0023 
... 
2001:0558:0110:0000:ffff:ffff:0000:002f 
... 
2101:0558:0110:0000:ffff:ffff:0000:0021 
2201:0558:0110:0000:ffff:ffff:0000:0021 
2301:0558:0110:0000:ffff:ffff:0000:0021 
... 
2f01:0558:0110:0000:ffff:ffff:0000:0021 
/64 Sequential Fanout 
● 
Sequentially fan out from each 
discovered ::1/64 address 
● 
/64 networks 
○ 
Neighboring ::1/64 addresses (sequentially 
increasing and decreasing) 
● 
Hosts within a /64 
○ 
Neighboring ::X/64 addresses (sequentially 
increasing) 
● 
Target IP Address 
2001:0558:0110:2fab::1 
/64 Sequential Fanout 
● 
Sequentially fan out from each 
discovered ::1/64 address 
● 
/64 networks 
○ 
Neighboring ::1/64 addresses (sequentially 
increasing and decreasing) 
● 
Hosts within a /64 
○ 
Neighboring ::X/64 addresses (sequentially 
increasing) 
● 
Target IP Address 
2001:0558:0110:2fab::1 
Neighboring /64 networks: 
2001:0558:0110:4fa9::1 
2001:0558:0110:4faa::1 
2001:0558:0110:4fac::1 
2001:0558:0110:4fad::1 
... 
/64 Sequential Fanout 
● 
Sequentially fan out from each 
discovered ::1/64 address 
● 
/64 networks 
○ 
Neighboring ::1/64 addresses (sequentially 
increasing and decreasing) 
● 
Hosts within a /64 
○ 
Neighboring ::X/64 addresses (sequentially 
increasing) 
● 
Target IP Address 
2001:0558:0110:4fab::1 
Neighboring /64 networks: 
2001:0558:0110:4fa9::1 
2001:0558:0110:4faa::1 
2001:0558:0110:4fac::1 
2001:0558:0110:4fad::1 
... 
Neighboring /64 hosts: 
2001:0558:0110:4fab::2 
2001:0558:0110:4fab::3 
2001:0558:0110:4fab::4 
... 
Is Us Smarter? 
Improved Discovery Rate 
v0.2 
●  58,838 addresses found in eight 
days, ~80% not found in public 
data sets 
●  0.068 new IPs / second 
v0.3 
●  1.57M addresses found in one 
hour, ~78% not found in public 
data sets 
●  342.19 new IPs / second 
503,234% Improvement 
MOAR RESULTS 
● 
Port scanned ~100K addresses 
from the newly discovered set, 
testing some common ports 
● 
Lots of network equipment (both 
infrastructure and CPE) 
● 
No-auth Mongo instances 
● 
Lots of ancient SSH and telnet 
servers 
Port 
Count 
Port 
Count 
Port 
Count 
21 
2,593 
3000 
111 
8443 
755 
22 17,979 
3306 
643 
8888 
93 
23 
2,620 
5000 
58 
27017 
7 
80 
9,604 
5432 
159 
49152 
77 
443 
8,491 
8000 
155 
49153 
81 
445 
173 
8080 
687 
49154 
133 
To The Cloud 
Crowdsourced Scan Data 
● 
How can we make this data more 
accessible? 
● 
Users of IPv666 optionally push scan 
results to the cloud 
● 
Scan results are aggregated into a 
queryable datastore 
IPv666 Online Portal 
● 
Online portal where users can query the 
crowdsourced scan result set 
● 
IPv666 
Official v0.4 Release! 
●  Install with go get: 
go get github.com/lavalamp-/ipv666/ipv666 
●  Push crowdsourced scan results to the cloud 
Was Ist Das? 
scan discover 
scan alias 
generate addresses 
generate model 
generate blacklist 
clean 
convert 
Linky Links 
●  IPv666 Blog Post 
https://l.avala.mp/?p=285 
●  IPv666 GitHub Repository 
https://github.com/lavalamp-/ipv666 
Conclusion 
Recap 
●  Background 
●  The Scanning Problem 
●  Honeypotting for PSLAAC 
●  Modeling for non-PSLAAC 
●  Being Less Dumb 
●  Results 
●  To The Cloud 
●  IPv666 
●  Conclusion 
Moar Links 
●  Entropy/IP 
http://www.entropy-ip.com/ 
●  6gen 
https://zakird.com/papers/imc17-6gen.pdf 
●  Clustering of IPv6 address structure 
https://arxiv.org/pdf/1806.01633.pdf 
●  IPv6 hitlist 
https://ipv6hitlist.github.io/ 
Q&A 
THANKS! 
<3 
Chris Grayson 
@_lavalamp 
Marc Newlin 
@marcnewlin