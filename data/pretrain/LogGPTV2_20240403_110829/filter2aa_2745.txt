**Date:** July 19, 2013  
**Event:** DEX EDUCATION 201  
**Topic:** Anti-Emulation  
**Speaker:** Tim Strazzere - HITCON 2013

---

### **Who Am I?**
- **Role:** Lead Research & Response Engineer at Lookout Mobile Security (an antivirus company)
- **Experience:**
  - Reversed the Android Market/Google Play Protocol
  - Specialized in reversing "exotic" platforms and automating mundane tasks
  - Passionate about reversing mobile malware, creating detailed write-ups, and educating others to raise security standards

---

### **Agenda**
1. Recap of Dex Education 101
2. Who is evading emulators and how?
3. Who is hiding emulators and how?
4. Easy detection methods
5. Basic emulator detection (QEMU-FOO)
6. Advanced detection techniques
7. Conceptualizing detection

---

### **Recap of Dex Education 101**
- **Decompilers and Disassemblers:**
  - Easily breakable, but few were addressing this issue.
  - Predicting these vulnerabilities can help prevent and detect attacks.
- **Advancements:**
  - **DexGuard:** Considered the most sophisticated Android malware.
  - **HoseDex2Jar:** Used a "big ego" tactic by injecting files into the header.
    - The author even included a method named `hiTim` (a friendly nod).
  - **Resources:**
    - GitHub: [github.com/strazzere/dehoser](https://github.com/strazzere/dehoser)
    - Slides: [www.strazzere.com/papers/DexEducation-PracticingSafeDex.pdf](http://www.strazzere.com/papers/DexEducation-PracticingSafeDex.pdf)
  - **Latest Example:**
    - Simple cryptographic operations inside native code. Feel free to explore!

---

### **Who is Evading Emulators?**
- **Security Researchers**
- **Game Cheaters/Hackers**
- **Developers Competing with Rivals**
- **Malware Authors**

---

### **Motive for Evasion**
- **Games:**
  - Detect emulators to prevent cheating and abuse.
  - Uniquely identify devices to prevent referral abuse and easy cheating.
  - Stop farming and cheats.
- **App Developers:**
  - Protect secrets and intellectual property.
- **Security Researchers:**
  - Break systems, gain recognition, and expose vulnerabilities.
- **Malware Authors:**
  - Avoid detection of their malicious software.

---

### **Is Detection Important?**
- **Games/Apps:**
  - Raise the bar for cheating without false positives.
- **Security Researchers:**
  - Prevent being compromised and avoid public embarrassment.
- **Antivirus Companies:**
  - Achieve broad detection without false positives.

---

### **Evasion Detection Differences**
- **Games/Apps:**
  - Detect and report abuse or fail to work properly.
- **Security Researchers:**
  - Probe infrastructure (e.g., Bouncer).
- **Antivirus Companies:**
  - Monitor malware behavior while it executes.

---

### **How Do People Evasive Emus?**
- **Common Checks:**
  - Phone number, IMEI, device ID, build model, etc.
  - Example: `is phone number == 15555215554`
  - Traditional "red pills" and timing-based red pills (e.g., Bluebox/Dexterlabs).
- **Hex Editing:**
  - Modify phone number, IMEI, device ID, and fingerprints.
  - Resource: [Changing IMEI, Provider, Model, and Phone](http://vrt-blog.snort.org/2013/04/changing-imei-provider-model-and-phone.html)

---

### **How Are People Hiding Emus?**
- **QEMU Limitations:**
  - Not designed for stealth.
  - Hardware components (radio, GPS, camera) are communicated through QEMU pipes, which are not hidden.
  - Relies on system properties and a heavy infrastructure.
- **Detection via System Properties:**
  - Many properties appear "odd" in emulators.
  - Masking these may not be sufficient.
  - Smart attackers can use geographical context to predict and evade detection.
- **Reflection and Hooking:**
  - Use reflection to trap property access.
  - Hook the `getprop` command (e.g., [ldpreloadhook](https://github.com/poliva/ldpreloadhook)).

---

### **Taint Analysis**
- **Taintdroid:**
  - Powerful but not stealthy.
  - Can run on real devices.
  - Detection is relatively easy (e.g., check for package name `org.appanalysis`).

---

### **Checking the Plumbing**
- **QEMU Pipes:**
  - Publicly exposed if the app has internet permission.
  - Examples: `/dev/qemu_pipe`, `/dev/socket/qemud`.
  - Simple file checks can suffice; connecting to these pipes can provide additional information.
- **Hiding Pipes:**
  - Non-trivial due to hardcoded references across the codebase.
  - Files like `/system/lib/libc_malloc_debug_qemu.so`, `/sys/qemu_trace`, and `/system/bin/qemu-props` stand out.
- **Drivers:**
  - Easily spotted (e.g., follow the goldfish).

---

### **Checking the Content**
- **Targeted Devices:**
  - Know the targets and their typical behavior.
  - Malware often targets specific user profiles.
- **Behavioral Anomalies:**
  - Devices always charging, at 50% battery, never roaming, and using default settings.
  - Users who have never made a call or sent an SMS.

---

### **Conceptualizing Detection**
- **Economics of Malware:**
  - Malware authors seek a return on investment (ROI).
  - Lower detection barriers mean less effort on coding and more on infections.
- **Context and Content:**
  - Large dynamic emulator systems need to emulate the victim's context, not just the system.
- **Investigative Insights:**
  - Talk at Defcon about Russian Toll Fraud, where malware authors operate like agile development shops.

---

### **Thanks!**
- **Contact:**
  - Twitter: [@timstrazz](https://twitter.com/timstrazz)
  - Email: [PI:EMAIL](mailto:pi@email.com)
  - Blog: [strazzere.com/blog](http://strazzere.com/blog)
  - GitHub: [github.com/strazzere](https://github.com/strazzere)
- **Follow for Good Info:**
  - @osxreverser, @snare, @pof, @jduck, @thomas_cannon, @TeamAndIRC, @Gunther_AR
- **Greets:**
  - fG!, Lohan+, jcase, jon larimer, zuk, jduck, JF, pof, thomas cannon, snare, crypto girl, collinrm, gunther, and others

---