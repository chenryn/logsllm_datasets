## Checklist
  * I have included the output of `celery -A proj report` in the issue.
  * I have included all related issues and possible duplicate issues in this issue.
  * I have included the contents of `pip freeze` in the issue.
  * I have verified that the issue exists against the `master` branch of Celery.
  * I have tried reproducing the issue on more than one message broker and/or result backend.
  * I have tried reproducing the issue on more than one workers pool.
  * I have tried reproducing the issue with retries, ETA/Countdown & rate limits disabled.
## Related Issues and Possible Duplicates
  * #4707
  * #4709
  * #4721
## Environment & Settings
**Celery version** : 4.3.0rc1
**`celery report` Output:**
    $ celery -A bug report
    software -> celery:4.3.0rc1 (rhubarb) kombu:4.4.0 py:3.7.2
                billiard:3.6.0.0 redis:3.2.1
    platform -> system:Linux arch:64bit
                kernel version:4.9.125-linuxkit imp:CPython
    loader   -> celery.loaders.app.AppLoader
    settings -> transport:redis results:redis://redis:6379/0
    broker_url: 'redis://redis:6379/0'
    result_backend: 'redis://redis:6379/0'
## Steps to Reproduce
### Required Dependencies
  * **Minimal Python Version** : Python 3.5
  * **Minimal Broker Version** : Redis 3.0
  * **Minimal Result Backend Version** : Redis 3.0
  * **Minimal OS and/or Kernel Version** : Linux (Docker for Mac)
  * **Minimal Broker Client Version** : redis-py 3.2.1
  * **Minimal Result Backend Client Version** : redis-py 3.2.1
### Python Packages
**`pip freeze` Output:**
    amqp==2.4.2               # via kombu
    billiard==3.6.0.0         # via celery
    celery[redis]==4.3.0rc1
    kombu==4.4.0
    pytz==2018.9              # via celery
    redis==3.2.1              # via celery
    vine==1.3.0               # via amqp
### Minimally Reproducible Test Case
    # bug/celery.py
    from celery import Celery
    from redis import StrictRedis
    REDIS_URL = 'redis://redis:6379/0'
    app = Celery(
        'bug',
        broker=REDIS_URL,
        backend=REDIS_URL,
    )
    redis = StrictRedis.from_url(REDIS_URL)
    @app.task(ignore_result=True)
    def ignore_me_A(key, value):
        redis.set(key, value)
    @app.task
    def ignore_me_B(key, value):
        redis.set(key, value)
    # bug/main.py
    from time import sleep, time
    from .celery import ignore_me_A, ignore_me_B, redis
    KEY_PATTERN = 'celery-task-meta-*'
    def value_equals(key, expected):
        raw = redis.get(key)
        if raw:
            return raw.decode('utf-8') == expected
        return False
    def test_task_result(task):
        assert len(list(redis.scan_iter(KEY_PATTERN))) == 0
        key = f'results/{task.name}'
        value = str(time())
        task.apply_async((key, value), ignore_result=True)
        while not value_equals(key, value):
            print(f'waiting for result of {key}')
            sleep(1.0)
        redis.delete(key)
        assert len(list(redis.scan_iter(KEY_PATTERN))) == 0
        print('result of `ignore_me_A` is not persisted')
    def main():
        for key in redis.scan_iter(KEY_PATTERN):
            redis.delete(key)
        test_task_result(ignore_me_A)
        test_task_result(ignore_me_B)
    if __name__ == "__main__":
        main()
### Expected Behavior
Start Celery worker (`celery -A bug worker`) and execute `python3 -m bug.main`
\- **there should be no "celery-task-meta-*" keys in Redis** , and the output
should be:
    waiting for result of results/bug.celery.ignore_me_A
    ...
    result of `ignore_me_A` is not persisted
    waiting for result of results/bug.celery.ignore_me_B
    ...
    result of `ignore_me_B` is not persisted
### Actual Behavior
`python3 -m bug.main` exits with error:
    waiting for result of results/bug.celery.ignore_me_A
    ...
    result of `ignore_me_A` is not persisted
    waiting for result of results/bug.celery.ignore_me_B
    ...
    Traceback (most recent call last):
      File "/usr/lib/python3.7/runpy.py", line 193, in _run_module_as_main
        "__main__", mod_spec)
      File "/usr/lib/python3.7/runpy.py", line 85, in _run_code
        exec(code, run_globals)
      File "/src/bug/main.py", line 39, in 
        main()
      File "/src/bug/main.py", line 35, in main
        test_task_result(ignore_me_B)
      File "/src/bug/main.py", line 26, in test_task_result
        assert len(list(redis.scan_iter(KEY_PATTERN))) == 0
    AssertionError
And `redis-cli keys *` shows:
    1) "_kombu.binding.celery"
    2) "_kombu.binding.celeryev"
    3) "celery-task-meta-8406a282-ea03-439c-bc49-91a56e201860"
    4) "_kombu.binding.celery.pidbox"