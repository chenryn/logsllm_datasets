Bypassing
pre-b
o
ot
authen
tication
passw
ords
b
y
instrumen
ting
the
BIOS
k
eyb
oard
buer
(practical
lo
w
lev
el
attac
ks
against
x86
pre-b
o
ot
authen
tication
soft
w
are)
Jonathan
Brossard
-
PI:EMAIL
Iviz
T
ec
hnosolutions
Pvt.
Ltd.
,
K
olk
ata,
India
The
wal
ls
b
etwe
en
art
and
engine
ering
exist
only
in
our
minds.
Theo
Jansen
Abstract.
Pre-b
o
ot
authen
tication
soft
w
are,
in
particular
full
hard
disk
encryption
soft
w
are,
pla
y
a
k
ey
role
in
prev
en
ting
information
theft[1℄.
In
this
pap
er,
w
e
presen
t
a
new
class
of
vulnerabilit
y
aecting
m
ultiple
high
v
alue
pre-b
o
ot
authen
tication
soft
w
are,
including
the
latest
Microsoft
disk
encryption
tec
hnology
:
Microsoft
Vista's
Bitlo
c
k
er,
with
TPM
c
hip
enabled.
Because
Pre-b
o
ot
authen
tication
soft
w
are
programmers
com-
monly
mak
e
wrong
assumptions
ab
out
the
inner
w
orkings
of
the
BIOS
in
terruptions
resp
onsible
for
handling
k
eyb
oard
input,
they
t
ypically
1
use
the
BIOS
API
without
ushing
or
in
tializing
the
BIOS
in
ternal
k
ey-
b
oard
buer.
Therefore,
an
y
user
input
including
plain
text
passw
ords
remains
in
memory
at
a
giv
en
ph
ysical
lo
cation.
In
this
article,
w
e
rst
presen
t
a
detailed
analysis
of
this
new
class
of
vulnerabilit
y
and
generic
exploits
for
Windo
ws
and
Unix
platforms
under
x86
arc
hitectures.
Un-
lik
e
curren
t
academical
researc
h
aiming
at
extracting
information
from
the
RAM[2℄[3℄,
our
practical
metho
dology
do
es
not
require
an
y
ph
ysical
access
to
the
computer
to
extract
plain
text
passw
ords
from
the
ph
ysical
memory
.
In
a
second
part,
w
e
will
presen
t
ho
w
this
information
leak
age
com
bined
with
usage
of
the
BIOS
API
without
careful
initialization
of
the
BIOS
k
eyb
oard
buer
can
lead
to
computer
reb
o
ot
without
console
access
and
full
securit
y
b
ypass
of
the
pre-b
o
ot
authen
tication
pin
if
an
attac
k
er
has
enough
privileges
to
mo
dify
the
b
o
otloader.
Other
related
w
ork
include
information
leak
age
from
CPU
cac
hes[4℄,
reading
ph
ysical
memory
thanks
to
rewire[5℄
and
switc
hing
CPU
mo
des[6℄[7℄.
1
In
tro
duction
In
a
previous
article[8℄
regarding
BIOS
passw
ords
and
CMOS
securit
y
,
w
e
presen
ted
ho
w
BIOS
passw
ords
could
b
e
extracted
from
memory
.
In
the
presen
t
article,
w
e
will
generalize
our
researc
h
to
an
y
pre-b
o
ot
au-
then
tication
soft
w
are
b
y
rst
describing
ho
w
passw
ord
reading
routines
1
cf:
A
nnexe
A
for
a
non
exhaustiv
e
list
soft
w
are
vulnerable
to
plain
text
passw
ord
leak
age.
are
implemen
ted
at
b
o
otloader
lev
el,
then
b
y
describing
attac
k
scenarios
under
b
oth
Windo
ws
and
*nix
op
erating
systems,
and
nally
b
y
studying
ho
w
passw
ord
protected
b
o
otloaders
can
b
e
reb
o
oted
without
ph
ysical
access,
leading
to
a
full
securit
y
b
ypass.
In
the
rest
of
this
article,
otherwise
explicitly
men
tioned,
p4ssw0rd
is
the
passw
ord
to
the
target
pre-b
o
ot
authen
tication
soft
w
are,
b
e
it
a
BIOS
passw
ord
or
a
b
o
otloader's
pin.
In
order
to
in
tro
duce
the
con
text
in
whic
h
pre-b
o
ot
authen
tication
soft-
w
are
are
executed,
w
e
will
start
with
an
o
v
erview
of
op
erating
systems
b
o
oting
under
x86
compatible
arc
hitectures.
1.1
An
o
v
erview
of
Op
erating
Systems
b
o
oting
Under
the
x86
arc
hitecture,
the
b
o
ot
sequence
can
b
e
divided
in
the
fol-
lo
wing
steps[9℄[10℄
:
The
CPU
starts
in
Real
Mo
de[11℄.
All
segmen
t
register
are
set
to
0,
cs
is
set
to
0xFFFFFFF0.[12℄[13℄.
Quoting
the
In
tel
man
ual
V
ol
3A
c
hapter
8-6
:
The
EPR
OM
con-
taining
the
initialisation
co
de
m
ust
b
e
presen
t
at
this
address.
The
EPR
OM
2
in
question
loaded
at
0xFFFFFFF0
is
indeed
the
BIOS.
BIOS
POST
(P
o
w
er
On
Self
T
est)
c
hec
ks
(hardw
are
c
hec
king
:
c
hec
ks
for
RAM,
bus,
disks,
etc)
are
p
erformed[14℄.
The
BIOS
loads
the
rst
512
b
ytes
of
the
Master
Bo
ot
Record
(b
o
ot-
loader
b
o
otstrapping)
at
address
0x0000:0x07C0
in
RAM,
and
p
er-
forms
a
far
jump
to
this
lo
cation,
using
in
t
0x19.
The
b
o
ot
loader
is
resp
onsible
for
b
o
oting
the
k
ernel
(with
optional
parameters,
p
ossibly
a
big
k
ernel,
etc...).
The
k
ernel
copies
part
of
the
BIOS
Map
to
a
safe
lo
cation[15℄
(0x0:0x90000-0x0:0x901FF
for
Lin
ux),
p
erforms
some
additional
hard-
w
are
detection
and
switc
hes
to
Protected
mo
de[16℄[17℄.
Starting
from
this
p
oin
t,
an
authen
tication
pro
cess
is
not
qualied
of
pre-b
o
ot
authen
tication
an
ymore.
What
can
w
e
infer
from
this
b
o
oting
sc
hema
regarding
pre-b
o
ot
authen
tication
soft
w
are
and
their
APIs
?
2
No
w
ada
ys,
BIOSes
are
not
co
ded
on
EPR
OMs
an
ymore,
but
on
Programmable
Read-
only
Non
v
olatile
RAM[13℄,
similar
to
EEPR
OM
1.2
Pre-b
o
ot
authen
tication
:
API
and
implemen
tation
Giv
en
what
w
e
ha
v
e
seen
previously
,
a
pre-b
o
ot
authen
tication
soft-
w
are
can
b
e
implemen
ted
in
the
BIOS
itself
(e.g.:
a
user
BIOS
pass-
w
ord)
or
most
probably
,
for
ob
vious
p
ortabilit
y
reasons,
in
the
b
o
ot-
loader
(lilo/grub,
Vista's
Bitlo
c
k
er[18℄,
or
virtually
an
y
other
pre-b
o
ot
authen
tication
soft
w
are
with
or
without
full
disk
encryption
capabilities).
Since
there
is
no
k
ernel
in
memory
when
this
authen
tication
soft
w
are
is
run
in
RAM,
the
only
API
a
v
ailable
to
the
programmer
of
a
pre-b
o
ot
authen
tication
soft
w
are
is
the
BIOS
API.
This
soft
w
are
migh
t
or
migh
t
not
add
some
kind
of
encryption
to
the
disks,
but
it
will
surely
need
to
ask
the
user
for
a
passw
ord
at
a
giv
en
momen
t
3
.
Hence,
w
e
will
no
w
detail
ho
w
the
BIOS
implemen
ts
reading
k
eystrok
es
from
the
k
eyb
oard...
1.3
In
tro
ducing
the
vulnerabilit
y
:
inner
w
orkings
of
BIOS
in
terruption
0x16
and
BIOS
k
eyb
oard
buer
h
ystheresis
The
BIOS
API
oers
in
terruption
0x16[19℄
to
retriev
e
k
eystrok
es
from
the
k
eyb
oard.
In
particular,
functions
ah=0x01
c
hec
ks
(and
reads)
if
a
k
ey
has
b
een
pressed
and
function
ah=0x00
reads
this
k
eystrok
e,
return-
ing
the
ASCI
I
co
de
of
the
k
eystrok
e
in
the
AL
register
and
its
scanco
de
(read
b
y
In
t
0x09
-
i.e.:
IR
Q1[20℄
-
from
the
k
eyb
oard
and
placed
in
to
the
buer.
This
mec
hanism
allo
ws
the
use
of
extended
k
eystrok
es,
e.g.:
Alt+Shift+Keystrok
e)
in
the
AH
register.
W
e
can
v
erify
that
b
o
otloaders
lik
e
lilo
actually
use
those
in
terruptions
to
read
input
from
the
user[21℄
:
cf
gur
e
1.
Fig.
1.
Keyb
oard
reading
routine
in
lilo
(le
second.S
tak
en
from
lilo
22.8).
But
ho
w
is
this
mec
hanism
made
p
ossible
inside
the
BIOS
itself
?
A
t
b
o
ot
time,
a
critical
structure,
the
BIOS
Data
Area
is
created
at
lo
cation
0x0040:0x0000
in
ph
ysical
memory
.
The
k
eyb
oard
con
tains
an
3
Other
authen
tication
metho
ds
suc
h
as
usb
tok
ens,
smartcards
or
biometry
are
out
of
the
scop
e
of
this
pap
er.
em
b
edded
8042[22℄
micro
con
troller
to
con
tin
uously
scan
for
k
eystrok
es
pressed
or
released,
in
real
time,
indep
enden
tly
of
the
w
orkload
of
the
main
CPU.
Ev
ery
time
a
k
eystrok
e
is
pressed
or
released,
this
micro-
con
troller
sends
a
scanco
de
to
a
second
micro
con
troller
(PIC
8259[23℄)
presen
t
in
the
motherb
oard.
This
micro
con
troller
unies
the
t
w
o
k
eystrok
es
sen
t
when
pressing
and
releasing
a
k
ey
and
sends
a
unique
scanco
de
to
the
k
eyb
oard
in
terrupt
service
routine
(i.e.:
the
ISR
of
in
terruption
0x09,
or
ph
ysical
IR
Q
0x01).
The
k
eyb
oard
ISR
up
dates
a
critical
struc-
ture
created
at
b
o
ot
time
at
lo
cation
0x40:0x00[24℄
:
BIOS
Data
Area
accordingly
:
cf
gur
e
2.
It
con
tains
sev
eral
leds
related
to
k
eyb
oards
functions[25℄
:
cf
:
gur
e
3.
Fig.
2.
Keyb
oard
handling
o
v
erview
under
x86
compatible
arc
hitectures.
The
BIOS
k
eyb
oard
buer
is
actually
found
at
lo
cation
0x0040:0x001e.
It
is
32
b
ytes
long.
Since
a
k
eystrok
e
is
co
ded
on
t
w
o
b
ytes
(the
rst
one
for
its
ASCI
I
co
de,
the
second
one
for
its
BIOS
scanco
de),
it
can
handle
up
to
16
k
eystrok
es
4
.
The
p
oin
ters
lo
cated
at
0x0040:0x001A
and
0x0040:0x001C
k
eep
trac
k
of
ho
w
man
y
k
eys
are
curren
tly
presen
t
inside
the
buer,
and
ho
w
man
y
ha
v
e
b
een
read
so
far
:
therefore,
if
a
user
en
ters
the
passw
ord
'p4ssw0rd',
4
actually
,
the
enter
k
ey
is
co
ded
on
a
single
b
yte,
so
the