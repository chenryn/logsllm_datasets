important than its accuracy in guiding the fuzzer on these
programs, and that even small diﬀerences in accuracy
can be signiﬁcant if they allow the fuzzer to precisely
target key branches in the program.
Enhancing state-of-the-art fuzzers. We also evalu-
1620    30th USENIX Security Symposium
USENIX Association
020k40k60k80k100kMutations0200400Edge Cov.minigzipgradienttaint020k40k60k80k100kMutations0500Edge Cov.djpeggradienttaint020k40k60k80k100kMutations010002000Edge Cov.xmllintgradienttaint020k40k60k80k100kMutations050010001500Edge Cov.mutoolgradienttaint020k40k60k80k100kMutations010002000Edge Cov.readelfgradienttaint020k40k60k80k100kMutations050010001500Edge Cov.objdumpgradienttaint020k40k60k80k100kMutations050010001500Edge Cov.stripgradienttaintate if the gradient information from PGA can improve
the performance of NEUZZ, a state-of-the-art fuzzer. We
evaluate a version of NEUZZ modiﬁed to use PGA against
unmodiﬁed NEUZZ and VUzzer, another dataﬂow guided
fuzzer. On average, PGA+NEUZZ improves new edge cover-
age by 12.9% over baseline NEUZZ. We hypothesize this
improvement is because the gradients produced with
PGA are more precise than the neural-network based
gradients used by by NEUZZ. We discuss this experiment
and provide more detailed results in Appendix C.
Result 3: In guided fuzzing PGA increases the rate
of edge coverage growth by 10% on average compared
to DTA, and improves the edge coverage of NEUZZ, a
state-of-the-art fuzzer, by 12.9% on average.
5.3 Bug Finding
Next, we show the additional information provided by
PGA make it a useful tool for discovering and analyzing
diﬀerent types of bugs in real world programs. We test
PGA against DTA in three applications: detecting and
analyzing known vulnerabilities, guiding discovery of new
bugs, and discovering information leaks.
5.3.1 Analysis of known CVEs
We ﬁrst evaluate PGA as a tool for detecting danger-
ous dataﬂows oﬄine in known CVEs. We instrument
the programs to mark user-controlled input as dataﬂow
sources and the instructions involved in the attacks as
dataﬂow sinks. We select 21 CVEs that cover a range
of vulnerability types, including stack and heap over-
ﬂows, integer overﬂows, memory allocation errors, and
null pointer dereferences. We include CVEs from our
evaluation programs as well as openssl to demonstrate
PGA based analysis on a variety of program types.
Table 3 shows a comparison of PGA and DTA in
detecting the relevant dataﬂows in these CVEs. PGA
correctly identiﬁes dataﬂows for 19 out of the 21 evalu-
ated CVEs, including 2 CVEs that cannot be identiﬁed
with DTA. For these CVEs, DTA overtaints on the ma-
licious inputs and crashes due to label exhaustion, while
PGA can precisely identify the dataﬂows without over-
tainting. For the 2 CVEs which both PGA and DTA fail
to detect, the dataﬂow source indirectly propagates to
the sink through implicit dataﬂows (i.e. control ﬂow).
We also note the utility of the additional information
provided by gradients and how it can help distinguish
vulnerabilities in an online manner. In the case of CVE-
2017-15996, an out of memory allocation error triggered
by the dataﬂow from an input byte, PGA directly mea-
sures the eﬀect of input changes on the size of the allo-
cation, and can early terminate when it ﬁnds input byte
values that will trigger the out-of-memory error.
CVE ID
CVE-2007-1657
CVE-2017-7210
CVE-2017-8396
CVE-2017-15996
CVE-2018-6543
CVE-2018-6759
CVE-2018-7643
CVE-2018-10372
CVE-2018-11813
CVE-2018-12698
CVE-2018-12699
CVE-2020-14152
CVE-2018-19932
CVE-2018-19777
CVE-2018-20671
CVE-2019-14444
CVE-2020-1967
CVE-2018-11212
CVE-2018-11214
CVE-2020-7041
CVE-2018-12697
PGA DTA
Vulnerability - Program
(cid:88)
stack overﬂow - minigzip
(cid:88)
oﬀ-by-one read - objdump
(cid:88)
heap overﬂow - libbfd
(cid:88)
out-of-memory - readelf
(cid:88)
integer overﬂow - objdump
(cid:88)
null ptr dereference - nm
(cid:88)
integer overﬂow - objdump
(cid:88)
heap overﬂow - readelf
(cid:88)
inﬁnite loop - cjpeg
(cid:88)
out-of-memory - libiberty
(cid:88)
heap overﬂow - libiberty
(cid:88)
out-of-memory - djpeg
(cid:88)
integer overﬂow - strip
(cid:88)
inﬁnite loop - mutool
(cid:88)
inﬁnite loop - objdump
(cid:88)
integer overﬂow - readelf
null ptr dereference - openssl (cid:88)
(cid:88)
divide-by-zero - cjpeg
(cid:88)
heap overﬂow - cjpeg
×
invalid certiﬁcate - openssl
null ptr dereference - libiberty ×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
×
×
×
×
Table 3: List of 21 CVEs for which the exploitable
dataﬂows were analyzed by PGA and DTA (dfsan
and libdft)
Result 4: PGA identiﬁes relevant dataﬂows in 19 out
of 21 evaluated CVEs, including 2 DTA cannot detect
due to label exhaustion. PGA and DTA both cannot
identify control-ﬂow-based dataﬂows for 2 CVEs.
5.3.2 Bug Discovery
We compare PGA and DTA as bug discovery tools by
adding additional instrumentation to record dataﬂows for
instruction and function arguments that can potentially
trigger program errors, such as memory allocations, copy
instructions, indexing operations, and shift operators. We
then execute the programs on a corpus of ﬁles generated
by running AFL on each program for 24 hours. Next, we
generate new inputs by changing input bytes involved
in the recorded dataﬂows similar to Section 5.2.3. For
PGA, we select 128 input bytes prioritized based on the
function gradient, while for DTA, we randomly select
them. We modify the values of the selected bytes based
on the gradient for PGA or by setting them to 0 or 255
for DTA.
Table 4 summarizes our results. Overall, PGA ﬁnds 22
bugs in our evaluated programs through gradient guided
modiﬁcation of the inputs, including arithmetic errors,
out-of-memory allocations, and integer overﬂows. The
DTA guided bug search ﬁnds 15 of these 22 bugs. Of the
22 bugs, 20 have been conﬁrmed by the developers, 3 of
them resulted in new patches, and the remaining 17 were
already patched in the latest sources of the programs.
USENIX Association
30th USENIX Security Symposium    1621
( JCOEF ) (v  Al );
1 GRSAN_MARK_BYTE (c , 1.0); // grad = 1.0
2
3 cinfo -> Al = (c) & 15; // grad = 1.0
4 ...
5 (* block )[ natural_order [k ]] =
6
7 /* block [0] gradient = 8.0 */
8
9 void jpeg_idct_islow ( int * block ) {
10
11
12
13
14
15
16
17
18 }
z2 = z2 << 13;
/* negative z2 triggers error */
...
int * inptr = block ; // grad = 8.0
z2 = ( int ) inptr [0] * quantptr [0]
/* z2 gradient = 2040.0 can overflow */
Figure 8: Arithmetic Error in djpeg.
Library
libjpeg-9c
mupdf-1.14.0
binutils-2.30
Integer
Memory
Test Program Overﬂow Corruption
3
djpeg
0
mutool show
1
size
9
objdump -xD
6
strip
2
1
0
0
0
Table 4: Summary of new bugs found by PGA. In
total there are 22 bugs found over 5 programs.
For the 7 bugs that were found by PGA and not DTA,
gradient magnitude and direction allowed the search to
prioritize input bytes that could trigger errors that could
not be identiﬁed with DTA. We give a case study in
Figure 8, which illustrates how large gradients are used
to ﬁnd an arithmetic error in djpeg. By altering an input
byte with a large gradient to a shift operand, an overﬂow
is triggered that results in an invalid operation. Simi-
larly, identifying inputs with large gradients to memory
operations was key to ﬁnding memory errors.
Result 5: A simple PGA guided search ﬁnds 22 bugs
in the tested programs. A DTA guided search using
the same strategy and inputs ﬁnds 15 of these 22 bugs.
Information Leak Discovery
5.3.3
We provide two case studies using PGA to detect side
channel leaks: one example of a memory usage based
side channel in objdump and an execution time based
side channel in cjpeg. To identify each information leak,
we marked the input ﬁle headers as sources and rele-
vant program values as sinks, either memory allocation
operands or comparison operands in loops.
In objdump, we identiﬁed a memory based side channel
based on a gradient of 1 million to a malloc instruction
from the ELF section header for program size. Figure 9a
shows the eﬀect of incrementing the value from 46 to
(a) Objdump side channel
(b) Cjpeg side channel
Figure 9: Memory and timing side channel leaks.
59 on the program’s total memory usage. The memory
consumption is linear in the byte value if the byte is
in range from 48 to 57, which can be converted to a
valid number ’0’ to ’9’ in ASCII. Similarly, we identiﬁed
the timing based side-channel in cjpeg by a gradient
from the height ﬁeld in the jpeg header to the operand
of a while loop condition. Figure 9b shows the height
information leak in program execution time.
Prior side channel attacks have demonstrated that
these types of leaks can be exploited to learn sensitive
information about a user
[11, 24]. For example, one
can imagine a malicious Android app that uses JPEG
dimensions leaked from a browser to determine which
websites the device user is visiting.
Result 6: PGA successfully detects two information
leaks from ﬁle headers in objdump and cjpeg.
6 Discussion
In this section we review the implications of our results
and discuss of the relative advantages and limitations of
PGA as an approach to dataﬂow analysis.
Advantages of PGA. The additional information en-
coded in gradients can greatly improve precision when
predicting dataﬂows between sources and sinks (i.e. re-
ducing the number of false positives), while the magni-
tude and direction information can be used to prioritize
dataﬂows based on their signiﬁcance and predicted eﬀect.
We see the beneﬁts of the additional information from
gradients in the improved performance of PGA relative
to DTA in our dataﬂow accuracy, guided fuzzing, and
vulnerability detection and analysis evaluations (Sections
5.2.1, 5.2.3, 5.3).
Limitations of PGA. While our implementation of
PGA demonstrably works based on our evaluation, How
to best sample non-smooth operations when evaluating
proximal gradients is an open question. Our prototype
uses a simple ﬁxed sampling strategy, and does not fully
implement proximal gradients on some operations, such
as loads on pointers with derivatives (Section 3.3), which
sometimes causes errors in the gradient evaluation. The
1622    30th USENIX Security Symposium
USENIX Association
04857256Byte Value050100150200Memory Usage (MB)0100200Byte Value02040Execution Time (sec)eﬀect of these errors can be seen in our dataﬂow accuracy
evaluation (Section 5.2.1), where grsan has slightly lower
recall than dfsan, indicating some gradients erroneously
evaluate to 0. We believe incorporating more information
about speciﬁc operations in sampling strategies, as well
as tracking valid domains for some operations, will reduce
these errors.
A second limitation of our implementation of PGA
is that, like most DTA frameworks, it does not model
implicit dataﬂows, such as control ﬂow dependencies.
This can be seen in our CVE evaluation (Section 5.3.1),
where two of our tested CVEs cannot be detected by
either PGA or DTA. We intend to explore both more
accurate methods for evaluating proximal gradients and
modeling implicit dataﬂows in future work.
7 Related Work
Dynamic Taint Analysis. Dynamic Taint Analysis
(DTA) tracks data ﬂow from taint sources to taint sinks at
runtime. Common applications of DTA include software
vulnerability analysis and information leak detection [15,
18,34,58,59]. DTA typically overestimates the tainted
bytes which contributes to a large performance overhead.
Therefore, much of the recent work in DTA has focused
on developing more eﬃcient systems [7,25,29]. Like DTA,
PGA dynamically propagates dataﬂow information, but
it provides more ﬁne-grained information in the form of
gradients. Moreover, PGA is more precise than DTA,
which reduces overtainting in large programs.
Some DTA systems use bit level taint tracking to im-
prove precision at the cost of higher overheads [54,55].
Although we have not implemented it in our current
prototype, gradients can also be propagated over indi-
vidual bits based on functional Boolean analysis, and we
expect it to oﬀer similar tradeoﬀs in improved accuracy
for higher overheads [35].
Recently, automatically learning taint rules has been
used to reduce the approximation errors in DTA [12].
This approach is orthogonal to ours and could also po-
tentially be applied to learn gradient propagation rules.
Quantitative Information Flow. Quantitative In-
formation Flow (QIF) measures the potential trans-
mission of information through a program using en-
tropy based measures such as channel capacity and min-
entropy [19, 28, 50]. QIF has primarily been used for
detecting information leaks and ensuring the integrity of
program secrets [3,17,23], but has also been proposed
as a way of enhancing taint tracking [33]. PGA adds a
diﬀerent type of information as discussed in Appendix A,
and does not have the high computational complexity
involved in estimating information ﬂows accurately.
Gradient-guided fuzzing. Recent fuzzers have used
gradient approximations to guide their mutation process.
Angora estimates ﬁnite diﬀerences, an approximation
of gradients with many known limitations especially for
high-dimensional problems, by executing the program
on modiﬁed inputs and recording the changes in the
outputs [10, 39]. NEUZZ, MTFuzz and Neutaint train
neural networks to predict program branch behavior
and use the network’s gradients to guide the mutation
algorithm [43–45]. This incurs less overhead than instru-
mentation based methods but is also less exact since
it operates on an approximate model of the program.
By contrast, PGA computes gradients directly over the
program’s individual instructions and therefore produces
precise gradients.
Program Smoothing. Prior work has explored com-
puting gradients with smooth interpretation of a program
via a Gaussian kernel [8,9] or parametric relaxation of
SMT [41, 57]. These methods use symbolic reasoning
and have not been applied to analysis of real world pro-
grams. PGA’s approximation methods are more eﬃcient
and have been successfully demonstrated on real world
programs.
8 Conclusion
In this paper we introduce proximal gradient analy-
sis (PGA), a novel theoretically-grounded approach to
dataﬂow analysis that uses non-smooth calculus tech-