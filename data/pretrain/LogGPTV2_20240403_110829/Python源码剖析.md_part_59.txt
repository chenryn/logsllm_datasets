好了，了解了import_saubmodule的工作原理之后，现在我们可以进入mport
在
else
Pyobject
Pyobject
load_next中，我们注意到一个奇怪的现象，
elset
约束：
struct
Pyobjeat*path,
PVINCREE（m）;
二者必居其一。看看前面的import_module_level，
mod
，这里，就是import的核心所在（见代码清单14-6）。
mod.
*modules
Filedescr
None: subname
PyImport_GetMoculeDict();
Edp:
subname ==fuilname
fullname
Python源码剖析
在1oad_next中，第二个参数是一
14.3import机制的实现
一深度探索动态语言核心技术
一切就非常清晰了：
NULL）
371
---
## Page 402
Fython源码剖析
14.3.2.1
372
C写的dll文件呢？答案正是在find_moduie的返回值中，我们来看一看第三个返回信息
那么find_module就将成功返回。
subname.pyo和subname.dll（Python2.5已不支持dll后缀名的文件）。只要有一个文件存在，
读者可以跟踪进入。需要说明的是，在findmodule中，Pyhon将寻找一切可以作为module
项信息将被返回：
subname的module。如果在path指定的路径下确实存在名为subname的module，则有三
将使Python虚拟机最终在默认的搜索路径下搜索。
为subname 的module的路径信息。同样，如前面的剖析，如果import 的执行环境是
影响，在这里，
module，如果是，则直接将其返回，注意，正如前面所言，这里使用了uliname。
现在问题来了，Python如何知道发现的module究竟是怎样的形式呢？是py文件还是
ina_moaule是一个相当复杂而繁琐的函数，在这里，我们不再深入进去，有兴趣的
Python虚拟机在随后调用find_module的行为中，会在path指定的路径下搜索名为
在代码清单14-6的[2]处，我们终于看见了import执行的package环境对import的
第14章Python模块的动态加载机制
指向了被打开的实现module的文件：
fdp存储着关于这个module的元信息。
代码清单14-6的[1]处首先在Python的modulepool中查找是否已经加载了待加载的
buF中存放着module对应的文件在操作系统上的完整的绝对路径名：
return m
搜索module
add_submodule(mod,m,fullname,subname,modules）;
7/[4]:加载module/package
fap-Eind_module（fullname
buftoj
&loader）:
一深度探索动态语言核心技术
path =Pyobject_GetAttrstring (mod,
path= NULL
Ioad
path_元信息被抽取出来，并被传入到findmodule中，作为搜索名
O
loculettumane
subname,path. buE,MAXPATHLEN+l.&fp.
path
---
## Page 403
fdp的类型filedescr。
信息来源构建_PyImport_Filetab，我们看看在Win32平台下，这两个信息来源是什么。
Init中，Python基于_PyImport_DynLoadFiletab和_PyImport_StandardFiletab两个
息。这个全局变量是在Python初始化时调用_PyImport_Init 构建的。在_pyImport
中维护着一个名为_PyImport_Filetab的全局变量，它保存着所有合法的module的元信
extern: struat filedescr_PyImoort_Filetab;
[importal.h]
被加入到了标准库中，同时，也引入了一些名字冲突，所以在Pyhon2.5中，PyImport
static const struct filedeser
[import.c]
sLruct
#endie
#ifdef
"else
#ifdef
[dynload_win.c]
lendif
Definitions for dynamie loading of extension modules /
在filedescr中，保存着关于module的3个元信息：后缀名，模式及类型。Python
IMP_HOOK
PY_RESOURCE
O_EXTENSION
PY_COMPILED,
SEARCH_ERROR,
在Pyton2.5之前，Python是支持dl形式的扩展的，但是在Python2.5中，sqlite3
enum
char
char
PRODIRECTORY,
PYSOURCE
0
**a.dn"
10,
d-pyd",
MS WINDOWS
filedescr
.a1
0}
fletype type:
_DEBUG
mode;
"rb".
Mrb,
"rb".
/Mae only
PY_SOURCE)
bC_EXTENSION
PY_SOURCE),
CEXTENSIONI
C_EXTENSION)
C_BXTENSION).*
Python源码剖析
14.3
import机制的实现
深度探索动态语言核心技术
373
---
## Page 404
Python源码剖析
14.3.2.2
374
module的元信息指导了随后的1oad_module究竟应该采用怎样的方式来动态加载module。
的注释。
DynLoadFi1etab内对dll的支持被注释掉了，具体原因可参考Python源码中dynloadwin.c
[import.o]
函数finamodule返回的fdp正是其中的一个记录，同样，也正是这个fdp所携带的
第14章Python模块的动态加载机制
case C_BUILTIN:
switch
加载module的动作在1oaa_module中完成。
CaSE PKG_DIREGTORY:
aase
case
Pyobject
Pyobjeot
加载module
break:
break:
PY_INCREE(m）
/创建内建moaue
=PyDict_GetItemString(modules,name):
PY_SOURCE:
深度探索动态语言核心技术
(buf=NULbuf[o]=o）
return NULL:
load_package(name,
load_compiled_module(name,buf,fp);
EXE
load_source module（name,buf,fp);
(type)
/抛出异常
builtin(name);
Py Import_LoadDynamicModule(name,buf,fp)
COMPTLED:
m：
*modules;
TENSION:
=bue;
buf):
如果没有，则抛出异常
---
## Page 405
女
代码清单14-7
load_source_module其实是非常相似的
已经被放置到了全局module集合sy6.modules中了。
modules中创建了module，那么可以猜想，在load_souxce_modules中，创建的module
象，才能在最后得到一个从符号映射到对象的dict。这个dict 自然也就是在load
译，产生了PyCodeobject对象，然后执行了PyCodeobject对象中的字节码，因为唯有
static Syobject
是我们可以猜想，在ioad_source_module中，Pyhon虚拟机一定先对py文件进行了编
[import.c]
这一点显露无疑。同时在代码清单147的[2]处，我们也看到了为什么一个目录下必
我们之前说了package同样也是一种module，在1oad_package的代码清单14-7的[1]
对于package，Python虚拟机会调用load_package（见代码清单14-7）。
package
对于pyc文件，Python虚拟机将调用1oad_compiled_moaule，这个函数的动作与
对于py文件，Python虚拟机会执行ioad_source_moduie，我们不再追入进去，但
struct
Pyobject
py文件与pyc文件
Python虚拟机会根据module的不同类型选择不同的加载方式。
fdp
Pyobject
retunn
int err:
20:
PyModule_GetDict（m）;
PyImport_AdaModule(name):
在package的目录下寻找并加载
gaed.
*m.
d:
*load_package(char *name,
NULL
NULU
init
只是少了编译的动作。
Python源码剖析
InLt
patn,
文件
buf,
14.3import机制的实现
sizeof(buf),&fp,NULL);
一深度探索动态语言核心技术
375
---
## Page 406
Python源码剖析
376
份，如果搜索到了，则直接返回。如果内建module备份中并没有存储我们需要的module，
缓存的module就可以了。
个备份中，以后再次import时就可以不用再进行module的初始化动作，直接使用备份中
对于内建module的备份，所有的内建module，一旦被加载之后，都会拷贝一份，存到这
代码清单14-8
通过init_builtin（“math）来加载mathmodule（见代码清单14-8）。
说mathmodule假如用户在运行时进行mportmath的动作，那么Python虚拟机就会
staticint init_builtini(char *name)
[import.c]
sys.modules中，而还有一部分并不是很常用的则没有被加载到sys.modules中，比如
的module.
层一层向上返回到import_module_leve1中，通过下一个1oadnext来加载package中
为空，那么1oadpackage就不会加载package下的任何module，而是沿着函数调用栈一
中，find_module和1oad_moduie所搜索的和加载的都仅仅是_init_py，如果_initpy
中的module进行任何动作，除非在_init_py中有显式的import语句。在1oadpackage
须有_init_py才能被Python认为是一个合法的package。虽然这里的代码没有列出，但
在init_buiitin中，第一步正是在代码清单14-8的[1]处搜索这个内建module的备
还记得我们在上一章剖析Pyhon初始化过程时提到的吗？Python在内部维护了一个
值得注意的是，1oad_package只会将package自身加载到Python中，并不会对package
第14章Python模块的动态加载机制
return 0;
对于Python内建的module，有一部分在Python初始化运行环境时已经被加载到了
for
1/[2]：遍历内建module集合
struct
内建module
一深度探索动态语言核心技术
（strcmo(nam
inittab *p;
7[4]:加入到内建module备份中
31：
P->name)
寻找匹配的module
---
## Page 407
的完整列表，
那么Python虚拟机只好自己创建module，并进行初始化。
是随意编写的一个C/C++的模块都能被Pyhon所接受，而是必须按照一定的规则来编写
对象，加入到了所创建的PyModuleobject对象的名字空间之中。
且，还将math_methods中包含的每一个C函数指针都包装成了一个pycFunctionobject
module.
后，
struct_inittab _PyImport_Inittabl =（
[import.h]
内建module
中，
[modaupport.h]
[Pc\config.c]
[import.c]
struet
olaInitmath(voia)
会在init_bui1tin代码清单148的[3]处通过调用initmath来创建并初始化math
在Python中，PyImport_Inittab是一个全局变量，这个变量维护着一个内建module
Python的一大卖点就是可以和C/C+等无缝集成，但是受Python的设计所限，并不
到此，对内建对象的加载动作也就大功告成了。
这里我们看到了已经非常熟悉的Py_InitModule4，没错，正是在Py_InitModule4
m=Py_InitModule3("mathmath_methods,module_doc）;
Dyobjeet*m,*d,*v:
我们所期望的mathmoduie正是在这个内建module列表中。Python虚拟机在找到之
C扩展module
char
.
"math",
（*initfunc)（void):
inittab
name;
，代码清单14-8的[2]处的动作就是遍历这个列表，在列表中查找我们期望的
IaitModule3(name,
initmath),
methods,
Python源码剖析
(PyObJeCE)NULL,PYTHON_API_VERSION)
doc)
14.3impor机制的实现
一深度探索动态语言核心技术
377