### 2020-08-19.txt
**版本信息:**
- **软件版本:** 1.0.0
- **操作系统版本:** Microsoft Windows NT 10.0.18363.0
- **指针长度:** 8 字节
- **x64 架构:** 是

**日期:** 2020年08月19日 16:51:53

**异常信息:**
- **异常类型:** `System.ObjectDisposedException`
- **异常描述:** 无法访问已释放的对象。对象名称: 'Timer'。

**堆栈跟踪:**
```plaintext
在 System.Timers.Timer.set_Enabled(Boolean value)
在 System.Timers.Timer.Start()
在 PowerLauncher.MainWindow.OnVisibilityChanged(Object sender, DependencyPropertyChangedEventArgs e)
在 System.Windows.UIElement.RaiseDependencyPropertyChanged(EventPrivateKey key, DependencyPropertyChangedEventArgs args)
在 System.Windows.UIElement.OnIsVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
在 System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)
在 System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)
在 System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)
在 System.Windows.UIElement.UpdateIsVisibleCache()
在 System.Windows.PresentationSource.RootChanged(Visual oldRoot, Visual newRoot)
在 System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)
在 System.Windows.Interop.HwndSource.set_RootVisual(Visual value)
在 System.Windows.Window.SetRootVisual()
在 System.Windows.Window.SetRootVisualAndUpdateSTC()
在 System.Windows.Window.SetupInitialState(Double requestedTop, Double requestedLeft, Double requestedWidth, Double requestedHeight)
在 System.Windows.Window.CreateSourceWindow(Boolean duringShow)
在 System.Windows.Window.CreateSourceWindowDuringShow()
在 System.Windows.Window.SafeCreateWindowDuringShow()
在 System.Windows.Window.ShowHelper(Object booleanBox)
在 System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)
在 System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)
```

**总结:**
该异常发生在尝试启用一个已被释放的 `Timer` 对象时。具体来说，问题出现在 `PowerLauncher.MainWindow.OnVisibilityChanged` 方法中，当窗口的可见性发生变化时触发了这个异常。请检查相关代码，确保在调用 `Timer.Start()` 之前，`Timer` 对象没有被提前释放。