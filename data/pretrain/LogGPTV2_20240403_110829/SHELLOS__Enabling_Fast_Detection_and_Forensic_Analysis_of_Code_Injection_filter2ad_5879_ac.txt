the
LDR DATA pointer, and any of the linked lists. To im-
plement their detection approach, we simply set a trap on
each of these addresses and report that injected code has
been found when the necessary conditions are met. This
heuristic fails to detect certain cases, but we reiterate that
any number of other heuristics could be chosen instead.
We leave this as future work.
4.4 Diagnostics
Although efﬁcient and reliable identiﬁcation of code in-
jection attacks is an important contribution of this paper,
the forensic analysis of the higher-level actions of these
attacks is also of signiﬁcant value to security profession-
als. To this end, we provide a method for reporting foren-
sic information about a buffer where shellcode has been
detected. Again, we take advantage of the memory snap-
shot facility discussed earlier (§ 4.5) to obtain a list of
virtual addresses associated with API calls for various
shared libraries. We place traps on these addresses, and
when triggered, a handler for the corresponding call is
invoked. That handler pops function parameters off the
usermode stack, logs the call and its supplied parameters,
performs actions needed for the successful completion of
that call (e.g., allocating heap space), and then returns to
the injected code.
Obviously, due to the myriad of API calls available,
one cannot expect the diagnostics to be complete. Keep
in mind, however, that the lack of completeness in our
diagnostics facility is independent of the actual detection
of injected code. The ability to extend the level of diag-
nostic information is straightforward, but tedious. That
said, as shown later, we are able to provide a wealth of
diagnostic information on a diverse collection of self-
contained [27] shellcode injection attacks.
4.5 Extensibility
The capabilities provided by ShellOS are but one com-
ponent in an overall framework necessary to detect code
injection attacks. This larger framework should support
the loading of custom process snapshots and arbitrary
shellcode detection heuristics, each deﬁned by a list of
read, write, or execute memory traps. Since ShellOS
only detects and diagnoses the buffers of data provided,
there must be some mechanism for providing buffers of
data we suspect contain injected code. To this end, we
built two platforms that rely on ShellOS to scan buffers
for injected code; one to detect client-based program at-
tacks such as the malicious PDFs discussed earlier, and
another to detect attacks on network services that oper-
ates as a network intrusion detection system.
Supporting Detection of Code Injection in Client-
based Programs: To showcase ShellOS’ promise as
a platform upon which other modules can be built, we
implemented a lightweight memory monitoring facility
that allows ShellOS to scan buffers created by docu-
ments loaded in the process space of a prescribed reader
application.
In this context, a document is any ﬁle or
object that may be opened with it’s corresponding pro-
gram, such as a PDF, Microsoft Word document, Flash
object, HTML page, etc. This platform may be useful to
an enterprise as a network service wherein documents are
automatically sent for analysis (e.g. by extraction from
network streams or an email server) or manually submit-
ted by an analyst in a forensic investigation.
The approach we take to detect shellcode in malicious
documents is to let the reader application handle ren-
dering of the content while monitoring any buffers cre-
ated by it, and signaling ShellOS to scan these buffers
for shellcode (using existing heuristics). This approach
has several advantages. An important one is that we do
not need to worry about recreating any document object
model, handling obfuscated javascript, or dealing with
all the other idiosyncrasies that pose challenges for other
approaches [6, 8, 39]. We simply need to analyze the
buffers created when rendering the document in a quar-
antined environment. The challenge lies in doing all of
this as efﬁciently as possible.
To support this goal, we provide a monitoring facil-
ity that is able to snapshot the memory contents of pro-
cesses. The snapshots are constructed in a manner that
captures the entire process state, the virtual memory lay-
out, as well as all the code and data pages within the pro-
cess. The data pages contain the buffers allocated on the
heap, while the code pages contain all the system mod-
ules that must be loaded by ShellOS to enable analy-
sis. Our memory tracing facility includes less than 900
lines of custom C/C++ code. A high level view of the
approach is shown in Figure 3.
This functionality was built speciﬁcally for the Win-
dows OS and can support any application running on
Windows. The memory snapshots are created using cus-
tom software that attaches to an arbitrary application pro-
cess and stores contents of memory using the function-
ality provided by Windows’ debug library (DbgHelp).
We capture buffers that are allocated on the heap (i.e.,
pages mapped as RW), as well as thread and module in-
formation. The results are stored in minidump format,
Encoder
countdown
fnstenv mov
jmp call additive
shikata ga nai
call4 dword xor
alpha mixed
alpha upper
TAPiON
Nemu
Y
Y
Y
Y
Y
Y
N
Y*
ShellOS
Y
Y
Y
Y
Y
Y
Y
Y
Table 1: Off-the-Shelf Shellcode Detection.
Xeon Quad Processor machine with 32 GB of memory.
The host OS was Ubuntu with kernel version 2.6.35.
5.1 Performance
To evaluate our performance, we used Metasploit to
launch attacks in a virtualized environment. For each
encoder, we generated 100s of attack instances by ran-
domly selecting 1 of 7 exploits, 1 of 9 self-contained
payloads that utilize the PEB for shared library resolu-
tion, and randomly generated parameter values associ-
ated with each type of payload (e.g. download URL, bind
port, etc.). As the attacks launched, we captured the net-
work trafﬁc for later network-level buffer analysis.
We also encoded several payload instances using
an advanced polymorphic engine, called TAPiON4.
TAPiON incorporates features designed to thwart emula-
tion. Each of the encoders we used (see Table 1) are con-
sidered to be self-contained [25] in that they do not re-
quire additional contextual information about the process
they are injected into in order to function properly. In-
deed, we do not speciﬁcally address non-self-contained
shellcode in this paper.
For the sake of comparison, we chose a software-based
solution (called Nemu [28]), that is reﬂective of the cur-
rent state of the art. Nemu and ShellOS both performed
well in detecting all the instances of the code injection at-
tacks developed using Metasploit, with a few exceptions.
Surprisingly, Nemu failed to detect shellcode gener-
ated using the alpha upper encoder. Since the en-
coder payload relies on accessing the PEB for shared li-
brary resolution, we expected both Nemu and ShellOS
to trigger this detection heuristic. We speculate that
Nemu is unable to handle this particular case because
of inaccurate emulation of its particular instruction
sequences—underscoring the need to directly execute
the shellcode on hardware.
More pertinent to the discussion is that while the
software-based emulation approach is capable of de-
tecting shellcode generated with the TAPiON engine,
performance optimization limits its ability to do so.
The TAPiON engine attempts to confound detection
by basing its decoding routines on timing components
Figure 3: A platform for analyzing process buffers using
ShellOS
which contains all the information required to recreate
the process within ShellOS, including all dlls, the
PEB/TEB, register state, the heap and stack, and the vir-
tual memory layout of these components.
Supporting Detection of Code Injection in Network
Services: Another use-case for ShellOS is detecting
code injection attacks targeting network services. While
the shellcode embedded in client-based program code
injection attacks is typically obfuscated in multiple lay-
ers of encoding (e.g. compressed form → javascript →
shellcode), attacks on network services are often present
directly as executable shellcode on the wire. As noted
by Polychronakis et al. [26], we may use this observa-
tion to build a platform to detect code injection attacks
on network services by reassembling observed network
streams and executing each of these streams. This plat-
form may be used in an enterprise as a component of
an network intrusion detection system or for post-facto
analysis of a network capture in a forensic investigation.
5 Evaluation
In the analysis that follows, we ﬁrst examine ShellOS’
ability to faithfully execute network payloads and suc-
cessfully trigger the detection heuristics when shellcode
is found. Next, we examine the performance beneﬁts of
the ShellOS framework when compared to software-
emulation. We also report on our experience using
ShellOS to analyze a collection of suspicious PDF doc-
uments. All experiments were conducted on an Intel
ShellOS (Guest)Host OSAdobe AcrobatVMemFaultTimeoutTrapCoarse-grained TracingBufferMS Windows (Guest)NextAdobe AcrobatVMemBufferRequest PDF  Buffer ExtractionRequestShellcodeAnalysisExecute BufferOpen PDF with Adobe AcrobatBufferBufferBufferHypervisor(namely, the RDTSC instruction) and uses a plethora of
CPU-intensive coprocessor instructions in long loops to
slow runtime-analysis. These long loops quickly reach
Nemu’s default execution threshold (2048) prior to any
heuristic being triggered. This is particularly problem-
atic because no GetPC instruction is executed until these
loops complete.
Furthermore, software-based emulators simply treat
the majority of coprocessor instructions as NOPs. While
TAPiON does not currently use the result of these in-
structions in its decoding routine, it only takes minor
changes to the out-of-the-box engine to incorporate these
results and thwart detection (hence the “*” in Table 1).
ShellOS, on the other hand, fully supports all copro-
cessor instructions with its direct CPU execution.
More problematic for these classes of approaches is
that successfully detecting code encoded by engines such
as TAPiON can require following very long execution
chains (e.g., well over 60, 000 instructions). To examine
the runtime performance of our prototype, we randomly
generated 1000 benign inputs, and set the instructions
thresholds (in both approaches) to the levels required to
detect instances of TAPiON shellcode.
Figure 4: ShellOS Performance
code, however, is speciﬁcally designed to use the slower
FPU-based instructions. (ShellOS can execute over 4
million fast NOP instructions in the same time interval
that only 60k FPU-heavy instructions are executed.)
The results are shown in Figure 4. The labeled
points on the lineplot indicate the minimum execution
chain length required to detect the three representative
TAPiON samples. For completeness, we show the per-
formance of Nemu with and without unsafe execution
chain pruning (see §3). When unsafe pruning is used,
software-emulation does better than ShellOS on a sin-
gle core at very low execution thresholds. This is not
too surprising, as the higher clock frequencies required to
support short execution chains in ShellOS incur addi-
tional overhead (see §4). However, with longer execution
chains, the real beneﬁt of ShellOS becomes apparent—
ShellOS (on a single core) is an order of magnitude
faster than Nemu when unsafe execution chain pruning
is disabled. Finally, we observe that the worker queue
provided by the ShellOS host-side library efﬁciently
multi-processes buffer analysis, and demonstrates that
multi-processing offers a viable alternative to the unsafe
elimination of execution chains.
A note on 64-bit architectures The performance of
ShellOS is even more compelling when one takes
into consideration the fact that in 64-bit architectures,
program counter relative addressing is allowed—hence,
there is no need for shellcode to use any form of “Get
Program Counter” code to locate its address on the stack;
a limitation that has been widely used to detect tradi-
tional 32-bit shellcode using (very) low execution thresh-
olds. This means that as 64-bit architectures become
commonplace, shellcode detection approaches using dy-
namic analysis must resort to heuristics that require the
shellcode to fully decode. The implications are that
the requirement to process long execution chains, such
as those already exhibited by today’s advanced engines
(e.g., Hydra [29] and TAPiON), will be of far more sig-
niﬁcance than it is today.
Since ShellOS currently cannot directly set an in-
struction threshold (due to the coarse-grained tracing ap-
proach), we approximate the required threshold by ad-
justing the execution chain timeout frequency. As the
timer frequency increases, the number of instructions ex-
ecuted per execution chain decreases. Thus, we exper-
imentally determined the maximum frequency needed
to execute the TAPiON shellcodes that required 10k,
16k, and 60k instruction executions to complete their
loops. These timer frequencies are 5000HZ, 4000HZ,
and 1000HZ, respectively. Note that in the common
case, ShellOS can execute many more instructions, de-
pending on the speed of individual instructions. TAPiON
5.2 Throughput
To better study our throughput on network streams,
we built a testbed consisting of 32 machines running
FreeBSD 6.0 and generated trafﬁc using a state-of-the-
art trafﬁc generator, Tmix [15]. The network trafﬁc is
routed between the machines using Linux-based soft-
ware routers. The link between the two routers is tapped
using a gigabit ﬁber tap, with the trafﬁc diverted to our
detection appliance (i.e., running ShellOS or Nemu),
as well as to a network monitor that constantly monitors
the network for throughput and losses. The experimental
setup is shown in Figure 5.
100002000030000400005000060000Instruction Threshold02468101214161000 Benign Inputs Runtime (minutes)123Nemu (safe)Nemu (unsafe)ShellOS (single core)ShellOS (multicore)Figure 5: Experimental testbed with end systems generating trafﬁc using Tmix. Using a network tap, we monitor the
throughput on one system, while ShellOS or Nemu attempt to analyze all trafﬁc on another system.
Tmix synthetically regenerates TCP trafﬁc that
matches the statistical properties of trafﬁc observed in
a given network trace; this includes source level prop-
erties such as ﬁle and object size distributions, number
of simultaneously active connections and also network