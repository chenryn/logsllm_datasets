# 微软推出一种基于虚拟化安全的内核数据保护（KDP）的新技术
|
##### 译文声明
本文是翻译文章，文章原作者 Base Kernel Team，文章来源：microsoft.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
攻击者面对代码完整性(Code Integrity, CI)和控制流保护(Control Flow Guard,
CFG)等防止内存损坏的安全技术时，通常会将他们的重心转向数据损坏。攻击者使用数据破坏技术来攻击系统安全策略、升级特权、篡改安全认证、修改
“initialize once” 数据结构等等。
内核数据保护（KDP）是一种新的技术，它通过[虚拟化安全](https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs)的技术保护Windows内核和驱动程序的一部分来防止数据损坏攻击。KDP提供了一组API可将一些内核内存标记为只读，从而防止攻击者修改受保护的内存。例如，我们已经看到攻击者使用经过签名但易受攻击的驱动程序来攻击策略数据结构并安装未经签名的恶意驱动程序。KDP通过确保策略数据结构不会被篡改来减轻此类攻击。
将内核内存保护为只读的概念在Windows内核、收件箱组件、安全产品甚至第三方驱动程序（如反作弊和数字版权管理（DRM）软件）等方面具有重要的应用价值。
KDP除了可以增加应用程序的安全性保护程序不被篡改外，还包含了以下的好处：
    1. 性能改进——KDP减轻了认证组件的负担，不再需要定期验证已写保护的数据变量
    2. 可靠性改进——KDP使诊断内存损坏错误变得更容易，而这些错误不一定代表安全漏洞
    3. 为驱动程序开发人员和供应商提供激励，以提高与基于虚拟的安全性的兼容性，改善生态系统中这些技术的采用
KDP使用在[ Secured-core PCs](https://www.microsoft.com/en-us/windowsforbusiness/windows10-secured-core-computers?SilentAuth=1)上默认支持的技术，
Secured-core
PCs实现了一组特定的设备需求，这些需求将隔离和最小信任的安全最佳实践应用到支撑Windows操作系统的技术上。KDP通过为敏感的系统配置数据增加另一层保护，增强了由组成
Secured-core PCs的特性所提供的安全性。
在这个博客中，我们将分享关于内核数据保护如何工作以及如何在Windows10上实现的技术细节，目的是激励和授权驱动程序开发人员和供应商充分利用这项旨在应对数据损坏攻击的技术。
## 内核数据保护：概述
在VBS环境中，正常的NT内核在名为VTL0的虚拟化环境中运行，而安全内核在名为VTL1的更安全、更隔离的环境中运行。有关VBS和安全内核的更多详细信息可以在[这里](https://channel9.msdn.com/Blogs/Seth-Juarez/Isolated-User-Mode-in-Windows-10-with-Dave-Probert)和[这里](https://channel9.msdn.com/Blogs/Seth-Juarez/Windows-10-Virtual-Secure-Mode-with-David-Hepkin)找到。KDP旨在保护Windows内核中运行的驱动程序和软件（即OS代码本身）免受[数据驱动](https://channel9.msdn.com/Blogs/Seth-Juarez/Windows-10-Virtual-Secure-Mode-with-David-Hepkin)的攻击。它分为两个部分实现：
    1. 静态KDP使在内核模式下运行的软件能够静态地保护它自己映像的一部分不被VTL0中的任何其他实体篡改。
    2. 动态KDP帮助内核模式软件从“安全池”分配和释放只读内存。从池返回的内存只能初始化一次。
由KDP管理的内存总是由安全内核(VTL1)进行验证，并由hypervisor使用第二级地址转换(SLAT)表进行保护。因此，在NT内核(VTL0)中运行的任何软件都不能修改受保护内存的内容。
最新的Windows 10 Insider
Build中已经提供了动态KDP和静态KDP，除了可执行页面之外，可以使用任何类型的内存。可执行页面的保护已经由hypervisor-protected
code integrity
(HVCI)提供，它阻止任何非签名内存成为可执行内存，并授予W^X(可写或可执行的页面，但不能同时授予二者)条件。本文未介绍HVCI和W ^
X条件（有关更多详细信息，请参阅即将出版的新的Windows Internals书籍）。
## 静态KDP
如果驱动程序希望通过静态KDP保护其映像的一部分，则应调用MmProtectDriverSection API，该API原型如下：
    NTSTATUS MmProtectDriverSection (PVOID AddressWithinSection, SIZE_T Size, ULONG Flags)
驱动程序指定位于数据段内的地址，还可以指定受保护区域的大小和某些标志。在撰写本文时，“size”参数被保留以备将来使用：地址所在的整个数据段将始终受到API的保护。
如果函数成功执行，则支持静态部分的内存对于VTL0变为只读，并通过SLAT进行保护。
并且不允许卸载具有受保护部分的驱动程序，否则将导致蓝屏错误。然而，我们也考虑到了有时驱动应该能够卸载。因此，我们引入了MM_PROTECT_DRIVER_SECTION_ALLOW_UNLOAD标志位，如果调用者指定了它，系统将能够卸载目标驱动程序，这意味着在本例中，受保护的部分将首先不受保护，然后由NtUnloadDriver释放。
## 动态KDP
动态KDP允许驱动程序使用安全池提供的服务分配和初始化只读内存，安全池由安全内核管理。使用者首先创建与标记关联的安全池上下文。使用者未来的所有内存分配都将与创建的安全池上下文相关联。在创建了上下文之后，可以通过对ExAllocatePool3
API的一个新的扩展参数执行只读分配:
    PVOID ExAllocatePool3 (POOL_FLAGS Flags, SIZE_T NumberOfBytes, ULONG Tag, PCPOOL_EXTENDED_PARAMETER ExtendedParameters, ULONG Count);
然后，调用者可以指定分配的大小和初始缓冲区，以便在POOL_EXTENDED_PARAMS_SECURE_POOL数据结构中复制内存。在VTL0中运行的任何实体都不能修改返回的内存区域。此外，在分配时，调用者提供一个标记和一个cookie值，它们被编码并嵌入到分配的内存中。使用着可以在任何时候验证地址是否在为动态KDP分配保留的内存范围内，以及预期的cookie和标记是否已经编码到给定的内存中。
这允许调用者检查其指向安全池分配的指针没有被不同的分配切换。
与静态KDP类似，动态KDP默认情况下不能释放或修改内存区域。但调用者可以在分配时使用SECURE_POOL_FLAGS_FREEABLE(1)和SECURE_POOL_FLAG_MODIFIABLE(2)标志来指定分配的内存是否是可释放和可修改的。
使用这些标志会降低分配的安全性，但允许在泄漏所有分配都不可行的情况下使用动态KDP内存，例如在计算机上为每个进程进行的分配。
## windows10 上的KDP如何实现
如前所述，静态KDP和动态KDP都依赖于hypervisor中SLAT保护的物理内存。当处理器支持SLAT时，它使用[另一层进行内存地址转换](https://en.wikipedia.org/wiki/Second_Level_Address_Translation)。
###  二级地址转换（SLAT）
当hypervisor启用SLAT支持，并且VM在VMX非root模式下执行时，处理器将一个名为Guest virtual
address（GVA，或ARM64中的stage 1 virtual address）的初始虚拟地址转换为名为Guest physical