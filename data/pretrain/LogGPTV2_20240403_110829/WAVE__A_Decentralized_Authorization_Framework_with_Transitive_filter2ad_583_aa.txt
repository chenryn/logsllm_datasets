# WAVE: A Decentralized Authorization Framework with Transitive Delegation

**Authors:** Michael P. Andersen, Sam Kumar, Moustafa AbdelBaky, Gabe Fierro, John Kolb, Hyung-Sin Kim, David E. Culler, and Raluca Ada Popa  
**Affiliation:** University of California, Berkeley  
**Conference:** 28th USENIX Security Symposium, August 14–16, 2019, Santa Clara, CA, USA  
**DOI:** 978-1-939133-06-9  
**Open Access:** Sponsored by USENIX  
**Link:** [Proceedings](https://www.usenix.org/conference/usenixsecurity19/presentation/andersen)

## Abstract

Most deployed authorization systems rely on a central trusted service, whose compromise can lead to the breach of millions of user accounts and permissions. We present WAVE, an authorization framework offering decentralized trust: no central services can modify or see permissions, and any participant can autonomously delegate a portion of their permissions. To achieve this, WAVE adopts an expressive authorization model, enforces it cryptographically, protects permissions via a novel encryption protocol, and stores them in an untrusted, scalable storage solution. WAVE provides competitive performance compared to traditional authorization systems relying on central trust. It is an open-source project and has been used for two years to control 800 IoT devices.

## 1. Introduction

Authorization and authentication are fundamental components of many systems. Most authorization systems today rely on centralized services such as credential stores, Access Control Lists (ACLs), Active Directory, and OAuth. For example, in a calendar application, a central service stores which users have access to what calendars, and users authenticate to it, e.g., via username and password. Delegation is critical in these systems, allowing, for instance, an assistant to edit your calendar and further delegate restrictive view access to an event organizer. These forms of delegation are typically implemented as changes to a centralized ACL.

However, this approach presents two fundamental problems. First, a centralized service is a single point of attack: a single breach can compromise many user accounts and permissions. Second, the operator of the central server has a complete view of the private permission data for all users, seeing users' social relationships and able to modify permissions.

In response to the weaknesses of centralized systems, recent security systems are increasingly avoiding trusted central services. This approach has been adopted by end-to-end encryption systems like WhatsApp and Signal, blockchains (e.g., Bitcoin, Ethereum, Zcash), and ledgers (e.g., IBM’s Hyperledger, Certificate Transparency, Key Transparency). Our goal is to build a scalable, decentralized authorization system that permits delegation under a similar threat model.

We propose WAVE, a decentralized authorization system that does not rely on a trusted service. WAVE offers decentralized trust: each user's WAVE client manages the permissions of that user and can delegate access to other users. WAVE enforces delegation cryptographically, not via a trusted service. It aims to capture a wide range of authorization policies and provide an alternative to traditional systems like OAuth and Active Directory.

Importantly, WAVE facilitates applications that span multiple trust domains. For example, IoT orchestration applications like IFTTT tie together multiple vendors and users but rely on several central points of attack. The compromise of any one of these servers may affect hundreds of thousands of users. Using WAVE, greater cross-administrative-domain orchestration can be achieved with no central authorization servers, reducing the trust that each domain must place in the others.

### 1.1 Usage Scenarios

While authorization plays a key role in the security of almost any system today, the benefits of decentralized authorization are most pronounced in inherently distributed systems. Our deployment of WAVE over the past two years has focused on securing distributed IoT devices and services used to monitor and control over twenty small to medium-sized commercial and residential buildings. Hence, we will use smart buildings as a running example.

Consider a set of campuses, each owned by a property manager. Each campus is composed of multiple buildings, with portions of each building leased out to tenants by the property manager. The property manager within each campus is the authority for the cyber-physical resources associated with the buildings in the campus, but they must delegate permission to the individual building managers who must further delegate permissions to the tenants, allowing them to control the portions of the buildings that they rent. Any of these principals may then further delegate permissions to IoT devices, long-running analytics, or control services operating on their behalf, perhaps provided by the utility. The building manager and/or tenant will also grant ephemeral permissions on subsets of the building infrastructure to contractors (like HVAC commissioning teams) and, especially in our case, to researchers.

A similar structure occurs in small residential buildings where a homeowner installs smart devices such as lights and thermostats and needs to delegate permission on those devices to their partner, guest, nanny, or children.

Cross-administrative-domain delegation is present in both examples. In larger buildings, we see the boundary between the property owner and the tenants. In residential buildings, this is most evident when using orchestration tools like IFTTT, where an organization, distinct from the owner of the devices, runs the controller service and needs to obtain permission from the owner.

WAVE is not limited to IoT. It provides general-purpose delegable authorization and can, for example, be used in place of OAuth to remove the risk of the centralized token-issuing server and allow for richer delegation semantics.

### 1.2 High-Level Security Goal & Threat Model

At a high level, our objective is to design a system where the compromise of an authorization server does not compromise all the users’ permissions. Specifically, even if an adversary has compromised any authorization servers and users, it should not be able to:

1. Grant permissions on behalf of uncompromised users.
2. See permissions granted in the system, beyond those potentially relevant to the compromised users. (See §4 and §B for our definition of "relevant.")
3. Undetectably modify the permissions received, granted, or revoked by uncompromised users, or undetectably prevent uncompromised users from granting, receiving, or revoking permissions to/from uncompromised users.

### 1.3 Failure of Existing Systems

Existing authorization systems fall short in two general areas: they do not meet our security goals or do not provide the features required for IoT usage scenarios. More concretely, we summarize the following six requirements that are not simultaneously met by any existing system (as illustrated in Table 4):

1. **No reliance on central trust.** For example, in the smart buildings scenario, the status quo has certain devices (e.g., LIFX light bulbs) perform their authorization on the vendor’s server in the cloud. If that server is compromised, all of those devices in all of the customer buildings are compromised. In this case, the adversary can violate all three security goals.
2. **Transitive delegation.** The smart building scenario illustrates the necessity for transitive delegation and revocation, where, for example, a tenant can further delegate their permissions to a control service or guest, and have those permissions predicated on the tenant’s permissions. If the tenant moves out, all of the permissions they granted should be automatically revoked, even if the building manager is unaware of the grants the tenant has made. This form of transitive delegation is not found in widely-deployed systems like LDAP or OAuth.
3. **Protected permissions.** Parties should be able to see only the permissions that are potentially relevant to them. Even though the property manager is the authority for all the buildings, they must not be able to see the permissions that the tenants grant (Security Goal #2). Existing systems do not offer a solution to this requirement.
4. **Decentralized verification.** Some existing decentralized systems (e.g., SDSI/SPKI and Macaroons) allow only the authority to verify that an action is authorized. This is adequate in the centralized service case but does not work in the IoT case where the root authority (the property manager) has nothing to do with the devices needing to verify an action is authorized (for example, a thermostat). Any participant must be able to verify that an action is authorized.
5. **No ordering constraints.** Delegations must be able to be instantiated in any chronological order. For example, a participant can delegate permissions in anticipation of being granted sufficient ones for the delegation to be useful. This is critical in our deployments.
6. **Offline participants.** Not all participants have a persistent online presence. A device may be offline at the time it is granted permissions (e.g., during installation) and must be able to discover that it received permissions when it comes online.

While many existing systems meet some of these requirements, no existing work meets all of the requirements concurrently, as shown in §9.

### 1.4 Challenges and Approach

#### Compatible Authorization Model

The first challenge is identifying a model for authorization that is compatible with these requirements. We examined many authorization models but found that most cannot be enforced without a centralized authority or are incompatible with the other requirements. However, representing the authorization model as a graph, such as in SDSI/SPKI, where a proof of authorization is a path through a graph, is compatible with our requirements.

Consequently, WAVE maintains a global graph of delegations between entities (Fig. 1a), which are associated with participants. An entity is a collection of public and private key pairs and can correspond to a user, service, or group. An edge indicates that an entity grants another entity access according to a policy, which is one or more permissions along with a description of the resources for which the permissions are granted, and the expiry of the grant. This enables fine-grained transitive delegation with revocation and expiry.

To enforce the policy cryptographically, each edge, from issuer to subject entity, is a signed certificate recording the delegation of permissions, which we call an attestation. A path from an entity to another entity grants access equal to the intersection of the policies on that path. The graph enables entities to prove they have some permission P by revealing a path through the graph from an authority entity to themselves where all the edges of the path grant a superset of P. This path is called a proof. The graph construction allows permissions to be granted in any order, including delegation of permissions one does not yet possess but expects to receive in the future.

While WAVE’s authorization graph and proofs are structurally similar to SDSI/SPKI, WAVE differs in three important aspects:
1. **Verification:** In SDSI/SPKI, only a central authority (holding an ACL) can verify a proof, whereas in WAVE, anyone can independently (with no communication) verify a proof yielding an authorization policy.
2. **Scalable Storage:** WAVE provides a trustworthy, scalable storage solution for attestations that enables discoverability with offline participants and out-of-order grants, which is out of scope for SDSI/SPKI.
3. **Encryption:** Attestations are encrypted in WAVE, whereas they are visible in SDSI/SPKI.

These differences enable meeting the requirements in §1.3.

#### Scalable Untrusted Storage

To support granting permissions to offline participants, we use a storage system that enables participants to discover attestations when they later come online. To meet the requirements above, the storage must be able to prove its integrity cryptographically, so as not to compromise Security Goal #3.

Our first design of WAVE was built on Ethereum, which has these properties. Unfortunately, our experiments showed that a blockchain-based system will not scale to a global size, even though changing permissions is far less common than accessing data.

We present a new type of transparency log, the Unequivocable Log Derived Map (ULDM). Unlike Certificate Transparency, which cannot form a proof of nonexistence needed for revocations, or Key Transparency, which requires users to audit every object at every epoch, a ULDM is both capable of handling revocations and is efficiently auditable. The ULDM forms the foundation of a horizontally scalable storage tier with cryptographically proven integrity, which could also be useful outside of WAVE. Our current design, described in §5, allows for a shared-nothing architecture of storage servers with independent auditors that need only communicate periodically (e.g., once a day) with clients to verify the correct operation of the storage. The resulting architecture is arbitrarily horizontally scalable, with each node having a higher capacity and lower latency than a blockchain, as we show in §8.

#### Confidentiality of Permissions

To meet the requirement of protected permissions and Security Goal #2 despite the public ULDM storage tier, there must be a mechanism to prevent the storage servers or the general public from seeing the permissions, while ensuring that parties forming and verifying proofs can see the necessary permissions. The challenge lies in preserving confidentiality while enabling out-of-order delegation and offline participants. We overcome this challenge with a novel technique called reverse-discoverable encryption (RDE, §4) used to encrypt attestations. RDE allows entities to efficiently discover and decrypt the attestations that they can use in a valid proof while using policy-aware encryption to hide most other attestations. Importantly, RDE does not introduce additional constraints on the ordering of delegations or liveness of participants.

Our implementation of WAVE is a real-world, open-source artifact. We have deployed and operated various versions of WAVE over the past two years. During this time, WAVE has been used to control more than 20 buildings containing more than 800 IoT devices. We discuss lessons from our deployment in §8.4; in particular, this has allowed us to confirm that the authorization and delegation model presented here is useful in practice. Further, WAVE has offered performance comparable to traditional authorization systems, validating its practicality.