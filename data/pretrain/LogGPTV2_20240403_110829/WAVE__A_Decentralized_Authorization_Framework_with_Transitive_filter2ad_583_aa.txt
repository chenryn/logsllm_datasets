title:WAVE: A Decentralized Authorization Framework with Transitive
Delegation
author:Michael P. Andersen and
Sam Kumar and
Moustafa AbdelBaky and
Gabe Fierro and
John Kolb and
Hyung-Sin Kim and
David E. Culler and
Raluca Ada Popa
WAVE: A Decentralized Authorization Framework 
with Transitive Delegation
Michael P Andersen, Sam Kumar, Moustafa AbdelBaky, Gabe Fierro, John Kolb, 
Hyung-Sin Kim, David E. Culler, and Raluca Ada Popa, University of California, Berkeley
https://www.usenix.org/conference/usenixsecurity19/presentation/andersen
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.WAVE: A Decentralized Authorization Framework with Transitive Delegation
Michael P Andersen, Sam Kumar, Moustafa AbdelBaky
Gabe Fierro, John Kolb, Hyung-Sin Kim, David E. Culler, Raluca Ada Popa
University of California, Berkeley
Abstract
Most deployed authorization systems rely on a central
trusted service whose compromise can lead to the breach
of millions of user accounts and permissions. We present
WAVE, an authorization framework offering decentralized
trust: no central services can modify or see permissions and
any participant can delegate a portion of their permissions
autonomously. To achieve this goal, WAVE adopts an ex-
pressive authorization model, enforces it cryptographically,
protects permissions via a novel encryption protocol while
enabling discovery of permissions, and stores them in an un-
trusted scalable storage solution. WAVE provides competi-
tive performance to traditional authorization systems relying
on central trust. It is an open-source artifact and has been
used for two years for controlling 800 IoT devices.
1 Introduction
Authorization and authentication are fundamental compo-
nents of many systems. Most authorization systems today
rely on centralized services such as centralized credential
stores (e.g., [15, 19, 56]), Access Control Lists (ACLs), Ac-
tive Directory, and OAuth [4]. For example, in a calendar
application, a central service stores which users have access
to what calendars, and users authenticate to it, e.g. via user-
name and password. In these systems, delegation is critical:
for instance, allowing an assistant to edit your calendar, and
letting the assistant further delegate restrictive view access to
an event organizer. These forms of delegation are typically
implemented as changes to a centralized ACL.
However, this approach presents two fundamental prob-
lems. First, a centralized service is a central point of attack:
a single attack can simultaneously compromise many user
accounts and permissions. There have been numerous such
breaches [39], and attackers even managed to log in as the
victim users. Second, the operator of the central server has
a complete view of the private permission data for all users
(thus seeing users’ social relationships [54]), and can modify
permissions [2].
Responding to the weaknesses of centralized systems, re-
cent security systems are increasingly avoiding a trusted
central service. This approach has been adopted by end-
to-end encryption systems [25], such as WhatsApp and
Signal, blockchains (e.g., Bitcoin, Ethereum, Zcash), or
ledgers (e.g., IBM’s Hyperledger [17], Certiﬁcate Trans-
parency [41], Key Transparency [32]). Our goal is to build a
scalable decentralized authorization system, permitting del-
egation under a similar threat model.
We propose a decentralized authorization system that
does not rely on a trusted service, WAVE (“WAVE is an
Authorization Veriﬁcation Engine”). WAVE offers de-
centralized trust: each user’s WAVE client manages the
permissions of that user and can delegate access to other
users. WAVE enforces delegation cryptographically, not via
a trusted service. It aims to capture a wide range of autho-
rization policies and to provide an alternative to traditional
systems, such as OAuth [4] and Active Directory.
Importantly, in providing decentralized transitive delega-
tion, WAVE facilitates applications that span multiple trust
domains. For example, IoT orchestration applications like
If This Then That (IFTTT) [3] tie together multiple ven-
dors and users, but IFTTT’s design relies on several central
points of attack: the vendor OAuth servers and the IFTTT
token storage servers. The compromise of any one of these
servers may affect hundreds of thousands of users. Us-
ing WAVE, greater cross-administrative-domain orchestra-
tion can be achieved with no central authorization servers,
reducing the trust that each domain must place in the others.
1.1 Usage Scenarios
While authorization plays a key role in the security of al-
most any system today, the beneﬁts of decentralized au-
thorization are most pronounced in systems that are inher-
ently distributed, where the prevailing centralized authoriza-
tion schemes undermine what would otherwise be a resilient
system. Our deployment of WAVE over the past two years
has focused on securing distributed IoT devices and services
used to monitor and control over twenty small to medium-
sized commercial and residential buildings; hence, we will
use smart buildings as a running example.
Consider a set of campuses, each owned by a property
manager. Each campus is composed of multiple buildings,
with portions of each building leased out to tenants by the
property manager. The property manager within each cam-
pus is the authority for the cyberphysical resources associ-
ated with the buildings in the campus, but they must delegate
permission to the individual building managers who must
further delegate permissions to the tenants, allowing them
to control the portions of the buildings that they rent. Any of
these principals may then further delegate permissions to IoT
devices, long-running analytics or control services operating
on their behalf, perhaps provided by the utility. The building
manager and/or tenant will also grant ephemeral permissions
on subsets of the building infrastructure to contractors (like
HVAC commissioning teams) and, especially in our case, to
USENIX Association
28th USENIX Security Symposium    1375
A similar structure occurs in small residential buildings
where a homeowner installs smart devices such as lights and
thermostats and needs to delegate permission on those de-
vices to their partner, guest, nanny, or children.
Cross-administrative-domain delegation is present in both
examples. In larger buildings, we see the boundary between
the property owner and the tenants.
In residential build-
ings, this is most evident when using orchestration tools like
IFTTT, where an organization, distinct from the owner of the
devices, runs the controller service and needs to obtain per-
mission from the owner.
WAVE is not limited to IoT. It provides general purpose
delegable authorization and can, for example, be used in
place of OAuth to remove the risk of the centralized token-
issuing server and allow for richer delegation semantics.
1.2 High-Level Security Goal & Threat Model
At a high level, our objective is to design a system where the
compromise of an authorization server does not compromise
all the users’ permissions. Namely, even if an adversary has
compromised any authorization servers and users, it should
not be able to:
1. Grant permissions on behalf of uncompromised users.
2. See permissions granted in the system, beyond those po-
tentially relevant to the compromised users. See §4 and
§B for our deﬁnition of relevant.
researchers.
3. Undetectably modify the permissions received/grant-
ed/revoked by uncompromised users
from uncom-
promised users, or undetectably prevent uncompro-
mised users from granting/receiving/revoking permis-
sions to/from uncompromised users.
1.3 Failure Of Existing Systems
Existing authorization systems fall short in two general ar-
eas: they do not meet our Security Goals or they do not pro-
vide the features required for IoT usage scenarios. More con-
cretely, we summarize the following six requirements that
are not simultaneously met by any existing system (as illus-
trated in Table 4):
No reliance on central trust. For example, in the smart
buildings scenario, the status quo has certain devices (e.g
LiFx light bulbs) perform their authorization on the vendor’s
server in the cloud. If that server is compromised, all of those
devices in all of the customer buildings are compromised. In
this case, the adversary can violate all three Security Goals.
Transitive delegation. The smart building scenario illus-
trates the necessity for transitive delegation and revocation
where, for example, a tenant can further delegate their per-
missions to a control service or guest and have those permis-
sions predicated on the tenant’s permissions. If the tenant
moves out, all of the permissions they granted should be au-
tomatically revoked, even if the building manager is unaware
of the grants the tenant has made. This form of transitive del-
egation is not found in widely-deployed systems like LDAP
or OAuth: where delegation exists, it does not have this tran-
sitive predication property. In contrast, this property is well
developed in academic work [49, 13, 43, 45, 29, 14, 51, 11].
Protected permissions. Parties should be able to see only
the permissions that are potentially relevant to them. Even
though the property manager is the authority for all the build-
ings, they must not be able to see the permissions that the
tenants grant (Security Goal #2). Existing systems do not
offer a solution to this requirement: in many centralized sys-
tems, for example, whoever operates the server can see all
the permissions. We elaborate further in §9.
Decentralized veriﬁcation. Some existing decentralized
systems (e.g. SDSI/SPKI [49] and Macaroons [12]) allow
only the authority to verify that an action is authorized. This
is adequate in the centralized service case where the author-
ity is the service provider, but it does not work in the IoT case
where the root authority (the property manager) has nothing
to do with the devices needing to verify an action is autho-
rized (for example a thermostat). Any participant must be
able to verify that an action is authorized.
No ordering constraints. Delegations must be able to be
instantiated in any chronological order. For example, a par-
ticipant can delegate permissions in anticipation of being
granted sufﬁcient ones for the delegation to be useful. We
have found this to be critical in our deployments. As a fur-
ther example, when the building manager’s key needed to be
replaced (e.g. it expired or was compromised), they created a
new key and the property manager had to grant replacement
permissions to this new key. In many existing systems (e.g.
Macaroons [12]), this necessitates every tenant re-creating
their entire permission trees, as all grants must happen in se-
quence, following the grants to the replacement key. This
is not tractable in practice as it requires the coordination of
many people and hundreds of devices, leading to extended
downtime. Furthermore, when we had such ordering con-
straints in our prior deployments we observed users choos-
ing insecure long expiry times or broad permissions to avoid
this re-issue. As a result, we require that the system enables
permission grants to occur out of order, so that permissions
grants can be modiﬁed (revoked / re-issued) or any key can
be “replaced” without re-issuing subsequent delegations. We
have also found that this capability leads to safer user prac-
tices as “mistakes” like overly narrow permissions and short
expiry times are easy to correct.
Ofﬂine participants. Not all participants have a persistent
online presence. A device may be ofﬂine at the time that
it is granted permissions (e.g. during installation) and it
must be able to discover that it received permissions when
it comes online. This is trivial to solve with a centralized
authorization system, but is not solved in existing decen-
tralized systems (e.g SDSI/SPKI [49], Macaroons [12] and
[13, 43, 45, 29, 27, 44, 59, 18, 57, 50]).
While many existing systems meet some of these require-
1376    28th USENIX Security Symposium
USENIX Association
ments, no existing work meets all of the requirements con-
currently, as shown in §9.
1.4 Challenges and Approach
Compatible authorization model. The ﬁrst challenge is
identifying a model for authorization that is compatible with
these requirements. We examined many authorization mod-
els [12, 49, 24, 13, 43, 45, 29, 27, 58, 37, 30, 48, 19, 15,
56, 44, 59, 18, 57, 50], but most of them cannot be en-
forced without a centralized authority or are incompatible
with the other requirements. Nevertheless, we found that
representing the authorization model as a graph, such as in
SDSI/SPKI [49, 24] where a proof of authorization is a path
through a graph, is compatible with our requirements, even
though the existing systems implementing it fall short.
Consequently, WAVE maintains a global graph of delega-
tions between entities (Fig. 1a), which are associated with
participants. An entity is a collection of public and private
key pairs and can correspond to a user, service, or group. An
edge indicates that an entity grants another entity access ac-
cording to a policy, which is one or more permissions along
with a description of the resources for which the permissions
are granted, and the expiry of the grant. This enables ﬁne-
grained transitive delegation with revocation and expiry.
To enforce the policy cryptographically, each edge, from
issuer to subject entity, is a signed certiﬁcate recording the
delegation of permissions, which we call an attestation. A
path from an entity to another entity grants access equal to
the intersection of the policies on that path. The graph en-
ables entities to prove they have some permission P by re-
vealing a path through the graph from an authority entity to
themselves where all the edges of the path grant a superset of
P. This path is called a proof. The graph construction allows
permissions to be granted in any order, including delegation
of permissions one does not yet possess but expects to re-
ceive in the future.
While WAVE’s authorization graph and proofs are struc-
turally similar to SDSI/SPKI, WAVE differs in three impor-
tant aspects: (1) while in SDSI/SPKI only a central authority
(holding an ACL) can verify a proof, in WAVE anyone can
independently (with no communication) verify a proof yield-
ing an authorization policy. (2) WAVE provides a trustwor-
thy, scalable storage solution for attestations that enables dis-
coverability with ofﬂine participants and out of order grants,
which is out of scope for SDSI/SPKI. (3) Attestations are
encrypted in WAVE whereas they are visible in SDSI/SPKI.
These differences enable meeting the requirements in §1.3.
Scalable untrusted storage. To support granting permis-
sions to ofﬂine participants, we use a storage system that
enables participants to discover attestations when they later
come online. To meet the requirements above, the storage
must be able to prove its integrity cryptographically, so as
not to compromise Security Goal #3.
Our ﬁrst design of WAVE [9] was built on Ethereum,
which has these properties. Unfortunately, our experiments
showed that a blockchain-based system will not scale to a
global size, even though changing permissions is far less
common than accessing data.
We present a new type of transparency log, the Unequiv-
ocable Log Derived Map (ULDM). Unlike Certiﬁcate Trans-
parency [41], which cannot form a proof of nonexistance
needed for revocations, or Key Transparency [32], which re-
quires users to audit every object at every epoch, a ULDM
is both capable of handling revocations and is efﬁciently
auditable. The ULDM forms the foundation of a horizon-
tally scalable storage tier with cryptographically proven in-
tegrity, which could also be useful outside of WAVE. Our
current design, described in §5, allows for a shared-nothing
architecture of storage servers with independent auditors that
need only communicate periodically (e.g., once a day) with
clients to verify the correct operation of the storage. The re-
sulting architecture is arbitrarily horizontally scalable with
each node having a higher capacity and lower latency than a
blockchain, as we show in §8.
Conﬁdentiality of permissions. To meet the requirement of
protected permissions and Security Goal #2 despite the pub-
lic ULDM storage tier, there must be a mechanism to prevent
the storage servers or the general public from seeing the per-
missions, while ensuring that parties forming and verifying
proofs can see the necessary permissions. The challenge lies
in preserving conﬁdentiality while enabling out of order del-
egation and ofﬂine participants. We overcome this challenge
with a novel technique called reverse-discoverable encryp-
tion (RDE, §4) used to encrypt attestations. RDE allows en-
tities to efﬁciently discover and decrypt the attestations that
they can use in a valid proof while using policy-aware en-
cryption to hide most other attestations. Importantly, RDE
does not introduce additional constraints on the ordering of
delegations or liveness of participants.
Our implementation of WAVE is a real-world open-source
artifact [7]. We have deployed and operated various versions
of WAVE over the past two years. During this time, WAVE
has been used to control more than 20 buildings containing
more than 800 IoT devices. We discuss lessons from our de-
ployment in §8.4; in particular, this has allowed us to conﬁrm
that the authorization and delegation model presented here is
useful in practice. Further, WAVE has offered performance
comparable to traditional authorization systems, validating