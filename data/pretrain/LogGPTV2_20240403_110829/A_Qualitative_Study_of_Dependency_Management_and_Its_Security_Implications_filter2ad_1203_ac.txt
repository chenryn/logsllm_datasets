to them. On the next stages, we have added 15 more interviews,
which significantly enlarged the number of quotations (533 quota-
tions on the 11th iteration). While adding them, we realized that
there was one irrelevant code (Scala)9, so we deleted it. Hence,
there were 27 codes on the 10th iteration. Then we have added
quotations and codes for the developer roles (SME, LE, FOSS, or UG
developer), which resulted in 31 codes and 574 quotations on the
7Except for the cases when the developer explicitly told us that she believed us to
transcribe everything correctly and did not want to check the transcript.
8For coding we have used the Atlas.ti software.
9The code Scala was mentioned by only one developer as an example of her subproject
11th iteration. On the last step of the coding process, we have added
the codes corresponding to the interview process parts. Hence, we
have ended up with four codes that correspond to developer roles,
six codes for interview process parts, and 27 codes for developer
answers assigned to 829 interview quotes.
To validate our observations and implications, we shared the
one-page summary of this study, along with the full version of
the paper with the interviewees. We asked them to validate if the
results correspond to their expectations (last step in Figure 1).
4.4 Final Code Book
To analyze the developer interviews, we introduce the following
code groups that tag a topic of a conversation:
• Dependencies code group indicates that a fragment of a con-
versation is specific to software dependencies rather than,
for example, to own code of a software project.
• Language code group labels conversations specific to a par-
ticular programming language (e.g., Java vs. Python) rather
than discussions of common issues relevant to the software
engineering process in general. A different code is used for
each programming language (C/C++, Java, JS, Python).
assign them to the corresponding code groups as follows:
Additionally, we cluster similar topics in the conversations and
• The Attitude code group captures a qualitative assessment
of a fact reported by a developer. E.g., a developer expresses
her likes, dislikes, or recommendations regarding particular
steps of dependency management.
• The Context code group captures background information
about the reported issues, such as whether an issue relates
to functionality or security.
• The Issues code group includes discussions about functional-
• The Operations code group captures specific modifications
of project own code or its dependencies. For example, a
conversation fragment discusses dependency management
or dependency maintenance.
• The Process code group captures the presence of established
development practices followed by developers. For example,
a conversation fragment describes how a developer team
automates the dependency management of their project.
ity flaws or weaknesses, like bugs or breaking changes.
Table 3 summarizes the resulted list of codes in our study while
Figure 2 shows number of code occurrences. Notice that the same
sentence may be labeled by several codes:
We have a contract that we inform our clients once a month. If
we have discovered vulnerability today the client would know
about it in a month. Of course, if the vulnerability is not
critical. If it is critical, we inform our client immediately
as soon as we gather the information.. (#5)
is associated to codes: dependency management, python (as the
developer is talking about Python), requirements, security.
5 FINDINGS
We have checked10 whether practices established within develop-
ment communities affect our findings. Considering the per-language
code distributions, we observed that Java, JavaScript, and Python
10For detailed analysis, please, refer to Appendix E.
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1517The final code book consists of 27 codes grouped into 7 code groups. Figure 2 shows the frequency of occurrences of the resulted codes.
Table 3: Codes used in the study
Code group
Dependencies
Language
Attitude
Context
Issues
Operations
Code
dependency
C/C++
Java
JavaScript
Python
like
dislike
recommendation
functionality
requirements
security
broken
bugs
resources
licenses
fix availability
maintenance
management
dependency selection
direct deps
looking for info
transitive deps
automated
code tool
workflow
dependency tool
manual
Process
Description
operations with dependencies
discussion specific to C/C++
discussion specific to Java
discussion specific to JavaScript
discussion specific to Python
positive assessment
negative assessment
suggestion of improvements
project functionalities or features
policies or requirements
security related statement
involve modifications of
involve modifications of
something not working
programming error description
human or time resources
rights to use software
availability of a bug fix
changes that
source code
changes that
project configuration
selection of new dependencies
dependencies introduced directly
check 3rd-party sources for info
dependencies of dependencies
solutions that automate software engineer-
ing tasks
tool for analysis of quality and security of
code
company practices discussion
tool for analysis of quality and security of
dependencies
solving a task without application of any
automation tools
Example
We are using enough number of libraries. (#14)
[...] with the C++ you have to include the libraries yourself. (#10)
Well, this is a Java story (#14)
Well, the JavaScript world is a mess. (#7)
[...] but we are working with Python. (#24)
If we can apply automation test, it would be good for us [...] (#17)
[...] but we are also afraid of its effect on the other flows. (#17)
[...] having a SonarQube plug-in - it would be great. (#3)
[...] and we integrated that functionality in our project. (#8)
We have a contract that we inform our clients once a month. (#5)
It’s very complicated to figure out that your code has such a
vulnerability. (#3)
[...] to avoid all service to go down. (#9)
Well, bugs of course. (#12)
I cannot address every smallest issue [...] (#2)
[...] it is difficult to control compatibility of licenses (#2)
Simply we used another library [...] (#23)
We suggest fixes to the contributors. (#7)
Every couple of days I would upgrade all of the packages. (#15)
When we select them, we have a discussion. (#5)
[...] our direct dependency was Jenkins. (#9)
I still go to Github, read sources[...] (#5)
If you have a transitive dependency [...] (#3)
Thanks to various tools, bots, which just sit in your repository[...]
(#7)
It produces a report on the [] server. (#3)
[ironically] Yes, we have a weekly reminder [...] (#5)
We are using the [] scanner and it is the only one[...] (#20)
We do not use any tools to check security. (#16)
Table 4: Developers’ attitudes: likes vs dislikes
The table shows the co-occurrence of codes like and dislike with other codes of issues, process, operations, and context code groups. For example, codes dislike and management have 86
co-occurrences, which means the depelopers often expressed negative attitudes towards dependency management. We mark (underline and bold) the number of co-occurrences exceeding 18
(sum of the mean and one standard deviation of code co-occurrences). The full co-occurrence table is available in the Apendix D.
automated workflow management
trans deps
functionality
security
operations
looking for info
context
dislike
like
broken
21
6
issues
bugs
29
31
resources
23
3
process
14
4
16
6
developers shared similar attitudes regarding dependency man-
agement: most frequent codes are management, security, and bugs.
Most concerns of C/C++ developers were on the co-occurrences of
these codes with code dislike. Hence, below we present our findings
without distinguishing by programming language.
5.1 RQ1: rationale for selection
To understand the developers’ rationale for the selection of new
dependencies for their projects and whether security aspects affect
their choices, we have studied the developers’ answers simultane-
ously marked by the codes management and looking for info.
Observation 1: Security is considered for selection if it is enforced
by company policy: some companies have a pull of homegrown or
preapproved FOSS libraries, so developers are encouraged or even
sometimes restricted to use them in their projects.
Three of the interviewed developers (#5, #10, #28) directly com-
municated, that they considered security while selecting software
dependencies. However, for them, this was forced by the policy of
their companies: #10 has to use only the dependencies approved by
an internal dependency assessment tool that as well ensures that
12
1
15
9
86
44
the libraries are secure, while #5 checks security history of a library
in case it is planned to be included in the core of their project.
23
8
36
44
The developers #10, #12, and #13 mentioned that their companies
have a pull of preapproved FOSS and homegrown libraries. These
libraries and their dependencies are checked for the presence of
security issues and functionality bugs, and therefore, have a higher
priority to be used in comparison to their FOSS alternatives.
We are trying to use them [preapproved libraries] actively. This
is highly appreciated and sometimes is even forced due to code
reuse [...] (#13)
Discussion.Derr et al. [11] reported that Android developers con-
sider security among the least important criteria for selecting new
dependencies, while several recent papers underline the impact
of company policies on developers’ decisions to consider security.
The early dependency studies [7, 9] reported that company poli-
cies might encourage developers to consider security, but these
policies are not always followed in practice. More recent studies
(e.g., [3, 42]) observed the stronger impact of the company policies
on the developers’ decisions regarding considerations of security,
however, these studies provide limited insights on the impact of
company policies on the dependency selection process. Hence, our
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1518observation clarifies if company security policies also impact the
developers’ decisions regarding software dependencies.
Observation 2: Developers mostly rely on community support of
a library: if a vulnerability or a bug is discovered in a well-supported
library, the fix appears quickly, it is easy to adopt, and it does not
break the dependent library.
The other interviewed developers instead relied on community
support of considered libraries, as the community can be leveraged
for troubleshooting both functionality and security issues: in case
of a vulnerability is discovered in a well-supported library it will
be quickly fixed, and the security fix is usually easy to adopt as it
does not break the dependent project.
I maybe do a quick google and select the thing that works
best for a lot of people[...] if there’re bugs, it’s going to
be easier to work [them] out just by using, let’s say, the
canonical package [and asking the community for support.] (#15)
Discussion.The previous studies of Android developers [11, 21, 42]
reported that developers lack community support and a central
package manager. We fill the gap by studying the ecosystem of
developers working in the context of established central package
managers (Maven, NPM, PyPI). Previous papers [7, 16] suggested
that developers prefer libraries that are popular and well-supported
to include into their projects as they are more reliable from the
functionality perspective. Hence, we add to these observations by
providing evidence that developers perceive community support to
be a ‘guarantee’ for a library to be secure.
Observation 3: Dependency selection is often assigned to a skilled
developer or a software architect.
The task of selection of new dependencies is often assigned to
software architects (#10, #14, and #17) or to “someone who has
experience” (#12):
The most difficult case is to decide which dependencies should
be used, how dependencies should be used, or in general design
the structure of a project. That is the reason why the task of
designing the structure of software is assigned to the software
architect: because they have a lot of experience. They have to
check the project before developers actually work. (#17)
Discussion.Pano et al. [32] reported that a combination of devel-
opers, customers, team, and team leader often leads to the selection
of a development technology/framework. In this perspective, we
clarify that the dependency selection (i.e., specific libraries to be
used within a preselected framework) in big SMEs and LEs are often
assigned to a skilled developer or a software architect.
Observation 4: For dependency selection, developers mainly focus
on functionality support of a library, rather than its security.
Interviewed developers mentioned functionality aspects twice
more often rather than security while selecting new software de-
pendencies for their projects: 27 co-occurrences of functionality
and selection of new dependencies codes in the interviews of 12 de-
velopers in comparison to 11 co-occurences of security and selection
of new dependencies codes in the interviews of 7 developers.
Observation 5: For dependency selection, developers refer to high-
level information that demonstrates community support of a library,
rather than low-level details of a library source code.
When we asked questions about the selection of new depen-
dencies, developers often reported that they rely on third-party
resources to get additional information about new dependencies:
22 out of 25 developers (everybody, except #2, #3, and #20) shared
additional sources of information that they refer to before including
a new dependency into their projects.
14 out of 25 developers (#1, #4, #5, #6, #8, #9, #13, #15, #17, #19,
#22, #23, #24, and #25) named Github.com as the primary informa-
tion source since Github allows them to both understand whether
there exists a strong community behind a particular library, and, if
necessary, have additional details about library code. As for high
level information, the interviewees may refer to the number of
stars (#1, #4, #6, #9, #22, and #23), project contributors (#4, #15, and
#23), and library users (#4, #5, #9, #15, #22, and #25). Additionally,
developers were interested in the code style of a project (#5, #8, #9,
and #22), commit frequency (#4, #5, #8, #9, #17, #23, and #24), as
well as the number of issues resolved (#5, #9, and #17), still open
(#17), and how quickly an open issue is fixed (#4, #5, and #17).
If a library has thousands of issues that are open, then you
need to be careful. [Once] integrated, you may experience the
same problems. (#9)
Additional sources of information mentioned by developers were
Google (#4, #6, #15, #16, and #25), dependency repositories, like
Maven Central (#4, #12, #17, and #19), Node.js, or PyPI (#9, #24),
and StackOverflow (#22). The developers referred to these sources
to find the most popular dependencies that solve particular tasks.
According to the most referred sources and types of information,
the interviewed developers pay little attention to security aspects
(as unpalatable as this observation might be) and instead look for
excellent community support of the library: if a library features
quick security fixes, but fixes of its functionality issues linger, such
a library will likely not be selected.
Discussion.We complement the existing observations (e.g., [7, 9,