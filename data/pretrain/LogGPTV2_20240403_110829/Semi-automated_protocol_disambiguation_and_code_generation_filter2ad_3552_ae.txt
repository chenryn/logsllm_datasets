+ State/Session Mngmt.
Comm. Patterns
Architecture
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
Table 9: Conceptual components in RFCs. sage supports
components marked with ♦ (fully) and + (partially).
forms and measure how many LFs the check can reduce. The
graphs show the mean and standard deviation of this number
across sentences, and the number of sentences to which a
check applies. For ICMP, as before, type and predicate order-
ing checks reduced LFs for the most number of sentences,
but argument ordering reduced the most logical forms. For
IGMP (omitted for brevity), the distributivity checks were
also effective, reducing one LF every 2 sentences.
Importance of Noun Phrase Labeling. sage requires
careful labeling of noun-phrases using SpaCy based on
a domain-specific dictionary (§3). This is an important
step that can significantly reduce the number of LFs for
a sentence. To understand why, consider the example in
Table 7, which shows two different noun-phrase labels,
which differ in the way sage labels the fragment “echo
reply message”. When the entire fragment is not labeled as a
single noun phrase, CCG outputs many more logical forms,
making it harder to disambiguate the sentence. In the limit,
when sage does not use careful noun phrase labeling, CCG
is unable to parse some sentences at all (resulting in 0 LFs).
Table 8 quantifies the importance of these components. Re-
moving the domain-specific dictionary increases the number
of logical forms (before winnowing) for 17 of the 87 sen-
tences in the ICMP RFC. Completely removing noun-phrase
labeling using SpaCy has more serious consequences: 54 sen-
tences result in 0 LF. Eight other sentences result in fewer
LFs, but these reduce to zero after winnowing.
7 SAGE EXTENSIONS
While sage takes a big step toward automated spec pro-
cessing, much work (likely several papers worth!) remains.
Specification components. To understand this gap, we
have manually inspected several protocol specifications
and categorized components of specifications into two cate-
gories: syntactic and conceptual. Conceptual components
(Table 9) describe protocol structure and behavior: these
TCP
UDP
ICMP
NTP
OSPF2
BGP4
RTP
BFD
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
IPv4
♦ Header Diagram x
x
x
x
x
Seq./Comm. Diagram x
♦ Listing
Table
Algorithm Description
Other Figures
x
x
x
x
x
x
x
x
x
x
State Machine Diagram
x
Table 10: Syntactic components in RFCs. sage supports
parsing the syntax of those marked with ♦ (fully) and +
(partially).
sentence
code
The timeout procedure is called in client mode and
symmetric mode when the peer timer reaches the value
of the timer threshold variable.
if (peer.timer >= peer.threshold) {
if (symmetric_mode || client_mode) {
timeout_procedure();
}
}
Table 11: NTP peer variable sentence and resulting code.
include header field semantic descriptions, specification of
sender and receiver behavior, who should communicate
with whom, how sessions should be managed, and how
protocol
implementations should be architected. Most
popular standards have many, if not all, of these elements.
sage supports parsing of 3 of the 6 elements in the table,
for ICMP and parts of NTP. Our results (§6.2) show that
extending these elements to other protocols will require
marginal extensions at each step. However, much work
remains to achieve complete generality, of which state and
session management is a significant piece.
sage is already able to parse state management. As an ex-
ample, the NTP RFC has complex sentences on maintaining
peer and system variables, to decide when each procedure
should be called and when variables should be updated. One
example sentence, shown in Table 11, concerns when to
trigger timeout. sage is able to parse the sentence into an
LF and turn it into a code snippet. However, NTP requires
more complex co-reference resolution, as other protocols
may too [26, 30]: in NTP, context for state management is
spread throughout the RFC and sage will need to associate
these conceptual references. For instance, the word “and”
in the example (Table 11) could be equivalent to a logical
AND or a logical OR operator depending on whether sym-
metric mode and client mode are mutually exclusive or not.
A separate section clarifies that the correct semantics is OR.
RFC authors augment conceptual text with syntactic com-
ponents (Table 10). These include forms that provide better
understanding of a given idea (e.g., header diagrams, tables,
state machine descriptions, communication diagrams, and
algorithm descriptions). sage includes support for two of
11
these elements; adding support for others is not conceptu-
ally difficult, but may require significant programming effort.
While much work remains, two significant protocols may be
within reach with the addition of complex state management
and state machine diagrams: TCP and BGP.
Toward full automation? Ideally it would be possible to
fully automate translation of natural-language specifications
to code. Alas, we believe that the inherent complexity of
natural language combined with the inherent logical com-
plexities of protocols and programming languages make it
unlikely that this will ever be fully realizable. However, we
believe that it is possible to come close to this, and have
aimed to build sage as a first big step in this direction.
The key challenge would be to minimize the manual labor
required to assist in disambiguation. Our winnowing already
does this (§4.2), but future work will need to explore good
user interfaces for human input when sage generates 0 LFs
or more than 1 LF (Figure 4). sage will also need to develop
ways for humans to specify cross-references (references to
other protocols in a spec), and to write unit tests.
8 RELATED WORK
Protocol Languages / Formal Specification Tech-
niques. Numerous protocol languages have been proposed
over the years. In the ’80s, Estelle [13] and LOTOS [11]
provided formal descriptions for OSI protocol suites. Al-
though these formal techniques can specify precise protocol
behavior, it is hard for people to understand and thus use
for specification or implementation. Estelle used finite state
machine specs to depict how protocols communicate in
parallel, passing on complexity, unreadability, and rigidity to
followup work [12, 67, 77]. Other research such as RTAG [3],
x-kernel [29], Morpheus [1], Prolac [39], Network Packet
Representation [52], and NCT [51] gradually improved read-
ability, structure, and performance of protocols, spanning
specification, testing, and implementation. However, we
find and the networking community has found through
experience, that English-language specifications are more
readable than such protocol languages.
Protocol Analysis. Past research [9–11] developed tech-
niques to reason about protocol behaviors in an effort to
minimize bugs. Such techniques used finite state machines,
higher-order logic, or domain-specific languages to verify
protocols. Another thread of work [37, 38, 44] explored the
use of explicit-state model-checkers to find bugs in protocol
implementations. This thread also inspired work (e.g., [57])
on discovering non-interoperabilities in protocol implemen-
tations. While our aims are similar, our focus is end-to-end,
from specification to implementation, and on identifying
where specification ambiguity leads to bugs.
NLP for Log Mining and Parsing. Log mining and parsing
are techniques that leverage log files to discover and clas-
sify different system events (e.g., ’information’, ’warning’,
and ’error’). Past studies have explored Principal Compo-
nent Analysis [81], rule-based analysis [24], statistic analysis
[55, 76], and ML-based methods [69] to solve log analysis
problems. Recent work [5, 8] has applied NLP to extract
semantic meanings from log files for event categorization.
sage is complementary to this line of work.
Program Synthesis. To automatically generate code, prior
work has explored program synthesis. Reactive synthesis
[59, 60] relies on interaction with users to read input for
generating output programs. Inductive synthesis [2] recur-
sively learns logic or functions with incomplete specifica-
tions. Proof-based synthesis (e.g., [70]) takes a correct-by-
construction approach to develop inductive proofs to extract
programs. Type-based synthesis [23, 56] takes advantage of
the types provided in specifications to refine output. In net-
working, program synthesis techniques can automate (e.g.,
[49, 50]) updating of network configurations, and generating
programmable switch code [25]. It may be possible to use
program synthesis in sage to generate protocol fragments.
Semantic Parsing and Code Generation. Semantic pars-
ing is a fundamental task in NLP that aims to transform
unstructured text into structured LFs for subsequent execu-
tion [7]. For example, to answer the question “Which team
does Frank Hoffman play for?”, a semantic parser gener-
ates a structured query “SELECT TEAM from table where
PLAYER=Frank Hoffman” with SQL Standard Grammar [17].
A SQL interpreter can execute this query on a database and
give the correct answer [33]. Apart from the application
to question answering, semantic parsing has also been suc-
cessful in navigating robots [74], understanding instructions
[14], and playing language games [78]. Research in gener-
ating code from natural language goes beyond LFs, to out-
put concrete implementations in high-level general-purpose
programming languages [47]. This problem is usually for-
mulated as syntax-constrained sequence generation [45, 84].
The two topics are closely related to our work since the pro-
cess of implementing network protocols from RFCs requires
the ability to understand and execute instructions.
Pre-trained Language Models. Recently, high-capacity
pre-trained language models [19, 42, 58, 82] have dramati-
cally improved NLP in question answering, natural language
inference, text classification, etc. The general approach is
to first train a model on a huge corpus with unsupervised
learning (i.e., pre-training), then re-use these weights to
initialize a task-specific model that is later trained with
12
labeled data (i.e.,, fine-tuning). In the context of sage, such
pre-trained models advance improve semantic parsing
[86, 87]. Recent work [22] also attempts to pre-train on
programming and natural languages simultaneously, and
achieves state-of-the-art performance in code search and
code documentation generation. However, direct code
generation using pre-trained language models is an open
research area and requires massive datasets; the best model
for a related problem, natural language generation, GPT [63],
requires 8 M web pages for training.
9 CONCLUSIONS
This paper describes sage, which introduces semi-automated
protocol processing across multiple protocol specifications.
sage includes domain-specific extensions to semantic pars-
ing and automated discovery of ambiguities and enables
disambiguation; sage can convert these specs to code. Fu-
ture work can extend sage to parse more spec elements, and
devise better methods to involve humans in the loop to de-
tect and fix ambiguities and guide the search for bugs.
(This work does not raise any ethical issues.)
REFERENCES
[1] Abbott, M. B., and Peterson, L. L. A language-based approach to
protocol implementation. IEEE/ACM transactions on networking (1993).
[2] Alur, R., Bodik, R., Dallal, E., Fisman, D., Garg, P., Juniwal, G.,
Kress-Gazit, H., Madusudan, P., Martin, M., Raghothman, M.,
et al. Syntax-guided synthesis. dependable software systems engi-
neering. NATO Science for Peace and Security Series (2014). http://sygus.
seas. upenn. edu/files/sygus_extended. pdf (2014).
[3] Anderson, D. P. Automated protocol implementation with rtag. IEEE
Transactions on Software Engineering 14, 3 (1988), 291–300.
[4] Artzi, Y., FitzGerald, N., and Zettlemoyer, L. S. Semantic parsing
with combinatory categorial grammars. ACL (Tutorial Abstracts) 3
(2013).
[5] Aussel, N., Petetin, Y., and Chabridon, S. Improving performances
of log mining for anomaly prediction through nlp-based log parsing.
In 2018 IEEE 26th International Symposium on Modeling, Analysis, and
Simulation of Computer and Telecommunication Systems (MASCOTS)
(2018), IEEE, pp. 237–243.