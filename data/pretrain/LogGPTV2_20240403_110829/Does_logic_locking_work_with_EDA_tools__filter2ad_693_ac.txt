S .
(2)
Thus, the PIP can be computed by intersecting the comple-
ments of the split PIs. In reality, a merged PI will not span the
entire U and will contain certain speciﬁed bits. For these bits,
all the split PIs are in consensus. Thus, the speciﬁed bits in
the merged PI will be replicated in the split PIs. For example,
in Fig. 5(a), the inputs d, h, and i appear as 1 in PI1. In the
shaded region of Fig. 5(b), the values of these three inputs are
mostly 1 while the rest are mostly don’t cares.
Determining split PIs. The split PIs may only be a small
subset of all PIs in the PIT of a corrupted circuit. We can
determine the split PIs from a PIT by ﬁnding a subset of PIs
that have the same number of don’t care bits and the inter-
PI distance is zero. From observing thousands of PITs of
benchmark circuits, we ﬁnd that the split PIs tend to have a
large percentage ((cid:21) 50%) of don’t care bits. We refer to PIs
with (cid:21) 50% don’t care bits as sparse PIs. Given a PIT, we
identify the set of SPIs by grouping PIs based on the number
of don’t care bits. For example, PIs 1-6 in Fig. 5(a) are both
(a)
(b)
Figure 5: The PITs of the (a) original circuit and (b) corrupted
circuit. The PIP is 000100110. PI1–PI6 are SPIs.
USENIX Association
30th USENIX Security Symposium    1061
abcdfabcdPI1PI2f1-1-1111--abcdPI1PI2fcp1-1--11-11PIP00010abcd00111111101111000011110abcd001111111011110000111101abcd001111111011110000111101abcd00111111101111000011011split PIs and SPIs. However, not all SPIs are split PIs. We
eliminate false positives by checking the inter-PI distance.
Given a set of split PIs, we can identify the speciﬁed bits by
determining the bits for which all the split PIs are in consensus.
Since the exact computation of consensus between PIs is
computationally expensive, we approximate it with majority
voting, yielding the speciﬁed bits. In Fig. 5(b), majority voting
on the values of the inputs d, g, and h yields their correct value,
1, as listed in Fig. 5(a). These heuristics are implemented in
the ﬁnd_and_parse_split_PIs step of Algorithm 1. The value
of the PIP is determined using Eq. (2).
3.3 SPI Attack Algorithm
cp
cp and FOFF
The SPI attack can recover the PIP by analyzing the PIT
of the corrupted circuit. The ﬁrst step of the algorithm is
extracting the corrupted circuit. This step can be performed
using component-level REing tools [67, 68]. Note that the
CAC techniques also assume that the attacker can extract the
corrupted circuit. From the corrupted circuit, we extract the
PIT using logic-synthesis tools, such as ABC [58, 64, 69]. As
shown in Alg. 1, the SPI attack has two stages, which are
based on the observations in Section 3.1.
Stage 1 attempts to recover a PIP directly from the PIT of the
corrupted circuit. Recall that an unmerged PIP tends to exhibit
itself as a PI with all the bits speciﬁed. The SPI attack can
search for the PIP in both FON
. The correctness of
the extracted PIP is veriﬁed by querying the oracle with the
PIP. The output of the corrupted circuit will not match that of
an oracle for a true PIP. The attack proceeds to Stage 2 if the
true PIP is not recovered.
Stage 2 ﬁnds the set of SPIs by grouping the PIs based on
the number of don’t care bits. It eliminates the false positives
for split PIs by checking if the inter-PI distance is zero. The
heuristics from Section 3.2 help determine the most probable
value for each bit of the PIP. In case CAC techniques are
combined with XOR-based locking, the SPI attack can be
used in conjunction with the SAT attack to recover key bits for
XOR-based locking [9]. Section 4 experimentally validates
the effectiveness of the SPI attack and the heuristics.
Attack on multi-output circuits. Till now, we explained
our algorithm using a single-output circuit. The SPI attack
can break multi-output circuits by reducing them to multiple
single-output circuits, aka logic cones. This is a common tech-
nique used in logic synthesis and logic locking [64, 69–71].
3.4 Improving the Scalability
The SPI attack extracts the PIT from the corrupted circuit,
which is an NP-Hard problem [64]. Over the last four decades,
the logic-synthesis community has developed efﬁcient heuris-
tics for computing PITs for common circuits. We use the
open-source tool ABC [58] to compute the PITs. Using ABC
we can compute the required PITs for all but the three harder
competition circuits within 48 hours. For the large circuits,
ABC either does not ﬁnish PIT computation or terminates
early due to insufﬁcient memory.
To overcome this limitation, we rely on a key insight on
arbitrarily selecting PIPs that allow us to run the SPI attack at
the sub-circuit level. We observe that if a PIP is isolated in the
PIT of the complete circuit, it tends to be isolated in the PITs
of the sub-circuits. When the distance of the PIP from the
other PIs in the PIT of the complete circuit is larger than two,
there is a good chance that the partial PIPs (PIPs at the circuit
level) can have a distance of two from other PIs, especially
if the sub-circuits are for the nodes close to the output of the
complete circuit.
This insight allows us to follow a divide-and-conquer ap-
proach and compute PITs only for the sub-circuits without
computing the PIT for the complete circuit, which lowers
computational effort by several orders of magnitude. We (i)
divide a circuit into several sub-circuits using the depth-ﬁrst
search to ﬁnd gates in the fan-in of a node, (ii) extract the PITs
of sub-circuits, and (iii) launch the SPI attack on sub-circuits
to recover parts of the PIP. When only a subset of PIP bits re-
covered from the sub-circuits or there are multiple candidates
for the PIP, brute-force may be used to determine remaining
bits or prune the incorrect candidates; alternatively, the SAT
attack may also be used [9, 72]. Due to space limitations, we
present the complete algorithm in Appendix A. Following this
new approach, we can break any of the harder competition
circuits within 10 seconds; these circuits have key sizes up
to 195 compared to the largest key size of 80 for the rest of
Algorithm 1: SPI attack
Input: Locked netlist Clock and Oracle O
Output: Correct key Kc
1 LLLCCClock   extract_logic_cones(Clock)
2 for lclock 2 LLLCCClock do
lccp   extract_corrupted_circuit(lclock)
PIT   extract_PIT(lccp)
//——————–Stage 1——————–
PPP111   get_fully_speciﬁed_PI(PIT )
PPPIIIPPPsssveri f ied   verify(PPP111;lccp;O)
if (PPPIIIPPPveri f ied 6= ?) then
return PPPIIIPPPveri f ied
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18 end
19 return ?
end
//——————–Stage 2——————–
PPP222   ﬁnd_and_parse_split_PIs(PIT )
PPPIIIPPPsssveri f ied = verify(PPP222;lccp;O)
if (PPPIIIPPPsssveri f ied 6= ?) then
return PPPIIIPPPsssveri f ied
end
goto line 2 // Process next logic cone
1062    30th USENIX Security Symposium
USENIX Association
the circuits. While the PITs for the complete circuit cannot
be computed in 48 hours, those for the sub-circuits can be
computed within 10 seconds (see Section 4.2).
3.5 Broader Applicability
Breaking all the CAC techniques. The SPI attack operates
on a PIT, which is speciﬁc to a Boolean function and is ag-
nostic to the netlist structure. Consequently, the SPI attack
is independent of the underlying locking technique or the
way the corrupted circuit is generated. Thus, our attack can
break all the CAC techniques, as they only differ on how
the corrupted circuit is generated (see Section 4.3). Also,
our attack has a tremendous advantage over existing attacks,
which are tailored for speciﬁc defense techniques. For in-
stance, SPS attack identiﬁes AND trees and uses it to break
Anti-SAT; [39] thwarts this by altering the netlist. The FALL
attack is speciﬁc to CAChd and cannot circumvent CACrem
because it exploits the heuristics of the former, and the latter
violates that heuristic. However, our SPI attack is agnostic to
the circuit structure, making it widely applicable.
Effectiveness across EDA tools. The implementation-
agnostic nature of our attack gives us two distinct advantages.
First, our attack is independent of the designer’s tools and
their objectives, such as minimizing PPA costs, etc. Thus,
our attack is independent of the use-case scenario of the IC.
Second, our attack does not depend on the implementation of
the function as an ASIC or using FPGA. In Section 4.4, we
demonstrate that the SPI attack can break all the CAC tech-
niques synthesized using various commercial and academic
logic-synthesis tools, and a combination thereof.
4 SPI Attack Results
4.1 Experimental Setup
Platform and EDA tools. We perform our attack experi-
ments on a 32-core Intel Xeon processor at 2.6 GHz with
512 GB RAM. We used the ABC logic-synthesis tool to
extract PITs [58] and Synopsys Design Compiler as the logic-
synthesis tool [54] unless otherwise speciﬁed. Our experi-
ments use the NanGate FreePDK45 Open Cell Library for
ASIC implementations [73] and Xilinx Spartan-3 FPGA for
the FPGA implementation [74]. The proposed approach is
applicable to other technology libraries and FPGA platforms.
Benchmark circuits. We show the effectiveness of the SPI
attack primarily against CACrem since this technique remains
unbroken in the competition [40]. We also run our experi-
ments on another unbroken technique, CACﬂex. The organiz-
ers of the logic-locking competition provided six CACrem
circuits and their oracles. This competition uses the ITC’99
benchmark suite [75]. As shown in Table 3, the key size is 16
for four circuits8 and 80 for two circuits. Upon reporting our
attack results to the organizers, they provided with three more
circuits locked with larger key sizes, i.e., 102, 95, and 195 for
the b17L9. We also use the controller circuits of the ARM
Cortex-M3 processor [59] and the GPS module with 213K
gates from the Common Evaluation Platform for evaluating
hardware security schemes [60].
To demonstrate that the SPI attack can break all the CAC
techniques, we generated locked circuits for TTLock, CAChd,
CACﬂex [10, 27]. We locked only the cone with the largest
available input size. Only one PIP is used to lock each circuit,
as this is the case for competition circuits.
4.2 Breaking CACrem
Success rate. Table 4 presents the attack results on the com-
petition circuits [51]. It shows that the SPI attack can break
all the circuits. We attribute this success to the exploitable
changes made to the PITs by existing logic-synthesis algo-
rithms upon adding/removing PIPs arbitrarily.
Execution time. Since we deploy the divide-and-conquer
approach mentioned in Section 3.4 to break the larger compe-
tition circuits, we discuss their results separately in the next
paragraph. This paragraph discusses results for all but the
competition-large circuits. Table 4 shows that the SPI attack
takes less than a second to break any circuit. The execution
time remains small since the number of PIs in the PITs of
the competition circuits is relatively small. The largest PIT
is for the circuit b15 with only 171 PIs. Another reason for
the smaller execution time is that the SPI attack at ﬁrst targets
smaller logic cones and can terminate successfully as soon as
all the bits of the PIP are determined; the larger and computa-
tionally intensive cones need not be processed. The execution
time for b15 is the highest since few of its processed logic
cones have at least 105 or higher inputs.
Competition-large circuits. Since ABC could not extract
PITs for the competition-large circuits within the time limit,
we break the circuits using the divide-and-conquer approach.
On attacking only the sub-circuits, the SPI attack exits within
10 seconds. For all large circuits, we identify at least one
sub-circuit containing all the primary inputs that feed the
correcting circuit. By excluding the parts of the circuits not
involved in logic locking, the PIT computation becomes faster.
For each large circuit, the divide-and-conquer SPI attack de-
termines a single candidate PIP, the true PIP. For the ease
of discussion, consider that the PIT for each large circuit is
extracted and the SPI attack completes in exactly 48 hours.
With this conservative assumption, the divide-and-conquer
SPI attack runs (cid:21)17000X faster than the basic SPI attack. The
precise speed-up depends on the circuit being processed.
8While we understand the limitations of using small key sizes to evaluate
attacks, we still include them in the results as they are part of the competition.
9The original b17 circuit is the same in both instances. The small and
large versions of b17 are locked with 80 bits and 102 bits, respectively.
USENIX Association
30th USENIX Security Symposium    1063
Table 3: The statistics of the benchmark circuits. The parameters of the competition circuits are reported as provided by the
organizers. For ARM Cortex-M3 and GPS circuits, we lock the logic cone with the largest key size.
Circuit
# inputs
# outputs
# gates
# protected cones
Key size
b10
28
17
172
9
16
b11
38
31
726
19
16
Competition-small
b15
485
449
11577
166
80
b13
63
53
289
16
16
b12
126
119
944
21
16
b17
1452
1445
37479
42
80
Competition-large
b22
767
757
29162
b20
522
512
19682
b17L
1452
1445
37479
1
102
1
95
1
195
ARM Cortex-M3
ARMc1 ARMc2 ARMc3 ARMc4
34
125
1362
1
33
509
63
2188
1
19
213
66
657
1
69
232
43
491
1
26
CEP
GPS
9707
9731
213125
1
63
Table 4: Success rate and execution time (s) of different attacks on CACrem circuits from the logic locking competition [51]. “TO”
denotes a timeout of 48 hours.
Circuit
Attack
SAT [9]
AppSAT [32]
ATR [35]
SPS [47]
FALL [36]
SPI
b10
X
(cid:2)
(cid:2)
(cid:2)
(cid:2)
X
Attack success
Competition-small
b11
X
(cid:2)
(cid:2)
(cid:2)
(cid:2)
X
b12
X