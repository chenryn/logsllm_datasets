3.第二个汇编程序
3
下一页
下二
---
## Page 278
3.第二个汇编程序 请点评
上一页
例18.2.求一组数的最大值的汇编程序
%eax
data
##
##
movl
#
#
oop_exit:
jmp start_loop
lew
jle
0
incl
movl
movl
.section .text
.section .data
globl
to terminate
The following memory locations are used:
%ebx is the status code for the
eax
%ebx
%edi 
 start_loop
 is
data_ items(,%edi,4),
%eax，
P
 Holds the index of the data item being examined
Current
Largest 
%eax
 %edi
 set of data items.
%ebx
%ebx
%eax
 the data
contains the item data. A O is used
data
 data 
第18章x86汇编程序基础
全国嵌入式人才培训基地
3.第二个汇编程序
item
 item found
#
# load next value
##
##
##
# since this is the first item,
 one isn't bigger
the biggest
 jump 
max1
 jump to loop beginning if the
 compare values
move
check
 is
beax
the
to
num
the
_exit()
 loop beginning
_exit system call
) syscall
as the largest
28
---
## Page 279
ebx的初始值也是数组的第0个元素。
这条指令把数组的第0个元素传送到eax寄存器中。
初始化edi，指向数组的第0个元素。
这个程序在一组数中找到一个最大的数，并把它作为程序的退出状态。这组数在.data段给出：
汇编、链接、运行:
4，
在这个循环中：
.long指示声明一组数，每个数占32位，
写在指令中就是data_items（,%edi,4），这种地址表示方式在下一节还会详细解释。
·éax寄存器保存当前要比较的数，每次更新edi之后，就把下一个数读到eax中。
·ebx寄存器保存到目前为止找到的最大值，如果发现有更大的数就更新ebx的值。
·edi寄存器保存数组中的当前位置，
·.byte,
数。
和C语言不同，这样声明的字符串末尾是没有·o字符的，如果需要以·结尾可以声明
.ascii,
SSS
 movl %eax, %ebx
movl data_items(,%edi,4)， %eax
.10ng 3,67,34,222,45,75,54,34,44,33,22,11,66,0
S
echo $?
. /max
，也是声明-
一组数，每个数占8位
下面我们进入一个循环，循环的开头定义一个符
一个符号loop_exit。
，相当于C语言中的数组。这个数组开头定义了一个符
，每次比较完一个数就把edi的值加1，指向数组中的下一个
声明11个数，
data_items 是数组的首地址，edi的值是数组的
，取值为相应字符的ASCI码。注意,
因为它只在这个汇编程序内部使
279
---
## Page 280
equal"。
变，跳转到循环开头比较下-
把当前数组元素eax和目前为止找到的最大值ebx做比较，
将edi的值加1，把数组中的下一个数传送到eax寄存器中。
equal"，如果参与比较的两数相等则跳转。
2.x86的寄存器
转指令是配合使用的，
的ZF位，ZF位为1则发生跳转，ZF位为0则不跳转，
减
比较eax的值是不是0，
但计算结果并不保存，只是根据计算结果改变eflags寄存器中的标志位。
movl data_items(,%edi,4), %eax
incl %edi
je loop_exit 
 %ebx
 %eax
，如果是0就说明到达数组末尾了，
前者改变标志位，
、否则继续执行下一条指令。jle表示"jump if less than or 
全国嵌入式人才培训基地
，后者根据标志位决定是否跳转。je可以理解成"jump if
起始页
上一级
一个条件跳转指令，
 继续执行下-
，如果前者小于等于后者，则最大值没有
一条指令。可见比较指令和条件跳
它检查eflags中 
。如果两个操作数相
4.寻址方式
8
下一页
---
## Page 281
寄存器。在有些寻址方式中会省略这4项中的某些项，相当于这些项是0。
FINAL ADDRESS = ADDRESS_OR_OFFSET + BASE_OR_OFFSET + MULTIPLIER * INDEX
ADDRESS_OR_OFFSET(%BASE_OR_OFFSET,%INDEX,MULTIPLIER)
4.寻址方式 请点评
3.第二个汇编程序
其中ADDRESS_OR_OFFSET和MULTIPLIER必须是常数，
它所表示的地址可以这样计算出来：
组基地址、元素长度和下标三个量来表示,
通过上一节的例子我们了解到，
上一页
一页
·立即数寻址（lmmediate Mode）
·间接寻址（Indirect Addressing Mode）（
·变址寻址（Indexed Addressing Mode）
·直接寻址（Direct Addressing Mode）。
寄存器寻址（Register Addressing Mode）。
eax中的$12，这其实跟寻址没什么关系，但也算作一种寻址方式。
基址寻址（Base Pointer Addressing Mode）。
这种寻址方式，用于访问数组元素比较方便。
ADDRESS,
存器的地址，
器用助记符来表示，
体内的偏移量是4字节，要把这个成员读上来就可以用这条指令。
问结构体成员比较方便，
用ADDRESS_OR_OFFSET和BASE_OR_OFFSET寻址,
（%eax）,
ebx，把eax寄存器的值看作地址，把内存中这个地址处的32位数传送到ebx寄存
eax把ADDRESS地址处的32位数传送到eax寄存器。
，但是和内存地址不在一个地址空间。
，这跟内存寻址没什么关系，但也算作一种寻址方式。在汇编程序中寄存
 访问内存时在指令中可以用多种方式表示内存地址,
第18章x86汇编程序基础
全国嵌入式人才培训基地
全国嵌入式人才培训基地
。就是指令中有一个操作数是立即数，
增加了寻址的灵活性。本节介绍x86常用的几种寻址方
4.寻址方式
。只使用ADDRESS_OR_OFFSET寻址，例如movl
起始页
上一级
只使用BASE_OR_OFFSET寻址,
。就是指令中有一个操作数是寄存器，
只使
，BASE_OR_OFFSET和INDEX必须是
，例如movl $12,
例如movl
一个成员在结构
，比如可以用数
5.ELF文件
，例如movl
用于访
下一页
下一
贝
---
## Page 282
ELF格式提供了两种不同的视角，链接器把ELF文件看成是Section的集合，而加载器把ELF文件看
ELF文件格式是一个开放标准，各种UNIX系统的可执行文件都采用ELF格式，它有三种不同的类
5.ELF文件 请点评
成是Segment的集合。如下图所示。
论目标文件和可执行文件的格式。现在详细解释一下这个程序的汇编、链接、运行过程：
共享库留到第4节“共享库"再详细介绍，本节我们以例18.2“求一组数的最大值的汇编程序"为例讨
4．最后加载器（Loader）根据可执行文件中的Segment信息加载运行这个程序。
1．写一个汇编程序保存成文本文件max.s。
上一页
·可重定位的目标文件（Relocatable，或者Object File)
·共享库（Shared Object，或者Shared Library)
可执行文件（Executable）
些Section（比如符号表）。
图18.1.ELF文件
第18章x86汇编程序基础
全国嵌入式人才培训基地
5.ELF文件
目标文件由若干个Section组成，我们在汇
，生成可执行文件maxo
28
下一页
---
## Page 283
5.1．目标文件请点评
析
下面用readelf工具读出目标文件max.o的ELF Header和Section Header Table，然后我们逐段分
行
目标文件需要链接器做进一步处理，
些Section只对链接器有意义，在运行时用不到，也不需要加载到内存，那么就不属于任
来看ELF文件，开头是ELF Header，
述信息，
Table在链接过程中用不到，所以是可有可无的，
左边是从链接器的视角来看ELF文件，
尾，其位置由ELF Header指出,
．Section Header Table在加载过程中用不到，
所以一
sections
ELF
S
，通过Section Header Table可以找到每个Section在文件中的位置。右边是从加载器的视角
sections
describes
Flags:
Start
Start
Entry
Version:
ABI Version:
Data:
Magic:
 readelf -a max.o
一定有Program Header Table；而共享库既要加载运行，又要在加载时做动态链接，所以
 Header:
ignored)
(optional
sections
linkable
 program headers:
section
 program headers:
7f 45 4c46 01 01 01 00 00 00 00 00 00 00 0000
?
section header
program header
一
ELFheader
table
table
 headers:
上图这么画只是为了清晰。
所以一定有Section Header Table；可执行文件需要加载运
一
Program Header Table中保存了所有Segment的描述信
开头的ELF Header描述了体系结构和操作系统等基本信息,
，这些Section加载到内存时具有相同的访问权限。
←
ignored)
(optional,
segments
executable
describes
segments
Section Header Table中保存了所有Section的描
segments
所以是可有可无的。从上图可以看
REL (Relocatable 
0
2
0
.0
0
200 (bytes into fiie)
(bytes)
8
(bytes)
(current)
 complement,
( - System V
9808
 little endian
 file)
 Program Header 
年
有
28
---
## Page 284
描绘出整个目标文件的布局。
头第一个字节的地址是0，然后每个字节占一个地址。
ELF Header中描述了操作系统是UNIX,
序中的地址都是虚拟地址）
的Section,
节
有
一下程序，
人Section Header中读出各Section的描述信息，
8个Section Header ,
，到文件地址0x207结束。这个目标文件没有Program Header。文件地址是这样定义的：文件开
0x34
起始文件地址
0x98
0x60
表18.1.目标文件的布局
0
There are no
There are no section groups in this file.
specific)
Key
9
Lk
[Nr]
·
工
 Section header string table index:
Size of section headers:
Number of program headers:
.data段定义了14个4字节的整数，
，而其它Section是汇编器自动添加的。
(info),
(write),.
to
7]
6
5
3
2
L
01
 Flags:
.strtab
 A1
 Name
4
.symtab
.shstrtab
.bss
.data
.rel.text
.text
0
bss（此段为空）
4
.shstrtab
.data
.text
ELF Header
 program headers in this file.
工
 Section或Header
 processing required) ó'(OS
从文件地址200（0xc8）开始，每个SectionHeader占40字节，
(iink order),
(alloc),
 加载地址要在链接时填写，
 headers:
 X (execute),
STRTAB
SYMTAB
STRTAB
NOBITS
PROGBITS
REL
PROGBITS
NULL
Type
体系结构是80386。Section Header Table中
(group),
一共是56个字节，
：其中.text和.data是我们在汇编程序中声明
。Addr是这些段加载到内存中的地址（我们讲过和
 M (merge);
8
40 (bytes)
C
，现在空缺，
00000000 000288
00000○○0
0000000000009800003000
00000000
0000000000000000000000
Addr
(unknown)
00000000
00000000
00000000
也就是0x38。根据以上信息可以
S (strings)
。000208 00008010
0000000０86000０
000060 000038
0002b0