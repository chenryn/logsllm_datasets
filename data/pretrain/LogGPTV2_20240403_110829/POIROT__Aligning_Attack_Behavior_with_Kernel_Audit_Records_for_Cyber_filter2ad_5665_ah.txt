cessed: 2019-04-23.
[29] Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini, Taesoo Kim,
Alessandro Orso, and Wenke Lee. 2017. Rain: Refinable Attack Investigation
with On-demand Inter-Process Information Flow Tracking. In Proceedings of the
2017 ACM SIGSAC Conference on Computer and Communications Security. ACM,
377–390.
[30] Yang Ji, Sangho Lee, Mattia Fazzini, Joey Allen, Evan Downing, Taesoo Kim,
Alessandro Orso, and Wenke Lee. 2018. Enabling refinable cross-host attack
investigation with efficient data flow tagging and tracking. In 27th {USENIX}
Security Symposium ({USENIX} Security 18). 1705–1722.
[31] Angelos D. Keromytis. 2018. Transparent Computing Engagement 3 Data Release.
https://github.com/darpa-i2o/Transparent-Computing.
[32] Arijit Khan, Yinghui Wu, Charu C Aggarwal, and Xifeng Yan. 2013. Nema: Fast
graph search with label similarity. In Proceedings of the VLDB Endowment, Vol. 6.
VLDB Endowment, 181–192.
[33] Samuel T King and Peter M Chen. 2003. Backtracking intrusions. In SOSP. ACM.
[34] Samuel T. King and Peter M. Chen. 2005. Backtracking Intrusions. ACM Transac-
tions on Computer Systems (2005).
[35] Samuel T King, Zhuoqing Morley Mao, Dominic G Lucchetti, and Peter M Chen.
2005. Enriching Intrusion Alerts Through Multi-Host Causality.. In NDSS.
[36] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel, Engin Kirda,
Xiao-yong Zhou, and XiaoFeng Wang. 2009. Effective and Efficient Malware
Detection at the End Host.. In USENIX security symposium, Vol. 4. 351–366.
[37] Yonghwi Kwon, Dohyeong Kim, William Nick Sumner, Kyungtae Kim, Brendan
Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2016. Ldx: Causality inference
by lightweight dual execution. ACM SIGOPS Operating Systems Review 50, 2
(2016), 503–515.
[38] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee, Wen-Chuan Lee,
Shiqing Ma, Xiangyu Zhang, Dongyan Xu, Somesh Jha, Gabriela Ciocarlie, et al.
2018. MCI: Modeling-based Causality Inference in Audit Logging for Attack Inves-
tigation. In Proc. of the 25th Network and Distributed System Security Symposium
(NDSS’18).
[39] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2013. High Accuracy Attack
Provenance via Binary-based Execution Partition.. In NDSS.
[40] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2013. LogGC: garbage col-
lecting audit log. In Proceedings of the 2013 ACM SIGSAC conference on Computer
& communications security. ACM, 1005–1016.
[41] Xiaojing Liao, Kan Yuan, XiaoFeng Wang, Zhou Li, Luyi Xing, and Raheem
Beyah. 2016. Acing the IOC game: Toward automatic discovery and analysis of
open-source cyber threat intelligence. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security. ACM, 755–766.
[42] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li, Zhenyu Wu, Jungh-
wan Rhee, and Prateek Mittal. 2018. Towards a Timely Causality Analysis for
Enterprise Security. In Network and Distributed Systems Security Symposium.
[43] Sadegh M. Milajerdi, Birhanu Eshete, Rigel Gjomemo, and V.N. Venkatakrish-
nan. 2018. ProPatrol: Attack Investigation via Extracted High-Level Tasks. In
International Conference on Information Systems Security. Springer.
[44] Shiqing Ma, Kyu Hyung Lee, Chung Hwan Kim, Junghwan Rhee, Xiangyu Zhang,
and Dongyan Xu. 2015. Accurate, Low Cost and Instrumentation-Free Security
Audit Logging for Windows. In Proceedings of the 31st Annual Computer Security
Applications Conference (ACSAC 2015). ACM, New York, NY, USA, 401–410. https:
//doi.org/10.1145/2818000.2818039
[45] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu Zhang, and Dongyan
Xu. 2017. MPI: Multiple Perspective Attack Investigation with Semantics Aware
Execution Partitioning. In 26th {USENIX} Security Symposium ({USENIX} Secu-
rity 17). 1111–1128.
[46] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. 2016. ProTracer: Towards Practical
Provenance Tracing by Alternating Between Logging and Tainting. In NDSS.
[47] Sadegh M. Milajerdi, Rigel Gjomemo, Birhanu Eshete, R. Sekar, and VN.
Venkatakrishnan. 2019. HOLMES: Real-time APT Detection through Corre-
lation of Suspicious Information Flows. In Proceedings of the IEEE Symposium on
Security and Privacy. IEEE.
[48] MISP. 2019. MISP - Open Source Threat Intelligence Platform & Open Standards
For Threat Information Sharing. https://www.misp-project.org/. Accessed:
2019-04-23.
[49] Mitre. 2018. Structured Threat Information eXpression (STIX). https://stixproject.
[50] FireEye: Ned Moran and Nart Villeneuve. 2013.
Dog: Zero-Day
(CVE-2013-3893) Attack Against
Operation Deputy-
Japanese Targets.
github.io.
https://www.fireeye.com/blog/threat-research/2013/09/operation-deputydog-
zero-day-cve-2013-3893-attack-against-japanese-targets.html.
Accessed:
2019-04-19.
[51] Alina Oprea, Zhou Li, Ting-Fang Yen, Sang H Chin, and Sumayah Alrwais. 2015.
Detection of early-stage enterprise infection by mining large-scale log data. In
Dependable Systems and Networks (DSN), 2015 45th Annual IEEE/IFIP International
Conference on. IEEE, 45–56.
[52] Chetan Parampalli, R Sekar, and Rob Johnson. 2008. A practical mimicry attack
against powerful system-call monitors. In Information, computer and communica-
tions security. ACM.
[53] Thomas Pasquier, Xueyuan Han, Thomas Moyer, Adam Bates, Olivier Hermant,
David Eyers, Jean Bacon, and Margo Seltzer. 2018. Runtime Analysis of Whole-
System Provenance. In Proceedings of the 2018 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’18). ACM, New York, NY, USA, 1601–
1616. https://doi.org/10.1145/3243734.3243776
[54] Kexin Pei, Zhongshu Gu, Brendan Saltaformaggio, Shiqing Ma, Fei Wang, Zhiwei
Zhang, Luo Si, Xiangyu Zhang, and Dongyan Xu. 2016. Hercule: Attack story
reconstruction via community discovery on correlated log graph. In Proceedings
of the 32Nd Annual Conference on Computer Security Applications. ACM, 583–595.
[55] Robert Pienta, Acar Tamersoy, Hanghang Tong, and Duen Horng Chau. 2014.
Mage: Matching approximate patterns in richly-attributed graphs. In 2014 IEEE
International Conference on Big Data (Big Data). IEEE, 585–590.
[56] Devin J Pohly, Stephen McLaughlin, Patrick McDaniel, and Kevin Butler. 2012.
Hi-Fi: collecting high-fidelity whole-system provenance. In ACSAC. ACM.
[57] Xiaokui Shu, Frederico Araujo, Douglas L. Schales, Marc Ph. Stoecklin, Jiyong
Jang, Heqing Huang, and Josyula R. Rao. 2018. Threat Intelligence Computing. In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’18). ACM, New York, NY, USA, 1883–1898. https://doi.org/10.
1145/3243734.3243829
[58] General Dynamics Fidelis Cybersecurity Solutions. 2013. njRAT Uncovered.
https://app.box.com/s/vdg51zbfvap52w60zj0is3l1dmyya0n4. Accessed: 2019-04-
19.
[59] Splunk. 2019. SIEM, AIOps, Application Management, Log Management, Machine
Learning, and Compliance. https://www.splunk.com/.
[60] STIX. 2019. STIX Visualization. https://oasis-open.github.io/cti-documentation/
stix/gettingstarted.html#stix-visualization. Accessed: 2019-05-15.
[61] Xiaoyan Sun, Jun Dai, Peng Liu, Anoop Singhal, and John Yen. 2018. Using
Bayesian Networks for Probabilistic Identification of Zero-Day Attack Paths.
IEEE Transactions on Information Forensics and Security 13, 10 (2018), 2506–2521.
[62] Zhao Sun, Hongzhi Wang, Haixun Wang, Bin Shao, and Jianzhong Li. 2012.
Efficient subgraph matching on billion node graphs. Proceedings of the VLDB
Endowment 5, 9 (2012), 788–799.
[63] Symantec. 2019. Buckeye: Espionage Outfit Used Equation Group Tools Prior
to Shadow Brokers Leak. https://www.symantec.com/blogs/threat-intelligence/
buckeye-windows-zero-day-exploit.
[64] Nextron Systems. 2017. LOKI, free IOC scanner - Nextron Systems. https:
//www.nextron-systems.com/loki/.
[65] ClearSky Cyber Security Team. 2016.
https:
//www.clearskysec.com/wp-content/uploads/2016/01/Operation%20DustySky_
TLP_WHITE.pdf. Accessed: 2019-04-19.
Operation DustySky.
[66] MITRE: STIX team. 2013. APT1 Report Converstion to STIX. https://stix.mitre.
org/language/version1.0.1/samples/README.txt. Accessed: 2019-04-23.
[67] MITRE: STIX team. 2013. FireEye Poison Evy Report Converstion to STIX. https:
//stix.mitre.org/language/version1.0.1/samples/README-fireeye.txt. Accessed:
2019-04-23.
[68] New York Times. 2019. How Chinese Spies Got the N.S.A.’s Hacking Tools, and
Used Them for Attacks. https://www.nytimes.com/2019/05/06/us/politics/china-
hacking-cyber.html.
[69] Hanghang Tong, Christos Faloutsos, Brian Gallagher, and Tina Eliassi-Rad. 2007.
Fast best-effort pattern matching in large attributed graphs. In 13th ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining (KDD 2007).
ACM, 737–746.
[70] David Wagner and Paolo Soto. 2002. Mimicry attacks on host-based intrusion
detection systems. In Proceedings of the 9th ACM Conference on Computer and
Communications Security. ACM, 255–264.
[71] Xiaoli Wang, Xiaofeng Ding, Anthony KH Tung, Shanshan Ying, and Hai Jin. 2012.
An efficient graph indexing method. In 2012 IEEE 28th International Conference
on Data Engineering. IEEE, 210–221.
[72] David Westcott and Kiran Bandla. 2018. APT Notes. https://github.com/aptnotes/
[73] Workbench. 2019. Jetstream2. https://browserbench.org/JetStream/index.html.
data.
Accessed: 2019-08-27.
[74] Zhang Xu, Zhenyu Wu, Zhichun Li, Kangkook Jee, Junghwan Rhee, Xusheng
Xiao, Fengyuan Xu, Haining Wang, and Guofei Jiang. 2016. High fidelity data
reduction for big data security dependency analyses. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security. ACM, 504–
516.
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1810[75] Ziyun Zhu and Tudor Dumitras. 2018. Chainsmith: Automatically learning the
semantics of malicious campaigns by mining threat intelligence reports. In 2018
IEEE European Symposium on Security and Privacy (EuroS&P). IEEE, 458–472.
[76] Bo Zong, Ramya Raghavendra, Mudhakar Srivatsa, Xifeng Yan, Ambuj K Singh,
and Kang-Won Lee. 2014. Cloud service placement via subgraph matching. In
2014 IEEE 30th International Conference on Data Engineering. IEEE, 832–843.
[77] Bo Zong, Xusheng Xiao, Zhichun Li, Zhenyu Wu, Zhiyun Qian, Xifeng Yan,
Ambuj K Singh, and Guofei Jiang. 2015. Behavior query discovery in system-
generated temporal graphs. Proceedings of the VLDB Endowment 9, 4 (2015),
240–251.
[78] Lei Zou, Lei Chen, and M Tamer Özsu. 2009. Distance-join: Pattern match query in
a large graph database. Proceedings of the VLDB Endowment 2, 1 (2009), 886–897.
A APPENDIX
In this section, we provide a brief history of each malware and a
summary of the statements from their corresponding reports which
we have used to construct the query graphs.
njRAT. njRAT is a publicly available Remote Access Trojan (RAT)
that gives the attacker full control over the victim system. Although
the source code of njRAT is publicly available, attacks leveraging
njRAT have mostly targeted organizations based in or focused on
the Middle East region in the government, telecom, and energy
sectors. When the malware is executed, it tries to read its con-
figuration from a file with the extension of “.exe.config” (edge 1).
njRAT malware stores the logged keystrokes in a “.tmp” file (edge
2), and also writes to a “.pf” file (edge 3). To gain persistence, njRAT
malware creates some copies of itself (edges 4&8). After execution
(edges 5&6), one of the copies writes to a “.pf” file (edge 7). njRAT
malware also start a netsh process located at (edge 9), which results
in creation of another “.pf” file (edge 10). Finally, the malware sets
some registry values (edges 11-13) and beacons to a C2 server at
217.66.231.245 (edge 14).
DeputyDog. DeputyDog refers to a malware appearing to have
targeted organizations in Japan, based on a report by FireEye. The
query graph that we extracted from the report of this malware is
shown in Fig. 2, and it is described in section 3.
Uroburos. Uroburos, ComRAT, Snake, Turla, and Agent.BTZ are
all referring to a family of rootkit which is responsible for the most
significant breach of U.S. military computers. The malware starts
by dropping two Microsoft Windows dynamic libraries (edges 1&2)
and calling rundll32.exe (edge 3) to install these libraries (edges
4&5). Then, to be started during the boot process, the malware
creates a registry key (edge 6). The malware creates three log files
(edges 7-9) and removes a set of file (edges 10-14).
Carbanak. Carbanak is a remote backdoor to provide remote ac-
cess to infected machines. The main motivation of the attackers
appears to be financial gain, which has resulted in cumulative losses
up to one billion dollars [22]. The compromise initially starts us-
ing a spear phishing email that appears to be legitimate banking
communications (edge 1). After the exploit, Carbanak copies itself
into “%system32%” with the name “svchost.exe” (edges 2-4) and
deletes the original file created by the exploit payload (edge 5). To
access autorun privileges, the malware creates a new service with
a name in the format of “Sys”, where ServiceName
is any existing service randomly chosen (edge 6). Carbanak creates
a file with a random name and a .bin extension where it stores
commands to be executed (edge 7). Then, the malware gets the
proxy configuration from a registry entry (edge 8) and the Mozilla
Firefox configuration file (edge 9). Finally, Carbanak communicates
with its C2 server (edge 10).
DustySky. DustySky is a multi-stage malware whose main objec-
tive is intelligence gathering for political purposes. The malware
sample is disguised as a Microsoft Word file, and once it is executed
(edge 1), a lure Microsoft word document in the Arabic language
is opened (edges 2&3) while the malware performs intelligence
gathering in the background. For VM evasion, the dropper checks
the existence of some DLL files, specifically vboxmrxnp.dll and
vmbusres.dll which indicate existence of VirtualBox (edges 4&5)
and vmGuestlib.dll which indicates existence of VMware (edge 6).
DustySky Core is dropped to %TEMP% (edges 7&8&9), and key-
stroke logs are saved to %TEMP%\temps (edge 10).
OceanLotus. OceanLotus, also known as APT32, is believed to be
a Vietnam-based APT group targeting Southeast Asian countries.
After execution of this malware (edge 1), a decoy document and an
eraser application are dropped (edges 2&3), and the decoy document
is lunched in Microsoft Word (edges 4&5). Then, the executable
decrypts its resources and drops a copy of legitimate Symantec
Network Access Control application (edge 6), an encrypted back-
door (edge 7), and a malicious DLL file (edge 8). The Symantec
application, which is signed and legitimate, loads all the libraries
in the same folder by default. In this case, after execution (edges
9&10), this application loads the malicious DLL file which has been
dropped in the same directory (edge 11). It then reads the backdoor
file (edge 12) which results in accessing a registry (edge 13), loading
the HTTPProv.dll library (edge 14), and creating a registry key
(edge 15). Finally, the malware connects to its mothership (edges
16&17).
HawkEye. HawkEye is a malware-as-a-service credential steal-
ing malware and is a popular tool among APT campaigns. The
new variant of this malware uses process hollowing to inject its
code into the legitimate signed .NET framework executables and
ships with many sophisticated functions to evade detection. This
new variant is usually delivered as a compressed file, and after
decompression (edges 1&2) and execution(edge 3), it spawns a child
process (edge 4), called RegAsm, which is an assembly registration
tool from the Microsoft .Net framework. HawkEye extracts a PE
file into its memory and then injects it into the RegAsm process.
After sleeping for 10 seconds, the RegAsm process spawns two
child processes named vbc both from the .Net framework as well
(edges 5&6). One of these processes collects credentials of browsers,
while the other one focuses on email and Instant Messaging (IM)
appllications. We have added one node, typed as a file or registry,
corresponding to the name of each browser (edges 7-18) or email/IM
(edges 19-26) application mentioned in the report. Note that these
applications might store some confidential information of interest
to attackers into both files or registries, and that is why we did not
limit our search to only files or registries. The collected credentials
are regularly saved into ∗.tmp files in the %temp% directory (edges
27&28), while after a while, the RegAsm process reads the entire
data of these tmp files into its memory (edges 29&30) and deletes
them immediately (edges 31&32). Finally, RegAsm looks up the
machines public IP from “http[s]:\\whatismyipaddress.com\” web
service (edges 33&34) and then exfiltrates the collected information
to the attacker’s email address (edge 35).
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1811It is important to note that there are some nodes with exactly
same label and type in the query graph of HawkEye, such as F&G
or J&K. However, these nodes get aligned to different nodes based
on their dependencies with other entities. For example, node F
interacts with browser applications while node G interacts with
the email/IM applications. In addition, the alignment of browser
or mail application nodes is independent of their installation on
the system. Many of these applications are not installed on the test
machine, however when the malware attempts to check whether
these applications are installed on the system, it initiates an OPEN
event which gets detected by Poirot.
Session 6D: Cyber Thread CCS ’19, November 11–15, 2019, London, United Kingdom1812