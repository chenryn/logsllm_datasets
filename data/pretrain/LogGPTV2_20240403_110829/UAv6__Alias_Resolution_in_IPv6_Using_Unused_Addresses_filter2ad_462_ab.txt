0 1 2 3 4 5 6 7 8 9 a b c d e f
IPv6 address last digit
0 1 2 3 4 5 6 7 8 9 a b c d e f
IPv6 address last digit
(a) Addresses from CAIDA traceroutes
(b) Addresses that responded to probes
Fig. 1. Distribution of the ﬁnal hex digit of router interfaces’ IPv6 addresses.
We believe that this distribution is a result of ISPs assigning addresses out
of /126s, or larger, to point-to-point links. In such networks, one end of the
point-to-point link is assigned an address ending with the binary suﬃx “01”
and the other end is assigned an address with the binary suﬃx “10”. The other
addresses in the /126 preﬁx, with suﬃxes “00” and “11”, are unused, or assigned
as broadcast addresses.
CAIDA’s traceroutes may have recovered addresses in only one direction of
a path, if the path had not been probed in the reverse direction. To address this
potential bias, we send ICMPv6 Echo Request probes to the rest of the addresses
in each address’ enclosing /126. In total, we sent probes to 227,212 addresses
and received ICMPv6 Echo Replies from 89,756 (39.5 %) of them. We plot the
frequency of the last hex digit for these responsive addresses in Fig. 1(b). Unlike
Fig. 1(a), we ﬁnd that the peak for addresses ending in “1” is higher than “2”
and the peak for “0” is higher than the other last digits. We speculate that this
may be due to some ISPs using hexadecimal“1”s and “0”s on opposite ends of
a link.
140
R. Padmanabhan et al.
The peaks for {“5”, “6”}, {“9”, “a”} and {“d”, “e”} are of comparable
heights, suggesting that these addresses are used for end-points of a link. Overall,
we ﬁnd that 80.3 % of addresses that responded to our probes with ICMPv6 Echo
Replies end in binary suﬃxes “01” or “10”. This supports our belief that IPv6
point-to-point link preﬁxes are /126s or larger. Only the two addresses assigned
to opposite ends of a link are in use and the remaining addresses in the preﬁx
are unused.
4 UAv6 Design
In this section, we describe how UAv6 resolves aliases by using unused addresses.
UAv6 consists of two phases, the harvest phase and the disambiguation phase.
In the harvest phase, we obtain Address Unreachable responses from unused
addresses and obtain potential alias pairs. In the disambiguation phase, we use
established and new methods to prove which potential pairs are truly aliases.
4.1 The Harvest Phase
In the harvest phase, we probe /126 preﬁxes and obtain potential aliases from
the responses. Given a /126 preﬁx, the harvest phase ﬁrst determines if we can
collect candidate alias pairs from this preﬁx by sending ICMPv6 Echo Requests
to each of the addresses and inspecting the responses. If all addresses in the
preﬁx are used, then all ICMPv6 Echo Replies we receive are, according to the
speciﬁcation [6], supposed to originate from the address we probed, thereby pro-
viding no information about aliases. Likewise, we learn no new aliases if none of
the addresses in the preﬁx are used, as we will receive either ICMPv6 Address
Unreachable (AU) responses or no responses at all. However, if some addresses
in the preﬁx are used and some are not, then we receive ICMPv6 Echo Replies
from the used addresses and AU responses from potential aliases of the used
addresses. The harvest phase uses this combination of responses to obtain can-
didate alias pairs.
Figure 2 shows an example of how the harvest phase works. In this example,
there are two routers connected by a point-to-point link; one of the end-points
has address X11 and the other has X2. The harvest phase sends probes to each
address in the /126 preﬁx “X” viz. X0, X1, X2 and X3. Because X1 and X2 are in
use, they will respond with ICMPv6 Echo Replies. As for the unused addresses
X0 and X3, we assume that the AU response is sent by an interface (Y) that
belongs to one of the routers that is directly connected to the X preﬁx. We make
this assumption because in general, only the routers directly connected to preﬁx
X know that X0 and X3 are unused. Since X1 and X2 are the addresses from this
preﬁx that responded with ICMPv6 Echo Replies, we infer that Y is an alias of
X1 or X2. We deﬁne (Y, X1) and (Y, X2) to be the two members of a candidate
alias pair set, exactly one of which is a true alias pair. For each /126 or larger
preﬁx with used and unused addresses, we obtain one candidate alias pair set at
the end of the harvest phase.
1 We use XN as notational shortcut for X::N.
UAv6: Alias Resolution in IPv6 Using Unused Addresses
141
Fig. 2. In its harvest phase, UAv6 sends probes to each address in a given /126 begin-
ning with the preﬁx “X”. A probe for X3, which is likely unused, will probably elicit
an ICMPv6 Address Unreachable (AU) message—we assume that this message will be
sent from a router that has an interface from the X preﬁx. In this example, interface Y
responded to our probe for X3 with an AU message, so we can deduce that Y is likely
an alias for X1 or X2, but not both. The disambiguation phase determines which is the
true alias.
4.2 The Disambiguation Phase
In the disambiguation phase, we ﬁnd the correct alias pair in a candidate alias
pair set provided by the harvest phase. We apply two tests which either prove
that an alias pair is correct, or prove that one is not and thus the other must
be. While some candidate alias pair sets can be disambiguated by either test, we
show in Sect. 5 that these two tests are complementary, as they rely on diﬀerent
router behaviors.
4.2.1 Traceroute Test
We use traceroutes to obtain disproofs about candidate alias pairs by checking
if one of the addresses lies on the route to the other. We expect that a typical
IPv6 router ﬁrst checks if the destination address in the packet belongs to it
before decrementing the Hop Limit. An alias of a traceroute destination should
thus never send an ICMPv6 Hop Limit Exceeded message, which implies that it
should never appear on the route to the destination. We send ICMPv6 tracer-
outes to X1 and X2, and if Y appears on the route to one of them, we use that
as proof that Y is not an alias of that address.
The Traceroute test cannot disambiguate all candidate alias pair sets. For
instance, traceroute probes may be blocked by some ISPs. Alternately, tracer-
outes to X1 and X2 may both not ﬁnd Y on the route if the traceroutes traverse
diﬀerent paths. Therefore, we introduce a complementary technique, which we
call the SPMTU test.
4.2.2 Shared PMTU Cache (SPMTU) Test
In the SPMTU test, we use the presence of fragmentation to provide proofs
about which of (Y, X1) and (Y, X2) is the true alias pair. By default, IPv6
routers do not fragment packets. However, an IPv6 router can be induced to
142
R. Padmanabhan et al.
fragment packets it originates if a host sends a Packet Too Big (PTB) message
to the router claiming that the response from the router is too big for its link to
handle [3]. The PTB sent by the host contains the claimed MTU, M, of the host’s
link. The router then makes an entry in its Path MTU (PMTU) cache, indicating
that packets sent to the host need to be fragmented if their size exceeds M.
PMTU caches are commonly shared across all interfaces of a router, including
routers manufactured by Huawei, Vyatta, HP, and Mikrotik [12]. When a router
with a shared PMTU cache receives a PTB message from host h with stated
MTU M, it inserts an entry (h, M) into its shared cache. As a result, all interfaces
on the router will fragment subsequent packets that exceed M to that host. We
use evidence of shared PMTU caches as proof that a candidate alias pair is
correct.
We determine which address pair in the candidate alias pair set shares PMTU
caches by using the following procedure:
1. Initialize: The prober sends an ICMPv6 Echo Request of size S to each of
Y, X1, and X2, and veriﬁes that all of them respond with an unfragmented
Echo Reply. This step is necessary to ensure that none of the addresses has
the prober’s address in its PMTU cache.
2. Populate cache: If all addresses responded with an unfragmented Echo
Reply in Step 1, the prober sends a PTB message with MTU M < S to Y
alone. If Y shares its PMTU cache with its aliases, all of them will fragment
a packet of size S sent to the prober.
3. Resolve: The prober sends an ICMPv6 Echo Request of size S to each of
Y, X1, and X2 again. If Y and X1 respond with a fragmented Echo Reply,
and X2 responds with an unfragmented Echo Reply, we infer that Y and X1
share a PMTU cache, and must therefore be aliases. Conversely, if Y and X2
fragment and X1 does not, we infer that Y and X2 are aliases.
The SPMTU test is generic and can be applied to any arbitrary pair of IPv6
addresses to determine if they are aliases. However, it uses state in routers’ caches
and hence cannot be repeated with the same prober address until the PMTU
cache entry for that prober address expires. We repeat tests using diﬀerent prober
addresses and rely on routers utilizing per-destination PMTU caches; thus a
response from the router to a diﬀerent prober address will not be fragmented.
We own a /64 preﬁx, and use diﬀerent addresses from the preﬁx for each test.
Although the SPMTU test can in theory be used as an all-pairs test, we are
careful to use it only on candidate alias pairs from the harvest phase, as varying
prober addresses may ﬁll routers’ caches with addresses from our tests. Since
we send one PTB message per candidate alias pair set, the number of prober
addresses in the PMTU cache will be at most the number of interfaces on the
router.
5 Evaluation
In this section, we evaluate the accuracy of UAv6 against existing IPv6 alias reso-
lution techniques and against limited ground truth from the Internet2 dataset [10].
UAv6: Alias Resolution in IPv6 Using Unused Addresses
143
We also show that a classic IPv4 alias resolution technique, the address-based
technique (Sect. 2), works in IPv6, in spite of recommendations in RFC 4443 [6].
Finally, we combine the alias pairs found by UAv6 and the address-based tech-
nique and resolve 5,555 aliases in the Ark dataset [4].
5.1 Data Collection
We extracted 68,474 router interface addresses from traceroutes sent by CAIDA’s
IPv6 Ark project in July 2014 [4]. We found 56,803 /126 preﬁxes in total, and
fed them into the harvest phase.
Recall that the harvest phase discards preﬁxes wherein the used addresses do
not respond to our probes with ICMPv6 Echo Replies or the unused addresses
do not elicit AU responses. Sometimes, AU responses do not arrive for the ﬁrst
ICMPv6 Echo Request; we therefore retransmit requests up to 3 times and each
request has a timeout of 3 s. Of the 56,803 preﬁxes, we did not receive ICMPv6
Echo Replies from X1 or X2 for 27,014 (47.6 %) preﬁxes. For 7935 (14.0 %)
preﬁxes, we did not get AU responses from probes sent to X0 or to X3.
The remaining 21,854 (38.5 %) preﬁxes are UAv6-applicable. We applied the
harvest and disambiguation phases to them and found 15,260 alias pairs.
5.2 The Address-Based Technique in IPv6
We discover that the address-based technique, a classic method of resolving
aliases in IPv4 [9,13,18], works in IPv6, too. The address-based technique ﬁnds
aliases in IPv4 by testing if UDP responses to high-numbered ports contain a
diﬀerent source address from the destination probed. The ICMPv6 speciﬁcation
states that if a message is sent to an address that belongs to a router, the source
address of the ICMPv6 response must be that address [6]. If the speciﬁcation is
followed, the address-based technique would not work for IPv6.
However, we ﬁnd that there exist routers that do not follow the speciﬁcation:
while running UAv6’s harvest phase, we observed that some of the ICMPv6
Echo Replies to our probes had a diﬀerent source address from the probed desti-
nation. This implies that the address-based technique also works in IPv6, so we
investigated how often it applies. We sent UDP probes with high port numbers
to all the addresses we probed in the harvest phase. UDP probes to 227,212
addresses provided 72,457 responses with ICMPv6 Port Unreachable responses.
Among them, 8729 (12 %) of the responses had a diﬀerent source address from
the destination of the UDP probes. Of the 89,756 ICMPv6 Echo Replies we
received, 1450 (1.6 %) had a diﬀerent source address. In 1030 cases, both UDP
and ICMP probes had a diﬀerent source address in their response. In total, we
discovered 9,143 alias pairs using the address-based technique.
Although it is encouraging that the address-based technique works in IPv6,
it has two drawbacks: ﬁrst, it can only be applied to a small portion of the
addresses, and second, it may not work in the future since it does not comply
with the ICMPv6 speciﬁcation. This serves as motivation for complementary
techniques like UAv6.
144
R. Padmanabhan et al.
5.3 Accuracy of UAv6
Alias resolution demands very high accuracy, as an incorrectly inferred alias
may group two independent routers together, signiﬁcantly altering the inferred
topology. We next turn to evaluate UAv6’s accuracy. For alias pairs to which
the Too-Big Trick (TBT) is applicable, we use it for cross-validation. We also
run UAv6 on the addresses from the Internet2 dataset [10] and verify the aliases
it ﬁnds against ground truth.
5.3.1 Comparison with TBT