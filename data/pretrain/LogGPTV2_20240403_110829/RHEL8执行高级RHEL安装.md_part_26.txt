    只能加入可运行这个客户端软件的域。有效值包括 `sssd`{.literal} 和
    `winbind`{.literal}。不是所有域都支持所有值。默认情况下自动选择客户端软件。
-   `--server-software=`{.literal} -
    只能加入可运行这个服务器软件的域。可能的值包括
    `active-directory`{.literal} 或 `freeipa`{.literal}。
-   `--membership-software=`{.literal} -
    加入域时使用这个软件。有效值包括 `samba`{.literal} 和
    `adcli`{.literal}。不是所有域都支持所有值。默认情况下自动选择成员软件。
:::
:::
:::
::: section
::: titlepage
# []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#kickstart-commands-for-handling-storage_kickstart-commands-and-options-reference}用于处理存储的 Kickstart 命令 {.title}
:::
这部分中的 Kickstart 命令配置存储的各个方面，比如设备、磁盘、分区、LVM
和文件系统。
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#device_kickstart-commands-for-handling-storage}device（已弃用） {.title}
:::
`device`{.literal} Kickstart 命令是可选的。使用它载入其他内核模块。
在大多数 PCI 系统中，安装程序会自动探测以太网卡和 SCSI
卡。然而，在老的系统和某些 PCI 系统中，Kickstart
需要提示才能找到正确的设备。`device`{.literal}
命令用来告诉安装程序安装额外的模块，使用以下格式：
::: title
**语法**
:::
``` screen
device moduleName --opts=options
```
::: itemizedlist
**选项**
-   [*moduleName*]{.emphasis} - 使用应该安装的内核模块的名称替换。
-   `--opts=`{.literal} - 传递给内核模块的选项。例如：
    ``` screen
    device --opts="aic152x=0x340 io=11"
    ```
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#autopart_kickstart-commands-for-handling-storage}autopart {.title}
:::
`autopart`{.literal} Kickstart 命令是可选的。它自动创建分区。
自动创建的分区包括：一个 root（`/`{.literal}）分区（1 GB 或更大）、一个
`swap`{.literal} 分区和一个适合于体系结构的 `/boot`{.literal}
分区。在足够大的驱动器上（50GB 以上），还会创建一个 `/home`{.literal}
分区。
::: title
**语法**
:::
``` screen
autopart OPTIONS
```
::: itemizedlist
**选项**
-   `--type=`{.literal} -
    选择您要使用的预定义的自动分区方案之一。可接受以下值：
    ::: informalexample
    ::: itemizedlist
    -   `lvm`{.literal}：LVM 分区方案。
    -   `plain`{.literal}：没有 LVM 的常规分区。
    -   `thinp`{.literal}：LVM Thin Provisioning 分区方案。
    :::
    :::
    有关可用分区方案的描述请参考
    ["支持的设备类型"一节](#partitioning-reference_installing-rhel-as-an-experienced-user.html#supported-device-types_partitioning-reference "支持的设备类型"){.xref}。
-   `--fstype=`{.literal} - 选择可用文件系统类型之一。可用值有
    `ext2`{.literal}、`ext3`{.literal}、`ext4`{.literal}
    `xfs`{.literal}、和 `vfat`{.literal}。默认文件系统是
    `xfs`{.literal}。有关这些文件系统的详情请参考
    ["支持的文件系统"一节](#partitioning-reference_installing-rhel-as-an-experienced-user.html#supported-file-systems_partitioning-reference "支持的文件系统"){.xref}。
-   `--nohome`{.literal} - 禁止自动创建 `/home`{.literal} 分区。
-   `--nolvm`{.literal} - 不要将 LVM 用于自动分区。这个选项等同于
    `--type=plain`{.literal}。
-   `--noboot`{.literal} - 不创建 `/boot`{.literal} 分区。
-   `--noswap`{.literal} - 不创建交换分区。
-   `--encrypted`{.literal} - 使用 LUKS（Linux Unified Key
    Setup）加密所有分区。这等同于检查 [**[Encrypt
    partitions]{.GUI}**]{.strong}
    在手动图形安装过程中，选中初始分区界面中的复选框。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在加密一个或多个分区时， Anaconda 会尝试收集 256
    字节熵，以保证安全加密分区。收集熵可能需要一些时间 -
    无论是否有收集到足够的熵，该过程将在最多 10 分钟后停止。
    与安装系统互动（通过键盘输入或移动鼠标）可加速此进程。如果要在虚拟机中安装，也可以在
    `virtio-rng`{.literal} 客户端中添加设备（虚拟随机数生成器）。
    :::
-   `--luks-version=LUKS_VERSION`{.literal} - 指定应该用来加密文件系统的
    LUKS 格式版本。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--passphrase=`{.literal} -
    为所有加密设备提供默认的系统范围内的密码短语。
-   `--escrowcert=URL_of_X.509_certificate`{.literal} -
    将所有加密卷的数据加密密钥保存为文件 `/root`{.literal}，使用来自
    [*URL_of_X.509_certificate*]{.emphasis} 指定的 URL 的 X.509
    证书进行加密。每个加密卷的密钥都作为单独的文件保存。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--backuppassphrase`{.literal} -
    为每个加密卷添加随机生成的密码短语。将这些密码短语以独立文件形式保存到
    `/root`{.literal}，使用由 `--escrowcert`{.literal} 指定的 X.509
    证书加密。只有在指定了 `--escrowcert`{.literal} 时这个选项才有意义。
-   `--cipher=`{.literal} - 如果无法满足 Anaconda 的默认
    `aes-xts-plain64`{.literal} 设置，则需要指定加密类型。这个选项必须与
    `--encrypted`{.literal}
    选项一同使用，单独使用无效。[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/){.link}文档中列出了可用加密类型，但红帽强烈推荐您使用
    `aes-xts-plain64`{.literal} 或 `aes-cbc-essiv:sha256`{.literal}。
-   `--pbkdf=PBKDF`{.literal} - 为 LUKS keylot 设置
    PBKDF（Password-Based Key Derivation Function）算法。另请参阅 man
    page [*cryptsetup(8)*]{.emphasis}。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--pbkdf-memory=PBKDF_MEMORY`{.literal} - 为 PBKDF
    设置内存成本。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--pbkdf-time=PBKDF_TIME`{.literal} - 设置 PBKDF
    密码处理所消耗的毫秒数。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的 `--iter-time`{.literal}
    部分。这个选项只在指定了 `--encrypted`{.literal} 时才有意义，并且与
    `--pbkdf-iterations`{.literal} 相互排斥。
-   `--pbkdf-iterations=PBKDF_ITERATIONS`{.literal} -
    设定直接迭代的次数，并避免 PBKDF 基准数据。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--pbkdf-force-iterations`{.literal} 部分。这个选项只在指定了
    `--encrypted`{.literal} 时才有意义，并且与 `--pbkdf-time`{.literal}
    相互排斥。
:::
::: itemizedlist
**备注**
-   同一 Kickstart 文件中，`autopart`{.literal} 选项不能与
    `part/partition`{.literal}、`raid`{.literal}、`logvol`{.literal}、`volgroup`{.literal}
    选项一同使用。
-   `autopart`{.literal} 命令不是必须的，但如果您的 Kickstart 脚本中没有
    `part`{.literal} 或者 `mount`{.literal} 命令，则必须包括这个命令。
-   在 CMS 类型的一个 FBA DASD 中安装时，建议使用
    `autopart --nohome`{.literal} Kickstart
    选项。这样可保证安装程序不会创建独立 `/home`{.literal}
    分区。安装过程可以成功进行。
-   如果您丢失了 LUKS
    密码短语，那么就完全无法访问所有加密的分区及其数据。丢失的密码短语是无法找回的。但是，您可以使用
    `--escrowcert`{.literal} 选项保存加密密码短语，并使用
    `--backuppassphrase`{.literal} 生成加密密码短语备份。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#bootloader-required_kickstart-commands-for-handling-storage}bootloader（必需） {.title}
:::
`bootloader`{.literal} Kickstart
命令是必需的。它指定引导装载程序的安装方式。
::: title
**语法**
:::
``` screen
bootloader [OPTIONS]
```
::: itemizedlist
**选项**
-   `--append=`{.literal} -
    指定附加内核参数。要指定多个参数，使用空格分隔它们。例如：
    ``` screen
    bootloader --location=mbr --append="hdd=ide-scsi ide=nodma"
    ```
    安装 `plymouth`{.literal} 软件包时会自动添加 `rhgb`{.literal} 和
    `quiet`{.literal} 参数，即使您在此没有指定它们或者没有使用该
    `--append=`{.literal} 命令。要禁用此行为，请明确禁止安装
    `plymouth`{.literal}:
    ``` screen
    %packages
    -plymouth
    %end
    ```
    这个选项可用于禁用在大多数现代处理器中存在的 Meltdown 和 Spectre
    speculative 安全漏洞（CVE-2017-5754、CVE-2017-5753 和
    CVE-2017-5715）。在某些情况下，这些机制可能并不是必需的，启用它们可能会导致性能降低而不会提高安全性。要禁用这些系统，在您的
    Kickstart 文件中添加相应的选项 - 例如：在 AMD 64/Intel 64 系统中使用
    `bootloader --append="nopti noibrs noibpb"`{.literal}。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    在禁用任何漏洞缓解机制前，请确定您的系统不会受到安全攻击。有关
    Meltdown 和 Spectre
    漏洞的详情，请查看[红帽漏洞响应文章](https://access.redhat.com/security/vulnerabilities/speculativeexecution){.link}。
    :::
-   `--boot-drive=`{.literal} -
    指定引导装载程序要写入的驱动器，以及用来引导计算机的驱动器。如果您使用多路径设备作为引导驱动器，使用它的
    disk/by-id/dm-uuid-mpath-WWID 名称指定该设备。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    目前在使用 `zipl`{.literal} 引导装载程序的 IBM Z 系统中的 Red Hat
    Enterprise Linux 安装中会忽略 `--boot-drive=`{.literal} 选项。当安装
    `zipl`{.literal} 时，它会自行决定引导驱动器。
    :::
-   `--leavebootorder`{.literal} -
    安装程序会在引导装载程序中安装的系统列表的顶部添加 Red Hat
    Enterprise Linux 8，并保留所有现有的条目及其顺序。
-   `--driveorder=`{.literal} - 指定在 BIOS
    引导顺序中的首选驱动器。例如：
    ``` screen
    bootloader --driveorder=sda,hda
    ```
-   `--location=`{.literal} - 指定引导记录的写入位置。有效值如下：
    ::: informalexample
    ::: itemizedlist
    -   `mbr`{.literal} -
        默认选项。具体要看驱动器是使用主引导记录（MBR）还是 GUID
        分区表（GPT）方案：
        在 GPT 格式的磁盘中，这个选项会在 BIOS 引导分区中安装 stage 1.5
        引导装载程序。
        在使用 MBR 格式化的磁盘中，会在 MBR
        和第一个分区之间的空白空间中安装 stage 1.5。
    -   `partition`{.literal} -
        在包含内核的分区的第一个扇区安装引导装载程序。
    -   `none`{.literal} - 不安装引导装载程序。
    :::
    :::
    在大多数情况下，不需要指定这个选项。
-   `--nombr`{.literal} - 不要在 MBR 中安装引导装载程序。
-   `--password=`{.literal} - 如果使用
    GRUB2，则将引导装载程序密码设定为这个选项指定的密码。这应该被用来限制对可传入任意内核选项的
    GRUB2 shell 的访问。
    如果指定密码，GRUB2 还会询问用户名。用户名为 `root`{.literal}。
-   `--iscrypted`{.literal} - 通常当您使用 `--password=`{.literal}
    选项指定引导装载程序密码时，会以明文形式将其保存在 Kickstart
    文件中。如果要加密密码，使用这个选项和一个加密的密码。
    要生成加密的密码，使用 `grub2-mkpasswd-pbkdf2`{.literal}
    命令，输入要使用的密码，并将该命令的输出结果（以
    `grub.pbkdf2`{.literal} 开始的哈希值）复制到 Kickstart
    文件中。附带加密密码的 `bootloader`{.literal} Kickstart
    条目示例类似如下：
    ``` screen
    bootloader --iscrypted --password=grub.pbkdf2.sha512.10000.5520C6C9832F3AC3D149AC0B24BE69E2D4FB0DBEEDBD29CA1D30A044DE2645C4C7A291E585D4DC43F8A4D82479F8B95CA4BA4381F8550510B75E8E0BB2938990.C688B6F0EF935701FF9BD1A8EC7FE5BD2333799C98F28420C5CC8F1A2A233DE22C83705BB614EA17F3FDFDF4AC2161CEA3384E56EB38A2E39102F5334C47405E
    ```
-   `--timeout=`{.literal} -
    指定引导装载程序引导默认选项前等待的时间（以秒为单位）。
-   `--default=`{.literal} - 设置引导装载程序配置里的默认引导镜像。
-   `--extlinux`{.literal} - 使用 extlinux 引导装载程序而不是
    GRUB2。这个选项只适用于支持 extlinux 的系统。
-   `--disabled`{.literal} - 这个选项是 `--location=none`{.literal}
    的一个更强大的版本。`--location=none`{.literal}
    只是简单地禁用引导装载程序安装，而 `--disabled`{.literal}
    禁用引导装载程序安装，同时禁用包含引导装载程序的软件包安装，从而节省了空间。
:::
::: itemizedlist
**备注**
-   红帽建议在每个系统中设置引导装载程序密码。一个没有保护的引导装载程序可以让潜在的攻击者修改系统的引导选项，并获得对系统的未授权访问。
-   在某些情况下，需要一个特殊的分区来在 AMD64、Intel 64 和 64 位 ARM
    系统上安装引导装载程序。这个分区的类型和大小取决于您要安装引导装载程序的磁盘是否使用主引导记录（MBR）还是