Ij,l : 1 if tunnel j uses link l and 0 otherwise
fl : existing flow on link l (fl ≤ cl)
Ti: set of tunnels that are set up for flow i
bi, j is allocation to flow i along tunnel j
j bi, j: bi is allocation to flow i
i bi - ϵ(
l churn(l))
bi =
11 Maximize:
∀l,
∀i,
12 subject to:
13
14
15
16
∀i, 0 ≤ bi ≤ di
∀i, j, bi, j ≥ 0
i, j I(j, l)bi, j ≤ cl + pl
j∈Ti bi, j ≥ bi
(cid:40)0, 
i, j bi, j I(j, l) ≤ cl
else
fl ,
17
churn(l) =
flow along link l in the network is constrained by the sum of
the link capacity (cl ) and the potential increase in capacity
(pl ) depending on the link’s SNR. ϵ is a small positive
constant that denotes the relative importance of the two
aspects of the objective function: maximizing throughput and
minimizing churn. Finally, in a given round, network churn
caused by the capacity change of link l is 0 if the optimal
flow assigned to the link is less than or equal to the link’s
capacity (cl ). However, if the link has more flow assigned to
it than its current capacity, it induces network churn equal to
the amount of traffic on it (fl ), as assigned in the previous
round of flow allocation. The nature of network churn makes
the objective function of the optimization piece-wise linear.
Approximation to Linear Program. To efficiently solve
the optimization objective described in Algorithm 1, we ap-
proximate the definition of churn as:
churn(l) = max(0,(
bi, j I(j, l) − fl))
(3)
i, j
This monotonically increasing value of churn, depending
on the flow assignments bi, j, is different from the actual
churn value which is essentially a step function; however,
this
to convert
Algorithm 1 to an efficiently solvable linear program.
reasonable approximation allows us
Managing Churn. For the duration of a link flap, no traf-
fic can be routed along this link. As the impacted links will
be offline for just one minute, the affected traffic (churn) has
to be managed efficiently for low disruption. We thus com-
pute a single intermediate flow allocation, where the churn is
distributed along routes without link flaps. We show in Sec-
tion 6 that a single intermediate step suffices, as the number
of link flaps per reconfiguration is low in practice (see Fig-
ure 9). Methods for networks with highly unstable SNR are
described in Section 7.1. Once hitless capacity reconfigura-
tion is production ready, the intermediate flow allocation step
described in this paragraph can be omitted.
4.3 Controller Implementation
We implement RADWAN, the traffic engineering controller
based on the goals outlined in the previous subsection. The
controller implements Algorithm 1 using the popular
optimization library CVXPY [5] in Python 2.7.
RADWAN computes flow allocations for the input demand
matrix in each round of its operation. Before solving the
optimization, RADWAN uses the link-level SNR information
to determine: (i) Links for which the total capacity must
now be reduced since the new SNR is too low to support
the existing capacity. These capacity downgrades must be
performed even though they will cause the impacted links
to be down for roughly a minute. (ii) The potential capacity
of other links, above their current capacity, depending on
the SNR of the link. For instance a link could currently be
operating at 100 Gbps but if it has an SNR of 10.2 dB, it has
a potential capacity increase of 50 Gbps as its capacity can
be augmented to 150 Gbps.
In what follows, we present the results of an extensive
testbed evaluation of RADWAN (§ 5), benchmarking the
effect of optically changing links’ capacities on the IP layer.
Next, we simulate RADWAN and compare it with our
implementation of the SWAN controller as described in [15].
We perform a data-driven evaluation of the behavior and per-
formance of these two controllers in § 6 and show the gains
of capacity variable links on the overall network throughput.
5 TESTBED EVALUATION
In this section, we build a testbed consisting of 1,540 km of
fiber and 16 optical amplifiers to evaluate the feasibility of
deploying RADWAN in a moderate sized WAN. Our goal is to
highlight the impact of modulation changes on realistic traffic
flows. In addition, we provide insights to both researchers and
practitioners into the state-of-the-art hardware components
required to realize a rate-adaptive wide area network.
5.1 Testbed Implementation Details
We build a moderate sized testbed which emulates a
4-datacenter WAN as shown in Figure 4(a) to evaluate
RADWAN. Each datacenter consists of a router connected to
6
5.2 Benchmarking the WAN testbed
Reacting to SNR degradation. Optical signals in fiber can
become attenuated because of ill-functioning amplifiers,
disturbances caused during maintenance windows or even
ambient temperature conditions. We now demonstrate that
RADWAN reacts to signal attenuation by switching to a
lower order modulation format that can be supported by the
degraded SNR. In the laboratory setting, we use a Variable
Optical Attenuator (VOA) device to add configurable
amounts of noise (measured in dB) so that we can demon-
strate signal attenuation. We connect the VOA between
routers A and B in the test topology. On the underlying
switch,
this connection is implemented by connecting
Ethernet4/1/1 to Ethernet3/1/1 with 410km of optical fiber.
The Ethernet ports are in separate VRFs (not directly
connected), so we setup static routing such that traffic sent
from one to the other is sent over the fiber connection. Every
five seconds, we increase the noise from the VOA by 1 dBm.
We measure the SNR of the signal on each end of the
connection and observe that the SNR of the received signal
on Ethernet3/1/1 steadily deteriorates as the level of noise
increases (Figure 5). Once the added noise reaches 16 dBm,
the transceiver can no longer recover from the increased
errors,2 and the port goes down. At this point, the controller
reduces the modulation format of the port from 16QAM to
8QAM. The modulation change takes approximately 70
seconds to complete. We then resume incrementing the noise
level using the VOA. When the noise level reaches 18 dBm,
the transceiver can no longer recover from the errors to
support 8QAM format and the port goes down again. Our
controller reacts by reducing the modulation format yet
again, this time from 8QAM to QPSK. After roughly 70
seconds of down time, the ports come back up with QPSK
modulation format. The addition of noise of 23dBm or more
renders the link unusable, even in the lowest supported
modulation format. At this point, the link has failed and such
a failure is irrecoverable with the current set of hardware.
Modulation Change Latency. In the previous benchmark-
ing experiment, we changed the modulation format of a link
in the testbed in response to SNR degradation. We observe
that each change in modulation format changes the status of
the ports involved to down, making them unavailable for
sending and receiving traffic. In Figure 5, we observe that
modulation change operations take approximately 70
seconds. This aspect of the latency of modulation change
guides the design of the RADWAN controller (Section 4).
2Acacia BVTs have 15% soft decision FEC enabled by default.
7
(a)
(b)
(c)
Figure 4: (a) Geographic scale of the testbed built to demonstrate the
operation of RADWAN. Our testbed emulates a WAN connecting four
major cities on the west coast of the United States. (b) Logical view of
the testbed where four routers (logically split from a modular chassis
switch) emulate four datacenters. These routers are connected via hun-
dreds of kilometers of optical fiber and regularly spaced amplifiers. (c)
Photograph of the electrical and optical equipment in our testbed.
its neighbors using hundreds of kilometers of optical fiber. To
prevent signal deterioration, we connect Erbium Doped Fiber
Amplifiers
(EDFAs) at approximately every 65-120
kilometers of fiber length. For simplicity, Figure 4(b)
represents the logical view of the WAN.
Note that we had access to only one Arista 7504 modular
chassis; therefore, we used Virtual Routing and Forwarding
(VRF) [6] to logically split the same physical switch into
four routers (named A, B, C and D in Figure 4(b)). Each VRF
has a separate routing table and routing protocol instances.
By configuring relevant physical interfaces to be in separate
VRFs and connecting the interfaces via optical components
(fiber, amplifiers), we achieved a logical topology whereby
traffic sent between ports on the switch was sent out on the
wire. We verified bi-direction connectivity between each pair
of nodes A, B, C and D. The Arista 7504 has integrated
bandwidth variable transceivers manufactured by Acacia Inc.
(the BVT module, AC 400,
in
Section 7.1). These allow us to configure three modulation
formats (QPSK, 8QAM and 16QAM) on the switch ports.
The complete testbed,
including optical and electrical
equipment is shown in Figure 4(c).
is described in detail
The part of the RADWAN controller responsible for
configuring the switch was implemented using Arista’s
PyEAPI [2] framework. With this, we could programmati-
cally configure the modulation formats of different ports,
program routes and query status of our commands.
To generate line rate traffic flows in the topology, we used
a Spirent traffic generator [25]. With the help of the Spirent
device we programmed 400 Gbps of TCP traffic flows to test
the dynamic capacity links of the testbed.
   CDBA410 km375 km390 km365 kmRouterAmplifier(a)
(b)
(c)
(d) Network without BVTs.
(e) RADWAN with BVTs.
Figure 6: (a) describes the network and link capacities. At the start, all links except link A−B are in 16QAM modulation format, capable of carrying
200 Gbps. A−B being in QPSK format can carry 100 Gbps. In the beginning, there are two flows in the network, each of 100 Gbps from B→A and
C→D. As additional demand of 100 Gbps gets added (B−A−2) and (C−D−2) described in (b), the link A−B gets congested, leading to 50% traffic
drops in flows B−A−1, B−A−2 in the absence of RADWAN, as seen in the Rx Rate in Figure(d). However, in a RADWAN deployment, the controller
reacts to the increased demand by increasing the capacity of A−B link to 200 Gbps (seen in (c) by changing the modulation format to 16QAM. While
this causes temporary disruption due to rerouting of B−A flows along the C−D link, once the modulation change is complete, the network can carry
the flows of 400Gbps without any drops, as seen in the Rx Rate of (e).
In each of the following experiments, we show the
transmission rate (Tx Rate) of the traffic we attempt to send
between nodes in the topology. An overwhelmed node
responds to high traffic volume by dropping a portion of the
flows. We capture the net traffic received by the sink node of
a flow as the receive rate (Rx rate). In the ideal case, the Tx
and Rx rates should match, implying that all the traffic sent
by the source is reaching the sink node.
Link capacity upgrade. Figure 6(a) shows the starting state
of a network where there are two flows of 100 Gbps each,
one from Node B to Node A (flow B−A−1) and the other
from Node C to Node D (flow C−D−1). With the
introduction of two additional 100 Gbps flows (B−A−2) and
(C−D−2) as shown in Figure 6(b), the network becomes
congested, because link A−B can only carry 100 Gbps of
traffic. As seen in the Rx rate in Figure 6(d), both B−A−1
and B−A−2 share the A−B link fairly and drop 50% of their
traffic. However, RADWAN can salvage this congestion by
increasing the capacity of the A−B link (as seen in
Figure 6(c)). To do this, the RADWAN controller reacts to
the increased demand by changing the modulation of the
A−B link, causing it to be down for roughly one minute. This
temporarily congests the C−D link (observe the Rx rate of all
flows drops in Figure 6(e)), due to rerouting of the B−A
flows. However, once the modulation change is complete, all
flows can be transmitted successfully with no packet drops.
We note that without augmenting the capacity of link A−B,
the network could not satisfy 400 Gbps of demand but
dynamic capacity links with RADWAN enable us to meet the
increased demand.
Figure 5: Impact of attenuation on link SNR, port status and modula-