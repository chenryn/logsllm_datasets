title:Recruiting new tor relays with BRAIDS
author:Rob Jansen and
Nicholas Hopper and
Yongdae Kim
Recruiting New Tor Relays with BRAIDS
Rob Jansen, Nicholas Hopper, and Yongdae Kim
{jansen, hopper, kyd}@cs.umn.edu
University of Minnesota
Minneapolis, MN 55455 USA
ABSTRACT
Tor, a distributed Internet anonymizing system, relies on
volunteers who run dedicated relays. Other than altruism,
these volunteers have no incentive to run relays, causing a
large disparity between the number of users and available re-
lays. We introduce BRAIDS, a set of practical mechanisms
that encourages users to run Tor relays, allowing them to
earn credits redeemable for improved performance of both
interactive and non-interactive Tor traﬃc. These perfor-
mance incentives will allow Tor to support increasing re-
source demands with almost no loss in anonymity: BRAIDS
is robust to well-known attacks. Using a simulation of 20,300
Tor nodes, we show that BRAIDS allows relays to achieve
75% lower latency than non-relays for interactive traﬃc, and
90% higher bandwidth utilization for non-interactive traﬃc.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Dist-
ributed Systems; C.2.0 [Computer-Communication Net-
works]: General—Security and Protection
General Terms
Algorithms, Security
Keywords
Anonymous Communication, Peer-to-Peer Networks
1.
INTRODUCTION
Tor [53] uses Onion Routing [24] to create a practical sys-
tem for low-latency anonymity [14]. Tor clients periodically
retrieve a list of relays from the Tor directory service and
connect to Internet services by relaying requests through a
circuit of multiple relays chosen from the downloaded list.
The aggregate bandwidth costs of sending communication
securely through multiple relays are signiﬁcantly higher than
direct communication: the amount of bandwidth expended
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
by a client is also expended by each relay in its circuit. A
signiﬁcant characteristic of communication over Tor is that
most clients use Tor for interactive applications like web
browsing, but most data is transferred for non-interactive
applications like ﬁle sharing [32]. Moreover, Tor relays for-
ward traﬃc for multiple circuits simultaneously, further in-
creasing bandwidth obligations. The combination results in
overloaded relays and drastically increased latency for both
interactive and non-interactive communication [32].
A lack of incentives to run relays combined with the as-
sociated costs has hindered relay enlistment, and in turn,
Tor’s scalability. Although relaying traﬃc can increase user
anonymity by frustrating attempts to diﬀerentiate relay-
sourced from relay-forwarded data, there are no measur-
able beneﬁts to providing service for others. Consequently,
clients greatly outnumber relays in Tor. In 2009, there were
an estimated 100,000 simultaneously active Tor clients [31]
but only about 1,500 Tor relays.1 This uneven distribution
of bandwidth responsibilities combined with the dispropor-
tionately high client-to-relay ratio results in poor system
performance and a tragedy of the commons [26] scenario: as
Tor grows, it will require additional relays to provide band-
width and traﬃc forwarding services to remain usable.
Recruiting New Relays A signiﬁcant problem faced by
the current Tor system is how to recruit new relays to sup-
port expansion and ease the load suﬀered by current relays.
There have been few approaches to solve the relay recruiting
problem. One approach is to simply require every client to
also be a relay, eﬀectively reducing the client-to-relay ratio
to 1:1 [42]. While we wish to promote relaying traﬃc, we
do not wish to forcefully impose it: clients who are unable
to run a relay due to censorship [48] would not be able to
eﬀectively use the system. Denying anonymity to clients in
censored regions not only opposes the “anonymity for all”
ideology, but also decreases anonymity for others since it
reduces the diversity and size of the anonymity set – the
set of potential circuit initiators. Tor’s approach thus far
has been to build a community and educate users about
the beneﬁts of anonymity, while simplifying relay setup and
maintenance procedures. While this approach has been ef-
fective at expanding the network to its current size, relays
are still in high demand and performance remains poor.
Introducing BRAIDS In this paper we present BRAIDS,2
a set of practical mechanisms for the Tor anonymity network
that increases incentives for relays while limiting the delays
1The corresponding client-to-relay ratio is 66:1.
2BRAIDS stands for Bandwidth Reciprocity And Incen-
tivized Diﬀerentiated Services.
319caused by non-interactive BitTorrent clients and keeping the
system usable for everyone. Relays using BRAIDS enjoy
lower latency and higher throughput than other users. In
particular, BRAIDS allows relays to achieve 75% lower la-
tency than non-relays for interactive web traﬃc – a 40%
improvement over the current Tor network. Relays initi-
ating non-interactive traﬃc receive a 90% increase in total
bandwidth utilization from non-relay users.
To improve performance, BRAIDS incorporates diﬀerenti-
ated services and a scheduler based on the proportional dif-
ferentiation model introduced by Drovolis et al.
[16, 17, 18,
19]. BRAIDS aggregates traﬃc into three hierarchical ser-
vice classes proportionally prioritized as low-latency > high-
throughput > normal, where the “cost” of high-throughput
> low-latency (normal service is free). Each relay rate-limits
the low-latency class to prevent high-throughput nodes from
overwhelming low-latency traﬃc. Finally, traﬃc is paid and
proportionally prioritized in both directions through the cir-
cuit, capturing Tor’s asymmetric bandwidth requirements.
BRAIDS users optionally and anonymously “pay” relays
with generic tickets that are both distributed freely in small
amounts to all clients and relays, and collected by each re-
lay while volunteering bandwidth to Tor. We use relay-
speciﬁc tickets [29, 41] – random numbers combined with
relay-identiﬁers – that are signed by an authority. Signed
tickets are veriﬁed at the relay, defeating the double spend-
ing problem in which clients must make immediate deposits
to catch cheaters that duplicate and spend a ticket multiple
times. Information leakage is avoided since relays can verify
tickets without assistance from an external entity. Tickets
are valid during uniform intervals to prevent linking clients
with tickets. Clients who cannot or choose not to pay receive
slightly reduced performance.
Other incentive-based recruitment approaches exist in the
literature: the gold star scheme [38] gives preferential treat-
ment to fast relays whereas PAR [3] and XPay [10] use e-cash
and an online bank to produce monetary incentives. A va-
riety of attacks [20, 28, 33, 35] make it diﬃcult to design
a secure solution with minimal loss of anonymity. In par-
ticular, bandwidth accounting mechanisms that give better
service to relays that volunteer more bandwidth [38] in some
cases signiﬁcantly decrease the anonymity set of relays re-
ceiving better service, and in others [3] unintentionally allow
an adversary to link relays to the same circuit.
BRAIDS is secure, retaining all of Tor’s anonymity for
users browsing the web, whereas the previously proposed
gold star scheme [38] achieves less than 65%. Our anony-
mous ticket approach mitigates the intersection attack that
has plagued previous schemes. Further, BRAIDS bounds
cheating in such a way that users must volunteer a signif-
icant amount of bandwidth before maliciously gaining an
insigniﬁcant number of tickets.
Outline The remainder of the paper is outlined as follows.
In Section 2, we brieﬂy discuss BRAIDS system require-
ments while detailing the design in Section 3. Analysis of
security and parameters is given in Section 4, while simula-
tions and results are described in Section 5. Finally, Section
6 discusses related work and Section 7 concludes.
2. REQUIREMENTS
BRAIDS’ main goal is to encourage Tor clients to run
relays by providing incentives in the form of increased per-
formance. This system should prioritize low-latency traﬃc
over high-throughput traﬃc to reduce the negative impact
that ﬁle sharing users have on overall system performance
while remaining usable by everyone. The service received by
web browsing clients should not reduce their anonymity.
BRAIDS shares the same threat model as Tor – a local
adversary who cannot observe or interfere with traﬃc sent
between honest nodes. While we do not defend against cur-
rent attacks on Tor, our system should not reduce Tor’s
security by introducing any new vulnerabilities. We should
not leak information about the circuit initiator or the iden-
tities of relays composing the circuit.
In addition to the aforementioned entities, we introduce
a centralized, partially-trusted, oﬄine bank to manage and
certify bandwidth accounting tasks. The bank should only
be trusted to follow protocol, but we assume it can other-
wise attack the system using any information in its posses-
sion. BRAIDS should provide accounting mechanisms for
both the outgoing path from client to server, and the re-
verse path from server to client (previous systems [3, 10]
do not provide payment mechanisms for the reverse path
of a two-way communication channel), since many exist-
ing applications (e.g. web browsing and streaming media)
have signiﬁcantly higher downstream than upstream client
requirements. Bandwidth accounting should be anonymous
to protect the client’s identity, while payments must be un-
forgeable, non-reusable, and should not be linkable to the
client [9, 54]. Additionally, we require double spending pre-
vention in the form of immediate double spending detection.
Clients attempting to double-spend should not receive ser-
vice. Any attempts to cheat the system should be bounded
so that the overall eﬀorts required to cheat will outweigh the
achievable beneﬁts.
Finally, our system should be an incrementally deployable
extension to Tor: users transitioning from legacy software
should not be partitioned from the network.
3. SYSTEM DESIGN
BRAIDS motivates users to operate Tor relays by intro-
ducing generic tickets for service accounting. Using blind
signatures, users remain anonymous while obtaining a lim-
ited amount of free tickets from the bank. Tickets are then
embedded into Tor cells to request the desired class of service
– either low-latency and low-throughput (e.g. general web
browsing) or high-latency and high-throughput (e.g. down-
loading or sharing large ﬁles). Each relay veriﬁes its tickets
to prevent double spending.
3.1 Relay-speciﬁc Tickets
Our ticket design draws upon ideas from coin ripping [29]
and fair exchange for mix-nets [41]. Since tickets are relay-
speciﬁc, our construction requires that clients have a priori
knowledge about their desired communication partners [43].
Tor already requires knowledge of relays when building cir-
cuits, so relay-speciﬁc tickets are an appropriate choice.
Ticket Structure A ticket T consists of a main part Ts,
called the ticket stub, and a receipt part Tr, called the ticket
receipt. The ticket stub contains the identity of the relay
R (its public key) to which the ticket may be transferred.
Letting | denote concatenation, we deﬁne a ticket for R as:
R
T
= {T
R
s
| T
r } = {R | H(T
R
r ) | d | σ | T
R
r }
R
where H is a cryptographically secure one-way hash func-
tion, d is a set of date-stamps, σ is the bank’s partially
320r
is a random
r ) | d}, and T R
blind signature on {R | H(T R
bit-string used as a receipt.
Ticket Activation We use a blind signature scheme [8] to
activate tickets and ensure no information about relay R
chosen by client C is revealed. Speciﬁcally, our construction
uses a partially blind signature [1] where the client blinds in-
formation about the chosen relay R. The bank attaches uni-
form public date-stamps (described below) to the ticket, but
cannot discover the blinded relay information. The bank’s
signature creates a strongly unforgeable ticket T R, i.e. mod-
ifying the signed contents invalidates the ticket.
Ticket Validity Intervals The bank attaches a set of date-
stamps d = {du | dv | dw} to the blinded relay informa-
tion before signing. The time from ticket generation until
the ﬁrst date-stamp speciﬁes the spending interval [-,du) in
which relay-bound tickets may be spent. The time between
the ﬁrst and second date-stamp speciﬁes the relay-exchange
interval
[du,dv) in which a relay may exchange tickets at
the bank for new relay-bound tickets. The time between
the second and last date-stamp speciﬁes the client-exchange
interval [dv,dw) in which any client or relay may exchange
tickets at the bank for new relay-bound tickets. Finally, tick-
ets expire and are completely void after the ﬁnal date-stamp.
We suggest values for these parameters in Section 4.1.
The relay-before-client exchange priority prevents a client
from maliciously exchanging a spent ticket before the relay
can (causing the relay’s ticket to appear double-spent upon
attempted exchange) while still allowing the client to ex-
change unspent tickets. The ﬁnal date-stamp prevents the
bank’s ticket database from growing inﬁnitely large. The
bank’s global date-stamps are used for every ticket signed
during a given time period to prevent the bank from marking
tickets and linking clients with relays.
3.2 Ticket Transferability
Users may wish to transfer tickets to other users, or up-
date tickets that have passed their spending interval but are
not yet void. Unspent tickets may be transferred to relays