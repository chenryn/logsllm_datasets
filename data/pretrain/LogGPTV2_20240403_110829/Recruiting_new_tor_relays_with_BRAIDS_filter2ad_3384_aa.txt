# Title: Recruiting New Tor Relays with BRAIDS
# Authors: Rob Jansen, Nicholas Hopper, and Yongdae Kim
# Affiliation: University of Minnesota, Minneapolis, MN 55455 USA
# Email: {jansen, hopper, kyd}@cs.umn.edu

## Abstract
Tor, a distributed Internet anonymizing system, relies on volunteers to run dedicated relays. However, these volunteers have no significant incentives to do so, leading to a large disparity between the number of users and available relays. We introduce BRAIDS, a set of practical mechanisms that encourages users to run Tor relays by offering performance credits redeemable for improved interactive and non-interactive traffic. These incentives will enable Tor to support increasing resource demands with minimal loss in anonymity, as BRAIDS is robust against well-known attacks. Our simulations with 20,300 Tor nodes show that BRAIDS allows relays to achieve 75% lower latency for interactive traffic and 90% higher bandwidth utilization for non-interactive traffic.

### Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Distributed Systems; C.2.0 [Computer-Communication Networks]: General—Security and Protection

### General Terms
Algorithms, Security

### Keywords
Anonymous Communication, Peer-to-Peer Networks

## 1. Introduction
Tor [53] uses Onion Routing [24] to create a practical system for low-latency anonymity [14]. Tor clients periodically retrieve a list of relays from the Tor directory service and connect to Internet services by relaying requests through a circuit of multiple relays chosen from the downloaded list. The aggregate bandwidth costs of sending communication securely through multiple relays are significantly higher than direct communication. Each relay in the circuit also expends the same amount of bandwidth as the client. A significant characteristic of communication over Tor is that most clients use it for interactive applications like web browsing, while most data is transferred for non-interactive applications like file sharing [32]. Moreover, Tor relays forward traffic for multiple circuits simultaneously, further increasing bandwidth obligations. This combination results in overloaded relays and drastically increased latency for both interactive and non-interactive communication [32].

The lack of incentives to run relays, combined with the associated costs, has hindered relay recruitment and, in turn, Tor's scalability. Although relaying traffic can increase user anonymity by making it harder to differentiate relay-sourced from relay-forwarded data, there are no measurable benefits to providing service for others. Consequently, clients greatly outnumber relays in Tor. In 2009, there were an estimated 100,000 simultaneously active Tor clients [31] but only about 1,500 Tor relays. This uneven distribution of bandwidth responsibilities, combined with the disproportionately high client-to-relay ratio, results in poor system performance and a "tragedy of the commons" [26] scenario: as Tor grows, it will require additional relays to provide bandwidth and traffic forwarding services to remain usable.

### Recruiting New Relays
A significant problem faced by the current Tor system is how to recruit new relays to support expansion and ease the load suffered by current relays. One approach is to require every client to also be a relay, effectively reducing the client-to-relay ratio to 1:1 [42]. While we wish to promote relaying traffic, we do not wish to forcefully impose it, as clients who are unable to run a relay due to censorship [48] would not be able to effectively use the system. Denying anonymity to clients in censored regions not only opposes the "anonymity for all" ideology but also decreases anonymity for others by reducing the diversity and size of the anonymity set. Tor's approach thus far has been to build a community and educate users about the benefits of anonymity, while simplifying relay setup and maintenance procedures. While this approach has been effective at expanding the network to its current size, relays are still in high demand, and performance remains poor.

### Introducing BRAIDS
In this paper, we present BRAIDS (Bandwidth Reciprocity And Incentivized Differentiated Services), a set of practical mechanisms for the Tor anonymity network that increases incentives for relays while limiting the delays caused by non-interactive BitTorrent clients and keeping the system usable for everyone. Relays using BRAIDS enjoy lower latency and higher throughput than other users. Specifically, BRAIDS allows relays to achieve 75% lower latency than non-relays for interactive web traffic—a 40% improvement over the current Tor network. Relays initiating non-interactive traffic receive a 90% increase in total bandwidth utilization from non-relay users.

To improve performance, BRAIDS incorporates differentiated services and a scheduler based on the proportional differentiation model introduced by Drovolis et al. [16, 17, 18, 19]. BRAIDS aggregates traffic into three hierarchical service classes proportionally prioritized as low-latency > high-throughput > normal, where the "cost" of high-throughput > low-latency (normal service is free). Each relay rate-limits the low-latency class to prevent high-throughput nodes from overwhelming low-latency traffic. Finally, traffic is paid and proportionally prioritized in both directions through the circuit, capturing Tor's asymmetric bandwidth requirements.

BRAIDS users optionally and anonymously "pay" relays with generic tickets that are both distributed freely in small amounts to all clients and relays, and collected by each relay while volunteering bandwidth to Tor. We use relay-specific tickets [29, 41]—random numbers combined with relay-identifiers—that are signed by an authority. Signed tickets are verified at the relay, defeating the double-spending problem in which clients must make immediate deposits to catch cheaters that duplicate and spend a ticket multiple times. Information leakage is avoided since relays can verify tickets without assistance from an external entity. Tickets are valid during uniform intervals to prevent linking clients with tickets. Clients who cannot or choose not to pay receive slightly reduced performance.

Other incentive-based recruitment approaches exist in the literature: the gold star scheme [38] gives preferential treatment to fast relays, whereas PAR [3] and XPay [10] use e-cash and an online bank to produce monetary incentives. Various attacks [20, 28, 33, 35] make it difficult to design a secure solution with minimal loss of anonymity. In particular, bandwidth accounting mechanisms that give better service to relays that volunteer more bandwidth [38] in some cases significantly decrease the anonymity set of relays receiving better service, and in others [3] unintentionally allow an adversary to link relays to the same circuit.

BRAIDS is secure, retaining all of Tor's anonymity for users browsing the web, whereas the previously proposed gold star scheme [38] achieves less than 65%. Our anonymous ticket approach mitigates the intersection attack that has plagued previous schemes. Further, BRAIDS bounds cheating in such a way that users must volunteer a significant amount of bandwidth before maliciously gaining an insignificant number of tickets.

### Outline
The remainder of the paper is outlined as follows. In Section 2, we briefly discuss BRAIDS system requirements while detailing the design in Section 3. Analysis of security and parameters is given in Section 4, while simulations and results are described in Section 5. Finally, Section 6 discusses related work, and Section 7 concludes.

## 2. Requirements
BRAIDS' main goal is to encourage Tor clients to run relays by providing incentives in the form of increased performance. The system should prioritize low-latency traffic over high-throughput traffic to reduce the negative impact that file-sharing users have on overall system performance while remaining usable by everyone. The service received by web browsing clients should not reduce their anonymity.

BRAIDS shares the same threat model as Tor—a local adversary who cannot observe or interfere with traffic sent between honest nodes. While we do not defend against current attacks on Tor, our system should not reduce Tor's security by introducing any new vulnerabilities. We should not leak information about the circuit initiator or the identities of relays composing the circuit.

In addition to the aforementioned entities, we introduce a centralized, partially-trusted, offline bank to manage and certify bandwidth accounting tasks. The bank should only be trusted to follow protocol, but we assume it can otherwise attack the system using any information in its possession. BRAIDS should provide accounting mechanisms for both the outgoing path from client to server and the reverse path from server to client (previous systems [3, 10] do not provide payment mechanisms for the reverse path of a two-way communication channel), since many existing applications (e.g., web browsing and streaming media) have significantly higher downstream than upstream client requirements. Bandwidth accounting should be anonymous to protect the client's identity, while payments must be unforgeable, non-reusable, and should not be linkable to the client [9, 54]. Additionally, we require double-spending prevention in the form of immediate double-spending detection. Clients attempting to double-spend should not receive service. Any attempts to cheat the system should be bounded so that the overall efforts required to cheat will outweigh the achievable benefits.

Finally, our system should be an incrementally deployable extension to Tor: users transitioning from legacy software should not be partitioned from the network.

## 3. System Design
BRAIDS motivates users to operate Tor relays by introducing generic tickets for service accounting. Using blind signatures, users remain anonymous while obtaining a limited amount of free tickets from the bank. Tickets are then embedded into Tor cells to request the desired class of service—either low-latency and low-throughput (e.g., general web browsing) or high-latency and high-throughput (e.g., downloading or sharing large files). Each relay verifies its tickets to prevent double spending.

### 3.1 Relay-Specific Tickets
Our ticket design draws upon ideas from coin ripping [29] and fair exchange for mix-nets [41]. Since tickets are relay-specific, our construction requires that clients have a priori knowledge about their desired communication partners [43]. Tor already requires knowledge of relays when building circuits, so relay-specific tickets are an appropriate choice.

#### Ticket Structure
A ticket \( T \) consists of a main part \( T_s \), called the ticket stub, and a receipt part \( T_r \), called the ticket receipt. The ticket stub contains the identity of the relay \( R \) (its public key) to which the ticket may be transferred. Letting \( | \) denote concatenation, we define a ticket for \( R \) as:
\[ T_R = \{T_{R_s} | T_r\} = \{R | H(T_{R_r}) | d | \sigma | T_{R_r}\} \]
where \( H \) is a cryptographically secure one-way hash function, \( d \) is a set of date-stamps, \( \sigma \) is the bank's partially blind signature on \( \{R | H(T_{R_r}) | d\} \), and \( T_{R_r} \) is a random bit-string used as a receipt.

#### Ticket Activation
We use a blind signature scheme [8] to activate tickets and ensure no information about the relay \( R \) chosen by client \( C \) is revealed. Specifically, our construction uses a partially blind signature [1] where the client blinds information about the chosen relay \( R \). The bank attaches uniform public date-stamps (described below) to the ticket but cannot discover the blinded relay information. The bank's signature creates a strongly unforgeable ticket \( T_R \), i.e., modifying the signed contents invalidates the ticket.

#### Ticket Validity Intervals
The bank attaches a set of date-stamps \( d = \{d_u | d_v | d_w\} \) to the blinded relay information before signing. The time from ticket generation until the first date-stamp specifies the spending interval \([- , d_u)\) in which relay-bound tickets may be spent. The time between the first and second date-stamp specifies the relay-exchange interval \([d_u, d_v)\) in which a relay may exchange tickets at the bank for new relay-bound tickets. The time between the second and last date-stamp specifies the client-exchange interval \([d_v, d_w)\) in which any client or relay may exchange tickets at the bank for new relay-bound tickets. Finally, tickets expire and are completely void after the final date-stamp. We suggest values for these parameters in Section 4.1.

The relay-before-client exchange priority prevents a client from maliciously exchanging a spent ticket before the relay can (causing the relay's ticket to appear double-spent upon attempted exchange) while still allowing the client to exchange unspent tickets. The final date-stamp prevents the bank's ticket database from growing infinitely large. The bank's global date-stamps are used for every ticket signed during a given time period to prevent the bank from marking tickets and linking clients with relays.

### 3.2 Ticket Transferability
Users may wish to transfer tickets to other users or update tickets that have passed their spending interval but are not yet void. Unspent tickets may be transferred to relays.