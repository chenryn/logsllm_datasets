# [Projects](projects.md)
* Correction: [Deprecate faker-optional project.](projects.md#faker-optional)
    Wrapper over other Faker providers to return their value or `None`. Useful to
    create data of type `Optional[Any]`.
    Not needed anymore as I use [pydantic factories](pydantic_factories.md) now.
* New: [Create the Life Warnings seed.](projects.md#life-warnings)
    I've always tackled the pursuit of the peace of mind by improving in task
    management, for example trying to predict when I have to do something in order
    to avoid a nuisance. Maybe it's more interesting to monitor and visibilice the
    warnings that are affecting you.
* Reorganization: Merge Self host a routing web application seed with host my own map seedling.
* New: [Create an ordered list of digital gardens.](projects.md#create-an-ordered-list-of-digital-gardens)
    Created [Best-of Digital Gardens](https://github.com/lyz-code/best-of-digital-gardens) a [best-of-lists](https://github.com/best-of-lists/best-of) compilation of awesome list of digital gardens.
# Activism
## [Mentoring](mentoring.md)
* New: Introduce the concept and guidelines of mentorship.
    [Mentoring](https://en.wikipedia.org/wiki/Mentorship) is a process for the
    informal transmission of knowledge, social capital, and the psychosocial support
    perceived by the recipient as relevant to work, career, or professional
    development; mentoring entails informal communication, usually face-to-face and
    during a sustained period of time, between a person who is perceived to have
    greater relevant knowledge, wisdom, or experience (the mentor) and a person who
    is perceived to have less (the apprentice).
# [Coding](vuetify.md)
* New: Introduce Cypress.
    [Cypress](https://www.cypress.io/) is a next generation front end testing tool
    built for the modern web.
* New: Introduce Vite.
    [Vite](https://vitejs.dev/guide/) is a build tool that aims to provide a faster
    and leaner development experience for modern web projects. It consists of two
    major parts:
    * A dev server that provides rich feature enhancements over native ES modules,
        for example extremely fast Hot Module Replacement (HMR).
    * A build command that bundles your code with Rollup, pre-configured to output
        highly optimized static assets for production.
    Vite is opinionated and comes with sensible defaults out of the box, but is also
    highly extensible via its Plugin API and JavaScript API with full typing
    support.
* New: Introduce Vitest.
    [Vitest](https://vitest.dev/) is a blazing fast unit-test framework powered by
    Vite.
* New: [Display time ago from timestamp.](vue_snippets.md#display-time-ago-from-timestamp)
    Use [vue2-timeago](https://vue2-timeago.netlify.app/guide/timeago/timeago.html)
    Install with:
    ```bash
    npm install vue2-timeago@next
    ```
* New: Introduce Vuetify.
    [Vuetify](https://vuetifyjs.com/en/) is a Vue UI Library with beautifully
    handcrafted Material Components.
* New: Sum up all Cypress documentation.
    In particular how to:
    * Install it
    * Write tests
    * Setup the tests
    * Do component testing
    * Do visual regression testing
* New: [Truncate text given a height.](vue_snippets.md#truncate-text-given-a-height)
    By default css is able to truncate text with the size of the screen but only on
    one line, if you want to fill up a portion of the screen (specified in number of
    lines or height css parameter) and then truncate all the text that overflows,
    you need to use [vue-clamp](https://vue-clamp.vercel.app/).
* New: [Environment variables.](vuejs.md#environment-variables)
    If you're using Vue 3 and Vite you can use [the environment
    variables](https://vitejs.dev/guide/env-and-mode.html) by defining them in
    `.env` files.
    You can specify environment variables by placing the following files in your
    project root:
    * `.env`: Loaded in all cases.
    * `.env.local`: Loaded in all cases, ignored by git.
    * `.env.[mode]`: Only loaded in specified mode.
    * `.env.[mode].local`: Only loaded in specified mode, ignored by git.
    An env file simply contains `key=value` pairs of environment variables, by
    default only variables that start with `VITE_` will be exposed.:
    ```
    DB_PASSWORD=foobar
    VITE_SOME_KEY=123
    ```
    Only `VITE_SOME_KEY` will be exposed as `import.meta.env.VITE_SOME_KEY` to your
    client source code, but `DB_PASSWORD` will not. So for example in a component
    you can use:
    ```vue
    export default {
      props: {},
      mounted() {
        console.log(import.meta.env.VITE_SOME_KEY)
      },
      data: () => ({
      }),
    }
    ```
* New: [Deploy with docker.](vuejs.md#deploying)
    And fight to make the environment variables of the docker work, the
    problem is that these environment variables are set at build time, and
    can't be changed at runtime by default, so you can't offer a generic
    fronted Docker and particularize for the different cases. I've literally
    cried for hours trying to find a solution for this until [José Silva came to my rescue](https://medium.com/js-dojo/vue-js-runtime-environment-variables-807fa8f68665).
    The tweak is to use a docker entrypoint to inject the values we want.
* New: [Testing.](vuetify.md#testing)
    I tried doing component tests with Jest, [Vitest](vitest.md) and [Cypress](cypress.md) and found no
    way of making component tests, they all fail one way or the other.
    E2E tests worked with Cypress however, that's going to be my way of action till
    this is solved.
* New: Add Cypress commands.
    For the functions you write a lot you can use commands in `/cypress/support/commands.ts`.
    ```javascript
    Cypress.Commands.add('getById', (selector, ...args) => {
      return cy.get(`[data-cy=${selector}]`, ...args)
    })
    Cypress.Commands.add('getByIdLike', (selector, ...args) => {
      return cy.get(`[data-cy*=${selector}]`, ...args)
    })
    Cypress.Commands.add('findById', {prevSubject: true}, (subject, selector, ...args) => {
      return subject.find(`[data-cy=${selector}]`, ...args)
    })
    ```
    So you can now do
    ```javascript
    cy.getById('submit')
    ```
* New: [Add more ways to select elements.](cypress.md#select-by-position-in-list)
    * Select by position in list
      Inside our list, we can select elements based on their position in the list,
      using `.first()`, `.last()` or `.eq()` selector.
      ```javascript
      cy
        .get('li')
        .first(); // select "red"
      cy
        .get('li')
        .last(); // select "violet"
      cy
        .get('li')
        .eq(2); // select "yellow"
      ```
      You can also use `.next()` and `.prev()` to navigate through the elements.
    *  Select elements by filtering
      Once you select multiple elements, you can filter within these based on another selector.
      ```javascript
      cy
        .get('li')
        .filter('.primary') // select all elements with the class .primary
      ```
      To do the exact opposite, you can use `.not()` command.
      ```javascript
      cy
        .get('li')
        .not('.primary') // select all elements without the class .primary
      ```
* New: [Finding elements.](cypress.md#finding-elements)
    You can specify your selector by first selecting an element you want to search
    within, and then look down the DOM structure to find a specific element you are
    looking for.
    ```javascript
    cy
      .get('.list')
      .find('.violet') // finds an element with class .violet inside .list element
    ```
    Instead of looking down the DOM structure and finding an element within another
    element, we can look up. In this example, we first select our list item, and
    then try to find an element with a `.list` class.
    ```javascript
    cy
      .get('.violet')
      .parent('.list') // finds an element with class .list that is above our .violet element
    ```
* New: [Assert on the content of an attribute.](cypress.md#asserting-about-elements)
    ```javascript
    cy
      .get('a')
      .invoke('attr', 'href')
      .should('eq', 'https://docs.cypress.io')
    ```
* New: [Use the content of a fixture set in a hook in a test.](cypress.md#use-the-content-of-a-fixture-set-in-a-hook-in-a-test)
    If you store and access the fixture data using this test context object, make
    sure to use `function () { ... }` callbacks both for the hook and the test.
    Otherwise the test engine will NOT have this pointing at the test context.
    ```javascript
    describe('User page', () => {
      beforeEach(function () {
        // "this" points at the test context object
        cy.fixture('user').then((user) => {
          // "this" is still the test context object
          this.user = user
        })
      })
      // the test callback is in "function () { ... }" form
     it('has user', function () {
        // this.user exists
        expect(this.user.firstName).to.equal('Jane')
      })
    })
    ```
* New: [Run only failing tests.](cypress.md#issues)
    Cypress doesn't [Allow to rerun failed tests](https://github.com/cypress-io/cypress/issues/4886) but you can use `it.only` on the test you want to run.
* New: [Make HTTP requests with Vue.](vuejs.md#make-http-requests)
    Compare [Fetch API](vuejs.md#fetch-api) and [Axios](vuejs.md#axios) when
    doing http requests to external services.
    Explain how to do them with both methods and arrive to the conclusion
    that if you’re working on multiple requests, you’ll find that Fetch requires you to
    write more code than Axios, even when taking into consideration the setup needed
    for it. Therefore, for simple requests, Fetch API and Axios are quite the same.
    However, for more complex requests, Axios is better as it allows you to
    configure multiple requests in one place.
    If you're making a simple request use the Fetch API, for the other cases use axios because:
    * It allows you to configure multiple requests in one place
    * Code is shorter.
    * It allows you to [place all the API calls under services so that these can be
        reused across components wherever they are
        needed](https://medium.com/bb-tutorials-and-thoughts/how-to-make-api-calls-in-vue-js-applications-43e017d4dc86).
    * It's easy to set a timeout of the request.
    * It supports HTTP interceptors by befault
    * It does automatic JSON data transformation.
    * It's supported by old browsers, although you can bypass the problem with fetch
        too.
    * It has a progress indicator for large files.
    * Supports simultaneous requests by default.
    Axios provides an easy-to-use API in a compact package for most of your HTTP
    communication needs. However, if you prefer to stick with native APIs, nothing
    stops you from implementing Axios features.
    For more information read:
    * [How To Make API calls in Vue.JS Applications by Bhargav Bachina](https://medium.com/bb-tutorials-and-thoughts/how-to-make-api-calls-in-vue-js-applications-43e017d4dc86)
    * [Axios vs. fetch(): Which is best for making HTTP requests? by Faraz
        Kelhini](https://blog.logrocket.com/axios-vs-fetch-best-http-requests/)
* New: [Simulate errors.](cypress.md#simulate-errors)
    ```javascript
    context('Errors', () => {
      const errorMsg = 'Oops! Try again later'
      it('simulates a server error', () => {
        cy.intercept(
          'GET',
          '**/search?query=cypress',
          { statusCode: 500 }
        ).as('getServerFailure')
        cy.visit('https://example.com/search')
        cy.get('[data-cy="search-field"]')
          .should('be.visible')
          .type('cypress{enter}')
        cy.wait('@getServerFailure')
        cy.contains(errorMsg)
          .should('be.visible')
      })
      it('simulates a network failure', () => {
        cy.intercept(
          'GET',
          '**/search?query=cypressio',
          { forceNetworkError: true }
        ).as('getNetworkFailure')
        cy.visit('https://example.com/search')
        cy.get('[data-cy="search-field"]')
          .should('be.visible')
          .type('cypressio{enter}')
        cy.wait('@getNetworkFailure')
        cy.contais(errorMsg)
          .should('be.visible')
      })