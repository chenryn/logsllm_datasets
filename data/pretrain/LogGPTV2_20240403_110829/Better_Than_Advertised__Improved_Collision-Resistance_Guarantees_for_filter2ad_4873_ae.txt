(3)
The time complexity of Ah is the sum of the time complexities of
AH and Bccr. The memory complexity of Ah is the maximum of the
memory complexity of AH and the memory complexity of Bccr.
(Ah).
h
The algorithm Bccr mentioned above (and defined in Fig. 9) is an
extension of Bcr to also return the values a1, a2 expected by Rccr.
We discuss it in more detail in the proof.
Equation (1) tells us that if h is constrained-collision resistant,
then H is collision resistant. Let AH be a practical adversary against
H. Then Ah is also practical because its efficiency is about that
(Ah)
of AH. If h is constrained collision resistant, then AdvRccrS
H(AH) will be at most
will be low. Equation (3) tells us that Advcr
AdvRccrS
(Ah), which means H is collision resistant.
h
Proof. (of Theorem 6.4) The claimed bounds on the complexity
of Ah are clear from its pseudocode.
Adversary Ah takes as input a random (k, s) ∈ h.Keys × S. It
runs AH on input ε and key (k, s) to get a pair of messages (M1, M2)
in Split.Inp. Note this exactly matches the input distribution AH
h
Assume that M1, M2 is a collision for H(k,s). Since Split is suffix-
expects to be given. Adversary Ah can then run the algorithm
Bccr shown in Fig. 9 with inputs ((k, s), M1, M2) for it to extract a
collision and appropriate information about the pre-images of this
collision, if required.
free, Split(M1) (cid:65) Split(M2) and Split(M2) (cid:65) Split(M1).
We may think of Bccr as a similar algorithm to Bcr, with the added
task of finding pre-images for the chaining variables in its colliding
messages. Indeed, Bccr creates the vectors of chaining variables, c1
and c2, and searches for a collision in the same way as Bcr, returning
this message pair at which it found a collision. Thus, Lemma 5.2
guarantees that the pair (m1, c1),(m2, c2) forms a collision for hk.
We must verify that a1, a2 returned by Bccr additionally satisfies
c1 ∈ {s, hk(a1)} and c2 ∈ {s, hk(a2)}. Let m1, c1, n1 and m2, c2, n2
be the values calculated by Bccr when run by AH H .
First suppose that Bccr halts in the middle of the execution of its
for loop. Then it is clear for the manner they were created that a1
will be a pre-image for c1 and a2 will be a pre-image for c2.
Now suppose that Bccr does not halt until after the for loop is
complete. We will separately analyze the case that n1 = n2 and the
case that n1 (cid:44) n2. In the former case the chaining variables c1 and
c2 specifying the collision are c1[1] and c2[1], respectively. Since
these are both equal to s, Ah does not need to provide a pre-image
for them and we are done. In the latter case the above reasoning
tells us that cb = s (because cb corresponds to the shorter vector)
and so a pre-image is not required for it. This will, presumably,
not hold for c3−b (which corresponds to the longer vector), so a
pre-image is required for it. As with our earlier analysis we can see
that a3−b is a pre-image for c3−b under hk. Then for compactness
Ah arbitrarily returns this pre-image for both messages and we are
again done.
Thus, on any input (k, s), adversary Ah finds a constrained
collision in hk when AH finds a collision in H(k,s). This justifies
Equation (3).
□
A CCR h. With the introduction of RccrS security, one might ask
whether this assumption is necessary for any h to produce an MD
transform that is collision resistant. It is, in fact, not necessary,
although it is sufficient. Indeed, the compression function hs
k given
in Fig. 7 is itself not RccrS secure, yet we have shown that it results
in a collision resistant MD transform. We prove this result below.
This shows that an assumption on h even weaker than CCR could
suffice, and the benefit of our framework is that one could easily
do so. However, one has to make some value judgment about the
tradeoff between the assumptions and the result. In the extreme,
the assumption on h could just be that the MD transform on it is
RcrS secure, which is not a useful result. The advantage of RccrS
is that it is appropriately balanced: it is meaningfully weaker than
RcrS, yet the implication that the MD transform is RcrS secure is
still non-trivial.
Proposition 6.5. Let M1 = a1 = (0b , s), M2 = a2 = (1b , s), and
Bhs be the adversary shown in Fig. 10. Then AdvRccrS
(Bhs) = 1.
hs
Put simply, the above tells us that hs is not constrained collision
resistant because Bhs is clearly efficient.
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA899Algorithm Bccr((k, s), M1, M2)
m1 ← Split(M1) ; m2 ← Split(M2) ; n1 ← |m1| ; n2 ← |m2|
c1[1] ← s ; c2[1] ← s
For i = 1, . . . , n1 do c1[i + 1] ← hk((m1[i], c1[i]))
For i = 1, . . . , n2 do c2[i + 1] ← hk((m2[i], c2[i]))
b ← argmind(nd)
For i = 0, . . . , nb − 2 do
(m1, c1) ← (m1[n1 − i], c1[n1 − i])
(m2, c2) ← (m2[n2 − i], c2[n2 − i])
a1 ← (m1[n1 − i − 1], c1[n1 − i − 1])
a2 ← (m2[n2 − i − 1], c2[n2 − i − 1])
If (m1, c1) (cid:44) (m2, c2) then
return ((m1, c1), (m2, c2), a1, a2)
If n1 = n2 then
(m1, c1) ← (m1[1], c1[1]) ; (m2, c2) ← (m2[1], c2[1])
a1 ← 1; a2 ← 2
Return ((m1, c1), (m2, c2), a1, a2)
(m1, c1) ← (m1[n1 − nb + 1], c1[n1 − nb + 1])
(m2, c2) ← (m2[n2 − nb + 1], c2[n2 − nb + 1])
a3−b ← (m3−b[n3−b − nb], c3−b[n3−b − nb])
ab ← a3−b
Return ((m1, c1), (m2, c2), a1, a2)
Adversary Ah(k, s)
(M1, M2) ← AH((k, s), ε)
Return Bccr((k, s), M1, M2)
Figure 9: Adversary Ah for the proof of Theorem 6.4
k
((m, c))
Adversary Bhs(k, s)
Return (M1, M2, a1, a2)
h†
If (m, c) ∈ {(0b, 1∥0c), (1b, 12∥0c−1)}
((m, c))
Return 0∥h′
Adversary Bh′′(k, ε)
((m1, c1), (m2, c2), a1, a2) ← Ah†(k, ε)
Return ((m1, c1), (m2, c2))
Return 1c +1
k
Figure 10: Bhs for Proposition 6.5, h
Bh′′ for Proposition 6.6
†
k for Proposition 6.6, and
We again let b, c ∈ N. Given a good collision resistant func-
tion h′′ : h′′.Keys × ({0, 1}b × {0, 1}c +1) → {0, 1}c, we construct
the compression function h† : h′′.Keys × ({0, 1}b × {0, 1}c +1) →
{0, 1}c +1 shown in Fig. 10.
It is clear that h† is not collision resistant, since for the distinct
inputs (0b , 1∥0c) and (1b , 12∥0c−1) it returns 1c +1. Despite this, we
now show that h† is instead constrained collision resistant.
Proposition 6.6. Given an adversary Ah†, let Bh′′ be the adver-
sary of Fig. 10. Then
AdvRccrS
(Ah†) ≤ Advcr
h′′(Bh′′)
h†
(4)
and both the time and memory complexity of Bh′′ are about that of
Ah†.
Notice that Equation (4) tells us that if h′′ is collision resistant,
then h† is constrained collision resistant. Let Ah† be a practical ad-
versary against h†. Then Bh′′ is also practical because its efficiency
is about that of Ah†. This means that if h′′ is collision resistant,
(Ah†) will
Advcr
h′′(Bh′′), which means h† is constrained collision
be at most Advcr
resistant.
h′′(Bh′′) is low. Equation (4) tells us that AdvRccrS
h†
†
k
†
k
†
k
((m1, c1)) = h
((m2, c2)), c1 ∈ {s, h
Proof. (of Proposition 6.6) The running time claim is analogous
to our prior ones.
We claim that if the tuple (M1, M2, a1, a2) returned by Ah† is a
constrained collision for h† then Bh′′ will return a collision for h′′
k .
Adversary Bh′′ takes input k ∈ h.Keys. It then runs Ah† on in-
put the given key k and ε to get the tuple ((m1, c1),(m2, c2), a1, a2),
where (m1, c1),(m2, c2) ∈ {0, 1}b × {0, 1}c +1 and a1, a2 ∈ {0, 1}c +1.
Since Ah† returns a constrained collision, it must be true that
(m1, c1) (cid:44) (m2, c2), h
(a1)},
and c2 ∈ {s, h
(a2)}.
†
k will only output strings of all 1s or strings that start
with 0, it can never output 1∥0c or 12∥0c−1. Thus, neither string
has a pre-image, so (m1, c1),(m2, c2) (cid:60) {(0b , 1∥0c),(1b , 12∥0c−1)}.
†
†
On input (m1, c1), the if statement in h
k will be false, so h
k will
†
return 0∥h′′
k will return
†
†
0∥h′′
((m2, c2)). Since h
((m2, c2)), we can conclude
((m1, c1)) = h
that h′′
((m1, c1)) = h′′
((m2, c2)), therefore forming a collision for
k
k
h′′
k . Adversary Bh′′ returns this message pair, so it finds a colli-
sion in h′′
k whenever Ah† finds a constrained collision for h†. This
justifies Equation (4), completing the proof.
□
((m1, c1)). Similarly, on input (m2, c2), h
Since h
†
k
k
k
k
k
Proof. (of Proposition 6.5) As shown in the proof of Proposi-
tion 6.1, M1 and M2 form a collision for hs. Notice that for M1 =
(0b , s), a preimage for s is simply M1 itself. Similarly M2 is a preim-
age for s. We thus let a1 = M1 and a2 = M2. Therefore, hs is not
constrained collision resistant.
□
A natural question that might arise is whether RccrS security
is actually strictly weaker than RcrS. With the revelation that hs
k
in Fig. 7 is not RcrS secure, is there any compression function
that is RccrS secure yet is not RcrS secure? We claim that such a
compression function does exist and give an example in Fig. 10.
7 A MINIMAL TRANSFORM
Having to use a suffix-free splitting function necessarily adds some
computational overhead to the computation of the MD hash func-
tion over what would have been necessary if we were able to use a
minimal splitting function. For instance, one such splitting func-
tion could be padding M with a single one bit and then with as
many zeros as necessary to be of a block size. If the message M
is particularly short, this padding scheme may only require one
invocation of h when a suffix-free padding function would likely
have increased the length of M enough to require a second such
invocation.
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA900As such, in some use cases it would be beneficial to use such a
minimal splitting function in the transform. We saw earlier that
we cannot hope to use a splitting function which is not suffix-
free assuming only that the underlying compression function is
collision resistant, so it may seem that this efficiency gain would
be countered by a loss in provable security. In this section we show
this is not the case, establishing that if the compression function is
constrained collision resistant and it is difficult to find a pre-image
for a randomly chosen s from S, then it suffices for the splitting
function to be injective. This result serves to generalize, formalize,