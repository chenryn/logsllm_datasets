保存数据之间关系的过程称为“简单序列化”
有一些方法可以将数据保存到磁盘以备之后使用。我们将单纯地保存数据到磁盘，而不
简单序列化
我们将这些需要序列化的问题划分为两类介绍：简单和关系。
的“今后”是指当你计划检验数据的时候，而不是搜集数据的程序需要访问它的时候。
一些主机时有多快。你可以保存ping的时间到一个持久数据文件中以备今后使用。这里
该主机具有潜在的网络问题，你决定每15分钟运行一个脚本来查看它ping网络上的其他
本的时候。你可以用持久数据文件的样式保存数据。在另一种情况下，你有一台主机，
修改了。文件中的数据是你希望保存以供今后使用的，“今后”是指你下一次运行该脚
目录中文件修改日期的记录，你偶尔需要运行它来查看自从上次你运行之后什么文件被
那么，什么样的数据需要保存起来以备今后使用呢？也许你有一个脚本，保存了对上次
“pickle”一词会令你想到农业中或烹调中的腌渍技术，通常是为了保存食品，将食品
XML或是YAML。另一些时候，格式不是人们可以直接可读的，例如BerkeleyDB文件
些格式，然后写数据到磁盘，是实现这一目的典型方法。有时，格式是可读的，例如
起来以备今后使用，即使保存它的进程终止了，数据也会幸存下来。通过转换数据到一
数据持久性，在一个简单通用的意义上是指为以后的用户保留数据。这表示数据被保留
（bdb）或是一个SQLite数据库。
www.TopSage.com
。我们将在关系序列化一节中介绍简单序
数据持久性
第12章
---
## Page 368
列表，其中列出了可以被pickle的对象类型：
程。之后的过程正相反，再一次开始Python进程，从磁盘读取对象，然后就可以与该对
暂时放到一个坛子中，以备日后可以使用。这一烹调概念较好的诠释了pickle模块发生
354
你可以学习pickle文件格式，并手动创建一个，但是我们不建议这样做。
以下是pickle文件的样式：
以下是一个使用pickle模块，如何序列化你的对象到磁盘的示例：
象进行交互了。
了什么。使用pickle模块，你提取一个对象，然后将对象写入磁盘，最后退出Python进
.e.s
jmjones@dinkgutsy:~$ cat some_dict.pkl
-rw-r--r-- 1 jmjones jmjones 30 2008-01-20 07:13 some_dict.pkl
jmjones@dinkgutsy:~$ 1s -1 some_dict.pk1
In [5]: pickle_file.close()
In [4]: pickle.dump(some_dict, pickle_file)
In [3]: pickle_file = open('some_dict.pkl', 'w')
In [2]: some_dict = {'a': 1, 'b': 2}
In[1]:import pickle
(dpo
一些类的实例，要求这些类的_dict_或是_setstate_（)是可pickle的。
在模块顶级定义的类；
在模块顶级定义的内建函数；
元组、列表、集合以及仅包括可pickle对象的字典;
整数、长整数、浮点数、复合数；
空、真、假；
定义在模块顶层的函数；
普通和Unicode字符串；
第12章
www.TopSage.com
ODG
---
## Page 369
以下是一个示例，演示了从一个包含了多个对象的pickle文件中unpickle对象并进行打
印：
完全相同的方法，只是没有迭代和多重dump()调用。
项到pickle文件中。值得注意的是，这与之前的写一个对象到一个pickle文件中的示例是
我们创建一个字典列表，创建一个可写的文件对象，迭代字典中的列表，并序列化每一
对象放入一个单独的pickle文件中：
中，只要有足够的硬盘空间，或是文件系统允许。以下是一个示例，将一些dictionary
的对象与pickle文件之间保持一对一的关系。你可以将多个对象放人到一个pickle文件
名。需要记住，名称仅是引用某一个对象的一种方法。注意到这一点很有意义：不需你
以下是如何unpickle一个pickle文件:
值得注意的是，
In [3]: while 1:
In [2]: pickle_file = open('list_of_dicts.pkl', 'r')
In [1]: import pickle
In [6]: pickle_file.close()
In [5]: for d in list_of _dicts:
In [4]: pickle_file = open('list_of_dicts.pkl', 'w')
In [3]: import pickle
out[2]: [′0°: 0],{’1′: 1], {’2′: 2],{'3′: 3],{′4′: 4}]
In [1]: list_of _dicts = [{str(i): i} for i in range(5)]
In [2]: pickle_file = open('some_dict.pkl', ‘'r')
In [1]: import pickle
Out[4]: {'a': 1,
In [4]: another_name_for_some_dict
In [3]: another_name_for_some_dict = pickle.load(pickle_file)
：
：
：
：
except EOFError:
try:
 pickle.dump(d, pickle_file)
在pickle之前我们命名的对象，在unpickle相同对象时没有再对对象命
print "EOF Error"
 print pickle.load(pickle_file)
break
www.TopSage.com
数据持久性丨355
ODG
---
## Page 370
以下是一个模块，载人具有自定义类的模块，然后从pickle文件中加载自定义的对象；
个元素到对象中，然后进行序列化。运行该模块，可以看到没有输出结果。
以下是一个模块，载人包含自定义类的模块，并且pickle一个自定义对象：
pickle和unpickle操作：
块，在接下来的两个示例中将会使用。这个模块包括一个自定义的类，我们将对其进行
不仅可以简单pickle内建对象，也可以pickle自己创建的对象类型。以下是一个模
件中的字典是相同的（相同的顺序）。
pickle对象，直到遇到一个EOFError。可以看到从pickle文件导出的字典与放入pickle文
创建一个可读文件对象，指向在之前示例中创建的文件，并试图从文件中加载一个
356
在这个示例中，我们加载带有自定义类的模块，从自定义类中实例化一个对象，添加一
#!/usr/bin/env python
#1/usr/bin/env python
pickle_file =. open('custom_class.pkl', ‘w')
EOF Error
pickle_file.close()
pickle.dump(my_obj,
my_obj.add_item(3)
my_obj.add_item(2)
my_obj = custom_class.Myclass()
import custom_class
import pickle
#1/usr/bin/env python
class MyClass(object):
{'o':
import custom_class
import pickle
4'：
obj.add_item(1)
第12章
def add_item(self, item):
def
def
+
3
return
*Custom Class MyClass Data:: %s" % str(self.data)
(self)
pickle_file)
www.TopSage.com
PDG
---
## Page 371
相同类型的对象。所有之前的关于pickle的示例都运行得非常好，但是还有一个可选项
力查找那些含有你自行定义的类的模块并加载，这样就可以返回一个与你初始pickle的
最后一行的输出表明有一个加载错误，因为pickle无法加载自定义的模块。pickle将尽
输出结果：
在复制它（以及pickle文件）到另一个目录并从这里运行之后，以下是来自相同模块的
以下是来自nonimport模块的输出结果：
模块：
码能够找到自定义类所在的模块，则是必须的。以下是一个模块，没有载人自定义的类
对于unpickle代码，无须明确地加载正在unpickle的自定义的类。但是，为了unpickle代
以下是从运行的unpickle文件得到的输出结果：
Traceback (most recent call last):
jmjones@dinkgutsy:~/code/cantfind$ python custom_class_unpickle_noimport.py
Custom Class MyClass Data:: [1, 2, 3]
jmjones@dinkgutsy:/codes python custom_class_unpickle_noimport.py
pickle_file = open('custom_class.pkl', 'r')
##import custom_class ##commented out import of custom class
#!/usr/bin/env python
pickle_file.close()
my_obj = pickle.load(pickle_file)
import pickle
Custom Class MyClass Data::[1, 2, 3]
pickle_file.close()
print my_obj
my_obj = pickle.load(pickle_file)
pickle_file = open('custom_class.pkl', 'r')
File "/usr/lib/python2.5/pickle.py", line 1124, in find_class
File
dispatch[key](self)
return Unpickler(file).
import
load(）
www.TopSage.com
数据持久性丨357
业
PDG
---
## Page 372
pickle文件的无格式内容：
上述操作实际上是不必要的，因为我们可以使用cat输出并读取文件内容。以下是默认的
以下是默认pickle文件的十六进制表示：
pickle文件的十六进制表示：
打开binary.pkl。在这些对象之间调用dump的仅有的差别是，调用二进制dump具有更多
可读格式。第二个创建的pickle文件（名为binary.pkl）包括二进制格式的pickle数据。需
第一个创建的pickle文件（名为default.pkl）包括pickle数据，该pickle数据采用默认的
认协议和二进制协议的对比：
到pickle对象会花费大量的时间，或许会希望考虑使用二进制协议。以下是一个使用默
乎所有可读的格式，这在之前已经演示过。另一个协议选择是二进制格式。如果你注意
时，pickle使用默认的协议。协议是对文件如何进行格式化的说明。默认的协议使用几
还没有提及。当pickle一个类似的对象pickle.dump（object_to_pickle,pickle_file)
358
的参数：“-1”
要注意的是，以正常写入模式（‘w'）打开default.pkl，但是以二进制可写模式（wb")
00000000-80 027d 71 00 55 01.61
 jmjones@dinkgutsy:~/code$ hexcat binary.pkl
S'a'
jmjones@dinkgutsy:~/code$ cat default.pkl
00000010-73 2e
In [8]: binary_pickle_file.close()
In [7]: default_pickle_file.close()
In [6]: pickle.dump(d, binary_pickle_file, -1)
In [5]: pickle.dump(d, default_pickle_file)
In [4]: d = {'a': 1}
In [3]: binary_pickle_file = open('binary.pkl', 'wb')
In [2]: default_pickle_file = open('default.pkl', 'w')
In [1]:import pickle
(dpo
第12章
't1'td·,e,s'0dp) e0 te 6 e0 te ol e0 17 19 1z 85 e0 0e 0L t9 8z -
，这表示使用最高层的协议（当前是二进制协议）。以下是一个二进制
www.TopSage.com
71014b01732e
..}q.U.aq.K.s.
S.
---
## Page 373
shelve对象，然后退出IPython：
例，演示了由于没有关闭shelve对象而丢失了修改。首先，我们创建并持久化我们的
果不使用close()关闭shelve对象，对其进行的任何修改不具有持久性。以下是一个示
shelve有一些技巧。我们已经在前面介绍过：当你执行操作时，必须调用close(）。如
shelve处理数据时，你需要在shelve对象上调用close()。
实例化dict类或是使用大括号（{}）来创建一个shelve对象。另一个差异是，当你使用
在使用shelve和使用无格式字典之间的差异在于你可以通过使用sheIve.open（)而不是
中，然后再次打开它，访问其中的内容：
Python字典相似。以下是一个示例，演示了打开一个shelve文件，将数据序列化到其
存储，并且很容易地将它们取回来。在shelve持久数据存储中保存对象与简单地使用
接口，可以简化对多个对象的持久化。通过它，我们保存多个对象在相同的持久对象
另一个持久化的选择是使用s helve模块。shelve提供一个对象持久化的简单且实用的
shelve
cPickle语法与Pickle等同。
你的对象会花去一些时间，或许希望考虑尝试cPickle模块。对于“普通的”pickle,
表明的，cPickle是由C语言实现。正如我们建议使用二进制文件，如果你注意到pickle
在Python标准库中，有另一个应该考虑使用的Pickle库实现，称为cPickle。正如名字所
cPickle
In [2]: d = shelve.open('lossy.s')
In [1]: import shelve
{.asisxad 1m 4eyt Kax e st stus. :,Ax.] :[]ano
In [4]: d.
In [3]: d['key'] =.'this is a key that will persist'
{,anten swos, :,Kax.} :[]ano
In [7]: d2
In [6]: d2 = shelve.open('example.s')
In [5]:d.close()
In [4]: d['key'] = 'some value'
Out[3]:{
In [3]: d
In [2]: d = shelve.open('example.s')
In [1]: import shelve
www.TopSage.com
数据持久性丨359
PDG
---
## Page 374
360
是我们搞错了。以下是打开前一示例中的shelve文件并反序列化的结果：
由于你在sheIve对象上调用了close()，我们或许期望“密钥”的值是list[1]的值。但
给变量赋值的情况下修改。这里创建了一个shelve对象，创建一个包含可变对象的密钥
另一个技巧在于修改可变对象（mutable object）。记住，可变对象的值可以在不重新
的。
现在，再次启动IPython，再次打开相同的shelve文件，然后查看我们有些什么：
因此，
关闭shelve对象的情况下退出：
接下来，再次启动IPython，
（在这个示例中是一个列表），修改可变对象，然后关闭shelve对象：
In [5]: d.close()
In [4]: d['key'].append(1)
In [3]: d['key'] =[]
In [2]: d = shelve.open('mutable_lossy.s')
In [1]: import shelve
In [2]: d = shelve.open('lossy.s')
In [1]: import shelve
In [4]: d['another_key'] = 'this is an entry that will not persist'
In [2]: d = shelve.open('lossy.s')
In [1]:import shelve
In [5]:d.close()
，确保关闭了所有shelve对象，这些对象是已经修改过的并且其数据是希望保存
第12章
，打开相同的shelve文件，创建另一个元素，然后在没有明确
www.TopSage.com
PDG
---
## Page 375
的shelve对象上有大量对象，你或许会考虑不会将writeback标志设置为True。
些对象是你在shelve对象上正在访问的对象）数量的比例增长。因此如果在你正在访问
缓存并且被持久化（无论修改或没有修改），内存的使用和文件同步时间将按对象（这
于处理可变对象的情况，是非常有用的。但是它确实是双赢的。由于被访问的对象会被
元素将被缓存在内存中，并且当close()在shelve对象中被调用时，实现持久化。这对
之一是writeback 标志。如果writeback标示被设置为真，被访问的shelve对象的任何
传递到shelve.open()的参数是shelve文件的文件名。其实还有一些其他的选项；其中
接下来，是广泛和全包含的方法：修改shelve对象的writeback标志。我们已经介绍的
我们创建和附加的列表已经被保留了。
当我们反序列化shelve对象时，以下是得到的结果：
值shelve对象，就像这样：
法，另一种是广义、全包含的方法。首先，在专门或面向目标的方法中，你可以重新赋
象默认不会被pickle。但是有一些方法可以来解决这一问题。一种是专门、目标性的方
这没有什么奇怪或是出人意料的。事实上，它来自shelve文档。问题是修改持久性对