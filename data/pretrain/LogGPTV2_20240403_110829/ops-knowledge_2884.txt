User: In a Kubernetes cluster, how to deploy a container application and configure its resource limits and necessary environment variables?
Assistant: 1. Create a deployment Manifest file, specify the container image and running parameters, for example: ``` apiVersion: apps/v1 kind: Deployment metadata: name: my-app spec: replicas: 3 selector: matchLabels: app: my-app template : metadata: labels: app: my-app spec: containers: - name: my-app image: my-app-image:latest env: - name: DATABASE_URL value: "postgres://user:password@postgres:5432/ mydb" resources: limits: cpu: "0.5" memory: "512Mi" requests: cpu: "0.25" memory: "256Mi" ``` 2. Apply the Manifest file to the Kubernetes cluster: ``` kubectl apply -f my -app.yaml ``` This will create a Deployment named `my-app` with 3 replicas, each running a container image named `my-app`. There will be an environment variable named `DATABASE_URL` set in the container image. Additionally, the CPU and memory resource limits of the containers are also set to `0.5/512Mi` and `0.25/256Mi`. 3. View the status of the deployment: ``` kubectl get deployment my-app ``` This will return the details of the deployment, including the number of replicas, the number of available replicas, the node where it is located, etc. 4. View the deployed Pods: ``` kubectl get pods -l app=my-app ``` This will return a list of Pods that contain the label `my-app`, the replica created by the Deployment. 5. View the resource usage of the containers in the Pod: ``` kubectl top pod <pod-name> ``` This will return the CPU and memory usage of the containers in the Pod. Through the above steps, the deployment of a container application with resource constraints and environment variables in the Kubernetes cluster is completed.