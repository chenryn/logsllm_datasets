Let us now consider the second sample domain - Zynga
(see Fig. 8). We can see that Amazon EC2 cloud service pro-
vides computational resources required for the games while
Akamai CDN hosts most of the static content. Some ser-
vices/games like MaﬁaWars are served directly by Zynga
owned servers. Interestingly, about 500 Amazon serverIP
addresses are contacted and they handle 86% of all Zynga
ﬂows. Akamai serves fewer requests (7%); yet, 30 diﬀerent
serverIP are observed.
Given that the oﬀ-line analyzer relies on actual measure-
ment of network traﬃc, it is able to capture both the service
popularity among the monitored customers, and the bias
induced by the server selection and load balancing mech-
anisms. To elaborate this further, let us consider Fig. 9.
Each of the three sub-ﬁgures corresponds to a diﬀerent con-
tent provider (i.e., the second-level domain name). For each
of these content providers we plot the access patterns in
three of our traces (EU1-ADSL1, US-3G, and EU2-ADSL).
In other words, the x-axis in each of these graphs are the
CDNs hosting the content and the y-axis represents diﬀer-
ent traces. Notice that for every CDN, the ﬁgure shows all
the accessed serverIP addresses that belong to the CDN.
Hence the width of the column representing each CDN is
diﬀerent. Also, the gray scale of each block in the graph
represents the frequency of access; the darker is a cell, the
larger is the fraction of ﬂows that a particular serverIP
was responsible for. The “SELF” column reports cases in
which the content providers and content hosts are the same
organization.
The top graph in Fig. 9 shows the access pattern for Face-
book. We can see that in all the datasets, most of the
Facebook content is hosted on Facebook servers. The only
other CDN used by Facebook is Akamai, which uses dif-
ferent serverIP in diﬀerent geographical regions.
In the
middle graph, we can see that Twitter access patterns are a
little diﬀerent. Although, Twitter relies heavily on its own
servers to host content, they also rely heavily on Akamai to
serve content to users in Europe. However, the dependence
on Akamai is signiﬁcantly less the US. The bottom graph
shows the access patterns for Dailymotion, a video stream-
ing site. Dailymotion heavily relies on Dedibox to host con-
tent both in Europe and US. While they do not host any
content in their own servers in Europe, they do serve some
content in the US. Also, in the US they rely on other CDNs
like Meta and NTT to serve content while they rely a little
bit on Edgecast in Europe.
5.4 Content Discovery
Although the spatial discovery module provides invaluable
insight into how a particular resource is hosted on various
Figure 8: Zynga.com domain structure served by
two CDNs. US-3G.
CDNs, it does not help in understanding the complete be-
havior of CDNs. In the content discovery module our goal is
to understand the content distribution from the perspective
of CDNs and cloud service providers. Tab. 5 shows the top-
10 second-level domains served by the Amazon EC2 cloud
in EU1-ADSL1and US-3G. Notice that one dataset is from
Europe and the other from US. We can clearly see that the
top-10 in the two datasets do not match. In fact, some of the
popular domains hosted on Amazon for US users like admar-
vel, mobclix, and andomedia are not accessed on Amazon by
European users, while other domains like cloutfront, invite-
media, and rubiconproject are popular in both the datasets.
This clearly shows that the popularity and access patterns of
CDNs hosting content for diﬀerent domains depend on geog-
raphy; extrapolating results from one geography to another
might result in incorrect conclusions.
5.5 Automatic Service Tag Extraction
Another interesting application of DN-Hunter is in iden-
AkamaiServers 2Flows 17%CDNetworksServers 15Flows 3%EdgecastServers 1Flows 59%LinkedinServers 3Flows 22%linkedin.commediaNmediastaticNmediaNplatformwww7AkamaiServer 30Flows 7%AmazonServers 498Flows 86%ZyngaServer 28Flows 7%zynga.comsupportpetvillestatictreasurefrontiervilleiphone.statsfishville.facebookfrontiercityvillecafefishpetvilletoolbarrewardssslrewardszbartreasureaccountsglb.zyngawithfriendswww|mwms|navN|zpayN|forum|secureNtrackstreetracing.myspaceNmafiawarsvampirespokerassetsavatarszgnzpayzbar12fb_client_Nfb_NdevN.ccloughmyspace.espfacebookNfacebookmobile421Port Keywords
25
110
143
554
587
995
1863
(91)smtp, (37)mail, (22)mxN, (19)mailN,
(18)com, (17)altn, (14)mailin,
(13)aspmx, (13)gmail
(240)pop, (151)mail, (68)popM, (33)mailbus
(25)imap, (22)mail, (12)pop, (3)apple
(1)streaming
(10)smtp, (3)pop, (1)imap
(101)pop, (37)popN, (31)mail, (20)glbdns
(20)hot, (17)pec
(21)messenger, (5)relay, (5)edge, (5)voice,
(2)msn, (2)com, (2)emea
GT
SMTP
POP3
IMAP
RTSP
SMTP
POP3S
MSN
Table 6: Keyword extraction example considering
well-known ports. EU1-FTTH.
Port Keywords
1080
1337
2710
5050
(51)opera, (51)miniN
(83)exodus, (41)genesis
(62)tracker, (9)www
(137)msg, (137)webcs,
(58)sip, (43)voipa
(27)americaonline
(1170)chat
(191)courier, (191)push
(15022)mtalk
(88)tracker, (19)trackerN,
(11)torrent, (10)exodus
(32)simN, (32)agni
(20)simN, (20)agni
(92)useful, (88)broker
5190
5222
5223
5228
6969
12043
12046
18182
GT
Opera Browser
BT Tracker
BT Tracker
Yahoo Messager
AOL ICQ
Gtalk
Apple push services
Android Market
BT Tracker
Second Life
Second Life
BT Tracker
Table 7: Keyword Extraction for frequently used
ports; Well-known ports are omitted. US-3G.
with TCP port 1337 immediately shows that this port in US-
3G dataset is related to www.1337x.org BitTorrent tracker.
5.6 Case Study - appspot.com Tracking
In this section, we want to present a surprising phenomenon
that we discovered using DN-Hunter’s ability to track do-
mains. Let us consider the domain appspot.com. Appspot
is a free web-apps hosting service provided by Google. The
number of applications, CPU time and server bandwidth
that can be used for free are limited. Using the labels for
various ﬂows in the labeled ﬂows database, we extract all
traﬃc associated with services. This allows to understand
the kind of applications and services that are hosted in the
Appspot cloud.
Fig. 10 shows the most relevant applications hosted on
appspot as a word cloud where the larger/darker fonts rep-
resent more popular applications. Although appspot is in-
tended to host legacy applications, it is easy to see that
users host applications like “open-tracker”, “rlskingbt”, and
the like. A little more investigation reveals that these appli-
cations actually host BitTorrent trackers for free. With the
help of the information from DN-Hunter and also the Tstat
DPI deployed at the European ISP, we ﬁnd that there are
several trackers and other legacy applications running in the
appspot.com site. We present the ﬁndings in Tab. 8. As we
can see, BitTorrent trackers only represent 7% of the appli-
cations but constitute for more ﬂows than the other applica-
tions. Also, when considering the total bytes exchanged for
each of these services, the traﬃc from client-to-server gen-
Figure 9: Organizations served by several CDN ac-
cording to viewpoint.
Rank
1
2
3
4
5
6
7
8
9
10
US-3G
amazon.com
cloudfront.net
invitemedia.com
%
10
10
7
rubiconproject.com 7
5
5
4
3
3
3
andomedia.com
sharethis.com
mobclix.com
zynga.com
admarvel.com
amazonaws.com
twimg.com
EU1-ADSL1
cloudfront.net
playﬁsh.com
sharethis.com
%
20
16
5
4
4
4
2
rubiconproject.com 2
2
1
invitemedia.com
amazonaws.com
amazon.com
zynga.com
imdb.com
Table 5: Top-10 domains hosted on the Amazon EC2
cloud.
tifying all the services/applications running on a particular
layer-4 port number. This application is only feasible due to
the ﬁned grained traﬃc visibility provided by DN-Hunter.
To keep the tables small, we only show the results extracted
on a few selected layer-4 ports for two data sets - EU1-FTTH
(Tab. 6) and US-3G(Tab. 7). In these tables we show the
list of terms along with the weights returned by the Service
Tag Extraction Analytics algorithm (Algorithm 4). The last
column in each of these tables is the ground truth obtained
using Tstat DPI and augmented by Google searches and our
domain knowledge.
We can clearly see that the most popular terms extracted
in both the datasets in fact represents the application/service
on the port. Some of them like pop3, imap, and smtp are
very obvious by looking at the top keyword. However, some
of the other are not very obvious, but can be derived very
easily. For example, consider the port 1337. TCP port 1337
is not a standard port for any service and even a google
search for TCP port 1337 does not yield straight forward re-
sults. However by adding “exodus” and “genesis”, the main
keywords extracted in DN-Hunter, to the google search along
facebook.comSELFakamaiUS-3GEU2-ADSLEU1-ADSL1 0 0.01 0.02 0.03 0.04 0.05twitter.comSELFakamaiEU1-ADSL1US-3GEU2-ADSLEU1-ADSL1 0 0.01 0.02 0.03 0.04 0.05dailymotion.comSELFdediboxedgecastmetanttUS-3GEU2-ADSLEU1-ADSL1 0 0.01 0.02 0.03 0.04 0.05422Figure 10: Cloud tag of services oﬀered by Google
Appspot. EU1-ADSL2 during live deployment.
Service Type Services Flows
186K
56
Bittorrent
Trackers
General
Services
C2S
S2C
202MB 370MB
824
77K
320MB
5GB
Table 8: Appspot services. EU1-ADSL2 live.
erated by the trackers is a signiﬁcantly large percentage of
the overall traﬃc.
In Fig. 11 we plot the timeline (in 4hr intervals) of when
the trackers were active over a period of 18 days. A dot
represents that the tracker was active at that time interval.
We assign each tracker an id, starting at 1 and incremen-
tally increasing based on the time when the tracker was ﬁrst
observed. Of all the 45 trackers seen in the 18 day period,
about 33% (colored in red, ids 1-15) of them remained active
for all the 18 days. Trackers with ids 26-31 (colored in blue)
exhibit a unique pattern of on-oﬀ periods. In other words,
all of these trackers were accessed during the same time in-
tervals. Such a synchronized behavior indicates, with high
probability, that one BitTorrent client was part of a swarm,
so that when the client was active, the tracker was accessed.
Similar considerations hold for the trackers with ids 33-34
(colored in green), which was seen accessed on May 5th for
the ﬁrst time.
Finally, trackers with ids larger than 33 highlight a birth
process according to which a new tracker is born and ac-
cessed by only a few BitTorrent clients. This is due to the
particular environment the trackers live: since Appspot lim-
its the amount of resource an application can use for free,
new trackers are born once they run out to resources. In-
deed, checking the status of the trackers during May 15th
2012, we veriﬁed that most of them, while still existing
as FQDN, run out of resources and made unavailable by
Google. They live as zombies, and some BitTorrent clients
are still trying to access them.
6. DIMENSIONING THE FQDN CLIST
In Sec. 3, we presented the design of the DNS resolver.
One of the key data structures of the DNS resolver is the
FQDN Clist. Choosing the correct size for the Clist is critical
to the success of DN-Hunter. In this section we will present
a methodology to choose the correct value of L (size of the
Clist) and the real-time constraint implication.
Fig. 12 shows the Cumulative Distribution Function (CDF)
of the “ﬁrst ﬂow delay”, i.e., the time elapsed between the ob-
servation of the DNS response directed to clientIP and the
ﬁrst packet of the ﬁrst ﬂow directed to one of the serverIP
addresses in the answer list. Semilog scale is used for the
sake of clarity. In all datasets, the ﬁrst TCP ﬂow is observed
Figure 11: Temporal evolution of the BitTorrent
trackers running on Appspot.com. EU1-ADSL2
during live deployment.
Figure 12: Time elapsed between DNS response and
the ﬁrst TCP ﬂow associated to it.
after less than 1s in about 90% of cases. Access technology
and sniﬀer placement impact this measurement; for instance,
FTTH exhibits smaller delays, while the 3G technology suf-