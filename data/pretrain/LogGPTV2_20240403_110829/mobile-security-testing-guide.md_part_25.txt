26f6964204b657973746f7265204b65793059301306072a8648ce3d020106082a8648ce3d030107034200043849a20fde26c34b0088391a
5827783dff93880b1654088aadfaf57a259549a1743c4b5245cf2685cf91054367cd4fafb9484e70593651011fc0dcce7621c68fa382013
13082012d300b0603551d0f0404030207803081fc060a2b06010401d6790201110481ed3081ea0201020a01000201010a010104202a4382
d7bbd89d8b5bdf1772cfecca14392487b9fd571f2eb72bdf97de06d4b60400308182bf831008020601676e2ee170bf831108020601b0ea8
dad70bf831208020601b0ea8dad70bf853d08020601676e2edfe8bf85454e044c304a31243022041d636f6d2e676f6f676c652e61747465
73746174696f6e6578616d706c65020101312204205ad05ec221c8f83a226127dec557500c3e574bc60125a9dc21cb0be4a00660953033a
1053103020102a203020103a30402020100a5053103020104aa03020101bf837803020117bf83790302011ebf853e03020100301f060355
1d230418301680143ffcacd61ab13a9e8120b8d5251cc565bb1e91a9300a06082a8648ce3d0403020348003045022067773908938055fd6
34ee413eaafc21d8ac7a9441bdf97af63914f9b3b00affe022100b9c0c89458c2528e2b25fa88c4d63ddc75e1bc80fb94dcc6228952d04f
812418",
"308202783082021ea00302010202021001300a06082a8648ce3d040302308198310b300906035504061302555331133011
06035504080c0a43616c69666f726e69613116301406035504070c0d4d6f756e7461696e205669657731153013060355040a0c0c476f6f6
76c652c20496e632e3110300e060355040b0c07416e64726f69643133303106035504030c2a416e64726f6964204b657973746f72652053
6f667477617265204174746573746174696f6e20526f6f74301e170d3136303131313030343630395a170d3236303130383030343630395
a308188310b30090603550406130255533113301106035504080c0a43616c69666f726e696131153013060355040a0c0c476f6f676c652c
20496e632e3110300e060355040b0c07416e64726f6964313b303906035504030c32416e64726f6964204b657973746f726520536f66747
7617265204174746573746174696f6e20496e7465726d6564696174653059301306072a8648ce3d020106082a8648ce3d03010703420004
eb9e79f8426359accb2a914c8986cc70ad90669382a9732613feaccbf821274c2174974a2afea5b94d7f66d4e065106635bc53b7a0a3a67
1583edb3e11ae1014a3663064301d0603551d0e041604143ffcacd61ab13a9e8120b8d5251cc565bb1e91a9301f0603551d230418301680
14c8ade9774c45c3a3cf0d1610e479433a215a30cf30120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020
284300a06082a8648ce3d040302034800304502204b8a9b7bee82bcc03387ae2fc08998b4ddc38dab272a459f690cc7c392d40f8e022100
eeda015db6f432e9d4843b624c9404ef3a7cccbd5efb22bbe7feb9773f593ffb",
"3082028b30820232a003020102020900a2059ed10e435b57300a06082a8648ce3d040302308198310b3009060355040613
0255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d4d6f756e7461696e2056696577311530130603550
40a0c0c476f6f676c652c20496e632e3110300e060355040b0c07416e64726f69643133303106035504030c2a416e64726f6964204b6579
73746f726520536f667477617265204174746573746174696f6e20526f6f74301e170d3136303131313030343335305a170d33363031303
63030343335305a308198310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d
4d6f756e7461696e205669657731153013060355040a0c0c476f6f676c652c20496e632e3110300e060355040b0c07416e64726f6964313
3303106035504030c2a416e64726f6964204b657973746f726520536f667477617265204174746573746174696f6e20526f6f7430593013
06072a8648ce3d020106082a8648ce3d03010703420004ee5d5ec7e1c0db6d03a67ee6b61bec4d6a5d6a682e0fff7f490e7d771f44226db
db1affa16cbc7adc577d2569caab7b02d54015d3e432b2a8ed74eec487541a4a3633061301d0603551d0e04160414c8ade9774c45c3a3cf
0d1610e479433a215a30cf301f0603551d23041830168014c8ade9774c45c3a3cf0d1610e479433a215a30cf300f0603551d130101ff040
530030101ff300e0603551d0f0101ff040403020284300a06082a8648ce3d040302034700304402203521a3ef8b34461e9cd560f31d5889
206adca36541f60d9ece8a198c6648607b02204d0bf351d9307c7d5bda35341da8471b63a585653cad4f24a7e74daf417df1bf"
]
}
}
185
Android Cryptographic APIs
In the above JSON snippet, the keys have the following meaning: fmt : Attestation statement format identifier
authData : It denotes the authenticator data for the attestation alg : The algorithm that is used for the Signature
sig : Signature x5c : Attestation certificate chain
Note: The sig is generated by concatenating authData and clientDataHash (challenge sent by the server) and
signing through the credential private key using the alg signing algorithm and the same is verified at the server-side by
using the public key in the first certificate
For more understanding on the implementation guidelines, Google Sample Code can be referred.
For the security analysis perspective the analysts may perform the following checks for the secure implementation of
Key Attestation:
Check if the key attestation is totally implemented at the client-side. In such scenario, the same can be easily
bypassed by tampering the application, method hooking, etc.
Check if the server uses random challenge while initiating the key attestation. As failing to do that would lead to
insecure implementation thus making it vulnerable to replay attacks. Also, checks pertaining to the randomness of
the challenge should be performed.
Check if the server verifies the integrity of key attestation response
Check if the server performs basic checks such as integrity verification, trust verification, validity, etc. on the
certificates in the chain.
Decryption only on Unlocked Devices
For more security Android Pie introduces the unlockedDeviceRequied flag. By passing true to the
setUnlockedDeviceRequired method the app prevents its keys stored in AndroidKeystore from being decrypted when
the device is locked, and it requires the screen to be unlocked before allowing decryption.
StrongBox Hardware Security Module
Devices running Android 9 and higher can have a StrongBox Keymaster , an implementation of the Keymaster HAL
that resides in a hardware security module which has its own CPU, Secure storage, a true random number generator
and a mechanism to resist package tampering. To use this feature, true must be passed to the
setIsStrongBoxBacked method in either the KeyGenParameterSpec.Builder class or the KeyProtection.Builder class
when generating or importing keys using AndroidKeystore . To make sure that StrongBox is used during runtime
check that isInsideSecureHardware returns true and that the system does not throw StrongBoxUnavailableException
which get thrown if the StrongBox Keymaster isn't available for the given algorithm and key size associated with a key.
Key Use Authorizations
To mitigate unauthorized use of keys on the Android device, Android KeyStore lets apps specify authorized uses of
their keys when generating or importing the keys. Once made, authorizations cannot be changed.
Another API offered by Android is the KeyChain , which provides access to private keys and their corresponding
certificate chains in credential storage, which is often not used due to the interaction necessary and the shared nature
of the Keychain. See the Developer Documentation for more details.
A slightly less secure way of storing encryption keys, is in the SharedPreferences of Android. When
SharedPreferences are initialized in MODE_PRIVATE, the file is only readable by the application that created it.
However, on rooted devices any other application with root access can simply read the SharedPreference file of other
apps, it does not matter whether MODE_PRIVATE has been used or not. This is not the case for the AndroidKeyStore.
Since AndroidKeyStore access is managed on kernel level, which needs considerably more work and skill to bypass
without the AndroidKeyStore clearing or destroying the keys.
186
Android Cryptographic APIs
The last three options are to use hardcoded encryption keys in the source code, having a predictable key derivation
function based on stable attributes, and storing generated keys in public places like /sdcard/ . Obviously, hardcoded
encryption keys are not the way to go. This means every instance of the application uses the same encryption key. An
attacker needs only to do the work once, to extract the key from the source code - whether stored natively or in
Java/Kotlin. Consequently, he can decrypt any other data that he can obtain which was encrypted by the application.
Next, when you have a predictable key derivation function based on identifiers which are accessible to other
applications, the attacker only needs to find the KDF and apply it to the device in order to find the key. Lastly, storing
encryption keys publicly also is highly discouraged as other applications can have permission to read the public
partition and steal the keys.
Static Analysis
Locate uses of the cryptographic primitives in the code. Some of the most frequently used classes and interfaces:
Cipher
Mac
MessageDigest
Signature
AndroidKeyStore
Key , PrivateKey , PublicKey , SecretKeySpec , KeyInfo
And a few others in the java.security.* and javax.crypto.* packages.
As an example we illustrate how to locate the use of a hardcoded encryption key. First disassemble the DEX bytecode
to a collection of Smali bytecode files using Baksmali .
$ baksmali d file.apk -o smali_output/
Now that we have a collection of Smali bytecode files, we can search the files for the usage of the SecretKeySpec
class. We do this by simply recursively grepping on the Smali source code we just obtained. Please note that class
descriptors in Smali start with L and end with ; :
$ grep -r "Ljavax\crypto\spec\SecretKeySpec;"
This will highlight all the classes that use the SecretKeySpec class, we now examine all the highlighted files and trace
which bytes are used to pass the key material. The figure below shows the result of performing this assessment on a
production ready application. For sake of readability we have reverse engineered the DEX bytecode to Java code. We
can clearly locate the use of a static encryption key that is hardcoded and initialized in the static byte array
Encrypt.keyBytes .
187
Android Cryptographic APIs
.
When you have access to the source code, check at least for the following:
Check which mechanism is used to store a key: prefer the AndroidKeyStore over all other solutions.
Check if defense in depth mechanisms are used to ensure usage of a TEE. For instance: is temporal validity
enforced? Is hardware security usage evaluated by the code? See the KeyInfo documentation for more details.
In case of whitebox cryptography solutions: study their effectiveness or consult a specialist in that area.
Take special care on verifying the purposes of the keys, for instance:
make sure that for asymmetric keys, the private key is exclusively used for signing and the public key is only
used for encryption.
make sure that symmetric keys are not reused for multiple purposes. A new symmetric key should be
generated if it's used in a different context.
Dynamic Analysis
Hook cryptographic methods and analyze the keys that are being used. Monitor file system access while
cryptographic operations are being performed to assess where key material is written to or read from.
References
[#nelenkov] - N. Elenkov, Android Security Internals, No Starch Press, 2014, Chapter 5.
Cryptography references
Android Developer blog: Crypto provider deprecated - https://android-
developers.googleblog.com/2016/06/security-crypto-provider-deprecated-in.html
Android Developer blog: cryptography changes in android P - https://android-
developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html
Ida Pro - https://www.hex-rays.com/products/ida/
Android Developer blog: changes for NDK developers - https://android-
developers.googleblog.com/2016/06/android-changes-for-ndk-developers.html
security providers - https://developer.android.com/reference/java/security/Provider.html
Spongy Castle - https://rtyley.github.io/spongycastle/
Legion of the Bouncy Castle - https://www.bouncycastle.org/java.html
188
Android Cryptographic APIs
Android Developer documentation - https://developer.android.com/guide
NIST keylength recommendations - https://www.keylength.com/en/4/
BSI recommendations - 2017 - https://www.keylength.com/en/8/
SecureRandom references
Proper seeding of SecureRandom - https://www.securecoding.cert.org/confluence/display/java/MSC63-
J.+Ensure+that+SecureRandom+is+properly+seeded
Burpproxy its Sequencer - https://portswigger.net/burp/documentation/desktop/tools/sequencer
Testing Key Management references
Android KeyStore API - https://developer.android.com/reference/java/security/KeyStore.html
Android Keychain API - https://developer.android.com/reference/android/security/KeyChain
SharedPreferences - https://developer.android.com/reference/android/content/SharedPreferences.html
KeyInfo documentation - https://developer.android.com/reference/android/security/keystore/KeyInfo
Android Pie features and APIs - https://developer.android.com/about/versions/pie/android-9.0#secure-key-import
Android Keystore system - https://developer.android.com/training/articles/keystore#java
Key Attestation References
Android Key Attestation - https://developer.android.com/training/articles/security-key-attestation
W3C Android Key Attestation - https://www.w3.org/TR/webauthn/#android-key-attestation
Verifying Android Key Attestation - https://medium.com/@herrjemand/webauthn-fido2-verifying-android-keystore-
attestation-4a8835b33e9d
Attestation and Assertion - https://developer.mozilla.org/en-
US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion
Google Sample Codes - https://github.com/googlesamples/android-key-attestation/tree/master/server
FIDO Alliance Whitepaper - https://fidoalliance.org/wp-content/uploads/Hardware-
backed_Keystore_White_Paper_June2018.pdf
FIDO Alliance TechNotes - https://fidoalliance.org/fido-technotes-the-truth-about-attestation/
OWASP Mobile Top 10 2016
M5 - Insufficient Cryptography - https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-
Insufficient_Cryptography
OWASP MASVS
MSTG-STORAGE-1: "System credential storage facilities are used appropriately to store sensitive data, such as
user credentials or cryptographic keys."
MSTG-CRYPTO-1: "The app does not rely on symmetric cryptography with hardcoded keys as a sole method of
encryption."
MSTG-CRYPTO-2: "The app uses proven implementations of cryptographic primitives."
MSTG-CRYPTO-3: "The app uses cryptographic primitives that are appropriate for the particular use-case,
configured with parameters that adhere to industry best practices."
MSTG-CRYPTO-4: "The app does not use cryptographic protocols or algorithms that are widely considered
depreciated for security purposes."
MSTG-CRYPTO-5: "The app doesn't reuse the same cryptographic key for multiple purposes."
MSTG-CRYPTO-6: "All random values are generated using a sufficiently secure random number generator."
CWE
189
Android Cryptographic APIs
CWE-321 - Use of Hard-coded Cryptographic Key
CWE-326 - Inadequate Encryption Strength
CWE-330 - Use of Insufficiently Random Values
190
Local Authentication on Android
Local Authentication on Android
During local authentication, an app authenticates the user against credentials stored locally on the device. In other
words, the user "unlocks" the app or some inner layer of functionality by providing a valid PIN, password, or
fingerprint, verified by referencing local data. Generally, this process is invoked for reasons such providing a user
convenience for resuming an existing session with the remote service or as a means of step-up authentication to
protect some critical function. As described earlier in Testing Authentication and Session Management: it is important
to reassure that authentication happens at least on a cryptographic primitive (e.g.: an authentication step which results
in unlocking a key). Next, it is recommended that the authentication is verified at a remote endpoint. In Android, there
are two mechanisms supported by the Android Runtime for local authentication: the Confirm Credential flow and the
Biometric Authentication flow.
Testing Confirm Credentials (MSTG-AUTH-1 and MSTG-STORAGE-11)
Overview
The confirm credential flow is available since Android 6.0 and is used to ensure that users do not have to enter app-
specific passwords together with the lock screen protection. Instead: if a user has logged in to his device recently,
then confirm-credentials can be used to unlock cryptographic materials from the AndroidKeystore . That is, if the user
unlocked his device within the set time limits ( setUserAuthenticationValidityDurationSeconds ), otherwise he has to
unlock his device again.
Note that the security of Confirm Credentials is only as strong as the protection set at the lock screen. This often
means that simple predictive lock-screen patterns are used and therefore we do not recommend any apps which
require L2 of security controls to use Confirm Credentials.
Static Analysis
Reassure that the lock screen is set:
KeyguardManager mKeyguardManager = (KeyguardManager) getSystemService(Context.KEYGUARD_SERVICE);
if (!mKeyguardManager.isKeyguardSecure()) {
// Show a message that the user hasn't set up a lock screen.
}
Create the key protected by the lock screen. In order to use this key, the user needs to have unlocked his device
in the last X seconds, or he will have to unlock the device again. Make sure that this timeout is not too long, as it
becomes harder to ensure that it was the same user using the app as the user unlocking the device:
try {
KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
keyStore.load(null);
KeyGenerator keyGenerator = KeyGenerator.getInstance(
KeyProperties.KEY_ALGORITHM_AES, "AndroidKeyStore");
// Set the alias of the entry in Android KeyStore where the key will appear
// and the constrains (purposes) in the constructor of the Builder
keyGenerator.init(new KeyGenParameterSpec.Builder(KEY_NAME,
KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
.setBlockModes(KeyProperties.BLOCK_MODE_CBC)
.setUserAuthenticationRequired(true)
// Require that the user has unlocked in the last 30 seconds
.setUserAuthenticationValidityDurationSeconds(30)
.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
191
Local Authentication on Android
.build());
keyGenerator.generateKey();
} catch (NoSuchAlgorithmException | NoSuchProviderException
| InvalidAlgorithmParameterException | KeyStoreException
| CertificateException | IOException e) {
throw new RuntimeException("Failed to create a symmetric key", e);
}
Setup the lock screen to confirm:
private static final int REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS = 1; //used as a number to verify whether th
is is where the activity results from
Intent intent = mKeyguardManager.createConfirmDeviceCredentialIntent(null, null);
if (intent != null) {
startActivityForResult(intent, REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS);
}
Use the key after lock screen:
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
if (requestCode == REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS) {
// Challenge completed, proceed with using cipher
if (resultCode == RESULT_OK) {
//use the key for the actual authentication flow
} else {
// The user canceled or didn’t complete the lock screen
// operation. Go to error/cancellation flow.
}
}
}
Make sure that the unlocked key is used during the application flow. For example, the key may be used to decrypt
local storage or a message received from a remote endpoint. If the application simply checks whether the user has
unlocked the key or not, the application may be vulnerable to a local authentication bypass.
Dynamic Analysis
Patch the app or use runtime instrumentation to bypass fingerprint authentication on the client. For example, you
could use Frida to call the onActivityResult callback method directly to see if the cryptographic material (e.g. the
setup cipher) can be ignored to proceed with the local authentication flow. Refer to the chapter "Tampering and
Reverse Engineering on Android" for more information.
Testing Biometric Authentication (MSTG-AUTH-8)
Overview
Android Marshmallow (6.0) introduced public APIs for authenticating users via fingerprint. Access to the fingerprint
hardware is provided through the FingerprintManager class. An app can request fingerprint authentication by
instantiating a FingerprintManager object and calling its authenticate method. The caller registers callback methods
to handle possible outcomes of the authentication process (i.e. success, failure, or error). Note that this method
doesn't constitute strong proof that fingerprint authentication has actually been performed - for example, the
authentication step could be patched out by an attacker, or the "success" callback could be called using
instrumentation.
192
Local Authentication on Android
Better security is achieved by using the fingerprint API in conjunction with the Android KeyGenerator class. With this
method, a symmetric key is stored in the KeyStore and "unlocked" with the user's fingerprint. For example, to enable
user access to a remote service, an AES key is created which encrypts the user PIN or authentication token. By
calling setUserAuthenticationRequired(true) when creating the key, it is ensured that the user must re-authenticate to