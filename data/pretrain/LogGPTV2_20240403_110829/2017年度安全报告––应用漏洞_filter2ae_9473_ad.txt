Git，SVN，CVS，HG，Gitlab，GithubDesktop，SourceTree 等。
#### 漏洞相关背景
git是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus
Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive
Tools（一个类似Norton Commander界面的文件管理器）有所不同。
git最初的开发动力来自于BitKeeper和Monotone。git最初只是作为一个可以被其他前端（比如Cogito或Stgit）包装的后端而开发的，但后来git内核已经成熟到可以独立地用作版本控制。很多著名的软件都使用git进行版本控制，其中包括Linux内核、X.Org服务器和OLPC内核等项目的开发流程。
Secure
Shell（安全外壳协议，简称SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。虽然任何网络服务都可以通过SSH实现安全传输，SSH最常见的用途是远程登录系统，人们通常利用SSH来传输命令行界面和远程执行命令。使用频率最高的场合类Unix系统，但是Windows操作系统也能有限度地使用SSH。2015年，微软宣布将在未来的操作系统中提供原生SSH协议支持。
在设计上，SSH是Telnet和非安全shell的替代品。Telnet和Berkeley
rlogin、rsh、rexec等协议采用明文传输，使用不可靠的密码，容易遭到监听、嗅探和中间人攻击。SSH旨在保证非安全网络环境（例如互联网）中信息加密完整可靠。
这两者都是互联网中最被广泛使用的软件，git的一部分ssh协议的处理会交给本地的ssh来处理，而ssh这个软件本身是支持传入一定的命令进行执行。
#### 漏洞细节
该漏洞主要由于SSH链接在hostname部分，若是用“-”开头，那么会导致ssh命令将hostname误认为这是一个选项。因此，我们可以利用“-oProxyCommand”选项来达到命令执行的目的。
在进行git clone 时候会调用到git/connect.c中“struct child_process git_connect(int fd[2],
const char url,const char *prog, int flags)”函数。其接受到的参数url为命令中“git clone
xxx://xxxxxxxxxx/xx(.git)”的xxx://xxxxxxxxxx/xx(.git)部分。在该函数中会对传入的这个字符串进行parse，提取其协议部分。在满足协议为ssh://的时候会进入该函数的else部分。
然后根据下面的流程调用本地的ssh
  * 首先获得本地的ssh路径，然后push进conn->args
  * 然后获得url中ssh_host部分再拼接路径
  * 最后调用start_command函数进行命令执行
start_command的定义在git/run-command.c
int start_command(struct child_process *cmd)
将传入的cmd经过处理赋值给argv
经过execve这个函数进行命令执行，但是在这个这个命令执行的内容是
/usr/bin/ssh `ssh_host` path
ssh -oProxyCommand=gnome-calculator xxx将会在本地打开gnome的计算器
所以如果我们在clone 操作的时候将连接指定为git clone ssh://-oProxyCommand=gnome-calculator/cert将取得同样的命令执行的效果
#### 总结
Git
ssh命令注入漏洞核心的原因在于在对hostname进行parser的过程中存在一定的异议,也就导致会可以向本地的ssh软体注入一定的参数来执行命令，而和submodule的结合,更是提供了更为广泛的攻击面。关于parser尤其是会和其他软体进行交互的处理应该进行更为严格的过滤，遵从一切用户输入都是有害的不可信的原则进行处理.在2017的BlackHat
更是提出了url
parser在各个语言中存在着的问题，parser这种接受用户输入作为主要功能实现的点尤其值得我们进行关注，因为完全由用户输入作为主要依据来进行功能的选择，但值得庆幸的是，通过这些事件和报告后，无论是开发人员，还是安全人员都对这些方面投入了更多的精力去思考去完善。
### CVE-2017-16943 Exim-UAF漏洞
第一个版本的Exim是由Philip Hazel在1995年编写的，用于剑桥大学计算服务的电子邮件系统。它最初是基于一个较老的MTA，Smail
-3，但它的设计和理念已经从Smail-3中分离出来了。Exim高度可配置，因此具有其他MTA中没有的功能。它的邮件策略控制功能，为管理员提供了控制谁可以通过系统发送或中继邮件。在4.x版本中，这已经成熟为基于访问控制列表的系统，允许非常详细和灵活的控制。4.x版本中集成了一个内容扫描框架，可以更轻松地整合反病毒和反垃圾邮件措施。这使得Exim非常适合执行不同的邮件策略。
#### 漏洞相关背景
2017年11月25日，Exim官方修复了一处use-after-free的漏洞，由台湾安全公司DEVCORE的研究人员Meh发现，CVE编号为：CVE-2017-16943，并公布了一份POC，但是根据我们的分析跟进，该POC必须将配置文件中的dkim开启才能达到控制EIP，造成进程崩溃的效果。2017年12月11日，Meh在DEVCORE官网公布该漏洞的具体细节和默认配置下的POC。
#### 漏洞细节
##### 开启dkim配置下控制rip
exim一共管理着三种堆，定义成枚举类型的全局变量：
POOL_MAIN:表示主要的分配的堆块，可以被释放，消息的处理会在该堆池中分配。
POOL_PERM:表示分配的内存是永久的，直到进程结束才会被释放，保存一些需要共享的信息,例如配置信息，host信息，在使用这块堆池分配前会将store_pool改为POOL_PERM，再调用store_get()。
POOL_SEARCH:保存搜索的数据，在search_tidyup、search_open、internal_search_find函数中被使用。
Exim会循环读取消息，并动态分配内存，申请内存的函数包括：expand_string()、store_get()、string_xxx()，store_get_perm()会使用perm
pool。
将配置文件/usr/exim/configure中的“control =
dkim_disable_verify”注释，可以触发进程崩溃，进而控制rip，分析原因如下：
在receive_msg函数中会判断是否开启dkim，如果开启就会进入dkim_exim_verify_init函数：
dkim_exim_verify_init函数里在perm pool中申请内存：
使得在堆中分配一块内存，同时不改变current_block[0]中的值，后续对消息处理时会在main
pool中分配堆块，分配一块0x2010大小的堆块，释放后，由于之前perm pool分配的堆块，使得释放的堆块不和top
chunk合并，变成一个unsorted bin，此时fd和bk指向main arena区域。再进一次store
extend后，通过store_get会获得指向main arena的指针，之后memcpy对main
arena进行写操作，后续的free操作会造成崩溃，RIP会变成填充的数据。
具体的细节如下图：
##### 默认配置下控制rip
在devcore公司公布具体细节后，我们对默认配置下如何控制rip进行了分析。其实原理和开启dkim配置类似，需要在top_chunk前分配一块在使用的堆块，防止后面释放的堆块和top_chunk合并，作者的poc是利用DATA来发送一个足够大的数据来扩展堆块，循环多次后，期间释放了之前的堆块，变成了一个大的unsorted
bin块供后续分配。此时top_chunk之前就有了正在使用的堆块，再利用BDAT命令达到控制rip的目的。
具体控制rip的流程如下：
通过上面分析，将chunking_advertise_hosts 的值设置为空，这样可以禁用ESMTP CHUNKING 扩展，使BDAT
不可用，从而避免被攻击者利用。
#### 总结
应用安全不仅仅只有漏洞，一种名为“供应链攻击”的网络攻击行为也需要我们警惕。它通过一些技术手段在软件的软件开发，软件分发，使用升级等环节进行污染，最后达到盗取用户隐私、植入木马、盗取数字资产等目的。比如今年的XshellGhost事件，Ccleaner恶意代码攻击事件，OSX/Proton后门攻击事件等。这种攻击危险且难以防御。软件厂商首先要加强自身安全体系建设，并且安全厂商之间也已经在威胁情报和安全数据等方面进行更为明确化，纵深化的整合。这样才能有效的抵御供应链攻击。
因为区块链技术的发展和虚拟货币投资的浪潮，2017年以挖矿为目的的网络攻击行为特别活跃。这种攻击主要针对服务器，IoT设备或者浏览器，通过弱口令扫描，漏洞或者Javascript挖矿程序进行恶意挖矿。其中系统漏洞、web容器和应用方面的漏洞因为目的性强且回馈率高，成为了黑产的首选。比如struts2、WebLogic挖矿事件，每当有利用难度低的漏洞被披露。都会引发一波以挖矿为目的的网络攻击。
应用安全带来的风险相对比较容易避免，操作系统提供了各种漏洞缓解机制使得可利用漏洞仅占很小一部分。对于个人用户，从正规渠道下载软件，并且具有良好的上网习惯，注意更新软件，可以杜绝大部分的安全问题。对于web容器的安全，需要运维人员及时进行安全更新。更加希望软件开发者，从以上的分析带来一些思考，规避上述漏洞中的一些问题。
## 参考链接
[https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-Json-Attacks.pdf](https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2017-11779)
http://www.catalog.update.microsoft.com/search.aspx?q=3197835
[https://bugs.chromium.org/p/project-zero/issues/detail?id=1324&desc=2](https://bugs.chromium.org/p/project-zero/issues/detail?id=1324&desc=2)