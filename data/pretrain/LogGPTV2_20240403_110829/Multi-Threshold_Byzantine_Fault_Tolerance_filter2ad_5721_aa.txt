title:Multi-Threshold Byzantine Fault Tolerance
author:Atsuki Momose and
Ling Ren
Multi-Threshold Byzantine Fault Tolerance
Atsuki Momose
Ling Ren
Intelligent Systems Laboratory, SECOM CO., LTD.
University of Illinois at Urbana-Champaign
Mitaka, Tokyo, Japan
Nagoya University
Nagoya, Aichi, Japan
PI:EMAIL
Urbana, IL, USA
PI:EMAIL
ABSTRACT
Classic Byzantine fault tolerant (BFT) protocols are designed for
a specific timing model, most often one of the following: synchro-
nous, asynchronous or partially synchronous. It is well known that
the timing model and fault tolerance threshold present inherent
trade-offs. Synchronous protocols tolerate up to ùëõ/2 Byzantine
faults, while asynchronous or partially synchronous protocols tol-
erate only up to ùëõ/3 Byzantine faults. In this work, we generalize
the fault thresholds of BFT and introduce a new problem called
multi-threshold BFT. Multi-threshold BFT has four separate fault
thresholds for safety and liveness under synchrony and asynchrony
(or partial-synchrony), respectively. Decomposing the fault thresh-
olds in this way allows us to design protocols that provide mean-
ingful fault tolerance under both synchrony and asynchrony (or
partial synchrony). We establish tight fault thresholds bounds for
multi-threshold BFT and present protocols achieving them. As an
example, we show a BFT state machine replication (SMR) protocol
that tolerates up to 2ùëõ/3 faults for safety under synchrony while
tolerating up to ùëõ/3 faults for other scenarios (liveness under syn-
chrony as well as safety and liveness under partial synchrony). This
is strictly stronger than classic partially synchronous SMR proto-
cols. We also present a general framework to transform known
partially synchronous or asynchronous BFT SMR protocols to ad-
ditionally enjoy the optimal 2ùëõ/3 fault tolerance for safety under
synchrony.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Distributed systems security.
KEYWORDS
Distributed Systems; Byzantine Fault Tolerance; Blockchain
ACM Reference Format:
Atsuki Momose and Ling Ren. 2021. Multi-Threshold Byzantine Fault
Tolerance. In Proceedings of the 2021 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ‚Äô21), November 15‚Äì19, 2021, Vir-
tual Event, Republic of Korea. ACM, New York, NY, USA, 14 pages. https:
//doi.org/10.1145/3460120.3484554
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea.
¬© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484554
1 INTRODUCTION
Byzantine fault-tolerance (BFT) is a fundamental problem in dis-
tributed systems [34, 44, 45]. It also serves as the algorithmic foun-
dation of blockchain [40], which replicates a ledger across mutually
distrusting organizations. Designing efficient BFT protocols is of
both theoretical and practical interests today.
The classic BFT protocol design first selects a timing assump-
tion, usually from the three models below: synchrony, asynchrony,
or partially synchrony. It is well known that there is an inherent
trade-off between the timing model and the fault threshold. Syn-
chronous BFT protocols [20, 45] tolerate up to ùëì < ùëõ or ùëì < ùëõ/2
Byzantine faults (depending on the variant of the problem) but
break down when the network is not synchronous. On the flip side,
asynchronous or partially synchronous protocols tolerate network
asynchrony but tolerate only up to ùëì < ùëõ/3 Byzantine faults [22].
This motivates the following natural question:
Can we design BFT protocols that enjoy more than one-third fault-
tolerance under synchrony while at the same time tolerating some
(ideally one-third) faults in asynchrony or partial synchrony?
This question was recently studied and partially answered in
a series of elegant works by Blum et al. [7‚Äì9]. They showed it is
possible for a BFT protocol to simultaneously tolerate ùëìùëé < ùëõ/3
faults under asynchrony and ùëìùëé ‚â§ ùëìùë† < ùëõ/2 faults under synchrony,
if and only if 2ùëìùë† + ùëìùëé < ùëõ. Clearly, the bound 2ùëìùë† + ùëìùëé < ùëõ im-
plies that ùëìùë† and ùëìùëé are always lower than what is achievable in
a single timing model, i.e., ùëìùë† < ùëõ/2 for synchrony and ùëìùëé < ùëõ/3
for asynchrony/partial synchrony. In other words, their protocol
provides an interesting trade-off but cannot strictly improve classic
single-model protocols. And they showed that this is inherent with
the standard BFT definition.
In this work, we further generalize the BFT problem to circum-
vent the above barrier. We separate the fault tolerance thresholds for
each timing model and for safety and liveness, two well-established
properties of distributed algorithms. This generalization gives us a
new insight on BFT: it is possible to improve safety under synchrony
while preserving the other fault thresholds, i.e., liveness under syn-
chrony and safety/liveness under asynchrony (or partial synchrony).
At the technical level, we combine techniques from state-of-the-art
synchronous and asynchronous (or partially synchronous) proto-
cols. The outcome is a class of simple and efficient solutions with
optimal fault tolerance that are strictly stronger than classic single-
model protocols. More specifically, we show a protocol tolerating
2ùëõ/3 faults for safety under synchrony while tolerating ùëõ/3 faults
for liveness under synchrony and safety/liveness under asynchrony
(or partial synchrony). In comparison, existing asynchronous (or
partially synchronous) protocols tolerate ùëõ/3 faults for both safety
Session 6A: Consensus and Attacks CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1686and liveness, under both synchrony and asynchrony (or partial
synchrony).
This higher safety under synchrony can be very useful as it helps
disincentivize rational players from attacking the system. If they do
not have control over the network infrastructure, they would need
to persuade a very large fraction of nodes to collude with them in
order to succeed in breaking safety.
Multi-threshold BFT. We introduce multi-threshold BFT (or MT-
BFT for short), a generalized notion of the BFT where the fault
tolerance thresholds are defined separately for safety and liveness
under synchrony and asynchrony (or partial synchrony). The MT-
BFT protocol is parameterized by four thresholds ùõΩùëé, ùõæùëé, ùõΩùë†, ùõæùë†. The
protocol achieves safety in the presence of ùõΩùëé faults and liveness
in the presence of ùõæùëé faults in an asynchronous (or partially syn-
chronous) network; at the same time, the protocol achieves safety
in the presence of ùõΩùë† faults and liveness in the presence of ùõæùë† faults
in a synchronous network.
It is worth noting that the problem considered in Blum et al.
can be viewed as a special form of the more general problem we
introduce here, with the restriction of ùõΩùëé = ùõæùëé = ùëìùëé and ùõΩùë† = ùõæùë† = ùëìùë†.
Tight fault tolerance bounds of MT-BFT RBC. To motivate the
MT-BFT model, we first consider reliable broadcast (RBC), which
is a simple and standard variant of consensus problems. We show
that MT-BFT RBC can be achieved if and only if 2ùõæùë† + ùõΩùëé < ùëõ.
Namely, there is an inherent trade-off between the asynchronous
(or partially synchronous) safety threshold ùõΩùëé and the synchronous
liveness threshold ùõæùë†. This result is already very interesting. Notice
that there is no trade-off between the asynchronous (or partially
synchronous) safety (i.e., ùõΩùëé) and the synchronous safety (i.e., ùõΩùë†).
Thus, it means that we can design a BFT protocol that enjoys an
arbitrary high (even ùõΩùë† = ùëõ‚àí1) synchronous safety while preserving
the fault tolerance of classic protocols in asynchrony (or partially
synchrony) with ùõΩùëé = ùõæùëé < ùëõ/3.
Tight fault tolerance bounds of MT-BFT SMR. Next, we ap-
ply the idea to state machine replication (SMR), which is a practi-
cal formulation of the consensus problem (and it is the interface
blockchains provide). Notably, the fault tolerance thresholds for
BFT SMR differ slightly from the previous ones for RBC because
SMR protocols must provide public verifiability, i.e., external clients
can verify the correctness of the committed ledger. We show that
with this public (external) verifiability requirement, an additional
constraint comes in: we need ùõΩùë† + ùõæùë† < ùëõ.
This extra condition means that BFT SMR cannot tolerate arbi-
trarily high fault for synchronous safety. This is not surprising as
it is well known BFT SMR can tolerate at most ùëì < ùëõ/2 faults [45],
unlike Byzantine broadcast which does not require public verifiabil-
ity and may tolerate an arbitrarily number of faults. As easily seen,
this ùëì < ùëõ/2 bound for SMR is a special form of our new bound
with the restriction of ùõΩùë† = ùõæùë† = ùëì .
Nonetheless, one can still achieve a safety threshold of up to
ùõΩùë† < ùëõ ‚àí ùõæùë† while preserving the partial synchronous fault toler-
ance. We present a simple MT-BFT SMR protocol that can achieve
optimal thresholds in the dual timing model of synchrony and
partial synchrony. An interesting point in the design space is to
achieve ùõΩùë† < 2ùëõ/3 tolerance for safety under synchrony while
preserving the tolerance for partial synchrony and liveness at
ùõΩùëé = ùõæùëé = ùõæùë† < ùëõ/3. This is strictly stronger than classic asyn-
chronous or partially synchronous protocols.
In addition, our protocol allows tuning parameter on the optimal
trade-off curve to best suit the application. For example, one can
prioritize safety (e.g., ùõΩùëé < ùëõ/2, ùõΩùë† < 3ùëõ/4) at the cost of liveness
(e.g., ùõæùëé = ùõæùë† < ùëõ/4) for safety critical applications. One can also
prioritize the synchronous setting (e.g., ùõæùë† < 9ùëõ/20, ùõΩùë† < 11ùëõ/20)
while tolerating a small number of faults (e.g., ùõΩùëé = ùõæùëé < ùëõ/10)
anticipating occasional network failure.
A framework to upgrade to optimal synchronous safety. Af-
ter giving customized new protocols above, we devise a general
framework to transform existing protocols to our MT-BFT paradigm
with optimal synchronous safety. To elaborate, the framework con-
verts any MT-BFT SMR protocol parameterized by (ùõΩ‚Ä≤
ùë†, ùõæ‚Ä≤
ùë†)
into a MT-BFT SMR protocol with optimal synchronous safety
ùõΩùë† = ùëõ ‚àí ùõæ‚Ä≤
ùë† ‚àí 1 tolerating the same thresholds otherwise, i.e.,
ùõΩùëé = ùõΩ‚Ä≤
ùë†. Existing partially synchronous,
e.g., PBFT [14], HotStuff [47], and asynchronous protocols, e.g.,
HoneyBadgerBFT [38], BEAT [21], Dumbo [26], can be viewed as
MT-BFT SMR protocols with ùõΩ‚Ä≤
ùë† < ùëõ/3. Hence, they
can be upgraded to tolerate an optimal ùõΩùë† < 2ùëõ/3 while preserving
other thresholds ùõΩùëé = ùõæùëé = ùõæùë† < ùëõ/3. The framework requires
only two communication steps and a synchronous waiting step in
addition to running the underlying protocol. This helps improve
the resilience of these existing protocols in more versatile scenarios
with minimum overhead.
Summary of contributions. In summary, this paper provides the
following results.
(1) We introduce multi-threshold BFT (MT-BFT), a generalized ver-
sion of the BFT problem with separate thresholds for safety
and liveness under synchrony and asynchrony (or partial syn-
chrony) (Section 2.2).
ùëé, and ùõæùë† = ùõæ‚Ä≤
ùëé, ùõæùëé = ùõæ‚Ä≤
ùëé = ùõΩ‚Ä≤
ùëé = ùõæ‚Ä≤
ùë† = ùõæ‚Ä≤
ùëé, ùõæ‚Ä≤
ùëé, ùõΩ‚Ä≤
(2) We establish tight bounds on the fault tolerance thresholds
for MT-BFT reliable broadcast (Section 3) and state machine
replication (Section 4).