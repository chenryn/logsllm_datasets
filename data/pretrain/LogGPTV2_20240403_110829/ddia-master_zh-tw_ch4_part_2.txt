### JSON、XML和二进位制变体
当我们谈到可以被多种程式语言读写的标准编码时，JSON 和 XML 是最显眼的角逐者。它们广为人知，广受支援，也 “广受憎恶”。XML 经常收到批评：过于冗长与且过份复杂【9】。JSON 的流行则主要源于（透过成为 JavaScript 的一个子集）Web 浏览器的内建支援，以及相对于 XML 的简单性。CSV 是另一种流行的与语言无关的格式，尽管其功能相对较弱。
JSON，XML 和 CSV 属于文字格式，因此具有人类可读性（尽管它们的语法是一个热门争议话题）。除了表面的语法问题之外，它们也存在一些微妙的问题：
* **数字（numbers）** 编码有很多模糊之处。在 XML 和 CSV 中，无法区分数字和碰巧由数字组成的字串（除了引用外部模式）。JSON 虽然区分字串与数字，但并不区分整数和浮点数，并且不能指定精度。
这在处理大数字时是个问题。例如大于 $2^{53}$ 的整数无法使用 IEEE 754 双精度浮点数精确表示，因此在使用浮点数（例如 JavaScript）的语言进行分析时，这些数字会变得不准确。Twitter 有一个关于大于 $2^{53}$ 的数字的例子，它使用 64 位整数来标识每条推文。Twitter API 返回的 JSON 包含了两个推特 ID，一个是 JSON 数字，另一个是十进位制字串，以解决 JavaScript 程式中无法正确解析数字的问题【10】。
* JSON 和 XML 对 Unicode 字串（即人类可读的文字）有很好的支援，但是它们不支援二进位制资料（即不带 **字元编码（character encoding）** 的位元组序列）。二进位制串是很有用的功能，人们透过使用 Base64 将二进位制资料编码为文字来绕过此限制。其特有的模式标识著这个值应当被解释为 Base64 编码的二进位制资料。这种方案虽然管用，但比较 Hacky，并且会增加三分之一的资料大小。
*  XML 【11】和 JSON 【12】都有可选的模式支援。这些模式语言相当强大，所以学习和实现起来都相当复杂。XML 模式的使用相当普遍，但许多基于 JSON 的工具才不会去折腾模式。对资料的正确解读（例如区分数值与二进位制串）取决于模式中的资讯，因此不使用 XML/JSON 模式的应用程式可能需要对相应的编码 / 解码逻辑进行硬编码。
* CSV 没有任何模式，因此每行和每列的含义完全由应用程式自行定义。如果应用程式变更添加了新的行或列，那么这种变更必须透过手工处理。CSV 也是一个相当模糊的格式（如果一个值包含逗号或换行符，会发生什么？）。尽管其转义规则已经被正式指定【13】，但并不是所有的解析器都正确的实现了标准。
尽管存在这些缺陷，但 JSON、XML 和 CSV 对很多需求来说已经足够好了。它们很可能会继续流行下去，特别是作为资料交换格式来说（即将资料从一个组织传送到另一个组织）。在这种情况下，只要人们对格式是什么意见一致，格式有多美观或者效率有多高效就无所谓了。让不同的组织就这些东西达成一致的难度超过了绝大多数问题。
#### 二进位制编码
对于仅在组织内部使用的资料，使用最小公约数式的编码格式压力较小。例如，可以选择更紧凑或更快的解析格式。虽然对小资料集来说，收益可以忽略不计；但一旦达到 TB 级别，资料格式的选型就会产生巨大的影响。
JSON 比 XML 简洁，但与二进位制格式相比还是太占空间。这一事实导致大量二进位制编码版本 JSON（MessagePack、BSON、BJSON、UBJSON、BISON 和 Smile 等） 和 XML（例如 WBXML 和 Fast Infoset）的出现。这些格式已经在各种各样的领域中采用，但是没有一个能像文字版 JSON 和 XML 那样被广泛采用。
这些格式中的一些扩充套件了一组资料型别（例如，区分整数和浮点数，或者增加对二进位制字串的支援），另一方面，它们没有改变 JSON / XML 的资料模型。特别是由于它们没有规定模式，所以它们需要在编码资料中包含所有的物件栏位名称。也就是说，在 [例 4-1]() 中的 JSON 文件的二进位制编码中，需要在某处包含字串 `userName`，`favoriteNumber` 和 `interests`。
**例 4-1 本章中用于展示二进位制编码的示例记录**
```json
{
    "userName": "Martin",
    "favoriteNumber": 1337,
    "interests": ["daydreaming", "hacking"]
}
```
我们来看一个 MessagePack 的例子，它是一个 JSON 的二进位制编码。图 4-1 显示了如果使用 MessagePack 【14】对 [例 4-1]() 中的 JSON 文件进行编码，则得到的位元组序列。前几个位元组如下：
1. 第一个位元组 `0x83` 表示接下来是 **3** 个栏位（低四位 = `0x03`）的 **物件 object**（高四位 = `0x80`）。（如果想知道如果一个物件有 15 个以上的栏位会发生什么情况，栏位的数量塞不进 4 个 bit 里，那么它会用另一个不同的型别识别符号，栏位的数量被编码两个或四个位元组）。
2. 第二个位元组 `0xa8` 表示接下来是 **8** 位元组长（低四位 = `0x08`）的字串（高四位 = `0x0a`）。
3. 接下来八个位元组是 ASCII 字串形式的栏位名称 `userName`。由于之前已经指明长度，不需要任何标记来标识字串的结束位置（或者任何转义）。
4. 接下来的七个位元组对字首为 `0xa6` 的六个字母的字串值 `Martin` 进行编码，依此类推。
二进位制编码长度为 66 个位元组，仅略小于文字 JSON 编码所取的 81 个位元组（删除了空白）。所有的 JSON 的二进位制编码在这方面是相似的。空间节省了一丁点（以及解析加速）是否能弥补可读性的损失，谁也说不准。
在下面的章节中，能达到比这好得多的结果，只用 32 个位元组对相同的记录进行编码。
![](../img/fig4-1.png)
**图 4-1 使用 MessagePack 编码的记录（例 4-1）**
### Thrift与Protocol Buffers
Apache Thrift 【15】和 Protocol Buffers（protobuf）【16】是基于相同原理的二进位制编码库。Protocol Buffers 最初是在 Google 开发的，Thrift 最初是在 Facebook 开发的，并且都是在 2007~2008 开源的【17】。
Thrift 和 Protocol Buffers 都需要一个模式来编码任何资料。要在 Thrift 的 [例 4-1]() 中对资料进行编码，可以使用 Thrift **介面定义语言（IDL）** 来描述模式，如下所示：
```c
struct Person {
    1: required string       userName,
    2: optional i64          favoriteNumber,
    3: optional list interests
}
```
Protocol Buffers 的等效模式定义看起来非常相似：
```protobuf
message Person {
    required string user_name       = 1;
    optional int64  favorite_number = 2;
    repeated string interests       = 3;
}
```
Thrift 和 Protocol Buffers 每一个都带有一个程式码生成工具，它采用了类似于这里所示的模式定义，并且生成了以各种程式语言实现模式的类【18】。你的应用程式程式码可以呼叫此生成的程式码来对模式的记录进行编码或解码。
用这个模式编码的资料是什么样的？令人困惑的是，Thrift 有两种不同的二进位制编码格式 [^iii]，分别称为 BinaryProtocol 和 CompactProtocol。先来看看 BinaryProtocol。使用这种格式的编码来编码 [例 4-1]() 中的讯息只需要 59 个位元组，如 [图 4-2](../img/fig4-2.png) 所示【19】。