---
author: Daniel J. Walsh
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 7407
date: '2017-08-26 16:10:00'
editorchoice: true
excerpt: 本文旨在深入探讨Linux容器技术的发展历程。曾经，Linux容器技术呈现出各自为政的局面。Docker的出现确立了镜像创建的事实标准，并简化了容器使用工具。而开放容器倡议（OCI）则标志着业界在核心镜像格式和运行时方面的协作。
fromurl: https://opensource.com/article/17/7/how-linux-containers-evolved
id: 8811
islctt: true
largepic: /data/attachment/album/201708/26/161009ab5ggfgbg0hb10f5.jpg
permalink: /article-8811-1.html
pic: /data/attachment/album/201708/26/161009ab5ggfgbg0hb10f5.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 本文旨在深入探讨Linux容器技术的发展历程。曾经，Linux容器技术呈现出各自为政的局面。Docker的出现确立了镜像创建的事实标准，并简化了容器使用工具。而开放容器倡议（OCI）则标志着业界在核心镜像格式和运行时方面的协作。
tags:
- 容器
- OCI
- Docker
thumb: false
title: Linux 容器技术发展史
titlepic: true
translator: Hao Qixu
updated: '2017-08-26 16:10:00'
---

> 容器在过去几年内取得了显著进展。现在，让我们回顾一下它的发展历程。

![](/data/attachment/album/201708/26/161009ab5ggfgbg0hb10f5.jpg)

### Linux 容器技术的发展

近年来，容器不仅成为了开发者热议的话题，也受到了企业的广泛关注。随着关注度的增加，对于其安全性、可扩展性和互操作性的需求也随之增长。满足这些需求需要大量的工程努力，以下我们将探讨在红帽这样的企业中这些工程是如何发展的。

我第一次接触Docker是在2013年秋季，当时我们正在努力使Red Hat Enterprise Linux (RHEL) 支持Docker容器（现更名为Moby项目的一部分）。移植过程中，我们遇到了一些问题。首先，处理容器镜像分层所需的写时复制（COW）文件系统成了第一个重大挑战。红帽最终贡献了一些COW文件系统的实现，包括Device Mapper、Btrfs以及OverlayFS的第一个版本。在RHEL上，默认使用Device Mapper，但我们在OverlayFS上也取得了很大进展。

第二个主要障碍是用于启动容器的工具。当时的上游Docker使用LXC工具来启动容器，但我们不希望在RHEL上支持LXC工具集。此外，在与上游Docker合作之前，我们已经与libvirt团队合作开发了virt-sandbox工具，该工具使用`libvirt-lxc`来启动容器。

红帽内部有人提出了一种替代方案，即替换LXC工具集并添加一个桥接器，以便Docker守护进程可以通过`libvirt-lxc`与libvirt通信来启动容器。然而，这种方案存在一些顾虑。例如，使用Docker客户端（`docker-cli`）启动容器时，各层调用会在容器进程（`pid1OfContainer`）之前依次启动：
```
docker-cli → docker-daemon → libvirt-lxc → pid1OfContainer
```

我不太喜欢这个方案，因为它在启动容器的工具和最终的容器进程之间引入了两个守护进程。

我的团队与上游Docker开发者合作，实现了一个原生Go语言版本的容器运行时，称为libcontainer。这个库作为OCI运行时规范的初始实现与runc一同发布。
```
docker-cli → docker-daemon @ pid1OfContainer
```

许多人误以为当他们执行一个容器时，容器进程是作为`docker-cli`的子进程运行的。实际上，这是一个客户端/服务器请求操作，容器进程在一个完全独立的环境中作为子进程运行。这种客户端/服务器请求会导致不稳定性和潜在的安全问题，并阻碍某些实用特性的实现。例如，systemd有一个名为套接字激活的功能，你可以配置一个守护进程仅在相应的套接字被连接时才启动。这意味着系统可以节省内存并按需执行服务。套接字激活的工作原理是systemd监听TCP套接字，并在数据包到达时启动相应服务。一旦服务启动完毕，systemd将套接字交给新启动的守护进程。但如果将守护进程运行在基于Docker的容器中就会出现问题。systemd的单元文件通过Docker CLI执行容器，但此时systemd无法简单地通过Docker CLI将套接字转交给Docker守护进程。

类似的问题促使我们意识到需要一种新的容器运行方式。

#### 容器编排问题

上游Docker项目简化了容器的使用过程，是一个优秀的Linux容器学习工具。你可以通过一条简单的命令快速体验如何启动一个容器，例如运行`docker run -ti fedora sh`，然后你就立即进入了一个容器环境。

然而，当你开始将多个容器组织成一个功能更强大的应用时，才能真正体会到容器的强大之处。但是，多容器应用带来的复杂性使得简单的Docker命令难以胜任编排工作。如何管理容器应用在有限资源的集群节点间的布局和调度？如何管理它们的生命周期等等？

在第一届DockerCon上，至少有七家不同的公司/开源项目展示了他们的容器编排方案。红帽展示了基于OpenShift v2容器（称为gears）的geard项目。红帽认为我们需要重新审视容器编排，并可能与其他开源社区合作。

谷歌展示了Kubernetes容器编排工具，它源自谷歌对其内部架构进行编排的经验。OpenShift决定放弃Geard项目，开始与谷歌共同开发Kubernetes。如今，Kubernetes已成为GitHub上最大的社区项目之一。

#### Kubernetes

最初，Kubernetes设计为使用Google的lmctfy容器运行时环境。2014年夏天，lmctfy兼容了Docker。Kubernetes还在每个Kubernetes集群节点上运行一个kubelet守护进程，因此，使用Docker 1.8的Kubernetes工作流看起来是这样的：
```
kubelet → dockerdaemon @ PID1
```

这又回到了双守护进程模式。

更糟糕的是，每次Docker的新版本发布都会导致Kubernetes无法正常工作。Docker 1.10切换了镜像底层存储方案，导致所有镜像需要重建。而Docker 1.11开始使用`runc`来启动镜像：
```
kubelet → dockerdaemon @ runc @PID1
```

Docker 1.12则增加了一个容器守护进程来启动容器。其主要目的是为了支持Docker Swarm（Kubernetes的竞争者之一）：
```
kubelet → dockerdaemon → containerd @runc @ pid1
```

---

通过以上改进和调整，Linux容器技术不断进步和完善，逐渐成为现代云计算和微服务架构的重要组成部分。