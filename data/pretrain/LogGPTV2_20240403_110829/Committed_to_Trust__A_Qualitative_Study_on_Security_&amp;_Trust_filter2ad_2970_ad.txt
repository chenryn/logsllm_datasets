### Applicability and Project Diversity

Our recruitment approach aimed to achieve a high diversity in projects, resulting in participants with a wide range of project backgrounds. These projects span from operating system components and libraries to scientific computing frameworks. For each participant, we documented the project categories and the number of commits in their largest project, as shown in Table I. 

Project contributors are often highly distributed, with five out of 27 participants reporting that they know other contributors only virtually. For example, P17 stated, "Everybody I’ve encountered has just been virtually: I can see the profile picture of some people, and that’s the only image I have of them." (P17). However, this does not seem to hinder collaboration, as P17 further noted, "But to be honest, I don’t really mind. As long as one has the same interests, it’s still easy to collaborate if you have the same goal." (P17). On the other end of the spectrum, four participants mentioned very close connections, such as working at the same company or university.

We categorized our participants based on their highest project role, in roughly ascending order of responsibility: contributors (4), maintainers (3), team leaders (7), and founders or owners (9). Overall, we found that our participants were more experienced than expected, often having been involved for multiple years and possessing high-level commit rights. This high level of experience is likely due to our recruiting efforts focusing on "expert channels" such as project-specific communication channels or dedicated contact addresses, and being referred further up in projects until reaching founders and owners.

**Summary: Project Demographics**
- The majority of our participants are highly experienced in the open source environment, often with multiple years of work and high-level commit rights.

### Security Challenges

In this section, we explore past security challenges encountered by our participants and their opinions on the widely reported "hypocrite commits" incident. More than half (16) of our participants reported never having encountered a direct security incident. The most commonly reported security challenges included suspicious or low-quality commits (15) and vulnerabilities introduced by dependencies (8).

Participants generally had mixed feelings about potentially malicious commits. P06 stated, "I mean, there’s definitely been people that have intentionally tried to put malicious code in projects, but it’s always very easy to spot immediately. It’s like those spam emails where they have bad grammar and stuff." (P06). Similarly, vulnerabilities in dependencies often turned out to be false positives or irrelevant to their projects. P06 elaborated, "Most of the vulnerabilities I deal with are transitive dependencies, have a CVE, and 99.99 percent of the time, they are false positives for every other use case: it’s a real vulnerability in the dependency, but it’s not in the way almost anyone uses it."

The majority of our participants (23 out of 27) were aware of the "hypocrite commits" incident in early 2021. For the remaining four, we provided a short, factual summary during the interview. Of the 16 participants with a generally negative opinion of the incident, many considered the research approach as outright malicious. P06 commented, "The shocking and surprising part was, that an academic institution would essentially do evil and justify it by saying that the ends justify the means." (P06). This is likely a misconception, as the researchers stated that they did not intend to, and objectively did not, introduce any vulnerability in Linux [10]. Some participants with a mixed (7) or no opinion (4) considered the research approach similar to that of a "White Hat Hacker," although with a flawed execution. P11 said, "I do understand both sides of this [. . .] It would be much better if this kind of research was done in cooperation with somebody at the Linux kernel, who knew that it’s happening and without disclosing that to a lot of people." (P11). We did not identify any participant with a positive opinion of the incident. This skew may be exaggerated by the generally negative, sometimes misinformed reporting by open source-aligned news sources and communities.

**Summary: Security Challenges**
- Only a few projects have experienced an outright security incident, although many participants were familiar with suspicious or low-quality commits and potential vulnerabilities introduced by dependencies.
- The majority of participants were generally aware of the "hypocrite commits" incident and had an overall negative opinion of the research approach.

### Guidance and Policies

In this section, we examine the guidance and best practices provided by the projects, as well as the content and applicability of security and disclosure policies.

**Guidance:**
- Most participants mentioned guidance for contributing to the project (14) and programming language-specific guidance such as style guides (13), followed by general guidance for project setup and infrastructure (8).
- Reasons for not providing specific guidance documents include time and money constraints. P26 explained, "Somebody would have to write the guide, and I am the only one who can write it. I mean, there is nobody paid to write it and I am also not paid to write it." (P26).
- Opinions on the helpfulness of guidance varied. P27 stated, "I personally think that documentation is one of the most important aspects of an open source project, both for users and developers." (P27). In contrast, P02 was less enthusiastic, saying, "I’m also honestly not quite sure that’s really that helpful [. . .] Of course, it’s quite nice to have overviews and stuff like that somewhere, but there aren’t too many people who then read something like that." (P02). Instead, P02 prefers coaching new contributors, while P11 mentioned an alternative approach: "We answer very detailed answers to questions of users, which then become the kind of searchable result of answers for guides, including security fixes." (P11).

**Security Policies:**
- Eight participants mentioned that their projects do not have specific security policies. P06 offered an explanation: "So in the same way as people don’t make a security policy on their repo unless something pushes them to do it or unless they have a security incident, people aren’t going to document security best practices unless they’ve had a problem. Part of that is because they may not know to do so. But part of that is also because is there a need?" (P06).
- The most commonly mentioned security policy aspect (10) was related to providing a security-specific contact for the project and/or a dedicated security team. Less common policies include air gapping and programming language-specific policies.
- Only four participants explicitly mentioned not having any form of disclosure policy or security contact. Other approaches included a policy or plan for coordinated disclosure (10), private channels for disclosure (5), and plans for full disclosure, e.g., as public issues (2). The debate regarding coordinated disclosure in open source projects extends to our participants, with some stating, "[the projects] say: we’re just putting our users at too much risk. We’re not sitting on patches, the people out there have installations on the front line, and because somebody likes to coordinate something, we’re not waiting three months longer." (P01).

**Testing and Reviews:**
- Many participants mentioned automated tests and mandatory reviews. P05 described, "There are standard practices like there is a test suite, we’ve unit tests, integration tests, and as soon as we find any bugs or you write regression tests and there are codes, there’s peer reviews of our codes and larger reviews of bigger PRs as well." (P05).

**Summary: Guidance and Policies**
- Participants diverge in their opinions regarding the helpfulness of written guidance.
- Larger projects mentioned dedicated security teams, while smaller projects mentioned a security contact channel. Most projects included some type of disclosure policy or at least a contact for security issues.

### Project Structure

In this section, we explore structures that are often not directly visible from repository artifacts, such as build and deploy steps, selection criteria and vulnerability checks for dependencies, and additional infrastructure like project websites and communication tools. The specific project setups are as diverse as our participants’ projects. Most development approaches appear to be somewhat open, as P25 noted, "It’s an open-source project, everything from [build] stages to CI is in the same repository, and everyone can contribute to it. However, no one has direct control over anything because everything executed is a series of scripts and tests in the main repository, meaning that anyone can send a pull request tomorrow and modify them." (P25).

**Pull Requests:**
- Projects provide a number of controls for handling pull requests, such as protecting the main branch. P19 explained, "The main branch is protected. Of course, we do everything through forks. Meaning, each developer has their own fork, opens a pull request and there’s a limited number of people who have the permissions to do the final merge." (P19).
- Different strategies for merging code contributions include rebasing on main, majority vote before merging, and optimistic merging with follow-up pull requests. P11 stated, "We actually always require from the author to rebase their changes on top of the main, so that we don’t have the whole complex structure of merges [. . .] which actually helps to pinpoint any kind of problems [. . .]" (P11). P17 described a majority vote, "So on each PR you can review it and then give a thumbs-up or thumbs-down. And that’s done by at least three of the main contributors, [. . .] and that means that it’s a majority of them think that it’s a worthy contribution." (P17). P16 mentioned an optimistic merging approach, "[Y]ou optimistically merge code as long as it passes some basic sanity checks. If someone thinks that the code which is merged isn’t actually perfect, there is some way to improve it, they need to send a follow-up pull request." (P16).

**Build Pipeline:**
- 23 participants mentioned using CI/CD or other automatic build systems, with the majority relying on GitHub Actions (10). P02 described a hodgepodge of systems, "But basically we use everything, like Travis, Azure Pipelines, GitHub Actions, CircleCI, custom build machines and so on. It’s quite a hodgepodge." (P02).
- A few participants (3) preferred manual builds and publishing. P04 stated, "I don’t like the one-click deploy, I like to actually see, you know, things fly by in the console." (P04).
- Running tests as part of the build pipeline is a common practice. P11 and P12 highlighted extensive testing, with P11 mentioning, "[. . .] we have a huge number of tests, actually. More than 10,000 tests and 70 static check analyses." (P11) and P12 noting, "Every pull request automatically goes through our full test suite [. . .] There are at least 1,000 files, each testing one area." (P12).
- Thorough testing might include trade-offs in attracting contributors, as P16 pointed out, "If the tests run in five seconds, then people will contribute, if the tests run in five hours, then people will contribute less." (P16).

**Signed Commits:**
- Only four participants mentioned PGP signing commits in their projects, not always for security reasons. P06 explained, "I PGP sign all my commits. The main reason I do that is because it gives me a pretty little verified badge on all my commits." (P06).
- Reasons for not signing commits included technical limitations and different workflows. P11 noted, "[Commit signing] is one of the things that is rather difficult to do if you are using the GitHub workflow" (P11). P24 added, "I don’t make everybody do it, because eventually, the commit will get squashed when I merge it, and then it’s going to be signed by GitHub automatically." (P24).

**Dependencies:**
- Common criteria for selecting a dependency included activity and reputation metrics. P25 stated, "Our most important criteria, in general, is that we do not want to rely on inactive projects." (P25). P11 mentioned, "If somebody was pulling in a package and I go to their GitHub and its got two stars and it’s only used in this project, I’m probably going to say, 'Let’s avoid using that.'" (P11).
- Some participants had more involved criteria, such as sending pull requests to fix issues before including a dependency. P18 described, "What I usually do before including any dependency is I send them a pull request fixing something. And if they don’t react on this or don’t merge that one, then they don’t become my dependency because they are obviously not interested in improving the software." (P18).
- Few participants manually reviewed third-party dependencies. P03 explained, "Whenever we include a library in a project, we examine the project beforehand and two or three core contributors actually need to confirm that it looks okay." (P03). P22 mentioned looking for specific language features that may affect security, "I always go to the source code. I searched for all uses of unsafe and I check if they are, if they are like, if they make sense or not." (P22).

**Summary: Project Structure**
- Participants fully utilize modern build systems, including during testing and deployment.
- Only a few projects explicitly use signed commits, often due to incompatibilities with their workflow or threat model.
- Selection criteria for dependencies range from readily available metrics to elaborate collaborations or even rewrites.

### Releases and Updates

In this section, we explore the projects' release decisions and schedules, guidelines for release deprecation, distribution methods, and whether releases are digitally signed. Release decisions broadly fit into two approaches: periodic releases (9) or releases when specific features or patches are ready (10). Different communities favor different release approaches, as described by our participants:

- **Periodic Releases:** P09 explained, "Periodically, we’ll reach consensus in the community, and say, 'Hey, we ought to do a release,' and so we’ll stop developing for a few days and just make sure there aren’t any major bugs." (P09).
- **Feature-Driven Releases:** P13 described, "We try to aim for three times a year, mostly because the real reason for the three times a year rough cycle is that we polled the community and the kind of the averaging that three times a year seemed like what suited people the most." (P13).

Some participants utilize both approaches, depending on project maturity. P25 mentioned, "Mainline development continues just normally under the main branch, and we have this temporary release branch where we merge in only bug fixes that come in during this time. This is for the most mature projects [. . .] For projects that move faster and don’t have, for example, back-holding strategy for bugs, we release more frequently."

**Summary: Releases and Updates**
- Release decisions vary between periodic and feature-driven approaches, often based on community input.
- Some projects use both approaches, depending on project maturity and community preferences.