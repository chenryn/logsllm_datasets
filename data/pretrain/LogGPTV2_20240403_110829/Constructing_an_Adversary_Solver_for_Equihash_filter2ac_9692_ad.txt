register
combinational
1.9151 mW
19.1011 mW
3.5137 mW
38.1958 mW
6.9055 mW
56.9064 mW
75.6878 mW
9.8749 mW
112.2805 mW 10.0351 mW
2.6302 mW
28.6188 mW
56.8771 mW
4.6216 mW
113.4787 mW 8.6371 mW
In table VI we estimate the power usage of our major
modules running at 1 GHz. We assume 70 ns and 5 ns latencies
for off-chip and on-chip memory, therefore the queue before
each merge stage contains 70 items, with 5 items stored
directly in FFs.
When actually scaling the clock speed, most modules’
power consumption is proportional to frequency, and can be
estimated accordingly. If intended for lower frequencies (like
below), the prefetch queues can be shorter, thus saving extra
energy, and is favorable to adversaries. However, we ignore
this optimization, because its effects are minor compared to
the overall efﬁciency advantage.
TABLE VI: Component power estimations at 1GHz
component
smartcell
4-way merge
8-way merge
queue (70, 5)
prefetcher
sort
merge
total
(200, 9)
(144, 5)
optimistic
562 µW
488 µW
pessimistic
489 µW
471 µW
pessimistic
optimistic
587 µW
467 µW
406 µW
565 µW
1.10 mW 1.38 mW 1.32 mW 1.65 mW
8.26 mW 8.51 mW 9.83 mW 10.1 mW
2.44 mW 2.59 mW 2.93 mW 3.11 mW
601 mW
956 mW
333 mW
272 mW
1.50 W
1.93 W
575 mW
323 mW
1.54 W
1.00 W
281 mW
1.56 W
A smartcell saves two sets of items with FFs, together with
a binary comparator, and a full insertion-sort module includes
Nc of them. An M-to-1 merge unit stores only one item
as output and has C(M, 2) comparators. If read latencies of
external and on-chip memory are expressed in ticks as Le and
Lo, every prefetch queue is implemented with Le − Lo items
stored in on-chip memory and Lo items in FFs, with its power
close to 0.5(Le + Lo) sets of FFs. A prefetcher has an extra
(narrow) queue to indicate ownership for fetched data, a set of
encoder and decoder, as well as an address counter for each
data queue.
Under (200, 9) and at 500 MHz, our solver should produce
40.6 solutions per second and use 0.75-0.78 Watts of power
excluding microcontrollers, or 52-54 solutions per Joule. Un-
der (144, 5), we produce 5.36 solutions at the same frequency
and using similar power, yielding 5.6-7.0 solutions per Joule.
Compared to the best software solvers available 11, our method
11Proprietary softwares running on GPUs. Around 4 solutions per Joule
under (200, 9) and around 0.4 solutions per Joule under (144, 5).
9
Fig. 5: Internal dataﬂow of an Equihash solver with two merge
steps
MHz and 197 Gb/s at 333 MHz, achievable with commercially
available DDR4 modules conﬁgured in multiple channels.
Our (144, 5) conﬁguration uses more memory for two
reasons: (1) longer L and P , and (2) an extra puzzle is needed
to ﬁll the pipeline. The acess patterns stay the same, but
bandwidth requirements are actually lowered because items
in L are signiﬁcantly shorter.
B. Energy efﬁciency
1) Performance: Recall that the linear sorting peripheral
processes a full-length sequence every Nc + 1 cycles, and
speeds up when sequences are shorter than expected. This
becomes the bottleneck within the solver, whose throughput
performance is measured accordingly. In both of our example
arrangements, the ﬁrst merging stages are the bottlenecks,
where all end-of-sequence markers are present.
Under (200, 9), one batch is processed every 2.10M cycles.
Every equihash puzzle has to be solved k times, so at 500
MHz our example should solve 26.5 puzzles, yielding 40.6
solutions per second. Under (144, 5), one batch is processed
every 33.6M cycles. At the same frequency, our design should
solve 5.95 puzzles and yield 10.7 solutions per second.
2) Power consumption: Our design uses large amounts of
FFs, binary comparators, and some on-chip memory, so we
decide to estimate our overall power based on the count of
these elements. To obtain these base data, we ran Synopsis
Design Compiler on our insertion sort modules and collected
power reports under SMIC 28nm HKMG with frequency set
has already achieved more than ten times core efﬁciency. The
advantage would increase even further if tweaks mentioned in
section III and IV-B2 are applied.
Traditionally PoW solvers spend most their power in com-
putation. In our design, computational workloads are reduced
so much, the core power usage goes below previously-known
overheads including memory,
interconnects and microcon-
trollers. Actual designers might as well want to use higher-
bandwidth memory solutions, bringing up the solver’s fre-
quency to mitigate the overhead. Although some inevitable
deviation is introduced to our results, our goal is not defeated.
multi-chip ASIC solvers are still far more efﬁcient than CPUs
and GPUs, and Equihash’s ASIC resistance is not strong
enough.
Ren [19] uses an estimated 0.3 nJ/B memory access cost
for ASICs in the methodology, which would be an overhead
around 10 W at 500 MHz if applied directly. We project a
much lower consumption because:
• Malladi [16] states that modern memory systems has
lower cost per access at very high utilization. It is very
likely for ASIC Miner manufacturers to use up all the
bandwidth to optimize performance by adjusting the
operating frequency of the solver core.
• These results are to some extent outdated. Later produc-
tion technologies and memory interfaces (like DDR4)
have lower voltage and are more optimized, thus have
lower power consumption.
• The value might have included components other than
memory itself, like cache and memory controllers. Our
solver does not have any 12 and demand very little from
memory controllers, thus might mitigate some cost.
Even if we take the worst-case memory power usage into
consideration, and utilize the most pessimistic values, adver-
saries still have higher efﬁciency than the latest GPUs. If
equally up-to-date production technologies are available, the
efﬁciency will further increase because of smaller components
and lower voltages. A projection of 10x advantage is therefore
reasonable for resourceful adversaries that apply mentioned
optimizations. ASIC solver products, if ever produced, will
therefore be proﬁtable, making blockchain applications vul-
nerable to unforeseen attacks and monopoly formation.
VI. INSIGHTS
In this section we discuss our methodology of inspecting
PoW schemas and constructing the solver design. We also
list factors that have inﬂuence on the process, both those
enabling our design and those causing difﬁculties. These
factors serve as useful start points for future ASIC-resistance
studies, especially in PoW systems.
A. Methodology
Our demonstration shows a practical and useful way to serve
as a baseline for future reﬁnements.
12Power consumed by buffers already included.
10
Exploiting as an adversary has long been used by the
security community to inspect and ultimately defend systems
and applications. It is uncommon for blockchain networks
to go through these steps and prove their unlikelihood of
monopoly formation. We suspect two major explanations: (1)
being unfamiliar to IC-related research effort involved in these
systems, and (2) lack of responsible disclosure method. The
former problem can be handled by identifying subroutines
that can be efﬁciently implemented on hardware already
(possibly via ﬁnding products with similar functionalities). It
frees researchers from ﬁne-grained details. The latter is more
complex due to blockchain’s natural resistance towards PoW
rule patching.
As mentioned in section II-A, to apply any change onto
the PoW schema (and therefore the consensus policy), one
would have to launch a hard fork. This requires the fork to
gain endorsement from a majority of the network, forcing
exploits to be publicly disclosed beforehand. Even though
ASIC solvers take months to produce, it may still not be
enough to notify enough participants and fork successfully.
Fortunately,
is not so
signiﬁcant to need immediate patching. It is sufﬁcient to lower
attack proﬁtability and buy time for future actions, just from
raising awareness and having users value related assets with
corresponding knowledge
the weakness we are pointing out
B. ASIC-friendly factors
Clear subroutine boundary: The memory requirements of
Equihash are provided by multiple subroutines with clear
boundaries, exposing larger attack surface compared to other
deployed PoW schemas. Multiple subroutines are more likely
to be exploited separately, weakening the overall ASIC-
resistance.
Real-life subroutines: The sort/hash step in Equihash is
more of a real-life algorithm than a cryptographic routine, and
is easily vulnerable to all kinds of tweaks and optimizations.
Sequential memory access: Both the sort/hash step and
the xor step contains signiﬁcant sequential memory access,
creating a memcpy-like workload, increasing ASIC advantage
and beneﬁting special memory conﬁgurations not available for
CPU/GPUs.
C. ASIC-resistant factors
Algorithm bounding: Equihash implements the idea of
algorithm bounding, but only with moderate strength. This
prohibits adversaries from using alternate algorithms but not
from tweaks like choosing a sort/hash method and cutting tails.
Logic complexity: The idea of logic complexity has long
existed for hardware designers, especially when designing
acceleration peripherals. The massive amount of logic stops
adversaries from applying linear sorting, and could possibly
provide alternate ASIC-resistance.
Dynamic resource usage: We mentioned in section II-C
and section IV-A that L shrinks and P grows after each
round. Solvers have to either (1) provide enough resources (in
this case memory) for static allocation, or (2) add logic for
[10] M.
J. Dworkin,
“Sha-3 standard: Permutation-based hash and
extendable-output functions,” Tech. Rep., 2015.
[11] C. Grozea, Z. Bankovic, and P. Laskov, “Fpga vs. multi-core cpus vs.
gpus: hands-on experience with a sorting application,” in Facing the
multicore-challenge. Springer, 2010, pp. 105–117.
[12] H4x3rotab. (2018) Network upgrade testnet launch. [Online]. Available:
https://github.com/BTCGPU/BTCGPU/issues/324
[23] Zhejiang Ebang Communication Co., Ltd. (2018) E10.1 18T. [Online].
Available: http://miner.ebang.com.cn/goods-7.html
[13] D. Hopwood, S. Bowe, T. Hornby, and N. Wilcox, “Zcash protocol
speciﬁcation,” Tech. rep. 2016-1.10. Zerocoin Electric Coin Company,
Tech. Rep., 2016.
[14] M. Jakobsson and A. Juels, “Proofs of work and bread pudding proto-
cols,” in Secure Information Networks. Springer, 1999, pp. 258–272.
[15] John Tromp. (2018) Let’s talk about ASIC mining. [Online]. Available:
https://forum.z.cash/t/let-s-talk-about-asic-mining/27353/3332
[16] K. T. Malladi, B. C. Lee, F. A. Nothaft, C. Kozyrakis, K. Periyathambi,
and M. Horowitz, “Towards energy-proportional datacenter memory
with mobile dram,” in ACM SIGARCH Computer Architecture News,
vol. 40, no. 3.
[17] MentalNomad.
IEEE Computer Society, 2012, pp. 37–48.
Attacks
(2018)
Double
Available:
Spend
Ex-
https://forum.bitcoingold.org/t/
on
changes.
double-spend-attacks-on-exchanges/1362
[Online].
[18] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[19] L. Ren and S. Devadas, “Bandwidth hard functions for asic resistance,”
in Theory of Cryptography Conference. Springer, 2017, pp. 466–492.
[20] J. Tromp, “Cuckoo cycle: a memory bound graph-theoretic proof-of-
work,” in International Conference on Financial Cryptography and Data
Security. Springer, 2015, pp. 49–62.
[21] D. Wagner, “A generalized birthday problem,” in Annual International
Cryptology Conference. Springer, 2002, pp. 288–304.
[Online]. Available:
https://github.com/
[22] (2018) Equihash-xenon.
xenoncat/equihash-xenon
dynamic allocation. Since software can accomplish this very
well, large-scale, complex and unpredictable resource usage
might limit ASIC advantage.
VII. CONCLUSION
In this paper, we propose a method to inspect the ASIC-
resistance of PoW schemas and apply it on Equihash. By
constructing a practical and efﬁcient ASIC solver, we discover
its limitation in the form of adversary advantage.
We have demonstrated the following contributions:
• It is practical and useful to carry out inspections on PoW
systems, by constructing solver designs from adversaries’
point of view.
• Equihash resists single-chip ASIC solvers, but
is not
bullet-proof. Efﬁcient ASIC solvers using off-chip mem-
ory are still possible. Solvers following our design work
under all parameters, with energy efﬁciency advantage
around 10x.
• We list encountered algorithmic factors and comment on
their inﬂuence adversary strategy, innovating future PoW
schemas.
Our future plan is to reﬁne our methodology to reveal other
weaknesses within PoW schemas. We hope the construction
procedure can inspire future ASIC-resistance studies, eventu-
ally securing related applications. At the same time, we would
like to try out new PoW ideas, hopefully to conquer known
problems and achieve better fairness.
ACKNOWLEDGMENT
The authors would like to thank Dr. Jinmei Lai from State
Key Laboratory of ASIC & System, Fudan University for
providing ASIC design suite and related resources.
This work is partially supported by Chinese National Key
R&D Program under Grant No. 2017YFB1400604 and Grant
No. 2018YFC0831402.
REFERENCES
[1] M. Abadi, M. Burrows, M. Manasse, and T. Wobber, “Moderately hard,
memory-bound functions,” ACM Transactions on Internet Technology
(TOIT), vol. 5, no. 2, pp. 299–327, 2005.
[2] L. Alcock and L. Ren, “A note on the security of equihash,” in Pro-
ceedings of the 2017 on Cloud Computing Security Workshop. ACM,
2017, pp. 51–55.
[3] Alex Kerya.
(2014) GHash.IO is open for discussion.
Available: https://blog.cex.io/news/ghash-io-51-percent-5180
[Online].
[4] A. Biryukov and D. Khovratovich, “Equihash: asymmetric proof-of-
work based on the generalized birthday problem,” Proceedings of NDSS
2016, p. 13, 2016.
[5] F. Coelho, “Exponential memory-bound functions for proof of work
protocols.” IACR Cryptology ePrint Archive, vol. 2005, p. 356, 2005.
[6] S. Devadas, L. Ren, and H. Xiao, “On iterative collision search for lpn
Springer,
and subset sum,” in Theory of Cryptography Conference.
2017, pp. 729–746.
[7] C. Dwork, A. Goldberg, and M. Naor, “On memory-bound functions
for ﬁghting spam,” in Annual International Cryptology Conference.
Springer, 2003, pp. 426–444.
[8] C. Dwork and M. Naor, “Pricing via processing or combatting junk
mail,” in Annual International Cryptology Conference. Springer, 1992,
pp. 139–147.
[9] C. Dwork, M. Naor, and H. Wee, “Pebbling and proofs of work,” in
Annual International Cryptology Conference. Springer, 2005, pp. 37–
54.
11