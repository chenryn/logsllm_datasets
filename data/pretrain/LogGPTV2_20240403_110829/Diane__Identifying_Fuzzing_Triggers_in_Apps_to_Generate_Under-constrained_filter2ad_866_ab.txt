app-side validation we refer to all types of constraints that the app
imposes on the data sent to an IoT device. These constraints might
be imposed by typical sanitization checks (e.g., limiting the length
of a string) or by parameters hard-coded in the generated request
(e.g., hard-coded attributes in a JSON object).
Our work fills this gap: We identify strategic execution points
that produce inputs that are not affected by the constraints that the
app logic imposes. To achieve this goal, we analyze an IoT device
companion app, and focus on identifying effective fuzzing triggers:
Functions that, when used as entry points for fuzzing, maximize
the amount of unique code exercised on the device’s firmware,
thus potentially triggering security-relevant bugs. Consider, as
an example, the app’s execution as a sequence of functions that
receive data from the UI and send it over the network. On the one
hand, if the fuzzed function is too close to the UI, the fuzzing is
ineffective due to app-side validation that might be present later
in the execution. On the other hand, picking a function too close to
the point where data is put onto the network might be ineffective.
In fact, some protocol-specific data transformations applied early
in the execution would be skipped, causing the generated inputs to
be dropped by the IoT device. In Figure 1, the function sendMsg
represents a fuzzing trigger.
Our approach identifies these fuzzing triggers automatically,
relying on a combination of dynamic and static analyses, without
the need for any a priori knowledge about neither the firmware
nor the network protocol used by the analyzed IoT device.
Additionally, previous work [25] relies on specific sources of
inputs (e.g., text boxes in the app’s UI) to bootstrap its analysis,
and does not mutate data generated from unspecified sources (e.g.,
firmware updates through the companion app triggered by a timer).
Our bottom-up approach (explained in Section III) does not make
any assumptions on input sources and is, therefore, more generic.
The example we discussed in this section is the simplified
version of the code implemented in the Wansview app. We also
note that app-side validation is prevalent in real-world apps, and
that the challenges we described do not only apply to this example.
III. APPROACH
While our goal is to find bugs in IoT devices, given the general
unavailability of their firmware, we focus our analysis on their
companion apps. Our key intuition is to identify and use, within
these companion apps, those functions that optimally produce
inputs for the analyzed IoT devices. These optimal functions
effectively produce inputs that are valid yet under-constrained.
Automatically identifying these functions is a challenging task
because the complexity of the companion apps, the usage of native
code, and the presence of multiple threads rule out approaches
based entirely on static analysis. Thus, we propose a novel analysis
pipeline built on top of four different analyses: i) static call-graph
analysis, ii) network traffic analysis, iii) static data-flow analysis,
and iv) dynamic analysis of the function arguments.
Our approach does not make any assumption on how the app’s
user interface influences the data sent to the controlled IoT device,
and it avoids app-side sanitization on the generated data. Our
analysis does not start by considering UI-processing functions,
but, on the contrary, uses a “bottom-up” approach. Specifically, we
start from identifying low-level functions that potentially generate
network traffic, and then we progressively move “upward” in
the app call-graph (i.e., from low-level networking functions to
high-level UI-processing ones). This approach allows us to identify
functions that produce valid yet under-constrained inputs, skipping
all the sanitization checks performed by data-processing functions.
We then use these functions, which we call fuzzing triggers, to
efficiently fuzz the analyzed IoT device, while monitoring it for
anomalous behaviors, which indicate when a bug is triggered.
We implement our approach in a tool named DIANE, depicted
in Figure 2. DIANE works in two main phases: Fuzzing Trigger
Identification, and Fuzzing. In the Fuzzing Trigger Identification
phase, DIANE identifies optimal functions within the companion
app,
that, when invoked, generate under-constrained well-
structured inputs for the analyzed device. Then, during the Fuzzing
phase, these functions are used to generate data that is sent to the
analyzed device using a local network connection.
Our approach is independent of the network medium used by
the analyzed app. We apply it to apps communicating with their
related IoT device both over WiFi and Bluetooth (Appendix B).
DIANE fuzzes IoT devices that receive commands through a
local connection between the device and the companion app.
Though some devices might receive commands from cloud-based
endpoints, research showed that the vast majority of them (95.56%)
also allow some form of local communication (e.g., during the
device setup phase) [17].
A. Fuzzing Trigger Identification
Intuitively, fuzzing triggers are functions that, in the app’s control
flow, are located in between the app-side validation logic and any
data-transforming (e.g., message serialization) function occurring
before sending data over the network. Precisely, given an execution
trace from a source of input (e.g., data received from the UI) to the
function sending data over the network, a fuzzing trigger is defined
as a function that dominates1 all data-transforming functions and
post-dominates all input-validating functions. We consider the first
data-transforming function in the trace a valid fuzzing trigger, as it
dominates every other data-transforming function (itself included).
Our bottom-up Fuzzing Trigger Identification algorithm is
composed of four steps: i) sendMessage Candidates Identification,
ii) sendMessage Validation, iii) Data-Transforming Function
Identification, and iv) Top-Chain Functions Collection. Algorithm 1
lists the pseudo-code of our approach.
Step 1: sendMessage Candidates Identification. We begin by
identifying the functions, in the companion app, that implement
the necessary logic to send messages to the IoT device. We call
these functions sendMessage functions.
Identifying these functions in an automated and scalable way
is difficult. Companion apps might rely on ad-hoc native functions
directly invoking system calls to implement sendMessage
functions. Furthermore, we found that these functions might be
1We refer to the dominance concept of the call graph theory, where a node d domi-
nates a node n if every path from the entry node to n must go through d. Also, we say
that a node p post-dominates n if every path from n to an exit node passes through p.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
486
Fig. 2. Using static analysis, DIANE first identifies candidate sendMessage functions. Then, it runs the companion app, replaying a recorded user
interaction, to validate the candidate sendMessage functions. Next, DIANE uses a hybrid analysis to identify data-transforming functions and, therefore,
fuzzing triggers. Finally, DIANE fuzzes the validated triggers and identifies crashes by monitoring the device responses.
executed within separate threads, which makes it harder for any
analyses (both static or dynamic) to precisely track data flows
between the app’s UI and sendMessage functions. However,
our key insight is that the companion app must contain “border”
functions, situated between the app core functionality and external
components (i.e., the Android framework or native libraries),
which, when executed, eventually trigger a message to be sent to
the IoT device. Throughout the rest of the paper, we consider these
border functions our sendMessage functions.
In our approach, we first identify candidate sendMessage
functions by statically analyzing the companion app. We aim
at finding all the border methods that might implement the
network interactions with the analyzed IoT device (function
getBorderMethods in Algorithm 1). Specifically, we collect all
the methods that perform (at least) a call to native functions or a
call to methods in the Android framework that implement network
I/O functionality (see Appendix A for more details).
Step 2: sendMessage Validation. We dynamically execute the app
and leverage API hooking to validate the candidate sendMessage
functions. In order to establish whether a border function is a valid
sendMessage function we could, in theory, i) dynamically execute
the function multiple times and check whether it generates network
traffic each time, and ii) prevent the app from executing the function
and check whether or not network traffic is still generated. Unfortu-
nately, we found that preventing a function to be executed, as well
as forcing the app to execute the same function multiple times, usu-
ally causes the app itself to crash. To solve these issues, we adopt
a different approach, based on timestamps and machine learning.
First, we dynamically hook all the candidate functions and run
the app. When we observe network activity, we register the last
executed candidate sendMessage function. In particular, each time a
candidate sendMessage function is executed, we collect the elapsed
time between its execution and the observed network activity. Then,
we leverage the K-mean algorithm to cluster the observed elapsed
time measures. Specifically, we group our candidates into two
clusters (i.e., k =2). To do so, we compute each feature vector as
the mean, standard deviation, and mode of the elapsed times of
each candidate. The rationale is that functions that cause network
activity have a smaller mean and standard deviation, as they are less
affected by noise. Finally, among the sendMessage candidates, we
select those belonging to the cluster having the smallest mean of the
elapsed times. Only the sendMessage functions within this cluster
will be considered in the subsequent steps of our analysis. This ap-
proach is represented by the function dynamicFilter in Algorithm 1.
Step 3: Data-Transforming Function Identification. While
sendMessage functions are intuitively good triggers for performing
fuzzing, apps may apply data-transformations in functions
executed before a sendMessage function. A typical example of a
data-transforming function is represented by an encoding method
that takes as input a list of integers and serializes it to a sequence
of bytes.
As previously explained, fuzzing triggers are functions that, in
the app’s control flow, are located before any data-transforming
function. Fuzzing a function located in between a data-transforming
function and a sendMessage function would likely produce invalid
inputs that are discarded by the IoT device. Thus, to find fuzzing
triggers, we first need to identify the data-transforming functions
applied to the data being sent.
This task presents different challenges. First, the data being
sent might be contained in a class field, which is referenced
by the sendMessage function. This field might be theoretically
set anywhere in the app code, including within other threads.
Furthermore, for each field, we need to consider its parent classes,
as the variable holding the message to be sent might be inherited
by a different class.
In our approach, we take into account these issues. We first
statically identify the possible variables that hold the data being
sent by the considered sendMessage function, and the code
locations where these variables might be set in the app (function
getArgAndObjLocs in Algorithm 1). To achieve this, we create
a set Sv containing tuples (v,cl), where v is a variable used by the
sendMessage (i.e., sendMessage arguments or objects referenced
within the sendMessage body), and cl is the code location where
v is set.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
487
Static AnalysisCandidatesendMessageDynamic AnalysisAPI HookingResponseMonitoringNetwork ActivityDetectionUI ReplayFilteredsendMessageFuzzingValidatedsendMessageCrashesClusteringHybrid AnalysissendMessageData TransformingFunctionFuzzingTriggersCompanionAppIoTDeviceThen, we identify data-transforming functions. For each tuple
(v,cl)∈Sv, we perform a static inter-procedural backward slicing
(Line 6 in Algorithm 1) from cl up to any function retrieving values
from any UI objects. Then, we divide the computed program slices
in function scopes (getFunctionScopes at Line 7). Given a program
slice, a function scope is defined as a subsequence instf of sequen-
tial instructions in the slice that belong to the same function f.
For each collected function scope, we perform a liveness
analysis [63]: We consider the variables (i.e., local variables and
class fields) referenced within the function scope, and we compute
the set Lif of variables that are live at the beginning of the scope,
and the set Lof of variables that are live at the end of the scope
(Line 8). For example, if a function f is traversed by the slice, the
variables that are live at the beginning of the function scope instf
are f’s arguments and the class fields that are read before being
written in f. The variables that are live at the end of f’s scope are
the returned variable and the class fields that f creates or modifies.
To identify data-transforming functions, we leverage the
observation that these functions increase the entropy of the data
they consume, as explored by related work [25]. Therefore, we
hook the functions we identified in a slice, we dynamically run
the app, and we calculate the Shannon entropy [49] of the data
assigned at runtime to each variable v contained in Lif and Lof
(more details about how we calculate the entropy are provided in
Appendix C). If v is a primitive variable (e.g., int), or a known
type (i.e., String, Integer, Float, and Double), we
convert the data it contains in its byte representation and calculate
the Shannon entropy of this list of bytes. Conversely, if v is a class
field, we retrieve its class definition and consider each field variable
vc of v whose type is either primitive or known. Then, we compute
the entropy of each one of these vc variables, and add them to either
the Lif set or to the Lof set, depending on which live set v belongs.
Finally, we inspect every collected function scope and calculate
the quotient de between the maximum entropy registered among
all the variables in Lof and the minimum value of entropy
registered among all the variables in Lif (Line 11). If de is greater
than a certain threshold Tf (set to 2.0 in our experiments, as
previous work suggested [80]), we consider the function f to be
a data-transforming function (Line 12).
Step 4: Top-Chain Functions Collection. Data-transforming
functions are usually executed in precise sequences to adequately
prepare the data to be sent to an IoT device. For instance, a
companion app may encode some user data in base64, and then
encapsulate it in an HTTP request.
We call a sequence of data-transforming functions a
transformation data chain, and we refer to the first function in the
sequence with the term top-chain function. We say that a top-chain
function f affects a variable v if modifying the content of f’s
variables eventually affects v’s value.
Of particular interest for us are the top-chain functions that affect
sendMessage variables. In fact, if we control the variables of these
top-chains, we can control the data sent to the analyzed IoT device.
In particular, this data is both valid (i.e., accepted by the IoT device)
and not affected by unnecessary app-side input validation. As such,
top-chain functions that affect sendMessage variables represent the
optimal fuzzing triggers to stimulate the IoT device functionality.
for {f,(ELif ,Elof )}∈getEntropies(to_hook) do
topChain←{}
for (v,cl)∈getArgAndObjLocs(sendMessage) do
to_hook←{}
dtf ←[]
bsl←getBackwardSlice(v,cl)
for (f,instf )∈getFunctionScopes(bsl) do
(Lif ,Lof )←livenessAnalysis(instf )
to_hook←to_hook∪{f,(Lif ,Lof )}
de←maxVarEntropy(Elof )/minVarEntropy(Elif )
appendIfDataTransforming(dtf,de,{f,Lif})
Algorithm 1 Fuzzing Trigger Identification.
1: procedure GETTOPCHAIN(sendMessage)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: procedure FUZZINGTRIGGERIDENTIFICATION(CompanionApp)
20:
21:
22:
23:
24:
trees←getDominatorTrees(dtf)
candidates←dtf∪{sendmessage}
for fc∈candidates do
return topChain
fuzzingT riggers←{}
borderMethods←getBorderMethods(CompanionApp)
for s∈dynamicFilter(borderMethods) do
fuzzingT riggers←fuzzingT riggers∪getTopChain(s)
if not isDominated(fc,trees) then
topChain←topChain∪{fc}
return fuzzingT riggers
Note that,
To identify top-chain functions, we build the dominance tree2 of
each data-transforming function detected at the previous step (Line
13), and select those data-transforming functions that are not dom-
inated by any other data-transforming function (Line 16). Finally,
we consider as fuzzing triggers the collected top-chain functions.
if no data-transforming function dominates a
sendMessage function, we consider the sendMessage as a fuzzing
trigger (Line 14, 15, and 16). This could happen when, for instance,
the companion app does not contain data-transforming functions.
Note finally that, in principle, app-side sanitization code might
be present in a function within a transformation data chain. We
discuss this in Section V.
Example. As a simple example, consider Figure 3, which repre-
sents one of the data chains we found on the August Smart Lock
device. Assuming that we previously identified sendToDevice
as being a sendMessage function, we set { c} as the initial set of
variables possibly holding data to be sent, and determine the code
locations where c is set. As c is a function argument, we retrieve
the sendMessage call site (Line 15), and bootstrap a backward
program slicing from the call site, up to the function unlock
(Line 1). This is achieved by following the data-flow of the variable
e backward: sendToDevice uses the variable e, which is
the result of a call to the function encrypt. Then, we continue
the slice backward from the end of the function encrypt up to
its entry point, and back to the sendCommand function. Finally,
we reach the entry point of this function, and continue the slice
considering its caller (i.e., the function unlock).
Following the definition of function scopes above stated,
this backward slice contains the following function scopes: i)
sendCommand: Line 15; ii) encrypt: Lines from 6 to 9;
iii) sendCommand: Lines 12 and 13; iv) unlock: Line 3;
v) Command constructor (code not reported in this example);
2A graph where each node’s children are those nodes it immediately dominates.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
488
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
public boolean unlock() { // unlock request
Command cmd = new Command(OP.UNLOCK);
return sendCommand(cmd);
}
/* Encrypts and return its parameters */
public byte[] encrypt (Command b){
byte[] enc;
// ...
return enc;
}
public boolean sendCommand (Command cmd){
// various checks on the command to send
byte[] e = encrypt(cmd);
return sendToDevice(e);
}
/* send a message */