# 沙箱逃逸分析 AntCTF x D^3CTF EasyChromeFullChain
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
最近开始着手研究Chrome沙箱逃逸，正好借着本题学习一下。FullChain的漏洞利用一般需要依靠两个漏洞，首先是通过RCE开启Mojo（一种Chrome用于子进程与父进程进行通信的机制），然后通过Mojo漏洞逃离出沙箱。
## 0x01 前置知识
###  Mojo
简单来说，就是一种通信机制，它由两部分组成，首先是C/C++层的具体实现部分，这部分的代码会被一起编译进chrome程序中，并且它将运行在chrome的`browser进程`中(即主进程，没有沙箱的限制)，第二部分就是对外导出的api接口了，在编译好mojom以后，会得到一系列js文件，这些js文件就是对外开放的api库了，我们可以引用它们，从而调用在`browser进程`中的C/C++代码。  
Mojo不止有js的导出api库，还有java和C/C++的导出api库
在一般的CTF的RealWord题目中，这些mojo的js库一般会部署到远程的web根目录下，仅仅是为了方便，在真实的场景中，这些js一般不会出现，或者出现在一些我们无法预知的路径中，实际上，由于Chrome开源，因此这些库我们都可以直接编译得到一份，然后将其放置在我们远程的服务器上即可  
要使用mojo的导出api，一般我们需要在js中引用两个库，一个是`mojo_bindings.js`，提供了一些Mojo操作用的对象和函数，另一个库就是我们想要调用的模块对应的js文件。
然后，想在代码中使用，只需下列两句话初始化
       let xxxxx_ptr = new blink.mojom.xxxxx();
       Mojo.bindInterface(blink.mojom.xxxxx.name,mojo.makeRequest(xxxxx_ptr).handle, "process", true);
初始化以后，我们就可以使用`xxxxx_ptr.`的方式来调用`browser进程`中的C/C++函数了。这种方式有点类似于Java中的JNI技术，在语言层仅声明函数，具体实现在底层。不同之处在于`mojo`的底层代码运行在`browser进程`,一旦`mojo`的模块代码实现有漏洞，便可能控制`browser进程`的程序流，进而完成了沙箱逃逸。
## 0x02 V8 RCE部分
###  漏洞分析
    diff --git a/src/compiler/simplified-lowering.cc b/src/compiler/simplified-lowering.cc
    index ef56d56e44..0d0091fcd8 100644
    --- a/src/compiler/simplified-lowering.cc
    +++ b/src/compiler/simplified-lowering.cc
    @@ -187,12 +187,12 @@ bool CanOverflowSigned32(const Operator* op, Type left, Type right,
       // We assume the inputs are checked Signed32 (or known statically to be
       // Signed32). Technically, the inputs could also be minus zero, which we treat
       // as 0 for the purpose of this function.
    -  if (left.Maybe(Type::MinusZero())) {
    -    left = Type::Union(left, type_cache->kSingletonZero, type_zone);
    -  }
    -  if (right.Maybe(Type::MinusZero())) {
    -    right = Type::Union(right, type_cache->kSingletonZero, type_zone);
    -  }
    +  // if (left.Maybe(Type::MinusZero())) {
    +  //   left = Type::Union(left, type_cache->kSingletonZero, type_zone);
    +  // }
    +  // if (right.Maybe(Type::MinusZero())) {
    +  //   right = Type::Union(right, type_cache->kSingletonZero, type_zone);
    +  // }
       left = Type::Intersect(left, Type::Signed32(), type_zone);
       right = Type::Intersect(right, Type::Signed32(), type_zone);
       if (left.IsNone() || right.IsNone()) return false;
    @@ -1671,18 +1671,18 @@ class RepresentationSelector {
             VisitBinop(node, UseInfo::TruncatingWord32(),
                           MachineRepresentation::kWord32);
             if (lower()) {
    -          if (lowering->poisoning_level_ ==
    -                  PoisoningMitigationLevel::kDontPoison &&
    -              (index_type.IsNone() || length_type.IsNone() ||
    +          if ((index_type.IsNone() || length_type.IsNone() ||
                    (index_type.Min() >= 0.0 &&
                     index_type.Max() InputAt(0));
    +          } else {
    +            NodeProperties::ChangeOp(
    +               node, simplified()->CheckedUint32Bounds(feedback, new_flags));
               }
    -          NodeProperties::ChangeOp(
    -              node, simplified()->CheckedUint32Bounds(feedback, new_flags));
             }
           } else if (p.flags() & CheckBoundsFlag::kConvertStringAndMinusZero) {
             VisitBinop(node, UseInfo::CheckedTaggedAsArrayIndex(feedback),
该patch位于`CanOverflowSigned32`函数，首先确定该函数的调用者，该函数首先在`VisitSpeculativeIntegerAdditiveOp`中被调用，然后在`simplified-lowering`阶段执行`VisitNode`时，遇到`kSpeculativeSafeIntegerAdd`或者`kSpeculativeSafeIntegerSubtract`时被调用来处理节点。
          case IrOpcode::kSpeculativeSafeIntegerAdd:
          case IrOpcode::kSpeculativeSafeIntegerSubtract:
            return VisitSpeculativeIntegerAdditiveOp(node, truncation, lowering);
        if (lower()) {
          if (truncation.IsUsedAsWord32() ||
              !CanOverflowSigned32(node->op(), left_feedback_type,
                                   right_feedback_type, type_cache_,
                                   graph_zone())) {
            ChangeToPureOp(node, Int32Op(node));
          } else {
            ChangeToInt32OverflowOp(node);
          }
        }
为了研究`CanOverflowSigned32`的流程，我们使用如下代码进行测试
    function opt(b) {
      var x = b ? 0 : 1;
      var y = b ? 2 : 3;
      var i = x + y;
      return i;
    }
    for (var i=0;ikSingletonZero, type_zone);
       192   }
       193   if (right.Maybe(Type::MinusZero())) {
       194     right = Type::Union(right, type_cache->kSingletonZero, type_zone);
       195   }
    pwndbg> p left.Min()
    $2 = -1
    pwndbg> p left.Max()
    $3 = 1
    pwndbg> p right.Min()
    $4 = -2147483648
    pwndbg> p right.Max()
    $5 = 2
可以知道，这里，`left`就是`x`，而`right`就是`y`，被patch的这段代码
       190   if (left.Maybe(Type::MinusZero())) {
       191     left = Type::Union(left, type_cache->kSingletonZero, type_zone);
       192   }
       193   if (right.Maybe(Type::MinusZero())) {
       194     right = Type::Union(right, type_cache->kSingletonZero, type_zone);
       195   }
其作用是通过与`0`进行`Union`，那么，如果`left`或者`right`中存在`-0`的话，会先转换为`0`。那么我们来继续分析一下，如果`-0`不被转换，会存在什么情况？  
首先，我们修改一下测试用例，添加一个`-0`
    function opt(b) {
      var x = b ? -1 : -0;
      var y = b ? 2 : -0x80000000;
      var i = x + y;
      return i;
    }
    for (var i=0;ikSingletonZero, type_zone);
       195   }
       196   left = Type::Intersect(left, Type::Signed32(), type_zone);
       197   right = Type::Intersect(right, Type::Signed32(), type_zone);
     ► 198   if (left.IsNone() || right.IsNone()) return false;
       199   switch (op->opcode()) {
       200     case IrOpcode::kSpeculativeSafeIntegerAdd:
       201       return (left.Max() + right.Max() > kMaxInt) ||
       202              (left.Min() + right.Min()  p left.Min()
    $9 = -1
    pwndbg> p left.Max()
    $10 = 0
patch以后结果是这样的
    pwndbg> p left.Min()
    $1 = -1
    pwndbg> p left.Max()
    $3 = -1
即`-0`丢失了,`x`由`Range(-1,-0)`变成了`Range(-1,-1)`，显然，这将导致溢出检测出现问题，我们直接继续修改测试用例，将加法改成减法,那么`Range(-1,-1)-Range(-0x80000000,2)`显然没有超过`int32`，于是`CanOverflowSigned32`返回`false`，没有检查出溢出。
    function opt(b) {
      var x = b ? -1 : -0;
      var y = b ? 2 : -0x80000000;