# Title: Transparent Data Deduplication in the Cloud

## Authors:
- Frederik Armknecht, University of Mannheim, 68131 Mannheim, Germany
- Jens-Matthias Bohli, NEC Laboratories Europe, 69115 Heidelberg, Germany
- Ghassan O. Karame, NEC Laboratories Europe, 69115 Heidelberg, Germany
- Franck Youssef, NEC Laboratories Europe, 69115 Heidelberg, Germany

## Abstract
Cloud storage providers like Dropbox and Google Drive heavily rely on data deduplication to reduce storage costs by storing only one copy of each uploaded file. Recent studies indicate that whole-file deduplication can achieve up to 50% storage reduction. However, users do not directly benefit from these savings, as there is no transparent relationship between the actual storage costs and the prices offered to them.

In this paper, we introduce ClearBox, a novel storage solution that allows a storage service provider to transparently attest to its customers the deduplication patterns of their (encrypted) data. This enables cloud users to verify the actual storage space their data occupies and check if they qualify for benefits such as price reductions. ClearBox is secure against malicious users and rational storage providers, ensuring that files can only be accessed by their legitimate owners. We evaluate a prototype implementation of ClearBox using both Amazon S3 and Dropbox as backend cloud storage. Our findings show that our solution works with the APIs provided by existing service providers without any modifications and achieves comparable performance to existing solutions.

## 1. Introduction
Cloud storage services have become an integral part of our daily lives, offering a convenient means for users to store, access, and synchronize data across multiple devices. The increasing adoption of cloud storage is driven by the competitive pricing offered by various providers. For example, Dropbox offers free 2 GB accounts, Google Drive provides 100 GB for $1.99, and Box.com offers unlimited storage for business clients at $12 per month. These competitive offers are largely due to the significant drop in the cost of hard drives, from $20 per GB to just a few cents per GB in 2014 [9].

To further increase profitability, cloud storage providers adopt aggressive storage efficiency solutions, such as cross-user data deduplication. Studies show that cross-user data deduplication can save storage costs by more than 50% in standard file systems [35, 36] and up to 90-95% for backup applications [35]. While many proposals exist for securing data deduplication in the cloud, they primarily focus on enabling providers to deduplicate encrypted data, thereby reducing storage costs while maintaining data confidentiality. However, these solutions do not allow users to directly benefit from the savings achieved through deduplication.

In Figure 1, we estimate the potential cost reductions per user due to data deduplication compared to the prices charged by commodity cloud providers like Dropbox, Google Drive, and Microsoft OneDrive. Our estimates suggest that there is significant room for price reductions for users whose data undergoes substantial deduplication.

In this paper, we address this issue by proposing ClearBox, a secure storage solution that enables a cloud provider to transparently and verifiably attest the deduplication patterns of every file stored. ClearBox relies on a gateway to orchestrate cross-user file-based deduplication before storing files on public cloud servers. It ensures that files can only be accessed by legitimate owners, resists curious cloud providers, and allows users to verify the effective storage space occupied by their encrypted files after deduplication. By providing full transparency on storage savings, ClearBox helps users assess whether they are receiving appropriate service and price reductions for their money, even in the presence of a rational gateway aiming to maximize profit.

ClearBox can be integrated with existing cloud storage providers like Amazon S3 and Dropbox without any modifications, and it motivates a new cloud pricing model that considers the level of deduplication.

## 2. Model
Before presenting a detailed description of ClearBox in Section 3, we first outline our system and security models.

### 2.1 System Model
ClearBox involves multiple clients \(C_1, C_2, \ldots\) who wish to store their files with a storage provider \(S\). Each client should learn the level of deduplication their files undergo, i.e., the number of other clients storing the same file. Since existing storage providers do not report deduplication patterns, a straightforward approach would be a decentralized scheme where users coordinate file uploads. However, this is impractical as the number of users increases [41]. Therefore, ClearBox uses an additional gateway \(G\) to interface between users and the cloud, orchestrating data deduplication before storing data. 

The gateway \(G\) is a logically centralized entity that can be instantiated using distributed servers. This model is generic and can be applied in various deployment scenarios. For instance, \(G\) could be an independent service offering cheaper cloud storage by performing deduplication over existing public clouds, or it could be a service offered by \(S\) to differentiate from other cloud storage services.

In our scheme, \(G\) owns an account hosted by \(S\) and orchestrates cross-user file-based deduplication. This allows \(G\) to provide users with full transparency on the storage savings due to deduplication. For example, \(G\) can offer price reductions for highly deduplicated data (e.g., a 50% discount if a file is deduplicated among at least \(n\) entities). Alternatively, \(G\) could distribute storage costs fairly among users storing deduplicated files. If \(n\) clients store the same file \(f\), each client could be charged a fraction of the total cost of storing \(f\).

These reductions do not threaten the profitability of \(G\) or \(S\), which can still profit from services like resilience to failures, mobile access, and data synchronization. Offering the option to share storage costs may provide a clear differentiator compared to competitors. However, providers may not correctly report cost reductions due to deduplication. The challenge is to transparently and efficiently attest data storage costs, including deduplication savings, in the presence of a potentially untrustworthy storage provider.

We assume time is divided into epochs \(E_i\) of equal length, e.g., 12 hours [1]. Clients receive a list of their files and deduplication patterns from \(G\) at the end of each epoch. The deduplication pattern of a file refers to the number of users storing the same deduplicated file in the cloud.

Similar to existing storage providers, ClearBox supports the following operations: Put, Get, Delete. Additionally, ClearBox supports two protocols, Attest and Verify, to prove and verify deduplication patterns. Although block-based deduplication can reduce storage consumption to as little as 32% of its original requirements, nearly three-quarters of the improvement can be achieved through whole-file deduplication [36].

### Figure 1: Cost Reductions Due to Data Deduplication vs. Prices of Commodity Storage Providers
- The blue, green, and red curves show the current prices charged by Dropbox, Google Drive, and MS OneDrive, respectively.
- The dotted black line depicts the estimated cost of storage per user in Amazon S3 [1] after data undergoes deduplication.
- We assume 50% of the data stored by clients is deduplicated [36] with the data pertaining to 2 other cloud users, and clients download 0.96% of the data stored in their accounts per day [34].
- The "reduction margin" refers to the difference between the price borne by the users and the effective cost of users' storage after deduplication.
- "ppu" refers to the price per user.

### 2.2 Security Analysis
We provide a security model for ClearBox and analyze its security according to this model. We show that ClearBox enables users to verify the deduplication undergone by their files, even in the presence of a rational provider aiming to maximize profit. Additionally, ClearBox resists malicious clients and a curious storage provider.

### 2.3 Prototype Implementation
We implement and evaluate a prototype based on ClearBox using both Amazon S3 and Dropbox as backend cloud storage. Our results show that ClearBox does not impair the user experience and incurs tolerable overhead on the gateway when orchestrating file operations among its clients.

## 3. ClearBox Protocol
### 3.1 The Put Protocol
The Put protocol is executed between the gateway \(G\) and a client \(C\) who aims to upload a file \(f\). Initially, the client derives a key \(k_{FID}\) from the file, which is used to encrypt \(f\) to \(f^*\). Both parties then derive a file ID \(FID\) that serves as a unique handle for \(f\). The gateway \(G\) maintains a set \(F\) containing pairs \((FID, C_{FID})\), where \(C_{FID}\) is the set of clients registered to the file referenced by \(FID\). If no client is registered to a file with \(FID\), \(F\) does not contain an element of the form \((FID, *)\). The gateway checks if any users are registered to this file. If so, it inserts \(C\) into \(C_{FID}\). Otherwise, a new set \(C_{FID} = \{C\}\) is created and \((FID, C_{FID})\) is inserted into \(F\). The client receives a verification tag \(\tau\) that allows validation of proofs generated by \(G\).

\[
\text{Put: } [C : f; G : F; S : \perp] \rightarrow [C : FID, k_{FID}, \tau; G : FID, F; S : f^*]
\]

When specifying the verification tag for a specific client \(C\), we write \(\tau_C\).

### 3.2 The Get Protocol
... (Continuation of the Get Protocol and other details)

## 4. Evaluation
... (Details of the evaluation)

## 5. Related Work
... (Review of related work)

## 6. Conclusion
... (Conclusion of the paper)

## Appendices
- **Appendix A:** Additional insights on the scheme
- **Appendix B:** Further technical details

---

This revised version aims to make the text more coherent, professional, and easier to read.