title:Transparent Data Deduplication in the Cloud
author:Frederik Armknecht and
Jens-Matthias Bohli and
Ghassan O. Karame and
Franck Youssef
Transparent Data Deduplication in the Cloud
Frederik Armknecht
University of Mannheim
68131 Mannheim, Germany
PI:EMAIL
Ghassan O. Karame
NEC Laboratories Europe
69115 Heidelberg, Germany
PI:EMAIL
Jens-Matthias Bohli
NEC Laboratories Europe
69115 Heidelberg, Germany
PI:EMAIL
Franck Youssef
NEC Laboratories Europe
69115 Heidelberg, Germany
PI:EMAIL
ABSTRACT
Cloud storage providers such as Dropbox and Google drive heav-
ily rely on data deduplication to save storage costs by only stor-
ing one copy of each uploaded ﬁle. Although recent studies report
that whole ﬁle deduplication can achieve up to 50% storage reduc-
tion, users do not directly beneﬁt from these savings—as there is no
transparent relation between effective storage costs and the prices
offered to the users.
In this paper, we propose a novel storage solution, ClearBox,
which allows a storage service provider to transparently attest to
its customers the deduplication patterns of the (encrypted) data that
it is storing. By doing so, ClearBox enables cloud users to ver-
ify the effective storage space that their data is occupying in the
cloud, and consequently to check whether they qualify for bene-
ﬁts such as price reductions, etc. ClearBox is secure against ma-
licious users and a rational storage provider, and ensures that ﬁles
can only be accessed by their legitimate owners. We evaluate a
prototype implementation of ClearBox using both Amazon S3 and
Dropbox as back-end cloud storage. Our ﬁndings show that our so-
lution works with the APIs provided by existing service providers
without any modiﬁcations and achieves comparable performance
to existing solutions.
1.
INTRODUCTION
Cloud storage services have become an integral part of our daily
lives. With more and more people operating multiple devices, cloud
storage promises a convenient means for users to store, access, and
seamlessly synchronize their data from multiple devices.
The increasing adoption of the cloud is also fueled by the mul-
titude of competing cloud storage services which offer relatively
cheap services. For example, Dropbox offers its customers free
2 GB accounts, Google drive offers 100 GB for only 1.99 USD,
while Box.com offers its business clients unlimited storage for only
12 EUR per month. These competitive offers are mainly due to
the sharp plummet exhibited by modern hard drives, going from
20 USD per GB to just about few cents per GB in 2014 [9].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/XXX.XXXXXXX.
To further increase their proﬁts,1 existing cloud storage providers
adopt aggressive storage efﬁciency solutions when storing their
clients’ data. Namely, existing clouds store duplicate data (either
at the block level or the ﬁle level) uploaded by different users only
once—thus tremendously saving storage costs. Recent studies show
that cross-user data deduplication can save storage costs by more
than 50% in standard ﬁle systems [35, 36], and by up to 90-95%
for back-up applications [35].
The literature features a large number of proposals for securing
data deduplication (e.g., [14, 25, 42]) in the cloud. All these pro-
posals share the goal of enabling cloud providers to deduplicate en-
crypted data stored by their users. Such solutions allow the cloud
provider to reduce its total storage, while ensuring the conﬁdential-
ity of stored data.
By doing so, existing solutions increase the proﬁtability of the
cloud, but do not allow users to directly beneﬁt from the savings of
deduplication over their data. Notice that cloud service providers
charge their customers based on the amount of data that they store—
irrespective of the level of data deduplication exhibited by their
data. However, a user who is using the cloud as back-up storage
should beneﬁt—and rightly so—from reductions (by up to 90%),
when compared to a client who is storing personal ﬁles in the cloud
which are less likely to be deduplicated. In Figure 1, we estimate
the cost reductions per user due to data deduplication in comparison
to the price per user in existing commodity cloud providers such as
Dropbox, Google drive, and Microsoft Onedrive. Our estimates
clearly suggest that there is considerable room for price reductions
for those users whose data undergoes considerable deduplication.
In this paper, we address this problem and we propose a novel
secure storage solution, dubbed ClearBox, which enables a cloud
provider to transparently and veriﬁably attest the deduplication pat-
terns of every ﬁle stored at the cloud. Our solution relies on gate-
way to orchestrate cross-user ﬁle-based deduplication prior to stor-
ing ﬁles on (public) cloud servers. ClearBox ensures that ﬁles can
only be accessed by legitimate owners, resists against a curious
cloud provider, and enables cloud users to verify the effective stor-
age space occupied by their encrypted ﬁles in the cloud (after dedu-
plication). By doing so, ClearBox provides its users with full trans-
parency on the storage savings exhibited by their data; this allows
users to assess whether they are acquiring appropriate service and
price reductions for their money—in spite of a rational gateway
that aims at maximizing its proﬁt.
ClearBox can be integrated with existing cloud storage providers
such as Amazon S3 and Dropbox without any modiﬁcations, and
motivates a new cloud pricing model which takes into account the
1Cloud services are contributing to a 150 billion USD market [6].
2. MODEL
Before we give a full description of ClearBox in Section 3, we
present in this section our system and security models.
2.1 System Model
ClearBox comprises a number of clients C1, C2, . . . that are in-
terested in storing their ﬁles at a storage provider S such that each
client learns the level of deduplication undergone by his ﬁles, that
is the number of clients that outsourced the same ﬁle. Since exist-
ing storage providers do not report the deduplication patterns of the
stored data, a straightforward approach would be to rely on a decen-
tralized scheme whereby users coordinate their ﬁle uploads prior
to storing their data onto the cloud; such a decentralized scheme,
however, requires interaction among users, and is unlikely to scale
as the number of users storing the same data increases [41]. This
is exactly why ClearBox makes use of an additional gateway G,
which interfaces between the users and the cloud, and orchestrates
data deduplication prior to storing the data on the cloud. Note that
G is a logically centralized entity, and can be easily instantiated
using distributed servers. We argue that our model is generic and
captures a number of practical deployment scenarios. For instance,
G could be an independent service which offers cheaper cloud stor-
age, by performing data deduplication over existing public clouds;
alternatively, G could be a service offered by S itself in order to
offer differentiation to existing cloud storage services, etc.
In our scheme, we assume that G owns an account hosted by
S, and orchestrates cross-user ﬁle-based deduplication2. By doing
so, G can provide its users with full transparency on the storage
savings due to deduplication exhibited by their data. For instance,
G can offer price reductions for customers whose data is highly
deduplicated (e.g., 50% discount if the ﬁle is deduplicated among
at least n entities). Alternatively, G could fairly distribute storage
costs amongst users who are storing deduplicated ﬁles; for exam-
ple, assume that there are n clients all storing the same ﬁle f, then
n of the cost
each client can effectively be charged a fraction of 1
of storing f. Notice that these reductions do not threaten the prof-
itability of G (nor S) which can still comfortably proﬁt from the
various offered services (e.g., resilience to failures, mobile access,
data synch across devices). On the contrary, we argue that offer-
ing the option of sharing storage costs with other clients storing
the same ﬁles may provide a clear differentiator compared to other
competitors. Nevertheless, providers are clearly not keen on shar-
ing parts of their proﬁts with the users and may not correctly report
the cost reductions due to data deduplication. The challenge here
therefore lies in transparently and efﬁciently attesting data stor-
age costs (i.e., including deduplication savings) across users in the
presence of a storage provider which might not correctly report the
deduplication (and access) patterns of the data that it is storing.
Conforming with the operation of existing storage providers, we
assume that time is divided into epochs Ei of equal length, e.g., 12
hours [1]. Clients receive from G a list of their ﬁles and deduplica-
tion patterns at the end of every epoch. The deduplication pattern
of a given ﬁle refers to the number of users that store the same
deduplicated ﬁle in the cloud.
Similar to existing storage providers, ClearBox supports the fol-
lowing operations: Put, Get, Delete. In addition, ClearBox sup-
ports two additional protocols, Attest and Verify, which are used
to prove/verify the deduplication patterns undergone by ﬁles. We
2Although block-based deduplication can lower storage consump-
tion to as little as 32% of its original requirements, we point out
that nearly three quarters of the improvement observed could be
captured through whole-ﬁle deduplication [36].
Figure 1: Cost reductions due to data deduplication vs. prices
of commodity storage providers. The blue, green, and red
curves show the price currently charged by Dropbox, Google
Drive, and MS OneDrive, respectively. The dotted black line
depicts the estimated cost of storage per user in Amazon S3 [1]
after data undergoes deduplication. We assume that 50% of the
data stored by clients is deduplicated [36] with the data pertain-
ing to 2 other cloud users and that clients download 0.96% of
the data stored in their accounts per day [34]. The “reduction
margin” refers to the difference between the price borne by the
users and the effective cost of users’ storage after deduplica-
tion. “ppu” refers to the price per user.
level of deduplication undergone by data. We believe that such
a model does not threaten the proﬁtability of the cloud business
and—on the contrary—gives considerable incentives for users to
store large and popular data such as music and video ﬁles in the
cloud (since the storage costs of popular data might be cheaper). In
summary, we make the following contributions in this work:
Concrete Instantiation: We describe a cloud storage scheme, dubb-
ed ClearBox, which employs a novel cryptographic tree-based
accumulator, CARDIAC, to attest in logarithmic time (with
respect to the number of clients that uploaded the ﬁle) the
deduplication patterns of every ﬁle stored in the cloud.
ClearBox additionally leverages Proofs of Ownership [23,
27], and self-expiring URL commands in order to effectively
manage access control on the ﬁles stored in the cloud.
Security Analysis: We provide a model for ClearBox and analyze
the security of our proposal according to our model. Namely,
we show that ClearBox enables users to verify the dedupli-
cation undergone by their ﬁles in spite of a rational provider
that aims at maximizing its proﬁt in the system. In addition,
we show that ClearBox resists against malicious clients and
a curious storage provider.
Prototype Implementation: We implement and evaluate a proto-
type based on ClearBox using both Amazon S3 and Dropbox
as back-end cloud storage, and we show that our proposal
does not impair the experience witnessed by cloud users and
incurs tolerable overhead on the gateway when orchestrating
ﬁle operations amongst its clients.
The remainder of this paper is organized as follows.
In Sec-
tion 2, we introduce our model and goals. In Section 3, we present
ClearBox and analyze its security. In Section 4, we evaluate a pro-
totype implementation based on the integration of ClearBox with
Amazon S3 and Dropbox. In Section 5, we review related work in
the area, and we conclude the paper in Section 6. In Appendices A
and B, we provide additional insights with respect to our scheme.
Price/Cost [USD]Data Volume [GB]Dropbox (ppu)Google Drive (ppu)MS OneDrive (ppu)Estimated cost per user 0 2 4 6 8 10 0 100 200 300 400 500Reduction marginstart by describing these protocols. Here, the expression
Π : [P1 : in1; . . . , Pn : inn] → [P1 : out1; . . . , Pn : outn]
denotes the event that a set of parties P1, . . . , Pn run an interactive
protocol Π where ini and outi denote the input and output of Pi,
respectively.
The Put Protocol.
The Put protocol is executed between the gateway and a client
C who aims to upload a ﬁle f. Initially, the client derives a key
kFID from the ﬁle which he uses to encrypt f to f∗ which is even-
tually uploaded to S via G. Next, both parties derive a ﬁle ID FID
that will serve as a practically unique handle to f. The gateway
G maintains internally a set F which contains pairs (FID,CFID )
where CFID is the set of clients that are registered to the ﬁle refer-
enced by FID. If no client is registered to a ﬁle with ﬁle ID FID,
it holds that F does not contain an element of the form (FID,∗).
Given this, the gateway checks if any users are registered to this
ﬁle already, i.e., if (FID,CFID ) ∈ F. If so, it inserts C into CFID.
Otherwise, a new set CFID = {C} is created and (FID,CFID ) in-
serted into F. Moreover, the client gets a veriﬁcation tag τ which
later allows to validate the proofs generated by G.
Put
:
[C : f ; G : F; S : ⊥] −→
[C : FID, kFID , τ ; G : FID,F; S : f
∗
]
When we need to specify the veriﬁcation tag of a speciﬁc client C,
we write τC.
The Get Protocol.