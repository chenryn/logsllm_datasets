句
直接执行SQL语句 8.2.10SQLExecDirect
结果集中取行集 8.2.12SQLFetch
返回结果集中某一列的数 8.2.18SQLGetData
据
获取结果集中列的描述信 8.2.7SQLColAttribute
息
断开与数据源的连接 8.2.9SQLDisconnect
释放句柄资源 8.2.15SQLFreeHandle：释放句柄资源，可替代如下函数：
8.2.16SQLFreeEnv：释放环境句柄
8.2.14SQLFreeConnect：释放连接句柄
8.2.13SQLFreeStmt：释放语句句柄
南大通用数据技术股份有限公司
99
GBase 8s V8.8开发者手册
数据库中收到的一次执行请求（不在事务块中），如果含有多条语句，将会被打包成一
个事务， 同时如果其中有一个语句失败，那么整个请求都将会被回滚。
ODBC为应用程序与数据库的中心层，负责把应用程序发出的SQL指令传到数据库当
中，自身并不解析SQL语法。故在应用程序中写入带有保密信息的SQL语句时（如明
文密码），保密信息会被暴露在驱动日志中。
6.3.4 示例：常用功能和批量绑定
常用功能示例代码
// 此示例演示如何通过ODBC方式获取GBase8s中的数据。
//DBtest.c(compilewith:libodbc.so)#include
#include#include#ifdefWIN32#include#endif
SQLHENVV_OD_Env; //HandleODBCenvironment
SQLHSTMT V_OD_hstmt //Handlestatement
SQLHDBC V_OD_hdbc; //Handleconnection
char typename[100];
SQLINTEGERvalue=100;
SQLINTEGERV_OD_erg,V_OD_buffer,V_OD_err,V_OD_id;intmain(intargc,char*argv[])
{
//1. 申请环境句柄
V_OD_erg=SQLAllocHandle(SQL_HANDLE_ENV,SQL_NULL_HANDLE,&V_OD_Env);
if((V_OD_erg!=SQL_SUCCESS)&&(V_OD_erg!=SQL_SUCCESS_WITH_INFO))
{
printf("ErrorAllocHandle\n");exit(0);
}
//2. 设置环境属性（版本信息）
SQLSetEnvAttr(V_OD_Env,SQL_ATTR_ODBC_VERSION,(void*)SQL_OV_ODBC3,0);
//3. 申请连接句柄
V_OD_erg=SQLAllocHandle(SQL_HANDLE_DBC,V_OD_Env,&V_OD_hdbc);
if((V_OD_erg!=SQL_SUCCESS)&&(V_OD_erg!=SQL_SUCCESS_WITH_INFO))
{
SQLFreeHandle(SQL_HANDLE_ENV,V_OD_Env);exit(0);
}
//4. 设置连接属性
南大通用数据技术股份有限公司
100
GBase 8s V8.8开发者手册
SQLSetConnectAttr(V_OD_hdbc,SQL_ATTR_AUTOCOMMIT,SQL_AUTOCOMMIT_ON,
0);
//5. 连接数据源，这里的“userName”与“password”分别表示连接数据库的用户名和用
户密码，请根据实际情况修改。
// 如果odbc.ini文件中已经配置了用户名密码，那么这里可以留空（""）；但是不建议这
么做，因为一旦
odbc.ini权限管理不善，将导致数据库用户密码泄露。
V_OD_erg=SQLConnect(V_OD_hdbc,(SQLCHAR*)"gaussdb",SQL_NTS,
(SQLCHAR*)"userName",SQL_NTS,(SQLCHAR*)"password",SQL_NTS);if
((V_OD_erg!=SQL_SUCCESS)&&(V_OD_erg!=SQL_SUCCESS_WITH_INFO))
{
printf("ErrorSQLConnect%d\n",V_OD_erg);SQLFreeHandle(SQL_HANDLE_ENV,
V_OD_Env);exit(0);
}
printf("Connected!\n");
//6. 设置语句属性
SQLSetStmtAttr(V_OD_hstmt,SQL_ATTR_QUERY_TIMEOUT,(SQLPOINTER*)3,0);
//7. 申请语句句柄
SQLAllocHandle(SQL_HANDLE_STMT,V_OD_hdbc,&V_OD_hstmt);
//8. 直接执行SQL语句。
SQLExecDirect(V_OD_hstmt,"droptableIFEXISTScustomer_t1",SQL_NTS);
SQLExecDirect(V_OD_hstmt,"CREATETABLEcustomer_t1(c_customer_skINTEGER,
c_customer_name
VARCHAR(32));",SQL_NTS);
SQLExecDirect(V_OD_hstmt,"insertintocustomer_t1values(25,li)",SQL_NTS);
//9. 准备执行
SQLPrepare(V_OD_hstmt,"insertintocustomer_t1values(?)",SQL_NTS);
//10. 绑定参数
SQLBindParameter(V_OD_hstmt,1,SQL_PARAM_INPUT,SQL_C_SLONG,SQL_INTEGER,
0,0,&value,0,NULL);
//11. 执行准备好的语句
SQLExecute(V_OD_hstmt);
SQLExecDirect(V_OD_hstmt,"selectidfromtesttable",SQL_NTS);
//12. 获取结果集某一列的属性
SQLColAttribute(V_OD_hstmt,1,SQL_DESC_TYPE,typename,100,NULL,NULL);
printf("SQLColAtrribute%s\n",typename);
//13. 绑定结果集
SQLBindCol(V_OD_hstmt,1,SQL_C_SLONG,(SQLPOINTER)&V_OD_buffer,150,
(SQLLEN*)&V_OD_err);
//14. 通过SQLFetch取结果集中数据
V_OD_erg=SQLFetch(V_OD_hstmt);
南大通用数据技术股份有限公司
101
GBase 8s V8.8开发者手册
//15. 通过SQLGetData获取并返回数据。
while(V_OD_erg!=SQL_NO_DATA)
{
SQLGetData(V_OD_hstmt,1,SQL_C_SLONG,(SQLPOINTER)&V_OD_id,0,NULL);
printf("SQLGetData ID=%d\n",V_OD_id);
V_OD_erg=SQLFetch(V_OD_hstmt);
};
printf("Done!\n");
//16. 断开数据源连接并释放句柄资源
SQLFreeHandle(SQL_HANDLE_STMT,V_OD_hstmt);SQLDisconnect(V_OD_hdbc);
SQLFreeHandle(SQL_HANDLE_DBC,V_OD_hdbc);SQLFreeHandle(SQL_HANDLE_ENV,
V_OD_Env);return(0);
}
批量绑定示例代码
/**********************************************************************
请在数据源中打开UseBatchProtocol，同时指定数据库中参数support_batch_bind
为on
CHECK_ERROR的作用是检查并打印错误信息。
此示例将与用户交互式获取DSN、模拟的数据量，忽略的数据量，并将最终数据入库到
test_odbc_batch_insert 中
***********************************************************************/
#include
#include#include#include#include
voidExec(SQLHDBChdbc,SQLCHAR*sql)
{
SQLRETURNretcode;//Returnstatus
SQLHSTMThstmt=SQL_NULL_HSTMT;//StatementhandleSQLCHAR loginfo[2048];
//AllocateStatementHandle
retcode=SQLAllocHandle(SQL_HANDLE_STMT,hdbc,&hstmt);
if(!SQL_SUCCEEDED(retcode)){printf("SQLAllocHandle(SQL_HANDLE_STMT)failed");
return;
}
//PrepareStatement
retcode=SQLPrepare(hstmt,(SQLCHAR*)sql,SQL_NTS);sprintf((char*)loginfo,
"SQLPreparelog:%s",(char*)sql);
if(!SQL_SUCCEEDED(retcode)){
printf("SQLPrepare(hstmt,(SQLCHAR*)sql,SQL_NTS)failed");return;
}
//ExecuteStatement
retcode=SQLExecute(hstmt);
sprintf((char*)loginfo,"SQLExecutestmtlog:%s",(char*)sql);
南大通用数据技术股份有限公司
102
GBase 8s V8.8开发者手册
if(!SQL_SUCCEEDED(retcode)){printf("SQLExecute(hstmt)failed");return;
}
//FreeHandle
retcode=SQLFreeHandle(SQL_HANDLE_STMT,hstmt);sprintf((char*)loginfo,
"SQLFreeHandlestmtlog:%s",(char*)sql);
if(!SQL_SUCCEEDED(retcode)){printf("SQLFreeHandle(SQL_HANDLE_STMT,hstmt)
failed");return;
}
}
intmain()
{
SQLHENVhenv=SQL_NULL_HENV;SQLHDBChdbc=SQL_NULL_HDBC;
int batchCount=1000;// 批量绑定的数据量
SQLLENrowsCount=0;
int ignoreCount=0;// 批量绑定的数据中，不要入库的数据量
SQLRETURNretcode;SQLCHAR dsn[1024]={'\0'};
SQLCHAR loginfo[2048];
do
{
if(ignoreCount>batchCount)
{
printf("ignoreCount(%d)shouldbelessthanbatchCount(%d)\n",ignoreCount,batchCount);
}
}while(ignoreCount>batchCount);
retcode=SQLAllocHandle(SQL_HANDLE_ENV,SQL_NULL_HANDLE,&henv);if
(!SQL_SUCCEEDED(retcode)){
printf("SQLAllocHandlefailed");gotoexit;
}
//SetODBCVerion
retcode=SQLSetEnvAttr(henv,SQL_ATTR_ODBC_VERSION,
(SQLPOINTER*)SQL_OV_ODBC3,0);
if(!SQL_SUCCEEDED(retcode)){printf("SQLSetEnvAttrfailed");gotoexit;
}
//AllocateConnection
retcode=SQLAllocHandle(SQL_HANDLE_DBC,henv,&hdbc);
if(!SQL_SUCCEEDED(retcode)){printf("SQLAllocHandlefailed");gotoexit;
}
//SetLoginTimeout
retcode=SQLSetConnectAttr(hdbc,SQL_LOGIN_TIMEOUT,(SQLPOINTER)5,0);
if(!SQL_SUCCEEDED(retcode)){printf("SQLSetConnectAttrfailed");gotoexit;
}
南大通用数据技术股份有限公司
103
GBase 8s V8.8开发者手册
//SetAutoCommit
retcode=SQLSetConnectAttr(hdbc,SQL_ATTR_AUTOCOMMIT,
(SQLPOINTER)(1),0);
if(!SQL_SUCCEEDED(retcode)){printf("SQLSetConnectAttrfailed");gotoexit;
}
//ConnecttoDSN
//gaussdb替换成用户所使用的数据源名称sprintf(loginfo,"SQLConnect(DSN:%s)",dsn);
retcode=SQLConnect(hdbc,(SQLCHAR*)"gaussdb",SQL_NTS,(SQLCHAR*)NULL,0,
NULL,0);
if(!SQL_SUCCEEDED(retcode)){printf("SQLConnectfailed");gotoexit;
}
//inittableinfo.
Exec(hdbc,"droptableifexiststest_odbc_batch_insert");
Exec(hdbc,"createtabletest_odbc_batch_insert(idintprimarykey,colvarchar2(50))");
// 下面的代码根据用户输入的数据量，构造出将要入库的数据:
{
SQLRETURNretcode;
SQLHSTMThstmtinesrt=SQL_NULL_HSTMT;int i;
SQLCHAR *sql=NULL;SQLINTEGER*ids=NULL;SQLCHAR *cols=NULL;
SQLLEN *bufLenIds=NULL;SQLLEN *bufLenCols=NULL;SQLUSMALLINT
*operptr=NULL;SQLUSMALLINT*statusptr=NULL;SQLULEN process=0;
// 这里是按列构造，每个字段的内存连续存放在一起。
ids=(SQLINTEGER*)malloc(sizeof(ids[0])*batchCount);cols=
(SQLCHAR*)malloc(sizeof(cols[0])*batchCount*50);
// 这里是每个字段中，每一行数据的内存长度。
bufLenIds=(SQLLEN*)malloc(sizeof(bufLenIds[0])*batchCount);bufLenCols=
(SQLLEN*)malloc(sizeof(bufLenCols[0])*batchCount);
// 该行是否需要被处理，SQL_PARAM_IGNORE 或 SQL_PARAM_PROCEEDoperptr=
(SQLUSMALLINT*)malloc(sizeof(operptr[0])*batchCount);memset(operptr,0,
sizeof(operptr[0])*batchCount);
// 该行的处理结果。
// 注：由于数据库中处理方式是同一语句隶属同一事务中，所以如果出错，那么待处理数
据都将是出错的， 并不会部分入库。
statusptr=(SQLUSMALLINT*)malloc(sizeof(statusptr[0])*batchCount);memset(statusptr,
88,sizeof(statusptr[0])*batchCount);
if(NULL==ids||NULL==cols||NULL==bufLenCols||NULL==bufLenIds)
{
fprintf(stderr,"FAILED:\tmallocdatamemoryfailed\n");gotoexit;
}
for(inti=0;i<batchCount;i++)
{
南大通用数据技术股份有限公司
104
GBase 8s V8.8开发者手册
ids[i]=i;
sprintf(cols+50*i,"columntestvalue%d",i);bufLenIds[i]=sizeof(ids[i]);
bufLenCols[i]=strlen(cols+50*i);
operptr[i]=(i<ignoreCount)?SQL_PARAM_IGNORE:SQL_PARAM_PROCEED;
}
//AllocateStatementHandle
retcode=SQLAllocHandle(SQL_HANDLE_STMT,hdbc,&hstmtinesrt);
if(!SQL_SUCCEEDED(retcode)){printf("SQLAllocHandlefailed");gotoexit;
}
//PrepareStatement
sql=(SQLCHAR*)"insertintotest_odbc_batch_insertvalues(?,?)";retcode=
SQLPrepare(hstmtinesrt,(SQLCHAR*)sql,SQL_NTS);sprintf((char*)loginfo,"SQLPrepare
log:%s",(char*)sql);
if(!SQL_SUCCEEDED(retcode)){printf("SQLPreparefailed");gotoexit;
}
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAMSET_SIZE,
(SQLPOINTER)batchCount,sizeof(batchCount));
if(!SQL_SUCCEEDED(retcode)){printf("SQLSetStmtAttrfailed");gotoexit;
}
retcode=SQLBindParameter(hstmtinesrt,1,SQL_PARAM_INPUT,SQL_C_SLONG,
SQL_INTEGER,sizeof(ids[0]),0,&(ids[0]),0,bufLenIds);
if(!SQL_SUCCEEDED(retcode)){printf("SQLBindParameterfailed");gotoexit;
}
retcode=SQLBindParameter(hstmtinesrt,2,SQL_PARAM_INPUT,SQL_C_CHAR,
SQL_CHAR,50,50,
cols,50,bufLenCols);
if(!SQL_SUCCEEDED(retcode)){printf("SQLBindParameterfailed");gotoexit;
}
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAMS_PROCESSED_PTR,
(SQLPOINTER)&process,sizeof(process));
if(!SQL_SUCCEEDED(retcode)){printf("SQLSetStmtAttrfailed");gotoexit;
}
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAM_STATUS_PTR,
(SQLPOINTER)statusptr,sizeof(statusptr[0])*batchCount);
if(!SQL_SUCCEEDED(retcode)){printf("SQLSetStmtAttrfailed");gotoexit;
}
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAM_OPERATION_PTR,
(SQLPOINTER)operptr,sizeof(operptr[0])*batchCount);
if(!SQL_SUCCEEDED(retcode)){printf("SQLSetStmtAttrfailed");gotoexit;
}
retcode=SQLExecute(hstmtinesrt);
南大通用数据技术股份有限公司
105
GBase 8s V8.8开发者手册
sprintf((char*)loginfo,"SQLExecutestmtlog:%s",(char*)sql);
if(!SQL_SUCCEEDED(retcode)){printf("SQLExecute(hstmtinesrt)failed");gotoexit;