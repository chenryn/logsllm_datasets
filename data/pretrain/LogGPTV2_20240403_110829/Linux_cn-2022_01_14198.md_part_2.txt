该命令会获取本应输出到终端的结果（`~` 代表家目录），并将其重定向到 `learnToScriptOutput` 文件。注意，我们并未手动创建 `learnToScriptOutput`，系统会自动创建该文件。
```
total 128
drwxr-xr-x. 1 zexcon zexcon   268 Oct  1 16:02 Desktop
drwxr-xr-x. 1 zexcon zexcon    80 Sep 16 08:53 Documents
drwxr-xr-x. 1 zexcon zexcon     0 Oct  1 15:59 Downloads
-rw-rw-r--. 1 zexcon zexcon   685 Oct  4 16:00 learnToScriptAllOutput
-rw-rw-r--. 1 zexcon zexcon    23 Oct  4 12:42 learnToScriptInput
-rw-rw-r--. 1 zexcon zexcon     0 Oct  4 16:42 learnToScriptOutput
-rw-rw-r--. 1 zexcon zexcon    52 Oct  4 16:07 learnToScriptOutputError
-rwxrw-rw-. 1 zexcon zexcon   477 Oct  4 15:01 learnToScript.sh
drwxr-xr-x. 1 zexcon zexcon     0 Jul  7 16:04 Videos
```
### 标准错误（stderr）重定向 `2>`、`2>>`
`>` 或 `>>` 符号之前命令的错误信息输出，会被写入到紧跟的文件名对应的文件中。`2>` 和 `2>>` 具有相同的效果，但 `2>>` 是将数据追加到文件末尾。你可能会想，这有什么用？不妨假象一下用户只想捕获错误信息的场景，然后你就会意识到 `2>` 或 `2>>` 的作用。数字 `2` 表示本应输出到终端的标准错误信息输出。现在我们试着追踪一个不存在的文件，以试试这个知识点。
```
[zexcon ~]$ ls -l /etc/invalidTest 2> learnToScriptOutputError
```
这会生成错误信息，并将错误信息重定向输入到 `learnToScriptOutputError` 文件中。
```
ls: cannot access '/etc/invalidTest': No such file or directory
```
### 所有输出重定向 &>、&>>、|&
如果你不想将标准输出（`stdout`）和标准错误信息（`stderr`）写入不同的文件，那么在 Bash 5 中，你可以使用 `&>` 将标准输出和标准错误重定向到同一个文件，或者使用 `&>>` 追加到文件末尾。
```
[zexcon ~]$ ls -l ~ &>> learnToScriptAllOutput
[zexcon ~]$ ls -l /etc/invalidTest &>> learnToScriptAllOutput
```
运行这些命令后，两者的输出都会进入同一个文件中，而不会区分是错误信息还是标准输出。
```
total 128
drwxr-xr-x. 1 zexcon zexcon   268 Oct  1 16:02 Desktop
drwxr-xr-x. 1 zexcon zexcon    80 Sep 16 08:53 Documents
drwxr-xr-x. 1 zexcon zexcon     0 Oct  1 15:59 Downloads
-rw-rw-r--. 1 zexcon zexcon   685 Oct  4 16:00 learnToScriptAllOutput
-rw-rw-r--. 1 zexcon zexcon    23 Oct  4 12:42 learnToScriptInput
-rw-rw-r--. 1 zexcon zexcon     0 Oct  4 16:42 learnToScriptOutput
-rw-rw-r--. 1 zexcon zexcon    52 Oct  4 16:07 learnToScriptOutputError
-rwxrw-rw-. 1 zexcon zexcon   477 Oct  4 15:01 learnToScript.sh
drwxr-xr-x. 1 zexcon zexcon     0 Jul  7 16:04 Videos
ls: cannot access '/etc/invalidTest': No such file or directory
```
如果你直接使用命令行操作，并希望将所有结果通过管道传输到另一个命令，可以选择使用 `|&` 实现。
```
[zexcon ~]$ ls -l |& grep learn
-rw-rw-r--. 1 zexcon zexcon    1197 Oct 18 09:46 learnToScriptAllOutput
-rw-rw-r--. 1 zexcon zexcon     343 Oct 14 10:47 learnToScriptError
-rw-rw-r--. 1 zexcon zexcon       0 Oct 14 11:11 learnToScriptOut
-rw-rw-r--. 1 zexcon zexcon     348 Oct 14 10:27 learnToScriptOutError
-rwxr-x---. 1 zexcon zexcon     328 Oct 18 09:46 learnToScript.sh
[zexcon ~]$
```
### 标准输入（stdin）
在本篇和上篇文章中，我们已经多次使用过标准输入（stdin），因为在每次使用键盘输入时，我们都在使用标准输入。为了区别通常意义上的“键盘即标准输入”，这次我们尝试在脚本中使用 `read` 命令。下面的脚本中就使用了 `read` 命令，字面上就像“读取标准输入”。
```
#!/bin/bash
#Here we are asking a question to prompt the user for standard input. i.e.keyboard
echo 'Please enter your name.'
#Here we are reading the standard input and assigning it to the variable name with the read command.
read name
#We are now going back to standard output, by using echo and printing your name to the command line.
echo "With standard input you have told me your name is: $name"
```
这个示例通过标准输出给出提示，提醒用户输入信息，然后从标准输入（键盘）获取信息，使用 `read` 将其存储在 `name` 变量中，并通过标准输出显示出 `name` 中的值。
```
[zexcon@fedora ~]$ ./learnToScript.sh
Please enter your name.
zexcon
With standard input you have told me your name is: zexcon
[zexcon@fedora ~]$
```
### 在脚本中使用
现在我们把学到的东西放入脚本中，学习一下如何实际应用。下面是增加了几行后的新版本 `learnToScript.sh` 文件。它用追加的方式将标准输出、标准错误信息，以及两者混合后的信息，分别写入到三个不同文件。它将标准输出写入 `learnToScriptStandardOutput`，标准错误信息写入 `learnToScriptStandardError`，二者共同都写入 `learnToScriptAllOutput` 文件。
```
#!/bin/bash
#As we know this article is about scripting. So let's
#use what we learned in a script. 
#Let's get some information from the user and add it to our scripts with stanard input and read
echo "What is your name? "
read name
#Here standard output directed to append a file to learnToScirptStandardOutput
echo "$name, this will take standard output with append >> and redirect to learnToScriptStandardOutput." 1>> learnToScriptStandardOutput
#Here we are taking the standard error and appending it to learnToScriptStandardError but to see this we need to #create an error.
eco "Standard error with append >> redirect to learnToScriptStandardError." 2>> learnToScriptStandardError
#Here we are going to create an error and a standard output and see they go to the same place.
echo "Standard output with append >> redirect to learnToScriptAllOutput." &>> learnToScriptAllOutput
eco "Standard error with append >> redirect to learnToScriptAllOutput." &>> learnToScriptAllOutput
```
脚本在同一目录中创建了三个文件。命令 `echo` 故意输入错误（LCTT 译注：缺少了字母 h）以产生错误信息。如果查看三个文件，你会在 `learnToScriptStandardOutput` 中看到一条信息，在 `learnToScriptStandardError` 中看到一条信息，在 `learnToScriptAllOutput` 中看到两条信息。另外，该脚本还会再次提示输入的 `name` 值，再将其写入 `learnToScriptStandardOutput` 中。
### 结语
至此你应该能够明确，可以在命令行中执行的操作，都可以在脚本中执行。在编写可能供他人使用的脚本时，文档非常重要。如果继续深入研究脚本，标准输出会显得更有意义，因为你将会控制它们的生成。在脚本中，你可以与命令行中操作时应用相同的内容。下一篇文章我们会讨论函数、循环，以及在此基础上进一步构建的结构。
---
via: 
作者：[Matthew Darnell](https://fedoramagazine.org/author/zexcon/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[unigeorge](https://github.com/unigeorge) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出