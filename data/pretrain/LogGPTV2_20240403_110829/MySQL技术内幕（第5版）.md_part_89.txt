PDO::FETCH_OBJ
PDO::FETCH_BOTH
PDO::FETCH_NUM
PDO::FETCH_ASSOC
参数
（$stmt）;
（（u-（）unouno）
first_name FROM president";
表9-1行获取模式的值
一个对象，其元素需要通过属性来访问
一个数组，其元素可以通过关联索引或数字索引来访问
一个数组，其元素需要通过数字索引来访问
一个数组，其元素需要通过关联索引来访问
下面两个示例都可以把获取模式设置为
返回值
9.1·PHP 概述
367
---
## Page 388
available”（无电子邮件地址）：
member 表里的姓名和电子邮件地址，当电子邮件地址为 NULL值时，它将输出“No emailaddress
的某个列是否为NULL值的一种办法是，使用isnull（）函数。下面这个示例选择并输出了
9.1.5
参数。
一个行，它会将其中的列值分别赋予那些绑定变量：
模式取回各个行。这样，fetch（)将在没有到达结果集末尾时返回 TRUE，并且对于获取到的每
bindColumn（）把结果集里的各个列与有关变量绑定在一起；然后再使用PDO：：FETCH_BOUND
命令里选取的各个列的顺序相对应。
姓在后的顺序输出各个姓名：
$row->full_name语法来访问它所对应的列。
便为这个列取了一个别名full_name：
而它不是合法的属性名。不过，你可以为列取一个别名，以此来提供合法名字。下面这个查询
368
PHP使用了 PHP语言的 NULL 值来表示 SQL 语言的 NULL 值。要检查 SELECT 查询所返回
$stmt ="SELECT last_name, first_name, email FROM member";
默认的获取模式决定了行是如何被返回的。
语句句柄可以用作选代器，而不必显式调用fetch（)方法：
与 fetch（）一样，fetchAll（）也可以使用默认获取模式，并且接受一个显式的获取模式
另一种办法是，把检索到的各个列值直接赋给PHP变量。为实现这一点，需要先用
如果现在把这个查询的每个行当作一个对象来获取，则可以利用这个别名，使用
对于这样的查询，不太适合将行当作对象来获取。其中，查询列的名字即为表达式本身，
while (list ($last_name,$first_name, $email)= $sth->fetch (PDO::FETCH_NUM）)
$rows = $sth->fetchAll （);
如果想把一次性获取的所有行赋值给一个数组，可以使用fetchAll（)方法：
while (Ssth-
$sth->bindColumn (2,
$sth->bindcolumn (1,
$stmt = "SELECT last_name, first_name FROM president";
你可以任意选择这些变量的名字，只要合法就行，但是它们在1ist（）里的顺序必须与查询
$stmt="SELECT last_name,
不过，
while （$row= $sth->fetch ([fetch_mode]）)
以上几个示例都使用了下面这种形式的行获取循环，将每个行赋给$row变量：
printf ("%s %s\n", $row["first_name"], $row["last_name"]);
while
SELECT coNcAT(first_name,, last_name) AS full_name FROM president
printf（"%s%s\n"，$fn,$ln);
printf（"%s %s\n"，$fn,$ln）;
测试查询结果里的 NULL 值
第9章用PHP语言编写MySQL程序
(list
还有其他几种获取行的办法。
>fetch
($ln,
$fn)
（PDO::FETCH_BOUND）)
(sstmt)
$fn）;
$ln）;
$sth->fetch （PDO::FETCH_NUM))
first_name FROM president";
，一种办法是，获取一个数组，并把结果赋值给一组变
---
## Page 389
样的语言开发一样。假设，你正在构造一条往表里插入新行的语句。在这个语句串里，你可能
9.1.7
些会修改行的语句。）
确定结果集里有多少个行，则需要在获取它们时对其进行计数。（rowCount（）方法只适用于那
行数：
一个语句句柄，再使用这个语句句柄来执行语句：
以分步骤来预处理和执行 SQL语句。具体做法是：先使用数据库句柄的 prepare（）方法来获得
9.1.6使用预处理语句
常量相比较：
在PHP里构造SQL 语句串时，
如果语句返回了行，则可以使用像fetch（）、columnCount（)这样的方法来处理。如果想
在执行某条会修改行的语句之后，你便可以调用rowCount（）方法来获得实际受影响的
前面介绍的 exec（)和 query（)方法，都能执行 SQL 语句，并立刻返回结果集。PDO也可
预处理语句提供了一些重要功能。
$count=$sth->rowCount(）;
ssth->execute();
$sth = $dbh->prepare (Sstmt);
else
if(!isset ($email))
PHP的NULL值等同于一个未设置的值，因此还可以用isSet（）函数来测试NULL值：
else
if （Semail === NULL)
口
另一种测试 SQL语言NULL值的办法是，使用完全相等运算符“=--”，将值与PHP的NULL
口
print （$email);
print("Noemail address available"）;
print （$email）;
print ("No email address available");
利用占位符来处理数据引号问题
产生额外的开销。当需要多次执行语句时，这种做法能带来好处，因为它可以提供更女
经过预处理的语句可以反复执行多次。这样可以避免在每次执行时都需要进行预处理而
对特殊字符和 NULL 值的转义和引号处理。把值绑定到占位符的办法有很多种，具体详
需要在执行该语句之前把特定的数据值与相应的占位符绑定在一起，PDO会负责完月
语句字符串可以包含占位符，而不仅仅只有字面数据值。在对语句进行预处理之后，
print（"\n");
else
printf ("Name: %s %s, Email: ", $first_name, $last_name);
时使用占位符来将这些值与预处理语句绑定在一起。
后，在一个循环里（每循环一次提供一个行的数据值）反复调用execute（)执行它，
的性能。例如，在插入多个行时，可以先用 prepare（）对INSERT语句预处理一次。
见9.1.7节。
print ("No email address available");
一定要对引号问题特别小心，就像用其他类似C和Perl这
PHP概述
369
可
好
成
---
## Page 390
个关联数组——其中，每一个值都与相应的名字连在一起。
其后的名字构成。操作流程是：先对要执行的语句进行预处理，然后向execute（)方法传递一
在语句串里的位置不同而已。PDO还支持名字型占位符风格，即占位符由一个冒号和一个紧跟
定到相应的占位符上：
提供数据值：
字符来作为占位标记，以表明数据值所在的位置。当执行该语句时，需要以参数数组的形式来
数据都是非NULL字符串。一种更好的办法是使用预处理语句。这样一来，你便可以在SQL语
的使用。
外的引号：
句时使用了quote（)方法，则可以把该方法返回的值直接插到语句串里，而不用自己再添加额
同样的目的。例如，调用quote（"O'Malley")之后，返回的值为'O\'Malley'。如果在构造语
我们可以使用quote（）函数。在PHP 里，PDO 的数据库句柄有一个 quote（)方法，可以达到
以调用 mysql_real_escape_string()或 mysql_escape_string（）函数。在 Perl DBI 脚本里
条语句发送给MySQL服务器，则会导致一个语法错误。为解决此问题，在C语言程序里，可
会为每一个插到某个字符串列里的值加上引号：
可
370
前面几个示例使用的都是位置型占位符，即“？”标记。它们都一样，唯一的区别在于它们
另一种提供数据值的办法是，在调用execute（）方法之前，用bindValue（）把它们分别绑
PDO会负责处理字符串里的特殊字符，并且能正确处理像数字和NULL那样的非字符串值。
因为这些不足，我个人认为应该尽量避免使用quote（），
不幸的是，与DBI模块里的同名函数相比，PDO的 quote（)方法存在某些不足，限制了它
$sth = $dbh->prepare ($stmt）;
$sth->execute (array("o'Mal1ey","Brian","2013-09-01"));
口不是所有驱动程序都实现了这个方法。如果未实现，则在调用它时会返回FALSE，而不
sfirst
$last=$dbh->quote（"o'Malley"）;
这里的问题在于，有一个带引号的值（即o'Malley），其自身也带有一个引号。
$last = "O'Malley";
$sth->bindvalue
$sth->bindvalue(
口
$stmt=
sstmt
first
先进行测试，然后再根据它是否为NULL来区别对待。
对于NULL值，当你把单词“NULL”插到语句串里时，可能并不想要带上任何引号。但
会返回一个用引号引起来的字符串。
第9章
="INSERT INTO member(last_name,first_name,expiration)"
"INSERT INTO member (last_name,first_name,expiration)"
VALUEs($last,$first,$expiration)";
VALUES('$last','$first',$expiration')";
"Brian"
用 PHP 语言编写MySQL 程序
"2013-09-01";
"2013-09-01");
"0'Malley");
"Brian");
($stmt）;
("Brian"
除非你确切知道要处理的字符串
，如果把这
---
## Page 391
如此。
例如：
errorCode（）或errorInfo（)方法来获得出错信息。
处理那些使用了此句柄的操作所发生的错误。出错模式的设置方式如下：
设连接成功，并且你得到了一个有效的数据库句柄，PDO将会根据当前的PDO出错处理模式，
那么当真的有错误出现时，你将很难找到脚本不工作的原因。
9.1.8
请注意，在调用errorCode（)时，会用到那个发生错误的句柄。对于errorInfo（）也是
else if (!$sth->execute (）)
在静默模式或警告模式下，出错处理会对每一个有可能失败的PDO操作的结果进行检查。
errorCode（）会返回一个由5个字符构成的 SQLSTATE 值。如果返回值为
对于以上三种情况，如果你确切知道是哪个对象发生了错误，那么可以调用该对象的
当你尝试调用newPDO（）来连接数据库服务器时，如果连接失败，则会抛出一个异常。假
errorInfo（）会返回一个由3个元素构成的数组，其中包括一个SQLSTATE值、一个与
口PDO：ERRMODE_SILENT。PDO只会为那个引起错误的对象设置出错信息，其他什么事
PDO支持下面三种出错处理模式。
$dbh->setAttribute(PDO::ATTR_ERRMODE,mode_value);
在与MySQL进行交互时，对出错处理的编排非常关键。如果你认为每一个调用都会成功，
口PDO:：ERRMODE_EXCEPTION。在设置出错信息之后，PDO还会抛出一个异常。
口PDO：：ERRMODE_WARNING。这个类似于静默模式，不同之处在于PDO除了设置出错信息
名字型占位符的一个优点是，当有大量参数时，占位符和数据值之间的关联易于跟踪。
$sth->execute();
$sth->bindValue
$sth->bindvalue
ssth->bindvalue
$sth=$dbh
另外，
$sth->execute(array
$sth=$dbh->prepare ($stmt);
PDO：：ERR_NONE（"00000"），则表明没有发生任何错误。
以外，还会抛出一条警告消息。
情都不做。这是默认的出错处理模式。
PDO::ERR_NONE("00000")。
如果这个句柄操作成功，则返回值可能是一个单元素数组，其中包含的SQLSTATE值为
形式的出错代码和一条描述性的出错消息。
驱动程序有关的出错代码和一条出错消息。对于 MySQL，后面两个值分别为一个数字
出错处理
还可以在调用execute（）方法之前，先把每个值与它的占位符名字绑定在一起：
VALUEs(:last_name,:first_name,:expiration)";
VALUEs(:last_name,:first_name,:expiration)";
->prepar
（":first_name"
(":expiration",
）：
":expiration"=>"2013-09-01"
":first_name"
:last_name"
（$stmt）;
=>
"O'Malley");
=>"Brian"
"2013-09-01");
"Brian");
"O'Malley"
9.1PHP概述
371
---
## Page 392
9.2
信息，以便你可以用一种更合适的方式来报告错误，那么可以像下面这样做：
Web上下文里，这种出错消息会出现在发送给客户端浏览器的页面里，而这可能不是你想要的
句柄隔离到它自己的try/catch语句块里。
发的错误，此时你只能依赖异常对象的方法。另外，你也可以重新调整这段代码，把每个PDO
如果在try 语句块里使用多个 PDO 句柄，那么将无法知道是catch 语句块里的哪一个句柄引
的出错信息。之所以能做到这一点，是因为，try语句块里使用了那个唯一的PDO 句柄$dbh。