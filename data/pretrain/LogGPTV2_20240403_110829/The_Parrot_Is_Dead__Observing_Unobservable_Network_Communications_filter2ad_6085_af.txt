### References

[18] M. Dusi, M. Crotti, F. Gringoli, and L. Salgarelli. **Tunnel Hunter: Detecting Application-layer Tunnels with Statistical Fingerprinting.** *Computer Networks*, 53(1):81–97, 2009.

[19] K. Dyer, S. Coull, T. Ristenpart, and T. Shrimpton. **Format-Transforming Encryption: More than Meets the DPI.** *Cryptology ePrint Archive*, Report 2012/494, 2012.

[20] N. Feamster, M. Balazinska, G. Harfst, H. Balakrishnan, and D. Karger. **Infranet: Circumventing Web Censorship and Surveillance.** *USENIX Security*, 2002.

[21] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. **Hypertext Transfer Protocol – HTTP/1.1.** *RFC 2616*.

[22] D. Fifield, N. Hardison, J. Ellithrope, E. Stark, R. Dingledine, D. Boneh, and P. Porras. **Evading Censorship with Browser-Based Proxies.** *PETS*, 2012.

[23] E. Freire, A. Ziviani, and R. Salles. **On Metrics to Distinguish Skype Flows from HTTP Traffic.** *J. Netw. Sys. Management*, 17(1-2):53–72, 2009.

[24] S. Gianvecchio and H. Wang. **Detecting Covert Timing Channels: An Entropy-based Approach.** *CCS*, 2007.

[25] S. Guha, N. Daswani, and R. Jain. **An Experimental Study of the Skype Peer-to-Peer VoIP System.** *IPTPS*, 2006.

[26] T. Heydt-Benjamin, A. Serjantov, and B. Defend. **Nonesuch: a Mix Network with Sender Unobservability.** *WPES*, 2006.

[27] A. Houmansadr, G. Nguyen, M. Caesar, and N. Borisov. **Cirripede: Circumvention Infrastructure Using Router Redirection with Plausible Deniability.** *CCS*, 2011.

[28] A. Houmansadr, T. Riedl, N. Borisov, and A. Singer. **I Want My Voice to Be Heard: IP over Voice-over-IP for Unobservable Censorship Circumvention.** *NDSS*, 2013.

[29] A. Houmansadr, W. Zhou, M. Caesar, and N. Borisov. **SWEET: Serving the Web by Exploiting Email Tunnels.** *CoRR*, abs/1211.3191, 2012.

[30] The httprecon Project. [http://www.computec.ch/projekte/httprecon/](http://www.computec.ch/projekte/httprecon/).

[31] Internet Censorship Listed: How Does Each Country Compare? [http://www.guardian.co.uk/technology/datablog/2012/apr/16/internet-censorship-country-list](http://www.guardian.co.uk/technology/datablog/2012/apr/16/internet-censorship-country-list).

[32] Iran Reportedly Blocking Encrypted Internet Traffic. [http://arstechnica.com/tech-policy/2012/02/iran-reportedly-blocking-encrypted-internet-trafﬁc](http://arstechnica.com/tech-policy/2012/02/iran-reportedly-blocking-encrypted-internet-trafﬁc).

[33] Italy Censors Proxy That Bypasses BTjunkie and Pirate Bay Block. [http://tiny.cc/fcmksw](http://tiny.cc/fcmksw).

[34] J. Knockel, J. Crandall, and J. Saia. **Three Researchers, Five Conjectures: An Empirical Analysis of TOM-Skype Censorship and Surveillance.** *FOCI*, 2011.

[35] J. McNamee. **The Slide from Self-regulation to Corporate Censorship.** [http://www.edri.org/ﬁles/EDRI selfreg ﬁnal 20110124.pdf](http://www.edri.org/ﬁles/EDRI selfreg ﬁnal 20110124.pdf).

[36] S. Jana and V. Shmatikov. **Abusing File Processing in Using IP Spoofing for Censorship-Resistant Web Browsing.** *CCS*, 2012.

[37] D. Kesdogan, M. Borning, and M. Schmeink. **Unobservable Surfing on the World Wide Web: Is Private Information Retrieval an Alternative to the MIX based Approach?** *PET*, 2002.

[38] C. Leberknight, M. Chiang, H. Poor, and F. Wong. **A Taxonomy of Internet Censorship and Anti-censorship.** [http://www.princeton.edu/∼chiangm/anticensorship.pdf](http://www.princeton.edu/∼chiangm/anticensorship.pdf).

[39] D. McCoy, J. Morales, and K. Levchenko. **Proximax: A Measurement Based System for Proxies Dissemination.** *FC*, 2011.

[40] J. McLachlan and N. Hopper. **On the Risks of Serving Whenever You Surf: Vulnerabilities in Tor’s Blocking Resistance Design.** *WPES*, 2009.

[41] H. Moghaddam, B. Li, M. Derakhshani, and I. Goldberg. **SkypeMorph: Protocol Obfuscation for Tor Bridges.** *CCS*, 2012.

[42] S. Murdoch and G. Danezis. **Low-Cost Traffic Analysis of Tor.** *S&P*, 2005.

[43] S. Murdoch and S. Lewis. **Embedding Covert Channels into TCP/IP.** *Information Hiding*, 2005.

[44] A Simple Obfuscating Proxy. [https://www.torproject.org/projects/obfsproxy.html.en](https://www.torproject.org/projects/obfsproxy.html.en).

[45] A. Pﬁtzmann and M. Hansen. **Anonymity, Unobservability, and Pseudonymity: A Consolidated Proposal for Terminology.** *Design Issues in Anonymity and Unobservability*, 2000.

[46] Tor: Pluggable Transports. [https://www.torproject.org/docs/pluggable-transports.html.en](https://www.torproject.org/docs/pluggable-transports.html.en).

[47] L. Ptáček. **Analysis and Detection of Skype Network Traffic.** Master’s thesis, Masaryk University, 2011.

[48] S. Radicati and Q. Hoang. **Email Statistics Report, 2011-2015.** 2011.

[49] H. Roberts, E. Zuckerman, and J. Palfrey. **2007 Circumvention Landscape Report: Methods, Uses, and Tools.** [http://cyber.law.harvard.edu/sites/cyber.law.harvard.edu/ﬁles/2007 Circumvention Landscape.pdf](http://cyber.law.harvard.edu/sites/cyber.law.harvard.edu/ﬁles/2007 Circumvention Landscape.pdf).

[50] J. Rosenberg, R. Mahy, P. Matthews, and D. Wing. **Session Traversal Utilities for NAT (STUN).** *RFC 5389*.

[51] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston, J. Peterson, R. Sparks, M. Handley, and E. Schooler. **SIP: Session Initiation Protocol.** *RFC 3261*.

[52] M. Schuchard, J. Geddes, C. Thompson, and N. Hopper. **Routing Around Decoys.** *CCS*, 2012.

[53] H. Schulzrinne, S. L. Casner, R. Frederick, and V. Jacobson. **RTP: A Transport Protocol for Real-Time Applications.** *RFC 3550*.

[54] D. Schwartz and B. Sterman. **Method and Apparatus for Server-side NAT Detection.** US Patent US 2006/0187912 A1.

[55] Ten ways to discover tor bridges. [https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges](https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges).

[56] How Governments Have Tried to Block Tor. [https://svn.torproject.org/svn/projects/presentations/slides-28c3.pdf](https://svn.torproject.org/svn/projects/presentations/slides-28c3.pdf).

[57] Ultrasurf. [http://www.ultrareach.com](http://www.ultrareach.com).

[58] Virtual Distributed Ethernet. [http://vde.sourceforge.net/](http://vde.sourceforge.net/).

[59] Q. Wang, X. Gong, G. Nguyen, A. Houmansadr, and N. Borisov. **CensorSpoofer: Asymmetric Communication Protocol.** [http://blanu.net/Dust.pdf](http://blanu.net/Dust.pdf).

[60] Z. Weinberg, J. Wang, V. Yegneswaran, L. Briesemeister, S. Cheung, F. Wang, and D. Boneh. **StegoTorus: A Camouflage Proxy for the Tor Anonymity System.** *CCS*, 2012.

[61] T. Wilde. **Knock Knock Knockin' on Bridges' Doors.** [https://blog.torproject.org/blog/knock-knock-knockin-bridges-doors](https://blog.torproject.org/blog/knock-knock-knockin-bridges-doors), 2012.

[62] B. Wiley. **Dust: A Blocking-Resistant Internet Transport.** [http://blanu.net/Dust.pdf](http://blanu.net/Dust.pdf).

[63] P. Winter and S. Lindskog. **How the Great Firewall of China Is Blocking Tor.** *FOCI*, 2012.

[64] E. Wustrow, S. Wolchok, I. Goldberg, and J. Halderman. **Telex: Anticensorship in the Network Infrastructure.** *USENIX Security*, 2011.

### Appendix A: Background on Skype

#### A. Overview of Skype Protocol

**Skype Client Startup:**
- When the Skype application launches, the client (SC) checks for updates by connecting to `ui.skype.com`.
- The next step is selecting the neighbor supernode (NSN). The client searches its supernode cache (host cache) and sends batches of UDP probes. The first supernode (SN) that responds positively is selected as the NSN.
- A Skype UDP probe involves an exchange of messages between SC and SN to discover the Skype network. There are two types of UDP probes: long (four-packet exchange) and short (two-packet exchange).
- The SC then connects to the Skype network via a TCP connection to the selected NSN using the same port as UDP probing. If the port is blocked, it tries ports 80 and 443. If the TCP connection fails, it reruns UDP probes to find another NSN.
- The SC and NSN perform a Skype TCP handshake involving six messages with characteristic sizes and the TCP PSH flag set.
- Finally, the SC authenticates itself by connecting to Skype's central login server (LS) to get a certificate for authentication to other Skype nodes. This process involves several messages with the PSH flag set, and the number of messages varies depending on the LS and network conditions.

**Making Skype Calls:**
- To initiate a call, the SC uses its TCP connection with the NSN to find the callee's IP address and Skype port.
- The caller then uses UDP probes to check network connectivity, including whether the caller's UDP port is open and if the host is behind NAT.
- If the callee is not behind NAT, the caller initiates a TCP connection to the callee and sends the ringing signal. If the callee accepts, a UDP connection is established for transferring call data.
- If the callee is behind NAT, the caller, using the SN as a relay, instructs the callee to send a UDP packet to the caller's IP address/Skype port to add a NAT entry for the call. The call then proceeds as if there were no NAT.
- If both the caller and callee are behind NAT, they use the SN to send UDP packets to each other. If Skype cannot bypass NAT/firewall, the call is handled by a relay, and all traffic is encapsulated in an encrypted TCP stream.
- For unrestricted connections (both SCA and SCB have public IP addresses), after probing multiple peers with UDP probes, SCA establishes a TCP connection to SCB and sends several signaling messages. This TCP connection is kept alive until the end of the call. Voice and/or video content is sent over a UDP connection between SCA and SCB.
- For NAT/firewall connections (SCA and/or SCB are behind a NAT or firewall), SCA sends signaling information to SCB through the SNs. If only SCA is behind NAT, SCA and SCB can usually establish a direct UDP connection after the signaling. Otherwise, SCA finds appropriate relay nodes, and SCA and SCB connect directly to a relay which exchanges traffic between them. Several relays are typically used for fault tolerance and backup.
- If the Skype TCP connection used for signaling is closed, the UDP connection also closes. Additionally, Skype clients periodically send Skype UDP pings (two keep-alive packets) to maintain their "online" status in the Skype network. These packets can be identified by the "0x02" string in their function field.

#### B. Passive Detection of Skype Traffic

There are various techniques for detecting Skype traffic, including:

**T1: HTTP Update Messages:**
- When the Skype client (SC) starts up, it makes an HTTP connection to `ui.skype.com` to check for updates.

**T2: Login Messages:**
- To authenticate, SC needs a certificate from Skype's login server. Logins are recognized by characteristic sizes and contents, particularly the second message in a login TCP connection, which carries the header `0x170301` in plaintext.

**T3: Start of Message (SoM) Fields in UDP Packets:**
- Skype uses SoM fields in its UDP packets, which are not encrypted and have specific values. The ID and Fun fields are easily recognizable. For example, `0x02`, `0x03`, `0x07`, and `0x0f` indicate signaling messages, while `0x0d` indicates a data message.

**T4: Packet Sizes:**
- A UDP probe consists of four packets, with the second packet being 11 bytes long and the fourth packet revealing the outcome of the probe.
- A Skype TCP handshake involves six messages with the PSH flag set, and payload sizes of 27 and 4 bytes for the fourth and sixth packets, respectively.
- Authentication messages include four or more packets with the PSH flag set, with the first two having 5-byte payloads.
- An HTTP update request returns a single unencrypted packet from `ui.skype.com` with fixed values in the first 29 bytes for the Linux version and bytes 95-124 for the Windows version.

**T5: Packet Timings and Rate:**
- Skype audio and video traffic exhibit characteristic packet timing patterns. SILK, Skype's audio codec, samples at 8, 12, 16, or 24 KHz, resulting in different data rates for UDP flows. Voice packets are about 150 bytes, and video packets are around 1380 bytes.

**T6: NAT Traversal:**
- Once the SC starts up, it performs tests to detect whether it is behind NAT or a firewall. SCs use variants of the STUN protocol for NAT traversal.

**T7: Periodic Message Exchanges:**
- Skype is a P2P system, and SCs frequently exchange messages with other Skype nodes to determine their online/offline status. Each SC establishes about five short TCP connections per hour and performs UDP probes on approximately thirty Skype peers per hour.

**T8: Typical Skype Client Behavior:**
- Each task performed by a SC, such as searching for a contact or placing a call, generates characteristic traffic.

**T9: TCP Control Channel:**
- Skype uses various TCP control channels, including a TCP signaling connection that remains active during a call.

---

This optimized version provides a clearer and more professional presentation of the references and the background on Skype.