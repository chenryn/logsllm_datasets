projects/design-paper/blocking.html.
[18] M. Dusi, M. Crotti, F. Gringoli, and L. Salgarelli. Tunnel
Hunter: Detecting Application-layer Tunnels with Statistical
Fingerprinting. Computer Networks, 53(1):81–97, 2009.
[19] K. Dyer, S. Coull, T. Ristenpart, and T. Shrimpton. Format-
Transforming Encryption: More than Meets the DPI. Cryp-
tology ePrint Archive, Report 2012/494, 2012.
[20] N. Feamster, M. Balazinska, G. Harfst, H. Balakrishnan, and
Infranet: Circumventing Web Censorship and
D. Karger.
Surveillance. In USENIX Security, 2002.
[21] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter,
P. Leach, and T. Berners-Lee. Hypertext Transfer Protocol –
HTTP/1.1. RFC 2616.
[22] D. Fiﬁeld, N. Hardison, J. Ellithrope, E. Stark, R. Dingledine,
D. Boneh, and P. Porras. Evading Censorship with Browser-
Based Proxies. In PETS, 2012.
[23] E. Freire, A. Ziviani, and R. Salles. On Metrics to Distinguish
Skype Flows from HTTP Trafﬁc. J. Netw. Sys. Management,
17(1-2):53–72, 2009.
[24] S. Gianvecchio and H. Wang. Detecting Covert Timing
Channels: An Entropy-based Approach. In CCS, 2007.
[25] S. Guha, N. Daswani, and R. Jain. An Experimental Study
of the Skype Peer-to-Peer VoIP System. In IPTPS, 2006.
[26] T. Heydt-Benjamin, A. Serjantov, and B. Defend. Nonesuch:
a Mix Network with Sender Unobservability. In WPES, 2006.
[27] A. Houmansadr, G. Nguyen, M. Caesar, and N. Borisov. Cirri-
pede : Circumvention Infrastructure Using Router Redirection
with Plausible Deniability. In CCS, 2011.
[28] A. Houmansadr, T. Riedl, N. Borisov, and A. Singer.
I
Want My Voice to Be Heard: IP over Voice-over-IP for
Unobservable Censorship Circumvention. In NDSS, 2013.
[29] A. Houmansadr, W. Zhou, M. Caesar, and N. Borisov.
SWEET: Serving the Web by Exploiting Email Tunnels.
CoRR, abs/1211.3191, 2012.
[30] The httprecon Project.
http://www.computec.ch/projekte/
httprecon/.
[31] Internet Censorship Listed: How Does Each Country Com-
http://www.guardian.co.uk/technology/datablog/2012/
pare?
apr/16/internet-censorship-country-list.
[32] Iran
Reportedly
Trafﬁc.
iran-reportedly-blocking-encrypted-internet-trafﬁc.
Blocking
Internet
http://arstechnica.com/tech-policy/2012/02/
Encrypted
[33] Italy Censors Proxy That Bypasses BTjunkie and Pirate Bay
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
Block. http://tiny.cc/fcmksw.
[34] J. Knockel, J. Crandall, and J. Saia. Three Researchers,
Five Conjectures: An Empirical Analysis of TOM-Skype
Censorship and Surveillance. In FOCI, 2011.
[35] J. McNamee.
The Slide from Self-regulation to Cor-
porate Censorship. http://www.edri.org/ﬁles/EDRI selfreg
ﬁnal 20110124.pdf.
[36] S. Jana and V. Shmatikov. Abusing File Processing in
Using IP Spooﬁng for Censorship-Resistant Web Browsing.
In CCS, 2012.
[60] Z. Weinberg, J. Wang, V. Yegneswaran, L. Briesemeister,
S. Cheung, F. Wang, and D. Boneh. StegoTorus : A Camou-
ﬂage Proxy for the Tor Anonymity System. In CCS, 2012.
[61] T. Wilde.
Knock
Bridges
knock-knock-knockin-bridges-doors, 2012.
Doors.
Knock
on
https://blog.torproject.org/blog/
Knockin
Malware Detectors for Fun and Proﬁt. In S&P, 2012.
[62] B. Wiley. Dust: A Blocking-Resistant Internet Transport
[37] D. Kesdogan, M. Borning, and M. Schmeink. Unobservable
Surﬁng on the World Wide Web: Is Private Information
Retrieval an Alternative to the MIX based Approach?
In
PET, 2002.
[38] C. Leberknight, M. Chiang, H. Poor, and F. Wong. A
Taxonomy of Internet Censorship and Anti-censorship. http://
www.princeton.edu/∼chiangm/anticensorship.pdf.
[39] D. McCoy, J. Morales, and K. Levchenko. Proximax: A
In
Measurement Based System for Proxies Dissemination.
FC, 2011.
[40] J. McLachlan and N. Hopper. On the Risks of Serving When-
ever You Surf: Vulnerabilities in Tor’s Blocking Resistance
Design. In WPES, 2009.
[41] H. Moghaddam, B. Li, M. Derakhshani, and I. Goldberg.
SkypeMorph: Protocol Obfuscation for Tor Bridges. In CCS,
2012.
[42] S. Murdoch and G. Danezis. Low-Cost Trafﬁc Analysis of
Tor. In S&P, 2005.
[43] S. Murdoch and S. Lewis. Embedding Covert Channels into
TCP/IP. In Information Hiding, 2005.
[44] A Simple Obfuscating Proxy.
https://www.torproject.org/
projects/obfsproxy.html.en.
[45] A. Pﬁtzmann and M. Hansen. Anonymity, Unobservability,
and Pseudonymity: A Consolidated Proposal for Terminology.
In Design Issues in Anonymity and Unobservability, 2000.
[46] Tor: Pluggable transports.
https://www.torproject.org/docs/
pluggable-transports.html.en.
[47] L. Pt´aˇcek. Analysis and Detection of Skype Network Trafﬁc.
Master’s thesis, Masaryk University, 2011.
[48] S. Radicati and Q. Hoang. Email Statistics Report, 2011-
2015, 2011.
[49] H. Roberts, E. Zuckerman,
2007
Circumvention Landscape Report: Methods, Uses, and
Tools.
http://cyber.law.harvard.edu/sites/cyber.law.harvard.
edu/ﬁles/2007 Circumvention Landscape.pdf.
and J. Palfrey.
[50] J. Rosenberg, R. Mahy, P. Matthews, and D. Wing. Session
Traversal Utilities for NAT (STUN). RFC 5389.
[51] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston,
J. Peterson, R. Sparks, M. Handley, and E. Schooler. SIP:
Session Initiation Protocol. RFC 3261.
[52] M. Schuchard, J. Geddes, C. Thompson, and N. Hopper.
Routing Around Decoys. In CCS, 2012.
[53] H. Schulzrinne, S. L. Casner, R. Frederick, and V. Jacobson.
RTP: A Transport Protocol for Real-Time Applications. RFC
3550.
[54] D. Schwartz and B. Sterman. Method and Apparatus for
Server-side NAT Detection. US Patent US 2006/0187912 A1.
[55] Ten ways to discover tor bridges. https://blog.torproject.org/
blog/research-problems-ten-ways-discover-tor-bridges.
[56] How Governments Have Tried to Block Tor.
https://svn.
torproject.org/svn/projects/presentations/slides-28c3.pdf.
[57] Ultrasurf. http://www.ultrareach.com.
[58] Virtual Distributed Ethernet. http://vde.sourceforge.net/.
[59] Q. Wang, X. Gong, G. Nguyen, A. Houmansadr, and
N. Borisov. CensorSpoofer: Asymmetric Communication
78
Protocol. http://blanu.net/Dust.pdf.
[63] P. Winter and S. Lindskog. How the Great Firewall of China
Is Blocking Tor. In FOCI, 2012.
[64] E. Wustrow, S. Wolchok, I. Goldberg, and J. Halderman.
In
Telex: Anticensorship in the Network Infrastructure.
USENIX Security, 2011.
APPENDIX A.
BACKGROUND ON SKYPE
A. Overview of Skype protocol
Skype client start up. Every time the Skype application
launches, the Skype client (SC) checks for a Skype HTTP
update by connecting to ui.skype.com. The next step is
selecting the neighbor supernode (NSN). The client goes
through its supernode cache (also called host cache), which
is the “shared.xml” ﬁle with the list of nearby supernodes
(SNs), and sends batches of UDP probes. The ﬁrst SN who
returns a positive response is selected as the NSN. A Skype
UDP probe is an exchange of messages between SC and SN
to discover the Skype network and its characteristics. There
are two kinds of UDP probes, long and short, consisting of
four- and two-packet exchanges, respectively. These packets
have characteristic sizes [1] and contents [47].
SC then connects to the Skype network by opening a TCP
connection to the selected NSN, using the same port as UDP
probing. If the port is blocked, SC tries ports 80 and 443. If
TCP connection establishment fails, SC reruns UDP probes
to ﬁnd another NSN. SC and NSN then perform Skype TCP
handshake, which involves six messages. Their payloads
are encrypted, but the handshake packets have characteristic
sizes and the TCP PSH ﬂag set [1, Fig. 2].
The ﬁnal step is Skype TCP authentication. SC connects
over TCP to Skype’s central login server (LS) to get a
certiﬁcate that SC uses to authenticate to other Skype nodes.
This exchange involves several messages with the PSH ﬂag
set. The number of messages varies for different LSes and
under different network conditions [47], but they exhibit
characteristic sizes and patterns [5].
Making Skype calls. To make a call, a Skype client uses its
TCP connection with the neighbor supernode (NSN) to ﬁnd
the callee’s IP address and Skype port. The caller then uses
UDP probes to check network connectivity—in particular,
whether its own UDP port is open and whether its host
is behind NAT. If the callee is not behind NAT, then the
caller initiates a TCP connection to the callee and sends the
ringing signal. Finally, if the callee accepts the call, a UDP
connection is established for transferring the call data [47].
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
If the callee is behind NAT, then the caller, using the
SN as a relay, tells the callee to send a UDP packet to the
caller’s IP address/Skype port in order to add a NAT entry
for the call. The call then proceeds as without NAT. If both
the caller and the callee are behind NAT, they use the SN
to send UDP packets to each other. If Skype cannot bypass
NAT/ﬁrewall, the call is handled by a relay and all trafﬁc is
encapsulated in an encrypted TCP stream.
Unrestricted connection (both SCA and SCB have public IP
addresses). After probing multiple peers with UDP probes,
SCA establishes a TCP connection to SCB and sends
several signaling messages over it. This TCP connection is
kept alive until the end of call. Voice and/or video contents
are sent over a UDP connection between SCA and SCB.
NAT/ﬁrewall connection (SCA and/or SCB are located
behind a NAT or a ﬁrewall). In this case, SCA sends the
signaling information to SCB through the SNs. If only
SCA is behind NAT, SCA and SCB are usually able to
establish a direct UDP connection after the signaling [47].
Otherwise, SCA ﬁnds appropriate relay nodes, and SCA
and SCB directly connect to a relay which exchanges trafﬁc
between them. For fault tolerance and backup, several relays
are typically used [47]. Most calls use different relays for
the caller-to-callee and callee-to-caller ﬂows [6].
If the Skype TCP connection used for signaling is closed,
the UDP connection also closes. Furthermore, Skype clients
periodically send Skype UDP pings, which consist of two
keep-alive packets, in order to preserve their “online” status
in the Skype network. These packets can be identiﬁed by
the “0x02” string in their function ﬁeld.
B. Passive detection of Skype trafﬁc
There are many techniques for detecting Skype traf-
ﬁc [1, 5, 6, 10, 47]. They recognize characteristic strings sent
unencrypted during Skype sessions (content analysis) and/or
characteristic trafﬁc patterns such as packet sizes (pattern
analysis). The tests below work against all versions of Skype.
T1: HTTP update messages. When the Skype client (SC)
starts up, it makes an HTTP connection to ui.skype.com to
check for updates to the client software [47].
T2: Login messages. In order to authenticate itself, SC
needs to obtain a certiﬁcate from Skype’s login server (which
could be a Skype supernode) conﬁrming the client’s Skype
identity. Unlike software update messages, logins are not
handled by a single, known server, thus login messages
cannot be easily detected by IP address matching. They can
be recognized, however, by characteristic sizes and contents.
In particular, the second message in a login TCP connection
carries the header 0x170301 in plaintext.
T3: Start of Message (SoM) ﬁelds in UDP packets.
Skype uses special headers, so called SoM ﬁelds, for its
UDP packets [10]. The SoM ﬁelds are present in both UDP
probes and UDP packets carrying the media stream. They
are not encrypted and have speciﬁc values for different
kinds of packets. In particular, ID and Fun ﬁelds are easily
recognizable in a SoM header [10].
The ﬁrst two bytes of SoM contain an ID that uniquely
identiﬁes that message. This value is randomly generated
by the sender and copied in the receiver’s reply. Fun is a 5-
bit ﬁeld obfuscated into the third byte of SoM and revealed
by applying the 0x8f bitmask. Previous research [10, 47]
investigated the values of Fun for different messages. For
instance, ox02, 0x03, 0x07, and 0x0f indicate signaling
messages during the login process and connection manage-
ment, while 0x0d indicates a data message, which may
contain encoded voice or video blocks, chat messages, or
data transfer chunks.
T4: Packet sizes. A UDP probe consists of four packets [1].
The second packet is 11 bytes long, while the length of the
fourth packet reveals the outcome of that UDP probe.
A Skype TCP handshake consists of six messages with
the PSH ﬂag set and payload sizes of 27 and 4 bytes for the
fourth and sixth packets, respectively.
Authentication messages from a Skype client to the login
server include four or more packets with the PSH ﬂag set;
the ﬁrst two have 5-byte payloads.
An HTTP update request returns a single unencrypted
packet from ui.skype.com. This packet has a ﬁxed value in
the ﬁrst 29 bytes for the Linux version of Skype and another
ﬁxed value in bytes 95-124 for the Windows version [47].
T5: Packet timings and rate. Skype audio and video trafﬁc
exhibits a characteristic packet timing pattern, depending on
the codec used. SILK, Skype’s audio codec, samples at 8,
12, 16, or 24 KHz, resulting in four ranges of data rates for
UDP ﬂows carrying Skype audio [47, Fig. 3.6]. While Skype
voice packets are about 150 bytes, video packets are around
1380 bytes. Sample inter-packet gaps and size distribution
for a Skype video call can be found in [47, Fig. 3.10].
T6: NAT traversal. Once SC starts up,
it performs a
sequence of tests to detect whether it is behind NAT or
a ﬁrewall. SCs use different variants of the STUN [50]
protocol for NAT traversal.
T7: Periodic message exchanges. Skype is a P2P system,
and SCs frequently exchanges messages with other Skype
nodes to detetermine their online/ofﬂine status [47]. In par-
ticular, each SC establishes about ﬁve short TCP connections
per hour and performs UDP probes on approximately thirty
Skype peers per hour [47, Fig. 3.4].
task
T8: Typical Skype client behavior. Each typical
performed by a SC, like searching for a contact or placing
a call, generates characteristic trafﬁc (Appendix A-A).
T9: TCP control channel. Skype uses various TCP control
channels. In particular, each call is accompanied by a TCP
signaling connection, described in Appendix A-A, which
remains active during the call.
79
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply.