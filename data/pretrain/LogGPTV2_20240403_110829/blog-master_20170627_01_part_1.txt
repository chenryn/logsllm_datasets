## PostgreSQL 9种索引的原理和应用场景    
### 作者                    
digoal                    
### 日期                    
2017-06-25                   
### 标签                    
PostgreSQL , btree , hash , gin , gist , sp-gist , brin , bloom , rum , zombodb , bitmap       
----                    
## 背景                
PostgreSQL 拥有众多开放特性，例如    
1、开放的数据类型接口，使得PG支持超级丰富的数据类型，除了传统数据库支持的类型，还支持GIS，JSON，RANGE，IP，ISBN，图像特征值，化学，DNA等等扩展的类型，用户还可以根据实际业务扩展更多的类型。    
2、开放的操作符接口，使得PG不仅仅支持常见的类型操作符，还支持扩展的操作符，例如 距离符，逻辑并、交、差符号，图像相似符号，几何计算符号等等扩展的符号，用户还可以根据实际业务扩展更多的操作符。    
3、开放的外部数据源接口，使得PG支持丰富的外部数据源，例如可以通过FDW读写MySQL, redis, mongo, oracle, sqlserver, hive, www, hbase, ldap, 等等只要你能想到的数据源都可以通过FDW接口读写。    
4、开放的语言接口，使得PG支持几乎地球上所有的编程语言作为数据库的函数、存储过程语言，例如plpython , plperl , pljava , plR , plCUDA , plshell等等。用户可以通过language handler扩展PG的语言支持。    
5、开放的索引接口，使得PG支持非常丰富的索引方法，例如btree , hash , gin , gist , sp-gist , brin , bloom , rum , zombodb , bitmap (greenplum extend)，用户可以根据不同的数据类型，以及查询的场景，选择不同的索引。    
6、PG内部还支持BitmapAnd, BitmapOr的优化方法，可以合并多个索引的扫描操作，从而提升多个索引数据访问的效率。    
不同的索引接口针对的数据类型、业务场景是不一样的，接下来针对每一种索引，介绍一下它的原理和应用场景。    
## 一、btree    
### 原理    
[《深入浅出PostgreSQL B-Tree索引结构》](../201605/20160528_01.md)      
### 应用场景    
b-tree适合所有的数据类型，支持排序，支持大于、小于、等于、大于或等于、小于或等于的搜索。    
索引与递归查询结合，还能实现快速的稀疏检索。     
[《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)    
### 例子    
```    
postgres=# create table t_btree(id int, info text);    
CREATE TABLE    
postgres=# insert into t_btree select generate_series(1,10000), md5(random()::text) ;    
INSERT 0 10000    
postgres=# create index idx_t_btree_1 on t_btree using btree (id);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_btree where id=1;    
                                                          QUERY PLAN                                                               
-------------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_t_btree_1 on public.t_btree  (cost=0.29..3.30 rows=1 width=37) (actual time=0.027..0.027 rows=1 loops=1)    
   Output: id, info    
   Index Cond: (t_btree.id = 1)    
   Buffers: shared hit=1 read=2    
 Planning time: 0.292 ms    
 Execution time: 0.050 ms    
(6 rows)    
```    
## 二、hash    
### 原理    
src/backend/access/hash/README    
（hash index entries store only the hash code, not the actual data value, for each indexed item. ）    
### 应用场景    
hash索引存储的是被索引字段VALUE的哈希值，只支持等值查询。    
hash索引特别适用于字段VALUE非常长（不适合b-tree索引，因为b-tree一个PAGE至少要存储3个ENTRY，所以不支持特别长的VALUE）的场景，例如很长的字符串，并且用户只需要等值搜索，建议使用hash index。    
### 例子    
```    
postgres=# create table t_hash (id int, info text);    
CREATE TABLE    
postgres=# insert into t_hash select generate_series(1,100), repeat(md5(random()::text),10000);    
INSERT 0 100    
-- 使用b-tree索引会报错，因为长度超过了1/3的索引页大小  
postgres=# create index idx_t_hash_1 on t_hash using btree (info);    
ERROR:  index row size 3720 exceeds maximum 2712 for index "idx_t_hash_1"    
HINT:  Values larger than 1/3 of a buffer page cannot be indexed.    
Consider a function index of an MD5 hash of the value, or use full text indexing.    
postgres=# create index idx_t_hash_1 on t_hash using hash (info);    
CREATE INDEX    
postgres=# set enable_hashjoin=off;    
SET    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_hash where info in (select info from t_hash limit 1);    
                                                             QUERY PLAN                                                                  
-------------------------------------------------------------------------------------------------------------------------------------    
 Nested Loop  (cost=0.03..3.07 rows=1 width=22) (actual time=0.859..0.861 rows=1 loops=1)    
   Output: t_hash.id, t_hash.info    
   Buffers: shared hit=11    
   ->  HashAggregate  (cost=0.03..0.04 rows=1 width=18) (actual time=0.281..0.281 rows=1 loops=1)    
         Output: t_hash_1.info    
         Group Key: t_hash_1.info    
         Buffers: shared hit=3    
         ->  Limit  (cost=0.00..0.02 rows=1 width=18) (actual time=0.012..0.012 rows=1 loops=1)    
               Output: t_hash_1.info    
               Buffers: shared hit=1    
               ->  Seq Scan on public.t_hash t_hash_1  (cost=0.00..2.00 rows=100 width=18) (actual time=0.011..0.011 rows=1 loops=1)    
                     Output: t_hash_1.info    
                     Buffers: shared hit=1    
   ->  Index Scan using idx_t_hash_1 on public.t_hash  (cost=0.00..3.02 rows=1 width=22) (actual time=0.526..0.527 rows=1 loops=1)    
         Output: t_hash.id, t_hash.info    
         Index Cond: (t_hash.info = t_hash_1.info)    
         Buffers: shared hit=6    
 Planning time: 0.159 ms    
 Execution time: 0.898 ms    
(19 rows)    
```    
## 三、gin    
### 原理    
gin是倒排索引，存储被索引字段的VALUE或VALUE的元素，以及行号的list或tree。    
（ col_val:(tid_list or tid_tree) ， col_val_elements:(tid_list or tid_tree) ）    
[《PostgreSQL GIN索引实现原理》](../201702/20170204_01.md)     
[《宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树 (GIN)》](../201702/20170205_01.md)      
### 应用场景    
1、当需要搜索多值类型内的VALUE时，适合多值类型，例如数组、全文检索、TOKEN。（根据不同的类型，支持相交、包含、大于、在左边、在右边等搜索）    
2、当用户的数据比较稀疏时，如果要搜索某个VALUE的值，可以适应btree_gin支持普通btree支持的类型。（支持btree的操作符）    
3、当用户需要按任意列进行搜索时，gin支持多列展开单独建立索引域，同时支持内部多域索引的bitmapAnd, bitmapOr合并，快速的返回按任意列搜索请求的数据。    
### 例子    
1、多值类型搜索    
```    
postgres=# create table t_gin1 (id int, arr int[]);    
CREATE TABLE    
postgres=# do language plpgsql $$    
postgres$# declare    
postgres$# begin    
postgres$#   for i in 1..10000 loop    
postgres$#     insert into t_gin1 select i, array(select random()*1000 from generate_series(1,10));    
postgres$#   end loop;    
postgres$# end;    
postgres$# $$;    
DO    
postgres=# select * from t_gin1 limit 3;    
 id |                    arr                        
----+-------------------------------------------    
  1 | {128,700,814,592,414,838,615,827,274,210}    
  2 | {284,452,824,556,132,121,21,705,537,865}    
  3 | {65,185,586,872,627,330,574,227,827,64}    
(3 rows)    
postgres=# create index idx_t_gin1_1 on t_gin1 using gin (arr);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gin1 where arr && array[1,2];    
                                                       QUERY PLAN                                                            
-------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.t_gin1  (cost=8.93..121.24 rows=185 width=65) (actual time=0.058..0.207 rows=186 loops=1)    
   Output: id, arr    
   Recheck Cond: (t_gin1.arr && '{1,2}'::integer[])    
   Heap Blocks: exact=98    
   Buffers: shared hit=103    
   ->  Bitmap Index Scan on idx_t_gin1_1  (cost=0.00..8.89 rows=185 width=0) (actual time=0.042..0.042 rows=186 loops=1)    
         Index Cond: (t_gin1.arr && '{1,2}'::integer[])    
         Buffers: shared hit=5    
 Planning time: 0.208 ms    
 Execution time: 0.245 ms    
(10 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gin1 where arr @> array[1,2];    
                                                     QUERY PLAN                                                          
---------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.t_gin1  (cost=7.51..9.02 rows=1 width=65) (actual time=0.022..0.022 rows=0 loops=1)    
   Output: id, arr    
   Recheck Cond: (t_gin1.arr @> '{1,2}'::integer[])    
   Buffers: shared hit=5    
   ->  Bitmap Index Scan on idx_t_gin1_1  (cost=0.00..7.51 rows=1 width=0) (actual time=0.020..0.020 rows=0 loops=1)    
         Index Cond: (t_gin1.arr @> '{1,2}'::integer[])    
         Buffers: shared hit=5    
 Planning time: 0.116 ms    
 Execution time: 0.044 ms    
(9 rows)    
```    
2、单值稀疏数据搜索    
```    
postgres=# create extension btree_gin;    
CREATE EXTENSION    
postgres=# create table t_gin2 (id int, c1 int);    
CREATE TABLE    
postgres=# insert into t_gin2 select generate_series(1,100000), random()*10 ;    
INSERT 0 100000    
postgres=# create index idx_t_gin2_1 on t_gin2 using gin (c1);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gin2 where c1=1;    
                                                         QUERY PLAN                                                              
-----------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.t_gin2  (cost=84.10..650.63 rows=9883 width=8) (actual time=0.925..3.685 rows=10078 loops=1)    
   Output: id, c1    
   Recheck Cond: (t_gin2.c1 = 1)    
   Heap Blocks: exact=443    
   Buffers: shared hit=448    
   ->  Bitmap Index Scan on idx_t_gin2_1  (cost=0.00..81.62 rows=9883 width=0) (actual time=0.867..0.867 rows=10078 loops=1)    
         Index Cond: (t_gin2.c1 = 1)    
         Buffers: shared hit=5    
 Planning time: 0.252 ms    
 Execution time: 4.234 ms    
(10 rows)    
```    
3、多列任意搜索    
```    
postgres=# create table t_gin3 (id int, c1 int, c2 int, c3 int, c4 int, c5 int, c6 int, c7 int, c8 int, c9 int);    
CREATE TABLE    
postgres=# insert into t_gin3 select generate_series(1,100000), random()*10, random()*20, random()*30, random()*40, random()*50, random()*60, random()*70, random()*80, random()*90;    
INSERT 0 100000    
postgres=# create index idx_t_gin3_1 on t_gin3 using gin (c1,c2,c3,c4,c5,c6,c7,c8,c9);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gin3 where c1=1 or c2=1 and c3=1 or c4=1 and (c6=1 or c7=2) or c8=9 or c9=10;    
                                                                                              QUERY PLAN                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.t_gin3  (cost=154.03..1364.89 rows=12286 width=40) (actual time=1.931..5.634 rows=12397 loops=1)    
   Output: id, c1, c2, c3, c4, c5, c6, c7, c8, c9    
   Recheck Cond: ((t_gin3.c1 = 1) OR ((t_gin3.c2 = 1) AND (t_gin3.c3 = 1)) OR (((t_gin3.c4 = 1) AND (t_gin3.c6 = 1)) OR ((t_gin3.c4 = 1) AND (t_gin3.c7 = 2))) OR (t_gin3.c8 = 9) OR (t_gin3.c9 = 10))    
   Heap Blocks: exact=834    
   Buffers: shared hit=867    
   ->  BitmapOr  (cost=154.03..154.03 rows=12562 width=0) (actual time=1.825..1.825 rows=0 loops=1)    
         Buffers: shared hit=33    
         ->  Bitmap Index Scan on idx_t_gin3_1  (cost=0.00..83.85 rows=9980 width=0) (actual time=0.904..0.904 rows=10082 loops=1)    
               Index Cond: (t_gin3.c1 = 1)    
               Buffers: shared hit=6    
         ->  Bitmap Index Scan on idx_t_gin3_1  (cost=0.00..9.22 rows=172 width=0) (actual time=0.355..0.355 rows=164 loops=1)    
               Index Cond: ((t_gin3.c2 = 1) AND (t_gin3.c3 = 1))    
               Buffers: shared hit=8    
         ->  BitmapOr  (cost=21.98..21.98 rows=83 width=0) (actual time=0.334..0.334 rows=0 loops=1)    
               Buffers: shared hit=13    
               ->  Bitmap Index Scan on idx_t_gin3_1  (cost=0.00..7.92 rows=42 width=0) (actual time=0.172..0.172 rows=36 loops=1)    
                     Index Cond: ((t_gin3.c4 = 1) AND (t_gin3.c6 = 1))    
                     Buffers: shared hit=6    
               ->  Bitmap Index Scan on idx_t_gin3_1  (cost=0.00..7.91 rows=41 width=0) (actual time=0.162..0.162 rows=27 loops=1)    
                     Index Cond: ((t_gin3.c4 = 1) AND (t_gin3.c7 = 2))    
                     Buffers: shared hit=7    
         ->  Bitmap Index Scan on idx_t_gin3_1  (cost=0.00..14.38 rows=1317 width=0) (actual time=0.124..0.124 rows=1296 loops=1)    
               Index Cond: (t_gin3.c8 = 9)    
               Buffers: shared hit=3    
         ->  Bitmap Index Scan on idx_t_gin3_1  (cost=0.00..12.07 rows=1010 width=0) (actual time=0.102..0.102 rows=1061 loops=1)    
               Index Cond: (t_gin3.c9 = 10)    
               Buffers: shared hit=3    
 Planning time: 0.272 ms    
 Execution time: 6.349 ms    
(29 rows)    
```    
## 四、gist    
### 原理    
GiST stands for Generalized Search Tree.     
It is a balanced, tree-structured access method, that acts as a base template in which to implement arbitrary indexing schemes.     
B-trees, R-trees and many other indexing schemes can be implemented in GiST.    
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)      
### 应用场景    
GiST是一个通用的索引接口，可以使用GiST实现b-tree, r-tree等索引结构。    
不同的类型，支持的索引检索也各不一样。例如：    
1、几何类型，支持位置搜索（包含、相交、在上下左右等），按距离排序。    
2、范围类型，支持位置搜索（包含、相交、在左右等）。    
3、IP类型，支持位置搜索（包含、相交、在左右等）。    
4、空间类型（PostGIS），支持位置搜索（包含、相交、在上下左右等），按距离排序。    
5、标量类型，支持按距离排序。    
[《PostgreSQL 百亿地理位置数据 近邻查询性能》](../201601/20160119_01.md)      
### 例子    
1、几何类型检索    
```    
postgres=# create table t_gist (id int, pos point);    
CREATE TABLE    