### Field Access and Assignment Overheads

Field accesses are costly, which in turn makes assignments expensive. The left part of Figure 5 illustrates the overhead for Section 2 applications, which are routines frequently used in scientific applications. The overheads range from 23% to 159%.

The right part of Figure 5 shows the overheads for larger, more realistic applications. These applications include a mix of computationally intensive and I/O-bound tasks, aiming to represent real-world scenarios. The overheads vary from 25% for molecular dynamics simulations to 100% for ray tracing applications.

These overheads are lower than initially anticipated. A slowdown of up to a factor of two for a realistic program, while noticeable, may be acceptable in many application domains, especially when considering the added security benefits of information-flow control.

### Related Work

#### Bell and LaPadula Model
Bell and LaPadula [7] introduced the use of a state machine to model security policies that specify security levels for data and access rules for users with different clearance levels. Every system event is mapped to a transition in the state machine, ensuring safety by allowing only transitions to secure states. A secure state is one where the user has adequate clearance to access the data. The model also ensures data integrity by permitting destructive writes only to objects with the same clearance level. Non-destructive writes are allowed to low-clearance processes as long as they do not lead to information leaks.

Bell and LaPadula used an ordered set of labels such as "unclassified," "classified," and "secret." Our work employs a similar fully ordered label scheme, chosen for efficiency reasons, as we calculate labels at runtime.

#### Fenton's Data Mark Machine (DMM)
Fenton’s DMM [20] was an abstract machine that applied the concepts proposed by Bell and LaPadula. However, these early works in information flow were entirely dynamic and thus less effective at detecting implicit flows.

#### Denning and Denning
Denning and Denning [13, 14] were the first to suggest that information flow properties should be enforced statically to prevent label creep. They proposed using a lattice structure for label hierarchy, which is more expressive than the Bell-LaPadula model. Since their analysis was static, it could afford to perform complex label computations without impacting runtime performance. Subsequent work in information flow [19, 27, 28, 29, 3, 4, 6, 10, 9] built on Denning and Denning’s ideas, primarily formalizing their proposals.

#### Recent Developments
More recently, the non-interference property has been studied and formulated in terms of type systems, particularly in pure λ-calculi [1, 2, 23]. Volpano et al. [37, 38] formalized the soundness of Denning’s analysis by developing a type system equivalent to Denning’s rules, proving that this type system observes non-interference. Banerjee and Naumann [5] extended Volpano’s work to include data flow via mutable object fields and control flow in dynamically dispatched method calls, proving non-interference in a richer context with pointers, mutable state, private fields, class-based visibility, dynamic binding, inheritance, casts, and type tests.

Bernardeschi et al. [8] used type-based abstract interpretation, similar to bytecode verification, to prove information flow safety in Java bytecode. They handle implicit flows and use the immediate post-dominator relation to declassify the security label of the execution context. Our approach differs from purely static analysis by combining both dynamic and static techniques, making the analysis more flexible and precise.

#### C Programs and Static Analysis
Several research projects apply static analysis to C programs. Evans’ Split static analyzer [18] takes C source code annotated with "tainted" and "untainted" labels, along with rules for converting between them and specifying function argument types. Shankar et al. [34] use a similar approach but with type qualifiers. The WebSSARI [24] project analyzes information flow in PHP applications statically and inserts runtime guards in potentially insecure regions of code, differing from approaches like Myers’ JFlow and Jif [30, 31] by not requiring source annotations.

#### RIFLE System
RIFLE [35] is a system that tracks information flow dynamically using a combination of hardware and software. The underlying hardware architecture is modified to track information flow labels explicitly. At load time, binaries are rewritten to a new instruction set that appends security labels to instructions, performing data flow and reachability analysis. This converts implicit flows to explicit ones, which can then be tracked by the architecture. RIFLE is the first to use a combination of static and dynamic techniques for information flow analysis.

Our analysis is closest to RIFLE, as we also combine static and dynamic information flow analysis. However, there are significant differences: our solution is software-only and does not require hardware modifications. RIFLE analyzes native binaries, while we use Java bytecode. The high-level semantics and stricter guarantees of Java bytecode allow our analysis to reason more precisely about program behavior compared to the conservative analysis of native binaries.

### Summary and Conclusion

Our information-flow framework demonstrates that by integrating statically gathered information with dynamic information flow techniques, one can enhance the intelligence of dynamic analysis regarding implicit flows while maintaining flexibility. We minimized runtime overhead during implementation, resulting in execution times that, even for large applications, do not exceed double the original. Such overhead may be acceptable in security-sensitive contexts.

While we aimed to minimize the impact of label calculations, we relied on standard compiler optimizations. Future work will investigate specific compiler techniques to further reduce the overhead of label computations. We are confident that dedicated compiler optimizations can further reduce the cost of information flow for the Java Virtual Machine. We hope the Java community will embrace these techniques to make Java even safer.

### Acknowledgements

This research was partially funded by the United States Homeland Security Advanced Research Projects Agency (HSARPA) and Air Force Research Laboratory (AFRL) under agreement number FA8750-05-2-0216, and by the National Science Foundation (NSF) under grant CT-ISG-0627747. The views and conclusions are those of the authors and do not necessarily represent the official policies or endorsements of HSARPA, AFRL, NSF, or any other U.S. Government agency.

### References
[References section remains unchanged]

This revised version aims to improve clarity, coherence, and professionalism, making the text more accessible and easier to understand.