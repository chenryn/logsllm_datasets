1.97%
1.66%
1.62%
1.52%
1.33%
61.17%
ASN
14061
4134
18881
17974
4837
45758
20473
53246
16276
31034
—
Correct
Name
DigitalOcean, LLC
No.31,Jin-rong Street
TELEFÔNICA BRASIL S.A
PT Telekomunikasi Indonesia
CHINA UNICOM China169 Backbone
Triple T Internet/Triple T Broadband
Choopa, LLC
Cyber Info Provedor de Acesso LTDA ME
OVH SAS
Aruba S.p.A.
All others (count: 2759)
Percent
7.47%
6.65%
4.52%
2.77%
2.40%
2.10%
1.82%
1.79%
1.56%
1.45%
59.06%
Table 4: Most popular ASNs for proxies listed on aggregator sites (left), proxies capable of accepting connections (center), and proxies that
forwarded correct content at least once (right).
2xx HTTP response code that indicates success (i.e., in [200, 299]).
For each such proxy, we determine its failure rate, which we define
as 1 − success rate. That is, a proxy’s failure rate is the fraction of
returned responses that constitute unexpected content.
Figure 7 shows the cumulative distribution (y-axis) of these
proxies’ failure rates (x-axis). Of proxies that respond to proxy
requests with 2xx HTTP success codes, we find that 92.0% consis-
tently deliver the expected content. Alarmingly, approximately
8% of the proxies at least sometimes provided unexpected
content, and 3.6% of the proxies consistently returned unex-
pected content—all with HTTP response codes that indicate suc-
cess. In §6 and §7, we explore cases in which the content has been
purposefully and maliciously manipulated—for example, to return
a trojan .exe file or to insert spurious ads in retrieved HTML con-
tent. Further, as shown in Figure 3, the behavior of proxies—that is,
whether they returned expected or unexpected content—does not
significantly vary with the location of the requesting client.
5.3 Anonymity
Open proxies are sometimes used as a simple method of hiding
a user’s IP address. We find that such a strategy is mostly inef-
fective, with nearly two-thirds of tested proxies exposing the
requestor’s IP address.
In more detail, we inspect the HTTP request headers that are
sent by a proxy to the destination webserver. These include the
headers added by our client toolchain (specifically: User-Agent
and Accept) and those inserted by the proxy. To accomplish this,
we constructed and hosted a simple web application that records
HTTP request headers. We then examined the request headers that
were produced when we used a client at Georgetown University
to access our web application through each proxy. Of the proxies
Apr 152018Apr 22Apr 29May 6May 13May 20May 27010k20k30k40k50kProxies listedApr 152018Apr 22Apr 29May 6May 13May 20May 27Jun 3010002000300040005000HTTPCONNECTSOCKSTotalWorking proxiesap-northeast-1aap-northeast-2cap-south-1aap-southeast-1aap-southeast-2bca-central-1beu-central-1beu-west-1ceu-west-2aeu-west-3cGeorgetown Universitysa-east-1aus-east-1cus-east-2bus-west-1aus-west-2b1002003004005006007008009001000Number of Fetches (x1000)Total FetchesExpectedUnexpected256ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
A. Mani et al.
Figure 4: Proxy ports, by
popularity.
Figure 5: Proxy goodput (log-scale). Box plots depict the
range of proxies’ average goodput over its daily requests. The
box depicts the IQR with the median; the whiskers denote
1.5 × IQR. Points beyond the whiskers are outliers.
Figure 6: Proxy success rates and average
goodput (log-scale). The highlighted oval
denotes the densest region of the graph.
simplicity, we focus on the HTML pages fetched through the client
at Georgetown University. We observe a median of 1,133 successful
requests (i.e., completed requests with 2xx HTTP response code)
per day.
Overall, we find that 10.5% of requests for HTML pages pro-
duced unexpected HTML content.
As noted above, not all unexpected content necessarily corre-
sponds to malicious behavior. Since the observed fraction of un-
expected HTML content is almost the same for each day of our
measurement study, we perform an in-depth analysis for a random
day, 2018-05-07, to determine whether the HTML manipulation
could be categorized as malicious. On that date, we observe re-
quests through 1,259 proxies, of which 169 (about 13.4%) return
unexpected HTML content. (We discard requests that did not yield
2xx success HTTP response codes.)
We manually analyze these 169 modified HTML files. Our method-
ology is as follows. First, we inspect each file and divide them into
two categories: benign (non-malicious) files and suspicious files.
The latter category represents HTML files that contain Javascript
code (either directly in the file or through the inclusion of an exter-
nal Javascript file).
We then collectively inspect each of these benign and suspicious
files and classify them into five benign classes and four non-benign
classes. This inspection process involves manually examining the
files, rendering them in a browser on a virtual machine, and poten-
tially visiting Javascript URLs that were inserted. The five classes
that we posit do not indicate maliciousness are as follows:
• Equivalent: the fetched HTML renders equivalently in a web
browser to the expected content. Oddly, we found instances
in which HTML tag attributes were inconsequentially re-
ordered; for instance, tags such as 
are rewritten as .
• Misconfiguration: the retrieved content constituted error
pages, often displaying “not accessible” messages.
• No Content: the page contained no content.
• Truncated: the retrieved page was a truncated version of the
expected content.
• Unauthorized: the pages showed error messages such as “in-
valid user” or “access denied”.
The identified classes of proxy misbehavior are:
Figure 7: Cumulative distribution of the proxies’ failure rate (i.e.,
the fraction of responses that constituted unexpected content).
Figure 8: Classification of modified HTML retrieved on 2018-05-07.
that were able to connect to our web application (13,740), we found
that 66.08% (9,079) inserted at least one header (most commonly,
X-Forwarded-For) that contained the IP address of our client.
6 HTML MANIPULATION
We begin our study of malicious behavior among open proxies
by considering the manipulation of fetched HTML content. In the
absence of end-to-end SSL/TLS (i.e., the use of HTTPS), a malicious
proxy can trivially either modify the web server’s response or
respond with arbitrary content of its choosing.
To detect such misbehavior, we fetch an HTML page via the
open proxies each day between 2018-05-04 and 2018-05-31. For
Port 808034.5%Port 312817%Port 2018313.3%Port 807.5%Port 532814.82%All others (883 ports)22.9%2018-04-122018-04-132018-04-142018-04-152018-04-162018-04-172018-04-182018-04-192018-04-202018-04-212018-04-222018-04-232018-04-242018-04-252018-04-262018-04-272018-04-282018-04-292018-04-302018-05-012018-05-022018-05-032018-05-042018-05-052018-05-062018-05-072018-05-082018-05-092018-05-102018-05-112018-05-122018-05-132018-05-142018-05-152018-05-162018-05-172018-05-182018-05-192018-05-202018-05-212018-05-222018-05-232018-05-242018-05-252018-05-262018-05-272018-05-282018-05-292018-05-302018-05-31510002510k25100k251M2510MGoodput (Bps)510002510k25100k251M00.20.40.60.81    Goodput (Bps)Success rate00.10.20.30.40.50.60.70.80.910.80.850.90.951Fraction of Incorrect ResponsesCumulative DistributionEquivalentMisconﬁgurationNoContentTruncatedUnauthorizedAdInjectionCryptojackingOriginal+AdInjectionPotentialEavesdroppingUnlabeled0306090CountBenignNotBenignUnabletoDetermine0.017.7535.553.25Percentage257An Extensive Evaluation of the Internet’s Open Proxies
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
',
Figure 9: Injected HTML code with link to remote cryptojacking
Javascript. The user identifier has been redacted.
• Ad Injection: the proxy replaced HTML content with Javascript
that rendered extraneous advertisements.
• Original + Ad Injection: the returned HTML contained the
expected content, but also included a single ad injection.
• Cryptojacking: the returned HTML include Javascript code
that would cause the user’s browser to mine cryptocurrencies
on behalf of the proxy.
• Potential Eavesdropping: the retrieved page contained Javascript
that caused the user’s browser to visit pages from its history,
potentially revealing these pages to the proxy if they were
previously visited without the use of the proxy.
The classifications of the modified HTML files with their counts
and percentages are shown in Figure 8. We were unable to classify
six HTML responses, described in the Figure as “Unlabeled”.
Overall, we find that approximately 80% of the unexpected HTML
responses are benign. Approximately 72% of the pages contained
errors, likely due to private access proxies or due to misconfigured
proxy software.
We find that 16.6% of unexpected HTML responses (and
2.2% of overall proxy requests for HTML content) correspond
to malicious activity, including ad injection, cryptojacking,
and eavesdropping. Among the malicious activity, most promi-
nent (13%) is ad injection.
Perhaps most interestingly, we find that about 3% of the files
include Javascript that performs cryptojacking—that is, the unau-
thorized use of the proxy user’s processor to mine cryptocurrencies
in the background. Upon further inspection, we determined that
each such instance uses the same injected Javascript code, shown
in Figure 9.
The referenced min.js script is obfuscated Javascript. After de-
coding it, we determined that it is similar to Coinhive’s [4] Monero2
cryptocurrency [8] mining Javascript. The 64 character long argu-
ment to the Client constructor serves as the identifier for the user
to be paid in the original Coinhive setting. (We redact this argu-
ment in Figure 9 because it potentially identifies a criminal actor.)
Finally, we note that all Coinhive endpoints described in the copied
Coinhive script are replaced with other domains, indicating that
whoever is running the infrastructure to collect the mining results
is not using Coinhive’s service.
7 FILE MANIPULATION
Over the duration of our 50 day experiment, we made more than
4.8M successful requests through 21,385 proxies to fetch a variety
of non-HTML files (specifically, Windows .exe, Java .jar, Flash, .zip,
2Monero is advertised as a “secure, private, and untraceable” cryptocurrency [8].
Figure 10: Per day total requests (top), unexpected responses and ma-
licious responses (middle), and percentage of malicious responses
relative to total responses (bottom).
and Windows .bat files). As before, we define a successful request to
be one in which the proxy returns a 2xx HTTP response code and
a non-zero content size. Furthermore, we exclude HTML, plaintext,
and PHP responses (as determined by filemagic) from our analysis
to avoid uninteresting instances of error pages or unauthorized
access pages (see §6).
Figure 10 (top) shows the frequency of total successful requests
made per day, averaging approximately 97K requests per day through-
out the measurement period. Overall, 29,484 (0.61%) of such requests
(made by 6.76% of the proxies), constitute unexpected content.
To check whether unexpected content is malicious, we submitted
all 29,484 unexpected responses to VirusTotal [14] for scanning.
VirusTotal scans uploaded files using multiple antivirus tools and
returns detailed analysis results, including the uploaded files deter-
mined file types. Table 5 provides a summary of our findings. Each
entry for a given request and response type (determined by Virus-
Total) indicates the fraction of responses with unexpected content
that were flagged as malicious by VirusTotal. Note that VirusTotal
(correctly) determined various responses to be HTML that were
wrongly classified as non-HTML by filemagic in our initial pass of
filtering out HTML pages.
To establish a baseline, we verified that all of the expected re-
sponses are not classified by VirusTotal as being malicious. That
is, no single antivirus tool used by VirusTool marks the expected
content as being malicious, as expected.
On the contrary, VirusTotal flags 32.84% (9,682/29,484) of the
unexpected responses as malicious; that is, at least one of the an-
tivirus systems used by VirusTotal flags the content as malicious.
Figure 10 (middle) shows the number of unexpected and malicious
responses per day. The percentage of malicious responses (rela-
tive to total success successful fetches per day) remained fairly
consistent throughout our study (Figure 10 (bottom)). Across our
experiment period, we find that, on average, 0.2% of daily
proxy responses are classified as malicious by at least one
antivirus system used by VirusTotal.
050100150200Count (x1000)Total fetches050010001500CountUnexpected ContentMaliciousApr 18, 18Apr 25, 18May 02, 18May 09, 18May 16, 18May 23, 18May 30, 180.00.10.20.30.40.5PercentageMalicious Percentage258ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
A. Mani et al.
Requested
File Type
EXE
Flash
JAR
ZIP
TEXT
BAT
Return File Type (VirusTotal)
EXE
6614/6713
-
-
-
-
-
Flash
-
0/1546
-
-
-
-
JAR
-
-
0/1075
-
-
-
ZIP
-
-
2/400
12/4162
-
-
HTML
410/423
352/362
338/351
380/395
436/446
556/574
ISO
-
-
-
-
545/545
-
GZIP XML Unknown
0/39
0/3
0/2
0/18
0/2
0/98
12/234
0/32
0/55
0/176
23/10910
2/719
0/34
0/34
0/34
0/34
0/34
0/34
Table 5: Requested file types and various response file types determined by VirusTotal for unexpected responses. Each entry for a given request
and response file type shows the fraction of malicious responses.
No. of antivirus
systems flagging
as malicious
No. of Files
0
1
2