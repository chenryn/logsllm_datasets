ˆr
ˆAn = U′′
||Σ′′
ˆr V′′∗
||
(13)
By doing so, ˆAn ceases to be a block-wise Hankel matrix but be-
comes one with the rank ˆr. As we assumed, the estimated rank ˆr is
small and satisfies ˆr ≪ q  0.
Algorithm 3 Results Verification of SVD for each loop
Input: U′, Σ′, V′ and ˜A′
n.
Output: "Accept" or "Reject".
for all j = 1 to l do
1: Uniformly generate a random vector rj ∈ {0, 1}q
2: Test U′Σ′(V′rj )
if False then
= ˜A′
?
nrj
3: Return "Reject".
end if
end for
4: Return "Accept".
Algorithm 4 Batched Validation of Data Consistency Projection
Input: τ , τ0; Mk, ˆN and ˆx′
, ∀k.
Output: "Accept" or "Reject".
3: Compute ψ =(cid:80)τ
1: τ = min(τ0, τ )
2: Generate random numbers: (tk )k =1,2, ...τ ∈ {0, 1}l′
, ζ =(cid:80)τ
k
k =1 tk ˆx′
k
k =1 tk Mk
?
4: Test ˆNψ
= ζ
if False then
5: Return "Reject".
end if
6: Return "Accept".
2 + u1 (vT
2 and outsources ˆx′
n = ˆxn + R2 = ˆxn + u2v∗
The DO can firstly generate two random matrices R1 ∈ Rs×s
and R2 ∈ Cs×t according to the construction of Equation (17),
where s = Nx and t = Ny Nc. Then the DO can mask the ma-
and pre-store the ˆN on the CS.
trix N by ˆN = N + R1 = N + u1vT
1
Similarly, once there comes an estimate ˆxn, the DO can mask it
as ˆx′
n to the CS. The
CS will execute the computation of ˆNˆx′
n. Meanwhile, the DO can
compute s0 = (Nu2)v∗
1 ˆx′
1 u2)v∗
2 − x0 and s1 = u1 (vT
n ).
The most expensive operation in both of the term is matrix-vector
multiplication, which saves much local computational overhead.
Furthermore, the matrix s0 can be precomputed if the R1 and R2 is
acquired before the iteration.
After receiving Mn = ˆNˆx′
n from the CS, the DO can compute:
(18)
The DO is in control of the current estimate xn+1 and previous
estimate xn, it can decide whether to stop the iterations by checking
whether they are close enough. Note that the matrix multiplication
of D†y can be done in the same way at very beginning, i.e. additively
transform D† and y and outsource it to the CS. A summary of this
method is given in Algorithm 2.
xn+1 = Mn − s0 − s1
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea5424.4 Correctness Verification
According to the threat model, we consider the case that the CS can
maliciously deviate from the protocol. During several consecutive
rounds, the CS should return a set of matrices which may contain
fake results. This may prevent the computation from convergence
in τ times of iterations, where τ is the parameter indicating the
maximum allowable number of iterations. Accordingly, the DO
needs to verify the correctness of the results in each round of the
iteration. In Section 4.1, the intuitive method is to compute the
U′′Σ′′V
′′∗ and compare the results with An. However, the matrix
multiplication could incur undesirable time cost. Alternatively, the
DO can use the well-known Freivalds’ algorithm [8, 19] by running
l rounds of tests in each iteration (See Algorithm 3). Meanwhile, we
notice that the matrix multiplication in Section 4.3 always involve
the same matrix N if the masking matrix R2 is fixed. The DO can
alternatively validate the results in Section 4.3 by batch tests (See
Algorithm 4). We assume that main iteration may converge in τ0
rounds or exceed τ before entering Algorithm 4. In Theorem 4.1
and Theorem 4.2, we gives the effectiveness of Algorithm 3 and
Algorithm 4.
Theorem 4.1. If the CS returns a false result, the probability that
the result passes the Algorithm 3 is 1
2l .
Theorem 4.2. If the CS returns a false result, the probability that
the result passes the Algorithm 4 is 1
2l′ .
Proof. Please refer to the Appendix A.1 and A.2.
□
5 SECSAKE II: SYSTEM DESIGN
SecSAKE I only requires one single server to achieve the goals of se-
curity, its efficiency is highly dependent on the number of iterations.
The DO has to stay online, while managing to encrypt, decrypt
and interact with the CS in each iteration until the convergence is
reached. In SecSAKE II, we propose to involve several more inde-
pendent cloud servers, called executor and shareholders, who can
communicate with each other and separately fulfill the computation
tasks without leaking the information of imaging data. The DO
only participates in the first iteration and distributes the imaging
data in a privacy-preserving manner, which can save much com-
putational overhead. A concise system overview has been given in
Section 3.1. In this section, we directly describe the protocol at each
party’s view and show the correctness of the protocol afterwards.
5.1 Data Owner: Preparation
In this step, the DO generates and allocates all the required input
to the CS. We assume the sampling operator D, the sliding window
size w and the estimated rank ˆr have all been determined before
processing the computation. The first estimate of data in the k-
space domain from the acquired data is still set as x0 = D†y. An
illustration of the required operations is given in Figure 3.
Early Encryption: After projecting the data onto the block-wise
Hankel matrix A0 = Hw (x0), the DO will manage to encrypt the
0. Then ˜A′
A0 in exactly the same way as in Section 4.1 to obtain ˜A′
0
is sent to the executor.
Key Distribution: Denote the collection of involved key value and
matrices as K1 = (P1, Q1). Both the first round key K1, the sampling
Figure 3: SecSAKE II: Preparation Procedures on the Data
Owner Side
0 are kept secret by the DO.
matrix D and the estimated rank ˆr are sent to every shareholders.
Note that the factors η0 and η′
Image Splitting: Similar with the splitting procedure [22], the
DO also additively splits the x0 in k-space domain into three shares
of matrices. Specifically, given the construction of Equation (17),
two random matrices G1 and G2 can be efficiently generated to
hide x0. To create the convenience of the protocol design, the fac-
tor δ = |η0η′
0| will be multiplied to the shares. Finally, the three
shares of matrices x0 can be represented by C1 = δG1, C2 = δG2
and C3 = δ (x0 − G1 − G2), which are then distributed to the three
shareholders, respectively.
5.2 Executor: SVD Computation and Results
Distribution
As shown in Figure 4, the executor can be considered as a hub among
all the cloud servers and it is supposed to shoulder the following
responsibilities:
Singular Value Decomposition: After obtaining the encrypted
data matrix ˜A′
n from the DO, the executor will compute the SVD
by any method and get U′, Σ′ and V′. Without the access to any
part of K1, the executor cannot gain any advantages over what it
has in the protocol proposed in Section 4.1 so far. It is suggestive
that the executor cannot proceed to further computation tasks.
Re-encryption: The executor then needs to seek help from the
shareholders, named shareholdes I, shareholder II and shareholder
III, respectively. In light of the fact that each of them possesses
K1, it is necessary to transform results of SVD before distributing
them. Particularly, the executor initializes the random matrices
Z1 ∈ Cs×s and Z2 ∈ Cs×t and hides the left-singular matrix U′ and
right-singular matrix V′, respectively. More precisely, we denote:
U′
1 = U′ + Z1,U′
V′
1 = V′ + Z2,V′
Results Distribution: The tuple (U′
1
2 = U′ − Z1
2 = V′ − Z2
, V′
1
, V′
2
, Σ′) is sent to shareholder
I and another tuple (U′
, Σ′) is sent to shareholder II. Since the
2
random matrices Z1 and Z2 are not correlated with K1, this step
cannot disclose any information of U′′ and V′′ to either shareholder I
or shareholder II according to Equation (17). Meanwhile, the executor
sends the matrices Z1 and Z2 to shareholder III.
(19)
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea543Figure 4: SecSAKE II: The Procedures of Computation in the CS within One Iteration
5.3 Shareholders: Parallel Processing and
Cooperative Encryption
Upon receiving the input from the executor and DO, the three in-
dependent shareholders will securely conduct the rest computation
tasks in a loop. In addition, they should bear the encryption of the
data before releasing it to the executor. According to the involved
operations, this stage can be organized into three consecutive steps
in a sequence. All the involved operations can be operated in a
parallel manner among the three shareholders. We firstly describe
these operations and leave the correctness of the algorithm behind.
An illustration to this step is also presented in Figure 4.
and V′
1
K-space data Generation:
In this step, both shareholder I and
shareholder II are supposed to securely execute the low-rankness