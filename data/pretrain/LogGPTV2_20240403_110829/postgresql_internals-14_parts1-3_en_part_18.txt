pinnedbuffer.
Butifitisexactlythisbufferthatisrequired,theprocessjoinsthequeueandwaits
forexclusiveaccesstothisbuffer. Anexampleofsuchanoperationisvacuuming
withfreezing.1 p.
Oncethecursorclosesormovesontoanotherpage,thebuffergetsunpinned. In
thisexample,ithappensattheendofthetransaction:
=> COMMIT;
=> SELECT * FROM buffercache('cacheme');
bufferid | relfork | relblk | isdirty | usagecount | pins
−−−−−−−−−−+−−−−−−−−−+−−−−−−−−+−−−−−−−−−+−−−−−−−−−−−−+−−−−−−
268 | main | 0 | t | 3 | 0
310 | vm | 0 | f | 2 | 0
(2 rows)
Page modifications are protected by the same pinning mechanism. For example,
let’sinsertanotherrowintothetable(itwillgetintothesamepage):
=> INSERT INTO cacheme VALUES (2);
=> SELECT * FROM buffercache('cacheme');
bufferid | relfork | relblk | isdirty | usagecount | pins
−−−−−−−−−−+−−−−−−−−−+−−−−−−−−+−−−−−−−−−+−−−−−−−−−−−−+−−−−−−
268 | main | 0 | t | 4 | 0
310 | vm | 0 | f | 2 | 0
(2 rows)
1 backend/storage/buffer/bufmgr.c,LockBufferForCleanupfunction
171
Chapter9 BufferCache
Postgredoesnotperformanyimmediatewritestodisk: apageremainsdirty
inthebuffercacheforawhile,providingsomeperformancegainsforbothreads
andwrites.
9.4 Cache Misses
Ifthehashtablehasnoentryrelatedtothequeriedpage,itmeansthatthispage
isnotcached.Inthiscase,anewbufferisassigned(andimmediatelypinned),the
pageisreadintothisbuffer,andthehashtablereferencesaremodifiedaccordingly.
Let’srestarttheinstancetoclearitsbuffercache:
postgres$ pg_ctl restart -l /home/postgres/logfile
Anattempttoreadapagewillresultinacachemiss,andthepagewillbeloaded
intoanewbuffer:
=> EXPLAIN (analyze, buffers, costs off, timing off, summary off)
SELECT * FROM cacheme;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on cacheme (actual rows=2 loops=1)
Buffers: shared read=1 dirtied=1
Planning:
Buffers: shared hit=15 read=7
(4 rows)
Instead of hit, the plan now shows the read status, which denotes a cache miss.
p. Besides,thispagehasbecomedirty,asthequeryhasmodifiedsomehintbits.
Abuffercachequeryshowsthattheusagecountforthenewlyaddedpageissetto
one:
=> SELECT * FROM buffercache('cacheme');
bufferid | relfork | relblk | isdirty | usagecount | pins
−−−−−−−−−−+−−−−−−−−−+−−−−−−−−+−−−−−−−−−+−−−−−−−−−−−−+−−−−−−
98 | main | 0 | t | 1 | 0
(1 row)
172
9.4 CacheMisses
Thepg_statio_all_tablesviewcontainsthecompletestatisticsonbuffercacheusage
bytables:
=> SELECT heap_blks_read, heap_blks_hit
FROM pg_statio_all_tables
WHERE relname = 'cacheme';
heap_blks_read | heap_blks_hit
−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−
2 | 5
(1 row)
Postgreprovidessimilarviewsforindexesandsequences.Theycanalsodisplay
statisticson/operations,butonlyiftrack_io_timing isenabled. off
Buffer Search and Eviction
Choosingabufferforapageisnotsotrivial.1 Therearetwopossiblescenarios:
1. Rightaftertheserverstartallthebuffersareemptyandareboundintoalist.
Whilesomebuffersarestillfree,thenextpagereadfromdiskwilloccupythe
firstbuffer,anditwillberemovedfromthelist.
Abuffer can return to the list2 only if its page disappears,without being re-
placedbyanotherpage.Itcanhappenifyoucallorcommands,
orifthetableistruncatedduringvacuuming.
2. Sooner or later no free buffers will be left (since the size of the database is
usuallybiggerthanthememorychunkallocatedforcache). Thenthebuffer
managerwillhavetoselectoneofthebuffersthatisalreadyinuseandevict
thecachedpagefromthisbuffer. Itisperformedusingtheclocksweepalgo-
rithm,whichiswellillustratedbytheclockmetaphor. Pointingtooneofthe
buffers,theclockhandstartsgoingaroundthebuffercacheandreducesthe
usagecountforeachcachedpagebyoneasitpasses.Thefirstunpinnedbuffer
withthezerocountfoundbytheclockhandwillbecleared.
1 backend/storage/buffer/freelist.c,StrategyGetBufferfunction
2 backend/storage/buffer/freelist.c,StrategyFreeBufferfunction
173
Chapter9 BufferCache
Thus,theusagecountisincrementedeachtimethebufferisaccessed(thatis,
pinned),andreducedwhenthebuffermanagerissearchingforpagestoevict.
Asaresult,theleastrecentlyusedpagesareevictedfirst,whilethosethathave
beenaccessedmoreoftenwillremaininthecachelonger.
Asyoucanguess,ifallthebuffershaveanon-zerousagecount,theclockhand
hastocompletemorethanonefullcirclebeforeanyofthemfinallyreaches
the zero value. To avoid running multiple laps,Postgre limits the usage
countby.
Oncethebuffertoevictisfound,thereferencetothepagethatisstillinthis
buffermustberemovedfromthehashtable.
p. Butifthisbufferisdirty,thatis,itcontainssomemodifieddata,theoldpage
cannotbesimplythrownaway—thebuffermanagerhastowriteittodiskfirst.
freebuffers
clockhand
Thenthebuffermanagerreadsanewpageintothefoundbuffer—nomatterifit
hadtobeclearedorwasstillfree.Itusesbuffered/forthispurpose,sothepage
willbereadfromdiskonlyiftheoperatingsystemcannotfinditinitsowncache.
Thosedatabasesystemsthatusedirect/anddonotdependonthecachedifferentiate
betweenlogicalreads(from,thatis,fromthebuffercache)andphysicalreads(from
174
9.5 BulkEviction
disk).FromthestandpointofPostgre,apagecanbeeitherreadfromthebuffercache
orrequestedfromtheoperatingsystem,butthereisnowaytotellwhetheritwasfound
inorreadfromdiskinthelattercase.
Thehashtableisupdatedtorefertothenewpage,andthebuffergetspinned.Its
usage count is incremented and is now set to one, which gives this buffer some
timetoincreasethisvaluewhiletheclockhandistraversingthebuffercache.
9.5 Bulk Eviction
Ifbulkreadsorwritesareperformed,thereisariskthatone-timedatacanquickly
oustusefulpagesfromthebuffercache.
Asaprecaution,bulkoperationsuserathersmallbufferrings,andevictionisper-
formedwithintheirboundaries,withoutaffectingotherbuffers.
Alongsidethe“bufferring,”thecodealsousestheterm“ringbuffer”.However,thissynonym
isratherambiguousbecausetheringbufferitselfconsistsofseveralbuffers(thatbelong
tothebuffercache).Theterm“bufferring”ismoreaccurateinthisrespect.
Abufferringofaparticularsizeconsistsofanarrayofbuffersthatareusedone
afteranother.Atfirst,thebufferringisempty,andindividualbuffersjoinitoneby
one,afterbeingselectedfromthebuffercacheintheusualmanner.Theneviction
comesintoplay,butonlywithintheringlimits.1
Buffers added into a ring are not excluded from the buffer cache and can still be
usedbyotheroperations. Soifthebuffertobereusedturnsouttobepinned,or
its usage count is higher than one, it will be simply detached from the ring and
replacedbyanotherbuffer.
Postgresupportsthreeevictionstrategies.
Bulkreadsstrategy isusedforsequentialscansoflargetablesiftheirsizeexceeds
1 ofthebuffercache.Theringbuffertakesk(standardpages).
4
1 backend/storage/buffer/freelist.c,GetBufferFromRingfunction
175
Chapter9 BufferCache
Thisstrategydoesnotallowwritingdirtypagestodisktofreeabuffer;instead,
thebufferisexcludedfromtheringandreplacedbyanotherone. Asaresult,
readingdoesnothavetowaitforwritingtocomplete,soitisperformedfaster.
Ifitturnsoutthatthetableisalreadybeingscanned,theprocessthatstarts
another scan joins the existing buffer ring and gets access to the currently
availabledata,withoutincurringextra/operations.1 Whenthefirstprocess
completesthescan,thesecondonegetsbacktotheskippedpartofthetable.
Bulkwritesstrategy isappliedby,,and-
  commands,as well as by those  flavors that cause
table rewrites. The allocated ring is quite big, its default size being  
( standard pages), but it never exceeds 1 of the total size of the buffer
8
cache.
Vacuumingstrategy is used by the process of vacuuming when it performs a full
table scan without taking the visibility map into account. The ring buffer is
assignedkof(standardpages).
Buffer rings do not always prevent undesired eviction. If  or  com-
mandsaffectalotofrows,theperformedtablescanappliesthebulkreadsstrategy,
but since the pages are constantly being modified, buffer rings virtually become
useless.
p. Anotherexampleworthmentioningisstoringoversizeddataintables. In
spiteofapotentiallylargevolumeofdatathathastoberead,toastedvaluesare
alwaysaccessedviaanindex,sotheybypassbufferrings.
Let’stakeacloserlookatthebulkreadsstrategy. Forsimplicity,wewillcreatea
tableinsuchawaythataninsertedrowtakesthewholepage.Bydefault,thebuffer
cachesizeis,pages,keach.Sothetablemusttakemorethanpages
forthescantouseabufferring.
=> CREATE TABLE big(
id integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
s char(1000)
) WITH (fillfactor = 10);
1 backend/access/common/syncscan.c
176
9.5 BulkEviction
=> INSERT INTO big(s)
SELECT 'FOO' FROM generate_series(1,4096+1);
Let’sanalyzethetable:
=> ANALYZE big;
=> SELECT relname, relfilenode, relpages
FROM pg_class
WHERE relname IN ('big', 'big_pkey');
relname | relfilenode | relpages
−−−−−−−−−−+−−−−−−−−−−−−−+−−−−−−−−−−
big | 16546 | 4097
big_pkey | 16551 | 14
(2 rows)
Restarttheservertoclearthecache,asnowitcontainssomeheappagesthathave
beenreadduringanalysis.
postgres$ pg_ctl restart -l /home/postgres/logfile
Oncetheserverisrestarted,let’sreadthewholetable:
=> EXPLAIN (analyze, costs off, timing off, summary off, summary off)
SELECT id FROM big;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on big (actual rows=4097 loops=1)
(1 row)
Heappagestakeonlybuffers,whichmakeupthebufferringforthisoperation:
=> SELECT count(*)
FROM pg_buffercache
WHERE relfilenode = pg_relation_filenode('big'::regclass);
count
−−−−−−−
32
(1 row)
Butinthecaseofanindexscanthebufferringisnotused:
177
Chapter9 BufferCache
=> EXPLAIN (analyze, costs off, timing off, summary off, summary off)
SELECT * FROM big ORDER BY id;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using big_pkey on big (actual rows=4097 loops=1)
(1 row)
As a result, the buffer cache ends up containing the whole table and the whole
index:
=> SELECT relfilenode, count(*)
FROM pg_buffercache
WHERE relfilenode IN (
pg_relation_filenode('big'),
pg_relation_filenode('big_pkey')
)
GROUP BY relfilenode;
relfilenode | count
−−−−−−−−−−−−−+−−−−−−−
16546 | 4097
16551 | 14
(2 rows)
9.6 Choosing the Buffer Cache Size
128MB Thesizeofthebuffercacheisdefinedbytheshared_buffersparameter. Itsdefault
valueisknowntobelow,soitmakessensetoincreaseitrightafterthePostgre
installation.Youwillhavetoreloadtheserverinthiscasebecausesharedmemory
isallocatedforcacheattheserverstart.
Buthowcanwedetermineanappropriatevalue?
Evenaverylargedatabasehasalimitedsetofhotdatathatisbeingusedsimulta-
neously.Intheperfectworld,itisthissetthatmustfitthebuffercache(withsome
spacebeingreservedforone-timedata). Ifthecachesizeissmaller,theactively
usedpageswillbeevictingeachotherallthetime,thusleadingtoexcessive/op-
erations.Butthoughtlessincreaseofthecachesizeisnotagoodideaeither: 
isascarceresource,andbesides,largercacheincurshighermaintenancecosts.
178
9.6 ChoosingtheBufferCacheSize
Theoptimalbuffercachesizediffersfromsystemtosystem: itdependsonthings
likethetotalsizeoftheavailablememory,dataprofiles,andworkloadtypes. Un-
fortunately,thereisnomagicvalueorformulatosuiteveryoneequallywell.
YoushouldalsokeepinmindthatacachemissinPostgredoesnotnecessarily
trigger a physical / operation. If the buffer cache is quite small, the  cache
usestheremainingfreememoryandcansmooththingsouttosomeextent. But
unlikethedatabase,theoperatingsystemknowsnothingaboutthereaddata,so
itappliesadifferentevictionstrategy.
Atypicalrecommendationistostartwith 1 ofandthenadjustthissettingas
4
required.
Thebestapproachisexperimentation: youcanincreaseordecreasethecachesize
andcomparethesystemperformance. Naturally,itrequireshavingatestsystem
thatisfullyanalogoustotheproductionone,andyoumustbeabletoreproduce
typicalworkloads.
Youcanalsorunsomeanalysisusingthepg_buffercacheextension. Forexample,
explorebufferdistributiondependingontheirusage:
=> SELECT usagecount, count(*)
FROM pg_buffercache
GROUP BY usagecount
ORDER BY usagecount;
usagecount | count
−−−−−−−−−−−−+−−−−−−−
1 | 4128
2 | 50
3 | 4
4 | 4
5 | 73
| 12125
(6 rows)
N usage count values correspond to free buffers. They are quite expected in
thiscasebecausetheserverwasrestartedandremainedidlemostofthetime.The
majorityoftheusedbufferscontainpagesofthesystemcatalogtablesreadbythe
backendtofillitssystemcatalogcacheandtoperformqueries.
Wecancheckwhatfractionofeachrelationiscached,andwhetherthisdataishot
(apageisconsideredhothereifitsusagecountisbiggerthanone):
179
Chapter9 BufferCache
=> SELECT c.relname,
count(*) blocks,
round( 100.0 * 8192 * count(*) /
pg_table_size(c.oid) ) AS "% of rel",
round( 100.0 * 8192 * count(*) FILTER (WHERE b.usagecount > 1) /
pg_table_size(c.oid) ) AS "% hot"
FROM pg_buffercache b
JOIN pg_class c ON pg_relation_filenode(c.oid) = b.relfilenode
WHERE b.reldatabase IN (
0, -- cluster-wide objects
(SELECT oid FROM pg_database WHERE datname = current_database())
)
AND b.usagecount IS NOT NULL
GROUP BY c.relname, c.oid
ORDER BY 2 DESC
LIMIT 10;
relname | blocks | % of rel | % hot
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−+−−−−−−−−+−−−−−−−−−−+−−−−−−−
big | 4097 | 100 | 1
pg_attribute | 30 | 48 | 47