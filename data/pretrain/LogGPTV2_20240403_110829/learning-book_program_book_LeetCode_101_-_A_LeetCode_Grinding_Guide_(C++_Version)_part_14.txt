40
48
1
13
29
45
58
图11.4:题目304-图1-左边为给定矩阵，右边为积分图结果，右下角位置的积分图值为5+48+45-40=58
如图2所示，假设我们要查询长方形E的数字和，因为E=D-B-C+A，我们发现E其
实可以由四个位置的积分图结果进行加减运算得到。因此这个算法在预处理时的时间复杂度为
O(mn)，而在查询时的时间复杂度仅为O(1)。
---
## Page 106
11.9前级和与积分图
101/143
Q
25
31
8
6
2
11
24
40
48
5
13
29
45
58
图11.5:题目304-图2-左边为给定矩阵，右边为积分图结果，长方形E的数字和等于58-11-13+3=37
class NumMatrix {
vector> integral;
public:
NumMatrix(vector> matrix){
int m = matrix.size(), n = = > 0? matrix[0].size(): 0;
integral - vector>(m + 1, vector(n + 1, O));
for (int i = 1; i & nums, int k) {
int count = 0, psum = 0;
unordered_map hashmap;
hashmap[0]-1；//初始化裂重要
for （int i: nums) {
psum += i;
count += hashmap[psum-k];
[wmsd]dewuseq++
return count;
11.10练习
基础难度
566. Reshape the Matrix (Easy)
没有什么难度，只是需要一点耐心。
225. Implement Stack using Queues (Easy)
利用相似的方法，我们也可以用stack实现queue。
503.Next Greater ElementII (Medium)
Daily Temperature的变种题。
217. Contains Duplicate (Easy)
使用什么数据结构可以快速判断重复呢？
697. Degree of an Array (Easy)
如何对数组进行预处理才能正确并快速地计算子数组的长度？
594. Longest Harmonious Subsequence (Easy)
最长连续序列的变种题。
进阶难度
287.Find the Duplicate Number (Medium)
寻找丢失数字的变种题。除了标负位置，你还有没有其它算法可以解决这个问题？
313. Super Ugly Number (Medium)
尝试使用优先队列解决这一问题。
---
## Page 108
11.10练习
103/143
870.AdvantageShuffle (Medium)
如果我们需要比较大小关系，而且同一数字可能出现多次，那么应该用什么数据结构呢？
307.RangeSum Query-Mutable (Medium)
前级和的变种题。好吧我承认，这道题可能有些超纲，你或许需要搜索一下什么是线段树。
---
## Page 109
第12章令人头大的字符串
内容提要
引言
字符串理解
宇符串比较
字符串匹配
12.1引言
字符申可以看成是字符组成的数组。由于字符中是程序里经常需要处理的数据类型，因此有
很多针对字符中处理的题目，以下是一些常见的类型。
12.2字符串比较
242. Valid Anagram (Easy)
题目描述
判断两个字符中包含的字符是否完全相同。
输人输出样例
输入两个字符串，输出一个布尔值，表示两个字符中是否满足条件。
Input: 8 =
"anagran", t
onx3:4nd4ng
'nagaranr
题解
我们可以利用哈希表或者数组统计两个数组中每个数字出现的频次，若频次相同，则说明它
们包含的字符完全相同。
bool isAnagram(atring s, string t)(
if (s.1ength() != t.1ength()) {
return false;
vector counts(26, 0);
for (int i = 0; i  s_first_index(256, 0),t_first_index(256, 0);
for (int i = 0; i = 0 && r = cur) {
++count;
return count;
12.3字符串理解
227.Basic Calculator II (Medium)
题目描述
给定一个包含加减乘除整数运算的字符中，求其运算结果，只保留整数。
输人输出样例
输入是一个合法的运算字符中，输出是一个整数，表示其运算结果。
Input:"3+5/ 2 *
Output:5
在这个样例中，因为除法的优先度高于加法，所以结果是5面非4。
题解
如果我们在字符中左边加上一个加号，可以证明其并不改变运算结果，且字符申可以分割成
多个对子的形式：这样一来我们就可以从左往右处理了。由于乘除的
优先级高于加减，因此我们需要使用一个中间变量来存储高优先度的运算结果。
此类型题也考察很多细节处理，如无运算符的情况，和多个空格的情况等等。
//主函数
int calculate(string s){
int i = 0;
return parseExpr(s, i);
//辅函数-逆归parse从位置i开始的剩余字符串
int parseExpr(const stringk s,int& i) {
+ - do xeq
long left = 0, right = 0;
while (i next(p，-1)；//-1表示不存在相同的最大前级和后级
---
## Page 114
12.5练习
109/143 -
calNext（needle，next）;//计算next数组
for (int i = 0; i  -1 && needle[k+1] != haystack[i]) {
k=next[k]；//有部分匹配，往前回潮
if (needle[k+1] == haystack[i]) {
++k;
上
if (k *
p-1）{
returni-p+1；//说明k移动到needle的最末端，返回相应的位置