## PostgreSQL 11 preview - 分区表智能并行JOIN (已类似MPP架构，性能暴增)  
### 作者                                                                     
digoal                                                                     
### 日期                                                   
2018-02-02                                                                   
### 标签                                                                     
PostgreSQL , 并行join , 分区智能映射并行JOIN , hash 并行 , MPP      
----                                 
## 背景      
PostgreSQL 10开始引入了内置分区表功能，当分区表与分区表发生JOIN时，大家想象一下，分区和分区能直接一对一JOIN，而跳过与其他分区JOIN吗？  
实际上我们在单表上，通过HASH可以达到类似的目的，即分片与分片JOIN，这样可以把JOIN的数据集合变小，同时能使用并行：  
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例》](../201802/20180201_02.md)    
![pic](20180201_02_pic_002.jpg)      
PostgreSQL 11对分区表进行了增强，分区表的JOIN在满足一定条件时，已类似MPP架构的JOIN，本文测试CASE，性能暴增2.4倍。  
涉及开关如下  
```  
postgres=# show enable_partition_wise_join ;  
 enable_partition_wise_join   
----------------------------  
 off  
(1 row)  
```  
解释  
```  
enable_partition_wise_join (boolean)  
Enables or disables the query planner's use of partition-wise join,   
which allows a join between partitioned tables to be performed by joining the matching partitions.   
Partition-wise join currently applies only when the join conditions include all the partition keys,   
which must be of the same data type and have exactly matching sets of child partitions.   
Because partition-wise join planning can use significantly more CPU time and memory during planning,   
the default is off.  
```  
## RANGE分区智能JOIN例子  
1、建立两个结构一样的分区表  
```  
create table a(id int, info text, crt_time timestamp) partition by range(id);  
create table a0 partition of a for values from (0) to (10000);  
create table a1 partition of a for values from (10000) to (20000);  
create table a2 partition of a for values from (20000) to (30000);  
create table a3 partition of a for values from (30000) to (40000);  
```  
```  
create table b(bid int , info text, crt_time timestamp, c1 int, c2 int) partition by range(bid);  
create table b0 partition of b for values from (0) to (10000);  
create table b1 partition of b for values from (10000) to (20000);  
create table b2 partition of b for values from (20000) to (30000);  
create table b3 partition of b for values from (30000) to (40000);  
```  
2、当开关关闭时，不会使用并行JOIN  
```  
postgres=# set enable_partition_wise_join =off;  
SET  
postgres=# explain select a.* from a join b on (a.id=b.bid);  
                               QUERY PLAN                                  
-------------------------------------------------------------------------  
 Merge Join  (cost=685.10..2088.62 rows=92208 width=44)  
   Merge Cond: (b0.bid = a0.id)  
   ->  Sort  (cost=325.48..335.68 rows=4080 width=4)  
         Sort Key: b0.bid  
         ->  Append  (cost=0.00..80.80 rows=4080 width=4)  
               ->  Seq Scan on b0  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b1  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b2  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b3  (cost=0.00..20.20 rows=1020 width=4)  
   ->  Sort  (cost=359.61..370.91 rows=4520 width=44)  
         Sort Key: a0.id  
         ->  Append  (cost=0.00..85.20 rows=4520 width=44)  
               ->  Seq Scan on a0  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a1  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a2  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a3  (cost=0.00..21.30 rows=1130 width=44)  
(16 rows)  
```  
3、打开开关，使用并行分区JOIN  
```  
postgres=# set enable_partition_wise_join =on;  
SET  
postgres=# explain select a.* from a join b on (a.id=b.bid);  
                               QUERY PLAN                                  
-------------------------------------------------------------------------  
 Append  (cost=149.77..965.28 rows=23052 width=44)  
   ->  Merge Join  (cost=149.77..241.32 rows=5763 width=44)  
         Merge Cond: (b0.bid = a0.id)  
         ->  Sort  (cost=71.17..73.72 rows=1020 width=4)  
               Sort Key: b0.bid  
               ->  Seq Scan on b0  (cost=0.00..20.20 rows=1020 width=4)  
         ->  Sort  (cost=78.60..81.43 rows=1130 width=44)  
               Sort Key: a0.id  
               ->  Seq Scan on a0  (cost=0.00..21.30 rows=1130 width=44)  
   ->  Merge Join  (cost=149.77..241.32 rows=5763 width=44)  
         Merge Cond: (b1.bid = a1.id)  
         ->  Sort  (cost=71.17..73.72 rows=1020 width=4)  
               Sort Key: b1.bid  
               ->  Seq Scan on b1  (cost=0.00..20.20 rows=1020 width=4)  
         ->  Sort  (cost=78.60..81.43 rows=1130 width=44)  
               Sort Key: a1.id  
               ->  Seq Scan on a1  (cost=0.00..21.30 rows=1130 width=44)  
   ->  Merge Join  (cost=149.77..241.32 rows=5763 width=44)  
         Merge Cond: (b2.bid = a2.id)  
         ->  Sort  (cost=71.17..73.72 rows=1020 width=4)  
               Sort Key: b2.bid  
               ->  Seq Scan on b2  (cost=0.00..20.20 rows=1020 width=4)  
         ->  Sort  (cost=78.60..81.43 rows=1130 width=44)  
               Sort Key: a2.id  
               ->  Seq Scan on a2  (cost=0.00..21.30 rows=1130 width=44)  
   ->  Merge Join  (cost=149.77..241.32 rows=5763 width=44)  
         Merge Cond: (b3.bid = a3.id)  
         ->  Sort  (cost=71.17..73.72 rows=1020 width=4)  
               Sort Key: b3.bid  
               ->  Seq Scan on b3  (cost=0.00..20.20 rows=1020 width=4)  
         ->  Sort  (cost=78.60..81.43 rows=1130 width=44)  
               Sort Key: a3.id  
               ->  Seq Scan on a3  (cost=0.00..21.30 rows=1130 width=44)  
(33 rows)  
```  
4、当分区结构不一样时，不会用到分区并行JOIN  
```  
postgres=# create table b4 partition of b for values from (40000) to (50000);  
CREATE TABLE  
postgres=# explain select a.* from a join b on (a.id=b.bid);  
                               QUERY PLAN                                  
-------------------------------------------------------------------------  
 Merge Join  (cost=774.68..2526.18 rows=115260 width=44)  
   Merge Cond: (a0.id = b0.bid)  
   ->  Sort  (cost=359.61..370.91 rows=4520 width=44)  
         Sort Key: a0.id  
         ->  Append  (cost=0.00..85.20 rows=4520 width=44)  
               ->  Seq Scan on a0  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a1  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a2  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a3  (cost=0.00..21.30 rows=1130 width=44)  
   ->  Sort  (cost=415.07..427.82 rows=5100 width=4)  
         Sort Key: b0.bid  
         ->  Append  (cost=0.00..101.00 rows=5100 width=4)  
               ->  Seq Scan on b0  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b1  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b2  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b3  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b4  (cost=0.00..20.20 rows=1020 width=4)  
(17 rows)  
```  
```  
drop table a2;  
drop table a3;  
create table a2 partition of a for values from (20000) to (40000);  
create table a3 partition of a for values from (40000) to (41000);  
create table a4 partition of a for values from (41000) to (60000);  