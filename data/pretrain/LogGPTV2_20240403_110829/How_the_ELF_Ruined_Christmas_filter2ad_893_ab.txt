.dynstr section, a symbol (Elf Sym) that refers to it in
the .dynsym section, and a relocation (Elf Rel) pointing
to that symbol in the .rel.plt section.
The target of the relocation (the r offset ﬁeld of the
Elf Rel struct) will be the address of an entry in a dedi-
cated table: the Global Offset Table (GOT). This table,
which is stored in the .got.plt section, is populated by
the dynamic loader as it resolves the relocations in the
.rel.plt section.
3.3 Lazy Symbol Resolution
Since resolving every imported symbol and applying all
relocations at application startup can be a costly operation,
symbols are resolved lazily. In lazy symbol resolution, the
address of a function (which corresponds to an entry in the
GOT) is only resolved when necessary (i.e., the ﬁrst time
the imported function is called).
When a program wants to calls an imported function,
it instead calls a dedicated stub of code, located in the
Procedure Linkage Table (the .plt section). As shown in
Listing 1, each imported function has a stub in the PLT that
performs an unconditional indirect jump to the associated
After symbol resolution, this GOT entry contains the
address of the actual function, in the imported library, and
execution continues seamlessly into this function. When
the function returns, control ﬂow returns to the caller of
the PLT stub, and the rest of the PLT stub is not executed.
However, at program startup, GOT entries are initialized
with an address pointing to the second instruction of the
associated PLT stub. This part of the stub will push onto
the stack an identiﬁer of the imported function (in the
form of an offset to an Elf Rel instance in the .rel.plt
section) and jump to the PLT0 stub, a piece of code at
the beginning of the .plt section. In turn, the PLT0 stub,
pushes the value of GOT[1] onto the stack and performs an
indirect jump to the address of GOT[2]. These two entries
in the GOT have a special meaning and the dynamic loader
populates them at application startup:
GOT[1]. A pointer to an internal data structure, of type
link map, which is used internally by the dynamic
loader and contains information about the current
ELF object needed to carry out symbol resolution.
GOT[2]. A pointer to a function of the dynamic loader,
called dl runtime resolve.
In summary, PLT entries basically perform the following
function call:
_dl_runtime_resolve ( link_map_obj , reloc_index )
This function uses the link map obj parameter to ac-
cess the information it needs to resolve the desired im-
ported function (identiﬁed by the reloc index argument)
and writes the result into the appropriate GOT entry. Af-
ter dl runtime resolve resolves the imported function,
control ﬂow is passed to that function, making the resolu-
tion process completely transparent to the caller. The next
time the PLT stub for the speciﬁed function is invoked
execution will be diverted directly to the target function.
Listing 1: Example PLT and GOT.
push *0 x200
jmp *0 x204
100 PLT0 :
100
106
110 printf@plt :
110
116
11 B
120 read@plt :
120
126
12 B
jmp *0 x208
push #0
jmp PLT0
jmp *0 x20C
push #1
jmp PLT0
196 ; .plt.got start
196 ; Empty entry
196 0
200 ; link_map object
200 & link_map_obj
204 ; Resolver function
204 & _dl_runtime_resolve
208 ; printf entry
208 0 x116
20 C ; read entry
20 C 0 x126
The link map structure contains all the information
that the dynamic loader needs about a loaded ELF object.
Each link map instance is an entry in a doubly-linked list
containing the information about all loaded ELF objects.
3.4 Symbol Versioning
The ELF standard provides a mechanism to import a
symbol with a speciﬁc version associated with it. This
feature is used to require a function to be imported from a
646  24th USENIX Security Symposium 
USENIX Association
4
Table 1: Entries of the .dynamic section. d tag is the
key, while d value is the value.
d tag
d value
d tag
d value
DT SYMTAB
.dynsym
DT STRTAB
.dynstr
DT PLTGOT
.got.plt
DT VERNEED
.gnu.version
DT JMPREL
.rel.plt
DT VERSYM
.gnu.version r
in the presence of these countermeasures.
Note that the previously mentioned link map structure
stores in the l info ﬁeld an array of pointers to most of
entries in the .dynamic section for internal usage. Since
the dynamic loader trusts the content of this ﬁeld implicitly,
Leakless will later be able to misuse this to its own ends.
4 The Attack
speciﬁc version of a library. For instance, it is possible
to require the fopen C Standard Library function, as
implemented in version 2.2.5 of the GNU C Standard
Library, using the version identiﬁer GLIBC 2.2.5. The
.gnu.version r section contains version deﬁnitions in
the form of Elf Verdef structures.
The association between a dynamic symbol and the
Elf Verdef structure that it refers to is kept in the
.gnu.version section, as an array of Elf Verneed struc-
tures, one for each entry in the dynamic symbol table.
These structures have a single ﬁeld: a 16-bit integer that
represents an index into the .gnu.version r section.
Due to this layout, the index in the r info ﬁeld of the
Elf Rel structure is used by the dynamic loader as an
index into both the .dynsym and .gnu.version sections.
This is important to understand, as Leakless will later
leverage this fact.
3.5 The .dynamic section and RELRO
The dynamic loader collects all the information that it
needs about the ELF object from the .dynamic section,
which is composed of Elf Dyn structures. An Elf Dyn is
a key-value pair that stores different types of information.
The relevant entries of this section, shown in Table 1, hold
the absolute addresses of speciﬁc sections. One exception
is the DT DEBUG entry, which holds a pointer to an internal
data structure of the dynamic loader. This is initialized by
the dynamic loader and is used for debugging purposes.
An attacker able to tamper with these values can pose
a security risk. For this reason, a protection mechanism
known as RELRO (RELocation Read Only) has been
introduced in dynamic loaders. RELRO comes in two
ﬂavors: partial and full.
Partial RELRO In this mode, some sections, including
.dynamic, are marked as read-only after they have
been initialized by the dynamic loader.
Full RELRO In addition to partial RELRO, lazy resolu-
tion is disabled: all import symbols are resolved at
startup time, and the .got.plt section is completely
initialized with the ﬁnal addresses of the target func-
tions and marked read-only. Moreover, since lazy
resolution is not enabled, the GOT[1] and GOT[2] en-
tries are not initialized with the values we mentioned
in Section 3.3.
As we will see, RELRO poses signiﬁcant complications
that Leakless must (and does) address in order to operate
Leakless enables an attacker to call arbitrary library func-
tions, using only their name, without any information
about the memory layout of the vulnerable program’s
libraries. To achieve this, Leakless abuses the dynamic
loader, forcing it to resolve and call the requested func-
tion. This is possible for the same reason that memory
corruption vulnerabilities are so damaging: the mixing
of control data and non-control data in memory. In the
case of a stack overﬂow, the control data in question is a
stored return address. For the dynamic loader, the control
data is comprised of the various data structures that the
dynamic loader uses for symbol resolution. Speciﬁcally,
the name of the function, stored in the .dynstr section, is
analogous to a return address: it speciﬁes a speciﬁc target
to execute when the function is invoked.
The dynamic loader makes the assumption that the
parameters it receives and its internal structures are trust-
worthy because it assumes that they are provided directly
by the ELF ﬁle or by itself during initialization. However,
when an attacker is able to modify this data, the assump-
tion is broken. Some dynamic loaders (FreeBSD) validate
the input they receive. However, they still implicitly trust
the control structures, which will be readily corrupted by
Leakless.
Leakless is designed to be used by an attacker who is
attempting to exploit an existing vulnerability. The input
to Leakless is comprised of the executable ELF ﬁle, a set
of ROP gadgets of the binary (we detail what gadgets an
attacker needs in Section 5.1), and the name of a library
function that the attacker wishes to call (typically, but not
necessarily, execve()). Given this information, Leakless
outputs a ROP payload that executes the needed library
function, bypassing various hardening techniques applied
to the binary in question. This ROP chain is generally very
short: depending on the mitigations present in the binary,
the chain is 3 to 12 write operations. Some examples
of the output produced by Leakless are available in the
documentation of the Leakless code repository [17].
Leakless does not require any information about the
addresses or contents of the libraries; we assume that
ASLR is enabled for all dynamic libraries and that no
knowledge about them is available. However we also
assume that the executable is not position-independent,
and, thus, is always loaded in a speciﬁc location in memory.
We discuss this limitation in detail in Section 7.2, and show
USENIX Association  
24th USENIX Security Symposium  647
5
.dynsym
...
st name
st info
...
m
y
S
f
l
E
...
.dynstr
...
read\0
printf\0
...
.bss
...
read\0
execve\0
...
.dynamic
...
d tag: DT STRTAB
d val
...
E
l
f
D
y
n
dl runtime resolve(l info, reloc index)
.rel.plt
...
r info
r offset
...
E
l
f
R
e
l
l
e
R
f
l
E
.bss
r info
r offset
st name
st info
...
execve\0
...
E
l
f
S
y
m
(a) Example of the attack presented in Section 4.1. The attacker
is able to overwrite the value of the DT STRTAB dynamic entry,
tricking the dynamic loader into thinking that the .dynstr
section is in .bss, where he crafted a fake string table. When the
dynamic loader will try to resolve the symbol for printf it will
use a different base to reach the name of the function and will
actually resolve (and call) execve.
(b) Example of the attack presented in Section 4.2. The
reloc index passed to dl runtime resolve overﬂows the
.rel.plt section and ends up in .bss, where the attacker crafted
an Elf Rel structure. The relocation points to an Elf Sym lo-
cated right afterwards overﬂowing the .dynsym section. In
turn the symbol will contain an offset relative to .dynstr large
enough to reach the memory area after the symbol, which con-
tains the name of the function to invoke.
Figure 2: Illustration of some of the presented attacks. Shaded background means read only memory, white background
means writeable memory and bold or red means data crafted by the attacker.
how infrequently Position Independent Executables (PIE)
binaries occur in modern OS distributions in Section 6.2.
While in most cases, Leakless works independently of
the dynamic loader implementation and version that the
target system is running, some of our attacks require minor
modiﬁcations to accommodate different dynamic loaders.
Note that Leakless’s aim, obtaining the address of a
library function and call it, is similar to what the dlsym
function of libdl does. However, in practice this function
is rarely used by applications and, therefore, its address is
not generally known to the attacker.
4.1 The Base Case
As explained in Section 3 and illustrated in Figure 1, the
dynamic loader starts its work from a Elf Rel structure
in the .rel.plt, then follows the index into the .dynsym
section to locate the Elf Sym structure, and ﬁnally uses
that to identify the name (a string in the .dynstr section)
of the symbol to resolve. The simplest way to call an
arbitrary function would be to overwrite the string table
entry of an existing symbol with the name of the desired
function, and then invoke the dynamic loader, but this is
not possible, as the section containing the string table for
dynamic symbols, i.e., .dynstr, is not writeable.
However, the dynamic loader obtains the address of
the .dynstr section from the DT STRTAB entry of the
.dynamic section, which is at a known location and, by
default, writeable. Therefore, as shown in Figure 2a, it
is possible to overwrite the d val ﬁeld of this dynamic
entry with a pointer to a memory area under the control of
the attacker (typically the .bss or .data section). This
memory area would then include a single string, for ex-
ample execve. At this point, the attacker needs to choose
an existing symbol pointing to the correct offset in the
fake string table and invoke the resolution of relocation
corresponding to that symbol. This can be done by pushing
the offset of this relocation on the stack and then jumping
to PLT0.
This approach is simple, but it is only effective against
binaries in which the .dynamic section is writeable. More
sophisticated attacks must be used against binary compiled
with partial or full RELRO.
4.2 Bypassing Partial RELRO
As we explained in Section 3.3, the second parameter
of the dl runtime resolve function is the offset of an
Elf Rel entry in the relocation table (.rel.plt section)
that corresponds to the requested function. The dynamic
loader takes this value and adds it to the base address of
the .rel.plt to obtain the absolute address of the target
Elf Rel structure. However most dynamic loader imple-
mentations do not check the boundaries of the relocation
table. This means that if a value larger than the size of the
.rel.plt is passed to dl runtime resolve, the loader
will use the Elf Rel at the speciﬁed location, despite
being outside the .rel.plt section.
As shown in Figure 2b, Leakless computes an index that
will lead dl runtime resolve to look into a memory
area under the control of the attacker. It then crafts an
Elf Rel structure that contains, in its r offset ﬁeld, the
address of the writeable memory location where the ad-
dress of the function will be written. The r info ﬁeld will,
in turn, contain an index that causes the dynamic loader to
look into the attacker-controlled memory. Leakless stores
648  24th USENIX Security Symposium 
USENIX Association
6
a crafted Elf Sym object at this location, which, likewise,
holds a st name ﬁeld value large enough to point into
attacker-controlled memory. Finally, this location is where
Leakless stores the name of the desired function to call.
In sum, Leakless crafts the full chain of structures
involved in symbol resolution, co-opting the process to
invoke the function whose name Leakless has written into
attacker-controlled memory. After this, Leakless pushes
the computed offset to the fake Elf Rel structure onto the
stack and invokes PLT0.
However, this approach is subject to several constraints.
First, the symbol index in Elf Rel has to be positive,
since the r info ﬁeld is deﬁned by the ELF standard as an
unsigned integer. In practice, this means that the writable
memory area (e.g., the .bss section) must be located after
the .dynsym section. In our evaluation, this has always
been the case.
Another constraint arises when the ELF makes use of
the symbol versioning system described in Section 3.4.
In this case, the Elf Rel.r info ﬁeld is not just used
as an index into the dynamic symbol table, but also as
an index in the symbol version table (the .gnu.version
section). In general, Leakless is able to automatically
satisfy these constraints, except for x86-64 small binaries
using huge pages [32]. We detail the additional constraints
introduced by symbol versioning in Appendix A. When the