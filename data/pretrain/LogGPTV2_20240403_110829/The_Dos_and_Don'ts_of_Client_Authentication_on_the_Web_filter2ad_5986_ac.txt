eas-
ily predictable.
instance, we noticed that
highschoolalumni.com uses ID numbers and
email addresses inside cookies to authenticate users.
An interrogative adversary can ﬁnd this information
in the publicly available alumni database, and mint an
authenticator for an any user.
Authenticators often contain keys that function as ses-
sion identiﬁers. These identiﬁers should be crypto-
graphically random; statistical randomness is not suf-
ﬁcient. The Allaire Cold Fusion Web server issues
CFTOKEN session identiﬁers which come from a lin-
ear congruential number generator [2]. As described
above, FatBrain.com used essentially a global se-
quence number. While these numbers may be appropri-
ate for tracking users, it is possible for an adversary to
deduce the next output, and hence the next valid session
identiﬁer. This may allow the adversary access the infor-
mation of another user.
Authenticators may also contain other information that
the system will accept to be true. Thus, they must also
be protected from tampering. This is done by use of a
message authentication code (MAC). Because message
authentication codes require a secret key, only an entity
with knowledge of the key can recreate a valid code. This
makes the codes unforgeable since no adversary should
possess the secret key. Use only strong cryptographic
hash functions. Do not use CRC codes or other non-
cryptographic hashes, as such functions are often trivial
to break.
Relatedly, when combining multiple pieces of data to
input into a message authentication code, be sure to un-
ambiguously separate the components. Since most in-
puts are text, this can be done using some character that
is known not to appear in the input fragments. If compo-
nents are not clearly separated, multiple inputs can lead
to the same outputs. For example, “usernameaccess”
could come from “username” followed by “access” or
“user” followed by “nameaccess”; better to write “user-
name&access” to ensure that the interpretation is unam-
biguous. Of course, care must be taken to prevent the
username from containing an ampersand!
Protect authenticators that must be secret
Some systems believe that they are secure against
eavesdropping adversaries because they send their au-
thenticators over SSL. However, a secure transport is
ineffective if the authenticators leak through plaintext
channels. We describe two ways that authenticators are
sent over SSL and mistakes which can lead to the authen-
ticator leaking into plaintext.
One method is to set the authenticator as a cookie.
When doing so, it is usually appropriate to set the Se-
cure ﬂag on cookies sent over SSL. When set to true,
this ﬂag instructs a Web browser to send the cookie over
SSL only. A number of SSL Web sites neglect to set this
ﬂag. This simple error can completely nullify the useful
properties of SSL. For instance, customers of SprintPCS
can view their account information and make equipment
purchases online. To authenticate, a user enters a phone
number and password over SSL. SprintPCS then sets a
cookie which acts as an authenticator. Anyone with the
cookie can log in as that user. The protocol so far is
reasonably secure. However, because SprintPCS does
not set the Secure ﬂag on their authentication cookie,
the authenticator travels in plaintext over HTTP when-
ever a user visits the main SprintPCS Web page. We
believe that SprintPCS intended to protect against eaves-
dropping adversaries. Nevertheless, a eavesdropping ad-
versary can access a victim’s account with a replay be-
cause the cookie authenticator leaks over HTTP.
A second method of setting an authenticator is to in-
clude it as part of the URL. Though the HTTP 1.1 spec-
iﬁcation [14] recommends against this, it easy to do and
sites still use this. The problem with this method is that
it too can leak authenticators through plaintext channels.
If a user follows a link from one page to another, the
Web browser usually sends the Referer [sic] header. This
ﬁeld includes the URL of the page from which the cur-
rent request originated. As described in Section 14.36
of the HTTP speciﬁcation, the Referer ﬁeld is normally
used to allow a server to trace back-links for logging,
caching, or maintenance purposes. However, if the URL
of the linking page includes the authenticator, the server
will receive a copy of the authenticator in the HTTP
header. Section 15.1.3 of the speciﬁcation recommends
that clients should not include a Referer header in a non-
secure HTTP request if the referring page was transferred
with a secure protocol for exactly this reason. However,
this is not a requirement; browsers such as Netscape and
Lynx send the Referer header anyway without any warn-
ing.
This can be exploited via a cross-site scripting at-
tack [9]. An adversary can cause a user to execute ar-
bitrary code and offer the user a link from a secure URL
including the authenticator (that appears legitimate) to a
link of the adversary’s choosing. If the user selects the
link, the Referer ﬁeld in the request may include the au-
thenticator, making it available to a eavesdropping ad-
versary. Worse, the link could point to the adversary’s
machine. Then no eavesdropping is necessary to cap-
ture the authenticator. If the attacker is clever and uses
an SSL server to host the attack, most browsers will not
indicate that anything untoward is happening since they
only warn users about transitions from SSL to non-SSL
links.
Therefore, be careful when setting authenticators in
cookies and follow the recommendation of the HTTP 1.1
speciﬁcation by not using authenticators in URLs.
Avoid using persistent cookies
A persistent cookie is written to a ﬁle on the user’s sys-
tem; an ephemeral or temporary cookie is only stored in
the browser’s memory and disappears when the user exits
the browser. An error in the way the browser or user han-
dles the cookie ﬁle may make it accessible over the In-
ternet, exposing the user’s cookies to anyone who knows
where to look. For instance, certain queries to search en-
gines can produce many cookie ﬁles accidentally placed
on the Web [18]. If a persistent cookie in a leaked ﬁle
contains an authenticator, an adversary can simply copy
the cookie and break into the user’s account. In addition,
if the user accesses the account from a public system (say
at a library or Internet caf´e) and receives a persistent au-
thentication cookie on that system, any subsequent user
of that system can access the account. For these reasons,
persistent cookies should not be considered private. Do
not store authenticators in persistent cookies.
Limit the lifetime of authenticators
A good design must also gracefully handle the com-
promise of tokens which are designed to be secret. To
limit the amount of damage a leaked authenticator can
cause, limit its lifetime.
For authenticators that are stored in user cookies, do
not rely on the cookie expiration ﬁeld for secure expira-
tion. Since the client is responsible for enforcing that ex-
piration, a malicious client can set the lifetime arbitrarily.
Netscape users can manually extend these expirations by
simply editing a text ﬁle. We were able to indeﬁnitely
extend the lifetime of our WSJ.com cookie authentica-
tor even though WSJ.com set the cookie to expire in
11 hours. This was not extremely alarming, but if an
adversary stole a cookie (as described in Section 3.3),
there would be no way to revoke the adversary’s access.
The problem was compounded because the cookie au-
thenticator remained the same even if a user’s password
changed. This prevented the WSJ.com site from easily
revoking access to a compromised account.
To prevent unauthorized cookie lifetime extensions,
include a cryptographically unalterable timestamp in the
value of the cookie, or store the expiration time in a user-
inaccessible place on the server. Securely binding expi-
rations to authenticators limits the damage caused by a
stolen authenticator.
Subsequent requests to the server include this cookie and
allow the server to authenticate the request. The design
of each cookie ensures that a valid cookie can only be
created by the server; therefore anyone possessing a valid
cookie is authorized to access the requested content on
the server.
Note that an authenticator that is stored in a cookie
can be replayed, regardless of its expiration time, if it
is leaked. By deﬁnition, unless the client uses computa-
tion, the only thing it is capable of doing to the cookie
is to send it back to the server. If replay prevention is
desired, the authenticator must be kept conﬁdential and
changed after each use. In that case, it might be neces-
sary to record recently received authenticators and verify
that newly received authenticators are not replays.
Bind authenticators to addresses
It can also be useful to tie authenticators to speciﬁc
network addresses. This helps protect against replay at-
tacks by making it more difﬁcult for the adversary to suc-
cessfully reuse the authenticator. In addition to acquiring
the authenticator, the adversary must appear to originate
from the same network address for which the authentica-
tor was minted. However, this may prematurely invali-
date authenticators issued to mobile DHCP users.
4 Design
In this section we present a scheme for performing
client authentication. This design is intended to be an ex-
ample of a simple system that follows the hints provided
in Section 3. We do not claim that the scheme is novel,
but we do claim that the concepts and design process are
not extensively discussed in literature. We present a brief
security analysis of the schemes in Section 5.
Our scheme provides a personalizable authenticator
which allows the server to statelessly verify the authen-
ticity of the request and its contents. The server can ex-
plicitly control the valid lifetime of the authenticator as
well. The authenticator can include all the information
needed to service a request, or can be used as a key to
refer to session information stored on the server.
The overall operation of this scheme is shown in Fig-
ure 2. We assume that the user has an existing account
on the server which is accessed via a username and pass-
word. At the start of each session, the server receives the
username and password, veriﬁes them, and sets an au-
thentication cookie on the user’s machine. Since cook-
ies are widely supported, this makes the system portable.
Our scheme is designed to be secure against an in-
terrogative adversary, as we believe that most of the
schemes we evaluated were designed with this type of
adversary in mind. However, because SSL with server
authentication provides conﬁdentiality and integrity, lay-
ering our design on top of SSL can provide an authenti-
cation system secure against an active adversary.
4.1 Cookie Recipe
The recipe for our cookie follows easily from the hints
presented in Section 3. We create an unforgeable authen-
ticator that includes an explicit expiration time. We use
HTTP state (i.e. cookies) to store this authenticator with
the client. The value of this cookie is shown here:
exp=  &data=
&digest=MAC
(exp=  &data=
)
The expiration time is denoted   and is expressed as sec-
onds past 1970 GMT. The data string
is an optional
parameter denoting arbitrary data that the server wishes
to associate with the client. Finally, the cookie includes
a MAC for the cleartext expiration and data.
Our cookie requires the use of a non-malleable MAC;
that is, one where it is intractable to generate a valid ci-
phertext from a plaintext message related to a plaintext
message with a known ciphertext [12, 24]. That is, no
adversary can generate a valid ciphertext without both
the server’s secret key and the plaintext, no matter how
many samples of valid plaintext/ciphertext pairs the ad-
versary has. Examples of keyed, non-malleable MACs
are HMAC-MD5 and HMAC-SHA1 [24].
4.2 Discussion
Selecting an expiration time  
is a trade-off between
limiting the damage that can be done with a leaked au-
thenticator and requiring the user to reauthenticate. Ya-
hoo!, for example, allows users to specify what expira-
tion interval they prefer for authenticators that control
access to sensitive data [47]. This allows the user to con-
trol the trade-off. On the other hand, for insensitive data,
it makes sense for the server to make the choice. For ex-
ample, a newspaper might want cookies to be valid for




User
Login procedure:
Stores authentication token
as cookie
Username, password
Authentication token
Server
Checks that user
has valid account
Creates authentication
token
Bob
Fu
Subsequent requests:
?
Content request, authentication token
Bob
Fu
Verifies authentication
token
Content
Figure 2: One-exchange authentication system.
only a day, whereas a magazine might allow sessions to
be valid for a month (as if the user were buying a single
issue).
The value
may be any information speciﬁc to the
user that the server wishes to access without maintaining
server state. This may be anything from a session identi-
ﬁer to a username. Beware that this data is not encrypted
so sensitive information should not be stored here; if sen-
sitive data is needed, we recommend that a cryptograph-
ically random session identiﬁer be used. This will pre-
vent information leaks from compromising a user’s pri-
vacy. On the other hand, if sensitive user information is
required to handle only a small percentage of the content
requests, the authenticator can contain the information
needed to service the majority of requests. This way the
server can avoid doing a possibly expensive look-up with
every request.
A server may also choose to leave
empty (and re-
moving the data parameter from the cookie). This
might be useful in the case where authentication must
expire, but all users are essentially the same. A plausible
example of this might be a pay-per use service, such as a
newspaper.
4.3 Authentication and revocation
To authenticate a user, the server retrieves the cookie
and extracts the expiration. If the cookie has not expired,
the server recalculates the MAC in the digest parame-
ter of the cookie. Since the server is the only entity who
knows the key  
, the properties of the MAC function im-
ply that a valid cookie was generated by the server. So
long as the server only generates cookies for authenti-
cated users, any client with a valid cookie is a valid user.
This scheme does not provide a mechanism for se-
cure revocation; that is, ending the user’s session before
the expiration time is up. The easiest option is for the
server can instruct the client to discard the authentication
cookie. This will usually be adequate for most applica-
tions. However, a client who has saved the value of the
cookie can continue to reuse that value so long as the
explicit expiration time has not yet passed.
In most cases, a short session can make revocation un-
necessary: the user can access the server until the session
expires, at which time the server can refuse to issue a
new authenticator. Servers that require secure revocation
should keep track of the session status on the server (e.g.,
using a random session key or our personalized scheme
with a server database). This session can then be explic-
itly revoked on the server, without trusting the client.
The scheme does allow simultaneous revocation of all
authenticators, which can be accomplished by rotating