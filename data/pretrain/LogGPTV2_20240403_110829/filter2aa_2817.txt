MJ0011 
PI:EMAIL 
逆向Windows 8: 
内核安全特性拾趣 
1
目的： 
逆向Windows 8 Release Preview版本 
发现一些新的用于防御或缓和内核漏洞攻击的安全特性 
目标： 
主要关注ntoskrnl 
工具： IDA Pro/Hex-rays/windbg 
议程 
2
– 禁止零页内存分配 
– 禁止Win32k系统调用 
– 安全性故障中断 
– 不可执行的非分页池 
– 使用Intel® Secure Key 技术 
– 使用Intel® SMEP 技术 
Windows8对抗内核漏洞利用的安全特性 
3
– 零页内存：Windows上供 16位虚拟机NTVDM使用，确保16位代码
正常运行 
– 内核漏洞攻击技巧，通过ZwAllocateVirtualMemory等系统调用可
以在进程中分配出零页内存 
– 触发未初始化对象指针/数据指针引用漏洞或辅助漏洞攻击。 
• 案例： CVE-2010-4398  
N-Protect TKRgAc2k.sys kernel 0day(POC2010) 
– Window 8 上：禁止进程申请低地址内存(0x0~0x10000) 
– EPROCESS->Flags.VdmAllowed 
禁止零页内存分配 
4
– Windows 8 上， 16位虚拟机默认禁用，开启需要管理员权限 
禁止零页内存分配 
5
– Windows8在所有可能的内存分配位置检查零页分配 
• MiCreatePebOrTeb：进线程启动，创建PEB或TEB时 
• MiMapViewOfImageSection->MiIsVaRangeAvailable: 
 映射镜像内存区时 
• MiMapViewOfDataSection/MiMapViewOfPhysicalSection 
    映射数据内存区时 
• MmMapLockedPagesSpecifyCache/MmMapLockedPages-> 
MiMapLockedPagesInUserSpace 
    映射用户地址时（内核自身未这样使用，但其他驱动使用时会限制） 
• NtAllocateVirtualMemory:分配进程内存 
禁止零页内存分配 
6
禁止Win32k系统调用 
– EPROCESS->Flags2.DisallowWin32kSystemCalls 
– 实现在：KiFastCallEntry(2)->PsConvertToGuiThread 
禁止Win32k系统调用 
7
– 禁用win32k 系统调用的作用 
– Win32k.sys： Windows内核漏洞高发，调用不受进程权限限制 
•  MS11-087 Trojan.win32.Duqu 字体解析漏洞 
– 目前应用沙箱的防御策略: Job UI限制 效果不佳 
– 禁用win32k系统调用可以有效防御一切win32k.sys相关0day，
无需内核驱动，配置简单 
– 防御非0day的USER/GDI相关技巧突破沙箱 
         禁止Win32k系统调用 
8
– PsConvertToGuiThread : GUI线程首次调用win32k system call时
切换线程状态 
– 应用DisallowWin32kSystemCalls标志后禁止切换，任何对
USER32/GDI32相关调用都会失败 
– 三种方式获得此标志： 
•  1.IEFO注册表 : 
– HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image 
File Execution Options\MitigationOptions (0x10000000) 
– 在进程创建过程NtCreateUserProcess->PspAllocateProcess-> 
PspApplyMitigationOptions应用到标志位上 
•  2.文档化的API:SetProcessMitigationPolicy 
– 实际调用NtSetInformationProcess->ProcessMitigationPolicy设置标志
位 
•  3.从父进程继承 
         禁止Win32k系统调用 
9
– Windows 8 中加入的新的中断: Int 0x29 
– Windows8的内核和其他驱动程序在发生安全性故障时使用，将直接
引发BSOD 
– 最常见的使用地方在双向链表的链接/脱链前，Windows8的OS加载
器、内核和驱动程序中，在所有双向链表的使用上都加入了这个处理 
– 被称为Safe Linking & Safe Unlinking 
• 安全链接例子:IoRegisterFsRegistrationChangeMountAware 
• 安全脱链例子:IoUnregisterFileSystem 
– 防御利用篡改链接后脱链/链接形成任意地址写入 
安全性故障中断 
10
安全性故障中断 
安全脱链机制触发int 0x29中断示例: IoUnregisterFileSystem 
11
– KiRaiseSecurityCheckFailure : 
• Int 0x29触发后调用到中断Handler 
• 简单处理后调用KiFastFailDispatch->KiBugCheck执行BSOD 
– Bugcheck 代码 : 0x139 尚未文档化 
• 参数:ecx 错误ID 
– 目前已知的错误ID: 
• 0x2: 内核驱动报告Security Cookie异常 
• 0x3: Safe unlinking / Safe linking异常 
• 0x6: 内核驱动Security Cookie未被初始化未高质量Cookie 
• 0x9: RtlQueryRegistryValuesEx注册表非可信(CVE-2010-4398 ) 
安全性故障中断 
12
– 在Windows8之前， 内核和内核驱动使用ExAllocatePoolXXX只能分配出
可执行的内核非分页内存 
– 可执行的内核非分页内存可以用于内核溢出漏洞ROP 
– Windows8开始，引入了新的PoolType: 
•
NonPagedPoolNx  
•
NonPagedPoolNxCacheAligned              
•
NonPagedPoolSessionNx                   
– 通过ExAllocatePool(NonPagedPoolNx)分配出的内核内存不再可执行，
在此类型内存池内执行代码将直接引发BSOD 
– Windows8内核和驱动程序都已经使用此类型内存池替换所有原来使用的
NonPagedPool类型 
  不可执行的非分页池 
13
  不可执行的非分页池 
– 内核默认使用不可执行的非分页池的一个例子: 
– IoAllocateDriverObjectExtension 
14
        使用Intel® Secure Key技术 
– Intel® Secure Key技术 代号公牛山  
– 在Intel 第三代Core处理器：Ivy Bridge中加入，今年4月正式发布 
• 提供硬件实现的底层数字化随机数生成器（DRNG) 支持 
• 提供基于硬件的高性能、高质量的熵和随机数生成器 
– 引入新的指令：RDRAND 
– Windows8 内核开始使用该指令产生随机数，其中重要的使用者就
是Security Cookie/ ASLR的生成过程 
– 相关内核函数：ExGenRandom 
15
        使用Intel® Secure Key技术 
– 过去针对内核随机数的攻击：Security Cookie预测 / ASLR暴力攻击 
– Windows8以前， Windows内核Security Cookie/ASLR使用系统时
钟KeTickCount或RDTSC作为随机数源 
– 结合获取模块加载时间，Security Cookie可被轻易预测，成功率达到
46%以上 (j00ru) 
– J00ru:“Windows Kernel-mode GS Cookies subverted” 
– H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. 
Boneh: “On the effectiveness of address-space randomization,” 
– Windows 8 内核自身使用Intel Secure Key技术生成的Security 
Cookie，并强制应用到所有加载的驱动程序中 
16
        使用Intel® Secure Key技术 
•
Windows8在加载内核驱动时调用MiProcessLoadConfigForDriver ，产生随机
数并定位LoadConfig节内旧的Security Cookie，强制进行替换 
•
新的Win8驱动检查自身的Security Cookie是否被替换 
17
        使用Intel® Secure Key技术 
– Windows 7  内核/第三方驱动的Security Cookie的生成方式： 
HalQueryRealTimeClock(from CMOS) ^ rdtsc 
– Windows 8 内核Security Cookie的生成方式： 
ExGenRandom-> ExpSecurityCookieRandomData ^ rdtsc 
– Windows运行时内核ntoskrnl本身并不直接调用RDRAND指令 
– ExGenRandom使用的随机数熵源来自OS加载器Winload.exe在启动过
程中调用RDRAND指令的结果 
• Winload! OslpGatherRdrandEntropy 
– 事实上OS加载器用五种方法试图获得综合的高质量随机数熵源: 
– 外部熵(来自注册表)、TPM熵、实时时间熵、ACPI熵和RDRAND熵 
18
        使用Intel® Secure Key技术 
– IDA Pro 6.3 已经加入了对RDRAND指令的解码支持 
– 可以看到 winload 在启动过程中初始化SecureKey 
19
        使用Intel® Secure Key技术 
– ExGenRandom在内核其他的方面的使用： 
• 内存池配额Cookie 
• 内存池地址分配随机化 
• PEB/TEB地址随机化 
• 内核模块随机化 
• 线程栈地址空间和堆地址随机化 
– 传递给用户态使用 
• Shared User Data->Cookie(ring3 Ldr*编解码) 
• 用户态地址分配随机化 
• 内存映射和镜像映射地址分配随机化 
20
        使用Intel® Secure Key技术 
– Guillaume: Bypassing ASLR and DEP on Adobe Reader X 
– Adobe Reader X 和Chrome的沙箱使用 VirtualAllocEx分配并放置
System Call Stub跳转代码 
– Win7及以前的操作系统上VirtualAllocEx分配的地址未随机化，每次启
动时有85%以上的几率落在固定地址 
– 利用SystemCallStub跳转代码分配内配内存，绕过DEP+ASLR 
– Windoows8：进程启动时MmInitializeProcessAddressSpace调用
ExGenRandom的生成地址随机数种子 
– NtAllocateVirtualMemory时使用MiSelectAddress通过已经生成的随
机数熵来跳转随机地址进行分配 
21
        使用Intel® Secure Key技术 
– Windows7和Windows8分配用户地址随机化的对比实验 
– 分别启动20次 计算器(calc.exe)来分配远程内存 
22
        使用Intel® SMEP 技术 
– SMEP : Supervisor-Mode Execution Prevention 
– 内核模式执行保护机制，同样来自Intel第三代Core处理器 
– Intel CPU提供的新保护机制，可以禁止从Ring0(Supervisor Mode)执
行标记为Ring3(User Mode)地址空间的代码 
– 背景：绝大多数内核漏洞攻击都使用一些技巧使内核代码跳转到预先放
置在用户地址空间的 ShellCode 
– 经典的技巧： 
– 替换HalDispatchTable-> HalQuerySystemInformation 
– 为什么将ShellCode放在Ring3：payload问题和地址随机化 
23
        使用Intel® SMEP 技术 
– SMEP开启后： 
• Ring0下(CPL Phase1InitializationDiscard -
>KiInitMachineDependent 
24
        使用Intel® SMEP 技术 
– MI_CHECK_KERNEL_NOEXECUTE_FAULT 
– Windows8在页面异常中断处理KiTrap0E 中用于处理两种不可执行的页
面异常：非执行页面和SMEP 
– 检测到若是支持SMEP的CPU上发生用户态页面的指令存取异常，则触
发BSOD 
25
        使用Intel® SMEP 技术 
– 绕过SMEP的一个主意：通过确定的对象地址进行，向对象内存中放入
一些代码 
– NtQuerySystemInformation->SystemHandleInformation(Ex) 
– 可利用的对象：FileObject ? 
26
        使用Intel® SMEP 技术 
– Windows8不可行： SMEP + NonPagedPoolNx 
– 所有的对象内存都已经不可执行 
– 对象内存的PoolType是由系统初始化时调用ObCreateObjectType时指
定( IoCreateObjectTypes) 
– Windows8上已经指定FileObject的PoolType为NonPagedPoolNx 
27
        使用Intel® SMEP 技术 
– Windows8 RP SMEP 已知攻击方式防御状况 
攻击方式 
Windows 8防御方式 
SystemHandleInformation(Ex) 
内核对象非分页内存Nx 
SystemLockInformation 
Safe Linking/Unlinking 
SystemModuleInformation 
模块数据区无保护/代码区写保护 
SystemExtendProcessInformation 
无保护 
GDT/IDT 
无保护 
0xFFDF0000 (User Shared Data) 
MiProtectKernelRegions 设置Nx 
0xFFC00000~0xFFFFFFFF(KPCR) 
KPCR不固定地址/FFDFF000清空 
Win32k Shared Section 
USER/内核对象分页内存Nx 
28
参考 
– Intel. Intel® Digital Random Number Generator Software 
Implementation Guide 
– Intel. Intel® 64 and IA-32 Architectures Developer's Manual: 
Vol. 3A 
– J00ru . Exploiting the otherwise non-exploitable:Windows 
Kernel-mode GS Cookies subverted 
– H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. 
Boneh.On the Effectiveness of Address-Space Randomization 
– Guillaume. Bypassing ASLR and DEP on Adobe Reader X 
29
Q&A 
– 感谢: 
• CHROOT Security Group 
• 360Safe  MDT/HIPS Team 
30