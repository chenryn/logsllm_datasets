title:Fibbing in action: On-demand load-balancing for better video delivery
author:Olivier Tilmans and
Stefano Vissicchio and
Laurent Vanbever and
Jennifer Rexford
On-demand load-balancing for better video delivery
Fibbing in action:
Olivier Tilmans‡∗, Stefano Vissicchio‡†, Laurent Vanbever§, Jennifer Rexford¶
‡ Université catholique de Louvain, § ETH Zürich, ¶Princeton University
‡ PI:EMAIL, § PI:EMAIL, ¶ PI:EMAIL
ABSTRACT
Video streaming, in conjunction with social networks,
have given birth to a new traﬃc pattern over the Inter-
net: transient, localized traﬃc surges, known as ﬂash
crowds. Traditional traﬃc-engineering methods can hardly
cope with these surges, as they are unpredictable by
nature. Consequently, networks either have to be over-
provisioned, which is expensive and wastes resources,
or risk to periodically incur congestion, which infuriates
customers. This demonstration shows how Fibbing [1]
can improve network performance and preserve users’
quality of experience when accessing video streams, by
implementing a ﬁne-grained load-balancing service. This
service leverages two unique features of Fibbing: pro-
gramming per destination load-balancing and imple-
menting uneven splitting ratios.
CCS Concepts
•Networks → Network protocols; Programmable
networks; Network management; Network archi-
tectures;
Keywords
Fibbing; traﬃc engineering; link-state routing
1.
INTRODUCTION
Interactive applications (e.g., video streaming) im-
pose hard constraints on the performance of networks
(e.g., on losses or delay) in order to ensure a good qual-
ity of experience for their users. To guarantee good
∗O. Tilmans is supported by a grant from F.R.S.-FNRS FRIA.
†S. Vissicchio is a postdoctoral researcher from F.R.S.-FNRS.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’16, August 22–26, 2016, Florianopolis, Brazil
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959084
network performance, operators typically rely on traf-
ﬁc engineering (TE). However, traditional TE schemes
pre-compute a network conﬁguration for a predictable
load (e.g., expressed as traﬃc matrices), which is hardly
eﬀective in the events of ﬂash crowds [2]. For example, a
sudden surge of traﬃc due to content shared over social
networks could congest parts of the network, leading to
service outages. Operators can thus either vastly over-
provision their networks, hindering their proﬁtability,
or be at risk of service disruption.
This demonstration illustrates how Fibbing [1] can
improve network performance in the events of a ﬂash
crowds targeting content delivery services in a network.
Such a support is based on two unique abilities of Fib-
bing, that is, (i) to program multiple paths a on a per-
destination basis with very limited control-plane over-
head, and (ii) to enforce uneven load-balancing among
those paths with no data-plane overhead. This also dis-
tinguishes Fibbing from previously-studied approaches,
from IGP multi-path to MPLS RSVP-TE [3], and will
be presented in Sec. 2. We will then demonstrate in
Sec. 3 a Fibbing controller quickly removing the conges-
tion in a small network, by combining these two building
blocks, to successfully deliver videos to multiple users.
This demo also shows that it is possible and proﬁtable
to build applications on top of the Fibbing machinery.
2. FLEXIBLE ECMP WITH FIBBING
Most IP networks run a link-state Interior Gateway
Protocol (IGP). IGPs build the routing tables of each
router by by computing the shortest-paths on shared
weighted graph. Consider the sample network control-
plane shown on Fig. 1a, where unspeciﬁed link weights
are 1. These weights are the results of an IGP-TE opti-
mization minimizing the maximal link load under nor-
mal condition. Assume that there is a sudden surge of
traﬃc from two sources towards destinations belonging
to the blue preﬁx. With the chosen set of link weights,
the maximal link load in the network increases drasti-
cally, potentially overloading some links (see Fig. 1b).
The original TE scheme lacks ﬂexibility to react to
such event. Indeed, adapting to the new traﬃc demands
requires to change the link weights on a per-device ba-
sis. This process is too slow for a transient event, and
A
B
2
2
2
R2
R3
IGP
metric
R1
R4
C
Router
Destination
preﬁx
Relative load
increase
A
S2
100
Traﬃc
source
Traﬃc
ﬂow
R3
Traﬃc
destination
S1
B
200
R2
200
C
D1
D2
R1
R4
Overloaded
link
fA
3
R1
R4
Fake node, link,
and mapping
to interface
2
fB
2
fA
A
B
3
2
2
R2
R3
C
S2
66
A
33
S1
B
66
66
R3
66
R2
66
C
D1
D2
R1
66
R4
66
(a) The IGP shortest paths
starting at A and B overlaps
along B–R2–C.
(b) The data-plane traﬃc
from sources to clients could
overload links B–R2–C.
(c) Fibbing augments
the
topology with fake elements
to create additional paths to-
wards the blue preﬁx.
(d) The data-plane traﬃc is
split across all paths, intro-
ducing uneven load-balancing
at router A.
Figure 1: As Fibbing provides a ﬁne-grained control over ECMP, it can dynamically add new paths in order to
cancel the eﬀect of a surge of traﬃc and reduce the maximal link load.
may impact negatively other traﬃc ﬂows. Furthermore,
as ECMP will load-balance the traﬃc evenly across all
next-hops, reaching the optimal conﬁguration is an in-
tractable problem [4]. Using MPLS and RSVP-TE avoids
the shortcomings of the IGP, but introduces overhead
on both the control and data planes, by establishing a
potentially-high number of tunnels, encapsulating pack-
ets, and performing statefull uneven load-balancing.
Fibbing provides better tools to react to ﬂash crowds.
By injecting fake nodes and links in the underlying IGP
topology, Fibbing achieves full control over the available
paths and their cost, on a per destination basis. More-
over, by adding redundant equal-cost paths, Fibbing im-
plements on-demand fractional splitting of traﬃc. Fib-
bing can thus theoretically implement the optimal solu-
tion to the min-max link utilization problem [5], without
pre-provisioning tunnels or changing link weights.
As shown by Fig. 1c, a Fibbing controller can inject a
fake node f B attached to B, announcing the blue preﬁx
at cost of 2. This will trick B in computing 2 equal-costs
paths, B–R2–C and B–R3–C. Similarly, 2 fake nodes
attached to A cause that router to compute 3 diﬀerent
paths. When installed into the routers’ FIB, these fake
nodes are then resolved to physical next-hops (R3 for
f B, and R1 twice for f A). Fig.1d shows the resulting
data-plane ﬂows and link utilization.
3. DEMO
Setup. We emulate the network in Fig. 1a. The
sources are video streaming servers, and the destina-
tions are playback clients. A Fibbing controller, con-
nected to R3, monitors link loads using SNMP, and is
notiﬁed by the servers when they have a new client.
Experiment. Multiple clients (D1) request videos
to S1. As the link loads increase, the Fibbing con-
troller introduces ECMP on B by injecting a fake node
for router B as shown on Fig. 1c in order to prevent con-
gestion. Before the ﬁrst series of videos ﬁnishes, a sec-
ond set of clients (D2) requests video playbacks to S2.
A–R1
B–R2
B–R3
·106
]
s
/
e
t
y
b
[
t
u
p
h
g
u
o
r
h
T
4
3
2
1
0
0
15
35
Time [s]
Figure 2: Fibbing decreases the maximal link load while
the overall load of the network increases by adding
equal-cost paths and controlling splitting ratios.
The controller then introduces uneven load-balancing
at A, by injecting two fake nodes on A as in Fig. 1d.
Results. The video playbacks are smooth when the
Fibbing controller is in use and stutter when disabled.
Fig. 2 plots the throughputs over time over the links
A–R1, B–R2 and B–R3, with a single ﬂow from S1
to D1 (at t = 0s), then adding 30 more (at t = 15s),
then adding 31 ﬂows from S2 to D2 (at t = 35s). As
the network load increases, we see that additional paths
are used, preventing congestion from happening.
The source code for the Fibbing controller, the scripts
to build a virtual machine and sample labs including
this demo are available on www.fibbing.net.
4. REFERENCES
[1] S. Vissicchio et al., “Central control over
distributed routing,” in SIGCOMM, 2015.
[2] I. Ari et al., “Managing ﬂash crowds on the
internet,” in MASCOTS, IEEE, 2003.
[3] N. Wang et al., “An overview of routing
optimization for internet traﬃc engineering,”
Communications Surveys & Tutorials, IEEE, 2008.
[4] M. Chiesa et al., “Traﬃc engineering with
equal-cost-multipath: An algorithmic perspective,”
in INFOCOM, 2014.
[5] R. Ahuja et al., Network ﬂows: theory, algorithms,
and applications. Prentice Hall, Inc., 1993.