# Practical Attack Graph Generation for Network Defense

## Authors
Kyle Ingols, Richard Lippmann, Keith Piwowarski  
MIT Lincoln Laboratory  
244 Wood Street, Lexington, Massachusetts 02420-9108  
Email: {kwi, rpl, piwowk}@ll.mit.edu

## Abstract
Attack graphs are a valuable tool for network defenders, as they illustrate the paths an attacker can use to gain access to a targeted network. Defenders can then focus their efforts on patching vulnerabilities and configuration errors that allow the greatest access to attackers. We have developed a new type of attack graph, the multiple-prerequisite graph (MP graph), which scales nearly linearly with the size of a typical network. We have built a prototype system using this graph type, which uses readily available source data to automatically compute network reachability, classify vulnerabilities, build the graph, and recommend actions to improve network security. The prototype has been tested on an operational network with over 250 hosts, where it helped discover a previously unknown configuration error. It has also processed complex simulated networks with over 50,000 hosts in under four minutes.

## 1. Introduction
Defending large enterprise networks is challenging. A defender must locate all possible entry points and prevent attackers from using them, while an attacker needs to find only one unprotected path. A network defender has the advantage of intimate knowledge of the network, including traffic patterns, services, and vulnerabilities. This knowledge can be leveraged to improve situational awareness. Attack graphs are one way to utilize this data. The core idea of an attack graph is to show how an attacker can compromise a network or host, allowing defenders to identify critical bottlenecks and prioritize securing those hosts and services.

Previous work on attack graphs has faced two significant challenges. First, a large amount of source data is required to accurately build an attack graph, and many past papers assume this data is preprocessed and extensive. While this assumption is valid for theoretical graph design, it is impractical for real-world implementation. Our system assumes the data is provided in common formats and performs all necessary preparatory work. Second, past research has struggled to scale to large, enterprise-size networks with tens of thousands of hosts. We have focused on scalability and developed a system capable of handling very large networks in reasonable time using commodity hardware.

Our system, called NetSPA, imports data from common sources such as the Nessus vulnerability scanner, Sidewinder and Checkpoint firewalls, the Common Vulnerabilities and Exposures (CVE) dictionary, and the National Vulnerability Database (NVD). It automatically computes network reachability, generates an attack graph showing how an attacker can maximally compromise the targeted network, and models an attacker starting from any IP address, exploiting any special "holes" in perimeter firewalls. NetSPA builds MP graphs, which are faster to construct and more expressive than our previous predictive graphs. MP graphs can model portable credentials, such as passwords, which an attacker can use from anywhere to compromise a target.

We have implemented a working prototype in Perl and C++ that can automatically compute reachability, generate an MP graph, analyze it, and produce the graph and recommended actions as output. We have tested the prototype on both real and simulated networks, achieving significant results. For example, it processed a simulated network with over 50,000 hosts in under four minutes.

## 2. Data Used by the NetSPA Tool
NetSPA's network model assumes that each host has one or more interfaces with listening addresses. These interfaces have zero or more open ports, accepting connections from other hosts. Hosts and their interfaces may have rules dictating how network traffic flows. Ports have zero or more vulnerability instances, which may be exploitable by an attacker. Each interface is connected to a link, representing a combination of hubs and switches. An attacker can obtain one of four access levels: "root," "user," "DoS," or "other." The combination of a host and an access level is an attacker state. A state may provide the attacker with zero or more credentials; vulnerability instances may require zero or more of these credentials. An attacker obtains a host's reachability if they have "root" or "user" access.

Network topology is obtained from both the user and the Nessus vulnerability scanner. The user must provide a map of the network, enumerating links and indicating which Nessus scans belong to which link and which multi-homed hosts' interfaces are on which links. Firewall rulesets are also part of the network model; the user provides the original rulesets, which NetSPA converts to an internal format. Nessus provides information on individual interfaces, ports, and vulnerability instances.

## 3. Computing Reachability
Computing reachability is a complex and time-consuming task, but it is essential for an attack graph system applicable to real networks. Reachability computation uses available information on the network topology, filtering devices, and hosts to find paths between source hosts and target ports. The rulesets of all filtering devices must be imported and modeled.

A straightforward method to compute reachability is to try to reach every known target IP address and port from every host in the network, generating a reachability matrix. However, this approach scales poorly in terms of both space and time. We have made three improvements to this approach:
1. **Reachability Groups:** We collapse sections of the matrix into reachability groups, saving time and memory.
2. **Binary Decision Diagrams (BDDs):** Filtering rulesets are collapsed into BDDs, allowing constant-time traversal of a set of filtering rules.
3. **Generic Attacker Hypothesis:** We select a link for the attacker to start and allow the attacker to use the most advantageous source IPs.

Reachability groups identify redundancies in the reachability matrix and collapse submatrices into single subrows before computing the contents, saving both time and space. Intra-subnet reachability, not influenced by any filtering devices, can be collapsed into a single subrow. Inter-subnet reachability can be collapsed by identifying sets of interfaces within a subnet that are treated identically by the filtering devices.

BDDs reduce the cost of computing an individual cell. Our implementation uses the ideas of the FIREMAN firewall modeler to collapse filtering rulesets into a BDD, permitting constant-time traversal of a ruleset. Like FIREMAN, the NetSPA prototype uses the BuDDy library to manipulate BDDs.

It is important to consider an attacker coming from an arbitrary source location. Production firewall rulesets are often large and may contain mistakes allowing unintended traffic. NetSPA discovers the source IP addresses of greatest advantage to an attacker, uncovering interesting flaws and vulnerabilities in the network configuration.

## 4. Vulnerability Evaluation
In addition to network-specific data, the system requires additional knowledge about vulnerabilities. Nessus can identify hosts, interfaces, and ports on a network, pinpointing where vulnerabilities are. However, Nessus does not clearly articulate a vulnerability's prerequisites or what an attacker gains by exploiting it. We define a straightforward representation to model vulnerability prerequisites and postconditions.

In our model, a vulnerability has locality, indicating whether it is remotely exploitable. It provides an effect, which is one of the four access levels an attacker can obtain: root, user, DoS, or other. When known, any credentials required for exploitation are also considered. The vulnerability model is simple because available data constrains the fidelity. Vulnerability databases such as NVD and Bugtraq describe vulnerabilities' impacts in detail, but much of the available data is intended for human consumption and may be incorrect or out of date. NetSPA uses a simple logistic regression classifier, trained on a hand-evaluated sample set, to automatically classify vulnerabilities.

Our attacker model is also simple: the attacker knows about all vulnerabilities and will successfully exploit all reachable vulnerabilities to their fullest effect. A worst-case attacker model prevents false negatives and requires no additional assumptions about the potential threat.

## 5. Attack Graphs
For the sample network in Figure 1, it is easy to determine attack paths manually. The attacker from host A can directly compromise hosts B, C, and D. From C or D, the attacker can traverse the firewall and compromise host E. From E, the attacker can compromise host F, completing the process. The paths are monotonic, assuming an attacker will never need to relinquish a state. The assumption of monotonicity simplifies the task of modeling attacker actions and has been made in several other papers.

Part of a full graph for the sample network is shown in Figure 3a. Nodes correspond to states, and edges to vulnerability instances. Full graphs add a node to the graph if no ancestor node has the same state as the new node and was reached via the same vulnerability as the new node. To conserve space, the children of the B and C nodes at the top level are omitted from the figure.

Full graphs illustrate every order in which the attacker can compromise the hosts in the network, but they scale as O(n!) and quickly become too large to compute as the network size increases. A predictive graph is shown in Figure 3b. Nodes and edges have the same meanings as in the full graph. Predictive graphs add a node to the graph if no ancestor of the current node used the same vulnerability to obtain the same state as the new node. They avoid much of the redundant structure of the full graph and correctly predict the impact of removing any of the vulnerability instances in the network. Predictive graphs are much faster to build than full graphs and have been used on large, real networks, but they still include redundant structure in some cases.

## 6. Using the Resulting Graph
The resulting graph can be used in several ways. It can be simplified for viewing and analyzed to produce recommended defensive actions. Simplification techniques include collapsing nodes and edges to make the graph more manageable. Automatic analysis can identify critical paths and suggest actions to secure the network, such as patching vulnerabilities or reconfiguring firewalls.

## 7. Tests on Real and Simulated Networks
We have tested the prototype on both real and simulated networks. On an operational network with over 250 hosts, the prototype helped discover a previously unknown configuration error. It has also processed complex simulated networks with over 50,000 hosts in under four minutes, demonstrating its scalability and effectiveness.

## 8. Related Work
Many papers have been published on attack graphs and their representations. Our work builds on and extends these previous efforts, particularly in terms of scalability and the ability to handle large, enterprise-size networks.

## 9. Conclusion
In conclusion, we have developed a new type of attack graph, the multiple-prerequisite graph, which scales nearly linearly with the size of a typical network. Our prototype system, NetSPA, uses readily available source data to automatically compute network reachability, classify vulnerabilities, build the graph, and recommend actions to improve network security. The system has been tested on both real and simulated networks, demonstrating its effectiveness and scalability.

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.