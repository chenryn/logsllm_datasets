            host = line; 
            smtp_respond(fd, SMTP_SUCCESS, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
944 
                        "hello %s, nice to meet you\n", host); 
            break; 
        ... 
    } 
} 
The smtp_respond() function causes problems when users supply long strings as 
arguments, which they can do in smtp_docommand(). Simple buffer overflows like this 
one are more likely to occur in applications that haven't been audited thoroughly, as 
programmers are usually more aware of the dangers of using strcpy() and similar 
functions. These simple bugs still pop up from time to time, however. 
Pointer arithmetic errors are more common than these simple bugs because they are 
generally more subtle. It's fairly easy to make a mistake when dealing with pointers, 
especially off-by-one errors (discussed in more detail in Chapter 7(? [????.])). These 
mistakes are especially likely when there are multiple elements in a single line of text 
(as in most text-based protocols). 
Text-Formatting Issues 
Using text strings opens the doors for specially crafted strings that might cause the 
program to behave in an unexpected way. With text strings, you need to pay 
attention to string-formatting issues (discussed in Chapter 8(? [????.]), "Program 
Building Blocks") and resource accesses (discussed in more detail in "Access to 
System Resources"). However, you need to keep your eye out for other problems in 
text data decoding implementations, such as faulty hexadecimal or UTF-8 decoding 
routines. Text elements might also introduce the potential for format string 
vulnerabilities in the code. 
Note 
Format string vulnerabilities can occur in applications that deal with binary or 
text-based formats. However, they're more likely to be exploitable in applications 
dealing with text-based protocols because they are more likely to accept a format 
string from an untrusted source. 
Data Verification 
In many protocols, the modification (or forgery) of exchanged data can represent a 
security threat. When analyzing a protocol, you must identify the potential risks if 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
945 
false data is accepted as valid and whether the protocol has taken steps to prevent 
modifications or forgeries. To determine whether data needs to be secured, ask these 
simple questions: 
Is it dangerous for third parties to read the information going across the 
network? 
Could forged or modified data result in a security breach of the receiver? 
If the answer to the first question is yes, is encryption necessary? This chapter 
doesn't cover the details of validating the strength of a cryptographic implementation, 
but you can refer to the discussion of confidentiality in Chapter 2(? [????.]) on 
enforcing this requirement in design. If the answer to the second question is yes, 
verification of data might be required. Again, if cryptographic hashing is already used, 
you need to verify whether it's being applied in a secure fashion, as explained in 
Chapter 2(? [????.]). Forging data successfully usually requires that the protocol 
operate over UDP rather than TCP because TCP is generally considered adequate 
protection against forged messages. However, modification is an issue for protocols 
that operate over both UDP and TCP. 
If you're auditing a well-known and widely used protocol, you need not worry 
excessively about answering the questions on authentication and sensitivity of 
information. Standards groups have already performed a lot of public validation. 
However, any implementation could have a broken authentication mechanism or 
insecure use of a cryptographic protocol. For example, DNS message forging using 
the DNS ID field is covered in "DNS Spoofing(? [????.])" later in this chapter. This 
issue is the result of a weakness in the DNS protocol; however, whether a DNS client 
or server is vulnerable depends on certain implementation decisions affecting how 
random the DNS ID field is. 
Access to System Resources 
A number of protocols allow users access to system resources explicitly or implicitly. 
With explicit access, users request resources from the system and are granted or 
denied access depending on their credentials, and the protocol is usually designed as 
a way for users to have remote access to some system resources. HTTP is an example 
of just such a protocol; it gives clients access to files on the system and other 
resources through the use of Web applications or scripts. Another example is the 
Registry service available on versions of Microsoft Windows over RPC. 
Implicit access is more of an implementation issue; the protocol might not be 
designed to explicitly share certain resources, but the implementation provisions 
access to support the protocols functionality. For example, you might audit a protocol 
that uses data values from a client request to build a Registry key that's queried or 
even written to. This access isn't mentioned in the protocol specification and happens 
transparently to users. Implicit access is often much less protected that explicit 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
946 
access because a protocol usually outlines a security model for handling explicit 
resource access. Additionally, explicit resource accesses are part of the protocol's 
intended purpose, so people tend to focus more on security measures for explicit 
resource access. Of course, they might be unaware of implicit accesses that happen 
when certain requests are made. 
When you audit an application protocol, you should note any instances in which 
clients can access resourcesimplicitly and explicitlyon the system, including reading 
resources, modifying existing resources, and creating new ones. Any application 
accesses quite a lot of resources, and it's up to you to determine which resource 
accesses are important in terms of security. For example, an application might open 
a configuration file in a static location before it even starts listening for network traffic. 
This resource access probably isn't important because clients can't influence any part 
of the pathname to the file or any part of the file data. (However, the data in the file 
is important in other parts of the audit because it defines behavioral characteristics 
for the application to adhere to.) 
After you note all accesses that are interesting from a security perspective, you need 
to determine any potential dangers of handling these resources. To start, ask the 
following questions: 
Is credential verification for accessing the resource adequate? You need to 
determine whether users should be allowed to access a resource the 
application provides. Maybe no credentials are required, and this is fine for a 
regular HTTP server providing access to public HTML documents, for example. 
For resources that do require some level of authentication, is that 
authentication checked adequately? The answer depends on how the 
authentication algorithm is designed and implemented. Some algorithms rely 
on cryptographic hashes; others might require passwords or just usernames, 
ala RPC_AUTH_UNIX. Even if cryptography is used, it doesn't mean 
authentication is foolproof. Small implementation oversights can lead to major 
problems. Refer to Chapter 2(? [????.]) to help you determine whether any 
cryptographic authentication in use is adequate for your purposes. 
Does the application give access to resources that it's supposed to? Often an 
application intends to give access to a strict subset of resources, but the 
implementation is flawed and specially crafted requests might result in 
disclosure of resources that should be off-limits. For example, the Line Printer 
Daemon (LPD) service takes files from a client and puts them in a spool 
directory for printing. However, if filenames are supplied with leading double 
dots (..), some implementations erroneously allowed connecting clients to 
place files anywhere on the system! When assessing an application for similar 
problems, the material from Chapter 8(? [????.]) offers detailed information 
on reviewing code that handles path-based access to resources. 
8.3.3 Hypertext Transfer Protocol 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
947 
Hypertext Transfer Protocol (HTTP) is used to serve dynamic and static content from 
servers to clients (typically Web browsers). It's a text-based protocol, so many of the 
vulnerabilities in C/C++ HTTP implementations result from string manipulation 
errorsbuffer overflows or incorrect pointer arithmetic. 
Note 
The popularity of HTTP has caused its design to influence a number of other protocols, 
such as RTSP (Real Time Streaming Protocol) and SIP (Session Initiation Protocol). 
These similarities in design generally lead to similar problem areas in the 
implementation, so you can leverage your knowledge of one in reviewing the other. 
HTTP is discussed in more depth when covering Web applications in Chapter 17(? 
[????.]), "Web Applications," but this section gives you a quick overview. HTTP 
requests are composed of a series of headers delineated by end-of-line markers 
(CRLF, or carriage return and linefeed). The first line is a mandatory header indicating 
the method the client wants to perform, the resource the client wants to access, and 
the HTTP version. Here's an example: 
GET /cgi-bin/resource.cgi?name=bob HTTP/1.0 
The method describes what the client wants to do with the requested resource. 
Typically, only GET, HEAD, and POST are used for everyday Web browsing. Chapter 17(? 
[????.]) lists several additional request methods. 
Header Parsing 
One of the most basic units of HTTP communication is the HTTP header, which is 
simply a name and value pair in the following format: 
name: value 
Headers can generally have any name and value. The HTTP server handling the 
request simply ignores a header it doesn't recognize; that is, the unknown header is 
stored with the rest of the headers and passed to any invoked component, but no 
special processing occurs. The code for parsing headers is fairly simple, so it's unlikely 
to contain vulnerabilities. However, a special type of header, known as a folded 
header, is more complex and could lead to processing vulnerabilities. 
Headers are usually one line long, but the HTTP specification allows multiline headers, 
which have a normal first line followed by indented lines, as shown: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
948 
name: value data 
    more value data 
    even more value data 
HTTP servers that support this header might make assumptions about the maximum 
size of a header and copy too much data when encountering folded headers, as shown 
in this example: 
int read_header(int soc, char **buffer) 
{ 
    static char scratch[HTTP_MAX_HEADER], *line; 
    unsigned int size = HTTP_MAX_HEADER, read_bytes = 0; 
    int rc; 
    char c; 
    for(line = scratch;;){ 
        if((rc = read_line(sock, line+read_bytes, 
                          HTTP_MAX_HEADER)) < 0) 
            return 1; 
        if(peek_char(sock, &c) < 0) 
            return 1; 
        if(c != '\t' && c != ' ') 
            return line; 
        size += HTTP_MAX_HEADER; 
        if(line == scratch) 
            line = (char *)malloc(size); 
        else 
            line = (char *)realloc(line, size); 
        if(line == NULL) 
            return 1; 
        read_bytes += rc; 
     } 
} 
struct list *read_headers(int sock) 
{ 
    char *buffer; 
    struct list *headers; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
949 
    LIST_INIT(headers); 
    for(;;){ 
        if(read_header(sock, &buffer) < 0){ 
            LIST_DESTROY(headers); 
            return NULL; 
        } 
    } 
} 
int log_user_agent(char *useragent) 
{ 
    char buf[HTTP_MAX_HEADER*2]; 
    sprintf(buf, "agent: %s\n", useragent); 
    log_string(buf); 
    return 0; 
} 
The log_user_agent() function has an obvious overflow, but normally, it couldn't be 
triggered because the read_header() function reads at most HTTP_MAX_HEADER bytes 
per line, and the buffer in log_user_agent() is twice as big as that. Developers 
sometimes use less safe data manipulation when they think supplying malicious input 
isn't possible. In this case, however, that assumption is incorrect because arbitrarily 
large headers can be supplied by using header folding. 
Accessing Resources 
Exposing resources to clients (especially unauthenticated ones) can be dangerous, 
but the whole point of an HTTP server is to serve content to clients. However, the code 
for requesting access to resources must be careful. There are hundreds of examples 
of HTTP servers disclosing arbitrary files on the file system, as shown in this simple 
example of a bug: 
char *webroot = "/var/www"; 
int open_resource(char *url) 
{ 
    char buf[MAXPATH]; 
    snprintf(buf, sizeof(buf), "%s/%s", webroot, url); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
950 
    return open(buf, O_RDONLY); 
} 
This code is intended to open a client-requested file from the /var/www directory, but 
the client can simply request a file beginning with ../../ and access any file on the 
system. This is possible because no checking is done to handle dots in the filename. 
HTTP servers are also particularly vulnerable to encoding-related traversal bugs. You 
saw an example in Chapter 8(? [????.]), but here's another simple example: 
char *webroot = "/var/www"; 
void hex_decode(char *path) 
{ 
    char *srcptr, *destptr; 
    for(srcptr = destptr = path; *srcptr; srcptr++){ 
        if(*srcptr != '%' || (!srcptr[1] || !srcptr[2])){ 
            *destptr++ = *srcptr; 
            continue; 
        } 
        *destptr++ = convert_bytes(&srcptr[1]); 
            srcptr += 2; 
        } 
        *destptr = '\0'; 
        return; 
} 
int open_resource(char *url) 
{ 
    char buf[MAXPATH]; 
    if(strstr(url, "..")) 
        return -1; // user trying to do directory traversal 
    hex_decode(url); 
    snprintf(buf, sizeof(buf), "%s/%s", webroot, url); 
    return open(buf, O_RDONLY); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
951 
} 
Obviously, this code is dangerous because it does hexadecimal decoding after it 
checks the URL for directory traversal. So a URL beginning with %2E%2E/%2E%2E allows 
users to perform a directory traversal, even though the developers intended to deny 
these requests. 
Some HTTP servers implement additional features or keywords; they are implicitly 
processed by the server to perform a different task with the document being 
requested. Should you encounter a server that does this, familiarize yourself with the 
code dealing with those special features or keywords. Developers often fail to account 
for the security implications of these features because they are operating outside the 
core specification, so vulnerable mistakes or oversights in implementing these 
features are possible. 
Utility Functions 
Most HTTP servers include a lot of utility functions that have interesting security 
implications. In particular, there are functions for URL handlingdealing with URL 
components such as ports, protocols, and paths; stripping extraneous paths; dealing 
with hexadecimal decoding; protecting against double dots; and so forth. Quite a 
large codebase can be required just for dealing with untrusted data, so checking for 
buffer overflows and similar problems is certainly worthwhile. In addition, logging 
utility functions can be interesting, as most HTTP servers log paths and methods, 
which could create an opportunity to perform format string attacks. Here's an 
example of some vulnerable code: 
int log(char *fmt, ...) 
{ 
    va_list ap; 
    va_start(ap, fmt); 
    vfprintf(logfd, fmt, ap); 
    va_end(ap); 
    return 0; 
} 
int log_access(char *path, char *remote_address) 
{ 
    char buf[1024]; 
    snprintf(buf, sizeof(buf), "[ %s ]: %s accessed by %s\n", 
             g_sname, path, remote_address); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
952 
    return log(buf); 
} 
This type of code isn't uncommon (at least it wasn't when format string vulnerabilities 
were first brought to public attention). By having multiple layers of functions that take 
variable arguments, code can easily be susceptible to format string attacks, and 
logging utility functions are one of the most common areas for this code to appear. 
Posting Data 
Another potential danger area in HTTP occurs when handling input supplied via the 
POST method. There are two methods used when supplying data via a POST method: a 
simple counted data post and chunked encoding. 
In a simple counted data post, a block of data is supplied to the HTTP server in a 
message. The size of this data is specified by using the Content-Length header. A 
request might look like this: 
POST /app HTTP/1.1 
Host: 127.0.0.1 
Content-Length: 10 
1234567890 
In this request, the block of data is supplied after the request headers. How this 
length value is interpreted, however, could create a serious vulnerability for an HTTP 
server. Specifically, you must consider that large values might result in integer 
overflows or sign issues (covered in Chapter 6(? [????.]), "C Language Issues"). 
Here's an example of a simple integer overflow: 
char *read_post_data(int sock) 
{ 
   char *content_length, *data; 
   size_t clen; 
   content_length = get_header("Content-Length"); 
   if(!content_length) 
       return NULL; 