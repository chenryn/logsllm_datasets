conn, err := listener.Accept()
if err != nil {
continue
}
str := "j'ai arrêté"
shorts := utf16.Encode([]rune(str))
writeShorts(conn, shorts)
conn.Close() // we're finished
}
}
func writeShorts(conn net.Conn, shorts []uint16) {
var bytes [2]byte
// send the BOM as first two bytes
bytes[0] = BOM >> 8
bytes[1] = BOM & 255
_, err := conn.Write(bytes[0:])
if err != nil {
return
}
for _, v := range shorts {
bytes[0] = byte(v >> 8)
bytes[1] = byte(v & 255)
_, err = conn.Write(bytes[0:])
if err != nil {
return
}
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
while a client that reads a byte stream, extracts and examines the BOM and then decodes
the rest of the stream is
但客户端读取一个字节流，提取并检查BOM 时解码该流的其余部分的。
/* UTF16 Client
*/
package main
import (
"fmt"
"net"
"os"
"unicode/utf16"
)
const BOM = '\ufffe'
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
service := os.Args[1]
conn, err := net.Dial("tcp", service)
checkError(err)
shorts := readShorts(conn)
ints := utf16.Decode(shorts)
str := string(ints)
fmt.Println(str)
os.Exit(0)
}
func readShorts(conn net.Conn) []uint16 {
var buf [512]byte
// read everything into the buffer
n, err := conn.Read(buf[0:2])
for true {
m, err := conn.Read(buf[n:])
if m == 0 || err != nil {
break
}
n += m
}
checkError(err)
var shorts []uint16
shorts = make([]uint16, n/2)
if buf[0] == 0xff && buf[1] == 0xfe {
// big endian
for i := 2; i < n; i += 2 {
shorts[i/2] = uint16(buf[i])<<8 + uint16(buf[i+1])
}
} else if buf[1] == 0xff && buf[0] == 0xfe {
// little endian
for i := 2; i < n; i += 2 {
shorts[i/2] = uint16(buf[i+1])<<8 + uint16(buf[i])
}
} else {
// unknown byte order
fmt.Println("Unknown order")
}
return shorts
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
6.8 Unicode gotcha's Unicode 的疑难杂症
This book is not about i18n issues. In particular we don't want to delve into the
arcane areas of Unicode. But you should know that Unicode is not a simple encoding
and there are many complexities. For example, some earlier character sets
used non-spacing characters, particularly for accents. This was brought into
Unicode, so you can produce accented characters in two ways: as a single Unicode
character, or as a pair of non-spacing accent plus non-accented character. For
example, U+04D6 CYRILLIC CAPITAL LETTER IE WITH BREVE is a single character. It is
equivalent to U+0415 CYRILLIC CAPITAL LETTER IE combined with the breve accent U+0306
COMBINING BREVE. This makes string comparison difficult on occassions. The Go
specification does not at present address such issues.
这本书不是有关国际化问题。特别是，我们不想钻研的神秘的Unicode。但是你应该知道，Unicode
不是一个简单的编码，也有很多的复杂的地方。例如，一些早期的字符集用非空格字符，尤其是重音
字符。这些重音字符要转换成 Unicode 可以用两种办法：作为一个Unicode 字符，或作为一个非空
格字符和非重音字符的组合。例如， U+04D6 CYRILLIC CAPITAL LETTER IE WITH BREVE 是一
个字符。这是相当于 U+0415 CYRILLIC CAPITAL LETTER IE 和U+0306 加上BREVE.。这使得字
符串比较有时变得困难了。 GO 规范确目前没有对这个问题过深研究。
6.9 ISO 8859 and Go ISO 8859 编码和 Go 语言
The ISO 8859 series are 8-bit character sets for different parts of Europe and some
other areas. They all have the ASCII set common in the low part, but differ in the
top part. According to Google, ISO 8859 codes account for about 20% of the web pages
it sees.
ISO 8859 系列字符集都是8 位字符集，他们为欧洲不同地区和其他一些地方设计。他们有相同的
ASCII 并且都在地位，但高位不同。据谷歌估计，ISO 8859 编码了尽20%的网页。
The first code, ISO 8859-1 or Latin-1, has the first 256 characters in common with
Unicode. The encoded value of the Latin-1 characters is the same in UTF-16 and in
the default ISO 8859-1 encoding. But this doesn't really help much, as UTF-16 is
a 16-bit encoding and ISO 8859-1 is an 8-bit encoding. UTF-8 is a 8-bit encoding,
but it uses the top bit to signal extra bytes, so only the ASCII subset overlaps
for UTF-8 and ISO 8859-1. So UTF-8 doesn't help much either.
第一个编码字符集，ISO 8859-1或叫做Latin-1，前256 个字符和Unicode 相同。 Latin-1 字符
的utf-16 和ISO 8859-1 有相同的编码。但是，这并不真的有用，因为UTF-16是一个 16 位的编
码字符集而ISO 8859-1 是8 位编码。 UTF-8 是一种8 位编码，但是高位用来表示更多的字符，所
以只有ASCII 的一部分是utf-8 和ISO 8859-1 相同，所以UTF-8 并没有多大实际用途（都是 8 位
的）。
But the ISO 8859 series don't have any complex issues. To each character in each
set corresponds a unique Unicode character. For example, in ISO 8859-2, the character
"latin capital letter I with ogonek" has ISO 8859-2 code point 0xc7 (in hexadecimal)
and corresponding Unicode code point of U+012E. Transforming either way between an
ISO 8859 set and the corresponding Unicode characters is essentially just a table
lookup.
但ISO8859 系列没有任何复杂的问题。每一组中的每个字符对应一个唯一的 Unicode 字符。例如，
在ISO 8859-2 中的字符“latin capital letter I with ogonek”在 ISO 8859-2 是 0xc7（十
六进制），对应的Unicode 的U+012E。 ISO 8859 字符集和Unicode字符集之间转换其实只是一
个表查找。
The table from ISO 8859 code points to Unicode code points could be done as an array
of 256 integers. But many of these will have the same value as the index. So we just
use a map of the different ones, and those not in the map take the index value.
这个从 ISO 8859 到Unicode 的查找表，可以用一个256 的数组完成。因为，许多字符索引相同。
因此，我们只需要一个标注不同索引的映射就可以。
For ISO 8859-2 a portion of the map is
ISO 8859-2 的映射为
var unicodeToISOMap = map[int] uint8 {
0x12e: 0xc7,
0x10c: 0xc8,
0x118: 0xca,
// plus more
}
and a function to convert UTF-8 strings to an array of ISO 8859-2 bytes is
从utf-8 转换成 ISO 8859-2 的函数
/* Turn a UTF-8 string into an ISO 8859 encoded byte array
*/
func unicodeStrToISO(str string) []byte {
// get the unicode code points
codePoints := []int(str)
// create a byte array of the same length
bytes := make([]byte, len(codePoints))
for n, v := range(codePoints) {
// see if the point is in the exception map
iso, ok := unicodeToISOMap[v]
if !ok {
// just use the value
iso = uint8(v)
}
bytes[n] = iso
}
return bytes
}
In a similar way you cacn change an array of ISO 8859-2 bytes into a UTF-8 string:
同样你可以将ISO 8859-2 转换为utf-8
var isoToUnicodeMap = map[uint8] int {
0xc7: 0x12e,
0xc8: 0x10c,
0xca: 0x118,
// and more
}
func isoBytesToUnicode(bytes []byte) string {
codePoints := make([]int, len(bytes))
for n, v := range(bytes) {
unicode, ok :=isoToUnicodeMap[v]
if !ok {
unicode = int(v)
}
codePoints[n] = unicode
}
return string(codePoints)
}
These functions can be used to read and write UTF-8 strings as ISO 8859-2 bytes.
By changing the mapping table, you can cover the other ISO 8859 codes. Latin-1, or
ISO 8859-1, is a special case - the exception map is empty as the code points for
Latin-1 are the same in Unicode. You could also use the same technique for other
character sets based on a table mapping, such as Windows 1252.
这些函数可以用来将ISO 8859-2 当作UTF-8 来读写。通过改变映射表，可以覆盖其他的 ISO 8859
字符集合。Latin-1 字符集（ISO 8859-1）是一个特殊的情况：地图映射为空，因为字符在 Latin-1
和Unicode 中编码相同。同样的方法，你也可以使用其他字符集构建映射表，如 Windows1252。
6.10 Other character sets and Go 其他字符集和 Go 语言
There are very, very many character set encodings. According to Google, these
generally only have a small use, which will hopefully decrease even further in time.
But if your software wants to capture all markets, then you may need to handle them.
还有非常非常多的字符集编码。据谷歌称，这些字符集通常只有很少地方使用，所以可能用的会更少。
但是，如果你的软件要占据所有市场，那么你可能需要对这些字符集进行处理。
In the simplest cases, a lookup table will suffice. But that doesn't always work.
The character coding ISO 2022 minimised character set sizes by using a finite state
machine to swap code pages in and out. This was borrowed by some of the Japanese
encodings, and makes things very complex.
在最简单的情况下，查找表就够了。但是，这样也不是总是奏效。ISO 2022 字符编码方案通过……。
这是从日本某写编码中借用来个，相当复杂。
Go does not at present give any language or package support for these other character
sets. So you either avoid their use, fail to talk to applications that do use them,
or write lots of your own code!
Go 语言目前在语言本身和包文件上支持其他字符集。所以，你要么避免使用其他字符集，虽然没法
和用这些字符集的程序共存，要么自己动手写很多代码。
6.11 Conclusion 总结
There hasn't been much code in this chapter. Instead, there have been some of the
concepts of a very complex area. It's up to you: if you want to assume everyone speaks
US English then the world is simple. But if you want your applications to be usable
by the rest of the world, then you need to pay attention to these complexities.
这一章没有什么代码，却有几个非常复杂的概念。当然，也取决于你：你要只满足说美式英语的人，
那问题就简单了；要是你的应用也要让其他人可用，那你就要在这个复杂的问题上花点精力了。
Copyright Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 7 第七章
Security 安全
7.1 Introduction 简介
Although the internet was originally designed as a system to withstand atacks by
hostile agents, it developed in a co-operative environment of relatively trusted
entities. Alas, those days are long gone. Spam mail, denial of service attacks,
phishing attempts and so on are indicative that anyone using the internet does so
at their own risk.
尽管互联网最初被设计为可以承受敌对代理攻击的系统，但它过去一直是在一个可信的实体和合作的
环境中发展起来的。可惜现在已经时过境迁。垃圾邮件，拒绝服务攻击，网络钓鱼这些东西使得每一
个上网者都需要自行承担风险。
Applications have to be built to work correctly in hostile situations. "correctly"
no longer means just getting the functional aspects of the program correct, but also
means ensuring privacy and integrity of data transferred, access only to legitimate
users and other issues.
应用程序应当在复杂的互联网环境中仍然可以正确工作。“正确”不光意味着程序功能的正确，同时还
意味着要确保数据传输过程中的保密性和完整性，甚至只允许合法用户进行访问和其它问题。
This of course makes your programs much more complex. There
are difficult and subtle computing problems involved in making applications secure.
Attempts to do it yourself (such as making up your own encryption libraries) are
usually doomed to failure. Instead, you need to make use of libraries designed by
security professionals
这自然使得编程更加复杂。在构建安全应用程序的过程中，会出现很复杂和微妙的问题。如果你想自
己这样做(如实现一个自有安全库)，通常都会以失败而告终。相反，你需要使用安全专家设计的安全
库。
7.2 ISO security architecture ISO 安全架构
The ISO OSI (open systems interconnect) seven-layer model of distributed systems
is well known and is repeated in this figure:
ISO OSI（开放系统互连）七层模型分布式系统是众所周知的，在此重复如下图：
What is less well known is that ISO built a whole series of documents upon this
architecture. For our purposes here, the most important is the ISO Security
Architecture model, ISO 7498-2.
少为人知的是，ISO 在此架构的基础上建立了一系列完整的文档。而我们这里最重要的是 ISO 安全体
系结构模型（ISO Security Architecture model）ISO 7498-2。
Functions and levels
功能层次
The principal functions required of a security system are
主要的安全系统功能
 Authentication - proof of identity
 Data integrity - data is not tampered with
 Confidentiality - data is not exposed to others
 Notarization/signature
 Access control
 Assurance/availability
 认证 - 身份校验文件
 数据完整性 - 数据不被篡改
 保密 - 数据不能暴露给他人
 公证/签名
 访问控制
 保证/可用性
These are required at the following levels of the OSI stack:
必须的OSI 协议栈
 Peer entity authentication (3, 4, 7)
 Data origin authentication (3, 4, 7)
 Access control service (3, 4, 7)
 Connection confidentiality (1, 2, 3, 4, 6, 7)
 Connectionless confidentiality (1, 2, 3, 4, 6, 7)
 Selective field confidentiality (6, 7)
 Traffic flow confidentiality (1, 3, 7)
 Connection integrity with recovery (4, 7)
 Connection integrity without recovery (4, 7)
 Connection integrity selective field (7)
 Connectionless integrity selective field (7)
 Non-repudiation at origin (7)
 Non-repudiation of receipt (7)
 对等实体认证 (3, 4, 7)
 数据源认证 (3, 4, 7)
 访问控制服务 (3, 4, 7)
 连接保密 (1, 2, 3, 4, 6, 7)
 无连接的保密 (1, 2, 3, 4, 6, 7)
 选择性字段的保密 (6, 7)
 传输保密 (1, 3, 7)
 恢复连接的完整性 (4, 7)
 不可恢复连接的完整性 (4, 7)
 选择字段连接完整性 (7)
 选择字段的无连接完整性 (7)
 接受源 (7)
 接受回执 (7)
Mechanisms
机制
 Peer entity authentication
o encryption
o digital signature
o authentication exchange
 Data origin authentication
o encryption
o digital signature
 Access control service
o access control lists
o passwords
o capabilities lists
o labels
 Connection confidentiality
o ecryption
o routing control
 Connectionless confidelity