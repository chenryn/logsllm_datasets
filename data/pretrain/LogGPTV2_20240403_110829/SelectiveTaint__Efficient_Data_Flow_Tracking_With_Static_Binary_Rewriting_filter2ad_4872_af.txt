4,418
2,584
69,233
9,774
88,876
15,044
59,105
47,078
34,367
24,912
1,024
36,439
6,320
36,706
4,813
64,479
7,792
6,825
3,501
4,242
2,321
3,796
17,444
3,141
10,711
5,274
14,187
4,484
6,404
4,582
2,854
80,395
11,336
155,908
27,788
219,880
67,608
34,431
26,071
1,040
53,220
6,463
42,782
4,927
A-Loc
18,428
3,506
2,182
1,837
2,195
1,630
1,940
6,709
1,795
4,453
2,577
5,553
2,340
2,862
2,263
1,862
36,011
5,435
43,670
9,466
31,199
26,241
17,725
9,470
454
22,185
2,947
15,529
2,127
Uninit.
CLI
6
6
6
7
6
6
6
7
7
6
6
7
6
6
6
6
7
7
8
7
6
7
7
6
7
7
6
6
6
Value Set Analysis
Uninit.
Arg. Alias
Uninit.
Lib
Utilities
243
97
43
67
153
126
80
101
118
191
130
197
102
72
145
114
2,217
253
283
246
388
199
203
951
252
421
342
706
328
394
389
217
Network daemons
214
38
228
217
807
3,311
866
4,633
598
1,100
Other applications
1,828
2,023
1,506
94
537
514
1,032
495
1,196
465
137
17
1,415
19
154
18
Uninit.
Total
1st-pass
Untaint-V
Taint Instruction Identiﬁcation
Last-pass
Untaint-V
#Intra.
Iteration
2,376
356
332
320
547
331
289
1,059
377
618
478
910
436
472
540
337
3,532
911
4,869
814
1,913
3,031
2,495
1,649
118
1,959
539
1,192
519
11,237
3,272
2,005
1,834
1,828
1,408
1,497
5,451
1,602
3,608
2,122
4,565
1,881
2,102
1,907
1,521
16,598
3,865
10,559
8,215
19,051
16,898
8,908
4,401
393
10,806
1,842
6,712
1,605
8,441
1,892
1,387
1,834
1,361
1,086
1,338
4,196
1,085
3,038
1,768
3,593
1,233
1,772
1,338
1,280
7,181
1,772
4,667
3,303
13,874
13,586
1,130
4,190
393
6,277
1,523
1,863
827
6,216
1,345
887
289
1,168
1,203
1,071
2,460
1,023
1,776
1,099
1,789
1,188
1,271
1,142
1,325
6,521
1,380
5,633
2,817
8,363
9,580
4,593
1,233
97
4,645
989
4,316
679
#Inter.
Iteration
5
5
6
2
6
7
5
5
6
6
5
5
5
5
6
7
6
4
4
5
5
7
4
3
2
4
6
4
5
Table 3: The internal statistics of SELECTIVETAINT for the tested benchmarks
1.10x-1.77x. SELECTIVETAINT performs even better with
1.12x-1.91x which outperforms libdft by 1.12x-2.08x.
6.3 Security Case Studies
Protecting nginx web server. To show that our tools could
be used to detect real-world attacks, we ﬁrst implemented
a buffer overﬂow attack detector and used it to protect the
nginx web server. To test its effectiveness, we generated
an exploit based on the buffer overﬂow vulnerability
CVE-2013-2028. By leveraging this vulnerability, an attacker
could send a malformed request that triggers an integer
signedness error which further causes a stack-based buffer
overﬂow. This bug can be used in a denial-of-service attack
or cause arbitrary code execution. Without any surprise, our
SELECTIVETAINT detects the exploit at the ret instruction
because the return value stored on the stack is tainted.
Protecting other binaries against recent memory exploits.
We further tested eight recent real world software vulnera-
bilities from Common Vulnerabilities and Exposures (CVE)1,
which are listed in Table 4. The collected vulnerabilities
covered a broad range of software vulnerabilities, including
buffer overﬂow vulnerability, double free vulnerability,
and integer underﬂow vulnerability, which manifested in
1https://cve.mitre.org/
varied programs such as sound processing utilities SoX,
programming language interpreter Gravity, and audio
normalization software MP3Gain.
We implemented the corresponding exploits to compromise
these vulnerabilities and validate whether SELECTIVE-
TAINT is able to detect the attacks. For instance, to exploit
CVE-2017-1000437 vulnerability in Gravity 0.3.5, we
developed a malformed gravity programming language
source code ﬁle, which overﬂowed the program stack to
rewrite the return address with payloads in source code
ﬁle. To exploit CVE-2019-7629 vulnerability in TinTin++
2.10.6, we set up a simple game server with exploits
that keep sending crafted message which overﬂowed the
multiplayer online game client TinTin++. Then, the tested
binaries were instrumented with SELECTIVETAINT. In all
cases, SELECTIVETAINT successfully detects the exploits
which shows SELECTIVETAINT can facilitate real world
vulnerability detection in various software.
7 Limitations and Future Work
Augmenting static analysis with dynamic information. As
static analysis lacks dynamic information, SELECTIVETAINT
has unknown values from multiple sources as shown in §4.2
and also VSA is an over-approximation of the possible values
USENIX Association
30th USENIX Security Symposium    1679
(a) UNIX utilities
(b) Network daemons