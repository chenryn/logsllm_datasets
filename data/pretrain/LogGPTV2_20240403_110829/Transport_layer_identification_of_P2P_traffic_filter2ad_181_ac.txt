port chosen by the client.
Normally, peers maintain at most one TCP connection to
each other peer, but there may also be a UDP ﬂow to the
same peer, as described previously. Keeping in mind that
multiple connections between peers is rare in our data sets,
we consider what happens when twenty peers all connect
to peer A. Each peer will select a temporary source port
and connect to the advertised listening port of peer A. The
advertised {IP, port} pair of host A would thus be aﬃliated
with 20 distinct IPs and 20 distinct ports 5. In other words,
for the advertised destination {IP, port} pair of host A, the
number of distinct IPs connected to it will be equal to the
number of distinct ports used to connect to it. Figure 1
illustrates the procedure whereby a new host connects to
the P2P network and advertises its {IP, port} pair.
4Superpeers/supernodes are P2P hosts that handle ad-
vanced functionality in the P2P network, such as routing
and query propagation.
5The probability that two distinct hosts pick the same ran-
dom source port at the same time is extremely low.
On the other hand, consider what happens in the case of
web and HTTP. As in the P2P case, each host connects to
a pre-speciﬁed {IP, port} pair, e.g., the IP address of a web
server W and port 80. However, a host connecting to the
web server will initiate usually more than one concurrent
connection in order to download objects in parallel. In sum-
mary, web traﬃc will have a higher ratio than P2P traﬃc of
the number of distinct ports versus number of distinct IPs
connected to the {IP, port} pair {W,80}.
5.3 Methodology
Our nonpayload methodology builds on insights from pre-
vious sections 5.1 and 5.2. Speciﬁcally, for a time interval
t we build the ﬂow table for the link, based on the ﬁve-
tuple key and 64-second ﬂow timeout as with the payload
methodology described in section 4. We then examine our
two primary heuristics:
• We look for source-destination IP pairs that concur-
rently use both TCP and UDP during t. If such IP
pairs exist and they do not use any ports from table 3,
we consider them P2P.
• We examine all source {srcIP, srcport} and destination
{dstIP, dstport} pairs during t (use of pairs will hence-
forth imply both source and destination {IP, port}
pairs). We seek pairs for which the number of dis-
tinct connected IPs is equal to the number of distinct
connected ports. All pairs for which this equality holds
are considered P2P . In contrast, if the diﬀerence be-
tween connected IPs and ports for a certain pair is
large (e.g., larger than 10), we regard this pair as non
P2P.
These two simple heuristics eﬃciently classify most pairs
as P2P or nonP2P. In particular the {IP, port} heuristic
can eﬀectively identify P2P and nonP2P pairs given a suf-
ﬁciently large sample of connections for the speciﬁc pair.
For example, with time interval t of 5 minutes there are no
false positives for pairs with more than 20 connections in
our February 2004 trace (D11 of Table 1.) That is, for this
speciﬁc trace, if an IP pair has more than 20 IPs connect
to it, we can classify it with high conﬁdence as P2P or not
P2P.
Whether a ﬂow is considered P2P depends on the classiﬁ-
cation of its {IP, port} pairs. If one of the pairs in the 5-tuple
ﬂow key has been classiﬁed as P2P, this ﬂow is deemed P2P.
Similarly, if one of the pairs is classiﬁed as non P2P, so is
the ﬂow. Additionally, if one of the IPs in a ﬂow has been
found to match the TCP/UDP heuristic, the ﬂow is also
considered as P2P.
5.4 False positives
We now describe heuristics developed to decrease the risk
of false positives. Considering the diversity of backbone
links that feature a vast number of IPs and ﬂows, we ex-
pect the previous methodology to yield false positives, i.e.,
classifying nonP2P pairs as P2P. False positives are most
common in pairs with few connections, and also more fre-
quent for speciﬁc applications/protocols whose connection
behavior matches the P2P proﬁle of our heuristics (e.g., one
connection per {IP,port} pair), e.g., e-mail (SMTP, POP),
DNS and gaming.
To decrease the rate of false positives we review the con-
nection and ﬂow history of all pairs where the probability
of a misclassiﬁcation is high, e.g., the source or destination
port is equal to 25 and implies SMTP. Past ﬂow history for
these pairs enables accurate classiﬁcation by investigating
properties of speciﬁc IPs. In the following subsections, we
describe heuristics that augment our basic methodology to
limit the magnitude of false positives.
5.4.1 Mail
In our data sets, e-mail protocols such as Simple Mail
Transfer Protocol (SMTP) or Post Oﬃce Protocol (POP)
contribute most false positives. Mail false positives are not
surprising since connection behavior resembles our {IP, port}
heuristic. However, analysis of mail ﬂows and connection
patterns allows for identiﬁcation of mail servers in our traces,
forestalling misidentiﬁcation of traﬃc to such IP addresses
as P2P.
We examine all ﬂows where one of the port numbers is
equal to 25 (SMTP), 110 (POP) or 113 (authentication ser-
vice commonly used by mail servers). In fact we treat these
three port numbers as one (we consider ports 110 and 113
equal to 25), since for our purpose their behavior is the same.
We identify mail servers based on their port usage history
and whether they have diﬀerent ﬂows during the same time
interval t that use port 25 for both source and destination
port. The following observed ﬂow pattern illustrates this
characteristic behavior of mail servers by examining the us-
age of port 25 by IP 238.30.35.43 :
src IP
dst IP
proto
srcport
dstport
115.78.57.213
238.45.242.104
0.32.132.109
71.199.74.68
4.87.3.29
4.87.3.29
4.170.125.67
5.173.60.126
5.173.60.126
227.186.155.214
227.186.155.214
5.170.237.207
3267
238.30.35.43
25
238.30.35.43
50827
238.30.35.43
25
238.30.35.43
25
238.30.35.43
25
238.30.35.43
3301
238.30.35.43
25
238.30.35.43
25
238.30.35.43
25
238.30.35.43
25
238.30.35.43
238.30.35.43
3872
This case shows ﬂows for IP 238.30.35.43 6 with port 25
as source port for some ﬂows and destination port for other
ﬂows. This behavior is characteristic of mail servers that
25
22092
25
22175
21961
22016
25
22066
22067
22265
22266
25
6
6
6
6
6
6
6
6
6
6
6
6
6Note that IP addresses are anonymized.
initiate connections to other mail servers to propagate e-
mail messages. To identify this pattern, we monitor the set
of destination port numbers for each IP for which there ex-
ists a source pair {IP,25}.
If this set of destination port
numbers also contains port 25, we consider this IP a mail
server and classify all its ﬂows as nonP2P. Similarly for the
set of source ports of an IP for which there exists a desti-
nation pair {IP,25}. In the above example, for the source
pair {238.30.35.43,25}, the set of destination ports is [3267,
25, 50827, 3301, 3872]. Since port 25 appears in this set, we
infer that IP 238.30.35.43 is a mail server and deem all of its
ﬂows nonP2P. We keep all IPs identiﬁed as mail servers in a
mailserver list to avoid future application of our heuristics
to them.
5.4.2 DNS
The Domain Name Server protocol runs on top of both
TCP and UDP port 53 and is characterized mainly by nu-
merous short ﬂows, i.e, few packets/bytes and short dura-
tion. DNS connection patterns are analogous to our {IP,
port} pair heuristic, although DNS pairs are easier to iden-
tify since most DNS source and destination ports are 53. For
example, the following is a representative pattern of UDP
DNS ﬂows,
src IP
dst IP
proto
srcport dstport
53
53
53
53
252.60.148.12
115.254.223.8
0.121.94.5
243.11.142.6
17
17
In this case the observed {IP, port} pairs are considered
nonP2P , e.g., {252.60.148.12,53}, {0.121.94.5,53}, due to
the use of port 53 as source and destination port in the
ﬂow 5-tuple. As with the mail server IPs, we maintain a
list of rejected pairs to exclude from further analysis other
possible ﬂows for these pairs. For example, source pair
{252.60.148.12,53} may have additional DNS ﬂows to other
IPs but with destination port other than 53. But since we
identiﬁed the speciﬁc pair as a DNS false positive, we also
rule out the possibility that any of these additional ﬂows
are P2P. The heuristic ensures that DNS ﬂows will be eﬀec-
tively identiﬁed and removed for our P2P estimate even if a
speciﬁc host is part of a P2P network. Thus, only true P2P
ﬂows of a host will be considered and not its DNS requests.
We do not restrict the use of this heuristic to DNS. On the
contrary, we apply it to all ﬂows and pairs where one of the
ports is less than 501. This heuristic facilitates the removal
of other false positives in commonly used ports (e.g., port
numbers such as 25), especially those caused by a service
that runs on port 500. In these ﬂows both ports are equal
to 500, similar to the pattern described here. Thus, for all
ﬂows where the source port is equal to the destination port,
and the port number is less than 501, both source and desti-
nation {IP, port} pairs are considered nonP2P, and they are
inserted in a list of deﬁnitively nonP2P pairs. This heuristic
was inspired by DNS ﬂow features and thus is called “DNS
heuristic”, although it is not necessarily speciﬁc to DNS.
5.4.3 Gaming and malware
On-line gaming runs mainly on top of UDP. Characteristic
examples of on-line games with suﬃcient traﬃc in our traces
are Age of Empires, Half-life and Quake. On the other hand,
malware tends to run over TCP. By malware, we mean worm
traﬃc (e.g. MyDoom on ports 3127,3128, or Beagle on port
2745) and port or address space scans, which appear often
in backbone traces.
Gaming and malware bear a similar property: many ﬂows
to diﬀerent IPs/ports, carrying the same number of pack-
ets/bytes and/or with same-sized packets. Consider the fol-
lowing UDP ﬂow pattern from the game Half-life:
src IP
dst IP
pr sprt dprt pkts bytes
3.195.130.255 145.46.189.100 17 1990 27015
13.15.101.255 145.46.189.100 17 2989 27015
115.254.14.42 145.46.189.100 17 3965 27015
4
5
1
160
200
40
For all ﬂows of {IP, port} pair {145.46.189.100,27015}, all
packets likely have the same size, or it is at least consistent
with dividing the number of bytes by the number of pack-
ets in each ﬂow (i.e., the mean packet size).
In all ﬂows,
the average packet size is 40. On the contrary, if we con-
sider the {IP, port} heuristic, we would accept all the pairs
as P2P pairs, since the number of distinct IPs equals the
number of distinct ports connecting to them, e.g., for pair
{145.46.189.100,27015} there are 3 distinct IPs and 3 dis-
tinct ports, while for pair {3.195.130.255,1990} there is 1
distinct IP and 1 distinct port.
To remove such pairs, we maintain for each {IP, port} pair
a set of distinct average packet sizes and a set of distinct
total transfer sizes. We also have two diﬀerent sets of port
numbers:
KnownP2PPortsSet: [4661, 4662, 4665, 1214, 6346, 6347,
412, 411, 41170, 6881-6889, 6699, 6257, 2234]