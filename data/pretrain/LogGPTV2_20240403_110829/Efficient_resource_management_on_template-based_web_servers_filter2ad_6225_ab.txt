Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:57:38 UTC from IEEE Xplore.  Restrictions apply. 
Inthispaper,weproposeanewrequestschedulingmethodundertheconsiderationofbothtrendstogreatlyimprovemultithreadedwebserverperformance.Inthepro-posedmethod,awebserverusesdifferentthreadsinmul-tiplethreadpoolsforparsingrequestheaders,generatingdata,andrenderingtemplates.Byassigningdatabasecon-nectionsonlytodatagenerationthreads,weensurethattheseconnectionsdonotsitidlewhiletemplatesarebeingrenderedorstaticcontentsarebeingserved.Thissepara-tionofrequestservicesintodifferentthreadpoolsmakesthedatabasemuchlessofabottleneck.Withoutseparation,ifeachthreadhasitsownconnection,thenthenumberofthreadscannotexceedthenumberofconnections.Thus,arequestmightwaitforathreadloadingstaticcontentorren-deringatemplatetoﬁnishbeforeitcanquerythedatabase.Alternatively,ifeverysinglethreadbecomestiedupper-forminglengthydatabasequeries,thenrequestsforstaticcontentwillhavetowaitforthosequeriestoﬁnish.Ourrequestschedulingmethodalleviatestheproblemsaboveevenfurtherbyhavingdifferentpoolsofthreadsforservingquickandlengthydynamicrequests.ThispreventsshortdatabasequeriesfrombeingblockedbylargeonesandthusachieveseffectssimilartoShortestJobFirstschedul-ing,butwithoutcausingthestarvationoflengthyjobs.Inaddition,whenmeasuringthetimeeachpagetakestogener-atedatafromdatabase,thetimeittakestorendertemplateswillnotbeincludedbecausetemplaterenderingisnowhan-dledbyaseparatepoolofthreads.Thisincreasedaccuracyofexecutiontimemeasurement,inturn,helpsusperformbetterrequestschedulingandresourcemanagement.Tovalidatetheefﬁcacyoftheproposedrequestschedul-ingmethod,weimplementeditintoCherryPy[15],arepre-sentativetemplate-enabledmulti-threadedwebserver,andweimplementedthestandardTPC-W[24]benchmarkinDjangotemplatelanguage[16].Ourevaluationdemon-stratesthattheproposedrequestschedulingmethodcanre-ducetheaverageresponsetimesofmostwebpagesbytwoordersofmagnitudeandincreasetheoverallwebserverthroughputby31.3%underheavyloads.Theremainderofthispaperisstructuredasfollows.Sec-tion2introducesthebackgroundofmodernwebapplicationtechniques.Section3detailstheproposedrequestschedul-ingmethod.Section4presentstheevaluationresults.Sec-tion5discussesrelatedworkonrequestscheduling.Finally,Section6concludesthepaper.2BackgroundWhilethesingle-processevent-drivenarchitecturecanprovideexcellentperformanceforcachedworkloadsandstaticwebcontents,themultithreadedarchitectureusuallyperformsbetterfordisk-boundworkloadsanddynamicallygeneratedwebcontents.Currentlymostpopularandcom-"+row[0]+"")%>Figure1.TraditionalPythonServerPage.mercialwebsitesusemultithreadedserverstoprovidewebservices.Inthissection,wedetailtwoissuesthatmotivateourwork:(1)theadvantagesofthewebtemplatemodeloverthetraditionaldynamiccontentgenerationmodel,and(2)thedrawbacksoftheconventionalrequestprocessingmodelinmultithreadedwebservers.2.1UsingWebTemplatesThefollowingexampleillustratesthedifferencebetweenusingwebtemplateandtraditionalwebprogramming.Fig-ure1showsthetraditionalwayofgeneratingdynamicwebcontent.ThecodeiswrittenasaPythonServerPage,whichallowsustoembedPythoncodeinHTML.Thisapproachmixesdatagenerationandpresentationcode.Consequently,alargeprojectcodedinthismannerforcesaprogrammertosearchthroughpresentationcodetoﬁndsomethingrelatedtodatageneration,orviceversa.Unfortunately,thisisthetraditionalwaytowritecodeusingtechniquessuchasJSP[20],PHP[21],andASP[23].Incontrast,usingamodernwebserversuchasCherryPy[15]andatemplatinglanguagesuchasDjango[16]allowsustoseparateourcontentfrompresentationcode.Thus,wecanwriteafunctionthatperformsthedatabasequeriesoftheabovecodeandthenrendersatemplateusingthatdata.978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
251
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:57:38 UTC from IEEE Xplore.  Restrictions apply. 
defexample(self,pageid):data={}cursor=getconn().cursor()cursor.execute("SELECTtitle,headingFROMpageWHEREpageid=%s",pageid)data["title"],data["heading"]=cursor.fetchone()cursor.execute("SELECTdataFROMsometableWHEREpageid=%s",pageid)data["listitems"]=[row[0]forrowincursor]cursor.close()returnget_template("tmpl.html").render(Context(data))Figure2.DatapreparationfunctioninDjango.Thisfunctioncanalsoretrievetheexistingdatabasecon-nectionfromitswebserverthread,insteadofopeningandclosinganewoneoneveryrequest.Figures2and3showthedatapreparationfunctionandthepresentationtemplatewritteninDjangotemplatelanguage,respectively.{{title}}{{heading}}{%foriteminlistitems%}{{item}}{%endfor%}Figure3.Presentationtemplate(tmpl.html)inDjango.ThetemplateitselfismostlysimpleHTMLwithjustafewspecialtags,whichindicatehowtorenderthetemplatewiththegivendata.Whileverysimple,theexampleshouldgivereaderswhoareunfamiliarwithmoderntemplatinglanguagesagoodunderstandingofwhattheyareandhowtheyareused.2.2Thread-per-requestModelThemostcommonlyusedrequestprocessingmodelinmultithreadedwebserversisthethread-per-requestmodel.InthismodelasshowninFigure4,anincomingrequestisﬁrstacceptedbythesinglelistenerthread.Then,therequestwillbedispatchedtoaseparatethreadinthethreadpool,whichprocessestheentirerequestandreturnsaresulttotheclient.Toavoidtheoveruseofresources,thesizeofthethreadpoolisoftenboundedinmostwebservers,andmeanwhile,alimitednumberofdatabaseconnectionsarestoredandsharedbythethreads.S(cid:13)i(cid:13)n(cid:13)g(cid:13)l(cid:13)e(cid:13)L(cid:13)i(cid:13)s(cid:13)t(cid:13)e(cid:13)n(cid:13)e(cid:13)r(cid:13)T(cid:13)h(cid:13)r(cid:13)e(cid:13)a(cid:13)d(cid:13)S(cid:13)i(cid:13)n(cid:13)g(cid:13)l(cid:13)e(cid:13) (cid:13)T(cid:13)h(cid:13)r(cid:13)e(cid:13)a(cid:13)d(cid:13) (cid:13)P(cid:13)o(cid:13)o(cid:13)l(cid:13)N(cid:13)e(cid:13)w(cid:13) (cid:13)R(cid:13)e(cid:13)q(cid:13)u(cid:13)e(cid:13)s(cid:13)t(cid:13)s(cid:13)C(cid:13)o(cid:13)m(cid:13)p(cid:13)l(cid:13)e(cid:13)t(cid:13)e(cid:13)d(cid:13) (cid:13)R(cid:13)e(cid:13)q(cid:13)u(cid:13)e(cid:13)s(cid:13)t(cid:13)s(cid:13)Figure4.Thread-per-requestmodel.Thismodelincreasesconcurrency,improvesperfor-mance,andiseasyforprogramming.Unfortunately,itdoesnoteffectivelysupporttherecenttrendofusingwebtemplatestoseparatecontentcodefrompresentationcode.Moreprecisely,althoughcontentcodeandpresentationcodecanbeseparatedintodifferentﬁlesusingmoderntem-platetechniquesasshowninFigures2and3,theyarestillexecutedbythesamethreadforeachspeciﬁcrequest.Thus,thepreciousdatabaseconnectionresourceswillbewastedbythosethreadsthatarerenderingthepresentationcodewhilestillholdingdatabaseconnections.3DesignInthissection,weﬁrstintroducethenecessarymodiﬁca-tiononwebtemplatestosupportournewrequestschedul-ingmethod.Then,wedetailthedesignofthreadpoolsandpresenttherequestschedulingpolicy.WeuseCherryPyasanexampleofmoderntemplate-enabledmultithreadedwebserversanduseDjangoasanexampleofmodernwebtem-platestoillustrateourdesign.3.1ModiﬁcationtoWebTemplatesCherryPyisanobject-orientedHTTPframeworkwritteninPython,anditisdesignedtofacilitatethedevelopmentofdynamicwebapplications.ItconvenientlymapsURLstofunctions,convertingeachrequest’squerystringintofunc-tionparameters.Thisallowsdeveloperstowritewebcodeinbasicallythesamewayastheywouldwritecodeforcon-ventionalapplications.Inordertosupporttheproposedrequestschedulingmethod,aminormodiﬁcationonawebapplication’stem-platesisneeded.ThemodiﬁcationdoesnotsigniﬁcantlychangethewaythatCherryPycodeiswritten.CherryPyprogrammerswriteafunctionforeachdynamicpage,gen-eratedatainthatfunction,andreturnarenderedtemplate,asshowninFigure2.Theonlydifferencebetweenthisnor-malprocedureandourmodiﬁedversionisthatinsteadof978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
252
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:57:38 UTC from IEEE Xplore.  Restrictions apply. 
returningarenderedtemplate,eachfunctionreturnsanun-renderedtemplateandtherenderingdata.UsingtheDjangotemplatecodeasanexample,theconventionalwayofren-deringtemplatesis:returngettemplate(“tmpl.html”).render(Context(data)),wheretmpl.htmlisthenameofthetemplateﬁleanddataisthedictionary(a.k.a.hashtable)usedtorenderthetemplate.Thisconventionalreturnstatementwillthusreturnastringthatcontainsarendereddynamicwebpage.Bycontrast,ourmodiﬁedversionofrenderingtemplatesis:return(“tmpl.html”,data),andthusthisnewreturnstatementsimplyreturnsthenameoftheunrenderedtemplateandthedatatoberenderedlater.Thatistheonlychangemadeonwebtemplates.Suchaminormodiﬁcationmaintainstheconsistencyofthewaytemplatecodeiswritten,whichisveryimportantforthewideuseoftheproposedscheme.Ifanewwebserverdramaticallychangeshowprogrammerswritecode,theywillbereluctanttoadoptit.Thisiswhyourmodiﬁca-tionrequiresonlythereturnstatementofeachfunctiontobedifferent.Forexample,inourDjangoimplementationofTPC-Wbenchmark,only14linesofreturnstatements(oneforeachtypeofdynamicpages)needtobechangedinorderforthewholebenchmarktotakeadvantageoftheperfor-mancebeneﬁtsofferedbytheproposedrequestschedulingmethod.Moreover,evenifafunctionreturnsanalready-renderedtemplatebymistake,themodiﬁedwebservercanstillhandlethisproperlyalthoughitcannotapplyourpro-posedrequestschedulingmethodforrenderingthetemplateinadifferentthread.3.2ThreadPoolsLikemostmultithreadedwebservers,CherryPyalsousesthecommonthread-per-requestmodelasshowninFig-ure4toprocessclientrequests.IthasasinglelistenerthreadwhichacceptsincomingTCPconnectionsandplaceseachoftheminasynchronizedqueue.Alargepoolofthreadswaitsonthatqueue,andonceaconnectionisavailable,athreadtakesitfromthequeueandservicestheentirere-questbeforewaitingonthequeueagain.Thekeyfeatureofourrequestschedulingmethodistousemultiplethreadpoolsratherthanjustonethreadpooltoservedifferentwebrequests.Ournewmodelhasalis-tenerthreadwithﬁvedifferentthreadpools:HeaderPars-ing,StaticRequests,GeneralDynamicRequests,LengthyDynamicRequests,andTemplateRendering.Eachthreadpoolwaitsonitsownsynchronizedqueue.Anincomingre-questisﬁrstacceptedbythesinglelistenerthread,andthenpassedtotheﬁvethreadpoolsforprocessing.Theprocess-ingﬂowsareshowninFigure5.S(cid:13)i(cid:13)n(cid:13)g(cid:13)l(cid:13)e(cid:13)L(cid:13)i(cid:13)s(cid:13)t(cid:13)e(cid:13)n(cid:13)e(cid:13)r(cid:13)T(cid:13)h(cid:13)r(cid:13)e(cid:13)a(cid:13)d(cid:13)H(cid:13)e(cid:13)a(cid:13)d(cid:13)e(cid:13)r(cid:13)P(cid:13)a(cid:13)r(cid:13)s(cid:13)i(cid:13)n(cid:13)g(cid:13)N(cid:13)e(cid:13)w(cid:13) (cid:13)R(cid:13)e(cid:13)q(cid:13)u(cid:13)e(cid:13)s(cid:13)t(cid:13)s(cid:13)C(cid:13)o(cid:13)m(cid:13)p(cid:13)l(cid:13)e(cid:13)t(cid:13)e(cid:13)d(cid:13) (cid:13)R(cid:13)e(cid:13)q(cid:13)u(cid:13)e(cid:13)s(cid:13)t(cid:13)s(cid:13) (cid:13) (cid:13) (cid:13)S(cid:13)t(cid:13)a(cid:13)t(cid:13)i(cid:13)c(cid:13)R(cid:13)e(cid:13)q(cid:13)u(cid:13)e(cid:13)s(cid:13)t(cid:13)s(cid:13) (cid:13)L(cid:13)e(cid:13)n(cid:13)g(cid:13)t(cid:13)h(cid:13)y(cid:13)D(cid:13)y(cid:13)n(cid:13)a(cid:13)m(cid:13)i(cid:13)c(cid:13)R(cid:13)e(cid:13)q(cid:13)u(cid:13)e(cid:13)s(cid:13)t(cid:13)s(cid:13) (cid:13)T(cid:13)e(cid:13)m(cid:13)p(cid:13)l(cid:13)a(cid:13)t(cid:13)e(cid:13)R(cid:13)e(cid:13)n(cid:13)d(cid:13)e(cid:13)r(cid:13)i(cid:13)n(cid:13)g(cid:13)F(cid:13)i(cid:13)v(cid:13)e(cid:13) (cid:13)T(cid:13)h(cid:13)r(cid:13)e(cid:13)a(cid:13)d(cid:13) (cid:13)P(cid:13)o(cid:13)o(cid:13)l(cid:13)s(cid:13) (cid:13)G(cid:13)e(cid:13)n(cid:13)e(cid:13)r(cid:13)a(cid:13)l(cid:13)D(cid:13)y(cid:13)n(cid:13)a(cid:13)m(cid:13)i(cid:13)c(cid:13)R(cid:13)e(cid:13)q(cid:13)u(cid:13)e(cid:13)s(cid:13)t(cid:13)s(cid:13)Figure5.Threadpoolsonthemodiﬁedwebserver.TheheaderparsingthreadsparsetheﬁrstlineofeachHTTPrequest.Theﬁrstlinecontainsthepathofthere-sourcebeingrequested,whichiscriticaltotellwhetherthatresourceisastaticﬁleoradynamicallygeneratedpage.Eachrequestisthenplacedintoeitherthestaticrequestthreadpooloroneofthetwodynamicrequestthreadpools.Forexample,onewaytodistinguishbetweenstaticanddy-namicrequestsistochecktheextensionoftherequestedresource.Supposethataheaderparsingthreadreadstheline:GET/img/flowers.gifHTTP/1.1thenthethreadcanexaminetherequestandknowthatitisrequestingaﬁlewhichendsin“.gif’—astaticﬁle.Theheaderparsingthreadthusdispatchestherequesttothestaticrequestthreadpool.However,iftherequestisin-stead:GET/homepage?userid=5&popups=noHTTP/1.1thentheheaderparsingthreadcanchecktoensurethattheresource“/homepage”doesnothaveanykindofextensionandthusisadynamicresource.Therefore,theheaderpars-ingthreaddispatchestherequesttooneofthetwodynamicrequestpools.Thecriteriausedfordeterminingwhichdy-namicrequestthreadpoolservestherequestareexplainedinSection3.3.Iftherequestisforadynamicpage,theheaderpars-ingthreadalsoparsestherestoftheHTTPrequest’sheaderdata.Inourdynamicrequestexampleabove,supposethattheentirerequestis:978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
253