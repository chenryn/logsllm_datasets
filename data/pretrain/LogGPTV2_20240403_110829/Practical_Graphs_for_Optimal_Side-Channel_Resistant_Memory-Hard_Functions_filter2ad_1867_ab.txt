tions honest parties are required to label the nodes of G. For
this to be made practical we would like to be able to provide
implementors with a simple, elegant and concise algorithm
for navigating the edge structure of the graph (in particular
for determining the parents of a given node). All past con-
structions of graphs with extreme depth-robustness (and
asymptotically optimal aAT) rely heavily on low degree ex-
pander graphs with extreme expansion properties. While
in theory well understood, in practice these can prove to
be either rather complicated with large (or at least poorly
understood) constants describing their expansion proper-
ties (relative to indegree) or to be simple but exhibiting
suboptimal expansion properties.
With the goal of wide spread adoption in mind it would
be useful to avoid generic expanders altogether. More to the
point, ideally we would like a graph equipped with a simple
algorithm (ie. consisting only of a few basic arithmetic and
control flow instructions) for computing the parent func-
tion in polylog time and space. More precisely given node
v ∈ V and i ∈ {1, . . . , indeg(v)} the algorithm outputs the
i th parent node u of v in time (and space) O(log2(|V |)) with
only very small constants hidden in the O notation.
1.1 Existing Graphs and Their Properties
Due to a Lemma by Valiant [44] it follows that for any graph G on
n = 2k nodes with indegree δ and any t there exists a subset set S ⊆
V of nodes of size |S| ≤ δtn/(log(n)−t) such that removing S leaves
no path of length greater than 2k−t . Several constructions of graphs
with low indegree exhibiting this asymptotically optimally depth-
robustness are given in the literature [31, 36, 42, 43] but all rely
on low (or constant) indegree expanders with extreme expansion
properties. The graphs in [35] also have indegree ˜Ω(log2(n)) rather
than log(n) which would be optimal for graphs of equal size and
depth-robustness.
Valiant’s upperbound on the depth-robustness of a graph and
the algorithm for pebbling non-depth-robust (i.e. depth-reducible)
graphs in [5] together imply that any graph has aAT at most
O(n
2 log log n/log(n)). All graphs graphs with (near) optimal aAT
are built from optimal depth-robust graphs [7, 11].
In contrast, for graphs with simple, locally navigable construc-
tions which do not rely on general expanders the asymptotics fall
Session E1:  Hardening CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1003well short of what we could hope to achieve. In particular, the
aAT of graphs used in iMHFs proposed for use in practice have so
far proven to be well below optimal [5–7, 10]. Of these the most
prominent is Argon2i [16] which won the recent Password Hashing
Competition and is rapidly establishing itself as the most widely
deployed iMHF in practice.
Notational Remark: Argon2 has undergone several revisions
since it was first designed. Most of these modifications are minor
and are not relevant to our analysis since they do not affect the
underlying edge distribution of the underlying graph. However, in
version v.1.2 the edge distribution was modified from a uniform
distribution to a new non-uniform distribution. Thus, we use Ar-
gon2iA and Argon2iB to distinguish between the two underlying
edge distributions used in the various iterations of the Argon2i
function. In particular, our analysis of Argon2iB covers v1.2, v1.2.1
and v.1.3 along with any potential future versions of Argon2 that
maintains the same edge distribution. We use Argon2iA to refer
to the earlier versions of Argon2i which used the uniform edge
distribution. We choose to study Argon2iA in addition to Argon2iB
because the uniform edge distribution is quite natural and has been
adopted by other iMHF candidates [22].
For the graphs underlying Argon2iB and Argon2iA the results
in [7, 20] show their aAT to be at most O(n
1.7677) and O(n
1.708)
respectively. Graphs for other iMHFs such as both Catena func-
tions and the Balloon Hashing functions have aAT O(n
1.67) or
even o(n
1.625). Similar results [10] hold for the graphs used in
Pomelo [46], Lyra2 [4], Rigv2 [23], Gambit [39] and TwoCats [26].
To the best of our knowledge, no effort has been made for depth-
robust graphs nor for high aAT graphs to optimize the construction
(or their analysis) to achieve good constants. In fact no such analysis
has been done prior to this work. In Appendix D we show that for
the depth-robust graph of [31] the proof in that work implies that
the (constant indegree version of the) graph is (e, d)-depth-robust
2/log(n) where c = 4.72 × 10−7. The graph underlying
for ed = cn
n) for
the Argon2iA is only known [5] to have aAT n
c = 9.6 × 107, and the graph underlying Argon2iB is only known
to have aAT ˜Ω
do not provide an explicit constants for their lower bound.
7/4(cid:17) [20] — the authors of this very recent paper
5/3/(c log2
(cid:16)
n
1.2 Our Results
In a nutshell, we make progress towards bringing the constructive
applications of depth-robust and high aAT graphs into practice.
First we build and analyze a very simple and locally navigable
sequences of graphs with indegree 2 and asymptotically optimal
depth-robustness. We give an upper bound for the hidden con-
stants an order of magnitude smaller then any known bound, even
for the best theoretical construction ([31]). We also give a second
construction with similar properties but for high aAT. For this we
upper bound the hidden constants in its aAT to be two orders of
magnitude smaller than the best known for any graph with optimal
asymptotic aAT.
Finally we implement the graphs in software and run a variety
of state-of-the-art depth-reduction and low aAT attacks for graph
sizes used in practice. We compare the the results very favorably to
those of similar experiments for the DAGs underlying Argon2iA and
Argon2iB. In particular the empirical results indicate that the hidden
constants for the depth-robustness and aAT of our constructions
are vastly smaller than we are able to bound rigorously. In more
detail we do the following.
DRSample. In Section 3 we introduce algorithm DRSample for
sampling the parents of nodes in a random DAG G of size n. Next
we prove a probabilistic bound on the parameters of the depth-
robustness of G. In particular, G is (Ω(n/log n), Ω(n))-depth-robust
except with negligible probability which is optimal. Our proof ac-
tually shows that G satisfies a stronger variant of depth-robustness
called block depth-robustness [7] with block sizes of length b =
Ω(log n). Intuitively, this ensures that G − S contains a long path
p which maintains distance b from S meaning that for any x ∈ p
none of nodes [x, x + b] are contained in S.
aATSample. In Section 4 we introduce algorithm aATSample
which modifies an arbitrary locally navigable block depth-robust
DAG G with a simple operation so as to obtain a new locally nav-
igable graph G′. We show how to transform an exact (i.e. non
asymptotic) lowerbound on the aAT of G into a higher exact lower-
bound on aAT of G′. In particular we can use DRSample for G and,
combining the results from the previous section with those in [7]
relating depth-robustness to aAT, we obtain the necessary exact
lowerbound on the aAT of G.
Empirical Analysis. In Section 5 we provide empirical evidence
for the suitability of both families of graphs.
Implemented Attacks: For attacks we implement 6 depth-reducing
algorithms — algorithms for finding small sets S of nodes for reduc-
ing the depth of a given graph. The first is taken from the attack
in [5] while the other four are variants of Valiant’s algorithm in [44].
The last one (called “Best Attack”) simply takes the smallest set S
found by any of the other algorithms for a given target depth.
We also implement the parallel pebbling attack of [5] which
produces a low aAT pebbling of a given DAG G given a (sufficiently
small) depth-reducing set S. In particular the algorithm makes use
of Best Attack as a subroutine and searches for optimal parameters
for running the [5] pebbling algorithm.
Implemented Graphs: Next we implement 8 graphs, Argon2iA,
Argon2iB, DRSample, aATSample as well as a variant of the latter
requiring less randomness to sample (a valuable commodity in some
practical applications) but for which the formal analysis about the
constants (and asymptotics) carry over almost unchanged. Finally,
for applications where no randomness is available at all, we also
implement a fully deterministic “Powers-of-Two” graph. This latter
graph is also exceedingly simple and efficient to implement both
in hardware and software requiring nothing other then a single
mod (potentially even a power of 2) operation and one bit-shift to
compute the parent function.
Security: Our first contribution in this section is to show that,
in practice, depth-reduction techniques based on Valiant’s lemma
actually outperform the Layered depth-reduction attacks of [5]. At
least in the cases of the Argon2i graphs this is somewhat surprising
as asymptotic analysis of Layered for those particular graphs indi-
cates that it should perform significantly better then asymptotics
known to hold for Valiant’s lemma (albeit on an arbitrary graph).
In practice, the converse seems to be true, at least for Argon2iA,
Session E1:  Hardening CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1004Argon2iB, DRSample and the Powers-of-Two graph. (We believe
this to indicate that, even in theory, the behavior of Valiant’s lemma
merits further investigation.)
Next, we describe and analyze the results of running the Best
Attack depth-reducing algorithms against each of the graphs on
sequence of interesting graph sizes for use in practice. We found
that all new constructions fare significantly better than Argon2iB.
Amongst the new constructions DRSample seems to be the most
depth-robust of all. For example, in order to reduce the depth of the
Argon2iB graph on n = 224 nodes to approximately 4 × 106 a set of
size |S| = 6.7 × 103 was found while for DRSample no set smaller
than |S| ≥ 12 × 105 was found. Recall that when G is (e, d)-depth-
robust then aAT(G) > ed. For Argon2i-B the (e, d) point with the
highest such product we found was 2.5 × 1011 while for DRSample
we found a point with ed ≈ 5 × 1012.
Finally, for each graph we analyze its aAT complexity empir-
ically by simulating the parallel pebbling attack of [5] using as
input the best depth-reducing sets found in the last step. Here too
the new constructions fared better than either version of Argon2
(though the fully deterministic construction only marginally so).
Once again DRSample and its variants proved the most resilient
though aATSample was a close second. For example, when n = 224
(which corresponds to 8GB of memory when using Argon2’s com-
pression function which can be computed in roughly 1.25 seconds)
we see the aAT of the attack on Argon2iB is roughly 11.5 times
better than the honest algorithm while against DRSample the im-
provement is only 3.4 fold.
Improved Attacks: Along the way we also improve the best known
empirical results for low aAT and depth-reduction attacks on both
Argon2iA and Argon2iB compared with the state-of-the-art in [6].
For example, when evaluating Argon2iB with one pass over 8GB
of memory our new low aAT attack is now almost 11.5 times more
efficient than the honest algorithm (compared to 9.3 times more
efficient in [6]). For a similar evaluation of Argon2iA we improve
from 14.2 to 19 times the honest algorithms efficiency. This may
be somewhat unexpected in light of the fact that, compared to
Valiants lemma, the best (known) lowerbounds for the attacks on
those graphs are actually better for the Layered depth-reduction
algorithm used in [6]. Never-the-less, in practice our experiments
indicate that Valiant’s approach seems to work better.
Timing: Finally we also report on experiments measuring the time
required by the honest evaluation algorithm for evaluating an
iMHF obtained by using DRSample with Argon2iB’s compression
function on an off-the-shelf general purpose CPU. We show that
for the same number of calls to the underlying round function
the new iMHF can be evaluated marginally faster than Argon2iB
demonstrating that Argon2i could be easily modified to use the
new edge distribution without adversely impacting its impressive
speed/throughput.
1.3 Discussion
To be clear, although we believe these results represent significant
improvements in terms of practical applicability compared to past
graph constructions, the constants for the depth-robustness and
aAT which we are able to prove still leave something to be desired
for graphs of the size we would like to use in practice (e.g. n = 222 is
a reasonable value). However, the empirical results strongly indicate
that an iMHF using our new constructions are both as (or even
more) efficient for the honest user while simultaneously resulting
in significantly greater memory-hardness when compared to the
state-of-the-art in practical iMHFs. With this in mind we view the
theoretical techniques introduced in this work for bounding the
constants of the new constructions as a strong starting point for the
further investigation into tightening the bounds. We conjecture that
the graphs presented here do in fact achieve constants of practical
interest as evidenced by the failure of otherwise powerful attacks.
2 PRELIMINARIES
We begin with some notation and definitions central to this work.
We denote the set of natural numbers by N = {1, 2, . . .}. For a ≤ b
both in N we denote the set {a, a + 1, . . . , b} by [a, b]. In particular
[1, n] is denoted simply by [n]. We denote the set of w-bit strings
as Bw = {0, 1}w and the set of all bitstrings by B = ∪w ∈[n]Bw . We
use log x = log2 x to denote the base 2 logarithm.
For a directed acyclic graph (DAG) G = (V , E) the indegree of a
node v ∈ V is the number of incoming edges. That is indeg(v) :=
|{(u, v) ∈ E}|. Conversely, the outdegree of v is the number of out-
going edges outdeg(v) := |{(v, u) ∈ E}|. More generally, the inde-
gree of G is max{indeg(v) : v ∈ V }. A node with indeg(v) = 0
is called a source and a node with outdeg(v) = 0 is called a sink.
We write Gn for the set of all DAGs on n nodes and Gn,δ ⊆ Gn
for the set of DAGs with indegree δ. The length of a (directed)
path p = (v1, v2, . . . , vz) in G is the number of nodes it traverses
length(p) := z. The depth of G is the length of the longest directed
path in G. The parents of a node v is the set parents(v) := {u ∈ V :
(u, v) ∈ E} of nodes with an outgoing edge leading v and similarly
the children of v are the nodes children(v) := {u ∈ V : (v, u) ∈ E}
with an incoming edge from v. Continuing the analogy, the an-
cestors of v are all nodes with a directed path from u to v. That
is ancestorsG(v) := {u ∈ V : (u, . . . , v) a path in G}. When the
graph G is clear from context we omit the subscript. Finally, for
the sake of brevity, in this work, when we say that a set of nodes
S is being removed from a graph G we implicitly also mean that
incident edges to those nodes are removed. We denote the resulting
graph by G − S.
The following (parametrized) combinatoric property of the edge
structure of a DAG is central to this work. For large values of the
parameters it captures the intuition that the graph remains deep
even even when large arbitrary subsets of the nodes are removed.
Definition 2.1 (Block Depth-Robustness). For n ∈ N let G = (V , E)
be a DAG with an implicit number of its nodes V = [n]. Given
v ∈S[v − b + 1, v]. We say that a DAG G is
(e, d, b)-block depth-robust if
S ⊆ V let N(S, b) =
∀S ⊆ V |S| ≤ e ⇒ depth(G − N(S, b)) ≥ d.
When b = 1 we simply say that G is is (e, d)-depth-robust.
We will utilize the following lemma in our security analysis.
Lemma 2.2 is a slight generalization of a result of Valiant [44], and
we refer to attacks based on this lemma as Valiant’s Lemma Attacks.
Lemma 2.2. Let base b ∈ N≥2 be given and let G = (V = [n], E)
be any n node DAG with depth(G) ≤ bd and maximum indegree
Session E1:  Hardening CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1005indeg(G) ≤ δ then there is an efficient algorithm to compute subsets
S1, . . . , Sd ⊆ V with the following properties:
(1) For all T ⊆ [d] we have depth(G −
(2) d
i∈T Si) ≤ bd−|T |.
i =1 |Si| ≤ δn.
2.1 Graph Pebbling
The results in [11] showed how to construct provably secure MHF
from any graph with high aAT. With that in mind we now for-
mally define this complexity notion laying the groundwork for the
analysis of our second construction. aAT is defined via the parallel
black pebbling game, a natural generalization to a parallel setting of
the original (sequential) black pebbling game [25, 34]. The game is
played in a sequence of moves consisting of placing and removing
pebbles on the nodes of a given DAG according to certain (very
simple) rules until all target nodes have been pebbled.
The complexity of such an execution is the sum of two values.
The first summand is the sum of the number of pebbles on the
graph across all steps which is called the “cumulative pebbling
complexity” (CPC) of the execution. The second summand is the