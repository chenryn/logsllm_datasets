### Optimized Text

**Reply.** These mechanisms, however, will not be further considered in this discussion.

**Note.** Do not confuse this (cid:1) with the one used for the adaptive protocol in Section 2.

---

The delay \( d \) is now directly determined by the device, rather than computed from a probe counter. Consequently, the Control Point (CP) no longer has an accurate notion of the experienced or real probe load that the device must handle. Each reply to a probe includes a delay \( d \). Upon receiving such a reply, the CP sets a timer and waits for \( d \) time-units before initiating the next probe cycle.

### 5. Modeling and Analysis

#### Device Model
We have analyzed the protocol using the MODEST-MÖBIUS tool tandem. Given that the CP behavior is simpler than before, we omit its MODEST specification. The interesting part is the device, which is shown in a condensed form in Figure 5. The constant `MINDELTA` corresponds to \( \delta_{\text{min}} \), and `MINDELAY` to \( d_{\text{min}} \).

```java
process Device (int id) {
    clock st = 0;
    float nt = st; // Time since system start
    do {
        :: when (in.lck) { // Probe in input buffer
            handle_probe {
                d = max(MINDELTA, MINDELAY - (nt - st));
                nt += d;
                r = min + (max - min) * Uniform(0, 1);
                cp = in.src; // Source of probe
                x = 0;
            }
        }
        :: when (x == r && !out.lck) { // Reserve out-buffer
            send_reply {
                out.lck = 1;
                out.src = id;
                out.dst = cp;
                out.delay = nt - st; // Delay for CP
                in.lck = 0;
            }
        }
    }
}
```

In a dynamic scenario where CPs join or leave the network in a non-deterministic fashion, and perhaps even in bursts, it is less straightforward to determine whether the protocol can meet its expectations. New CPs joining the network and starting to probe the device are unaware of the current schedule laid out by the device. Their entrance will, therefore, disrupt the neat pattern of the probe schedule, leading to a temporary increase in the device's load.

Simulations have been conducted to understand how the device load is affected in a dynamic environment. These studies focused on the average load and its variance. Consider a worst-case scenario where the number of active CPs is uniformly chosen from the set \(\{1, \ldots, 60\}\). This choice is repeated every \( X \) time-units, where \( X \) is exponentially distributed with a rate of 0.05 (mean of 20 seconds). Packet losses are not considered, meaning every transmitted probe will eventually be answered. The value of \( \delta_{\text{min}} \) is set to 0.1, and \( d_{\text{min}} \) equals 0.5.

In this scenario, the mean load of a device in steady-state is 9.7 probes/second, with a variance of 20.0, yielding a standard deviation of approximately 4.5. Statistically, the probability of exceeding the nominal probe load is low. Figure 5 depicts the device behavior in the improved protocol, and Figure 6 shows the device load and the number of CPs over a 30-minute interval.

When a probe is detected in the input buffer, the device computes the maximum of `MINDELTA` and `MINDELAY - (nt - st)`, according to equation (2). It then adds this maximum to `nt`. This is the next free time (slot) that the device has not yet assigned to a CP. The delay returned to the probing CP is computed as `nt - st`.

### Dynamic Scenarios
Due to its deterministic nature, the protocol ensures that once a situation is reached where the number of probing CPs does not change, the device has a probe load of \( L_{\text{nom}} \), and the probe frequency is nearly the same for all CPs. Therefore, the protocol has a significant advantage over the adaptive protocol and is computationally simpler.

Figure 6 illustrates the device load and the number of CPs over 30 minutes (1800 seconds). Despite the low variance, the device load has some peaks, especially when many CPs join the network simultaneously. However, the load quickly returns to \( L_{\text{nom}} = 10 = \frac{1}{\delta_{\text{min}}} \) as the device rapidly incorporates the newcomers into the current schedule. It is important to note that this is a worst-case scenario, assuming all probes in a burst will eventually be replied to (no packet loss). In reality, packet losses, due to the limited capacity of devices, will cause the load from new CPs to be spread more evenly over time, as some CPs will only receive a reply after re-probing. Thus, in practice, the peaks in the device load, as seen in Figure 6, will be wider.

### 6. The Proxy-Bye Protocol
The protocols discussed so far aim to quickly detect when a device has left the network. When a device does not respond to four consecutive probes sent by a CP, the CP considers the device to be absent. To inform other CPs about the absence of the device, the proxy-bye protocol [3] is initiated. This dissemination protocol will be described and analyzed in the following section. As the protocol does not affect the device’s behavior, we focus on the CP.

#### CP Behavior
Assume there are \( n \) CPs \( c_1, \ldots, c_n \). As mentioned at the beginning of Section 2, a device sends the IDs of the last two CPs \( c_j, c_k \) (with \( j \neq k \)) that have probed it as part of the reply to a probe from CP \( c_i \) (where \( i \neq j, k \)). In this way, \( c_j \) and \( c_k \) become the logical neighbors of CP \( c_i \) in an overlay network. On detecting the absence of a device, this overlay network is used to rapidly inform all CPs about the device's departure. Once a CP, say \( c_i \), detects the absence of a device (as it did not receive a reply to any of its four probes), it initiates the proxy-bye protocol by sending a message to its logical neighbors \( c_j \) and \( c_k \) informing them about the absence of the device. On receipt of a proxy-bye message, a CP probes the device once, out-of-schedule, to check if the device has really gone. If no reply is received (after a timeout period of length TOF), the CP considers the device to be absent and initiates the proxy-bye protocol by sending a proxy-bye message to its logical neighbors. This results in a flooding of proxy-bye messages through the overlay network.

### 7. Analyzing the Effect of Proxy-Bye
Since CPs can (and will) detect the absence of a device individually using the probe protocol, the proxy-bye protocol may seem superfluous. Its introduction raises the immediate question of how much the absence detection of devices is affected by the proxy-bye protocol. Will all present CPs now know faster that a device is absent? This is studied by considering two scenarios: device absence detection without and with the proxy-bye mechanism.

The analysis of device absence detection was again done using the MODEST/MÖBIUS tandem. To handle proxy-bye messages, part of the model had to be modified, especially the model of a CP. Here, we describe the relevant functionality. Figure 7 shows the basic structure of the CP model.

```java
try {
    do {
        :: when ( /* time for next ping cycle */ ) {
            send_probe {
                i = 1;
                timeout = TOF;
                ...
            }
        }
        :: when ( /* no reply received and i < 4 */ ) {
            send_probe_again {
                i += 1;
                timeout = TOS;
                ...
            }
        }
        :: when ( /* no reply received, i == 4 */ ) {
            // Send proxy-bye packet to known CPs
            init_proxybye {
                ...
            }
            throw device_gone; // Terminate CP
        }
        :: when ( /* reply received */ ) {
            handle_reply {
                i = 0;
                /* Set time for next ping-cycle */;
                ...
            }
        }
        :: when ( /* proxy-bye packet received */ ) {
            handle_proxybye {
                i = 4;
                timeout = TOF;
                // Send one probe
                ...
            }
        }
    }
} catch (device_gone) {
    // CP terminates
    bye-bye;
}
```

The measure of interest is the mean time (and variance) between the device going offline and the last CP noticing its absence. To obtain this measure, we conducted a series of terminating simulations. We assume a stable scenario with 60 CPs over the initial period of the simulation. The device goes offline at time 50. Without proxy-bye, the time until the last CP notices the absence of the device is very close to 6 seconds. This is not surprising, as the CPs still follow the schedule dictated by the device, and considering the nominal ping load \( L_{\text{nom}} \) of the device was set to 10, the last CP that successfully probed the device will be scheduled to probe again after a 6-second delay. Only then can this CP detect the absence of the device.

With proxy-bye, the result is significantly different. The time until the last CP considers the device to be absent is only 0.7 seconds after the device leaves the network. This delay has a very low variance of \( 1.8 \times 10^{-6} \). Figure 8 shows how the number of CPs that have realized the device is gone (y-axis) grows as time elapses (x-axis). Note that the device leaves at time \( t = 50 \).

### 8. Concluding Remarks
Finally, we have considered the proxy-bye protocol, which is used to propagate the absence of a device to other CPs. Our analysis has shown that proxy-bye indeed speeds up the absence detection significantly in the analyzed cases. The analysis results were obtained using the MODEST/MÖBIUS tool suite. MODEST is a modeling language with a formal semantics [7] expressed in terms of (extended) labeled transition systems. The formality of the language allows for integration with other formal analysis tools (such as model checkers) and is essential for carrying out semantically sound simulation runs with MÖBIUS, resulting in a trustworthy analysis chain. Standard simulation environments are risky to use instead, as they have been found to exhibit contradictory results (both quantitatively and qualitatively) even in simple case studies [6].

### Acknowledgements
The authors would like to thank Lex Heerink and Maarten Bodlaender, both of Philips Research, for their comments on a draft of this paper.

### References
[1] C. Baier, F. Ciezinski, and M. Größer. PROBMELA: A modeling language for communicating probabilistic processes. In: ACM-IEEE Int. Conf. on Formal Methods and Models for Codesign, ACM Press, 2004.
[2] G. Behrmann, A. David, and K.G. Larsen. A tutorial on UPPAAL. In: Formal Methods for the Design of Real-Time Systems, LNCS 3185: 200-237. Springer-Verlag, 2004. (see also www.uppaal.com).
[3] M. Bodlaender, J. Guidi, and L. Heerink. Enhancing discovery with liveness. In: IEEE Consumer Comm. and Networking Conf., IEEE CS Press, 2004.
[4] H. Bohnenkamp, T. Courtney, D. Daly, S. Derisavi, H. Hermanns, J.-P. Katoen, V. Lam, and W.H. Sanders. On integrating the MÖBIUS and MODEST modeling tools. Dependable Systems and Networks, pp. 671-672, 2003, IEEE CS Press.
[5] H. Bohnenkamp, P.R. D’Argenio, H. Hermanns, and J.-P. Katoen. MODEST: A compositional modeling formalism for real-time and stochastic systems. CTIT Tech. Rep. 04-46, 2004.
[6] D. Cavin, Y. Sasson, and A. Schiper. On the accuracy of MANET simulators. In ACM Workshop On Principles Of Mobile Computing, pp. 38-43, 2002.
[7] P.R. D’Argenio, H. Hermanns, J.-P. Katoen, and J. Klaren. MODEST: A modelling language for stochastic timed systems. In: Proc. Alg. and Prob. Methods, LNCS 2165: 87-104, 2001.
[8] P.R. D’Argenio, J.-P. Katoen, T.C. Ruys, and G. Tretmans. The bounded retransmission protocol must be on time! In Tools and Algorithms for the Construction and Analysis of Systems, LNCS 1217: 416-431, 1997.
[9] D. Deavours, G. Clark, T. Courtney, D. Daly, S. Derasavi, J. Doyle, W.H. Sanders, and P. Webster. The MÖBIUS framework and its implementation. IEEE Tr. on Softw. Eng., 28(10):956-970, 2002.
[10] http://wwwhome.cs.utwente.nl/~bohnenka/liveness-model.tar.gz
[11] W.K. Edwards. Core Jini. Prentice-Hall, 1999.
[12] J. Gorter. Modeling and analysis of the liveness UPnP extension. Master’s thesis, Univ. of Twente, 2004.
[13] E. Guttman, C. Perkins, J. Veizades, and M. Day. Service location protocol, version 2. IETF, RFC 2608, 1999. (available at www.rfc-editor.org/).
[14] M. Jelasity, W. Kowalczyk, and M. van Steen. Newscast computing. Tech. Rep. IR-CS-006, Vrije Univ. Amsterdam, 2003.
[15] M. Raynal and F. Tronel. Group membership failure detection: a simple protocol and its probabilistic analysis. Distrib. Syst. Engng, 6: 95-102, 1999.
[16] R. van Renesse, K.P. Birman, and W. Vogels. Astrolab: A robust and scalable technology for distributed system monitoring, management, and data mining. ACM Tr. on Comp. Sys., 21(2): 164-206, 2003.
[17] R. van Renesse, Y. Minsky, and M. Hayden. A gossip-style failure detection service. In: IFIP Conf. on Distributed Systems, Platforms, and Open Distributed Processing, pp. 55-70, 1998.
[18] I. Stoica, R. Morris, D. Karger, M.F. Kaashoek, and H. Balakrishnan. Chord: a scalable peer-to-peer lookup service for internet applications. In: ACM SIGCOMM, 149-160, ACM Press, 2001.
[19] UPnP Forum. UPnP Device Architecture, Version 1.0. (available from www.upnp.org).