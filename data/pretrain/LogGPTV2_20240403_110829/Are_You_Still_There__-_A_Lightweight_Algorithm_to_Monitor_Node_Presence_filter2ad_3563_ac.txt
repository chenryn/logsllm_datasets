reply. Such mechanisms are, however, not further considered here.
4Do not confuse this (cid:1) with the one used for the adaptive protocol in
Section 2.
now directly determined by the device, rather than com-
puted from a probe counter. A CP has actually no notion
anymore of the experienced or real probe load the device
has to cope with. Each reply to a probe is accompanied
with a delay d. On receipt of such reply, the CP sets a timer
and waits until d time-units have passed before it initiates
the next probe cycle.
5. Modeling and Analysis
Device model. We have analyzed the protocol again with
the MODEST-M ¤OBIUS tool tandem. Since the CP be-
haviour is simpler than before, we omit its MODEST speci-
(cid:2)cation. The interesting part is the device, which is shown
in a condensed form in Fig. 5. The constant MINDELTA
corresponds to (cid:14)min, and MINDELAY to dmin . When a
process Device (int id) {
clock st = 0;
float nt = st;
// time since system start
// last scheduled ping
do {
:: when (in.lck)
// probe in input-buffer
handle_probe {=
d = max(MINDELTA,
MINDELAY-(nt-st)),
nt += d,
r = min + (max - min)*Uniform(0,1),
cp = in.src,
x = 0 =};
// source of probe
// set clock
when (x == r && !out.lck)
send_reply {=
// reserve out-buf
out.lck = 1,
out.src = id,
out.dst = cp,
out.delay = nt-st, // delay for CP
in.lck = 0 =}
} }
In a dynamic scenario, where CPs join or leave the net-
work in a nondeterministic fashion, and perhaps even in
bursts, it is less obvious to determine whether the protocol
can meet its expectations. CPs that join the network and
start probing the device are unaware of the current sched-
ule laid out by the device. Their entrance will, therefore,
disturb the neat pattern of the probe schedule, yielding a
(temporarily) increase of the device’s load.
Simulations have been carried out to (cid:2)nd out how the
device load is affected in a dynamic environment. These
studies concentrated on the average load and its variance.
Consider a worst case scenario, where the number of ac-
tive CPs is uniformly chosen from the set f 1; : : : ; 60 g.
This choice is repeated every X time-units, where X is
exponentially distributed with rate 0:05. That is to say,
with a mean of 20 seconds, the number of active CPs will
change. Packet losses are not considered, i.e., every trans-
mitted probe will eventually be answered. The value of
(cid:14)min has been set to 0.1, and dmin equals 0.5.
In this scenario, the mean load of a device in steady-
state is 9:7 probes=s, and the variance 20:0, yielding a
standard deviation of (cid:25) (cid:6)4:5. Statistically, the probability
 70
 60
 50
 40
 30
 20
 10
 0
#Control Points
Device Load
 60
 50
 40
 30
 20
 10
 0
Figure 5. Device behaviour improved proto›
col
 1000
 1200
 1400
 1600
 1800
 2000
Time (sec)
 2200
 2400
 2600
 2800
Figure 6. Load and #CPs over 30 min
probe is detected in the input buffer, the device computes
the maximum of MINDELTA and MINDELAY-(nt-st),
according to (2). It then adds this maximum to nt. This
is the next free time (slot) that the device has not yet as-
signed to a CP. The delay that is returned to the probing
CP is computed as nt-st.
Dynamic scenarios. Due to its deterministic nature, the
protocol ensures that once a situation is reached where the
number of probing CPs does not change, the device has a
probe load of Lnom, and the probe frequency is nearly the
same for all CPs. Therefore, the protocol has a big advan-
tage over the adaptive protocol, and is even computation-
ally simpler.
of exceeding the nominal probe load is low. Fig. 6 depicts
the device load and the number of CPs over an interval of
30 minutes (1800 s). Despite the low variance, the device
load has some peaks, especially when many CPs join the
network simultaneously. However, the load falls off very
quickly again towards Lnom = 10 = 1=(cid:14)min as the device
rapidly incorporates the newcomers into the current sched-
ule. It is important to realize that is a worst-case scenario,
and it makes the unrealistic assumption that all probes in a
burst will eventually be replied to (no packet loss). In case
of packet losses, however, which will occur in bursts due
to the limited capacity of devices, the load caused by new
CPs will be spread better over time, since some CPs will
only receive a reply after some re-probing. We can there-
7
fore expect that in practice the peaks in the device load as
they appear as spikes in Fig. 6 will not be a bit wider.
6 The Proxy-Bye Protocol
The protocols discussed so far aim to quickly detect that
a device has left the network. When a device does not re-
spond to four consecutivce probes sent by a CP, the CP
considers the device to be absent. To inform other CPs
about the absence of the device, the so-called proxy-bye
protocol [3] is initiated. This dissemniation protocol will
be described and analyzed in the following. As the proto-
col does not affect the device’s behaviour, we focus on the
CP.
CP behaviour. Assume there are n CPs c1; : : : ; cn. As
mentioned in the beginning of Section 2, a device sends the
ids of the last two CPs cj; ck (with j6=k) that have probed it
as part of the reply to a probe of CP ci (i6=j; k). In this way,
cj and ck become the logical neighbours of CP ci in an
overlay network. On detecting the absence of a device, this
overlay network is used to rapidly inform all CPs about the
leave of a device. Once a CP, ci, say, pretends the absence
of a device (as it did not receive a reply to any of its four
probes), it initiates the proxy-bye protocol by sending a
message to its logical neighbours cj and ck informing them
about the absence of the device. On receipt of a proxy-bye
message, a CP probes the device once, out-of-schedule, in
order to check whether the device has really gone. If no
reply is received (after the timeout period of length TOF),
the CP considers the device to be absent, and initiates the
proxy-bye protocol by sending a proxy-bye message to its
logical neighbors. This results in a (cid:3)ooding of proxy-bye
message through the overlay network.
7 Analyzing the Effect of Proxy-Bye
As CPs can (and will) detect the absence of a device on
an individual basis using the probe protocol, the proxy-bye
protocol may seem to be super(cid:3)uous. Its introduction, in
fact, raises the immediate question to what extent the ab-
sence detection of devices is affected by the proxy-bye pro-
tocol. Will all present CPs now know faster that a device
is absent? This is studied by considering two scenarios:
device absence detection without and with the proxy-bye
mechanism.
The analysis of the device absence detection has again
been done by means of the MODEST/M ¤OBIUS tandem. In
order to deal with proxy-bye messages, part of the model
had to be modi(cid:2)ed, especially the model of a CP. Here, we
will only describe the relevant functionality. Fig. 7 shows
8
...
try {
do {
:: when ( /* time for next ping cycle */ )
send_probe {= i = 1, timeout = TOF ... =}
:: when ( /* no reply received and i < 4 */ )
send_probe_again {=
i += 1,
timeout = TOS,
... =}
:: when ( /*no reply received, i == 4 */ )
// send proxy-bye packet to known CPs
init_proxybye {= ... =};
throw device_gone // terminate CP
:: when ( /* reply received */ )
handle_reply {=
i = 0,
/* set time for next ping-cycle*/,
... =}
:: when ( /* proxy-bye packet received */)
handle_proxybye {=
i = 4,
timeout = TOF,
// send one probe
... =}
}
} catch (device_gone) {
// CP terminates
bye-bye
}
Figure 7. Sketch of CP model with proxybye
the basic structure of the CP model. Inside the iteration
of the try-block, it is waited until one of (cid:2)ve alternatives
occur: (i) it is time to start a new probe cycle (i.e., per-
form action send probe), (ii) a probe has to be resent
(action send probe again), (iii) no reply has been re-
ceived after four probes (send then proxy bye message),
(iv) a reply has been received (action handle reply),
or (v) a proxy-bye message has been received (action
handle proxybye).
The measure-of-interest is the mean time (and variance)
between the device going off-line, and the last CP noticing
its absence. To obtain this measure, we have conducted a
series of terminating simulations. We assume a stable sce-
nario, i.e., 60 CPs over the initial period of the simulation.
The device goes off-line at time 50. Without proxy-bye,
the time until the last CP notices the absence of the device
is very near to 6 seconds. This is not surprising: since the
CPs still follow the schedule that has been dictated by the
device, and considering that the nominal ping load Lnom
of the device was set to 10, the last CP that has successfully
probed the device will be scheduled to probe again after a
6 second delay. Only then this CP can detect the absence
of the device.
With proxy-bye, the result is much different. In fact,
the time until the last device considers the device to be ab-
sent is only 0.7 seconds after the device actually leaves the
network. This delay, moreover, has a very low variance of
1:8 (cid:1) 10(cid:0)6. Fig. 8 shows how the number of CPs that have
realized that the device is gone (y-axis) grows when time
elapses (x-axis). Note that the device leaves at time t=50.
 60
 50
 40
 30
 20
 10
 0
with proxy-bye
without proxy-bye
 50
 51
 52
 53
Time (sec)
 54
 55
 56
Figure 8. # informed CPs vs time when device
leaves at t=50
trinsic simplicity(cid:151)is amenable to implementation in small
computing devices.
Finally, we have considered the proxy-bye protocol
which is used to propagate the absence of a device to other
CPs. Our analysis has shown that proxy-bye indeed speeds
up the absence detection enormously in the analysed cases.
The analysis results have been obtained using the
MODEST/M ¤OBIUS tool suite. MODEST is a modeling
language with a formal semantics [7] expressed in terms
of (extended) labeled transition systems. The formality of
the language allows not only for the integration with other
formal analysis tools (such as model checkers), but, more
importantly, is essential to carry out semantically sound
simulation runs with M ¤OBIUS. This results in a trust-
worthy analysis chain. Standard simulation environments
are risky to use instead, because they have been found
to exhibit contradictory results (both quantitatively and
qualitatively, i.e., difference in behaviour) even in simple
case studies [6].
Acknowledgement. The authors like to thank Lex Heerink
and Maarten Bodlaender, both of Philips Research, for
their comments on a draft of this paper.
8. Concluding Remarks
References
This paper described two approaches to the absence de-
tection of devices in self-organizing networks, and reported
on their modeling and analysis by means of simulation.
Our analysis has shown that the adaptive probe protocol
suffers from a fairness problem: the protocol fails to ensure
that CPs probe a device with roughly the same frequency.
Instead, some CPs can have lower and lower probing fre-
quencies, whereas other CPs probe very fast, and even
have oscillating frequencies. The slow CPs will therefore
take a long time before detecting the absence of a device.
Even though the proxy-bye protocol can cushion this ef-
fect, the unfairness is still an undesirable effect(cid:151)the faster
CPs send more packets than really necessary and have a lot
of computation to do in order to adjust their frequencies.
This leasd to a waste of computing recources and an sharp
increase of power consumption, which for e.g., handheld
devices is most undesirable.
In order to overcome the unfairness problem, we have
proposed a variant of the probe protocol, where the CPs do
not adjust their probing frequencies, but where the device
is responsible to schedule the CPs for the next time they
are allowed to probe the device. Our analyses have shown
that this protocol variant does not suffer from the fairness
problem. Moreover, the protocol is capable of keeping the
load of a device within desirable limits, and(cid:151)due to its in-
[1] C. Baier, F. Ciezinski, and M. Gr¤o(cid:223)er. PROBMELA: a mod-
eling language for communicating probabilistic processes.
In: ACM-IEEE Int. Conf. on Formal Methods and Models
for Codesign, ACM Press, 2004.
[2] G. Behrmann, A. David, and K.G. Larsen. A tutorial on
UPPAAL. In: Formal Methods for the Design of Real-Time
Systems, LNCS 3185: 200(cid:150)237. Springer-Verlag, 2004. (see
also www.uppaal.com).
[3] M. Bodlaender, J. Guidi and L. Heerink. Enhancing discov-
ery with liveness. In: IEEE Consumer Comm. and Network-
ing Conf., IEEE CS Press, 2004.
[4] H. Bohnenkamp, T. Courtney, D. Daly, S. Derisavi, H. Her-
manns, J.-P. Katoen, V. Lam and W.H. Sanders. On integrat-
ing the M¤obius and MODEST modeling tools. Dependable
Systems and Networks, pp. 671(cid:150)672, 2003, IEEE CS Press.
[5] H. Bohnenkamp, P.R. D’Argenio, H. Hermanns, and J.-P.
Katoen. MODEST: A compositional modeling formalism
for real-time and stochastic systems. CTIT Tech. Rep. 04-
46, 2004.
[6] D. Cavin, Y. Sasson, and A. Schiper. On the accuracy of
MANET simulators. In ACM Workshop On Principles Of
Mobile Computing, pp. 38(cid:150)43, 2002.
9
[7] P.R. D’Argenio, H. Hermanns, J.-P. Katoen and J. Klaren.
MODEST: A modelling language for stochastic timed sys-
tems. In: Proc. Alg. and Prob. Methods, LNCS 2165: 87(cid:150)
104, 2001.
[8] P.R. D’Argenio, J.-P. Katoen, T.C. Ruys and G. Tretmans.
The bounded retransmission protocol must be on time! In
Tools and Algorithms for the Construction and Analysis of
Systems, LNCS 1217: 416(cid:150)431, 1997.
[9] D. Deavours, G. Clark, T. Courtney, D. Daly, S. Derasavi, J.
Doyle, W.H. Sanders and P. Webster. The M ¤OBIUS frame-
work and its implementation.
IEEE Tr. on Softw. Eng.,
28(10):956(cid:150)970, 2002.
[10] http://wwwhome.cs.utwente.nl/(cid:152)bohnenka/
liveness-model.tar.gz
[11] W.K. Edwards. Core Jini. Prentice-Hall, 1999.
[12] J. Gorter. Modeling and analysis of the liveness UPnP ex-
tension. Master’s thesis, Univ. of Twente, 2004.
[13] E. Guttman, C. Perkins, J. Veizades, and M. Day. Service
location protocol, version 2. IETF, RFC 2608, 1999. (avail-
able at www.rfc-editor.org/).
[14] M. Jelasity, W. Kowalczyk and M. van Steen. Newscast
computing. Tech. Rep. IR-CS-006, Vrije Univ. Amsterdam,
2003.
[15] M. Raynal and F. Tronel. Group membership failure detec-
tion: a simple protocol and its probabilistic analysis. Dis-
trib. Syst. Engng, 6: 95(cid:150)102, 1999.
[16] R. van Renesse, K.P. Birman and W. Vogels. Astrolab: A
robust and scalable technology for distributed system mon-
itoring, management, and data mining. ACM Tr. on Comp.
Sys., 21(2): 164(cid:150)206, 2003.
[17] R. van Renesse, Y. Minsky and M. Hayden. A gossip-style
failure detection service. In: IFIP Conf. on Distributed Sys-
tems, Platforms, and Open Distributed Processing, pp. 55(cid:150)
70, 1998.
[18] I. Stoica, R. Morris, D. Karger, M.F. Kaashoek, and H. Bal-
akrishnan. Chord: a scalable peer-to-peer lookup service
for internet applications.
In: ACM SIGCOMM, 149(cid:150)160,
ACM Press, 2001.
[19] UPnP Forum. UPnP Device Architecture, Version 1.0.
(available from www.upnp.org).
10