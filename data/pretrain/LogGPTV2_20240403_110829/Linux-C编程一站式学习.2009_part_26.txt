 导线的电压值进入门电路的输入端，
个黑点，
，两个操作数不同则结果为1。与非（NAND）和或
如果接点处没有画黑点则表示这两条线并没
，这三种逻辑运算分别用与门、或门和
，则电路过于复杂了，因此逻辑电路中通
，分别用0和1表示。如果两条导线短
图的下半部分是一些
经过逻辑运算)
223
反
后
---
## Page 224
实用、更复杂的加法器可以多个位一起计算，有兴趣的读者可参考[数字逻辑基础]。
如何通过逻辑运算来做算术运算的，实际上这种加法器效率很低，只能加完了一位再加下一位，更
样一级一级传开，
请读者对照电路图验证一下真值表是否正确。如果把很多个一位全加器串接起来，就成了多位加法
第14章计算机中数的表示
法的规则用真值表列出所有可能的情况：
常有专用的与非门和或非门。
页
图 14.2. 4-bit Ripple Carry Adder
101
1o。
0 1 1 
010 
00 1 
AB Cin CoutS
表14.4.1-bit Full Adder的真值表
一
Q
11
Adder
Full
A3
1-bit
一
0
0
lo
，所以叫做Ripple Carry Adder，
0
8
4
0
0
√
0
s
C3
，现在我们看看上图中的AND、OR、XOR是怎么实现两个bit的加法
Adder
Full
A2
1-bit
S
B2
起始页
Adder
上一级
Full
1-bit
A1
，这样就可以把两个4 bit二进制
s
1
，相当于三个加数求和，三个加数都
Adder
Full
1-bit
S
4
2.不同进制之间的换算
，让进位像涟漪-
224
贝
---
## Page 226
字的取值范围是0~7，逢八进一，称为八进制（Octal）。类似地，把(10110010）分成每四位一
每三位分成一组，10、110、010，然后把每组写成一个十进制数字，就是(262)8，这样每一位数
3+2=1...12
6+2=3...01
我们将13反复除以2取余数就可以提取出上式中的1101四个数字，为了让读者更容易看清楚是哪
所以13换算成二进制应该是(1101)2。问题是怎么把13分解成等号右边的形式呢？注意到等号右边
示A3A2A1Ao是二进制数，每个数字只能是0或1，其它没有套括号加下标的数仍表示十进制数。
如果二进制和十进制数出现在同一个等式中，为了区别我们用(A3A2A1Ao)2这种形式表
同样道理，在二进制中，个位的1代表2°=1，十位的1代表21=2，百位的1代表22=4，所以
2.不同进制之间的换算 请点评
进制数分成每三位一组或者每四位一组，
计算机用二进制表示数，程序员也必须习惯使用二进制，但二进制写起来太啰嗦了，所以通常将二
1+2=0...13
13+2=6...10
个1和哪个0，
13=(0×2+13)×2+12)×2+01 )x2+10
可以写成 
13=1x23+1x22+0x21+1x20
下面来看十进制怎么换算成二进制。我们知道
第0位而不是第1位，
123=1x102+2x101+3x100
在十进制中，个位的1代表10°=1，十位的1代表101=10，百位的1代表102=100，所以
上一页
上式和下式中对应的数字都加了下标：
所以如果一个数是32位的，则MSB是第31位。
第14章计算机中数的表示
2.不同进制之间的换算
全国嵌入式人才培训基地
上式就是从二进制到十进制的
226
下三！
对
---
## Page 227
2、再类比一下，八进制（或十六进制）与十进制之间如何相互换算？
出发类比一下，十进制小数换算成二进制小数应该怎么算？
这个定义同时也是从二进制小数到十进制小数的换算公式。
1、二进制小数可以这样定义：
习题请点评
写法，好比草书和正楷的关系一样。
十六进制（Hexadecimal）
字母A~F表示10~15，这个数可以写成(B2)16，
组，1011、0010，然后把每组写成一个数字，
1.为什么计算机用二进制计数
。所以，八进制和十六进制是程序员为了书写二进制方便而发明的简便
全国嵌入式人才培训基地
起始页
 每一位数字的取值范围是0~F，逢十六进一，称为
，这个数的低位是2，高位已经大于9了，
上一级
 从本节讲的十进制转二进制的推导过程
3.整数的加减运算
2
我们规定用
2
---
## Page 228
到低位上去，结果为115 
本节介绍一种二进制补码表示法，为了便于理解，我们先看一个十进制的例子：
3.2.1's Complement表示法请点评
采用这种表示法，计算机做加法运算需要处理以下逻辑：
3.1. Sign and Magnitude表示法 请点评
我们已经了解了计算机中正整数如何表示，
3.整数的加减运算 请点评
167-52→减法转换成加法167+(-52)→负数取9的补码表示167+947→114进1→高位进的1加
167-52=167+(-52)=167+(999-52)-1000+1=167+947-1000+1=1114-1000+1=114+1=115 
杂性，
对值，加法改减法，
有一套减法器电路。
程是不同的，
值减小数的绝对值，
那么减法如何计算呢？由于我们规定了负数的表示，
要用8个bit表示正数和负数，
加减运算的操作数可以是8位、16位、32位甚至64位的。
127~127。
呢？本节讨论这些问题。
是0的表示不唯一
2．如果两数符号位不同，首先比较它们的低7位谁大，然后用大数减小数，结果的符号位和大数
1．如果两数符号位相同，就把它们的低7位相加,
上一页
，所以我们迫切需要重新设计整数的表示方法使计算过程更简单。
相同。
进位，说明结果的绝对值大于127，超出7位所能表示的数值范围，这称为溢出 
所以除了要有第1节“为什么计算机用二进制计数"提到的加法器电路之外，还要另外
，减法改加法，小数减大数改成大数减小数....这是非常低效率的。还有一个缺
，这一步减法计算仍然是免不了的。我们知道加法要进位，
既可以表示成10000000也可以表示成00000000，
为了书写方便，
一种简单的想法是把最高位规定为符号位（Sign Bit）
第14章计算机中数的表示
 计算机做加减运算需要处理很多逻辑：比较符号位，
全国嵌入式人才培训基地
3.整数的加减运算
，本节举的例子都用8个bit表示一个数，实际计算机做整数
，加法如何计算，那么负数如何表示，
但如果两个加数的符号位不同就要用大数的绝对
可以把减法转换成加法来计算，
，符号位不变。如果低7位相加时在最高位产生
，这进一步增加了逻辑的复
 减法要借位，计算过
，减法又如何计算
，要计算a-b,
，0表示正1表示
比较绝
228
下一页
---
## Page 229
从00000000到01111111（0~127），仍然可以根据最高位判断一个数是正是负。美中不足的
Complement表示法，负数的取值范围是从10000000到11111111（-127~0）
一套加法器电路，
对值分开考虑，
1's Complement表示法相对于Sign and Magnitude表示法的优势是非常明显的：不需要把符号和绝
位进的1加到低位上去，结果为00000100
←000000000 ←00010101+00010000 ←(00100000-)+00000000 ←00100000-00010000
0=1，取1的补码就是把每个bit取反，所以1的补码也称为反码。比如：
的最高位如果有进位则要加回到最低位上去。取1的补码更简单，
上述规则也适用于二进制：负数用1的补码（1's Complement）表示，减法转换成加法，
我们举的例子验证了第二种情况，另外三种情况请读者自己验证，暂时不考虑溢出的问题，稍后会
位上去。要验证这条规则得考虑四种情况：
做999-52的减法运算，
首先-52要用999-52表示，
在这个例子中我们用三位十进制数字表示正数和负数，具体规定如下：
讲到如何判定溢出。
了999，正好把先前取9的补码多加的999抵消掉了。我们本来要做167-52的减法运算，
加，得到114进1；再把高位进的1加到低位上去，
4．两个负数，相加得负
3．一正一负，相加得负
2．一正一负，相加得正
1．两个正数，相加得正
499499
498498
-498501
-499500
数值补码表示
表 14.5.9's Complement表示法
1
0
0
L
999
998
正数和负数的加法都一样算，
 再有一套把每个bit取反的电路，
 后者显然要容易一些，因为没有借位。这种补码表示法的计算规则用一句话
，就是947，这称为取9的补码（9's Complement）；然后把167和947相
计算逻辑更简单，甚至连减法器电路都省了
，就可以做加法和减法运算。如果8个bit采用1's
得115，
 本来应该加1000，
，连减法都不用做，因为1-1=0，1-
 结果加了1,
正数是
 结果变成
，计算结果
少加
229
只要有
---
## Page 230
果两个负数相加溢出，结果一定是正数；
如何判断产生了溢出呢？我们还是分四种情况讨论：如果两个正数相加溢出，
出，例如：
8个bit采用2's Complement表示法的取值范围是-128~127,
去。请读者自己验证上-
示法的计算规则有些不同：减法转换成加法，
码，
补码就是1-b+1=10-b，相当于从2里面减去b。类似地，要表示-4需要对00000100取补
从00000000到01111111（0~127）
示法，负数的取值范围是从10000000到11111111（-128～-1）
2's Complement表示法规定：正数不变,
3.3.2's Complement表示法请点评
题，我们引入2's Complement表示法。
是0的表示仍然不唯一
一的，
：11111111-00000100+1=100000000-00000100,
图14.4.如何判定溢出
目前绝大多数计算机都采用这种表示法。为什么称为"2的补码"呢？因为对一位二进制数b取
相加得负 (溢出)
+
图14.3.有符号数加法溢出
十
01xxxxxxX进位
00xxxxxXX
100000000
两个正数
XXXXXXX0
两个正数
0xxXxxXX
相
OXXXXXXX
OxXXXXXX
01111010
11111000
lxxXxxxX
OXXXXXXX
10000010
进位
进位
，既可以表示成11111111也可以表示成00000000，
一节提到的四种情况下这条规则都能算出正确结果。
相加得正 (溢出)
+
10xxxxxxx进位
11xxxxxxx
两个负数
1xxxxxxx
-126
OxXXXXXX
OXXXXXXX
1xxxxxxx
lxxXXXXX
OXXXXXXX
122
（进位
也可以根据最高位判断一
一正一负相加，无论结果是正是负都不可能溢出。
负数先取反码再加1。
+
00xxxxXxX
相加得
一正一负
lxxxxXXX
1xxxxxxx
OXXXXXXX
相当于从2°里面减去4。2's Complement表
负
7，如果计算结果超出这个范围就会产生溢
进位
一个数是正是负，
如果8个bit采用2's Complement表
正数是
+
11xxxxxxx
lxxxxxxx
lxxxxXxX
lxxxxxxx
为了解决这最后一个问
 不必加回到最低位上
，结果一定是负数；如
（进位
并且0的表示是唯
---
## Page 231
2.不同进制之间的换算
[24] 有时候会进一步细分，把正整数溢出称为上溢（Overflow），
算结果理解成有符号数，也可以检查负数标志判断结果是正是负。
算结果的所有bit都是零则设置零标志，
异或设置溢出标志。
器在做完计算之后，
都一样，比如上面的例子也可以看作无符号数的加法：
3.4.有符号数和无符号数 请点评
（Unsigned Number）。其实计算机做加法时并不区分操作数是有符号数还是无符号数，计算过程
前面几节我们用8个bit表示正数和负数，讲了三种表示法，
接到溢出标志位。
如果不同则表示有溢出。逻辑电路的实现可以把这两个进位连接到一个异或门，把异或门的输出连
(Underflow），
加法，
充
从上图可以得出结论：在相加过程中最高位产生的进位和次高位产生的进位如果相同则没有溢出
符号数130和248相加，
1果把这两个操作数看作有符号数-126和-8相加,
，如果程序把它理解成有符号数加法,
下一步就要检查进位标志。通常计算机在做算术运算之后还可能设置另外两个标志，
图14.5.无符号数加法进位
100000000进位
：11111000
01111010
10000010
，详见strtol(3）。
至于这个加法到底是有符号数加法还是无符号数加法则取决于程序怎么理解
根据最高位产生的进位设置进位标志，
I
，计算结果是122进1，
x
122 +256
248
130
，如果计算结果的最高位是1则设置负数标志，如果程序把计
全国嵌入式人才培训基地
下
一步就要检查溢出标志，
起始页
也就是122+256，这个结果是对的。计算机的加法
上一级
计算结果是错的,
，每种表示法对应一种计算规则，
 同时根据最高位和次高位产生的进位的
，负整数溢出称为下溢
，如果程序把它理解成无符号
因为产生了溢出；但如果看作
4.浮点数
，这称为
，如果计
2
上一页
咪
---
## Page 232
地，17=(10001)2x2°=(0.10001)2x25，把尾数的有效数字全部移到小数点后，这样就可以表示
如果要表示17这个数，我们知道17=17.0x100=0.17×102，
4.浮点数请点评
1=15:
指数（Biased Exponent）。规定一个偏移值，
有规定如何表示负数。我们可以在指数部分规定一个符号位，
如果我们要表示0.25就遇到新的困难了，
为
示2的多少次方）和尾数部分（小数点前面是0，
们用一个简单的模型来解释浮点数的基本概念。我们的模型由三部分组成：
（Exponent）。浮点数在计算机中的表示与此类似,
学计数法可以写成3.2767×104，
浮点数在计算机中的表示是基于科学计数法（Scientific Notation）的，我们知道32767这个数用科
上一页
图14.8.0.25的偏移指数浮点数表示
图14.7.17的浮点数表示
1 bit
图14.6.
exponent
exponent
exponent
一种浮点数格式
biased
01111
00101
5bits
，3.2767称为尾数（Mantissa，
 significand 
10000000
significand
10001000
significand
8bits
第14章计算机中数的表示
全国嵌入式人才培训基地
，因为0.25=1x2-2=(0.1)2×2-1，
4.浮点数
，比如16，实际的指数要加上这个偏移值再填写到指
，尾数部分只表示小数点后的数字）。
只不过基数（Radix）是2而不是10。下面我
类似