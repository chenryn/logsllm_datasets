title:An Expressive Model for the Web Infrastructure: Definition and Application
to the Browser ID SSO System
author:Daniel Fett and
Ralf K&quot;usters and
Guido Schmitz
2014 IEEE Symposium on Security and Privacy
An Expressive Model for the Web Infrastructure:
Deﬁnition and Application to the BrowserID SSO System
Daniel Fett, Ralf Küsters, and Guido Schmitz
University of Trier, Germany
Email: {fett,kuesters,schmitzg}@uni-trier.de
Abstract—The web constitutes a complex infrastructure and,
as demonstrated by numerous attacks, rigorous analysis of
standards and web applications is indispensable.
Inspired by successful prior work, in particular the work
by Akhawe et al. as well as Bansal et al., in this work we
propose a formal model for the web infrastructure. While
unlike prior works, which aim at automatic analysis, our model
so far is not directly amenable to automation, it is much more
comprehensive and accurate with respect to the standards and
speciﬁcations. As such, it can serve as a solid basis for the
analysis of a broad range of standards and applications.
As a case study and another important contribution of our
work, we use our model to carry out the ﬁrst rigorous analysis
of the BrowserID system (a.k.a. Mozilla Persona), a recently de-
veloped complex real-world single sign-on system that employs
technologies such as AJAX, cross-document messaging, and
HTML5 web storage. Our analysis revealed a number of very
critical ﬂaws that could not have been captured in prior models.
We propose ﬁxes for the ﬂaws, formally state relevant security
properties, and prove that the ﬁxed system in a setting with
a so-called secondary identity provider satisﬁes these security
properties in our model. The ﬁxes for the most critical ﬂaws
have already been adopted by Mozilla and our ﬁndings have
been rewarded by the Mozilla Security Bug Bounty Program.
Keywords-Web Security; Formal Security Analysis; Web
Model; Single Sign-on
I. INTRODUCTION
The World Wide Web is a complex infrastructure, with
a rich set of security requirements and entities, such as
DNS servers, web servers, and web browsers, interacting
using diverse technologies. New technologies and standards
(for example, HTML5 and related technologies) introduce
even more complexity and security issues. As illustrated by
numerous attacks (see, e.g., [2], [6], [20], [27], [30]), rigorous
analysis of the web infrastructure and web applications is
indispensable.
Inspired by successful prior work, in particular the work
by Akhawe et al. [2] and Bansal et al. [5], [6], one goal of our
work is to develop an expressive formal model that precisely
captures core security aspects of the web infrastructure,
where we intend to stay as closely to the standards as
possible, with a level of abstraction that is suitable for precise
formal analysis. As further discussed in Section VI, while
prior work aimed at automatic analysis, here our main focus
is to obtain a comprehensive and more accurate model with
© 2014, Daniel Fett. Under license to IEEE.
DOI 10.1109/SP.2014.49
673
respect to the standards and speciﬁcations. As such, our
model constitutes a solid basis for the analysis of a broad
range of standards and applications.
The standards and speciﬁcations that deﬁne the web are
spread across many documents, including the HTTP standard
RFC2616 (with its successor HTTPbis) and the HTML5
speciﬁcation [18], with certain aspects covered in related
documents, such as RFC6265, RFC6797, RFC6454, the
WHATWG Fetch living standard [32], the W3C Web Storage
speciﬁcation [31], and the W3C Cross-Origin Resource
Sharing speciﬁcation [12], to name just a few. Speciﬁcations
for the DNS system and communication protocols, such
as TCP, are relevant as well. The documents often build
upon each other, replace older versions or other documents,
and sometimes different versions coexist. Some details or
behaviors are not speciﬁed at all and are only documented
in the form of the source code of a web browser.
Coming up with an accurate formal model is, hence, very
valuable not only because it is required as a basis to precisely
state security properties and perform formal analysis, but
also because it summarizes and condenses important aspects
in several speciﬁcations that are otherwise spread across
different documents.
Another goal and important contribution of our work is
to apply our model to the BrowserID system (also known
under the marketing name Mozilla Persona), a complex
real-world single sign-on system developed by Mozilla.
BrowserID makes heavy use of several web technologies,
including AJAX, cross-document messaging (postMessages),
and HTML5 web storage, and as such, is a very suitable and
practically relevant target to demonstrate the importance of
a comprehensive and accurate model.
More precisely, the main contributions of our work can
be summarized as follows.
Web model: We propose a formal model of the web
infrastructure and web applications. Our model is based on
a general Dolev-Yao-style communication model, in which
processes have addresses (modeling IP addresses) and, as
usual in Dolev-Yao-style models for cryptographic protocols
(see, e.g., [1]), messages are modeled as formal terms, with
properties of cryptographic primitives, such as encryption
and digital signatures, expressed as equational theories on
terms.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
As mentioned before, our model is intended to be ex-
pressive and close to the standards and speciﬁcations, while
providing a suitable level of abstraction. Our model includes
web servers, web browsers, and DNS servers. We model
HTTP(S) requests and responses, including several headers,
such as host, cookie, location, strict-transport-security (STS),
and origin headers. Our model of web browsers captures
the concepts of windows, documents, and iframes as well as
new technologies, such as web storage and cross-document
messaging. It takes into account the complex security re-
strictions that are applied when accessing or navigating
other windows. JavaScript is modeled in an abstract way
by what we call scripting processes. These processes can
be sent around and, among others, they can create iframes
and initiate XMLHTTPRequests (XHRs). We also consider
two ways of dynamically corrupting browsers. Altogether,
our model is the most comprehensive model for the web
infrastructure to date (see also Section VI).
Analysis of the BrowserID system: We use our model to
perform the ﬁrst rigorous security analysis of the BrowserID
system, which supports both so-called primary and secondary
identity providers. Our security analysis reveals a number of
very critical and previously unknown ﬂaws, most of which
cannot be captured by previous models (see Section VI).
The most severe attack allows an adversary to login to
any service that supports authentication via BrowserID with
the email address of any Gmail and Yahoo user (without
knowing the Gmail/Yahoo credentials of these users), hence,
breaking the system completely. Another critical attack
allows an attacker to force a user to login with the attacker’s
identity. We conﬁrmed that the attacks work on the actual
BrowserID implementation. We propose ﬁxes and formulate
relevant security properties. For the BrowserID system with
a secondary identity provider, we prove that the ﬁxed system
satisﬁes these properties in our model. By this, we provide
the ﬁrst rigorous formal analysis of the BrowserID system.
Our attacks have been acknowledged by Mozilla, with the
ﬁxes for the most severe problems having been adopted by
Mozilla already and other ﬁxes being under discussion. Our
ﬁndings have been rewarded by the Mozilla Security Bug
Bounty Program.
Structure of this Paper: In Section II, we present the
basic communication model. Our web model is introduced
in Section III. For our case study, we ﬁrst, in Section IV,
provide a description of the BrowserID system. We then,
in Section V, present the analysis of BrowserID using our
model. Related work is discussed in Section VI. We conclude
in Section VII. We refer the reader to [14] for the full version
of this paper.
II. COMMUNICATION MODEL
We now present a generic Dolev-Yao-style communication
model on which our web model (see Section III) is based.
While the model is stated in a concise mathematical fashion,
instantiations, for example, using the applied pi-calculus [1]
or multi-set rewriting [13], are conceivable.
The main entities in the communication model are what
we call atomic processes, which in Section III are used to
model web browsers, web servers, DNS servers as well as
web and network attackers. Each atomic process has a list of
addresses (representing IP addresses) it listens to. A set of
atomic processes forms what we call a system. The different
atomic processes in such a system can communicate via
events, which consist of a message as well as a receiver and
a sender address. In every step of a run one event is chosen
non-deterministically from the current “pool” of events and
is delivered to an atomic process that listens to the receiver
address of that event; if different atomic processes can listen
to the same address, the atomic process to which the event is
delivered is chosen non-deterministically among the possible
processes. The (chosen) atomic process can then process
the event and output new events, which are added to the
pool of events, and so on. (In our web model, presented in
Section III, only network attackers may listen to addresses
of other atomic processes.)
Terms, Messages and Events: To deﬁne the communica-
tion model just sketched, we ﬁrst deﬁne, as usual in Dolev-
Yao models, messages, such as HTTP messages, as formal
terms over a signature, and based on this notion of messages,
we introduce events.
The signature Σ for the terms and messages considered
in this work is the union of the following pairwise disjoint
sets of function symbols: (1) constants C = IPs ∪ S ∪
{(cid:3),⊥, ♦} where the three sets are pairwise disjoint, S
is interpreted to be the set of ASCII strings (including
the empty string ε), and IPs is interpreted to be a set
of (IP) addresses, (2) function symbols for public keys,
asymmetric/symmetric encryption/decryption, and digital
signatures: pub(·), enca(·,·), deca(·,·), encs(·,·), decs(·,·),
sig(·,·), checksig(·,·), extractmsg(·), (3) n-ary sequences
(cid:5)(cid:6),(cid:5)·(cid:6),(cid:5)·,·(cid:6),(cid:5)·,·,·(cid:6), etc., and (4) projection symbols πi(·) for
all i ∈ N.
Let X = {x0, x1, . . .} be a set of variables and N be
an inﬁnite set of constants (nonces) such that Σ, X, and
N are pairwise disjoint. For N ⊆ N , we deﬁne the set
TN (X) of terms over Σ∪ N ∪ X inductively as usual: (1) If
t ∈ N ∪X, then t is a term. (2) If f ∈ Σ is an n-ary function
symbol in Σ for some n ≥ 0 and t1, . . . , tn are terms, then
f (t1, . . . , tn) is a term. By TN = TN (∅), we denote the set
of all terms over Σ ∪ N without variables, called ground
terms. The set M of messages (over N ) is deﬁned to be the
set of ground terms TN . For example, k ∈ N and pub(k)
are messages, where k typically models a private key and
pub(k) the corresponding public key. For constants a, b, c
and the nonce k ∈ N , the message enca((cid:5)a, b, c(cid:6), pub(k))
is interpreted to be the message (cid:5)a, b, c(cid:6) (the sequence of
constants a, b, c) encrypted by the public key pub(k).
For strings, i.e., elements in S, we use a speciﬁc font. For
674
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
example, HTTPReq and HTTPResp are strings. We denote by
Doms ⊆ S the set of domains, e.g., www.example.com ∈
Doms. We denote by Methods ⊆ S the set of methods used
in HTTP requests, e.g., GET, POST ∈ Methods.
The equational
theory associated with the signature
Σ is given as follows: deca(enca(x, pub(y)), y) = x,
decs(encs(x, y), y) = x, checksig(sig(x, y), pub(y)) = (cid:3),
extractmsg(sig(x, y)) = x, and πi((cid:5)x1, . . . , xn(cid:6)) = xi for
1 ≤ i ≤ n. By ≡ we denote the congruence relation on
TN (X) induced by this theory. For example, we have that
π1(deca(enca((cid:5)a, b(cid:6), pub(k)), k)) ≡ a.
An event (over IPs and M ) is of the form (a:f :m), for
a, f ∈ IPs and m ∈ M , where a is interpreted to be the
receiver address and f is the sender address. We denote by
E the set of all events.
Atomic Processes, Systems and Runs: We now deﬁne
atomic processes, systems, and runs of systems.
An atomic process takes its current state and an event as
input, and then (non-deterministically) outputs a new state
and a set of events.
Deﬁnition 1. A (generic) atomic process is a tuple p =
0) where I p ⊆ IPs, Z p is a set of states, Rp ⊆
(I p, Z p, Rp, sp
(E × Z p) × (2E × Z p), and sp
0 ∈ Z p is the initial state of p.
We write (e, z)R(E, z(cid:2)) instead of ((e, z), (E, z(cid:2))) ∈ R.
A system P is a (possibly inﬁnite) set of atomic processes.
In order to deﬁne a run of a system, we ﬁrst deﬁne
conﬁgurations and processing steps.
A conﬁguration of a system P is a tuple (S, E) where
S maps every atomic process p ∈ P to its current state
S(p) ∈ Z p and E is a (possibly inﬁnite) multi-set of events
waiting to be delivered.
the system P is of the form
A processing step of
(S, E)−→(S(cid:2), E(cid:2)) such that there exist e = (a:f :m) ∈ E,
Eout ⊆ E(cid:2), and p ∈ P with (e, S(p))Rp(Eout, S(cid:2)(p)), a ∈ I p,
S(cid:2)(p(cid:2)) = S(p(cid:2)) for all p(cid:2) (cid:14)= p, and E(cid:2) = (E \ {e}) ∪ Eout
(multi-set operations).
Deﬁnition 2. Let P be a system and E0 be a multi-set
of events. A run ρ of a system P initiated by E0 is a
ﬁnite sequence of conﬁgurations (S0, E0), . . . , (Sn, En) or
an inﬁnite sequence of conﬁgurations (S0, E0), . . . such that
0 for all p ∈ P and (Si, Ei) −→ (Si+1, Ei+1) for
S0(p) = sp
all 0 ≤ i < n (ﬁnite run) or for all i ≥ 0 (inﬁnite run).
Atomic Dolev-Yao Processes: We next deﬁne atomic
Dolev-Yao processes, for which we require that the messages
and states that they output can be computed (more formally,
derived) from the current input event and state. For this
purpose, we ﬁrst deﬁne what it means to derive a message
from given messages.
Let N ⊆ N , τ ∈ TN ({x1, . . . , xn}), and t1, . . . , tn ∈
TN . Then, by τ [t1/x1, . . . , tn/xn] we denote the (ground)
term obtained from τ by replacing all occurrences of xi
in τ by ti, for all i ∈ {1, . . . , n}. Let M ⊆ M be
675
a set of messages. We say that a message m can be
derived from M with nonces N if there exist n ≥ 0,
m1, . . . , mn ∈ M, and τ ∈ TN ({x1, . . . , xn}) such that
m ≡ τ [m1/x1, . . . , mn/xn]. We denote by dN (M ) the set
of all messages that can be derived from M with nonces N.
For example, a ∈ d{k}({enca((cid:5)a, b, c(cid:6), pub(k))}).
Deﬁnition 3. An atomic Dolev-Yao process (or simply, a
DY process) is a tuple p = (I p, Z p, Rp, sp
0, N p) such that
0) is an atomic process and (1) N p ⊆ N is an
(I p, Z p, Rp, sp
(initial) set of nonces, (2) Z p ⊆ TN (and hence, sp
0 ∈ TN ),
and (3) for all a, a(cid:2), f, f(cid:2) ∈ IPs, m, m(cid:2), s, s(cid:2) ∈ TN , set
of events E with ((a:f :m), s)R(E, s(cid:2)) and (a(cid:2):f(cid:2):m(cid:2)) ∈ E
it holds true that m(cid:2), s(cid:2) ∈ dN ({m, s}). (Note that a(cid:2), f(cid:2) ∈
dN ({m, s}).)
In the rest of this paper, we will only consider DY
processes and assume different DY processes to have disjoint
initial sets of nonces.
We deﬁne a speciﬁc DY process, called an attacker process,
which records all messages it receives and outputs all
messages it can possibly derive from its recorded messages.
Hence, an attacker process is the maximally powerful DY
process. It can carry out all attacks any DY process could
possibly perform. The attacker process is parametrized by
the set of sender addresses it may use.