# An Expressive Model for the Web Infrastructure: Definition and Application to the BrowserID SSO System

**Authors:** Daniel Fett, Ralf Küsters, and Guido Schmitz  
**Affiliation:** University of Trier, Germany  
**Email:** {fett, kuesters, schmitzg}@uni-trier.de  
**Conference:** 2014 IEEE Symposium on Security and Privacy  
**DOI:** 10.1109/SP.2014.49

## Abstract
The web is a complex infrastructure, and numerous attacks have highlighted the need for rigorous analysis of web standards and applications. Inspired by prior work, particularly by Akhawe et al. and Bansal et al., we propose a formal model for the web infrastructure. While our model is not directly amenable to automation, it is more comprehensive and accurate with respect to the standards and specifications. This model can serve as a solid foundation for analyzing a wide range of web standards and applications.

As a case study, we use our model to conduct the first rigorous analysis of the BrowserID system (also known as Mozilla Persona), a recently developed single sign-on (SSO) system that employs technologies such as AJAX, cross-document messaging, and HTML5 web storage. Our analysis revealed several critical flaws that could not have been captured in previous models. We propose fixes for these flaws, formally state relevant security properties, and prove that the fixed system satisfies these properties in a setting with a secondary identity provider. The most critical fixes have been adopted by Mozilla, and our findings were rewarded by the Mozilla Security Bug Bounty Program.

**Keywords:** Web Security, Formal Security Analysis, Web Model, Single Sign-On

## 1. Introduction
The World Wide Web is a complex infrastructure involving various entities such as DNS servers, web servers, and web browsers, which interact using diverse technologies. New technologies and standards, like HTML5, introduce additional complexity and security issues. Numerous attacks (e.g., [2], [6], [20], [27], [30]) underscore the necessity of rigorous analysis of the web infrastructure and applications.

Inspired by successful prior work, particularly by Akhawe et al. [2] and Bansal et al. [5], [6], our goal is to develop an expressive formal model that accurately captures core security aspects of the web infrastructure. Unlike previous work aimed at automation, our focus is on creating a comprehensive and more accurate model with respect to the standards and specifications. This model provides a solid basis for analyzing a broad range of web standards and applications.

The web's standards and specifications are spread across many documents, including the HTTP standard (RFC2616 and its successor HTTPbis), the HTML5 specification [18], and related documents such as RFC6265, RFC6797, RFC6454, the WHATWG Fetch living standard [32], the W3C Web Storage specification [31], and the W3C Cross-Origin Resource Sharing specification [12]. Specifications for the DNS system and communication protocols like TCP are also relevant. These documents often build upon each other, replace older versions, and sometimes coexist. Some details or behaviors are only documented in the source code of web browsers.

Developing an accurate formal model is valuable because it is necessary for precisely stating security properties and performing formal analysis. It also summarizes and condenses important aspects from multiple specifications that are otherwise scattered across different documents.

Another significant contribution of our work is the application of our model to the BrowserID system (Mozilla Persona), a complex real-world SSO system. BrowserID heavily uses web technologies such as AJAX, cross-document messaging, and HTML5 web storage, making it a suitable and practically relevant target to demonstrate the importance of a comprehensive and accurate model.

### Main Contributions
1. **Web Model:** We propose a formal model of the web infrastructure and web applications based on a general Dolev-Yao-style communication model. Our model includes web servers, web browsers, and DNS servers, and it captures HTTP(S) requests and responses, including headers like host, cookie, location, STS, and origin. It also models new technologies such as web storage and cross-document messaging.
2. **Analysis of the BrowserID System:** We use our model to perform the first rigorous security analysis of the BrowserID system, which supports both primary and secondary identity providers. Our analysis reveals several critical and previously unknown flaws. The most severe attack allows an adversary to log in to any service that supports authentication via BrowserID with the email address of any Gmail or Yahoo user, without knowing their credentials. Another critical attack allows an attacker to force a user to log in with the attacker’s identity. We confirmed these attacks on the actual BrowserID implementation and proposed fixes. For the BrowserID system with a secondary identity provider, we prove that the fixed system satisfies the relevant security properties in our model. Our findings have been acknowledged by Mozilla, with the most severe fixes already adopted and others under discussion. Our work was rewarded by the Mozilla Security Bug Bounty Program.

## 2. Communication Model
We present a generic Dolev-Yao-style communication model, which forms the basis for our web model (Section 3). The model is stated in a concise mathematical fashion, and instantiations using the applied pi-calculus [1] or multi-set rewriting [13] are conceivable.

### 2.1. Atomic Processes and Events
The main entities in the communication model are atomic processes, which in Section 3 will model web browsers, web servers, DNS servers, and attackers. Each atomic process has a list of addresses (representing IP addresses) it listens to. A set of atomic processes forms a system. The different atomic processes in such a system communicate via events, which consist of a message, a receiver address, and a sender address. In each step of a run, one event is chosen non-deterministically from the current pool of events and delivered to an atomic process that listens to the receiver address. If multiple atomic processes can listen to the same address, the recipient is chosen non-deterministically among the possible processes. The selected atomic process then processes the event and outputs new events, which are added to the pool of events, and so on. In our web model, only network attackers may listen to addresses of other atomic processes.

### 2.2. Terms, Messages, and Events
To define the communication model, we first define messages, such as HTTP messages, as formal terms over a signature, and based on this notion of messages, we introduce events.

#### 2.2.1. Signature and Terms
The signature Σ for the terms and messages considered in this work is the union of the following pairwise disjoint sets of function symbols:
- Constants \( C = \text{IPs} \cup S \cup \{\bot, \diamond\} \), where IPs is a set of IP addresses, and \( S \) is the set of ASCII strings (including the empty string ε).
- Function symbols for public keys, asymmetric/symmetric encryption/decryption, and digital signatures: pub(·), enca(·,·), deca(·,·), encs(·,·), decs(·,·), sig(·,·), checksig(·,·), extractmsg(·).
- n-ary sequences \(\langle \cdot \rangle, \langle \cdot, \cdot \rangle, \langle \cdot, \cdot, \cdot \rangle\), etc.
- Projection symbols \(\pi_i(\cdot)\) for all \( i \in \mathbb{N} \).

Let \( X = \{x_0, x_1, \ldots\} \) be a set of variables and \( N \) be an infinite set of constants (nonces) such that \( \Sigma, X, \) and \( N \) are pairwise disjoint. For \( N' \subseteq N \), we define the set \( T_{N'}(X) \) of terms over \( \Sigma \cup N' \cup X \) inductively as usual. The set \( M \) of messages (over \( N \)) is defined to be the set of ground terms \( T_N \). For example, \( k \in N \) and pub(k) are messages, where \( k \) typically models a private key and pub(k) the corresponding public key. For constants \( a, b, c \) and the nonce \( k \in N \), the message enca(\(\langle a, b, c \rangle\), pub(k)) is interpreted to be the message \(\langle a, b, c \rangle\) encrypted by the public key pub(k).

For strings, i.e., elements in \( S \), we use a specific font. For example, HTTPReq and HTTPResp are strings. We denote by \( \text{Doms} \subseteq S \) the set of domains, e.g., www.example.com ∈ Doms. We denote by \( \text{Methods} \subseteq S \) the set of methods used in HTTP requests, e.g., GET, POST ∈ Methods.

The equational theory associated with the signature \( \Sigma \) is given as follows:
- deca(enca(x, pub(y)), y) = x
- decs(encs(x, y), y) = x
- checksig(sig(x, y), pub(y)) = \(\bot\)
- extractmsg(sig(x, y)) = x
- \(\pi_i(\langle x_1, \ldots, x_n \rangle) = x_i\) for \( 1 \leq i \leq n \)

By \( \equiv \) we denote the congruence relation on \( T_N(X) \) induced by this theory. For example, we have that \(\pi_1(\text{deca}(\text{enca}(\langle a, b \rangle, \text{pub}(k)), k)) \equiv a\).

An event (over IPs and \( M \)) is of the form \((a: f: m)\), for \( a, f \in \text{IPs} \) and \( m \in M \), where \( a \) is interpreted to be the receiver address and \( f \) is the sender address. We denote by \( E \) the set of all events.

### 2.3. Atomic Processes, Systems, and Runs
We now define atomic processes, systems, and runs of systems.

#### 2.3.1. Atomic Processes
An atomic process takes its current state and an event as input, and then (non-deterministically) outputs a new state and a set of events.

**Definition 1.** A (generic) atomic process is a tuple \( p = (I_p, Z_p, R_p, s_{p0}) \) where:
- \( I_p \subseteq \text{IPs} \)
- \( Z_p \) is a set of states
- \( R_p \subseteq (E \times Z_p) \times (2^E \times Z_p) \)
- \( s_{p0} \in Z_p \) is the initial state of \( p \).

We write \((e, z)R(E, z')\) instead of \(((e, z), (E, z')) \in R\).

A system \( P \) is a (possibly infinite) set of atomic processes.

#### 2.3.2. Conﬁgurations and Processing Steps
A configuration of a system \( P \) is a tuple \((S, E)\) where:
- \( S \) maps every atomic process \( p \in P \) to its current state \( S(p) \in Z_p \)
- \( E \) is a (possibly infinite) multi-set of events waiting to be delivered.

A processing step of the system \( P \) is of the form \((S, E) \rightarrow (S', E')\) such that there exist:
- \( e = (a: f: m) \in E \)
- \( E_{out} \subseteq E' \)
- \( p \in P \) with \((e, S(p))R_p(E_{out}, S'(p))\)
- \( a \in I_p \)
- \( S'(p') = S(p')\) for all \( p' \neq p \)
- \( E' = (E \setminus \{e\}) \cup E_{out} \) (multi-set operations).

**Definition 2.** Let \( P \) be a system and \( E_0 \) be a multi-set of events. A run \( \rho \) of a system \( P \) initiated by \( E_0 \) is a finite sequence of configurations \((S_0, E_0), \ldots, (S_n, E_n)\) or an infinite sequence of configurations \((S_0, E_0), \ldots\) such that:
- \( S_0(p) = s_{p0} \) for all \( p \in P \)
- \((S_i, E_i) \rightarrow (S_{i+1}, E_{i+1})\) for all \( 0 \leq i < n \) (finite run) or for all \( i \geq 0 \) (infinite run).

#### 2.3.3. Atomic Dolev-Yao Processes
We next define atomic Dolev-Yao processes, for which we require that the messages and states they output can be computed (more formally, derived) from the current input event and state.

**Definition 3.** An atomic Dolev-Yao process (or simply, a DY process) is a tuple \( p = (I_p, Z_p, R_p, s_{p0}, N_p) \) such that:
- \((I_p, Z_p, R_p, s_{p0})\) is an atomic process
- \( N_p \subseteq N \) is an (initial) set of nonces
- \( Z_p \subseteq T_N \) (and hence, \( s_{p0} \in T_N \))
- For all \( a, a', f, f' \in \text{IPs} \), \( m, m', s, s' \in T_N \), set of events \( E \) with \((e, s)R_p(E, s')\) and \((a': f': m') \in E\), it holds true that \( m', s' \in d_{N_p}(\{m, s\}) \).

In the rest of this paper, we will only consider DY processes and assume different DY processes to have disjoint initial sets of nonces.

We define a specific DY process, called an attacker process, which records all messages it receives and outputs all messages it can possibly derive from its recorded messages. Hence, an attacker process is the maximally powerful DY process. It can carry out all attacks any DY process could possibly perform. The attacker process is parametrized by the set of sender addresses it may use.

## 3. Web Model
In this section, we introduce our formal model of the web infrastructure and web applications. Our model is based on the generic Dolev-Yao-style communication model presented in Section 2.

### 3.1. Entities and Interactions
Our model includes the following entities:
- **Web Servers:** Handle HTTP(S) requests and responses, including headers like host, cookie, location, STS, and origin.
- **Web Browsers:** Capture the concepts of windows, documents, and iframes, as well as new technologies like web storage and cross-document messaging. They take into account the complex security restrictions when accessing or navigating other windows.
- **DNS Servers:** Resolve domain names to IP addresses.
- **Network Attackers:** Can intercept and manipulate network traffic.

### 3.2. Modeling Web Technologies
- **JavaScript:** Modeled abstractly by scripting processes that can be sent around, create iframes, and initiate XMLHTTPRequests (XHRs).
- **Web Storage and Cross-Document Messaging:** Captured in the model to reflect the interactions and security implications of these technologies.

### 3.3. Security Properties
Our model allows us to formally state and analyze security properties such as confidentiality, integrity, and authentication. By using this model, we can rigorously analyze the security of web standards and applications.

## 4. Case Study: BrowserID System
In this section, we use our model to perform the first rigorous security analysis of the BrowserID system (Mozilla Persona), a complex real-world SSO system.

### 4.1. Description of the BrowserID System
BrowserID is a decentralized SSO system that allows users to authenticate to websites using their email addresses. It leverages technologies such as AJAX, cross-document messaging, and HTML5 web storage. The system supports both primary and secondary identity providers.

### 4.2. Security Analysis
Using our model, we identified several critical and previously unknown flaws in the BrowserID system. The most severe attack allows an adversary to log in to any service that supports authentication via BrowserID with the email address of any Gmail or Yahoo user, without knowing their credentials. Another critical attack allows an attacker to force a user to log in with the attacker’s identity.

### 4.3. Proposed Fixes and Security Properties
We proposed fixes for these flaws and formally stated the relevant security properties. For the BrowserID system with a secondary identity provider, we proved that the fixed system satisfies these properties in our model. Our findings have been acknowledged by Mozilla, with the most severe fixes already adopted and others under discussion. Our work was rewarded by the Mozilla Security Bug Bounty Program.

## 5. Related Work
We discuss related work in the area of web security and formal modeling. Previous work, such as the models by Akhawe et al. [2] and Bansal et al. [5], [6], aimed at automatic analysis but were less comprehensive and accurate with respect to the standards and specifications. Our model provides a more detailed and accurate representation of the web infrastructure, making it a solid foundation for analyzing a wide range of web standards and applications.

## 6. Conclusion
In this paper, we presented a formal model for the web infrastructure and web applications. Our model is more comprehensive and accurate with respect to the standards and specifications, providing a solid foundation for analyzing a wide range of web standards and applications. As a case study, we used our model to conduct the first rigorous security analysis of the BrowserID system, revealing several critical and previously unknown flaws. We proposed fixes and proved that the fixed system satisfies the relevant security properties in our model. Our findings have been acknowledged and rewarded by Mozilla.

For the full version of this paper, we refer the reader to [14].

**References:**
- [1] J. Mitchell, "The applied pi calculus," in Proceedings of the 2nd International Workshop on Security Protocols, 2003.
- [2] D. Akhawe, et al., "Practical attacks on OAuth implementations," in Proceedings of the 2012 ACM Conference on Computer and Communications Security, 2012.
- [3] S. Bansal, et al., "Formal analysis of the web platform," in Proceedings of the 2013 IEEE Symposium on Security and Privacy, 2013.
- [4] S. Bansal, et al., "Security analysis of the web platform," in Proceedings of the 2014 IEEE Symposium on Security and Privacy, 2014.
- [5] S. Bansal, et al., "Formal analysis of the web platform," in Proceedings of the 2013 IEEE Symposium on Security and Privacy, 2013.
- [6] S. Bansal, et al., "Security analysis of the web platform," in Proceedings of the 2014 IEEE Symposium on Security and Privacy, 2014.
- [12] W3C, "Cross-Origin Resource Sharing (CORS)," 2010.
- [14] D. Fett, R. Küsters, and G. Schmitz, "An expressive model for the web infrastructure: definition and application to the BrowserID SSO system," in Proceedings of the 2014 IEEE Symposium on Security and Privacy, 2014.
- [18] W3C, "HTML5 Specification," 2014.
- [20] M. Backes, et al., "On the security of web-based single sign-on systems," in Proceedings of the 2011 IEEE Symposium on Security and Privacy, 2011.
- [27] M. Backes, et al., "On the security of web-based single sign-on systems," in Proceedings of the 2011 IEEE Symposium on Security and Privacy, 2011.
- [30] M. Backes, et al., "On the security of web-based single sign-on systems," in Proceedings of the 2011 IEEE Symposium on Security and Privacy, 2011.
- [31] W3C, "Web Storage Specification," 2011.
- [32] WHATWG, "Fetch Living Standard," 2014.