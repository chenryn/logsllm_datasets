The ImageSignatureLevel field represents the signature level assigned 
to the image by Code Integrity, a Windows feature that validates digital 
signatures, among other things. This information is useful for systems that 
implement some type of software restriction policy. For example, an organi-
zation might require that certain systems in the enterprise run signed code 
Evading EDR (Early Access) © 2023 by Matt Hand
82   Chapter 5
only. These signature levels are constants defined in the ntddk.h header and 
shown in Listing 5-4.
#define SE_SIGNING_LEVEL_UNCHECKED 
0x00000000
#define SE_SIGNING_LEVEL_UNSIGNED  
0x00000001
#define SE_SIGNING_LEVEL_ENTERPRISE 
0x00000002
#define SE_SIGNING_LEVEL_CUSTOM_1  
0x00000003
#define SE_SIGNING_LEVEL_DEVELOPER 
SE_SIGNING_LEVEL_CUSTOM_1
#define SE_SIGNING_LEVEL_AUTHENTICODE 
0x00000004
#define SE_SIGNING_LEVEL_CUSTOM_2  
0x00000005
#define SE_SIGNING_LEVEL_STORE 
0x00000006
#define SE_SIGNING_LEVEL_CUSTOM_3  
0x00000007
#define SE_SIGNING_LEVEL_ANTIMALWARE 
SE_SIGNING_LEVEL_CUSTOM_3
#define SE_SIGNING_LEVEL_MICROSOFT 
0x00000008
#define SE_SIGNING_LEVEL_CUSTOM_4  
0x00000009
#define SE_SIGNING_LEVEL_CUSTOM_5  
0x0000000A
#define SE_SIGNING_LEVEL_DYNAMIC_CODEGEN 0x0000000B
#define SE_SIGNING_LEVEL_WINDOWS  
0x0000000C
#define SE_SIGNING_LEVEL_CUSTOM_7  
0x0000000D
#define SE_SIGNING_LEVEL_WINDOWS_TCB 
0x0000000E
#define SE_SIGNING_LEVEL_CUSTOM_6  
0x0000000F
Listing 5-4: Image signature levels
The purpose of each value isn’t well documented, but some are self-
explanatory. For instance, SE_SIGNING_LEVEL_UNSIGNED is for unsigned code, 
SE_SIGNING_LEVEL_WINDOWS indicates that the image is an operating system 
component, and SE_SIGNING_LEVEL_ANTIMALWARE has something to do with anti-
malware protections (more on this in Chapter 12).
The ImageSignatureType field, a companion to ImageSignatureLevel, defines 
the signature type with which Code Integrity has labeled the image to indi-
cate how the signature was applied. The SE_IMAGE_SIGNATURE_TYPE enumera-
tion that defines these values is shown in Listing 5-5.
typedef enum _SE_IMAGE_SIGNATURE_TYPE
{
SeImageSignatureNone = 0,
SeImageSignatureEmbedded,
SeImageSignatureCache,
SeImageSignatureCatalogCached,
SeImageSignatureCatalogNotCached,
SeImageSignatureCatalogHint,
SeImageSignaturePackageCatalog,
} SE_IMAGE_SIGNATURE_TYPE, *PSE_IMAGE_SIGNATURE_TYPE;
Listing 5-5: The SE_IMAGE_SIGNATURE_TYPE enumeration
The Code Integrity internals related to these properties are out-
side the scope of this chapter, but the most commonly encountered are 
SeImageSignatureNone (meaning the file is unsigned), SeImageSignatureEmbedded 
(meaning the signature is embedded in the file), and SeImageSignatureCache 
(meaning the signature is cached on the system).
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   83
If the ImagePartialMap value is nonzero, the image being mapped into 
the process’s virtual address space isn’t complete. This value, added in 
Windows 10, is set in cases such as when kernel32!MapViewOfFile() is invoked 
to map a small portion of a file whose size is larger than that of the pro-
cess’s address space. The ImageBase field contains the base address into 
which the image will be mapped, in either user or kernel address space, 
depending on the image type.
It is worth noting that when the image-load notification reaches the 
driver, the image is already mapped. This means that the code inside the 
DLL is in the host process’s virtual address space and ready to be executed. 
You can observe this behavior with WinDbg, as demonstrated in Listing 5-6.
0: kd> bp nt!PsCallImageNotifyRoutines
0: kd> g
Breakpoint 0 hit
nt!PsCallImageNotifyRoutines:
fffff803`49402bc0 488bc4 
mov 
rax,rsp
0: kd> dt _UNICODE_STRING @rcx
ntdll!_UNICODE_STRING
 "\SystemRoot\System32\ntdll.dll"
  +0x000 Length 
: 0x3c
  +0x002 MaximumLength 
: 0x3e
  +0x008 Buffer 
: 0xfffff803`49789b98 1 "\SystemRoot\System32\ntdll.dll"
Listing 5-6: Extracting the image name from an image-load notification
We first set a breakpoint on the function responsible for traversing the 
array of registered callback routines. Then we investigate the RCX register 
when the debugger breaks. Remember that the first parameter passed to 
the callback routine, stored in RCX, is a Unicode string containing the 
name of the image being loaded 1.
Once we have this image in our sights, we can view the current process’s 
VADs, shown in Listing 5-7, to see which images have been loaded into the 
current process, where, and how.
0: kd> !vad
VAD 
Level Commit
--snip--
ffff9b8f9952fd80 0  
0 Mapped READONLY Pagefile section, shared commit 0x1
ffff9b8f9952eca0 2  
0 Mapped READONLY Pagefile section, shared commit 0x23
ffff9b8f9952d260 1  
1 Mapped NO_ACCESS Pagefile section, shared commit 0xe0e
ffff9b8f9952c5e0 2  
4 Mapped Exe EXECUTE_WRITECOPY \Windows\System32\notepad.exe
ffff9b8f9952db20 3  
16 Mapped Exe EXECUTE_WRITECOPY \Windows\System32\ntdll.dll
Listing 5-7: Checking the VADs to find the image to be loaded
The last line of the output shows that the target of the image-load noti-
fication, ntdll.dll in our example, is labeled Mapped. In the case of EDR, this 
means that we know the DLL is located on disk and copied into memory. 
The loader needs to do a few things, such as resolving the DLL’s dependen-
cies, before the DllMain() function inside the DLL is called and its code 
Evading EDR (Early Access) © 2023 by Matt Hand
84   Chapter 5
begins to execute. This is particularly relevant only in situations where the 
EDR is working in prevention mode and might take action to stop the DLL 
from executing in the target process.
Evading Image-Load Notifications with Tunneling Tools
An evasion tactic that has gained popularity over the past few years is to 
proxy one’s tooling rather than run it on the target. When an attacker 
avoids running post-exploitation tooling on the host, they remove many 
host-based indicators from the collection data, making detection extremely 
difficult for the EDR. Most adversary toolkits contain utilities that collect 
network information or act on other hosts in the environment. However, 
these tools generally require only a valid network path and the ability to 
authenticate to the system with which they want to interact. So, attackers 
don’t have to execute them on a host in the target environment.
One way of staying off the host is by proxying the tools from an outside 
computer and then routing the tool’s traffic through the compromised host. 
Although this strategy has recently become more common for its usefulness 
in evading EDR solutions, the technique isn’t new, and most attackers have 
performed it for years by using the Metasploit Framework’s auxiliary mod-
ules, particularly when their complex tool sets won’t work on the target for 
some reason. For example, attackers sometimes wish to make use of the tools 
provided by Impacket, a collection of classes written in Python for working 
with network protocols. If a Python interpreter isn’t available on the target 
machine, the attackers need to hack together an executable file to drop and 
execute on the host. This creates a lot of headaches and limits the opera-
tional viability of many toolkits, so attackers turn to proxying instead.
Many command-and-control agents, such as Beacon and its socks com-
mand, support some form of proxying. Figure 5-1 shows a common proxy-
ing architecture.
socks tunnel
Tool trafﬁc
Attacker host
Attacker enviornment
Operating enviornment
Command-and-control 
server
Command-and-control 
bastion
Target host
Compromised host
Figure 5-1: A generic proxying architecture
After deploying the command-and-control agent in the target environ-
ment, operators will start a proxy on their server and then associate the 
agent with the proxy. From thereon, all traffic routed through the proxy 
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   85
will pass through a bastion, a host used to obfuscate the true location of the 
command-and-control server, to the deployed agent, allowing the operator 
to tunnel their tools into the environment. An operator may then use tools 
such as Proxychains or Proxifier to force their post-exploitation tooling, 
running on some external host, to ship its traffic through the proxy and act 
as if it were running on the internal environment.
There is, however, one significant downside to this tactic. Most offen-
sive security teams use noninteractive sessions, which introduce a planned 
delay between the command-and-control agent’s check-ins with its server. 
This allows the beaconing behavior to blend into the system’s normal traf-
fic by reducing the total volume of interactions and matching the system’s 
typical communications profile. For example, in most environments, you 
wouldn’t find much traffic between a workstation and a banking site. By 
increasing the interval between check-ins to a server posing as a legitimate 
banking service, attackers can blend into the background. But when proxy-
ing, this practice becomes a substantial headache, as many tools aren’t built 
to support high-latency channels. Imagine trying to browse a web page but 
only being allowed to make one request per hour (and then having to wait 
another hour for the results).
To work around this, many operators will reduce the check-in intervals 
to nearly zero, creating an interactive session. This lessens network latency, 
allowing the post-exploitation tooling to run without delay. However, 
because nearly all command-and-control agents use a single communica-
tions channel for check-ins, tasking, and the sending of output, the vol-
ume of traffic over this single channel can become significant, tipping off 
defenders that suspicious beaconing activity is taking place. This means 
attackers must make some trade-offs between host-based and network-based 
indicators with respect to their operating environment.
As EDR vendors enhance their ability to identify beaconing traffic, 
offensive teams and developers will continue to advance their tradecraft to 
evade detection. One of the next logical steps in accomplishing this is to 
use multiple channels for command-and-control tasking rather than only 
one, either by employing a secondary tool, such as gTunnel, or by building 
this support into the agent itself. Figure 5-2 shows an example of how this 
could work.
gTunnel forward tunnel
Tool trafﬁc
Attacker host
Attacker enviornment
Command-and-control 
server
Command-and-control 
bastion
gTunnel 
bastion
Target host
Compromised host
Operating enviornment
Figure 5-2: The gTunnel proxying architecture
Evading EDR (Early Access) © 2023 by Matt Hand
86   Chapter 5
In this example, we still use the existing command-and-control channel 
to control the agent deployed on the compromised host, but we also add a 
gTunnel channel that allows us to proxy our tooling. We execute the tooling 
on our attacker host, virtually eliminating the risk of host-based detection, 
and route the tool’s network traffic through gTunnel to the compromised 
system, where it continues as if it originated from the compromised host. 
This still leaves open the opportunity for defenders to detect the attack 
using network-based detections, but it greatly reduces the attacker’s foot-
print on the host.
Triggering KAPC Injection with Image-Load Notifications
Chapter 3 discussed how EDRs often inject function-hooking DLLs into 
newly created processes to monitor calls to certain functions of interest. 
Unfortunately for vendors, there is no formally supported way of injecting 
a DLL into a process from kernel mode. Ironically, one of their most com-
mon methods of doing so is a technique often employed by the malware 
they seek to detect: APC injection. Most EDR vendors use KAPC injection, a 
procedure that instructs the process being spawned to load the EDR’s DLL 
despite it not being explicitly linked to the image being executed.
To inject a DLL, EDRs can’t simply write the contents of the image into 
the process’s virtual address space however they wish. The DLL must be 
mapped in a manner that follows the PE format. To achieve this from ker-
nel mode, the driver can use a pretty neat trick: relying on an image-load 
callback notification to watch for a newly created process loading ntdll.dll. 
Loading ntdll.dll is one of the first things a new process does, so if the driver 
can notice this happening, it can act on the process before the main thread 
begins its execution: a perfect time to place its hooks. This section walks 
you through the steps to inject a function-hooking DLL into a newly created 
64-bit process.
Understanding KAPC Injection
KAPC injection is relatively straightforward in theory and only gets murky 
when we talk about its actual implementation in a driver. The general gist 
is that we want to tell a newly created process to load the DLL we specify. 
In the case of EDRs, this will almost always be a function-hooking DLL. 
APCs, one of several methods of signaling a process to do something for us, 
wait until a thread is in an alertable state, such as when the thread executes 
kernel32!SleepEx() or kernel32!WaitForSingleObjectEx(), to perform the task we 
requested.
KAPC injection queues this task from kernel mode, and unlike plain 
user-mode APC injection, the operating system doesn’t formally support 
it, making its implementation a bit hacky. The process consists of a few 
steps. First, the driver is notified of an image load, whether it be the process 
image (such as notepad.exe) or a DLL that the EDR is interested in. Because 
the notification occurs in the context of the target process, the driver then 
searches the currently loaded modules for the address of a function that 
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   87
can load a DLL, specifically ntdll!LdrLoadDll(). Next, the driver initializes a 
few key structures, providing the name of the DLL to be injected into the 
process; initializes the KAPC; and queues it for execution into the process. 
Whenever a thread in the process enters an alertable state, the APC will be 
executed and the EDR driver’s DLL will be loaded.
To better understand this process, let’s step through each of these 
stages in greater detail.
Getting a Pointer to the DLL-Loading Function
Before the driver can inject its DLL, it must get a pointer to the undocu-
mented ntdll!LdrLoadDll() function, which is responsible for loading a DLL 
into a process, similarly to kernel32!LoadLibrary(). This is defined in Listing 5-8.
NTSTATUS
LdrLoadDll(IN PWSTR SearchPath OPTIONAL,
IN PULONG DllCharacteristics OPTIONAL,
IN PUNICODE_STRING DllName,
OUT PVOID *BaseAddress)
Listing 5-8: The LdrLoadDll() definition
Note that there is a difference between a DLL being loaded and it 
being fully mapped into the process. For this reason, a post-operation 
callback may be more favorable than a pre-operation callback for some 
drivers. This is because, when a post-operation callback routine is noti-
fied, the image is fully mapped, meaning that the driver can get a pointer 
to ntdll!LdrLoadDll() in the mapped copy of ntdll.dll. Because the image 
is mapped into the current process, the driver also doesn’t need to worry 
about address space layout randomization (ASLR).
Preparing to Inject
Once the driver gets a pointer to ntdll!LdrLoadDll(), it has satisfied the most 
important requirement for performing KAPC injection and can start inject-
ing its DLL into the new process. Listing 5-9 shows how an EDR’s driver 
might perform the initialization steps necessary to do so.
typedef struct _INJECTION_CTX
{
UNICODE_STRING Dll;
WCHAR Buffer[MAX_PATH];
} INJECTION_CTX, *PINJECTION_CTX
void Injector()
{
NTSTATUS status = STATUS_SUCCESS;
PINJECTION_CTX ctx = NULL;
const UNICODE_STRING DllName = RTL_CONSTANT_STRING(L"hooks.dll");
--snip--
Evading EDR (Early Access) © 2023 by Matt Hand
88   Chapter 5
 1 status = ZwAllocateVirtualMemory(
ZwCurrentProcess(),
(PVOID *)&ctx,
0,
sizeof(INJECTION_CTX),
MEM_COMMIT | MEM_RESERVE,
PAGE_READWRITE
);
--snip--
RtlInitEmptyUnicodeString(
&ctx->Dll,
ctx->Buffer,
sizeof(ctx->Buffer)
);
 2 RtlUnicodeStringCopyString(
&ctx->Dll,
DllName
);
--snip--
}
Listing 5-9: Allocating memory in the target process and initializing the context structure
The driver allocates memory inside the target process 1 for a context 
structure containing the name of the DLL to be injected 2.
Creating the KAPC Structure
After this allocation and initialization completes, the driver needs to allo-
cate space for a KAPC structure, as shown in Listing 5-10. This structure holds 
the information about the routine to be executed in the target thread.
PKAPC pKapc = (PKAPC)ExAllocatePoolWithTag(
NonPagedPool,
sizeof(KAPC),
'CPAK'
);
Listing 5-10: Allocating memory for the KAPC structure