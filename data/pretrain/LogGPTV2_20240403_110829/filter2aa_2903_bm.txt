    int brps = get_num_brp_resources();
    return core_has_mismatch_brps() ? brps - 1 : brps;
}
如此看来，一共检测到6个硬件断点支持，保留了1个给“地址不匹
配时命中”的特殊用途。
上面系统的CPU是瑞芯微的RK3288，实现的是ARMv7版本。
[ 0.000000] CPU: ARMv7 Processor [410fc0d1] revision 1 (ARMv7), cr=10c5387
d
[ 0.000000] Machine model: rockchip,rk3288-miniarm
综上所述，ARM架构定义了16对断点寄存器，可以利用它们在代
码空间对指令地址设置硬件断点，并且可以附加多种条件，包括匹配进
程（上下文匹配）和处理器执行模式。与x86架构最多支持4个硬件断点
相比，ARM架构支持的硬件断点数量有明显增加，可以附加进程匹配
条件也是一大进步。二者的另一个明显区别是x86的调试寄存器既可以
用来设置指令断点，也可以设置数据访问断点，但是ARM的断点寄存
器是不可以用来设置数据访问断点的。4.6.3节介绍的监视点寄存器是用
来满足这一需要的。
4.6.3 监视点寄存器
ARM架构单独定义了监视点寄存器来支持数据访问断点功能。与
断点寄存器对类似，ARM架构定义了16对监视点寄存器，名字分别为
WVRn和WCRn（n为0～15），编号分别为96～111和112～127。
WVR的全称是监视点数值寄存器（Watchpoint Value Register），
用来指定要监视数据的虚拟地址。
WCR的全称为监视点控制寄存器（Watchpoint Control
Registers），用来定义监视点的控制信息。WCR寄存器的位定义如图4-
11所示。其中的E位用来禁止（0）或者启用（1）监视点，WT位用来指
定监视点的类型，0代表普通监视点，1代表该监视点与LBN位域指定的
断点相关联，即所谓的链接到断点。
图4-11 WCR寄存器
与BCR类似，WCR的MASK位域用来指定匹配地址的范围，0代表
不需要屏蔽，1和2保留，3～31代表要屏蔽的地址位数。BAS（Byte
Address Select）位域的用法与BCR类似——用来选取要匹配的字节。
ARM架构定义了两种方案供设计芯片时选择：第一种方案是BAS的长
度为4位，即图4-11中的第5～8位，第9～12位保留，此时WVR中的地址
必须4字节边界对齐，BAS的每一位用来选择4个字节（字）中的一个。
第二种方案是BAS的长度为8位，WVR中的地址按8字节（双字）边界
对齐，BAS的每一位选择双字所含8个字节中的一个。
LSC（Load/store access control）位域的作用是指定要匹配的访问方
式，有如下4种选项。
0b00保留不用。
0b01匹配任何加载（load）、互斥加载（load-exclusive）或者交换
（swap）访问。
0b10匹配任何存储（store）、互斥存储（store-exclusive）或者交换
（swap）访问。
0b11匹配所有类型的访问。
PAC（Privileged Access Control）用来指定要匹配的访问权限，
0b00保留不用，0b01 代表只匹配特权访问，0b10代表只匹配非特权访
问，0b11代表匹配特权和非特权两种访问中的任何一种。
与断点寄存器的情况类似，虽然ARM架构定义了16对监视点寄存
器，但其实际数量也是依赖芯片实现的，可以通过读取前面提到的
DBGDIDR寄存器（见图4-10）的WRPs位域来检测，也是加一即为监视
点寄存器对（WRP）的数量，最小值为2。
举例来说，著名的Cortex A9微架构实现了4对监视点寄存器，6对断
点寄存器。
软件方面，32位WoA系统的CONTEXT结构体中，WRP的数量只有
1对，即：
nt!_CONTEXT
   +0x190 Wvr : [1] Uint4B
   +0x194 Wcr : [1] Uint4B
在NT内核的处理器控制块（KPRCB）中，有两个字段分别记录着
支持的断点和监视点数量：
0: kd> dt _KPRCB 81229000+580 -y Max?o
ntdll!_KPRCB
   +0x510 MaxBreakpoints : 6
   +0x514 MaxWatchpoints : 1
在64位版本中，监视点的数量增加到2对，以下分别是CONTEXT和
KPRCB结构体中的相应字段：
nt!_CONTEXT
   +0x378 Wcr : [2] Uint4B
   +0x380 Wvr : [2] Uint8B
0: kd> dt _KPRCB fffff800cf070000+980  -y max
nt!_KPRCB
   +0x898 MaxBreakpoints : 6
   +0x89c MaxWatchpoints : 2
看来WoA支持的监视点很少。为了便于访问，调试寄存器WoA版
本的NT内核封装了一些函数，下面是其中的几个：
0: kd> x nt!*hwdebugre*
811554f4            nt!KiWriteHwDebugRegs ()
8104ba34            nt!KiSetHwDebugRegs ()
8104bcb8            nt!KiReadHwDebugRegs ()
对于LoA系统，可以通过检查内核消息来观察监视点的支持情况，
比如，在前面提到的Tinker单板系统中，执行dmesg | grep watch，便可
以看到：
[0.246744] hw-breakpoint: found 5 (+1 reserved) breakpoint and 4 watchpoin
t registers.
[0.246806] hw-breakpoint: maximum watchpoint size is 4 bytes.
这意味着，系统支持4个监视点，每个监视点的监视长度是4个字
节。
顺便说一下，ARMv7中定义了一个名为DBGWFAR（Watchpoint
Fault Address Register）的寄存器用来报告触发监视点的指令地址，
ARMv8将其列为废弃（deprecated）寄存器，保留不用。原因应该是这
个信息可以通过异常上下文获取到，后面讨论操作系统层时将会继续介
绍。
4.6.4 单步跟踪
ARM架构是如何支持单步跟踪的呢？与断点指令的情况类似，这
个在x86上很简单的问题，在ARM架构中有些复杂。
查看ARMv5到ARMv7版本的架构手册，并没有与x86陷阱标志位
（TF）类似的设施。或许ARM的设计师们觉得没有必要单独用一个设
施，复用其他设施就可以了。为何如此猜测呢？因为在多个版本的
ARM手册中，都可以看到官方推荐的复用断点寄存器的单步方式。简
单来说，就是使用上面介绍的“指令地址不匹配（IVA Mismatch）”类型
的断点来实现单步跟踪。在ARMv7架构手册和实现ARMv7的Cortex™-
R4微架构技术参考手册[3]中都可以找到关于这种方法的详细描述，后者
更加详细，不仅给出了伪代码（见清单4-12），还讨论了特殊情况。
清单4-12 使用断点寄存器实现单步跟踪
1    SingleStepOff(uint32 address)
2    {
3    bkpt := FindUnusedBreakpointWithMismatchCapability();
4    SetComplexBreakpoint(bkpt, address, 4 , MDSCR_EL1 ; Read MDSCR_EL1 into Xt
MSR MDSCR_EL1,  ; Write Xt to MDSCR_EL1
在Linux内核源代码中，arch/arm64/kernel/debug-monitor.c包含了访
问MDSCR_EL1寄存器的多个函数，包括设置SS标志的
kernel_enable_single_step()、清除SS标志的kernel_disable_single_step()函
数和判断该标志是否存在的kernel_active_single_step()函数等。
4.7 本章小结
本章使用较大的篇幅详细介绍了CPU对断点（见4.1节和4.2节）和
单步执行（见4.3节）这两大关键调试功能的支持。4.4节以实模式调试
器为例，介绍了调试器是如何使用这些支持来实现有关功能的。4.5节
通过实例和动手实验简要介绍了反调试和化解反调试的基本原理。4.6
节介绍了ARM架构的断点设施。
下一章将介绍CPU的分支记录和性能监视机制。
参考资料
[1]  IA-32 Intel Architecture Software Developer’s Manual Volume
3. Intel Corporation.
[2] 8086 Monitor Instruction Manual. Seattle Computer Products
Inc. 
[3] Cortex-R4 and Cortex-R4F Technical Reference Manual. ARM
Limited.
[4] ARMv7 Hardware Breakpoint not triggering.
第5章 分支记录和性能监视
沿着正确的轨迹执行是软件正常工作的必要条件。很多软件错误都
是因为程序运行到了错误的分支。尽管这通常不是错误的根本原因，但
却是“顺藤摸瓜”的关键线索。因此，了解软件的运行轨迹对于寻找软件
问题的根源有着重要意义。很多性能问题是因为执行了不必要的代码或
循环而导致的，所以运行轨迹对于分析软件的运行效率和软件调优也有
着重要意义。
 老雷评点 
此章内容对调试和调优都有益处，鉴于篇幅所限，有些偏重
于调优的内容无法深挖，望攻调优者，莫嫌其简，喜调试者，莫
厌其烦。
因为CPU是软件的执行者，每一条指令不论是顺序执行还是分支和
跳转，都是由它来执行的，所以让CPU来记录软件的运行轨迹是最适合
的。
CPU的设计者们早就意识到了这一点。在第4章中，我们介绍过P6
处理器引入的按分支单步执行的功能，其实该功能基于一个更基本的功
能，那就是监视和记录分支（branch）、中断（interrupt）和异常
（exception）事件，简称分支监视和记录。奔腾4处理器对这一功能又
做了很大的增强，允许将分支信息记录到内存中一块称为BTS（Branch
Trace Buffer）的缓存区中。此外，奔腾4还引入了基于精确事件的采样
技术（Precise Event Based Sampling，PEBS）以及用于存储BTS和PEBS
数据的调试存储区（debug store）技术。因为把BTS和PEBS数据保存到
内存区这个动作本身会导致较多的内存访问，可能产生明显的额外开
销，所以代号为Skylake的酷睿微架构引入了RTIT（Real Time
Instruction Trace）技术，可以通过单独的输出机制把追踪信息送到处理
器外部。
本章将首先介绍分支监视功能的意义和一般方式（见5.1节），而
后详细介绍P6处理器引入的基于寄存器的分支记录功能（见5.2节）以
及奔腾4处理器引入的基于内存的调试存储机制（见5.3节）。在5.4节
中，我们将编写一个名为CpuWhere的小程序来演示调试存储机制的用
法。而后我们将简要地介绍性能监视机制，先介绍英特尔架构（见5.5
节），再扩展到ARM架构（见5.6节）。