## MySQL & PostgreSQL choice  
### 作者                                                                                                                              
digoal                                                                                                                              
### 日期                                                                                                                               
2015-07-23                                                                                                                   
### 标签                                                                                                                              
PostgreSQL , MySQL , 选型    
----                                                                                                                                          
## 背景                                                                   
本周末阿里巴巴PG技术峰会将有一个MySQL & PostgreSQL的讨论环节，旨在揭示各自的优缺点，为用户在做数据库选型时提供参考。报名的同学不要错过，未报名参加的同学届时可以关注一下会议结束后发布的文章。  
https://www.enterprisedb.com/blog/postgresql-vs-mysql-360-degree-comparison-syntax-performance-scalability-and-features?mkt_tok=eyJpIjoiTVRZMVlqRXlOVFkzWldabSIsInQiOiJBZnQwRmExdzl5VlhWTktBenpDa211TzV6MnJXUGwrTHdNY20yTEw4VnpYUzhzVlZSd2ZLeGxRa1NjRkxlaXJob3ZQNkp1MGZub0gyMU10WDRySE5yRnpVVUFhVVlyNnNzSitGK1oxNlJmZnVYdEtzeXduRzBcL0FHa0dhRVNjdDAifQ%3D%3D    
本文主要参考wikivs上的MySQL vs PostgreSQL（这个文章目前来说是互联网上相对公正的比较文章，而且内容也跟随社区会不断更新），针对MySQL和PostgreSQL各个方面进行比较，PostgreSQL部分根据个人见解进行补充，本文附件提供了一份PostgreSQL较为详细的介绍内容包括：  
"发展历程，圈子;      
特性;      
如何了解源码;      
如何跟踪内核;      
进程结构，文件结构;      
如何做压力测试;      
版本升级;      
备份恢复;      
高可用;      
读写分离;      
分布式、水平扩展;      
数据挖掘;      
扩展功能;      
TODO和软肋;      
性能优化方法;      
数据库安全;      
benchmark;      
学习资料;"  
如果你正好在做数据库选型的话，本文可能对你有所帮助。  
进入正题，本文将分几个方面对两种数据库产品进行一一叙述，MySQL部分完全参考wikivs上的介绍，PostgreSQL部分有所补充。  
本文将在以下方面对PostgreSQL和MySQL展开叙述，如果MySQL方面有误，烦请指出，谢谢。  
```  
# 架构 #  
# 性能 #  
 ## 复杂查询场景 ##  
 ## 性能特性 ##  
# 多核扩展能力 #  
# IO扩展能力 #  
# count(*) #  
# 事务系统 #  
# 连接扩展能力和线程池 #  
# benchmark #  
# ACID实现承诺 #  
# 特性 #  
 ## 图形化管理工具 ##  
 ## 简化使用或严格限制 ##  
 ## Insert Ignore / Replace ##  
 ## 约束 ##  
 ## 字段默认值 ##  
 ## 存储过程 ##  
 ## 触发器 ##  
# 复制和高可用 #  
# 数据类型 #  
# 子查询 #  
# JOIN #  
# 高级索引 #  
# 表分区 #  
# CTE语法 #  
# 分析函数 #  
# 序列 #  
# 诊断和性能管理 #  
# 其他特性 #  
# 许可 #  
# 社区分支 #  
# 支持服务 #  
# 用户群体和流行度 #  
# 与Oracle的兼容性 #  
```  
## 架构   
### MySQL  
    SQL层和数据存储层剥离，支持多种存储引擎。例如InnoDB, MyISAM, NDB。每种存储引擎适用于不同的场景，例如InnoDB支持行锁，支持ACID。而NDB则属于内存存储引擎的一种。用户可以根据自己的需求选择不同的存储引擎，但是请注意，每种存储引擎有各自的优缺点，务必了解清楚。在一个数据库中使用多种存储引擎也可能给事务一致性带来一定的问题。  
### PostgreSQL  
    目前仅支持一种存储引擎，适合大多数的应用场景，如果需要用到某些特殊场景，可以使用FDW或者UDF来扩展PostgreSQL的存储引擎方面的能力，例如使用FDW可以将mongoDB,redis,MySQL等非常多的外部数据源作为本地表直接使用，使用UDF则可以满足在数据库中直接操纵外部数据源的目的。  
    参考  
    https://wiki.postgresql.org/wiki/Fdw  
    http://blog.163.com/digoal@126/blog/static/1638770402015622360849/  
## 性能  
性能的比较是最难说清的，应用场景的不同，优化水平的不同，环境的不同都是性能评测的干扰因素。  
wikivs中提到MySQL是为简单应用设计初衷，PostgreSQL是为功能和可靠性设计初衷。所以MySQL在简单查询场景比较快，PostgreSQL在复杂查询场景比较快。(i.e. MySQL fast in simple operations, PostgreSQL more reliable and faster in complex operations)，不过实际上PostgreSQL在简单查询场景并不慢，可以参考一下我之前写的一系列PostgreSQL和Oracle在简单查询中的性能测试文章。  
http://blog.163.com/digoal@126/blog/static/163877040201541104656600/  
http://blog.163.com/digoal@126/blog/static/16387704020154431045764/  
### 复杂查询场景 ##  
MySQL 在复杂查询场景较弱，可能体现在SQL执行计划生成方面，以及对查询的支持方面，如PG支持HASH JOIN,MERGE JOIN,NESTLOOP JOIN，MySQL目前仅支持NESTLOOP。  
PostgreSQL 在复杂查询场景的处理能力较强，得益于良好的执行计划体系，CBO还是做得比较到位的，支持的因子：  
```  
# - Planner Cost Constants -  
#seq_page_cost = 1.0                    # measured on an arbitrary scale  
#random_page_cost = 4.0                 # same scale as above  
#cpu_tuple_cost = 0.01                  # same scale as above  
#cpu_index_tuple_cost = 0.005           # same scale as above  
#cpu_operator_cost = 0.0025             # same scale as above  
effective_cache_size = 8GB  
```  
IO处理能力的因子可以设置到表空间级别，对于多种IOPS能力不一的存储混合使用的场景该设置尤为有效。  
支持的优化手段：  
遗传算法，对于超出一定数量的JOIN表，有效避免穷举带来的生成计划的开销。  
```  
# - Genetic Query Optimizer -  
#geqo = on  
#geqo_threshold = 12  
#geqo_effort = 5                        # range 1-10  
#geqo_pool_size = 0                     # selects default based on effort  
#geqo_generations = 0                   # selects default based on effort  
#geqo_selection_bias = 2.0              # range 1.5-2.0  
#geqo_seed = 0.0                        # range 0.0-1.0  
```  
强制JOIN顺序，强制子查询关联提升，设置数据采样粒度，分区表约束优化等  
```  
# - Other Planner Options -  
#default_statistics_target = 100        # range 1-10000  
#constraint_exclusion = partition       # on, off, or partition  
#cursor_tuple_fraction = 0.1            # range 0.0-1.0  
#from_collapse_limit = 8  
#join_collapse_limit = 8                # 1 disables collapsing of explicit  
                                        # JOIN clauses  
```  
### 性能特性 ##  
#### PostgreSQL  
1\. 支持绑定变量，在OLTP型业务中可以有效的降低SQL解析的开销。  
2\. 基于成本的优化器，统计信息丰富，如包括行数，页数，列柱状图，MCV，MCF，数组类型统计数组元素的MCV,MCF以及柱状图。空值比例，唯一值数量或比例，平均长度，值分布与物理顺序的相关性。对于继承表的父表，统计包括所有继承表在内的以上所有统计信息。  
3\. 支持多种索引，函数索引，部分索引，多列索引，多列复杂索引。  
4\. 支持多种索引扫描方法，btree, hash, gist, spgist, gin, brin。支持自定义索引扫描操作符。  
     btree支持=,>,=,<=的检索以及排序，  
     hash支持=的检索，  
     gist是一种平衡树形结构的索引开发框架，支持任意索引模型例如B-trees, R-trees等都可以在GIST中实现（PG原生支持的GIST索引包括几何类型的方位查询，距离查询，几何体的相交，相邻，包含等查询，全文检索类型的包含检索，多维数据类型的空间信息检索，KEY-VALUE类型的检索，模糊检索等），  
     sp-gist是一种空间分区的GIST索引开发框架，适用于非平衡的数据结构，例如quad-trees, k-d trees, radix trees (tries)。目前PG原生支持几何点类型的方位查询，包含查询，等于查询；范围类型的相交，包含，大于，小于，等于等查询；文本类型的比较。  
     brin是一种针对流式数据开发的块索引，记录了每个或连续的数据块分组的数据范围，是一种LOSSY索引，在检索时只能检索到数据块，还需要在数据块的数据中执行过滤。  
     gin是一种处理混合数据结构的索引开发框架，PG原生支持例如全文分词，数组，JSON类型的包含，相交，等查询。  
5\. 支持index only scan, index scan, bitmap index scan(从索引检索大量数据，并按物理顺序排序后再从heap page按顺序返回).  
6\. 索引支持nestloop join, hash join, merge join.  
7\. 支持变长字段的自动压缩存储。tuple内压缩，tuple外压缩TOAST。4种字段的存储格式plain,main,external,extended  
8\. 支持unlogged 表，不记录WAL。  
9\. 支持数据库缓存预热，OS缓存预热。对于需要快速将数据加载到缓存的应用场景非常有用。  
10\. 支持异步提交，不影响数据库数据一致性。同时异步事务提交可以细化到事务级别，数据库级别，用户级别。对用户来说可以为可靠性要求高的事务选择同步提交，可靠性要求低性能要求高的事务选择异步提交。  
11\. 支持基于WAL的异步流复制，同步流复制。在网络带宽足够的情况下对上游节点的性能影响在5%以内。  
       在异地容灾，HA，读写分离等场景中可以使用。用于提供数据安全性，可用性，数据库读性能。对于0数据丢失的应用场景也尤为有效。  
#### MySQL  
    支持多种存储引擎  
    支持ANSI SQL 99的子集，以及扩展。  
    结果缓存，如果表的数据未变更，重复的查询不需要去表里面查询数据。直接返回前一条SQL的结果。  
    支持range,list,hash,set表分区  
    支持基于SQL语句，或行的逻辑复制。  
    网络协议压缩  
    SSL  
    触发器  
    游标  