接下米我们设定了两个datum结构，一个对应若关键字、另一个对应若记录数据。把二条记
录保存到数据库里，然后构造一个新关键字并用一个datum结构指向它。接着，我们用这个关键
字在数据库中检索记录数据。我们通过检查返回的datum结构中的dptr是否为“null”来确定我们
加入jaVa编程群：524621833
---
## Page 242
224
Linux程序设计
的检索操作是否成功。如果它不是“null”，我们就把检索到的记录数据（它可能已经被放在
dbm库内部的本地存储区里了）拷贝到程序的某个结构变量里、注意：要把记录数据的长度设置
为dbm_fetch返回的值；如果我们正在对长度不固定的记录数据进行处理但又没有这样做，操作
结果将难以预料，想要拷贝的数据可能根本就不存在。最后，我们把检索到的记录数据输出在
屏幕上，表示我们的检索操作成功了。
7.3.4其他dbm函数
除了这些最常用的dbm函数以外，在dbm数据库单还经常用到一些其他的函数，包括下面这些：
Int dbm_delete(DBx *database_dencriptor; datum key):
Lnt dbu_clearerr(Dnm*database_deecriptor);
datum dbm_firstkey(Dnm *database,descriptor):
datun dbm_nextkey(DBH *database_descriptor);
1.dbm_delete函数
dbm_delete函数的作用是从数据库里删除记录数据，其datum类型的关键字参数key用途和
dbm_fetch函数中的一样，但目的是删除记录面不是检索它。它在成功时返同“0”。
2.dbm_error函数
dbm_error函数对数据库进行简单的测试，检查其中是否有错误出现。没有错误时返回“0”。
3.dbm_clearer函数
dbm_clearerr函数的作用是清除数据库里所有已经被置位的错误条件标志。
4.dbm_firstkey和dbm_nextkey函数
这两个函数一般成对使用，它们的作用是根据关键字对数据库中全部记录进行扫描。完成
这一操作需要使用下面这样的循环结构：
DBX *db_ptr1
datum key1
for(key = dbm_tirstkey(db_ptr); key.dptr) key = dbm_nextkey(db_ptr))1
我们用这里介绍的新函数对dbm1.c做些改进。请看dbm2.c的程序清单。
动手试试：检索和删除
1）拷贝一份dbml.c，打开它进行编辑。别忘了改“#defineTEST_DB_FILE”语句。
#include cunistd.h>
#include 
include 
#include 
define TEST_DB_FILE ·/tmp/dbm2_test*
#def1ne ITEMS_USED 3
2）其他改动都集中在检索部分。
/* now t.ry and delete some dar.a */
加入jaVa编程群：524621833
---
## Page 243
第7章数据营理225
key_datum.dptr =key_to_use;
sprintf (key_to_usp, *butd*.13):
key_datum.dsize = strlen (key_to_use) :
It [dim_delete(dom_ptr, key_datum)== 0){
printf (*Data with key ks deleted\n*, key_to_use):
else {
printf(*Nothing deleted for key s\n*. key_to_use);
for (key_datum = dbn_firstkey(dibn_ptr};
key_datum= dbe_nextkey(dbn_ptr)][
key_datum.dptr:
data_datum dbs_fetch(dbn_ptr, key_datum) :
it（data_datun.dptr}（
printf(*Data retzieved\n"):
printf(Retrieved iten -g ed ssn*,
mencpy[siten_retrieved. data_datum.dptr, data_datum.dsize);
item_retrieved.misc_chars.
item_retrieved.any_integer.
1ten_retzieved.more_chars):
clse(
printf (*No data found tor key es\r", koy_to u8e) :
1
这个程序的输出如下所示：
Data with key bu13 deleted
$dbm2
Retrieved iten - Third 3 baz
Data retrieved
Retrieved iten - First! 47 foo
Data retrleved
操作注释：
这个程序的开始部分和前面的例子是完全一样的，都是把一些数据存放到数据库里去。在
这之后，我们设置了一个与第二条记录数据匹配的关键字，并把它从数据库里掉了。
接下来，程序使用dbm_firstkey和dbm_nextkey函数依次访问数据库中的每一个关键字，检
索出与之对应的记录数据来。注意，记录数据不是按顺序检索出来的。关键字不具备排序方面
的功用，它只是扫描全体记录数据的一个手段而已。
7.4CD唱盘管理软件
—
学习了环境和数据管理之后，现在是我们改进这个应用软件的时候了。dbm数据库看起来很
适合存储我们的CD唱盘资料，所以我们以它做为新编程序的基础。因为很多东西都需要重写，
所以现在正是检讨我们的设计思路并予以改进的好时机。
我们曾经在数据文件里使用逗号来分隔各个变量，这样做方便了shell脚本程序的编写，但
无形中也限制了自己。许多CD唱盘在标题和曲目里都包含有逗号，既然准备使用dbm数据库，
再使用逗号来分隔数据域就没有实际的意义了。我们决定改变设计思路，彻底放弃这一做法
到两个文件里，这一决定看来还不错，我们将继续沿用同样的逻辑安排。
加入jaVa编程群：524621833
---
## Page 244
226Linux程序设计
以前的程序多少都存在着这样-个问题，即把数据访间部分和用户界面部分混在了一起，
这与程序全写在一个文件里不无关系。在这个新的实现里，我们将用一个头文件来描述记录数
据和访问记录数据的各个函数，把用户界面和数据处理分别放到两个文件里去。
我们当然可以继续使用由curses实现的用户界面，但我们决定重新回到基于数据行的简单界
面。这会使应用程序的用户界面部分既短小又简单，让我们把精力集中到其他方面去。
虽然我们无法通过dbm代码使用SQL，但可以通过SQL术语把我们的新数据库表达得更规范。
下面的代码来描述：
CREATE TABLE cdc_entIy[
catalog CHAR(30) PRIMARY KEY REFERENCES cdt_entry(catalog)
title
CHAR (70) ,
type
CHAR (30) ,
artist
1 ;
CREATE TABLE cdt_entry(
catalog CHAR(30)REPERENCES cdc_entry(catalog)
track_no INTEGER CHECK (traek_no > 0),
PRIMARY KEY(catalog. track_no)
rack_txt CHAR (70) ,
通过这个非常简明的描述，我们知道了数据城的名字和长度。就cdc_entry数据表而言，它
告诉我们每个记录项都有一个独一无二catalog栏；就cdt_entry数据表而言，它告诉我们曲目编
号不能为零，并且，catalog和track_no两栏的组合是独一无二的。
使用dbm数据库的CD唱盘管理软件
下面开始重新编写这个软件了，我们将用数据库来保存我们需要的资料，全部程序分别保
存在三个文件里，它们是cd_data.h、app_ui.c和cd_access.c。
我们还把用户界面重新编写为一个命令行程序。在本书后面的内容里，我们将探讨如何利
用各种客户/服务器机制来实现我们的软件，使它最终成为一个能够通过WWW浏览器跨网络访
问的软件。到那时，我们还会用到这里实现的数据库接口和一部分用户界面。把用户界面转换
为一个简单的行驱动界面将节约我们在这一方面的注意力，使我们能够集中精力搞好软件里重
要的部分。
数据库头文件cd_data.h和文件cd_access.c里定义的函数将在后续章节里多次出现，请大家注
意它们的再使用情况。我们从头文件开始介绍，它对我们数据的结构和将要用来访问它的函数
例程进行了定义。
动手试试：头文件cd_data.h
1）这是CD唱盘管理软件的数据结构定义。我们的数据库由两个数据表构成，它们的结构和
尺寸都是在这个文件里定义的。我们先定义了几个数据域长度方面的常数，然后又定义了两个
结构：一个用来记录唱盘的标题资料，另一个用来记录唱盘的曲目资料：
加入jaVa编程群：524621833
---
## Page 245
第7章数据管理
227
/*The catalog_table */
#define CAT_CAT_LEN
#define CAT_TITLE_LEN
30
define CAT_TYPE_LEN
70
define CAT_ARTIST_LEN
70
typedef struet (
char catalog[CAT_CAT_LEN + 1]:
char title[CAT_TITLE_LEN + 1]:
char artist[CAT_ARTIST_LEN + 1];
char type[CAT_TYPE_LEN + 1]:
:Kxque"sp{
/The tracks Lable, one entry per track *
#define TRACK_CAr_LEN
#def 1ne TRACK_TTEXT_LEN
CAT_CAT_LEN
typedef strucet (
char catalog[TRACK_CAT_L&N + 1}:
char track_txt{TRACK_TTExT_LEN + 1];
int
track_no;
}cdt_entry:
2)定义好数据结构之后，我们再定义一些用来对数据进行访问的函数例程。以“cdc_”开
注意：有几个函数的返回值是一个数据结构。我们可以用把结构的内容强行设置为
空的办法来表明这些函数没有执行成功的情况。
/* Initializatioe and termination functions */
int database_initialize(const int new_databasel;
void database_close(void) :
/*two for sinple data retrieval */
cdc_entry get_cdc_entry(const char *cd_catalog_ptr);
cdt_entry get_cdt_entry(const char *ed_catalog_ptr. const int track_no):
/* two for data addition */
int add_cde_entry(const edc_entry entry_to_add):
int ado_cdt_entry(const cdt_entry entry_to_add1:
/two for data deletion */
int del_edt_entry{const char *cd_catalog_ptr, const int track_no):
r*cd_catalog_pt:):
/one search function */
cdc_entry search_cdc_entry(const char *cd_catalog_ptt, int *first_call_ptr):
动手试试：app_ui.c程序清单
1）现在我们进人软件的用户界面部分。这部分程序相对来说比较简单，我们将通过它来调
用我们的数据库函数，数据库函数实现在另一个文件里。我们象往常一样从头文件开始。
#defane _XOPEN_SOURCE
inelude 
include cunistd.h>
#include 
include 
#include *cd_data.h*
加入jaVa编程群：524621833
---
## Page 246
228
Linux程序设计
#define TNP_STRING_LEN 125 * this nuaber must be larger than the biggest
sinqlc string in any database structure */
2）我们用typedef把莱单选项定义为个类型。这种做法要比使用“#define”语句定义的常
数效果要好，因为它允许编译器对菜单选项变量进行类型检查。
typedef enun {
mo invalid,
no_add_tracks.
mo_add_cat ,
mo_del_cat,
mo_list_cat_tracks,
mo_find_cat
Bo_count_entries,
ro ,del,, tracks,
suodonux 
mo _exit
3）下面是各种局部函数的预定义。需要提醒大家注意的是：对数据库实际进行访问的函数
足通过“#include”语句包括进来的。
static int command_mode(int argc, char *argv1;
static void announce (void):
static menu_options show_menu(conat cdc_entry *current_cde);
static int get_confirmiconst char *question):
static int enter_new_cat_entry(cdc_entry *entry_to_update);
static void enter_new_track_entrics(const cdc_entry *entry_to_add_to):
static void del_cat._entzy(const cdc_entry *entry_to_delete);
static void del_track_entriesfconst cdc_entry *entry_to_delete)1
static cdc_ontry find_cat (void) ;
stetic void 1ist_tracks(const cdc_entry *entry_to_use) :
static void count_all_entriestvoid) :
static void display_cdt(const cdt_entry *cdt_co_show);
static void display_cdc(const cdc entry *cdc_to_show) :
static void strip_return(char *string_to_strip):
4)现在到达main函数。它先对current_cdc_entry结构进行初始化，我们用这个结构来保存当
前中选CD唱盘的标题资料。接下来，我们分析了命令行，宣布正在运行的是哪个程序。然后，
对数据库进行初始化。
void main(int argc. char *argv[11
menu_options current_option;
cdc_entry current_cdc_entry:
menset(6current_cdc_entry.*\0′, sizeof(current_cdc_entry)}:
if (erge > 1){
comnand_result - contand_node(argc, argv):
exit(conmand_result);
announce [) ;
1f (:database_initialize(0)1{
fprintt(stderr,“Sorry. unable to initialize database\n*);
fprintf(stderr.
*To create a new database use es -i\n*, argv[o]):
exit (EXTT_FAILIRR1 ;
5）现在，处理用户输人的准备工作已经就绪。我们在一个得环里等待用户对菜单做出选择
加入jaVa编程群：524621833
---
## Page 247