### 优化后的文本

接下来，我们定义了两个 `datum` 结构：一个用于关键字，另一个用于记录数据。我们将两条记录保存到数据库中，并创建一个新的关键字，用 `datum` 结构指向它。然后，我们使用这个关键字在数据库中检索记录数据。通过检查返回的 `datum` 结构中的 `dptr` 是否为 `null` 来确定检索操作是否成功。如果 `dptr` 不是 `null`，则将检索到的记录数据（可能已存储在 dbm 库的内部缓存中）复制到程序中的某个结构变量中。注意，应将记录数据的长度设置为 `dbm_fetch` 返回的值；否则，对于长度不固定的记录数据，可能会导致不可预测的结果。

最后，我们将检索到的记录数据输出到屏幕上，表示检索操作成功。

#### 7.3.4 其他 dbm 函数

除了常用的 dbm 函数外，dbm 数据库还提供了其他一些常用函数：

1. **`int dbm_delete(DBM *database_descriptor, datum key)`**
   - 功能：从数据库中删除记录数据。
   - 参数：`key` 是要删除记录的关键字。
   - 返回值：成功时返回 0。

2. **`int dbm_error(DBM *database_descriptor)`**
   - 功能：检查数据库是否有错误。
   - 返回值：没有错误时返回 0。

3. **`void dbm_clearerr(DBM *database_descriptor)`**
   - 功能：清除数据库中所有已被置位的错误条件标志。

4. **`datum dbm_firstkey(DBM *database_descriptor)` 和 `datum dbm_nextkey(DBM *database_descriptor)`**
   - 功能：这两个函数通常成对使用，用于根据关键字扫描数据库中的所有记录。
   - 使用示例：
     ```c
     DBM *db_ptr;
     datum key;
     for (key = dbm_firstkey(db_ptr); key.dptr != NULL; key = dbm_nextkey(db_ptr)) {
         // 处理每个关键字
     }
     ```

### 示例代码改进

以下是基于 `dbm1.c` 改进后的 `dbm2.c` 程序清单：

```c
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ndbm.h>

#define TEST_DB_FILE "/tmp/dbm2_test"
#define ITEMS_USED 3

int main() {
    DBM *db_ptr;
    datum key_datum, data_datum;
    char key_to_use[256];
    int result;

    // 打开数据库
    db_ptr = dbm_open(TEST_DB_FILE, O_RDWR | O_CREAT, 0644);
    if (db_ptr == NULL) {
        perror("dbm_open");
        return EXIT_FAILURE;
    }

    // 设置关键字并删除记录
    strcpy(key_to_use, "bud13");
    key_datum.dptr = key_to_use;
    key_datum.dsize = strlen(key_to_use);

    if (dbm_delete(db_ptr, key_datum) == 0) {
        printf("Data with key %s deleted\n", key_to_use);
    } else {
        printf("Nothing deleted for key %s\n", key_to_use);
    }

    // 遍历数据库中的所有记录
    for (key_datum = dbm_firstkey(db_ptr); key_datum.dptr != NULL; key_datum = dbm_nextkey(db_ptr)) {
        data_datum = dbm_fetch(db_ptr, key_datum);
        if (data_datum.dptr != NULL) {
            printf("Retrieved item: %.*s\n", (int)data_datum.dsize, (char *)data_datum.dptr);
        } else {
            printf("No data found for key %s\n", (char *)key_datum.dptr);
        }
    }

    // 关闭数据库
    dbm_close(db_ptr);
    return 0;
}
```

### CD 唱盘管理软件

学习了环境和数据管理之后，现在是我们改进 CD 唱盘管理软件的时候了。dbm 数据库看起来很适合存储我们的 CD 唱盘资料，因此我们决定以它为基础进行重写。由于许多 CD 唱盘的标题和曲目中包含逗号，我们决定放弃使用逗号分隔数据域的方法。我们将数据访问部分和用户界面部分分开，以便更好地管理和维护。

#### 数据库头文件 `cd_data.h`

```c
#define CAT_CAT_LEN 30
#define CAT_TITLE_LEN 70
#define CAT_TYPE_LEN 30
#define CAT_ARTIST_LEN 70
#define TRACK_CAT_LEN CAT_CAT_LEN
#define TRACK_TTEXT_LEN 70

typedef struct {
    char catalog[CAT_CAT_LEN + 1];
    char title[CAT_TITLE_LEN + 1];
    char artist[CAT_ARTIST_LEN + 1];
    char type[CAT_TYPE_LEN + 1];
} cdc_entry;

typedef struct {
    char catalog[TRACK_CAT_LEN + 1];
    char track_txt[TRACK_TTEXT_LEN + 1];
    int track_no;
} cdt_entry;

// 初始化和关闭数据库
int database_initialize(const int new_database);
void database_close(void);

// 数据检索
cdc_entry get_cdc_entry(const char *cd_catalog_ptr);
cdt_entry get_cdt_entry(const char *cd_catalog_ptr, const int track_no);

// 数据添加
int add_cdc_entry(const cdc_entry entry_to_add);
int add_cdt_entry(const cdt_entry entry_to_add);

// 数据删除
int del_cdc_entry(const char *cd_catalog_ptr);
int del_cdt_entry(const char *cd_catalog_ptr, const int track_no);

// 搜索功能
cdc_entry search_cdc_entry(const char *cd_catalog_ptr, int *first_call_ptr);
```

#### 用户界面文件 `app_ui.c`

```c
#define _XOPEN_SOURCE
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ndbm.h>
#include "cd_data.h"

#define TYP_STRING_LEN 125

typedef enum {
    no_invalid,
    no_add_tracks,
    no_add_cat,
    no_del_cat,
    no_list_cat_tracks,
    no_find_cat,
    no_count_entries,
    no_del_tracks,
    no_exit
} menu_options;

static int command_mode(int argc, char *argv[]);
static void announce(void);
static menu_options show_menu(const cdc_entry *current_cdc);
static int get_confirmation(const char *question);
static int enter_new_cat_entry(cdc_entry *entry_to_update);
static void enter_new_track_entries(const cdc_entry *entry_to_add_to);
static void del_cat_entry(const cdc_entry *entry_to_delete);
static void del_track_entries(const cdc_entry *entry_to_delete);
static cdc_entry find_cat(void);
static void list_tracks(const cdc_entry *entry_to_use);
static void count_all_entries(void);
static void display_cdt(const cdt_entry *cdt_to_show);
static void display_cdc(const cdc_entry *cdc_to_show);
static void strip_return(char *string_to_strip);

int main(int argc, char *argv[]) {
    menu_options current_option;
    cdc_entry current_cdc_entry;

    memset(&current_cdc_entry, '\0', sizeof(current_cdc_entry));

    if (argc > 1) {
        int command_result = command_mode(argc, argv);
        exit(command_result);
    }

    announce();
    if (database_initialize(0) != 0) {
        fprintf(stderr, "Sorry, unable to initialize database\n");
        fprintf(stderr, "To create a new database use %s -i\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    while (1) {
        current_option = show_menu(&current_cdc_entry);
        switch (current_option) {
            case no_add_cat:
                // 添加新的 CD 目录
                break;
            case no_add_tracks:
                // 添加新的音轨
                break;
            case no_del_cat:
                // 删除 CD 目录
                break;
            case no_del_tracks:
                // 删除音轨
                break;
            case no_list_cat_tracks:
                // 列出 CD 目录及其音轨
                break;
            case no_find_cat:
                // 查找 CD 目录
                break;
            case no_count_entries:
                // 统计条目数量
                break;
            case no_exit:
                // 退出程序
                database_close();
                return 0;
            default:
                break;
        }
    }

    return 0;
}
```

通过这种方式，我们可以更清晰、连贯和专业地描述和实现 CD 唱盘管理软件。