x=gmpy2.f_mod（x,q）
print int(x)
---
## Page 758
CTF特训营：技术详解、解题方法与
21.3哈希
758/1144
21.3哈希
hash，一般翻译为“散列”，也有直接音译为“哈希”的，还有
人称之为杂凑函数。把任意长度的输入，通过哈希算法，变换成固定
长度的输出，该输出就是哈希值。这种转换是一种压缩映射，即哈希
值的空间通常远小于输入的空间，不同的输入可能会哈希成相同的输
出，所以不可能从哈希值来唯一确定输入值。即哈希是一种将任意长
度的消息压缩到某一固定长度的消息摘要的函数。
哈希函数有很多，常见的有MD5、sha1、sha256等。
---
## Page 759
CTF特训营：技术详解、解题方法与
21.3.1哈希碰撞
759/1144
21.3.1哈希碰撞
哈希函数H需要满足如下性质：
1）H能够应用到任何大小的数据块上
2）H能够生成大小固定的输出；
3）对于任意给定的x，H（x）的计算很简单，但从H（x）逆推x是不
可能的。
在Python中，一般是使用hashlib库中的函数。如果想要将hash变
成字符串的话，还需要配合hexdigest使用，示例代码如下：
import hashlib
print hashlib.sha256("hello").hexdigest()
print hashlib.md5(*"hello").hexdigest()
print hashlib.sha1("hello").hexdigest()
结果如下：
2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
5d41402abc4b2a76b9719d911017c592
aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d
---
## Page 760
CTF特训营：技术详解、解题方法与
21.3.1哈希碰撞
760/1144
在PPC模式的CTF赛题中，经常会出现一个proofyourwork的过
程，其目的是防止选手大量交互占用服务器资源，所以在所有的交互
之前会让选手消耗自身资源来计算一些东西，一般是求一个hash
使hash满足某些特定的条件。举例来说，如果需要满足的条件如
下：
salt="123456"
hashlib.sha256(salt+x).hexdigest()[0:6]==123456
那么通过程序爆破即可：
salt="123456"
import string
importhashlib
fori1in string.printable:
for i2in string.printable:
fori3in string.printable:
fori4in string.printable:
if hashlib.sha256(salt+i1+i2+i3+i4).hexdigest()[0:6]=="123456":
print salt+i1+i2+i3+i4
结果如下：
1234562Z9J
根据王小云院士提出的密码哈希函数的碰撞攻击理论，可以在一
---
## Page 761
CTF特训营：技术详解、解题方法与
21.3.1哈希碰撞
761/1144
个任意的prefix后面加上不同的padding使其串的MD5一样。详情可以
参考fastcoll，参考地址为http://www.win.tue.nl/hashclash/
sha1也出现了碰撞，不同内容但是sha1相同的文件可以参考
https://security.googleblog.com/2017/02/announcing-first-sha1-
collision.html
在碰撞完的两个不同内容的串后面加入相同的字符后，两者的哈
希还是相同的，这也是一个常见考点。
---
## Page 762
CTF特训营：技术详解、解题方法与
21.3.2哈希长度扩展攻击
762/1144
21.3.2哈希长度扩展攻击
在计算hash的方式secret+message为明文的情况下，可以进行
哈希长度扩展攻击，使攻击者在不知道secret的情况下修改message
并得到另外一个hash值。
Web题目：flag在管理员手里（题目url:
http://
web.jarvisoj.com:32778/)
首先，我们会看到一个页面，其上可以下载得到一个备份文件
对备份文件进行处理，可以得到如图21-14所示的PHP源码。
---
## Page 763
CTF特训营：技术详解、解题方法与
21.3.2哈希长度扩展攻击
763/1144
Welcome Admin.Your flag is"
lse
echo
"Only Admin can see the flag!!";
图21-14
PHP源码
简单来说，我们需要达成如下所示的条件：
但是，目前我们并不知道salt的值是什么，所以必须通过hash折
---
## Page 764
CTF特训营：技术详解、解题方法与
21.3.2哈希长度扩展攻击
764/1144
展攻击来进行计算。在cookie中一共有两个值，role和hsh，其中，
role经过反序列化后可以得到Srole，我们需要修改其为admin，并且
计算新的hsh，使其满足如下条件：
Shsh === md5($salt.strrev($_COOKIE[role")
首先，我们需要满足Srole=="admin"，因此我们需要将cookie中
的role变成：
原始：
目标：
senb,:g:s
s:5:"admin";
计算Shsh的时候，所计算的是salt+role在cookie中翻转字符串后
的MD5，这里我们使用哈希扩展攻击的神器，即hashpump进行计
算。首先我们安装hashpump，命令如下：
Ssudo apt-get install git
$git clonehttps://github.com/bwall/HashPump.git
$apt-get install g++libssl-dev
$cdHashPump
$make
S sudo make install
安装完成后，我们并不知道salt的长度，所以多进行几次尝试
---
## Page 765
CTF特训营：技术详解、解题方法与
21.3.2哈希长度扩展攻击
765/1144
最终发现长度是12，代码如下：
import os
import requests
import urllib
def rev(s):
i=0
r=
while i<len(s):
if s[]=="\:
r+=chr(int（s[i+2:i+4],16))
i+=4
else:
r+=s[]
i+=1
return urllib.quote(r[:-1])
fori in range(4,32):
tmp=os.popen(*hashpump-s3a4727d57463f122833d9e732f94e4e0--data"
(pe（(s+-s:g:pwu,e-s:g:bnos
hsh=tmp.split（n")[0]
role=rev（tmp.split（"n")[1])
cookies=("role":role,"hsh":hsh}
print cookies
print requests.get("http://web.jarvisoj.com:32778/",cookies=cookies).content
结果如图21-15所示。
---
## Page 766
CTF特训营：技术详解、解题方法与.
21.3.2哈希长度扩展攻击
766/1144
"beet/ss"
`role":
图21-15运行结果图
---
## Page 767
CTF特训营：技术详解、解题方法与
第22章真题解析
767/1144
第22章真题解析
在真正的解题过程中，不仅要考察之前介绍的知识的运用能力，
也会考察代码的分析能力。之前为了方便理解，我们都是使用自己编
写的函数进行解题，其实在PyCrypto中有很多函数可以直接使用，这
样会节约很多时间。本章将介绍一些常用的函数，并针对几道CTF真
题进行讲解。
---
## Page 768
CTF特训营：技术详解、解题方法与
22.1 SUPEREXPRESS
768/1144
22.1SUPEREXPRESS
首先下载题目文件（https://www.jarvisoj.com），这里包含两个文
件，其中encrypted包含一行字符串，如下：
805eed80cbbccb94c36413275780ec94a857dfec8da8ca94a8c313a8ccf9
problem.py里面是用Python编写的加密算法，具体代码如下：
import sys
key=**CENSORED***
lag=TWCTF****CENSORED**
if len(key)% 2 ==1:
print(*Key Length Error")
sys.exit(1)
n=len(key)/2
encrypted=*
for cinflag:
c=ord（c）
for a, b in zip(key[0:n], key[n:2*n])
c=（ord（a)*c+ord（b）)%251
encrypted+=%02x%c
print encrypted
题目的意思是某flag经过加密之后变成了encrypted中的字符串
我们需要通过破解密码将明文恢复出来。
首先，我们对加密程序进行分析。加密程序中首先给出了两个值：
---
## Page 769
CTF特训营：技术详解、解题方法与
22.1SUPEREXPRESS
769/1144
一个是key，中间给出了些许字符；一个是flag，也给出了部分字符。
然后进行了如下判断：
if len(key) % 2 == 1:
print(“Key Length Error")
sys.exit(1)
这一段保证了key的长度是偶数位的。再往下：
n =len(key)/ 2
encrypted=
n是key长度的一半，结合后文对n的运用，这里的作用是通过0
~n和n～2n将key劈成了两半。encrypted是存储结果的字符串。
而后进行了一个循环，代码如下：
for c in flag:
(）po=
for a,b in zip(key[0:n], key[n:2*n]):
c=（ord（a)*c+ord（b）)%251
encrypted+=%02x%c
循环对flag的每一个字符都进行了操作，并且这个操作具有如下
两个特点。
---
## Page 770
CTF特训营：技术详解、解题方法与
22.1SUPEREXPRESS
770/1144
1）每个字符的变换都是相同的，不会因为字符的位置不同而发
生改变，所以这是一个单表替代密码。
2）针对每个字符的变换都是与key中的每一个字符进行一个稍微
有些复杂的线性变换。模数是固定的251。
满足以上两个条件之后，我们可以不用再看这个函数了，因为已
经可解了，无论这个变化有多复杂，最终都可以用一个变化来概括：
for iin range(len(m):
c[]=(ord（m[])*k+1)%251
接下来，我们需要通过已知条件来计算出k和的值。想要计算这
个值，首先要知道几个已知的对应的明密文，而我们知道，明文的前
6个字符是：
TWCTF{
密文的前6个字符是：
"805eed80cbbccb94c36413275780ec94a857dfec8da8ca94a8c313a8ccf9".decode(
hex")[0:6]
---
## Page 771
CTF特训营：技术详解、解题方法与
22.1SUPEREXPRESS
771/1144
所以其实可以列出如下6个方程：
(ord（T）*k+l)%251==0x80
(ord（W)*k+l)%251==0x5e
（ord（C）*k+l)%251==0xed
(ord（T)*k+1)%251==0x80
（ord（F)*k+1)%251==0xcb
（ord({)*k+1)%251==0xbc
为了方便，这里先不解方程，而是直接爆破：
for k in range(251):
forIin range(251):
if (ord(T)*k+1)%251==0x80 and(ord(W)*k+l)%251==0x5eand(ord(C)*k+l)%
251==0xed and(ord(T)*k+l)%251==0x80and(ord（F)*k+I)%251==0xcb and(ord()
k+l)%251==0xbc:
print k,1
结果如下：
156 76
这是加密密钥，当然这里也可以直接计算出解密密钥，具体代码
如下：
(0x80*k+l)%251==ord(T)
（0x5e*k+l)%251==ord（W）
(0xed*k+l)%251==ord(℃)
(0x80*k+l)%251==ord(T)
---
## Page 772
CTF特训营：技术详解、解题方法与
22.1 SUPEREXPRESS
772/1144
（0xcb*k+1)%251==ord(F)
（0xbc*k+1)%251==ord(t）
for k in range(251):
forlinrange(251):
if（0x80*k+l)%251==ord(T)and（0x5e*k+l)%251==ord（V)and(0xed*k+l)%251=
=ord(C)and(0x80*k+l)%251==ord(T)and(0xcb*k+l)%251==ord（F)and(0xbc*k+l)%
251==ord(）:
print k,1
结果如下：
214 51
上面输出的结果就是解密密钥了，然后执行解密脚本获得flag
代码如下：
k=214
|=51
foriin"805eed80cbbccb94c36413275780ec94a857dfec8da8ca94a8c313a8ccf9"
decode("hex"):
r+=chr((k*ord(i）+l)%251)
print r
结果如下：
TWCTF{Faster_Than_Shinkansen!}
是不是很神奇呢？有时候分析程序，不一定必须将算法研究透
---
## Page 773
CTF特训营：技术详解、解题方法与
22.1SUPEREXPRESS
773/1144
彻，知道其变换的本质及与其对应的攻击方法即可。
---
## Page 774
CTF特训营：技术详解、解题方法与
22.2 VIGENERE
774/1144
22.2VIGENERE
题目地址为https://www.jarvisoj.com。首先，打开题目所给的文
件，可以发现该题也有一个密文，还给出了加密的程序，下面分析加
密的程序：
#Python3SourceCode
from base64 import b64encode,b64decode
import sys
importos
importrandom
chars='
def shift(char,key,rev =False):
if not charin chars: