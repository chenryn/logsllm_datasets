that this subtle change is suﬃcient to enable a tight proof of
security. Our proposed modiﬁcation easily extends to elim-
inate the need for a random salt in, e.g., [7, 18] as well.
For schemes in which the random salt is included with the
signature, our technique yields signatures of shorter length
(equivalently, for signatures of the same length we obtain
better security). Thus, we may modify the scheme of [18]
to save 111 bits while still basing security on the CDH as-
sumption, or we can modify the “short signatures” of [7]
to obtain signatures of the same length but with improved
security. Furthermore, in the case of PSS-R (i.e., PSS with
message recovery) a shorter salt translates to the ability to
sign longer messages; thus, with our technique PSS-R can
be used for messages 30 bits longer than in [12] (under the
same assumptions, and with the same level of security). In
fact, combining our technique with ideas of Granboulan [20]
gives a version of PSS-R with tight security which we show
is optimal in terms of allowable message length.
2. DEFINITIONS
We review deﬁnitions of signature schemes, the decisional
Diﬃe-Hellman assumption, and claw-free (trapdoor) permu-
tations. Since we analyze our schemes in terms of their con-
crete security, none of our deﬁnitions explicitly refers to any
“security parameter”. We stress, however, that all our re-
sults imply security in the asymptotic sense as well.
2.1 Signature Schemes
We give a functional deﬁnition of both general signature
schemes as well as those supporting message recovery; this
is followed by a deﬁnition of security. In the following, H
refers to a hash function to which the algorithms are given
oracle access; this hash function will be treated as a random
oracle in the analysis. In practice, as suggested in [1], H will
be instantiated by a cryptographic hash function mapping
the appropriate domain to the appropriate range.
Definition 1. A signature scheme is a tuple of proba-
bilistic algorithms (Gen, Sign, Vrfy) over a message space M
such that:
• The key-generation algorithm Gen outputs a public key
P K and a secret key SK.
• The signing algorithm Sign takes as input secret key
SK and message m ∈ M and returns signature σ.
• If message recovery is not supported, the veriﬁcation
algorithm Vrfy takes as input a public key P K, a mes-
sage m ∈ M, and a signature σ and returns accept or
reject.
• If message recovery is supported, veriﬁcation algorithm
Vrfy takes as input public key P K and signature σ and
returns either a message m ∈ M or reject.
We make the standard correctness requirement, given here
for schemes supporting message recovery (the other case is
analogous): for all SK, P K output by Gen and all m ∈ M
we have VrfyP K(SignSK(m)) = m.
We now give a deﬁnition of strong unforgeability under
adaptive chosen-message attacks (cf. [19]); “strong” here
means that the adversary cannot even generate a new sig-
nature for a previously-signed message. We let Ω denote the
space from which the random oracle H is selected.
Definition 2. Let (Gen, Sign, Vrfy) be a signature scheme
which supports message recovery. An adversarial forging al-
gorithm F is said to (t, qh, qs, ε)-break this scheme if F runs
in time at most t, makes at most qh hash queries and at
most qs signing queries, and furthermore
Pr[(P K, SK) ← Gen; H ← Ω; σ ← F SignSK (·),H(·)
σ (cid:10)∈ Σ ∧ VrfyP K (σ) (cid:10)= reject] ≥ ε,
where Σ is the set of signatures received from SignSK(·).
(P K) :
If signature scheme (Gen, Sign, Vrfy) does not support mes-
sage recovery, the deﬁnition is as above except that we are
interested in the probability that F outputs a pair (m, σ) such
that VrfyP K (m, σ) = accept but σ was never the response of
a query SignSK(m).
In either case, a signature scheme is (t, qh, qs, ε)-secure if
no forger can (t, qh, qs, ε)-break it.
2.2 The Decisional Difﬁe-Hellman Problem
Let G be a ﬁnite, cyclic group of prime order q in which
the group operation is represented multiplicatively; further-
let g be a generator of G . The decisional Diﬃe-
more,
Hellman (DDH) problem may be described, informally, as
the problem of distinguishing between tuples of the form
(g, gx, gy, gz) for random x, y, z ∈ Zq (these are denoted
“random tuples”) and tuples of the form (g, gx, gy, gxy) for
random x, y ∈ Zq (these are denoted “Diﬃe-Hellman tu-
ples”). The following deﬁnition makes this more concrete.
Definition 3. A distinguishing algorithm D is said to
(t, ε)-break DDH in group G if D runs in time at most t and
furthermore
|Pr[x, y, z ← Zq : D(g, gx, gy, gz) = 1]
− Pr[x, y ← Zq : D(g, gx, gy, gxy) = 1]| ≥ ε.
We say that G is a (t, ε)-DDH group if no algorithm (t, ε)-
breaks DDH in G .
Hardness of the DDH problem in G implies hardness of
the computational Diﬃe-Hellman (CDH) problem as well as
the hardness of the discrete logarithm problem in G . The
converse is not, in general, true; there are groups in which
the DDH problem is known to be easy yet the CDH or dis-
crete logarithm problems seem to be hard. However, for a
variety of groups of interest “the best known algorithm for
DDH is a full discrete log algorithm” [4]. These include
(among others) the commonly-used group G of quadratic
residues modulo p, where p = αq + 1 is prime. Additionally,
Shoup [26] has shown that the DDH problem is as hard as
the discrete logarithm problem for generic algorithms (i.e.,
those that do not use the underlying group structure). For
more details, the reader is referred to two recent surveys of
the DDH problem [4, 22].
2.3 Claw-Free Permutations
As brieﬂy touched upon in the Introduction, FDH was
originally proven secure when an arbitrary trapdoor permu-
tation is used [1]. On the other hand, subsequent work on
FDH [11] and PSS [3, 12] has focused on speciﬁc classes
of trapdoor permutations such as the RSA and Rabin per-
mutations. Dodis and Reyzin have since noted [13] that the
unifying feature of these subsequent analyses is their reliance
on trapdoor permutations induced by claw-free permutations
(of which the RSA and Rabin permutations are two exam-
ples). For this reason, we introduce this notion now.
The notion of claw-free permutations generalizes that of
trapdoor permutations. Informally, a pair of claw-free per-
mutations (f0, f1) has the property that f0 and f1 are each
individually trapdoor permutations over the same domain;
furthermore, this pair has the additional property that, with-
out one of the associated trapdoors, it is hard to ﬁnd a
“claw” (namely, x0 and x1 such that f0(x0) = f1(x1)). We
give a formal deﬁnition here.
−1, G
tuple of ppt algorithms (cf-Gen, F, G, F
Definition 4. A family of claw-free permutations is a
−1) such that:
• cf-Gen outputs a random index i and a trapdoor td.
• F(i,·) and G(i,·) are both permutations over the same
domain, denoted Di. Furthermore, there is an eﬃ-
cient sampling algorithm which, on input i, outputs a
uniformly-distributed element in Di.
• If (i, td) was output by cf-Gen, then F
−1(td,·)) is the inverse of F(i,·) (resp., G(i,·)).
G
−1(td, ·) (resp.,
Algorithm A is said to (t, ε)-break a family of claw-free
permutations if A runs in time at most t and furthermore
A outputs a “claw” with probability greater than ε. More
formally,
Pr[(i, td) ← cf-Gen; (x0, x1) ← A(i) : F(i, x0) = G(i, x1)] ≥ ε.
A given claw-free permutation is (t, ε)-secure if no algorithm
can (t, ε)-break it.
For notational convenience, we will write f (·) instead of
F(i, ·) (and similarly for g) when the index i is clear from the
−1(td, ·) (and
context. Similarly, we write f
similarly for g) with the implicit understanding that this
inverse cannot be eﬃciently computed without knowledge
of the trapdoor. We also speak of “claw-free permutations”
rather than claw-free permutations families.
−1(·) instead of F
Note that the tuple (cf-Gen, F, F
−1) is a trapdoor permu-
−1)). In this case, fol-
tation (and similarly for (cf-Gen, G, G
lowing [13], we will say that this trapdoor permutation is
induced by a claw-free permutation.
From a complexity-theoretic point of view, the existence
of claw-free permutations represents a stronger assumption
than the existence of trapdoor permutations. On the other
hand, all known examples of trapdoor permutations can be
viewed as being induced by a family of claw-free permuta-
In the case of RSA, for example, given a
tions (cf. [13]).
modulus N , an exponent e, and a random value y ∈ Z
∗
N we
def
= xey mod N ; note
may deﬁne f (x)
that ﬁnding x0, x1 such that f (x0) = g(x1) is equivalent to
ﬁnding a value (x0/x1) which is an eth root of y (and is there-
fore infeasible under the assumption that RSA is a trapdoor
permutation). It should also be stressed that, in the above
example, RSA yields a (t, ε)-secure claw-free permutation
iﬀ RSA itself is a (O(t), ε)-secure trapdoor permutation; in
other words, there is essentially no loss of security when
translating the problem from one domain to the other.
def
= xe mod N and g(x)
3. SIGNATURE SCHEME BASED ON DDH
We begin by reviewing the signature scheme analyzed by
Goh and Jarecki [18], whose security is tightly related to the
CDH problem in some cyclic group G . The basic idea of the
scheme is as follows: the public key contains g, h ∈ G and the
private key consists of x = logg h. To sign a message m, the
message is ﬁrst mapped (using a random oracle) to a value
z = H(m) ∈ G . The signer then computes zx and a non-
interactive zero-knowledge proof π (using the Fiat-Shamir
heuristic [16]) that (g, h, z, zx) forms a Diﬃe-Hellman tuple;
the signature contains zx and π. The above description
(which slightly simpliﬁes [18]) corresponds roughly to an
“FDH-like” signature scheme; their actual scheme uses a
111-bit random salt (`a la PSS and probabilistic-FDH [12])
to achieve tight security.2
The Goh-Jarecki scheme is very similar in spirit to the
“short signatures” previously introduced by Boneh, Lynn,
and Shacham [7].
In the latter case, however, the DDH
problem is easy in the underlying group and therefore the
non-interactive proof π is unnecessary. Because of this re-
quirement that DDH be easy, the techniques of this section
do not apply to the Boneh-Lynn-Shacham scheme (however,
our techniques of Section 4 do apply; see Section 4.4).
Compared to previous signature schemes based on the
(weaker) discrete logarithm assumption, the Goh-Jarecki
scheme has some notable drawbacks. The signer must com-
pute both zx and π (resulting in a total of 3 exponentia-
tions), and the signature must include both of these values.
For many groups of interest, this leads to very long signa-
tures; for example, in the running example of [18] group
elements (e.g., zx) are roughly 1000-bits long while the en-
tire proof π is 320-bits long.
We present here a way to improve the eﬃciency and sig-
nature length of the above scheme, while maintaining a
tight security reduction; the diﬀerence is that security of
our scheme is based on the DDH problem instead of the
CDH problem. In our scheme, the public key consists of a
Diﬃe-Hellman tuple (g, h, y1, y2) while the secret key is the
2Interestingly, our techniques of Section 4 may be used to
eliminate this random salt while preserving the tight security
reduction to the CDH problem; see Section 4.4.
value x such that gx = y1 and hx = y2. Now, the signature
for a message m simply consists of a non-interactive zero-
knowledge proof (using the Fiat-Shamir heuristic [16]) that
(g, h, y1, y2) indeed forms a Diﬃe-Hellman tuple. Forgery
will now be infeasible because the “challenge” in the Fiat-
Shamir heuristic depends on m; because the proof is zero-
knowledge (informally), viewing multiple proofs of the state-
ment will not help an adversary in constructing a new proof
of the statement for a diﬀerent message.
3.1 Details and Proof of Security
In what follows, we assume a ﬁnite, cyclic group G of
prime order q; this group may be ﬁxed or a description of
G may be included with the signer’s public key. We let
H : {0, 1}∗ → Zq be a hash function which will be modeled
as a random oracle.
Gen chooses random generators g, h ∈ G and a random value
x ← Zq. It then computes y1 = gx and y2 = hx. The public
key is P K = (g, h, y1, y2) and the secret key is x.
SignSK(m) (where m ∈ {0, 1}∗
) executes a non-interactive
zero-knowledge proof that the public key (g, h, y1, y2) forms
a Diﬃe-Hellman tuple; this can be done eﬃciently given the
witness x (i.e., the secret key). In more detail: the algorithm
chooses random r ∈ Zq and computes A = gr, B = hr,
and “challenge” c = H(P K, A, B, m). Finally, it computes
s = cx + r and outputs the signature (c, s).
VrfyP K(m, σ) parses P K as (g, h, y1, y2) and σ as (c, s). It
−c
then computes A
2 . Finally, it
(cid:4)
outputs accept if and only if c
, B
?
= H(P K, A
= hsy
(cid:4)
= gsy
and B
, m).
−c
1
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
.
, ε
−1
−1
, B
= gsy
+ (qh + 1)q
; thus, it is indeed the case that H(P K, A
Theorem 1. Let G be a (t
It is not hard to see that the scheme is correct. Since
y1 = gx and y2 = hx, the signature veriﬁcation algorithm
−c
1 = gs−xc = gr = A and similarly for