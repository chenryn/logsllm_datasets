TurnDown(&v)
fmt.Printf("%b %t\n", v, IsUp(v)) // "10000 false"
SetBroadcast(&v)
fmt.Printf("%b %t\n", v, IsUp(v)) // "10010 false"
fmt.Printf("%b %t\n", v, IsCast(v)) // "10010 true"
}
下面是一个更复杂的例子，每个常量都是1024的幂：
const (
_ = 1  float64
f = 2 // untyped integer -> float64
f = 1e123 // untyped floating-point -> float64
f = 'a' // untyped rune -> float64
上面的语句相当于:
var f float64 = float64(3 + 0i)
f = float64(2)
f = float64(1e123)
f = float64('a')
无论是隐式或显式转换，将一种类型转换为另一种类型都要求目标可以表示原始值。对于浮
点数和复数，可能会有舍入处理：
const (
deadbeef = 0xdeadbeef // untyped int with value 3735928559
a = uint32(deadbeef) // uint32 with value 3735928559
b = float32(deadbeef) // float32 with value 3735928576 (rounded up)
c = float64(deadbeef) // float64 with value 3735928559 (exact)
d = int32(deadbeef) // compile error: constant overflows int32
e = float64(1e309) // compile error: constant overflows float64
f = uint(-1) // compile error: constant underflows uint
)
对于一个没有显式类型的变量声明（包括简短变量声明），常量的形式将隐式决定变量的默
认类型，就像下面的例子：
i := 0 // untyped integer; implicit int(0)
r := '\000' // untyped rune; implicit rune('\000')
f := 0.0 // untyped floating-point; implicit float64(0.0)
c := 0i // untyped complex; implicit complex128(0i)
常量 116
gopl
注意有一点不同：无类型整数常量转换为int，它的内存大小是不确定的，但是无类型浮点数
和复数常量则转换为内存大小明确的float64和complex128。 如果不知道浮点数类型的内存大
小是很难写出正确的数值算法的，因此Go语言不存在整型类似的不确定内存大小的浮点数和
复数类型。
如果要给变量一个不同的类型，我们必须显式地将无类型的常量转化为所需的类型，或给声
明的变量指定明确的类型，像下面例子这样：
var i = int8(0)
var i int8 = 0
当尝试将这些无类型的常量转为一个接口值时（见第7章），这些默认类型将显得尤为重要，
因为要靠它们明确接口对应的动态类型。
fmt.Printf("%T\n", 0) // "int"
fmt.Printf("%T\n", 0.0) // "float64"
fmt.Printf("%T\n", 0i) // "complex128"
fmt.Printf("%T\n", '\000') // "int32" (rune)
现在我们已经讲述了Go语言中全部的基础数据类型。下一步将演示如何用基础数据类型组合
成数组或结构体等复杂数据类型，然后构建用于解决实际编程问题的数据结构，这将是第四
章的讨论主题。
常量 117
gopl
第四章 复合数据类型
在第三章我们讨论了基本数据类型，它们可以用于构建程序中数据结构，是Go语言的世界的
原子。在本章，我们将讨论复合数据类型，它是以不同的方式组合基本类型可以构造出来的
复合数据类型。我们主要讨论四种类型——数组、slice、map和结构体——同时在本章的最
后，我们将演示如何使用结构体来解码和编码到对应JSON格式的数据，并且通过结合使用模
板来生成HTML页面。
数组和结构体是聚合类型；它们的值由许多元素或成员字段的值组成。数组是由同构的元素
组成——每个数组元素都是完全相同的类型——结构体则是由异构的元素组成的。数组和结
构体都是有固定内存大小的数据结构。相比之下，slice和map则是动态的数据结构，它们将
根据需要动态增长。
复合数据类型 118
gopl
4.1. 数组
数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。
因为数组的长度是固定的，因此在Go语言中很少直接使用数组。和数组对应的类型是
Slice（切片），它是可以增长和收缩动态序列，slice功能也更灵活，但是要理解slice工作原
理的话需要先理解数组。
数组的每个元素可以通过索引下标来访问，索引下标的范围是从0开始到数组长度减1的位
置。内置的len函数将返回数组中元素的个数。
var a [3]int // array of 3 integers
fmt.Println(a[0]) // print the first element
fmt.Println(a[len(a)-1]) // print the last element, a[2]
// Print the indices and elements.
for i, v := range a {
fmt.Printf("%d %d\n", i, v)
}
// Print the elements only.
for _, v := range a {
fmt.Printf("%d\n", v)
}
默认情况下，数组的每个元素都被初始化为元素类型对应的零值，对于数字类型来说就是0。
我们也可以使用数组字面值语法用一组值来初始化数组：
var q [3]int = [3]int{1, 2, 3}
var r [3]int = [3]int{1, 2}
fmt.Println(r[2]) // "0"
在数组字面值中，如果在数组的长度位置出现的是“...”省略号，则表示数组的长度是根据初始
化值的个数来计算。因此，上面q数组的定义可以简化为
q := [...]int{1, 2, 3}
fmt.Printf("%T\n", q) // "[3]int"
数组的长度是数组类型的一个组成部分，因此[3]int和[4]int是两种不同的数组类型。数组的长
度必须是常量表达式，因为数组的长度需要在编译阶段确定。
q := [3]int{1, 2, 3}
q = [4]int{1, 2, 3, 4} // compile error: cannot assign [4]int to [3]int
数组 119
gopl
我们将会发现，数组、slice、map和结构体字面值的写法都很相似。上面的形式是直接提供
顺序初始化值序列，但是也可以指定一个索引和对应值列表的方式初始化，就像下面这样：
type Currency int
const (
USD Currency = iota // 美元
EUR // 欧元
GBP // 英镑
RMB // 人民币
)
symbol := [...]string{USD: "$", EUR: "€", GBP: "￡", RMB: "￥"}
fmt.Println(RMB, symbol[RMB]) // "3 ￥"
在这种形式的数组字面值形式中，初始化索引的顺序是无关紧要的，而且没用到的索引可以
省略，和前面提到的规则一样，未指定初始值的元素将用零值初始化。例如，
r := [...]int{99: -1}
定义了一个含有100个元素的数组r，最后一个元素被初始化为-1，其它元素都是用0初始化。
如果一个数组的元素类型是可以相互比较的，那么数组类型也是可以相互比较的，这时候我
们可以直接通过==比较运算符来比较两个数组，只有当两个数组的所有元素都是相等的时候
数组才是相等的。不相等比较运算符!=遵循同样的规则。
a := [2]int{1, 2}
b := [...]int{1, 2}
c := [2]int{1, 3}
fmt.Println(a == b, a == c, b == c) // "true false false"
d := [3]int{1, 2}
fmt.Println(a == d) // compile error: cannot compare [2]int == [3]int
作为一个真实的例子，crypto/sha256包的Sum256函数对一个任意的字节slice类型的数据生
成一个对应的消息摘要。消息摘要有256bit大小，因此对应[32]byte数组类型。如果两个消息
摘要是相同的，那么可以认为两个消息本身也是相同（译注：理论上有HASH码碰撞的情况，
但是实际应用可以基本忽略）；如果消息摘要不同，那么消息本身必然也是不同的。下面的
例子用SHA256算法分别生成“x”和“X”两个信息的摘要：
gopl.io/ch4/sha256
数组 120
gopl
import "crypto/sha256"
func main() {
c1 := sha256.Sum256([]byte("x"))
c2 := sha256.Sum256([]byte("X"))
fmt.Printf("%x\n%x\n%t\n%T\n", c1, c2, c1 == c2, c1)
// Output:
// 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881
// 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015
// false
// [32]uint8
}
上面例子中，两个消息虽然只有一个字符的差异，但是生成的消息摘要则几乎有一半的bit位
是不相同的。需要注意Printf函数的%x副词参数，它用于指定以十六进制的格式打印数组或
slice全部的元素，%t副词参数是用于打印布尔型数据，%T副词参数是用于显示一个值对应的
数据类型。
当调用一个函数的时候，函数的每个调用参数将会被赋值给函数内部的参数变量，所以函数
参数变量接收的是一个复制的副本，并不是原始调用的变量。因为函数参数传递的机制导致
传递大的数组类型将是低效的，并且对数组参数的任何的修改都是发生在复制的数组上，并
不能直接修改调用时原始的数组变量。在这个方面，Go语言对待数组的方式和其它很多编程
语言不同，其它编程语言可能会隐式地将数组作为引用或指针对象传入被调用的函数。
当然，我们可以显式地传入一个数组指针，那样的话函数通过指针对数组的任何修改都可以
直接反馈到调用者。下面的函数用于给[32]byte类型的数组清零：
func zero(ptr *[32]byte) {
for i := range ptr {
ptr[i] = 0
}
}
其实数组字面值[32]byte{}就可以生成一个32字节的数组。而且每个数组的元素都是零值初始
化，也就是0。因此，我们可以将上面的zero函数写的更简洁一点：
func zero(ptr *[32]byte) {
*ptr = [32]byte{}
}
虽然通过指针来传递数组参数是高效的，而且也允许在函数内部修改数组的值，但是数组依
然是僵化的类型，因为数组的类型包含了僵化的长度信息。上面的zero函数并不能接收指向
[16]byte类型数组的指针，而且也没有任何添加或删除数组元素的方法。由于这些原因，除了
数组 121
gopl
像SHA256这类需要处理特定大小数组的特例外，数组依然很少用作函数参数；相反，我们一
般使用slice来替代数组。
练习 4.1： 编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2.6.2节的
PopCount函数。)
练习 4.2： 编写一个程序，默认情况下打印标准输入的SHA256编码，并支持通过命令行flag
定制，输出SHA384或SHA512哈希算法。
数组 122
gopl
4.2. Slice
Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。一个slice类型一般写作
[]T，其中T代表slice中元素的类型；slice的语法和数组很像，只是没有固定长度而已。
数组和slice之间有着紧密的联系。一个slice是一个轻量级的数据结构，提供了访问数组子序