？>
当管理员访问了攻击者构造的CSRF页面后，会自动创建一个账号，CSRF利用代
码如下。
chtm1>
(_9t.。 )Keuuy xau = sasned JeA
var methods = new Array( *posT" );
var ur1s = new Array( *http://xx.com/csrf-php* );
var params = new Array( *submit=1&username=1&password=1* );
function pausecomp(mi1lis)
var date = new Date();
var curDate = nul1;
do { curDate = new Date(); }
while(curDate-date 
此代码的作用是创建一个AJAX请求，请求的URL是htp://xxx.com/csrf.php，参数
是submit=1&usemame=1&password=1，从上述PHP代码中可以看到，此AJAX请求就
是执行一个添加用户的操作，由于管理员已登录，所以管理员访问此链接后就会成
功创建一个新用户。
---
## Page 174
第4章Web安全原理制析155
4.6.5CSRF漏洞修复建议
针对CSRF漏洞的修复，笔者给出以下这两点建议。
验证请求的Referer值，如果Referer是以自己的网站开头的域名，则说明该
请求来自网站自己，是合法的。如果Referer是其他网站域名或空白，就有
可能是CSRF攻击，那么服务器应拒绝该请求，但是此方法存在被绕过的可
CSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，由此可知，
抵御CSRF攻击的关键在于：在请求中放入攻击者不能伪造的信息。例如可
以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端验
证token，如果请求中没有token或者token的内容不正确，则认为该请求可能
是CSRF攻击从而拒绝该请求。
4.7SSRF漏洞
4.7.1介绍SSRF漏洞
SSRF（Server-Side RequestForgery，服务器端请求伪造）是一种由攻击者构造请
求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问
的内部系统（正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与
外网隔离的内部系统）。
4.7.2SSRF漏洞原理
SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有
对目标地址做过滤与限制。例如，黑客操作服务端从指定URL地址获取网页文本内
容，加载指定地址的图片等，利用的是服务端的请求伪造。SSRF利用存在缺陷的Web
应用作为代理攻击远程和本地的服务器。
主要攻击方式如下所示。
·对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息。
·攻击运行在内网或本地的应用程序。
---
## Page 175
156Web安全攻防：渗遗测试实战指南
·对内网Web应用进行指纹识别，识别企业内部的资产信息。
。攻击内外网的Web应用，主要是使用HTTPGET请求就可以实现的攻击（比
如struts2、SQli等）。
·利用fle协议读取本地文件等。
4.7.3SSRF漏洞利用
页面ssrf.php实现的功能是获取GET参数URL，然后将URL的内容返回网页上。
如果将请求的网址寡改为http://www.baidu.com，则页面会显示http://www.baidu.com
的网页内容，如图4-102所示。
27.0.6.4/
Baidu百度
度-下
图4-102墓改URL网址
但是，当设置参数URL为内网地址时，则会泄露内网信息，例如，当url
=192.168.0.2:3306时，页面返回“当前地址不允许连接到MySQL服务器”，说明
192.168.0.2存在MySQL服务，如图4-103所示。
←
 127.0.0.1/ssrf.php?url= 192.168.0.2:3306
FjHost *192.168.0.1' is not allowed to connect to this MySQL server
图4-103基改URL网址为内网资源
访问ssrf.php?url=file:/C:/Windows/win.ini即可读取本地文件，如图4-104所示。
---
## Page 176
第4章Web安全原理剖析4157
①view-source:http://127.0.0.1/ssrf.php?url=file///C:/Windows/win.ini
1: for 16-bit app support
[extensions]
[fonts]
[mci extensions]
[files]
-
[Mai1]
MAPI=1
图4-104墓改URL网址为本地文件
4.7.4SSRF漏洞代码分析
在页面SSRF.pbp中，程序获取GET参数URL，通过curl_initO初始化curl组件后，
将参数URL带入curl_setopt(Sch，CURLOPT_URL，Surl)，然后调用所以curl-exec请求该
URL。由于服务端会将banner信息返回客户端，所以可以根据banner判断主机是否存
在某些服务，代码如下。
4.7.5SSRF漏洞修复建议
针对SSRF漏洞的修复，笔者给出以下这几点建议。
限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。
限制不能访问内网的IP，以防止对内网进行攻击。
屏蔽返回的详细信息。
---
## Page 177
158Web安全攻防：渗透测试实战指南
4.8文件上传
4.8.1介绍文件上传漏洞
在现代互联网的Web应用程序中，上传文件是一种常见的功能，因为它有助于提
高业务效率，比如企业的OA系统，允许用户上传图片、视频、头像和许多其他类型
的文件。然而向用户提供的功能越多，Web应用受到攻击的风险就越大，如果Web应
用存在文件上传漏润，那么恶意用户就可以利用文件上传漏润将可执行脚本程序上
传到服务器中，获得网站的权限，或者进一步危害服务器。
4.8.2有关文件上传的知识
1.为什么文件上传存在漏洞
上传文件时，如果服务端代码未对客户端上传的文件进行严格的验证和过滤，
就容易造成可以上传任意文件的情况，包括上传脚本文件（asp、aspx、php、jsp等格
式的文件）
2.危害
非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个
总意的脚本文件，文被称为WebShell，也可将WebShell脚本称为一种网页后门，
WebShell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件，执行系
统命令等。
4.8.3JS检测绕过攻击
JS检测绕过上传漏洞常见于用户选择文件上传的场景，如果上传文件的后缓不被
允许，则会弹框告知，此时上传文件的数据包并没有发送到服务端，只是在客户端
浏览器使用JavaScript对数据包进行检测，如图4-105所示。
---
## Page 178
第4章Web安全原理划析159
→C
@ 127.08.1/1.html
1pho
图4-105客户端JS检测上传文件后缀
这时有两种方法可以绕过客户端JavaScript的检测。
使用浏览器的插件，删除检测文件后级的JS代码，然后上传文件即可绕过。
首先把需要上传文件的后缓改成允许上传的，如jpg、png等，绕过JS的检测，
再抓包，把后级名改成可执行文件的后级即可上传成功，如图4-106所示。
root /opload/apload2 pbp ft9/1.1
1.22
18441182091419745159615833231
*1-09*
再改回1.php
CentestTypet Lmepe/5pep
tentDinpositicn: form-dateg naae=*fLle*: files
tent-DispositioaiEere=date: nai
18441182091611745159415033231
fubedt
图4-106修改后缀
---
## Page 179
160Web安全攻防：渗进测试实战指南
4.8.4JS检测绕过攻击分析
客户端上传文件的HTML代码如下所示，在选择文件时，会调用JS的selectFile函
数，函数的作用是先将文件名转换为小写，然后通过substr获取文件名最后一个点号
后面的后缓（包括点号）。如果后级不是“jpg”，则会弹框提示“请选择jpg格式的照
片上传”。
chead>
ctitle>3S检查文件后级
function selectFile(fnUpload) {
var filename = fnUpload.value;
var mime = f1lenane.toLowerCase() -substr(f11enane 1astIndex0f(* -“));
if(mime1=° .Jpg*)
f
alert（“请选择Spg格式的照片上传"）;
fnUpload.outerHTML=fnUpload,outerHTML;
F11ename:
服务端处理上传文件的代码如下所示。如果上传文件没出错，再通过file_exists
判断在upload目录下文件是否已存在，不存在的话就通过move_uploaded_file将文件保
存到upload目录。此PHP代码中没有对文件后缓做任何判断，所以只需要绕过前端JS
的校验就可以上传WebShell。
°;
）
else
_。 * [aueu_][#[]s3nIs$ * _ :peotdn, oua
. [ad]a]s3s *,:adi. oua
x .( / [z]s）  
echo “Temp file: ", $_FILES["file*]["tmp_name"] . “";
1f (file_exists(°upload/" . $_FILES[*file*]["name*]))
）
else
move_uploaded_f1le($_FILES[°f1le*][*tmp_name°],
"upload/" . S_FILES["fi1e"][“name*]);
[aweu,][at+]s3nas * _/peotdn, *. ug pauos, oua
?>
4.8.5
文件后级绕过攻击
文件后缀绕过攻击是服务端代码中限制了某些后缀的文件不允许上传，但是有
些Apache是允许解析其他文件后缀的，例如在httpd.conf中，如果配置有如下代码，
则能够解析pbp和phtml文件。
AddType app1ication/x-httpd-php-php-phtm1
所以，可以上传一个后缓为phtml的WebShell，如图4-107所示。
0 127e8/1ptre
lon5.2.17
php
图4-107Apache解析phtml文件
---
## Page 181
162Web安全政防：渗造测试实战指南
在Apache的解析顺序中，是从右到左开始解析文件后缀的，如果最右侧的扩展
名不可识别，就继续往左判断，直到遇到可以解析的文件后缓为止，所以如果上传
的文件名类似1.php.xxxx，因为后缀xxxx不可以解析，所以向左解析后缓pbp，如图
4-108所示。
Verin 5.2.17
php
图4-108Apache解析顺序
4.8.6文件后缀绕过代码分析
服务端处理上传文件的代码如下所示。通过函数pathinfo0获取文件后缀，将后
缓转换为小写后，判断是不是“php”，如果上传文件的后缓是php，则不允许上传，
所以此处可以通过利用Apache解析顺序或上传phtml等后级的文件绕过该代码限制。
*;
else
{
$ext=$info['extension’];//得到文件扩展名
if (strtolower($ext) -- “php"){
exit（"不允许的后级名"）；
_。 [_aueu,]_at+]s3nss *:peotdn oua
 ·[ad_]+.]s3ss *。:ad1。 oypa
x（ / [zs） 
.[]s  do
if (file_exists(“upload/* . $_FILES[“file"]["name"]))
echo s_FILEs["file"]["name*]. * already exists. ";
---
## Page 182
第4章Web安全原理剂析163
else
move_uploaded_f1le($_FILES[*f1le*][*tmp_name°],
“upload/". $_FILES[*file"][“name*]);
[_aweu_].a+.]s3rss *_/peodn, *,:ug pauos. oua
}
)