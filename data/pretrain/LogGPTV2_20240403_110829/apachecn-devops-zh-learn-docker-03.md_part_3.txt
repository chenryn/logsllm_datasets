```
现在，让我们将终端连接到`nginx`容器上，观察发生了什么:
```
$ docker container attach nginx 
```
一旦你附着在容器上，你首先将看不到任何东西。但是现在打开另一个终端，在这个新的终端窗口中，重复几次`curl`命令，例如，使用以下脚本:
```
$ for n in {1..10}; do curl -4 localhost:8080; done  
```
您应该会看到 Nginx 的日志输出，类似于下面这样:
```
172.17.0.1 - - [06/Jan/2018:12:20:00 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.54.0" "-"
172.17.0.1 - - [06/Jan/2018:12:20:03 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.54.0" "-"
172.17.0.1 - - [06/Jan/2018:12:20:05 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.54.0" "-"
...
```
按下 *Ctrl* + *C* 退出容器。这将分离您的终端，同时停止`nginx`容器。
要清理，使用以下命令移除`nginx`容器:
```
$ docker container rm nginx 
```
# 正在检索容器日志
对于任何好的应用来说，最好的做法是生成一些日志信息，开发人员和操作人员都可以使用这些信息来找出应用在给定时间正在做什么，以及是否有任何问题来帮助找出问题的根本原因。
当在容器中运行时，应用最好将日志项输出到 STDOUT 和 STDERR，而不是输出到文件中。如果日志输出指向 STDOUT 和 STDERR，那么 Docker 可以收集这些信息，并准备好供用户或任何其他外部系统使用。
要访问给定容器的日志，我们可以使用`docker container logs`命令。例如，如果我们想要检索我们的`quotes`容器的日志，我们可以使用以下表达式:
```
$ docker container logs quotes 
```
这将从应用存在的一开始就检索它产生的整个日志。
Stop, wait a second—this is not quite true, what I just said. By default, Docker uses the so-called `json-file` logging driver. This driver stores the logging information in a file. And if there is a file rolling policy defined, then `docker container logs` only retrieves what is in the current active log file and not what is in previous, rolled files that might still be available on the host.
如果我们只想获取几个最新的条目，我们可以使用`-t`或`--tail`参数，如下所示:
```
$ docker container logs --tail 5 quotes 
```
这将只检索在容器内部运行的进程产生的最后五个项目。
有时，我们想跟踪容器产生的日志。当使用参数`-f`或`--follow`时，这是可能的。以下表达式将输出最后五个日志项，然后按照容器化过程生成的日志进行操作:
```
$ docker container logs --tail 5 --follow quotes 
```
# 日志驱动程序
Docker 包括多种日志机制来帮助我们从运行的容器中获取信息。这些机制被命名为**日志驱动程序**。可以在 Docker 守护程序级别配置使用哪个日志驱动程序。默认的日志驱动是`json-file`。当前本地支持的一些驱动程序有:
| 
**驾驶员**
 | 
**描述**
 |
| `none` | 不会产生特定容器的日志输出。 |
| `json-file` | 这是默认驱动程序。日志信息存储在格式为 JSON 的文件中。 |
| `journald` | 如果日志守护程序在主机上运行，我们可以使用这个驱动程序。它将日志记录转发给`journald`守护程序。 |
| `syslog` | 如果`syslog`守护进程在主机上运行，我们可以配置这个驱动，它会将日志消息转发给`syslog`守护进程。 |
| `gelf` | 当使用该驱动程序时，日志消息被写入一个**灰色日志扩展日志格式** ( **GELF** )端点。这种端点的常见例子是 Graylog 和 Logstash。 |
| `fluentd` | 假设`fluentd`守护程序安装在主机系统上，这个驱动程序会向它写入日志消息。 |
If you change the logging driver, please be aware that the `docker container logs` command is only available for the `json-file` and `journald` drivers.
# 使用特定于容器的日志驱动程序
我们已经看到，可以在 Docker 守护程序配置文件中全局设置日志驱动程序。但是我们也可以逐个容器地定义日志驱动程序。在下面的例子中，我们正在运行一个`busybox`容器，并使用`--log-driver`参数来配置`none`日志驱动程序:
```
$ docker container run --name test -it \
 --log-driver none \
 busybox sh -c 'for N in 1 2 3; do echo "Hello $N"; done'
```
我们应该看到以下内容:
```
Hello 1
Hello 2 Hello 3 
```
现在，让我们尝试获取前面容器的日志:
```
$ docker container logs test 
```
输出如下:
```
Error response from daemon: configured logging driver does not support reading
```
这是意料之中的，因为`none`驱动程序不产生任何日志输出。让我们清理并移除`test`容器:
```
$ docker container rm test 
```
# 高级主题–更改默认日志驱动程序
让我们更改 Linux 主机的默认日志驱动程序。最简单的方法是在真正的 Linux 主机上。为此，我们将使用带有 Ubuntu 映像的游民:
```
$ vagrant init bento/ubuntu-17.04
$ vagrant up
$ vagrant ssh
```
一旦进入 Ubuntu 虚拟机，我们希望编辑 Docker 守护程序配置文件。导航至文件夹`/etc/docker`并运行`vi`，如下所示:
```
$ vi daemon.json 
```
输入以下内容:
```
{
  "Log-driver": "json-log",
  "log-opts": {
    "max-size": "10m",
    "max-file": 3
  }
}
```
首先按下 *Esc* ，然后输入`:w:q`，最后按下*回车*键，保存并退出虚拟仪器。
前面的定义告诉 Docker 守护程序在回滚之前使用最大日志文件大小为 10 MB 的`json-log`驱动程序，在清除最旧的文件之前，系统上可以存在的最大日志文件数为`3`。
现在，我们必须向 Docker 守护程序发送一个`SIGHUP`信号，以便它获取配置文件中的更改:
```
$ sudo kill -SIGHUP $(pidof dockerd) 
```
请注意，前面的命令只重新加载配置文件，而不重新启动守护程序。
# 容器解剖
许多人错误地将容器比作虚拟机。然而，这是一个有问题的比较。容器不仅仅是轻量级虚拟机。好吧，那么，*容器的正确描述是什么？*
容器是运行在主机系统上的特殊封装和安全的进程。
容器利用了 Linux 操作系统中许多可用的特性和原语。最重要的是**名称空间**和**组**。在容器中运行的所有进程共享底层主机操作系统的相同 Linux 内核。与虚拟机相比，这是根本不同的，因为每个虚拟机都包含自己的完整操作系统。
典型容器的启动时间可以用毫秒来衡量，而虚拟机通常需要几秒到几分钟才能启动。虚拟机注定是长寿的。每个运营工程师的主要目标是最大限度地延长其虚拟机的正常运行时间。与此相反，容器是短暂的。他们来去匆匆。
首先，让我们对能够运行容器的架构有一个高层次的概述。
# 体系结构
这里，我们有一个体系结构图，展示了这一切是如何结合在一起的:
![](img/b55b7ea4-e445-43e6-8a35-1009ffeb3e68.png)
High level architecture of Docker
在上图的下半部分，我们有 Linux 操作系统及其 cgroups、名称空间和层功能，以及我们在这里不需要明确提及的其他功能。然后是由**容器**和 **runc** 组成的中间层。除此之外，现在还有 Docker 引擎。Docker 引擎为外部世界提供了一个 RESTful 界面，任何工具都可以访问该界面，例如 Docker CLI、Docker for Mac 和 Docker for Windows 或 Kubernetes 等等。
现在让我们更详细地描述一下主要的构建模块。
# 命名空间
Linux 名称空间在被 Docker 用于容器之前已经存在多年了。命名空间是对全局资源的抽象，如文件系统、网络访问、进程树(也称为 PID 命名空间)或系统组标识和用户标识。Linux 系统是用每个命名空间类型的单个实例初始化的。初始化后，可以创建或加入其他名称空间。
Linux 命名空间起源于 2002 年的 2.4.19 内核。在内核版本 3.8 中，引入了用户命名空间，有了它，容器就可以使用命名空间了。
如果我们将一个正在运行的进程包装在一个文件系统名称空间中，那么这个进程就有一种错觉，认为它拥有自己完整的文件系统。这当然不是真的；它只是一个虚拟文件系统。从主机的角度来看，包含的进程获得了整个文件系统的屏蔽子部分。它就像文件系统中的文件系统:
![](img/8b02f12a-dd54-4011-afc2-9f17827a5cc1.png)
这同样适用于存在名称空间的所有其他全局资源。用户标识命名空间是另一个例子。有了用户命名空间，我们现在可以在系统上多次定义用户`jdoe`，只要它生活在自己的命名空间中。
PID 命名空间是防止一个容器中的进程看到另一个容器中的进程或与之交互的东西。一个进程可能在一个容器中有明显的 PID **1** ，但是如果我们从主机系统检查它，它将有一个普通的 PID，比如说 **334** :
![](img/b0f97962-2b1d-40df-a701-9aa47e4189a1.png)
Process tree on a Docker host
在给定的命名空间中，我们可以运行一个到多个进程。当我们谈论容器时，这很重要，当我们在一个已经运行的容器中执行另一个过程时，我们已经体验到了这一点。
# 控制组
Linux cgroups 用于限制、管理和隔离系统上运行的进程集合的资源使用。资源是指 CPU 时间、系统内存、网络带宽或这些资源的组合等等。
谷歌的工程师最初从 2006 年开始实现这一功能。在 2008 年 1 月发布的内核版本 2.6.24 中，cgroups 功能被合并到 Linux 内核主线中。
使用 cgroups，管理员可以限制容器可以消耗的资源。这样就可以避免经典的*噪音邻居*问题，在这个问题中，在一个容器中运行的流氓进程消耗了所有的 CPU 时间或者保留了大量的内存，因此，使主机上运行的所有其他进程都变得饥饿，无论它们是否被容器化。
# 联合文件系统
UnionFS 构成了所谓的容器映像的主干。我们将在下一章详细讨论容器映像。此时，我们只想更好地理解什么是 UnionFS 以及它是如何工作的。UnionFS 主要在 Linux 上使用，它允许不同文件系统的文件和目录被覆盖，并与它一起形成一个统一的文件系统。在这种情况下，各个文件系统被称为分支。在合并的分支中具有相同路径的目录的内容将一起出现在新的虚拟文件系统中的单个合并目录中。合并分支时，会指定分支之间的优先级。这样，当两个分支包含相同的文件时，在最终的文件系统中可以看到优先级较高的分支。
# 容器管道
建造 Docker 引擎的地下室；我们也可以称之为**容器管道**，由两部分组成——**runc**和**容器**。
最初，Docker 是以整体方式构建的，包含了运行容器所需的所有功能。随着时间的推移，这变得过于僵化，Docker 开始将部分功能分解成自己的组件。两个重要的组件是 runc 和 containerd。
# Runc
Runc 是一个轻量级、可移植的容器运行时。它提供了对 Linux 命名空间的完全支持，以及对 Linux 上所有可用安全功能的本机支持，例如 SELinux、AppArmor、seccomp 和 cgroups。
Runc 是根据**开放容器倡议** ( **OCI** )规范产卵和运行容器的工具。这是一种正式指定的配置格式，由 Linux 基金会赞助的**开放容器项目** ( **OCP** )管理。
# 包含在内
Runc 是容器运行时的低级实现；containerd 建立在它之上，并添加了更高级别的功能，如映像传输和存储、容器执行和监督，以及网络和存储附件。这样，它就管理了容器的整个生命周期。Containerd 是 OCI 规范的参考实现，是迄今为止最流行和使用最广泛的容器运行时。
容器已于 2017 年捐赠给 CNCF 并被其接受。存在 OCI 规范的替代实现。其中一些是 CoreOS 的 rkt，RedHat 的 CRI-O，以及 Linux 容器的 LXD。然而，此时的 containerd 是迄今为止最流行的容器运行时，并且是 Kubernetes 1.8 或更高版本以及 Docker 平台的默认运行时。
# 摘要
在本章中，您学习了如何使用基于现有映像的容器。我们展示了如何运行、停止、启动和移除容器。然后，我们检查了容器的元数据，提取了它的日志，并学习了如何在已经运行的容器中运行任意进程。最后但并非最不重要的是，我们深入研究了容器是如何工作的，以及它们利用了底层 Linux 操作系统的哪些特性。
在下一章中，您将了解什么是容器映像，以及我们如何构建和共享自己的自定义映像。我们还将讨论构建自定义映像时常用的最佳实践，例如最小化映像大小和利用映像缓存。敬请关注！
# 问题
要评估您的学习进度，请回答以下问题:
1.  容器的状态是什么？
2.  哪个命令有助于我们了解主机上当前运行的是什么？
3.  哪个命令用于列出所有容器的标识？
# 进一步阅读
以下文章为您提供了与我们在本章中讨论的主题相关的更多信息:
*   *http://dockr.ly/2iLBV2IDocker 容器*
*   *在[http://dockr.ly/2gmxKWB](http://dockr.ly/2gmxKWB)开始使用容器*
*   *在[http://dockr.ly/2gmyKdf](http://dockr.ly/2gmyKdf)隔离具有用户命名空间*的容器
*   *在[http://dockr.ly/2wqN5Nn](http://dockr.ly/2wqN5Nn)限制容器资源*