1 ETH−−−→ P0
P0
Observe that now P0 obtains the desired 1 ETH from P1 while
P2 swaps its 1 ETH for 1 XRP with P1 and ﬁnally the swap
concludes for P0 as he pays 1 BTC to P1. Most generally, we
would like to extend our protocol to support swaps of the form
n0−→ P1
n1−→ ··· nk−−→ Pk+1
˜nk−−→ Pk
˜nk−1−−−→ ··· ˜n0−→ P0
P0
where n0, n1, . . . , nk and ˜nk, ˜nk−1, . . . , ˜n0 are the numbers
coins of different currencies that are to be swapped.
One could extend our protocol by running sequentially the
lock phase (from left to right) among each pair of parties,
using the same hard instance Y in the execution of ΓSIG
AdpSg,
which is sampled by P0, knowing the corresponding witness
y. To avoid coin theft, it is important that the lock phase
between parties (Pi, Pi+1) starts only after the lock phase
between (Pi−1, Pi) is completed. While syntactically correct,
this attempt suffers from wormhole attacks [46], where some
malicious nodes can “skip” intermediate honest nodes and steal
their fees. Fortunately, [46] also describes a countermeasure
to prevent such attacks. Their solution is to re-randomize the
instance Y for each instance of the lock phase, by computing
¯Y = Y · G¯y where ¯y is a session-speciﬁc randomizing factor,
which is known by the left party Pi−1. This way, Pi−1 can still
recover the correct witness (y + ¯y), while ¯Y looks uniformly
distributed to all other participants. Naturally, this extension
requires us to tune the timing parameters of each freezing
phase, setting a cascade of times T0, T1 + ∆, T1 + 2∆, . . . ,
analogously to [46]. However, the crucial difference is that in
our approach the timing parameters only affect the hardness
of the VTD and are never posted on-chain (i.e., no need for
custom scripting language on the blockchain).
Batching VTD commitments For a single swap, party P0 has
to open n VTD commitments, while party P1 has to open
˜n VTD commitments. Since opening of the commitments
involves computational work, this could prove prohibitive for
the parties if they have moderate computing devices. We
can solve this issue, for instance, by letting the party P0
pack n commitments into a single commitment, such that
opening this one commitment lets the party learn all the values
in the individual commitments. This means party P0 only
needs to compute on opening a single commitment, rather
than n commitments. Opening the single commitment, P0
learns n discrete log values that it would have learnt if it had
solved the n VTD commitments individually. Such a packing
strategy is possible via homomorphic operations (provided
the commitments have a large message space) in the (VTD)
scheme [34].
n-to-˜n Swaps for Monero Our techniques from Figure 5
can also be extended to the transaction scheme of Monero,
thus giving the ﬁrst n-to-˜n swap protocol for Monero that is
efﬁcient, does not require any hard fork, and enables coin-swaps
with other currencies supporting Schnorr/ECDSA signature
veriﬁcation. Monero uses a linkable ring signature based
transaction scheme, where the sender of a transaction generates
a ring signature on the transaction with a linkability tag. The
sender’s key is a member of the ring of public keys or anonymity
set, and the ring signature ensures that the sender’s key remains
hidden in this anonymity set. The linkability tag helps prevent
double spending of the same key, as the tags are unique for a
key and are public once the transaction is signed and posted
on the blockchain.
Previous works [35], [36] propose atomic swap protocol
for a 1-to-1 swap for Monero (only). Their techniques are
reminiscent of adaptor signatures (Schnorr or ECDSA) for
swap protocol but instead they have pre-signature generation
and adaption tailored for the linkable ring signature scheme
used in Monero. Speciﬁcally, P0 and P1 run an efﬁcient 2-
party protocol to generate a pre-signature (of the linkable ring
signature) ˜σ(1)
swp with respect to the
hard instance Y . Party P1 and P0 then run another instance
of the 2-party protocol to generate another pre-signature (of
swp on the transaction tx (1)
23
swp on tx (0)
swp on the transaction tx (0)
swp into a valid linkable ring signature ˜σ(0)
the linkable ring signature) ˜σ(0)
swp with
respect to the same hard instance Y . The swap complete phase
proceeds in the natural way, where P0 adapt the pre-signature
˜σ(0)
swp into a valid linkable ring signature σ(0)
swp, which
lets P1 adapt ˜σ(1)
swp on
tx (1)
swp.
We can extend their protocols to support n-to-˜n swaps, by
similarly running the swap lock phase as in Figure 5, except
instead of Schnorr or ECDSA use the adaptor linkable ring
signature for Monero introduced in [35], [36]. Since public-
secret key pairs in Monero consist of group elements with
their discrete logarithm (H, h), we can use the same VTD
commitment scheme as in Figure 5 to ensure that the parties
can get their coins refunded after a timeout.
H. Generic Construction of Atomic Swaps
We present here our generic atomic swap protocol for a n-
to-˜n swap of coins between two users P0 and P1. Fundamental
building blocks of our protocol are multi-lock signatures, com-
mitment schemes, 2 party protocols for different functionalities
and veriﬁable timed signatures. We brieﬂy look at some of
these primitives.
1) Multi-lock Signatures: We introduce a new cryptographic
notion of multi-lock signatures. On a high level, this primitive
lets users to create a lock (cid:96)k on the signatures on a set of
messages {m1, . . . , mn} under the public keys {pk 1, . . . , pk n},
respectively, with respect to another signature ˜σ (referred to as
the locking signature) on a message ˜m under a public key ˜pk.
This means that given the signature ˜σ and the lock (cid:96)k, one can
release the signatures {σ1, . . . , σn} where each σi is a valid
signature on the message mi under the public key pk i. The
security property of interest here is that given just the lock
(cid:96)k, it reveals no information about the n signatures that are
locked or the locking signature. Below we formally deﬁne the
interfaces, notion of correctness and the properties of interest
for a multi-lock signature.
Deﬁnition 12 (Multi-lock Signatures): A multi-lock signature
scheme MLS is deﬁned with respect to a signature scheme
ΠDS and consists of two PPT algorithms (mLock, mRel) as
deﬁned below.
((cid:96)k ) ← mLock(n, S, ˜σ): The lock algorithm takes as input the
following:
• n: the number of signatures to be locked.
• S := {σj}j∈[n]: a set of n signatures
• ˜σ: a signature
It outputs a lock (cid:96)k.
S/⊥ ← mRel((cid:96)k , M, ˜m, PK, ˜pk , ˜σ): The release algorithm
takes as input a a lock (cid:96)k, a message set M of n messages,
a message ˜m, a public key set PK{pk j}j∈[n], another public
key ˜pk and a signature ˜σ. It either outputs a signature set
S := {σi}i∈[n] or a special symbol ⊥.
Correctness of mulit-lock signatures is as follows.
Deﬁnition 13 (Correctness): A multi-lock signature scheme
MLS is correct with respect to the signature scheme ΠDS if
for,
• all λ, n ∈ N,
• all messages ˜m ∈ {0, 1}λ and all sets of messages M :=
{m1, . . . , m˜n} where each message is from {0, 1}λ,
• for all key pairs ( ˜pk , ˜sk ) in the support of ΠDS.KGen
and all sets of keys PK := {pk 1, . . . , pk n}, SK :=
{sk 1, . . . , sk n} where the key pairs (pk i, sk i) for i ∈ [˜n]
are in the support of ΠDS.KGen,
• for all S := {σi}i∈[n] such that σi ← Sign(sk i, mi)
• for all ˜σ ← Sign( ˜sk , ˜m)
• for all ((cid:96)k ) ← mLock(n, S, ˜σ)
• and for all S ← mRel((cid:96)k , M, ˜m, PK, ˜pk , ˜σ), where S :=
{σi}i∈[n],
then we have that, ΠDS.Vf(pk i, mi, σi) = 1 for all i ∈ [n].
Below we deﬁne the security notions for multi-lock signa-
tures. Note that we consider without loss of generality only
signatures where the signing algorithm is deterministic.
, Vf) where Sign
∗ is deterministic.
Proof 5 (Sketch): The new signing algorithm Sign
In this work we only consider signature schemes with a
deterministic signing algorithm. This is however without loss
of generality, as shown by the following (well known) lemma.
Lemma 4: Let (KGen, Sign, Vf) be a signature scheme with
probabilistic Sign algorithm. Then there exists a signature
∗
scheme (KGen, Sign
∗ is deﬁned
to be Sign(sk , m; PRF(sk , m)), where PRF is a cryptographic
pseudorandom function.
Unlockability. This property ensures that a correctly generated
lock can be released to reveal a set of valid locked signatures,
when provided with a valid locking signature. This intuition is
formally captured in Figure 10. In the experiment, the adversary
gets to choose (M, ˜m) where M is a set of n messages. It also
has access to a signing oracle for the key ˜sk. The experiment
generates a lock (cid:96)k honestly by running mLock(n, S, ˜σ) and
gives the lock to the adversary. The adversary returns a
signature ˜σ∗ which is used to release the lock (cid:96)k and obtain
a candidate set of locked signatures S(cid:48). The adversary wins
the experiment if there exists some signature σi ∈ S(cid:48) that is
an invalid signature on the message mi under pk i (condition
b0) while ˜σ∗ is a valid signature on the message ˜m under ˜pk
(condition b1). A multi-lock signature scheme is said to satisfy
unlockability if the adversary wins the above experiment at
most with negligible probability in the security parameter.
Deﬁnition 14 (Unlockability): A multi-lock signature MLS
is unlockable if there exists a negligible function negl such
that for all λ ∈ N, all n ∈ p(λ) where p(·) is any polynomial
and for all PPT adversaries A, it holds that
Pr[EUn-CMAA,MLS(λ, n) = 1] ≤ negl(λ)
where the experiment EUn-CMA is deﬁned in Figure 10.
Hiding. This property ensures that a correctly generated
lock reveals no information about the locked or the locking
signatures. The above intuition is captured in Figure 11. In the
experiment, the adversary gets to choose (M, ˜m) where M is
a set of n messages, while having access to signing oracles
with respect to keys sk 1, . . . , sk n and ˜sk. The experiment
chooses a bit b uniformly random and if b = 0, it generates
24
SignO( ˜sk , m)
σ ← ΠDS.Sign( ˜sk , m)
return σ
EUn-CMAA,MLS(λ, n)
Q := ∅
( ˜pk , ˜sk ) ← ΠDS.KGen(1λ)
for i ∈ [n] do
(M, ˜m, st) ← ASignO
(pk i, sk i) ← ΠDS.KGen(1λ)
(SK, ˜pk ),
where SK := {sk i}i∈[n]
parse M := {m1, . . . , mn}
for i ∈ [n] do
σi ← ΠDS.Sign(sk i, mi)
S := {σ1, . . . , σn}
˜σ ← ΠDS.Sign( ˜sk , ˜m)
(cid:96)k ← mLock(n, S, ˜σ)
∗ ← ASignO( ˜sk ,·)(st, (cid:96)k )
˜σ
(cid:48) ← mRel((cid:96)k , M, ˜m, PK, ˜pk , ˜σ
S
∗
),
parse S
b0 :=
(cid:48)
where PK := {pk i}i∈[n]
(cid:94)
:= {σ1, . . . , σn}
(cid:16)
(ΠDS.Vf(pk i, mi, σi) = 0)
i∈[n]
ΠDS.Vf( ˜pk , ˜m, ˜σ
(cid:17)
) = 1
∗
b1 :=
return b0 ∧ b1
Fig. 10: Experiment for unlockability of multi-lock signatures
a lock correctly using mLock(n, SK, ˜sk, M, ˜m). If b = 1, the
experiment uses a simulator Sim that only takes as input n,
the public key set PK (corresponding to SK), the public key
˜pk (corresponding to ˜sk) and the messages M, ˜m and outputs
a lock (cid:96)k. The adversary is given (cid:96)k and outputs a guess b∗.
The adversary wins the experiment if the guess was correct,
i.e. b = b∗ (condition b0) and if ˜m was never queried before
to the signing oracle with respect to ˜sk. The latter condition
is necessary to avoid trivial attacks where the adversary uses
a signature on ˜m to run the release algorithm. A multi-lock
signature is said to satisfy hiding if the adversary wins the
above experiment with probability negligibly close to 1/2.
Deﬁnition 15 (Hiding): A multi-lock signature MLS is
hiding if there exists a negligible function negl and a simulator
algorithm Sim, such that for all λ ∈ N, all n ∈ p(λ) where
p(·) is any polynomial and for all PPT adversaries A it holds
that
Pr[EHi-CMAA,LS(λ, n) = 1] ≤ 1/2 + negl(λ)
where the experiment EHi-CMA is deﬁned in Figure 11.
In the following we describe our generic construction of a
multi-lock signature.
Construction in the ROM. Let ΠDS := (KGen, Sign, Vf) be a
digital signature scheme (with deterministic signing algorithm)
and let Hi : {0, 1}λ → {0, 1}λ for i ∈ [n] be hash functions.
Our generic construction of multi-lock signature is speciﬁed
in Figure 12. In our construction, a lock consists of a set of
values (cid:96)i for i ∈ [n], where each (cid:96)i is an xor of a locked
SignOi(sk i, m)
σ ← ΠDS.Sign(sk i, m)
return σ
SignO( ˜sk , ˜m)
˜σ ← ΠDS.Sign( ˜sk , ˜m)
˜Q := ˜Q ∪ { ˜m}
return ˜σ
EHi-CMAA,MLS(λ, n)
˜Q := ∅
( ˜pk , ˜sk ) ← ΠDS.KGen(1λ)
for i ∈ [˜n] do
(pk i, sk i) ← ΠDS.KGen(1λ)
O := {{SignOi}i∈[n], SignO}
(M, ˜m, st) ← AO
( ˜pk , PK)
where PK := {pk i}i∈[n]
parse M := {m1, . . . , mn}
b ← {0, 1}
if b = 0
for i ∈ [n] do
σi ← ΠDS.Sign(sk i, mi)
Proof 6: Unlockability. Consider and adversary A that
violates the unlockability property of ΠMLS. We construct a
reduction R against the strong unforgeability of ΠDS that
makes use of A as a sub-routine. The reduction obtains
a public key ˜pk as its input. The reduction R chooses
keys (pk i, sk i) ← ΠDS.KGen(1λ) for i ∈ [n] and gives
({sk 1, . . . , sk n}, ˜pk ) as inputs to A. Any signing oracle query
from A with respect to ˜pk is answered by the reduction R using
its own signing oracle in the unforgeability experiment. Random
oracle queries by A are answered by R via lazy sampling by
picking a random value in the range of H and returning it to A.
Whenever A outputs challenge messages ({m1, . . . , mn}, ˜m)
the reduction generates σi ← ΠDS.Sign(sk i, mi) and obtains ˜σ
by querying its signing oracle with ˜m. It generates the lock (cid:96)k
as in EUn-CMA by ﬁrst setting H(˜σ) and returns the lock to the
adversary A. The adversary outputs ˜σ∗ and the reduction simply
outputs ( ˜m, ˜σ∗) as its forgery. Now observe that the only way
A can win EUn-CMA experiment is if ˜σ∗ is a valid signature
on ˜m such that H(˜σ∗) (cid:54)= H(˜σ). Since the hash function
H is deterministic, this implies that ˜σ∗ (cid:54)= ΠDS.Sign( ˜sk , ˜m).
Therefore the reduction R has output a valid forgery ˜σ∗, which
is a contradiction to the strong unforgeability of ΠDS.
Hiding. The simulator Sim simply returns a set of binary
strings of the appropriate length sampled uniformly at random.
Observe that to win the experiment, A does not query ˜m to the
signing oracle ΠDS.Sign( ˜sk ,·). We now have two cases where,
either the adversary guesses the signature ΠDS.Sign( ˜sk , ˜m) and
queries it to the random oracles Hi, or it does not query the
random oracles on ΠDS.Sign( ˜sk , ˜m). In the former case, this is
clearly a break against the strong unforgeability of the signature
scheme ΠDS and therefore this case occurs only with negligible
probability. In the latter case, the value Hi(ΠDS.Sign( ˜sk , ˜m))
for every i ∈ [n] is uniformly distributed (in the random oracle
model) as the adversary does not query the oracles on this
point. It follows that in this case the simulated and the real
experiments are identical to the eyes of the adversary and
therefore the probability that b∗ = b is exactly 1/2. Therefore
the overall success probability of the adversary breaking hiding
is 1/2 + negl(λ).
Construction in the Standard Model. In the following we
sketch a construction of multi-lock signatures in the standard
model. Let H be a sufﬁciently stretching leakage resilient
pseudorandom generator [42], i.e. a PRG whose output is
pseudorandom even if the seed is computationally unpredictable
(instead of uniformly sampled). Then a multi-lock signature
can be computed as
σ1(cid:107) . . .(cid:107)σn ⊕ H(˜σ).
It is not hard to see that the signatures (σ1, . . . , σn) can be
recovered deterministically given ˜σ. By the unforgeability of our
signature scheme, ˜σ is hard to predict, which implies that H(˜σ)
is computationally indistinguishable from uniform. Therefore,