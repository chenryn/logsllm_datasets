# Securing a Remote Terminal Application with a Mobile Trusted Device

**Authors:**
- Alina Oprea, Carnegie Mellon University
- Dirk Balfanz, Palo Alto Research Center
- Glenn Durfee, Palo Alto Research Center
- Diana K. Smetters, Palo Alto Research Center

**Contact Information:**
- **Carnegie Mellon University, Pittsburgh, PA, USA**
- **Palo Alto Research Center, 3333 Coyote Hill Road, Palo Alto, CA 94304, USA**
- **Emails:** {balfanz, gdurfee, smetters}@parc.com

## Abstract

Many real-world applications rely on credentials such as passwords for user authentication. When accessed from untrusted public terminals, these applications are vulnerable to credential-sniffing attacks, as demonstrated by recent high-profile security breaches [20].

In this paper, we present a secure remote terminal application that enables users with a trusted device to delegate their credentials to a public terminal without exposing long-term secrets. The user grants the terminal temporary access to perform specific tasks, which is valid only while the user is in proximity. Our model ensures that the untrusted terminal can only access what the user sees on the display, and nothing more. We describe the design and implementation of this system, which introduces a moderate 12% overhead in additional network traffic.

## 1. Introduction

From 2000 to 2002, JuJu Jiang, a Queens resident, collected over 450 online banking passwords from unsuspecting Kinko’s customers [20]. Jiang installed keyboard-sniffing software on public terminals in thirteen Kinko’s stores in Manhattan, obtaining GoToMyPC [15] account passwords and subsequently gaining full control of the home PCs of his victims.

This incident highlights two key issues:
1. Users want to access their home computing environment from public terminals.
2. Public terminals cannot be trusted with sensitive credentials that provide full access to the home computing environment.

To address these issues, we propose a solution that allows users to securely access their home computing environment from an untrusted terminal. If the terminal were completely untrusted, users would avoid using it. Conversely, if they could fully trust the terminal, no additional security measures would be necessary. In reality, the level of trust often falls between these extremes; the terminal may be trusted to perform its advertised functions but not to handle long-term secrets.

Our goal is to enable users to control the information that the untrusted terminal can access. Specifically, the terminal should only gain access to the parts of the home computing environment that the user chooses to display, and not to other parts or long-term secrets like passwords. This approach allows users to make case-by-case decisions about what information to expose to a given terminal.

To achieve this, we focus on usability, making it easy for users to specify which parts of their home computing environment are exposed to the untrusted terminal. We use the metaphor of "seeing" — the untrusted terminal can access only the information that the user chooses to display via the monitor. We extend the familiar click-to-open semantics of traditional user interfaces, where a mouse click means "expose this component of my computing environment to the untrusted terminal I’m currently at."

To ensure that only the user, not the untrusted terminal, can issue such mouse clicks, we provide read-only access to the home computing environment and use a separate, trusted input path for interaction. Our solution involves a modified PDA that the user plugs into the untrusted terminal, which can be used as a mouse (see Figure 1). The PDA authenticates all input events and withholds the necessary credentials from the untrusted terminal, preventing it from issuing its own input events. The PDA also temporarily issues and updates credentials to the untrusted terminal, allowing it to display the parts of the home computing environment that the user has chosen to open. Once the PDA is unplugged, the last issued credential expires, leaving the terminal unable to display the user's home computing environment.

We emphasize that the PDA is a general-purpose device that can be used for other purposes. It simply provides a trusted input path when connected to an untrusted terminal. Our prototype PDA (Figure 1) includes an LED and optical sensor similar to those found in optical mice. Alternatively, the trusted device could be a cell phone, two-way pager, or a special-purpose device with a form factor similar to travel mice. For this paper, we assume the trusted mobile device is a general-purpose PDA with built-in optical mouse capabilities or touchpad-like functionality through its touchscreen.

In this paper, we describe a specific implementation of this idea using a standard remote desktop protocol (VNC [18]). The graphical representation of the home computing environment is a copy of the home PC's GUI desktop. The user can access their home PC, open applications, and documents using the PDA as a mouse and keyboard. The desktop environment is displayed on the untrusted terminal only as long as the PDA is present. After a specified timeout, the terminal loses all credentials to access the home environment. This setup allows the user to interact with the untrusted terminal almost as they would with their home PC, with the added security that only the exposed items are accessible to the untrusted terminal.

We discuss the goals of our system in Section 3 after reviewing related work in Section 2. In Section 4, we explain the design, implementation, and performance evaluation of our VNC-based application. We conclude in Section 5.

## 2. Related Work

Traditional methods for securing network access, such as SSH [5], still leave users vulnerable to password-sniffing attacks. Even one-time passwords or tokens, while potentially preventing future unauthorized access, do not protect against malicious manipulation of the home environment during the session. These methods provide the untrusted terminal with total access to the home computing environment, which is insufficient for our needs. Instead, we must be able to delegate very limited capabilities to the untrusted terminal.

Delegation of credentials has been a focus of much previous work, ranging from theoretical approaches like ABLP access control logic [1] to more applied solutions like SPKI [12]. These systems allow principals to delegate subsets of their rights to other principals. However, our approach is more pragmatic: we send short-lived keys to the delegatee, allowing it to decrypt messages meant for the delegator for a short period. This approach is easier to implement and does not require the untrusted terminal to possess a private key.

Remotely-Keyed Encryption [6, 7] is similar to our model, where an untrusted host can encrypt and decrypt data with the help of a trusted smartcard. However, this method can only decrypt entire messages, making it less suitable for streaming data. In contrast, our system determines the frequency of interaction between the PDA and the untrusted terminal based on the expiration time of delegated keys, not the frequency of packets sent.

Zero-Interaction Authentication [10, 9] uses an authentication token to store credentials needed to use a host computer. If the token is removed, the host forgets all keys and becomes unusable. While similar to our work, the trust model differs: in Zero-Interaction Authentication, the host is trusted and voluntarily forgets keys when the token is out of range. In our system, the host is untrusted and requires continuous updates from the PDA to access the user's home PC desktop.