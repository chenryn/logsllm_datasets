### 执行在全局，没有异常
```javascript
> new Function('x = "Hi"')()
undefined
```
### `x` 被创建
```javascript
> x
'Hi'
```

### 使用间接调用的 `eval` 来创建 `y`
```javascript
> (0, eval)('y = "Hello"')
> y
'Hello'
```

因此，回到今天这一讲的主题。标题中的代码实际上与上一讲中提到的“间接调用 `eval()`”的效果一致，同样会在全局作用域中创建一个新的变量 `x`，即使是在严格模式下也是如此。在 JavaScript 的执行系统中出现这种效果的根本原因在于，执行引擎试图从语法环境中独立出来。如果考虑具体环境的差异性，执行引擎的性能将会较差且不易优化；如果不考虑这种差异性，则如“严格模式”这样的特性就不能作为环境属性。在这种两难的情况下，ECMAScript 选择了牺牲一致性来换取性能。

**注释：关于间接调用**
- `eval()` 对环境的使用，以及环境相关的执行引擎组件的设计与限制，请参见《第 20 讲》。

此外，这也带来了一些好处，例如提供了 `window.execScript()` 的替代实现，并且通过 `new Function` 动态创建的函数可以安全地应用于并发环境。

---

### 专栏总结
《JavaScript 核心原理解析》共 22 讲内容已全部结束。在这个专栏中，我为你讲述了 JavaScript 的静态语言设计、面向对象语言的基本特性，以及动态语言中的类型与执行系统。这些看似零碎和基础的内容，实际上是理解更深层次核心原理的基础。如果你不掌握这些基础知识，那么学习更高级的概念（如多线程和并行处理）将变得非常困难。

这也是我设计这个 22 讲框架的原因。我希望你能先打下一个坚实的基础，理解 ECMAScript 作为“语言设计者”的职责和关注点，从而深入探索 JavaScript 核心原理的乐趣与挑战。希望我们在新的课程中再见！

![](https://static001.geekbang.org/resource/image/a9/c4/a9c16d26dfcdd8ff91002344df2297c4.jpg)

感谢你的收听，最后邀请你填写这个专栏的调查问卷，我也想听听你的意见和建议，以便更好地答疑解惑、查漏补缺，回顾这一路的苦乐。

**注释：编辑同学说还有一个“结束语”，我真不知道怎么写。不过，如果你觉得意犹未尽的话，到时候请打开听听吧（或许还有好货）。**

by aimingoo.

---

### 加餐 | 捡豆吃豆的学问（上）：这门课讲的是什么？

你好，我是周爱民。今天，我们不上正经课，而是讲一些课外的话题。前两天，极客时间的编辑老师找我开会，讨论了这门课程，认为当务之急是给同学们开个小灶，好好讲一下“怎么学这门课程”。因为这才短短讲了 1/3，许多同学就已经跟不上了。

说到开小灶，我第一个想到的就是“吃”。为什么呢？因为我父亲是一位厨师，考过厨师证，在县城里算是数一数二的。我的哥哥后来也做了厨师，精通多个菜系。而我呢，没学厨艺，但从父亲那里学到了一个“吃”字。

什么是“会吃”？真正的会吃不仅仅是下嘴的功夫，而是三件事：食材、味道和懂。这里的“食材”就是指这二十讲课程。开课之前，有同学问我这门课程都讲些什么，值不值得一听。我反问他想听些什么：

- VUE？没有。
- HTML、CSS？没有。
- 前端？客户端？浏览器？手机 App？统统没有。

那位同学不死心，又问了一句：总该讲点 Node.js、ReactNative 或者 NPM 吧？我告诉他，二十节课程里面，这些名词大概不会超过五次。他回了一句：那你让我学什么？

**食材的问题是个好问题！学什么呢？**

我记得在豌豆荚的时候，参与了一些招聘工作。有一次面试结束后，我在 HR 系统中写了四个字：“水平一般”。其他面试官打断了我，说这个人经验丰富，你怎么这么点评呢？我说，这个人确实能力很强，但他的水平一般。因为他学的东西别人也都学，会的东西别人也都会，技巧再熟练也不过是卖油翁的“但手熟尔”。

他在面试中回答了一些偏向核心的问题，但他对原理却一无所知。当我进一步引导时，他的回答都是中规中矩，无一可用。这就是关键所在。“核心原理”不是一些招数技法，而是要找到最正确的路径。大公司里的“核心团队”也只是帮你指出核心所在，教你一些套路，但这只是“死东西”。不懂得核心原理，就如同上面说过的那位面试候选人一样，出的都是些中规中矩的招数。

**这门课到底讲什么呢？**

《JavaScript 核心原理解析》这门课的核心不是讲如何用 JavaScript 或者如何学习 JavaScript，而是讲语言本身。语言最核心的部分有两个：一个是语言的构成，另一个是如何构成。这门课主要讲“如何构成”，因为 ECMAScript 的规范目标是指导如何实现一个 JavaScript 引擎。

这门课跳过了对“构成一门语言的基础元素”的讨论，直接进入“如何将基础元素组织起来成为 JavaScript”。比如，我没有讲什么是动态语言或者什么是标识符。这是因为 ECMAScript 默认读者了解这些基础概念。

然而，大多数同学并不了解这些基础概念。只有了解了那些“不一样的”东西，你才会成为“不一般的”。**而这门课程的目的，也正是要让你成为那个“不一般的”。**

你需要放下以前你认为你懂的那些东西。如同开篇词中所说的，它们正是阻碍你前进的东西。有些同学从第一讲开始就被“引用”这个概念困扰，因为他们所理解的 JavaScript 概念与我所讲的完全不同。这种情况在评论区表现得很明显，大多数同学都是在旧有的概念中构建新的概念集合，如同浮沙高塔，原本基础就搭得不对，你再怎么努力也是上不了这个台阶的。

然而，只要突破了“引用”这个概念，把旧的东西扔掉，基于新的东西来理解，就会豁然开朗。我所讲的东西并不是特别高明或高深的技巧。问题只是，你要把原本依赖的那些概念、想法、设定一一扔掉，才能看到这些新的东西。这个过程很难。

很多年前，我在一个 Borland 的纪念网页上留下的题字是：“所见即所得，所见即所碍。”Borland 是“所见即所得”这一开发理念的大成者，最终也死于对这一概念的固执坚守。

关于“引用”这个概念的突破，如果有机会，我会请极客时间的编辑们约请“海绵薇薇”同学来讲一下他如何理解这个东西，以及在理解这个概念前后，对 JavaScript 有哪些不一样的认识。

回头来说这门课程。语言是你在这门课中看到的“真相的全部”。我希望你能真正了解语言：它是什么，它长什么样，它为什么长成这样，它如何成长、变化。对于语言来说，它的生命的原点在哪里？源动力又在哪里？

举个例子，在第一模块（前五讲）中，如果你理解了 `x = x` 表达的意思是“将值赋给引用”（前提是接受这里引用和值是 ECMAScript 中的概念），那么你几乎能贯通整个 JavaScript 语言的构造过程，了解所有语句、词法，以及引擎内核结构的设计原理与应用原则。

所以，你现在再看看第一模块的总标题：“从零开始：JavaScript 语言是如何构建起来的 （5 讲）”。

说到这里，可能有些同学会认为这门课程是屠龙秘籍，不是一般人学的，或者是一般人学不会的。当然不是这样。我只是强调这门课程讲的东西与平常听到的不一样。尺长寸短，但只要是用在合适的地方，就都是好东西。相反，如果你非要用公孙大娘舞剑的方式去百万军中杀敌，那么你大概就是最先中了黑箭的那一个。

关于这一点的不同，我在之前的博客文章《前端要给力之：代码可以有多烂？》中也讲过。研究是研究，实战是实战，不要把二者混为一谈。就像在第三讲中提到的那个面试题，最终我给出了一个应用场景：用来形成链表。然而，如果你真的要在工程项目中这样写链表，那么第二天可能会被开除。

说回正题。我仅仅告诉你这个东西“与众不同”是不够的。毕竟，你听这堂课的目的还是要学懂它。历史上有一个人，正好是怎么学都学不会东西的。他有七个师傅，个个是江湖知名的大侠，但教出来的却是弱鸡，还没行走江湖就被抓住脚扔出去了。这个人来自金庸大师的《射雕英雄传》，就是郭靖。

书中第 32 回写道，道人问道：
> “你这六位师父都是武林中顶尖儿的人物，……你又不是不用功，为什么十年来进益不多，你可知道什么原因？”

郭靖回答说：
> “那是因为弟子太笨，师父们再用心教也教不会。”

这时候道人笑了，说了一句古今以来求学问道最核心的要义：
> “那未必尽然，这是教而不明其法，学而不得其道。”

所以，关于我们今天说的这一门课程，“学不好、或者学不会”的关键就在马钰（不是马云）说过的这句话：教者要有其法，而学者要得其道。