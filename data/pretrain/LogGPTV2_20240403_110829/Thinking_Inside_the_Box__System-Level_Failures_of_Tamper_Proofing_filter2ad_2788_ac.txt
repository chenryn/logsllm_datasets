support iCVV deployment as it would also reduce the risk
of many of the attacks discussed in this paper. But despite
Visa’s recommendation being made in 2002, and APACS
stating that it is mandatory from January 2008, cards are
still being issued in February 2008 that store an exact copy
of the magnetic strip on the chip.
287
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:41 UTC from IEEE Xplore.  Restrictions apply. 
3.3 Trusted user interface and 2-channel
communication
Even once PIN encryption is mandatory, iCVV intro-
duced, and CVVs checked on all magnetic-strip transac-
tions without exception, there remains a further vulnerabil-
ity – the relay attack [20]. Here, a bogus terminal in one lo-
cation forwards transaction data to a bogus card in another.
The cardholder tries to pay two pounds to a parking-ticket
machine in London, but the machine is run by a crook; when
she gets her statement she sees a debit for twenty thousand
dollars’ worth of casino chips in Macao. There are two
ways to block relay attacks: either use a distance bound-
ing protocol, or provide a trustworthy user interface. The
latter is likely to be more practical in the short term.
One approach, already being deployed in Britain for
Internet banking, is to give customers a pocket-calculator
sized card reader and keypad, using the Chip Authentica-
tion Program (CAP) protocol. This can operate in several
modes, but in the most secure variant, the customer inserts
their EMV card into the calculator and types in their PIN,
the transaction value and the recipient’s account number.
The EMV card then computes a code that is shown on the
calculator screen and which the customer types into their
PC; this is veriﬁed online by their bank. CAP keeps the
card and PIN within the cardholder’s trust boundary, and
provides strong authorization of the transaction. However,
it may present usability problems even for occasional use in
home banking, and is likely to be quite unusable in a fast-
moving environment such as a train station or supermarket.
If fraud continues to rise, might customers eventually
be asked for a CAP code for high-value retail transactions,
such as buying a car? Unfortunately, this doesn’t really de-
feat the bad-terminal problem, as a bogus PED could be pro-
grammed to work out a CAP code without the cardholder
knowing. The critical problem is the card’s lack of a trust-
worthy user interface.
Attempts to solve the trusted interface problem include
using a second communication channel, such as SMS [31].
Here, after a transaction has been placed, a text message
is sent to the customer’s registered mobile phone, which
contains the transaction amount, recipient and a code that
the customer can release to authorize payment. Again, this
may work ﬁne in home banking, but could be tiresome
in retail if an SMS took more than a few seconds to get
through.
In addition, many networks send SMSs in the
clear, and even when they don’t, their encryption can be
broken with some effort; so while two-channel may be rea-
sonable for geographically-dispersed home banking trans-
actions, it may be riskier for transactions concentrated at
the attacker’s shop.
Furthermore, both the CAP and two-channel approaches
would mean reprogramming many hundreds of thousands
of PEDs and their supporting infrastructure. Perhaps a bet-
ter alternative, in which only PEDs would need a software
upgrade, is for the PED to provide a trusted path from the
card to the customer’s mobile-phone display using a 2D bar-
code read by the phone’s camera [10, 18]. In fact there are
many options for getting data back and forth between cards,
PEDs, phones and customers.
But perhaps the simplest way forward is to skip EMV
and move instead to RFID-based payment protocols, as
the USA seems poised to do. Here, the customer’s credit
card can become an application in her mobile phone. The
trusted-interface problem is solved, and NFC [27] gives a
bidirectional high-bandwidth channel between phone and
terminal. Some other issues then require thought – from
possible NFC middleperson attacks, through the security of
the RFID protocols to malware on the phone – but they are
outside the scope of this paper.
4 Security boundaries
While the failures we have presented can be exploited
with only moderate technology and know-how (as already
used by fraudsters in ATM skimmers), the process that led
to these vulnerabilities is far from simple. So it is use-
ful to review what circumstances coincided to make the at-
tacks possible. Superﬁcially, the ability to intercept PIN and
card details is due to the anti-tampering mechanisms inad-
equately protecting the smartcard data line. However, the
fact that the PIN is transferred unencrypted is due to a con-
scious choice by the card issuer to save money. Even if PIN
encryption were used, if the card personalization center did
not sign the CVM list an attacker can still cause the PIN
to be sent in the clear. Finally, the fact that a cloned card
is useful is due to magnetic-strip fallback being supported
by all banks, and by issuers not implementing Visa’s iCVV
recommendations.
Hence the task of evaluating a PED depends not just
on examining the physical layout of anti-tampering mech-
anisms, but also on a knowledge of the choices made (or
to be made in the future) by the issuer of what protocol to
use, what ﬁelds to get the card personalization software to
sign, the electrical transmission behavior, and the conﬁgura-
tion of other payment service providers. It is unreasonable
to expect one person to be aware of all these issues unless
some effort is made to synthesize them into a concise and
coherent piece of documentation. In its absence, each de-
signer may hope that the limitations of their choices will be
mitigated by someone else’s work.
The root cause of protection failure is not the inadequate
design of any one feature, but a poor design and evaluation
process. It’s just impossible to validate that each module en-
forces the security guarantees that the other parts of the sys-
tem require of it, as these guarantees aren’t made explicit.
288
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:41 UTC from IEEE Xplore.  Restrictions apply. 
Discussions with an industry insider, involved in designing
a product closely related to one that we studied, conﬁrmed
our suspicions. The design and veriﬁcation requirements
for individual modules met or exceeded industry best prac-
tice. However, designers were given no guidance as to how
their module ﬁtted into the overall security architecture.
4.1 The need for a security architecture
document
The complexity and fragility of EMV mean that design-
ing a robust tamper-proof PED requires a thorough un-
derstanding of the whole ﬁelded system. The EMV pro-
tocol suite allows banks to design fairly secure systems,
or very insecure ones, depending on the options chosen.
Yet although the EMV paperwork describes a lot of detail,
there is no one architecture document that a component de-
signer can use to understand the interaction of these options
and determine whether their module introduces any criti-
cal weaknesses into the local system. The sheer quantity of
EMV documentation is also a major impediment. The core
speciﬁcations are 726 pages long, and there are a further
2,126 pages of testing documentation. Even this is not ade-
quate to understand the whole system, as payment network
operators may add additional requirements (Visa publishes
another 810 pages). And many security-critical decisions
are contained only in local documentation speciﬁc to indi-
vidual banks, which is available only under non-disclosure
agreement, if at all. The volume of material, and the many
inter-module dependencies, leave much room for interpreta-
tion and almost inevitably lead to ﬂawed implementations.
EMV is not the only complex evolving system that in-
cludes tamper-resistant components, multiple vendors and
perverse incentives on a multi-national scale: other exam-
ples range from postal and utility meters through digital
tachographs to public-key infrastructures. It would clearly
be beneﬁcial if we could ﬁnd a way to distill down the
security-critical information from such systems.
In the old days, system design followed the waterfall
model (at least in theory): a top-level requirements docu-
ment was reﬁned into a functional speciﬁcation and a sys-
tems speciﬁcation, then implemented and tested. The Com-
mon Criteria framework implicitly assumes this model in
that it provides the companion documents needed to cre-
ate and maintain the security case: a security policy is re-
ﬁned into a protection proﬁle, and then into a security tar-
get against which the product can be evaluated. However,
systems as complex as EMV inevitably involve an iterative
design process, and as commercial systems move past the
spiral model of limited iteration into evolutionary develop-
ment, we seem to have neglected to create a mechanism that
will enable everyone to keep sight of what the system pro-
tection is trying to achieve.
We therefore propose that complex systems such as
EMV should have a security architecture document that
states clearly and succinctly the threats that the system is
supposed to cope with and the mechanisms it will use to do
so, tracing these to the major system interfaces. This doc-
ument should, for systems like EMV on which the public
must rely, be a public document. Even in classiﬁed systems,
it must be available to implementers of every critical com-
ponent, and short enough that they will read it. They are in
the best position to understand what their module achieves,
and to take action at design time if needed. For example, the
engineers implementing the Ingenico tamper mesh should
have had a document that clariﬁed the importance of pro-
tecting the serial data link from the card to the PED CPU,
and make them think twice about how, where and why they
route tracks and create holes/vias in the circuit board.
One way of managing complexity in software systems is
abstraction, such as in object-oriented programming, where
the internal structure of a component is hidden from its
users; only the interface it exposes is relevant [8]. This ap-
proach is also taken in the design of networks, where ﬁre-
walls deﬁne a security perimeter; while this does not en-
sure security by itself, it does at least make analysis eas-
ier. Tamper-proof boundaries, in systems like EMV PEDs,
ought to be treated in the same way. Now given that archi-
tecture depends on APIs, this means ﬁnding ways to man-
age the secure evolution of APIs, and to ensure that every-
one involved understands the protection assumptions both
above and below each API – so that changes don’t create
havoc. That’s why we believe the missing link should be
seen as an architecture document – as a system’s architec-
ture is deﬁned by its APIs.
Each suite of mechanisms should implement a particu-
lar boundary or API, perform some clear security purpose,
and also be a convenient object for abstraction. For each
boundary, the following assumptions should be clearly and
concisely speciﬁed:
• The environment the container is in – what assump-
tions are made about attacker capabilities and what
protection is assured by any outer layers;
• What data items are transmitted to, from or through a
tamper-proofed component and what guarantees must
be enforced on them;
• What guarantees the container reciprocally provides to
its content;
• What protections are provided to any further tamper-
proofed containers it encloses.
A summary of the security boundaries should be given,
showing how they are interconnected and how protected as-
sets ﬂow. Multiple versions of this document or diagram,
289
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:41 UTC from IEEE Xplore.  Restrictions apply. 
Figure 5. Security boundaries of the payment system environment. The LCD, card reader, keypad
and smartcard need to cross boundaries, shown by dotted lines, in order to complete a transaction.
at different levels of detail should be produced for complex
systems. At the top level, the documentation of the outer-
most enclosures are all that is necessary to perform a system
evaluation at that level – those boundaries which are com-
pletely enclosed by another need not be discussed. How-
ever, the detailed documentation for each module should
show further depth.
Figure 5 gives an example for the EMV systems we have
inspected, and includes the major security boundaries. We
have included both conventional anti-tampering measures,
such as tamper meshes and lid-switches that protect the
CPU and case; we have also included the personal space of
the customer and merchant – in the sense that they will not
permit unauthorized interference with the card or terminal
while it remains under their control.
4.2 Security analysis
Given the above information, security analysis becomes
more straightforward. For each asset transmitted, it is easy
to ﬁnd all the boundaries it crosses, which provides a sys-
tematic way of working through the possibilities to estab-
lish whether those boundaries provide adequate protection.
For each container, it is possible to see if the anti-tampering
mechanism properly protects both data within it, and any
enclosed tamper proof boundaries.
This still does not make the analysis trivial, because it
requires detailed work to establish which assets need to be
protected against which threats, and whether an individual
anti-tampering measure meets its requirements. However,
these steps permit experts in individual module design to
establish the requirements for their component. This does
not eliminate the need for system level analysis, but instead
it assists the process – it points penetration testers at possi-
ble soft spots.
4.3 Design constraints
If the documentation is more than a few pages long, the
likelihood of a ﬂawed system increases. It is not reason-
able to expect component designers to faithfully implement
a complex set of security rules when they also have to deal
with other manufacturing issues, such as cost, aesthetics and
reliability. A length limit is a very reasonable requirement
– constraining the complexity of the security mechanism
greatly increases its chance of success.
Also, where several protocol options affect the data items
to be protected, all possible combinations should be set out.