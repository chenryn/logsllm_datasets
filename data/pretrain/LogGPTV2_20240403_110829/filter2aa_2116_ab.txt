# Proxy-Related Attacks on Microsoft Exchange Server

## 1. Request Section
- `CopyHeadersToServerRequest`
- `CopyCookiesToServerRequest`
- `AddProtocolSpecificHeadersToServerRequest`

## 2. Proxy Section
- `GetTargetBackEndServerUrl`
- `CreateServerRequest`
- `GetServerResponse`

## 3. Response Section
- `CopyHeadersToClientResponse`
- `CopyCookiesToClientResponse`

### Event Sequence
- `BeginRequest`
- `AuthenticateRequest`
- `AuthorizeRequest`
- `MapRequestHandler`
- `EndRequest`
- `IHttpHandler`
- `LogRequest`

## Arbitrary Backend Assignment
```csharp
protected override AnchorMailbox ResolveAnchorMailbox() {
    HttpCookie httpCookie = base.ClientRequest.Cookies["X-AnonResource-Backend"];
    if (httpCookie != null) {
        this.savedBackendServer = httpCookie.Value;
    }
    return new ServerInfoAnchorMailbox(
        BackEndServer.FromString(this.savedBackendServer), this);
}
```
**Location:** `HttpProxy\OwaResourceProxyRequestHandler.cs`

**Example URL:**
```
https://[foo]@example.com:443/path#]:444/owa/auth/x.js
```

### Root Cause
- **Super SSRF (Server-Side Request Forgery):**
  - The Exchange server must adapt to the compatibility between new and old architectures, leading to the introduction of the cookie.
  - An attacker can control almost all HTTP requests and responses.
  - The request is automatically attached with a Kerberos ticket with `Exchange$` account privileges.
  - Leveraging the backend internal API `/ecp/proxylogon.ecp` to obtain a valid Control Panel session and a file-write bug to achieve Remote Code Execution (RCE).

**Demo:**
- [YouTube Demo](https://youtu.be/SvjGMo9aMwE)

## ProxyOracle
- **Description:**
  - An unauthenticated attacker can recover the victim's username and password in plaintext by tricking the user into opening a malicious link.
  - Chained with two vulnerabilities:
    - **CVE-2021-31195**: Reflected Cross-Site Scripting (XSS)
    - **CVE-2021-31196**: Padding Oracle Attack on Exchange Cookies Parsing

## How Users Log-in to OWA/ECP
- **Form-Based Authentication (FBA)**
  - Involves IIS, Remote PowerShell, RPC, EWS/OWA, ECP/OAB, and Mailbox Database.

### FBA Cookies
- **Structure:**
  - `cadataTTL`
  - `cadataKey`
  - `cadata`
  - `cadataIV`
  - `cadataSig`

### FbaModule Encryption Logic
```csharp
@key = GetServerSSLCert().GetPrivateKey()
cadataSig = RSA(@key).Encrypt("Fba Rocks!")
cadataIV = RSA(@key).Encrypt(GetRandomBytes(16))
cadataKey = RSA(@key).Encrypt(GetRandomBytes(16))
@timestamp = GetCurrentTimestamp()
cadataTTL = AES_CBC(cadataKey, cadataIV).Encrypt(@timestamp)
@blob = "Basic " + ToBase64String(UserName + ":" + Password)
cadata = AES_CBC(cadataKey, cadataIV).Encrypt(@blob)
```

### Decryption Logic
```csharp
private void ParseCadataCookies(HttpApplication httpApplication) {
    using (ICryptoTransform transform = aesCryptoServiceProvider.CreateDecryptor()) {
        try {
            byte[] array5 = Convert.FromBase64String(request.Cookies["cadata"].Value);
            bytes2 = transform.TransformFinalBlock(array5, 0, array5.Length);
        } catch (CryptographicException arg8) {
            return;
        }
    }
}
```
**Location:** `HttpProxy\FbaModule.cs`

### Login Process
- **Padding Error Handling:**
  - Differentiates between login success and failure based on padding errors.
  - Example URLs:
    - `/logon.aspx?reason=2` (Login Failure)
    - `/logon.aspx?reason=0` (Login Success)

### XSS and Cookie Theft
- **Challenges:**
  - Sensitive cookies are protected by the `HttpOnly` flag.
  - A new XSS vulnerability is discovered to chain together.
- **Steps:**
  - Visit `/foo.gif`
  - Send a response
  - Redirect to an XSS page
  - Set an SSRF cookie

**Demo:**
- [YouTube Demo](https://youtu.be/VuJvmJZxogc)

## ProxyShell
- **Description:**
  - An unauthenticated attacker can execute arbitrary commands on Microsoft Exchange Server through port 443.
  - Chained with three vulnerabilities:
    - **CVE-2021-34473**: Pre-auth Path Confusion leads to ACL Bypass
    - **CVE-2021-34523**: Elevation of Privilege on Exchange PowerShell Backend
    - **CVE-2021-31207**: Post-auth Arbitrary-File-Write leads to RCE

### Explicit Logon Feature
- **Description:**
  - Designed to enable users to open another mailbox/calendar and display it in a new browser window.
  - The Exchange server parses the mailbox address and normalizes the URL internally.

**Example URL:**
```
https://exchange/OWA/PI:EMAIL/Default.aspx
```

### Path Confusion
- **Code Snippet:**
```csharp
protected override UriBuilder GetClientUrlForProxy() {
    string absoluteUri = base.ClientRequest.Url.AbsoluteUri;
    uri = UrlHelper.RemoveExplicitLogonFromUrlAbsoluteUri(absoluteUri, this.explicitLogonAddress);
    return new UriBuilder(uri);
}

public static string RemoveExplicitLogonFromUrlAbsoluteUri(string absoluteUri, string explicitLogonAddress) {
    string text = "/" + explicitLogonAddress;
    if (absoluteUri.IndexOf(text) != -1)
        return absoluteUri.Substring(0, num) + absoluteUri.Substring(num + text.Length);
}
```
**Location:** `HttpProxy\EwsAutodiscoverProxyRequestHandler.cs`

### Exploitation Steps
1. Deliver encoded WebShell payload by SMTP.
2. Launch native PowerShell and intercept the WinRM protocol.
3. Execute commands inside the established PowerShell session.
4. Enjoy the shell.

**Demo:**
- [YouTube Demo](https://youtu.be/FC6iHw258RI)

## Proxy-Related Attacks Summary
- **ProxyLogon:**
  - **CVE-2021-26855**
  - **CVE-2021-27065**
- **ProxyNotFound:**
  - **CVE-2021-28480**
  - **CVE-2021-28481**
- **ProxyToken:**
  - **CVE-2021-33766**
- **ProxyOracle:**
  - **CVE-2021-31195**
  - **CVE-2021-31196**
- **ProxyRelay:**
  - **CVE-2021-33768**
  - **CVE-2021-TBA**
- **ProxyShell:**
  - **CVE-2021-34473**
  - **CVE-2021-34523**
  - **CVE-2021-31207**

### ProxyRelay
- **Description:**
  - A set of authentication bypass attacks that allow an attacker to impersonate any user.
  - **CVE-2021-33768**: Exploit NTLM-Relay to bypass CAS Proxy authentication.
  - **CVE-2021-TBA**: A more fundamental vulnerability reported to MSRC on June 02, 2021.

**Exploit Concept:**
1. Trigger the Printer-Bug on Exchange-A.
2. Relay the NTLM to the FrontEnd of Exchange-B to bypass CAS authentication.
3. Forge the authorization part in EWS to impersonate as any user.

**Mitigations:**
1. Keep Exchange Server up-to-date.
2. Do not expose Exchange Server to the Internet.
3. Stop the Printer Spooler Service.
4. Disable NTLM authentication.
5. Consider moving to Office 365 Exchange Online (as a joke).

**Demo:**
- [To Be Released]

**Thanks!**
- [Blog](https://blog.orange.tw)

**Contact:**
- @orange_8361
- PI:EMAIL