# Finding Unknown Malice in 10 Seconds: Mass Vetting for New Threats at the Google-Play Scale

**Authors:**
- Kai Chen, Chinese Academy of Sciences and Indiana University
- Peng Wang, Indiana University
- Yeonjoon Lee, Indiana University
- XiaoFeng Wang, Indiana University
- Nan Zhang, Indiana University
- Heqing Huang, The Pennsylvania State University
- Wei Zou, Chinese Academy of Sciences
- Peng Liu, The Pennsylvania State University

**Link:**
[https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/chen-kai](https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/chen-kai)

**Conference:**
Proceedings of the 24th USENIX Security Symposium
August 12â€“14, 2015, Washington, D.C.
ISBN 978-1-939133-11-3

## Abstract

The vetting process for app markets must be both scalable and effective. However, current mechanisms are often slow and struggle to detect new threats. Our research leverages the common practice of repackaging legitimate apps with malicious components to develop a more robust solution. This approach, called MassVet, can identify suspicious code by comparing a submitted app with those already on the market, focusing on differences between apps with similar UI structures and commonalities among seemingly unrelated apps.

MassVet is built on an efficient similarity comparison algorithm that maps salient features of an app's UI structure or method control-flow graph to a value for fast comparison. We implemented MassVet over a stream processing engine and evaluated it on nearly 1.2 million apps from 33 global app markets, achieving a vetting time of under 10 seconds with a low false detection rate. MassVet outperformed all 54 scanners on VirusTotal (e.g., NOD32, Symantec, McAfee) in terms of detection coverage, identifying over a hundred thousand malicious apps, including potential zero-day malware and apps installed millions of times.

## 1. Introduction

The rapid growth of Android devices has led to a vibrant application ecosystem, with millions of apps available on various markets such as Google Play, Amazon Appstore, and Samsung Galaxy Apps. However, this ecosystem is plagued by Android malware, which often disguises itself as useful programs through repackaging. Countering this threat primarily relies on the vetting processes of app markets, but current methods face significant challenges.

### Challenges in App Vetting

Today's app markets use vetting processes to screen uploaded apps for suspicious activities. For example, Google Play uses Bouncer, a security service that scans apps for known malicious code and executes them in a simulated environment to detect hidden behavior. However, static analysis fails to catch new threats, while dynamic analysis can be circumvented by apps that fingerprint the testing environment. Additionally, dynamic analysis is resource-intensive and may not explore all execution paths.

Recent research has proposed new vetting techniques to capture new apps associated with known suspicious behaviors, such as dynamic loading of binary code and component hijacking. These approaches involve heavyweight information-flow analysis and require heuristics to characterize known threats. They also need dynamic analysis, human intervention, and emulators, which can be detected and evaded by malware. Furthermore, these techniques have not been tested at market scale, and their performance is not well understood.

### Catching Unknown Malice

Most Android malware is repackaged, with authors attaching the same attack payload to different legitimate apps. This practice makes the malware stand out from other repackaged apps, which typically only include advertising libraries. As a result, similar code appears in unrelated apps, indicating the presence of malicious components.

This observation presents a new opportunity to catch malicious repackaged apps without using heuristics to model their behavior. By comparing the code of related and unrelated apps, we can identify suspicious code segments. These segments, once found to be inexplicable, are almost certainly malicious.

### Mass Vetting at Scale

Based on this idea, we developed MassVet, a highly scalable vetting mechanism for detecting repackaged Android malware. MassVet does not use malware signatures or models of expected malicious operations but instead relies on the features of existing apps on the market to vet new ones. To inspect a new app, MassVet performs a highly efficient DiffCom analysis, which compares the app against the entire market. Any related app is quickly identified from the structural similarity of their user interfaces. A differential analysis is then performed on apps with similar UI structures, and an intersection analysis is conducted on apps with different structures. Suspicious code components are further inspected to remove common code reuses and collect evidence of security risks before raising a red flag.

### Supporting Techniques

MassVet is supported by high-performance view/code comparison techniques. We project salient features of an app's view graph (interconnections between user interfaces) to a single dimension using a unique index, called v-core. The v-cores of all apps on the market are sorted to enable a binary search during the vetting of a new app, making the process highly scalable. We also apply this technique to find common methods across different apps, using a similar index called m-core.

### Our Findings

We implemented MassVet on a cloud platform and evaluated it on nearly 1.2 million real-world apps from 33 global app markets. Our study shows that MassVet vetted apps within ten seconds, with a low false positive rate. From the 1.2 million apps, MassVet discovered 127,429 malware, including at least 20 likely zero-day malware and 34,026 missed by most VirusTotal scanners. MassVet achieved better detection coverage than any individual scanner on VirusTotal, such as Kaspersky, Symantec, and McAfee. Other highlights include the discovery of malicious apps in leading markets (30,552 from Google Play) and insights into Google's strategies to remove malware and the countermoves of malware authors.

### Contributions

- **New Techniques:** We developed a novel mass vetting approach that detects new threats using the code of existing apps on the market. The innovative DiffCom analysis exploits the unique features of repackaged malware, catching malicious apps even when their behavior has not been profiled. This analysis is made scalable by its simple, static nature and feature projection techniques.
- **New Discoveries:** We implemented MassVet and evaluated it on nearly 1.2 million apps, a scale unparalleled in prior studies. Our system captured tens of thousands of malware, including those missed by existing scanners, and achieved higher detection coverage than popular malware scanners. Some malware had over a million installs, impacting hundreds of millions of mobile devices. Our study also provided insights into the effectiveness of Google Play's screening and the tactics of malware authors.

## 2. Background

### Android App Markets

Publishing an app on a market involves an approval process for quality control, censorship, and security protection. Since 2012, Google Play has used Bouncer, which has reduced malware to about 0.1% of all apps. However, Bouncer can be circumvented by apps that fingerprint their simulators. Third-party markets, such as Mumayi, AnZhi, and Baidu, have been found to be riddled with malware.

### Attempts to Enhance Vetting Mechanisms

Enhancing secure vetting mechanisms often relies on conventional malware detection techniques, such as VetDroid, which track information flows and model malicious behavior. However, these approaches are less effective when the malware's behavior is unclear and are often resource-intensive, making them impractical for large-scale vetting.

### Repackaging

App repackaging modifies an existing app to add new functionalities before redistribution. According to Trend Micro, nearly 80% of the top 50 free apps on Google Play have repackaged versions. Repackaged apps are built for advertising revenue or distributing malware. Malware authors leverage popular legitimate apps to distribute their payloads, as repackaging saves effort and allows them to free-ride on the app's popularity. Research shows that about 86% of Android malware is repackaged, with a prominent feature being the preservation of the original user interfaces.

### Scope and Assumptions

MassVet is designed to detect repackaged Android malware. We do not consider cases where the malware author deeply integrates the payload into the app, requiring extensive understanding of the legitimate app. MassVet can handle typical code obfuscation but assumes the code has not been heavily modified.

---

This revised version aims to provide a clear, coherent, and professional presentation of the research, highlighting the key points and contributions.