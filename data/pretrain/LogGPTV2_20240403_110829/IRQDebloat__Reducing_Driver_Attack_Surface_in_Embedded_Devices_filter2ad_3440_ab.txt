to technically sophisticated users who need to deploy
embedded or IoT devices and wish to modify the ﬁrmware
without cooperation from the original ﬁrmware provider (in
particular, we do not assume that the user has access to the
source code for the ﬁrmware or a data sheet for the SoC).
Examples of such users include businesses and government
agencies, who typically cannot request custom changes from
III. DESIGN
Figure 2 shows the high-level design of our system. In the
initial stage, we capture a snapshot of the embedded device’s
CPU and memory state, and migrate it into a full-system
emulator (PANDA [21]). Then, in PANDA, we trigger an inter-
rupt and then fuzz the memory-mapped I/O (MMIO) registers
to collect traces. Next, to discover individual handlers, we
analyze the collected traces with differential slicing [29]. A
given handler can be disabled by patching the ﬁrmware to
replace the handler with a no-op function, which effectively
causes the ﬁrmware to ignore input from that peripheral.
Once the candidate handlers have been identiﬁed, the one
corresponding to undesired functionality can be identiﬁed by
a process of elimination: we can disable them one by one
and boot the device to see if the undesired functionality has
been disabled. When the peripheral’s handler is identiﬁed and
disabled, the attack surface from the peripheral’s driver code
is effectively closed off from the outside world.
A. Challenges
IRQ handler identiﬁcation in ﬁrmware is not easy. Chal-
lenges arise from both the general difﬁculty of binary analysis
as well as particular code patterns found in operating systems’
implementations of IRQ handling.
1) Hardware Diversity: The ﬁrst challenge is the diver-
sity of interrupt controller hardware in embedded systems.
Although there are some standards (e.g., the ARM Generic
Interrupt Controller (GIC) speciﬁcation [7] or the Nested
Vectored Interrupt Controller (NVIC) [6]), vendors are free
to ignore them (and many do). In our evaluation, we found
that of the seven tested devices only one exclusively used the
standard ARM GIC. As each interrupt controller can deﬁne
its own protocol for tasks like retrieving the current interrupt
number or acknowledging an interrupt, our analysis must be
agnostic to particular interrupt controller hardware.
The need to be agnostic to different interrupt controllers
poses some challenges for our analysis. For example, during
the course of normal interrupt handling the OS will generally
acknowledge the interrupt, which tells the interrupt controller
to stop signaling a pending IRQ to the CPU. However, since
the protocol for interrupt acknowledgment is not standardized,
our emulator does not know when to stop signaling a pending
IRQ, which can be problematic for some operating systems,
including VxWorks. We develop a set of heuristics for de-
termining when we should mark an interrupt as ﬁnished that
allow IRQDebloat to explore the handlers through fuzzing.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1610
Fig. 2. Top-level workﬂow
2) Binary Analysis: Accurately identifying interrupt han-
dlers without symbol
information is a challenging binary
analysis problem that currently relies on manual reverse
engineering. From the perspective of the operating system,
interrupt handlers are normally wrapped inside device-speciﬁc
data structures with dynamically registered function pointers,
and the handler dispatching routines make heavy use of loops
to fetch device-speciﬁc register values and to match against
the registered device drivers. For devices that require extra
controllers, such as GPIO or I2C devices, similar dispatching
subroutines may be chained under a top-level dispatching entry
that binds the handler to the corresponding IRQ register values.
In addition, some embedded operating systems such as RiscOS
make heavy use of handwritten assembly code, which can
break binary analysis heuristics such as function identiﬁcation.
This pervasive use of function pointers, nested loops, and
chained handlers poses a signiﬁcant challenge for automated
static binary analysis.
Listing 1 shows an example of a GPIO interrupt dispatch
routine in the Linux drivers for the Romulus BMC platform.
First, the top-level IRQ status register (AVIC IRQ STATUS)
must return 0x00100000 to enter the chained GPIO bus
interrupt handler. Then aspeed_gpio_irq_handler is
invoked to dispatch to the registered device interrupt handlers
(keyboard and sysfs) based on the GPIO controller register
values. The number of loops (banks) could go as high as 8,
while every internal loop (for_each_set_bit) checks all
32 bits with the actual registered devices.
To help address the challenges of binary analysis, our trace
analysis augments the static information from the binary with
dynamic information collected from traces.
Listing 1 Linux GPIO driver code for Romulus BMC.
static void aspeed_gpio_irq_handler(
struct irq_desc *desc
) {
...
banks = DIV_ROUND_UP(gpio->chip.ngpio, 32);
for (i = 0; i irq.domain, i * 32 + p);
generic_handle_irq(girq);
}
}
...
}
3) Fuzzing Challenges: To make use of dynamic informa-
tion during trace analysis, we collect traces by fuzzing the
memory-mapped I/O values returned by peripherals on the
embedded system in order to explore the IRQ handling code
of the operating system. However, we cannot simply use an
off-the-shelf fuzzer for this, as the code patterns involved in
embedded IRQ handling are problematic for standard fuzzing
techniques.
An example of a problematic code pattern taken from the
Linux kernel code for the Samsung Exynos 4210-based NURI
platform is given in Listing 2. During interrupt handling, the
OS updates the system timer. However, the code to read from
the timer repeatedly reads from the same 32-bit memory-
mapped register (EXYNOS4_MCT_G_CNT_U) and cannot pro-
ceed until it reads the same value twice in a row. For a fuzzer
that generates random values, the probability of generating the
same 32-bit value twice in a row is low (≈ 2−16), so the timer
update function impedes fuzzer progress.
To address this challenge we introduce a set of fuzzing
techniques that are tailored speciﬁcally to the patterns we ﬁnd
in IRQ handling code. This includes systematic exploration of
common representations for IRQ numbers, and a “consistent
I/O” mode that remembers the most recent value generated
for a particular MMIO address and probabilistically returns
the same value for future reads.
Listing 2 Nuri Linux timer register access
static cycle_t exynos4_frc_read(struct clocksource *cs)
{
unsigned int lo, hi;
u32 hi2 = __raw_readl(reg_base + EXYNOS4_MCT_G_CNT_U);
do {
hi = hi2;
lo = __raw_readl(reg_base + EXYNOS4_MCT_G_CNT_L);
hi2 = __raw_readl(reg_base + EXYNOS4_MCT_G_CNT_U);
} while (hi != hi2);
return ((cycle_t)hi << 32) | lo;
}
B. Snapshot Collection
Our prototype can use JTAG, an emulator like QEMU (if
there is support for the target platform), or code running on
the device (i.e., a kernel module) to collect snapshots. We
collect physical memory and registers from the device, and
load them into PANDA to continue emulation. Running the
ﬁrmware in PANDA gives us the ability to control low level
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1611
Deploy ModiﬁedFirmwareTrace AnalysisBinary PatchingEmulate IRQSnapshot Embedded DeviceDiﬀ AnalysisInstrumentationIRQ RemovalTraceTraceTracePostdominator AnalysisPostprocessingMonitoring…hardware behaviors (i.e., triggering interrupts) and monitor
the execution environment at the same time. We are able to
simulate interrupts and provide responses to MMIO reads,
while inspecting processor states and collecting full execution
traces.
C. Trace Collection
Once the snapshot is loaded into PANDA, the trace col-
lector triggers an interrupt in the emulator, which causes the
emulated CPU to switch into IRQ mode and jump to the
architecture-deﬁned entry point for interrupt handling. From
there, we log the address of every basic block executed by
PANDA. Whenever the ﬁrmware reads from a memory address
outside of RAM, we supply a fuzzed MMIO value. After
tracing is complete, we reset the emulator state and try another
sequence of fuzzed MMIO values.
One challenge we face is deciding when to terminate tracing
for a particular execution. Intuitively, we want the trace to
be long enough to capture the execution of the handler for a
particular IRQ, but short enough to allow performant fuzzing.
Tracing until the CPU leaves IRQ mode is one approach
that seems intuitively appealing, but in practice we ﬁnd that
some operating systems (including FreeBSD, VxWorks and
Linux) leave IRQ mode well before they actually execute any
handlers. Moreover, because many of the values we provide
via MMIO are outside the range that actual hardware could
produce, some traces may get stuck in inﬁnite loops or trigger
crashes or other errors in the emulated ﬁrmware.
Leaving IRQ mode is also problematic because, as men-
tioned above, we do not know when we should acknowledge
the interrupt (i.e., clear the IRQ pending ﬂag in the emulator).
If an operating system re-enables interrupts before executing
the actual IRQ handler, this will cause execution to repeatedly
return to the top-level handler without making any progress.
As a workaround, we acknowledge the interrupt after 10 basic
blocks of code are executed in the emulator.
We impose a maximum trace length of 100,000 basic blocks
during tracing so that we can make forward progress in
exploration. Empirically, we have found that this threshold is
sufﬁcient to discover valid handlers, and allows the fuzzing
stage to complete relatively quickly.
D. IRQ Fuzzing
During fuzzing, IRQDebloat attempts to enumerate the IRQ
handlers on the system by triggering an interrupt and then
responding to MMIO reads with values that are likely to be
interpreted as different IRQ numbers by the ﬁrmware. This can
be considered a type of fuzzing; however, the goal is not to
uncover bugs but rather to simply explore the space of possible
handlers. We assume that any memory read that falls outside
of the RAM region should be treated as MMIO, and provide
fuzzed values. MMIO writes are silently ignored.
Our
IRQ fuzzer component uses a coverage-guided,
generation-based approach. Within each generation we start
with a set of seeds (initially empty) where each seed s =
{v1, v2, ..., vk} is a sequence of MMIO values. We form new
candidate seeds by adding new MMIO values vk+1 to s from
the patterns described in Section III-D1 to get s(cid:48) = s(cid:107){vk+1}.
We then use the trace collector to check if this new seed s(cid:48)
uncovers any new code; if so, we add it to seeds and save
the trace for further analysis. After each trace we reset the
emulator to the snapshot state. A pseudocode version of this
algorithm can be found in Appendix C.
If the provided sequence of MMIO values is exhausted
during tracing before the trace length limit is reached, we
return random MMIO values. During this stage, we can
optionally enable a consistent I/O mode. In this mode, the
values returned for a particular MMIO address will, with a
conﬁgurable probability (currently 80%), have the same value.
This is needed because some drivers (such as the timer in
Listing 2) repeatedly poll a memory-mapped I/O address and
check whether the value seen is the same, presumably as a
workaround for spurious values returned by the hardware.
1) Fuzzing Patterns: Because there is a great deal of
diversity in embedded interrupt controllers, we adopt a hybrid
fuzzing strategy that tries common patterns used by known
interrupt controllers as well as random values. We developed
these patterns based on manual exploration of three initial
targets (the Raspberry Pi, BeagleBone, and Romulus) and
found that they worked well on the remaining targets in our
evaluation set; we therefore expect that these patterns will
generalize well to other embedded devices.
We implemented four patterns for MMIO inputs:
• ints provides integers i : i ∈ 1..255 ; this enumerates
possible IRQs for controllers that store pending interrupts
as an integer.
• bitwin provides a sliding window of k one bits in each
possible bit position, for k : k ∈ {1, 2, 3, 4} ;
this
enumerates possible IRQ numbers on controllers that
indicate pending IRQs in a 32-bit bitset.
• random provides randomly chosen 32-bit values.
• pattern provides constants like 0, -1, 0xf0f0, etc.
These patterns are designed to give the fuzzer the beneﬁt of
domain knowledge (with the ints and bitwin patterns) while
providing enough randomness to generalize well outside of
what we have seen before (random and pattern). We show in
Section V-B that these strategies are sufﬁcient to thoroughly
explore seven different models of interrupt controller across
multiple operating systems.
E. Trace Preprocessing
Our coverage-guided fuzzing allows us to fully explore
different branches in the IRQ dispatching, but
the traces
obtained are somewhat noisy. During interrupt handling, op-
erating systems may take the opportunity to do other book-
keeping such as updating timers, incrementing performance
counters, etc. Moreover, the fuzzer will produce many I/O
values corresponding to invalid IRQs, so many of our traces
will include error handling code and debug messages (which
may include interactions with other peripherals like the serial
UART).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1612
In the trace preprocessing stage, we attempt to eliminate
common sources of noise in two ways. First, we attempt
to identify the subset of I/O sequences from fuzzing that
relate to the interrupt controller. Starting from the collected IO
sequences from the fuzzing stage, we regroup the IO sequences
into small decoupled sequences, deterministically replay the
IO sequences, and use these replayed traces for the differential
analysis. To decouple the IO sequences, we keep a stack
structure for MMIO addresses by pushing new IO addresses,
and popping the stack until an already seen MMIO address is
out. We log the stack at the same time, as it should represent
the IO sequences in one loop/IRQ dispatch. The assumption
is that the IO addresses related to IRQ handling are only read
once during the time of processing one IRQ exception. In the
rare case that an MMIO address is read multiple times during
one interrupt, we merge the IO sequences with same MMIO
address when they also have the same recorded IO value.
Second, we deduplicate traces by computing a hash of the
sequence of basic block addresses in each trace. Since our
trace alignment operates on pairs of traces, the amount of time
needed grows as the square of the number of traces; thus, it
is important to remove redundant traces. In our experiments,
deduplication typically reduces the size of the trace dataset
from thousands of traces to a few hundred.
F. Trace Analysis
We adapt the trace alignment algorithm from differential
slicing [29] (which in turn is based on execution indexing [48])
to analyze the collected traces in order to infer the different
IRQ handlers. The intuition is that since all the IRQ interrupts
have the same entry point, they should share a common trace
preﬁx before diverging at certain point into device speciﬁc
code. By comparing pairs of traces from the fuzzing process,
we can eventually ﬁnd all the IRQ-speciﬁc divergences.
We found that the standard differential slicing algorithm
required several modiﬁcations to make it suitable for analyz-
ing whole-system traces from IRQ processing on embedded
devices. We detail these changes in Section IV-D.
G. Instrumentation
Our instrumentation engine aims to be agnostic to the binary
target ﬁle format. To achieve this, we use the memory and
CPU dump (in order to identify where the code will be loaded
at runtime), the list of handlers to disable, and the target
binary to instrument. To actually disable an IRQ, we overwrite
the handler with a dummy function that bypasses the actual
handling code and returns immediately. At the moment, this
still requires a small amount of manual reverse engineering to
identify the correct return value for IRQ handlers on each OS.
To patch the handlers, we ﬁrst translate the virtual address
of the handler into a physical address. Next, for every patch
point, we extract a small amount of data around the physical
address from the memory dump to form a signature. Using this
signature, we search through the kernel binary for a matching
offset so we can statically instrument it. Although this ap-
proach is unlikely to generalize to cases of packed ﬁrmware,
we consider the general problem of ﬁrmware unpacking and
modiﬁcation to be outside the scope of this paper.
IV. IMPLEMENTATION
In this section we describe our implementation of IRQDe-
bloat in more detail. The fuzzing component of IRQDebloat
consists of around 700 lines of C/C++ code in the form
of plugins for the PANDA dynamic analysis platform [21].
The trace processing and binary analysis is implemented as a
Binary Ninja plugin in 1100 lines of Python, and the ﬁrmware
patching is implemented with 300 lines of Python.2
A. Snapshot Collection
Our snapshot implementation currently supports JTAG, live
system dump, and QEMU-based snapshot acquisition for 32-
bit ARM and MIPS platforms. It acquires snapshots using
either a patched OpenOCD 0.10.0 (in the case of JTAG),
a patched LiME [3] kernel module, or gdb in the case of
QEMU.
Correctly restoring a snapshot in the emulator also requires
that we collect all CPU registers needed for full system
execution. This can be challenging on architectures like ARM,
which uses banked registers (i.e., some registers have different
values that are saved and restored depending on the CPU
mode). We modiﬁed OpenOCD to capture banked registers
by setting the CPU’s mode (using the status bits in the CPSR
register) to each of the available modes, and then dumping
the registers from that mode. We also need to collect many
coprocessor registers. Due to space constraints, the full list
of registers we collect for ARM and MIPS can be found in
Appendix A.
To dump physical memory, we modiﬁed OpenOCD’s
dump_image command to use physical rather than virtual
addresses. For QEMU we use the pmemsave command in
the QEMU monitor. And to dump memory on a live system,
we rely on the LiME kernel module [3]. Dumping physical
memory requires that we know the start and size of RAM for
the embedded device. However, this information can usually
be obtained via JTAG or QEMU’s info mtree command.
B. Trace Collection
To collect
traces, we created an empty machine model
for PANDA that has an ARM or MIPS CPU, no pe-
ripherals, and a block of RAM at a conﬁgurable address
and size. We implemented a PANDA plugin that
loads a
saved snapshot and triggers an interrupt (using QEMU’s
cpu_interrupt function). From there, the fuzzing plu-
gin forks child processes, generates the fuzzed values in
response to MMIO reads by registering a callback for
PANDA_CB_UNASSIGNED_IO_READ, and reports informa-
tion about basic block coverage. For embedded devices that
have MMIO regions that overlap with RAM, we could modify
the machine model to create an I/O memory region at the
appropriate location; however, we have not encountered this
case in our testing.
2Source line counts generated using David A. Wheeler’s ‘SLOCCount’.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:44 UTC from IEEE Xplore.  Restrictions apply. 
1613
C. Trace Analysis
1) Preprocessing: As described in Section III-E, we prepro-
cess traces by deduplicating them using the hash of the basic
block sequence, and minimizing them to create shorter traces
that contain, to the extent possible, only the IRQ handling
code.
We also automatically infer a list of potential I/O addresses
that correspond to polling loops, such as those used by timers
and UARTs. These inferred I/O addresses will be ignored