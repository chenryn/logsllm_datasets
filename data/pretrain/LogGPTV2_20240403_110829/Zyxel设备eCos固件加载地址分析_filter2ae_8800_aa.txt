# Zyxel 设备 eCos 固件加载地址分析

##### 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 前言
在最近对某型号 Zyxel 设备的固件进行分析时，发现该固件无法通过 binwalk 等工具直接提取。根据 binwalk 提示信息，推测该设备使用的是 eCos 实时操作系统，其固件为一个单一大文件。由于不知道具体的加载地址，在使用 IDA 等工具进行逆向分析时，无法建立正确的交叉引用，导致逆向过程较为复杂。鉴于网络上关于 eCos 固件分析的相关资料较少，且缺乏相关芯片文档或 SDK 手册的情况下，我们尝试从固件本身入手，通过对固件的简单分析来寻找固件中引用的固定地址，最终确定了该固件的加载地址。

## binwalk 分析
首先使用 binwalk 工具对该固件进行初步分析，命令如下：

```bash
$ binwalk RGS200-12P.bin 
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
128           0x80            eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
5475588       0x538D04        Unix path: /home/remus/svn/ivs/IVSPL5-ZyXEL_New/src_0603/build/../build/obj/ecos/install/include/cyg/libc/stdlib/atox.inl
5475653       0x538D45        eCos RTOS string reference: "ecos/install/include/cyg/libc/stdlib/atox.inl"
...
```

从输出结果可以看到许多与 eCos 相关的字符串，其中 `"eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200"` 指出了该文件的架构（MIPSEL）和异常向量表基地址（0x80000200）。

尝试使用 IDA 加载该文件并设置架构为 mipsel、加载地址为 0x80000200 后，发现没有识别出任何函数，整个段落处于未探索状态，这表明加载地址可能不正确。通常判断加载地址是否正确的方法包括：成功识别出的函数数量以及正确的字符串交叉引用数量。

## bare-metal firmware 加载地址分析
对于裸机固件（bare-metal firmware），为了确定其加载地址，一般可以通过查询对应的芯片文档或 SDK 手册等资料，获取内存空间映射分布。例如，在某些 ARM 架构的裸机固件中，可以通过中断向量表来推测加载地址。中断向量表中的前两项分别为初始 SP 值和复位地址，后者是设备上电/重置时开始执行的地址，据此可以推测可能的加载地址。

在缺少相关文档的情况下，可以从固件本身出发，通过分析固件中的一些特征来推测可能的加载地址。例如，Magpie 通过识别 ARM 固件中的函数入口表，并基于这些地址来推测加载基址；limkopi.me 则通过查找指令中引用的固定地址，成功试出了某个 eCos 固件的加载地址。这两种方法的核心都是寻找固件中存在的固定地址（绝对地址），因为即使加载地址不正确，这些地址也不会改变。

## eCos 固件加载地址分析
binwalk 工具的输出结果显示了 `"eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200"`。查看 binwalk 中 eCos 对应的 magic 文件，可以看到 binwalk 在该固件中匹配到了一些特定模式。

```plaintext
# eCos kernel exception handlers
#
# mfc0    $k0, Cause       # Cause of last exception
# nop                      # Some versions of eCos omit the nop
# andi    $k0, 0x7F
# li      $k1, 0xXXXXXXXX
# add     $k1, $k0
# lw      $k1, 0($k1)
# jr      $k1
# nop
0       string      \x00\x68\x1A\x40\x00\x00\x00\x00\x7F\x00\x5A\x33    eCos kernel exception handler, architecture: MIPSEL,
>14     leshort     !0x3C1B                                             {invalid}
>18     leshort     !0x277B                                             {invalid}
>12     uleshort    x                                                   exception vector table base address: 0x%.4X
>16     uleshort    x                                                   \b%.4X
```

使用 IDA 加载该文件并将架构设为 mipsl、加载地址设为 0x80000000 后，在最开始处将代码转换为汇编指令，可以看到熟悉的 `eCos kernel exception handler` 代码段，其中包括一个固定地址 0x80000200。由于该固件文件较大（约 10MB），仅凭单一地址猜测加载地址比较困难。因此，需要查找更多的固定地址以及更规律的地址来缩小加载地址的范围。

> 由于对 eCos 系统不熟悉，最初误以为加载地址可能位于 0x80000000~0x80000200 之间，后来发现这种假设并不正确。
  
```assembly
ROM:80000000  # Segment type: Pure code
ROM:80000000                 .text # ROM
ROM:80000000                 mfc0    $k0, Cause       # Cause of last exception
ROM:80000004                 nop
ROM:80000008                 andi    $k0, 0x7F
ROM:8000000C                 li      $k1, unk_80000200
```

通过进一步分析更多固定的地址和模式，最终确定了正确的加载地址。