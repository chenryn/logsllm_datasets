Connect是在OAuth的基础上扩展的专用身份和认证层，添加了一些可以更好地支持OAuth的认证的简单功能，OAuth最初并不是用来实现认证机制而是授权资源的访问权限的，后来有人错用于认证，在授予访问权限时默认在OAuth一端进行了认证，但是毕竟不是专门为认证设计的，所以设计了OpenID
Connect，它使通过OAuth进行认证的方式更加可靠和统一
###  OpenID Connect是如何运作的？
OpenID
Connect是在基础的OAuth之上进行扩展的，从客户端应用程序角度来看，主要区别在于存在一个额外的，标准化的范围集，以及一个额外的响应类型：id_token
**OpenID Connect角色**
OpenID Connect角色与标准OAuth的角色区别在于规范使用的术语略有不同
  * 依赖方(正在请求用户身份验证的应用程序，等同于客户端应用程序)
  * 最终用户(正在进行身份验证的用户，等同于OAuth资源所有者)
  * OpenID提供者(配置为支持OpenID Connect的OAuth服务)
**OpenID Connect权限声明和范围**
权限声明指表示资源服务器上用户信息的key:value对，所有OpenID Connect服务使用相同的作用域集，为了使用OpenID
Connect，客户端应用程序必须在授权请求中指定范围openid，然后可以包括一个或多个其他标准范围，这些范围中每个范围都对应OpenID规范中定义的有关用户声明的子集的读取访问权限
###  ID令牌(Token)
OpenID Connect提供的另一个主要附加功能是id_token响应类型，返回的是一个带有json web signature(JWS)的JSON
web
token(JWT)，JWT包含基于最初请求的范围的声明列表、OAuth服务上次对用户进行身份验证的方式和时间，客户端应用程序可以使用它来确定用户时候已被充分认证，使用id_token的主要好处就是减少了客户端应用程序和OAuth服务之间需要发送的请求数量，这可以总体上提供更好的性能，无需获取访问令牌然后分别请求用户数据，包含此数据的ID令牌在用户进行身份验证后立即发送到客户端应用程序，ID令牌中传输的数据的完整性是基于JWT密码签名，虽然这样会防止一些中间人攻击，但是因为用于签名验证的加密密钥是通过同一通道传输的(有时候会暴露在/.well-known/jwks.json中)，所以仍然可能出现某些攻击，OAuth支持多种响应类型，所以客户端应用程序可以发送具有基本OAuth响应类型和OpenID
Connect的id_token响应类型的授权请求，例如
    response_type=id_token token
    response_type=id_token code
此时ID令牌和授权码或者访问令牌会同时发送到客户端应用程序
###  识别OpenID Connect
最简单的办法是查找强制性的openid范围，即使登录过程可能没有使用OpenID
Connect，但是也要检查OAuth服务是否支持它，可以通过添加openid范围或将响应类型更改为id_token并观察是否会触发报错，最好查看文档以了解有用信息，还可以通过从标准端点/.well-known/openid-configuration访问配置文件
###  OpenID Connect漏洞
**未受保护的动态客户端注册**
OpenID规范概述了允许客户端应用程序向OpenID提供程序注册的标准化方法，如果支持动态客户端注册，则客户端应用程序可以向专用/registration端点发送POST请求，通常配置文件和文档中会提供该端点的名称，在请求正文中，客户端应用程序以JSON格式提交有关自身的关键信息，如经常需要包括列入白名单的重定向URI的数组，还可以提交一系列其他信息，如要公开的端点的名称，应用程序的名称等，burp给出了一个示例
    POST /openid/register HTTP/1.1
    Content-Type: application/json
    Accept: application/json
    Host: oauth-authorization-server.com
    Authorization: Bearer ab12cd34ef56gh89
    {
      "application_type": "web",
      "redirect_uris": [
        "https://client-app.com/callback",
        "https://client-app.com/callback2"
        ],
      "client_name": "My Application",
      "logo_uri": "https://client-app.com/logo.png",
      "token_endpoint_auth_method": "client_secret_basic",
      "jwks_uri": "https://client-app.com/my_public_keys.jwks",
      "userinfo_encrypted_response_alg": "RSA1_5",
      "userinfo_encrypted_response_enc": "A128CBC-HS256",
      …
    }
有些OAuth提供程序允许动态客户端注册而无需任何身份验证，攻击者就可以注册自己的恶意客户端应用程序，里面有些属性可以当做URI来控制，可能导致二阶SSRF漏洞
**配套靶场：通过Open ID动态客户端注册的SSRF**
首先进入OpenID的配置文件/.well-known/openid-configuration
从配置文件我们可以看到很多端点以及支持的授权类型和可使用的签名算法，然后我们得知注册客户端的端点是/reg，于是我们以这样的示例构造请求包
    POST /reg HTTP/1.1
    Host: YOUR-LAB-OAUTH-SERVER.web-security-academy.net
    Content-Type: application/json
    {
      "redirect_uris" : [
        "https://example.com"
      ]
    }
发送以后，发现不需要进行验证就注册成功了，并将相关信息反馈在了响应中，包括我们注册成功以后的客户端ID，经过对所有触发的HTTP请求的观察发现，在请求用户是否同意授权的时候会利用img标签加载一个图片资源
我们在HTTP
History会发现加载图片资源的请求，然后给我们可以通过logo_uri指定其加载图片资源的来源，于是我们对/reg请求包进行修改，示例如下
    POST /reg HTTP/1.1
    Host: YOUR-LAB-OAUTH-SERVER.web-security-academy.net
    Content-Type: application/json
    {
      "redirect_uris" : [
        "https://example.com"
      ],
      "logo_uri" : "https://YOUR-COLLABORATOR-ID.burpcollaborator.net"
    }
测试的时候推荐使用burp
collaborator来接收请求，发送请求以后重新注册的客户端的logo地址就会被替换为我们指定的地址，于是我们从响应中复制出新的client_id替换到加载logo的请求URL中
我们看到burp
collaborator是可以接收到请求的，说明这个点可以向任意来源发出请求，于是我们将logo_uri替换为题目中的目标URL重新注册客户端，然后再用新的client_id加载logo资源成功获得目标字符串
**允许通过引用授权请求**
某些服务器可以有效地验证授权请求中的查询字符串，但可能无法将相同的验证充分应用于JWT中的参数，包括redirect_uri，可以在配置文件和文档中查找request_uri_parameter_supported选项以确定是否支持这个参数，也可以添加request_uri参数观察它是否有效，有时候可能未在文档中提及此功能，但是却支持该功能
## 如何缓解OAuth认证漏洞？
###  对于OAuth服务提供者
**要求客户端应用程序注册有效的redirect_uri白名单**
尽可能使用严格的逐字节比较来验证所有传入请求中的URI，仅允许完全匹配而不是模式匹配，这样可以防止攻击者访问列入白名单的域中的其他页面
**强制使用参数state**
还应通过包含一些不可预测的特定于会话的数据(如对会话cookie做取hash值)并将其值绑定到用户的会话，这有助于保护用户免受类似CSRF的攻击，这也使攻击者更难使用任何被盗的授权码
**确保访问令牌发放给发出请求的同意client_id**
还应检查请求的范围，以确保它与最初授予令牌的范围匹配
###  对于OAuth客户端应用程序
**确保完全了解OAuth工作原理的详细信息**
许多漏洞都是由于对每个阶段确切发生的情况以及如何利用这些潜在原因的简单了解导致的
**使用state参数**
**将redirect_uri参数同时发送到/authorization端点和/token端点**
**使用PKCE(RFC7638)机制提供额外的保护**
开发移动或本地桌面OAuth客户端应用程序时，通常无法将client_secret保持私有，PKCE(RFC7638)机制可以防止代码被拦截或泄漏
**在使用OpenID Connect id_token时，确保正确验证JSON Web签名(JWS)，JSON Web加密(JSE)和OpenID规范**
**留意授权码**
加载外部图像、脚本或CSS内容时，授权码可能通过Referer头泄漏
## 总结
以上就是梨子带你刷burpsuite官方网络安全学院靶场(练兵场)系列之高级漏洞篇 –
OAuth2.0认证漏洞专题的全部内容啦，本专题主要讲了OAuth的关键基础原理以及扩展组件、由OAuth机制的缺陷可能产生的漏洞、利用，最后从两个角度介绍了关于这些漏洞的防护建议等，本专题内容较多，请大家耐心阅读并一一动手解题哦，感兴趣的同学可以在评论区进行讨论，嘻嘻嘻。
## 系列结语
至此，梨子带你刷burpsuite官方网络安全学院靶场(练兵场)系列的三个大篇章，共21个专题内容就全部介绍完毕了。这是梨子第一次写文章，而且就完成了整个系列，还是非常有成就感的呢，希望这个系列可以让初学者了解到Web安全的魅力并能够通俗易懂地熟悉常见的Web安全漏洞。梨子建议大家一定要自己注册一个burp账号亲自去做每一道靶场，看每一个知识点，这样对于大家理解是非常有帮助的。21篇文章，内容很多，干货很多，希望大家能够耐心地阅读。梨子非常喜欢交朋友，所以想和梨子交流的可以私信梨子哦。最后，容我在这炫耀一下，本系列共197道靶场，梨子为全球第80个全通的用户，嘻嘻嘻，废话不多说上截图
非常感谢大家的耐心阅读，你们的支持让梨子觉得在安全圈很开心，感谢有你们。