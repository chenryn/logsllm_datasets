by  the  device.  Rather, the device performs each signature 
or decryption operation individually by interacting with the 
server.  This  is  achieved  by  2-out-of-2 function  sharing, 
where  the  function being  shared is  the  device’s signature 
or decryption function.  More precisely, when the device is 
initialized, two shures of the device’s private key are gener- 
ated.  The first share is constructed so that  it can  be gener- 
ated from the user’s password and information stored on the 
device. The second share, plus other data for authenticating 
requests from the device, are encrypted under pk,,,  to form 
the  device’s ticket.  Both  shares are  then  deleted from the 
device. In the device’s signature or decryption protocol, the 
device  sends its  ticket  plus  evidence that  it  was  given  the 
user’s password, the  server verifies  this  using  information 
in the  ticket,  and then  the server contributes its portion  of 
the computation using its share. Together with the device’s 
contribution using its share (generated from the user’s pass- 
word), the signature or decryption can be formed. 
Disabling  the  private  key  skdv,  can  be  achieved  by  re- 
questing  that  the  server  permanently  ignore  the  device’s 
ticket.  Once this is done, further queries by  the attacker- 
specifically,  any  adversary  in  ADV( {dvc, 7ro})-will 
not 
yield  further signatures or decryptions.  Of  course, to pre- 
vent a denial-of-service attack against the device even with- 
out  it  being  stolen, requests  to  disable  the  device’s ticket 
must be authenticated; our protocols achieve this, too.  Our 
protocolsprovably meet all of the goals stated in Section 3.1 
in the random oracle model. 
The feature of key disabling apparently comes with costs 
in  terms  of  compatibility with  existing  protocols.  For ex- 
ample, in  the  signature protocol  we  demonstrate here, the 
server learns  the  message m  being  signed.  It  is  therefore 
important that m be public  information  if the server is un- 
trusted. ‘This requirement is consistent  with  signatures in 
TLS  1.0 1151, for example, since in  that  protocol, parties 
sign  only  public information.  However,  it may  be  incon- 
sistent with other protocols that encrypt private information 
after signing it.  Second, due to our use of function sharing 
in these protocols, they are generally dependent on the par- 
ticular signature or decryption algorithm  in use.  In the fol- 
lowing subsections, we  describe protocols  for RSA signa- 
tures  and ElGamal decryption, though  our techniques also 
generalize to many other signature and decryption schemes. 
5.1. S-RSA: a protocol for RSA signatures 
In  this  section  we  suppose  the  device  signs  using  a 
standard  encode-then-sign RSA  signature  algorithm (e.g., 
“hash-and-sign” [ 141) as described below. Accordingly, we 
refer to this protocol  as S-RSA. The public key of the de- 
vice  is  p k d v c   =    and  the  secret  key  is  skdvc  = 
, where ed -4(,N)  1, N  is the product of two 
large  prime  numbers,  and  4  I S   the  Euler  totient  function. 
(The notation  E ~ ( N )  means  equivalence modulo  c$(N).) 
The device’s  signature on  a  message  m  is  defined  as fol- 
lows,  where  encode  is  the  encoding  function  associated 
with  S ,  and  tcstg denotes the number of  random bits  used 
= 0 for a deterministic 
in the encoding function  (e.g., 
encoding function): 
S  ( m ) :  
t R  ( 0 ,  1 I t i s 2 g  
s t (encode(m, T )
return   
) ~  mod N 
Here, the  signature is  =  ,   though it may  not  be 
necessary  to include T  if it can be determined from m and 
s.  We  remark that  “hash-and-sign’’  is  an  example of  this 
type of signature in which  the encoding function  is simply 
a (deterministic) hash of m, and that PSS [8] is another ex- 
ample of this type of signature with a probabilistic encod- 
ing.  Both  of these types of  signatures were proven  secure 
against adaptive chosen message attacks in the random or- 
acle model [6, 81.  Naturally  any signature of this form can 
be  verified  by  checking that  se  EN encode(m,r).  In  the 
function  sharing primitive used in our protocol, d is broken 
into shares dl and d2  such that dl + d2 ~
~
d [IO]. 
~
(
1
5.1.1. Device initialization 
The inputs to device initialization  are the server’s public en- 
cryption key pk,,,,  the user’s password TO, the device’s pub- 
lic key pkdvc = , and the corresponding private key 
skdvc =  .  The initialization  algorithm pro- 
ceeds as follows: 
t t R  (0, I}” 
‘U  t hdsbl(t) 
7.J  t R  {0,1>” 
(L  t R  {0,1}“ 
b +-  h(7ro) 
dl  +-  f ( v , r o )  
dz  t d - dl  mod 4 ( N )  
T  +-  E p k , , ,  ( )  
Here, we  assume that  f  outputs an  element of  (0, l}XfK. 
The values t ,  U, a ,  r, pkdvc, and pk,,,  are saved on  stable 
storage in the device. All other values, including U ,  b, d, dl, 
dz, $ ( N ) ,  and TO, are deleted from the device. The values t 
and 7-  should be backed up offline for use in disabling if the 
need arises. The value T  is the device’s “ticket” that it uses 
to access the server. 
5.1.2. Signature protocol 
Here we  present  the protocol  by  which  the  device signs a 
message m.  The input provided to the device for this pro- 
17 
tocol is the input password 7r, the message m, and all of the 
values saved on stable storage in the initialization protocol 
of Section 5.1.1.  The protocol is described in Figure 2. 
dvc 
svr 
cryption costs, but also because certain optimizations (e.g., 
Chinese remaindering) that  are typically  applied  for RSA 
signatures cannot be applied in S-RSA. Nevertheless, since 
) ~ ~  mod N  while awaiting 
dvc can compute (encode(m, T )
a  response  from  svr,  a  significant  portion  of  the  device’s 
computation can be parallelized with the server’s. 
5.1.3. Key disabling 
Suppose that  the device has been  stolen, and that the  user 
wishes to permanently disable the private key of the device. 
Provided that the user backed up t and T before the device 
, ~  
was  stolen, the user  can  send  t
to  the  server.  Upon re- 
covering   t Dsk,,, ( T ) ,  the  server verifies 
that  U  = h&bf(t) and, if  so, records  T  on a  disabled  list. 
Subsequently, the server should refuse to respond to any re- 
quest containing the ticket T .  This requires that the server 
store T  (or a hash of it) on a “blacklist”.  Rather than  stor- 
ing T forever, though, the server can discard T  once there is 
no danger that p k d v c   will  be used  subsequently  (e.g., once 
the  public  key  has  been  revoked).  Note that  for  security 
against denial-of-service  attacks  (an  adversary  attempting 
to disable T without t), we do not need h&bl  to be a random 
oracle, but simply a one-way hash function. 
5.2. D-ELG: a protocol for ElGamal decryption 
In  this  section  we  give a protocol  by  which the device 
can perform decryption  with  an  ElCamal  [ 171 private key, 
using  our techniques  to  gain  the  same benefits  as  S-RSA 
yielded  for RSA signatures.  We focus here  on decryption 
(versus signatures), and ElCamal (versus RSA), to demon- 
strate the breadth of cryptographic operations to which our 
techniques apply.  Indeed, protocols for decryption with an 
RSA private key follow naturally from the protocol of Sec- 
tion  5.1.  While protocols  for signature schemes based  on 
discrete logarithms (e.g., DSA [28]) do not immediately fol- 
low from the protocol of this section, they can be achieved 
using more specialized cryptographic techniques, as corol- 
laries of [32]. 
For  ElGamal  encryption,  the  public  and  private  keys 
of  the  device  are  p k d v c   =    and  Skdvc  = 
, respectively, where p is an A-bit prime, g is an 
element of order q in Z;,  z is an element of Z, chosen uni- 
formly at random, and y  = g”  mod p .  For generality (and 
reasons that will become clearer later), we describe the D- 
ELG protocol  using an abstract specification of “ElGamal- 
like” encryption. An ElGamal-like encryption scheme is an 
encryption scheme in which (i) the public and private keys 
are as above; and (ii) the decryption function D can be ex- 
pressed  in the following form: 
18 
77 
c 
f(v17r) 
U + - P @ 7 7  
dl 
s t u(encode(m, T )
abort if se $jv  encode(m, T )  
return  
) ~ ~  mod N 
Figure 2. S-RSA signature protocol 
In Figure 2, /3  is a value that proves the device’s knowl- 
edge of  7r  to the  server.  p  is  a one-time pad by  which the 
server encrypts v to return  it to the device.  T  is  a tci,ig-bit 
value used in the encode function. y is an encryption of m, 
T ,  p and  p  to  securely  transport them to the server.  6  is a 
message authentication code computed using a, to show the 
server that  this  request  originated  from the  device.  As  in 
Section 4, S is not necessary to prove security relative to the 
goals of Section  3. I ,   but nevertheless is important in  prac- 
tice to prevent denial-of-service attacks. It is important that 
the device delete p, d l ,  and p when the protocol completes, 
and to never store them on stable storage. 
The intuition behind the security of this protocol is simi- 
lar to that for the GENERIC protocol. The major difference, 
however, is that only the server’s contribution v to the signa- 
ture of m is returned to the device, not Skdvc (or the server’s 
share of it).  This is  what makes key disabling possible, as 
described in Section 5.1.3. 
The efficiency of the  S-RSA protocol  will  generally be 
worse than  the  signing  efficiency  of  the  underlying  RSA 
signature scheme, not only because of the message and en- 
D 
(c):  abort if valid(c)  = 0 
w t select(c) 
z  t w”  modp 
m  t reveal(z, c) 
return m 
Above, valid(c)  tests the well-formedness of the ciphertext 
c; it returns  1 if well-formed  and 0 otherwise.  select(c) re- 
turns the argument w  that is raised to the x-th power mod- 
ulo p.  reveal(z, c)  generates the plaintext m using  the re- 
sult z  of that computation.  For example, in  original ElCa- 
mal encryption, where q  = p  - 1 and c  =    = 
  for some secret value  k  E  Z,, 
valid()  returns 1 if  c1,c2  E  Z;  and 0 otherwise; 
re- 
select() 
turns c2z-l  mod p.  We  note, however, that the private key 
is not an argument to valid, select,  or reveal; rather, the pri- 
vate key  is  used  only  in  computing z.  Using  this  frame- 
work,  the  D-ELG protocol  is  described  in  the  following 
subsections. We will discuss various EIGamal-like encryp- 
tion functions and their use in this protocol in Section 5.2.4. 
returns  c l ;   and  reveal(z, ) 
5.2.1. Device initialization 
The inputs to device initialization are the server’s public en- 
cryption key pk,,,,  the user’s password TO, the device’s pub- 
lic key Pkdvc  = ,  and the corresponding private 
key Skdvc  = . The initialization algorithm pro- 
ceeds as follows: 
t t R  (0, l}“ 
‘U  t hdsbl(t) 
2)  +R  {0,1)“ 
a  t R  {0,1}” 
b + h(no) 
5 1  + f ( v , n o )  
x2 t x - x1 mod q 
y2  t g”2 mod p 
t Epk,,, () 
the initialization protocol of Section 5.2.1. In Figure 3, hzkp 
is assumed to return an element of Z,. 
dvc 
svr 
Dsk,,, ( T )  