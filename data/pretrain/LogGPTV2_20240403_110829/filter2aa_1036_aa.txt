# Analysis Report

## Sample: 172AED81C4FDE1CF23F1615ACEDFAD65
- **Author:** Marion Marschalek [PI:EMAIL]
- **Date:** 24/03/2013

### Abstract
The analyzed sample, detected as Backdoor.Win32.Banito, is a multi-threaded malware that infects files on the disk, communicates with a remote server under the domain `ns.dns3-domain.com`, and provides extensive spying and system control functionalities. The code is obfuscated and includes multiple anti-analysis measures. This malware was active in late 2010 to early 2011 and is believed to have originated from China.

---

## Summary
The analyzed sample is a sophisticated piece of malware that replicates itself and communicates with a remote Command & Control (C&C) server. It is a non-polymorphic file infector, replacing executable images in the file system with a copy of itself while still hiding and starting the original applications when needed.

The malware implements various anti-analysis measures, such as invoking intentional exceptions and checking the `dwFlags` value of the `GetStartupInfo()` API call. It contains a significant amount of junk code and is highly obfuscated. The malware is written in object-oriented C++ and makes extensive use of virtual function calls, which complicate analysis. Additionally, it constructs an API offset jump table at startup for resolving system calls.

Designed as a multi-threaded application, the malware divides process control, file infection, and communication with the C&C server into different threads to distribute the execution load. Communication with the remote server is handled via a single hard-coded domain, `ns.dns3-domain.com`, with the IP address `125.34.39.47`. The server appears to be out of operation, as it does not respond to any messages from the analyzed sample.

The malware's capabilities are extensive, including the ability to spy on the system, control system operations, produce screenshots, report file listings, rename, copy, or delete files, command a system shutdown, execute files, and perform numerous other operations. It also has functionality for self-updating and disinfecting the system of its copies.

---

## Contents
1. **Overview**
   - 1.1 File Details
2. **Anti-Analysis Measures**
   - 2.1 `dwFlags` in `_STARTUPINFO` Structure
   - 2.2 SEH for Obfuscation of the Execution Path
     - 2.2.1 Exception in `WinMain`
     - 2.2.2 Exception in `IMPLICIT_MAIN`
   - 2.3 Simulation Check with `GetHostByName`
   - 2.4 Obfuscation and Confusion Tricks
     - 2.4.1 Junk Code
     - 2.4.2 String Construction at Runtime
     - 2.4.3 API Address Resolution at Runtime
   - 2.5 Indirect Function Calls
   - 2.6 Timing Attacks using `GetTickCount`
3. **Malware Startup**
   - 3.1 Synchronization Methods for Multiple Instances
4. **Multi-Threading Model**
   - 4.1 Inter-Thread Communication
   - 4.2 Details about Started Threads
     - 0 – `thread0`
     - 1 – `timecallback_ptmessage`
     - 2 – `fileinfector`
     - 3 – `get_queued_compstatus`
     - 4, 5 & 8 – `getmessage_loop`
     - 6 – `recv_post_queued_compstatus`
     - 7 – `cnc_cmd_switching`
   - 4.3 Thread Workflow Diagram
5. **File Infection**
   - 5.1 Initial Infection
     - 5.1.1 Check for Chinese AV-Products
     - 5.1.2 Module Name Filtering
     - 5.1.3 The Infection Routine
   - 5.2 The Re-Infection Loop
6. **Network Communication**
   - 6.1 Sending Messages to the C&C
     - 6.1.1 Initial “HELLO”-Messages
7. **C&C-Command Processing**
   - 7.1 Control Operations
     - 7.1.1 `terminate`
     - 7.1.2 `system_shutdown`
     - 7.1.3 `spawn_console_process`
     - 7.1.4 `shellexecute`
     - 7.1.5 `notify_cnc`
     - 7.1.6 `notify_cnc2`
   - 7.2 Multimedia Operations
     - 7.2.1 `gdi_capture_window`
     - 7.2.2 `gdi_dca_screenshot`
     - 7.2.3 `send_multimedia`
   - 7.3 File System Operations
     - 7.3.1 `file_listing`
     - 7.3.2 `directory_listing`
     - 7.3.3 `directory_listing2`
     - 7.3.4 `create_directory`
     - 7.3.5 `copy_file`
     - 7.3.6 `delete_file`
     - 7.3.7 `rename_file`
     - 7.3.8 `write_to_file`
   - 7.4 Other Operations
     - 7.4.1 `get_volume_info`
     - 7.4.2 `get_window_text`
     - 7.4.3 `check_for_fingerprint`
     - 7.4.4 `smss_sysinu_tempfiles`
     - 7.4.5 `dat_file_createwrite`
   - 7.5 Disinfection Routine
8. **Conclusions**

---

## 1. Overview

### 1.1 File Details
- **File Type:** Portable Executable 32 / Microsoft Visual C++ 6.0
- **File Size:** 269.42 KB (275,883 bytes)
- **MD5:** 172AED81C4FDE1CF23F1615ACEDFAD65
- **SHA-1:** C47FAF863FD93A310408848F829090F4E783E74C
- **Detections:**
  - Backdoor.Win32.Banito (Kaspersky)
  - TrojanDownloader.Win32.Unruy (Microsoft)
  - Trojan.Artilyb (Symantec)

The analyzed sample is not packed or encrypted but is highly obfuscated. All strings are constructed at runtime, and most imports are resolved dynamically, making static analysis challenging. The sample is written in C++ and is object-oriented, as evidenced by the use of virtual function tables and the extensive use of `ecx` for passing the `this` object pointer.

Automated dynamic analysis tools like Anubis Sandbox fail due to anti-simulation and anti-debugging measures. The tools used for static and dynamic analysis include IDA Pro 6.1, CFF Explorer 1.0, Wireshark 1.4.1, and several applications from the Sysinternals Toolsuite. The analysis was conducted on a Windows XP SP3 machine running in VMware.

---

## 2. Anti-Analysis Measures

### 2.1 `dwFlags` in `_STARTUPINFO` Structure
Shortly after startup, before entering the `WinMain` function, the malware attempts to crash a present debugger. It calls `GetStartupInfoA` to retrieve the current `_STARTUPINFO` structure, which contains a `dwFlags` value. For a GUI application, this value is 1. However, in a debugger environment, it is not 1, causing the test instruction to set the zero flag and execute the `out` instruction, leading to a "Privileged Instruction" exception (code c0000096) and termination of the debugged process.

```assembly
.text:004345BA call    ds:GetStartupInfoA
.text:004345C0 test    byte ptr [ebp-30h], 1
.text:004345C4 jz      short loc_4345D7
.text:004345D7 loc_4345D7:                              
.text:004345D7 out     dx, al
.text:004345D8 stosb
```

To bypass this, the executable must be patched at runtime.

### 2.2 SEH for Obfuscation of the Execution Path
Structured Exception Handling (SEH) is a structured way for Win32 applications to handle runtime exceptions. SEH allows the programmer to define custom handlers and link them into a chain. When an exception occurs, the first handler in the chain is executed, and it can redirect execution to any executable code in memory.

Each thread has a handler chain, accessible via `FS:0`. The `__ehfuncinfo` structure, provided as an argument to the SEH frame handler, contains a `pTryBlockMap` pointer that maps try/catch blocks and leads to the array of handlers.

For reversing Win32 SEH, the steps are:
1. Identify the custom exception handler registration.
2. Determine the offset of the frame handler.
3. Find the `__ehfuncinfo` structure.
4. Follow the `pTryBlockMap` pointer to find the handler array.
5. Determine the offsets of each handler function.
6. Determine where execution will continue after the handler callback.

In the given sample, only two intentional exceptions were thrown, and the structures of the exception records were relatively simple.

#### 2.2.1 Exception in `WinMain`
The first exception is invoked by accessing unreadable memory:

```assembly
.text:00401D98 mov     ecx, 69805h
```

This causes an access violation, triggering the SEH mechanism and allowing the malware to detect and terminate the debugging environment.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.