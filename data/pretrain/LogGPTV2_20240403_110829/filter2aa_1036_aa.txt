Analysis Report 
Sample 172AED81C4FDE1CF23F1615ACEDFAD65 
Author  Marion Marschalek [PI:EMAIL] 
Date  
24/03/2013 
Abstract 
The analyzed sample, detected as Backdoor.Win32.Banito, is multi-threaded 
malware that infects files on the disk, communicates to a remote server under 
the domain ns.dns3-domain.com and provides extended spying and system 
control functionalities. Its code is obfuscated and it implements a row of anti-
analysis measures. 
It was in-the-wild around late 2010 / early 2011 and its origins are believed to 
be Chinese. 
1 | P a g e  
Summary 
The analyzed sample is a tricky piece of malware that replicates itself and communicates to a remote 
Command & Control server (C&C). It is a non-polymorphic file infector, replacing executable images 
in the file system with a copy of itself, but still hiding and starting the original applications when 
needed. 
It implements various anti-analysis measures, as for example invoking intentional exceptions or 
checking for the dwFlags value of the GetStartupInfo() API call. It implements a huge amount of junk 
code and is highly obfuscated. It is implemented in object oriented C++ and makes heavy usage of 
virtual function calls that make analysis significantly harder than usual. Besides the sample constructs 
an API offset jump table on startup, which is used throughout execution for resolution of system 
calls.  
The malware is designed as multi-threaded application that divides process control, file infection and 
sending and receiving messages to and from the C&C server in different threads to share execution 
load.  
The communication to the remote server is handled via one single domain which is hard coded in the 
sample. The domain is ns.dns3-domain.com, the according network address is 125.34.39.47. The 
server is believed to be out of operation, as it does not answer to any message of the analyzed 
sample.  
The malwares capabilities are extensive, it is able to spy on the system as well as control system 
operation. It can produce screenshots and screen captures, report file listings, rename, copy or 
delete files, command a system shutdown, execute files and numerous other operations.  
Besides, functionality can be found to perform a self-update, most likely to a new version of the 
same malware. It can disinfect the system of its copies.  
2 | P a g e  
Contents 
Summary ................................................................................................................................................. 1 
1. 
Overview .......................................................................................................................................... 5 
1.1 
File Details ............................................................................................................................... 5 
2. 
Anti-Analysis Measures ................................................................................................................... 6 
2.1 
dwFlags in _STARTUPINFO Structure ...................................................................................... 6 
2.2 
SEH for Obfuscation of the Execution Path ............................................................................. 6 
2.2.1 
Exception in WinMain ..................................................................................................... 7 
2.2.2 
Exception in IMPLICIT_MAIN ........................................................................................... 8 
2.3 
Simulation Check with GetHostByName ................................................................................. 9 
2.4 
Obfuscation and Confusion Tricks ........................................................................................... 9 
2.4.1 
Junk Code ........................................................................................................................ 9 
2.4.2 
String Construction at Runtime ..................................................................................... 10 
2.4.3 
API Address Resolution at Runtime ............................................................................... 11 
2.5 
Indirect Function Calls ........................................................................................................... 12 
2.6 
Timing Attacks using GetTickCount ....................................................................................... 13 
3. 
Malware Startup ............................................................................................................................ 14 
3.1 
Synchronization Methods for Multiple Instances ................................................................. 14 
4. 
Multi-Threading Model ................................................................................................................. 17 
4.1Inter-Thread Communication ....................................................................................................... 17 
4.2 
Details about Started Threads ............................................................................................... 18 
0 – thread0 .................................................................................................................................... 18 
1 – timecallback_ptmessage ......................................................................................................... 18 
2 – fileinfector ............................................................................................................................... 19 
3 – get_queued_compstatus ......................................................................................................... 19 
4, 5 & 8 – getmessage_loop .......................................................................................................... 19 
6 - recv_post_queued_compstatus ............................................................................................... 20 
7 – cnc_cmd_switching ................................................................................................................. 20 
4.3 
Thread Workflow Diagram .................................................................................................... 20 
5. 
File Infection .................................................................................................................................. 21 
5.1 
Initial Infection ...................................................................................................................... 21 
5.1.1 
Check for Chinese AV-Products ..................................................................................... 21 
5.1.2 
Module Name Filtering .................................................................................................. 21 
3 | P a g e  
5.1.3 
The Infection Routine .................................................................................................... 22 
5.2 
The Re-Infection Loop ........................................................................................................... 23 
6. 
Network Communication .............................................................................................................. 24 
6.1 
Sending Messages to the C&C ............................................................................................... 24 
6.1.1 
Initial “HELLO”-Messages .............................................................................................. 25 
7. 
C&C-Command Processing ............................................................................................................ 26 
7.1 
Control Operations ................................................................................................................ 26 
7.1.1 
terminate ....................................................................................................................... 26 
7.1.2 
system_shutdown ......................................................................................................... 26 
7.1.3 
spawn_console_process ................................................................................................ 27 
7.1.4 
shellexecute ................................................................................................................... 27 
7.1.5 
notify_cnc ...................................................................................................................... 27 
7.1.6 
notify_cnc2 .................................................................................................................... 27 
7.2 
Multimedia Operations ......................................................................................................... 27 
7.2.1 
gdi_capture_window ..................................................................................................... 27 
7.2.2 
gdi_dca_screenshot ....................................................................................................... 27 
7.2.3 
send_multimedia ........................................................................................................... 28 
7.3 
File System Operations .......................................................................................................... 28 
7.3.1 
file_listing ...................................................................................................................... 28 
7.3.2 
directory_listing ............................................................................................................. 28 
7.3.4 
directory_listing2 ........................................................................................................... 28 
7.3.5 
create_directory ............................................................................................................ 28 
7.3.6 
copy_file ........................................................................................................................ 28 
7.3.7 
delete_file ...................................................................................................................... 28 
7.3.8 
rename_file ................................................................................................................... 28 
7.3.9 
write_to_file .................................................................................................................. 29 
7.4 
Other Operations ................................................................................................................... 29 
7.4.1 
get_volume_info ........................................................................................................... 29 
7.4.2 
get_window_text........................................................................................................... 29 
7.4.3 
check_for_fingerprint .................................................................................................... 29 
7.4.4 
smss_sysinu_tempfiles .................................................................................................. 29 
7.4.5 
dat_file_createwrite ...................................................................................................... 29 
7.5 
Desinfection Routine ............................................................................................................. 30 
8. 
Conclusions .................................................................................................................................... 31 
4 | P a g e  
Sources .................................................................................................................................................. 32 
Attachments .......................................................................................................................................... 32 
5 | P a g e  
1. Overview 
1.1 File Details 
File Type 
Portable Executable 32 / Microsoft Visual C++ 6.0 
File Size 
269.42 KB (275883 bytes) 
MD5 
172AED81C4FDE1CF23F1615ACEDFAD65 
SHA-1 
C47FAF863FD93A310408848F829090F4E783E74C 
Detections 
Backdoor.Win32.Banito (Kaspersky) 
TrojanDownloader.Win32.Unruy (Microsoft) 
Trojan.Artilyb (Symantec) 
The analyzed sample is not packed or encrypted. It is highly obfuscated, all strings are built at 
runtime as well as most of the imports are resolved dynamically at runtime. Therefore, no 
informative strings can be extracted through initial, static analysis. The sample is written in C++ and is 
object oriented. This was found proofed by the use of virtual function tables and the extensive use of 
ecx for passing the this object pointer. 
Automated, dynamic analysis as provided by Anubis Sandbox fails due to anti-simulation and/or anti-
debugging measures. 
Used tools for static and dynamic analysis are IDA Pro 6.1, CFF Explorer 1.0, Wireshark 1.4.1 and 
several applications from Sysinternals Toolsuite. The used analysis machine is a Windows XP SP3, 
running in VMware. 
6 | P a g e  
2. Anti-Analysis Measures 
2.1 dwFlags in _STARTUPINFO Structure 
Shortly after startup of the executable and before entering the WinMain function the malware 
performs a first intent to crash a present debugger. By calling to GetStartupInfoA the current 
_STARTUPINFO structure is retrieved, which contains a value called dwFlags. This value is 1 in case of 
a started GUI application. Anyway, in case of a debugger environment it is not 1, which causes the 
test instruction at 4345C0 to set the zero flag and lead execution to execute the out instruction 
shown in code block two. 
.text:004345BA call    ds:GetStartupInfoA 
.text:004345C0 test    byte ptr [ebp-30h], 1 
.text:004345C4 jz      short loc_4345D7 
.text:004345D7 loc_4345D7:                              
.text:004345D7 out     dx, al 
.text:004345D8 stosb 
The out-instruction is used for data transfer to I/O-ports, which are not directly accessible from user 
mode. An exception of type “Privileged Instruction” with the code c0000096 occurs, which is 
followed by the termination of the debugged process.  
The solution in this case is to patch the executable at runtime, to achieve execution. 
2.2 SEH for Obfuscation of the Execution Path 
SEH is short for Structured Exception Handling and describes a structured way for Win32 applications 
to handle exceptions that occur at runtime. And, what is more, SEH is a way for the programmer to 
define custom handlers and link them into a chain of structured exception handlers, all of which are 
executed when the application encounters an exception. At registration, a new exception handler is 
linked on top of the handler chain, so it will be the first handler to be executed in case of an 
exception. Important to mention is, that the handler who accepts to handle an exception gets to 
decide where execution will resume after the handler was executed. It can point execution basically 
to any executable code in memory. 
A handler chain is always present per thread and an according pointer is to be found in the thread 
information block (TIB) at offset 0. As the FS register always points to the TIB, the handler chain can 
be accessed via FS:0.  
Information about the exception handler to execute is stored in a structure called __ehfuncinfo 
(compare source [2]), which in turn is provided as an argument for the SEH frame handler. This 
structure is also called exception record. Amongst other entries __ehfuncinfo contains a pointer 
named pTryBlockMap, which maps the try/catch blocks in an application. Also it leads to the array of 
handlers which are invoked, when the according exception handler is executed.  
7 | P a g e  
So essentially, when an exception occurs the steps to take are: 
1. Find the registration of the custom exception handler, if there is any. It can easily be 
identified, if modification of FS:0 can be spotted. Another way would be to check the SEH 
pointer in TIB or to spot the offset of the handler function on the stack. 
2. Determine the offset of the frame handler in the code, which is pushed on the stack before 
the modification. 
3. Find the offset of the __ehfuncinfo structure, which is an argument for the frame handler; in 
case of MS Visual Studio compiled executables as argument in eax register to 
__CxxFrameHandler.  
4. Follow the pTryBlockMap pointer, which is the fourth entry (excluding the magic number) to 
find the TryBlockMapEntries, which contain a pointer to the handler array at the fifth 
position.  
5. Following mentioned pointer, the offset of each handler function can be determined. 
6. Determine the offset, where execution will continue after the handler callback. 
For more information on reversing of Win32 SEH see source [2]. Luckily, in the case of the given 
sample only two intentional exceptions were thrown and the structures of the exception records 
were considerably simple.  
2.2.1 Exception in WinMain 
The first exception is invoked by accessing unreadable memory as documented in the following 
listing: 
.text:00401D98 mov     ecx, 69805h 