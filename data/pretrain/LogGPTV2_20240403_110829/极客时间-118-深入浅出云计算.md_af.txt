# time echo "scale=5000; 4*a(1)" | bc -l -q    3.141592653589793238462643383279502884197169399375105820974944592307\    81640628620899862803482534211706798214808651328230664709384460955058\    ...    ...    74351362222477158915049530984448933309634087807693259939780541934144\    73774418426312986080998886874132604720    real    0m22.325s    user    0m22.316s    sys     0m0.009s我们可以看到，机器仅用了 22 秒就完成了精确到小数点后 5000 位的 PI值，成绩还是相当不错的。 >  > 注意：这里使用 bc 命令以及其中的三角函数来计算 Pi 值，只是直观展示> CPU> 能力的简便方法。结果仅供参考，不推荐这个方法作为严肃性能测试的依据。> > >不过，你可能会有点担心 ARM 在服务器端的软件生态。诚然，ARM体系结构下的软件，的确比不上 x86架构那样丰富，但在近年相关厂商的大力推动下，其实已经取得了长足的进展。比如，在我们这台KC1 服务器的 Linux 操作系统中，已经默认安装了 Java、 Python等语言和运行环境。你甚至可以使用 apt 包管理器来安装 Docker，并在 ARM服务器内运行 Docker容器，你可以参考下面给出的示例：     root@ecs-kc1-large-2-linux-20200115174501:~
# docker run hello-world    Hello from Docker!    This message shows that your installation appears to be working correctly.    To generate this message, Docker took the following steps:    ...    ...    For more examples and ideas, visit:     https://docs.docker.com/get-starte这简直太棒了，这意味着 ARM服务器同样可以支撑容器，我们可以在上面跑微服务！这会为各种应用在 ARM上的部署打开方便之门。 所以说，云计算让 ARM服务器这个看起来比较遥远的事情，变成了触手可及的现实。随着华为鲲鹏等相关计算生态的不断成熟，基于ARM的虚拟机系列，也会越来越成为我们在注重成本控制时的一个有力选择。 课堂总结与思考今天，我们详细讨论了在云上使用虚拟机时，可以运用的一些节省成本的思路和方法。它们原理不同，各有利弊。 1.  **包年包月的付费方式**        是最常见的降低虚拟机使用成本的方法，它通过        **牺牲采购的灵活性**        来换取折扣。        2.  **竞价实例的机制**        让云端的闲置资源对外开放，基于市场竞拍的定价方式，常常能够让我们获得很大的折扣。这种方法主要是通过        **牺牲稳定性**        ，来换取成本上的节约。        3.  **突发性能实例**        是一种特殊的使用 CPU    积分制的机型，相对标准机型成本较低，适合工作负载存在较大波动的场景。它主要        **牺牲的是性能**        。        4.  **基于 ARM    的虚拟机实例**        已陆续走向市场，随着生态的不断成熟，也将成为低成本机型中非常具有竞争力的选择。这种方法主要        **在生态和兼容性方面存在一些限制**        。        结合起来不难看到，第一、二种方法，是在购买模式层面的调整和创新；而第三、第四种方法，是在机型选择方面，拓宽了我们的思路。有时，这两个层面的方法是可以组合起来使用的。比如，我就曾经在AWS 云上使用 Spot Instance 的竞价方式，启动了一批 T系列的突发性能实例，取得了很好的业务效果。 好了，这一讲就到这里。**今天我留给你的思考题是：** 1.  与包年包月类似的预付费折扣，还有一种叫做"预留实例"（Reserved    Instance）的模式。你能说说它和包年包月的不同之处，以及独特的优势是什么吗？        2.  在有些云上创建突发性能实例时，还会有一个"无性能约束模式"的高级选项。你知道这个高级选项勾选后有什么作用，能解决什么问题吗？        欢迎你给我留言，我会尽快给你反馈。如果觉得有收获，也欢迎把这篇文章分享给你的朋友。感谢阅读，我们下期再见。 