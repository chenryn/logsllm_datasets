needs in order to develop MIDlets. The low level APIs are
closer to the device hardware, and therefore are more dif-
ﬁcult to program, but they have more privileges and less
restrictions. This should not affect the system security, pro-
vided that access to these APIs is restricted to the higher
level APIs. In other words, developers should not have ac-
cess to these low level APIs.
In order to exhibit the danger of having the programmer
access to internal APIs, we give the example of deleting a
record store belonging to another MIDlet.
One of the high level APIs in MIDP is the class
RecordStore. It provides the functionalities needed by
the developer to manipulate record stores such as opening,
closing, deleting, etc. This class also checks for access
rights before doing such actions, this is to protect data se-
curity and integrity. For instance no MIDlet is allowed to
delete a record store of another MIDlet. There is another
low level class, which is RecordStoreFile, this class
is closer to the device hardware, it calls native methods and
provides services to the RecordStore class. This class
should not be available for direct use by developers, be-
cause it has more access rights and bypasses the security
checks. In Sun’s RI, this class can be used directly by pro-
grammers, which can compromise data security. We were
able to use this vulnerability to have a MIDlet that deleted
a record store belonging to another MIDlet.
3.4.3 Retrieving and Transferring JAR Files from a
Device
Once a MIDlet is installed on a device the user should be
able to perform two kinds of operations, namely, executing
and uninstalling the MIDlet. If, in addition, the user has the
capability to transfer the MIDlet and make it run on another
device, it becomes a problem for the provider of the MIDlet.
Indeed, this allows for illegal redistribution of MIDlets and
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
consequently for ﬁnancial losses. In our experiments, we
succeeded to transfer MIDlets from one device to another.
This was possible thanks to a free software for Series 60
phones [16]. The FExplorer software [8] makes it possible
to navigate through the ﬁles and MIDlets installed on the
device just like navigating on a desktop ﬁle system. We
installed FExplorer software on Nokia 3600 phone. In order
to transfer MIDlet JAD and JAR ﬁles into a second device,
all we had to do is to go to the location where these ﬁles are
stored. In Series 60 phones JAD and JAR ﬁles are typically
stored in:
\midp\\\\
directory. For example, in our case JAR and JAD ﬁles of
SunSmsAttack MIDlet which is installed on the device
can be found in:
\midp\CSA\untrusted\SunSmsAttack\
directory. Then, all what remains to do is to choose “Op-
tions” and “send via Bluetooth”, “SMS” or “Infrared.” This
operation is also possible in all Series 60 devices. These in-
clude Samsung, Siemens, Panasonic and mainly Nokia de-
vices [16]. Finally, it is important to note that transferring
is not possible for DRM (Digital Right Management) pro-
tected MIDlets (protection should be at least by the forward
lock mode [17]).
3.4.4 Retrieving and Transferring MIDlet Persistent
Data
In addition to JAR and JAD ﬁles, using FExplorer software,
it is possible to transfer MIDlet persistent data from a de-
vice to another. Indeed, rms.db ﬁle that holds all MIDlet
persistent data is located in the same location as JAD and
JAR ﬁles and can be transferred following the same steps.
Moreover, the DRM issue is no more valid for rms.db.
That is, even if the MIDlet is DRM protected the rms.db
can be transferred because the DRM protection holds only
for JAR ﬁles [17]. This may have a serious impact on the
privacy of the MIDlet since it is possible to tamper with its
persistent data.
3.5 KVM Vulnerabilities
3.5.1 Memory Overﬂow Vulnerability
Memory overﬂow is a well-known problem and may result
in many security breaches. A program suffers from memory
overﬂow vulnerability if, somewhere in the program code, it
allows the copy of data to a memory location without check-
ing the size of the saved data. Thus, memory overﬂow may
happen if the size of the data to save is greater than the size
of the memory location.
By inspecting the source code of KVM, we identiﬁed a
memory overﬂow vulnerability. The vulnerable code is the
following statement in native.c ﬁle:
sprintf(str_buffer," Method %s :: %s
not found", className,
methodName(thisMethod));
sprintf is a C function that does not check the size of
the data to format in a memory location. Thus, the statement
will not check the size of the message that will be formatted
in str buffer. Knowing that str buffer is a global
variable declared as:
char str_buffer[512];
In our analysis, we arranged to build a MIDlet that takes
advantage of this vulnerability and make MIDP crash. This
MIDlet is tested for some real phones making MIDP crash.
3.6 Threading System Vulnerabilities
J2ME CLDC supports multithreading, the threading sys-
tem was analyzed and vulnerabilities were discovered.
3.6.1 Threading and Storage System Vulnerability
Although multi-threading is supported, no measures were
taken to synchronize access to the storage system. When
two or more threads attempt to read or write data to/from the
storage system, data integrity can not be guaranteed. Syn-
chronization is left as the programmer’s responsibility. A
malicious MIDlet could make use of this fact to corrupt the
data belonging to another MIDlet (in case of shared data).
Moreover, integrity of the data stored by a MIDlet in its
own storage can be compromised in case of several threads
trying to read and write data.
3.6.2 Threading and Display Vulnerability
The method setCurrent of the class Display is re-
sponsible for setting the display of a certain MIDlet to a
certain Displayable object such as a TextBox. For
instance, the code:
Display.getDisplay(this).setCurrent(tb);
will display the TextBox object tb on the device
screen. This method, however, is not synchronized, which
makes it up to the programmer to synchronize the display
for use between different threads. This can cause problems
and unless all threads use synchronized access to the dis-
play, some threads may not get access to the display.
4 Conclusion and Future Work
In this paper, we presented the security architecture of
J2ME CLDC and provided a vulnerability analysis of this
Java platform. In our analysis, we investigated both, speciﬁ-
cations and implementations (the reference implementation
as well as several other widely-deployed implementations
of this platform). The J2ME CLDC components covered
by the analysis are mainly: Virtual machine, CLDC API
and MIDP API. We performed the vulnerability analysis by
using mainly code inspection and black box testing of the
reference implementation. To have a reliable analysis, we
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
studied vulnerabilities that are already reported in the liter-
ature. In our study, we investigated the existing implemen-
tations of the platform in order to look for vulnerabilities.
Also, we designed an important set of attack scenarios and
tested the resulting test suite on reference implementation
and actual phone models.
After the study that we carried out, The following two
points were made clear through the analysis of J2ME CLDC
security:
• Serious vulnerabilities exist in the reference imple-
mentation of MIDP 2.0 (e.g. SSL implementation).
• Some phones could be vulnerable to serious secu-
rity attacks like the Siemens SMS attack, while other
phones followed a restrictive approach in implement-
ing the J2ME CLDC platform.
With this study in hand, modiﬁcations can be done to im-
prove J2ME CLDC security. The security hardening can be
performed by following two main paths: (1) Fixing the dis-
covered vulnerabilities by suggesting modiﬁcations to the
current security architecture, (2) Extending the security ar-
chitecture by new security functions.
References
[1] M. Bishop. Vulnerabilty Analysis.
In Proceedings of of
the Second International Symposium on Recent Advances in
Intrusion Detection, pages 125–136, Sptember 1999.
[2] C. Criteria. Common Criteria for Information Technology
Security Evaluation (Parts 1, 2 and 3). Technical report, The
Common Criteria Project, August 1999.
[3] A. Dunsmore, M. Roper, and M. Wood. The Development
and Evaluation of Three Diverse Techniques for Object-
Oriented Code Inspection.
IEEE transactions on software
engineering, 29(8), 2003.
[4] G. Fink and M. Bishop. Property Based Testing: A New
Approach to Testing for Assurance. In ACM SIGSOFT Soft-
ware Engineering Notes, pages 74–80, July 1997.
[5] G. Bracha, T. Lindholm, W. Tao and F. Yellin.
http:
CLDC Byte Code Typechecker Speciﬁcation.
//jcp.org/aboutJava/communityprocess/
final/jsr139/index.html, January 2003.
[6] I. Goldberg and D. Wagner. Randomness and the Netscape
Browser. Dr. Dobb’s Journal of Software Tools, 21(1):66,
68–70, Jan. 1996.
[7] V. Gupta and S. Gupta. KSSL: Experiments in Wireless In-
ternet Security. Technical Report TR-2001-103, Sun Mi-
crosystems, Inc, Santa Clara, California, USA, November
2001.
[8] D. Hugo.
FExplorer Web Site.
http://users.
[12] T. Lindholm and F. Yellin. The Java Virtual Machine Speci-
ﬁcation (Second Edition). Addison Wesley, April 1999.
[13] MEHARI. MEHARI. Technical report, Club de la Securite
des Systemes d’information Francais, August 2000.
[14] S. MicroSystems. Connected, Limited Device Conﬁgura-
tion. Speciﬁcation Version 1.0, Java 2 Platform Micro Edi-
tion. Technical report, Sun MicroSystems, California, USA,
May 2000.
[15] S. MicroSystems. KVM Porting Guide. Technical report,
Sun MicroSystems, California, USA, September 2001.
[16] Nokia. Series 60 Platform. http://www.nokia.com/
nokia/0,8764,46827,00.html.
[17] OMA. Implementation Best Practices for OMA DRM v1.0
Protected MIDlets, May 2004.
[18] J. V. Peursem. JSR 118 Mobile Information Device Proﬁle
2.0, November 2002.
[19] Phenoelit Hackers Group. http://www.phenoelit.
de/, 2003.
[20] R. Riggs, A. Taivalsaari, M. VandenBrink, and J. Holliday.
Programming wireless devices with the Java 2 platform, mi-
cro edition: J2ME Connected Limited Device Conﬁguration
(CLDC), Mobile Information Device Proﬁle (MIDP). Addi-
son-Wesley, Reading, MA, USA, 2001.
[21] T. Sayeed, A. Taivalsaari, and F. Yellin.
Inside The K
Virtual Machine. http://java.sun.com/javaone/
javaone2001/pdfs/1113.pdf, Jan 2001.
[22] Bug 4824821: Return value of midpInitializeMemory is not
http://bugs.sun.com/bugdatabase/
checked.
view bug.do?bug id=4824821, February 2003.
[23] Bug 4959337:
RSA Division by Zero.
http:
//bugs.sun.com/bugdatabase/view bug.
do?bug id=4959337, November 2003.
[24] Bug 4802893: RI checks sockets before checking per-
missions. http://bugs.sun.com/bugdatabase/
view bug.do?bug id=4802893, January 2004.
[25] Sun Microsystems. KNI Speciﬁcation K Native Inter-
face (KNI) 1.0. http://www.carfield.com.hk/
java store/j2me/j2me cldc/doc/kni/html/
index.html, October 2002.
[26] Sun Microsystems. The Recommended Security Policy for
GSM/UMTS Compliant Devices, Addendum to the Mobile
Information Device Proﬁle version 2.0, 2002.
[27] H. H. Thompson, J. A. Whittaker, and F. E. Mottay. Soft-
ware Security Vulnerability Testing in Hostile Environ-
ments.
In SAC ’02: Proceedings of the 2002 ACM sym-
posium on Applied computing, pages 260–264, New York,
NY, USA, 2002. ACM Press.
[28] J. Viega, J. Bloch, Y. Kohno, and G. McGraw. ITS4: A Static
Vulnerability Scanner for C and C++ Code. In ACSAC 2000,
2000.
[29] J. Viega, G. McGraw, T. Mutdosch, and E. Felten. Statically
Scanning Java Code: Finding Security Vulnerabilties. IEEE
Software, September/October 2000.
skynet.be/domi/fexplorer.htm.
[9] G. S. J. Gosling, B. Joy and G. Bracha. The Java Language
Speciﬁcation Second Edition. The Java Series. Addison-
Wesley, Boston, Mass., 2000.
[10] I. Krsul. Software Vulnerability Analysis. PhD thesis, Pur-
due University, 1998.
[11] S. Liang. Java Native Interface: Programmer’s Guide and
Speciﬁcation. Addison-Wesley, Reading, MA, USA, 1999.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE