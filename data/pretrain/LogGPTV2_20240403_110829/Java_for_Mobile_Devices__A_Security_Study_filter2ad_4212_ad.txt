### Developing MIDlets and API Security

To develop MIDlets, developers must utilize APIs that are either low-level or high-level. Low-level APIs are more closely tied to the device's hardware, making them more challenging to program. However, they offer greater privileges and fewer restrictions. To maintain system security, access to these low-level APIs should be restricted to higher-level APIs, ensuring that developers do not have direct access to them.

#### Example of Low-Level API Vulnerability

To illustrate the potential dangers of allowing developers access to internal APIs, consider the ability to delete a record store belonging to another MIDlet. The `RecordStore` class in MIDP is a high-level API that provides functionalities for managing record stores, such as opening, closing, and deleting. This class includes checks for access rights to ensure data security and integrity. For example, no MIDlet is allowed to delete a record store owned by another MIDlet.

In contrast, the `RecordStoreFile` class is a low-level API that is closer to the device hardware. It calls native methods and provides services to the `RecordStore` class. This class has more access rights and bypasses security checks, making it a potential security risk if directly accessible to developers. In Sun’s Reference Implementation (RI), this class can be used directly, which can compromise data security. We were able to exploit this vulnerability to create a MIDlet that deleted a record store belonging to another MIDlet.

### Transferring JAR Files from a Device

Once a MIDlet is installed on a device, the user should be able to execute and uninstall it. If the user can also transfer the MIDlet to another device, it poses a problem for the MIDlet provider, as it allows for illegal redistribution and potential financial losses. In our experiments, we successfully transferred MIDlets between devices using free software for Series 60 phones, such as FExplorer [8].

FExplorer allows users to navigate through the files and MIDlets on a device, similar to a desktop file system. We installed FExplorer on a Nokia 3600 phone. To transfer MIDlet JAD and JAR files to another device, we navigated to the directory where these files are stored, typically in `\midp\CSA\untrusted\`. For example, the JAR and JAD files of the `SunSmsAttack` MIDlet can be found in `\midp\CSA\untrusted\SunSmsAttack\`. We then used the "Options" menu to send the files via Bluetooth, SMS, or Infrared. This operation is possible on all Series 60 devices, including those from Samsung, Siemens, Panasonic, and Nokia [16]. It is important to note that transferring DRM-protected MIDlets is not possible unless the protection is at least in forward lock mode [17].

### Transferring MIDlet Persistent Data

Using FExplorer, it is also possible to transfer MIDlet persistent data, such as the `rms.db` file, which holds all MIDlet persistent data. This file is located in the same directory as the JAD and JAR files and can be transferred using the same steps. Unlike JAR files, the `rms.db` file is not protected by DRM, even if the MIDlet itself is. This can have serious implications for the privacy and integrity of the MIDlet, as it allows for tampering with its persistent data.

### KVM Vulnerabilities

#### Memory Overflow Vulnerability

Memory overflow is a well-known security issue that can lead to various breaches. A program is vulnerable to memory overflow if it allows data to be copied to a memory location without checking the size of the data. By inspecting the source code of KVM, we identified a memory overflow vulnerability in the `native.c` file:

```c
sprintf(str_buffer, "Method %s :: %s not found", className, methodName(thisMethod));
```

The `sprintf` function does not check the size of the data being formatted into the `str_buffer`, which is a global variable declared as `char str_buffer[512];`. We created a MIDlet that exploits this vulnerability, causing the MIDP to crash on some real phones.

### Threading System Vulnerabilities

J2ME CLDC supports multithreading, but vulnerabilities were discovered in the threading system.

#### Threading and Storage System Vulnerability

Although multithreading is supported, there are no measures to synchronize access to the storage system. When multiple threads attempt to read or write data, data integrity cannot be guaranteed. Synchronization is left to the programmer, which can be exploited by malicious MIDlets to corrupt data belonging to other MIDlets or their own data.

#### Threading and Display Vulnerability

The `setCurrent` method of the `Display` class is responsible for setting the display of a MIDlet to a specific `Displayable` object, such as a `TextBox`. For example:

```java
Display.getDisplay(this).setCurrent(tb);
```

This method is not synchronized, leaving it up to the programmer to ensure proper synchronization. Without synchronized access, some threads may not get access to the display, leading to potential issues.

### Conclusion and Future Work

In this paper, we presented the security architecture of J2ME CLDC and provided a vulnerability analysis of this Java platform. Our analysis covered the virtual machine, CLDC API, and MIDP API. We performed the analysis using code inspection and black box testing of the reference implementation, as well as studying existing implementations and designing attack scenarios.

Our study revealed the following key points:
- Serious vulnerabilities exist in the reference implementation of MIDP 2.0, such as SSL implementation.
- Some phones, like those from Siemens, are vulnerable to serious security attacks, while others follow a more restrictive approach.

To improve J2ME CLDC security, modifications can be made by fixing the discovered vulnerabilities and extending the security architecture with new functions.

### References

[1] M. Bishop. Vulnerability Analysis. In Proceedings of the Second International Symposium on Recent Advances in Intrusion Detection, pages 125–136, September 1999.

[2] C. Criteria. Common Criteria for Information Technology Security Evaluation (Parts 1, 2, and 3). Technical report, The Common Criteria Project, August 1999.

[3] A. Dunsmore, M. Roper, and M. Wood. The Development and Evaluation of Three Diverse Techniques for Object-Oriented Code Inspection. IEEE transactions on software engineering, 29(8), 2003.

[4] G. Fink and M. Bishop. Property Based Testing: A New Approach to Testing for Assurance. In ACM SIGSOFT Software Engineering Notes, pages 74–80, July 1997.

[5] G. Bracha, T. Lindholm, W. Tao, and F. Yellin. CLDC Byte Code Typechecker Specification. http://jcp.org/aboutJava/communityprocess/final/jsr139/index.html, January 2003.

[6] I. Goldberg and D. Wagner. Randomness and the Netscape Browser. Dr. Dobb’s Journal of Software Tools, 21(1):66, 68–70, Jan. 1996.

[7] V. Gupta and S. Gupta. KSSL: Experiments in Wireless Internet Security. Technical Report TR-2001-103, Sun Microsystems, Inc, Santa Clara, California, USA, November 2001.

[8] D. Hugo. FExplorer Web Site. http://users.skynet.be/domi/fexplorer.htm.

[9] G. S. J. Gosling, B. Joy, and G. Bracha. The Java Language Specification Second Edition. The Java Series. Addison-Wesley, Boston, Mass., 2000.

[10] I. Krsul. Software Vulnerability Analysis. PhD thesis, Purdue University, 1998.

[11] S. Liang. Java Native Interface: Programmer’s Guide and Specification. Addison-Wesley, Reading, MA, USA, 1999.

[12] T. Lindholm and F. Yellin. The Java Virtual Machine Specification (Second Edition). Addison Wesley, April 1999.

[13] MEHARI. MEHARI. Technical report, Club de la Sécurité des Systèmes d’information Français, August 2000.

[14] S. MicroSystems. Connected, Limited Device Configuration. Specification Version 1.0, Java 2 Platform Micro Edition. Technical report, Sun MicroSystems, California, USA, May 2000.

[15] S. MicroSystems. KVM Porting Guide. Technical report, Sun MicroSystems, California, USA, September 2001.

[16] Nokia. Series 60 Platform. http://www.nokia.com/nokia/0,8764,46827,00.html.

[17] OMA. Implementation Best Practices for OMA DRM v1.0 Protected MIDlets, May 2004.

[18] J. V. Peursem. JSR 118 Mobile Information Device Profile 2.0, November 2002.

[19] Phenoelit Hackers Group. http://www.phenoelit.de/, 2003.

[20] R. Riggs, A. Taivalsaari, M. VandenBrink, and J. Holliday. Programming wireless devices with the Java 2 platform, micro edition: J2ME Connected Limited Device Configuration (CLDC), Mobile Information Device Profile (MIDP). Addison-Wesley, Reading, MA, USA, 2001.

[21] T. Sayeed, A. Taivalsaari, and F. Yellin. Inside The K Virtual Machine. http://java.sun.com/javaone/javaone2001/pdfs/1113.pdf, Jan 2001.

[22] Bug 4824821: Return value of midpInitializeMemory is not checked. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4824821, February 2003.

[23] Bug 4959337: RSA Division by Zero. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4959337, November 2003.

[24] Bug 4802893: RI checks sockets before checking permissions. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4802893, January 2004.

[25] Sun Microsystems. KNI Specification K Native Interface (KNI) 1.0. http://www.carfield.com.hk/java_store/j2me/j2me_cldc/doc/kni/html/index.html, October 2002.

[26] Sun Microsystems. The Recommended Security Policy for GSM/UMTS Compliant Devices, Addendum to the Mobile Information Device Profile version 2.0, 2002.

[27] H. H. Thompson, J. A. Whittaker, and F. E. Mottay. Software Security Vulnerability Testing in Hostile Environments. In SAC ’02: Proceedings of the 2002 ACM symposium on Applied computing, pages 260–264, New York, NY, USA, 2002. ACM Press.

[28] J. Viega, J. Bloch, Y. Kohno, and G. McGraw. ITS4: A Static Vulnerability Scanner for C and C++ Code. In ACSAC 2000, 2000.

[29] J. Viega, G. McGraw, T. Mutdosch, and E. Felten. Statically Scanning Java Code: Finding Security Vulnerabilities. IEEE Software, September/October 2000.