User: 如何使用Python编写一个脚本，用于自动化服务器上的常规任务，如备份和监控？
Assistant: 以下是一个使用Python编写的简单脚本，用于自动化服务器上的备份和监控任务：

备份脚本：

```python
import os
import shutil
from datetime import datetime

def backup(source_dir, destination_dir):
    today = datetime.now()
    backup_dir_name = today.strftime('%Y%m%d')
    backup_dir = os.path.join(destination_dir, backup_dir_name)
    os.mkdir(backup_dir)
    for root, dirs, files in os.walk(source_dir):
        for file in files:
            src_file = os.path.join(root, file)
            dst_file = os.path.join(backup_dir, os.path.relpath(src_file, source_dir))
            shutil.copy2(src_file, dst_file)

if __name__ == '__main__':
    source_dir = '/home/user/www'
    destination_dir = '/home/user/backups'
    backup(source_dir, destination_dir)
```

监控脚本：

```python
import psutil
import smtplib
from email.mime.text import MIMEText
from datetime import datetime

def check_cpu_usage(threshold):
    cpu_usage = psutil.cpu_percent()
    if cpu_usage > threshold:
        send_email('CPU usage is too high', f'Current CPU usage: {cpu_usage}%')

def send_email(subject, message):
    sender = 'youremail@example.com'
    password = 'yourpassword'
    recipients = ['recipient1@example.com', 'recipient2@example.com']
    smtp_server = 'smtp.example.com'
    smtp_port = 587
    msg = MIMEText(message)
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = ', '.join(recipients)
    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(sender, password)
    server.sendmail(sender, recipients, msg.as_string())
    server.quit()

if __name__ == '__main__':
    threshold = 80
    check_cpu_usage(threshold)
```

这些脚本只是取样的样例脚本，可以通过向其中添加更多代码来执行更多操作，例如备份数据库或配置文件、监测磁盘空间使用情况或与其他API交互等。用于自动化服务器管理的Python脚本的范围取决于管理员的需求和创造力。