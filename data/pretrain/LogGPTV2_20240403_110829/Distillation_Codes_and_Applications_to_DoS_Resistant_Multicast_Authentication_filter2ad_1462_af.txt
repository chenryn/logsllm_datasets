### References

1. In *Advances in Cryptology – CRYPTO '96*, volume 1109 of *Lecture Notes in Computer Science*, pages 1–15, 1996.
2. M. Bellare and C. Namprempre. "Authenticated encryption: Relations among notions and analysis of the generic composition paradigm." In *Advances in Cryptology – ASIACRYPT '00*, volume 1997 of *Lecture Notes in Computer Science*, pages 531–545, 2000.
3. M. Bellare and P. Rogaway. "Collision-resistant hashing: Towards making UOWHFs practical." In *Advances in Cryptology – CRYPTO '97*, volume 1294 of *Lecture Notes in Computer Science*, pages 470–484, 1997.
4. J. Benaloh and M. de Mare. "One-way accumulators: A decentralized alternative to digital signatures." In *Advances in Cryptology – EUROCRYPT '93*, volume 765 of *Lecture Notes in Computer Science*, pages 274–285, 1993.
5. J. Camenisch and A. Lysyanskaya. "Dynamic accumulators and application to efficient revocation of anonymous credentials." In *Advances in Cryptology – CRYPTO '02*, volume 2442 of *Lecture Notes in Computer Science*, pages 61–76, 2002.
6. V. Gligor. "Guaranteeing access in spite of service-flooding attacks." In *Proceedings of the Security Protocols Workshop*, April 2003.
7. P. Golle and N. Modadugu. "Authenticating streamed data in the presence of random packet loss." In *Proceedings of the Symposium on Network and Distributed Systems Security (NDSS 2001)*, pages 13–22. Internet Society, February 2001.
8. M. Goodrich, R. Tamassia, and J. Hasic. "An efficient dynamic and distributed cryptographic accumulator." In *Proceedings of Information Security Conference (ISC 2002)*, volume 2433 of *Lecture Notes in Computer Science*, pages 372–388, 2002.
9. B. Kaliski and M. Robshaw. "Message authentication with MD5." *RSA Cryptobytes*, 1(1):5–8, Spring 1995.
10. H. Krawczyk. "Distributed fingerprints and secure informational dispersal." In *Proceedings of the 13th ACM Symposium on Principles of Distributed Computing*, pages 207–218. ACM, 1993.
11. M. Luby. "LT codes." In *Proceedings of the 43rd Annual IEEE Symposium on Foundations of Computer Science (FOCS '02)*, pages 271–282, 2002.
12. M. Luby, M. Mitzenmacher, A. Shokrollahi, D. Spielman, and V. Stemann. "Practical loss-resilient codes." In *Proceedings of the 29th Annual ACM Symposium on Theory of Computing (STOC '97)*, pages 150–159, May 1997.
13. R. Merkle. "Protocols for public key cryptosystems." In *Proceedings of the IEEE Symposium on Research in Security and Privacy*, pages 122–134, April 1980.
14. S. Miner and J. Staddon. "Graph-based authentication of digital streams." In *Proceedings of the IEEE Symposium on Research in Security and Privacy*, pages 232–246, May 2001.
15. M. Naor and M. Yung. "Universal one-way hash functions and their cryptographic applications." In *Proceedings of the 21st Annual ACM Symposium on Theory of Computing (STOC '89)*, pages 33–43, May 1989.
16. K. Nyberg. "Fast accumulated hashing." In *Fast Software Encryption – Third International Workshop*, volume 1039 of *Lecture Notes in Computer Science*, pages 83–87, 1996.
17. A. Pannetrat and R. Molva. "Efficient multicast packet authentication." In *Proceedings of the Symposium on Network and Distributed System Security Symposium (NDSS 2003)*. Internet Society, February 2003.
18. J. M. Park, E. Chong, and H. J. Siegel. "Efficient multicast packet authentication using erasure codes." *ACM Transactions on Information and System Security (TISSEC)*, 6(2):258–285, May 2003.
19. J. M. Park, E. K. Chong, and H. J. Siegel. "Efficient multicast packet authentication using signature amortization." In *Proceedings of the IEEE Symposium on Research in Security and Privacy*, pages 227–240, May 2002.
20. A. Perrig. "The BiBa one-time signature and broadcast authentication protocol." In *Proceedings of the Eighth ACM Conference on Computer and Communications Security (CCS-8)*, pages 28–37, Philadelphia PA, USA, November 2001.
21. A. Perrig, R. Canetti, D. Song, and J. D. Tygar. "Efficient and secure source authentication for multicast." In *Proceedings of the Symposium on Network and Distributed Systems Security (NDSS 2001)*, pages 35–46. Internet Society, February 2001.
22. A. Perrig, R. Canetti, J. D. Tygar, and D. Song. "Efficient authentication and signature of multicast streams over lossy channels." In *Proceedings of the IEEE Symposium on Research in Security and Privacy*, pages 56–73, May 2000.
23. A. Perrig and J. D. Tygar. *Secure Broadcast Communication in Wired and Wireless Networks*. Kluwer Academic Publishers, 2002.
24. M. Rabin. "Efficient dispersal of information for security, load balancing, and fault tolerance." *Journal of the ACM*, 36(2):335–348, 1989.
25. I. Reed and G. Solomon. "Polynomial codes over certain finite fields." *Journal of the Society for Industrial and Applied Mathematics*, 8(2):300–304, 1960.
26. L. Reyzin and N. Reyzin. "Better than BiBa: Short one-time signatures with fast signing and verifying." In *Seventh Australasian Conference on Information Security and Privacy (ACISP 2002)*, July 2002.
27. L. Rizzo. "Effective erasure codes for reliable computer communication protocols." *ACM Computer Communication Review*, 27(2):24–36, April 1997.
28. T. Sander. "Efficient accumulators without trapdoor extended abstracts." In *Information and Communication Security, Second International Conference – ICICS '99*, volume 1726 of *Lecture Notes in Computer Science*, pages 252–262, 1999.
29. D. Song, D. Zuckerman, and J. D. Tygar. "Expander graphs for digital stream authentication and robust overlay networks." In *Proceedings of the IEEE Symposium on Research in Security and Privacy*, pages 258–270, May 2002.
30. H. Weatherspoon, C. Wells, P. R. Eaton, B. Y. Zhao, and J. D. Kubiatowicz. "Silverback: A global-scale archival system." *Technical Report UCB//CSD-01-1139*, University of California at Berkeley, 2000.
31. C. Wong and S. Lam. "Digital signatures for flows and multicasts." In *Proceedings of the 6th International Conference on Network Protocols (ICNP '98)*, pages 198–209. IEEE, October 1998.

### Security Analysis of Distillation Codes: Authenticity

We will demonstrate that if the `TAG` and `VALIDATE` algorithms satisfy the integrity of plaintext, then a distillation code using these algorithms also satisfies the integrity of plaintext. We will adapt Bellare and Namprempre's notion of integrity of plaintext (INT-PTXT) [6] to the public key setting. Note that their definition was in the context of encryption and decryption algorithms, while we frame ours in terms of encoding and decoding algorithms.

#### Definitions and Notation

We define a public key encoding scheme \( \text{PKE} = (K, E, D) \) to consist of three algorithms:
1. The randomized key generation algorithm \( K \) takes a natural number \( k \in \mathbb{N} \) as its security parameter and outputs a public key \( K_{\text{pub}} \) and private key \( K_{\text{priv}} \):
   \[
   (K_{\text{pub}}, K_{\text{priv}}) \leftarrow K(k)
   \]
2. The encoding algorithm \( E \) uses the private key \( K_{\text{priv}} \) to encode a message \( M \) into a ciphertext \( C \), possibly using a randomization source:
   \[
   C \leftarrow E_{K_{\text{priv}}}(M)
   \]
3. The decoding algorithm \( D \) uses the public key \( K_{\text{pub}} \) to authenticate the ciphertext \( C \). It returns a plaintext if it can authenticate the ciphertext, or \( \bot \) if it cannot validate the ciphertext:
   \[
   P \leftarrow D_{K_{\text{pub}}}(C) \quad \text{where} \quad P \in \{\bot\} \cup \{0, 1\}^*
   \]
For all encoding schemes, we require:
\[
M = D_{K_{\text{pub}}}(E_{K_{\text{priv}}}(M))
\]

We now provide an authenticity definition for a public key encoding scheme \( \text{PKE}(K, E, D) \). A verification algorithm \( D^*_{K_{\text{pub}}} \) takes a ciphertext and returns a boolean value indicating whether the decoding was successful:
\[
D^*_{K_{\text{pub}}} : C \in \{0, 1\}^* \mapsto \{0, 1\}
\]
\[
\text{ALGORITHM } D^*_{K_{\text{pub}}}:
\]
\[
\text{if } D_{K_{\text{pub}}}(C) \neq \bot \text{ return } 1
\]
\[
\text{return } 0
\]

We allow an adversary access to \( K_{\text{pub}} \), an encoding oracle, and a verification oracle to try to break the encoding scheme. The adversary is able to violate the integrity of the encoding scheme if it can produce a ciphertext whose plaintext was never passed to the encoding algorithm \( E_{K_{\text{priv}}}(\cdot) \). If it is computationally difficult for an adversary to produce such a plaintext, the encoding scheme is said to offer integrity of plaintext, abbreviated INT-PTXT.

#### Definition 2: Integrity of a Public Key Encoding Scheme

Let \( \text{PKE}(K, E, D) \) be a public key encoding scheme. Let \( k \in \mathbb{N} \) and \( A \) be an adversary that has access to an encoding oracle \( E(\cdot) \) and a verification oracle \( D^*(\cdot) \). Then, consider the following experiment:

\[
\text{EXPERIMENT } \text{Exp}_{\text{PKE},A} : k \in \mathbb{N} \mapsto \{0, 1\}
\]
\[
(K_{\text{pub}}, K_{\text{priv}}) \leftarrow K(k)
\]
\[
\text{if } A^{E_{K_{\text{priv}}}(\cdot), D^*_{K_{\text{pub}}}(\cdot)}(k, K_{\text{pub}}) \text{ makes a query to } D^*_{K_{\text{pub}}}(\cdot) \text{ such that:}
\]
\[
D^*_{K_{\text{pub}}}(C) = 1 \text{ and } D_{K_{\text{pub}}}(C) \text{ was never a query to } E_{K_{\text{priv}}}(\cdot)
\]
\[
\text{then return } 1
\]
\[
\text{else return } 0
\]

The advantage of the adversary is the probability that the adversary can produce a query to the decoder that returns success for which the corresponding plaintext was never passed to the encoder. Specifically:
\[
\text{Adv}_{\text{PKE},A}(k) \triangleq \Pr[\text{Exp}_{\text{PKE},A}(k) = 1]
\]

We define the advantage function of the scheme in terms of \( \tau \), the running time of the adversary, \( q_e \), the number of queries the adversary makes to the encoding algorithm \( E \) with total length \( \mu_e \), and \( q_d \), the number of queries the adversary makes to the verification algorithm \( D^* \) with total length \( \mu_d \) as:
\[
\text{Adv}_{\text{PKE}}(k, \tau, q_e, q_d, \mu_e, \mu_d) \triangleq \max_A \{\text{Adv}_{\text{PKE},A}(k)\}
\]

The scheme \( \text{PKE} \) satisfies INT-PTXT if \( \text{Adv}_{\text{PKE},A}(k) \) is negligible for any adversary \( A \) with time-complexity polynomial in \( k \).

#### Distillation Codes

We now briefly present distillation codes in the public key encoding framework. Distillation codes use an underlying public key encoding scheme \( \text{PKE}_V = (K_V, E_V, D_V) \) that provides integrity protection. To refer to an instantiation of a particular distillation code, we write \( \text{PKE}_{\text{DC}} = (K_{\text{DC}}, E_{\text{DC}}, D_{\text{DC}}) \). This distillation code uses the underlying code \( \text{PKE}_V \) to provide integrity protection. The key generation algorithm \( K_{\text{DC}} \) returns a public-private keypair \( (K_{\text{DC, pub}}, K_{\text{DC, priv}}) \). Since the distillation code can decode despite symbol loss, the decoding algorithm takes a string composed of either symbols or \( \bot \) to represent a missing symbol: \( s^\bot_1 || s^\bot_2 || \ldots || s^\bot_n \) where \( s^\bot_i \in \{\bot, s_i\} \).

We set \( r \) to be the input message size; \( (n, t) \) represent the erasure coding parameters: \( n \) the number of encoded symbols per message, and \( t \) the maximum number of symbols that can be lost for successful reconstruction; \( m \) to be the size of the encoded erasure symbols; and \( f \) the maximum attack factor, as defined in Section 2.5. We consider all of these as fixed parameters for a particular instantiation of \( \text{PKE}_V \).

We abstract distillation code key generation, encoding, and decoding algorithms from Figures 2 and 3. We define the algorithm \( \text{DE}(\cdot) \) to be steps 2-3 of DISTILLATION ENCODE that erasure encodes the authenticated data and augments them with the accumulator values. We define the algorithm \( \text{DC}(\cdot) \) to be steps 1-3 of DISTILLATION DECODE from Figure 3 that returns a set of candidate reconstructions.

\[
\text{ALGORITHM } K_{\text{DC}} : k \in \mathbb{N} \mapsto (K_{\text{DC, pub}}, K_{\text{DC, priv}})
\]
\[
K_V \leftarrow K(k)
\]
\[
\text{return } K
\]

\[
\text{ALGORITHM } E_{\text{DC}} : M \in \{0, 1\}^r \mapsto \{s\}^n
\]
\[
C \leftarrow \text{DE}(E_V(M))
\]
\[
\text{return } C
\]

\[
\text{ALGORITHM } D_{\text{DC}} : C \in \{\bot\} \cup \{0, 1\}^m \mapsto \{0, 1\}^r \cup \{\bot\}
\]
\[
R \leftarrow \text{DC}(C)
\]
\[
\text{for each } R \in R
\]
\[
\text{if } D_V(R) \neq \bot \text{ return } D_V(R)
\]
\[
\text{return } \bot
\]

#### Theorem 3

If \( \text{PKE}_V = (K_V, E_V, D_V) \) is INT-PTXT secure, then the distillation code \( \text{PKE}_{\text{DC}} = (K_{\text{DC}}, E_{\text{DC}}, D_{\text{DC}}) \) is also INT-PTXT secure.

**Proof.** Assume there exists an adversary \( A^{E_{\text{DC}}(\cdot), D^*_{\text{DC}}(\cdot)} \) that can violate the INT-PTXT property of a distillation code \( \text{PKE}_{\text{DC}} \). Then, we will provide a construction for an adversary \( B^{E_V(\cdot), D^*_V(\cdot)} \) that can break any INT-PTXT secure encoding scheme \( \text{PKE}_V \). In other words, we will create an adversary \( B \) that makes a query \( C_V \) to \( D^*_V(\cdot) \) such that \( D_V(C_V) \neq \bot \) and \( D_V(C_V) \) was never a query to \( E_V(\cdot) \). We will prove that the advantage for adversary \( B \) will be at least as large as that held by adversary \( A \).

\[
\text{Adv}_{\text{PKE}_{\text{DC}}, A}(k) \leq \text{Adv}_{\text{PKE}_V, B}(k)
\]

Furthermore, if \( A \) runs in time \( t \) using \( q_e \) encoding queries of total length \( \mu_e \) and \( q_d \) verification queries of total length \( \mu_d \), then \( B \) will run in the same query size parameters \( \mu_e \) and \( \mu_d \) making \( q_e \) encoding and \( \leq \left( \binom{n}{f} + 1 \right) q_d \) verification queries.

The adversary \( B \) will use the adversary \( A \) to break \( \text{PKE}_V \). It will emulate the distillation code encoding and verification process fully so that \( A \) will believe that it is interacting with a true distillation encoder and verifier. Thus, \( B \) will take in the security parameter \( k \) and a public key and will output a ciphertext \( C \). Specifically:

\[
\text{ADVERSARY } B^{E_V(\cdot), D^*_V} : K_{\text{pub}} \times k \in \mathbb{N} \mapsto \{0, 1\}
\]
\[
\text{for } i = 1 \ldots (q_d + q_e) \text{ do}
\]
\[
\text{when } A \text{ makes a query } M \text{ to its encoding oracle } E_{\text{DC}}(\cdot),
\]
\[
\text{do } A \leftarrow \text{DE}(E_V(M))
\]
\[
\text{when } A \text{ makes a query } T \text{ to its verification oracle } D^*_{\text{DC}}(\cdot),
\]
\[
\text{do } \{R_1, \ldots, R_l\} \leftarrow \text{DC}(T)
\]
\[
\text{for } j = 1, \ldots, l
\]
\[
\text{if } D^*_{K_{\text{pub}}}(R_j) = 1
\]
\[
A \leftarrow 1; \text{ return}
\]
\[
A \leftarrow 0
\]

Suppose, in the course of its run, adversary \( A \) has advantage \( \alpha = \text{Adv}_{\text{PKE}_{\text{DC}}, A} \). In other words, it succeeds in breaking the distillation code in an \( \alpha \) fraction of its executions. Consider such an execution. In this execution, let \( C \) denote the first query that \( A \) makes to the verification oracle \( D^*_{\text{DC}}(C) \) for which it has never made the query \( E_{\text{DC}}(D_{\text{DC}}(C)) \) with \( D_{\text{DC}}(C) \neq \bot \). By construction of \( D_{\text{DC}} \), this means that there exists some \( R_i \) and for which \( D_V(R_i) \neq \bot \). Now, to show this violates the INT-PTXT property of \( \text{PKE}_V \), we need to verify that \( D_V(R_i) \) was never a query to \( E_V(\cdot) \). We know that \( D_V(R_i) = D_{\text{DC}}(C) \) and \( D_{\text{DC}}(C) \) was never a query to \( E_{\text{DC}}(\cdot) \). This means that \( D_V(R_i) \) was never a query to \( E_V(\cdot) \). Thus, the advantage that adversary \( B \) has in breaking \( \text{PKE}_V \) is at least as large as \( A \) has in breaking \( \text{PKE}_{\text{DC}} \). Thus, we have a contradiction since we assumed that \( \text{PKE}_V \) is INT-PTXT, implying that there can be no adversary that breaks \( \text{PKE}_V \) with non-negligible probability.

We note that \( B \) will make more queries to the decoding oracle than \( A \). Since a given ciphertext can produce many candidate reconstructions, each of which needs to be validated, \( B \) will make more queries to its validation oracle. In fact, as argued in Section 3.4.3, there will be at most \( \left( \binom{n}{f} + 1 \right) \) candidate reconstructions. Thus, if \( A \) makes \( q_d \) validation oracle calls, \( B \) will make \( \leq \left( \binom{n}{f} + 1 \right) q_d \) validation oracle calls.