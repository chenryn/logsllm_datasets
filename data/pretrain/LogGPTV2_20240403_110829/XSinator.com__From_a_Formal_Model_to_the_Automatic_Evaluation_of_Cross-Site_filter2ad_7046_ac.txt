### Overview of XS-Leaks Attacks

**Table 1: Overview of XS-Leaks attacks sorted by their detectable differences, integrated into our formal model. Novel attack techniques are indicated by +.**

#### Payment Request API
After the website queries the API to request payment, the browser displays a UI pop-up to the user, who can confirm the purchase with a single click. The standard specification recommends a global limit of one singular UI element [28]. If the target website is using the Payment Request API, any further attempts to show this UI will be blocked and will cause a JavaScript exception. The attacker can exploit this by periodically attempting to show the Payment API UI. If an attempt causes an exception, the target website is currently using it. The attacker can hide these periodic attempts by immediately closing the UI after creation, ensuring the browser never shows the UI and the user remains unaware of the attack.

**Example Attack:**
A specific product provided by `shop.org` is advertised on `blog.com` using an affiliate link. The operator of `shop.org` can use this attack to identify if a customer bought the product after clicking the provided affiliate link.

### Session 6B: Web Vulnerabilities
CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea

### 5.2 Leak Technique: Performance API
We developed new XS-Leak attacks based on the Performance API, which allows an attacker to leak various characteristics of the target page.

**Details:**
The Performance API provides access to the performance information of the current page, including detailed network timing data for the document and every resource the page loads. Terjanq [55] demonstrated how to detect the X-Frame-Options header in GC. Building on his work, we created novel attacks that differentiate between status codes, detect empty pages, and determine if the XSS-Auditor is executed. We also improved terjanq’s work to detect X-Frame-Options in non-Chromium-based browsers. The Performance API specifies that all fetched resources must create a performance entry [29]. We identified cases where browsers do not create an entry for a specific request, allowing attackers to differentiate requests by checking for the presence of a performance entry. The following eight new XS-Leak attacks are based on this observation:

- **Error Leak:** Differentiates between HTTP response status codes because requests that lead to an error do not create a performance entry. We also identified two cases where browser bugs in GC result in resources being loaded twice, leading to multiple entries in the Performance API.
- **Empty Page Leak:** Detects if a request resulted in an empty HTTP response body because empty pages do not create a performance entry in some browsers.
- **XSS-Auditor Leak:** In SA, detects if the XSS-Auditor was triggered, leaking sensitive information. The XSS-Auditor, designed to mitigate Cross-Site Scripting (XSS) attacks, blocks benign scripts with false positives. Based on Braun and Heiderich's technique [7], researchers can exfiltrate information and detect specific content on a cross-origin page. Blocked pages do not create Performance API entries, allowing attackers to leak sensitive information.
- **X-Frame Leak:** Detects the X-Frame-Options header, as pages not allowed to be rendered in an iframe do not create a performance entry.
- **Download Detection:** Resources downloaded due to the Content-Disposition header do not create a performance entry, applicable in all major browsers.
- **Redirect Start Leak:** Abuses the behavior of some browsers that log too much information for cross-origin requests. In SA, it is possible to detect if the user is redirected by querying the Performance API and checking for the redirectStart timing data.
- **Duration Redirect Leak:** In GC, the duration for requests resulting in a redirect is negative, distinguishing them from other requests.
- **CORP Leak:** In GC, when the CORP header is set, the nextHopProtocol will be empty. In SA, no performance entry is created for CORP-enabled resources.

### 5.3 Leak Technique: Error Messages
**CORS Error:**
This technique allows an attacker to leak the target of a redirect initiated by a cross-origin site. CORS is used to explicitly allow access between cross-origin sites that would otherwise be forbidden by the SOP. In Webkit-based browsers, CORS error messages are accessible when a CORS request fails. An attacker can send a CORS-enabled request to a target website that redirects based on the user state. When the browser denies the request, the full URL of the redirect target is leaked in the error message, enabling detection of redirects and leakage of sensitive query parameters.

**SRI Error:**
An attacker can leak the size of cross-origin responses due to verbose error messages. The integrity attribute defines a cryptographic hash for verifying the integrity of fetched resources. For SRI, cross-origin resources must be CORS-enabled. By specifying a bogus hash value, an attacker can trigger an error and leak the content length of the requested resource, enabling powerful XS-Leak attacks.

### 5.4 Leak Technique: Readable Attributes
**COOP:**
An attacker can leak if the Cross-Origin Opener Policy (COOP) header is available within a cross-origin HTTP response. Web applications deploy the COOP response header to prevent other websites from gaining arbitrary window references to the application. This header can be detected by trying to read the contentWindow reference. If a site only deploys COOP in one state, this property is undefined; otherwise, it is defined.

### 6. Evaluation Results
**Table 2: Evaluation results overview categorized by detectable differences. Successful attacks are depicted with full circles (○), safe browsers are indicated with empty circles (○). The results for Android browsers are almost identical to desktop browsers, while iOS browsers behave differently. Only a few XS-Leaks are susceptible to all browsers. More detailed evaluation tables are found in the Appendix, Tables 3 and 4.**

**Session 6B: Web Vulnerabilities**
CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea

### 6.1 Browser Comparison
**Blink vs. Webkit:**
On the desktop, GC 90, MSE 90, and OP 75, based on Chromium’s Blink engine, behave equally in our test suite. Blink-based browsers are vulnerable to the fetch redirect XS-Leak, a known bug in SA fixed in February 2020 [73]. Both Blink- and Webkit-based browsers are vulnerable to multiple Performance API XS-Leaks. Google developers have been addressing these leaks, but it is still possible to detect new security headers like the CORP header. Webkit-based browsers remain vulnerable to a variety of XS-Leaks based on the Performance API.

**Desktop Tor vs. Firefox:**
Tor aims to defend against surveillance and resist fingerprinting. To evaluate its resilience to XS-Leaks, we compared Tor (based on FF78) with FF, both using the Gecko engine. Tor has more restrictive settings, with some APIs deactivated. Despite this, a subset of FF XS-Leaks still works. In Tor’s secure mode, certain attacks like the WebSocket XS-Leak are mitigated, but eleven XS-Leaks still work. While FF is resistant to Performance API-based XS-Leaks, the Performance API is completely disabled in Tor, significantly limiting the attack surface.

### Conclusion
Our evaluation highlights the differences in vulnerability across different browser families and versions. The results provide insights into the adoption of new features and the effectiveness of security patches. Detailed evaluation tables and real-time browser evaluations are available on XSinator’s website and in the Appendix.