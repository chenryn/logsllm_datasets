## PostgreSQL monitor - check_postgres usage - 1  
### 作者             
digoal              
### 日期              
2013-06-05                                        
### 标签                                                                                                                              
PostgreSQL , 监控 , nagios , check_postgres            
----              
## 背景        
前面介绍了nagios的安装和配置, 本文要进入主题了, 介绍一下PostgreSQL的监控.  
这里要用到的是Bucardo提供的PostgreSQL监控脚本, check_postgres.pl.   
它兼容nagios, cacti, mrtg等监控平台软件. 使用perl语言编写, 支持监控的项目较多.  
check_postgres依赖以下perl模块 :   
```  
Access to a working version of psql, and the following very standard Perl modules:  
Cwd  
Getopt::Long  
File::Basename  
File::Temp  
Time::HiRes (if $opt{showtime} is set to true, which is the default)  
The settings_checksum action requires the Digest::MD5 module.  
The checkpoint action requires the Date::Parse module.  
Some actions require access to external programs. If psql is not explicitly specified, the command which is used to find it. The program /bin/df is needed by the disk_space action.  
```  
1\. 安装perl  
```  
yum install -y perl  
```  
2\. 查看依赖的perl模块是否已安装 :   
```  
pg92@db-172-16-3-39-> perl -MCwd -e 1  
pg92@db-172-16-3-39-> echo $?  
0  
pg92@db-172-16-3-39-> perl -MGetopt::Long -e 1  
pg92@db-172-16-3-39-> perl -MFile::Basename -e 1  
pg92@db-172-16-3-39-> perl -MFile::Temp -e 1  
pg92@db-172-16-3-39-> perl -MTime::HiRes -e 1  
pg92@db-172-16-3-39-> perl -MDigest::MD5 -e 1  
pg92@db-172-16-3-39-> perl -MDate::Parse -e 1  
Can't locate Date/Parse.pm in @INC (@INC contains: /usr/lib64/perl5/site_perl/5.8.8/x86_64-linux-thread-multi /usr/lib/perl5/site_perl/5.8.8 /usr/lib/perl5/site_perl /usr/lib64/perl5/vendor_perl/5.8.8/x86_64-linux-thread-multi /usr/lib/perl5/vendor_perl/5.8.8 /usr/lib/perl5/vendor_perl /usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi /usr/lib/perl5/5.8.8 .).  
BEGIN failed--compilation aborted.  
```  
3\. 安装依赖的perl模块  
从以上检测可以看出Date::Parse未安装.   
方法1,使用cpan安装, 需要联网.   
```  
[root@db-172-16-3-39 nrpe-2.14]# cpan Date::Parse  
```  
方法2,使用源码安装略  
4\. 下载check_postgres  
```  
wget http://bucardo.org/downloads/check_postgres.tar.gz  
```  
解压  
```  
tar -zxvf check_postgres.tar.gz  
```  
5\. check_postgres用法  
5\.1 命令行参数  
输出格式参数, check_postgres支持nagios, mrtg, simple(cacti)格式, 本例选择nagios格式.  
```  
--output=nagios  
```  
连接数据库的参数 :   
```  
-H NAME or --host=NAME  
-p PORT or --port=PORT  
-db NAME or --dbname=NAME  
-u USERNAME or --dbuser=USERNAME  
--dbpass=PASSWORD  
--dbservice=NAME  
```  
使用--dbservice时需要配置~/.pg_service.conf, 最好不要使用密码, 配置本地的pg_hba.conf 127.0.0.1为trust即可.  
如果一定要配置密码的话, 那最好配置在~/.pgpass密码文件中, 并且使用400权限.  
psql路径参数 :   
```  
--PGBINDIR  
```  
使用PGBINDIR前需要修改check_postgres.pl脚本中的 our $NO_PSQL_OPTION = 0;  
创建符号链接的参数, 可以省去每次输入--action, 如果要以nagios为默认输出格式, 那么路径名中需要包含nagios.  
```  
[root@db-172-16-3-33 check_postgres-2.20.0]# mkdir /opt/nagios  
[root@db-172-16-3-33 check_postgres-2.20.0]# cd /opt/nagios  
[root@db-172-16-3-33 nagios]# ll  
total 0  
[root@db-172-16-3-33 nagios]# /opt/soft_bak/check_postgres-2.20.0/check_postgres.pl --symlinks  
Created "check_postgres_archive_ready"  
Created "check_postgres_autovac_freeze"  
Created "check_postgres_backends"  
Created "check_postgres_bloat"  
Created "check_postgres_checkpoint"  
Created "check_postgres_cluster_id"  
Created "check_postgres_commitratio"  
Created "check_postgres_connection"  
Created "check_postgres_custom_query"  
Created "check_postgres_database_size"  
Created "check_postgres_dbstats"  
Created "check_postgres_disabled_triggers"  
Created "check_postgres_disk_space"  
Created "check_postgres_fsm_pages"  
Created "check_postgres_fsm_relations"  
Created "check_postgres_hitratio"  
Created "check_postgres_hot_standby_delay"  
Created "check_postgres_index_size"  
Created "check_postgres_last_analyze"  
Created "check_postgres_last_autoanalyze"  
Created "check_postgres_last_autovacuum"  
Created "check_postgres_last_vacuum"  
Created "check_postgres_listener"  
Created "check_postgres_locks"  
Created "check_postgres_logfile"  
Created "check_postgres_new_version_bc"  
Created "check_postgres_new_version_box"  
Created "check_postgres_new_version_cp"  
Created "check_postgres_new_version_pg"  
Created "check_postgres_new_version_tnm"  
Created "check_postgres_pgagent_jobs"  
Created "check_postgres_pgb_pool_cl_active"  
Created "check_postgres_pgb_pool_cl_waiting"  
Created "check_postgres_pgb_pool_maxwait"  
Created "check_postgres_pgb_pool_sv_active"  
Created "check_postgres_pgb_pool_sv_idle"  
Created "check_postgres_pgb_pool_sv_login"  
Created "check_postgres_pgb_pool_sv_tested"  
Created "check_postgres_pgb_pool_sv_used"  
Created "check_postgres_pgbouncer_backends"  
Created "check_postgres_pgbouncer_checksum"  
Created "check_postgres_prepared_txns"  
Created "check_postgres_query_runtime"  
Created "check_postgres_query_time"  
Created "check_postgres_relation_size"  
Created "check_postgres_replicate_row"  
Created "check_postgres_same_schema"  
Created "check_postgres_sequence"  
Created "check_postgres_settings_checksum"  
Created "check_postgres_slony_status"  
Created "check_postgres_table_size"  
Created "check_postgres_timesync"  
Created "check_postgres_txn_idle"  
Created "check_postgres_txn_time"  
Created "check_postgres_txn_wraparound"  
Created "check_postgres_version"  
Created "check_postgres_wal_files"  
```  
5\.2 环境变量和相关文件 :   
PATH : check_postgres依赖psql命令, 因此需要将$PGHOME/bin配置到PATH. 除此之外也可以使用--PGBINDIR参数指定psql的bin目录.  
```  
~/.pg_service.conf : 这个文件用于--dbservice参数.  
```  
\~/.pg_service.conf格式举例 :   
```  
[root@db-172-16-3-33 nagios]# cat ~/.pg_service.conf   
[mydb1]  
hostaddr=127.0.0.1  
port=1999  
user=postgres  
dbname=postgres  
password=postgres  
[mydb2]  
hostaddr=172.16.3.39  
port=1919  
user=postgres  
dbname=postgres  
password=postgres  
```  
设置了密码, 最好设置一下权限  
```  
chmod 400 ~/.pg_service.conf  
```  
5\.3 阈值参数  
```  
--warning=VAL or -w VAL  
Sets the threshold at which a warning alert is fired. The valid options for this option depends on the action used.  
--critical=VAL or -c VAL  
Sets the threshold at which a critical alert is fired. The valid options for this option depends on the action used.  
-t VAL or --timeout=VAL  
Sets the timeout in seconds after which the script will abort whatever it is doing and return an UNKNOWN status. The timeout is per Postgres cluster, not for the entire script. The default value is 10; the units are always in seconds.  
```  
5\.4 check_postgres的返回值对应nagios状态 :   
```  
0 : OK  
1 : WARNING  
2 : CRITICAL  
3 : UNKNOWN  
```  
6\. 使用举例  
6\.1 将check_postgres目录移动到合适位置, 赋予postgres用户可执行权限. 本例将使用postgres数据库启动用户调用这些命令.  
```  
[root@db-172-16-3-39 ~]# cd /opt  
[root@db-172-16-3-39 opt]# mv /opt/soft_bak/check_postgres-2.20.0 /opt/  
[root@db-172-16-3-39 opt]# chown -R pg92:pg92 /opt/check_postgres-2.20.0  
[root@db-172-16-3-39 opt]# chmod 755 /opt/check_postgres-2.20.0/check_postgres.pl  
```  
6\.2 配置pg92用户.bash_profile, 确保psql在路径中.  
```  
[root@db-172-16-3-39 opt]# su - pg92  
pg92@db-172-16-3-39-> cat .bash_profile   
export PGHOME=/opt/pgsql92  
export PATH=$PGHOME/bin:$PATH:.  
```  
6\.3 配置数据库pg_hba.conf, 允许本地trust连接.  
```  
pg92@db-172-16-3-39-> vi $PGDATA/pg_hba.conf  
host    all             all             127.0.0.1/32            trust  
```  
重载  
```  
pg92@db-172-16-3-39-> pg_ctl reload -D $PGDATA  
server signaled  
```  
6\.4 监控项详解, 抽取部分check_postgres常用的监控项详细讲解.  
6\.4\.1 监控归档 :   
```  
Checks how many WAL files with extension .ready exist in the pg_xlog/archive_status directory, which is found off of your data_directory.   
This action must be run as a superuser, in order to access the contents of the pg_xlog/archive_status directory.  
The --warning and --critical options are simply the number of .ready files in the pg_xlog/archive_status directory.   
Usually, these values should be low, turning on the archive mechanism, we usually want it to archive WAL files as fast as possible.  
If the archive command fail, number of WAL in your pg_xlog directory will grow until exhausting all the disk space and force PostgreSQL to stop immediately.  
```  
需要超级用户, 因为需要查看归档状态目录, ready结尾文件越少越好, 太大说明归档速度太慢. 测试监控如下, 10个警告, 20个严重. 如果这个值过大, DBA要考虑提高一下归档目录的写性能了.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=archive_ready -w 10 -c 20  
POSTGRES_ARCHIVE_READY OK: DB "postgres" (host:127.0.0.1) (port=1919) WAL ".ready" files found: 0 | time=0.01s files=0;10;20   
```  
6\.4\.2 freeze监控 :   
```  
The --warning and --critical options should be expressed as percentages.   
The 'age' of the transactions in each database is compared to the autovacuum_freeze_max_age setting (200 million by default) to generate a rounded percentage.   
The default values are 90% for the warning and 95% for the critical.   
Databases can be filtered by use of the --include and --exclude options.  
```  
因为当表的age达到一定值后, 数据库必须对这个表执行vacuum freeze操作, 确保数据不会因为mvcc机制而"消失", 不是真正的消失.  
例如 :   