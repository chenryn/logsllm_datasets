# 7-Zip：RAR和ZIP的多个内存损坏漏洞
##### 译文声明
本文是翻译文章，文章原作者 landave，文章来源：landave.io/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
在我此前发布的文章（  ）中，有两个和7-Zip有关的Bitdefender漏洞，我在文章中明确提到了Igor
Pavlov开发的7-Zip版本没有受到影响。然而，本次所发现的漏洞，该版本则受到了影响。  
在我对一个优秀防病毒产品进行分析的过程中，我发现了这些漏洞。目前厂商暂未发布补丁程序，因此一旦确认有哪些产品受到影响，我会及时对本文进行更新，补充受影响产品的名称。由于Igor
Pavlov已经发布了7-Zip的修复后版本，并且在7-Zip上更容易利用这些漏洞，所以我认为应该尽快发布这篇文章。
## 二、简介
在本文中，我将描述两个7-Zip漏洞，该漏洞影响18.00版本前的所有版本，包括p7zip。第一个漏洞（RAR的PPMd算法）较为严重，我们会重点进行分析。第二个漏洞（ZIP
Shrink）没有第一个漏洞那么严重，也比第一个漏洞更容易理解。
## 三、RAR PPMd内存损坏漏洞（CVE-2018-5996）
7-Zip的RAR部分代码主要基于最新的UnRAR版本。对于RAR格式的第3版本，可以使用PPMd算法，该算法是Dmitry
Shkarin的PPMII压缩算法的具体实现。如果大家想了解更多关于PPMd和PPMII算法的细节，建议阅读Shkarin关于PPM的论文：
。  
有趣的是，7z压缩格式也可以使用PPMd算法，7-Zip使用与RAR3相同的代码。事实上，在Bitdefender使用了一种非常特别的PPMd实现方式，会导致基于栈的缓冲区溢出（
 ）。  
从实质上来看，这个漏洞是由于7-Zip的RAR3处理程序中异常处理不正确所导致的。因此，大家可能会说，这并不是PPMd代码本身的漏洞，也不是UnRAR解压缩代码中的漏洞。
###  3.1 漏洞描述
在RAR处理程序中，有一个NArchive::NRar::CHandler::Extract2函数，其中包含一个如下所示的循环（该循环过程非常简单）：
    for (unsigned i = 0;; i++, /*OMITTED: unpack size updates*/) {
      //OMITTED: retrieve i-th item and setup input stream
      CMyComPtr commonCoder;
      switch (item.Method) {
        case '0':
        {
          commonCoder = copyCoder;
          break;
        }
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        {
          unsigned m;
          for (m = 0; m SetOperationResult(NExtract::NOperationResult::kUnsupportedMethod));
          continue;
      }
      HRESULT result = commonCoder->Code(inStream, outStream, &packSize, &outSize, progress);
      //OMITTED: encryptedness, outsize and crc check
      outStream.Release();
      if (result != S_OK) {
        if (result == S_FALSE) { opRes = NExtract::NOperationResult::kDataError; }
        else if (result == E_NOTIMPL) { opRes = NExtract::NOperationResult::kUnsupportedMethod; }
        else { return result; }
      }
      RINOK(extractCallback->SetOperationResult(opRes));
    }
在这个函数中，需要关注的是，函数最多只会为每个RAR解压缩版本创建一个编码器。如果压缩包中包含多个使用相同RAR解压缩版本压缩的项目，那么这些项目将使用相同的编码对象（Coder
Object）进行解码。  
此外，还要注意的是，Code方法的调用可能会失败，并返回S_FALSE这一结果，由于回调（Callback）函数没有捕获到成功的结果，所以已经创建的编码器将会被下一个项目重新使用。接下来，让我们看看错误代码S_FALSE可能来源于哪里。简化后的NCompress::NRar3::CDecoder::Code3方法如下所示：
    STDMETHODIMP CDecoder::Code(ISequentialInStream *inStream, ISequentialOutStream *outStream,
        const UInt64 *inSize, const UInt64 *outSize, ICompressProgressInfo *progress) {
      try {
        if (!inSize) { return E_INVALIDARG; }
        //OMITTED: allocate and initialize VM, window and bitdecoder
        _outStream = outStream;
        _unpackSize = outSize ? *outSize : (UInt64)(Int64)-1;
        return CodeReal(progress);
      }
      catch(const CInBufferException &e)  { return e.ErrorCode; }
      catch(...) { return S_FALSE; }
    }
其中，CInBufferException非常有趣。顾名思义，这个异常可能会在从输入流读取时被抛出。在对RAR3压缩文件进行操作的过程中，非常容易触发这一异常，从而导致返回错误代码S_FALSE。我建议有兴趣的读者自行尝试研究其具体原理和细节。  
那么，我为什么说它非常有趣呢？原因在于，在使用PPMd算法的RAR3的情况下，这个异常可能会在PPMd模型更新过程中被抛出，从而使得整个模型状态的健全性（Soundness）受到威胁。回想一下上面的工作原理，即使抛出了错误代码为S_FALSE的CInBufferException，下一个项目也还会使用相同的编码器。  
另外需要注意的是，RAR3解码器会保存PPMd的模型状态。通过大致浏览NCompress::NRar3::CDecoder::InitPPM3方法的代码，我们可以发现这样一个事实：如果一个项目对其发起明确的请求，这个模型状态就会被重新初始化。这其实是一个用于允许在不同的项目之间，借助收集的概率启发式（Collected
Probability Heuristics）来保持模型相同的功能特性。但这也意味着，我们可以做到以下几点：
  1. 构建RAR3压缩文件的第一个项目，以便在PPMd模型更新的过程中触发错误代码为S_FALSE的CInBufferException。实际上，这意味着我们可以调用任意Ppmd7_DecodeSymbol4错误中使用的范围解码器（Range Decoder）的Decode方法，从而跳出PPMd代码。
  2. 压缩文件的后续项目没有设置重置位，可能导致模型的重新初始化。因此，PPMd代码可能在被破坏后还持续运行。  
到目前为止，可能大家觉得还不是太糟糕。为了理解攻击者如何将这一漏洞转化为内存损坏漏洞并利用，我们还需要了解更多有关于PPMd模型状态，并且需要具体了解该模型更新的过程。
###  3.2 PPMd预处理
所有PPM压缩算法的核心思想，都是建立一个有限D阶的马尔可夫模型。在PPMd的具体实现中，模型状态本质上是一个最大深度为D的256元上下文树（Context
Tree），其中从根到当前上下文节点会被解释为字节符号的序列。特别地，其中的父子关系（Parent Relation）将被转化为后缀关系（Suffix
Relation）。此外，每个上下文节点都会存储与后继上下文节点相连接的频率统计，该频率用于记录其可能的后继符号。  
上下文节点的类型为CPpmd7_Context，定义如下：
        typedef struct CPpmd7_Context_ {
    UInt16 NumStats;
    UInt16 SummFreq;
    CPpmd_State_Ref Stats;
    CPpmd7_Context_Ref Suffix;
    } CPpmd7_Context;
NumStats字段存储Stats数组所包含元素的数量。类型CPpmd_State定义如下：
        typedef struct {
    Byte Symbol;
    Byte Freq;
    UInt16 SuccessorLow;
    UInt16 SuccessorHigh;