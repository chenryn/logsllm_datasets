srelease predicate, and their soundness follows immediately
from the model theoretic constraints on srelease.
(cid:15) srelease-1. From a rule (cid:30) of the form “B lsigns srelease( ; C; D)  
f1 ^ (cid:1) (cid:1) (cid:1) ^ fn”, derive “B lsigns srelease((cid:30); A; C)”, where
B, C, and D are arbitrary peers.
Thus (cid:30) is also true in P at A, and we conclude that P j=A (cid:30).
THEOREM 3
(LOCAL COMPLETENESS). For any KB P and
(cid:15) srelease-2. From a rule of the form “B lsigns srelease((cid:30); C; D)
  f1 ^ (cid:1) (cid:1) (cid:1) ^ fn” and a rule   of the form “B lsigns
srelease((cid:30); D; E)   f1 ^ (cid:1) (cid:1) (cid:1) ^ fn”, derive
“B lsigns srelease( ; A; C)”, where B, C, D, and E are
arbitrary peers.
A; : : : ; P n
A sequence P 1
sequence for peer A if P i+1
at most one derivation rule, for all 1 (cid:20) i < n.
A of peer A’s KBs is a (local) derivation
A can be obtained from P i
A by applying
DEFINITION 17
((GLOBAL) DERIVATION). For peers A and
B with KBs PA and PB respectively, we have the following global
derivation rule.
(cid:15) Message. From a set (cid:8) (cid:18) PA of rules such that for each
(cid:30) 2 (cid:8), (cid:30) is directly signed by some peer C and “C lsigns
srelease((cid:30), A, B)” 2 PA, derive (cid:8) in PB.
A sequence P 1; : : : ; P n of global KBs is a (global) derivation se-
quence if for all peers A and all 1 (cid:20) i < n, either (1) the sequence
P i
A can be
obtained from P i
B, for some peer B, through an application of the
message derivation rule.
A is a local derivation sequence for A, or (2) P i+1
A; P i+1
DEFINITION 18. A KB P derives a rule (cid:30) at peer A, written
P ‘A (cid:30), iff there exists a derivation sequence P 1; : : : ; P n such
A. Then P 1; : : : ; P n is a proof for (cid:30) at A. When only
that (cid:30) 2 P n
local derivation rules are used in this proof, we write PA ‘A (cid:30).
Proofs that use only local derivations describe the access con-
trol process from a particular peer’s point of view. Proofs that use
global derivations describe what could happen in the system, so are
useful for analyzing safety and liveness. We next argue that each
KB’s local proofs are soundand completefor the isolated model P;
and accordingly, so are the global proofs for the canonical model
P.
THEOREM 2
(LOCAL SOUNDNESS). For any KB P, rule (cid:30),
and peer A, if PA ‘A (cid:30), then P j=A (cid:30).
Proof. When only the local derivation rules are used, derivation
in PeerAccess becomes similar to derivation in an ordinary logic
program. We prove its local soundness by arguing for the sound-
ness of each derivation rule.
ground rule (cid:30), if P j=A (cid:30), then PA ‘A (cid:30).
Proof. Since peer A has a ﬁnite set of local rules at each point,
this completeness result can be shown in the same way as the com-
pleteness results for general logic programs, with the exception of
proofs regarding the srelease predicate. For that predicate, each
point of its model-theoretic deﬁnitions corresponds directly to a
proof-theoretic counterpart, so the completeness of reasoning about
srelease follows immediately from the deﬁnition of ‘.
THEOREM 4
(GLOBAL SOUNDNESS). For any KB P, peer
A, and rule (cid:30), if P ‘A (cid:30), then P j=A (cid:30).
Proof. We prove this theorem by induction on the number of
steps of the proof.
If the proof has one step, then (cid:30) 2 P, and
the theorem holds. Otherwise, assume that it holds for all proofs
of length less than n, and now consider the nth and ﬁnal step in
deriving (cid:30) at peer A.
1. When a local derivation rule is used to derive (cid:30), the Local
Soundness Theorem tells us that (cid:30) is true in P at A. As
P (cid:22) P, we know (cid:30) is true in P at A.
2. When a global derivation rule is used to derive (cid:30), peer A
gets a message m containing (cid:30). In this case, P becomes P 0
after the message is received. Let M be a global message
with MA = fmg, and with the empty set for all other local
messages. Then P 0 becomes P (cid:12) M after M is received,
and m is true in P 0 at A. By the Fixpoint Theorem, we know
that P 0 (cid:22) P, so m is also true in P at A.
By the induction hypothesis, we conclude that the theorem holds
for proofs of all lengths.
THEOREM 5
(GLOBAL COMPLETENESS). For any KB P and
ground rule (cid:30), if P j=A (cid:30), then P ‘ (cid:30).
Proof. Suppose that (cid:30) is true in the canonical model P. Consider
a fair transition sequence Seq = I 1; I 2; : : : with ﬁxpoint P; such
a sequence must exist, because (cid:30) is ground and P is ﬁnite. Let j
be the ﬁrst point in Seq in which (cid:30) is true in I j
A. If j = 1, then
we have (cid:30) in the initial local interpretation of PA, and by the Local
Completeness Theorem, the current theorem follows. Otherwise,
by the induction hypothesis, let us assume that for every rule  
that is true at some peer B in I k, for 1 (cid:20) k < j, the theorem
holds; in other words, we have a proof of   at B in the canonical
model. By the deﬁnition of a transition sequence, a ﬁnite set of
rules must have been sent to peer A in a new legal message, causing
the transition from I j(cid:0)1 to I j. Consider any member r of this set
that was not already in the set of directly signed non-self-signed
rules in I j(cid:0)1. Recall that B can only send r to A if r is directly
signed and releasable, i.e., r is true at B and either A signed r,
A = B, or “C lsigns srelease(r; B; A)” is true at B. In the current
situation, A 6= B, because r is not in the set of directly signed non-
self-signed rules in I j(cid:0)1. Similarly, A cannot be the signer of r.
Thus it must be the case that “C lsigns srelease(r; B; A)” is true at
B in I j(cid:0)1. By the induction hypothesis, we have a proof for r at B
in the canonical model of P. By the induction hypothesis, we also
have a proof in the canonical model for every rule r that was true
at A in I j(cid:0)1.
Consider the set m of all new directly signed non-self-signed
rules that arrived at A during the transition between I j(cid:0)1 and I j.
Given that (cid:30) is true in I j but not in I j(cid:0)1, one possibility is that (cid:30)
is in m. In that case, by the induction hypothesis, we have a proof
of (cid:30) at B in the canonical model. By the message derivation rule,
we also have a proof of (cid:30) at A in the canonical model.
Otherwise, we have (cid:30) 62 m, so (cid:30) must not be directly signed
by another peer. Consider the KB K that consists of the initial KB
P, plus every legal new message sent in the transitions up to and
including the transition to I j. The Local Completeness Theorem
tells us that if (cid:30) is true at A in the isolated model of K, then there
is a proof of (cid:30) at A for K. (cid:30) must be true in the isolated model of
K, because K captures all the messages sent to any peer since the
ﬁrst transition of the system. Further, by the induction hypothesis,
we have a proof of every formula that is in K but is not in P. We
can take the proof of (cid:30) in K, and extend it by prefacing it with the
proofs of all the formulas in K that are used in the proof of (cid:30) in the
isolated model of (cid:30) but are not present in P (by the deﬁnition of a
proof, this set of formulas must be ﬁnite), to create a proof of (cid:30) in
the canonical model of P.
7. HINTS FOR PROOFS AND QUERIES
The preceding sections have talked about what is true and prov-
able at peers, without considering whether the peers are willing to
construct the proofs or determine the truths. If Alice needs to de-
termine whether (cid:30) is true and is unable to do so on her own, in
some applications Alice could ask every other peer in the system
for help. However, in the real world there are typically so many
peers that Alice would not want to take the time to ask all of them
for help, and most peers would be unwilling to help her anyway.
Alice uses her proofhints to restrict her search to peers where she
has a reasonable chance of getting help. For this purpose, each
PeerAccess peer’s knowledge base contains a section devoted to
proof hints, which are metalevel facts and rules that suggest which
peers Alice should ask for help as she tries to determine whether
certain atoms and rules are true.
Each proof hint takes the form “A signs ﬁnd((cid:30); B; C)   f1 ^
(cid:1) (cid:1) (cid:1) ^ fn;” or its logically signed counterpart, where A is a peer
name, B and C are peer names or variables, “ﬁnd” is a metalevel
proof hint predicate, (cid:30) is a rule, and f1 through fn are base or
proof hint facts. Intuitively, if a peer Alice is trying to prove (cid:30),
the hint “Bob signs ﬁnd((cid:30), Alice, Carla)   f1 ^ (cid:1) (cid:1) (cid:1) ^ fn” means
that Bob suggests that Alice ask Carla about (cid:30), under conditions f1
through fn. Much as we disallowed srelease policies for srelease
policies, we disallow proof hints for ﬁnding proof hints, because
the additional layer of indirection adds no interesting expressive
capability and complicates execution at run time.
Alice can deﬁne broker predicates and use them to describe how
to use them to ﬁnd proof hints:
Alice:
Alice lsigns NeesGridBrkr(David)
Alice lsigns NeesGridBrkr(Edith)
Alice lsigns ﬁnd(O lsigns auth(R, X), Alice, B)  
Alice lsigns NeesGridResource(R) ^ Alice lsigns NeesGridBrkr(B)
These formulas say that when Alice is trying to prove that she or
her proxy is authorized to access a NeesGrid resource, she should
ask one of the NeesGrid brokers for help, by sending the broker
her query. If Alice asks David whether Alice can access the shake
table (using the query ?O lsigns auth(shaketable, Alice), as deﬁned
in the next section), David could in theory respond with a yes or no
answer. However, if David really is a broker, he will not answer the
query directly. Instead David will give Alice a new proof hint, e.g.,
“David signs ﬁnd(Bob signs auth(shaketable, Alice), Alice, Bob)”.
As another example, for CAS-DB to ask resource owners for
permission to release atoms about their authorized groups, CAS-
DB could use the following proof hint:
CAS-DB lsigns ﬁnd(
O signs srelease(O signs authgroup(R, G), CAS-DB, X),
CAS-DB, O)
  CAS lsigns owner(R, O)
If David sends Alice a proof hint, then the proof hint must have
been releasable. The releasability of proof hints is determined ex-
actly as for base predicates, and the semantics and derivation rules
presented in the previous sections remain unchanged; the truth of
a proof hint formula does not depend on whether the formula to
be proved is true or false. The impact of proof hints lies in their
effect on a peer’s run-time behavior, which is a tunable feature of
the PeerAccess framework. For example, proof hints can be used
to encode a more modular version of the credential discovery type
system of [18], as rules that say that if a credential is of type issuer-
traces-all, we should ask by asking the prospective signer for the
credential; if it is of type subject-traces-all, we should start by ask-
ing the prospective owner for it; and so on. Whether and how a
peer makes use of proof hints is governed by the event-condition-
action rules for that peer in the PeerAccess framework. For the
purposes of this paper, we will use a single such rule for all peers:
when Alice is unable to make headway on determining the truth of
a fact, she does not give up until she has asked for help by querying
each peer recommended by any proof hint in her local knowledge
base. More precisely, if Alice is trying to determine whether (cid:30) is
true and is unable to do so using her local knowledge base, she will
send the query ?(cid:30) to each peer P such that P 0 lsigns ﬁnd((cid:30), Alice,
P ) is true at Alice, for any peer P 0. In this paper, Alice will not ask
other peers for additional proof hints for (cid:30) if the hints that she has
do not lead to proofs of (cid:30).
In even the smallest examples, proof hints of the form “Alice
lsigns ﬁnd(P lsigns (cid:8), Alice, P )”, where (cid:8) is a metavariable,
would cause Alice to issue a huge number of queries whenever
she got stuck during proof construction—queries not only about
each leaf of the proof tree under construction, but also about each
interior node. To protect Alice from a denial of service attack by
purveyors of proof hints that instruct Alice to ask all peers, Alice
should use her exposure policies to limit the set of proof hints she
allows into her KB, and she should use ECA rules that require the
signer of a proof hint that she acts upon to have a good rating from
a reputation service that she trusts (modeled as an additional peer
or peers who sign ratings). Even in the small examples used in this
paper, we cannot allow Bob to have a proof hint that directs him
to always ask the signer of a fact for help when trying to prove the
fact—this would cause him to contact CAS or CAS-DB himself,
rather than having Alice do the work for him. We will show how
to use proof hints in the CAS examples once we have discussed the
format and handling of queries.
In PeerAccess, peer ECA rules control the choice of “pull” or
“push” paradigms of information dispersal. For the pull paradigm,
a query takes the form ?f1 ^ (cid:1) (cid:1) (cid:1) ^ fn, where each fi is a fact or
a rule delimited by parentheses, for 1 (cid:20) i (cid:20) n. The meaning of
a ground conjunctive formula is deﬁned in the traditional manner:
the formula is true at a peer if all conjuncts are true at that peer.
In this paper, we will assume that all queries are releasable, i.e., A
lsigns srelease(?(cid:8), X, Y ) is true at every peer A, and we will omit
the deﬁnition of query releasability.