    lea    edi, DWORD PTR [ecx+2] 
    mov    DWORD PTR [eax+8], edx 
    mov    BYTE PTR _s$[esp+76], 3 
    mov    ecx, DWORD PTR _s$[esp+76] 
    mov    DWORD PTR [eax+12], esi 
    mov    DWORD PTR [eax+16], ecx 
    mov    DWORD PTR [eax+20], edi 
    call   _f 
    add    esp, 24 
    pop    edi 
    pop    esi 
    xor    eax, eax 
    pop    ebx 
    add    esp, 24 
    ret    0 
_main    ENDP 
在汇编代码中，我们找不到内嵌结构体的影子。所以，我们可以断定，嵌套模式的结构体会被编译器
展开，最终形成一维结构体。 
当然，如果使用“struct iner_struct c”替代源程序中的“struct inter_stuct *c”，汇编指令会大不相同。 
OllyDbg 
我们使用 OllyDbg 加载上述程序，观测 outer_struct。如图 21.5 所示。 
它在内存中的构造如下： 
 (outer_struct.a)值为 1 的字节，其后 3 字节是随机脏数据。 
 (outer_struct.b) 32 位 word 型数据 2。 
 (outer_struct.a)32 位 word 型数据 0x64(100)。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
333 
图 21.5  OllyDbg：在执行 printf()之前 
 (outer_struct.b)32 位 word 型数据 0x65(101)。 
 (outer_struct.d)值为 3 的字节，以及其后 3 字节的脏数据。 
 (outer_struct.e)32 位 word 型数据 4。 
21.6 结构体中的位操作 
21.6.1 CPUID 
C/C++语言可以精确操作结构体中的位域。这能够帮助程序员大幅度地节省程序的内存消耗。例如，
bool 型数据就需要 1 位空间。但是时间开销和空间效率不可两全，如果要节约内存开销，程序的性能就
会下降。 
以CPUID指令为例。该指令用于获取CPU及其特性信息。
①
3:0  (4 bits) 
如果在调用指令之前设置 EAX 寄存器的值为 1，那么 CPUID 指令将会按照下列格式在 EAX 寄存器里
存储 CPU 的特征信息。 
7:4  (4 bits) 
11:8 (4 bits) 
13:12(2 bits) 
19:16(4 bits) 
27:20(8 bits) 
Stepping 
Model 
Family  
Processor Type  
Extended Model 
Extended Family 
MSVC 2010 有CPUID宏，而GCC 4.4.1 没有这个宏。所以，我们自己写一个函数，再用GCC编译它。
②
① 请参见 http://en.wikipedia.org/wiki/CPUID。 
② 请参见 http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html。 
#include  
#ifdef __GNUC__ 
static inline void cpuid(int code, int *a, int *b, int *c, int *d) { 
  asm volatile("cpuid":"=a"(*a),"=b"(*b),"=c"(*c),"=d"(*d):"a"(code)); 
} 
#endif 
#ifdef _MSC_VER 
#include  
#endif 
struct CPUID_1_EAX 
{ 
    unsigned int stepping:4; 
    unsigned int model:4; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
334 
逆向工程权威指南（上册） 
    unsigned int family_id:4; 
    unsigned int processor_type:2; 
    unsigned int reserved1:2; 
    unsigned int extended_model_id:4; 
    unsigned int extended_family_id:8; 
    unsigned int reserved2:4; 
}; 
int main()  
{ 
    struct CPUID_1_EAX *tmp; 
    int b[4]; 
#ifdef _MSC_VER 
    __cpuid(b,1); 
#endif 
#ifdef __GNUC__ 
    cpuid (1, &b[0], &b[1], &b[2], &b[3]); 
#endif 
    tmp=(struct CPUID_1_EAX *)&b[0]; 
    printf ("stepping=%d\n", tmp->stepping); 
    printf ("model=%d\n", tmp->model); 
    printf ("family_id=%d\n", tmp->family_id); 
    printf ("processor_type=%d\n", tmp->processor_type); 
    printf ("extended_model_id=%d\n", tmp->extended_model_id); 
    printf ("extended_family_id=%d\n", tmp->extended_family_id); 
    return 0;  
}; 
在 CPUID 将返回值存储到 EAX/EBX/ECX/EDX 之后，程序使用数组 b[]收集相关信息。然后，我们通
过指向结构体 CPUID_1_EAX 的指针，从数组 b[]中获取 EAX 寄存器里的值。 
换而言之，我们把 32 位 int 型数据分解为结构体型数据，再从结构体中读取各项数值。 
MSVC 
使用 MSVC 2008（启用/Ox 选项）编译上述程序，可得如下所示的代码。 
指令清单 21.25  Optimizing MSVC 2008 
b$ = -16 ;size=16  
_main   PROC 
    sub    esp, 16 
    push   ebx 
    xor    ecx, ecx 
    mov    eax, 1 
    cpuid 
    push   esi 
    lea    esi, DWORD PTR _b$[esp+24] 
    mov    DWORD PTR [esi], eax 
    mov    DWORD PTR [esi+4], ebx 
    mov    DWORD PTR [esi+8], ecx 
    mov    DWORD PTR [esi+12], edx 
    mov    esi, DWORD PTR _b$[esp+24] 
    mov    eax, esi 
    and    eax, 15 
    push   eax 
    push   OFFSET $SG15435 ; ’stepping=%d’, 0aH, 00H 
    call   _printf 
    mov    ecx, esi 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
335 
    shr    ecx, 4 
    and    ecx, 15 
    push   ecx 
    push   OFFSET $SG15436 ; ’model=%d’, 0aH, 00H 
    call   _printf 
    mov    edx, esi 
    shr    edx, 8 
    and    edx, 15 
    push   edx 
    push   OFFSET $SG15437 ; ’family_id=%d’, 0aH, 00H 
    call   _printf 
    mov    eax, esi 
    shr    eax, 12 
    and    eax, 3 
    push   eax 
    push   OFFSET $SG15438 ; ’processor_type=%d’, 0aH, 00H 
    call   _printf 
    mov    ecx, esi 
    shr    ecx, 16 
    and    ecx, 15 
    push   ecx 
    push   OFFSET $SG15439 ; ’extended_model_id=%d’, 0aH, 00H 
    call   _printf 
    shr    esi, 20 
    and    esi, 255 
    push   esi 
    push   OFFSET $SG15440 ; ’extended_family_id=%d’, 0aH, 00H 
    call   _printf 
    add    esp, 48 
    pop    esi 
    xor    eax, eax 
    pop    ebx 
    add    esp, 16 
    ret    0 
_main    ENDP 
SHR 指令用于过滤位于 EAX 寄存器中右侧那些不参与运算的 bit 位。 
而 AND 指令用于过滤位于寄存器左侧且不参与运算的相关位。换句话说，这两条指令用于筛选寄存
器的特定 bit 位。 
MSVC＋OllyDbg 
现在使用 OllyDbg 调试这个程序。如图 21.6 所示，在执行 CPUID 之后，EAX/EBX/ECX/EDX 寄存器
保存着返回值。 
图 21.6  OllyDbg：执行 CPUID 之后的寄存器情况 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
336 
逆向工程权威指南（上册） 
因为我使用的是 Xeon E3-1200 CPU，所以 EAX 的值是 0x000206A7 。它的二进制数值为
00000000000000100000011010100111。运行结果如图 29.7 所示。 
各字段涵义如下表所示。 
字段 
二进制值 
十进制值 
reserved2 
0000 
0 
extended_family_id 
00000000 
0 
extended_model_id 
0010 
2 
reserved1 
00 
0 
processor_id 
00 
0 
family_id 
0110 
6 
model 
1010 
10 
stepping 
0111 
7 
图 21.7  OllyDbg：运行结果 
GCC  
使用 GCC 4.4.1（启用优化选项–O3）编译上述程序，可得如下所示的代码。 
指令清单 21.26  Optimizing GCC 4.4.1 
main             proc near ; DATA XREF: _start+17 
    push    ebp 
    mov     ebp, esp 
    and     esp, 0FFFFFFF0h 
    push    esi 
    mov     esi, 1 
    push    ebx 
    mov     eax, esi 
    sub     esp, 18h 
    cpuid 
    mov     esi, eax 
    and     eax, 0Fh 
    mov     [esp+8], eax 
    mov     dword ptr [esp+4], offset aSteppingD ; "stepping=%d\n" 
    mov     dword ptr [esp], 1 
    call    ___printf_chk 
    mov     eax, esi 
    shr     eax, 4 
    and     eax, 0Fh 
    mov     [esp+8], eax 
    mov     dword ptr [esp+4], offset aModelD ; "model=%d\n" 
    mov     dword ptr [esp], 1 
    call    ___printf_chk 
    mov     eax, esi 
    shr     eax, 8 
    and     eax, 0Fh 
    mov     [esp+8], eax 
    mov     dword ptr [esp+4], offset aFamily_idD ; "family_id=%d\n" 
    mov     dword ptr [esp], 1 
    call    ___printf_chk 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
337 
    mov     eax, esi 
    shr     eax, 0Ch 
    and     eax, 3 
    mov     [esp+8], eax 
    mov     dword ptr [esp+4], offset aProcessor_type ; "processor_type=%d\n" 
    mov     dword ptr [esp], 1 
    call    ___printf_chk 
    mov     eax, esi 
    shr     eax, 10h 
    shr     esi, 14h 
    and     eax, 0Fh 
    and     esi, 0FFh 
    mov     [esp+8], eax 
    mov     dword ptr [esp+4], offset aExtended_model ; "extended_model_id=%d\n" 
    mov     dword ptr [esp], 1 
    call    ___printf_chk 
    mov     [esp+8], esi 
    mov     dword ptr [esp+4], offset unk_80486D0 
    mov     dword ptr [esp], 1 
    call    ___printf_chk 
    add     esp, 18h 
    xor     eax, eax 
    pop     ebx 
    pop     esi 
    mov     esp, ebp 
    pop     ebp 
    retn 
main              endp 
GCC 生成的汇编指令与 MSVC 库函数基本相同。二者的主要区别是：GCC 编译的程序在调用 printf()指
令之前把 extended_model_id 和 extended_family_id 放在连续的内存块里一并处理了，而没有像 MSVC 编译的程序
那样、在每次调用 printf()之前逐一进行计算。 
21.6.2 用结构体构建浮点数 
前文已经指出，每个单精度 float 或双精度 double 型浮点数，都由符号、小数和指数三部分组成。到
底能否直接利用结构体构建浮点型数据呢？ 
符号位（第 31 位） 
指数部分（23～30 位） 
小数部分（0～11 位） 
#include  
#include  
#include  
#include  
struct float_as_struct 
{ 
    unsigned int fraction : 23; // 小数 
    unsigned int exponent : 8;  // 指数 + 0x3FF 
    unsigned int sign : 1;// 符号位 
}; 
float f(float _in) 
{ 
    float f=_in; 
    struct float_as_struct t; 
    assert (sizeof (struct float_as_struct) == sizeof (float)); 
    memcpy (&t, &f, sizeof (float)); 
    t.sign=1; // set negative sign 
    t.exponent=t.exponent+2; // multiply d by 2^n (n here is 2) 
    memcpy (&f, &t, sizeof (float)); 
    return f; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
338 
逆向工程权威指南（上册） 
}; 
int main()  
{ 
    printf ("%f\n", f(1.234)); 
}; 
通过结构体构建而成的 float_as_struct 和单精度浮点数据占用相同大小的内存空间，即 32 位/4 字节。 
在程序里，我们设置符号位为负（1），并把指数增加 2，以进行乘以 4（2 的 n 次方（n＝2））的乘法运算。 
使用 MSVC 2008（不开启任何优化选项）编译上述程序，可得如下所示的代码。 
指令清单 21.27  Non-optimizing MSVC 2008 
_t$ = -8 ; size = 4 
_f$ = -4 ; size = 4 
__in$ = 8 ; size = 4 
?f@@YAMM@Z PROC ; f 
    push  ebp 
    mov  
ebp, esp 
    sub  
esp, 8 
    fld  