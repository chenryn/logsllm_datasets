sgx_sign将所有的metadata数据保存在enclave.signed.so ELF文件里的”.note.sgxmeta”段里。
metadata里保存着Enclave的所有属性，在运行时生成的SECS、TCS关键信息大部分来自于它，包括EINIT所需的EINITTOKEN也是基于它来生成，因此修改metadata里相关信息后可将Enclave由release版本变成可调试的debug版本。下文将重点介绍该部分。
**3.5.2 Enclave** **执行环境的创建**
Enclave的创建由普通应用程序发起，先申请Enclave页，再通过ioctl系统调用执行ENCLS指令，如ECREATE、EADD、EEXTEND、EINIT等，其细节流程如图9所示。首先，应用程序请求加载它的Enclave
图9 Enclave 的创建细节
部分到内存中；接着借助ioctl调用ECREATE指令创建文件和SECS数据结构；然后通过EADD指令将Enclave的代码加载进Enclave；每个EPC页的添加到Enclave时要使用EEXTEND指令将其度量值添加到SECS;Enclave代码加载完成后调用EINIT指令完成Enclave的初始化，固化SECS。该过程跟SECS密切相关的有ECREATE和EINIT，即本文探究的将Released
Enclave改成可debug的关键所在。ECREATE指令负责创建一个独一无二的Enclave的实例，建立起线性地址的布局，以及设置Enclave的属性。这属性包括debug属性，信息保存在SECS数据结构中。而
SECS
的固化是在EINIT过程中完成，若简单的在ECREATE时修改SECS，将导致EINIT时对SECS的校验失败，从而导致Enclave创建失败。因此，下节重点介绍EINIT。
**3.5.3 Enclave Init**
顾名思义，EINIT指令负责Enclave
init，它是创建Enclave时最后需要执行的一个ENCLS指令，执行完EINIT后，Enclave的度量值MRENCLAVE也完成了，此后应用程序可以通过EENTER指令进入Enclave运行。EINIT指令执行如图10所示，需传入3个参数：SECS、SIGSTRUCT、EINITTOKEN，其中SECS仅Enclave本身可访问，另两个
图10 EINIT过程
普通程序也可访问。大体执行步骤如下：
验证是否使用随附的公钥对SIGSTRUCT进行了签名；
检查SECS.MRENCLAVE是否等于SIGSTRUCT.HASHENCLAVE；
检查是否SIGSTRUCT.ATTRIBUTES中非保留位设置为1，而SIGSTRUCT.ATTRIBUTESMASK中非保留位设置为设置为0；
检查SIGSTRUCT.ATTRIBUTES中是否未设置仅Intel位，除非SIGSTRUCT由Intel签名；
检查SIGSTRUCT.ATTRIBUTES是否等于对SIGSTRUCT.ATTRIBUTEMASK与SECS.ATTRIBUTES进行逻辑与运算后的结果；
如果EINITTOKEN.VALID为0，则检查SIGSTRUCT是否由Intel签名；
如果EINITTOKEN.VALID为1，则检查EINITTOKEN的有效性；
如果EINITTOKEN.VALID为1，则检查EINITTOKEN.MRENCLAVE是否等于SECS.MRENCLAVE；
如果EINITTOKEN.VALID为1并且EINITTOKEN.ATTRIBUTES.DEBUG为1，则SECS.ATTRIBUTES.DEBUG必须为1；
从SIGSTRUCT取出签名的公钥进行SHA-256的Hash后产生MRSIGNER，将此MRSIGNER与EINITTOKEN.MRSINGER进行检验，通过后将MRSIGNER拷贝到SECS.MRSIGNER。同时基于SIGSTRUCT填写SECS.ISVSVN、SECS.ISVPRODID,完成SECS的初始化，固化SECS。
由上可见，若要调试Enclave，SECS.ATTRIBUTES.DEBUG必须为1，同时EINITTOKEN.ATTRIBUTES.DEBUG和SIGSTRUCT.ATTRIBUTES.DEBUG也必须为1，另外还要保证签名校验的成功。下面分别介绍SECS、SIGSTRUCT、EINITTOKEN的数据结构。
SECS在EPC中是4kB对齐的，数据结构如表3所示。我们比较关心的ATTRIBUTE域如表4所示。
表3 SECS数据结构
Filed | Offset
(Bytes)
| Size
(Bytes)
| 简介  
---|---|---|---  
SIZE | 0 | 8 | Enclave的大小  
BASEADDR | 8 | 8 | Enclave线性地址的基址  
SSAFRAMESIZE | 16 | 4 | SSA帧的大小  
MISCSELECT | 20 | 4 | 位向量，用于指定在AEX时将哪些扩展特征保存到SSA.MISC  
RESERVED | 24 | 24 | 预留  
ATTRIBUTES | 48 | 16 | Enclave的属性  
MRENCLAVE | 64 | 32 | Enclave的度量值  
RESERVED | 96 | 32 | 预留  
MRSIGNER | 128 | 32 | 签名密钥对应公钥的SHA-256  
RESERVED | 160 | 96 | 预留  
ISVPRODID | 256 | 2 | Enclave的产品ID  
ISVSVN | 258 | 2 | Enclave的安全版本号（SVN）  
EID | 用户设定 | 8 | Enclave ID  
PADDING | 用户设定 | 352 | 填充  
RESERVED | 260 | 3836 | 预留  
表4 ATTRIBUTES数据结构
Field | Bit Posttion | 简介  
---|---|---  
RESERVED | 0 | 预留  
DEBUG | 1 | 置1后，enclave允许调试器读写enclave的数据  
MODE64BIT | 2 | Enclave运行在64位模式  
RESERVED | 3 | 必须置0  
PROVISIONKEY | 4 | EGETKEY可获取Provisioning Key  
EINITTOKENKEY | 5 | EGETKEY可获取EINIT token key  
RESERVED | 63：6 | 预留  
XFRM |  | XSAVE mask  
SIGSTRUCT包含了Enclave的签名信息，SHA-256摘要的ENCLAVEHASH，3072bit长度的MODULUS、SIGNATURE、Q1、Q2，也是必须4kB对齐的。Q1、Q2的算法如下：
Q1 = floor(Signature^2 / Modulus);
Q2 = floor((Signature^3 – q1 * Signature * Modulus) / Modulus);
SIGSTRUCT数据结构如表5所示，表中的“Y”代表该域的数据需要纳入需签名的数据里。
表5 SIGSTRUCT数据结构
Field | OFFSET
(Bytes)
| Size
(Bytes)
| 简介 | Signed  
---|---|---|---|---  
HEADER | 0 | 16 | 必须是06000000E10000000000010000000000H | Y  
VENDOR | 16 | 4 | Intel Enclave: 00008086H
Non-Intel Enclave: 00000000H
| Y  
DATE | 20 | 4 | 编译日期:yyyymmdd | Y  
HEADER2 | 24 | 16 | 必须是01010000600000006000000001000000H | Y  
SWDEFINED | 40 | 4 | 供软件使用 | Y  
RESERVED | 44 | 84 | 必须是0 | Y  
MODULUS | 128 | 384 | 公钥 | N  
EXPONENT | 512 | 4 | RSA Exponent=3 | N  
SIGNATURE | 516 | 384 | SIGSTRUCT本身的签名 | N  
MISCSELECT | 900 | 4 | 用于指定SSA帧扩展特征 | Y  
MISCMASK | 904 | 4 | MISCSELECT的mask | Y  
RESERVED | 908 | 20 | 必须是0 | Y  
ATTRIBUTES | 928 | 16 | Enclave的属性 | Y  
ATTRIBUTEMASK | 944 | 16 | ATTRIBUTES的mask | Y  
ENCLAVEHASH | 960 | 32 | 本数据结构产生的MRENCLAVE | Y  
RESERVED | 992 | 32 | 必须是0 | Y  
ISVPRODID | 1024 | 2 | Enclave产品ID | Y  
ISVSVN | 1026 | 2 | Enclave安全版本号 | Y  
RESERVED | 1028 | 12 | 必须是0 | N  
Q1 | 1040 | 384 | RSA签名校验值1 | N  
Q2 | 1424 | 384 | RSA签名校验值2 | N  
EINITTOKEN 又称Launch Token,用来检验该Enclave是否允许启动，512
Bytes对齐，其数据结构如表6所示。EINITTOKEN是由Launch Enclave,简称LE生成，LE属于Architectural
Enclave之一，由Intel编写并签名后随SGX SDK一起分发。EINITTOKEN里含有ATTRIBUTES字段，并且采用CPU内部的Launch
key进行MAC，这样防止它被其他程序改变EINITTOKEN的值。这是本文需要攻破的另一个点，详见下文。
表6 EINITTOKEN数据结构
Field | OFFSET
(Bytes)
| Size
(Bytes)
| MACed | 简介  
---|---|---|---|---  
VALID | 0 | 4 | Y | Bits 0:1 Valid 0:Debug  
RESERVED | 4 | 44 | Y | 必须是0  
ATTRIBUTES | 48 | 16 | Y | Enclave的属性  
MRENCLAVE | 64 | 32 | Y | Enclave的MRENCLAVE  
RESERVED | 96 | 32 | Y | 预留  
MRSIGNER | 128 | 32 | Y | Enclave的MRSIGNER  
RESERVED | 160 | 32 | Y | 预留  
CPUSVNLE | 192 | 16 | N | Launch Enclave的CPUSVN  
ISVPRODIDLE | 208 | 2 | N | Launch Enclave的ISVPRODID  
ISVSVNLE | 210 | 2 | N | Launch Enclave的ISVSVN  
RESERVED | 212 | 24 | N | 预留  
MASKEDMISCSELECTLE | 236 | 4 | N | Launch Enclave的MASKEDMISCSELECT  
MASKEDATTRIBUTELE | 240 | 16 | N | Launch Enclave的MASKEDATTRIBUTE  
KEYID | 256 | 32 | N | Key的保护值  
MAC | 288 | 16 | N | 采用Launch key对EINITTOKEN的MAC  
## 4 Released Enclave to Debug静态转换法
上文3.5.1节提到在修改metadata里相关信息后可将Enclave由release版本变成可调试的debug版本，本节将详细探究，这种转换是修改Enclave
ELF文件，是在Enclave运行前完成，因此称之为静态转换法。
如上文所述，Enclave的签名工具sgx_sign将所有的metadata数据保存在enclave.signed.so
ELF文件里的”.note.sgxmeta”段里。metadata里保存着Enclave的所有属性，在运行时生成的SECS、TCS关键信息大部分来自于它，包括EINIT所需的EINITTOKEN也是基于它来生成，因此修改metadata里相关信息后可将Enclave由release版本变成可调试的debug版本。metadata的数据结构如表7所示，跟当前研究相关的域包括
version、attributes、enclave_css。
表7 metadata数据结构
    typedef struct _metadata_t 
    {
        uint64_t            magic_num;  /* The magic number identifying the file as a signed enclave image */
        uint64_t            version;               /* The metadata version */
        uint32_t            size;                  /* The size of this structure */
        uint32_t            tcs_policy;            /* TCS management policy */
        uint32_t            ssa_frame_size;        /* The size of SSA frame in page */
        uint32_t            max_save_buffer_size;  /* Max buffer size is 2632 */
        uint32_t            desired_misc_select;
        uint32_t            tcs_min_pool;          /* TCS min pool*/         
        uint64_t            enclave_size;          /* enclave virtual size */
        sgx_attributes_t    attributes;            /* XFeatureMask to be set in SECS. */
        enclave_css_t       enclave_css;           /* The enclave signature */
        data_directory_t    dirs[DIR_NUM];
        uint8_t             data[18592];
    }metadata_t;
version代表metadata的版本号，如：2.3/2.1/1.4，为了兼容所有的版本，一个enclave.signed.so里包含有三段metadata，据本人实测发现，这三段metadata仅version域不一样外，其他域完全一样，同时在Ubuntu16.04上安装测试版本的PSW_2.2.100.45311仅支持1.4版本，因此本文所述的sgx_repack_tool仅生成一段version为1.4的metadata。
attributes域的sgx_attributes_t数据结构如表8所示，我们需要将flags添加上SGX_FLAGS_DEBUG
属性，即debug位置1。
表8 sgx_attributes_t数据结构
    typedef struct _attributes_t
    {
        uint64_t      flags;  /* 包含有debug属性的旗标，各bit含义与Enclave Signature的一致 */
        uint64_t      xfrm;
    } sgx_attributes_t;