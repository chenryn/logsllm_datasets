        "b": ["c"],
        "d": ["e","c"],
        "e": ["c"],
        "c": [],
    }
    def TopologicalSort(graph):
      degrees = dict((u, 0) for u in graph)
      for u in graph:
          for v in graph[u]:
              degrees[v] += 1
      #入度为0的插入队列
      queue = [u for u in graph if degrees[u] == 0]
      res = []
      while queue:
          u = queue.pop()
          res.append(u)
          for v in graph[u]:
              # 移除边，即将当前元素相关元素的入度-1
              degrees[v] -= 1
              if degrees[v] == 0:
                  queue.append(v)
      return res
    print(TopologicalSort(graph)) # ['a', 'd', 'e', 'b', 'c']
但是在方法的调用中，我们希望最后的结果是c、b、e、d、a，这一步需要逆拓扑排序，正向排序使用的BFS，那么得到相反结果可以使用DFS。为什么在方法调用中需要使用逆拓扑排序呢，这与生成passthrough数据流有关。看下面一个例子：
    ...
        public String parentMethod(String arg){
            String vul = Obj.childMethod(arg);
            return vul;
        }
    ...
那么这里arg与返回值到底有没有关系呢？假设Obj.childMethod为
    ...
        public String childMethod(String carg){
            return carg.toString();
        }
    ...
由于childMethod的返回值carg与有关，那么可以判定parentMethod的返回值与参数arg是有关系的。所以如果存在子方法调用并传递了父方法参数给子方法时，需要先判断子方法返回值与子方法参数的关系。因此需要让子方法的判断在前面，这就是为什么要进行逆拓扑排序。
从下图可以看出outgoingReferences的数据结构为：
    {
        method1:(method2,method3,method4),
        method5:(method1,method6),
        ...
    }
而这个结构正好适合逆拓扑排序
但是上面说拓扑排序时不能形成环，但是在方法调用中肯定是会存在环的。作者是如何避免的呢？
在上面的dfsTsort实现代码中可以看到使用了stack和visitedNodes，stack保证了在进行逆拓扑排序时不会形成环，visitedNodes避免了重复排序。使用如下一个调用图来演示过程：
从图中可以看到有环med1->med2->med6->med1，并且有重复的调用med3，严格来说并不能进行逆拓扑排序，但是通过stack、visited记录访问过的方法，就能实现逆拓扑排序。为了方便解释把上面的图用一个树来表示：
对上图进行逆拓扑排序（DFS方式）：
从med1开始，先将med1加入stack中，此时stack、visited、sortedmethods状态如下：
med1还有子方法？有，继续深度遍历。将med2放入stack，此时的状态：
med2有子方法吗？有，继续深度遍历。将med3放入stack，此时的状态：
med3有子方法吗？有，继续深度遍历。将med7放入stack，此时的状态：
med7有子方法吗？没有，从stack中弹出med7并加入visited和sortedmethods，此时的状态：
回溯到上一层，med3还有其他子方法吗？有，med8，将med8放入stack，此时的状态：
med8还有子方法吗？没有，弹出stack，加入visited与sortedmethods，此时的状态：
回溯到上一层，med3还有其他子方法吗？没有了，弹出stack，加入visited与sortedmethods，此时的状态：
回溯到上一层，med2还有其他子方法吗？有，med6，将med6加入stack，此时的状态：
med6还有子方法吗？有，med1，med1在stack中？不加入，抛弃。此时状态和上一步一样
回溯到上一层，med6还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods，此时的状态：
回溯到上一层，med2还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods，此时的状态：
回溯到上一层，med1还有其他子方法吗？有，med3，med3在visited中？在，抛弃。
回溯到上一层，med1还有其他子方法吗？有，med4，将med4加入stack，此时的状态：
med4还有其他子方法吗？没有，弹出stack，加入visited和sortedmethods中，此时的状态：
回溯到上一层，med1还有其他子方法吗？没有了，弹出stack，加入visited和sortedmethods中，此时的状态（即最终状态）：
所以最后的逆拓扑排序结果为：med7、med8、med3、med6、med2、med4、med1。
**生成passthrough数据流**
在calculatePassthroughDataflow中遍历了sortedmethods，并通过字节码分析，生成了方法返回值与参数关系的passthrough数据流。注意到下面的序列化决定器，作者内置了三种：JDK、Jackson、Xstream，会根据具体的序列化决定器判定决策过程中的类是否符合对应库的反序列化要求，不符合的就跳过：
  * 对于JDK(ObjectInputStream)，类否继承了Serializable接口
  * 对于Jackson，类是否存在0参构造器
  * 对于Xstream，类名能否作为有效的XML标签
生成passthrough数据流代码：
    ...
        private static Map> calculatePassthroughDataflow(Map classResourceByName,
                                                                                              Map classMap,
                                                                                              InheritanceMap inheritanceMap,
                                                                                              List sortedMethods,
                                                                                              SerializableDecider serializableDecider) throws IOException {
            final Map> passthroughDataflow = new HashMap<>();
            for (MethodReference.Handle method : sortedMethods) {//依次遍历sortedmethods，并且每个方法的子方法判定总在这个方法之前，这是通过的上面的逆拓扑排序实现的。
                if (method.getName().equals("")) {
                    continue;
                }
                ClassResourceEnumerator.ClassResource classResource = classResourceByName.get(method.getClassReference().getName());
                try (InputStream inputStream = classResource.getInputStream()) {
                    ClassReader cr = new ClassReader(inputStream);
                    try {
                        PassthroughDataflowClassVisitor cv = new PassthroughDataflowClassVisitor(classMap, inheritanceMap,
                                passthroughDataflow, serializableDecider, Opcodes.ASM6, method);
                        cr.accept(cv, ClassReader.EXPAND_FRAMES);//通过结合classMap、inheritanceMap、已判定出的passthroughDataflow结果、序列化决定器信息来判定当前method的返回值与参数的关系
                        passthroughDataflow.put(method, cv.getReturnTaint());//将判定后的method与有关系的污染点加入passthroughDataflow
                    } catch (Exception e) {
                        LOGGER.error("Exception analyzing " + method.getClassReference().getName(), e);
                    }
                } catch (IOException e) {
                    LOGGER.error("Unable to analyze " + method.getClassReference().getName(), e);
                }
            }
            return passthroughDataflow;
        }
    ...
最后生成了passthrough.dat：
类名 | 方法名 | 方法描述 | 污点  
---|---|---|---  
java/util/Collections$CheckedNavigableSet | tailSet |
(Ljava/lang/Object;)Ljava/util/NavigableSet; | 0,1  
java/awt/RenderingHints | put |
(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; | 0,1,2  
#### Step3 枚举passthrough调用图
这一步和上一步类似，gadgetinspector
会再次扫描全部的Java方法，但检查的不再是参数与返回结果的关系，而是方法的参数与其所调用的子方法的关系，即子方法的参数是否可以被父方法的参数所影响。那么为什么要进行上一步的生成passthrough数据流呢？由于这一步的判断也是在字节码分析中，所以这里只能先进行一些猜测，如下面这个例子：
    ...
        private MyObject obj;
        public void parentMethod(Object arg){
            ...
            TestObject obj1 = new TestObject();
            Object obj2 = obj1.childMethod1(arg);
            this.obj.childMethod(obj2); 
            ...
        }
    ...
如果不进行生成passthrough数据流操作，就无法判断TestObject.childMethod1的返回值是否会受到参数1的影响，也就无法继续判断parentMethod的arg参数与子方法MyObject.childmethod的参数传递关系。
作者给出的例子：
AbstractTableModel$ff19274a.hashcode与子方法IFn.invoke：
  * AbstractTableModel$ff19274a.hashcode的this(0参)传递给了IFn.invoke的1参，表示为0->IFn.invoke()@1
  * 由于f是通过this.__clojureFnMap(0参)获取的，而f又为IFn.invoke()的this(0参)，即AbstractTableModel$ff19274a.hashcode的0参传递给了IFn.invoke的0参，表示为0->IFn.invoke()@0
FnCompose.invoke与子方法IFn.invoke：
  * FnCompose.invoked的arg(1参)传递给了IFn.invoke的1参，表示为1->IFn.invoke()@1
  * f1为FnCompose的属性(this，0参)，被做为了IFn.invoke的this(0参数)传递，表示为0->IFn.invoke()@1
  * f1.invoke(arg)做为一个整体被当作1参传递给了IFn.invoke，由于f1在序列化时我们可以控制具体是IFn的哪个实现类，所以具体调用哪个实现类的invoke也相当于能够控制，即f1.invoke(arg)这个整体可以视为0参数传递给了IFn.invoke的1参(这里只是进行的简单猜测，具体实现在字节码分析中，可能也体现了作者说的合理的风险判断吧)，表示为0->IFn.invoke()@1
在这一步中，gadgetinspector也是利用ASM来进行字节码的分析，主要逻辑是在类CallGraphDiscovery和ModelGeneratorClassVisitor中。在ModelGeneratorClassVisitor中通过标记追踪JVM虚拟机在执行方法时的stack和localvar，最终得到方法的参数与其所调用的子方法的参数传递关系。
生成passthrough调用图代码（暂时省略ModelGeneratorClassVisitor的实现，涉及到字节码分析）：
    public class CallGraphDiscovery {
        private static final Logger LOGGER = LoggerFactory.getLogger(CallGraphDiscovery.class);
        private final Set discoveredCalls = new HashSet<>();
        public void discover(final ClassResourceEnumerator classResourceEnumerator, GIConfig config) throws IOException {
            Map methodMap = DataLoader.loadMethods();//加载所有方法
            Map classMap = DataLoader.loadClasses();//加载所有类
            InheritanceMap inheritanceMap = InheritanceMap.load();//加载继承图
            Map> passthroughDataflow = PassthroughDiscovery.load();//加载passthrough数据流
            SerializableDecider serializableDecider = config.getSerializableDecider(methodMap, inheritanceMap);//序列化决定器
            for (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) {
                try (InputStream in = classResource.getInputStream()) {
                    ClassReader cr = new ClassReader(in);
                    try {
                        cr.accept(new ModelGeneratorClassVisitor(classMap, inheritanceMap, passthroughDataflow, serializableDecider, Opcodes.ASM6),
                                ClassReader.EXPAND_FRAMES);//通过结合classMap、inheritanceMap、passthroughDataflow结果、序列化决定器信息来判定当前method参数与子方法传递调用关系
                    } catch (Exception e) {
                        LOGGER.error("Error analyzing: " + classResource.getName(), e);
                    }
                }
            }
        }
最后生成了passthrough.dat：
父方法类名 | 父方法 | 父方法描述 | 子方法类名 | 子方法子 | 方法描述 | 父方法第几参 | 参数对象的哪个field被传递 | 子方法第几参  
---|---|---|---|---|---|---|---|---  
java/io/PrintStream | write | (Ljava/lang/String;)V | java/io/OutputStream |
flush | ()V | 0 | out | 0  
javafx/scene/shape/Shape | setSmooth | (Z)V | javafx/scene/shape/Shape |
smoothProperty | ()Ljavafx/beans/property/BooleanProperty; | 0 |  | 0  
* * *
#### Step4 搜索可用的source
这一步会根据已知的反序列化漏洞的入口，检查所有可以被触发的方法。例如，在利用链中使用代理时，任何可序列化并且是`java/lang/reflect/InvocationHandler`子类的invoke方法都可以视为source。这里还会根据具体的反序列化库决定类是否能被序列化。
搜索可用的source：
    public class SimpleSourceDiscovery extends SourceDiscovery {
        @Override
        public void discover(Map classMap,
                             Map methodMap,
                             InheritanceMap inheritanceMap) {
            final SerializableDecider serializableDecider = new SimpleSerializableDecider(inheritanceMap);
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) {
                    if (method.getName().equals("finalize") && method.getDesc().equals("()V")) {
                        addDiscoveredSource(new Source(method, 0));
                    }
                }
            }
            // 如果类实现了readObject，则传入的ObjectInputStream被认为是污染的
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) {
                    if (method.getName().equals("readObject") && method.getDesc().equals("(Ljava/io/ObjectInputStream;)V")) {
                        addDiscoveredSource(new Source(method, 1));
                    }
                }
            }
            // 使用代理技巧时，任何扩展了serializable and InvocationHandler的类会受到污染。
            for (ClassReference.Handle clazz : classMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(clazz))
                        && inheritanceMap.isSubclassOf(clazz, new ClassReference.Handle("java/lang/reflect/InvocationHandler"))) {
                    MethodReference.Handle method = new MethodReference.Handle(
                            clazz, "invoke", "(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;");
                    addDiscoveredSource(new Source(method, 0));
                }
            }
            // hashCode（）或equals（）是将对象放入HashMap的标准技巧的可访问入口点
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) {
                    if (method.getName().equals("hashCode") && method.getDesc().equals("()I")) {
                        addDiscoveredSource(new Source(method, 0));
                    }
                    if (method.getName().equals("equals") && method.getDesc().equals("(Ljava/lang/Object;)Z")) {
                        addDiscoveredSource(new Source(method, 0));
                        addDiscoveredSource(new Source(method, 1));
                    }
                }
            }
            // 使用比较器代理，可以跳转到任何groovy Closure的call()/doCall()方法，所有的args都被污染
            // https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/Groovy1.java
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))
                        && inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("groovy/lang/Closure"))
                        && (method.getName().equals("call") || method.getName().equals("doCall"))) {
                    addDiscoveredSource(new Source(method, 0));
                    Type[] methodArgs = Type.getArgumentTypes(method.getDesc());
                    for (int i = 0; i < methodArgs.length; i++) {
                        addDiscoveredSource(new Source(method, i + 1));
                    }
                }
            }
        }
    ...
这一步的结果会保存在文件sources.dat中: