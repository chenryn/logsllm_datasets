篇幅我们不能这样做。而且，其实已经有很多介绍这些故事的优秀图书了。
在这里，我们将把注意力集中到对关系模型本身的历史地位的探究上，下
面的内容主要依据 C.J. Date 的著作 The Database Relation Model。
两篇论文
实际上，Codd写了两篇与关系模型相关的论文。第一篇是写于1969
年的《大型数据库中关系存储的可推导性、余与一致性》。遗憾的是，
---
## Page 230
2-1关系数据库的历史—217
这篇论文发表在IBM公司内部期刊 IBM Research Report上了，因此并没
有引起外界的注意。
在接下来的I970年，Codd又在权威学术杂志Commurications of
注0
ACM上，以《大型共享数据库的关系模型为题发表了第二篇论文。至此，
原论文题为 A Reationa7 MAoxderT
of Oate for Large Shmer Data
关系模型真正地问世了。现在人们读到的论文基本上都是这一篇，
Anb, 无中文版。
—编者注
但是，就像CJ.Date说的那样，这篇论文充满了学术味道，而且比较
偏重理论和数学，所以即使是数据库方面的专家，一般也不会去阅读。的确，
对于从事开发工作的工程师来说，这篇论文有些难以读懂。Codd毕竞是
接受过严格数学训练的人，写出的论文也以读者具有集合论和谓词逻辑的
知识为前提，因此尽管这篇论文的篇幅不算很长，但仍然让人感觉阅读门
槛很高。
但是不用担心，笔者相信坚持把本书读到这里的各位读者已经在阅读
本书的过程中不知不觉地掌握了集合论和谓词逻辑的基础知识。接下来我
们了解一下这篇论文的一些要点。大家读完可能会觉得这些知识与我们之
前学习过的东西差不多呢。
Codd的贡献
根据C.J.Date的总结，Codd这两篇论文的主要贡献可以归纳为以下
3点。
1.定义了关系运算（relationalcalculus）。
2.定义了关系代数（relational algebra）。
3.采用谓词逻辑作为数据库操作的基础。
第1点中的关系运算也被称为关系逻辑（relational logic）。Codd调整
了一阶谓词逻辑，以便其能够用于关系数据库，并定义为了关系运算。对
于第2点中的关系代数，数据库工程师们应该都很熟悉。Codd定义的关
系代数包含选择、投影、并、交等8种运算，输入和输出都是关系。他将
这些运算设计成了封闭的，从而促进了SQL的快速发展。关于这一点，2-3
节将详细介绍。可以说，Codd思维严谨，他的深思熟虑为关系模型的发
展奠定了非常坚实的理论基础。
---
## Page 231
218—第2章关系数据库的世界
表述第3点中的谓词逻辑时，CJ.Date的用词给人的感觉与前2点稍
因为谓词逻辑并不是由Codd提出的，而是诞生于十九世纪末的逻辑体系。
1969年时，谓词逻辑已经成为了逻辑学的标准（现在也一样）。
1969年—一切从这里开始
1969年的论文不仅给出了关系的定义，还考虑到了主键的概念，所以
即使说Codd凭一已之力奠定了关系模型的基础也毫不为过。
但是需要注意的是，Codd此时提出的“主键”这个词并非我们现在
一张表中可以存在多个主键。1970年的论文又追加了“外键”的概念。
还有，1969年的论文中有一句非常重要的话（但是不仔细的话看很
容易漏过），这句话来自该论文某一章的开篇语。
将数据看作关系后，有可能创造出以二阶谓词逻辑为基础的用于查询
一般数据的子语言。
相信本书的读者们一定能够理解这句平实的话有看多么重要的意义。
是的，这就是二阶谓词逻辑（second-order predicate logic）！
世界上还尚未出现实现了它的关系数据库。此时的Codd正在脑海中
独自构思能够明确地对关系进行量化的虚拟数据库系统。不过，在1970
年的论文中，这部分被悄悄地替换成了“一阶”（first-order）。替换的具体
原因不清楚，笔者想也许是因为他在实现二阶谓词逻辑时发现数据库系统
会变得非常复杂，而且没有实际的益处。
不过，正是由于关系数据库以谓词逻辑作为基础，逻辑学的研究成果
才可以直接应用于数据管理系统。这个选择为数据库的发展带来了太多的
好处，而做出这样的选择也需要具备非常有前瞻性的眼光。
在此之前，有谁尝试过把存储在数据库中的数据看成命题吗？数据就
是数据，把它看成语句的想法实在太奇特了，并不是那么容易能想到的。
"Codd最具决定性的重要思想就是把数据看成关系的集合，然后再把关系
看成（真）命题的集合，这样，在创造出基于谓词逻辑的语言之后，就能
---
## Page 232
2-1关系数据库的历史—219
直接使用这种语言查询数据了”——C.J.Date的这句评论说到了关键点上。
1969年的论文还简单介绍了这种查询语言（当时还没有命名为SQL）
的一些其他特征，这些特征有些在现在的SQL语言中仍然存在，比如能
够进行集合层次的操作，以及是一种不完整的“数据子语言”（data
sublanguage）等。
1970年—远离地址
与前一年的论文相比，1970年的论文有几个比较大的不同点。其中之
一就是，更加强调数据在逻辑层和物理层的独立性。
在Codd提出关系模型之前，数据库系统的主流模型是分层模型和网
状模型。这两种模型在查找数据时都需要使用索引（指针），因此用户必
须知道数据的存储位置，抽象程度非常低。正因如此，Codd的首要目标
就是将用户从这种毫无意义的烦恼中解放出来。于是“数据库中不再包含
注0
索引，字段间也没有顺序了"
这望说的“索引”与性单优化时
用到的索引不同。 新的是用末管
下面内容摘自1970年论文的序言。
理数据的地址(两者物理然构相
使用终端或应用程序的大型数据库的用户不雾要知道数据在机器上是
如何存储的。坐在终端前的用户和应用程序的行为不应该受到数据库内部
结构变更的影响。
这段话听起来是不是让人觉得信心十足呢？正如CJ.Date所说，在这
篇论文中，Codd第一次明确主张关系模型应该在表现层放弃指针，因此
这是一篇值得纪念的纲领性文章。数据的查询方法从通过索引查询变成了
通过数据内容查询，数据的存储顺序变成了由SQL语言中的ORDEBRBY子
句动态地指定。“即使说要放弃指针，但也只是在“表现层”放弃，在“物
节再来理解Codd这种基于现实的考虑。
范式
1970年的论文除了强调数据的独立性之外，还有一个重要的变化，那
就是出现了范式的概念。Codd在这篇论文中提出了第一范式的想法（第
---
## Page 233
220—第2章关系数据库的世界
二范式、第三范式的定义出现在之后的论文中）
在这篇论文中，Codd提到“范式”或“规范化”的时候，指的都是
第一范式。现在看来，所有的关系都满足第一范式是理所当然的前提，因
此我们可能难以体会到Codd强调这一点的意义在哪里。但是，在刚刚定
汉了关系模型的时期，必须要强调这一点。因为即使不满足第二范式、第
三范式，人们也能创建关系模型的表（经常见到吧），但是如果不满足第
一范式就不能创建。换句话说，“所有的关系都满足第一范式”是使用关
系模型创建表的必要条件。
在存储设备中，表现“规范化”的关系可以使用二维的具有相同构造
则需要使用更加复杂的数据结构。
“按照第一范式进行规范化的关系”其实就是“定义域只包含原子值
（atomic value）的关系”（Codd）。这里所说的原子值，我们今天称为标量值。
它指的是不能再进行细分的最小单位的数据结构，具体的可以想象一下一
般的数值型或字符型的值。
意外的是，在关系数据库诞生三十年后，SQL-99进行了扩展，使得
我们可以定义不满足第一范式的“数组类型”，这个扩展对关系模型来说
究竞是好还是坏，还不能轻易下判断，
在此之前，很多人认为，关系模型不能处理非规范化的数据，因此它
的能力是有限的。这种批评没有错。一般来说，在宿主语言中可以灵活选
择数组、结构体、对象等多种数据类型来表现非规范化的数据。但是在插
入到数据库中时，必须将它们分解成标量值，即按照第一范式进行规范化，
然后再存人数据库。
在宿主语言和数据库之间传递和接收数据时，应该有很多读者因为双
方支持的数据结构不一致而苦恼过吧？特别是面向对象语言和关系数据库
不一致的问题，这种问题称为“阻抗不匹配”由此可见，希望数据库能
支持在宿主语言中可用的数据结构这种需求也是有道理的。
但是，笔者认为，如果按照这个方向发展下去，那么某一天，关系模
型可能会再次拾起Codd过去放弃掉的那种做法，即二阶谓词逻辑。一阶
---
## Page 234
2-1关系数据库的历史—221
），撼=）据
命题的集合）”，具有更强的表达能力。对于以关系作为输入来处理的系统
来说，这一定是最为重要的功能。
但是，尽管二阶谓词逻辑功能很强大，实现支持它的系统却并不容易，
而且用户使用起来也比较困难。假如未来某一天实现了二阶谓词逻辑的
DBMS问世了，笔者还是很想研究一下的（至少与实现了四值逻辑的
DBMS相比，笔者对它更感兴趣），但是它到底是否真的有实际用处，还
是很难判断的。很抱款这里写的有些模棱两可，因为关于这部分内容到底
什么才是最优解，其实笔者也给不出明确的结论（毕竞连Codd自己都有
些徘徊不定）。
本节小结
在本节中，我们针对催生了关系数据库的两篇论文，简单地解读了一
下其内容。尽管这两篇都是发表于儿十年前的论文，但是直到今大还有不
可动摇的意义，让人读起来惊叹不已。CJ.Date曾经说“我深深觉得数据
库的专家们每年都应该重读一下这两篇论文”，笔者认为对于我国的数据
库工程师来说也应该是这样的。所谓经典，指的就是每次阅读都能有新发
现的作品，Codd的论文就是这样历久弥新。
事实上，直到今天，我们都没有突破Codd当年创建的领域。
量化只支持一阶就行呢，还是应该护展到二阶呢？
·复合型数据应当看成原子值吗？
·把放弃地址实现到什么程度才足够呢？
·以三值逻辑作为SQL语言的基础是合理的吗？
处理树形结构最合适的模型是什么？
Codd提出的这些问题大部分在当今的数据库领域依然很现实。本节
开头说过Codd的影响至今还很深刻，现在大家应该感受到了吧？从1969
年诞生到现在，关系数据库的整个历史中都闪耀着这位天才的光芒。
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 235
222-
一第2章关系数据库的世界
2
为什么叫“关系”模型
为什么不叫“表”模型
我们平时都会不假思索地使用“关系数据库”“关系模型”这样的词语，但是却不是很清楚这里的“关
系”真正指的是什么。其实，这个词有着非常深刻的含义。
时不时地会有人同“为什么叫它关系模型，而不叫它表（tabular）模型”。
原因有两个：（1）当初思考关系模型的时候，从事数据处理工作的人们有一
种普遍的观点，即认为多个对象之间的关系（或者关联）必须通过一种链
接数据结构来表示。为了纠正这个误解，我特意选择了“关系模型”这
个词作为名字；（2)与关系相比，表的抽象度更低，容易给人可以像数组
一样操作的印象，而n元关系就不会了。还有，数据库表中数据的内容和
行的顺序没有关系，在这一点上表更容易带来误解。尽管表有这样的小
缺点，但依然是表达关系概念时最重要的手段。毕竟表的概念人们更熟
悉一些。
注0
Codd
撕自（关系数据库：生产力的实
用基研x
关系的定义
关系数据库采用的数据模型是关系模型一
反过来说可能更合适，即
数据库采用了关系模型，因此才被称为关系数据库。
那么，这里所说的“关系”指的是什么呢？深入思考的话会发现，其
实这个词很抽象，不太容易理解，而且很容易与我们日常生活中用的“人
际关系”“关系紧张”等词中的“关系”混淆。
既然如此，从一开始就不使用“关系”这样的抽象词语，叫它“表”
模型不是也行吗？所谓关系，说到底不还是二维表吗？像这样不无道理的
疑间，从关系模型诞生之日起已经被提出过很多次了。“总说关系、关系的，
---
## Page 236
2-2为什么叫“关系“模型—223
到底是什么意思呢？
关系模型之父Codd本人也表示时不时地会收到这样的疑间（“时不时”
的表述有点少说了，其实应该相当频繁吧），并给出了前文中的两个解释。
用指针连接数据的链表结构，这是分层模型和网状模型数据结构流行的时
期特有的。
简单概括的话，关系和表看起来很相似，实质却不相同。为了帮助大家理
解这一点，笔者列出了一些关系和表比较典型的区别。
。关系中不允许存在重复的元组（tuple），而表中可以存在。即，
关系是通常说的不允许存在重复元素的集合，而表是多重集合
(multiset)
·关系中的元组没有从上往下的顺序，而表中的行有从上往下的顺序
·关系中的属性没有从左往右的顺序，而表中的列有从左往右的顺序
关系中所有的属性的值都是不可分割的，而表中列的值是可以分
割的。换句话说，关系中的属性满足第一范式，而表中的列不满
足第一范式
仅从列出来的这几条就能看出，关系和表之间的区别还是很大的。与
关系相比，表的定义不太严谨，而且不明确。在前文中我们用了很多次“元
确实是这样的。元组和属性是关系模型中较为正式的术语，与非正式的日
注0
常用语有以下对应关系·，
关于该表，可参考（数据库系统
导论[第 7 质 1) / 机械工业出版
社, 2007 年 入。关系和表的区别
正式的关系模型术语
性鲁考了这本书 [但是在盈译本
非正式的日常用请
书时，为了与下文出现的美合中
关系(relation }
表 [ table ]
的“域。(fleld) 乍区分,这里
元组( tuple )
行[row）或记录[record）
没有技期（数据库原晓导论[第
7 期 1) 书中的用词把 Doeain
势 ( cardinality )
行数 [ number of rows ]
降为
“域”而是泽为了“定义
属性 ( attribute )
列( oolumn ） 或字段(field )
城'。
—编者注
度(degree）
列数 ( number of columns )
定义域 ( domain )
列的取值集合( pool of legal vaslues )
虽然上面出现了个别看起来很专业的术语，但是一点都不用在意。实
---
## Page 237
224—第2章关系数据库的世界
好处。关系模型是以数学中的集合论为基础的，因此沿用了集合论的一些
术语，我们了解了这一点就可以了。不过，阅读一些偏理论的比较严谨的
所以知道它们的对应关系还是有好处的。
前面说得有些多，让大家久等了。接下来我们介绍一下关系的正确定
义。关系的定义可以用下面这样一个公式来给出。
R ≤ (D1×D2×D3 · · · xDn)
（关系用符号R表示，属性用符号Ai表示，属性的定义域用符号Di表示）
这个公式读作“关系R是定义域D1,D2,，Dr的笛卡儿积的子集”。
公式很简洁，为了便于理解，我们再举个简单的例子解释一下。首先假设
有3个属性al、a2、a3，然后我们描述一下它们的定义域。这里说的定义
域与数学中函数的定义域一样，指的是“属性的取值集合”。我们假设属
性al可以取1种值，属性a2可以取2种值，属性a3可以取3种值。各
属性对应的定义域分别叫作dl、d2、d3。
d1 -{1 }
d2={男，女}
d3={红，绿，黄]
那么笔者间个间题。使用这3个定义域生成关系时，最大的元组数是
多少？答案是6.计算方法很简单，就是1×2×3=6.全部的元组如下
表所示。
简卡儿积（R1）
a1
a3
男
红
男
绿