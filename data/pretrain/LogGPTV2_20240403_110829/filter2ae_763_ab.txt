## 使用 `clock_gettime` 进行延迟循环 (clk_id: 1, 分辨率: 1ns)
- 发现 Winbond 闪存芯片 "W25Q128.V" (16384 kB, SPI) 在 linux_spi 上。
- 读取闪存... 完成。

## 从 MCU 中提取固件
从外部 Flash 芯片中提取固件是常见做法，但在某些情况下，固件可能存储在 MCU 的内部 Flash 中。这时需要通过调试接口（如 SWD/JTAG）来提取固件，并进行动态调试。

### 步骤和工具
1. **找到调试接口**：根据芯片手册确定调试接口的位置。例如，在研究某款智能设备时，发现板子上引出了 SWD 调试接口。
2. **硬件准备**：
   - 测试夹：用于接触芯片针脚。
   - FT232H：多功能 USB 到 JTAG/SWD/UART/FIFO SPI/I2C 模块。也可以使用 JLink、STLink 等调试器。
3. **软件准备**：
   - OpenOCD：一个开源的片上调试器，支持嵌入式设备的调试、编程和边界扫描功能，可与 GDB 配合使用进行动态调试。安装命令如下：
     ```bash
     sudo apt-get install openocd
     ```
     对于特殊需求，可以进行源码安装。部分芯片厂商对 OpenOCD 进行了适配，如新唐的 [OpenOCD-Nuvoton](https://github.com/OpenNuvoton/OpenOCD-Nuvoton)。

### 示例：STM32f030 RCT6 固件提取
以 STM32f030 RCT6 为例，该芯片采用 QFP 64 封装。

#### 1. OpenOCD 安装与配置
- 启动 OpenOCD 并加载配置文件：
  ```bash
  openocd -f interface/ft232h-module-swd.cfg -f target/stm32f0x.cfg
  ```
- 运行后，使用 Telnet 连接到本地 4444 端口与芯片交互。输入 `help` 查看支持的命令。通常使用 `dump_image` 命令提取固件。
- GDB 动态调试监听本地 3333 端口，进入 GDB 后通过 `target remote localhost:3333` 连接。

#### 2. 连线
- 根据芯片丝印下载相应的[芯片手册](https://www.st.com/resource/en/datasheet/stm32f030f4.pdf)，找到调试接口。STM32f030 RCT6 使用 SWD 接口，具体引脚为：
  - 7 号针脚：RESET
  - 46 号针脚：SWDIO
  - 49 号针脚：SWCLK
  - 63 号针脚：VSS
- 使用杜邦线连接测试夹到相应引脚，并将 FT232H 通过 USB 连接到电脑。注意 AD2(DO) 需要串联一个电阻，然后与 AD1(DI) 合并组成 SWDIO。

#### 3. 查看芯片手册并提取固件
- 根据芯片手册的内存映射，确定固件地址。例如，固件位于 0x8000000 至 0x8400000。
- 运行 OpenOCD 并成功连接后，使用 Telnet 连接到 4444 端口：
  ```bash
  telnet 127.0.0.1 4444
  ```
- 输入 `halt` 中断代码执行，然后使用 `dump_image` 命令导出固件：
  ```bash
  dump_image flash.bin 0x8000000 0x40000
  ```

### 注意事项
- 不是所有 QFP 封装的 MCU 都能免拆提取固件。许多现代芯片启用了代码读取保护（CRP/RDP），防止固件被提取。
- 本方法可用于 IoT 安全测试，验证 CRP 是否开启。
- 使用 ECU 探针读取固件的方式与使用测试夹类似，区别在于探针是搭在针脚上而不是夹住针脚。

以上是我近两年对 IoT 设备硬件的一些认识，如有不当之处，请不吝赐教。

### 参考资料
- [40种芯片封装类型介绍（含实图）](https://www.sohu.com/a/162899707_609521)
- [OpenOCD](https://github.com/ntfreak/openocd)
- [STM32 Read-out protection via OpenOCD](https://stackoverflow.com/questions/32509747/stm32-read-out-protection-via-openocd)