to call is passed as the fi rst and second arguments to objc_msgSend. However,
in reality it is slightly more complicated. These arguments often are passed
through many registers and stack values before ending up as an argument,
which would require complicated slicing of these values through the code.
(Actually, Hotchkies and Portnoy have a script that tries to do exactly this, with
limited success.) Instead of doing this analysis, you can utilize the ida-x86emu
emulator for IDA Pro, written by Chris Eagle. This tool, from a given spot in the
binary, emulates the x86 processor as it acts on emulated registers and an emu-
lated stack and heap. In this way, the program’s fl ow can be analyzed without
running the code. This plug-in was designed to help reverse-engineer malicious
and other self-modifying code. However, the emulation is useful in this case
because you can emulate entire functions and then whenever objc_msgSend is
called you can fi nd the values that are used as arguments to the function. We
do make one simplifi cation; the method presented here emulates each func-
tion in isolation—i.e., you do not emulate the functions called from within the
analyzed function. For the most part this inexact analysis is suffi cient since
you care only about arguments to this one function. This simplifi cation saves
time and overhead, but has the drawback of being somewhat inaccurate. For
example, if one of the arguments to objc_msgSend is passed as a parameter
to a function, you will not be able to identify it. For most cases, though, this
technique is suffi cient.
You want to go through each function, emulate it, and record the arguments
to objc_msgSend. ida-x86emu is designed as a GUI to interact with IDA Pro. So
9955336633cc0066..iinndddd 114466 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 147
you need to make some changes to it. For the code in its entirety, please consult
www.wiley.com/go/machackershandbook. What follows are some of the most
important changes that need to be made.
First you want to execute the code when ida-x86emu normally throws up its
GUI window, so replace the call to CreateDialog with a call to your code. Then
iterate through each function, and for each function emulate execution for all
instructions within it. This code is shown here. Note that you will not necessar-
ily go down every code path, so some calls to objc_msgSend may be missed.
void do_execute_single_function(unsigned int f_start, unsigned int
f_end){
int counter = 0;
while(counter f_end){
break;
}
codeCheck();
counter++;
}
}
void do_functions(){
int iFuncCount = get_func_qty();
msg(“Functions to process: %d\n”, iFuncCount);
for(int iIndex = 0; iIndex startEA);
resetCpu();
cpu.eip = pFunc->startEA;
do_execute_single_function(pFunc->startEA, pFunc->endEA);
} else {
msg(“\n*** Failed for index: %d! ***\n”, iIndex);
return;
}
}
}
So far you haven’t done anything except automate how the emulator works.
ida-x86emu has C++ code that emulates each (supported) instruction. The only
change you need to make is how the CALL instruction is handled:
9955336633cc0066..iinndddd 114477 11//2255//0099 44::4411::2277 PPMM
148 Part II ■ Discovering Vulnerabilities
get_func_name(cpu.eip + disp, buf, sizeof(buf));
if(!strcmp(buf, “objc_msgSend”)){
// Get name from ascii components
unsigned int func_name = readMem(esp + 4, SIZE_DWORD);
unsigned int class_name = readMem(esp, SIZE_DWORD);
get_ascii_contents(func_name, get_max_ascii_length(func_name,
ASCSTR_C, false), ASCSTR_C, buf, sizeof(buf));
if(class_name == -1){
strcpy(bufclass, “Unknown”);
} else {
get_ascii_contents(class_name, get_max_ascii_length(class_name,
ASCSTR_C, false), ASCSTR_C, bufclass, sizeof(bufclass));
}
strcpy(buf2, “[“);
strcat(buf2, bufclass);
strcat(buf2, “::”);
strcat(buf2, buf);
strcat(buf2, “]”);
xrefblk_t xb;
bool using_ida_name = false;
// Try to get IDA name by doing xref analysis. Can set xrefs too.
for ( bool ok=xb.first_to(func_name, XREF_ALL); ok; ok=xb.next_to()
)
{
char buffer[64];
get_segm_name(xb.from, buffer, sizeof(buffer));
if(!strcmp(buffer, “__inst_meth”) || !strcmp(buffer,
“__cat_inst_meth”)){
// now see where this guy points
xrefblk_t xb2;
for ( bool ok=xb2.first_from(xb.from, XREF_ALL); ok;
ok=xb2.next_from() )
{
get_segm_name(xb2.to, buffer, sizeof(buffer));
if(!strcmp(buffer, “__text”)){
using_ida_name = true;
get_func_name(xb2.to, buf2, sizeof(buf2));
add_cref(cpu.eip - 5, xb2.to, fl_CN);
add_cref(xb2.to, cpu.eip - 5, fl_CN);
}
}
}
}
if(!using_ida_name){
set_cmt(cpu.eip-5, buf2, true);
}
eax = class_name;
9955336633cc0066..iinndddd 114488 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 149
This code runs only when the name of the function being called is objc_
msgSend. It then reads the values of the two arguments to the function stored
on the stack and gets the strings at those addresses. In the case, when the code
doesn’t have the class information (for example, if this were an argument to the
function being emulated), it uses the string Unknown. It then builds a string
that describes the function really being called and adds a comment to the IDA
Pro database if it cannot determine the exact location of the function.
The way it tries to determine the function relies on the mechanics of the Obj-C
runtime library. It starts at the ASCII string, which describes the function that
needs to be called—for example, set_integer:. It looks at any cross-references
to this string and tries to fi nd one in a section called either __inst_method or
__cat_inst_method. If it fi nds one there, it knows that these particular structures
are arranged such that the third dword points to the code for the function, as
you saw earlier in this chapter. In particular, this data structure references the
code. So the plug-in looks for any references to any code in the __text section.
If it fi nds one, it knows it has located the code associated with the string. When
it can carry out these steps, it knows the address of the executable code that
will eventually be called via objc_msgSend. In this case it can place appropri-
ate cross-references in the IDA Pro database. With the addition of these cross-
references, when viewing the disassembly it is possible to view and navigate
to the functions being called.
If this method of looking up the code associated with the string fails (for
example, if the code were located in a different binary), then the ASCII string
is placed as a comment next to the call to objc_msgSend. Finally, the program
sets the function’s return value to be the name of the class being used, for future
reference by the emulator.
To use this plug-in, make sure it is located in the plug-in directory of IDA
Pro. Then, when the binary being disassembled is ready, press Alt+F8, the
key sequence originally used to activate the ida-x86emu plug-in. This should
add cross-references and comments to many of the calls to objc_msgSend; see
Figure 6-15.
The cross-references also make backtracing calls much easier. Compare
Figure 6-16 to Figure 6-14.
9955336633cc0066..iinndddd 114499 11//2255//0099 44::4411::2277 PPMM
150 Part II ■ Discovering Vulnerabilities
Figure 6-15: Calls to objc_msgSend are either commented with their destination or
have cross-references added.
Figure 6-16: This function now has three code cross-references listed as to where it
is called.
Case Study
In the previous chapter you were able to use the Pai Mei reverse-engineering
framework to isolate a function that was responsible for the functioning of the
+ button in the Calculator application; however, you stopped there. Now you’ll
9955336633cc0066..iinndddd 115500 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 151
take a closer look at that function, fi gure out how it works, and modify it so that
it acts like the - (minus) button.
Figure 6-17: A call to objc_msgSend within the Calculate shared library that does the
actual addition. No cross-reference was generated because this code resides in a different
shared library.
By looking at this function and the coloring provided by the IDC fi le Pai Mei
generated, you can see what code path was executed. The fi rst few function calls
are to _evaluateTree(). Presumably this does the lexiconical parsing to fi gure
out which two numbers are being added. The fi nal function call is to decimal-
NumberByAdding: via objc_msgSend(), see Figure 6-17. It’s a safe guess that this
is the function that does the actual adding of the numbers. Let’s fi re up GDB
and take a closer look at the stack when objc_msgSend() is called. According
to IDA Pro, this function is called at address 0x2d40 from the beginning of the
Calculate library. By attaching a debugger to Calculator, you can determine the
address at which this library is loaded.
(gdb) info sharedlibrary
The DYLD shared library state has not yet been initialized.
Requested State Current State
Num Basename Type Address Reason | | Source
| | | | | | | |
1 Calculator - 0x1000 exec Y Y
/Applications/Calculator.app/Contents/MacOS/Calculator (offset 0x0)
2 dyld - 0x8fe00000 dyld Y Y
/usr/lib/dyld at 0x8fe00000 (offset 0x0) with prefix “__dyld_”
3 Cocoa F 0x9057a000 dyld Y Y
/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa at
0x9057a000 (offset -0x6fa86000)
4 SpeechDictionary F 0x33000 dyld Y Y
/System/Library/PrivateFrameworks/SpeechDictionary.framework/Versions/A/
SpeechDictionary at 0x33000 (offset 0x33000)
5 SpeechObjects F 0x66000 dyld Y Y
/System/Library/PrivateFrameworks/SpeechObjects.framework/Versions/A/
SpeechObjects at 0x66000 (offset 0x66000)
6 SystemConfiguration F 0x93c07000 dyld Y Y
/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/
SystemConfiguration at 0x93c07000 (offset -0x6c3f9000)
9955336633cc0066..iinndddd 115511 11//2255//0099 44::4411::2277 PPMM
152 Part II ■ Discovering Vulnerabilities
7 Calculate F 0x82000 dyld Y Y
/System/Library/PrivateFrameworks/Calculate.framework/Versions/A/
Calculate at 0x82000 (offset 0x82000)
…
The Calculate shared library is loaded at 0x82000, and you want 0x2d40 bytes
past that. Quickly double-check whether this is correct.
(gdb) x/i 0x84d40
0x84d40 : call 0x8e221
That looks good. Set a breakpoint there and do a simple addition in Calculator.
For example, add the numbers 1,234 and 9,876. When the breakpoint is hit, the
stack looks like this:
Breakpoint 1, 0x00084d40 in functionAddDecimal ()
(gdb) x/3x $esp
0xbfff2080: 0x00175390 0x90e6ac80 0x0016e480
Since this is a call to objc_msgSend, you expect the class in which this method
resides to be the fi rst argument, the name of the method to be the second, and
any arguments to the method to be the third. Take a look at the fi rst value.
(gdb) x/4x 0x00175390
0x175390: 0xa08dc440 0x00002100 0x000004d2 0x00000000
This looks like a data structure, and the third element is 0x4d2 = 1234, your
number. This confi rms what you expected. The second argument also conforms
to your expectations.
(gdb) x/s 0x90e6ac80
0x90e6ac80 : “decimalNumberByAdding:”
The third argument looks just like the fi rst one, except it has a different value
(0x2694 = 9876).
(gdb) x/4x 0x0016e480
0x16e480: 0xa08dc440 0x00002100 0x00002694 0x00000000
Finally, notice that you can identify the type of class by the fi rst member of
the structure.
(gdb) x/4x 0xa08dc440
0xa08dc440 : 0xa08e3200
0xa08e1140 0x96be759a 0x00000000
9955336633cc0066..iinndddd 115522 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 153
Not too surprisingly, these classes are of type NSDecimalNumber.
Furthermore, the second and third values in that class are as follows:
(gdb) x/4x 0xa08e1140
0xa08e1140 : 0xa08e7f00 0xa08e1100
0x96bde1f4 0x00000000
(gdb) x/4s 0x96be759a
0x96be759a : “NSDecimalNumber”
It would seem that the second element of this class contains a reference to the
superclass, in this case NSNumber. The third element is a pointer to a string
that describes the class. You can continue in this fashion until you get to the
highest level of class.
(gdb) x/4x 0xa08e1100
0xa08e1100 : 0xa08e7ec0 0xa07f7cc0
0x96bf928c 0x00000000
(gdb) x/4x 0xa07f7cc0
0xa07f7cc0 : 0xa07f88c0 0x00000000
0x96240564 0x00000000
By exploring with GDB, you discover that the hierarchy for this class is as
illustrated in Figure 6-18.
NSObject NSValue NSNumber NSDecimalNumber
Figure 6-18: Class hierarchy of the object found in memory
You were able to derive some class relationships by looking at the data. Before
moving on, you should verify that you really understand things. In the debug-
ger, change the value of the second number being added from 9,876 to 1 and
verify what the Calculator program displays.
(gdb) set *0x16e488=1
9955336633cc0066..iinndddd 115533 11//2255//0099 44::4411::2277 PPMM
154 Part II ■ Discovering Vulnerabilities
The result of 1,235 (which is 1,234 + 1) displayed indicates you do understand
how this function works; see Figure 6-19.
Figure 6-19: By using a debugger, you were
able to change the way the + button operates.
Patching Binaries
Before you fi nish messing around with the Calculator application, we will dem-
onstrate how binaries (libraries, actually) can be changed to permanently affect
the behavior of the application. This could be useful, for example, in disabling
the anti-debugging features of iTunes.
In this case you’ll permanently change the + button to function like a - button.
By now you completely understand the way the function functionAddDecimal()
works, so to make it subtract instead of add, you simply need to replace a call
to decimalNumberByAdding: with a call to decimalNumberBySubtracting:.
Since these are Obj-C methods and the call to objC_msgSend takes a pointer to
a string that describes the name of the function as the second argument, all you
need to do is replace this pointer with a pointer to a different string. You don’t
have to fi gure out function offsets or anything complicated; simply replace the
pointer to decimalNumberByAdding with a pointer to decimalNumberBySub-
tracting. The relevant instruction where this needs to occur is
mov eax, [ebx+83a5h]
where EBX is a data anchor from EIP-relative addressing. Looking in IDA Pro
at this reference’s region of memory, you see a series of pointers to different
ASCII strings; see Figure 6-20. The pointer for subtracting follows directly after
the pointer for adding; how convenient.
Simply adding 4 to the offset in functionAddDecimal(), which loads the
string, will change the behavior of the function to have the desired property.
In IDA Pro, you can see the corresponding bytes to the instruction in question
9955336633cc0066..iinndddd 115544 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 155
by choosing Options ➯ General and selecting the number of opcode bytes to
be something like 10; see Figure 6-21.
Figure 6-20: A list of different types of Obj-C messages. decimalNumberByAdding:
appears near the bottom of the list, followed by decimalNumberBySubtracting.
Figure 6-21: IDA Pro will reveal which bytes correspond to each instruction.
Loading the shared library in a hex editor, such as 0xED, and searching for
the corresponding bytes to the instruction, 8b 83 a5 83 00 00, reveals one unique
occurrence in the fi le. You simply need to change a5 to a9; see Figure 6-22.
NOTE This change can actually be done all within IDA Pro, but it is a little
more complicated.
9955336633cc0066..iinndddd 115555 11//2255//0099 44::4411::2277 PPMM