(25[0-5]2[0-4][0-9]|[01]?[0-9][0-9])\.
(25[0-5]|2[0-4][0-9]][01]?[0-9][0-9]?).
(25[0-5]]2[0-4][0-9]][01]?[0-9][0-9]?). 
(25[0-5]]2[0-4][0-9]][01]?[0-9][0-9]?]$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Accurate regex that captures the four parts of the IP address, disallowing leading zeros:
^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9])\.
(25[0-5]]2[0-4][0-9]]1[0-9][0-9]][1-9]?[0-9]]. *
(25[0-5]]2[0-4][0-9]]1[0-9][0-9]][1-9]?[0-9]).
(25[0-5]|2[0-4][0-9]]1[0-9][0-9]—[1-9]?[0-9]]$
Regexoptions: None
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Perl
if ($subject =~ m/^([0-9]{1,3})-([0-9]{1,3}) ([0-9]{1,3))\-([0-9]{1,3})/)
$ip = $1  to match each of
the four numbers in the IP address. This regex accurately matches a number in the
range 0 to 255, with one optional leading zero for numbers between 10 and 99, and
rwo optional leading zeros for numbers berween 0 and 9.  takes care of
0 to 199, including the optional leading zeros. Recipe 6.7 explains in detail how to
match numeric ranges with a regular expression.
While many applications accept IP addresses with leading zeros, strictly speaking lead-
ing zeros are not allowed in IPv4 addresses. We can enhance the regexes to use  asn amou am ~66 01 0 a8ueu a qo1eu 01 <[6-0][6-0][to] 1sn{ Bu1sn go
[19][0-9] with two separate alternatives. <1[0-9][0-9] matches the range 100 to
199. <[1-9]?[0-9] matches the range 0 to 99. By making the leading digit optional, we
can use a single altermative to match both the single digit and double digit ranges.
If you want to check whether a string is a valid IP address in its entirety, use one of the
regexes that begin with a caret and end with a dollar. These are the start-of-string and
end-of-string anchors, explained in Recipe 2.5. If you want to find IP addresses within
longer text, use one of the regexes that begin and end with the word boundaries
\b (Recipe 2.6)
The first four regular expressions use the form (?:nunber\  ){3nunber. The first three
numbers in the IP address are matched by a noncapturing group (Recipe 2.9) that is
repeated three times (Recipe 2.12). The group matches a number and a literal dot, of
which there are three in an IP address. The last part of the regex matches the final
number in the IP address. Using the noncapruring group and repeating it three times
makes our regular expression shorter and more efficient.
To convert the textual representation of the IP address into an integer, we need to
capture the four numbers separately. The last two regexes in the solution do this. In-
stead of using the trick of repeating a group three times, they have four capturing
groups, one for each number. Spelling things out this way is the only way we can
separately capture all four numbers in the IP address.
Once we’ve captured the number, combining them into a 32-bit number is easy. In
Perl, the special variables $1, $2,$3, and $4 hold the text matched by the four capruring
groups in the regular expression. Recipe 3.9 explains how to retrieve capturing groups
in other programming languages. In Perl, the string variables for the capturing groups
are automatically coerced into numbers when we apply the bitwise left shift operator
(<<) to them. In other languages, you may have to call String. toInteger() or something
similar before you can shift the numbers and combine them with a bitwise or.
8.16 Matching IPv4 Addresses I 471
---
## Page 488
See Also
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.3 explains
character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains word boundaries.
Recipe 2.9 explains grouping. Recipe 2.8 explains altemation. Recipe 2.12 explains
repetition.
8.17 MatchingIPv6Addresses
Problem
You want to check whether a string represents a valid IPv6 address using the standard,
compact, and/or mixed notations.
Solution
Standard notation
Match an IPv6 address in standard notation, which consists of eight 16-bit words using
hexadecimal notation, delimited by colons (e.g.: 1762:0:0:0:0:B03:1:AF18). Leading
zeros are optional.
Check whether the whole subject text is an IPv6 address using standard notation:
(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
\A(?: [A-F0-9]{1,4} : ){7}[A-F0-9]{1,4}\Z
Regexoptions: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
Find an IPv6 address using standard notation within a larger collection of text:
?<![: . \])(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}(?![: \])
Regex options: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby 1.9
JavaScript and Ruby 1.8 don’t support lookbehind. We have to remove the check at
the start of the regex that keeps it from finding IPv6 addresses within longer sequences
of hexadecimal digits and colons. A word boundary performs part of the test:
b(?: [A-F0-9]{1,4} :){7}[A-F0-9]{1,4)\b
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
472 | Chapter 8: URLs, Paths, and Intemet Adreses
---
## Page 489
Mixed notation
Match an IPv6 adress in mixed notation, which consists of six 16-bir words using
hexadecimal notation, followed by four bytes using decimal notation. The words are
delimited with colons, and the bytes with dots. A colon separates the words from the
bytes. Leading zeros are optional for both the hexadecimal words and the decimal bytes.
This notation is used in situations where IPv4 and IPv6 are mixed, and the IPv6 ad-
dresses are extensions of the IPv4 addresses. 1762:0:0:0:0:B03:127 32. 67 15 is an ex-
ample of an IPv6 address in mixed notation.
Check whether the whole subject text is an IPv6 address using mixed notation:
(?:[A-F0-9]{1,4}:){6}(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9]}
){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9]]$
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Find IPv6 address using mixed notation within a larger collection of text:
(?<![:.\])(?:[A-F0-9]{1,4}:){6}
？:(?:25[0-5]|2[0-4][0-9]]1[0-9][0-9]][1-9][0-9]).){3}
?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]1[1-9]?[0-9])(?![: - \]]
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
JavaScript and Ruby 1.8 don’t support lookbehind. We have to remove the check at
the start of the regex that keeps it from finding IPv6 addresses within longer sequences
of hexadecimal digits and colons. A word boundary performs part of the test:
\b(?:[A-F0-9]{1,4}:){6}(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]) 
\){3}{?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9]]b
Regexoptions: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Standard or mixed notation
Match an IPv6 address using standard or mixed notation.
Check whether the whole subject text is an IPv6 address using standard or mixed
notation:
\A
# Start of string
(?:[A-F0-9]{1,4}:){6}
?:[A-F0-9]{1,4}:[A-F0-9]{1,4}
# 6 words
# or 4 bytes
# 2 words
(？:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9])-){3}
(?:25[0-5]2[0-4][0-9]11[0-9][0-9]][1-9]?[0-9]]
)Z
# End of string
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
8.17 Matching IPv6 Addresses I 473
---
## Page 490
(?:[A-F0-9]{1,4}:){6}(?:[A-F0-9]{1,4}:[A-F0-9]{1,4}∣
？:(?:25[0-5]|2[0-4][0-9]]1[0-9][0-9]][1-9]?[0-9])){3}
?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]1[1-9]?[0-9]]]$
Regex options: Case insensitive
Regexflavors: .NET, Java, JavaScripr, PCRE, Perl, Python
Find IPv6 address using standard or mixed notation within a larger collection of text:
(？<！[:.\])
# Anchor address
(?:[A-F0-9]{1,4}:)(6}
(?:[A-F0-9]{1,4}:[A-F0-9](1,4}
# 2 words
# 6 words
(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9]]\-){3} # or 4 bytes
(?:25[0-5]|2[0-4][0-9]]1[0-9][0-9]][1-9]?[0-9]]
)(?![:.\])
# Anchor address
Regex options: Free-spacing, case insensitive
Regexflarer: .NET, Java, PCRE, Perl, Python, Ruby 1.9
JavaScript and Ruby 1.8 don’t support lookbehind. We have to remove the check at
the start of the regex that keeps it from finding IPv6 addresses within longer sequences
of hexadecimal digits and colons. A word boundary performs part of the test:
b
Kxepunoq pxon #
(?:[A-F0-9]{1,4}:)(6}
(?:[A-F0-9](1,4}:[A-F0-9]{1,4}
 2 words
# 6 words
(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9]]-){3}
#or 4bytes
(?:25[0-5]2[0-4][0-9]]1[0-9][0-9]][1-9]?[0-9]]
)b
Kxepunoq pxon #
Regex options: Free-spacing, case insensitive
Regexflaver: .NET, Java, PCRE, Perl, Python, Ruby
\b(?:[A-F0-9]{1,4}:){6}(?:[A-F0-9]{1,4}:[A-F0-9]{1,4}∣
？:(?:25[0-5]|2[0-4][0-9]]1[0-9][0-9]][1-9]?[0-9])){3}
？:25[0-5]|2[0-4][0-9]|1[0-9][0-9]1[1-9]?[0-9]]]b
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Compressed notation
Match an IPv6 address using compressed notation. Compressed notation is the same
as standard notation, except that one sequence of one or more words that are zero may
be omitted, leaving only the colons before and after the omitted zeros. Addresses using
compressed notation can be recognized by the occurrence of rwo adjacent colons in
the address. Only one sequence of zeros may be omitted; otherwise, it would be
impossible to determine how many words have been omitted in each sequence. If the
omitted sequence of zeros is at the start or the end of the IP address, it will begin or
end with two colons. If all numbers are zero, the compressed IPv6 address consists of
just two colons, without any digits.
474 I Chapter 8: URLs, Paths, and Intermet Addresses
---
## Page 491
For example, 1762: :B03:1:AF18 is the compressed form of 1762:0:0:0:0:B03:1:AF18.
The regular expressions in this section will match both the compressed and the standard
form of the IPv6 address. Check whether the whole subject text is an IPv6 address using
standard or compressed notation:
\A(?:
# Standard
(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}
# Compressed with at most 7 colons
|(?=(?:[A-F0-9]{0,4}:){0,7}[A-F0-9]{0,4}
# and at most 1 double colon
\Z) # and anchored
(([0-9A-F]{1,4} :){1,7}| :)((:[0-9A-F]{1,4}){1,7}∣:)
# Compressed with 8 colons
1(?:[A-F0-9]{1,4}:){7}:| :(:[A-F0-9]{1,4}){7}
)Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
(?:(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}1(?=(?:[A-F0-9]{0,4}:){0,7}
[A-F0-9]{0,4}$)(([0-9A-F](1,4}:){1,7}1:)((：[0-9A-F]{1,4})(1,7)| :)
(?:[A-F0-9]{1,4}:){7}: | : (: [A-F0-9]{1,4}){7})$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Find IPv6 address using standard or compressed notation within a larger collection of
text:
(？<！[:.\])(?:
(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}
# Standard
# Compressed with at most 7 colons
|(?=(?:[A-F0-9]{0,4}:){0,7}[A-F0-9]{0,4}
(?![:.\w])) # and anchored
# and at most 1 double colon
({[0-9A-F]{1,4}:){1,7}| :)((:[0-9A-F]{1,4}){1,7}|:)
# Compressed with 8 colons
1(?:[A-F0-9]{1,4}:){7}:|:(:[A-F0-9]{1,4}){7}
)(?![:\])
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby 1.9
JavaScript and Ruby 1.8 don’t support lookbehind, so we have to remove the check at
the start of the regex that keeps it from finding IPv6 addresses within longer sequences
of hexadecimal digits and colons. We cannot use a word boundary, because the address
may start with a colon, which is not a word character:
(？:
# Standard
(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}
8.17 Matching IPv6 Addresses | 475
---
## Page 492
# Compressed with at most 7 colons
1(?=(?:[A-F0-9]{0,4}:){0,7}[A-F0-9]{0,4}
(?![:.\w])) # and anchored
#and at most 1 double colon
({[0-9A-F]{1,4} :){1,7}| :){(:[0-9A-F]{1,4}){1,7}|:)
# Compressed with 8 colons
1(?:[A-F0-9]{1,4}:){7}: | : (: [A-F0-9]{1,4}){7}
(?![: .\])
Regex options: Free-spacing, case insensitive
Regexflavers: NET, Java, PCRE, Perl, Python, Ruby
?:(?:[A-F0-9]{1,4):){7}[A-F0-9]{1,4}1(?=(?:[A-F0-9]{0,4}:){0,7}
[A-F0-9]{0,4}(?![: \]))(([0-9A-F]{1,4}:){1,7}|=)((:[0-9A-F]{1,4}){1,7}1:)
1(?:[A-F0-9]{1,4}:){7}:| : (: [A-F0-9]{1,4}){7})(?![: -\])
Regexoptions: Case insensitive
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Compressed mixed notation
Match an IPv6 address using compressed mixed notation. Compressed mixed notation
is the same as mixed notation, except that one sequence of one or more words that are
four decimal bytes must all be specified, even if they are zero. Addresses using com-
zero may be omitted, leaving only the colons before and after the omitted zeros. The
pressed mixed notation can be recognized by the occurrence of trwo adjacent colons in
the first part of the address and the three dots in the second part. Only one sequence
of zeros may be omitted; otherwise, it would be impossible to determine how many
words have been omitted in each sequence. If the omitted sequence of zeros is at the
start of the IP address, it will begin with rwo colons rather than with a digit.
For example, the IPv6 address 1762:B03:127,32.67.15 is the compressed form of
1762:0:0:0:0:B03:127-32.67.15. The regular expressions in this section will match
both compressed and noncompressed IPv6 address using mixed notation.
Check whether the whole subject text is an IPv6 address using compressed or non-
compressed mixed notation:
\A
(?:
# Non-compressed
(?:[A-F0-9]{1,4}:){6}
# Compressed with at most 6 colons
1(?=(?:[A-F0-9]{0,4}:){0,6}
(?:[0-9]{1,3).){3}[0-9]{1,3}
# and 4 bytes
# and at most 1 double colon
\Z)
# and anchored
(([0-9A-F]{1,4} :){0,5}|:)((:[0-9A-F]{(1,4}){1,5} : |:)
# Compressed with 7 colons and 5 numbers
|:: (?: [A-F0-9]{1,4} :){5}
476 | Chapter 8: URLs, Paths, and Intemet Addresses
---
## Page 493
# 255.255.255.
(?:(?:25[0-5]12[0-4][0-9]|1[0-9][0-9]][1-9]?[0-9]). ){3]
#255
(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]—[1-9]?[0-9]]
Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
(?:(?:[A-F0-9]{1,4}:){6}1(?=(?:[A-F0-9]{0,4}:){0,6)(?:[0-9]{1,3}\.)
{3}[0-9]{1,3}$)(([0-9A-F]{1,4}:){0,5}]:)((=[0-9A-F]{1,4}){1,5}:1:)
|::(?:[A-F0-9]{1,4}:){5})(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|