### 优化后的文本

```powershell
ConvertFrom-CIPolicy -XmlFilePath $MergedPolicyFilePath -BinaryFilePath $DeployedPolicyPath
```

在上述代码中，我们生成了一个新的策略，并指定了恶意代码的安装路径。在实际攻击场景中，这些代码可能存在于任何目录中。因此，你可以通过生成这种新型的拒绝策略来阻止恶意代码的执行。

接下来，我们需要对指定目录进行扫描。在此过程中，你需要过滤出希望阻止的特定代码，然后将拒绝策略和引用策略整合，最后重新部署新生成的策略。部署完成后，需要验证新策略的有效性。为了确保这一点，请完成以下配置工作：

1. 确保已屏蔽目标代码的 x86 和 x64 版本。
2. 至少屏蔽目标代码的两种版本或架构。

例如，为了验证已签名的 `cdb.exe` 是否还会被执行，你需要确保 32 位和 64 位版本的 `cdb.exe` 都已被添加到拒绝规则中。

需要注意的是，为了防止此类攻击，我们必须修改安全策略，并手动向 XML 文件中添加目标代码的具体版本号。在未来的 Device Guard 版本中，微软将允许用户通过指定通配符为特定代码的所有版本设置拒绝规则。这种机制看似一劳永逸，但随着新的绕过方法不断出现，你可以利用这种简单的流程向 Device Guard 的代码完整性策略中添加相应的拒绝规则。

目前，我已经对这种缓解措施进行了大量测试，结果显示该方案不仅有效，而且实现起来相对简单。尽管如此，我仍希望安全研究人员能够从我的理论中找出潜在漏洞。如果你能够绕过这一缓解措施，请务必告知我。

以下是基于上述代码生成的策略文件示例：

```plaintext
10.0.0.0
{A244370E-44C9-4C06-B551-F6016E563076}
{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}
    Enabled: Unsigned System Integrity Policy
    Enabled: Audit Mode
    Enabled: Advanced Boot Options Menu
    Required: Enforce Store Applications
    Enabled: UMCI
0
```

希望这些信息对你有所帮助。如有任何问题或反馈，请随时联系我。