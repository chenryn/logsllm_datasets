Flexible Indexing with Postgres
BRUCE MOMJIAN
Postgres offers a wide variety of indexing structures, and many
index lookup methods with specialized capabilities.This talk
explores the many Postgres indexing options. Includes concepts from
Teodor Sigaev, Alexander Korotkov, Oleg Bartunov, Jonathan Katz
CreativeCommons AttributionLicense http://momjian.us/presentations
Lastupdated:May,2017
1/52
Outline
1. Traditional indexing
2. Expression indexes
3. Partial indexes
4. Benefits of bitmap index scans
5. Non-b-tree index types
6. Data type support for index types
7. Index usage summary
2/52
Traditional Indexing
https://www.flickr.com/photos/ogimogi/
3/52
B-Tree
◮ Ideal for looking up unique values and maintaining unique
indexes
◮ High concurrency implementation
◮ Index is key/row-pointer, key/row-pointer
◮ Supply ordered data for queries
◮ ORDERBY clauses(andLIMIT)
◮ Mergejoins
◮ Nestedloop withindexscans
4/52
But I Want More!
◮ Index expressions/functions
◮ Row control
◮ Small, light-weight indexes
◮ Index non-linear data
◮ Closest-match searches
◮ Index data with many duplicates
◮ Index multi-valued fields
5/52
Expression Index
SELECT * FROM customer WHERE lower(name) = ’andy’;
CREATE INDEX i_customer_name ON customer (name);
Ö
CREATE INDEX i_customer_lower ON customer (lower(name));
6/52
Let’s Test It
CREATE TABLE customer (name) AS
SELECT ’cust’ || i
FROM generate_series(1, 1000) AS g(i);
SELECT 1000
CREATE INDEX i_customer_name ON customer (name);
CREATE INDEX
EXPLAIN SELECT * FROM customer WHERE name = ’cust999’;
QUERY PLAN
------------------------------------------------------
Index Only Scan using i_customer_name on customer ...
Index Cond: (name = ’cust999’::text)
EXPLAIN SELECT * FROM customer WHERE lower(name) = ’cust999’;
QUERY PLAN
---------------------------------------------------------
Seq Scan on customer (cost=0.00..20.00 rows=5 width=7)
Filter: (lower(name) = ’cust999’::text)
7/52
Create an Expression Index
CREATE INDEX i_customer_lower ON customer (lower(name));
CREATE INDEX
EXPLAIN SELECT * FROM customer WHERE lower(name) = ’cust999’;
QUERY PLAN
---------------------------------------------------------------
Bitmap Heap Scan on customer (cost=4.32..9.66 rows=5 width=7)
Recheck Cond: (lower(name) = ’cust999’::text)
-> Bitmap Index Scan on i_customer_lower ...
Index Cond: (lower(name) = ’cust999’::text)
8/52
Other Expression Index Options
◮ User-defined functions
◮ Concatenation of columns
◮ Math expressions
◮ Only IMMUTABLE functions can be used
◮ Consider casting when matching WHERE clause expressions
to the indexed expression
9/52
Partial Index: Index Row Control
◮ Why index every row if you are only going to look up some
of them?
◮ Smaller index on disk and in memory
◮ More shallow index
◮ Less INSERT/UPDATE index overhead
◮ Sequential scan still possible
10/52
Partial Index Creation
ALTER TABLE customer ADD COLUMN state CHAR(2);
ALTER TABLE
UPDATE customer SET state = ’AZ’
WHERE name LIKE ’cust9__’;
UPDATE 100
CREATE INDEX i_customer_state_az ON customer (state) WHERE state = ’AZ’;
CREATE INDEX
11/52
Test the Partial Index
EXPLAIN SELECT * FROM customer WHERE state = ’PA’;
QUERY PLAN
----------------------------------------------------------
Seq Scan on customer (cost=0.00..17.50 rows=5 width=19)
Filter: (state = ’PA’::bpchar)
EXPLAIN SELECT * FROM customer WHERE state = ’AZ’;
QUERY PLAN
----------------------------------------------------------------------------
Bitmap Heap Scan on customer (cost=4.18..9.51 rows=5 width=19)
Recheck Cond: (state = ’AZ’::bpchar)
-> Bitmap Index Scan on i_customer_state_az ...
Index Cond: (state = ’AZ’::bpchar)
12/52
Partial Index With Different Indexed Column
DROP INDEX i_customer_name;
DROP INDEX
CREATE INDEX i_customer_name_az ON customer (name) WHERE state = ’AZ’;
CREATE INDEX
EXPLAIN SELECT * FROM customer WHERE name = ’cust975’;
QUERY PLAN
----------------------------------------------------------
Seq Scan on customer (cost=0.00..17.50 rows=1 width=19)
Filter: (name = ’cust975’::text)
Index Cond: (state = ’AZ’::bpchar)
13/52
Partial Index With Different Indexed Column
EXPLAIN SELECT * FROM customer
WHERE name = ’cust975’ AND state = ’AZ’;
QUERY PLAN
-----------------------------------------------------
Index Scan using i_customer_name_az on customer ...
Index Cond: (name = ’cust975’::text)
EXPLAIN SELECT * FROM customer
WHERE state = ’AZ’;
QUERY PLAN
----------------------------------------------------------------
Bitmap Heap Scan on customer (cost=4.17..9.50 rows=5 width=19)
Recheck Cond: (state = ’AZ’::bpchar)
-> Bitmap Index Scan on i_customer_name_az ...
14/52
Benefits of Bitmap Index Scans
◮ Used when:
◮ anindexlookup mightgeneratemultiplehitsonthesame
heap(data)page
◮ usingmultipleindexesfor asinglequeryisuseful
◮ Creates a bitmap of matching entries in memory
◮ Row or block-level granularity
◮ Bitmap allows heap pages to be visited only once for
multiple matches
◮ Bitmap can merge the results from several indexes with
AND/OR filtering
◮ Automatically enabled by the optimizer
15/52
Bitmap Index Scan
Index 1 Index 2 Combined Table
col1 = ’A’col2 = ’NS’ Index
0 0 0 ’A’ AND ’NS’
1 1 1
& =
0 1 0
1 0 0
16/52
Non-B-Tree Index Types
https://www.flickr.com/photos/archeon/
17/52
Block-Range Index (BRIN)
◮ Tiny indexes designed for large tables
◮ Minimum/maximum values stored for a range of blocks
(default 1MB, 128 8k pages)
◮ Allows skipping large sections of the table that cannot
contain matching values
◮ Ideally for naturally-ordered tables, e.g. insert-only tables are
chronologically ordered
◮ Index is 0.003% the size of the heap
◮ Indexes are inexpensive to update
◮ Index every column at little cost
◮ Slower lookups than btree
18/52
Generalized Inverted Index (GIN)
◮ Best for indexing values with many keys or values, e.g.
◮ textdocuments
◮ JSON
◮ multi-dimensionaldata,arrays
◮ Ideal for columns containing many duplicates
◮ Optimized for multi-row matches
◮ Key is stored only once
◮ Index is key/many-row-pointers
◮ Index updates are batched, though always checked for
accuracy
◮ In Postgres 9.4
◮ compressionofrow pointerlist
◮ optimizedmulti-keyfiltering
19/52
Generalized Search Tree (GIST)
GIST is a general indexing framework designed to allow indexing
of complex data types with minimal programming. Supported
data types include:
◮ geometric types
◮ range types
◮ hstore (key/value pairs)
◮ intarray (integer arrays)
◮ pg_trgm (trigrams)
Supports optional “distance” for nearest-neighbors/closest
matches. (GIN is also generalized.)
20/52
Space-Partitioned Generalized Search Tree
(SP-GIST)
◮ Similar to GIST in that it is a generalizedindexing framework
◮ Allows the key to be split apart (decomposed)
◮ Parts are indexed hierarchically into partitions
◮ Partitions are of different sizes
◮ Each child needs to store only the child-unique portion of
the original value because each entry in the partition shares
the same parent value.
21/52
Hash Indexes
◮ Equality, non-equality lookups; no range lookups
◮ Not crash-safe
◮ Not replicated
◮ Cannot be restored via point-in-time recovery
◮ Poor performance and concurrency characteristics
◮ Boo!
22/52
I Am Not Making This Up
SELECT amname, obj_description(oid, ’pg_am’)
FROM pg_am ORDER BY 1;
amname | obj_description
--------+----------------------------------------
brin | block range index (BRIN) access method
btree | b-tree index access method
gin | GIN index access method
gist | GiST index access method
hash | hash index access method
spgist | SP-GiST index access method
23/52
Index Type Summary
◮ B-tree is ideal for unique values
◮ BRIN is ideal for the indexing of many columns
◮ GIN is ideal for indexes with many duplicates
◮ SP-GIST is ideal for indexes whose keys have many duplicate
prefixes
◮ GIST for everything else
24/52
Data Type Support for Index Types
https://www.flickr.com/photos/jonobass/
25/52
Finding Supported Data Types - B-Tree
SELECT opfname FROM pg_opfamily, pg_am
WHERE opfmethod = pg_am.oid AND amname = ’btree’
ORDER BY 1;
abstime_ops jsonb_ops text_ops
array_ops macaddr_ops text_pattern_ops
bit_ops money_ops tid_ops
bool_ops name_ops time_ops
bpchar_ops network_ops timetz_ops
bpchar_pattern_ops numeric_ops tinterval_ops