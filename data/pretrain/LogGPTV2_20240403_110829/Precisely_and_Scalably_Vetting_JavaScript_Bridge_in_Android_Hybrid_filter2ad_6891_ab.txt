and a shadowbox, respectively)
– A variable v’s representation (cid:3)scopev, namev(cid:4): Generally, scopev is the
full name of a function (for local variables), an object (for regular ﬁelds), or
a class name (for static ﬁelds), while namev is v’s name, which is usually a
register name.
Furthermore, to support inter-component communication (ICC) [33], the
global but temporary representation  is created to rep-
resent an intent message. To record a function f’s return value, the represen-
tation  is used.
– Points-to relationship: If a variable v points to an object o, whose shadow-
box is s, v and o have points-to relationship, which is represented by v → s.
– Alias relationship: If two variables v1 and v2, and their shadowboxes s1 and
s2 stasify the following statement: v1 → s1 ∧ v2 → s2 ∧ ID10(s1) = ID(s2),
v1 and v2 are alias. Such relationship is represented by v1 = v2.10
– Shadowbox dependency graph (SDG): A collection of points-to rela-
tionships: {(v, s)∗ | v → s}. For convenience, we use SDG(v), SDGv, or
SDG((cid:3)scopev, namev(cid:4)) to represent the shadowbox pointed by v.
– Fields information in shadowbox (FDG): This is a variant of SDG:
{(v, s)∗ | v → s ∧ v ∈ ‘non-static ﬁelds ins(cid:4)}. Since F DG is always bound
with a shadowbox s, we use F DGs to indicate such relationship.
3.3 Type and Taint Analysis
Driven by the shadowbox concept, we deﬁne the analysis rules that implement
type and taint analysis (Table 1). The analysis rules work directly on Dalvik
opcode11. We use lower case letters to represent variables, with the exception of
e and f, which represent ﬁelds and functions, respectively. We use upper case
letters for classes or data types. In the rules, operations on array are solved with
the help of value analysis, as shown in Sect. 3.5.
3.4 Value and String Analysis
Given a target variable v and its instruction i, v’s value is calculated by per-
forming backward programming analysis along the analyzed path to update its
“expression tree”. The expression tree is subtly diﬀerent with the regular binary
expression tree [1]. The expression tree’s leaf nodes correspond to system APIs
(e.g., getDeviceId()), constants, JavaScript Bridge function input, and variables
10 ID stands for the shadowbox’s memory location in our static analysis.
11 https://source.android.com/devices/tech/dalvik/dalvik-bytecode.html.
150
G. Yang et al.
Table 1. Analysis rules
v1 = v2 op v3
v = new C
v1 = v2
v ∈ C
function f (...){...; return r; } ⇒ (cid:9)f, return(cid:10) → SDG(r)
⇒ SDG(v1)taint = SDG(v2)taint | SDG(v3)taint
⇒ s = a new shadowbox; sdata type = C; v → s
⇒ v1 → SDG(v2)
⇒ SDG(v)data type = SDG(v)data type ∧ C
r = f (p0, p1, ...)
1, ...) {...}
(cid:2)
(cid:2)
function f (p
0, p
v = o.e
v = C.e
o.e = v
C.e = v
a[i] = v
v = a[i]
⇒ (cid:9)f, return(cid:10) → null
f or v ∈ SDGvertexes, delete v if v.scope == f
(cid:9)f, p
0(cid:10) → SDG(p0); (cid:9)f, p
1(cid:10) → SDG(p1); ...;
(cid:2)
(cid:2)
r → SDG((cid:9)f, return(cid:10))
⇒ SDGv → F DGSDG(o)(e)
⇒ SDG(v) → (cid:9)C, e(cid:10)
⇒ F DGSDG(o)(e) → SDGv
⇒ (cid:9)C, e(cid:10) → SDG(v)
⇒ Section 3.5
⇒ Section 3.5
whose values is to be calculated (i.e., variable leaf ), and the internal nodes cor-
respond to functions (e.g., string.replace()) and operators. Initially, the root
node of the expression tree is v. Starting from i, all variable leaves in the expres-
sion tree are kept being updated. If it is found that a variable v1 is dependent
on another variable v2 or an expression e1, v1’s leaf node is replaced by v2 or
e1. The analysis is continued till there are no variable leaves. To handle string
operations, the associated functions are modelled. For example, the function
StringBuilder.append() itself is treated as an internal node, and its function
parameters are added as its children nodes.
Then, the target variable’ value can be retrieved by resolving the expression
tree. For this purpose, the expression tree is ﬁrst converted to a regular expression
using in-order traversal. During the conversion, functions in internal nodes are
converted to proper operators. For example, StringBuilder.append() is replaced
by +, and linked with the function’s parameters (i.e., the children nodes). Then,
we apply a lightweight solver to compute the expression’s value, which is built
on top of the Python function ‘eval()’.
3.5 Application of Shadowbox Analysis
Path-Sensitivity. We use the code shown in Listing 1.1 as the illustrative exam-
ple. Before utilizing shadowbox analysis on the test case, SDG is ﬁrst created by
initializing shadowboxes of ‘this’ and the corresponding function’s parameters
with their associated data types. Then, the analysis is applied on each instruction
based on the rules deﬁned in Sect. 3.3. When a conditional statement c (Line 8)
is encountered, the depth-ﬁrst strategy is used and each path is analyzed sequen-
tially. To keep the independence of each path, SDG is cloned and saved so that
when a path is done, SDG is quickly restored for another path. Finally, when the
sink API ‘sendT extM essage()’ is encountered, the third parameter’s shadow-
box is read from SDG and checked to determine whether the parameter contains
sensitive information.
Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps
151
q
p
a
x
DataType
Fields
A
b
deviceId
DataType
B
b
DataType
Fields
B
attr
y
DataType
string
Taint
1024
DataType
Fields
A
b
Fig. 2. SDG’s partial content when sending text message, where cycles with dashed
line are variable representations, and boxes with solid line represent corresponding
shadowboxes. (Color ﬁgure online)
SDG’s content (when the branch statement is true) is partially shown in
Fig. 2.12 By checking the shadowbox referenced by ‘a.attr.b’ (the box with red
line), we can learn that the third parameter is not tainted.
HashMap and Linear Data Structures. The propagation problem caused
by common data structures is due to their lack of regular ﬁeld information,
which makes it diﬃcult to locate target variables. To mitigate this problem, we
model common data structures using ‘shadowbox’, and augment common data
structures by adding explicit ﬁelds to them that enable us to apply our analysis
rules and handle them similar to regular data structures.
We use keys in a hashmap as the explicit ﬁelds, since keys are always
unique. We leverage value analysis to retrieve the keys’ values, which are then
treated as ﬁelds. Thus the instructions ‘value = H.get(key)’ and ‘H.get(key)
= value’ can be converted to assignment statements ‘value = F DGH(key)’ and
‘F DGH(key) = value’, where H is an instance of hashmap.
We select the element position in linear data structures (such as list, array,
Android Parcel, etc.) as the explicit ﬁelds. Thus the instructions ‘value =
array[index]’ and ‘array[index] = value’ can be converted to assignment
statements ‘value = F DGarray(index)’ and ‘F DGarray(index) = value’.
Most cases can be handled using the above intuition by computing index’s
value in advance (Sect. 3.4), and converting it to a regular ﬁeld. However, since
an operation’s index value is changeable, such as injecting a new element in the
middle of a list, or merging two lists, we maintain the data structures’ internal
state (which is represented by F DG) during updates. For example, consider if an
element e is inserted into a list L at the position i through the API ‘L.add(i, e)’.
F DGL can be updated to
L ={(v, F DGL(v)) | v ∈ F DGL.f ields ∧ v = i}.
Similarly, operations in Android Bundle and Parcel are also supported.
12 Since most variable scopes are the same, scope information in variable representa-
tions is hidden to make SDG more concise.
152
G. Yang et al.
4 BridgeScope
In this section, we present the design and implementation details of BridgeScope,
and we explore the major challenges we encountered in detecting JavaScript
Bridge problems and how BridgeScope intuitively solves these challenges.
4.1 Challenges and Solutions
Semantic gap between web and native code. This adds complexity to the
analysis, especially when the suspicious command and control web code is not
available, which is true for most cases.
To solve the problem, we assume that the code O loaded in WebView is
omnipotent, which means O has the capability to do anything through the
JavaScript Bridge. Under this assumption, it is only necessary to focus on the
analysis of JavaScript Bridge, which lowers the complexity and scope of our
analysis.
However, actual code R loaded in WebView has the following relationship
with O: R ⊂ O, which means our initial assumption introduces false positives
to our analysis, as it may be not feasible for attackers to launch code injec-
tion attacks in some cases. For instance, if a benign app’s communications with
remote servers are always properly protected, then even when there is a sensitive
bridge found in the app, it is still hard to exploit.
To reduce false positives, we consider the complexity for attackers to launch
there are multiple WebView implementations
attacks (i.e., attack complexity). We discuss more details in Sect. 5.
Semantic gap between diﬀerent WebView implementations. As
discussed in Sect. 2.1,
in
the Android platform. The major challenge is to eliminate the seman-
tic gap between diﬀerent implementations to enable a generic analysis.
For example, the default Android WebView uses addJavascriptInterface
(BridgeObject,BridgeName) to enable a JavaScript Bridge, while rhino-based
WebView uses putProperty(scope, BridgeName, BridgeObject). Similarly,
the default WebView in Android 4.2 and above requires the annotation
‘@JavascriptInterface’, while the default WebView in older Android versions and
Rhino does not use any annotation feature.
Rather than speciﬁcally hard-coding and addressing each diﬀerent implemen-
tation and their syntax diﬀerences, we observe that all implementations have key
common elements that follow the model shown in Sect. 2.1. Armed with that
observation, we address this challenge by translating diﬀerent implementations
to an intermediate representation. This gives us an abstraction that lowers the
semantic gap and eliminates the diversity to allow analysis that is agnostic of
the speciﬁc implementation.
Diﬃculty in identifying all JavaScript Bridges. A quick but naive solution
to identify Android’s default WebView in 4.2 and above, as well as Crosswalk and
Chromeview, is to directly search for annotations. However, this approach may
Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps
153
introduce false negatives because it is not generic, diﬀerent WebView imple-
mentations do not use the same annotation syntax, and annotated functions
may only be known at runtime. While our generic WebView model supports
the annotation mechanism, it is still not possible to apply a simple search app-
roach. Speciﬁcally, due to the well-known program analysis points-to problem
[30], BridgeObject cannot be easily identiﬁed, meaning that functions which
are annotated are only identiﬁable at runtime. Additionally, it is error-prone
due to annotation inheritance.
To address this challenge, we leverage a shadowbox dependency graph (see
Sect. 3), which we use to ﬁrst identify all possible WebView implementations, and
further identify JavaScript Bridges for each WebView according to the semantics
of WebView.
During analysis, a key consideration is to maintain the status of variables,
especially WebView, so that critical information can be quickly extracted, such
as the pair (cid:3)BridgeObject, BridgeN ame(cid:4). Then, all JavaScript Bridges can be
extracted using the ‘shadowbox’ data structure and its dependency graph (see
Sect. 3).
Unknown semantics of functions in JavaScript Bridge. Generally, the
native end of the JavaScript Bridge is a black box, since its source code is not
always readily available. It is challenging to reconstruct the semantics of each
function in a bridge (i.e., bridge function), but it is a critical step in undersanding
the functionality to decide which bridge is sensitive. To solve the problem, we use
ﬁne-grained data ﬂow analysis on all functions of JavaScript Bridges by tracking
their parameters and system sensitive information.
Unknown input format of JavaScript Bridge. Even when a sensitive bridge
is found, it is still challenging to validate it since appropriately formatted input
data is required. We mitigate the problem by applying several heuristics infor-
mation gathered from our analysis results, such as the data ﬂow information,
key API semantic, etc.
4.2 System Overview
As shown in Fig. 3, our static analysis approach BridgeScope consists of four
main components: WebView abstraction, WebView and bridge discovery, bridge
analysis, and log analysis. Given an app, the WebView abstraction module ﬁrstly
disassembles it to the Dalvik bytecode13 and then abstracts all WebView imple-
mentations in the app by translating the diﬀerent implementations of WebView
to an ‘intermediate representation’.
Next, starting from entry points of activities [4,21], type and value/string
analysis based on shadowbox is performed to extract control ﬂow graph (CFG),
where type analysis is critical to resolve virtual function calls and solve points-to
problem, and value/string analysis is useful to resolve Java reﬂection. Compared
with existing approaches to generate CFG, our approach is ﬁne-grained and
complete.
13 https://source.android.com/devices/tech/dalvik/dalvik-bytecode.html.
154
G. Yang et al.
Fig. 3. Overview of BridgeScope
In addition, during the process, value/string analysis is also run specif-
ically for two situations: (1) when JavaScript is enabled or disabled in
WebView,
(2) When the pair
‘(cid:3)BridgeObject, BridgeN ame(cid:4)’
is conﬁgured, BridgeN ame’s value is also
computed.
the key parameter’s value is computed;
Then, all methods in BridgeObject are further analyzed by means of data
ﬂow analysis to identify sensitive bridges. Finally, the log analysis module collects
all analysis results from other modules and further generates heuristic informa-
tion for the test attack code generation purpose.
4.3 WebView Abstraction
This module ﬁlls the semantic gap between diﬀerent WebViews, which is done by
translating diﬀerent implementations of WebView into a generic ‘intermediate
representation’. We devise an ‘intermediate representation’ scheme, including
common APIs (Table 2), and a generalized annotation mechanism.
Table 2. Generic WebView common APIs
API
Description
add bridge(BridgeObject, BridgeN ame) Add JavaScript Bridge to WebView
enable js(boolean)
Enable/disable JavaScript
set event handler(event handler)
Register event handler
load(U RL / local f ile / JavaScript code) Run WebView
To support the annotation mechanism, which identiﬁes Bridge Objects, we
deﬁne the common annotation ‘@JavaScriptBridge’ and apply it to all WebView
instances, overwriting any speciﬁc annotation implementation such as in Android
WebView in 4.2+ and Crosswalk.
We generalize WebView using shadowbox, whose structure is shown in
Table 3. Generally, WebView contains three types of ﬁelds: (1) JsFlag, which
indicates whether JavaScript is enabled; (2) Event Handler, which is used to
react to diﬀerent events (e.g., URL redirection, errors in web pages); (3) and
JavaScript Bridge, which is a handle to a Bridge Object between the native and
web context.
Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps
155
Table 3. The generic model representation of WebView (a) and JavaScript Bridge (b).
Note that we use the special symbol ‘¡’ to indicate that when the associated ﬁeld is
initialized or changed, it should be computed by value/string analysis immediately.