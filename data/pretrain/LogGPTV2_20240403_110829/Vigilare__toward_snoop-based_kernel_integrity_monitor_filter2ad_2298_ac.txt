triggering interrupts to the Veriﬁer. Therefore the Vigilare
system design meets the requirement in Section 4.3.
As in computer systems in general, there are L1 caches
that connects the system bus and the processor. So there
are two links between the processor and the main memory:
L1 caches and the system bus. Modifying L1 cache link in
most computers is diﬃcult or sometimes impossible while
adjusting the structure of the system bus is relatively more
ﬂexible. For instance, ARM architecture can easily adopt
Vigilare’s system bus architecture.
The Vigilare system has hardware connections to the host
system bus to snoop its traﬃc. However, an attempt to
read the main memory content that is in the cache, may not
generate corresponding read request on the bus. The bus
traﬃc that indicates read attempts will be generated only
when cache-miss occurs. The time that the traﬃc of write
attempts is generated depends on the type of cache: write-
through cache or write-back cache. In case of write-through
cache, all write attempts by processor may generate the cor-
responding packets on the bus. In case of write-back cache,
the write attempts from processor may not be seen imme-
diately on the bus, because the write-back cache does not
commit all the memory updates immediately to the memory.
Thus, it is plausible to devise a transient attack that can live
on write-back cache before the updated cache contents are
ﬂushed to the memory bus. However, predicting the time of
the write-back cache ﬂushing is not trivial, so implementing
such a rootkit would be nearly impossible. Even if an at-
tacker successfully performed the attack, it generates dirty
bits in cache lines of immutable regions, and it will be writ-
ten back. Thus we can detect the attack by snooping the
write traﬃc to the memory. Most caches write back dirty
bits even when it is restored to original value, so any cache
attack on immutable region generates corresponding write
traﬃc on the links between caches and memories, where
SnoopMon snoops. Simply enforcing write-through policy
on the host caches would also be an alternative solution.
5.5 SnapMon
To better compare our snoop-based monitoring scheme
with traditional snapshot-based method, we also implemented
a snapshot-based integrity monitor. Our SnapMon design
follows snapshot-based security monitors which were often
represented by Copilot [20]. We implemented the hardware
of SnapMon by replacing the Snooper with a DMA (Direct
Memory Access)-capable memory interface. Hence, Snap-
Mon uses the DMA to get the snapshot of the immutable
regions of host system’s kernel periodically. SnapMon cal-
culates the hash value for each kernel region snapshot, and
32Figure 3: This diagram shows the architecture of our prototype with SnoopMon. SnoopMon has its own
memory and peripherals for its independence from host system.
It snoops host system bus traﬃc with
Snooper. Snooper delivers traﬃc that indicates write attempts to immutable regions of host system kernel.
The peripherals of SnoopMon includes debug interface for out-of-band reporting.
compares it against the pre-calculated hash value of the un-
modiﬁed immutable region. The Veriﬁer logic for SnapMon
is rather simple; it only compares the two hash values to
locate any modiﬁcations. In order to implement the mon-
itoring functionality on the hardware, we used the proces-
sor for hashing the contents and some memory spaces to
store snapshots. The memory we used for SnoopMon was
suﬃcient for SnapMon since the size of immutable region
in kernel was less than 1MB. However, the processing time
was longer than we had expected; it took about 5 seconds
to hash them using the processor on Veriﬁer. Consequently,
we included a hash accelerator in SnapMon to shorten the
processing time to a reasonable level; and it improved to be
about 1.3ms to hash one snapshot.
6. EVALUATION
In this section we present results of our experiments about
SnoopMon and SnapMon. We performed two experiments to
compare the performance degradation and the ability to de-
tect transient attacks of each scheme. In case of SnapMon,
the interval of snapshots signiﬁcantly aﬀects both perfor-
mance degradation and ability to detect transient attacks.
We varied SnapMon’s interval to observe its eﬀect on both
detection rates and performance degradation. SnoopMon
does not have any parameter that possibly aﬀects the result
of experiments so we used only one type of SnoopMon.
6.1 Performance Degradation
STREAM benchmark is widely used for measuring the
memory bandwidth of a computer system. We used a tuned
version of STREAM benchmark [18] to measure the perfor-
mance degradations imposed on the host system. The origi-
nal version uses double precision numbers for measuring the
bandwidth but the Leon3 processor does not have ﬂoating
point units. Thus, we tuned it to use integer numbers for
measuring.
We let the tuned STREAM benchmark run on host sys-
tem while each monitor is running. We averaged 1000 ex-
periments to acquire more accurate results. As Figure 4
shows, SnoopMon does not degrade the performance at all,
while SnapMon with shorter intervals degrades the perfor-
mance signiﬁcantly. For instance, performance degradation
due to SnapMon with 50ms interval was measured to be
17.5% on average, 10% in the best case, and about 40% in
the worst case. If the snapshot interval is greater than 1 sec-
ond, we have less performance degradation, 0.5% on average.
This performance degradation does not include the poten-
tial overhead that can be caused by the memory bandwidth
consumption on the host with many competing processes
for memory access.
In our experiment, there is no other
process competing for the memory bandwidth except the
benchmarks. The performance degradation also depends on
the size of the immutable region, as it determines the size
of snapshots to be taken and be transferred over. Since the
Linux we used is tuned for embedded systems, the size of im-
mutable region of the kernel that we implemented for testing
was less than 1 Mbytes.
6.2 Transient Attack
Another objective of experiment was to observe the per-
formance on detecting transient attacks. To compare the
ability to detect the attacks, we built a rootkit example that
performs transient attack, and measured the probability of
detecting a pulse of an attack when we used each monitor.
We implemented a rootkit example for our experiment
that meets the deﬁnition of transient attack in Section 3.
Figure 1 shows how our rootkit example works. It modiﬁes
the system call table of the Linux kernel to hook some of the
system calls. After tactive, it removes its hooks by modifying
the system call table as it has been before. After tinactive,
it hooks the system call as it did before. In our experiment,
we measured the probability of detecting one pulse of the
attack, depending on tactive. We generated 500 pulses and
measured how many of them were detected by each monitor.
Figure 5 shows the results of the experiments. SnoopMon
detects all the pulses of attacks for all tactive, while SnapMon
misses many of the transient attacks. SnapMon with 50ms
snapshot interval detects all the pulses which have tactive
greater than 50ms, but SnapMon with 1000ms snapshot in-
terval cannot detect more than 5% of the pulses when tactive
is less than 50ms. The results show that it is necessary to
(cid:4)(cid:6)(cid:5)(cid:3)(cid:4)(cid:7)(cid:5)(cid:8)(cid:13)(cid:12)(cid:9)(cid:11)(cid:10)(cid:4)(cid:6)(cid:5)(cid:3)(cid:4)(cid:7)(cid:5)(cid:8)(cid:13)(cid:12)(cid:9)(cid:11)(cid:10)(cid:15)(cid:10)(cid:17)(cid:16)(cid:14)(cid:15)(cid:10)(cid:17)(cid:16)(cid:14)(cid:20)(cid:12)(cid:11)(cid:12)(cid:22)(cid:21)(cid:13)(cid:10)(cid:18)(cid:19)(cid:27)(cid:24)(cid:25)(cid:10)(cid:23)(cid:18)(cid:5)(cid:26)(cid:24)(cid:18)(cid:28)(cid:4)(cid:6)(cid:5)(cid:29)(cid:20)(cid:12)(cid:11)(cid:12)(cid:22)(cid:21)(cid:13)(cid:10)(cid:18)(cid:19)(cid:27)(cid:24)(cid:25)(cid:10)(cid:23)(cid:18)(cid:5)(cid:26)(cid:24)(cid:18)(cid:28)(cid:4)(cid:6)(cid:5)(cid:29)(cid:4)(cid:6)(cid:5)(cid:3)(cid:4)(cid:7)(cid:5)(cid:18)(cid:8)(cid:13)(cid:12)(cid:9)(cid:11)(cid:10)(cid:4)(cid:6)(cid:5)(cid:3)(cid:4)(cid:7)(cid:5)(cid:18)(cid:8)(cid:13)(cid:12)(cid:9)(cid:11)(cid:10)(cid:15)(cid:10)(cid:17)(cid:16)(cid:14)(cid:15)(cid:10)(cid:17)(cid:16)(cid:14)(cid:6)(cid:17)(cid:24)(cid:25)(cid:18)(cid:19)(cid:27)(cid:24)(cid:25)(cid:10)(cid:23)(cid:18)(cid:5)(cid:26)(cid:24)(cid:28)(cid:4)(cid:6)(cid:5)(cid:29)(cid:6)(cid:17)(cid:24)(cid:25)(cid:18)(cid:19)(cid:27)(cid:24)(cid:25)(cid:10)(cid:23)(cid:18)(cid:5)(cid:26)(cid:24)(cid:28)(cid:4)(cid:6)(cid:5)(cid:29)(cid:31)(cid:10)(cid:23)(cid:17)(cid:13)(cid:27)(cid:18)(cid:30)(cid:17)(cid:16)(cid:25)(cid:13)(cid:17)(cid:22)(cid:22)(cid:10)(cid:13)(cid:31)(cid:10)(cid:23)(cid:17)(cid:13)(cid:27)(cid:18)(cid:30)(cid:17)(cid:16)(cid:25)(cid:13)(cid:17)(cid:22)(cid:22)(cid:10)(cid:13)(cid:31)(cid:10)(cid:23)(cid:17)(cid:13)(cid:27)(cid:18)(cid:30)(cid:17)(cid:16)(cid:25)(cid:13)(cid:17)(cid:22)(cid:22)(cid:10)(cid:13)(cid:31)(cid:10)(cid:23)(cid:17)(cid:13)(cid:27)(cid:18)(cid:30)(cid:17)(cid:16)(cid:25)(cid:13)(cid:17)(cid:22)(cid:22)(cid:10)(cid:13)(cid:3)(cid:31)(cid:5)(cid:18)(cid:19)(cid:32)(cid:4)(cid:31)(cid:3)(cid:31)(cid:5)(cid:18)(cid:19)(cid:32)(cid:4)(cid:31)(cid:34)(cid:33)(cid:31)(cid:5)(cid:18)(cid:19)(cid:35)(cid:32)(cid:4)(cid:31)(cid:34)(cid:33)(cid:31)(cid:5)(cid:18)(cid:19)(cid:35)(cid:32)(cid:4)(cid:31)(cid:3)(cid:5)(cid:6)(cid:6)(cid:7)(cid:4)(cid:8)(cid:9)(cid:4)(cid:8)(cid:11)(cid:10)(cid:11)(cid:4)(cid:8)(cid:13)(cid:6)(cid:14)(cid:15)(cid:12)(cid:3)(cid:17)(cid:14)(cid:15)(cid:4)(cid:16)(cid:7)(cid:10)(cid:13)(cid:12)(cid:37)(cid:36)(cid:10)(cid:13)(cid:21)(cid:22)(cid:24)(cid:7)(cid:10)(cid:13)(cid:12)(cid:37)(cid:36)(cid:10)(cid:13)(cid:21)(cid:22)(cid:24)(cid:7)(cid:10)(cid:13)(cid:12)(cid:37)(cid:36)(cid:10)(cid:13)(cid:21)(cid:22)(cid:24)(cid:7)(cid:10)(cid:13)(cid:12)(cid:37)(cid:36)(cid:10)(cid:13)(cid:21)(cid:22)(cid:24)(cid:3)(cid:5)(cid:6)(cid:6)(cid:7)(cid:18)(cid:6)(cid:5)33Figure 4: Performance degradation due to each
monitor. Numbers in legend indicates tactive of each
pulse in the attack in millisecond. SnapMon with
shorter snapshot interval (i.e., increased snapshot
frequency) degrades performance of the host more.
For instance, performance degradation for SnapMon
with 50ms snapshot interval is 17.5% on average,
10% in the best case and about 40% in the worst
case, while SnoopMon has no performance degrada-
tion on the host.
increase the snapshot frequency signiﬁcantly for SnapMon
to reliably detect transient attacks.
6.3 Discussions
These two experimental results show that snapshot-based
monitoring has trade-oﬀ between the performance degrada-
tion and the ability to detect transient attacks. With snap-
shot interval higher than 1 second, the SnapMon may cause
little performance degradation but it misses out some tran-
sient attacks. Even the rootkit example with tactive 500ms,
SnapMon with snapshot interval 1 second could only detect
about 50% of them. In order to detect most of transient at-
tacks, we need to lower the snapshot interval of monitoring
but it results in signiﬁcant performance degradation of the
host system. However, SnoopMon which uses snoop-based
monitoring detects all the transient attacks with little or no
performance degradation.
7. LIMITATIONS AND FUTURE WORKS
In this section, we discuss about some limitations, and
future works.
7.1 Dynamic Kernel Region Manipulations
The most prominent trend in the latest kernel rootkit
technique is the dynamic kernel region manipulation.
In
order to evade the common rootkit detection tools that eas-
ily detect obvious static kernel hooking, the forgers of kernel
rootkits are looking aside to DKOM (direct kernel object ma-
nipulation). By directly modifying dynamically created and
removed kernel data structures that are used in core kernel
operations, the attackers can manipulate the system status
in a stealthy manner. In addition, ensuring the integrity of
static immutable regions does not necessarily guarantee the
integrity of the control ﬂow of kernel [22].
Figure 5: Ratio of detected attacks for each moni-
tor. Numbers in legend indicates tactive of each pulse
in the attacks in millisecond. This shows Snoop-
Mon detects all the attacks while SnapMon cannot.
The graph shows that SnapMon detects all the at-
tacks having tactive larger than or equals to its snap-
shot interval. However, if tactive becomes lower than
snapshot interval, the ratio of detection decreases as
tactive decreases. Transient attacks that are active for
1000ms were mostly detected, but when the attack
is short-lived tactive becomes 10ms, the ratio of de-
tected attack drops signiﬁcantly ranging from 2% to
20%. If tactive become lower than snapshot interval,
the ratio of detection decreases as tactive decreases.
Our next step in Vigilare project will be to design and im-
plement a control ﬂow integrity solution using our already
implemented Snooper architecture. More speciﬁcally, a de-
tection algorithm that senses each context-switching in the
kernel space should be implemented to successfully detect
control ﬂow hijackings. Furthermore, a more elaborate se-
mantic detection algorithm should be developed in order to
detect malicious kernel manipulations in the dynamic region.
7.2 Relocation Attack
Our SnoopMon cannot deal with relocation attacks. The
relocation attack refers to moving the entire or parts of ker-
nel to another location to stay out of the range of integrity
monitoring. However, relocating, or copying of a large vol-
ume of the kernel code will inevitably produce an abnormal
bus traﬃc pattern. Therefore, we expect that Vigilare would
be capable of detecting such attacks with a prior knowledge
of the existence of such attack patterns.
This assumption varies across diﬀerent computer archi-
tectures. If the system uses Harvard architecture, it would
be relatively easier to detect the relocation attacks. For the
initial relocation, the attacker should read the kernel code
as data, not as instruction. Since such behavior is quite un-
usual, we can detect it by analyzing the traﬃc. Even for the
systems based on the Von Neumann architecture, the traﬃc
pattern on the immutable regions under relocation attacks
would be far from normal status. In both cases, snapshot-
based monitoring would not be helpful since it gets only an
instance of the system state, not the sequence of actions
changing the states.
020406080100120SnapMon50msSnapMon100msSnapMon500msSnapMon1000msSnoopMonNormalized Performance (%)Type of Monitorcopyscaleaddtriadavg020406080100120SnoopMonSnapMon50msSnapMon100msSnapMon500msSnapMon1000msDetected Attack (%)Type of Monitor10501005001000347.3 Power Consumption Analysis
The Vigilare system might increase the total power con-
sumption of the entire system, due to additional hardware.
However, the opposite is often true as well because replacing
the functionalities of software with a hardware module de-
creases overall power consumption as it improves eﬃciency.
More work is needed to compare the amount of increased
power consumption for each type of monitors.
7.4 Vigilare on Various Platforms
We evaluated the concept of Vigilare on a small and sim-
ple embedded system but the concept might be applicable
on other platforms: desktops, servers, or application proces-
sors for mobile devices. All these platforms have link be-
tween processors and memories. Applying Vigilare to these
platforms, however, may not be straightforward since each
platform has its own characteristics and restriction. Design-
ing Vigilare for each platform would be a part of our future
work.
8. RELATED WORKS
In this section, we explain previous approaches on pro-
tecting the integrity of an operating system kernel, which
includes: kernel integrity monitors, rootkit detectors, and
intrusion detection systems. The dilemma in designing such
tools is that the security monitoring tool itself can be tam-
pered with, if the malware operates on the same privilege
level as that of the monitors. To cope with this problem,
many security researchers strive to make their security mon-
itors independent from the system that is being monitored.
A separated and tamper-free execution environment must
be preceded before any advanced detection scheme. [9]
We can categorize prior works that aim to provide a so-
lution to the problem, into two groups: hardware-based ap-
proaches and hypervisor-based approaches. We summarize
these approaches for the rest of this section.
8.1 Hypervisor-based Approaches
Virtualization solutions, commonly called VMMs (Virtual
Machine Monitors) or Hypervisors are widely used nowadays
to eﬃciently distribute computing power among diﬀerent
types of needs. Since the hypervisor resides in between the
hardware and the virtual machines, the hypervisor possess
the scope to manage and monitor the virtualized operating
systems.
There has been quite a few works that take advantage
of hypervisors for monitoring the security of the virtualized
computers. One of the ﬁrst in such works was Livewire [14]
proposed by Garﬁnkel et al. Livewire proposed security