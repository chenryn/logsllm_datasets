Hacking G Suite: The Power 
of Dark Apps Script Magic
By @IAmMandatory (Matthew Bryant)
Who am I?
● mandatory (Matthew Bryant)
● Leading the Red Team Effort at Snapchat
● @IAmMandatory
● Hacking write ups and research at 
https://thehackerblog.com
Context & Background
What exactly are we dealing with here?
Google Workspace (AKA G Suite)
● Suite of Google services for employees to work together 
online (Gmail, Docs/Sheets/Slides, Drive, GCP etc).
● Businesses can manage employees and set up powerful 
security and ACL policies.
● Many of these services are used individually by free 
Google users as well.
● >2 billion users!
Apps Script: Automate Google Services With JavaScript
● Serverless JavaScript apps which are hosted by Google 
and highly optimized for automating Google services.
● Seamless integration with Google’s app registration and 
OAuth permission requesting system.
● Variety of triggers to start scripts: web request, document 
open, scheduled, etc.
Example of the Apps Script Editor
Google OAuth 2.0
● Allows third party apps to request access to resources 
owned by Google users.
● Permissions to resources are known as “scopes” and 
there are over 250 of them!
● Users are presented with a prompt describing roughly 
what access they’re granting which they can allow/reject.
● On approval you get tokens which you can use for the API(s)
Example OAuth Permission Prompts
Tying It All Together: Thinking Beyond the Machines
● When attacking G Suite, Apps Script is an attractive option 
for phishing as well as backdooring accounts.
● An Apps Script implant is outside the eyes of antivirus, 
endpoint detection tooling, and other on-device 
monitoring.
● Even if your victim wipes their laptop, your implant 
remains!
Tough Perimeters Require Clever Attacks
● We can utilize Apps Script to pierce even the most 
hardened environments.
● Companies with mandatory hardware U2F on logins, 
hardened Chromebooks, hardware attestation, third-party 
OAuth scope blocking, etc.
● To get around these measures we’ll have to be a bit more 
clever than your average attacker...
Historical Precedent
“There are years where we fuck around;
and there are hours where we find out”
Image from @zeynep Tweet: https://bit.ly/3vDvy1z
Image from Ars Technica article: https://bit.ly/2SMGqgb
A Modern-Day Super Worm
SOME USERS AUTHORIZE ACCESS
A percentage of users who receive the 
phishing email fall for it. They grant the 
worm access to their Gmail and 
contacts.
SPREAD
Worm sends out OAuth phishing email using 
victim's Gmail to their 1,000 most recently 
modiﬁed contacts.
Google Doc Worm 
Propagation Cycle
USERS RECEIVE PHISHING EMAIL
More people receive the phishing email 
requesting full access to their Gmail and 
Contacts list.
The Impact
● The worm spread like wildfire and affected >1 million 
Google users (personal and enterprise alike).
● Google rapidly responded to the incident and was able to 
halt the spread and kill the apps in a few hours.
● Post-mortem analysis indicated the coding was amateur 
and only collected email addresses.
●
Everything considered, this attack could’ve been much worse.
The Attack Components
●
Multiple rotating apps and domains to prevent easy-blocking by 
Google
●
IDN homograph attack in app name
●
Social engineering & clever phishing scheme
●
Self-propagation via old-school email spam
Post-Worm Changes & Existing Mitigations
●
~2 months later Google introduced G Suite OAuth scope and 
client ID allowlisting.
●
Google later introduced “Sensitive” and “Restricted” scopes 
which require heavy review.
●
Introduction of the “Unverified App” warning prompt for smaller 
apps requiring the aforementioned scopes.
●
Crackdown on all misleading OAuth apps.
Food for thought: 
This attack utilized zero 
exploits or bugs, yet the 
impact was substantial.
Breaking New Ground
Bypassing the new restrictions to pierce the G Suite perimeter 
The “Unverified App” prompt
What is a “sensitive” or “restricted” scope?
●
Any API with potential to access private data: Gmail, BigQuery, 
GCP, Groups, Drive, Calendar, etc. (Over ~120 total APIs)
●
For apps with 100 users you need to undergo an intense 
manual review process.
●
However, there are some exceptions...
The application uses a “sensitive” OAuth scope and…
For Apps Script, what causes the “Unverified App” prompt?
If the publisher of the app 
is in the same G Suite as 
the user running it, then 
there will be no 
“Unverified App” prompt.
Getting Clever With Apps Script
●
Apps Script apps can be a standalone project or they can be 
bound to Google Docs/Sheets/Slides/Forms.
●
This allows for manipulation of the document, customization of 
the UI, etc.
●
Apps Script triggers will run for all users who view the doc with 
Editor permissions (they still have to accept OAuth prompt for 
scopes).
Grant User “Editor” Attempt: 
Make victim “Editor” 
on Doc and send link
Victim activates trigger 
and spawns prompt
Attacker
Victim
(In G Suite Org)
FAILED
/d/1Jl...xA/edit
/d/1Jl...xA/copy
Example dialogue shown from copy URL
(Copied sheet is opened immediately upon clicking “Make a copy”)
Send copy URL to victim: 
Send victim the copy 
link to document
Victim activates trigger 
and spawns prompt
Attacker
Victim
(In G Suite Org)
SUCCESS
Not only does the victim become the owner of the Google Sheet, they also 
become the publisher of the attached App Script.
Problem: The Apps Script “Triggers” are not copied.
How will the victim trigger our payload?
Example macro in Google Sheets
Assign a macro to execute upon image click in Sheets
BYPASSED
Another Tip for Defeating “Third-Party App”/Unverified App Restrictions
●
A script “container” has the same Owner as the “container”.
●
This means any Doc/Sheet/Slide which has an Owner inside a GSuite domain 
(e.g. company.com) is a bypass waiting to happen.
●
If you have edit access to any Doc/Sheet/Slide made by someone in a GSuite 
domain, you can create an Apps Script app and bypass the “third-party app” 
restrictions!
Post-Compromise Pivoting 
& Privilege Escalation
Moving right along
Pivoting to Google Cloud (GCP)
Accessing Google Cloud Through Apps Script
●
If your Apps Script service has the 
https://www.googleapis.com/auth/cloud-platform 
scope, you can access any GCP API as the user who granted 
your app access.
●
You can then use the access token from 
ScriptApp.getOAuthToken() in Authorization: 
Bearer {{TOKEN}}.
Some unknown project 
number?
Some *mostly* undocumented fun...
●
All Apps Scripts upon creation are allocated a hidden Google 
Project attached to them (yes really).
●
This makes requests with your access token implicitly bound to 
this project, which has no APIs enabled.
●
To get around this, you can specify the 
x-goog-user-project header followed by the project name 
you want to query.
ID of the GCP Project
Google Cloud Shell API
●
Google Cloud Shell API allows you to add your public key, start, 
and connect to a virtual Linux instance via SSH.
●
Using the API you can specify an access/ID token to authorize the 
pre-installed gcloud CLI for.
Mining Google Drive for Paydirt
Sharing in Google Drive
Preset Defaults & Hardened Settings
●
By default sharing with the entire org is one-click away with the 
default being shared only with those explicitly added to the doc. 
This is the tightest default control available for link sharing.
●
Once a G Suite org user views a document, it is searchable by 
them in the future.
●
The document URLs are well outside the range of brute forcing.
Real world usage: what actually happens?
●
Any important file, by definition, is shared with other users.
●
Adding individual users one-by-one to a doc is tedious (though 
Google Groups can be used).
●
In practice, a large portion of the docs are just shared by link 
and only a tiny portion are searchable by the entire org.
✓ Easy
✕ 
Painful
How can we get access to these docs?
●
Search internally-shared systems: chat, forums, Q&A sites, 
ticket management queues, bug trackers, etc.
●
The same way we do on the web: spidering.
An Apps Script Spider
●
Takes a list of seed Drive/Doc/Sheet/Slide links as starting 
points and recursively crawls using Apps Script until it’s 
exhausted all paths.
●
Along the way collects metadata for sharing, contents, creation, 
authors, etc for review.
●
https://github.com/mandatoryprogrammer/PaperChaser
Dumping Employee Directory with the People 
API
Pull the Entire Organization’s Directory via People API
●
Requires the https://www.googleapis.com/auth/ directory.readonly scope
●
Contains everything from names, emails, titles, phone numbers, 
birthdays, addresses, calendar URL, etc.
●
This is very useful for further spear fishing, or for re-entry 
planning upon being detected and revoked.
Privilege Escalation
The fastest way you’ll move up in a companyTM
Exploiting Apps Script Attached to a Google 
Doc/Sheet/Slide
Revisiting Apps Script Bound to Docs/Sheets/Slides
●
Recall we talked about Apps Script as being able to be “bound” 
to Docs/Sheets/Slides. The file a script is bound to is called the 
“container”.
●
If that’s the case, does the Apps Script and the file it’s attached 
to have separate sharing permissions?
(https://developers.google.com/apps-script/guides/bound)
Another Interesting Question
●
Recall that “Edit” access is required to run the Apps Script.
●
Whoever has “Edit” access to a given Doc/Sheet/Slide will also 
be able to Edit the Apps Script attached to it.
●
What happens when you have a bunch of people all sharing the 
same Doc/Sheet/Slide which has Apps Script?
EDITOR
EDITOR
EDITOR
Situation: Many users have editor on a Doc With Apps 
Script. They have all granted the Apps Script OAuth 
scopes on their own accounts.
A malicious user has editor on the Doc as well.
The malicious user edits the Apps Script to contain a 
malicious script.
Upon each user triggering the already-authorized Apps 
Script, the malicious code runs as them.
Let’s Do One Better
●
This of course requires we wait for whatever triggers are in 
place to be re-fired.
○
In the case of background time-based triggers, that’s fine 
we can wait.
●
We can force a re-trigger by publishing the bound script as a 
web app. When this URL is visited by one of the users who 
authorized the script it will execute as them.
●
This works even if triggered via , etc!
Lateral Movement via Enumerating and 
Joining Open Google Groups
Google Groups, a PrivEsc Factory
●
Google Groups are often used 
for ACL in GCP/IAM.
●
By default, Google Groups are 
openly joinable by everyone in 
an org.
What can be gated by Google Groups?
Google Group API Access via Apps Script
●
Modifying Google Groups via Apps Script is not as easy as it 
sounds.
●
The Google Groups Settings/Directory API is restricted to 
admins only.
●
However, the “Cloud Identity API” is available to all users 
which allows some access to Google Groups via API.
What can you do via API for Google Groups?
●
List all Google Groups in a given organization.
●
List Google Group’s members and their roles.
●
Create, update, delete, manage members of your own groups.
●
NOT able to join an open Google Group via the API.
Better Spear Phishing With Google Groups
Google Group Trick: With Manual Access
●
Obtain any untaken email @company.com using Google 
Groups (external emails to Google Groups must be enabled for 
the org).
●
Add and verify the email as an alias in Gmail and you can now 
send and receive mail at the address.
Google Group Trick: With Manual Access
●
You’ve now upgraded your spear-phishing game 200%.
Bonus Trick
●
Bonus: If an alias is taken, you can add dots to it and receive 
emails at that address. This is (confusingly) the opposite 
behavior of regular Gmail which treats dots as irrelevant.
Backdoors, Stealth, & Persistence
Why not stick around?
Gmail Trickery
Gmail Tricks: With API Access
●
Create a filter to hide security notifications from Google: 
from:(PI:EMAIL) “Security Alert”
●
Filter to hide password reset emails to be exfiltrated by Apps 
Script implant.
●
Sadly creation of Delegates and Forwarding Addresses are 
intentionally restricted to service accounts with delegated 
domain-wide authority.
Gmail Tricks: With Manual Access
●
Create forwarding address and create a filter to send matching 
emails to this address (or forward all mail).
Setting a More Deceptive App Name
Homoglyph Attacks: Post Google Doc Worm
●
After the Google Doc worm Google upgraded its 
anti-homoglyph prevention, banning 
similar-looking unicode characters, 
no-width-spaces, etc.
●
However, the magic of the Right-to-Left Override 
(RTL) character (U+202E) still works.
Perpetual Apps Script Execution
Keeping the Good Times Rolling
●
Apps Script has time-based triggers allowing for background 
execution on a schedule.
●
Can be run as often as every minute and executes as whatever 
user was running the script that created the trigger.
More of a Suggestion Really
●
You can still create time triggers programmatically without 
declaring this scope.
●
Time triggers can be created upon other triggers firing, they 
only require the user has authorized some scope to start firing.
●
Persist indefinitely, no warnings required. 
Backdoor Google Cloud Projects
Google Cloud Functions
●
Create Google Cloud Functions (GCFs) which execute as 
privileged service accounts on a project.
Google Cloud Shell Backdoor
●
Add a backdoor to the Google Cloud Shell .bashrc to exfiltrate 
access tokens or just connect back (Credit: @89berner)
IAM Policy Backdoor
●
Create IAM policies 
allowing your own 
projects access back in.