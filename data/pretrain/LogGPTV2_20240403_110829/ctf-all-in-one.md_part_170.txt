Analyze and Associate Android Malware
8.21 Micro-Virtualization Memory Tracing to Detect and Prevent Spraying
Attacks
8.22 Practical Memory Checking With Dr. Memory
8.23 Evaluating the Effectiveness of Current Anti-ROP Defenses
8.24 How to Make ASLR Win the Clone Wars: Runtime Re-Randomization
8.25 (State of) The Art of War: Offensive Techniques in Binary Analysis
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities
in Binary Firmware
8.28 Cross-Architecture Bug Search in Binary Executables
8.29 Dynamic Hooks: Hiding Control Flow Changes within Non-Control Data
8.30 Preventing brute force attacks against stack canary protection on
networking servers
8.31 WYSINWYX What You See Is Not What You eXecute
8.32 Unleashing MAYHEM on Binary Code
8.33 Under-Constrained Symbolic Execution: Correctness Checking for Real
Code
8.34 Enhancing Symbolic Execution with Veritesting
8.35 Q: Exploit Hardening Made Easy
8.36 A Survey of Symbolic Execution Techniques
8.37 CUTE: A Concolic Unit Testing Engine for C
8.38 TaintEraser: Protecting Sensitive Data Leaks Using Application-Level
Taint Tracking
8.39 DART: Directed Automated Random Testing
8.40 EXE: Automatically Generating Inputs of Death
8.41 IntPatch: Automatically Fix Integer-Overflow-to-Buffer-Overflow
Vulnerability at Compile-Time
8.42 Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature
Generation of Exploits on Commodity Software
8.43 DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation
8.44 Superset Disassembly: Statically Rewriting x86 Binaries Without
Heuristics
1663
八、学术篇
8.45 Ramblr: Making Reassembly Great Again
8.46 FreeGuard: A Faster Secure Heap Allocator
8.47 Jump-Oriented Programming: A New Class of Code-Reuse Attack
8.48 Reassembleable Disassembling
8.49 Understanding Integer Overflow in C/C++
1664
8.1 The Geometry of Innocent Flesh on the Bone: Return-into-libc without
Function Calls (on the x86)
8.1 The Geometry of Innocent Flesh on the
Bone: Return-into-libc without Function
Calls (on the x86)
paper
简介
论文提出了一种 return-into-libc 的攻击方法，以对抗针对传统代码注入攻击的防御
技术（W⊕X）。它不会调用到完整的函数，而是通过将一些被称作 gadgets 的指
令片段组合在一起，形成指令序列，以达到任意代码执行的效果。这一技术为返回
导向编程（Return-Oriented Programming）奠定了基础。
背景
对于一个攻击者，它要完成的任务有两个：
1. 首先它必须找到某种方法来改变程序的执行流
2. 然后让程序执行攻击者希望的操作
在传统的栈溢出攻击里，攻击者通过溢出改写返回地址来改变程序执行流，将指针
指向攻击者注入的代码（shellcode），整个攻击过程就完成了。
后来很多针对性的防御技术被提出来，其中 W⊕X 将内存标记为可写（W）或可执
行（X），但不可以同时兼有，这样的结果是要么攻击者的代码注入不了，要么即
使攻击者在可写的内存中注入了代码，也不可以执行它。
那既然代码注入不可行，一种思路是利用内存中已有的程序代码，来达到攻击的目
的。由于标准 C 库几乎在每个 Linux 程序执行时都会被加载，攻击者就开始考虑利
用 libc 中的函数，这种技术就是最初版本的 return-into-libc。理论上来说，通过在
栈上布置参数，即可调用任意程序在 text 段上和 libc 中的任意函数。
那么 W⊕X 对 return-into-libc 的影响是什么呢？主要有下面两点：
1. 在 return-into-libc 攻击中，攻击者可以一个接一个地调用 libc 中的函数，但这
个执行流仍然是线性的，而不像代码注入那样可以执行任意代码。
1665
8.1 The Geometry of Innocent Flesh on the Bone: Return-into-libc without
Function Calls (on the x86)
2. 攻击者只能使用程序 text 段中已有的和 libc 中加载的函数，通过移除这些特定
的函数即可对攻击者加以限制。
在这样的背景下，本论文就提出了一种新型的 return-into-libc 攻击方法。这种方法
可以执行任意代码，而且不需要调用到任何函数。
寻找指令序列
为了完成指令序列的构建，首先需要在 libc 中找到一些以 return 指令结尾，并且在
执行时必然以 return 结束，而不会跳到其它地方的小工具（gadgets），算法如
下：
大概就是扫描二进制找到 ret 指令，将其作为 trie 的根节点，然后回溯解析前面的
指令，如果是有效指令，将其添加为子节点，再判断是否为 boring，如果不是，就
继续递归回溯。举个例子，在一个 trie 中一个表示 pop %eax 的节点是表示
ret 的根节点的子节点，则这个 gadgets 为 pop %eax; ret 。如此就能把有用
的 gadgets 都找出来。
那么哪些指令是 boring 的呢？
1. 该指令是 leave ，并且后跟一个 ret 指令
2. 或者该指令是一个 pop %ebp ，并且后跟一个 ret 指令
3. 或者该指令是返回或者非条件跳转
找到这些 gadgets 之后，就可以根据需要将它们串起来形成 ROP 链，执行任意代
码了。
1666
8.1 The Geometry of Innocent Flesh on the Bone: Return-into-libc without
Function Calls (on the x86)
1667
8.2 Return-Oriented Programming without Returns
8.2 Return-Oriented Programming without
Returns
paper
简介
论文提出了一种不依赖于使用 return 指令的 ROP 技术。这种攻击方法是在 libc 中
找到一些特定的指令序列，来替代 return 指令，完成和 return 同样的工作。这些指
令具备图灵完备性，已经在 (x86)Linux 和 (ARM)Android 中被证实。
由于该攻击方法并不使用 return 指令，所以那些基于 return 原理实现的 ROP 防御
技术就失效了。
背景
正常程序的指令流执行和 ROP 的指令流执行有很大不同，至少存在下面两点：
ROP 执行流会包含了很多 return 指令，而且这些 return 指令只间隔了几条其
他指令
ROP 利用 return 指令来 unwind 堆栈，却没有与 ret 指令相对应的 call
指令
针对上面两点不同，研究人员提出了很多 ROP 检测和防御技术：
针对第一点不同，可以检测程序执行中是否有频繁 return 的指令流，作为报警
的依据
针对第二点不同，可以通过 call 和 return 指令来查找正常程序中通常都存在的
后进先出栈里维护的不变量，判断其是否异常。或者维护一个影子堆栈
（shadow stack）作为正常堆栈的备份，每次 return 时对比影子堆栈和正常堆
栈是否一致。
还有更极端的，在编译器层面重写二进制文件，消除里面的 return 指令
所以其实这些早期的防御技术都默认了一个前提，即 ROP 中必定存在 return 指
令。所以反过来想，如果攻击者能够找到既不使用 return 指令，又能改变执行流执
行任意代码的 ROP 链，那么就成功绕过了这些防御。
1668
8.2 Return-Oriented Programming without Returns
ROP Without Returns
于是不依赖于 return 指令的 ROP 技术诞生了。
我们知道 return 指令的作用主要有两个：一个是通过间接跳转改变执行流，另一个
是更新寄存器状态。在 x86 和 ARM 中都存在一些指令序列，也能够完成这些工
作，它们首先更新全局状态（如栈指针），然后根据更新后的状态加载下一条指令
序列的地址，最后跳转过去执行（把它们叫做 update-load-branch 指令序列）。使
用这些指令序列完全可以避免 return 指令的使用。
就像下面这样， x 代表任意的通用寄存器：
pop x
jmp *x
r6 通用寄存器里是更新后的状态：
adds r6, #4
ldr r5, [r6, #124]
blx r5
由于 update-load-branch 指令序列相比 return 指令更加稀少，所以需要把它作为
trampoline 重复利用。在构造 ROP 链时，选择以 trampoline 为目标的间接跳转指
令结束的指令序列。当一个 gadget 执行结束后，跳转到 trampoline，trampoline
更新程序全局状态，并将程序控制交给下一个 gadget，由此形成 ROP 链。
跳转攻击流程的原理如下图所示：
1669
8.2 Return-Oriented Programming without Returns
在 x86 上，我们使用一个寄存器 y 保存 trampoline 的地址，那么以间接跳转到 y
结束的指令序列的行为就像是以一个 update-load-branch 指令结束一样。并形成像
ROP 链一样的东西。这种操作在 ARM 上也是类似的。
x86 上的具体实现
x86 上的 return 指令有如下效果：
1. 检索堆栈顶部的 4 个字节，用它设置指令指针 eip
2. 将堆栈指针 esp 值增加 4
传统的 ROP 就是依靠这个操作将布置到栈上的指令片段地址串起来，依次执行。
现在我们考虑下面的指令序列：
pop %eax; jmp *%eax
它的行为和 return 很像，唯一的副作用是覆盖了 eax 寄存器的内容。现在假设程序
的执行不依赖于 eax 寄存器，那么这一段指令序列就完全可以取代 return，这一假
设正是本论文的关键。
1670
8.2 Return-Oriented Programming without Returns
首先，我们当然可以把 eax 换成其它任意一个通用寄存器。其次，比起单间接跳
转，我们通常使用双重间接跳转：
pop %eax; jmp *(%eax)
此时 eax 寄存器存放的是一个被叫做 sequence catalog 表中的地址，该表用于存
放各种指令序列的地址，也就是类似于 GOT 表的东西。第一次跳转，是从上一段
指令序列跳到 catalog 表，第二次跳转，则从 catalog 表跳转到下一段指令序列。
这样做使得 ROP 链的构造更加便捷，甚至可以根据某指令序列相对表的偏移来实
现跳转。
下图是一个函数调用的示例：
1671
8.2 Return-Oriented Programming without Returns
通过 gadget 来实现函数调用一方面可以调用正常的返回导向指令序列，另一方面
可以调用合法的函数（需要移动栈指针以及处理返回值）。在函数调用之前，栈指
针应该被移动到一个新的位置，以防改写栈上的其他 gadget。如果函数执行时栈指
针位于位置 n，那么 k 个参数应该被保存在 n+4, n+8, ... , n+4k。然后函数调用
gadget 从而调用函数 A -> fun(arg1, arg2, ..., argn)。
1.装载寄存器 esi, ebp 和 eax。
将 catalog 中 call-jump 序列的地址装入 esi 寄存器：
1672
8.2 Return-Oriented Programming without Returns
pop %esi; or $0xf3, %al; jmp *(%edx);
# call-jump 序列： call *-0x56000A00(%ecx); add %bh, %bl; inc %eb
c; add %bj, %dh; jmp *%edi;
将 catalog 中 leave-jump 序列的地址装入 ebp 寄存器：
pop %ebp; or $0xf3, %al; jmp *(%edx);
# leave-jump 序列：leave; sar %cl, %bl; jmp *-0x7d(%ebp);
将值 0xb+n 装入 eax 寄存器：
pop %eax; sub %dh, %bl; jmp *(%edx);
2.call-jump 序列的地址位于地址 n，将值 0x38 装入寄存器 esi，并加上栈指针的
值。此时 esi 保存了一个地址，在函数调用返回时会将栈指针设置为该地址。
mov %esi, -0xB(%eax); jmp *(%edx);
pop %esi; or $0xf3, %al; jmp *(%edx);
add %esp, %esi; jmp *(%edx);
3.将函数返回时栈指针的值赋值给 ebp。
先将函数返回的栈指针保存到 esi 指向的内存中：
pop %eax; sub %dh, %bl; jmp *(%edx);
mov %esi, -0xB(%eax); jmp *(%edx);
将上一步存放的栈指针取出来放入 edi 寄存器：
1673
8.2 Return-Oriented Programming without Returns
pop %eax; sub %dh, %bl; jmp *(%edx);
mov -0xD(%eax), %edi; jmp *(%edx);
通过 xchg 交换 edi 和 ebp：
xchg %ebp, %edi; jmp *(%edx);
此时，edi 中保存 leave-jump 序列的地址，ebp 保存函数返回后的栈指针地址。
4.将 pop %ebx; jmp *(%ebx); 序列的地址装入 esi，保存函数地址的指针（加
上偏移量）装入 ecx，将值 n 装入 eax。交换 esp 和 eax 的值，使得栈指针被设置
为 n。
pop %esi; or $0xf3, %al; jmp *(%edx);
pop %ecx; cmp %dh, %dh; jmp *(%edx);
pop %eax; sub %dh, %bl; jmp *(%edx);
xchg %esp, %eax; dec %ebx; std; jmp *0(%esi);
5.由于 n 保存了 call-jump 序列的地址，此时 call-jump 序列被调用，即函数被间接
调用。函数返回后，eax 保存了返回值。由于 edi 保存了 leave-jump 序列的地址，
因此 leave-jump 序列被调用，将 ebp 赋值给 esp，并从栈顶 pop 出新的 ebp：
pop %ebx; jmp *(%ebx);
call *-0x56000A00(%ecx); add %bh, %bl; inc %ebc; add %bj, %dh; j
mp *%edi;
leave; sar %cl, %bl; jmp *-0x7d(%ebp);
此时 ebp 指向 pop %ebx; jmp *(%ebx); ，然后 jmp 过去。
6.将 eax 里的返回值保存到内存：
1674
8.2 Return-Oriented Programming without Returns
pop %ebx; jmp *(%ebx);
pop %edx; jmp *(%edx);
xchg %esi, %eax; and %dh, %dh; jmp *(%edx);
pop %eax; sub %dh, %bl; jmp *(%edx);
mov &esi, -0xB(%eax); jmp *(%edx);
在另一篇论文里，几乎同时提出了这种基于 jmp 指令的攻击方法，即跳转导向编程
（Jump-Oriented Programming），参考章节 8.47。
1675
8.3 Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection
Mechanisms
8.3 Return-Oriented Rootkits: Bypassing
Kernel Code Integrity Protection
Mechanisms
paper
简介
本论文设计并实现了一个能够自动化构建 ROP 指令序列的攻击系统。由于系统使
用的指令序列来自内核已有的代码，而不需要进行代码注入，所以能够绕过内核代
码完整性保护机制。
内核完整性保护机制
内核模块签名
这一机制要求所有内核模块都需要经过数字签名的验证，并拒绝加载验证失败的代
码，所以它的有效性在模块加载时体现，可以一定程度上防御代码注入攻击。但这
种方法并不能保证已有的内核代码中没有可以利用的漏洞或指令序列。
W⊕X
这一机制通过对内存进行可读或可写的标记，能够在运行时防御代码注入攻击。这
种机制对于内核的有效性在于，它假设了攻击者会对内核空间的代码进行修改和执
行，然而在实践中，攻击者往往先获得用户空间的权限，然后修改虚拟地址中用户
空间部分的页面权限。由于页表的不可执行位标记不够精细，所以不可能仅在用户
模式下就将页面标记为可执行。于是攻击者可以在用户空间准备好自己的指令，然
后让漏洞代码跳转到那里执行。
自动化 ROP
基于 ROP 技术，就可以绕过上面的内核完整性保护机制。
1676
8.3 Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection
Mechanisms
内核 ROP 如下图所示：
自动化攻击系统的结构如下图所示：
其中的三个核心组成部分：
1677
8.3 Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection
Mechanisms
Constructor：扫描给定的二进制文件，标记出有用的指令序列，并自动构建出
gadgets
Compiler：提供了一种专门用于 ROP 的语言，它将 Constructor 的输出和用
该语言编写的源文件一起编译，生成程序的最终内存映像
Loader：由于 Compiler 的输出是位置无关的，Loader 用于将相对地址解析为
绝对地址
1678
8.4 ROPdefender: A Detection Tool to Defend Against Return-Oriented
Programming Attacks
8.4 ROPdefender: A Detection Tool to
Defend Against Return-Oriented
Programming Attacks
paper
简介
论文设计并实现了工具 ROPdefender，可以动态地检测传统的 ROP 攻击（基于
return指令）。ROPdefender 可以由用户来执行，而不依赖于源码、调试信息等在
现实中很难获得的信息。
ROPdefender 基于二进制插桩框架 Pin 实现，作为一个 Pintool 使用，在运行时强
制进行返回地址检查。
背景
现有的 ROP 检测方法会维护一个 shadow stack，作为返回地址的备份。当函数返
回时，检查返回地址是否被修改。