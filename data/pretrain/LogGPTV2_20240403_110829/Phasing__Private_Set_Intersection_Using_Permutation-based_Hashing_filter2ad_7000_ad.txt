≤(cid:31)2ne
k (cid:30)k(cid:31) 1
2.4(cid:30)k−1
= n(cid:31)2e
.
(1)
(2)
(3)
(4)
(5)
It is straightforward to see that this probability can be
bounded to be at most 2−40 by setting
k ≥ max(6,2elogn/loglogn).
(6)
We calculated for some values of n the desired bin sizes
based on the upper bound of Eq. (6) and the tighter cal-
culation of Eq. (5), and chose the minimal value of k that
reduces the failure probability to below 2−40. The results
are in Table 2. It is clear that Eq. (5) results in smaller
bins for sufﬁciently large n, and therefore the maximal
bin size should be set according to Eq. (5).
n
Eq. (5)
Eq. (6)
212
18
19
216
19
22
220
20
26
224
21
29
Table 2: The bin sizes maxβ that are required to ensure
that no overﬂow occurs when mapping 2n items to 2.4n
bins, according to Eq. (5) and Eq. (6).
7.2 Cuckoo Hashing
It was shown in [16] that Cuckoo hashing with a stash
of size s fails with probability O(n−s). The constants in
the big “O” notation are unclear, but it is obvious that
O(n−s) ≤ n−(s−1) for sufﬁciently large values of n.
524  24th USENIX Security Symposium 
USENIX Association
10
s
0
1
2
3
4
5
6
211
1,068,592,289
4,994,200
147,893
7,005
407
28
2
212
1,070,826,935
2,861,137
52,038
1,647
62
5
0
213
1,072,132,187
1,592,951
16,404
274
8
0
0
214
1,072,845,430
891,497
4,840
56
1
0
0
Required stash sizes
Table 3:
over
n ∈ {211,212,213,214} elements to 2.4n bins.
230 Cuckoo
hashing
s
accumulated
repetitions mapping
)
y
2
(
y
t
i
l
i
b
a
b
o
r
P
r
o
r
r
E
Number of Elements (2x)
−111 12 13 14 15 16 17 18 19 20 21 22 23 24
−10
−20
−30
−40
    s=1
s=2
s=3
s=4
s=5
s=6
−60
−80
We would like to ﬁnd the exact size of the stash that
ensures that the failure probability is smaller than 2−40.
We ran 230 repetitions of Cuckoo hashing, mapping n
for n ∈ {211,212,213,214}, and
items to 2.4n bins,
recorded the stash size s that was needed for Cuckoo
hashing to be successful. Tab. 3 depicts the number of
repetitions where we required a stash of size s. From the
results we can observe that, to achieve 2−30 failure prob-
ability of Cuckoo hashing, we would require a stash of
size s = 6 for n = 211, s = 5 for n = 212, and s = 4 for
both n = 213 and n = 214 elements.
However, in our experiments we need the stash sizes
for larger values of n ≥ 214 to achieve a Cuckoo hashing
failure probability of 2−40. To obtain the failure proba-
bilities for larger values of n, we extrapolate the results
from Tab. 3 using linear regression and illustrate the re-
sults in Fig. 1. We observe that the stash size for achiev-
ing a failure probability of 2−40 is drastically reduced for
higher values of n: for n = 216 we need a stash of size
s = 4, for n = 220 we need s = 3, and for n = 224 we
need s = 2. This observation is in line with the asymp-
totic failure probability of O(n−s).
Finally, we extrapolate the required stash sizes s to
achieve a failure probability of 2−40 for smaller values of
n ∈ {28,212} and give the results together with the stash
sizes for n ∈ {216,220,224} in Tab. 4.
number of elements n
stash size s
28
12
212
6
216
4
220
3
224
2
Table 4: Required stash sizes s to achieve 2−40 error
probability when mapping n elements into 2.4n bins.
8 Evaluation
We report on our empirical performance evaluation of
Circuit-Phasing (§5) and OT-Phasing (§6) next. We eval-
uate their performance separately (§8.1 and §8.2), since
special purpose protocols for set intersection were shown
to greatly outperform circuit-based solutions in [22].
(The latter are nevertheless of independent interest be-
cause their functionality can be easily modiﬁed.)
11
−100
Figure 1: Error probability when mapping n elements to
2.4n bins using 2-way Cuckoo hashing for stash sizes
1 ≤ s ≤ 6. The solid lines correspond to actual measure-
ments, the dashed lines were extrapolated using linear
regression. Both axes are in logarithmic scale.
consider
Benchmarking Environment We
two
benchmark settings: a LAN setting and a WAN setting.
The LAN setting consists of two desktop PCs (Intel
Haswell
i7-4770K with 3.5 GHz and 16GB RAM)
connected by Gigabit LAN. The WAN setting consists
of two Amazon EC2 m3.medium instances (Intel Xeon
E5-2670 CPU with 2.6 GHz and 3.75 GB RAM)
located in the US east coast (North Virginia) and Europe
(Frankfurt) with an average bandwidth of 50 MB/s and
average latency (round-trip time) of 96 ms.
We perform all experiments for a symmetric security
parameter κ = 128-bit and statistical security parameter
λ = 40 (cf. §2.1), using a single thread (except for GMW,
where we use two threads to compute OT extension), and
average the results over 10 executions.
In our experi-
ments, we frequently encountered outliers in the WAN
setting with more than twice of the average run-time, for
which we repeated the execution. The resulting variance
decreased with increasing input set size; it was between
0.5%− 8.0% in the LAN setting and between 4%− 16%
in the WAN setting. Note that all machines that we per-
form our experiments on are equipped with the AES-NI
extensions which allows for very fast AES evaluation.
Implementation Details We instantiate the random or-
acle,
the function for hashing into smaller domains,
and the correlation-robust function in OT extension with
SHA256. We instantiate the pseudo-random generator
using AES-CTR and the pseudo-random permutation in
the server-aided protocol of [15] using AES. To com-
(cid:29) functionality, we use the random 1-
pute the(cid:31)2µ
1(cid:30)-OTt
USENIX Association  
24th USENIX Security Symposium  525
out-of-N OT extension of [17] and set µ = 8, i.e., use
N = 256, since this was shown to result in minimal over-
head in [22]. We measure the times for the function eval-
uation including the cost for precomputing the OT exten-
sion protocol and build on the OT extension implementa-
tion of [2]. Our OT-Phasing implementation is available
online at https://github.com/encryptogroup/PSI
and our Circuit-Phasing implementation is available as
part of the ABY framework of [5] at https://github
.com/encryptogroup/ABY.
For simple hashing we use the maximum bin sizes that
were computed using Equation 5 in §7.1 (cf. Tab. 2). For
Cuckoo hashing, we set ε = 0.2 and map n elements to
2(1 +ε)n bins for 2-way Cuckoo hashing and to (1 +ε)n
bins for 3-way Cuckoo hashing with a stash size accord-
ing to Tab. 4. The only exception for the stash size are
the experiments with different set sizes in §8.2.2, where
we use no stash for our OT-Phasing protocol.
For OT-based PSI [22] and OT-Phasing, where the
performance depends on the bit-length of elements, we
hash the σ-bit input elements into a (cid:30) = λ + log2(n1) +
log2(n2)-bit representation using SHA256 if σ > (cid:30).
We use a garbled circuits implementation with most
recent optimizations (cf. full version [21] for details).
We emphasize that all implementations are done in
the same programming language (C++), use the same
underlying libraries for evaluating cryptographic opera-
tions (OpenSSL for symmetric cryptography and Miracl
for elliptic curve cryptography), perform the plaintext-
intersection of elements using a standard hash map, are
all executed using a single thread (except for the GMW
implementation which uses two threads), and run in the
same benchmarking environment.
8.1 Generic Secure Computation-based
PSI Protocols
For the generic secure computation-based PSI protocols,
we perform the evaluation on a number of elements vary-
ing from 28 to 220 and a ﬁxed bit-length of σ = 32-
bit. For n = 220 all implementations, except Circuit-
Phasing with GMW, exceeded the available memory,
which is due to the large number of AND gates in the
SCS circuit (estimated 2 billion AND gates) and the re-
quirement to represent bits as keys for Circuit-Phasing
with Yao, where storing only the input wire labels to
the circuit requires 1 GB. A more careful implementa-
tion, however, could allow the evaluation of these cir-
cuits. We compare the sort-compare-shufﬂe (SCS) cir-
cuit of [12] and its depth-optimized version of [22], with
Circuit-Phasing (§5), by evaluating both constructions
using Yao’s garbled circuits protocol [25] and the GMW
protocol [11] in the LAN and WAN setting. We use the
size-optimized version of the SCS circuit in Yao’s gar-
bled circuit and the depth-optimized version of the cir-
cuit in the GMW protocol (cf. §3.4). For the evalua-
tion in Circuit-Phasing, we set the maximum bin size in
simple hashing according to Equation 5 (cf. Tab. 2, set
ε = 0.2, set the stash size according to Tab. 4, and assume
n = n1 = n2. The run-time of Circuit-Phasing would in-
crease linear in the bin size maxβ , while the stash size s
would have a smaller impact on the total run-time as the
concrete factors are smaller.
Run-Time (Tab. 5) Our main observation is that
Circuit-Phasing outperforms the SCS circuit of [12] for
all parameters except Yao’s garbled circuits with small
set sizes n = 28. In this case, the high stash size of s = 12
greatly impacts the run-time of Circuit-Phasing. When
evaluated using Yao’s garbled circuits, Circuit-Phasing
outperforms the SCS circuit by a factor of 1-2, and when
evaluated using GMW it outperforms SCS by a factor
of 2-5. Furthermore, the run-time for Circuit-Phasing
grows slower with n than for the SCS circuit for all set-
tings except for GMW in the WAN setting. There, the
run-time of the SCS circuit grows slower than that of
Circuit-Phasing. This can be explained by the high num-
ber of communication rounds of the SCS based protocol,
which are slowly being amortized with increasing val-
ues of n. The slower increase of the run-time of Circuit-
Phasing with increasing n is due to the smaller increase
of the bin size maxβ ∈ O( lnn
lnlnn ) vs. O(logn) for the SCS
circuit, and the use of permutation-based hashing, which
reduces the bit-length of the inputs to the circuit. Note
that our Yao’s garbled circuits implementation suffers
from similar performance drawbacks in the WAN setting
as our GMW implementation, although being a constant
round protocol. This can be explained by the pipelining
optimization we implement, where the parties pipeline
the garbled circuits generation and evaluation. The per-
formance drawback could be reduced by using an im-
plementation that uses independent threads for sending /
receiving.
Communication (Tab. 6) Analogously to the run-time
results, Circuit-Phasing improves the communication of
the SCS circuit by factor of 1-4 and grows slower with
increasing values of n. The improvement of the round
complexity, which is mostly important for GMW, is even
more drastic. Here, Circuit-Phasing outperforms the SCS
circuit by a factor of 16-38. Note that the round complex-
ity of Circuit-Phasing only depends on the bit-length of
items and is independent of the number of elements.
8.2 Special Purpose PSI Protocols
For the special purpose PSI protocols we perform the
experimental evaluation for equally sized sets n1 =
526  24th USENIX Security Symposium 
USENIX Association
12
Protocol
n = 28
n = 212
LAN
n = 216
n = 220
n = 28
n = 212
WAN
n = 216
n = 220
Yao’s garbled circuits [25]
SCS [12]
Circuit-Phasing §5
Goldreich-Micali-Wigderson [11]
SCS [12]
Circuit-Phasing §5
309
376
626
280
3,464
3,154