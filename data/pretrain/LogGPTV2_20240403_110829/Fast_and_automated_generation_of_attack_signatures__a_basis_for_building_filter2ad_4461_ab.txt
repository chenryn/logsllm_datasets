O(cid:13)
P(cid:13)
X(cid:13)
Vulnerable(cid:13)
Buffer(cid:13)
Pointer(cid:13)
Variable(cid:13)
Figure 1: Buffer overﬂow attack scenario.
All memory error exploits reported so far have been based on
pointer corruption. In particular, these exploits use a software vul-
nerability (such as out-of-bounds array access) to change a security-
critical pointer with an attacker-provided value. Code injection at-
tacks overwrite a function pointer value (e.g., return address) with
the address of an input buffer that holds attacker-provided code.
Existing-code attacks (sometimes called return-to-libc attacks) are
based on overwriting code pointers with the locations of functions
such as execve. Attacks that target security-critical data [6] are
usually based on overwriting data pointer values.
ASR defeats pointer corruption attacks by randomizing the loca-
tion of various data and code objects in the process address space.
Thus, the attacker can no longer guess the address of the input
buffer containing attacker-provided code, the address of any spe-
ciﬁc function in the process memory (such as execve), or any
vulnerable data items (e.g., ﬁle names). The only choice for the
attacker is to guess the locations of these objects. Since most pro-
grams use only a small fraction of the address space available to
them, the probability p of the attacker guessing a valid address
within the process memory is small. For instance, p = 0:024 for a
process using 100MB of memory on a 32-bit processor. This means
that a dereference of the pointer will, with a high probability, cause
a memory exception, which leads to a UNIX signal (segmentation
fault, bus error or illegal instruction). The receipt of this signal
initiates a forensic analysis described in the next section. Before
proceeding to describe this analysis, we make two observations:
(cid:15) There is a non-negligible probability p that an attack does not
lead to a memory fault immediately, but crashes after executing
several (possibly random) instructions1. While a more complex
forensic analysis can cope with some cases of delayed detection,
in other cases, execution of random code can corrupt process
memory to the point of making such analysis impossible. Our
approach to the problem of delayed detection is to simply wait
for the next instance of the attack. Thus, if p is large, we may
need multiple attack instances to generate a signature — for in-
stance, if p = 0:5, we need an average of two attack instances
before a signature is generated. Since the value of p is much
smaller in practice (see above), signatures were generated with
just one attack instance in all our experiments.
(cid:15) The ability to carry out forensic analysis is not closely tied to
ASR. Indeed, techniques that provide more prompt error detec-
tion, such as complete memory-error protection or ISR (for code-
injection attacks) will make forensic analysis simpler.
1The likelihood that the attack will actually succeed on the ﬁrst
attempt is very small (of the order of 10(cid:0)4 in the case of PaX). If
this risk is unacceptable, then one can rely on complete memory-
error protection techniques that can stop all memory-error exploits.
3.
Input Correlation
The correlation step identiﬁes the speciﬁc network packet (or
ﬂow) involved in an attack, and the bytes within this packet that
were responsible. This enables the signature search to be focused
on the relevant parts of input, enabling higher-quality signature
generation. Our correlation approach uses a forensic analysis of
victim process memory at the point of attack detection.
Figure 1 shows the input processing cycle in a buffer overﬂow
attack. First, some malicious input is received by a victim pro-
cess. The manner in which this input is handled will depend on
the internal state of the process, as well as the content of the input.
If the attack is properly crafted, control-ﬂow will eventually reach
a vulnerable fragment of the victim program. Here, some part of
the input gets copied into a buffer that is too small, and hence the
input overwrites a pointer value that is past the end of the buffer.
As discussed previously, the attack is detected when this corrupted
pointer is used, and causes a memory exception. Note that in Fig-
ure 1, the address that causes memory exception is M, and it can be
obtained by querying the OS. At this point, a simple approach for
correlation is to search for the occurrence of M within recent in-
puts. However, due to the small size (i.e., 32-bits) of M, there may
be occurrences of M within benign inputs. This likelihood is in-
creased when “offset errors” are present, i.e., the attacker misjudges
the distance between the beginning of the buffer and the vulnera-
ble pointer, and as a result, the intended pointer value may be P
rather than M. In this case, M may contain a benign, commonly
occurring value rather than a pointer value.
To minimize the likelihood of matching with benign inputs, our
approach searches for the entire buffer contents (“DEF (cid:1) (cid:1) (cid:1) P ” in
Figure 1) within recent inputs. To do this, we ﬁrst need to locate
the address a2 at which M is stored – the value of M alone isn’t
sufﬁcient. Location of a2 is described in Section 3.1. Once a2 is
obtained, our analyzer searches for the longest common substring
between recent inputs, and the region of memory surrounding a2.
In the example of Figure 1, this step will identify the highlighted
part of external input as constituting the attack.
The method described so far handles buffer overﬂows, which are
associated with most memory error exploits such as stack-smashing
and heap overﬂows. Although format-string attacks do not involve
a buffer overﬂow, they share the key characteristic used in the anal-
ysis described above: namely, the forged pointer (i.e., attacker spec-
iﬁed pointer value such as M) occurs in the middle of attacker-
provided data residing in a buffer. Consequently, they can be han-
dled by our analysis. This leaves certain forms of integer overﬂows,
where the forged pointer value does not occur contiguously with
any other attacker-provided data, as the only class among memory
error exploits that cannot be handled by our approach. This limita-
tion is further addressed in Section 3.2.
3.1
Identifying the Location of Vulnerable Pointer
Depending on the type of corrupted pointer, we consider 3 cases.
Return address corruption. In this case, a memory exception oc-
curs immediately after the return, i.e., when the processor attempts
to fetch the instruction at the return address. By the semantics of
the return instruction in x86, the stack pointer (SP) register will
contain the value a2 + 1 in this case. We conﬁrm a return address
corruption attack by checking for the presence of M, which has the
same value as the instruction pointer (IP), at location SP (cid:0) 1, and
then take SP (cid:0) 1 as the value of a2. In the x86 architecture, a
return instruction can take an operand that speciﬁes the number of
additional bytes to pop off the stack. To handle this case, we need
to search the region near SP for M, since we don’t know the exact
number of bytes that were supposed to be popped off.
PC1: mov
PC2: mov
PC3: addl
PC4: mov
PC5: mov
Figure 2: Code involved in a format string attack
0x10(%ebp),%eax
0xfffffa90(%ebp),%ecx
$0x4,0x10(%ebp)
(%eax),%eax
%ecx,(%eax)
Function pointer corruption.
In this case, a memory exception
occurs immediately after the call. By the semantics of the call in-
struction on x86, the location of the instruction following the call
instruction will be stored at address SP . Using this information,
we can decode the call instruction to determine its operand. Note
that a call involving a function pointer must be an indirect call,
which means that the address will be stored in some location, and
this location will be speciﬁed as an operand to the call instruction.
In the following paragraph we describe how to obtain a2 from the
operand to this instruction.
Data pointer corruption.
In this case, a memory exception
arises in the instruction that takes the corrupted pointer value as
an operand. At this point, we can obtain both the instruction caus-
ing the fault (by querying the OS for the value of IP), as well as
the address of invalid memory dereference. Once the instruction is
determined, we proceed in the exact same manner as with function
pointers. In particular, the operand may be a memory location or
a register. In the ﬁrst case, the location speciﬁed in the instruction
is the value of a2 we are likely looking for. In the second case, we
need to trace back further to determine the memory location from
which the register operand was loaded. A general solution to this
problem requires accurate disassembly and data-ﬂow analysis of
binaries, which is a hard problem.
In order to ensure simplicity and practicality of our technique,
we developed a simpler implementation technique that relies on
the following observations about buffer overﬂows. First, stack-
smashing is the most common exploit, and it does not require this
sort of binary analysis at all. Second, most other attacks rely on
vulnerabilities in commonly used library functions, e.g., heap over-
ﬂows rely on a section of code in heap management functions
(malloc family), while format-string attacks rely on a code sec-
tion within vfprintf. Therefore, we can statically construct a
table that identiﬁes the instruction sequences associated with com-
monly exploited code sections, and specify in advance the source
of a2. For instance, consider Figure 2, which shows the vulnerable
code fragment within vfprintf on RedHat Linux 7.3. A memory
exception arises when the instruction at PC5 is executed. By ex-
amining instructions at PC1 and PC4, it can be seen that the value
of EAX register came from the contents of EBP + 10. However,
this location has been incremented by 4 by the instruction at PC3.
Thus, the value of a2 is given by [EBP + 10] (cid:0) 4. Our table stores
the byte sequence corresponding to the instructions stored at PC1
through PC5, and associates it with the expression [EBP + 10] (cid:0) 4
for computing a2.
Using the above table-based approach, we were able to identify
a2 in all the attacks used in our evaluation. So far, we have needed
to include only two entries in our table, one corresponding to for-
mat string attacks and another corresponding to heap overﬂows.
Although we discuss only one instance of each of these types of
attacks in our evaluation, we have actually tested our system with
other attacks (on lesser known servers) and found that the two table
entries worked in those cases as well.
3.2 Limitations and Their Impact
Our input correlation assumes that an exact copy of some part of
the attack input would be found around the corrupted pointer. As
discussed earlier, this assumption may be violated by some integer
overﬂow attacks, in which case our correlation step can only point
out the occurrence of M within recent inputs. Even worse, some
form of encoding/decoding (e.g., URL encoding) may be applied
to an input before it is copied to a vulnerable buffer. In this case,
we cannot even locate M within the input.
In the cases mentioned above, the correlation step may fail to
provide information to pinpoint the inputs (or locations within these
inputs) that led to attacks. Nevertheless, signature generation can
still succeed — we simply need to consider all recent inputs as sus-
picious, and proceed from there. Indeed, successful signatures can
be generated in spite of a failed correlation step for the examples
used in our evaluation. This is because of the large difference (in
terms of size as well as character distribution) between benign and
malicious inputs. If the differences weren’t as pronounced, or if
the attacker speciﬁcally crafts an attack that misdirects the signa-
ture generator as to the ﬁelds involved in the attack, then signature
generation may not succeed, or may produce overly speciﬁc signa-
tures.
4.
Identifying Input Context
Most network protocols involve many different types of mes-
sages and message ﬁelds, each of which may have different charac-
teristics. However, attacks typically exploit a speciﬁc vulnerability
that affects only a single message type, and/or speciﬁc ﬁelds of a
message. As a result, a signature that is matched against all types
of messages (and its ﬁelds) can lead to false positives. To mini-
mize this likelihood, our approach uses a simple speciﬁcation of
message formats to parse a message and break it up into its com-
ponents. This enables signature generation (and matching) to focus
on meaningful components of the message, rather than quantities
such as offsets within network packets. As we show later in this
section, very simple input speciﬁcations are sufﬁcient for our pur-
poses, and the information needed to write these speciﬁcations is
readily available from network protocol speciﬁcations such as the
IETF RFCs.
4.1
Input Format Speciﬁcation Language
Network servers may use text-based protocols or binary proto-
cols. Regular expressions are an obvious choice for specifying the
format of text-based protocols. Thus, our format speciﬁcation lan-
guage extends regular expressions to support binary protocols. The
syntax of the language is based on the syntax of format strings in
C and the regular expression language used by the Lex lexical ana-
lyzer generator tool.
A format speciﬁcation in our language describes input format
using a sequence of format deﬁnitions. These deﬁnitions have the
form name = f ormat, where name denotes a name for a format
speciﬁcation, and f ormat denotes its value. The f ormat argu-
ment may directly describe the format of a message ﬁeld, or may
refer to other format speciﬁers using their name. A special format-
speciﬁer name message is used to specify the format of the entire
message. Input to the server is expected to be a sequence of strings
that match message.
Below, we describe the syntax and semantics of format speci-
ﬁers. The semantics is given in terms of the set of strings that match
a given pattern. There are three types of basic format speciﬁers.
(cid:15) binary speciﬁer: %B matches any single byte, while %b matches
any single bit.
(cid:15) text speciﬁer: a regular expression can be used to specify text
formats, and its semantics is as usual.
(cid:15) named speciﬁer: %name matches the same set of strings as for-
mat speciﬁer x, where name has been previously deﬁned using
a deﬁnition of the form name = x.