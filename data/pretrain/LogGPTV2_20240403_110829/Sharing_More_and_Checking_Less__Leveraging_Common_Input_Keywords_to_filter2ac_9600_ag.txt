SaTC from building the relationship between the front-end
and the back-end. We leave the solutions for dealing with
these obfuscation techniques to future work.
To measure the applicability of SaTC regarding the concern
of encryption and obfuscation, we conducted an empirical
evaluation. Speciﬁcally, we collected 186 widely used home
Wi-Fi routers from seven leading vendors and inspected them
to ﬁnd encryption and obfuscations. We found that only four
out of 186 devices are protected with encryption and all of
316    30th USENIX Security Symposium
USENIX Association
them are D-Link routers. After we manually decoded these
four samples, SaTC can handle them just as other devices. We
can use off-the-shelf unpacking tools (e.g., binwalk) to unpack
all devices except one failure due to the unsupported ﬁlesys-
tem (Tenda AC11). Only one device, speciﬁcally NetGear
R6400 v2, uses obfuscation to protect parts of the front-end
JavaScript code, and SaTC failed to extract any keywords
from these JavaScript ﬁles. However, the HTML ﬁles are not
obfuscated, where SaTC still can extract many useful key-
words and successfully found two command injection vulner-
abilities. Overall, encryption and obfuscation techniques have
not been widely used in real-world IoT devices, and SaTC
is still able to discover vulnerabilities for a large number of
ﬁrmware samples. We plan to use existing deobfuscation
approaches [4, 19, 29] to make SaTC more applicable.
9 Related Work
Instead of listing all related work, we focus our discussion
on the most related ones: dynamic and static methods of
vulnerability discovery for ﬁrmware, and taint tracking.
Dynamic Analysis. Many works [22, 48, 54, 55] use fuzzing
technology to detect vulnerability in IoT devices. SR-
Fuzzer [52] is an automated fuzzing framework for testing
physical SOHO (small ofﬁce/home ofﬁce) routers, which
needs to capture a large number of web requests from the
running devices ﬁrstly and then could model the user-input
semantics to generate test cases. FIRMADYNE [7] is a state-
of-the-art ﬁrmware emulation framework, which designed
for automated dynamic analysis for a large-scale embedded
ﬁrmware. Although FIRMADYNE is promising, its emula-
tion rate of network reachability and web service availability
is considerably low. FIRMAE [23] uses several heuristics to
address the problems and increases the emulation success
rate. However, it can only handle observed cases and may not
apply to new devices and new conﬁgurations. IoTFuzzer [8]
tries to ﬁnd memory corruption vulnerabilities in IoT devices
via their ofﬁcial apps, therefore it is ﬁrmware-free. However,
it’s trapped in the coverage of code and attack surface, which
is a common challenge for dynamic fuzzing analysis. FIRM-
AFL [53] is a greybox fuzzer for IoT devices via emulating the
target ﬁrmware. However, it’s hard for researchers to achieve
a faithful emulation with various kinds of CPU architectures.
Static Analysis. Static analysis-based techniques are
very common in the ﬁeld of IoT vulnerability detection.
KARONTE [34] leverages static analysis techniques to per-
form multi-binary taint analysis. However, the researchers
only focus on back-end binaries and ignore the user-input
context stored in the front-end ﬁles, which will cause a large
number of false negatives. Firmalice [37] provides a frame-
work for detecting authentication bypass vulnerabilities in
binary ﬁrmware based on symbolic execution and program
slicing. However, it suffers from overwhelming the constraint
solver. FIE [17] utilizes the symbolic execution to analyze
open-source MSP430 ﬁrmware programs. However, complete
analyses are intractable for some ﬁrmware and various sources
of imprecision in the analysis may lead to false positives or
false negatives.
Taint Tracking. Several prior works [5,24,34] use taint anal-
ysis to discover the vulnerability in IoT devices. DTaint [9]
focuses on the data generated by recv and other similar func-
tions, but it ignores the semantic of the front-end ﬁles. Cryp-
toREX [51] only identiﬁes the crypto misuse problem of IoT
devices. Some researchers [12, 27, 28] focus on enhancing
the availability of taint analysis. TaintInduce [11] tries to
increases the accuracy of individual propagation rules via
learning platform-speciﬁc taint propagation rules from pairs
of instructions. Greyone [18] proposes a fuzzing-driven taint
inference solution FTI, which is utilized to get more taint
attributes as well as the precise relationship between input
offsets and branches. Neutaint [36] uses neural program em-
beddings to track information ﬂow, and utilizes symbolic exe-
cution to generate training data with high quality to improve
the ﬂow coverage. However, accumulated errors and large
overhead are still big challenges for Dynamic Taint Track.
10 Conclusions
We propose SaTC, a novel approach to detect security vul-
nerabilities in embedded systems. Based on the insight that
variable names are commonly shared between front-end ﬁles
and back-end functions, SaTC precisely identiﬁes the input
entry in the back-end binaries. Then, it utilizes our taint engine
customized for embedded systems to efﬁciently detect danger-
ous use of untrusted input. SaTC has successfully discovered
33 zero-day software bugs from 39 ﬁrmware samples, and 30
of them have been assigned CVE/CNVD/PSV IDs. Our evalu-
ation result shows that SaTC outperforms the state-of-the-art
tool on discovering bugs in ﬁrmware samples.
Acknowledgement
We would like to thank our shepherd, Dr. Kevin Butler, and
the anonymous reviewers of this work for their helpful feed-
back. We thank Yue Liu, Yuwei Liu, Minghang Shen, Huikai
Xu, and Chutong Liu for their valuable feedback on earlier
drafts of this paper. This research is supported, in part, by
National Natural Science Foundation of China under Grant
No. U1836113, 61772308, 61972224 and U1736209, Bei-
jing Nova Program of Science and Technology under grant
Z191100001119131, BNRist Network and Software Secu-
rity Research Program under Grant BNR2019TD01004 and
BNR2019RC01009, National Key Research and Development
Program under Grant 2019QY0703, and Science and Technol-
ogy Commission of Shanghai Municipality Research Program
under Grant 20511102002. All opinions expressed in this pa-
per are solely those of the authors.
USENIX Association
30th USENIX Security Symposium    317
References
[1] Eirini Anthi, Lowri Williams, Małgorzata Słowi´nska, George Theodor-
akopoulos, and Pete Burnap. A supervised intrusion detection system
for smart home iot devices. IEEE Internet of Things Journal, 6(5):9042–
9053, 2019.
[2] Kimia Zamiri Azar, Farnoud Farahmand, Hadi Mardani Kamali,
Shervin Roshanisefat, Houman Homayoun, William Diehl, Kris Gaj,
and Avesta Sasan. COMA: Communication and Obfuscation Man-
agement Architecture. In 22nd International Symposium on Research
in Attacks, Intrusions and Defenses ({RAID} 2019), pages 181–195,
2019.
[3] Suman Sankar Bhunia and Mohan Gurusamy. Dynamic attack detec-
tion and mitigation in IoT using SDN. In 2017 27th International
telecommunication networks and applications conference (ITNAC),
pages 1–6. IEEE, 2017.
[4] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten
Holz. Syntia: Synthesizing the Semantics of Obfuscated Code. In 26th
USENIX Security Symposium (USENIX Security 17), pages 643–659,
Vancouver, BC, 2017. USENIX Association.
[5] Z. Berkay Celik, Leonardo Babun, Amit Kumar Sikder, Hidayet Aksu,
Gang Tan, Patrick McDaniel, and A. Selcuk Uluagac. Sensitive In-
formation Tracking in Commodity IoT. In Proceedings of the 27th
USENIX Security Symposium, pages 1687–1704, 2018.
[6] Rajat Subhra Chakraborty, Seetharam Narasimhan, and Swarup Bhunia.
Embedded software security through key-based control ﬂow obfusca-
tion. In International Conference on Security Aspects in Information
Technology, pages 30–44. Springer, 2011.
[7] Daming D. Chen, Manuel Egele, Maverick Woo, and David Brum-
ley. FIRMADYNE: Towards Automated Dynamic Analysis for Linux-
based Embedded Firmware. In Proceedings of the 23th Annual Network
and Distributed System Security Symposium, San Diego, California,
USA, February 2016.
[8] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang
Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang,
and Kehuan Zhang. IOTFUZZER: Discovering Memory Corruptions
in IoT Through App-based Fuzzing. In Proceedings of the 25th An-
nual Network and Distributed System Security Symposium, San Diego,
California, USA, February 2018.
[9] Kai Cheng, Qiang Li, Lei Wang, Qian Chen, Yaowen Zheng, Limin
Sun, and Zhenkai Liang. DTaint: Detecting the Taint-style Vulner-
ability in Embedded Device Firmware. In Proceedings of the 48th
Annual IEEE/IFIP International Conference on Dependable Systems
and Networks, pages 430–441. IEEE, 2018.
[10] Per Christensson. NVRAM Deﬁnition. https://techterms.com/
definition/nvram, 2010.
[11] Zheng Leong Chua, Yanhao Wang, Teodora Baluta, Prateek Saxena,
Zhenkai Liang, and Purui Su. One Engine to Serve’em All: Inferring
Taint Rules without Architectural Semantics. In Proceedings of the
26th Annual Network and Distributed System Security Symposium, San
Diego, California, USA, February 2019.
[12] James Clause, Wanchun Li, and Alessandro Orso. Dytan: A Generic
In Proceedings of the 2007
Dynamic Taint Analysis Framework.
International Symposium on Software Testing and Analysis, pages 196–
206, 2007.
[13] Andrei Costin, Apostolis Zarras, and Aurélien Francillon. Automated
Dynamic Firmware Analysis at Scale: A Case Study on Embedded
Web Interfaces. In Proceedings of the 11th ACM on Asia Conference
on Computer and Communications Security, pages 437–448, 2016.
[14] Crispan Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke,
Steve Beattie, Aaron Grier, Perry Wagle, Qian Zhang, and Heather
Hinton. Stackguard: Automatic adaptive detection and prevention of
buffer-overﬂow attacks. In USENIX Security Symposium, 1998.
[15] Benjamin Cyr, Jubayer Mahmod, and Ujjwal Guin. Low-cost and
secure ﬁrmware obfuscation method for protecting electronic systems
from cloning. IEEE Internet of Things Journal, 6(2):3700–3711, 2019.
https:
[16] Piotr Dabkowski. Js2Py: JavaScript to Python Translator.
//github.com/PiotrDabkowski/Js2Py, 2020.
[17] Drew Davidson, Benjamin Moench, Somesh Jha, and Thomas Risten-
part. FIE on Firmware: Finding Vulnerabilities in Embedded Systems
using Symbolic Execution. In Proceedings of the 22nd USENIX Secu-
rity Symposium. USENIX Association, 2013.
[18] Shuitao Gan, Chao Zhang, Peng Chen, Bodong Zhao, Xiaojun Qin,
Dong Wu, and Zuoning Chen. GREYONE: Data Flow Sensitive
Fuzzing. In Proceedings of the 29th USENIX Security Symposium,
Boston, MA, 2020.
[19] Leonid Glanz, Patrick Müller, Lars Baumgärtner, Michael Reif, Sven
Amann, Pauline Anthonysamy, and Mira Mezini. Hidden in plain sight:
Obfuscated strings threatening your privacy. In Proceedings of the 15th
ACM Asia Conference on Computer and Communications Security,
pages 694–707, 2020.
[20] Ujjwal Guin, Swarup Bhunia, Domenic Forte, and Mark M Tehranipoor.
Sma: A system-level mutual authentication for protecting electronic
hardware and ﬁrmware. IEEE Transactions on Dependable and Secure
Computing, 14(3):265–278, 2016.
[21] Craig Heffner. Binwalk - Firmware Analysis Tool. https://gith
ub.com/ReFirmLabs/binwalk, 2014.
[22] Yikun Jiang, Wei Xie, and Yong Tang. Detecting Authentication-bypass
Flaws in a Large Scale of IoT Embedded Web Servers. In Proceedings
of the 8th International Conference on Communication and Network
Security, pages 56–63, 2018.
[23] Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin
Jang, and Yongdae Kim. Firmae: Towards large-scale emulation of iot
ﬁrmware for dynamic analysis. In Annual Computer Security Applica-
tions Conference, ACSAC ’20, page 733–745, New York, NY, USA,
2020. Association for Computing Machinery.
[24] Amit Mandal, Pietro Ferrara, Yuliy Khlyebnikov, Agostino Cortesi,
and Fausto Spoto. Cross-Program Taint Analysis for IoT Systems. In
Proceedings of the 35th Annual ACM Symposium on Applied Com-
puting, page 1944–1952, New York, NY, USA, 2020. Association for
Computing Machinery.
[25] Vincentius Martin, Qiang Cao, and Theophilus Benson. Fending off
In Proceedings of the 2nd
IoT-hunting attacks at home networks.
Workshop on Cloud-Assisted Networking, pages 67–72, 2017.
[26] Microsoft. Data Execution Prevention (DEP), 2006. http://supp
ort.microsoft.com/kb/875352/EN-US/.
[27] Jiang Ming, Dinghao Wu, Jun Wang, Gaoyao Xiao, and Peng Liu.
Straighttaint: Decoupled Ofﬂine Symbolic Taint Analysis. In Proceed-
ings of the 31st IEEE/ACM International Conference on Automated
Software Engineering, pages 308–319. IEEE, 2016.
[28] Jiang Ming, Dinghao Wu, Gaoyao Xiao, Jun Wang, and Peng Liu.
TaintPipe: Pipelined Symbolic Taint Analysis. In Proceedings of the
24th USENIX Security Symposium, pages 65–80, 2015.
[29] Omid Mirzaei, José María de Fuentes, J Tapiador, and Lorena Gonzalez-
Manzano. Androdet: An adaptive android obfuscation detector. Future
Generation Computer Systems, 90:240–261, 2019.
[30] James Newsome and Dawn Xiaodong Song. Dynamic Taint Analysis
for Automatic Detection, Analysis, and SignatureGeneration of Ex-
ploits on Commodity Software. In Proceedings of the 12th Annual
Network and Distributed System Security Symposium, pages 3–4, 2005.
[31] NSA. Ghidra. https://github.com/NationalSecurityAgenc
y/ghidra, 2019.
[32] Palo Alto Networks.
2020 Unit 42 IoT Threat Report.
https://iotbusinessnews.com/download/white-papers/
UNIT42-IoT-Threat-Report.pdf, 2020.
318    30th USENIX Security Symposium
USENIX Association
[33] PaX Team. PaX Address Space Layout Randomization (ASLR).
http://pax.grsecurity.net/docs/aslr.txt, 2003.
[34] Nilo Redini, Aravind Machiry, Ruoyu Wang, Chad Spensky, Andrea
Continella, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni
Vigna. KARONTE: Detecting Insecure Multi-binary Interactions in
Embedded Firmware. In Proceedings of the 41st IEEE Symposium on
Security and Privacy, 2020.
[35] Edward J Schwartz, Thanassis Avgerinos, and David Brumley. All You
Ever Wanted to Know About Dynamic Taint Analysis and Forward
Symbolic Execution (But Might Have Been Afraid to Ask). In Pro-
ceedings of the 31st IEEE symposium on Security and privacy, pages
317–331. IEEE, 2010.
[36] D. She, Y. Chen, A. Shah, B. Ray, and S. Jana. Neutaint: Efﬁcient
Dynamic Taint Analysis with Neural Networks. In Proceedings of the
41st IEEE Symposium on Security and Privacy, pages 364–380, Los
Alamitos, CA, USA, 2020. IEEE Computer Society.
[37] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher
Kruegel, and Giovanni Vigna. Firmalice - Automatic Detection of
In the
Authentication Bypass Vulnerabilities in Binary Firmware.
22nd Annual Network and Distributed System Security, San Diego,
California, USA, February 2015.
[38] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens,
Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe
Hauser, Christopher Kruegel, and Giovanni Vigna. SoK: (State of) The
Art of War: Offensive Techniques in Binary Analysis. In Proceedings
of the 37th IEEE Symposium on Security and Privacy, 2016.
[39] SwatiKhandelwal. Thousands of MikroTik Routers Hacked to Eaves-
https://thehackernews.com/2018/
drop On Network Trafﬁc.
09/mikrotik-router-hacking.html, 2018.
[40] Omer Tripp, Marco Pistoia, Stephen J Fink, Manu Sridharan, and Omri
Weisman. TAJ: Effective Taint Analysis of Web Applications. ACM
Sigplan Notices, 44(6):87–97, 2009.
[41] Web-Release. Multiple Netgear Routers are Vulnerable to Arbi-
https://www.kb.cert.org/vuls/i
trary Command Injection.
d/582384/, 2016.
[42] Web-Release. Securing IoT Devices: How Safe is Your Wi-Fi Router?
https://www.theamericanconsumer.org/wp-content/upl
oads/2018/09/FINAL-Wi-Fi-Router-Vulnerabilities.pdf,
2018.
[43] Web-Release. Targeted Attacks Now Moving into the IoT and Router
Space. https://us.norton.com/internetsecurity-emergin
g-threats-targeted-attacks-moving-into-iot-router.ht
ml, 2018.
[44] Web-Release. Gartner Says 5.8 Billion Enterprise And Automotive
IoT Endpoints Will Be In Use In 2020. https://web-release.c
om/gartner-says-5-8-billion-enterprise-and-automotiv
e-iot-endpoints-will-be-in-use-in-2020, 2019.
[45] Web-Release. ISTR 2019: Internet of Things Cyber Attacks Grow
https://symantec-enterprise-blogs.secur
More Diverse.
ity.com/blogs/expert-perspectives/istr-2019-interne
t-things-cyber-attacks-grow-more-diverse, 2019.
[46] Web-Release.
Home Router Security Report 2020.
https:
//www.fkie.fraunhofer.de/content/dam/fkie/de/docum
ents/HomeRouter/HomeRouterSecurity_2020_Bericht.pdf,
2020.
[47] Dixing Xu, Mengyao Zheng, Linshan Jiang, Chaojie Gu, Rui Tan, and
Peng Cheng. Lightweight and unobtrusive data obfuscation at iot edge
for remote inference. IEEE Internet of Things Journal, 7(10):9540–
9551, 2020.
[48] Bo Yu, Pengfei Wang, Tai Yue, and Yong Tang. Poster: Fuzzing IoT
Firmware via Multi-stage Message Generation. In Proceedings of the
26th ACM SIGSAC Conference on Computer and Communications
Security, pages 2525–2527, 2019.
[49] Tianlong Yu, Vyas Sekar, Srinivasan Seshan, Yuvraj Agarwal, and
Chenren Xu. Handling a trillion (unﬁxable) ﬂaws on a billion devices:
Rethinking network security for the internet-of-things. In Proceedings
of the 14th ACM Workshop on Hot Topics in Networks, pages 1–7,
2015.
[50] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti,
et al. AVATAR: A Framework to Support Dynamic Security Analysis
of Embedded Systems’ Firmwares. In the 21st Annual Network and
Distributed System Security Symposium, volume 14, pages 1–16, San
Diego, California, USA, 2014.
[51] Li Zhang, Jiongyi Chen, Wenrui Diao, Shanqing Guo, Jian Weng, and
Kehuan Zhang. CryptoREX: Large-scale Analysis of Cryptographic
In Proceedings of the 22nd International
Misuse in IoT Devices.
Symposium on Research in Attacks, Intrusions and Defenses, pages
151–164, 2019.
[52] Yu Zhang, Wei Huo, Kunpeng Jian, Ji Shi, Haoliang Lu, Longquan Liu,
Chen Wang, Dandan Sun, Chao Zhang, and Baoxu Liu. SRFuzzer: An
Automatic Fuzzing Framework for Physical SOHO Router Devices to
Discover Multi-type Vulnerabilities. In Proceedings of the 35th Annual
Computer Security Applications Conference, pages 544–556, 2019.
[53] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong
Zhu, and Limin Sun. FIRM-AFL: High-Throughput Greybox Fuzzing
of IoT Firmware via Augmented Process Emulation. In Proceedings of
the 28th USENIX Security Symposium, pages 1099–1114, Santa Clara,
CA, 2019. USENIX Association.
[54] Yaowen Zheng, Zhanwei Song, Yuyan Sun, Kai Cheng, Hongsong Zhu,
and Limin Sun. An Efﬁcient Greybox Fuzzing Scheme for Linux-
based IoT Programs Through Binary Static Analysis. In Proceedings of
the 38th International Performance Computing and Communications
Conference, pages 1–8. IEEE, 2019.
[55] Lipeng Zhu, Xiaotong Fu, Yao Yao, Yuqing Zhang, and He Wang. FIoT:
Detecting the Memory Corruption in Lightweight IoT Device Firmware.
In 2019 18th IEEE International Conference On Trust, Security And
Privacy In Computing And Communications/13th IEEE International
Conference On Big Data Science And Engineering, pages 248–255.
IEEE, 2019.
USENIX Association
30th USENIX Security Symposium    319