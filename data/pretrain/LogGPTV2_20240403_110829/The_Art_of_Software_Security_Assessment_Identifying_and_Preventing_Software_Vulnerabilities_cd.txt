application that does more hexadecimal decoding on it. 
Note 
You can find excellent information on security issues with Unicode in TR36Unicode 
Security Considerations Technical Report. At the time of this writing, it's available at 
www.unicode.org/reports/tr36/. 
Homographic Attacks 
Homographic attacks are primarily useful as a form of social engineering; Evgeniy 
Gabrilovich and Alex Gontmakher originally described them in "The Homographic 
Attack" published in the February 2002 edition of Communications of the ACM. These 
attacks take advantage of a Unicode homograph, which includes different characters 
that have the same visual representation. On its simplest level, a homographic attack 
doesn't specifically require Unicode. For example, the digit 1 (ASCII 0x31) can look 
like the lowercase letter l (ASCII 0x6c). However, with a little scrutiny, you can tell 
them apart. In contrast, a Unicode homographic attack involves two graphical 
representations that are identical, even though the underlying characters are 
different. For example, the Cyrillic character at codepoint 0x0441 happens to look a 
lot like the Latin-1 (ASCII) character 0x0063. In general, both are actually rendered 
as a lowercase c. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
469 
Chapter 17(? [????.]) includes an example of a well-publicized homographic attack in 
the discussion on phishing. For now, just understand that attackers can take 
advantage of these simple tricks when you're reviewing an application that presents 
users with data from external sources. Even if the data isn't directly harmful, 
attackers might be able to use it to trick unsuspecting users. 
Windows Unicode Functions 
The Windows operating system deals with string data internally as wide characters 
(encoded as UTF-16). Because many applications deal with ASCII strings (or perhaps 
other single or multibyte character sets), Windows provides functions for converting 
between the two formats as well as ASCII wrapper functions for all the exposed API 
functions that would otherwise require wide character strings. 
The conversion between character encodings takes place similarly whether an 
application uses ASCII wrapper functions or converts data explicitly. The rules for 
these conversions are determined primarily by the behavior of two functions: 
MultiByteToWideChar() and WideCharToMultiByte(). The details of how these 
functions perform conversions have a number of security implications ranging from 
memory corruption errors to conversions that produce unexpected results, as 
discussed in the following sections. 
MultiByteToWideChar() 
The MultiByteToWideChar() function is used to convert multi- and single-byte 
character strings into Unicode strings. A maximum of cchWideChar characters can be 
written to the output buffer (lpWideCharString). A common error that application 
developers make when using this function is to specify the destination buffer's size in 
bytes as the cchWideChar parameter. Doing this means twice as many bytes could be 
written to the output buffer than space has been allocated for, and a buffer overflow 
might occur. The MultiByteToWideChar() function is summarized in the following list: 
Function int MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR 
lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar) 
API Win32 API 
Similar functions mbtowc 
Purpose MultiByteToWideChar() maps a single- or multibyte character string to 
a wide character string. 
The following code is an example misusing MultiByteToWideChar(): 
HANDLE OpenFile(LPSTR lpFilename) 
{ 
    WCHAR wPath[MAX_PATH]; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
470 
    if(MultiByteToWideChar(0, 0, lpFilename, -1, wPath, 
                           sizeof(wPath)) == 0) 
        Return INVALID_HANDLE_VALUE; 
    ... Create the file ... 
} 
This code is an example of the problem just mentioned. The bolded line shows the 
wide character count is set to the size of the output buffer, which in this case is 
MAX_PATH * sizeof(WCHAR). However, a WCHAR is two bytes, so the output size provided 
to MultiByteToWideChar() is interpreted as MAX_PATH * 2 bytestwice the real length of 
the output buffer. 
WideCharToMultiByte() 
The WideCharToMultiByte() function is the inverse of MultiByteToWideChar(); it 
converts a string of wide characters into a string of narrow characters. Developers are 
considerably less likely to trigger a buffer overflow when using this function because 
the output size is in bytes rather than wide characters, so there's no 
misunderstanding the meaning of the size parameter. The WideCharToMultiByte() 
function is summarized in the following list: 
Function int WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR 
lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, 
LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar) 
API Win32 API 
Similar functions wctombc 
Purpose WideCharToMultiByte() maps a wide character string to a single- or 
multibyte character string. 
Because wide characters are a larger data type, their information sometimes needs to 
be represented by a sequence of single-bytes, called a multibyte character. The 
rules for encoding wide characters into multibyte characters are governed by the code 
page specified as the first argument to this function. 
NUL-Termination Problems 
The MultiByteToWideChar() and WideCharToMultiByte() functions don't guarantee 
NUL-termination if the destination buffer is filled. In these cases, the functions return 
0, as opposed to the number of characters converted. It's intended that users of these 
functions check the return value; however, this is often not the case. Listing 8-29 
shows a brief example. 
Listing 8-29. Return Value Checking of MultiByteToWideChar() 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
471 
HANDLE open_file(char *name) 
{ 
    WCHAR buf[1024]; 
    HANDLE hFile; 
    MultiByteToWideChar(CP_ACP, 0, name, strlen(filename), 
                        buf, sizeof(buf)/2); 
    wcsncat(buf, sizeof(buf)/2  wcslen(buf)  1, ".txt"); 
    ... 
} 
Because the return value is left unchecked, the fact that buf isn't big enough to hold 
the name being converted isn't caught, and buf is not NUL-terminated. This causes 
wcsncat() to miscalculate the remaining buffer size as a negative number, which you 
know is converted into a large positive number if you review the wcsncat() function 
prototype listed under strncat(). 
MultiByteToWideChar() might have additional problems when multibyte character 
sets are being converted. If the MB_ERR_INVALID_CHARS flag is specified, the function 
triggers an error when an invalid multibyte sequence is encountered. Here's an 
example showing a potentially dangerous call: 
PWCHAR convert_string(UINT cp, char *instr) 
{ 
    WCHAR *outstr; 
    size_t length; 
    length = strlen(instr) + 1; 
    outstr = (WCHAR *)calloc(length, sizeof(WCHAR)); 
    MultiByteToWideChar(cp, MB_ERR_INVALID_CHARS, instr, -1, 
                        outstr, -1); 
    return outstr; 
} 
Again, because the function's return value isn't checked, the convert_string() 
function doesn't catch invalid character sequences. The problem is that 
MultiByteToWideChar() returns an error when it sees an invalid character sequence, 
but it doesn't NUL-terminate the destination buffer (outstr, in this case). Because the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
472 
return value isn't checked, the function doesn't deal with this error, and an 
unterminated wide string is returned to the caller. Because of this any later 
processing on this string could result in memory corruption. 
Unicode Manipulation Vulnerabilities 
Memory management issues can also occur when using any bounded multibyte or 
wide character functions. Take a look at an example using wcsncpy(): 
wchar_t destination[1024]; 
wcsncpy(destination, source, sizeof(destination)); 
At first glance, it seems as though this code is correct, but of course the size 
parameter should indicate how big the destination buffer is in wide characters, not the 
size in bytes; so the third argument is actually twice the length of the output buffer. 
This mistake is easy to make, so code auditors should keep an eye out for it. 
Another interesting quirk is errors in dealing with user-supplied multibyte-character 
data strings. If the application code page indicates that a double-byte character set 
(DBCS) is in use, characters can be one or two bytes. Applications processing these 
strings need to identify whether each byte being processed is a single character or 
part of a two-byte sequence; in Windows, this check is performed with the 
IsDBCSLeadByte() function. Vulnerabilities in which a pointer can be incremented out 
of the buffer's bounds can easily occur if the application determines that a byte is the 
first of a two-byte sequence and neglects to check the next byte to make sure it isn't 
the terminating NUL byte. Listing 8-30 shows an example. 
Listing 8-30. Dangerous Use of IsDBCSLeadByte() 
char *escape_string(char *src) 
{ 
    char *newstring, *dst; 
    newstring = (char *)malloc(2*strlen(src) + 1); 
    if(!newstring) 
        return NULL; 
    for(dst = newstring; *src; src++){ 
        if(IsDBCSLeadByte(*src)){ 
            *dst++ = *src++; 
            *dst++ = *src; 
            continue; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
473 
        } 
        if(*src == '\'')) 
            *dst++ = '\'; 
        *dst++ = *src; 
    } 
    return newstring; 
} 
When the code in Listing 8-30 encounters a lead byte of a two-byte sequence, it does 
no checking on the second byte of the two-byte sequence. If the string passed to this 
function ends with a DBCS lead byte, the lead byte and the terminating NUL byte are 
written to the destination buffer. The src pointer is incremented past the NUL byte 
and continues processing bytes outside the bounds of the string passed to this 
function. This error could result in a buffer overflow of the newstring buffer, as the 
allocated length is based on the string length of the source string. 
Note 
When multibyte character sequences are interpreted, examine the code to see what 
can happen if the second byte of the sequence is the string's terminating NUL byte. If 
no check is done on the second byte, processing data outside the buffer's bounds 
might be possible. 
Code Page Assumptions 
When converting from multibyte to wide characters, the code page argument affects 
how MultiByteToWideChar() behaves, as it specifies the character set the multibyte 
string is encoded in. In most cases, this function is used with the default system code 
page (CP_ACP, ANSI Code Page), which doesn't do much. However, attackers can 
affect the code page in some situations by constructing multibyte character 
sequences that evade filters in earlier layers. Listing 8-31 is an example of a 
vulnerable code fragment. 
Listing 8-31. Code Page Mismatch Example 
if(strchr(filename, '/') || strchr(filename, '\\')){ 
    error("filenames with slashes are illegal!"); 
    return 1; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
474 
MultiByteToWideChar(CP_UTF8, 0, filename, strlen(filename), 
                    wfilename, sizeof(wfilename)/2); 
... 
As you can see, encoding is performed after a check for slashes, so by encoding 
slashes, attackers targeting earlier versions of Windows can evade that check and 
presumably do something they shouldn't be able to later. Akio Ishida and Yasuo 
Ohgaki discovered an interesting variation on this vulnerability in the PostgreSQL and 
MySQL database APIs (available at www.postgresql.org/docs/techdocs.50). As 
mentioned, SQL control characters are commonly escaped with the backslash (\) 
character. However, some naive implementations of this technique might not account 
for multibyte characters correctly. Consider the following sequence of bytes: 
0x95 0x5c 0x27 
It's actually a string in which the first two bytes are a valid Shift-JIS encoded 
Japanese character, and the last byte is an ASCII single quote ('). A naive filter won't 
identify that the first two bytes refer to one character; instead, it interprets the 0x5c 
byte as the backslash character. Escaping this sequence would result in the following 
bytes: 
0x95 0x5c 0x5c 0x5c 0x27 
Passing the resulting string to a multibyte-aware database can cause a problem 
because the first two bytes are interpreted as a single Japanese character. Then the 
remaining two 0x5c bytes are interpreted as an escaped backslash sequence. Finally, 
the last byte is left as an unescaped single quote character. This misinterpreted 
encoding can be exploited to inject SQL statements into an application that otherwise 
shouldn't be vulnerable. 
Having multibyte character sets used with MultiByteToWideChar() might have some 
additional complications related to memory corruption. Listing 8-32 shows an 
interesting call to this function. 
Listing 8-32. NUL Bytes in Multibyte Code Pages 
PWCHAR convert_string(UINT cp, char *instr) 
{ 
    WCHAR *outstr; 
    size_t length; 
    length = strlen(instr) * 2 + 1; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
475 
    outstr = (WCHAR *)calloc(length, sizeof(WCHAR)); 
    MultiByteToWideChar(cp, 0, instr, -1, outstr, -1); 
    return outstr; 
} 
The MultiByteToWideChar() function in Listing 8-32 is vulnerable to a buffer overflow 
when a multibyte code page is used. Why? Because the output string length is 
calculated by multiplying the input string length by two. However, this calculation 
isn't adequate because the NUL byte in the string could be part of a multibyte 
character; therefore, the NUL byte can be skipped and out-of-bounds characters 
continue to be processed and written to the output buffer. In UTF-8, if the NUL byte 
appeared in a multibyte sequence, it would form an illegal character; however, 
MultiByteToWideChar() enters a default replacement or skips the character 
(depending on Windows versions), unless the MB_ERR_INVALID_CHARS flag is specified 
in the second argument. When that flag is specified, the function returns an error 
when it encounters an illegal character sequence. 
Character Equivalence 
Using WideCharToMultiByte() has some interesting consequences when decoding 
data. If conversions are performed after character filters, the code is equally 
susceptible to sneaking illegal characters through filters. When converting wide 
characters into multibyte, however, the risk increases for two main reasons: 
Even with the default code page, multiple 16-bit values often map to the same 
8-bit character. As an example, if you want a backslash to appear in the input 
stream of the converted character set, you can supply three different wide 
characters that convert into the backslash byte (0x5c): 0x00 0x5c, 0x22 0x16, 
and 0xff 0x0c. You can do this not because the backslash character has three 
Unicode representations, but because output character represents the closest 
match when an exact conversion can't be performed. This behavior can be 
toggled with the WC_NO_BEST_FIT_CHARS flag. 
When a character is encountered that can't be converted to a multibyte 
character and a close replacement can't be found (or the WC_NO_BEST_FIT flag 
is set), a default replacement character is inserted in the output stream; the . 
character is used for the ANSI code page, unless otherwise specified. If this 
replacement character is filtered, a wide range of values can generate this 
character in the output stream. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
476 
Auditing code that uses MultiByteToWideChar() or WideCharToMultiByte() requires 
careful attention to all these factors: 
Check whether data is required to pass through a filter before it's converted 
rather than after. 
Check whether the code page is multibyte or can be specified by a user. 
If the MB_ERR_INVALID_CHARS flag is set for converting multibyte streams, user 
input can prematurely terminate processing and leave an unterminated 
output buffer. If it's omitted, a multibyte sequence including the trailing NUL 
byte can be specified, potentially causing problems for poorly written code. 
If the WC_NO_BEST_FIT_CHARS flag is present for converting wide character data, 
users might be able to supply multiple data values that translate into the same 
single-byte character. The best-fit matching rules are years out of date, and 
most developers shouldn't use them anyway. 
Look for any other flags affecting how these functions might be misused. 
Make sure the return value is checked. If a conversion error is not identified, 
unterminated buffers might be used incorrectly. 
Check the sizes of input and output buffers, as mentioned in the discussion of 
memory corruption in Chapter 5(? [????.]). 
7.4.7 Summary 
In this chapter, you've explored the vulnerabilities that can occur when processing 
textual data as strings. Most of these vulnerabilities result from processing in-band 
textual metadata in the form of metacharacters. Mishandling this in-band data can 
result in memory corruption, as it commonly does when improperly handling the NUL 
character with the C string APIs. However, there are many other security issues that 
can occur with more complex metacharacter representations, such as path names, 
format strings, and SQL. These issues are further aggravated when different encoding 
schemes and character sets allow data to be formatted in ways that developers do not 
anticipate and account for. As an auditor, you need to understand the risks associated 
with vulnerable in-band data handling, and how to identify and prevent them. 
7.5 Chapter 9.  UNIX I: Privileges and Files 
"There are two major products that came from Berkeley: LSD and UNIX. We don't 
believe this to be a coincidence." 
J. S. Anderson 
"First, LSD did not come from Berkeley. LSD was developed in Sandoz labs in Basel, 
Switzerland. Second, BSD did come from Berkeley, but it is not 'UNIX.'" 
Nick Johnson 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
477 
7.5.1 Introduction 
UNIX is more than just a single operating system; it's a phenomenon. What started as 
a hacker's project to create a functional multi-user operating system has evolved into 