### Set-Cookie2属性详解

#### Comment
- **描述**：此属性为可选项，用于说明服务器如何使用该Cookie。用户可以通过检查此策略来决定是否允许会话使用该Cookie。
- **编码要求**：该值必须采用UTF-8编码。

#### CommentURL
- **描述**：此属性也是可选项，提供一个指向详细描述Cookie目的及策略文档的URL。用户可以通过查看此策略来决定是否允许会话使用该Cookie。

#### Discard
- **描述**：如果设置了此属性，则客户端程序在终止时应放弃该Cookie。

#### Domain
- **描述**：此属性为可选项，浏览器仅向指定域中的服务器主机名发送Cookie。这样，服务器可以将Cookie限制在特定域中。
- **示例**：`acme.com` 域与 `anvil.acme.com` 和 `shipping.crate.acme.com` 匹配，但不匹配 `www.cnn.com`。
- **规则**：域名匹配规则基本与Netscape Cookie相同，但有一些附加规则。详情请参见 RFC 2965。

#### Max-Age
- **描述**：此属性为可选项，其值是一个整数，表示以秒为单位的Cookie生存期。客户端应根据HTTP/1.1的使用期计算规则来计算Cookie的有效期。如果Cookie的存活时间超过Max-Age，客户端应丢弃该Cookie。
- **特殊值**：值为零表示应立即丢弃该Cookie。

#### Path
- **描述**：此属性为可选项，通过它可为服务器上的特定文档指定Cookie。如果Path属性是一个URL路径的前缀，则该Cookie会被附加到相应的请求中。
- **示例**：路径 `/foo` 匹配 `/foobar` 和 `/foo/bar.html`。路径 `/` 匹配域中的所有内容。
- **默认值**：如果没有指定路径，则将其设置为生成Set-Cookie响应的URL的路径。

#### Port
- **描述**：此属性为可选项，可以单独作为关键字使用，也可以包含一个由逗号分隔的端口列表。如果有端口列表，则只向端口与列表中的端口相匹配的服务器提供Cookie。如果单独提供关键字Port而没有值，则只能向当前响应服务器的端口号提供Cookie。
- **示例**：
  ```http
  Set-Cookie2: foo="bar"; Version="1"; Port="80,81,8080"
  Set-Cookie2: foo="bar"; Version="1"; Port
  ```

#### Secure
- **描述**：此属性为可选项，如果包含此属性，则只有在HTTP使用SSL安全连接时才能发送Cookie。

### 版本1的Cookie首部

版本1的Cookie会带回与每个Cookie相关的附加信息，用来描述每个Cookie途径的过滤器。每个匹配的Cookie都必须包含来自相应Set-Cookie2首部的所有Domain、Port或Path属性。

例如，假设客户端以前曾收到以下五个来自Web站点 `www.joes-hardware.com` 的Set-Cookie2响应：
```http
Set-Cookie2: ID="29046"; Domain=".joes-hardware.com"
Set-Cookie2: color=blue
Set-Cookie2: support-pref="L2"; Domain="customer-care.joes-hardware.com"
Set-Cookie2: Coupon="hammer027"; Version="1"; Path="/tools"
Set-Cookie2: Coupon="handvac103"; Version="1"; Path="/tools/cordless"
```
如果客户端对路径 `/tools/cordless/specials.html` 发起一次请求，将会发送如下Cookie首部：
```http
Cookie: $Version="1";
ID="29046"; $Domain=".joes-hardware.com";
color="blue";
Coupon="hammer027"; $Path="/tools";
Coupon="handvac103"; $Path="/tools/cordless"
```
注意，所有匹配的Cookie都会与其Set-Cookie2过滤器一同传输，并且保留关键字均以美元符号（$）开头。

### 版本1的Cookie2首部和版本协商

Cookie2请求首部负责在能够理解不同Cookie规范版本的客户端和服务器之间进行互操作性协商。Cookie2首部告知服务器用户代理理解新形式的Cookie，并提供了所支持的Cookie标准版本（称为Cookie-Version更合适）：
```http
Cookie2: $Version="1"
```
如果服务器理解新形式的Cookie，就能够识别出Cookie2首部，并在响应首部发送Set-Cookie2（而不是Set-Cookie）。如果客户端从同一个响应中既获得了Set-Cookie首部，又获得了Set-Cookie2首部，就会忽略老的Set-Cookie首部。

如果客户端既支持版本0又支持版本1的Cookie，但从服务器获得的是版本0的Set-Cookie首部，就应该带着版本0的Cookie首部发送Cookie。但客户端还应该发送 `Cookie2: $Version="1"` 来告知服务器它是可以升级的。

### Cookie与会话跟踪

Cookie可以在用户与某个Web站点进行多项事务处理时对用户进行跟踪。电子商务网站通常使用会话Cookie在用户浏览时记录购物车信息。以Amazon.com为例，在浏览器中输入 `http://www.amazon.com` 时，启动了一个事务链，在这些事务中Web服务器会通过一系列的重定向、URL重写以及Cookie设置来附加标识信息。

图11-5显示了从一次Amazon.com访问中捕获的事务序列：
- **图11-5a**：浏览器首次请求Amazon.com根页面。
- **图11-5b**：服务器将客户端重定向到一个电子商务软件的URL上。
- **图11-5c**：客户端对重定向的URL发起一个请求。
- **图11-5d**：服务器在响应上贴上两个会话Cookie，并将用户重定向到另一个URL，这样客户端就会用这些附加的Cookie再次发出请求。这个新的URL是个胖URL，即有些状态嵌入到URL中去了。如果客户端禁止了Cookie，只要用户一直跟随着Amazon.com产生的胖URL链接，不离开网站，仍然可以实现一些基本的标识功能。
- **图11-5e**：客户端请求新的URL，但现在会传送两个附加的Cookie。
- **图11-5f**：服务器重定向到home.html页面，并附加另外两个Cookie。
- **图11-5g**：客户端获取home.html页面并将所有四个Cookie都发送出去。
- **图11-5h**：服务器回送内容。

### Cookie与缓存

缓存与Cookie事务有关的文档时要特别小心。你不会希望给用户分配一个过去某些用户用过的Cookie，或者更糟糕的是，向一个用户展示其他人私有文档的内容。以下是处理缓存时的一些指导性规则：

- **不可缓存文档**：文档的所有者最清楚文档是否是不可缓存的。如果文档不可缓存，就显式地标明——具体来说，如果除了Set-Cookie首部之外文档是可缓存的，就使用 `Cache-Control: no-cache="Set-Cookie"`。另一种更通用的做法是为可缓存文档使用 `Cache-Control: public`，这有助于节省Web中的带宽。
- **小心缓存Set-Cookie首部**：如果响应中有Set-Cookie首部，就可以对主体进行缓存（除非被告知不要这么做），但要特别注意对Set-Cookie首部的缓存。如果向多个用户发送了相同的Set-Cookie首部，可能会破坏用户的定位。有些缓存在将响应缓存起来之前会删除Set-Cookie首部，但这也会引发一些问题，因为在没有缓存的时候，通常都会有Cookie贴在客户端上，但由缓存提供服务的客户端就不会有Cookie了。强制缓存与原始服务器重新验证每条请求，并将返回的所有Set-Cookie首部都合并到客户端的响应中去，就可以改善这种状况。原始服务器可以通过向缓存的副本中添加这个首部来要求进行这种再验证：
  ```http
  Cache-Control: must-revalidate, max-age=0
  ```
  即便内容实际上是可以缓存的，比较保守的缓存可能也会拒绝缓存所有包含Set-Cookie首部的响应。有些缓存允许使用缓存Set-Cookie图片，但不缓存文本的模式。
- **小心处理带有Cookie首部的请求**：带有Cookie首部的请求到达时，就在提示我们，得到的结果可能是私有的。一定要将私有内容标识为不可缓存的，但有些服务器可能会犯错，没有将此内容标记为不可缓存的。有些响应文档对应于携带Cookie首部的请求，保守的缓存可能会选择不去缓存这些响应文档。同样，有些缓存允许使用缓存Cookie图片，而不缓存文本的模式。得到更广泛接受的策略是缓存带有Cookie首部的图片，将过期时间设置为零，强制每次都进行再验证。

### Cookie、安全性和隐私

虽然Cookie可以被禁用，并且可以通过日志分析或其他方式实现大部分跟踪记录，所以Cookie自身并不是很大的安全隐患。实际上，可以通过提供一个标准的审查方法在远程数据库中保存个人信息，并将匿名Cookie作为键值，来降低客户端到服务器的敏感数据传送频率。

但是，潜在的滥用情况总是存在的，所以在处理隐私和用户跟踪信息时，最好还是要小心一些。第三方Web站点使用持久Cookie来跟踪用户就是一种最大的滥用。将这种做法与IP地址和Referer首部信息结合在一起，这些营销公司就可以构建起相当精确的用户档案和浏览模式信息。

尽管有这么多负面的宣传，人们通常还是认为，如果能够小心地确认在向谁提供私人信息，并仔细查阅站点的隐私政策，那么，Cookie会话处理和事务处理所带来的便利性要比大部分风险更重要。

1998年，计算机事故咨询能力组织（CIAC）（美国能源部的一部分）编写了一份关于过度使用Cookie的风险评估报告。以下是那份报告的摘要：

- **问题**：Cookie是Web服务器用来识别Web用户的小块数据。关于Cookie功能的流行说法和谣言之间的比例已经达到了令人不解的地步，使用户恐惧，使管理者担忧。
- **脆弱性评估**：由于使用Web浏览器Cookie使得系统被破坏或窃听，从而带来的系统脆弱性本质上并不存在。Cookie只能告知Web服务器你以前是否到过某个网站，并在下次访问时将来自Web服务器的一些短小信息（比如用户编码）回送给它。大部分Cookie只会持续到用户退出浏览器为止，然后就会被销毁。第二种名为持久Cookie的Cookie有一个过期日期，会在你的硬盘上存储到那个日期为止。无论用户何时返回一个站点，都可以通过持久Cookie来识别其身份，以便跟踪用户的浏览习惯。你来自何处，以及访问过哪些Web页面等信息已经存储在Web服务器的日志文件中了，也可以用这些信息来跟踪用户的浏览习惯，只是使用Cookie更简单一些罢了。

### 更多信息

这里还有几份有用的资源，介绍了更多与Cookie有关的信息：
- **Cookies**：Simon St.Laurent著，McGraw-Hill公司出版。
- **RFC 2965**：“HTTP State Management Mechanism”（“HTTP状态管理机制”）（废弃了RFC 2109）。
- **RFC 2964**：“Use of HTTP State Management”（“HTTP状态管理的用途”）。
- **Netscape文档**：“Persistent Client State: HTTP Cookies”（“持久的客户端状态：HTTP Cookies”）描述了现在仍在广泛使用的HTTP Cookie的最初形式。

### 第12章
#### 基本认证机制

有数百万的人在用Web进行私人事务处理，访问私有的数据。通过Web可以很方便地访问这些信息，但仅仅是方便访问还是不够的。我们要保证只有特定的人能看到我们的敏感信息并且能够执行我们的特权事务。并不是所有的信息都能够公开发布的。未授权用户无法查看我们的在线旅游档案，也不能在未经许可的情况下向Web站点发布文档，这会让我们感觉舒服一些。我们还要确保，组织中未经授权或不怀好意的用户无法访问敏感信息。