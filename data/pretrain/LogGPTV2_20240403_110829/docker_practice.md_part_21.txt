fee1b7b9dde1 redis:latest "/entrypoint.sh redi 1
9 minutes ago Up 5 minutes 6379/tcp 084/r
edis_1
可以看到，执行结果跟预期的一样。
但是如果指定一个不存在的标签的话来运行容器会报错。
rio@085:~$ sudo docker -H 192.168.1.83:2376 run --name redis_0 -d
-e constraint:label_name==0 redis
FATA[0000] Error response from daemon: unable to find a node tha
t satisfies label_name==0
260
过滤器
Affinity Filter
通过使用 Affinity Filter，可以让一个容器紧挨着另一个容器启动，也就是说让两个
容器在同一个节点上面启动。
现在其中一台机器上面启动一个 redis 容器。
rio@085:~$ sudo docker -H 192.168.1.83:2376 run -d --name redis
redis
ea13eddf667992c5d8296557d3c282dd8484bd262c81e2b5af061cdd6c82158d
rio@085:~$ sudo docker -H 192.168.1.83:2376 ps
CONTAINER ID IMAGE COMMAND C
REATED STATUS PORTS N
AMES
ea13eddf6679 redis:latest /entrypoint.sh redis 2
4 minutes ago Up Less than a second 6379/tcp 0
83/redis
然后再次启动两个 redis 容器。
rio@085:~$ sudo docker -H 192.168.1.83:2376 run -d --name redis
_1 -e affinity:container==redis redis
bac50c2e955211047a745008fd1086eaa16d7ae4f33c192f50412e8dcd0a14cd
rio@085:~$ sudo docker -H 192.168.1.83:2376 run -d --name redis
_1 -e affinity:container==redis redis
bac50c2e955211047a745008fd1086eaa16d7ae4f33c192f50412e8dcd0a14cd
现在来查看下运行结果,可以看到三个容器都是在一台机器上运行
261
过滤器
rio@085:~$ sudo docker -H 192.168.1.83:2376 ps
CONTAINER ID IMAGE COMMAND C
REATED STATUS PORTS N
AMES
449ed25ad239 redis:latest /entrypoint.sh redis 2
4 minutes ago Up Less than a second 6379/tcp 0
83/redis_2
bac50c2e9552 redis:latest /entrypoint.sh redis 2
5 minutes ago Up 10 seconds 6379/tcp 0
83/redis_1
ea13eddf6679 redis:latest /entrypoint.sh redis 2
8 minutes ago Up 3 minutes 6379/tcp 0
83/redis
通过 -e affinity:image=image_name 命令可以指定只有已经下载
了 image_name 镜像的机器才运行容器
sudo docker –H 192.168.1.83:2376 run –name redis1 –d –e affinity
:image==redis redis
redis1 这个容器只会在已经下载了 redis 镜像的节点上运行。
sudo docker -H 192.168.1.83:2376 run -d --name redis -e affinity
:image==~redis redis
这条命令达到的效果是：在有 redis 镜像的节点上面启动一个名字叫做 redis 的容
器，如果每个节点上面都没有 redis 容器，就按照默认的策略启动 redis 容器。
Port Filter
Port 也会被认为是一个唯一的资源
sudo docker -H 192.168.1.83:2376 run -d -p 80:80 nginx
执行完这条命令，之后任何使用 80 端口的容器都是启动失败。
262
过滤器
263
Etcd 项目
etcd
etcd 是 CoreOS 团队发起的一个管理配置信息和服务发现（service discovery）的
项目，在这一章里面，我们将介绍该项目的目标，安装和使用，以及实现的技术。
264
简介
什么是 etcd
etcd 是 CoreOS 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用
的分布式键值（key-value）数据库，基于 Go 语言实现。我们知道，在分布式系统
中，各种服务的配置信息的管理分享，服务的发现是一个很基本同时也是很重要的
问题。CoreOS 项目就希望基于 etcd 来解决这一问题。
etcd 目前在 github.com/coreos/etcd 进行维护，即将发布 2.0.0 版本。
受到 Apache ZooKeeper 项目和 doozer 项目的启发，etcd 在设计的时候重点考虑
了下面四个要素：
简单：支持 REST 风格的 HTTP+JSON API
安全：支持 HTTPS 方式的访问
快速：支持并发 1k/s 的写操作
可靠：支持分布式结构，基于 Raft 的一致性算法
注：Apache ZooKeeper 是一套知名的分布式系统中进行同步和一致性管理的工
具。 注：doozer 则是一个一致性分布式数据库。 注：Raft 是一套通过选举主节点
来实现分布式系统一致性的算法，相比于大名鼎鼎的 Paxos 算法，它的过程更容易
被人理解，由 Stanford 大学的 Diego Ongaro 和 John Ousterhout 提出。更多细节
可以参考 raftconsensus.github.io。
一般情况下，用户使用 etcd 可以在多个节点上启动多个实例，并添加它们为一个
集群。同一个集群中的 etcd 实例将会保持彼此信息的一致性。
265
安装
安装
etcd 基于 Go 语言实现，因此，用户可以从 项目主页 下载源代码自行编译，也可
以下载编译好的二进制文件，甚至直接使用制作好的 Docker 镜像文件来体验。
二进制文件方式下载
编译好的二进制文件都在 github.com/coreos/etcd/releases 页面，用户可以选择需
要的版本，或通过下载工具下载。
例如，下面的命令使用 curl 工具下载压缩包，并解压。
curl -L https://github.com/coreos/etcd/releases/download/v2.0.0
-rc.1/etcd-v2.0.0-rc.1-linux-amd64.tar.gz -o etcd-v2.0.0-rc.1-li
nux-amd64.tar.gz
tar xzvf etcd-v2.0.0-rc.1-linux-amd64.tar.gz
cd etcd-v2.0.0-rc.1-linux-amd64
解压后，可以看到文件包括
$ ls
etcd etcdctl etcd-migrate README-etcdctl.md README.md
其中 etcd 是服务主文件，etcdctl 是提供给用户的命令客户端，etcd-migrate 负责
进行迁移。
推荐通过下面的命令将三个文件都放到系统可执行目录 /usr/local/bin/ 或
/usr/bin/ 。
$ sudo cp etcd* /usr/local/bin/
运行 etcd，将默认组建一个两个节点的集群。数据库服务端默认监听在 2379 和
4001 端口，etcd 实例监听在 2380 和 7001 端口。显示类似如下的信息：
$ ./etcd
266
安装
2014/12/31 14:52:09 no data-dir provided, using default data-dir
./default.etcd
2014/12/31 14:52:09 etcd: listening for peers on http://localhos
t:2380
2014/12/31 14:52:09 etcd: listening for peers on http://localhos
t:7001
2014/12/31 14:52:09 etcd: listening for client requests on http:
//localhost:2379
2014/12/31 14:52:09 etcd: listening for client requests on http:
//localhost:4001
2014/12/31 14:52:09 etcdserver: name = default
2014/12/31 14:52:09 etcdserver: data dir = default.etcd
2014/12/31 14:52:09 etcdserver: snapshot count = 10000
2014/12/31 14:52:09 etcdserver: advertise client URLs = http://l
ocalhost:2379,http://localhost:4001
2014/12/31 14:52:09 etcdserver: initial advertise peer URLs = ht
tp://localhost:2380,http://localhost:7001
2014/12/31 14:52:09 etcdserver: initial cluster = default=http:/
/localhost:2380,default=http://localhost:7001
2014/12/31 14:52:10 etcdserver: start member ce2a822cea30bfca in
cluster 7e27652122e8b2ae
2014/12/31 14:52:10 raft: ce2a822cea30bfca became follower at te
rm 0
2014/12/31 14:52:10 raft: newRaft ce2a822cea30bfca [peers: [], t
erm: 0, commit: 0, lastindex: 0, lastterm: 0]
2014/12/31 14:52:10 raft: ce2a822cea30bfca became follower at te
rm 1
2014/12/31 14:52:10 etcdserver: added local member ce2a822cea30b
fca [http://localhost:2380 http://localhost:7001] to cluster 7e2
7652122e8b2ae
2014/12/31 14:52:11 raft: ce2a822cea30bfca is starting a new ele
ction at term 1
2014/12/31 14:52:11 raft: ce2a822cea30bfca became candidate at t
erm 2
2014/12/31 14:52:11 raft: ce2a822cea30bfca received vote from ce
2a822cea30bfca at term 2
2014/12/31 14:52:11 raft: ce2a822cea30bfca became leader at term
2
2014/12/31 14:52:11 raft.node: ce2a822cea30bfca elected leader c
e2a822cea30bfca at term 2
267
安装
2014/12/31 14:52:11 etcdserver: published {Name:default ClientUR
Ls:[http://localhost:2379 http://localhost:4001]} to cluster 7e2
7652122e8b2ae
此时，可以使用 etcdctl 命令进行测试，设置和获取键值 testkey: "hello
world" ，检查 etcd 服务是否启动成功：
$ ./etcdctl set testkey "hello world"
hello world
$ ./etcdctl get testkey
hello world
说明 etcd 服务已经成功启动了。
当然，也可以通过 HTTP 访问本地 2379 或 4001 端口的方式来进行操作，例如查
看 testkey 的值：
$ curl -L http://localhost:4001/v2/keys/testkey
{"action":"get","node":{"key":"/testkey","value":"hello world","
modifiedIndex":3,"createdIndex":3}}
Docker 镜像方式下载
镜像名称为 quay.io/coreos/etcd:v2.0.0_rc.1，可以通过下面的命令启动 etcd 服务
监听到 4001 端口。
$ sudo docker run -p 4001:4001 -v /etc/ssl/certs/:/etc/ssl/certs
/ quay.io/coreos/etcd:v2.0.0_rc.1
268
使用 etcdctl
使用 etcdctl
etcdctl 是一个命令行客户端，它能提供一些简洁的命令，供用户直接跟 etcd 服务
打交道，而无需基于 HTTP API 方式。这在某些情况下将很方便，例如用户对服务
进行测试或者手动修改数据库内容。我们也推荐在刚接触 etcd 时通过 etcdctl 命令
来熟悉相关的操作，这些操作跟 HTTP API 实际上是对应的。
etcd 项目二进制发行包中已经包含了 etcdctl 工具，没有的话，可以从
github.com/coreos/etcd/releases 下载。
etcdctl 支持如下的命令，大体上分为数据库操作和非数据库操作两类，后面将分别
进行解释。
$ etcdctl -h
NAME:
etcdctl - A simple command line client for etcd.
USAGE:
etcdctl [global options] command [command options] [arguments
...]
VERSION:
2.0.0-rc.1
COMMANDS:
backup backup an etcd directory
mk make a new key with a given value
mkdir make a new directory
rm remove a key
rmdir removes the key if it is an empty directory or a key
-value pair
get retrieve the value of a key
ls retrieve a directory
set set the value of a key
setdir create a new or existing directory
update update an existing key with a given value
updatedir update an existing directory
watch watch a key for changes
269
使用 etcdctl
exec-watch watch a key for changes and exec an executable
member member add, remove and list subcommands
help, h Shows a list of commands or help for one command
GLOBAL OPTIONS:
--debug output cURL commands which can be used to
reproduce the request
--no-sync don't synchronize cluster information be
fore sending request
--output, -o 'simple' output response in the given format
(`simple` or `json`)
--peers, -C a comma-delimited list of machine add
resses in the cluster (default: "127.0.0.1:4001")
--cert-file identify HTTPS client using this SSL
certificate file
--key-file identify HTTPS client using this SSL k
ey file
--ca-file verify certificates of HTTPS-enabled se
rvers using this CA bundle
--help, -h show help
--version, -v print the version
数据库操作
数据库操作围绕对键值和目录的 CRUD （符合 REST 风格的一套操作：Create）
完整生命周期的管理。
etcd 在键的组织上采用了层次化的空间结构（类似于文件系统中目录的概念），用
户指定的键可以为单独的名字，如 testkey ，此时实际上放在根目录 / 下面，
也可以为指定目录结构，如 cluster1/node2/testkey ，则将创建相应的目录结
构。
注：CRUD 即 Create, Read, Update, Delete，是符合 REST 风格的一套 API 操
作。
set
指定某个键的值。例如
270
使用 etcdctl
$ etcdctl set /testdir/testkey "Hello world"
Hello world
支持的选项包括：
--ttl '0' 该键值的超时时间（单位为秒），不配置（默认为 0）则
永不超时
--swap-with-value value 若该键现在的值是 value，则进行设置操作
--swap-with-index '0' 若该键现在的索引值是指定索引，则进行设置操作
get
获取指定键的值。例如
$ etcdctl set testkey hello
hello
$ etcdctl update testkey world
world
当键不存在时，则会报错。例如
$ etcdctl get testkey2
Error: 100: Key not found (/testkey2) [1]
支持的选项为
--sort 对结果进行排序
--consistent 将请求发给主节点，保证获取内容的一致性
update
当键存在时，更新值内容。例如
271
使用 etcdctl