  -s    disable symbol table
  -strictdups int
        sanity check duplicate symbol contents during object file reading 
(1=warn 2=err).
  -tmpdir directory
        use directory for temporary files
  -v    print link trace
  -w    disable DWARF generation
func transformLink(args []string) ([]string, error) {
  // We can't split by the ".a" extension, because cached object files
  // lack any extension.
  flags, args := splitFlagsFromArgs(args)
  newImportCfg, err := processImportCfg(flags)
  if err != nil {
    return nil, err
  }
  // TODO: unify this logic with the -X handling when using -literals.
  // We should be able to handle both cases via the syntax tree.
  //
  // Make sure -X works with obfuscated identifiers.
  // To cover both obfuscated and non-obfuscated names,
  // duplicate each flag with a obfuscated version.
  flagValueIter(flags, "-X", func(val string) {
    // val is in the form of "pkg.name=str"
    i := strings.IndexByte(val, '=')
    if i <= 0 {
      return
    }
    name := val[:i]
    str := val[i+1:]
    j := strings.LastIndexByte(name, '.')
    if j <= 0 {
      return
    }
    pkg := name[:j]
    name = name[j+1:]
    // If the package path is "main", it's the current top-level
    // package we are linking.
    // Otherwise, find it in the cache.
    lpkg := curPkg
    if pkg != "main" {
      lpkg = cache.ListedPackages[pkg]
    }
    if lpkg == nil {
      // We couldn't find the package.
      // Perhaps a typo, perhaps not part of the build.
      // cmd/link ignores those, so we should too.
      return
    }
    // As before, the main package must remain as "main".
    newPkg := pkg
    if pkg != "main" {
      newPkg = lpkg.obfuscatedImportPath()
    }
    newName := hashWithPackage(lpkg, name)
    flags = append(flags, fmt.Sprintf("-X=%s.%s=%s", newPkg, newName, str))
  })
  // Starting in Go 1.17, Go's version is implicitly injected by the linker.
  // It's the same method as -X, so we can override it with an extra flag.
  flags = append(flags, "-X=runtime.buildVersion=unknown")
  // Ensure we strip the -buildid flag, to not leak any build IDs for the
  // link operation or the main package's compilation.
  flags = flagSetValue(flags, "-buildid", "")
其他
garble的混淆
混淆package，file，struct使用base64哈希，取前8位，碰撞的概率是0.00001%
  // Strip debug information and symbol tables.
  flags = append(flags, "-w", "-s")
  flags = flagSetValue(flags, "-importcfg", newImportCfg)
  return append(flags, args...), nil
}
func hashWithPackage(pkg *listedPackage, name string) string {
  if !flagSeed.present() {
    return hashWithCustomSalt(pkg.GarbleActionID, name)
  }
  // Use a separator at the end of ImportPath as a salt,
  // to ensure that "pkgfoo.bar" and "pkg.foobar" don't both hash
  // as the same string "pkgfoobar".
  return hashWithCustomSalt([]byte(pkg.ImportPath+"|"), name)
}
func hashWithStruct(strct *types.Struct, fieldName string) string {
  // TODO: We should probably strip field tags here.
  // Do we need to do anything else to make a
  // struct type "canonical"?
  fieldsSalt := []byte(strct.String())
  if !flagSeed.present() {
    fieldsSalt = addGarbleToHash(fieldsSalt)
  }
  return hashWithCustomSalt(fieldsSalt, fieldName)
}
// hashWithCustomSalt returns a hashed version of name,
// including the provided salt as well as opts.Seed into the hash input.
//
// The result is always four bytes long. If the input was a valid identifier,
// the output remains equally exported or unexported. Note that this process is
// reproducible, but not reversible.
func hashWithCustomSalt(salt []byte, name string) string {
  if len(salt) == 0 {
    panic("hashWithCustomSalt: empty salt")
  }
  if name == "" {
    panic("hashWithCustomSalt: empty name")
  }
  // hashLength is the number of base64 characters to use for the final
  // hashed name.
  // This needs to be long enough to realistically avoid hash collisions,
  // but short enough to not bloat binary sizes.
  // The namespace for collisions is generally a single package, since
  // that's where most hashed names are namespaced to.
  // Using a "hash collision" formula, and taking a generous estimate of a
  // package having 10k names, we get the following probabilities.
  // Most packages will have far fewer names, but some packages are huge,
  // especially generated ones.
  // We also have slightly fewer bits in practice, since the base64
  // charset has 'z' twice, and the first base64 char is coerced into a
  // valid Go identifier. So we must be conservative.
  // Remember that base64 stores 6 bits per encoded byte.
  // The probability numbers are approximated.
  //
  //    length (base64) | length (bits) | collision probability
  //    -------------------------------------------------------
  //           4               24                   ~95%
  //           5               30                    ~4%
  //           6               36                 ~0.07%
  //           7               42                ~0.001%
  //           8               48              ~0.00001%
  //
  // We want collisions to be practically impossible, so we choose 8 to
  // end up with a chance of about 1 in a million even when a package has
  // thousands of obfuscated names.
  const hashLength = 8
  hasher.Reset()
  hasher.Write(salt)
  hasher.Write(flagSeed.bytes)
  io.WriteString(hasher, name)
  nameBase64.Encode(b64SumBuffer[:], hasher.Sum(sumBuffer[:0]))
  b64Name := b64SumBuffer[:hashLength]
  // Even if we are hashing a package path, we still want the result to be
  // a valid identifier, since we'll use it as the package name too.
  if isDigit(b64Name[0]) {
    // Turn "3foo" into "Dfoo".
    // Similar to toLower, since uppercase letters go after digits
    // in the ASCII table.
    b64Name[0] += 'A' - '0'
  }
  // Keep the result equally exported or not, if it was an identifier.
  if !token.IsIdentifier(name) {
    return string(b64Name)
  }
  if token.IsExported(name) {
    if b64Name[0] == '_' {
      // Turn "_foo" into "Zfoo".
      b64Name[0] = 'Z'
    } else if isLower(b64Name[0]) {
      // Turn "afoo" into "Afoo".
      b64Name[0] = toUpper(b64Name[0])
    }
  } else {
    if isUpper(b64Name[0]) {
      // Turn "Afoo" into "afoo".
      b64Name[0] = toLower(b64Name[0])
    }
  }
  return string(b64Name)
}
文本的混淆
literals.go
通过AST寻找到的文本的token会替换为一个函数CallExpr
支持的混淆算法类型，每个算法会返回一个抽象语法树的解密函数
在garble处理文本混淆时，这些算法是随机进行处理。
看一个简单的 `simple`
func randOperator() token.Token {
  operatorTokens := [...]token.Token{token.XOR, token.ADD, token.SUB}
  return operatorTokens[mathrand.Intn(len(operatorTokens))]
}
func evalOperator(t token.Token, x, y byte) byte {
  switch t {
  case token.XOR:
    return x ^ y
  case token.ADD:
    return x + y
  case token.SUB:
    return x - y
  default:
    panic(fmt.Sprintf("unknown operator: %s", t))
  }
}
func (simple) obfuscate(data []byte) *ast.BlockStmt {
  // 随机生成key
  key := make([]byte, len(data))
总结
garble会介入go编译的asm、compile、link阶段，不是修改go编译器，而是在正常调用go的编译器之
前，对参数进行修改，对go runtime、go代码进行一些修改，达到混淆的效果。
比较有亮点的是它能够修改go runtime，去除一些不必要的内容，能对抽象语法树中的文本混淆。
缺点是编译的时候，总有有一些go自带的东西残留，混淆不彻底，修改了原始代码，难保会影响程序的
正常运行。
参考
https://paper.seebug.org/1749/
https://www.anquanke.com/post/id/241594
  genRandBytes(key)
  op := randOperator() // 随机取一个操作符 + - *
  for i, b := range key {
    data[i] = evalOperator(op, data[i], b) // 操作符进行运算
  }
  // data是加密后的函数，key是key，传入下面的ast语法树即可
  return ah.BlockStmt(
    &ast.AssignStmt{
      Lhs: []ast.Expr{ast.NewIdent("key")},
      Tok: token.DEFINE,
      Rhs: []ast.Expr{ah.DataToByteSlice(key)},
    },
    &ast.AssignStmt{
      Lhs: []ast.Expr{ast.NewIdent("data")},
      Tok: token.DEFINE,
      Rhs: []ast.Expr{ah.DataToByteSlice(data)},
    },
    &ast.RangeStmt{
      Key:   ast.NewIdent("i"),
      Value: ast.NewIdent("b"),
      Tok:   token.DEFINE,
      X:     ast.NewIdent("key"),
      Body: &ast.BlockStmt{List: []ast.Stmt{
        &ast.AssignStmt{
          Lhs: []ast.Expr{ah.IndexExpr("data", ast.NewIdent("i"))},
          Tok: token.ASSIGN,
          Rhs: []ast.Expr{operatorToReversedBinaryExpr(op, ah.IndexExpr("data", 
ast.NewIdent("i")), ast.NewIdent("b"))},
        },
      }},
    },
  )
}