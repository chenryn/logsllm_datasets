f := login(x);
string y := β;
v := verify(f, y);
γ := v;
Pre-processing and conversion to SSA: Our analysis
works on code that has already been pre-processed in the
following way: (1) operators are translated into functions (e.g.,
a + b becomes add(a, b)), (2) only one function is allowed
per assignment, i.e., assignments of complex expressions are
broken into several assignments, (3) conditions on control-ﬂow
commands (if and while) refer to a single boolean variable.
We also convert a program into the Static Single Assignment
(SSA) format using standard methods [14]. SSA is a known
intermediate representation form for programs, in which every
variable is assigned exactly once. Variables being assigned
more than once are renamed (with a different name for each
assignment: typically the original name with a subscript). For
variables that are modiﬁed in the body of branching state-
ments (e.g. conditionals and loops), the translation algorithm
generates a new variable name at the join points (at the end
of the conditional or the loop). Moreover, a new function φ is
introduced, which takes as input the variable values from all
the branches, and outputs the value from the branch that was
taken. During the translation, we additionally annotate the φ
function with the conditional variable of the branch to which
the φ function is associated. The technique for computing SSA
form of a program has been proved to be tractable. For more
information on it refer to [14], [15].
Example 2. Authentication program in SSA format:
struct x1 := α;
bool c1 := iscomplete(x1);
string f0;
bool v0;
depends(β, c1);
if c1 then
c2 := hascred (x1);
if c2 then
f1 := credential (x1);
else
f2 := lastname(x1);
f3 := φc2
v1 := validate(f3);
(f1, f2);
else
f4 := login(x1);
string y1 := β;
v2 := verify(f4, y1);
v3 := φc1
f5 := φc1
γ := v3;
(v1, v2);
(f3, f4);
else
f := lastname(x);
v := validate(f );
Note that the conditions are syntactically associated with
the φ-functions. Also, the depends command is generated
95
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
during the pre-processing and serves the purpose of making
the control dependence between channel β and variable c1
explicit, since the input occurs inside the conditional. This
will be further explained in the next section.
Expression Graph: An expression graph is an abstraction
for representing the set of expressions that may be assigned to
a variable (or to more variables), taking into consideration the
input channels and the constants that a program refers to. In
an expression graph nodes represent variables, constants and
I/O channels, whereas directed edges represent assignments.
The labels on the edges denote the functions used in the
assignments, while the subscripts indicate the indices of the
arguments from the parent nodes. Edges of φ-functions are
dashes as they are used to represent distinct paths that infor-
mation can follow during an execution, each path separately
creating a set of expressions. The control edge illustrates
that there is a control dependency between two nodes, the
parent being the variable representing the control expression.
Figure 1 shows the expression graph g associated with the
variable v3 of our program. For clarity, a control edge between
c1 and β is omitted, since c1 also causes a control dependency
in v3, and it will be analyzed anyway.
Fig. 1. Expression graph for variable v3 of authentication program
Policy Graph: Declassiﬁcation policies are also repre-
sented using graphs. In fact, a policy graph is similar to the
expression graphs associated with program variables, except
for some key differences, including: (1) nodes can be labeled
with “wildcards”, i.e., labels in the form ∗, (2) certain nodes
in the policy are marked as “ﬁnal nodes” (represented by
the double lined circle), representing expressions that can
be declassiﬁed. A declassiﬁcation policy consists of a graph
which might contain several disjoint components (to allow
multiple expressions to be released). The policy graph, d, for
our authentication program in Example 2 is given in Figure 2.
We know that information from either channels α and β cannot
directly ﬂow to the channel γ, the policy of Figure 2 allows
such a ﬂow under a few additional conditions. The following
operations are allowed:
two boolean checks on the user’s
record α (if it has a credential and if is a complete record),
two validation operations over user’s information (validation
through the credential or the last name), and a veriﬁcation of
the user’s login against a supplied password from channel β.
The ﬁnal nodes ∗1, ∗2, ∗3, ∗5 and ∗7 represent the expressions
that can be declassiﬁed.
96
Fig. 2. Policy graph for example of authentication program
Policy Matching: Now that we have both the program and
the policy graph, we can check if the program is safe. In our
program the (low) output γ is assigned the value of variable v3,
so what we now have to check is that the paths in the program
graph indicating the ﬂow of information from a high input to
v3 are safe, i.e., that they match at least one component of the
declassiﬁcation policy. This analysis is done in two stages:
ﬁrst all data dependencies of a node are checked, later in the
second stage the control dependencies are checked. The node
representing v3 in the graph has 3 information paths (deﬁned
in the next sections, not the standard concept of a path in a
graph) reaching it: (a) one that comes from channel α passing
through nodes x1, f1, f3 and v1, (b) another also coming from
α, but passing through f2 instead of f1, and the ﬁnal one (c)
coming from both α and β, converging on node v2. These
paths represent the three possible outcomes of the nested if
commands.
To determine that the node v3 is safe we will ﬁrst analyse
its parents. First, node v2, has only information path (c)
reaching it. This path matches the leftmost component of our
declassiﬁcation policy in Figure 2, and we say that node v2
simulates node ∗7, meaning that all expressions possibly held
by v2 are recognized by ∗7. Or, in other words, v2 ∼
∗7.
Because of this, this path to v2 is marked as data dependency
safe, and so is the node, since this is its only path reaching it
(note that the graphs are not exactly the same, our deﬁnition
of policy simulation handles this properly). Since v2 has no
additional control dependencies (the dependency with c1 is
treated for v3), we now know it is a safe node.
g,d
With (node) v2 being safe, we now analyse v1. This node
has two information paths (a) and (b) reaching it. We can see
that, for each path, v1 simulates a ﬁnal node of each of the
3-node components of the policy (∗3 and ∗5), on the bottom
of Figure 2. Thus, both paths are data dependency safe, and so
is the node itself. There is however a control dependency that
we have to consider, with c2 that reaches v1. But here node c2
simulates the ﬁnal node of the topmost policy component (∗1),
thus making it safe (it has no control dependencies or other
paths) and thus making v1 control dependency safe. Therefore,
we now know that v1 is a safe node.
We can now go back to v3. Since its two parent nodes are
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
safe, we know that v3 is a data dependency safe node, since
all the paths were covered. In order to demonstrate it is also
control dependency safe, we need to show that node c1 is safe,
this is done by showing that the node simulates a ﬁnal node
of a policy graph (∗2). Thus, v3 is a safe variable and the
program’s expression graph is deemed valid.
Second Example: We now provide a second example, that
will be referred to throughout the paper. This example involves
a policy which allows the declassiﬁcation of expressions
in a given recursive pattern, represented in the code by a
looping structure. For this, this example uses control context
annotations on the edges of the program expression graphs.
These annotations were omitted on the previous example,
for clarity. This example is inspired by another classical
need for declassiﬁcation: statistical calculations on secure data
(where high data should not be released but statistics on it
may be declassiﬁed). The program, given below (already pre-
processed), calculates the average of the entries in a given data
structure. Channel α returns the next element of a sequence
of salaries of an organization. The code below fetches all the
salaries from the structure, calculates their average, and then
sends the result to output channel γ.
Example 3. Average calculation program in SSA format:
int a1 := 0;
int i1 := 0;
int l1 := length(α);
bool c1 := leq(i1, l1);
while (c3 := φc3
a3 := φc3
i3 := φc3
c3) do
(c1, c2);
(a1, a2);
(i1, i2);
int t1 := α;
a2 := add(a3, t1);
i2 := add(i3, 1);
c2 := leq(i2, l1);
a4 := div(a3, l1);
γ := a4;
Fig. 3. Expression graph for variable a4
Fig. 4. Expression graph for variable c3
Figure 5. This policy allows for the release of a sequence
of additions over entries from input α. The ﬁnal node ∗3
represents the sum expression.
The policy contains an additional constraint
that states
that no individual α-values should reach ∗3 more than once
(every access to α must be unique). Assuming d is the policy
graph, we say that (α, ∗3) ∈ uni(d). This is called an input
uniqueness relation, we discuss how to express this in the next
section.
We also assume that there is an omitted component of the
policy graph that speciﬁes that the expression length(α) can
be declassiﬁed.
Note that the φ-functions are placed along with the loop
condition and the program semantics would require that the
φ assignment be executed even if the loop is not taken, but
also once after each iteration [16]. Again, the output channel γ
receives the value of a4, so we need to prove that a4 is safe.
To do so, we produce the expression graph associated to it
(Figure 3). For the sake of clarity, Figure 3 only includes data-
dependencies of a4. Since we also have to consider the control
dependencies, and the only control dependency of a4 goes
through c3, we represent the graph associated with node c3
separately in Figure 4. The numeric annotations on the edges
indicate control contexts in which assignments are performed.
With that, the assignments that happen within the loop have
its corresponding edges marked with 1. The other edges are
part of control context 0, with their annotations omitted.
The policy graph for the average example is given in
Fig. 5. Declassiﬁcation policy graph for average example
This example program is deemed valid by the policy. Node
a3 simulates node ∗3 on the policy and the α-uniqueness
constraint is satisﬁed through the use of the control context
annotations. Variable l1 holds length(α), which is also autho-
rized as previously mentioned. This makes c3 being marked
as safe, which in turn makes a3 control dependency safe.
Therefore, a4 is marked as safe. The mechanisms used in this
process are detailed in the next sections.
It is important to note that, since our approach works as
a static analyzer, it is beyond the focus of our representation
mechanism (i.e. graphs) to represent the run-time behaviour
of the program, including the number of times a given loop
97
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
runs. This problem, however, can be treated by a combination
of static analysis and runtime enforcement, discussed in Sec-
tion VIII, but out of the scope of this paper, aimed at static
analysis only.
III. LANGUAGE: SYNTAX AND SEMANTICS
In this section we introduce the syntax and semantics of our
language, we present programs’ expression graphs and how
they are created, together with a soundness theorem. Finally,
we present the declassiﬁcation policies.
Program Syntax and Semantics: Var is a set of variables,
x, y, z, c, range over Var and may have subscripts; c is usually
a boolean variable. Additional IO variables (IO = In ∪ Out)
represent input/output channels. We use α, β to denote input
channels, γ, δ to denote output channels, and θ to range over
all of IO. We additionally use ρ to range over Var +IO. Input
channels are regarded as streams of values and are indexed to
indicate speciﬁc input values; e.g., αn denotes the n-th input
value of input channel α.
Functions are deﬁned the usual way. Constants are functions
of arity 0, and we use N to denote them. Expressions are
obtained by combining functions, variables (also IO) and
constants in the usual way.
We use a simple imperative language with assignment,
conditionals and loops, already translated to SSA form. To
simplify the presentation, we assume that all operators are
applied using preﬁx notation (e.g., writing add(a, b) instead
of a + b), with at most one function per assignment (no
nesting); also, expressions on conditionals refer to a single
boolean variable. Any program can be translated to this format
in a straightforward manner. Regarding the SSA translation,
(a, b), where c is the
φ-functions always have the form x := φc
conditional variable that generated that φ-function. In while
expressions, C represents the φ-functions added by the SSA
translation, which are evaluated once if the loop is not taken,
and at every iteration otherwise.
Deﬁnition 4. A program C ∈ P rog is deﬁned by the following
syntax:
C ::= skip | x := α | γ := x | x := f (y1, . . . , yk
)
| x := φc
| if c then C1 else C2 | while C ; c do C
(a, b) | depends(θ, c) | C1 ; C2
The command depends(θ, c) is a special command that
helps our non-standard semantics keep track of control de-