could control a Windows Vista machine by playing sound to Speech
Recognition [28]. However, since the attack could not bypass UAC
and assumed Speech Recognition was already enabled, it was con-
sidered a minor bug at that time. Compared with this attack, our
attack (attack #1) does not require Speech Recognition to be enabled
before the attack, and we can bypass UAC on Windows 7 through
8.1 (due to policy changes in UAC [26]).
Just before the release of Windows 7, there was a UAC bypass
attack [10] that exploited the special capability of Explorer.exe
to write to system directories. In this attack, a malware process will
attach to Explorer.exe, inject code, and exploit its capability to
write to system directories. Our attack #2 follows the same strategy,
but instead of using low level function WriteProcessMemory() to
inject code into Explorer.exe, we used the accessibility library to
simply click the “OK” button.
Attacks on iOS. Recently, it was reported [11] that Siri in iOS 7
can be exploited to bypass the lock screen and send email, SMS,
post on Twitter and Facebook, make phone calls, etc. We referred to
this attack as attack #5 in the vulnerability section.
Although the accessibility library is a private API that is not
usable by regular app developers, the threat is real. Last year, an
attack [33] showed that it is possible to circumvent the Apple App
Store review process by successfully publishing an App Store app
that invoked private API calls.
Attacks on Android. In Android, there have been many attacks on
the permissions [7, 9, 13, 16, 34] and private information [18, 36] of
an app that demonstrate data leakage through Android’s IPC channel.
To address these problems, many mechanisms [6, 12, 16, 20] have
been proposed. Unfortunately, since all of the proposed mechanisms
were focused on the oﬃcial IPC channel, they are not able to prevent
attacks through accessibility libraries. Furthermore, our attacks can
steal the capabilities and private information of other apps.
7 Conclusion
In compliance with the amendment to the Rehabilitation Act of
1973, software vendors have been continuously adding accessibility
features to their OSs. As the technology advances, accessibility
features have become complex enough to comprise a complete I/O
subsystem on a platform. In this paper, we performed an analysis of
the security of accessibility features on four popular platforms. We
discovered vulnerabilities that led to twelve practical attacks that are
enabled via accessibility features. Further analysis shows that the
root cause of the problem is due to the design and implementation of
a11y support requiring trade-oﬀs between compatibility, usability,
and security. We conclude with proposing several recommendations
to either make the implementation of all necessary security checks
easier, or to alleviate the impact of incomplete checks.
Acknowledgments
The authors would like to thank the anonymous reviewers and
our shepherd, Trent Jaeger, for their help and feedback, as well
as our operations staﬀ for their proofreading eﬀorts. This mate-
rial is based upon work supported in part by the National Science
Foundation under Grants No. CNS-1017265, CNS-0831300, and
CNS-1149051, by the Oﬃce of Naval Research under Grant No.
N000140911042, by the Department of Homeland Security under
contract No. N66001-12-C-0133, and by the United States Air Force
under Contract No. FA8650-10-C-7025. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views of the
113National Science Foundation, the Oﬃce of Naval Research, the
Department of Homeland Security, or the United States Air Force.
References
[1] Android Developers. Security tips. http://developer.
android.com/training/articles/security-
tips.html.
Inc.
Accessibility.
[2] Apple,
http://www.apple.com/
accessibility/resources/, .
[3] Apple,
Inc.
The
https://
developer.apple.com/library/ios/documentation/
iphone/conceptual/iphoneosprogrammingguide/
TheiOSEnvironment/TheiOSEnvironment.html, .
environment.
ios
[4] O. Begemann.
in iOS
http://oleb.net/blog/2012/10/remote-view-
Remote View Controllers
6.
controllers-in-ios-6/.
[5] K. J. Biba. Integrity considerations for secure computer sys-
tems. Technical report, DTIC Document, 1977.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry. Towards taming privilege-escalation attacks
on android. In 19th Annual Network & Distributed System
Security Symposium (NDSS), volume 17, pages 18–25, 2012.
[7] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing
inter-application communication in android. In Proceedings
of the 9th international conference on Mobile systems, appli-
cations, and services, pages 239–252. ACM, 2011.
[8] K. Cook. [patch] security: Yama lsm. http://lwn.net/
Articles/393012/.
[9] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Priv-
ilege escalation attacks on android. In Information Security,
pages 346–360. Springer, 2011.
[10] L. Davidson. Windows 7 uac whitelist: Proof-of-concept
source code. http://www.pretentiousname.com/misc/
W7E_Source/win7_uac_poc_details.html.
[11] J. Edwards.
There’s
quirk in ios 7 that
siri control your
http://www.businessinsider.com/password-
security-flaw-in-ios-7-lets-siri-control-
your-iphone-2013-9.
lets
a huge password security
iphone.
[12] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. Sheth. Taintdroid: An information-ﬂow track-
ing system for realtime privacy monitoring on smartphones.
In OSDI, volume 10, pages 1–6, 2010.
[13] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission re-delegation: Attacks and defenses. In USENIX
Security Symposium, 2011.
[14] Go Launcher Dev Team. Go launcher ex notiﬁcation.
https://play.google.com/store/apps/details?id=
com.gau.golauncherex.notification.
[15] Google Inc. Section 508 Compliance (VPAT). https://www.
google.com/sites/accessibility.html.
[16] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic de-
tection of capability leaks in stock android smartphones. In
Proceedings of the 19th Annual Symposium on Network and
Distributed System Security, 2012.
[17] J. Han, E. Owusu, L. Nguyen, A. Perrig, and J. Zhang. Ac-
complice: Location inference using accelerometers on smart-
In Communication Systems and Networks (COM-
phones.
SNETS), 2012 Fourth International Conference on, pages 1–9,
Jan 2012.
[18] S. Jana and V. Shmatikov. Memento: Learning secrets from
process footprints. In IEEE Symposium on Security and Pri-
vacy (Oakland ’12), 2012.
[19] B. Lau, Y. Jang, C. Song, T. Wang, P. H. Chung, and P. Royal.
Mactans: Injecting malware into iOS devices via malicious
chargers. In Proceedings of Black Hat USA, 2013.
[20] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: statically
vetting android apps for component hijacking vulnerabilities.
In Proceedings of the 2012 ACM conference on Computer and
communications security, pages 229–240. ACM, 2012.
[21] C. McLawhorn. Recent development: Leveling the acces-
sibility playing ﬁeld: Section 508 of the rehabilitation act.
NORTH CAROLINA JOURNAL OF LAW & TECHNOLOGY,
3(1):63–100, 2001.
[22] Microsoft. Windows integrity mechanism design. http://
msdn.microsoft.com/en-us/library/bb625963.aspx,
.
[23] Microsoft. Windows vista integrity mechanism technical ref-
erence. http://msdn.microsoft.com/en-us/library/
bb625964.aspx, .
[24] Microsoft Corporation.
Microsoft and section 508.
http://www.microsoft.com/enable/microsoft/
section508.aspx, .
[25] Microsoft Corporation.
User
account
control.
http://windows.microsoft.com/en-us/windows7/
products/features/user-account-control, .
[26] S. Motiee, K. Hawkey, and K. Beznosov. Do windows users
follow the principle of least privilege?: investigating user ac-
count control practices. In Proceedings of the Sixth Symposium
on Usable Privacy and Security, SOUPS ’10, New York, NY,
USA, 2010. ACM.
[27] Motorola Inc.
Moto X Features:
Touchless Con-
http://www.motorola.com/us/Moto-X-
trol.
Features-Touchless-Control/motox-features-
2-touchless.html.
[28] G. Ou.
Vista Speech Command exposes remote ex-
ploit. http://www.zdnet.com/blog/ou/vista-speech-
command-exposes-remote-exploit/416.
[29] PoPs. Pops ringtons & notiﬁcations. https://play.google.
com/store/apps/details?id=com.pops.app.
[30] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and
C. Cowan. User-Driven Access Control: Rethinking Permis-
sion Granting in Modern Operating Systems. In Proceedings
of the IEEE Symposium on Security and Privacy, 2012.
[31] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia,
and X. Wang. Soundcomber: A stealthy and context-aware
sound trojan for smartphones. In NDSS, 2011.
[32] The United States Government. Section 508 Of The Rehabili-
tation Act. http://www.section508.gov/Section-508-
Of-The-Rehabilitation-Act.
[33] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll on ios:
When benign apps become evil. In The 22nd USENIX Security
Symposium (SECURITY), 2013.
[34] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact
of vendor customizations on Android security. In ACM con-
ference on Computer and communications security (CCS ’13),
2013.
[35] N. Xu, F. Zhang, Y. Luo, W. Jia, D. Xuan, and J. Teng. Stealthy
video capturer: A new video-based spyware in 3g smartphones.
In Proceedings of the Second ACM Conference on Wireless
Network Security, WiSec ’09, New York, NY, USA, 2009.
ACM.
[36] Y. Zhou and X. Jiang. Detecting passive content leaks and
pollution in android applications. In Proceedings of the 20th
Annual Symposium on Network and Distributed System Secu-
rity, 2013.
114// A11y code snippet
void atk_editable_text_copy_text (Editable e, int start, int end) {
AtkEditableText *text;
// ...
*(iface->copy_text) (text, start_pos, );
// calls gtk_entry_accessible_copy_text()
}
static void gtk_entry_accessible_copy_text(AtkEditableText *t,
int start, int end) {
GtkEditable *e;
// ...
gchar *str = gtk_editable_get_chars (e, start, end);
// ...
}
// A11y code end, calls functions in Gtk UI
// Gtk code snippet
gchar* gtk_editable_get_chars (GtkEditable *e,
int start, int end) {
return (editable)->get_chars (e, start, end);
// calls gtk_entry_get_chars()
}
// Final function that returns text content
gchar* gtk_entry_get_chars (GtkEntry *e, int start, int end) {
gchar *text;
text = gtk_entry_buffer_get_text (get_buffer (entry));
// ### no security checks at all on getting text ###
return g_strndup (text + start_index, end_index - start_index);
// return text without checking priv->visible
}
Example 3: Code that handles an accessibility request (ATK) for copy-
ing text. In ATK, it calls a function of a module in GTK that supports
accessibility. The module then calls a function that directly interacts
with the UI widget (GTK functions). However, the module GtkEntryAc-
cessible calls a diﬀerent function gtk_editable_get_chars(), which
misses required security checks of the password box.
APPENDIX
A Examples
// On real touch event
public boolean onTouchEvent(MotionEvent event) {
switch (event.getAction()) {
case MotionEvent.ACTION_UP:
{
// ...
// performClick() is called to handle real click event
performClick();
// ...
}
}
}
// On a11y request for click
boolean performAccessibilityActionInternal(int action,
Bundle arguments) {
// ...
switch (action) {
case AccessibilityNodeInfo.ACTION_CLICK:
{
if (isClickable()) {
// the same performClick() is invoked to handle a11y request
performClick();
return true;
}
} break;
}
// ...
}
Example 1: Code that handles real input (above), and code that han-
dles a11y input (below) for click, in View.java of Android. The same
function performClick() is used to handle both requests.
static void gtk_entry_copy_clipboard (GtkEntry *entry) {
GtkEntryPrivate *priv = entry->priv;
// ...
// ### security check for password box ###
if (!priv->visible)
{
// do not copy text to clipboard
gtk_widget_error_bell (GTK_WIDGET (entry));
return;
}
// ...
}
Example 2: Code that handles copy of text (pressing Ctrl-C) in GTK.
Inside the function, GTK checks the security ﬂag priv->visible to de-
cide whether or not to provide selected text to the clipboard. If GtkEn-
try is set as password box (ﬂag is true), then text will not be provided.
115