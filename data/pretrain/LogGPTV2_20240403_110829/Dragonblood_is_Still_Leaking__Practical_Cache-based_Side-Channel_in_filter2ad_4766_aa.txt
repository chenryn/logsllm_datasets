title:Dragonblood is Still Leaking: Practical Cache-based Side-Channel in
the Wild
author:Daniel De Almeida Braga and
Pierre-Alain Fouque and
Mohamed Sabt
Dragonblood is Still Leaking: Practical Cache-based
Side-Channel in the Wild
Daniel de Almeida Braga, Pierre-Alain Fouque, Mohamed Sabt
To cite this version:
Daniel de Almeida Braga, Pierre-Alain Fouque, Mohamed Sabt. Dragonblood is Still Leaking: Prac-
tical Cache-based Side-Channel in the Wild. ACSAC 2020 - Annual Computer Security Applications
Conference, Dec 2020, Austin / Virtual, United States. pp.291-303, 10.1145/3427228.3427295. hal-
03058482
HAL Id: hal-03058482
https://hal.archives-ouvertes.fr/hal-03058482
Submitted on 11 Dec 2020
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
Dragonblood is Still Leaking:
Practical Cache-based Side-Channel in the
Wild
Daniel De Almeida Braga
PI:EMAIL
Univ Rennes, CNRS, IRISA
Rennes, France
Pierre-Alain Fouque
PI:EMAIL
Univ Rennes, CNRS, IRISA
Rennes, France
Mohamed Sabt
PI:EMAIL
Univ Rennes, CNRS, IRISA
Rennes, France
ABSTRACT
Recently, the Dragonblood attacks have attracted new interests
on the security of WPA-3 implementation and in particular on the
Dragonfly code deployed on many open-source libraries. One attack
concerns the protection of users passwords during authentication.
In the Password Authentication Key Exchange (PAKE) protocol
called Dragonfly, the secret, namely the password, is mapped to an
elliptic curve point. This operation is sensitive, as it involves the
secret password, and therefore its resistance against side-channel
attacks is of utmost importance. Following the initial disclosure of
Dragonblood, we notice that this particular attack has been partially
patched by only a few implementations.
In this work, we show that the patches implemented after the
disclosure of Dragonblood are insufficient. We took advantage of
state-of-the-art techniques to extend the original attack, demon-
strating that we are able to recover the password with only a third
of the measurements needed in Dragonblood attack. We mainly
apply our attack on two open-source projects: iwd (iNet Wireless
Daemon) and FreeRADIUS, in order underline the practicability of
our attack. Indeed, the iwd package, written by Intel, is already de-
ployed in the Arch Linux distribution, which is well-known among
security experts, and aims to offer an alternative to wpa_supplicant.
As for FreeRADIUS, it is widely deployed and well-maintained up-
stream open-source project. We publish a full Proof of Concept
of our attack, and actively participated in the process of patching
the vulnerable code. Here, in a backward compatibility perspective,
we advise the use of a branch-free implementation as a mitigation
technique, as what was used in hostapd, due to its quite simplicity
and its negligible incurred overhead.
CCS CONCEPTS
• Security and privacy→ Security protocols; Mobile and wire-
less security; • Networks → Wireless access points, base stations
and infrastructure.
KEYWORDS
Dragonfly, PAKE, WPA3, Wi-Fi, cache attack
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in Annual Computer
Security Applications Conference (ACSAC 2020), December 7–11, 2020, Austin, USA,
https://doi.org/10.1145/3427228.3427295.
ACM Reference Format:
Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt. 2020.
Dragonblood is Still Leaking: Practical Cache-based Side-Channel in the
Wild. In Annual Computer Security Applications Conference (ACSAC 2020),
December 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3427228.3427295
1 INTRODUCTION
1.1 Context and Motivation
Fourteen years after the implementation of WPA2, the WPA3 pro-
tocol was introduced by the Wi-Fi Alliance in early January 2018.
WPA3 was much anticipated after severe weaknesses identified in
WPA2 in Fall 2017 using key reinstallation attacks (KRACKs) [34].
WPA3 aims at improving authentication and encryption during con-
nections. Indeed, it replaces Pre-Shared Key (PSK) authentication
by WPA3-SAE (Simultaneous Authentication of Equals). Unlike
PSK, SAE resists offline dictionary attacks; namely the only way
for an attacker to guess a password is through repeated trials. A
security requirement is that each trial must only reveal one single
password, thereby forcing online attacks that can be easily miti-
gated through, for instance, limiting authentication attempts. Thus,
SAE, which is a variant of the Dragonfly handshake, is considered
as a major addition to WPA3. SAE is defined in the standard IEEE
802.11-2016 [1], that implements a slight variant the Dragonfly RFC
defined in [16].
Nevertheless, some researchers cast some doubt on the guar-
antees promised by SAE and Dragonfly [21, 22, 24, 29]. In 2019,
Vanhoef and Ronen identified a set of vulnerabilities in WPA3 imple-
mentations, especially against its password-encoding method [35].
Along with the vulnerability, they present a collection of attacks,
along with appropriate mitigations. Among their attacks, some
exploit both timing and cache side-channels in order to leak some
information. Then, they show how the leak is related to the targeted
password, and mount an offline dictionary attack accordingly. The
disclosure of Dragonblood is unfortunate to the Wi-Fi Alliance that
has just got its biggest update in 14 years. However, this did not
discourage vendors to continue their WPA3 adoption, especially
that KRACKs of WPA2 is more serious, since it concerns the stan-
dard itself, while Dragonblood mainly leverages implementation
weaknesses related to side-channel leaks. In response, the Wi-Fi Al-
liance published some implementation guidance to be followed by
manufacturers [5] to ensure secure backward compatible WPA3’s
implementations. Authors in [35] cast doubts on the endorsement
of some backwards-compatible side-channel defenses, especially in
the context of resource-constrained devices because of their high
ACSAC 2020, December 7–11, 2020, Austin, USA
Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt
overhead. Moreover, they argue that a secure implementation of
the countermeasures is an arduous task.
In this paper, we focus on the recommendations related to Cache-
Based Elliptic Curve Side-Channels in [5], which address mitigations
to the set of Dragonblood vulnerabilities related to cache-based at-
tacks. Two mitigations are underlined: (i) performing extra dummy
iterations on random data, and (ii) blinding the calculation of the
quadratic residue test. For the first mitigation, the RFC 7664 [16]
recommends that 40 iterations are always executed even if the
password was successfully encoded requiring fewer iterations. Con-
cerning the second mitigation, a blinding scheme is suggested for
the function determining whether or not a value is a quadratic
residue modulo a prime.
1.2 Our Contribution
In our paper, we show that such countermeasures are not enough
to defend against cache-based side-channel attacks. In fact, these
particular measures are designed to prevent only a part of Drag-
onblood’s attacks, and does not affect one of them. Especially, the
cache attack leveraging a password dependent control-flow of loop
in the try-and-increment conversion function is neither discussed
in this document, nor patched in most implementations (except
for hostapd, which was the direct target of the original attack).
We aim to raise awareness about this particular attack, and prove
that we can extend it to gain additional information, with fewer
measurements. To this end, we identify several implementations in
which some code is executed only during the iteration where the
password was correctly converted (or encoded). We show how an
attacker can use cache attacks in order to leak some information on
the password. We stress that the original Dragonblood attacks are
still applicable on such implementations. However, our work takes
a step further by leveraging some state-of-the-art techniques that
improve the attack performance without changing the underlying
threat model.
Indeed, we extend the original attack in which only the outcome
of the first iteration is leaked. Using an unprivileged spyware, we
demonstrate that attackers are able to learn the exact iteration
where the first successful conversion occurred with high probabil-
ity. We achieve this result by monitoring well-chosen memory-lines
with a Flush+Reload attack [38] to keep track of each iteration,
and the success-specific code. We enhanced the reliability of our
measurements by combing the attack to a Performance Degradation
Attack (PDA) [4]. Since the successful iteration is directly related
to key exchange context (defined by both MAC addresses and the
password), this leakage allows attackers to significantly reduce
the number of measurements needed to recover the password. For
instance, only 160 measurements are required in order to discard
all the wrong passwords using the Rockyou dictionary [25], while
Dragonblood needs 580 measurements. Roughly, we cut down the
number of measurements by three, which makes our attack per-
forms better in practice.
We apply our findings on the wireless daemon iwd (iNet Wire-
less Daemon) that aims to replace wpa_supplicant. Ironically, iwd
is written by Intel and our identified vulnerabilities in their imple-
mentation are caused by Intel cache design. The version 1.0 was
released in October 2019 (after the publication of Dragonblood) and
it is already adopted by Arch Linux and Gentoo. We also extend
our work to FreeRADIUS, which a widely deployed project used by
millions of users 1. We have not only communicated our findings to
the maintainers of these two open-source projects, but also helped
them to patch the vulnerable code.
compared it to the original one (see Section 3.5).
The underlying technical details are quite similar concerning the
identified vulnerability in iwd and FreeRADIUS. Therefore, for the
sake of clarity and brevity, we will only detail the iwd case in the
core of this paper. The FreeRADIUS case id discussed in Appendix C)
in order to highlight the specificity of their implementation. In
summary, we make the following main contributions:
• We extended the original Dragonblood attack to recover not
only the outcome of the first round, but the iteration yielding
a successful conversion (see Section 3).
• We estimated the theoretical complexity of our attack and
• We implemented a Proof of Concept of our attack, presenting
• We implemented mitigations and evaluated the overhead
(see Section 5.1).