title:On DNSSEC Negative Responses, Lies, and Zone Size Detection
author:Jonathan Demke and
Casey T. Deccio
On DNSSEC Negative Responses, Lies,
and Zone Size Detection
Jonathan Demke
and Casey Deccio(B)
Brigham Young University, Provo, UT 84602, USA
{jpd0057,casey}@byu.edu
https://cs.byu.edu/
Abstract. The Domain Name System (DNS) Security Extensions
(DNSSEC) introduced additional DNS records (NSEC or NSEC3 records)
into negative DNS responses, which records can prove there is no trans-
lation for a queried domain name. We introduce a novel technique to
estimate the size of a DNS zone by analyzing the NSEC3 records returned
by only a small number of DNS queries issued. We survey the prevalence
of the deployment of diﬀerent variants of DNSSEC negative responses
across a large set of DNSSEC-signed zones in the wild, and identify
over 50% as applicable to our measurement technique. Of the applicable
zones, we show that 99% are composed of fewer than 40 names.
Keywords: DNS · DNSSEC · Privacy
1 Introduction
Since its inception over thirty years ago, the Domain Name System (DNS) [19,20]
has included provisions for so-called negative responses, which indicate that there
is no translation for a queried domain name. While the essential characteristic of
a negative response has always been the lack of an answer (i.e., translation), the
DNS Security Extensions (DNSSEC) [8,19,20,23] introduced the requirement
that additional DNS records (NSEC or NSEC3 records) be included in a negative
DNS response, which records can prove the non-translation of the domain name.
A side eﬀect of including these extra records is that additional information is
revealed about a domain—such as names that do exist. While this side eﬀect is
innocuous to some, to others it can be undesirable. In an attempt to reduce or
eliminate unwanted disclosure of information via DNSSEC negative responses,
new approaches have been introduced into the DNSSEC ecosystem. However,
each comes with its own caveats.
In this paper, we present a novel method for learning the size of a DNS zone—
using DNSSEC negative responses—by issuing only a relatively small number of
queries. From a standpoint of minimum information disclosure, even revealing
the size of a zone might be a privacy concern to some entities. However, more
generally it stands alone as a way to estimate zone size to learn more about
how the DNS ecosystem is being utilized. We list the following as the major
contributions of this paper:
c(cid:2) Springer Nature Switzerland AG 2019
D. Choﬀnes and M. Barcellos (Eds.): PAM 2019, LNCS 11419, pp. 231–243, 2019.
https://doi.org/10.1007/978-3-030-15986-3_15
232
J. Demke and C. Deccio
– The presentation of a technique to estimate DNS zone size for NSEC3-signed
zones;
– A measurement study on the use of diﬀerent strategies of DNSSEC negative
– A survey of the sizes of various NSEC3-signed zones using the technique intro-
responses in the wild; and
duced in this paper.
As part of our study, we systematically issue queries to DNS servers authoritative
for over two million DNSSEC-signed zones, eliciting negative DNS responses
of various types. We ﬁnd that over 50% of the zones we analyzed are signed
with traditional NSEC3, and are thus candidates for zone size estimation using
relatively few queries. We also observed that 99% of the NSEC3 zones we analyzed
have an estimated size of less than 40 names.
2 Background
The Domain Name System (DNS) [19,20] protocol primarily consists of queries
and responses. Queries are messages requesting the translation of a given domain
name (i.e., example.com) and type (e.g., A, for IPv4 address). Responses are
made of multiple DNS records, where a record is a mapping of domain name and
type to some resource. The records in a DNS response collectively constitute
either an answer, a referral to which server(s) might have the answer, or a
deﬁnitive indication that there is no resource to which the name and type maps,
i.e., there is no answer. A DNS zone is a group of DNS records with names under
a common domain (i.e., suﬃx) and served from the same set of servers.
When there is no translation for a given name and type, the response includes
no answer records, yielding an empty answer section. The NSEC record was intro-
duced, with DNSSEC, to prove that for a given query (a) the queried domain
name doesn’t exist or (b) no record of the queried type exists at that name [8,9].
An NSEC (next secure) record consists largely of two parts: (1) a pair of domain
names that, using a deﬁned canonical ordering, are in sequence; and (2) the list
of types that exist for the ﬁrst of the names in the NSEC record. If a queried
name doesn’t exist, the server returns the NSEC record that contains the names
between which the queried name would fall, if it existed—the NSEC covering. If
the queried name exists but the queried type does not, then the server returns
the NSEC record corresponding to the name, and the list of types in the record
prove that the queried type does not exist.
While NSEC records in a response provide a useful non-existence proof, their
inclusion makes it possible for a server to divulge all existing domain names in
a given zone through systematic querying. This exposure is a privacy concern
for some organizations, but the introduction of NSEC3 addressed this concern, in
part [23]. With NSEC3, names within a DNS zone are hashed, and the ordered
sequence of hashes that cover the hash of the queried name, are returned by
a server, instead of the names that cover the queried name. Thus, the client
receiving the response can prove non-existence of a given name, but doesn’t
immediately learn about any other names that do exist.
On DNSSEC Negative Responses, Lies, and Zone Size Detection
233
3 Previous Work
While NSEC3 eﬀectively obfuscates the names from simple disclosure, research
has shown that with a relatively small number of queries, a signiﬁcant portion
of zone contents can be enumerated using an oﬄine dictionary “attack” [12,24].
We complement this research to show that the size of a zone can also trivially
be learned.
Further measures to protect DNS privacy by revealing less about a DNS zone
involve servers sending minimal proofs—eﬀectively “lying” about zone contents.
Two major variants exist, one for NSEC3 records (“white lies”) and one for NSEC
records (“black lies”). The notion of NSEC3 white lies was introduced by Dan
Kaminsky in his Phreebird DNSSEC software [18]. Upon receiving a query for a
given domain name, d, rather than returning the NSEC3 record with the hashes
corresponding to existing names that surround the hash of d, h(d), the server
dynamically creates an NSEC3 record with hashes h(d) − 1 and h(d) + 1. With
the black lies approach—a term coined by Cloudﬂare—the server dynamically
generates an NSEC record with (1) the name queried and (2) the next possible
name in DNSSEC canonical ordering (i.e., foo.com and \000.foo.com) [16].
The result in both cases is an NSEC or NSEC3 proof that satisﬁes any validator
without disclosing any existing names or hashes of existing names and does not
disclose additional information. In the case of black lies, the response indicates
that the name exists (even though it doesn’t), but that the type does not.
Generating a dynamic response requires a server to have access to the pri-
vate key(s) associated with the zone, so DNSSEC signatures (RRSIG records)
can also be generated dynamically. This is in contrast to traditional static sign-
ing methods, in which RRSIG records can be created on a server, possibly even
oﬄine. This potentially creates concerns for zones served by third-party orga-
nizations [11,22]; providing private keys to a third party allows them access to
create arbitrary zone content. The NSEC5 mechanism was proposed to address
this concern by providing a separate key to third parties, which was only good for
providing a dynamic signature for an intermediate record that played a role in
the proof [15]. Because this key cannot sign the records found in the zone proper,
they cannot be used to manipulate. Despite the privacy advantages, NSEC5 has
faced challenges with its standardization and adoption.
4 NSEC3 Zone Size Discovery
In this section we discuss the foundations and methodology for estimating the
size of an NSEC3-signed zone.
It is well known that contents of zones signed with traditional NSEC (i.e.,
without black lies) can be trivially enumerated with a number of queries equal
to the number of unique owner names in the zone [21]. As a side eﬀect, zone
size—as measured by the number of unique owner names—is also discovered.
Zones signed with NSEC3 cannot be similarly enumerated. This is because
the hashes returned in the NSEC3 records of one response cannot be used as
234
J. Demke and C. Deccio
query names in subsequent responses, as they can in NSEC [23]. However, with
traditional NSEC3 (i.e., no white lies), an interested party can accumulate a
large number of NSEC3 records with repeated queries. With suﬃcient queries, the
collection of records retrieved might approach the entire set of NSEC3 records for
the zone. In that case, the investigator can not only carry out an oﬄine dictionary
“attack” [12,24], but also learn the size of the zone.
Throughout the remainder of this paper, we refer to three types of queries
used to elicit negative response, which we describe here:
– q-nxdomain: a type A query for a domain name within the zone, formed by
pre-pending an arbitrary label of our choosing to the subject domain, e.g.,
foobar123.example.com, which domain name (presumably) does not exist.
– q-nodata: a type CNAME query for the domain name at the zone apex (i.e., the
domain name corresponding to the zone itself), which record should also not
exist (because a record of type CNAME cannot co-exist with the NS records also
at the zone apex) [13].
– q-nodata-type: a query for an undeﬁned type at the zone apex, which record
should also not exist because the type has not been deﬁned.
4.1
NSEC3 Distance
Like all DNS records, NSEC3 records have an owner name and record data.
The ﬁrst (left-most) label in the owner name is the Base32-encoded (using the
“Extended Hex” alphabet [17]) value of the SHA1 hash of a domain name [23].
This label is 32 characters long, with each character having 32 possible values.
The record data for an NSEC3 record includes, among other ﬁelds, the next ﬁeld,
which is the hash of another owner name in the zone—the next hash in the zone,
in canonical ordering. The hash value in the next ﬁeld can also be represented
as a 32-byte string of Base32 characters. The maximum value of the Base32
representation of either is H = 2160 = 3232.
The distance, d(n), of an NSEC3 record, n, is the result of subtracting the
next ﬁeld’s value, nnext, from the value of the ﬁrst label of the owner name,
nowner. If the next hash value is greater than the hash value in the owner name,
then the absolute diﬀerence is subtracted from the maximum hash space:
(cid:2)
nowner − nnext
H − |nnext − nowner| otherwise
if nowner ≥ nnext
d(n) =
(1)
For a given zone, Z, the sum of the distances of all the NSEC3 records must equal
the total hash space, H:
d(n) = H
(2)
(cid:3)
n∈Z
4.2
NSEC3 Distance Distribution
To understand the distribution of distances within a zone, Z, we generated ran-
dom names using the Natural Language Toolkit (NLTK) [10] to create 100 DNS
On DNSSEC Negative Responses, Lies, and Zone Size Detection
235
zones for each of the following zone sizes: 102, 103, 104, 105, and 106. Each of the
resulting 500 zones was signed with NSEC3 using BIND’s dnssec-signzone [1].
We then computed the distance for each NSEC3 record and plotted the Cumula-
tive Distribution Function (CDF) of all the distances, categorized by zone size,
in Fig. 1.
Fig. 1. The CDF of NSEC3 distances for zones of various sizes.
The plots exhibit several noteworthy features. First, the plots of distances
for each zone size are nearly identical, with each distribution being shifted from
any other distribution according to the inverse proportionality of their respective
zone sizes. For example, the median distance for the zone of size 102, is 100 (i.e.,
104/102) times greater than the median distance for the zone of size 104. Second,
the CDF for each zone size increases logarithmically, rather than exhibiting a
normal distribution. Thus, there is a much larger proportion of small NSEC3
distances in each of the zones than large distances. It follows that for an NSEC3-
signed zone, the majority of the hash space is covered by relatively few NSEC3
records. Speciﬁcally, 90% of the hash space, H, is covered by only about 60% of
the NSEC3 records in a zone, and only 19% of the NSEC3 records cover half of the
hash space. Relatedly, the lower 50% of NSEC3 distances for a given zone covers
only 15% of the overall hash space, H.
The distribution of cumulative NSEC3 distances to cumulative hash space,
for the 500 zones we created, is shown in Fig. 2. Notably, Fig. 2 plots the same
NSEC3 distance data as Fig. 1, consolidating the distance data from all the zones.
Because the distribution of NSEC3 across the hash space is the same for any zone
size, the resulting plot is a single, uniﬁed line.
The hashes of query names, however, are distributed uniformly across the
hash space. We conﬁrmed this by generating 100,000 unique query names within
236
J. Demke and C. Deccio
Fig. 2. The CDF of NSEC3 distances compared to cumulative percentage of hash space.
a domain and analyzing the distribution of the resulting NSEC3 hashes, which
were computed using BIND’s nsec3hash utility [1]. The hash space, H, was
divided up into 1,024 equal-sized bins, and the number of NSEC3 hashes that
fell in each bin was graphed as a CDF, shown in Fig. 3. The number of NSEC3
hashes per bin were normally distributed with a median value of 98, which is
the expected value for 100,000 queries, i.e., 100000/1024 = 98.
The apparent disparity between the uniform distribution of hashes and the
exponential distribution of the distances between them is actually an example of
a Poisson process. The NSEC3 hashes represent “arrival times” across the hash
space, which are uniformly distributed according to constant intensity (or arrival
rate) λ, which is a function of the size of the zone. The NSEC3 distances represent
the inter-arrival times and are distributed according to Exp(λ) [14].
Let z = |Z| denote the actual size of DNS zone Z, and let z(cid:4) represent the
estimate of z, derived from NSEC3 distances. If the distances of all NSEC3 records
were somewhat uniform, then calculating z(cid:4) would be as simple as calculating
the average distance of the collection of NSEC3 records, N, returned in negative
responses to q-nxdomain queries and dividing H by that average:
(cid:4) (cid:2)
z(cid:4)
=
(3)
(cid:5)
H
n∈N d(n)
|N|
However, the fact that the distribution of NSEC3 distances—for a zone of any
size—follows an exponential distribution across the hash space, while the distri-
bution of NSEC3 hashes are uniformly distributed across the hash space, means
that not all queries are equal. That is, the NSEC3 hash corresponding to an arbi-
trary q-nxdomain query is more likely to be covered by an NSEC3 record with a
large distance, but that distance is less representative of the zone’s NSEC3 records
On DNSSEC Negative Responses, Lies, and Zone Size Detection
237
Fig. 3. The distribution of NSEC3 hashes resulting from random query names, graphed
as a CDF representing the number of hashes per 1,024th part of the hash space, H.
because of the relatively large percentage of NSEC3 records having a smaller dis-
tance. Thus, if all NSEC3 distances in N were weighted equally (i.e., following
Eq. 3), then the resulting average would be too high, resulting in a proportionally
too-low value for z(cid:4).
A more accurate approach to estimating the size of a zone using the collection
of NSEC3 records, N, returned in negative responses to q-nxdomain queries, is to
weight each NSEC3 record according to its statistical representation of the hash
space. If the NSEC3 records in N are divided into q quantiles, according to their
distance, N = N1 + N2 + . . . + Nq, then the distance for all records in Ni are
weighted using the fraction of the hash space that that ith quantile represents.
The weights for q = 10 (i.e., decile or 10th percentiles) were derived from the
distance distribution of the NSEC3 records from the 100 zones of size 106 that we
created and are shown in Table 1. These weights correspond to the diﬀerence in
cumulative hash space, x, for consecutive quantile values of NSEC3 distances, i.e.,
y1 = i−1
q . The resulting formula to approximate zone size, letting wi
correspond to the weight for quantile i, is the following:
q and y2 = i
(cid:4)(cid:6)
z(cid:4)
=
(cid:5)
H
wi
(cid:2)
d(n)
n∈Ni
|Ni|
1≤i≤q
(4)