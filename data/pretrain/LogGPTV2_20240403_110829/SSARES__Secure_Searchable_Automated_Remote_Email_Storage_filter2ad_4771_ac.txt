situation because it would render the ﬁlters useless.
A second script, SSARES email search.py, helps
the user query the email archive. It uses the PEKS private
key to create trapdoors. The user provides a list of keywords
per ﬁeld. The script then calls the Bloom Filter application
to produce the query ﬁlter and calls the PEKS script to cre-
ate the desired trapdoors. We separate each trapdoor into a
list according to the queried ﬁeld so that they may be tested
against the proper peks-list on the server. Just as before, the
trapdoors, like each PEKS in the peks-list of each SSARES
Email, will have the ﬁrst letter of the unencrypted keyword
exposed so that Alpha-Sorting technique can be used. Ob-
viously, since there is only one error-prone ﬁlter to test per
message, the query ﬁlters are not separated. Finally, the
script sends the resulting SSARES Query to the server to
perform a SSARES search.
Searching
is
using
The
the
accomplished
SSARES mailbox test.py script.
script
input an SSARES Email created using
accepts as
SSARES email parse.py and an SSARES Query
created using SSARES email search.py and tests for
a match using the algorithm described in Section 3. The
output of the script is a list of SSARES Email unique IDs,
which can then be returned to the client. As a result, the
user can request each matching email individually and
decrypt and read it locally.
5 Evaluation
We evaluated SSARES in three parts: email production,
query production, and searching. The sample set of emails
we used consisted of 100 messages from the Enron Data
Set [7]. All tests were run on a Red Hat Enterprise Linux
machine with a Pentium 4 CPU at 3.00 GHz.
5.1 SSARES Email Production
We ran the SSARES email parse.py script over our
sample dataset to produce a SSARES Mailbox. Figure 2
shows the results. Figure 2(a) and Figure 2(b) show the rela-
tionship between the original size of the email in bytes and
the number of keywords, respectively, and the size of the
resulting SSARES Email in bytes with a best ﬁt line. Both
graphs display a strong linear relationship, but the number
of keywords appears to have more inﬂuence on the ﬁnal size
134134
(a) Original Email Size to SSARES Email Size in
Bytes
(b) Number of Keywords to SSARES Email Size in
Bytes
(c) Number of Keywords to Time of SSARES En-
cryption
(d) Original Email Size to Time of SSARES Encryp-
tion
Figure 2. Graphs for Email Production
of the SSARES Email than the original size of the unen-
crypted email. This effect is due to the ﬁxed size of the
PEKS-encrypted keywords. A larger number of keywords
implies more PEKS-encryption results, leading to a larger
SSARES Email.
The average original email size was 2523 bytes, while
the average SSARES email size was 94,863 bytes, repre-
senting an average increase factor of 37, as shown by the
slope of Figure 2(a). Given the current and foreseeable
cost of storage, we believe this tradeoff to be reasonable for
some environments, but not entirely satisfactory. Nonethe-
less, we are investigating techniques for minimizing this
overhead. The slope of Figure 2(b), at 387.27, represents
the average amount of space one keyword in the original
email takes up in the ﬁnal encrypted email. Even a rela-
tively small message that is excessively “wordy” can poten-
tially take up more space than an unencrypted message that
might be larger but contain fewer distinct words.
Figure 2(c) and Figure 2(d) display time dependencies
in SSARES Email Production. Figure 2(c) shows a direct
relationship between the number of keywords and the time
of email production. The slope, at 0.07, indicates the aver-
age amount of time in seconds per keyword in encryption.
Figure 2(d) also displays a linear relationship between the
original size of the email and the time of encryption, but
the linear relationship is most likely linked to the fact that
larger emails tend to have more keywords. The average time
of encryption was 17.17 seconds with a standard deviation
of 24.17 seconds. The worst case was 179.31 seconds, but
this particular email contained over 1,000 keywords. Speed
of encryption is not a critical performance factor because
email is a transport medium that already operates on the
order of minutes. A message arriving after an additional
minute would not render the system unusable.
5.2 SSARES Query Production
To test query production, we obtained keywords dur-
ing the email production test by collecting keywords while
parsing the body and subject of the email. Three different
forms of SSARES Queries with varying amounts of key-
words (1 to 20) were produced with the subject and body as
the search ﬁelds, both with and without Alpha-Sorting.
The ﬁrst form of SSARES Queries were ”ﬁrst-match”
queries in that the ﬁrst keyword provided was a match for
at least one message. The second was ”last-match” queries:
the last keyword provided is a match for an email. The third
form is ”no match” queries, where none of the keywords are
a match. We produced non-matching keywords by append-
ing numerals to the end of the search keywords. The vari-
ety of SSARES Queries were chosen so that the produced
queries can be used during searching and provide varying
results on different styles of searches.
Figure 3 displays the results from the SSARES query
production test. Figure 3(a) shows the relationship between
the number of keywords and the time it takes to produce
a query. Query production is relatively fast, even with an
excessive amount of keywords. Using twenty keywords,
135135
(a) Number of Keywords Being Searched to Time
(sec) per Message in Search
(b) Number of Keywords being Searched to Time of
Search
(c) Number of Matches to Time (s) of Search
(d) Time (s) per Message for a Match or No Match
Figure 4. Graphs for Overall Searching on the Subject without Alpha Sorting
it took less then 2 seconds to produce a query. This time
is an important performance factor, because total search-
ing speed is dependent on how fast the client can produce
a query. The size, in bytes, of the resulting queries is dis-
played in Figure 3(b) as it relates to the size, in bytes, of
the keywords being searched for. There is a semblance of
a linear relationship, most likely due to the ﬁxed amount of
information that must be produced (the ﬁlter and the trap-
door) and the ﬁxed size of these. The size of queries seems
to be reasonable, at most 9 KB, and should not pose serious
performance issues.
5.3 SSARES Search
The SSARES Queries produced by the SSARES Query
Production testing were used to run the search testing over
the SSARES Mailbox produced in the email production
testing. Figures 4(a) and 4(b) show how the time of search-
ing in seconds relates directly to the number of keywords
being searched for, but it is also dependent on the number
of keywords per message in the mailbox, as expected. There
is a general decrease in search speed (increase in search
time) as the number of keywords increases, and the out-
lying points above the grouping represent the searching of
the email that contains over a thousand keywords. Even
without Alpha-Sorting (using just the error-prone ﬁlters) it
only takes about 7 seconds to search the largest message
and only 2.7 seconds on average, but one can see clearly in
Figure 4(b) that these times add up to a fairly slow overall
searching speed. A small search of 1 to 6 keywords over 100
emails can take half a minute. It should also be noted that
these search results were done on the subject of the emails,
whose associated peks-list is much shorter then the body of
the email. One particular search with 8 keywords took over
a minute, which is probably due to matching the messages
with longest peks-list. A query with just 1 keyword can
have this effect, and a search that takes over a minute is a
signiﬁcant delay for reasonable use and justiﬁes the use of
ﬁlters and Alpha-Sorting to increase the speed of the search.
Without the ﬁlters, a search could take hours, but even with
ﬁlters alone SSARES is not fast enough to be reasonably
practical.
The effects of the Bloom Filter on searching speed is
drastic. Figure 5(a) shows this best. When a query fails the
ﬁlter, we can eliminate it from the search in under a second,
but if the ﬁlter was passed, then the time per message can
be between 1 and 7 seconds. Figure 5(b) is even more en-
couraging, as it shows how many messages per search we
were able to eliminate using the ﬁlter. On average, we were
able to eliminate 76% of the messages, which also matches
our minimum error rate of 25%. Changing the minimum er-
ror of the ﬁlter should have effects on the overall searching
speed, at the cost of reduced privacy.
Additionally, search testing was performed with the
added Alpha-Sorting technique, which had a profound ef-
fect on search speed. Looking at Figure 6, one can see
that with just the ﬁlters, average search speed for search-
ing the Subject of the email were 28.88 (s) and 0.27 (s) per
email. Alpha-Sorting improved the speed to 7.00 (s) per
136136
(a) Search Speed for Subject Search without Alpha-Sorting
(b) Search Speed for Subject Search with Alpha-Sorting
(c) Search Speed for Body Search with Alpha-Sorting
Figure 6. Search Speed Comparison with Alpha-Sorting
search and 0.05 (s) per email. But, search testing on the
body, whose peks-list contains many more keywords than
the subject, shows how there is still a need for speed im-
provement as the number of peks to test increases. Using
Alpha-Sorting, the 46.47 (s) average search and 0.45 (s) av-
erage per email is still too slow to offer true practicality
when it comes to searching the largest peks-list of the email,
namely the body.
6 Conclusion
We have presented SSARES, a novel system that takes
a practical approach to addressing the problem of simulta-
neously securing email at rest and allowing search of that
email. The combination of Bloom Filter with intentionally
added errors, PEKS encryption, and Alpha Sorting provides
an automated and transparent process so that normal email
practices of sender and receiver need not change. Instead,
a list of automatically generated keywords is compared (in
a secure manner) with a search query. SSARES helps im-
prove the security of server–side email storage, and if prop-
erly implemented, can have a signiﬁcant impact on the pri-
vacy of user email and other information stored with third
party providers.
References
[1] S. Artzi, A. Kiezum, C. Newport, and D. Schultz. Encrypted
Keyword Search in Distributed Storage System. MIT CSAIL
Tech Report, MIT-CSAIL-TR-2006-010, February 2006.
[2] L. Ballard, M. Green, B. de Medeiros, and F. Monrose.
Correlation-Resistant Storage via Keyword Searchable En-
cryption. Cryptology ePrint Archive, Report 2005/417,
2005.
[3] S. M. Bellovin and W. R. Cheswick.
Privacy-
Enhanced Searches Using Encrypted Bloom Filters.
, DRAFT, 2006.
137137
(a) Number of Keywords to Time in Query Produc-
tion
(a) Time per Message for Either Failed of Passed
Bloom Filter
(b) Size of Keywords (bytes) to Size of Query
(bytes)
Figure 3. Graphs for Query Production
[4] B. Bloom. Space/time trade-offs in hash coding with allow-
able errors. Communications of the ACM, 13(7):422–426,
July 1970.
[5] D. Boneh, G. Crescenzo, R. Ostrovsky, and G. Persiano.
In C. Cachin
Public key encryption with keyword search.
and J. Camenisch, editors, Proceedings of Eurocrypt, pages
506–522, 2004.
(b) Number of Messages to Fail Filter to Time(s) per
Search
Figure 5. Effects of the Bloom Filter
[15] D. Song, D. Wagner, and A. Perrig. Practical Techniques
In IEEE Symposium on
for Searches on Encrypted Data.
Security and Privacy, pages 44–55, May 2000.
[16] B. Waters, D. Balfanz, G. Durfee, and D. Smetters. Building
and Encrypted and Searchable Audit Log. Proceedings of
ISOC NDSS, February 2004.
[6] D. Boneh and M. Franklin. Identity-Based Encryption from
Weil Pairing. SIAM Journal of Computing, 32(3):586–615,
2003.
[7] CALO Project. Enron Data Set. , 2004.
[8] Y.-C. Chang and M. Mitzenmacher. Privacy Preserving Key-
In Proceedings of ACNS, pages 442–455,
word Searches.
June 2005.
[9] R. Cutmola, J. Garay, S. Kamara, and R. Ostrovsky. Search-
able Symmetric Encryption: Improved Deﬁnition and Efﬁ-
cient Constructions. In Proceedings of ACM CCS, Novem-
ber 2006.
[10] E.-J. Goh. Secure Indexes. Cryptology ePrint Archive, Re-
port 2003/216, 2003.
[11] C. Gu, Y. Zhu, and Y. Zhang. Efﬁcient Public Key Encryp-
tion with Keyword Search Scheme from Pairings. Cryptol-
ogy ePrint Archive, Report 2006/108, 2006.
[12] B. Lynn.
The Pairing Based Cryptography Library.
.
[13] D. Park, J. Cha, and P. Lee. Searchable Keyword-Based
Encryption. Cryptography ePrint Archive, Report 2005/367,
2005. Available at http://eprint.iacr.org.
[14] D. Parl, K. Kim, and P. Lee. Public Key Encryption with
Conjuctive Field Keyword Search. In C. Lim and M. Yung,
editors, Proceedings of WISA, pages 73–86, 2004.
138138