            idx = 0;
            goto success;
        }
        //否则直接根据传入size，转换成size_classes的对应大小的 下标，
        sc = size_to_class(n);
        rdlock();
        g = ctx.active[sc]; // 从现有的active中取出对应sc 的 meta ,不同sc 对应不同的meta
      //如果从ctx.active 中没找到合适的meta 会执行下面的 
        if (!g && sc>=4 && scavail_mask
                && !ctx.active[sc|1]->freed_mask))
                usage += 3;
            if (usage avail_mask : 0;
            first = mask&-mask;
            if (!first) break;
            if (RDLOCK_IS_EXCLUSIVE || !MT)
                g->avail_mask = mask-first;
            else if (a_cas(&g->avail_mask, mask, mask-first)!=mask)
                continue;
            idx = a_ctz_32(first);
            goto success;
        }
        upgradelock();
        idx = alloc_slot(sc, n); 、
       //alloc_slot 从group 中取出对应大小chunk 的idx
      // 这里先从对应sc 的group 中找没找到 再从队列中其他的group 中找
     // 利用其他group 中被free 的chunk
    // 重新分配一个新的group
        if (idx  /src/malloc/mallocng/malloc.c
    void free(void *p)
    {
        if (!p) return;
        struct meta *g = get_meta(p);// 通过chunk p 用get_meta得到对应的meta
        int idx = get_slot_index(p);// 得到对应chunk的 idx
        size_t stride = get_stride(g); // 得到sizeclasses 中对应chunk类型的size
        unsigned char *start = g->mem->storage + stride*idx;
        unsigned char *end = start + stride - IB;
        //*start = g->mem->storage(得到group中第一个chunk地址) + stride*idx(加上对应chunk偏移);
        // start 就为对应p(chunk)的起始地址
        // end 对应结束地址
        get_nominal_size(p, end);//算出真实大小
        uint32_t self = 1ulast_idx)-1;//设置bitmap 标志
        ((unsigned char *)p)[-3] = 255;
        *(uint16_t *)((char *)p-2) = 0;
        if (((uintptr_t)(start-1) ^ (uintptr_t)end) >= 2*PGSZ && g->last_idx) {
            unsigned char *base = start + (-(uintptr_t)start & (PGSZ-1));
            size_t len = (end-base) & -PGSZ;
            if (len) madvise(base, len, MADV_FREE);
        }
        // atomic free without locking if this is neither first or last slot
        for (;;) {
            uint32_t freed = g->freed_mask;
            uint32_t avail = g->avail_mask;
            uint32_t mask = freed | avail; // 将释放的chunk 和 现在可用的 chunk 加起来
            assert(!(mask&self));
            if (!freed || mask+self==all) break; 
            //!freed 没有被释放的chunk，mask+self==all说明释放了当前chunk所有chunk 都将被回收
            // 此group 会被弹出队列 
            if (!MT)
                g->freed_mask = freed+self;// 设置free_mask 表示chunk 被释放
            else if (a_cas(&g->freed_mask, freed, freed+self)!=freed)
                continue;
            return;
        }
        wrlock();
        struct mapinfo mi = nontrivial_free(g, idx);// 含有meta 操作 ，内有unlink 是漏洞利用的关键
        unlock();
        if (mi.len) munmap(mi.base, mi.len);
    }
**free** ：
​ 通过get_meta(p)得到meta (get_meta 是通过chunk 对应的offset 索引到对应的grop 再索引到meta)
下面会详细介绍get_meta
​ 通过get_slot_index(p)得到对应chunk的 idx -> 通过get_nominal_size(p, end) 算出真实大小
​ 重置idx 和 offset idx 被置为0xff 标记chunk
​ 修改freed_mask 标记chunk被释放
​ 最后调用nontrivial_free 完成关于meta一些剩余操作 (注意进入nontrivial_free 是在for循环外 还未设置)
**细节** :!!!
​ 释放chunk的时候，先只会修改freed_mask,不会修改avail_mask，说明chunk 在释放后，不会立即被复用
​ 注意进入nontrivial_free 是在for循环外 还未设置freed_mask 跳出循环的条件是 if (!freed ||
mask+self==all) break;
​ free 中chunk 的起始位置可以通过 chunk的idx 定位
get_meta
    static inline struct meta *get_meta(const unsigned char *p)
    {
        assert(!((uintptr_t)p & 15));
        int offset = *(const uint16_t *)(p - 2);// 得到chunk offset
        int index = p[-3] & 31;;// 得到chunk idx
        if (p[-4]) {
            assert(!offset);
            offset = *(uint32_t *)(p - 8);
            assert(offset > 0xffff);
        }
        const struct group *base = (const void *)(p - UNIT*offset - UNIT);// 通过offset 和chunk 地址计算出group地址
        const struct meta *meta = base->meta;// 从group 得到 meta 地址
        assert(meta->mem == base);// 检查meta 是否指向对应的group
        assert(index last_idx);// 检查chunk idx 是否超过 meta 最大chunk 容量
        assert(!(meta->avail_mask & (1ufreed_mask & (1ucheck == ctx.secret);// 检查 check 校验值
        if (meta->sizeclass = size_classes[meta->sizeclass]*index);
            assert(offset sizeclass]*(index+1));
        } else {
            assert(meta->sizeclass == 63);
        }
        if (meta->maplen) {
            assert(offset maplen*4096UL/UNIT - 1);
        }
        return (struct meta *)meta;
    }
#### nontrivial_free
关于nontrivial_free()函数很重要 ，这里尽量详细说明
    static struct mapinfo nontrivial_free(struct meta *g, int i)// i = idx
    {
        uint32_t self = 1usizeclass;
        uint32_t mask = g->freed_mask | g->avail_mask;//mask=已经被free的chunk+使用中的chunk
        if (mask+self == (2ulast_idx)-1 && okay_to_free(g)) {//okay_to_free 检测是否可以被释放
            // 如果group里的chunk都被释放或可以使用 并且可以释放 就回收meta
            if (g->next) {// 如果队列中 有下一个meta
                assert(sc next  是指的刚刚出队meta 的下一个meta
                if (activate_new && ctx.active[sc])
                    activate_group(ctx.active[sc]);//如果有下一个meta 直接激活 然后修改avail_mask 标志位
            }
            return free_group(g);
        } else if (!mask) {// mask==0 group chunk 空间已被完全使用
            assert(sc freed_mask, self);// 修改对应 的freed_mask 标志 ，表示着对应的chunk 已被释放
        return (struct mapinfo){ 0 };
    }
    static inline void dequeue(struct meta **phead, struct meta *m)
    {
        if (m->next != m) {
            m->prev->next = m->next; // 这里存在指针互写 在 prev 所指地址上 写入next 指针
            m->next->prev = m->prev; // 在next 所指地址上 写入prev 指针
            if (*phead == m) *phead = m->next;// 队列头如果为m 那就更新为m->next
        } else {
            *phead = 0;
        }
        m->prev = m->next = 0; // 清理m(meta)的头尾指针
    }
**dequeue** 触发条件
> self = 1  如add(1,0x20) 再free(1) 就会使得meta 被回收
2.avail_mask=0, freed_mask 表示只有 1个 chunk 没被 释放，这时释放的chunk 就应该是那最后一个chunk
如下面情况 avail_mask ==0 free_mask=63=00111111 last_idx = 6
已经释放6 个chunk 还有最后一个chunk没被释放 在释放最后一个chunk 时会触发dequeue使得对应meta出队
3.如果发现这个group中所有的chunk要么被free, 要么是可用的, 那么就会回收掉这个group，调用dequeue从队列中出队
### 0x02 利用
一般有如下几种利用方法，核心原理都是构造假的chunk 索引到假的group 从而所引导假的meta
或覆盖group 中指向meta 的指针 覆盖为假的meta ，然后 **使得假的meta dequeue 最终实现unlink**
(构造fake_meta 需要先泄露 secret 校验值)
#### dequeue 的两种流程
**一、**
通过构造假的meta 满足各种条件 通过以下流程
free()->nontrivial_free()->dequeue
这里通过free 到 dequeue
**二、**
通过realloc 里也带有free
realloc()->free(old)->nontrivial_free()->dequeue
#### 伪造meta后控制程序流的方法
注意: musl 是没有malloc_hook和 free_hook 这种一般的hook 位
且musl 程序的IO_FILE 结构体格式和libc 不一样 没有IO_jump_t的vtable
但是存在 **read，write，seek，close** 四个函数指针
**在下一篇文章musl 大总结+源码分析 Two中会结合最近几场大型比赛的题 进行总结**
下面粗略讲一下思路
  1. 伪造meta 后满足各种条件 使得其进入dequeue 通过unlink,构造prev next 实现 任意地址指针互写 
通过任意地址互写指针，向stdout_used 写入我们伪造的fake_stdout地址， 通过IO_FILE 劫持程序执行流
到我们布置好的fake_stdout 上，可以找IO_FILE 里的一些函数 如最近学习exit puts
这种方式可以先 在fake_stdout上布置rop_chain 然后通过栈迁移的gadget 利用FSOP 劫持程序到布置的fake_stdout上
2、第二种方式更麻烦 也是伪造fake_meta 也是任意地址指针互写，先进行布局使得 fake_meta dequeue 实现unlink，
在利用指针互写 修改fake_meta 中的mem(mem 就是group 区域) ，把mem 修改为我们想要的地址，
然后让fake_meta 通过queue 入队，可以实现任意地址分配的
然后同样是打 IO_FILE 通过修改stdout stdin 和stderr 结构体 劫持程序流