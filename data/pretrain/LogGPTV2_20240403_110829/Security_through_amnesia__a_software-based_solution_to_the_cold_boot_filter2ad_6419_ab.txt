and under the constraint that RAM not be used for work-
ing storage proved, predictably, to be a signiﬁcant engi-
neering challenge.
aes encrypt and aes decrypt work similarly as
the encryption and decryption operations are nearly sym-
metric. There are 16 registers available for use on x86-
64. Of these, RSP is the stack pointer and must always
point to the stack, so it is not available for our use. We
use RBP to point to the encryption or decryption func-
tion, depending on which operation we wish to perform.
The 16 bytes of partially encrypted plaintext or partially
decrypted ciphertext are moved from EAX, ECX, R10D,
and R11D to EBX, EDX, R14D, and R15D during the per-
formance of a single round of encryption or decryption.
The routine performing a single round of encryption or
decryption uses R8, R13, RDI, and RSI as temporary
registers. The round key is stored in R9 and R12 while
each round is performed. See Figure 2 for an illustration
of Loop-Amnesia’s register usage.
Thus, every general-purpose integer register available
in the x86-64 instruction set is in use during the encryp-
tion and decryption subroutines. Since the 32-bit x86 ar-
chitecture has only 8 integer registers available, adapting
this technique to 32-bit x86 would likely require the use
of the MMX or SSE registers. Adopting the technique
to a RISC architecture with an abundance of general-
purpose registers, however, would be straightforward.
8Performance problems due to bus latency and TPM processor
speed would plague even a hypothetical TPM implementation support-
ing AES or another symmetric encryption algorithm.
aes set key is the routine to initialize an AES con-
text structure with a given key. Our implementation gen-
erates the master key, if necessary, and initializes the
AES context structure in RAM with the ﬁrst and last
round keys, ﬁrst encrypting each with the master key.
6 Veriﬁcation of Cold-Boot Immunity
Justiﬁcation
6.1
A system will be immune to a cold-boot attack if, when
the system is running normally (i.e., not including di-
rectly after the input of a key to the system), no key data
is ever stored to RAM. From the perspective of the x86-
64 assembler programmer, key data could only be stored
to RAM due to one of the following occurrences:
1. An explicit store, including a stack push instruction.
2. A taken interrupt causing registers with key data to
be stored to the interrupt stack.
A review of
the code in aes encrypt and
aes decrypt easily shows that no register containing
part of any master key, volume key, or round key is ever
stored to RAM. Moreover, interrupts are disabled before
the master key is read out of the MSRs and only enabled
after registers containing key data have all been zeroed,
so it is theoretically impossible for Loop-Amnesia to be
vulnerable to the cold-boot attack given its structure.9
While perhaps not strictly necessary for immunity to
the cold-boot attack, it is also not desirable that partially
encrypted ciphertext (such as after one round of encryp-
tion) be stored to RAM as an attacker may be able to use
cryptanalysis against such a degenerate version of AES
to recover the volume key. Loop-Amnesia only stores
fully encrypted ciphertext or fully decrypted plaintext to
RAM, thwarting such an attack.
6.2 Correctness Testing
We performed correctness testing on an AMD Athlon64
X2 Dual Core Processor 3800+10. For convenience, we
used the Linux /dev/mem device to inspect the physical
RAM of this machine, rather than actually replicating
the cold-boot attack ourselves. Using this methodology,
we were able to extract the secret key from loop-AES.
When using Loop-Amnesia, we found neither the master
key nor volume key present in RAM. We did, however,
ﬁnd data equivalent to the volume key encrypted with the
master key present in RAM, as we expected.
9Non-maskable interrupts, or NMIs, cannot be disabled by soft-
ware, and it is therefore theoretically possible for key data to leak to
RAM if NMIs must be considered. We further discuss the problem of
non-maskable interrupts in §8.3.
10using only one core, for the reasons mentioned in §5
5
Figure 2: Register Usage of Loop-Amnesia (2 rounds of 10 shown)
7 Performance
7.1 Benchmarking
We compare Loop-Amnesia against three other disk en-
cryption methods. Our results are shown in Figure
3.
“Xornesia” refers to a modiﬁed version of Loop-
Amnesia which encrypts the disk volume keys in RAM
by XORing them with the master key instead of perform-
ing full AES. Xornesia continues to use full AES when
using the disk volume keys to do encryption and decryp-
tion of user data. We use Xornesia to isolate the over-
head caused by repeated calculation of the key sched-
ule, which is still present in Xornesia, from the overhead
caused by the need to repeatedly decrypt the disk volume
keys, which is not. “AES” refers to the loop-AES 128-bit
AES implementation, with which we are fully compati-
ble. We use this to measure the overhead of our Loop-
Amnesia implementation relative to state-of-the-art disk
encryption software using an optimized implementation
of the same algorithm. “Naked” refers to a simple loop-
back mount with no encryption whatsoever. We use this
as our baseline in order to eliminate from consideration
the overhead of a loopback device.
The benchmarks are small, disk-intensive shell op-
erations. dd writes a 900MB ﬁle consisting entirely
of zeroes to disk. xz untars the Linux kernel from an
xz-format archive. The “ﬁnd” benchmark searches the
Linux kernel source tree for instances of a particular
word. “noatime” is the same as “ﬁnd” but done on a
ﬁlesystem mounted with an option to disable the record-
ing of the time of last access. “Cold” benchmarks are
done with the disk cache cleared; “warm” benchmarks
are done after the disk cache has been primed by per-
forming the same benchmark immediately before the
test. We do not report numbers for warm xz as the CPU
component of decompression made this test a poor mea-
sure of disk performance. We formatted the encrypted
loopback device with the ext2 ﬁlesystem for all tests and
6
RAXRBXRCXRDXRBPRDIRSIRSPR8R9R10R11R12R13R14R15ksc4C0K0/K1C0K0/K1RTTRJJC0C0JJK0/K1K0/K1backup_keyC0K1C0K1RJJRJK1C0C0K1JK1K1fwd_rndC0/JK1/C1C0/JK1/C1RTTRTK1C0/JC0/JK1TK1/C1K1/C1restore_keyK1C1K1C1RJJRJJK1K1JJC1C1ksc4K1/K2C1K1/K2C1RTTRJJK1/K2K1/K2JJC1C1backup_keyK2C1K2C1RJJRJK2K2K2K2JC1C1fwd_rndK2/C2C1/JK2/C2C1/JRTTRTK2K2/C2K2/C2K2TC1/JC1/JC#: ciphertext round #K#: # round keyR: reservedT: temporary usageJ: junk dataksc4: generate next encryption round key from currentbackup_key: copy entire 128-bit key into 2 64-bit registers(n.b.: code uses 32-bit registers elsewhere  to take advantage of superscalar archs)fwd_rnd: performs one round of encryptionrestore_key: copy 128-bit key to 4 32-bit regs (from 2 64-bit)Figure 3: Loop-Amnesia Performance
used a single-core laptop with an Intel Celeron 540 at
1.8GHz with 1GB of RAM for benchmarking. The disk,
a Hitachi HTS54258 (5400 RPM), experimentally per-
forms reads at 725MB/s from the disk cache (on CPU)
and at 44MB/s from the disk buffer (on disk micro-
controller). Our results show that, on average, Loop-
Amnesia introduces a slowdown of approximately 2.04x
relative to Loop-AES and 2.23x relative to an unen-
crypted disk.
We also ran a simple unit test pitting Loop-Amnesia,
Xornesia, and Loop-AES against each other, graphed in
Figure 4. Since this is a CPU test, not a test of perfor-
mance in practice, this provides a measure of the the-
oretical worst potential overhead Loop-Amnesia could
cause, which would occur if disk accesses were free and
performance of an encrypted ﬁlesystem was therefore
bound entirely by CPU speed. The times given are for
10 million encryption and decryption operations. The
theoretical worst-case slowdown of Loop-Amnesia rela-
tive to Loop-AES was found to be 3.77x.
7.2 Analysis
While we would have preferred Loop-Amnesia to have
less of a performance impact, we believe that this over-
head is acceptable given the unique beneﬁt we provide. It
is also worth noting that, while we designed these bench-
marks to stress the disk subsystem, disk access speed
does not play a major role in overall performance for
many computing applications. The author has been us-
ing Loop-Amnesia for several months on both the laptop
used for conducting the benchmarks and on another ma-
chine and has not noticed an appreciable decline in per-
formance on either machine for interactive desktop use.11
Our overhead comes from two sources. First, we must
perform two cryptographic operations for each single
cryptographic operation we are called on to perform by
11The machines did not previously use any form of disk encryption.
7
Cold ddWarm ddCold xzCold findWarm findCold noatimeWarm noatime0102030405060708090AmnesiaXornesiaAESNakedsecondseven an attacker with user-level access to the machine.
8 Limitations
In this section, we discuss some limitations and potential
vulnerabilities of both our approach and of the current
implementation of Loop-Amnesia.
8.1 Architecture Dependence
Our approach is inherently architecture-dependent and
limited to encryption systems with a kernel-mode imple-
mentation. An assembly-language implementation must
be completed for every combination of CPU architecture
and encryption algorithm needing support.
However, we nevertheless feel our approach is appli-
cable to a wide variety of use cases. Encryption algo-
rithms are small, self-contained pieces of code which
only need be written once. Our implementation already
supports a secure and widely used algorithm for the most
common desktop and server CPU architecture. We ex-
pect that vendors will have the resources to adapt their
existing encryption algorithm implementations – which,
as in the case of loop-AES, may have already been imple-
mented in assembly langauge for performance purposes
– to use the Loop-Amnesia method for countering cold-
boot attacks if there is even moderate institutional de-
mand.
8.2 Functionality Limitations
As the CPU registers, including the MSRs, are cleared
when a computer is suspended to RAM, we cannot sup-
port suspension to RAM. It would be possible for an im-
plementation of our technique to copy the master key
to RAM before allowing the computer to suspend, but
this would be ill-advised: in such an implementation, the
contents of the master key would be at risk of discovery
by a cold-boot attack if the attacker gained access to the
suspended computer.
8.3 Potential Effectiveness Issues
Espionage An attacker able to install a keystroke log-
ger or otherwise tamper with the victim computer may
be able to deduce the key through espionage. While we
do not protect against a keystroke logger, the use of two-
factor authentication, supported by loop-AES and Loop-
Amnesia, could reduce its effectiveness, and a trusted
path [37] execution framework could be used to prevent
an attacker from tampering with unencrypted binaries
used to mount the encrypted disk.
Figure 4: Amnesia, Xornesia, and AES CPU time
the loop-AES framework. Speciﬁcally, we must decrypt
the device key with the master key, then use this de-
crypted key to perform the cryptographic operation orig-
inally requested (either encryption or decryption of a 16-
byte block of data). Xornesia stores device keys XORed
with the secret key rather than performing AES to en-
crypt the device keys, therefore cutting out the overhead
of two cryptographic operations for every single act of
encryption or decryption. Our second source of over-
head is the necessity of generating round keys on-the-ﬂy;
loop-AES pregenerates these and keeps them within the
AES context structure.
Though Xornesia has signiﬁcantly lower overhead, we
do not recommend the use of Xornesia instead of our
original algorithm as doing so would weaken our security
guarantee. An adversary able to choose the device key
for an encrypted loopback device on the system would be
able to derive the master key by performing the cold-boot
attack and examining the encrypted device key.12 From
this, the attacker could discover the keys for encrypted
loopback devices he did not conﬁgure. We felt that our
method of defeating the cold boot attack should thwart
12It may also be possible to ﬁnd the secret key by performing crypt-
analysis on the ﬁrst and last round keys in RAM, but we could negate
this vulnerability by storing only the last round key in RAM and com-
puting the ﬁrst round key from the last whenever encryption is required.
This would still be faster than performing full AES.
8
AmnesiaXornesiaAES012345678910secondsKey Information in Userspace According to the de-
veloper of loop-AES, the userspace portions of the cryp-
tographic system of which Loop-Amnesia is a part will
overwrite userspace key material with zeroes after trans-
mitting it to the kernel [31]. However, since key material
is transmitted through a UNIX pipe, it may still be avail-
able in the buffer unless the pipe is zeroed by the kernel
after use; this is currently not done.
pendence on extreme luck in timing. However, if this at-
tack does prove to be a concern, modifying the operating
system’s interrupt handler to scrub the general-purpose
registers from RAM after receiving a non-maskable in-
terrupt would be sufﬁcient to protect against it. This
would have no deleterious side effects as the hardware
will have faulted, so the CPU will never resume normal
execution.13
Cached Data Large amounts of decrypted data may be
cached to RAM by the operating system, and our ap-
proach does not protect this data against a cold boot at-
tack. However, it is possible for a user to manually clear
the Linux disk cache by writing to a special ﬁle [4]. Pe-
riodically writing to this ﬁle from userspace, therefore,
could mitigate the effectiveness of this attack at the ex-
pense of performance if the Linux kernel clears pages
when they are freed (instead of when they are allocated).
We have not checked whether the Linux kernel does in
fact clear freed pages, but it would be simple to modify
the operating system to do so.
JTAG Many processors implement a standardized de-
bugging infrastructure called the Joint Test Action
Group, or JTAG. By sending signals to a CPU over
JTAG, a hardware developer is able to test the CPU’s
functioning. JTAG is commonly used in verifying that
a particular CPU is not defective before releasing it for
purchase. Because it is possible to use JTAG to dump
the internal registers of a CPU, an attacker able to ac-
cess the JTAG debug port may be able to read the Loop-
Amnesia master key from the CPU’s MSRs. Fortunately,
it is rare for the JTAG debug port to be wired out for
x86 processors [7].
In the rare case that a JTAG port
is available on an x86 machine, we would recommend
that a user concerned about this remove or destroy the
JTAG port and/or blow the JTAG security fuse. Either of
these actions would disable an attacker’s ability to access
JTAG [24].
Non-Maskable Interrupts We take care to disable
interrupts before reading the master key into general-
purpose registers and to reenable them only after the key
has once again been erased from all general-purpose reg-
isters. However, some interrupts, called non-maskable
interrupts (NMIs), cannot be disabled. These interrupts
are usually caused only by hardware faults. Since the
general-purpose registers are stored to RAM when an in-
terrupt is taken, an attacker able to introduce a hardware
fault during the brief time periods when key material is
in the general-purpose registers would be able to read
the master key. We consider such an attack unlikely to
prove practical, primarily due to its complexity and de-
9
9 Related Work
9.1 Lest We Remember: Cold-Boot At-
tacks on Encryption Keys
Halderman et al. discussed some forms of mitigation
in [23], including deleting keys from memory when an
encrypted drive is unmounted14, obfuscation techniques,
and hardware modiﬁcations such as intrusion-detection
sensors and epoxy-encased RAM. Halderman et al. ad-
mit that they do not present a full solution applicable to
general-purpose hardware.
While special-purpose hardware modiﬁcations may be
effective, such hardware adds cost and may not be avail-
able to many users of disk encryption; a solution for com-
modity hardware is required. As the cold-boot attacker
is given a copy of all RAM, including the program text
used to perform encryption and decryption, we doubt that
obfuscation would prove effective.
9.2 AESSE
A paper at Eurosec 2010 [26] discussed a potential solu-
tion to the cold boot attack, in which a single encryption
key was stored in the MMX registers of the CPU and
MMX register access was disabled for user-level code.
Encryption can then be performed by using MMX or
SSE instructions in kernel mode to perform AES encryp-
tion or decryption. The method proposed causes an al-
gorithmic performance slowdown of approximately 6x.
In addition to having worse performance characteristics
than Loop-Amnesia, AESSE also does not support mul-
tiple disk encryption keys, since only one encryption key
schedule may be stored inside the MMX registers. Dis-
abling access to the MMX registers also causes com-
patibility problems with userland software that requires
MMX and performance slowdowns for userland software
that would make use of MMX if available but cannot be-
cause of AESSE.
13Our prototype implementation does not modify the OS interrupt
handlers.
14this is already done in loop-AES according to [31]
9.3 Braving the Cold Black Hat Talk
A talk [25] at Black Hat in 2008 discussed various meth-
ods of mitigating the effects of the cold boot attack. Most
of these mitigation strategies are discussed elsewhere;
however, one contribution of this talk is a suggestion that
motherboard temperature sensors be used to detect at-
tempts to cool RAM and take protective measures, such
as scrubbing the keys.
This talk also proposed a potential solution to the cold
boot attack. The researchers suggested that the key could
be stored in RAM only as the product of the hash of
a large block of bits. The hope is that at least one of
these bits will ﬂip during the performance of the cold
boot attack, preventing its success. This strategy, if im-
plemented, would likely suffer from severe performance
problems as a large hash would need to be calculated ev-
ery time an encryption key needed to be accessed. The
talk also discussed “caching” the encryption key inside
the MMX registers, but it was unclear from the talk how
such a caching system would operate.
9.4 Frozen Cache