# A Strategy for Testing MetaObject Protocols in Reflective Architectures

**Authors:**
- Juan-Carlos Ruiz-Garcia
- Pascale Th√©venod-Fosse
- Jean-Charles Fabre

**Affiliation:**
LAAS-CNRS  
7, Avenue du Colonel Roche - 31077 Toulouse Cedex 4, France  
Emails: {ruiz, thevenod, fabre}@laas.fr

## Abstract
Reflective architectures, which separate concerns, are highly valuable for developing dependable systems. However, the lack of validation work on these architectures raises questions about their practical use. This paper introduces an incremental testing strategy for the core component of reflective architectures: the MetaObject Protocol (MOP). The approach aims to reduce testing effort by gradually increasing the observability and controllability of the MOP under test. This strategy allows for the reuse of previously tested reflective mechanisms to verify the remaining ones. Each reflective mechanism in the MOP is associated with a different testing level, and for each level, we define the test objectives and the required test environment. The feasibility of this approach is demonstrated using a real MOP implemented in Open++ and extracted from the FRIENDS architecture, which is designed for CORBA-based dependable systems. Initial test experiments revealed several implementation errors.

## 1. Introduction
Dependable systems must meet non-functional requirements that can vary between system instances and over the system's operational life. These systems often have long lifetimes and undergo numerous changes in both functional and non-functional requirements. This situation necessitates design techniques that support dynamic changes within the system.

Reflection is a promising design concept for addressing this issue. It has been successfully applied in various domains, including programming languages, operating systems, and middleware. Reflection separates the functional and non-functional mechanisms of a system, making it particularly useful for dependable systems. The composition of these mechanisms is governed by a MetaObject Protocol (MOP), which specifies the reflective capabilities of the system architecture. While reflection simplifies the evolution of dependable systems, there is a lack of work on verifying MOP-based reflective architectures.

Previous research has focused on formal models for verifying high-level properties in reflective architectures, but these models are too generic to identify specific implementation issues. Testing, as a dynamic verification technique, is essential for complementing these formal models. This paper presents a testing strategy for MOP-based reflective architectures, focusing on the MOP itself. The strategy is designed to be generic and applicable to different MOP-based architectures, independent of specific implementations.

## 2. Background on Reflection
### 2.1. Definition and Structure
"Computational reflection" refers to a system's ability to perform computations about its own computation, potentially affecting it. Reflection enables a system to be structured into two layers: the base-level, which executes application components, and the meta-level, which handles non-functional requirements. The meta-level receives an image of the base-level's structural and behavioral features, and any change in one layer affects the other.

### 2.2. Reflective Architectures and MOPs
From a design perspective, four processes are defined to observe and control the base-level features at the meta-level:
- **Reification:** Exhibits the occurrence of base-level events.
- **Introspection:** Retrieves base-level structural information.
- **Behavioral Intercession:** Controls the base-level behavior.
- **Structural Intercession:** Controls the base-level structure.

In most reflective systems, interactions between the base-level and meta-level are managed by a MetaObject Protocol (MOP). MOPs define the rules governing the use of reflective mechanisms, handling interactions between objects and metaobjects. Various MOPs, such as those in MAUD and GARF, have been used to implement fault-tolerant mechanisms. The F!IE5i@S architecture uses a more sophisticated MOP that allows both behavior and structure to be observed and controlled from the meta-level.

### 2.3. MOP Description
A generic MOP for implementing fault-tolerant mechanisms at the meta-level provides a meta-model expressed in terms of method invocations and object states. Objects communicate via method invocations, which are intercepted by the metaobject using reification. This interception allows the metaobject to insert pre- and post-computation, such as checking access rights and authorizing or denying method execution.

## 3. Testing Strategy for MOPs
The proposed testing strategy addresses four fundamental problems:
1. **Order of Testing Reflective Mechanisms:** Define successive testing levels to incrementally verify the protocol mechanisms, allowing for the reuse of already tested mechanisms.
2. **Test Objectives for Successive Levels:** Focus on verifying the expected properties of the reflective mechanism at each testing level.
3. **Conformance Checks:** Determine whether the MOP passes the tests by producing correct results for the test case input values.
4. **Design of Test Environments:** Create environments that address observability and controllability issues, particularly those related to object encapsulation.

## 4. Feasibility Demonstration
The feasibility of the testing strategy is demonstrated using a real MOP extracted from the FRIENDS architecture, which is designed for CORBA-based dependable systems. Initial test experiments were conducted, revealing several implementation errors.

## 5. Related Work
This section discusses the relationship of this work to previous research, highlighting the contributions and differences.

## 6. Conclusions
This paper presents an incremental testing strategy for MOPs in reflective architectures, aimed at reducing testing effort and ensuring the reliability of MOP-based systems. The strategy is demonstrated to be feasible through initial test experiments, which uncovered implementation errors.

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.