questions in our problem space.
A. SDN/OpenFlow Background
Software-Deﬁned Networking (SDN) has emerged as a
promising technology to innovate the ossiﬁed network infras-
tructure. This paradigm decouples the control and data planes,
thus allows for sophisticated and ﬂexible control plane trafﬁc
management. As the most widely used realization of SDN,
OpenFlow deﬁnes an interface between the control plane and
the data plane.1
Figure 1 depicts the operation of an SDN/OpenFlow net-
work. A switch contains simple forwarding fabrics in the data
plane (for physical ports) and forwarding rules for ingress
packets to look up where to transmit
the packets among
the ports. If a ﬂow rule matches a speciﬁc packet, the data
plane executes one of the following actions: (i) forward the
packet, (ii) drop the packet, or (iii) send the packet to the
control plane. If no rule matches, the switch sends a new
ﬂow request (i.e., Packet-In message) to the controller for
a ﬂow rule installation. The control plane manages the data
plane by instructing the installation of new ﬂow rules via
Flow-Mod messages. The control plane keeps track of the
physical information, such as ports of connected switches via
Port-Status messages. Such physical information facilitates the
ﬂow rule decision-making process. Additionally, the control
plane maintains a holistic view of the network by requesting
and retrieving link layer discovery protocol messages (LLDP)
which aid in the construction of network topology. Lastly,
messages such as request/reply (i.e., Stat-Request/Reply) are
used to check the statistics of trafﬁc and Packet-In messages.
The messages provided by the control plane are, in turn, used
by control applications which provide higher order logic for
network control. The applications consist of programmable,
software logic which provides SDN network management
services. The boundary between the network applications and
the control plane protocol messages is commonly referred to
as the Northbound API.
B. Motivating Examples
A commonplace BYOD scenario grants employees the
ability to utilize their personal devices in the workplace. By
1In this paper, we use SDN and OpenFlow interchangeably.
3
Switch Controller Switch	
  Host Host Host Data	
  Plane	
  Control	
  Plane	
  OpenFlow Network	
  Services	
  API Applica;ons	
  Network	
  Services Business	
  Apps •
need a new security framework to handle BYOD-
speciﬁc access control management.
Can we apply the legacy SDN infrastructure?
The SDN infrastructure requires network devices (i.e.,
switch and router) to be SDN-enabled. While the con-
troller can be deployed on existing commodity hard-
ware, underlying network devices must still be SDN-
enabled in order to construct programmable/SDN net-
works. For large networks, upgrading or switching
to SDN-enabled hardware can be costly. Even if we
assume that the organization is already armed with
SDN infrastructure, it is still insufﬁcient to enable
ﬁne-grained application control. This is because ex-
isting SDN networks have difﬁculty in distinguishing
the source/destination of application packets to/from
network devices. Furthermore, many modern BYOD
devices are equipped with multiple physical/logical
network interfaces capable of connecting to different
types of networks (e.g., 3G/4G, private networks using
WiFi direct or device pairing). This leads to a loss
of global network visibility in the enterprise network
because legacy SDN controllers do not manage trafﬁc
on such additional networks/interfaces.
• How much granularity we should provide? Existing
network information such as layer 3 and above is
required to implement basic security policies. How-
ever, this information is not sufﬁciently granular for
providing advanced security policies. For example, it
is necessary to include layer 2 header ﬁelds in order
to inspect and control L2VPN and VLAN tags. Such
information is useful to network administrators and
security middle-boxes such as intrusion detection sys-
tems (IDS). Moreover, network ﬂow information alone
does not provide a full picture of BYOD devices. In
order to gain a holistic view of device activity we need
to couple application information and application-
aware user contexts with network ﬂow information.
III. SYSTEM DESIGN AND IMPLEMENTATION
In this section, we present the design and implementation
of our PBS system, which mainly includes PBS-DROID, an
Android version of PBS client, and PBS CONTROLLER. With
consideration for the issues described in Section II, we ﬁrst
summarize our design goals as follows:
Fine-grained Access Control. Our system aims to provide
ﬁne-grained access control
to application-speciﬁc network
ﬂows and extraction of rich application-speciﬁc details such
as context and layer-2 information.
Dynamic Policy Enforcement. Our system aims to provide
enterprise administrators with the ability to enforce dynamic
access control at run-time based on application-speciﬁc policy
and network behavior.
Network-wide Programmability. Our system aims to pro-
vide a programmable network-wide policy enforcement system
to enterprise network administrators.
Minor Performance Overhead. Targeting mobile devices,
our system aims to minimize performance overhead and re-
source consumption.
4
Fig. 2: Abstraction of PBS-DROID with the SDN concept
A. Trust Model
In this paper, we assume that the enterprise network is
trusted and our system is installed/enforced on BYOD Android
devices previously vetted and authenticated by the administra-
tor. As is common practice in existing MDM solutions ([1],
[3], [5], [6]), the device is only used according to the terms of
use and privacy agreement of the corporate BYOD program.
In addition, the network trafﬁc from the users’ devices is
monitored by IT admins only at the work place as per user
agreement and apps run inside the separate domain (e.g., work
proﬁle in Android for Work and container in KNOX) for
enterprise use. For the purposes of our system design, we
assume that the Android framework, libraries, and the kernel
layer of the Android device are not compromised, and the
Android OS is trusted. We also assume that the device does
not have root privileges. This assumption is fully valid given
that all hardware vendors disable root privileges on devices
prior to distribution. We also assume that the device has several
other apps that the user has installed in a private domain other
than enterprise-allowed apps. In addition, the communication
between PBS-DROID and PBS CONTROLLER is secured (e.g.,
by SSL). PBS does not deal with the security risks related
to data encryption and storage, which are handled by existing
complementary MDM solutions. Also, some controller-speciﬁc
deployment and scalability issues (e.g., physical/logical con-
ﬁgurations/distributions, distributed control planes, high avail-
ability) are out of the scope of this paper.
B. Modeling and Coupling Inside the Device
In this section, we describe the core design concept that
facilitates our system’s application-ﬂow management on the
mobile device. We draw a parallel between the SDN data
plane switch and our design, which embraces the concept
of a “virtual” switch as shown in Figure 2. While an SDN
data plane facilitates communication amongst a set of network
devices via a port-host mapping, a “virtual” switch provides
communication between virtual ports and software-entities.
To enable application-ﬂow management, we treat all mobile
device applications and network interfaces (e.g., WiFi, 3G/4G)
as network port entities on a virtual switch. By mapping
applications and network interfaces to unique virtual ports,
we enable ﬂow management of all application network traf-
ﬁc inside of our virtual switch. This allows for easy ﬂow
management and efﬁcient application ﬂow isolation, as well
as the utilization of existing SDN concepts, which readily
function in data plane switches. Furthermore, we couple device
context information, such as time and GPS location, with each
Server So&ware	
  Switch vport1	
  vport2	
  vport3	
  vport4	
  App	
  A App	
  B WiFi 3G/4G Hardware	
  Switch eth1	
  eth2	
  eth3	
  eth4	
  Host	
  A Host	
  B Host	
  C SDN	
  Data	
  Plane PBS	
  Model	
  Inside	
  the	
  Device HW	
  v.s.	
  SW Fig. 3: High Level Architecture
application network ﬂow. In this way, the controller is granted
access to not only application network ﬂow information but
also the context of the application during network activity. This
enables the controller to perform advanced decision making
with ﬁne-grained connection and context information on a per-
app basis for each managed mobile device.
C. Architecture and Operation
As illustrated in Figure 3, our system consists of three key
components: PBS CONTROLLER, PBS-DROID, and BYOD
application.
High Level Composition. First, PBS CONTROLLER pro-
vides the core features needed to facilitate administration
actions such as policy deﬁnition and enforcement. Two core
controller sub-components, Flow Manager and Policy Man-
ager, provide administrators with expanded management oper-
ations. Flow Manager provides transparent ﬂow management,
operating much like existing SDN controllers. While the Pol-
icy Manager implements BYOD-speciﬁc policy management
which cooperates with the Flow Manager. The access to the
managers is exposed by the Southbound and Northbound APIs
to PBS-DROID and controller applications respectively. The
Southbound APIs provide interfaces for registering, removing,
and modifying ﬂow-rules and policies by PBS-DROID. The
Northbound APIs provide interfaces to deﬁne ﬂow rules and
policies, ﬂow handlers, and policy protocol handlers via con-
troller applications.
Second, we provide a BYOD controller application layer
which levies the Northbound APIs to provide a programmable
interface for network management operations to the admin-
istrator. The BYOD application allows operations such as
deﬁning ﬂow rules and policies as well as monitoring and
analyzing ﬂows/packets and running security functions.
Third, PBS-DROID contains Data Plane which is com-
posed of a ﬂow table and network interfaces just as in
the standard SDN architecture, however, PBS-DROID also
includes additional mappings which identify Android appli-
cations and interface bindings as discussed in Section III-B.
The Management Plane component monitors and manages
device contexts, such as time and location. The Policy Engine
maintains the policy table and executes conditional policy
actions according to the device contexts at run-time. For
example, the Management Plane will notify the Policy Engine
of a device location update, which in turn may make a new
policy action by installing a device/app ﬂow rule.
Fig. 4: Operations of PBS
In total, the systems which comprise PBS provide an ex-
tension to the Android platform to run dynamic, ﬁne-grained,
context-aware policy enforcement and network access control.
Sample Operation. To show an example of the operation
of PBS, suppose that we have a device with two applications
installed, a non-business app2 and an enterprise business app
as illustrated in Figure 4. The network administrator speciﬁes
a policy to allow only the enterprise business app to access
a company network via standard wireless interface (WiFi)
while the employee is at work with the device. The controller
enforces this policy by instructing PBS-DROID to install ﬂow
rules on the user device which restrict all user app’s network
communications while the device is in the workplace location
context. When the device leaves the workplace it resumes
normal operation, as common practice in other systems such
as KNOX [7] which provides a work and home mode.
This simple example demonstrates the basic usage of our
system, however, much more sophisticated scenarios with
dynamic device context updates and programmable policies
are possible. For example, because PBS can monitor and
manage extremely ﬁne-grained layer-2 information, we may
implement a VLAN tag on an application speciﬁc basis,
isolating application network trafﬁc without modifying device
network conﬁgurations. The application needs not be aware
of our modiﬁcation,
in its scope of operation the packets
continue to arrive normally. Furthermore, a set of devices can
be dynamically placed on an L2VPN (virtual private network)
during a context switch, such as a location change from one
building to another in the workplace. Lastly, the controller can
monitor all application ﬂows active on the network at real-
time, thanks to the ﬁne granularity of each ﬂow. The controller
can reactively issue rules redirecting app trafﬁc based on
activity, such as suspicious actions like network scanning. Such
features/actions are inspired by existing SDN security work
[24], [22], [20], [21] which addresses network threats using
SDN.
D. System Internals
PBS-DROID incorporates three components from a func-
tional perspective: Abstraction Layer, Data Plane, and Man-
agement Plane (illustrated in Figure 5).
2We assume that a user is allowed to install and run non-business apps
under enterprise permission.
5
  -­‐	
  Context	
  Manager	
  -­‐	
  Policy	
  Engine 	
  -­‐	
  Flow	
  Table	
  -­‐	
  Abstrac9on	
  Interface	
  PBS-­‐Droid	
  Data	
  Plane Management	
  Plane 	
   Policy	
  Manager 	
  Flow	
  Manager	
  PBS-­‐Controller	
  BYOD	
  Applica9on	
  Applica7on	
  Northbound	
  API Southbound	
  API Core	
  Business	
  Server 	
  Enterprise	
  Network Internet PBS WiFi 3G/4G BT Enterprise	
  App Facebook Email … PBS App-­‐level	
  Flow	
  Control User	
  Context WiFi 3G/4G BT … Net	
  Inf. App Security	
  Middlebox Controller app-­‐ﬂow	
  control	
  from	
  layer	