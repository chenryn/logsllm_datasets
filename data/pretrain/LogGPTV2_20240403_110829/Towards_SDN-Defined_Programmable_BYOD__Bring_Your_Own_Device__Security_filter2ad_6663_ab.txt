### Questions in Our Problem Space

#### A. SDN/OpenFlow Background
Software-Defined Networking (SDN) has emerged as a promising technology to innovate the rigid network infrastructure. This paradigm decouples the control and data planes, allowing for sophisticated and flexible traffic management. OpenFlow, the most widely used implementation of SDN, defines an interface between the control plane and the data plane.

**Figure 1: Operation of an SDN/OpenFlow Network**

In an SDN/OpenFlow network, a switch contains simple forwarding fabrics in the data plane (for physical ports) and forwarding rules for ingress packets to determine where to transmit the packets. If a flow rule matches a specific packet, the data plane can:
1. Forward the packet.
2. Drop the packet.
3. Send the packet to the control plane.

If no rule matches, the switch sends a new flow request (i.e., Packet-In message) to the controller for a flow rule installation. The control plane manages the data plane by instructing the installation of new flow rules via Flow-Mod messages. It also tracks physical information, such as ports of connected switches, using Port-Status messages. This information facilitates the decision-making process for flow rules. Additionally, the control plane maintains a holistic view of the network by requesting and retrieving Link Layer Discovery Protocol (LLDP) messages, which aid in constructing the network topology. Messages like Stat-Request/Reply are used to check the statistics of traffic and Packet-In messages. The control applications, which provide higher-order logic for network control, use these messages. These applications consist of programmable software logic that provides SDN network management services. The boundary between the network applications and the control plane protocol messages is commonly referred to as the Northbound API.

#### B. Motivating Examples
A common Bring Your Own Device (BYOD) scenario allows employees to use their personal devices in the workplace. This raises several questions:

- **Security Framework:** Is a new security framework needed to handle BYOD-specific access control management?
- **Legacy SDN Infrastructure:** Can we apply the existing SDN infrastructure? While the controller can be deployed on existing hardware, underlying network devices must still be SDN-enabled, which can be costly for large networks. Even if the organization already has SDN infrastructure, it may not be sufficient for fine-grained application control because existing SDN networks struggle to distinguish the source/destination of application packets.
- **Granularity:** How much granularity should we provide? Basic security policies require layer 3 and above information, but this is not sufficient for advanced security policies. Layer 2 header fields are necessary to inspect and control L2VPN and VLAN tags. Additionally, network flow information alone does not provide a complete picture of BYOD devices. To gain a holistic view of device activity, we need to couple application information and application-aware user contexts with network flow information.

#### III. System Design and Implementation
In this section, we present the design and implementation of our PBS system, which includes PBS-DROID, an Android version of the PBS client, and PBS CONTROLLER. Based on the issues described in Section II, our design goals are:

- **Fine-Grained Access Control:** Provide fine-grained access control to application-specific network flows and extract rich application-specific details such as context and layer-2 information.
- **Dynamic Policy Enforcement:** Enable enterprise administrators to enforce dynamic access control at runtime based on application-specific policies and network behavior.
- **Network-Wide Programmability:** Provide a programmable network-wide policy enforcement system to enterprise network administrators.
- **Minor Performance Overhead:** Minimize performance overhead and resource consumption, especially on mobile devices.

**Figure 2: Abstraction of PBS-DROID with the SDN Concept**

#### A. Trust Model
We assume that the enterprise network is trusted and our system is installed/enforced on BYOD Android devices previously vetted and authenticated by the administrator. As in existing Mobile Device Management (MDM) solutions, the device is used according to the terms of use and privacy agreement of the corporate BYOD program. Network traffic from users' devices is monitored by IT administrators only at the workplace, and apps run inside a separate domain (e.g., work profile in Android for Work and container in KNOX) for enterprise use. We also assume that the Android framework, libraries, and kernel layer are not compromised, and the Android OS is trusted. The device does not have root privileges, and communication between PBS-DROID and PBS CONTROLLER is secured (e.g., by SSL). Security risks related to data encryption and storage are handled by existing MDM solutions.

#### B. Modeling and Coupling Inside the Device
Our system's core design concept facilitates application-flow management on the mobile device. We draw a parallel between the SDN data plane switch and our design, which embraces the concept of a "virtual" switch. While an SDN data plane facilitates communication among network devices via a port-host mapping, a "virtual" switch provides communication between virtual ports and software entities. By treating all mobile device applications and network interfaces (e.g., WiFi, 3G/4G) as network port entities on a virtual switch, we enable flow management of all application network traffic. This allows for easy flow management and efficient application flow isolation, utilizing existing SDN concepts. We also couple device context information, such as time and GPS location, with each application network flow. This grants the controller access to both application network flow information and the context of the application during network activity, enabling advanced decision-making with fine-grained connection and context information on a per-app basis.

**Figure 3: High-Level Architecture**

#### C. Architecture and Operation
Our system consists of three key components: PBS CONTROLLER, PBS-DROID, and the BYOD application.

- **High-Level Composition:**
  - **PBS CONTROLLER:** Provides the core features needed for administration actions such as policy definition and enforcement. Two sub-components, Flow Manager and Policy Manager, provide expanded management operations. The Southbound APIs allow PBS-DROID to register, remove, and modify flow-rules and policies, while the Northbound APIs provide interfaces to define flow rules and policies, flow handlers, and policy protocol handlers via controller applications.
  - **BYOD Controller Application Layer:** Leverages the Northbound APIs to provide a programmable interface for network management operations to the administrator. It allows operations such as defining flow rules and policies, monitoring and analyzing flows/packets, and running security functions.
  - **PBS-DROID:** Contains a Data Plane with a flow table and network interfaces, and additional mappings that identify Android applications and interface bindings. The Management Plane monitors and manages device contexts, and the Policy Engine maintains the policy table and executes conditional policy actions based on device contexts.

**Figure 4: Operations of PBS**

In total, PBS provides an extension to the Android platform to run dynamic, fine-grained, context-aware policy enforcement and network access control.

- **Sample Operation:**
  Suppose a device has two applications installed: a non-business app and an enterprise business app. The network administrator specifies a policy to allow only the enterprise business app to access the company network via WiFi while the employee is at work. The controller enforces this policy by instructing PBS-DROID to install flow rules on the user device, restricting all other app's network communications when the device is in the workplace. When the device leaves the workplace, it resumes normal operation. This example demonstrates the basic usage of our system, but more sophisticated scenarios with dynamic device context updates and programmable policies are possible. For instance, PBS can monitor and manage fine-grained layer-2 information, allowing the implementation of VLAN tags on an application-specific basis, isolating application network traffic without modifying device network configurations. The controller can also monitor all application flows in real-time and reactively issue rules redirecting app traffic based on suspicious activities like network scanning.

#### D. System Internals
PBS-DROID incorporates three functional components: Abstraction Layer, Data Plane, and Management Plane.

- **Abstraction Layer:** Provides an interface for interacting with the underlying system.
- **Data Plane:** Consists of a flow table and network interfaces, with additional mappings for Android applications and interface bindings.
- **Management Plane:** Monitors and manages device contexts, and the Policy Engine maintains the policy table and executes conditional policy actions based on device contexts.

**Figure 5: PBS-DROID Components**

This detailed design and implementation ensure that our PBS system effectively addresses the challenges of BYOD in an SDN environment, providing fine-grained, dynamic, and context-aware network access control.