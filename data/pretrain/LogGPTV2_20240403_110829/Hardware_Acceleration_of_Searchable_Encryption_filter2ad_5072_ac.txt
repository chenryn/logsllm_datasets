De(cid:27)nition 1. We de(cid:27)ne leakage functions(î1,î2) as follows:
1.(,,ë,|1|,…,||)← î1(,è): Given the index and the set of (cid:27)les è (including their
identi(cid:27)ers), î1 outputs the maximum number of keywords, the maximum number of (cid:27)les, the
identi(cid:27)ers ë={1,…,} of è and the size of (cid:27)le|| for1≤≤ (which also implies the size
of its corresponding ciphertext||).
2.((, Query,),Ɗ(,è,,))← î2(,è,,): Given the index, the set of (cid:27)les è and a keyword
 for a search operation at time, it outputs the search pattern and (cid:27)le-access patternƊ.
(): The challenger executesí←(1).  produces(,è) and receives(,)←í(,è)
from the challenger.  makes a polynomial number of adaptive queries∈(,,) to the chal-
lenger. If= is a keyword search query then receives a search token←(í,)
from the challenger. If= is a (cid:27)le addition query then  receives an addition token(,)←
(í,) from the challenger. If= is a (cid:27)le deletion query then  receives a deletion
token←(í,) from the challenger. Eventually,  returns a bit that is output by the
,():  produces(,è). Given î1(,è),  generates and sends(,) to .  makes a poly-
nomial number of adaptive queries∈(,,) to . For each query, is given î2(,è,,).
If= then  returns a simulated search token. If= or=,  returns a
simulated addition token or deletion token ,respectively. Eventually,  returns a bit that is output
De(cid:27)nition 2 (IND-CKA2 Security [9, 18]). Let be a stateful adversary and be a stateful simulator.
Consider the following probabilistic experiments:
experiment.
by the experiment.
10
Remark 1. In De(cid:27)nition 2, we adopt the notion of dynamic CKA2-security from [16], which captures the
The security of IM-DSSE can be stated as follows.
secure in ROM by De(cid:27)nition 2 (CKA-2 security with update capacity).
all PPT adversaries, there exists a PPT simulator such that
A is said to be(î1,î2)-secure against adaptive chosen-keyword attacks (CKA2-security) if for
|Pr[()=1]−Pr[,()=1]| ≤ ()
(cid:27)le addition and deletion operations by simulating tokens and , respectively.
Theorem 1. If is IND-CPA secure, is PRF and is a Random Oracle (RO) then IM-DSSE is(î1,î2)-
Proof. We present the detailed IND-CKA2 security proof for IM-DSSE scheme in Section 2. The
,() experiment as described in De(cid:27)nition 2. In this experiment, maintains listsî,îí and
proof for extended schemes in Section 3 can be easily derived from this proof and therefore, we will
not repeat it.
To begin with, we construct a simulator that interacts with an adversary in an execution of an
set to empty. î is a list of key-value pairs and is used to keep track of(⋅) queries. We denote
← î() and⊥← î() if does not exist in î. îí is to keep track of random
îê to keep track of query results, states and history information, respectively. Initially, all lists are
and update queries,’s replies to those queries and their leakage output from(î1,î2).  executes the
values generated during the simulation and it follows the same as î. îê is to keep track of search
I. Handle(⋅) Queries:←() takes an input and returns a bit as output. Given, if⊥= î()
set $←{0,1}, insert(,) intoî and return as the output. Else, return← î() as the output.
simulation as follows:
II. Simulate(,): Given(,,1,…,,|1|,…,||)← î1(,è),simulates(,) as follows:
1.(,) $←{0,1},←(), insert(,,) intoîê and← ç.({0}||) for1≤≤.
2. For=1,…, and=1,…,
(a)[].←1 and[].←1.
$←{0,1},[,]←(,) and[,].←0.
(b),
3. Output(,), where←(,) and←{,}=1
î1 leaks|1|,…,|| and is a IND-CPA secure scheme, respectively. and have the correct
size sinceî1 leaks(,). Each[,] for1≤≤ and1≤≤ has random uniform distribution, since
(⋅) is invoked with random value,. has the correct distribution, since each has random
uniform distribution, for1≤≤. Hence,  does not abort due to ’s simulation of(,). The
probability that queries(⋅) on any, before provides tois negligible (i.e., 12 ). Hence, also
III. Simulate: Simulator  receives a search query for an arbitrary keyword on time. is given
(, Query,),Ɗ(,è,,)← î2(,è,,).  adds these to îê. then simulates and updates
lists(î,îí) as follows:
Correctness and Indistinguishability of the Simulation:  has the correct size and distribution, since
does not abort.
11
intoîê.
î (as in III-step 8).
$←{0,1} and insert(,,) intoîí. Else,← îí(||).
1. If is inîê, then fetch. Else, $←{0,1},←(),←[]., insert(,î1(,è),)
2. If⊥= îí(||), then
3. If>1, then← îí(||−1),←(,,). Else,←(,).
4.[].←+1.
5. Givenî2(,è,,), knows identi(cid:27)ersë={1,…,}. Set[,]←1 for each∈ ë and rest
of the elements as[,]←0 for each∈{1,…,}ë.
6. If((=(,)∨[,].)=1), then[,]←[,]⊕[,] and insert tuple(||||,[,]) intoî,
where←[]. for1≤≤.
7.[,].←0 for1≤≤.
8.[,]←[,]⊕(||||), where←[]. for1≤≤.
9. Output and insert(,) intoîê.
Correctness and Indistinguishability of the Simulation: Given anyƊ(,è,,), simulates the output of
(⋅) such that always produces the correct search result forë←,.  needs to simulate
the output of(⋅) for two conditions (as in III-step 6): (i) The (cid:27)rst search of (i.e., ?=(,)), since
 did not know during the simulation of(,). (ii) If any (cid:27)le containing has been updated
after the last search on (i.e.,[,]. ?=1), since  does not know the update content.  sets the
output of(⋅) for those cases by inserting tuple(||||,[,]) into î (as in III-step 6). In other
cases,  just invokes(⋅) with(||||), which consistently returns the previously inserted bit from
During the (cid:27)rst search on, each(⋅) outputs[,]=(|||) that has the correct distribution,
since[,∗] of has random uniform distribution (see II-Correctness and Indistinguishability argument).
Let ì={1,…,} be the set of indexes of (cid:27)les containing, which are updated after the last search
on. If is searched again after being updated, then each(⋅)’s output[,]=(|||) has
the correct distribution, since←(,) for indexes∈ ì has random uniform distribution (see IV-
Correctness and Indistinguishability argument). Given that’s always produces correctë for given
Ɗ(,è,,), and relevant values and(⋅) outputs have the correct distribution,  does not abort
during the simulation due to ’s search token. The probability that  queries(⋅) on any(|||)
before querying on is negligible (i.e., 12 ) and, therefore, does not abort due to’s search query.
IV. Simulate ( , ):  receives an update request=(,||,) for an arbitrary (cid:27)le
having at time. simulates update tokens(,) as follows:
1. If is inîê, then fetch(,,). Else set
$←{0,1},←() and insert(,,) intoîê.
2.[].←[].+1,←[]..
$←{0,1} and insert(,,) intoîí, where←[]. for1≤≤.
3. If⊥= îí(||), then
$←{0,1}2 for1≤≤.
4.[,]←(), where
5. Set[,]←[,] and[,].←1 for1≤≤.
6. If=,||, then simulate← ç.({0}||) add into, set←(,) and output .
Else, set←(,), remove from and output .
12
operation always produces a correct result after an update (see III-Correctness and Indistinguishability
argument). Hence,’s update tokens are correct and consistent.
Correctness and Indistinguishability of the Simulation: Given access pattern(,) for a (cid:27)le, checks
the correctness of update by searching all keywords ó={1,…,} in. Since  is given access
patternƊ(,è,,) for a search query (which captures the last update before the search), the search
It remains to show that(,) have the correct probability distribution. In the real algorithm, the
counter is increased for each update as simulated in IV-step 2. If is updated after the keyword
 at row is searched, a new is generated for as simulated in IV-step 3 ( remains the same for
consecutive updates but increases). Hence, the real algorithm invokes(.) with a di(cid:29)erent(||||)
for1≤≤.  simulates this step by invoking(⋅) with and[,]←(), for1≤≤.(,)
have random uniform distribution since has random uniform distribution and update operations are
correct and consistent as shown above. also has the correct distribution since is an IND-CPA
that queries(⋅) on any prior querying on(,) is negligible (i.e.,
122⋅ ) and, therefore, does
V. Final Indistinguishability Argument:(,,) for1≤≤ and1≤≤ are indistinguishable
functions. is a IND-CPA scheme, the answers returned by  to for(⋅) queries are consistent
PPT adversaries, the outputs of() and,() experiment are:
|[()=1]−[,()=1]|≤()
encryption. Hence,  does not abort during the simulation due to ’s update tokens. The probability
not abort due to’s update query.
from real tokens and keys since they are generated by PRFs that are indistinguishable from random
and appropriately distributed, and all query replies of  to during the simulation are correct and
indistinguishable as discussed in I-IV Correctness and Indistinguishability arguments. Hence, for all
4.2 Privacy Levels
The leakage de(cid:27)nition and formal security model imply various levels of privacy for di(cid:29)erent DSSE
schemes. We summarize important privacy notions based on the various leakage characteristics dis-
cussed in [16, 27, 5, 24] with di(cid:29)erent levels of privacy as follows:
ࢫ Size pattern: The number of actual keyword-(cid:27)le pairs.
ࢫ Forward privacy: A search on a keyword does not leak the identi(cid:27)ers of (cid:27)les matching this keyword
ࢫ Backward privacy: A search on a keyword does not leak all historical update operations (e.g.,
ࢫ Update privacy: Update operation may leak di(cid:29)erent levels of information depending on the con-
– Level-1 (L1) leaks only the time of the update.
struction of the scheme. Speci(cid:27)cally, we de(cid:27)ne (cid:27)ve levels of update privacy, in which the level-1
leaks least information while the level-5 leaks the most, as follows:
addition /deletion) on the identi(cid:27)ers of (cid:27)les having this keyword.
for future (cid:27)les.
– Level-2 (L2) leaks L1 plus the identi(cid:27)er of the (cid:27)le being updated, the number of keywords in it
and update type (i.e., add/delete/modify) (e.g., [27]).
– Level-3 (L3) leaks L2 plus if that identi(cid:27)er has same keywords added or deleted previously, and
also when/if the same keywords were searched before (e.g., [5]).
– Level-4 (L4) leaks L3 plus if the same keyword was added/deleted from two (cid:27)les (e.g., [16]).
13
– Level-5 (L5) leaks the pattern of all intersections of everything is added/deleted and whether
the keywords were searched for (e.g., [18]).
Corollary 1. IM-DSSE framework o(cid:29)ers forward-privacy.
Proof (sketch). In IM-DSSE framework, the update involves reconstructing a new column/block of en-
crypted index. The column/block is always encrypted with row keys that have never been revealed
to the server (steps 2–4 in Simulate ( , ))). This is achieved in IM-DSSE and IM-DSSEI schemes
by increasing the row counter after each keyword search operation (e.g., step 4 in Simulate ()) so
that fresh row keys will always be used for subsequent update operations. In IM-DSSEII scheme, since
all cryptographic operations are performed at the client side where no keys are revealed to the server,
it is unable for the server to infer any information in the update, given that the encryption scheme is
IND-CPA secure. These properties enable our IM-DSSE framework to achieve forward privacy.
Corollary 2. IM-DSSEII and IM-DSSEI+II achieve backward-privacy.
Proof (sketch). In most DSSE schemes, the client sends a key that allows the server to decrypt a small
part of the encrypted index during keyword search. The server can use this key to backtrack historical
update operations on this part and therefore, compromise the backward-privacy. In IM-DSSEII and
IM-DSSEI+II schemes, instead of sending the key to the server, the client requests this part and decrypts
it locally. This prevents the server from learning information about historical update operations on the
encrypted index and therefore, allows both schemes to achieve backward-privacy.
One might observe that all developed DSSE schemes in IM-DSSE framework do not leak the update
type (add/delete) on encrypted index since it has the same access pattern on. However, it can be
procedure on both and encrypted (cid:27)les and, therefore, achieves Level-1 of update privacy, where only
entities in), and therefore, achieve the size-obliviousness.
the update time and a column index are leaked. Finally, since keyword-(cid:27)le relationships are represented
by an encrypted incidence matrix, IM-DSSE framework also hides the size pattern (i.e., number of ‘1’
distinguishable due to access pattern on encrypted (cid:27)les. This leakage can be sealed by sending a dummy
(cid:27)le to the server during deletion. This strategy enables both add and delete operations to have the same
5 Performance Analysis and Evaluation
We evaluate the performance of our IM-DSSE framework in real-life networking and system settings.
We provide a detailed cost breakdown analysis to fully assess criteria that constitute the performance
overhead of our constructions. Given that such analysis is generally missing in the literature, this is
the main focus of our performance evaluation. Finally, we give a brief asymptotic comparison of our
framework with several DSSE schemes in the literature.
Implementation Details. We implemented our framework using C/C++. For cryptographic prim-
itives, we used libtomcrypt cryptographic toolkit version 1.17. We modi(cid:27)ed low level routines
to call AES hardware acceleration instructions (via Intel AES-NI library) if they are supported by the
underlying hardware platform. Key generation was implemented using the expand-then-extract key
generation paradigm analyzed in [19]. However, instead of using a standard hash function, we used
AES-128 CMAC for performance reasons. This key derivation function has been formally analyzed and
is standardized. Our random oracles were all implemented via 128-bit AES CMAC. For hash tables, we
employed Google’s C++ sparse hash map with the hash function being implemented by CMAC-based
14
Github repository:
random oracles truncated to 80 bits. We implemented the IND-CPA encryptionç using AES with CTR
cluding IM-DSSE, IM-DSSEI, IM-DSSEII and IM-DSSEI+II, which can be freely accessible via our
mode.
IM-DSSE framework contains the full implementation of all schemes presented in this article in-
=128 for IM-DSSEI and IM-DSSEI+II schemes.
Our implementation supports the encrypted index stored on either memory or local disk. Therefore,
our schemes can be directly deployed in either storage-as-a-service (e.g., Amazon S3) or infrastructure-
as-a-service clouds (e.g., Amazon EC2). For this experimental evaluation, we selected block cipher size
https://github.com/thanghoang/IM-DSSE/
Dataset. We used the Enron email dataset and select its subsets, ranging from 50,000 to 250,000 (cid:27)les
with 240,000–940,000 unique keywords to evaluate the performance of our schemes with di(cid:29)erent en-
crypted index sizes. These selected sizes surpass the experiments in [18] by three orders of magnitude
and are comparable to the experiments in [27].
Hardware. We conducted the experiment with two settings:
(i) We used HP Z230 Desktop as the client and built the server using Amazon EC2 with m4.4xlarge
instance type. The desktop was equipped with Intel Xeon CPU E3-1231v3 @ 3.40GHz, 16 GB RAM,
256 GB SSD and CentOS 7.2 installed. The server was installed with Ubuntu 14.04 and equipped
with 16 vCPUs @2.4 GHz Intel Xeon E5-2676v3, 64 GB RAM and 500 GB SSD hard drive.
(ii) We selected LG G4 mobile phone to be the client machine, which runs Android OS, v5.1.1 (Lollipop)
and is equipped with Qualcomm Snapdragon 808 64-bit Hexa-core CPU @1.8 GHz, 3GB RAM and
32 GB internal storage. Notice that AES-NI library cannot be used to accelerate cryptographic op-
erations on this mobile device since its incompatible CPU, which a(cid:29)ects the performance of our
schemes in the mobile environment as will be shown in the following section.
We disabled the slow-start TCP algorithm and maximized initial congestion window parameters
in Linux (i.e., 65535 bytes) (see [10] for more insights) to reduce the network impact during the initial
phase in case the scheme requires low amount of data to be transmitted.
Performance Results. Figure 1 presents the overall performance in terms of end-to-end cryptographic
delay of all schemes in IM-DSSE framework. In this experiment, we located client and server in the same
geographical region, resulting in the network latency of 11.2 ms and throughput of 264 Mbps. We refer
to this con(cid:27)guration as a fast network setting. Notice that we only measured the delay due to accessing
the encrypted index, and omitted the time to access encrypted (cid:27)les (i.e., set) as it is identical for all