sohu.com
Security Features
Anti-recognition
Anti-segmentation
Overlapping characters,
Enligh letters
Overlapping characters,
solid background
Overlapping characters,
Only arabic numerals
Occluding lines, overlapping,
only Enligh letters
Rotation, distortion, waving
Different font styles,
varied font sizes,
rotation, waving
Character rotating,
distortion and waving
Varied font size, color,
rotation, disortion and waving
Overlapping characters,
Enligh letters
Varied font sizes & color,
rotation, disortion, waving
English letters and
arabic numerals,
overlapping characters
English letters and
arabic numerals,
overlapping characters
English letters and
arabic numerals,
overlapping characters
English letters and
arabic numerals,
overlapping characters
English letters and
arabic numerals,
overlapping characters,
occluding lines
Complex background,
occluding lines,
and overlapping
Rotation and distortion
Rotation and distortion
Varied font sizes,
rotation and distortion
Rotation, distortion, waving
Rotation and distortion
Varied font size, color
and rotation
Excluded Characters
–
0, 1, 5,
D, G, I, Q, U
–
Z
–
0, 1,
I, L, O
0, 1, 2, 7, 9,
D, G, I, J, L, O, P, Q, Z
0,
I, L, O, T,
i, l, o, t, q
1, 9, 0,
D, I, J, L, O, T,
i, j, l, o, t, g, r
0, 1, 5,
D, G, I, Q, U
0, 1,
i, l, o, z
Table 1: Text-based captcha schemes tested in our experiments.
characters are also given in Table 1. When compared to prior at-
tacks, we extend our evaluation to 22 other captcha schemes used
in prior studies. These captcha schemes are listed in Table 4. It
is worth mentioning that while we collected the captchas from
the official websites, many of the captcha schemes we tested are
also used by third-party websites and applications as a security
mechanism.
Synthesizing training captchas. To generate synthetic captchas
for a target scheme, we first initialize the security feature parame-
ters as described in Section 4.1. We then use the initial parameters
to generate the first batch of synthetic captchas which are used to-
gether with 500 real captchas to automatically train our synthesizer.
Once we have trained the synthesizer, we then use it to generate
synthetic samples to learn the preprocessing model and the base
solver. Specifically, we use 20,000 and 200,000 synthetic captchas to
train the pre-processing model and the base solver respectively.
Collecting testing captchas. The real captchas are automatically
collected using a web crawler written in Python. Each collected
captcha is manually labeled by three paid participants (nine partici-
pants in total) recruited from our institution. We use only captchas
where a consensus has been reached by all the three annotators. In
total, we have used 1,500 real captchas for each target scheme. We
randomly divided the collected captchas to two sets, one set of 500
captchas for training our synthesizer and final solver, and the other
set of 1,000 captchas for testing our solver. It takes up to 2 hours
(less than 30 minutes for most of the scheme) to collect 500 captchas
and less than 2 hours to label them by one user. This means that
the effort and cost for launching our attack on a particular captcha
scheme is low.
5.2 Implementation and Evaluation Platforms
Our prototype system4 is implemented using Python. Specifi-
cally, the pre-processing model is built upon the Pix2Pix frame-
work [14], implemented using Tensorflow v. 1.2.1, and the captcha
solver is coded using Keras v. 2.1.2.
We use two different hardware platforms. For training, we use
a cloud server with a 2.4GHz Intel Xeon CPU, four NVIDIA Tesla
P40 GPUs and 256GB of RAM, running Centos 7 operating system
with Linux kernel 3.10. The trained solver is then run and tested
4Code and data will be released at: https://goo.gl/92VxXC
Scheme
Success rate
Running Time per
Captcha (ms)
Base Solver
83%
52%
60%
7%
36.6%
23%
48.6%
40.6%
4.7%
6%
0%
Fine-tuned Solver
92%
86.6%
86%
78%
69.6%
61%
56%
52.6%
44%
34%
3%
43.78
Sohu
4.22
eBay
43.18
JD
4.71
Wikipedia
46.06
Microsoft
3.75
Alipay
3.10
Qihu360
42.81
Sina
3.41
Weibo
41.57
Baidu
Google
4.02
Table 2: The overall success rate and solver running time for
each captcha scheme.
Scheme
Sohu
eBay
JD
Wikipedia
Microsoft
Alipay
Qihu360
Sina
Weibo
Baidu
Google
Captcha Image Ground Truth Solver Output
d4sk
d4sh
934912
BHER
mewsboxes
994912
BFER
mewsbores
XK6NK
XK6VK
B7JK
s34Ea
nG3uu
4TXB
WFIH
B7YK
s3VFa
nG3uv
4TX8
WFEH
irgandoca
igiruloca
Figure 8: Real Google captchas and the synthetic versions
generated by our captcha synthesizer.
on a workstation with a 3.2GHz Intel Xeon CPU, a NVIDIA Titan
GPU and 64GB of RAM, running the Ubuntu 16.04 operating system
with Linux kernel 4.10. All trained models run on the NVIDIA Titan
GPU for inference.
6 EXPERIMENTAL RESULTS
In this section, we first present the overall success rate of our ap-
proach on 11 current captcha schemes, showing that it can break all
the testing schemes – judged by the criterion commonly used by the
captcha community [10] . We then compare our approach against
prior attacks on another 22 text captcha schemes, demonstrating
that our approach significantly outperforms all prior attacks. Fi-
nally, we analyze the working mechanism our approach before
discussing the implications of the attack.
6.1 Evaluation on Current Captcha Schemes
Table 2 shows the success rate given by our base and fine-tuned
solvers, as well as the average time in solving a captcha. All the tests
were performed on real captchas which are not used for training
the solvers. Since the base and the fine-tuned solvers use the same
network structure, there is no difference in their running time. For
each captcha scheme, we report the average running time across
1,000 tested captchas. We observe little variation in the running
time, less than 0.5% across test runs.
Table 3: Example incorrectly labeled captchas.
Our base solver, built from synthetic data, is able to solve most of
the captcha schemes with a success rate of over 20%. This demon-
strates the capability of CNN models in performing image recogni-
tion. However, it gives a low success rate for some of the schemes
such as Weibo (4.7%) and Google (0%). The fine-tuned solver, refined
using transfer learning, significantly boosts the performance of the
base solver. In particular, it improves the success rate for Wikipedia
from 7% to 78%, Weibo from 4.7% to 44%, Alipay from 23% to 61%
and Microsoft from 36.6% to 69.6%. This result shows that transfer
learning in combination of captcha synthesis can reduce the data
collection efforts for building an effective text-based captcha solver.
Furthermore, the fine-tuned solver also improves the success
rate for Google from 0% to 3%. While this success rate is lower than
other schemes because of the strong security features like distorted
characters and dynamic font styles employed by the Google scheme.
The strong security features make it difficult our synthesizer to
generate high-quality synthetic data. This is depicted in Figure 8
where our synthetic captchas are not similar enough to the real
captchas (especially for the font styles). However, 3% is still above
the 1% threshold for which a captcha is considered to be ineffec-
tive [10]. We also note that there is no prior attack can successfully
crack the current Google captcha scheme under this criterion.
Table 3 gives some example captchas that are incorrectly labeled
by our fine-tuned solver. For most of these captchas, our solver only
incorrectly labels one character and the mis-identified character
is similar to the ground-truth character. For example, for the eBay
captcha shown in Table 3, our solver incorrectly label character
“3" to “9" due to character overlapping. For the Google scheme,
our solver often fails to label several characters in the middle due
to excessive character distoration and overlapping. Note that for
(a) Real Google captchas (b) Synthetic Google captchas Figure 9: Examples of the captcha schemes (left) tested in
prior work, and the synthetic versions (right) generated by
our captcha synthersizer. Our captcha synthesizer is highly
effectively in synthesizing captcha images.
many of these incorrectly labeled captchas, our annotators were
also struggling to recognize the characters in the first attempt.
Finally, the running time for solving a captcha using our solvers is
negligible, taking less than 50 milliseconds on a NVIDIA Titan Desk-
top GPU. Overall, our approach can solve all the testing schemes
under the commonly used criterion [10] with a quick running time.
6.2 Compare to Prior Attacks
In this experiment, we compare our approach against four state-
of-the-art attacks [8, 10, 17, 19] on 24 distinct captcha schemes,
including the eBay and Wikipedia schemes from Table 1 and other
22 schemes. To provide a fair comparison, we try to use captchas in
total) that these methods were tested on. Whenever possible, we use
the same dataset or captchas from the original scheme where the
prior work was tested on. For those obsolete schemes (21 out of 24
schemes), we collected the test data from public datasets, or using
captcha generation tools developed by independent researchers.
Specifically, we use (1) public datasets of previous captcha schemes,
(2) online captcha generators, such as captchas.net which was
used by some of the previous captcha schemes, and (3) open-sourced
captcha generators used in the prior work.
For each captcha scheme, we collected 1,500 samples for which
we use 500 for training and 1,000 for testing. Figure 9 gives some
examples of the real captchas and the one produced by our synthe-
sizer. The figure suggests that our synthesizer can produce captchas
that are visually similar to real examples from the target scheme.