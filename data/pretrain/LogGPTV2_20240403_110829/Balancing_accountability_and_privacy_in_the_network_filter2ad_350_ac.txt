Verify() is nearly identical to AIP’s anti-spooﬁng chal-
lenge, the diﬀerence being that an AIP challenge asks, “Is
this packet’s source address spoofed?” whereas verify()
SenderAccountabilityDelegateVeri(cid:127)erPacket Pbrief(P)verify(P)OK1423SenderAccountabilityDelegateVeri(cid:127)erPacket Pverify(P)OK152verify(P)3OK4asks, “Do you vouch for this packet?” In AIP, ﬁrst-hop
routers periodically verify that packets purporting to be
from a particular host are not spoofed. Likewise, in APIP
routers periodically verify that ﬂows are using valid account-
ability delegates and have not been reported for misbehav-
ior. Veriﬁed ﬂows are added to a whitelist whose entries
expire at the end of each veriﬁcation interval (e.g., 30 sec-
onds); if a ﬂow is still active, it is re-veriﬁed. Consider a
sender S, a receiver R, and a router V (“veriﬁer”).
If V
receives a packet P from S to R and the ﬂow S Ñ R is
not in the whitelist, V sends a veriﬁcation packet to S’s
accountability delegate, DS (identiﬁed in the packet). To
avoid buﬀering unveriﬁed packets, V can drop P and send
an error message notifying S that P was dropped pending
veriﬁcation.
The veriﬁcation packet includes P ’s ﬁngerprint plus a MAC
computed with a secret key known only to V . DS now checks
three things: (1) it has received a brief from S containing
FpPq, (2) the accountability address in P is using an SID
assigned to S, and (3) transmission from S to R has not
been blocked via a shutoﬀ (§5.4). If everything checks out,
DS returns a copy of the veriﬁcation packet signed with
its private key to V , which adds S Ñ R to its whitelist.
The protocol, below, shows both ﬁngerprint collection (›)
and recursive veriﬁcation (˛), though only one or the other
would be used in practice. (KV is a secret known only to V ;
K`
is the delegate’s public/private keypair; KSDS is
the symmetric key shared by S and DS.)
{K´
DS
DS
might not be properly verifying its traﬃc can apply business
pressure or possibly dissolve peering relationships if it ﬁnds
an inordinate amount of unveriﬁed traﬃc. Another concern
is that domains might verify traﬃc with a long veriﬁcation
interval (that is, after verifying a packet from a ﬂow, the
same ﬂow is not veriﬁed again for an extended period of
time). This allows malicious ﬂows to do damage even if the
ﬂow’s delegate receives a shutoﬀ() since the ﬂow will not
be blocked until the next veriﬁcation. The impact of long
veriﬁcation intervals could be mitigated if transit networks
also verify traﬃc (see §8.1 for expected time-to-shutoﬀ); af-
ter a shutoﬀ(), the ﬁlter moves toward the sender as closer
routers re-verify the ﬂow. Also, even if routers are slow to
react, APIP still facilitates a long-term ﬁx eventually.
5.4 Shutoff()
Today, when hosts or routers identify a malicious ﬂow,
they can locally ﬁlter packets and work with neighboring
ISPs to stop traﬃc. In APIP, they can also send a shutoﬀ()
request to the attacker’s delegate. This is particularly useful
for receivers, who should have the ﬁnal say as to whether
a ﬂow is wanted or not. The protocol diﬀers from AIP’s
shutoﬀ protocol in two important ways. First, shutoﬀs are
directed to accountability delegates, not to senders. Second
a delegate can not only block the oﬀending ﬂow, but it can
also pursue a long-term ﬁx. The shutoﬀ() protocol is shown
below (between receiver R and S’s delegate DS regarding
packet P from sender S):
Veriﬁer sends error to sender and veriﬁcation to delegate:
Sender transmits packet and brief:
S Ñ R :
P
briefpPq
› S Ñ DS :
V Ñ S :
DROPPED (VERIFYING) || FpPq
V Ñ DS : verifypPq “ Pheader || HpPbodyq
|| MACKV pPheader || HpPbodyqq
tverifypPquKSDS
tVERIFIED || verifypPquKSDS
tVERIFIED || verifypPq || K`
add ﬂow entry to whitelist
˛ DS Ñ S :
˛ S Ñ DS :
DS Ñ V :
V :
Delegate veriﬁes packet and responds:
DS
uK´
DS
There are three points worth noting about this protocol.
First, D returns the original veriﬁcation packet so V does
not have to keep state about pending veriﬁcations. V uses
the MAC to ensure that it originated the veriﬁcation request,
preventing attackers from ﬁlling V ’s whitelist with bogus
entries by sending it veriﬁcations it never asked for.
Second, the delegate needs to know the packet’s destina-
tion address (R) so it can check if traﬃc S Ñ R has been
shut oﬀ. Since briefs only contain ﬁngerprints, the delegate
does not already have this information, so the veriﬁcation
request includes a copy of P ’s header.
It also includes a
hash of the body so the delegate can ﬁnish computing the
ﬁngerprint of packet being veriﬁed to check that it matches
a brief in its cache.
Third, the last line in the protocol adds the ﬂow to the
white list, identiﬁed by its accountability address, destina-
tion address, and ﬂow ID, as described in §5.1.
ISP Participation Though anyone can verify a packet,
APIP is most eﬀective when routers closest to the source
perform veriﬁcation. An ISP that suspects a customer/peer
Sender transmits packet and brief:
P
S Ñ R :
S Ñ DS : briefpPq
R Ñ DS :
Receiver sends shutoﬀ:
shutoﬀpPq “ tPheader || HpPbodyq
|| duration || K`
Rq ““ destpPheaderq
Sender’s delegate veriﬁes shutoﬀ and takes action:
DS :
DS :
check HpK`
block oﬀending ﬂow for duration sec
RuK´
R
Receivers can always shut oﬀ traﬃc directed at them.
When the delegate receives the shutoﬀ(), it checks that
the shutoﬀ() was signed by the private key corresponding to
the recipient of the packet in question (so the shutoﬀ() con-
tains both the victim’s public key and the original packet’s
header; the delegate compares the hash of the public key to
the packet’s destination address). If the veriﬁer is a router
and the shutoﬀ() is signed by an ISP’s key, it might also
be honored, but perhaps only with manual intervention—
if a reputable ISP says one of your clients is attacking its
network, chances are you should listen. After verifying a
shutoﬀ(), the attacker’s delegate responds in two ways.
Short-term ﬁx: To provide the victim immediate relief,
the delegate blocks the oﬀending ﬂow by ceasing to ver-
ify packets from the attacker to the victim. Routers only
save ﬂow veriﬁcations in their whitelists temporarily; when
a router on the path from S to R next tries to verify the at-
tack ﬂow, the delegate responds DROP_FLOW. This means the
attack could last up to a router’s veriﬁcation interval—we
discuss expected shutoﬀ time in §8.1. If delegates work with
ISPs, response time could be shortened by pushing veriﬁ-
cation revocations from delegates to routers. Alternatively,
if we assume widespread shutoﬀ support in NICs, delegates
could send shutoﬀs to directly to attackers, as in AIP.
Long-term ﬁx: Since clients sign contracts with their dele-
gates, a delegate can contact the owner of misbehaving hosts
out-of-band. Since most unwanted traﬃc comes from bot-
nets of compromised hosts with well-intentioned owners [23],
the owner will generally ﬁx the problem, at which point the
delegate can unblock ﬂows from the host. If a client refuses
to comply, the delegate can terminate service or report him
to the authorities.
This is known to cause problems for servers or P2P appli-
cations. In contrast, we suggest NATing for privacy, which
can be done selectively for outgoing connections. Incoming
connections are not aﬀected, so servers, for example, can
publish their internal address to DNS and receive incoming
connections without any kind of hole punching. Of course,
NATing for incoming connections also has security beneﬁts,
but this is an orthogonal issue.
6. MASKING RETURN ADDRESSES
APIP separates accountability from other source address
roles, allowing senders to hide the return address from ob-
servers in the network. APIP does not deﬁne any particular
privacy mechanism, but rather enables various lightweight,
“always-on” strategies for increasing the default level of pri-
vacy for all traﬃc without weakening accountability. We of-
fer two examples: end-to-end return address encryption and
network address translation. Since our focus is sender-ﬂow
unlinkability, our primary concern is the size of the sender
anonymity set from the perspective of four possible adver-
saries: the source domain, observers in the source domain,
transit networks, and the receiver (Table 2).
End-to-end Encryption Since the return address is used
only by the receiver and not by routers, a simple idea is to
encrypt it end-to-end (e.g., using IKE [18], `a la IPsec); now
only the destination and accountability addresses are visible
in the network. We imagine two variants: one in which
return address encryption is a network layer standard and
can be performed end-to-end or gateway-to-gateway and one
in which the return address is moved to a higher layer (e.g.,
transport or session layer).
Of course, though the return address is encrypted in the
forward direction, it will be plainly visible as the destina-
tion address in responses; determined attackers may be able
to link the outbound and inbound traﬃc (e.g., with timing
analysis). Still, even this simple strategy oﬀers increased
privacy against passive observers, e.g., reviewing logs from
a core ISP.
Network Address Translation Encrypting the return
address end-to-end hides it from the network, but not from
the destination. For privacy from the network and the recip-
ient, edge ISPs’ border routers could perform address trans-
lation on outbound packets’ return addresses by changing
NID:HID:SID to NID:HID’:SID’. (This can be done deter-
ministically to avoid keeping large translation tables [30].)
Note that in contrast to the encryption option, response
packets sent by the destination will not reveal the identity of
the original sender (in the destination address). The down-
side is that, in contrast to encrypted return addresses, the
anonymity set shrinks closer to the source.
Today,
increased use of NAT might be a controversial
proposition, but cleaner thinking about source addresses
mitigates some of the chief arguments against it. For ex-
ample, in 2006 the entire nation of Qatar was banned from
Wikipedia when one user vandalized an article because the
country’s sole ISP uses a NAT with one external IP ad-
dress [3]; in APIP, all hosts could share one external return
address while still being held individually accountable via
the accountability address.
Second, NATs are traditionally deployed for address space
separation—the privacy they provide is a side eﬀect [35].
Reducing Overhead Not all packets need a return address.
For connection oriented traﬃc, the return address needs to
be sent to the destination only once during the establishment
of the connection (and also when a mobile device switches
networks). The destination can store it and reuse it for
later packets. Doing so (1) ameliorates the header overhead
introduced by splitting accountability and return addresses
in the ﬁrst place and (2) allows NATs to modify many fewer
packets.
Beyond the First Hop No matter how far a packet travels,
the sender anonymity set is still just the sender’s source
domain. Though this may be suﬃcient for most senders,
the NAT approach can be extended by performing address
translation at more border routers. Though core ISPs are
unlikely to do this, if the ﬁrst 2–3 domains in the path do,
a packet’s sender anonymity set grows signiﬁcantly before
reaching the core (and ultimately its destination).
IN THE REAL WORLD
7.
7.1 Holding Delegates Accountable
Delegates have three responsibilities: protecting the pri-
vacy of their clients, verifying packets with ﬁngerprints that
match those sent by valid clients, and dropping invalid pack-
ets. We brieﬂy discuss how malicious or compromised dele-
gates can either harm their clients or allow their clients to
harm others.
(1) Releasing private information about clients. Delegates
can learn a lot about who their clients communicate with,
information they could use for their own beneﬁt or reveal
to a third party. Upon discovering a leak, the client can
terminate service, ﬁnd a new delegate, and potentially pur-
sue legal action for breach of contract. Note that delegates
only see packet headers, not packet contents. (An interest-
ing direction for future work is exploring anonymous brieﬁng
schemes, e.g., based on cryptography or the use of an inter-
mediary.)
(2) Failing to verify clients’ packets. Delegates can eﬀec-
tively perform a DoS attack on clients by failing to verify
their packets. Senders can detect this due to the excessive
number of DROPPED (VERIFYING) or DROPPED (VERIFICA-
TION FAILED) error messages they will receive from veriﬁers.
Again, the client can then terminate service.
(3) Verifying invalid packets. Delegates can support attacks
by verifying packets for which they did not receive a brief
from a client or which belong to ﬂows that have been shut
oﬀ. (Such a delegate may be compromised or misconﬁgured
or may even be colluding with an attacker.) Victims can
detect such malicious behavior (e.g., by observing that their
shutoﬀ requests have been ignored).
Who Can be a Delegate? The likelihood of any of the
above problems occurring depends on who can be a dele-
Adversary
End-to-end Encryption
Address Translation
Source Domain
Observers in
Source Domain