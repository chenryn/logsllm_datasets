more trusted. Note that our deﬁnition of higher-order injection is broader than
that by Ollmann [13], which emphasizes its delayed nature. In our approach, we
focus on its basic characteristics, that is, the persistent storage of oﬀending data
regardless whether its eﬀect is immediate (as with some XSS attacks) or not (as
with the attacks shown by Ollmann).
The table provides a unifying view of all types of injection vulnerabilities.
We can use it to classify existing vulnerabilities, but it also provides insight into
vulnerabilities that we expect to appear in the future. For example, although
we have not yet seen any XPath injection vulnerabilities, it is likely that we
will see them appear as the underlying technologies become widely used. It
also shows that some vulnerabilities that typically are not regarded as injection
vulnerabilities, e.g., path traversal, are in fact very much related and can be
prevented using the same techniques as for other injection vulnerabilities.
Figure 1 shows the dataﬂow in an application from the perspective of this pa-
per. The data ﬂows from multiple inputs and constants through a chain of string
operations to form the output expressions. The dashed lines depict the example
of Section 2.1 where a single input can result in diﬀerent outputs depending on
the path in the ﬂow graph. The diﬃculty of securing such an application lies in
the fact that all the possible paths between inputs and outputs have to be taken
into account.
130
T. Pietraszek and C. Vanden Berghe
Constants
Constants
Constants
Textual Representations
Textual Representations
Textual Representations
Network Input: 
GET, POST, cookie
Direct Input:
arguments, env.,...
Stored Input:
DB, XML, CSV,...
Input Filtering
Inputs
String Operations
Execute:
shell, XSLT,...
Query:
SQL, XPath,...
Locate:
URL, path,...
Render:
HTML, SVG,...
Store:
DB, XML,...
Outputs
Fig. 1. Use of textual representation in an application. The dashed lines depict the
example of Section 2.1, where a single input can result in diﬀerent outputs.
As an example, web applications have typically many diﬀerent input vec-
tors: GET and POST parameters, URL, cookies, authentication information
and other HTTP headers for every possible request. Moreover, input can come
from databases, XML ﬁles or other external sources. At the same time, a typical
web application can have several output vectors: HTML output for every page
that can possibly be generated, a database or XML ﬁle, e-mails, etc.
The large number of combinations makes adding the necessary input vali-
dation checks error-prone. This is not only true for web applications, but other
programs handling user input are also aﬀected. However, for various reasons, web
applications tend to be particularly vulnerable. They are typically text-based,
are often constructed from loosely-coupled components and exist in a hostile
environment, where they receive a lot of untrusted user input. In addition, there
is often a lack of proper development tools and the security aspects are not the
main focus of the application developers.
What both Table 1 and Figure 1 cannot show is the impact a certain injection
vulnerability can have on the security of an application. For example, the SQL
injection in Section 2.1 leads to the possibility of authentication without proper
credentials. In other cases, an injection results in run-time errors, conﬁdentiality
or integrity problems. The actual impact is thus highly situation-speciﬁc.
3 Related Work
The prevalence of attacks exploiting buﬀer-overﬂow vulnerabilities motivated a
considerable research eﬀort focused on preventing and detecting these vulner-
abilities. Considerably less attention has been given to the related problem of
injection vulnerabilities [3], which instead has been investigated mainly by prac-
titioners [1, 2, 8, 12, 13]. We distinguish between two coarse-grained categories of
existing solutions: “safe ad-hoc serialization” and “serialization APIs”. In this
section we present them and discuss their advantages and disadvantages.
Safe Ad-Hoc Serialization. The ﬁrst category contains solutions facilitating safe
ad-hoc serialization. Manual input validation falls into this category, and because
Defending Against Injection Attacks Through CSSE
131
of its conceptual simplicity it remains the most popular approach. It involves
manually checking all the user-provided input for syntactic content, which will
then be escaped or rejected. Tool support, typically in the form of an API, is
limited to predeﬁned ﬁlters for certain output vectors. The use of these ﬁlters
remains the responsibility of the application developer.
Manual input validation is error-prone as it heavily relies on the application
developer. Implementing it correctly proves very diﬃcult because of the following
issues. First, applications often have a large number of inputs and the handling
code is scattered throughout. Manually capturing all these inputs can therefore
be a daunting task. In addition, the checks are by necessity highly dependent
on the context and can be very complex for particular output vectors. Finally,
care has to be taken that the checks are performed at the right place, as checks
performed before the variable is in its ﬁnal encoding may lead to encoding vul-
nerabilities. These exist when the validation can be foiled using special encoding,
e.g., with entities in XML or URL encoding.
Automated input validation is a second approach, which aims at making input
validation less error-prone by not relying on the application developer. The best
known example is “MagicQuotes” in PHP [14], which operates by validating all
input data at the time it is received. The second issue we raised for manual input
validation applies also to this approach, as the usage context is not fully known
when the validation is performed. Consequently, it is not deﬁned what content
should be considered syntactic. Instead, common output vectors are assumed
and the validation is performed accordingly. This can lead to vulnerabilities
when the assumption proves incorrect.
Variable tainting in Perl [20] is a third approach, addressing the ﬁrst issue of
manual input validation, namely the large number of inputs scattered through-
out the code. It works by “tainting” all input to the application and warning
when dependent expressions are used without having undergone manual valida-
tion. The application developer still is responsible for implementing the actual
checks, but the tainting mechanism makes it less likely that necessary checks
are overlooked. Tainting of input variables, inspired by Perl, has also been ap-
plied to other languages for preventing buﬀer overﬂows. Larson and Austin [6],
instrument string operations in C programs to ﬁnd software faults caused by
improperly bounded user input. Shankar et al. [17] use static taint analysis to
detect format string vulnerabilities in the compile phase.
The last approach in this category is provided by SQLrand [3], which prevents
SQL injections by separating commands encoded in the program code from user-
supplied data. SQLrand is based on the assumption that syntactic parts of SQL
commands can only appear as constants in the program code and should not be
provided by user input. SQLrand preprocesses the source code of applications
and replaces all SQL commands with encoded versions. The modiﬁed commands
are then intercepted by an SQL proxy, which enforces that only correctly en-
coded instructions are passed on to the database. The main disadvantages of
this approach are that it requires a complex setup and that it is speciﬁc to SQL.
132
T. Pietraszek and C. Vanden Berghe
Serialization APIs. The second category consists of solutions that can be charac-
terized as serialization APIs (Application Programming Interfaces). These APIs
assist the application developer in serializing variables and thus creating a safe
textual representation. They either do not use explicit textual representation
at all, and the representation is created using a programmatic API instead, or
they use special serialization templates, in which the textual representation is
created by the application developer and only the variables are serialized using
an API. An example of the former type is DOM (Document Object Model),
which provides programmatic support for creating XML documents, thereby, in
addition to its other advantages, preventing XML injection attacks. Examples
of the latter type include serialization templates for SQL, which exist for many
diﬀerent programming languages: PreparedStatement in Java, ADOdb [7] in PHP
and Python, SQLCommand in VisualBasic and DBI [4] in Perl.
The key advantage of this approach is that the serialization is handled auto-
matically by the platform. Although the method is less error-prone, some prob-
lems remain. First, the tool support is limited to some frequently used output
vectors. For example, there are prepared statements for SQL expressions and
DOM for XML, but we know of no similar tool support for XPath or regular ex-
pressions. Second, the application developer still is responsible for actively and
correctly using this mechanism. And third, there is a large number of legacy
applications that do not use this functionality or run on platforms that do not
provide this tool support.
Also in this category is the approach taken by Xen [9], which fully integrates
XML and SQL with object-oriented languages, such as C(cid:1). Xen extends the
language syntax by adding new types and expressions, which avoids ad-hoc se-
rialization and thus prevents injection vulnerabilities. The disadvantage of this
method is that it cannot be easily applied to existing applications.
4 Context-Sensitive String Evaluation
In this section we provide a detailed description of CSSE and show how it com-
pares to the existing methods for defending against injection attacks.
CSSE addresses the root cause of injection vulnerabilities by enforcing strict
channel separation, while still allowing the convenient use of ad-hoc serialization
for creating output expressions. A CSSE-enabled platform ensures that these
expressions are resistant to injection attacks by automatically applying the ap-
propriate checks on the user-provided parts of the expressions. CSSE achieves
this by instrumenting the platform so that it is able to: (i) distinguish between
the user- and developer-provided parts of the output expressions, and (ii) deter-
mine the appropriate checks to be performed on the user-provided parts.
The ﬁrst condition is achieved through a tracking system that adds metadata
to all string fragments in an application in order to keep track of the fragments’
origin. The underlying assumption is that string fragments originating from the
developer are trusted, while those originating from user-provided input are un-
trusted. The assignment of the metadata is performed without interaction of
the application developer or modiﬁcation of the application source code, and
Defending Against Injection Attacks Through CSSE
133
Network Input: 
GET, POST, cookie
$email="alice@host",
$pincode="1234 or 1=1";
Metadata
Direct Input:
arguments, env.,...
Stored Input:
DB, XML, CSV,...
Metadata
Metadata
Constants
Constants
Constants
SELECT * FROM users WHERE email=’’ 
AND pincode=
/usr/bin/mail
Textual Representations
Textual Representations
Textual Representations
SELECT * FROM users WHERE email=’alice@host’
AND pincode=1234 or 1=1
/usr/bin/mail alice@host
Metadata
Execute:
shell, XSLT,...
Query:
SQL, XPath,...
Locate:
URL, path,...
Render:
HTML, SVG,...
Store:
DB, XML,...
Inputs
Metadata
Assignment
Metadata-Preserving
String Operations
Context-Sensitive
String Evaluation
Outputs
Fig. 2. Using CSSE to preserve the metadata of string representations and allow for
late string evaluation. Shades represent string fragments originating from the user.
is instead achieved through the instrumentation of the input vectors (e.g., net-
work, ﬁle) of the CSSE-enabled platform. CSSE further instruments the string
operations to preserve and update the metadata assigned to their operands. As
a result, the metadata allows us to distinguish between the developer-provided
(trusted) and user-provided (untrusted) parts of the output expressions at any
stage in their creation. Figure 2 illustrates the dataﬂow of the vulnerable appli-
cation executed in a CSSE-enabled platform.
The second condition is achieved by deferring the necessary checks to a very
late stage, namely up to the moment when the application calls the API func-
tion to pass the output expression on to the handling component (output vec-
tor). CSSE intercepts all API calls related to output vectors, and derives the
type of output vector (e.g., MySQL, shell) from the actual function called (e.g.,
mysql_query(), exec()). This allows CSSE to apply the checks appropriate for
this particular output vector.
At this point, CSSE knows the complete context. The ﬁrst part of the con-
text is provided by the metadata, which describes the fragments of the output
expression that require checking. The second part of the context is provided
by examining the intercepted call to the API function, which determines which
checks will be executed. CSSE then uses this context information to check the
unsafe fragments for syntactic content. Depending on the mode CSSE is used
in, it can escape the syntactic content or prevent the execution of the dangerous
content (both intrusion prevention) or raise an alert (intrusion detection).
The novelty of our method lies in its ability to automatically gather all the
required pieces of information that allow it to perform the necessary checks for
detecting and preventing injection vulnerabilities. A CSSE implementation is
platform-speciﬁc, but eﬀective for all applications executed on this platform. No
analysis or modiﬁcation of the application is required, except for very rare cases
where user-provided input is explicitly trusted. This will be further discussed in
the remainder of this section.
134
T. Pietraszek and C. Vanden Berghe
CSSE compares favorably to the existing methods described in Section 3.
Because its checks are platform-enforced and performed when the expression is
already encoded, it has none of the disadvantages that make the existing safe
ad-hoc serialization methods error-prone. It also has several advantages over
serialization APIs, as it is applicable to a wide variety of output vectors, requires
no application developer actions and can also be used on legacy applications.
In the remainder of this section, we describe four logical parts that make
up a CSSE implementation: metadata representation, metadata assignment,
metadata-preserving string operations and context-sensitive string evaluation.
The ﬁrst three form the metadata tracking system, whereas the last part is
responsible for determining and executing the appropriate checks. Here, we focus
on the architectural aspects; the implementation will be discussed in Section 5.
Metadata Representation. In CSSE, the term “metadata” refers to information
about the origin (user-provided or developer-provided) of all the fragments that
make up string variables. Conceptually, this metadata is attached to the string
variables, as it travels with them through the application.
However, the actual implementation of the metadata is highly platform-
dependent. For example, the metadata can be stored either in a platform-wide
repository or indeed as part of the actual data object. Also, the metadata itself
can be represented in several ways, e.g., using a bitmap or a list of pointers
delimiting diﬀerent parts of an expression. Finally, the absence of metadata for
a variable can also implicitly carry information on its origin.
CSSE metadata is similar to variable taint in Perl, as it also denotes the origin
of the string variables and thus whether they are trusted or untrusted. However,
for our method a richer metadata representation is needed. While variable taint
in Perl only describes if there exists a fragment of the string variable originating
from the user, CSSE metadata describes the origin of all the individual fragments
that make up a string variable (cf. shaded fragments in Figure 2).
It is also possible to use the CSSE metadata to track a “history” of the
data, by keeping track of the chain of operations performed on its fragments
(e.g., ﬁltering, escaping quotes) to ensure that the validation method applied is
appropriate to the output vector (e.g., checking for database metacharacters is
inappropriate when the variable is used as a part of a shell command). However,
in the remainder of the paper we limit the scope of the metadata to describing
origin, as this is suﬃcient for our purposes.
Metadata Assignment. A CSSE-enabled platform automatically assigns meta-
data to all string variables. For user-provided input, this is achieved through
the instrumentation of the input vectors of the platform. When the application
receives input from the user, e.g. in the form of an HTTP parameter, the in-
strumented platform API will ensure that the received variables are provided
with the appropriate metadata, marking them untrusted. On the other hand,
static string constants present in the program code are automatically considered
safe. There is no need for the application developer to modify them or anyhow
indicate how they will be used (e.g., as an SQL or shell command, HTML code).
Defending Against Injection Attacks Through CSSE
135
For a CSSE-enabled platform protecting web applications, the instrumenta-
tion of the HTTP input vector is the most important, as this is the normal
avenue for user-provided input. Other input vectors include application parame-
ters (e.g., environment or run-time parameters) and data read from a persistent