ImplementingaMongoDBDatabaseMiner
TheMongoDButilityprograminListing7-9implementsthe
interfacedefinedinListing7-8whilealsointegratingthe
databaseconnectivitycodeyoubuiltinListing7-6.
packagemain
import(
"os"
❶"github.com/bhg/ch-7/db/dbminer"
"gopkg.in/mgo.v2"
"gopkg.in/mgo.v2/bson"
)
❷typeMongoMinerstruct{
Hoststring
session*mgo.Session
}
❸funcNew(hoststring)(*MongoMiner,error){
m:=MongoMiner{Host:host}
err:=m.connect()
iferr!=nil{
returnnil,err
}
return&m,nil
}
❹func(m*MongoMiner)connect()error{
s,err:=mgo.Dial(m.Host)
iferr!=nil{
returnerr
}
m.session=s
returnnil
}
❺func(m*MongoMiner)GetSchema()(*dbminer.Schema,error){
vars=new(dbminer.Schema)
dbnames,err:=m.session.DatabaseNames()❻
iferr!=nil{
returnnil,err
}
for_,dbname:=rangedbnames{
db:=dbminer.Database{Name:dbname,Tables:[]dbminer.Table{}}
collections,err:=m.session.DB(dbname).CollectionNames()❼
iferr!=nil{
returnnil,err
}
for_,collection:=rangecollections{
table:=dbminer.Table{Name:collection,Columns:[]string{}}
vardocRawbson.Raw
err:=m.session.DB(dbname).C(collection).Find(nil).One(&docRaw)❽
iferr!=nil{
returnnil,err
}
vardocbson.RawD
iferr:=docRaw.Unmarshal(&doc);err!=nil{❾
iferr!=nil{
returnnil,err
}
}
for_,f:=rangedoc{
table.Columns=append(table.Columns,f.Name)
}
db.Tables=append(db.Tables,table)
}
s.Databases=append(s.Databases,db)
}
returns,nil
}
funcmain(){
mm,err:=New(os.Args[1])
iferr!=nil{
panic(err)
}
❿iferr:=dbminer.Search(mm);err!=nil{
panic(err)
}
}
Listing7-9:CreatingaMongoDBdatabaseminer(/ch-7/db/mongo/main.go)
Youstartbyimportingthedbminerpackagethatdefinesyour
DatabaseMinerinterface❶.ThenyoudefineaMongoMinertype
thatwillbeusedtoimplementtheinterface❷.For
convenience,youdefineaNew()functionthatcreatesanew
instanceofyourMongoMinertype❸,callingamethodnamed
connect()thatestablishesaconnectiontothedatabase❹.The
entiretyofthislogicessentiallybootstrapsyourcode,
connectingtothedatabaseinafashionsimilartothat
discussedinListing7-6.
Themostinterestingportionofthecodeisyour
implementationoftheGetSchema()interfacemethod❺.Unlike
inthepreviousMongoDBsamplecodeinListing7-6,youare
nowinspectingtheMongoDBmetadata,firstretrieving
databasenames❻andthenloopingoverthosedatabasesto
retrieveeachdatabase’scollectionnames❼.Lastly,the
functionretrievestherawdocumentthat,unlikeatypical
MongoDBquery,useslazyunmarshaling❽.Thisallowsyou
toexplicitlyunmarshaltherecordintoagenericstructureso
thatyoucaninspectfieldnames❾.Ifnotforlazy
unmarshaling,youwouldhavetodefineanexplicittype,
likelyusingbsontagattributes,inordertoinstructyourcode
howtounmarshalthedataintoastructyoudefined.Inthis
case,youdon’tknow(orcare)aboutthefieldtypesor
structure—youjustwantthefieldnames(notthedata)—so
thisishowyoucanunmarshalstructureddatawithoutneeding
toknowthestructureofthatdatabeforehand.
Yourmain()functionexpectstheIPaddressofyour
MongoDBinstanceasitsloneargument,callsyourNew()
functiontobootstrapeverything,andthencallsdbminer.Search(),
passingtoityourMongoMinerinstance❿.Recallthat
dbminer.Search()callsGetSchema()onthereceivedDatabaseMiner
instance;thiscallsyourMongoMinerimplementationofthe
function,whichresultsinthecreationofdbminer.Schemathatis
thensearchedagainsttheregexlistinListing7-8.
Whenyourunyourutility,youareblessedwiththe
followingoutput:
$gorunmain.go127.0.0.1
[DB]=store
[TABLE]=transactions
[COL]=_id
[COL]=ccnum
[COL]=date
[COL]=amount
[COL]=cvv
[COL]=exp
[+]HIT:ccnum
Youfoundamatch!Itmaynotlookpretty,butitgetsthe
jobdone—successfullylocatingthedatabasecollectionthat
hasafieldnamedccnum.
WithyourMongoDBimplementationbuilt,inthenext
section,you’lldothesameforaMySQLbackenddatabase.
ImplementingaMySQLDatabaseMiner
TomakeyourMySQLimplementationwork,you’llinspect
theinformation_schema.columnstable.Thistablemaintainsmetadata
aboutallthedatabasesandtheirstructures,includingtableand
columnnames.Tomakethedatathesimplesttoconsume,use
thefollowingSQLquery,whichremovesinformationabout
someofthebuilt-inMySQLdatabasesthatareofno
consequencetoyourpillagingefforts:
SELECTTABLE_SCHEMA,TABLE_NAME,COLUMN_NAMEFROM
columns
WHERETABLE_SCHEMANOTIN('mysql','information_schema',
'performance_schema','sys')
ORDERBYTABLE_SCHEMA,TABLE_NAME
Thequeryproducesresultsresemblingthefollowing:
+--------------+--------------+-------------+
|TABLE_SCHEMA|TABLE_NAME|COLUMN_NAME|
+--------------+--------------+-------------+
|store|transactions|ccnum|
|store|transactions|date|
|store|transactions|amount|
|store|transactions|cvv|
|store|transactions|exp|
--snip--
Althoughusingthatquerytoretrieveschemainformationis
prettystraightforward,thecomplexityinyourcodecomes
fromlogicallytryingtodifferentiateandcategorizeeachrow
whiledefiningyourGetSchema()function.Forexample,
consecutiverowsofoutputmayormaynotbelongtothesame
databaseortable,soassociatingtherowstothecorrect
dbminer.Databaseanddbminer.Tableinstancesbecomesasomewhat
trickyendeavor.
Listing7-10definestheimplementation.
typeMySQLMinerstruct{
Hoststring
Dbsql.DB
}
funcNew(hoststring)(*MySQLMiner,error){
m:=MySQLMiner{Host:host}
err:=m.connect()
iferr!=nil{
returnnil,err
}
return&m,nil
}
func(m*MySQLMiner)connect()error{
db,err:=sql.Open(
"mysql",
❶fmt.Sprintf("root:password@tcp(%s:3306)/information_schema",m.Host))
iferr!=nil{
log.Panicln(err)
}
m.Db=*db
returnnil
}
func(m*MySQLMiner)GetSchema()(*dbminer.Schema,error){
vars=new(dbminer.Schema)
❷sql:=`SELECTTABLE_SCHEMA,TABLE_NAME,COLUMN_NAME
FROMcolumns
WHERETABLE_SCHEMANOTIN
('mysql','information_schema','performance_schema','sys')
ORDERBYTABLE_SCHEMA,TABLE_NAME`
schemarows,err:=m.Db.Query(sql)
iferr!=nil{
returnnil,err
}
deferschemarows.Close()
varprevschema,prevtablestring
vardbdbminer.Database
vartabledbminer.Table
❸forschemarows.Next(){
varcurrschema,currtable,currcolstring
iferr:=schemarows.Scan(&currschema,&currtable,&currcol);err!=nil{
returnnil,err
}
❹ifcurrschema!=prevschema{
ifprevschema!=""{
db.Tables=append(db.Tables,table)
s.Databases=append(s.Databases,db)
}
db=dbminer.Database{Name:currschema,Tables:[]dbminer.Table{}}
prevschema=currschema
prevtable=""
}
❺ifcurrtable!=prevtable{
ifprevtable!=""{
db.Tables=append(db.Tables,table)
}
table=dbminer.Table{Name:currtable,Columns:[]string{}}
prevtable=currtable
}
❻table.Columns=append(table.Columns,currcol)
}
db.Tables=append(db.Tables,table)
s.Databases=append(s.Databases,db)
iferr:=schemarows.Err();err!=nil{
returnnil,err
}
returns,nil
}
funcmain(){
mm,err:=New(os.Args[1])
iferr!=nil{
panic(err)
}
defermm.Db.Close()
iferr:=dbminer.Search(mm);err!=nil{
panic(err)
}
}
Listing7-10:CreatingaMySQLdatabaseminer(/ch-7/db/mysql/main.go/)
Aquickglanceatthecodeandyou’llprobablyrealizethat
muchofitisvery,verysimilartotheMongoDBexamplein
theprecedingsection.Asamatteroffact,themain()functionis
identical.
Thebootstrappingfunctionsarealsosimilar—youjust
changethelogictointeractwithMySQLratherthan
MongoDB.Noticethatthislogicconnectstoyour
information_schemadatabase❶,sothatyoucaninspectthe
databaseschema.
Muchofthecode’scomplexityresideswithinthe
GetSchema()implementation.Althoughyouareabletoretrieve
theschemainformationbyusingasingledatabasequery❷,
youthenhavetoloopovertheresults❸,inspectingeachrow
soyoucandeterminewhatdatabasesexist,whattablesexistin
eachdatabase,andwhatcolumnsexistforeachtable.Unlike
inyourMongoDBimplementation,youdon’thavetheluxury
ofJSON/BSONwithattributetagstomarshalandunmarshal
dataintocomplexstructures;youmaintainvariablestotrack
theinformationinyourcurrentrowandcompareitwiththe
datafromthepreviousrow,inordertodeterminewhether
you’veencounteredanewdatabaseortable.Notthemost
elegantsolution,butitgetsthejobdone.
Next,youcheckwhetherthedatabasenameforyour
currentrowdiffersfromyourpreviousrow❹.Ifso,you
createanewminer.Databaseinstance.Ifitisn’tyourfirstiteration
oftheloop,addthetableanddatabasetoyourminer.Schema
instance.Youusesimilarlogictotrackandaddminer.Table
instancestoyourcurrentminer.Database❺.Lastly,addeachof
thecolumnstoourminer.Table❻.
Now,runtheprogramagainstyourDockerMySQL
instancetoconfirmthatitworksproperly,asshownhere:
$gorunmain.go127.0.0.1
[DB]=store
[TABLE]=transactions
[COL]=ccnum
[COL]=date
[COL]=amount
[COL]=cvv
[COL]=exp
[+]HIT:ccnum
Theoutputshouldbealmostindiscerniblefromyour
MongoDBoutput.Thisisbecauseyourdbminer.Schemaisn’t
producinganyoutput—thedbminer.Search()functionis.Thisis
thepowerofusinginterfaces.Youcanhavespecific
implementationsofkeyfeatures,yetstillutilizeasingle,
standardfunctiontoprocessyourdatainapredictable,usable
manner.
Inthenextsection,you’llstepawayfromdatabasesand
insteadfocusonpillagingfilesystems.
PILLAGINGAFILESYSTEM
Inthissection,you’llbuildautilitythatwalksauser-supplied
filesystempathrecursively,matchingagainstalistof
interestingfilenamesthatyouwoulddeemusefulaspartofa
post-exploitationexercise.Thesefilesmaycontain,among
otherthings,personallyidentifiableinformation,usernames,
passwords,systemlogins,andpassworddatabasefiles.
Theutilitylooksspecificallyatfilenamesratherthanfile
contents,andthescriptismademuchsimplerbythefactthat
Gocontainsstandardfunctionalityinitspath/filepathpackage
thatyoucanusetoeasilywalkadirectorystructure.Youcan
seetheutilityinListing7-11.
packagemain
import(
"fmt"
"log"
"os"
"path/filepath"
"regexp"
)
❶varregexes=[]*regexp.Regexp{
regexp.MustCompile(`(?i)user`),
regexp.MustCompile(`(?i)password`),
regexp.MustCompile(`(?i)kdb`),
regexp.MustCompile(`(?i)login`),
}
❷funcwalkFn(pathstring,fos.FileInfo,errerror)error{
for_,r:=rangeregexes{
❸ifr.MatchString(path){
fmt.Printf("[+]HIT:%s\n",path)
}
}
returnnil
}
funcmain(){
root:=os.Args[1]
❹iferr:=filepath.Walk(root,walkFn);err!=nil{
log.Panicln(err)
}
}
Listing7-11:Walkingandsearchingafilesystem(/ch-7/filesystem/main.go)
Incontrasttoyourdatabase-miningimplementations,the
filesystempillagingsetupandlogicmightseemalittletoo
simple.Similartothewayyoucreatedyourdatabase
implementations,youdefinearegexlistforidentifying
interestingfilenames❶.Tokeepthecodeminimal,we
limitedthelisttojustahandfulofitems,butyoucanexpand
thelisttoaccommodatemorepracticalusage.
Next,youdefineafunction,namedwalkFn(),thatacceptsa
filepathandsomeadditionalparameters❷.Thefunction
loopsoveryourregularexpressionlistandchecksformatches
❸,displayingthemtostdout.ThewalkFn()function❹isused
inthemain()function,andpassedasaparametertofilepath.Walk().
TheWalk()functionexpectstwoparameters—arootpathanda
function(inthiscase,walkFn())—andrecursivelywalksthe
directorystructurestartingatthevaluesuppliedastheroot
path,callingwalkFn()foreverydirectoryandfileitencounters.
Withyourutilitycomplete,navigatetoyourdesktopand
createthefollowingdirectorystructure:
$treetargetpath/
targetpath/
---anotherpath
----nothing.txt
----users.csv
---file1.txt
---yetanotherpath
---nada.txt
---passwords.xlsx
2directories,5files
Runningyourutilityagainstthissametargetpathdirectory
producesthefollowingoutput,confirmingthatyourcode
workssplendidly:
$gorunmain.go./somepath
[+]HIT:somepath/anotherpath/users.csv
[+]HIT:somepath/yetanotherpath/passwords.xlsx
That’sjustaboutallthereistoit.Youcanimprovethe
samplecodethroughtheinclusionofadditionalormore-
specificregularexpressions.Further,weencourageyouto
improvethecodebyapplyingtheregularexpressioncheck
onlytofilenames,notdirectories.Anotherenhancementwe
encourageyoutomakeistolocateandflagspecificfileswith
arecentmodifiedoraccesstime.Thismetadatacanleadyou
tomoreimportantcontent,includingfilesusedaspartof
criticalbusinessprocesses.
SUMMARY
Inthischapter,wedoveintodatabaseinteractionsand
filesystemwalking,usingbothGo’snativepackagesandthird-
partylibrariestoinspectdatabasemetadataandfilenames.For
anattacker,theseresourcesoftencontainvaluable