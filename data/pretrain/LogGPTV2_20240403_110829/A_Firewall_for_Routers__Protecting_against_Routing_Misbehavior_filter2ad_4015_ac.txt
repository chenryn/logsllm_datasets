tiple local and remote routers, which is equivalent to the de-
ployment setup of Routing Control Platform (RCP) [12].
4 Prototype Evaluation
We have implemented a prototype of the RouteNormalizer
with all the functionalities described in Section 2 with the ex-
ception of protection against resource-based router DoS at-
tacks, which is our future work. We evaluate the performance
of the prototyped RouteNormalizer based on the deployment
setup with two separate BGP sessions shown in Figure 2(a)
Case 2. The performance of other deployment settings is sim-
ilar and not included here due to the space constraint.
4.1 Functionality implementation
The RouteNormalizer receives update messages and pro-
cesses them according to the dataﬂow shown in Figure 3.
1. Initialization. There are three sets of initialization input
ﬁles. The ﬁrst are local router’s conﬁguration ﬁles, containing
useful information such as locally announced address blocks
and import ﬁlters. The second are user-deﬁned policy conﬁg-
urations for the RouteNormalizer. This policy conﬁguration
is kept secret to prevent attackers from evading the RouteNor-
malizer even given its source code. We note that even using
the default conﬁgurations it is nontrivial to evade our anomaly
6
detection techniques. The third is external information to im-
prove RouteNormalizer’s conﬁdence in generating accurate
alarms, for example, the Routing Assets Database (RADB)
and Spam Archives [5].
2. Checking path attributes. After initialization,
the
RouteNormalizer performs normalization actions on BGP up-
date attributes as described in Section 2. The order in which
the checks are performed is determined by impact severity
starting with the most serious violations. Processing for a
given update is stopped if a violation is detected and cannot
be corrected. The RouteNormalizer ﬁrst checks for update
format errors by removing unknown attributes. It updates the
withdrawal frequency for the corresponding preﬁx.
For announcements, the RouteNormalizer ﬁrst corrects if
needed the nexthop IP and AS number to match the advertis-
ing router. It subsequently checks if the announced preﬁxes
contain private addresses or unallocated addresses. Then it
performs private AS number checks, loop detection, and AS
relationship violation checks in succession. Note that check-
ing AS relationship violation is the most time consuming part
because of searching the relationship for each consecutive AS
pair in the AS path. This consumes 70% of total processing
time. It subsequently performs anomaly detection on attribute
values to ﬁnd deviations from history.
3. Anomaly detection. The RouteNormalizer uses past his-
tory to perform anomaly detection. The use of history is jus-
tiﬁed as history provides information on usable routes. It ﬁrst
detects preﬁx related anomalies followed by AS path related
anomalies. This includes detecting unstable routes, anoma-
lous attributes such as unusually long AS paths, signiﬁcant
changes in the number of preﬁxes announced by an AS, and
abnormal origin patterns to infer address hijacking attempts.
To facilitate anomaly detection, the RouteNormalizer stores
relevant state for received update messages in two hash table
data structures as shown in Figure 3.
Note that we choose the hash table data structure instead of
Patricia tree because we need to keep track of all distinct pre-
ﬁxes even if one is covered by another for remembering dif-
ferent routing attributes. Upon receiving an BGP update, the
RouteNormalizer updates the corresponding records in both
hash tables. Our prototype is an extensible framework as each
functionality is implemented as an independent module.
4.2 System performance evaluation
The RouteNormalizer is implemented at user level written
in C with about 3,400 lines of code. Our prototype testbed
is shown in Figure 4, where we use a Cisco 3600 with IOS
12.2(26a) as the local router. Since we do not focus on the
routing performance on the remote router, we use GNU Ze-
bra v0.94 [2] based software router running on a PC as the
remote router. The RouteNormalizer is evaluated using a
Dell Dimension 8400 with 3GHz Pentium 4 Processor and
1.5GB memory running on Linux Fedora Core 3. It estab-
lishes two BGP sessions: one with the local router, the other
with the remote router. To study the routing behavior of the
local router, we set up a peering session to a peering router
Peering 
Router
Local 
Router
Route 
Normalizer
Remote 
Router
Figure 4. RouteNormalizer prototype testbed.
using another zebra instance running on a PC. All links are
full-duplex 100Mbps switched Ethernet.
1. System throughput. We examine the overhead of route
normalization in handling high volumes of routing trafﬁc by
modifying Zebra [2] (called pseudo-Zebra) to read update
messages from ﬁles and send them out in the format deﬁned
in the RFC 1771 [37] as fast as possible over the network to
overcome the minimum route advertisement timer constraint
of Zebra software router and achieve the maximum through-
put over 100 Mbps link. We observe that the average through-
put using our pseudo-Zebra program is 77.9Mbps or 64,916
packets/sec on the testbed, which is comparable to the Bro
trafﬁc normalizer [23]. Note that this throughput result is ob-
tained when the router is reading from ﬁles. The sending rate
is thus limited by the ﬁle I/O on the remote router.
Handling multiple peers has only slight degradation on the
throughput. We argue that this throughput is acceptable be-
cause the data rate of BGP update trafﬁc is signiﬁcantly lower
than 77.9Mbps due to minimum route advertisement timer
and the router processing overhead, as conﬁrmed using empir-
ical BGP data. For example, the peak rate of BGP updates for
about 30 peers is less than 80Kbps, much less than the maxi-
mum trafﬁc rate the RouteNormalizer can sustain. It takes on
average only 223 seconds for the RouteNormalizer to process
a single day’s routing update data for 36 peers, assuming the
data is readily available. Thus, we expect the RouteNormal-
izer can effortlessly keep up with the BGP update trafﬁc rate
in real time.
2. Memory consumption. The memory consumption for
storing both PreﬁxHash and ASHash increases linearly during
the initialization stage. It subsequently remains quite stable,
increasing very slowly when processing new updates. For ex-
ample, keeping states for 16 days of routing messages from a
single peer consumes less than 20MB of memory. To ensure
memory does not grow without limit and to prevent state ex-
haustion attacks, we use the strategy similar to LRU cache re-
placement policies by timing out memory usage. The amount
of memory consumed increases linearly but very slowly with
increasing number of peering sessions. With 30 peers, the
memory consumed is slightly less than 150MB. The aver-
age amount of memory used per peer is 5MB, much less than
the 20MB for a single peer because of the information shared
among peers.
5 Empirical Evaluation using BGP Data
In this section, we evaluate the effectiveness of the
RouteNormalizer using empirical data from public BGP
source – RouteViews [6].We study the experimental ﬁndings
of BGP updates that can beneﬁt from route normalization.
Category
# updates
(% total alarms)
# ASes # preﬁxes
involved
involved
2,483
953
256
94
267
1496
Identiﬁed normalizable updates
AS path loops
Private ASes in AS paths
Unusually long AS paths
AS relationship violations
MOAS violations
Unstable preﬁxes
Table 2.
(RouteViews: October 2006)
1,047 (3.5%)
930 (3.1%)
172(0.57%)
20,174 (67%)
5,976 (19.86%)
1,785 (5.9%)
23
31
1305
438
382
58
Our analysis is not meant to be exhaustive and the results re-
ported here focus on one month of data in October 2006 us-
ing three months of data from July 2006 to September 2006
as history information for anomaly detection. From the rout-
ing related email complaints on the North America Network
Operator Group (NANOG) mailing list [3], the RouteNormal-
izer can identify most of them, conﬁrming its effectiveness at
identifying real routing problems.
5.1 Normalization statistics
Table 2 shows the overall number of identiﬁed updates in
each category and number of ASes and preﬁxes involved. We
notice that the AS relationship violations appear to constitute
the majority of identiﬁed alarms. Altogether there are 30, 110
alarms generated during the one month time period using
RouteViews data from 36 BGP routers. Table 2 also shows
the number of ASes involved in each category: 438 ASes re-
sponsible for AS loops. We did not ﬁnd any NEXT HOP vio-
lations or instances of bogon preﬁxes in the BGP feeds exam-
ined. For some categories such as “unusually long AS paths”,
we deﬁne a threshold based on observed data distribution in
history data. Although we were unable to detect updates in
all the categories implemented, e.g., hijacked address blocks,
partly due to lacking local conﬁguration information, our cur-
rent ﬁndings are encouraging.
To justify the use of history data for detecting anomalies in
the BGP routing attributes, we analyzed the distribution in the
routing information across each preﬁx. We found that on av-
erage 75% of preﬁxes have only fewer than 12 distinct routes
over the three months history data. Focusing on only the AS
path and Origin attributes, the two most common attributes
directly impacting routing decisions, on average 94% have at
most 5 distinct routes. These statistics show that history is a
good predictor for identifying routing anomalies, as the rout-
ing attributes are fairly stable over time.
To generate concise alarm reports in real time, related
alarms are grouped together to produce aggregated alarm re-
ports. In this prototype, we use a simple and intuitive tech-
nique to group the alarms based on the time of occurrence,
the ASes and preﬁxes involved in the alarms. In our analysis,
we use 5 minutes as the threshold for maximum separation
across alarms, as typically routing convergence occurs within
minutes. Furthermore, we use 10 minutes as a limit for ag-
gregating a long running alarm, as operators would like to
be notiﬁed of routing events in real time. The threshold val-
ues are set by observing the distribution of alarm intervals.
7
By grouping related alarms across different preﬁxes, we re-
duced the number of alarms from 635 to 221 by 66% on av-
erage per peer by examining 10 peers for 10 days. Grouping
together different yet closely-occurring alarms for the same
preﬁx helps identify problems associated with the same desti-
nation. We further reduced the number of alarms to 128, i.e.,
by 43% on average. Finally, we experimented with grouping
based on the network impacted by the alarm, i.e., the affected
AS. This results in 96 alarms on average, ranging from 36 to
118 with the standard deviation of 62, a reduction of 25%.
5.2 Case study: graceful restart
To support the graceful restart functionality and improve
routing consistency, the RouteNormalizer needs to record the
latest route for each preﬁx. This imposes extra overhead dur-
ing the ﬁrst time the BGP session is established. We evaluate
this overhead by measuring the time for transferring the en-
tire routing table with 144,615 entries (taken from RouteView
data for AS7018 on October 1 2006) from the remote router
to the local router, and then propagating to the local router’s
peer shown in Figure 4. The local router is Cisco 3600 with
IOS 12.2(26a). Without the RouteNormalizer, the transfer
takes 194.23 seconds on average with standard deviation of
3.7. With the RouteNormalizer, the duration for table transfer
is increased to 201.5 seconds on average with standard devia-
tion of 5.7. The extra delay imposed is around 7.27 seconds,
which we believe is acceptable as it is one-time overhead and
per-preﬁx penalty is very small.
To evaluate the beneﬁt of the enhanced graceful restart on
the RouteNormalizer, we use BGP data from RouteViews on
October 1 2006 and set the local router to be multihomed
to the AT&T (AS7018) and Sprint (AS1239) network, two
tier-1 ISPs. Route selection algorithm is based on the BGP
RFC [37]. The beneﬁt of graceful restart are two fold: re-
ducing both the number of updates exchanged and the du-
ration that routes are potentially unusable. In our analysis,
we artiﬁcially bring down the session to AS7018. Among
144,615 routing table entries, only 68,066 routes need to be
withdrawn. Assuming the session is down for 90 seconds, 9
new updates are sent after session reestabilishment in addition
to 68,062 withdrawn routes, compared to 144,683 updates if
no graceful restart is available. The duration for transferring
such updates is only 90.6 seconds with the RouteNormalizer,
as opposed to 194 seconds in the case of transferring the entire
table to the local router without the RouteNormalizer. Note
that the saving results from the fact that the 76,621 stale routes
are still in local router’s routing table and do not need to be
sent to the local router upon session re-establishment and to
be propagated to the peering router. Thus these routes are us-
able as soon as the link recovers. This translates to reducing
the average time duration that the route is potentially unusable
at local router by 23.96 seconds for each preﬁx.
5.3 Known routing problems
The NANOG mailing list [4] regularly reports ongoing
problems with the Internet routing system, as they may im-
pact user performance and network operations. Using sim-
ple keyword search and manual inspection of the emails, we
identiﬁed 54 events that are clearly related to routing prob-
lems during the time period from October 2001 to November
2006. Part of these real routing problems are caused by either
malicious intent or misconﬁgurations [17]. The RouteNor-
malizer will detect these problems on the wire and attempt to
mitigate against the negative impact.
Table 3 shows the overall statistics on detecting the routing
problems reported on the NANOG mailing list. For a given
reported routing problem, RouteViews routing data spanning
the time period starting from two days before the event until
the end of the day of the report are analyzed. In most cate-
gories, the detection percentage is quite high. Note that some
of these routing problems may be related to the internal net-
works and thus not visible in BGP updates or may not be ob-
servable at the BGP feeds we have access to.
Private addresses: On June 16, 2002 at around 15:43PM,
Qwest network leaked routes for 10.0.0.0/8. The RouteNor-
malizer detects this and raises an alarm. Depending on its
policy, it may drop such updates.
Preﬁx leaking which violates AS relationships: On July 11,
2003, one network operator complained that trafﬁc originated
from Sprint arrived over ALGX (AS2828) customer’s inter-
face, violating export policies. The RouteNormalizer reports
the AS relationship violation for path 1239 6395 14751 2828
2828 8001. Broadwing Communications (6395) did not ﬁlter