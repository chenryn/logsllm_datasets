            x, y, q = exgcd(b, a % b)
            x, y = y, (x - (a // b) * y)
            return x, y, q
    def invert(a,p):
        x, y, q = exgcd(a,p)
        if q != 1:
            raise Exception("No solution.")
        else:
            return (x + p) % p
    def lcm(a,b):
        return a*b // gcd(a,b)
    def proof_of_work():
        STR = "".join([String[random.randint(0, len(String) - 1)] for _ in range(16)])
        HASH = hashlib.sha256(STR.encode()).hexdigest()
        return STR[:4], STR[4:], HASH
    def enc(n, g, m):
        while 1:
            r = random.randint(2, n - 1)
            if gcd(r, n) == 1:
                break
        c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2)
        return c
    def dec(n, g, LAMBDA, c):
        L1 = (pow(c, LAMBDA, n ** 2) - 1) // n
        L2 = (pow(g, LAMBDA, n ** 2) - 1) // n
        m = (invert(L2, n) * L1) % n
        return m
    from pwn import *
    from pwnlib.util.iters import mbruteforce
    from hashlib import sha256
    #context.log_level = 'debug'
    def proof_of_work(sh):
        sh.recvuntil("?+")
        suffix = sh.recvuntil(')').decode("utf8")[:-1]
        log.success(suffix)
        sh.recvuntil("== ")
        cipher = sh.recvline().strip().decode("utf8")
        proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed')
        sh.sendline(proof)
    vanish=[]
    #奇
    s=[]
    #偶
    ss=[]
    for _ in range(80):
        sh=remote("47.104.85.225","57811")
        proof_of_work(sh)
        while True:
            tmp = sh.recvuntil("n = ")
            n = int(sh.recvuntil("\n")[:-1])
            sh.recvuntil("g = ")
            g = int(sh.recvuntil("\n")[:-1])
            sh.recvuntil("decimal ciphertext.\n")
            sh.sendline("123")
            sh.recvuntil("Give me m0.\n")
            sh.sendline("5")
            sh.recvuntil("Give me m1.\n")
            sh.sendline("5")
            sh.recvuntil("This is a ciphertext.\n")
            c = int(sh.recvuntil("\n")[:-1])
            sh.recvuntil("Please give me one decimal ciphertext \n")
            sh.sendline(str((enc(n,g,5)*c)%(n**2)))
            sh.recvuntil("This is the corresponding plaintext.\n")
            m = (int((sh.recvuntil("\n")[:-1]))-5)//25
            sh.recvuntil("0 or 1(m0 -> c0 , m1 -> c1)?\n")
            if m in s:
                sh.sendline('1')
                tmp = sh.recvuntil("\n")
            elif m in ss:
                sh.sendline('0')
                tmp = sh.recvuntil("\n")
            else:
                sh.sendline('1')
                tmp = sh.recvuntil("\n")
                if b"Good! You are right" in tmp:
                    s.append(m)
                elif b"Sorry" in tmp:
                    ss.append(m)
                    sh.close()
                    break
            print(s)
            print(ss)
## myRSA
    # myRSA
    from Crypto.Util.number import getPrime,bytes_to_long as b2l
    from math import gcd
    import hashlib
    import random
    import socketserver
    KEYSIZE = 512
    alpha = 2.0314159265358979
    WELCOME = 'Welcome to use my better RSA!!!!!!So, what do you want now?'
    menu = '1. encry \n2. getflag\n3. exit'
    String = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz'
    def proof_of_work():
        STR = ''.join([String[random.randint(0,len(String)-1)] for _ in range(16) ])
        HASH = hashlib.sha256(STR.encode()).hexdigest()
        return STR[:4],STR[4:],HASH
    def key_gen():
        while True:
            p,q = getPrime(KEYSIZE),getPrime(KEYSIZE)
            e = 0x10001
            if gcd(e,(p-1)*(q-1)):
                break
        key = [getPrime(int(KEYSIZE*alpha)) for _ in range(2)]
        return (p,q,e),key
    # encrypto
    def encry(message,key,p,q,e):
        k1,k2 = key[0],key[1]
        x = p**2 * (p + 3*q - 1 ) + q**2 * (q + 3*p - 1) 
        y = 2*p*q + p + q
        z = k1 + k2 
        c = pow(b2l(message),e,p*q)
        return x * c + y * c + z
    # get flag
    def getflag(flag,key,p,q,e):
        return encry(flag,key,p,q,e)
    class server(socketserver.BaseRequestHandler):
        def _recv(self):
            data = self.request.recv(1024)
            return data.strip()
        def _send(self, msg, newline=True):
            if isinstance(msg , bytes):
                msg += b'\n'
            else:
                msg += '\n'
                msg = msg.encode()
            self.request.sendall(msg)
        def handle(self):
            START,END,HASH = proof_of_work()
            self._send('SHA-256(?+{}) == {}'.format(END,HASH))
            RCV = self._recv().decode()
            if RCV != START:
                return
            self._send("I'm a CryptoRookie,so my Crypto system take time, please wait a minute XD!")
            (p,q,e),key = key_gen()
            flag  = b"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            self._send(WELCOME)
            self._send('This is my public key:\nn = {}\ne = {}'.format(str(p*q),str(e)))
            for _ in range(16):
                self._send(menu)
                COI = int(self._recv().decode())
                if COI == 1 :
                    self._send('Give me your message')
                    message = self._recv()
                    self._send('Your encry message:')
                    self._send(str(encry(message,key,p,q,e)))
                elif COI == 2:
                    self._send('This is your favourite:\n')
                    self._send(str(encry(flag,key,p,q,e)))
                elif COI == 3:
                    self._send('Bye~')
                    break
    class ForkedServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
        pass
    if __name__ == "__main__":
        HOST, PORT = '0.0.0.0', 10001
        server = ForkedServer((HOST, PORT), server)
        server.allow_reuse_address = True
        server.serve_forever()
这道题，emmm，也是奇怪的加密方式，
    def encry(message,key,p,q,e):
        k1,k2 = key[0],key[1]
        x = p**2 * (p + 3*q - 1 ) + q**2 * (q + 3*p - 1) 
        y = 2*p*q + p + q
        z = k1 + k2 
        c = pow(b2l(message),e,p*q)
        return x * c + y * c + z
题目提供提供十六次交互，它可以帮你加密，但每次加密用的z随机
x * c + y * c + z =( x+y )* c + z
其中( x+y ) = ( p+q )^3 – ( p+q )^2 + ( p+q ) – 4 * n
那么我们发送明文 ’\x01’ 过去，就能得到enc = x + y + z，所以 enc + 4 * n = (p+q)^3 – (p+q)^2 +
(p+q) + z
我们可以将其看作关于（p+q）的方程 f(x) ，由于z不知道，没法根据返回值解一个具体的值x。
但是算一下长度，(p+q)^3 有 513 * 3 = 1539 bit，z 才
1024bit左右，相对比较小。那么我们直接不管z，去解方程（这里我是用2分法去逼近的），然后我们可以得到一个大概的值。
有了大概的 x ≈ (p+q)，再利用n，就能得到一个大概的p值，
有了大概的p值，我们可以本地起一组数据看看和真正的p值差多少，可以发现就差小几万，那么我们直接一手small_roots恢复p。p，q都恢复了，我们直接交互拿到flag的密文
( x + y) * pow(flag, e, n) + z
直接整除 (x + y) 得到pow(flag, e, n)，（z太小了，整除就给消没了），后面，rsa解密，得到flag。
P.S.不懂出题人干嘛搞一个genkey浪费时间，有啥必要么，还是说，又又又又又又又又又又又又非预期了？确实没用到16次交互。
    #交互拿到数据a = x + y + z; c = pow(flag,e,n) * (x + y) + z
    from Crypto.Util.number import *
    def f(x):
        return x**3 - x**2 + x + 4*n
    n = ...
    e = 65537
    a = ...
    c = ...
    floor = 0
    sky = 2**1041
    while floor+1  = PolynomialRing(ZmodN)
    ff = int(pbar) + x
    x0 = ff.small_roots(X=2^40, beta=0.4)[0]
    p = int(int(pbar) + x0)
    n = int(n)
    q = n // p
    tmp = f(p+q)
    c //= tmp
    print(long_to_bytes(pow(c,inverse(e,(p-1)*(q-1)),n)))
ok，终于来到最有意思的一题了，也是足足做了我快5个小时（虽然中途思路断了的时候去把XMAN结营赛的密码学赛题AK了下）
## secret_share
    #! /usr/bin/env python
    from libnum import n2s, s2n
    from random import getrandbits
    from hashlib import sha256
    import SocketServer
    from secret import flag
    p, g = 0xb5655f7c97e8007baaf31716c305cf5950a935d239891c81e671c39b7b5b2544b0198a39fd13fa83830f93afb558321680713d4f6e6d7201d27256567b8f70c3, \
           0x85fd9ae42b57e515b7849b232fcd9575c18131235104d451eeceb991436b646d374086ca751846fdfec1ff7d4e1b9d6812355093a8227742a30361401ccc5577
    def h2(m):
        return int(sha256(m).hexdigest(), 16)
    def key_gen(nbits):
        s = getrandbits(nbits) % p
        while s.bit_length() < nbits - 2:
            s = getrandbits(nbits) % p
        pk = pow(g, s, p)
        return pk, s
    def enc(m, pk):
        m = s2n(m)
        e, v = getrandbits(256), getrandbits(256)
        E, V = pow(g, e, p), pow(g, v, p)
        s = v + e * h2(n2s(E) + n2s(V))
        c = m * pow(pk, e + v, p) % p
        cap = (E, V, s)
        return c, cap
    def rk_gen(sk, pki, group=9):
        x, r = getrandbits(512) % p, getrandbits(512) % p
        prefix = n2s(pow(g, x * sk, p)).rjust(64, '\x00')
        encoder = [1, -pow(pki, x * sk, p) % p]
        for i in range(1, group + 1):
            pkj = getrandbits(512)
            new_encoder = [1]
            cur = pow(pkj, x * sk, p)
            for j in range(1, i + 1):
                new_encoder.append((encoder[j] + (-1) * cur * encoder[j - 1]) % p)
            new_encoder.append(encoder[i] * cur * (-1) % p)
            encoder = new_encoder
        encoder[-1] += r
        dd = h2(prefix + n2s(r).rjust(64, '\x00')) | 1
        rk = sk * dd