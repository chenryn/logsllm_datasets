6: min ← the minimal value in VS
7: max ← the maximum value in VS
8: t ← malloc(max− min + BLOCKSIZE)
9: accessible[t,t + max− min + BLOCKSIZE − 1] = true
10: for each address a ∈ S do
offset ← ∗(a)− min
11:
∗(a) ← t + offset
12:
13: end for
Figure 3: Deﬁnitions.
Figure 2: Language.
In X-Force, we ensure that an execution is not crash-
USENIX Association  
23rd USENIX Security Symposium  831
Table 1: Linear Set Computation Rules.
Rule
L-INIT
Statement
initially
r := R(ra)
W(ra,rv)
r := a
r := c
/*!isAddr(c)*/
r := r1 + /− r2
r := r1 ∗ /... r2
free(r)
Action1,2
foreach (global address t)
if (isAddr(∗t)) SM(t) ={ t};
SR(“r”) → nil;
if(SM(ra)) SR(“r”) → SM(ra);
if (SM(ra)) SM(ra) =SM (ra)−{ra}
SM(ra) → nil;
if (SR(“rv”))
SR(“rv”) =SR (“rv”) ∪ {ra};
SM(ra) → SR(“rv”);
SR(“r”) → {}
SR(“r”) → nil
if (!(isAddr(r1)&&isAddr(r2)))
SR(“r”) → nil
if (isAddr(r1)) SR(“r”) → SR(“r1”);
if (isAddr(r2)) SR(“r”) → SR(“r2”);
SR(“r”) → nil
t = r;
while (accessible(t))
if (SM(t)) SM(t) =SM (t)−{t};
t + +;
L-READ
L-WRITE
L-ADDR
L-CONST
L-LINEAR
L-NON-LNR
L-FREE
1. The occurrence“r” denotes the symbolic name of register r, the
occurrence of r denotes the value stored in r.
2. Operator “=” means set update, “→” means pointer update.
able by allocating memory on-demand. However, when
we replace a pointer pointing to an invalid address a with
the allocated memory, we need to update all the other
pointer variables that have the same address value or a
value denoting an offset from the address. We achieve
this through the linear set tracing semantics, which is
also the basic semantics for forced executions2. Its goal
is to identify the set of variables (i.e. memory locations
and registers at the binary level), whose values have lin-
ear correlations. In this paper, we say two variables are
linearly correlated if the value of one variable is com-
puted from the value of the other variable by adding or
subtracting a value. Note that it is simpler than the tradi-
tional deﬁnition of linear correlation, which also allows
a scaling multiplier. It is however sufﬁcient in this work
as the goal of linear set tracing is to identify correlated
pointer variables, which are induced by address offset-
tings that are exclusively additions and subtractions.
The semantics is presented in Table 1. The corre-
sponding deﬁnitions are presented in Fig 3. Particularly,
linear set LSet denotes a set of addresses such that the
values stored in these addresses are linearly correlated.
Mapping SR maps a register to the reference of a LSet.
Intuitively, one could interpret that it maps a register to
a pointer pointing to a set of addresses such that the val-
ues stored in the register and those addresses are linearly
correlated. Two registers map to the same reference (of a
LSet) implies that the values of the two registers are also
linearly correlated. Similarly, mapping SM maps an ad-
dress to the reference of a LSet such that the values in the
address and all the addresses in LSet are linearly corre-
2We will explain the predicate switching part of the semantics in
Section 3.2
Table 2: Memory Error Prevention and Recovery.
Statement
r := malloc(r1)
free(r)
r := R(ra)
W(ra,rv)
Rule
Action
for (i = r to r + r1 − 1) M-ALLOC
accessible(i) = true
t = r;
M-FREE
while (accessible(t))
accessible(t) = false
t + +;
if (!accessible(ra))
recovery(ra);
if (!accessible(ra))
recovery(ra);
M-READ
M-WRITE
lated. The essence of linear set tracing is to maintain the
SR and SM mappings for all registers and addresses that
have been accessed so that at any execution point, we can
query the set of linearly correlated variables of any given
variable.
Before execution, the SM mapping of all global vari-
ables that have an address value is set to the address it-
self, meaning the variable is only linearly correlated with
itself initially (rule L-INIT). Function isAddr(v) deter-
mines if a value v could be an address. X-Force monitors
all memory allocations and the image loading process.
Thus, given a value, X-Force treats it as a pointer if it
falls into static, heap, or stack memory regions. Note
that we do not need to be sure that the value is indeed
an address. Over-approximations only cause some addi-
tional linear set tracing. For a memory read operation,
the SR mapping of the destination register points to the
SM set of the value in the address register if the SM set
exists, which implies the value is an address, otherwise it
is set to nil (rule L-READ). Note that in the rule we use
“r” to denote the symbolic name of r and ra to denote the
value stored in ra. SR(“r”) → SM(ra) means that we set
SR(“r”) to point to the SM(ra) set. For a memory write,
we ﬁrst eliminate the destination address from its linear
set. Then, the address is added to the linear set of the
value register as the address essentially denotes a new
linearly correlated variable. Finally, the SM mapping of
the address is updated (rule L-WRITE). Note that oper-
ation “=” means set update, which is different from “→”
meaning set reference update. For a simple address as-
signment, the SR set is set to pointing to an empty linear
set, which is different from a nil value (rule L-ADDR).
The empty set is essentially an LSet object that could be
pointed to by multiple registers to denote their linear cor-
relation. A nil value cannot serve this purpose. For a lin-
ear operator, the SR mapping of the destination register
is set to pointing to the SR mapping of the register hold-
ing an address value (rule L-LINEAR). Intuitively, this
is because we are only interested in the linear correla-
tion between address values (for the purpose of memory
error recovery). For heap de-allocation, we have to re-
move each de-allocated address from its linear set (rule
L-FREE).
Table 2 presents the set of memory error detection and
832  23rd USENIX Security Symposium 
USENIX Association
recovery rules. The relevant deﬁnitions are in Fig. 3.
An auxiliary mapping accessible() is introduced to de-
note if an address has been allocated and hence accessi-
ble. The M-ALLOC and M-FREE rules are standard.
Upon reading or writing an un-accessible address, X-
Force calls function recovery () with the register hold-
ing the invalid address to perform recovery. In the func-
tion, we ﬁrst acquire the values of all the variables in the
linear set and identify the minimal and maximum val-
ues (lines 1-6). Note that the values may be different
(through address offsetting operations). We then allocate
a piece of memory on demand according to the range of
the values and a pre-deﬁned default memory block size.
Then in lines 9-12, the variables in the linear set are up-
dated according to their offsets in the block. We want
to point out that on-demand allocation may not allocate
enough space. However, such insufﬁciency will be de-
tected when out-of-bound accesses occur and further on-
demand re-allocation will be performed. We also want
to point out that a correctly developed program would
ﬁrst write to an address before it reads. As such, the on-
demand allocation is often triggered by the ﬁrst write to
an invalid buffer such that the value could be correctly
written and later read. In other words, we do not need to
recover values in the on-demand allocated buffers.
In our real implementation, we also update all the reg-
isters that are linearly correlated, which can be deter-
mined by identifying the registers pointing to the same
set. Furthermore, the rules only describe how we ensure
heap memory safety whereas X-Force protects critical
stack addresses such as return addresses and parameters,
which we will discuss later.
Example. Fig. 4 presents part of a sample execution
with the linear set tracing and memory safety semantics.
The program is from the motivation example (Fig. 1). In
the execution, the else branch of line 3 is taken but the
true branch of line 5 is forced. As such, pointer p has
a null value when it is passed to function genName(),
which would cause an exception at line 22. In Fig. 4,
we focus on the executions of lines 6, 22 and 7. The sec-
ond column shows the binary code (in our simpliﬁed lan-
guage). The third column shows the corresponding linear
set computation and memory exception detection and re-
covery. Initially, SM(&p = 0x8004c0) is set to pointing
to the set {0x8004c0} according to rule L-INIT. At bi-
nary code line 2, SR(eax) is set to pointing to the set of
SM(&p). At line 3, since the value is further copied to
a stack address 0xce0080, eax, &p and the stack address
all point to the same linear set containing &p and the
stack address. Intuitively, these are the three variables
that are linearly correlated. At lines 9 and 10, edi fur-
ther points to the same linear set. At line 12, when the
program tries to access the address denoted by edi = 4,
the memory safety component detects the exception and
performs on demand allocation. According to the lin-
ear set, &p and the stack address 0xce0080 are set to
the newly allocated address 0xd34780 while edi is up-
dated to 0xd34784 according to its offset. While it is not
presented in the table, the program further initializes the
newly allocated data structure. As a result, when pointer
p is later passed to table put(), it points to a valid data
structure. 2
Algorithm 1 Path Exploration Algorithm
Output:
Deﬁnition
Ex - the set of executions (each denoted by a se-
quence of switched predicates) achieving a cer-
tain given goal (e.g. maximum coverage)
switches:
the set of switched predicates in a
forced execution, denoted by a sequence of in-
tegers. For example, 1· 3· 5 means that the 1st,
3rd, and 5th predicates are switched
WL : P (Int) - a set of forced executions, each
denoted by a sequence of switched predicates
preds : Predicate× boolean - the sequence of
executed predicates with their branch outcomes
1: WL ← {nil}
2: Ex ← nil
3: while WL do
4:
5:
6:
switches ← WL.pop()
Ex ← Ex ∪ switches
Execute the program and switch branch outcomes ac-
cording to switches, update ﬁtness functionF
7:
8:
9:
10:
11:
preds ← the sequence of executed predicates
t ← the last integer in switches
preds ← remove the ﬁrst t elements in preds
for each (p,b) ∈ preds do
if eval(F , p,b) then
update ﬁtness functionF
WL ← WL∪ switches·t
12:
13:
14:
15:
end for
16:
17: end while
end if
t ← t + 1
In the early stage of the project, we tried a much sim-
pler strategy that is to terminate a forced execution when
an exception is observed. However, we observed that
since we do not provide any real inputs, exceptions are
very common. Furthermore, simply skipping instruc-
tions that cause exceptions did not work either because
that would have cascading effects on program state cor-
ruption. Finally, a crash-proof execution model as pro-
posed turned out to be the most effective one.
X-Force also automatically recovers from other excep-
tions such as division-by-zero, by skipping those instruc-
tions that cause exceptions. Details are omitted.
USENIX Association  
23rd USENIX Security Symposium  833
Figure 4: Sample Execution for Linear Set Tracing and Memory Safety. The code is from Fig. 1.
3.2 Path Exploration in X-Force
One important functionality of X-Force is the capability
of exploring different execution paths of a given binary
to expose its behavior and acquire complete analysis re-
sults. In this subsection, we explain the path exploration
algorithm and strategies.
To simplify discussion, we ﬁrst assume a binary only
performs control transfer through simple predicates (i.e.
predicates with constant control transfer targets). We will
introduce how to extend the algorithms in realistic set-
tings, e.g., supporting exploration of indirect jumps in
later section.
Algorithm 1 describes a general path exploration algo-
rithm, which generates a pool of forced executions that
are supposed to meet our goal speciﬁed by a conﬁgurable
ﬁtness function. It is a work list algorithm. The work list
stores a list of (forced) executions that may be further
explored by switching more predicates. Each execution
is denoted by a sequence of integer numbers that spec-
ify the executed predicate instances to switch. Note that
X-Force only force-sets the branch outcome of a small
set of predicate instances. It lets the other predicate in-
stances run as usual. Initially (line 1), the work list is
a singleton set with a nil sequence, representing an ex-