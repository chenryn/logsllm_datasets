}
为了避免后端服务器过载，.max_connections 可以设置连接后端服务器得最大限制
数。
在backend中申明的timeout参数可以被覆盖，.connect_timeout 等待连接后端的
时 间 ,.first_byte_timeout 等 待 从 backend 传 输 过 来 的 第 一 个 字 符 的 时
间，.between_bytes_timeout 两个字符的间隔时间。
示例：
backend www {
.host = "www.example.com";
.port = "http";
.connect_timeout = 1s;
.first_byte_timeout = 5s;
.between_bytes_timeout = 2s;
}
DIRECTORS
Directors 基于健康状态和per-director算法选择不同的客户端。现在存在随机和循
环两种director。
定义Directors：
24
www.linuxidc.com
director b2 random {
.retries = 5;
{
// We can refer to named backends
.backend = b1;
.weight = 7;
}
{
// Or define them inline
.backend = {
.host = "fs2";
}
.weight = 3;
}
}
The random director
任意的director使用.retries.这个参数指定查找可用后端的次数。默认director中的
所有后端的.retries相同。
每个后端的选项 .weight ,和发送多少流量到这个后端有关。
THE round-robin director
Round-robin没有什么选项。
THE DNS director
DNS director有三种不同的方法应用在后端，比如random或者round-robin或者使
用.list中的任意一种：
director directorname dns {
.list = {
.host_header = "www.example.com";
.port = "80";
.connection_timeout = 0.4;
"192.168.15.0"/24;
"192.168.16.128"/25;
}
.ttl = 5m;
.suffix = "internal.example.net";
}
这段代码会制定384个后端，都使用80端口及0.4s的连接超时，.list声明中设置
选项必须在IPS的前面。
.ttl定义DNSlookups的时间。
上面的示例中添加了“internal.example.net”引入客户端可以在 looking up 之前提
供主机头。所有选项可选。
Bckend probes（后端探针）
探测后端，确定他们是否健康。返回的状态使用req.backend.healthy核对。.window
我们检查到的最近的 polls 数量。.threshold 多少 polls 成功，我们就认为后端是健康
的。.intial是多少探针确定varnish状态正常，默认和threshold值一样。
25
www.linuxidc.com
一个后端定义探针示例：
backend www {
.host = "www.example.com";
.port = "http";
.probe = {
.url = "/test.jpg";
.timeout = 0.3 s;
.window = 8;
.threshold = 3;
.initial = 3;
}
}
他可以指定原始的http请求：
backend www {
.host = "www.example.com";
.port = "http";
.probe = {
# NB: \r\n automatically inserted after each string!
.request =
"GET / HTTP/1.1"
"Host: www.foo.bar"
"Connection: close";
}
}
ACLS
一个ACL给一个访问控制列表命名，随后可以通过调用ACL名字来匹配对应的客户
端地址。
acl local {
"localhost"; // myself
"192.0.2.0"/24; // and everyone on the local network
! "192.0.2.23"; // except for the dialin router
}
如果一个ACL中指定一个主机名，varnish不能解析，他将解析匹配到所有地址。
果你使用了一个否定标记（！），那么将拒绝匹配所有主机。
下面是一个匹配的示例：
if (client.ip ~ local) {
pipe;
}
GRACE
如果后端需要很长时间来生成一个对象，这里有一个线程堆积的风险。为了避免这
种情况，你可以使用Grace。他可以让varnish提供一个存在的版本，然后从后端生成新
的目标版本。
下面的VCL代码将varnish为客户端提供过期目标，所有对象被保持2分钟，在他
们失效前新的目标会被制造：
26
www.linuxidc.com
sub vcl_recv {
set req.grace = 2m;
}
sub vcl_fetch {
set beresp.grace = 2m;
}
FUNCTIONS
下面这些内置的函数可以使用的：
Regsub（str，regex，sub）
返回一个第一次匹配regex表达式的str的复制，使用sub代替它，sub,0 就是替换
所有满足条件的字符串。
Regsuball（str，regex，sub）
替换所有发现的目标
Purge_url（regex）
清除所有cache中的匹配regex的URLS目标。
Subroutines
一个子程序就是一串可读和可用的代码。
sub pipe_if_local {
if (client.ip ~ local) {
pipe;
}
}
子程序在VCL中没有参数，也没有返回值。
调用一个子程序，使用子程序的关键字名字：
call pipe_if_local；
这里有很多子程序和varnish的工作流程相关。这些子程序会检查和操作http头文
件和各种各样的请求。决定哪个哪些请求被使用。
vcl_recv
在请求开始的时候被调用，当一个完整的请求被接受到，并被解析，它的作用就是
决定是否给这个请求提供服务，怎么服务，如果服务，哪个后端会被选取
vcl_recv子程序以下面的关键字结束：
error code [reason] \\返回规定的代码给客户端，并终止请求。
pass \\转换到pass模式，控制权会传递给vcl_pass。
pipe \\转换到pipe模式，控制权会传递给vcl_pipe。
lookup \\在 cache 中查找请求目标，控制权最终会传递给 vcl_hit 或者
vcl_miss，取决于目标是否在cache中。
vcl_pipe
请求进入pipe模式的时候被调用，在这个模式，请求会被passed到后端服务器，
在连接关闭前，无论是这个客户端还是对应的后端服务器的数据，都会进入pass模式。
vcl_pipe子程序以下面的关键字结束：
error code [reason] \\返回规定的代码给客户端，并终止请求。
pipe \\继续进入pipe模式。
vcl_pass
请求进入pass模式的时候被调用，在这个模式，请求会被passed到后端服务器，
27
www.linuxidc.com
后端服务器的应答会被 passed 给客户端，但是不会被缓存。相同客户端的随后的请求
正常处理。
vcl_pass子程序以下面的关键字结束：
error code [reason] \\返回规定的代码给客户端，并终止请求。
pass \\继续进入pass模式。
vcl_hash
使用req.hash += req.http.Cookie 或者HTTP头文件包含的cookie生成hash字符串。
vcl_hash将以下面的关键字结束：
hash \\继续进入hash模式
vcl_hit
当一个请求从cache中命中需要的内容，vcl_hit子程序以下面关键字结束：
error code [reason] \\返回规定的代码给客户端，并终止请求。
pass \\继续进入pass模式，控制权转交vcl_pass子程序。
deliver \\提交命中的目标给客户端，控制权转交vcl_deliver子程序。
vcl_miss
当需要的内容没有在缓存中命中的时候被调用，决定是否尝试到后端服务器查找目
标，从哪个后端服务器查找目标？
vcl_miss子程序以下面的关键字结束：
error code [reason] \\返回规定的代码给客户端，并终止请求。
pass \\进入pass模式，控制权转交给vcl_pass
fetch \\从后端服务器获得请求目标，控制权转交给vcl_fetch。
vcl_fetch
目标成功从后端服务器中获取的时候被调用
vcl_fetch子程序以下面的关键字结束：
error code [reason] \\返回规定的代码给客户端，并终止请求。
pass \\进入pass模式，控制权转交给vcl_pass
deliver \\可能把找到的目标插入缓存中，然后发送给客户端，控制权转交给
vcl_deliver
esi \\ ESI-process the document which has just been fetched
vcl_deliver
当一个没有被cached内容交付给客户端的时候被调用
vcl_deliver子程序以下面关键字结束：
error code [reason] \\返回规定的代码给客户端，并终止请求。
pass \\进入pass模式，控制权转交给vcl_pass
deliver \\交付目标给客户端
如果这些子程序没有被定义，或者没有完成预定的处理而被终止，控制权将被转交给系
统默认的子程序。查看EXAMPLES章节查看默认的代码。
Multiple subroutines（更多的子程序）
如果多个子程序被定义成相同的名字，they are concatenated in the order in which
the appear in the source。
示例：
# in file "main.vcl"
include "backends.vcl";
28
www.linuxidc.com
include "purge.vcl";
# in file "backends.vcl"
sub vcl_recv {
if (req.http.host ~ "example.com") {
set req.backend = foo;
} elsif (req.http.host ~ "example.org") {
set req.backend = bar;
}
}
# in file "purge.vcl"
sub vcl_recv {
if (client.ip ~ admin_network) {
if (req.http.Cache-Control ~ "no-cache") {
purge_url(req.url);
}
}
}
内置的子程序会暗中的附加在里面。
Variables（变量）
虽然子程序没有参数，子进程必须的信息通过全局变量来处理。
以下变量是可用的变量：
now \\当前时间
下面的变量在backend申明中有效：
.host \\一个backend的主机名或者IP地址
.port \\一个backend的服务名字或者端口号
下面的变量在处理请求时有效：
client.ip \\客户端IP
server.hostname \\server的主机名
server.identity \\server 的身份，使用-i 参数设置，如果 –i 参数没有传递给
varnishd，server.identity将给varnishd实例设置名字。设置详细的信息使用 –n参数。
server.ip \\客户端连接上socket，接收到的IP地址
server.port \\客户端连接上socket，接收到的端口号
req.request \\请求类型，例如”GET”,”HEAD”
req.url \\请求的URL
req.proto \\客户端使用的HTTP的协议版本
req.backend \\使用哪个后端服务器为这个请求提供服务
req.backend.healthy \\后端服务器是否健康
req.http.header \\对应的HTTP头
bereq.connect_timeout \\等待后端服务器响应的时间
bereq.first_byte_timeout \\等待接收第一个字节的等待时间，pipe模式中无
29
www.linuxidc.com
效。
bereq.between_bytes_timeout \\短时间内，两次从后端服务器接收到字节的间
隔，pipe模式无效。
下面这些变量在请求目标被成功的从后端服务器或者缓存中获得后有效
obj.proto \\返回请求目标的HTTP版本
obj.status \\服务器返回的HTTP状态码
obj.response \\服务器返回的HTTP状态信息
obj.cacheable \\如果返回的结果是可以缓存的，而且 HTTP状态码必须是 200,
03, 300, 301, 302, 404和410.
obj.ttl \\目标的剩余生存时间，以秒为单位。
obj.lastuse \\最后一个请求后，过去的时间，以秒为单位。
obj.hits \\大概的delivered的次数，如果为0，表明缓存出错。
下面这些变量在目标hash key以后有效
req.hash \\hash key 和缓存中的目标相关，在读出和写入缓存时使用。
下面这些变量在准备回应客户端时使用
resp.proto \\准备响应的HTTP协议版本
resp.status \\返回客户端的HTTP状态码
resp.response \\返回客户端的HTTP状态信息
resp.http.header \\通信的HTTP头
使用SET关键字，把值分配给变量：
sub vcl_recv {
# Normalize the Host: header
if (req.http.host ~ "^(www.)?example.com$") {
set req.http.host = "www.example.com";
}
}
可以使用remove关键字把HTTP头彻底的删除：
sub vcl_fetch {
# Don't cache cookies
remove obj.http.Set-Cookie;
}
EXAMPLES（例子）
下面这段代码和默认的配置相同，后端服务器主机名设置为“backend.exampl.com”
backend default {
.host = "backend.example.com";
.port = "http";
}
sub vcl_recv {
if (req.http.x-forwarded-for) {
30
www.linuxidc.com
set req.http.X-Forwarded-For = req.http.X-Forwarded-For ", " client.ip;
} else {
set req.http.X-Forwarded-For = client.ip;
}
if (req.request != "GET" &&
req.request != "HEAD" &&
req.request != "PUT" &&
req.request != "POST" &&
req.request != "TRACE" &&
req.request != "OPTIONS" &&
req.request != "DELETE") {
// Non-RFC2616 or CONNECT which is weird.
return (pipe);
}
if (req.request != "GET" && req.request != "HEAD") {
// We only deal with GET and HEAD by default
return (pass);
}
if (req.http.Authorization || req.http.Cookie) {
// Not cacheable by default
return (pass);