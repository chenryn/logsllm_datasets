# Python、Web 和 Flask
> 原文：
过去，网站很简单。它们是简单的静态 html 内容。一个 web 服务器将监听一个定义的端口，根据收到的 HTTP 请求，它将从磁盘读取文件并返回它们作为响应。但从那以后，复杂性发生了变化，网站现在是动态的。根据请求的不同，需要执行多个操作，比如从数据库读取数据或调用其他 API，最后返回一些响应(HTML 数据、JSON 内容等。)
由于服务 web 请求不再是像从磁盘读取文件并返回内容那样简单的任务，我们需要处理每个 http 请求，以编程方式执行一些操作并构造一个响应。
## 套接字
尽管我们有 flask 这样的框架，HTTP 仍然是一个基于 TCP 协议的协议。因此，让我们设置一个 TCP 服务器，发送一个 HTTP 请求，并检查请求的有效负载。请注意，这不是一个关于套接字编程的教程，但我们在这里所做的是在底层检查 HTTP 协议，看看它的内容是什么样子的。(Ref:[real Python 上的 Python 套接字编程(指南)](https://realpython.com/python-sockets/)
```sh
import socket
HOST = '127.0.0.1'  # Standard loopback interface address (localhost)
PORT = 65432        # Port to listen on (non-privileged ports are > 1023)
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
   s.bind((HOST, PORT))
   s.listen()
   conn, addr = s.accept()
   with conn:
       print('Connected by', addr)
       while True:
           data = conn.recv(1024)
           if not data:
               break
           print(data) 
```
然后，我们在网络浏览器中打开`localhost:65432`,输出如下:
```sh
Connected by ('127.0.0.1', 54719)
b'GET / HTTP/1.1\r\nHost: localhost:65432\r\nConnection: keep-alive\r\nDNT: 1\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36 Edg/85.0.564.44\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nSec-Fetch-Site: none\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-User: ?1\r\nSec-Fetch-Dest: document\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9\r\n\r\n' 
```
仔细检查，内容看起来会像 HTTP 协议的格式。即:
```sh
HTTP_METHOD URI_PATH HTTP_VERSION
HEADERS_SEPARATED_BY_SEPARATOR 
```
因此，尽管它是一个字节块，知道 [http 协议规范](https://tools.ietf.org/html/rfc2616)，你可以解析这个字符串(即:被`\r\n`分割)并从中获得有意义的信息。
## 瓶
Flask 和其他类似的框架做的和我们在上一节讨论的差不多(增加了更多的复杂性)。它们监听 TCP 套接字上的端口，接收 HTTP 请求，根据协议格式解析数据，并以方便的方式提供给你。
ie:你可以通过`request.headers`访问 flask 中的头，通过`/r/n`分割上面的有效载荷，就可以得到这个头，正如 http 协议中定义的。
另一个例子:我们通过`@app.route("/hello")`在 flask 中注册路径。flask 要做的是在内部维护一个注册表，它将把`/hello`映射到你所修饰的函数。现在，每当一个请求通过`/hello`路径(第一行的第二个组件，由空格分隔)到来时，flask 调用注册的函数并返回函数返回的任何内容。
其他语言的所有其他 web 框架也是如此。它们都基于相似的原理工作。他们主要做的是理解 HTTP 协议，解析 HTTP 请求数据，给我们程序员一个很好的接口来处理 HTTP 请求。
没有那么多魔法，不是吗？