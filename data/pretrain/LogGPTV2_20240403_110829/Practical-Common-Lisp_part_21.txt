如同即将看到的，宏可能以三种方式泄露其内部工作细节。幸运的是，你可以相当容易地看
决方案。但这也不意味着你可以容忍那些可以轻易堵上的漏洞。
(defmacro do-primes ((var start end) &body body)
当我们运行展开式代码时，RANDOM将在每次进行循环的终止测试时被求值一次。这样，循
(((d ： P~  4euros) ((0ot wopue1) 0 d) sauTid-op): I-puedxaoioeu) P (RANDOM 100)))
@body)1
((> ,var ending-value))
P
end)
www.TopSage.com
の
8.7堵住漏洞
85
---
## Page 103
由LET所建立的ending-value绑定被Do内部同名的变量所掩盖，形式（incf ending-valuep)
代码。如果没有被完全拒绝，上述代码也将无限循环下去，由于ending-value永远不会大于其
下面这个看似无辜的do-primes调用会由于这个漏洞而无法正常工作。
(其应当完全属于宏实现内部的细节）它可以跟传递给宏的代码或是宏被调用的上下文产生交互。
再次违反最少惊动原则。
这一泄露，不会带来任何问题。但当它们是可以产生副作用的形式时，不同的求值顺序将使它们
前求值，这与它们出现在宏调用中的顺序相反。并在start和end都是像0和19这样的字面值时，
被定义的顺序来求值的，当宏展开被求值时，传递给end的表达式将在传递给start的表达式之
自身。
86
在这种情况下生成的代码是完全合法的，但其行为完全不是你想要的那样。由于在循环之外
第二个问题调用展开成下面的代码：
MACROEXPAND-1再次向你展示问题所在。第一次调用展开成这样。
这样也不可以。
最后一个需要堵上的漏洞是由于使用了变量名ending-value而产生的。问题在于这个名字
通过交换两个变量的定义顺序就可轻易堵上该漏洞。
其中一个新漏洞类似于刚修复的多重求值漏洞。因为在DO循环中，变量的初始形式是以变量
(do ((ending-value (next-prime 0) (next-prime (1+ ending-value)))
(let ((ending-value 0))
(do-primes (ending-value 0 10)
然而不幸的是，这一修复却又给宏抽象引入了两个新漏洞。
(let ((ending-value 0))
ending-value)
(do ((p (next-prime 0) (next-prime (1+ p)))
(print ending-value))
 ending-value)
(do-primes
(print ending-value)^
(incf ending-value p))
(do ((,var (next-prime ,start) (next-prime (1+ ,var)))
(incf
((> ending-value ending-value))
第8章如何自定义宏
(ending-value 10))
.@body))
(ending-value ,end))
ending-value p))
,var ending-value))
(p010)
www.TopSage.com
---
## Page 104
式打印出来的，带有前缀#：。
生成的，但这并不重要，重要的是这个符号的对象标识。生成符号是以未保留符号通常的语法形
展开成下面的代码：
形式
序化生成的。
值是由读取器在宏调用被读取时创建的，而ending-value-name的值则是在宏代码运行时由程
其值是另一个变量名。但其实它和值为一个变量名的形参var并没有什么区别，区别在于var的
次宏被展开时创建一个新符号。这初看起来有一点奇怪——ending-value-name是一个变量，
个新的符号以替代像ending-value这样的字面名称。
且永远不会被读到，因为它不会进人到任何包里。因而就可以在每次do-primes被展开时生成一
(package)，从而在某种意义上起到保护作用。但还有一个更好的解决方案。
使用一个真正罕用的名字，但即便如此也不可能做到万无一失。也可以使用第21章里介绍的包
将递增循环变量ending-value而不是同名的外层变量，因此得到了另一个无限循环。
使用这个定义，前面两个有问题的形式现在就可以展开成按预想方式运作的代码了。第一个
函数GENSYM在其每次被调用时返回唯一的符号。这是一个没有被Lisp读取器读过的符号并
很明显，为了补上这个漏洞，需要一个永远不会在宏展开代码之外被用到的符号。可以尝试
① 该循环在给定任意素数下的无限性并非是显而易见的。为了证明其确实是无限的，起始点是Bertrand公设：对任
现在用来保存循环终值的变量是生成符号，#:g2141。该符号的名字G2141是由GENSYM所
(do ((ending-value (next-prime 0) (next-prime (l+ ending-value)))
注意调用GENSYM的代码并不是展开式的一部分，它作为宏展开器的一部分来运行从而在每
(let ((ending-value 0))
另一个之前有问题的形式
(defmacro do-primes ((var start end) &body body)
和，而下一个素数P＇也同样小于前面的这个和再加上P。
何n>1都存在一个素数p，n ending-value #:g2141))
(#:g2141 10))
，@body)）}
（>
,var ,ending-value-name))
{next-prime
-name
;start)
www.TopSage.com
(next-prime (l+ ,var)))
8.7堵住漏洞
87
---
## Page 105
且还可以当作一个有用但又不会过于浪费脑筋的练习。
的代码之前，可能会对复杂的编写宏的宏感到有一点困惑，但with-gensyms是相当简单的，而
的宏：一个宏用来生成代码，其代码又生成另外的代码。尽管在你习惯于在头脑中牢记不同层次
见模式，那为什么不用一个宏来将其抽象掉呢？
LET形式开始，后者引入了一些变量用来保存宏展开过程中用到的生成符号。由于这也是一个常
式抽象掉，而反复出现在宏的编写中的特定模式同样也可受益于其抽象能力。
8.8
遵循下面所概括的这些规则即可。
验以后，你将获得在预先堵上这几类漏洞的情况下编写宏的本领。事实上做到这点很容易，只须
使用一个符号生成的名字并没有什么坏处。
后，将可以鉴别一个用在某个位置上的给定名字是否会导致在宏抽象中出现漏洞。但安全起见，
码引入的变量所掩盖，因此再没有漏洞了。
本节将编写一个宏with-gensyms，它刚好做到这点。换句话说，你将编写一个用来编写宏
事实上，你已经见过了这样一种模式。许多宏，例如最后版本的do-primes，它们都以一个
利用这些修复就可以堵上do-primes实现中的所有漏洞了。一旦积累了一点宏编写方面的经
88
所写的宏应类似于下面这种形式。
当然，没有理由表明只有在编写函数的时候才能利用宏的优势。宏的作用是将常见的句法模
口除非有特殊理由，否则需要将展开式中的任何子形式放在一个位置上，使其求值顺序与
并非宏展开式中用到的所有字面名称都会导致问题。等你对于多种绑定形式有了更多经验以
口除非有特殊理由，否则需要确保子形式仅被求值一次，方法是在展开式中创建变量来持
再一次，由于do-primes循环外围的LET所绑定的变量ending-value不再被任何由展开代
如果将do-primes形式替换成其展开式的话，以上形式将会变成这样：
defmacro do-primes ((var start end)&bodybody)
口在宏展开期使用GENSYM来创建展开式中用到的变量名。
(let((ending-value0))
用于编写宏的宏
有求值参数形式所得到的值，然后在展开式中所有需要用到该值的地方使用这个变量。
宏调用的子形式相同。
(with-gensyms (ending-value-name)
ending-value)
(incfending-value p))
(do（(,var
第8章如何自定义宏
（#:g214010））
,@body)))
（next-prime，start)（next-prime(1+,var)))
（next-prime（1+p）))
www.TopSage.com
---
## Page 106
时，它早已经被展开了。
但with-gensyms宏本身在编译一个do-primes形式时并不会被用到,因为在do-primes被编译
了do-primes的函数时，由with-gensyms生成的代码将会运行用来生成do-primes的展开式,
的：当编译关于do-primes的DEFMAcRo时，with-gensyms形式就被展开成刚刚看到的代码并
的变量。
装在一个with-gensyms中的代码将可以引用任何传递给with-gensyms的变量列表中所命名
构成。你可以通过将name替换成一个符号的列表，从而在REPL中测试LoOP表达式生成的代码。
其中每个绑定形式由一个含有with-gensyms中的一个给定名字和字面代码（gensym）的列表所
很容易就可以写出一个简单的反引用模板。
LET，它会把每一个命名的变量（在本例中是ending-value-name）都绑定到一个生成符号上。
赖于多层的反引用和解引用。如果真想进一步提高宏技术的话，你可以尝试分析它的工作方式。
来，就像这样：
一次的代码。使用once-only，你几乎可以跟最初的有漏洞版本一样简单地写出ao-primes
另一个经典的用于编写宏的宏是once-only，它用来生成以特定顺序仅求值特定宏参数
如果在新的do-primes定义中对with-gensyms形式进行宏展开，就将看到下面这样的结果;
看起来不错。尽管这个宏相对简单，但重要的是要清楚地了解不同的宏是分别在何时被展开
在绑定形式的列表之后，with-gensyms的主体参数被嵌入到LEr的主体之中。这样，被封
CL-UsER> (loop for n in '(a b c) collect 
注意你是怎样用一个逗号来插入LOOP表达式的值的。这个循环生成了一个绑定形式的列表，
(defmacro with-gensyms ((&rest names) &body body)
并且还需要让其等价于之前版本的do-primes。换句话说，with-gensyms需要展开成一个
尽管如此，但如果详加解释的话，once-only的实现将远远超出本章的内容，因为它依
(let ((ending-value-name (gensym)))
((A(GENSYM))(B (GENSYM))(C (GENSYM)))
(let ,(loop for n in names collect 
,@body)}
,@body))
{(>
另一个经典的用于编写宏的去：onca-n1y
ipua
www.TopSage.com
···
(next-prime (1+ ,var)))
(next-prime (1+
(,n (gensym)))
^(,n (gensym)))
,var) )))
8.8用于编写宏的宏 
8
---
## Page 107
下一章开始，你将构建一个简单而高效的单元测试框架。
节里你将看到一些宏的示例，它们允许你以一种假如没有宏就完全做不到的方式来表达事物。从
帮助你减轻了一些写代码的工作量，但却并没有提供表达事物的根本性的新方式。在接下来的章
8.9
90
当然，我可以说更多关于宏的事情。目前为止，所有你见到的宏都是相当简单的例子，它们
超越简单宏
第8章如何自定义宏
,@body)))))
for
for
www.TopSage.com
collect
（gensym)))）
---
## Page 108
况，那就可以只写一个函数，让它对所有的测试用例都予以求值并用AND将结果连在一起：
要一个框架使其可以在需要时轻松地组织和运行这些测试用例。如果想先处理最简单的可行情
9.1
么假。
据表明存在着预期的副作用。?但最终，每个测试用例都将归结为一个布尔表达式，要么真要
测试用例必须是一个能产生布尔值的表达式—真或假，通过或失败。举个例子，如果正在为内
机可以处理得更快更精确时，你就不应该将时间花在埋头检查测试所输出的答案上。因此，每个
跟踪测试的失败。目前，你将集中于设计一个可以在交互开发期间使用的框架。
②副作用也可以包括诸如报错这样的情况，我将在第19章里讨论Common Lisp的错误。你可以在读过那章以后再来