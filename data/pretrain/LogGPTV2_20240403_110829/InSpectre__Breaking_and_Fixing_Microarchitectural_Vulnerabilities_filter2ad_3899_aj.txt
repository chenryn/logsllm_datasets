(I ′ ∪ translate(v, max(I0), s ′
, F ′ ∪ {t1}) =
, F ′ ∪ {t1}) = σ ′.
, C ′
, C ′
(cid:3)
A.3 Memory Consistency of Speculative
Semantics: ‡eorem 6.4
We reduce memory consistency for the speculation model to the
OoO case using Œeorem 6.3. Since the OoO semantics already
takes care of reordering, to prove Œeorem 6.4 a bisimulation ar-
gument suﬃces. Intuitively, referring to Figure 2, the states “de-
coded”, “predicted”, “speculated” and “speculatively fetched” in the
speculative semantics all correspond in some sense to the state “de-
coded” in the OoO semantics, in that any progress can still be un-
done to return to the “decoded” state. In a similar vein, the state
“retired” corresponds to “executed” in the OoO semantics, “fetched”
to “fetched” and “commiŠed” to “commiŠed”. Œe only exception
is states that are speculatively fetched. In this case there is an op-
tion to directly retire the fetched state, without passing through
“retired” ﬁrst. Œe proof reﬂects this intuition.
Œe main challenges in deﬁning the bisimulation are i) to pin
down the non-speculated instructions in the speculative semantics
and relate them correctly to instructions in the OoO semantics, and
ii) account for speculatively fetched instructions. Œe laŠer issue
arises when retiring an instruction in the speculative semantics
that has earlier been speculatively fetched. In that case, the corre-
sponding decoded microinstructions are already in ﬂight, although
the bisimilar OoO state will have no trace of this. Œen the OoO
microinstruction will have to be ﬁrst executed and then fetched.
Œe following deﬁnitions make this intuition precise.
First say that a name t ′ is produced by the PC store microin-
struction t ← c?st P C tv ∈ I , if t ′ ≺ t, i.e. t ∈ dom(δ (t ′)).
We would like to conclude that t is uniquely determined, as we
need this to properly relate the speculative and OoO states. How-
ever, this does not hold in general. For a counterexample consider
the PC store microinstruction t ← c?st P C tv . Suppose that
the fetch from t causes a new instruction I ′ to be allocated with
another PC store instruction t ′ ← c ′?st P C t ′
v followed by a
PC load t ′′ ← c ′′?ld P C , i.e. such that t ′
< t ′′. At this point,
δ (t ′) = [t 7→ v] and δ (t ′′) = [t 7→ v]. A‰er executing the fetched
PC store t ′ and then the PC load, s(t ′) = v ′ and s(t ′′) = v ′. At this
point, δ (t ′′) will map t to v and t ′ to v ′. But then t ′′ is produced by
both t and t ′. Œe same property holds if t ′ is used as an argument
to operations other than a PC load. Œis causes us to impose the
following wellformedness condition on instruction translations:
Deﬁnition A.5 (Wellformed instruction translation). Œe transla-
tion function translate is wellformed if translate(v, t ) = I implies:
19
(1) t ← c?st P C tv , t ′ ← c ′?ld P C ∈ I implies t ′
(2) t ← c?st P C tv , ι ∈ I implies t < fn(ι).
(3) For all s there is a unique t ← c?st P C tv such that [c]s.
< t.
Condition A.5.1 and 2 can be imposed without loss of general-
ity since any occurrence of t bound to the microinstruction t ←
c?st P C v can be replaced by v itself, and condition A.5.3 is natu-
ral to ensure that any linear control ﬂow gives rise to a correspond-
ingly linear ﬂow of instructions. We obtain:
Proposition A.6. If t ′ is produced by t1 and t ′ is produced by t2
then t1 = t2.
✷
Consider now microinstructions (images of translate) I1 and I2
such that bn(I1)∩bn(I2) = ∅. Say that I1 produces I2, I1 < I2, if there
is t ← c?st P C tv ∈ I1 such that for each t ′ ∈ I2, t ′ is produced
by t. Clearly, if I ′ is added to the set of microinstructions due to a
fetch from I then I < I ′. Say then that I (and by extension states
containing I ) is wellformed by the partitioning Ir et ir ed , I1, . . . , In,
if I = {Ir et ir ed , I1, . . . , In }, Ir et ir ed is retired, and for each Ii ,
1 ≤ i ≤ n there is I ∈ {Ir et ir ed , I1, . . . , In } such that I < Ii . More-
∗ on the partitions {Ir et ir ed , I1, . . . , In } is
over we require that <
well-founded and that the partitions are maximal. Note that if I is
wellformed by Ir et ir ed , I1, . . . , In then the partitioning is unique.
We note also that all reachable states in the speculative semantics
are wellformed and each partition corresponds to the translation
of one single ISA instruction. We say that an ISA instruction Ii in
the partitioning I1, . . . , In is unconditionally fetched, if Ir et ir ed < Ii
and let Iuf be the union of Ir et ir ed and the instructions that have
been unconditionally fetched.
We can now proceed to deﬁne the bisimulation R. We restrict
aŠention to reachable states in both the OoO and speculative se-
mantics in order to keep the deﬁnition of R manageable and be
able to implicitly make use of simple invariant properties such as
dom(δ ) ∩ dom(δ (t )) ⇒ t < C (no instruction with a speculated de-
pendency is commiŠed). Let (I1, s1, C1, F1) R (I2, s2, C2, F2, δ2, P2)
if
(1) I2 is wellformed by the partitioning I2,r et ir ed , I2, 1, . . . , I2,n.
(2) Œere is a bijectione· from I2,uf to I1.
(3) C2 =fC1,
(4) s2 \ dom(δ2) = es1,
(5) F2 \ dom(δ2) = eF1,
sions.
In 3.-5. the bijectione· is pointwise extended to sets and expres-
Note that, from 2. and 4. we get that a microinstructionet in I1
has been executed iﬀ t < dom(δ2).
We prove that R is a weak bisimulation in two steps. We ﬁrst
show that all speculative transitions up until retire or non-speculative
fetch are reversible. To prove this it is suﬃcient to show that each
of the conditions 1.–4. is invariant under Prd, Exe, Pexe, Rbk, and Ftc,
the laŠer under the condition that the fetched instruction is in δ2.
Œese transitions are identiﬁed by T 1 in the following picture:
20
(σ2, δ2, P2)
R
σ1
T1
R
T2
(σ ′
2, δ ′
2, P ′
2)
σ ′
1
T2
R
Exe
(σ ′′
2 , δ ′′
2 , P ′′
2 )
σ ′′
1
T3
Ftc
(σ ′′′
2 , δ ′′′
2 , P ′′′
2 )
R
σ ′′′
1
Lemma A.7. If σ1 R (σ2, δ2, P2) and (σ2, δ2, P2) −→→→ (σ ′
2, δ ′
an instance of Prd, Exe, Pexe,Rbk, or speculative Ftc then σ1 R (σ ′
2, C ′
2) is
2, P ′
2).
2, δ ′
2, P ′
2).
= (I2, s2[t 7→ v], C2, F2, δ2, P2 ∪ {t }) and note
Proof. Let σ2 = (I2, s2, C2, F2) and (σ ′
(Case Prd) We get σ ′
2
that conditions 1.–5. are trivially satisﬁed by the assumptions.
(Case Exe) We get σ2 −→→ σ ′
2) = (Exe, t ),
t < P2, δ ′
= P2. Cond. 1 and 2 are
2
straightforward since I2,uf and I1 are not aﬀected by the transition.
For cond. 3 and 5 we get C ′
2
= δ2 ∪ {t 7→ s2|deps(t, σ2)} and P ′
2
2 with step-param(σ2, σ ′
2, P ′
2, δ ′
2, F ′
2) = (I ′
= C2 and
2, P ′
2, δ ′
2, s ′
F ′
2 ∩ dom(δ ′
2) = F2 ∩ dom(δ2) ,
since dom(δ ′
s ′
2 \ dom(δ ′
2) \ dom(δ2) = {t } and t < dom(F2). For cond. 4,
2) = s2[t 7→ v] \ dom(δ2 ∪ {t 7→ s2 |deps(t, σ2))
= s2[t 7→ v] \ dom(δ2) ∪ {t }
= s2 \ dom(δ2) .
(Case Pexe) In this case σ2|
2) =
(Exe, t ), t ∈ P2, δ ′
= δ2 ∪ {t 7→ s2|deps(t, σ2)} and P ′
= P2 \ {t }.
2
2
Cond. 1 and 2 again are immediate. For cond. 3, C ′
= C2 and for
2
cond. 5,
2 with step-param(σ2, σ ′
−→→ σ ′
{t }
F ′
2 ∩ dom(δ ′
since, again, dom(δ ′
2) \ dom(δ2) = {t } and t < dom(F2). Finally for
cond. 2,
2) = F2 ∩ dom(δ2)
s ′
2 \ dom(δ ′
2) = s2[t 7→ v] \ dom(δ2) ∪ {t }
= s2[t 7→ v] \ dom(δ2) ∪ {t }
= s2 \ dom(δ2)
(Case Rbk) We get that (I2, s2, C2, F2) /t (I2, δ2(t ), C2, F2) and t <
= δ2\∆∗,
P2. We get I ′
2
and P ′
= P2 \ ∆∗. For cond. 1 and 2 ﬁrst note that t ∈ dom(δ2). If t
2
is not a PC store the eﬀect of Rbk is to remove t from s2, F2, δ2, P2.
= F2\∆∗, δ ′
2
= I2\∆+, s ′
2
= s2|∆∗ , C ′
2
= C2, F ′
2
2, δ ′
2, P ′
Œis does not aﬀect the bijectione·, so 1 and 2 remain valid also for
(σ ′
2). If t is a PC store then we need to observe the following:
Since t is speculated, t is a member of some ”macro”-instruction (=
partition) I2,i . Œe set ∆+ contains all instructions/partitions I2, j
+ I2, j . In particular, no such I2, j is in I2, f u , since
such that I2,i <
otherwise I2, j would have been added by a retired PC store mi-
croinstruction. It follows that the bijectione· is not aﬀected by the
removal of ∆+, and 1 and 2 are reestablished for the new specula-
tive state.
For cond. 3, C ′
2
s ′
2|
= C2. For cond. 4, we calculate:
dom(δ ′
2 )
= (s2|∆∗ )|
dom(δ ′
2 )
= s2|
= s2|
= s2|
dom(δ ′
2 )∪P ′
2∪∆∗
dom(δ2 \∆∗)∪∆∗
dom(δ2 )∪∆∗
= s2|
dom(δ2 )
.
Note that the ﬁnal step uses prop. A.8.
Proposition A.8. Še relation ≺∗ is a partial order.
Proof. By induction in the length of derivation.
(cid:3)
Finally for cond. 5:
F ′
2 \ dom(δ ′
2) = (F2 \ ∆∗) \ (dom(δ2) \ ∆∗)
= P2, δ ′
2
2 ), t ), P ′
2
2, step-param(σ2, σ ′
= δ2 ∪ {t ′ 7→ s |{t } | t ′ ∈ I ′′
= F2 \ (dom(δ2)) .
(Case speculative Ftc) We get that σ2 −→→ σ ′
2) =
(Ftc(I ′′
2 }, and, since
t is speculated, t ∈ dom(δ2). Also, we ﬁnd t ← c?st P C tv ∈ I2,
s2(t ) = v, t < F2, bn(str-may(σ2, t )) ⊆ F2, I ′
= s,
2
C ′
= F ∪ {t }. For cond. 1 and 2 observe that no
2
instruction I ′ added by the fetch can belong to I ′
, since all such
instructions are produced by a retired PC store instruction.
For cond. 3, C ′
2
For cond. 4 we calculate:
= C2 is immediate.
= C2, and F ′
2
= I2 ∪ I ′′
2 , s ′
2
2, f u
s ′
2|
dom(δ ′
2 )
= s2|
= s2|
dom(δ2 )∪{t ′ |t ′ ∈I ′′
2 }
dom(δ2 )
Finally for cond. 5:
F ′
2 \ dom(δ ′
2) = (F2 ∪ {t }) \ (dom(δ2) ∪ {t ′ | t ′ ∈ I ′′
2 })
= F2 \ dom(δ2)
(cid:3)
Œe following Lemma handle cases for Ret when t < F2, Cmt, Ftc
when t < dom(δ2) (which are identiﬁed by T 2 in Figure), and the