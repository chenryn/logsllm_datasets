|                       |        |         | 的时间完成。使用此选  |
|                       |        |         | 项指定替代的、status  |
|                       |        |         | 操作使用的、特        |
|                       |        |         | 定于设备的超时时间。  |
+-----------------------+--------+---------+-----------------------+
| `pcmk_stat            | 整数   | 2       | 在超时时间内重试      |
| us_retries`{.literal} |        |         | status                |
|                       |        |         | 命令的次数上限。      |
|                       |        |         | 有些设备不支持多个连  |
|                       |        |         | 接。如果设备忙碌了处  |
|                       |        |         | 理另一个任务，操作可  |
|                       |        |         | 能会失败，因此如果还  |
|                       |        |         | 有剩余时间，Pacemaker |
|                       |        |         | 会自动重试操          |
|                       |        |         | 作。使用这个选项更改  |
|                       |        |         | Pacemaker 在放弃前    |
|                       |        |         | status 操作的次数。   |
+-----------------------+--------+---------+-----------------------+
| `pcmk_                | time   | 0s      | 为 stonith            |
| delay_base`{.literal} |        |         | 操作启用基础延迟并指  |
|                       |        |         | 定一个基本延迟值。在  |
|                       |        |         | 带有偶数节点的集群中  |
|                       |        |         | ，配置延迟有助于避免  |
|                       |        |         | 在平等分割时同时出现  |
|                       |        |         | 节点相互隔离的问题。  |
|                       |        |         | 当同一个隔离设备被所  |
|                       |        |         | 有节点使用时，使用一  |
|                       |        |         | 个随机延迟会很有用，  |
|                       |        |         | 而如果每个节点都使用  |
|                       |        |         | 单独的设备时，使用不  |
|                       |        |         | 同的静态延迟会很有用  |
|                       |        |         | 。总的延迟是根据一个  |
|                       |        |         | 随机延迟值再加上这个  |
|                       |        |         | 静态延迟而获得的，这  |
|                       |        |         | 样可以保持总和低于最  |
|                       |        |         | 大延迟。如果您设置了  |
|                       |        |         | `pcmk_delay_base`{    |
|                       |        |         | .literal}，但没有设置 |
|                       |        |         | `pcmk_del             |
|                       |        |         | ay_max`{.literal}，则 |
|                       |        |         | 没有随机组件，它将是  |
|                       |        |         | `pcmk_                |
|                       |        |         | delay_base`{.literal} |
|                       |        |         | 的值。                |
|                       |        |         |                       |
|                       |        |         | 有些隔离代理使用一个  |
|                       |        |         | \"delay\"             |
|                       |        |         | 参数，它独立于使用    |
|                       |        |         | `pc                   |
|                       |        |         | mk_delay_*`{.literal} |
|                       |        |         | 属性                  |
|                       |        |         | 配置的延迟。如果同时  |
|                       |        |         | 配置了这两个延迟，它  |
|                       |        |         | 们会被相加。因此，一  |
|                       |        |         | 般不要同时使用它们。  |
+-----------------------+--------+---------+-----------------------+
| `pcmk                 | time   | 0s      | 为 stonith            |
| _delay_max`{.literal} |        |         | 动作启用随机延迟并    |
|                       |        |         | 指定最大随机延迟。在  |
|                       |        |         | 带有偶数节点的集群中  |
|                       |        |         | ，配置延迟有助于避免  |
|                       |        |         | 在平等分割时同时出现  |
|                       |        |         | 节点相互隔离的问题。  |
|                       |        |         | 当同一个隔离设备被所  |
|                       |        |         | 有节点使用时，使用一  |
|                       |        |         | 个随机延迟会很有用，  |
|                       |        |         | 而如果每个节点都使用  |
|                       |        |         | 单独的设备时，使用不  |
|                       |        |         | 同的静态延迟会很有用  |
|                       |        |         | 。总的延迟是根据一个  |
|                       |        |         | 随机延迟值再加上这个  |
|                       |        |         | 静态延迟而获得的，这  |
|                       |        |         | 样可以保持总和低于最  |
|                       |        |         | 大延迟。如果您设置了  |
|                       |        |         | `pcmk_delay_max`{     |
|                       |        |         | .literal}，但没有设置 |
|                       |        |         | `pcmk_de              |
|                       |        |         | lay_base`{.literal}， |
|                       |        |         | 则延迟没有静态组件。  |
|                       |        |         |                       |
|                       |        |         | 有些隔离代理使用一个  |
|                       |        |         | \"delay\"             |
|                       |        |         | 参数，它独立于使用    |
|                       |        |         | `pc                   |
|                       |        |         | mk_delay_*`{.literal} |
|                       |        |         | 属性                  |
|                       |        |         | 配置的延迟。如果同时  |
|                       |        |         | 配置了这两个延迟，它  |
|                       |        |         | 们会被相加。因此，一  |
|                       |        |         | 般不要同时使用它们。  |
+-----------------------+--------+---------+-----------------------+
| `pcmk_ac              | 整数   | 1       | 在这个设备上可并行    |
| tion_limit`{.literal} |        |         | 执行的最大操作数量。  |
|                       |        |         | 需要首先配置集群属性  |
|                       |        |         | `并发-fencing=        |
|                       |        |         | true`{.literal}。值为 |
|                       |        |         | -1 代表没有限制。     |
+-----------------------+--------+---------+-----------------------+
| `pcmk                 | 字符串 | on      | 仅                    |
| _on_action`{.literal} |        |         | 供高级使用：要运行的  |
|                       |        |         | 一个替代命令，而不是  |
|                       |        |         | `on`{.l               |
|                       |        |         | iteral}。有些设备不支 |
|                       |        |         | 持标准命令或者可能需  |
|                       |        |         | 要提供额外的命令。使  |
|                       |        |         | 用这个选项指定可执行  |
|                       |        |         | `on`{.literal}        |
|                       |        |         | 操作的替代的、特      |
|                       |        |         | 定于具体设备的命令。  |
+-----------------------+--------+---------+-----------------------+
| `pcmk_                | time   | 60s     | 仅供高级使用：指定用  |
| on_timeout`{.literal} |        |         | 于操作的替代超时时间  |
|                       |        |         | `，`{.literal} 而不是 |
|                       |        |         | `stonith              |
|                       |        |         | -timeout`{.literal}。 |
|                       |        |         | 和一般的设备相比，有  |
|                       |        |         | 些设备需要更长或更短  |
|                       |        |         | 的时间完成。使用这个  |
|                       |        |         | 选项指定替代的、`操作 |
|                       |        |         | 使用的、特定于设备的  |
|                       |        |         | 超时时间`{.literal}。 |
+-----------------------+--------+---------+-----------------------+
| `pcmk_                | 整数   | 2       | 仅供高级使用：        |
| on_retries`{.literal} |        |         | `在`{.literal}        |
|                       |        |         | 超时时间内            |
|                       |        |         | 重试命令的次数上限。  |
|                       |        |         | 有些设备不支持多个连  |
|                       |        |         | 接。如果设备忙碌了处  |
|                       |        |         | 理另一个任务，操作可  |
|                       |        |         | 能会失败，因此如果还  |
|                       |        |         | 有剩余时间，Pacemaker |
|                       |        |         | 会自动重试操          |
|                       |        |         | 作。使用这个选项更改  |
|                       |        |         | Pacemaker             |
|                       |        |         | 在放弃前重试          |
|                       |        |         | `操作`{.literal}      |
|                       |        |         | 的次数。              |
+-----------------------+--------+---------+-----------------------+
:::
:::
您可以设置 `fence-reaction 集群`{.literal} 属性，如 [表 12.1
"集群属性"](#ch-clusteropts-HAAR.html#tb-clusterprops-HAAR "表 12.1. 集群属性"){.xref}
中所示，决定集群节点在其自身隔离通知时应如何做出反应。如果错误配置了隔离，或者使用
fabric
隔离方式当没有中断集群的通信，集群节点可能会收到其自身隔离的通知信息。虽然此属性的默认值为
`stop`{.literal}，它会尝试立即停止 Pacemaker
并保持停止，但这个值的最安全选择是
`panic`{.literal}，它会尝试立即重启本地节点。如果您希望使用
stop（通常是使用 fabric 隔离方式时），建议对这个参数进行明确设定。
:::
::: section
::: titlepage
# []{#ch-fencing-HAAR.html#s1-fencelevels-HAAR}配置隔离级别 {.title}
:::
Pacemaker
通过一个称为隔离拓扑的功能实现有多个设备的节点的隔离。要实现拓扑结构，根据常规创建独立设备，然后在配置中的隔离拓扑部分定义一个或多个隔离级别。
::: itemizedlist
-   级别以整数形式递增，从 1 开始。
-   如果设备失败，对当前级别的处理会中断。不会执行该级别的其他设备，而是尝试下一个级别。
-   如果所有设备被成功隔离，那么该级别已成功，且不会尝试其他级别。
-   当一个级别被通过（success）或所有级别都已经被尝试（failed）后，操作就会完成。
:::
使用以下命令为节点添加隔离级别。这些设备以使用用逗号分开的 stonith id
列表形式提供，它们是该级别要尝试的节点。
``` screen
pcs stonith level add level node devices
```
以下命令列出目前配置的所有隔离级别。
``` screen
pcs stonith level
```
在以下示例中，为节点 `rh7-2`{.literal} 配置两个隔离设备：一个名为
`my_ilo 的 ilo 隔离设备，以及名为 my_`{.literal} apc``{=html} 的
apc 隔离设备。这些命令设置隔离级别，以便在设备 `my_ilo`{.literal}
失败且无法隔离节点时，Pacemaker 将尝试使用设备
`my_apc`{.literal}。本例还显示了配置级别后 `pcs stonith level`{.literal}
命令的输出。
``` screen
# pcs stonith level add 1 rh7-2 my_ilo
# pcs stonith level add 2 rh7-2 my_apc
# pcs stonith level
 Node: rh7-2
  Level 1 - my_ilo
  Level 2 - my_apc
```
以下命令删除指定节点和设备的隔离级别。如果没有指定节点或设备，则您指定的隔离级别会从所有节点中删除。
``` screen
pcs stonith level remove level [node_id] [stonith_id] ... [stonith_id]
```
以下命令清除指定节点或者 stonith id 的隔离级别。如果您没有指定节点或
stonith id，则会清除所有隔离级别。
``` screen
pcs stonith level clear [node|stonith_id(s)]
```
如果您指定一个以上的 stonith
id，则必须用逗号分开（不要有空格），如下例所示。
``` screen
# pcs stonith level clear dev_a,dev_b
```
以下命令可验证所有在隔离级别指定的隔离设备和节点是否存在。
``` screen
pcs stonith level verify
```
从 Red Hat Enterprise Linux 7.4
开始，您可以通过在节点名称上应用的正则表达式、节点属性及其值来指定隔离拓扑中的节点。例如，以下命令将节点
`node1`{.literal}、node`2 和 ' node`{.literal} `3`{.literal}
配置为使用隔离设备 `apc1`{.literal} 和 \'`apc2`{.literal}，以及节点
\'`node4`{.literal}、node`5`{.literal} 和
\'`node6`{.literal}，以使用隔离设备 `apc3`{.literal} 和
\'`apc4`{.literal}。
``` screen
pcs stonith level add 1 "regexp%node[1-3]" apc1,apc2
pcs stonith level add 1 "regexp%node[4-6]" apc3,apc4
```
以下命令通过使用节点属性匹配得到同样的结果。
``` screen
pcs node attribute node1 rack=1
pcs node attribute node2 rack=1
pcs node attribute node3 rack=1
pcs node attribute node4 rack=2
pcs node attribute node5 rack=2
pcs node attribute node6 rack=2
pcs stonith level add 1 attrib%rack=1 apc1,apc2
pcs stonith level add 1 attrib%rack=2 apc3,apc4
```
:::
::: section
::: titlepage
# []{#ch-fencing-HAAR.html#s1-redundantfence-HAAR}为冗余电源配置隔离 {.title}
:::
当为冗余电源配置隔离时，集群必须确保在尝试重启主机时，在恢复电源前两个电源都关闭。
如果节点永远无法完全断电，则该节点可能无法释放其资源。这可能会导致同时访问这些资源，并导致节点崩溃的问题。
在 Red Hat Enterprise Linux 7.2 之前，您需要明确配置使用 \'on\' 或
\'off\' 操作的设备的不同版本。由于 Red Hat Enterprise Linux
7.2，现在只需要定义每个设备一次，并指定它们都需要隔离该节点，如下例所示。
``` screen
# pcs stonith create apc1 fence_apc_snmp ipaddr=apc1.example.com login=user passwd='7a4D#1j!pz864' pcmk_host_map="node1.example.com:1;node2.example.com:2"
# pcs stonith create apc2 fence_apc_snmp ipaddr=apc2.example.com login=user passwd='7a4D#1j!pz864' pcmk_host_map="node1.example.com:1;node2.example.com:2"
# pcs stonith level add 1 node1.example.com apc1,apc2
# pcs stonith level add 1 node2.example.com apc1,apc2
```
:::
::: section
::: titlepage
# []{#ch-fencing-HAAR.html#s1-acpi-CA}配置 ACPI 以用于集成隔离设备 {.title}
:::
[]{#ch-fencing-HAAR.html#idm140680352669392
.indexterm}[]{#ch-fencing-HAAR.html#idm140680361204128
.indexterm}[]{#ch-fencing-HAAR.html#idm140680362506368 .indexterm}
如果您的集群使用集成的隔离设备，必须配置
ACPI（高级配置和电源界面）以保证迅速和完全的隔离。
如果将集群节点配置为使用集成的隔离设备保护，则为该节点禁用 ACPI
Soft-Off。禁用 ACPI Soft-Off
[**可让集成的隔离设备立即完全关闭节点，而不是尝试彻底关闭（例如，现在的
shutdown -h**]{.command}）。否则，如果启用了 ACPI
Soft-Off，集成的隔离设备可能需要 4
秒以上的时间来关闭节点（请参阅下面的备注）。另外，如果启用了 ACPI
Soft-Off，且在关闭过程中有一个节点 panic
或停滞，则集成的保护设备可能无法关闭该节点。在这些情况下，隔离会被延迟或者失败。因此，当使用集成隔离设备隔离节点并启用
ACPI Soft-Off时，集群恢复会很慢，或者需要管理员进行干预才能恢复。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
保护节点所需时间取决于所使用的集成的保护设备。有些集成的保护设备性能与按住电源按钮相当，因此隔离设备可在
4-5
秒内关闭该节点。其他集成的隔离设备性能与按电源开关一致，依靠操作系统关闭该节点，因此隔离设备关闭该节点的时间要大大超过
4-5 秒。
:::
::: itemizedlist
-   禁用 ACPI Soft-Off 的首选方法是将 BIOS
    设置改为\"instant-off\"或无延迟关闭该节点的对等设置，如 ["使用 BIOS
    禁用 ACPI
    Soft-Off"一节](#ch-fencing-HAAR.html#s2-bios-setting-CA "使用 BIOS 禁用 ACPI Soft-Off"){.xref}
    所述。
:::
使用 BIOS 禁用 ACPI Soft-Off 可能不适用于某些系统。如果无法使用 BIOS
禁用 ACPI Soft-Off，您可以使用以下备选方法之一禁用 ACPI Soft-Off：
::: itemizedlist
-   在 `/etc/systemd/logind.conf`{.filename} 文件中设置
    `HandlePowerKey=ignore`{.literal}，并验证隔离时节点是否立即关闭，如
    ["在 logind.conf 文件中禁用 ACPI
    Soft-Off"一节](#ch-fencing-HAAR.html#s2-acpi-disable-logind-CA "在 logind.conf 文件中禁用 ACPI Soft-Off"){.xref}
    所述。这是禁用 ACPI Soft-Off 的第一个备用方法。
-   在内核引导命令行中附加 **`acpi=off`**，如 ["在 GRUB 2 文件中完全禁用
    ACPI"一节](#ch-fencing-HAAR.html#s2-acpi-disable-boot-CA "在 GRUB 2 文件中完全禁用 ACPI"){.xref}
    所述。这是禁用 ACPI Soft-Off
    的第二个备用方法，如果首选方法或第一个备用方法不可用时使用。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    这个方法可完全禁用 ACPI。当 ACPI
    被完全禁用时，以下计算机可能无法正确引导。[*只有在*]{.emphasis}其他方法无法在您的集群中使用时，才使用这个方法。
    :::
:::
::: section
::: titlepage
## []{#ch-fencing-HAAR.html#s2-bios-setting-CA}使用 BIOS 禁用 ACPI Soft-Off {.title}
:::
您可以按照以下步骤配置每个集群节点的 BIOS 来禁用 ACPI Soft-Off。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}