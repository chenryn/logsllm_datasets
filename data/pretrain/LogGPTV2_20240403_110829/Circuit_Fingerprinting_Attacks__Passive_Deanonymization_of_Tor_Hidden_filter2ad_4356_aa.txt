title:Circuit Fingerprinting Attacks: Passive Deanonymization of Tor Hidden
Services
author:Albert Kwon and
Mashael AlSabah and
David Lazar and
Marc Dacier and
Srinivas Devadas
Circuit Fingerprinting Attacks: Passive 
Deanonymization of Tor Hidden Services
Albert Kwon, Massachusetts Institute of Technology; Mashael AlSabah, Qatar Computing 
Research Institute, Qatar University, and Massachusetts Institute of Technology; David Lazar, 
Massachusetts Institute of Technology; Marc Dacier, Qatar Computing Research Institute; 
Srinivas Devadas, Massachusetts Institute of Technology
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/kwon
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXCircuit Fingerprinting Attacks:
Passive Deanonymization of Tor Hidden Services
Albert Kwon†, Mashael AlSabah‡§†∗, David Lazar†, Marc Dacier‡, and Srinivas Devadas†
†Massachusetts Institute of Technology, {kwonal,lazard,devadas}@mit.edu
‡Qatar Computing Research Institute, PI:EMAIL
§Qatar University, PI:EMAIL
This paper sheds light on crucial weaknesses in the
design of hidden services that allow us to break the
anonymity of hidden service clients and operators pas-
sively.
In particular, we show that the circuits, paths
established through the Tor network, used to commu-
nicate with hidden services exhibit a very different be-
havior compared to a general circuit. We propose two
attacks, under two slightly different threat models, that
could identify a hidden service client or operator using
these weaknesses. We found that we can identify the
users’ involvement with hidden services with more than
98% true positive rate and less than 0.1% false positive
rate with the ﬁrst attack, and 99% true positive rate and
0.07% false positive rate with the second. We then re-
visit the threat model of previous website ﬁngerprinting
attacks, and show that previous results are directly ap-
plicable, with greater efﬁciency, in the realm of hidden
services. Indeed, we show that we can correctly deter-
mine which of the 50 monitored pages the client is visit-
ing with 88% true positive rate and false positive rate as
low as 2.9%, and correctly deanonymize 50 monitored
hidden service servers with true positive rate of 88% and
false positive rate of 7.8% in an open world setting.
Introduction
1
In today’s online world where gathering users’ per-
sonal data has become a business trend, Tor [14] has
emerged as an important privacy-enhancing technology
allowing Internet users to maintain their anonymity on-
line. Today, Tor is considered to be the most popular
anonymous communication network, serving millions of
clients using approximately 6000 volunteer-operated re-
lays, which are run from all around the world [3].
In addition to sender anonymity, Tor’s hidden services
allow for receiver anonymity. This provides people with
a free haven to host and serve content without the fear
of being targeted, arrested or forced to shut down [11].
∗Joint ﬁrst author.
As a result, many sensitive services are only accessi-
ble through Tor. Prominent examples include human
rights and whistleblowing organizations such as Wik-
ileaks and Globalleaks, tools for anonymous messag-
ing such as TorChat and Bitmessage, and black markets
like Silkroad and Black Market Reloaded. Even many
non-hidden services, like Facebook and DuckDuckGo,
recently have started providing hidden versions of their
websites to provide stronger anonymity guarantees.
That said, over the past few years, hidden services
have witnessed various active attacks in the wild [12, 28],
resulting in several takedowns [28]. To examine the se-
curity of the design of hidden services, a handful of at-
tacks have been proposed against them. While they have
shown their effectiveness, they all assume an active at-
tacker model. The attacker sends crafted signals [6] to
speed up discovery of entry guards, which are ﬁrst-hop
routers on circuits, or use congestion attacks to bias entry
guard selection towards colluding entry guards [22]. Fur-
thermore, all previous attacks require a malicious client
to continuously attempt to connect to the hidden service.
In this paper, we present the ﬁrst practical passive
attack against hidden services and their users called
circuit ﬁngerprinting attack. Using our attack, an at-
tacker can identify the presence of (client or server) hid-
den service activity in the network with high accuracy.
This detection reduces the anonymity set of a user from
millions of Tor users to just the users of hidden ser-
vices. Once the activity is detected, we show that the
attacker can perform website ﬁngerprinting (WF) attacks
to deanonymize the hidden service clients and servers.
While the threat of WF attacks has been recently criti-
cized by Juarez et al. [24], we revisit their ﬁndings and
demonstrate that the world of hidden services is the ideal
setting to wage WF attacks. Finally, since the attack
is passive, it is undetectable until the nodes have been
deanonymized, and can target thousands of hosts retroac-
tively just by having access to clients’ old network trafﬁc.
USENIX Association  
24th USENIX Security Symposium  287
Approach. We start by studying the behavior of Tor cir-
cuits on the live Tor network (for our own Tor clients and
hidden services) when a client connects to a Tor hidden
service. Our key insight is that during the circuit con-
struction and communication phase between a client and
a hidden service, Tor exhibits ﬁngerprintable trafﬁc pat-
terns that allow an adversary to efﬁciently and accurately
identify, and correlate circuits involved in the communi-
cation with hidden services. Therefore, instead of mon-
itoring every circuit, which may be costly, the ﬁrst step
in the attacker’s strategy is to identify suspicious circuits
with high conﬁdence to reduce the problem space to just
hidden services. Next, the attacker applies the WF at-
tack [10, 36, 35] to identify the clients’ hidden service
activity or deanonymize the hidden service server.
Contributions. This paper offers the following contri-
butions:
1. We present key observations regarding the commu-
nication and interaction pattern in the hidden ser-
vices design in Tor.
2. We identify distinguishing features that allow a pas-
sive adversary to easily detect the presence of hid-
den service clients or servers in the local network.
We evaluate our detection approach and show that
we can classify hidden service circuits (from the
client- and the hidden service-side) with more than
98% accuracy.
3. For a stronger attacker who sees a majority of the
clients’ Tor circuits, we propose a novel circuit cor-
relation attack that is able to quickly and efﬁciently
detect the presence of hidden service activity using
a sequence of only the ﬁrst 20 cells with accuracy
of 99%.
4. Based on our observations and results, we argue that
the WF attacker model is signiﬁcantly more realis-
tic and less costly in the domain of hidden services
as opposed to the general web. We evaluate WF at-
tacks on the identiﬁed circuits (from client and hid-
den service side), and we are able to classify hidden
services in both open and closed world settings.
5. We propose defenses that aim to reduce the detec-
tion rate of the presence of hidden service commu-
nication in the network.
Roadmap. We ﬁrst provide the reader with a back-
ground on Tor, its hidden service design, and WF attacks
in Section 2. We next present, in Section 3, our obser-
vations regarding different characteristics of hidden ser-
vices. In Section 4, we discuss our model and assump-
tions, and in Sections 5 and 6, we present our attacks and
Figure 1: Cells exchanged between the client and the entry
guard to build a general circuit for non-hidden streams after the
circuit to G1 has been created.
evaluation. In Section 7, we demonstrate the effective-
ness of WF attacks on hidden services. We then discuss
possible future countermeasures in Section 8. Finally,
we overview related works in Section 9, and conclude in
Section 10.
2 Background
We will now provide the necessary background on Tor
and its hidden services. Next, we provide an overview of
WF attacks.
2.1 Tor and Hidden Services
Alice uses the Tor network simply by installing the
Tor browser bundle, which includes a modiﬁed Firefox
browser and the Onion Proxy (OP). The OP acts as an
interface between Alice’s applications and the Tor net-
work. The OP learns about Tor’s relays, Onion Routers
(ORs), by downloading the network consensus document
from directory servers. Before Alice can send her trafﬁc
through the network, the OP builds circuits interactively
and incrementally using 3 ORs: an entry guard, middle,
and exit node. Tor uses 512-byte ﬁxed-sized cells as its
communication data unit for exchanging control infor-
mation between ORs and for relaying users’ data.
The details of the circuit construction process in Tor
proceeds as follows. The OP sends a create fast cell
to establish the circuit with the entry guard, which re-
sponds with a created fast. Next, the OP sends an
extend command cell to the entry guard, which causes
it to send a create cell to the middle OR to establish
the circuit on behalf of the user. Finally, the OP sends
another extend to the middle OR to cause it to cre-
ate the circuit at exit. Once done, the OP will receive
an extended message from the middle OR, relayed by
the entry guard. By the end of this operation, the OP
288  24th USENIX Security Symposium 
USENIX Association
2
OPextendextendedextendextendedG1beginconnecteddataLegend:  Received by G1  Relayed by G1will have shared keys used for layered encryption, with
every hop on the circuit.1 The exit node peels the last
layer of the encryption and establishes the TCP connec-
tion to Alice’s destination. Figure 1 shows the cells ex-
changed between OP and the entry guard for regular Tor
connections, after the exchange of the create fast and
created fast messages.
Tor uses TCP secured with TLS to maintain the OP-
to-OR and the OR-to-OR connections, and multiplexes
circuits within a single TCP connection. An OR-to-
OR connection multiplexes circuits from various users,
whereas an OP-to-OR connection multiplexes circuits
from the same user. An observer watching the OP-to-OR
TCP connection should not be able to tell apart which
TCP segment belongs to which circuit (unless only one
circuit is active). However, an entry guard is able to dif-
ferentiate the trafﬁc of different circuits (though the con-
tents of the cells are encrypted).
Tor also allows receiver anonymity through hidden
services. Bob can run a server behind his OP to serve
content without revealing his identity or location. The
overview of creation and usage of hidden services is de-
picted in Figure 2. In order to be reachable by clients,
Bob’s OP will generate a hidden service descriptor, and
execute the following steps. First, Bob’s OP chooses a
random OR to serve as his Introduction Point (IP), and
creates a circuit to it as described above. Bob then sends
an establish intro message that contains Bob’s pub-
lic key (the client can select more than one IP). If the
OR accepts, it sends back an intro established to
Bob’s OP. Bob now creates a signed descriptor (contain-
ing a timestamp, information about the IP, and its public
key), and computes a descriptor-id based on the public
key hash and validity duration. The descriptor is then
published to the hash ring formed by the hidden service
directories, which are the ORs that have been ﬂagged by
the network as “HSDir”. Finally, Bob advertises his hid-
den service URL z.onion out of band, which is derived
from the public key. This sequence of exchanged cells to
create a hidden service is shown in Figure 3.
In Figure 4, we show how Alice can connect to Bob.
Using the descriptor from the hidden service directo-
ries, The exchange of cells goes as follows.
First,
Alice’s OP selects a random OR to serve as a Ren-
dezvous Point (RP) for its connection to Bob’s service,
and sends an establish rendezvous cell (through a
Tor circuit).
it responds with a
rendezvous established cell. In the meantime, Al-
ice’s OP builds another circuit to one of Bob’s IPs, and
sends an introduce1 cell along with the address of RP
and a cookie (one-time secret) encrypted under Bob’s
If the OR accepts,
1We have omitted the details of the Difﬁe-Hellman handshakes (and
the Tor Authentication Protocol (TAP) in general), as our goal is to
demonstrate the data ﬂow only during the circuit construction process.
Figure 2: Circuit construction for Hidden Services.
public key. The IP then relays that information to Bob
and an introduce2 cell, and sends an introduce ack
towards Alice. At this point, Bob’s OP builds a circuit
towards Alice’s RP and sends it a rendezvous1, which
causes the RP to send a rendezvous2 towards Alice. By
the end of this operation, Alice and Bob will have shared
keys established through the cookie, and can exchange
data through the 6 hops between them.
2.2 Website Fingerprinting
One class of trafﬁc analysis attacks that has gained re-
search popularity over the past few years is the website
ﬁngerprinting (WF) attack [10, 36, 35, 9]. This attack
demonstrates that a local passive adversary observing the
(SSH, IPsec, or Tor) encrypted trafﬁc is able, under cer-
tain conditions, to identify the website being visited by
the user.
In the context of Tor, the strategy of the attacker is
as follows. The attacker tries to emulate the network
conditions of the monitored clients by deploying his own
client who visits websites that he is interested in classi-
fying through the live network. During this process, the
attacker collects the network traces of the clients. Then,
he trains a supervised classiﬁer with many identifying
features of a network trafﬁc of a website, such as the se-
quences of packets, size of the packets, and inter-packet
timings. Using the model built from the samples, the
attacker then attempts to classify the network traces of
users on the live network.
WF attacks come in two settings: open- or closed-
world. In the closed-world setting, the attacker assumes
that the websites visited are among a list of k known web-
sites, and the goal of the attacker is to identify which
one. The open-world setting is more realistic in that it
assumes that the client will visit a larger set of websites
USENIX Association  
24th USENIX Security Symposium  289
3
Hidden Service ClientHidden Service IPRPHSDir123456Figure 3: Cells exchanged in the circuit between the entry
guards and the hidden service operator after the circuits to G1
and G2 have been created. Note that both G1 and G2 might
be the same OR, and that entry guards can only view the ﬁrst
extend cell they receive.
n, and the goal of the attacker is to identify if the client
is visiting a monitored website from a list of k websites,
where k (cid:31) n.
Hermann et al. [20] were the ﬁrst to test this attack
against Tor using a multinomial Naive Bayes classiﬁer,
which only achieved 3% success rate since it relied on
packet sizes which are ﬁxed in Tor. Panchenko et al. [33]
improved the results by using a Support Vector Ma-
chine (SVM) classiﬁer, using features that are mainly
based on the volume, time, and direction of the traf-
ﬁc, and achieved more than 50% accuracy in a closed-
world experiment of 775 URLs. Several subsequent pa-
pers have worked on WF in open-world settings, im-
proved on the classiﬁcation accuracy, and proposed de-
fenses [10, 36, 35, 9].
3 Observations on Hidden Service Circuits
To better understand different circuit behaviors, we car-
ried out a series of experiments, which were designed to
show different properties of the circuits used in the com-
munication between a client and a Hidden Service (HS),
such as the Duration of Activity (DoA), incoming and
outgoing cells, presence of multiplexing, and other po-
tentially distinguishing features. DoA is the period of
time during which a circuit sends or receives cells. The
expected lifetime of a circuit is around 10 minutes, but
circuits may be alive for more or less time depending on
their activities.
For the remainder of this paper, we use the following
terminology to denote circuits:
Figure 4: Cells exchanged in the circuit between the entry
guards and the client attempting to access a hidden service after
the circuits to G1 and G2 have been created.