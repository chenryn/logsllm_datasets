**先决条件**
-   `root`{.literal} 访问权限
:::
::: orderedlist
**流程**
1.  以 `root`{.literal} 用户身份，在您选择的编辑器中打开
    `/etc/profile`{.literal} 文件。
2.  修改以下部分以设置新的默认 bash [*umask*]{.emphasis}:
    ``` screen
    if [ $UID -gt 199 ] && [ “/usr/bin/id -gn” = “/usr/bin/id -un” ]; then
        umask 002
    else
        umask 022
    fi
    ```
    将 [*umask*]{.emphasis}
    的数值（`022`{.literal}）替换为另一个数值。[如需了解更多详细信息，请参阅用户文件创建模式掩码](#assembly_managing-file-permissions_configuring-basic-system-settings.html#user-file-creation-mode-mask_assembly_managing-file-permissions "用户文件创建模式掩码"){.link}。
3.  保存更改并退出编辑器。
:::
:::
::: section
::: titlepage
# []{#assembly_managing-the-umask_configuring-basic-system-settings.html#changing-the-umask-for-a-specific-user_assembly_managing-the-umask}更改特定用户的默认 umask {.title}
:::
您可以通过修改该用户的 `.bashrc`{.literal} 来更改特定用户的默认
[*umask*]{.emphasis}。
::: itemizedlist
**流程**
-   将指定 [*umask*]{.emphasis} 的数值的行附加到特定用户的
    `.bashrc`{.literal} 文件中。
    ``` screen
    $ echo 'umask octal_value' >> /home/username/.bashrc
    ```
    使用数值替换 [*octal_value*]{.emphasis}，并使用用户名替换
    [*username*]{.emphasis}。[如需了解更多详细信息，请参阅用户文件创建模式掩码](#assembly_managing-file-permissions_configuring-basic-system-settings.html#user-file-creation-mode-mask_assembly_managing-file-permissions "用户文件创建模式掩码"){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_managing-the-umask_configuring-basic-system-settings.html#setting-default-home-directory-permissions_assembly_managing-the-umask}为新创建的主目录设置默认 UMASK {.title}
:::
您可以通过修改 `/etc/login.defs`{.literal}
文件来更改为新创建的用户的主目录指定 [*UMASK*]{.emphasis} 的权限。
::: orderedlist
**流程**
1.  以 `root`{.literal} 用户身份，在您选择的编辑器中打开
    `/etc/login.defs`{.literal} 文件。
2.  修改以下部分以设置新的默认 [*UMASK*]{.emphasis}：
    ``` screen
    # The permission mask is initialized to this value. If not specified,
    # the permission mask will be initialized to 022.
    UMASK 077
    ```
    将默认数值（`077`{.literal}）替换为另一个数值。[如需了解更多详细信息，请参阅用户文件创建模式掩码](#assembly_managing-file-permissions_configuring-basic-system-settings.html#user-file-creation-mode-mask_assembly_managing-file-permissions "用户文件创建模式掩码"){.link}。
3.  保存更改并退出编辑器。
:::
:::
:::
[]{#assembly_using-dnstap-in-rhel-8_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#assembly_using-dnstap-in-rhel-8_configuring-basic-system-settings.html#assembly_using-dnstap-in-rhel-8_configuring-basic-system-settings}第 27 章 在 RHEL 中使用 dnstap {.title}
:::
`dnstap`{.literal}
实用程序提供了一种高级方法来监控和记录传入名称查询的详细信息。它记录了从
`named`{.literal} 服务发送的消息。本节介绍如何使用 `dnstap`{.literal}
记录 DNS 查询。
::: section
::: titlepage
# []{#assembly_using-dnstap-in-rhel-8_configuring-basic-system-settings.html#proc_recording-dns-queries-using-dnstap-in-rhel-8_assembly_using-dnstap-in-rhel-8}在 RHEL 中使用 dnstap 记录 DNS 查询 {.title}
:::
网络管理员可以记录 DNS 查询，以收集网站或 IP 地址信息以及域健康状况。
::: itemizedlist
**先决条件**
-   将 `BIND`{.literal} 软件包升级到 `bind-9.11.26-2`{.literal}
    或更高版本。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
如果您已安装并运行 `BIND`{.literal} 版本，添加新版本的 `BIND`{.literal}
将覆盖现有的版本。
:::
::: title
**流程**
:::
以下是记录 DNS 查询的步骤：
::: orderedlist
1.  编辑 `options`{.literal} 块中的 `/etc/named.conf`{.literal}
    文件以启用 `dnstap`{.literal} 和目标文件：
    ``` screen
    options
    {
    # …
    dnstap { all; }; # Configure filter
    dnstap-output file “/var/named/data/dnstap.bin”;
    # …
    };
    # end of options
    ```
    `（所有 | auth | 客户端 | 转发器 | 解析器 | 更新 ）[（查询 | response）];`{.literal}
    `dnstap`{.literal} 过滤器包含多个定义，用 a ` 分隔；`{.literal} 在
    `dnstap {}`{.literal} 块中。
    以下是每个规则的语法：
    ::: itemizedlist
    -   `auth`{.literal} - 权威区域响应或答案.
    -   `客户端`{.literal} - 内部客户端查询或回答。
    -   `forwarder`{.literal} - Forwarded 查询或回复。
    -   `解析器`{.literal} - 迭代解析查询或响应.
    -   `更新`{.literal} - 动态区域更新请求.
    -   `all`{.literal} - 以上选项中的任何。
    -   `查询`{.literal} \| `响应`{.literal} -
        如果没有指定查询或响应关键字，则会记录这两者。
        以下示例仅请求 `auth`{.literal} 响应，`客户端查询`{.literal}
        以及动态 `更新的`{.literal} 查询和响应：
    :::
    ``` screen
    Example:
    dnstap {auth response; client query; update;};
    ```
2.  为活跃日志配置定期推出部署。
    在以下示例中，用户编辑脚本的内容由 `cron`{.literal}
    每天运行一次。数字 3
    表示的备份日志文件仅限于该数字。由于文件已被删除，因此该文件绝不会到达
    `.2`{.literal} 后缀。
    ``` screen
    Example:
    sudoedit /etc/cron.daily/dnstap
    #!/bin/sh
    rndc dnstap -roll 3
    mv /var/named/data/dnstap.bin.1 \ /var/log/named/dnstap/dnstap-$(date -I).bin
    # use dnstap-read to analyze saved logs
    sudo chmod a+x /etc/cron.daily/dnstap
    ```
3.  使用 `dnstap-read`{.literal} 实用程序以人类可读格式处理和分析日志。
    在以下示例中，详细 dnstap 输出以 `YAML`{.literal} 文件格式显示。
    ``` screen
    Example:
    dnstap-read -y [file-name]
    ```
:::
:::
:::
[]{#assembly_managing-access-control-list_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#assembly_managing-access-control-list_configuring-basic-system-settings.html#assembly_managing-access-control-list_configuring-basic-system-settings}第 28 章 管理访问控制列表 {.title}
:::
每个文件和目录一次只能有一个用户所有者和一个组所有者。如果您要授予用户权限以访问属于不同用户或组的特定文件或目录，同时保持其他文件和目录私有，您可以使用
Linux 访问控制列表(ACL)。
::: section
::: titlepage
# []{#assembly_managing-access-control-list_configuring-basic-system-settings.html#displaying-the-current-acl_assembly_managing-access-control-list}显示当前访问控制列表 {.title}
:::
您可以使用 `getfacl`{.literal} 实用程序显示当前 ACL。
::: itemizedlist
**流程**
-   要显示特定文件或目录的当前 ACL，请使用：
    ``` screen
    $ getfacl file-name
    ```
    用文件或目录的名称替换 [*file-name*]{.emphasis}。
:::
:::
::: section
::: titlepage
# []{#assembly_managing-access-control-list_configuring-basic-system-settings.html#setting-the-acl_assembly_managing-access-control-list}设置访问控制列表 {.title}
:::
您可以使用 `setfacl`{.literal} 实用程序为文件或目录设置 ACL。
::: itemizedlist
**先决条件**
-   `root`{.literal} 访问权限.
:::
::: itemizedlist
**流程**
-   要为文件或目录设置 ACL，请使用：
:::
``` screen
# setfacl -m u:username:symbolic_value file-name
```
使用用户名替换 [*username*]{.emphasis}，使用符号值替换
[*symbolic_value*]{.emphasis}，使用文件或目录的名称替换
[*file-name*]{.emphasis}。详情请查看 `setfacl`{.literal} man page。
::: example
[]{#assembly_managing-access-control-list_configuring-basic-system-settings.html#idm140142096235728}
**例 28.1. 修改组项目的权限**
::: example-contents
以下示例描述了如何修改属于 `root`{.literal} 组的 `root`{.literal}
用户拥有的 `group-project`{.literal} 文件的权限， 以便使该文件：
::: itemizedlist
-   不能被任何人执行。
-   用户 `andrew`{.literal} 具有 `rw-`{.literal} 权限。
-   用户 `susan`{.literal} 具有 `---`{.literal} 权限。
-   其他用户具有 `r--`{.literal} 权限。
:::
::: title
**流程**
:::
``` screen
# setfacl -m u:andrew:rw- group-project
# setfacl -m u:susan:--- group-project
```
::: itemizedlist
**验证步骤**
-   要验证用户 `andrew`{.literal} 有 `rw-`{.literal} 权限，用户
    `susan`{.literal} 有 `---`{.literal} 权限，其他用户有
    `r--`{.literal} 权限，使用：
    ``` screen
    $ getfacl group-project
    ```
    输出会返回：
    ``` screen
    # file: group-project
    # owner: root
    # group: root
    user:andrew:rw-
    user:susan:---
    group::r--
    mask::rw-
    other::r--
    ```
:::
:::
:::
:::
:::
[]{#using-chrony-to-configure-ntp_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#using-chrony-to-configure-ntp_configuring-basic-system-settings.html#using-chrony-to-configure-ntp_configuring-basic-system-settings}第 29 章 使用 Chrony 套件配置 NTP {.title}
:::
因为许多原因，系统准确计时非常重要。例如在网络中，需要准确的数据包和日志的时间戳。在
Linux 系统中，`NTP`{.literal} 协议是由在用户空间运行的守护进程实现的。
用户空间守护进程更新内核中运行的系统时钟。系统时钟可以通过使用不同的时钟源来维护系统的时间。通常,
使用 [*时间戳计数器*]{.emphasis}（[**TSC**]{.strong}）。TSC 是一个 CPU
寄存器，它计算从上次重置的循环数。它非常快，分辨率很高，且不会被中断。
从 Red Hat Enterprise Linux 8 开始，`NTP`{.literal} 协议由
`chronyd`{.literal} 守护进程实现，它可从 `chrony`{.literal}
软件包中的软件仓库中获得。
以下小节描述了如何使用 [**[chrony]{.application}**]{.strong} 套件配置
NTP。
::: section
::: titlepage
# []{#using-chrony-to-configure-ntp_configuring-basic-system-settings.html#chrony-intro_using-chrony-to-configure-ntp}chrony 套件介绍 {.title}
:::
[**[Chrony]{.application}**]{.strong} 是 `网络时间协议(NTP)`{.literal}
的一种实现。您可以使用 [**[chrony]{.application}**]{.strong}:
::: itemizedlist
-   将系统时钟与 `NTP`{.literal} 服务器同步
-   将系统时钟与参考时钟同步，如 GPS 接收器
-   将系统时钟与手动时间输入同步
-   作为 `NTPv4(RFC 5905)`{.literal}
    服务器或对等服务器，为网络中的其他计算机提供时间服务
:::