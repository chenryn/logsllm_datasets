߰

 ࣞ  ࢳ 
߰
In a trusted environment, the predicate checked by 62+ holds
only when  is the next thread to execute. This predicate veriﬁes
the program counters for all predecessor threads, unless they have
already been veriﬁed by a trusted predecessor. The test and the
conditional assignment on variable J guarantee that the thread
runs at most once for each tuple of loop indexes.
DEFINITION 8
(CONTROL FLOW).
The transformation 
maps a series of thread deﬁnitions to a series of core commands J,
one for each deﬁnition thread J  Ò    such that J is remotely
called (starting with J  IJ=HJ), deﬁned by

 62+J 52+J 
JI@ ANJ
߰
where

߰
J


 ; while BIJANJ ࢠ J do Case Jskip
and J collect the names of all threads locally reachable from J.
We deﬁne  , the two ﬁrst stages of the compilation, as the trans-
  and initializing all last-
formation obtained by applying ࢤ
index variables with lists of zeros:
 

 J := ; J remotely callable

EXAMPLE 3. After enforcing the control ﬂow, the code for the
thread b5   given in Example 2 becomes
check pc1LH  ("a8", [i; j]) then {
check last_b5LL < [i; j] then {
last_b5LL := [i; j]; pc2LL := ("b5", [i; j]);
if (yLH mod 2) = 1
then {xHL := xHL + 9}
else {skip};
call(a4 i j) } }
THEOREM 2
  is correct and computationally sound.
(CONTROL FLOW INTEGRITY).
6. FROM SHARED VARIABLES
TO LOCAL REPLICAS
So far, the security of our compiled code relies on the sharing of
protected variables between hosts, with an abstract policy that lim-
its the access rights of the adversary. To eliminate this assumption,
we must ensure that all variables shared between hosts are unpro-
tected (formally, that they have security label   , to enable
any adversary to read and write them), and instead dynamically
protect their content using cryptography.
To do so, we ﬁrst implement each shared variable () using a se-
ries of local variables (, ߰, . . . ), which we name replicas, and
we insert explicit transfers between these replicas (߰  ) de-
pending on the data ﬂow. This stage of the compilation is much like
a single-static-assignment transform [Alpern et al., 1988, Rosen
et al., 1988]. It syntactically guarantees that, whenever a variable is
read, we know which thread last assigned a value to that variable.
We leave the cryptographic protection of transfers between differ-
ent hosts to Section 7, where we will use the name of each replica
as a unique tag for authenticating remote transfers.
Local Replicas and Policies We write  for the replica of 
“owned” by . Our intent is that only  assigns , so we refer to 
as the last writer for . The only exception arises when a thread 
locally calls a thread ߰ that has other callers. In that case, for each
variable  whose last writer at ߰ would depend on the caller, each
caller pushes its replica into ߰ before the local call.
We extend our security policy for replicas, as follows. Assume 
is a thread at host . We set


  ࣵ 


  ࣶ 
In case  reads  but does not write it,  may still be locally written
(for instance, after verifying a MAC), but with reduced integrity. In
case  writes  but does not read it,  may still be locally read
(for instance as a temporary variable prior to encryption), but with
reduced conﬁdentiality.
Static Single Remote Assignments The translation for expres-
sions and commands within a given thread is given in Figure 3. The
translation for expressions annotates each read variable with its last
writer. We let  range over assignment maps, that is, functions
from source variables to one of their replicas. We write _ for inter-
mediate, unused maps. We deﬁne ߰ ࣮  as @߰ ࣮ @
and ࢘ ࢠ @߰ ߰  .
The translation for com-
mands takes as input an assignment map  and returns an updated
assignment map; J is the initial map used to translate thread J.
438
 

     ࢤ

      ࢤ

 skip 

  :=    (cid:55)࢐ 
skip
 := 
if  then  else 


    := ࢠMLࢨML in
    := ࢠMLࢨML in
 ߰
 ߰
let ߰
let ߰
if  then ߰
 else ߰


while  do 
 ߰
let Ò Ò   :=  ࢠML in
let ߰ ߰  Ò in
Ò; while Ò do ߰ ߰
    in let ߰
 _    in ߰
; ߰
 _    in let ߰
 _


 else ߰

 let ߰ _    in check  then ߰ _
 _    in
 _


; 
let ߰
if  then  else 
let ߰
if  then ߰
check  then 
call J߰ ߰
goto J߰ ߰

 call J߰ ߰ _


and check J߰ ࣮ 
let    ࢠ @J߰  ࢯ  ࢧ J߰  in
J߰  :=  ࢠ; goto J߰ ߰ _
and check J߰ ࣮  (cid:55)࢐ J߰ ࢠ
Figure 3: Replication algorithm (within thread )
  ߰
The ﬁrst four cases concern local subcommands. Assignments
reset the last writer to the current thread. Branches insert extra
assignments for the variables written only in one branch; this en-
sures that ߰
. Similarly, loops insert extra assignments so
that ߰ after the loop does not depend on the number of iterations.
The remaining cases concern thread commands. Calls record con-
straints on the translation of their target threads (߰ only needs to
keep the live variables of ). Local calls are more complex, as
the callee ߰ may merge several caller threads; hence, each caller
propagates writes to the callee’s replicas.
In the translation, we treat loop indexes symbolically, that is,
we translate J    once for all instances of . Accordingly, we
merge initial calls and iterations: if J is called both to enter the
loop (with ﬁnal loop index ) and to iterate (with ﬁnal loop index
 ), we merge the two functions J   and J   into a single
function J for translating  .
The translation ensures that, for every reader, there is always a
unique last writer; this entails the insertion of transfers between
local variables when there is a merge; these transfers do not change
the semantics, but they may not comply with the source policy.
Finally, the translation of the threads J  
 obtained at the end
of Section 5 consists of the threads J     J for some global
assignment map J that meets all the inclusion constraints checked
by the replication algorithm.
Initial and Final Values for Variables For a given program, an
input variable is a variable that may be read before being writ-
ten. Initially,  maps every input variable  to itself. To save the
need for an ad hoc protocol to distribute initial values to multiple
hosts, our implementation assumes that each input variable is ini-
tially read by a single host. Otherwise, for instance for a source
program        ߰ where both  and  ߰ may read  before it
is written, one needs to manually rewrite the code, for instance into
         ߰. The implementation restriction above is
met when, after replication, the initial variable  occurs at a single
host. Formally, our theorems do not rely on this assumption.
The ﬁnal replica for each variable  is given by end, the assign-
ment map computed when we reach the end of the top-level thread.
For consistency with the deﬁnitions of Section 3, we formally ap-
ࢤ
ply 
end to the host commands obtained after the replication stage,
so that the ﬁnal value for  is stored in variable  after running the
implementation.
EXAMPLE 4. After replication, the command for thread b5 is
check (a8 i j.pc1)  ("a8", [i; j]) then {
check last_b5LL < [i; j] then {
last_b5LL := [i; j];
b5 i j.pc2 := ("b5", [i; j]);
if ((a8 i j.y) mod 2) = 1
then {b5 i j.x := (a1 i j.x) + 9}
else {skip; b5 i j.x := a1 i j.x};
call(a4 i j) } }
Let ! extend the compilation function of Section 5 with repli-
cation before grouping the threads into host commands. We have
THEOREM 3
! is correct and computationally sound.
(SINGLE REMOTE ASSIGNMENTS).
7. CRYPTOGRAPHIC PROTECTION
We add cryptographic operations as required by the policy Ɖ,
ﬁrst for conﬁdentiality, then for integrity. We protect only entry
threads (called from some other host) and exit calls (calling some
other host). Let  be the thread to protect and ߰ its callee. Before
call ߰, we encrypt the variables ߰ then MAC the variables ߰.
As we enter , we verify the MACs for variables  that may be
read or MACed in this thread, or recursively in any thread it may
locally call, then we decrypt variables  ࣮  that may be read.
Next, we explain how to compute these sets of variables, collect-
ing constraints on the keys to use for these operations.
Encryption Transform For protecting    , we set
 ࢠ HL ࢯ  ࢧ  ࢳ Ò ࢧ Ò



 locally reachable from 
when  is callable, ࢝ otherwise.
߰


 ࢠ  ࢯ  locally reachable from 
Þ
Þ
 reachable from ߰
when  calls 
߰, ࢝ otherwise.
Hence, a thread decrypts a variable whenever this variable is (1)
locally read by its code or one of its local callees, (2) not public,
and (3) potentially written by a remote host; and a thread encrypts
a variable whenever it may be decrypted later with this thread as
potential writer. The encryption transform rewrites every callable
thread  as follows:
ࢫ replace every call ߰ in every locally reachable    with
߰  call ߰;
ࢫ replace every    with   ࢠ;
ࢫ replace the resulting    with     .
The command  assigns local replicas  for every 
in  after reading and decrypting new shared variables, such as
 or _, with (at least) the same integrity as  and no con-
ﬁdentiality (). Conversely, the command ߰  reads ߰,
then encrypts and writes them into these new variables.
We will deﬁne  as a series of decryptions, after grouping 
into tuples of variables that (1) share the same encryption key, and
(2) are always jointly decrypted.
439After the encryption transform, all remote reads occur on pub-
lic variables (except for the key variables of  and ). On the
other hand, the transform does not affect any conﬁdential variables
assigned at the same host, or  variables, for instance.
Authentication Transform For protecting    , we set
Þ
Þ



 locally reachable from 
 ࢠ HL ࢯ  ࢧ  ࢳ Ò ࢧ Ò
when  is callable, ࢝ otherwise


߰
 ࢠ  ࢯ  locally reachable from 
 reachable from ߰
when  calls 
߰, ࢝ otherwise
Hence, a thread dynamically veriﬁes the integrity of any variable
that is (1) locally read by its code or one of its local callees, (2)
somewhat trusted, and (3) MACed by a remote host. ( includes
in particular the variables  read in , as well as the 
variables; all these variables are public.) And a thread MACs a