title:Broken Fingers: On the Usage of the Fingerprint API in Android
author:Antonio Bianchi and
Yanick Fratantonio and
Aravind Machiry and
Christopher Kruegel and
Giovanni Vigna and
Simon Pak Ho Chung and
Wenke Lee
Broken Fingers:
On the Usage of the Fingerprint API in Android
Antonio Bianchi
Yanick Fratantonio
University of California, Santa Barbara
University of California, Santa Barbara
PI:EMAIL
EURECOM
PI:EMAIL
Aravind Machiry
Christopher Kruegel
University of California, Santa Barbara
University of California, Santa Barbara
PI:EMAIL
PI:EMAIL
Giovanni Vigna
University of California, Santa Barbara
PI:EMAIL
Simon Pak Ho Chung
Georgia Institute of Technology
PI:EMAIL
Wenke Lee
Georgia Institute of Technology
PI:EMAIL
Abstract—Smartphones are increasingly used for very important
tasks such as mobile payments. Correspondingly, new technologies
are emerging to provide better security on smartphones. One of the
most recent and most interesting is the ability to recognize finger-
prints, which enables mobile apps to use biometric-based authentica-
tion and authorization to protect security-sensitive operations.
In this paper, we present the first systematic analysis of the
fingerprint API in Android, and we show that this API is not well
understood and often misused by app developers. To make things
worse, there is currently confusion about which threat model the
fingerprint API should be resilient against. For example, although
there is no official reference, we argue that the fingerprint API is
designed to protect from attackers that can completely compromise
the untrusted OS. After introducing several relevant threat models,
we identify common API usage patterns and show how inappropriate
choices can make apps vulnerable to multiple attacks. We then
design and implement a new static analysis tool to automatically
analyze the usage of the fingerprint API in Android apps. Using this
tool, we perform the first systematic study on how the fingerprint
API is used.
The results are worrisome: Our tool indicates that 53.69% of the
analyzed apps do not use any cryptographic check to ensure that
the user actually touched the fingerprint sensor. Depending on the
specific use case scenario of a given app, it is not always possible to
make use of cryptographic checks. However, a manual investigation
on a subset of these apps revealed that 80% of them could have done
so, preventing multiple attacks. Furthermore, the tool indicates that
only the 1.80% of the analyzed apps use this API in the most secure
way possible, while many others, including extremely popular apps
such as Google Play Store and Square Cash, use it in weaker ways.
To make things worse, we find issues and inconsistencies even in the
samples provided by the official Google documentation. We end this
work by suggesting various improvements to the fingerprint API to
prevent some of these problematic attacks.
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23079
www.ndss-symposium.org
I.
INTRODUCTION
As smartphones become widely used, more and more security-
sensitive tasks are performed using these devices. For instance,
mobile payment or mobile banking applications have been steadily
increasing for the past few years [11]. That is, smartphones are
increasingly used to access remote accounts containing valuable
and sensitive user information such as purchase histories or health
data. Needless to say, the security of smartphones and mobile
apps, including authenticity, integrity, and confidentiality, is of
paramount importance.
Smartphone technologies bring both new opportunities and
threats to security. A smartphone is a very convenient choice to be
the “second factor” in two-factor authentications (2FA) because
the users do not have to carry additional security tokens. A very
common two-factor scheme is to authenticate a user based on both
the user’s password and proof that the user is in possession of
her smartphone, with the latter commonly achieved by sending
text messages to the registered smartphone. On the other hand,
as more and more sensitive operations that are protected by
2FA are performed using smartphones, the security threat from
a stolen/compromised phone or malicious apps running on the
phone significantly increases. In particular, by performing sensitive
operations on smartphones, both factors required by 2FA will be
available on the smartphone, making it a single point of failure.
In theory, technologies commonly available on modern smart-
phones can be used to implement 2FA schemes that are secure
even in the face of stolen/compromised phones or malicious apps
running on the phone. In particular, most smartphones already
come with Trusted Execution Environments (TEE) that can be
used to generate and store cryptographic keys.1 Furthermore, the
TEE can already be programmed to directly communicate with
a fingerprint reader (which is widely available on modern smart-
phones) so that it will only perform operations using the stored
keys when the fingerprint reader detects a registered fingerprint,
1In devices running Android, the TEE is typically enforced by using the ARM
TrustZone technology [5].
signaling the user’s explicit consent to such operations. Since the
TEE is a hardware-enforced isolated execution environment, the
keys it stores and the operations performed with those keys cannot
be leaked or misused even if the smartphone’s operating system
(OS) is compromised.2
A second factor implemented by combining the TEE and the
fingerprint reader is at least as strong as what proposed in the Se-
curity Key protocol [32] (and implemented by YubiKey [52]), the
current state-of-the-art authentication solution in the desktop world,
promoted by Google, as a member of the FIDO Alliance [20].
Under the Security Key protocol, a cryptographic private key
is stored on an external hardware device and is used to sign
authentication tokens provided by the remote service the user
wants to authenticate with. This signing operation only happens if
the user authorizes it, by pressing a physical button on the external
hardware device. In fact, one can argue that a second factor that
combines a smartphone’s TEE and its fingerprint reader is going
to provide more security than YubiKeys in the scenario where the
hardware security token is stolen; in the former, the attacker cannot
misuse the hardware token without the owner’s fingerprint, while
in the latter, anybody in possession of the token can misuse it to
bypass 2FA. Additionally, the device’s screen (which is not present
in standard hardware tokens), could be used to inform users about
the operation they are authorizing by touching the sensor.
Motivated by the significant security benefits that the TEE-
backed fingerprint sensor can offer, in this work we perform
the first comprehensive study on the usage of the fingerprint
API in Android. In particular, we first systematically explore
the various nuances of this API, and we uncover several aspects,
many of which subtle, that can lead to this complex API to be
misused. As an example, developers could just check if the user
touched the sensor, without binding this operation to the usage of
a cryptographic key, contrary to what is suggested by Google’s
guidelines [23].
We then bring some clarity to the many threat models that
should be considered when performing security evaluations con-
cerning the fingerprint API. For example, we explore what are
the capabilities of an attacker that can compromise the untrusted
operating system, i.e., a “root attacker.” At first glance, one may
say that a root attacker will trivially defeat any fingerprint API
and that the fingerprint API itself is not designed to protect from
root attackers. On the contrary, we argue that many important
design choices related to this API are motivated specifically to
protect from root attackers. The most significant example is that
current implementations of the fingerprint API work by unlocking
a TEE-backed cryptographic keystore: if the threat model were not
considering root attackers, apps could simply store cryptographic
material in app-private storage (that non-root attackers cannot
access), without needing to rely on any TEE support.
We hypothesized that the lack of clearly stated design goals
and, as we will see, misleading documentation bring confusion and
app developers might misuse this API. To explore this hypothesis,
we first developed a static analysis approach to characterize how
Android apps use the fingerprint API, whether this API is misused,
and how they are resilient to the various threat models. We then
2As an empirical measure, among all the vulnerabilities mentioned in the
“Security Bulletins” released by Google about Android security [27] up to August
2017, 33 of them allow an attacker “to execute arbitrary code within the context
of the kernel,” whereas only 2 allow “to execute arbitrary code in the TrustZone
context.”
use this system to perform the first systematic empirical study of
how the current fingerprint API is used in the Android ecosystem.
Specifically, we used our tool to analyze 501 apps requiring the
fingerprint permission (out of a dataset of 30,459 popular apps).
The results are worrisome. For example, the tool identified that
53.69% of the apps, including the widely deployed Google Play
Store app, do not make use of the cryptographic keystore unlocked
by a successful fingerprint touch: this means that a root attacker
can easily completely bypass the fingerprint security mechanism
by just programmatically “simulating” the user’s touch to, for
example, perform in-app purchases.
One explanation for this low percentage could be that not all
use case scenarios for the fingerprint API can be protected from
root attackers. One example is an app that uses the fingerprint to
merely assess user presence: in this case, it is very challenging
to find a “role” for the cryptographic material, and it is thus not
possible to protect this use case from root attackers. To determine
how many apps fall into this category, we then performed manual
analysis on a subset of applications flagged as problematic. For
example, we manually analyzed a random subset of 20 apps for
which our tool identify usages of the fingerprint API flagged as
“fully bypassable.” To our surprise, 16 of them are apps that use the
fingerprint API to authenticate the user against a remote backend,
or apps that store secret information: These are exactly the use case
scenarios that a proper usage of the fingerprint API could easily
protect even from powerful attackers such as root attackers. This
manual analysis effort, even though admittedly limited, suggests
that the number of apps misusing the fingerprint API is significant.
Moreover, our tool also flagged only the 1.80% of the apps in our
dataset as using the fingerprint API to sign transactions, which is
the most secure way to use this API.
In summary, this paper makes the following contributions:
• We systematically study the various ways in which the
fingerprint API can be used in Android and how attackers
with different capabilities can exploit sub-optimal usages
of it.
•
• We develop a static-analysis tool to automatically identify
how real-world popular apps use the fingerprint API. We
make its code publicly available online [8].
By using this tool, we perform the first systematic study
of the usage of the fingerprint API in Android, and we
uncover a significant number of apps potentially misusing
the fingerprint API. This improper usage significantly
weakens the security guarantees these apps could achieve
if using the API correctly.
• We identify shortcomings and weaknesses of the current
API and its implementation, and we propose different
improvements to it.
II. BACKGROUND
A. Android Security Mechanisms
The Android operating system is a customized Linux kernel on
top of which the Android framework runs. User-installable third-
party apps run as user-mode processes and are typically written
in Java, even though apps may also include libraries written in
native code. These apps interact with the Android framework using
system calls or invoking remote procedures in “system services.”
2
Third-party apps run in separate containers with isolated
resources (e.g., private files) and a limited set of capabilities.
The precise list of capabilities is determined by the “Android
permissions” granted to an app. In modern Android versions
(starting from Android 6), permissions classified as dangerous
need to be specifically approved by the user. Other permissions
are instead automatically granted to any app that requires them,
but the app still needs to request them in its Manifest file. The
USE_FINGERPRINT permission, which grants the ability to use
the fingerprint reader sensor, is an example of “normal” permission.
This separation between different apps and the different apps’
capabilities is enforced by using a combination of standard Linux
mechanisms (e.g., Linux groups), SELinux rules, and specific
checks in the Android framework. In fact, apps cannot perform
any sensitive operation directly, but they have to send a request to
a running system service, which verifies whether the app calling
it has the permission required to perform the requested operation.
Thus, system services (which run as users with higher privilege
than normal apps) mediate most of the interactions between apps
and the kernel.
Attackers often try to exploit bugs in either the system services
or the kernel to gain root privileges, using what are typically called
“root exploits.” Although a significant effort has been made to
limit the attack surface exposed by system services and the kernel
to normal apps [44], root exploits are still a concrete danger in
the Android ecosystem [27]. However, even when an attacker can
fully compromise the Linux kernel, achieving persistent kernel-
level code execution (by bypassing the Verified Boot mecha-
nism) requires further exploitation of the system [30]. Similarly,
achieving code execution within the TrustZone-enforced TEE,
which we describe in the next section, requires the exploitation of
significantly less common vulnerabilities in the relatively small
code base running within the TEE.
B. TEE and TrustZone
A TEE is an isolated environment designed to execute sensitive
code with more isolation/protection than what provided by a stan-
dard “feature-rich” operating system. While other instantiations of
TEE exist, in this paper, we will focus on ARM’s implementation
of the TEE, called TrustZone, which is available on the majority
of Android devices.
Under ARM’s TrustZone, a “trusted” kernel and a set of
Trusted Applications (TAs) run in the “secure” world, isolated
by hardware from the Android OS and third-party apps, which,
conversely, run in the “non-secure” world. Only code signed by
the hardware manufacturer can run in the “secure” world. Also,
while third-party apps run in isolation from the TAs, these apps can
utilize services provided by the TAs through well-defined APIs.
Two services offered by the TAs are relevant to fingerprint-based
authentication, which is the focus of this paper:
•
keymaster: It allows to create cryptographic keys, store
them inside secure-storage, and use them to encrypt,
decrypt, verify, or sign data, coming from the untrusted
world. Internally, this service utilizes the secure-storage
capability offered by the trusted kernel to securely store
encrypted and authenticated data on the device’s mass
memory.
•
fingerprintd: It handles the storage of fingerprint data,
acquired from the fingerprint reader sensor, and verifies
that the finger touching the sensor corresponds to any
previously registered fingerprint. It is important to notice
that “raw” fingerprint data (i.e., the image of the registered
fingerprint) never leaves the TEE and therefore it is not
accessible by any untrusted code.
C. The Fingerprint API in Android