    # 删除指定 SPN
    setspn -D MSSQLSvc/SqlServer.test.com dbadmin
    ```
    查看 SPN：
    ```bash
    # 查看当前域内的所有 SPN
    setspn -q */*
    # 查看 test 域内的所有 SPN
    setspn -T test -q */*
    # 查看 dbadmin 账户的 SPN
    setspn -L dbadmin
    ```
    以 CN 开头的每一行代表一个账户，紧跟下面的信息是与该账户有关的 SPN。
- **GetUserSPNs**
    - https://github.com/nidem/kerberoast
        ```
        .\GetUserSPNs.ps1
        cscript.exe GetUserSPNs.vbs         利用 GetUserSPNs.vbs 进行 SPN 信息查询
        ```
- **PowerView**
    - https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon
        ```powershell
        PS C:\Users\Administrator\Desktop\Recon> Import-Module .\PowerView.ps1
        PS C:\Users\Administrator\Desktop\Recon> Get-NetUser -SPN
        ```
- **Powershell AD Recon**
    - https://github.com/PyroTek3/PowerShell-AD-Recon
        ```powershell
        //如查看MSSQL（其他的同理）：
        //导入脚本
        Import-Module .\Discover-PSMSSQLServers.ps1
        //查找MSSQL所有实例
        Discover-PSMSSQLServers
        ```
- **PowerShellery**
    - https://github.com/nullbind/Powershellery
        ```powershell
        PS C:\Users\dbadmin\Desktop\Get-SPN> Import-Module .\Get-SPN.psm1
        PS C:\Users\dbadmin\Desktop\Get-SPN> Get-SPN -type service -search "*"
        //查找所有的SPN服务
        Get-SPN -type service -search "*" -List yes | Format-Table
        //查找MSSQL服务
        Get-SPN -type service -search "MSSQLSvc*" -List yes
        //若在一个非域系统上，可以使用以下命令执行
        Get-SPN -type service -search "*" -List yes -DomainController 域控IP -Credential domainuser| Format-Table -Autosize
        ```
- **RiskySPN**
    - https://github.com/cyberark/RiskySPN
        ```powershell
        Import-Module .\RiskySPNs.psm1
        Find-PotentiallyCrackableAccounts
        ```
- **Adfind**
    - http://www.joeware.net/freetools/tools/adfind/
        ```
        Adfind -f "ServicePrincipalName=MSSQLSvc*"
        Adfind -h 域控地址 -sc spn:*
        ```
---
#### 域控
**查询域管理员用户**
```
net group "Domain Admins" /domain
```
**查找域控**
```bash
ping test.com               # ping 域名,解析到域控服务器IP地址
net time /domain            # 查看当前时间，因为时间服务器也是主域服务器，可以看到域服务器的机器名
nltest /DCLIST:test.com     # 查看域控制器机器名
net group "Domain Controllers" /domain              # 查看域控制器组，因为可能有不止一台域控，有主备之分
nslookup -type=all _ldap._tcp.dc._msdcs.test.com    # 若当前主机的dns为域内dns，可通过查询dns解析记录定位域控。
dsquery server
```
- BloodHound
- 端口探测
    通过端口探测方式定位域控, 扫描内网中同时开放 389，636 与 53 的机器，389 默认是 LDAP 协议端口，636 端口是 LDAPS，53 端口默认是 DNS 端口，主要用于域名解析，通过 DNS 服务器可以实现域名与 ip 地址之间转换，他们都是域控机器开放的端口。
- SPN 扫描定位
    由于 SPN 本身就是正常的 kerberos 请求，所以扫描隐蔽，它不同于 TCP 与 UDP 常规端口扫描。大部分 windows 已经自带 setspn.exe，且此操作无需管理权限。
    ```
    setspn -T test.com -Q /
    ```
    在扫描出的结果中就可以根据
    CN=AD-SERVER,OU=Domain Controllers,DC=test,DC=com 来进行域控的定位。此时已经查询出域控机器。
**定位域管理员**
- 为什么要定位域管理员
    在一个域中，当计算机加入域后，会默认给域管理员组赋予本地系统管理员权限。也就是说，当计算机被添加到域中，成为域的成员主机时，系统会自动将域管理员组添加到本地系统管理员组中。因此，域管理员组的成员均可访问本地计算机，且具备完全控制权限。
    定位，查看有哪些账号登录了哪些机器,如果我们可以找到域管理员登录了哪些服务器，就可以通过攻击这些服务器并进行尝试利用，以获得域管理员权限。
    定位域管理员的常规渠道，一是日志，二是会话。日志是指本地机器的管理员日志，可以使用脚本或wevtutil工具导出并查看。会话是指域内每台机器的登陆会话，可以使用netsess.exe或powerview等工具查询
- [psloggedon.exe](https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon) - pstools 中自带, 其原理为检查注册表 HKey_USER 项的 key 来查询，会调用 NetSession api, 所以有些功能需要管理员权限。
    ```bash
    # 此工具用于查看本地登录的用户和通过本地计算机或远程计算机资源登录的用户
    psloggedon.exe [-] [-l] [-x] [\\computername或username]
    # -	显示支持的选项和用于输出值的度量单位
    # -l 	仅显示本地登录，而不显示本地和网络资源登录
    # -x	不显示登录时间
    # \computername	指定要为其列出登录信息的计算机的名称
    # username	指定用户名，在网络中搜索该用户登陆的计算机
    # \\后面接的是域控机器名，看一下登录过域控的用户名
    # \\接的是用户名，那就会搜索网上邻居的计算机，并显示当前用户是否已经登录
    ```
- [PVEFindADUser.exe](https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn) - 查找域用户位置、某计算机上登录用户。运行需要计算机支持framework2.0 且以管理员权限运行
    ```bash
    pvefinaduser.exe -current   # #将获取域内所有计算机上当前登陆的所有用户, 结果保存到 report.csv 文件
    # -last	将获取目标计算机的最后一个登陆用户
    # -target	指定要查询的计算机。
    # -current [“username”]	-current 参数显示每台 PC 上当前登录的用户在域中。如果指定用户名（在引号之间），则仅将显示该特定用户登录的 PC
    # -noping	阻止尝试枚举用户登录名之前对目标计算机执行 ping 命令
    ```
- [netview.exe](https://github.com/mubix/netview) - netview.exe 是一个枚举工具，使用 WinAPI 枚举系统，利用 NetSessionEnum 找寻登录会话，利用 NetShareEnum 找寻共享，利用 NetWkstaUserEnum 枚举登录的用户，netview.exe 还可以查询共享入口和有价值的用户。
    ```bash
    netview.exe [参数]
    # -f	filename.txt: 指定要提取主机列表的文件
    # -e	filename.txt: 指定要排除的主机名的文件
    # -o	filename.txt: 将所有输出重定向到指定的文件
    # -d	filename.txt: 指定要提取主机列表的域。如果没有指定，则从当前域中提取主机列表
    # -g	group: 指定搜索的组名。如果没有指定，则在 Domain Admins 组中搜索
    # -c	对已找到的共享目录 / 文件的访问权限进行检查
    ```
- [nmap 脚本](https://nmap.org/nsedoc/scripts/smb-enum-sessions.html)
    ```
    smb-enum-domains.nse: 对域控制器进行信息收集，可以获取主机信息、用户、可使用密码策略的用户等
    smb-enum-users.nse: 在进行域渗透时，如获取了域内某台主机权限，但权限有限，无法获取更多的域用户信息，可借助此脚本对域控制器进行扫描
    smb-enum-shares.nse: 遍历远程主机的共享目录
    smb-enum-processes.nse: 对主机的系统进程进行遍历，通过此信息，可知道目标主机运行着哪些软件
    smb-enum-sessions.nse: 获取域内主机的用户登陆会话，查看当前是否有用户登陆
    smb-enum-discovery.nse: 收集目标主机的操作系统、计算机名、域名、域林名称、NetBIOS 机器名、NetBIOS 域名、工作组、系统时间等信息
    ```
- [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon)
    ```powershell
    Set-ExecutionPolicy -ExecutionPolicy Bypass
    import-module .\Recon.psd1
    # Invoke-UserHunter: 找到域内特定的用户群，接受用户名、用户了表和域组查询，接收一个主机列表或查询可用的主机域名。可以使用 Get-NetSession 和 Get-NetLoggedon(调用 NetSessionEnum 和 NetWkstaUserEnumAPI) 扫描每台服务器并对扫描结果进行比较，从而找出目标用户集，在使用时不需要管理员权限，在本地执行该脚本
    # Invoke-StealthUserHunter: 只需要进行一次查询，就可以获取域里面的所有用户，使用方法为，从 user.HomeDirectories 中提取所有用户，并对没太服务器进行 Get-NetSession 获取。因不需要使用 Invoke-UserHunter 对没太机器进行操作，所以这个方法的隐蔽性相对较高（但涉及的机器不一定全面）。PowerView 默认使用 Invoke-StealthUserHunter 如果找不到需要的信息，就使用 Invoke-UserHunter
    Get-NetLocalGroupMember -ComputerName 主机名 -GroupName administrators
    # 指定远程计算机，指定枚举管理员组
    ```
- [Netsess.exe](http://www.joeware.net/freetools/tools/netsess/index.htm) - 收集所有活动域的会话列表
- BloodHound
---
### 工控资产
**相关文章**
- [工控资产嗅探与分析实践](https://www.freebuf.com/articles/ics-articles/209786.html)
**相关工具**
- nmap
    - [nmap工控探测脚本](../../安全工具/Nmap.md#工控探测)
- [ISF](https://github.com/dark-lbp/isf)
    ```bash
    scanners/s7comm_scan        # 选择 S7 扫描插件
    scanners/vxworks_6_scan     # 选择 vxworks 扫描插件
    scanners/cip_scan           # 选择 cip_scan 扫描插件
    ```
- [plcscan](https://code.google.com/archive/p/plcscan/) - 通过 s7comm 或 modbus 协议扫描 PLC 设备的工具。
- msf
    ```bash
    use auxiliary/scanner/scada/modbusdetect
    ```
### 网络层指纹
**相关工具**
- nmap
- [praetorian-inc/fingerprintx](https://github.com/praetorian-inc/fingerprintx) - Standalone utility for service discovery on open ports!
    ```bash
    go install github.com/praetorian-inc/fingerprintx/cmd/fingerprintx@latest
    fingerprintx -h
    fingerprintx -t praetorian.com:80
	fingerprintx -l input-file.txt
	fingerprintx --json -t praetorian.com:80,127.0.0.1:8000
    ```
    - https://www.praetorian.com/blog/fingerprintx/
---