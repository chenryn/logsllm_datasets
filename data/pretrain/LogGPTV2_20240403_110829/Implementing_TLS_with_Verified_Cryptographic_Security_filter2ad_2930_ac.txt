### Interoperability and Performance Evaluation

We tested our TLS implementation against the NSS 3.12.8 and Oracle JSSE 1.7 libraries. Additionally, we implemented the .NET Stream interface on top of our TLS API, used it to program a multi-threaded HTTPS server, and tested it against Firefox 16.0.2, Safari 6.0.2, Chrome 23.0.1271.64, and Internet Explorer 9.0.5 web browsers, using different protocol versions and ciphersuites. Conversely, we programmed and tested an HTTPS client against an Apache 2.2.20-mod-ssl web server. Our implementation correctly interoperates, both in client and server mode, with all these implementations for all supported protocol versions and ciphersuites. Notably, NSS only implements up to TLS 1.0, and Oracle JSSE does not support AES256. Our interoperability tests included session resumption, rekeying, and renegotiation.

#### Performance Benchmarks

To evaluate the performance of our F# implementation, which is linked to the Bouncy Castle C# cryptographic provider, we compared it against two popular TLS implementations: OpenSSL 1.0.1e (written in C and using its own cryptographic libraries) and Oracle JSSE 1.7 (written in Java and using the SunJSSE cryptographic provider). Our code consistently outperformed the rudimentary TLS client distributed with Bouncy Castle.

We tested clients and servers for each implementation against one another, running on the same host to minimize network effects. Figure 2 reports the results for different clients and ciphersuites with OpenSSL as the server. We measured:

1. The number of handshakes completed per second.
2. The average throughput provided on the transfer of a 400 MB random data file. (Server-side results are similar.)

For RSA key exchange, our implementation has a handshake rate similar to that of OpenSSL but slower than Oracle JSSE. Our throughput is significantly lower than OpenSSL and closer to Oracle JSSE. The throughput and DHE key exchange numbers are closely linked to the underlying cryptographic provider, and we pay the price of using Bouncy Castle’s managed code. Using the .NET native provider increases the throughput by 20% but hinders portability.

Our reference implementation is primarily designed for modular verification and has not yet been optimized for speed. For example, we represent bytes using functional arrays, which involve a lot of dynamic allocation and copying as record fragments are processed. A trusted library implementing infix pointers to I/O buffers with custom memory management would improve performance with minimal changes to our verified code, but such optimizations are left for future work.

### Code Size and Verification Time

Compared to production code, our implementation is smaller, with around 5 KLOC excluding comments, compared to about 50 KLOC for OpenSSL (only TLS code) and 35 KLOC for Oracle JSSE. This difference is partly due to supporting fewer ciphersuites and extensions, and the rest can be attributed to the brevity of F# code. We believe ours is the first cryptographic verification effort at this scale. Figure 1(c) provides the size of each component in our implementation, the size of its F7 specification, and the verification time for the typechecked components. Overall, typechecking the entire implementation takes 15 minutes on a modern desktop.

### Cryptographic Security by Typing

We verify TLS using F7, a refinement typechecker for F#. In addition to ordinary type safety, F7 enables us to annotate types with logical specifications and verify their consistency by typing. Its core type system has been extended in several directions, and Swamy et al. [54] provide a mechanized theory for a language that subsumes F7. We follow the notations and results of its probabilistic variant [27].

#### F7 Types

A program is a sequential composition of modules, written \( A_1 \cdot A_2 \cdot \ldots \cdot A_n \). Each module has a typed interface specifying the types, values, and functions it exports. A module is well-typed, written \( I_1, \ldots, I_k \vdash A ; I \), when it correctly implements \( I \) using modules with interfaces \( I_1, \ldots, I_k \). A program is well-typed when its modules are well-typed in sequence. The core typing judgment \( I \vdash e : t \) states that expression \( e \) has type \( t \) in typing environment \( I \). Types \( t \) include standard F# types like integers, references, arrays, and functions, plus refinement types and abstract types.

#### Logical Refinements

Let \( \varphi \) range over first-order logical formulas on F# values. The refinement type \( x : t \{ \varphi \} \) represents values \( x \) of type \( t \) such that formula \( \varphi \) holds. For instance, \( n : \text{int} \{ 0 \leq n \} \) is the type of positive integers. Formulas may use logical functions and predicates, specified in F7 interfaces or left uninterpreted. For example, let 'bytes' abbreviate the type of byte arrays in F#. Its refinement \( b : \text{bytes} \{ \text{Length}(b) = 16 \} \) represents 16-byte arrays, using a logical function Length on bytes. Reﬁnements may specify data formats for integrity and track runtime events for authenticity. For instance, \( c : \text{cert} \{ \text{Authorized}(u, c) \} \) may represent an X.509 certificate that user \( u \) has accepted by clicking on a button. Such security events are introduced as logical assumptions (assume \( \varphi \)) in F# code and F7 interfaces; they may appear in verification goals expressed as assertions (assert \( \varphi \)). Logical specifications and assumptions must be carefully written and reviewed, as they condition our security interpretation of types.

#### Abstract Types

An interface may declare a type as abstract (e.g., type key) and keep its representation private (e.g., 16-byte arrays). Typing then ensures that any module using this interface will treat key values as opaque, preserving their integrity and secrecy. Abstract types may also be indexed by values, e.g., type \( (\alpha, id : t) \text{key} \) is the type of keys indexed by a value \( id \) of type \( t \), indicating the usage of those keys. Typing guarantees that any module using the interface won’t mix keys for different usages.

The rest of the type system tracks refinements and abstract types. For example, the dependent function type \( x : t \{ \varphi \} \rightarrow y : t' \{ \varphi' \} \) represents functions with pre-condition \( \varphi \) and post-condition \( \varphi' \), and both \( t \) and \( t' \) may be indexed abstract types. We will see various examples in the types for authenticated encryption below.

#### Safety and Perfect Secrecy in F7

Fournet et al. [27] formalize a probabilistic variant of F7 and develop a framework for the modular cryptographic verification of protocols coded in F#. A program is safe if, in every run, every assert logically follows from prior assumes. The main property of the type system is that well-typed expressions are always safe.

**Theorem 1 (Type Safety [27]):** If \( \emptyset \vdash A : t \), then \( A \) is safe.

Perfect secrecy is specified as probabilistic equivalence: two expressions \( A_0 \) and \( A_1 \) are equivalent, written \( A_0 \approx A_1 \), when they return the same distribution of values. We use abstract types to automatically verify secrecy. Suppose a program is written so that all operations on secrets are performed in a pure (side-effect free) module \( P \) that exports a restrictive interface \( I_\alpha \) with an abstract type \( \alpha \) for secrets (concretely implemented by, say, a boolean). By typing, the rest of the program can still be passed secrets and pass them back to \( P \), but cannot directly access their representation. With suitable restrictions on \( I_\alpha \), the result of the program then does not depend on secrets and their operations.

**Theorem 2 (Secrecy by Typing [27]):** If \( \emptyset \vdash P_b ; I_\alpha \) for \( b = 0, 1 \) and \( I_\alpha \vdash A : \text{bool} \), then \( P_0 \cdot A \approx P_1 \cdot A \).

Intuitively, the program \( A \) interacts with different secrets, kept within \( P_0 \) or \( P_1 \), but it cannot distinguish between the two. Theorem 2 generalizes from single types \( \alpha \) to families of indexed types, intuitively with a separate abstract type at every index.

In Theorems 1 and 2, the module \( A \) may be composed of libraries for cryptographic primitives and networking, protocol modules, and the adversary. This adversary can be treated as an untrusted ‘main’ module, simply typed in F#, without any refinement or abstract type. In contrast, the internal composition and verification of the other modules of the program can rely on and are driven by typed F7 interfaces.

#### Asymptotic Safety and Secrecy

To model computational security for cryptographic code, [27] defines asymptotic notions of safety and secrecy for expressions \( A_\eta \) parameterized by a security parameter \( \eta \), which is treated as a symbolic integer constant and often kept implicit, writing \( A \) instead of \( (A_\eta)_{\eta \geq 0} \). Asymptotic safety states that the probability of an assertion failing in \( A_\eta \) is negligible. The corresponding secrecy notion is stated in terms of asymptotic equivalence: two closed boolean expressions \( A_0 \) and \( A_1 \) (implicitly indexed by \( \eta \)) are asymptotically equivalent, written \( A_0 \approx_{\text{asym}} A_1 \), when the statistical distance \( \frac{1}{2} | \Pr[A_0 \Downarrow M] - \Pr[A_1 \Downarrow M] | \) is negligible. These asymptotic notions apply only to modules that meet polynomial restrictions, so that all closed programs resulting from their composition always terminate in polynomial time.

#### Games, Ideal Functionalities, and Typed Interfaces

We now explain how to use F7 typing to model cryptographic primitives and protocols, using authenticated encryption (AE) as a running example. Let \( C \) be a module that implements a cryptographic functionality or protocol. We define security for \( C \) in three different styles: using games, ideal functionalities, or ideal interfaces. To begin with, we suppose that \( C \) manages a single key internally and does not allow for key compromise. We define an interface \( I_C \) with two functions for encryption and decryption, assuming plaintexts and ciphers are fixed-sized byte arrays. Decryption returns an option, either some plaintext or none, in case of decryption error.

```fsharp
val ENC: p:plain → c:cipher
val DEC: c:cipher → o:plain option
```

**Games:** Games provide oracle access to \( C \); this may be programmed as a module \( G \) with an interface \( I_G \) that exports oracle functions. Games come in two flavors: (1) Games with a winning condition, which can be expressed by the adversary breaking a safety assertion, (2) Left-or-right games, in which the adversary has to guess which of the two variants \( G_0 \) or \( G_1 \) of the game it is interacting with. In our framework, this may be defined as \( C \cdot G_0 \cdot A \approx_{\text{asym}} C \cdot G_1 \cdot A \).

Typical games for modeling the authenticity and confidentiality of AE are INT-CTXT and IND-CPA. The former requires that the adversary forge a valid ciphertext; the latter requires that an adversary that freely chooses \((x_0, x_1)\) cannot distinguish between encryptions of \( x_0 \) and encryptions of \( x_1 \).

**Ideal Functionalities with Simulators:** An ideal functionality \( F \) for \( C \) implements the same interface \( I_C \) but provides nicer properties. \( F \) only needs to implement \( C \) partially; the rest of the implementation that is not security-critical may be provided by a simulator \( S \), which is only required to exist. For primitives, the simulator \( S \) can be used to show that the real implementation \( C \) is indistinguishable from the ideal functionality \( F \).