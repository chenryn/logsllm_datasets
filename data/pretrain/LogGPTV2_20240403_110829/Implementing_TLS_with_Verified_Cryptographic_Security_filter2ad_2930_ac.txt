and against the NSS 3.12.8 and the Oracle JSSE 1.7 libraries.
We also implemented the .NET Stream interface on top of our
TLS API, used it to program a multi-threaded HTTPS server,
and tested it against Firefox 16.0.2, Safari 6.0.2, Chrome
F# (BC)
OpenSSL
Ciphersuite
Oracle JSSE
HS/s MiB/s HS/s MiB/s HS/s MiB/s
MAC
KEX Enc
53.34
305.25
MD5
RSA RC4
39.65
291.37
SHA
RSA RC4
8.34
267.09
RSA 3DES
SHA
27.58
RSA AES128 SHA
278.71
23.69
RSA AES128 SHA256 278.71
RSA AES256 SHA
291.37
-
RSA AES256 SHA256 267.09
-
8.21
20.16
DHE 3DES
SHA
27.72
20.41
DHE AES128 SHA
23.84
19.99
DHE AES128 SHA256
DHE AES256 SHA
20.29
-
-
20.16
DHE AES256 SHA256
30.17 292.04 226.51 431.66
27.85 288.74 232.42 446.69
8.40 283.04
22.95 421.59
18.54 285.35 234.41 419.20
16.50 281.92 128.33 432.70
16.86 282.89 204.47
-
-
15.16 307.72 119.42
45.72
58.07
8.37
22.99
46.08
57.06 244.30
18.59
45.03
58.33 128.34
16.45
16.72
56.83 203.01
-
-
59.52 120.96
14.86
Figure 2. Performance benchmarks (OpenSSL 1.0.1e as server).
23.0.1271.64 and Internet Explorer 9.0.5 web browsers, using
different protocol versions and ciphersuites. Conversely, we
programmed and tested an HTTPS client against an Apache
2.2.20-mod-ssl web server. Our implementation correctly in-
teroperates, both in client and in server mode, with all these
implementations, for all the protocol versions and ciphersuites
we support. Of these, NSS only implements up to TLS 1.0 and
Oracle JSSE does not support AES256. Our interoperability
tests included session resumption, rekeying, and renegotiation.
Performance Evaluation We evaluate the performance of
our implementation, written in F# and linked to the Bouncy
Castle C# cryptographic provider, against two popular TLS
implementations: OpenSSL 1.0.1e, written in C and using
its own cryptographic libraries, and Oracle JSSE 1.7, written
in Java and using the SunJSSE cryptographic provider. Our
code also consistently outperforms the rudimentary TLS client
distributed with Bouncy Castle.
We tested clients and servers for each implementation
against one another, running on the same host to minimize
network effects. Figure 2 reports our results for different
clients and ciphersuites with OpenSSL as server. We measured
(1) the number of Handshakes completed per second; and
(2) the average throughput provided on the transfer of a
400 MB random data ﬁle. (Server-side results are similar.) For
RSA key exchange, our implementation has a handshake rate
similar to that of OpenSSL but slower than Oracle JSSE. Our
throughput is signiﬁcantly lower than OpenSSL and is closer
to Oracle JSSE. The numbers for throughput and for DHE key
exchanges are closely linked to the underlying cryptographic
provider, and we pay the price of using Bouncy Castle’s man-
aged code. (Using instead the .NET native provider increases
the throughput by 20% but hinders portability.)
Our reference implementation is designed primarily for
modular veriﬁcation, and has not (yet) been optimized for
speed. Notably, our code relies on na¨ıve data structures that
facilitate their speciﬁcation. For example, we represent bytes
using functional arrays, which involve a lot of dynamic al-
location and copying as record fragments are processed. A
trusted library implementing inﬁx pointers to I/O buffers with
custom memory management would improve performance,
with minimal changes to our veriﬁed code, but we leave such
optimizations as future work.
Code Size and Veriﬁcation Time Compared with production
449
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:05 UTC from IEEE Xplore.  Restrictions apply. 
code, our implementation is smaller; it has around 5 KLOC
excluding comments, compared with about 50 KLOC for
OpenSSL (only TLS code) and 35 KLOC for Oracle JSSE.
This different is due partly to the fact that we support fewer
ciphersuites and extensions; the rest can be attributed to the
brevity of F# code. Still, we believe ours is the ﬁrst cryp-
tographic veriﬁcation effort at this scale. Fig. 1(c) gives the
size of each component in our implementation, the size of its
F7 speciﬁcation, and the veriﬁcation time for the typechecked
components. Overall, typechecking the whole implementation
takes 15 minutes on a modern desktop.
III. CRYPTOGRAPHIC SECURITY BY TYPING
We verify TLS using F7, a reﬁnement typechecker for F#.
In addition to ordinary type safety (preventing e.g. any buffer
overﬂow) it enables us to annotate types with logical speciﬁ-
cations and to verify their consistency by typing. Its core type
system [9] has been extended in several directions [10, 54, 5–
7]; in particular Swamy et al. [54] provide a mechanized theory
for a language that subsumes F7. We follow the notations and
results of its probabilistic variant [27], presented below.
F7 Types A program is a sequential composition of modules,
written A1·A2·. . .·An. Each module has a typed interface that
speciﬁes the types, values, and functions it exports. A module
is well-typed, written I1, . . . , I(cid:2) (cid:2) A ; I, when it correctly
implements I using modules with interfaces I1, . . . , I(cid:2). A
program is well-typed when its modules are well-typed in
sequence. The core typing judgment I (cid:2) e : t states that
expression e has type t in typing environment I. Types t
include standard F# types like integers, references, arrays and
functions, plus reﬁnement types and abstract types.
Logical reﬁnements Let φ range over ﬁrst-order logical for-
mulas on F# values. The reﬁnement type x:t{φ} represents
values x of type t such that formula φ holds (the scope
of x is φ). For instance, n:int{0 ≤ n} is the type of positive
integers. Formulas may use logical functions and predicates,
speciﬁed in F7 interfaces or left uninterpreted. For instance, let
‘bytes’ abbreviate the type of byte arrays in F#; its reﬁnement
b:bytes{Length(b)=16}, the type of 16-byte arrays, uses a
logical function Length on bytes. and, to verify that byte
arrays have this type, it may be enough to specify Length
for empty arrays and concatenations. Reﬁnements may specify
data formats as above (for integrity) and also track runtime
events (for authenticity). For instance, c:cert{Authorized(u,c)}
may represent an X.509 certiﬁcate that user u has accepted
by clicking on a button. Formally, such security events are
introduced as logical assumptions (assume φ) in F# code and
F7 interfaces; conversely, they may appear in veriﬁcation goal,
expressed as assertions (assert φ). Logical speciﬁcations and
assumptions must be carefully written and reviewed, since they
condition our security interpretation of types [see e.g. 10, 54].
Abstract Types An interface may declare a type as abstract
(e.g. type key) and keep its representation private (e.g. 16-byte
arrays); typing then ensures that any module using this inter-
face will treat key values as opaque, thereby preserving their
(cid:2) (the scope of x is φ, t
(cid:2) and φ
integrity and secrecy. Besides, abstract types may themselves
be indexed by values, e.g. type (;id:t)key is the type of keys
indexed by a value id of type t, which may indicate the usage
of those keys; typing then guarantees that any module using
the interface won’t mix keys for different usages.
The rest of the type system tracks reﬁnements and abstract
types. For example, the dependent function type x:t{φ} →
(cid:2){φ
(cid:2)} represents functions with pre-condition φ and post-
y:t
(cid:2)
(cid:2)), and both t and t
condition φ
may be indexed abstract types. We will see various examples
in the types for authenticated encryption below.
Safety and Perfect Secrecy in F7 (Review) Fournet et al.
[27] formalize a probabilistic variant of F7 and develop
a framework for the modular cryptographic veriﬁcation of
protocols coded in F#. (K¨usters et al. [41] adopt a similar
approach for programs in Java.) We recall their main theorems.
A program is safe if, in every run, every assert logically
follows from prior assumes. The main property of the type
system is that well-typed expressions are always safe.
Theorem 1 (Type Safety [27]): If ∅ (cid:2) A : t, A is safe.
Perfect secrecy is speciﬁed as probabilistic equivalence: two
expressions A0 and A1 are equivalent, written A0 ≈ A1, when
they return the same distribution of values. We use abstract
types to automatically verify secrecy, as follows. Suppose
a program is written so that all operations on secrets are
performed in a pure (side-effect free) module P that exports
a restrictive interface Iα with an abstract type α for secrets
(concretely implemented by, say, a boolean). By typing, the
rest of the program can still be passed secrets, and pass them
back to P , but cannot directly access their representation. With
suitable restrictions on Iα, the result of the program then does
not depend on secrets and their operations:
Theorem 2 (Secrecy by Typing [27]): If ∅ (cid:2) Pb ; Iα for
b = 0, 1 and Iα (cid:2) A : bool, then P0 · A ≈ P1 · A.
Intuitively, the program A interacts with different secrets, kept
within P0 or P1, but it cannot distinguish between the two.
Theorem 2 generalizes from single types α to families of
indexed types, intuitively with a separate abstract type at every
index. The formal details are beyond the scope of this paper;
we refer to [54] for a similar development.
In Theorems 1 and 2, the module A may be composed of
libraries for cryptographic primitives and networking, protocol
modules, and the adversary. This adversary can be treated as
an untrusted ‘main’ module, simply typed in F#, without any
reﬁnement or abstract type. In contrast, the internal composi-
tion and veriﬁcation of the other modules of the program can
rely on and are in fact driven by typed F7 interfaces.
Asymptotic Safety and Secrecy To model computational
security for cryptographic code, [27] also deﬁnes asymptotic
notions of safety and secrecy for expressions Aη parameterized
by a security parameter η, which is treated as a symbolic
integer constant and is often kept implicit, writing A instead
of (Aη)η≥0. Asymptotic safety states that the probability of an
assertion failing in Aη is negligible. The corresponding secrecy
notion is stated in terms of asymptotic equivalence: two closed
450
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:05 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
M =true,false
boolean expressions A0 and A1 (implicitly indexed by η) are
asymptotically equivalent, written A0 ≈ A1, when the statis-
|P r[A0 ⇓ M ] − P r[A1 ⇓ M ]| is
tical distance 1
2
negligible. These asymptotic notions apply only to modules
that meet polynomial restrictions, so that all closed programs
resulting from their composition always terminate in polyno-
mial time. (See [41] for a detailed discussion of polynomial-
time notions for code-based simulation-based security.)
Games,
ideal functionalities, and typed interfaces. We
now explain how to use F7 typing to model cryptographic
primitives and protocols, using authenticated encryption (AE)
as a running example—see §IV and §VI for its TLS elabo-
rations. Let C be a module that implements a cryptographic
functionality or protocol. We may deﬁne security for C in
three different styles: using games, ideal functionalities, or
ideal interfaces. To begin with, we suppose that C manages a
single key internally and does not allow for key compromise.
We deﬁne an interface IC with two functions for encryption
and decryption, for now assuming that plaintexts and ciphers
are ﬁxed-sized byte arrays. Decryption returns an option, that
is, either some plaintext or none, in case of decryption error.
val ENC: p:plain → c:cipher
val DEC: c:cipher → o:plain option
Games Games provide oracle access to C;
this may be
programmed as a module G with an interface IG that exports
oracle functions. Games come in two ﬂavors: (1) Games with
a winning condition, which can be expressed by the adversary
breaking a safety assertion, (2) Left-or-right games, in which
the adversary has to guess which of the two variants G0 or
G1 of the game it is interacting with. In our framework, this
may be deﬁned as C · G0 · A ≈ C · G1 · A.
Typical games for modeling the authenticity and conﬁ-
dentiality of AE are INT-CTXT and IND-CPA. The former
requires that the adversary forge a valid ciphertext; the latter
requires that an adversary that freely chooses (x0, x1) cannot
distinguish between encryptions of x0 and encryptions of x1.
(See [27] for examples of games coded in F#.)
Ideal Functionalities with Simulators An ideal functionality
F for C implements the same interface IC but provides nicer
properties. F only needs to implement C partially; the rest of
the implementation that is not security critical may be provided
by a simulator S, which is only required to exist. For primitives