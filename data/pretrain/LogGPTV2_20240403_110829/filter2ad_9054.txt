# sctf2020 pysandbox 1&2 分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前置知识
### flask处理流程
flask的很多功能是建立在 Werkzeug 之上的 ,根据WSGI接口,实现了_ _call__ ,没当有请求进入,边会调用这个方法
跟进来，在这里建并推送请求上下文,然后调用full_dispatch_request处理请求
在这个函数中调用了 preprocess_request（）方法对请求进行预处理（ request preprocess ing), 这会执行所有使用
before_request 钩子注册的函数。 接着，请求分发的工作会进一步交给 dispatch_request（）方法
最后接收视图函数返回值,使用finalize_request方法生成响应,在视图函数中,使用Werkzeug
的路由类处理url,根据处理结果,调用view_functions的视图函数执行
### 路由系统
Werkzeug 提供的路由类,会根据url和rule规则,返回endpoint值和参数字典
### 上下文对象
    def _lookup_req_object(name):
        top = _request_ctx_stack.top
        if top is None:
            raise RuntimeError(_request_ctx_err_msg)
        return getattr(top, name)
    def _lookup_app_object(name):
        top = _app_ctx_stack.top
        if top is None:
            raise RuntimeError(_app_ctx_err_msg)
        return getattr(top, name)
    def _find_app():
        top = _app_ctx_stack.top
        if top is None:
            raise RuntimeError(_app_ctx_err_msg)
        return top.app
    # context locals
    _request_ctx_stack = LocalStack()
    _app_ctx_stack = LocalStack()
    current_app = LocalProxy(_find_app)
    request = LocalProxy(partial(_lookup_req_object, "request"))
    session = LocalProxy(partial(_lookup_req_object, "session"))
    g = LocalProxy(partial(_lookup_app_object, "g")
Flask 提供了两种上下文,请求上下文和程序上下文,
这两种上下文分别包含 request ,session  
和 current_app , g 这四个变量 ， 这些变量是实际对象的本地代理（ lo ca l proxy），因此被称为本地 上下文（ context
locals ） 。
LocalStack是Werkzeug 提供的 Local Stack 类,
我们在程序中从 flask 包直接导人的 request 和 session 就是定义在这里的全局对象，这两个对象是对实际的 reques t 变量和
session 变量的代理
当请求进入时,被作为 WSGI 程序调用的 Flask 类实例（即我们的程序实例 app）会在 wsgi_app（）方法中调用
Flask.requestst _context() 方法。 这个方法会实例化 RequestContext 类作为请求上下文对象，接着
wsgi_app（）调用它的
push（）方法来将它推入请求上下文堆栈,_request_ctx_stack中存放着所有的请求,我们在flask中使用的全局变量
request,实际是通过代理指向Local Stack 栈顶的一个指针
## 分析
    from flask import Flask, request
    app = Flask(__name__)
    @app.route('/', methods=["POST"])
    def security():
        secret = request.form["cmd"]
        for i in secret:
            if not 42 ')
    def shrine(shrine):
        for path, obj in search(request, 10):
            if str(obj) == app.config['FLAG']:
                return path
    if __name__ == '__main__':
        app.run(debug=True)