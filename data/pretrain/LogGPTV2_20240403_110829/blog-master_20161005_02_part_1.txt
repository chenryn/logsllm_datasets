## PostgreSQL 9.6 快照过旧 - 源码浅析
### 作者           
digoal            
### 日期          
2016-10-05           
### 标签          
PostgreSQL , 9.6 , 快照过旧 , snapshot too old  
----          
## 背景    
在PostgreSQL 9.6以前，垃圾回收存在的问题。  
当vacuum回收垃圾时，遇到垃圾记录的xmax大于数据库中现存的最早未提交事务xmin时，不会对其进行回收。  
因此当数据库中存在很久为结束的事务时，可能会导致数据库膨胀。  
![pic1](20161005_02_pic_001.png)  
PostgreSQL 9.6加入了快照过旧的功能，目的是防止过长的事务导致数据库膨胀。  
```
Allow old MVCC snapshots to be invalidated after a configurable timeout (Kevin Grittner)    
Normally, deleted tuples cannot be physically removed by vacuuming until the last transaction that could "see" them is gone.   
A transaction that stays open for a long time can thus cause considerable table bloat because space cannot be recycled.   
This feature allows setting a time-based limit, via the new configuration parameter old_snapshot_threshold, on how long an MVCC snapshot is guaranteed to be valid.   
After that, dead tuples are candidates for removal.   
A transaction using an outdated snapshot will get an error if it attempts to read a page that potentially could have contained such data.  
```
![pic2](20161005_02_pic_002.png)  
那么如何配置快照过旧，什么情况选会导致snapshot too old呢？    
## 事务快照解说 
### 快照数据结构
src/include/utils/snapshot.h  
```
/*
 * Struct representing all kind of possible snapshots.
 *
 * There are several different kinds of snapshots:
 * * Normal MVCC snapshots
 * * MVCC snapshots taken during recovery (in Hot-Standby mode)
 * * Historic MVCC snapshots used during logical decoding
 * * snapshots passed to HeapTupleSatisfiesDirty()
 * * snapshots used for SatisfiesAny, Toast, Self where no members are
 *       accessed.
 *
 * TODO: It's probably a good idea to split this struct using a NodeTag
 * similar to how parser and executor nodes are handled, with one type for
 * each different kind of snapshot to avoid overloading the meaning of
 * individual fields.
 */
typedef struct SnapshotData
{
        SnapshotSatisfiesFunc satisfies;        /* tuple test function */
        /*
         * The remaining fields are used only for MVCC snapshots, and are normally
         * just zeroes in special snapshots.  (But xmin and xmax are used
         * specially by HeapTupleSatisfiesDirty.)
         *
         * An MVCC snapshot can never see the effects of XIDs >= xmax. It can see
         * the effects of all older XIDs except those listed in the snapshot. xmin
         * is stored as an optimization to avoid needing to search the XID arrays
         * for most tuples.
         */
        TransactionId xmin;                     /* all XID = xmax are invisible to me */
        /*
         * For normal MVCC snapshot this contains the all xact IDs that are in
         * progress, unless the snapshot was taken during recovery in which case
         * it's empty. For historic MVCC snapshots, the meaning is inverted, i.e.
         * it contains *committed* transactions between xmin and xmax.
         *
         * note: all ids in xip[] satisfy xmin = xmin, but we don't bother filtering
         * out any that are >= xmax
         */
        TransactionId *subxip;
        int32           subxcnt;                /* # of xact ids in subxip[] */
        bool            suboverflowed;  /* has the subxip array overflowed? */
        bool            takenDuringRecovery;    /* recovery-shaped snapshot? */
        bool            copied;                 /* false if it's a static snapshot */
        CommandId       curcid;                 /* in my xact, CID = xmin ! */
        uint8           vacuumFlags;    /* vacuum-related flags, see above */
        bool            overflowed;
        bool            delayChkpt;             /* true if this proc delays checkpoint start;
                                                                 * previously called InCommit */
        uint8           nxids;
} PGXACT;
```
在pg_stat_activity中存储的xmin,xid结构如下  
```
/* ----------
 * LocalPgBackendStatus
 *
 * When we build the backend status array, we use LocalPgBackendStatus to be
 * able to add new values to the struct when needed without adding new fields
 * to the shared memory. It contains the backend status as a first member.
 * ----------
 */
typedef struct LocalPgBackendStatus
{
        /*
         * Local version of the backend status entry.
         */
        PgBackendStatus backendStatus;
        /*
         * The xid of the current transaction if available, InvalidTransactionId
         * if not.
         */
        TransactionId backend_xid;
        /*
         * The xmin of the current session if available, InvalidTransactionId if
         * not.
         */
        TransactionId backend_xmin;
} LocalPgBackendStatus;
```
举一些例子帮助了解快照中的xid与xmin。  
1\. repeatable read与serializable隔离级别的事务，事务的第一条SQL会获取快照，快照持续到事务结束释放。    
```
session A:  
获取当前会话PID，并开启一个repeatable read或serializable隔离级别的事务 
postgres=# select pg_backend_pid();
 pg_backend_pid 
----------------
          57479
(1 row)
postgres=# begin transaction isolation level repeatable read;
BEGIN
session B:
查询会话A的xmin,xid
postgres=# select pid,backend_xid,backend_xmin from pg_stat_activity where pid=57479;
  pid  | backend_xid | backend_xmin 
-------+-------------+--------------
 57479 |             |             
(1 row)
session A: 
执行第一条SQL
postgres=# select 1;
 ?column? 
----------
        1
(1 row)
session B:
78336为session A事务开启时数据库集群中未分配的最小事务号，或者未结束的最小事务号
postgres=# select pid,backend_xid,backend_xmin from pg_stat_activity where pid=57479;
  pid  | backend_xid | backend_xmin 
-------+-------------+--------------
 57479 |             |        78336
(1 row)
在session B消耗2个事务(使用两种方法，各消耗1个事务ID)
postgres=# select txid_current();
 txid_current 
--------------
        78336
(1 row)
postgres=# insert into tbl1 values (1);
INSERT 0 1
session A:
执行第二条SQL
postgres=# select 2;
 ?column? 
----------
        2
(1 row)
session B:
对于repeatable read或serializable隔离级别的事务来说，xmin不会变化。
postgres=# select pid,backend_xid,backend_xmin from pg_stat_activity where pid=57479;
  pid  | backend_xid | backend_xmin 
-------+-------------+--------------
 57479 |             |        78336
(1 row)
session A:
执行一条会申请XID的SQL，例如插入数据。  
postgres=# insert into tbl1 values (1);
INSERT 0 1
session B:
xid有值了，为session A对应事务申请下来的事务号，是已消耗掉的，XID不会变化。  
postgres=# select pid,backend_xid,backend_xmin from pg_stat_activity where pid=57479;
  pid  | backend_xid | backend_xmin 
-------+-------------+--------------
 57479 |       78338 |        78336
(1 row)
```
2\. read committed隔离级别的事务，事务的每一条SQL会获取快照，SQL执行结束就会释放快照。    
```
session A:  
获取当前会话PID，并开启一个repeatable read或serializable隔离级别的事务 
postgres=# select pg_backend_pid();
 pg_backend_pid 
----------------
          57479
(1 row)
postgres=# begin transaction isolation level read committed;
BEGIN
session B:
查询会话A的xmin,xid
postgres=# select pid,backend_xid,backend_xmin from pg_stat_activity where pid=57479;
  pid  | backend_xid | backend_xmin 
-------+-------------+--------------
 57479 |             |             
(1 row)
session A: 
执行第一条SQL
postgres=# select 1;
 ?column? 
----------
        1
(1 row)
session B:
并没有观察到xmin，因为select 1;开始时获取，SQL执行结束马上就释放了
postgres=# select pid,backend_xid,backend_xmin from pg_stat_activity where pid=57479;
  pid  | backend_xid | backend_xmin 
-------+-------------+--------------
 57479 |             |             
(1 row)
session A: 
执行第一条long SQL
postgres=# select pg_sleep(10);
session B:
pg_sleep执行结束前，赶快查看，可以观察到xmin，SQL执行结束再查看xmin就会消失。  
postgres=# select pid,backend_xid,backend_xmin from pg_stat_activity where pid=57479;
  pid  | backend_xid | backend_xmin 
-------+-------------+--------------
 57479 |             |        78339
(1 row)
session B:
在session B消耗2个事务(使用两种方法，各消耗1个事务ID)
postgres=# select txid_current();
 txid_current 
--------------
        78339
(1 row)
postgres=# insert into tbl1 values (1);
INSERT 0 1
session A: 
执行第2条long SQL