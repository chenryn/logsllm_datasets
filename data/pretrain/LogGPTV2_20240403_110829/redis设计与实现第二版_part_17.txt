 Stringobject
Stringobject
Stringobject
"Manning"
 Listobject
Listobject
"b""
第9章
Stringobject
"c"
"c"
数据
库·95
---
## Page 100
96·第二部分单机数据库的实现
被添加到值对象里面，如图 9-8 所示。
那么键空间中book 键的值对象（一个哈希对象）将被更新，
字符串，如图 9-7所示。
键message 的值对象将从之前包含“"hello
redisDb
redisDb
(integer) 1
redis> HseT book page 320
再举个例子，
dict
dict
··
StringObject
Stringobject
"alphabet"
Stringobject
Stringobject
Stringobject
StringObject
"message"
"message"
"alphabet"
如果我们继续执行以下命令：
更新值对象----
"book"
"book"
dict
-------—密
dict
图9-7使用 SET命令更新 message键
图9-8
"blah blah"
Stringobject
Stringobject
Stringobject
Stringobject
"publisher"
Stringobject:
Stringobject
 Stringobject
Stringobject
Stringobject
Stringobject
Hashobject
"publisher"
Hashobject
"blah blah"
 Stringobject
"author"
"namen
使用 HSET 更新 book 键
"page"
"author"
"name".
"a"
"a"
"Josiah L. Carlson"
"Redis in Action"
Stringobject
 Stringobject
 Stringobject
"Josiah L.
Stringobject
"Redis in Action"
 Stringobject
"Manning"
Listobject
Stringobject
Stringobject
 Stringobject
 Stringobject
"Manning"
Listobject
u9u
320
"b"
新的键值对 page 和 320 会
Carlson"
Stringobject
Stringobject
"c"
"c"
---
## Page 101
表对象值，之后再返回列表对象中包含的三个字符串对象的值，取值过程如图9-10 所示。
LRANGE命令将首先在键空间中查找键alphabet，
象值，之后再返回值对象所包含的字符串"he1loworld"，取值过程如图9-9所示。
GET命令将首先在键空间中查找键 message，找到键之后接着取得该键所对应的字符申对
的类型不同，具体的取值方法也会有所不同。
9.3.4
GET---------
1）查找键
redisDb
对一个数据库键进行取值，实际上就是在键空间中取出键所对应的值对象，根据值对象
dict
1)"a"
再举一个例子，当执行以下命令时，
·
·.·
举个例子，如果键空间当前的状态如图9-4所示，那么当执行以下命令时：
redis> LRANGE alphabet 0 -1
"hello world"
redis> GET message
对键取值
StringObject 2）取值
Stringobject
"alphabet"
Stringobject
"message"
"book"
dict
图9-9使用GET命令取值的过程
Stringobject
"hello world"
StringObject
"publisher"
Stringobject
Stringobject
Hashobject
Stringobject
"author"
"a"
，找到键之后接着取得该键所对应的列
"Josiah L. Carlson"
"Redis in Action"
Stringobject
 Stringobject
 Stringobject
Stringobject
"Manning"
Listobject
uqu
第9章数据库97
Stringobject
"c"
---
## Page 102
98·第二部分单机数据库的实现
还会执行一些额外的维护操作，其中包括：
9.3.6读写键空间时的维护操作
进行操作来实现的。
数量来实现的。类似的命令还有EXISTS、RENAME、KEYS等，这些命令都是通过对键空间
空间中随机返回一个键来实现的。
来实现的。又比如说，用于随机返回数据库中某个键的RANDOMKEY命令，就是通过在键
9.3.5其他键空间操作
命令，也是通过对键空间进行处理来完成的。
比如说，用于清空整个数据库的 FLUSHDB命令，就是通过删除键空间中的所有键值对
除了上面列出的添加、删除、更新、取值操作之外，
1）查找键
redisDb
当使用Redis 命令对数据库进行读写时，服务器不仅会对键空间执行指定的读写操作，
另外，用于返回数据库键数量的DBSIZE命令，
dict
口如果服务器在读取一个键时发现该键已经过期，那么服务器会先删除这个过期键，
口在读取一个键之后（读操作和写操作都要对键进行读取），服务器会根据键是否存在
口
计算键的闲置时间，使用OBJECTidletime命令可以查看键key的闲置时间。
在读取一个键之后，服务器会更新键的LRU（最后一次使用）时间，这个值可以用于
以在 INFO stats 命令的 keyspace_hits 属性和 keyspace_misses 属性中查看。
来更新服务器的键空间命中（hit）次数或键空间不命中（miss）次数，这两个值可
Stringobject
Stringobject
Stringobject
"message"
"alphabet"
"book"
dict
图9-10使用LRANGE命令取值的过程
2）取值
"hello world"
Stringobject
"publisher"
Stringobject
Stringobject
Stringobject
 Hashobject
"name"
Stringobject]
，就是通过返回键空间中包含的键值对的
"Redis in Action"
Stringobject
 Stringobject
 Stringobject
还有很多针对数据库本身的 Redis
"Manning"
Stringobject
Listobject
"b"
Stringobject
nc"
---
## Page 103
除这个键：
命令，以秒或者毫秒精度给数据库中的某个键设置过期时间（expiretime）。
设置过期时间的原理和本章介绍的 EXPIRE 命令设置过期时间的原理是完全一样的。
类型限定的命令（只能用于字符串键），所以本章不会对这个命令进行介绍，但SETEX命令
注意
自动删除生存时间为0的键：
个键设置生存时间（Time ToLive，TTL），在经过指定的秒数或者毫秒数之后，服务器就会
9.4设置键的生存时间或过期时间
过期时间是一个UNIX 时间戳，当键的过期时间来临时，服务器就会自动从数据库中删
与 EXPIRE命令和 PEXPIRE命令类似，客户端可以通过EXPIREAT命令或PEXPIREAT
SETEX命令可以在设置一个字符串键的同时为键设置过期时间，因为这个命令是一个
通过 EXPIRE命令或者 PEXPIRE 命令，客户端可以以秒或者毫秒精度为数据库中的某
redis> EXPIREAT key 1377257300
redis> SET key value
redis> TIME
(integer) 1
(nil)
redis> GET key // 5秒之后
'value"
redis> GET key
(integer) 1
redis> EXPIRE key 5
口如果服务器开启了数据库通知功能，那么在对键进行修改之后，服务器将按配置发
口服务器每次修改一个键之后，都会对脏（dirty）键计数器的值增1，这个计数器会触
口 如果有客户端使用 WATCH命令监视了某个键，那么服务器在对被监视的键进行修
发服务器的持久化以及复制操作，第10章、第11章和第15 章都会说到这一点。
送相应的数据库通知，本章稍后讨论数据库通知功能的实现时会详细说明这一点。
过，第19章会详细说明这一点。
改之后，会将这个键标记为脏（dirty），从而让事务程序注意到这个键已经被修改
然后才执行余下的其他操作，本章稍后对过期键的讨论会详细说明这一点。
1/5秒之内
第9章数据库·99
---
## Page 104
100·第二部分单机数据库的实现
（键什么时候会被删除）：
9.4.1设置过期时间
自动删除过期键的方法。
期时间的键这两个问题，我们还没有讨论。
数据库如何保存键的生存时间和过期时间，以及服务器如何自动删除那些带有生存时间和过
存时间，也就是，返回距离这个键被服务器自动删除还有多长时间：
本节将对服务器保存键的生存时间和过期时间的方法进行介绍，并在下一节介绍服务器
Redis 有四个不同的命令可以用于设置键的生存时间（键可以存在多久）或过期时间
 EXPIRE命令用于将键 key 的生存时间设置为 tt1 秒。
在上一节我们讨论了数据库的底层实现，以及各种数据库操作的实现原理，但是，关于
redis> EXPIREAT another_key 1377333100
redis> SET another_key another_value
redis> ExPIRE key 1000
redis> SET key value
TTL命令和PTTL命令接受一个带有生存时间或者过期时间的键，返回这个键的剩余生
(integer) 10
(integer) 1
redis> TIME
redis> GET key
2)"230656"
1)"1377257303"
redis> TIME
redis> GET key
2)"296543"
(nil)
1)"1377257296"
)"761687"
// 1377257300之后
//1377257300之前
---
## Page 105
为过期字典：
9.4.2
转换成 PEXPIREAT命令来执行，如图9-11所示。
个，经过转换之后，最终的执行效果都和执行PEXPIREAT命令一样。
三个命令都是使用PEXPIREAT命令来实现的：无论客户端执行的是以上四个命令中的哪一
redisDb 结构的expires 字典保存了数据库中所有键的过期时间，我们称这个字典
typedef struct redisDb {
 过期字典的值是一个 long long 类型的整数，
口过期字典的键是一个指针，这个指针指向键空间中的某个键对象（也即是某个数据
最终，EXPIRE、PEXPIRE 和EXPIREAT三个命令都会
并且，EXPIREAT命令也可以转换成PEXPIREAT命令：
接着，PEXPIRE命令又可以转换成PEXPIREAT命令：
def EXPIRE(key, ttl_in_sec):
首先，EXPIRE命令可以转换成PEXPIRE命令：
def EXPIREAT (key,expire_time_in_sec):
def PEXPIRE(key,ttl_in_ms):
虽然有多种不同单位和不同形式的设置命令，但实际上EXPIRE、PEXPIRE、EXPIREAT
 PEXPIREAT命令用于将键 key 的过期时间设置为timestamp
键的过期时间—
所指定的毫秒数时间戳。
库键)。
保存过期时间
 PEXPIREAT(key, expire_time_in_ms)
PEXPIRE (key, ttl_in_ms)
所指定的秒数时间戳。
/1过期字典，保存着键的过期时间
expire_time_in_ms
#将过期时间从秒转换为毫秒
#当前时间加上 TTL，得出毫秒格式的键过期时间
now_ms = get_current_unix_timestamp_in_ms()
#获取以毫秒计算的当前UNIX 时间戳
ttl_in_ms = sec_to_ms (ttl_in_sec)
#将 TTL 从秒转换成毫秒
二
——个毫秒精度的UNIX 时间戳。