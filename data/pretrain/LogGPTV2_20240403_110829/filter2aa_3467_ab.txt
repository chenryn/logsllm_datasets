### ELF32 文件分析

**文件类型**: DYN (共享对象文件)  
**机器架构**: ARM  
**入口点地址**: 0x433c  
**程序头开始位置**: 52 (字节偏移)  
**段头开始位置**: 92204 (字节偏移)  
**程序头大小**: 32 (字节)  
**程序头数量**: 6  
**段头大小**: 0 (字节)  
**段头数量**: 0  

#### 程序头详细信息
| 类型         | 偏移量   | 虚拟地址     | 物理地址     | 文件大小 | 内存大小 | 标志  | 对齐 |
|--------------|----------|--------------|--------------|----------|----------|-------|------|
| EXIDX        | 0x028584 | 0x00028584   | 0x00028584   | 0x00568  | 0x00568  | R     | 0x4  |
| LOAD         | 0x000000 | 0x00000000   | 0x00000000   | 0x131ec  | 0x131ec  | RE    | 0x8000 |
| LOAD         | 0x018c1c | 0x00030c1c   | 0x00030c1c   | 0x00520  | 0x01538  | RW    | 0x8000 |
| DYNAMIC      | 0x018c80 | 0x00030c80   | 0x00030c80   | 0x00108  | 0x00108  | RW    | 0x4  |
| GNU_STACK    | 0x000000 | 0x00000000   | 0x00000000   | 0x00000  | 0x00000  | RW    | 0x4  |
| GNU_RELRO    | 0x018c1c | 0x00030c1c   | 0x00030c1c   | 0x003e4  | 0x003e4  | R     | 0x1  |

- **入口地址指向压缩代码**（反调试）
- **段表起始位置超出文件边界**（反调试）
- **无段表**（反调试）
- **异常索引表超出文件边界**（IDA崩溃）

### 动态节
- **真实入口点**
- **Bangcle - libsecexe.so**
- **动态节内容**:
  - 0xf4
  - 0x9d0
  - 0x1cb0
  - 0x3b79
  - 0x43e0
  - 0x125a9
  - 0x13150
  - HASH
  - SYMTAB
  - STRTAB
  - REL
  - 压缩代码
  - TEXT (初始化代码)

### Bangcle - 进程
- **从APK中提取ELF /data/data//.cache/** (Assets)
- **fork应用进程**
- **执行execl /data/data//.cache/ -1114751212 1 /data/app//base.apk 34 43 44 0**
- **fork包进程** (从libsecmain.so::so_main)
- **反调试线程**
- **如果.cache/classes.dex (OAT)不存在，则fork包进程**
- **LD_PRELOAD=/data/data//.cache/libsecpreload.so**
- **LD_PRELOAD_ARGS= 9 13**
- **LD_PRELOAD_SECSO=/data/data//.cache/libsecmain.so**
- **执行execl /system/bin/dex2oat --zip-fd=9 --zip-location=/data/data//.cache/classes.jar --oat-fd=13 --oat-location=/data/data//.cache/classes.dex --instruction-set=arm**

### 函数
- **函数a1**
- **函数r2**

### Bangcle - libc.so 钩子
| libc 函数       | 偏移量   |
|-----------------|----------|
| munmap          | 0x15BD8  |
| close           | 0x14FAC  |
| msync           | 0x15F88  |
| __openat        | 0x14DA4  |
| read            | 0x15118  |
| pread64         | 0x162F8  |
| __mmap2         | 0x15420  |
| pwrite64        | 0x166DC  |
| __open          | 0x14B9C  |
| write           | 0x152FC  |

- **保护已更改**
- **函数r1**

### Bangcle - 总结
- 创建Java活动中的桩来加载本地库。
- 本地库使用多种反研究技术进行保护。
- 本地库钩住libc以处理OAT文件的打开。

### Baidu - 分类
- **类**
  - StubApplication
  - StubProvider
- **文件**
  - libbaiduprotect
  - baiduprotect1 (原始dex)

### Baidu - 本地加载器实现
```java
public class A implements Enumeration {
    public static native byte B(int arg0, Object arg1, ...);
    public static native char C(int arg0, Object arg1, ...);
    public static native double D(int arg0, Object arg1, ...);
    public static native float F(int arg0, Object arg1, ...);
    public static native int I(int arg0, Object arg1, ...);
    public static native long J(int arg0, Object arg1, ...);
    public static native Object L(int arg0, Object arg1, ...);
    public static native short S(int arg0, Object arg1, ...);
    public static native void V(int arg0, Object arg1, ...);
    public static native boolean Z(int arg0, Object arg1, ...);
    public static native void a();
    public static native void b();
    public static native String[] c();
}
```

- **函数偏移量**
  - a: 0x23459
  - b: 0x2345d
  - c: 0x23461
  - V, Z, B, C, S, I, J, F, D, L: 0x25861

### Baidu - libbaiduprotect.so
- **偏移量**
  - 0x1000
  - 0x2e6d
  - 0x2ea4
  - 0x23459
  - 0x2345d
  - 0x23461
  - 0x25861
  - 0x3ca78
  - 0x4286c
- **JNI_OnLoad**
  - a
  - b
  - c
  - V, Z, B, C, S, I, J, F, D, L
- **TEXT (入口点1)**
  - 更改自我保护: 0x2000 - 0x3d000
  - 解密代码: 0x2e6d - 0x3ca78
  - 更改自我保护: 0x0 - 0x1000
  - 移除ELF头

### Baidu - JNI_OnLoad
- **反调试**
- **注册本地方法**: a, b, c, …
- **解压打包的DEX /Assets/baiduprotect1.jar 到 /data/data//.1/1.jar**
- **创建空DEX文件 /data/data//.1/classes.jar**
- **钩住libart.so**
- **创建DexClassLoader(/data/data//.1/classes.jar) 并与主类加载器合并**

### Baidu - 反调试
- **混淆**
- **禁用日志**
- **检查每个/proc/，确保/proc//cmdline不包含gdb, gdbserver, android_server**
- **检查每个/proc/self/task，确保/proc/self/task//status不包含TracerPid**
- **检查每个/proc/self/task，确保/proc/self/task//comm不包含JDWP**
- **检查android.os.Debug.isDebuggerConnected**
- **基于定时器的选择调用技术**
- **inotify 监视 (IN_ACCESS + IN_OPEN)**
  - /proc/self/mem
  - /proc/self/pagemap
  - 每个/proc/self/task
    - /proc/self/task//mem
    - /proc/self/task//pagemap

### Baidu - libart.so 钩子
| libc 函数       | libart 钩子 | 偏移量   |
|-----------------|-------------|----------|
| read            | 0x309BC8    | 0xA75C   |
| open            | 0x309BDC    | 0x8FAC   |
| close           | 0x309BE4    | 0x9168   |
| mmap            | 0x309BE8    | 0x9474   |
| strstr          | 0x309C58    | 0x8BD8   |
| fork            | 0x309F3C    | 0x92DC   |
| waitpid         | 0x309F40    | 0xA5E4   |
| execv           | 0x309F4C    | 0xA324   |
| __android_log_print | 0x309FAC | 0xA750   |

- **函数__android_log_print**: 无日志
- **函数execv**: 添加环境变量 ANDROID_LOG_TAGS=*:f
- **防止代码编译**: 添加命令行参数 --compiler-filter=verify-none
- **函数open**: 在加载/data/data//.1/classes.jar文件时解密/data/data//.1/1.jar

### Baidu - 总结
- 创建Java活动中的桩来加载本地库。
- 本地库使用多种反研究技术进行保护。
- 本地库钩住libc以处理DEX文件的打开。
- libc::open == 解密

### Bangle vs Baidu
- **过滤文件路径**:
  - /data/data//.cache/classes.dex
  - /data/data//.1/classes.jar
- **预期看到**:
  - OAT
  - DEX

### 使用DEX加载过程解包应用
- **首次调用DEX/OAT文件打开的位置**:
  - DEX
  - OAT
  - dalvik.system.DexClassLoader::DexClassLoader
  - dalvik.system.DexFile::DexFile
  - DexFile::openDexFileNative
  - DexFile_openDexFileNative
  - ClassLinker::OpenDexFilesFromOat
  - OatFileAssistant::MakeUpToDate
  - OatFileAssistant::OatFileIsUpToDate
  - OatFileAssistant::GetOatFile
  - OatFile::Open
  - OatFile::OpenElfFile → DexFile::DexFile
  - OatFileAssistant::GivenOatFileIsUpToDate
  - OatFileAssistant::GetRequiredDexChecksum
  - DexFile::GetChecksum
  - OpenAndReadMagic

### platform/art/runtime/dex_file.cc 补丁
```cpp
static int OpenAndReadMagic(const char* filename, uint32_t* magic, std::string* error_msg) 
{
    CHECK(magic != nullptr);
    ScopedFd fd(open(filename, O_RDONLY, 0));  
    …
    char* fn_out = new char[PATH_MAX];
    strcpy(fn_out, filename);
    strcat(fn_out, "__unpacked");
    int fd_out = open(fn_out, O_WRONLY|O_CREAT|O_EXCL, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);
    struct stat st;
    if (!fstat(fd.get(), &st)) {
      char* addr = (char*)mmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE, fd.get(), 0);
      write(fd_out, addr, st.st_size);
      munmap(addr, st.st_size);
    }   
    close(fd_out);
    delete fn_out;
    ...  
}

DexFile::DexFile(const uint8_t* base, size_t size,
        const std::string& location,
        uint32_t location_checksum,
        MemMap* mem_map,
        const OatDexFile* oat_dex_file)
    : begin_(base),
      size_(size), 
      ... 
{  
    ...
    std::ofstream dst(location + "__unpacked", std::ios::binary);
    dst.write(reinterpret_cast(base), size);
    dst.close();
    ...
}
```

### DEX 和 OAT
- **演示时间!**
- **AOSP 修改指令可以在checkpoint GitHub仓库中找到**

### 问题？
如果您有任何问题，请随时提问。