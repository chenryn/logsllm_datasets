ludes with a malicious provider, then the chain of veriﬁca-
tions going back to the beginning of the history is broken.
To mitigate this threat, Frientegrity clients can tolerate up
to f malicious users by looking back in the history until
they ﬁnd a point for which at least f + 1 diﬀerent users
3An operation’s prevCommitment need not refer to the imme-
diately preceding version. This could occur, for example, if the
operation had been submitted concurrently with other operations.
4Speciﬁcally, an objectID is equal to the hash of its ﬁrst
operation, which contains a client-supplied random value, along
with the provider’s name and a provider-supplied random value.
7
Figure 2: A pruned object history that a provider might
send to a client. Numbered leaves represent operations and
ﬁlled boxes represent stubs of omitted subtrees. The solid
arrow represents the last operation’s prevCommitments.
Dashed arrows represent other prevCommitments.
tions, along with Ci, the server commitment to version i
of the object. If Alice then creates a new operation, she
shares her view of the history with others by embedding
Ci in the operation’s prevCommitment ﬁeld. If Bob later
reads the object, which by then has version j ≥ i, he can
compare the object he receives with what Alice saw by
ﬁrst computing what the root hash would have been at
version i from his perspective and then comparing it to the
prevCommitment of Alice’s operation. If his computed
value C(cid:48)
i does not equal Ci, then he knows the server has
equivocated.
4.1.2 Verifying an Object Collaboratively
But how many operations’ prevCommitments does a client
need to check in order to be conﬁdent that the provider
has not misbehaved? Clearly, if the client checks every
operation all the way back to the object’s creation, then
using a history tree provides no advantage over using a
hash chain. Consequently, in Frientegrity, each client only
veriﬁes a suﬃx of the history and trusts others to check
the rest. If we assume that there are at most f malicious
users with write access to an object, then as long as at
least f + 1 users have vouched for a preﬁx of the history,
subsequent clients do not need to examine it.
To achieve this goal, every client executes the following
algorithm to verify an object that it has fetched. In re-
sponse to a readObject RPC, the provider returns a pruned
object history tree that includes all of the operations the
client requested along with any additional ones that the
client will need to check in order to verify the object.
Because the provider knows the client’s veriﬁcation algo-
rithm, it can determine a priori which operations the client
will need. For simplicity, the algorithm below assumes
that only one user needs to vouch for a preﬁx of the history
in order for it to be considered trustworthy (i.e., f = 0).
We relax this assumption in the next section.
0!9!10!12!13!14!15!have vouched. Thus, in the example, if f = 2 and op13,
op14, and op15 were each created by a diﬀerent user, then
Alice can rely on assurances from others about the history
up to op9, but must check the following operations herself.
Frientegrity allows the application to use a diﬀerent
value of f for each type of object, and the appropriate f
value depends on the context. For example, for an object
representing a Twitter-like feed with a single trusted writer,
setting f = 0 might be reasonable. By contrast, an object
representing the wall of a large group with many writers
might warrant a larger f value.
The choice of f impacts performance: as f increases,
so does the number of operations that every client must
verify. But when f is low relative to the number of writers,
verifying an object requires logarithmic work in the history
size due to the structure of history trees. We evaluate this
security vs. performance trade-oﬀ empirically in §7.5.
4.2 Dependencies Between Objects
Recall that, for scalability, the provider only orders the
operations submitted to an object with respect to other op-
erations in the same object. As a result, Frientegrity only
enforces fork* consistency on the history of operations
within each object, but does not ordinarily provide any
guarantees about the order of operations across diﬀerent
objects. When the order of operations spanning multi-
ple objects is relevant, however, the objects’ histories can
be entangled through dependencies. A dependency is an
assertion of the form (cid:104) srcObj, srcVers, dstObj, dstVers,
dstCommitment (cid:105), indicating that the operation with ver-
sion srcVers in srcObj happened after operation dstVers
in dstObj, and that the server commitment to dstVers of
dstObj was dstCommitment.
Dependencies are established by authorized clients in
accordance with a policy speciﬁed by the application.
When a client submits an operation to srcObj, it can create
a dependency on dstObj by annotating the operation with
the triple (cid:104) dstObj, dstVers, dstCommitment (cid:105). If another
client subsequently reads the operation, the dependency
serves as evidence that dstObj must have at least been
at version dstVers at the time the operation was created,
and the provider will be unable to trick the client into
accepting an older version of dstObj.
As described in §3.4, Frientegrity uses dependencies
to prevent a malicious provider from tricking clients into
accepting outdated ACLs. Whenever a client submits a
new operation to an object, it includes a dependency on
the most recent version of the applicable ACL history that
it has seen.5 Dependencies have other uses, however. For
example, in a Twitter-like social network, every retweet
could be annotated with a dependency on the original
5The annotation can be omitted if the prior operation in the
object points to the same ACL history version.
In that case, a provider that
tweet to which it refers.
wished to suppress the original tweet would not only have
to suppress all subsequent tweets from the original user
(because Frientegrity enforces fork* consistency on the
user’s feed), it would also have to suppress all subsequent
tweets from all the users who retweeted it.
Frientegrity uses Merkle aggregation [11] to implement
dependencies eﬃciently. This feature of history trees al-
lows the attributes of the leaf nodes to be aggregated up
to the root, where they can be queried eﬃciently. In Frien-
tegrity, the root of every object’s history tree is annotated
with a list of the other objects that the object depends
on, along with those objects’ most recent versions and
server commitments. To prevent tampering, each node’s
annotations are included in its hash, so that incorrectly
aggregated values will result in an incorrect root hash.
4.3 Veriﬁable Access Control
4.3.1
Supporting Membership Proofs
When handling a readObject RPC, Frientegrity ACLs
must enable the provider to construct proofs that demon-
strate to a client that every returned operation was created
by an authorized user. But to truly demonstrate such autho-
rization, such a proof must not only show that a user was
present in the ACL at some point in time, it must show
that the user was in the ACL at the time the operation
was created (i.e., in the version of the ACL on which the
operation depends). As a result, an ACL must support
queries not only on the current version of its state, but
on previous versions as well. The abstract data type that
supports both membership proofs and queries on previous
versions is known as a persistent authenticated dictionary
(PAD). Thus, in Frientegrity, ACLs are PADs.
To realize the PAD abstract data type, an ACL is im-
plemented as a binary search tree in which every node
stores both an entry for a user and the hash of the subtree
below it.6 To prove that an entry u exists, it suﬃces for the
provider to return a pruned tree containing the search path
from the root of the tree to u, in which unneeded subtrees
in the path are replaced by stubs containing the subtrees’
hashes. If the root hash of the search path matches the
previously-known root hash of the full tree, a client can
be convinced that u is in the ACL.
To support queries on previous versions of their states,
ACLs are copy-on-write. When an administrator updates
the ACL before calling writeACL, it does not modify any
6Our ACL construction expands on a PAD design from
Crosby et al. [12] that is based on a treap [2]. A treap is a
randomized search tree that is a cross between a tree and a
heap.In addition to a key-value pair, every node has a priority,
and the treap orders the nodes both according to their keys and
according to the heap property. If nodes’ priorities are chosen
pseudorandomly, the tree will be balanced in expectation.
8
Figure 3: ACLs are organized as trees for logarithmic access
time. Figure illustrates Alice’s entry in Bob’s ACL.
nodes directly. Instead, the administrator copies each node
that needs to be changed, applies the update to the copy,
and then copies all of its parents up to the root. As a result,
there is a distinct root for every version of the ACL, and
querying a previous version entails beginning a search at
the appropriate root.
4.3.2 Preventing Equivocation about ACLs
To authenticate the ACL, it is not enough for an administra-
tor to simply sign the root hash of every version, because
a malicious provider could still equivocate about the his-
tory of ACL updates. To mitigate this threat, Frientegrity
maintains a separate ACL history object that stores a log
of updates to the ACL. An ACL history resembles an or-
dinary object, and clients check it for fork* consistency
in the same way, but the operations that it contains are
special ModifyUserOps. Each version of the ACL has a
corresponding ModifyUserOp that stores the root hash as
of that version and is signed by an administrator.
In summary, proving that the posts on a user Bob’s
wall were created by authorized users requires three steps.
First, for each post, the provider must prove that the post’s
creator was in Bob’s ACL by demonstrating a search path
in the appropriate version of the ACL. Second, for each
applicable version of Bob’s ACL, the provider must pro-
vide a corresponding ModifyUserOp in Bob’s ACL history
that was signed by Bob. Finally, the provider must supply
enough of the ACL history to allow clients to check it for
fork* consistency, as described in §4.1.2.
4.3.3 Eﬃcient Key Management and Revocation
Like many prior systems designed for untrusted servers
(e.g., [5, 21, 25, 37]), Frientegrity protects the conﬁden-
tiality of users’ data by encrypting it under a key that is
shared only among currently authorized users. When any
user’s access is revoked, this shared key must be changed.
Unfortunately, in most of these prior systems, changing
the key entails picking a new key and encrypting it under
the public key of the remaining users, thereby making
revocation expensive.
To make revocation more eﬃcient, Frientegrity orga-
nizes keys into key graphs [59]. But rather than maintain-
ing a separate data structure for keys, Frientegrity stores
keys in same ACL tree that is used for membership proofs.
As shown in Figure 3, each node in Bob’s ACL not only
contains the pseudonym and privileges of an authorized
user, such as Alice, it is also assigned a random AES key
k. k is, in turn, encrypted under the keys of its left and
right children, kle f t and kright, and under Alice’s public key
kAlice pub.7 This structure allows any user in Bob’s ACL to
follow a chain of decryptions up to the root of the tree and
obtain the root key kBob root. As a result, kBob root is shared
among all of Bob’s friends and can be used to encrypt
operations that only they can access. Because the ACL
tree is balanced in expectation, the expected number of
decryptions required to obtain kBob root is logarithmic in
the number of authorized users. More signiﬁcantly, this
structure makes revoking a user’s access take logarithmic
time as well. When a node is removed, only the keys along
the path from the node to the root need to be changed and
reencrypted.
4.3.4
Supporting Friends-of-Friends
Many social networking services, including Facebook,
allow users to share content with an audience that includes
not only their friends, but also their “friends-of-friends”
(FoFs). Frientegrity could be extended naively to support
sharing with FoFs by having Bob maintain a separate key
tree, where each node corresponded to a FoF instead of a
friend. This approach is undesirable, however, as the size
of the resulting tree would be quadratic in the number of
authorized users. Instead, Frientegrity stores a second FoF
key k(cid:48) in each node of Bob’s ACL. Similar to the friend
key k, k(cid:48) is encrypted under the FoF keys of the node’s
left and right children, k(cid:48)
right. But instead of being
encrypted under kAlice pub, k(cid:48) is encrypted under kAlice root,
the root key of Alice’s ACL. Thus, any of Alice’s friends
can decrypt k(cid:48) and ultimately obtain k(cid:48)
Bob root, which can
be used to encrypt content for any of Bob’s FoFs.
le f t and k(cid:48)
The FoF design above assumes, however, that friend
relationships are symmetric: Bob must be in Alice’s
ACL in order to obtain kAlice root. To support asymmet-
ric “follower-of-follower” relationships, such as Google+
“Extended Circles,” Frientegrity could be extended so
that a user Alice maintains a separate public-private
key pair (cid:104)kAlice FoF pub, kAlice FoF priv(cid:105). Alice could then
give kAlice FoF priv to her followers by encrypting it under
kAlice root, and she could give kAlice FoF pub to Bob. Finally,
Bob could encrypt k(cid:48) under kAlice FoF pub.
7To lower the cost of changing k, k is actually encrypted un-
der an AES key kuser which is, in turn, encrypted under kAlice pub.
9
Ek_left(k)!Ek_right(k)!Ek_Alice_pub(k)!Alicepseudonym!RW!User: Priv: parent left child right child 5. Extensions
5.1 Discovering Friends
Frientegrity identiﬁes users by pseudonyms, such as the
hashes of their public keys. But to enable users to discover
new friends, the system must allow them to learn other
users’ real names under certain circumstances. In Frien-
tegrity, we envision that the primary way a user would
discover new friends is by searching through the ACLs
of her existing friends for FoFs that she might want to
“friend” directly. To make this possible, users could en-
crypt their real names under the keys that they use to share
content with their FoFs. A user Alice’s client could then
periodically fetch and decrypt the real names of her FoFs
and recommend them to Alice as possible new friends. Al-
ice’s client could rank each FoF according to the number
of mutual friends that Alice and the FoF share by counting
the number of times that the FoF appears in an ACL of
one of Alice’s friends.
Frientegrity’s design prevents the provider from oﬀering
site-wide search that would allow any user to locate any
other users by their real names. After all, if any user could
search for any other user by real name, then so could
Sybils acting on behalf of a malicious provider. We believe
that this limitation is unavoidable, however, because there
is an inherent trade-oﬀ between users’ privacy and the
eﬀectiveness of site-wide search even in existing social
networking systems.8 Thus, a pair of users who do not
already share a mutual friend must discover each other, by
exchanging their public keys out-of-band.
5.2 Multiple Group Administrators
As we describe in §4.3, when a user Alice reads another
user Bob’s wall, she veriﬁes every wall post by consult-
ing Bob’s ACL. She, in turn, veriﬁes Bob’s ACL using
Bob’s ACL history, and then veriﬁes each relevant Modi-
fyUserOp by checking for Bob’s signature. To support
features like Facebook Groups or Pages, however, Fri-
entegrity must be extended to enable multiple users to
modify a single ACL and to allow these administrators be
added and removed dynamically. But if the set of admin-
istrators can change, then, as with ordinary objects, a user
verifying the ACL history must have a way to determine
that every ModifyUserOp came from a user who was a
valid administrator at the time the operation was created.
One might think the solution to this problem is to have
another ACL and ACL history just to keep track of which
users are administrators at any given time. But this pro-
8For example, in 2009, Facebook chose to weaken users’
privacy by forcing them to make certain information public, such
as their genders, photos, and current cities. It adopted this policy,
which it later reversed, so that it would be easier for someone
searching for a particular user to distinguish between multiple
users with the same name [46].
posal merely shifts the problem to the question of who is
authorized to write to these data structures.
Instead, we propose the following design. Changes
to the set of administrators would be represented as spe-
cial ModifyAdminOp. Each ModifyAdminOp would be
included in the ACL history alongside the ModifyUserOp,
but would also have a pointer to the previous ModifyAd-
minOp. In this way, the ModifyAdminOp would be linked
together to form a separate admin history, and clients
would enforce fork* consistency on this history using
a linear hash chain in the manner of BFT2F [33] and
SPORC [21]. When a client veriﬁes the ACL history,
it would download and check the entire admin history
thereby allowing it to determine whether a particular user
was an administrator when it modiﬁed the ACL history.
Although downloading an entire history is something that
we have otherwise avoided in Frientegrity, the cost of
doing so here likely is low: Even when the set of reg-
ular users changes frequently, the set of administrators
typically does not.