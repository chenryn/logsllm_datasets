# Monitoring Surveillance Vendors: A Deep Dive into In-the-Wild Android Full Chains in 2021

**Presenters:**
- Xingyu Jin (@1ce0ear)
- Christian Resell (@0xbadcafe1)
- Clement Lecigne
- Richard Neal (@ExploitDr0id)

**Event:** #BHUSA @BlackHatEvents

## Introduction

The goal of this presentation is to provide an in-depth analysis of full-chain exploits discovered in the wild by the Threat Analysis Group (TAG) in 2021. Our primary objective is to protect Google and its users by identifying and mitigating zero-day vulnerabilities.

### Agenda
- Examples of full-chains found in the wild by TAG
- CVE-2021-0920 deep dive
- Post-exploitation
- Exploit in Google Play
- Defending Android
- Conclusion

## Threat Analysis Group (TAG)

- **Goal:** Protect Google and our users.
- **Activities:**
  - Hunting for zero-days exploited in the wild.
  - Tracking more than 30 surveillance vendors.
  - Monitoring the sharing/selling of exploits between groups.
  - Two Android full-chains were discovered in 2021, originating from different surveillance vendors.

## Android Full-chain #1

- **Target:** An up-to-date Android phone.
- **Exploited Zero-Days:**
  - **CVE-2021-38003:** Chrome renderer zero-day in `JSON.stringify`.
  - **CVE-2021-1048:** epoll refcount bug.
- **Mitigation:**
  - CVE-2021-1048 was quickly fixed in the upstream kernel.
  - This is not the first time we have seen such a vulnerability (e.g., CVE-2019-2215, aka Bad Binder).

### Exploitation Details

```c
void *libc_map = mmap(NULL, libc_size, PROT_READ, MAP_PRIVATE, libc_fd, 0);
int fd = socket(AF_LOCAL, SOCK_DGRAM, 0);
fput(fd);
usleep(500);
int mfd = memfd_create("foobar", 0);
void *rw_map = mmap(NULL, libc_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
close(fd);
close(mfd);
usleep(500);
int lfd = open(LIBC_PATH, O_RDONLY);
uint32_t foobar;
for (size_t i = 0; i < B; i++) {
  // Example loop for demonstration
}
```

### Linux Kernel Garbage Collection

- **Step 2: Scanning inflight for gc_candidates: {A, B}**
  - Since B is also a GC candidate, decrement B’s inflight count.
  - Similarly, A’s inflight count is decremented to 0 too.
- **Step 3: inflight(B) > 0, B is not considered garbage.**
  - Recursively restore inflight process.
- **Final Step: No one is considered as garbage.**

### Revisiting the "Unbreakable" Cycle

- **From the garbage collector's perspective:**
  - **gc_candidates: {A, B}**
  - **Scan inflight process:**
    - inflight(A) = 0, inflight(B) = 0 => All of them are garbage!
  - **Purge garbage**

### RECVMSG without MSG_PEEK

- **recvmsg without MSG_PEEK flag:**
  - Synchronize with GC (wait until GC finishes).

### RECVMSG with MSG_PEEK

- **recvmsg with MSG_PEEK flag:**
  - File reference count is elevated.
  - Not synchronized with GC.

### Vulnerability Scenario

- The real-world vulnerability scenario is quite complex and involves multiple layers of exploitation and synchronization issues.

---

This presentation aims to provide a comprehensive understanding of the threats posed by surveillance vendors and the steps taken to mitigate these risks. Thank you for your attention.

#BHUSA @BlackHatEvents