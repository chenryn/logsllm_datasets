with the signature. Second, to avoid having the signer main-
tain state (i.e., a record of all previous message/signature
pairs) we can simply have the signer generate b as a pseu-
dorandom function of m; since we are working in the ran-
dom oracle model anyway, the simplest solution is to set
: {0, 1}∗ → {0, 1} is an indepen-
b = H
It is also possible to have the signer
dent random oracle.
store a “short” random seed s ∈ {0, 1}80 which is used to
(s(cid:19)m). (As mentioned earlier, using a PRF
derive b via H
and setting b = Fs(m) would also suﬃce.) Finally, in case
the original message ˜m is very long, we can avoid comput-
ing two hashes over long inputs by using a collision-resistant
hash function H
( ˜m) and then using
the resulting m in the above construction.
(SK(cid:19)m) where H
to compute m = H
(cid:4)(cid:4)
(cid:4)(cid:4)
(cid:4)
(cid:4)
(cid:4)
Implementation using RSA. We noted earlier that the
RSA trapdoor permutation may be viewed as being induced
by a claw-free permutation. In this case, the above scheme
is almost as simple as FDH: the user’s public key is N, e and
the secret key contains d such that ed = 1 mod ϕ(N ). To
(SK(cid:19)m) and com-
sign message m, the signer sets b = H
putes σ = (H(b(cid:19)m))d mod N . Veriﬁcation requires a single
exponentiation and (at most) two hash function evaluations.
(cid:4)
(cid:4)
(cid:4)
Theorem 2. If the claw-free permutation in the scheme
)-secure and the time to compute f or g is
above is (t
at most tf , then the above signature scheme is (t, qh, qs, ε)-
secure (in the random oracle model), where:
, ε
t ≤ t
ε ≥ 2ε
(cid:4) − (qh + qs) · tf
(cid:4)
.
Proof. Assume we have an algorithm F, running in time
at most t and making at most qh hash queries and at most
qs signing queries, which forges a new message/signature
pair with probability at least ε. We use F to construct an
algorithm I running in time at most t
which ﬁnds a claw
with probability at least ε
Algorithm I is given the pair (f, g) and its goal is to out-
put a claw (i.e., x0, x1 such that f (x0) = g(x1)).
It sets
P K = f and runs F on input P K. Algorithm I simulates
the signing oracle and the random oracle for F as follows:
. The stated result follows.
(cid:4)
(cid:4)
Global state. Whenever a hash query H(b(cid:19)m) or a sign-
ing query SignSK(m) is made for a new message m, algo-
rithm I chooses a random bm ∈ {0, 1}.
Informally, this
represents the fact that I will be able to produce the value
−1(H(bm(cid:19)m)). We do not include this step explicitly in
f
the descriptions that follow.
Hash queries. I will maintain a list HL of tuples whose
exact format we will describe below. In response to a query
H(b(cid:19)m), algorithm I proceeds as follows:
if there is a tu-
ple (b, m, x, y) in HL, then I returns y. Otherwise, I ﬁrst
chooses random x from the appropriate domain. If b = bm,
then I returns y = f (x); if b (cid:10)= bm then I returns y = g(x).
In either case, I then stores (b, m, x, y) in HL.
Signing queries. If F asks for a signature on a message
m, algorithm I computes y = H(bm(cid:19)m) and ﬁnds the tuple
(bm, m, x, y) in HL.
(Note that
f (σ) = H(bm(cid:19)m), so this is indeed a valid signature.)
It then returns σ = x.
I provides F with a perfect simulation; in particular, all
signing queries are answered with valid signatures. At some
point, F outputs its forgery ( em, eσ), where we assume that
both H(0(cid:19) em) and H(1(cid:19) em) were previously queried and that
eσ was not the previous response to a query SignSK ( em). If
VrfyP K ( em, eσ) = 1, there are two possible cases:
Case 1: f (eσ) = H(b em(cid:19) em). In this case, I cannot ﬁnd a claw
and simply aborts.
Case 2: f (eσ) = H(1− b em(cid:19) em). In this case, I ﬁnds a claw as
follows: it ﬁnds a tuple (1 − b em, em, x, y) in HL and outputs
the claw (eσ, x). (Recall that g(x) = y = H(1 − b em(cid:19) em).)
Since the value of b em is information-theoretically hidden
from F, the forgery will enable I to ﬁnd a claw with proba-
bility 1/2. Thus, if F outputs a forgery with probability at
least ε then I outputs a claw with probability at least ε/2.
The running time of I includes the running time of F and
is otherwise dominated by the computation of f or g each
time a hash query is answered.
Remark. In addition to achieving a tight security proof, our
scheme has the advantage of being deterministic. Having a
deterministic signing algorithm is advantageous in a number
of environments.
4.2 A Scheme Supporting Message Recovery
In the last section, we showed an FDH-/PFDH-like scheme
achieving a tight security reduction without using a random
salt. We now apply the same idea to PSS-R to obtain a
signature scheme (with tight security proof) which supports
message recovery. By avoiding the use of a random salt, our
technique enables recovery of longer messages than previous
schemes. That is (for the case of 1024-bit RSA), whereas
the original analysis of PSS-R [3] allowed recovery of 663-
bit messages and Coron’s analysis extended this to recovery
of 813-bit messages, the scheme below can be used to sign
843-bit messages at the same level of security.
We describe our scheme using RSA; however, the con-
struction and proof may be generalized for arbitrary claw-
free permutations. For the sake of generality, we param-
eterize our scheme by k and k1 where k is the length (in
bits) of the modulus used and k − k1 − 1 is the length of
the messages to be signed; we achieve the result stated in
the previous paragraph by setting k = 1024 and k1 = 180.
In the description below, H : {0, 1}∗ → {0, 1}k1 and G :
{0, 1}k1 → {0, 1}k−k1−1 are hash functions which will be
modeled as independent random oracles.
Gen generates a k-bit modulus N along with public exponent
e and private exponent d such that ed = 1 mod ϕ(N ). The
public key is P K = (N, e) and secret key is d.
SignSK(m) (where m ∈ {0, 1}k−k1−1) ﬁrst checks to see
∗
whether m has been signed before; if it has, the previously-
generated signature is output. (In the previous section, we
describe a simple way to avoid the need for the signer to
maintain state.) Otherwise, the signer chooses a random
= G(w) ⊕ m,
b ∈ {0, 1}, computes w = H(b(cid:19)m) and r
and sets ey = 0(cid:19)w(cid:19)r
. Finally, the signer outputs signature
σ = eyd mod N .
VrfyP K(σ) parses P K as (N, e). It computes ey = σe mod N
and parses ey as 0(cid:19)w(cid:19)r
. It then sets m = G(w) ⊕ r
∗
and
accepts the message m if and only if either H(0(cid:19)m)
?
= w
or H(1(cid:19)m)
value of b with the signature if desired).
?
= w (as above, we can include the appropriate
∗
∗
Theorem 3. If RSA with k-bit moduli is a (t
)-secure
trapdoor permutation and computing eth powers modulo a
k-bit modulus can be done in time texp, then the above sig-
nature scheme is (t, qh, qs, ε)-secure (in the random oracle
model), where:
, ε
(cid:4)
(cid:4)
t ≤ t
ε ≥ 2ε
(cid:4) − (qh + qs) · (k1 − log2 qh) · texp
(cid:4)
+ 2 · (qh + qs)
−k1 .
2 · 2
The proof is similar to the proof of Theorem 2 (cf. also the
proofs of PSS-R in the full version of [12] and of Theorem 4,
below), and is therefore omitted in the present abstract.
1
(cid:4)
−k1 ≈ ε
ε(cid:1) . Taking qh ≈ 260, qs ≈ 230, and ε
The theorem shows that to achieve tight security, we re-
or, equivalently, k1 ≈ 2 · log2(qh +
−60
quire (qh + qs)22
qs) + log2
(as suggested by [12]) shows that the length of k1 must be
roughly 180 bits.
4.3 Message Recovery With Optimal Message
(cid:4) ≈ 2
Length
We may apply a technique suggested by Granboulan [20]
to obtain a variant of PSS-R which is essentially optimal in
terms of the allowable message length (an easy proof of opti-
mality is given below). Unfortunately, this construction re-
quires the random permutation model 4 which seems stronger
than the random oracle model; also, we are not aware of any
appropriate way to instantiate the random permutation for
large block sizes (i.e., block sizes larger than the block size
of a cipher such as AES).
Here, we describe our construction using a generic claw-
free permutation and assume further that the domain of the
permutation is {0, 1}k; however, the scheme can be easily
adapted for the case of, e.g., RSA as in the previous section
(see also [3, 12, 20]). We let k − k1 denote the length of the
messages to be signed, and let E : {0, 1}k → {0, 1}k denote
−1.
a public, random permutation with (public) inverse E
4The random permutation model assumes a public, random
−1(·)) to which
permutation E(·) (along with its inverse E
all parties have oracle access. This model is weaker than
the often-used ideal cipher model, which assumes a public,
keyed cipher E(·,·) (and its inverse) such that E(k,·) is an
independent, random permutation for each key k.
Gen runs cf-Gen to obtain (f, g) and trapdoor information
td. The public key is P K = f and the secret key is td.
SignSK(m) (where m ∈ {0, 1}k−k1 ) ﬁrst checks to see whether
m has been signed before; if it has, the previously-generated
signature is output.
(As in the previous two sections, it
is easy to modify the scheme to avoid maintaining state.)
Otherwise, the signer chooses a random bit b and outputs
σ = f
−1(E(bk1(cid:19)m)).
VrfyP K (σ) computes v(cid:19)m = E
−1(f (σ)) where v ∈ {0, 1}k1 ;
it outputs m if v ∈ {0k1 , 1k1} and otherwise outputs reject.
(cid:4)
(cid:4)
Theorem 4. If the claw-free permutation in the scheme
)-secure and the time to compute f or g is
above is (t
at most tf , then the above signature scheme is (t, qE, qs, ε)-
secure (in the random permutation model), where:
, ε
t ≤ t
ε ≥ 2ε
(cid:4) − (qE + qs) · tf
(cid:4)
−k1 .
+ 2 · qE · 2
(cid:4)
(cid:4)
(cid:4)
(Here, qE is the number of queries made by the adversary
to the E/E
−1 oracles.)
Proof. Assume we have an algorithm F, running in time
−1 and at
at most t and making at most qE queries to E/E
most qs signing queries, which forges a new signature with
probability at least ε. We use F to construct an algorithm
I running in time at most t
which ﬁnds a claw with prob-
ability at least ε. The states result follows.
Algorithm I is given as input (f, g) and its goal is to
output a claw (i.e., values x0, x1 such that f (x0) = g(x1)).
It sets P K = f and runs F on input P K. Algorithm I
−1 for F as
simulates the signing oracle and the oracles E/E
follows:
−1(w
−1(w
) is deﬁned.
−1(E(bk1
, x) such that E(w) = w
If so, it then ﬁnds the unique tuple (w, w
Global state. Whenever a query E(v(cid:19)m) or SignSK(m) is
made for a new message m, algorithm I chooses a random
bm ∈ {0, 1}. Informally, this represents the fact that I will
m (cid:19)m)). We do not
be able to produce the value f
include this step explicitly in the descriptions that follow.
−1. Algorithm I will maintain the lists
Queries to E/E
P AIR, L, and R with the following purpose: P AIR will
consist of tuples (w, w
(equiva-
) = w). List L will consist of all points w
lently, E
such that E(w) is deﬁned, and R will consist of all points
−1(w
such that E
w
), algorithm I checks whether
To answer the query E
, x) ∈
(cid:4) ∈ R.