# An Overview of the Annex System

**Authors:**
- Duncan A. Grove
- Toby C. Murray
- Chris A. Owen
- Chris J. North
- J. A. Jones
- Mark R. Beaumont
- Bradley D. Hopkins

**Affiliation:**
Defence Science & Technology Organisation  
PO Box 1500, Edinburgh, South Australia 5111

## Abstract

This paper provides an overview of the security and network architecture of the Annex system, a suite of technologies for secure and pervasive communication and information processing developed by the Australian Governmentâ€™s Defence Science and Technology Organisation. Our security architecture is built on a distributed object-capability system, which we believe offers an ideal platform for developing high-assurance devices. The network architecture leverages next-generation networking technologies, including Mobile IPv6 and 802.11i wireless networking, with additional extensions to enhance security, robustness, and mobility in military contexts. A key contribution of our work is the seamless integration of a strong security architecture with advanced networking technologies. We also present a reference implementation of the Annex security and networking architecture, known as the Annex Ensemble.

## 1. Introduction

The Australian Defence Force (ADF) and its coalition partners are increasingly focused on Network Centric Warfare (NCW), which aims to simplify and unify mechanisms for assured information sharing to create a more efficient and effective fighting force. This is particularly challenging in military communication and information processing systems due to the need for strict partitioning of classified information at different security levels. Traditionally, this has been achieved by replicating, in isolation, computing and network resources for each security level, which does not scale and hinders the full realization of NCW benefits. The solution is to develop trusted systems capable of enforcing Multi Level Security (MLS).

NCW envisions a Global Information Grid (GIG) that networks fixed bases, mobile platforms, sensors, weapons systems, and individual warfighters. For the GIG to be effective, it must be globally scalable, interoperable, reliable, and secure. This vision requires a next-generation data communication network that can be easily, dynamically, and automatically configured to provide seamless and secure network access to forces anywhere and at any time.

The Command, Control, Communications, and Intelligence Division of the Defence Science and Technology Organisation is developing the Annex experimental network to provide enhanced connectivity between military forces and seamless connectivity to civilian entities using standard Internet Protocols. Annex is based on IPv6 with Hierarchical Mobile IPv6 extensions, enabling authentication and encryption using IPsec, flow markers for efficient management of streaming data, and addressing for mobile nodes. While maintaining backward compatibility, Annex-enabled systems are enhanced with network awareness to improve real-time performance, robustness, and security of communication between Annex-enabled devices.

Although we have used Commercial Off-The-Shelf (COTS) technologies where possible, our fundamental design principle is that very strong security mechanisms must protect all aspects of the system. Without a secure foundation, even the most sophisticated technologies are limited in their applicability to NCW. We also believe that good technologies will fail in the commercial marketplace if security is not adequately addressed.

The Annex security architecture is based on a universal system for access control using capabilities, implemented with trusted hardware and software developed in-house. This forms our Trusted Computing Base (TCB), allowing Annex equipment to be used by multiple mutually suspicious, autonomous participants with differing security policies and interests, facilitating secure access to and sharing of networked resources within the GIG. The Annex security architecture supports the principles of least authority, mutual suspicion, and need-to-know, while allowing arbitrary security policies to be specified and provably enforced. Although minimal formal analysis has been performed on our TCB, we recognize that this will be essential for moving beyond the proof-of-concept stage.

Another important tool for enabling least authority is delegation. During collaboration, one subject may need to wield part of another's authority, which can be achieved through capability delegation. Despite the benefits, capability systems have been criticized for the complexity of managing capability distribution and revocation, and a perceived lack of support for mandatory security policies. Recent research, however, suggests that these concerns can be mitigated with an appropriate capability model.

## 2. The Annex Security Architecture

### 2.1 Capability Architectures

The Annex security architecture is based on a distributed capability system. Capabilities are unforgeable, authority-carrying references that combine the name of the object and the permission required to access it. This bond helps avoid the confused deputy problem by leaving no ambiguity about the authority being wielded during any resource access request. Capabilities also simplify the implementation of trusted systems by unifying addressing and protection mechanisms.

In a capability system, access requests can only be authorized by presenting a capability. A subject's authority is defined by the capabilities it possesses and the transitive closure of what those capabilities permit. Subjects have no ambient authority, so their authority can be limited by restricting the capabilities they hold. This naturally promotes the principles of least privilege and least authority.

### 2.2 The Object-Capability Model

The Annex security architecture uses the object-capability model, which manages complexity by providing natural support for abstractions. This allows fine-grained security policies to be specified using programming abstractions that manage complexity, similar to how usual programming abstractions allow the construction of complex software. Other abstractions enable the implementation of mandatory security policies in the object-capability model.

In an object-capability system, capabilities address objects and allow method invocation, the only action that can be performed. Method invocation with object-capabilities is similar to using protected procedures in CAP or Hydra but is more securable and flexible. Abstractions are implemented by objects whose methods expose functionality but hide implementation details, like in object-oriented programming. All object references (capabilities) are treated in the same way, leading to the fundamental rule that "only connectivity begets connectivity."

### 2.3 Annex Capabilities

The Annex security architecture uses the object-capability model, with capabilities implemented using a password capability system extended with partitioning. Annex capabilities are stored as regular data using a password capability scheme but reside within the protective bounds of the kernel. Outside the kernel, objects reference capabilities using handles. When an object receives a new capability, the kernel automatically replaces it with a per-object handle and creates a mapping between the two. Partitioning is transparent to objects, allowing them to treat handles as if they were real capabilities, while enforcing mandatory security properties such as confinement, the simple security property, and the *-property.

Password capabilities are unforgeable due to their long, probabilistically unguessable passwords. They provide a universal capability representation that works across machine boundaries, leveraging Annex's network addressing architecture. A single Annex capability uniquely identifies an object within the entire Annex network and allows the holder to invoke a subset of the object's methods.

#### 2.3.1 Methods and Permissions

Methods are grouped into user methods, which are specific to each object and expose the interface of the abstraction, and system methods, which are inherited by all objects and provide basic capability operations. These operations include deriving less powerful capabilities from more powerful ones and destroying individual capabilities.

A catalog maps valid capabilities to a pair of permission bit-vectors: (SystemPerms, UserPerms). During compilation, individual methods are mapped to bits within the appropriate bit-vector. Annex uses permissions to explicitly control the methods that can be executed by a particular capability, avoiding the need to instantiate multiple objects, which is advantageous for low-resource embedded devices.

### 2.4 Annex Capability Kernel

We have developed an operating system kernel that implements the Annex security architecture. The kernel manages objects, oversees method invocations, and provides network transparency. Running on trusted hardware, the Annex Capability Kernel provides a complete platform for creating secure, object-capability-based application software. Currently, it relies on a small amount of untrusted hardware and software for network transport and user interaction services, but we are working on extensions to remove these limitations.

The untrusted host can make method calls on objects to which it holds capabilities, but it only holds weak capabilities and never holds capabilities to remote objects. The host forwards remote method invocations over the Annex network, with all remote invocations encrypted to limit potential attacks to Denial of Service (DoS) and traffic analysis.

The kernel consists of four key components and a set of trusted objects to expose core kernel functionality and hardware abstractions. Trusted applications run on top of the kernel, interacting with trusted objects to perform their tasks.