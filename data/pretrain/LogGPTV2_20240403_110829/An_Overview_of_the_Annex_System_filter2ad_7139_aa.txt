title:An Overview of the Annex System
author:Duncan A. Grove and
Toby C. Murray and
Chris A. Owen and
Chris J. North and
J. A. Jones and
Mark R. Beaumont and
Bradley D. Hopkins
An Overview of the Annex System
D.A. Grove T.C. Murray C.A. Owen C.J. North
J.A. Jones M.R. Beaumont B.D. Hopkins
Defence Science & Technology Organisation
PO Box 1500, Edinburgh, South Australia 5111
Abstract
This paper describes the security and network architec-
ture of the Annex system, a family of technologies for secure
and pervasive communication and information processing
that we have developed at the Australian Government’s De-
fence Science and Technology Organisation. Our security
architecture is built on top of a distributed object-capability
system, which we believe provides an ideal platform for de-
veloping very high assurance devices. Our network archi-
tecture revolves around next generation networking tech-
nologies, including Mobile IPv6 and 802.11i wireless net-
working, but includes a small number of important exten-
sions to improve security, robustness and mobility in the
military context. A particular and unique contribution of
our work is the tight integration of our very strong security
architecture with next generation networking technologies.
To complete the paper we describe our reference implemen-
tation of the Annex security and networking architecture,
which consists of a number of devices known collectively as
the Annex Ensemble.
1
Introduction
There is growing momentum within the Australian De-
fence Force (ADF) and its coalition partners to develop op-
erations based on Network Centric Warfare (NCW) [2]. The
goal of NCW is to simplify and unify the mechanisms for
assured information sharing between interested parties in
order to achieve a more efﬁcient and effective ﬁghting force.
This is a particularly difﬁcult problem for military commu-
nication and information processing systems because clas-
siﬁed information at different security levels must be strictly
partitioned. This is almost universally enforced by replicat-
ing, in isolation, computing and network resources for each
security level. Clearly this does not scale and it will not al-
low the beneﬁts of NCW to be fully realised. The solution
to this problem is the holy grail of military computer secu-
rity, to develop trusted systems that are capable of enforcing
Multi Level Security (MLS) [24].
NCW will include the networking of assets such as ﬁxed
bases, mobile platforms, sensors, weapons systems and
the individual war ﬁghter into a Global Information Grid
(GIG) [1]. To be truly effective, this ubiquitous GIG will
need to be globally scalable, interoperable, reliable and se-
cure. This ambitious vision will only be fulﬁlled in concert
with the provision of a next-generation data communication
network: one that can be easily, dynamically and automat-
ically conﬁgured to provide seamless and secure network
access to forces anywhere and at any time.
The Command, Control, Communications and Intelli-
gence Division in the Defence Science and Technology Or-
ganisation is developing an experimental network, called
Annex, which aims to provide enhanced connectivity be-
tween military forces as well as seamless connectivity to
civilian entities using standard Internet Protocols. Annex
is based on IPv6 [7] with Hierarchical Mobile IPv6 exten-
sions [14, 25]. This allows for authentication and encryp-
tion using IPsec [13], provides ﬂow markers to assist in the
efﬁcient management of streaming data, and supports ad-
dressing for mobile nodes. While maintaining full back-
ward compatibility, Annex enabled systems are also en-
hanced with network awareness to improve real-time per-
formance, robustness and security of communication be-
tween Annex enabled devices.
Although we have used Commercial Off The Shelf
(COTS) technologies like those above wherever possible,
the most fundamental design and implementation rule that
we have applied during our development process is that very
strong security mechanisms must be able to protect all as-
pects of the system. We believe that without security as the
foundation, all other technology above it, no matter how so-
phisticated, is severely limited in its applicability to NCW.
Indeed, we also feel that otherwise good technologies will
eventually fail in much of the commercial marketplace if
security is not equally well addressed.
The Annex security architecture is a foundation for pro-
viding very strong security using a universal system for ac-
cess control based on capabilities [8]. Our capability sys-
tem is implemented with trusted hardware and software that
was developed entirely in-house, and together these form
our Trusted Computing Base (TCB). The TCB allows An-
nex equipment to be used by any number of mutually suspi-
cious, autonomous participants, with differing security poli-
cies and interests, facilitating secure access to and sharing
of networked resources within the GIG. The Annex secu-
rity architecture has been designed to naturally support the
principles of least authority, mutual suspicion and need to
know (see [5] for a glossary explaining terms) while allow-
ing arbitrary security policies to be speciﬁed and provably
enforced. Although minimal formal analysis has been per-
formed on our TCB to date, we recognise that this will be
essential in taking our devices beyond the proof-of-concept
stage.
Another important tool for enabling least authority is
delegation [28]. During collaboration it is often necessary
for one subject to wield part of another’s authority. This can
be achieved most easily if the second subject can delegate
the appropriate authority to the ﬁrst. In capability systems
delegation is as simple as passing on a capability.
In spite of their beneﬁts, capability systems have been
criticised for the complexity required to manage capability
distribution and revocation. Another perceived weakness of
capability systems is a perceived lack of support for manda-
tory security policies [26]. Recent research is beginning to
show, however, that these concerns may not be too burden-
some if an appropriate capability model is used [18, 20, 23].
2 The Annex Security Architecture
2.2 The Object-Capability Model
The Annex security architecture provides an NCW plat-
form that can support autonomous, mutually suspicious or-
ganisations to operate in coalition. Each organisation may
deﬁne their own security policies regarding the sharing of
resources and information, which the platform will enforce.
The semantics of the underlying security model are encap-
sulated in a few simple rules. Hence, the model and its
implementation lend themselves to formal analysis [27],
which we believe will allow Annex to provide very strong
security guarantees.
2.1 Capability Architectures
The Annex security architecture is based on a distributed
capability system. Capabilities are unforgeable, authority-
carrying references [8], although they may be copied under
certain, strictly controlled conditions. They combine into
one atomic entity the name of the object to which they refer
as well as the permission required to access that object. This
bond provides a very strong tool for avoiding the confused
deputy problem [12] because it leaves no room for ambigu-
ity about what authority is being wielded during any request
to access any resource. Capabilities also simplify the imple-
mentation of trusted systems because they unify addressing
and protection mechanisms.
Access requests in a capability system can only be au-
thorised by capability presentation. The entire authority of
a subject is deﬁned by the capabilities it possesses and the
transitive closure of what the possession of those capabili-
ties permits. Subjects have no ambient authority, so a sub-
ject’s authority can be limited by simply restricting the ca-
pabilities it holds. Therefore capabilities naturally promote
least privilege [22] and the related principle of least author-
ity [18]. The second principle is an extension of the ﬁrst and
includes causal effects that may arise from a subject exer-
cising their permissions, including collaboration with other
subjects.
The object-capability model [18] manages complexity
by providing natural support for abstractions. This allows
ﬁne-grained security policies to be speciﬁed using program-
ming abstractions that “automatically” manage complexity
in the same way that usual programming abstractions allow
the construction of very complex software. Other abstrac-
tions allow mandatory security policies to be implemented
in the object-capability model [18].
In an object-capability system capabilities address ob-
jects and allow method invocation, the only action that can
be performed. Method invocation with object-capabilities is
therefore similar to using protected procedures in CAP [29]
or Hydra [15], but it is more securable by virtue of being
the only available calling convention and also more ﬂexible
and ﬁne-grained. Abstractions are implemented by objects
whose methods expose functionality but hide implementa-
tion details, like in object-oriented programming. Abstrac-
tions may be arbitrarily composed because all object refer-
ences (capabilities) are treated in exactly the same way.
The fundamental rule of object-capability systems is that
“only connectivity begets connectivity” [17].
In practice,
this leads to a small set of rules regarding capability prop-
agation. These rules completely deﬁne the semantics of
an object-capability system and provide a sound model on
which to reason about the ﬂow of authority and information.
2.3 Annex Capabilities
The Annex security architecture uses
the object-
capability model, but where capabilities are implemented
using a password capability system [3] that has also been
extended with partitioning. Annex capabilities are therefore
stored as regular data using a password capability scheme,
but may only reside within the protective bounds of the ker-
nel. Outside of the kernel, objects reference capabilities us-
ing handles. When an object receives a new capability, for
example during a method invocation, the kernel automati-
cally replaces the capability with a per-object handle to that
capability and creates a mapping between the two. Parti-
tioning is completely transparent to objects, allowing them
to treat handles as if they were real capabilities, but allows
the enforcement of certain mandatory security properties in-
cluding conﬁnement, the simple security property and the
*-property [19] because capability propagation can be en-
forced in accordance with the rules of the object-capability
model.
Password capabilities are unforgeable because they con-
tain a long and probabilistically unguessable password.
Password capabilities also provide a universal capability
representation that works across machine boundaries, tak-
ing advantage of Annex’s network addressing architecture
(see Section 3). A single Annex capability uniquely iden-
tiﬁes a single object within the entire Annex network and
allows the holder to invoke a subset of the object’s meth-
ods. Table 1 depicts an Annex capability.
Table 1. Format of an Annex Capability
Password
DeviceID
ObjectID
CapID
64
48
16
256
The DeviceID ﬁeld uniquely identiﬁes the device on
which an addressed object resides. This ﬁeld corresponds to
the least signiﬁcant 64-bits of the device’s IPv6 address and
is known as its host identiﬁer. This information is sufﬁcient
for routing invocation requests to a target device (see Sec-
tion 3.4). The ObjectID ﬁeld uniquely identiﬁes a par-
ticular object on the target device. Each object is assigned
a device-wide unique identiﬁer. A type-marker, currently
based on a cryptographic hash of the object’s source code
implementation, is also embedded within the ObjectID
ﬁeld to ensure that any confusion regarding an object’s type
will result in an invalid object reference. The CapID ﬁeld
is an object-wide unique identiﬁer that is assigned when a
capability is created. It uniquely identiﬁes a particular ca-
pability from any other capabilities to the same object but
with different permissions.
The Password ﬁeld gives the capability its authority.
While passwords provide no extra protection in the case that
the underlying axioms of the system remain intact – the ker-
nel will already be enforcing connectivity begets connectiv-
ity – they do provide a signiﬁcant extra barrier against capa-
bility forgery on remote devices or via attacks on the kernel
itself. Hence, a capability structure without a valid pass-
word is considered invalid and presentation will not pro-
vide the holder with any information, including whether the
target object exists. Capability passwords are assigned ran-
domly from a very large space in order to ensure that guess-
ing a valid capability is infeasible.
2.3.1 Methods and Permissions
Methods are grouped into two classes. User methods must
be deﬁned separately for each object. They expose the inter-
face of the abstraction that the object implements. System
methods are inherited by all objects and provide the basic
capability operations required of all objects. These opera-
tions include the derivation [3] of less powerful capabilities
from those that are more powerful, and the destruction of
individual capabilities.
A catalogue maps valid capabilities to a pair of permis-
sion bit-vectors: (SystemPerms, UserPerms). During
compilation, individual methods are automatically mapped
to individual bits within the appropriate bit-vector. Annex
uses permissions to explicitly control the methods that may
be executed by a particular capability, rather than the stan-
dard object-capability notion of a facet [17]. This avoids the
need to instantiate multiple objects, which is advantageous
on low resource embedded devices like those used in Annex
(see Section 4).
2.4 Annex Capability Kernel
We have developed an operating system kernel that im-
plements the Annex security architecture. The kernel is
responsible for managing objects, overseeing the invoca-
tion of methods on those objects and for providing network
transparency. Because our Annex Capability Kernel runs on
trusted hardware (described in Section 4), Annex provides
a complete platform for creating secure, object-capability
based application software. Currently, however, it does
rely on a small amount of untrusted hardware and software
to provide network transport and untrusted user interaction
services – but we are already working on extensions to our
system to remove these limitations. In the mean time, our
ﬁrst generation Annex Kernels reside on secure PCMCIA
cards that are hosted on untrusted commodity computers,
such as COTS servers or hand-held PDAs.
The untrusted host may make method calls on objects
to which it holds capabilities; however, the host only ever
holds very weak capabilities and never holds capabilities
to remote objects. The method calls available to the host
mirror the user interface provided to the user, enabling un-
trusted user interaction via the untrusted host. The host is
also responsible for forwarding remote method invocations
over the Annex network. In this case, all remote invocations
are encrypted so that only the remote destination kernel can
read their contents, limiting the possible attacks available
to the surrogate host or intermediate network to Denial of
Service (DoS) and trafﬁc analysis.
As shown in Figure 1 the kernel consists of four key
components, along with a small set of trusted objects to ex-
pose core kernel functionality and hardware abstractions.
The arrows in the diagram indicate that trusted applications