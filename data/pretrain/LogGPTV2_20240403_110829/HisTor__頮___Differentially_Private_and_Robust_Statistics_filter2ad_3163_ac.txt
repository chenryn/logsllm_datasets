i.e.,
wj = Uj − Lj. We do not require that ∀x, y ∈ [1, b], wx = wy,
but we denote this special case as equal width bins.
Fig. 3. Maintaining an oblivious class counter. Top: The counters (b = 5) are
initialized to GM-encryptions of 0. Middle: An event corresponding to class
C3 is observed, and E+(v3) is replaced with E+(1). Bottom: The resulting
encrypted binary vector.
we say that the event has been observed by the DC; otherwise
vj = 0 indicates that the event was not witnessed.
At the beginning of each epoch, each DC zeroes its vector
e
v by GM encrypting the bit 0, b times. Since the GM
cryptosystem is a probablistic cryptosystem [16], we have
that ∀x, y ∈ [1, b], x (cid:54)= y ⇒ E+(vx) (cid:54)= E+(vy) with high
probability. That is, without knowledge of the corresponding
private key, GM encryption guarantees that an adversary can-
not determine whether vx
?= vy when x (cid:54)= y.
When a DC observes an event corresponding to a class
label Cj, it replaces the value of E+(vj) in e
v with a new GM
encryption of the bit 1. Note that if vj was already 1, then
the operation effectively replaces the old encryption of 1 with
a new encryption of 1. This process is depicted in Figure 3.
Crucially, DCs do not store the plaintext vector elements
v1, . . . , vb, and instead maintain only the encrypted binary
values E+(v1), . . . , E+(vb). Since the DCs also do not have
the private key for decrypting the elements of e
v, it trivially
holds that an honest DC that does not know either vj or the
mix’s private key cannot provide vj to an adversary. That is, the
As explained below, our oblivious histogram counter
scheme requires equal width bins. Since we do not require
that wx = wy for all x, y ∈ [1, b]—that is, the histogram
query need not use equal width bins—we use an auxiliary
binary vector with equal width bins, where the bin width
is set to the greatest common divisor (GCD) of w1, . . . , wb.
ν = (cid:104)E+(ν1), . . . , E+(νβ)(cid:105), where
More formally, we deﬁne e
each element νj covers the range [(j − 1)g, jg) and g is the
GCD of w1, . . . , wb. As a special case, νβ covers the range
[(β−1)g,∞). In practice, to reduce the size of e
ν, we carefully
choose bin widths such that β < 15000. In the special case
that the histogram query species equal width bins, we have
that b = β and e
v =
e
ν.
At the beginning of each epoch, each DC initializes its
ν = (cid:104)E+(1), E+(0), . . . , E+(0)(cid:105) (all but
encrypted vector as e
the ﬁrst element are encryptions of 0). It also maintains a
counter t, initialized to 0.
When the DC observes the statistic of interest (number of
connections, a KB of consumed bandwidth5, etc.), it executes
the IncrHistCounter procedure.
The IncrHistCounter procedure works by shifting the posi-
ν vector whenever the counter
tion of the encrypted 1 in the e
5IncrHistCounter can be easily adapted for statistics that
increase in
increments greater than 1 (e.g., observed bandwidth). In particular, if k is
ν is right shifted (cid:98)(t + k)/g(cid:99) positions and
the increase in the statistic, then e
t is reset to (t + k) mod g.
6
Mix1Mix2Mix3DCsMix 2Mix 3Mix 1DecryptAdd NoiseShuffle+12n::DC1:DC2:DCc:::::Column-wiseColumn-wiseMix1Mix2Mix3Mix1Mix2Mix3Mix1Mix2Mix3Mix1Mix2Mix3AnalystAggregate0V5V1V2V3V4100000000000100(cid:77)
v. For example,
single E+(vk) ∈ e
in Figure 4, we have
E+(ν1) (cid:55)→ E+(v1), E+(ν2) (cid:55)→ E+(v1), E+(ν3) (cid:55)→ E+(v2),
E+(ν4) (cid:55)→ E+(v3), E+(ν5) (cid:55)→ E+(v4), E+(ν6) (cid:55)→ E+(v4),
and E+(ν7) (cid:55)→ E+(v5), where (cid:55)→ signiﬁes the mapping be-
v. Let M(vk,
e
tween e
ν) denote the set of elements of
ν that map to a given vk ∈ e
v. We can therefore compute
ν and e
e
E+(vk) =
E+(νj)
(3)
E+(νj )∈M(vk,
e
ν)
Eq. 3 holds since at most at one element in M(vk,
and GM is homomorphic with respect to xor (⊕).
e
ν) is 1
VI. ROBUST DIFFERENTIAL PRIVACY
In this section, we describe how the DCs, mixes, and
analyst interoperate to provide robust differential privacy. We
explain how each DC tallies the statistic of interest using
oblivious counters, and present the details of our HisTor
protocol for aggregating these statistics into a differentially
private aggregate.
Let Mix1, Mix2, and Mix3 be the three mixes. Mix1 is
referred as the master mix and the other two mixes (Mix2 and
Mix3) are referred to as the slave mixes. All communication
is assumed to be through secure TLS channels. The process
of aggregating the individual DC counters is as follows:
Parameter initialization. At the beginning of every epoch,
Mix1 generates ﬁve cryptographically secure random seeds: the
common shufﬂing seed s, the common random vector seeds p
and q, and the pairwise mix seeds x2 and x3. It transmits
(cid:104)x3, p, q, s(cid:105) to Mix2 and (cid:104)x2, p, q, s(cid:105) to Mix3. Then, Mix2
generates a cryptographically secure random pairwise mix seed
x1 and transmits (cid:104)x1(cid:105) to Mix3.
Query initialization.
The analyst formulates a query, and
transmits it to the master mix. It speciﬁes the privacy parameter
 and,
in the case of a histogram query, a set of b bins
(cid:104)[L1, U1), . . . , [Lb, Ub)(cid:105). We discuss the practical aspects of
selecting an appropriate value for  in §XI.
Query forwarding.
The analyst then transmits the query to
the master mix Mix1, which in turn forwards the query to the
DCs. The master mix maintains a list, Lc, of the DCs that
acknowledged the request.
DC statistics gathering and response.
For each query, each
data collector D collects statistics during the course of the
epoch using three sets of oblivious counters (see §V). There
is one set of oblivious counters for each of the three mixes.
the conclusion of the epoch,
the DC performs the
At
following operations:
e
(i) D maintains a series of encrypted oblivious counters
vi = (cid:104)E+(vi,1), . . . , E+(vi,b)(cid:105) for 1 ≤ i ≤ 3, where each
element of e
vi is encrypted with Mixi’s GM public key.
To ease notation, we refer to the non-encrypted bit vector
vi,1, . . . , vi,b as M.
(ii) D chooses b-bit random binary vectors R, R1, R2, R3 ∈r
{0, 1}b, where ∈r denotes uniformly random selection.
(iii) D computes R(cid:48)
i = R ⊕ Ri, 1 ≤ i ≤ 3.
Fig. 4. Maintaining an oblivious histogram counter. Top: The analyst deﬁnes
v. The GCD (g) is 3. Second from top: The initialization of e
bin widths for e
ν.
Second from bottom: After three observations (t = 3), the bins in e
ν are right
ν are mapped to e
shifted. Bottom: At the end of the epoch, the values of e
v.
1 t ← t + 1
2 if t = g
3 then
4
5
6
7
8
9 end
e
ν (cid:29) 1
tmp ← E+(νβ−1) ⊕ E+(νβ)
ν ← e
E+(νβ) ← tmp
E+(ν1) ← E+(0)
t ← 0
// g is GCD and bin width
// Right shift, no wrap
// GM is xor homomorphic
Procedure IncrHistCounter
reaches the bin width. Line 6 handles the special “overﬂow”
case: when the last bin is set to a 1, it always retains that 1
(recall that the last bin represents the range [(β− 1)g,∞)). An
example invocation of IncrHistCounter is shown in Figure 4.
Since an honest DC does not maintain the plaintext values
of ν1, . . . , νβ and does not know the decryption key, it cannot
reveal which bin contains the 1, even if compelled to do
so. Importantly, unlike oblivious class counters, oblivious
histogram counters leak information—in particular, the counter
t. More formally, we leak (cid:98)log2 g(cid:99) + 1 least signiﬁcant bits
vi∈v vi · Li) + t, when a
compulsion attack takes place (since t ∈ [0, g)).
of the DC’s measured value, ((cid:80)
At the end of the epoch, the encrypted values of e
to be mapped back to e
covered by e
ered by e
v,
ν need
v. Since the width of the ranges
ν are deﬁned by the GCD of the ranges cov-
it holds that each E+(νj) ∈ e
ν maps to a
7
[0,6)10[6,9)0[9,12)0[12,18)0[18,∞)t = 01[0,3)0[3,6)0[6,9)0[9,12)0[12,15)0[15,18)0[18,∞)Initialization of auxiliary vector t = 1t = 2t = 3t = 0t = 01[3,6)0[0,3)0[6,9)0[9,12)0[12,15)0[15,18)0[18,∞)Right shiftw5 = ∞w4 = 6w3 = 3w2 = 3w1 = 60[0,6)0[6,9)0[9,12)0[12,18)0[18,∞)Invocation of IncrHistCounter()Mapping tovector vInitialization of vector v0 ⊕ 67 = 0e
(iv) D encrypts the bits of R with Mixi’s GM public key
vi to obtain
(v) Finally, D sends
and multiplies them individually with bits of e
pi = (cid:104)pi,1, . . . , pi,b(cid:105) for 1 ≤ i ≤ 3.
(cid:104) e
p1, R(cid:48)
(cid:104) e
p3, R1, R2, R(cid:48)
Note that e
the
3(cid:105) to Mix3.
1, R2, R3(cid:105) to Mix1, (cid:104) e
four-tuple
p2, R1, R(cid:48)
pi is the GM encryption of the DC response M
xor’ed with R, as GM is a homomorphic encryption scheme.
Also, R is computed such that R = R1 ⊕ R(cid:48)
2 =
R3 ⊕ R(cid:48)
3. Crucially, each Mixi receives an encrypted copy
of M ⊕ R, but does not have enough information to unmask
(decrypt) M.
1 = R2 ⊕ R(cid:48)
of
ciphertext
2, R3(cid:105) to Mix2 and
In summary, during this phase, each DC xor-encrypts its
oblivious counters with a random value, and transmits that
ciphertext plus shares of the xor’d random value to each of
the mixes.
Mix noise addition and forwarding.
Each mix on receiving
the four-tuple ciphertext CT = (cid:104)C1, C2, C3, C4(cid:105) from a DC
(see step (v) above), checks the legitimacy of C1. A legitimate
GM encrypted value must have its Jacobi symbol equal to ‘+1’,
so a mix can easily and efﬁciently detect malformed responses.
If the DC’s response is not
legitimate, a mix discards it.
Otherwise, it decrypts C1 using its GM private key and obtains
the DC response M masked with R. The three mixes then
synchronize the list of DCs that have responded. The master
mix removes DCs that are not in list Lc. Let the total number of
common DCs that have responded be c. To preserve the privacy
of the DCs, the mixes collaboratively add n noisy four-tuples,
where n is derived using Eq. 1 (where, δ = 10−6/c).
In order to make a noisy tuple and the DC responses
indistinguishable, mixes use an efﬁcient xor encryption:
Mix 1:
(i) Chooses random b-bit binary strings P using seed p, Q
using seed q, R2 using pairwise common seed x2 and R3
using pairwise common seed x3.
1 = P ⊕ R2 ⊕ R3.
(ii) Computes R(cid:48)
Mix 2:
(i) Chooses random b-bit binary strings P using seed p, Q
using seed q, R1 using pairwise common seed x1 and R3
using pairwise common seed x3.
2 = P ⊕ R1 ⊕ R3.
(ii) Computes R(cid:48)
Mix 3:
(i) Chooses random b-bit binary strings P using seed p, Q
using seed q, R1 using pairwise common seed x1 and R2
using pairwise common seed x2.
3 = P ⊕ R1 ⊕ R2.
(ii) Computes R(cid:48)
Now, Q is indistinguishable from decrypted C1, as Q is of
the form M ⊕ R for some random M and R = P ⊕ R1 ⊕
R2 ⊕ R3. Note that, each mix exactly knows only two of the
three random vectors R1,R2 and R3. Therefore, each mix
does not know R and hence, the noise that is being added. In
other words, mixes add noise, but do not know the values of
the noise that they contribute.
Each mix repeats steps (i) and (ii) until all n noisy tuples
are generated. Each mix Mixi then arranges the c DC four-
tuples and the n noisy four-tuples, row-wise into four matrices
(cid:104)Mi,1, Mi,2, Mi,3, Mi,4(cid:105). Let Mi = (cid:104)Mi,1, Mi,2, Mi,3, Mi,4(cid:105),
1 ≤ i ≤ 3. The mixes then shufﬂe the columns of each matrix
in Mi independently, using common shufﬂing seed s. This
shufﬂing prevents a DC from being identiﬁed, and eliminates
a potential covert channel. Finally, each Mixi forwards Mi to
the analyst. The master mix in addition forwards the list Lc
of DCs that had taken part.
Aggregate
calculation.
=
(cid:104)Mi,1, Mi,2, Mi,3, Mi,4(cid:105), 1 ≤ i ≤ 3,
the analyst ﬁrst
checks whether the mixes have tampered any DC responses
by verifying if:
receiving Mi
Upon
M1,1