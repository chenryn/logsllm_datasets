title:JStap: a static pre-filter for malicious JavaScript detection
author:Aurore Fass and
Michael Backes and
Ben Stock
JStap: A Static Pre-Filter for Malicious
JavaScript Detection
Aurore Fass, Michael Backes, and Ben Stock
CISPA Helmholtz Center for Information Security
{aurore.fass,backes,stock}@cispa.saarland
ABSTRACT
Given the success of the Web platform, attackers have abused its
main programming language, namely JavaScript, to mount differ-
ent types of attacks on their victims. Due to the large volume of
such malicious scripts, detection systems rely on static analyses
to quickly process the vast majority of samples. These static ap-
proaches are not infallible though and lead to misclassifications.
Also, they lack semantic information to go beyond purely syntac-
tic approaches. In this paper, we propose JStap, a modular static
JavaScript detection system, which extends the detection capabil-
ity of existing lexical and AST-based pipelines by also leveraging
control and data flow information. Our detector is composed of ten
modules, including five different ways of abstracting code, with
differing levels of context and semantic information, and two ways
of extracting features. Based on the frequency of these specific
patterns, we train a random forest classifier for each module. In
practice, JStap outperforms existing systems, which we reimple-
mented and tested on our dataset totaling over 270,000 samples. To
improve the detection, we also combine the predictions of several
modules. A first layer of unanimous voting classifies 93% of our
dataset with an accuracy of 99.73%, while a second layer–based on
an alternative modules’ combination–labels another 6.5% of our
initial dataset with an accuracy over 99%. This way, JStap can be
used as a precise pre-filter, meaning that it would only need to
forward less than 1% of samples to additional analyses. For repro-
ducibility and direct deployability of our modules, we make our
system publicly available.1
CCS CONCEPTS
• Security and privacy → Web application security; Malware and
its mitigation.
KEYWORDS
Web Security, Malicious JavaScript, Data-Flow, Control-Flow, AST
ACM Reference Format:
Aurore Fass, Michael Backes, and Ben Stock. 2019. JStap: A Static Pre-
Filter for Malicious JavaScript Detection. In 2019 Annual Computer Security
1https://github.com/Aurore54F/JStap
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359813
Applications Conference (ACSAC ’19), December 9–13, 2019, San Juan, PR, USA.
ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3359789.3359813
1 INTRODUCTION
The Web has become the most popular software platform, used
by billions of people every day. Given its popularity, it naturally
attracts the interest of malicious actors, which try to leverage the
Web as a vector for attacking their victim’s computer. Specifically,
attackers abuse JavaScript to exploit bugs in the browser, probe
systems for vulnerabilities before injecting malicious content [9, 24],
e.g., targeting Flash plugins, or mine cryptocurrencies without
user’s consent [33]. Due to this plethora of attacks, the antivirus
industry has increased the focus on the detection of such nefarious
scripts. As a response, attackers use obfuscation techniques [56],
which foils techniques directly relying on content matching (e.g.,
traditional antivirus signatures) and imposes additional hurdles to
manual analysis. Nevertheless, abstracting the code on a lexical
(e.g., keywords, identifiers) or syntactic level (e.g., statement or
expression nodes extracted from the AST (Abstract Syntax Tree))
enables to collect specific and recurrent features, either typical of
malicious or of benign intent. This way, machine learning-based
detectors can leverage such static features for an accurate malicious
JavaScript detection [12, 17, 45].
Due to their speed and accuracy, static systems are particularly
relevant to quickly discard benign samples, leaving only those few
which are likely malicious for costly manual analysis or dynamic
components [9]; at the same, this implies that they must be accurate
to neither waste expensive resources nor let malicious files through.
Such static approaches are not infallible though. In particular, dif-
ferent lexical and AST-based detectors tend to yield (different) false
negatives and false positives [12, 17, 45]. At the same time, such
static systems merely consider the syntax of the analyzed files, i.e.,
how the lexical units (tokens) are arranged, or traverse the AST to
extract syntactic units. However, they do not retain semantic infor-
mation, such as control or data flow. This means that while they
take the syntactic order of code into account, they do not leverage
the semantic order of the code’s logic.
In this paper, we extend the detection capability of existing lex-
ical and AST-based pipelines to pre-filter JavaScript samples, by
augmenting such approaches with control and data flow informa-
tion. This way, we have a higher overall detection rate than existing
systems, while also limiting the number of samples forwarded to
more costly analyses. To this end and contrary to purely lexical and
syntactic systems, we also consider semantic information in our
abstract code representations, by means of control and data flow.
In particular, the Control Flow Graph (CFG) takes into account the
flow of control between statements. Besides flow of control, the
PDG (Program Dependency Graph) also considers the dependencies
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Fass et al.
between statements, meaning that, e.g., dead-code would not be
linked to the actual functionality of the programs by such flows.
On the contrary, ASTs and lexical units mainly represent the arbi-
trary sequencing choices made by the programmers. Specifically,
we present JStap, a modular JavaScript static classification system
for which the user can choose the level of the analysis, namely
lexical, AST, CFG, PDG with data flow only and PDG with data
and control flow. Similarly, the user may also choose to combine
several schemes. For a better overall detection accuracy and to limit
the number of features overlapping between the different compo-
nents, JStap can either analyze these features using an n-gram
approach or combine them with variable’s name information. We
refer to the resulting combinations of these two ways of analyzing
features extracted from one of the five considered code represen-
tations as ten different modules. Due to the static character and
high detection accuracy of each of JStap’s module separately, we
envision that combining several modules–with different code rep-
resentations, with more or less semantic information–can be used
as a pre-filtering step, sending only samples with conflicting labels
to further analysis. This way, JStap can help avoid unnecessary
invocation of costly dynamic analyses.
Our implementation responds to the following challenges: re-
silience to common obfuscation transformations, practical applica-
bility and high accuracy in terms of JavaScript classification, and
robustness against malware attempting to evade detection. We ad-
dress these challenges by proposing a methodology to build and
traverse the AST, CFG, and PDG before extracting and leveraging
specific features from these graphs, also considering lexical units,
for an effective and reliable malicious JavaScript detection. The key
elements of JStap are the following:
- Fully Static JavaScript Analysis — Besides extracting lexical units,
our system also leverages the AST produced by Esprima [23] to
build a CFG and a PDG, also representing the control and/or data
flow between the nodes.
- Features Extraction — We traverse the previous static structures,
extracting and combining tokens’ or nodes’ information before
selecting features typical of benign or malicious samples.
- Accurate JavaScript Classification — JStap considers the frequency
of the features previously extracted to build a random forest model
and accurately classify unknown JavaScript samples.
We evaluate our system on an extensive dataset totaling over
270,000 samples, including over 130,000 unique malicious JavaScript
samples and over 140,000 unique benign scripts. We focus on the
true-positive and true-negative rates of each JStap module sepa-
rately, the best one having a detection rate of 99.44%, which is sig-
nificantly higher than closely related work implementations, which
we trained and tested on our dataset. To make even more accurate
predictions, we envision that a combination of JStap modules could
be used as a pre-filtering step, before sending only samples with
conflicting labels to more costly dynamic components or manual
analysis. In this configuration, we have a detection accuracy of
99.73% on 93% of our dataset, for which the selected modules can
make a unanimous decision. For the remaining 7% of the samples,
we can classify them with a second layer of unanimous voting, from
different modules, and with an accuracy still over 99%; meaning that
less than 1% of our initial dataset is sent to more costly analyses.
Figure 1: Architecture of JStap with focus on one module
For reproducibility and direct deployability of our modules, we
make our system publicly available. Specifically, we release as open-
source software our code to a) build the different data structures
we used (e.g., CFG, PDG), b) train a random forest classifier on
JavaScript samples (including the features selection process with χ2)
and c) classify (unknown) JavaScript inputs. More details can be
found at https://github.com/Aurore54F/JStap.
2 METHODOLOGY
JStap is composed of several modules, which can run independently
or combined, to accurately detect malicious JavaScript inputs. The
architecture of each module consists of an abstract code repre-
sentation (stage 1 of Figure 1), a feature-extractor (stage 2) and
learning components (stage 3). First, we perform a static analysis
of JavaScript samples, leveraging the Abstract Syntax Tree (AST)
to build the Control Flow Graph (CFG) and Program Dependency
Graph (PDG). Then, we traverse the graphs by following the control
and/or data flow to extract syntactic units, whose combination still
carries the initial control or data flow semantics. We also consider
lexical units and syntactic units extracted from the AST to extend
our approach with node context information, since control and data
flow only link statement nodes together. In particular, we combine
the previous units by groups of n, to build n-gram features. At
the same time, and independently of the prior approach, we also
combine the previous units with variable’s name information. In
both cases, we use the frequency of the extracted features as input
to learning components, which distinguish benign from malicious
JavaScript samples. In the following sections, we discuss the details
of each stage in turn.
2.1 Abstract Code Representations
The choice of a static analysis to detect malicious JavaScript in-
stances is motivated by its speed, reliability, and code coverage.
In particular, we can leverage different levels of code abstraction,
with more or less semantic information, to identify recurrent pro-
grammatic and structural constructs specific to malicious or benign
reports. In particular, a lexical analysis directly processes the code,
one word after the other. On the contrary, an AST-based analysis
takes into account the grammar, thereby the syntactic structure of
the program. As for the CFG, it adds some semantic information to
the analysis, as it takes into account the conditions that have to be
met for a specific program’s path to be taken. Finally, the PDG adds
more semantics by also considering the order in which statements
have to be executed. This way, each code representation processes
JStap: A Static Pre-Filter for Malicious JavaScript Detection
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Table 1: Lexical units extracted from the code of Listing 1
Token
Identifier
Punctuator
Keyword
Punctuator
Numeric
Punctuator
Keyword
Identifier
Punctuator
Value
x
.
if
=
1
;
var
y
=
Token
Numeric
Punctuator
Keyword
Punctuator
Identifier
Punctuator
Keyword
Punctuator
Numeric
Value
1
;
if
(
x
.
if
==
1
Token
Punctuator
Punctuator
Identifier
Punctuator
Identifier
Punctuator
Punctuator
Value
)
{
d
=
y
;
}
JavaScript at a different static level. Thereby, they can be combined
to represent the different code’s properties more accurately.
2.1.1 Lexical Units Extraction. First, we perform a lexical analysis
of JavaScript with the tokenizer Esprima [23], which builds an
abstract representation of the code. This way, the source code is
linearly converted into a list of abstract symbols representing lexical
units (e.g., Keyword, Identifier). Still, this technique uses neither
the context in which a given word appears nor the overall syntactic