j respectively (i.e. vj := H(vl
j, vr
The label at the root of a Merkle tree M is denoted by root(M ). For eﬃciently proving that
an element xi is included in the Merkle tree (given by its root hash h), we use a Merkle proof ρ,
which is a vector (of length log2(n)) consisting of labels on all the siblings of elements on a path
from the ith leaf to the root of the Merkle tree. We denote the algorithm for generating a Merkle
6
Algorithm 1 Merkle tree hash Mtree
Input: (x1, . . . , xn)
set V
if n = 1 then
label (V ) = x1
else
vl
0 = Mtree(x1, . . . , x(cid:100)n/2(cid:101))
vr
0 = Mtree(x(cid:100)n/2(cid:101)+1, . . . , xn)
0)||root(vr
label (V ) = H(root(vl
0 ))
Output: Merkle tree M with root V
(cid:46) V will be the root node
(cid:46) If input is single value, V is a leaf
(cid:46) assign label of leaf V as x1
(cid:46) otherwise recursively call Mtree algorithm again
(cid:46) label = hash of subtree
proof by Mproof , which on input a Merkle tree M and an index i outputs a Merkle proof ρ that xi
is the ith leaf of M (c.f. Algorithm 2).
Algorithm 2 Merkle tree proof Mproof
Input: Merkle tree M , index i
V = M [i]
for each j ∈ [log2(n)] do
set lj = label (sibling of v)
set v = parent of v
Output: Merkle Proof ρ = (l1, . . . , ld)
(cid:46) let V be the i-th leaf node of M
Finally, the algorithm Mvrfy takes as input an element xi, a Merkle proof ρ and a root of a
Merkle tree root(M ). The algorithm Mvrfy veriﬁes if the i-th leaf element x corresponds to a
Merkle tree with root r using proof ρ (generated with Algorithm 3). If the veriﬁcation holds, the
algorithm outputs 1 if the veriﬁcation fails, the algorithm outputs 0. If the root r of the tree is
Algorithm 3 Merkle tree proof veriﬁcation Mvrfy
Input: i ∈ [n], x ∈ {0, 1}λ, ρ = (l1, . . . , ld), h ∈ {0, 1}µ
if i/2j = 0 mod 2 then
for each lj ∈ ρ do
x = H(lk||x)
if H(isPrgrmd(lk||x) then
Terminate and Output ⊥
else
x = H(x||lj)
if H(isPrgrmd(x||lj)) then
Terminate and Output ⊥
(cid:46) reject hash is programmed
(cid:46) reject hash is programmed
if x = h then
Output 1
else
Output 0
known beforehand, this algorithm can be used to verify that x is the i-th element of a Merkle Tree
with root r.
7
In this work we will use circuits to model arbitrary program code over an admissible
Circuits.
instruction set Γ. A circuit φ is represented by a directed acyclic graph, where the edges carry values
from some set X and the nodes represent gates. We assume that gates evaluate some instruction
op : X (cid:96) → X, where op ∈ Γ. A gate is evaluated by taking as input up to (cid:96) values from X,
carrying out the instruction op and sending the result on its outgoing wire. We limit fan-in of gates
to (cid:96) and model arbitrary fan-out by letting the output of a gate be an input to any number of
other gates. A special type of gate that we consider are input gates, which have no incoming edges
(i.e., in-degree 0) and model the initial input of the circuit. We will often use the notation φ(x)
to represent the output of evaluating a circuit φ on some input x, where the evaluation is done
layer-by-layer starting with the input gates.
Our construction requires a concise way to fully describe the topology and the operations of a
circuit φ. To this end, we assign to each gate g of φ a label represented by a tuple φi := (i, op, Ii).
Each such tuple consists of an instruction op : X (cid:96) → X, which denotes the instruction carried out
by this gate and a unique identiﬁer i ∈ N. The identiﬁers are chosen in the following way: All gates
in the jth layer of the circuit have identiﬁers that are larger than the identiﬁers used by gates in
layer j − 1. This means that the identiﬁer of g is larger than the identiﬁers of all input gates to
g. Finally, the last element Ii is a set of identiﬁers, where Ii = ∅ if g is an input gate; otherwise Ii
is deﬁned to be the set of identiﬁers of the input gates to g. In the following, we will often abuse
notation and sometimes use φ to present the circuit (e.g., when writing φ(x) for the evaluation of
φ on input x), or to represent the tuple of labels, i.e., φ = (φ1, . . . , φm).
It is well known that any deterministic program can be represented by a Boolean circuit. In
this case, we have X = {0, 1} and Γ = {AND, NOT} are the standard binary operations, where
each gate has an in-degree of at most (cid:96) = 2. For the purpose of this paper Γ will typically contain
more powerful operations that compute on larger bit strings {0, 1}λ. Examples of such higher-level
instructions are hash function evaluations or modulo multiplication. This models more closely
the capabilities that are oﬀered by higher-level programming languages such as Solidity oﬀered by
Ethereum.
Smart Contracts. Besides normal payments between users many cryptocurrencies support the
execution of smart contracts. Smart contracts bind money transfer to program code, and thereby
allow to execute transactions based on complex contractual agreements enforced by the miners of
the cryptocurrency. The most prominent system that supports expressive smart contracts is the
cryptocurrency Ethereum. In Ethereum smart contracts can be written in a script language (e.g.,
Solidity), which is then complied down to low-level Ethereum Virtual Machine (EVM) bytecode.
Once a contract is deployed its execution can be triggered via transactions, which are processed by
the miners. Miners are incentivized to process transactions and execute smart contracts through
transaction fees. In Ethereum these fees are paid in gas – an internal Ethereum currency – and the
value of these fees depends on the complexity of the program code, which is executed by processing
the transaction. Each EVM instruction has a ﬁxed amount of gas assigned to it, but the exchange
rate between Ether – Ethereum’s currency – and gas may change depending on market demand.
For instance, the evaluation of a standard hash function is ﬁxed to cost 27265 gas, which with the
current exchange rate translates to 0.06 USD. Of course, diﬀerent currencies like Ethereum Classic
may have much cheaper costs for executing smart contracts depending on their current exchange
rate.
8
3 Our security model
In this section we give an introduction to the adversarial model and an overview of our system.
We start with a high-level introduction to the Universally Composable (UC) framework [16] and
show how to model a global ledger functionality L. Next, we present the ideal functionality F L
for coin-aided fair exchange and discuss its security guarantees.
cfe
3.1 UC model for blockchain-based protocols
One of the most widely used methods to describe and analyze complex cryptographic protocols is
the universal composability (UC) framework of Canetti [16]. In the UC framework the security
of a cryptographic protocol Π is analyzed by comparing its real world execution with an idealized
protocol running in an ideal world.
In the real world Π is executed amongst a set of parties
modeled as interactive poly-time Turing machines. A protocol is attacked by an adversary A, who
can corrupt some of these parties (for simplicity we consider static corruption), which means that
these parties – including their internal state and all their actions – are fully controlled by A. To
analyze the security of Π in the real world, we “compare” its execution with an ideal world. In the
ideal world, parties interact with an ideal functionality, which speciﬁes the protocol’s interface and
can be viewed as an abstract speciﬁcation of what security properties Π shall achieve. In the ideal
world, the ideal functionality can be “attacked” through its interface by an ideal world adversary
– often called the simulator Sim. In both the real and ideal world there is an additional special
party called the environment Z, which orchestrates both worlds by providing the inputs for all
parties, and receiving their outputs. Informally speaking, a protocol Π is said to be UC-secure if
the environment Z cannot distinguish whether it is interacting with the ideal or real world. This
implies that Π is at least as secure as the ideal functionality.
Hybrid world. A common method that is used in UC to modularize the design of a protocol is
to rely on hybrid ideal functionalities. To this end, we deﬁne a hybrid world where the protocol
has access to some set of idealized functionalities G1, . . . ,Gm. In our case, we will construct our
fair exchange protocol in a hybrid world where an idealized functionality realizing a judge smart
contract is available. We will explain this contract in more detail in Section 4.
The ledger functionality.
In addition to the traditional UC model described above, our set-
ting requires us to handle coins that can be transferred between parties. To this end we use the
model of [20], which introduces a simple ledger functionality L to model the basic properties of
a cryptocurrency. Concretely, we allow parties to transfer coins between each other and support
contracts that lock coins. Since the ledger functionality is available both in the real and ideal
world, and moreover can be used over multiple protocol executions, we model L as a global ideal
functionality [17, 14].
Let us brieﬂy describe the functionality L (cf. Figure 1), whose internal state is public and
consists of the balances pi ∈ N of parties Pi and a list of contracts. For the latter, we deﬁne a
partial function L : {0, 1}∗ → N that maps a contract identiﬁer id to an amount of coins that is
locked for the execution of contract id . The ledger functionality oﬀers the following interface to
the parties. The environment Z can update the account balance of the users via sending an update
message to L. The parties P1, . . . ,Pn cannot directly interact with L, but their balance can be
updated via freeze/unfreeze messages sent by other ideal functionalities, in which case we will write
9
Functionality L, running with a set of parties P1, . . . ,Pn stores the balance pi ∈ N for every
party Pi, i ∈ [n] and a partial function L for frozen cash. It accepts queries of the following
types:
Update Funds Upon receiving message (update,Pi, p) with p ≥ 0 from Z set pi = p and
send (updated ,Pi, p) to every entity.
Freeze Funds Upon receiving message (freeze, id ,Pi, p) from an ideal functionality of ses-
sion id check if pi > p. If this is not the case, reply with (nofunds,Pi, p). Otherwise
set pi = pi − p, store (id, p) in L and send (frozen, id ,Pi, p) to every entity.
Unfreeze Funds Upon receiving message (unfreeze, id ,Pj, p) from an ideal functionality
of session id , check if (id, p(cid:48)) ∈ L with p(cid:48) ≥ p. If this check holds update (id, p(cid:48)) to
(id, p(cid:48) − p), set pj = pj + p and send (unfrozen, id ,Pj, p) to every entity.
Figure 1: Global ledger functionality L
GL. More precisely, freeze transfers money from the balance of a party to a contract, while unfreeze
sends this money back to the user’s account. To simplify exposition, for a malicious party Pi we let
the simulator Sim decide how many coins are sent back to Pi’s account by an unfreeze message.2
In addition to the global ledger functionality L, we will also use a
Global random oracles.
global random oracle H. Concretely, we will follow the recent formalism of [14] and model hash
functions as programmable and observable random oracles. Upon querying the oracle on some value
q it returns a random response r ∈ {0, 1}µ. If the same value is queried twice then for both queries
H returns the same response. In addition, we require that H has an interface for observing the all
input/output tuples, for which queries have been made to H, and an interface for programming
the H. For further details on the global random oracle model and the formalism of [14] we refer
the reader to Appendix A.
Communication model. We assume a synchronous communication model, where the protocol
is executed in rounds and all parties are always aware of the current round. Formally, this can
be modeled by a global clock functionality [27, 29, 6], but we omit the details here. We make
the following assumptions for the time it takes for parties to communicate with each other. If a
party (including the adversary) sends a message to another party in round i, then it is received by
that party at the beginning of round i + 1. For communication with the ideal functionalities, we
will explicitly specify when they are expecting inputs from the parties. The communication itself
however is instantaneous. Notice that in general when there is interaction with the ledger L or with
the smart contract, then the functionality will be prepared for this by expecting a message within
a certain round. We emphasize that this is only an abstraction and round times can be very large,
since in reality they correspond to communication with the blockchain which takes signiﬁcantly
2Looking ahead this is needed to simulate the case when a malicious party in the real world decides to request a
refund and thus lock its coins in the contract. To simplify the functionalities, coins are unlocked automatically in the
ideal world.
10
The ideal functionality F L
cfe (in session id ) interacts with a receiver R, a sender S, the ideal
adversary Sim and the global ledger L.
Initialize
(Round 1) Upon receiving (sell , id , φ, p, x) with p ∈ N from S, leak (sell , id , φ, p,S) to
Sim, store witness x, circuit φ and price p.
(Round 2) Upon receiving (buy, id , φ, p) from receiver R in the next round,
leak
(buy, id ,R) to Sim and send (freeze, id ,R, p) to L. If L responds with (frozen, id ,R, p)
go to Reveal phase.
Reveal
(Round 3) Upon receiving (abort, id ) from the corrupted sender S∗ in round 3, send
(unfreeze, id , p,R) to L in the next round and terminate. Otherwise if you do not
receive such message in round 3, then send (bought, id , x) to R and go to Payout
phase.
Payout
(Round 4) Upon receiving (abort, id ) from the corrupted receiver R∗, wait until round 5
to send (sold , id ) to S, (unfreeze, id , p,S) to L and terminate. Otherwise, if no such
message was received:
• If φ(x) = 1, send messages (unfreeze, id , p,S) to L and (sold , id ) to S,
• If φ(x) (cid:54)= 1, send messages (unfreeze, id , p,R) to L and (not sold , id ) to S.
Figure 2: Ideal functionality F L
cfe for coin aided fair exchange
more time than interaction between parties.
Simpliﬁcations in comparison to full UC To simplify our presentation, we omit session
identiﬁers and the sub-session identiﬁers (typically denoted with sid and ssid ) and use instead
the contract identiﬁer id to uniquely distinguish sessions. In practice, the contract identiﬁer may
correspond to the contract address.
3.2 Ideal functionality for fair exchange
Our ideal functionality F L
cfe (cf. Figure 2) describes a setting where S sells a witness x to a receiver
R and obtains p coins if this witness was correct. Correctness of the witness is deﬁned through
a predicate function φ, which for a valid input x outputs 1, and 0 otherwise. Internally, F L
cfe will
interact with the global ledger functionality L to maintain the balance of the parties during the
fair exchange (for instance, when a witness was successfully sold then p coins are unfrozen in S’s
favor).
cfe has three phases, which we ﬁrst describe for the case when the parties
are honest. During the initialization phase the ideal functionality receives inputs from both S and
The functionality F L
11
cfe. If R conﬁrms this
R. S sends the input x and a description of the predicate circuit φ to F L
cfe instructs L to freeze p coins from R. If this is not possible due to
request, the functionality F L
insuﬃcient funds, the functionality ends the fair exchange protocol. During the reveal phase, the
receiver will learn x after which the payout phase is started. In the payout phase we consider two
cases. If φ(x) = 1, then the sender S receives the coins as a payment; otherwise if φ(x) (cid:54)= 1, the
functionality instructs L to send the coins back to R.
cfe in both the reveal
phase and the payout phase. Concretely, during the reveal phase a malicious sender S∗ may abort,
which results into sending the funds back to R. On the other hand a malicious receiver R∗ may
abort the exchange during the payout phase, which results into S receiving the coins. Both these
aborts model that in the protocol a malicious party may abort its execution by not sending a
required message.3
In addition to the above, malicious parties can abort the execution of F L
Security properties Let us now discuss what security properties are guaranteed by our ideal
functionality. Since our protocol realizes the ideal functionality these security properties are also
achieved by our protocol in the real world.
Termination. If at least one party is honest, the fair exchange protocol terminates within at most
5 rounds and unlock all coins from the contract.
Sender Fairness. An honest sender S is guaranteed that the receiver R only learns the witness
iﬀ he pays p coins.
Receiver Fairness. An honest receiver R is ensured that he only pays p coins iﬀ the sender
delivers the correct witness in exchange.
Consider ﬁrst the case of a malicious receiver R∗. The ideal functionality Π only proceeds to the
reveal phase if the receiver has locked p coins into the contract during initialization. Then, in the
payout phase these coins are only given to R∗ iﬀ φ(x) (cid:54)= 1. In all other cases (i.e., if φ(x) = 1 or
a malicious R∗ aborts), S receives p coins as required by sender fairness. Now assume instead a
malicious sender S∗, who only receives a payment during the payout phase if either φ(x) = 1 (i.e.,
the witness was valid), or the receiver aborts in Step (4∗), which an honest receiver never would do.
This implies receiver fairness. Finally, it is easy to see that the ideal functionality will terminate
after at most 5 rounds, which may happen during payout when a malicious receiver R aborts.4.
UC Deﬁnition of security. Consider a protocol Π with access to the judge contract functionality
Gjc, the global random oracle H and the global ledger functionality L. The output of an environment
Z interacting with a protocol Π and an adversary A on input 1κ and auxiliary input x ∈ {0, 1}∗ is
denoted as
REAL
Gjc,L,H
Π,A,Z (κ, x).
3Looking ahead, in the protocol a malicious sender S∗ may not reveal the key to the contract resulting into R