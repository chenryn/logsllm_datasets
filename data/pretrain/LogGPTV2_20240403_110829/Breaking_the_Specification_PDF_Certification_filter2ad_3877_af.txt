### Annotations and Prohibited Types
Certain types of annotations pose a significant risk to normal users by potentially misleading them. Consequently, these three annotation types should be classified as prohibited within the PDF specification for use in certified documents. The remaining annotation types can be used to hide existing text or images but should have their attributes strictly limited. For example, an Underline or StrikeOut line should never exceed the dimensions of the underlying text. This can be achieved by calculating the overlap between two rectangles using the /BBox coordinates, taking into account the line thickness. If there is an overlap, the integrated editing tool should reject the drawing with an appropriate error message. To ensure that manually created incremental updates are also checked, collision calculations should be performed during certification validation. An empty or undefined value for the /Subtype element must result in an invalid certification status.

### Preventing Sneaky Signatures
In practice, annotations within a certified document can often be omitted, allowing for a lower permission level as a precaution. However, this does not apply to signatures to the same extent. In many cases, it may be necessary to allow the addition of signatures after certification, such as when multiple contract partners need to sign the document. To prevent attacks of the SSA (Sneaky Signature Attack) class, signature fields must be predefined at specific locations in the PDF document before certification. Any subsequent addition of signature fields should result in an invalid certification status. Otherwise, these fields could be used to add text or images at any position. In our analysis, the /FT field with the value /Sig was crucial for identifying an object as a signature and classifying it as a permitted change. However, it was possible to redirect or omit the reference to the signature data /V, leading to the signature not being validated and thus not listed in UI-Layer 2. Therefore, the specification should mandate the /V parameter as mandatory rather than optional. If a signature cannot be validated due to missing or incomplete data, it should be listed as an invalid signature in both UI-Layer 1 and UI-Layer 2.

### Short-term Countermeasures

#### PDF-Detector
We analyzed the possibilities of providing a short-term, standard-compliant countermeasure. The primary cause of the vulnerabilities described in this paper is the overlay of original content using annotations or signatures. We determined that such overlays can be detected by analyzing the positions of annotations and signatures within the document and estimating if they intersect with any content. If an intersection is found, a warning can be issued. We developed a tool called PDF-Detector, which is capable of detecting EAAs (Evil Annotation Attacks) and SSAs. PDF-Detector is available as an online service at http://pdf-demos.de and as an open-source library. It is a Python-based tool that takes certified documents as input and produces a report indicating whether dangerous elements were found in the PDF. 

The first step is to check if the submitted PDF is digitally signed and if the signature is a certification or approval signature. PDF-Detector then evaluates the document's permission level and determines if any Incremental Updates have been applied. If Incremental Updates are present, the tool checks if the appended elements are allowed according to the permission level. If they are not, an error is thrown, and the report's status is set to "error." Otherwise, PDF-Detector identifies the type of the appended elements, such as a FreeText annotation or a signature, and defines a changes-danger-level. The values correspond to those in Table II and Table III. Finally, PDF-Detector analyzes each annotation or signature position and estimates the intersection with the page content. If an intersection is found, the changes-danger-level is raised to "very high." PDF-Detector does not perform cryptographic signature validation, as managing trusted or revoked certificates and supporting standards like PAdES [43] and CAdES [44] are considered out of scope for the attacks described in this paper.

#### Visible Panel for Annotations and Signatures
To reduce the stealthiness of these attacks, we recommend making annotations and additional signatures visible on UI-Layer 1. Currently, none of the tested PDF applications do this, so the attacks can only be detected if the user proactively checks the corresponding panels in the PDF application.

### High-Privileged JavaScript Code Execution
A dedicated feature of certified documents is the execution of high-privileged JavaScript code within Adobe Acrobat Pro and Reader (Windows and macOS). This section describes how the EAA and SSA attack classes can be used to inject and execute JavaScript code into certified documents.

#### Overview
JavaScript code can be embedded in PDF documents to provide various interactive features. Code execution is triggered by several events, such as opening a page within the PDF document. In the past, researchers have used JavaScript functionality to execute malicious code [45, 46, 47, 48]. Adobe requires that potentially dangerous functions can only be executed as high-privileged JavaScript code. An example of such a function is calling a website without user consent or warning. If a certified document contains JavaScript code and the certificate is fully trusted, the execution of high-privileged JavaScript code occurs without user interaction [49, 50].

#### Using EAA and SSA to Inject JavaScript
For annotations and signature fields, it is possible to pass a reference to an object containing JavaScript. This is done through the /AA dictionary, where the /PO value triggers code execution upon opening the page. If the EAA or SSA is placed on the first page of the PDF document, the code execution starts immediately after the document is opened. The object referenced by /PO contains the JavaScript code. For example, the following code opens the website https://www.malicious.org/ using the system’s default browser:

```javascript
this.open("https://www.malicious.org/");
```

The victim cannot prevent this call. The attack is not limited to opening a website; it can execute any high-privileged JavaScript code, provided the victim fully trusts the certificate used to certify the PDF document. We identified 117 JavaScript methods that are protected by special security restrictions and can only be executed in a privileged context [49].

### Future Research Directions

#### Page Templates
In addition to the permitted modifications described in this paper, certified documents with permission levels P2 and P3 offer the possibility to instantiate page templates. However, the page templates must already be included in the document before certification. This restriction results in a different attacker model, introduced in 2021 by Mainka et al. [51]. In this case, the attacker must manipulate the document before it is certified. For this paper, an analysis of page templates is out of scope but offers an interesting research direction for future work.

#### Design of the Update Mechanism
Incremental Updates introduce a desired feature to flexibly extend PDF documents. From a security perspective, however, they enable a large attack surface, allowing for the stealthy manipulation of digitally signed documents. Current countermeasures are piecemeal and do not address the existing security issues systematically. Future research should focus on new design concepts that allow the extensibility of PDF documents without compromising integrity protection.

#### Editing Restrictions
Microsoft Office provides restrictions such as allowing only form filling, adding comments, tracking changes, or opening a document as read-only [52]. These restrictions are similar to P2 restrictions in PDFs. Microsoft Office also allows applying multiple signatures with different permission levels. It is worth investigating whether similar attacks like EAA and SSA can be applied to other formats, such as ODF (Open Document Format) and OOXML (Office Open XML).

#### Privilege Escalation
Similar to PDFs, other documents like *.docx or *.odf can contain macros. Due to previously discovered security issues leading to remote code execution, the processing of macros is restricted, resulting in warnings when opening the document. If the document is digitally signed and the validation is successful, the warning can be skipped. If attacks can bypass the signature validation, they can inject arbitrary macro code, which is processed stealthily after the victim opens the document. We adapted the attack described in Section IX on LibreOffice as a proof-of-concept and reported it. The responsible disclosure process is ongoing.

#### Usability of Validation Warnings
During our evaluation, we observed a large number of confusing warnings during the validation process. These warnings include a wide range of different messages and symbols, regardless of the application used. Even for experts who understand how PDFs work and what behavior is expected from the application, it was challenging to recognize the validation result and classify the attack's success. We strongly recommend a usability study to address the following questions: 
1. How do users handle signed and certified documents and the associated warnings?
2. How can usability problems related to warnings be systematically analyzed?
3. What are the best current practices that developers can use to improve the presentation of validation results?

Such a study could be expanded to include different formats like MS Office, Open Document Format, AutoCAD, and DWFx Drawings.

### Related Work

#### PDF Signatures
In 2008 and 2012, I. Grigg [54] and [53] described attacks on electronic signatures, highlighting the abuse of missing cryptographic protection. In 2010, Raynal et al. [55] focused on the security of the applied certificate chain and criticized the design of trust establishment. In 2015, Lax et al. [56] considered signed documents containing dynamic content like macros or JavaScript, emphasizing the possibility of changing the dynamic content without invalidating the signature. In 2017, the first attacks bypassing the cryptographic protection in PDFs were presented [57], successfully creating two different PDF files with the same SHA-1 digest value. The scope of their research was the collision resistance of SHA-1, and the PDF files were used as a proof-of-concept. In 2018, Domingues and Frade [58] studied the occurrence of digitally signed and permission-protected PDFs, finding multiple issues related to expired or revoked certificates. No attacks bypassing the integrity protection of PDFs or evaluating previously discovered attack vectors were made. In 2019, Mladenov et al. [26] published a comprehensive study on the security of PDF signatures, discovering three novel attacks and revealing all current applications as vulnerable. In 2021, Mainka et al. [51] revealed Shadow Attacks on signed PDFs, embedding hidden content that could be uncovered while keeping the signature valid. Both works [26, 51] focused only on approval signatures and did not cover certified documents.

#### Polyglot Attacks
In 2005, Buccafurri [59] described a novel file format attack where the attacker forces two different views of the same signed document by switching the file format between BMP and HTML. PDF files were mentioned as a possible target, but no concrete ideas were described. Other research combines file formats of PDF and image formats [60, 61, 62], showing different content depending on the viewer in use. For example, a PDF and a JPEG can be combined into a single polyglot file.

#### Security Apart from PDF Signatures
In 2005, McIntosh and Austel [63] described issues in partially signed documents with the XML rewriting attack. Somorovsky et al. [64] adapted the attack in 2012 to SAML-based single sign-on.

### Conclusion
Certified documents enable complex and highly desired use-cases. Unlike approval signatures on PDFs, certified documents allow certain changes to the PDF after certification, such as filling out forms or adding annotations and further signatures. However, the devil is in the specification details. This 994-page specification grants great flexibility in using these changes. In this paper, we shed light on the abuse of annotations, forms, and signatures, misusing their specified features to change the visible content of a certified document and introducing two specification flaws: the Evil Annotation Attack (EAA) and the Sneaky Signature Attack (SSA). Although neither EAA nor SSA can change the content itself—it always remains in the PDF—annotations and signature fields can be used as an overlay to add new content. Victims opening the PDF are unable to distinguish these additions from regular content. Additionally, annotations can embed high-privileged JavaScript code that is allowed in certain certified documents. We proposed countermeasures to prevent these vulnerabilities. However, the underlying problem remains: the flexibility to protect the integrity of parts of documents while allowing changes to other parts is complex. The research community has struggled with similar problems on other data formats, such as XML or Email, without finding a satisfying solution. In the case of PDF, the specification must be updated to address these issues.

### Acknowledgment
Simon Rohlmann was supported by the German Federal Ministry of Economics and Technology (BMWi) project “Industrie 4.0 Recht-Testbed” (13I40V002C). This work was supported by the German Research Foundation (DFG) within the framework of the Excellence Strategy of the Federal Government and the States – EXC 2092 CASA. We acknowledge the University of Konstanz for supporting Vladislav Mladenov.