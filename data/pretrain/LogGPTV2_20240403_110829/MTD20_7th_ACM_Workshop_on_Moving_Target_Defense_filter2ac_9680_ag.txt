[49] investigated how the strategies of information disclosure
by defenders can improve the effectiveness of MTD techniques
based on Bayesian Stackelberg game theory. They designed
a signaling game based on the concept of the Bayesian
Persuasion Model
to consider how a defender signals an
attacker and how the attacker responds to the signal in their
decision making process. Based on the analysis of the optimal
defense strategies in platform migration,
this work shows
that strategic information disclosure is a promising method to
enhance defense effectiveness. Zhang et al. [165] proposed an
incentive-compatible MTD to identify an optimal interval of
VM migration in clouds. This work uses the Vickrey-Clarke-
Groves (VCG) mechanism to realize mechanism design by
considering the security beneﬁt and the defense cost intro-
duced by the VM migration.
Some shufﬂing-based MTD techniques are used to imple-
ment defensive deception techniques. These types of tech-
niques can be called ‘MTD using deception.’ For example,
Clark et al. [34] used IP mutation to distract and/or mislead
attackers to fail to identify real nodes. This work places a
network of decoy nodes and identiﬁes an optimal strategy
to mutate IP addresses of real nodes based on a Stack-
elberg game. Zhu et al. [169] proposed a deceptive ﬂow-
based defense mechanism in a multi-path routing network by
generating fake packets aiming to lure attackers to expend
their energy disrupting fake packets. This work modeled the
interactions between an attacker and a defender based on a
Stackelberg game and derived solution equilibria based on an
iterative backward induction method.
Sengupta et al. [132] used a Bayesian Stackelberg game to
identify an effective switching strategy for web applications
to maximize security for a given set of system conﬁgurations
while minimizing the defender’s switching cost.
3) Stochastic Game: Stochastic game is developed by
Shapley [137] and it can reﬂect dynamics between multiple
players based on probabilistic transitions. The game consists
of multiple stages where each stage can start from some state.
Each player chooses its action and receives its respective
payoff based on the taken action and the current state. The
process is repeated as players arrive new states based on the
probabilistic transitions. Manadhata [103] proposed a two-
player stochastic game model to determine an optimal MTD
strategy based on attack surface diversiﬁcation. The authors
explicitly modeled different attacker proﬁles (e.g., script kid-
dies, experienced hackers, organized criminals, and nation
states) and used the subgame perfect equilibrium concept to
determine the optimal defense strategy.
Pros and Cons: Since game theoretic approaches have been
so commonly used in modeling the competitive interactions
between an attacker and defender in designing techniques for
MTD, we discuss several key advantages and disadvantages
of game theoretic MTD.
The advantages of game theoretic approaches are:
• Game theory offers an effective way to formulate interac-
tions between an attacker and defender. Game theory has
been well explored to model the decision making process
and how the best strategy is chosen by multiple players
who participate in the same game. Hence, there are many
existing, mature game theories to model different scenarios
of a cybergame by an attacker and defender. In particular,
game theoretic modeling techniques are highly effective to
model actions by each party based on historical interactions
between them.
• Game theory provides convenient tools to formulate
the decision utility of an attacker and defender. Most
cybergame scenarios consider a player’s multiple objectives.
For example, the attacker wants to maximize their attack
effectiveness (i.e., impact by the attack success) with the
minimum attack cost (e.g., time / resource to perform an
attack). In addition, the defender also chooses a defense
strategy to maximize defense strength for enhanced system
security while minimizing service interruptions to users and
defense cost. Both parties basically want to take an action
that provides the best outcome with minimum cost.
• Game theory can provide an optimal strategy based
on learning. We can easily embed each player’s learning
toward an opponent’s action into a game. In particular, in
a cyberwar game with the key players being an attacker
and defender, taking an adaptive strategy under a highly
dynamic, hostile environment is critical to achieving their
respective goal. Game theoretic approaches can provide
an effective way to consider each party’s learning and
accordingly their adaptive behavior to maximize their utility
under the dynamic, hostile settings.
The disadvantages of game theoretic MTD are:
• Attackers are not necessarily rational or intelligent.
Game theory assumes that all players are rational in order
to maximize their own utilities. However, in the context of
cybersecurity, attackers may not necessarily be rational or
intelligent. Instead, the volume of attackers can be substan-
tially large even if their intelligence is very low, aiming only
to waste resources of a system (or network) and decrease
the system resilience, leading to a sudden breakdown of
the system without recoverability. In addition, if incentives
based on rationality are not compatible (e.g., attackers are
not stimulated by the incentives), the best strategies derived
by the defender may not work for irrational attackers.
• Solution space may be too large, resulting in pro-
hibitively high solution complexity. A game theoretic
approach can provide a best strategy for a defender to
mitigate the impact by an attack. However, generating an
optimal strategy may not be light enough to be run particu-
larly on resource-constrained platforms. Greedy, heuristic
approaches usually sacriﬁce a certain level of optimality
17
while providing lightweight solutions.
• Players, an attacker and a defender, may have inherent
misperception impacting their decision making process.
As the assumption of complete information available to
players has been realized as unrealistic, game theoretic
approaches considering incomplete information have been
proposed [63] meaning that players do not have perfect
knowledge in deriving their accurate utilities. Nevertheless,
since incomplete information is applicable to all players in a
game, the view toward the game itself is assumed to be the
same, implying that each player play the same game based
on available information even if the information itself would
be incomplete. But in reality, each player may interpret
the same game differently based on its own subjective
perception. Hypergame theory [55] has been proposed to
deal with this kind of misperception and/or uncertainty
problem in game theory; but it has not been applied in
modeling interactions between an attacker and defender in
a system with MTD.
B. Genetic Algorithm-based MTD
Genetic algorithms (GAs) have been used to develop MTD
mechanisms. Crouse and Fulp [38] employed a GA to identify
a secure computer conﬁguration (e.g., OSes or applications)
with high diversity in time and/or space. They modeled a com-
puter conﬁguration as a chromosome in which an individual
conﬁguration is treated as a trait or allele. Based on the attack
resilience, a top ranked computer conﬁguration is selected.
The authors extended their work in [40] to investigate how
‘chromosome pool management’ can enhance the diversity of
computer conﬁgurations based on a GA-based approach. In
particular, they considered the aging aspect of conﬁgurations
to reﬂect vulnerability that can be introduced by an aged
conﬁguration. In addition, the authors enhanced their GA-
based MTD to change computer conﬁgurations by changing
mutation as well as using the feedback about system security
status [84]. Zhuang et al. [172] also used a GA to generate
system conﬁgurations with high diversity for maximizing
system security.
Lucas et al. [96] described a host-level implementation of
an evolutionary strategy for MTD that proactively discov-
ers secured alternative conﬁgurations over time. This work
is based on the evolutionary approach originally introduced
in [38]. The evolutionary based MTD models computers
as chromosomes. The computer conﬁgurations are generated
using an evolutionary algorithm (EA) with a series of opera-
tions such as reproduction, recombination, and mutation. This
implementation prototype consists of mainly the following
three components: (i) EA that discovers the conﬁgurations;
(ii) virtual machine (VM) that implements the algorithm; and
(iii) assessment for scoring the chromosomes.
Recently, Ge et al. [54] discussed a GA-based approach
for optimizing the network shufﬂing in an SDN-based IoT
network. In this work, the authors considered two types of
the IoT nodes (e.g., decoy and real nodes), and designed
three metrics, including the number of attack paths towards
the decoy targets, mean time to security failure, and defense
cost. These metrics are optimized for the network shufﬂing
technique.
Pros and Cons: GAs can be a useful approach as they
attempt to ﬁnd the best or near optimal solution(s). However,
developing a ﬁtness function that can provide a diverse so-
lution space for design decisions in MTD techniques is not
a trivial task as the design of an MTD technique needs to
accommodate multiple conﬂicting system goals. In addition,
for a large solution space, efﬁciency becomes an issue, limiting
scalability. Further, for resource-constrained environments, a
GA-based solution is not attractive due to high complexity.
C. Machine Learning-based MTD
Vikram et al. [154] proposed an MTD technique by ran-
domizing HTML elements for web services to deal with the
web bot attacks. The authors used ML to enhance the effec-
tiveness of the proposed strategy, evaluating their proposed
technique by measuring page loading time overhead. This ML-
based MTD technique incurs low overhead while effectively
thwarting attacks.
Colbaugh and Glass [36] proposed a predictive MTD tech-
nique using ML aiming to mitigate the adversary’s ability to
learn about the defensive mechanism. In this work, the authors
supposed that attackers can learn and may leverage a reverse-
engineering method to anticipate the defensive strategies. They
evaluated their algorithm using cybersecurity datasets to show
the effectiveness and robustness of their approach. The authors
used another approach to deal with the same problem in
[35]. They leveraged a defensive MTD and an ML-based
method using the co-evolutionary relationship between both an
attacker and defender to derive an optimal defensive strategy
that is hard to reverse-engineer.
Zhu et al. [167] proposed two iterative reinforcement learn-
ing algorithms to identify an ideal defense strategy against cy-
berattacks especially when the information about the attackers
is unknown or limited. They used Markov chains and stochas-
tic stability in the algorithms by introducing the adaptive,
robust reinforcement learning capability. They showed that
their method can provide the nearly optimal defensive strategy.
Tozer et al. [149] proposed a multi-objective reinforcement
learning algorithm to minimize the attack surface of a system.
They designed a system to generate a multi-objective Markov
Decision Process using the system’s components and behaviors
to identify optimal policies.
Sengupta et al. [131] proposed an MTD framework (MT-
Deep) for Deep Neural Networks (DNNs) that
increases
security and robustness of the DNNs against the adversarial
attacks. In MTDeep, an input image is classiﬁed randomly
selecting a network from an ensemble of the networks which is
based on a strategy generated via game-theoretic reasoning. An
interaction between the image classiﬁcation system is modeled
with MTDeep (i.e., an ensemble of DNNs) and its users
(i.e., adversarial and legitimate) into a Repeated Bayesian
Game. The defender’s conﬁgurations space are the ensemble
of DNNs which are trained for the same task, but they are
not affected by the same attack. Stackelberg equilibrium of
the game provides the optimal switching strategy for MTDeep
reducing the misclassiﬁcation on adversarially modiﬁed image
18
with high classiﬁcation accuracy for the legitimate users of
the system. Recently, Song et al. [144] designed an MTD-
based approach for embedded deep visual sensing systems
against adversarial examples for generating multiple new deep
models (e.g., multilayer perceptrons and convolutional neural
networks) which can be used to collaboratively detecting and
thwarting the adversarial examples. The adversarial examples
are inputs to a neural network (e.g., deep model) that makes
wrong classiﬁcation results. The deep models are generated
dynamically using the concept of MTD after the system
deployment. The post-deployment of the models are different
across the systems. This approach invalidates an essential
basis to the attackers and disrupts them to build effective
adversarial examples. Similarly, Farchi et al. [47] proposed
a strategic ML-selection approach defending against the ad-
versarial machine learning. In this work, the authors suggested
that the attacks against the learning can be reduced with careful
design of strategic selection of learning methods and attributes.
The defender implements multiple learners with their strategic
activation computation using the game-theoretic approach.
Pros and Cons: ML-based MTD allows a system to capture
evolving attack patterns with high scalability and applicability.
However, as the performance of ML often requires a large
amount of data for training in order to guarantee a certain
level of prediction accuracy, then when there is a lack of data,
the performance is less than desired even with high overhead
and complexity. Further, we need to ensure a sufﬁcient level of
computational power available in a given environment where
MTD is deployed as some resource-constrained environments
cannot afford ML-based MTD.
Some other MTD techniques have used other approaches,
which do not use any of the above methodologies (i.e., game
theory, genetic algorithms, or machine learning). Those are
already discussed in Section IV based on the three categories
of operation-based MTD (i.e., shufﬂing, diversity, and redun-
dancy).
D. Discussions on the Existing MTD Modeling & Solution
Techniques
We observed the following trends in key modeling and
solution techniques used to develop MTD in the literature:
• A large volume of game theoretic MTD approaches:
As discussed earlier, due to the substantial advantages of
game theoretic approaches in terms of the ﬂexibility of
problem formulation that can reﬂect diverse scenarios in
most domains, game theoretic approaches are dominantly
employed in developing MTD. However, again we should
keep the caveats in mind in terms of the rationality of
players, solution complexity, and misperception or uncer-
tainty in decision making, as discussed in Section VI-A. In
addition, we found that several game theories are dominantly
used such as a Bayesian Stackelberg game or a stochastic
game. To better deal with uncertainty or misperception in
the decision making, hypergame theory [55] can be applied
to consider more realistic scenarios which should reﬂect
uncertainty and bounded rationality.
ASP
12
Attack utility
7
Learning
1
5
MTTC
2
3
Attack surface
Unpredictability
19
Learning
System security
14
1
5
Defense utility
MTTF
4
4
DSP
17
Others
Fig. 6. Metrics measuring MTD effectiveness by an attacker’s perspective.
Fig. 7. Metrics measuring MTD effectiveness by a defender’s perspective.
• GA-based MTD for identifying the optimal deployment
of system conﬁgurations: When a problem size becomes
large, evolutionary algorithms, such as genetic algorithms
(GAs), are often used to maximize solution optimality. But
as discussed earlier, the downside of GA-based MTD is a
lack of scalability with high complexity for large-scale or
resource-constrained environments. In addition, ensuring a
centralized entity to make MTD decisions based on GAs
may not be guaranteed for some fully distributed environ-
ments.
• ML-based MTD to hinder an attacker’s learning or
select a best defense strategy: The high performance of ML
in learning attack patterns or identifying optimal solutions is
attractive when a large volume of data is available. However,
under a small set of data and/or highly dynamic datasets,
ML-based solutions can be somewhat expensive without
introducing a signiﬁcant beneﬁt of using it. Further, we need