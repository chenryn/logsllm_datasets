F.2 Using Multi-Authority ABS
As described above, ABS can support multiple, mutually independent (and possibly distrusting)
agents who can set up their own signature infrastructure, and multiple agents who can issue their
own attributes to users. To illustrate how ABS operates in such a setting, we return to the example
introduced in the beginning of this section. Recall that Alice wishes to endorse her message with
a claim which includes attributes owned by diﬀerent attribute authorities like Facebook, Orkut,
Princeton University, Yale University and the American Sociological Association. Alice needs to
choose one or more signature trustees under whose system she will provide the signatures. Suppose
Alice is aware that most of her potential readers use Google or the Department of Motor Vehicles
(DMV) as trusted signature-trustees. Then Alice can go about endorsing her story as follows:
1. Alice registers herself with Google and the DMV (using ABS.TRegister). These trustees would
use their idiosyncratic ways to bind the user with a user ID. For instance the DMV could
use the user’s driver’s licence number and Google could use the user’s social security number.
Alice gets two tokens τGoogle and τDMV this way. We stress that the tokens issued by the
trustees are public. As such it is not important for the trustees to verify the identity of a user
while registering.
2. Alice happens to be a professor at Yale, and is certiﬁed by the American Sociological
Association as an expert on online social networks. To obtain appropriate attributes, ﬁrst she
approaches Yale’s attribute authority, and presents her tokens from Google and the DMV.
For Yale to be able to issue her attributes under these trustees, Yale needs to have the
trustee’s public-keys. Further, Yale should be satisﬁed that Alice is indeed the person who
possesses the user ID mentioned in the tokens. We shall assume that the Yale can verify the
social security number and licence number of all Yale faculty. After verifying Alice’s identity
and the tokens she presented, using Google and DMV’s trustee public-keys, Yale can issue
corresponding attribute keys on the attribute “Professor at Yale” (for simplicity we ignore the
30
fact that Alice is untenured, and Yale would only issue an attribute saying Professor at Yale in
2008). Similarly the American Sociological Association will issue Alice keys for the attribute
“Expert on online social networks” under the two trustees. Again, the ASA will need to be
able to verify Alice’s social security number and driver’s licence for this, and have access to
Google and the DMV’s public trustee keys.
3. Alice has already registered herself with Google and the DMV and obtained her tokens. Later,
when she has prepared her anecdote — which we shall denote simply by m — she can decide
what claim to attach to it. As mentioned above, she decides on the claim (which we shall
call Υ) involving additional attributes owned by the attribute authorities Facebook, Orkut
and Princeton (from whom she does not have any attributes). Using her attributes from Yale
and the American Sociological Association, she can successfully prepare a pair of signatures
σGoogle and σDMV on m using Υ. For this she will need access to the public keys of Facebook,
Orkut and Princeton (but need not have interacted with them otherwise). In describing Υ,
each attribute is clearly marked as owned by the corresponding attribute authority, so that
a veriﬁer knows which public keys are to be used. Further, σGoogle and σDMV include the
information that the signature trustee for that signature is Google and the DMV respectively.
4. Suppose Alice has anonymously published (m, Υ, σGoogle, σDMV) on the internet. A user in
India who trusts Google (but does not know if DMV can be trusted) can verify σGoogle
and be convinced that the message was endorsed by someone possessing adequate attributes
as claimed. For this she should have access to the public keys issued by all the attribute
authorities (Facebook, Orkut, Princeton, Yale and the American Sociological Association).
As an orthogonal issue, this user might believe that Princeton University’s attribute authority
has been hacked, and an attribute from that authority should not be trusted. In this case she
does not attach any signiﬁcance to the part of the claim (Professor at Princeton OR Professor
at Yale).
In this example, Alice herself need not have trusted all the signature trustees. Indeed, she could
be concerned that Google is interested in knowing who signed the message, or which attributes
were used to sign them. Further, Orkut’s attribute authority could be colluding with Google’s
signature trustee. But even so, the perfect privacy guarantee assures Alice that her signature does
not contain any information other than the message and the claim-predicate (and other public
information).
Finally, we point out that it is important to use user IDs (social security number or licence
number) which cannot be shared among multiple individuals. To see this, suppose Google used an
e-mail address as the user ID. Also suppose Alice and her friend Bob shared the e-mail address
PI:EMAIL . Yale could verify that the e-mail address indeed belongs to Alice. But,
meanwhile Bob, who happens to be a professional chess player, can get an attribute Top-100 Chess
Player from the World Chess Federation, also under the same user ID and token from Google,
because the World Chess Federation veriﬁes that the user ID indeed belongs to Bob. Thus, if they
could share a user ID, Alice and Bob would be able to pool their attributes together and endorse
messages claiming to have attributes satisfying Professor at Yale AND Top-100 Chess Player.
31
G Applications
G.1 Attribute-Based Messaging
[5]) provides an example of a quintessential attribute-
Attribute-Based Messaging or ABM (e.g.
based system which demands new cryptographic primitives for achieving its natural security goals.
In an ABM system, the set of users to whom a message is addressed is not speciﬁed by their
identities, but by an “attribute-based address”: that is, a predicate on the attributes, such that
the intended receivers are the users whose attributes satisfy the predicate. An ABM system can
also ensure that only users whose attributes satisfy certain conditions can send messages to certain
other users. All this must be facilitated without requiring the users to be aware of each other’s
identities or attributes.
End-to-End guarantees in ABM The goals of an ABM system can be achieved using trusted
entities. But as in other communication systems, the users may require an end-to-end guarantee
on these properties, independent of the entities involved in delivering the messages. That is, (1)
senders would like to encrypt their messages so that only users with appropriate attributes can
decrypt them, and (2) receivers would like to verify signatures on messages such that only users
with appropriate attributes could have signed them; the signer should not be forced to reveal
more details about its attributes or identity than what is relevant to the receiver. Note that here
the users would be willing to trust the authority that issues the attributes, as a compromised
attribute-authority could give all attributes to any user, thereby rendering the above guarantees
meaningless.9
The ﬁrst of these issues can be elegantly handled using attribute-based encryption: in particular
the ciphertext-policy attribute-based encryption of Bethencourt, Sahai and Waters [4] provides just
the right cryptographic tool. Their implementation of this encryption scheme was integrated into
the ABM system of Bobba et al. [6] and demonstrated to be practical.
However, the second issue of authentication did not have a satisfactory solution until now. To
highlight some of the issues involved, we point out shortcomings of some natural proposals using
existing cryptographic tools:
• Using certiﬁcates: For each attribute that a user has, the attribute authority gives the user a
new signing key and a certiﬁcate binding the attribute to the corresponding signature veriﬁcation
key. Then, to sign a message using her attributes, a user simply signs it using the signing key from
the attribute authority and presents (a subset of) the certiﬁcates it received.
This achieves the goal of users not having to be a priori aware of other users or their attributes. But
this “solution” has at least two drawbacks. First, the user has to reveal (a subset of) its attributes,
rather than just some predicate of the attributes. Second, even though the user’s identity is not
directly revealed by the signature, multiple signatures can be linked together as coming from the
same user.
• Using mesh signatures: To allow signing with non-trivial predicates of attributes, one could
consider using the recently developed tool of mesh-signatures [11]. This does indeed provide
a perfect privacy guarantee. However, this approach fails a crucial unforgeability requirement:
multiple users can pool their attributes together and create signatures which none of them could
have by themselves produced.
9In an ABM system, the entities in the message path are signiﬁcantly more vulnerable than the attribute authority,
because they need to stay online and be involved in every message delivery. The attribute authority interacts with
users only when issuing them attributes.
32
• As a “ﬁx” to the above collusion problem, one might consider using disjoint attribute universes
for diﬀerent parties. This would indeed prevent collusion, and would still retain the privacy
guarantee that the signature does not reveal how the claim-predicate was satisﬁed. However this is
also not a satisfactory solution, as it allows multiple signatures to be identiﬁed as being generated
by the same user.
Using an ABS scheme simultaneously overcomes all these problems, and achieves (a) perfect
privacy and unlinkability, and (b) collusion resistant unforgeability. In integrating ABS into ABM,
the message path of the ABM need not be altered. But in the attribute keying path, during
registration the users should obtain keys for signing and veriﬁcation as well (in addition to keys for
encryption and decryption). An implementation would follow the description in Section A.
ABS for Access Control in ABM As suggested above, the primary application of ABS in an
ABM system would be to obtain end-to-end authentication guarantees. But in addition, ABS could
be used by the system to implement access control: a typical ABM system will require that messages
to some addresses be not delivered unless the sender has attributes satisfying a certain policy. That
is, an attribute-based access control mechanism must decide whether to allow a messaging attempt
from a sender or not, depending on the attributes of the sender and the attribute-based address of
the message.
In the current implementations this is achieved by the sender authenticating itself to a central
server in the message path, who then consults the attribute database to determine whether the
sender’s attributes satisfy the requisite predicate. This requires this central server having access to
the user’s identity as well as attributes. This in general is not considered a serious issue, because
anyway the attribute database has to be queried for obtaining the list of recipients.
However, it is possible that the attributes of the receivers used in the addresses are not the same
(and may not be as sensitive) as the attributes of the sender used to determine access privileges. In
such a scenario, using ABS can completely eliminate the need to query the database regarding the
more sensitive attributes. Instead, for each message, a sender can decide what predicate regarding
its attributes is to be revealed, then sign the message with that predicate using ABS. A server in
the message path can ensure that the claimed predicate satisﬁes the system’s sending policy, and if
the signature veriﬁes, deliver the message. Note that since this signature veriﬁcation can be carried
out using public keys, it can be done at one of the many points in the message path, instead of at
a centralized server.
In a complex ABM system one might require the senders to include two ABS tags with every
message — one intended for the message delivery agents, and one for the end recipient. The former
would typically involve a claim-predicate that is independent of the contents of the message, and
simpler (and hence faster to verify). The signature intended for the receiver could be dependent on
the message and more complex; note that this signature is veriﬁed by the individual users locally,
without putting load on central servers.
ABS for inter-domain ABM There are several engineering and cryptographic challenges in
implementing a truly inter-domain ABM system. Neither the current implementations of ABM
nor attribute-based encryption schemes known today fully support multiple attribute authorities
(so that a user can use attributes from diﬀerent attribute-authorities in the same message). For
instance, Chase’s proposal [14] for multi-authority attribute-based encryption (originally for the
schemes in [33, 20], but can be extended to the one in [4]) requires all the attribute-authorities to
share secret keys with a central authority, thereby requiring the central authority to trust all the
attribute authorities.
33
Remarkably, however, the multi-authority version of our ABS scheme is readily amenable to
a full-ﬂedged inter-domain setting. There can be multiple attribute-authorities and signature-
trustees who need not trust each other. It is safe for a signer to produce signatures using keys
from untrusted trustees, and it is possible to form signatures involving attributes from multiple
(untrusted) attribute-authorities; the veriﬁer needs to trust just one of the signature-trustees used.
G.2 Other Applications
ABS oﬀers a unique combination of features that makes it suitable for several other scenarios as well.
We point out a few potential applications. These are only meant to illustrate diﬀerent possibilities
of ABS, and not claimed to be solutions for these problems in their most general setting.
Attribute-Based Authentication Consider a server which allows clients to connect to it and
carry out transactions depending only on the client’s attributes. A client who wishes to carry
out a transaction may wish to reveal only minimal information about its identity of attributes as
required by the system policy. ABS provides an immediate solution: to establish an authenticated
session, the server sends a unique session-id to the client. The client responds to the server over an
encrypted channel with an ABS signature on (session-id, session-key), where session-key consists
of freshly generated keys for symmetric-key encryption (with semantic security) and MAC. After
verifying the ABS signature, the server grants the client access depending on the claim-predicate
of the ABS tag. All further communication in the session is carried out using the session-key.
Leaking Secrets The classical application for which the notion of ring-signatures was developed
by Rivest, Shamir and Tauman [30] is “leaking secrets.” In a ring signature the signer can endorse
a message and attach a claim that it is one of the identities (or attributes, in our case) in some
set. This is indeed an instance of ABS, with a particularly simple class of claim-predicates, namely
disjunctions. Mesh signatures [11] are an extension of this concept that allow a rich class of claim-
predicates (the same class of claim-predicates supported in our construction). However, when
allowing this larger class of predicates an issue arises which is not present in the ring signature
setting — namely, the possibility of multiple users colluding to pool their attributes together.
Note that when restricted to disjunction, having any one attribute is enough to satisfy the claim,
and pooling attributes does not allow a coalition to satisfy any new disjunctions. But for any
claim-predicate other than a disjunction, collusion can indeed help. In [11] collusion is considered
legitimate:
indeed attributes there are considered to be individual identities, and multiple users
must collude to obtain multiple attributes.
ABS goes beyond mesh signatures and provides collusion-resistance. (If certain groups of users
must be allowed to collude, an ABS scheme would treat them as a single user; indeed if there is
only one user in the system, an ABS scheme degenerates to a mesh signature scheme.) In that
sense ABS is a more appropriate generalization of ring signatures to complex claim-predicates in
many settings.
The semantics of leaking a secret with an ABS signature is that a single entity who has attributes
satisfying a certain claim has endorsed the message. Here it is important that the ABS allows claims
to be in terms of some arbitrary attributes chosen by the signer (presumably designed to obscure
their identity), as well as some attributes the signer might indeed possess.
Trust Negotiations Trust-negotiation between two parties is a well-studied problem in the
setting of an attribute-based system. From a theoretical point of view, the problem is a special
case of secure two-party computation. However much of the research on this problem focuses on
34
obtaining very eﬃcient solutions when possible. A standard approach to such an eﬃcient protocol
is a carefully designed sequence of rounds in which the two parties progressively reveal more and
more of their attributes. At its simplest, this can mean simply revealing one or more of one’s
own attributes in a veriﬁable manner. However, several recent works also consider cryptographic
approaches to trust negotiation that give more privacy to users than is achieved when they simply
take turns revealing their attributes [29, 19]. ABS permits a sophisticated way to reveal partial
information about one’s attributes that is natural for this setting: one party can prove to the other
party that her attributes satisfy some complex predicate.
Being able to bind a message with such a proof about one’s attributes, as ABS permits, allows
for a robust turn-based trust negotiation protocol. At every step of the negotiation, there is an
“ephemeral key” for secure communication (private-key encryption and MAC). At each step, the
active party picks a new ephemeral key, signs it using ABS with the claim that he or she wants to
reveal at that step, and sends it securely (using the ephemeral key from the previous step) to the
other party, who veriﬁes the signature. Using new ephemeral keys at each step prevents man-in-
the-middle attacks by an adversary who has enough attributes to carry out only the ﬁrst few steps
of the negotiation.
35