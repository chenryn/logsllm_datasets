1) and (𝑐′
2) in 𝐺 with 𝑐′
1 ∈ Antichains[ 𝑗] and 𝑐′
First we iterate through Antichains; At iteration 𝑖, we look at
Antichains[ 𝑗] for all 𝑗 < 𝑖 until we find an edge (𝑐1, 𝑐2) in 𝐺 such
that 𝑐1 ∈ Antichains[ 𝑗] and 𝑐2 ∈ Antichains[𝑖]. If there is another
edge (𝑐′
2 ∈ Antichains[𝑖],
then we check if the edges in the antichains 𝑖 and 𝑗 are consistent.
E.g, if the orderings are (𝑐1, 𝑐′
2, 𝑐2) in Antichains[ 𝑗] and
Antichains[𝑖], respectively, then we flip Antichains[𝑖].
Once the chains are fixed, we add edges for anti-dominance re-
lationships. We iterate through Antichains[𝑖] and Antichains[ 𝑗]
for 𝑖 < 𝑗 and look at each pair of elements 𝑎𝑖, 𝑎 𝑗 such that 𝑎𝑖 ∈
Antichains[𝑖] and 𝑎 𝑗 ∈ Antichains[ 𝑗]. For each 𝑎𝑖 and 𝑎 𝑗 we com-
pute all their successors and all predecessors in 𝐺. If there exists
a path from some successor of 𝑎 𝑗 to some predecessor of 𝑎𝑖, then
we add (𝑎 𝑗 , 𝑎𝑖) to 𝐺′. Similarly, if there exists a path from some
predecessor of 𝑎 𝑗 to some successor of 𝑎𝑖, we add (𝑎𝑖, 𝑎 𝑗) to 𝐺′.
The last thing that remains is to identify colinearities. For each
edge (𝑞, 𝑝) in 𝐺′ find the smallest response 𝑆 containing 𝑞 and 𝑝. If
there exists some 𝑘 ∈ 𝑆 such that 𝑘 and 𝑝 are not connected in 𝐺′,
then they must be colinear and so we add (𝑘, 𝑝) to 𝐺′. We similarly
check if there exists a colinearity between 𝑘 and 𝑞 and add those
edges to 𝐺′. The final step is to remove all transitive edges in 𝐺′ (if
they exist) to keep only minimal anti-dominance relationship and
return the anti-dominance graph 𝐺′.
Lemma 5.4. Let D be a database and RS(D) be its response set.
Given RS(D), the dominance graph 𝐺 of D, and the ordered an-
tichains of D, Algorithm 3 returns the anti-dominance graph of D in
𝑂(𝑅3|RS(D)|). [Proof in Appendix C]
5.6 Order Reconstruction
We have already given algorithms for computing the extreme points,
the dominance graph, the antichains, and the anti-dominance graph.
We now put these pieces together to achieve OR of a database D
given its response set RS(D). Algorithm 4 performs OR by taking
the following steps. First it runs Algorithm 9 (FindExtremePairs) to
compute all candidate configurations of the extreme points. There
is a constant number of such configurations and at least one of them
corresponds to a correct arrangement of the extreme points in D
(up to rotation/reflection). For each candidate configuration, it then
computes the dominance graph using Algorithm 1 (DomGraph)
and the anti-dominance graph using Algorithm 3 (AntiDomGraph).
Incorrect configurations result in graphs that are either of an in-
correct form or result in a pair of dominance and anti-dominance
graphs (𝐺, 𝐺′) such that databases with orders described by (𝐺, 𝐺′)
are not compatible with RS(D). Algorithm 4 continues to iterate
through the configurations until a correct pair of graphs (𝐺, 𝐺′) is
found and returned. Given a response set RS(D) of some database
D as input, Algorithm 4 (OrderReconstruction) is guaranteed to
terminate and output a correct graph pair.
Theorem 5.5. Given the response set RS(D) of a 2D database D
with 𝑅 records, Algorithm 4 (OrderReconstruction) returns an 𝑂(𝑅)-
space representation of the set Eo(D) of all possible orderings of the
points of databases equivalent to D with respect to the response set.
The algorithm runs in time 𝑂(𝑅3|RS(D)|), which is 𝑂(𝑅7).
The proof of Theorem 5.5 can be found in the Appendix.
5.7 Experiments
In the previous subsections, we discussed the limitations of OR
and described an algorithm that succeeds at OR when given the
response set of a database. We now support our theoretical results
with experimental results. We have deployed our OR attack on
three real-world databases (Table 2): California, Spitz and HCUP.
The California Road Network dataset [31] comprises 21, 047 road
network intersections indexed by longitude and latitude. Our Cali-
fornia dataset is a random sample of 1000 points with coordinates
truncated to one decimal place and scaled by a factor of 10. The
resulting domain is [102] × [102]. We generated the response set
for this dataset and then ran our OR attack (Algorithm 4) on it.
In Figure 1a, we depict our resulting reconstruction. Although, in
theory, we only recover the relative orders of all the points, the
actual reconstruction leaks additional information about the overall
“shape” of the data. For our reconstruction, after finding the order
of the points, each point is assigned coordinates corresponding
Algorithm 3: AntiDomGraph(RS(D), 𝐺, Antichains)
1: Initialize empty graph 𝐺′
2: // Fix chain orientation
3: for 𝑖 ∈ [1, |Antichains|] do
4: Add an edge in 𝐺′ between consecutive points in Antichains[𝑖 − 1]
Find (𝑐1, 𝑐2) ∈ 𝐺, where 𝑐1 is the first point in Antichains[𝑘], 𝑘 < 𝑖
5:
in an edge with a point from Antichains[𝑖]. If there are multiple
options for 𝑐2, pick the smallest one in order.
if ∃(𝑐′
1 ∈ Antichains[𝑘], 𝑘 < 𝑖, which is
after 𝑐1 in order, and 𝑐′
and there is no path from 𝑐′
Flip the order of Antichains[𝑖]
2 ∈ Antichains[𝑖], which is before 𝑐2 in order,
7:
8: Add an edge in 𝐺′ between consecutive points in the last antichain
9: // All chains are fixed; Now add edges between them.
10: for 𝐴𝑖 = Antichains[𝑖] and 𝐴𝑗 = Antichains[ 𝑗], such that
2) ∈ 𝐺, for a point 𝑐′
1 to 𝑐2 in 𝐺 then
1, 𝑐′
6:
11:
12:
13:
14:
𝑖, 𝑗 ∈ [|Antichains|] and 𝑖 < 𝑗 do
for 𝑎𝑖 ∈ 𝐴𝑖 and 𝑎 𝑗 ∈ 𝐴𝑗 do
if 𝑎𝑖 and 𝑎 𝑗 not connected in 𝐺 then
Find successors of 𝑎 𝑗 , 𝑆 𝑗 ⊆ 𝐴𝑗 , and all predecessors of 𝑎 𝑗 ,
𝑃 𝑗 ⊆ 𝐴𝑗 . Add 𝑎 𝑗 to 𝑆 𝑗 , 𝑃 𝑗 .
Find successors of 𝑎𝑖, 𝑆𝑖 ⊆ 𝐴𝑖, and all predecessors of 𝑎𝑖,
𝑃𝑖 ⊆ 𝐴𝑖. Add 𝑎𝑖 to 𝑆𝑖, 𝑃𝑖.
if ∃ path from 𝑝 to 𝑞 in 𝐺, s.t. 𝑝 ∈ 𝑆 𝑗 , 𝑞 ∈ 𝑃𝑖 then
Add edge (𝑎 𝑗 , 𝑎𝑖) to 𝐺′
else if ∃ path from 𝑝 to 𝑎 𝑗 in 𝐺, s.t. 𝑝 ∈ 𝑃𝑖 then
Add edge (𝑎 𝑗 , 𝑎𝑖) to 𝐺′
else if ∃ path from 𝑝 to 𝑞 in 𝐺, s.t. 𝑝 ∈ 𝑃 𝑗 , 𝑞 ∈ 𝑆𝑖 then
Add edge (𝑎𝑖, 𝑎 𝑗) to 𝐺′
15:
16:
17:
18:
19:
20:
21: // Find any collinearities.
22: // The pseudocode for Boxes can be found in the Appendix.
23: Let 𝐸 be an empty list.
24: for (𝑞, 𝑝) ∈ 𝐺′ do
25:
26:
27:
28:
29:
30:
31: Add all edges in 𝐸 to 𝐺′
32: Remove transitive edges from 𝐺′
33: Return 𝐺′
𝑃𝑞,𝑝, 𝑆𝑝,𝑞, 𝑃𝑝,𝑞 = Boxes(𝑝, 𝑞)
Let 𝑆 = 𝑃𝑞,𝑝 ∪ 𝑆𝑝,𝑞 ∪ 𝑃𝑝,𝑞
if ∃𝑘 ∈ 𝑆, where there is no path from 𝑘 to 𝑝 in 𝐺′ then
Add an appropriate edge between 𝑘 and 𝑝 in 𝐺′
if ∃𝑘 ∈ 𝑆, where there is no path from 𝑘 to 𝑞 in 𝐸 then
Add an appropriate edge between 𝑘 and 𝑞 in 𝐸
Session 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2251Algorithm 4: OrderReconstruction(RS(D))
1: PossibleConfigs = FindExtremePairs(RS(D))
2: for config ∈ PossibleConfigs do
3: 𝐺, 𝐴0 = DomGraph(RS(D), config)
4: 𝐺′ = AntiDomGraph(RS(D), 𝐺, Antichains(RS(D), 𝐺, 𝐴0))
Let closePairs and antipodalPairs be empty lists.
5:
Find the smallest response that contains top and bottom. If it
6:
contains no other points, then add (top, bottom) to antipodalPairs.
Find the smallest response that contains left and right. If it contains
no other points, then add (left, right) to antipodalPairs.
for each edge (𝑏, 𝑎) ∈ 𝐺 do
if (𝑏, 𝑎) satisfy Definition 3.3 then
Add (𝑏, 𝑎) to closePairs
if response set of points with orders (𝐺, 𝐺′) is RS(D) then
Return (𝐺, 𝐺′, antipodalPairs, closePairs)
7:
8:
9:
10:
11:
12:
Figure 6: Dominance (right) and anti-dominance (left)
graphs of the (top) California and (bottom) Spitz datasets.
to its index in each dimension’s ordering. The figure shows each
antichain in a different color, illustrating the height increase, as well
as an 𝛼-shape [11] of the point-set, illustrating the overall shape.
Malte Spitz is a German politician who published his phone
location between 8/31/2009 and 2/21/2010 [43]. Our Spitz dataset
comprises longitude and latitude information from the first day,
truncating it to one decimal place, and scaling it by a factor of 10.
We also ran our order reconstruction attack on the Healthcare
Cost and Utilization Project (HCUP) Nationwide Inpatient Sam-
ple (NIS) 2008 and 2009 medical datasets [1], but we are unable
to share images of the reconstructions, per the HCUP data usage
agreement. The HCUP dataset has been previously used in other
reconstruction attacks [13, 28, 29]. The reconstructed dominance
graph and anti-dominance graph of the California and Spitz datasets
are shown in Figure 6.
Order reconstruction in two-dimensions is significantly more
enlightening than in one-dimension. We conjectured that the geom-
etry of the data is more observable when data is more dense in one
or both of the domains. Our results from the California dataset sup-
port this: we can clearly see that this location data comes from the
state of California. In the Spitz case, we can still recover the shape
of the dataset and see that it is a deeply diagonal database with a
number of collinearities and reflectable components (Figure 6).
We further note that to compute the correct order from the set of
possible equivalent orders, one can extend the symmetry breaking
method from [13] by using auxiliary information about the database,
such as known values of some records or statistical information.
6 Estimating the Query Density Functions
Recall that the query density, 𝜌𝑆, of a set of records 𝑆 corresponds
to the number of unique range queries that contain all records in 𝑆.
One of the challenges of reconstructing a database D with partial
knowledge of the search pattern, is that the adversary can no longer
compute the exact 𝜌 values by constructing RM(D). Thus, the two-
dimensional FDR attack [13] no longer applies. To reconstruct with
missing queries, we draw inspiration from [27] and use statistical
estimators to estimate the 𝜌 values.
In Section 7 we show how these 𝜌 estimates can be used to con-
struct a system of non-linear equations whose solution corresponds
to an approximate reconstruction of the target database.
Formally, let D be a database of 𝑅 records and let 𝑀 = {{(𝑡1, 𝐴1),
. . . , (𝑡𝑚, 𝐴𝑚) : 𝐴𝑖 ∈ RS(D)}} be a sample (i.e. multiset) of 𝑚 token-
response pairs that are leaked when queries are issued according
to an arbitrary distribution. Let 𝐿 ⊆ 𝑀 be a subsample of 𝑀 of size
𝑛. Given a sample (multiset) 𝑀 of 𝑚 token-response pairs, we show
how one may compute the appropriate submultisets 𝐿 ⊆ 𝑀 that
correspond to the 𝜌 functions of interest. Each of these submultisets
is used to approximate the value of its respective 𝜌 value.
6.1 Non-parametric Estimators
Sampling-based estimators have been used in various domains
ranging from databases [21] to ecology (e.g. [2, 3]). Non-parametric
estimators do not require prior knowledge of the query distribution,
yet their success hinges upon the underlying distribution from
which queries are drawn. Indeed, for skewed distributions, it may be
information theoretically impossible to obtain a reasonable estimate.
Recently, non-parametric estimators have been used for database
reconstruction to estimate the support size of the given conditional
probability distribution of a particular record identifier [27].
For our reconstruction attack, we have considered the estima-
tors by Chao and Lee [8] and by Shlosser [42], and the jackknife
estimators described in [2, 3].
For more details about the above estimators, see Appendix D.
We initially considered also the Valiant-Valiant estimator [45] as it
was used in [27]. However, it did not perform as well in our case.
6.2 Experiments
We ran our estimators against two datasets with domain sizes 25×25
and 18 × 33. The first dataset is the first day of the Spitz dataset (de-