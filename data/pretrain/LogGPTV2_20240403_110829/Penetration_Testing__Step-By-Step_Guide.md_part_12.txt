compromised applications. This is highly dependent on the antivirus
application having an updated list of compromised apps. Android anti-
malware also often looks for rooted devices. Users may root a phone to
access features and information, bypass the sandboxing features that ask for
access to contacts, texts and more, or to access new or custom ROMs.
Note that by default android devices does not allow installation of
applications from unknown sources and the users must manually enable the
device to allow installing application from unknown sources. Rooting
android device is totally not recommended, and many android devices
manufactures warn users if they root the device, they will lose device
warranty.
Google Play Protect
Google Play Protect automatically scans all the apps on Android phones and
works to prevent the installation of harmful apps, making it the most widely
deployed mobile threat protection service in the world.
Android Runtime ART
Android Runtime ART is a process virtual machine to isolate each running
application in android from the OS kernel and from other running
S_E_Oblako
application, ART Replaced Dlavik virtual machine runtime since Android 5
(Lollipop).
16.7. Android Authentication (screen lock)
Android screen lock uses four methods to secure android devices, Patterns,
PIN code, Password and Biometrics (face recognition and fingerprint).
Biometrics require setting PIN or a password.
Below some of the android screen lock characteristics:
S_E_Oblako
Locking screen dependent in two factors PIN code (4 or more
digits) or Password+ Device User ID (UID).
The device user ID is a physical ID part of the device itself.
Android mix the two to create a hash that used to allow access and
used in device data encryption or had disk encryption.
Offline brute force does not work with android phones because the
phone PIN code must be used physically on the phone and cannot
be used remotely.
Android allow 5 consecutive wrong PIN code to be entered then it
apply lock on the device for 30 seconds after each wrong PIN code
entered for another 5 times then the Lock time increased to 5
minutes after each wrong PIN entered.
Find my phone feature, if it is enabled it will allow the user to Erase
the data on the device remotely when the device connected to the
internet.
16.8. Introduction to Apple iOS
iOS (formerly iPhone OS) is a mobile operating system created and
developed by Apple Inc. exclusively for its hardware. It is the operating
system that powers many of the company's mobile devices, including the
iPhone and iPod Touch; it also powered the iPad until the introduction of
iPadOS, a derivative of iOS, in 2019. It is the world's second-most widely
S_E_Oblako
installed mobile operating system, after Android. It is the basis for three other
operating systems made by Apple: iPadOS, tvOS, and watchOS. It is
proprietary software, although some parts of it are open source under the
Apple Public Source License and other licenses.
Unveiled in 2007 for the first-generation iPhone, iOS has since been
extended to support other Apple devices such as the iPod Touch (September
2007) and the iPad (January 2010). As of March 2018, Apple's App Store
contains more than 2.1 million iOS applications.
Major versions of iOS are released annually. The current stable version, iOS
14, was released to the public on September 16, 2020.It brought many user
interface changes, including the ability to place widgets on the home screen, a
compact UI for both Siri and phone calls, and the ability to change both the
default web browser and email apps.
S_E_Oblako
Applications
iOS devices come with preinstalled Apple apps including Email, Apple
Maps, TV, FaceTime, Podcast, Wallet, Health, and many more.
Applications ("apps") are the most general form of application software that
can be installed on iOS. They are downloaded from the official catalog of the
App Store digital store, where apps are subjected to security checks before
being made available to users. IOS applications can also be installed directly
from an IPA file provided by the software distributor, via unofficial ways.
S_E_Oblako
They are written using iOS Software Development Kit (SDK) and, often,
combined with Xcode, using officially supported programming languages,
including Swift and Objective-C. Other companies have also created tools
that allow for the development of native iOS apps using their respective
programming languages.
The SDK includes an inclusive set of development tools, including an audio
mixer and an iPhone simulator. It is a free download for Mac users. It is not
available for Microsoft Windows PCs. To test the application, get technical
support, and distribute applications through App Store, developers are
required to subscribe to the Apple Developer Program.
IPA files
IPA files are similar to android APK files, executable files that can run
application in iPhone from outside the app store and there are many ways to
install the files into the iPhone such as through a PC using program called
Cydia Impactor or over the air using a website. iOS using sandbox method to
isolate apps so if the iPhone is not jailbroken the application will be
extremely limited.
Jailbreaking iOS
Jailbreaking is taking control of the iOS operating system that is used on
Apple devices, in simple words it is the same as Rooting Android devices. It
removes the device from the dependencies on exclusive Apple source
applications and allows the user to use third-party apps unavailable at the
official app store.
It is accomplished by installing a modified set of kernel patches that allows
you to run third-party applications not signed by the OS vendor. It is used to
add more functionality to standard Apple gadgets. It can also provide root
access to the operating system and permits download of third-party
applications, themes, extensions, etc. This removes sandbox restrictions,
which enables malicious apps to access restricted mobile resources and
information.
Jailbreaking, like rooting, also has some security risks to your device:
Voids your phone's warranty
Poor performance
Malware infection
S_E_Oblako
16.9. iOS Authentication (screen lock)
iOS screen lock uses 4 to 6 digits passcode , face ID ( face recognition )plus
passcode and touch ID ( finger print) plus passcode , the passcode alongside
with Device ID used by iOS to create encryption key that encrypt all iPhone
or iPad files in the disk.
Below some of the iOS screen lock characteristics:
Unique Device ID (UID) is a unique identifier for a single device
that is fetched from Apple servers when a user tries to activate the
device using iCloud or the Setup app. This ID is also used by iTunes
to detect the phone or to communicate with it while restoring the
iPSW firmware.
IPSW is a file format used in iTunes to install iOS firmware. All
Apple devices share the same IPSW file format for iOS firmware,
allowing users to flash their devices through iTunes on macOS and
Windows
Passcode key is derived by hashing passcode and Device ID.
Hashing uses secret UID (Unique Device Identifier) on secure
enclave.
After 5 wrong passcodes, iOS will put 1-minute delay between
attempts.
After the 9th attempt the delay will be one hour.
After the 10th failed attempt, the erase phone procedure will start
and erase all phone data.
Offline Brute force does not work.
Online brute force will lead to the phone erase data after 10
attempts, so it does not work also.
S_E_Oblako
Apple Find my phone app used to track the iPhone location, play
sound, and erase data.
Mobile Device Management (MDM) software:
MDM is an enterprise software to manage and control employee
mobile phones. Both android and iOS have an API to allow the
remote administration of the devices that include changing the
device passcode, erasing device data and more.
16.10. Mobile Application Penetration Testing
There are several ways to test android and iOS Mobile applications, OWASP
published the OWASP Mobile Top 10 list (https://owasp.org/www-project-
mobile-top-10/) which Penetration testers should try to verify the security of
the Mobile application.
OWASP Mobile Top 10 Risks:
1- M1: Improper Platform Usage
This category covers misuse of a platform feature or failure to use platform
security controls. It might include Android intents, platform permissions,
misuse of Touch ID, the Keychain, or some other security control that is part
of the mobile operating system.
2- M2: Insecure Data Storage
Threats agents include the following: an adversary that has attained a
lost/stolen mobile device; malware or another repackaged app acting on the
adversary’s behalf that executes on the mobile device.
3- M3 Insecure Communication
When designing a mobile application, data is commonly exchanged in a
client-server fashion. When the solution transmits its data, it must traverse the
mobile device’s carrier network and the internet. Threat agents might exploit
vulnerabilities to intercept sensitive data while it’s traveling across the wire.
The following threat agents exist:
An adversary that shares your local network
(compromised or monitored Wi-Fi).
Carrier or network devices (routers, cell towers, proxy’s,
etc).
S_E_Oblako
Malware on your mobile device.
4- Insecure Authentication
Threat agents that exploit authentication vulnerabilities typically do so
through automated attacks that use available or custom-built tools.
5- Insufficient cryptography
Threat agents include the following: anyone with physical access to data that
has been encrypted improperly, or mobile malware acting on an adversary’s
behalf.
6- Insecure Authorization
Threat agents that exploit authorization vulnerabilities typically do so through
automated attacks that use available or custom-built tools
7- Poor Code Quality
Threat Agents include entities that can pass untrusted inputs to method calls
made within mobile code. These types of issues are not necessarily security
issues in and of themselves but lead to security vulnerabilities. For example,
buffer overflows within older versions of Safari (a poor code quality
vulnerability) led to high risk drive-by Jailbreak attacks. Poor code-quality
issues are typically exploited via malware or phishing scams.
8- Code Tampering
Typically, an attacker will exploit code modification via malicious forms of
the apps hosted in third-party app stores. The attacker may also trick the user
into installing the app via phishing attacks.
9- Reverse Engineering
An attacker will typically download the targeted app from an app store and
analyze it within their own local environment using a suite of different tools.
10- Extraneous Functionality
Typically, an attacker seeks to understand extraneous functionality within a
mobile app to discover hidden functionality in in backend systems. The
attacker will typically exploit extraneous functionality directly from their
own systems without any involvement by end-users.
S_E_Oblako
Exercise 66: Setting up Android testing environment
The following tools needed to test Android devices:
Android Studio for PC mainly to use Android phone emulator.
Android SDK for PC to use ADB tool to communicate and
send commands to android phone emulator and physical
android phone.
Physical android phone
Note
For this exercise we are going to use Windows machine because the Android
Phone emulator comes with its own virtual environment and if it installed
inside virtual machine it will not work, because virtual machines need
hardware acceleration. You cannot run a virtual machine inside a virtual
machine. Kali Machine that we were using in the previous exercises is a
virtual machine and we cannot use for the Android Testing. If you have Kali
as the main OS, then you can use the above-mentioned tools with Kali.
Android Studio is the official Integrated Development
Environment (IDE) for Android app development, based on IntelliJ
IDEA. On top of IntelliJ's powerful code editor and developer tools,
Android Studio offers even more features that enhance your
productivity when building Android apps, such as:
A flexible Gradle-based build system.
A fast and feature-rich emulator.
A unified environment where you can develop for all Android
devices.
Apply Changes to push code and resource changes to your
running app without restarting your app.
Code templates and GitHub integration to help you build
common app features and import sample code
Extensive testing tools and frameworks.
Lint tools to catch performance, usability, version
compatibility, and other problems
C++ and NDK support.
Built-in support for Google Cloud Platform, making it easy to
integrate Google Cloud Messaging and App Engine
S_E_Oblako
Android Studio minimum requirements:
Microsoft® Windows® 7/8/10 (64-bit).
4 GB RAM minimum, 8 GB RAM recommended.
2 GB of available disk space minimum.
4 GB Recommended (500 MB for IDE + 1.5 GB for
Android SDK and emulator system image).
1280 x 800 minimum screen resolution.
1. Download and Install Android Studio from
https://developer.android.com/.
2. Download and install SDK from https://developer.android.com/
3. The SDK contain Android Debug Bridge (ADB)
Android Debug Bridge (adb)
Android Debug Bridge (adb) is a versatile command-line tool that lets you
S_E_Oblako
communicate with android device. The adb command facilitates a variety of
device actions, such as installing and debugging apps, and it provides access
to a Unix shell that you can use to run a variety of commands on a device. It
is a client-server program that includes three components:
A client sends commands to the development machine. You can
invoke a client from a command-line terminal by issuing an adb
command.
A daemon (adbd), which runs commands on a device. The
daemon runs as a background process on each device.
A server, which manages communication between the client
and the daemon. The server runs as a background process on
your development machine.
4- Start Android Studio and start new project for the first time.
5- In Android Studio open AVD Manager.
6- Choose Pixel or you can create new Virtual Device by clicking on the +
sign
7- Start the virtual device
8- Navigate to the SDK file downloaded the folder is called Platform-tools
and unzip it
S_E_Oblako
9- Right click in the space + shift key to open PowerShell windows
10- Type >./adb to see the tool help menu.
S_E_Oblako
11-Type >./adb devices to connect to emulator.
12-Type >./adb shell to get access to android shell
11. Note that I get root access privilege because the emulator is rooted.
S_E_Oblako
12. Type #top to see all the running processes in the virtual android
device.
13. Type Ctrl + C to exit top
14. Type #exit to exit from the shell
15. Close the virtual phone emulator
16. Make sure the virtual phone emulator is not connected to the ADB
tool
Exercise 67: Connecting a Physical android Phone to ADB tool
1. Enable USB debugging in the Physical Phone
2. I am using Samsung S8+ for the test, below the procedure on how
to enable USB debugging for Samsung galaxy S8 , it might be
slightly different for other android devices.
S_E_Oblako
3. Make sure adb terminal is running
4. Connect the phone via usb cable to the PC
5. Answer Okay to allow USB debugging in the phone
6. In adb terminal type >adb devices
S_E_Oblako
7. In adb terminal type ./adb devices
S_E_Oblako
8. Notice that although I am connected to the phone, I don’t have root
permission because the devices is not rooted. I have user permission
with limited access to some files and folders inside the phone.
9. Type >./adb shell
10. Type #whoami ( the user is shell )
11. Type #la -al ( notice that there are some folders have access
permission denied because the user shell does not have root
privileges as the phone is not rooted)
12. Type # top to see the running processes in the phone
S_E_Oblako
13. Type ctrl +c
Exercise 68: Downloading a file or folder from Phone to PC
1. Navigate to the file/folder you want to download
>./adb shell
#cd sdcrad
#cd DCIM
cd screenshots
#pwd
2. Copy the complete link to the files you want to download
3. Use pull command to download a folder or a file from the Phone to
the PC and push command to upload files from the PC to the phone.
S_E_Oblako
4. Type >./adb pull /sdcard/DCIM/screenshots
S_E_Oblako
5. The folder will be downloaded to the Windows machine with all it
contents.
Exercise 69: Installing APK files into Android Virtual machine
In this exercise we are going to download DIVA APK,. DIVA (Damn
insecure and vulnerable App) is an android App intentionally designed to be
insecure. The aim of the App is to teach developers/QA/security
professionals, flaws that are generally present in the Apps due poor or
insecure coding practices.
1. From PC download DIVA from the following Link
2. http://www.payatu.com/wp-content/uploads/2016/01/diva-
beta.tar.gz
3. Unzip the file to the same ADB folder
4. Start Android Virtual device from Android Studio
S_E_Oblako
5. Make sure the diva-beta.apk file is extracted successfully
6. Install the Diva-beta.apk file >./adb install diva-beta.apk
S_E_Oblako
7. In the Android Virtual device start Diva
Exercise 70: Getting Mobile App username and password
Mobile applications store data related to the app inside the Mobile phone in a
folder, if the Mobile app store data in clear text we can read the data via adb
tool or any other android malware. In this exercise we going to check the
DIVA mobile app to see the user credential because this app store data in
clear test.
S_E_Oblako
1. In Virtual Android Phone start Diva App
2. From PC Pwershell start ./adb shell to have a shell access from the
Virtual phone
3. Make sure that you have root access #whoami
4. If you don’t have root access type #exit
5. Type ./adb root to have root access then ./adb shell to go back to
the device shell
6. Type cd /data/data (to show all mobile apps data files)
S_E_Oblako
7. The Mobile app we are testing is Diva , so we can see a folder
called jakhar.aseem.diva
8. Type #cd jakhar.aseem.diva
9. Type #ls -l
10. Type cd shared_prefs/
11. Type #cat jakhar.aseem.diva_perferences.xml
12. Reading the xml file show the username and password used by the
application to access application resources.
13. We can use these credentials to access the account from another
device and see and change the information related to that user.
S_E_Oblako
Exercise 71: Mobile App SQL injection
Mobile application store Mobile application data either in the device itself or
in a server. Offline apps store all the data on the mobile device whereas
Online apps depend on access to a server for their stored data to function. For
example, E-commerce apps fall into the online apps category.
In this exercise we are going to use DIVA app SQL vulnerability to show the
Mobile user data.
1. Start Android Studio then start Virtual Phone
2. Start adb
S_E_Oblako
3. Start DIVA app on the virtual phone
S_E_Oblako
4. In PC adb terminal type >./adb logcat ( this will provide us with
Realtime logging of all devices activity)
5. In the virtual phone DIVA app enter a single quotation symbol in
the search bar and click search
S_E_Oblako