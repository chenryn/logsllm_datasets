## 漏洞起因、简介
> Websphere ND的集群管理节点预留端口 "管理覆盖层 TCP 端口" 11006端口接收不可信数据反序列化可造成命令执行  
>  Websphere Application Server ND 在创建管理节点概要文件，  
>  起管理端口为  
>  11005(UDP)  
>  11006(TCP)
数据传输的方式采用序列化传输，而且不需要验证身份。端口默认对外
## 漏洞分析
> 步骤概要：  
>  1.序列化TcpNodeMessage消息对象发送到服务器进行处理  
>  2.序列化BcastMsgRunTask消息对象发送到服务器造成RCE
### 数据解析：
**类：com.ibm.son.mesh.CfwTCPImpl**  
核心方法"completedRead(VirtualConnection var1, TCPReadRequestContext var2)"
    private void completedRead(VirtualConnection var1, TCPReadRequestContext var2) {
            boolean var3 = this.peer.isStateStopped();
            if (this.ls.isDebugEnabled()) {
                this.ls.debug("CfwTCPImpl#completedRead() " + this + "; peerStopped=" + var3 + ", quiet=" + this.quiet);
            }
            this.readPending = false;
            if (!var3 && !this.quiet) {
                while(true) {
                    boolean var4 = this.isClosed();
            //读入数据流
                    WsByteBuffer var5 = var2.getBuffer();
                    int var6 = var5.position();
                    int var7 = var6 - this.inputStartPos;
                    int var8 = var5.limit();
                    int var9 = var8 - var6;
                    if (this.ls.isDebugEnabled()) {
                        this.ls.debug("CfwTCPImpl#completedRead() loop " + this + "; peerStopped=" + var3 + ", quiet=" + this.quiet + ", openPending=" + this.openPending + ", closePending=" + this.closePending + ", isClosed=" + var4 + ", readingHeader=" + this.readingHeader + ", inputStartPos=" + this.inputStartPos + ", pos=" + var6 + ", sofar=" + var7 + ", inputMsgLen=" + this.inputMsgLen + ", rembuf=" + var9 + ", inBuffer=" + fi(var5) + ", headerBuffer=" + fi(this.headerBuffer));
                    }
                    if (this.closePending) {
                        if (!this.writeInProgress && !this.openPending) {
                            this.closeLinks();
                        }
                        return;
                    }
                    if (var4) {
                        return;
                    }
                    if (this.closeLinksInvoked) {
                        String var17 = "closeLinksInvoked inside completedRead(" + this + ")";
                        this.ls.severe("SON_EThrow", new Exception(var17));
                        return;
                    }
            //头解析
                    int var12;
                    if (var7 >= this.inputMsgLen) {
                        if (this.readingHeader) {
                            var5.position(this.inputStartPos);
                            var5.get(this.headerArray, 0, 8);
                            var5.position(var6);
                            this.inputStartPos += 8;
                            this.readingHeader = false;
                            this.inputMsgLen = 0;
                            int var15 = Util.bytesToInt(this.headerArray);
                //头4个字节检验：这里读出数据包前4个字节转为int判断是否等于"963622730"，不等于最后会return
                            if (var15 != 963622730) {
                                StringBuffer var20 = new StringBuffer();
                                var20.append("CfwTCPImpl#completeRead() " + this + " bad magic number. Full header contents: \n");
                                for(var12 = 0; var12 = this.inputMsgLen && var10) {
                            if (this.ls.isDebugEnabled()) {
                                this.ls.debug("enough room in remaining buffer");
                            }
                        } else if (var7 == 0 && var8 >= this.inputMsgLen && var10) {
                            if (this.ls.isDebugEnabled()) {
                                this.ls.debug("enough room in whole buffer");
                            }
                            var5.position(this.inputStartPos = 0);
                        } else if (this.readingHeader && var5 == this.headerBuffer) {
                            if (this.ls.isDebugEnabled()) {
                                this.ls.debug("enough room in header buffer");
                            }
                            var5.position(this.inputStartPos);
                            var5.get(this.headerArray, 0, var7);
                            var5.clear();
                            var5.put(this.headerArray, this.inputStartPos = 0, var7);
                        } else {
                            WsByteBuffer var11;
                            if (this.readingHeader) {
                                var11 = this.headerBuffer;
                                var11.clear();
                            } else {
                                var11 = this.allocReadBuffer(this.inputMsgLen, false);
                            }
                            if (var7 > 0) {
                                var5.flip();
                                var5.position(this.inputStartPos);
                                var11.put(var5);
                            }
                            var2.setBuffer(var11);
                            this.releaseReadBuffer(var5, this.headerBuffer);
                            if (this.ls.isDebugEnabled()) {
                                this.ls.debug("Switching from buffer " + fi(var5) + " to " + fi(var11));
                            }
                            this.inputStartPos = 0;
                            var6 = var11.position();
                        }
                        this.readPending = true;
                        int var13;
                        VirtualConnection var18;
                        if (this.readingHeader && var7 == 0) {
                            var12 = 1;
                            long var10001 = (long)1;
                            int var10004 = this.msgArrivalTimeout > 0 ? this.msgArrivalTimeout : -1;
                            var13 = var10004;
                            var18 = this.rrc.read(var10001, this, false, var10004);
                        } else {
                            var18 = this.rrc.read((long)(var12 = this.inputMsgLen - var7), this, false, var13 = this.tcpReadTimeout);
                        }
                        if (var18 == null) {
                            if (this.ls.isDebugEnabled()) {
                                this.ls.debug("CfwTCPImpl#completedRead() blocked; header incomplete; readLen=" + var12 + " timeout=" + var13 + "; The callback will be invoked later. " + this);
                            }
                            return;
                        }
                        this.readPending = false;
                    }
                }
            } else {
                if (this.ls.isDebugEnabled()) {
                    this.ls.debug("Quiet or peer already closed. Ignore the completed read.");
                }
            }
        }
**可以看到上面注释的几个关键点：**
  1. 解析头部
  2. 解析消息长度（根据头部的后4个字节确认消息长度）
  3. 处理消息
**大概流程：**
  1. 读出头部（前8个字节 注：实际POC有9个字节前4字节为头检验，后4字节为消息长度，最后一个字节为\x00）
  2. 验证前4个字节的值（头校验）
  3. 读出后4个字节，确认消息长度
  4. 处理完头数据，继续while循环根据消息长度取出消息并进行进一步解析
### 消息解析：
继续跟进"procReceivedMessage(byte[] var1, int var2, int var3)"方法：  
这个方法在父类"com.ibm.son.mesh.AbstractTCPImpl"中：
    protected void procReceivedMessage(byte[] var1, int var2, int var3) throws IOException {
            Neighbor var4 = this.getNeighbor();
            if (var4 != null) {
                var4.setLastMsgTime();
            }
            Message var5;
            try {
                long var6 = System.nanoTime();
               //对消息反序列化
                var5 = (Message)Util.deserialize(var1, var2, var3);
                long var8 = System.nanoTime();
                this.peer.netStats.finishReadTcp(var5, var1, var2, var3, true, var8 - var6);
            } catch (IOException var15) {
                this.peer.warning(var15);
                return;
            }
            var5.setLength(var3);
            if (WASConfig.useTcpChannelFramework && this.peer.isStateStopped()) {
                if (var5.type == 57) {
                    this.hardClose();
                }
            } else {
            //继续处理消息
                Message var16 = this.procMessage(var5);
            //如果返回的结果不为Null, 这里会广播到各个节点
                if (var16 != null) {
                    boolean var7 = Thread.holdsLock(this.peer);
                    long var9;
                    long var11;
                    byte[] var17;
                    try {
                        var9 = System.nanoTime();
                        var17 = Util.serializeWithHeader(var16, this.peer);
                        var11 = System.nanoTime();
                    } catch (IOException var14) {
                        this.peer.panic(var14);
                        return;
                    }
                    if (var7) {
                        this.peer.netStats.finishWriteTcp(var16, var17, false, var11 - var9, var17.length);
                    }
            //广播
                    this.sendData(var17, var16.ID, (AfterMsgSentCallback)null);
                }
            }
        }
我们的发送的序列化Payload1(TcpNodeMessage)被反序列化之后并进行处理
### 消息处理：
继续跟进"procMessage(Message var1)"方法：
    public Message procMessage(Message var1) {
            if (this.ls.isDebugEnabled()) {
                this.ls.fine("Received TCP message " + var1 + " from " + this);
            }
            if (this.nextMsgProcessor != null) {
                Message var2 = this.nextMsgProcessor.procMessage(this, var1);
                if (this.ls.isDebugEnabled() && var2 != null) {
                    this.ls.fine("Reply to " + this + " message: " + var2);
                }
                if (var1.isProcessed()) {
                    return var2;
                }
            }
        //取出消息处理器Iterator 
            Iterator var5 = this.peer.tcp.protocolStackIterator();
            Message var4;
        //循环处理
            do {
                if (!var5.hasNext()) {
                    if ((var1.type & 268435456) != 0) {
                        if (Config.DEBUG) {
                            this.peer.warning("A received message from " + this + " is not processed by any stack and discarded [" + var1 + "]. The message class is " + var1.getClass().getName() + ". The TCP connection is closed as this is an auto-close message.");
                        }
                        this.hardClose();
                    } else if (Config.DEBUG) {
                        this.peer.warning("A received message from " + this + " is not processed by any stack and discarded [" + var1 + "]. The message class is " + var1.getClass().getName());
                    }
                    return null;
                }
                ProtocolTCP var3 = (ProtocolTCP)var5.next();
            //处理
                var4 = var3.procMessage(this, var1);
                if (this.ls.isDebugEnabled() && var4 != null) {
                    this.ls.fine("Reply to " + this + " message: " + var4);
                }
            } while(!var1.isProcessed());
            return var4;
        }
这里是取出了消息处理器（List）对消息循环处理
### TcpMsgTypeBasedDispatcher 处理器：
> 在处理器中有一个类"com.ibm.son.mesh.TcpMsgTypeBasedDispatcher"，需要重点关注
来看TcpMsgTypeBasedDispatcher.procMessage(TCP var1, Message var2):
    public Message procMessage(TCP var1, Message var2) {
            this.tmpType.type = var2.type;
        //根据消息Type拿出处理器进行处理
            ProtocolTCP var3 = (ProtocolTCP)this.protocols.get(this.tmpType);
            return var3 == null ? null : var3.procMessage(var1, var2);
        }
这里想要什么处理器来处理是可以自定义的  
因为Message对象就是我们序列化的TcpNodeMessage对象，这里的Type自定为12，可以看到拿到的是一个"com.ibm.son.mesh.MemberMgr"  
### MemberMgr 处理器：
跟进"procMessage(TCP var1, Message var2)"方法：
    public Message procMessage(TCP var1, Message var2) {
            if (this.peer.isDebugEnabled() && var2.type != 12 && var2.type != 22 && var2.type != 23) {
                this.peer.panic("Wrong message type: " + var2);
            }
            TcpNodeMessage var4 = (TcpNodeMessage)var2;
            if (this.peer.isDebugEnabled()) {
                this.peer.fine("Received NEW_NBR_REQ from " + var4);
            }
            int var5 = var2.type;
        //至Type为-1
            var2.markProcessed();
        //查找是否存在对应节点
            Node var6 = this.members.find(var4.ip, var4.udpPort);
            Node var7;
        //不存在对应节点则生成一个新节点赋值给Var7，之后会注册这个节点
            if (var6 == null) {
                var7 = new Node(var4.ip, var4.udpPort, var4.tcpPort, var4.bootTime, var4.nodeProperty, this.peer.bigKey);
            } else {
                var7 = var6;
            }
            boolean var3;
            Neighbor var8;
            if (this.neighbors.find(var7) != null) {
                var3 = false;
                if (this.peer.isDebugEnabled()) {
                    this.peer.fine("Reject the new neighbor request: already a neighbor. Neighbors: " + this.neighbors.toString());
                }
            } else if (var5 != 22 && var5 != 23 && !Config.alwaysAcceptNewNeighbor && this.neighbors.size() >= Config.numNbrsHigh) {
                var3 = false;
                if (this.peer.isDebugEnabled()) {
                    this.peer.fine("Reject: Not NEW_NBR_REQ_PREDECESSOR/SUCCESSOR message and too many neighbors (" + this.neighbors.size() + ")");
                }
            } else {
                var8 = this.pendingNeighbors.find(var7);
                if (var8 == null) {
                    if (Config.structuredGateways && !isCellIdentical(this.peer.thisNode, var7)) {
                        if (this.peer.thisNode.getNodeProperty().isStructuredGateway()) {
                            var3 = true;
                            if (this.peer.isDebugEnabled()) {
                                this.peer.fine("we are a structured gateway");
                                if (var7.getNodeProperty().isStructuredGateway()) {
                                    this.peer.fine("Accept: the neighbor request is from a remote structured gateway: neighbors (" + this.neighbors.size() + ")");
                                } else {
                                    this.peer.fine("WARN: Accept: the neighbor request is from a remote cell but is NOT a strucutred gateway: neighbors (" + this.neighbors.size() + ")");