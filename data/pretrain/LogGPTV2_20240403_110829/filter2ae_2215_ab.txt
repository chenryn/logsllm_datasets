                    -> ognl.SimpleNode.getValue()  // 第二次计算，获得当前expr的值为“false”
                     -> ognl.SimpleNode.evaluateGetValueBody()
                      -> ognl.ASTAssign.getValueBody()
                       // 取右边值“#foo”，作为result
                       -> ognl.SimpleNode.getValue()
                        -> ognl.SimpleNode.evaluateGetValueBody()
                         -> ognl.ASTVarRef.getValueBody()
                          -> ognl.OgnlContext.get()  // 从context中取出“#foo”值，false
                       // 取左边值“#context...”，赋值
                       -> ognl.SimpleNode.setValue()
                        -> ognl.SimpleNode.evaluateSetValueBody()
                         -> ognl.ASTChain.setValueBody()
                          // 取左边值“#context”，作为target
                          -> ognl.SimpleNode.getValue()
                           -> ognl.SimpleNode.evaluateGetValueBody()
                            -> ognl.ASTVarRef.getValueBody()
                             -> ognl.OgnlContext.get()  // 从context中取出“#context”值，当前OgnlContext
                          // 取出右边值“[...]”
                          -> ognl.SimpleNode.setValue()
                           -> ognl.SimpleNode.evaluateSetValueBody()
                            -> ognl.ASTProperty.setValueBody()
                             -> ognl.ASTProperty.getProperty() // 得到“xwork.MethodAccessor.denyMethodExecution”字符串
                             -> ognl.OgnlRuntime.setProperty()
                              -> ognl.OgnlRuntime.getPropertyAccessor()
                               -> ognl.OgnlRuntime.getHandler()  // 得到XWorkMapPropertyAccessor对象
                              -> com.opensymphony.xwork2.util.XWorkMapPropertyAccessor.setProperty()
                               -> com.opensymphony.xwork2.util.XWorkMapPropertyAccessor.getKey()  // 得到"xwork.MethodAccessor.denyMethodExecution"字符串
                               -> com.opensymphony.xwork2.util.XWorkMapPropertyAccessor.getValue()  // false
                               -> ognl.OgnlContext.put()  // 修改“xwork.MethodAccessor.denyMethodExecution”值为false
                 // expr为null，抛异常，清除context中存储的临时键值对
           // 处理第二个参数，结构与第一个类似
问题解决
  * 问题1：`(one)(two)`模型的具体执行流程
解答：`(one)(two)`模型生成的AST树属于ASTEval类型，大致执行流程如下：
    1. 计算`one`，结果赋值给变量expr
    2. 计算`two`，结果赋值给变量source
    3. 判断expr是否Node类型 _（AST树）_ ，否则以其字符串形式进行解析 _（ognl.Ognl.parseExpression()）_ ，结果都强制转换成Node类型并赋值给node
    4. 临时将source放入当前root中
    5. 计算node
    6. 还原root
    7. 返回结果
  * 问题2：`(one)((two)(three))`模型的具体执行流程
解答：`(one)((two)(three))`模型属于`(one)(two)`模型的嵌套形式，完全可以参考问题1，执行流程就不再详述了。
#### **S2-005**
调试环境
  * struts2-core-2.1.8.1
  * xwork-core-2.1.6
  * ognl-2.7.3
调试过程
    [ 表层关键逻辑 ]
        com.opensymphony.xwork2.interceptor.ParametersInterceptor.setParameters()
    [ 底层关键逻辑 ]
        com.opensymphony.xwork2.util.OgnlUtil.compile()
        ognl.ASTEval.setValueBody()
    [ 关键调用栈 ]
        -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept()
         -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.setParameters()
          // 遍历参数
           -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.acceptableName()
            -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.isAccepted()  // 判断参数名称是否匹配acceptedPattern正则“[[\p{Graph}\s]&&[^,#:=]]_”
            -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.isExcluded()  // 判断参数名称是否匹配excludeParams正则“dojo\.._”和“^struts\.._”
           // 校验通过，则将参数键值对放入acceptableParameters中
          -> com.opensymphony.xwork2.util.reflection.ReflectionContextState.setDenyMethodExecution()  // 设置DenyMethodExecution为true，并放入context中
          -> com.opensymphony.xwork2.ognl.OgnlValueStack.setExcludeProperties()
           -> com.opensymphony.xwork2.ognl.SecurityMemberAccess.setExcludeProperties()  // 将excludeParams放入OgnlValueStack.securityMemberAccess中（securityMemberAccess与context、root同级，其中allowStaticMethodAccess默认为false）
          // 遍历acceptableParameters（合规参数）
           // 处理第一个参数“('\u0023_memberAccess[\'allowStaticMethodAccess\']')(meh)”
           -> com.opensymphony.xwork2.ognl.OgnlValueStack.setValue()
            -> com.opensymphony.xwork2.ognl.OgnlUtil.setValue()
             -> com.opensymphony.xwork2.ognl.OgnlUtil.compile()  // 生成AST树
             -> ognl.Ognl.setValue()
              -> ognl.Ognl.addDefaultContext()
              -> ognl.SimpleNode.setValue()
               -> ognl.SimpleNode.evaluateSetValueBody()
                -> ognl.ASTEval.setValueBody()
                 -> ognl.SimpleNode.getValue()  // 取左子节点“"#_memberAccess..."”，计算得内部字符串，作为expr
                 -> ognl.SimpleNode.getValue()  // 取右子节点“meh”，计算得null，作为target
                 -> ognl.Ognl.parseExpression()  // 将expr解析为AST树
                 -> ognl.OgnlContext.setRoot()
                 -> ognl.SimpleNode.setValue()
                  -> ognl.SimpleNode.evaluateSetValueBody()
                   -> ognl.ASTChain.setValueBody()
                    -> ognl.SimpleNode.getValue()  // 取左子节点“#_memberAccess”，计算得SecurityMemberAccess对象
                     -> ognl.SimpleNode.evaluateGetValueBody()
                      -> ognl.ASTVarRef.getValueBody()
                       -> ognl.OgnlContext.get()
                        -> ognl.OgnlContext.getMemberAccess()
                    -> ognl.SimpleNode.setValue()  // 取右子节点“["..."]”
                     -> ognl.SimpleNode.evaluateSetValueBody()
                      -> ognl.ASTProperty.setValueBody()
                       -> ognl.ASTProperty.getProperty()  // 得到“allowStaticMethodAccess”字符串
                       -> ognl.OgnlRuntime.setProperty()
                        -> ognl.OgnlRuntime.getPropertyAccessor()
                         -> ognl.OgnlRuntime.getHandler()
                        -> com.opensymphony.xwork2.ognl.accessor.ObjectAccessor.setProperty()
                         -> ognl.ObjectPropertyAccessor.setProperty()
                          -> ognl.ObjectPropertyAccessor.setPossibleProperty()
                           -> ognl.OgnlRuntime.setMethodValue()
                            -> ognl.OgnlRuntime.getSetMethod()  // 得到“setAllowStaticMethodAccess()”方法
                            -> com.opensymphony.xwork2.ognl.SecurityMemberAccess.isAccessible()  // 判断方法是否合规
                            -> ognl.OgnlRuntime.callAppropriateMethod()  // 修改“allowStaticMethodAccess”值为true
           // 处理其余参数，与S2-003流程类似
问题解决
  * 问题3：`denyMethodExecution`和`allowStaticMethodAccess`两者使用的模型是否可以互换
解答：`denyMethodExecution`存在于OgnlContext.values（即对外暴露的context本身）HashMap中，而`allowStaticMethodAccess`存在于OgnlValueStack.securityMemberAccess（与context同级，可以使用`#_memberAccess`取到）对象中。
    * 将`allowStaticMethodAccess`参照`denyMethodExecution`模型改写，执行成功
    * 将
                denyMethodExecution
参照
                allowStaticMethodAccess
模型改写，执行失败，原因分析如下：
      * `denyMethodExecution`的accessor是XWorkMapPropertyAccessor类型，赋值即对context进行`map.put()`，在value为数组的情况下，会原样赋值为数组，[0]元素为字符串“false”，导致失败
      * `allowStaticMethodAccess`的accessor是ObjectAccessor类型，赋值即通过反射调用对应的`setAllowStaticMethodAccess()`方法，传参刚好为数组，可被正常拆解为其中的单个元素
#### **S2-009**
调试环境
  * struts2-core-2.3.1.1
  * xwork-core-2.3.1.1
  * ognl-3.0.3
调试过程
    [ 表层关键逻辑 ]
        com.opensymphony.xwork2.interceptor.ParametersInterceptor.setParameters()
    [ 底层关键逻辑 ]
        com.opensymphony.xwork2.util.OgnlUtil.compile()
        ognl.ASTEval.setValueBody()
    [ 关键调用栈 ]
        -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept()
         -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.setParameters()
          // 遍历参数
           -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.acceptableName()
            -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.isAccepted()  // 判断参数名称是否匹配acceptedPattern正则“[a-zA-Z0-9\.\]\[\(\)_']+”
            -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.isExcluded()  // 判断参数名称是否匹配excludeParams正则“dojo\.._”和“^struts\.._”
           // 校验通过，则将参数键值对放入acceptableParameters中
          -> com.opensymphony.xwork2.util.reflection.ReflectionContextState.setDenyMethodExecution()  // 设置DenyMethodExecution为true，并放入context中
          -> com.opensymphony.xwork2.ognl.OgnlValueStack.setExcludeProperties()  // 将excludeParams放入OgnlValueStack.securityMemberAccess中（其中allowStaticMethodAccess默认为false）
          // 遍历acceptableParameters（合规参数）
           // 处理第一个参数“foo”（值为“(#context...)(meh)”）
           -> com.opensymphony.xwork2.ognl.OgnlValueStack.setValue()
            -> com.opensymphony.xwork2.ognl.OgnlValueStack.trySetValue()
             -> com.opensymphony.xwork2.ognl.OgnlUtil.setValue()
              -> com.opensymphony.xwork2.ognl.OgnlUtil.compile()  // 生成AST树
              -> ognl.Ognl.setValue()  // 将root[0]（即当前请求action）中的foo设置为“(#context...)(meh)”字符串
           // 处理第二个参数“z[(foo)('meh')]”
           -> com.opensymphony.xwork2.ognl.OgnlValueStack.setValue()
            -> com.opensymphony.xwork2.ognl.OgnlValueStack.trySetValue()
             -> com.opensymphony.xwork2.ognl.OgnlUtil.setValue()
              -> com.opensymphony.xwork2.ognl.OgnlUtil.compile()  // 生成AST树
              -> ognl.Ognl.setValue()  // “z[()()]”为ASTChain类型，两个子节点“z”和“[()()]”都为ASTProperty类型，后者会先对其第一个子节点“()()”计算
问题解决
  * 问题4：`z[(foo)('meh')]`调整执行顺序的原理
解答：经调试，在`Dispatcher.createContextMap()`中会将LinkedHashMap类型的`request.parameterMap`转换为HashMap类型存储在ActionContext的`parameters`和`com.opensymphony.xwork2.ActionContext.parameters`中
_（此时顺序不变）_ 。
    * `StaticParametersInterceptor.intercept()`中`addParametersToContext()`会将`config.params`与ActionContext的`com.opensymphony.xwork2.ActionContext.parameters`合并为一个TreeMap _（TreeMap是红黑树，按key值的自然顺序动态排序，可参考Java的字符串大小比较）_ ，并覆盖ActionContext中的原值
    * `ParametersInterceptor.doIntercept()`中`retrieveParameters()`获取的是`com.opensymphony.xwork2.ActionContext.parameters`的值，因此漏洞作者给出的PoC中给出`z[()()]`形式来保证它的排序靠后 _（z字符的ASCII码在可见字符中非常靠后，而(字符较靠前）_ 。
  * 问题5：`(one).(two)`和`one,two`模型的差异
解答：提取S2-009中payload进行分析，两种模型都能正常执行，细节差异如下：
    * `(one).(two)`被解析成`one.two`，ASTChain类型 _（遍历子节点计算，前子节点的计算结果作为临时root代入后子节点进行计算，返回最后一个子节点的计算结果）_ ，以`.`字符分隔各子节点，payload样本被分解为4个子节点 _（@java.lang.Runtime@getRuntime().exec('calc')被分解为@java.lang.Runtime@getRuntime()和exec('calc')）_
    * `one,two`被解析成`one,two`，ASTSequence类型 _（遍历子节点计算，返回最后一个子节点的计算结果）_ ，以`,`字符分隔各子节点，payload样本被正常分解为3个子节点
### OGNL ASTNode
问题解决了，可是留下的坑还有很多。
在分析过程中可以发现，OGNL尝试把各种表达式根据其结构等特征归属到不同的SimpleNode子类中，且各子类都根据自己的特性需求对父类的部分方法进行了重写，这些特性可能导致表达式最终执行结果受到影响，特别是在构造PoC的时候。因此，将各个子类的特性都了解清楚，会有助于加深对OGNL表达式解析和计算的理解。
_本部分的OGNL相关内容以struts-2.3.33依赖的ognl-3.0.19为分析对象，其他版本或有差异，请自行比对_
首先当然是他们的父类：
  * SimpleNode
（仅对计算相关的方法作解释，解析编译相关的方法也暂略）
    * 主要方法
      * `public SimpleNode(int)`
      * `public SimpleNode(OgnlParser, int)`
      * `public void jjtOpen()`
      * `public void jjtClose()`
      * `public void jjtSetParent(Node)`
      * `public Nod jjtGetParent()`
      * `public void jjtAddChild(Node, int)`
      * `public Node jjtGetChild(int)`
      * `public int jjtGetNumChildren()`
      * `public String toString()`
      * `public String toString(String)`
      * `public String toGetSourceString(OgnlContext, Object)`