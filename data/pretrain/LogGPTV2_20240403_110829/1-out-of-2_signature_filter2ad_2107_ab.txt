g(a+H1(Y ||A||b′)·y)+Sb′ ?= Rb′ · X H2(m||Rb′ ).
On the other hand, according to the scenario of the
application in section 1.3, the content of the document
is usually large and complex; hence, before the original
signer points out which document is the signed one, the
proxy cannot perform the above veriﬁcation, assuming
that the value of m input the hash function is the whole
document not only some keywords of the document.
Furthermore, it is easy to see that the original signer
can also output signature with the same format of the
output of Trans, only if A is chosen by the original
signer.
• Trans: On input two partial signatures (Rb′ , Sb′ , mb′ ),
(b′ = 0, 1), the random number a used in PreSign,
and the proxy’s secret key y, the 1-out-of-2 full sig-
nature generation algorithm outputs a full signature
(R′
b = Sb + (y ·
H1(Y ||ga||b) + a) mod p.
b, b), (b ∈ {0, 1}): R′
b = Rb, S′
b, S′
• Verify: On input a full signature (R′, S′, m), the signer’s
public key X, it outputs 1 if gS ′
holds; otherwise, it outputs 0.
= R′ · X H2(m||R′)
• Reveal: On input two partial signatures (Rb′ , Sb′ , b′),
(b′ = 0, 1) that are output from PreSign together, their
corresponding full signatures (R′
b′ , b′), (b′ = 0, 1),
the value A used in PreSign, and the proxy’s public
key Y , it outputs proxy’s secret key y by the following
equations.
b′ , S′
(cid:26) S′
S′
0 − S0 = y · H1(Y ||A||0) + a mod p,
1 − S1 = y · H1(Y ||A||1) + a mod p.
4.2 Discussion on the Proposal
Scheme QS can be considered as a variant of the Schnorr
In particular, (R′, S′, m) is a signature of the
signature.
Schnorr signature on behalf of the signer, and (A, S′
b −Sb, b),
(b ∈ {0, 1}) is a signature of the Schnorr signature on behalf
of the proxy.
Furthermore, it is easy to see that we can extend the pro-
posal to 1-out-of-k signature, where the signer gives k partial
signatures to the proxy, who can transform only one partial
signature.
In particular, in algorithm PreSign, the signer
returns k partial signature to the proxy, other algorithms
remain the same. In the next section, we give another kind
of extension, named strong 1-out-of-2 signature.
5. STRONG 1-OUT-OF-2 SIGNATURE
394
5.1 Deﬁnition for Strong 1-out-of-2 Signature
In some cases, it is desired to protect rights of the signer
and the proxy even in an extremely aggressive environment,
i.e., the adversary has the unlimited computational power
while the signer or the proxy only has the polynomially
bounded power. In other words, 1) the signer and the proxy
can show the existence of the forgery, and 2) the proxy can
prove his/her innocence if he hasn’t transformed any two
partial signatures that are output from PreSign together.
This enhancement of 1-out-of-2 signature is original from
fail-stop signature [7, 10], which can protect a signer from a
forger with unlimited computational power by enabling the
signer to provide a proof of forgery.
We name the ability of the signer and the proxy to show
the existence of the forgery and the ability of the proxy to
show his/her innocence as Fail-stopability and Argueability,
respectively. We also name the 1-out-of-2 signature with
Fail-stopability and Argueability as strong 1-out-of-2 signa-
ture. The formal deﬁnition is as follows.
Deﬁnition 4. A strong 1-out-of-2 signature scheme is a
tuple of p.p.t. algorithms (SKeyGen, PKeyGen, PreSign,
Trans, Verify, Reveal, Fail-stop, Argue):
• SKeyGen, PKeyGen, PreSign, Trans, Verify, Reveal.
Identical to that in 1-out-of-2 signature.
• Fail-stop. The input of this fail-stop algorithm Fail-
stop could be anything that the signer and the proxy
can obtain, and the signer and the proxy use them
to show the existence of the forgery. The output of
Fail-stop is 1, if the existence of the forgery could be
proved; otherwise, the output is 0.
• Argue. The input of this arguing algorithm Argue
could be anything that the proxy can obtain, and the
proxy uses them to prove his innocence. If the proxy is
innocent indeed, i.e., he never transforms partial sig-
natures (σ0, σ1) from PreSign together to the full sig-
natures, then the output of Argue is 1; otherwise, the
output is 0.
Correctness. The correctness property has three require-
ments. Besides the two requirements 1-out-of-2 signature
has, there are two additional requirements as follows.
• Fail-stopability: Algorithm Fail-stop always works.
• Argueability: Algorithm Argue always works.
5.2 Security Model
Strong 1-out-of-2 signature has the same security notions
with 1-out-of-2 signature: Existential Unforgeability of the
signer’s signature and Conﬁdentiality of the proxy’s secret
key. Note that in these security games, the adversary only
has polynomially bounded power.
5.3 A Concrete Construction
The system parameters of proposed strong 1-out-of-2 sig-
nature scheme are (p, g, h, G, H1, H2), where (p, g, G, H1, H2)
are the same as that in scheme QS, and h is an element of G.
Note that it requires that logg h is unknown to everybody
(except by using the unlimited computational power). This
requirement can be implemented by a hash function from
{0, 1}∗ to G.
• SKeyGen: The signer chooses 4ℓ + 2 random numbers
x(0)
1 , x(0)
2 , {x(i)
1 , x(i)
2 , x(i)
3 , x(i)
4 }ℓ
i=1 from Z∗
p , and computes
(i)
(i)
(0)
(0)
1 hx
1 hx
3 , X (i)
0 = gx
2 and X (i)
i=1), and the secret key isx = (x(0)
and the secret key isy = {y(i)
• PreSign: On input the signer’s secret keyx = (x(0)
X (0) = gx
2 hx
for (i = 1, · · · , ℓ). The public key is X = (X (0), {X (i)
0 ,
X (i)
1 , x(i)
1 }ℓ
2 ,
x(i)
3 , x(i)
{y(i)
1 hy
for (i = 0, · · · , ℓ). The public key is Y = {Y (i)}ℓ
• PKeyGen: The proxy chooses 2ℓ + 2 random numbers
(i)
2
1 , x(0)
2 ,
{x(i)
2 , x(i)
i=1), the proxy’s public key Y =
{Y (i)}ℓ
i=0, and two messages m0, m1 from the mes-
sage space, the partial signature generation algorithm
is performed as follows.
p , and computes Y (0)
i=0 from Z∗
2 , {x(i)
i = gy
1 = gx
1 , x(0)
1 , y(i)
1 , y(i)
1 , x(i)
2 }ℓ
3 , x(i)
4 }ℓ
2 }ℓ
4 }ℓ
i=1).
i=0.
i=0,
(i)
4
(i)
(i)
– Assume that it is the κ-th time, then the signer
computes two partial signatures on m0, m1 as fol-
lows. For (b′ = 0, 1)
σ(1)
b′ = x(0)
σ(2)
b′ = x(0)
1 + H2(mb′ ||κ) · x(κ)
2 + H2(mb′ ||κ) · x(κ)
1+b′ mod p,
3+b′ mod p.
– The signer sends (κ, b′, σ(1)
b′ , σ(2)
b′ ), (b′ = 0, 1) to
the proxy.
• Trans: On input two partial signatures (κ, b′, σ(1)
b′ , σ(2)
b′ ),
(b′ = 0, 1), the 1-out-of-2 full signature generation
algorithm outputs a full signature (κ, b, σ(1)
),
(b ∈ {0, 1}).
, σ(2)
b
b
′
′
b
σ(1)
σ(2)
b
′
′
= σ(1)
= σ(2)
b + (y(0)
b + (y(0)
1 + y(κ)
2 + y(κ)
1
2
· H1(κ||b)) mod p,
· H1(κ||b)) mod p.
, σ(2) ′
• Verify: On input a full signature (κ, b, σ(1)′
, m),
the signer’s public key X , it outputs 1 if
gσ ′(1)
= (X (0)·Y (0)·(Y (κ))H1(κ||b))·(X (κ)
·hσ ′(2)
b
)H2(m||κ)
holds; otherwise, it outputs 0.
• Reveal: On input two partial signatures (κ, b′, σ(1)
(b′ = 0, 1), two full signatures (κ, b′, σ(1)
b′
0, 1), and the proxy’s public key Y,
proxy’s secret key (y(0)
tions.
1 , y(0)
b′ , σ(2)
), (b′ =
it outputs the
2 ) by the following equa-
, σ(2)
b′
′
′
b′ ),
′
′
′
′
σ(1)
0
σ(2)
0
σ(1)
1
σ(2)
1
1
− σ(1)
− σ(2)
− σ(1)
− σ(2)
0 = y(0)
0 = y(0)
1 = y(0)
1 = y(0)
1 + y(κ)
2 + y(κ)
1 + y(κ)
2 + y(κ)
1
2
2
· H1(κ||0) mod p,
· H1(κ||0) mod p,
· H1(κ||1) mod p,
· H1(κ||1) mod p,
)∗, (σ(2)′
• Stop-fail: With a forgery (κ∗, b∗, (σ(1)′
)∗, m∗),
)∗, m∗).
)∗, (σ(2)′
the proxy and the signer do the following steps: The
signer generates a partial signature (κ∗, b∗, σ(1), σ(2), m∗),
and sends it to the proxy with (κ∗, b∗, (σ(1)′
Upon receiving the data from the signer, the proxy
ﬁrst checks the validity of the received data. If it is
valid, then the proxy computes and outputs the full
signature (κ∗, b∗, σ(1)′
, m∗); otherwise, the proxy
aborts the algorithm.
Under the assumptions that the DL problem is hard
in G, and that the signer and the proxy only have
polynomially bounded power, we can conclude that
once the signer and the proxy output logg h, a forgery
indeed exists.
, σ(2)′
395
′
′
• Argue: With (y(0)
, y(0)
2
1
) output by the signer, the
proxy outputs logg h = (y(0)
1 − y(0)
) mod
p. Under the assumptions that the DL problem is hard
in G, and that the proxy only has polynomially bounded
power, we can conclude that once the proxy outputs
logg h, he is innocent.
2 − y(0)
)/(y(0)
2
1
′
′
Remark 3. Although the proposed strong 1-out-of-2 sig-
nature scheme has Fail-stopability and Argueability, it has
the following disadvantages: (a) The veriﬁer should know
the signer’s public key and the proxy’s public key. (b) The al-
lowed times of signing for (X , Y) is pre-deﬁned and limited.
(c) Generating a full signature should involve the proxy.
6. FINAL REMARKS
Let us conclude with the following statements concerning
security of our schemes (rather standard proofs are omitted):
Theorem 1. Scheme QS is existentially unforgeable and
conﬁdential in the random oracle model based on the DL
assumption.
Theorem 2. The strong 1-out-of-2 signature scheme is
existentially unforgeable and conﬁdential in the standard model
based on the DL assumption.
7. REFERENCES
[1] M. Blaze, G. Bleumer, and M. Strauss. Divertible
protocols and atomic proxy cryptography. In
EUROCRYPT 1998, volume 1403 of LNCS, pages
127–144, 1998.
[2] D. Boneh, X. Ding, G. Tsudik, and C. Wong. A
Method for Fast Revocation of Public Key Certiﬁcates
and Security Capabilities. In the 10th USENIX
Security Symposium, pages 297–308, 2001.
[3] D. Chaum and H. van Antwerpen. Undeniable
signatures. In CRYPTO 1990, volume 435 of LNCS,
pages 212–216, 1990.
[4] T. ElGamal. A public key cryptosystem and a
signature scheme based on discrete logarithms. IEEE
Transactions on Information Theory, 31(4):469–472,
1985.
[5] M. Jakobsson, K. Sako, and R. Impagliazzo.
Designated Veriﬁer Proofs and Their Applications. In
EUROCRYPT 1996, volume 1070 of LNCS, pages
143–154, 1996.
[6] M. Mambo, K. Usuda, and E. Okamoto. Proxy
signatures: Delegation of the power to sign messages.
IEICE TRANSACTIONS on Fundamentals of
Electronics, Communications and Computer,
E79-A(9):1338–1354, 1996.
[7] T.P. Pedersen and B. Pﬁtzmann. Fail-stop signatures.
SIAM Journal on Computing, 26(2):291–330, 1997.
[8] D. Pointcheval and J. Stern. Security proofs for
signature schemes. In EUROCRYPT 1996, volume
1070 of LNCS, pages 387–398, 1996.
[9] C.P. Schnorr. Eﬃcient identiﬁcations and signatures
for smart cards. In CRYPTO 1998, volume 435 of
LNCS, pages 239–251, 1998.
[10] E. van Heijst and T. Pedersen. How to make eﬃcient
fail-stop signatures. In EUROCRYPT 1992, volume
658 of LNCS, pages 366–377, 1992.