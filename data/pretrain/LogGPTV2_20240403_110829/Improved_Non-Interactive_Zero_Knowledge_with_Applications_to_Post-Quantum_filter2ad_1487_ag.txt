optimizations mentioned in the text), as well as to highlight the concrete-security bound we obtain.
We abstract our scheme by assuming that the key-generation algorithm Gen outputs a pair
(C, w) with C(w) = 1, where we view C as the public key and w as the private key. We assume
|C| ≥ κ and w ∈ {0, 1}κ. Our hardness assumption is that, given C as output by Gen, it is hard to
ﬁnd w(cid:48) for which C(w(cid:48)) = 1. More formally, we say that Gen is (t, )-one way if for all adversaries
A running in time at most t we have
Pr[(C, w) ← Gen; w(cid:48)
← A(C) : C(w(cid:48)) = 1] ≤ .
26
Signing
Keys: The public key is a circuit C; the private key is a value w for which C(w) = 1. Values
M, n, τ are parameters of the protocol.
To sign message m, the signer does the following.
Step 1 For each j ∈ [M ]:
1. Choose uniform seed∗
a PRG. Also compute auxj ∈ {0, 1}
let statej,i := seedj,i; let statej,n := seedj,n(cid:107)auxj.
j ∈ {0, 1}κ and use it to generate values seedj,1, . . ., seedj,n with
as described in the text. For i = 1, . . . , n − 1,
|C|
2. For i ∈ [n], compute comj,i := H0(statej,i).
3. The signer runs the online phase of the n-party protocol Π (as described in the text)
using {statej,i}i, beginning by computing the masked inputs {ˆzj,α} (based on w and
the {λj,α} deﬁned by the preprocessing). Let msgsj,i denote the messages broadcast
by Si in this protocol execution.
4. Let hj := H1(comj,1, . . . , comj,n) and h(cid:48)
j := H2({ˆzj,α}, msgsj,1, . . . , msgsj,n).
Step 2 Compute (C,P) := G(m, h1, h(cid:48)
Step 3 For each j ∈ [M ]\C, the signer includes seed∗
P = {pj}j∈C with pj ∈ [n]. The signature includes (C,P).
1, . . . , hM , h(cid:48)
M ), where C ⊂ [M ] is a set of size τ , and
j , h(cid:48)
j in the signature. Also, for each j ∈ C,
the signer includes {statej,i}i(cid:54)=pj , comj,pj , {ˆzj,α}, and msgsj,pj in the signature.
Figure 4: The signing algorithm in our signature scheme.
Theorem A.1. Suppose the PRG used is (t, P RG)-secure, Gen is (t, OW )-one-way. and that the
MPC protocol described in the next section is (t, Π)-secure. Model H0, H1, H2, and G as random
oracles where H0, H1, H2 have 2κ-bit output length. Then any attacker carrying out an adaptive
chosen-message attack on the scheme of Figure 4, running in time t, making qs signing queries,
and making q0, q1, q2, qG queries, respectively, to the random oracles, succeeds in outputting a valid
forgery with probability at most
Pr[Forge] ≤ qs · τ · P RG + O
where
+ OW + qG · (M, n, τ ) + Π,
(cid:18) (q0 + q1 + q2 + M nqs)2
(cid:19)
(cid:0) k
(cid:1)
(cid:0) M
(cid:1)
M−τ
· nk−M +τ
M−τ≤k≤M
(cid:40)
M−τ
22κ
(cid:41)
.
(M, n, τ ) = max
Proof. Fix some attacker A. Let qs denote the number of signing queries made by A; let q0, q1, q2,
respectively, denote the number of queries to H0, H1, H2 made by A, and let qG denote the number
of queries to G made by A. To prove security we deﬁne a sequence of experiments involving A,
where the ﬁrst corresponds to the experiment in which A interacts with the real signature scheme.
We let Pri[·] refer to the probability of an event in experiment i. We let t denote the running time
27
Veriﬁcation
A signature (C,P,{seed∗
veriﬁed as follows:
j , h(cid:48)
j}j(cid:54)∈C,{{statej,i}i(cid:54)=pj , comj,pj ,{ˆzj,α}, msgsj,pj}j∈C) on a message m is
H1(comj,1, . . . , comj,n).
:= H0(statej,i); then compute the value hj :=
1. For every j ∈ C and i (cid:54)= pj, set comj,i
2. For j (cid:54)∈ C, use seed∗
3. For each j ∈ C, run an execution of Π among the parties {Si}i(cid:54)=pj using {statej,i}i(cid:54)=pj , {ˆzα},
and msgsj,pj ; this yields {msgsi}i(cid:54)=pj and an output bit b. Check that b ?= 1. Then compute
h(cid:48)
j := H2({ˆzj,α}, msgsj,1, . . . , msgsj,n).
j to compute hj as the signer would.
4. Check that (C,P) ?= G(m, h1, h(cid:48)
1, . . . , hM , h(cid:48)
M ).
Figure 5: The veriﬁcation algorithm in our signature scheme.
of the entire experiment, i.e., including both A’s running time and the time required to answer
signing queries and to verify A’s output.
Experiment 1. This corresponds to the interaction of A with the real signature scheme. In more
detail: ﬁrst Gen is run to obtain (C, w), and A is given the public key C. In addition, we assume the
random oracles H0, H1, H2, and G are chosen uniformly from the appropriate spaces. A may make
signing queries, which will be answered as in Figure 4; A may also query any of the random oracles.
Finally, A outputs a message/signature pair; we let Forge denote the event that the message was
not previously queried by A to its signing oracle, and the signature is valid. We are interested in
upper-bounding Pr1[Forge].
Experiment 2. We abort the experiment if, during the course of the experiment, a collision in
H0, H1, or H2 is found. Suppose q = max{q0, q1, q2}, then the number of queries to any oracle
throughout the experiment (by either the adversary or the signing algorithm) is at most (q +M nqs).
Thus,
|Pr1[Forge] − Pr2[Forge]| ≤
3(q + M nqs)2
22κ
.
Experiment 3. Here we modify the way signing is done. Speciﬁcally, when signing a message m
we begin by choosing (C,P) uniformly. Steps 1 and 3 of the signing algorithm are computed as
before, but in step 2 we simply set the output of G equal to (C,P). Formally, a signature on a
message m is now computed as follows:
Step 0 Choose uniform (C,P), where C ⊂ [M ] is a set of size τ , and P = {pj}j∈C with pj ∈ [n].
Step 1 For each j ∈ [M ]:
|C|
j ∈ {0, 1}κ and use it to generate values seedj,1, . . ., seedj,n and
. For i = 1, . . . , n − 1, let statej,i := seedj,i; let statej,n := seedj,n(cid:107)auxj.
1. Choose uniform seed∗
auxj ∈ {0, 1}
28
2. For i ∈ [n], compute comj,i := H0(statej,i).
3. Run the online phase of the n-party protocol Π using {statej,i}i, beginning by computing
the masked inputs {ˆzj,α} (based on w and the {λj,α} deﬁned by the preprocessing). Let
msgsj,i denote the messages broadcast by Si in this protocol execution.
4. Let hj := H1(comj,1, . . . , comj,n) and h(cid:48)
j := H2({ˆzj,α}, msgsj,1, . . . , msgsj,n).
1, . . . , hM , h(cid:48)
Step 2 Set G(m, h1, h(cid:48)
G(m, h1, h(cid:48)
M ) equal to (C,P).
Step 3 For each j ∈ [M ] \ C, the signer includes seed∗
1, . . . , hM , h(cid:48)
M ), return (C,P) as the output.) Include (C,P) in the signature.
(I.e., if A subsequently makes the query
j , h(cid:48)
j in the signature. Also, for each j ∈ C,
the signer includes {statej,i}i(cid:54)=pj , comj,pj , {ˆzj,α}, and msgsj,pj in the signature.
The only diﬀerence between this experiment and the previous one occurs if, in the course of
answering a signing query, the query to G in step 2 was ever made before (by either the adversary
or as part of answering some other signing query). Letting InputCollG denote this event, we have
| Pr3[Forge] − Pr2[Forge]| ≤ Pr3[InputCollG].
i=1 for all j ∈ C. That is, signatures are now computed as follows:
Experiment 4. Here we again modify the way signing is done. Now, the signer chooses uniform
{seedj,i}n
Step 0 Choose uniform (C,P), where C ⊂ [M ] is a set of size τ , and P = {pj}j∈C with pj ∈ [n].
Step 1 For each j ∈ [M ]:
j ∈ {0, 1}κ and use it to generate values seedj,1, . . ., seedj,n.
If j ∈ C, choose uniform seedj,1, . . ., seedj,n ∈ {0, 1}κ.
1. If j (cid:54)∈ C, choose uniform seed∗
2. Compute auxj ∈ {0, 1}
|C|
let statej,n := seedj,n(cid:107)auxj.
based on {seedj,i}i. For i = 1, . . . , n − 1, let statej,i := seedj,i;
3. For i ∈ [n], compute comj,i := H0(statej,i).
4. Run the online phase of the n-party protocol Π using {statej,i}i, beginning by computing
the masked inputs {ˆzj,α} (based on w and the {λj,α} deﬁned by the preprocessing). Let
msgsj,i denote the messages broadcast by Si in this protocol execution.
5. Let hj := H1(comj,1, . . . , comj,n) and h(cid:48)
j := H2({ˆzj,α}, msgsj,1, . . . , msgsj,n).
Step 2 Set G(m, h1, h(cid:48)
1, . . . , hM , h(cid:48)
G(m, h1, h(cid:48)
1, . . . , hM , h(cid:48)
Step 3 For each j (cid:54)∈ C, include seed∗
j , h(cid:48)
comj,pj , {ˆzj,α}, and msgsj,pj in the signature.
M ) equal to (C,P).
(I.e., if A subsequently makes the query
M ), return (C,P) as the output.) Include (C,P) in the signature.
j in the signature. For each j ∈ C, include {statej,i}i(cid:54)=pj ,
It is easy to see that if the pseudorandom generator is (t, P RG)-secure, then
| Pr4[Forge] − Pr3[Forge]| ≤ qs · τ · P RG and | Pr4[InputCollG] − Pr3[InputCollG]| ≤ qs · τ · P RG.
We now bound Pr4[InputCollG]. Fix some previous query (m, h1, h(cid:48)
M ) to G, and look
M ) made while responding to some signing query. (In the rest of
at a query G( ˆm, ˆh1, ˆh(cid:48)
1, . . . , hM , h(cid:48)
1, . . . , ˆhM , ˆh(cid:48)
29
this discussion, we will use ˆ· to represent values computed as part of answering that signing query.)
For some ﬁxed j ∈ ˆC, it is not hard to see that the probability of the event ˆhj = hj is maximized if
hj was output by a previous query H1(com1, . . . , comn), and each comi was output by a previous
query H0(statei). (In all cases, the relevant prior query must be unique since the experiment is
aborted if there is a collision in H0 or H1.) In that case, the probability that ˆhj = hj is at most
(2−κ + 2−2κ)n + 2−2κ ≤ 2 · 2−2κ
(assuming n ≥ 3), and thus the probability that ˆhj = hj for all j ∈ ˆC is at most 2−τ·(2κ−1). Taking
a union bound over all signing queries and all queries made to G (including those made during the
course of answering signing queries), we conclude that
Pr4[InputCollG] ≤ qs · (qs + qG) · 2−τ·(2κ−1).
Experiment 5. Here we again modify the way signing is done. Now:
• For each j ∈ C, choose uniform comj,pj (i.e., without making the corresponding query to H0).
• For each j (cid:54)∈ C, choose uniform h(cid:48)
j (i.e., without making the corresponding query to H2).
So, signatures are now computed as follows:
Step 0 Choose uniform (C,P), where C ⊂ [M ] is a set of size τ , and P = {pj}j∈C with pj ∈ [n].
Step 1 For each j ∈ [M ]:
|C|
let statej,n := seedj,n(cid:107)auxj.
If j ∈ C, choose uniform seedj,1, . . ., seedj,n ∈ {0, 1}κ.
j ∈ {0, 1}κ and use it to generate values seedj,1, . . ., seedj,n.
1. If j (cid:54)∈ C, choose uniform seed∗
2. Compute auxj ∈ {0, 1}
based on {seedj,i}i. For i = 1, . . . , n − 1, let statej,i := seedj,i;
3. For j ∈ C, choose uniform comj,pj ∈ {0, 1}2κ. For all other j, i, set comj,i := H0(statej,i).
4. Run the online phase of the n-party protocol Π using {statej,i}i, beginning by computing
the masked inputs {ˆzj,α} (based on w and the {λj,α} deﬁned by the preprocessing). Let
msgsj,i denote the messages broadcast by Si in this protocol execution.
If j ∈ C, set h(cid:48)
j := H2({ˆzj,α}, msgsj,1, . . . , msgsj,n);
5. Let hj := H1(comj,1, . . . , comj,n).