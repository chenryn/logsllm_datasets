| 100  |3  |0  |
4.3  Sock-Shop系统的韧性风险分析
限于文章篇幅,本文将以一个实际的韧性风险为例,展示对 Sock Shop 系统韧性风险的分析过程.图 11 为一 次混沌实验中订单服务每秒成功交易量的性能曲线,在混沌实验中引入的系统环境扰动为对 carts 服务的容器 的 CPU 占用率提升至 100%.图 11 中,蓝色曲线为混沌实验中收集到的性能曲线,红色曲线为通过 Holt Winters 算法以正常压力场景下的历史数据为输入得到的性能基线曲线.可以看出,图 11 中一段时间内订单服务的实际 性能明显低于其性能基线,说明订单服务由于环境扰动进入了服务降级状态,且通过计算可得知该次服务降级 的性能损失高于其性能损失阈值(500 个交易).因此,本次混沌实验中引入的系统环境扰动被认定为韧性风险.在混沌实验的过程中,通过 Prometheus 组件实际采集到的各服务的性能指标包括服务的每秒请求数量 (qps,其中包括成功的请求量 qps(2xx)以及失败的请求量 qps(4xx))以及服务请求延时这两项性能指标.在韧性风 险识别阶段中的设立服务性能指标(表 1)将通过以上指标换算得到.如, 
	响应成功率=qps(2xx)/(qps(2xx)+qps(4xx))). 
除了收集服务性能的监控数据外,同时会收集容器以及节点的性能数据,具体收集的性能数据见表 8. 
1246 	Journal of Software软件学报 Vol.32, No.5, May 2021 
Fig.11  A service degradation occurred in a chaos experiment 图 11  一次混沌实验中发生的服务降级Table 8  Collected performance data in chaos experiments 
表 8混沌实验过程中收集的性能数据
| 系统资源类型 | 性能指标 | 说明 |
|---|---|---|
| 服务 |qps(2xx)  qps(4xx)  Latency  |每秒成功请求量(requests/s) 每秒失败请求量(requests/s) 服务响应延时(s)  |
|  | | |
|  | | |
在性能指标的因果关系图构建过程中,需要保证每个时间戳下各性能指标均存在有效值,但是表 3 中各项 通过换算得到的服务性能指标并不能保证这一点(如在 qps(2xx)和 qps(4xx)均为 0 的情况下,相应的成功率是无 效值),因此在韧性风险的分析过程中,直接使用了实际收集的服务性能指标进行韧性风险分析,构建韧性风险 影响链路时的目标节点将使用与违反服务韧性目标的性能指标直接相关的服务性能指标(如订单服务的每秒 成功交易量与其每秒成功请求数直接相关).通过因果搜索算法得到各项性能指标之间的因果关系图如图 12 所 示(电子版文档中,可以放大该图查看细节).其中,蓝色节点为服务的性能指标,红色节点为容器的性能指标,绿色 节点为 kubernetes 集群的工作节点的性能指标.图 13 为图 12 中所有服务每秒请求数量(qps)的因果关系图,在与图 9 的比较后可以看出:仅通过性能数据 所构建的因果关系图基本与 sock-shop 的系统架构图一致,并且能够反映出各微服务在业务场景上的先后关系 (如浏览商品(catalogue 服务)→添加购物车(carts 服务)→用户下单(orders 服务)).说明通过因果搜索算法生成的 因果关系图在实际物理关系上具有一定程度的准确性. 
以图 12 的因果关系图为输入,计算图中所有因果关系边的权重,并以服务降级的性能指标(每秒成功交易 量)直接相关的服务性能指标(service/orders/qps(2xx))为终点,按照深度优先遍历的方式寻找所有直接或间接指 向该节点的性能指标.最终得到的影响服务降级的性能指标以及对应的因果关系边的权重如图 14 所示. 
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1247殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1247 
Fig.12  Causality graph of performance indicators of all performance indicators 图 12  所有性能指标之间的因果关系图
Fig.13  Causality relations among service QPS 
图 13  服务 QPS 之间的因果关系
(a) 图为部分性能指标之间的因果关系及权重
(b) 图为全部性能指标之间的因果关系及权重
Fig.14  Performance indicators that influence the service degradation and corresponding causality edges 图 14  影响服务降级的性能指标以及对应的因果关系边1248 	Journal of Software软件学报 Vol.32, No.5, May 2021 
将图 14 中的因果链路根据因果关系边的权重进行排序,最终输出的韧性风险影响链路如图 15 所示.图 15
中标注为红色的性能指标(container/carts/CPU Usage)被混沌实验中引入的环境扰动直接产生影响的性能指标,
可以看出,优先输出的韧性风险影响链路均命中了引入的系统环境扰动. 
1. container/carts-db/FS Reads Bytes→container/carts/CPU Usage→service/carts/qps(2xx)→service/carts/latency→
	service/front-end/latency→service/front-end/qps(2xx)→service/front-end/qps(4xx/5xx)→service/orders/latency→service/catalogue/qps(2xx)→service/orders/qps(2xx)→container/orders/CPU Usage→container/orders/Network Output Packets→	container/orders/Network Input Bytes→container/orders-db/Network Input Packets→container/orders/Network Output Bytes→	container/orders/Network Input Packets→container/orders/MEM Usage→service/orders/qps(2xx)2. container/carts-db/FS Reads Bytes→container/carts/FS Reads Bytes→container/carts/CPU Usage→service/carts/qps(2xx)→	service/carts/latency→service/front-end/latency→service/front-end/qps(2xx)→service/front-end/qps(4xx/5xx)→
	service/orders/latency→service/catalogue/qps(2xx)→service/orders/qps(2xx)→container/orders/CPU Usage→container/orders/Network Output Packets→container/orders/Network Input Bytes→container/orders-db/Network Input Packets→	container/orders/Network Output Bytes→container/orders/Network Input Packets→
	container/orders/MEM Usage→service/orders/qps(2xx) 
… 
Fig.15  Resilience risk influence chain 
图 15  韧性风险影响链路
通过观察图 15 韧性风险影响链路中各性能指标的变化,发现对 cart 容器进行 CPU 加压(container/cart/cpu)提高了 cart 服务的延时(service/cart/latency),并减少了其他服务的请求量(service/服务/qps(200)),因此减少了
order 容器的网络请求传入量(container/orders/Network Input Packets)以及 order 容器内存中缓存的订单数量
(container/orders/MEM Usage),最终影响交易成功的订单数量(service/orders/qps(2xx)).图 16 展示了上述性能指
标在引入扰动时的具体性能曲线.从上述分析中可以看出,案例研究中得到的因果关系链路一定程度上体现了
从扰动到服务降级的传播过程. 
Fig.16  Performance curves of different performance indicators when a disruption was injected图 16  引入系统环境扰动时各性能指标的性能曲线
5  进一步分析与总结
5.1  实验结果的进一步分析
为了进一步验证本文提出的韧性风险的分析方法是否能够有效地分析出目标系统在发生韧性风险时因果
的影响链路,本文分析了案例研究中的多次混沌实验中收集到的系统性能数据,以评估韧性风险影响链路的准
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1249确度.本文中使用 precision(查准率)和 recall(查全率)作为评估韧性风险影响链路准确度的度量指标.由于本文 提出的分析方法最终输出排序后的多条链路,precision 和 recall 中 TP 的判断标准为输出的前 k 条链路是否命 中被引入的环境扰动,其对应的 precision 和 recall 值分别记作 precisionk 和 recallk.FP(false positive)表示分析方 法输出的前 k 条链路中没有命中环境扰动;FN(false negative)表示分析方法输出前 k 条链路中没有命中环境扰 动,但是剩余的链路中命中了环境扰动.为了方便统计韧性风险影响链路是否命中了被引入的环境扰动,本文中 仅分析了直接与系统性能有关的环境扰动所对应的混沌实验数据集(环境扰动包括:将 CPU 利用率提升至 100%(CPUBurnout)、将内存占用率提示至 100%(Mem overload)、磁盘 IO 阻塞(disk I/O block)以及网络传输延 时(network Jam)).•	通过因果关系搜索算法所构建的因果关系图是否准确? 
在第 4.3 节的实验中,已证明了通过因果关系算法构建的性能指标因果关系图与 Sock-Shop 的实际服务调 用图基本一致.为模拟验证在服务数较多、调用关系较深情况下的因果搜索算法构建的因果关系图的准确性, 本文通过因果关系模拟工具 tetrad(http://www.phil.cmu.edu/projects/tetrad/)构建出包含不同数量节点和因果关 系边的因果关系图,并在假定的因果关系图上模拟大量数据.因果关系模拟算法将在模拟的数据中寻找变量之 间的因果关系,并将得到的因果关系与假定的因果关系进行比较,统计实际不存在的、存在但未识别的以及方 向识别错误的因果关系边数,以验证算法分析得到的因果关系的准确性.表 9 展示了在不同节点和因果关系边数量下,因果关系搜索算法的准确度.从表 9 可以看出:因果搜索算法 能够识别出大部分的因果关系,与实际因果关系的准确度基本高于 90%.对于实际大规模微服务架构系统的验 证,将在本文的后续研究工作中进一步展开. 