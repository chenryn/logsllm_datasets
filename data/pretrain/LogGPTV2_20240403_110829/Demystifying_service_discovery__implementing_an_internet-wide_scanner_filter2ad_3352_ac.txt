[24], [38]) detect scan traﬃc and throw alarms in response
to perceived malicious activity based on individual source
IPs. Therefore, a particular IP address sending its packets
to s faster than other IPs is more readily detected as it
simply stands out from the others. The reason for maximally
spacing probes from diﬀerent IPs is the same as before –
reducing the overall burstiness at remote subnets – which
for large m (i.e., hundreds or thousands) may become non-
trivial. One example of an extremely impolite split is IP-
sequential, which scans each s from a single source IP at
rates similar to those in Table 2 (i.e., megabits per second
and thousands of pps), regardless of subnet size.
Analysis shows that GIW split does not require a new per-
mutation; however, individual source IPs must now return to
s every mn/|s| packets (i.e., alternating in some order with
a full period m). Synchronizing m hosts using the block-
split algorithms of previous work [3], [5], [17], [43], while
sustaining the GIW split is a diﬃcult problem. We instead
introduce a new split algorithm that satisﬁes our conditions
and requires low overhead/state.
Algorithm 1 RLCG/RR at host i ∈ M
1: x0 = rand()
2: for k = 1 to n do
ip = k mod m
3:
xk = axk−1 + c
4:
if (ip == i) then
5:
target = R(xk)
6:
7:
if (BGP[target]==VALID) then
8:
9:
10:
11:
12: end for
end if
sleep(T /n)
probe(target)
end if
⊲ Set initial seed x0
⊲ Iterate through all IPs
⊲ Assigned source IP
⊲ Advance LCG
⊲ Our IP?
⊲ Reverse bits
⊲ In BGP?
⊲ Hit destination
⊲ Wait for next packet
The intuition behind our split, which we call round-robin
(RR), is to generate a single RLCG permutation {zk} and
assign target zk to host k mod m. Assuming M is the set of
scanning hosts, RR sends the initial seed x0 to every host i ∈
M, its position i, and the number of sources m. Each host
then generates the entire sequence {zk}k locally and hits
target zi+jm at time (i + jm)T /n for j = 0, 1, . . . , n/m, the
simplicity of which is demonstrated in Algorithm 1. Even
with T = 24 hours, subnets are visited so infrequently (e.g.,
every 337 seconds for a /24) that perfect synchronization
of start times is not necessary. Furthermore, in scanners
running from a single location, all m IPs can be aliased to the
same host and RR-split can be used locally to ensure perfect
synchronization, which is the approach taken by IRLscanner
later in the paper.
From the well-known properties of LCGs [4], we immedi-
ately obtain the following crucial result.
Theorem 2. RR-split with any GIW permutation scans
s with min(|s|, ms) sources, where
m
gcd( n
|s| , m)
ms =
(1)
and gcd(a, b) is the greatest common divisor of (a, b).
Proof. Examine {zk}k and assume it is GIW. For a given
subnet s, observe that its IPs appear in this list with a period
n/|s|, which follows from the deﬁnition of GIW. Assuming
wj ∈ M is the j-th IP that hits s, we have
wj = ³wj−1 +
n
|s|´ mod m,
j = 1, 2, . . .
(2)
This recurrence is an additive-only LCG whose period [4]
is given by (1), which means that the number of sources
scanning s is the smaller of its size and ms.
To better understand this result, examine Figure 2(b) that
shows one example of (1) for |s| = 65536 (i.e., a /16 target
subnet). Notice that even values of m lead to ms ≤ m/2
(triangles in the ﬁgure), which reduces the eﬀective number
of IPs seen by each subnet at least by half. The worst choice
of m is a power of two, in which case ms = 1 regardless of
m. On the other hand, odd values of m produce the ideal
ms = m (circles in the ﬁgure) and thus achieve a GIW split.
We rely on this fact later in Section 4.
3.4 Extrapolation
Given the goal of being able to extrapolate the number of
responsive hosts and other properties of open ports from a
severely abbreviated scan (e.g., 1 − 10 seconds instead of 24
114)
c
e
s
(
y
a
e
d
l
e
c
n
e
g
r
e
v
n
o
c
5
10
4
10
3
10
2
10
1
10
0
10
−3
10
IP−seq
RIS
uniform
RLCG
5/&*55
%*3
3DFNHW
)LOH
3DFNHW6HQGHU
3DFNHW5HFHLYHU
−2
10
accuracy ε
−1
10
&XVWRP1HWZRUN6XEV\VWHP
(a) extrapolation delay
(b) implementation
Figure 3: Extrapolation delay and IRLscanner im-
plementation.
hours), we next examine how the existing and proposed ap-
proaches handle this problem. We split the allocated IANA
space into three blocks (i.e., ARIN, RIPE, and APNIC),
roughly corresponding to diﬀerent geographical zones, and
build three distributions of live IPs from our Internet mea-
surements. Speciﬁcally, PMF function pj(x3, x4) speciﬁes
the probability that IP x1.x2.x3.x4 is alive in geographical
zone j ∈ {1, 2, 3}. We then generate a Bernoulli random
variable for each IP in the IANA space and make it alive
using the corresponding probability pj(x3, x4).
Using a simulation with T = 24 hours, we scan the as-
signed distribution of live/dead hosts using four approaches
– uniform, RLCG, IP-sequential, and RIS. Assuming A is
the true number of live hosts in the assignment and ˜A(t) is
an estimate at time t, deﬁne the relative extrapolation error
e(t) = |1 − ˜A(t)/A|. Convergence to threshold ǫ is estab-
lished at such time tǫ when estimates for all t ≥ tǫ have
error smaller than ǫ.
Figure 3(a) plots the expected convergence delay tǫ av-
eraged over 100 iterations. Observe that both RLCG and
uniform converge to 1% error in 10 seconds, while RIS and
IP-sequential take 11 and 16 hours, respectively. This result
is easy to explain since IP-sequential gets trapped in certain
CIDR blocks for an extended period and RIS hits the same
last octet 16M times in a row. Furthermore, 0.1% error in
Figure 3(a) can be achieved in 23 minutes for both uniform
and RLCG, while the other two methods require 17+ hours.
Even to arrive at 5% accuracy, which takes RLCG less than
a second, RIS requires 6 hours, which makes this method
unsuitable for all but most crude extrapolations.
3.5 Implementation
Figure 3(b) shows the general structure of IRLscanner.
IPs generated by RLCG/RR are ﬁrst checked against BGP
preﬁxes and then delivered to the sending module, which
forms raw Ethernet frames and transmits them to a custom
network driver [49], which can transmit SYN packets at 5.25
Mpps using a modern quad-core CPU. Assuming 3.5 Gbps of
available bandwidth, IRLscanner can cover the entire BGP
space in 6.7 minutes from a single server.
The custom stack also allows us to intercept arbitrary
incoming/outgoing packets and suppress RSTs from the OS
TCP/IP stack, which we utilize later in the paper when
proﬁling remote operating systems. All received packets are
saved to disk without inspection and are processed oﬄine.
After completing each run, IRLscanner continues to listen
for incoming packets for several hours to capture extremely
slow hosts and record back-scanning packets from hackers
and other potentially interesting entities.
3.6 Timeouts and Duration
Previous measurement studies [5], [42], [43] used retrans-
missions to the unresponsive set of target hosts to minimize
false negatives, which we now evaluate in light of polite-
ness and eﬃciency. Cursory inspection shows that retrans-
mitting probes to unresponsive hosts is the violation of the
GIW pattern, which is undesirable. Combining this with
the likelihood that many false negatives in the unrespon-
sive set are likely to be from persistently congested links or
over-burdened servers [1], politeness concerns suggest that
retransmission is not generally advisable.
From an eﬃciency standpoint, it should also be noted that
the unresponsive set accounts for 90 − 99% of S (depending
on the protocol), which means that a single timeout-based
retransmission would require almost doubling the number
of sent packets. Our experiments show that retransmission
not only yields a negligible increase in found hosts (i.e., by
0.3 − 1.7% depending on the port and time of day), but also
introduces bias by capturing hosts that come online within
the retransmission timeout.
We next turn to the issue of when the status of an IP
address can be determined, which in related work [5], [17],
[42], [43] has occurred at some timeout after the initial probe
was sent. Considerable eﬀort has been spent deciding on ap-
propriate timeout values [5], the choice of which aﬀects the
number of false negatives due to slowly responding hosts and
the overhead of keeping large amounts of state for outstand-
ing targets. Given that retransmissions are not required, we
avoid this tradeoﬀ entirely by delaying the classiﬁcation of
IP addresses until after the scan completes.
In practice, we accomplish this by saving all received pack-
ets (i.e., 25 GB per scan) to disk for later analysis. As there
are many packets that are not relevant to the scan, we note
that certain information can be embedded in the packets
themselves to correlate responses with hosts scanned. This
option has been used by encoding the target IP address in
ICMP ID ﬁelds [17] and DNS queries [13]. For TCP scans,
we take advantage of the sequence number ﬁeld to encode
the target IP, which allows us to detect invalid and/or ma-
licious replies. Concerns about I/O speed do not arise until
scan duration T drops below 60 seconds (i.e., assuming mod-
est RAID write speed of 400 MB/s).
3.7 Negative Feedback
Throughout this section, we have explored and imple-
mented several techniques to reduce the sending rate (i.e.,
BGP scope reduction), minimize the burden on remote net-
works (i.e., GIW), lower IDS false-alarm rates (i.e., RR-
split), and avoid probing busy/ﬁrewalled/non-existent hosts
with repeat packets (i.e., no retransmission).
In addition to technical solutions outlined above, a polit-
ical strategy for reducing complaints and dealing with their
aftermath is beneﬁcial. Our general approach in this pur-
suit is to make the non-malicious purpose of our scans as
transparent as possible to those remotely investigating our
traﬃc. This includes providing scanning IPs with descrip-
tive names (i.e., indicating their research purpose) in the
forward/reverse DNS tree, as well as creation of TXT DNS
records pointing to the project web-page with instructions
on how to opt out. With over 123 IPs participating in this
endeavor, special scripts have been written to manipulate
IP assignment to various NIC interfaces and modify DNS
records in our authoritative server.
115Name
DNS1
DNS2
DNS3
DNS4
DNS5
DNS6
DNS7
ECHO
PING
SMTPS
SMTPA
EPMAPS
EPMAPA
HTTP1
HTTP2
HTTP3
HTTP4
HTTP5
HTTP6
HTTPAS
HTTPOP T
UDP
ICMP
TCP
Protocol Port
53
53
53
53
53
53
53
7
–
25
25
135
135
80
80
80
80
80
80
80
80
–
Date
Type
DNS A
DNS A
DNS A
DNS A
DNS A
DNS A
DNS A
2-21-08
3-25-08
5-07-08
5-19-08
5-20-08
5-21-08
5-22-08
7-01-08
6-24-08
7-30-08
7-30-08
8-05-08
8-05-08
7-17-08
8-05-09
8-06-09
8-10-09
8-24-09
8-27-09
ACK→SYN 9-02-09
SYN+OPT
7-15-10
echo
SYN
ACK
SYN
ACK
SYN
SYN
SYN
SYN
SYN
SYN
T
30d
6d
1d
1d
1d
1d
1d
1d
1d
2d
2d
2d
2d
1d
1d
1d
1d
2d
1d
1d
1d
m
1
5
31