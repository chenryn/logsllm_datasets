# DDCTF2019官方Write Up——Android篇
##### 译文声明
本文为翻译文章，仅供参考。具体内容及含义请以原文为准。

作者：bin233 唐山师范学院/大四/DDCTF2019 Android方向 TOP2

第三届DDCTF高校闯关赛已正式开启。DDCTF是由滴滴出行安全产品与技术部的顶级安全专家针对国内高校学生举办的网络安全技术竞赛，目前已成功举办两届。在过去的两年里，共有超过一万名高校学生参加了比赛，部分优胜选手选择加入滴滴，共同应对出行领域的安全挑战。通过此类比赛，我们旨在发掘并培养更多国际化创新型网络安全人才，共同保障亿万用户的出行安全。

## Android第一题：Breaking LEM

首先，将apk文件拖入JEB进行反编译，找到入口类及其点击事件函数。Java层仅负责将输入内容传递至native层，因此只需分析so文件中的`Java_com_didictf_guesskey2019lorenz_MainActivity_stringFromJNI`函数即可。

该函数首先会将输入内容与字符串"ddctf-android-lorenz-"进行比较。如果输入长度不足，则直接返回失败；否则，将对输入内容进行截断（例如，输入"ddctf-android-lorenz-XXX"将被截断为"XXX"）。

接下来，程序会对"XXX"中的每个字符进行验证，确保其属于字符串"ABCDEFGHIJKLMNOPQRSTUVWXYZ123456"。随后，使用洛伦兹加密算法对"XXX"进行加密。从GitHub上找到了该算法的实现，并发现加解密是同一个函数。因此，只需要获取密文，再让apk运行一次就能得到明文。不出所料，洛伦兹加密只对"XXX"部分进行加密（设加密后为"YYY"），然后对"YYY"进行五次SHA-256运算。

通过查找交叉引用，可以找到`shaCorrect`的真实字符串（在`init_array`中初始化）。接下来的任务是暴力破解该SHA-256值。比赛当晚，我完成了所有7位及以下字符串的暴力破解。最终提示显示正确答案是一个8位字符串，并告知了前两位字符。因此，只需补齐为八位字符串，确保经过洛伦兹加密后的前两位密文不变，然后暴力破解剩余六位字符。最终，在短时间内成功破解出结果。

将破解出的结果拼接上"ddctf-android-lorenz-"，让apk自动为我们解密出明文。

## Android第二题 Have Fun

首先，将apk文件拖入JEB进行反编译，发现标识符被混淆成了不可见字符。由于文件不大，手动重命名进行反混淆。很快追踪到第一次加密的函数`o()`和`p()`，它们会将Assets中的dex文件释放到一个隐藏文件夹中，并修改字节码。

Apk使用了第一代加固保护技术，通过`DEXClassLoader`热加载dex文件。为了更快更准确地获取dex文件，使用IDA动态调试dex文件，直接获得dex文件路径及即将加载的dex文件（直接从assets中提取的dex文件算法不正确）。

正确的算法实现如下：
```java
// 正确的算法实现代码
```

接下来，程序会删除该dex文件，最后调用so层函数。虽然so文件进行了section加密，但静态分析已经足够。从`JNI_OnLoad`中获取动态注册的三元组，并找到具体函数位置。程序会对输入内容进行16进制转换并与内存中的固定数据进行比较。解题脚本如下：

```python
# 解题脚本
```

## Android第三题 不一样的Service

本题使用了控制流平坦化技术，使得调试变得非常复杂。首先，Java层会启动一个service来参与输入内容的验证，但没有关键逻辑。重点关注so层。从`JNI_OnLoad`找到动态注册的函数如下：

很容易发现一些反调试检测的函数，这里暂时忽略。接下来留意`Parcel`的处理函数，创建结构体方便后续分析，并在动态调试中重点关注`readString`的调用。

单步跟踪发现偏移`0x1DB50`处的函数会使用`readString`。跟到偏移`0x10458`处，终于拿到Java层输入的内容，接着进入`sendInput1`函数（偏移`0x1B0D4`）。

这里发现程序使用socket将输入内容发送出去，然后进入`recvResult`函数（偏移`0x1470C`）。发现接收的数据与发送的数据不同，且每次接收的数据都不同。继续分析接收的数据，程序会将其与固定的内存数据（称为`enFlag`）进行比较（偏移`0x8540`）。

后来想到还有一个service进程，开始调试service进程。跟踪到`validate`函数，发现如果输入长度为32位就会返回`dd`字符串（并且主进程也有对`recv`结果是否为`ddd`的验证，否则不会接收到奇怪的内容）。

### 第一次加密操作
单步跟进发现，这里使用Python实现如下：
```python
# 第一次加密操作代码
```

### 第二次加密操作
会先保存前两个元素，后面每两个元素进行异或，处理完后将保存的元素放到最后。伪代码如下：
```python
# 第二次加密操作伪代码
```

### 第三次加密操作
会再与某个内存数据（称为`key`）进行逐位异或，最后发送出去。这就是主线程接收的数据与发送的数据不同的原因（主进程与服务进程进行socket通信，因而之前IDA只能控制主进程空间）。

将`key`与`enFlag`逐位异或完成一次解密，但发现最后两个元素不在ASCII码表中，推测得到了错误的`key`（印证了之前接收多个不同结果的现象）。

因此，随便输入32位字符串，自行实现第一、二次加密操作进行加密，然后将其与主进程接收的数据进行异或，这样就得到了多组`key`，必然有一个`key`是真实的。

将这些`key`继续与`enFlag`异或，其中一个`key`异或结果如下图所示。

68对应字符‘D’，而69正好是第一次加密加了下标1导致的，因此也是‘D’（不正好像DDCTF吗？可以推断出自己已经得到了正确的数据）。

接下来的问题就是破解“第二次加密”了，直接无脑爆破不太现实，这里提供两种解密方式：

#### 逆向猜解法
可以推测最后一个元素数据是“}”，那么“第一次加密后”它就是“}”+31=156。所以只需要猜解倒数第二个元素，然后逆着异或。具体脚本如下：
```python
def myPrint(res):
    ret = []
    for i in range(32):
        ret.append(chr(res[i] - i))
    print("".join(ret))

for j in range(160):
    ispass = 0
    flag = [1, 18, 15, 215, 22, 254, 12, 9, 42, 21, 20, 50, 232, 22, 242, 204, 1, 248, 2, 246, 244, 248, 4, 251, 221, 202, 22, 3, 27, 210, 68, 69]
    flag[30] = j
    flag[31] = 156
    for i in range(1, 31):
        flag[30 - i] = flag[32 - i] ^ flag[30 - i]
        if flag[30 - i] > 160:
            ispass = 1
            break
    if ispass == 0:
        flag[0] = 68
        flag[1] = 69
        myPrint(flag)
```

#### 正向异或法
既然我们已经看到了“DD”字符串，那么后面必然是“CTF”。正向再异或一遍，具体脚本如下：
```python
flag = [1, 18, 15, 215, 22, 254, 12, 9, 42, 21, 20, 50, 232, 22, 242, 204, 1, 248, 2, 246, 244, 248, 4, 251, 221, 202, 22, 3, 27, 210, 68, 69]
tmp = []
tmp.append(flag.pop(30))
tmp.append(flag.pop(30))
tmp += flag
tmp[2] = ord('C') + 2
tmp[3] = ord('T') + 3
for i in range(0, 30):
    tmp[i + 2] = tmp[i] ^ flag[i]
for i in range(32):
    tmp[i] -= i
print("".join(map(lambda x: chr(x), tmp)))
```

想了解更多题目出题人视角解析，请关注滴滴安全应急响应中心（DSRC）公众号查看。