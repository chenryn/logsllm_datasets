# 【漏洞分析】获取已锁定的OnePlus 3/3T：引导加载程序漏洞
|
##### 译文声明
本文是翻译文章，文章来源：securityresear.ch
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[胖胖秦](http://bobao.360.cn/member/contribute?uid=353915284)
预估稿费：120RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**前言**
在这篇博文中，我公开了OnePlus
3/3T引导加载程序中的两个漏洞。第一个[CVE-2017-5626](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5626)是影响OxygenOS
3.2-4.0.1（4.0.2修补）的高危漏洞。该漏洞允许一个物理对手（或使用ADB/
FASTBOOT访问）来绕过bootloader的锁定状态，即使Allow OEM
Unlocking被禁用，无需用户确认并不会触发出厂重置。该漏洞允许内核代码执行（尽管启动时有[5秒警告](https://securityresear.ch/2017/02/08/oneplus3-bootloader-vulns/#exploiting-cve-2017-5626-for-kernel-code-execution)）。第二个漏洞[CVE-2017-5624](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5624)影响至今OxygenOS的所有版本，允许攻击者禁用dm-verity。这些漏洞的组合实现了强大的攻击 – 持久化的高权限代码执行，而不向用户发出任何警告，并且能够访问原始用户的数据（在受害者输入其凭据后）。
OnePlus Security披露和承认了这两个漏洞。第一个漏洞[CVE-2017-5626](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5626)于1月23日被披露。它也是由OnePlus工程师独立发现的。[CVE-2017-5624](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5624)于1月16日被披露，在未来的OxygenOS版本中得到修复
-今天的公开它的原因是因为已经有人在1月24日[公布](https://forum.xda-developers.com/oneplus-3/how-to/fix-easy-method-removing-dm-verity-t3544339)它了。
免责声明：我只测试了OnePlus 3，但OnePlus 3T也包含漏洞。
**绕过引导加载程序锁（CVE-2017-5626）**
OnePlus 3 &3T运行OxygenOS 3.2 – 4.0.1系统,它有两个专用的FASTBOOT oem命令：
1\. fastboot oem 4F500301-绕过bootloader的锁-允许使用FASTBOOT访问来解锁设备，无视OEM
Unlocking，并无需用户确认，没有用户数据擦除（正确的解锁后通常会发生）。此外，在运行此命令后设备仍然报告处于锁定状态。
2\. fastboot oem 4F500302 – 重置各种引导加载程序设置。例如，它将锁定未加锁的引导加载程序，无需用户确认。
分析引导程序二进制表明其处理程序4F500301的命令非常简单：
    // 'oem 4F500301' handler
    int sub_918427F0()
    {
      magicFlag_dword_91989C10 = 1;
      if ( dword_9198D804 != dword_9198D804 )
        assert(1, dword_9198D804, dword_9198D804);
      return sendOK((int)"", dword_9198D804);
    }
因此，它在91989C10设置了某些全局标志（我们命名为magicFlag）。通过观察其处理格式/擦除FASTBOOT命令的过程，我们可以清楚地看到在几项检查之后,magicFlag覆盖设备的锁定状态-刷入或删除分区：
    // 'flash' handler
    const char *__fastcall sub_91847EEC(char *partitionName, int *a2, int a3)
    {
      char *pname; // r5@1
    ...
      pname = partitionName;
      v4 = a2;
      v5 = a3;
      if ( returnTRUE1(partitionName, (int)a2) )
      {
        result = (const char *)sub_918428F0(pname, v6);
        if ( (result || magicFlag_dword_91989C10)
          && ((result = (const char *)sub_91842880(pname, v10)) != 0 || magicFlag_dword_91989C10) )
        {
          result = (const char *)sub_918428F0(pname, v10);
          if ( !result || magicFlag_dword_91989C10 )
            goto LABEL_7;
          v8 = dword_9198D804;
          if ( dword_9198D804 != dword_9198D804 )
            goto LABEL_28;
          v11 = "Critical partition flashing is not allowed";
        }
        else
        {
          v8 = dword_9198D804;
          if ( dword_9198D804 != dword_9198D804 )
            goto LABEL_28;
          v11 = "Partition flashing is not allowed";
        }
        return (const char *)FAIL2((int)v11, v10);
      }
    LABEL_7:
      ...
        if ( *v4 != 0xED26FF3A )
        {
          if ( *v4 == 0xCE1AD63C )
            cmd_flash_meta_img(pname, (unsigned int)v4, v5);
          else
            cmd_flash_mmc_img(pname, (int)v4, v5);
          goto LABEL_10;
        }
        v7 = v4;
      }
      cmd_flash_mmc_sparse_img(pname, (int)v7, v5);
      ...
     }
    // 'erase' handler
    int __fastcall sub_91847118(char *partitionName, int a2, int a3)
    {
     ...
      v3 = partitionName;
      v4 = returnTRUE1(partitionName, a2);
      if ( !v4 )
      {
    LABEL_7:
        ...
        if ( v4 )
        {
          if ( dword_9198D804 == dword_9198D804 )
            return eraseParition(v3);
        }
        ...
      }
      v4 = sub_918428F0(v3, v5);
      if ( !v4 && !magicFlag_dword_91989C10 )
      {
        v6 = dword_9198D804;
        if ( dword_9198D804 == dword_9198D804 )
        {
          v7 = "Partition erase is not allowed";
          return FAIL2((int)v7, v5);
        }
        goto LABEL_23;
      }
      v4 = sub_91842880(v3, v5);
      if ( !v4 && !magicFlag_dword_91989C10 )
      {
        v6 = dword_9198D804;
        if ( dword_9198D804 == dword_9198D804 )