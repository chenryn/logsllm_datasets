title:Non-interactive and Output Expressive Private Comparison from Homomorphic
Encryption
author:Wenjie Lu and
Jun-Jie Zhou and
Jun Sakuma
Non-Interactive Private Decision Tree Evaluation
Anselme Tueno
SAP SE
Yordan Boev
SAP SE
Florian Kerschbaum
University of Waterloo
PI:EMAIL
PI:EMAIL
ﬂPI:EMAIL
9
1
0
2
p
e
S
8
1
]
R
C
.
s
c
[
1
v
2
6
3
8
0
.
9
0
9
1
:
v
i
X
r
a
Abstract—Decision trees are a powerful prediction model
with many applications in statistics, data mining, and machine
learning. In some settings, the model and the data to be classiﬁed
may contain sensitive information belonging to different parties.
In this paper, we, therefore, address the problem of privately
evaluating a decision tree on private data. This scenario consists
of a server holding a private decision tree model and a client
interested in classifying its private attribute vector using the
servers private model. The goal of the computation is to obtain
the classiﬁcation while preserving the privacy of both the decision
tree and the client input. After the computation, the classiﬁcation
result is revealed only to the client, and nothing else is revealed
neither to the client nor to the server. Existing privacy-preserving
protocols that address this problem use or combine different
generic secure multiparty computation approaches resulting in
several
interactions between the client and the server. Our
goal is to design and implement a novel client-server protocol
that delegates the complete tree evaluation to the server while
preserving privacy and reducing the overhead. The idea is to use
fully (somewhat) homomorphic encryption and evaluate the tree
on ciphertexts encrypted under the client’s public key. However,
since current somewhat homomorphic encryption schemes have
high overhead, we combine efﬁcient data representations with
different algorithmic optimizations to keep the computational
overhead and the communication cost low. As a result, we are able
to provide the ﬁrst non-interactive protocol, that allows the client
to delegate the evaluation to the server by sending an encrypted
input and receiving only the encryption of the result. Our scheme
has only one round and can evaluate a complete tree of depth 10
within seconds.
I.
INTRODUCTION
A machine learning process consists of two phases. In the
ﬁrst phase or learning phase, a model or classiﬁer is built on
a possibly large set of training data. The model can then be
used to classify new data.
a) Setting: Machine learning (ML) classiﬁers are valu-
able tools in many areas such as healthcare, ﬁnance, spam
ﬁltering, intrusion detection, remote diagnosis, etc [52]. To
perform their task, these classiﬁers often require access to
personal sensitive data such as medical or ﬁnancial records.
Therefore, it is crucial to investigate technologies that preserve
the privacy of the data, while beneﬁting from the advantages
of ML. On the one hand, the ML model itself may contain
sensitive data. For example, a bank that uses a decision tree
for credit assessment of its customers may not want to reveal
any information about the model. On the other hand, the model
may have been built on sensitive data. It is known that white-
box and sometimes even black-box access to a ML model
allows so-called model inversion attacks [29], [49], [54], which
can compromise the privacy of the training data. As a result,
making the ML model public could violate the privacy of the
training data.
b) Scenario:
In this paper, we therefore address the
problem of private decision tree evaluation (PDTE) on private
data. This scenario consists of a server holding a private
decision tree model and a client wanting to classify its private
attribute vector using the servers private model. The goal of
the computation is to obtain the classiﬁcation while preserving
the privacy of both the decision tree and the client input. After
the computation, the classiﬁcation result is revealed only to the
client, and beyond that, nothing further is revealed to neither
party. The problem can be solved using any generic secure
multiparty computation. There exist specialized solutions that
combine different techniques and use the domain knowledge
to develop efﬁcient protocols.
c) Generic Secure Two-party Computation Solution:
Generic secure two-party computation [21], [31], [55], such
as garbled circuit and secret sharing, can implement PDTE.
The idea is to transform the decision tree program into a
secure representation that can be evaluated without revealing
private data. There exist frameworks such as ObliVM [40] or
CBMC-GC [28] that are able to automate the transformation
of the plaintext programs, written in a high level program-
ming language, into oblivious programs suitable for secure
computation. Their straightforward application to decision tree
programs does certainly improve performance over a hand-
crafted construction. However, the size of the resulting obliv-
ious program is still proportional to the size of the tree. As a
result generic solution are in general inefﬁcient, in particular
when the size of the tree is large.
d) Specialized Solutions: Specialized protocols [3], [7],
[10], [35], [37], [48], [50], [53] exploit the domain knowledge
of the problem at hand and make use of generic techniques
only where it is necessary, resulting in more efﬁcient solutions.
Existing protocols for PDTE have several rounds requiring sev-
eral interactions between the client and the server. Moreover,
the communication cost depends on the size of the decision
tree, while only a single classiﬁcation is required by the client.
Finally, they also require computational power from the client
that depends on the size of the tree.
e) Our Solution Approach: Our goal is to design and
implement a novel client-server protocol that delegates the
complete tree evaluation to the server while preserving privacy
and keeping the performance acceptable. The idea is to use
fully or somewhat homomorphic encryption (FHE/SHE) and
evaluate the tree on ciphertexts encrypted under the client’s
public key. As a result, no intermediate or ﬁnal computational
result
is revealed to the evaluating server. However, since
current somewhat homomorphic encryption schemes have high
overhead, we combine efﬁcient data representations with dif-
ferent algorithmic optimizations to keep the computational
overhead and the communication cost low. At the end, the
computational overhead might still be higher than in existing
protocols, however the computation task can be parallelized
resulting in a reduced computation time. As a result, we
are able to provide the ﬁrst non-interactive protocol,
that
allows the client to delegate the evaluation to the server by
sending an encrypted input and receiving only the encryption
of the result. Finally, existing approaches are secure in the
semi-honest model and can be made one-sided simulatable1
using techniques that may double the computation and com-
munication costs. Our approach is one-sided simulatable by
default, as the client does no more than encrypting its input
and decrypting the ﬁnal result of the computation (simulating
the client is straightforward), while the server evaluates on
ciphertexts encrypted with a semantically secure encryption
under the client’s public key.
f) Applications (ML-as-a-service): Concrete motiva-
tion of our approach are machine learning settings (with
applications in areas such as healthcare, ﬁnance etc.) where
the server is computationally powerful, the client is computa-
tionally weak and the network connection is not very fast.
Many cloud providers are already proposing platforms that
allow users to build machine learning applications [2], [6],
[32], [43], [45]. A hospital may want to use such a platform to
offer a medical expert system as a ML-as-a-service application
to other doctors or even its patients. A software provider may
leverage ML-as-a-service to allow its customers to detect the
cause of a software error. Software systems use log ﬁles to
collect information about the system behavior. In case of an
error these log ﬁles can be used to ﬁnd the cause of the crash.
Both examples (medical data and log ﬁles) contain sensitive
information which is worth protecting.
g) Contribution: Our contributions are as follows:
● We propose a non-interactive protocol for PDTE. Our
● We propose PDT-BIN which is an instantiation of
scheme allows the client to delegate the evaluation to
the server by sending an encrypted input and receiving
only the encryption of the result.
the main protocol with binary representation of the
input. Then we combine efﬁcient data representations
with different algorithmic optimizations to keep the
computational overhead and the communication cost
low.
● We propose PDT-INT which is an instantiation of
● We provide correctness and security proofs of our
the main protocol using arithmetic circuit, where the
values are compared using a modiﬁed variant of
LinTzeng comparison protocol [39].
scheme. Finally, we implement and benchmark both
instantiations using HElib [33] and TFHE [19].
h) Structure: The remainder of the paper is struc-
tured as follows. We review related work in Section II and
preliminaries in Section III before deﬁning correctness and
security of our protocol in Section IV. The basic construction
itself is described in Section V. In Section VI, we describe
1A 2-party protocol between parties P1 and P2 in which only P2 receives
an output, is one-sided simulatable if it is private (via indistinguishability)
against a corrupt P1 and fully simulatable against a corrupt P2 [34].
2
implementation and optimization using a binary representation.
In Section VII, we describe an implementation using an
arithmetic circuit based on LinTzeng comparison protocol [39].
We discuss implementation and evaluation details in Section
VIII before concluding our work in Section IX. Due to space
constraints, we discuss further details in the appendix.
II. RELATED WORK
Our work is related to secure multiparty computation
(SMC) [5], [11], [21], [25], [26], [31], [36], [55], private func-
tion evaluation (PFE) [38], [44] particularly privacy-preserving
decision tree evaluation [3], [7], [10], [35], [37], [48], [50],
[53] which we brieﬂy review in this section and refer to the
literature for more details.
Brikell et al. [10] propose the ﬁrst protocol for PDTE by
combining homomorphic encryption (HE) and garbled circuits
(GC) in a novel way. The server transforms the decision tree
into a GC that is executed by the client. To allow the client to
learn its garbling key, they combine homomorphic encryption
and oblivious transfer (OT). Although the evaluation time
of Brikell et al.’s scheme is sublinear in the tree size, the
secure program itself and hence the communication cost is
linear and therefore not efﬁcient for large trees. Barni et
al. [3] improve the previous scheme by not including the leaf
node in the transformed secure program, thereby reducing
the computation costs by a constant factor. Bost et al. [7]
represent the decision tree as a multivariate polynomial. The
constants in the polynomial are the classiﬁcation labels and
the variables represent the results of the Boolean conditions at
the decision nodes. The parties privately compute the values
of the Boolean conditions by comparing each threshold with
the corresponding attribute value encrypted under the client’s
public key. Finally, the server homomorphically evaluates the
polynomial and returns the result to the client. Wu et al. [53]
use different techniques that require only additively HE (AHE).
They also use the protocol from [24] for comparison and reveal
to the server comparison bits encrypted under the client’s
public key. The evaluation of the tree by the sever returns the
index of the corresponding classiﬁcation label to the client.
Finally, an OT reveals the ﬁnal result to the client. Tai et
al. [48] use the comparison protocol of [24] and AHE as well.
They mark the left and right edge of each node with the cost b
and 1− b respectively, where b is the result of the comparison
at that node. Finally, they sum for each path of the tree the cost
along it. The label of the path whose costs sum to zero, is the
classiﬁcation label. Tueno et al. [50] represent the tree as an
array. Then they execute d depth of the tree comparisons, each
performed using a small garbled circuit, which outputs secret-
shares of the index of the next node in tree. They introduce a
primitive called oblivious array indexing, that allow the parties
to select the next node without learning it. Kiss et al. [37]
propose a modular design consisting of the sub-functionalities:
selection of attributes, integer comparison, and evaluation of
paths. They then explore the tradeoffs and performance of
possible combinations of state-of-the-art protocols for privately
computing the sub-functionalities. De Cock et al. [20] follow
the same idea as some previous schemes by ﬁrst running
comparisons. In contrast to all other protocols (ours included),
which are secure in the computational setting, they operate
in the information theoretic model using secret sharing based
SMC and commodity-based cryptography [4] to reduce the
Symbol
xb
µ
n
 α 
x= x0, . . . , xn−1
i= xiµ . . . xi1
α
xb
i
α1  . . . αs
xi
M
m
d
s
Scheme
[10]
[3]
[7]
[53]
[48]
[20]
[50]
[41]
PDT-BIN
PDT-INT
Rounds
≈5
≈4
≥6
≈9
O(d)
6
4
1
1
1
Interpretation
Bit length of attribute values
Dimension of the attribute vector
Attribute vector
Bitlength of integer α, e.g., xi = µ
Bit representation of xi with most signiﬁcant bit xiµ
Number of nodes
Number of decision nodes
Depth of the decision tree
Ciphertext HE of a plaintext α
Bitwise encryption(xiµ, . . . ,xi1) of xi
Packed ciphertextxiµ  . . . xi1 0  . . . 0 of xb
Packed ciphertext containing plaintexts α1, . . . , αs
Number of slots in a packed ciphertext
i
TABLE I: Notations.
Tools
Commu-
nication
HE+GC
HE+GC
FHE/SHE
HE+OT
O2d
O2d
O2d
O2d
O2d
O2d
O2d