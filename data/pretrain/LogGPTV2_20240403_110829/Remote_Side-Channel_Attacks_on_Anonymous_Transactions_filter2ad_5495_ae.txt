(e.g., every 20 seconds for the RPC wallet). More precisely,
the wallet sleeps for a ﬁxed amount of time at the end of a
refresh. Thus, the time at which the wallet wakes and sends
a new request depends on the time it took to process the
transactions received in the previous refresh.
Evaluation. Figure 7 plots the delay between block re-
quests made by a user’s wallet when the ﬁrst received block
contains a single transaction. If the wallet is the transaction’s
payee, the next block request is delayed by 3.4 ms on aver-
age. A similar delay is observed between two wallet refresh
periods when the wallet processes a transaction of which it
is the payee. These timing differences are large enough to be
reliably observable in a WAN setting.
2750    29th USENIX Security Symposium
USENIX Association
Wallet is PayeeWallet is not Payee45678Time between RPC requests (ms)This issue is pernicious. Zcash’s recently released mobile
SDKs [21] have the same ﬂaw: the mobile wallet repeatedly:
(1) requests new transactions from a remote node; (2) pro-
cesses these transactions; and (3) sleeps for a ﬁxed duration.
An incomplete ﬁx, which was originally proposed by both
Monero and Zcash, randomizes the sleep duration after a
refresh. This ﬁx may sufﬁce against an adversary that targets
a transaction sent by an honest user, and is thus limited to a
single timing measurement. However, randomized delays are
insufﬁcient against an adversary that targets a known public
key. In this case, the adversary can create multiple payments
for this public key, and time the duration between refreshes
of a target wallet for each transaction. If the wallet holds the
public key, the average refresh time will be larger.
A better ﬁx consists in fully decoupling the starting times
and processing times of wallet refreshes. A simple approach
is to have the wallet wake at ﬁxed time intervals (e.g., at the
start of every minute). Since an adversary can tell when a
refresh period starts but not when it ends, this prevents our
attacks. Both Zcash and Monero implemented this solution.
Our attacks on Monero’s CLI wallet (see Appendix A) have
only been partially addressed as the current ﬁx uses a variant
of the above incomplete randomization defense.
6 Timing Attacks on zkSNARK Provers
The side-channel attacks we described in Section 4 and Sec-
tion 5 circumvent unlinkability and anonymity guarantees
by exploiting ﬂaws in the system design of P2P clients and
wallets. In this section, we further investigate the potential
for side-channel vulnerabilities in one of the fundamental
cryptographic primitives used in these systems: succinct zero-
knowledge arguments (zkSNARKs).
Following the strategy outlined in Section 3.3, we aim to
recover information about the conﬁdential transaction amount,
from a single timing measurement of the proof generation. In
Section 6.1, we demonstrate that such timing attacks reveal
information about transaction amounts in Zcash. In contrast,
we show in Section 6.2 that similar attacks are ineffective for
the special-purpose proofs implemented in Monero.
6.1 Timing Side-Channels
Prover
in the Zcash
We show that for Zcash’s zkSNARK system, proving times
heavily depend on the value of the prover’s witness. In partic-
ular, for anonymous transactions, we show that proving times
are heavily correlated with a transaction’s conﬁdential value.
To send a transaction, the sender creates two proofs, one
that proves ownership of the spent UTXOs, and one that
proves that new UTXOs are well-formed. In both proofs,
the witness is a vector that contains, among other terms, a
binary decomposition of the transacted value.
Figure 8: Remote lock timing attack on Monero. Plots the
response time of a victim’s local P2P node to get_objects
requests from a P2P adversary in a WAN. The attacker sends
2365 requests in one minute. The dotted red lines indicate
when the victim’s wallet issued a request for a transaction of
which it is the payee. The wallet’s requests cause lock con-
tention which delays the P2P node’s response to the attacker.
mempool). The attacker continuously sends get_objects
messages to the victim’s node and times the response.7 Our
experimental results are shown in Figure 8. The correlation
between timing delay and wallet requests is abundantly clear.
As described, the attack assumes that the mempool is un-
changed for at least two wallet refreshes (i.e., for 20-40 sec-
onds) after the payment to the wallet enters the pool. Since
Monero has about one transaction every 17 seconds and a new
block every 2 minutes, such periods of inactivity are common.
5.4 Remediation
Our attacks were ﬁxed in Monero’s v.0.15.0 release. The wal-
let now only requests unseen transactions from its P2P node,
thus preventing the attacks in Section 5.3.1 and Section 5.3.3.
The wallet also requests and processes new blocks in batches
of 1,000 blocks. Thus, the timing attack on block processing
from Section 5.3.2 can at best infer that a wallet was paid by
some transaction in a batch. A stronger defense would be to
issue block requests on a ﬁxed schedule, as described below.
Decoupling refresh time from processing time. The tim-
ing attack on the processing of unconﬁrmed transactions in
Section 5.3.2 is due to a design ﬂaw that has the wallet sleep
for a ﬁxed amount of time after a refresh. The start time of a
refresh thus leaks the duration of the previous refresh period,
which itself reveals if a payment was processed.
7A technical issue is that the attacker cannot send get_objects requests
at too high of a rate, as this causes the victim’s TCP congestion control
mechanism to delay the sending of some responses, thereby adding signiﬁcant
noise to the timing measurements. Speciﬁcally, the attacker waits for one
round-trip time between each request it sends, so as to leave sufﬁcient time
for the victim’s response message to receive an ACK.
USENIX Association
29th USENIX Security Symposium    2751
0102030405060Time [s]2025303540Delay [ms]Wallet transaction requestDelay of get_objects responsewith zero value. An adversary capable of timing a prover
could thus re-identify dummy UTXOs with good accuracy.
Discussion Compared to the attacks described in Section 4
and Section 5, the above timing attack is not easy to apply.
It requires that an adversary can time a proof generation, an
assumption that depends on users’ common usage patterns
(e.g., recurring payments) or deployment strategies (e.g. out-
sourcing proofs to a remote service). If a timing opportunity
does exist, we show that the resulting leakage allows for a
coarse approximation of the private transaction amount.
Of course, local side-channel attacks would be much more
effective. Yet, Zcash explicitly discounts this threat and makes
no claims of security against a co-located adversary [18].
Ultimately, this attack serves as a warning about potential
future dangers arising from non-constant-time cryptographic
implementations. A more mature implementation of Zcash’s
elliptic curve arithmetic is in development [7] and likely to
be incorporated into the main client in the future. We note
that the use of constant-time cryptography need not introduce
a large computation overhead. In Figure 9 for example, we
observe that the best-case and worst-case prover times differ
by less than 20 milliseconds, which is less than 1% of the
total prover time. Thus, even if all proofs were to take the
constant worst-case time, the overhead would remain small.
6.2 Absence of Timing Side-Channels in the
Monero Prover
In contrast to Zcash, Monero does not make use of a general-
purpose zk-SNARK system. Instead, the spender of a Monero
transaction only proves that the conﬁdential transaction con-
tains a commitment to a value that is in the range [0,264).
This “range proof” is based on Bulletproofs [10].
At a ﬁrst glance, we may expect Monero’s proofs to ex-
hibit a similar timing side-channel as in Zcash. Indeed, Mon-
ero’s range proof also performs a multi-exponentiation over
a binary decomposition of the transaction value, similarly
to equation 1. However, a crucial difference is that Bullet-
proofs operate not only on the binary decomposition of a
value but also on its bit-wise complement. More speciﬁcally,
given a transaction amount v ∈ [0,2n), the prover computes
the vector aL ∈ {0,1}n as the binary decomposition of v, and
sets aR = aL − 1n ∈ {−1,0}n. The prover then computes a
Pedersen commitment of the form
n
(aL)i · Gi + (aR)i · Hi ,
∑
i=1
where the Gi and Hi are ﬁxed base points in an elliptic curve
group. All further prover operations are on randomized values
independent of v. As a result, the number of computed elliptic
curve operations is a constant independent of the transaction
amount v. We note that this property is inherent to the proof
Figure 9: Correlation between transaction amount and
prover time in Zcash. For each of 200 random values, we
plot the mean and standard deviation in proof time for 20
transactions of that amount. The correlation coefﬁcient be-
tween the value (in log-scale) and proof time is R = 0.57.
Zcash uses the Groth16 proof system [25]. For our pur-
poses, it sufﬁces to know that the prover encodes the witness
as a vector (a1, . . . ,am) of ﬁeld elements, and that the prover’s
main computation is a “multi-exponentiation” of the form:
m
∑
i=1
aiGi ,
(1)
where the Gi are ﬁxed elliptic curve points. Importantly,
Zcash’s implementation optimizes away terms aiGi where
ai = 0. The proof time thus correlates with the number of
non-zero ﬁeld elements in the prover’s witness.
Since the transaction amount is encoded in binary in the
witness, its Hamming weight inﬂuences the proving time. And
since the weight of a number’s binary representation is cor-
related with the number’s absolute value, the proof duration
leaks information about conﬁdential transaction amounts.
Evaluation. To evaluate the timing attack, we picked 200
transaction amounts of the form 2t for t uniformly random in
[0,64). Note that the proof witness contains other ephemeral
terms besides the amount (e.g., commitment openings), which
also contribute to the variability in proving time. For each of
the 200 random amounts, we thus create 20 transactions by
randomizing over all other ephemeral witness components.
We then time the prover for each of these 4,000 transactions.
Figure 9 shows the mean and standard deviation of proving
times for each amount. Proving time and transaction amount
are strongly correlated (R = 0.57). While the timing leaks
only a coarse approximation of the amount, this could sufﬁce
to conﬁdently identify rare transactions of large value.
The left-most proof timings in Figure 9 correspond to trans-
action amounts of zero. Fingerprinting such proofs is partic-
ularly interesting due to Zcash’s “dummy Notes” (see [27]):
to obfuscate the number of UTXOs in a transaction (e.g., to
resist the attacks from [4]), users can create dummy UTXOs
2752    29th USENIX Security Symposium
USENIX Association
0210220230240250260Value in ZEC5.3605.3655.3705.3755.380Proof Time [s]R=0.5740] and Monero [30, 37]. These attacks exploit protocol-level
leakage and are agnostic to the protocol’s system-level im-
plementation. As a consequence, these attacks are ineffective
against transactions with particularly strong cryptographic
anonymity guarantees, such as Zcash’s fully shielded trans-
actions. In contrast, our side-channel attacks exploit imple-
mentation ﬂaws and bypass these cryptographic protections
to link or break conﬁdentiality of arbitrary transactions.
Closest to our work are early attacks on Bitcoin by
Lerner [31]. These attacks — which are similar in spirit to
our attacks on Zcash — let an attacker link a Bitcoin address
to the IP address of the owner’s P2P node.
Our attacks further relate to the larger study of remote side-
channels in anonymization tools such as Tor [3, 26, 38, 39] or
mix-networks [32, 46].
Our remote timing attacks on zk-SNARKs extend the rich
literature on similar attacks for other cryptographic primitives
or protocols [1,9,29]. Dall et al. [13] proposed a cache-timing
attack on a special-purpose zero-knowledge proof used for
anonymous attestation in Intel SGX. The challenges for tim-
ing of provers in anonymous transactions (see Section 3.3) do
not apply in this setting: the adversary can trigger arbitrarily
many attestations in a co-located enclave and perform high-
precision local cache-timing measurements of the prover.
8 Conclusion
We have presented a number of remote side-channel attacks
on anonymous transaction systems such as Zcash and Monero.
We have shown powerful attacks on transaction unlinkability
and user anonymity that exploit timing side-channels and
communication patterns leaked by a user’s P2P node upon
receipt of a payment. We have demonstrated that a remote
adversary can use this leakage to identify the P2P node used
by the secret payee of any transaction, and bootstrap this
ability to break user anonymity, transaction unlinkability, and
diversiﬁed address unlinkability.
We have further studied the impact of timing side-channels
on the zero-knowledge proof systems used in these currencies.
We have shown that Zcash’s implementation leaks secret
transaction data through the timing of a proof generation.
In principle, an attacker that can time a proof generation can
exploit this leakage to extract information about the transacted
amount, thereby breaking transaction conﬁdentiality.
Our attacks reveal a new facet of the difﬁculty of designing
secure systems for anonymous transactions. We hope that
this work will help inform privacy-oriented crypto-currencies
about the dangers of side-channel leakage. In particular, our
results motivate the need for system designs that proactively
isolate user wallets from public P2P interfaces, as well as for
the development of constant-time implementations of crypto-
graphic primitives such as zkSNARK provers.
Figure 10: Correlation between transaction amount and
prover time in Monero. For each of 200 random values,
we plot the mean and standard deviation in proof time for
20 transactions of that amount. The correlation coefﬁcient
between the value (in log-scale) and proof time is R = 0.04.
protocol described by Bünz et al. [10] and was not included
as an explicit countermeasure against side-channel attacks.
Similarly to our Zcash experiment in Section 6.1, for a
range of random transaction values, we timed 20 proofs with
other witness elements chosen at random (in Monero’s case,
the witness consists of the transaction amount and a random
blinding vector). Figure 10 shows that proof times are es-
sentially independent of the transaction amount (the slight
correlation can be attributed to measurement noise). Never-
theless, we do observe that proof times are not constant, with
variations of up to 0.5 milliseconds between proof times. This
can be attributed to the fact that Monero’s implementation of
the elliptic curve multi-exponentiation is not constant-time,
with some data-dependent operations and memory-access pat-
terns. However, the small resulting timing differences seem
insufﬁcient to reliably extract secret information from a sin-
gle remote timing measurement. Of course, performing local
attacks would be a much simpler matter.
7 Related Work
Several protocol-level issues with the privacy of anonymous
transactions were previously studied. In Monero, biases in
the choice of anonymity set were shown to enable transaction