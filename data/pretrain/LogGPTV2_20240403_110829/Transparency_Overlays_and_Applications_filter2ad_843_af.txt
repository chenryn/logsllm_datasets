return ⊥
return list[(cid:96)old + 1 :]
CheckAppend(cold, cnew, π)
return (cnew = Append(π, cold))
ProveIncl(c, elmt, list)
c(cid:48) ← (ε, 0); j ← 0
for all 1 ≤ i ≤ len(list)
if (list[i] = elmt) j ← i; break
c(cid:48) ← Append({list[i]}, c(cid:48))
return ⊥
if ((j = 0) ∨ c (cid:54)= Append(list[j :], c(cid:48)))
π(cid:48) ← ProveAppend(Append({elmt}, c(cid:48)), c, list)
return (c(cid:48), π(cid:48))
CheckIncl(c, elmt, π)
if (π = ⊥) return 0
(c(cid:48), π(cid:48)) ← π
return CheckAppend(Append({elmt}, c(cid:48)), c, π(cid:48))
19
DemoInconsistent(list, (c(cid:48), (cid:96)(cid:48)), t(cid:48))
// form DLC to time before t(cid:48)
cpre ← (ε, 0); j ← 0
for all 1 ≤ i ≤ len(list)
if (time(list[i + 1]) ≥ t(cid:48)) break
j ← i
cpre ← Append({list[i]}, cpre)
// check for inconsistencies at time t(cid:48)
ctest ← cpre
for all j + 1 ≤ i ≤ len(list)
if (time(list[i]) > t(cid:48)) break
ctest ← Append({list[i]}, ctest)
if (ctest = c(cid:48))
return ⊥
return (cpre, list[j + 1 :])
DemoNotIncl(list, elmt)
j ← 0
for all 1 ≤ i ≤ len(list)
if (time(list[i + 1]) ≥ time(elmt)) break
j ← i
for all j + 1 ≤ i ≤ len(list)
if (time(list[i]) > time(elmt)) break
if (list[i] = elmt) return ⊥
if (j = 0) return ((ε, 0), list)
cpre ← Com(list[: j])
return (cpre, list[j + 1 :])
CheckInconsistent((c(cid:48), (cid:96)(cid:48)), t(cid:48), (c, (cid:96)), π)
if (π = ⊥) return 0
(ctest, list) ← π; j ← 0
if (time(list[1]) ≥ t(cid:48)) ∧ (ctest (cid:54)= (ε, 0))
for all 1 ≤ i ≤ len(list)
return 0
if (time(list[i]) > t(cid:48)) break
j ← i
ctest ← Append({list[i]}, ctest)
if (ctest = c(cid:48))
return 0
if (Append(list[j + 1 :], ctest) (cid:54)= c)
return 0
return 1
CheckNotIncl(c, elmt, π)
if (π = ⊥) return 0
(cpre, list) ← π
if (time(list[1]) ≥ time(elmt)) ∧ (cpre (cid:54)= (ε, 0))
if Append(list, cpre) (cid:54)= c return 0
for all 1 ≤ i ≤ len(list)
return 0
if (time(list[i]) > time(elmt)) return 1
if (list[i] = elmt) return 0
return 1
Theorem B.1. If H(·) is a collision-resistant hash function, then the dynamic list commitment deﬁned above
is secure in both the basic (Deﬁnitions 3.1 and 3.2) and augmented (Deﬁnition 3.4) settings.
Proof. (Sketch.) To show this, we need to prove our construction satisﬁes six properties: (1) correctness (both
basic and augmented), (2) binding, (3) soundness, (4) append-only, (5) provable inconsistency, (6) provable
non-inclusion, (7) unforgeable inconsistency, and (8) unforgeable inclusion. We go through these each in turn.
Correctness. This follows by construction.
Binding. To win the game, an adversary must produce a tuple (c, list1, list2) such that CheckCom(c, list1) =
1, CheckCom(c, list2) = 1, but list1 (cid:54)= list2. These ﬁrst two properties imply that the two lists have the same
length and the cumulative hash of each of the lists is the same, but the last property implies that at some
point the lists contain a diﬀerent entry. Thus, an adversary that identiﬁes the point at which the list entries
diverge but the resulting hashes are the same can output the two diﬀering inputs to the hash (consisting of
the respective DLCs thus far and the divergent entries) to break collision resistance.
(Identifying these points of divergence can always be done in time proportional to the length of the lists,
so our reductions here and for the rest of the properties do run in polynomial time.)
Soundness. To win the game, an adversary must produce a tuple (c, list, elmt, π = (c(cid:48), list
)) such that
CheckCom(c, list) = 1, CheckIncl(c, elmt, π) = 1, and elmt /∈ list. These ﬁrst two properties imply that the
cumulative hash of list is the same as the cumulative hash of c(cid:48) and elmt||list
, c(cid:48))), but
the last property implies that at some point there must be diﬀering inputs, because elmt is never used as an
input in the former but is used explicitly as an input in the latter. Thus, an adversary that identiﬁes the
point at which the inputs are diﬀerent but the resulting hash is the same can break collision resistance.
(i.e., Append(elmt||list
(cid:48)
(cid:48)
(cid:48)
Append-only. To win the game, an adversary must produce a tuple (c1, c2, list2, list
) such that CheckCom(c2,
list2) = 1, CheckAppend(c1, c2, list
) = 1, but c1 isn’t a commitment to any preﬁx of list2. The ﬁrst two prop-
erties imply that the cumulative hash of list2 is the same as the cumulative hash of c1 and list
, but the last
property implies that at some point in the middle there must be diﬀering inputs, as c1 is not equal to any
of the intermediate values in the cumulative hash of list2 (by deﬁnition of not being a preﬁx). An adversary
that identiﬁes this point can thus output these diﬀering inputs to break collision resistance.
(cid:48)
(cid:48)
(cid:48)
20
Provable inconsistency. To win the game, an adversary must produce a tuple (c, t, list) such that isOrdered(list) =
1, the honest proof of inconsistency doesn’t verify, c isn’t a commitment to any preﬁx of list, or for any j
such that CheckCom(c, list[1 : j]) = 1, either time(list[j]) > t or j (cid:54)= len(list) and time(list[j + 1])  time(elmt), or (4)
elmt ∈ list
. Because the proof is produced honestly, we can rule out options (1) and (2), and combining
the honest behavior with the assumption that the list is ordered and applying a similar argument as in the
proof of provable inconsistency means we can also rule out option (3). This leaves option (4), which directly
contradicts the second winning condition.
, c(cid:48)) (cid:54)= Com(list), (3) there exists an i such that time(list
(cid:48)
) then: (1) time(list
(cid:48)
Unforgeable inconsistency. To win the game, an adversary must produce a tuple (c1, t, list2, c2, π) such
that CheckCom(c2, list2), CheckInconsistent(c1, t, c2, π) = 1, and isConsistent(c1, t, list2). The only way CheckInconsistent
will output 1 is if c2 = Append(list, cold). With all but negliglble probability it must be the case that
list2[len(list2) − len(list) + 1 :] = list (i.e., that list matches the end of list2), as if not we can easily break
collision resistance of the hash function.
So, let k be the index such that list = list2[k :]. Moreover, because isConsistent outputs 1, we know that
either j = len(list) or there exists some j with time(list2[j]) ≤ t ≤ time(list2[j + 1]) such that c1 = Com(list2[1 :
j]). Since list2 is ordered, and time(list2[k]) = time(list[1])  k, or in other words j ≥ k). Now consider the commitment obtained in CheckInconsistent after the
(j−k +1)-st append operation. This commitment will be such that if we append the last len(list2)−j elements
of list2, we get c2, but this commitment is not equal to c1 (otherwise CheckInconsistent outputs 0). We also
know that if we take c1 and append the last len(list2) − j elements of list2, we get c2. Thus, we again can
show a hash collision.
Unforgeable non-inclusion. To win the game, an adversary must produce a tuple (c, list, elmt, π) such that
CheckCom(c, list) = 1, CheckNotIncl(c, elmt, π) = 1, isOrdered(list) and elmt ∈ list. The only way CheckNotIncl
will output 1 is if π = (cold, list∆) such that c = Append(list∆, cold). Note that with all but negliglble probability
it must be the case that list[len(list) − len(list∆) + 1 :] = list∆ (i.e. that list∆ matches the end of list); if not
we can easily build a reduction which breaks collision resistance of the hash function. Let k be the index
such that list∆ = list[k :]. Moreover, we know elmt ∈ list; suppose it appears at position j. Now, since list is
ordered, and either time(list[k]) = time(list[1])  k). But the j − kth element in list∆ is not elmt, because CheckInconsistent outputs 1. Thus
if this occurs with non-negligible probability, we will be able to produce a hash collision.
B.2 An instantiation based on Merkle trees
Before we present our construction of DLCs based on Merkle trees, we must introduce some terminology.
For a binary tree T , deﬁne the completed subtrees to be subtrees of T with height t and 2t−1 elements, the
maximal completed subtrees to be those which are not contained within any other completed subtrees, and
the membership proof for a node in T to be the siblings of all the ancestors of that node. Then the algorithms
required for a DLC are instantiated as follows:6
Com(list)
Form a binary tree of height (cid:100)log(len(list))(cid:101) + 1 whose leaves, ordered from left to right, are the elements in
list, and where the leaves get closer to the root going from left to right (or stay at the same distance).
For each internal node, compute the hash of its children. Let r be the value at the root. Output
c = (r, len(list)), and output the values at the root of each maximal completed subtree, again going from
6To achieve eﬃciency, we alter the algorithms from their original form in Section 3.2 to allow for an extra input/output aux,
which is used to keep track of the internal hashes in the tree.
21
left to right, as the auxiliary information aux. Note that the positions of these nodes are fully deﬁned by
len(list).
Append(list∆, auxold, cold)
Parse cold = (rold, Lold); if this is not consistent with aux, output ⊥. Otherwise, construct the Merkle tree for
the new list using the values speciﬁed in auxold for the maximal completed subtrees, and let rnew be the new
root value. Output cnew = (rnew, Lold + len(list∆)), and the roots of all maximal completed subtrees in the new
tree as auxnew.
CheckCom(c, list)
Return (c = Com(list)).
ProveAppend(cold, auxold, cnew, list)
If cold is not consistent with auxold, output ⊥. Otherwise, build a list πaux that contains, for each value in aux,
a membership proof for the corresponding node in the tree corresponding to cnew. Output π = (πaux, auxold).
CheckAppend(cold, cnew, π)
Parse π = (πaux, auxold). If cold is not consistent with auxold, output 0. Otherwise, output 1 if each of the
membership proofs in πaux verify, and 0 otherwise.
ProveIncl(c, elmt, list)
Let i be the position of elmt in list, and let πi be the membership proof for elmt at position i in the tree
corresponding to list. Output (i, πi).
CheckIncl(c, elmt, π)
Parse c = (r, L) and π = (i, πi). If i > L, output 0. Otherwise, verify the membership proof π for elmt at
position i in a tree with L leaves, and output 1 if this veriﬁcation succeeds (and 0 otherwise).
DemoInconsistent(list, c(cid:48), t(cid:48))
If isOrdered(list) = 0, output ⊥. Otherwise, parse list = listpre(cid:107)(e1, . . . , en)(cid:107)listpost, where time(e1)  t(cid:48), and time(ei) = t(cid:48) for all i, 2 ≤ i ≤ n − 1.
(If time(list[1]) ≥ t(cid:48), set listpre = [], or if
time(list[len(list)]) ≤ t(cid:48), set listpost = [].)
If listpre (cid:54)= [], form (cpre, auxpre) ← Com(listpre), otherwise set (cpre, auxpre) = (, ). Form (cpost, auxpost) ←
Com(listpre(cid:107)(e1, . . . , en)), and (c, aux) ← Com(list). Compute πpost ← ProveAppend(cpost, auxpost, c, listpost).
Output π = (cpre, auxpre, e1, . . . , en, cpost, πpost).
CheckInconsistent(c(cid:48), t(cid:48), c, π)
Parse π = (cpre, auxpre, e1, . . . , en, cpost, πpost). Check that time(e1)  t(cid:48) or
cpost = c, verify πpost, and output 0 if any of these checks fails.
Let ctest = cpre and aux = auxpre. For all i, 1 ≤ i ≤ n, compute (ctest, aux) ← Append(ei, aux, ctest) and
output 0 if ctest = c(cid:48). If the loop completes then output (ctest = cpost).
DemoNotIncl(list, elmt)
If isOrdered(list) = 0, output ⊥. Otherwise, parse list = listpre(cid:107)(e1, . . . , en)(cid:107)listpost, where time(e1)  time(elmt), and time(ei) = time(elmt) for all i, 2 ≤ i ≤ n − 1. (If time(list[1]) ≥ time(elmt), set
listpre = [], or if time(list[len(list)]) ≤ time(elmt), set listpost = [].)
If listpre (cid:54)= [], form (cpre, auxpre) ← Com(listpre), otherwise set (cpre, auxpre) = (, ). Form (cpost, auxpost) ←
Com(listpre(cid:107)(e1, . . . , en)), and (c, aux) ← Com(list). Compute πpost ← ProveAppend(cpost, auxpost, c, listpost).
Output π = (cpre, auxpre, e1, . . . , en, cpost, πpost).
CheckNotIncl(c, elmt, π)
Parse π = (cpre, auxpre, e1, . . . , en, cpost, πpost). Check that time(e1) 
time(elmt) or cpost = c, and that elmt /∈ (e2, . . . , en−1). If any of these checks fail, output 0. Otherwise, output
(Append((e1, . . . , en), cpre, auxpre) = cpost).
Theorem B.2. If H(·) is a collision-resistant hash function, then the dynamic list commitment deﬁned above
is secure in both the basic (Deﬁnitions 3.1 and 3.2) and augmented (Deﬁnition 3.4) settings.
Proof. (Sketch.) To show this, we need to prove our construction satisﬁes six properties: (1) correctness, (2)
binding, (3) soundness, (4) append-only, (5) provable inconsistency, (6) provable non-inclusion, (7) unforgeable