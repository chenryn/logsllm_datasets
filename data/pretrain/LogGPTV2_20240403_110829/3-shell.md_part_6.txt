mkdir \$1;
cd \$1;
echo 这是个函数
}
\[root@server0 123\]#
**颜色**
格式: echo -e \"\\033\[字背景颜色;字体颜色m字符串\\033\[0m\" 
例如: echo -e \"\\033\[41;36m something here \\033\[0m\" 
\\033是准备加色 字背景颜色范围:40\--49  字颜色:30\-\--39  0m是还原
字颜色:30\-\--39 黑 红 绿 黄 蓝 紫 深绿 白
字背景颜色范围:40\--49 黑 深红 绿 黄 蓝 紫 深绿 白色
\-\-\-\--创建函数,定义颜色\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
cecho(){ #先定义函数cecho
echo -e \"\\033\[\$1m\$2\\033\[0m\" #函数内容是:定义文字颜色,
}
cecho 31 ABCD #调用cecho函数31是\$1 ABCD是\$2
cecho 32 ABCD
cecho 41 ABCD #背景变色
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\-\-\-\-\-\-\--自己调用自己的函数-差错炸弹,\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
.(){
.\|.&
}
.
如果将点换成常用的命令,则一运行将造成死机
## 5 案例5：中断及退出
通过break、continue、exit在Shell脚本中实现中断与退出的功能。
break可以结束整个循环；continue结束本次循环，进入下一次循环；exit结束整个脚本，案例如下：
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
for i in {1..5}
do
echo \$i
break
> echo 123 #因为break结束整个循环,echo 123将不执行
done
echo abc
\[root@server0 opt\]# bash test8.sh
1
abc
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
for i in {1..5}
do
echo \$i
\[ \$i -eq 3 \] && continue #continue只是结束本次循环,本次下面不执行
echo 123
done
echo abc
\[root@server0 opt\]# bash test8.sh
123
2
123
3 #continue只是结束本次循环,少执行一次echo 123
4
123
5
123
abc
例子:让用户输入数字,每输入一次,都与之前的想家,如果输入的是0,则结束并显示之前的总和
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
while :
do
read -p \"请输入数字:\" n
let a+=\$n
\[ \$n -eq 0 \] && break
done
echo \$a
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# NSD SHELL DAY04
[案例1：字符串截取及切割](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY04/CASE/01/index.html#case1)
[案例2：字符串初值的处理](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY04/CASE/01/index.html#case2)
[案例3：expect预期交互](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY04/CASE/01/index.html#case3)
[案例4：使用正则表达式](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY04/CASE/01/index.html#case4)
使用Shell完成各种Linux运维任务时，一旦涉及到判断、条件测试等相关操作时，往往需要对相关的命令输出进行过滤，提取出符合要求的字符串。
本案例要求熟悉字符串的常见处理操作，
**子串截取的三种用法：**
1.  \${变量名:起始位置:长度}
2.  expr substr \"\$变量名\" 起始位置 长度
3.  echo \$ 变量名 \| cut -b 起始位置-结束位置
**子串替换的两种用法：**
-   只替换第一个匹配结果：\${变量名/old/new}
-   替换全部匹配结果：\${变量名//old/new}
**字符串掐头去尾：**
-   从左向右，最短匹配删除：\${变量名#\*关键词}
-   从左向右，最长匹配删除：\${变量名##\*关键词}
-   从右向左，最短匹配删除：\${变量名%关键词\*}
-   从右向左，最长匹配删除：\${变量名%%关键词\*}
**定义初始值:**
echo \${a:-} 定义初值
# 1 案例1：字符串截取及切割
## 步骤一:字符截取
### 方法一，使用 \${}表达式
格式：\${变量名:起始位置:长度}
***使用\${}方式截取字符串时，起始位置是从0开始的。***
\[root@server0 opt\]# a=13973169942
\[root@server0 opt\]# echo \${a::1}
#截取第一个,起始位置省略,从第一个开始
1
\[root@server0 opt\]# echo \${a:0:1}
#截取第一个,起始位置为零,从第一个开始
1
\[root@server0 opt\]# echo \${a:0:} #长度不写,无法截取
\[root@server0 opt\]# echo \${a:0:0} #长度为零,无法截取
\[root@server0 opt\]# echo \${a:0} #从第一个开始,后全部截取
13973169942
\[root@server0 opt\]# echo \${a:3} #从第四个开始,后面的全部截取
73169942
### 方法二，使用 expr substr
> 格式：expr substr \"\$变量名\" 起始位置 长度
\[root@server0 opt\]# a=13973169942
\[root@server0 opt\]# expr substr \"\$a\" 1 3
139
\[root@server0 opt\]# expr substr \"\$a\" 7 4
6994
\[root@server0 opt\]# expr substr \"\$a\" 8 4
9942
\[root@server0 opt\]# expr substr \"\$a\" 8 #无法省略长度
expr: 语法错误
### 方式三，使用cut分割工具
> 格式：echo \$变量名 \| cut -b 起始位置-结束位置
>
> 选项 -b
> 表示按字节截取字符，其中起始位置、结束位置都可以省略。当省略起始位置时，视为从第1个字符开始（编号也是从1开始，与expr类似），当省略结束位置时，视为截取到最后。
\[root@server0 opt\]# a=123456789
\[root@server0 opt\]# echo \$a \|cut -b 1 2 #起始位置与结束位置之间少-
cut: 2: 没有那个文件或目录
\[root@server0 opt\]# echo \$a \|cut -b 1-3 #从第一个到第三个
123
\[root@server0 opt\]# echo \$a \|cut -b 2-3 #从第二个到第三个
23
\[root@server0 opt\]# echo \$a \|cut -b 1 #只截取第一个
1
\[root@server0 opt\]# echo \$a \|cut -b 2 #只截取第二个
2
\[root@server0 opt\]# echo \$a \|cut -b 2-
#从第二个开始到最后,省略了结束位置
23456789
\[root@server0 opt\]# echo \$a \|cut -b -3
#从第一个开始到第三个,省略了起始位置
123
\[root@server0 opt\]# echo \$a \|cut -b 1,3 #截取第一个和第三个
13
\[root@server0 opt\]# echo \$a \|cut -b 1,5 #截取第一个和第五个
15
\[root@server0 opt\]# echo \$a \|cut -b 1-3,9
#截取第一个到第三个和第九个
1239
\-\--随机选取8位\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
b=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
#第一种方法随机选取8位:\$\[变量名:起始位置:长度\]for i in \`seq 8\`
do
a=\$\[RANDOM%62\]
x=\${b:a:1}
p1=\$p1\$x
done
echo \$p1
#第二种方法随机选取8位:expr subster
for i in \`seq 8\`
do
c=\$\[RANDOM%62+1\]
y=\$(expr substr \$b \"\$c\" 1)
p2=\$p2\$y
done
echo \$p2
#echo \$b \| cut -b \$c
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
pass(){
p=
b=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
#第一种方法随机选取8位:\$\[变量名:起始位置:长度\]
for i in \`seq 8\`
do
a=\$\[RANDOM%62\]
c=\${b:a:1}
p=\$p\$c
done
echo \$p
}
d=\$(cat /opt/4day/user)
for d in \$d
do
useradd \$d
pass
echo \$p \| passwd \--stdin \$d
echo \"\$d 的密码是:\$p\" \>\> /opt/4day/userpasswd
done
## 步骤二：字符串的替换
### 1）只替换第1个子串 格式：\${变量名/old/new}
### 2）替换全部子串 格式：\${变量名//old/new}
> \[root@server0 4day\]# a=aabbccddeeffgg
>
> \[root@server0 4day\]# echo \${a/g/h} #将第一个g替换成h
>
> aabbccddeeffhg
>
> \[root@server0 4day\]# a=aabbccddeeffgg
>
> \[root@server0 4day\]# echo \${a//g/h} #将所有的g替换成h
>
> aabbccddeeffhh
## 步骤三：字符串的匹配删除
> \[root@server0 4day\]# a=\`head -1 /etc/passwd\`
>
> \[root@server0 4day\]# echo \$a
>
> root:x:0:0:root:/root:/bin/bash
1）从左向右，最短匹配删除 格式：\${变量名#\*关键词}
> 删除从左侧第1个字符到最近的关键词"："的部分，\* 作通配符理解：
>
> \[root@server0 4day\]# echo \${a#\*:} #包括:都被删除
>
> x:0:0:root:/root:/bin/bash
root:x:0:0:root:/root:/bin/bash \-\--红色为被删除部分
2）从左向右，最长匹配删除 格式：\${变量名##\*关键词}
> 删除从左侧第1个字符到最远的关键词":"的部分：
>
> \[root@server0 4day\]# echo \${a##\*:}
>
> /bin/bash
root:x:0:0:root:/root:/bin/bash \-\--红色为被删除部分
3）从右向左，最短匹配删除 格式：\${变量名%关键词\*}
> 删除从右侧最后1个字符到往左最近的关键词":"的部分，\* 做通配符理解：
>
> \[root@server0 4day\]# echo \${a%:\*}
>
> root:x:0:0:root:/root
root:x:0:0:root:/root:/bin/bash \-\--红色为被删除部分
4）从右向左，最长匹配删除 格式：\${变量名%%关键词\*}
删除从右侧最后1个字符到往左最远的关键词":"的部分：
\[root@server0 4day\]# echo \${a%%:\*}
root
root:x:0:0:root:/root:/bin/bash \-\--红色为被删除部分
\-\-\-\-\-\-\-\-\--批量修改文件名\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
a=\`ls /opt/4day/\*.txt\`
for i in \$a
do
mv \$i \${i%.\*}.doc
done
\[root@server0 4day\]# touch a{1..10}.txt
\[root@server0 4day\]# ls
1.sh 3.sh a1.txt a3.txt a5.txt a7.txt a9.txt userpasswd
2.sh a10.txt a2.txt a4.txt a6.txt a8.txt user
\[root@server0 4day\]# vim 3.doc
\[root@server0 4day\]# vim 3.sh
\[root@server0 4day\]# bash 3.sh
\[root@server0 4day\]# ls
1.sh 3.sh a1.doc a3.doc a5.doc a7.doc a9.doc userpasswd
2.sh a10.doc a2.doc a4.doc a6.doc a8.doc user
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--