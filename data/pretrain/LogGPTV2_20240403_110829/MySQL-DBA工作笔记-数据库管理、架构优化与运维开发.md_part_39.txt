1 row in set (0.00 sec)
|id
> explain insert into test values(3,'cc');
> explain update test set name='cc' where id=2;
换一个 DML，比如 update，也是不支持的。
在5.7版本中又做了一些改变，
（3）MySQL5.7版本
而换一个DML，比如 update，
从5.6版本中的结果来看，是支持的；那么最关心的问题，数据会不会变更呢。
（2）MySQL 5.6版本
我们再看看5.6和5.7版本的结果。
> explain insert into test values(3,'cc');
来看看DML语句的执行计划情况，发现是不支持的，
（1）MySQL5.5版本
首先是初始化数据，这个是通用的初始化方式。
为了进一步的验证，我们选择3个版本，5.5、5.6和5.7来测试。
1．对比 DML的执行计划的版本差异
1丨SIMPLE
Extra
|name|
select_type | table | type l-possible_keys I key I key_len I ref 
1
INULL丨NULL丨NULL
MySOL
'cc'）'atline1
也是类似的效果，也不会直接修改数据。
，那就是对于DML的支持更加完善了，你可以通过语
|NULL丨NULL丨NULL丨NULI
-十一
---
## Page 251
使用优化器trace 的方式。
这个过程中的处理呢，我们可以通过两种技巧，一种是 explain extended 的方式；一种是
可以使用两种小技巧。
选项，目前可以支持JSON 类型，使用的命令类似下面这样：
更好的服务，配套条件也要齐全。
执行计划输出，从输出列信息可以看到这条 update 语句的 where 子句走了主键索引扫描。
NULLINULL
Iref
 explain format=json select * from test; 
(2)查看执行计划的时候，如果对于执行的格式存在不同的场景需求,可以使用 format
mysql> desc update test set name='cc' where id=2\G 
possible
mysgl>*explain update test set name=cc**
2.得到执行计划详细信息的两种方法
在此我们可以使用一些命令得到执行计划的信息，如果想得到更细粒度的信息，我们
而对于 update 的执行计划，显示的内容会更为全面一些，如下是一个 update 语句的
在执行 SQL 的语句前加上 explain extended,使用 show warnings 即可得到执行计划的
（1）explain extended 的方式
有的时候，看起来简单的SQL语句，执行计划却相对复杂，如何定位查询优化器在
（1）查看执行计划还有一种看起来不太主流的方式，那就是 desc 命令，命令如下：
此外，可以补充两点关于执行计划的功能。
所以从执行计划的输出对比来看，也是强烈建议升级到5.7及以上版本，毕竟要提供
select_type: UPDATE
filtered:
key_len:4
rows
Extra:
rows:
type:range
INSERT
id:1
keys:
const
PRIMARY
100.00
NULL
PRIMARY
ng
where
aa
test
Extra
|NULL
row
丨ALL INULL
+** where id2>G*
丨NULL丨NULL
第6章MySQL查询优化|229
--+----
-----+-
---
## Page 252
230丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
差。我们来试着抓取一下执行计划。
度的一大利器。那我们就模拟一个性能较差的 SQL，比如下面的反连接语句，执行效率很
就是查看慢日志，然后再解析。或者使用第三方的工具，来得到效果更好一些的报告。
u.user name in (select t.user_name from users t where t.useridselect account
这里出现了比较纠结的一种情况，如果使用上面的方法，一个过程下来少说也有几分
我们假设一个场景,有一个 SQL 语句执行效率很差，我们通过 show processlist 可以看到,
（2）使用optimizer_trace（在MySQL5.6以上版本中可用）
1 row in set (0.00 sec)
unt(u.userid)
然后 show warnings 就会看到详细的信息。
[test]>explain extended
我们通过 mysqladmin pro 的方式抓取会话的情况，类似于 show processlist 的结果,
explain for connection 特性是基于数据库连接的执行计划解析。
3．得到执行计划的新特性
当然在 5.7版本还有关于执行计划的新特性 explain for connection，我们来看一下。
运行语句后，然后通过下面的查询得到 trace 信息。
使用优化器的跟踪特性可以定位到更丰富的明细信息。
[test]>show warnings;
from t_fund_info
select *from information_schema.optimizer_trace\G
Note
 set optimizer_trace="enabled=on";
1003
(account)
300
from t_user_
test
select#1 */ select count(`test`.`u`.`userid") AS
0
selectcount(u.userid)
localhost
login_record
0
seml
'2016-06-01');
test
from
Itest
users
users
.`t.userid
uwhere
data
---
## Page 253
据执行计划里面的key_len 做一个重要的参考。
下，到底启用了那些索引列，这个时候索引的使用情况就很值得琢磨琢磨了，我们可以根
标就是 key_len，我们接下来看一下这个指标的含义，如何去更好地理解。
NULL
key
NULL
mysql> explain select count(*)from department\G
对于这个语句，key_len 到底是多少呢？
explain select count (*)from department\G
运行语句为：
ENGINE=InnoDB DEFAULT CHARSET=gbk;
我们做一个简单的测试来说明。
·如果是字符串类型，还需要同时考虑字符集因素，例如：CHAR(30)UTF8 则 key_len
·一般地，key_len 等于索引列类型字节长度，例如 int类型为 4-bytes，bigint为 8-bytes;
key_len 大小的计算规则如下：
查看 MySQL 的执行计划，有时候会有些疑惑，那就是对于复合索引，多列值的情况
4．理解 key_len 的意义
不过到目前为止，我们对于执行计划的一些细节还没有开始分析，其中一个重要的指
这样一来就可以得到一个基本的执行计划了，对于分析问题来说还是有一定的效率提升。
查看执行计划的情况如下：
EY
DepartmentName
DepartmentID`
果创建部分索引，也被视为动态列类型），其key_len 还需要再加 2-bytes。
若该列类型为变长类型，例如VARCHAR（TEXT\BLOB不允许整列创建索引，如
若该列类型定义时允许 NULL，其 key_len 还需要再加 1-bytes；
2|SUBQUERY
至少是90-bytes;
key_1
INDD
NULL
NULL
len
id:
1740589
18269801
七
rows
table
fund_info
entName
100.00
|filtered
INULL
I partitions | type l possible_keys 
|ALL
ALL丨NULL
|NULL
第6章MySQL查询优化|231
|NULL
|NULL
---
## Page 254
232丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
换一个表test_keylen2，如下：
还要加2字节。这样下来就是20*2+1+2=43。
允许字段为NULL，则需要一个字节，对于变长的类型（在此就是VARCHAR），key_len
字
看到这个语句是启用了索引ind_d。
为 4，因为字段可为 null，所以需要一个字节来存储，这样下来就是 4+1=5了。由此我们可以
为5，这个值是怎么算出来的呢，首先表有两个字段，第一个字段的类型为数值，int 的长度
段DepartmentName为字符型，长度 20，
mysql> explain 
到了这里仅仅是个开始，我们还要看看略微复杂的情况，就需要复合索引了。我们就
possible
那我们举一反三，把语句修改一下，
在这个例子里面，possible_keys，key，Extra 你看了可能有些晕，我们看到key_len 的值
1row
possible
这个语句中，keylen 到底是应该为 4或者8还是 12 呢？我们就需要验证一下了。
explain
下面的语句就很实际了。
从上面代码中可以看到，key_len为 43，这个值是怎么算出来的呢，我们来计算一下，
select_type: SIMPLE
in set (0.00 sec)
Extra:
rows:
type:
rows:
key: IND_DN
type:
ref: const,const
rows:
key: IND_D
key:
ref:
keys: IND_DN
id:
ra:
 SELECT *from test_keylen2 WHERE c1=1 AND c2=1 ORDER BY cl\G
 Using index
idxl
ref
 test_keylen2
Using where;Using index
const
ref
 Using index
8
43
SELECT *from test_keylen2 WHERE c1=1 AND c2=1 ORDER BY c1\G
看看 key_len 的变化。
idx1(c1，c2，c3);
因为是GBK 字符集，所以需要乘以2，因为
---
## Page 255
这里却偏偏是9，这个数字怎么计算的。
如下所示：
这里就涉及到一个技术细节，是在 MySQL 5.6 版本中的 datetime 的存储差别。在 5.6.4
possible_
这一点出乎我的意料，按照 datetime 的印象是8个字节，所以应该是8+4=12，但是
explain select * from tmp_users where uid = 9527 and 1_date >= '2012-12-10
PRIMARY KEY(id)
CREATE TABLE tmp_users
下面的语句中key_len 值该如何计算呢。
对于 date 类型的处理，有一个很细小的差别。我们再换一个表，含有事件类型的字段，
在这里就不只是计算where 中的列了，而是因为大于1的条件直接选择了3个列来计算。
mysa1>explain*
我们添加一个范围，看看这个语句该如何拆分。
那下面的这个语句呢。
显然 key_len 只计算了 where 中涉及的列，因为是数值类型，所以就是 4+4=8。
1 row in set (0.07 sec)
l_date`
id
select_type:SIMPLE
TOINCREMENT
int(11)
table: tmp_users
Extra:
rows:
type:
rows:
datetime NOT
ref:
key:
keys:
id:1
id:1
NOT NULL
idx1
test_keylen2
ind_uidldate
sec)
DEFAULT NULL,
index
NULL
condition
1.
第6章MySQL查询优化丨233
10:13:17'\G
---
## Page 256
234丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
本质上，Profile 的内容还是来自于 information_schema.profiling。
用于控制是否开启或者禁用 profiling; profiling_history_size 是保留 Profiling 的数目。当然
闭的，执行时也会提示已经过期了，新的功能是在 performance_schema 中开放。
是使用performance_schema来关联。
性能问题的时候有很多的参考依据。
6.1.4
的 SQL，我们需要引入MySQLProfile来进行优化。
引，平时都会快，突然有一天慢了，如何排查呢，或者说有一些看起来难以定位性能瓶颈
版本以前是8个字节，之后是5个字节，可以参考如下6-2所示的表格。
了，很可能你的实际情况会比我上面罗列的要复杂的多，比如一条SQL执行效率走了索
Profile 相关的一个参数是 profiling,默认 profileing 选项为 OFF,默认值为 O; have_profiling
我们使用两种方式来进行解读。
我们运行一条SQL，如下：
1 row in set, 1 warning (0.00 sec)
mysql> show profiles; 
查看所有的 profiles，如下:
mysql> set profiling=l;
我们开启 profiling，如下：
通常情况下，使用 Profile 都是使用 show profile 这样的命令方式，这个功能默认是关
（1）使用 show profile方式解读
MySQL Profile 对于分析执行计划的开销来说，还是有一定的帮助，至少在分析一些
到目前为止，我们分析了执行计划的一些内容，可以开始尝试做一些优化方面的工作
所以按照这个算法，这条 SQL 语句中的 key_len 值在 5.7版本就是 4+5=9。
TIMESTAMP