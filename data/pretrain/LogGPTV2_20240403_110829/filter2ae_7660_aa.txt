* 前段时间听到几位大佬对NoSQL注入相关问题进行了热烈的讨论，于是事后做了一些简单了解。本文纯属个人扯淡，与技术无关。行文仓促，如有任何问题欢迎指正。
### 说在前面的话
这篇文章不是为了告诉大家如何挖掘SQL注入漏洞或SQL注入相关的实战技巧，我相信能够看完这篇文章的同学在实战能力和经验上一定比我强很多。撰写本文的目的也仅仅是我突然无聊的想从多个层面去了解更多关于SQL注入，或者说是SQL语句执行本身相关的细节内容，让自己更清晰的理解SQL注入的原理和本质，以及期待在分析过程中发生一些意外的思维碰撞。
那让我们开始吧。
### 关系型数据库SQL注入
不用多说，提到SQL注入，我们首先想到的肯定是传统关系型数据库中最常见的`1 or 1=1`和`' or ''='`。
基本原理不用我再细述了，就是大家都知道的：程序在构造SQL语句时，没有考虑输入数据的合法性，当数据内容超出预期时，影响了SQL语句原有的结构和语义，产生注入等安全问题。
主流的修复方案也很简单，过滤特殊字符、转义特殊字符、预处理等等。哪个方案更好更合理，是否应该全局处理，通过AOP、装饰还是数据库操作基类处理，这都不是本文的重点，不做过多讨论。
我们只再多问自己一句废话，为什么会这样？换个说法，为什么输入的数据会影响SQL语句的结构和语义 _（貌似还是废话）_ ？
假设我们的SQL长这样：
    SELECT * FROM table_A WHERE field_A=[USER_INPUT]
它从构造到执行，一般会涉及以下几个阶段：
    > 客户端应用 => 客户端驱动 => 数据库客户端/服务器协议 => 数据库服务器
为了便于分析，我们重新排个序：
  * 数据库客户端/服务器协议
  * 服务器协议实现
  * 服务器解析执行实现
  * 客户端协议实现（Driver层）
  * 客户端应用实现
借用开源关系型数据库MySQL _（本文选择MySQL在Github上的默认branch 5.7版本，不同版本或其他语言驱动和数据库可能有区别）_
，我们来具体看一下上面那条最简单的SQL查询语句在各阶段的情况
_（服务器对于不同的Command指令也可能会有不同的处理方式，甚至一些其他的中间处理过程也会形成攻击面，这里以思路为主，不详细展开）_ 。
#### **MySQL客户端/服务器协议**
为了照顾没有了解过MySQL相关协议的同学，我们先用Wireshark抓个包瞧瞧。
从Wireshark的解析结果不难看出，MySQL协议设计的真是超级简单。结合MySQL官方文档 _（在撰写本文之前MySQL Internals
Manual的Client/Server Protocol部分就已经变成了8.0.3版本，为了避免版本间存在差异，本文参考了官方MySQL-Proxy项目中对MySQL协议的说明）_ ，再对它做一个基本的解释：
  * `31 00 00`为包长度 _（指令加SQL语句的长度，计算的时候低位左移就行）_
  * `00`为包序列号
  * `03`为指令号，这里表示`COM_QUERY`，其他指令请自查
  * `53 45 .. 3b`为SQL语句
响应包就先不管了，单看这个请求包我们可以发现：通信过程中，SQL语句就是一个普通明文字符串。
嘘，别说话，继续玩。
#### **服务器协议实现**
MySQL服务器接收到请求后会为它分配线程，然后扔给`sql_parse`中的`do_command()`方法处理指令，`do_command()`中尝试解析数据包并装配指令：
    rc= thd->get_protocol()->get_command(&com_data, &command);
内部流程大致如下 _（如果对实现细节感兴趣的同学，可以去看看MySQL-Server）_ ：
  1. 调用`sql_class`中的`get_protocol()`获取`Protocol`对象，即子类`Protocol_classic`的实例
  2. 调用`Protocol_classic`的`get_command()`装配指令
    * `get_command()`中读取数据包，装配指令：
                *cmd= (enum enum_server_command) raw_packet[0];
    * `parse_packet()`解析数据包中剩余数据：
                case COM_QUERY:
        {
            data->com_query.query= reinterpret_cast(raw_packet);
            data->com_query.length= packet_length;
            break;
        }
做完这些之后，转由`dispatch_command()`处理SQL语句：
  1. 移除SQL语句头尾空白字符 _（源代码中注释的是”remove garbage”）_ 和尾部分号
  2. 分配剩余长度加1的空间装填SQL语句，并在末尾填充`\0`字符作为结束标识
  3. 调用`mysql_parse()`进入SQL语句的解析阶段
至此，SQL语句仅仅被简单的做了去除头尾多余字符的处理。
#### **服务器解析执行实现**
该阶段占用篇幅会比较大，跟踪过程也比较繁杂，由于与本文主题关系不是特别大，因此以后如有需要再进行详细介绍，这里只简单的提一下：
  1.     mysql_parse()
解析SQL语句
（MySQL主要使用Lex词法分析器和Yacc语法分析器对SQL语句进行解析）
    * `mysql_execute_command()`根据解析得到的`sql_command`选择动作
    * `execute_sqlcom_select()`执行SQL语句并得到执行结果
这里才会对SQL语句结构化和语义化 _（再次提醒一下，以上所有流程都是以最开始那条查询语句为场景的，其他类型语句可能会执行另外的流程）_ 。
#### **客户端协议实现（Driver层）**
MySQL在Github上开源了C++、Java、.NET、Python、NodeJS，以及ODBC几个版本的官方driver，本文选择大家熟悉的[MySQL
Connector/J](https://github.com/mysql/mysql-connector-j/)进行分析。
在Java应用中使用MySQL Connector可以在互联网上搜到大把的示例代码，这里我们就不再多说了，它的执行流程如下
_（其中带完整包名的为JDK内对象）_ ：
  1. 通过`Class.forName()`加载`com.mysql.jdbc.Driver`类，`Driver`中的静态代码块会调用`java.sql.DriverManager.registerDriver()`注册MySQL Driver：
        static {
        try {
            java.sql.DriverManager.registerDriver(new Driver());
        } catch (SQLException E) {
            throw new RuntimeException("Can't register driver!");
        }
    }
  2. `DriverManager.getConnection()`中调用`NonRegisteringDriver.connect()`
    * `ConnectionImpl.getInstance()`得到`java.sql.Connection`对象
  3. `ConnectionImpl.createStatement()`返回`StatementImpl`实例对象
在得到Statement对象后，即可调用相应方法完成增删改查等数据库操作。
我们仔细分析一下普通查询在driver中是如何实现的：
  1. 通过`StatementImpl.executeQuery()`执行SQL
    * 处理SQL语句中的Escape字符 _（见下面关于Escape部分）_ ：
                Object escapedSqlResult = EscapeProcessor.escapeSQL(sql,
            locallyScopedConn.serverSupportsConvertFn(), this.connection);
    * 判断DML是否是查询操作：
                char firstStatementChar = StringUtils.firstAlphaCharUc(sql,
            findStartOfStatement(sql));
        checkForDml(sql, firstStatementChar);
    * `ConnectionImpl.execSQL()`中调用`MysqlIO.sqlQueryDirect()`遵守MySQL协议封装`QUERY`指令数据包
    * `MysqlIO.sendCommand()`写入包长度和包序列号，并发包
为了验证driver层主要逻辑是否通用，我们再简单分析一下PHP默认的MySQL协议实现 _（由于PHP
7版本移除了MySQL相关默认扩展，本文选择了PHP stable 5.6.32版本中的mysqli扩展，并使用官方推荐的原生驱动mysqlnd）_
。由于MySQL扩展需要遵循PHP定义的扩展实现规则，需要了解相关的前置知识才能方便阅读，因此这里不跟踪代码细节，只简单描述一下流程。前面的数据库连接就省略了，直接从查询开始：
  1. `mysqli_nonapi`中定义的`mysqli_query()`会调用mysqlnd驱动的`mysql_real_query()`  
（该函数是一个调用了`mysqlnd_query()`的宏，而`mysqlnd_query()`则是一个调用了`MYSQLND_CONN_DATA.query()`处理的宏）
    * `MYSQLND_CONN_DATA.send_query()`中调用`simple_command()`执行命令
    * `simple_command_send_request()`封包成`MYSQLND_PACKET_COMMAND`对象
    * `MYSQLND_NET.send_ex()`调用`network_write_ex()`发包
由此可知，对于普通的SQL查询语句，该阶段几乎不会进行过多额外的处理。
#### **关于Escape**
大家都知道，PHP在mysqli扩展中实现了`mysqli_real_escape_string()`方法
_（mysqli_escape_string()为其别名）_ ，可以对部分特殊字符进行转义，但需要开发者主动调用。
mysqlnd驱动中提供了两种特殊字符处理方式：
  1. `mysqlnd_cset_escape_slashes()`，默认调用使用`\`字符对部分特殊字符进行转义
        switch (*escapestr) {
          case 0:
              esc = '0';
              break;
          case '\n':
              esc = 'n';
              break;
          case '\r':
              esc = 'r';
              break;
          case '\\':
          case '\'':