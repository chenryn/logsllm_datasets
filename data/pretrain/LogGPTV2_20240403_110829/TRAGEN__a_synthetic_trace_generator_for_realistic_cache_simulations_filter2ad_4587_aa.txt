title:TRAGEN: a synthetic trace generator for realistic cache simulations
author:Anirudh Sabnis and
Ramesh K. Sitaraman
TRAGEN: A Synthetic Trace Generator for Realistic Cache
Simulations
Anirudh Sabnis
Univ. of Massachusetts Amherst
Ramesh K. Sitaraman
Univ. of Massachusetts Amherst & Akamai Technologies
Abstract
Traces from production caching systems of users accessing con-
tent are seldom made available to the public as they are considered
private and proprietary. The dearth of realistic trace data makes it
difficult for system designers and researchers to test and validate new
caching algorithms and architectures. To address this key problem,
we present TRAGEN, a tool that can generate a synthetic trace that
is ‚Äúsimilar‚Äù to an original trace from the production system in the
sense that the two traces would result in similar hit rates in a cache
simulation. We validate TRAGEN by first proving that the synthetic
trace is similar to the original trace for caches of arbitrary size when
the Least-Recently-Used (LRU) policy is used. Next, we empirically
validate the similarity of the synthetic trace and original trace for
caches that use a broad set of commonly-used caching policies that
include LRU, SLRU, FIFO, RANDOM, MARKERS, CLOCK and
PLRU. For our empirical validation, we use original request traces
drawn from four different traffic classes from the world‚Äôs largest
CDN, each trace consisting of hundreds of millions of requests for
tens of millions of objects. TRAGEN is publicly available and can
be used to generate synthetic traces that are similar to actual pro-
duction traces for a number of traffic classes such as videos, social
media, web, and software downloads. Since the synthetic traces are
similar to the original production ones, cache simulations performed
using the synthetic traces will yield similar results to what might
be attained in a production setting, making TRAGEN a key tool for
cache system developers and researchers.
ACM Reference Format:
Anirudh Sabnis and Ramesh K. Sitaraman. 2021. TRAGEN: A Synthetic
Trace Generator for Realistic Cache Simulations. In ACM Internet Measure-
ment Conference (IMC ‚Äô21), November 2‚Äì4, 2021, Virtual Event, USA. ACM,
New York, NY, USA, 14 pages. https://doi.org/10.1145/3487552.3487845
1 Introduction
The volume and diversity of the digital content delivered over
the Internet is growing at a rapid pace. Such content include videos,
images, webpages, 360‚ó¶ videos, and software downloads. Much
of this content is delivered by large distributed networks of caches
operated by content delivery networks (CDNs). CDNs deploy hun-
dreds of thousands of servers in thousands of data centers around the
world. When a user accesses an object, say a web page or a video
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-9129-0/21/11. . . $15.00
https://doi.org/10.1145/3487552.3487845
366
segment, the user‚Äôs request is routed to a proximal CDN server. If
that server has the requested object in its cache, a cache hit is said
to have occurred, and that object is served to the user. Otherwise,
a cache miss is said to have occurred, the CDN server fetches that
object from an (usually distant) origin server over the WAN, and
then serves it to the user.
Maximizing cache hits. Obtaining cache hits is the desired goal
of caching as the user sees a faster response when the requested
object can be downloaded from a proximal cache. A cache miss is
undesirable since it causes large latencies due to having to fetch the
requested object from an origin server over the WAN. Further, a
cache miss causes additional WAN traffic between the CDN‚Äôs cache
and the content provider‚Äôs origin, increasing the bandwidth cost for
both parties.
The key metric for evaluating cache efficiency is its hit rate that
come in two flavors. The request hit rate (RHR) is the fraction of
requests that were cache hits, whereas the byte hit rate (BHR) is the
fraction of bytes that were served from cache. The former metric
correlates with average user performance. The latter correlates with
the additional WAN traffic required to serve the cache misses, hence
indicative of the additional bandwidth cost. RHR weights all hits
equally, whether or not the requested object is big or small. But, the
BHR weights each hit by the size of the requested object.
Content caching research. Content caching is ubiquitous and is
central to the functioning of the Internet ecosystem. Not surprisingly,
algorithms for maximizing the hit rate of a cache has been a subject
of intense research over the past few decades. The research has
resulted in a vast and growing literature of how to admit and evict
objects, so as to optimize the efficiency of the cache [9, 28, 29,
31, 42]. The traditional caching policies LRU, FIFO, LFU, and
RANDOM are still commonly used [19, 25] and several variants of
these policies have been proposed to improve the cache performance
[2, 42, 57]. Adaptive algorithms for caching content in in-memory
caches has been explored in [7]. Caching has also been used to
balance the load across the backend servers in a cluster [22] and
reduce the latency variability in the requests [6], amongst several
other applications. There has also been research on using deep-
learning to improve the caching policies [34, 44]. With time varying
content popularity, new content being published at very frequent
rates, and the increasing diversity of the content, caching remains an
active research area where new caching policies and architectures
are frequently proposed and studied.
Need for realistic traces from production caches. The key en-
abler of caching system research and development is cache simu-
lations. Developers in industry routinely modify caching policies
and simulate their impact. Researchers propose new caching policies
and architectures and validate their ideas using cache simulations.
The efficacy of a caching system greatly depends on the prevailing
patterns of how/what objects are requested by users, such patterns
IMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA
Anirudh Sabnis and Ramesh K. Sitaraman
when serving requests in time sequence from the trace, expressed as
a function of cache size (c.f., Figure 3). The HRC depends on the
caching policy used by the caching system. Further, RHR and BHR
may yield different HRCs and we refer to them as rHRC and bHRC
respectively.
Our notion of trace similarity is defined in terms of the HRC.
Given a caching system that implements a given caching policy (say,
LRU), we state that two traces Œ† and ùëÜ are similar if the HRC of
the caching system for trace Œ† is similar to the HRC of the system
for trace ùëÜ. Thus, cache simulations on traces ùëÜ and Œ† would yield
similar results, allowing trace ùëÜ to be used in the simulation instead
of trace Œ†.
TRAGEN architecture. Our trace generator consists of three main
modules shown in Figure 1 and are described below.
1) The traffic modeler runs periodically on the original traces Œ†
collected from the production system. The original trace could be all
the requests served by a given CDN cache over a period of time, such
a trace would be a mix of requests from different traffic classes, e.g.,
videos from CNN, or images from Amazon, or software downloads
from Microsoft. Alternately, trace Œ† may contain traces from the
production system of a single traffic class. The output of the traffic
modeler is a succinct ‚Äúmodel‚Äù of each traffic class, such a model
captures the caching properties of that traffic class. A commonly-
used model in large CDNs such as Akamai are footprint descriptor
(FD) described in [50] that model the rHRC of the original trace.
As FD does not capture byte hit rates, we enhance the FD to a byte-
weighted footprint descriptor (bFD) described in Section 2. The
traffic modeler also computes the object size distribution (SZ) of
each traffic class. Since the traffic modeler works on voluminous
production traces collected from the field, it runs infrequently (say,
once a week) to create the traffic class models.
2) Given the FDs, bFDs and SZ of each traffic class, the traffic
mixer component allows the user to specify the mix of traffic that
they would like to simulate, e.g., 10 Gbps of video traffic from
Amazon mixed with 5 Gbps of download traffic from Microsoft. The
traffic mixer uses footprint descriptor calculus to compute the FD or
bFD of the traffic class mix.
3) Finally, the trace generator uses the FD or bFD of the required
mix of traffic classes to generate a synthetic trace that fits require-
ments. That is, the synthetic trace is similar to the original production
traces of the required traffic mix.
Our contributions. Our main contribution is a tool that is publicly
available1 to the research and development community. The tool will
be seeded with realistic footprint descriptor models for traffic classes
hosted on Akamai‚Äôs production CDN, allowing users to generate
synthetic traces for their experiments for varying caching scenarios
according to their requirements. We prove that TRAGEN produces
synthetic traces that have a similar hit rate curve as the original trace
for caches that use the Least-Recently-Used (LRU) policy. Further,
we empirically validate TRAGEN by establishing the similarity of
the synthetic and original traces. In particular, we compare the two
traces by computing their hit rates and eviction ages.
1) We show that the average difference between the rHRCs and
bHRCs of the synthetic and original traces on a LRU cache is 3e-06
and 3.2e-06, respectively, across all traces and cache sizes in our
1It can be downloaded from https://github.com/UMass-LIDS/Tragen.
Figure 1: System diagram of TRAGEN.
can be provided by traces that consist of sequences of user requests
for objects. In order to design and validate new caching policies and
system designs, researchers and developers need such traces to em-
pirically predict the likely performance of the caching system in the
field. But, caching research is seriously hampered by the dearth of
realistic traces from production caching systems. Production traces
are considered private and proprietary and increasingly hard to ob-
tain. Even when obtained, original production traces cannot be made
available publicly for other researchers to replicate the work.
Another key obstacle for using original production traces for
cache simulations is that the number of caching scenarios that need
to be simulated is often large. Consider a CDN server in the field that
must cache and serve content that belongs to several different traffic
classes, say videos, web, downloads, and images from multiple
content providers, in relative proportions that drastically vary over
time. It is not possible to find actual production traces for every
such scenario that could happen in the field. Further, given that the
production traces are voluminous and most developers do not have
access to them for reasons of privacy, the ability to generate realistic
synthetic traces is important to test the system across several possible
traffic mixes and load scenarios.
Our approach. To overcome the challenge posed by the dearth of
realistic traces, we propose a tool called TRAGEN (c.f., Figure 1)
that generates synthetic traces for a wide range of caching workloads
that can be specified by the user of the tool. Formally, a trace is a
sequence of user requests where each request is a 3-tuple consisting
of the time at which the request was made by a user, the unique
identifier (say, url) of the object that was requested, and the size of
the object. TRAGEN produces a synthetic trace ùëÜ that is ‚Äúsimilar‚Äù
to an an original trace Œ† in the sense that the two traces would
produce similar hit rates in a cache simulation. Since the synthetic
trace has no information about actual objects accessed by users, it
can be generated in-place and used for cache simulations without
having to transport and store voluminous and sensitive production
traces.
TRAGEN can also produce a synthetic trace that is similar to a
mix of traffic classes, where each traffic class is represented by an
original production trace. For instance, it could produce a synthetic
trace that is a mix of 10 Gbps of video request traffic and 5 Mbps of
download request traffic. The ability to generate synthetic traces for
user-specified traffic mixes allows the developer to test their caching
systems on a wide variety of possible scenarios likely to occur in the
field.
Hit rate curves and trace similarity. The hit rate curve (HRC) of a
caching system on a given trace is the hit rate achieved by the cache
367
TrafficModelerTrafficMixerTraceGeneratorFDbFDSZFD'bFD'SZ'OriginalTraceSyntheticTraceSHRC()=HRC(S)User selectsrequired trafficmixTRAGEN: A Synthetic Trace Generator for Realistic Cache Simulations
IMC ‚Äô21, November 2‚Äì4, 2021, Virtual Event, USA
evaluation. Thus, the hit rate curves are nearly identical for the two
traces.
2) Using cache simulations, we show that the synthetic traces
produced by TRAGEN will yield similar hit rates as the original
traces for commonly-used caching policies that include LRU, SLRU
[27], FIFO [20, 27], RANDOM [1, 33, 58], PLRU [46], MARKERS
[1, 37], and CLOCK [16]. In particular, we show that the synthetic
trace yields a RHR (resp., BHR) that differs from the RHR (resp.,
BHR) of the original trace by 1.5% (resp., 1%) on average across all
cache sizes, caching policies and traces in our evaluation.
3) We show that on an average the eviction age of the synthetic
trace differs from the original trace by 1.8% on a LRU cache across
all cache sizes in our evaluation.
Limitations of TRAGEN. TRAGEN is guaranteed to produce syn-
thetic traces that have similar caching behavior to the original traces
for the set of caching policies that we could theoretically or empiri-
cally validate. Based on our work, we conjecture that TRAGEN will
work well for the class of policies that primarily use criteria related
to recency of access for eviction, many commonly-used policies
belong in this class.
The main limitation of our work is that we offer no explicit guar-
antees for arbitrary caching policies that may use entirely different
criterion. In fact, it is not clear if there exists universal trace gener-
ators that can provably work for arbitrary caching policies, while
still producing synthetic traces that are different from the original.
The space of possible caching policies is large and include ones
that control both the admission and eviction of content into cache,
while our validated cache policies perform only eviction. Our current
approach is to continue validating TRAGEN for more policies and
making changes to the algorithms as needed to widen the scope. We
expect this evolution to continue as more developers and researchers
use our tool.
Relation to prior work. Prior work in this area have proposed
synthetic workload generators for Web traffic [5, 12, 17, 30, 32,
43, 47]. These tools from the past decades, however, do not cater to