core of our system is an exploration algorithm that constantly
detects and avoids invalid execution states caused by wrong
peripheral readings.
Valid Execution State. Valid execution states are execution
states that are not invalid. By responding to the ﬁrmware
execution with the values stored in the knowledge base, µEmu
keeps the ﬁrmware emulation in valid execution states.
3 Overview
The goal of µEmu is to ﬁnd bugs in task code of ﬁrmware
related to improper handling of malformed input retrieved
from data registers of the I/O interfaces. Therefore, it needs to
emulate the peripheral drivers, especially those related to I/O,
by automatically generating appropriate responses when an
unknown peripheral register is accessed. However, we cannot
guarantee the same readings as real peripherals. Rather, the
provided (response) values should pass the ﬁrmware’s internal
checks so that the ﬁrmware execution could reach a useful
state for practical security analysis.
3.1 High-level Idea
Our work is based on three insights. First, in MCU ﬁrmware,
conditional register readings often directly inﬂuence the exe-
cution path. Second, by representing the peripheral registers
as symbols, the relationship between the peripheral register
and the path can be captured by symbolic expressions. Third,
if an incorrect path is selected, the ﬁrmware will reach an
invalid state. Therefore, our approach represents all the read-
ings from unknown peripherals as symbols, and leverages
symbolic execution and an invalid state detection mechanism
to automatically extracts knowledge about how to respond
to peripheral accesses. The extracted information includes
(1) a knowledge base regarding how to respond to unknown
peripheral accesses so that the execution will stay valid; and
(2) a set of identiﬁed data registers used for I/O operations.
The knowledge base is a cache of knowledge learned from
symbolic exploration. In a ﬁrmware execution, the same pe-
ripheral register could be accessed many times and the pe-
ripheral returns a value depending on the current hardware
state machine. In µEmu, we model an approximate hardware
state machine using peripheral context (e.g., the current func-
tion arguments), and use this context to match a cache entry.
Speciﬁcally, in the knowledge extraction phase µEmu starts
with a simple matching rule aiming to match many simi-
lar peripheral accesses. However, when the cached value is
proven wrong (by invalidity checks in future execution), it
is rejected and upgraded. The upgraded matching rule con-
siders complex execution context and thus only matches spe-
ciﬁc peripheral accesses with the same context. In short, a
cache entry uses progressively more context information to de-
cide a response. While the simple matching rule helps µEmu
quickly reduce the exploration space of symbolic execution,
the context-aware matching rule kicks in when the simple one
cannot handle the complex situations.
2010    30th USENIX Security Symposium
USENIX Association
3.2 Threat Model
µEmu is a bug-driven ﬁrmware emulator. The ultimate goal
is to ﬁnd software bugs in the task code of ﬁrmware that
can be leveraged to hijack the control ﬂow of the ﬁrmware,
steal conﬁdential information, launch DoS attacks, etc. In this
paper, we focus on ﬁnding memory-related bugs by fuzzing.
However, the capability of emulating ﬁrmware execution al-
lows µEmu to be used with other dynamic analysis tools. The
attacker is assumed to have access to standard I/O interfaces
of the device, e.g., the SPI or UART, and thus can feed mal-
formed data to these interfaces. We do not consider powerful
attackers who can cause circuit-level manipulation, including
arbitrarily changing the values of control registers or status
registers. Therefore, µEmu calculates appropriate values for
accesses to control/status registers so that peripheral drivers
avoid entering error handling states. It also identiﬁes data
registers used in I/O, which can be controlled by the attacker.
During dynamic analysis, we consider the input to the data
registers as untrusted and ﬁnd memory corruptions caused by
the malformed input.
3.3 Our Approach
µEmu is a two-phase system for emulating and analyzing
MCU ﬁrmware (Figure 1). For each ﬁrmware image, we ﬁrst
run a knowledge extraction phase in which a knowledge base
regarding how to respond to peripheral accesses is built. More-
over, a set of data registers used for I/O operations are identi-
ﬁed. In the second phase, we use dynamic analysis approaches
to test the ﬁrmware. When a custom-made peripheral is ac-
cessed, the appropriate response value is directly obtained by
referring to the KB. Accesses to data registers are directly
bridged to the analysis tools such as a fuzzer to test the task
code of the ﬁrmware. If a query does not match any cache
entries in the KB, the knowledge extraction phase needs to be
incrementally re-executed to enrich the KB.
Knowledge Extraction Phase. At the core of the knowledge
extraction phase is an invalidity-guided symbolic execution
engine. During symbolic execution, peripheral readings calcu-
lated (via a constraint solver) during previous exploration are
cached in KB using a tiered caching strategy. When a register
of an unknown peripheral is accessed, µEmu represents it as a
symbol. If this symbol directly impacts a branch target during
symbolic execution, µEmu chooses a default branch target
and caches the solved values for later accesses. The cached
values help the symbolic execution engine decide a favorable
branch target when the same peripheral is accessed later on.
Speciﬁcally, the cached value is used in a tentative concrete
computation to decide the corresponding branch target. We
adopt a tiered caching strategy. µEmu starts with a simple
matching rule aiming to let a cache entry match as many simi-
lar peripheral accesses as possible. If later we ﬁnd the cached
value was wrong, we reject it and upgrade the matching rule
for the corresponding peripheral register. The indicator for a
wrong cache entry is that the execution state becomes invalid
(Section 4.3). The upgraded matching rule captures more
complex peripheral behaviors by incorporating richer execu-
tion context into it (Section 4.2). The cache is hit only if the
execution context matches. In essence, the upgraded matching
rule helps provide accurate responses that reﬂect the speciﬁc
execution context, but it sacriﬁces generality.
When the current execution state is detected invalid, the
symbolic execution engine switches to another branch target
and updates the matching rule and the corresponding cache
entries in KB. If both branch targets lead to an invalid ex-
ecution state, our algorithm rolls back to the parent branch
and continues with unexplored targets (Section 4.4). We fol-
low a depth-ﬁrst-search (DFS) algorithm in the exploration.
This is because the ﬁrmware usually enters an invalid state
very soon after reading an incorrect conditional register value.
With DFS, we can quickly recover and switch to the right
branch. Our algorithm runs until the ﬁrmware exits (which
rarely happens) or no new basic block can be observed for a
quite long time.
Although µEmu follows the DFS algorithm to explore one
valid path, it does not mean dynamic analysis can only work
on this path. In fact, as discussed in Section 1, the knowledge
base built in the knowledge extraction phase can be used to
emulate multiple valid paths in the dynamic analysis phase.
Besides, our KB can be dynamically enriched when the ex-
ecution meets a new peripheral register or a new execution
context of existing peripheral registers.
Dynamic Analysis Phase. Leveraging the KB, µEmu facili-
tates efﬁcient dynamic analysis of ﬁrmware by allowing arbi-
trary ﬁrmware to be emulated. When a register of a custom-
made peripheral is accessed, the KB is referred and an appro-
priate response value is returned and fed to the emulation. To
demonstrate the application of this emulation capability in
bug hunting, we incorporated AFL [45], a popular fuzzing
tool, to µEmu (Section 4.6). In our prototype, we channeled
the test-cases generated by AFL to the identiﬁed data registers
to fuzz the task code. In addition, our design is not speciﬁc
to AFL and any other fuzzing tools can be used as a drop-in
replacement.
3.4 A Running Example
We show a running example of the proposed approach in
Figure 1. On the left, we show three execution traces on a
ﬁrmware image. A branch is represented by a node, which is
marked with the address of the peripheral register that deter-
mines the corresponding branch targets. In the example, two
branches both correspond to reading the peripheral register
mapped at 0x40064006 at PC 0x1a9a. After the knowledge
extraction phase, our algorithm decides that the third trace
is valid, and the corresponding KB should be used in the
ﬁrmware analysis phase.
In what follows, we explain how the third trace is selected
and how its KB is constructed. At the ﬁrst branch, the left-side
target is selected by default. The solver calculates a value
USENIX Association
30th USENIX Security Symposium    2011
For easy representation, only caching rule T1 and T2 are mentioned. In the knowledge base, each entry includes the following information: 1: the caching rule; 2: the address of
involved register; 3: the PC at which the register is accessed; 4: the hash of the context information; and 5: the cached value.
Figure 1: A Running Example of µEmu.
0x30 that can lead execution to that target. This value is
recorded as Entry 1 in the KB for trace 1 (step 1). The entry
states that if the peripheral register at 0x40064006 is accessed
at PC 0x1a9a later, 0x30 should be used to decide a favorable
branch target. This caching rule is encoded by the T1 label.
Along the trace 1, the symbolic execution engine ﬁnds that
the execution state is invalid because it meets one of the
rejecting conditions (see Section 4.3). Therefore, it switches
to trace 2 (step 2). Correspondingly, Entry 1 is calculated for
trace 2. At this time, the cached value is 0x0 (step 3). Using
this value, the symbolic execution engine ﬁnds that the left
branch target is favorable at branch 2 and should be taken
(step 4). However, the execution state is proven wrong again
and the execution switches to trace 3 (step 5). Since trace 3 is
forked from trace 2, its KB is inherited. However, to reach the
right target at branch 2, the symbolic execution engine ﬁnds
that value 0x20 should be used, which conﬂicts with Entry
1. Therefore, the caching rule is upgraded to T2. Compared
with T1, T2 considers the speciﬁc execution context when a
peripheral register is read, which is encoded as a hash value
in the entry (step 6). As a result, two entries of type T2 are
created, one for each branch. In the dynamic analysis phase,
which is shown on the right part of Figure 1, µEmu queries
the KB of peripheral register access and tries to match any
entries in the KB (and calculate the hash of execution context
if necessary). This KB keeps µEmu in valid traces.
4 System Design & Implementation
We ﬁrst describe the system architecture of µEmu (Sec-
tion 4.1). Then we elaborate the design and implement of
KB cache strategy (Section 4.2), invalid states detection (Sec-
tion 4.3), invalidity-guided KB extraction algorithm (Sec-
tion 4.4), and interrupt handling (Section 4.5). Finally, we
describe how we integrated µEmu with AFL (Section 4.6).
4.1 µEmu Framework
µEmu is designed and developed based on S2E version 2.0, a
QEMU-based concolic execution tool for program analysis
(an architecture overview of µEmu in shown in Figure 2). As
mentioned in Section 2.2, S2E provides tens of useful plugins
and APIs for analysts to use for customized analysis. There-
Figure 2: Architecture of µEmu
fore, major functions of µEmu were developed as plugins to
S2E using the provided API.
Due to the aforementioned code reconstruction in S2E 2.0,
the ARM support has been dropped [11]. With this release,
S2E completely switched to the KVM interface to decou-
ple the hypervisor from the core symbolic execution engine.
Although the beneﬁt of switching to the KVM interface is
obvious, it sacriﬁces broad architecture support because not
every architecture can be easily managed by the KVM inter-
face. Particularly, ARM MCUs exhibit some speciﬁcs making
them incompatible with the canonical KVM interface.
We made two contributions in adding ARM support to S2E.
First, we ported the DBT for ARM to S2E CPU emulation
so as to emulate ARM MCUs. This task is relatively straight-
forward because the upstream QEMU already supports the
ARM architecture, including ARM Cortex-M series MCUs.
We directly extracted the corresponding logic implemented
2012    30th USENIX Security Symposium
USENIX Association
X…Entry1: T1_0x40064006_0x1a9a_NULL_0x0XEntry1: T2_0x40064006_0x1a9a_0xe5fdc9d32eb8e178_0x00x400640060x40064006. . . FirmwareKnowledge Base for Trace 2FirmwareDynamicAnalysisPhaseTrace1:Trace2:Trace3:. . . KnowledgeExtractionPhase⑥upgradeKnowledge Base for Trace 10x40064006. . . executed trace:swi: switchins:  insertread: rdEntry2: T2_0x40064006_0x1a9a_0x914fd38236d9c235_0x200x40064006. . . Entry1: T1_0x40064006_0x1a9a_NULL_0x30Entry1: T1_0x40064006_0x1a9a_NULL_0x0Knowledge Base for Trace 3Instructions accesssymbolic dataInstructions accessconcrete dataExecution LoopKVM_RUNCPU and MemoryGuest CodeIntermediate RepresentationHostMachine CodeLLVMBitcodeConcreteExecutionon Host CPUSymbolicExecution on KLEEDevice PeripheralMMIOVisual CPU andPhysical MemoryInvalidStateDetectionQEMUKVM Interface emulates /dev/kvmExecutionEngineShared StateRepresentationPluginsSymbolic Execution Engine (S2E)DisassemblyDynamicBinaryTranslatorPeripheralModel LearningFuzzerHelperOn access tosymbolic data...Accesses to CPU/memoryAccesses to peripheral MMIO addressesKVM RUN/EXITKVM CMDs, e.g., interrupt injectionModified componentsNew componentsOriginal componentsInterruptControlPluginsKVM InterfaceVirtual Hardwaree.g., interrupt controllerKnowledge Basein QEMU that decodes the ARM instruction and further in-
terfaced it with the TCG front-end compiler. Due to the na-
ture of intermediate representation, the back-end of TCG was
largely untouched. Then we made necessary modiﬁcations to
facilitate the communication with the core S2E logic and to
generate events that are used by the callback functions in the
S2E plugin framework. These are essential for µEmu to place
hooks at translation block boundaries and other interesting
execution points.
The second task is to make the emulated ARM Cortex-M
CPU accessible via the KVM interface. In essence, S2E pro-
vides a virtual CPU (vCPU) capable of symbolic execution,
and QEMU manages the vCPU via KVM interfaces. Except
for the canonical KVM interfaces (e.g., KVM_CREATE_VCPU
to allocate a vCPU instance), ARM Cortex-M CPUs exhibit
many speciﬁcs that render the implementation more challeng-
ing. We added several customized interfaces for QEMU to
fully manage the ARM Cortex-M vCPU via the KVM inter-
faces.
We developed four custom-made plugins to implement the
designed functions in µEmu: the InvalidStateDetection
plugin for invalid state detection (Section 4.3), the
KnowledgeExtraction plugin for invalidity-guided KB
extraction and ﬁrmware emulation (Section 4.4), the
InterruptControl plugin for interrupt
injection (Sec-
tion 4.5), and the FuzzerHelper plugin for fuzzer integration
(Section 4.6). In total, we contributed more than 800 lines of
C code to extend S2E with ARM Cortex-M support. The four
plugins are completed with 829, 3,395, 311, and 560 lines of
C++ code, respectively.
4.2 KB Caching Strategy
In µEmu, we use a tiered caching strategy aiming to capture
both static and dynamic behaviors of peripherals. Speciﬁ-
cally, four matching rules are deﬁned and selected adaptively
based on the concrete execution context to handle the diverse
complexity of real-world ﬁrmware.
4.2.1 T0 – Storage Model
Strictly speaking, T0 is not a matching rule. Rather, it models
the simple storage model of peripheral registers. That is, the
peripheral register stores the most recent value written to it
and responds to the following read operations with it, exactly
as the way normal memory works. This behavior is quite
common in MCUs. For example, the ﬁrmware writes con-
trol values to conﬁguration registers, which when accessed,
should respond the same value to the ﬁrmware. T0 is activated
before any other caching rules, provided that there was a write
operation to the register before. When T0 is proven wrong, it
is upgraded to the caching rule T1.
4.2.2 T1 – PC-based Matching
This matching rule reﬂects the greedy nature of the proposed
algorithm. It is designed to match broader peripheral accesses,
thus avoiding the path explosion issue. To this end, it does not
match speciﬁc execution context to maximize applicability.
Speciﬁcally, the PC (pc) and the peripheral address (addr)
uniquely determine the cached value. The corresponding entry
in the KB is encoded as T1_addr_pc_NULL_value. For ex-
ample, T1_0x40023800_0x10000_NULL_0x00 speciﬁes that
when the ﬁrmware reads from address 0x40023800 at PC
0x10000, the value 0x00 should be used to decide the favor-
able branch target. Based on our observation, many peripheral
registers have a ﬁxed value at a particular PC or even arbitrary
PCs. Therefore, the T1 cache rule comprises most entries for
conditional registers in the KB (see Table 3). For example, in
the code snippet shown in Listing 1, the peripheral register
at 0x40023800 should always have the 17th bit set to break
the while loop. Other values are invalid and never used in the
ﬁrmware. When T1 is proven wrong, it is upgraded to the
caching rule T2.
1 while ( MEMORY [0 x40023800 ] & 0 x20000 )
2
3
if ( HAL_GetTick () >= timeout )
return 3;
Code Listing 1: Code snippet of Oscillator conﬁguration
function.
4.2.3 T2 – Context-based Matching
The T1 matching rule cannot handle complex situations where
the returned value of the same peripheral register should
change with the execution context. In Listing 2, we show
such an example.
1 while ( huart -> TxXferCount ){
2
3
...
if ( UART_WaitOnFlagUntilTimeout ( huart , 0x80 , 0,
tickstart , Timeout ) != HAL_OK )
return HAL_TIMEOUT ;
huart -> Instance -> DR = * pDataa ++;
4
5
6 }
7 if ( UART_WaitOnFlagUntilTimeout ( huart , 0x40 , 0,
tickstart , Timeout ) != HAL_OK )
8
return HAL_TIMEOUT ;
Code Listing 2: Code snippet of UART transmission in
STM32 MCUs.
This code transfers a byte array via the UART interface.
Before putting a byte on the data register, it checks the sta-
tus register regarding whether the hardware is ready (line
3). If it is ready, the status register should have a bit set
as indicated by the second parameter 0x80 of the function
UART_WaitOnFlagUntilTimeout, which simply reads the
status register and compares it with the second parameter. Af-
ter all the data have been sent, the ﬁrmware reads the status
register again to check whether the transmission is completed
(line 7). Similarly, the condition is indicated by the second
parameter which is 0x40. The code can only return true if all
the checks are passed. In this example, accessing the same
peripheral register (status register of UART) at same PC (in
UART_WaitOnFlagUntilTimeout()) should yield different
values, which cannot be handled by T1.
USENIX Association
30th USENIX Security Symposium    2013
To address this issue, in addition to the current pc and pe-
ripheral register at addr, the T2 matching rule also compares
the execution context when the peripheral is accessed. We
calculate a hash value over the concatenation of execution
context and encode it into the cache entry. The resulting entry
is expressed as T2_addr_pc_contextHash_value. The ex-
ecution context is deﬁned as up to three levels of caller PCs
plus current function arguments. Therefore, in the example
shown in Listing 2, the second argument directly distinguishes
the two invocations to UART_WaitOnFlagUntilTimeout()
at line 3 and 7.
To show how the calling context differentiates the execution
context, we show another example in Listing 3. This func-
tion constantly polls the current time (cur_time) and then
compares it with the time obtained before (timestart) until
the difference exceeds the maximum delay speciﬁed in the
function parameter (timeout). On a real device, the function
ticker_read() reads from the peripheral a monotonically
increasing counter. To break the while loop, cur_time must
be equal to or greater than timestart plus timeout.
1 int timestart = ticker_read () ;
2 do
3
4 while ( cur_time - timestart < timeout );
cur_time = ticker_read () ;
Code Listing 3: Code snippet of the wait() function.
Since the calling PCs at line 1 and 3 are different, we
can easily use the T2 caching rule to distinguish the two
invocations to ticker_read(). When T2 is proven wrong, it
is upgraded to the caching rule T3.
4.2.4 T3 – Replay-based Matching
However, we ﬁnd that there are still corner cases which T2
cannot handle. This is particularly disconcerting when the
corresponding code is related to device initialization, since the