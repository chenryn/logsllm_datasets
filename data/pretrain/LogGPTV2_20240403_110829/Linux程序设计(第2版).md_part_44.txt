if (res == -i){
fprintf(stderr. *F_GETLx failed\n*}:
exit (EXIT_FAILURE) :
if (region_to_test.1_pid !a -1){
printf(*Lock would fail. F_GETLK returned:\n*);
show_lock_infol6region_to_test1;
else [
printf(*F_RDLCX - Lock would sueceed\n*);
close(file_desc);
exit (EXIT_SUCCESS):
void show_lock_info（struct flcck *to_show){
printf(-1_whenceed.·.to_show->1_whencel;
printf(-)_lened,"
printf(*l_start ad,..（int)to_show->1_start);
printf(*1_pid din°. to_show->1_pid);
.(int)to_show->1_1en):
为了测试我们所做的封锁，需要先运行lock3程序，接着再运行lock4程序对被封锁文件进行
测试。我们采取的办法是用下面的命令把lock3程序放到后台去运行：
$ 1ock3
$ process 1534 1ocking file
命令提示符又出现了，这是因为lock3是在后台运行的。接着，我们立刻用下面的命令运行
lock4程序：
S lock4
下面是我们得到的输出，为简洁起见，我们对它做了一定的省略：
Testing F_wRLocK on region from 0 to 5
F_WRLcK-Lock would succeed
F_RDr.cK -Lock would succeed
Testing P_RDLocK on region fron O to 5
Testing F_wRLOCK on region fron 10 to 15
Lock would fail.F_CErLK returned:
1_type 0,1_whence 0,1_start 10,1_len 20.1_pid 1534
Testing F_RDtocK on region from 10 to 15
F_RDLCK-Lockwould succeed
Testing F_wRLoCK on region from 15 to 20
Lock would fail.F_GETLK returned:
1_type 0, 1_whence 0,1_start 10.1_len 20.1_pid 1534
Teuting P_RDLocK on region fron 15 to 20
F_RDLCK-Lock would succeed
Testing F_wRLOCK on region fron 25 to 30
Lock would fail.F_GETLx returned:
1_type 0,1_whence 0,1_start 10,1_len 20.1_pid 1534
F_RDLCK-Lock would succeed
Testing F_wRLoCK oa tegion from 40 to 45
Lock would fail.F_G8TiK returned:
1_type 1.1_whence 0.1_start 40.1_1en 10,1_pid 1534
Testing F_RDLoCx on region fron 40 to 45
Lock would fail.P_GETLK returned:
加入java编程群：524621833
---
## Page 232
214Linux程序设计
1_type 1. 1_whence 0. 1_start 40. 1_len 10, 1_pid 1534
Testing F_RDLocK on_region fron 95 to 100
F_RDLCK - Lock would succeed
操作注释：
lock4程序把数据文件每五个字节分为一组，为每组设置-个测试文件区域封锁状态的flock
结构，再通过这些flock结构检查其对应区域是处于写封锁状态还是处于读封锁状态，返回信息
将给出区域的字节、从字节0开始计算的偏移值、可能会使封锁申请失败的原因说明等。齿为返
回结构里的I_pid数据项包含着当前对文件施行封锁的程序的进程标识代码，所以我们先把它设
置为“-1”（这是一个非法值），在fcnt调用返回时测试它是否被修改了。如果文件区城当时没有
被封锁，1_pid将不会被改变。
为了读懂程序输出.我们需要查阅头文件fcntl.h（在Linux机器上的/usr/include/linux子口录
里）。我到齐到l_type参数的“1”值对应着定义F_WRLCK，而1_type参数的“0”值对应若定义
F_RDLCK，因此，返回结构中I_type参数的“1”值会告诉我们不能施行封锁的原因是已经有-
个写封锁了；返回结构中l_type参数的“0”值表示原因是已经有一个读封锁了。在数据文件没
有被lock3程序封锁的区域上，共享封锁和独占封锁都可以成功。
从字节10到30，我们可以看到能够对它们施行共享封锁，因为1ock3施行的现有封锁是共学
而不是独占的。面在字节40到50之间的区域上，两种类型的封锁都将失败，因为lock3对这一区
城施行的是一个独占（F_WRLCK）封锁。
7.2.4文件封锁的竞争现象
见过如何测试-个文件上现有的封锁状态之后，我们再来看看当两个程序争夺文件同一区
域的封锁权时会出现什么样的现象。我们先使用我们的lock3程序对数据文件施行封锁，然后用
一个新的程序去尝试再次对它进行封锁。为了使这个程序示例更完整，我们添加了一些解除封
锁的调用。
下面的lock5.c程序其作用不再是测试数据文件各部分的封锁状态了，它将试图对文件已经
被封锁的区域再次施行封锁。
动手试试：文件封锁的竞争现象
1)在各种include语句和变量声明之后，我们打开一个文件描述符：
include 
inciude 
#include 
const char *test_file =*/tep/test_lock*;
Int main()
int file_desc;
struct flock region_to_lock;
int res:
加入jaVa编程群：524621833
---
## Page 233
第7章数据管理
215
file_desc = open(test_fi1e, 0_RDWR | O_CREAT, 0666);
1f (1f1le_desc）f
fprintf [stderr, *Unable to open s for read/write\n*, test_file):
exit (EXIT_FAILWRE) :
2）程序的其余部分用来设置数据文件的不同区域，并试图对它们施行不同的封锁：
region_to_lock.1_type = F_RDLcK;
region_to_lock.1_start = 10:
region_to_lock.1_whence = SEEK_SET;
region_to_lock.1_len =5:
printf(*Prucess ed, trying F_RDLCK,
(int)region_to_lock.1_start.(int)(region_to_lock.1_start +
region ed to edn*, getpid(),
region_to_1ock.1_len}:
res = fcntl(file_desc, F_serLx, &region_to_lock):
1f (res x -1){
printf(*Process sd - tailed to lock region\n*. getpid(1):
1else {
printf(*Process d - obtained 1ock region\n*, getpid());
1
region_to_1ock.1_type = _UNLCK;
region_to_lock.1_whence = SEEK_SET;
region_to_lock.1_start = 10;
cegion_to_lock.1_len-5:
printf[*Pzocess d, trying F_UNLCK. region gd to ed\n*. getpid(),
(int) (region_to_lock.1_start *
(int)region_to_lock.1_start,
res = fenti(file_desc, F_SETLK.&region_to_lock);
region_to_1ock.1_len));
if tres == -1) 
printf(*Process d - failed to unlock region\n*, getpid[));
}else{
printf (*Process ad - unlocked region\n*, getpid(11;
region_ro_lock.1_type a F_UNLCK:
region_to_lock.1_whence = SEEK_SET;
region_to_lock.1_start = 0;
printf(*Process ed. trying F_UNLCK, region d to ad\n*, getpid(),
region_to_lock.1_len = 50:
(1nt1 (region_to_lock.1_start +
(int)region_to_lock.1_start,
res = fcntl(file_desc,F_SETLK. &region_to_lock);
region_to_lock.1_len) 1 :
ifres s-11(
printf(*Process d - failed co unlock region\n*. getpid()):
printf(*Process td - unlocked region\n*. getpid()):
1
region_to_1ock.1_type = F_wRLCK;
region_to_lock.1_start =16:
reglon_to_1ock.l_whence ± SEEx_SET;
printfI*Process d. trying F_wRLCK, region d to d\n*, getpid(),
region_to_lock.1_len =5;
(int) (region_to_lock.1_start +
[int)region_to_lock.1_start,
resfcntlifile_desc.F_sEtLx.&region_to_lockl;
region_to_lock,1_1en) 1 ;
if （res a-1）{
printf1*Process ad - foiled to lock region\n*, getpid(）);
}else {
printf(*Process $d - obtained lock on region\n*, getpid(11;
region_to_lock.1_type a F_RDLcK:
region_to_lock.1_whence.x SEEK_SET:
region_to_lock.1_start=40;
加入iava编程群
：524621833
---
## Page 234
216
Linux程序设计
region_to_lock.1_len = 10;
printf(*Process sd. trying F_RDLCK, region td to ed\n*, getpid(1,
(int)(region_to_1ock.1_start+
(int)region_to_lock.1_start,
res = Eentl(file_desc.F_SETLK,kregion_o_lok;
region_to_1ock.1_len) ) :
if (res ss -11(
printf(*Process d - failed to lock regionn°,getpid());
1else {
printf(*Process d - obtained lock on regionn*. getpid(1!:
recion_to_lock.1_whence SEEK_SET:
region_to_lock.1_type = F_wRLCK:
region_to_1ock.1_atart-16;
printf(*Process &d, trying F wRLCK with wait, region kd to adn", getpid().
region_to_1ock.1_1en = 5;
(int) (region_to_lock.1_start +
[1nt)region_to_lock.1_start,
res = fentl(file_desc, F_SETLxw, sregion_to_lock):
region_to_lock.1_len));
if (res s=-1)(
1else（
printf(*Process ed - failed to lock region\a*. getpid(1);
printf(*Process kd -obtained lock on region\n*, getpid1)):
F
printf(*Process &d ending\a*, getpid(}):
close(file_desc);
exit (EXIT_SUCCESS) :
我们先在后台运行lock3程序，然后立刻运行这个新程序。下面是我们得到的输出：
Process 228, trying F_RDLCK, region 10 to 15
Process 227 1ocking file
Process 228.trying F_UNLCK, region 10 to 15
Process 228 -obtained lock on region
Process 228-unlocked region
Process
228,trying F_uNLCK. region 0 to 50
Process
228-unlockedregion
Process
228, trying F_wRIcK, region 16 to 21
Process
Proress 228, trying F_RDLCK,region 40 to 50
Process 228-failed to lock on region
Process 227 closing file
Process
228, trying F_wRLCK with wait,
region 16 to 21
Process 22s - obtained 1ock on region
Process 228 ending
操作注释：
首先，这个程序试图用一个共享锁来封锁从字节10到15的一个区城。这个区城已经被一个
共享锁封锁住了，但共享锁是允许同时使用的，因此封锁成功。
随后，程序解除了它自己对该区城的共享封锁，这也成功了。接下来，程序试图解除数据
文件前50个字节上的封锁一虽然它本身没有对这一区域设置任何封锁。这也成功了，这是因为
解锁申请的最终结果是使这个程序不再对这前50个字节拥有任何封锁一这当然不需要这个程序
在事先设置什么封锁。
接着，程序试图用一个独占锁来封锁从字节16到21的一个区域。这个区域已经被一个共享
锁封锁住了，因此这一次新的封锁失败了，因为无法在此区城上创建一个独占锁。
加入java编程群：524621833
---
## Page 235
第7章数据管理217
在此之后，程序尝试给从字节40到50的区城加上一个共享锁。这个区城已经被个独占锁
封锁住了，所以封锁行动再次失败。
最后，程序再次尝试给从字节16到21的区域加上一个独占锁，但这一次它使用了
F_SETLKW命令等到自己能够获得一个封锁为止。程序输出在此出现了个很长的停顿，直到
对这一区域施行封锁的lock3程序因关闭文件面释放了它所拥有的全部封锁才有了转机。lock5程
序开始继续执行，成功地封锁了该区城，随后它也退出了运行。
7.2.5其他封锁命令
还有另外一种封锁文件的方法：lockf函数。它也通过文件描述符进行操作。下面是它的
定义：
#1nclude
Int lockf(int fildes, int function, off_t size_to_lock ))
它可以选用以下funcion参数值：
·F_ULOCK
解除封锁。
·F_LOCK
施行独占封锁。
•F_TLOCK
测试并施行独占封锁。
•F_TEST
对其他进程施行的封锁进行测试。
size_to_lock参数是准备对之进行操作的字节个数，从文件的当前偏移值开始计算。
lockf的接口比fcntl的接口要简单，这主要是因为它在功能性和灵活性方面要差一些。使用
这个函数的时候必须先找到准备封锁的文件区域的起始位置，然后按准备封锁的字节个数进行
封锁。
与文件封锁的fcntl方法一样，lockf提供的各种封锁都只是建议性的；它们并不能真正阻止
对文件的读写。对封锁状态进行检查是程序的资任。混用fcnt封锁和lockf封锁的后果没有明确
的说法，所以你必须决定自已想要使用的是哪一种类型的封领并坚持下去。
7.2.6死锁现象
如果不说说死锁现象的危险对封锁的讨论就不能算是完整。假设有两个程序想要修改同一