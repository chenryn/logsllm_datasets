title:Automatic Handling of Protocol Dependencies and Reaction to 0-Day
Attacks with ScriptGen Based Honeypots
author:Corrado Leita and
Marc Dacier and
Fr&apos;ed&apos;eric Massicotte
Automatic Handling of Protocol Dependencies
and Reaction to 0-Day Attacks with ScriptGen
Based Honeypots
Corrado Leita1, Marc Dacier1, and Frederic Massicotte2
1 Institut Eurecom, Sophia Antipolis, France
{leita, dacier}@eurecom.fr
2 Communications Research Centre, Ottawa, Canada
PI:EMAIL
Abstract. Spitzner proposed to classify honeypots into low, medium
and high interaction ones. Several instances of low interaction exist, such
as honeyd, as well as high interaction, such as GenII. Medium interaction
systems have recently received increased attention. ScriptGen and Role-
Player, for instance, are as talkative as a high interaction system while
limiting the associated risks. In this paper, we do build upon the work
we have proposed on ScriptGen to automatically create honeyd scripts
able to interact with attack tools without relying on any a-priori knowl-
edge of the protocols involved. The main contributions of this paper are
threefold. First, we propose a solution to detect and handle so-called
intra-protocol dependencies. Second, we do the same for inter-protocols
dependencies. Last but not least, we show how, by modifying our initial
reﬁnement analysis, we can, on the ﬂy, generate new scripts as new at-
tacks, i.e. 0-day, show up. As few as 50 samples of attacks, i.e. less than
one per platform we have currently deployed in the world, is enough to
produce a script that can then automatically enrich all these platforms.
1 Introduction
Honeypots are powerful systems for information gathering and learning. L.Spitzner
in [1] has deﬁned a honeypot as “a resource whose value is being in attacked or
compromised. This means, that a honeypot is expected to get probed, attacked
and potentially exploited. Honeypots do not ﬁx anything. They provide us with
additional, valuable information”. In [1] honeypots are classiﬁed according to the
degree an attacker can interact with the operating system.
In high interaction honeypots, the attacker interacts with real operating sys-
tems usually deployed through virtual emulators. This ensures a very reliable
source of information, but also brings some major drawbacks. High interaction
honeypots are real hosts and therefore can be compromised: the maintenance
cost and the risk involved in them is high. Also, the amount of resources re-
quired to deploy such honeypots is usually substantial.
In low interaction honeypots such as honeyd [2], the attacker interacts with sim-
ple programs that pretend to behave as a real operating system through very simple
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 185–205, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
186
C. Leita, M. Dacier, and F. Massicotte
approaches. Honeyd uses a set of scripts to implement responders to the most com-
mon services. Given a request, these scripts try to produce a response that mimics
the behavior of the emulated server. This approach has two major drawbacks. On
the one hand, the manual generation of these scripts is a tedious and sometimes
impossible task due to the unavailability of protocol speciﬁcations. On the other
hand, they are often not able to correctly handle complex protocols, limiting the
length of the conversation that the honeypot is able to carry on with the client.
Since many exploits deliver the malicious payload only after an exchange of sev-
eral packets with the server, low interaction honeypots are often not able to carry
on the conversation long enough to discriminate between diﬀerent types of activi-
ties. For instance, in our experience within the Leurre.com project [3,4,5,6,7,8], due
to the lack of emulation scripts we have been able to observe only the ﬁrst request
of many interesting activities such as the spread of the Blaster worm [9]. But since
Blaster sends the exploit in the second request of its dialog on port 135, we have
never been able to observe such a payload. Therefore it becomes very diﬃcult to
distinguish Blaster’s activity from other activities targeting the same port using
solely the payload as a discriminating factor.
The lack of emulation scripts led us to investigate the feasibility of automat-
ically generating emulators starting from samples of protocol interaction using
the ScriptGen framework [10]. We showed how it was possible to take advantage
of the statistical diversity of a large number of training samples to rebuild a par-
tial notion of semantics. This can be done in a completely protocol-independent
way: no assumption is made on the protocol behavior, nor on its semantics. Our
ﬁrst results showed how ScriptGen had been able to successfully carry on a small
segment of conversation with the clients, proving the validity of the method but
also showing the need to improve emulation.
In this paper we take a big step forward, showing how it is possible to dra-
matically increase the emulation quality by coupling the seminal work presented
in [10] with a number of novel contributions. Speciﬁcally, this paper presents i)
an innovative algorithm to infer dependencies in the content of protocol mes-
sages (intra-protocol dependencies) without requiring the knowledge of protocol
semantics; ii) a new algorithm to generate relations in the interaction of multi-
ple TCP sessions (inter-protocols dependencies); iii) a proxying algorithm that
allows a ScriptGen honeypot to automatically build a training set to reﬁne its
knowledge of the protocol reacting to the detection of new activities.
This paper is organized as follows: section 2 gives an overview on the current
state of the art in the ﬁeld; section 3introduces the main concepts and contributions
of this paper; section 4 gives an in-depth description of the novel contributions to
the ScriptGen framework; section 5 shows the experimental validation performed
on the new ScriptGen emulators; section 6 concludes the paper.
2 State of the Art
The contributions of this paper put their roots in a seminal work presented in
[10]. ScriptGen is a method that aims at building protocol emulators in a com-
pletely automated and protocol-independent way. This is possible through an
Automatic Handling of Protocol Dependencies
187
algorithm detailed in [10] called region analysis. Region analysis uses bioinfor-
matics algorithms [11] as primitives to rebuild protocol semantics and to raise
the training data to a higher level of abstraction. This is done in a completely
protocol-independent fashion: no assumption is made on the protocol seman-
tics or on the protocol behavior. This allows us to build emulators for protocols
whose speciﬁcation is not available or partially unknown. In [10] we validated
the approach, and we identiﬁed a number of limitations that were preventing
ScriptGen emulators from correctly carrying on complete conversations with a
client.
Shortly after our initial publication, Cui et al. presented the results of a sim-
ilar approach, named RolePlayer [12], carried out in parallel to ours. These
authors have the same goals in mind but have imposed diﬀerent constraints
on themselves. RolePlayer uses as input two cleaned and well-chosen scripts.
These scripts are training samples of the conversation that must be emulated.
As ScriptGen does, RolePlayer uses bioinformatics algorithms to align bytes and
delimit ﬁelds inside the protocol byte stream. RolePlayer gives semantic value
to the various ﬁelds using additional information (IP addresses, host names used
in the conversation) and a simple “cookbook” of rules to give an interpreta-
tion to the various ﬁelds. This “cookbook” is a set of heuristics deduced from
observations made on various known protocols.
The RolePlayer approach oﬀers a very elegant solution but it is worth noting
that it is orthogonal to ScriptGen’s philosophy and shows a number of limita-
tions. First of all, the usage of only two scripts in the alignment phase requires
carefully chosen samples in order to avoid false deductions. This process can be
easily done by a human operator, but an automatic preparation of the training
set does not appear straightforward. Furthermore, it appears that the design of
well behaved samples precludes the usage of this technique for online creation
of scripts as we propose to do it in section 4.3. To accomplish the same pur-
pose, ScriptGen performs the analysis on a statistically signiﬁcant number of
samples. ScriptGen exploits the statistical diversity of the samples to minimize
false deductions without requiring any sort of human intervention. As we will
show in this paper, this property is extremely interesting when implementing
automated learning of new activities. In fact, we will show in this paper how
ScriptGen is able to react to 0-day attacks, exploiting its characteristics to learn
the behavior of the new activity. It does so by building in a completely auto-
mated fashion a new training set and using it to reﬁne its knowledge of the
protocol. For this to be possible, no human intervention must be necessary; the
process must be totally automated. ScriptGen, being completely automated and
protocol-agnostic, fulﬁlls these requirements. As opposed to that, the additional
manual input required by RolePlayer to generate the emulators is a severe limi-
tation with respect to this objective. Also, RolePlayer takes advantage of a set
of heuristics that are deduced from the knowledge of existing protocols. Even if
these heuristics might be valid for a certain number of protocols, they restrict
the generality of the method itself by taking into consideration only the number
of well-known protocols for which these assumptions hold. Finally, RolePlayer as
188
C. Leita, M. Dacier, and F. Massicotte
Fig. 1. Simple example of semantic abstraction
described in [12] seems to be able to replay only a single script at a time. It does
not oﬀer a structure to handle in parallel diﬀerent protocol functional ﬂows. A
ScriptGen emulator instead is able to map diﬀerent activities to diﬀerent paths
of the internal protocol state machine.
A completely diﬀerent approach is instead followed in the context of the mw-
collect project [13,14], that has recently merged with the nepenthes project.
These tools use a set of vulnerability modules to attract bots, analyze their shell
code and use download modules to fetch the malware code from the attacking
bot. Currently, the vulnerability modules are manually handled and speciﬁc to
each known exploit, but a future integration of the ScriptGen approach with
these tools might lead to very interesting results.
3 Related Work and Novel Contributions
The work shown in this paper builds upon the work introduced in [10]. The
ScriptGen approach allows building protocol emulators in a protocol-indepen-
dent way: no assumption is made on protocol behavior, nor on its semantics.
The approach uses a set of training conversations between an attacker and a
real server to build a state machine representing the protocol language from
an application level point of view. Each state is labeled with the corresponding
server answer; each transition is labeled with client requests. When the emulator
receives a request from the client that matches the label of one of the outgoing
transitions from the current state, it moves to the corresponding future state and
uses its label to reply to the client. Since we are not assuming any knowledge of
protocol semantics, the client requests are seen as simple byte streams and they
are therefore too speciﬁc: the generated state machines would be unnecessarily
large and not able to handle any kind of variation from the data seen during
training. For this reason we introduced the region analysis algorithm, detailed
in [10]. This algorithm is able to take advantage of the statistical diversity of
the samples to identify the variable and ﬁxed parts of the protocol stream, using
Automatic Handling of Protocol Dependencies
189
Fig. 2. The ScriptGen framework
bioinformatic algorithms. Using clustering and reﬁnement techniques, the algo-
rithm aggregates the outgoing edges and produces as output a semantic-aware
representation of their value. The protocol stream is thus transformed in a se-
quence of mutating regions (groups of mutating bytes with no semantic value)
and ﬁxed regions (groups of bytes whose content is considered as discriminat-
ing from a semantic point of view). Figure 1 shows an example of the semantic
abstraction introduced by region analysis: the algorithm is able to infer from
the statistical diversity of the samples part of the underlying protocol structure,
distinguishing the “LOGIN” command from the username. The LOGIN com-
mand will generate a ﬁxed region and will be considered as discriminating in
determining the protocol functional behavior. The username instead will gen-
erate a mutating region and the content of the ﬁeld will not be considered as
semantically discriminating.
We showed in [10] a preliminary validation of the method, that was able to
exchange a limited number of packets with several attacking sources. While these
ﬁrst tests showed the validity of the method, they also underlined a number of
limitations and the need for additional enrichments to the initial work. This led
to the ScriptGen framework presented in this paper and represented in Figure
2. This paper introduces a set of novel algorithms aimed at circumventing the
limitations identiﬁed in [10] and demonstrates how to exploit the potentials of
this approach. These can be summarized as follows:
1. Support for intra-protocol dependencies. In many protocols, one of
the two peers involved in the conversation chooses a cookie value to be put
in the message. For instance, in NetBIOS Session Service the client chooses
a 16 bit transaction ID: for the server answer to be accepted, it must use the
same value in the corresponding protocol ﬁeld.
190
C. Leita, M. Dacier, and F. Massicotte
2. Support for inter-protocol dependencies. In many diﬀerent cases the
state of the emulation goes further than the single TCP session. For instance,
successfully running a buﬀer overﬂow attack on a certain port might open a
remote shell on a previously closed port. If that port has been open since the
beginning, the exploit might refuse to run. Also, multiple TCP sessions may
be interleaved (such as in FTP) generating dependencies between them.
3. Proxying and automated learning. The stateful approach and the struc-
ture of the state machine itself allows an extremely precise detection of new