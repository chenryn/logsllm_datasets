stores the result in the register. The map instruction modiﬁes
a virtual to physical address mapping in the software-managed
TLB. The jmp instruction unconditionally transfers control to
the address in the register while the jeq and jneg instructions
transfer control to the speciﬁed address if the register is equal
to zero or negative, respectively.
A subset of the KCoFI instructions are also included in
the instruction set. Some of the instructions differ from their
KCoFI implementations because our formal model does not
have an implicit stack whereas the KCoFI instruction set
does. Our model also has trap and iret instructions for
generating traps and returning from trap handlers.
The semantic rules for each instruction are speciﬁed as a
state transition system. The transition relation c1 ⇒ c2 denotes
that the execution of an instruction can move the state of the
system from conﬁguration c1 to conﬁguration c2.
ditions under which the rule can be used, and then the actual
transition relation.
Each rule essentially fetches an instruction at the address of
the program counter, checks for safety conditions (given as part
of the premise of the implication), and then generates a new
state for the machine to reﬂect the behavior of the instruction.
All instructions require that the program counter point to
a virtual address with execute permission. Loads and stores to
memory require read or write access, respectively. The jump
instructions always check that the destination is a valid target.
The map instruction is allowed to change a virtual to physical
page mapping if the virtual address given as an argument is
not already mapped to a location within the code segment and
it does not permit a new virtual address to map to an address
within the code segment.
C. Control-Flow Integrity Theorems
We now outline our control-ﬂow integrity proofs for this
system. Our ﬁrst two proofs ensure that each transition in the
semantics (i.e., the execution of a single instruction) maintains
control-ﬂow integrity.
There are several invariants that must hold on a conﬁg-
uration if the transition relation is to maintain control-ﬂow
integrity. For example, the system must not start in a state with
a writeable code segment. We therefore deﬁne ﬁve invariants
that should hold over all conﬁgurations:
Invariant 1. VC(c): For conﬁguration c = (..., cs, ce, ...), 0
< cs ≤ ce.
Invariant 2. TNW(c): For conﬁguration c = (μ, σ, Reg, ...,
cs, ce, ...), ∀ n : cs ≤ ρ(μ(n)) ≤ ce, ¬ WR(μ(n))
Invariant 3. TMAP1(c): For conﬁguration c = (μ, σ, ..., cs,
ce, ...), ∀ n m : cs ≤ ρ(μ(n)) ≤ ce ∧ n (cid:6)= m, ρ(μ(n)) (cid:6)= ρ(μ(m))
Invariant 4. TH(c): For conﬁguration c = (..., T H), T H ∈
CFG
Invariant 5. THR(c): For conﬁguration c = (μ, σ, ..., CFG,
..., τ, ...), ∀ (v, pc, istack, sistack) ∈ τ: pc ∈ CFG ∨ σ(ρ(μ
(pc - 1))) = svaSwap
Invariant 1 states that the start of the code segment must
be non-zero and less than or equal to the end of the code
segment. Invariant 2 asserts that there are no virtual-to-physical
address mappings that permit the code segment to be written.
Invariant 3 asserts that there is at most one virtual address that
is mapped to each physical address within the code segment.
Invariant 4 ensures that the system’s trap handler is an address
that can be targeted by a branch instruction.
Invariant 5 restricts the value of the program counter in
saved thread structures. A newly created thread needs to have
an address at which to start execution; Invariant 5 restricts
this value to being an address within CFG. A thread that has
been swapped off the CPU should have a program counter
that points to the address immediately following the svaSwap
instruction. The second half of the disjunction in Invariant 5
permits this.
Figure 5 shows the semantic rules for each instruction.
Each rule has a brief name describing its purpose, the con-
Control-ﬂow integrity in our system covers two key prop-
erties. First, each instruction should transfer control to one of
300
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
LoadImm: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = loadi n →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, n, PC + 1, CFG, cs, ce, T , NT , τ, T H)
Load: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = load n ∧ RD(μ(n)) ∧ σ(ρ(μ(n))) = val v →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, v, PC + 1, CFG, cs, ce, T , NT , τ, T H)
Store: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = store n ∧ WR(μ(n)) →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ[ρ(μ(n)) ← (val R)], R, PC + 1, CFG, cs, ce, T , NT , τ, T H)
Add: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = add n →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R + n, PC + 1, CFG, cs, ce, T , NT , τ, T H)
Sub: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = sub n →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R - n, PC + 1, CFG, cs, ce, T , NT , τ, T H)
Jump: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = jmp ∧ R ∈ CFG →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, R, CFG, cs, ce, T , NT , τ, T H)
JumpEq1: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = jeq v ∧ v ∈ CFG →
(μ, σ, 0, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, 0, v, CFG, cs, ce, T , NT , τ, T H)
JumpEq2: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = jeq v ∧ R (cid:7)= 0 →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, PC + 1, CFG, cs, ce, T , NT , τ, T H)
JumpNeg1: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = jneg v ∧ v ∈ CFG ∧ R < 0 →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, v, CFG, cs, ce, T , NT , τ, T H)
JumpNeg2: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = jneg v ∧ R ≥ 0 →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, PC + 1, CFG, cs, ce, T , NT , τ, T H)
Map: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = map v tlb ∧ ¬ (cs ≤ ρ(tlb) ≤ ce) ∧ ¬ (cs ≤ ρ(μ(v)) ≤ ce) →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ[v ← tlb], σ, R, PC + 1, CFG, cs, ce, T , NT , τ, T H)
Swap: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = svaSwap ∧ valid(τ(R)) →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, T , getPC(τ(R)), CFG, cs, ce, R, NT , τ[T ← swapOn(τ(T ), PC + 1)] [R ← swapOff(τ(R))], T H)
Trap: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = trap →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, T H, CFG, cs, ce, T , NT , τ[T ← ipush(τ(T ),(R,PC + 1))], T H)
IRet: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = iret →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, getIReg(itop(τ(T ))), getIPC(itop(τ(T ))), CFG, cs, ce, T , NT , τ[T ← ipop(τ(T ))], T H)
RegisterTrap: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = svaRegisterTrap ∧ R ∈ CFG →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, PC + 1, CFG, cs, ce, T , NT , τ, R)
InitIContext: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = svaInitIContext f ∧ f ∈ CFG →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, NT , PC + 1, CFG, cs, ce, T , NT + 1, τ[NT ← (true, f, itop(τ(T )) :: nil, nil)], T H)
SaveIContext: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = svaSaveIContext →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, PC + 1, CFG, cs, ce, T , NT , τ[T ← saveIC(τ(T ))], T H)
LoadIContext: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = svaLoadIContext →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, PC + 1, CFG, cs, ce, T , NT , τ[T ← loadIC(τ(T ))], T H)
PushIContext: EX(μ(PC)) ∧ σ(ρ(μ(PC))) = svaPushFunction a →
(μ, σ, R, PC, CFG, cs, ce, T , NT , τ, T H) ⇒ (μ, σ, R, PC + 1, CFG, cs, ce, T , NT , τ[T ← ipush(τ(T ), (a, R))], T H)
Fig. 5. KCoFI Instruction Semantics
301
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
four locations: the virtual address of the subsequent instruction,
a valid target within the pre-computed control-ﬂow graph, an
instruction following an svaSwap instruction, or the program
counter value stored in the top-most interrupt context of the
current thread (which cannot be corrupted since it does not
reside in memory). Theorem 1 states this more formally:
Theorem 1. ∀ c1 = (μ1, σ1, ..., P C1, ..., CFG, ..., T1, ..., τ1),
c2 = (μ2, σ2, ..., P C2, ..., CFG, ..., T2, ..., τ2) : (c1 ⇒ c2)
∧ TH(c1) ∧ THR(c1) → P C2 = P C1 + 1 ∨ P C2 ∈ CFG ∨
σ2(ρ(μ2(P C2 - 1))) = svaSwap ∨ P C2 = getIPC(itop(τ1(T1)))
Second, we want to ensure that the instruction stream read
from the code segment does not change due to writes by the
store instruction or by reconﬁguration of the MMU. In other
words, we want to ensure that reading from a virtual address
that maps into the code segment reads the same value after
executing an instruction as it held before execution of the
instruction. Theorem 2 states this formally as:
Theorem 2. ∀ v, c1 = (μ1, σ1, ..., cs, ce, ...), c2 =(μ2, σ2,
...) : (c1 ⇒ c2) ∧ VC(c1) ∧ TNW(c1) ∧ TMAP1(c1) ∧ cs ≤
ρ(μ1(v)) ≤ ce → σ1(ρ(μ1(v))) = σ2(ρ(μ2(v)))
We proved that both Theorem 1 and 2 hold true in the
Coq proof assistant. Intuitively, Theorem 1 is true because
all the jump instructions check the target address against the
precomputed control-ﬂow graph while the svaSwap instruc-
tion always saves and loads the correct program value from
saved processor state. The intuition behind Theorem 2 is that
the checks on the map instruction prevent a) addresses that
are already mapped into code segment from being remapped
to different addresses, and b) new virtual-to-physical address
mapping from making parts of the code segment writable.
While proving Theorems 1 and 2 shows that the restrictions
on the instructions maintain control-ﬂow integrity for single
instruction executions, a full control-ﬂow integrity proof will
demonstrate that control-ﬂow integrity is maintained on the
transitive closure of the transition relation (in other words, if
the system starts in a state satisfying the required invariants,
then control-ﬂow integrity is maintained after executing an
arbitrary number of instructions). We therefore also need to
prove that the transition relation preserves the invariants. We
have therefore proven the following additional theorems:
Theorem 3. ∀ c1, c2: (c1 ⇒ c2) ∧ VC(c1) → VC(c2)
Theorem 4. ∀ c1, c2: (c1 ⇒ c2) ∧ TNW(c1) → TNW(c2)
Theorem 5. ∀ c1, c2: (c1 ⇒ c2) ∧ TMAP1(c1) → TMAP1(c2)
Theorem 6. ∀ c1, c2: (c1 ⇒ c2) ∧ TH(c1) → TH(c2)
Proving that Invariant 5 holds across the transition relation
requires additional invariants to hold on the conﬁguration.
These new invariants are:
Invariant 6. CFGT(c): For conﬁguration c = (μ, ..., CFG, cs,
ce, ...), ∀ v: v ∈ CFG → cs ≤ ρ(μ(v)) ≤ ce.
Invariant 7. PCT(c): For conﬁguration c = (μ, ..., PC, ..., cs,
ce, ...), cs < ρ(μ(PC)) ≤ ce.
Invariant 8. tlText(c): For conﬁguration c = (μ, ..., CFG, cs,
ce, ..., τ, ...), ∀ (v, pc, istack, sistack) ∈ τ: cs ≤ ρ(μ(pc)) ≤
ce ∧ ((pc ∈ CFG) ∨ cs ≤ ρ(μ(pc - 1)) ≤ ce)
Invariants 6 and 7 state that the list of valid indirect branch
targets and the machine’s program counter are all virtual
addresses that are mapped to the code segment. Invariant 8
states that all swapped-off threads also have program counters
that are within the code segment; it also ensures that threads
with program counters that are not within the valid list of
indirect branch targets have their previous program counter
within the code segment (i.e., the svaSwap instruction that
swapped the thread off the CPU is also in the code segment).
Invariants 6, 7, and 8 sufﬁce for showing that each
swapped-off thread has a valid program counter value. We
have therefore formally proven using Coq that Invariant 5 holds
across all instruction executions:
Theorem 7. ∀ c1, c2: (c1 ⇒ c2) ∧ VC(c1) ∧ TNW(c1) ∧
TMAP1(c1) ∧ PCT(c1) ∧ CFGT(c1) ∧ tlText(c1) ∧ THR(c1)
→ THR(c2)
We have proved using Coq that Invariant 6 holds across
the transition relation:
Theorem 8. ∀ c1, c2: (c1 ⇒ c2) ∧ CFGT(c1) → CFGT(c2)
Proving that Invariants 7 and 8 hold across the transition
relation and completing the proof that control-ﬂow integrity
is maintained across the transitive closure of the transition
relation is left to future work. However, Theorems 3, 4, and 5
permit us to prove that the code segment is not modiﬁed over
the reﬂexive and transitive closure of the transition relation,
denoted ⇒∗. We have therefore proven the following theorem
using Coq:
Theorem 9. ∀ v, c1 = (μ1, σ1, ..., cs, ce, ...), c2 = (μ2, σ2,
...) : (c1 ⇒∗ c2) ∧ VC(c1) ∧ TNW(c1) ∧ TMAP1(c1) ∧ cs ≤
ρ(μ1(v)) ≤ ce → σ1(ρ(μ1(v))) = σ2(ρ(μ2(v)))
VI.
IMPLEMENTATION
We implemented a new version of the SVA-OS instructions
and run-time for 64-bit x86 processors. The implementation
runs 64-bit code only. This new implementation reuses code
from the original 32-bit, single-core implementation [12], [5].
This new implementation only supports a single CPU system at
present, but that is mainly due to needing to ﬁnd a good locking
discipline for the MMU instructions; all the other features
maintain per-CPU data structures to permit multi-processor
and multi-core functionality.
We ported FreeBSD 9.0 to the SVA-OS instruction set. We
chose FreeBSD over Linux because the Clang/LLVM compiler
can compile an unmodiﬁed FreeBSD kernel.
We used the sloccount tool [23] from the FreeBSD ports
tree to measure the size of our TCB. Excluding comments
and white space, our system contains 4,585 source lines of
code for the KCoFI run-time library linked into the kernel and
an additional 994 source lines of code added to the LLVM
compiler to implement the compiler instrumentation. In total,
our TCB is 5,579 source lines of code.
A. Instrumentation
The CFI and store instrumentation is implemented in
two separate LLVM passes. The CFI instrumentation pass
302
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
is a version of the pass written by Zeng et. al. [18] that
we updated to work on x86 64 code with LLVM 3.1. The
store instrumentation pass is an LLVM IR level pass that
instruments store and atomic instructions that modify memory;
it also instruments calls to LLVM intrinsic functions such as
llvm.memcpy.
We modiﬁed the Clang/LLVM 3.1 compiler to utilize these
instrumentation passes when compiling kernel code. To avoid
the need for whole-program analysis, we use a very conser-
vative call graph: we use one label for all call sites (i.e., the
targets of returns) and for the ﬁrst address of every function.
While conservative, this callgraph allows us to measure the
performance overheads and should be sufﬁcient for stopping
advanced control-data attacks.
Unlike previous work [18], [9], we use the sequence xchg
%rcx, %rcx ; xchg %rdx, %rdx to create a 32-bit la-
bel. We found that this sequence is both easy to implement
(since they are NOPs, these instructions do not overwrite any
register values) and much faster than a 64-bit version of the
prefetchnta sequence used in previous work [18].
B. KCoFI Instruction Implementation
The KCoFI instructions described in Section IV are imple-
mented in a run-time library that is linked into the kernel at
compile-time. The semantics for the instructions given in Sec-
tion V assume that the KCoFI instructions execute atomically.
For that reason, the run-time library implementations disable
hardware interrupts when they start execution and re-enable
them upon exit as the original SVA implementation did [5].
C. Interrupt Context Implementation
To place the Interrupt Context within the KCoFI VM
internal memory, we use the Interrupt Stack Table (IST) feature
of the x86 64 [24], as was done in Virtual Ghost [25]. This
feature causes the processor to change the stack pointer to a
speciﬁc location on traps or interrupts regardless of whether
a processor privilege mode change has occurred. The KCoFI
VM uses this feature to force the processor to save state within
KCoFI’s internal memory before switching to the real kernel
stack.
Unlike previous versions of SVA [12], [5], KCoFI saves all
native processor state on every interrupt, trap, and system call.
This includes the x86 64 general purpose registers, the x87
FPU registers, and the XMM and SSE registers. We believe
an improved implementation can save the ﬂoating point and
vector state lazily as the native FreeBSD 9.0 kernel does, but
that improvement is left to future work.
D. Unimplemented Features
Our implementation does not yet include the protections
needed for DMA. However, we believe that I/O MMU con-
ﬁguration is rare, and therefore,
the extra protections for
DMA should not add noticeable overhead. Our implementation
also lacks the ability to translate SVA bitcode (or to look
up cached translations for bitcode) at run-time. Instead, our
current implementation translates all OS components to native
code ahead-of-time, and runs only native-code applications.
For ease of implementation, we add the same CFI labels to
both kernel code and the SVA-OS run-time library. While this
deviates from the design, it does not change the performance
overheads and makes the security results more conservative
(no better and possibly worse).
VII. SECURITY EVALUATION
We performed two empirical evaluations to measure the se-
curity of our approach. Since KCoFI does not permit memory
to be both readable and executable, we focus on return-oriented
programming attacks.
Our ﬁrst evaluation examines how well KCoFI removes
instructions from the set of instructions that could be used in
a return-oriented programming attack (which can work with
or without return instructions [26]). We compute a metric that
summarizes this reduction called the average indirect target
reduction (AIR) metric [10].
Since not all instructions are equally valuable to an attacker,
we performed a second evaluation that ﬁnds instruction se-
quences (called gadgets [3]) that can be used in an ROP attack
and determines whether they can still be used after KCoFI has
applied its instrumentation.
A. Average Indirect Target Reduction
Return oriented programming attacks work because of
the plethora of instructions available within a program. To
get a sense of how many instructions we removed from an
attacker’s set of usable instructions, we used Zhang and Sekar’s
AIR metric [10]; this metric computes the average number
of machine code instructions that are eliminated as possible
targets of indirect control transfers. The AIR metric quantiﬁes
the reduction in possible attack opportunities in a way that
is independent of the speciﬁc CFI method employed,
the
compiler used, and the architecture.
Equation 1 from Zhang and Sekar [10] provides the general
form for computing the AIR metric for a program. n is the
number of indirect branch instructions in the program, S is
the total number of instructions to which an indirect branch
can direct control ﬂow before instrumentation, and |Ti| is the
number of instructions to which indirect branch i can direct
control ﬂow after instrumentation:
Since all