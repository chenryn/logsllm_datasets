### 0x00 概述
  * 公司渗透检查要求点击劫持，发现Chrome不支持`X-Frame-Options: ALLOW-FROM uri`，JS防御可以被绕过，然后对点击劫持又查了一些资料，记录一下
  * 本文主要讲解点击劫持攻击，包括漏洞简介、威胁场景、修复方式、深入攻防和一个经典案例
  * 漏洞简介用实验简单描述了点击劫持，深入攻防部分开始通过实验讲了用js防御点击劫持漏洞的绕过方式和可能更好的防御方式
  * 本文主要参考《白帽子讲Web安全》和斯坦福大学论文[《Busting Frame Busting:  
a Study of Clickjacking Vulnerabilities on Popular
Sites》](http://seclab.stanford.edu/websec/framebusting/framebust.pdf)，推荐去看原文哦
### 0x01漏洞简介
点击劫持是一种视觉上的欺骗手动，攻击者可以使用一个透明的、不可见的iframe，覆盖在一个网页上，然后诱使用户在该网页上进行操作，通过调整iframe页面的位置，可以诱使用户恰好点击在iframe页面的一些功能性按钮上和一些操作。
之所以叫点击劫持（Clickjacking），是因为它劫持了用户的登录态，并诱导了点击等页面操作
作为一个前端漏洞，它相对与XSS和CSRF来说，因为需要诱使用户与页面产生交互行为，因此实施攻击的成本更高，在网络犯罪中比较少见，但仍然可能被利用在钓鱼、欺诈和广告作弊等方面
#### 做个实验、举个例子
我们修改hosts文件，使一台远程主机被解析为`example.com`，本机被解析为`hacker.com`，注意一些浏览器的有DNS缓存，注意清除
我们在远程主机上运行开启一个简单http服务应用，当我们访问时会出现如下一个文件下载目录页面，页面中只有一个文件链接，我们把它看成付钱功能的按钮
我们为这个页面设置cookie
    resp.set_cookie('session-cookie', '123')
    resp.set_cookie('third-part-cookie', '456', expires='Sun, 18-Mar-2019 10:05:05 GMT')
之后，我们在本机随意开启一个Web应用，返回一个HTML页面，页面代码如下，它将`example.com`放在一个`iframe`标签内，将iframe页面虚化透明，在iframe页面下层放置一个不透明的按钮，正好重叠在虚化透明的付钱按钮背后
        Clickjack
        Click Here!
页面的实际显示如下图所示
点击后会发送请求到`example.com`，并带上`example.com`的cookies，也就是劫持了用户的身份
一般我们把cookies分为session cookie（临时cookie，断开连接后消失）和third-part
cookie（本地存储的cookie，expires会设置过期时间，浏览器会本地保存到过期），如上分别使用了这两种类型的cookie。某些版本的浏览器（IE7、IE8）出于安全考虑对iframe之类的标签不发送third-part cookie，目前主流浏览器包括IE高版本都会发送，所以基本只要带有cookie都能劫持
页面可以完全虚化透明至看不见，如果hacker.com的页面精美一些，可以更好诱导点击操作，甚至可以做个小游戏，在用户存在登录态的情况下，便可以使用用户的登录态在用户不知情的情况下，利用与用户产生交互的页面，诱使他们完成一些动作，一步或者多步操作
### 0x02 威胁场景
事实上我们虽然说点击劫持是劫持了用户的登录态，但实际上这是一种视觉攻击，因此也会有一些视觉效果上的攻击变种和配合
  * 诱使用户登录站点，发送其他含有iframe的链接给用户，在用户不知情情况下诱使用户完成一些操作
  * 通过类似flash游戏改变用户鼠标点击的位置，完成一些较为复杂的操作
  * 搭配输入框填写表单
  * 图片覆盖攻击(Cross Site Image Overlaying, XSIO)，覆盖原有站点的图片，诱骗用户点进钓鱼网站，这里原本原网站处于点击按钮前面，而想办法跳转到钓鱼站点则是将原网站处于点击按钮后方，然而实际上这种方式用处并不大，因为钓鱼有很多其他更方便的方法。防御XSIO时，需要检查用户提交的HTML代码中，标签的style属性是否可能导致浮出`(style="position:absolute;left: 123px; top:123px;")`，但其实没有什么意义，可以不管
  * 拖拽劫持和数据窃取：浏览器支持Drag&Drop的API，比如JS的`event.dataTransfer.getData('Text'))`等接口，拖拽使操作更加简单。浏览器中的拖拽对象可以是一个链接一段文字，可以从一个窗口拖拽到另一个窗口，拖拽不受同源策略限制。“拖拽劫持”的思路是诱使用户从隐藏的不可见的iframe中“拖拽”出攻击者希望得到的数据，然后放到攻击者能控制的另外一个页面中，从而窃取数据，在JavaScript或者Java API支持下，这个攻击过程非常隐蔽，突破传统ClickJacking只能诱骗用户操作，不能获取数据的局限，有更大破坏力，所以一些浏览器直接不允许拖拽接口
  * 手机触屏上的点击劫持，劫持用户触屏操作，而且手机为了节约屏幕空间，经常隐藏地址栏，更容易造成视觉欺骗
### 0x03 修复方式
首先要明确业务是否真的需要`iframe`嵌套，如无必要，不要使用，如要使用，最好同源。推荐以下方式中X-Frame-Options和JS防御结合
#### HTTP头部的X-Frame-Options标签
比较推荐这种修复方式，主流浏览器基本支持这个头部标签，可以在[MDN文档](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)上找到浏览器的支持情况
最推荐的方式：在HTTP头部上加上`X-Frame-Options：DENY`头部
其次推荐：在HTTP头部上加上`X-Frame-Options：SAMEORIGIN`头部，这时，站点间安全性就是同源站点页面中安全性最弱的页面了，如果某个页面可以被篡改，就失去了防御的意义
最后，`X-Frame-Options: ALLOW-FROM uri`这个头部目前还不被Chrome支持，若是用户群体大而非内部使用的，不推荐使用
#### JS防御
用JS判断当前页面是否被其他页面嵌套，如果是，跳转到自己的域名下
建议代码，目前没有绕过方式，暂时比较安全，首先隐藏页面，当确认没有被iframe包裹时显示，否则重定向
如果在网上搜索点击劫持修复方案，很多博客会给如下代码，不推荐使用，会被绕过
    if (top.location != location) {
        top.location = self.location;
    }
#### 多因素认证
在重要功能按钮点击前加入多因素认证，如付款的二次密码或者某些隐私问题等。这种方式算很有效，但较麻烦，不重要的问题使用也会变复杂
#### 不以cookie作为登录态
不推荐，cookie机制还是比较安全可靠的，自定义HTTP头部或者其他方式需要开发本身了解其他方面安全机制和浏览器策略来确保安全，没有必要
#### CSP策略
FireFox有“CSP”策略，但是不是所有浏览器支持，不推荐使用，以后若普及可以使用