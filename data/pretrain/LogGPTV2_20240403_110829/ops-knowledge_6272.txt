为了从日志文件 `nova-compute.log.2017-05-14_21:27:09` 中提取相关信息，可以使用以下 Grok 表达式来解析：

```
%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:pid:int} %{LOGLEVEL:log_level} %{JAVACLASS:class_name} \[%{DATA:req_id}\] %{GREEDYDATA:message}
```

这个表达式的各个部分解释如下：
- `%{TIMESTAMP_ISO8601:timestamp}`：匹配 ISO8601 格式的日期时间戳，并将其命名为 `timestamp`。
- `%{NUMBER:pid:int}`：匹配进程 ID（一个整数），并将其命名为 `pid`。
- `%{LOGLEVEL:log_level}`：匹配日志级别（如 INFO, ERROR 等），并将其命名为 `log_level`。
- `%{JAVACLASS:class_name}`：匹配 Java 类名（例如 `nova.compute.resource_tracker`），并将其命名为 `class_name`。
- `\[%{DATA:req_id}\]`：匹配请求 ID 并将其命名为 `req_id`。
- `%{GREEDYDATA:message}`：匹配剩余的日志消息内容，并将其命名为 `message`。

应用此 Grok 表达式后，你的日志条目将被解析为结构化的字段，便于进一步处理或分析。如果你的 Logstash 或其他工具支持自定义 Grok 模式，你可以直接添加上述模式以进行日志解析。