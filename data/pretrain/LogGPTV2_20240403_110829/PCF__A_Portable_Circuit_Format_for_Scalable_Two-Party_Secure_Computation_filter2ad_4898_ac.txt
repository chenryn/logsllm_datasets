256-sit Sum
1024-bit Sum
128-bit Mult.
256-bit Mult.
1024-bit Mult.
With
32,228
345
721
2,977
76,574
300,634
8,301,962
Without
49,314
508
1,016
4,064
260,073
1,032,416
19,209,120
Ratio
65%
67%
70%
73%
20%
20%
21%
Function
16384-bit Comp.
With (s)
Without (s)
4.41± 0.3%
4.44± 0.3%
128-bit Sum 0.0581± 0.3% 0.060± 2%
256-bit Sum
0.103± 0.3% 0.105± 0.3%
1024-bit Sum
0.365± 0.3% 0.367± 0.2%
128-bit Mult.
0.892± 0.1% 0.894± 0.1%
256-bit Mult.
3.02± 0.1%
3.04± 0.1%
1024-bit Mult.
39.7± 0.2%
39.9± 0.06%
Table 2: Non-XOR gates in circuits computed by the in-
terpreter with and without the application of simpliﬁca-
tion rules by the runtime system.
Table 3: Simulator time with simpliﬁcation rules versus
without, using the C interpreter. Times are averaged over
50 samples, with 95% conﬁdence intervals, measured us-
ing the time function implemented by SBCL.
last yields the best results, as large numbers of gates be-
come dead following earlier optimizations.
4.5 Externally-Deﬁned Functions
Some functionality is difﬁcult to describe well in byte-
code formats. For example, the graph isomorphism ex-
periment presented in Section 6 uses AES as a PRNG
building block, but the best known description of the
AES S-box is given at the bit-level [4], whereas the
smallest width operation supported by LCC is a single
byte. To compensate for this difﬁculty, we allow users to
specify functions with the same language used internally
to translate bytecode operations into circuits; an example
of this language is shown in Section 5.1. This allows for
possible combinations of our compiler with other circuit
generation and optimization tools.
4.6 PCF Interpreter
To use a PCF description of a circuit in a secure protocol,
an interpreter is needed. The interpreter simulates the ex-
ecution of the PCF ﬁle for a single-bit machine, emitting
gates as needed for the protocol. Loops are not explicitly
unrolled; instead, PCF branch instructions are condition-
ally followed, based on the logic value of some wire, and
each wire identiﬁer is treated as an address in memory.
This is where the requirement that loop bounds be in-
dependent of both parties’ inputs is ultimately enforced:
the interpreter cannot determine whether or not to take a
branch if it cannot determine the condition wire’s value.
For testing purposes, we wrote two PCF interpreters:
one in C, which is packaged as a reusable library, and
one in Java that was used for tests on smartphones. The
C library can be used as a simulator or for full protocol
execution. As a simulator it simply evaluates the PCF ﬁle
without any garbling to measure the size of the circuit
that would have been garbled in a real protocol. This
interpreter was used for the LAN tests, using an updated
version of the KSS12 protocol. The Java interpreter was
incorporated into the HEKM system for the smartphone
experiments, and can also be used in a simulator mode.
4.7 Threat Model
The PCF system treats the underlying secure computa-
tion protocol as a black box, without making any as-
sumptions about the threat model.
In Section 6, we
present running times for smaller circuits in the mali-
cious model version of the KSS12 protocol. This ma-
licious model implementation simply invokes multiple
copies of the same PCF interpreter used for the semi-
honest version, one for each copy of the circuit needed
in the protocol.
4.8 Runtime Optimization
Some optimizations cannot be performed without un-
rolling loops, and so we defer these optimizations until
the PCF program is interpreted. As an example, logic
simpliﬁcation rules that eliminate gates whose output
values depend on no more than one of their input wires
can only be partially applied at compile time, as some
potential applications of these rules might only be possi-
ble for some iterations of a loop. While it is possible to
compute this information at compile time, in the general
case this would involve storing information about each
gate for every iteration of every loop, which would be as
expensive as unrolling all loops at compile time.
A side effect of applying such logic simpliﬁcation
rules is copy propagation. A gate that always takes on
the same value as one of its inputs is equivalent to a copy
operation. The application of logic simpliﬁcation rules to
such a gate results in the interpreter simply copying the
value of the input wire to the output wire, without emit-
ting any gate. As there is little overhead resulting from
the application of simpliﬁcation rules at runtime, we are
able to reduce compile times further by not performing
this optimization at compile time.
328  22nd USENIX Security Symposium 
USENIX Association
8
Function
16384 Comp.
RSA 256
Hamming 160
Hamming 1600
3x3 Matrix
5x5 Matrix
8x8 Matrix
16x16 Matrix
This Work
32,229
235,925,023
880
9,625
27,369
127,225
522,304
4,186,368
KSS12
HFKV
49,149
332,085,981
-
-
160,949
746,177
3,058,754
24,502,530
-
-
3,003
30,318
47,871
221,625
907,776
7,262,208
Table 4: Comparisons between our compiler’s output and
the output of the KSS12 and Holzer et al. (HFKV) com-
pilers, in terms of non-XOR gates.
For each gate, the interpreter checks if the gate’s value
can be statically determined, i.e., if its output value does
not rely on either party’s input bits. This is critical, as
some of the gates in a PCF ﬁle are used for control ﬂow,
e.g., to increment a loop index. Additionally, logic sim-
pliﬁcation rules are applied where possible in the inter-
preter. This allows the interpreter to not emit gates that
follow an input or which have static outputs even when
their inputs cannot be statically determined. As shown
in Table 2, we observed cases where up to 80% of the
gates could be removed in this manner. Even in a sim-
ulator that performs no garbling, applying this runtime
optimization not only shows no performance overhead,
but actually a very slight performance gain, as shown in
Table 3. The slight performance gain is a result of the
transfer of control that occurs when a gate is emitted,
which has a small but non-trivial cost in the simulator. In
a garbled circuit protocol, this cost would be even higher,
because of the time spent garbling gates.
5 Portability
5.1 Portability Between Bytecodes
Our compiler can be given a description of how to trans-
late bytecode instructions into boolean circuits using a
special internal language. An example, for the LCC in-
struction “ADDU,” is shown in Figure 6. The ﬁrst line is
speciﬁc to LCC, and would need to be modiﬁed for use
with other front-ends. The second line assumes a stack
machine model:
this instruction reads two instructions
from the stack. Following that is the body of the transla-
tion rule, which can be used in general to describe circuit
components and how the input variables should be con-
nected to those components.
The description follows an abstraction similar to VM-
Crypt, in which a unit gadget is “chained” to create a
larger gadget. It is possible to create chains of chains,
e.g., for a shift-and-add multiplier as well. For more
complex operations, Lisp source code can be embedded,
(‘‘ADDU’’ nil second normal nil nil
(two-stack-arg (x y) (var var)
(chain [o1 = i1 + i2 + i3,
o2 = i1 + (i1 + i2) * (i1 + i3)]
(o2 -> i3
x -> i1
y -> i2
o1 -> stack)
(0 -> i3))))
Figure 6: Code used in our compiler to map the bytecode
instruction for unsigned integer addition to the subcircuit
for that operation.
which can interact directly with the compiler’s internal
data structures.
5.2 Portability Between SFE Systems
Both the PCF compiler and the interpreter can treat the
underlying secure computation system as a black box.
Switching between secure computation systems, there-
fore, requires work only at the “back end” of the inter-
preter, where gates are emitted. We envision two pos-
sible approaches to this, both of which we implemented
for our tests:
1. A single function should be called when a gate
should be used in the secure computation proto-
col. The Java implementation of PCF uses this ap-
proach, with the HEKM system.
2. Gates should be generated as if they are being read
from a ﬁle, with the secure computation system call-
ing a function. The secure computation system may
need to provide “callback” functions to the PCF in-
terpreter for copying protocol-speciﬁc data between
wires. The C implementation we tested uses this
abstraction for the KSS12 system.
6 Evaluation
We compiled a variety of functions to test our com-
piler, optimizer, and PCF interpreter. For each circuit,
we tested the performance of the KSS12 system on a
LAN, described below. For the KSS12 timings, we av-
eraged the runtime for 50 runs, alternating which com-
puter acted as the generator and which as the evaluator to
account for slight conﬁguration differences between the
systems. Compiler timings are based on 50 runs of the
compiler on a desktop PC with an Intel Xeon 5560 pro-
cessor, 8GB of RAM, a 7200 RPM hard disk, Scientiﬁc
Linux 6.3 (kernel version 2.6.32, SBCL version 1.0.38).
USENIX Association  
22nd USENIX Security Symposium  329
9
Total Gates
Function
97,733
16384-bit Comp.
4,368
Hamming 160
Hamming 1600
32,912
Hamming 16000
389,312
1,443
128-bit Sum
256-bit Sum
2,951
1024-bit Sum
11,999
105,880
64-bit Mult.
128-bit Mult.
423,064
256-bit Mult.
1,659,808
1024-bit Mult.
25,592,368
673,105,990
256-bit RSA
512-bit RSA
5,397,821,470
1024-bit RSA 42,151,698,718
92,961
433,475
1,782,656
14,308,864
482,391
10,908,749
3x3 Matrix Mult.
5x5 Matrix Mult.
8x8 Matrix Mult.
16x16 Matrix Mult.
4-Node Graph Iso.
16-Node Graph Iso.
non-XOR Gates
32,229
880
6,375
97,175
345
721
2,977
24,766
100,250
400,210
6,371,746
235,925,023
1,916,813,808
15,149,856,895
27,369
127,225
522,304
4,186,368
97,819
4,112,135
Compile Time (s)
3.40± 4%
9.81± 1%
11.0± 0.4%
10.8± 0.2%
4.70± 3%
4.60± 3%
4.60± 3%
71.7± 0.2%
74.9± 0.1%
79.5± 0.9%
74.0± 0.2%
381.± 0.2%
350.± 0.2%
564.± 0.2%
306.± 1%
343.± 0.7%
109.± 0.1%
109.± 0.1%
684.± 0.2%
1040± 0.1%
Simulator Time (s)
4.40± 0.2%
0.0810± 0.3%
0.52± 8%
4.83± 0.5%
0.0433± 0.4%
0.0732± 0.4%
0.250± 0.5%
0.332± 0.4%
0.903± 0.3%
3.07± 0.2%
40.9± 0.4%
980.± 0.3%
7,330± 0.2%
56,000± 0.3%
0.256± 0.5%
0.94± 2%
3.14± 0.3%
23.7± 0.3%
3.63± 0.5%
47.0± 0.1%
Table 5: Summary of circuit sizes for various functions and the time required to compile and interpret the PCF ﬁles
in a protocol simulator. Times are averaged over 50 samples, with 95% conﬁdence intervals, except for RSA-1024
simulator time, which is averaged over 8 samples. Run times were measured using the time function implemented in
SBCL.
Source code for our compiler, our test systems, and our
test functions is available at the authors’ website.
6.1 Effect of Array Sizes on Timing
Some changes in compile time can be observed as some
of the functions grow larger. The dataﬂow analysis deals
with certain pointer operations by traversing the entire
local variable space of the function and all global mem-
ory, which in functions with large local arrays or pro-
grams with large global arrays is costly as it increases the
number of wires that optimizer must analyze. Reducing
this cost is an ongoing engineering effort.
6.2 Experiments
We compiled and executed the circuits described below
to evaluate our compiler and representation. Several of
these circuits were tested in other systems; we present
the non-XOR gate counts of the circuits generated by our
compiler and other work in Table 4. The sizes, compile
times, and interpreter times required for these circuits are
listed in Table 5. By comparison, we show compile times
and circuit sizes using the KSS12 and HFKV compilers
in Table 6. As expected, the PCF compiler outperforms
these previous compilers as the size of the circuits grow,