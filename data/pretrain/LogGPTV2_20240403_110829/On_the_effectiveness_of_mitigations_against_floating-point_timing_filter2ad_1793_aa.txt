title:On the effectiveness of mitigations against floating-point timing
channels
author:David Kohlbrenner and
Hovav Shacham
On the effectiveness of mitigations against 
floating-point timing channels
David Kohlbrenner and Hovav Shacham, UC San Diego
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/kohlbrenner
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXOn the effectiveness of mitigations
against ﬂoating-point timing channels
David Kohlbrenner∗
Hovav Shacham†
UC San Diego
UC San Diego
Abstract
The duration of ﬂoating-point instructions is a known
timing side channel that has been used to break Same-
Origin Policy (SOP) privacy on Mozilla Firefox and the
Fuzz differentially private database. Several defenses
have been proposed to mitigate these attacks.
We present detailed benchmarking of ﬂoating point
performance for various operations based on operand
values. We identify families of values that induce slow
and fast paths beyond the classes (normal, subnormal,
etc.) considered in previous work, and note that different
processors exhibit different timing behavior.
We evaluate the efﬁcacy of the defenses deployed (or
not) in Web browsers to ﬂoating point side channel at-
tacks on SVG ﬁlters. We ﬁnd that Google Chrome,
Mozilla Firefox, and Apple’s Safari have insufﬁciently
addressed the ﬂoating-point side channel, and we present
attacks for each that extract pixel data cross-origin on
most platforms.
We evaluate the vector-operation based defensive
mechanism proposed at USENIX Security 2016 by Rane,
Lin and Tiwari and ﬁnd that it only reduces, not elimi-
nates, the ﬂoating-point side channel signal.
Introduction
Together, these measurements and attacks cause us to
conclude that ﬂoating point is simply too variable to use
in a timing security sensitive context.
1
The time a modern processor
takes to execute a
ﬂoating-point instruction can vary with the instruction’s
operands. For example, subnormal ﬂoating-point val-
ues consumed or produced by an instruction can induce
an order-of-magnitude execution slowdown.
In 2015,
Andrysco et al. [2] exploited the slowdown in subnor-
mal processing to break the privacy guarantees of a dif-
ferentially private database system and to mount pixel-
stealing attacks against Firefox releases 23–27.
In a
pixel-stealing attack, a malicious web page learns the
contents of a web page presented to a user’s browser
by a different site, in violation of the browser’s origin-
isolation guarantees.
Andrysco et al. proposed mitigations against ﬂoating-
point timing attacks:
∗PI:EMAIL
†PI:EMAIL
• Replace ﬂoating-point computations with ﬁxed-
point computations relying on the processor’s inte-
ger ALU.
• Use processor ﬂags to cause subnormal values to be
treated as zero, avoiding slowdowns associated with
subnormal values.
• Shift sensitive ﬂoating-point computations to the
GPU or other hardware not known to be vulnerable.
At USENIX Security 2016, Rane, Lin, and Tiwari [15]
proposed additional mitigations:
• Use program analysis to identify ﬂoating-point op-
erations whose inputs cannot be subnormal; these
operations will not experience subnormal slow-
downs.
• Run ﬂoating-point operations whose inputs might
be subnormal on the the processor’s SIMD unit,
loading the a SIMD lane with a dummy operation
chosen to induce consistent worst-case execution
time.
Rane, Lin, and Tiwari implemented their proposed
mitigations in a research prototype Firefox browser.
Variants of the Andrysco et al. mitigations have been
adopted in the latest versions of Firefox, Safari, and
Chrome.
We evaluate how effective the proposed mitigations
are at preventing pixel stealing. We ﬁnd that, other than
avoiding the ﬂoating point unit altogether, the proposed
mitigations are not effective at preventing pixel steal-
ing — at best, they reduce the rate at which pixels can
be read. Our attacks make use of details of ﬂoating point
performance beyond the subnormal slowdowns observed
by Andrysco et al.
Our contributions are as follows:
1. We give a more reﬁned account of how ﬂoating-
point instruction timing varies with operand values
than did Andrysco et al. In particular, we show that
operands with a zero exponent or signiﬁcand induce
small but exploitable speedups in many operations.
2. We evaluate the SIMD defense proposed by Rane,
Lin, and Tiwari, giving strong evidence that proces-
sors execute the two operations sequentially, not in
parallel.
USENIX Association
26th USENIX Security Symposium    69
Format
Name
Half
Single
Double
Size
Bits
16
32
64
Subnormal
Min
6.0e−8
1.4e−45
4.9e−324
Normal
Min
6.10e−5
1.18e−38
2.23e−308
Normal
Max
6.55e4
3.40e38
1.79e308
Figure 1:
with permission from [2])
IEEE-754 Format type ranges (Reproduced
3. We revisit browser implementations of SVG ﬁlters
two years after the Andrysco et al. attacks. Despite
attempts at remediation, we ﬁnd that the latest ver-
sions of Chrome, Firefox, and Safari are all vulner-
able to pixel-stealing attacks.
4. We show that subnormal values induce slowdowns
in CUDA calculations on modern Nvidia GPUs.
Taken together, our ﬁndings demonstrate that the ﬂoat-
ing point units of modern processors are more complex
than previously realized, and that defenses that seek to
take advantage of that unit without creating timing side
channels require careful evaluation.
Figure 2: IEEE-754 single precision ﬂoat
Ethics and disclosure. We have disclosed the pixel-
stealing attacks we found to Apple, Google, and Mozilla.
Mozilla has already committed to deploying a patch. We
will give Apple and Google adequate time to patch be-
fore publishing our ﬁndings.
2 Background
Many ﬂoating point
instructions are known to ex-
hibit performance differences based on the operands.
Andrysco et al. [2] leveraged these timing differences to
defeat the claimed privacy guarantees of two systems:
Mozilla Firefox (versions 23–27) and the Fuzz differen-
tially private database. Andrysco et al.’s attack on Fire-
fox, and the attacks on browsers we present, use SVG
ﬁlter timing to break the Same-Origin Policy, an idea in-
troduced by Stone [16] and Kotcher et al. [13].
2.1
For the purposes of this paper we will refer to ﬂoating
point, ﬂoats, and doubles to mean the IEEE-754 ﬂoating
point standard (see Figure 1) unless otherwise speciﬁed.
IEEE-754 ﬂoating point
The ﬂoating point unit (FPU) accessed via Intel’s sin-
gle scalar Streaming SIMD (Single Instruction, Multiple
Data) Extensions (SSE) instructions adheres to this stan-
dard on all processors we discuss. We omit discussion of
the x87 legacy FPU that is still accessible on a modern
x86_64 processor.
The IEEE-754 ﬂoating point standard is the most com-
mon ﬂoating point implementation available on com-
modity CPUs. Figure 2 shows the layout of the IEEE-
754 single precision ﬂoat and the value calculation.
Note that the actual exponent used in the 2exp portion
is exponent − bias where the bias is half the unsigned
maximum value of the exponent’s range. This format al-
lows for the full range of positive and negative exponent
values to be represented easily. If the exponent has any
non 0 bits the value is normal, and the signiﬁcand has an
implicit leading 1 bit. If the exponent is all 0 bits (i.e.,
exponent − bias = −bias) then the value is subnormal,
and there is no implicit leading 1 bit. As shown in ﬁg-
ure 1 this means that subnormal values are fantastically
small. Subnormal values are valuable because they en-
able gradual underﬂow for ﬂoating point computations.
Gradual underﬂow guarantees that given any two ﬂoats,
a (cid:54)= b, there exists a ﬂoating point value c (cid:54)= 0 that is
the difference a − b = c. The use of this property is
demonstrated by the simple pseudocode “if a (cid:54)= b then
by dividing by zero. Without subnormals the IEEE-754
standard could not guarantee gradual underﬂow for nor-
mals and a number of adverse scenarios such as the one
above can occur. As Andrysco et al. [2] observe, subnor-
mal values do not frequently arise, and special hardware
or microcode is used to handle them on most CPUs.
x(cid:14) (a− b),” which does not expect to generate an inﬁnity
Andrysco et al.’s attacks made use of the substantial
timing differences between operations on subnormal (or
denormal) ﬂoating point values and on normal ﬂoating
point values. See Figure 8 for a list of non-normal IEEE-
754 value types.
In this paper we present additional
benchmarks that demonstrate that (smaller) timing dif-
ferences arise from more than just subnormal operands.
Section 3 describes our benchmarking results.
2.2 SVG ﬂoating point timing attacks
Andrysco et al. [2] presented an attack on Firefox SVG
ﬁlters that is very similar to the attacks detailed later in
this paper. Thus, we provide an overview of how that
attack works for reference.
Figure 3 shows the workﬂow of the SVG timing at-
tack.
1. The attacking page creates a large  of
the victim page inside of a container 
2. The container  is sized to 1x1 pixel
target pixel
and can be scrolled to the current
70    26th USENIX Security Symposium
USENIX Association
SigniﬁcandExponent8231( 1)sign⇥2exponent 127⇥1..signiﬁcandFigure 3: Cross-Origin SVG Filter Pixel Stealing Attack in Firefox, reproduced from [2] with permission
0.0
1.0
1e10
1e+30
1e-30
1e-41
1e-42
256
257
Cycle count
0.0
1.0
1e10
1e+30
1e-30
1e-41
1e-42
256
257
6.57
6.59
6.57
6.59
6.57
6.56
6.59
6.58
6.56
6.57
6.59
6.59
6.56
6.59
130.90
130.89
6.58
6.55
6.60
6.59
6.58
6.58
6.59
130.89
130.88
6.55
6.59
6.58
6.57
6.59
6.59
6.57
130.87
130.90
6.57
6.58
6.59
6.56
6.56
6.57
6.59
6.56
6.57
6.58
6.57
6.57
130.90
130.90
130.90
6.59
6.57
6.58
130.92
130.89
6.59
130.85
130.91
130.91
6.58
6.57
6.57
130.88
130.88
6.58
6.58
6.58
6.59
6.58
130.96
130.85
6.57
6.57
6.59
6.57
6.58
6.58
6.57
130.90
130.89
6.56
6.58
Figure 4: Multiplication timing for single precision ﬂoats on Intel i5-4460
on the  using the scrollTop and
scrollLeft properties.
3. The target pixel is duplicated into a larger container
 using the -moz-element CSS property.
This creates a  that is arbitrarily sized and
consists only of copies of the target pixel.
4. The SVG ﬁlter
in variable time
(feConvolveMatrix) is applied to the the pixel
duplication 
that
runs
5. The rendering time of the ﬁlter is measured us-
ing requestAnimationFrame to get a call-
back when the next
frame is completed and
performance.now for high resolution timing.
6. The rendering time is compared to the threshold de-
termined during the learning phase and categorized
as white or black.
Since the targeted  and the attacker page
are on different origins, the attacking page should not
be able to learn any information about the ’s
content. However, since the rendering time of the SVG
ﬁlter is visible to the attacker page, and the rendering
time is dependent on the  content, the attack-
ing page is able to violate this policy and learn pixel in-
formation.
3 New ﬂoating point timing observations
Andryso et al. [2] presented a number of timing varia-
tions in ﬂoating point computation based on subnormal
and special value arguments. We expand this category to
note that any value with a zero signiﬁcand or exponent
exhibits different timing behavior on most Intel CPUs.
Figure 9 shows a summary of our ﬁndings for our pri-
mary test platform running an Intel i5-4460 CPU. Unsur-
prisingly, double precision ﬂoating point numbers show
more types of, and larger amounts of, variation than sin-
gle precision ﬂoats.
Figures 4, 5, 6, and 7 are crosstables showing average
cycle counts for division and multiplication on double
and single precision ﬂoats on the Intel i5-4460. We re-
fer to the type of operation (add, subtract, divide, etc) as
the operation, and the speciﬁc combination of operands
USENIX Association
26th USENIX Security Symposium    71
Target pixel whiteTarget pixel black(1) iframe of target page(3) Pixel multiplication (4) SVG Filter(5)(6)     (2) Target pixel in redFiltered renderingBrowser WindowDividend
0.0
1.0
1e10
1e+30
Divisor
1e-30
1e-41
1e-42
256
257
0.0
1.0
1e10
1e+30
1e-30
1e-41
1e-42
256
257
6.55
6.58
6.58
6.57
6.57
6.58
6.59
6.58
6.58
6.50
6.58
6.58
6.57
6.57
149.75
149.72
6.60
6.58
6.58
6.58
6.58
6.59
155.37
6.57
6.56
6.56
6.57
6.57
6.57
6.59
6.57
6.57
6.56
6.56
6.60
6.57
Cycle count
6.54
6.57
6.58
6.56
6.58
152.56
152.60
6.55
6.54
6.57
152.59
152.57
152.59
152.54
152.57
152.56
152.53
152.59
6.56
152.57
152.56
152.51
152.59
152.59
152.49
152.70
152.51
6.58
6.59
6.56
6.58
6.57
149.72
149.74
6.58
6.57
6.59
6.60
6.58
6.60
6.54
152.55
152.54
6.58
6.55
Figure 5: Division timing for single precision ﬂoats on Intel i5-4460
0.0
1.0
1e10
1e+200
1e-300
1e-42
256
257
1e-320
0.0
1.0
1e10
1e+200
1e-300
1e-42
256