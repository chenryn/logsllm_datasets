* 原文标题：AFL-based Java fuzzers and the Java Security Manager
  * 原文链接：
  * 原作者：modzero ag
在过去的半年里，我一直在用基于AFL的Java Fuzz工具做一些Fuzzing，即Kelinci和JQF。我并没有用过[java-afl](https://github.com/Barro/java-afl)这个工具。本文要介绍的内容为：
  * 基于AFL的Java Fuzz工具的简要说明
  * 在Apache Commons中发现未捕获异常的第一步以及相关的解释
  * 对Java Fuzzing目标的解释
  * 使用JavaSecurity Manager进行Fuzzing测试
  * 测试Apache Tika
  * 针对Apache Tika发现的漏洞
  * 使用Kelinci对ApacheTika进行fuzzing
  * JQF和Java中的一个bug
  * 添加一个x86的fuzzing机器
  * 总结
下文提到的几个文件,都在 .
此外，zip文件中还包含一些其他文件，这些文件产生了相同的bug。
## 基于AFL的Java Fuzz工具
AFL Fuzzer现在非常受欢迎，因为它执行了工具化的fuzzing。如果你不熟悉AFL，最好在阅读这篇文章之前快速看一下
[AFL](http://lcamtuf.coredump.cx/afl/)。尤其重要的是了解AFL如何处理挂起（需要花费太多时间处理的测试用例）和崩溃（例如，目标程序段错误）。
Kelinci是一个用Java语言实现的AFL，前景很好。尽管每个Fuzzing测试实例有两个进程的方法有点笨拙，而且会引起困扰。一个进程是在原生C侧，将AFL产生的突变输入并通过TCP
socket发送给第二个进程。第二个进程是Java进程，它向目标程序提供输入，并返回使用此输入的代码路径。在这个Fuzz的Java部分中有一些错误信息并不总是明确的（至少对我来说），但它们似乎表明Fuzzer已经不在一个健康的状态下运行。然而，到目前为止，Kelinci工作的很好，并取得了很多结果。这个项目已经七个月没有开发了，希望作者能重新捡起来。
JQF是维护很积极的，最后一次更新在几天前提交。它采取的不是大多数Fuzz安全研究者所采取的经典的Fuzz方法，而是基于Java的单元测试，更多的关注开发人员。目前它只支持AFL-t开关的超时设置，而且还只有基本的afl-cmin支持。对于使用单元测试的开发人员来说，这是完美的，但它并不是安全研究人员进行Java代码fuzzing的最灵活的Fuzz工具。
java-afl已经四个月内没有更新了。实际上我从来没有成功使用过这个Fuzz工具。我[尝试问](https://github.com/Barro/java-afl/issues/1)开发人员怎么去正确地运行它，但是没有找到答案可以帮助我运行我想到的测试用例。如果你可以运行java-afl，请告诉我，知道这个fuzz工具如何运行是一件有趣的事情。
## 从Apache Commons开始
先从[Apache Common's](https://commons.apache.org/)
的JPEG解析器开始。这种选择很简单，因为它是Kelinci
Fuzzer的[一个例子](https://github.com/isstac/kelinci/tree/master/examples/commons-imaging/README)。Apache
Commons是一个非常流行的库，对于Java标准库缺少或不完整的情况而言。在通过作者的示例时，我意识到他只给Fuzzer一个包含文本“hello”的输入文件，这不是一个JPEG文件，不是一个很好的启动语料库。虽然这可能是[lcamtuf非常有趣的实验](http://lcamtuf.blogspot.ch/2014/11/pulling-jpegs-out-of-thin-air.html)，使人们相信使用这种语料库数据是一个有效的选择，但它并不是适合fuzzing的有效选择。Lamtuff的实验很好的证明了Fuzzer是智能的，但是对于生产的Fuzzer来说，必须使用合适的输入文件才能取得好的效果。Fuzzing最后都要讨论语料库数据。所以我把jpeg文件放到了AFL网站上的[lcamtuf的语料库](http://lcamtuf.blogspot.ch/2014/11/pulling-jpegs-out-of-thin-air.html)和我的私人收藏中的一些文件。Fuzzer快速出现了一个[我向Apache报告的ArrayIndexOutOfBoundsException漏洞](https://issues.apache.org/jira/browse/IMAGING-215)(fileArrayIndexOutOfBoundsException_DhtSegment_79.jpeg)。很容易开始这个Java
Fuzz测试。如果您对Apache Commons的其他解析器（例如PNG解析器）做同样的操作，那么您可能会发现更多未被捕获的异常。
## 目标：回头重新思考一下目标
在这次快速实验之后，我提出了fuzzing Java更多的想法。Fuzz最初不是应用于内存安全的程序，是希望我们能够发现memory
corruption问题。在Java代码中，越界读写不会导致 memory corruption
，而是会导致或多或少无害的异常（如IndexOutOfBoundsException）。虽然可以找到代码健壮性问题，并可能导致拒绝服务问题，但这些问题的严重性通常很低。问题是我们在寻找什么样的行为和fuzzing的结果？有一些场景非常有趣，但是攻击向量（攻击者如何在现实世界中利用这个问题）很重要。这是我对JavaFuzz的粗略看法：
  * 发现JVM的bug
    * 任意Java代码作为输入。这可能有助于更多的特殊场景，例如，当您需要从沙箱JVM中逃逸时。在大多数其他场景中，这种攻击向量可能是不现实的，因为攻击者已经在执行Java代码。
    * 反馈数据到内置类/函数（fuzz标准库），如字符串。这不是很可能出现结果，但您永远不知道，可能存在Java反序列化漏洞潜伏在JVM代码中？
    * 找到low-severity或非安全问题，例如抛出一个未声明要抛出异常的代码（RuntimeExceptions）。
  * Finding memory corruption bugs in Java code that uses native code (for example JNI or CNI). This is probably a very good place to use Java fuzzing, but I don't encounter this situation very much except in Android apps. And fuzzing Android apps is an entirely different beast that is not covered here.
  * 查找使用原生代码（例如JNI或CNI）的Java代码中的memory corruptionbug。这可能是一个很好的使用Java Fuzz的地方，但我没有遇到这种情况，除了在Android应用程序。而Fuzz安卓应用是一个完全不同的领域，这里不再赘述。
  * Fuzz纯Java代码。
    * 我们可以去定制目标。这可能取决于您的业务逻辑。例如，如果代码大量使用文件读/写，可能有某种竞争条件？此外,对[密码库的差分Fuzz的思想](https://www.blackhat.com/docs/us-17/wednesday/us-17-Aumasson-Automated-Testing-Of-Crypto-Software-Using-Differential-Fuzzing.pdf)也有很大的意义.
    * 发现“资源管理”问题，如拒绝服务（Denial of Service，DoS）问题、OutOfMemoryExceptions、CPU高负载、磁盘空间使用率过高或永不返回的功能。
    * Finding low-severity或非安全问题，如RuntimeExceptions。
    * Java代码的已知安全问题，如Java反序列化漏洞、服务器侧请求伪造（SSRF）、外部实体注入（XXE）等。
我对这个列表中的最后三个点特别感兴趣：找到资源管理问题、RuntimeExceptions
和常规的Java安全问题。虽然我在上面所描述的小实验中已经找到了一个RuntimeException，但我很确定，我可以通过检查AFL的“挂起”目录来检测某些资源管理问题。不过，找到SSRF等常规安全问题似乎很棘手。Fuzzer需要额外的插桩或消毒器(sanitizers)来检测这种不安全的行为。正如[Address
Sanitizer
(Asan)](https://clang.llvm.org/docs/AddressSanitizer.html)中止了对原生代码的无效内存访问(后者导致了AFL内部崩溃)
,在Java世界中如果有一个能处理上述问题的消毒器会很棒。例如，一个文件消毒器可能会采取一个允许被进程访问的文件的白名单，但是如果访问其他文件，则会中止。这可以用于检测XXE和SSRF场景。如果使用套接字，网络消毒器可能会做同样的操作。设想一个Java图片解析库作为目标。从安全角度看，这样的库不应该打开网络套接字，因为这表示有服务器端请求伪造。这是一个非常现实的场景，我以前在PNG
XMP元数据解析库中找到了XXE问题。
## Java Security Manager
在做了一些研究后，发现没有什么像AFL通常使用的文件白名单消毒器的原生代码。因此，如果我们fuzz任何C/C +
+代码，我们将不得不编写自己的解析器，并且正如[Jakub所说的那样，由于可重入性文件系统函数，可能会很难实现。](https://groups.google.com/forum/#!topic/afl-users/kkVU8_RCtHM)或者你想自己写一个。
回到Java，我发现已经有这样一个消毒器了。最棒的是它是JVM的一个内置特性，它被称为Java Security
Manager。看看这个[我创建的简单的JavaSecurityManager策略文件](https://github.com/floyd-fuh/kelinci/blob/master/examples/commons-imaging/java-security-policy.txt)用我们简单的ApacheCommons JPEG解析代码运行Kelinci Fuzz
    grant {
        permission java.io.FilePermission "/tmp/*", "read,write,delete";
        permission java.io.FilePermission "in_dir/*", "read";
        permission java.io.FilePermission "/opt/kelinci/kelinci/examples/commons-imaging/out_dir/*", "read, write, delete";
        permission java.io.FilePermission "/opt/kelinci/kelinci/examples/commons-imaging/out_dir/master/*", "read, write, delete";
        permission java.io.FilePermission "/opt/kelinci/kelinci/examples/commons-imaging/out_dir/master0/*", "read, write, delete";
        permission java.io.FilePermission "/opt/kelinci/kelinci/examples/commons-imaging/out_dir/master1/*", "read, write, delete";
        permission java.io.FilePermission "/opt/kelinci/kelinci/examples/commons-imaging/out_dir/slave/*", "read, write, delete";
        permission java.io.FilePermission "/opt/kelinci/kelinci/examples/commons-imaging/out_dir/slave0/*", "read, write, delete";
        permission java.io.FilePermission "/opt/kelinci/kelinci/examples/commons-imaging/out_dir/slave1/*", "read, write, delete";
        permission java.net.SocketPermission "localhost:7007-", "accept, listen, resolve";
        permission java.lang.RuntimePermission "modifyThread";
    };
它所做的只是允许文件访问临时目录，从输入目录（in_dir）读取并写入AFL的输出目录（out_dir）。此外，它允许Kelinci