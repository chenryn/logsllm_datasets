### 3.2.8 Program Security

#### 3.2.8.1 EXECUTE Privilege
An SPL (Stored Procedure Language) program, such as a function, procedure, or package, can only be executed if one of the following conditions is met:
- The current user is a superuser.
- The current user has been explicitly granted the `EXECUTE` privilege on the SPL program.
- The current user inherits the `EXECUTE` privilege by being a member of a group that has this privilege.
- The `EXECUTE` privilege has been granted to the `PUBLIC` group.

By default, when an SPL program is created in Advanced Server, the `EXECUTE` privilege is automatically granted to the `PUBLIC` group, allowing any user to execute the program. This default privilege can be revoked using the `REVOKE EXECUTE` command. For example:

```sql
REVOKE EXECUTE ON PROCEDURE list_emp FROM PUBLIC;
```

After revoking the `EXECUTE` privilege from the `PUBLIC` group, it can be explicitly granted to individual users or groups. For instance:

```sql
GRANT EXECUTE ON PROCEDURE list_emp TO john;
```

Now, the user `john` can execute the `list_emp` program, while other users who do not meet the above conditions cannot.

#### 3.2.8.2 Database Object Name Resolution
When an SPL program references a database object, it can use either a qualified name or an unqualified name. A qualified name is in the form `schema.name`, where `schema` is the name of the schema containing the object. An unqualified name does not include the schema part. 

- **Qualified Name**: There is no ambiguity; the object is either found in the specified schema or does not exist.
- **Unqualified Name**: The current user’s search path is used to resolve the reference. The search path is a list of schemas searched in left-to-right order. If the object is not found in any of the schemas in the search path, it is considered non-existent.

The default search path can be displayed using the `SHOW search_path` command in PSQL. For example:

```sql
edb=# SHOW search_path;
search_path
-----------------
"$user", public
(1 row)
```

In this example, `$user` is a placeholder for the current user. If the current user is `enterprisedb`, an unqualified object will be searched for in the `enterprisedb` schema first, and then in the `public` schema.

#### 3.2.8.3 Database Object Privileges
Once an SPL program begins execution, any attempt to access a database object results in a check to ensure the current user has the necessary privileges. These privileges are managed using the `GRANT` and `REVOKE` commands. If the current user attempts unauthorized access, the program will throw an exception. See Section 3.5.7 for more information on exception handling.

#### 3.2.8.4 Definer’s vs. Invoker’s Rights
The `AUTHID` clause determines whether an SPL program has definer’s rights or invoker’s rights:
- **Definer’s Rights** (default): The owner of the program becomes the current user during execution. The program owner’s privileges are used to determine access to referenced objects.
- **Invoker’s Rights**: The current user at the time the program is called remains the current user during execution. The current user’s privileges are used to determine access to referenced objects.

Key points:
- If a definer’s rights program calls another definer’s rights program, the current user changes to the owner of the called program.
- If a definer’s rights program calls an invoker’s rights program, the owner of the calling program remains the current user.
- If an invoker’s rights program calls another invoker’s rights program, the current user of the calling program remains the current user.
- If an invoker’s rights program calls a definer’s rights program, the current user switches to the owner of the definer’s rights program.

#### 3.2.8.5 Security Example
This example demonstrates the creation of a new database and two users, `hr_mgr` and `sales_mgr`, with different schemas and privileges. The steps include:
1. **Create Database and Users**:
   ```sql
   CREATE DATABASE hr;
   \c hr enterprisedb
   CREATE USER hr_mgr IDENTIFIED BY password;
   CREATE USER sales_mgr IDENTIFIED BY password;
   ```

2. **Create the Sample Application**:
   ```sql
   \c - hr_mgr
   \i /usr/edb/as11/share/edb-sample.sql
   ```

3. **Create the emp Table in Schema sales_mgr**:
   ```sql
   \c – hr_mgr
   GRANT USAGE ON SCHEMA hr_mgr TO sales_mgr;
   \c – sales_mgr
   CREATE TABLE emp AS SELECT * FROM hr_mgr.emp WHERE job = 'SALESMAN';
   ```

4. **Remove Default Privileges**:
   ```sql
   \c – hr_mgr
   REVOKE USAGE ON SCHEMA hr_mgr FROM sales_mgr;
   REVOKE ALL ON dept FROM PUBLIC;
   REVOKE ALL ON emp FROM PUBLIC;
   REVOKE ALL ON next_empno FROM PUBLIC;
   REVOKE EXECUTE ON FUNCTION new_empno() FROM PUBLIC;
   REVOKE EXECUTE ON PROCEDURE list_emp FROM PUBLIC;
   REVOKE EXECUTE ON FUNCTION hire_clerk(VARCHAR2,NUMBER) FROM PUBLIC;
   REVOKE EXECUTE ON PACKAGE emp_admin FROM PUBLIC;
   ```

5. **Change list_emp to Invoker’s Rights**:
   ```sql
   CREATE OR REPLACE PROCEDURE list_emp
   AUTHID CURRENT_USER
   IS
   v_empno NUMBER(4);
   v_ename VARCHAR2(10);
   CURSOR emp_cur IS
   SELECT empno, ename FROM emp ORDER BY empno;
   BEGIN
   OPEN emp_cur;
   DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
   DBMS_OUTPUT.PUT_LINE('----- -------');
   LOOP
   FETCH emp_cur INTO v_empno, v_ename;
   EXIT WHEN emp_cur%NOTFOUND;
   DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
   END LOOP;
   CLOSE emp_cur;
   END;
   ```

6. **Change hire_clerk to Invoker’s Rights and Qualify Call to new_empno**:
   ```sql
   CREATE OR REPLACE FUNCTION hire_clerk (
   p_ename VARCHAR2,
   p_deptno NUMBER
   ) RETURN NUMBER
   AUTHID CURRENT_USER
   IS
   v_empno NUMBER(4);
   v_ename VARCHAR2(10);
   v_job VARCHAR2(9);
   v_mgr NUMBER(4);
   v_hiredate DATE;
   v_sal NUMBER(7,2);
   v_comm NUMBER(7,2);
   v_deptno NUMBER(2);
   BEGIN
   v_empno := hr_mgr.new_empno;
   INSERT INTO emp VALUES (v_empno, p_ename, 'CLERK', 7782,
   TRUNC(SYSDATE), 950.00, NULL, p_deptno);
   SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno INTO
   v_empno, v_ename, v_job, v_mgr, v_hiredate, v_sal, v_comm, v_deptno
   FROM emp WHERE empno = v_empno;
   DBMS_OUTPUT.PUT_LINE('Department : ' || v_deptno);
   DBMS_OUTPUT.PUT_LINE('Employee No: ' || v_empno);
   DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
   DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
   DBMS_OUTPUT.PUT_LINE('Manager : ' || v_mgr);
   DBMS_OUTPUT.PUT_LINE('Hire Date : ' || v_hiredate);
   DBMS_OUTPUT.PUT_LINE('Salary : ' || v_sal);
   DBMS_OUTPUT.PUT_LINE('Commission : ' || v_comm);
   RETURN v_empno;
   EXCEPTION
   WHEN OTHERS THEN
   DBMS_OUTPUT.PUT_LINE('The following is SQLERRM:');
   DBMS_OUTPUT.PUT_LINE(SQLERRM);
   DBMS_OUTPUT.PUT_LINE('The following is SQLCODE:');
   DBMS_OUTPUT.PUT_LINE(SQLCODE);
   RETURN -1;
   END;
   ```

7. **Grant Required Privileges**:
   ```sql
   GRANT USAGE ON SCHEMA hr_mgr TO sales_mgr;
   GRANT EXECUTE ON PROCEDURE list_emp TO sales_mgr;
   GRANT EXECUTE ON FUNCTION hire_clerk(VARCHAR2,NUMBER) TO sales_mgr;
   GRANT EXECUTE ON FUNCTION new_empno() TO sales_mgr;
   GRANT EXECUTE ON PACKAGE emp_admin TO sales_mgr;
   ```

8. **Run Programs list_emp and hire_clerk**:
   ```sql
   \c – sales_mgr
   DECLARE
   v_empno NUMBER(4);
   BEGIN
   hr_mgr.list_emp;
   DBMS_OUTPUT.PUT_LINE('*** Adding new employee ***');
   v_empno := hr_mgr.hire_clerk('JONES',40);
   DBMS_OUTPUT.PUT_LINE('*** After new employee added ***');
   hr_mgr.list_emp;
   END;
   ```

Output:
```
EMPNO ENAME
----- -------
7499 ALLEN
7521 WARD
7654 MARTIN
7844 TURNER
*** Adding new employee ***
Department : 40
Employee No: 8000
Name : JONES
Job : CLERK
Manager : 7782
Hire Date : 08-NOV-07 00:00:00
Salary : 950.00
*** After new employee added ***
EMPNO ENAME
----- -------
7499 ALLEN
7521 WARD
7654 MARTIN
7844 TURNER
8000 JONES
```

The table and sequence accessed by the programs in the anonymous block are illustrated in the following diagram. The gray ovals represent the schemas of `sales_mgr` and `hr_mgr`. The current user during each program execution is shown within parentheses in bold red font.

(sales_mgr)
BEGIN
hr_mgr.list_emp;

---

This document provides a comprehensive overview of program security in Advanced Server, including the management of `EXECUTE` privileges, name resolution, and the differences between definer’s and invoker’s rights.