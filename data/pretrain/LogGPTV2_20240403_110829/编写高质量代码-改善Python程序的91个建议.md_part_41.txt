callable，args，kwds= self.workQueue.get(False)#从队列中取出一个任务
urlhandler.read(1024)
callable,
num_of_workers=10):
"wb") as f:
**kwds）：
*args;
**kwds)
**kwds）：
#获取处理结果
#往工作队列中加入请求
#重新加入线程池中
#从池中取出一个线程处理请求
#启动线程
#加入线程队列中
#线程池管理器
#存放处理结果到队列中
输出结果的队列
请求队列
第8章性能剖析与优化255
---
## Page 269
256
exception)：主要的函数，作用是创建具有相同的执行函数但参数不同的一系列工作请求。
主要有以下方法。
的下载地址为：https://pypi.python.org/pypi/threadpool。该模块提供了以下基本类和方法。
download_fileO方法来实现。
线程池的管理和创建，它包含一个工作请求列队和执行结果列队，具体的下载工作通过
相比自己实现的线程池模型，使用现成的线程池模块往往更简单。Python中线程池模块
最后看一个例子，将上一节多线程下载的例子改为用线程池来实现。
1）threadpool.ThreadPool：线程池类，主要的作用是用来分派任务请求和收集运行结果。
4）makeRequests(callable_,args_list,callback=None,exc_callback=_handle_thread
3)threadpool.WorkerThread：处理任务的工作线程，主要有runO方法以及dismissO方法。
2）threadpool.WorkRequest：包含有具体执行方法的工作请求类。
口wait(self)：阻塞用于等待所有执行结果。注意当所有执行结果返回后，线程池内部
poll(self,block=False)：处理任务队列中新的请求。
putRequest(self,request,block=True,timeout=None)：将工作请求放人队列中。
口joinAllIDismissedWorkers(self)：在设置为退出的线程上执行Thread.join。
dismiss Workers(self, num_workers,do_join=False)：告诉 num_workers 数量的工作线程
口createWorkers(self,num_workers,pol_timeout=5)：将 num_workers 数量对应的线程加
口_init_(self,num_workers,q_size=0,resq_size=0,poll_timeout=5)：建立线程池，并启
自行实现线程池，需要定义一个Worker处理工作请求，定义WorkerManage来进行
在执行完当前任务后退出。
wm.wait_for_complete()
wm.start()
foriinurls:
wm =WorkerManager(2)
putRequestsO往其中添加任务。
人线程池中。
的线程并没有销毁，而在等待新的任务。因此，waitO之后仍然可以再次调用pool.
行结果队列的大小。
动对应 num_workers 的线程；q_size 表示任务请求队列的大小，resq_size 表示存放运
wm.add_job(download_file,i)
"https://www.createspace.com/3611970",
"http://wiki.python.org/moin/Documentation"
f.write(chunk)
if not chunk:break
#将所有请求加入队列中
#创建线程池
---
## Page 270
使用C语言实现相关函数功能后再使用Python进行包装。
的头文件中，在编写C代码的时候引人该头文件即可。来看一个简单的扩展例子。
Python方便地进行C/C++扩展，从而获得较优的执行性能。所有这些API却包含在Python.h
建议90：使用C/C++模块扩展提高性能
1）先用C实现相关函数：以实现素数判断为例，文件命名为 testextend.c。也可以直接
Python具有良好的可扩展性，利用Python提供的API，如宏、类型、函数等，可以让
include "Python.h"
pool.dismissWorkers(pool_size,do_join=True)
print
pool.wait()
pool.pol1()
pool.putRequest(threadpool.WorkRequest(download_file,args=["http://chrisarndt.
print"putting request to pool"
requests = threadpool.makeRequests(download_file，urls）#创建工作请求
pool =threadpool.ThreadPool(pool_size)
pool_size=2
urls=["http://wiki.python.org/moin/WebProgramming",
[pool.putRequest(req)for req in requests]
def download_file（url):
import threadpool
import
import
import urllib2
org/pypi/threadpool",1))
de/projects/threadpool/api/",]))
"destory all threads before exist"
int n,num;
time
os
fname =os.path.basename（url)+".html"
urlhandler = urllib2.urlopen(url)
print"begin download",url
return NULL;
with open(fname，
"https://www.createspace.com/3611970",
while True:
"http://wiki.python.org/moin/Documentation"
"wb")asf:
f.write(chunk)
chunk=urlhandler.read(1024)
#解析参数
#完成后退出
#处理任务队列中的新的请求
#将具体的请求放入线程池
#创建线程池，大小为2
第8章性能剖析与优化257
---
## Page 271
258
NOARGS。该结构体必须以{NULL,NULL,0,NULL}所表示的一条空记录来结尾。
与METH_KEYWORDS进行或运算。若不想接受任何参数，则可以将其设置为METH_
2）编写 setup.py脚本。
setup(name=
module =Extension('pr'，sources =
from distutils.core import setup,Extension
参数传递方法一般设置为METH_VARARGS，
口初始化函数：以便Python解释器能够对模块进行正确的初始化，初始化时要以init开
int ml_flags;
PyCFunction ml_meth;
structPyMethodDef(
9
口
上面的代码包含以下3部分。
void initpr(void){
static PyMethodDef PrMethods[]={
头，如initp。
char*ml_doc;
式和方法描述。看下面这个例子。
方法列表：提供给外部的Python程序使用的一个C模块函数名称映射表PrMethods。
ParseTupleO来获得这些参数值。
参数args中包含了Python解释器要传递给C函数的所有参数，通常使用函数PyArg_
导出函数：C模块对外暴露的接口函数pr_isprime，带有 self和 args 两个参数，其中
char*mlname;
是一个PyMethodDef结构体，其中成员依次表示方法名、导出函数、参数传递方
(void) Py_InitModule("pr",PrMethods);
return Py_BuildValue("i",1);
if(num1）{
or not.
'Pr test'，version
if (numon == 0） return Py_BuildValue("i", 0);
1;
return Py_BuildValue("i"，O)；#C类型的数据结构转换成 Python 对象
pr_isprime,
,METH_VARARGS, "check if an input number is prime
['testextend.c'])
，如果想传人关键字参数，则可以将其
#方法描述
#参数传递方法
#导出函数
#方法名
---
## Page 272
的C代码能够有非常高的执行效率。它的优势在于它几乎支持全部Python特性，也就是说，
如 Pyrex、Py2C 和Cython 等。而从 Pyrex发展而来的 Cython是其中的集大成者。
价的C/C++代码，从而获得性能提升。通过开发人员的艰苦工作，涌现出了一批这类工具，
C/C++版本，费时费力还容易出错。
无法快速编写代码，解决性能瓶颈。
代码获得性能提升。但是，这种方式仍然有几个问题让Pythonistas 非常头疼：
建议91：使用Cython编写扩展模块
路径添加到 sys.path中，就可以使用C扩展的模块了，如图8-8所示。
里面包含pr.so和pr.o文件，如图8-7所示。
-x8664-2.4/pr.80
dodu
所以整个Python社区都在努力实现一个“编译器”，它可以把Python代码直接编译成等
2）即便是C/C++熟手，重写代码也有非常多的工作，比如编写特定数据结构、算法的
Python-API让大家可以方便地使用C/C++编写扩展模块，从而通过重写应用中的瓶颈
更多关于C模块扩展的内容请读者参考http://docs.python.org/2/c-api/index.html。
4）将生成的文件 pr.so复制到 Python的 site_packages目录下，或者将 pr.so所在目录的
3）使用 python setup.py build进行编译，系统会在当前目录下生成一个build子目录，
dir(pr)
doc
extension
file
-fstack-protector
x86_64-2.4
图8-7使用Python进行编译
图8-8导人编译后的模块
name
'isPrine']
-pararn
ssp-but
build/lib.linux
第8章性能剖析与优化259
ne
---
## Page 273
260
import普通的Python模块一样使用它。
分部）如下：
的 arithmetic.py文件生成的C代码有两三千行。它的部分代码（subtract 函数对应的代码的一
arithmetic.c文件，它非常巨大，大概会有两三千行。是的，你没有看错，只有8行有效代码
到最低。除此之外，Cython支持使用decorator语法声明类型，甚至支持专门的类型声明文
基本上所有的Python代码都是有效的Cython代码，这使得将Cython技术引人项目的成本降
PyYAML等库都使用它编写自己的高效率版本。
件，以使原有的Python代码能够继续保持独立，这些特性都使它得到广泛应用，如PyAMF、
$python
又是一阵等待，编译、链接工作完成后，arithmethic.so文件就生成了。这时候可以像
>>>arithmetic.subtract(2,1)
>>>importarithmetic
看不懂？没有关系，机器生成的代码本来就不是为了给人看的，还是把它交给编译器吧。
编译时间有点漫长，稍作等待，Cython就自动安装好了。然后我们可以尝试拿之前的
pip install -U cython
安装Cython 非常简单，使用pip 能够很方便地安装。
static Pyobject
staticPyMethodDef
staticPyobject
Pyobject
int
PyObject
5
Pyx_RefNannySetupContext("subtract(wrapper)",O);
Pyobject*
static Pyobject**
Object*
★
pyx_v_y=
0；
，但其实生成了一个
---
## Page 274
一下子代码变化太大，只使用Cython的类型声明“技能”，看看能达到什么效果。
何通过Cython把原有代码的性能提升许多倍，是的，Cython就是这么快！
方便啊！掌握了Cython的基本使用方法之后，就可以更进一步学习了。接下来要谈的是如
pyximport。只要将原有的Python代码后缀名从.py改为-pyx即可。
在GIS中，经常需要计算地球表面上两点之间的距离。
import math
执行50万次大概需要：2.2秒，
print "Pure python function"，t.timeit(num)，"sec"
t=timeit.Timer("p1.great_circle（%f，&f，%f，%f)"%（1onl,latl,lon2,lat2），
num=500000
lon1,1at1,1on2,1at2=-72.345,34.323,-61.823,54.826
这段Python代码的执行效率可以通过timeit来确定。
def great_circle(lon1,lat1,lon2,lat2):
从_file_
$cp arithmetic.pyarithmetic.pyx
每一次都需要编译、等待未免麻烦，所以Cython很体贴地提供了无需显式编译的方案：
import timeit
import math
ImportError:No module namedarithmetic
Traceback （most recent call last):
>>>importarithmetic
$python
>>>arithmetic.
cd
cdef float a,b,theta,c
cdef float
cdef float pi =3.14159265
cdef float radius
radius=3956 #miles
import arithmetic
return radius*c
C
theta=
=
=math.pi/180.0
)
(90.0-1at2)*(x)
(90.0-lat1）*（x）
_属性可以看出，这个.pyx文件已经被编译链接为共享库了，pyximport的确
（lon2-lon1）*（x）
=pi/180.0
file
"import pl")
3956.0
，太慢了。接下来尝试使用Cython进行改写，为了避免
第8章性能剖析与优化261
---
## Page 275
262
使用Cython的方法方便得多，成本也更低。
一步参考Cython的文档，就可以尝试在项目中使用了。比起直接使用C/C++编写扩展模块，
timeit 测定这个版本的代码的效率仅需要大概0.4秒的时间，性能提升了5倍有余。
acosf等函数导人代码中。因为减少了Python函数调用和调用时产生的类型转换开销，使用
的另一个技能：直接调用C函数。
决，那就是：调用的 math 库是一个Python库，性能较差。解决这个问题，需要用到Cython
提速将近二成，说明类型声明对性能提升非常有帮助。这时候，还有一个性能瓶颈需要解
Python代码并无很大不同，业务逻辑代码一行没改。使用timeit的测定结果是大概1.8秒，
通过这个例子，可以掌握Cython的两大技能：类型声明和直接调用C函数。只要再进
Cython 使用cdef exterm from 语法，将 math.h这个C语言库头文件里声明的 cofs、sinf、
通过给 great_circle 函数的参数、
def
cdef extern from"math.h"
代码封装成.so模块给Python调用（类似boost.python/SWIG的功能），Cython社区已
除了使用Cython编写扩展模块提升性能之外，Cython也可用来把之前编写的C/C++
经开发了许多自动化工具。
return radius*c
theta=(1on2-lon1）*（x)
cdef float a,b,theta,c
cdef float x = pi/180.0
cdef float pi=3.14159265
cdef float radius = 3956.0
great_circle(float lon1,float lat1,float lon2,float lat2):
float acosf(float theta)
float sinf(float theta)
float cosf（float theta)
0
return radius*c
theta =（lon2-lonl)*（x)
= acosf((cosf(a)*cosf(b))+(sinf(a)*sinf(b)*cosf(theta)))
=（90.0-1at2）*（x）
=（90.0-1at1）*（x)
=(90.0-1at2)*(x)
=（90.0-1at1）*（x）
、中间变量增加类型声明，Cython代码看起来跟原有的
---