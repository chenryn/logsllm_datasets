private void drawingCanvas_Tapped(object sender,
TappedRoutedEventArgs e)
{
    ...
    if (mySquare is IColor)
    {
      IColor colorSquare = mySquare;
      colorSquare.SetColor(Colors.BlueViolet);
    }
}
This code tests the Square class to verify that it implements the IColor
interface; if it does, the code creates a reference to the Square class
through this interface and calls the SetColor method to set the color of
the Square object to Colors.BlueViolet.
Important You must call Draw before you call SetColor because
the SetColor method sets the color of the Square only if it has
Download from finelybook PI:EMAIL
462
already been rendered. If you invoke SetColor before Draw, the
color will not be set, and the Square object will not appear.
8. Return to the DrawingPad.xaml file in the Design View window and
then click the Canvas object.
9. In the list of events, locate the RightTapped event, and then double-click
the RightTapped text box.
This event occurs when the user taps, holds, and then releases from the
canvas by using his or her finger or clicks the right mouse button on the
canvas.
10. Add the following code shown below in bold to the
drawingCanvas_RightTapped method:
Click here to view code image
private void drawingCanvas_RightTapped(object sender,
RightTappedRoutedEventArgs e)
{
    Point mouseLocation = e.GetPosition(this.drawingCanvas);
    Circle myCircle = new Circle(100);
    if (myCircle is IDraw)
    {
        IDraw drawCircle = myCircle;
        drawCircle.SetLocation((int)mouseLocation.X,
(int)mouseLocation.Y);
        drawCircle.Draw(drawingCanvas);
    }
    if (myCircle is IColor)
    {
        IColor colorCircle = myCircle;
        colorCircle.SetColor(Colors.HotPink);
    }
}
The logic in this code is similar to the logic in the
drawingCanvas_Tapped method, except that this code draws and fills a
circle rather than a square.
11. On the Debug menu, click Start Debugging to build and run the
application.
Download from finelybook PI:EMAIL
463
12. When the Drawing Pad window opens, tap or click anywhere on the
canvas displayed in the window. A violet square should appear.
13. Tap, hold, and release, or right-click anywhere on the canvas. A pink
circle should appear. You can click the left and right mouse buttons any
number of times; each click will draw a square or circle at the mouse
position:
14. Return to Visual Studio and stop debugging.
Abstract classes
You can implement the ILandBound and IGrazable interfaces discussed
before the previous set of exercises in many different classes, depending on
how many different types of mammals you want to model in your C#
application. In situations such as this, it’s quite common for parts of the
derived classes to share common implementations. For example, the
duplication in the following two classes is obvious:
Click here to view code image
Download from finelybook PI:EMAIL
464
class Horse : Mammal, ILandBound, IGrazable
{
    ...
    void IGrazable.ChewGrass()
    {
        Console.WriteLine( "Chewing grass ");
        // code for chewing grass
    }
}
class Sheep : Mammal, ILandBound, IGrazable
{
    ...
    void IGrazable.ChewGrass()
    {
        Console.WriteLine( "Chewing grass ");
        // same code as horse for chewing grass
    }
}
Duplication in code is a warning sign. If possible, you should refactor the
code to avoid duplication and reduce any associated maintenance costs. One
way to achieve this refactoring is to put the common implementation into a
new class created specifically for this purpose. In effect, you can insert a new
class into the class hierarchy, as shown by the following code example:
Click here to view code image
class GrazingMammal : Mammal, IGrazable
{
    ...
    void IGrazable.ChewGrass()
    {
        // common code for chewing grass
        Console.WriteLine( "Chewing grass ");
    }
}
class Horse : GrazingMammal, ILandBound
{
    ...
}
class Sheep : GrazingMammal, ILandBound
{
    ...
}
This is a good solution, but there is one thing that is still not quite right:
Download from finelybook PI:EMAIL
465
you can actually create instances of the GrazingMammal class (and the
Mammal class, for that matter). This doesn’t really make sense. The
GrazingMammal class exists to provide a common default implementation.
Its sole purpose is to be a class from which to inherit. The GrazingMammal
class is an abstraction of common functionality rather than an entity in its
own right.
To declare that creating instances of a class is not allowed, you can
declare that the class is abstract by using the abstract keyword, such as in the
following example:
Click here to view code image
abstract class GrazingMammal : Mammal, IGrazable
{
   ...
}
If you now try to instantiate a GrazingMammal object, the code will not
compile:
Click here to view code image
GrazingMammal myGrazingMammal = new GrazingMammal(...); // illegal
Abstract methods
An abstract class can contain abstract methods. An abstract method is similar
in principle to a virtual method (covered in Chapter 12), except that it does
not contain a method body. A derived class must override this method. An
abstract method cannot be private. The following example defines the
DigestGrass method in the GrazingMammal class as an abstract method;
grazing mammals might use the same code for chewing grass, but they must
provide their own implementation of the DigestGrass method. An abstract
method is useful if it does not make sense to provide a default
implementation in the abstract class, but you want to ensure that an inheriting
class provides its own implementation of that method.
Click here to view code image
abstract class GrazingMammal : Mammal, IGrazable
{
    public abstract void DigestGrass();
    ...
Download from finelybook PI:EMAIL
466
}
Sealed classes
Using inheritance is not always easy and requires forethought. If you create
an interface or an abstract class, you are knowingly writing something that
will be inherited from in the future. The trouble is that predicting the future is
a difficult business. With practice and experience, you can develop the skills
to craft a flexible, easy-to-use hierarchy of interfaces, abstract classes, and
classes, but it takes effort, and you also need a solid understanding of the
problem that you are modeling. To put it another way, unless you consciously
design a class with the intention of using it as a base class, it’s extremely
unlikely that it will function well as a base class. With C#, you can use the
sealed keyword to prevent a class from being used as a base class if you
decide that it should not be. For example:
Click here to view code image
sealed class Horse : GrazingMammal, ILandBound
{
    ...
}
If any class attempts to use Horse as a base class, a compile-time error
will be generated. Note that a sealed class cannot declare any virtual methods
and that an abstract class cannot be sealed.
Sealed methods
You can also use the sealed keyword to declare that an individual method in
an unsealed class is sealed. This means that a derived class cannot override
this method. You can seal only a method declared with the override keyword,
and you declare the method as sealed override. You can think of the
interface, virtual, override, and sealed keywords as follows:
An interface introduces the name of a method.
A virtual method is the first implementation of a method.
An override method is another implementation of a method.
A sealed method is the last implementation of a method.
Download from finelybook PI:EMAIL
467
Implementing and using an abstract class
The following exercises use an abstract class to rationalize some of the code
that you developed in the previous exercise. The Square and Circle classes
contain a high proportion of duplicate code. It makes sense to factor this code
into an abstract class called DrawingShape because this will help to ease
maintenance of the Square and Circle classes in the future.
Create the DrawingShape abstract class
1. Return to the Drawing project in Visual Studio.
Note A finished working copy of the previous exercise is available
in the Drawing project, which is located in the \Microsoft
Press\VCSBS\Chapter 13\Drawing - Complete folder in your
Documents folder.
2. In Solution Explorer, click the Drawing project in the Drawing solution.
On the Project menu, click Add Class.
The Add New Item—Drawing dialog box opens.
3. In the Name box, type DrawingShape.cs, and then click Add.
Visual Studio creates the class and displays it in the Code and Text
Editor window.
4. In the DrawingShape.cs file, at the list at the top of the file, add the
following using directives:
Click here to view code image
using Windows.UI;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Shapes;
using Windows.UI.Xaml.Controls;
The purpose of this class is to contain the code common to the Circle
Download from finelybook PI:EMAIL
468
and Square classes. A program should not be able to instantiate a
DrawingShape object directly.
5. Modify the definition of the DrawingShape class to declare it as
abstract, as shown here in bold:
Click here to view code image
abstract class DrawingShape
{
}
6. Add the following private variables shown in bold to the DrawingShape
class:
Click here to view code image
abstract class DrawingShape
{
    protected int size;
    protected int locX = 0, locY = 0;
    protected Shape shape = null;
}
The Square and Circle classes both use the locX and locY fields to
specify the location of the object on the canvas so that you can move
these fields to the abstract class. Similarly, the Square and Circle classes
both use a field to indicate the size of the object when it was rendered;
although it has a different name in each class (sideLength and diameter),
semantically the field performs the same task in both classes. The name
size is a good abstraction of the purpose of this field.
Internally, the Square class uses a Rectangle object to render itself on
the canvas, and the Circle class uses an Ellipse object. Both of these
classes are part of a hierarchy based on the abstract Shape class in the
.NET Framework. The DrawingShape class uses a Shape field to
represent both of these types.
7. Add the following constructor to the DrawingShape class:
Click here to view code image
abstract class DrawingShape
{
    ...
    public DrawingShape(int size)
Download from finelybook PI:EMAIL
469
    {
        this.size = size;
    }
}
This code initializes the size field in the DrawingShape object.
8. Add the SetLocation and SetColor methods to the DrawingShape class,
as shown in bold in the code that follows. These methods provide
implementations that are inherited by all classes that derive from the
DrawingShape class. Notice that they are not marked as virtual, and a
derived class is not expected to override them. Also, the DrawingShape
class is not declared as implementing the IDraw or IColor interfaces
(interface implementation is a feature of the Square and Circle classes
and not this abstract class), so these methods are simply declared as
public.
Click here to view code image
abstract class DrawingShape
{
    ...
    public void SetLocation(int xCoord, int yCoord)
    {
        this.locX = xCoord;
        this.locY = yCoord;
    }
    public void SetColor(Color color)
    {
        if (this.shape != null)
        {
            SolidColorBrush brush = new SolidColorBrush(color);
            this.shape.Fill = brush;
        }
    }
}
9. Add the Draw method to the DrawingShape class. Unlike the previous
methods, this method is declared as virtual, and any derived classes are
expected to override it to extend the functionality. The code in this
method verifies that the shape field is not null and then draws it on the
canvas. The classes that inherit this method must provide their own code
to instantiate the shape object. (Remember that the Square class creates
a Rectangle object and the Circle class creates an Ellipse object.)
Download from finelybook PI:EMAIL
470
Click here to view code image
abstract class DrawingShape
{
    ...
    public virtual void Draw(Canvas canvas)
    {
        if (this.shape == null)
        {
            throw new InvalidOperationException("Shape is null
");
        }
        this.shape.Height = this.size;
        this.shape.Width = this.size;
        Canvas.SetTop(this.shape, this.locY);
        Canvas.SetLeft(this.shape, this.locX);
        canvas.Children.Add(this.shape);
    }
}
You have now completed the DrawingShape abstract class. The next steps
are to change the Square and Circle classes so that they inherit from this class
and then to remove the duplicated code from the Square and Circle classes.
Modify the Square and Circle classes to inherit from the DrawingShape
class
1. Display the code for the Square class in the Code and Text Editor
window.
2. Modify the definition of the Square class so that it inherits from the
DrawingShape class in addition to implementing the IDraw and IColor
interfaces.
Click here to view code image
class Square : DrawingShape, IDraw, IColor
{
    ...
}
Notice that you must specify the class that the Square class inherits from
before any interfaces that it implements.
3. In the Square class, remove the definitions of the sideLength, rect, locX,
and locY fields. These fields are no longer necessary because they are
Download from finelybook PI:EMAIL
471
now provided by the DrawingShape class.
4. Replace the existing constructor with the following code shown in bold,
which calls the constructor in the base class:
Click here to view code image
class Square : DrawingShape, IDraw, IColor
{
    public Square(int sideLength)
        :base(sideLength)
    {
    }
    ...
}
Notice that the body of this constructor is empty because the base class
constructor performs all the initialization required.
5. Remove the IDraw.SetLocation and IColor.SetColor methods from the
Square class. The DrawingShape class provides the implementation of
these methods.
6. Modify the definition of the Draw method. Declare it with public
override and also remove the reference to the IDraw interface. Again,
the DrawingShape class already provides the base functionality for this
method, but you will extend it with the specific code required by the
Square class.
Click here to view code image
public override void Draw(Canvas canvas)
{
    ...
}
7. Replace the body of the Draw method with the code shown here in bold:
Click here to view code image
public override void Draw(Canvas canvas)
{
    if (this.shape != null)
    {
        canvas.Children.Remove(this.shape);
    }
    else
    {
Download from finelybook PI:EMAIL
472
        this.shape = new Rectangle();
    }
    base.Draw(canvas);
}
These statements instantiate the shape field inherited from the
DrawingShape class as a new instance of the Rectangle class if it has not
already been instantiated. They then call the Draw method in the
DrawingShape class.
8. Repeat steps 2 through 7 for the Circle class, except that the constructor
should be called Circle with a parameter called diameter, and in the
Draw method, you should instantiate the shape field as a new Ellipse
object. The complete code for the Circle class should look like this:
Click here to view code image
class Circle : DrawingShape, IDraw, IColor
{
    public Circle(int diameter)
        :base(diameter)
    {
    }
    public override void Draw(Canvas canvas)
    {
        if (this.shape != null)
        {
            canvas.Children.Remove(this.shape);
        }
        else
        {
            this.shape = new Ellipse();
        }
        base.Draw(canvas);
    }
}
9. On the Debug menu, click Start Debugging. When the Drawing Pad
window opens, verify that Square objects appear when you left-click in
the window, and Circle objects appear when you right-click in the
window. The application should behave the same as before.
10. Return to Visual Studio and stop debugging.
Download from finelybook PI:EMAIL
473
Compatibility with the Windows Runtime revisited
Chapter 9, “Creating value types with enumerations and structures,”
describes how the Windows platform from Windows 8 onward
implements the Windows Runtime (WinRT) as a layer on top of the
native Windows APIs, providing a simplified programming interface
for developers building unmanaged applications. (An unmanaged
application is an application that does not run by using the .NET
Framework; you build them by using a language such as C++ rather
than C#). Managed applications use the common language runtime
(CLR) to run .NET Framework applications. The .NET Framework
provides an extensive set of libraries and features. On Windows 7 and
earlier versions, the CLR implements these features by using the native
Windows APIs. If you are building desktop or enterprise applications
and services on Windows 10, this same feature set is still available
(although the .NET Framework itself has been upgraded to version
4.6.1), and any C# applications that work on Windows 7 should run
unchanged on Windows 10.
On Windows 10, UWP apps always run by using WinRT. This
means that if you are building UWP apps by using a managed language