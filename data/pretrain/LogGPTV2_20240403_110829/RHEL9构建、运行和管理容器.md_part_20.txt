    -   要删除与其有多个名称（标记）关联的镜像，请添加 `-f`{.literal}
        选项来删除它们：
        ``` literallayout
        # buildah rmi -f localhost/ubi-micro-httpd
        ```
    :::
:::
::: itemizedlist
**验证**
-   确保镜像已被删除：
    ``` literallayout
    # buildah images
    ```
:::
::: itemizedlist
**其他资源**
-   `buildah-rmi`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_removing-containers-with-buildah_assembly_building-container-images-with-buildah}使用 Buildah 删除容器 {.title}
:::
使用 `buildah rm`{.literal} 命令删除容器。您可以使用容器 ID
或名称来指定要移除的容器。
::: itemizedlist
**先决条件**
-   至少一个容器已经停止。
:::
::: orderedlist
**流程**
1.  列出所有容器：
    ``` literallayout
    # buildah containers
    CONTAINER ID  BUILDER  IMAGE ID     IMAGE NAME                       CONTAINER NAME
    05387e29ab93     *     c37e14066ac7 docker.io/library/myecho:latest  myecho-working-container
    ```
2.  删除 myecho-working-container 容器：
    ``` literallayout
    # buildah rm myecho-working-container
    05387e29ab93151cf52e9c85c573f3e8ab64af1592b1ff9315db8a10a77d7c22
    ```
:::
::: itemizedlist
**验证**
-   确保容器已被删除：
    ``` literallayout
    # buildah containers
    ```
:::
::: itemizedlist
**其他资源**
-   `buildah-rm`{.literal} 手册页
:::
:::
:::
[]{#assembly_monitoring-containers_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_monitoring-containers_building-running-and-managing-containers.html#assembly_monitoring-containers_building-running-and-managing-containers}第 14 章 监控容器 {.title}
:::
本章重点介绍了一些允许您管理 Podman 环境的有用的 Podman
命令，包括确定容器的健康状况、显示系统和pod 信息，以及监控 Podman 事件。
::: section
::: titlepage
# []{#assembly_monitoring-containers_building-running-and-managing-containers.html#proc_performing-a-healthcheck-on-a-container_assembly_monitoring-containers}在容器上执行健康检查 {.title}
:::
通过健康检查，您可以确定容器中运行的进程的健康状态或就绪状态。健康检查由五个基本组件组成：
::: itemizedlist
-   Command（命令）
-   Retries（重试）
-   Interval（间隔）
-   Start-period（开始期间）
-   Timeout（超时）
:::
对健康检查组件的描述如下。
::: variablelist
[Command（命令）]{.term}
:   Podman 在目标容器内执行命令并等待退出代码。
:::
其他四个组件与健康检查的调度相关，它们是可选的。
::: variablelist
[Retries（重试）]{.term}
:   定义容器标记为\"unhealthy\"之前需要进行的连续失败的健康检查的数量。成功健康检查会重置重试计数器。
[Interval（间隔）]{.term}
:   描述运行 healthcheck
    命令之间的时间。请注意：小的间隔会导致系统花费很多时间运行健康检查。间隔时间太长会导致难以捕捉超时。
[Start-period（开始期间）]{.term}
:   描述容器启动和要忽略健康检查失败的时间间隔。
[Timeout（超时）]{.term}
:   描述健康检查在被视为不成功之前必须完成的时间段。
:::
在容器内运行监控检查。只有在您知道什么是服务的健康状况，并且能够区分成功和不成功健康检查时，健康检查才有意义。
::: orderedlist
**流程**
1.  定义健康检查：
    ``` literallayout
    $ podman run -dt --name hc1 -p 8080:8080  --health-cmd='curl http://localhost:8080 || exit 1' --health-interval=0 registry.access.redhat.com/ubi8/httpd-24
    ```
    ::: itemizedlist
    -   `--health-cmd`{.literal} 选项为容器设置健康检查命令。
    -   值为 0 的 `-health-interval=0`{.literal}
        选项表示您要手动运行健康检查。
    :::
2.  手动运行健康检查：
    ``` screen
    $ podman healthcheck run hc1
    Healthy
    ```
3.  另外，您可以检查最后一个命令的退出状态：
    ``` screen
    $ echo $?
    0
    ```
    \"0\" 值意味着成功。
:::
::: itemizedlist
**其他资源**
-   `man podman-run`{.literal}
-   [使用 Podman
    监控容器生命力和可用性](https://developers.redhat.com/blog/2019/04/18/monitoring-container-vitality-and-availability-with-podman){.link}
    的文章
:::
:::
::: section
::: titlepage
# []{#assembly_monitoring-containers_building-running-and-managing-containers.html#proc_displaying-podman-system-information_assembly_monitoring-containers}显示 Podman 系统信息 {.title}
:::
`podman system`{.literal} 命令允许您管理 Podman 系统。本节介绍如何显示
Podman 系统信息。
::: itemizedlist
**流程**
-   显示 Podman 系统信息：
    ::: itemizedlist
    -   要显示 Podman 磁盘用量，请输入：
        ``` literallayout
        $ podman system df
        TYPE           TOTAL       ACTIVE      SIZE        RECLAIMABLE
        Images         3           2           1.085GB     233.4MB (0%)
        Containers     2           0           28.17kB     28.17kB (100%)
        Local Volumes  3           0           0B          0B (0%)
        ```
    -   要显示使用空间的详细信息，请输入：
        ``` literallayout
        $ podman system df -v
        Images space usage:
        REPOSITORY                                TAG         IMAGE ID      CREATED     SIZE        SHARED SIZE  UNIQUE SIZE  CONTAINERS
        registry.access.redhat.com/ubi8           latest      b1e63aaae5cf  13 days     233.4MB     233.4MB      0B           0
        registry.access.redhat.com/ubi8/httpd-24  latest      0d04740850e8  13 days     461.5MB     0B           461.5MB      1
        registry.redhat.io/rhel8/podman           latest      dce10f591a2d  13 days     390.6MB     233.4MB      157.2MB      1
        Containers space usage:
        CONTAINER ID  IMAGE         COMMAND                     LOCAL VOLUMES  SIZE        CREATED     STATUS      NAMES
        311180ab99fb  0d04740850e8  /usr/bin/run-httpd          0              28.17kB     16 hours    exited      hc1
        bedb6c287ed6  dce10f591a2d  podman run ubi8 echo hello  0              0B          11 hours    configured  dazzling_tu
        Local Volumes space usage:
        VOLUME NAME                                                       LINKS       SIZE
        76de0efa83a3dae1a388b9e9e67161d28187e093955df185ea228ad0b3e435d0  0           0B
        8a1b4658aecc9ff38711a2c7f2da6de192c5b1e753bb7e3b25e9bf3bb7da8b13  0           0B
        d9cab4f6ccbcf2ac3cd750d2efff9d2b0f29411d430a119210dd242e8be20e26  0           0B
        ```
    -   要显示主机、当前存储统计和 Podman 构建的信息，请输入：
        ``` literallayout
        $ podman system info
        host:
          arch: amd64
          buildahVersion: 1.22.3
          cgroupControllers: []
          cgroupManager: cgroupfs
          cgroupVersion: v1
          conmon:
            package: conmon-2.0.29-1.module+el8.5.0+12381+e822eb26.x86_64
            path: /usr/bin/conmon
            version: 'conmon version 2.0.29, commit: 7d0fa63455025991c2fc641da85922fde889c91b'
          cpus: 2
          distribution:
            distribution: '"rhel"'
            version: "8.5"
          eventLogger: file
          hostname: localhost.localdomain
          idMappings:
            gidmap:
            - container_id: 0
              host_id: 1000
              size: 1
            - container_id: 1
              host_id: 100000
              size: 65536
            uidmap:
            - container_id: 0
              host_id: 1000
              size: 1
            - container_id: 1
              host_id: 100000
              size: 65536
          kernel: 4.18.0-323.el8.x86_64
          linkmode: dynamic
          memFree: 352288768
          memTotal: 2819129344
          ociRuntime:
            name: runc
            package: runc-1.0.2-1.module+el8.5.0+12381+e822eb26.x86_64
            path: /usr/bin/runc
            version: |-
              runc version 1.0.2
              spec: 1.0.2-dev
              go: go1.16.7
              libseccomp: 2.5.1
          os: linux
          remoteSocket:
            path: /run/user/1000/podman/podman.sock
          security:
            apparmorEnabled: false
            capabilities: CAP_NET_RAW,CAP_CHOWN,CAP_DAC_OVERRIDE,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_NET_BIND_SERVICE,CAP_SETFCAP,CAP_SETGID,CAP_SETPCAP,CAP_SETUID,CAP_SYS_CHROOT
            rootless: true
            seccompEnabled: true
            seccompProfilePath: /usr/share/containers/seccomp.json
            selinuxEnabled: true
          serviceIsRemote: false
          slirp4netns:
            executable: /usr/bin/slirp4netns
            package: slirp4netns-1.1.8-1.module+el8.5.0+12381+e822eb26.x86_64
            version: |-
              slirp4netns version 1.1.8
              commit: d361001f495417b880f20329121e3aa431a8f90f
              libslirp: 4.4.0
              SLIRP_CONFIG_VERSION_MAX: 3
              libseccomp: 2.5.1
          swapFree: 3113668608
          swapTotal: 3124752384
          uptime: 11h 24m 12.52s (Approximately 0.46 days)
        registries:
          search:
          - registry.fedoraproject.org
          - registry.access.redhat.com
          - registry.centos.org
          - docker.io
        store:
          configFile: /home/user/.config/containers/storage.conf
          containerStore:
            number: 2
            paused: 0
            running: 0
            stopped: 2
          graphDriverName: overlay
          graphOptions:
            overlay.mount_program:
              Executable: /usr/bin/fuse-overlayfs
              Package: fuse-overlayfs-1.7.1-1.module+el8.5.0+12381+e822eb26.x86_64
              Version: |-
                fusermount3 version: 3.2.1
                fuse-overlayfs: version 1.7.1
                FUSE library version 3.2.1
                using FUSE kernel interface version 7.26
          graphRoot: /home/user/.local/share/containers/storage
          graphStatus:
            Backing Filesystem: xfs
            Native Overlay Diff: "false"
            Supports d_type: "true"
            Using metacopy: "false"
          imageStore:
            number: 3
          runRoot: /run/user/1000/containers
          volumePath: /home/user/.local/share/containers/storage/volumes
        version:
          APIVersion: 3.3.1
          Built: 1630360721
          BuiltTime: Mon Aug 30 23:58:41 2021
          GitCommit: ""
          GoVersion: go1.16.7
          OsArch: linux/amd64
          Version: 3.3.1
        ```
    -   要删除所有未使用的容器、镜像和卷数据，请输入：
        ``` literallayout
        $ podman system prune
        WARNING! This will remove:
                - all stopped containers
                - all stopped pods
                - all dangling images
                - all build cache
        Are you sure you want to continue? [y/N] y
        ```
        ::: itemizedlist
        -   `podman system prune`{.literal}
            命令删除所有未使用的容器（悬停和未引用的）、pod
            以及可选的来自本地存储的卷。
        -   使用 `--all`{.literal}
            选项删除所有未使用的镜像。未使用的镜像是悬停的镜像，以及没有任何容器基于该镜像的镜像。
        -   使用 `--volume`{.literal}
            选项来修剪卷。默认情况下，如果没有容器使用该卷，也不会删除卷以防止重要数据被删除。
        :::
    :::
:::
::: itemizedlist
**其他资源**
-   `man podman-system-df`{.literal}
-   `man podman-system-info`{.literal}
-   `man podman-system-prune`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_monitoring-containers_building-running-and-managing-containers.html#con_podman-event-types_assembly_monitoring-containers}podman 事件类型 {.title}
:::
您可以监控 Podman
中发生的事件。存在多个事件类型，每个事件类型都会报告不同的状态。
[*容器*]{.emphasis}事件类型会报告以下状态：
::: itemizedlist
-   attach
-   checkpoint
-   cleanup
-   commit
-   create
-   exec
-   export
-   import
-   init
-   kill
-   mount
-   pause
-   prune