## MESA 模型在管程的发展史上，先后出现过三种不同的管程模型，分别是：Hasen模型、Hoare 模型和 MESA 模型。其中，现在广泛应用的是 MESA 模型，并且Java 管程的实现参考的也是 MESA 模型。所以今天我们重点介绍一下 MESA模型。在并发编程领域，有两大核心问题：一个是**互斥**，即同一时刻只允许一个线程访问共享资源；另一个是**同步**，即线程之间如何通信、协作。这两大问题，管程都是能够解决的。我们先来看看管程是如何解决**互斥**问题的。管程解决互斥问题的思路很简单，就是将共享变量及其对共享变量的操作统一封装起来。在下图中，管程X 将共享变量 queue 这个队列和相关的操作入队 enq()、出队 deq()都封装起来了；线程 A 和线程 B 如果想访问共享变量queue，只能通过调用管程提供的 enq()、deq() 方法来实现；enq()、deq()保证互斥性，只允许一个线程进入管程。不知你有没有发现，管程模型和面向对象高度契合的。估计这也是Java选择管程的原因吧。而我在前面章节介绍的互斥锁用法，其背后的模型其实就是它。![](Images/d764ad186dc9985a0693087aa0ddbcf7.png){savepage-src="https://static001.geekbang.org/resource/image/59/c4/592e33c4339c443728cdf82ab3d318c4.png"}```{=html}```管程模型的代码化语义]{.reference}```{=html}```那管程如何解决线程间的**同步**问题呢？这个就比较复杂了，不过你可以借鉴一下我们曾经提到过的就医流程，它可以帮助你快速地理解这个问题。为进一步便于你理解，在下面，我展示了一幅MESA 管程模型示意图，它详细描述了 MESA 模型的主要组成部分。在管程模型里，共享变量和对共享变量的操作是被封装起来的，图中最外层的框就代表封装的意思。框的上面只有一个入口，并且在入口旁边还有一个入口等待队列。当多个线程同时试图进入管程内部时，只允许一个线程进入，其他线程则在入口等待队列中等待。这个过程类似就医流程的分诊，只允许一个患者就诊，其他患者都在门口等待。管程里还引入了条件变量的概念，而且**每个条件变量都对应有一个等待队列**，如下图，条件变量A 和条件变量 B 分别都有自己的等待队列。![](Images/59734caf26e3bc9ab207d0976b709c6f.png){savepage-src="https://static001.geekbang.org/resource/image/83/65/839377608f47e7b3b9c79b8fad144065.png"}```{=html}```MESA 管程模型]{.reference}```{=html}```那条件变量和等待队列的作用是什么呢？其实就是解决线程同步问题。你也可以结合上面提到的入队出队例子加深一下理解。假设有个线程 T1执行出队操作，不过需要注意的是执行出队操作，有个前提条件，就是队列不能是空的，而队列不空这个前提条件就是管程里的条件变量。如果线程 T1进入管程后恰好发现队列是空的，那怎么办呢？等待啊，去哪里等呢？就去条件变量对应的等待队列里面等。此时线程T1就去"队列不空"这个条件变量的等待队列中等待。这个过程类似于大夫发现你要去验个血，于是给你开了个验血的单子，你呢就去验血的队伍里排队。线程T1进入条件变量的等待队列后，是允许其他线程进入管程的。这和你去验血的时候，医生可以给其他患者诊治，道理都是一样的。再假设之后另外一个线程 T2执行入队操作，入队操作执行成功之后，"队列不空"这个条件对于线程 T1来说已经满足了，此时线程 T2 要通知T1，告诉它需要的条件已经满足了。当线程 T1得到通知后，会从等待队列里面出来，但是出来之后不是马上执行，而是重新进入到入口等待队列里面。这个过程类似你验血完，回来找大夫，需要重新分诊。条件变量及其等待队列我们讲清楚了，下面再说说wait()、notify()、notifyAll() 这三个操作。前面提到线程 T1发现"队列不空"这个条件不满足，需要进到对应的等待队列里等待。这个过程就是通过调用wait() 来实现的。如果我们用对象 A 代表"队列不空"这个条件，那么线程 T1需要调用 A.wait()。同理当"队列不空"这个条件满足时，线程 T2 需要调用A.notify() 来通知 A 等待队列中的一个线程，此时这个队列里面只有线程T1。至于 notifyAll() 这个方法，它可以通知等待队列中的所有线程。这里我还是来一段代码再次说明一下吧。下面的代码实现的是一个阻塞队列，阻塞队列有两个操作分别是入队和出队，这两个方法都是先获取互斥锁，类比管程模型中的入口。1.  对于入队操作，如果队列已满，就需要等待直到队列不满，所以这里用了`notFull.await();`。2.  对于出队操作，如果队列为空，就需要等待直到队列不空，所以就用了`notEmpty.await();`。3.  如果入队成功，那么队列就不空了，就需要通知条件变量：队列不空`notEmpty`对应的等待队列。4.  如果出队成功，那就队列就不满了，就需要通知条件变量：队列不满`notFull`对应的等待队列。```{=html}```    public class BlockedQueue{  final Lock lock =    new ReentrantLock();  // 条件变量：队列不满    final Condition notFull =    lock.newCondition();  // 条件变量：队列不空    final Condition notEmpty =    lock.newCondition();   // 入队  void enq(T x) {    lock.lock();    try {      while (队列已满){        // 等待队列不满         notFull.await();      }        // 省略入队操作...      // 入队后, 通知可出队      notEmpty.signal();    }finally {      lock.unlock();    }  }  // 出队  void deq(){    lock.lock();    try {      while (队列已空){        // 等待队列不空        notEmpty.await();      }      // 省略出队操作...      // 出队后，通知可入队      notFull.signal();    }finally {      lock.unlock();    }    }}在这段示例代码中，我们用了 Java 并发包里面的 Lock 和Condition，如果你看着吃力，也没关系，后面我们还会详细介绍，这个例子只是先让你明白条件变量及其等待队列是怎么回事。需要注意的是：**await()和前面我们提到的 wait() 语义是一样的；signal() 和前面我们提到的 notify()语义是一样的**。
## wait() 的正确姿势但是有一点，需要再次提醒，对于 MESA管程来说，有一个编程范式，就是需要在一个 while 循环里面调用wait()。**这个是 MESA 管程特有的**。    while(条件不满足) {  wait();}Hasen 模型、Hoare 模型和 MESA模型的一个核心区别就是当条件满足后，如何通知相关线程。管程要求同一时刻只允许一个线程执行，那当线程T2 的操作使线程 T1 等待的条件满足时，T1 和 T2 究竟谁可以执行呢？1.  Hasen 模型里面，要求 notify() 放在代码的最后，这样 T2 通知完 T1    后，T2 就结束了，然后 T1    再执行，这样就能保证同一时刻只有一个线程执行。2.  Hoare 模型里面，T2 通知完 T1 后，T2 阻塞，T1 马上执行；等 T1    执行完，再唤醒 T2，也能保证同一时刻只有一个线程执行。但是相比 Hasen    模型，T2 多了一次阻塞唤醒操作。3.  MESA 管程里面，T2 通知完 T1 后，T2 还是会接着执行，T1    并不立即执行，仅仅是从条件变量的等待队列进到入口等待队列里面。这样做的好处是    notify() 不用放到代码的最后，T2    也没有多余的阻塞唤醒操作。但是也有个副作用，就是当 T1    再次执行的时候，可能曾经满足的条件，现在已经不满足了，所以需要以循环方式检验条件变量。
## notify() 何时可以使用还有一个需要注意的地方，就是 notify() 和 notifyAll()的使用，前面章节，我曾经介绍过，**除非经过深思熟虑，否则尽量使用notifyAll()**。那什么时候可以使用 notify() 呢？需要满足以下三个条件：1.  所有等待线程拥有相同的等待条件；2.  所有等待线程被唤醒后，执行相同的操作；3.  只需要唤醒一个线程。比如上面阻塞队列的例子中，对于"队列不满"这个条件变量，其阻塞队列里的线程都是在等待"队列不满"这个条件，反映在代码里就是下面这3 行代码。对所有等待线程来说，都是执行这 3 行代码，**重点是 while里面的等待条件是完全相同的**。    while (队列已满){  // 等待队列不满  notFull.await();}所有等待线程被唤醒后执行的操作也是相同的，都是下面这几行：    // 省略入队操作...// 入队后, 通知可出队notEmpty.signal();同时也满足第 3 条，只需要唤醒一个线程。所以上面阻塞队列的代码，使用signal() 是可以的。
## 总结Java 参考了 MESA 模型，语言内置的管程（synchronized）对 MESA模型进行了精简。MESA 模型中，条件变量可以有多个，Java语言内置的管程里只有一个条件变量。具体如下图所示。![](Images/e78da693aa84c350e12e80c9ffe1153d.png){savepage-src="https://static001.geekbang.org/resource/image/57/fa/57e4d94e90226b70be3d57024f5333fa.png"}```{=html}```Java 中的管程示意图]{.reference}```{=html}```Java 内置的管程方案（synchronized）使用简单，synchronized关键字修饰的代码块，在编译期会自动生成相关加锁和解锁的代码，但是仅支持一个条件变量；而Java SDK并发包实现的管程支持多个条件变量，不过并发包里的锁，需要开发人员自己进行加锁和解锁操作。并发编程里两大核心问题------互斥和同步，都可以由管程来帮你解决。学好管程，理论上所有的并发问题你都可以解决，并且很多并发工具类底层都是管程实现的，所以学好管程，就是相当于掌握了一把并发编程的万能钥匙。
## 课后思考wait() 方法，在 Hasen 模型和 Hoare 模型里面，都是没有参数的，而在 MESA模型里面，增加了超时参数，你觉得这个参数有必要吗？欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。![](Images/f2ae29f2a91a0266d9d86db774df526d.png){savepage-src="https://static001.geekbang.org/resource/image/cf/aa/cf393cd748a4f0e6451807c4b61843aa.jpg"}
# 09 \| Java线程（上）：Java线程的生命周期在 Java领域，实现并发程序的主要手段就是多线程。线程是操作系统里的一个概念，虽然各种不同的开发语言如Java、C
# 等都对其进行了封装，但是万变不离操作系统。Java语言里的线程本质上就是操作系统的线程，它们是一一对应的。在操作系统层面，线程也有"生老病死"，专业的说法叫有生命周期。对于有生命周期的事物，要学好它，思路非常简单，只要能搞懂**生命周期中各个节点的状态转换机制**就可以了。虽然不同的开发语言对于操作系统线程进行了不同的封装，但是对于线程的生命周期这部分，基本上是雷同的。所以，我们可以先来了解一下通用的线程生命周期模型，这部分内容也适用于很多其他编程语言；然后再详细有针对性地学习一下Java 中线程的生命周期。