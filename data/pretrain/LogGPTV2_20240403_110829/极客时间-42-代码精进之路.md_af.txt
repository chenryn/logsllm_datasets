## Java 命名规范一段代码，是不是只能使用一种命名方法？一般来说，一个编码规范会组合使用这些命名方法，每一种命名方法都被规定了适用的范围。这样就形成了命名规范。比如，Java 的命名规范可以使用下表来表示。![](Images/d3191bd16b48964540d2706588c474cb.png){savepage-src="https://static001.geekbang.org/resource/image/19/b1/19cd98970ceceaed8247a586ba3895b1.png"}需要注意的是，常量必须是真的不能改变的量，不打算改变或者能够改变的量都不能算作常量。比如，下面的例子声明的是常量：    static final short MAX_VALUE = 32767;static final Set EMPTY_NAMES =        Collections.unmodifiableSet(Collections.emptySet());下面的例子声明的就不是常量，它们的值都可以改变：    static short nonFinalShort = 32767;static final Set mutableNames = Collections.emptySet();static final String[] names = { "Alice", "Bob", "Tom" };需要注意的是，方法标识符使用动词或者动词短语，这是传统的方法命名。如果能够分隔开配置（set）和使用（get），使用名词的方法标识符。比如Builder 模式的接口设计。这个接口设计和命名惯例，我们以后再讨论。
## 怎么取好名字？了解了命名方法后，你是不是想知道怎么取好名字呢？一般来说，给代码取名字，需要遵守如下三条原则。**1. 要有准确的意义**名字要能够准确、完整地表达出它代表的意义，可以见字知意，名副其实。比如，表达式"a = b -c"的语法是没有什么问题，可是该表达式代表的实际含义并不清楚。相比而言，"grossIncome= grossRevene -costOfGoodsSold"就有很准确、清晰的现实意义。这样的命名更容易阅读和理解。![](Images/b5faa1af9c50231a06d2aa11509bb2fc.png){savepage-src="https://static001.geekbang.org/resource/image/07/43/077720a9965c6daf354a3bc2518e4843.png"}**2. 严格遵守命名规范**不同的编程环境，偏爱不同的命名规范，比如 Java 倾向于使用驼峰命名法，C语言倾向于使用蛇形命名法，CSS 使用串式命名法。尽管如此，如果定义了个性化的命名规范，请严格遵守自定义的命名规范，如果没有定义个性化的命名规范，我们就需要严格遵守业界普遍公认的命名规范。![](Images/0dddcb8673a7113898e958deb38095bb.png){savepage-src="https://static001.geekbang.org/resource/image/75/e3/7510f9e45dffa6664c410d0e72b534e3.png"}\**3. 可读性优先**名字的可读性一定要优先考虑，一般需要注意以下几点。-   可读性强的名字优先于简短的名字，尽量使用完整的词汇。-   不要使用缩写、简写、缩略词，除非这些词语被广泛使用。-   不要使用太短的名字，比如一个字母，除非是广泛接受的特例（i/j/k/m/n    表示临时使用的整数，c/d/e 表示临时使用的字符）。-   避免含糊、混淆或者误导。另外，不要混合使用英文和汉语拼音。由于很多类库使用的是英文，如果使用汉语拼音命名，会造成事实上的拼音名字与英文名字的混用，所以也要尽量避免使用拼音命名。![](Images/5b22496ad0dee3cc89acdbaf4a172c2b.png){savepage-src="https://static001.geekbang.org/resource/image/99/16/99fbf25bc5c0aedb88cefe76c67d7816.png"}
## 小结简言之，取名字要做到"信、达、雅"（准确、直观、优美）。"信"和"达"是基本要求，有才气的你可以有"雅"的追求。取好名字是编写优秀代码最基础也是最重要的一项修炼。你不妨试试上述的原则和规范，将它们用于新代码，或者整理老代码。仅仅因为名字的优化，你就会立刻感受到代码质量的大幅度提升！
## 一起来动手所以为了让你更好地实践，我找了一段 Java代码。你来试试，这段代码中有哪些名字可以优化？欢迎你把优化的代码发在评论里，我们亲自感受下如何优化代码名字。    import java.util.HashMap;import java.util.Map; class Solution {    /**     * Given an array of integers, return indices of the two numbers     * such that they add up to a specific target.     */    public int[] twoSum(int[] nums, int target) {        Map map = new HashMap<>();        for (int i = 0; i 你也可以把这篇文章分享给你的朋友或者同事，一起来讨论一下这道小小的练习题。![](Images/64444bae3ac90f82cb45ef5f1bc68d94.png){savepage-src="https://static001.geekbang.org/resource/image/5a/98/5a96a612403912b80de030e742e2e598.jpg"}
# 06 \| 代码整理的关键逻辑和最佳案例写一篇文章，要层次清楚、段落分明，写代码也是这样。杂志排版，要布局合理，阅读舒适，代码的编排也要这样。可是很多人想的是，代码能工作就行，不用讲究格式；时间紧，哪有时间整理代码。可事实上，干净整洁的代码带给我们的，远远不止格式上的赏心悦目，它更可以减少错误，提高我们的编程速度与效率。因为代码的层次结构、格式部署，是我们对自己思维的整理，也是我们思考逻辑的展现。很多人不愿意整理代码，觉得这项工作很麻烦。其实代码的整理并不复杂，也不需要什么高深的技巧。有效地使用空行、空格和缩进，简单的分割与对齐，就可以使得代码的视觉效果甚至质量发生巨大的变化，理顺编码的思路，提高编码的效率。这是一个付出少、收获大，值得养成的好习惯。
## 给代码分块其实整理代码，就是给代码分块。我们的大脑接收信息是按照分块的模式进行的。一块就是一个可识别的信息，它被安放到短期记忆的"插槽"里。信息块的实际信息量是可变的，但是越简单、越具体的信息块越容易被记住和理解。一份好的报纸或者杂志，文章本身往往很简短，或者被分割为简短的块。使用小段落、子标题，大量留白，版面切割，尽一切可能分解文章、版面，让眼睛舒适，让大脑有时间停留下来接受每个信息快。``{=html}一个代码文件，可以看做是一个杂志版面。在这个版面里，我们要把代码整理成清晰的模块，这样每一小块在视觉上和逻辑上都是可以区分的，可以帮助我们阅读和记忆，减轻眼睛和大脑的疲劳。比较下面的两种形式的语句。这两种形式，在实际逻辑上是完全相同的。但是，第二个语句使用了更细化的块，这样视觉形式和逻辑形式都是清晰直观的。    if (firstName != null && lastName != null)    if ((firstName != null) && (lastName != null))如果一段代码放眼望去都是大块大块的，那对于一个初学者来说，阅读和理解就非常困难。他需要将复杂的表达式再次分解，分解到可以单独理解的变量和运算符，再重新组合。你看，这样是不是很麻烦？一个好的程序员，要识别并且区分代码块，让它们易于阅读和辨认。程序代码分块时，我们需要注意以下三个点。1.  **保持代码块的单一性，一个代码块只能有一个目标**。代码块内所有的内容都是为了一个目标服务的，不能把无关的内容放在同一个代码块里。同一个代码块里语句的相互联系比与相邻代码块里的语句关系更为紧密；2.  **注意代码块的完整性**。代码块是一个完整的信息块。一个代码块要表达一个相对完整的意思，不能一个意思没说完就分块了，就像话说了半句一样；3.  **代码块数量要适当**。代码块过多，会让人觉得路径太长，逻辑复杂，不容易阅读理解。一个基础的代码块最好不要超过    25 行（通常显示屏小半个页面），否则就会有增加阅读理解的困难。我们读文章的时候，如果段落划分合理，那么读一次差不多就能清楚地记住了。日常阅读的新闻、时事、娱乐报道，和学术著作相比，通常会使用更短的段落。这就是有意缩短信息快，使报道更加适合快速阅读的需要。同样的，我们划分代码块，就是要让人清楚地阅读和理解。如果一个代码块太长，说明我们还可以进一步细分它。
## 使用空白空间给代码分块的办法之一，就是有效地使用空白空间。空白的空间虽然没有内容，但会给我们重要的信息提示。因此我们写代码的时候，一定要合理地运用空白。为什么呢？靠近的代码会形成一个视觉块，并且具有隐含的关联。分开的代码，意味着上下两段代码的关联没有那么紧密。这种视觉效果会给我们暗示，代码靠得越近，代码之间的关系越紧密。因此，空白区域，不仅仅可以用来分割代码，还展示了代码之间的关系。代码的分块，通过空格、缩进和空行来整理，或者分割。其中空格可以进行逻辑区隔，用于同一行代码内部的信息分块。缩进用于水平分割，用于表示代码块的级别。空行用于垂直分割，用于分开同级别的不同代码块。下面这个简图，可以直观地表示这种代码块的布局方式。![](Images/2bebfceb434055a6152593d6c6d137d6.png){savepage-src="https://static001.geekbang.org/resource/image/4d/b7/4d810b8acbdc3a5413f53a432dc08eb7.png"}\或者，也可以参考下面的代码示例。这段代码，也包含了使用空格区分同一行代码内部的信息块。    package coding; public class CodingFormat {    public static void main(String[] args) {        System.out.println(                "German say hello with "                + Greeting.GERMAN.getGreeting());    }     private static enum Greeting {        ENGLISH     ("English",  "Hello"),        SPANISH     ("Spanish",  "Hola"),        GERMAN      ("German",   "Hallo"),        MANDARIN    ("Mandarin", "Ni Hao");         private final String language;        private final String greeting;         private Greeting(String language, String greeting) {            this.language = language;            this.greeting = greeting;        }         private String getGreeting() {            return greeting;        }                private String getLanguage() {            return language;        }    }}那么到底如何利用空白空间呢？可以分为下面四个方法，我来一一讲解一下。**同级别代码块靠左对齐**我们阅读的习惯顺序是从左到右，代码也如此。因此不同行，但同级别的代码要靠左对齐。比如，上面的 CodingFormat 例子中，main() 方法和 Greeting 枚举类都是CodingFormat 的下一级内容，属于同一级别的两个块。两个代码块的左侧要对齐。上面的 CodingFormat例子中的枚举常量、枚举类的变量、枚举类的方法，也是属于同一级别的内容。对应地，左侧要对齐。**同级别代码块空行分割**我们阅读代码总是从上往下读，不同行的同级别的代码块之间，要使用空行分割。当我们读到一个空行的时候，我们的大脑就会意识到这部分的信息结束了，可以停留下来接受这段信息。另外，我们阅读代码的时候，碰到空白行，我们也可以暂停，往回看几行，或者重新回顾一下整个代码块，梳理逻辑、加深理解。比如，上面的 CodingFormat 例子中，main() 方法和 Greeting枚举类之间的空白行，getGreeting() 和 getLanguage()方法之间的空行，都是用来分割不同的信息块的。greeting 变量和 Greeting构造方法之间的空白行，表示变量声明结束，下面是开始定义类的方法，同样起到分割信息块的作用。**下一级代码块向右缩进**我们上面讲了同级别的代码格式，那么不同级别的呢？区分不同行的不同级别的代码，可以使用缩进。缩进的目的是为了让我们更直观地看到缩进线，从而意识到代码之间的关系。缩进虽然是一个共识，但怎么缩进是一个富有争议的话题。不同的语言，不同的程序员，有着不同的偏好。我刚开始工作时，编写代码必须使用制表符缩进，并且要把制表符设置为四个字符空间。那个时候，还没有什么IDE 可以依赖，大家都使用 vi 编辑器编写代码。缺省的，vi制表符使用八个字符空间。所以，那个时候我们看代码的第一件事，就是看看 vi配置有没有把制表符设置为四个字符空间。要不然的话，代码就凌乱得找不到头绪。现在，OpenJDK的代码里已经不允许存在制表符了，缩进统一使用四个空格。也有的缩进规范使用两个空格，或者八个空格。上面的 CodingFormat例子中，我们使用了四个空格作为一个缩进单元。下面，我们看看两个空格的缩进，以及八个空格的缩进效果。两个空格的缩进：    package coding; public class CodingFormat {  public static void main(String[] args) {    System.out.println(        "German say hello with " + Greeting.GERMAN.getGreeting());    }   private static enum Greeting {    ENGLISH     ("English",  "Hello"),    SPANISH     ("Spanish",  "Hola"),    GERMAN      ("German",   "Hallo"),    MANDARIN    ("Mandarin", "Ni Hao");     private final String language;    private final String greeting;     private Greeting(String language, String greeting) {      this.language = language;      this.greeting = greeting;    }     private String getGreeting() {      return greeting;    }            private String getLanguage() {      return language;    }  }}两个空格的缩进，可以为每一行语句释放出更多的空间，从而减少换行，方便我们使用较长标识符或者语句。两个空格的缩进，视觉上，缩进线靠得太近，相对而言，更容易混淆代码的分块级别。这是两个空格缩进的一个小缺点。我们再来看下八个空格的缩进：    package coding; public class CodingFormat {        public static void main(String[] args) {                System.out.println(                        "German say hello with "                        + Greeting.GERMAN.getGreeting());        }         private static enum Greeting {                ENGLISH     ("English",  "Hello"),                SPANISH     ("Spanish",  "Hola"),                GERMAN      ("German",   "Hallo"),                MANDARIN    ("Mandarin", "Ni Hao");                 private final String language;                private final String greeting;                 private Greeting(String language, String greeting) {                        this.language = language;                        this.greeting = greeting;                }                 private String getGreeting() {                        return greeting;                }                        private String getLanguage() {                        return language;                }        }}八个空格的缩进，视觉上可以看到缩进线明显，缩进的级别也容易辨认。但过多的缩进空格也有缺点。它很容易超过每行字数的限制，比如屏幕每行可容纳字符的限制。特别是当我们使用较长标识符或者语句的时候，如果每行字符空间较小（手机屏幕），就很容易导致自动换行，让代码变得难以阅读。另外，如果我们使用八个空格作为一个缩进单元，为了代码的整洁性，我们往往会被迫使用最少的缩进嵌套，这也导致了额外的复杂性，可读性就降低了。由于我们倾向于使用有准确意义的命名，标识符的长度往往是一个不能忽视的因素。现在的编码规范，四个空格的缩进最为常见，二个空格的缩进次之，八个空格的缩进使用的较少。**同行内代码块空格区隔**我们上面讲的都是不同行的代码该如何注意格式。位于同一行内的代码块，同样需要注意。我们可以使用空格区分开不同的逻辑单元。比如，逗号分隔符后要使用空格，以区分开下一个信息：    String firstName, lastName;双目运算符或者多目运算符，运算符前后都要使用空格：    firstName != null (firstName != null) && (lastName != null)