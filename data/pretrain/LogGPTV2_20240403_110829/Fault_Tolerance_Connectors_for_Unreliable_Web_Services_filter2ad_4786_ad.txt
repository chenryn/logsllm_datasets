this  experiment,  we  consider  only  the  service  crash. 
We have used three WS replicas with different failure 
rate. Crash faults were injected at various frequencies, 
25%,  33%,  and  50%  of  the  total  number  of  requests 
processed  in  order  to  trigger  the  recovery  procedure. 
An experiment stops when there is no more WS replica 
with  the  passive  replication  strategies  and  “Active 
Replication”,  or  when  there  is  less  than  two  WS 
replicas  with  the  “VotingReplication”  strategy.  The 
system is re-initialized at each experiment.  
It  is  important  to  mention  here  that  the  results 
obtained depend on several factors such as: the type of 
the targeted service, size of the messages processed by 
the  connector,  the  number  of  replicas  used,  the 
frequency  of  the  failures,  the  size  of  the  state 
transferred, the number of clients using simultaneously 
the  same  connector,  …etc).  For  example,  the  size  of 
state to transfer in this test case was about 50 Kbytes. 
6.  Discussion and Related work 
Dependability is the major issue in the deployment 
of  Service  Oriented  Architectures  in  critical  domains 
[13].  The  approach  proposed  in  this  paper  enables 
making  more  reliable  applications  out  of  unreliable 
Web  Service.  It  is  complementary  to  other  works 
because  connectors  are  just  Web  Services  providing 
additional  fault  tolerance  features  to  the  target  WS. 
Their WSDL document is an extension of the original 
one,  their  implementation  performing  fault  tolerance 
actions  and  delegating  the  functional  aspects  to  the 
original  WS.  This  approach  provides  separation  of 
concerns,  i.  e.  means  to  adapt  the  non-functional 
behavior  of  the  target  WS  to  application  needs. 
Indirection  is  a  conventional  way  to  perform  fault 
tolerance  that  is  here  adapted  to  the  SOA  context.  A 
major  contribution  of 
to  consider 
connectors  as  real  WS,  enhanced  with  fault  tolerance 
features.  The  handling  of  service  state  is  strongly 
related  to  the  implementation  of  the  WS.  As  in 
previous works, serialization features (save and restore 
operations)  must  be  provided  by  the  target  WS  to 
perform  state  recovery.  The  LogBasedReplication 
approach is however a way to circumvent state  issues 
for  some  services  based  on  input  requests  journals 
managed  transparently  by  the  connectors.  It  is  worth 
this  work 
is 
noting as well that many WS are stateless (Google and 
MSN, but any other search WS)  
A  lot  of  work  is  currently  based  on  composition 
languages  like  BPEL  to  implement  recovery  [14,  15] 
and  other  standards  (e.g.  [16]).  BPEL  is  currently  a 
standard  mean  to  perform  orchestration  and  enable 
collaboration between services. This is not always easy 
because the developer doesn’t know precisely the non-
functional  properties  of  the  services  included  into  the 
composition.  Our  work  is  complementary  with  this 
approach  since  it  enables,  through  connectors,  to  use 
enhanced  versions  instead  of  unreliable  services.  Our 
connectors  simplify 
implementation  and 
the 
maintenance of services composition in two ways: 
•  connectors  can  more  easily  detect  services  that  do 
not match the expected behavior at runtime, thanks 
to the monitoring of Web Services; 
•  connectors  can 
improve  services  composition 
giving  to  the  user  the  opportunity  to  improve 
transparently the dependability of Web Services. 
Improving the reliability of individual WS relies on 
implementing fault tolerance mechanisms on the server 
side.  This  is  often  done  in  an  ad-hoc  way,  such  as 
passive  and  active  replication  in  FT-SOAP  [17]  and 
FTWeb  [18],  respectively.  An  active  replication 
strategy  with  voting  has  also  been  implemented  in 
Thema [19] and in [20]. In [20], the vote is achieved on 
the client side. In both cases, the state management  is 
performed at the server side and thus WS replicas are 
developed  by  the  same  WS  provider.  A  generic 
framework  in  Java  was  recently  proposed  to  provide 
the  provider  with  customizable  primary/backup 
strategies  for  Web  Service  [21].  These  solutions  are 
essentially  dedicated  to  the  provider  in  order  to 
improve  the  WS  implementation.  Our  work  differs 
from  this  approach  as  we  do  not  focus  on  individual 
WS  dependability.  Based  on  existing  WS,  our 
approach enable external fault tolerance features to be 
developed  to  make  the  target  WS  more  dependable, 
possibly  using  equivalent  services.  In  addition,  works 
like  WS-Reliability  [16]  can  be  used  in  the  IWSD 
reliable  communications 
platform 
between 
connectors,  between 
connectors and the WS replicas. 
The  approach  concerning 
the  equivalence  of 
services is currently a first step, but seems promising. 
For stateful services, the management and the transfer 
of  the  WS  state  to  an  equivalent  service  is  another 
important challenge to address. To this aim, a protocol 
such  as  WSRF  (Web  Services  Resource  Framework) 
[22]  enables  the  state  to  be  described  as  XML 
datasheets,  and  thus  can  simplify  the  implementation 
of save/restore operations. 
to 
applications 
implement 
the 
and 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20077.  Conclusion 
The  Service  Oriented  Architecture  concept  brings 
the  notion  of  large-scale  application  to  reality,  but 
Internet  as  a  backbone  introduces  multiple  sources  of 
faults by definition. The virtues of this approach are to 
make  applications  as  dynamic  as  possible,  by  picking 
Off-The-Net the  individual useful services. This novel 
situation  must  be  taken  into  account  as  far  as 
dependability  is  concerned,  since  more  and  more 
critical  domains  will  interested  by  SOA.  Traditional 
solutions to make individual WS platforms reliable are 
not  sufficient.  We  need  techniques  to  build  reliable 
SOA out of unreliable Web Services. 
to  fault 
The work proposed in this paper enables designer of 
application  with  SOA  to  improve  the  reliability  of 
individual  Web  Services  using  WS  connectors 
dedicated 
tolerance.  Connectors  provide 
separation  of  concerns  between  clients 
(SOA 
developers)  and  WS  providers.  The  WSDL  of  the 
connector can then be used instead of the original one.  
Identical  services  can  be  found  on  the  Web  (i.e. 
developed 
the  same  WSDL),  but,  more 
importantly,  similar  services  exist.  The  WSDL 
document  is  different  but  the  service  semantics  is 
similar.  Abstract  services  can  be  used 
to 
take 
advantage of the Internet resources redundancy.  
The  various  execution  models  proposed  for  fault 
tolerance  connectors  have  been  validated  through 
several  experiments  with  real  Web  Services  (about 
200).  More  work  is  of  course  needed  with  real  SOA 
based applications, to improve the proposed approach, 
its tool chain and support infrastructure.  
from 
Acknowledgements:  This  work  has  been  partially 
supported  by  ReSiST,  Network  of  Excellence  of  the 
EC,  Resilience  and  Survivability  in  IST  (n°026764). 
The  authors  are  also  very  grateful  to  the  referees  for 
their useful comments. 
Instability,"  ACM 
8.  References 
[1]  C.  Labovitz,  G.  R.  Malan,  and  F.  Jahanian,  "Internet 
Routing 
SIGCOMM,  Computer 
Communication Review, 27(4), pp. 115-126, 1997. 
[2] S. S. Yau  and R. C. Cheung, "Design of Self-Checking 
Software,"  in Proc. of  Int. Conf. on Reliable Software, Los 
Angeles, CA, USA, IEEE Computer Society Press., 1975. 
[3]  R.  Allen  and  D.  Garlan,  "A  Formal  Basis  for 
Architectural  Connection,"  ACM  Transactions  on  Software 
Engineering and Methodology, 1997. 
[4] R. Chillarege, "Orthogonal Defect Classification ", E. M. 
R.  L.  Handbook  of  Software  Reliability  Engineering, 
McGraw-Hill, Ed., 1995. 
in 
fault 
tolerance 
[5] N. Salatge and J.-C. Fabre, "DeWeL: a language support 
for 
in  service  oriented  architectures," 
International  Workshop  on  Engineering  of  Fault  Tolerant 
Systems (EFTS'2006), Luxembourg , June 2006. 
[6]  N.  Aghdaie  and  Y.  Tamir,  "Client-Transparent  Fault-
Tolerant  Web  Service,"  20th  IEEE  Int.  Performance, 
Computing, & Communications Conf., pp. 209-216, 2001. 
[7] D. L. McGuinness  and F. v. Harmelen.,  "Web ontology 
language  (OWL)  overview,"  http://www.w3.org/TR/owl-
features/, W3C Recommendation., February 2004. 
[8]  D.  Martin,  M.  Burstein,  O.  Lassila,  M.  Paolucci,  T. 
Payne,  and  S.  McIlraith,  "Describing  Web  Services  using 
OWL-S and WSDL," October 2003. 
[9]  T.  U.  Xiang  Gao,  T.  U.  Jian  Yang,  and  T.  U.  Mike.  P. 
Papazoglou,  "The  Capability  Matching  of  Web  Services  " 
IEEE 4th Inter. Symp. on Multimedia Software Engineering 
(MSE'02) p. 56, 2002. 
[10]  S.  R.  Ponnekanti  and  A.  Fox,  "Interoperability  among 
independently evolving web services " In ACM/Usenix/IFIP 
Middleware’04, Toronto (Canada), pp. 331-351, Oct. 2004. 
[11]  J.  Wu  and  Z.  Wu,  "Similarity-based  Web  Service 
Matchmaking,"  IEEE  Int.  Conf.  on  Services  Computing 
(SCC'05), Vol-1, pp. 287-294, 2005. 
[12]  W.  C.  Recommendation,  "XSL  Transformations 
(XSLT)," 16 November 1999. 
[13] F. Tartanoglu, V. Issarny, A. Romanovsky, and N. Levy, 
"Dependability 
the  Web  Services  Architecture,"  In 
Architecting Dependable Systems. LNCS 2677, June 2003. 
[14]  A.  Gorbenko,  V.  Kharchenko,  P.  Popov,  and  A. 
Romanovsky,  "Dependable  Composite  Web  Services  with 
Components Upgraded Online " in Architecting Dependable 
Systems ADS III, (R. de Lemos, C. Gacek, A.Romanovsky, 
Eds.), vol. LNCS 3549, pp. 96-128. 
[15]  L.  Baresi  and  E.  Quintarelli.,  "Towards  Self-healing 
Compositions  of  Services  "  Proceedings  of  PRISE'04,  First 
Conference  on  the  PRInciples  of  Software  Engineering, 
Buenos Aires, Argentina, pp. 11-20 November 2004. 
[16]  SUN,  "Web  Services  Reliable  Messaging  TC  WS-
Reliability," 
http://www.oasis-open.org/committees/ 
download.php/5155/WS-Reliability-2004-01-26.pdf, 2003. 
[17] D. Liang, C.-L. Fang, and C. Chen, "FT-SOAP: A Fault-
tolerant  web 
service,"  Tenth  Asia-Pacific  Software 
Engineering Conference, Chiang Mai, Thailand, 2003. 
[18] G. T. Santos, L. C. Lung, and C. Montez, "FTWeb: A 
Fault Tolerant  Infrastructure  for Web Services,"  In Proc. of 
EDOC'2005, the 9th Enterprise Computing Conference 2005. 
[19]  M.  G.  Merideth,  A.  Iyengar,  T.  Mikalsen,  S.  Tai,  I. 
Rouvellou,  and  P.  Narasimhan,  "Thema:  Byzantine-fault-
tolerant  middleware  for  Web-service  applications",  in  Proc. 
of IEEE SRDS 2005, pp. 131 - 140, 2005. 
[20]  N.  Looker,  M.  Munro,  and  J.  Xu,  "Increasing  Web 
Service Dependability Through Consensus Voting", 2nd Int. 
Workshop on Quality Assurance and Testing of Web-Based 
Applications, COMPSAC, Edinburgh, Scotland, July, 2005. 
[21] X. Zhang, M. Hiltunen, K. Marzullo, and R. Schlichting, 
"Customizable Service State Durability for Service Oriented 
Architectures  "  In  Proceedings  of  the  Sixth  European 
Dependable Computing Conference, 2006. 
[22] T. Banks, "Web Services Resource Framework (WSRF) 
– Primer v1.2," Committee Draft 02, OASIS, 23 May 2006. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007