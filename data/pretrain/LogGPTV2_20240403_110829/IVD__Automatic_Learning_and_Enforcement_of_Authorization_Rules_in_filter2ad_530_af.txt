book’s production systems in order to take into account all
interactions that may not be visible in a testing environment
and obtain a result representative of IVD’s intended use. We
logged the performance characteristics of approximately 1
million user requests that resulted in at least one database
write. Since the request wall time is signiﬁcantly affected by
the request arguments, e.g. the time taken by a ﬁle upload
request depends on ﬁle size and on the quality of the internet
connection between the user and the OSN, we compared
median times. We separately recorded the time needed to send
a response back to the user and post-processing time—where
IVD’s request sampler runs—and observed a median difference
1106
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
of 1 millisecond for the former and 2 milliseconds for the
latter. We therefore conclude that IVD’s performance impact
is virtually imperceptible to an OSN’s end-user.
The performance of IVD’s invariant inference engine is also
important. The daily inference engine runs need to compute
new invariants in less than 24 hours. Our inference engine
implementation typically needs 4–6 hours to compute new
invariants, using a peak of 1,000 mappers and reducers.
VI. RELATED WORK
Traditionally, research on ﬁghting web application bugs has
focused on runtime data-ﬂow tracking and static analysis.
The former mainly targets injection vulnerabilities such as
XSS and SQL injection [23], [24], [25], while the latter
attempts to ﬁnd, among others, missing authorization checks.
Systems such as Fix Me [26], MiMoSa [27], RoleCast [28],
SAFERPHP [29], and WAPTEC [30] use static analysis to
check a web applications’s security logic. However, such
analyses face a fundamental problem when confronted with
applications that have complex access control policies: in the
absence of a speciﬁcation, it is impossible to decide whether
an operation should be allowed, and indeed, this approach has
been largely restricted to applications that use a simple privacy
model, of regular and privileged users. IVD does not have this
limitation.
One way to side-step this problem is to use the applica-
tion’s usual behavior as the speciﬁcation. APP LogGIC [31],
Swaddler [32], Waler [2], and ZigZag [33] use Daikon [34]
to extract invariants that are part of the “intended” application
speciﬁcation. The invariants are then either checked at runtime
or used in a model checking step to identify paths on which
they are not enforced. While their invariants are based on
program state, we propose the simpler and scalable approach
of basing them on database queries. In addition, we avoid
the expensive model checking step and ensure that runtime
checking of the invariants has virtually no overhead.
Other systems base their
invariants on different data.
BLOCK [5] generates invariants from web requests and re-
sponses to detect state violation attacks, while InteGuard [6]
ﬁnds invariants in the HTTP trafﬁc between providers, integra-
tors, and end-users, with the goal of protecting integrators from
malicious users. While these approaches have the advantage
of working outside the application they protect, the expressive
power of their invariants is inevitably lower as they have
limited access to application state. In addition,
the graph
database layer affords us ﬁner invariant granularity than the
HTTP layer.
IVD also has similarities to anomaly detection systems [35],
[36], [32]. While they share the same high-level idea, anomaly
detection systems assign to each request an anomaly score
which they compare against a threshold determined during the
learning phase. The score is usually computed using statistical
models such as string character distribution or token ﬁnder,
which makes them suitable for protecting against attacks that
involve speciﬁc input patterns, but less so against authorization
bugs. Several anomaly detection systems have been proposed
input : picture identiﬁer pic id
1 u = logged-in user;
2 auth data = graph.getAuthInfo(pic id);
3 if graph.associationExists(u, friend, auth data.target)
then
return nil
return graph.getObject(pic id);
4
5 else
6
Algorithm 5: Possible approach for making IVD suitable for
reads by having the graph database API return an object’s
authorization-relevant information separately.
input : picture identiﬁer pic id
IVD.onAuthorizationSuccess(pic);
return pic;
1 u = logged-in user;
2 pic = graph.getObject(pic id);
3 if graph.associationExists(u, friend, pic.target) then
4
5
6 else
7
Algorithm 6: Possible approach for making IVD suitable for
reads by explicitly informing it of successful authorization
checks. Line 4 assumes IVD is is a globally-accessible object.
return nil
speciﬁcally to target SQL queries [37], [38], and proved to be
effective against SQL injection or XSS.
Working to protect network applications from malicious
users, Vigilante [39] uses attack signatures rather than in-
variants. The signatures are generated by instrumentation that
looks for attacks that rely on detectable exploit mechanisms
such as buffer overﬂows. However, this approach does not
work in the context of semantic bugs, where a generic method
of detecting an attack does not exist. Also using attack
signatures,
intrusion detection systems such as Snort [40]
protect against known vulnerabilities. However, this technique
has limited applicability in proprietary applications, such as
the ones powering OSNs.
VII. FUTURE WORK
IVD’s deployment at Facebook does not currently cover
database reads for reasons we have laid out in §II-B. The
key insight into making IVD applicable to reads is to inform
it of successful authorization. We propose two approaches to
achieve this:
1) Separately read authorization metadata and payload.
2) Explicitly inform IVD of successful authorization.
The former approach involves splitting object attributes
into two categories: relevant to authorization and irrelevant to
authorization. The database would then provide a separate API
for reading only the authorization-relevant attributes. Algo-
rithm 5 shows the application of this approach to Algorithm 2.
IVD would be invoked, as before, during the getObject call,
but not during the getAuthorizationInfo call.
The latter approach does not involve modifying the graph
API but requires the authorization code to explicitly notify IVD
1107
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
when authorization is successful. Algorithm 6 conceptually
presents the idea, applied to the same algorithm as above.
Similarly to the handling of writes, IVD has at line 4 the oppor-
tunity to learn or to block accesses to the object by throwing an
exception. In practice, the ivd.onAuthorizationSuccessfull call
can be made by the authorization framework without requiring
changes to user code.
A different direction for future work is to mitigate IVD’s
reliance on an attack-free learning period (§III-B). A potential
solution involves ﬂagging for manual review invariants that
were almost ratiﬁed, i.e. they were only broken by requests
coming from a small group of users. Alternatively, the invari-
ants could be directly ratiﬁed, but then automatically disabled
if they block requests coming from a sufﬁciently large number
of users. More complex ratiﬁcation criteria can be borrowed
from the ﬁeld of robust statistics [41].
Finally, IVD can be extended to learn more complex in-
variants. The system currently protects against bugs caused
by missing authorization checks that can be expressed as
equality between object attributes, direct relationships, or a
conjunctions thereof. Potential extensions could allow IVD to
infer and enforce disjunctions, or introduce predicates that
capture indirect relationships, i.e. inspect objects separated
from the logged-in user by more than one edge in the graph.
VIII. CONCLUSION
We have presented IVD, a defense-in-depth system that
protects online social networks against missing or incorrect
authorization checks. IVD works by inferring invariants from
graph data query patterns and, after a short evaluation period,
blocks any requests in which the invariants do not hold.
IVD’s main novelty rests in its focus on the highly in-
terconnected data model speciﬁc to online social networks,
which allows inferring meaningful invariants at the database
layer, and in the design and implementation decisions that
allow it to learn and enforce invariants at an unprecedented
scale. To our knowledge, IVD is the ﬁrst invariant detection
system that checks hundreds of thousands of invariants against
millions of requests every second, made to one of the largest
graph databases in the world. Additionally, IVD tackles the
inherent susceptibility of dynamic invariant detection systems
to false positives through a two-step evaluation and ratiﬁcation
process, and a set of effective domain-speciﬁc enforcement
excuses.
IVD does have limitations stemming from the trade-offs
of our design: deciding to learn at the database layer al-
lows ﬁnding authorization-relevant invariants but has limited
applicability for read operations, and the restricted invariant
format offers good performance but does not allow inferring
all authorization checks that the code may perform. IVD is
therefore not a replacement for good engineering practices,
security audits or bug bounty programs. However we have
found it
layer of defense at
Facebook.
to be an effective additional
IX. ACKNOWLEDGEMENTS
We would like to thank Ben Mathews and Alec Muffett for
their early work on IVD, and the engineers from Facebook’s se-
curity and product teams who investigated invariant violations.
We would also like to thank Pieter Hooimeijer, Christopher
Palow, Steve Weiss and John Lyle for helping us shape the
paper, and our shepherd, Nikita Borisov, and the anonymous
reviewers for their invaluable feedback.
REFERENCES
[1] “OWASP Top 10 2013,” https://www.owasp.org/index.php/Top 10
2013-Introduction.
[2] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna, “Toward au-
tomated detection of logic vulnerabilities in web applications,” in
Proceedings of the USENIX Security Symposium, vol. 58, 2010.
[3] F. Sun, L. Xu, and Z. Su, “Static detection of access control vulner-
abilities in web applications.” in Proceedings of the USENIX Security
Symposium, 2011.
[4] I. Beschastnikh, Y. Brun, M. D. Ernst, A. Krishnamurthy, and T. E. An-
derson, “Bandsaw: Log-powered test scenario generation for distributed
systems,” in SOSP Work In Progress, Cascais, Portugal, 2011.
[5] X. Li and Y. Xue, “Block: a black-box approach for detection of state
violation attacks towards web applications,” in Proceedings of the 27th
Annual Computer Security Applications Conference. ACM, 2011.
[6] L. Xing, Y. Chen, X. Wang, and S. Chen, “Integuard: Toward automatic
protection of third-party web service integrations.” in Proceedings of the
Network and Distributed System Security Symposium, 2013.
[7] G. Pellegrino and D. Balzarotti, “Toward black-box detection of logic
ﬂaws in web applications,” in Proceedings of the Network and Dis-
tributed System Security Symposium, 2014.
[8] “FlockDB: A distributed, fault-tolerant graph database,” https://github.
com/twitter/ﬂockdb.
[9] N. Bronson, Z. Amsden, G. Cabrera, P. Chakka, P. Dimov, H. Ding,
J. Ferris, A. Giardullo, S. Kulkarni, H. Li, M. Marchukov, D. Petrov,
L. Puzar, Y. J. Song, and V. Venkataramani, “Tao: Facebook’s distributed
data store for the social graph,” in Proceedings of the USENIX Annual
Technical Conference, 2013.
[10] “Neo4j decreases development
time-to-market for LinkedIn’s Chitu
App,” https://neo4j.com/case-studies/linkedin-china/?ref=solutions.
[11] S. Sakr, S. Elnikety, and Y. He, “G-SPARQL: A hybrid engine for
querying large attributed graphs,” in ACM International Conference on
Information and Knowledge Management, 2012.
[12] “2015 Highlights: Less low-hanging fruit,” https://www.facebook.com/
notes/facebook-bug-bounty/2015-highlights-less-low-hanging-fruit/
1225168744164016.
[13] P. T. Wood, “Query languages for graph databases,” ACM SIGMOD
Record, vol. 41, no. 1, Apr. 2012.
[14] S. Abiteboul, D. Quass, J. Mchugh, J. Widom, and J. Wiener, “The
Lorel query language for semistructured data,” International Journal on
Digital Libraries, vol. 1, 1997.
[15] A. Thusoo, Z. Shao, S. Anthony, D. Borthakur, N. Jain, J. Sen Sarma,
R. Murthy, and H. Liu, “Data warehousing and analytics infrastructure
at facebook,” in Proceedings of the 2010 ACM SIGMOD International
Conference on Management of Data, 2010.
[16] K. Shvachko, H. Kuang, S. Radia, and R. Chansler, “The Hadoop
distributed ﬁle system,” in Proceedings of the IEEE Symposium on Mass
Storage Systems and Technologies (MSST), May 2010.
[17] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, S. Anthony, H. Liu,
P. Wyckoff, and R. Murthy, “Hive: A warehousing solution over a map-
reduce framework,” Proc. VLDB Endow., vol. 2, no. 2, Aug. 2009.
[18] C. Tang, T. Kooburat, P. Venkatachalam, A. Chander, Z. Wen,
A. Narayanan, P. Dowell, and R. Karl, “Holistic conﬁguration manage-
ment at Facebook,” in Proceedings of the 25th Symposium on Operating
Systems Principles.
[19] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed, “Zookeeper: Wait-free
coordination for internet-scale systems,” in Proceedings of the USENIX
Annual Technical Conference, 2010.
[20] “Facebook Whitehat,” https://www.facebook.com/whitehat.
[21] “Facebook’s bug - delete any video from Facebook,” http://tinyurl.com/
j29loqa.
[22] “Facebook whitehat information,” http://tinyurl.com/zzvyumj.
1108
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply. 
[23] J. Newsome and D. Song, “Dynamic taint analysis for automatic
detection, analysis, and signature generation of exploits on commod-
ity software,” in Proceedings of the Network and Distributed System
Security Symposium, 2005.
[24] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna,
“Cross-site scripting prevention with dynamic data tainting and static
analysis,” in Proceedings of the Network and Distributed System Security
Symposium, 2007.
[25] W. G. J. Halfond, A. Orso, and P. Manolios, “Using positive tainting and
syntax-aware evaluation to counter sql injection attacks,” in Proceedings
of the 14th ACM SIGSOFT International Symposium on Foundations of
Software Engineering, 2006.
[26] S. Son, K. S. McKinley, and V. Shmatikov, “Fix me up: Repairing
access-control bugs in web applications.” in Proceedings of the Network
and Distributed System Security Symposium, 2013.
[27] D. Balzarotti, M. Cova, V. V. Felmetsger, and G. Vigna, “Multi-module
vulnerability analysis of web-based applications,” in Proceedings of
the 14th ACM conference on Computer and communications security.
ACM, 2007.
[28] S. Son, K. S. McKinley, and V. Shmatikov, “Rolecast: ﬁnding missing
security checks when you do not know what checks are,” ACM SIGPLAN
Notices, vol. 46, no. 10, 2011.
[29] S. Son and V. Shmatikov, “Saferphp: Finding semantic vulnerabilities in
php applications,” in Proceedings of the ACM SIGPLAN 6th Workshop
on Programming Languages and Analysis for Security, 2011.
[30] P. Bisht, T. Hinrichs, N. Skrupsky, and V. Venkatakrishnan, “Waptec:
whitebox analysis of web applications for parameter tampering exploit
construction,” in Proceedings of the 18th ACM conference on Computer
and communications security, 2011.
[31] G. Stergiopoulos, B. Tsoumas, and D. Gritzalis, “Hunting application-
level logical errors,” in Proceedings of the International Symposium on
Engineering Secure Software and Systems. Springer, 2012.
[32] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vigna, “Swaddler:
An approach for the anomaly-based detection of state violations in
web applications,” in International Workshop on Recent Advances in
Intrusion Detection. Springer, 2007.
[33] M. Weissbacher, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna,
“Zigzag: Automatically hardening web applications against client-side
validation vulnerabilities,” in Proceedings of
the USENIX Security
Symposium, 2015.
[34] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S.
Tschantz, and C. Xiao, “The daikon system for dynamic detection of
likely invariants,” Science of Computer Programming, vol. 69, no. 1,
2007.
[35] C. Kruegel and G. Vigna, “Anomaly detection of web-based attacks,” in
Proceedings of the 10th ACM Conference on Computer and Communi-
cations Security, 2003.
[36] K. Leung and C. Leckie, “Unsupervised anomaly detection in network
intrusion detection using clusters,” in Proceedings of the Twenty-eighth
Australasian conference on Computer Science-Volume 38. Australian
Computer Society, Inc., 2005.
[37] F. Valeur, D. Mutz, and G. Vigna, “A learning-based approach to the
detection of sql attacks,” in International Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment, 2005.
[38] S. Y. Lee, W. L. Low, and P. Y. Wong, “Learning ﬁngerprints for
a database intrusion detection system,” in European Symposium on
Research in Computer Security, 2002.
[39] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang,
and P. Barham, “Vigilante: End-to-end containment of internet worms,”
in Proceedings of the Twentieth ACM Symposium on Operating Systems
Principles, 2005.
[40] M. Roesch, “Snort - lightweight intrusion detection for networks,” in
USENIX Conference on System Administration, 1999.
[41] F. R. Hampel, E. M. Ronchetti, P. J. Rousseeuw, and W. A. Stahel,
John
Robust Statistics: The Approach Based on Inﬂuence Functions.
Wiley and Sons, 1986.
1109
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:44 UTC from IEEE Xplore.  Restrictions apply.