# linux-kernel-pwn-ciscn2017-babydriver
##### 译文声明
本文是翻译文章，文章原作者 平凡路上，文章来源：平凡路上
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
作者：平凡路上
上一篇文章利用栈溢出介绍了基本的内核中利用rop以及ret2usr来进行提权的两种方式，其中更常用的会是用ret2usr，因为完全使用rop是很费力的一件事情。
为了防止内核执行用户代码导致提权发生的情况的发生，出现了`smep`（Supervisor Mode Execution Protection）机制。
## smep简介
SMAP(Supervisor Mode Access Prevention，管理模式访问保护)和SMEP(Supervisor Mode
Execution
Prevention，管理模式执行保护)的作用分别是禁止内核访问用户空间的数据和禁止内核执行用户空间的代码。arm里面叫PXN(Privilege
Execute Never)和PAN(Privileged Access
Never)。SMEP类似于NX，不过一个是在内核态中，一个是在用户态中；NX一样SMAP/SMEP需要处理器支持。
可以通过cat /proc/cpuinfo查看是否开启了smep：
    / $ grep smep /proc/cpuinfo
    flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx lm constant_tsc nopl xtopology pni cx16 x2apic hypervisor smep
在qemu中可通过启动脚本查看是否开启了smep：
    #!/bin/bash
    qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' -enable-kvm -monitor /dev/null -m 64M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep -s
内核代码中通过cr4寄存器的值来判断系统是否开启了smep，cr4寄存器各个位的含义如下表所示：
bit | label | description  
---|---|---  
0 | vme | virtual 8086 mode extensions  
1 | pvi | protected mode virtual interrupts  
2 | tsd | time stamp disable  
3 | de | debugging extensions  
4 | pse | page size extension  
5 | pae | physical address extension  
6 | mce | machine check exception  
7 | pge | page global enable  
8 | pce | performance monitoring counter enable  
9 | osfxsr | os support for fxsave and fxrstor instructions  
10 | osxmmexcpt | os support for unmasked simd floating point exceptions  
11 | umip | user mode instruction prevention (#GP on SGDT, SIDT, SLDT, SMSW,
and STR instructions when CPL > 0)  
13 | vmxe | virtual machine extensions enable  
14 | smxe | safer mode extensions enable  
17 | pcide | pcid enable  
18 | osxsave | xsave and processor extended states enable  
20 | smep | supervisor mode executions protection enable  
21 | smap | supervisor mode access protection enable  
所以如果内核开启了smep的话，能直接想到的就是通过内核中的代码将该位置0，关闭smep后，后面再执行ret2usr就比较方便了。
关闭 smep 保护，常用一个固定值 `0x6f0`，即 `mov cr4, 0x6f0`。可以在内核中寻找能组成 `mov cr4,
0x6f0`的gadget来关闭smep，如下所示：
    pop rdi; ret;
    0x6f0;
    mov cr4, rdi; pop rbp; ret;
    0
    ret2usr
## ciscn2017-babydriver
###  描述
题目下载下来后，查看目录，`boot.sh`是启动脚本，`bzImage`是内核镜像，`rootfs.cpio`是文件系统：
    $ ll
    -rwxr-xr-x  1 raycp raycp  219 Oct 11 01:09 boot.sh
    -rwxr-xr-x  1 raycp raycp 6.7M Jun 16  2017 bzImage
    -rwxr-xr-x  1 raycp raycp 4.4M Oct 11 06:10 rootfs.cpio
启动脚本如下：
    $ cat boot.sh
    #!/bin/bash
    qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' -enable-kvm -monitor /dev/null -m 64M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep
程序开启了smep，可以在其中加入`-s`以方便调试。
提取文件系统
    mv rootfs.cpio rootfs.cpio.gz
    gunzip ./rootfs.cpio.gz
    ./extract-cpio.sh
    # extract-cpio.sh
    #mkdir cpio
    #cd cpio
    #cp ../$1 ./
    #cpio -idmv /dev/console
    exec 2>/dev/console
    insmod /lib/modules/4.4.72/babydriver.ko
    chmod 777 /dev/babydev
    echo -e "\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\n"
    setsid cttyhack setuidgid 1000 sh
    umount /proc
    umount /sys
    poweroff -d 0  -f
通过`insmod
/lib/modules/4.4.72/babydriver.ko`知道要分析的目标是`babydriver.ko`，同时可以将`setsid
cttyhack setuidgid 1000 sh`改为`setsid cttyhack setuidgid 0 sh`以拿到root权限方便调试。
因为没有linux原始内核镜像`vmlinux`，所以需要使用脚本[extract-vmlinux](https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux)从bzImage中提取出`vmlinux`：
    ./extract-vmlinux ./bzImage > vmlinux
接下来对ko进行分析。
###  漏洞分析
将babydriver.ko拖入ida，在进行分析之前也可以执行`ropper --file ./vmlinux --nocolor >
ropgadget.txt`将gadget提取出来，因为该过程需要不少时间。
    $ checksec babydriver.ko
    [*] '/home/raycp/work/kernel/babydriver/babydriver.ko'
        Arch:     amd64-64-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x0)
`babydriver_init`实现了一个标准的[设备驱动](https://blog.csdn.net/zqixiao_09/article/details/50839042)，主要分析目标在于`fops`中的函数指针。
模块中存在一个全局变量`babydev_struct`，其定义如下：
    00000000 babydevice_t    struc ; (sizeof=0x10, align=0x8, copyof_429)
    00000000                                         ; XREF: .bss:babydev_struct/r
    00000000 device_buf      dq ?                    ; XREF: babyrelease+6/r
    00000000                                         ; babyopen+26/w ... ; offset
    00000008 device_buf_len  dq ?                    ; XREF: babyopen+2D/w
    00000008                                         ; babyioctl+3C/w ...
    00000010 babydevice_t    ends
`babyopen`函数代码如下：
    int __fastcall babyopen(inode *inode, file *filp)
    {
      __int64 v2; // rdx
      _fentry__(inode, filp);
      babydev_struct.device_buf = (char *)kmem_cache_alloc_trace(kmalloc_caches[6], 37748928LL, 64LL);
      babydev_struct.device_buf_len = 0x40LL;
      printk("device open\n", 37748928LL, v2);
      return 0;
    }
申请了0x40大小的堆空间到`device_buf`中，并将长度到`device_buf_len`中。
`babyrelease`函数则是释放`device_buf`指向的空间：
    int __fastcall babyrelease(inode *inode, file *filp)
    {
      __int64 v2; // rdx
      _fentry__(inode, filp);
      kfree(babydev_struct.device_buf);
      printk("device release\n", filp, v2);
      return 0;
    }
`babywrite`函数的功能是如果用户数据长度不大于该空间长度，则往该空间中写入相应用户数据。
    ssize_t __fastcall babywrite(file *filp, const char *buffer, size_t length, loff_t *offset)
    {
      size_t v4; // rdx
      ssize_t result; // rax
      ssize_t v6; // rbx
      _fentry__(filp, buffer);
      if ( !babydev_struct.device_buf )
        return -1LL;
      result = -2LL;
      if ( babydev_struct.device_buf_len > v4 )
      {
        v6 = v4;
        copy_from_user();
        result = v6;
      }
      return result;
    }
`babyread`函数的功能则是用户若读取的数据长度不大于空间长度，将数据读取到用户空间。
    ssize_t __fastcall babyread(file *filp, char *buffer, size_t length, loff_t *offset)
    {
      size_t v4; // rdx
      ssize_t result; // rax
      ssize_t v6; // rbx
      _fentry__(filp, buffer);
      if ( !babydev_struct.device_buf )
        return -1LL;
      result = -2LL;
      if ( babydev_struct.device_buf_len > v4 )
      {
        v6 = v4;
        copy_to_user(buffer);
        result = v6;
      }
      return result;
`babyioctl`提供了申请指定大小的堆空间的能力。
    __int64 __fastcall babyioctl(file *filp, unsigned int command, unsigned __int64 arg)
    {
      size_t v3; // rdx
      size_t len; // rbx
      __int64 v5; // rdx
      __int64 result; // rax
      _fentry__(filp, *(_QWORD *)&command);
      len = v3;
      if ( command == 0x10001 )
      {
        kfree(babydev_struct.device_buf);
        babydev_struct.device_buf = (char *)_kmalloc(len, 0x24000C0LL);
        babydev_struct.device_buf_len = len;
        printk("alloc done\n", 0x24000C0LL, v5);
        result = 0LL;
      }
      else
      {
        printk(&unk_2EB, v3, v3);
        result = -22LL;
      }
      return result;
    }
按照用户空间的pwn题的思路好像是没什么问题的，但是这个设备存在于内核空间当中，这样的实现就会导致形成`uaf`漏洞。
因为内核空间是所有进程都共享内存，如果打开了两个设备，会导致两个设备都对同一个全局指针`babydev_struct`具备相应的读写能力。若将其中一个关闭，内存会被释放。由于全局指针未清0，另一个设备仍然可以对该内存进行读写，导致形成`uaf`漏洞。
## 漏洞利用
利用这个uaf漏洞，存在两种利用方法：
  * 利用uaf直接修改进程的`struct cred`实现提权。
  * 利用uaf修改结构体函数指针，控制程序流进行提权。
首先解释第一种解法，`struct cred`结构体如下：