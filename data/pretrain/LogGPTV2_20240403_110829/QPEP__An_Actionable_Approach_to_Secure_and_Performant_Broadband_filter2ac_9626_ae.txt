ISP equipment [54]. A common worst-case upper bound often
referenced in satellite broadband standards is 1 × 10−3, but
real world conditions run the gamut from “quasi error free”
conditions (where nearly all packet errors are corrected by the
DVB-S link layer) to rates upwards of 1 × 10−2 [55]–[57].
Satellite networks leverage a variety of techniques to
mitigate packet losses. For example, DVB-S forward error
correction (FEC) can resolve modest bit errors at the link layer,
resulting in error-free IP-layer transmissions. Many modern
networks now implement adaptive modulation and coding
(ACM) schemes at the physical layer, allowing the network to
intelligently trade-off bandwidth in favor of reliability under
adverse conditions. In our experiments, these network speciﬁc
particulars are abstracted away to IP packet loss rates, which
allows for direct focus on the ﬁnal performance implications
of a problematic link. However, future work may beneﬁt
from considering other dimensions of satellite link resilience,
especially bandwidth variations. That said, it is not obvious
that these lower-layer noise responses, to the extent that they
manifest in the same ultimate PLR, would have signiﬁcant
impact on the relative performance of the tools evaluated in
our simulations.
In these adverse condition simulations, we ﬁrst measured
IPerf goodput at 28 PLR levels distributed logarithmically
from 1 × 10−9 (packet loss is very rare) to 1 (all packets
are lost). At each of these levels, 100 IPerf simulations were
conducted to transfer a ﬁle measuring 2MB in size. Our results
are summarized in Figure 7.
As expected, we ﬁnd that QPEP suffers at higher rates
of packet loss. This makes sense as QUIC was not designed
with lossy links in mind and, in particular, the loss of key
cryptographic handshake packets during initialization can im-
pose substantial RTT penalties. That said, QPEP outperforms
distributed PEPsal at modest levels of packet loss and would
be well suited to networks with strong signal-to-noise ratio
(SNR) or physical-layer mitigations against packet loss. Gen-
erally though, this initial Iperf metric, suggests that QUIC’s
cubic congestion control mechanism is not as robust to PLR
as PEPsal’s TCP-Hybla based approach. Future work which
adapts TCP-Hybla to the QUIC protocol may prove one avenue
to maintain QPEP’s performance edge under such conditions.
It is worth noting that, regardless of PLR, QPEP consis-
tently meets or exceeds the performance of OpenVPN as an
encryption tool. This suggests that, from the perspective of a
11
of larger transmissions.
In short, this preliminary look at packet loss effects sug-
gests that QPEP is a better alternative than status quo VPN
encryption under adverse conditions and performs reasonably
well compared to insecure PEPs at low to moderate PLRs.
However, our ﬁndings suggest that future work optimizing
QUIC’s response to packet loss could offer signiﬁcant im-
provements, especially for ﬁle transfer operations.
D. Performance in LEO
While this paper has focused on GEO networks and per-
formance under constant speed-of-light delays, some proposed
“next-generation” satellite networks focus on the use of low
earth orbit (LEO) to reduce transmission latency. While GEO
broadband is likely to remain relevant for the foreseeable
future due to its wide coverage and heavy industry adoption,
it is worth considering QPEP’s performance in future LEO
systems as well. Unlike in GEO, latency from LEO can vary
substantially due to the shifting relative locations of satellites
and the geographic position of the customer. Additionally, as
LEO is much closer to the Earth’s surface (approximately
2,000 km), speed of light latency effects are reduced.
To emulate a LEO system, we implement an OpenSAND
simulation model which replicates observed delay character-
istics from a satellite terminal in the Atlantic Ocean connect-
ing through the Iridium LEO constellation to a gateway in
London [58]. In this particular network, one-way delay varies
from as low as 25 ms to as high as 140 ms, depending on
the time of transmission and the route a packet must take
through the constellation. The same PLT benchmark from
section VII-B was repeated in this environment. The results
of these experiments can be found in Figure 9.
Fig. 9. ECDF of Alexa Top 20 PLTs in Iridium Simulation. As expected,
QPEP offers very little beneﬁt in this lower-latency environment. However, it
also imposes smaller overheads than traditional unencrypted PEPs.
As expected, the performance beneﬁts of PEPs are much
less pronounced in LEO networks and VPNs represent a more
viable encryption option. QPEP still generally outperforms
OpenVPN in this context, with a median PLT of 8.3 seconds
compared to OpenVPN’s 14.2 seconds. However, this is coun-
teracted by the fact that all three PEPs seem to struggle with
more complex/slow-loading pages where the added overhead
12
Fig. 7.
IPerf Performance in Lossy Environments. The shaded intervals
represent a standard deviation in measurements across 100 simulation runs
for each PLR. Note that QPEP performance degrades rapidly in the presence
of high PLRs, although it always meets or exceeds the performance of the
only other encrypted tool (OpenVPN).
Fig. 8. Mean PLT of NASA.gov Homepage at Increasing PLRs. Lines which
are lower and to the right demonstrate better PLTs at higher PLRs. Note
that QPEP performs better here than in the IPerf case. This makes sense as
connections are relatively short-lived and some errors may be resolved by the
browser (e.g. by re-issuing failed requests).
security-conscious user, QPEP is net-beneﬁcial compared to
traditional VPN encryption.
Of course, as mentioned in Section VII-B,
this Iperf
benchmark only tells part of the performance story. In many
cases, the short-lived data connections of web-browsing are
likely more resilient to packet loss. To assess the impact of
attenuation on page load times, a series of simulations were
run measuring the average PLT of the NASA.gov homepage
over ﬁfty visits at each PLR interval (Figure 8).
Here, QPEP performs better, meeting or exceeding the
performance of distributed PEPsal and substantially exceeding
the performance of OpenVPN-based encryption throughout.
This suggests that the goodput issues QPEP encounters at high
PLRs may not necessarily translate to meaningful performance
reduction for real web-browsing trafﬁc, as QPEP’s ability to
rapidly deliver small images and text ﬁles over the latent
satellite connection may counteract more error-prone delivery
of connection splitting is not always worth the beneﬁts. It
is worth noting, however, that relative to both PEPsal archi-
tectures, QPEP does appear to impose less overhead costs.
Taken together, these measurements suggest that QPEP would
be an adequate mechanism for providing encryption in LEO
constellations but, unlike in GEO networks, the performance
gains over more established VPN options are, at best, marginal.
E. QUIC Optimizations
One of the principal theoretical advantages of a distributed
PEP conﬁguration is the ability to adopt non-standard and
environmentally tailored protocols over the satellite hop. In
this section, we consider a demonstrative example as to how
such optimizations might be identiﬁed and incorporated into
QPEP.
One common strategy for improving the performance of
TCP over satellite links is ACK decimation - the process of
combining many ACK messages into a single transmission
at regular intervals. Unlike TCP, the QUIC protocol is not
ACK-clocked which diminishes the impact of ACK decimation
on goodput [59]. Nevertheless, QUIC leverages ACKs for
loss detection and QUIC ACK messages are relatively large
compared to in TCP contexts. This means that excessive ac-
knowledgments can potentially congest asymmetric links [60].
We conducted a set of initial experiments to determine
if QUIC ACK decimation ratios had any impact on QPEP’s
measured goodput. In the default QUIC implementation, this
ratio is set to 2 ACK eliciting packets per ACK for the ﬁrst
100 packets, and 10:1 thereafter. Due to long satellite RTT’s
however, we observed in practice that the vast majority of
ACKs were triggered by the QUIC implementation’s default
25 ms ACK timeout window rather than decimation. In order
to measure the effect of decimation in isolation, this timeout
window was increased substantially to 8,000 ms and ACK
decimation was set to begin after the 4th packet over the QUIC
link. As a result, these experiments are not directly comparable
to those which appear elsewhere in the paper. We further
selected the IPerf benchmark as, based on Section VII-C, it is
more sensitive to packet loss effects that are directly relevant
to ACK decimation.
In these experiments, 100 IPerf benchmarks were con-
ducted for 5 Mb transfers at each of 30 decimation ratios.
These ranged from 1:1 to 30:1. Additionally, we conducted
the evaluations at three different PLRs (error-free, 1 × 10−6,
and 1 × 10−4). The results are summarized in Figure 10.
We observe a few relevant trends in these results. The
ﬁrst
is that extremely low ACK decimation rations (e.g.
1:2) perform poorly. This makes sense as large portions of
bandwidth are tied up with ACK messages at these levels.
Higher ratios offer some beneﬁt, with the default ratio of
10:1 roughly doubling goodput compared to “worst-case” 1:1
ratio. However, the beneﬁt of ACK decimation is more limited
and less consistent in lossier environments, as denoted by the
relatively small goodput increase and high variance observed
in our experiments. Finally, we observe that at a certain point,
additional decimation has little to no effect. This may be the
result of timeouts again gaining dominance. We found that, in
practice, increasing the minimum ACK timeout much beyond
the value used in our experiments (8 seconds), led to link
Fig. 10.
IPerf Goodput vs ACK Decimation Ratio
instability. Speciﬁcally, unrecognized packet losses caused the
IPerf client to perceive its connection to the server broken,
causing it to terminate prematurely.
The high variance of these preliminary experimental results
makes it difﬁcult to deﬁnitively pinpoint an optimal ACK dec-
imation ratio. However, one clear takeaway is that increasing
the minimum ACK timeout period from 25 ms allows for
better exploitation of the QUIC’s ACK decimation feature in
the presence of high-latency networks. We observed a roughly
25% increase in mean clear-sky goodput (from 19.25 Mbps
to 25 Mbs) as a result of doing so, even when the ACK
decimation ratio itself remained at its default of 10:1. Finding
an ideal ACK decimation radio for the satellite use-case, and
potentially setting it dynamically in response to noise and
trafﬁc characteristics, represents a possible avenue for further
performance tuning in future work.
The ACK decimation ratio is but one of many QUIC
protocol constants which may be tuned to have a meaningful
impact on proxy performance. Changes in congestion window
parameters, congestion control algorithms, session timeouts,
and multiplexing limits may all also represent avenues for
further tuning. The search space for such an optimization
problem is enormous and exceeds the remit of this paper -
especially given that default QUIC implementations already
offer substantial security and performance beneﬁts over the
status quo. Nevertheless, the approach presented through this
case study demonstrates how the testbed environment and
benchmarks we developed for evaluating QPEP might be
leveraged more broadly for protocol performance research.
VIII. FUTURE WORK
The QPEP implementation presented here is a proof-of-
concept and productive use would beneﬁt from additional
features. In Section V-C we outline a few intuitive starting
points, such as support for non-TCP protocols and the imple-
mentation of 0-RTT session initialization which is robust to
replay attacks. Beyond 0-RTT, other QUIC feature proposals,
such as forward error correction or alternative congestion
control protocols to CUBIC, may provide routes for additional
performance gains.
13
As mentioned in Section II,
Under our threat model, ISPs are considered completely
untrusted. This means that QPEP conceals the nature of
customer trafﬁc from ISP Quality of Service optimizations.
Adding additional header layers which communicate QoS rel-
evant metadata to ISPs, while preserving privacy, may further
facilitate ISP-level integration of QPEP into customer routers.
the principal objective of
this research was to develop an encryption tool which could
be used to protect TCP trafﬁc by default
in satellite net-
works without meaningful reductions in performance. Even
default QUIC implementations meet or exceed this baseline
requirement without any modiﬁcation. However, future work
which considers the signiﬁcant but surmountable engineering
challenge of optimizing the performance of a QUIC tunnel
over satellite represents a logical next step.
Beyond the design of secure PEPs, the testbed presented
here may be useful for more general investigations of QUIC
performance over satellite. Thus, although unlikely in near-
term SATCOMs environments, if TCP ends up being phased
out in favor of QUIC or if “TLS-everywhere” transitions from
aspiration to reality, our contributions may be of enduring use
for general performance research.
individuals to run their own QPEP servers without sharing
sensitive metadata with ISPs or convincing their ISPs to
implement costly modiﬁcations to their existing network in-
frastructure. This offers an actionable near-term solution for
customers interested in protecting their privacy. In the longer-
term, QPEP’s architecture is also suited to ISP deployment on
modem equipment, allowing it to serve as a drop-in replace-
ment for proprietary TCP PEPs. QPEP is entirely software-
based and compatible with existing networking equipment and
protocols. This means the practical costs for a customer im-
plementing QPEP are on the same scale as any with any other
open-source VPN. That is to say, the main implementation
costs are those of renting a cloud host to run a QPEP server
and paying for the desired amount of bandwidth to connect
that server to the internet. This contrasts substantially with
many existing PEP implementations which are implemented
as physical “black-box” devices along the network path.
As the next generation of satellite broadband launches, en-
suring the privacy of TCP communications without sacriﬁcing
performance is more important than ever. The QPEP proof-of-
concept presented here demonstrates how careful consideration
of the unique physical dynamics of outer space can leverage
open and veriﬁable standards to meet this need.
IX. CONCLUSION
REFERENCES
[1] Viveris Technologies, OpenSAND, https://forge.net4sat.
org/opensand/opensand, Apr. 2019.
In this research, we have challenged the historical as-
sumption that security and performance must
trade off in
high-latency satellite networks. The result of this assumption
has been that tens of thousands of satellite customers, from
individuals to corporations, continue leak sensitive data to
potential wireless eavesdroppers in the status quo. By delving
into the underlying causes of inadequate encryption from GEO,
we isolated key physical and commercial dynamics which have
prevented the adoption of terrestrial encryption tools to the
SATCOM domain.
We have presented a new approach to encrypting TCP
satellite communications over-the-air through the use of QPEP
- a PEP/VPN hybrid which leverages the open QUIC protocol
standard to provide an encrypted UDP tunnel for the satellite
hop. QPEP is evaluated through replicable simulations in an
open-source benchmarking test suite we developed. These
tests allow for direct comparisons between PEP and satellite
encryption techniques and for targeted adjustments to various
physical conditions.
Through these simulations, we ﬁnd that QPEP is able
to provide satellite users with over-the-air encryption while
reducing page load times (PLTs) by more than 70% compared
to status-quo VPNs. Moreover, we ﬁnd that the use of QPEP is
unlikely to result in TCP performance reductions for users who
already employ insecure PEP products. Indeed, under certain