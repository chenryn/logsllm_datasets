 不管是否发生异常都希望执行的处理
end
```
现在，假设我们要实现一个拷贝文件的方法，如下所示。下面的 `copy` 方法是把文件从 `from` 拷贝到 `to`。
```ruby
def copy(from, to)
  src = File.open(from)         # 打开原文件from（A）
  begin
    dst = File.open(to, "w")    # 打开目标文件to（B）
    data = src.read
    dst.write(data)
    dst.close
  ensure
    src.close                   # （C）
  end
end
```
在（A）部分，如果程序不能打开原文件，那么就会发生异常并把异常返回给调用者。这时，不管接下来的处理是否能正常执行，`src` 都必须得关闭。关闭 src 的处理在（C）部分执行。`ensure` 中的处理，在程序跳出 `begin ～ end` 部分时一定会被执行。即使（B）中的目标文件无法打开，（C）部分的处理也同样会被执行。
# 重试
在 `rescue` 中使用 `retry` 后，`begin` 以下的处理会再重做一遍。
在下面的例子中，程序每隔 10 秒执行一次 `File.open`，直到能成功打开文件为止，打开文件后再读取其内容。
```ruby
file = ARGV[0]
begin
  io = File.open(file)
rescue
  sleep 10
  retry
end
data = io.read
io.close
```
不过需要注意的是，如果指定了无论如何都不能打开的文件，程序就会陷入死循环中。
# rescue 修饰符
与 `if` 修饰符、`unless` 修饰符一样，`rescue` 也有对应的修饰符。
```ruby
表达式 1 rescue 表达式 2
```
如果表达式 1 中发生异常，表达式 2 的值就会成为整体表达式的值。也就是说，上面的式子与下面的写法是等价的：
```ruby
begin
 表达式 1
rescue
 表达式 2
end
```
我们再来看看下面的例子：
```ruby
n = Integer(val) rescue 0
```
`Integer` 方法当接收到 `"123"` 这种数值形式的字符串参数时，会返回该字符串表示的整数值，而当接收到 `"abc"` 这种非数值形式的字符串参数时，则会抛出异常（在判断字符串是否为数值形式时经常用到此方法）。在本例中，如果 `val` 是不正确的数值格式，就会抛出异常，而 0 则作为 = 右侧整体表达式的返回值。像这样，这个小技巧经常被用在不需要过于复杂的处理，只是希望简单地对变量赋予默认值的时候。
# 异常处理语法的补充
如果异常处理的范围是整个方法体，也就是说整个方法内的程序都用 `begin ～ end` 包含的话，我们就可以省略 `begin` 以及 `end`，直接书写 `rescue` 与 `ensure` 部分的程序。
```ruby
def foo
 方法体
rescue => ex
 异常处理
ensure
 后处理
end
```
同样，我们在类定义中也可以使用 `rescue` 以及 `ensure`。但是，如果类定义途中发生异常，那么异常发生部分后的方法定义就不会再执行了，因此一般我们不会在类定义中使用它们。
```ruby
class Foo
 类定义
rescue => ex
 异常处理
ensure
 后处理
end
```
# 指定需要捕捉的异常
当存在多个种类的异常，且需要按异常的种类分别进行处理时，我们可以用多个 `rescue` 来分开处理。
```ruby
begin
 可能发生异常的处理
rescue Exception1, Exception2 => 变量
 对Exception1 或者Exception2 的处理
rescue Exception3 => 变量
 对Exception3 的处理
rescue
 对上述异常以外的异常的处理
end
```
通过直接指定异常类，可以只捕捉我们希望处理的异常。
```ruby
file1 = ARGV[0]
file2 = ARGV[1]
begin
  io = File.open(file1)
rescue Errno::ENOENT, Errno::EACCES
  io = File.open(file2)
end
```
在本例中，程序如果无法打开 `file1` 就会打开 `file2`。程序中捕捉的 `Errno::ENOENT` 以及 `Errno::EACCES`，分别是文件不存在以及没权限打开文件时发生的异常。
# 异常类
之前我们提到过异常也是对象。Ruby 中所有的异常都是 `Exception` 类的子类，并根据程序错误的种类来定义相应的异常。下图为 Ruby 标准库中的异常类的继承关系。
在 `rescue` 中指定的异常的种类实际上就是异常类的类名。`rescue` 中不指定异常类时，程序会默认捕捉 `StandardError` 类及其子类的异常。
`rescue` 不只会捕捉指定的异常类，同时还会捕捉其子类。因此，我们在自己定义异常时，一般会先定义继承 `StandardError` 类的新类，然后再继承这个新类。
```ruby
MyError = Class.new(StandardError)    # 新的异常类
MyError1 = Class.new(MyError)
MyError2 = Class.new(MyError)
MyError3 = Class.new(MyError)
```
这样定义后，通过以下方式捕捉异常的话，同时就会捕捉 `MyError` 类的子类 `MyError1`、`MyError2`、`MyError3` 等。
```ruby
begin
  ┊
rescue MyError
  ┊
end
```
在本例中，
```ruby
MyError = Class.new(StandardError)
```
上述写法的作用是定义一个继承 `StandardError` 类的新类，并将其赋值给 `MyError` 常量。这与 `class` 语句定义类的效果是一样的。
```ruby
class MyError < StandardError
end
```
使用 `class` 语句，我们可以进行定义方法等操作，但在本例中，由于我们只需要生成继承 `StandardError` 类的新类就可以了，所以就向大家介绍了这个只需 1 行代码就能实现类的定义的简洁写法。
# 主动抛出异常
使用 `raise` 方法，可以使程序主动抛出异常。在基于自己判定的条件抛出异常，或者把刚捕捉到的异常再次抛出并通知异常的调用者等情况下，我们会使用 `raise` 方法。
`raise` 方法有以下 4 种调用方式：
- raise message
  抛出 `RuntimeError` 异常，并把字符串作为 message 设置给新生成的异常对象。
- raise 异常类
  抛出指定的异常。
- raise 异常类，message
  抛出指定的异常，并把字符串作为 message 设置给新生成的异常对象。
- raise
  在 `rescue` 外抛出 `RuntimeError`。在 `rescue` 中调用时，会再次抛出最后一次发生的异常（`$!`）。