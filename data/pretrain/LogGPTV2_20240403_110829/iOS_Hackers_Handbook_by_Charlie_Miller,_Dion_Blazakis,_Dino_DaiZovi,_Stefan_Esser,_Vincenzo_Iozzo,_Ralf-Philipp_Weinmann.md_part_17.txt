__text:805F6DD0 PUSH {R7,LR} ; Push registers
__text:805F6DD2 MOV R7, SP ; Rd = Op2
__text:805F6DD4 LDR R0, =(sub_805FC498+1) ; Load from Memory
__text:805F6DD6 BLX R0 ; sub_805FC498
__text:805F6DD8 CMP R0, #0 ; Set cond. codes on Op1 - Op2
__text:805F6DDA IT NE ; If Then
__text:805F6DDC POPNE {R7,PC} ; Pop registers
__text:805F6DDE LDR R0, =off_805FE090 ; Load from Memory
__text:805F6DE0 MOVS R2, #0 ; xd
__text:805F6DE2 LDR R1, =dword_805FE6C0 ; Load from Memory
__text:805F6DE4 ADDS R0, #4 ; mpc
__text:805F6DE6 LDR R3, =(_mac_policy_register+1)
__text:805F6DE8 ADDS R1, #4 ; handlep
__text:805F6DEA BLX R3 ; _mac_policy_register
__text:805F6DEC POP {R7,PC} ; Pop registers
__text:805F6DEC ; End of function sub_805F6DD0
The fi rst argument of the register call is a pointer to a structure, mac_policy_
conf, confi guring the policy:
struct mac_policy_conf {
const char *mpc_name; /** policy name */
const char *mpc_fullname; /** full name */
const char **mpc_labelnames; /** managed label
namespaces */
unsigned int mpc_labelname_count;
/** number of managed label
cc0055..iinndddd 112222 44//1166//22001122 55::4444::2255 PPMM
Chapter 5 n Sandboxing 123
namespaces */
struct mac_policy_ops *mpc_ops; /** operation vector */
int mpc_loadtime_fl ags; /** load time fl ags */
int *mpc_fi eld_off; /** label slot */
int mpc_runtime_fl ags; /** run time fl ags */
mpc_t mpc_list; /** List reference */
void *mpc_data; /** module data */
};
In the iOS extension, this structure is located at off_805FE094, as shown in
the call to mac_policy_register. If you want to try this yourself, you should
import the mac_policy_conf and mac_policy_ops structures into IDA Pro.
Following is the mac_policy_conf structure found in my fi rmware:
__data:805FE094 sbx_mac_policy_conf DCD aSandbox_0 ; mpc_name ;
“Sandbox”
__data:805FE094 DCD aSeatbeltSandbo ; mpc_fullname
__data:805FE094 DCD off_805FE090 ; mpc_labelnames
__data:805FE094 DCD 1 ; mpc_labelname_count
__data:805FE094 DCD sbx_mac_policy_ops ; mpc_ops
__data:805FE094 DCD 0 ; mpc_loadtime_fl ags
__data:805FE094 DCD dword_805FE6C0 ; mpc_fi eld_off
__data:805FE094 DCD 0 ; mpc_runtime_fl ags
__data:805FE094 DCD 0 ; mpc_list
__data:805FE094 DCD 0 ; mpc_data
The confi guration contains a unique name to use for the TrustedBSD policy
(“Sandbox”) along with a longer description (“Seatbelt sandbox policy”). It
also contains a pointer to another structure containing a list of function point-
ers. This structure, mac_policy_ops, is used to request callbacks for various
events TrustedBSD is monitoring. You can fi nd the full structure defi nition
at xnu-1699.24.8/security/mac_policy.h:5971. As defi ned in the previous
mac_policy_conf, the iOS mac_policy_ops structure is found at 0x805FE0BC
(defi ned as sbx_mac_policy_ops in my IDB). The policy operations structure
gives all of the entry points into the sandbox policy extension. In the next
two subsections, you look at two functions in this structure: the mpo_policy_
syscall function, used to confi gure a process, and one of the mpo_xxx_check_yyy
calls used to validate an operation prior to allowing it.
Handling Confi guration from User Space
You previously looked at the interface TrustedBSD exposes to a policy extension.
Now, you look at the interface TrustedBSD exposes to user space. This interface is
defi ned in xnu-1699.24.8/security/mac.h and is exposed via xnu-1699.24.8/
bsd/kern/syscalls.master:
380 AUE_MAC_EXECVE ALL { int __mac_execve(char *fname, char **argp,
char **envp, struct mac *mac_p); }
381 AUE_MAC_SYSCALL ALL { int __mac_syscall(char *policy, int call,
cc0055..iinndddd 112233 44//1166//22001122 55::4444::2266 PPMM
124 Chapter 5 n Sandboxing
user_addr_t arg); }
382 AUE_MAC_GET_FILE ALL { int __mac_get_fi le(char *path_p,
struct mac *mac_p); }
383 AUE_MAC_SET_FILE ALL { int __mac_set_fi le(char *path_p,
struct mac *mac_p); }
384 AUE_MAC_GET_LINK ALL { int __mac_get_link(char *path_p,
struct mac *mac_p); }
385 AUE_MAC_SET_LINK ALL { int __mac_set_link(char *path_p,
struct mac *mac_p); }
386 AUE_MAC_GET_PROC ALL { int __mac_get_proc(struct mac *mac_p); }
387 AUE_MAC_SET_PROC ALL { int __mac_set_proc(struct mac *mac_p); }
388 AUE_MAC_GET_FD ALL { int __mac_get_fd(int fd, struct mac *mac_p); }
389 AUE_MAC_SET_FD ALL { int __mac_set_fd(int fd, struct mac *mac_p); }
390 AUE_MAC_GET_PID ALL { int __mac_get_pid(pid_t pid,
struct mac *mac_p); }
391 AUE_MAC_GET_LCID ALL { int __mac_get_lcid(pid_t lcid,
struct mac *mac_p); }
392 AUE_MAC_GET_LCTX ALL { int __mac_get_lctx(struct mac *mac_p); }
393 AUE_MAC_SET_LCTX ALL { int __mac_set_lctx(struct mac *mac_p); }
In this example, you’re interested in how mac_syscall is handled; this is the
syscall all of the user space functions discussed earlier in libsandbox ended
up calling. This call is provided for policy extensions to dynamically add sys-
calls of their own. The fi rst parameter is used to select the policy extension
by mpc_name (for the Sandbox, this will always be the NUL terminated string
“Sandbox”). The second parameter is used to select which subsyscall is called
in the policy. The last argument is a void * representing any arguments passed
to the policy subsyscall.
After looking up the policy by name, TrustedBSD calls the mpo_policy_
syscall function defi ned by that policy. In our fi rmware, the mpo_policy_
syscall function pointer for the “Sandbox” policy points to sub_805F70B4.
This function handles all configuration of the sandbox for a given
process. This function is where any audit of the syscall handling and
parsing should begin; most untrusted user space data is copied into the kernel
here.
At this point, the two sides, kernel and user, have met. You can follow a call
to sandbox_init from the example programs through libsandbox to the mac_
syscall trap into TrustedBSD and fi nally meet the sandbox kernel extension.
At this point, you’ve accumulated enough knowledge of the system to audit
the path of untrusted data from user space if you’re looking for a kernel bug.
On the other hand, this is not the place to begin looking for a sandbox escape.
The next section addresses this goal by examining the path a normal system
call takes through the sandbox and discussing how the operation is evaluated
against the process’s profi le.
cc0055..iinndddd 112244 44//1166//22001122 55::4444::2266 PPMM
Chapter 5 n Sandboxing 125
Policy Enforcement
In the previous subsection, the mac_policy_ops structure was consulted as a direct
result of a TrustedBSD-specifi c system call. Many of the fi elds in this structure
are used under the normal operation of a process. The TrustedBSD hooks have
been carefully inserted all over the kernel. For example, in xnu-1699.24.8/bsd/
kern/uipc_syscalls.c, the bind syscall will invoke the mac_socket_check_bind
function before proceeding to process the bind operation:
int
bind(__unused proc_t p, struct bind_args *uap, __unused int32_t *retval)
{
...
#if CONFIG_MACF_SOCKET_SUBSET
if ((error = mac_socket_check_bind(kauth_cred_get(), so, sa)) == 0)
error = sobind(so, sa);
#else
error = sobind(so, sa);
#endif /* MAC_SOCKET_SUBSET */
The function mac_socket_check_bind is defi ned in xnu-1699.24.8/security/
mac_socket.c. This function uses the MAC_CHECK macro discussed in Chapter 4,
where it iterates over each registered policy and calls the mpo_socket_check_bind
function if it has been defi ned in the mac_policy_ops structure for the policy:
int
mac_socket_check_bind(kauth_cred_t ucred, struct socket *so,
struct sockaddr *sockaddr)
{
int error;
if (!mac_socket_enforce)
return 0;
MAC_CHECK(socket_check_bind, ucred,
(socket_t)so, so->so_label, sockaddr);
return (error);
}
The sandbox extension defines a function to handle invocations of the
bind() syscall. Our version of the fi rmware defi nes mpo_socket_check_bind
as sub_805F8D54 (the +1 is an indication to switch to Thumb mode):
__data:805FE0BC DCD sub_805F8D54+1 ; mpo_socket_check_bind
__text:805F8D54 sub_805F8D54 ; DATA XREF:
com.apple.security.sandbox:__data:sbx_mac_policy_opso
__text:805F8D54
__text:805F8D54 var_C = -0xC
__text:805F8D54
cc0055..iinndddd 112255 44//1166//22001122 55::4444::2266 PPMM
126 Chapter 5 n Sandboxing
__text:805F8D54 PUSH {R7,LR} ; Push registers
__text:805F8D56 MOV R7, SP ; Rd = Op2
__text:805F8D58 SUB SP, SP, #4 ; Rd = Op1 - Op2
__text:805F8D5A MOV R2, R1 ; Rd = Op2
__text:805F8D5C MOVS R1, #0 ; Rd = Op2
__text:805F8D5E STR R1, [SP,#0xC+var_C] ; Store to
Memory
__text:805F8D60 MOVS R1, #0x37 ; Rd = Op2
__text:805F8D62 LDR.W R12, =(sub_805FA5D4+1) ;
Load from Memory
__text:805F8D66 BLX R12 ; sub_805FA5D4
__text:805F8D68 ADD SP, SP, #4 ; Rd = Op1 + Op2
__text:805F8D6A POP {R7,PC} ; Pop registers
__text:805F8D6A ; End of function sub_805F8D54
This function makes a single call to sub_805FA5D4 while passing the constant
0x37. This value is an index into the SBPL *rules* vector and corresponds to
the operation network-bind. The value 0x37 as it corresponds to network-bind
is defi ned in the sbpl1_scm script embedded in libsandbox. sub_805FA5D4
is checking the network-bind operation against the current process’s profi le.
(Soon, you’ll look at how this check is actually carried out.) The code to check
an operation against a profi le is tied tightly to the format of the profi le, so the
next subsection discusses the details of the profi le bytecode format.
How the Profi le Bytecode Works
While discussing the SBPL, you learned about the *rules* vector and how the
decision tree was used to encode the profi le logic. This decision tree is fl attened
and stored along with the strings and regular expressions to make up the profi le
bytecode that is passed to the kernel for a custom (that is, not built-in) sandbox.
The built-in profi les are in precompiled form in the sandboxd daemon. When a
process is sandboxed with a built-in profi le, the kernel sends a Mach message
to sandboxd asking for the bytecode. Recall that custom profi les are compiled
by libsandbox prior to the system call used to initialize the sandbox.
When the kernel receives the profi le in bytecode form, it parses the header
to extract the regular expressions used in some of the fi lters. After parsing the
regular expressions and storing them for easy access, this regular expression
cache and the bytecode are stored in the TrustedBSD process label reserved
for the sandbox extension. When an operation check callback is entered via the
TrustedBSD framework, the sandbox fi rst checks if there is a profi le associated
with the current process. If the process has a profi le, the bytecode is retrieved
and a number of SBPL operations are evaluated.
The enforcement module starts this evaluation in the decision tree at the node
corresponding to the operation being checked. The tree is walked and each
transition is chosen based on the fi lter associated with the node. Continuing
cc0055..iinndddd 112266 44//1166//22001122 55::4444::2266 PPMM
Chapter 5 n Sandboxing 127
the previous bind example, the decision node at offset 0x37 would be the start-
ing node. For the socket operations, a fi lter matching a range of port numbers
is available. This fi lter operation is checked and the appropriate transition is
taken, depending on whether the fi lter is met or not (a next node is provided for
both possibilities). Any node in the decision tree may be terminal; upon entry,
no fi lter is applied and a decision of allow or deny is made.
Now that you have an overview of how the evaluation is processed by the
kernel, you can continue tracing the bind call. The ongoing example ended
with a call to sub_805FA5D4. This function loads the sandbox from the process
label and then calls sb_evaluate. sb_evaluate is at 0x805FB0EC in the version
of the kernelcache we are using. This function walks the decision tree and
performs the operation evaluation as described earlier. This function is large
and complex, but if you really want to understand how a profi le is interpreted,
this is a good starting point. This is also a good function to use as an anchor
for fi nding out which kernel operations map to which SBPL operations. The
mapping is not one-to-one.
The fi nal piece of the puzzle is the binary format used to deliver the profi le
to the kernel. This can be derived from either the user space portion creating
the bytecode for custom profi les (compile from libsandbox) or the kernel code
that processes the profi le. On the kernel side, this parsing is split between the
regular expression parsing code and the sb_evaluate code. We’ve included a
pseudo-C description of the format. The profi le is logically arranged as a deci-
sion tree; evaluation of the profi le is done under a given operation (“Can this
process read a fi le at path X?”). The op_table provides the node to start at for
each operation. Given the current node and the operation attempted, evalua-
tion continues depending on the type of the current node. If the node is a result
node, the evaluation has produced a result (either allow or deny.) Otherwise,
the node is a decision node and a number of predicate fi lters may be applied
to the operation. If the fi lter accepts or matches the attempted operation, the
current node is set to the node identifi ed by the match_next value. Otherwise,
the current node is set to the nomatch_next value. These nodes form a binary
decision tree:
struct node;
struct sb_profi le {
union {
struct {
uint16_t re_table_offset;
uint16_t re_table_count;
uint16_t op_table[SB_OP_TABLE_COUNT];
} body;
struct node nodes[1];
} u;
cc0055..iinndddd 112277 44//1166//22001122 55::4444::2266 PPMM
128 Chapter 5 n Sandboxing
};
// Two different types of nodes in the decision tree. The result node is a
// terminal node; it produces a decision to allow or deny the operation. The
// decision node applies a fi lter to the attempted operations (“Does the path
// match ‘/var/awesome’?”) and will transition to one of two nodes depending
// on the result of the fi lter operation.
struct result;
#defi ne NODE_TAG_DECISION 0
#defi ne NODE_TAG_RESULT 1
// Each fi lter type uses the argument value differently. For example, the path
// literal argument is a fi lter offset (8 byte block offset from the start of the
// fi le). At that offset, there is a uint32_t length, a uint8_t padding byte, and
// an ASCII path of length bytes. The path regex fi lter argument is an index into
// the regex table. The fi lters correspond directly to those described in the
// Scheme SBPL script embedded in libsandbox. More details are available in the
// sbdis.py script included in the source package.
struct decision;
#defi ne DECISION_TYPE_PATH_LITERAL 1
#defi ne DECISION_TYPE_PATH_REGEX 0x81
#defi ne DECISION_TYPE_MOUNT_RELATIVE 2
#defi ne DECISION_TYPE_XATTR 3
#defi ne DECISION_TYPE_FILE_MODE 4
#defi ne DECISION_TYPE_IPC_POSIX 5
#defi ne DECISION_TYPE_GLOBAL_NAME 6
#defi ne DECISION_TYPE_LOCAL 8
#defi ne DECISION_TYPE_REMOTE 9
#defi ne DECISION_TYPE_CONTROL 10
#defi ne DECISION_TYPE_TARGET 14
#defi ne DECISION_TYPE_IOKIT 15
#defi ne DECISION_TYPE_EXTENSION 18
struct node {
uint8_t tag;
union {
struct result terminal;
struct decision fi lter;
uint8_t raw[7];
} u;
};
struct result {
uint8_t padding;
uint16_t allow_or_deny;
};