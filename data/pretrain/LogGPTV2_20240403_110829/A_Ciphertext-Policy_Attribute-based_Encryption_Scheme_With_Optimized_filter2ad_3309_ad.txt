Pr
=
1
2
+ AdvA
When T is a random group element the message M∗
b
is completely hidden from the adversary and we have
P r[S((cid:126)Y , T = R) = 0] =
1
2
Therefore, the simulator can play the Modiﬁed - BDHE
game with non-negligible advantage (equal to AdvA)
or she can break the security of Modiﬁed-BDHE as-
sumption.
4. PERFORMANCE ANALYSIS
From a performance perspective, it is worth mentioning
that our construction being an improvement of the scheme
proposed in [18], it will perform as good as in the worst
case, which is when the number of clauses is bigger than
the size of the boolean formula. And [18] was already one
of the best performing CP-ABE schemes. In the more fa-
vorable case where the number of clauses is smaller than
the size of the boolean formula our scheme performs much
better since the ciphertext becomes linear in the number of
clauses instead of size of the LSSS matrix, and decryption
time remains the smallest of all CP-ABE schemes proposed
in the literature.
If we dig deeper, we can observe that
our new decryption algorithm just needs two pairings and
|I| multiplications in G, while in [18] it needs two pairings,
2|I| exponentiations, and 2|I| multiplications in G. Further-
more, since the user just needs to keep du0 secret, she can
delegate some computing works to a third party so that she
only needs to compute one pairing when decrypting, as we
will explain in section 5.1. To be more precise we give a
comparison table in table 2 where we see various schemes
proposed in the literature compared to ours.
Remark 2 Our scheme targets CP-ABE with ﬁne grained
access policies that can be expressed as boolean formulas and
is the most eﬃcient to do so. There is a category of eﬃ-
cient algorithms targeting a more speciﬁc policy, the (t,n)-
threshold policy. Such policy can be expressed with boolean
formulas as a DNF and be supported by our construction.
In that case, our construction will be less eﬃcient than the
dedicated algorithms, because the resulting DNF will have
a larger number of clauses. However our construction is
(cid:33)
236[15]
[19]
[26].1
[18](3.5)
[23]
[2]
Ours
Policy
Tree
CNF
LSSS
LSSS
LSSS
LSSS
LSSS/DNF
Private Key
Ciphertext
O(N · (cid:96)3.42) O(|B(u)| · (cid:96)3.42)
(2N + |B(u)|)
(2m + 1)
(|B(u)| + 2)
(2(cid:96) + 1)
(kmax|B(u)| + 2)
((cid:96) + 1)
(2|B(u)| + 2)
(3(cid:96) + 2)
O((B(u)∗.(cid:96)∗)4)
(kmax|B(u)| + 2)
(m(cid:48) + 1)
O(1)
Decryption Time
O(N · (cid:96)3.42)P
(2m + 1)P
(2|I| + 1)P
(3|I| + 1)P
2P
3|I|P
2P
Assumption
d-BDH
GDDHE
q-parallel BDHE
BDHE
q-type
Parametrized
Modiﬁed-BDHE
Figure 2: N denotes the maximal number of attributes in the system, (cid:96) denotes the number of rows of the
LSSS matrix, (cid:96)∗ denotes the maximum of (cid:96) (that should be N ), |B(u)| denotes the size of attribute set of a
decryption key, B(u)∗ denotes the maximum of |B(u)|, m is the number of clauses in a CNF or DNF. Note
that m(cid:48) = m if m ≤ (cid:96), else m(cid:48) = (cid:96). |I| is the number of attributes for a decryption key to satisfy a ciphertext
policy, P denotes Pairing computation, kmax denotes the maximal number of times where one attribute can
be reused in an access formula.
more generic as it supports more expressive policies than
simply threshold ones. Moreover threshold policy is not a
ﬁne-grained access policy since there is no distinction among
attributes. It is therefore fair to say that our approach is the
most eﬃcient for generic and ﬁne-grained policies.
5. EXTENSIONS
In this section we discuss two extensions that can further
improve the performance or security of our construction.
5.1 Minimizing The User’s Storage
We ﬁrst show that our scheme is still secure under the
same assumption if the user keeps only one element du0
secret. This is a very useful property in cloud-based sce-
nario as it implies that the user can store a minimal amount
of information and delegate some computations in the en-
cryption and decryption phases to the cloud. This means
that the client can thus save both storage and computation
power.
To establish this property, we need to prove that the sim-
ulator still can simulate the adversary when the user keeps
only the element du0 secret. More precisely, regarding a
challenge key d∗
u (which can be used to decrypt the chal-
lenge ciphertext), the simulator now needs to provide d∗
u
for the adversary except the secret part d∗
u0 . We sketch the
proof as follows.
First, the simulator does the same as in the proof above,
implicitly sets α = α(cid:48) + aq+1 where aq+1 is the challenge
term from the assumption, therefore she can embed the
challenge term from the assumption to gα. Although simu-
lator doesn’t know gaq+1
, she can manage to choose su such
that ga·su contains the term g−aq+1
which cancels out the
unknown term gaq+1
in gα. Thus, for the not challenge key
the simulator compute
gar (cid:89)
i=2,...,n∗
du0 = gα(cid:48)
(gaq+1−i
)xi = gα · ga·su
Note that with such chosen su, the simulator only can com-
pute the not challenge key du /∈ {d∗
u} as explained in the
proof. Fortunately, for the challenge key d∗
u the simula-
tor doesn’t need to compute d∗
u0 , moreover the term gα
doesn’t appear anywhere except in the part d∗
u0 , therefore
she doesn’t need to manage to choose s∗
u to cancel out gaq+1
,
she in fact can choose randomly s∗
u and then uses the public
parameter to compute the secret key d∗
u (of course except
the d∗
u0 part). This leads to the fact that the simulator still
successfully simulates the adversary which means that the
security of the scheme is still unchanged. Finally, we re-
mark that the above trick also can be applied to some other
schemes such as [26, 18, 23] which share a similar key struc-
ture to ours. That shows that our scheme is still secure in
the case m > (cid:96).
5.2 Multi-Authorities
In this section, we show that our scheme can be extended
to support multi-authorities. The idea is to use the splitting
technique to split the master key gα into θ parts correspond-
ing to θ authorities. This eﬃciently solves the problem of
key escrow by the authority which is one of the weaknesses
of current CP-ABE schemes.
To be more precise, in the extract phase, the user needs
to get θ partial secrete keys from θ authorities to compute
the full secret key. On the other hand, the colluding of up
to θ − 1 curious authorities cannot compute the full secret
key of user. For completeness we provide the deﬁnition
of multi-authority ABE scheme and the security model in
Appendix A.
Regarding the construction, we will make some changes
on the setup algorithm and extract algorithm while we re-
tain the encryption and decryption algorithms. For the se-
curity, in our system we have an additional new type of
adversary called the curious authority (Type II adversary),
we need to prove that our scheme is secure against this
adversary. We detail the construction and the security as
follows.
5.2.1 Description of the multi-authorities construc-
tion
Setup(λ,B, θ): The algorithm takes as input the security
parameter, attribute universe description, and the max-
imum number of authorities θ in the system. It gen-
erates the parameters of the system as follows: Let
N = |B| be the maximal number of attributes in the
system and let (p, G, GT , e(·,·)) be a bilinear group
system. The algorithm ﬁrst picks a random generator
g ∈ G, a random scalar a ∈ Zp, and then computes ga.
Next, the algorithm generates N group elements in G
associated with N attributes in the system h1, . . . , hN .
Next, the authority i ∈ [1, . . . , θ] picks a random scalar
αi ∈ Zp. Computes gαi , e(g, g)αi , sets MSKi = gαi as
his secret key and e(g, g)αi as his public key.
237The algorithm implicitly sets α = α1 + ··· + αθ, then
computes e(g, g)α = e(g, g)α1 ··· e(g, g)αθ .
The global parameters are set
param = (g, ga, h1, . . . , hN , e(g, g)α)
Extract(u,B(u), MSKi, param): This algorithm is run by
the authority i-th. For notational simplicity, assume
that the set of attributes of user u is B(u) = (Att1, . . . , Attk),
u ∈ Zp, the i-th partial
k ≤ N . Picks randomly scalar si
secret key for user u is di
u = (di
u0 , d
uk )
where:
u0 = gαi · ga·si
di
(cid:48)i
u0 = gsi
u1 = hsi
1 , . . . , di
u1 , . . . , di
uk = hsi
k
u
(cid:48)i
u0 , di
u , d
u , di
u
The above algorithm is run θ times by θ diﬀerent au-
thorities. Finally, the full secret key of user is set
du0 = gα · ga·su , d
where: su = s1
(cid:48)
u0 = gsu , du1 = hsu
1 , . . . , duk = hsu
u + ··· + sθ
u.
k
Encrypt(M, β, param): unchanged.
We notice that (hρ(i))i∈Ij , j = 1, . . . , m, are disjoint
subsets.
Decrypt(ct, du,B(u), param): unchanged
Remark 3 Compared to other existing multi-authority ABE
schemes supporting ﬁne-grained access policies [20, 24] the
advantage of our scheme is that it achieves ful user pri-
vacy and not partial user privacy as in their schemes. In
fact their scheme aim at distributing the set of attributes
among diﬀerent authorities and they do not eﬃciently solve
the problem of key escrow, they simply distribute the load
and responsibility among diﬀerent authoritites by making
each authority responsible for a disjoint set of attributes (but
the authorities can still decrypt messages where the access
policy is expressed with attributes from only one authority).
Moreover, the eﬃciency of our scheme is better than the
eﬃciency of their schemes in terms of ciphertext size and
decryption time.
5.2.2
Regarding the Type I adversary, it is the same as in the
Security Proof
section 3.1, here we will focus on the Type II adversary.
Theorem 2 Assume that β∗ is the challenge access policy
and from β∗ construct the corresponding challenge LSSS
matrix L’ of size (cid:96)(cid:48) × n(cid:48) and map function ρ(cid:48). Describe
β∗ = β∗
i , i = 1, . . . , m are disjoint sets
and then construct the corresponding challenge LSSS ma-
trix L∗ of size (cid:96)∗ × n∗ and map function ρ∗. If those LSSS
matrices satisfy (cid:96)(cid:48), n(cid:48), (cid:96)∗, n∗ ≤ q, our scheme is selectively
secure against Type II adversary under the Modiﬁed-BDHE
assumption.
1 ∨ ··· ∨ β∗
m where β∗
Proof. Compare to the Type I adversary, for the Type
II adversary the simulator needs to provide additional θ − 1
partial master keys, without loss of generality we suppose
that these are MSK1, . . . , MSKθ−1.
The simulator simply picks randomly θ−1 scalars α1, . . . ,
αθ−1 and implicitly sets αθ = α−α1−···−αθ−1. Note that
the simulator doesn’t know αθ, however she knows e(g, g)α
thus she still can compute e(g, g)αθ . Therefore, she can pro-
vide the master keys MSK1, . . . , MSKθ−1 to the adversary.
The rest of the proof still remains.
6. CONCLUSION
In this paper, we propose a CP-ABE scheme that extends