### 4.1.1. Analysis of Fault Injection Results

For each category presented in Section 3, the corresponding 95% confidence intervals and the observed number of errors are provided in the table. The results indicate that most undetected wrong results caused by bit-flips in the CPU were minor value failures, which had no or minimal impact on the controlled object (4.48% of all faults injected). However, 0.54% of the injected faults had a severe impact on the controlled object, corresponding to 10.73% of all value failures produced.

The data also show that faults injected into the data cache of Thor resulted in a higher percentage of undetected wrong results (6.06%) compared to faults injected into the registers (0.91%). A detailed investigation revealed that most of the severe undetected wrong results were caused by faults injected into the cache lines where the global variable \( x \) (representing the state, as seen in Algorithm I) is stored. Since \( x \) represents the state, any errors in \( x \) will propagate to the next iteration of the algorithm, causing permanent or semi-permanent value failures, as illustrated in Figures 7 and 8.

### 4.1.2. Non-effective Errors

Non-effective errors are those that could not be identified as either detected errors or undetected wrong results. These errors are classified into two categories: latent errors and overwritten errors.

- **Latent Errors**: In these fault injection experiments, differences between the correct system state (logged during the reference execution) and the system state (logged after the fault injection experiment terminated) could be observed, but they could not be classified as either detected errors or undetected wrong results.
  
- **Overwritten Errors**: For these fault injection experiments, no differences between the correct system state (logged during the reference execution) and the system state (logged after the fault injection experiment terminated) could be observed.

### Table 2. Results for Algorithm 1

| Part of CPU | Address Error | Data Error | Instruction Error | Jump Error | Constraint Check | Access Check | Storage Error | Flow Control Errors | Other Errors | Undetected Wrong Results (Severe) | Undetected Wrong Results (Minor) | Total (Effective Errors) | Total (Faults Injected) | Total (Undetected Wrong Results) | Coverage |
|-------------|---------------|------------|-------------------|------------|-----------------|--------------|---------------|---------------------|--------------|----------------------------------|----------------------------------|--------------------------|-------------------------|---------------------------------|----------|
| Cache (1824) | 72.28% ± 1.02% | 5358 | 19.98% ± 1.81% | 375 | 61.71% ± 0.99% | 5733 | 72.33% ± 1.02% | 5362 | 79.97% ± 1.31% | 15011 | 73.88% ± 0.89% | 68631 | 6.06% ± 0.54% | 449 | 93.34% ± 0.00% | 4.37% ± 0.92% | 0.37% ± 0.28% | 2.08% ± 0.65% | 0.05% ± 0.10% | 0.00% ± 0.00% | 0.27% ± 0.23% | 9.80% ± 1.35% | 0.11% ± 0.15% | 0.80% ± 0.40% | 1.07% ± 0.46% | 0.32% ± 0.26% | 0.05% ± 0.10% | 0.85% ± 0.42% | 20.03% ± 1.81% | 82 | 7 | 39 | 1 | 0 | 5 | 184 | 2 | 15 | 20 | 6 | 1 | 16 | 376 | 0.06% ± 0.05% | 0.71% ± 0.00% | 1330 | 14.32% ± 0.00% | 7 | 1.61% ± 0.26% | 150 | 6 | 0.06% ± 0.05% | 0.01% ± 0.02% | 1 | 6 | 2.09% ± 0.29% | 194 | 0.02% ± 0.03% | 2 | 0.79% ± 0.18% | 1.99% ± 0.28% | 185 | 73 | 0.08% ± 0.06% | 7 | 0.54% ± 0.15% | 50 | 4.48% ± 0.42% | 416 | 26.12% ± 0.89% | 2427 | 7413 | 100.00% | 94.09% ± 0.43% | 0.91% ± 0.43% | 17 | 1877 | 100.00% | 92901 | 5.02% ± 0.44% | 466 | 94.98% ± 0.44% |

### 4.3. Adding Executable Assertions and Best-Effort Recovery

The results for Algorithm I show that errors in the state variables stored in the data cache can cause severe value failures. One way to prevent single bit-flips from affecting sensitive data in the cache is to use a parity-protected cache. However, parity-protected caches may not be available in off-the-shelf commercial (COTS) microprocessors, and the cost of using custom-designed microprocessors with parity-protected caches may be prohibitive. Therefore, a cost-effective software-based solution to reduce the amount of severe value failures is presented. This solution involves protecting the state variables and output signals with executable assertions and best-effort recovery mechanisms.

Three approaches were adopted to make the control algorithm more robust against severe value failures:

1. **Executable Assertions for State Variables and Output Signals**:
   - The state variable \( x \) and the limited output signal \( u_{\text{lim}} \) are protected by executable assertions to detect errors using the physical constraints of the controlled object. The constraints used in this study are based on the physical limitations of the engine throttle. Assertions are made on the state variable \( x \) and the limited output signal \( u_{\text{lim}} \) just before a backup of the variables is made, thereby reducing the probability of error propagation.

2. **Best-Effort Recovery for Incorrect State**:
   - When an incorrect state is detected by an executable assertion during one iteration of the control algorithm, a recovery is made by using the state backed up during the previous calculations. Note that this is not a true recovery, as the input to the controller may differ from the input used in the previous iteration. This may result in the output being slightly different from the fault-free output, thus creating a minor value failure. We call this a best-effort recovery.

3. **Best-Effort Recovery for Incorrect Output**:
   - When an incorrect output is detected by an executable assertion, recovery is made by delivering the output produced in the previous iteration instead. The state variable is also set to the state of the previous iteration that corresponds to the delivered output. This approach is also a best-effort recovery since the effects on the output will be similar to those of the second approach.

### Algorithm II: PI Controller with Executable Assertions and Best-Effort Recovery Mechanisms

```pseudocode
x : float
x-old, u-old : float

function PI-Controller(r, y : float)
    Kp, T : constant float -- constants
    e, U, U-lim : float -- state of the controller
    -- two back-up states
    begin
        e = r - y
        if not in-range(x) then
            x = x-old
            x-old = x
        else
            Ki = 0.0
            Ki = integral-gain
            x = x + T * e * Ki
        end if
        if not in-range(u-lim) then
            u-lim = u-old
            x = x-old
        end if
        U = e * Kp + x
        U-lim = limit-output(U) -- range check of U
        if anti-windup-activated then
            -- disable integration
        else
            -- enable integration
        end if
        u-old = U-lim
        return U-lim
    end
end function
```

### General Approach for Robust Control Algorithms

A general approach for making a control algorithm with an arbitrary number of state variables and output signals more robust can be summarized as follows:

- **Before Making a Backup of Any State Variable**:
  - Before backing up any state variable \( x_i(k) \), \( 0 < i < \text{totalNrOfStates} \), an assertion is made to validate the correctness of \( x_i(k) \). If an erroneous value is detected, a best-effort recovery is made by executing \( x_i(k) = x_i(k - 1) \), \( 0 < i < \text{totalNrOfStates} \). Otherwise, the state is backed up by executing \( x_i(k - 1) = x_i(k) \), \( 0 < i < \text{totalNrOfStates} \).

- **Before Returning the Output Results**:
  - Before returning the output results \( u_j(k) \), \( 0 < j < \text{totalNrOfOutputs} \), an assertion is made to validate the correctness of \( u_j(k) \), \( 0 < j < \text{totalNrOfOutputs} \). If an incorrect output result is detected, a best-effort recovery is made by executing \( u_j(k) = u_j(k - 1) \), \( 0 < j < \text{totalNrOfOutputs} \) and \( x_i(k) = x_i(k - 1) \), \( 0 < i < \text{totalNrOfStates} \).
  - Back up the output signals \( u_j(k - 1) = u_j(k) \), \( 0 < j < \text{totalNrOfOutputs} \).
  - Return the output signals \( u_j(k) \), \( 0 < j < \text{totalNrOfOutputs} \).

### 4.4. Results for Algorithm II

[Results for Algorithm II would be presented here, following the same structure and clarity as the rest of the document.]