An Insider’s Options
Michael Rich
PI:EMAIL
 The Challenge
 The Tools Available
 Phase 0 – Set up
 Phase 1 – Hex Attack
 Phase 2 – Attack of the Big Barcode
 Bringing it all Together
 Future/Branch Research Paths
 Conclusion
 There I was, hacking the collaboration portal..
 How could I intercept the POST call to modify 
the inputs?
 Tamper Data, Burp Suite, etc..
How could  I forge the POST call?
 Curl, wget, etc..
 Eventually:  “How could I load one of these 
tools on to my closed, secure network without 
getting caught?”
 Closed, secured network (sort of)
 USB ports secured & monitored
 CD use secured & monitored
 Host-based security system
 Data transfer entry points do exist (DOTS)
 Not in control of attacker
 Unknown scanning rules
 Leaves logs
 Windows / MS-Office environment
 MS Office = Visual Basic for Applications
 Professional level printers & scanners
 Adobe Acrobat OCR
 Put Excel into attack mode
 Consolas Font – Down to 8 pt font
 Use Phase 0 methods to make Excel a binary 
file hex encoder/decoder 
 Why hex?
 Printable text
 Tests showed excellent OCR results
Hex Encoding
Base64 Encoding
Encoding
Consolas, 8 pt font
Consolas, 12 pt font
Word Length Errors 
(80 char words)
0 in 73 words
9 in 73 words
Transcription Errors
0 in 5840 symbols
216 in 5840 symbols
Error Types
1 to 1
Many to Many
 Hex Encoding is good, but probably not perfect
 Need compact error detection
 2-byte XOR checksum
 Assumptions, assumptions, assumptions
1551 errors in 135,420 symbols (1.1 % error)
 B to 8: 261; 1 to l: 359; 5 to S: 864
 D to 0, O: 57;  6 to G,q,b: 3
 Alternative characters:
 # for B
 ? for D
 Auto-replace other major errors
 “l”, “S”, “.”, “ “
 Add strong visual indicators
 1 manual correction in 1210 lines of text
Demo Time!
 Pros:
 Extremely reliable
 Can be entered by hand if no scanner
 Cons:
 Low data density: ~3.6K per page best case
 Common Tools:
 PowerSploit: 835 kB = 232 pages
 Mimikatz: 538 kB = 150 pages
 No exfiltration “compression” advantage
 ~ 25K data per page
 60% error correction
 Good features
 Timing lines
 Reed-Solomon FEC
 Different design 
problem
 I can make it better!
 Data grid where each pixel represents one bit 
state (white = 1, black = 0)
 Printed at 72 dpi, get about 88 bytes across
 ~  85 kB data per page 
 Finding the timing marks
 Start with raster scan across the image
 Finding centers of timing marks
 “Wiggle Fit” from “root” pixel
 Best mask fit
 Timing mark location is very successful:
 Once all timing marks found, simply compute 
a grid of intersections to locate data:
 Results:
 20K of binary data: 189 bytes missed (0.953% error)
 65K of binary data: 491 bytes missed (0.76% error)
 72K of ASCII data: 972 bytes missed (1.35% error)
 Forward ERASURE Correction
 Forward ERROR Correction
P1
Block 1
P2
Block 2
P3
Block 3
P4
Block 4
Block 1
Block 2
Block 3
Block 4
C1
P1
Block 1
C2
P2
Block 2
C3
P3
Block 3
C4
P4
Block 4
B1
B2
B3
B4
B5
B6
B7
P1
P2
P3
P4
 Reed Solomon encoding
Codewords can be 2s symbols long, each symbol s-bits wide
 S = 8, codeword is 255 symbols; each symbol 8 bits wide
 S = 16, codeword is 65535 symbols; each symbol 16 bits wide
 Codewords can be less than n symbols long
Can correct up to “t” symbol errors (2 parity symbols 
required for find and correct each error)
From http://www.cs.cmu.edu/~guyb/realworld/reedsolomon/reed_solomon_codes.html
 Few open-source error correction libraries
 Those that do are 28 only
https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders
 With s=8, k=140 to work reliably
 ~47 kB per page of data (~38 kB of parity)
 PowerSpoit: 18 pages (vs. 232 pages in hex)
 Mimikatz: 12 pages (vs. 150 pages in hex)
Demo Time!
 Goal: Using techniques described here, install 
PowerSploit on a machine
Step
Result
Interpret a page-sized bar code
Reed-Solomon Encoder/Decoder
Build Sideload Library
Encode, Print, Scan, Decode payload with 
library
Print, Scan, and load hex encoder/decoder 
into Excel
Emplace library using hex OCR method
Encode/decode using DLL called from 
Excel
 Big Bar Code
 Reduce size of BBC DLL
 Improve error rates
 Get 2^16 Reed Solomon FEC working
 Add color to BBC
 Excel-a-sploit
 Hex Editor
 Steganographic encoder/decoder
 Restore command prompt
 Direct DLL injection?
 Big Bar Code POC was a success
 Standard office tools provide a lot of power
 If a user can code, a system is not secure
 Innocuous input/output systems can be used 
for creative purposes