# An Insider’s Options
## Michael Rich
### PI: EMAIL

#### The Challenge
How can an insider intercept and modify a POST call on a collaboration portal within a closed, secure network without getting caught?

#### The Tools Available
- **Interception and Modification:** Tamper Data, Burp Suite
- **Forging the POST Call:** Curl, wget
- **Loading Tools onto a Secure Network:** Various methods to bypass security measures

#### Phase 0 – Set Up
- **Network Environment:**
  - Closed, secured network
  - USB ports and CD use are secured and monitored
  - Host-based security system
  - Limited data transfer entry points (DOTS)
  - Unknown scanning rules
  - Logs are generated
- **Software Environment:**
  - Windows / MS-Office environment
  - MS Office with Visual Basic for Applications (VBA)
  - Professional-level printers and scanners
  - Adobe Acrobat OCR

#### Phase 1 – Hex Attack
- **Excel as a Binary File Encoder/Decoder:**
  - Use Consolas font at 8 pt for optimal OCR results
  - Encode and decode binary files using hex encoding
- **Hex Encoding vs. Base64 Encoding:**
  - **Hex Encoding:**
    - Printable text
    - Excellent OCR results
    - Error rates:
      - Word Length Errors (80 char words): 0 in 73 words
      - Transcription Errors: 0 in 5840 symbols
  - **Base64 Encoding:**
    - Higher error rates
    - Error types: Many-to-many
- **Error Detection:**
  - 2-byte XOR checksum
  - Assumptions and error correction
  - 1551 errors in 135,420 symbols (1.1% error rate)

#### Phase 2 – Attack of the Big Barcode
- **Data Grid Representation:**
  - Each pixel represents one bit state (white = 1, black = 0)
  - Printed at 72 dpi, approximately 88 bytes across
  - ~85 kB data per page
- **Timing Marks:**
  - Raster scan to find timing marks
  - "Wiggle Fit" from root pixel
  - Best mask fit
  - High success rate in locating timing marks
- **Results:**
  - 20K of binary data: 189 bytes missed (0.953% error)
  - 65K of binary data: 491 bytes missed (0.76% error)
  - 72K of ASCII data: 972 bytes missed (1.35% error)

#### Forward Error Correction
- **Reed-Solomon Encoding:**
  - Codewords can be up to 2^s symbols long, each symbol s-bits wide
  - S = 8: Codeword is 255 symbols; each symbol 8 bits wide
  - S = 16: Codeword is 65535 symbols; each symbol 16 bits wide
  - Can correct up to “t” symbol errors (2 parity symbols required for each error)
- **Implementation:**
  - With s=8, k=140 to work reliably
  - ~47 kB per page of data (~38 kB of parity)
  - PowerSploit: 18 pages (vs. 232 pages in hex)
  - Mimikatz: 12 pages (vs. 150 pages in hex)

#### Bringing It All Together
- **Goal: Install PowerSploit on a Machine**
  - **Step 1:** Interpret a page-sized barcode
  - **Step 2:** Use Reed-Solomon Encoder/Decoder
  - **Step 3:** Build a sideload library
  - **Step 4:** Encode, print, scan, and decode payload with the library
  - **Step 5:** Print, scan, and load hex encoder/decoder into Excel
  - **Step 6:** Emplace library using hex OCR method
  - **Step 7:** Encode/decode using DLL called from Excel

#### Future/Branch Research Paths
- **Big Bar Code (BBC) Improvements:**
  - Reduce size of BBC DLL
  - Improve error rates
  - Implement 2^16 Reed-Solomon FEC
  - Add color to BBC
- **Excel-a-sploit:**
  - Hex Editor
  - Steganographic encoder/decoder
  - Restore command prompt
  - Direct DLL injection

#### Conclusion
- **Demo Time!**
  - Extremely reliable
  - Can be entered by hand if no scanner
  - Low data density: ~3.6K per page best case
- **Key Takeaways:**
  - Standard office tools provide significant power
  - If a user can code, a system is not secure
  - Innocuous input/output systems can be used for creative purposes

This structured and detailed approach ensures clarity and professionalism, making the content more accessible and engaging.