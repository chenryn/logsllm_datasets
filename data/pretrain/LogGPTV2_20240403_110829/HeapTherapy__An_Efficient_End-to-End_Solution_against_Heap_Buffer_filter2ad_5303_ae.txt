against buffer overﬂows.
Third, although, with the current recompilation based
implementation, users of open-source software or software
companies can recompile their programs with HeapTherapy
to protect heap memory security, binary programs cannot
be protected conveniently. However, recompilation is not an
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
0 patch
1 patch, 1-page padding
5 patches, 1-page padding
5 patches, 5-page padding
10 patches, 5-page padding
DieHarder
2
1.8
1.6
1.4
1.2
1
0.8
0.6
0.4
0.2
0
i
e
m
T
n
o
i
t
u
c
e
x
E
d
e
z
i
l
a
m
r
o
N
Fig. 13: Speed overhead due to HeapTherapy. Each bar represents one experimental setting. For example, “5 patches, 5-page
padding” represents the setting where 5 simulated patches are applied based on the 5-VCCID set and each vulnerable buffer is
padded with 5 pages. The guard page is enabled for all vulnerable buffers. The last bar of each group is based on the related
work DieHarder.
inherent
limitation of the technique covered in the paper.
A binary-instrumentation based implementation is possible.
We are building tools to build PCC encoding into programs
through binary instrumentation, while the shared library of
HeapTherapy can be loaded through LD PRELOAD.
VII. OTHER POTENTIAL APPLICATIONS
While the focus of this paper is the heap buffer overﬂow
problem, HeapTherapy can generate patches to deal with
many other memory errors, such as double frees, dangling
pointers and uninitialized heap buffer read. We can extend
the speciﬁcation of the temporary patch to support more bug
types, and add bug-speciﬁc predeﬁned handling to the memory
allocation wrapper. We discuss some examples in the section.
One type of dangling pointer bugs is due to a premature
deallocation of some buffers. Assume the temporary patch that
ﬁxes a dangling pointer bug is generated. We can code a simple
handling, which is invoked when a free call is hooked: the
handling identiﬁes whether the buffer’s CCID matches the
VCCID in the patch; if so, the buffer’s deallocation is delayed.
Such that the pointer variable previously containing a dangling
pointer can be dereferenced safely.
To address an uninitialized heap buffer read bug, we write
a simple handling that zero-ﬁlls the newly allocated buffer.
malloc calls the handling only when the buffer’s CCID
matches the VCCID of a patch that treats an uninitialized read
bug. So that the effort of zero-ﬁlling is tailed to buffers where
an uninitialized read may occur.
The memory management wrappers search in the hash table
assembled with patches to determines what actions are needed,
and then enforce them on the buffers. Therefore, HeapTherapy
is extensible and new handling functions and patches can be
deﬁned to deal with new types of heap bugs.
VIII. CONCLUSIONS
We propose HeapTherapy, an end-to-end solution that per-
forms diagnosis and generates defenses against zero-day heap
buffer overﬂow attacks in realtime. HeapTherapy creatively
employs the calling context encoding to describe and identify
vulnerable buffers precisely and efﬁciently.
It does not have false positives, and remains effective under
polymorphic attacks. Our evaluation shows that it incurs a low
speed and memory overhead even when dealing with multiple
vulnerabilities simultaneously. It does not need infrastructure
for request recording and replaying, so HeapTherapy can be
used to protect personal applications as well as enterprise
services conveniently. The technique can be extended to deal
with other heap bugs, such as immature deallocation and
uninitialized read.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
for their invaluable comments. This work was supported by
ARO W911NF-09-1-0525 (MURI), NSF CNS-1223710, NSF
CNS-1422594, and ARO W911NF-13-0421 (MURI).
REFERENCES
[1] Domain name resolution request length limit. http://tools.ietf.org/html/
rfc1034.
[2] The pax project. https://pax.grsecurity.net/.
[3] Url request length limit.
http://www.checkupdown.com/status/E414.
html.
[4] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-ﬂow
In Proceedings of the 12th ACM Conference on Computer
integrity.
and Communications Security, pages 340–353. ACM, 2005.
[5] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing
memory error exploits with wit. In IEEE Symposium on Security and
Privacy, 2008., pages 263–277. IEEE, 2008.
[6] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy bounds checking:
an efﬁcient and backwards-compatible defense against out-of-bounds
errors. In Proceedings of the 18th USENIX Security Symposium, pages
51–66, 2009.
[7] E. D. Berger and B. G. Zorn. Diehard: Probabilistic memory safety for
unsafe languages. In Proceedings of the Conference on Programming
Language Design and Implementation, pages 158–168, 2006.
[8] E. Bhatkar, D. C. Duvarney, and R. Sekar. Address obfuscation: an
efﬁcient approach to combat a broad range of memory error exploits.
In Proceedings of the 12th USENIX Security Symposium, pages 105–
120, 2003.
[9] M. D. Bond and K. S. McKinley. Probabilistic calling context.
In
Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-
oriented Programming Systems and Applications, pages 97–112, 2007.
495495
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
[10] Bugzilla. Bug 2451 - CVE-2013-4243 libtiff (gif2tiff): possible heap-
based buffer overﬂow in readgiﬁmage(). http://bugzilla.maptools.org/
show bug.cgi?id=2451.
[11] M. Castro, M. Costa, and T. Harris. Securing software by enforcing
data-ﬂow integrity. In Proceedings of the 7th Symposium on Operating
Systems Design and Implementation, pages 147–160. USENIX Associ-
ation, 2006.
[12] W. Cheng, Q. Zhao, B. Yu, and S. Hiroshige. Tainttrace: Efﬁcient
ﬂow tracing with dynamic binary rewriting. In Proceedings of the 11th
Symposium on Computers and Communications (ISCC), pages 749–754.
IEEE, 2006.
[13] CloudFare.
The results of the cloudﬂare challenge.
cloudﬂare.com/the-results-of-the-cloudﬂare-challenge/.
https://blog.
[14] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang,
and P. Barham. Vigilante: End-to-end containment of internet worms.
In Proceedings of the ACM SIGOPS Symposium on Operating Systems
Principles, pages 133–147, 2005.
[15] C. Cowan and C. Pu. StackGuard: automatic adaptive detection and
prevention of buffer-overﬂow attacks. In Proceedings of the 7th USENIX
Security Symposium, pages 63–78, January 1998.
[16] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson, J. Knight,
A. Nguyen-Tuong, and J. Hiser. N-variant systems: a secretless
framework for security through diversity. In Proceedings of the 15th
USENIX Security Symposium, volume 6, pages 105–120, 2006.
[17] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman, M. Bailey, F. Li,
N. Weaver, J. Amann, J. Beekman, M. Payer, et al. The matter of
heartbleed.
In Internet Measurement Conference (IMC), pages 475–
488. ACM, 2014.
[18] Exploit. MySQL (Linux) Heap Based Overrun PoC Zeroday. http:
//www.exploit-db.com/exploits/23076/.
[19] Exploit. Openssl heartbeat poc with starttls support. https://gist.github.
com/takeshixx/10107280.
[20] H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and W. Gong. Anomaly
In Proceedings of the IEEE
detection using call stack information.
Symposium on Security and Privacy, pages 62–75, 2003.
[21] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible bounds
checking for arrays and pointers in C programs. In the International
Workshop on Automatic Debugging, pages 13–26, 1997.
[22] H.-A. Kim and B. Karp. Autograph: Toward automated, distributed
worm signature detection. In Proceedings of the 13th Conference on
USENIX Security Symposium, 2004.
[23] V. Kiriansky, D. Bruening, and S. P. Amarasinghe. Secure execution
via program shepherding. In Proceedings of the 11th USENIX Security
Symposium, volume 92, 2002.
[24] Launchpad.net. Heap overﬂow when parsing malformed URLs. https:
//bugs.launchpad.net/ubuntu/+source/lynx-cur/+bug/613254.
[26]
[25] N. Nethercote and J. Seward. Valgrind: a framework for heavyweight
dynamic binary instrumentation. In Proceedings of the ACM SIGPLAN
Conference on Programming Language Design and Implementation,
pages 89–100, 2007.
J. Newsome, D. Brumley, and D. Song. Vulnerability-speciﬁc execution
ﬁltering for exploit prevention on commodity software. In Proceedings
of the 13th Symposium on Network and Distributed System Security,
2005.
J. Newsome and D. Song. Dynamic taint analysis for automatic
detection, analysis, and signature generation of exploits on commodity
software. In Proceedings of Network and Distributed System Security
Symposium, 2005.
[27]
[28] NIST.
vulnId=CVE-2014-0160.
CVE-2014-0160.
http://web.nvd.nist.gov/view/vuln/detail?
[29] NIST. SAMATE Reference Dataset. http://samate.nist.gov/SRD.
[30] G. Novark and E. D. Berger. Dieharder: securing the heap. In Proceed-
ings of the 17th ACM Conference on Computer and Communications
Security, pages 573–584. ACM, 2010.
[31] G. Novark, E. D. Berger, and B. G. Zorn. Exterminator: Automatically
correcting memory errors with high probability. In Proceedings of the
Programming Language Design and Implementation, 2007.
[32] B. Perens.
efence.
efence(3) - Linux man page. http://linux.die.net/man/3/
496496
[33] D. K. Pradhan and N. Vaidya. Roll-forward checkpointing scheme:
A novel fault-tolerant architecture. IEEE Transactions on Computers,
43(10):1163–1174, 1994.
[34] F. Qin, J. Tucek, J. Sundaresan, and Y. Zhou. Rx: Treating bugs as
allergies—a safe method to survive software failures. In Proceedings
of the Twentieth ACM Symposium on Operating Systems Principles,
pages 235–248, 2005.
[35] P. Ratanaworabhan, V. B. Livshits, and B. G. Zorn. Nozzle: A defense
against heap-spraying code injection attacks. In Proceedings of the 18th
USENIX Security Symposium, pages 169–186, 2009.
[36] M. Rinard, C. Cadar, D. Dumitran, D. M. Roy, T. Leu, and W. S.
Beebee, Jr. Enhancing server availability and security through failure-
oblivious computing. In Proceedings of the 6th Conference on Sympo-
sium on Opearting Systems Design & Implementation, pages 303–316,
2004.
[37] W. K. Robertson, C. Kruegel, D. Mutz, and F. Valeur. Run-time
In The 17th Large Installation
detection of heap-based overﬂows.
Systems Administration Conference, volume 3, pages 51–60, 2003.
[38] O. Ruwase and M. S. Lam. A practical dynamic buffer overﬂow
In Proceedings of the 12th Symposium on Network and
detector.
Distributed System Security, pages 159–169, 2004.
[39] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov. Address-
sanitizer: A fast address sanity checker. In USENIX Annual Technical
Conference, pages 309–318, 2012.
[40] S. Sidiroglou, G. Giovanidis, and A. D. Keromytis. A dynamic
mechanism for recovering from buffer overﬂow attacks. In Proceedings
of the 8th International Conference on Information Security, pages 1–
15, 2005.
[41] S. Sidiroglou, M. E. Locasto, S. W. Boyd, and A. D. Keromytis. Build-
ing a reactive immune system for software services. In Proceedings of
the USENIX annual technical conference, pages 149–161, 2005.
[42] W. N. Sumner, Y. Zheng, D. Weeratunge, and X. Zhang. Precise calling
context encoding. In Proceedings of the 32nd ACM/IEEE International
Conference on Software Engineering, pages 525–534, 2010.
[43] Symantec.
Internet security threat report. http://www.symantec.com/
security response/publications/threatreport.jsp.
[44] D. Tian, Q. Zeng, D. Wu, P. L. 0005, and C. Hu. Kruiser: Semi-
synchronized non-blocking concurrent kernel heap buffer overﬂow
monitoring. In Proceedings of the 19th Annual Network and Distributed
System Security Symposium, 2012.
[45] US-CERT.
http://www.kb.cert.org/vuls/bymetric/.
Vulnerability
ranking.
[46] D. Wagner and D. Dean.
Intrusion detection via static analysis.
IEEE Symposium on Security and Privacy, pages 156–168, 2001.
In
[48]
[47] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A ﬁrst step towards
automated detection of buffer overrun vulnerabilities. In In Proceedings
of Network and Distributed System Security Symposium, pages 3–17.
J. Wang, M. Zhao, Z. Qiang, D. Wu, and P. Liu. Risk assessment
of buffer “heartbleed” over-read vulnerabilities (practical experience
report).
In 45th Annual IEEE/IFIP International Conference on De-
pendable Systems and Networks (DSN). IEEE, 2015.
J. Xu, Z. Kalbarczyk, and R. K. Iyer. Transparent runtime randomization
for security.
In Proceedings of 22nd International Symposium on
Reliable Distributed Systems, pages 260–269, 2003.
J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt. Automatic diagnosis
and response to memory corruption vulnerabilities. In Proceedings of
the 12th ACM Conference on Computer and Communications Security,
pages 223–234, 2005.
[49]
[50]
[51] Q. Zeng, J. Rhee, H. Zhang, N. Arora, G. Jiang, and P. Liu. DeltaPath:
Precise and Scalable Calling Context Encoding. In Symposium on Code
Generation and Optimization, 2014.
[52] Q. Zeng, D. Wu, and P. Liu. Cruiser: concurrent heap buffer overﬂow
monitoring using lock-free data structures.
the
32nd ACM SIGPLAN conference on Programming language design and
implementation, pages 367–377, 2011.
In Proceedings of
[53] B. Zorn and M. Seidl. Segregating heap objects by reference behavior
In Eighth International Conference on Architectural
and lifetime.
Support for Programming Languages and Operating Systems, pages
12–23, 1998.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply.