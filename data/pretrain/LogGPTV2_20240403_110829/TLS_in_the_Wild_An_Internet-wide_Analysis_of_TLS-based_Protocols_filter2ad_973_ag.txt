XOAUTH2
XYMCOOKIE
Connections
4.4%
4.3%
0.7%
0.5%
0.4%
0.3%
0.3%
0.03%
0.01%
Servers
39%
37%
10%
3.7%
1.8%
4.3%
3.7%
1.2%
0.6%
TABLE XIII: Combinations of authentication mechanisms
observed in connections on SUBMISSION port..
Mechanisms
PLAIN, LOGIN
LOGIN, PLAIN
LOGIN,PLAIN,XAOL-UAS-MB
PLAIN,LOGIN,XAOL-UAS-MB
GSSAPI
GSSAPI,NTLM
LOGIN,PLAIN,CRAM-MD5
DIGEST-MD5,CRAM-MD5
CRAM-MD5,DIGEST-MD5
PLAIN,LOGIN,CRAM-MD5
Other 17 combinations observed
Connections
1.82%
1.68%
0.19%
0.16%
0.11%
0.10%
0.09%
0.09%
0.09%
0.08%
1.09%
Servers
20.86%
18.40%
1.84%
1.84%
1.23%
1.84%
3.68%
0.61%
0.61%
0.61%
14.68%
nisms. This is consistent with our ﬁndings in Section IV-A that
showed that 97% of SUBMISSION connections upgraded their
connection using STARTTLS. Nonetheless, 71% of clients
who did not upgrade their connections also used plaintext
mechanisms to authenticate.
Moreover, 31% of observed IMAP servers (serving 16% of
passively observed connections) refused plaintext logins before
encryption (with the LOGINDISABLED capability).
V. RISKS, THREATS, AND MITIGATION
In this section, we ﬁrst summarise the current risks and
threats to Internet communication protocols, based on our
analyses. We also present recommendations on how to improve
the situation in the future. For our discussion, it is important
to consider which attacker one wishes to defend against:
some security conﬁgurations are strong enough against passive,
eavesdropping attackers. They are thus secure against global
pervasive monitoring of trafﬁc: active attacks require much
higher effort and can, in all likelihood, not be carried out on
global scale yet.
A. STARTTLS semantics
Many of the discussed communication protocols, and es-
pecially SMTP, rely on STARTTLS to initiate encrypted con-
nections. The problem is that, as shown in Section IV-A, less
than 51% of servers support upgrading connections to TLS.
Fortunately, some providers pushed strongly for better adoption
of TLS in the last years, increasing the share of connections
that use TLS by a signiﬁcant amount. Nonetheless, in the
13
B. Cipher use
A common problem is the continued choice of weak ciphers
in communication protocols. Depending on the protocol, we still
see up to 17% of connections choosing RC4, which has been
deprecated in [36]. This is in contrast to the Web at large, where
currently about 10% of connections use RC4 ciphers, according
to the ICSI Certiﬁcate Notary. This difference is likely caused
by the push to increment Web security in the last few years,
where academia, industry, and the open source community have
driven adoption of more modern ciphers. This movement does
not seem to have reached other, non-web protocols. Another fact
that supports this hypothesis is the high number of connections
that do not use forward-secure ciphers (more than 30% for
some of the protocols we observed).
Another issue is the use of Difﬁe-Hellman parameter sizes
3 of all observed connections.
of 1024 bits or less in more than 2
While there are some limited cases in which this might be
necessary for legacy compatibility20, it seems unlikely that this
is a conscious choice by server operators.
C. Certiﬁcate chains and their validity
We showed that a high number of servers, especially
as compared to earlier scans of the HTTPS protocol, serve
chains using broken or self-signed certiﬁcates. This is of
particular importance for SMTP with STARTTLS. If servers
with unveriﬁable certiﬁcates are actually able to receive email
from SSL/TLS-capable servers, this suggests that a signiﬁcant
number of servers are not verifying certiﬁcates in outgoing
connections or ignore certiﬁcate errors. This means that there
are likely many cases where SSL/TLS does not provide MitM
protection in server-to-server connections, a ﬁnding that is also
supported by [12]. As noted before, SMTP tends to prioritise
delivery before security (for good reason), and operators will
likely favour such an approach to ensure messages reach their
destination. On a more positive note, our passive data did
reveal that, unlike the servers at large, a much larger ratio of
the connections we observed used chains that we could verify.
We assume this to be due to the fact that large providers are
more capable and willing to invest the time in securing their
SSL/TLS setups.
D. Authentication methods
The more secure challenge-response authentication mech-
anisms for SMTP and IMAP do not seem to enjoy much
popularity: the methods PLAIN and LOGIN are preferred.
We speculate this is because operators tend to assume their
connections are already secure because of the use of SSL/TLS—
however, this is only true if certiﬁcates are actually correct and
strong ciphers are used. We also found that client authentication
methods are sometimes offered before the negotiation of a
SSL/TLS session—the vast majority being PLAIN and LOGIN
again. This means that an eavesdropper or active MitM can
collect the plaintext of speciﬁc messages and is also able to
acquire login credentials.
20Java7 cannot use DH parameters larger than 1024 bits; see http://blog.
ivanristic.com/2014/03/ssl-tls-improvements-in-java-8.html.
E. Suggestions for improvement
We offer several actionable recommendations based on our
analyses.
a) Observable infrastructure: One key element to im-
proving messaging security is to create awareness. We believe
better observability can be provided in a two-pronged approach:
through more regular active scans, but also by facilitating
observation of the security of one’s own communication. Much
insight can be gained by security-conscious users by information
available on the dashboards mentioned in Section II-E. We
believe that current efforts like SSL Pulse, which aims to
enhance the use and security of TLS on the Web, should
be extended to other communication protocols. The coverage
should also be extended to the entire Internet. The data provided
by censys.io [8] is a good source. Auditing mechanisms
that so far are meant primarily for use on the Web, such as
Certiﬁcate Transparency by Google, could also be extended to
include email or chat servers.
Another way to improve the situation would be for client
software to have clearer user warnings when connecting to
servers in insecure ways. Unlike the Web, the messaging
infrastructure uses intermediate relays. It is, however, possible
to derive (partial) information about the path an email has taken
or is going to take [12]. User-agents could be extended to report
information about this and signal if the used cryptography is
deemed secure.
b) Deployability and conﬁguration: The high number of
invalid or otherwise unveriﬁable certiﬁcate chains is a serious
obstacle to the ubiquitous adoption of STARTTLS for email
forwarding. Two of the reasons for this poor deployment are
the costs of certiﬁcation by CAs and the high difﬁculty of
proper server conﬁguration. The Let’s Encrypt21 initiative,
which currently focuses on Web certiﬁcation, addresses both
issues and should be extended to include email and chat.
However, conﬁguration complexity is not straight-forward to
address. BetterCrypto.org22, for example, provides a guide
to correct TLS conﬁguration. This approach scales poorly as
almost every software suite uses its own conﬁguration format
(or so it often seems). We thus call for a standard for uniﬁed
SSL/TLS conﬁguration: there is no reason why certiﬁcates
and cryptography cannot be conﬁgured using a uniﬁed syntax.
Conﬁguration ﬁles for SSL/TLS could simply be included (or
parsed) in the general conﬁguration of a software.
A recent RFC [5] describes how to increase the security of
SMTP opportunistically by using the TLSA record of DNS [21]
to signal TLS support. This removes CAs as a single point of
failure. Due to its opportunistic nature, the approach can be
deployed incrementally. It defeats attackers carrying out global
pervasive monitoring. However, DNS/DNSSEC is once again
a complex system—thus, this approach also calls for better
conﬁguration support and a uniﬁed conﬁguration syntax.
c) Flag-days for mandatory encryption: Large providers
should research the impact of refusing insecure connections—
this may cause smaller providers to use veriﬁable chains. To
preserve reliability of delivery, providers could deploy a form
of grey-listing for senders using insecure connections and only
21https://letsencrypt.org/
22https://bettercrypto.org
offer fast message delivery to mail servers capable of using
SSL/TLS in a secure fashion.
A broad call for mandatory encryption and enforcing
STARTTLS before using a connection could further push the
adoption of better security practices. An example showing
that community-based actions have a chance of succeeding is
XMPP23. This can be combined with a pinning-like approach
where clients refuse plaintext connections, especially to
popular servers, if previous connections had used STARTTLS.
This is in line with the ﬁndings of [9], where the authors
show that certain ISPs may try to downgrade connections by
stripping STARTTLS commands.
A further step to foster the proper use of SSL/TLS could be
taken by package and operating system maintainers. If packages
shipped with a safe, modern conﬁguration for the ciphers to
use, many of the problems we highlighted could be remedied.
A summary of the best current practices for this purpose can be
found in [43]. Conversely, application packages should never
be shipped with default cryptographic material, not even as
examples. A saner approach would be to provide scripts to
generate the keys and certiﬁcates.
d) Application-layer authentication: Challenge-response
authentication mechanisms like CRAM and SCRAM avoid
sending credentials over the wire. SCRAM even allows servers
to store the password in non-plaintext form, thus combining
improved credential storage with safer authentication. Support
for challenge-response forms of authentication seems to be
lacking, possibly because developers see no need for it and
operators fear the complexity. Standard packages and uniﬁed
conﬁguration can help here.
VI. CONCLUSION
This paper presented the largest study of the security of
the standard Internet messaging infrastructure to date. Based
on active scans of servers and passive monitoring of client
connections, we collected the parameters used to establish
SSL/TLS sessions, the details of X.509 certiﬁcates offered
by servers, and the application-layer authentication methods
offered to, and used by, clients. Across the whole Internet, we
found a worryingly high number of poorly secured servers. This
was either due to cryptographic parameter and cipher choices or
due to invalid or duplicated cryptographic material. Too many
servers also offer weak application-layer authentication methods.
A silver lining is that there are signiﬁcantly better deployments
in the most popular services, and a majority of observed clients
connected using reasonably secure parameters when they did
request encryption. Nonetheless, too many of the connections
we observed were still performed in the clear. Moreover, we
found that many client-to-server setups, especially for SMTP,
did not use valid credentials. This means that email in transit
may often be delivered over unencrypted and unauthenticated
hops. We gave a list of recommendations that are actionable
and can help to signiﬁcantly improve the situation.
ACKNOWLEDGMENTS
This work was supported by the National Science Foun-
dation under grant numbers CNS-1528156 and ACI-1348077.
23http://blog.prosody.im/mandatory-encryption-on-xmpp-starts-today/
14
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the author(s) and do not
necessarily reﬂect the views of the NSF.
REFERENCES
[2]
[1] D. Akhawe et al. “Here’s My Cert, So Trust Me, Maybe?
Understanding TLS Errors on the Web”. In: Proc. Int. World
Wide Web Conference. 2013.
J. Amann et al. “No Attack Necessary: the Surprising Dynamics
of SSL Trust Relationships”. In: Ann. Computer Security
Applications Conference (ACSAC). 2013.
[3] Baseline requirements for the issuance and management of
publicly-trusted certiﬁcates, v.1.0. CA/Browser Forum, 2011.
[4] M. Crispin. Internet Message Access Protocol - Version 4rev1.
RFC 3501 (Proposed Standard). IETF, Mar. 2003.
[5] V. Dukhovni and W. Hardaker. SMTP Security via Oppor-
tunistic DNS-Based Authentication of Named Entities (DANE)
Transport Layer Security (TLS). RFC 7672 (Proposed Standard).
IETF, 2015.
[6] Z. Durumeric, E. Wustrow, and J. A. Halderman. “ZMap: Fast
Internet-wide Scanning and Its Security Applications”. In: Proc.
USENIX Security. 2013.
[7] Z. Durumeric et al. “Analysis of the HTTPS certiﬁcate ecosys-
tem”. In: Proc. ACM SIGCOMM Internet Measurement Con-
ference (IMC). 2013.
[8] Z. Durumeric et al. “Censys—A Search Engine Backed by
Internet-Wide Scanning”. In: Proc. ACM Computer and Com-
munications Security (CCS). 2015.
[9] Z. Durumeric et al. “Neither Snow Nor Rain Nor MITM... An
Empirical Analysis of Mail Delivery Security”. In: Proc. ACM
SIGCOMM Internet Measurement Conference (IMC). 2015.
[10] Z. Durumeric et al. “The Matter of Heartbleed”. In: Proc. ACM
SIGCOMM Internet Measurement Conference (IMC). 2014.
[12]
[11] Email Statistics Report, 2014–2018. The Radicati Group, Inc.
URL: http://www.radicati.com/wp/wp-content/uploads/2014/01/
Email-Statistics-Report-2014-2018-Executive-Summary.pdf.
I. Foster et al. “Security by Any Other Name: On the Effec-
tiveness of Provider Based Email Security”. In: Proc. ACM
Computer and Communications Security (CCS). 2015.
[13] A. Freier, P. Karlton, and P. Kocher. The Secure Sockets Layer
(SSL) Protocol Version 3.0. RFC 6101 (Historic). IETF, Aug.
2011.
[14] O. Gasser, R. Holz, and G. Carle. “A deeper understanding
of SSH: results from Internet-wide scans”. In: Proc. Network
Operations and Management Symposium (NOMS). 2014.
[15] R. Gellens and J. Klensin. Message Submission. RFC 2476
(Proposed Standard). IETF, Dec. 1998.
[16] R. Gellens and J. Klensin. Message Submission for Mail. RFC
6409 (Internet Standard). IETF, Nov. 2011.
[17] R. Hartmann. Default Port for Internet Relay Chat (IRC) via
[18]
TLS/SSL. RFC 7194 (Informational). IETF, Aug. 2014.
J. Heidemann et al. “Census and survey of the visible Internet”.
In: Proc. ACM SIGCOMM Internet Measurement Conference
(IMC). 2008.
[19] N. Heninger et al. “Mining Your Ps and Qs: detection of
Widespread Weak Keys in Network Devices”. In: Proc.
USENIX Security. 2012.
[20] P. Hoffman. SMTP Service Extension for Secure SMTP over
Transport Layer Security. RFC 3207 (Proposed Standard).
IETF, Feb. 2002.
[21] P. Hoffman and J. Schlyter. The DNS-Based Authentication
of Named Entities (DANE) Transport Layer Security (TLS)
Protocol: TLSA. RFC 6698 (Proposed Standard). IETF, Aug.
2012.
[22] P. Hoffman. SMTP Service Extension for Secure SMTP over
TLS. Internet-Draft draft-hoffman-smtp-ssl-04.txt. 1999.
15
[23] R. Holz. “Empirical analysis of Public Key Infrastructures
and investigation of improvements”. PhD thesis. Technical
University of Munich, 2014.
[24] R. Holz et al. “The SSL landscape—a thorough analysis of the
X.509 PKI using active and passive measurements”. In: Proc.
ACM SIGCOMM Internet Measurement Conference (IMC).
2011.
[25] L.-S. Huang et al. “An Experimental Study of TLS Forward
Secrecy Deployments”. In: Internet Computing, IEEE 18.6
(2014).
[26] C. Kalt. Internet Relay Chat: Server Protocol. RFC 2813
[27]
[28]
(Informational). IETF, Apr. 2000.
J. Klensin. Simple Mail Transfer Protocol. RFC 5321 (Draft
Standard). IETF, Oct. 2008.
J. Klensin, R. Catoe, and P. Krumviede. IMAP/POP AUTHorize
Extension for Simple Challenge/Response. RFC 2195 (Proposed
Standard). IETF, Sept. 1997.
[30]
[29] D. Leonard and D. Loguinov. “Demystifying service discov-
ery: Implementing an Internet-wide scanner”. In: Proc. ACM
SIGCOMM Internet Measurement Conference (IMC). 2010.
J. Myers and M. Rose. Post Ofﬁce Protocol - Version 3. RFC
1939 (INTERNET STANDARD). IETF, May 1996.
[31] M. Myers and H. Tschofenig. Online Certiﬁcate Status Protocol
(OCSP) Extensions to IKEv2. RFC 4806 (Proposed Standard).
IETF, Feb. 2007.
[32] C. Newman. Using TLS with IMAP, POP3 and ACAP. RFC
2595 (Proposed Standard). IETF, June 1999.
[33] C. Newman et al. Salted Challenge Response Authentication
Mechanism (SCRAM) SASL and GSS-API Mechanisms. RFC
5802 (Proposed Standard). IETF, July 2010.
J. Oikarinen and D. Reed. Internet Relay Chat Protocol. RFC
1459 (Experimental). IETF, May 1993.
[35] V. Paxson. “Bro: A System for Detecting Network Intruders
[34]
in Real-Time”. In: Computer Networks 31.23-24 (1999).
[36] A. Popov. Prohibiting RC4 Cipher Suites. RFC 7465 (Proposed
Standard). IETF, Feb. 2015.
[42]
[37] N. Provos and P. Honeyman. “ScanSSH—scanning the Internet
for SSH servers”. In: Proc. USENIX LISA. 2001.
I. Risti´c. Bullet-proof SSL and TLS. Feisty Duck Ltd., 2014.
[38]
[39] P. Saint-Andre. Extensible Messaging and Presence Protocol
(XMPP): Core. RFC 6120 (Proposed Standard). IETF, Mar.
2011.
[40] P. Saint-Andre. Extensible Messaging and Presence Protocol
(XMPP): Instant Messaging and Presence. RFC 6121 (Proposed
Standard). IETF, Mar. 2011.
[41] P. Saint-Andre and T. Alkemade. Use of Transport Layer
Security (TLS) in the Extensible Messaging and Presence
Protocol (XMPP). RFC 7590 (Proposed Standard). IETF, June
2015.
J. Schlamp et al. “Investigating the Nature of Routing Anoma-
lies: Closing in on Subpreﬁx Hijacking Attacks”. In: Proc. 7th
Int. Workshop on Trafﬁc Monitoring and Analysis. 2015.
[43] Y. Sheffer, R. Holz, and P. Saint-Andre. Recommendations for
Secure Use of Transport Layer Security (TLS) and Datagram
Transport Layer Security (DTLS). RFC 7525 (Best Current
Practice). IETF, May 2015.
[44] Y. Sheffer, R. Holz, and P. Saint-Andre. Summarizing Known
Attacks on Transport Layer Security (TLS) and Datagram TLS
(DTLS). RFC 7457 (Informational). IETF, Feb. 2015. URL:
http://www.ietf.org/rfc/rfc7457.txt.
[45] N. Vratonjic et al. “The inconvenient truth about Web cer-
tiﬁcates”. In: Proc. Workshop on Economics in Information
Security. 2011.
[46] K. Zeilenga. The PLAIN Simple Authentication and Security
Layer (SASL) Mechanism. RFC 4616 (Proposed Standard).
IETF, Aug. 2006.