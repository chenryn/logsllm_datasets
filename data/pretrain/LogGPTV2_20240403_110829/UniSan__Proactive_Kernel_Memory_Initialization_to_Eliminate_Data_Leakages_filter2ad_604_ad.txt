stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
heap
heap
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
user
user
user
user
user
user
sock
user
user
user
user
user
user
user
user
sock
sock
sock
sock
sock
sock
sock
sock
sock
sock
sock
sock
sock
sock
sock
user
user
user
user
sock
user
sock
sock
sock
user
user
user
user
< 16
192
10
12
12
12
6
4
1
< 20
4
3
18
32
32
34
8
20
32
18
< 64
8
1
2
1
4
2
2
4
2
1
2
2
4
12
4
4
M
M
M
P
P
M
M
M
M
M
P+M
M
P+M
M
P
M
P+M
P
M
M
M
M
M
P+M
M
M
M
M
M
M
M
M
M
M
M
P
P
M
M
P
M
P
P
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Table 2: Tested known uninitialized data leaks. UniSan can successfully
prevent all of them. In the cause column: P-compiler padding; M-missing
element initialization.
Please note that some leaks are not included because the correspond-
ing code is not enabled by the default kernel configuration or a
very similar leak has already been included. The patches of these
vulnerabilities are temporarily reverted for testing. The results of
the experiment are shown in Table 2. UniSan successfully detected
and prevented all these leaks without any false negative; hence the
effectiveness in preventing existing leaks is confirmed.
Detecting previously unknown vulnerabilities. UniSan is de-
signed as a prevention tool that can automatically detect and fix all
uninitialized data leaks at the LLVM IR level; no manual effort is
required. However, to confirm that UniSan can truly prevent new
leaks and estimate the false positives due to our conservative policies,
we manually review the unsafe allocations reported by the unsafe
allocation detector. As shown in Table 1, UniSan detected about
1,500 possible unsafe stack allocations and 300 possible unsafe heap
allocations. Due to limited time and labor, we randomly chose 300
detected unsafe stack allocations and 50 unsafe heap allocations. In
summary, we have verified 19 new uninitialized data leaks in the
latest Linux kernel and Android kernel. All of these vulnerabilities
are from stack, more details can be found in Table 3. All of them
have been confirmed by the Linux kernel team and Android security
team. Since UniSan has not been adopted by them yet, we have to
manually write the corresponding patches in source code.
6.3 Efficiency of the Secured Kernels
UniSan carries out flow-sensitive, context-sensitive, and field-
sensitive analyses to accurately detect the unsafe allocations, so that
the performance overhead is controlled by minimizing the number
of initializations. To quantify this benefit, we conducted a series
of extensive performance evaluations. In particular, we first used
the LMBench [24] micro benchmark to evaluate the performance
on core system operations (e.g., syscalls latency). We then used
Android Benchmarks and the SPEC Benchmarks as the macro bench-
marks to evaluate the performance impacts on user space programs
for the protected Android kernel and Linux kernel, respectively. To
measure the performance impacts on I/O intensive server programs,
we further used ApacheBench to test the performance of Apache
web server. All these evaluations consist of three groups: 1) native
mode, in which UniSan is not applied; 2) blind mode, in which all
stack allocations and heap allocations without the __GFP_ZERO flag
are initialized without checking whether or not they are safe; and
3) UniSan mode, in which UniSan is applied. In the three groups
of evaluations, the kernel was replaced with the corresponding one.
Note that, we did not further break down the performance over-
head introduced by stack and heap, because the overall overhead is
already negligible.
6.3.1
In order to measure how UniSan affects the performance of core
operating system services, we used LMBench [24] as the micro
benchmark. Specifically, we focus on the latency of syscalls (e.g.,
null, write, open/close, sigaction, etc.) and impact on band-
width (e.g., pipe). We ran each experiment 10 times, and the results
are shown in Table 4. In the blind mode, the performance overhead
could be up to 22% (the signal handle case). There are also some
cases (e.g., select and pipe) where its overhead is more than 10%.
Such a performance overhead is significant for the OS kernel—the
foundation of computer systems. In contrast, UniSan has a much
lower performance overhead than the blind mode; its maximum
overhead is 7.1% in the protection fault case. We also notice that
UniSan’s performance overhead is negligible (< 1%) in many cases.
On average, the performance overhead of UniSan is less than 1.5%
for both the Linux and Android kernels.
System Operations
As a comparison, we further measured STACKLEAK’s perfor-
mance overhead in the same settings as UniSan except using GCC
to compile it. As shown in Table 4, STACKLEAK imposes an aver-
age of more than 40% performance overhead in system operations,
which is much higher than UniSan.
Sink Leak Cause Kernel Patch
CVE
rtnetlink.c
devio.c
nl80211.c
af_llc.c
timer.c
timer.c
timer.c
af_x25.c
netlink_compat.c
recv.c
Module
#
Sub-
System
net/core
usb
net/wireless
net/llc
sound
sound
sound
net/x25
net/tipc
net/rds
net/mac80211 mlme.c
net/wireless
net/wireless
net/netfilter
net/netfilter
net/netfilter
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 media
18 media
19 media
wl_cfg80211.c
util.c
...queue_core.c
nfnetlink_log.c
nfnetlink_log.c
media-device.c
media-device.c
media-device.c
Object
Mem.
map
ci
mac_addr
info
tread
r1*
r1*
dte_facilities
link_info
minfo
deauth_buf
sinfo
hdr
phw
phw
pmsg
u_ent
pad
link
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
stack
Bytes
4
3
6
1
8
8
8
8
<60