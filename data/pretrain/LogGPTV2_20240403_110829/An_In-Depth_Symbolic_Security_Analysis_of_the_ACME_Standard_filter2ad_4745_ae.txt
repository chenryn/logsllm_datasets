### Secure Binding Property in ACME

In the context of ACME, the secure binding property ensures that for given parameters \( s, D, k, \) and \( \text{cert} \), the property is satisfied. By proving this theorem for our detailed ACME model, we can exclude many classes of attacks, including those described in Section 5. These attacks may arise from logical errors in the protocol flow, ambiguities in the specification (e.g., not explicitly stating that the same account must be used in one protocol flow), or potential implementation glitches implied by the specification.

We state and prove this theorem as a lemma in DY★, which requires that the secure binding property follows from the `valid_trace` invariant. The proof structure and general proof technique in DY★ are discussed in Section 2.

The theorem in DY★ is formulated as follows (simplified for presentation):

```fsharp
val secure_binding_theorem:
  s:principal → // any (server) principal
  trace_idx:nat → // any trace index
  cert:certificate → // any certificate
  dom:domain → // any domain
  priv_key:bytes → // any private key
  DY unit
  (requires (λ t0 → 
    (valid_trace t0 ∧ // any trace t0 that is valid
     is_certificate_in_server_state s trace_idx cert ∧ // if the server s updated its internal state at trace index trace_idx and stored the certificate cert
     is_domain_in_certificate cert dom ∧ // if the domain dom is one of the domains for which the certificate is issued
     pk priv_key == cert.pub_key ∧ // if the key priv_key is the private key to the certificate public key
     ¬(is_principal_corrupted_before trace_idx s)))) // and if the server is not corrupted by the attacker
  (ensures (λ t0 _t1 → 
    (t0 == t1 ∧ (
      is_unknown_to_attacker_at (len t0) priv_key ∨ // then the attacker cannot derive the private key priv_key
      is_principal_corrupted (owner_of_domain dom))))) // or the principal that owns the domain is corrupted
```

### Proof Structure

To prove the secure binding property within DY★, we provide a high-level overview. The full proof is available in our supplementary material [10], with references to specific modules.

The theorem must be implied by the `valid_trace` invariant, which includes the state invariant `state_inv` and the authenticated send predicate `auth_send_pred` (see Sections 2 and 3.1). We construct the components of `valid_trace` to reflect relevant aspects from different stages of the protocol, ensuring it is preserved throughout all modules.

A central property inferred from the challenge verification step is the connection between the owner of a domain and an ACME client account. When the ACME server receives a verification response containing the account’s public key via an authenticated channel, we infer that the sender owns the private key to the account. This is expressed in `auth_send_pred`.

We use DY★'s labeling system to propagate the connection between the domain owner and the account key, encoding this fact in the state invariant of the ACME server. If the server sets the status of an authorization to valid, the account key related to the authorization must be labeled with the domain owner. This invariant must hold true every time the server updates its state.

To connect the issuance of a certificate to the domain verification, we enrich the state invariant further. Whenever the server issues a certificate, the certificate key must be labeled such that it belongs to the rightful domain owner for the domains in the certificate. To prove this, we link the processing of the message containing a CSR to the guarantees of the ownership verification. The JWS containing the CSR must have been signed by the rightful owner of the domains.

Finally, we use the invariants on labels of certificate keys and the generic secrecy properties of DY★'s labeling system to prove the secure binding theorem.

### Modularity and Secure Coding Discipline

The DY★ framework enables highly modular proofs, as illustrated by the example above. Each function has local proofs, making the overall proof efficient. The invariants hold true for arbitrary interleavings of protocol sessions.

F★'s typecheck ensures that no invariants are violated. If the model contains flaws, the corresponding function will fail the typecheck. For instance, a faulty server that incorrectly iterates over domains during ownership verification fails the typecheck, requiring manual override.

### Integrity Properties

We consider two main integrity properties: server-side and client-side integrity.

**Server-Side Integrity:** The server-side integrity property states that any certificate issued for an honest client has actually been requested by the client, and the client owns the corresponding account key.

**Theorem 2 (Server-Side Integrity):** For all possible global traces \( t \) of the DY★ model of ACME, if \( d \) is a domain in \( D \), \( \text{acc_pub_key} \) is the account public key used for issuing \( \text{cert} \), and the principal owning the domain \( d \) is honest, then the owner of \( d \) created an ACME order for the domains \( D \) and owns the private key to \( \text{acc_pub_key} \).

**Client-Side Integrity:** The client-side integrity property states that whenever the client stores a certificate (issued by an arbitrary, potentially dishonest server), the certificate has been issued for the same set of domains that the client requested earlier.

**Theorem 3 (Client-Side Integrity):** For all possible global traces \( t \) of the DY★ model of ACME, if \( c \) stores the certificate \( \text{cert} \) in its state, then \( c \) previously created an ACME order object for the domains \( D \).

Both properties are specified as lemmas in DY★, with suitable predicates defined and proven.

### Proof Effort

For proving the security properties, we added 5,191 lines of proof-related code, roughly corresponding to the number of functional lines of code in the ACME model. Verification of the complete ACME model takes 67 minutes using an off-the-shelf machine, with each module verified in less than 1.5 minutes on average. The ACME analysis took several person-months, with a significant portion dedicated to reading and transcribing the standard.

### Interoperable Implementation

Symbolic execution tests confirmed our model's internal consistency. For real-world interoperability, we augmented our model with an unverified wrapper library to connect our implementation to real-world servers. Our client successfully runs the ACME protocol with several ACME servers, including pebble, Let’s Encrypt’s staging, and production servers.

Interoperability testing revealed a bug in our model that did not surface in symbolic execution tests. The ACME specification does not require servers to retain the order of elements in sequences, but our initial client model assumed otherwise. This bug only showed when ordering a certificate for more than one domain, highlighting the value of an executable model.

### Related Work

Prior analyses of ACME include formal analyses of early drafts using ProVerif and Tamarin. Bhargavan et al. [15] and Jackson et al. [36] focused on narrow classes of attacks, ignoring important RFC details. In contrast, our model accounts for certificates covering multiple domains, JWS signatures, and long-running sessions, providing a detailed reference implementation.

Analyses of Public Key Infrastructures (PKI) and verification of crypto protocol standards, such as TLS 1.3, OAuth, and OpenID, have also been conducted. Our analysis of ACME comprises more than 10,000 lines of functional and proof code, indicating a high level of detail and scalability compared to other works.

### Conclusion

In this work, we have verified the security of the ACME standard in unprecedented detail. Our executable model in F★ carefully accounts for all high-level protocol flows, including recursive interleavings of multiple asynchronous sub-protocols.