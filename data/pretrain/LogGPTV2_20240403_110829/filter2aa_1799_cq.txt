this when the API is published for third-party use. The highest level of trust is likely to require the fol-
lowing features, at the very least:
I 
VBS-capable hardware and OEM configuration.
I 
Dynamic root-of-trust measurements at boot.
I 
Secure boot to verify hypervisor, NT, and SK images.
I 
Secure policy ensuring Hypervisor Enforced Code Integrity (HVCI) and kernel mode code integ-
rity (KMCI), test-signing is disabled, and kernel debugging is disabled.
I 
The ELAM driver is present.
Conclusion
Windows is able to manage and run multiple virtual machines thanks to the Hyper-V hypervisor and 
its virtualization stack, which, combined together, support different operating systems running in a 
VM. Over the years, the two components have evolved to provide more optimizations and advanced 
features for the VMs, like nested virtualization, multiple schedulers for the virtual processors, different 
types of virtual hardware support, VMBus, VA-backed VMs, and so on.
Virtualization-based security provides to the root operating system a new level of protection 
against malware and stealthy rootkits, which are no longer able to steal private and confidential infor-
mation from the root operating system’s memory. The Secure Kernel uses the services supplied by the 
Windows hypervisor to create a new execution environment (VTL 1) that is protected and not acces-
sible to the software running in the main OS. Furthermore, the Secure Kernel delivers multiple services 
to the Windows ecosystem that help to maintain a more secure environment.
The Secure Kernel also defines the Isolated User Mode, allowing user mode code to be executed 
in the new protected environment through trustlets, secure devices, and enclaves. The chapter ended 
with the analysis of System Guard Runtime Attestation, a component that uses the services exposed by 
the Secure Kernel to measure the workstation’s execution environment and to provide strong guaran-
tees about its integrity. 
In the next chapter, we look at the management and diagnostics components of Windows and 
discuss important mechanisms involved with their infrastructure: the registry, services, Task scheduler, 
Windows Management Instrumentation (WMI), kernel Event Tracing, and so on.
391
C H A P T E R  1 0
Management, diagnostics, 
and tracing
T
his chapter describes fundamental mechanisms in the Microsoft Windows operating system that 
are critical to its management and configuration. In particular, we describe the Windows registry, 
services, the Unified Background process manager, and Windows Management Instrumentation (WMI). 
The chapter also presents some fundamental components used for diagnosis and tracing purposes like 
Event Tracing for Windows (ETW), Windows Notification Facility (WNF), and Windows Error Reporting 
(WER). A discussion on the Windows Global flags and a brief introduction on the kernel and User Shim 
Engine conclude the chapter.
The registry
The registry plays a key role in the configuration and control of Windows systems. It is the repository 
for both systemwide and per-user settings. Although most people think of the registry as static data 
stored on the hard disk, as you’ll see in this section, the registry is also a window into various in-
memory structures maintained by the Windows executive and kernel.
We’re starting by providing you with an overview of the registry structure, a discussion of the data 
types it supports, and a brief tour of the key information Windows maintains in the registry. Then we 
look inside the internals of the configuration manager, the executive component responsible for imple-
menting the registry database. Among the topics we cover are the internal on-disk structure of the 
registry, how Windows retrieves configuration information when an application requests it, and what 
measures are employed to protect this critical system database.
Viewing and changing the registry
In general, you should never have to edit the registry directly. Application and system settings stored in 
the registry that require changes should have a corresponding user interface to control their modifi-
cation. However, as we mention several times in this book, some advanced and debug settings have 
no editing user interface. Therefore, both graphical user interface (GUI) and command-line tools are 
included with Windows to enable you to view and modify the registry.
Windows comes with one main GUI tool for editing the registry—Regedit.exe—and several 
command-line registry tools. Reg.exe, for instance, has the ability to import, export, back up, and 
392 
CHAPTER 10 Management, diagnostics, and tracing
restore keys, as well as to compare, modify, and delete keys and values. It can also set or query flags 
used in UAC virtualization. Regini.exe, on the other hand, allows you to import registry data based on 
text files that contain ASCII or Unicode configuration data.
The Windows Driver Kit (WDK) also supplies a redistributable component, Offregs.dll, which hosts 
the Offline Registry Library. This library allows loading registry hive files (covered in the “Hives” section 
later in the chapter) in their binary format and applying operations on the files themselves, bypassing 
the usual logical loading and mapping that Windows requires for registry operations. Its use is primari-
ly to assist in offline registry access, such as for purposes of integrity checking and validation. It can also 
provide performance benefits if the underlying data is not meant to be visible by the system because 
the access is done through local file I/O instead of registry system calls.
Registry usage
There are four principal times at which configuration data is read:
I 
During the initial boot process, the boot loader reads configuration data and the list of boot de-
vice drivers to load into memory before initializing the kernel. Because the Boot Configuration
Database (BCD) is really stored in a registry hive, one could argue that registry access happens
even earlier, when the Boot Manager displays the list of operating systems.
I 
During the kernel boot process, the kernel reads settings that specify which device drivers to
load and how various system elements—such as the memory manager and process manager—
configure themselves and tune system behavior.
I 
During logon, Explorer and other Windows components read per-user preferences from the
registry, including network drive-letter mappings, desktop wallpaper, screen saver, menu be-
havior, icon placement, and, perhaps most importantly, which startup programs to launch and
which files were most recently accessed.
I 
During their startup, applications read systemwide settings, such as a list of optionally installed
components and licensing data, as well as per-user settings that might include menu and tool-
bar placement and a list of most-recently accessed documents.
However, the registry can be read at other times as well, such as in response to a modification of a 
registry value or key. Although the registry provides asynchronous callbacks that are the preferred way 
to receive change notifications, some applications constantly monitor their configuration settings in the 
registry through polling and automatically take updated settings into account. In general, however, on 
an idle system there should be no registry activity and such applications violate best practices. (Process 
Monitor, from Sysinternals, is a great tool for tracking down such activity and the applications at fault.)
The registry is commonly modified in the following cases:
I 
Although not a modification, the registry’s initial structure and many default settings are
defined by a prototype version of the registry that ships on the Windows setup media that is
copied onto a new installation.
CHAPTER 10 Management, diagnostics, and tracing
393
I 
Application setup utilities create default application settings and settings that reflect installa-
tion configuration choices.
I 
During the installation of a device driver, the Plug and Play system creates settings in the reg-
istry that tell the I/O manager how to start the driver and creates other settings that configure
the driver’s operation. (See Chapter 6, “I/O system,” in Part 1 for more information on how
device drivers are installed.)
I 
When you change application or system settings through user interfaces, the changes are often
stored in the registry.
Registry data types
The registry is a database whose structure is similar to that of a disk volume. The registry contains keys, 
which are similar to a disk’s directories, and values, which are comparable to files on a disk. A key is a 
container that can consist of other keys (subkeys) or values. Values, on the other hand, store data. Top-
level keys are root keys. Throughout this section, we’ll use the words subkey and key interchangeably.
Both keys and values borrow their naming convention from the file system. Thus, you can uniquely 
identify a value with the name mark, which is stored in a key called trade, with the name trade\mark. 
One exception to this naming scheme is each key’s unnamed value. Regedit displays the unnamed 
value as (Default).
Values store different kinds of data and can be one of the 12 types listed in Table 10-1. The majority 
of registry values are REG_DWORD, REG_BINARY, or REG_SZ. Values of type REG_DWORD can store 
numbers or Booleans (true/false values); REG_BINARY values can store numbers larger than 32 bits or 
raw data such as encrypted passwords; REG_SZ values store strings (Unicode, of course) that can repre-
sent elements such as names, file names, paths, and types.
TABLE 10-1 Registry value types
Value Type
Description
REG_NONE
No value type
REG_SZ
Fixed-length Unicode string
REG_EXPAND_SZ
Variable-length Unicode string that can have embedded environment variables
REG_BINARY
Arbitrary-length binary data
REG_DWORD
32-bit number
REG_DWORD_BIG_ENDIAN
32-bit number, with high byte first
REG_LINK
Unicode symbolic link
REG_MULTI_SZ
Array of Unicode NULL-terminated strings
REG_RESOURCE_LIST
Hardware resource description
REG_FULL_RESOURCE_DESCRIPTOR
Hardware resource description
REG_RESOURCE_REQUIREMENTS_LIST
Resource requirements
REG_QWORD
64-bit number
394 
CHAPTER 10 Management, diagnostics, and tracing
The REG_LINK type is particularly interesting because it lets a key transparently point to another 
key. When you traverse the registry through a link, the path searching continues at the target of the 
link. For example, if \Root1\Link has a REG_LINK value of \Root2\RegKey and RegKey contains the value 
RegValue, two paths identify RegValue: \Root1\Link\RegValue and \Root2\RegKey\RegValue. As ex-
plained in the next section, Windows prominently uses registry links: three of the six registry root keys 
are just links to subkeys within the three nonlink root keys.
Registry logical structure
You can chart the organization of the registry via the data stored within it. There are nine root keys 
(and you can’t add new root keys or delete existing ones) that store information, as shown in Table 10-2.
TABLE 10-2 The nine root keys
Root Key
Description
HKEY_CURRENT_USER
Stores data associated with the currently logged-on user
HKEY_CURRENT_USER_LOCAL_SETTINGS
Stores data associated with the currently logged-on user that are local to the 
machine and are excluded from a roaming user profile
HKEY_USERS
Stores information about all the accounts on the machine
HKEY_CLASSES_ROOT
Stores file association and Component Object Model (COM) object registra-
tion information
HKEY_LOCAL_MACHINE
Stores system-related information
HKEY_PERFORMANCE_DATA
Stores performance information
HKEY_PERFORMANCE_NLSTEXT
Stores text strings that describe performance counters in the local language 
of the area in which the computer system is running
HKEY_PERFORMANCE_TEXT
Stores text strings that describe performance counters in US English.
HKEY_CURRENT_CONFIG
Stores some information about the current hardware profile (deprecated)
Why do root-key names begin with an H? Because the root-key names represent Windows handles 
(H) to keys (KEY). As mentioned in Chapter 1, “Concepts and tools” of Part 1, HKLM is an abbreviation
used for HKEY_LOCAL_MACHINE. Table 10-3 lists all the root keys and their abbreviations. The follow-
ing sections explain in detail the contents and purpose of each of these root keys.
TABLE 10-3 Registry root keys
Root Key
Abbreviation
Description
Link
HKEY_CURRENT_USER
HKCU
Points to the user profile 
of the currently logged-on 
user
Subkey under HKEY_USERS 
corresponding to currently 
logged-on user
HKEY_CURRENT_USER_LOCAL_SETTINGS
HKCULS
Points to the local settings 
of the currently logged-on 
user
Link to HKCU\Software\
Classes\Local Settings
HKEY_USERS
HKU
Contains subkeys for all 
loaded user profiles
Not a link
CHAPTER 10 Management, diagnostics, and tracing
395
Root Key
Abbreviation
Description
Link
HKEY_CLASSES_ROOT
HKCR
Contains file association and 
COM registration information
Not a direct link, but rather 
a merged view of HKLM\
SOFTWARE\Classes and  
HKEY_USERS\\
SOFTWARE\Classes
HKEY_LOCAL_MACHINE
HKLM
Global settings for the 
machine
Not a link
HKEY_CURRENT_CONFIG
HKCC
Current hardware profile
HKLM\SYSTEM\
CurrentControlSet\
Hardware Profiles\Current
HKEY_PERFORMANCE_DATA
HKPD
Performance counters
Not a link
HKEY_PERFORMANCE_NLSTEXT
HKPNT
Performance counters 
text strings
Not a link
HKEY_PERFORMANCE_TEXT
HKPT
Performance counters text 
strings in US English
Not a link
HKEY_CURRENT_USER
The HKCU root key contains data regarding the preferences and software configuration of the locally 
logged-on user. It points to the currently logged-on user’s user profile, located on the hard disk at 
\Users\\Ntuser.dat. (See the section “Registry internals” later in this chapter to find out how 
root keys are mapped to files on the hard disk.) Whenever a user profile is loaded (such as at logon time 
or when a service process runs under the context of a specific username), HKCU is created to map to 
the user’s key under HKEY_USERS (so if multiple users are logged on in the system, each user would see 
a different HKCU). Table 10-4 lists some of the subkeys under HKCU.
TABLE 10-4 HKEY_CURRENT_USER subkeys
Subkey
Description
AppEvents
Sound/event associations
Console
Command window settings (for example, width, height, and colors)
Control Panel
Screen saver, desktop scheme, keyboard, and mouse settings, as well as accessibility and 
regional settings
Environment
Environment variable definitions
EUDC
Information on end-user defined characters
Keyboard Layout
Keyboard layout setting (for example, United States or United Kingdom)
Network
Network drive mappings and settings
Printers
Printer connection settings
Software
User-specific software preferences
Volatile Environment
Volatile environment variable definitions