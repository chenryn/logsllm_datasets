            DbgPrint("[+] Pool Tag: %s\n", STRINGIFY(POOL_TAG)); // 打印内存池标签
            DbgPrint("[+] Pool Chunk: 0x%p\n", g_UseAfterFreeObject); // 打印内存池块地址
# ifdef SECURE
    //判断代码块中的 "ifdef" 宏，这里判断是否含有"SECURE"宏，如果有，则释放完内存后将"g_UseAfterFreeObject"的值置为"NULL"，否则不设置
            // Secure Note: This is secure because the developer is setting
            // 'g_UseAfterFreeObject' to NULL once the Pool chunk is being freed
            ExFreePoolWithTag((PVOID)g_UseAfterFreeObject, (ULONG)POOL_TAG);
            //这行代码是用于释放内存的,它释放由 g_UseAfterFreeObject 指向的内存，并使用内存池标签 POOL_TAG 进行标记，在这个例子中，我们释放之前分配给 g_UseAfterFreeObject 对象的内存；
            //ExFreePoolWithTag：这是一个 Windows 内核函数，用于释放先前分配的内存池中的内存
            //(PVOID)g_UseAfterFreeObject：这是一个指向要释放的内存区域的指针，即 UAF 对象的内存地址   //(ULONG)POOL_TAG：这是分配给内存池中的内存的标签，在分配和释放内存时，标签有助于识别和跟踪内存
            g_UseAfterFreeObject = NULL;
# else
    // Vulnerability Note: This is a vanilla Use After Free vulnerability
            // because the developer is not setting 'g_UseAfterFreeObject' to NULL.
            // Hence, g_UseAfterFreeObject still holds the reference to stale pointer
            // (dangling pointer)
            ExFreePoolWithTag((PVOID)g_UseAfterFreeObject, (ULONG)POOL_TAG);
# endif
    Status = STATUS_SUCCESS;
        }
    }
    __except (EXCEPTION_EXECUTE_HANDLER) { //获取异常代码并打印
        Status = GetExceptionCode();
        DbgPrint("[-] Exception Code: 0x%X\n", Status);
    }
    return Status;
}
这段代码中的函数 FreeUaFObject 的主要目的是释放一个名为 g_UseAfterFreeObject
的全局变量指向的内存。在尝试释放这块内存之前，会检查 g_UseAfterFreeObject 是否为 NULL。在安全版本中，释放内存后，将
g_UseAfterFreeObject 设置为 NULL，以避免释放后重用漏洞。在非安全版本中，g_UseAfterFreeObject 未设置为
NULL，导致悬空指针，从而引发释放后重用漏洞。
1 ├── 定义函数 "FreeUaFObject" ， 它会返回一个 "NTSTATUS" 类型的值  
2 │  
3 ├── 将变量 "Status" 初始化成 "STATUS_UNSUCCESSFUL"  
4 │  
5 ├── 使用 "PAGED_CODE" 宏，在 Windows 操作系统内核中检查代码是否仅在分页代码下运行  
6 │  
7 ├── 进入 "try-except" 代码块  
8 │ ├── 如果全局变量"g_UseAfterFreeObject" 非空  
9 │ │ ├── 输出一系列提示信息  
10 │ │ ├── 判断代码块中是否有 "SECURE" 宏  
11 │ │ │ └── 若有，释放内存后将"g_UseAfterFreeObject"的值置为 "NULL"  
12 │ │ └── 使用 "ExFreePoolWithTag" 函数释放内存空间，需要指定内存块的标识符 "POOL_TAG"  
13 │ │  
14 │ ├── 如果全局变量"g_UseAfterFreeObject" 为空，程序将不会执行任何操作  
15 │ │  
16 │ └── 根据程序的执行结果，将 "Status" 赋值成适当的 "NTSTATUS" 值  
17 │  
18 ├── 异常处理代码  
19 │ └── 在 "try" 代码中出现异常时，记录异常代码并输出异常信息  
20 │  
21 └── 返回 "Status" 变量，表示程序执行状态
所以漏洞利用的思路是：  
1.分配 UAF 对象  
2.释放 UAF 对象  
3.以某种方式替换刚刚分配 UAF 对象的精确内存地址处的函数指针  
4.使用 UAF 对象
那么我们需要思考的是，在 UAF 对象释放后，使用什么来替换目标内存地址处的 UAF 对象？
UseAfterFree.c 中还包含了一个分配“fake object”的函数，继续看代码
// UseAfterFree.c  
NTSTATUS AllocateFakeObject(IN PFAKE_OBJECT UserFakeObject) {
    // 定义一个函数 AllocateFakeObject，接收一个 UserFakeObject 参数，该参数是一个指向 FAKE_OBJECT 结构的指针。
    NTSTATUS Status = STATUS_SUCCESS;
    PFAKE_OBJECT KernelFakeObject = NULL;
    // 创建两个变量：Status 用于存储函数执行的状态，初始值为成功；
    //KernelFakeObject 是一个指向 FAKE_OBJECT 结构的指针，初始值为 NULL。
    PAGED_CODE(); // 确保当前代码在可分页的内存区域中
    __try { //开始一个异常处理块
        DbgPrint("[+] Creating Fake Object\n"); //输出一条调试信息，表示正在创建 FakeObject 
        // Allocate Pool chunk
        KernelFakeObject = (PFAKE_OBJECT)ExAllocatePoolWithTag(NonPagedPool,
                                                               sizeof(FAKE_OBJECT),
                                                               (ULONG)POOL_TAG);
        //为FakeObject分配内存空间，ExAllocatePoolWithTag 函数从内核内存池中分配大小为 sizeof(FAKE_OBJECT) 的内存，内存类型为 NonPagedPool，并使用 POOL_TAG 标签
        if (!KernelFakeObject) {
            // Unable to allocate Pool chunk
            DbgPrint("[-] Unable to allocate Pool chunk\n");
            Status = STATUS_NO_MEMORY;
            return Status;
        } // 检查分配是否成功: 如果 KernelFakeObject 仍为 NULL，则输出错误信息并将状态设置为内存不足，然后返回状态
        else {
            DbgPrint("[+] Pool Tag: %s\n", STRINGIFY(POOL_TAG));
            DbgPrint("[+] Pool Type: %s\n", STRINGIFY(NonPagedPool));
            DbgPrint("[+] Pool Size: 0x%X\n", sizeof(FAKE_OBJECT));
            DbgPrint("[+] Pool Chunk: 0x%p\n", KernelFakeObject);
        } // 分配成功则输出相关信息
        // Verify if the buffer resides in user mode 
        ProbeForRead((PVOID)UserFakeObject, sizeof(FAKE_OBJECT), (ULONG)__alignof(FAKE_OBJECT));
        // 调用 ProbeForRead 函数，检查 UserFakeObject 指向的内存区域是否位于用户模式且可读
        //ProbeForRead 是一个用于检查内存区域是否可以安全访问的内核函数, 它验证了用户模式的指针是否指向可以从内核模式读取的内存区域, 这么做是为了进行安全检查，以防止潜在的安全问题和崩溃。
        //ProbeForRead 函数接收以下三个参数：
        //(PVOID)UserFakeObject：要检查的内存区域的起始地址, 在这里，我们检查由 UserFakeObject 指针指向的内存区域。
        //sizeof(FAKE_OBJECT)：要检查的内存区域的大小, 因为我们需要读取整个 FAKE_OBJECT 结构，所以使用 sizeof(FAKE_OBJECT) 来获取其大小。
        //(ULONG)__alignof(FAKE_OBJECT)：内存区域的对齐要求, __alignof 是一个编译器内置函数，用于获取指定类型的对齐要求, 所以这里，我们获取 FAKE_OBJECT 类型的对齐要求，确保内存区域满足这一要求。
        //如果 ProbeForRead 函数成功执行，说明 UserFakeObject 指向的内存区域是可以从内核模式安全读取的, 即在后续的操作中，我们可以将用户空间的 UserFakeObject 数据安全地复制到内核空间的 KernelFakeObject; 如果 ProbeForRead 检测到问题，它将引发一个异常，异常会被 __except 块捕获并处理。
        RtlCopyMemory((PVOID)KernelFakeObject, (PVOID)UserFakeObject, sizeof(FAKE_OBJECT));
        //使用 RtlCopyMemory 函数将用户传入的伪造结构(UserFakeObject)复制到内核空间的 FakeObject (KernelFakeObject), 我们传递了三个参数给 RtlCopyMemory 函数：
        //(PVOID)KernelFakeObject：目标地址，即内核空间中的 KernelFakeObject 指针;
        //(PVOID)UserFakeObject：源地址，即用户空间中的 UserFakeObject 指针;
        //sizeof(FAKE_OBJECT)：要复制的字节数，这里是 FAKE_OBJECT 结构的大小;
        //RtlCopyMemory 函数在内核中执行内存复制操作，从源地址（UserFakeObject）开始复制 sizeof(FAKE_OBJECT) 字节的数据到目标地址（KernelFakeObject）, 这样，我们就将用户空间中的 FakeObject 安全地复制到了内核空间,通过这种方式，我们确保了内核空间中的 FakeObject 与用户传入的伪造结构具有相同的数据。
        KernelFakeObject->Buffer[sizeof(KernelFakeObject->Buffer) - 1] = '\0';      
        //这一行代码将 KernelFakeObject 中的 Buffer 数组的最后一个字符设置为 '\0'（空字符），确保字符串在内存中以空字符结尾。
        //KernelFakeObject->Buffer：访问 KernelFakeObject 结构中的 Buffer 成员，这是一个字符数组;
        //sizeof(KernelFakeObject->Buffer)：使用 sizeof 运算符计算 Buffer 数组的大小（以字节为单位）, 这将给出数组的总长度;
        //sizeof(KernelFakeObject->Buffer) - 1：将数组长度减 1，以获得数组中最后一个元素的索引, 因为数组索引是从 0 开始的，所以需要减 1;
        //KernelFakeObject->Buffer[sizeof(KernelFakeObject->Buffer) - 1] = '\0';：将数组的最后一个元素设置为空字符（'\0'）,这样一来，Buffer 就成了一个空终止字符串，防止了潜在的字符串溢出错误;
        //通过在 KernelFakeObject 的 Buffer 数组末尾添加空字符，我们确保了在处理该字符串时不会超出其实际长度，从而提高了程序的安全性和稳定性。
        DbgPrint("[+] Fake Object: 0x%p\n", KernelFakeObject); 
        //输出一条调试信息，显示已创建的 FakeObject  KernelFakeObject 在内核空间中的地址
    }
    __except (EXCEPTION_EXECUTE_HANDLER) { //输出异常
        Status = GetExceptionCode();
        DbgPrint("[-] Exception Code: 0x%X\n", Status);
    }
    return Status;
}
FakeObject 的大小与 UseAfterFreeObject
相同，它包含一个0x58大小的缓冲区，也就是说我们只需填充缓冲区的前4个字节，将其设置为一个地址，最终这个地址会被解释为一个函数指针。
为了实现UaF漏洞利用，需要在释放 UseAfterFreeObject 之后创建一个 FakeObject ，因为 UseAfterFreeObject
和 FakeObject 大小相同，它们可以占据相同的内存空间;  
当 UseAfterFreeObject 被释放后， FakeObject 可以占据其内存空间，使得当再次使用 UseAfterFreeObject
时，实际上使用的是 FakeObject 。
在这个例子中，我们会将 FakeObject 的首个DWORD（前4个字节）被设置为恶意代码（payload）的地址(函数指针)，用 FakeObject
占据原先的内存空间, 当 UseAfterFreeObject 再次被使用时，实际上操作的是 FakeObject ，而 FakeObject
的回调函数指针指向了恶意代码，这就实现了对恶意代码的执行，之所以可以这样做漏洞利用，是因为我们能够预测并控制 FakeObject 在内存中的布局，使其与
UseAfterFreeObject 的布局相同 ,在这种情况下，我们可以确保伪造对象的回调函数指针指向我们想要执行的恶意代码,
缓冲区的剩余部分与做漏洞利用不相关，因为在此例中我们不关心它们的值，只关心回调函数指针。
UseAfterFreeObject 的结构定义如下：
typedef struct _USE_AFTER_FREE {  
FunctionPointer Callback;  
CHAR Buffer[0x54];  
} USE_AFTER_FREE, *PUSE_AFTER_FREE;
//当我们填充缓冲区的前4个字节时，我们实际上是在伪造一个与 UseAfterFreeObject
结构相似的对象，该结构体包含一个回调函数指针（FunctionPointer Callback）和一个大小为0x54的缓冲区（CHAR
Buffer[0x54]），根据前面学习的能容，我们可以想到内存布局是，先是回调函数指针，再接着是缓冲区;  
//所以当我们填充伪造对象缓冲区的前4个字节时，我们实际上是在设置回调函数指针的值。
typedef struct _FAKE_OBJECT { // FakeObject  
CHAR Buffer[0x58]; // 0x58  
} FAKE_OBJECT, *PFAKE_OBJECT;
''''  
DeviceIoControl函数:  
它是Windows操作系统中的一个API函数，用于向设备驱动程序发送I/O控制代码（Input/Output Control
Codes，缩写为IOCTLs）, 这个函数允许应用程序与设备驱动程序进行交互，发送控制代码以执行特定的操作，如读取、写入或配置设备。