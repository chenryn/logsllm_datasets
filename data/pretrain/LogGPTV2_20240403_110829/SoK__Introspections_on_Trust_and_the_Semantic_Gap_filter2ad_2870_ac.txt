[24, 31, 38,
41, 64, 77]
Guest with hypervisor
protection
[30, 47, 84]
Sibling VM
Hypervisor
[40, 44, 45,
86]
[65, 73, 79,
83, 89]
VMI TECHNIQUES, MONITOR PLACEMENT (AS ILLUSTRATED IN FIGURE 1, AND THEIR UNDERLYING TRUST ASSUMPTIONS.
Table II
data objects that must be writable. These function pointers
are used to implement a crude form of object orientation.
For instance, the Linux VFS allows a low-level ﬁle system
to extend generic routines for operations such as reading a
ﬁle or following a symbolic link.
Lares [73] implemented a simple page-protection mech-
anism on kernel object hooks, but incurred substantial per-
formance penalties because these executable pointers are in
the same page as ﬁelds which the guest kernel must be
able to write, such as the ﬁle size and modiﬁcation time.
HookSafe [89] addresses this problem by modifying OS
kernel code to relocate all hooks to a read-only, shadow
memory space. All code that calls a hook must also check
that the requested hook is in the shadow memory space, and
some policy must also be applied to approve which code
can be added to the hook section. The hook redirection
and checking code is in the kernel’s binary text, and is
read-only. HookSafe identiﬁes locations where hooks are
called through dynamic learning (§III-A); this could likely
be extended with static analysis for more complete coverage.
Ultimately, these techniques are approximating the larger
property of ensuring control ﬂow integrity (CFI) of the
kernel [18]. Ensuring CFI is a broad problem with a range of
techniques. For instance, Program Shepherding [59] protects
the integrity of implanted functions [30] (§III-B), using a
machine code interpreter to monitor all control transfers
and guarantee that each transfer satisﬁes a given security
policy. Discovering efﬁcient CFI mechanisms is a relevant,
but complimentary problem to VMI.
IV. PREVENTION VS. DETECTION
Some introspection tools prevent certain security policy
violations, such as execution of unauthorized code, whereas
others only detect a compromise after the fact. Clearly,
prevention is a more desirable goal, but many designs accept
detection to lower performance overheads. This section
discusses how certain design choices fundamentally dictate
whether a system can provide detection or prevention.
Prevention requires a mechanism to identify and inter-
pose on a low-level operation within a VM which violates
a system security policy. Certain goals map naturally onto
hardware mechanisms, such as page protections on kernel
code or hooks [73, 79, 83, 89]. Other goals, such as
upholding data structure invariants the kernel code relies
upon, are open questions.
As a result, violations of more challenging properties are
currently only detected after the fact by VMI tools [24,
39, 40, 44, 51, 64, 65, 74, 75, 77, 80, 84]. In general,
there is a strong connection between approaches that peri-
odically search memory and detection. Periodic searching
is a good ﬁt for malware that persistently modiﬁes data
structures, but can miss transient modiﬁcations. To convert
these approaches to prevention techniques would require
interposing on every store, which is prohibitively expensive.
Moreover, because some invariants span multiple writes,
even this strawman approach would likely yield false nega-
tives without even deeper analysis of the code behavior.
Current detection systems usually just power off a com-
promised VM and alert an administrator. Several research
projects identify how systems can recover from an intrusion
or other security violation [32, 42, 57, 58] In general,
610
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:07 UTC from IEEE Xplore.  Restrictions apply. 
general-purpose solutions either incur relatively high over-
heads to track update dependencies (35% for the most recent
general-purpose, single-machine recovery system [58]), or
leverage application-speciﬁc properties. Improving perfor-
mance and generality of recovery systems is an important
direction for future work.
A. Asynchronous Vs Synchronous Mechanisms
Synchronous mechanisms mediate guest operations inline
to prevent security policy violations, or receive very low
latency notiﬁcation of changes. All prevention systems we
surveyed [73, 79, 83, 84, 89] use synchronous mechanisms,
such as page protection or code implanting. Several low-
latency detection systems use customized hardware, dis-
cussed further in §IV-B. A few systems also use syn-
chronous mechanisms on commodity hardware for detec-
tion [60, 65, 77], but could likely lower their overheads with
an asynchronous mechanism.
Asynchronous mechanisms execute concurrently with a
running guest and inspect its memory. These systems gener-
ally introspect into a snapshot of memory [24, 39, 64, 74] or
a read-only or copy-on-write view of guest memory [40, 44,
51, 53, 75, 80]. All surveyed asynchronous systems detect
rootkits after infection through passive monitoring.
On one hand, the synchronous systems gain a vantage
point over their counterparts against transient attacks but
increase the overhead for the guest OS being protected.
On the other hand, asynchronous systems introduce lower
monitoring overhead but miss cleverly built transient attacks;
they are also limited due to the inherent race condition
between the attacker and the detection cycle.
Synchronous and asynchronous mechanisms make fun-
damental trade-offs across the performance, frequency of
policy-relevant events, risk, and assumptions about the be-
havior of the system. Synchronous mechanisms tend to
be more expensive, and are generally only effective when
the monitored events are infrequent, such as a change in
the access pattern to a given virtual page. The cost of an
asynchronous search of memory can also be quite high
(ranging from milliseconds [51] to minutes [31]), but the
frequency can be adjusted to an acceptable rate—trading
risk for performance. Both synchronous and asynchronous
systems make potentially fragile assumptions about
the
system to improve performance, such as knowing all hook
locations or assuming all objects of a given type are allocated
from the same slab. These risks could be reduced in future
work by identifying low-frequency events that indicate a
policy violation, are monitorable without making fragile
assumptions about
the system, and introduce little-to-no
overheads in the common case.
A ﬁnal issue with executing introspection concurrently
with the execution of an OS is false positives arising because
of transient states. In general, an OS may violate its own
invariants temporarily while executing inside of a critical
section. A correct OS will, of course, restore the invari-
ants before exiting the critical section. If an introspection
agent searches memory during a kernel critical section, it
may observe benign violations of these invariants, which
will resolve quickly. Current approaches to this problem
include simply looking for repeated violations of an invariant
(leaving the system vulnerable to race conditions with an
attacker), or only taking memory snapshots when the OS
cannot be in any critical sections (e.g., by preempting each
CPU while out of the guest kernel).
Current VMI systems face fundamental trade-offs between
performance and risk, often making fragile assumptions
about the guest OS.
B. Hardware-Assisted Introspection
Several research prototypes have employed customized
hardware for introspection [60, 67, 71], or applied existing
hardware in novel ways [22, 74, 88]. The primary divi-
sion within the current design space of hardware-assisted
introspection is whether the introspection tool uses memory
snapshots or snoops on a bus. Snooping can monitor memory
regions at ﬁner granularity than page protections, reducing
overheads.
1) Snapshotting: One strategy for hardware-assisted in-
trospection is using a PCI device to take RAM snapshots,
which are sent to a second machine for introspection (mon-
itored and monitor, respectively). For instance, Copilot [74]
adds an Intel StrongARM EBSA-285 Evaluation Board
on the monitored machine’s PCI bus. The PCI device on
the monitored machine uses DMA requests to retrieve a
snapshot of host RAM, which is sent to the monitor machine
upon request over an independent communication link. The
monitor periodically requests snapshots and primarily checks
that the hash of the kernel binary text and certain code
pointers, such as the system call table, have not changed
from known-good values.
Unfortunately, a memory snapshot alone isn’t sufﬁcient to
robustly reconstruct and interpret a snapshot. Of particular
importance is the value of the cr3 register, which gives the
physical address of the root of the page tables. Without this
CPU register value, one cannot reliably reconstruct the vir-
tual memory mapping. Similarly, a system can block access
to regions of physical memory using an IOMMU [20, 27].
HyperCheck [88] augments physical memory snapshots
with the contents of the cr3 register, using the CPU System
Management Mode (SMM) [6]. SMM is an x86 CPU
mode designed primarily for ﬁrmware, power management,
and other system functions. SMM has the advantage of
protecting the introspection code from the running system
as well as giving access to the CPU registers, but must also
preempt the system while running (i.e., this is a synchronous
mechanism). The processor enters SMM when the SMM
interrupt pin (SMI) is raised, generally by the Advanced
611
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:07 UTC from IEEE Xplore.  Restrictions apply. 
Programmable Interrupt Controller (APIC). The hypervisor
is required to create SMI interrupts to switch the CPU to
SMM mode. Upon entering SMM, the processor will launch
a program stored in system management RAM (SMRAM).
SMRAM is either a locked region of system DRAM, or a
separate chip, and ranges in size from 32 KB to 4 GB [6]
Outside of SMM, SMRAM may not be read or written.
Within SMM, the integrity checking agent has unfettered
access to all RAM and devices, and is not limited by a
IOMMU or other attacks discussed previously. Unfortu-
nately, SMM mode also has the limitation that Windows
and Linux will hang if any software spends too much time
in SMM, bounding the time introspection code can take.
HyperSentry [22] further reﬁnes this model by triggering
an SMI handler from an Intelligent Platform Management
Interface (IPMI) device. IPMI devices generally execute
system management code, such as powering the system on
or off over the network, on a device hidden from the system
software.
A limitation of any SMM-based solution, including the
ones above, is that a malicious hypervisor could block SMI
interrupts on every CPU in the APIC, effectively starving the
introspection tool. For VMI, trusting the hypervisor is not a
problem, but the hardware isolation from the hypervisor is
incomplete.
Each of these systems focus on measuring the integrity
of system software—e.g., checking that the executable pages
have a known-good hash value. At least in SMM mode, more
computationally expensive introspection may be impractical.
Because all of these operations operate on periodic snap-
shots, which may visibly perturb memory access timings, a
concern is that an adversary could predict the snapshotting
interval and race with the introspection agent. In order to
ensure that transient attacks cannot race with the snapshot
creation, more recent systems have turned to snooping,
which can continuously monitor memory changes.
2) Snooping: A number of recent projects have developed
prototype security hardware that snoops on the memory
bus [60, 67, 71]. These systems have the useful function of
efﬁciently monitoring writes to sensitive code regions; unlike
page protections, snooping systems can monitor writes at
the ﬁner granularity of cache lines, reducing the number
of needless checks triggered by memory accesses adjacent
to the structure being monitored. These systems can also
detect updates to memory from a malicious device or driver
by DMA, which page-level protections cannot detect.
However, a speciﬁc memory event triggering asynchronous
checks is a clear improvement over periodic snapshots,
in both efﬁciency and risk of races with the attacker. A
small complication with snooping-triggered introspection
is that
invariants often span multiple cache lines, such
as next.prev == next in a doubly-linked list. If an
invariant check is triggered on the ﬁrst write in a critical
section, the system will see many false positives. KI-Mon
addresses this by waiting until the system quiesces.
We note that these systems do not use commodity hard-
ware, but are implemented in simulators or FPGAs. Sec-
tion VI-B argues that this is a promising area of research
that deserves more attention, but more work has to be done
to demonstrate the utility of the approach before it will
be widely available. Similarly, these systems have initially
focused on attack detection, but it would be interesting to
extend these systems to recovering from a detected attack.
Snooping is useful for ﬁner-grained memory monitoring.
it
C. Memory Protection: A necessary property for prevention
We end this section by observing that all prevention
systems employ some form of memory protection to syn-
chronously interpose on sensitive data writes. For example,
HookSafe [89] and Lares [73] use memory protection to
guard against unexpected updates to function pointers. In
contrast,
isn’t clear how to convert an asynchronous
memory search from a detection into a prevention tool. The
most likely candidate is with selective, ﬁne-grained hardware
memory bus snooping, described above. Thus,
if attack
prevention is a more desirable goal than detection after-the-
fact, the community should focus more effort on discovering
lightweight, synchronous monitoring mechanisms.
All current prevention systems rely on synchronous mem-
ory protection.
V. ATTACKS, DEFENSE, AND TRUST
This section explains the three major classes of attacks
against VMI, known defenses against those attacks, and
explains how these attacks relate to an underlying trust
placed in the guest OS. These issues are summarized in
Table III.
A. Kernel Object Hooking
A Kernel Object Hooking (KOH) attack [8] attempts to
modify function pointers (hooks) located in the kernel text or
data sections. An attacker overwrites a function pointer with
the address of a function provided by the attacker, which
will then allow the attacker to interpose on a desired set of
kernel operations. In some sense, Linux Security Modules
provide similar hooks for security enhancements [91]; the
primary difference is that KOH repurposes other hooks used
for purposes such as implementing an extensible virtual ﬁle
Although most prototypes have focused on detecting mod-
iﬁcations to the kernel binary itself, KI-Mon also watches
for updates to object hooks [60], and there is likely no
fundamental reason other solutions could not implement this.
aim to be very
lightweight, they cannot then check data structure invariants
or code integrity, but
instead signal a companion snap-
shotting device (as discussed above) to do these checks.
snooping devices
Because
these
612
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:07 UTC from IEEE Xplore.  Restrictions apply. 
system (VFS) model. The defenses against KOH attacks
generally depend on whether the hook is located in the text
or data segment.
1) Text section hooks: The primary text section hooks