putchar()语句，因为是++ch，所以先递增ch（现在ch的值是J）再打印它的
值。然后进入下一轮迭代，读取输入序列中的下一个字符（a），重复以上
步骤。需要注意的是，两个递增运算符只在ch被赋值后影响它的值，不会让
程序在输入序列中移动。
7.C的标准I/O库把不同的文件映射为统一的流来统一处理。
8.数值输入会跳过空格和换行符，但是字符输入不会。假设有下面的代
码：
int score;
char grade;
printf("Enter the score.\n");
scanf("%s", %score);
printf("Enter the letter grade.\n");
grade = getchar();
如果输入分数98，然后按下Enter键把分数发送给程序，其实还发送了
一个换行符。这个换行符会留在输入序列中，成为下一个读取的值
（grade）。如果在字符输入之前输入了数字，就应该在处理字符输入之前
添加删除换行符的代码。
A.9 第9章复习题答案
1.形式参数是定义在被调函数中的变量。实际参数是出现在函数调用中
的值，该值被赋给形式参数。可以把实际参数视为在函数调用时初始化形式
参数的值。
1481
2.a.void donut(int n)
b.int gear(int t1, int t2)
c.int guess(void)
d.void stuff_it(double d, double *pd)
3.a.char n_to_char(int n)
b.int digits(double x, int n)
c.double * which(double * p1, double * p2)
d.int random(void)
4.
int sum(int a, int b)
{
return a + b;
}
5.用double替换int即可：
double sum(double a, double b)
{
return a + b;
}
6.该函数要使用指针：
1482
void alter(int * pa, int * pb)
{
int temp;
temp = *pa + *pb;
*pb = *pa - *pb;
*pa = temp;
}
或者：
void alter(int * pa, int * pb)
{
*pa += *pb;
*pb = *pa - 2 * *pb;
}
7.不正确。num应声明在salami()函数的参数列表中，而不是声明在函数
体中。另外，把count++改成num++。
8.下面是一种方案：
int largest(int a, int b, int c)
{
int max = a;
1483
if (b > max)
max = b;
if (c > max)
max = c;
return max;
}
9.下面是一个最小的程序，showmenu()和getchoice()函数分别是a和b的答
案。
#include 
/* 声明程序中要用到的函数 */
void showmenu(void);
int getchoice(int, int);
int main()
{
int res;
showmenu();
while ((res = getchoice(1, 4)) != 4)
{
printf("I like choice %d.\n", res);
1484
showmenu();
}
printf("Bye!\n");
return 0;
}
void showmenu(void)
{
printf("Please choose one of the following:\n");
printf("1) copy files     2) move files\n");
printf("3) remove files    4) quit\n");
printf("Enter the number of your choice:\n");
}
int getchoice(int low, int high)
{
int ans;
int good;
good = scanf("%d", &ans);
while (good == 1 && (ans  high))
{
1485
printf("%d is not a valid choice; try again\n", ans);
showmenu();
scanf("%d", &ans);
}
if (good != 1)
{
printf("Non-numeric input.");
ans = 4;
}
return ans;
}
A.10 第10章复习题答案
1.打印的内容如下：
8 8
4 4
0 0
2 2
2.数组ref有4个元素，因为初始化列表中的值是4个。
3.数组名ref指向该数组的首元素（整数8）。表达式ref + 1指向该数组的
1486
第2个元素（整数4）。++ref不是有效的表达式，因为ref是一个常量，不是
变量。
4.ptr指向第1个元素，ptr + 2指向第3个元素（即第2行的第1个元素）。
a.12和16。
b.12和14（初始化列表中，用花括号把12括起来，把14和16括起来，所
以12初始化第1行的第1个元素，而14初始化第2行的第1个元素）。
5.ptr指向第1行，ptr + 1指向第2行。*ptr指向第1行的第1个元素，而*(ptr
+ 1)指向第2行的第1个元素。
a.12和16。
b.12和14（同第4题，12初始化第1行的第1个元素，而14初始化第2行的
第1个元素）。
6.a.&grid[22][56]
b.&grid[22][0]或grid[22]
（grid[22]是一个内含100个元素的一维数组，因此它就是首元素
grid[22][0]的地址。）
c.&grid[0][0]或grid[0]或(int *) grid
（grid[0]是int类型元素grid[0][0]的地址，grid是内含100个元素的grid[0]
数组的地址。
这两个地址的数值相同，但是类型不同，可以用强制类型转换把它们转
换成相同的类型。）
7.a.int digits[10];
b.float rates[6];
1487
c.int mat[3][5];
d.char * psa[20] ;
注意，[]比*的优先级高，所以在没有圆括号的情况下，psa先与[20]结
合，然后再与*结合。因此该声明与char *(psa[20]);相同。
e.char (*pstr)[20];
注意
对第e小题而言，char *pstr[20];不正确。这会让pstr成为一个指针数组，
而不是一个指向数组的指针。具体地说，如果使用该声明，pstr就指向一个
char类型的值（即数组的第1个成员），而pstr + 1则指向下一个字节。使用
正确的声明，pstr是一个变量，而不是一个数组名。而且pstr+ 1指向起始字
节后面的第20个字节。
8.a.int sextet[6] = {1, 2, 4, 8, 16, 32};
b.sextet[2]
c.int lots[100] = { [99] = -1};
d.int pots[100] = { [5] = 101, [10] = 101,101, 101, 101};
9.0～9
10.a.rootbeer[2] = value;有效。
b.scanf("%f", &rootbeer );无效，rootbeer不是float类型。
c.rootbeer = value;无效，rootbeer不是float类型。
d.printf("%f", rootbeer);无效，rootbeer不是float类型。
e.things[4][4] = rootbeer[3];有效。
1488
f.things[5] = rootbeer;无效，不能用数组赋值。
g.pf = value;无效，value不是地址。
h.pf = rootbeer;有效。
11.int screen[800][600] ;
12.a.
void process(double ar[], int n);
void processvla(int n, double ar[n]);
process(trots, 20);
processvla(20, trots);
b.
void process2(short ar2[30], int n);
void process2vla(int n, int m, short ar2[n][m]);
process2(clops, 10);
process2vla(10, 30, clops);
c.
void process3(long ar3[10][15], int n);
void process3vla(int n, int m,int k, long ar3[n][m][k]);
process3(shots, 5);
process3vla(5, 10, 15, shots);
1489
13.a.
show( (int [4]) {8,3,9,2}, 4);
b.
show2( (int [][3]){{8,3,9}, {5,4,1}}, 2);
A.11 第11章复习题答案
1.如果希望得到一个字符串，初始化列表中应包含'\0'。当然，也可以用
另一种语法自动添加空字符：
char name[] = "Fess";
2.
See you at the snack bar.
ee you at the snack bar.
See you
e you
3.
y
my
mmy
ummy
Yummy
1490
4.I read part of it all the way through.
5.a.Ho Ho Ho!!oH oH oH
b.指向char的指针（即，char *）。
c.第1个H的地址。
d.*--pc的意思是把指针递减1，并使用储存在该位置上的值。--*pc的意
思是解引用pc指向的值，然后把该值减1（例如，H变成G）。
e.Ho Ho Ho!!oH oH o
注意
在两个！之间有一个空字符，但是通常该字符不会产生任何打印的效
果。
f.while (*pc)检查 pc 是否指向一个空字符（即，是否指向字符串的末
尾）。while 的测试条件中使用储存在指针指向位置上的值。
while (pc - str)检查pc是否与str指向相同的位置（即，字符串的开头）。
while的测试条件中使用储存在指针指向位置上的值。
g.进入第1个while循环后，pc指向空字符。进入第2个while循环后，它
指向空字符前面的存储区（即，str 所指向位置前面的位置）。把该字节解
释成一个字符，并打印这个字符。然后指针退回到前面的字节处。永远都不
会满足结束条件(pc == str)，所以这个过程会一直持续下去。
h.必须在主调程序中声明pr()：char * pr(char *);
6.字符变量占用一个字节，所以sign占1字节。但是字符常量储存为int类
型，意思是'$'通常占用2或4字节。但是实际上只使用int的1字节储存'$'的编
码。字符串"$"使用2字节：一个字节储存'$'的编码，一个字节储存的'\0'编
码。
1491
7.打印的内容如下：
How are ya, sweetie? How are ya, sweetie?
Beat the clock.
eat the clock.
Beat the clock.Win a toy.
Beat
chat
hat
at
t
t
at
How are ya, sweetie?
8.打印的内容如下：
faavrhee
*le*on*sm
9.下面是一种方案：
#include  // 提供fgets()和getchar()的原型
char * s_gets(char * st, int n)
1492
{
char * ret_val;
ret_val = fgets(st, n, stdin);
if (ret_val)