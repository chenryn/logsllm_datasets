                oper="Close"/>
A sample set of User-Role relations is: 
              GranceT
JansenW
              VincentH
              TomK
JohnW
SusanW
A sample of set Role-Inheritance relations is: 
A sample set of encodings for Role-Privilege relations is: 
           OPEN_ACCT
          CLOSE_ACCT
   DEBIT_ACCT
         CREDIT_ACCT
   CSR
          APPROVE_LOAN 
          DEBIT_LOAN
          CREDIT_LOAN
A sample set of encoding for specifying conflicting roles
is:
5. Constraints expressed through XML 
Schema
Let  us  now  review  the  structural  constraints (model-
based)  and  some  rudimentary domain-specific policy
constraints that we have been able to specify in our Bank-
RBAC  XML  Schema.  (Please  note  that  here  we  include
only constraints that can be validated by an XML Schema
parser).
5.1 Structural 
Constraints 
(Model-based) 
represented using the XML Schema 
(b)
(a) Specification  of  mandatory 
and  optional
attributes    -  specifies  what  attributes should be
specified while defining  instances  of  Bank-
RBAC  model  entities  in  the bank-enterprise
authorization specification. 
Identification of attribute whose values must be 
unique  (no  duplicates  allowed)  –  specifies  the
attribute that should have a unique value among
all instances  of  a  particular  model  entity  (e.g.
Role), or
the  identifier  for  an  entity
instance.
rather
(c) Cardinality  constraints  showing  the  number of
times (instances)  an  Bank-RBAC  model  entity
can  occur  in  the  bank-enterprise  authorization
specification.(e.g. no more  than  (say)  10  roles 
can be there in the bank enterprise). 
5.2 Domain  Constraints  represented  using  the
XML Schema 
(a) The 
that  occur 
role  names 
in  Bank-
Authorization  XML  Data  should  be  one of the
valid  names  from  the  list  specified  in the XML
Schema (through the validRole data type).
6. Specification of Domain-specific Policy 
Constraints
We  have  seen  that  the  only  domain-specific  policy 
constraint  that  XML  Schema  can  specify  is the list of
valid names  for  Bank-RBAC  model  entity  instances
through  the  enumeration  data  type.  No  other content-
based policy  constraint  can  be  specified  using  XML
Schema. For specifying these types of constraints we use
the  Schematron  language.  In  this  section we illustrate
with  several  examples 
the  specification of policy
constraints using Schematron.
In a schematron constraint definition, constraints are 
defined using the following tags:
(a) a ‘rule’ tag to define the context (in terms of the XML
schema element) for the constraint and 
(b) one  or  more  ‘assert’  tags:  Each  ‘assert’  tag  contains
the  Boolean  expression  for  the  property  that  each  of the
instances  of  the  element  (named  in  the  context)  has to
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
satisfy. Any violation  of  the  property  will  be  flagged  off
as an error. 
(c)one  or  more  ‘report’  tags: Each ‘report’ tag contains
the  Boolean  expression  for  the  property  that  each  of the
instances of the element (named in the context) should not
satisfy. Any instance  where  the  property  is  satisfied  will 
be flagged off as an error. 
(d)A  set  of  ‘diagnostic’  tags:  Each  of  these provides
information on the violating data.
(e) The above tags are enclosed within a named ‘pattern’
tag.
With  the  above  primer  on  Schematron, we now
illustrate the specification  of  some  important  policy
constraints that govern the access control requirements for 
the bank enterprise environment.
Constraint  1:  (Role Cardinality Constraint) The
cardinality limit (the maximum  number  of  users  that  can
be assigned) specified in the  role  definition  for  a  role
should not  be  violated  in  the  actual  user  assignments for
that role.
The 
the  Branch Manager
role(roleID = ‘BRM’) in our XML encoded access control
data file is as follows:
role  definition 
for 
The reference  to  the  above  data  through  the  XML
Schema  components  forms  the context. The context
therefore  is  a  role  instance definition  whose  roleID
attribute is ‘BRM” (for Branch Manager). This context is
expressed in schematron as:
relation 
(where 
The assertion to be made in this context is that in the
corresponding  User-Role 
the
@role=’BRM’), the count of the number of users should
not  exceed  the  number  specified  through the cardinality
attribute  (@cardinality  =  1).  The  assertion and the
corresponding 
in
schematron 
the  assert  and  diagnostic tags
respectively are given below: 
diagnostic  messages 
expressed 
through 
       = 
count(../UserRoleAssignment/user[../@role = 'BRM']) " 
diagnostics="Cardinality_Exceeded">Cardinality for the 
role exceeded 
           The
actual number of users assigned is: =
     count(../UserRoleAssignment/user[../@role = 'BRM'])
    "diagnostics="Cardinality_Exceeded">Cardinality for 
      the role exceeded 
     The
         actual number of users assigned is:   while cardinality limit is: 
The actual data in our Bank-Authorization XML Data
file is: 
              GranceT
JansenW
therefore  generated the
The  schematron  validator 
following error message:
From pattern "Checking for Role Cardinality":
     Assertion fails: "Cardinality for the role exceeded"  at
         /Bank_RBAC_Model[1]/role[1]
        ... The actual number of users assigned 
is: 2 while cardinality limit is: 1
Constraint  2:  (Inheritance  Integrity Constraint): Two 
conflicting roles  (specified  in  the  Static  Separation  of
Duty specification) cannot inherit each other. For example
the constraint that the role that conflicts with the Internal
Auditor role cannot inherit that role is specified as:
    A conflicting role cannot be 
inherited.
         The violating 
inheritance assignment is made for the role: 
The  role  that  violates  this  inheritance integrity constraint
in  our  bank-enterprise  authorization  specification is
identified  and  the  following diagnostic message is
generated by the Schematron Validator tool:
From pattern "Checking for Inheritance Integrity":
Assertion fails: "A conflicting role cannot be inherited."
at          /Bank_RBAC_Model[1]/role_inherit[6]
            ... The violating inheritance 
assignment is made for the role: BranchManager
Constraint  3:  (Static  Separation of  Duty  Constraint):
A user  assigned 
role
(@role=’AUD’) should not be assigned to the Accountant
role 
Internal  Auditor  and
Accountant are conflicting roles.
Internal  Auditor 
(@role=’ACC’) 
since 
to 
the 
The  context,  the  assertion  and  the diagnostic tags
used to specify the above constraint is as follows:
 There should not be a common 
user in Audit and Accounting roles. 
         The SOD violating 
assignment is made for user: 
For  our  Bank-Authorization    XML  Data, the schematron
validator generated the following message:
From pattern "Checking for Separation of Duty":
     Assertion fails: "There should not be a common user in 
Audit and Accounting roles."  at
   /Bank_RBAC_Model[1]/UserRoleAssignment[6]/user[1]
        ...  The SOD  violating  assignment  is  made
for user: VincentH 
Constraint  4: 
(Constraint  specifying Conflicting
Users): Users  John  Wack  (user/text()  =’JohnW’)  and 
Susan  Wack  (user/text()  =  ‘SusanW’)  should not be