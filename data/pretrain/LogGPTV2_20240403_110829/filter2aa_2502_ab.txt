○
Assertion failure
○
Unwrapping panics
○
Arithmetic overflows
○
Out of Memory (OOM) error
○
Unhandled exception (Python)
32
#BHUSA @BlackHatEvents
●
Improving the corpora by gathering valid inputs/seeds from internet
○
WebAssembly/spec: WebAssembly core testsuite
○
Existing WebAssembly fuzzing corpora - here, here or there
Fuzzers
Fuzzing strategy: Improvements #2
33
Mutation
.wasm
Monitoring
.wasm
.wasm
.wasm
pywasm
Coverage
…
Crashes
Corpus
wasmtime
wasmer
#BHUSA @BlackHatEvents
3. Grammar-based fuzzing
34
#BHUSA @BlackHatEvents
Issue: Module validation mechanism
●
The decoded module undergoes validation checks (such as type checking)
○
Validation mechanism is documented in the specs (here)
■
Conventions
■
Types
■
Instructions
■
Modules
●
Diﬀerent implementations
○
wasm-validator tool (binaryen - C/C++)
○
wasm-validate tool (wabt - C/C++)
○
WebAssembly .validate (JS API - JavaScript)
●
Further reading:
○
WebAssembly Core Specification: Validation Algorithm - link
○
Mechanising and Verifying the WebAssembly Specification - link
○
“One pass verification process” explains - link
35
#BHUSA @BlackHatEvents
Fuzzing strategy: Improvements #3
●
Add new fuzzing harnesses to target validation entry points.
○
Module decoding will also be called by the validation function
36
#BHUSA @BlackHatEvents
●
Grammar-based fuzzing
○
Grammar allows for systematic and eﬀicient test generation, particularly for complex formats.
○
Convert WebAssembly text files into wasm binaries and add them to the corpora
■
Found interesting wat files online, create and generate custom wat files
Fuzzers
Standalone VMs: Grammar-based fuzzing
37
Mutation
.wasm
Monitoring
.wasm
.wasm
.wasm
pywasm
Coverage
…
Crashes
Corpus
wasmtime
wasmer
.wat
.wat
.wat
#BHUSA @BlackHatEvents
Input: WebAssembly Binary Format & Text Format
38
Compilation
binary file (.wasm)
wasm text format (.wat)
Rust
C/C++
#BHUSA @BlackHatEvents
Input: WebAssembly Text Format
●
Standardized text format
○
File extensions: .wat
○
S-expressions (like LISP): Module and section definitions
○
Linear representation: Functions body and Low-level instructions
●
MVP Instruction set
○
Small Turing-complete ISA: ~172 instructions
○
Data types: i32, i64, f32, f64
○
Control-Flow operators 
■
Label 
block loop if else end
■
Branch 
br br_if br_table
■
Function call 
call call_indirect
○
Memory operators 
load, store
○
Variables operators 
local, global
○
Arithmetic operators 
+ - * / % && >> sqrt
○
Constant operators 
i32.const
○
Conversion operators 
wrap trunc convert
39
#BHUSA @BlackHatEvents
MVP 1.0 Instruction Set Architecture (ISA)
40
i32
i64
f32
f64
#BHUSA @BlackHatEvents
Results: ~6 bugs/vulnerabilities
●
Found some new bugs by accident during conversion from text format (wat) to binary format (wasm)
●
Wasmprinter (Rust)
○
Out of Memory (OOM) error - issue
●
WABT (C/C++) - wasm2wat, wast2json
○
Assertion failure - issues (5)
41
#BHUSA @BlackHatEvents
Fuzzing strategy: Improvements #4
●
Create edge case modules
○
Duplicate sections (unique & customs)
○
Redefinition of exported/imported functions & memory
○
Change sections ordering
○
Create a lot of sections, elements, etc.
○
Inject unusual values for int/float
●
Create a polyglot WebAssembly module
○
Valid HTML/JS/wasm file
■
Data section injection
■
Custom section injection
○
Detailed blogpost here
42
#BHUSA @BlackHatEvents
4. Structure-aware fuzzing
43
#BHUSA @BlackHatEvents
●
Structure-aware fuzzing
○
Generate semi-well-formed inputs based on knowledge of structure, file format, or protocol.
○
Modules are generated, without losing time in parsing, with fuzzy values placed at strategic locations. 
Fuzzers
Fuzzing strategy: Structure-aware fuzzing
44
Mutation
.wasm
Monitoring
.wasm
.wasm
.wasm
pywasm
Coverage
…
Crashes
Corpus
wasmtime
wasmer
.wat
.wat
.wat
Generation
#BHUSA @BlackHatEvents
Standalone VMs (Rust): Structure-based fuzzing
●
Fuzzers
○
Arbitrary trait: The trait for generating structured data from arbitrary, unstructured input.
○
wasm-smith: A WebAssembly test case generator.
●
Targets (all)
○
Rust code directly via in-process fuzzing (cargofuzz, honggfuzz-rs, etc.)
○
Other targets via shared corpora
●
Complexity: Low/Medium
○
Integrating the arbitrary trait can be challenging 
○
Wasm-smith is really good, fast and easy to use
●
Results: 0 new direct bugs
○
Generate interesting inputs that will be mutated later
○
Helps to increase coverage
45
#BHUSA @BlackHatEvents
5. Diﬀerential fuzzing
46
#BHUSA @BlackHatEvents
Fuzzing strategy: Improvements #5
●
Add new fuzzing harnesses to target instantiation phases.
○
Create simple imports and provide them to Instance constructors.
47
#BHUSA @BlackHatEvents
Fuzzing strategy: Diﬀerential fuzzing
48
●
Diﬀerential fuzzing
○
Observe if two program implementations/variants produce diﬀerent outputs for the same input.
○
Really eﬀicient way to find logic bugs, unimplemented cases, etc.
○
Famous diﬀerential fuzzing projects
■
cryptofuzz, beacon-fuzz
.wasm
.wasm
.wasm
.wasm
.wasm
wasmer
wabt
wasmtime
binaryen
pywasm
#BHUSA @BlackHatEvents
Diﬀerential fuzzing
●
Type of bugs:
○
Logic bugs or unimplemented features
○
Consensus bugs (critical for blockchains)
●
Fuzzers: Just a Python or Bash script is working
●
Targets: All of them
●
Complexity: Low
○
No need for any bindings if youʼre using threads/subprocesses
○
A lot of false positives due to WebAssembly feature supports
●
Results: 2 bugs/vulnerabilities
○
[wabt] Incorrect validation/rejection - issues
49
#BHUSA @BlackHatEvents
What about browsers?
50
#BHUSA @BlackHatEvents
Targets: Browserʼs WebAssembly VMs
●
In browsers, the WebAssembly runtime is part of the JavaScript engine.
●
Targets
○
SpiderMonkey (Firefox)
○
JavaScriptCore (Safari)
○
V8 (Google chrome)
51
#BHUSA @BlackHatEvents
Targets: Browserʼs WebAssembly VMs
●
In browsers, the WebAssembly runtime is part of the JavaScript engine.
●
Targets
○
SpiderMonkey (Firefox)
○
JavaScriptCore (Safari)
○
V8 (Google chrome)
52
#BHUSA @BlackHatEvents
WebAssembly JavaScript APIs
53
●
Complete documentation on Mozilla MDN for WebAssembly
○
Methods/Constructors
○
Browser compatibility table
#BHUSA @BlackHatEvents
WebAssembly JavaScript APIs
54
●
WebAssembly.Instance
○
Stateful, executable instance of a WebAssembly.Module.
●
WebAssembly.instantiate
○
Compile and instantiate WebAssembly code.
●
WebAssembly.instantiateStreaming
○
Compiles and instantiates a WebAssembly module directly from a streamed underlying source.
●
WebAssembly.Memory
○
Accessible and mutable from both JavaScript and WebAssembly.
●
WebAssembly.Global
○
Global variable instance, accessible from both JavaScript and importable/exportable across one or more 
WebAssembly.Module instances.
●
WebAssembly.Table
○
Array-like structure accessible & mutable from both JavaScript and WebAssembly.
#BHUSA @BlackHatEvents
Fuzzing strategy: Grammar-based fuzzing
●
Grammar-based fuzzing
○
Javascript files are generated by the fuzzer based on a given grammar
○
We are generating sequence of WebAssembly JavaScript APIs calls
○
Fuzzers
■
Dharma: Generation-based, context-free grammar fuzzer - wasm.dg
■
Domato: DOM fuzzer
■
Fuzzilli4wasm: Fuzzer for wasm fuzzing based on fuzzilli
●
Targets
○
SpiderMonkey (Firefox)
○
JavaScriptCore (Safari)
○
V8 (Google chrome)
●
Complexity: Medium
○
You need to manually write grammars
○
Itʼs time-consuming
●
Results: Some bugs & duplicates
○
Not public
55
#BHUSA @BlackHatEvents
Targets: WebAssembly JIT engines
●
Spidermonkey (Firefox)
○
WASM-Baseline: fast translation to machine code
○
WASM-Ion: wasm to MIR translator
○
Cranelift: low-level retargetable code generator
●
JavaScriptCore (Safari)
○
LLInt: Low Level Interpreter
○
BBQ: Build Bytecode Quickly
○
OMG: Optimized Machine-code Generator
●
V8 (Google chrome)
○
Liftoﬀ: baseline compiler for WebAssembly
○
TurboFan: optimizing compiler
56
#BHUSA @BlackHatEvents
Fuzzing strategy: Diﬀerential fuzzing
57
.wasm
res: 42
arg: 42
arg: 42
res: 56
#BHUSA @BlackHatEvents
●
Type of JIT bugs
○
Memory corruption bugs in the compiler
○
Incorrect optimization
○
Bugs in code generators
●
Targets
○
WASM-Baseline vs WASM-Ion vs Cranelift
○
LLInt vs BBQ vs OMG
○
Liftoﬀ vs TurboFan
●
Complexity: Hard
○
You need to generate valid wasm modules
○
You can force optimization using JS loops
●
Results: 0 bugs/vulnerabilities (WIP)
○
JIT compilers for WebAssembly are really simple for the moment
○
Not a lot of public research, itʼs still an early stage idea but some non-public bugs have been reported by researchers.
Fuzzing strategy: Diﬀerential fuzzing
58
#BHUSA @BlackHatEvents
Results & Closing Remarks
59
#BHUSA @BlackHatEvents
●
Some numbers
○
~117 bugs found
■
Rust: 53, C/C++: 53
■
Python: 10, JavaScript: 1
■
Some non-public bugs
○
Final corpora size: ~2M wasm modules
○
Total research time: 2 years
○
Active research time: 6 months full-time
○
~84 fuzzing harnesses created
○
WARF: WebAssembly Runtimes Fuzzing
●
Challenges
○
Complex to keep everything up-to-date 
○
Not the same WebAssembly features are supported by the VMs
○
Need to adapt to multiple fuzzing frameworks and languages
●
Future / Next steps
○
Add new targets and fuzzing harnesses (Go, Java, etc.)
○
Update fuzzing harnesses for WebAssembly MVP 2.0
Conclusion & Final results
60
#BHUSA @BlackHatEvents
Thanks for your time! Any questions? 
●
Twitter: @Pat_Ventuzelo
●
Mail: PI:EMAIL
61
SLIDES