only wsrc depends on gas usage since the computation of the
IT happens during this time. The total time for one round is
wsrc + wbuf + wsr.
From the experiment with CIC gas usage equal to 5.3×1010,
we see that YODA consumes 240 Million gas per second.
This amount is 450× more than the existing amount of gas
Ethereum can use per second. Note that this speedup is when
only a single IT is running. With parallel execution of ITs this
scales up further as we demonstrate in our next experiment.
Parallel CICs. We further test YODA by running up to 16
parallel ITs. Figure 4 shows the time taken for executing
different number of concurrent ITs. All ITs are invoked at
once in a single block on-chain and the gas usage of all are
kept identical. The red line in Figure 4 records the average of
the storage root commitment times and error bars are used to
indicate the range of these. Observe that the minimum commit
time remains almost constant, indicating that the time for off-
chain execution is the same. However the maximum value
increases. This is because more blocks are needed to include
the increased number of commitment transactions. As a result
the average commit time increases gradually. As future work
we will devise mechanisms to automatically provision wsrc
taking this phenomenon into account.
Evaluation of MIRACLE. We next evaluate the performance
of MIRACLE in the presence of a Byzantine adversary. In
our experiments the adversary uses the best strategy, that is it
submits a single incorrect solution for all nodes it controls.
For system design the expected number of rounds is a crucial
parameter. We determined this quantity experimentally and
compared it to its theoretical approximation. In Figure 5 we
plot E[# Rounds] versus the fraction of Byzantine nodes f for
different values of the probability of accepting an incorrect
storage root β in the range 10−3 to 10−10. For this experiment
we ﬁxed parameter values q = 0.125, M = 1600 giving us an
ES of expected size 200. Notice that E[# Rounds] increases
with an increase in f and largely agrees with the theoretical
approximation. The theoretical approximation has an artifact
in that it can be less than 1 which is impossible because the
number of rounds is at least 1 always.
Evaluation of RICE. We next evaluate the overheads associ-
ated with RICE when implemented on the EVM geth client.
For this experiment, we measure CIC execution time on the
13
unmodiﬁed EVM and then perform the same experiment in
a EVM modiﬁed with RICE implementation. For each gas
usage, we aggregate the results over 200 repetitions. Figure 6
shows the time difference of CIC execution with RICE and
without RICE. As expected, the absolute difference increases
as gas increases due to the presence of more update indices.
More interesting to observe is Figure 7 where we plot gas
usage vs. relative execution time i.e ratio of absolute time
difference and CIC execution time without RICE. First observe
that the relative overhead due to RICE is extremely low. As gas
increases, the relative time decreases because the RICE indices
become sparse in later segments and hence add less overhead.
During the early part of the graph wee see a small aberration.
This is because time with and without RICE are small and
hence minor variations in the absolute time difference get
magniﬁed relative to time without RICE.
)
s
d
n
o
c
e
s
n
i
(
e
m
T
i
2
1
0
100
101
102
103
104
Gas usage(in Millions)
Figure 6: Absolute overhead of RICE in CIC execution plotted against
increasing gas usage.
e
c
n
e
r
e
f
f
i
d
e
m
i
t
e
t
u
l
o
s
b
A
E
C
R
I
t
u
o
h
t
i
w
e
m
T
i
0.20
0.15
0.10
0.05
0
100
101
Gas usage(in Millions)
102
103
104
Figure 7: Relative overhead of RICE in CIC execution plotted against
increasing gas usage.
IX. RELATED WORK
The threat model of combining Byzantine and selﬁsh nodes
in distributed systems dates back to Aiyer et al. [1] Prior to
their work threat models in distributed systems either con-
sidered the presence of perfectly honest nodes and Byzantine
nodes, or only selﬁsh nodes. The Byzantine Altruistic Rational
(BAR) considered a more realistic scenario combining the two
models in a permissioned cooperative service with PKI [1].
Our threat model is of the BAR variety.
Most analysis of blockchain consensus protocols in the
permissionless case limit
themselves to a threat model of
Byzantine with honest nodes which are not BAR models.
These include works on Fruitchains [20], Algorand [10], and
the sleepy model of consensus [21]. In the sleepy model,
honest nodes may go ofﬂine and not participate in the protocol.
Ouroboros [13] introduces -Nash Equilibrium for a proof-of-
stake protocol. Selﬁsh mining [23] shows in case a non-zero
fraction miners in PoW blokchains behave selﬁshly, honest
behaviour is no longer an equilibrium, because individuals
unilaterally beneﬁt by joining hands with the attacker. All these
works solve a very different problem from YODA, namely that
14
of block consensus. Blocks can potentially take many values
and are easy to verify. In contrast, CIC computation can have
only one correct value and are computationally intensive to
verify.
Truebit
is a proposal
to enable CICs on permissionless
blockchains, in the presence of selﬁsh nodes [26]. Truebit
requires a single Solver to execute and upload the results of
the transaction, and any number of volunteer veriﬁers to verify
the Solver’s solution. There is no bound on the number of
veriﬁers unlike in YODA. Moreover Truebit does not claim to
provide guarantees for probability of correct CIC computation
under a threat model. In fact, recent work shows that Truebit is
susceptible to a Particpation Dilemma, where if all participants
are rational, an equilibrium exists with only a single veriﬁer
which can cheat at will [12]. It also makes payouts to veriﬁers
rare events, unlike YODA which pays ES members rewards
immediately.
Arbitrum is a system for scalable off-chain execution
of private smart contracts developed concurrently with our
work [12]. In Arbitrum, each smart contract can assign a set
of managers who execute its transactions off-chain. Any one
manager can submit a hash of the updated state on-chain. In
addition, any other manager can submit a challenge if this
earlier submitted state is incorrect. Arbitrum works under a
threat model with at least one honest manager and the rest of
the managers being rational. It has not been proved to work
in the presence of Byzantine managers, or with all managers
being rational. In contrast, YODA works in the presence of
both Byzantine and selﬁsh nodes, none of which need to be
honest. YODA is also not restricted to private smart contracts.
Several other papers focus on sharding for improving per-
formance of permissionless blockchains [2], [14], [15]. None
of these, however, focus on the speciﬁc problem of executing
CIC transactions efﬁciently. They instead increase throughput
in terms of number of non-IT transactions executed over
time. The execution (or veriﬁcation of correct execution) is
implicitly assumed to take little time, and all miners verify all
transactions.
X. DISCUSSION AND CONCLUSION
We have presented YODA which enables permissionless
blockchains to compute CICs efﬁciently. Experimental results
show that individual ITs with gas usage 450 times the maxi-
mum allowed by Ethereum can be executed using the existing
EVM. YODA uses various incentives and technical mecha-
nisms such as RICE to force rational nodes to behave honestly.
Our novel MIRACLE algorithm uses multiple rounds to
determine the correct solution and shows great savings in terms
of number of rounds when the actual Byzantine fraction of
nodes is less than the assumed worst case.
One advantage of YODA is its modular design. Several mod-
ules can be left intact, while replacing the others. Examples
of such modules are RICE, MIRACLE, SP selection, and ES
selection, which can in future be replaced by alternatives.
Several
issues need to be addressed before YODA can
become a full ﬂedged practical system. One open problem we
have not addressed is the issue of data. Often, large CICs are
likely to have large state and each IT can potentially modify
many state variable. Broadcasts of every update for every IT
can be costly in terms of communication. A possible alternative
to this state update could be storage of data in a Distributed File
[12] H. Kalodner, S. Goldfeder, X. Chen, S. M. Weinberg, and E. W. Felten,
“Arbitrum: Scalable, private smart contracts,” in Proceedings of the 27th
USENIX Conference on Security Symposium. USENIX Association,
2018, pp. 1353–1370.
[13] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
provably secure proof-of-stake blockchain protocol,” in Annual Inter-
national Cryptology Conference. Springer, 2017, pp. 357–388.
[14] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and
B. Ford, “Omniledger: A secure, scale-out, decentralized ledger via
sharding,” in 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 2018, pp. 583–598.
[15] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena,
“A secure sharding protocol for open blockchains,” in Proceedings of
the 2016 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2016, pp. 17–30.
[16] L. Luu, J. Teutsch, R. Kulkarni, and P. Saxena, “Demystifying incentives
in the consensus computer,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2015,
pp. 706–719.
[17] S. Micali, M. Rabin, and S. Vadhan, “Veriﬁable random functions,” in
Foundations of Computer Science, 1999. 40th Annual Symposium on.
IEEE, 1999, pp. 120–130.
J. F. Nash et al., “Equilibrium points in n-person games,” 1950.
[18] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[19]
[20] R. Pass and E. Shi, “Fruitchains: A fair blockchain,” in Proceedings of
the ACM Symposium on Principles of Distributed Computing. ACM,
2017, pp. 315–324.
[21] ——, “The sleepy model of consensus,” in International Conference
on the Theory and Application of Cryptology and Information Security.
Springer, 2017, pp. 380–409.
[22] R. Radner, “Collusive behavior in noncooperative epsilon-equilibria of
oligopolies with long but ﬁnite lives,” in Noncooperative Approaches
to the Theory of Perfect Competition. Elsevier, 1982, pp. 17–35.
[23] A. Sapirshtein, Y. Sompolinsky, and A. Zohar, “Optimal selﬁsh mining
strategies in bitcoin,” in International Conference on Financial Cryp-
tography and Data Security. Springer, 2016, pp. 515–532.
[24] E. Syta, P. Jovanovic, E. K. Kogias, N. Gailly, L. Gasser, I. Khofﬁ, M. J.
Fischer, and B. Ford, “Scalable bias-resistant distributed randomness,”
in Security and Privacy (SP), 2017 IEEE Symposium on.
Ieee, 2017,
pp. 444–460.
[25] N. Szabo, “Smart contracts: building blocks for digital markets,” EX-
[26]
[27]
TROPY: The Journal of Transhumanist Thought,(16), 1996.
J. Teutsch and C. Reitwießner, “A scalable veriﬁcation solution for
blockchains,” 2017.
J. van den Hooff, M. F. Kaashoek, and N. Zeldovich, “Versum:
Veriﬁable computations over large public logs,” in Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2014, pp. 1304–1316.
[28] A. Wald, Sequential analysis. Courier Corporation, 1973.
[29]
J. Wang, Y. Song, T. Leung, C. Rosenberg, J. Wang, J. Philbin, B. Chen,
and Y. Wu, “Learning ﬁne-grained image similarity with deep ranking,”
in Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition, 2014, pp. 1386–1393.
[30] Y. H. Wang, “On the number of successes in independent
Statistica Sinica, pp. 295–312, 1993.
trials,”
[31] M. Zamani, M. Movahedi, and M. Raykova, “Rapidchain: Scaling
blockchain via full sharding,” in Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2018,
pp. 931–948.
[32] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi, “Town crier:
An authenticated data feed for smart contracts,” in Proceedings of
the 2016 aCM sIGSAC conference on computer and communications
security. ACM, 2016, pp. 270–282.
System like IPFS [5] and using Authenticated Data structures
such as Versum [27] to store a succinct representations of it
in the blockchain.
Another concern is regarding the number of additional
transactions needed to achieve consensus on a CIC. For each
round, MIRACLE requires each ES node to submit two short
transactions. Also the count of such transactions depends on
f. Observe from Figure 2 that in the best case YODA requires
only ≈ 70 transactions with f = 0 and β = 10−20. With
contemporary blockchain solutions that claims to scale up
to 1000s transaction per second [10], [31] these transactions
consume relatively small bandwidth.
The periods wsrc, wsr chosen for execution of CICs off-chain
will in practice also depend on the number of simultaneous
ITs being currently executed by YODA. This is because, as
the number of simultaneous ITs increase, the average CIC
workload on any node increases as well, since each node
may belong to multiple ES sets simultaneously. As CICs are
computationally expensive, the MC must further keep a limit
on ITs at any instant of time to reduce the maximum load on
an ES node.
ACKNOWLEDGMENTS
The authors would like to thank Aditya Ahuja, Cui Changze,
Aashish Kolluri, Dawei Li, Sasi Kumar Murakonda, Prateek
Saxena, Subodh Sharma, Ovia Seshadri, and anonymous re-
viewers for their feedback on the early draft of the paper.
REFERENCES
[1] A. S. Aiyer, L. Alvisi, A. Clement, M. Dahlin, J.-P. Martin, and
C. Porth, “Bar fault tolerance for cooperative services,” in ACM SIGOPS
operating systems review, vol. 39, no. 5. ACM, 2005, pp. 45–58.
[2] M. Al-Bassam, A. Sonnino, S. Bano, D. Hrycyszyn, and G. Danezis,
“Chainspace: A sharded smart contracts platform,” arXiv preprint
arXiv:1708.03778, 2017.
[3] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis,
A. De Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich et al.,
“Hyperledger fabric: a distributed operating system for permissioned
blockchains,” in Proceedings of the Thirteenth EuroSys Conference.
ACM, 2018, p. 30.
[4] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, “Succinct non-
interactive zero knowledge for a von neumann architecture.” in USENIX
Security Symposium, 2014, pp. 781–796.
J. Benet, “Ipfs-content addressed, versioned, p2p ﬁle system,” arXiv
preprint arXiv:1407.3561, 2014.
[5]
[6] V. Buterin et al., “A next-generation smart contract and decentralized
application platform,” white paper, 2014.
[7] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels, A. Kosba,
A. Miller, P. Saxena, E. Shi, E. G. Sirer et al., “On scaling decentralized
blockchains,” in International Conference on Financial Cryptography
and Data Security. Springer, 2016, pp. 106–125.
J. R. Douceur, “The sybil attack,” in International workshop on peer-
to-peer systems. Springer, 2002, pp. 251–260.
J. Eberhardt and S. Tai, “Zokrates-scalable privacy-preserving off-chain
computations.”
[8]
[9]
[10] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand:
Scaling byzantine agreements for cryptocurrencies,” in Proceedings of
the 26th Symposium on Operating Systems Principles. ACM, 2017,
pp. 51–68.
[11] A. Juels, A. Kosba, and E. Shi, “The ring of gyges: Investigating
the future of criminal smart contracts,” in Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2016, pp. 283–295.
15