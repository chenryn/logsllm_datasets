title:Trapped by the UI: The Android Case
author:Efthimios Alepis and
Constantinos Patsakis
Trapped by the UI: The Android Case
Efthimios Alepis and Constantinos Patsakis(B)
Department of Informatics, University of Piraeus,
80, Karaoli & Dimitriou, 18534 Piraeus, Greece
PI:EMAIL
Abstract. Mobile devices are highly dependent on the design of user
interfaces, since their size and computational cost introduce considerable
constraints. UI and UX are interdependent since UX measures the sat-
isfaction of users interacting with digital products. Therefore, both UX
and UI are considered as top priorities among major mobile OS plat-
forms. In this work we highlight some pitfalls in the design of Android
UI which can greatly expose users and break user trust in the UI by
proving how deceiving it can be. To this end, we showcase a series of
attacks that exploit side channel information and poor UI choices rang-
ing from sniﬃng users’ input; resurrecting tapjacking, to wiping users’
data, in Android from KitKat to Nougat.
1 Introduction
Modern mobile devices have penetrated our everyday life at an unprecedented
rate. An indicator of this trend is that despite the fact that commodity smart-
phones date back to less than a decade, globally there are more smartphone
users than desktop users. In terms of capabilities, while they can be considered
as a stripped down version of modern computers, their various embedded sensors
provide them additionally allowing them to sense their location through e.g. the
GPS, their position through the compass, or even the motion of a device through
accelerometers. This knowledge allows smartphones to adjust the user interface
and the provided information in real-time in a way that ﬁts better for the user
and the corresponding environment.
More than simply managing all this information in a computational eﬃcient
way, mobile devices are subject to size constraints as the attached monitor which
acts as both an input and an output modality of interaction is rather small and
a lot of functionality has to be squeezed into it in the most intuitive way so
as not to confuse users when interacting with the device. As a result, mobile
UIs contain a lot of components and information in a rather conﬁned setting.
Therefore, while the resulting UI seems rather simple, it is in fact fairly complex.
Furthermore, since all mobile applications share the same small screen, they end
up getting stacked one on top of the other which prevents users from determining
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 15) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 334–354, 2017.
DOI: 10.1007/978-3-319-66332-6 15
Trapped by the UI: The Android Case
335
to which application the foreground component belongs to. Nevertheless, users
have absolute trust in the UI: they expect that what they are presented is exactly
what it claims to be.
Smartphone UIs have received a lot of attention over the last years, with
numerous researchers revealing vulnerabilities that lead to a signiﬁcant number
of OS patches and precautionary measures, with Android; due to its popularity,
receiving most of them. In this paper, we present new attack vectors that we have
discovered which not only bypass recent countermeasures integrated in Android,
but more importantly, these attacks, in many cases, are for more malicious than
the reported in current state of the art.
After reviewing the related scientiﬁc literature, we argue that one may cate-
gorise Android UI attacks into two main categories. The ﬁrst category consists
of attacks that utilize window dialogs that hold the SYSTEM ALERT WINDOW sig-
nature level permission, allowing them to be shown on top of all other apps;
e.g. [41]. Android Toast messages are an exception in this category, since they
require no permission, however have some signiﬁcant limitations, as it is dis-
cussed in the next section. The second set of attacks consists of applications
that manage to determine the foreground app and consequently present a fake
application to steal sensitive user information; e.g. [18]. However, at the time
of writing, these attacks have either low or zero impact since their underlying
security issues have been already addressed. For the ﬁrst category of attacks,
the SYSTEM ALERT WINDOW permission requires special handling by the user,
after the installation of an app to be granted. Additionally, after the introduc-
tion of API level 23, special intents (e.g. ACTION MANAGE OVERLAY PERMISSION
[11]) and checks (e.g. canDrawOverlays() [11]) have been introduced to harden
the UI and disable third party apps from arbitrarily drawing over other
apps. Regarding the second set of attacks, again several countermeasures have
been applied during the last years. Moreover, Android ActivityManager’s class
method getRunningTasks(), has been deprecated in API level 21 and is no
longer available to third party applications [2], while ActivityManager’s class
getRunningAppProcesses() returns a list of only the caller application’s pack-
age name as of API level 22.
In our work we use quite diﬀerent attack vectors to achieve these results,
which, to the best of our knowledge and according to our reports to Google; see
Table 1 for details, had not been studied yet. Our proposed attacks exploit some
of the properties of the most generic Android OS mechanisms, such as Android
activities and Intents. Hence, not only do we succeed in delivering a wide range of
attacks to the Android OS through seemingly benign apps; they do not request
any dangerous permission, but we also provide proofs that these vulnerabilities
exist for far too many years, up to the latest versions. These attacks may range
from stealing sensitive input and installing apps without users’ knowledge, to
wiping the user’s phone, even in the latest versions of Android AOSP (SDK 25).
In addition, we have successfully uploaded our proof of concept applications to
Google Play, bypassing the security checks from the Bouncer; the system which
336
E. Alepis and C. Patsakis
analyses applications in Google Play for malicious functionality [27,31], further
proving the signiﬁcance of the threats.
While much eﬀort has been made in Android towards countering UI redress-
ing attacks, for instance since Marshmallow, the user is presented with a notiﬁ-
cation screen whenever an overlay is detected, the ground truth is that most of
these defense mechanisms have been partially deployed, allowing an adversary
to launch a wide set of attacks. Table 1a provides an overview of our contribu-
tions stating some of the Android’s design goals and linking them with both our
ﬁndings and the way that these ﬁndings can be used maliciously.
More precisely, in this work we demonstrate that many security standards of
Android’s UI can be easily bypassed with the use of inherent mechanisms that
do not require any special permission from the user. To this end, our presented
attacks either exploit the knowledge of what the foreground app is (SDK<24),
or lure the user to use arbitrary UIs and result in a series of “unwanted” actions.
Based on the methods that will be presented, an adversary can launch sev-
eral serious attacks, ranging from sniﬃng sensitive and private data, to gaining
administrative privileges that allow the adversary to reset the device, wipe user’s
data, or even cover the installation of new downloaded apps. A summary of the
attacks presented in this work, their applicability to speciﬁc Android versions and
the percentage of current devices aﬀected by them, are illustrated in Table 1b.
It should be noted that the reported results have not been tested to API levels
below 19 as these devices not only represent a small market share, but they have
been long deprecated.
2 Related Work
Android User Interfaces take place in three-dimensional space, where the two
dimensions control the horizontal and vertical positioning of controls inside a
mobile window respectively, while the other controls the “depth”. The latter
dimension refers to the diﬀerent “layers” of UI graphic elements which are placed
on a mobile screen and it is deﬁned from the level of the screen towards the
user’s eyes. Hence, as far as activities are concerned, the “outermost” activity is
practically the active one. However, there are also other types of graphic elements
that may appear on a mobile screen, such as dialogs. Dialogs consist of controls
that may appear on top of activities to interact with the users, usually providing
some kind of information. For managing all the UI elements on the Z axis, there
is a dedicated Android interface, namely WindowManager [12], used by the apps
to bound to a particular display.
In terms of user interaction, Android’s activities and dialog windows have
signiﬁcant diﬀerences between them. First and foremost, activities have a much
more complex lifecycle which consists of special states and their corresponding
events that are triggered during their lifecycle. On the contrary, dialogs are usu-
ally either informative or prompt users for making a decision, and therefore have
much shorter and less complex lifecycle. Furthermore, all activities have to be
declared inside the app manifest ﬁle, whereas there is no such requirement for
Trapped by the UI: The Android Case
337
e
k
a
f
d
n
a
a
e
t
a
e
r
c
e
w
e
g
a
m
i
r
e
p
a
p
l
l
a
W
e
h
t
g
n
i
s
U
s
n
i
p
’
s
r
e
s
u
f
f
i
n
s
d
n
a
n
e
e
r
c
s
n
r
e
t
t
a
p
/
n
i
p
.
s
n
r
e
t
t
a
p
3
6
6
9
1
2
6
1
5
4
2
2
d
a
e
r
-
l
l
a
W
e
v
a
h
,
n
o
i
s
s
i
m
r
e
p
y
n
a
t
u
o
h
t
i
w
s
’
e
c
i
v
e
d
e
h
t
f
o
s
t
n
e
t
n
o
c
e
h
t
o
t
,
s
p
p
A
s
s
e
c
c
a
r
e
p
a
p
s
e
l
i
f
.
g
.
e
(
s
n
o
i
s
s
i
m
r
e
p
s
u
o
r
e
g
n
a
d
c
i
f
i
c
e
p
s
e
t
a
v
i
r
p
’
s
r
e
s
u
s
s
e
c
c
a
t
o
n
d
l
u
o
h
s
s
p
p
A
]
6
[
t
u
o
h
t
i
w
)
e
g
a
r
o
t
s
.
y
t
i
l
i
b
a
c
i
l
p
p
a
r
i
e
h
t
d
n
a
s
k
c
a
t
t
a
r
u
o
f
o
y
r
a
m
m
u
S
.
1
e
l
b
a
T
e
g
a
s
u
s
u
o
i
c
i
l
a
M
e
u
s
s
I
s
g
n
i
d
n
i
F
l
a
o
g
n
g
i
s
e
D
d
n
u
o
r
g
e
r
o
f
e
h
t
f
o
e
g
d
e
l
w
o
n
k
l
a
u
t
c
a
g
n
i
v
a
H
s
’
p
p
a
.
a
t
a
d
e
h
t
g
n
i
v
l
o
v
n
i
s
k
c
a
t
t
a
d
e
h
c
n
u
a
l
e
w
p
p
a
t
u
p
n
i
r
e
s
u
g
n
i
f
f
i
n
s
n
i
d
e
t
l
u
s
e
r
h
c
i
h
w
I
U
o
t
e
g
a
n
a
m
o
s
l
a
e
W
.
a
t
a
d
l
a
n
o
s
r
e
p
f
f
i
n
s
-
n
i
s
t
n
e
m
e
l
e
I
U
S
O
l
a
i
c
e
p
s
y
r
e
v
r
e
v
o
w
a
r
d
e
W
-
s
y
s
e
s
u
o
t
g
n
i
g
a
n
a
m
,
s
g
n
i
t
t
e
s
s
m
e
t
s
y
s
g
n
i
v
l
o
v
d
r
i
h
t
d
n
a
)
c
t
e
,
s
m
s
,
s
l
l
a
c
e
n
o
h
p
(
s
p
p
a
m
e
t
-
c
a
s
u
o
i
c
i
l
a
m
a
e
t
e
l
p
m
o
c
r
e
h
t
i
e
o
t
s
p
p
a
y
t
r
a
p
.
s
p
p
a
w
e
n
r
o
n
o
i
t
l
l
a
t
s
n
i
4
0
5
3
3
2
4
0