# Trapped by the UI: The Android Case

**Authors:** Efthimios Alepis and Constantinos Patsakis  
**Affiliation:** Department of Informatics, University of Piraeus, 80, Karaoli & Dimitriou, 18534 Piraeus, Greece  
**Email:** [PI:EMAIL]

## Abstract
Mobile devices are highly dependent on the design of user interfaces (UI) due to their size and computational constraints. User experience (UX) is interdependent with UI, as it measures the satisfaction of users interacting with digital products. Both UX and UI are top priorities for major mobile operating systems (OS). This paper highlights several pitfalls in the design of the Android UI that can significantly expose users and erode their trust in the interface. We demonstrate a series of attacks that exploit side-channel information and poor UI choices, ranging from sniffing user input to wiping user data, across Android versions from KitKat to Nougat.

## 1. Introduction
Modern mobile devices have become an integral part of our daily lives, with more smartphone users globally than desktop users. While smartphones can be seen as stripped-down versions of modern computers, their embedded sensors (e.g., GPS, compass, accelerometers) provide additional capabilities, allowing them to sense location, position, and motion. This information enables smartphones to adjust the UI and provided information in real-time, better fitting the user and the environment.

Managing this information efficiently is challenging due to the small screen size, which acts as both an input and output modality. Mobile UIs must be intuitive and not confuse users. As a result, these interfaces often contain numerous components and information in a confined space, making them deceptively simple yet complex. Additionally, the stacking of applications on a small screen makes it difficult for users to determine which application controls the foreground component. Despite this, users place absolute trust in the UI, expecting what they see to be exactly what it claims to be.

Over the years, smartphone UIs have been scrutinized, leading to numerous OS patches and precautionary measures, especially for Android due to its popularity. In this paper, we present new attack vectors that bypass recent countermeasures in Android and are, in many cases, more malicious than those reported in the current state of the art.

After reviewing the related literature, we categorize Android UI attacks into two main types:
1. **Attacks using window dialogs with SYSTEM_ALERT_WINDOW permission**: These dialogs can be shown on top of all other apps. Android Toast messages, which require no permission, are an exception but have significant limitations.
2. **Attacks that determine the foreground app and present a fake application to steal sensitive user information**: These attacks have either low or zero impact as their underlying security issues have been addressed.

For the first category, the SYSTEM_ALERT_WINDOW permission requires special handling by the user after installation. API level 23 introduced special intents (e.g., ACTION_MANAGE_OVERLAY_PERMISSION) and checks (e.g., canDrawOverlays()) to harden the UI and prevent third-party apps from drawing over other apps. For the second category, several countermeasures have been applied, such as deprecating the getRunningTasks() method in API level 21 and limiting the getRunningAppProcesses() method in API level 22.

In our work, we use different attack vectors that, to the best of our knowledge, have not been studied before. Our proposed attacks exploit generic Android OS mechanisms like activities and intents, delivering a wide range of attacks through seemingly benign apps that do not request dangerous permissions. These attacks range from stealing sensitive input and installing apps without user knowledge to wiping the user's phone, even in the latest versions of Android AOSP (SDK 25). We successfully uploaded proof-of-concept applications to Google Play, bypassing the Bouncer system, which analyzes apps for malicious functionality.

While efforts have been made in Android to counter UI redressing attacks, most defense mechanisms have been only partially deployed, allowing adversaries to launch a wide set of attacks. Table 1a provides an overview of our contributions, linking them with Android's design goals and potential malicious uses. Specifically, we demonstrate that many security standards of Android's UI can be easily bypassed using inherent mechanisms that do not require special permissions. Our attacks either exploit the knowledge of the foreground app (SDK < 24) or lure the user into using arbitrary UIs, resulting in unwanted actions. Based on these methods, an adversary can launch serious attacks, including sniffing sensitive data, gaining administrative privileges, resetting the device, wiping user data, or covering the installation of new apps. Table 1b summarizes the attacks, their applicability to specific Android versions, and the percentage of affected devices. Note that results have not been tested on API levels below 19 due to their small market share and deprecation.

## 2. Related Work
Android UIs operate in a three-dimensional space, with two dimensions controlling the horizontal and vertical positioning of controls inside a mobile window, and the third dimension (Z-axis) controlling the "depth" or layering of UI elements. The outermost activity on the Z-axis is the active one. Other graphic elements, such as dialogs, can appear on top of activities to interact with users. The WindowManager interface manages these UI elements on the Z-axis.

Activities and dialog windows differ significantly in terms of user interaction. Activities have a complex lifecycle with special states and events, while dialogs are typically informative or prompt users for decisions, with a shorter and less complex lifecycle. All activities must be declared in the app manifest file, whereas there is no such requirement for dialogs.

Table 1a and Table 1b provide detailed overviews of our contributions and the specific attacks, respectively.