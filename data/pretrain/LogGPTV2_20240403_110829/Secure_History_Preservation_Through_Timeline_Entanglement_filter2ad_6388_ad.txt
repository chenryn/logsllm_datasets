(cid:5)
(cid:6)
(cid:7)
(cid:7)
(cid:3)
(cid:4)
(cid:2)
(cid:6)
(cid:8)
(cid:9)
(cid:2)
(cid:7)
(cid:3)
(cid:4)
(cid:2)
(cid:6)
(cid:3)
(cid:1)
(cid:1)(cid:3)
(cid:1)(cid:3)
(cid:1)(cid:3)
(cid:1)(cid:3)
(cid:1)
(cid:1)(cid:3)
(cid:1)(cid:3)
(cid:1)(cid:3)
(cid:1)
(cid:1)(cid:2)
(cid:1)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:1)
(cid:1)(cid:5)
(cid:1)(cid:5)
(cid:1)(cid:5)
(cid:1)
(cid:1)(cid:4)
(cid:1)(cid:4)
(cid:1)(cid:4)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:3)(cid:7)(cid:8)(cid:1)(cid:3)(cid:9)(cid:10)
(cid:13) (cid:7)(cid:6)(cid:14)
(cid:11) (cid:1)(cid:3)(cid:2)(cid:12)
(cid:1)
(cid:1)
(cid:1)
(cid:6) (cid:1)
(cid:6) (cid:1)
(cid:6) (cid:1)
Figure 6: Six consecutive skip list elements, element 16
to element 21. Arrows show hash operations from pre-
vious authenticators to links of an element. The top of
each tower is the resulting authenticator for the element,
derived by hashing together all links underneath it.
i k : : : kLl
0 (cid:20) j (cid:20) l, and authenticator Ti = h(L0
i).
Figure 6 illustrates a portion of such a skip list. In
the implementation, we combine together the ele-
ment authenticator with the 0-th level link for odd-
numbered elements, since such elements have a sin-
gle link, which is su(cid:14)cient as an authenticator by
itself.
Skip lists allow their e(cid:14)cient traversal from an
element i to a later element j in a logarithmic num-
ber of steps: starting from element i, successively
higher-level links are utilized until the \tallest ele-
ment" (one with the largest power of 2 in its fac-
tors among all element indices between i and j) is
reached. Thereafter, successively lower-level links
are traversed until j is reached. More speci(cid:12)cally,
an iterative process starts with the current element
c = i. To move closer to the destination element
with index j, the highest power 2z of 2 that divides
c is picked, such that c + 2z (cid:20) j. Then element
k = c + 2z becomes the next current element c in
the traversal. The iteration stops when c = j.
The associated temporal precedence proof linking
element i before element j is constructed in a man-
ner similar to the traversal described above. At ev-
ery step, when a jump of length 2z is taken from the
current element c to k = c + 2z, the element value of
the new element dk is appended to the proof, along
with all the associated links of element k, except for
the link at level z. Link Lz
k is omitted since it can
be computed during veri(cid:12)cation from the previous
authenticator Tc and the data value dk.
In the example of Figure 6, the path from el-
ement 17 to element 21 traverses elements 18
The corresponding precedence proof
and 20.
from element 17 to element 21 is P 21
17 =
fd18; L1
20; d21g. With this proof and
18; d20; L0
20; L2
20 = h(L0
20kh(20k1kd20kT 0
21 = h(21k0kd21kT 0
18 = h(h(18k0kd18kT17)kL1
given the authenticators T17 and T21 of elements
17 and 21 respectively, the veri(cid:12)er can succes-
sively compute T 0
18),
then T 0
20) and (cid:12)nally
T 0
20)|recall that for all odd ele-
ments i, Ti = L0
If the known and the derived
i .
values for the authenticator agree (T21 = T 0
21), then
the veri(cid:12)er can be convinced that the authenticator
T17 preceded the computation of authenticator T21,
which is the objective of a precedence proof.
18)kL2
Thanks to the properties of skip lists, any of these
proofs contains links and data values of roughly a
logarithmic number of skip list elements. The worst-
case proof for a skip list of n elements traverses
2(cid:2)log2(n) elements, climbing links of every level be-
tween 0 and log2(n) and back down again, or log2
2(n)
link values and log2(n) data values total. Assuming
that every link and value is a SHA-1 digest of 160
bits, the worst case proof for a timeline of a billion
elements is no longer than 20 KBytes, and most are
much shorter.
Our skip lists are (cid:12)t for secondary storage. They
are implemented on memory-mapped (cid:12)les. Since
modi(cid:12)cations are expected to be relatively rare,
compared to searches and proof extractions, we al-
ways write changes to the skip list through to the
disk immediately after they are made, to maintain
consistency in the face of machine crashes. We do
not, however, support structural recovery from disk
crashes; we believe that existing (cid:12)le system and re-
dundant disk array technologies are adequate to pre-
vent and recover all but the most catastrophic losses
of disk bits.
5.2 Disk-based Persistent Authenti-
cated Dictionaries
This work uses authenticated persistent dictionaries
based on trees. A persistent dictionary maintains
multiple versions (or snapshots) of its contents as
it is modi(cid:12)ed. In addition to the functionality of-
fered by simple authenticated dictionaries, it can
also provably answer questions of the form \in snap-
shot t, was element d in the dictionary?".
The dictionaries we use in this work can poten-
tially grow very large, much larger than the sizes
of current main memories. Therefore, we have ex-
tended our earlier work on balanced persistent au-
thenticated search trees [16] to design on-disk per-
sistent authenticated dictionaries. The resulting
data structure, the RBB-Tree, is a binary authen-
ticated search tree [6, 7] embedded in a persistent
B-Tree [4][9, Ch. 18]. Figure 7 shows a simple RBB-
Tree holding 16 numeric keys.
(cid:6)
(cid:7)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:6)
(cid:7)
(cid:2)
(cid:2)
(cid:7)
(cid:3)
(cid:3)
(cid:6)
(cid:3)
(cid:8)
(cid:3)
(cid:9)
(cid:3)
(cid:7)
(cid:3)
(cid:7)
(cid:3)
(cid:3)
(cid:7)
(cid:3)
(cid:7)
(cid:6)
(cid:7)
(cid:3)
(cid:6)
(cid:7)
(cid:3)
(cid:6)
(cid:6)
(cid:7)
(cid:3)
(cid:7)
(cid:3)
(cid:1)(cid:5)
(cid:1)
(cid:1)(cid:2)
(cid:5) (cid:1)
(cid:1)(cid:1)
(cid:1)(cid:4)
(cid:1)(cid:3)
(cid:6) (cid:1)
Figure 7: An RBB-Tree. Boxes are disk blocks. In this
example, each non-root disk block contains a minimum
of 1 and a maximum of 3 keys. The authentication labels
of the embedded binary tree nodes are not shown; the
label of any key node is the hash of the label of its left
child, its own key, and the label of its right child, as
in [6, 7]. We do not show the \color" attribute of the
keys in the per-node red-black trees, since they have no
bearing in our discussion.
RBB-Trees, like B-Trees, are designed to organize
keys together in e(cid:14)cient structures that result in few
disk accesses per tree operation. Every tree node is
stored in its own disk block, contains a minimum of
r(cid:0)1 and a maximum of 2r(cid:0)1 keys, and has between
r and 2r children (the root node is only required to
have between 1 and 2r (cid:0) 1 keys). Parameter r is the
order of the B-Tree.
Unlike traditional B-Trees, RBB-Tree nodes do
not store their keys in a (cid:13)at array.
Instead, keys
within RBB nodes are organized in a balanced bi-
nary tree, speci(cid:12)cally a red-black tree [3][9, Ch. 13].
We consider RBB-Trees \virtual" binary trees, since
the in-node binary trees connected to each other re-
sult in a large, piecewise-red-black tree, encompass-
ing all keys in the entire dictionary.
It is this \virtual" binary tree of keys that is au-
thenticated, in the sense of the authenticated search
trees by Buldas et al. [6, 7]. As such, the security
properties of RBB-Trees are identical to those of au-
thenticated search trees, including the structure of
existence/non-existence proofs.
Since the RBB-Tree is a valid B-Tree, it is e(cid:14)-
cient in the number of disk block accesses it requires
for the basic tree operations of insertion, deletion
and modi(cid:12)cation. Speci(cid:12)cally, each of those oper-
ations takes O(logrn) disk accesses, where n is the
total number of keys in the tree. Similarly, since
the internal binary tree in each RBB-Tree node is
balanced, the virtual embedded binary tree is also
loosely balanced, and has height O((logrn)(log2r)),
that is, O(log2n) but with a higher constant factor
than in a real red-black tree. These two collabo-
rating types of balancing applied to the virtual bi-
nary tree|the (cid:12)rst through the blocking of keys in
RBB nodes, and the second through the balancing
of the key nodes inside each RBB node|help keep
the length of the resulting existence/non-existence
proofs also bounded to O(log2n) elements.
The internal key structure imposed on RBB-Tree
nodes does not improve the speed of search through
the tree over the speed of search in an equivalent
B-Tree, but limits the length of existence proofs im-
mensely. The existence proof for a datum inside
an authenticated search tree consists of the search
keys of each node from the sought datum up to
the root, along with the labels of the siblings of
each of the ancestors of the sought datum up to
the root [6].
In a very \bushy" tree, as B-Trees
are designed to be, this would mean proofs con-
taining authentication data from a small number
of individual nodes; unfortunately, each individual
node’s authentication data consist of roughly r keys
and r siblings’ labels. For example, a straightfor-
wardly implemented authenticated B-Tree storing
a billion SHA-1 digests with r = 100 yields exis-
tence proofs of length dlogr109e (cid:2) (r (cid:2) (160 + 160))
bits, or roughly 160 KBits. The equivalent red-
black tree yields existence proofs of no more than
2 (cid:2) dlog2109e (cid:2) (160 + 160) bits, or about 18 KBits.
RBB-Trees seek to trade o(cid:11) the low disk access costs
of B-Trees with the short proof lengths of red-black
trees. The equivalent RBB-Tree of one billion SHA-
1 digests yields proofs no longer than
B(cid:0)Tree height
max red(cid:0)black tree height
z
}|
{
dlogr109e (cid:2)
z
}|
{
2 (cid:2) dlog2re
key and label
{
z
(160 + 160)
}|
(cid:2)
bits or roughly 22 KBits, with disk access costs iden-
tical to those of the equivalent B-Tree.
We have designed dynamic set persistence [9, p.
294] at the granularity of both the RBB node and
the embedded key node (see Figure 8). As long
as there is key-node space available within an RBB
node, new snapshots of the key tree within that node
are collocated with older snapshots. This allows
multiple snapshots to share unchanged key nodes
within the same RBB node. When, however, all
available key-node space within an RBB node is ex-
hausted, subsequent snapshots of the key tree inside
that node are migrated to a new, fresh RBB node.
The di(cid:11)erent persistent snapshot roots of the
RBB-Tree are held together in an authenticated
linked list|in fact, we use our own append-only au-
thenticated skip list from Section 5.1.
Since each snapshot of the RBB-Tree is a \vir-
tual" binary authenticated search tree, the root la-
(cid:2)
(cid:3)
(cid:5)
(cid:5)
(cid:6)
(cid:4)
(cid:6)
(cid:6)
(cid:4)
(cid:6)
(cid:7)
(cid:5)
(cid:7)
(cid:1)(cid:5)
(cid:1) (cid:1)(cid:5)
(cid:1)(cid:5)
(cid:1)
(cid:1)
(cid:1)(cid:2)
(cid:1)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:1)
(cid:1)(cid:1) (cid:1)
(cid:1)(cid:4)
(cid:1)
(cid:1)(cid:3)
(cid:1)
(cid:1)(cid:4)
(cid:1)(cid:6)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:3)(cid:4)(cid:4)
(cid:9) (cid:5)(cid:3)(cid:6)(cid:9)
(cid:13) (cid:2)(cid:4)
(cid:1)
Figure 8: A detail from the tree of Figure 7 illustrating
dynamic set persistence. Each key node (circle) indi-
cates the snapshot to which it belongs (small black box).
The subtree below the 12 key node of snapshot 1 is iden-
tical to that of the original tree in Figure 7. Snapshot
2 occurs when key 18 is removed from snapshot 1. As a
result, snapshot 2 has its own key nodes for 12 and 15.
Snapshot 3 occurs when key 19 is inserted into snapshot
2. The RBB node previously holding 14 and 15 has no
more room for key nodes, so a new RBB node is created
to hold the new key nodes 14, 15 and 19 in snapshot
3. At the bottom, the freshness authenticators for each
of the three snapshots are shown. A key node without
children uses the freshness authenticator of its snapshot
when calculating its hash label.
bel of that tree (i.e., the label of the root key node of
the root RBB node) is a one-way digest of the snap-