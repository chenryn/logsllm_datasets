A still has around 200 Kilobytes mobile data consumption and
around 300 J mobile network energy every day! We repeat the
experiment and check the news feed content on device B, and ﬁnd
out that this trafﬁc mainly comes from Facebook friends and page
recommendations in the news feed list. Compared to the posts of
device B’s friends or public pages (simulated by device A), for
which device B wants to get updated with no delay, we consider
this trafﬁc to be non time sensitive. For these content, even if it
is not updated in the background, only a few seconds of waiting
time is needed to update the list after the app launches. From our
experiment results, if device B has time-sensitive updates every
1 hour, around half of the data and energy is spent on non-time-
sensitive trafﬁc, doubling the mobile data and energy overhead.
Finding 4. Changing one Facebook conﬁguration can reduce
mobile data and energy consumption caused by non-time-
sensitive background trafﬁc by 20%. In Facebook app’s settings,
an item called “refresh interval” determines how frequently the
news feed list is refreshed in the background, which controls the
158)
B
K
(
n
o
i
t
p
m
u
s
n
o
c
a
t
a
D
 2000
 1800
 1600
 1400
 1200
 1000
 800
 600
 400
 200
 0
Uplink
Downlink
10 min30 min1 hr None
)
J
(
y
g
r
e
n
e
t
d
e
a
m
i
t
s
E
 1600
 1400
 1200
 1000
 800
 600
 400
 200
 0
Non-tail
Tail
10 min30 min1 hr None
)
B
K
(
n
o
i
t
p
m
u
s
n
o
c
a
t
a
D
 700
 600
 500
 400
 300
 200
 100
 0
Uplink
Downlink
Non-tail
Tail
)
J
(
y
g
r
e
n
e
t
d
e
a
m
i
t
s
E
 1000
 800
 600
 400
 200
 0
30 min1 hr 2 hr 4 hr
30 min1 hr 2 hr 4 hr
Figure 10:
Per-ﬂow mobile
data consumption breakdown
by post upload frequency.
Figure 11: Estimated energy
consumption breakdown by
post upload frequency.
Figure 12:
Per-ﬂow mobile
data consumption by refresh
interval conﬁguration.
Figure 13: Estimated energy
consumption by refresh inter-
val conﬁguration.
refresh frequency of the non-time-sensitive background trafﬁc. In
Fig. 10 and Fig. 11, the refresh interval we use is the default value,
1 hour. To explore how to conﬁgure the refresh interval, we ﬁx
the device A uploading frequency to 30 minutes to simulate the
activity of its friend on device B, and change device B’s refresh
interval to 30 minutes, 1 hour, 2 hours and 4 hours. We collect
data for 16 hours for each conﬁguration. The results are shown in
Fig. 10 and Fig. 11. As shown, the 2-hour conﬁguration reduces
mobile data consumption by 25% and mobile network energy
consumption by 20% compared to the default 1-hour conﬁguration.
Another observation is that the data and energy consumptions
are similar between the 2-hour and 4-hour conﬁgurations. After
inspecting the traces closely, we ﬁnd that the network trafﬁc is
mainly generated by status upload notiﬁcations from device A
every 30 minutes, which are time-sensitive for device B. Thus, for
users who think that delaying non-time-sensitive information for a
while is acceptable, changing the refresh interval from 1 hour to 2
hours is likely to be a good balance between content timeliness and
data, and energy consumption: it reduces mobile data and energy
consumption by more than 20%, while only delaying non-time-
sensitive content by 1 hour.
7.4 Facebook: Application Design Impact on
News Feed Update Latency
In this section, we leverage QoE Doctor to study the impact
of app design choices on user-perceived latency. We compare
Facebook app version 1.8.3 and version 5.0.0.26.31. The major
difference between them is that Facebook app changed the way of
showing news feed list from an Android WebView to a ListView.
The goal of our comparison is to identify and quantify impact of
this change on QoE. We choose to relay pull-to-update action using
QoE Doctor, which is an updating process related only to the news
feed list.
Experiment setup. All experiments are launched on the same
Samsung Galaxy S4 device with Android 4.2.2. Like §7.3, we use 2
devices, denoted by A and B. Their Facebook accounts are mutual
and exclusive friends. Using QoE Doctor we have device A posting
a status every 2 minutes for 6 hours. Device B passively waits for
the news feed list to update by itself, which is also every 2 minutes,
and measures the update latency. Facebook app version 1.8.3 does
not self-update every 2 minutes, so we generate a scrolling gesture
every 2 minutes to trigger the updating. We launch the experiment
under both C1 LTE and WiFi. For all the experiments, we choose
the same time period of a day to avoid time-of-day effect. We also
choose the same place to run the experiments to ensure that the
cellular and WiFi signal strengths in the comparison are the same.
Finding 5. The ListView design reduces device latency by
more than 67% , network latency by 30%, and download data
consumption by more than 77% compared to the WebView
design. Fig. 14 shows the news feed list updating time distribution
for both the WebView design and the ListView design under C1
LTE and WiFi. Under both network conditions, the user-perceived
latency is greatly affected by the design – the average latency of
the WebView design is more than 100% longer than that of the
ListView. At the same time, the latency of the ListView has less
variance. To understand the root cause, we break down the device
and network delay using the same technique as in §7.2. As for
posting photos in §7.2, in this experiment the network latency for
news feed list updating is always inside the QoE window. As
shown in Fig. 15, both network and device latency are improved
by at least 67% and 30% respectively after changing the WebView
design to the ListView design. We hypothesize that the reason for
the device latency improvement is that WebView updating is quite
complex compared to the ListView since it involves iterated content
fetching and HTML parsing, which leads to a less responsive UI.
For the network latency improvement, we further calculate the
network uplink and downlink data consumption for the TCP ﬂow
responsible for the news feed list updating, which is shown in
Fig. 16. For both C1 LTE and WiFi, the only difference is that
the amount of downlink TCP data in the WebView design is more
than 77% more than that in the ListView design. Thus, the network
latency improvement in the ListView design is caused by much less
network data to download. We think the reason is that WebView
needs to display HTML content, thus compared to ListView it
requires extra data to specify layout, structure, CSS, etc. Note
that these results just suggest that using the ListView may lead to
lower user-perceived latency compared to using the WebView, but
the actual amount of improvement also depends on other factors
such as app trafﬁc characteristics.
7.5 YouTube: Carrier Throttling Mechanism
Analysis
Most mobile users have limited monthly data plan contracted by
different carriers. Normally users will be charged for over-limit
data usage, while C1 uses another policy: users are still provided
free data services even after exceeding the data limit [13], and the
penalty is that carrier will throttle the network bandwidth on the
base station. In this section, we use QoE Doctor to study how this
policy may impact app QoE.
Experiment setup. To study the throttling mechanism’s impact on
QoE, we use QoE Doctor to play videos in YouTube app version
5.2.27 on a Samsung Galaxy S4 device with Android 4.3, with a
throttled and an unthrottled SIM card for both C1 3G and C1 LTE.
Video dataset. We use “a” to “z” as keywords to search for videos
in YouTube app, and choose the top 10 videos for each keyword
to form our video dataset of 260 videos. This dataset is quite
diverse in both the video length (1 minute to half an hour) and
video popularity (several thousand views to more than 10 billion
views). In this dataset the total video length is about 34.6 hours.
159 100
 80
 60
 40
 20
)
%
(
F
D
C
 0
 0
ListView, LTE
WebView, LTE
ListView, WiFi
WebView, WiFi
 500  1000 1500 2000 2500 3000 3500 4000
Pull-to-update latency (msec)
)
s
(
y
c
n
e
t
a
L
 3.5
 3
 2.5
 2
 1.5
 1
 0.5
 0
Device latency
Network latency
LTE
WiFi
LV WV
LV WV
)
s
e
t
y
b
K
(
n
o
i
t
p
m
u
s
n
o
c
a
t
a
D
 30
 25
 20
 15
 10
 5
 0
Uplink
Downlink
LTE
WiFi
LV WV
LV WV
Figure 14: The news feed list updating
time for WebView and ListView under C1
LTE and WiFi.
Figure 15: Breakdown of the news feed
updating time for the WebView (WV) and
ListView (LV) Facebook versions
Figure 16: Network data consumption for
the news feed updating for WebView (WV)
and ListView (LV) Facebook versions
 0
 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9
 1
Rebuffering ratio
o
i
t
a
r
g
n
i
r
e
f
f
u
b
e
R
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
3G
LTE
 200
 100
 500
Throttled bandwidth (kbps)
 300