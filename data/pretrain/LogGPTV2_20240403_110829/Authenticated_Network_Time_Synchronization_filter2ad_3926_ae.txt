### 5.2 Security Definitions

The goal of the adversary, as formalized in this section, is to compromise time synchronization security by causing a client session to complete with a time counter such that the difference between the client and server's time counters exceeds a specified accuracy margin, or by causing a session to accept a protocol run without a matching session. The adversary controls the initialization and rate of the clock in each session, with the constraint that during a session, the adversary must advance the clocks of both parties at the same rate.

#### 5.2.1 Matching Conversations and Authentication

Authentication is defined using the concept of matching conversations, similar to the approach by Bellare and Rogaway [5]. We use the variant of matching conversations employed by Jager et al. [11], modified to reflect client authentication of stateless servers.

**Definition 1 (Matching Conversations):** A session \(\pi_s^i\) matches a session \(\pi_t^j\) if \(\pi_s^i.T\) prefix-matches \(\pi_t^j.T\). For two transcripts \(T\) and \(T'\), \(T\) is a prefix of \(T'\) if \(|T| \neq 0\) and \(T'\) is identical to \(T\) for the first \(|T|\) messages in \(T'\). Two transcripts \(T\) and \(T'\) prefix-match if \(T\) is a prefix of \(T'\) or \(T'\) is a prefix of \(T\).

Prefix-matching prevents an adversary from trivially winning the experiment by dropping the last protocol message after a session has accepted. Since our focus is on clients authenticating stateless servers, our authentication definition is one-sided.

**Definition 2 (Stateless Server Authentication):** A session \(\pi_s^i\) accepts maliciously if:
- \(\pi_s^i.\alpha = \text{accept}\)
- \(\pi_s^i.\rho = \text{client}\)
- No Reveal(i,s) or Reveal(j,t) queries were issued before \(\pi_s^i.\alpha \leftarrow \text{accept}\)
- No Reveal(j,t') queries were issued before \(\pi_s^i.\alpha \leftarrow \text{accept}\) and \(\pi_t'.T_c = \pi_t^j.T_c\)
- No Corrupt(j) query was ever issued before \(\pi_s^i.\alpha \leftarrow \text{accept}\), where \(j = \pi_s^i.\text{pid}\), but there exists no session \(\pi_t^j\) such that \(\pi_s^i\) matches \(\pi_t^j\).

We define \(Adv_{auth}^T(A)\) as the probability that an adversary \(A\) forces any session \(\pi_s^i\) of time synchronization protocol \(T\) to accept maliciously.

In the above definition, the first Reveal condition prevents \(A\) from trivially winning the experiment by accessing the session key of the Test session. Similarly, the Corrupt condition prevents \(A\) from trivially winning by decrypting the premaster secret with the session partnerâ€™s public key. To prevent an adversary from trivially winning by replaying client messages to a second session and querying the second session with Reveal, we disallow Reveal queries to server sessions with matching client transcripts.

#### 5.2.2 Correct and Secure Time Synchronization

The goal of a time synchronization protocol is to ensure that the difference between the two parties' clocks is within a specified bound. A protocol is \(\delta\)-correct if that difference can be bounded in honest executions of the protocol, and \(\delta\)-accurate secure if that difference can be bounded even in the presence of an adversary.

**Definition 3 (\(\delta\)-Correctness):** A protocol \(T\) satisfies \(\delta\)-correctness if, in the presence of a passive adversary that faithfully delivers all messages and increments each partner session symmetrically, the client and server's clocks are within \(\delta\) of each other. More precisely, for all sessions \(\pi_s^i\) where:
- \(\pi_s^i.\alpha = \text{accept}\)
- \(\pi_s^i.\rho = \text{client}\)

whenever the adversary queries Send(i,s,m,\(\Delta\)) or Send(j,t,m',\(\Delta'\)), the adversary also queries Tick(j,t,\(\sum \Delta'\)) or Tick(i,s,\(\sum \Delta\)), respectively. Additionally, whenever the adversary queries Tick(i,s,\(\Delta\)) or Tick(j,t,\(\Delta'\)), the adversary also queries Tick(j,t,\(\Delta\)) or Tick(i,s,\(\Delta'\)), respectively. We must have \(|\pi_s^i.\text{time} - \pi_t^j.\text{time}| \leq \delta\).

**Definition 4 (\(\delta\)-Accurate Secure Time Synchronization):** An adversary \(A\) breaks the \(\delta\)-accuracy of a time synchronization protocol if, when \(A\) terminates, there exists a session \(\pi_s^i\) with partner id \(\pi_s^i.\text{pid} = j\) such that:
- \(\pi_s^i.\alpha = \text{accept}\)
- \(\pi_s^i.\rho = \text{client}\)
- \(A\) made no Corrupt(j) query before \(\pi_s^i.\alpha \leftarrow \text{accept}\)
- \(A\) made no Reveal(i,s) or Reveal(j,t) query before \(\pi_s^i.\alpha \leftarrow \text{accept}\) and \(\pi_t^j\) matches \(\pi_s^i\)
- While \(\pi_s^i.\alpha = \text{in-progress}\) and \(A\) queried Send(i,s,m,\(\Delta\)) or Send(j,t,m',\(\Delta'\)), \(A\) also queried Tick(j,t,\(\sum \Delta'\)) or Tick(i,s,\(\sum \Delta\)), respectively
- While \(\pi_s^i.\alpha = \text{in-progress}\) and \(A\) queried Tick(i,s,\(\Delta\)) or Tick(j,t,\(\Delta'\)), \(A\) also queried Tick(j,t,\(\Delta\)) or Tick(i,s,\(\Delta'\)), respectively
- \(|\pi_s^i.\text{time} - \pi_t^j.\text{time}| > \delta\)

The probability that an adversary \(A\) breaks the \(\delta\)-accuracy of a time synchronization protocol \(T\) is denoted \(Adv_{time}^{T,\delta}(A)\).

### 5.3 Multi-Phase Protocols

Our construction in Section 3 involves a single run of the negotiation and key exchange phases, followed by multiple time synchronization executions reusing the negotiated cryptographic algorithms and shared secret key. To model the security of such multi-phase time synchronization protocols, we extend our framework to allow a single session to include multiple time synchronization phases. The differences from the model described in the previous section are detailed below.

**Per-Session Variables:**
- \(n \in \mathbb{N}\): the number of time synchronization phases allowed in this session.
- \(\text{time}_p\), for \(p \in \{1, \ldots, n\}\): the time recorded at the conclusion of phase \(p\).
- \(\alpha \in \{\text{accept}_p, \text{reject}_p, \text{in-progress}_p\}\), for \(p \in \{1, \ldots, n\}\): the status of the session. When phase \(p\) concludes and \(\alpha \leftarrow \text{accept}_p\) is set, the party also sets \(\text{time}_p \leftarrow \text{time}\).

**Adversary Interaction:**
- The adversary can direct the client to run an additional time synchronization phase with a new Resync query, and the client will respond according to the protocol specification.
- **Create(i,r,t,n):** Proceeds as for Create(i,r,t), and also sets \(\pi_s^i.n \leftarrow n\).
- **Resync(i,s,\(\Delta\)):** The adversary indicates to a session \(\pi_s^i\) to begin the next time synchronization phase. Party \(P_i\) responds according to the protocol specification, updating per-session variables and outputting some message \(m^*\) if necessary. During message processing, immediately before the \((\ell)\)-th call to the Now() procedure, the session's \(\pi_s^i.\text{time}\) variable is incremented by \(\Delta_\ell\).

The goal of the adversary is to cause a client session to have any phase where its time is desynchronized from the server's. Specifically, for there to be some client instance \(\pi_s^i\) and some phase \(p\) such that \(|\pi_s^i.\text{time}_p - \pi_t^j.\text{time}_p| > \delta\), where \(\pi_t^j\) is the partner of session \(\pi_s^i\). The adversary generally controls clock ticks and can tick parties at different rates, but must tick clocks at the same rate when phases have switched back to being in-progress.

**Definition 5 (\(\delta\)-Accurate Secure Multi-Phase Time Synchronization):** An adversary \(A\) breaks the \(\delta\)-accuracy of a multi-phase time synchronization protocol if, when \(A\) terminates, there exists a phase \(p\) session \(\pi_s^i\) with partner id \(\pi_s^i.\text{pid} = j\) such that:
- \(\pi_s^i.\rho = \text{client}\)
- \(\pi_s^i.\alpha = \text{accept}_q\) for some \(q \geq p\)
- \(A\) did not make a Corrupt(j) query before \(\pi_s^i.\alpha \leftarrow \text{accept}_p\) was set
- \(A\) did not make a Reveal(i,s) or Reveal(j,t) query before \(\pi_s^i.\alpha \leftarrow \text{accept}_p\) was set and \(\pi_t^j\) matches \(\pi_s^i\)
- While \(\pi_s^i.\alpha = \text{in-progress}\) and \(A\) queried Send(i,s,m,\(\Delta\)) or Send(j,t,m',\(\Delta'\)), \(A\) also queried Tick(j,t,\(\sum \Delta'\)) or Tick(i,s,\(\sum \Delta\)), respectively
- While \(\pi_s^i.\alpha = \text{in-progress}\) and \(A\) queried Tick(i,s,\(\Delta\)) or Tick(j,t,\(\Delta'\)), \(A\) also queried Tick(j,t,\(\Delta\)) or Tick(i,s,\(\Delta'\)), respectively
- \(|\pi_s^i.\text{time}_p - \pi_t^j.\text{time}_p| > \delta\)

The probability that an adversary \(A\) breaks the \(\delta\)-accuracy of a multi-phase time synchronization protocol \(T\) is denoted \(Adv_{multi-time}^{T,\delta}(A)\).

### 6 Security of ANTP

Here, we present the correctness and security theorems for ANTP.

#### 6.1 Correctness

**Theorem 1 (Correctness of ANTP):** Fix \(E \in \mathbb{N}\). ANTPE is an \(E\)-correct time synchronization protocol as defined in Definition 3.

**Proof:** When analyzing ANTP in terms of correctness, we can restrict analysis to data that enters the clock-update procedure as input, as the rest of the protocol is designed to ensure authentication and does not influence the session's time counter. This allows us to narrow our focus to SNTP, which is the time synchronization core of ANTP.

We first focus on a single time synchronization phase. At the beginning of the time synchronization phase of ANTP, the client sends an NTP request (req) containing \(t_1\), the time the client sent req. The adversary is restricted to delivering the messages faithfully as a passive adversary and must increment the time of each protocol participant symmetrically. The adversary otherwise has complete control over the passage of time. Thus, \(\theta_1, \theta_2, \theta_3\) are non-negative but otherwise arbitrary values selected by the adversary (where \(\theta_1\) is the propagation time from client to server, \(\theta_2\) is server processing time, and \(\theta_3\) is propagation time from server to client). The client computes the round-trip time (RTT) of the protocol as:
\[ \text{RTT} = (t_4 - t_1) - (t_3 - t_2) = \theta_1 + \theta_3 \]
and approximates the server-to-client propagation time as:
\[ \tilde{\theta}_3 = \frac{1}{2} (\theta_1 + \theta_3). \]

When the client-to-server and server-to-client propagation times are equal (\(\theta_1 = \theta_3\)), \(\tilde{\theta}_3 = \theta_3\), and the values \(t_3\) and \(t_2\) allow the client to exactly account for \(\theta_2\). The time counter is updated by:
\[ \text{time} + \text{offset} = t_3 + \tilde{\theta}_3 - t_4, \]
and upon completion, the client's clock is exactly synchronized with the server's clock.

When \(\theta_1 \neq \theta_3\), we have:
\[ \theta_3 - \tilde{\theta}_3 = \frac{1}{2} (\theta_3 - \theta_1), \]
so the statistics \(t_1, \ldots, t_4\) do not allow the client to exactly account for the client-to-server propagation time \(\theta_3\); the client's updated time may be off by up to \(\frac{1}{2} |\theta_3 - \theta_1|\).