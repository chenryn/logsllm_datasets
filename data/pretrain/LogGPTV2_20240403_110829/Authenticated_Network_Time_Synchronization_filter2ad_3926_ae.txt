must be issued if session πt
i exists when
Send(i,s,m,(cid:29)∆) is issued.
Security Experiment. The time synchronization secu-
rity experiment is played between a challenger C who
implements all np parties according to the execution en-
vironment and protocol speciﬁcation, and an adversary
A. After the challenger generates the long-term key pairs,
the adversary receives the list of public keys and interacts
with the challenger using the queries described above.
Eventually the adversary terminates.
j matching πs
i such that πt
j.time| > δ , (where πt
5.2 Security Deﬁnitions
The goal of the adversary, formalized in this section, is to
break time synchronization security by causing any client
session to complete a session with a time counter such that
|πs
i .time− πt
j is the partner of the
session πs
j.id = πs
i .pid, and δ is an accuracy
margin) or cause a session πs
i to accept a protocol run
without having a matching session πt
j. The adversary
controls the initialization of the party’s clock in each
session, and the rate at which the clock advances during
each session, with the restriction that during execution
of a session the adversary must advance the party and its
peer at the same rate.
5.2.1 Matching Conversations and Authentication
Authentication is deﬁned similarly to the approach of Bel-
lare and Rogaway [5], by use of matching conversations.
We use the variant of matching conversations employed
by Jager et al. [11], and modify the deﬁnition to reﬂect
client authentication of stateless servers.
j if πs
Deﬁnition 1 (Matching Conversations). We say a session
πs
i matches a session πt
i .T preﬁx-
matches πt
j.T . For two transcripts T and T(cid:25), we say that
T is a preﬁx of T(cid:25) if |T| (cid:26)= 0 and T(cid:25) is identical to T for
the ﬁrst |T| messages in T(cid:25). Two transcripts T and T(cid:25)
preﬁx-match if T is a preﬁx of T(cid:25), or T(cid:25) is a preﬁx of T .
i .ρ (cid:26)= πt
j.ρ and πs
Preﬁx-matching prevents an adversary from trivially
winning the experiment by dropping the last protocol
message after a session has accepted. Note that since
our focus is clients authenticating stateless servers, our
authentication deﬁnition is one-sided.
i accepts maliciously if:
i .α = accept;
i .ρ = client;
Deﬁnition 2 (Stateless Server Authentication). We say
that a session πs
• πs
• πs
• no Reveal(i,s) or Reveal( j,t) queries were issued
before πs
• no Reveal( j,t(cid:25)) queries were issued before πs
i .α ←
accept and πt(cid:25)
• no Corrupt( j) query was ever issued before πs
i .α ←
accept, where j = πs
but there exists no session πt
i matches πt
j.
i .α ← accept and πt
i .pid;
j such that πs
j matches πs
i ;
j .Tc = πt
j.Tc;
We deﬁne Advauth
any session πs
accept maliciously.
T (A) as the probability of A forcing
i of time synchronization protocol T to
In the above deﬁnition, the ﬁrst Reveal condition pre-
vents A from trivially winning the experiment by access-
ing the session key of the Test session. Similarly the
Corrupt condition prevents A from trivially winning by
decrypting the premaster secret with the session partner’s
public key. The possibility exists for an adversary to triv-
ially win the experiment by replaying client messages to
a second session and querying the second session with
Reveal. Disallowing Reveal queries in general is clearly
too restrictive, so we prevent this in the second Reveal
condition by disallowing Reveal queries to server sessions
with matching client transcripts.
5.2.2 Correct and Secure Time Synchronization
The goal of a time synchronization protocol is to ensure
that the difference between the two parties’ clocks is
within a speciﬁed bound. A protocol is δ -correct if that
difference can be bounded in honest executions of the
protocol, and δ -accurate secure if that difference can be
bounded even in the presence of an adversary.
Deﬁnition 3 (δ -Correctness). A protocol T satisﬁes δ -
correctness if, in the presence of a passive adversary that
faithfully delivers all messages and increments in each
partner session symmetrically, then the client and server’s
834  25th USENIX Security Symposium 
USENIX Association
i .α = accept;
i .ρ = client;
clocks are within δ of each other. More precisely, in the
presence of a passive adversary, for all sessions πs
i where
• πs
• πs
Send(i,s,m,(cid:29)∆)
• whenever A queries
Send( j,t,m(cid:29), (cid:29)∆(cid:29)), A also queries Tick( j,t,∑(cid:28)
or Tick(i,s,∑(cid:28)
i=1 ∆(cid:29)(cid:28)), respectively; and
or
i=1 ∆(cid:28))
• whenever A queries Tick(i,s,∆), or Tick( j,t,∆(cid:29)),
A also queries Tick( j,t,∆) or Tick( j,t,∆(cid:29)), respec-
tively;
i .time− πt
j.time| ≤ δ .
i with partner id πs
i .α = accept;
i .ρ = client
we must also have that |πs
Deﬁnition 4 (δ -Accurate Secure Time Synchronization).
We say that an adversary A breaks the δ -accuracy of a
time synchronization protocol if when A terminates, there
exists a session πs
i .pid = j such that:
• πs
• πs
• A made no Corrupt( j) query before πs
i .α ←
accept;
• A made no Reveal(i,s) or Reveal( j,t) query before
πs
i .α ← accept and πt
• while πs
i .α = in-progress and A queried
(where πs
Send(i,s,m,(cid:29)∆) or Send( j,t,m(cid:29), (cid:29)∆(cid:29))
i
matches πt
i=1 ∆(cid:28))
j), then A also queried Tick( j,t,∑(cid:28)
or Tick(i,s,∑∆
• while πs
i .α = in-progress and A queried
i matches πt
Tick(i,s,∆), or Tick( j,t,∆(cid:29)) (where πs
j),
then A also queried Tick( j,t,∆) or Tick(i,s,∆(cid:29)), re-
spectively; and
i .time− πt
• |πs
The probability an adversary A has in breaking δ -
accuracy of a time synchronization protocol T is denoted
Advtime
i=1 ∆(cid:29)(cid:28)), respectively;
j.time| > δ .
j matches πs
i ;
T ,δ (A).
5.3 Multi-Phase Protocols
Our construction in Section 3 has a single run of the ne-
gotiation and key exchange phases, followed by multiple
time synchronization executions reusing the negotiated
cryptographic algorithms and shared secret key. To model
the security of such multi-phase time synchronization pro-
tocols, we further extend our framework so that a single
session can include multiple time synchronization phases.
The differences from the model described in the previous
section are detailed below.
Per-Session Variables.
added or changed:
The following variables are
• n ∈ N: the number of time synchronization phases
allowed in this session.
conclusion of phase p.
• timep, for p ∈ {1, . . . ,n}: the time recorded at the
• α ∈ {acceptp, rejectp, in-progressp}, for p ∈
{1, . . . ,n}: the status of the session. Note that, when
phase p concludes and α ← acceptp is set, the party
also sets timep ← time.
Adversary Interaction. The adversary can direct the
client to run an additional time synchronization phase
with a new Resync query, and the client will respond
according the protocol speciﬁcation. The Create query in
this setting is also changed:
also sets πs
i .n ← n.
• Create(i,r,t,n): Proceeds as for Create(i,r,t), and
• Resync(i,s,(cid:29)∆) - The adversary indicates to a ses-
sion πs
i to begin the next time synchronization phase.
Party Pi responds according to protocol speciﬁca-
tion, updating per-session variables and outputting
some message m∗ if necessary. During message
processing, immediately before the (cid:28)th call to the
Now() procedure, the session’s πs
i .time variable is
incremented by ∆(cid:28).
The goal of the adversary is also slightly different to ac-
count for the possibility of breaking time synchronization
of any given time synchronization phase: the adversary’s
goal is to cause a client session to have any phase where
its time is desynchronized from the server’s. In partic-
ular, for there to be some client instance πs
i and some
phase p such that |πs
j is
the partner of session πs
i . Again the adversary in general
controls clock ticks and can tick parties at different rates,
however must tick clocks at the same rate when phases
have switched back to being in-progress.
j.timep| > δ where πt
i .timep − πt
i .pid = j such that:
Deﬁnition 5 (δ -Accurate Secure Multi-Phase Time Syn-
chronization). We say that an adversary A breaks the
δ -accuracy of a multi-phase time synchronization proto-
col if when A terminates, there exists a phase p session
πs
i with partner id πs
• πs
i .ρ = client
• πs
i .α = acceptq for some q ≥ p;
• A did not make a Corrupt( j) query before πs
i .α ←
acceptp was set;
• A did not make a Reveal(i,s) or Reveal( j,t) query
i .α ← acceptp was set and πt
before πs
j matches πs
i ;
• while πs
i .α = in-progress and A queried
Send(i,s,m,(cid:29)∆) or Send( j,t,m(cid:29), (cid:29)∆(cid:29)),
then A also
i=1 ∆(cid:29)(cid:28)), re-
queried Tick( j,t,∑(cid:28)
spectively;
• while πs
i .α = in-progress and A queried
Tick(i,s,∆), or Tick( j,t,∆(cid:29)), then A also queried
Tick( j,t,∆) or Tick(i,s,∆(cid:29)), respectively; and
• |πs
i .timep − πt
i=1 ∆(cid:28)) or Tick(i,s,∑(cid:28)
j.timep| > δ .
USENIX Association  
25th USENIX Security Symposium  835
The probability an adversary A has in breaking δ -
accuracy of multi-phase time synchronization protocol
T is denoted Advmulti-time
6 Security of ANTP
(A).
T ,δ
Here we present ANTP correctness and security theorems.
6.1 Correctness
Theorem 1 (Correctness of ANTP). Fix E ∈ N. ANTPE
is an E-correct time synchronization protocol as deﬁned
in Deﬁnition 3.
Proof. When analyzing ANTP in terms of correctness,
we can restrict analysis to data that enters the clock-update
procedure as input, as the rest of the protocol is designed
to ensure authentication and does not inﬂuence the ses-
sion’s time counter. This allows us to narrow our focus to
SNTP, which is the time synchronization core of ANTP.
We ﬁrst focus on a single time synchronization phase.
At the beginning of the time synchronization phase of
ANTP, the client will send an NTP request (req) which
contains t1, the time the client sent req. Note that the
adversary is restricted to delivering the messages faith-
fully as a passive adversary, and also must increment the
time of each protocol participant symmetrically. The ad-
versary otherwise has complete control over the passage
of time. Thus θ1, θ2, θ3 are non-negative but otherwise
arbitrary values selected by the adversary (where θ1 is
the propagation time from client to server, θ2 is server
processing time and θ3 is propagation time from server
to client). Thus the client computes the round-trip time
of the protocol as: RTT = (t4 − t1)− (t3 − t2) =θ 1 + θ3
and approximates the server-to-client propagation time as
˜θ3 = 1
2 (θ1 + θ3).
When the client-to-server and server-to-client propa-
gation times are equal (θ1 = θ3) then ˜θ3 = θ3, and the
values t3 and t2 allow the client to exactly account for θ2.
The time counter is updated by time +offset = t3 + ˜θ3−t4,
and upon completion the client’s clock is exactly synchro-
nized with the server’s clock.
When θ1 (cid:27)= θ3, we have that θ3 − ˜θ3 = 1
2 (θ3 − θ1),
so the statistics t1, ..., t4 do not allow the client to ex-
actly account for client-to-server propagation time θ3;
the client’s updated time may be off by up to 1