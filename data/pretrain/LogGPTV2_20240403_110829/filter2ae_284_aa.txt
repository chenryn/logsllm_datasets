线性反馈移位寄存器（LFSR）在流密码中有广泛的应用，是指给定前一状态的输出，将该输出的线性函数再用作输入的移位寄存器。LFSR
主要用于生成一串随机的比特流，比特流可用做加密明文的密钥。
LFSR
基本原理大致就是通过当前状态进行一些线性运算来确定下一状态。不清楚的可以参考[这篇文章](https://zhuanlan.zhihu.com/p/33920501)学习一下流密码和
LFSR 。
最开始接触 LFSR 是在强网杯的 streamgame，后来密码学课程上比较详细学习了流密码和 LFSR，再到今年国赛初赛中的 oldstream，最近的
X-MAS CTF 中一道密码题我看到了 LFSR 的一些新玩法，总结一下。
### 2018 强网杯 streamgame1
看一下题目：
    from flag import flag
    assert flag.startswith("flag{")
    assert flag.endswith("}")
    assert len(flag)==25
    def lfsr(R,mask):
        output = (R >1
        output^=lastbit
        return (output,lastbit)
    R=int(flag[5:-1],2)
    mask    =   0b1010011000100011100
    f=open("key","ab")
    for i in range(12):
        tmp=0
        for j in range(8):
            (R,out)=lfsr(R,mask)
            tmp=(tmp >1
        output^=lastbit
        return (output,lastbit)
    key=[85,56,247,66,193,13,178,199,237,224,36,58]
    mask=0b1010011000100011100
    for k in range(2**19):
        R=k;
        a=''
        judge=1
        for i in range(12):
            tmp = 0
            for j in range(8):
                (k, out) = lfsr(k, mask)
                tmp = (tmp >1
        output^=lastbit
        return (output,lastbit)
    R=int(flag[5:-1],16)
    mask = 0b10100100000010000000100010010100
    f=open("key","w")
    for i in range(100):
        tmp=0
        for j in range(8):
            (R,out)=lfsr(R,mask)
            tmp=(tmp > 1
        return R>>1 | lastbit flag{926201d7}
### 2018 X-MAS CTF goodies
这个题算是一个 LFSR 的变形，感觉考的很有趣。看下题：
    import os
    flag = open('flag.txt').read().strip()
    class PRNG():
        def __init__(self):
            self.seed = self.getseed()
            self.iv = int(bin(self.seed)[2:].zfill(64)[0:32], 2)
            self.key = int(bin(self.seed)[2:].zfill(64)[32:64], 2)
            self.mask = int(bin(self.seed)[2:].zfill(64)[64:96], 2)
            self.aux = 0
        def parity(self, x):
            x ^= x >> 16
            x ^= x >> 8
            x ^= x >> 4
            x ^= x >> 2
            x ^= x >> 1
            return x & 1
        def getseed(self):