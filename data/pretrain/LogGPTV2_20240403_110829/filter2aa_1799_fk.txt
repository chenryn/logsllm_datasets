should use DHCP for getting the network 
interface IP address.
4 All the BCD elements codes for the Windows Hypervisor Loader start with BCDE_OSLOADER_TYPE, but this has been omitted due to limited space.
All the entries in the BCD store play a key role in the startup sequence. Inside each boot entry (a boot 
entry is a BCD object), there are listed all the boot options, which are stored into the hive as registry 
subkeys (as shown in Figure 12-5). These options are called BCD elements. The Windows Boot Manager 
is able to add or remove any boot option, either in the physical hive or only in memory. This is important 
because, as we describe later in the section “The boot menu,” not all the BCD options need to reside in the 
physical hive.
If the Boot Configuration Data hive is corrupt, or if some error has occurred while parsing its boot 
entries, the Boot Manager retries the operation using the Recovery BCD hive. The Recovery BCD hive is 
normally stored in \EFI\Microsoft\Recovery\BCD. The system could be configured for direct use of this 
store, skipping the normal one, via the recoverybcd parameter (stored in the UEFI boot variable) or via 
the Bootstat.log file.
798
CHAPTER 12
Startup and shutdown
FIGURE 12-5 An example screenshot of the Windows Boot Manager’s BCD objects and their associated boot 
options (BCD elements).
The system is ready to load the Secure Boot policies, show the boot menu (if needed), and launch 
the boot application. The list of boot certificates that the firmware can or cannot trust is located in the 
db and dbx UEFI authenticated variables. The code integrity boot library reads and parses the UEFI 
variables, but these control only whether a particular boot manager module can be loaded. Once the 
Windows Boot Manager is launched, it enables you to further customize or extend the UEFI-supplied 
Secure Boot configuration with a Microsoft-provided certificates list. The Secure Boot policy file (stored 
in \EFI\Microsoft\Boot\SecureBootPolicy.p7b), the platform manifest polices files (.pm files), and the 
supplemental policies (.pol files) are parsed and merged with the policies stored in the UEFI variables. 
Because the kernel code integrity engine ultimately takes over, the additional policies contain OS-
specific information and certificates. In this way, a secure edition of Windows (like the S version) could 
verify multiple certificates without consuming precious UEFI resources. This creates the root of trust be-
cause the files that specify new customized certificates lists are signed by a digital certificate contained 
in the UEFI allowed signatures database.
If not disabled by boot options (nointegritycheck or testsigning) or by a Secure Boot policy, the Boot 
Manager performs a self-verification of its own integrity: it opens its own file from the hard disk and 
validates its digital signature. If Secure Boot is on, the signing chain is validated against the Secure Boot 
signing policies.
The Boot Manager initializes the Boot Debugger and checks whether it needs to display an OEM 
bitmap (through the BGRT system ACPI table). If so, it clears the screen and shows the logo. If Windows 
has enabled the BCD setting to inform Bootmgr of a hibernation resume (or of a hybrid boot), this 
shortcuts the boot process by launching the Windows Resume Application, Winresume.efi, which will 
read the contents of the hibernation file into memory and transfer control to code in the kernel that 
CHAPTER 12
Startup and shutdown
799
resumes a hibernated system. That code is responsible for restarting drivers that were active when the 
system was shut down. Hiberfil.sys is valid only if the last computer shutdown was a hibernation or a 
hybrid boot. This is because the hibernation file is invalidated after a resume to avoid multiple resumes 
from the same point. The Windows Resume Application BCD object is linked to the Boot Manager 
descriptor through a specific BCD element (called resumeobject, which is described in the “Hibernation 
and Fast Startup” section later in this chapter). 
Bootmgr detects whether OEM custom boot actions are registered through the relative BCD ele-
ment, and, if so, processes them. At the time of this writing, the only custom boot action supported is 
the launch of an OEM boot sequence. In this way the OEM vendors can register a customized recovery 
sequence invoked through a particular key pressed by the user at startup. 
The boot menu
In Windows 8 and later, in the standard boot configurations, the classical (legacy) boot menu is 
never shown because a new technology, modern boot, has been introduced. Modern boot provides 
Windows with a rich graphical boot experience while maintaining the ability to dive more deeply into 
boot-related settings. In this configuration, the final user is able to select the OS that they want to ex-
ecute, even with touch-enabled systems that don’t have a proper keyboard and mouse. The new boot 
menu is drawn on top of the Win32 subsystem; we describe its architecture later in this chapter in the 
”Smss, Csrss, and Wininit” section. 
The bootmenupolicy boot option controls whether the Boot Loader should use the old or new 
technology to show the boot menu. If there are no OEM boot sequences, Bootmgr enumerates the 
system boot entry GUIDs that are linked into the displayorder boot option of the Boot Manager. (If this 
value is empty, Bootmgr relies on the default entry.) For each GUID found, Bootmgr opens the relative 
BCD object and queries the type of boot application, its startup device, and the readable description. 
All three attributes must exist; otherwise, the Boot entry is considered invalid and will be skipped. If 
Bootmgr doesn’t find a valid boot application, it shows an error message to the user and the entire 
Boot process is aborted. The boot menu display algorithm begins here. One of the key functions, 
BmpProcessBootEntry, is used to decide whether to show the Legacy Boot menu:
I 
If the boot menu policy of the default boot application (and not of the Bootmgr entry) is ex-
plicitly set to the Modern type, the algorithm exits immediately and launches the default entry
through the BmpLaunchBootEntry function. Noteworthy is that in this case no user keys are
checked, so it is not possible to force the boot process to stop. If the system has multiple boot
entries, a special BCD option5 is added to the in-memory boot option list of the default boot
application. In this way, in the later stages of the System Startup, Winlogon can recognize the
option and show the Modern menu.
I 
Otherwise, if the boot policy for the default boot application is legacy (or is not set at all) and
there is only an entry, BmpProcessBootEntry checks whether the user has pressed the F8 or F10
key. These are described in the bootmgr.xsl resource file as the Advanced Options and Boot
5 The multi-boot “special option” has no name. Its element code is BCDE_LIBRARY_TYPE_MULTI_BOOT_SYSTEM
(that corresponds to 0x16000071 in hexadecimal value).
800
CHAPTER 12
Startup and shutdown
Options keys. If Bootmgr detects that one of the keys is pressed at startup time, it adds the rela-
tive BCD element to the in-memory boot options list of the default boot application (the BCD 
element is not written to the disk). The two boot options are processed later in the Windows 
Loader. Finally, BmpProcessBootEntry checks whether the system is forced to display the boot 
menu even in case of only one entry (through the relative “displaybootmenu” BCD option).
I 
In case of multiple boot entries, the timeout value (stored as a BCD option) is checked and, if it
is set to 0, the default application is immediately launched; otherwise, the Legacy Boot menu is
shown with the BmDisplayBootMenu function.
While displaying the Legacy Boot menu, Bootmgr enumerates the installed boot tools that are listed 
in the toolsdisplayorder boot option of the Boot Manager.
Launching a boot application
The last goal of the Windows Boot Manager is to correctly launch a boot application, even if it resides 
on a BitLocker-encrypted drive, and manage the recovery sequence in case something goes wrong. 
BmpLaunchBootEntry receives a GUID and the boot options list of the application that needs to be ex-
ecuted. One of the first things that the function does is check whether the specified entry is a Windows 
Recovery (WinRE) entry (through a BCD element). These kinds of boot applications are used when deal-
ing with the recovery sequence. If the entry is a WinRE type, the system needs to determine the boot 
application that WinRE is trying to recover. In this case, the startup device of the boot application that 
needs to be recovered is identified and then later unlocked (in case it is encrypted). 
The BmTransferExecution routine uses the services provided by the boot library to open the device 
of the boot application, identify whether the device is encrypted, and, if so, decrypt it and read the 
target OS loader file. If the target device is encrypted, the Windows Boot Manager tries first to get 
the master key from the TPM. In this case, the TPM unseals the master key only if certain conditions 
are satisfied (see the next paragraph for more details). In this way, if some startup configuration has 
changed (like the enablement of Secure Boot, for example), the TPM won’t be able to release the key. 
If the key extraction from the TPM has failed, the Windows Boot Manager displays a screen similar to 
the one shown in Figure 12-6, asking the user to enter an unlock key (even if the boot menu policy is 
set to Modern, because at this stage the system has no way to launch the Modern Boot user interface). 
At the time of this writing, Bootmgr supports four different unlock methods: PIN, passphrase, external 
media, and recovery key. If the user is unable to provide a key, the startup process is interrupted and 
the Windows recovery sequence starts. 
The firmware is used to read and verify the target OS loader. The verification is done through the 
Code Integrity library, which applies the secure boot policies (both the systems and all the customized 
ones) on the file’s digital signature. Before actually passing the execution to the target boot application, 
the Windows Boot Manager needs to notify the registered components (ETW and Measured Boot in 
particular) that the boot application is starting. Furthermore, it needs to make sure that the TPM can’t 
be used to unseal anything else.
CHAPTER 12 Startup and shutdown
801
FIGURE 12-6 The BitLocker recovery procedure, which has been raised because something in the boot configura-
tion has changed.
Finally, the code execution is transferred to the Windows Loader through lrppln. 
This routine returns only in case of certain errors. As before, the Boot Manager manages the latter situ-
ation by launching the Windows Recovery Seuence.
Measured Boot
In late 2006, Intel introduced the Trusted Execution Technology (TXT), which ensures that an authentic 
operating system is started in a trusted environment and not modified or altered by an external agent 
(like malware). The TXT uses a TPM and cryptographic techniues to provide measurements of soft-
ware and platform (UEFI) components. Windows 8.1 and later support a new feature called Measured 
Boot, which measures each component, from firmware up through the boot start drivers, stores those 
measurements in the TPM of the machine, and then makes available a log that can be tested remotely 
to verify the boot state of the client. This technology would not exist without the TPM. The term mea-
sureen refers to a process of calculating a cryptographic hash of a particular entity, like code, data 
structures, configuration, or anything that can be loaded in memory. The measurements are used for 
various purposes. Measured Boot provides antimalware software with a trusted (resistant to spoofing 
and tampering) log of all boot components that started before Windows. The antimalware software 
uses the log to determine whether components that ran before it are trustworthy or are infected with 
malware. The software on the local machine sends the log to a remote server for evaluation. Working 
with the TPM and non-Microsoft software, Measured Boot allows a trusted server on the network to 
verify the integrity of the Windows startup process.
802 
CHAPTER 12 Startup and shutdown
The main rules of the TPM are the following
I 
Provide a secure nonvolatile storage for protecting secrets
I 
Provide platform configuration registers (PCRs) for storing measurements
I 
Provide hardware cryptographic engines and a true random number generator
The TPM stores the Measured Boot measurements in PCRs. Each PCR provides a storage area that 
allows an unlimited number of measurements in a fixed amount of space. This feature is provided by a 
property of cryptographic hashes. The Windows Boot Manager (or the Windows Loader in later stages) 
never writes directly into a PCR register it extends the PCR content. The extend operation takes 
the current value of the PCR, appends the new measured value, and calculates a cryptographic hash 
(SA-1 or SA-256 usually) of the combined value. The hash result is the new PCR value. The extend 
method assures the order-dependency of the measurements. One of the properties of the crypto-
graphic hashes is that they are order-dependent. This means that hashing two values A and B produces 
two different results from hashing B and A. Because PCRs are extended (not written), even if malicious 
software is able to extend a PCR, the only effect is that the PCR would carry an invalid measurement. 
Another property of the cryptographic hashes is that it’s impossible to create a block of data that pro-
duces a given hash. Thus, it’s impossible to extend a PCR to get a given result, except by measuring the 
same objects in exactly the same order.
At the early stages of the boot process, the System Integrity module of the boot library registers 
different callback functions. Each callback will be called later at different points in the startup sequence 
with the goal of managing measured-boot events, like Test Signing enabling, Boot Debugger enabling, 
PE Image loading, boot application starting, hashing, launching, exiting, and BitLocker unlocking. Each 
callback decides which kind of data to hash and to extend into the TPM PCR registers. For instance, 
every time the Boot Manager or the Windows Loader starts an external executable image, it generates 
three measured boot events that correspond to different phases of the Image loading rn, 
pplnse, and pplnune. In this case, the measured entities, which are sent to the 
PCR registers (11 and 12) of the TPM, are the following hash of the image, hash of the digital signature 
of the image, image base, and size.
All the measurements will be employed later in Windows when the system is completely started, for 
a procedure called esn. Because of the uniqueness property of cryptographic hashes, you can 
use PCR values and their logs to identify exactly what version of software is executing, as well as its en-
vironment. At this stage, Windows uses the TPM to provide a TPM uote, where the TPM signs the PCR 
values to assure that values are not maliciously or inadvertently modified in transit. This guarantees 
the authenticity of the measurements. The quoted measurements are sent to an attestation author-
ity, which is a trusted third-party entity that is able to authenticate the PCR values and translate those 
values by comparing them with a database of known good values. Describing all the models used for 
attestation is outside the scope of this book. The final goal is that the remote server confirms whether 
the client is a trusted entity or could be altered by some malicious component.
Earlier we explained how the Boot Manager is able to automatically unlock the BitLocker-encrypted 
startup volume. In this case, the system takes advantage of another important service provided by the 
TPM secure nonvolatile storage. The TPM nonvolatile random access memory (NVRAM) is persistent 
CHAPTER 12 Startup and shutdown
803
across power cycles and has more security features than system memory. While allocating TPM 
NVRAM, the system should specify the following
I 
Read access rights Specify which TPM privilege level, called locality, can read the data. More
importantly, specify whether any PCRs must contain specific values in order to read the data.
I 
Write access rights The same as above but for write access.
I 
Attributes/permissions Provide optional authorizations values for reading or writing (like a
password) and temporal or persistent locks (that is, the memory can be locked for write access).
The first time the user encrypts the boot volume, BitLocker encrypts its volume master key (VMK) 
with another random symmetric key and then seals that key using the extended TPM PCR values 
(in particular, PCR 7 and 11, which measure the BIOS and the Windows Boot seuence) as the sealing 
condition. eln is the act of having the TPM encrypt a block of data so that it can be decrypted only 
by the same TPM that has encrypted it, only if the specified PCRs have the correct values. In subseuent 
boots, if the unsealing is reuested by a compromised boot seuence or by a different BIOS configu-
ration, TPM refuses the reuest to unseal and reveal the VMK encryption key.
EXPERIMENT: Invalidate TPM measurements 
In this experiment, you explore a uick way to invalidate the TPM measurements by invalidat-
ing the BIOS configuration. Before measuring the startup seuence, drivers, and data, Measured 
Boot starts with a static measurement of the BIOS configuration (stored in PCR1). The measured 
BIOS configuration data strictly depends on the hardware manufacturer and sometimes even 
includes the UEFI boot order list. Before starting the experiment, verify that your system includes 
a valid TPM. Type tpm.msc in the Start menu search box and execute the snap-in. The Trusted 
Platform Module (TPM) Management console should appear. Verify that a TPM is present and 
enabled in your system by checking that the Status box is set to The TPM Is Ready For Use.
EXPERIMENT: Invalidate TPM measurements 
In this experiment, you explore a uick way to invalidate the TPM measurements by invalidat-
ing the BIOS configuration. Before measuring the startup seuence, drivers, and data, Measured 
Boot starts with a static measurement of the BIOS configuration (stored in PCR1). The measured 
BIOS configuration data strictly depends on the hardware manufacturer and sometimes even 
includes the UEFI boot order list. Before starting the experiment, verify that your system includes 
a valid TPM. Type tpm.msc in the Start menu search box and execute the snap-in. The Trusted 
Platform Module (TPM) Management console should appear. Verify that a TPM is present and 
enabled in your system by checking that the Status box is set to The TPM Is Ready For Use.
804 
CHAPTER 12 Startup and shutdown
Start the BitLocker encryption of the system volume. If your system volume is already en-
crypted, you can skip this step. ou must be sure to save the recovery key, though. (ou can 
check the recovery key by selecting Back Up our Recovery Key, which is located in the Bitlocker 
drive encryption applet of the Control Panel.) Open File Explorer by clicking its taskbar icon, and 
navigate to This PC. Right-click the system volume (the volume that contains all the Windows 
files, usually C) and select Turn On BitLocker. After the initial verifications are made, select Let 
Bitlocker Automatically Unlock My Drive when prompted on the Choose ow to Unlock our 
Drive at Startup page. In this way, the VMK will be sealed by the TPM using the boot measure-
ments as the unsealing key. Be careful to save or print the recovery key you’ll need it in the next 
stage. Otherwise, you won’t be able to access your files anymore. Leave the default value for all 
the other options.
After the encryption is complete, switch off your computer and start it by entering the UEFI 
BIOS configuration. (This procedure is different for each PC manufacturer check the hardware 
user manual for directions for entering the UEFI BIOS settings.) In the BIOS configuration pages, 
simply change the boot order and then restart your computer. (You can change the startup 
boot order by using the UefiTool utility, which is in the downloadable files of the book.) If your 
hardware manufacturer includes the boot order in the TPM measurements, you should get the 
BitLocker recovery message before Windows boots. Otherwise, to invalidate the TPM measure-
ments, simply insert the Windows Setup DVD or flash drive before switching on the workstation. 
If the boot order is correctly configured, the Windows Setup bootstrap code starts, which prints 
Start the BitLocker encryption of the system volume. If your system volume is already en-
crypted, you can skip this step. ou must be sure to save the recovery key, though. (ou can 
check the recovery key by selecting Back Up our Recovery Key, which is located in the Bitlocker 
drive encryption applet of the Control Panel.) Open File Explorer by clicking its taskbar icon, and 
navigate to This PC. Right-click the system volume (the volume that contains all the Windows 
files, usually C) and select Turn On BitLocker. After the initial verifications are made, select Let 
Bitlocker Automatically Unlock My Drive when prompted on the Choose ow to Unlock our 
Drive at Startup page. In this way, the VMK will be sealed by the TPM using the boot measure-
ments as the unsealing key. Be careful to save or print the recovery key you’ll need it in the next 
stage. Otherwise, you won’t be able to access your files anymore. Leave the default value for all 
the other options.
After the encryption is complete, switch off your computer and start it by entering the UEFI 
BIOS configuration. (This procedure is different for each PC manufacturer check the hardware 
user manual for directions for entering the UEFI BIOS settings.) In the BIOS configuration pages, 
simply change the boot order and then restart your computer. (You can change the startup 
boot order by using the UefiTool utility, which is in the downloadable files of the book.) If your 
hardware manufacturer includes the boot order in the TPM measurements, you should get the 
BitLocker recovery message before Windows boots. Otherwise, to invalidate the TPM measure-
ments, simply insert the Windows Setup DVD or flash drive before switching on the workstation. 
If the boot order is correctly configured, the Windows Setup bootstrap code starts, which prints 
CHAPTER 12 Startup and shutdown
805
the Press Any Key For Boot From CD Or DVD message. If you don’t press any key, the system pro-
ceeds to boot the next Boot entry. In this case, the startup sequence has changed, and the TPM 
measurements are different. As a result, the TPM won’t be able to unseal the VMK.
ou can invalidate the TPM measurements (and produce the same effects) if you have Secure 
Boot enabled and you try to disable it. This experiment demonstrates that Measured Boot is tied 
to the BIOS configuration.
Trusted execution
Although Measured Boot provides a way for a remote entity to confirm the integrity of the boot 
process, it does not resolve an important issue Boot Manager still trusts the machine’s firmware code 
and uses its services to effectively communicate with the TPM and start the entire platform. At the 
time of this writing, attacks against the UEFI core firmware have been demonstrated multiple times. 
The Trusted Execution Technology (TXT) has been improved to support another important feature, 
called Secure Launch. Secure Launch (also known as Trusted Boot in the Intel nomenclature) provides 
secure authenticated code modules (ACM), which are signed by the CPU manufacturer and executed 
806 
CHAPTER 12 Startup and shutdown
by the chipset (and not by the firmware). Secure Launch provides the support of dynamic measure-
ments made to PCRs that can be reset without resetting the platform. In this scenario, the OS provides 
a special Trusted Boot (TBOOT) module used to initialize the platform for secure mode operation and 
initiate the Secure Launch process. 
An ueneeule(ACM) is a piece of code provided by the chipset manufacturer. The 
ACM is signed by the manufacturer, and its code runs in one of the highest privilege levels within a spe-