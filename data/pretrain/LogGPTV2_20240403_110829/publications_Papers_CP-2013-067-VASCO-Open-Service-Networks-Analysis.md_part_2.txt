### 1. SugarCRM Service Modeling with Linked USDL

The description begins with the identification of the provider (line 4), the legal usage conditions (line 5), and the general properties of the service, such as deployment, scheduled backups, integration, and mobile accessibility. The price plans are listed in line 15.

```turtle
:offering_SugarCRM a usdl:ServiceOffering ;
  usdl:includes  ;
  usdl:hasPricePlan
    :pricing_SugarCRM_Professional,
    :pricing_SugarCRM_Corporate,
    :pricing_SugarCRM_Enterprise,
    :pricing_SugarCRM_Ultimate ;
  usdl:hasServiceLevelProfile :slp_SugarCRM .
```

**Listing 1.1.** SugarCRM service modeled with Linked USDL.

### 2. Open Service Relationships

Service networks rely on fundamental elements that connect service systems: relationships. The Open Semantic Service Relationship (OSSR) model [4] captures dependencies between aggregated SaaS and atomic SaaS applications (i.e., services that do not depend on other services). The OSSR model assumes that service systems are described using existing languages like Linked USDL, and it derives a rich, multi-level relationship model. Service relationships differ from the temporal and control-flow relations found in business process models. They account for various perspectives such as roles, associations, dependencies, and comparisons.

### 3. Service Network Construction

An Open Semantic Service Network (OSSN) is modeled as a time-varying hypergraph \( SN(t) = \{S(t), C(t), R(t)\} \), where:
- \( S(t) \) is the set of provided services.
- \( C(t) \) is the set of service consumers.
- Both sets are modeled with USDL.
- \( R(t) \) is the set of relationships modeled with OSSR, connecting consumers and provided services.

Binary relationships can be depicted as edges in a directed graph (see section 5). Time is represented by the parameter \( t \), whose granularity is set to appropriately model the market (e.g., days). Consumers alter the topology of a service network by diffusion when they adopt or abandon a service by adding or deleting an OSSR relationship.

To construct a service network \( SN \), USDL and OSSR models are remotely accessed and retrieved. OSSR models are mapped to relationships \( R(t) \).

### 4. Service Network Analysis

A wide spectrum of techniques and algorithms can be developed to study OSSNs. For example, reasoning techniques can explore the notion of relationships as bonds. By discovering strong cliques, we can hypothesize that stronger relationships lead to greater unification and commonality of fates. This implies that a tightly coupled service network will either succeed or fail together. Other valuable algorithms come from network science, such as detecting if an OSSN is a scale-free network [15], which correlates with robustness to failures. Preferential attachment [22] can forecast the structural evolution of service networks.

We present four methods under the umbrella of Service Network Analysis (SNA):
1. **OSSN Optimization**: Constructs networks by selecting the best services based on certain criteria.
2. **Evolutionary Analysis of OSSN**: Studies network structures as a function of time.
3. **Cooperative Analysis of OSSN**: Examines how customer behavior and service characteristics influence resource flows within the network.
4. **Value Analysis**: Establishes rules and regulations to ensure fair and unbiased network construction.

These methods provide different views of a network and do not compete with each other. For example, optimization can select the most desirable combination of services to achieve an initial goal, while cooperative analysis studies how customer behavior and service characteristics influence resource flows.

### 5. OSSN Optimization

The service network \( SN = (N, E, l_n, l_e) \) is a node and edge-labeled directed graph (initially acyclic) where:
- \( N = S \cup C \): Nodes are either services \( S \) or consumers \( C \).
- \( E = S \times S \cup S \times C \): Edges connect services to other services or consumers.
- \( l_n: N \rightarrow \text{Description} \): Node labels indicate service semantics or consumer demands.
- \( l_e: E \rightarrow \text{Color} \): Edge labels represent abstract types.

Consumer nodes are sinks (no outgoing edges), and certain services are atomic (no incoming edges). Edges connect services to other services and consumers.

The optimal construction of a service network involves two phases:
1. **Maximal Color-Compliant Service Network Construction**: Builds a network from atomic services (sources), composite services (intermediate nodes), and consumers (sinks).
2. **Cost Minimization**: Uses Linear Programming to minimize the cost of the network.

### 6. Evolutionary Analysis of OSSN

Assume each service system has a value proposition communicated to customers. Service value is judged from the consumer's perspective. For simplicity, assume the value proposition is the service price calculated from a `usdl-price:PricePlan`.

To forecast the evolution of a service network over time, we use the function:
\[ MS(s_i) = \frac{\text{degree}(s_i)}{m} \]
where \( \text{degree}(s_i) \) is the number of relationships established by service \( s_i \) with consumers, and \( m \) is the total number of relationships between providers and consumers.

Over time, customers change preferences by switching from one service system to another. According to the Bass model [2], the leading service system will reach a fixed-point market share:
\[ MS(s_i, t) = \frac{1 - e^{-bt}}{1 + ae^{-bt}} \]
where \( a \) and \( b \) are constants.

### 7. Cooperative Analysis of OSSN

In this example, we explore the suitability of OSSNs to model system dynamics. Instead of isolating causes and effects, we analyze service networks as systems made up of interacting parts. Once an OSSN is created, cause-effect or network effect diagrams can be derived.

Causal relationships connect Key Performance Indicators (KPIs) from different services. A common pattern, known as the "Tragedy of the Commons" archetype, hypothesizes that if services \( S_i \) and \( S_j \) overuse the shared service \( S_k \), it will become overloaded or depleted, leading to diminishing benefits for all providers.

As the number of service instances increases, the margin decreases, and there is a need to increase the number of instances further. This stress on the availability of service \( S_k \) can lead to its collapse.