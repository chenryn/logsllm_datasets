6. SPATIO-TEMPORAL DOMAINS
Much of the work in extending RBAC to include spatial
and temporal restrictions on entities and entity relationships
has spent a considerable amount of time on how these re-
strictions might be speciﬁed. The authors of GTRBAC,
for example, deﬁne a syntax for temporal restrictions us-
ing the notion of calendars [9]. Although we believe that it
is of much greater importance to understand the interaction
between RBAC inheritance and such restrictions, we now
brieﬂy consider how sets of points within a spatio-temporal
domain might be speciﬁed.
Broadly speaking, there are two possibilities: concrete and
symbolic domains. A concrete domain makes use of actual
points in space-time, whereas a symbolic domain uses labels
as synonyms for sets of points in an associated concrete do-
main. We consider spatial and temporal domains separately.
A single spatio-temporal domain D can be treated as a pair
(S, T ), where S is a spatial domain and T is a temporal
domain.
6.1 Representing location
A concrete spatial domain is deﬁned by a co-ordinate sys-
tem: we could use standard Euclidean space or we may
use spherical or cylindrical co-ordinate systems, for exam-
ple. The system chosen will be entirely dependent on the
method by which user location is determined. For ease of
exposition, we will deﬁne the concrete spatial domain to be
S = {(x, y) : x, y ∈ Z}. In other words, points in space are
deﬁned by two integer co-ordinates.
An atomic location is deﬁned to be a rectangle, which
is deﬁned by the co-ordinates of its lower-left and upper-
right corners.6 That is, a rectangle is a pair [l, r], where
l, r ∈ S. A location is the union of one or more disjoint
atomic locations: clearly, the set of locations is a subset of
2S and λ maps an entity to a location.
Having deﬁned a concrete spatial domain, we may deﬁne
a symbolic spatial domain, in which locations are associated
with labels. Symbolic locations may be deﬁned to be the
union of other symbolic locations; these symbolic locations
may overlap. Having deﬁned a set of symbolic locations, we
must deﬁne a mapping from the set of symbolic locations to
concrete locations. We may also use λ to map entities to
symbolic locations, and then map the symbolic location to
a concrete location.
Let s ∈ S be a point in the concrete spatial domain, and
let L ⊆ S be a concrete location. We write s ∈ L if s belongs
to one of the atomic locations contained in L.
If L is a
union of symbolic locations, we write s ∈ L to denote that s
belongs to at least one of the symbolic locations contained
in L.
6.2 Representing time
We assume the existence of a clock, whose ticks are in-
dexed by the natural numbers N.7 An atomic interval in
6Of course, we could deﬁne a location to be a circular region
in the concrete spatial domain, by deﬁning the center c ∈ S
and radius r ∈ Z of the circle. Again, the deﬁnition of
location will be determined by the method used to identify
the position of a user.
7It should be noted that representing time will be more com-
plex than this for many applications; typically a local time is
relative to a location and a time of year. Our representation
of time, as for location, is merely illustrative.
the concrete temporal domain T = N, is deﬁned by a start
point t1 ∈ T and an end point t2 ∈ T , and written as [t1, t2].
An interval is deﬁned to be the union of one or more disjoint
atomic intervals; λ maps an entity to an interval.
We may also deﬁne a symbolic temporal domain, in which
intervals are associated with labels. We could, for exam-
ple, deﬁne the symbolic intervals 21:August:2007, Mon-
days:2007, WorkingHours etc. We may use λ to map entities
to symbolic intervals.
Let t ∈ T be a point in the concrete temporal domain,
and let I ⊆ T be a concrete interval. We write t ∈ I if t
belongs to one of the atomic intervals contained in I. If I is
the union of symbolic intervals, we write t ∈ I to denote that
t belongs to at least one of the symbolic intervals contained
in I.
6.3 Example
In this section we present examples to illustrate the appli-
ST and spatio-
cations of spatial RBAC=
temporal ERBAC+
ST , temporal RBAC=
ST in practical environment.
6.3.1 Spatial RBAC=
ST
Figure 2 illustrates some of the ideas that we have intro-
duced in this paper. Figure 2(a) lists a number of RBAC
entities associated with a computer science department at a
university. Figure 2(b) illustrates the relationships between
these entities. A user u2, who is assigned to role r1, is al-
lowed to activate roles r2, r3, r4 in any session. In RBAC96,
u2 is authorized to invoke permissions p1, p2, p3, p4 since any
permission can be reached by u2 via a path in the graph.
In order to deﬁne spatial constraints for this example, we
describe the layout of a ﬂoor in the computer building, as
shown in Figure 2(c). Figure 2(d) deﬁnes enabling con-
straints for the RBAC entities in Figure 2(a). Note that
all roles are enabled everywhere within the computer build-
ing, as suggested in Section 5.1.2. For example, permission
to access the ACM and IEEE libraries (p2) is only allowed
if the requester is in the seminar room (SR), Alice’s oﬃce
(AO), or Bob’s oﬃce (BO). In Diane’s oﬃce, for example,
permissions p2 and p3 are not enabled; however, Diane is
allowed to activate r3 (Admin staﬀ), thereby enabling her
to view staﬀ proﬁle.
6.3.2 Temporal RBAC=
ST
Let us consider the graphical formulation of RBAC96 poli-
cies for the computer building shown in Figure 2(a) and 2(b).
Let us assume that Figure 2(d) represents symbolic temporal
domains for all entities of RBAC96 in the example of com-
puter building. Then at a particular point of time 14:00, the
permission p3 is not enabled. All other entities are enabled,
and related edges exist at time 14:00. For example, Alice is
allowed to activate role r2 to use the permission p1 that is
inherited from role r4 at time instant 14:00.
6.3.3 Spatio-temporal ERBAC+
ST
Consider the activation and usage hierarchies of ER-
BAC07 shown in Figures 3(a) and 3(b), respectively, and
the user-role assignment and the permission-role assignment
are as same as the conﬁgurations in Figure 2(b). For ex-
ample, user u2 is authorized to activate role r1, but is not
thereby authorized for permission p4 which is not inherited
by r1 in the permission usage hierarchy. Let us assume that
Figure 2(a) represents ERBAC07 policies in the computer
building.
Figures 2(d) and 3(c) represent the spatio-temporal en-
abling conditions for RBAC entities and relations. Note
that a user must explicitly activate the Admin staﬀ role
in order to use the permissions associated with this role.
Note also that the speciﬁcation of spatio-temporal domains
on edges observes the consistency constraint between nodes
and edges. At a particular spatio-temporal point (Alice’s of-
ﬁce, 13:30), Alice can not activate the role (Academic staﬀ),
because Alice is not assigned academic staﬀ role at point
(AO,13:30) although both user (Alice) and role (Academic
staﬀ) are enabled at point (AO,13:30). On the other hand,
at point (Diane’s oﬃce, 14:00), Bob can activate the role
(Admin staﬀ) to use the permission (View staﬀ proﬁle).
7. RELATED WORK
In this section we examine the GTRBAC model [9] and the
spatio-temporal RBAC model of Ray and Toahchoodee [12]
in more detail, and review other related work on context-
based access control. We explain why we believe that our
model is more attractive than related work according to
several criteria: well-deﬁned authorization semantics, syn-
tactic completeness (constraints on all RBAC entities and
relations), consistency (absence of conﬂicts, resolution of
conﬂicts), and syntactic simplicity (number of predicates or
functions).
7.1 GTRBAC
The temporal-RBAC model (TRBAC) introduces tempo-
ral constraints which limit the time during which a role is
enabled and activated [3]. Generalized TRBAC (GTRBAC)
is an extension of TRBAC that applies temporal constraints
to the assignment of users and permissions to roles [9].
GTRBAC does not consider temporal constraints on users
(sessions), permissions and role hierarchical relationships.
Moreover, GTRBAC, unlike our models, does not impose
any consistency constraints on the user- and permission-role
assignments and role-role relationships.
GTRBAC deﬁnes a “hybrid” role hierarchy that con-
tains three diﬀerent types of role hierarchy relationships:
role-activation hierarchy 6a, permission-usage hierarchy
6u and permission-activation hierarchy 6. However, the
permission-activation hierarchy is redundant and can be de-
ﬁned in terms of other two hierarchies, that is x 6 y if and
only if x 6a y and x 6u y. GTRBAC further sub-divide hi-
erarchies into “weakly” and “strongly” restricted; the autho-
rization semantics for these hierarchies diﬀer. The weakly
restricted semantics for permission usage [9, Table 7], are
deﬁned by
can be acquired(p, x, t) ←∀p, (x >u y)∧
enabled(x, t)∧
can be acquired(p, y, t).
(1)
The intuition seems to be that if x is enabled, x >u y and
y can acquire permission p, then x can acquire permission
p. To quote Joshi et al : “The weakly restricted hierarchies
allow inheritance or activation semantics in the nonoverlap-
ping intervals. . . only role x needs to be enabled at time t
for the [usage] inheritance semantics to apply”.
However, there are a number of problems with this def-
inition. The predicate can_be_acquired is deﬁned recur-
sively, but there is no base case; in particular, replacing x
u1 Alice
u2 Bob
u3 Chris
u4 Diane
r1 Head of department
r2 Academic staﬀ
r3 Admin staﬀ
r4
p1 Access resources via Metalib
p2 Access ACM and IEEE library
p3
p4 View staﬀ proﬁle
Listen to presentations
Student
u3
s


u4
s


@@R
r1
s
 
@
@


@

@@R

sr3
 
B
 
B
u1
s
B
B
B
B
B
B
BBN
r2
u2
s
@
@
 
 
s
  	
B
@
B
@
B
@


 

@@R
  	
s
A
r4
A
AAU
s
p3
B
B

BBN
B
s
p1
s
p2
B
B
B
B
BBN
s
p4
(a) RBAC entities
(b) Graphical representation of RBAC relations
30
20
10
Seminar Room
Diane's Office
Alice's Office
Bob's Office
(SR)
(DO)
(AO)
(BO)
Lobby
(LO)
PhD Room
(PR)
Undergraduate Lab
Postgraduate Lab
(UL)
(PL)
0
20
40
60
80
(c) Spatial domain
Spatial domain
Temporal domain
Entity Symbolic
u1
u2
u3
u4