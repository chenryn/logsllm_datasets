### 6. Spatio-Temporal Domains

Much of the research on extending Role-Based Access Control (RBAC) to include spatial and temporal restrictions has focused on how these restrictions might be specified. For example, the authors of GTRBAC define a syntax for temporal restrictions using the concept of calendars [9]. While we believe that understanding the interaction between RBAC inheritance and such restrictions is more critical, we will briefly consider how sets of points within a spatio-temporal domain might be specified.

Broadly speaking, there are two types of domains: concrete and symbolic. A concrete domain uses actual points in space-time, while a symbolic domain uses labels as synonyms for sets of points in an associated concrete domain. We will consider spatial and temporal domains separately. A single spatio-temporal domain \( D \) can be treated as a pair \((S, T)\), where \( S \) is a spatial domain and \( T \) is a temporal domain.

#### 6.1 Representing Location

A concrete spatial domain is defined by a coordinate system. For instance, we could use standard Euclidean space or spherical or cylindrical coordinate systems. The choice of system depends on the method used to determine user location. For simplicity, we define the concrete spatial domain as:
\[ S = \{(x, y) : x, y \in \mathbb{Z}\} \]
In other words, points in space are defined by two integer coordinates.

An atomic location is defined as a rectangle, which is specified by the coordinates of its lower-left and upper-right corners. Formally, a rectangle is a pair \([l, r]\), where \( l, r \in S \). A location is the union of one or more disjoint atomic locations. Clearly, the set of locations is a subset of \( 2^S \), and \(\lambda\) maps an entity to a location.

Given a concrete spatial domain, we can define a symbolic spatial domain, where locations are associated with labels. Symbolic locations may be defined as the union of other symbolic locations, and these symbolic locations may overlap. After defining a set of symbolic locations, we must define a mapping from the set of symbolic locations to concrete locations. We can also use \(\lambda\) to map entities to symbolic locations and then map the symbolic location to a concrete location.

Let \( s \in S \) be a point in the concrete spatial domain, and let \( L \subseteq S \) be a concrete location. We write \( s \in L \) if \( s \) belongs to one of the atomic locations contained in \( L \). If \( L \) is a union of symbolic locations, we write \( s \in L \) to denote that \( s \) belongs to at least one of the symbolic locations contained in \( L \).

#### 6.2 Representing Time

We assume the existence of a clock, whose ticks are indexed by the natural numbers \(\mathbb{N}\). An atomic interval in the concrete temporal domain \( T = \mathbb{N} \) is defined by a start point \( t_1 \in T \) and an end point \( t_2 \in T \), and written as \([t_1, t_2]\). An interval is defined as the union of one or more disjoint atomic intervals; \(\lambda\) maps an entity to an interval.

We can also define a symbolic temporal domain, where intervals are associated with labels. For example, we could define symbolic intervals such as "21:August:2007," "Mondays:2007," and "WorkingHours." We can use \(\lambda\) to map entities to symbolic intervals.

Let \( t \in T \) be a point in the concrete temporal domain, and let \( I \subseteq T \) be a concrete interval. We write \( t \in I \) if \( t \) belongs to one of the atomic intervals contained in \( I \). If \( I \) is the union of symbolic intervals, we write \( t \in I \) to denote that \( t \) belongs to at least one of the symbolic intervals contained in \( I \).

#### 6.3 Example

In this section, we present examples to illustrate the applications of spatial RBAC, temporal RBAC, and spatio-temporal ERBAC+ in practical environments.

##### 6.3.1 Spatial RBAC

Figure 2 illustrates some of the ideas introduced in this paper. Figure 2(a) lists several RBAC entities associated with a computer science department at a university. Figure 2(b) shows the relationships between these entities. User \( u_2 \), assigned to role \( r_1 \), is allowed to activate roles \( r_2, r_3, r_4 \) in any session. In RBAC96, \( u_2 \) is authorized to invoke permissions \( p_1, p_2, p_3, p_4 \) since any permission can be reached by \( u_2 \) via a path in the graph.

To define spatial constraints, we describe the layout of a floor in the computer building, as shown in Figure 2(c). Figure 2(d) defines enabling constraints for the RBAC entities in Figure 2(a). Note that all roles are enabled everywhere within the computer building, as suggested in Section 5.1.2. For example, permission to access the ACM and IEEE libraries (\( p_2 \)) is only allowed if the requester is in the seminar room (SR), Alice’s office (AO), or Bob’s office (BO). In Diane’s office, permissions \( p_2 \) and \( p_3 \) are not enabled; however, Diane is allowed to activate \( r_3 \) (Admin staff), thereby enabling her to view staff profiles.

##### 6.3.2 Temporal RBAC

Consider the graphical formulation of RBAC96 policies for the computer building shown in Figures 2(a) and 2(b). Assume that Figure 2(d) represents symbolic temporal domains for all entities of RBAC96 in the example of the computer building. At a particular time, say 14:00, permission \( p_3 \) is not enabled. All other entities are enabled, and related edges exist at time 14:00. For example, Alice is allowed to activate role \( r_2 \) to use the permission \( p_1 \) inherited from role \( r_4 \) at 14:00.

##### 6.3.3 Spatio-Temporal ERBAC+

Consider the activation and usage hierarchies of ERBAC07 shown in Figures 3(a) and 3(b), respectively, and the user-role assignment and permission-role assignment are the same as the configurations in Figure 2(b). For example, user \( u_2 \) is authorized to activate role \( r_1 \), but is not thereby authorized for permission \( p_4 \), which is not inherited by \( r_1 \) in the permission usage hierarchy. Assume that Figure 2(a) represents ERBAC07 policies in the computer building.

Figures 2(d) and 3(c) represent the spatio-temporal enabling conditions for RBAC entities and relations. Note that a user must explicitly activate the Admin staff role to use the permissions associated with this role. Also, the specification of spatio-temporal domains on edges observes the consistency constraint between nodes and edges. At a particular spatio-temporal point (Alice’s office, 13:30), Alice cannot activate the role (Academic staff) because she is not assigned the academic staff role at point (AO, 13:30), although both the user (Alice) and the role (Academic staff) are enabled at point (AO, 13:30). On the other hand, at point (Diane’s office, 14:00), Bob can activate the role (Admin staff) to use the permission (View staff profile).

### 7. Related Work

In this section, we examine the GTRBAC model [9] and the spatio-temporal RBAC model of Ray and Toahchoodee [12] in more detail, and review other related work on context-based access control. We explain why our model is more attractive than related work according to several criteria: well-defined authorization semantics, syntactic completeness (constraints on all RBAC entities and relations), consistency (absence of conflicts, resolution of conflicts), and syntactic simplicity (number of predicates or functions).

#### 7.1 GTRBAC

The Temporal-RBAC model (TRBAC) introduces temporal constraints that limit the time during which a role is enabled and activated [3]. Generalized TRBAC (GTRBAC) extends TRBAC by applying temporal constraints to the assignment of users and permissions to roles [9]. However, GTRBAC does not consider temporal constraints on users (sessions), permissions, and role hierarchical relationships. Unlike our models, GTRBAC does not impose any consistency constraints on user- and permission-role assignments and role-role relationships.

GTRBAC defines a “hybrid” role hierarchy that contains three different types of role hierarchy relationships: role-activation hierarchy \(\geq_a\), permission-usage hierarchy \(\geq_u\), and permission-activation hierarchy \(\geq\). However, the permission-activation hierarchy is redundant and can be defined in terms of the other two hierarchies, i.e., \( x \geq y \) if and only if \( x \geq_a y \) and \( x \geq_u y \). GTRBAC further subdivides hierarchies into “weakly” and “strongly” restricted; the authorization semantics for these hierarchies differ. The weakly restricted semantics for permission usage [9, Table 7] are defined by:

\[
\text{can_be_acquired}(p, x, t) \leftarrow \forall p, (x \geq_u y) \land \text{enabled}(x, t) \land \text{can_be_acquired}(p, y, t).
\]

The intuition seems to be that if \( x \) is enabled, \( x \geq_u y \), and \( y \) can acquire permission \( p \), then \( x \) can acquire permission \( p \). According to Joshi et al., “The weakly restricted hierarchies allow inheritance or activation semantics in non-overlapping intervals... only role \( x \) needs to be enabled at time \( t \) for the [usage] inheritance semantics to apply.”

However, there are several problems with this definition. The predicate \(\text{can_be_acquired}\) is defined recursively, but there is no base case. Specifically, replacing \( x \) with \( y \) in the recursive definition leads to an infinite loop. This lack of a base case makes the definition incomplete and potentially problematic.