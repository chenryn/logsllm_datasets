收方将刚送到的消息的标志自通道con上发回，即
T)+(l)+)=())
发方在前面的消息未被确认前，拒绝在该通道上输入，即
RM=mid?z-→tag(z).rm1untag(z)-→RM
TM= 
银行与顾客
TC= con?i→i,tcon-→TC
RG =.
RR=rm?z-→rightiz-rcon-RR
aCUST= {register}U{a.x|a∈AAx∈aACC)
 CUST = register->ACCS
.TR
αACC={open,terminate}
2:TR
可发现(PIR)=P，即与R的并行组合，对LioneI
2.toon
1. tcon
2. tm
R=RM[RC](
T=(
i,rcon-→con1i-→RC
图
∈[l,}
i:TR)|TM|TC
mid
con
lei.!
图
窗
i:RR)
1. rm
2.m
I. reon.
2.RR
L rioh
---
## Page 292
定义
A8.1
G
(P8).
(P7)
(P6)
(P5)
(P4)
(P3)
(P2)
(P1)
(I=fo1-uo↑x)=NO
电梯等候室
OP = (tr ↓ open - tr ↓ close = 0).
OP=(tr ↓open - tr ↓close= 1)
PR =(tr ↓ press -tr ↓release=0)
PR=(tr ↓press-tr↓release=1)
ON=(tr ↓on -tr ↓off = 0)
CLERK3= (c.a.bouncer n→
Vs.~s in tA-in s
(ONVON )A(PRVPR)A(OPV OP)
Vs,t,tr=s~~t^
^-ins=→#s≤K
As↓on=s↓offAs↓open=s↓close
→intVin t
八、描
right11 (c,4,n)-→CLERK3)
【门关着）
（门开着）：
（按钮复位）
（按钮按下）
（灯熄灭）
（灯亮着）
269
---
## Page 293
示亮灯和按下按钮同时出现。
PR；而在状态ON中，灯亮着；按钮却已复位；状态 PRON表
其它状态中，可打开门。当按钮按下，灯被熄灭时，达到状态
注意：在状态P6中，灯已熄灭，按钮复位，门无法被打开。在
其中
A8.2电梯等候室的实施
而不可能证明上逃描述的可满足性。
在出现请求与服务间的无限延迟时，屏蔽后的进程就会发散，因
的至部事件都被屏蔽后，系统仍不发散抑或死锁，即
延迟，而不给出具体上界。为此，可说明系统中除请求与服务外
明的。比较可取的办法是，规定请求与服务间只允许出现有限的
Vs,t.tr=s~A(s↓on>s ↓off)=→in t
(P9)
270
P8并不排除死锁。另外，在-P8中明确提到K，也是不很瞻
BUTTON = press-+releaseBUTTON
. LIGHT=on-→off-→LIGHT
LOBBY\(aLOBBY-{press}-{open}) sat
是的，在门被打开时，至少在再关闭前，灯应熄灭。
PRON =(open→PRONIoff-→PR|release-ON)
 DOOR= open-→close-→DOOR
ON =(open-→ON|off-→P6lpress-→PRON)
PR = (open-→PR|release-→P6↓on-→PRON)
P6 =(press-→PR↓on-→ON)
P5=(close-=P5
P4 =(on-=P4
P3 = (press-μX ,(on-X [release-P3))
P2=(open-→μX.(off→X↑close-→P2))
'topen-→close-P4)
[press-→release-P5)
(ref≠{press,open))
---
## Page 294
很少。可由描述中的相应子句判明哪个动作不应出现。
的标号。每个状态下，至多有三个可能的动作，故实施的工作量
移动。
的行为如同驻留在一个立方体顶点上的筹码，它沿着立方体的棱
A8.4实施
个事件只能是on或者open。
中，灯熄了，门也关着；故若按钮已按下，则不能立即复位。
灯叉开着门。在这些状态中，什么事情都可能发生。在状态P7
注意：在ON,OP和ONOP中，灯亮着，或门开岩，或既亮着
 ONOP=(off→OP|close→ON|
P9和A8.3略去。
一共有八个状态，可用{PR,ON，OP}的子集作为这些状态
我喜欢方法二。进程
OP=(close→P7lon-→ONOP|
ON=(off→P7|open-ONOP|
L :=(press-→Ltra)
P7= (on-→ON|open-sOP
[press-→(on→ONlopen-→OP)
[open-→L(on: op1)
[release-P?)
[off由(P2)所禁止]
[on由（P3）所禁止]
[open由（P6）所禁止]
-·-·
LOBBY=L; }
x:(a P7 - [off,close})-ONOP)
x:(a P7 - [off,open))-ON)
x:(α P7 - {close,on})-OP)
d
---
## Page 295
A9.1 αPi={a,b],
A8.5多重按钮
272
略。
P1EP3EP4
P1EP2
traces(P4)={<>,，,，，,}
traces(P2)= {a}*
traces(P1)={<>,{a}}
[elose由（P5）所禁止]
[on 由(P4)所禁止]
[on由（P3)A（P4)所禁止]
[close-→L, }
[off由(P2)所禁止]
[release 由(P7)所禁止]
[release-→Lion, ops)
[close由（P5）所禁止]
[olose由(P9)所禁止]
i=1,2,3,4
九、数学理论
---
## Page 296
A9.3 divergences(a→P|b-Q)\{a)
A9.2
(1)
(2)
aPi={a,b],
a(PA\{a})={b},
divergences(P2\{a})={b}*
divergences(PA{a})=[ },
divergences(Pi)={ },
Ps\{a}≤P\[a}
P2\{a}=P3\{a}=P5\{a}EP1\{a}
failures(P3\{a})={(s,X)|s≤AX≤{b}}
failures(P1\{a})={(<>,X)|X≤{b}}
failures(P3)={(<>,{})}U{(,X)
failures(P1) ={(<>,X)| X{b}}U{(,X)
failures(P5\{a})={(s,X)|s≤AX≤{b}}
failures(P4\{a})={(<>,{})}U{(,X)
failures(P2\{a})={(s,X)丨s∈{b}*Ax≤{b})
failure(P5)={(<>,X)[Xc{a,b}}U{(,X)
failures(P4)={(,f })}U{(,X)
failures(P2)={(,x)|n≥0Ax≤{b}}
i=1,2,3,4,5
i=1,2,3,4,5
P5EP3
P5EP1
i=1,2,3,4,5
U{(,x)|x,y
i=1,3,4,5
[x∈{a,b]Ax≤{a,b}}
[xe[a,b}Ax≤{a,b}}
[x∈{a,b}Ax[x})
∈{a,b}Ax≠y
Ax≤{a,b]}
|X{a,b}}
[X≤}
273
---
## Page 297
A9.5
49.4．使用归纳法，证明对一切n有
而却属于failures(（c+=P)\(a}（b→Q\{a}))
因为
反例为
274
divergences(P\(a})Udivergences(b→Q\{a})
使用归纳法，证明对一切n.有“
(a-c-→P|b-→Q)\{a}
()s((sovHD)d)sennDf(fa)A:
(<>,fo))∈failures((a-P)\{a)
≠(c→P)\a}(b→OVa})
=(c-→P)\{a}((c-<P)\(a}b→Q\{a})
(s,X)∈ failures(P\{a}(P\{a}Db-→Q\{a}))
P2F"(STOP), (P2F"(CHAOS))
[((cP)\{e}b→Q\{a}))
=divergences(P\{a}(P\{a}b→O\{a}))
=(s,X)∈failures(a→P1b-→Q)\{a}
=sE(divergences(P\fa})
=(s,X)∈failures(P\{a})V(hd(s)=b
=sE diuergences(P\fa})
V3t.s=(b)A(t,xU{a})
{}↓=(s)Vq=(s)PyEA
Vhd(s) =bAtl(s)∈divergences(Q\(a})
Vt.s=D}A(,XU{a})
A(tl(s),X)∈failur es(Q\{a}))
A(t,XU(a})∈failures(Q)
Udivergences(b→Q\{a}))
∈failures(a-→Pjb-→Q)
∈failures(P)
---
## Page 298
而故
A9.6
因为
B
STOP
:STOP
[(P\B)
A-B
(n≥0)
275
6511
---
## Page 299
Welah, J. and McKeag, R.M.
Kahn, G,
Milner, R.
Hoare, C.A.R.
Hoare, C.A.R.
Conway, M.E.
276
P.324（1980).着重介绍PASCAL PLUS，及其在构造操作系
Structured System Programmiag, Prentice-Hall,London,
Programming", in Information Processing, 74, North
（1980）．并发和同步的一般理论的一种清晰的数学处理。
A Caloulus of Communicating Systens, Lecture Notes in
21（8)，666一677（1978)。设计一种程序设计语言一
“Communicating Sequential Processea", Comm. ACM
Holland，Amsterdam Pp，471-475（1974)，函数式多道程序
的设计的早期版本，
作系统的一种程序设计语言特性。
cept"，Comm.ACM17（10)，549—557（1974).有助于构造操
Comm，ACM6(7)，8-15（1983)。协同子程序的经典论文.
*Design of a Separable Transition-Diagram Compiler",
设计的精美处理，
αThe
Semantics of a Simple Language for Parallel
文献精选
一本书中提出
---