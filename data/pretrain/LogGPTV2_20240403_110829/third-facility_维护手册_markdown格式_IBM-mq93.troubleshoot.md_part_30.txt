from the &MQ_INSTALL_DIRECTORY&/ amqp/samples/samples directory to the directory
&MQ_INSTALL_DIRECTORY&/ amqp/samples/jaas
Procedure
1.Look in mqxr.log for an exception thrown by javax.security.auth.login.LoginException.
See “Server-side logs” on page 178 for the path to mqxr.log, and Figure 14 on page 191 for an
example of the exception listed in the log.
2.Correct your JAAS configuration by comparing it with the worked example in “Example JAAS
configuration” on page 189.
3.Replace your login class by the sample JAASLoginModule, after refactoring it into your
authentication package and deploy it using the same path. Switch the value of loggedIn between
true and false.
If the problem goes away when loggedIn is true, and appears the same when loggedIn is false,
the problem lies in your login class.
4.Check whether the problem is with authorization rather than authentication.
a)Change the telemetry channel definition to perform authorization checking using a fixed user ID.
Select a user ID that is a member of the mqm group.
b)Rerun the client application.
If the problem disappears, the solution lies with the user ID being passed for authorization. What is
the user name being passed? Print it to file from your login module. Check its access permissions
using IBM MQ Explorer, or dspmqauth.
Example JAAS configuration
Use the New telemetry channel wizard, in IBM MQ Explorer, to configure a telemetry channel.
The JAAS configuration file has a stanza named JAASConfig that names the Java class
security.jaas.JAASLogin, which JAAS is to use to authenticate clients.
JAASConfig {
security.jaas.JAASLogin required debug=true;
};
Figure 9. WMQ Installation directory\data\qmgrs\qMgrName\mqxr\jaas.config
When SYSTEM.MQTT.SERVICE starts, it adds the path in Figure 10 on page 189 to its classpath.
CLASSPATH=C:\WMQTelemtryApps;
Figure 10. WMQ Installation directory\data\qmgrs\qMgrName\service.env
Figure 11 on page 190 shows the additional path in Figure 10 on page 189 added to the classpath that is
set up for the telemetry (MQXR) service.
IBM MQ troubleshooting and support 189
CLASSPATH=;C:\IBM\MQ\Program\mqxr\bin\\..\lib\MQXRListener.jar;
C:\IBM\MQ\Program\mqxr\bin\\..\lib\WMQCommonServices.jar;
C:\IBM\MQ\Program\mqxr\bin\\..\lib\objectManager.utils.jar;
C:\IBM\MQ\Program\mqxr\bin\\..\lib\com.ibm.micro.xr.jar;
C:\IBM\MQ\Program\mqxr\bin\\..\..\java\lib\com.ibm.mq.jmqi.jar;
C:\IBM\MQ\Program\mqxr\bin\\..\..\java\lib\com.ibm.mqjms.jar;
C:\IBM\MQ\Program\mqxr\bin\\..\..\java\lib\com.ibm.mq.jar;
C:\WMQTelemtryApps;
Figure 11. Classpath output from runMQXRService.bat
The output in Figure 12 on page 190 shows that the telemetry (MQXR) service has started.
21/05/2010 15:32:12 [main] com.ibm.mq.MQXRService.MQXRPropertiesFile
AMQXR2011I: Property com.ibm.mq.MQXR.channel/JAASMCAUser value
com.ibm.mq.MQXR.Port=1884;
com.ibm.mq.MQXR.JAASConfig=JAASConfig;
com.ibm.mq.MQXR.UserName=Admin;
com.ibm.mq.MQXR.StartWithMQXRService=true
Figure 12. WMQ Installation directory\data\qmgrs\qMgrName\errors\
When the client application connects to the JAAS channel, if
com.ibm.mq.MQXR.JAASConfig=JAASWrongConfig does not match the name of a JAAS stanza in
the jaas.config file, the connection fails, and the client throws an exception with a return code of 0 ;
see Figure 13 on page 190. The second exception, Client is not connected (32104), was thrown
because the client attempted to disconnect when it was not connected.
Connecting to tcp://localhost:1883 with client ID SampleJavaV3_publish
reason 5
msg Not authorized to connect
loc Not authorized to connect
cause null
excep Not authorized to connect (5)
Not authorized to connect (5)
at
org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java
:28)
at
org.eclipse.paho.client.mqttv3.internal.ClientState.notifyReceivedAck(ClientState.java:885)
at org.eclipse.paho.client.mqttv3.internal.CommsReceiver.run(CommsReceiver.java:118)
at java.lang.Thread.run(Thread.java:809)
Figure 13. Exception thrown when connecting to the Eclipse Paho sample
mqxr.log contains additional output shown in Figure 13 on page 190.
The error is detected by JAAS which throws javax.security.auth.login.LoginException with
the cause No LoginModules configured for JAAS. It could be caused, as in Figure 14 on page
191, by a bad configuration name. It might also be the result of other problems JAAS has encountered
loading the JAAS configuration.
If no exception is reported by JAAS, JAAS has successfully loaded the security.jaas.JAASLogin
class named in the JAASConfig stanza.
190 Troubleshooting and Support for IBM MQ
15/06/15 13:49:28.337
AMQXR2050E: Unable to load JAAS config:MQXRWrongConfig.
The following exception occurred javax.security.auth.login.LoginException:
No LoginModules configured for MQXRWrongConfig
Figure 14. Error loading JAAS configuration
Troubleshooting multicast problems
Use this information to help you to detect and deal with multicast problems on IBM MQ.
Testing multicast applications on a non-multicast network
Use this information to learn how to test IBM MQ Multicast applications locally instead of over a multicast
network.
When developing or testing multicast applications you might not yet have a multicast enabled network. To
run the application locally, you must edit the mqclient.ini file as shown in the following example:
Edit the Interface parameter in the Multicast stanza of the MQ_DATA_PATH /mqclient.ini:
Multicast:
Interface = 127.0.0.1
where MQ_DATA_PATH is the location of the IBM MQ data directory ( /var/mqm/mqclient.ini ).
The multicast transmissions now only use the local loopback adapter.
Setting the appropriate network for multicast traffic
When developing or testing multicast applications, after testing them locally, you might want to test
them over a multicast enabled network. If the application only transmits locally, you might have to
edit the mqclient.ini file as shown later in this section. If the machine setup is using multiple
network adapters, or a virtual private network (VPN) for example, the Interface parameter in the
mqclient.ini file must be set to the address of the network adapter you want to use.
If the Multicast stanza exists in the mqclient.ini file, edit the Interface parameter as shown in
the following example:
Change:
Multicast:
Interface = 127.0.0.1
To:
Multicast:
Interface = IPAddress
where IPAddress is the IP address of the interface on which multicast traffic flows.
If there is no Multicast stanza in the mqclient.ini file, add the following example:
Multicast:
Interface = IPAddress
where IPAddress is the IP address of the interface on which multicast traffic flows.
The multicast applications now run over the multicast network.
IBM MQ troubleshooting and support 191
Multicast topic string is too long
If your IBM MQ Multicast topic string is rejected with reason code MQRC_TOPIC_STRING_ERROR, it might
be because the string is too long.
WebSphereMQ Multicast has a 255 character limit for topic strings. This limitation means that care
must be taken with the names of nodes and leaf-nodes within the tree; if the names of nodes and leaf-
nodes are too long, the topic string might exceed 255 characters and return the 2425 (0979) (RC2425):
MQRC_TOPIC_STRING_ERROR reason code. It is recommended to make topic strings as short as possible
because longer topic strings might have a detrimental effect on performance.
Multicast topic topology issues
Use these examples to understand why certain IBM MQ Multicast topic topologies are not recommended.
As was mentioned in IBM MQ Multicast topic topology, IBM MQ Multicast support requires that each
subtree has its own multicast group and data stream within the total hierarchy. Do not use a different
multicast group address for a subtree and its parent.
The classful network IP addressing scheme has designated address space for multicast address. The
full multicast range of IP address is 224.0.0.0 to 239.255.255.255, but some of these addresses
are reserved. For a list of reserved address either contact your system administrator or see https://
www.iana.org/assignments/multicast-addresses for more information. It is recommended that you use
the locally scoped multicast address in the range of 239.0.0.0 to 239.255.255.255.
Recommended multicast topic topology
This example is the same as the one from IBM MQ Multicast topic topology, and shows 2 possible
multicast data streams. Although it is a simple representation, it demonstrates the kind of situation that
IBM MQ Multicast was designed for, and is shown here to contrast the second example:
DEF COMMINFO(MC1) GRPADDR(
227.20.133.1)
DEF COMMINFO(MC2) GRPADDR(227.20.133.2)
where 227.20.133.1 and 227.20.133.2 are valid multicast addresses.
These topic definitions are used to create a topic tree as shown in the following diagram:
DEFINE TOPIC(FRUIT) TOPICSTRING('Price/FRUIT') MCAST(ENABLED) COMMINFO(MC1)
DEFINE TOPIC(FISH) TOPICSTRING('Price/FISH') MCAST(ENABLED) COMMINFO(MC2)
Each multicast communication information (COMMINFO) object represents a different stream of data
because their group addresses are different. In this example, the topic FRUIT is defined to use
COMMINFO object MC1 , and the topic FISH is defined to use COMMINFO object MC2 .
192 Troubleshooting and Support for IBM MQ
IBM MQ Multicast has a 255 character limit for topic strings. This limitation means that care must be
taken with the names of nodes and leaf-nodes within the tree; if the names of nodes and leaf-nodes
are too long, the topic string might exceed 255 characters and return the MQRC_TOPIC_STRING_ERROR
reason code.
Non-recommended multicast topic topology
This example extends the previous example by adding another topic object called ORANGES which is
defined to use another COMMINFO object definition ( MC3 ):
DEF COMMINFO(MC1) GRPADDR(227.20.133.1
)
DEF COMMINFO(MC2) GRPADDR(227.20.133.2)
DEF COMMINFO(MC3) GRPADDR(227.20.133.3)
where 227.20.133.1, 227.20.133.2, and 227.20.133.3 are valid multicast addresses.
These topic definitions are used to create a topic tree as shown in the following diagram:
DEFINE TOPIC(FRUIT) TOPICSTRING('Price/FRUIT') MCAST(ENABLED) COMMINFO(MC1)
DEFINE TOPIC(FISH) TOPICSTRING('Price/FISH') MCAST(ENABLED) COMMINFO(MC2)
DEFINE TOPIC(ORANGES) TOPICSTRING('Price/FRUIT/ORANGES') MCAST(ENABLED) COMMINFO(MC3)
While this kind of multicast topology is possible to create, it is not recommended because applications
might not receive the data that they were expecting.
An application subscribing on 'Price/FRUIT/#' receives multicast transmission on the COMMINFO MC1
group address. The application expects to receive publications on all topics at or below that point in the
topic tree.
However, the messages created by an application publishing on 'Price/FRUIT/ORANGES/Small' are
not received by the subscriber because the messages are sent on the group address of COMMINFO MC3.
IBM MQ troubleshooting and support 193
Troubleshooting queue manager problems
Use the advice given here to help you to resolve common problems that can arise when you use queue
managers.
Queue manager unavailable error
• Scenario: You receive a queue manager unavailable error.
• Explanation: Configuration file errors typically prevent queue managers from being found, and result in
queue manager unavailable errors. On Windows, problems in the qm.ini file can cause queue manager
unavailable errors when a queue manager is started.
• Solution: Ensure that the configuration files exist, and that the IBM MQ configuration file references the
correct queue manager and log directories. On Windows, check for problems in the qm.ini file.
IBM MQ coordinating with Db2 as the resource manager error
• Scenario: You start your queue managers from the IBM MQ Explorer and are having problems when
coordinating Db2. When you check your queue manager error logs, you see an error like the one shown
in the following example:
23/09/2008 15:43:54 - Process(5508.1) User(MUSR_MQADMIN) Program(amqzxma0.exe)
Host(HOST_1) Installation(Installation1)
VMRF(7.1.0.0) QMgr(A.B.C)
AMQ7604: The XA resource manager 'DB2 MQBankDB database' was not available when called
for xa_open. The queue manager is continuing without this resource manager.
• Explanation: The user ID (default name is MUSR_MQADMIN) which runs the IBM MQ Service
process amqsvc.exe is still running with an access token which does not contain group membership
information for the group DB2USERS.
• Solution: After you have ensured that the IBM MQ Service user ID is a member of DB2USERS, use the
following sequence of commands:
1.Stop the service.
2.Stop any other processes running under the same user ID.
3.Restart these processes.
Rebooting the machine would ensure the previous steps, but is not necessary.
Troubleshooting queue manager cluster problems
Use the checklist given here, and the advice given in the subtopics, to help you to detect and deal with
problems when you use queue manager clusters.
Before you begin
If your problems relate to publish/subscribe messaging using clusters, rather than to clustering in
general, see “Routing for publish/subscribe clusters: Notes on behavior” on page 72.
Procedure
• Check that your cluster channels are all paired.
Each cluster sender channel connects to a cluster receiver channel of the same name. If there is no
local cluster receiver channel with the same name as the cluster sender channel on the remote queue
manager, then it won't work.
• Check that your channels are running. No channels should be in RETRYING state permanently.
Show which channels are running using the following command:
runmqsc display chstatus(*)
194 Troubleshooting and Support for IBM MQ
If you have channels in RETRYING state, there might be an error in the channel definition, or the
remote queue manager might not be running. While channels are in this state, messages are likely
to build up on transmit queues. If channels to full repositories are in this state, then the definitions
of cluster objects (for example queues and queue managers) become out-of-date and inconsistent
across the cluster.
• Check that no channels are in STOPPED state.
Channels go into STOPPED state when you stop them manually. Channels that are stopped can be
restarted using the following command:
runmqsc start channel(xyz)
A clustered queue manager auto-defines cluster channels to other queue managers in a cluster,
as required. These auto-defined cluster channels start automatically as needed by the queue
manager, unless they were previously stopped manually. If an auto-defined cluster channel is stopped
manually , the queue manager remembers that it was manually stopped and does not start it
automatically in the future. If you need to stop a channel, either remember to restart it again at a
convenient time, or else issue the following command:
stop channel(xyz) status(inactive)
The status(inactive) option allows the queue manager to restart the channel at a later date if it
needs to do so.
Important: If a channel has STOPPED because it has run out of retries, restarting the queue manager
does not bring the channel out of its STOPPED state.
• Check that all queue managers in the cluster are aware of all the full repositories.
You can do this using the following command:
runmqsc display clusqmgr(*) qmtype
Partial repositories might not be aware of all other partial repositories. All full repositories should be
aware of all queue managers in the cluster. If cluster queue managers are missing, this might mean
that certain channels are not running correctly.
• Check that every queue manager (full repositories and partial repositories) in the cluster has a
manually defined cluster receiver channel running and is defined in the correct cluster.
To see which other queue managers are talking to a cluster receiver channel, use the following
command:
runmqsc display chstaus(*) rqmname
Check that each manually defined cluster receiver has a conname parameter defined to be
ipaddress(port). Without a correct connection name, the other queue manager does not know
the connection details to use when connecting back.
• Check that every partial repository has a manually defined cluster sender channel running to a full
repository, and defined in the correct cluster.
The cluster sender channel name must match the cluster receiver channel name on the other queue
manager.
• Check that every full repository has a manually defined cluster sender channel running to every other
full repository, and defined in the correct cluster.
The cluster sender channel name must match the cluster receiver channel name on the other queue
manager. Each full repository does not keep a record of what other full repositories are in the cluster.
It assumes that any queue manager to which it has a manually defined cluster sender channel is a full
repository.
IBM MQ troubleshooting and support 195
• Check the dead letter queue.
Messages that the queue manager cannot deliver are sent to the dead letter queue.
• Check that, for each partial repository queue manager, you have defined a single cluster-sender
channel to one of the full repository queue managers.
This channel acts as a "bootstrap" channel through which the partial repository queue manager
initially joins the cluster.
• Check that the intended full repository queue managers are actual full repositories and are in the
correct cluster.
You can do this using the following command:
runmqsc display qmgr repos reposnl
• Check that messages are not building up on transmit queues or system queues.
You can check transmit queues using the following command:
runmqsc display ql(*) curdepth where (usage eq xmitq)
You can check system queues using the following command:
display ql(system*) curdepth
Related tasks
“Collecting information for IBM MQ clustering problems” on page 319
If you need assistance from IBM Support to resolve a problem when an IBM MQ queue manager
has a problem with cluster queues, topics or channels on Multiplatforms, you first need to collect
troubleshooting information to send to IBM Support to help find a solution.
Configuring a queue manager cluster
“Making initial checks” on page 6
There are some initial checks that you can make that may provide answers to common problems that you
might have.
“Making initial checks on z/OS” on page 51
Before you start problem determination in detail on z/OS, consider whether there is an obvious cause of
the problem, or an area of investigation that is likely to give useful results. This approach to diagnosis can
often save a lot of work by highlighting a simple error, or by narrowing down the range of possibilities.