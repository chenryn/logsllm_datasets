### Public and Private Database Vulnerabilities

In this section, we provide a detailed comparison of our findings with those reported in [31] for public database attacks, as presented in Appendix B.1. We then introduce our new private database attacks on the same applications.

#### Summary of Findings
Our analysis of the applications originally examined for public database attacks reveals that all three combinations of public and private attacks are possible:
- Public attacks alone
- Private attacks alone
- Combined public and private attacks

Combining public and private vulnerabilities can lead to more sophisticated and complex attacks.

### Table 2: Database Vulnerabilities in Representative Apps

| ID | App Name | Version | SDK Min | SDK Target | Public | Private |
|----|----------|---------|---------|------------|--------|---------|
| 1  | Pansi SMS | 3.6.0 + | 13      | 8          |       |        |
| 2  | Youni SMS | 4.6.7 + | 11      | 5          |       |        |
| 3  | mOffice - Outlook sync | 3.7.7 + | 7        | 8        |       |        |
| 4  | Shady SMS 4.0 | 3.38 + | 9       | 7.3.32 +  |       |        |
| 5  | PAYG | 1.5.0   | 7.0.3 + | 2.0.90 +   |       |        |
| 6  | 360 Kouxin | 4.1.0 + | 10      | 6.5.1 +    |       |        |
| 7  | GO SMS Pro | 7.0.32 + | 11.5.3 + | 2.2 HD    |       |        |
| 8  | Messenger WithYou | 9.0.0 + | 10      | 6.5.1 +    |       |        |
| 9  | Nimbuzz Messenger | 1.5.0   | 7.0.3 + | 2.0.90 +   |       |        |
| 10 | MiTalk Messenger | 3.38 + | 9       | 7.3.32 +  |       |        |
| 11 | Youdao Dictionary | 6.5.1 + | 10      | 6.5.1 +    |       |        |
| 12 | GO FBWidget | 7.0.32 + | 11.5.3 + | 2.2 HD    |       |        |
| 13 | Netease Weibo | 9.0.0 + | 10      | 6.5.1 +    |       |        |
| 14 | Dolphin Browser | 2.4.0 + | 11.5.3 + | 2.2 HD    |       |        |
| 15 | Maxthon Android Web Browser | 2.4.0 + | 11.5.3 + | 2.2 HD    |       |        |
| 16 | Boat Browser Mini | 4.5.8.2000 + | 3.0.2 | 7.0 + Personal Ed. |       |        |
| 17 | Mobile Security | 4.5.8.2000 + | 3.0.2 | 7.0 + Personal Ed. |       |        |
| 18 | Droid Call Filter | 1.0.23 | 4.5.0 + | 2.1       |       |        |
| 19 | Tc Assistant | 6.3.1 + | 6.1.2 + | 7.0 + Personal Ed. |       |        |
| 20 | GO TwiWidget | 6.3.1 + | 6.1.2 + | 7.0 + Personal Ed. |       |        |
| 21 | Sina Weibo | 6.3.1 + | 6.1.2 + | 7.0 + Personal Ed. |       |        |
| 22 | Tencent WBlog | 6.3.1 + | 6.1.2 + | 7.0 + Personal Ed. |       |        |

**Legend:**
- "" indicates the presence of a vulnerability.
- A blank cell indicates the vulnerability has been fixed.
- "-" indicates that dynamic testing could not be performed due to runtime issues (e.g., requiring a valid phone number).

### Related Work

In recent years, various aspects of Android security have been extensively studied. While many works aim to detect vulnerabilities in benign apps [11, 7, 13, 1, 21], few focus on exploiting them. Database vulnerabilities, which can compromise system security, have been partially explored in [31, 21].

#### ContentScope [31]
ContentScope is the first work to address public database vulnerabilities in Android apps. It identifies vulnerabilities in apps built for Android SDK 16 or lower, where content provider components are by default accessible to other apps. Our work extends this by considering private database vulnerabilities and corresponding attacks. We also focus on apps targeting SDK 17 and higher, where the default assumption has been changed to reduce public database attacks. We analyze representative apps from [31] under their lower SDK assumption to compare our results with ContentScope. Additionally, we propose a framework for analyzing both public and private database vulnerabilities, with a key component being the modeling of URI semantics and other Android libraries to aid symbolic execution.

#### CHEX [21]
CHEX is an information flow analysis tool designed to detect component hijacking vulnerabilities in benign Android apps. These attacks occur when an unauthorized app issues requests to one or more exported components in a vulnerable app, seeking to read or write sensitive data. CHEX reports potential vulnerabilities related to private databases. In contrast, our analysis system goes further by generating working exploits for detected vulnerabilities.

#### Privacy Leakage and Privilege Escalation
Privacy leakage and privilege escalation are broader classes of attacks that have attracted significant research attention. Privacy leakage can result from over-privileged malware or privilege escalation due to application bugs or system design flaws. Several systems have been proposed to mitigate these attacks [24, 10, 2, 22, 15, 30, 28, 16]. Patching and repackaging works [30, 28, 16] are closest to our mitigation approach. Jinseong et al. [16] improve coarse-grained policies by banning specific data values from reaching security-critical methods. However, the analysis used to determine such data values may not be precise enough. Our approach uses precise analysis, such as symbolic execution, and modifies only the manifest file to enforce fine-grained policies, whereas [16] requires modifying the app's source code.

#### URI and Intent Operations
Android apps often use libraries like `android.net.Uri` for structured data operations. Octeau et al. [23] propose a constant propagation framework to resolve fields of URI and Intent objects at a given program point. Our system synthesizes URIs and Intents to drive program execution along specific paths and handles important operations like `UriMatcher.match(Uri)` and `Uri.compareTo(Uri)`, modeled using Symbolic Finite Transducers (SFTs).

#### String Manipulation
There is a body of work supporting static string manipulation for different applications [25, 8, 17, 26]. We transform utility methods of URI classes into SFTs [14, 27] and leverage the CVC4 SMT solver [20]. Another line of research [8, 19, 29] determines the values of string expressions at a given program point. Our approach differs as we generate strings to drive execution paths to reach a program point. The Java String Analyzer [8] models string operation flow graphs as context-free grammars, over-approximated to finite state automata. We use existing SMT solvers that support both numeric and string constraints.

### Conclusion

In this paper, we study database attacks targeting Android apps and propose an analyzer to find and confirm database vulnerabilities. We demonstrate that many popular Android apps from the Google Play store have both public and private database vulnerabilities, confirmed by generating exploits. Even apps previously reported as having public database vulnerabilities can still be vulnerable or exploited in new ways. We also propose an extension for Android to mitigate public and private database attacks. This extension requires only modifications to the manifest file, protecting apps without altering the vulnerable app code.

### References

[1] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. L. Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. In PLDI, 2014.
[2] M. Backes, S. Gerling, C. Hammer, M. Maﬀei, and P. Styp-Rekowsky. AppGuard – Enforcing User Requirements on Android Apps. In TACAS, 2013.
[3] T. Berners-Lee, R. Fielding, U. Irvine, and L. Masinter. Uniform Resource Identiﬁers (URI), 1998. RFC 2396.
[4] P. Boonstoppel, C. Cadar, and D. R. Engler. RWset: Attacking Path Explosion in Constraint-Based Test Generation. In TACAS, 2008.
[5] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs. In USENIX, 2008.
[6] Z. Cai and R. H. C. Yap. Inferring the detection logic and evaluating the effectiveness of Android anti-virus apps. In CODASPY, 2016.
[7] P. P. Chan, L. C. Hui, and S. M. Yiu. DroidChecker: Analyzing Android Applications for Capability Leak. In WiSec, 2012.
[8] A. S. Christensen, A. Møller, and M. I. Schwartzbach. Precise Analysis of String Expressions. In SAS, 2003.
[9] L. Davi, A. Dmitrienko, A. Sadeghi, and M. Winandy. Privilege Escalation Attacks on Android. In ISC, 2010.
[10] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire: Lightweight Provenance for Smart Phone Operating Systems. In USENIX, 2011.
[11] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of Capability Leaks in Stock Android Smartphones. In NDSS, 2012.
[12] B. Hassanshahi, Y. Jia, R. H. C. Yap, P. Saxena, and Z. Liang. Web-to-Application Injection Attacks on Android: Characterization and Detection. In ESORICS, 2015.
[13] J. Hoﬀmann, M. Ussath, T. Holz, and M. Spreitzenbarth. Slicing Droids: Program Slicing for Smali Code. In SAC, 2013.
[14] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and M. Veanes. Fast and Precise Sanitizer Analysis with BEK. In USENIX, 2011.
[15] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These Aren’t the Droids You’re Looking for: Retrofitting Android to Protect Data from Imperious Applications. In CCS, 2011.
[16] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, and T. Millstein. Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications. In SPSM, 2012.
[17] A. Kiezun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D. Ernst. HAMPI: A Solver for String Constraints. In ISSTA, 2009.
[18] P. Lam, E. Bodden, L. Hendren, and T. U. Darmstadt. The Soot Framework for Java Program Analysis: A Retrospective. In CETUS, 2011.
[19] D. Li, Y. Lyu, M. Wan, and W. G. J. Halfond. String Analysis for Java and Android Applications. In ESEC/FSE, 2015.
[20] T. Liang, A. Reynolds, C. Tinelli, C. Barrett, and M. Deters. A DPLL(T) Theory Solver for a Theory of Strings and Regular Expressions. In CAV, 2014.
[21] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In CCS, 2012.
[22] M. Nauman, S. Khan, and X. Zhang. Apex: Extending Android Permission Model and Enforcement with User-defined Runtime Constraints. In ASIACCS, 2010.
[23] D. Octeau, D. Luchaup, M. Dering, S. Jha, and P. McDaniel. Composite Constant Propagation: Application to Android Inter-Component Communication Analysis. In ICSE, 2015.
[24] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. Semantically Rich Application-Centric Security in Android. In ACSAC, 2009.
[25] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song. A Symbolic Execution Framework for JavaScript. In S&P, 2010.
[26] M.-T. Trinh, D.-H. Chu, and J. Jaﬀar. S3: A Symbolic String Solver for Vulnerability Detection in Web Applications. In CCS, 2014.
[27] M. Veanes, P. Hooimeijer, B. Livshits, D. Molnar, and N. Bjorner. Symbolic Finite State Transducers: Algorithms and Applications. In CIAA, 2012.
[28] R. Xu, H. Saïdi, and R. Anderson. Aurasium: Practical Policy Enforcement for Android Applications. In USENIX, 2012.
[29] F. Yu, T. Bultan, M. Cova, and O. H. Ibarra. Symbolic String Verification: An Automata-Based Approach. In MCS, 2008.
[30] M. Zhang and H. Yin. AppSealer: Automatic Generation of Vulnerability-Specific Patches for Preventing Component Hijacking Attacks in Android Applications. In NDSS, 2014.
[31] Y. Zhou and X. Jiang. Detecting Passive Content Leaks and Pollution in Android Applications. In NDSS, 2013.