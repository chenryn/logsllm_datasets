### AMQ9208: Error on Receive from Host (Address)

**Error Message:**
AMQ9208: Error on receive from host `host-name` (address).

**Solution:**
- Ensure that the value of `SSLPEER` set in the client matches the distinguished name of the certificate.
- If using a non-FIPS cipher with FIPS enabled on the client, use a FIPS-enabled cipher or disable FIPS on the client.

**Output:**
- Check if the queue manager is started.
- If running in client mode, ensure there is a listener running.
- For more information, see the linked exception.

**Stack Trace:**
```java
at com.ibm.msg.client.wmq.common.internal.Reason.reasonToException(Reason.java:578)
at com.ibm.msg.client.wmq.common.internal.Reason.createException(Reason.java:214)
at com.ibm.msg.client.wmq.internal.WMQConnection.getConnectOptions(WMQConnection.java:1423)
at com.ibm.msg.client.wmq.internal.WMQConnection.<init>(WMQConnection.java:339)
at com.ibm.msg.client.wmq.factories.WMQConnectionFactory.createV7ProviderConnection(WMQConnectionFactory.java:6865)
at com.ibm.msg.client.wmq.factories.WMQConnectionFactory.createProviderConnection(WMQConnectionFactory.java:6221)
at com.ibm.msg.client.jms.admin.JmsConnectionFactoryImpl._createConnection(JmsConnectionFactoryImpl.java:285)
at com.ibm.msg.client.jms.admin.JmsConnectionFactoryImpl.createConnection(JmsConnectionFactoryImpl.java:233)
at com.ibm.mq.jms.MQConnectionFactory.createCommonConnection(MQConnectionFactory.java:6016)
at com.ibm.mq.jms.MQConnectionFactory.createConnection(MQConnectionFactory.java:6041)
at tests.SimpleSSLConn.runTest(SimpleSSLConn.java:46)
at tests.SimpleSSLConn.main(SimpleSSLConn.java:26)
```

**Caused by:**
```java
com.ibm.mq.MQException: JMSCMQ0001: IBM MQ call failed with compcode '2' ('MQCC_FAILED') reason '2400' ('MQRC_UNSUPPORTED_CIPHER_SUITE').
at com.ibm.msg.client.wmq.common.internal.Reason.createException(Reason.java:202)
```

**Queue Manager Error Logs:**
- Not applicable.

**Solution:**
- Use a FIPS-enabled cipher, or disable FIPS on the client.

### Using a Non-FIPS Cipher with FIPS Enabled on the Queue Manager

**Output:**
- Caused by:
  ```java
  com.ibm.mq.jmqi.JmqiException: CC=2;RC=2397;AMQ9771: SSL handshake failed.
  [1=javax.net.ssl.SSLHandshakeException[Received fatal alert: handshake_failure],
  3=localhost/127.0.0.1:1418 (localhost),4=SSLSocket.startHandshake,5=default]
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection.protocolConnect(RemoteTCPConnection.java:1173)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.connect(RemoteConnection.java:835)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionSpecification.getSessionFromNewConnection(RemoteConnectionSpecification.java:409)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionSpecification.getSession(RemoteConnectionSpecification.java:305)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionPool.getSession(RemoteConnectionPool.java:146)
  at com.ibm.mq.jmqi.remote.api.RemoteFAP.jmqiConnect(RemoteFAP.java:1868)
  ... 12 more
  ```
- Caused by:
  ```java
  javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
  at com.ibm.jsse2.j.a(j.java:13)
  at com.ibm.jsse2.j.a(j.java:18)
  at com.ibm.jsse2.qc.b(qc.java:601)
  at com.ibm.jsse2.qc.a(qc.java:100)
  at com.ibm.jsse2.qc.h(qc.java:185)
  at com.ibm.jsse2.qc.a(qc.java:566)
  at com.ibm.jsse2.qc.startHandshake(qc.java:120)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1142)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1134)
  at java.security.AccessController.doPrivileged(AccessController.java:229)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection.protocolConnect(RemoteTCPConnection.java:1134)
  ```

**Queue Manager Error Logs:**
- AMQ9616: The CipherSpec proposed is not enabled on the server.

**Solution:**
- Use a FIPS-enabled cipher, or disable FIPS on the queue manager.

### Cannot Find Client Keystore Using IBM JRE

**Output:**
- Caused by:
  ```java
  com.ibm.mq.jmqi.JmqiException: CC=2;RC=2059;AMQ9204: Connection to host 'localhost(1418)' rejected.
  [1=com.ibm.mq.jmqi.JmqiException[CC=2;RC=2059;AMQ9503: Channel negotiation failed. [3=SYSTEM.DEF.SVRCONN]],3=localhost(1418),5=RemoteConnection.analyseErrorSegment]
  at com.ibm.mq.jmqi.remote.api.RemoteFAP.jmqiConnect(RemoteFAP.java:2450)
  at com.ibm.mq.jmqi.remote.api.RemoteFAP.jmqiConnect(RemoteFAP.java:1396)
  at com.ibm.mq.ese.jmqi.InterceptedJmqiImpl.jmqiConnect(InterceptedJmqiImpl.java:376)
  at com.ibm.mq.ese.jmqi.ESEJMQI.jmqiConnect(ESEJMQI.java:561)
  at com.ibm.msg.client.wmq.internal.WMQConnection.<init>(WMQConnection.java:342)
  ... 8 more
  ```
- Caused by:
  ```java
  com.ibm.mq.jmqi.JmqiException: CC=2;RC=2059;AMQ9503: Channel negotiation failed. [3=SYSTEM.DEF.SVRCONN]
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.analyseErrorSegment(RemoteConnection.java:4176)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.receiveTSH(RemoteConnection.java:2969)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.initSess(RemoteConnection.java:1180)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.connect(RemoteConnection.java:838)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionSpecification.getSessionFromNewConnection(RemoteConnectionSpecification.java:409)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionSpecification.getSession(RemoteConnectionSpecification.java:305)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionPool.getSession(RemoteConnectionPool.java:146)
  at com.ibm.mq.jmqi.remote.api.RemoteFAP.jmqiConnect(RemoteFAP.java:1868)
  ```

**Queue Manager Error Logs:**
- AMQ9637: Channel is lacking a certificate.

**Solution:**
- Ensure the JVM property `javax.net.ssl.keyStore` specifies the location of a valid keystore.

### Cannot Find Client Keystore Using Oracle JRE

**Output:**
- Caused by:
  ```java
  java.security.PrivilegedActionException: java.io.FileNotFoundException: C:\filepath\wrongkey.jks (The system cannot find the file specified)
  at java.security.AccessController.doPrivileged(Native Method)
  at sun.security.ssl.SSLContextImpl$DefaultSSLContext.getDefaultKeyManager(Unknown Source)
  at sun.security.ssl.SSLContextImpl$DefaultSSLContext.<init>(Unknown Source)
  at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
  at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
  at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
  at java.lang.reflect.Constructor.newInstance(Unknown Source)
  at java.lang.Class.newInstance0(Unknown Source)
  at java.lang.Class.newInstance(Unknown Source)
  ... 28 more
  ```
- Caused by:
  ```java
  java.io.FileNotFoundException: C:\filepath\wrongkey.jks (The system cannot find the file specified)
  at java.io.FileInputStream.open(Native Method)
  at java.io.FileInputStream.<init>(Unknown Source)
  at java.io.FileInputStream.<init>(Unknown Source)
  at sun.security.ssl.SSLContextImpl$DefaultSSLContext$2.run(Unknown Source)
  at sun.security.ssl.SSLContextImpl$DefaultSSLContext$2.run(Unknown Source)
  ```

**Queue Manager Error Logs:**
- AMQ9637: Channel is lacking a certificate.

**Solution:**
- Ensure the JVM property `javax.net.ssl.keyStore` specifies the location of a valid keystore.

### Keystore Password Error - IBM JRE

**Output:**
- Caused by:
  ```java
  com.ibm.mq.jmqi.JmqiException: CC=2;RC=2059;AMQ9503: Channel negotiation failed. [3=SYSTEM.DEF.SVRCONN]
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.analyseErrorSegment(RemoteConnection.java:4176)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.receiveTSH(RemoteConnection.java:2969)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.initSess(RemoteConnection.java:1180)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnection.connect(RemoteConnection.java:838)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionSpecification.getSessionFromNewConnection(RemoteConnectionSpecification.java:409)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionSpecification.getSession(RemoteConnectionSpecification.java:305)
  at com.ibm.mq.jmqi.remote.impl.RemoteConnectionPool.getSession(RemoteConnectionPool.java:146)
  at com.ibm.mq.jmqi.remote.api.RemoteFAP.jmqiConnect(RemoteFAP.java:1868)
  ```

**Queue Manager Error Logs:**
- AMQ9637: Channel is lacking a certificate.

**Solution:**
- Ensure that the value of the JVM property `javax.net.ssl.keyStorePassword` specifies the password for the keystore specified by `javax.net.ssl.keyStore`.

### Truststore Password Error - IBM JRE

**Output:**
- Caused by:
  ```java
  javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No X509TrustManager implementation available
  at com.ibm.jsse2.j.a(j.java:13)
  at com.ibm.jsse2.qc.a(qc.java:204)
  at com.ibm.jsse2.ab.a(ab.java:342)
  at com.ibm.jsse2.ab.a(ab.java:222)
  at com.ibm.jsse2.bb.a(bb.java:157)
  at com.ibm.jsse2.bb.a(bb.java:492)
  at com.ibm.jsse2.ab.r(ab.java:529)
  at com.ibm.jsse2.ab.a(ab.java:332)
  at com.ibm.jsse2.qc.a(qc.java:435)
  at com.ibm.jsse2.qc.h(qc.java:185)
  at com.ibm.jsse2.qc.a(qc.java:566)
  at com.ibm.jsse2.qc.startHandshake(qc.java:120)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1142)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1134)
  at java.security.AccessController.doPrivileged(AccessController.java:229)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection.protocolConnect(RemoteTCPConnection.java:1134)
  ... 17 more
  ```
- Caused by:
  ```java
  java.security.cert.CertificateException: No X509TrustManager implementation available
  at com.ibm.jsse2.xc.checkServerTrusted(xc.java:2)
  at com.ibm.jsse2.bb.a(bb.java:246)
  ```

**Queue Manager Error Logs:**
- AMQ9665: SSL connection closed by remote end of channel '????'.

**Solution:**
- Ensure that the value of the JVM property `javax.net.ssl.trustStorePassword` specifies the password for the keystore specified by `javax.net.ssl.trustStore`.

### Cannot Find or Open Queue Manager Key Database

**Output:**
- Caused by:
  ```java
  javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake
  at com.ibm.jsse2.qc.a(qc.java:158)
  at com.ibm.jsse2.qc.h(qc.java:185)
  at com.ibm.jsse2.qc.a(qc.java:566)
  at com.ibm.jsse2.qc.startHandshake(qc.java:120)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1142)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1134)
  at java.security.AccessController.doPrivileged(AccessController.java:229)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection.protocolConnect(RemoteTCPConnection.java:1134)
  ... 17 more
  ```
- Caused by:
  ```java
  java.io.EOFException: SSL peer shut down incorrectly
  at com.ibm.jsse2.a.a(a.java:19)
  at com.ibm.jsse2.qc.a(qc.java:207)
  ```

**Queue Manager Error Logs:**
- AMQ9657: The key repository could not be opened (channel '????').

**Solution:**
- Ensure that the key repository you specify exists and that its permissions are such that the IBM MQ process involved can read from it.

### Cannot Find or Use Queue Manager Key Database Password Stash File

**Output:**
- Caused by:
  ```java
  javax.net.ssl.SSLHandshakeException: Remote host closed connection during handshake
  at com.ibm.jsse2.qc.a(qc.java:158)
  at com.ibm.jsse2.qc.h(qc.java:185)
  at com.ibm.jsse2.qc.a(qc.java:566)
  at com.ibm.jsse2.qc.startHandshake(qc.java:120)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1142)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection$6.run(RemoteTCPConnection.java:1134)
  at java.security.AccessController.doPrivileged(AccessController.java:229)
  at com.ibm.mq.jmqi.remote.impl.RemoteTCPConnection.protocolConnect(RemoteTCPConnection.java:1134)
  ... 17 more
  ```
- Caused by:
  ```java
  java.io.EOFException: SSL peer shut down incorrectly
  at com.ibm.jsse2.a.a(a.java:19)
  at com.ibm.jsse2.qc.a(qc.java:207)
  ```

**Queue Manager Error Logs:**
- AMQ9660: SSL key repository: password stash file absent or unusable.

**Solution:**
- Ensure that a password stash file has been associated with the key database file in the same directory, and that the user ID, under which IBM MQ is running, has read access to both files.

### Troubleshooting WCF Custom Channel for IBM MQ Problems

**Troubleshooting Information:**
- This section provides troubleshooting information to help you solve problems with running Microsoft Windows Communication Foundation (WCF) custom channel for IBM MQ applications.

**Related Concepts:**
- "FFST: WCF XMS First Failure Support Technology" on page 374
- You can collect detailed information about what various parts of the IBM MQ code is doing by using IBM MQ trace. XMS FFST has its own configuration and output files for the WCF custom channel.

**Related Tasks:**
- "Tracing the WCF custom channel for IBM MQ" on page 467
- You can use IBM MQ trace to collect detailed information about what various parts of the IBM MQ code is doing. When using Windows Communication Foundation (WCF), a separate trace output is generated for the Microsoft Windows Communication Foundation (WCF) custom channel trace integrated with the Microsoft WCF infrastructure trace.
- "Contacting IBM Support" on page 301
- If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and other news.

**Developing Microsoft Windows Communication Foundation Applications with IBM MQ**

**WCF Custom Channel Exception Hierarchy:**
- The exceptions types thrown by the custom channel are consistent with WCF and are typically a `TimeoutException` or `CommunicationException` (or a subclass of `CommunicationException`). Further details of the error condition, where available, are provided using linked or inner exceptions.

**SOAP/JMS Interface:**
- The following exceptions are typical examples, and each layer in the architecture of the channel contributes an additional linked exception, for example, `CommunicationsException` has a linked `XMSException`, which has a linked `MQException`:
  1. `System.ServiceModel.CommunicationsException`
  2. `IBM.XMS.XMSException`
  3. `IBM.WMQ.MQException`

- Key information is captured and provided in the data collection of the highest `CommunicationException` in the hierarchy. This capture and provision of data prevents the need for the applications to link to each layer in the architecture of the channel in order to interrogate the linked exceptions, and any additional information they might contain. The following key names are defined:
  - `IBM.XMS.WCF.ErrorCode`: The error message code of the current custom channel exception.
  - `IBM.XMS.ErrorCode`: The error message of the first XMS exception in the stack.
  - `IBM.WMQ.ReasonCode`: The underlying IBM MQ reason code.
  - `IBM.WMQ.CompletionCode`: The underlying IBM MQ completion code.

**Non-SOAP/Non-JMS Interface:**
- The following exceptions are typical examples, and each layer in the architecture of the channel contributes an additional linked exception, for example, `CommunicationsException` has a linked `MQException`:
  1. `System.ServiceModel.CommunicationsException`
  2. `IBM.WMQ.MQException`

- Key information is captured and provided in the data collection of the highest `CommunicationException` in the hierarchy. This capture and provision of data prevents the need for the applications to link to each layer in the architecture of the channel in order to interrogate the linked exceptions, and any additional information they might contain. The following key names are defined:
  - `IBM.WMQ.WCF.ErrorCode`: The error message code of the current custom channel exception.
  - `IBM.WMQ.ReasonCode`: The underlying IBM MQ reason code.
  - `IBM.WMQ.CompletionCode`: The underlying IBM MQ completion code.

**WCF Version Information:**
- WCF version information aids with problem determination and is included in the assembly metadata of the custom channel.

**Retrieving IBM MQ Custom Channel for WCF Version Metadata:**
- The version metadata can be retrieved in one of three ways:
  - Using the IBM MQ utility `dspmver`.
  - Using the Windows Explorer properties dialog: In the Windows Explorer, right-click `IBM.XMS.WCF.dll` > Properties > Version.
  - From the header information of any of the channels FFST or trace files. For more information about the FFST header information, see: "FFST: WCF XMS First Failure Support Technology" on page 374.

**WCF Hints and Tips:**
- The following hints and tips are in no significant order and might be added to when new versions of the documentation are released. They are subjects that might save you time if they are relevant to the work that you are doing.

**Externalizing Exceptions from the WCF Service Host:**
- For services hosted using the WCF service host, any unhandled exceptions thrown by the service, WCF internals, or channel stack are not externalized by default. To be informed of these exceptions, an error handler must be registered.

**Example of Defining the Error Handler Service Behavior:**
```java
using System.ServiceModel.Dispatcher;
using System.Collections.ObjectModel;

public class ErrorHandlerBehaviorAttribute : Attribute, IServiceBehavior, IErrorHandler
{
    // Implementation details
}
```

This comprehensive guide should help you troubleshoot and resolve common issues related to IBM MQ and WCF custom channels.