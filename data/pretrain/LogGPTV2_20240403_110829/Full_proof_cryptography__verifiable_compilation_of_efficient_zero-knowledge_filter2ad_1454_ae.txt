In par-
ticular, the reference implementation uses a minimum num-
ber of statements and local variables, in exchange for more
elaborate expressions. For example, expressions in the ref-
erence implementation pack program variables into product
data types, and contain conditional expressions in order to
eliminate the need for if-then-else statements.
3. The ZK-compiler implementation may rearrange algebraic
expressions to enable the generation of optimized implemen-
tations by the lower-level code generators or back-ends.
Listing 2 shows an example observational equivalence proof goal
as it appears in CertiCrypt, extracted from the deniable authenti-
cation example included in the next section. The reference and
optimized implementations sit at the bottom and top, respectively.
496These differences between the two implementations that we have
described above are clearly visible in the code.
Listing 2: Equivalence proof goal in CertiCrypt.
EqObs {x , w} { r , s t , x ,w}
[ i f
I s L (w)
t h e n [
r 1
← Gs ;
$
t 1 ← [ g ]
t 2 ← [ h ]
[
e l s e
c1
← c s ;
$
t 1 ← [ g ]
F s t
t 2 ← [ h ]
[ ^H]
[ ^H]
( [ G t o _ n a t ]
( [ G t o _ n a t ]
r 1 ) ;
r 1 )
]
s1
← Gs ;
$
[ ^H]
( F s t _x )
[ ^H]
( [ G t o _ n a t ]
s1 )
[ / H]
[ ^H]
( [ c t o _ n a t ] c1 ) ;
( [ G t o _ n a t ]
s1 )
[ / H]
Snd ( F s t _x )
[ ^H]
( [ c t o _ n a t ] c1 )
] ;
I f
! I s L (w)
← Gs ;
r 2
$
[
e l s e
c2
← c s ;
$
t 3 ← [ g ]
t h e n [
t 3 ← [ g ]
[ ^H]
( [ G t o _ n a t ]
r 2 )
]
s2
← Gs ;
$
[ ^H]
( [ G t o _ n a t ]
s2 )
[ / H]
Snd _x [ ^H]
( [ c t o _ n a t ] c2 )
] ;
r ← ( ( t 1 |
s t ← IF I s L (w) THEN ( c2 | ( r 1 | s2 ) )
ELSE ( c1 | ( s1 | r 2 ) ) ;
t 3 ) ;
t 2 )
|
]
[ s t
← E . Dprod c s
$
( E . Dprod Gs Gs ) ;
r ← IF I s L (w) THEN
( [ p h i ] F s t
( Snd s t )
[ p s i ] Snd ( Snd s t )
Snd _x [ ^H]
|
[ / H]
( [ c t o _ n a t ]
( F s t
s t ) ) )
ELSE
( ( F s t
( [ p h i ] F s t
( Snd s t ) )
[ / H]
[ ^H]
( F s t _x )
F s t
Snd ( [ p h i ] F s t
Snd ( F s t _x )
[ p s i ] Snd ( Snd s t )
[ ^H]
( [ c t o _ n a t ]
)
]
( F s t
s t ) ) )
|
( [ c t o _ n a t ]
( F s t
s t ) )
|
( Snd s t ) )
[ / H]
Pleasingly, our automation approach performed well in handling
such equivalence proofs, both for this example and for the ones
described in §7. Speciﬁcally, we have found that tactics already
implemented in CertiCrypt are ideally suited to reduce proof goals
as the one in Listing 2 to lower-level veriﬁcation conditions over the
semantics of operators used to implement the algorithms. Thanks
to this, the problem of automation becomes one of constructing
Coq tactics that can solve these lower level goals. To do this, we
combine the powerful decision procedures ring and omega built
into Coq with customized tactics that handle patterns observed in
a comprehensive set of practical examples.
Combining the results. Once the equivalence lemmas above are es-
tablished, generic proof scripts are used to discharge the proof obli-
gations associated with completeness, HVZK, and generalized spe-
cial soundness of optimized implementations. The theorem state-
ments are identical to those in §5 for the reference implementations
produced by ZKCrypt, but their proofs are essentially different. We
rely on a general lemma stating that any given algorithms P1, P2,
V, and Vc, observationally equivalent to the respective algorithms
in a reference implementation, lead to a protocol whose transcripts
are distributed exactly as in the reference implementation.
Proving the completeness and honest veriﬁer zero knowledge
properties of the optimized protocol then amounts to arguing that
these results are directly implied by the identical distributions dis-
played by reference and optimized protocol implementations. For
the soundness property, one appeals directly to the correctness of
the optimized V2 algorithm, which implies that an accepting trace
for the optimized protocol is a valid input to the knowledge extrac-
tor that is proven to exist for the reference implementation.
7. MORE EXPERIMENTS AND RESULTS
Besides the running example presented in the previous sections,
we also tested and veriﬁed the functionality of ZKCrypt based on
a representative set of proof goals of academic and practical inter-
est. We brieﬂy report on some of these applications to illustrate
the capabilities of ZKCrypt. We provide benchmarking results in
Table 1 in terms of lines of code of the implementations output
by the compiler and veriﬁcation time of formal proofs. We note
that the formal veriﬁcation component of ZKCrypt described in
this paper was developed in a way that is totally non-intrusive to
the original CACE compiler that generates the executable imple-
mentations, and hence the efﬁciency of the generated C- and Java-
implementations remains unaffected.
Electronic Cash. Electronic payment systems realize fully digi-
tal analogues of classical cash systems involving bills and coins.
Besides high security and privacy guarantees, real-world usability
requires that they work off-line, i.e., the bank must not be required
to participate in transactions. One of the ﬁrst schemes satisfying
this condition was suggested by Brands [14]. All phases of his
scheme use ZK-PoKs as sub-protocols. For instance, when with-
drawing money from a bank account, a user has to prove its identity
by proving possession of a secret key. The respective proof goal is
given as follows:
ZPKh (u1, u2) : I = gu1
1 gu2
2 i.
Here, I, g1, g2 ∈ Z∗
p such that ord g1 = ord g2 = q, where q|(p −
1) and p, q ∈ P. The secrets u1, u2 are elements of Zq. This proof
goal can be realized by a single instance of the Σφ-protocol.
Deniable Authentication. Any Σ-protocol can be transformed into
a non-interactive protocol using the Fiat-Shamir heuristic [29]. The
idea is to substitute the veriﬁer’s ﬁrst algorithm by a cryptographic
hash function: Instead of relying on V to choose the challenge c
uniformly at random, the prover computes c itself as c ← H(r),
where r is the commitment computed in its ﬁrst step. It then com-
putes its response s as in the original protocol. Upon receiving
(r, c, s), the veriﬁer checks whether the triple is an accepting con-
versation, and whether c = H(r).3
Clearly, proofs obtained in this way are not deniable. Namely,
the veriﬁer can convince a third party that it knows the prover’s
secret by just forwarding (r, c, s). This problem can be solved by
migrating to designated veriﬁer ZK proofs: assume a public key
infrastructure, where each party deposits a public key. The prover
then shows that it either knows the secret key for its own public key,
or the secret key of the veriﬁer. The resulting authentication scheme
is deniable, as V could simulate proofs using its own secret key.
To make things concrete, we brieﬂy recap the scheme of Wang
and Song [51] here. A party A holds a secret key xA ∈ Zq, and pub-
lishes the corresponding public key yA = (y1A, y2A) = (gxA, hxA ),
where q ∈ P and g, h are elements of Z∗
p with order q. Now, au-
thenticating P towards V boils down to the following proof goal:
ZPKh (xP , xV ) : (y1P = gxP ∧ y2P = hxP ) ∨ y1V = gxVi.
As the order q of g, h is known, this proof goal can be realized
using the Σφ-protocol and Boolean compositions [25].
Ring Signatures. A ring signature scheme allows a set of parties to
sign documents on behalf of the whole group [48], without reveal-
ing the identities of the signers. Such schemes are often realized
by modifying the Fiat-Shamir transformation as follows: instead of
setting c ← H(r), the prover sets c ← H(r, m), hashing the pair
(m, r) where m is the message to be signed.
In a very basic scenario one wants to allow each member of the
group to issue signatures on behalf of the group. Let therefore be
3Currently,
the Fiat-Shamir heuristic is implemented at code-
generation, so formal veriﬁcation only covers the original protocol.
497TYPE COMPOSITIONS HLL (LOC)
23
Σφ
Electronic Cash
31
Deniable Authentication Σφ
37
Σφ
Ring Signatures
23
ΣGSP
Identity Mixer
None
And, Or
Or
And
PIL (LOC) CertiCrypt (LOC) VERIFICATION
< 2m
< 3m
< 4m
< 25m
1288
1383
1384
1515
59
89
110
134
Table 1: Benchmark results for representative applications of ZKCrypt. The ﬁrst two columns describe the type and complexity
of the protocol required to realize the proof goal. ZK, PIL and CertiCrypt denote the lines of code of the high-level input ﬁle, the
generated protocol and the formal proof. VERIFICATION denotes the duration of generating and verifying the proofs in CertiCrypt.
given a PKI containing public keys (yA, eA) ∈ Z∗
nA × Z for strong
RSA moduli nA, and let each party A hold its secret key xA sat-
isfying yA = xeA
A . For simplicity, assume further that the group
consists of only three parties. Then the proof goal is given by:
1 ∨ y2 = xe2
2 ∨ y3 = xe3
3 i.
ZPKh (x1, x2, x3) : y1 = xe1
Again, as the domain of each mapping x 7→ xei is ﬁnite, realization
is done using the Σφ-protocol and Boolean compositions [25].
Summary. Our experimental results illustrate that ZKCrypt is ﬂex-
ible enough to generate and verify implementations for a large set
of proof goals occurring in practically relevant applications. We ob-
serve that, although proof veriﬁcation is performed automatically,
the performance of the developed Coq/Certicrypt tactics degrades
signiﬁcantly for proof goals based on the ΣGSP-protocol. This is
due to the complexity of the formalization of the underlying alge-
braic structures, which involve the deﬁnition of product homomor-
phisms with a large number of inputs and outputs.
8. RELATED WORK
Cryptographic compilers for ZK-PoK were studied before in two
different lines of work; in the setting of the CACE project [2, 5, 6,
16] and for e-cash applications [43].
The CACE compiler is a certifying compiler that generates efﬁ-
cient implementations of zero-knowledge protocols. The compiler
takes moderately abstract speciﬁcations of proof goals as input and
generates C or Java implementations. The core compilation steps
(i.e., all but the backends) are certifying in the sense that they gener-
ate an Isabelle [46] proof of the existence of a knowledge extractor
guaranteeing special soundness. However, neither the fundamental
zero-knowledge property nor completeness are addressed by the
compiler, and the veriﬁcation component only supports a very lim-
ited set of proof goals, not including the ΣGSP-protocol. ZKCrypt
builds on the compilation functionality of the CACE compiler,
adding a new front-end and a completely reengineered veriﬁcation
component. Moreover, it solves several minor bugs, some of which
were uncovered as a direct consequence of the new formal veriﬁca-
tion back-end development.
The ZKPDL compiler generates efﬁcient distributed implemen-
tations of ZK-PoKs from high-level goals [43]. It has been used to
build a realistic e-cash library. ZKPDL offers a level of abstraction
similar to ours, but foregoes any attempt to verify the generated
code and supports a more restricted set of proof goals.
Besides tools for ZK-PoK, a large variety of other domain spe-
ciﬁc compilers exists, e.g., Fairplay [42], VIFF [28] and the tool
described in [41] for generating implementations of secure two-
party computations. Also, generic cryptographic compilers of-