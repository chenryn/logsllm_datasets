and Popa et al.’s scheme of [32], recall the encryption pro-
cedure. As long as deterministic or randomized encryption
is the top most layer, the ciphertexts may not be sorted.
This means that the protocol of [32] may not be applied.
Once it is adjusted to order-preserving encryption, then all
ciphertexts need to be sorted. This requires a complete up-
date of the database, similar to our Algorithm 2. Hence,
not only is insertion in order-preserving encryption in their
scheme more expensive in the average case than in ours, also
in adjustably encrypted database they require one update in
many cases whereas the probability of update is negligible
in our scheme.
5. EXPERIMENTS
We perform three sets of experiments: the number of up-
dates depending on the parameter λ, correlation between
plaintext and ciphertext for the diﬀerent order-preserving
encryption schemes and performance of database inserts be-
tween our and Popa et al.’s scheme.
For these experiments we use two data sets for plaintext
inputs. We use a uniform contribution of inputs in accor-
dance with our theoretical assumption. We sample draw n
independently, identically distributed uniform random vari-
ables from ZN using a pseudo-random number generator
available from the operating system. Then, we also use a
sample drawn from the real-world. It results from a large
scale communication transcript, the Enron mail set [22], that
has been used in the evaluation of various, related research
eﬀorts [11, 18, 24].
From the Enron data set we derive inputs in the following
way. We downloaded and extracted the 2009 version of the
data set [3]. The data set consists of folders and ﬁles con-
taining plaintext mail correspondence of Enron employees.
We retrieve samples from the data set by reading words from
the mail bodies of the correspondence. Each word is treated
as a number.
In order to read an l bit number, we read
⌈l/8⌉ character bytes and interpret those as an unsigned in-
teger (mod l). We continuously read the mail stream, i.e.,
after processing n numbers, we read the next, subsequent n
numbers for the next experiment.
Throughout all experiments we use as hardware HP Z820
workstations with 8 quad core CPUs and 128 GB RAM,
operating SUSE Linux Enterprise Server 11 SP2. We run
experiments using 64 bit versions of Java JDK 1.7.0 45 and
GCC 4.3 (used for cryptographic routines implemented in
C++, executed with JNI).
5.1 Parameter λ
The expansion factor λ determines the ciphertext expan-
sion, but also the expected number of updates.
It should
be chosen as small as possible, but still large enough in or-
der to prevent frequent updates. We derive a safe theoretical
bound of λ ≥ 6.31107 in Section 3.5. However, this theoreti-
cal bound rests on the assumption of uniform input distribu-
tion. We therefore experimentally test our order-preserving
encryption scheme also on real-world inputs from the Enron
data set. We aim to test how real-world distributions may
aﬀect our scheme. We already know that there are worse dis-
tributions, such as ordered insertions, but most real-world
data is not ordered. We hypothesize that in most real-world
cases an expansion factor of λ ≥ 6.31107 is safe.
5.1.1 Setup
In our experiments we measure the average number of up-
dates that occur. We vary three parameters: the expansion
factor λ, the number l of bits in the plaintext domain, and
the number n of plaintexts. For the expansion factor we
choose λ = 2, 3, . . .. For the number of plaintext bits we
choose l = 4, 8, 16, i.e. N = 2l. Then M is determined by λ,
i.e. M = 2λl. These bit sizes may seem small and, of course,
our algorithm and implementation can encrypt arbitrarily
large inputs, but in order to trigger an update one needs to
encrypt close to the entire input domain and this can only
be achieved in a realistic time frame for such small bit sizes.
We choose the number of plaintexts depending on the size of
the plaintext domain, i.e. we choose a fraction α. We choose
α = 0.25, 0.5, 0.75, 1, i.e. n = α2l. We run 25 experiments
for any combination of parameters.
Figure 3: Average Number of Updates per Number
of Inputs (l = 16, λ = 2, 3)
Figure 3 depicts the average number of updates for the
uniform data set, λ = 2, 3 and l = 16 per number of elements
α = 0.25, 0.5, 0.75, 1 on a linear x-axis. Figure 4 depicts
the average number of updates for the uniform data set,
λ = 2, 3 and α = 1 per size of the plaintext l = 4, 8, 16 on a
logarithmic x-axis. We observed that updates only occurred
Figure 4: Average Number of Updates per Plaintext
Size (α = 1, λ = 2, 3)
for λ = 2 in the uniformly distributed data set. Already
for λ = 3 no updates occurred. We never encountered more
than one update in a single experiment. Furthermore, we
do not show any results for the Enron data sets, since for
the same set of parameters no update ever occurred.
5.1.2 Discussion
Despite that we feel that more experiments are needed
to reliably recommend a choice of λ in all real-world cases,
we make the following observations: Our hypothesis has not
been falsiﬁed. Our encryption scheme behaves better for
the real-world Enron data set than the uniform distribu-
tion, since no update occurred even for λ = 2. This shows
that there are real-world data sets, particularly text-based
as the Enron data set, that are well amenable to our order-
preserving encryption scheme.
For an increasing number of elements, the necessary ex-
pansion factor λ increases. We can see this in Figure 3 for
λ = 2. This is not surprising, since the size of the tree is
growing and hence its height.
For an increasing size of the plaintext domain, the neces-
sary expansion factor λ increases, but is signiﬁcantly below
the theoretical threshold. We can see this in Figure 4 for
λ = 2 on the logarithmic x-axis. We attribute this eﬀect to
the asymptotic nature of the theoretic analysis. We know
that for the uniform distribution there is a bound, but this
bound is only approached slowly. For many practically rele-
vant values we are still far from reaching that bound. Hence,
the expansion factor λ may be (carefully) chosen smaller.
For performance reasons it is advisable to choose λ large
enough to prevent updates. One may still argue that for se-
curity reasons λ should be smaller. Recall from Section 3.4.2
that as the number of encrypted inputs increases, the secu-
rity of order-preserving encryption decreases. Hence, one
may choose λ small enough to encounter a performance hit
when there is a security problem. We argue that this is a too
ambiguous signal, since the performance hit may come from
several sources, such as encryption adjustment. Instead, the
client should issue a security warning, which he can simply
base on the size of the encryption state.
5.2 Correlation
The ﬁrst formally veriﬁed proposal for order-preserving
encryption by Boldyreva et al. [8] settled for a weaker notion
than ideal-security. They showed that ideal-security is not
achievable using stateless, immutable encryption functions.
Later Popa et al. presented a mutable order-preserving en-
cryption scheme that achieves ideal-security [32]. Our scheme
is ideal-secure (and mutable) as well. We hypothesize that
Popa et al.’s scheme is at least as secure as Boldyreva et al.’s
and that our scheme is at least as secure as Popa et al.’s.
For this experiment we need implementations of not only
our scheme, but also Boldyreva et al.’s and Popa et al.’s.
For Boldyreva et al.’s we use the implementation of Popa
available from CryptDB [33]. Popa et al.’s scheme we reim-
plemented using the description in [32] as a blue-print and
divide the implementation into an encryption client and an
encryption server running on the database. We implemented
their (mOPE) protocol for deterministic encryption, because
it is faster, but only used the order-preserving ciphertexts
for cryptanalysis, i.e. there is no security advantage in using
randomized encryption (stOPE). As deterministic encryp-
tion scheme we use AES-128 in ECB mode.
5.2.1 Setup
We measure the correlation coeﬃcient r between the plain-
texts and the ciphertexts. As we point out in Section 3.3 any
order-preserving encryption scheme forms a monotonically
increasing curve. Hence, there is a stronger correlation be-
tween plaintexts and ciphertexts than in – for example –
deterministic encryption. Yet, the smaller the coeﬃcient,
the less the correlation can be used for cryptanalysis, i.e.,
a smaller correlation coeﬃcient – closer to 0 – is better. A
correlation coeﬃcient of 1 (or −1) implies a deterministic
derivation function of plaintexts from ciphertexts.
For Boldyreva et al.’s scheme we use the parameters pro-
posed in [8] choosing a random key of l bits. For Popa
et al.’s scheme there are no parameters to set. For our
scheme we set λ = 3, such that there are no updates. We
set l = 16, i.e. N = 65536 and vary the number n of in-
puts: n = 1024, 2048, 4096, 8192, 16384, 32768. Recall that
M = 2λl = 248. We run 25 experiments for each value of n
and each data set – uniform and Enron.
Figure 6: Correlation Coeﬃcient with Enron Inputs
per Number of Inputs
error bars. For Boldyreva et al.’s scheme no error bars are
visible, since they are too small; similarly, for Popa et al.’s
scheme under uniform distribution. In Figure 5 Boldyreva
et al.’s and Popa et al.’s curves almost overlap. The precise
data reveals a small advantage for Popa et al.’s scheme.
5.2.2 Discussion
Although our experiments are certainly not conclusive for
judging the security of order-preserving encryption, we make
the following observations: Our hypotheses have not been
falsiﬁed. Under uniform distribution and particularly in
the Enron data set our encryption scheme performs better
than the not ideal-secure by Boldyreva et al.
In the En-
ron data set our correlation coeﬃcient can be as small as
0.68 whereas Boldyreva et al.’s is only marginally smaller
than 1.
In the Enron data set also Popa et al.’s scheme
performs signiﬁcantly better than Boldyreva et al.’s. The
ideal-secure, order-preserving encryption schemes perform
better and hence it is advisable to use them.
In both – uniformly distributed and Enron – data sets
our scheme performs better than Popa et al.’s. A validated
explanation of this observation remains an open research
question. We conjecture that frequent rebalancing of the
search tree negatively impacts security. Note that we never
rebalance (no updates, λ = 3) whereas Popa et al. use a bal-
anced tree in order to limit the worst-case complexity. We
emphasize that both schemes are ideal-secure. Still, our re-
sults indicate that our scheme has a higher diﬀusion between
plaintexts and ciphertexts than both other schemes.
In Popa et al.’s scheme in the Enron data set, we observe
an increase in correlation as more inputs are encrypted. This
supports our security caveat from Section 3.4.2 that as we
approach the full input domain security decreases. As men-
tioned in the previous experiment, a security alert on the
client seems necessary.
Figure 5: Correlation Coeﬃcient with Uniform In-
puts per Number of Inputs
5.3 Database Inserts
Figure 5 depicts the correlation coeﬃcient for uniformly
random inputs per number of inputs on the logarithmic x-
axis. Figure 6 depicts the correlation coeﬃcient for inputs
from the Enron data set per number of inputs also on a
logarithmic x-axis. We show the 90% conﬁdence intervals as
We have shown in Section 3.5 that our scheme has lower
average communication complexity than Popa et al.’s un-
der uniform distribution. Furthermore, we have shown in
Section 5.1 that our scheme also behaves well for real-world
data sets. We also argued in Section 4.1 that our scheme
eﬃciently integrates with outsourced, encrypted databases.
So, we hypothesize that our scheme has better performance
for insertion in an encrypted database than Popa et al.’s.
5.3.1 Setup
We measure the wall-clock time it takes to encrypt an
input value and insert it into the database. We particularly
also include the database time, although it is the same for
both schemes, but we believe that the entire operation is
time critical. The encryption time includes local operations
and (potential) updates to the database. In case of Popa et
al.’s scheme their (mOPE) protocol is run.
We do not report decryption or database selection times,
since they are negligible (less than 1 ms) compared to en-
cryption and insertion and also do not signiﬁcantly diﬀer
between the two schemes.
We use the following machine setup. There is one client
and one server machine connected via a network. Both ma-
chines are HP Z820 workstations. For Popa et al.’s scheme
we execute the encryption client on the client machine and
the encryption server as well as the database on the server
machine. The encryption client calls the encryption server
using TCP-based RMI3, and the encryption server uses TCP
sockets to update the database. We follow the recommen-
dation in [32] to host the encryption server close to the
database, i.e., we actually run them on the same machine.
For our scheme, we run the encryption algorithms on the
client and the database on the server. The client uses TCP
sockets to update the database.
Clearly, the performance of the network connecting client
and server has a signiﬁcant impact on the speed of database
inserts. We run our experiments using two diﬀerent, physical
network conditions: LAN and WAN. In the LAN setting,
both – client and server – are hosted on the same Ethernet
segment. In the WAN setting, client and server are hosted
at distant locations (roughly 30 miles or 50 km distance).
The communication link has roughly 30 Mbits/s bandwidth
and 10 ms latency. As column-store database we use SAP
HANA 1 SP5.
Based on the experiments in Section 5.1, we use the expan-
sion factors λ = 2, 3. We set the number of bits in the plain-
text size as l = 4, 8, 16. The number of plaintexts we choose
depends on the size of the plaintext domain, i.e. we choose