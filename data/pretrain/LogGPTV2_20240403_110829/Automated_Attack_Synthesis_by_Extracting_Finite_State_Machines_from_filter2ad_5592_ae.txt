0
2
2
1
2
1
1
0
0
8
5
0
0
0
0
0
0
0
0
0
0
0
0
4) Candidate Attackers: Why does property φ2 not yield
candidate attackers with TCP? In detail, φ2 says: “if the two
peers inﬁnitely often revisit the conﬁguration where the ﬁrst is
in LISTEN while the second is in SYN_SENT, then eventually
the ﬁrst peer will reach ESTABLISHED”. In the TCP Gold,
LINEARCRF+R, and NEURALCRF+R PROMELA programs,
the tear-down routine is incomplete, so a connection cannot be
fully closed. Moreover, the timeout transitions needed to abort a
connection establishment are missing. Hence these PROMELA
programs cannot capture the antecedent of φ2, where two
peers “inﬁnitely often revisit the conﬁguration where the ﬁrst
is in LISTEN while the second is in SYN_SENT”. Since the
PROMELA programs satisfy φ2 only vacuously, they cannot be
used by KORG to generate candidate attackers with φ2.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:43 UTC from IEEE Xplore.  Restrictions apply. 
1161
Why does property φ4 not yield candidate attackers with
the TCP LINEARCRF+R or NEURALCRF+R PROMELA
programs? In the TCP LINEARCRF+R and NEURAL-
CRF+R PROMELA programs, SYN_RECEIVED is unreach-
able because of two missing transitions. Therefore, the TCP
LINEARCRF+R and NEURALCRF+R PROMELA programs
support φ4 only vacuously and thus cannot be used with KORG
to generate any candidate attackers using φ4. Either of the
missing transitions would ﬁx the problem (the TCP Gold
PROMELA program has one).
Why does property θ3 not yield conﬁrmed attackers with
DCCP? As shown in Table V none of the candidate DCCP
attackers generated using property θ3 are conﬁrmed. We
investigated and found that for the canonical model the attacker
can not violate θ3, unless it is allowed to loop forever, i.e. the
attack is continuous, a different (and less realistic) attacker
model than the one we consider.
5) Comparison to Canonical Attacker Synthesis: For each
attack synthesized using the TCP Gold, LINEARCRF+R, or
NEURALCRF+R FSM, a similar attack was also synthesized
using the TCP Canonical FSM. However, attacks found using
TCP Canonical FSM exhibited ﬁve overarching strategies, of
which attacks found using TCP Gold, LINEARCRF+R, or
NEURALCRF+R FSM, exhibited only one.
Using the DCCP Gold, LINEARCRF+R, or NEURAL-
CRF+R FSM, we ﬁnd numerous attacks all of which pas-
sively spoof both peers in order to guide the peers into
CLOSE_REQ×CLOSE_REQ. We cannot ﬁnd active-spooﬁng
attacks using the DCCP Gold, LINEARCRF+R, or NEURAL-
CRF+R FSM, because these FSMs lack a functional passive
establishment routine for active-spooﬁng to interact with. In
contrast, all of the DCCP Canonical attacks use active spooﬁng.
DCCP Canonical has both active and passive establishment,
but in this case the SPIN model-checker ﬁnds counter-examples
where the peers do passive establishment ﬁrst.
We show examples of attacks synthesized with the canonical
FSM, but not with the NLP generated FSMs in the Appendix.
6) Summary: Our NLP pipeline and attacker synthesis task
successfully generated several conﬁrmed attackers against two
representative protocols: TCP and DCCP. However, our method
depends on the accuracy of the NLP extraction task, the
correctness of the extracted FSM, the quality of the selected
properties, and the power of the attack synthesis tool. We
discuss limitations and improvement directions in Section X.
IX. RELATED WORK
Below we present related works across three categories.
Logical Information Extraction. Rule-based systems like
WHYPER [1] and DASE [2] identify sentences describing
mobile application permissions and extract command-line input
constraints from manual pages, respectively. Witte et al. [3]
use rules over documentation and source code to create an
ontology allowing the cross-linking of software artifacts.
Other works combine NLP with techniques from traditional
software engineering and security. Lin et al. [11] infer protocol
formats by combining NLP with program analysis. NLP has
also been used to gather threat intelligence by interacting with
botnets [48], logically contrasting CVEs [49], or analyzing bug
reports in the context of data collected with a honeypot [50].
Ding and Hu [51] used pre-trained word embeddings to
identify physical channels in IoT from application descriptions.
Tian et al. [52] used pre-trained word vectors and other standard
NLP features to compare security policy descriptions written in
text in the context of IoT application authorization. Both works
relied on off-the-shelf NLP tools, and worked over keywords
in isolation, or over short and simple sentences.
Recently, Jero et al. [53] proposed a system to extract
protocol rules from textual speciﬁcations for grammar-based
fuzzing. They also took a zero-shot learning approach to adapt
to protocols that are unseen at training time. However, they
focused on a limited set of properties, and did not explicitly
model the behavior of the protocol. More closely related to our
work, Chen et al. [21] explored the use of NLP to discover
logical vulnerabilities in payment services. They extended the
FSMs for evaluated payment services by using the dependency
parse tree of sentences in a developer guide to extract the parties
involved in the process, as well as the content transmitted
between them. To identify relevant sentences, they used word
embeddings trained on relevant documentation. In our work,
we also leverage word representations trained on in-domain
data. However, we aim to reconstruct the full FSM from the
text, while they relied on a manually implemented FSM. While
their language analysis was done at the sentence-level, we
predict logical ﬂow structures that span multiple sentences.
Full Correctness Speciﬁcation. Zhai et al. [54] automatically
extract formal software speciﬁcations from comments in the
implementation code. Zhang et al. [55] use NLP to extract LTL
correctness speciﬁcations from prose policies for IoT apps. In
contrast to our work, they assume that the actual software code
is known ahead of time. Other related works infer abstract
protocol implementations using network traces [4], [5], [7],
program analysis [10], or model checking [13], [14]. These
approaches rely extensively on input from human experts and
do not easily generalize to new software or protocols.
Implementation Extraction. Yen et al. [56] explored the use
of NLP techniques to map RFCs to protocol implementations.
To do this,
they manually engineer an existing semantic
parser to handle networking-speciﬁc vocabulary, and translate
individual sentences to logical forms that can then be mapped
to executable functions. They include the spec author in the
loop to disambiguate cases where the functionality is under-
speciﬁed. They do not perform any task-speciﬁc learning, and
they work at the sentence-level.
X. LIMITATIONS
In this section we discuss some of the limitations of our
approach and directions for improvement.
Why our NLP models could not extract Canonical FSMs
from RFCs. Canonical FSMs are created based not only
on RFCs but also on input from experts with exposure to
protocol implementations, and often also rely on analyzing the
code [22], [57], [58]. RFCs contain ambiguities, unspeciﬁed
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:43 UTC from IEEE Xplore.  Restrictions apply. 
1262
behaviors that human experts solve in creating the Canonical
FSM [16], [56], or simply missing information. Thus, unlike
traditional NLP semantic parsing problems [59], [60], [24],
which study methods for translating natural language into a
complete formal representation, in our setting there is not
a complete one-to-one translation between the text and the
FSM. We address this challenge by deﬁning an intermediary
semantic representation that can be extracted unambiguously
from the text, and then use this intermediary representation
as the basis for the FSM extraction. The ground truth for
these intermediary representations is what we refer to as Gold
intermediary representations.
One avenue to extract better FSMs, possibly canonical ones,
is to solve ambiguities existing in the text by leveraging
human expertise. This can be done by using NLP methods
that exploit unlabeled data and human knowledge. A potential
direction for improvement is to design learning objectives that,
in addition to exploiting domain-speciﬁc corpora, can augment
the intermediary representations and constraint the predictions
using structured domain knowledge.
Limitations of attacker synthesis with partial FSMs. The
partial FSMs produced by the NLP pipeline combined with
the FSM extraction algorithm exhibit numerous errors, which
impacted our ability to use these FSMs for attacker synthesis.
Some attacks which could be found using the Canonical FSMs
were not found using the partial FSMs, and, some of the
attacks found using the partial FSMs were not conﬁrmed on
the Canonical FSMs. There are two causes for these mistakes:
missed transitions and incorrect transitions.
One direction to address these limitations is by leveraging
protocol completion [61], where given an incomplete protocol
FSM and some properties, the goal is to strategically add
transitions so that the completed FSM supports all the proper-
ties. Their solution relied on counterexample-guided inductive
synthesis (CEGIS) [62]. Our problem is a little more difﬁcult,
because in addition to missing transitions, we also need to
worry about incorrect transitions, so the approach used in [61]
would need to be modiﬁed such that the solver is also allowed
to delete or edit transitions. Another approach would be to
leverage prior work in automatic program repair [63].
Selecting properties. The attackers we ﬁnd are driven by the
selection of properties that the Canonical and extracted FSMs
support. For attacker synthesis, the most useful properties
describe critical functionality of a protocol, for example,
that it must reliably open and close connections, or that it
must not deadlock. We also prefer properties that are not
too implementation-speciﬁc, because there are multiple ways
to implement a protocol while still achieving the intended
functionality, as illustrated for Alternating Bit Protocol in [61].
Protocol correctness properties should be provided by proto-
col designers. Unfortunately, protocols are often implemented
and deployed before
are published.
This is the case with QUIC, which was deployed without
detailed public speciﬁcation or analysis. The authors of a 2015
QUIC security analysis [57] mention that they relied on code
and discussion with protocol developers to derive a protocol
textual speciﬁcations
description as the available documentation was insufﬁcient.
Extracting properties. While several NLP works looked
language statements into properties
at converting natural
expressed in temporal logic, RFCs do not have a dedicated
section detailing protocol correctness properties in an explicit
and succinct way. Instead, humans identify these properties by
observing the behaviors emerging from the speciﬁcation and
inferring the intent behind them, or by reading prose descrip-
tions of the developer’s intention. One promising approach is
to study these inference processes and formulate them as NLP
problems that take into account the functionality described by
the protocol as part of the input. Rather than converting the
explicit textual statement into properties, one can deﬁne an
abductive process that infers relevant desired properties of the
extracted model and rely on textual description of protocol
tests for speciﬁcations that offer similar functionality.
Limitations of KORG. KORG was not designed for broken
or partial FSMs (expressed as PROMELA programs), that might
violate or vacuously satisfy the provided properties. In these
cases it might generate no candidates whatsoever, or some
candidates, none of which are conﬁrmed. Also, KORG outputs
many identical or similar candidates, but we would prefer
a diversity of candidate attackers so that if some are not
conﬁrmed, perhaps others will be. The problem of determining
when two candidate attackers are similar reduces to deﬁning
an equivalence relation on counterexamples, as studied in [64].
Perhaps such work could be leveraged to quotient KORG’s
search-space by the equivalence class of the candidates it
already found, resulting in a diversity of attackers.
Generalizability to other RFCs. While we consider a set
of 6 different protocols, including TCP (one of the most well-
known and used protocols), there are further aspects we did
not consider in this work. One such aspect is considering
changes in RFCs. We believe that one promising direction
for investigating changes in RFCs and impact on FSMs is
investigating congestion control protocols that share a common
approach in detecting congestion, where newer reﬁnements
were proposed enhancing the original protocol. We expect that
while we can use the same technical domain knowledge we
might need to update our grammar to handle changes.
We did not consider secure protocols in this work. Note
that QUIC was just recently standardized in May 2021, as
RFC 9000 [65]. Here we can focus on RFC drafts changes
for QUIC and TLS 1.3, particularly the key exchange aspects.
Secure protocols will most likely require us to reﬁne both the
grammar and the domain knowledge we built for this work.
ACKNOWLEDGEMENTS
This work was supported by NSF grants CNS-1814105,
CNS-1815219, and GRFP-1938052. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this material
are those of the author(s) and do not necessarily reﬂect the
views of the National Science Foundation.
We thank our reviewers and shepherd for their constructive
feedback.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:43 UTC from IEEE Xplore.  Restrictions apply. 
1363
APPENDIX
Alg. EXTRACTTRAN(xml, T)
Inputs:
• xml intermediary representation
• transition block T, contained with xml.
Outputs:
• A set TT containing potential transitions s (cid:96)−→ s(cid:48)
described in and around the block T.
1. from := EXTRACTSOURCESTATE(T, xml)
2. to := EXTRACTTARGETSTATE(T, xml)
3. int := EXTRACTINTERMEDIARYSTATES(T, xml)
4. C := CLOSESTCONTROLCONTAINING(T, xml)
5. outer := [ ]
6. If (to = null and from = null):
1. to := SCANCHILDRENFORTARGETSTATE(T)
7. If (to = null or from = null):
1. outer := SCANCONTEXTFORSTATES(C, T)
8. (cid:96) := 
9. i := 1
10. While (not SEARCHEDENOUGH((cid:96), outer, i, or, C)):
1. If (cid:96) = :
/* (cid:96) is the transition label, brk indicates if the
source states are given outside C, and or indicates
if (cid:96) is of the form “(cid:96)0 or (cid:96)1 or ... or (cid:96)k”. */
1. ((cid:96), brk, or) := EXTRACTTRANLBL(T, C).
2. If outer = [ ] and (from = null or to = null):
1. outer := SCANCONTEXTFORSTATES(C, T)
3. C := CLOSESTCONTROLCONTAINING(C, xml)
4. i + +
11. (fromS, to) := FIXFROMTOSTATES(from, to, outer)
12. If int (cid:54)= [ ]:
1. ((cid:96)0, ..., (cid:96)j) := PARTITIONLABELACROSS((cid:96), int)
2. Let S0 := {s0
3. Let S1 := {s1
4. Return S0 ∪ S1
(cid:96)0−→ s1 | s0 ∈ fromS}
(cid:96)1−→ s2, ..., sj
(cid:96)j−→ to}
13. If brk = true:
a) C := CLOSESTCONTROLCONTAINING(T, xml)
b) C(cid:48)
:= CLOSESTCONTROLCONTAINING(C, xml)
c) fromS := SCANCONTEXTFORSTATES(C(cid:48)
, C)
14. Return {s0
(cid:96)−→ to | s0 ∈ fromS}.
A. Grammar Examples
Figure 7 shows an example of an annotated block from the
TCP RFC. Here, we can observe a list of events within one
control statement
B. Segmentation Results
In Table VI, we show the detailed performance of different
segmentation strategies to create the base textual unit in our
1464
if active and the foreign socket is
specified,
issue a SYN
segment.
An initial send sequence number (ISS) is
selected.
A SYN
segment of the form
 is sent.
Set SND.UNA to ISS, SND.NXT to ISS+1,
enter the SYN-SENT
state
Fig. 7: Example of ﬂow control annotations for TCP.
sequence-to-sequence models.
C. FSM Extraction Errors Examples
In Table VII, we show examples of FSM extraction errors.
D. Finite State Machine Figures
We present FSMs for TCP and DCCP in Figures 8,9 and
10. Note that in the DCCP diagrams we omit the states
CHANGING, STABLE, and UNSTABLE, which are described
in the RFC but are (a) unreachable dead code in all the extracted
FSMs and (b) unrelated to the connection routine. We use ∗ as
a wild-card, ! to mean send, ? to mean receive, == to denote
variable-reading, and := to denote variable-writing.
E. Attack Synthesis Errors Examples
Below we show examples of attacks that are synthesized
with the canonical FSM, but not found with the NLP models.
TCP.Canonical.3.9 spoofs both peers passively. When tested
against φ3, the attack causes the peers to end up in a deadlock
in SYN_RECEIVED×SYN_RECEIVED. None of the TCP
Gold, LINEARCRF+R, or NEURALCRF+R attacks do passive
spooﬁng; nor do any of them cause the peers to deadlock in
SYN_RECEIVED×SYN_RECEIVED.
DCCP.Canonical.2.18 spoofs both peers actively. When
tested against θ2,
the attack causes the peers to nav-
igate to RESPOND×RESPOND. On the way,
they enter
TIME_WAIT×TIME_WAIT, violating θ2. None of the DCCP
Gold, LINEARCRF+R, or NEURALCRF+R attacks do ac-
tive spooﬁng; nor do any of them conclude in the state
RESPOND×RESPOND.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:43 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VI: Average Results for Different Segmentation Strategies (LINEARCRF)
Segmentation
Token
Chunk
Phrase
Token-level
Acc Weighted F1 Macro F1