rator scheme on a graph with 10,000 nodes, and is 12× worse on
a graph with 100,000 nodes. We had to estimate the preprocessing
time of the strawman approach on a graph of 100,000 nodes since
storing an all pair shortest path matrix of size 100,000X100,000 re-
quires too much memory (we ran BFS 100,000 times and compute
100,0002 HMACs to estimate the cost).
Proof-computation time. Figure 5 shows a comparison among
the implemented schemes in terms of proof-computation time. The
results clearly indicate that the certifying algorithm approach out-
performs the BFS approach and that the planar separator approach
outperforms both BFS and the certifying algorithm dramatically—
which is expected since the planar separator proof-computation time
grows sublinearly with the number of nodes. In particular, proof-
computation time of the planar separator scheme has a speedup of
more than 1.4X105× on a 1,000-node graph, and a speedup of more
than 2.3X108× on a 100,000-node graph (compared to BFS).
We note here, that in the case of the planar separator scheme, we
report worst case results in Figure 5. Worst case proof-computation
time is derived when the source s and the destination t of our query
are sibling leaves in the planar separator tree, in which case we need
to perform the maximum number of MIN computations (approxi-
mately O(log n)). This is because the proof computation algorithm
always examines all common parents of the two planar separator
tree nodes containing s and t. On the contrary, if there is only one
common parent, namely the root, of the two tree nodes, the proof
computation only does one MIN computation and is deﬁned as the
best case. Table 4 shows the comparison between the worst and
the best case. It can be observed that the time of the worst case
is roughly log n times the time of the best case. Veriﬁcation times
also have similar relationships.
The planar separator scheme reduces the proof-computation time
dramatically and this is one of the main contributions of this work
since this metric (proof-computation time) is the most expensive in
existing work [30, 12]. For example, our work shows that graph
processing can scale up to 200,000 nodes since it takes only tens of
seconds as shown in Table 4 (and in the best case, only 7 seconds!)
to produce a proof for such large graphs. The exact numbers of our
proof-computation time can be found in Table 7 in the Appendix.
Veriﬁcation time. Figure 6 shows statistics about veriﬁcation time.
In accordance with the asymptotics (see Table 1), the veriﬁcation
for BFS and the certifying algorithm is faster than the planar sepa-
rator scheme. Still, as shown in Figure 6, the veriﬁcation time of the
planar separator scheme does not grow that much. It requires less
than 2 seconds on a graph with 100,000 nodes. Therefore, consid-
ering the signiﬁcant improvements on proof-computation time, the
small increase in the veriﬁcation time is a good trade-off. Finally,
similarly to proof-computation time, the veriﬁcation of the straw-
man approach requires a small amount of time since it only requires
verifying HMACs of the shortest path edges, which is negligible.
Server storage. Here we compare the total amount of storage re-
quired on the server side. In the strawman scheme, the server stores
the all-pairs-shortest-path matrix and the corresponding HMACs.
In the BFS scheme, the server stores the PINOCCHIO circuit and
the PINOCCHIO evaluation key. Note that in both these schemes, it
is not necessary to store the graph G itself (in the strawman scheme
the shortest paths are precomputed; in the BFS scheme the graph is
embedded in the circuit) and therefore we do not count the graph
size. On the contrary, the certifying algorithm scheme requires
the server to store the graph (to compute the shortest paths), the
PINOCCHIO circuit, the respective evaluation key and the HMACs
of edges—all these are included in the server storage of this scheme.
Finally, in the planar separator scheme, the separator tree is part of
the server storage in addition to that of the certifying algorithm.
Figure 7 shows the comparison of the server storage. Since the
PINOCCHIO evaluation key size is proportional to the size of the
circuit and the certifying algorithm has a more efﬁcient circuit im-
plementation than the one of BFS in Figure 3, the server storage for
the certifying algorithm is much smaller. In particular, the server
storage is reduced by 32340× on a graph with 1,000 nodes and the
gap grows on larger graphs.
101102103104105Nodes00.20.40.60.81.01.21.41.6Time(seconds)StrawmanPINOCCHIOBFSCertifyingAlgorithmPlanarSeparator101102103104105Nodes10−21001021041061081010ServerStorage(MB)StrawmanPINOCCHIOBFSCertifyingAlgorithmPlanarSeparatorThe planar separator scheme has the least storage requirements.
As shown in Figure 7, although the server storage is 4.7× larger on
a small graph with 10 nodes, it is reduced by 7× for larger graphs
and in particular by 1.9X106×compared to BFS on a graph with
100,000 nodes. Finally, the server storage is a major drawback of
the strawman approach, as the server needs to store n2 HMACs
(each being 256 bits) for the shortest paths. As such, our planar
separator tree scheme outperforms the strawman scheme by 3× on
an 1000-node graph and by 669× on an 100,000-node graph.
Proof size. One drawback of our approaches compared to the BFS
approach is the proof size. The proof size of the PINOCCHIO BFS
scheme is always a constant (288 bytes)—see [30]. However, in our
approaches (certifying algorithm and planar separator), the proof
contains a 256-bit (32 bytes) HMAC for each edge contained in
the shortest path, therefore being proportional to the size |p| of the
shortest path p. Speciﬁcally, for the case of the certifying algorithm
scheme the proof size is |p| × 32 + 288 bytes while for the planar
separator scheme the proof size is |p| × 32 + 288 × num bytes,
where num is the number of PINOCCHIO circuits involved in the
proof computation of the planar separator scheme (num is bounded
above by the levels of the planar separator tree). As a reference, the
proof size of the strawman scheme is (|p|+1)×32 since the length
of the path as well as every path edge needs to be HMACed.
Table 2 compares the proof size of all four schemes for |p| = 10.
Note that although the proof size of our approach slightly increases,
the bandwidth of all approaches is the same and proportional to |p|,
since the answer p is always required to be returned to the client.
Table 2: Proof size in KB for |p| = 10.
n
Strawman
100
1,000
10,000
0.344
0.344
0.344
PINOCCHIO
BFS
0.281
0.281
0.281
Certifying
Algorithm Separator
Planar
2.781
2.781
2.781
3.906
5.312
6.719
Evaluation of the dynamic graph scheme. We compared the
proof-computation time for the dynamic graph scheme (Section 3.4)
with the certifying algorithm and the planar separator scheme. As
shown in Figure 8, the proof-computation time of the dynamic
graph scheme does not scale that well, when compared to the other
schemes (which is expected, given its O(n2) complexity). How-
ever, it is still feasible to execute it on small graphs.
For better performance, we also tried to implement the RAM-
based, improved version of the dynamic graph scheme described
in Figure 9. However, only verifying one digest in step (3) takes
more than 10 seconds, on a small graph with 16 edges, and there
are 2m such veriﬁcations to be performed, thus it is not practical
at this time. Therefore, although the complexity of the algorithm
is O(m log2 n), the constants involved are really large due to the
veriﬁcation scheme used. We hope to develop more efﬁcient algo-
rithms for verifying RAM-based tasks in the future.
Table 3: Breakdown for planar separator preprocesssing cost.
n
100
1,000
10,000
100,000
total
time (s)
59.273
126.88
838.924
6844.024
construction
tree
Planar Separator Scheme
digest and
HMAC
0.47%
4.16%
26.44%
37.50%
0.20%
2.18%
8.70%
44.47%
PINOCCHIO
work
99.32%
93.19%
57.52%
18.03%
Evaluation of the maximum ﬂow scheme. Table 5 shows the
proof time comparison between implementing the maximum ﬂow
Table 4: Worst and best case for planar proof-computation time.
Planar Separator Scheme
proof computation
veriﬁcation
worst case (s)
best case (s) worst case (s)
best case (s)
11.425
22.223
66.374
93.853
1.572
4.099
6.147
7.472
0.547
0.944
1.350
1.729
0.063
0.085
0.127
0.194
n
1,000
10,000
100,000
200,000
n
10
100
1,000
Table 5: Maximum ﬂow scheme proof-computation time.
PINOCCHIO Implementation (s) Maximum Flow Scheme (s)
>32.072
>20,782
>2,413,013
0.701
31.1509
1,003
Figure 8: Comparison of the dynamic graph scheme, the certify-
ing algorithm scheme and the planar separator scheme in terms of
proof-computation time.
algorithm directly on PINOCCHIO and using the certifying algo-
rithm for maximum ﬂow. Actually, maximum ﬂow algorithms are
much more complicated than BFS and we could not implement
them directly on PINOCCHIO easily. However, we observed that
the Edmonds-Karp algorithm [15] computes maximum ﬂows by
calling BFS as a subroutine. Thus we use the proof time of BFS
on the same graph as a lower bound. Even so, Table 5 shows that
the certifying algorithm for maximum ﬂow outperforms the lower
bound by orders of magnitude. In particular, the certifying algo-
rithm speeds up by 2405× on a graph with 1,000 nodes.
Table 6: PANTRY [12] benchmarks (in seconds).
n Veriﬁable PUT Veriﬁable GET estimated PANTRY BFS
100
1,000
3.3
30.92
2.52
31.22
6,200
650,000
6.1 Using RAM-based VC
One of the main sources of inefﬁciency in our PINOCCHIO im-
plementations is the circuit representation. To overcome this limi-
tation, Braun et al. [12] presented PANTRY, a system for verifying
RAM computations. PANTRY solves the non-constant index prob-
lem by providing a digest of the memory as an input to the SNARK,
along with a Merkle hash tree proof of the accessed index.
We estimated the time that BFS would require to execute on
PANTRY by multiplying the time overhead of each RAM PUT/GET
operation with the number of such operations the BFS algorithm
takes—3m + 2n + 1 PUT operations and 3m + n + 2 GET op-
erations. Table 6 shows the estimated times for running BFS on
PANTRY for graphs with 100 and 1,000 nodes.
We also estimated the performance of the system of Ben-Sasson
et al. [7]. First, we wrote BFS in TinyRAM. Then we computed
101102103104105Nodes10−21001021041061081010Time(seconds)2×105DynamicGraphCertifyingAlgorithmPlanarSeparatorthe three parameters that affect the performance of the system: the
number of instructions (L = 127), the number of cycles (T =
100m + 27) and the size of the input (N = m + 2). Based on
Figure 9 of [8] (a follow-up work of [7]), we used the time for a
TinyRAM program with parameters (L, T , N) that are closest to
ours. Numbers in column 3 of Table 1 are derived in this way.
Acknowledgments
This research was sponsored in part by the U.S. Army Research
Laboratory and the U.K. Ministry of Defence and was accomplished
under Agreement Number W911NF-06-3-0001. The views and
conclusions contained in this document are those of the author(s)