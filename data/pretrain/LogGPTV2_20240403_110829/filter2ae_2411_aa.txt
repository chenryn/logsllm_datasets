# 前言
前几天自己在学习域渗透时突然对Windows的身份认证机制产生了兴趣，但看了好几天自己还是懵懵懂懂，期间自己看了许多师傅的优质文章，也做了一些例子的复现，于是有了这篇文章，可以说是自己的笔记或总结吧。
由于自己了解的也不是很深入，这篇文章写的技术可能比较浅，像NTLM和Kerberos的中间过程并没有写的很详细。自己还画了简单的过程图来加深理解和记忆，图画的不好，这些还请各位师傅见谅。
如果本文的内容有错误，还请各位师傅指正。
# Windows身份认证机制
Windows身份认证机制主要有 **NTLM** 和 **Kerberos**
两种，其中NTLM主要被用在本地以及工作组环境，而在域环境中优先使用的是Kerberos。
在早期的windows系统（win2000以前）还有一种认证方式叫LM，但该方式的加密算法较脆弱，基本已经被淘汰掉了。
## NTLM
**NTLM(NT LAN Manager)** 是Windows中最常见的身份认证方式，主要有本地认证和网络认证两种情况。
### NTLM Hash
在介绍NTLM之前，需要介绍NTLM中最关键的凭证： **NTLM Hash** 。正常的明文密码加密为NTLM Hash的方法如下：
> password ----> 十六进制编码 ----> Unicode转换 ----> MD4加密 ----> 得到NTLM Hash
例如：
> admin -> hex(16进制编码) = 61646d696e
>
> 61646d696e -> Unicode = 610064006d0069006e00
>
> 610064006d0069006e00 -> MD4 = 209c6174da490caeb422f3fa5a7ae634
### 本地认证
在本地认证过程中，当用户进行注销、重启、开机等需要认证的操作时，首先Windows会调用`winlogon.exe`进程（也就是我们平常见到的登录框）接收用户的密码。
之后密码会被传送给进程`lsass.exe`，该进程会先在内存中存储一份明文密码，然后将明文密码加密为NTLM
Hash后，与Windows本地的SAM数据库（%SystemRoot%\system32\config\SAM）中该用户的NTLM
Hash对比，如果一致则通过认证
### 网络认证
#### 工作组环境
网络认证需要使用NTLM协议，该协议基于 **挑战（Challenge）/响应（Response）** 机制。
  1. 首先客户端向服务端发送 ~~用户名~~ 以及本机的一些信息(此处更正)
  2. 服务端接收到客户端的用户名后，先生成一个随机的16位的Challenge（挑战随机数），本地储存后将Challenge返回给客户端
  3. 客户端接收到服务端发来的Challenge后，使用用户输入密码的NTLM Hash对Challenge进行加密生成Response（也叫Net NTLM Hash），将Response发送给服务端
  4. 服务端接收到客户端发来的Response，使用数据库中对应用户的NTLM Hash对之前存储的Challenge进行加密，得到的结果与接收的Response进行对比，如果一致则通过认证
#### 域环境
域环境中虽然默认首选是kerberos认证，但是也可以使用NTLM来进行认证。其实NTLM在域环境与工作组环境中的差异不大，区别主要是最终在域控(DC)中完成验证。直接看图比较清晰一点：
### NTLM的缺陷
了解整个过程之后我们可以发现，在整个过程中用户的明文密码并没有在客户端和服务端之间传输，取而代之的是NTLM Hash。因此如果攻击者得到了用户的NTLM
Hash，那么便可以冒充该用户通过身份验证（也就是说不需要破解出明文密码就可以通过验证），这就是hash传递攻击(Pass The Hash)。
## Kerberos
>
> Kerberos实际上是一种基于票据（Ticket）的认证方式。客户端要访问服务器的资源，需要首先购买服务端认可的票据。也就是说，客户端在访问服务器之前需要预先买好票，等待服务验票之后才能入场。在这之前，客户端需要先买票，但是这张票不能直接购买，需要一张认购权证。客户端在买票之前需要预先获得一张认购权证。这张认购权证和进入服务器的入场券均有KDC发售。
过程中涉及到的专有名词有：
    KDC(Key Distribution Center) : 密钥分发中心
    KAS(Kerberos Authentication Service) : kerberos认证服务
    TGT(Ticket Granting Ticket) : 认购权证
    TGS(Ticket Granting Service) : 票据授予服务
    ST(Service Ticket) : 服务票据
### 获取TGT
客户端要先拿到TGT，然后才能购买ST进行对应服务的访问
  1. 首先在用户登陆时，Kerberos服务向KDC(域控)发送申请认购权证的请求，内容为登录输入的用户名和经过输入密码 **加密的Authenticator** (用于确认身份的，往下看就会明白)
  2. KDC(域控)拿到传来的数据后，会根据用户名到活动目录(Active Directory)的数据库中寻找该用户的密码，然后使用该密码解密 **加密的Authenticator** ，然后与 **原始的Authenticator** 对比，如果一致，则确认用户身份。
  1. KDC(域控)确认登录用户身份正确后，先生成一个由用户密码加密的 **加密Logon Session Key** （为了确保通信安全）。然后生成TGT(包含用户信息和 **原始Logon Session Key** )，再使用KDC的密钥（即krbrgt用户的密钥）加密TGT生成 **加密后的TGT** 。然后将由用户密码加密的 **加密Logon Session Key** 和 **加密后的TGT** 返回给客户端
  2. 客户端拿到 **加密Logon Session Key** 和TGT后，先用自己的密码解密 **加密Logon Session Key** 得到 **原始Logon Session Key** ，然后将 **原始Logon Session Key** 和TGT缓存到本地
### 获取ST
当用户想要访问某个服务时，会经过以下过程：
  1. 客户端向TGS请求购买ST，请求内容包括用户名、经Logon Session Key加密的Authenticator、请求访问的服务名、TGT
  2. 接收到请求后，TGS使用自己的密钥(krbtgt用户的密钥)解密TGT得到用户信息和 **原始Logon Session Key** ，然后使用 **原始Logon Session Key** 解密出Authenticator，与TGS本地的Authenticator对比一致后确认用户身份。
  1. TGS生成一个经Logon Session Key加密的Service Session Key，然后生成ST（包含请求用户的信息以及原始Logon Session Key），然后将Service Session Key和ST返回给客户端
之后的过程就是用户用ST和去访问服务了，个人认为理解到这里就ok了，后面的过程不再过多赘述
### Kerberos的缺陷
从以上认证过程我们可以发现，Kerberos认证完全依赖于KDC的密钥（即krbtgt用户的密钥）。因此，如果攻击者拿到了krbtgt账号的hash的话，那么他就可以访问域中任何以kerberos协议做身份认证的服务。这就产生了票据传递攻击(Pass
The Ticket)。
# Hash抓取
## WCE
该工具可以抓取用户的LM Hash和NTML Hash，需要administrator权限。测试绝大数杀软都会报毒，需要免杀。
`wce.exe -lv`
**工具地址：**
## QuarkPwDump
也是导出用户LM Hash和NTLM Hash的，测试发现只有360和nod32等少数杀软报了毒，是否需要免杀视具体情况而定。
`QuarkPwDump.exe -dhl`
**工具地址：**
## Reg导出注册表本地分析
这个需要system权限（在我的xp上测试竟然无限蓝屏重启，懵逼了。。），在win2003上可以测试成功：
`reg save hklm\sam sam.hive`
`reg save hklm\system system.hive`
`reg save hklm\security security.hive`
然后导入到本地的mimikatz中：
`lsadump::sam /system:system.hive /sam:sam.hive`
## mimikatz
神器不必多说，mimikatz可以抓取上面提到的`lsass.exe`进程存储在内存中的明文密码，前提是该用户在该服务器上登录过
需要administrator及以上权限，需要免杀
`privilege::debug`
`sekurlsa::logonpasswords`
可以看到不仅抓取到了本机的administrator的密码，还抓取到了域管理员的密码，在域渗透的过程中会用到
**工具地址：**
## ProcDump导出数据本地分析
这种方式最大的优势就是免杀，因为ProcDump是微软官方提供的。但缺点也很明显，导出的数据文件可能会很大（但我本地测试的时候速度还是很快的）。需要administrator及以上权限。
`procdump.exe -accepteula -ma lsass.exe lsass.dmp`
之后可以下载到本地导入到mimikatz中进行读取
我在xp上导出，在win10上导入会报错
查了一下发现需要注意的一点是导出的平台和导入的平台不同时会报错，可以看一下mimikatz官方的解释：
在另一台xp中就可以成功导出和读取：
`sekurlsa::minidump lsass.dmp`
`sekurlsa::logonpasswords`
工具地址：
## SharpDump
一款C#的工具，GitHub上提供了project源码，在VS中以release编译完成即可使用。
测试只有极少的杀软会报毒，但本地测试时win10的defender会报毒，是否免杀视情况而定吧。需要administrator及以上的权限。
然后将打包的`debug824.bin`下载到本地，修改扩展名为`gz`，将解压后得到的文件导入mimikatz
( **注意** ：我第一次测试时导入失败了，之后换了最新版本的mimikatz后成功导入)
`sekurlsa::minidump `