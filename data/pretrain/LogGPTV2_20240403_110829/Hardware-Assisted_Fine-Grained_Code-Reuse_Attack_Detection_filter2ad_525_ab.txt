branch instruction is ﬁltered out if its corresponding type ﬂag is unset; otherwise,
it is recorded into the LBR buﬀer. Note that, branch types in this table are inde-
pendent with each other and therefore we can set the combination “CPL USER
+ NEAR IND CALL + NEAR IND JMP + NEAR RET” to record all user
space indirect branch executions.
Managing LBR + PMU. With a slight modiﬁcation to the system kernel, we
develop a driver to manage LBR + PMU and export a system call interface to
applications. A user can execute a spawner application to launch a protected
program under the monitoring of LBR + PMU. Once monitored, we tag the
protected program with a new ﬂag ﬁeld of its Process Control Block (PCB).
When the protected program is switched in/out, we turn on/oﬀ LBR + PMU and
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
71
Table 1. Branch ﬁltering ﬂags provided by LBR + PMU.
Flag
Meaning
Instruction example
CPU USER
Branches occurring in ring 3 -
CPU KERNEL
Branches occurring in ring 0 -
JCC
Conditional branches
jz loc 8048418
NEAR REL CALL Near relative calls
call sub 80482F0
NEAR IND CALL Near indirect calls
call eax
NEAR REL JMP Near relative jumps
jmp sub 8048390
NEAR IND JMP Near indirect jumps
NEAR RET
Near returns
jmp eax
ret
restore/save related registers. In other words, the state of LBR + PMU becomes
a part of process context. When enforcing CFI, an eﬀective method to maintain
the context is to erase the LBR buﬀer and to reset PMC to 0, after security
checking but before switching out. Note that PMC needs to be reinitialized
before exiting the interrupt handler such that PMU can generate an interrupt
again. Consequently, CFIGuard can protect multiple programs in parallel.
4 Identify Control-Flow Violation
The execution of reused-code is identiﬁed by examining two types of control-ﬂow
violations: (a) running a programmer unintended indirect branch instruction;
(b) an intended branch jumps to an unintended target. Therefore, we perform
attack detection by consulting the corresponding CFGs.
4.1 Security Checking Scheme
In this work, a branch instruction execution is also referred to as a transfer
deﬁned by an address pair (jump-from, jump-to) which are the source and des-
tination addresses of a branch execution, respectively. At runtime, an indirect
branch could result in diﬀerent transfers from the same source address but to
diﬀerent destination addresses. The execution of a transfer is deemed legal if and
only if its source and destination addresses match a speciﬁc CFG edge. There
is a special treatment for inter-module transfers, whose destination addresses
are out of current module and thus cannot be depicted by the CFG of current
module. For those transfers, we separately check their jump-from and jump-to
addresses with the exit-point of the source module and the entry-point of the
landing module, respectively. As a result, this strategy gives us the ﬂexibility to
generate constraint data of the current module without any information about
other modules.
Figure 1 illustrates our runtime security enforcement wherein Fig. 1(a) shows
our CFGs along with a few code snippets taken from the application and its
72
P. Yuan et al.
dynamically linked libraries. Besides holding the data about in-module indi-
rect transfers, those CFGs also list the entry-points and exit-points of the cur-
rent module. Entry-points are the addresses where external branches that jump
into the current module, while exit-points are addresses of indirect branches
that jump out of the current module. In those CFGs, we use labels instead
of addresses. In particular, for each instruction location A in the disassembler
output of IDA [1], we associate it with a symbolic label “lab A”.
Figure 1(b) shows the idea of validating a record in the security check by
consulting the CFGs. In this ﬁgure, a smile sign means to accept a record if the
record is identiﬁed as a legal transfer, while a stop sign means to reject a record
if it is identiﬁed as an illegal one. For instances, a record (lab 147c, lab 132e) is
rejected because the CFG of the library shows that there is no branch instruction
starting at lab 147c. This record must be due to an unintended instruction. A
record (lab 83f5, lab 8052) is also rejected because the CFG of application
shows that target address lab 8052 is unintended for the ret instruction at
lab 83f5. The other are accepted because they are compliant to the CFGs.
(a) Pre-extracted CFGs.
(b) Security enforcement.
Fig. 1. Our runtime security enforcement.
4.2 Control-Flow Constraint: Call-Site CFG
CFIGuard uses the CFG data structure directly for detecting control-ﬂow vio-
lation without reducing its complexity as in coarse-grained CFI [23,24,43]. As a
beneﬁt, the attack detection logic of CFIGuard is uniﬁed and strict. In practice,
we prefer ﬁne-grained CFGs for the purpose to achieve strong security protection.
We construct a dedicated target table for each indirect branch. In addition, a
table is built to store the addresses of intended branch instructions, exit-points
and entry-points. Therefore, the constraint data consists of four components.
1. The ﬁrst component is a bitmap for jump-from addresses where valid indirect
branch instructions are located. Each byte (uniquely identiﬁed by an address)
of the code segment corresponds to a bit in this bitmap. If a byte is the
beginning of an indirect branch instruction, the corresponding bit is set to
1; otherwise it is set to 0. This bitmap can verify the legitimacy of source
addresses of each LBR record.
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
73
2. The second is a hash table stores the connectivity between a jump-from and
its target table. A hash table entry has three ﬁelds: the key (i.e., jump-from
addresses), the location of the target table, and an entry index of the collided
element.
3. The third is a series of target tables each of which stores a set of jump-
to addresses of a particular branch. The size of those tables varies across
branches as each branch has a diﬀerent number of targets. For management,
each target table is prepended with a header that provides rich information. A
header has three ﬁelds: the size of current target table, the branch instruction
type, and a permission bit indicating whether an inter-module transfer is
allowed or not. The second and third ﬁelds provide information to validate
the legitimacy of the destination address of each LBR record. Note that the
header’s last ﬁeld also deﬁnes whether current branch is an exit-point.
4. The fourth component is the entry-points where control ﬂows into current
module. This part is also implemented using a bitmap. Similar to the bitmap
for jump-from addresses, each bit of this bitmap indicates where valid entry-
points are located.
Therefore, the ﬁrst three components are involved when CFIGuard validates
intra-module transfer records while all of them are needed when checking exit-
points and entry-points in case of inter-module transfers. On a side note, our con-
straint data only uses the oﬀsets to the code segment base rather than absolute
addresses. Consequently, it is not aﬀected by the base address where the exe-
cutable’s code segment is loaded into the memory. Hence, such a CFG can be
accessed concurrently by multiple threads, and even shared by many programs
at runtime.
4.3 Code-Reuse Attack Detection Triggers
Before describing the runtime detection phase, we ﬁrst introduce two types of
events that trigger the detection logic: an interrupt issued by LBR + PMU and
invocation of a system call.
Hardware Interrupt. When LBR + PMU generates an interrupt, the CPU
control is passed to the interrupt handler in the kernel and LBR stops recording
branches because it is conﬁgured to monitor user space code only. For simplicity,
in our current implementation, the interrupt handler directly invokes the security
check function. Other alternatives include to invoke it in a kernel thread or in a
user-mode process. Each scheme has its own advantages and disadvantages, and
we remark that all of them can beneﬁt from the isolation capability provided by
hardware.
System Calls. By default, we check LBR records in batch mode. This scheme
can allow an attacker to execute an average of N/2 invalid indirect branches
before LBR + PMU issues an interrupt. In other words, the attacker may launch
a malicious system call before the interrupt performs a security validation. To
deal with such attacks, we ensure the security by postponing any system call
74
P. Yuan et al.
execution after LBR buﬀer inspection. To this end, we hook into the system call
handlers (e.g., sysenter entry and system call routines of the Linux kernel)
to invoke our security check.
Runtime Detection. For each LBR record, we process it in the following steps
– Step 1. Identify whether it is an execution trace of an intra-module transfer by
using the kernel API (e.g., find vma in Linux) to retrieve the Virtual Memory
Area (VMA) manager that covers the current source (or destination) address.
In Linux, each code or data segment of a program has its own VMA whose
meta-data is maintained by a manager. A record is considered as an intra-
module transfer if its source and destination addresses are covered by the
same VMA. Otherwise, it is an inter-module transfer.
– Step 2. Convert the address pair to oﬀsets in order to be compliant to the
format of the aforementioned constraint data. To this end, the source (or
destination) address is subtracted with the base address where the current
code segment is loaded in the memory and maintained by the VMA manger.
– Step 3. Retrieve the CFG of the recorded branch instruction’s source address.
The VMA manager has a new ﬁeld named cfg info that points to the buﬀer
storing the CFG. Note that all CFGs are priorly loaded into the kernel space
before running the protected program, and are bound to the cfg info ﬁelds
when running kernel routines fork() or exec().
– Step 4. Finally, we perform code-reuse attack detection by checking this record
with CFGs.
5 Implementation of CFIGuard
We have implemented a prototype of CFIGuard on the Linux kernel version
3.13.11. Currently, CFIGuard supports Intel Ivy Bridge architecture and focuses
on preventing user-level attacks only. The prototype runs in two phases: the
oﬄine CFG recovering phase and the online CFI enforcing phase. During the
oﬄine phase, CFIGuard builds a table of target addresses for each branch and
then generates the constraint data for the binaries. During the second phase,
CFIGuard employs LBR + PMU to record every indirect branch execution and
performs attack detection by consulting CFGs.
5.1 Control-Flow Constraint
Extracting Control-Flow Graph. We develop a Python script based on
IDA [1] to collect call-sites from binaries. If the call-site is a direct call, we
can easily get its target. Otherwise, we analyse the source code to collect targets
of an indirect call. We use the method applied in forward-CFI [35] to construct
target tables for indirect calls based on the source code. Speciﬁcally, we classify
all functions into diﬀerent categories based on the types of their return values
and parameters. An indirect function invocation (using a function pointer) can
only target the category that has the same type of the pointer. The target tables
of indirect calls are fed to our Python script.
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
75
With the information about call-sites, we can construct the target tables for
ret instructions. Then we analyze the Procedure Linkage Table (PLT) entries
and switch-case tables to construct the target tables for indirect jump instruc-
tions. Note that, if function pointers in a switch-case jump table are hard-coded
in a read-only segment, they cannot be tampered with because of DEP protec-
tion. Therefore, jump instructions (e.g., jmp jtable[edx*4]) with such a target
set can hardly be exploited by attackers if the compiler implements the jump
table lookups correctly, i.e., jumping out of this table is impossible. We state this
fact of those jump instructions by not listing their jump-to addresses in their
target tables. Instead, we set the size ﬁeld of the headers of their target tables
with a speciﬁc value as an indication. This scheme could accelerate the security
checking and also save memory overhead.
The exit-points include: (a) PLT entries that invoke library functions; (b) ret
instructions at the end of exported functions of the current module; (c) indirect
calls of exported function that invoke external call-back functions. Meanwhile,
the entry-points are composed of instructions next to call-sites that invoke PLT
entries or external library functions.
In case that the source code of the protected program is not available, we can
recover CFG from its binary as in coarse-grained CFI schemes [43,44]. In fact,
the CFGs recovered by those works are accurate enough for CFIGuard because
the CFGs are utilized without reduction.
Storing Control-Flow Graph. The CFGs are stored in the form of bitmaps
and tables described below.
Jump-from address bitmap. This bitmap is implemented as an array of words.
Each word has 32-bits, thus it can track 32 code bytes or 32 addresses with the