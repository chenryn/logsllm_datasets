title:Characterizing the Security of Endogenous and Exogenous Desktop Application
Network Flows
author:Matthew R. McNiece and
Ruidan Li and
Bradley Reaves
Characterizing the Security
of Endogenous and Exogenous Desktop
Application Network Flows
Matthew R. McNiece1,2, Ruidan Li2, and Bradley Reaves1(B)
1 North Carolina State University, Raleigh, NC, USA
{mrmcniec,bgreaves}@ncsu.edu
2 Cisco Systems, Inc., Raleigh, NC, USA
PI:EMAIL
Abstract. Most desktop applications use the network, and insecure
communications can have a signiﬁcant impact on the application, the
system, the user, and the enterprise. Understanding at scale whether
desktop application use the network securely is a challenge because the
application provenance of a given network packet is rarely available at
centralized collection points. In this paper, we collect ﬂow data from
39,758 MacOS devices on an enterprise network to study the network
behaviors of individual applications. We collect ﬂows locally on-device
and can deﬁnitively identify the application responsible for every ﬂow.
We also develop techniques to distinguish “endogenous” ﬂows common
to most executions of a program from “exogenous” ﬂows likely caused
by unique inputs. We ﬁnd that popular MacOS applications are in fact
using the network securely, with 95.62% of the applications we study
using HTTPS. Notably, we observe security sensitive-services (including
certiﬁcate management and mobile device management) do not use ports
associated with secure communications. Our study provides important
insights for users, device and network administrators, and researchers
interested in secure communication.
1 Introduction
Most desktop applications make connections over the network to pull content,
check for a license, or save a resource. While encrypted communications were
once rare, Google recently reported that 95% of Chrome connection on Mac
platforms use HTTPS [1]. However, studies on TLS adoption have not accounted
for non-browser applications—the vast majority of networked software. Measur-
ing per-application network use requires a vantage point that can map network
traﬃc to the originating application. At a small scale, tools such as personal
ﬁrewalls can let an individual determine what sorts of connections applications
on their device are making, but are limited to a single device. Network-layer
telemetry tools like middleboxes can provide a higher-level view of desktop ﬂows
but lose deﬁnitive context of the application responsible for the ﬂow.
In this paper, we bridge these two viewpoints, bringing the local context
of observing an application making a connection but providing visibility across
c(cid:2) Springer Nature Switzerland AG 2021
O. Hohlfeld et al. (Eds.): PAM 2021, LNCS 12671, pp. 531–546, 2021.
https://doi.org/10.1007/978-3-030-72582-2_31
532
M. R. McNiece et al.
Fig. 1. Telemetry collected from a population of 39,758 MacOS devices contains
application-labelled netﬂow that is anonymized and enriched for further analysis.
39, 758 MacOS devices in an enterprise setting. At scale, we run into challenges
when examining the traﬃc from even a single application across many hosts, as
some connections are made on behalf of the user, while others are part of what an
application does natively. For example, a word processor may check for updates
while simultaneously loading embedded content in a particular document. The
software developer is only responsible for one of these network uses, so diﬀeren-
tiating these two classes of behaviors is critical to properly evaluate the security
behavior of the application. Our perspective is interesting because we are able
to study a large population of hosts, with a vantage point into each host in the
population that can attribute traﬃc back to a speciﬁc process. Studying this as
a population of hosts allows us to reasonably and conﬁdently make claims about
an application’s behavior, while in individual studies we could observe point data
but would be limited to describing an instance of an application. These measure-
ments and insights can provide valuable context for administrators and incident
responders to understand expected behaviors of applications on managed devices
and for application developers to better understand the holistic connections their
applications are making. Our work makes the following contributions:
– We perform the ﬁrst large scale study of application network behavior on
– We demonstrate and evaluate a technique to diﬀerentiate user-triggered and
desktop applications
application-endogenous behavior
– We examine listening ports, reputation of over 282,000 domains, and over
three billion connections to evaluate the attack surface of 143 desktop appli-
cations
– We investigate popular applications such as Microsoft Oﬃce and MacOS dae-
mons that do not entirely use secure communication channels.
2 Methods
Figure 1 shows a high-level view of our phased methodology and analysis
pipeline. Our goal
is to combine our data sources while maintaining the
anonymity of any users, use accurate matching techniques, and deal with the
Characterizing the Security of Endogenous and Exogenous Desktop
533
challenges of combining billion-row datasets. We begin in Phase 0 with a popu-
lation of around 39,000 IT-managed devices, all of which are desktops or laptops.
These devices belong to a Fortune 500 company and we consider these to be rep-
resentative of a typical enterprise managed device. We are interested in two types
of collected telemetry: application and OS conﬁguration (1a) and application-
labelled ﬂow data (1b). Application and OS conﬁguration contains information
about currently installed processes on the system, OS version information, and
more. Application-labelled ﬂow data contains metadata about connections made
on behalf of some application on the device. In their raw form, both of these
data sources contain ﬁelds that include potential human-identifying information
such as usernames, machine names, and MAC addresses. Phase 2 removes or
encrypts all human identiﬁers. Phase 3 consists of a data source that has pas-
sively collected DNS queries generated by all devices on the network. Phase 4
transforms and enriches the now anonymized data feeds from 1a and 1b. Flow
data is ﬁrst enriched with ﬁelds indicating the OS family of the device that gener-
ated the traﬃc, and if the source and destination IPs are each private or public.
Then, the ﬂow data is joined with the (domain,resolved ip) pairs observed
from the passive DNS data, recovering the domains associated with each ﬂow.
Finally, using the recovered domain we check against blocklists, popularity, and
reputation sources and look for any matches at the second-level domain.
In Phase 5 we apply ﬁlters to the enriched ﬂow data and conﬁguration
data. We restrict both datasets to only MacOS devices and only consider traf-
ﬁc from applications installed on more than 5% of the device population. We
further restrict ﬂows to outbound connections (i.e., a device talking to some
remote server). Finally, we make a determination if a particular connection for
an application is common across installs of that application, and restrict analysis
to those that we believe to be common. We performed the data processing and
analysis on a large Spark [2] cluster. In total, our pipeline and analysis took
approximately 4,200 CPU hours and 37,000 GB memory hours.
2.1 Data Collection and Characterization
Application Labelled Flows (Phase 1b): Our primary dataset is telemetry
from Cisco AnyConnect VPN’s Network Visibility Module (NVM) [3]. This tool
records all network traﬃc from a host and critically, the process associated with
the traﬃc. The records generated by NVM include the source and destination IP
address, source and destination port, ﬂow size and duration, as well as the name
and SHA256 hash of the process binary associated with the ﬂow. We use one
day’s telemetry collected from NVM on a large enterprise network in September
2020, which is about 320 GB of compressed JSON. This contains records from
39,758 hosts, 143 unique applications, and 3,211,451,385 total ﬂows. This dataset
contains only network telemetry, so an application that generates no network
traﬃc is not represented. There were two challenges with using this data. First,
ﬂows are bidirectional but do not indicate if the ﬂow originated on the laptop
or a remote server. We address this in Subsect. 2.3. Second, ﬂows frequently do
not have a domain name associated with the destination, so we use the observed
passive DNS data to recover domains from IP addresses.
534
M. R. McNiece et al.
Application and OS Conﬁguration (Phase 1a): We use OSQuery [4] to
learn about the state of a device, its installed applications, and recent network
activity. Our dataset contains the query results from 35,678 managed endpoints
from a single day in September 2020.1
Passive DNS (Phase 3): At each recursive DNS resolver on the network, there is
a passive collector that records logs of DNS queries and responses. Because these
collectors are internal to the network, observing a query/response means that a
device inside the network made a query for some speciﬁc domain that had a spe-
ciﬁc IP in the response. All devices in our population are conﬁgured to use these
DNS resolvers. We use logs collected from the same 24 h window as the application-
labelled ﬂows. This consists of 9.5 billion query/response pairs, approximately
115 Gb of compressed Parquet [5]. We use this data to perform reverse DNS lookups
to recover the domains of an observed IP in the ﬂow metadata.
Additional Sources of Enrichment (Phase 4): We use the Snort IP Block-
list [6] and a paid commercial feed of domains associated with spam campaigns
as sources of maliciousness. We use the Umbrella Top 1 Million domains list [7]
as a proxy for goodness and the Umbrella Investigate Risk Score [8] as a source
of domain reputation.
2.2 Data Preparation and Preprocessing
Anonymization (Phase 2): In raw form, the ﬂow data, conﬁguration data
contain human-identifying information. The datasets that the research team
had access to have had all human-identifying ﬁelds (e.g., usernames, MAC
addresses) removed with the exception of the machine name. The machine name
was encrypted with a key the research team did not have access to; this ﬁeld
was pseudo anonymized so there remained a way to track ﬂows associated with
the same device and calculate the number of unique devices in the population
that share some trait. Appendix A contains a full discussion of our data ethics.
Passive DNS (Phase 3): We used passively observed DNS data to gen-
erate “lookups” that we could use to recover a domain name from an IP
address. We use A,AAAA records and collected pairs of rdata,rrname observed
responses, these two ﬁelds contain no human identiﬁable data and thus bypasses
the anonymization step. From this key-value pair, we can enrich observed IP
addresses from the ﬂow data with all observed domains that resolved to that IP.
Application and OS Conﬁguration (Phase 1a): We used a single query [9]
to obtain a snapshot of all active listening ports on the system and the process
that owns them.
1 This is fewer hosts than are in the ﬂows dataset, but certainly large enough to be
a representative sample. OSQuery data was not available for every host that NVM
was installed on.
Characterizing the Security of Endogenous and Exogenous Desktop
535
Application Labelled Flows (Phase 1b): We perform three lightweight oper-
ations on the data before it proceeds to the fusing step: remove any records that
are NULL, add a label with the OS family (Windows or MacOS), and use RFC 1918
[10] to label each source and destination address as “Private” or “Public”.
2.3 Enrichment (Phase 4)
We fuse together application-labeled ﬂows with the observed ip:domain pairs
from pDNS to recover domains from the ﬂow metadata. While we were not able
to match exact pDNS queries to hosts due to a lack of consistent identiﬁers, the
pDNS data was collected from the same network in the same 24-h period. When
we observe the same IP on the same network within a time window we have high
conﬁdence that it resolved to that domain. In cases where a single IP resolves
to multiple domains, we report all matched domains.2 Enriching the ﬂow data
with the DNS lookups requires a join between 3.2 billion ﬂows and 2.9 billion
ip:domain pairs. Some IPs resolve to orders of magnitude more domains (e.g.,
AWS, CloudFlare) which causes a skewed join. Skewed joins are painful for many
distributed compute systems, including ours, it took us multiple iterations and
about 1,000 CPU hours to make this single join work.
Traﬃc Direction: NVM records symmetrical ﬂow metadata, but does not
indicate if the origin of the connection was remote or local, so it is unclear if the
source IP was the local device or the remote server. We did not use ports as an
indication of which end was the remote (e.g., if destination port was HTTP/80)
because if we assumed well-known or registered ports were always the remote,
that would bias any research questions involving port usage. We did not have
access to an authoritative record of the IP address allocated to a given device,
which could have helped bypass this challenge.
We used RFC 1918 to build a simple heuristic to determine traﬃc direction.
We then label each ﬂow as Internal, Outbound, Inbound or NAT, for more infor-
mation see Appendix B. We hypothesize that most traﬃc should be Outbound
as most applications follow a client-server pattern where an application initiates
connections to some Internet-facing service. We then looked at the distribution
of traﬃc and found that 81.9% of traﬃc was Outbound, which supports that
hypothesis. Internal consisted of 2.86% of traﬃc, Inbound 15.19% and NAT
0.05%. Outbound represents more than 80% of the traﬃc and we can best rea-
son about it, so we restrict our analysis to this type only. We revisit inbound
traﬃc using OSQuery in Subsect. 3.5.
2.4 Filtering (Phase 5)
We restricted our dataset in three ways. First, we restricted our analysis to only
MacOS applications, as we had more devices running MacOS in the population.
2 This overapproximates possible domains, risking misclassifying an IP as disreputable
in our analysis. Because our results do not identify any endogenous domain as dis-