## 漏洞简介
Atlassian Bitbucket Server 和 Data Center 是 Atlassian 提供的一款现代化代码协作平台，支持代码审查、分支权限管理、持续集成与持续部署（CI/CD）等功能。受影响的 Bitbucket Server 和 Data Center 版本存在一个命令注入漏洞，该漏洞利用环境变量进行攻击。具有控制用户名权限的攻击者可以在系统上执行任意命令。

## 影响范围
受影响的版本包括：
- Bitbucket Data Center and Server 7.0 到 7.21 的所有版本。
- 如果在 `bitbucket.properties` 中设置了 `mesh.enabled=false`，则 Bitbucket Server 和 Data Center 的 8.0 至 8.4 版也会受到此漏洞的影响。

具体受影响的版本如下：
- 7.0 to 7.5 (所有版本)
- 7.6.0 to 7.6.18
- 7.7 to 7.16 (所有版本)
- 7.17.0 to 7.17.11
- 7.18 to 7.20 (所有版本)
- 7.21.0 to 7.21.5
- 8.0.0 to 8.0.4
- 8.1.0 to 8.1.4
- 8.2.0 to 8.2.3
- 8.3.0 to 8.3.2
- 8.4.0 to 8.4.1

## 调试环境设置
为了调试，需要设置 JVM 参数。在启动文件 `start-bitbucket.sh` 中没有找到相关参数，但在 `_start-webapp.sh` 文件中找到了 `JAVA_OPTS` 参数。在 `JAVA_OPTS` 参数后面添加以下内容：
```
-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n
```

然后执行以下命令重启 Bitbucket 服务：
```sh
service atlbitbucket stop
service atlbitbucket start
```

观察进程以确保新添加的 JVM 参数生效。之后配置 IDEA 并启动调试。

## 漏洞分析
根据漏洞影响范围，下载了 8.4.2 和 8.4.1 版本进行对比，发现差异较大。因此又下载了 7.6.19 和 7.6.18 版本。通过对比修复版本之间的差异，最终锁定安全更新的部分为两个 JAR 包：`bitbucket-process-*.jar` 和 `nuprocess-*.jar`。

反编译后进一步对比发现，在 `bitbucket-process-*.jar` 中的 `DefaultNioProcessConfigurer.java`、`NioProcessParameters.java` 和 `RemoteUserNioProcessConfigurer.java` 文件中的差异符合官方漏洞描述。有权控制用户名权限的攻击者能够利用环境变量进行命令注入。

在 `com.atlassian.bitbucket.internal.process.DefaultNioProcessConfigurer.java` 中，环境变量的设置改为了 `NioProcessParameters.environmentPutIfAbsent` 函数。这个函数是 `com.atlassian.bitbucket.internal.process.NioProcessParameters.java` 中新增的，其中调用的函数对 key 进行了非空判断，并对 key 和 value 进行了空字节检测。

在 `com.atlassian.bitbucket.internal.process.RemoteUserNioProcessConfigurer.java` 中发现了官方描述的用户名环境变量 `REMOTE_USER`。通过回溯相关类及其继承类的调用，找到了路由入口，如 `com.atlassian.stash.internal.rest.content.FileListResource`。考虑到 Bitbucket 用于 Git 代码管理，猜测这里会执行 Git 命令。

创建仓库后根据路由访问，跟进查看命令在哪里执行以及环境变量的作用。在 `RemoteUserNioProcessConfigurer` 的 `configure` 方法中成功命中断点，发现已经传入了 Git 命令。但漏洞描述提到的是使用用户名环境变量造成的注入，因此只需关注环境变量部分。

调用 `DefaultAuthenticationContext.getCurrentUser` 方法生成用户对象，其中包含注册的用户名 `test`。`getName` 方法主要逻辑是返回注册信息中的用户名。随后将用户名赋值给环境变量 `REMOTE_USER`。

返回后回到 `NuNioProcessHelper.run` 方法，然后调用 `NuProcessBuilder.run` 方法，`prepareEnvironment` 方法进行格式转换，取出环境变量中的 key 和 value 以 `=` 拼接放入字符数组。继续跟入发现，在 `LinuxProcess.prepareProcess` 方法中，环境变量经过 `toEnvironmentBlock` 方法处理。该函数的主要逻辑是将环境变量数组中的全部环境变量转化为字节后赋值给新的 block 字节数组并返回。每次拷贝一个环境变量字节后，新的拷贝位置会加一，以实现环境变量间的分隔。根据漏洞修复方式，在环境变量中使用空字节后，在这里空字节后面部分就是一个新的环境变量，猜测可能是注入了一个恶意环境变量。

返回赋值给 `envBlock` 后调用 `LibJava10.Java_java_lang_ProcessImpl_forkAndExec` 方法，通过调用 Java native 方法实现命令执行。并没有发现环境变量如何造成任意命令执行，回看其他地方也没有发现环境变量引入到命令执行触发点。相关的历史漏洞都是 Git 参数注入，后来发现已经有相关的漏洞分析文章，意识到是 Git 环境变量问题。

简单来说，执行 Git 命令时会自动调用相关的环境变量，而某些环境变量可以执行命令，如 `GIT_EXTERNAL_DIFF`。根据文章描述，该环境变量在执行 `git diff` 时用到。按照描述注册一个用户名为 `'test GIT_EXTERNAL_DIFF=touch /tmp/test'`，然后去仓库执行 `diff` 操作。根据路由，调用到 `CommitDiffResource.streamDiff` 函数。后续流程和上面一样，只是现在执行的 `git diff` 命令会用到注入的 Git 环境变量 `GIT_EXTERNAL_DIFF`，从而导致命令执行。

## 漏洞复现
1. 注册一个带有环境变量的用户名，例如 `'test GIT_EXTERNAL_DIFF=touch /tmp/test'`。
2. 使用 Burp Suite 拦截请求并将空格改为 `%00`。
3. 进入仓库并执行 `diff` 操作。
4. 成功在 `/tmp` 目录下创建 `test` 文件。