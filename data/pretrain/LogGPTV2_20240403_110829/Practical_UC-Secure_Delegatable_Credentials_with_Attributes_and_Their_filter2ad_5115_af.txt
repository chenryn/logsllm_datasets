= д
ressi
for j = 1, . . . , ni + 1 do
tc
i, j
resti, j
end for
for j = 1, . . . , ni with (i, j) (cid:60) D do
ρai, j
= д
2
ac
i, j
i(cid:44)1
◃ Randomize σi
◃ Compute com-values for odd-level σi
◃ Attribute ai, j is disclosed
◃ Attribute ai, j is hidden
◃ Compute com-values for even-level σi
◃ Attribute ai, j is disclosed
◃ Attribute ai, j is hidden
◃ Fiat-Shamir hash
◃ Compute res-values for odd-level σi
◃ Compute res-values for even-level σi
(cid:3)
(cid:3)
i =L
i =L
(cid:2)rescpki
(cid:3)
i(cid:44)L
,(cid:2)rescski
ρcpki
= д
2
cpkc
i
= ρcpki
+ c · cski
i , ressi , ⟨resti, j⟩ni +1
j=1 ⟩L
i =1, ⟨resai, j⟩(i, j)(cid:60)D , ⟨rescpki
⟩L−1
i =1 , rescskL
Figure 4: Pseudocode for efficiently computing attribute tokens.
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA693i , ressi , ⟨resti, j⟩ni +1
j=1 ⟩L
i =1, ⟨resai, j⟩(i, j)(cid:60)D , ⟨rescpki
⟩L−1
i =1 , rescskL ,
comi, j+2 ← fexp(ˆt(resti, j +1 , r′
comi, j+2 ← fexp(ˆt(resti, j +1 , r′
i(cid:44)1
, д−1
i =1)−c
i(cid:44)L)(cid:2) · e(д1, д−1
i(cid:44)1) · (e(y1,1, д2)(cid:2) · e(д1, ipk)(cid:3)
i)(cid:2) · ˆt(д−1
1 , rescpki−1)(cid:3)
(cid:2) · ˆt(rescpki
i)(cid:2) · ˆt(y1,1, rescpki−1)(cid:3)
i)(cid:2) · ˆt(y1, j +1, rescpki−1)(cid:3)
2 )(cid:2) · ˆt(y1, j+1, rescpki−1)(cid:3)
i(cid:44)L)(cid:2) · e(д−1
2 )(cid:3)
2 )rescski(cid:3)
i(cid:44)1) · (e(ai, j , д2)(cid:2)e(y1, j+1, ipk)(cid:3)
i(cid:44)1)(cid:2) · e(y1, j+1, ipk)−c(cid:3)
1 , д2)rescski(cid:3)
2 )) · e(д1, y2,1)−c
1 , rescpki
2,1)(cid:2) · ˆt(д−1
i) · ˆt(resai, j , д−1
i =1)−c
)(cid:3)
i =L
i =L
i , ressi) · ˆt(rescpki−1 , д−1
i , resti,1) · ˆt(rescpki−1 , y−1
◃ Recompute com-values for odd-level σi
(cid:2) · e(y1,1, ipk)−c(cid:3)
i =1
◃ Attribute ai, j is disclosed
◃ Attribute ai, j is hidden
i =1
◃ Compute com-values for even-level σi
else
end if
end for
⟨ai, j⟩(i, j∈D), D, sp, m
comi,1 ← fexp(ˆt(ressi , r′
comi,2 ← fexp(ˆt(resti,1 , r′
for j = 1, . . . , ni do
if (i, j) ∈ D then
1: input: c, ⟨r′
2:
3: for i = 1, 3, . . . , L do
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: end for
14: for i = 2, 4, . . . , L do
comi,1 ← fexp(ˆt(r′
15:
comi,2 ← fexp(ˆt(r′
16:
for j = 1, . . . , ni do
17:
if (i, j) ∈ D then
18:
19:
20:
21:
22:
23:
24: end for
25: c′ ← H(sp, ipk, ⟨r′
26: output: c = c′
end for
end if
else
comi, j+2 ← fexp(ˆt(rescpki−1 , y−1
comi, j+2 ← fexp(ˆt(rescpki−1 , y−1
2, j+1) · ˆt(r′
2, j +1) · ˆt(r′
i , resti, j +1)) · e(д1, ai, j)−c
i , resti, j +1) · ˆt(д−1
1 , resai, j))
i , ⟨comi, j⟩ni +2
j=1 ⟩L
i =1, ⟨ai, j⟩(i, j)∈D , m)
◃ Attribute ai, j is disclosed
◃ Attribute ai, j is hidden
◃ Fiat-Shamir hash
Figure 5: Pseudocode for efficiently verifying attribute tokens.
(1+ui){G2
(1 +ui){G3
and for even i it costs (2 + ni){G2
1{G2
t }. The com-values for Level-i for i > 1 cost (1+di){G2
t }+
t }. Computing the res-values for odd i costs (2 +ni){G2
1},
2}, except the last level, where
1} or 1{G2
2} can be saved when L is even or odd, respectively.
If we consider a practical example, where we show Level-2 cre-
dentials with attributes only on Level-1 (meaning that n2 = 0),
computing the attribute token costs very roughly 3n1 +13 exponen-
1} +3{G2} +
tiations, and more precisely: (3 +n1){G1} +(2 +n1){G2
1{G2
2} + (1 + d1){Gt} + (2 + u1){G2
t } + 1{G3
t }.
2 + (1 + ui)E
2 + ui E
Verifying attribute tokens. Verifying the first credential link costs
(1 + d1)E + (1 + u1)E
2 + (2 + n1){Gt} and one final exponentiation.
3 + (1 + di){Gt}, except
Every next level adds (1 + di)E
the last level, which costs (2 + di)E
3 + (2 + di){Gt}.
For the same practical example with two levels, to verify a Level-
2 attribute token will cost very roughly n1 + 4 pairings and n1 + 4
exponentiations, and more precisely: (1 + d1)E + (3 + u1)E
2 + (4 +
n1){Gt}.
We summarize the above efficiency analysis in Table 1. We also
estimate timings from running some benschmarks for the C version
of Apache Milagro Cryptographic Library (AMCL)3 with a 254-bit
Barreto-Naehrig curve [2] on a 3.1GHz Intel I7-5557U laptop CPU.
We compared our timings calculated according to Table 1 with
3github.com/miracl/amcl
the real implementation for two levels with different amount of at-
tributes (see Table 2 for comparison). The figures from Table 2 show
that our estimates are quite accurate and even a bit conservative.
Size of attribute tokens To count the size of an attribute token
we use the following notation. We use X[G1] and X[G2] to denote
X group elements from the respective group. The attribute token
proves knowledge of every credential link, so the token grows in
the credential level.
First, we look at credential links without attributes. For every
level a credential link adds 4 group elements: 3[G1] + 1[G2] for an
odd and 1[G1] + 3[G2] for an even level, respectively. Addition-
ally, a token has 2 elements from Zq. This means that for even
L, an attribute token generated from a Level-L credential without
attributes takes (2L)[G1] + (2L − 1)[G2] + 2Zq.
Every attribute added to an odd level credential link adds one
group element, if it is disclosed, and two elements, if this attribute
remains hidden. For the odd levels these are the elements from
[G1] and for even levels - from [G2]. This means that for even
L, an attribute token generated from a Level-L credential takes
i =2,4, ...(ni +ui))[G2]+2Zp.
i =1,3, ...(ni +ui))[G1]+(2L−1+L
(2L+L−1
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA694Algorithm
SETUP
DELEGATE
PRESENT
VERIFY
Operations
Total time estimate (ms)
1.21
1{G2}
L
L
For each odd Level-i: 1{G2} + (ni + 2){G1} + (ni + 1){G2
1}
2}
For each even Level-i: 1{G1} + (ni + 2){G2} + (ni + 1){G2
t }+
t } + (1 + ui){G3
i =1,3, ..
t } + (1 + ui){G3
t }+
3 + (4 + n1 + dL){Gt}+
(cid:0)1{G2} + (ni + 2){G1} + (1 + di){G2
(cid:0)1{G1} + (ni + 2){G2} + (1 + di){G2
(L−1)
i =2,4, ..
(1 + d1)E + (3 + u1 + dL)E
(2 + ni){G2
(2 + ni){G2
2 + uLE
2 + (1 + ui)E
3 + (1 + di){Gt}(cid:1)
(cid:0)(1 + di)E
1}(cid:1)
2}(cid:1)
i =2,3, ..
L
L
i =1,3, ..
i =2,4, ..
2.96 + 1.21ni
5.27 + 3.52ni
(cid:0)13.63 + 3.89di + 6.11ui + 1.21ni
(cid:1)+
(cid:0)17.58 + 3.89di + 6.11ui + 3.52ni
(cid:1)
(cid:0)11.28 + 5.80di + 5.48ui
(cid:1)
(L−1)
i =2,3, ..
21.65 + 2.36d1 + 3.91u1 + 1.89n1 + 5.80dL + 5.48uL+
Table 1: Performance evaluation and timing estimations, where di and ui denote the amount of disclosed and undisclosed
t} denote X j-multi-exponentiations in
attributes at delegation level i, respectively, and ni = di + ui; X{Gj
the respective group; j = 1 means a simple exponentiation. Ek denote a k-pairing product that we can compute with k-Miller
loops and a single shared final exponentiation; k = 1 means a single pairing. Benchmarks are (all in ms): 1{G1} = 0.54; 1{G2
1} =
0.67; 1{G2} = 1.21; 1{G2
2} = 2.31; 1{Gt} = 1.89; 1{G2
t } = 6.11; 1E = 2.36; 1E
t } = 3.89; 1{G3
2}, and X{Gj
2 = 3.91; 1E
1}, X{Gj
3 = 5.48.
6 APPLICATION TO PERMISSIONED
BLOCKCHAINS