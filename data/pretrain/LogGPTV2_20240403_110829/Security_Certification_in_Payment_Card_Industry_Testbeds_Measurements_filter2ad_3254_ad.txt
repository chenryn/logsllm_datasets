✗
✗
✗
✗
✗
✗
✗
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:35)
(cid:35)
✓
✓
✓
(cid:35)
-
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
(cid:35)
✓
✓
(cid:35)
✓
✗
✗
✗
✗
(cid:32)
✗
✗
(cid:35)
✓
✓
✓
✓
(cid:35)
✗
21
-
-
7(0)
16
-
-
15(3)
17
-
-
18(7)
16
-
(cid:35)
(cid:71)(cid:35)
(cid:32)
✗
✗
7
-
20(7)
25(4)
Baseline: #Vul. Detected (Total detectable: 29)
Certified: #Vul. Remaining (#Vul. detected, but no need to fix)
the PCI scanning, iii) fix all the vulnerabilities that the scanner man-
dates to fix in order to be PCI DSS compliant, iv) run the scanning
again, and v) record the certified version of the testbed.
4.1 Comparison of Scanner Performance
We found that the security scanning capabilities vary significantly
across scanners, in terms of i) the vulnerabilities they can detect
and ii) the vulnerabilities they require one to fix in order to pass
the certification process. Once passed, the website becomes PCI
DSS compliant. The experimental results are presented in Table 3.
Scanner2. Scanner2 is the most effective PCI scanner in our evalua-
tion, and successfully detected 21 out of the 29 externally detectable
cases. The most important case that Scanner2 missed is the use of
HTTP protocol to transmit sensitive information (test case 7). We
fixed 21 vulnerabilities in our testbed to become PCI compliant in
Scanner2. Most of the fixes are intuitive, except fixing Javascript
source integrity checking (Case 25) and CSRF (Case 28). We added
Javascript integrity checking for scripts that are loaded from exter-
nal sources (Case 25). We used a dynamic instrumentation based
plugin to protect OpenCart against CSRF attacks (Case 28). This plu-
gin instruments code for generating and checking of CSRF tokens
in OpenCart forms. Sometimes, fixing one vulnerability effectively
eliminates another vulnerability that Scanner2 fails to detect. For
example, Scanner2 did not detect default usernames and passwords
for Phpmyadmin (Case 6); however, this vulnerability no longer
exists after we disable the remote access to Phpmyadmin (Case 4).
Scanner5. In the baseline test (i.e., when all the vulnerabilities
were in place), Scanner5 detected 16 out of the 29 cases. To obtain
a Scanner5 compliant version, we had to fix 13 vulnerabilities. Two
of the vulnerabilities (Test cases 5 and 17) are fixed as a side effect
of fixing other vulnerabilities (Test cases 2 and 12). Scanner5 failed
to report the use of a certificate with the wrong hostname, which
is a serious vulnerability exploitable by hackers to launch man-
in-the-middle attacks. Scanner5 did not report the use of HTTP
to transmit sensitive information (i.e., login and register forms in
rwycart). Interestingly, Scanner5 detected the use of HTTP to log
on to PhpMyAdmin. In addition, Scanner5 did not report the use of
scripts from external sources (Case 25).
Scanner1 and Scanner4. Scanner4 uses Scanner1’s scanning in-
frastructure for ASV scanning. So we present the experimental
results of both scanners under the same column. Scanner1 detects
17 vulnerabilities. However, it only requires fixing 10 of them to be
PCI DSS compliant. Some of the high and medium severity vulnera-
bilities are not required to fix, including remotely accessible Mysql
(Case 2), certificates with wrong hostnames (Case 15), and missing
security headers (Case 33). The vulnerability of weak hashing in
SSL/TLS certificates (Case 17) was fixed as a side effect of using a
real certificate from Let’s Encrypt (Case 12).
Scanner6 and Scanner3. Scanner6 and Scanner3 are not on the
approved scanning vendors (ASVs) list [20] provided by the PCI
council. Compared with other approved scanners, they detected a
fewer number of vulnerabilities. Scanner6 detected 16 vulnerabili-
ties, whereas Scanner3 detected 7. We fixed 9 of the vulnerabilities
for Scanner6 and 3 for Scanner3 in order to be compliant. Both Scan-
ner6 and Scanner3 detected remotely accessible Mysql (Case 2), but
do not require us to fix them. Scanner3 missed all the SSL/TLS and
certificate related vulnerabilities (Test cases 12-18), while Scanner6
detected most of them. However, Scanner6 did not require us to
fix certificates with wrong hostnames (Test case 15). We cannot
conclude that unapproved scanners perform worse than approved
scanners, due to the small sample size.
A Case Study of False Positives. During our experiment, we find
Scanner2 produced a false positive under the SQL injection test.
Scanner2 recently incorporated an experimental module to find
blind SQL detection, by sending specially crafted parameters to
the web server. If the server returns different responses, then it
determines that the server has accepted and processed the parame-
ter (a.k.a vulnerable). However, this detection procedure fails on
a common e-commerce scenario: supporting multiple currencies.
OpenCart allows users to select the currency for a product. If a
currency is clicked, it updates the currency of the current page. The
server records all the parameters of the current page under a hid-
den field so that it can recreate the page later (Listing 1). Note that
Scanner2’s specially-crafted parameters are also recorded, which
makes Scanner2 believe that there exists a difference in the output
under different values of the parameter, which is actually a false
positive. Nevertheless, we fixed it by changing the BuggyCart
code to be certified by Scanner2.
Listing 1: The difference in the output after injecting a pa-
rameter named name with an empty value “” vs. “yy”.
−−−−−−−− vs −−−−−−−−
Network Traffic Analysis. We collected the incoming network
requests from each of the scanners using the access log of our
testbed. During the baseline experiment, Scanner5, Scanner6 and
Scanner3 sent 23,912, 39,836, and 31,583 requests, respectively and
finished within an hour. Scanner4 and Scanner1 sent 147,038 re-
quests and took more than 3 hours to finish. Scanner2 sent 64,033
requests within 2.5 hours. The reason why we received such a
high traffic volume is that the PCI scanners were attempting to
detect vulnerabilities such as XSS, SQL injection that require in-
tensive URL fuzzing, crawling and parameter manipulations. This
confirms that the PCI scanners have at least attempted to detect
such vulnerabilities but were just unsuccessful.
4.2 Impacts of Premature Certification
Some scanners choose to simply report vulnerabilities without
marking the e-commerce website as non-compliant. Below, we
discuss the security consequences of premature certifications. Some
of the incomplete scanning and premature certification issues can
be prevented, if the scanners follow the ASV guidelines [19].
Network Security Threats. According to the ASV scanning guide-
line, SSL/TLS vulnerabilities (Test cases 12–17) should lead to auto-
matic failure of certification, which is clearly necessary due to the
man-in-the-middle threats. Only Scanner2 detected all these cases.
Scanner3 does not detect any of these SSL/TLS vulnerabilities. In
addition, a website should be marked as non-compliant if sensitive
information is communicated over HTTP (Test case 7). However,
none of the ASV scanners detected this issue in our testbed. This
vulnerability can be avoided by configuring the server to automati-
cally redirect all the HTTP traffic to HTTPS. Because none of the 6
scanners detected this vulnerability, it is likely that this HTTP issue
exists on real-world e-commerce websites. Our later evaluation on
1,203 websites that process online payment shows 169 of them do
not redirect their HTTP traffic to HTTPS (Section 5).
Our Test case 2 embeds a database access vulnerability, allowing
the database to be accessible from the Internet. All the scanners
detected this vulnerability. However, only Scanner2 and Scanner5
mark this issue as an automatic failure (i.e., non-compliant). The
other scanners report it as “low/information”, not as a required
fix, despite the ASV scanning guideline [19] recommends that to
be marked as non-compliant. Our evaluation later on websites
that accept payment card transactions shows that 59 out of 1,203
websites opened the Mysql port (3306) to the Internet (Section 5).
System Security Threats. The ASV scanning guideline [19] sug-
gests to test and report vulnerable remote access software. 4 out of
the 6 scanners detected vulnerable OpenSSH software (Test case 19).
Under Test case 20, only Scanner2 detected vulnerable phpmyad-
min, while others failed. Although all scanners noticed the Test
case 29 (extracted server information), only Scanner2 required a fix
for compliance. The ASV scanning guideline [19] also recommends
reporting automatic failure if browsable web directories are found
(Test case 30). All scanners detected this vulnerability. Scanner6
detected missing security headers (Test case 33), but did not ask us
to fix it, while Scanner3 failed to detect it.
Web Application Threats. The scanners’ performance is partic-
ularly weak for this category. Out of the 8 test cases, only 2 were
detected by Scanner2 (tampered Javascript and CSRF). None of the
cases was detected by other PCI scanners.
4.3 Evaluation of Website Scanners
The above results suggest that some web application vulnerabilities
are difficult to detect. The follow-up question is, can specialized
website scanners detect these vulnerabilities? To answer this ques-
tion, we ran four website scanners on our BuggyCart testbed,
including two commercial ones (from Scanner2 and Scanner5) and
two open source scanners (w3af [4] and ZAP [2]). w3af and ZAP
are state-of-the-art open source web scanners, are actively being
maintained and are often used in academic research [49, 50, 67].
The two commercial web scanners are from reputable companies.
Scanner2W and Scanner2 are from the same company, where the
website scanner is marketed as a different product from PCI scanner.
It is the same for Scanner5W and Scanner5.
We conducted the baseline test for the four website scanners.
Note that these web scanners do not produce certificates. The re-
sults are shown in the last four columns of Table 3. Since they are
website scanners, we only expect them to cover web application vul-
nerabilities (Test case 7, 21, 22, 23, 24, 26, 27). Unfortunately, none
of the commercial scanners detect these web application vulnera-
bilities. W3af reported the use of HTTP protocol to communicate
sensitive information (case 7), but missed other web application
vulnerabilities. ZAP detected the SQL injection vulnerability in
the customer login page (case 22), but missed the SQL injection
vulnerability in the admin login page (case 21). Noticeably, ZAP
also missed the XSS vulnerability we implanted (case 27).
Summary of Testbed Findings. The detection capabilities vary
significantly across scanners. Our experiments show that 5 out of
6 PCI scanners are not compliant with the ASV scanning guide-
lines [19] by ignoring detected vulnerabilities and not making them
“automatic failures”. Most of the common web application vulnera-
bilities (e.g., SQL injection, XSS, CSRF) are not detected by the 6 PCI
scanners (only Scanner2 detected CSRF), despite the requirements
of the PCI guidelines. Out of the 4 website scanners, only ZAP
detected one of the two SQL injection cases.
Admittedly, black-box detection of vulnerabilities such as XSS
and SQL injection is difficult. Typical reasons for missed detection
are i) failure to locate the page due to incomplete discovery and/or
ii) that detection heuristics are limited or easily bypassed. In our
testbed, SQL injection vulnerabilities (21, 22) are placed in the login
pages. CSRF vulnerabilities are present in all forms. The scanners
we tested used web crawling with URL fuzzing to detect hidden
pages, URLs, and functions. Often, we are unable to pinpoint the
exact reasons why the tools fail in these cases. Novel detection
techniques, such as guided fuzzing [49] and taint tracking [73],
have been proposed by the research community. Future work is
needed to evaluate their applicability in the specific PCI context.
5 Measurement of Compliant Websites
The alarming security deficiencies in how PCI scanners conduct the
compliance certification motivate us to ask the following questions:
How secure are e-commerce websites? What are the main measurable
vulnerabilities in e-commerce websites? As such we designed another
set of real-world experiments where we aim to measure the security
of e-commerce websites with respect to the PCI DSS guideline. To
do so, we need to address several technical questions.
What Tools to Use? The key enabler of this measurement is a new
tool we developed named PciCheckerLite. We use basic Linux
tools (e.g., nc, openssl) and Java net URL APIs to implement the
system. Below, we focus on the key design concepts of PciCheck-
erLite in order to work with live websites.
What Security Properties to Check? A key requirement of this
experiment to make sure that we do not disrupt or negatively impact
websites being tested. Out of the 29 externally verifiable cases in Ta-
ble 3, we choose a subset of 17 cases for this experiment, as shown
in Table 5. The sole reason of selecting these cases for PciCheck-
erLite is that we could implement these tests in a non-intrusive
manner, leaving a minimum footprint, i.e., having a minimum im-
pact on the servers. We categorize these cases to high, medium
and low severity based on i) the attacker’s gain and ii) the attack
difficulty. Cases that are immediately exploitable by any arbitrary
attacker to cause large damages are highly severe, for example, the
use of default passwords (Test case 5), insecure communications
(Test cases 7, 12, 13, 16, 17), vulnerable remote access software (Test
case 19), browsable web directories (Test case 22), and supporting
HTTP TRACE method (Test case 23). Cases that substantially ben-
efit any arbitrary attacker but require some efforts to exploit are
marked as medium severity, e.g., test cases 2, 14, 15, 25, 29, and 33.
For example, scripts loaded from external sources can steal payment
card data (Test case 25), but attackers need to craft the malicious
scripts [32]. Low-risk issues are marked as low severity (Test case 3,
18). The categories are consistent with Table 3 as high and medium
severity cases correspond to “must-fix” vulnerabilities. The two
low-severity cases are not required to be fixed to be PCI-compliant.
Implementing PciCheckerLite. Our goal is to minimize the num-
ber of requests that PciCheckerLite issues per test case, while
maximizing the test case coverage. It involves a collection of light-
weight heuristics that merge multiple tests into a single request.
For example, for most of the HTTP-related tests, we reuse a single
response from the server. Test cases 25, 29, and 33 are covered and
resolved by one single HTTP request to retrieve the main page and
analyzing the response header. Test cases 12–18 are covered by
one certificate fetching. For case 30 (browsable directories enabled)
PciCheckerLite conducts a code-guided probe and avoids crawl-
ing web pages. It discovers file paths in the code of the landing
page and then probes the server with requests for accessing path
prefixes. The implementation details are given in the Appendix.
Table 4: Number of e-commerce websites that have at least
one vulnerability and those that have at least one “must-fix”
vulnerability. In total, 1,203 sites are tested including 810
sites chosen from different web categories, and 393 sites cho-
sen from different Alexa ranking ranges.
E-commerce Websites
# of Vulnerable Websites
Must-fix Vul.
All Vul.
Business (122)
Shopping (163)
Arts (78)
Adults (65)
Recreation (84)
Computer (57)
Games (42)
Health (60)
Home (102)
Kids & Teens (37)
Top (288)
Bottom (105)
106
135
66
61
70
53
38
54
82
31
235
100
113
143
76
65
75
56
42
55
93
36
277
104
1,031 (86%)
1,135 (94%)
Category (810)
Ranking (393)
Total (1,203)
How to Determine Whether a Website is PCI Compliant? It
is not easy to directly confirm whether a website is DSS compli-
ant or not, unless the website actively advertises this information.
While some cloud and service providers (e.g., Google Cloud [39],
Amazon Connect [12], Shopify [38], and Akamai [37]) advertise
their PCI compliance status, not all of them disclose such informa-
tion. However, as e-commerce websites need to show their DSS
compliance in order to work with acquirer banks (described in Sec-
tion 2), it is reasonable to assume that most websites we evaluated
have successfully passed the external scanning.
Website Selection. We use two different ways to select websites
to increase diversity. First, we downloaded 2,000 Alexa top websites
under 10 categories (200 websites per category) to observe security
compliance differences based on categories. In Table 4, we show the
category-wise breakdown. Among them, we manually identified
810 websites that make payment card transactions. This step is time-
consuming and usually requires manually visiting multiple pages
(e.g., one needs to visit multiple pages to get to the payment page
on nytimes.com). Second, to cover websites of different popularity
levels, we further select the top 500 and bottom 500 websites (1,000
in total) from Alexa top 1 million website list. We found 288 websites
from the top list and 105 websites from the bottom list that accept
payment card information (and do not overlap with the previous
811 websites). In total, 1,203 payment-cards-taking websites are
selected for scanning by PciCheckerLite.
Findings of E-commerce Website Compliance. 68 websites
fully passed our PciCheckerLite test, including the aforemen-
tioned cloud providers (Google Cloud, Amazon Connect, Shopify).
Our results also confirm that a number of actively operating web-
sites do not comply with the PCI Data Security Standard. As shown
in Table 4, out of the 1,203 websites, 1,135 (94%) have at least one
vulnerability. More importantly, 1,031 (86%) sites have at least one
vulnerability that belong to the “must-fix” vulnerabilities which
should have disqualified them as non-compliant. Among them, 520
(43%) sites even have two or more must-fix vulnerabilities.
Then as shown in Table 5, the shopping category has the lowest
percentage (87%) of vulnerable websites, while all other categories
have a percentage of over 90%. We found several types of high-
risk and medium-risk vulnerabilities, including leaving the Mysql
port (3306) open, using self-signed or expired certificates, wrong
hostnames in the certificate, enabling HTTP TRACE method, and
using vulnerable OpenSSH (7.5 or earlier). Supporting TLS v1.0
(low-risk level) is another most common vulnerability we detected
(Test case 18), likely due to the need for backward compatibility.
SSLv3.0 and TLSv1.0 are known to have multiple man-in-the-middle
vulnerabilities [40] and the PCI standard recommends that all web
servers and clients must transition to TLSv1.1 or above.
The vulnerabilities in these websites suggest the PCI scanners
used by the websites are inadequate and failed to detect the vulner-
abilities during the certification scans. Another possibility is that
the acquiring banks did not sufficiently examine the merchants’
quarterly security reports, allowing merchants to operate without
sending adequate security reports to banks as required.
Vulnerable Websites. Below, we highlight some interesting find-
ings without explicitly mentioning the names of vulnerable sites.
Mysql open ports. 59 websites expose the MySql service for remote
access. For example, two Slovenian websites that sell healthcare
products and car components and a Russian website that sells fur-
naces and stoves all have this vulnerability. We did not detect any
use of default user (root) or no password.
Insecure certificates (self-signed, expired, and insecure modulus). The
use of certificates with wrong hostnames (Figure 3 in Appendix) is