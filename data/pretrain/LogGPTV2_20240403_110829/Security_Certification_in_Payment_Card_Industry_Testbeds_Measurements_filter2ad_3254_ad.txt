# PCI DSS Compliance and Vulnerability Scanning Evaluation

## 1. Introduction
This document evaluates the performance of various PCI DSS (Payment Card Industry Data Security Standard) scanners in detecting and fixing vulnerabilities. The evaluation is based on a testbed with 29 externally detectable vulnerabilities, and the results highlight significant differences in scanner effectiveness.

## 2. Methodology
The methodology involves:
1. Running an initial PCI scan.
2. Fixing all detected vulnerabilities.
3. Re-running the scan to achieve PCI DSS compliance.
4. Recording the certified version of the testbed.

## 3. Scanner Performance Comparison
### 3.1 Overall Findings
- **Vulnerability Detection**: Scanners vary significantly in their ability to detect vulnerabilities.
- **Fix Requirements**: The number of vulnerabilities that need to be fixed to pass certification also varies.

### 3.2 Detailed Analysis
#### Scanner2
- **Detection**: Detected 21 out of 29 vulnerabilities.
- **Missed Cases**: Missed the use of HTTP for sensitive information (Case 7).
- **Fixes**: Fixed 21 vulnerabilities, including JavaScript source integrity checking (Case 25) and CSRF protection (Case 28).

#### Scanner5
- **Detection**: Detected 16 out of 29 vulnerabilities.
- **Missed Cases**: Failed to report certificate hostname issues and HTTP for sensitive information.
- **Fixes**: Fixed 13 vulnerabilities, with some fixed as side effects of other fixes.

#### Scanner1 and Scanner4
- **Detection**: Scanner1 detected 17 vulnerabilities but only required 10 to be fixed.
- **Missed Cases**: High and medium severity vulnerabilities not required to fix.
- **Fixes**: Weak hashing in SSL/TLS certificates fixed by using Let's Encrypt.

#### Scanner6 and Scanner3
- **Detection**: Not ASV-approved; detected fewer vulnerabilities.
- **Fixes**: Fixed 9 for Scanner6 and 3 for Scanner3.
- **Missed Cases**: SSL/TLS and certificate-related vulnerabilities.

### 3.3 False Positives
- **Scanner2**: Produced a false positive for SQL injection due to multi-currency support in OpenCart.

### 3.4 Network Traffic Analysis
- **Traffic Volume**: Varies from 23,912 to 147,038 requests.
- **Reasons**: Intensive URL fuzzing, crawling, and parameter manipulation for detecting XSS and SQL injection.

## 4. Impacts of Premature Certification
### 4.1 Network Security Threats
- **SSL/TLS Vulnerabilities**: Only Scanner2 detected all cases.
- **HTTP Communication**: None of the ASV scanners detected this issue, leading to potential man-in-the-middle attacks.

### 4.2 System Security Threats
- **Remote Access Software**: 4 out of 6 scanners detected vulnerable OpenSSH.
- **Browsable Web Directories**: All scanners detected, but only Scanner2 required a fix.

### 4.3 Web Application Threats
- **Detection**: Weak performance, with only Scanner2 detecting tampered JavaScript and CSRF.

## 5. Evaluation of Website Scanners
### 5.1 Commercial and Open Source Scanners
- **Commercial Scanners**: Did not detect web application vulnerabilities.
- **Open Source Scanners (w3af, ZAP)**: w3af detected HTTP for sensitive information, and ZAP detected one SQL injection case.

### 5.2 Summary of Testbed Findings
- **Detection Capabilities**: Vary significantly across scanners.
- **Compliance Issues**: 5 out of 6 PCI scanners are not fully compliant with ASV guidelines.
- **Web Application Vulnerabilities**: Mostly undetected, despite PCI requirements.

## 6. Measurement of Compliant Websites
### 6.1 PciCheckerLite Tool
- **Purpose**: Measure security of e-commerce websites.
- **Design**: Minimizes requests and maximizes test coverage.

### 6.2 Security Properties Checked
- **Non-Intrusive Tests**: 17 out of 29 cases, categorized by severity.
- **High Severity**: Default passwords, insecure communications, remote access software.
- **Medium Severity**: Scripts from external sources, missing security headers.
- **Low Severity**: Low-risk issues not required to be fixed.

### 6.3 Implementation
- **Heuristics**: Merges multiple tests into single requests.
- **Certificate Fetching**: Covers multiple test cases.
- **Code-Guided Probing**: Avoids web page crawling.

### 6.4 Website Selection
- **Categories**: 810 websites from 10 categories.
- **Ranking**: 393 websites from top and bottom Alexa rankings.
- **Total**: 1,203 payment-card-taking websites.

### 6.5 Findings
- **Compliance**: 68 websites fully passed the test.
- **Vulnerabilities**: 1,135 (94%) have at least one vulnerability, 1,031 (86%) have must-fix vulnerabilities.
- **High-Risk Vulnerabilities**: Open MySQL ports, self-signed or expired certificates, wrong hostnames, enabling HTTP TRACE method, and vulnerable OpenSSH.

## 7. Conclusion
The evaluation highlights the inadequacy of many PCI scanners in detecting and fixing critical vulnerabilities. This suggests a need for more rigorous testing and better adherence to ASV guidelines to ensure the security of e-commerce websites.