                elif sig_offset in cond_offsets:
                    # 条件跳转
                    inst = instruction()
                    inst.type = inst_type.COND
                    inst.address = []
                    ins.append(inst)
                    for k in range(2):
                        pc_next = cond_targets[cond_offsets.index(sig_offset)][k] + sig_addr
                        inst.address.append(pc_next)
                        # 递归进行
                        extract_procedures(pc_next, ins)
                    break
                else:
                    exit(-1)
            elif pc in codes.keys():
                # 不是桩
                sig_code = codes[pc]
                ins_f = ins_find(ins, pc)
                if ins_f is None:
                    # 没走过存入列表
                    inst = instruction()
                    inst.type = inst_type.INS
                    inst.address = pc
                    inst.code = sig_code
                    ins.append(inst)
                else: 
                    # 走过的路径直接跳转过去
                    inst = instruction()
                    inst.type = inst_type.B
                    inst.address = pc
                    ins.append(inst)
                    break
                pc += len(sig_code)
            else:
                # 程序流结束
                inst = instruction()
                inst.type = inst_type.B
                inst.address = pc
                ins.append(inst)
                break
    # 汇编中被跳转的地址需要有个Label
    def fix_tag(ins):
        for inst in ins:
            if inst.type == inst_type.COND:
                for a in inst.address:
                    ins_f = ins_find(ins, a)
                    ins_f.tag = True
            elif inst.type == inst_type.B:
                ins_f = ins_find(ins, inst.address)
                if inst.address != 6452:
                    ins_f.tag = True
    instructions = []
    pc_init = 0xA64
    extract_procedures(pc_init, instructions) 
    fix_tag(instructions)
    ks = Ks(KS_ARCH_ARM, KS_MODE_THUMB)
    cs = Cs(CS_ARCH_ARM, CS_MODE_THUMB)
    asm = ''
    # 原函数开始
    for i in cs.disasm(repair_bytes[0xA54:0xA66], 0x10A54):
        asm += "\t%s\t%s\r\n" % (i.mnemonic, i.op_str)
    # 按提取的指令还原程序流
    for p in instructions:
        if p.tag: 
            # 被跳转目标的Label
            asm += "pos_%d:\r\n" % p.address
        if p.type == inst_type.INS:
            # 原代码直接复制
            for i in cs.disasm(p.code, p.address + 0x10000):
                asm += "\t%s\t%s\r\n" % (i.mnemonic, i.op_str)
        elif p.type == inst_type.B:
            # 跳转
            asm += "\tb pos_%d\r\n" % p.address