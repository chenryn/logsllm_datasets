The Snoopy proof-of-concept was released in 2012 and 
demonstrated the ability to track and profile individuals based on 
the W-Fi signal their smart phones emitted. Insights gained 
included: 
1. 
Visited locations based on geo-locating SSIDs 
2. 
Interpersonal relationships based on common SSIDs 
3. 
Interpersonal relationships based on SSID country 
4. 
Personal details extracted from intercepted traffic 
CreepyDOL is a tool that performs some similar tasks, but only 
syncs data via Wi-Fi and uses a game engine for data exploration 
[9]. Mathieu Cunche has released numerous papers and tools 
exploring this arena [3-7].  
5. SNOOPY 
In this section we present and discuss the Snoopy framework. 
Snoopy is a distributed, sensor, data collection, interception, 
analysis, and visualization framework. It is written in a modular 
format, allowing for the collection of arbitrary data from various 
sources via the writing of simple Python plugins. For example, 
adding a Greentooth plugin for a newly developed wireless 
communication protocol would require minimal work, providing 
that libraries exist to interact with the technology. 
5.1 Architecture 
The framework consists of client devices, known as drones and 
optional server devices. Each Snoopy instance can run multiple 
plugins simultaneously. Each plugin collects data, which is 
queried by the main Snoopy process and written to a local 
database. Snoopy can sync data between drones and a server, or 
@glennzw // DefCon 22 August 2014 
drones can pull replicas of data from a server. Each Snoopy 
instance can run different plugins appropriate for its position in 
the greater picture.  
Figure 1 illustrates one possible setup, whereby three drones 
collect data, and sync to two separate servers. One syncs over 3G, 
the other two over Xbee. The second server syncs its data to a 
third server. Finally, a client laptop pulls data from the first and 
third servers, and runs data exploration tools to examine the data. 
The solid lines arrow lines denote a push; the dashed arrow lines 
denoted a pull. 
Figure 1 - Architecture Diagram 
5.2 Data Collection 
As mentioned in Section 5.1 the Snoopy framework can run 
multiple plugins simultaneously. For example, collecting data via 
W-Fi, Bluetooth, GSM, and GPS. It is trivial to add plugins for 
any device for which Python code can be written for. See Table 2 
for a list of currently available plugins. 
Table 2 - Existing plugins 
Name 
Description 
c80211 
Will monitor a supplied network interface (which 
may be automatically put into monitor mode). A 
series of sub-plugins exist, such that each captured 
packet is passed to each sub-plugin. The existing 
sub-plugins perform: 
• Note client Wi-Fi proximity 
• Extract vendors from observed MAC addresses 
• Note Access Points 
• Collect (actively or passively) WPA handshakes 
• Extract session cookies from browsed websites 
• Extract Apple GUID numbers. 
bluetooth 
Discovers Bluetooth devices. 
gpsd 
Queries gpsd server for GPS co-ordinates. 
hearbeat 
Returns a hearbeat every 60 seconds. 
local_sync 
Pull database from remote server and sync it into 
the local one. 
mitmproxy 
Runs a man-in-the-middle proxy server capable of 
modifying traffic or saving certain data (e.g. 
credentials). 
rogueAP 
Creates a rogue Wi-Fi access point, with the option 
to behave promiscuously. 
server 
Runs a server - allowing local data to be 
synchronized remotely. 
sysinfo 
Retrieves system information, every 30 minutes. 
wigle 
Looks up SSID locations via Wigle (from the ssid 
table). 
gsm 
Identify mobile phones based on unique identifiers 
such as IMSEI and TMSEI. 
fitTech 
Identify fitness apparel, such as FitBit. 
ant 
Identify ANT devices (used by cyclists). 
NFC 
Identify NFC devices. 
RFID 
Identify RFID devices. 
sdr 
Identify devices by using Software Defined Radio. 
E.g. 
garage 
doors, 
care 
remotes, 
airplane 
transponders. 
The snippet below illustrates basic usage, with a single plugin 
(c80211). The ‘-d’ flag specifies the arbitrary name of the drone, 
and the ‘-l’ flag specifies the arbitrary location name. 
# snoopy -m c80211:iface=mon0 -d myDrone -l heathrow 
[+] Starting Snoopy with plugins: c80211 
[+] Capturing local only. Saving to 'sqlite:///snoopy.db' 
[+] Waiting for plugin 'c80211' to indicate it's ready 
[+] Starting sniffing on interface 'mon0' 
[+] Plugin 'c80211' has indicated it's ready. 
[+] Done loading plugins, running... 
By default, data will be saved to a SQLite file (snoopy.db) in the 
working directory. This can be overridden with the --dbms option, 
as demonstrated below. 
# snoopy --dbms mysql://glenn:secret@localhost/snoopy_db 
The following database engines are supported: Drizzle, Firebird, 
Microsoft SQL Server, MySQL, Oracle, PostgreSQL, and SQLite 
5.3 Data Synchronization 
Data may be synchronized from drone to server (push), or server 
to drone (pull). 
Server 
# snoopy_auth --create myDrone01 
[+] Creating new Snoopy server sync account 
[+] Key for 'myDrone01' is 'GWWVF' 
# snoopy --plugin server 
[+] Running webserver on '0.0.0.0:9001' 
[+] Plugin server caught data for 2 tables. 
Drone 
# snoopy -m c80211:iface=mon0 -d myDrone -l heathrow -k 
GWWVF -s http://:9001/ 
[+] Snoopy successfully sunc 2 elements over 2 tables. 
Plugins:
 * Wi-Fi
 * Bluetooth
 * GSM
 * Fitbit
Plugins:
 * Wi-Fi
 * Cookie thief
 * GPS
Plugins:
 * Thermal
 * Camera
 * Wi-Fi
Plugins:
 * Server
Plugins:
 * Server
 * Heartbeat
Plugins:
 * Server
 * Geolocation
 * DataViz
3G
3G
XBee
      Plugins:
       * RemotePull
      Run:
       * Maltego
Drone01
Drone02
Drone03
Server01
Server02
Server03
Laptop01
Internet
@glennzw // DefCon 22 August 2014 
The pull operation acquires a replica of all data on the server. This 
option is illustrated below. 
Drone 
# snoopy -m local_sync:server_url=http://:9001/ -
d myDrone -m –k GWWVF 
[+] Plugin local_sync pulled 138 records from remote 
server. 
5.4 Data Visualization & Exploration 
Data is stored in a database, and may be queried in several ways. 
The most trivial is to use the appropriate command line tool (for 
example, sqlite3 if saving in SQLite format). The preferred 
method is with Maltego, a data visualization and graphing engine. 
Entities are populated onto a canvas, and transforms can be run 
against them, to query data. Transforms may either be run locally, 
or via a remote Transform Distribution Server  (TDS) server. The 
benefit of running queries against a TDS server is that the analyst 
laptop does not require any additional libraries or tools, and only 
requires the Maltego software. This is depicted in Figure 2. 
Figure 2 - Maltego TDS 
A simple web interface also allows exploration of data. This 
includes plotting of data onto a map, by both time series data, and 
static. 
5.5 Modes of Operation 
The drone devices have five broad deployment options defined by 
the environment they are to be used in. These are Sentry, Mobile, 
Aerial, Ground Vehicle, and Telescope. 
5.5.1 Sentry 
The Sentry configuration consists of a more ruggedized enclosure 
with a long life battery and/or a solar cell. It is intended to be 
deployed for medium to long term in an environment exposed to 
the elements (for example, under a park bench, on a telegraph 
pole, or in a tree).  
5.5.2 Mobile 
Snoopy has been tested on two consumer mobile platforms, 
namely the Google Nexus 7 and the Nokia N900. Running the 
software from such a device would lower suspicion, due to the 
perceived harmless nature of the device. 
The GPS plugin collects positional data to compliment this mode 
of operation. 
5.5.3 Aerial 
A Snoopy drone running on a BeagleBone single board computer 
has been successfully deployed on an Autonomous Aerial Vehicle 
(UAV), thus enabling beyond line-of-sight data collection. It is 
possible to search for and follow a known DTF with this mode by 
instructing the on-board flight controller. See Section 5.7 for a 
further discussion. 
The GPS plugin collects positional data to compliment this mode 
of operation. 
5.5.4 Ground Vehicle 
Similarly to the above aerial scenario, a drone has been 
successfully deployed in a motor vehicle and bicycle. 
The GPS plugin collects positional data to compliment this mode 
of operation 
5.5.5 Telescope 
The telescope configuration denotes using a high gain / high 
sensitivity antenna from a distant vantage point. It is intended to 
‘sweep’ an area to collect DTFs, or to discover the general 
location of a known DTF (thereafter allowing mobile and/or aerial 
units to discover the precise location of the DTF). 
5.6 Search Patterns 
Figure 3 illustrates a spiral search pattern. At time t=0 the drone 
begins its search for a known DTF. It ascends to a fixed altitude, 
and performs an outward spiralling pattern until obtaining the 
desired DTF. At this point, the unit may simply take a photograph 
and return, or maintain a follow pattern (see Section 5.7). Multiple 
drones can combine this strategy over a large area, with each 
having a designated area to search. 
Figure 3 - Spiral Search Pattern for Known DTF 
5.7 Trilateration & Follow 
Whilst triangulation uses angles to locate points, trilateration 
uses lateral distances (this is the technique used with GPS 
t=0
t=10
@glennzw // DefCon 22 August 2014 
satellites). If three positions (P1, P2, P3) are known, as well as the 
distance from each point (r1, r2, r3), then the formed overlapping 
circles can estimate a position relative to the three points. This can 
lend itself to the situation whereby three drones (or one drone in 
motion, with a reading from three positions) can determine the 
position of a DTF relative to their own GPS co-ordinates (see 
Figure 4). The distance metric can be calculated by the dB signal 
strength of a DTF. The free-space path loss (FSPL) characterizes 
how a wireless signal degrades over distance (following an 
inverse square law). This is illustrated by the following equation: 
FSPL(dB) = 20log10(d)+ 20log10( f )+ 92.45 
The constant value of 92.45 will vary depending on the units 
chosen for other measurements. In the standard example above 
GHz and kilometers are used for frequency and distance, 
respectively. Other authors [27] recommend a value of -27.55, 
which treats frequency in MHz and distance in meters. The 
equation can be used to solve for d in Python as follows: 
def calcDistance(db, freq): 
    exp = (27.55 - (20 * math.log10(freq) + db) / 20.0 
    return math.pow(10.0, exp) 
This technique will work significantly better for tracking outdoor 
signals due to lack of obstruction, thus simplifying the free space 
calculations. 
Figure 4 – Trilateration of Known DTF 
5.8 Hardware 
Snoopy will run on any modern Linux based device, with the 
appropriate peripherals for the desired plugins. It has been tested 
on a laptop, the Nokia N900 (running Maemo Linux), the Nexus 7 
tablet, and the BeagleBone Black single board computer. The later 
is the preferred method of deployment. Table 3 lists several 
hardware peripherals for collecting data of several technologies. 
Table 3 - Sample peripheral devices 
Technology 
Hardware 
Wi-Fi 
AWUS 036H 
Bluetooth 
Ubertooth 
ZigBee 
Digi Xbee 
GSM 
RTL2832U SDR 
RFID 
RFidler 
NFC 
ACR122U 
6. RESULTS 
The framework has been tested in numerous environments, two of 
which will be discussed here. The first involved a 14-hour 
deployment at a busy train station in London. The second 
involved collecting data at numerous security conferences over 
the period of one year. At the time of writing, the Wi-Fi plugin 
generates the most comprehensive DTF, and thus results from this 
plugin are discussed in this section. 
6.1 Train Station 
The framework was run on a laptop whilst sitting at King’s Cross 
railway station in London on the 23rd August 2012. During the 14-
hour experiment 42,480 unique devices were observed. Figure 5 
illustrates the distribution of observed devices, with clear peaks 
observed during the morning, lunch, and evening periods. Figure 
6 illustrates the proportion of this number per manufacturer (as 
determined by devices’ MAC addresses). 
Figure 5 – Devices at Kings Cross station 
Figure 6 - Proportions by manufacturer, Kings Cross station 
6.2 Security Conferences 
The framework was run at numerous security conferences over a 
two-year period. Table 4 lists the number of devices that were 
observed at the events, along with the approximate number of 
attendees. 
AerialDrone02
AerialDrone01
AerialDrone03
0"
500"
1000"
1500"
2000"
2500"
3000"
3500"
4000"
4500"
5000"
07:00"
to"
07:59"
08:00"
to"
08:59"
09:00"
to"