CACHE MANIFEST 
# 2010-06-18:v2 
# Explicitly cached entries 
CACHE: 
index.html 
stylesheet.css 
images/logo.png 
scripts/main.js 
ApplicaYon	
  Cache	
  (conYnued)	
•  Example	
  2,	
  updaYng	
  ApplicaYon	
  Cache:	
applicationCache.addEventListener('checking', 
updateCacheStatus, false); 
Poisoning	
  the	
  ApplicaYon	
  Cache	
•  Any	
  website	
  can	
  create	
  a	
  cache	
  on	
  the	
  user's	
computer	
•  No	
  permission	
  required	
  before	
  allowing	
  a	
  site	
  to	
create	
  an	
  applicaYon	
  cache	
  in	
  Chrome	
  or	
  Safari	
•  Any	
  ﬁle	
  can	
  be	
  cached	
  including	
  the	
  root	
  ﬁle	
  "/"	
•  The	
  catch:	
  even	
  if	
  a	
  root	
  resource	
  is	
  cached	
normally	
  and	
  on	
  refresh,	
  the	
  normal	
  cache	
  is	
updated	
  but	
  not	
  the	
  ApplicaYon	
  Cache	
•  Read:	
hdp://blog.andlabs.org/2010/06/chrome-­‐and-­‐
safari-­‐users-­‐open-­‐to-­‐stealth.html	
Cross-­‐Origin	
  JavaScript	
  Requests	
  (or	
Cross-­‐Origin	
  Resource	
  Sharing)	
• 
Not	
  directly	
  part	
  of	
  HTML5	
  but	
  introduced	
  by	
  W3C	
• 
XDomainRequest()	
  created	
  by	
  MicrosoC	
  in	
  Internet	
  Explorer	
  8	
• 
In	
  some	
  cases,	
  XMLHttpRequest()	
  now	
  allow	
  cross-­‐domain	
requests	
  (Firefox	
  3.5+	
  and	
  Safari	
  4+)	
• 
Caveat:	
  consent	
  between	
  web	
  page	
  and	
  the	
  server	
  is	
  required.	
–  Server	
  must	
  respond	
  with	
  an	
  Access-Control-Allow-Origin	
  header	
  of	
either	
  *	
  (a.k.a.,	
  universal	
  allow,	
  not	
  good!)	
  or	
  the	
  exact	
  URL	
  of	
  the	
  requesYng	
  page	
(site-­‐level;	
  white-­‐list)	
–  Example	
  1	
  (BAD!):	
  header('Access-Control-Allow-Origin: *'); 
–  Example	
  2	
  (BAD!):	
  Access-Control-Allow-Origin: http://
allowed.origin/page?cors=other.allowed.origin
%20malicious.spoof 
• 
ResoluYons:	
–  Add	
  some	
  form	
  of	
  authenYcaYon	
  /	
  credenYals	
  checking	
  (e.g.,	
  cookie)	
–  Validate	
  response	
Cross-­‐Document	
  Messaging	
• 
Establish	
  a	
  communicaYon	
  channel	
  between	
  frames	
  in	
  diﬀerent	
  origins	
• 
Requires	
  sender	
  and	
  receiver	
• 
Sender:	
  window.postMessage("message", "targetOrigin"); 
• 
Demo	
• 
Watch	
  out!	
  If	
  you	
  are	
  the	
  receiver	
  of	
  a	
  message	
  from	
  another	
  site,	
  verify	
  the	
sender's	
  idenYty	
  using	
  the	
  origin	
  property.	
  Example	
  (receiver):	
window.addEventListener("message", receiveMessage, false); 
function receiveMessage(event) 
{ 
  if (event.origin !== "http://example.org") { 
  … 
  … 
  … 
  } 
} 
Web	
  Workers	
• 
Very	
  powerful	
  stuﬀ;	
  allows	
  background	
  computaYonal	
  tasks	
  via	
JavaScript	
  -­‐-­‐think	
  threads	
• 
Really	
  simple:	
  instanYate	
  a	
  Worker	
  object	
  in	
  JavaScript	
• 
Example:	
  var w = new Worker("some_script.js"); 
• 
w.onmessage = function(e) { // do something }; 
• 
To	
  terminate	
  a	
  worker:	
  w.terminate(); 
• 
Caveat:	
  web	
  workers	
  cannot	
  run	
  locally	
  (i.e.,	
  file:///)	
• 
Same-­‐origin	
  security	
  principle	
  applies	
• 
Things	
  that	
  a	
  worker	
  have	
  access	
  to:	
  XHR,	
  navigator	
  object,	
  applicaYon	
cache,	
  spawn	
  other	
  workers!	
• 
Things	
  that	
  a	
  worker	
  does	
  not	
  have	
  access	
  to:	
  DOM,	
  window,	
  document	
objects	
• 
What	
  you	
  could	
  do	
  with	
  a	
  worker:	
  use	
  your	
  wildest	
  imaginaYon…	
But	
  What	
  About	
  the	
  New	
  HTML5	
  Tags	
and	
  Adributes?	
• 
Depends	
  on	
  browser,	
  spec	
  of	
  codec	
  or	
  format	
• 
NaYve	
  audio	
  and	
  video	
  rendering	
  (read:	
  and	
  ).	
  What	
  if	
  there	
are	
  ﬂaws	
  in	
  the	
  codec?	
• 
On	
  some	
  browsers	
  (e.g,	
  Firefox	
  or	
  with	
• 
Example:	
• 
Heap	
  buﬀer	
  overﬂow	
  via	
  transformaYons	
  and	
  painYng	
  in	
  HTML5	
  canvas	
  in	
  Opera.	
hdp://www.opera.com/support/kb/view/966/	
  (ﬁxed)	
• 
What	
  if	
  an	
  inline	
  SVG	
  call	
  contains	
  JavaScript	
  and	
  HTML?	
  Example	
  (this	
  works	
  in	
Firefox	
• 
PotenYal	
  client-­‐side	
  ReDoS	
  via	
  padern	
  adribute	
  in	
  input	
  (Opera	
  10+)	
–  Example:	
Summary	
•  A	
  lot	
  of	
  same	
  old	
  problems,	
  same	
  old	
  resoluYons	
(read:	
  common	
  sense,	
  input	
  validaYon,	
  be	
  careful	
connecYng	
  to	
  an	
  unsecured	
  network	
  /	
  public	
  Wi-­‐
Fi)	
•  Important	
  to	
  remember:	
  HTML5	
  standard	
  is	
  sYll	
work-­‐in-­‐progress,	
  being	
  ﬁnalized,	
  and	
  evolving...	
•  ...but	
  at	
  the	
  same	
  Yme,	
  the	
  spike	
  of	
  i{Phone,	
  Pod	
Touch,	
  Pad},	
  Android,	
  and	
  other	
  mobile	
  devices	
that	
  do	
  not	
  support	
  Flash	
  has	
  spurred	
  the	
  growth	
and	
  interest	
  in	
  HTML5.	
  Alas,	
  HTML5	
  and	
  its	
security	
  issues	
  cannot	
  be	
  ignored.	
References	
  and	
  Resources	
• 
HTML5	
– 
hdp://www.html5rocks.com/	
– 
hdp://html5doctor.com/introducing-­‐web-­‐sql-­‐databases/	
– 
hdp://www.webreference.com/authoring/languages/html/HTML5-­‐Client-­‐Side/	
• 
HTML5	
  Security	
– 
hdp://www.darkreading.com/vulnerability-­‐management/167901026/security/applicaYon-­‐security/
224701560/index.html	
– 
hdp://www.nyYmes.com/external/idg/2010/08/20/20idg-­‐html5-­‐raises-­‐new-­‐security-­‐issues-­‐59174.html	
– 
hdp://www.veracode.com/blog/2010/05/html5-­‐security-­‐in-­‐a-­‐nutshell/	
– 
hdp://www.eweek.com/c/a/Security/HTML5-­‐Security-­‐Facts-­‐Developers-­‐Should-­‐Keep-­‐in-­‐Mind-­‐551353/	
– 
hdp://threatpost.com/en_us/blogs/security-­‐concern-­‐html5-­‐gains-­‐tracYon-­‐091610	
– 
hdp://stackoverﬂow.com/quesYons/787067/is-­‐there-­‐a-­‐xdomainrequest-­‐equivalent-­‐in-­‐ﬁrefox	
– 
hdp://www.andlabs.org/html5.html	
– 
hdp://heideri.ch/jso/	
– 
hdp://code.google.com/p/html5security/	
– 
hdp://michael-­‐coates.blogspot.com/2010/07/html5-­‐local-­‐storage-­‐and-­‐xss.html	
– 
hdp://spareclockcycles.org/2010/12/19/d0z-­‐me-­‐the-­‐evil-­‐url-­‐shortener/	
– 
hdp://blogs.forbes.com/andygreenberg/2010/11/04/html5-­‐tricks-­‐hijack-­‐browsers-­‐to-­‐crack-­‐passwords-­‐
spew-­‐spam/	
– 
hdp://mashable.com/2011/04/29/html5-­‐web-­‐security/