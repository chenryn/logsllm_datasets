# Application Cache Manifest
```
CACHE MANIFEST
# 2010-06-18:v2
# Explicitly cached entries
CACHE:
index.html
stylesheet.css
images/logo.png
scripts/main.js
```

## Application Cache
### Example 2: Updating the Application Cache
```javascript
applicationCache.addEventListener('checking', updateCacheStatus, false);
```

### Poisoning the Application Cache
- Any website can create a cache on the user's computer.
- No permission is required before allowing a site to create an application cache in Chrome or Safari.
- Any file can be cached, including the root file `/`.
- The catch: even if a root resource is cached normally and on refresh, the normal cache is updated, but not the Application Cache.
- For more information, read: [Chrome and Safari Users Open to Stealth](http://blog.andlabs.org/2010/06/chrome-and-safari-users-open-to-stealth.html)

## Cross-Origin JavaScript Requests (or Cross-Origin Resource Sharing)
- Not directly part of HTML5 but introduced by W3C.
- `XDomainRequest()` was created by Microsoft in Internet Explorer 8.
- In some cases, `XMLHttpRequest()` now allows cross-domain requests (Firefox 3.5+ and Safari 4+).
- **Caveat:** Consent between the web page and the server is required.
  - The server must respond with an `Access-Control-Allow-Origin` header of either `*` (universal allow, not recommended) or the exact URL of the requesting page (site-level; white-list).
  - **Example 1 (BAD!):** `header('Access-Control-Allow-Origin: *');`
  - **Example 2 (BAD!):** `Access-Control-Allow-Origin: http://allowed.origin/page?cors=other.allowed.origin%20malicious.spoof`
- **Resolutions:**
  - Add some form of authentication/credentials checking (e.g., cookie).
  - Validate response.

## Cross-Document Messaging
- Establishes a communication channel between frames in different origins.
- Requires a sender and a receiver.
- **Sender:**
  ```javascript
  window.postMessage("message", "targetOrigin");
  ```
- **Receiver:**
  ```javascript
  window.addEventListener("message", receiveMessage, false);

  function receiveMessage(event) {
    if (event.origin !== "http://example.org") {
      // Handle message from untrusted origin
    }
  }
  ```

## Web Workers
- Very powerful; allows background computational tasks via JavaScript (think threads).
- **Simple Usage:**
  ```javascript
  var w = new Worker("some_script.js");

  w.onmessage = function(e) {
    // Do something with the message
  };

  // To terminate a worker
  w.terminate();
  ```
- **Caveat:** Web workers cannot run locally (i.e., `file:///`).
- **Same-origin security principle applies.**
- **Things a worker has access to:**
  - XHR, navigator object, application cache, spawn other workers.
- **Things a worker does not have access to:**
  - DOM, window, document objects.
- **What you could do with a worker:**
  - Use your wildest imaginationâ€¦

## New HTML5 Tags and Attributes
- Depends on the browser, spec of codec, or format.
- Native audio and video rendering (read: `<audio>` and `<video>`). What if there are flaws in the codec?
- **Example:**
  - Heap buffer overflow via transformations and painting in HTML5 canvas in Opera. [More details](http://www.opera.com/support/kb/view/966/)
- **Potential issues:**
  - If an inline SVG call contains JavaScript and HTML.
  - Potential client-side ReDoS via pattern attribute in input (Opera 10+).

## Summary
- Many of the same old problems with the same old resolutions (common sense, input validation, be careful connecting to unsecured networks/public Wi-Fi).
- Important to remember: The HTML5 standard is still a work-in-progress, being finalized, and evolving.
- The spike in iPhone, iPod Touch, iPad, Android, and other mobile devices that do not support Flash has spurred the growth and interest in HTML5. Thus, HTML5 and its security issues cannot be ignored.

## References and Resources
- **HTML5:**
  - [HTML5 Rocks](http://www.html5rocks.com/)
  - [Introducing Web SQL Databases](http://html5doctor.com/introducing-web-sql-databases/)
  - [HTML5 Client-Side Features](http://www.webreference.com/authoring/languages/html/HTML5-Client-Side/)

- **HTML5 Security:**
  - [Dark Reading: HTML5 Raises New Security Issues](http://www.darkreading.com/vulnerability-management/167901026/security/application-security/224701560/index.html)
  - [New York Times: HTML5 Raises New Security Issues](http://www.nytimes.com/external/idg/2010/08/20/20idg-html5-raises-new-security-issues-59174.html)
  - [Veracode Blog: HTML5 Security in a Nutshell](http://www.veracode.com/blog/2010/05/html5-security-in-a-nutshell/)
  - [eWeek: HTML5 Security Facts Developers Should Keep in Mind](http://www.eweek.com/c/a/Security/HTML5-Security-Facts-Developers-Should-Keep-in-Mind-551353/)
  - [Threat Post: Security Concern as HTML5 Gains Traction](http://threatpost.com/en_us/blogs/security-concern-html5-gains-traction-091610)
  - [Stack Overflow: XDomainRequest Equivalent in Firefox](http://stackoverflow.com/questions/787067/is-there-a-xdomainrequest-equivalent-in-firefox)
  - [Andlabs: HTML5 Security](http://www.andlabs.org/html5.html)
  - [Heiderich: JSON Hijacking](http://heideri.ch/jso/)
  - [Google Code: HTML5 Security Project](http://code.google.com/p/html5security/)
  - [Michael Coates: HTML5 Local Storage and XSS](http://michael-coates.blogspot.com/2010/07/html5-local-storage-and-xss.html)
  - [Spare Clock Cycles: d0z.me Evil URL Shortener](http://spareclockcycles.org/2010/12/19/d0z-me-the-evil-url-shortener/)
  - [Forbes: HTML5 Tricks to Hijack Browsers](http://blogs.forbes.com/andygreenberg/2010/11/04/html5-tricks-hijack-browsers-to-crack-passwords-spew-spam/)
  - [Mashable: HTML5 Web Security](http://mashable.com/2011/04/29/html5-web-security/)