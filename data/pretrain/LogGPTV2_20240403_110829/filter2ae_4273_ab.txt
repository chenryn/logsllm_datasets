                        System.out.println(this.standardContext);
                        // 添加内存马
                        return;
                    }
                } catch (Exception e) {
                    continue;
                }
                if (children == null) {
                    continue;
                }
            }
        }
    }
测试的时候，把代码改造成jsp文件，放到不同Tomcat版本下测试即可。很可惜，这个方法只兼容Tomcat 678，在Tomcat
9中，线程数组里面没有StandardEngine这个线程了
## 2.3 Acceptor
没有了StandardEngine，那Tomcat就不开一个线程来接收http请求吗。在线程数组中继续寻找，发现每个Tomcat版本下，都会开一个Http-xio-端口-Acceptor的线程，Acceptor是用来接收请求的，这些请求自然会交给后面的Engine->Host->Context->servlet，关系图如下
顺藤摸瓜，从Acceptor一步一步找到了StandardEngine，后面获取StandardContext的流程和2.2中一样
经过测试，图中的获取流程在Tomcat
678可用的，而Tomcat9只需要将this$0替换成endpoint，container替换成engine。所以可用做到tomcat
6789全版本兼容，大致的流程如下
    tomcat678 currentThread -> threadGroup -> for(threads) ->target
        ->this$0->handler->proto->adapter->connector->service->container
            ->children(一个HashMap，get获取standardHost)->standardHost->children(一个HashMap，get获取standardContext)
    tomcat9 target->*endpoint*->handler->proto->adapter->connector->service-> *engine*
JSP代码如下：
​
这里就直接给出jsp代码，同时去除了代码注释避免报错，方便师傅们测试。另外，在Tomcat下还有一个Poller线程，它和Acceptor一起负责接收请求，在Poller线程中同样可用找到StandardEngine，流程和Acceptor是一样的，就不重复写了。
​
如果使用反序列化或者JNDI注入向Tomcat植入内存马，可用找到的代码比较多，本文的方法可用放在前面作为获取StandardContext的部分，后面向Tomcat添加内存马的部分就不重复造轮子了。
# 3 参考链接
[Tomcat
Acceptor/Poller](https://blog.csdn.net/u011385186/article/details/53148702)
[Java安全之基于Tomcat实现内存马](https://www.cnblogs.com/nice0e3/p/14622879.html)
[Shiro RememberMe 漏洞检测的探索之路](https://blog.xray.cool/post/how-to-find-shiro-rememberme-deserialization-vulnerability/)