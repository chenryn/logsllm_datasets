7:
8:
9:
10:
11: end for
12: tp[] = p[0 : end − 1]
p[tpN um + +] ← getOverlapP oints(line[i])
end if
p[tpN um + +] ← getT urningP oints(line[i])
end for
(a) overlapping lines
(b) enlargement of timeframe
Figure 9. Separating two overlapping line segments by checking the number
of overlapping points within a timeframe.
collection of line segment prosperities, P = {L, D}. Here
L = {l1, l2,··· , ln} is a collection of the lengths of all line
segments (that are numbered from 1 to n) of the pattern, and
D = {d1, d2,··· , dn} is the collection of directions for all
line segments in L. Algorithm 3 describes how P is extracted.
We extract the length and the direction of each line segment
from the tracked ﬁngertip movement trajectory and store them
into arrays L[] and D[] respectively.
Identify Line Segments The ﬁrst step of geometry information
extraction is to identify individual line segments from the
trajectory. This can be achieved by ﬁnding turning points, the
start and the end points of the pattern, because two points
deﬁne a line segment. For example, turning points, A and B,
in Figure 8 deﬁnes a line segment, AB. In Algorithm 2, we use
a linear ﬁtting method [17] to discover turning points (line 3).
7
A speciﬁc challenge here is how to separate two overlapping
line segments (see Figure 12 c for an example). It is to note
that up to two lines can be overlapped on a pattern grid. The
naive linear ﬁtting algorithm would consider two overlapping
segments to be a single line as their points stay close to
each other. We overcome this problem by using the temporal
information (that is recorded by the tracking algorithm) to
separate two overlapping points. To do so, we visit all tracked
points of each line segment given by the linear ﬁtting algorithm
(line 5) within a timeframe (timeTh) of 20 video frames for a
video of 30 FPS (40 for a video of 60 FPS). For each point,
we calculate its Euclidean distances to all other points within
the timeframe. We consider two points to be overlapping if
their distance is less than 5 pixels. For a video shot at 30
FPS, we consider there exist two overlapping line segments
if 5 (10 for a 60 FPS video) or more overlapping points in
the timeframe. Again, these threshold values were determined
through our initial design experiments. Finally, we consider the
center of all points as the turning point of the two overlapping
line segments and use turning point to separate the two lines.
Example: As an example, consider a ﬁngertip movement
trajectory shown in Figure 9 (a). The red rectangle on the
ﬁgure is a timeframe consisting of 20 tracked points. If we
zoom in on the timeframe, we get Figure 9 (b) where a point
is labelled with a frame number according to when the point
was seen, starting from 1 for the earliest point. In this example,
there are more than 6 overlapping points within the same
timeframe, which are marked by a green circle. We use the
center point (No.10) of the overlapping points as the turning
point to separate the two line segments.
Extract the Line Length The physical
length of a line
segment depends on the sizes of the screen and the pattern
grid, and the space between two touch dots. To ensure our
approach is independent of the device, we normalize the
physical length of a line segment to the shortest line found on
the tracked trajectory. For the example shown in Figure 8 (a),
the line lengths for segments, SA, AB, BC, CD, and DE, are
2ls, ls, 2ls, l, 2ls, respectively. Here segments AB and CD have
the shortest length, ls. The physical length of a line segment
is calculated by computing the Euclidean distance between the
start and the end points of a segment.
Extract Direction Information In addition to the line length,
we also want to know to which direction the ﬁngertip moves.
This information is useful for inferring which dots are selected
to unlock the pattern. Figure 10 (a) shows all possible 16
directions on a 3× 3 pattern grid. The directions are numbered
-100-50050100-100-50050100ABCDSESABCDE-100-50050100-40-2002040  Line 1Line 2Line 3timeframes90100110242526  Line 1Line 2181113109121416114345678111315122109-100-50050100-100-50050150951319SABCDTable I.
MAPPINGS FROM LINE SLOPES AND FINGERTIP-HORIZONTAL
MOVEMENTS TO DIRECTION NUMBERS
1
Direction No.
2
slope (L → R) +∞ 2
Direction No.
10
slope (R → L) −∞ 2
9
3
1
11
1
4
1
2
12
1
2
7
5
6
8
2 −1 −2
0 − 1
13
16
14
2 −1 −2
0 − 1
15
Algorithm 3 Candidate Pattern Identiﬁcation Algorithm
Input:
L[]: Relative line length
D[]: Direction number (see Figure 10)
tn: Number of turning points of ﬁngertip trajectory
lengthT h: Threshold of considering two lines to have the
same length
directionT h: Threshold of considering two lines to be in
the same direction
Output:
P []: Candidate patterns
1: for each possible pattern p with tn turning points do
2:
3:
n ← getLineN umber(P [])
pL[] ← getRelativeLength(p)
/*Relatvie line length for pattern p*/
pD[] ← getDirection(p)
if match(pL[], L[], lengthT h) then
if match(pD[], D[], directionT h) then
P [] ← p
4:
5:
6:
7:
8:
end if
9:
10: end for
11: P [] ← sort(P [])
end if
from 1 to 16 in clockwise. For each line segment of the
tracked trajectory, we calculate its line slope and the horizontal
movement of the ﬁngertip (i.e. left → right or vice versa). This
information will then be checked against Table I to determine
the direction number of the line segment. The horizontal
movement of the ﬁngertip is determined by ﬁrst using the
temporal information to ﬁnd out the start and the end points
of the line and then comparing the horizontal coordinates of
the two points. The line slope is also computed based on the
coordinates of the start and the end points of the line segment.
Figure 10 (b) gives the direction number of each tracked line
segment of a ﬁngertip movement trajectory.
2) Map the Tracked Trajectory to Candidate Patterns: In
this step, we use the extracted geometry information to map the
ﬁngertip movement trajectory to a small number of candidate
patterns which will then be ranked using a heuristic. This
process is described in Algorithm 3.
Identify Candidate Patterns Our implementation simply
enumerates all possible patterns for a given pattern grid to
identify candidate patterns, starting from the top-left touch
point. We reject patterns that do not meet the requirements
that the correct pattern is expected to have. The requirements
are the number of line segments (this is checked by counting
the number of turning points), and the length and the direction
for each line segment. This is an automatic process performed
by our software system without any user involvement. We con-
sider two line segments having the same length and slope if the
difference between them is less than a threshold. Speciﬁcally,
a(1)
a(2)
a(3)
a(4)
a(5)
b(1)
b(2)
b(3)
b(4)
b(5)
c(1)
c(2)
c(3)
c(4)
c(5)
d(1)
d(2)
d(3)
d(4)
d(5)
Figure 11. Possible mappings for the tracked ﬁngertip movement trajectory
presented in Figure 2 (d).
√
the relative length threshold, lengthT h, is set to 1.12 and the
slope threshold, directionT h, is set to 0.25. To determine the
thresholds, we have evaluated a range of possible values in our
initial design experiments to chose the best performing values.
Example: We use the pattern depicted in Figure 2 as an
example to describe our algorithm. Figure 11 gives several
possible mappings for the ﬁngertip movement trajectory shown
in Figure 2 (d). For this particular trajectory, the collections of
lengths and directions are L = {l,
2l, l} and D = {5, 11, 5}
respectively. Any pattern that does not meet L or D should
not be considered as a candidate pattern for this trajectory.
For this reason, Figure 11 a(1)–a(5) will be rejected. Take
Figure 11 a(1) as an example, the line lengths and directions
√
for all four line segments of this pattern are {l,
2 l, l} and
{5, 12, 5} respectively. It does not meet the expected L or D
and should be rejected. The patterns presented in b(1)–b(5)
and c(1)–c(5) of Figure 11 will also be rejected for the same
reason.
Rank Patterns Candidates patterns are then ranked using a
simple heuristic. The heuristic assumes a pattern starting from
left dot of the grid is more likely to be the correct pattern over a
pattern starting from a right dot. This assumption is supported
by recent studies which show that people tend to select a left
dot as the starting point to construct a pattern [18, 29]. If
two candidate patterns start from the same dot, we consider
the pattern with a longer total line length is more likely to
be the correct pattern. Using these criteria, the ﬁve candidate
patterns are ranked in order from subﬁgures d(1) to d(5) in
Figure 11. Therefore, an attacker would ﬁrst try the candidate
pattern presented in Figure 11 d(1). This attempt will lead to
a successful attack for the example presented in Figure 2. Our
experimental results conﬁrm that this heuristic is effective.
5
V. EXPERIMENTAL SETUP
A. Data Collection
The patterns used in our evaluation were collected from
users who use at least one Android device (a smartphone or
8
(a) line length
(b) line
intersection
(c) overlapping
lines
Figure 12.
Illustrations of the terminologies used in Equation 2.
(a) Example patterns belong to the simple category.
(b) Example patterns belong to the median category.
(c) Example patterns belong to the complex category.
Figure 13.
Examples of patterns collected from our participants. Patterns
are grouped into simple, median and complex categories, according to their
complexity scores.
complexity score:
complexity score:
complexity score:
43.8
Figure 14. Three most complex patterns on a 3×3 grid based on Equation 2.
44.7
46.8
a tablet) on a daily basis. To collect the patterns, we have
distributed over 1,000 survey forms and collected back 215
valid forms, resulting in 120 unique patterns4. Our participants
include 95 females and 120 males who were undergraduate or
postgraduate students at the host university. The majority of
our participants are in an age group of under 30.
To collect the patterns, we have conducted a “pen-and-
paper” survey by asking participants to ﬁll in an anonymized
questionnaire. The questionnaire and survey were approved by
the research ethics board (REB) of the host institution. We
have made sure that our survey complied with strict privacy
regulations. For example, we did not collect any personally
identiﬁable information other than the gender and age group
of the participant. Our participants were well informed on
the purpose of the study and how the data will be managed
and used. The survey forms were distributed as voluntary
homework so that the participants can take the survey form
away to ﬁll
in. Users were invited to return the survey
form anonymously within three weeks to a dedicated, locked
mailbox, if they wish to participate in the study. To avoid a user
submits multiple copies of the same form, each survey form
4Available to be downloaded at: https://dx.doi.org/10.17635/lancaster/
researchdata/113.
Table II.
SCREEN SIZES FOR THE TEST PHONES
Brands
Size
Height(cm)×Width(cm)
MI4
13.9 × 6.9
Honor7
14.3 × 7.2
Note4
15.4 × 7.9
is given a unique, randomly generated 32-digital number.
Overall, 37.6% of our participants conﬁrmed that they use
pattern lock as the screen lock to protect their Android devices
on a daily basis; and 33% of those who do not use a pattern
as their screen lock said that they are often required to use
a pattern for authentication by an application like Alipay.
Furthermore, 60% of our participants also indicated that the
pattern they provided is currently being used or have been
used in the past by themselves. Other participants (often those
did not use a locking pattern on a daily basis) indicated that
they have provided a pattern which they would like to use if
a locking pattern is required. Based on this information, we
are conﬁdent that the patterns we collected represent some of
the real world patterns. Finally, all participants believe that
a complex pattern provides stronger protection than a simple
counterpart.
B. Pattern Complexity Classiﬁcation
We quantify the complexity of a pattern using the complex-
ity (strength) score proposed in [27]. The complexity score,
CSP , of a pattern, P , is deﬁned as:
CSP = SP × log2(LP + IP + OP )
(2)
where SP is the number of connected dots, LP is the the
total length of all line segments that form the pattern (see
Figure 12 a), IP are the number of intersections (which are
also termed as “knight moves” in some prior work [30], see
Figure 12 b) and OP are the number of overlapping linear
segments (see Figure 12 c). To calculate the line length,
we assume the length between two horizontally or vertically
adjunct dots is one. Thus, our method is independent of the
size of the screen and the grid.