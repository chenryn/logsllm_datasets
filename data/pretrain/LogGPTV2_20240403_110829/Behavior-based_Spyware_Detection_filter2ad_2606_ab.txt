browser’s IConnectionPoint interface). When sub-
scribing to these events, a component is notiﬁed in re-
sponse to almost all browser actions or state changes.
For example, events are generated when a new URL is
opened, when a requested page cannot be found, or when
the download of a resource has completed. In response to
an event, the browser extension can request more infor-
mation using the COM interfaces offered by the browser.
In particular, the BHO or toolbar can request a handle to
the document that was accessed, so that it can perform
further analysis. In addition, a BHO or toolbar can react
to an event by directing the browser to another page or
opening a pop-up window. In summary, we expect to see
the spyware component interact with the web browser by
invoking browser functions in response to events.
After the spyware component has extracted the desired
information, its next task is to transmit the data to a third
party (the attacker). To this end, the information must be
either directly transfered over the network, passed to a
cooperating process running on the same host, or stored
locally (for example, in a ﬁle on disk or in the Windows
Registry). In any case, the spyware component has to in-
teract with the operating system to be able to deliver the
data to the intended recipient. 1 Even when data is tem-
porarily kept in memory, eventually an operating system
service has to be invoked to leak the data.
Because the interaction with the operating system is
necessary for a spyware component, we analyze the op-
erating system services that the component requests. In
particular, we focus on the Windows API 2 calls that
a component can use to leak information from the cur-
rent process. Again, we are only interested in the Win-
dows API calls that are performed in response to events.
The reason is that for a Browser Helper Object, event
handling code is the only code that is executed after the
1Note that we are not taking into account the possibility of using
covert channels to leak the information from the BHO or toolbar to the
outside environment. Typically, these channels are either bandwidth-
limited or generate distinctive patterns of execution.
2The Windows API provides a large number of procedures that can
be invoked to access the complete functionality of the Windows oper-
ating system (this includes kernel services, the graphical device inter-
faces, and other user interfaces).
component’s startup phase. With a toolbar, code can also
be executed when the user clicks on a user interface ele-
ment belonging to the toolbar. However, there is the sig-
niﬁcant risk that the web browser will be closed without
ever making use of the toolbar. In this case, all informa-
tion would be lost because the spyware code is simply
not run. Thus, information can only be reliably leaked
in event handling code (the last chance at which this is
possible being in response to the event that signals the
browser is being closed).
There is one important exception to the assumption
above: A spyware component could attempt to set up an
additional path through which events can be leaked by
starting another thread or by registering a timer with an
appropriate callback function. In response to a browser
event, the collected user information would not be leaked
immediately, but it would ﬁrst be stored in a globally
accessible data structure. Later, the second thread or
the timer callback function could ﬂush out this informa-
tion without being detected. To eliminate this possibility
for evading detection, we chose a conservative approach.
That is, whenever a component can create either a thread
or a timer, all Windows API calls that this component
can invoke are included in the analysis, not only those
invoked in response to events.
We realize, of course, that benign components may in-
teract with the web browser in response to events to pro-
vide some service to the user, such as automatically dis-
playing the page source in a separate frame. Benign com-
ponents may also interact with the operating system (via
Windows API calls). For example, a component could
read some conﬁguration parameters from a ﬁle, write en-
tries to a log-ﬁle, or download updates to the software at
startup. The key insight here is that each of the two char-
acteristics on their own does not generally warrant suspi-
cion, but together they are strong indicators of malicious
behavior. Therefore, we classify a browser helper object
or a toolbar as spyware if the component, in response to
browser events,
1. monitors user behavior by interacting with the web
browser and
2. invokes Windows API calls that can potentially leak
information about this behavior (e.g., calls to save
the data to a ﬁle or transmit information to a remote
host).
Note that our classiﬁcation is more general than the
one used by virus scanners and signature-based intrusion
detection systems, as we are looking for intrinsic behav-
ioral characteristics of spyware instead of byte strings
speciﬁc to particular malware instances.
Our detection approach can take advantage of the
proposed spyware classiﬁcation in one of two ways.
276
Security ’06: 15th USENIX Security Symposium
USENIX Association
First, we can compare the results of our analysis (that
is,
the identiﬁcation of BHO/toolbar-to-browser and
BHO/toolbar-to-OS interactions in response to events)
to an a priori assembled list of browser COM functions
and Windows API calls that we deem malicious. In this
way, we deﬁne our behavioral characterization based on
prior experience and use this characterization to detect
previously unknown instances of spyware. The second
method is to automatically generate a behavioral charac-
terization by comparing the behavior of known benign
components to the behavior of known malicious ones.
More precisely, the characterization is automatically de-
rived by identifying the browser functions and Windows
API calls performed by malicious BHOs and toolbars
that are not also executed by benign samples. This char-
acterization would then be used to identify previously
unseen spyware samples.
In the following, we apply the ﬁrst approach described
above. We then use the second approach as a way to
validate our choice of characterizing browser functions
and Windows API calls.
5 Component Analysis
Given our characterization of spyware, the task of the
analysis phase is to extract the behavior of an unknown
BHO or toolbar. That is, we are interested in the interac-
tion of an unknown sample with the browser and with the
operating system in response to browser events. Based
on the results of the analysis, we can then classify the
sample appropriately.
As a ﬁrst step, we propose a dynamic analysis tech-
nique that exposes a suspicious component to crafted
browser events (which simulate user activity) and ana-
lyzes the component’s response.
In particular, we dy-
namically record both the browser COM functions and
the Windows API functions that the component calls.
This approach exhibits some commonalities with black-
box testing in that data is sent to a component under ex-
amination and its behavior is analyzed, without knowing
anything about the component’s implementation.
An interesting problem is to determine events and in-
put that are suitable to capture the behavior of a com-
ponent. When performing black-box testing, it is typ-
ically a signiﬁcant challenge to devise a set of test in-
puts that exercise the bulk of the functionality (or code
paths) of the object under test.
In our case, the situa-
tion is exacerbated by the fact that we have no a pri-
ori knowledge about the functionality of the (potentially
malicious) component. Thus, it may be difﬁcult to gen-
erate input that will reveal spyware-like behavior with
a sufﬁciently high probability. Consider, for example,
a spyware component that scans all web pages that are
fetched by the browser for the occurrence of certain key-
words (e.g., “car insurance”). The corresponding URL
is logged to a ﬁle only when these keywords appear on
the page. Thus, we would observe suspicious behavior
(in the form of a ﬁle system call) only if one of the test
pages actually contains the words “car insurance.” An-
other problem is that spyware often does not react consis-
tently to identical events. For example, a spyware devel-
oper might decide that a user would be exceedingly an-
noyed if a pop-up window containing an advertisement
appeared every time a page with a speciﬁc keyword was
accessed. Therefore, the pop-up would be opened only
occasionally, and, as a consequence dynamic black-box
testing alone might not be enough to observe all interest-
ing reactions.
Before discussing appropriate extensions to our anal-
ysis, an important point in the previous discussion is
the fact that the lack of coverage in the dynamic test
affects (almost) exclusively the interaction of the com-
ponent with the operating system and not its interaction
with the web browser. The reason is that a component
has to monitor the user behavior by interacting with the
web browser before any decision can be made. For ex-
ample, before a page can be scanned for the occurrence
of a certain keyword, the spyware component has to ﬁrst
request the page source from the browser. Also, a spy-
ware component might not necessarily log all URLs that
a user visits. However, before the decision to write the
URL to a log-ﬁle can be made, the visited URL must be
retrieved from the browser. A spyware component might
decide to record only certain pieces of information or
engage with the environment only under certain circum-
stances. However, as a ﬁrst step, it is always necessary to
extract information about the current document from the
web browser. Thus, the results of the dynamic analysis
with regards to the interaction with the web browser are
sufﬁciently comprehensive.
To capture all possible reactions of a component with
regards to its interaction with the operating system, we
complement the dynamic testing with a static analysis
step. To be more precise, we use dynamic analysis to
locate the entry point into the code of the component
that is responsible for handling events (i.e., the object’s
Invoke function). Starting from this entry point, the
static analysis step extracts the control ﬂow graph of all
code regions that are responsible for handling events.
The key observation is that this control ﬂow graph con-
tains (or encodes) all possible reactions of the component
to events. As a consequence, there is no need to conﬁne
the analysis to the API calls that are actually observed
during dynamic testing. Instead, we can analyze all Win-
dows API calls that this component can possibly invoke
when receiving events. Following up on the example
of the spyware that scans for “car insurance” in fetched
pages, we extract the control ﬂow graph of the code that
USENIX Association
Security ’06: 15th USENIX Security Symposium
277
handles a “web page received” event during our analysis
and determine that the component might perform a ﬁle
system access under certain circumstances. Note that it
is necessary to conﬁne the static analysis to those code
regions that are responsible for handling events. Other-
wise, the analysis could end up including API function
invocations that cannot be used for leaking information
(e.g., API calls during program startup). Taking into ac-
count these additional function calls could lead to incor-
rect classiﬁcation results.
As static analysis is already required to identify the in-
teraction of a component with the operating system, one
might consider dropping the dynamic analysis step. That
is, one could attempt to solely rely on static analysis to
recover the interaction of a component both with the web
browser and with the operating system. This is difﬁcult
for a number of reasons. One problem is that Browser
Helper Objects or toolbars often contain a number of dif-
ferent COM objects. Usually, it is not a priori evident
which of these objects will register for browser events.
Even when the correct COM object can be identiﬁed, lo-
cating the code regions that are responsible for handling
events is not straightforward. Finally, COM function in-
vocations are implemented as indirect function calls (via
the COM object’s virtual function table). Thus, it would
be signiﬁcantly more difﬁcult to statically recover the in-
teraction of the BHO or toolbar with the web browser.
To summarize, both static and dynamic analysis tech-
niques have their advantages. The dynamic analysis step
can precisely pinpoint the COM object and the code re-
gions that handle browser events. In addition, the interac-
tions between a component and the web browser can be
accurately captured. Static analysis, on the other hand,
is more comprehensive in identifying possible interac-
tion of a component with the operating system. Thus, we
believe that a combination of dynamic and static analy-
sis is most suitable to analyze the behavior of unknown
browser helper objects and toolbars.
In the previous discussion, we have not considered the
fact that a spyware component might react differently to
different events. That is, the dynamic analysis step pro-
duces a single list of COM browser functions that are
called by the component under test, and the static anal-
ysis step yields a single list of Windows API calls that
can be reached in response to events. However, it might
be beneﬁcial to distinguish between responses associated
with different events. For example, a component might
perform a suspicious Windows API call only in response
to a certain event that conveys no relevant information
about a user’s actions (e.g., an event that signals that the
browser window has been resized). In this case, the sus-
picious API call may not leak any information, and ex-
cluding it from the list could reduce false positives. Un-
fortunately, restricting automatic analysis to certain rel-
evant events offers spyware a way to evade detection.
To see this, consider a spyware component that moni-
tors user behavior (via browser COM functions) in re-
sponse to events, but, instead of immediately leaking this
information, stores it temporarily in memory. Later, the
collected information is ﬂushed in response to an event
that is not considered by our analysis. Therefore, we de-
cide to take the more conservative approach in order to
be more resilient to evasion.
As was mentioned in the previous section, our tech-
nique makes use of a more general characterization of
malware behavior than that used by current signature-
based systems. However, the methods used to realize
this detection strategy are not without their drawbacks.
While both our tool and the signature-based systems can
be classiﬁed as detection engines, the latter are much
faster and are practical for common desktop usage, while
our technique is more appropriate for analysts who are
looking to classify unknown instances of malware in an
automated fashion.
In the following sections, we explain in detail the dy-
namic and static analysis steps that we perform to deter-
mine behavioral characterizations for spyware. We then
discuss possible methods of evasion for our technique.
Finally, we present experimental data that demonstrates
that our detection technique is capable of effectively dis-
tinguishing malicious and benign components.
6 Dynamic Analysis Step
The basis for our detection technique, as discussed in the
previous sections, is to extract behavioral characteriza-
tions based on how spyware interacts with (i) the browser
and (ii) the underlying operating system in response to
events. To this end, we make use of both dynamic and
static analysis techniques.
The goal of the dynamic analysis step is twofold. First,
it has to monitor the interaction of the component with
the browser and record all the browser’s COM functions
that are invoked in response to events. Second, it has
to determine the code regions that are responsible for
handling events, thereby providing the necessary start-
ing points for the static analysis step. These tasks are
accomplished with the help of three core elements.
The ﬁrst element is a “fake” WebBrowser COM ob-
ject, which provides the component under analysis with
an environment similar to the one that would be present
when being hosted by an instance of Internet Explorer.
The second element is our COM object host application,
which properly instantiates all involved components and
sends the relevant browser events to the BHO or tool-
bar component under evaluation. The ﬁnal element is
a program that traces the execution of our host applica-
278