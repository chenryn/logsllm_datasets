### 内存使用情况检查

运行 `$ free -k` 命令后，输出如下：
```
              total        used        free      shared  buff/cache   available
Mem:        997184      976928       20256           0      171932      321780
Swap:      4545576           4      4545572
```

你可能会注意到 `dmesg` 报告的可用内存为 990MB，而 `free -k` 报告的可用内存为 320MB。这似乎丢失了超过 600MB 的内存。实际上，不需要担心 `Mem:` 行中较大的 `used` 值和较小的 `free` 值。你应该关注的是 `-/+ buffers/cache` 行中的值（在上面的例子中分别是 675404 和 321780）。

例如，在我的 MacBook 上，有 1GB = 1048576k 内存（部分被显卡系统占用），我看到的输出如下：

| 报告 | 大小 (k) |
|------|----------|
| dmesg 中 total 的大小 | 1016784 (1GB - 31792k) |
| dmesg 中的 free | 990528 |
| shell 下的 total | 997184 |
| shell 下的 free | 20256 (但有效的为 321780) |

### 系统安全性和完整性检查

不良的系统维护可能会使你的系统暴露于外部非法使用。为了确保系统的安全性和完整性，你可以从以下几个方面开始检查：

- **debsums** 软件包：使用 MD5 校验码对已安装软件包的文件进行校验。
- **chkrootkit** 软件包：检测 rootkit。
- **clamav** 软件包家族：提供反病毒功能。
- **Debian Security FAQ** 和 **Securing Debian Manual**：参考文档。

以下是一些常用的系统安全性和完整性检查工具：

| 软件包 | 流行度 | 大小 (kB) | 说明 |
|--------|---------|-----------|------|
| logcheck | V:6, I:8 | 110 | 后台守护进程，将系统日志文件中的异常通过邮件发送给管理员。 |
| debsums | V:5, I:36 | 98 | 使用 MD5 校验码对已安装软件包的文件进行校验。 |
| chkrootkit | V:7, I:17 | 926 | 检测 rootkit。 |
| clamav | V:10, I:46 | 27703 | Unix 的反病毒实用程序——命令行界面。 |
| tiger | V:1, I:2 | 7800 | 报告系统安全漏洞。 |
| tripwire | V:1, I:2 | 12168 | 文件和目录完整性检测软件。 |
| john | V:1, I:9 | 471 | 先进的密码破解工具。 |
| aide | V:1, I:1 | 293 | 高级入侵环境检测——静态二进制。 |
| integrit | V:0, I:0 | 2659 | 文件完整性验证程序。 |
| crack | V:0, I:1 | 152 | 密码猜测程序。 |

下面是一个简单的脚本，用于检测典型的全局可写文件权限问题：
```sh
find / -perm 777 -a \! -type s -a \! -type l -a \! \( -type d -a -perm 1777 \)
```

注意：由于 `debsums` 软件包使用本地存储的 MD5 校验码，因此在面对恶意攻击时，不能完全信任系统安全性检测工具。

### 数据存储技巧

#### 使用 Live CD 或 Debian 安装器 CD 进行救援

使用 Live CD 或 Debian 安装器 CD 以救援模式启动系统，可以让你重新配置启动设备的数据存储。如果设备在 GUI 桌面系统下自动挂载，你需要先从命令行手动卸载这些设备（使用 `umount(8)`）。

#### 硬盘空间使用情况

硬盘空间的使用情况可以通过以下工具评估：
- **mount(8)**：显示所有挂载的文件系统。
- **df(1)**：报告文件系统使用的硬盘空间。
- **du(1)**：报告目录树使用的硬盘空间。

提示：你可以将 `du(1)` 的输出传递给 `xdu(1x)`，以便使用其图形交互式演示。例如：
```sh
du -k . | xdu
sudo du -k -x / | xdu
```

#### 硬盘分区配置

尽管 `fdisk(8)` 一直是硬盘分区的标准工具，但现在 `parted(8)` 也是一个不错的选择。老 PC 使用经典的 MBR 方案，而一些现代 PC（如基于 Intel 的 Mac）使用 GPT 方案。

以下是一些常用的硬盘分区管理软件包：

| 软件包 | 流行度 | 大小 (kB) | 说明 |
|--------|---------|-----------|------|
| util-linux | V:881, I:999 | 5284 | 包含 `fdisk(8)` 和 `cfdisk(8)`。 |
| parted | V:412, I:565 | 122 | GNUParted，硬盘分区调整程序。 |
| gparted | V:14, I:103 | 2175 | 基于 libparted 的 GNOME 分区编辑程序。 |
| gdisk | V:329, I:507 | 885 | 用于 GPT/MBR 并存的硬盘的分区编辑程序。 |
| kpartx | V:21, I:34 | 75 | 为分区建立设备映射的程序。 |

注意：尽管 `parted(8)` 可以用来创建和调整文件系统，但使用专门的工具（如 `mkfs(8)` 和 `resize2fs(8)`）会更安全。

#### 使用 UUID 访问分区

尽管重新配置分区或可移动存储介质的激活顺序可能会导致分区名称变化，但你可以使用同一个 UUID 来访问它们。这对于多硬盘且 BIOS/UEFI 设备名不一致的情况特别有用。

- **mount(8)**：使用 `-U` 选项通过 UUID 挂载块设备。
- `/etc/fstab`：可以使用 UUID。
- 引导加载程序（参见第 3.1.2 节）也可以使用 UUID。

提示：你可以使用 `blkid(8)` 查看特定块设备的 UUID，或者使用 `lsblk -f` 检查 UUID 和其他信息。

#### LVM2

LVM2 是一个用于 Linux 内核的逻辑卷管理器。使用 LVM2，可以在逻辑卷上创建硬盘分区，而不是直接在物理硬盘上。

LVM2 的需求包括：
- Linux 内核中的设备映射支持（Debian 内核默认支持）。
- 用户自定义设备映射支持库（libdevmapper* 软件包）。
- 用户自定义 LVM2 工具（lvm2 软件包）。

请从以下 man 手册开始了解 LVM2：
- **lvm(8)**：LVM2 机制的基础知识（列出所有 LVM2 命令）。
- **lvm.conf(5)**：LVM2 的配置文件。
- **lvs(8)**：报告逻辑卷的相关信息。
- **vgs(8)**：报告卷组的相关信息。
- **pvs(8)**：报告物理卷的相关信息。

#### 文件系统配置

对于 ext4 文件系统，e2fsprogs 包提供了以下工具：
- **mkfs.ext4(8)**：创建新的 ext4 文件系统。
- **fsck.ext4(8)**：检查和修复现有的 ext4 文件系统。
- **tune2fs(8)**：配置 ext4 文件系统的超级块。
- **debugfs(8)**：交互式的调试 ext4 文件系统（包含恢复已删除文件的命令）。

Linux 支持的每一个文件系统都有类似的命令。以下是常用的文件系统管理软件包：

| 软件包 | 流行度 | 大小 (kB) | 说明 |
|--------|---------|-----------|------|
| e2fsprogs | V:759, I:999 | 1501 | ext2/ext3/ext4 文件系统工具。 |
| btrfs-progs | V:42, I:71 | 4851 | Btrfs 文件系统工具。 |
| reiserfsprogs | V:10, I:25 | 473 | Reiserfs 文件系统工具。 |
| zfsutils-linux | V:28, I:29 | 1619 | OpenZFS 文件系统工具。 |
| dosfstools | V:188, I:535 | 315 | FAT 文件系统工具（Microsoft: MS-DOS, Windows）。 |
| exfatprogs | V:21, I:348 | 301 | exFAT 文件系统工具，由三星维护。 |
| exfat-fuse | V:6, I:136 | 73 | FUSE 读写 exFAT 文件系统（微软）驱动。 |
| exfat-utils | V:4, I:123 | 231 | exFAT 文件系统工具，由 exfat-fuse 的作者维护。 |
| xfsprogs | V:21, I:96 | 3493 | XFS 文件系统工具（SGI: IRIX）。 |
| ntfs-3g | V:165, I:509 | 1470 | FUSE 读写 NTFS 文件系统（微软：Windows NT……）驱动。 |
| jfsutils | V:0, I:8 | 1577 | JFS 文件系统工具（IBM: AIX, OS/2）。 |
| reiser4progs | V:0, I:2 | 1367 | Reiser4 文件系统工具。 |
| hfsprogs | V:0, I:5 | 394 | HFS 和 HFS Plus 文件系统工具（Apple: MacOS）。 |
| zerofree | V:5, I:130 | 25 | 将 ext2/3/4 文件系统上的空闲块设置为零的程序。 |

提示：ext4 文件系统是 Linux 系统上的默认文件系统，除非有特殊原因，否则强烈推荐使用它。Btrfs 状态可以在 Debian wiki 和 kernel.org wiki 上找到，它有望成为下一个默认文件系统。

#### 文件系统创建和完整性检查

**mkfs(8)** 用于在 Linux 系统上创建文件系统，**fsck(8)** 用于检查和修复文件系统的完整性。Debian 默认不在周期性地运行 fsck。

注意：在已挂载的文件系统上运行 fsck 是不安全的。

提示：通过在 `/etc/mke2fs.conf` 中设置 `enable_periodic_fsck` 并使用 `tune2fs -c0 /dev/partition_name` 设置最大挂载数为 0，可以在重启时安全地运行 fsck（包括根文件系统）。结果可以在 `/var/log/fsck/` 目录下查看。

#### 通过挂载选项优化文件系统

`/etc/fstab` 包含基础的静态文件系统配置。例如：
```
<file system> <mount point> <type> <options> <dump> <pass>
proc /proc proc defaults 0 0
UUID=709cbe4c-80c1-56db-8ab1-dbce3146d2f7 / ext4 errors=remount-ro 0 1
UUID=817bae6b-45d2-5aca-4d2a-1267ab46ac23 none swap sw 0 0
/dev/scd0 /media/cdrom0 udf,iso9660 user,noauto 0 0
```

提示：UUID 可以替代一般的块设备名称（如 `/dev/sda1`、`/dev/sda2` 等）来识别块设备。从 Linux 2.6.30 开始，默认行为是提供 `relatime` 选项。参见 `fstab(5)` 和 `mount(8)`。

#### 通过超级块优化文件系统

文件系统的特性可以通过 `tune2fs(8)` 命令和超级块进行优化：
- `sudo tune2fs -l /dev/hda1`：显示 `/dev/hda1` 上的文件系统超级块内容。
- `sudo tune2fs -c 50 /dev/hda1`：更改 `/dev/hda1` 文件系统的检查频率为每 50 次启动一次。
- `sudo tune2fs -j /dev/hda1`：为文件系统添加日志功能，即将 `/dev/hda1` 的文件系统从 ext2 转换为 ext3。
- `sudo tune2fs -O extents,uninit_bg,dir_index /dev/hda1 && fsck -pf /dev/hda1`：将 `/dev/hda1` 从 ext3 转换为 ext4。

提示：尽管 `tune2fs(8)` 的名字如此，但它不仅适用于 ext2 文件系统，也适用于 ext3 和 ext4 文件系统。

#### 硬盘优化

警告：在调整硬盘配置之前，请检查硬件并阅读 `hdparm(8)` 的 man 手册页，因为这可能会对数据完整性造成危害。

- `hdparm -tT /dev/hda`：测试 `/dev/hda` 硬盘的访问速度。
- `hdparm -q -c3 -d1 -u1 -m16 /dev/hda`：启用 `(E)IDE32 位支持`、`using_dmaflag`、`interrupt-unmaskflag` 并设置 `multiple16sectorI/O`（危险！）以加速硬盘访问速度。
- `hdparm -W /dev/sda`：测试 `/dev/sda` 硬盘的写入缓存功能。
- `hdparm -W 0 /dev/sda`：关闭写入缓存功能。