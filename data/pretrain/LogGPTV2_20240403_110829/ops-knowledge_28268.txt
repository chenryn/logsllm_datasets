User: 如何使用Python编写脚本，在多个服务器上批量执行命令？
Assistant: 使用Python的Paramiko库可以实现在多个服务器上批量执行命令。具体步骤如下：

1. 安装Paramiko库：在命令行中输入 `pip install paramiko` 安装Paramiko库。

2. 编写Python脚本：首先导入Paramiko库，接着定义要执行命令的服务器列表和命令列表，然后使用Paramiko库建立SSH连接，在每个服务器上执行相应的命令，最后断开SSH连接。

示例代码如下：

```python
import paramiko

# 定义要执行命令的服务器列表和命令列表
server_list = [
    {"host": "192.168.1.1", "port": 22, "username": "root", "password": "password"},
    {"host": "192.168.1.2", "port": 22, "username": "root", "password": "password"}
]
command_list = [
    "cd /opt",
    "ls -l"
]

# 建立SSH连接，在每个服务器上执行相应的命令，最后断开SSH连接
for server in server_list:
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(server["host"], port=server["port"], username=server["username"], password=server["password"])
    for command in command_list:
        stdin, stdout, stderr = ssh.exec_command(command)
        print(f"Output on {server['host']}:")
        print(stdout.read().decode())
    ssh.close()
```

在上述示例代码中，我们首先定义了要执行命令的服务器列表和命令列表，然后使用for循环逐个连接每个服务器，并在每个服务器上执行相应的命令。最后调用SSH连接对象的close()方法断开SSH连接。在执行命令之后，我们使用stdout.read().decode()获取命令的输出，并使用print()函数输出到屏幕上。

注意：在实际使用中，建议将用户名和密码存储在配置文件中，并使用ConfigParser库读取配置文件，以增强脚本的可维护性。同时，我们需要注意在执行命令时可能会抛出异常，因此需要在代码中对异常进行处理。