needing special handling are the parameters passed via regis-
ters. Just as the compiler inserts checks to compare the input
to each store instruction against its redundant copy, the com-
piler inserts check instructions for register arguments before
function calls.
Unfortunately, checking at these points alone, namely be-
fore loads, stores, and function calls, is not enough to protect
against faults which affect branch outcomes. If a fault occurs
on a data slice which only feeds a branch, then an incorrect
execution path may be taken and incorrect loads and stores
may be executed, although no fault will be detected. In order
to protect against this, the technique also veriﬁes the input
registers to any branch predicate. The technique can also ver-
ify the input to any register indirect jump, although we do not
implement it here since register indirect jumps are relatively
infrequent.
An example of this protection is given in Figure 2. Instruc-
tions 3 and 4 check that the source registers to the conditional
branch are correct. Instruction 1 checks that the input param-
eter register P0 is equal to its redundant version before mak-
ing the external function call to otherFunc. The function
call is akin to a load instruction not only in the fact that the
inputs must be checked, but also that they cannot be safely
duplicated. Therefore, in order to produce a redundant copy
of the return value, here given in R0, instruction 2 must be
executed.
While SWIFT has some vulnerabilities which will be de-
scribed in Section 3.2, previous work [24] has shown it to be
effective at detecting most faults in many parts of the system.
Figure 3. SWIFT-R Triplication and Validation.
3 SWIFT-R
This section introduces the novel recovery extensions to
SWIFT which comprise SWIFT-R and also discuss SWIFT-
R’s vulnerabilities and limitations.
3.1 The SWIFT-R Transformation
The SWIFT transformation can be seen as a double-
modular redundancy implemented in software. Double re-
dundancy provides detection but not recovery.
In order to
achieve recovery, it is natural to move to triple-modular re-
dundancy.
The SWIFT-R transformation, instead of creating one re-
dundant copy as in SWIFT, creates two redundant copies.
Having three copies means that should a fault corrupt any
one version’s computation, two other versions will still have
the correct computation. By using a simple majority voting
scheme, any single-bit fault can be corrected.
The code in Figure 1 is shown again in Figure 3, except
that SWIFT-R code is given instead of SWIFT code.
In-
struction 4 duplicates the previous add instruction, just as in
SWIFT. However, the SWIFT-R transformation also inserts
instruction 5, a third version of the add instruction which uses
a third set of registers, here denoted by r1’’, r2’’, and
r3’’. Similarly, after the load instruction, instead of a sin-
gle move instruction (instruction 2), SWIFT-R also inserts a
second move instruction (instruction 3).
Furthermore, the fault detection code used by SWIFT has
been replaced, in SWIFT-R, by recovery code at instructions
1, 6, and 7. The recovery code is simply a majority voting
procedure — if two versions of a register, r1 and r1’ for
example, have the same value, but the third version, r1’’,
does not, then r1’’ is set to the value in r1/r1’, correcting
the corrupted value of r1’’.
3.2 Windows of Vulnerability
SWIFT-R, like all software-only reliability techniques, in-
cluding SWIFT and the techniques which will follow, has
small windows of vulnerability. There are four principal
classes of vulnerabilities:
1. Between validation and use. Because the validation
occurs in software, the veriﬁcation of a value must in-
variably happen some number of instructions before the
use of that value. Consider the region in Figure 3 be-
tween instruction 7 and its subsequent store (st). If a
fault occurs to r2 during this time, a faulty value will
be transmitted to memory. Similarly, if a fault occurs
to r1 between instruction 6 and the st instruction then
the store will go to an incorrect address. While it is im-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:54 UTC from IEEE Xplore.  Restrictions apply. 
possible to remove this vulnerability altogether, it can
be partially mitigated by scheduling the veriﬁcation in-
structions as closely as possible to their corresponding
uses.
2. Before a value is copied. At various points, such as af-
ter load instructions and after function call returns, val-
ues are triplicated. If a fault occurs to the register to be
copied before all copies have been made, then multiple
copies of the register will be corrupted. Consider the re-
gion in Figure 3 between the load (ld) and the move in
instruction 2. If a fault occurs to r3 at this point, then
r3’ and r3’’ will also be incorrect, compromising all
future checks on those values. Once again, scheduling
can minimize the window of vulnerability but it cannot
eliminate it altogether.
3. Certain faults to opcode bits. Faults corrupting the
opcode bits of an instruction may transform it into a
store or a branch. This will cause memory to be cor-
rupted or incorrect control-ﬂow to be taken. Since no
checks are inserted before most instructions, any non-
load/store/branch instructions transformed into a load,
store, or branch may go uncaught by our techniques.
Note that other faults to the opcode bits will be caught
by our techniques.
4. Deadlock. Since the micro-architectural state of the
processor is not exposed to the software, software-only
techniques are unable to protect against faults on some
portions of the micro-architectural state such as parts of
the control logic. If faults to such state cause deadlock,
any software-only scheme will be unable to make for-
ward progress.
4 TRUMP
This section describes the second novel software-only
recovery technique, TRUMP.
Section 4.1 gives a brief
overview of AN-codes which form the theoretical backdrop
for the TRUMP technique. AN-codes allow redundancy to
be represented more compactly, ultimately enabling the triple
redundancy of SWIFT-R to be contained in two registers in-
stead of three. Section 4.2 presents the TRUMP transforma-
tion itself.
4.1 AN-codes
AN-codes are a class of arithmetic codes where the code-
word is simply the original data multiplied by a constant, A.
The fact that AN-codes are arithmetic codes, codes which are
preserved across arithmetic expressions, is evident by stan-
dard algebra:
(Ax) + (Ay) = A(x + y)
(Ax) · k = A(x · k)
(1)
(2)
AN-codes can be used to detect errors by verifying that the
codeword is divisible by A. Precisely, C is a valid codeword
only if C ≡ 0 (mod A). The choice of A has a large impact
on the implementation cost as well as the reliability of the
resulting code. A = 2n − 1 is a particularly good choice with
respect to both of these.
Let us ﬁrst consider the reliability ramiﬁcations of this
let x = original copy
let y = AN-encoded copy
if (3x 6= y)
if (y ≡ 0 (mod 3))
x = y
3
else
y = 3x
Figure 4. TRUMP recovery pseudo-code.
choice. Any single-bit fault to a codeword may be considered
either an addition or subtraction of 2k for some k. Observe
that 2k 6= 2n − 1 for any n > 0. Therefore,
C ± 2k ≡ ±2k
(mod A)
6≡ 0 (mod A)
By the above proof, the faulty AN codeword is guaranteed
not to be divisible by A. Thus, this choice of A will be able
to detect any single-bit faults to the codeword. Although we
will not prove it here, this choice of codeword can also protect
against a large number of multi-bit faults.
A = 2n − 1 is also a convenient implementation for per-
formance because a multiplication by an A of this type can
simply be computed as a shift left by n and a subtraction,
speciﬁcally, Ax = (x (cid:28) n) − x.
The choice of A also determines how many bits will be re-
quired to represent the codeword. For A = 2n−1, n extra bits
will be needed to represent the codeword. Therefore, in our
implementation, we choose the smallest nontrivial n, namely
n = 2 and A = 22 − 1 = 3, to minimize the additional bits
necessary for storage.
4.2 The TRUMP Transformation
In TRUMP, we exploit AN-codes to implement software-
only recovery more efﬁciently than in SWIFT-R. As noted
in the prior section, an AN-code with A = 3 is sufﬁcient
to detect any single-bit error. We can extend its detection
capability to recovery by adding one extra, non-AN-encoded
version.
TRUMP essentially has two copies of every value, akin
to SWIFT. However, unlike SWIFT, one copy of the data
is AN-encoded. Under this scheme, the program detects a
fault whenever the original copy multiplied by A does not
match the AN-encoded copy. If they do not match, then the
code can recover by inferring which copy is correct. This
can be done by making use of the result in Section 4.1. If
the AN-encoded copy is divisible by A, then we can sur-
mise that the fault struck the original copy. If it is not, then
the AN-encoded copy was struck and the original is correct.
Pseudo-code for this recovery sequence is shown in Figure 4.
While it may be costly due to the division and modulo opera-
tions, these instructions are only executed during fault recov-
ery, which is relatively rare.
An example of the TRUMP transformation is shown in
Figure 5. Note that the redundant trump registers are denoted
by appending a ‘t’ to the register’s name. Although we have
shown code with multiplications here for brevity, note that
we implement multiplications with the faster combination of
shifts and adds.
As implemented in previous software-only reliability tech-
niques, the load address must be checked before load instruc-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:54 UTC from IEEE Xplore.  Restrictions apply. 
ld r3 = [r4]
add r1 = r2, r3
st [r1] = r2
(a) Original Code
1:
2:
3:
4:
5:
call recovery, 3*r4 != r4t
ld r3 = [r4]
mul r3t = 3,r3
add r1 = r2, r3
add r1t = r2t,r3t
call recovery, 3*r1 != r1t
call recovery, 3*r2 != r2t
st [r1] = r2
mov r3 = 0
mov r3 = 0
Loop:
...
call otherFunc, r3 != 0
xor r3=r3,1
br Loop
Loop:
...
and r3=r3,1
call otherFunc, r3 != 0
xor r3=r3,1
br Loop
(b) TRUMP Code
(a) Original Code
(b) MASK Code
Figure 5. TRUMP example.
Figure 6. MASK example.
tions. Instruction 1 performs this check by ensuring that three
times the original value is equal to the redundant value. If
there is a mismatch, the recovery code shown in Figure 4 is
called. Similarly, before the store instruction, the operands of
the store are checked in instructions 4 and 5.
Also similarly to previous software-only reliability tech-
niques, the result of the load instruction must be copied into
the redundant register, as in instruction 2.
In TRUMP, in-
stead of a simple move, a multiplication is performed in order
to ensure that the redundant copy is properly AN-encoded.
Finally, instruction 3 performs a redundant add instruction.
Recall that AN-codes are arithmetic codes, which means
that codewords are preserved through arithmetic operations.
Therefore this instruction does not have to be altered in any
way from the SWIFT version.
Thus, TRUMP offers recovery similar to SWIFT-R, but
only requires two independent versions.
4.3 Applicability
In addition to the vulnerabilities which all software-only
recovery schemes have, described in Section 3.2, TRUMP
has two primary limitations that must be kept in mind. First
of all, AN-codes do not propagate through many logical op-
erations, such as and and or [18], and therefore cannot be
applied to certain dependence chains. Secondly, a register
can never assume a value greater than 2M
A , where M is the
number of bits in that register. Otherwise, the AN-encoded
version of the register will overﬂow. In order to avoid this
situation, TRUMP can only be applied on dependence chains
whose values never exceed 2M
A . If the compiler cannot stati-
cally prove that a certain dependence chain has this property,
it has no choice but to leave it at least partially unprotected.
Fortunately, restrictions on valid memory addresses on most
architectures provide ample spare bits for the TRUMP trans-
formation to be applied to pointers. Also, code written in
languages with primarily 32-bit data types, such as C, will
typically not utilize many bits when executed on 64-bit archi-
tectures. These two phenomena allow TRUMP to be applied
widely on most applications.
5 MASK
This section introduces the MASK technique, which en-
forces statically known invariants in order to eliminate faults
that can be reasoned away. Using these invariants, MASK
can remove faults that would otherwise be deleterious, thus
increasing reliability without redundant execution.
The MASK technique is best illustrated through exam-
ple. Consider the code given in Figure 6, loosely culled from
adpcmdec, an adaptive PCM decoder benchmark from Me-
diaBench [10]. In this snippet, the otherFunc function is
called every other iteration of the loop, via the guarding reg-
ister r3. Any faults on the lowest bit of this register will cer-
tainly be detrimental to the program, causing it to execute or
not execute otherFunc erroneously for every subsequent
iteration. Furthermore, any fault on any of the other bits of
register r3 will cause otherFunc to be erroneously exe-
cuted every iteration, instead of every other iteration as orig-
inally intended. On a 64-bit system, 63
64 of the faults will be
of this latter type while only 1