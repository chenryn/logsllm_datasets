### 优化后的文本

#### 程序示例
```c
if (pid == -1) {
    perror("wait");
}
printf("pid=%d\n", pid);

if (WIFEXITED(status)) {
    printf("Normal termination with exit status=%d\n", WEXITSTATUS(status));
}

if (WIFSIGNALED(status)) {
    printf("Killed by signal=%d%s\n", WTERMSIG(status), WCOREDUMP(status) ? " (dumped core)" : "");
}

if (WIFSTOPPED(status)) {
    printf("Stopped by signal=%d\n", WSTOPSIG(status));
}

if (WIFCONTINUED(status)) {
    printf("Continued\n");
}

return 0;
```

#### 子进程退出
父进程调用 `wait()` 来等待子进程的退出。父进程会获取子进程的 PID 及其退出状态。

- 当子进程的 `main()` 函数正常返回时，输出如下：
  ```
  $ ./wait
  pid=8529
  Normal termination with exit status=1
  ```

- 当子进程的 `main()` 函数调用 `abort()` 时，子进程会收到 SIGABRT 信号，输出如下：
  ```
  $ ./wait
  pid=8678
  Killed by signal=6
  ```

### 进程管理

#### 5.4.1 等待特定进程
父进程可以通过调用 `waitpid()` 来等待特定的子进程。`waitpid()` 提供了更灵活的控制选项。

```c
#include <sys/types.h>
#include <sys/wait.h>

pid_t waitpid(pid_t pid, int *status, int options);
```

- `pid`：指定要等待的子进程的 PID。如果为 0，则等待任意子进程；如果为 -1，则等待任意子进程。
- `status`：用于存储子进程的状态信息。
- `options`：可以是以下值之一或多个的组合：
  - `WNOHANG`：如果没有可用的子进程，则立即返回。
  - `WUNTRACED`：如果子进程停止执行（由于接收到一个信号），则报告其状态。
  - `WCONTINUED`：如果子进程继续执行，则报告其状态。

示例代码：

```c
int status;
pid_t pid = waitpid(1742, &status, WNOHANG);

if (pid == -1) {
    perror("waitpid");
} else if (pid > 0) {
    printf("pid=%d\n", pid);

    if (WIFEXITED(status)) {
        printf("Normal termination with exit status=%d\n", WEXITSTATUS(status));
    }

    if (WIFSIGNALED(status)) {
        printf("Killed by signal=%d%s\n", WTERMSIG(status), WCOREDUMP(status) ? " (dumped core)" : "");
    }
}
```

#### 5.4.2 其他等待子进程的方法
除了 `wait()` 和 `waitpid()`，还有其他方法可以等待子进程。例如，XSI 扩展和 POSIX 提供了 `waitid()` 函数。

```c
#include <sys/types.h>
#include <sys/wait.h>

int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
```

- `idtype`：指定 ID 类型，可以是 `P_PID`、`P_PGID` 或 `P_ALL`。
- `id`：指定具体的 ID 值。
- `infop`：指向 `siginfo_t` 结构的指针，用于存储子进程的信息。
- `options`：可以是以下值之一或多个的组合：
  - `WEXITED`：等待已退出的子进程。
  - `WSTOPPED`：等待已停止的子进程。
  - `WCONTINUED`：等待已继续的子进程。
  - `WNOHANG`：如果没有可用的子进程，则立即返回。
  - `WNOWAIT`：不释放子进程的状态信息。

#### 5.4.3 BSD 中的 `wait3()` 和 `wait4()`
在 BSD 系统中，提供了 `wait3()` 和 `wait4()` 函数来等待子进程并获取资源使用信息。

```c
#include <sys/types.h>
#include <sys/resource.h>
#include <sys/wait.h>

pid_t wait3(int *status, int options, struct rusage *rusage);
pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
```

- `rusage`：指向 `struct rusage` 的指针，用于存储子进程的资源使用信息。

#### 5.4.4 创建并等待一个新进程
可以使用 `system()` 函数创建并等待一个新进程。

```c
#include <stdlib.h>

int system(const char *command);
```

- `command`：要执行的命令字符串。

示例代码：

```c
int ret = system("pidof rudderd");

if (WIFSIGNALED(ret) && (WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT)) {
    // 处理中断信号
}
```

#### 5.4.5 僵死进程
当子进程退出后，父进程没有调用 `wait()` 或 `waitpid()` 来回收子进程的资源时，子进程会变成僵死进程。系统会将这些僵死进程交给 init 进程（PID 为 1）来处理。

#### 5.5 用户和组
每个进程都有用户 ID 和组 ID。这些 ID 决定了进程的权限。

##### 5.5.1 实际用户 (组)ID、有效用户 (组)ID 和保存设置的用户 (组)ID
- **实际 ID**：进程的真实用户 ID。
- **有效 ID**：进程的有效用户 ID，用于权限检查。
- **保存设置的 ID**：进程的保存设置的用户 ID，用于恢复权限。

##### 5.5.2 改变实际用户 (组)ID 和保存设置的用户 (组)ID
可以使用 `setuid()` 和 `setgid()` 函数来改变进程的用户 ID 和组 ID。

```c
#include <unistd.h>
#include <sys/types.h>

int setuid(uid_t uid);
int setgid(gid_t gid);
```

- `uid`：新的用户 ID。
- `gid`：新的组 ID。

调用这些函数时，需要适当的权限。