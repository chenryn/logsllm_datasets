588M (−0.34%)
378M (−0.53%)
9,792M (−0.25%)
(0%)
7905M
9,778M
(0%)
5,588M
(0%)
12777M (0.01%)
8299M (0.11%)
2,206M (−1.21%)
1,592M (−0.13%)
229M (0.44%)
249M
(0%)
13,610M
(0%)
13,610M (−0.51%)
TABLE VI: The number of total memory read/write access from both the processor and DFITAGGER.
Attacks
RIPE
Heap exploit
VTable hijacking
Mechanism
Shadow stack
Heap metadata protection
VTable protection
Code pointer separation (CPS) RIPE
Code pointer separation (CPS) Format string exploit
Kernel protection
Private key leak prevention
Privilege escalation
Heartbleed
Result
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
TABLE VII: Security applications utilizing HDFI can effectively
prevent various attacks including Heartbleed (CVE-2014-0160).
IV Usability: HDFI should be ﬂexible, capable of supporting
different security solutions; it should also be easy to use, so
as to increase the chance of real-world adoption.
In this subsection, we evaluate whether HDFI achieves these
design goals or not. As described in §V, none of the HDFI-
powered security applications requires data shadowing, includ-
ing three solutions (stack protection, CPS and Kenali) whose
previous implementations rely heavily on data shadowing. For
this reason, we consider HDFI to have achieved goal III. And
as shown in Table III, implementing/porting security solutions
with HDFI is very easy, so we consider goal IV to be achieved
as well. Next, we analyze the security and efﬁciency beneﬁt.
1) Security Improvement: Compare with software-based
shadow stacks [21], our stack protection provides better security
than platforms that do not have efﬁcient isolation mechanisms,
such as x86_64 and ARM64. Compared with existing hardware-
based shadow stacks [46, 59, 81], our solution provides the
same security guarantee but is more ﬂexible and supports kernel
stack. Compared to active callsite based solutions [23, 24], our
stack protection provide better security. For standard libraries,
existing heap metadata integrity checks can be bypassed under
certain conditions. For example, Google project zero team
has successfully compromised ptmalloc with NULL off-by-
one [31]; and existing encryption-based exit handler protection
is vulnerable to information leak based attacks. However, Our
HDFI-based library enhancement cannot be bypassed because
attackers cannot control the hardware-managed tags. Compared
with existing VTable protection mechanisms [7, 38, 71, 85, 86],
our HDFI-based solution has both advantages and limitations.
On the positive side, our approach makes it much harder to
overwrite the vfptr; while in all other solutions, attackers can
1313
easily tamper with vfptr. However, because our approach does
not involve any class hierarchy analysis, we cannot guarantee
type safety (i.e., semantic correctness). Compared to the original
CPS implementation, our ported version provides the same
security guarantee as segment-based isolation but is stronger
than its randomization-based isolation, which has been proven
to be vulnerable [32]. Compared to the original implementation
of Kenali [66], our ported version provides stronger guarantees
than its randomization-based stack. Based on the above analysis,
we also consider HDFI to achieve goal I.
2) Performance Improvement: Because we can neither fully
port the original implementation of CPS and Kenali to our
testbed due to problems with the ofﬁcial llvm-riscv toolchain
nor run the C++ benchmarks of SPEC CINT 2000, we
designed the following benchmarks to evaluate the performance
improvement of HDFI-based security solutions.
Micro benchmarks. Compared with the original implementa-
tion of CPS, our ported version would be more efﬁcient because
it does not need to access the shadow data. To demonstrate this
beneﬁt, we implemented a micro benchmark that measures the
overhead for performing an indirect call for 1,000 times. To
simulate CPS, we used their own hash table implementation
and performed the same look up before the indirect call. For
our implementation, we just replaced the load instruction with
a checked load. Note, although our implementation sounds
simpler, it provides the same level of security guarantee as
the original segment-based CPS implementation. The result
showed that our protection only incurs 1.6% overhead, whereas
the hash table lookup incurred 971.8% overhead. Note, this
micro benchmark only shows the worst case performance of
both approaches. Depending on the running application, the
real end-user performance impacts could be much less than
this.
Because we cannot perform automated instrumentation to
fully replicate Kenali, here we only measured the performance
overhead of kernel stack protection. The result is shown
in Table VIII. Although our prototype implementation has
higher a performance overhead, it is also more secure than
the randomization-based stack protection used in the original
implementation.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:03 UTC from IEEE Xplore.  Restrictions apply. 
Benchmark
null syscall
open/close
select
signal install
signal catch
pipe
fork+exit
fork+execv
page fault
mmap
Baseline Kernel Stack Protection
8.91μs
160.6μs
285.6μs
19.3μs
99.8μs
273.6μs
5892μs
6510μs
50.0μs
800μs
8.934μs (0.27%)
168.7μs (5.04%)
287.5μs (0.67%)
21.5μs (11.4%)
105.6μs (5.81%)
306.6μs (12.06%)
6308μs (7.06%)
6972μs (7.1%)
52.6μs (5.2%)
880μs (10%)
TABLE VIII: LMBench results of baseline system and HDFI with
kernel stack protection.
Benchmark
164.gzip
181.mcf
254.gap
256.bzip2
GCC
981s
8388s
4254s
722s
Shadow Stack
992s (1.12%)
8536s (1.76%)
4396s (3.34%)
744s (3.05%)
Clang1
1734s
11014s
20783s
1454s
CPS+SS1
(2.42%)
1776s
(3.54%)
11403s
23526s (13.23%)
(4.61%)
1521s
TABLE IX: Performance overhead of HDFI-based shadow stack CPS.
1Please note that because Clang cannot compile the benchmark with
-O2, they were compiled with -O0.
SPEC CINT 2000. To measure the performance overhead of
HDFI under the existence of load check and store set, we ran
four benchmarks from SPEC CINT 2000 with two security
protections: GCC-based shadow stack and CPS plus LLVM-
based shadow stack. The result is shown in Table IX. As we
can see, the performance overhead is also low. Please note that
because Clang cannot compile the benchmarks with -O2, they
are compiled with -O0. As a result, the performance is much
worse than GCC. More importantly, because Clang did not
optimize redundant stack access with -O0, it caused trouble
for our current implementation of TVB (§VI-A); this is the
reason why the gap benchmark behaved so badly on CPS.
VIII. SECURITY ANALYSIS
Being an isolation mechanism, HDFI cannot guarantee
memory safety by itself, so it cannot prevent all memory
corruption-based attacks. In this section, we analyze the security
guarantee provided by HDFI and provide our recommendations
on how to utilize HDFI properly in security solutions.
A. Attack Surface
The security guarantee of HDFI is in data-ﬂow isolation, i.e.,
preventing data ﬂowing from one region to another. This is
enforced by (1) partitioning write operations into two groups:
those who can set the memory tag to 1, and those who set
the memory tag to 0; and (2) when loading, checking if the
tag matches the expected value. In this regard, HDFI has the
following attack surfaces:
1) Inaccuracy of Data-ﬂow Analysis: The ﬁrst challenge
for utilizing HDFI is how to correctly perform partitioning
and checking. To do so, we rely on data-ﬂow analysis. For
some security-critical data, such as return addresses and VTable
pointers, their data-ﬂow is quite simple, so the accuracy can be
easily guaranteed even without any program analysis. For data
like code pointers, because their data-ﬂow is more complicated,
it would require thorough static analysis to guarantee the
accuracy. Fortunately, because these data are usually self-
contained, i.e., not provided by external input, the accuracy,
to some extent, can still be guaranteed. However, for data
that exhibits complicated data-ﬂow, it may not always be
possible to guarantee the accuracy of static analysis. In this case,
the common strategy is to avoid false positives by allowing
false negatives, i.e., allowing some attacker controllable write
operations to set the memory tags. As a result, HDFI itself is
not sufﬁcient to guarantee data integrity, so one must employ
other runtime protection techniques to compensate for such
inaccuracies.
2) Deputy Attacks: After partitioning, the next challenge is
how to guarantee the trustworthiness of each write operation.
More speciﬁcally, a write operation takes two parameters, a
value and an address. The integrity of a write operation thus
relies on the integrity of both the value and the address. If either
of them can be controlled by attackers or the instruction gets
executed under wrong context (e.g., via control ﬂow hijacking),
then they can launch deputy attacks. Please note that the control
here means both direct and indirect control. For example, if
attackers can control the object pointer used to invoke a C++
constructor, then even though our VTable pointer protection
can prevent them from directly overwriting the VTable pointer,
they can still leverage this constructor to overwrite the VTable
pointer of an existing C++ object. Similarly, if a piece of
sensitive data may propagate from one memory location to
another, and one forgets to check the tag of the source before
setting the tag of the destination to 1, then an attack can leverage
this bug to overwrite sensitive data with a value controlled by
the attacker.
B. Best Practices
To mitigate the aforementioned attacks, we recommend
utilizing HDFI in the following ways:
1) To prevent write operations from executing under the
wrong context, it is important to enforce the integrity of the
control ﬂow, which is also required by other systems that
enforces write capability [2, 10]. With HDFI, this can be easily
achieved through protecting all the control data (e.g., CPS +
shadow stack).
2) To prevent attackers from controlling the address parame-
ter of write operations, it is important to recursively protect all
pointers that are part of the dereference chain [43, 66]. It is
worth noting that because HDFI is designed to be ﬁne-grained
and its protection is enforced efﬁciently by hardware, including
more pointers would not be a big performance issue.
3) To prevent attackers from controlling the value parameter
of write operations, one must ensure that the value is trusted.
A value is trusted if any of these conditions hold: (1) it is
a constant; (2) it is from a trusted register (e.g., the link
register); (3) it is loaded from a memory location with the
expected tag; or (4) the semantic of the current program context
guarantees the trustworthiness of the value (e.g., during early
kernel initialization or when the program is being initialized
by the dynamic loader). Moreover, if the value may have both
tags (e.g., unions in C), one should use the special memory
1414
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:03 UTC from IEEE Xplore.  Restrictions apply. 
copy instruction to propagate data with the tag when the data
is not modiﬁed or leverage a exception handler when the data
needs to be modiﬁed between load and store.
4) To compensate the potential inaccuracy of data-ﬂow
analysis, we recommend combining HDFI with a runtime
memory safety enforcement mechanism like [36, 52]. By
doing so, even if we allow attackers to control some write
operations, the memory safety protection mechanism would
prevent attackers from abusing those write operations to launch
attacks.
IX. LIMITATIONS AND FUTURE WORK
Direct Memory Access (DMA). Since our current prototype
of HDFI only handles memory accesses from the processor
core, it is vulnerable to DMA-based attacks. Attackers can
leverage DMA to (1) corrupt the data without changing the tag
and (2) directly attack the tag table. To mitigate this threat, we
could leverage features like IOMMU to conﬁne the memory
that can be accessed through DMA [64]. Alternatively, we
can choose to add our own hardware module in between the
interconnect and the memory controller such that all memory
accesses would pass through the hardware module. By doing
so, our hardware module would be able to determine whether
or not the access is from DFITAGGER, thus prevents malicious
access to the tag table. It is worth noting that similar hardware
modules have already been introduced [50] and deployed in
commodity hardware [3, 36].
Conﬁgurable Tag Table. Our current implementation com-
pletely blocks accesses to the tag table. Although this provides a
stronger security guarantee, it also comes with some drawbacks.
The ﬁrst problem is that we cannot save the page to disk
because the tag information will lost. To support these features,
we must allow the kernel to access the tag table. However,
to protect the tag table from tampering, we must implement
some protection techniques like [22] or integrity measurements
like [36]. Another drawback of our current design is that we
must allocate the whole tag table in advance. In the future, we
could provide other options for the OS kernel or the hypervisor
to manage the tag table depending on the security requirement
by users. On such a model, we can implement an on-demand
allocation mechanism to reduce the memory overheads, i.e.,
we allocate the tag memory only when DFITAGGER modiﬁes
a tag entry.
Opportunities for Further Optimizations. Although the
Rocket Chip Generator is a great tool for prototype veriﬁcation,
the Rocket Core is a very limited processor compared to
x86 processors. With a more powerful processor core like
the Berkeley out-of-order machine (BOOM) [12] and a more
sophisticated cache, we could further reduce the memory access
overhead using the following techniques.
Tag prefetch: Just like prefetching data that is likely to
be used in the future due to program locality, we could
also prefetch the tag. We could both prefetch the tag from
DFITAGGER to avoid possible read miss hit due to TVB and
prefetch the tag entries from the main memory when the bus
is free.
Delayed check: Just like speculating a branch, as most tag
checks should not triggering the exception, with an out-of-order
machine we could speculate the execution even when the tag