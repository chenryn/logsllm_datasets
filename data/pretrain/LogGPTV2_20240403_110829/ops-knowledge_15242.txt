User: I'm building a web application using GAE.
I've been doing some research by my own on GAE python project structures,
and found out that there isn't a set trend on how to place my handlers within the project.
As of now, I'm putting all the handlers(controllers) in main.py, 
and make all urls (/.*) be directed to main.application.
Is this going to make my application slower?
Thank You!
Assistant: In general, this will not make your application slower, however it can potentially slow you down your instance start-up time, but it generally isn't a problem unless you have very large complicated apps.
The instance start up time comes into play whenever GAE spins up a new instance for you.  For example, if your app is unused for a long period and you start it up once in a long while, or for example, if your app is very busy and need a new instance to handle the load.
python loads your modules as needed.  So if you launch an instance, and the request goes to main.py, then main.py and all the modules associated with it will get loaded.  If your app is large, this may take a few seconds.  Let's just say for example it takes 6 seconds to load every module in your app.  That's a 6 second wait for whoever is issuing that request.  Subsequent requests to that loaded instance will be quick.
It's possible to break down your handlers to separate modules.  If handler for \a requires very little code, then having \a in a separate file will reduce the response time for \a.  But when you load \b that has all the rest of the code, that would take a while to load.  So it's possible to take that 6 second load and potentially break it up into a few requests that may take 2 seconds.
This type of optimization really depends on the libraries you need to load with each request.  You generally want to do this later on, when you run into the problems, rather than design your layout for this purpose up front, since it's pretty difficult to predict.
App Engine warmup requests also help alleviate this problem.