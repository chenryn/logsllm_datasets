函数
 from min to max by step do 
www.TopSage.com
---
## Page 72
但几乎没人这样做。它唯一的用途是来强调将LAMBDA表达式用在任何一个正常函数名可以出现
需要时以更简洁方式来书写前面的FUNCALL表达式如下：
解释了为什么可以使用一个带有#的LAMBDA表达式来代替一个函数名。
第3章里讨论过，一个LAMBDA表达式形式如下：
不去定义和命名一个仅使用一次的函数，尤其是你可能从不用名字来调用它时，这会让人相当恼
5.9
参用于所有必要形参和适当的关键字形参。
最后的列表所组合而成的实参列表必定是一个合法的实参列表，其对于该函数来说带有足够的实
制EXP函数：
假如plot-data只含有最小、最大和步长值，那么你仍然可以像这样来使用APPLY在该范围上绘
以写出下面的替代版本：
个函数对象之后，它期待一个列表而非单独的实参。它将函数应用在列表中的值上，这就使你可
这样固然可以，但仅仅为了将实参传给plot而显式地将其解开，看起来相当讨厌。
plot-αata中，可以像这样用列表中的值来调用plot：
话说，这个列表包含了你想要作为实参传给plot的所有的值。假设这个列表保存在变量
((lambda (x y)(+ x y)） 2 3） → 5
更方便的是，APPLY还接受“孤立”（loose）的实参，
这就是需要APPLY的原因。和FUNCALL一样，APPLY的第一个参数是一个函数对象。但在这
甚至还可以在一个函数调用表达式中将LAMBDA表达式用作函数名。由此一来，我们可以在
可以将LAMBDA表达式视为一种特殊类型的函数名，其名字本身直接描述函数的用途。这就
觉得没必要用DEFUN来定义一个新函数时，
(funcall #(lambda (x y)(+ x y)） 2 3）→ 5
一旦开始编写或只是使用那些可以接受其他函数作为实参的函数，你就必然发现，有时不得
(apply #'plot #'exp plot-data)
(apply #'plot plot-data)
(plot (first plot-data) (second plot-data) (third plot-data) (fourth plot-data))
(lambda
匿名函数
(parameters) body)
www.TopSage.com
，可以使用一个LAMBDA表达式创建匿名的函数。
只要最后一个参数是个列表。因此，
5.9
匿名函数
55
---
## Page 73
而非函数的角度去考察，因此我将在下一章里讨论它们。
你在第3章里使用了一点儿闭包，但要深入了解闭包的工作原理及其用途，更多的还是要从变量
但如果写成这样将会更简单和清晰：
并随后将其传给plot：
达时，匿名函数特别有用。例如，假设想要绘制函数2x，你可以定义下面的函数：
的场合都是合法的。
在需要传递一个作为参数的函数给另一个函数，并且需要传递的这个函数简单到可以内联表
56
① 在Common Lisp里也可以不带前缀#来使用一个LAMBDA表达式作为FUNCALL的参数（或是其他一些接受函数参数
LAMBDA表达式的另一项重要用途是制作闭包（closure），即捕捉了其创建时环境信息的函数。
(defun double (x）(* 2 x))
NIL
(0t 0（(x  *）(x) epqwe1):# zotd)  (foo 1)
(dotimes (x 10)(format t "~d " x))
NIL
Parameter:
(defun foo (x)
((lambda (x) (format t "~a" x)) 10)
是一个展开到下列结果的宏：
(let ((x 10))
LET只是一-个展开到一个匿名函数调用的宏。也就是说，在那些方言里，
(let ((x 2))
format
(format
(let ((x 3))
(x  :a 1ano：  e1o1)
2
"Parameter: a~%" x)
(format t
"Outer LET:
“a~名”
www.TopSage.com
×））
X为3
X为2
X为实参
变量的基础知识 