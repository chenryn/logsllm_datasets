"Arial",sans-serif'>
&nbsp;
אתגר 3 – Careful
Steps (קטגוריית Programming, 20 נקודות)
&nbsp;
הוראות האתגר:
```
This is a bunch of archives we've found and we believe a secret flag is somehow hidden inside them.
We're pretty sure the information we're looking for is in the comments section of each file.
Can you step carefully between the files and get the flag?
Good luck!
```
&nbsp;
קובץ הארכיון מכיל 2000
קבצים, החל מ-unzipme.0 ועד ל-unzipme.1999.
שימוש בפקודת file מראה שמדובר באוסף של קבצי RAR ו-ZIP:
התוכן לא נראה
מעניין כל כך, מה אבל ההוראות שלחו אותנו להערות (שני הפורמטים תומכים בהוספת
הערות לקובץ הארכיון). 
אפשר לראות הערה של
קובץ ZIP באמצעות
פקודת unzip
-z:
נראה שכל הערה כוללת
אות, ומספר. ננסה להתייחס אל המספר בתור הוראות לאיזה קובץ לקפוץ בצעד הבא, ואל
האות בתור חלק מהדגל.
&nbsp;
לשם כך נוכל להשתמש
בסקריפט הבא:
```python
import os
import zipfile
import rarfile
import sys
print ("Reading comments...")
listOfFiles = sorted(os.listdir('archives'))
comments = {}
for file_name in listOfFiles:
    try:
        with zipfile.ZipFile('archives/' + file_name) as zf:
            comment = zf.comment.decode("utf-8")
    except zipfile.BadZipFile:
        try:
            with rarfile.RarFile('archives/' + file_name) as rf:
                comment = rf.comment
        except e:
            raise e
    #print ("{}\t{}".format(file_name, comment))
    comments[int(file_name.replace("unzipme.", ""))] = comment.rstrip()
print ("Following trail...")
current_index = 0
new_offset = 0
while True:
    current_index = current_index + new_offset
    #print ("Trying to access {}".format(current_index + new_offset))
    current = comments[current_index]
    char, new_offset = current.split(",")
    new_offset = int(new_offset)
    #print ("{}, {}".format(char, new_offset))
    sys.stdout.write(char)
    if new_offset == 0:
        break
```
&nbsp;
החלק הראשון קורא את
כל ההערות, והחלק השני עוקב אחרי הצעדים בהערות ומדפיס את התווים המתאימים.
אם נריץ את הסקריפט,
נקבל:
&nbsp;
אתגר 4 – Ping
Pong (קטגוריית Networking, 25 נקודות)
&nbsp;
הוראות האתגר:
```
I bet you're not fast enough to defeat me. I'm at:
nc 35.157.111.68 10140
```
&nbsp;
נתחבר לשרת:
השרת מבקש שנשלח לו
מספר אקראי כלשהי. כאשר אנו עושים זאת, הוא מבקש מספר אחר. אם התגובה איטית מדי,
השרת סוגר את החיבור.
כמובן שאנחנו לא רוצים
לשלוח תשובות ידנית ולכן נכתוב סקריפט שעושה זאת עבורנו:
```python
import socket
import time
import re
s = socket.socket()         
reg = re.compile('^.+: ([\d]+)\n$')
try:
    port = 10140              
    s.connect(('35.157.111.68', port))
    start_time = time.time()
    print (s.recv(9)) #Read the "Welcome!\n"
    while True:
        msg = (s.recv(1024)).decode("utf-8")
        print (msg)
        match = reg.match(msg)
        if match:
            num = match.group(1)
            print (num)
            s.send(str.encode(num + "\n"))
        else:
            break
    print("--- %s seconds ---" % (time.time() - start_time))
except:
    raise
finally:
    s.close()    
```
הסקריפט משתמש
בביטוי רגולרי כדי לחלץ את המספר ואז שולח אותו חזרה אל השרת:
```python
re.compile('^.+:([\d]+)\n$')
```
הביטוי הזה מתאים
לשורה שמתחילה בכל תו (.) שמופיע פעם אחת או יותר (+) כאשר לאחר מכן צריכות להופיע נקודתיים (:) ואז רווח ( ), ספרה אחת או יותר ([\d]+) וירידת שורה (\n). הסימנים &quot;^&quot; ו&quot;$&quot; מסמלים תחילת וסוף שורה, והסוגריים
מסביב ל-&quot;[\d]+&quot; מסמנים שזהו הביטוי שנרצה לחלץ.
את הביטוי אנחנו
מקמפלים מראש כדי להשיג ריצה יעילה יותר.
נריץ את הסקריפט
ונקבל:
&nbsp;
בדיעבד, מכיוון
שאנחנו יודעים שהשרת תמיד מחזיר את אותה תשובה, היה אפשר לוותר על הביטוי הרגולרי
ולחסוך כמה שניות (במחיר של קריאות וגמישות) על ידי דילוג על &quot;Good, the next is: &quot; וקפיצה
ישירה אל המספר שצריך להחזיר (במילים אחרות, נראה שהמספר תמיד מתחיל באותו offset<span lang=HE