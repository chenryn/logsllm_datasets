compatible with today’s web, it is interesting to inves-
tigate the compatibility cost of eliminating the insecure
policies in today’s browsers. We have considered several
policies that differ from today’s browsers but offer bet-
ter security. We conducted a preliminary study on their
compatibility cost. This is by no means a conclusive or
complete study, but only a ﬁrst look on the topic.
We mostly used the data set of the front pages of the
top 100 most popular web sites ranked by Alexa [5]. We
used a combination of browser instrumentation with au-
tomatic script execution and manual inspection in our
study. We consider any visual differences in the render-
ing of a web page to be a violation of compatibility. We
discuss our ﬁndings below.
Subdomain treatment Existing browsers and SOP
make exceptions for subdomains (e.g., news.google.com
is a subdomain of google.com) [39]: a page can set
the document.domain property to sufﬁxes of its do-
main and assume that identity. This feature was one
of the few methods for cross-origin frames to communi-
cate before the advent of postMessage [25]. Changing
document.domain is a dangerous practice and violates
the Principle of Least Privilege: Once a subdomain sets
its domain to a sufﬁx, it has no control over which other
Location
Browser kernel
Browser instance
Browser instance
Browser instance
Browser instance
Browser instance
Browser instance
Browser kernel
Overhead
Overhead before rendering
- process creation
- creating interposed instances of Trident
- named pipe initialization
Overhead during rendering
- proxy-based network interposition
- other Trident interposition
Overhead after rendering
- bitmap capture
- bitmap transfer
- display rendering
Latency
blank site
google.com nytimes.com
44 ms
94 ms
137 ms
4 ms
127 ms
13 ms
37 ms
10 ms
40 ms
94 ms
145 ms
134 ms
122 ms
35 ms
67 ms
11 ms
78 ms
197 ms
439 ms
541 ms
813 ms
196 ms
226 ms
101 ms
Table 5: A breakdown of Gazelle’s overheads involved in page rendering. Note that nytimes.com creates two processes
for itself and an ; the other two sites create one process.
subdomains can access it. This is also observed by Za-
lewski [48]. Therefore, it would be more secure not to
allow a subdomain to set document.domain.
Our experiments indicate that six of the top 100 Alexa
sites set document.domain to a different origin, though
restricting write access to document.domain might not
actually break the operation of these web sites.
Mixed HTTPS and HTTP Content. When an
HTTPS site embeds HTTP content, browsers typically
warn users about the mixed content, since the HTTPS
site’s content can resist a network attacker, but the em-
bedded HTTP content could be compromised by a net-
work attacker.
When an HTTPS site embeds other HTTP principals
(through , , etc.), HTTPS princi-
pals and HTTP principals will have different protection
domains and will not interfere with each other.
However, when an HTTPS site embeds a script or style
sheet delivered with HTTP, existing browsers would al-
low the script to run with the HTTPS site’s privileges (af-
ter the user ignores the mixed content warning). This is
dangerous because a network attacker can then compro-
mise the HTTP-transmitted script and attack the HTTPS
principal despite its intent of preventing network attack-
ers. Therefore, a more secure policy is to deny ren-
dering of HTTP-transmitted scripts or style sheets for
an HTTPS principal. Instead of the Alexa top 100, we
identiﬁed a few different sites that provide SSL ses-
sions for parts of their web application: amazon.com,
mail.google.com, mail.microsoft.com, blogger.com, and
a few popular banking sites where we have existing ac-
counts. This allows us to complete the login process dur-
ing testing. These sites do not violate this policy.
In
addition, we have also gathered data from one of the au-
thor’s browsing sessions over the course of a few months
and found that out of 5,500 unique SSL URLs seen, less
than two percent include HTTP scripts and CSS.
Layout policies. The opaque overlay policy allows
only opaque (and not transparent) cross-origin frames or
objects (Section 5.2). We test this policy with the top
100 Alexa sites by determining if any cross-origin frames
or objects are overlapped with one another. We found
that two out of 100 sites attempt to violate this policy.
This policy does not generate rendering errors; instead,
we convert transparent cross-origin elements to opaque
elements when displaying content.
We also tested the 2D display delegation policy that
we analyzed in Section 5.2. We found this policy to have
higher compatibility cost than our opaque overlay policy:
six of the top 100 sites attempt to violate this policy.
Sites that attempt to violate either policy have reduced
functionality, and will render differently than what the
web page author intends.
Plugins. Existing plugin software must be adapted
(ported or binary-rewritten) to use browser kernel sys-
tem calls to accomplish its tasks. Of top 100 Alexa sites,
34 sites use Flash, but no sites use any other kinds of plu-
gins. This indicates that porting or adapting Flash alone
can address a signiﬁcant portion of the plugin compati-
bility issue.
10 Concluding Remarks
We have presented Gazelle, the ﬁrst web browser that
qualiﬁes as a multi-principal OS for web site princi-
pals. This is because Gazelle’s browser kernel exclu-
sively manages resource protection, unlike all existing
browsers which allow cross-principal protection logic to
reside in the principal space. Gazelle enjoys the security
and robustness beneﬁt of a multi-principal OS: a com-
promise or failure of one principal leaves other principals
and the browser kernel intact.
Our browser construction exposes challenging design
issues that were not seen in previous work, such as pro-
viding legacy protection to cross-origin script source and
cross-principal, cross-process display and event protec-
tion. We are the ﬁrst to provide comprehensive solutions
to them.
The implementation and evaluation of our IE-based
prototype shows promise of a practical multi-principal
OS-based browser in the real world.
In our future work, we are exploring the fair sharing
of resources among web site principals in our browser
kernel and a more in-depth study of the tradeoffs between
compatibility and security in browser policy design.
11 Acknowlegements
We thank Spencer Low, David Ross, and Zhenbin Xu
for giving us constant help and fruitful discussions. We
thank Adam Barth and Charlie Reis for their detailed and
insightful feedback on our paper. We also thank the fol-
lowing folks for their help: Barry Bond, Jeremy Con-
dit, Rich Draves, David Driver, Jeremy Elson, Xiaofeng
Fan, Manuel Fandrich, Cedric Fournet, Chris Hawblitzel,
Jon Howell, Galen Hunt, Eric Lawrence, Jay Lorch, Rico
Malvar, Wolfram Schulte, David Wagner, Chris Wilson,
and Brian Zill. We also thank our paper shepherd Niels
Provos for his feedback over our last revisions.
References
[1] Changes in allowScriptAccess default (Flash Player). http://
www.adobe.com/go/kb403183.
[2] Developer center:
in Flash Player 7.
http://www.adobe.com/devnet/flash/articles/
fplayer_security.html.
Security changes
[3] Security advisories
http://www.
mozilla.org/security/known-vulnerabilities/
firefox20.html.
for Firefox 2.0.
[4] .NET Framework Developer Center,
2008.
http:
//msdn.microsoft.com/en-us/netframework/
default.aspx.
[5] Alexa, 2009. http://www.alexa.com/.
[6] M. Barnett, K. Rustan, M. Leino, and W. Schulte. The Spec#
In LNCS, editor, CAS-
http://research.
programming system: An overview.
SIS, volume 3362. Springer, 2004.
microsoft.com/en-us/projects/specsharp/.
[7] A. Barth and C. Jackson. Protecting browsers from frame hijack-
ing attacks, April 2008. http://crypto.stanford.edu/
websec/frames/navigation/.
[8] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame com-
munication in browsers. In In Proceedings of the 17th USENIX
Security Symposium (USENIX Security), 2008.
[10] S. Chen, D. Ross, and Y.-M. Wang. An Analysis of Browser
Domain-Isolation Bugs and A Light-Weight Transparent Defense
Mechanism. In Proceedings of the ACM Conference on Computer
and Communications Security, 2007.
[11] R. S. Cox, J. G. Hansen, S. D. Gribble, and H. M. Levy. A Safety-
Oriented Platform for Web Applications. In Proceedings of the
IEEE Symposium on Security and Privacy, 2006.
[12] D. Crockford.
JSONRequest. http://www.json.org/
jsonrequest.html.
[13] D. Crockford.
The Module Tag: A Proposed Solution to
the Mashup Security Problem. http://www.json.org/
module.html.
[14] Document Object Model. http://www.w3.org/DOM/.
[15] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch. Leverag-
In
ing legacy code to deploy desktop applications on the web.
Proceedings of the Symposium on Operating Systems Design and
Implementation, 2008.
[16] Firefox 3 for developers, 2008.
https://developer.
mozilla.org/en/Firefox_3_for_developers.
[17] Mozilla Browser and Mozilla Firefox Remote Window Hijacking
Vulnerability, 2004. http://www.securityfocus.com/
bid/11854/.
[18] Security Advisories
http://www.
mozilla.org/security/known-vulnerabilities/
firefox20.html.
for Firefox 2.0.
[19] D. Flanagan. JavaScript: The Deﬁnitive Guide. O’Reilly Media
Inc., August 2006.
[20] Adobe Flash Player 9 Security,
July 2008.
http://
www.adobe.com/devnet/flashplayer/articles/
flash_player_9_security.pdf.
[21] C. Grier, S. Tang, and S. T. King. Secure web browsing with the
OP web browser. In Proceedings of the 2008 IEEE Symposium
on Securiy and Privacy, 2008.
[22] J. Grossman.
Advanced Web Attack Techniques using GMail.
//jeremiahgrossman.blogspot.com/2006/01/
advanced-web-attack-techniques-using.html.
http:
[23] W. H. A. T. W. Group. Web Applications 1.0, February
http://www.whatwg.org/specs/web-apps/
2007.
current-work/.
[24] HTML 5 Editor’s Draft, October 2008. http://www.w3.
org/html/wg/html5/.
[25] What’s New in Internet Explorer 8, 2008. http://msdn.
microsoft.com/en-us/library/cc288472.aspx.
[26] Microsoft Internet Explorer Remote Window Hijacking Vulner-
ability, 2004. http://www.securityfocus.com/bid/
11855.
[27] S. Ioannidis and S. M. Bellovin. Building a secure web browser.
In Proceedings of the FREENIX Track: 2001 USENIX Annual
Technical Conference, 2001.
[28] S. Ioannidis, S. M. Bellovin, and J. M. Smith. Sub-operating sys-
tems: a new approach to application security. In Proceedings of
the 10th workshop on ACM SIGOPS European workshop, pages
108–115, New York, NY, USA, 2002. ACM.
[29] C. Jackson and A. Barth. Beware of Finer-Grained Origins. In
Web 2.0 Security and Privacy, May 2008.
[9] A. Barth, C. Jackson, C. Reis, and T. G. C. Team.
the Chromium browser,
The
security architecture of
2008.
http://crypto.stanford.edu/websec/chromium/
chromium-security-architecture.pdf.
[30] C. Jackson, A. Barth, A. Bortz, W. Shao, and D. Boneh. Pro-
tecting Browsers from DNS Rebinding Attacks. In Proceedings
of ACM Conference on Computer and Communications Security,
2007.
[31] JavaScript Object Notation (JSON).
org/.
http://www.json.
[32] D. Kristol and L. Montulli. HTTP State Management Mecha-
nism. IETF RFC 2965, October 2000.
[33] T. W. Mathers and S. P. Genoway. Windows NT Thin Client So-
lutions: Implementing Terminal Server and Citrix MetaFrame.
Macmillan Technical Publishing, Indianapolis, IN, November
1998.
[34] IEBlog:
IE8 Security Part V: Comprehensive Protection,
2008. http://blogs.msdn.com/ie/archive/2008/
07/02/ie8-security-part-v-comprehensive-
protection.aspx.
[35] Microsoft security bulletin.
com/technet/security/.
http://www.microsoft.
[36] Microsfot Security Intelligence Report, Volume 5, 2008.
http://www.microsoft.com/security/portal/
sir.aspx.
[37] C. Reis and S. D. Gribble.
Isolating web programs in modern
browser architectures. In Proceedings of Eurosys, 2009.
[38] T. Richardson, Q. Stafford-Fraser, K. R. Wood, and A. Hopper.
Virtual network computing. IEEE Internet Computing, 2(1):33–
38, 1998.
[39] J. Ruderman.
The Same Origin Policy.
http://www.
mozilla.org/projects/security/components/
same-origin.html.
[40] R. W. Scheiﬂer and J. Gettys. The X window system. ACM
Transactions on Graphics (TOG), 5(2):79–109, April 1986.
[41] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia.
Design of the EROS TrustedWindow system. In Usenix Security,
2004.
[42] Symantec Global Internet Security Threat Report: Trends for July
- December 07, April 2008.
[43] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and
Communication Abstractions in MashupOS. In ACM Symposium
on Operating System Principles, October 2007.
Vulnerability
[44] Cross-Domain
6.
Explorer
cross-domain-vulnerability-in-microsoft-
internet-explorer-6/.
Internet
http://cyberinsecure.com/
In Microsoft
[45] The XMLHttpRequest Object. http://www.w3.org/TR/
XMLHttpRequest/.
[46] W3C XMLHttpRequest Level 2.
http://dev.w3.org/
2006/webapi/XMLHttpRequest-2/.
[47] B. Yee, D. Sehr, G. Dardyk, B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar. Native client: A sandbox
for portable, untrusted x86 native code.
In Proceedings of the
IEEE Symposium on Security and Privacy, May 2009.
[48] M. Zalewski. Browser security handbook, 2008. http://
code.google.com/p/browsersec/wiki/Main.