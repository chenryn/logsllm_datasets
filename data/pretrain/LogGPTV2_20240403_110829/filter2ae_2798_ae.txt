这样一来，防御者的简单的静态文本、或正则表达式规则匹配都无法识别这种"躲避技术"(evasion
techniques)，除非管理员使用更复杂的检测引擎来识别这些不常规的 payloads。
  * 最近，使用SSRF攻击规避检测的新方法包括：
    * 1."请求分割"(Request Splitting) - 使用特定的Unicode字符，利用HTTP基于文本的特性，以在请求中使用"协议控制字符"(protocol control indicators)来分割行，以实现能够传递SSRF payload的注入(Kelly, 2018)。[Security Bugs in Practice: SSRF via Request Splitting](https://www.rfk.id.au/blog/entry/security-bugs-ssrf-via-request-splitting/)
    * 2."请求夹带"(Request Smuggling) - 使用格式不正确的HTTP headers或利用Web服务器的特定"解析"(parsing)行为，将来自攻击者的请求注入到同一目标的另一个请求的开头 (C. Linhart, 2005)。这种技术首次在2005年的出版物中进行了描述，HTTP的灵活性、宽容性继续为"HTTP解析漏洞"(HTTP parsing vulnerabilities)注入了新的活力，最近，它通过在称为`HTTP Desync`技术的变体中利用`Transfer-Encoding`和`Content-Encoding`的不同行为展示了新的特性以用于进行注入，包括SSRF (Kettle, HTTP Desync Attacks: Request Smuggling Reborn, 2019)。防止`HTTP Desync`的一种技术可能是使用CDN（例如Cloudflare, Amazon CloudFront, Imperva Cloud WAF）作为"TLS termination"点(注:应该是指TLS解密、TLS卸载)，前提是这个CDN能够提供比它保护的这个"源"(origins)更严格的HTTP解析。
（译者注：已总结至 [notes - SSRF
绕过技巧](https://github.com/1135/notes/blob/master/web_vul_SSRF.md#%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7)）。
#### 4.1.4. Recommendations for Cloud Providers
通常，SSRF攻击仅对HTTP请求的host和path的控制来成功利用，通常不能注入或操作其他HTTP headers。以Google
Cloud的Compute Engine为例，它已经实现了访问管理API所需的header和值为`Metadata-Flavor：Google`，以减少无法设置该header的那些SSRF攻击的成功(Google，2019)。AWS没有这样的保护，但是如果AWS增加一个“SSRF攻击很难去模仿的”访问EC2
IMS的前提要求，这可能会降低SSRF成功的可能性。
EC2 IMS提供了一个可预测的目标，攻击者都知道的link-local地址。当前，AWS
WAF均不包括默认内容检查规则去检测：包含169.254.169.254地址的请求或包含临时访问密钥的响应。  
在AWS的情况下，通常对于云提供商而言，如果能默认包括许多覆盖SSRF用例的WAF规则，将提高其客户的"常规检测功能"(general detective
capabilities)。
A temporary key obtained by an instance through IMS can issue API calls from
outside of AWS infrastructure, in part, because before the advent of AWS
PrivateLink in November 2017, AWS API calls within cloud networks were routed
externally, over the public internet. (Amazon Web Services, 2017). If cloud
providers, including AWS, required caller authentication to access sensitive
operations and limited callers’ use of temporary access credentials to the
internal, it could reduce the damage potential of an SSRF attack.
此外，虽然按照惯例，临时访问密钥以字符`ASIA`开头，但是这种密钥并不隐式地局限于"调用方"(caller)。实例通过IMS获得的临时密钥可以从AWS基础设施的"外部"发出API调用，部分原因是在2017年11月AWS
PrivateLink出现之前，AWS在云网络内的API调用是通过公网Internet从外部路由的(Amazon Web Services,
2017)。如果云服务提供商(包括AWS)要求"调用方"(caller)身份验证才能访问敏感操作，并限制"调用方"对内部的临时访问凭证的使用，则可以减少SSRF攻击的潜在危害。
### 4.2. Implications for Future Research
对未来研究的意义。
  * 常见场景
    * 1.把已有业务迁移上云
      * 许多公司将"业务"(workloads)迁移到云。传统上，这被IT专业人员称为“lift and shift”操作，因为IT专业人员使用熟悉的技术将在"本地基础设施"(on-premises infrastructures) 或 "位于同一位置的"(co-located)数据中心的虚拟机 换为 作为EC2实例运行的虚拟机。使用熟悉的那些操作系统并提供"交互式管理访问"(interactive administrative access)。
    * 2.直接利用云上环境 对业务做重新开发
      * 很多公司也会利用新颖的云服务(AWS Elastic Kubernetes Services、AWS Fargate、AWS Lambda等) 直接在云上开发新的"业务"(workloads)，所有这些服务都提供了"计算环境"但抽象了"管理访问"(administrative access)，为云提供商保留了"管控规划"(control plan)。
每一个云服务商的产品都为“有SSRF漏洞的应用程序和代码”提供了机会，并且每一个产品都限制了安全专业人员使用传统工具检测并阻止此类攻击的能力。可能存在“仅限于于云基础设施的检测技术”，同时安全研究人员应继续寻找更多"分层管控"(layered
controls)，以保护敏感数据免受云环境中SSRF漏洞的影响。
## 5\. Conclusion
总而言之，云无法幸免于SSRF漏洞带来的危害，并且存在实用的技术来检测、防止对存在SSRF漏洞的应用程序的攻击。
企业如果在云中传输或存储了敏感数据，则应该执行适当的检测管控措施，以识别SSRF攻击尝试，而不是等到知道了某企业发生了数据泄露事件。通过在云上利用这些完善的工具，安全专业人员可以保护云上的"业务"(workloads)，避免针对AWS
API、EC2 IMS的SSRF攻击。
云能够成为一个经济、高效、安全的地方，能够进行大规模的快速创新。
## References
Amazon Web Services. (2017, September 7). Announcing Network Load Balancer for
Elastic Load Balancing. Retrieved from About AWS:  
Amazon Web Services. (2017, November). AWS re:Invent 2017: NEW LAUNCH!
Amazon EC2 Bare Metal Instances (CMP330). Retrieved October 7, 2019, from
Amazon Web Services channel on YouTube.com:
Amazon Web Services. (2017, November 8). Introducing AWS PrivateLink for AWS
Services. Retrieved from About AWS: 
Amazon Web Services. (2019, September 6). CloudTrail Concepts. Retrieved from
AWS CloudTrail User Guide:  
Amazon Web Services. (2019, October). Elastic Network Interfaces. Retrieved
from Amazon Elastic Compute Cloud User Guide for Linux Instances:  
Amazon Web Services. (2019, September 21). Instance Metadata and User Data.  
Retrieved from AWS Documentation for EC2:  
Amazon Web Services. (2019, October 1). What Is Amazon GuardDuty? Retrieved
from Amazon Guard Duty User Guide:  
Art, S. (2016, September 26). Nodejs-SSRF-App. Retrieved October 8, 2019, from
GitHub.com: 
Bengtston, W. (2018, August 8). Netflix Cloud Security: Detecting Credential
Compromise in AWS. Retrieved from The Netflix Tech Blog:  
C. Linhart, A. K. (2005). HTTP Request Smuggling. Watchfire.  
C. Mazzariello, R. B. (2010). Integrating a Network IDS into an Open Source
Cloud Computing Environment. 2010 Sixth International Conference on
Information Assurance and Security (IAS). IEEE.  
ERPScan. (2013, March 27). SSRF DoS Relaying. Retrieved from ERPScan.io Blog:  
Fernandez, G. (2019, September 3). Metadata abuse in AWS. Retrieved from
Technology with a business perspective.:  
Google. (2019, October 01). Storing and retrieving instance metadata.
Retrieved from Compute Engine Documentation:
Institute of Information Security. (2015, April 16). Server Side Request
Forgery (SSRF).  
Retrieved from Institute of Information Security Blog:  
Kelly, R. (2018, September 10). Security Bugs in Practice: SSRF via Request
Splitting.  
Retrieved from Personal blog:  
Kettle, J. (2017, July 27). Cracking the lens: targeting HTTP's hidden attack-surface.  
Retrieved from PortSwigger Research:  
Kettle, J. (2019). HTTP Desync Attacks: Request Smuggling Reborn. PortSwigger
Web Security.  
Modi, C. &. (2017, March). Virtualization layer security challenges and
intrusion detection/prevention systems in cloud computing: a comprehensive
review.  
Journal of Supercomputing, 73(3), 1192-1234.
OWASP. (2017). Top 10-2017 A1-Injection. Retrieved from The Open Web
Application Security Project:
P. K. Shelke, S. S. (2012, May). Intrusion Detection System for Cloud
Computing.  
International Journal of Scientific & Technology Research(4).
rain.forest.puppy. (1998, December 25). NT Web Technology Vulnerabilities.
Phrack Magazine, 8(54). Retrieved from 
Reese, S. (2018, January 15). Network Traffic Capture in Virtual Enviroments.
Retrieved from rsreese.com: 
Sripati, P. (2019, September 26). How To Secure Web Applications With AWS WAF?  
Retrieved from AWS Architect Certification Training:  