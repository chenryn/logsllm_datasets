    001b:76a0f0a7 5a              pop     edx
    kd> p
    user32!__fnOUTDWORDINDWORD+0x2f:
    001b:76a0f0a8 8d4df4          lea     ecx,[ebp-0Ch]
    kd> p
    user32!__fnOUTDWORDINDWORD+0x32:
    001b:76a0f0ab 8945f4          mov     dword ptr [ebp-0Ch],eax
    kd> p
    user32!__fnOUTDWORDINDWORD+0x35:
    001b:76a0f0ae e86171fcff      call    user32!XyCallbackReturn (769d6214)
在fnOUTDWORDINDWORD中，调用了XyCallbackReturn，再回头看之前关于SendMessage函数异步过程的描述，XyCallbackReturn正是从用户态切换回内核态一个关键函数调用，跟进这个函数，可以观察到调用了int
2B软中断，回归内核态
    kd> t
    user32!XyCallbackReturn:
    001b:769d6214 8b442404        mov     eax,dword ptr [esp+4]
    kd> p
    user32!XyCallbackReturn+0x4:
    001b:769d6218 cd2b            int     2Bh
这个过程会携带钩子的返回结果，从而到后面执行shellcode，回归内核态之后，来看一下调用到shellcode。
    kd> g
    Breakpoint 4 hit
    win32k!xxxSendMessageTimeout+0x1a9:
    967e94f0 ff5660          call    dword ptr [esi+60h]
    kd> dd esi
    fffffffb  ???????? ???????? fe9d3dd8 00000000
    kd> dd esi+60
    0000005b  00f61410 00000000 00000000 00000000
    kd> t
    00f61410 55              push    ebp
    Executable search path is: 
    ModLoad: 00f60000 00f67000   EoP.exe 
    ModLoad: 770c0000 771fc000   ntdll.dll
    ModLoad: 76760000 76834000   C:\Windows\system32\kernel32.dll
我们事先在0x5b地址位置分配了0页内存，然后往里存放了一shellcode的地址，这样call esi＋60相当于call
0x5b，从而进入shellcode的内容。
其实在调试漏洞的过程中，钩子的调用是一个很有趣的过程，也是触发这个漏洞的关键，同样，不仅仅是CVE-2014-4113，在很多Windows提权漏洞的利用上，都用到了类似手法，比如CVE-2015-2546等等。
在文章一开始，我提到这个漏洞的关键原因是一处if语句判断不严谨导致的漏洞发生，当结束了这个有趣的调试细节之后，我将通过补丁对比，以及补丁前后的动态调试来看看这个漏洞的罪魁祸首是什么。
### 补丁对比与过程分析
我们安装CVE-2014-4113的补丁，可以看到，补丁后利用提权工具提权后，仍然不能获得系统权限。
补丁前：
补丁后：
我们通过BinDiff来分析一下这个补丁前后发生了哪些变化，这时候我们需要通过文章最开始，我们在定位了提权发生的位置之后，通过堆栈回溯的过程看到的函数调用关系，来确定我们应该看看哪些函数发生了变化。
实际上补丁前后大多数函数变化都不大，但是看到xxxHandleMenuMessages中存在一些小变化，跟进这个函数查看对比。
注意对比图下方有一些跳转产生了变化，放大下面这个块的内容。
左侧黄块和这个漏洞无关，可以看到左侧是两个绿色块直接相连，表示直接跳转，而右侧补丁后，则在两个绿块之间增加了一个黄块，观察黄块，其中调用了一个IsMFMWFPWindow函数，这个函数可以通过IDA
pro看到它的作用。实际上就是一个bool函数，用来限制0，－1和－5的情况，下面我们来动态调试分析。
    BOOL __stdcall IsMFMWFPWindow(int a1)
    {
      return a1 && a1 != -5 && a1 != -1;
    }
首先是补丁前，会经过一系列的if判断，直接单步跟踪到最关键的一处if判断。
    if ( *(_BYTE *)v3 & 2 && v13 == -5 )
    kd> p
    win32k!xxxHandleMenuMessages+0x54c:
    968692c5 f60702          test    byte ptr [edi],2
    kd> p
    win32k!xxxHandleMenuMessages+0x54f:
    968692c8 740e            je      win32k!xxxHandleMenuMessages+0x55f (968692d8)
这个if判断其实是想处理0xfffffffb的情况的，也就是说，当v13的值等于－5，也就是0xfffffffb的时候，会进入if语句，而不会执行将－5传递到下面的SendMessage中，然而这个if语句中的是与运算，也就是说，当前面v3&2不成立的时候，就不会进入if语句了，而动态调试前面是不成立的，直接跳转到后面的if语句判断。
    if ( v13 == -1 )
    kd> p
    win32k!xxxHandleMenuMessages+0x55f:
    968692d8 83fbff          cmp     ebx,0FFFFFFFFh
    kd> p
    win32k!xxxHandleMenuMessages+0x562:
    968692db 750e            jne     win32k!xxxHandleMenuMessages+0x572 (968692eb)
这就导致了－5被传递到后面的SendMessage，从而导致了后面的代码执行。
    win32k!xxxHandleMenuMessages+0x572:
    968692eb 6a00            push    0
    kd> p
    win32k!xxxHandleMenuMessages+0x574:
    968692ed ff7510          push    dword ptr [ebp+10h]
    kd> p
    win32k!xxxHandleMenuMessages+0x577:
    968692f0 68ed010000      push    1EDh
    kd> p
    win32k!xxxHandleMenuMessages+0x57c:
    968692f5 53              push    ebx
    kd> p
    win32k!xxxHandleMenuMessages+0x57d:
    968692f6 e8a202f8ff      call    win32k!xxxSendMessage (967e959d)
    kd> dd esp
    8b46fa94  fffffffb 000001ed 0091f92c 00000000
可以看到，当执行SendMessage的时候，第一个参数为0xfffffffb，后续会在SendMessageTimeOut中引发进入Shellcode，这个之前已经提到。
接下我们一起看一下补丁后的调试情况，补丁后，引入了IsMFMWFPWindow函数多做了一个if语句的判断。
    kd> r
    eax=00040025 ebx=fffffffb ecx=8a8d7a74 edx=8a8d7b74 esi=9765b880 edi=fe5ffa68
    eip=9756bf10 esp=8a8d7aa0 ebp=8a8d7ae8 iopl=0         nv up ei ng nz ac pe cy
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000297
    win32k!xxxHandleMenuMessages+0x570:
    9756bf10 53              push    ebx
    kd> p
    win32k!xxxHandleMenuMessages+0x571:
    9756bf11 e889b90000      call    win32k!IsMFMWFPWindow (9757789f)
可以看到ebx作为参数传入IsMFMWFPWindow，ebx的值为0xfffffffb，而这个值是－5，判断肯定是不通过的，返回false。
    kd> p
    win32k!IsMFMWFPWindow+0xb:
    975778aa 837d08fb        cmp     dword ptr [ebp+8],0FFFFFFFBh
    kd> p
    win32k!IsMFMWFPWindow+0xf:
    975778ae 740b            je      win32k!IsMFMWFPWindow+0x1c (975778bb)
    kd> p
    win32k!IsMFMWFPWindow+0x1c:
    975778bb 33c0            xor     eax,eax
可以看到ebp＋8判断是否为false，这里是为false的，所以跳转，不执行SendMessage，这样漏洞就被修补了，我们最后来看一下补丁前后的伪代码。
补丁前：
     v13 = xxxMNFindWindowFromPoint(v3, (int)&UnicodeString, (int)v7);
                v52 = IsMFMWFPWindow(v13);
                ……//省略一部分代码
                if ( *(_BYTE *)v3 & 2 && v13 == -5 )//key！这里第一个判断不通过
                {
                  xxxMNSwitchToAlternateMenu(v3);
                  v13 = -1;
                }
                if ( v13 == -1 )
                  xxxMNButtonDown((PVOID)v3, v12, UnicodeString, 1);
                else
                  xxxSendMessage((PVOID)v13, -19, UnicodeString, 0);//key！
补丁后：
    v29 = xxxMNFindWindowFromPoint((WCHAR)v3, (int)&UnicodeString, (int)v7);
        v50 = IsMFMWFPWindow(v29);
        if ( v50 )
        {
          ……
        }
        else 
        {
          if ( !v29 && !UnicodeString && !(v30 & 0x200) )//了
          {
            ……      }
          ……
          if ( v29 == -1 )
            goto LABEL_105;
        }
        if ( IsMFMWFPWindow(v29) )//Key！！！这里先调用了IsMFMWFPWindows做了一个判断，然后才send
          xxxSendMessage((PVOID)v29, -17, UnicodeString, Address);
到此，这个内核漏洞解剖完毕，以前一直觉得内核漏洞很可怕，现在仔细分析之后，其实发现内核漏洞也是很有意思的，仿佛给我开了一扇新的大门，里面有很多有趣的东西值得去探索，分析的时候只要理清逻辑关系，其实会简单好多，文章中如有不当之处还请各位大牛斧正，多多交流，谢谢！
* * *