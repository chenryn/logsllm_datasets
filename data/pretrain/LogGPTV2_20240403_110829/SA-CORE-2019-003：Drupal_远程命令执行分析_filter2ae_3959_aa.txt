# SA-CORE-2019-003：Drupal 远程命令执行分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 环境配置
此处针对于版本
    # git log
    commit 74e8c2055b33cb8794a7b53dc79b5549ce824bb3 (HEAD, tag: 8.6.9)
好的环境也就漏洞分析的一大半
drupal 的 rest 功能有点僵硬
需满足的条件如下
管理界面这两个都得安排上
但其实你会发现你安装了 drupal 你却没有 restui 这个东西
到这里下载 解压
放置于此。 为什么呢，你看看这个 README.txt
悟道
把这个 enable
还需要 设置允许匿名用户利用 POST 来访问 /user/register
实际还得装上 hal 这个处理 json 的扩展
至此环境配置结束 。。。 坑还是有点多
关于 PHP 调试我是以 Docker 为主体做的远程调试配置，如果对此感兴趣的话，将在下次做一些展开。
毕竟一个 `docker-compose up` 就能实现调试，还算能减少一些环境配置的过程
## 0x01 分析
本文将以两个角度共同对该漏洞的产生，drupal 的设计模式，drupal normalize/denormailze 的实现进行详尽的分析以及阐释
分析中的各个有意思的点以及关键位置如下目录所示
hal_json 的条件
getDenormalizer 解析
link types 的由来
$entity->get() 解析
type shortcut 解析流程
symfony interface 简单逻辑
###  简单流程
drupal 是基于 symfony 的框架的 web 框架，这框架接口等待以后进行补全
这里截图一下 denormalize 的栈
根据 云鼎 RR 的分析
注意 `Content-Type:application/hal+json` 字段 (未验证是否起决定作用)
这里的 _links->type->href 就会决定这里的 content_target 最后返回的类型
接着往下走
成功到了 git diff 能观测到的漏洞触发点
MapItem
LinkItem
###  入口入手
> 从入口入手可以直观的看到整个框架的运行流程以及方便整理出流程关系甚至你可以获得设计模式
其实代码结构中的 core/rest/RequestHandler.php
这种命名格式的文件一般就是继承或者注册了路由的处理函数，肯定可以作为入手点进行观测
其中进行了 deserialize 处理
renew_getDenormalizer
而在阅读代码中，这是第一处 getDenormalizer 的调用
$this->normalizers
为什么 DrupalusersEntityUser 可以对应到 ContentEntityNormalizer 呢？
这里因为有一层 User 继承 ContentEntityBase ， ContentEntityBase 实现了
ContentEntityInterface，而对应了 ContentEntityNormalizer
hal_json 实际由来的情况
hal_json_detail
这里就出现了狼人情况， 这总共 18 个 Normalizer 而且是在 开启 HAL 情况下才会有 `DrupalhalNormalizer*` 其他的
Normalizer $format 全为 null 无法继续处理 对于 /`DrupalhalNormalizer*` 来说 $format 只有
hal_json ，从这里定下
GET 参数 _format=hal_json
所以在进行 in_array 判断成立 过了 checkFormat 的判断后
还进行了针对 DrupaluserEntityUser 的继承关系检测
supportsDenormalization 针对 DrupaluserEntityUser 而找到了 ContentEntityNormalizer
第一阶段通过 路由 /user 决定 entity DrupaluserEntityUser 进行第一部分的 denormalize 而使用的就是
ContentEntityNormalizer->denormalize
进行第二阶段 ContentEntityNormalizer 反序列化根据 POST 中传递的 _link->type 来决定处理的 entity， 关于
entity 的处理可以向下继续阅读
继续调用 denormalizeFieldData 来实现进一步的处理
关于此处的 denormalizeFieldData
因为使用了 Trait 这种 php 中的特性
[PHP: Traits – Manual](http://php.net/manual/en/language.oop5.traits.php)
所以才到了 FieldableEntityNormalizerTrait 中进行具体的处理
所以调用 DrupalhalNormalizerContentEntityNormalizer 的 denormalizer 方法
$data 是传入的 post content 被处理后的对象， 那么可以看到此处在通过获得 `POST->_links->type` 的值
如果存在 `POST->_links->type->href` 字段那么就直接给 `$types` 赋值
那么 getTypeInternalIds 就成为了要满足的条件
cache_data_types
从 cache 中取 key 为 `hal:links:types` 的缓存 可以看到总共有 37 条缓存，这些缓存的对应关系都如下
可以看到只要传入这 37 条的任意一条均可通过验证
此处返回对象即为
赋值 $value -> value[shortcut_set]=’default’
通过
  * entity_type ‘shortcut’
  * bundle ‘default’
获得出 `DrupalshortcutEntityShortcut` 对象 调用 create 传入上述 $value
EntityTypeManager->getDefinition
DiscoveryCachedTrait->getDefinition
`ContentEntityType` 是继承于 `EntityType` 的,所以在调用 `getHandlerClass` 的时候是使用
`EntityType` 中的方法
在 post 数据初始化 `getStorage` 的过程中经过 handler 的有
  * rest_resource_config
  * user_role
  * shortcut
而且进一步观察到 `$this->handlers[$handler_type][$entity_type]` 这个值在调用 `getHandler`
的时候如果没有被 set 那么就会通过如上过程完成初始化
然后对此处断点，去回顾一下在 drupal 运行流程中什么时候会触发 `EntityTypeManager` 的 `getHandler`
初始化并且初始化的值分别是什么
流程如下
  * `$definition = $this->getDefinition($entity_type);`
  * `$class = $definition->getHandlerClass($handler_type);`
  * `$this->handlers[$handler_type][$entity_type] = $this->createHandlerInstance($class, $definition);`
而实例生成的效果基本就是以 `$class` 然后传入 `$definition` 进行实例化
那么可以说是至关重要的点就是在于 `getDefinition($entity_type)` 此处的实现而此处的 `entity_type` 和上文传入的
`_links->type` 字段是有绑定关系的
回到 create
`SqlContentEntityStorage` 继承 `ContentEntityStorageBase`  
， `ContentEntityStorageBase` 继承 `EntityStorageBase`
EntityStorageBase 的构造函数
调用节点是发生在 `createHandlerInstance` 的时候
那么基本可以确定此处就是为什么限定 `_links->type` 字段的原因了，那么要确定 `$entity_type` 的值就得从漏洞触发的过滤出发了
skip_shortcut_entity_process
而 `getStorage` 之后再通过 `create` 创建出对应的 `entity` 实体，进一步通过
`ContentEntityNormalizer` 的 `denormalizeFieldData` 进行处理 等效调用
`FieldableEntityNormalizerTrait` 中的 `denormalizeFieldData`
而进一步产生关联的地方在于 `entity->get($field_name)`
而 `$field_name` 和 post 传入的 `$data` 息息相关并且是完全输入可控的部分
entity_get_detail
关于 `entity->get($field_name)` 的实现