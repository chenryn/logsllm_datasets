# Interface for Asynchronous Exceptions on SGX

## Code-Reuse Attacks on SGX
Code-reuse attacks in non-enclave applications are well-documented [57]. Although enclaves reduce the size of the trusted computing base, they remain vulnerable if the enclave code has unsafe memory usage. Consequently, enclaves are not immune to code-reuse attacks [36]. Dark-ROP [43] demonstrates a Return-Oriented Programming (ROP) attack even when the enclave binary is end-to-end encrypted [30, 51], making it inaccessible to attackers. The attack assumes a fixed enclave address space layout, allowing the attacker to locate useful gadgets through trial and error. This assumption is justified by the difficulty of applying Address Space Layout Randomization (ASLR) to SGX enclaves due to Intel SGX design constraints.

SGX-Shield [52] proposes a strategy to enable ASLR in SGX enclaves and prevent code-reuse attacks. However, subsequent work shows that SGX-Shield does not randomize the code inside the trusted runtime of the enclave, enabling attackers to exploit memory-unsafe enclave code and launch powerful ROP attacks [31]. SmashEx also demonstrates a code-reuse attack on enclaves but, unlike existing work, does not assume a pre-existing memory vulnerability in the enclave software.

## Re-entrancy Vulnerabilities & Defenses
Traditional asynchronous interfaces, such as signal handlers, are prone to re-entrancy challenges [65]. Such vulnerabilities are common in various systems [5, 7, 9, 10, 40, 44]. SmashEx is the first attack to exploit re-entrancy vulnerabilities in the context of Intel SGX. Preventing re-entrancy bugs generally involves introducing a notion of atomicity. For example, during critical sections, the user application can request the OS to mask certain signals (i.e., pause their delivery) [25]. Our work is the first to compare and contrast exception handling in Intel SGX versus traditional systems, highlighting the need for better hardware abstractions to enable safely re-entrant enclave code.

SmashEx brings attention to a new avenue of powerful attacks on Intel SGX and can serve as motivation to further scrutinize and fortify the enclave's asynchronous interface.

## Responsible Disclosure
We informed the affected parties—Intel for the Intel SGX SDK and Microsoft for the Open Enclave SDK—on May 3, 2021. Both Intel and Microsoft acknowledged the attack and assigned CVE-2021-33767 [8]. After due process, Intel and Microsoft released patches for SmashEx on July 13, 2021. They also released public advisories on July 13, 2021 [19] and September 15, 2021. We assisted Intel and Microsoft in coordinating responsible disclosures to the affected runtimes listed in Table 1, where requested.

## Conclusion
Asynchronous exception handling is a standard functionality for real-world applications, which increasingly utilize enclaves. In this work, we highlight the importance of providing atomicity guarantees at the OS-enclave interface for such exceptions. We introduce a new attack called SmashEx, which exploits the inherent re-entrancy interface required in exception handling on SGX. Our exploits demonstrate the issue concretely on popular SGX runtime frameworks. We hope our work initiates careful consideration for asynchronous exception handling in existing SGX frameworks and future enclave designs.

## Availability
Further information regarding SmashEx, including how to acquire proof-of-concept exploits for educational purposes, is available at https://jasonyu1996.github.io/SmashEx/.

## Acknowledgments
We thank the anonymous CCS reviewers for their valuable suggestions. This work was supported by the Crystal Center at the National University of Singapore. Zhiping Cai’s work was funded by the National Natural Science Foundation of China (62072465). Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors only.

## References
[1] [n.d.]. Apache Teaclave: A Universal Secure Computing Platform. https://teaclave.apache.org/.
[2] [n.d.]. AsyncShock: Exploiting Synchronization Bugs in Intel SGX Enclaves.
[3] [n.d.]. Confidential Computing Consortium - Open Source Community. https://confidentialcomputing.io/.
[4] [n.d.]. Confidential Consortium Framework - Microsoft Research. https://www.microsoft.com/en-us/research/project/confidential-consortium-framework/.
...
[65] Michal Zalewski. 2001. Delivering Signals for Fun and Profit: Understanding, exploiting, and preventing signal-handling related vulnerabilities. (2001). https://lcamtuf.coredump.cx/signals.txt

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy and depth of the original text.