interface for asynchronous exceptions on SGX.
Code-reuse Attacks on SGX. The prevalence of code-reuse at-
tacks in non-enclave applications is well studied [57]. Although
enclaves reduce the size of the trusted computing base, they are
susceptible to corruption if the enclave code has unsafe memory
usage. Thus, enclaves are not immune to code-reuse attacks [36].
Dark-ROP [43] demonstrates a ROP attack even when the enclave
binary is end-to-end encrypted [30, 51] such that the attacker can-
not inspect it. They assume a fixed enclave address space layout,
which allows the attacker to probe the locations of useful gad-
gets through trials-and-errors. This assumption is justified by the
difficulty in applying defense techniques such as ASLR to SGX
enclaves due to the constraints imposed by the Intel SGX design.
SGX-Shield [52] proposes a strategy to enable ASLR in SGX en-
claves and prevent code-reuse attacks. However, as shown in the
subsequent work, SGX-Shield does not randomize the code inside
the trusted runtime of the enclave. This allows the attacker to
exploit memory-unsafe enclave code and launch powerful ROP at-
tacks [31]. SmashEx demonstrates a code-reuse attack on enclaves.
However, unlike the existing work, we do not assume a pre-existing
memory vulnerability in the enclave software.
Re-entrancy Vulnerabilities & Defenses. Traditional asynchro-
nous interfaces, such as the signal handler, are prone to re-entrancy
13
challenges [65]. Such vulnerabilities are common in several other
systems [5ś7, 9, 10, 40, 44]. SmashEx is the first attack that exploits
re-entrancy vulnerabilities in the context of Intel SGX. Preventing
re-entrancy bugs in general involves introducing a notion of atom-
icity. For instance, when the code is operating in a critical section,
the user application can request the OS to mask certain signals (i.e.,
to pause their delivery) [25]. Our work makes the first attempt to
compare and contrast exception handling in Intel SGX versus tradi-
tional systems. Our findings highlight the need for better hardware
abstractions to enable safely re-entrant enclave code.
SmashEx brings attention to a new avenue of powerful attacks
on Intel SGX. It can serve as a motivation to further scrutinize and
fortify the enclave asynchronous interface.
11 RESPONSIBLE DISCLOSURE
We informed the affected partiesÐIntel for Intel SGX SDK and Mi-
crosoft for Open Enclave SDKÐon 3 May 2021. Intel and Microsoft
acknowledged the attack and assigned CVE-2021-33767 [8]. Af-
ter due process, Intel and Microsoft released patches for SmashEx
on 13 July 2021. In addition, they released public advisories on
13 July 2021 [19] and 15 September 2021. We have assisted Intel
and Microsoft to coordinate responsible disclosures to the affected
runtimes listed in Table 1, where it was requested.
12 CONCLUSION
Asynchronous exception handling is a commodity functionality
for real-world applications today, which are increasingly utilizing
enclaves. In this work, we show the importance of providing atom-
icity guarantees at the OS-enclave interface for such exceptions. We
have introduced a new attack called SmashEx in this work, which
exploits the inherent re-entrancy interface required in exception
handling on SGX. Our exploits demonstrate the issue concretely on
popular SGX runtime frameworks. We hope our work initiates care-
ful consideration for asynchronous exception handling in existing
SGX frameworks as well as in future enclave designs.
AVAILABILITY
We maintain further information regarding SmashEx, including
how to acquire the proof-of-concept exploits for educational pur-
poses, at https://jasonyu1996.github.io/SmashEx/.
ACKNOWLEDGMENTS
We thank the anonymous CCS reviewers for their valuable sugges-
tions. This work was supported by Crystal Center at National Uni-
versity of Singapore. Zhiping Cai’s work was funded by National
Natural Science Foundation of China (62072465). Any opinions,
findings, and conclusions or recommendations expressed in this
material are those of the authors only.
REFERENCES
[1] [n.d.]. Apache Teaclave: A Universal Secure Computing Platform. https://
teaclave.apache.org/.
[2] [n.d.]. AsyncShock: Exploiting Synchronisation Bugs in Intel SGX Enclaves.
[3] [n.d.]. Confidential Computing Consortium - Open Source Community. https:
//confidentialcomputing.io/.
[4] [n.d.].
Confidential Consortium Framework - Microsoft Research.
https://www.microsoft.com/en-us/research/project/confidential-consortium-
framework/.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea791[5] [n.d.]. CVE - CVE-2011-1285: The regular-expression functionality in Google
Chrome before 10.0.648.127 does not properly implement reentrancy, which al-
lows remote attackers to cause a denial of service (memory corruption) or possibly
have unspecified other impact via unknown vectors. https://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2011-1285.
[6] [n.d.]. CVE - CVE-2016-5185: Blink in Google Chrome prior to 54.0.2840.59 for
Windows, Mac, and Linux; 54.0.2840.85 for Android incorrectly allowed reen-
trance of FrameView::updateLifecyclePhasesInternal(), which allowed a remote
attacker to perform an out of bounds memory read via crafted HTML pages.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-5185.
[7] [n.d.]. CVE - CVE-2018-16065: A Javascript reentrancy issues that caused a
use-after-free in V8 in Google Chrome prior to 69.0.3497.81 allowed a remote
attacker to execute arbitrary code inside a sandbox via a crafted HTML page.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16065.
[8] [n.d.]. CVE-2021-33767 - Security Update Guide - Microsoft - Open Enclave
SDK Elevation of Privilege Vulnerability. https://msrc.microsoft.com/update-
guide/vulnerability/CVE-2021-33767.
[9] [n.d.]. CWE - CWE-1265: Unintended Reentrant Invocation of Non-reentrant
Code Via Nested Calls (4.4). https://cwe.mitre.org/data/definitions/1265.html.
https://www.usenix.org/conference/atc17/technical-sessions/presentation/tsai
[34] Stephen Checkoway and Hovav Shacham. 2013. Iago Attacks: Why the System
Call API is a Bad Untrusted RPC Interface. In Proceedings of the Eighteenth
International Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS ’13).
[35] Guoxing Chen, Wenhao Wang, Tianyu Chen, Sanchuan Chen, Yinqian Zhang,
XiaoFeng Wang, Ten-Hwang Lai, and Dongdai Lin. 2018. Racing in Hyperspace:
Closing Hyper-Threading Side Channels on SGX with Contrived Data Races. In
2018 IEEE Symposium on Security and Privacy, SP 2018, Proceedings, 21-23 May
2018, San Francisco, California, USA. IEEE Computer Society, 178ś194. https:
//doi.org/10.1109/SP.2018.00024
[36] Tobias Cloosters, Michael Rodler, and Lucas Davi. 2020. TeeRex: Discovery and
Exploitation of Memory Corruption Vulnerabilities in SGX Enclaves. In 29th
USENIX Security Symposium. http://tubiblio.ulb.tu-darmstadt.de/119694/
[37] Crispan Cowan. 1998. StackGuard: Automatic Adaptive Detection and Pre-
vention of Buffer-Overflow Attacks. In Proceedings of the 7th USENIX Security
Symposium, San Antonio, TX, USA, January 26-29, 1998, Aviel D. Rubin (Ed.).
USENIX Association. https://www.usenix.org/conference/7th-usenix-security-
symposium/stackguard-automatic-adaptive-detection-and-prevention
[10] [n.d.]. CWE - CWE-479: Signal Handler Use of a Non-reentrant Function (4.4).
[38] Rongzhen Cui, Lianying Zhao, and David Lie. 2021. Emilia: Catching Iago in
https://cwe.mitre.org/data/definitions/479.html.
Legacy Code. https://doi.org/10.14722/ndss.2021.24328
[11] [n.d.]. Edgeless RT: an SDK and a runtime for Intel SGX. https://github.com/
[39] fortanix-rust-sgx [n.d.]. fortanix/rust-sgx: The Fortanix Rust Enclave Develop-
edgelesssys/edgelessrt.
[12] [n.d.]. Enarx: an application deployment system enabling applications to run
within TEE. https://github.com/enarx/enarx/wiki/Enarx-Introduction.
[13] [n.d.]. Enarx FAQ · enarx/enarx Wiki. https://github.com/enarx/enarx/wiki/
Enarx-FAQ.
[14] [n.d.]. Inclavare Containers. https://inclavare-containers.io/.
[15] [n.d.]. Intel 64 and IA-32 Architectures Software Developer Manuals.
[16] [n.d.]. Intel Software Guard Extensions SDK - Documentation | Intel Software.
https://software.intel.com/en-us/sgx-sdk/documentation.
[17] [n.d.].
Intel Software Guard Extensions SSL cryptographic library. https://
github.com/intel/intel-sgx-ssl.
[18] [n.d.]. [LibOS] Rework signal handling by boryspoplawski · Pull Request #2090 ·
oscarlab/graphene. https://github.com/oscarlab/graphene/pull/2090.
[19] [n.d.]. Open Enclave SDK Elevation of Privilege Vulnerability · Advisory · ope-
nenclave/openenclave. https://github.com/openenclave/openenclave/security/
advisories/GHSA-mj87-466f-jq42.
[20] [n.d.]. The Open Group Base Specifications Issue 7, 2018 edition. https:
//pubs.opengroup.org/onlinepubs/9699919799/.
[21] [n.d.]. OpenSSL: Cryptography and SSL/TLS Toolkit. https://www.openssl.org/.
[22] [n.d.]. [Pal/Linux-SGX] enclave_entry.S fix stack on exception and ocall by
yamahata · Pull Request #696 · oscarlab/graphene. https://github.com/oscarlab/
graphene/pull/696.
[23] [n.d.].
[Pal/Linux-SGX] Fix super-subtle bugs
in SGX enter/ex-
it/AEX flows by dimakuv · Pull Request #1663 · oscarlab/graphene.
https://github.com/oscarlab/graphene/pull/1663.
ment Platform. https://github.com/fortanix/rust-sgx.
[40] Shelly Grossman, Ittai Abraham, Guy Golan-Gueta, Yan Michalevsky, Noam
Rinetzky, Mooly Sagiv, and Yoni Zohar. 2017. Online Detection of Effectively
Callback Free Objects with Applications to Smart Contracts. POPL (2017).
[41] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek Saxena,
and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness
of Non-control Data Attacks. In IEEE Symposium on Security and Privacy, SP 2016,
San Jose, CA, USA, May 22-26, 2016. 969ś986. https://doi.org/10.1109/SP.2016.62
[42] Mustakimur Rahman Khandaker, Yueqiang Cheng, Zhi Wang, and Tao Wei.
2020. COIN Attacks: On Insecurity of Enclave Untrusted Interfaces in SGX. In
Proceedings of the Twenty-Fifth International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS ’20).
[43] Jaehyuk Lee, Jinsoo Jang, Yeongjin Jang, Nohyun Kwak, Yeseul Choi, Changho
Choi, Taesoo Kim, Marcus Peinado, and Brent ByungHoon Kang. 2017. Hacking in
Darkness: Return-oriented Programming against Secure Enclaves. In 26th USENIX
Security Symposium (USENIX Security 17). USENIX Association, Vancouver,
BC, 523ś539. https://www.usenix.org/conference/usenixsecurity17/technical-
sessions/presentation/lee-jaehyuk
[44] Shan Lu, Soyeon Park, Eunsoo Seo, and Yuanyuan Zhou. 2008. Learning from Mis-
takes: A Comprehensive Study on Real World Concurrency Bug Characteristics.
(2008).
[45] open-enclave [n.d.]. Open Enclave SDK. https://openenclave.io/sdk/.
[46] openenclave [n.d.]. OpenEnclave. https://github.com/openenclave/openenclave/
tree/v0.15.0.
[47] openenclave-curl [n.d.]. OpenEnclave Curl. https://github.com/openenclave/
[24] [n.d.]. Ratel: a general framework for instruction-level interposition on enclaved
openenclave-curl.
applications. https://ratel-enclave.github.io/.
[25] [n.d.]. sigprocmask(2) - Linux manual page. https://man7.org/linux/man-pages/
man2/sigprocmask.2.html.
[26] [n.d.]. Veracruz: privacy-preserving collaborative compute. https://github.com/
veracruz-project/veracruz.
[27] Fritz Alder, Jo Van Bulck, David F. Oswald, and Frank Piessens. 2020. Faulty
Point Unit: ABI Poisoning Attacks on Intel SGX. In ACSAC ’20: Annual Computer
Security Applications Conference, Virtual Event / Austin, TX, USA, 7-11 December,
2020. ACM, 415ś427. https://doi.org/10.1145/3427228.3427270
[28] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Daniel O’Keeffe, Mark L
Stillwell, David Goltzsche, Dave Eyers, Rüdiger Kapitza, Peter Pietzuch, and
Christof Fetzer. 2016. SCONE: Secure Linux Containers with Intel SGX. In OSDI.
[29] asylo 2019. Google Asylo: An open and flexible framework for enclave applica-
tions. https://asylo.dev/.
[30] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2014. Shielding Applications
from an Untrusted Cloud with Haven. In OSDI.
[31] Andrea Biondo, Mauro Conti, Lucas Davi, Tommaso Frassetto, and Ahmad-Reza
Sadeghi. 2018. The Guard’s Dilemma: Efficient Code-Reuse Attacks against
Intel SGX. In Proceedings of the 27th USENIX Conference on Security Symposium
(Baltimore, MD, USA) (SEC’18). USENIX Association, USA, 1213ś1227.
[32] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank Piessens, and Raoul
Strackx. 2017.
Telling Your Secrets without Page Faults: Stealthy Page
Table-Based Attacks on Enclaved Execution. In 26th USENIX Security Sym-
posium (USENIX Security 17). USENIX Association, Vancouver, BC, 1041ś
1056. https://www.usenix.org/conference/usenixsecurity17/technical-sessions/
presentation/van-bulck
[33] Chia che Tsai, Donald E. Porter, and Mona Vij. 2017. Graphene-SGX: A Practical
Library OS for Unmodified Applications on SGX. In 2017 USENIX Annual Technical
Conference (USENIX ATC 17). USENIX Association, Santa Clara, CA, 645ś658.
[48] Meni Orenbach, Yan Michalevsky, Christof Fetzer, and Mark Silberstein. 2019.
CoSMIX: a compiler-based system for secure memory instrumentation and exe-
cution in enclaves. In 2019 USENIX Annual Technical Conference (USENIX ATC
19). 555ś570.
[49] Christian Priebe, Divya Muthukumaran, Joshua Lind, Huanzhou Zhu, Shujie Cui,
Vasily A Sartakov, and Peter Pietzuch. 2019. SGX-LKL: Securing the Host OS
Interface for Trusted Execution. arXiv preprint arXiv:1908.11143 (2019).
[50] Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage. 2012. Return-
Oriented Programming: Systems, Languages, and Applications. ACM Trans.
Inf. Syst. Secur. 15, 1, Article 2 (March 2012), 34 pages. https://doi.org/10.1145/
2133375.2133377
[51] Felix Schuster, Manuel Costa, Cedric Fournet, Christos Gkantsidis, Marcus
Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. 2015. VC3: Trustworthy
Data Analytics in the Cloud. In IEEE S&P.
[52] Jaebaek Seo, Byoungyoung Lee, Seong Min Kim, Ming-Wei Shih, Insik Shin,
Dongsu Han, and Taesoo Kim. 2017. SGX-Shield: Enabling Address Space Layout
Randomization for SGX Programs.. In NDSS.
[53] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Marcus Peinado. 2017. T-SGX:
Eradicating Controlled-Channel Attacks Against Enclave Programs. In NDSS.
Internet Society.
[54] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan, and Prateek Saxena.
2016. Preventing Page Faults from Telling Your Secrets. In Proceedings of the 11th
ACM on Asia Conference on Computer and Communications Security (ASIA CCS
’16).
[55] Shweta Shinde, Dat Le Tien, Shruti Tople, and Prateek Saxena. 2017. Panoply:
Low-TCB Linux Applications With SGX Enclaves. In 24th Annual Network and
Distributed System Security Symposium, NDSS.
[56] Shweta Shinde, Shengyi Wang, Pinghai Yuan, Aquinas Hobor, Abhik Roychoud-
hury, and Prateek Saxena. 2020. BesFS: A POSIX Filesystem for Enclaves with a
Mechanized Safety Proof. In 29th USENIX Security Symposium (USENIX Security
14
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea79220).
[57] László Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. SoK: Eternal
War in Memory. In 2013 IEEE Symposium on Security and Privacy. 48ś62. https:
//doi.org/10.1109/SP.2013.13
[58] Chia-Che Tsai, Kumar Saurabh Arora, Nehal Bandi, Bhushan Jain, William Jannen,
Jitin John, Harry A. Kalodner, Vrushali Kulkarni, Daniela Oliveira, and Donald E.
Porter. 2014. Cooperation and Security Isolation of Library OSes for Multi-Process
Applications. In EuroSys.
[59] Jo Van Bulck, David Oswald, Eduard Marin, Abdulla Aldoseri, Flavio D. Garcia,
and Frank Piessens. 2019. A Tale of Two Worlds: Assessing the Vulnerability of
Enclave Shielding Runtimes. In Proceedings of the 2019 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’19).
[60] Jo Van Bulck, Frank Piessens, and Raoul Strackx. 2017. SGX-Step: A Practical
Attack Framework for Precise Enclave Execution Control. In 2nd Workshop on
System Software for Trusted Execution (SysTEX). ACM, 4:1ś4:6.
[61] Jose Rodrigo Sanchez Vicarte, Benjamin Schreiber, Riccardo Paccagnella, and
Christopher W. Fletcher. 2020. Game of Threads: Enabling Asynchronous Poison-
ing Attacks. In ASPLOS ’20: Architectural Support for Programming Languages and
Operating Systems, Lausanne, Switzerland, March 16-20, 2020, James R. Larus,
Luis Ceze, and Karin Strauss (Eds.). ACM, 35ś52.
https://doi.org/10.1145/
3373376.3378462
[62] Huibo Wang, Pei Wang, Yu Ding, Mingshen Sun, Yiming Jing, Ran Duan, Long Li,
Yulong Zhang, Tao Wei, and Zhiqiang Lin. 2019. Towards Memory Safe Enclave
Programming with Rust-SGX. In CCS.
[63] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang,
Vincent Bindschaedler, Haixu Tang, and Carl A. Gunter. 2017. Leaky Cauldron
on the Dark Land: Understanding Memory Side-Channel Hazards in SGX. CoRR
abs/1705.07289 (2017). arXiv:1705.07289 http://arxiv.org/abs/1705.07289
[64] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-Channel
Attacks: Deterministic Side Channels for Untrusted Operating Systems. In 2015
IEEE Symposium on Security and Privacy. 640ś656. https://doi.org/10.1109/
SP.2015.45
[65] Michal Zalewski. 2001. Delivering Signals for Fun and Profit: Understanding,
exploiting and preventing signal-handling related vulnerabilities. (2001). https:
//lcamtuf .coredump.cx/signals.txt
15
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea793