-----------------------------------------------------
| DescribeSubnets                                   |
+-----------------+--------------+------------------+
| subnet-a5d3ecee | us-east-1a   | 172.31.16.0/20   |
| subnet-c2abdded | us-east-1d   | 172.31.80.0/20   |
| subnet-aae11aa5 | us-east-1f   | 172.31.48.0/20   |
| subnet-fd3a43c2 | us-east-1e   | 172.31.64.0/20   |
| subnet-324e246f | us-east-1b   | 172.31.32.0/20   |
| subnet-d281a2b6 | us-east-1c   | 172.31.0.0/20    |
+-----------------+--------------+------------------+
```
此时，您可以在**创建栈**向导中单击**下一步**，然后单击**创建**，开始部署您的新栈。在 CloudFormation 仪表板中，您将看到创建了一个名为 **cloud9-management** 的新栈，其初始状态为`CREATE_IN_PROGRESS`。通过云信息部署云 9 环境的一个有趣的行为是，通过`AWS::Cloud9::Environment`资源自动创建一个单独的子云信息栈——这有点不寻常，因为对于您将创建的其他类型的云信息资源，您将不会看到这种类型的行为。一旦部署完成，栈的状态将变为`CREATE_COMPLETE`:
![](img/de0f7e1f-35bc-47aa-8df0-7bebfa06bb1f.png)
Deploying a CloudFormation stack
在前面的截图中，您可以点击**事件**选项卡来显示与栈部署相关的事件。这将向您显示每个资源在部署时的进度，并指示是否有任何失败。
现在您已经成功部署了第一个云信息栈，您应该有一个全新的 Cloud9 IDE 环境可供您使用。如果从 AWS 控制台菜单栏中选择**服务** | **云 9** ，您应该会看到一个名为`cloud9-management-station`的单一环境:
![](img/bf94b2a5-6146-44ae-a0ed-3de38549d0ea.png)
Cloud9 environments
如果点击**打开 IDE** 按钮，这将打开一个新的 IDE 会话，其中包括一个安装了 AWS CLI 的集成终端。请注意，该会话拥有与创建 Cloud9 环境的用户相关联的所有权限，在本例中，这是假定的**管理员**角色，因此您可以从终端执行任何管理任务。Cloud9 环境也在您的 VPC 内运行，因此如果您部署了其他资源，如 EC2 实例，您可以从该环境本地管理它们，即使您的其他资源部署在没有互联网连接的专用子网中:
Make sure you understand the implications of creating a Cloud9 environment that has full administrative privileges. Although this is very convenient, it does represent a potential security backdoor that could be used to compromise your environment and account. Cloud9 also allows you to share your IDE with other users, which could allow other users to masquerade as you and perform any action that you are allowed to perform. 
![](img/47bf21c4-dc4c-45a7-800a-25ed9098cff3.png)
Cloud9 IDE
# 更新云信息栈
创建云信息栈后，您可能希望对栈进行更改，例如添加额外的资源，或者更改现有资源的配置。CloudFormation 定义了与栈相关的三个关键生命周期事件——CREATE、UPDATE 和 DELETE，这些事件可以应用于栈内的单个资源，也可以应用于整个栈。
要更新栈，您只需对云信息模板进行任何所需的更改，并提交修改后的模板，云信息服务将计算每个资源所需的更改，这可能会导致创建新资源、更新或替换现有资源或删除现有资源。CloudFormation 还将首先进行任何新的更改，只有当这些更改成功时，它才会清理任何应该删除的资源。这在云信息栈更新失败的情况下提供了更高的恢复机会，在这种情况下，云信息将尝试回滚更改以将栈恢复到其原始状态。
为了测试云信息栈的更新，让我们对`stack.yml`模板做一个小小的改变:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud9 Management Station
Parameters:
  EC2InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Target subnet for instance
Resources:
  ManagementStation:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Name: !Sub ${AWS::StackName}-station
      Description:
        Fn::Sub: ${AWS::StackName} Station
 AutomaticStopTimeMinutes: 20
      InstanceType: !Ref EC2InstanceType
      SubnetId:
        Ref: SubnetId
```
要应用此更改，我们将使用 AWS 命令行界面，而不是使用 AWS 控制台，该界面支持通过`aws cloudformation deploy`命令部署您的云信息模板。在本书的剩余部分中，我们将广泛使用该命令，因此现在是介绍该命令的好时机:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --stack-name cloud9-management --template-file stack.yml \
--parameter-overrides SubnetId=subnet-a5d3ecee
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga: ******
Waiting for changeset to be created..
Waiting for stack create/update to complete
Failed to create/update the stack. Run the following command
to fetch the list of events leading up to the failure
aws cloudformation describe-stack-events --stack-name cloud9-management
```
在前面的代码中，我们首先确保配置了正确的概要文件，然后运行`aws cloudformation deploy`命令，使用`--stack-name`标志指定栈名称，并使用`--template-file`标志指定模板文件。`--parameter-overrides`标志允许您以`=`的格式提供输入参数值–请注意，在像这样的更新场景中，如果您没有指定任何参数覆盖，将使用之前提供的参数值(在这种情况下，当您创建栈时)。
请注意，更新实际上失败了，如果您通过云信息控制台查看栈事件，您可以找到栈更新失败的原因:
![](img/74b208ac-b2b6-4b7d-8dd4-d59eaaa6da1c.png)
CloudFormation stack update failure
在前面的截图中，您可以看到栈更新失败了，因为该更改需要 CloudFormation 来创建现有资源(在本例中是 Cloud9 环境)并将其替换为新资源。由于 cloud information 总是试图在销毁任何已被替换的旧资源之前创建新资源，因为资源是用名称配置的，cloud information 无法创建同名的新资源，从而导致失败。这突出了 cloud information 的一个重要陷阱——在用静态名称定义资源时要非常小心——如果 cloud information 在像这样的更新场景中需要替换资源，更新通常会失败，资源名称必须是唯一的。
For guidance on when CloudFormation will choose to replace a resource if you are updating the resource, refer to the resource properties defined for each resource type in the [AWS Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) document.
您可以看到 CloudFormation 在失败后会自动回滚更改，从而逆转导致失败的所有更改。栈的状态最终变为`UPDATE_ROLLBACK_COMPLETE`，表明发生了故障和回滚。
解决栈故障的一种方法是删除栈中`ManagementStation`资源的`Name`属性——在这种情况下，云信息将确保它生成一个唯一的名称(通常基于附加了一些随机字母数字字符的云信息栈名称)，这意味着每当您更新资源以使其需要替换时，云信息将简单地生成一个新的唯一名称，并避免我们遇到的故障情况。
# 删除云信息栈
现在您已经了解了如何创建和更新栈，让我们讨论如何删除栈。只需选择栈，选择**操作**，然后点击**删除栈**，即可使用云信息仪表盘轻松删除栈:
![](img/88161ae0-ec81-4a0a-b229-45e1c8ee18ac.png)
Deleting a CloudFormation stack
单击**是，删除**确认删除您的栈后，CloudFormation 将继续删除您的栈中定义的每个资源。一旦完成，栈将从云信息仪表盘中消失，尽管您可以更改位于**创建栈**按钮下方的**过滤器**下拉菜单，单击**已删除**查看任何先前已删除的栈。
Some might argue it is a little *too* easy to delete your stacks. If you are worried about accidental deletion of your stacks, you can select the **Change termination protection** option in the preceding screenshot to enable termination protection, which will prevent your stacks from being accidentally deleted.
# 摘要
在本章中，您学习了如何通过创建免费帐户并为您的帐户建立根用户来开始使用 AWS。您学习了如何使用多因素认证来保护根访问，然后创建了管理您的帐户所需的大量 IAM 资源。您首先创建了一个名为 **admin** 的管理 IAM 角色，然后创建了一个 Administrators 组，您为该组分配了承担管理 IAM 角色的单一权限。这种承担角色的方法是管理 AWS 的推荐和最佳实践方法，并支持更复杂的多帐户拓扑，在这种拓扑中，您可以将所有 IAM 用户托管在一个帐户中，并在其他帐户中承担管理角色。
然后，您创建了一个用户组，并为属于该组的任何用户分配了一个强制要求多因素认证(MFA)的托管策略。对于任何使用 AWS 的组织来说，MFA 现在都应该被认为是一个强制性的安全要求，简单地将您的用户分配到一个实现 MFA 要求的用户组的方法是实现这一点的一个非常简单和可扩展的机制。创建用户并将其分配给“管理员”和“用户”组后，您了解了首次用户设置其访问权限所需的条件，包括使用一次性密码登录、建立新密码，然后设置 MFA 设备。一旦用户使用 MFA 登录，用户就可以执行分配给他们的任何权限，例如，您在本章中创建的用户被分配给管理员组，因此可以承担管理 IAM 角色，您可以使用控制台内置的切换角色功能在 AWS 控制台中执行该角色。
完成 IAM 设置并能够通过控制台承担管理员角色后，我们接下来将注意力转向命令行，安装 AWS CLI，通过控制台生成访问密钥，然后在 AWS CLI 用来存储凭据和配置文件的本地`~/.aws`文件夹中配置您的访问密钥凭据。您学习了如何在`~/.aws/configuration`文件中配置命名配置文件，该文件自动承担管理员角色，并在命令行界面检测到需要新的临时会话凭据时提示输入 MFA 代码。您还创建了一个 EC2 密钥对，以便能够使用 SSH 访问 EC2 实例。
最后，向您介绍了 AWS 云信息，并学习了如何定义云信息模板和部署云信息栈，它是基于您的云信息模板定义的资源集合。您学习了云信息模板的基本结构，如何使用 AWS 控制台创建栈，以及如何使用 AWS 命令行界面部署栈。
在下一章中，您将被介绍到弹性容器服务，在这里您将很好地使用您的新 AWS 帐户，并学习如何创建 ECS 集群和将 Docker 应用部署到 ECS。
# 问题
1.  对/错:建立免费 AWS 账户需要有效的信用卡。
2.  对/错:您应该始终使用根帐户执行管理操作。
3.  对/错:您应该将 IAM 权限直接分配给您的 IAM 用户和/或组。
4.  您将使用哪种 IAM 管理策略来分配管理权限？
5.  您运行什么命令来安装 AWS 命令行界面？
6.  对/错:配置 AWS 命令行界面时，必须将 IAM 用户名和密码存储在本地。
7.  您在哪里存储 AWS 命令行界面的凭据？
8.  您设置了一个需要 MFA 执行管理操作的 IAM 用户。IAM 用户设置了他们的 AWS 命令行界面，但在尝试运行 AWS 命令行界面命令时会抱怨未经授权的错误。命名的配置文件包括`source_profile`、`role_arn`和`role_session_name`参数，您确认这些参数配置正确。您将如何解决此问题？
9.  对/错:云信息模板可以使用 JSON 或 YAML 编写。
10.  对/错:您可以使用`!Ref`关键字引用云信息模板中的另一个资源或参数。
11.  您可以在云信息模板中定义一个资源，该模板包含一个可选的`Name`属性，您可以将其配置为`my-resource`。您成功地从模板创建了一个新的栈，然后对资源进行了更改，文档声明需要替换整个资源。您能够成功部署此更改吗？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   设置免费等级账户:[https://aws.amazon.com/free](https://aws.amazon.com/free)
*   IAM 最佳实践:[https://docs . AWS . Amazon . com/IAM/latest/user guide/best-practices . html](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)
*   您的 AWS 帐户标识和别名:[https://docs . AWS . Amazon . com/IAM/latest/user guide/console _ Account-alias . html](https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html)
*   改进 AWS Force MFA 策略:[https://www . trek 10 . com/blog/improving-the-AWS-Force-MFA-policy-for-IAM-user/](https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/)
*   安装 AWS 命令行界面:[https://docs . AWS . Amazon . com/CLI/latest/user guide/installing . html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)
*   AWS CLI 参考:[https://docs.aws.amazon.com/cli/latest/reference/](https://docs.aws.amazon.com/cli/latest/reference/)
*   AWS CLI 配置变量:[https://docs . AWS . Amazon . com/CLI/latest/topic/config-vars . html](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html)
*   AWS shell:https://github . com/awslabs/AWS shell
*   AWS CloudFormation 用户指南:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/welcome . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)
*   AWS CloudFormation 模板解剖:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/template-anagement . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html)
*   AWS CloudFormation 资源类型参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-template-resource-type-ref . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
*   AWS CloudFormation 内在函数:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/内在函数-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html)
*   AWS CloudFormation 伪参数:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/伪参数-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html)