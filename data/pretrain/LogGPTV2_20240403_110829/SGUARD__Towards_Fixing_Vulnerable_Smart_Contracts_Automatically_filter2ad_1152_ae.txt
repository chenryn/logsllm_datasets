mutex which blocks an attacker from re-entering F . To
prevent cross-function reentrancy vulnerability, we add
the modiﬁer nonReentrant to the function containing
op. The details of the ﬁxing algorithm are presented in
Algorithm 4 which takes a vulnerable trace tr and the
dependency relation dp as inputs.
• To ﬁx dangerous tx.origin vulnerability, we replace op
(i.e., ORIGIN) with msg.sender which returns address
of the immediate account that invokes the function.
• To ﬁx arithmetic vulnerability, we replace op (i.e., ADD,
SUB, MUL, DIV, or EXP) with a call to a safe math
function which checks for overﬂow/underﬂow before
performing the arithmetic operation.
Note that in the case of reentrancy vulnerability and arithmetic
vulnerability, if a runtime check fails (e.g., assert(x >
y) which is introduced before x - y fails), the transaction
reverts immediately and thus the vulnerability is prevent,
although the gas spent on executing the transaction so far
would be wasted. Further note while Algorithm 4 is applied
to every vulnerable trace,
introducing
nonReentrant on the same function) is applied once. We
refer the readers to Section II-C for examples on how smart
contracts are ﬁxed.
the same ﬁx (e.g.,
The following establishes the soundness of our approach.
Theorem 1. A smart contract ﬁxed by Algorithm 1 is
free of intra-function reentrancy vulnerability, cross-function
reentrancy vulnerability, dangerous tx.origin vulnerability, and
arithmetic vulnerability.
The proof of the theorem is sketched as follows. According
to the Lemma 1, given a smart contract S, if there are vul-
nerable traces, at least one of them is identiﬁed by SGUARD.
Given how SGUARD ﬁxes each kind of vulnerability, ﬁxing
all vulnerable traces in T r implies that all vulnerable traces
are ﬁxed in S.
We acknowledge that our approach does not achieve the
preciseness as discussed in Section III-C. That is, a trace
which is not vulnerable may be affected by the ﬁxes if it
shares some opcodes with the vulnerable traces. For instance,
an arithmetic opcode which is shared by a vulnerable trace and
a non-vulnerable trace may be replaced with a safe version that
checks for overﬂow. The non-vulnerable trace would revert
in the case of an overﬂow even though the overﬂow might
be benign. Such in-preciseness is an overhead to pay for
security in our setting, along with the time and gas overhead.
In Section V, we empirically evaluate that the overhead and
show that they are negligible.
V. IMPLEMENTATION AND EVALUATION
In this section, we present
implementation details of
SGUARD and then evaluate it with multiple experiments.
A. Implementation
SGUARD is implemented with around 3K lines of Node.js
code. It is publicly available at GitHub1. It uses a locally
installed compiler to compile a user-provided contract into a
1https://github.com/reentrancy/sGuard
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1224
Algorithm 4: f ixReentrancy(tr, dp)
1 let tr ← (cid:104)s0, op0,··· , sn, opn, sn+1(cid:105);
2 foreach i in 0..n do
if opi ∈ C then
3
4
5
foreach j in i + 1..n do
if opj is SSTORE and opi depends on opj
according to dp then
6
7
8
9
/* Fix intra-function reentrancy
add modiﬁer nonReentrant to the
function containing opi;
/* Fix cross-function reentrancy
*/
foreach ops that opi depends on according
to dp do
*/
if ops is SSTORE then
add modiﬁer nonReentrant to
the function containing ops;
JSON ﬁle containing the bytecode, source-map and abstract
syntax tree (AST). The bytecode is used for detecting vulnera-
bility, whereas the source-map and AST are used for ﬁxing the
smart contract at the source code level. In general, a source-
map links an opcode to a statement and a statement to a node
in an AST. Given a node in an AST, SGUARD then has the
complete control on how to ﬁx the smart contract.
In addition to what is discussed in previous sections, the
actual implementation of SGUARD has to deal with multiple
complications. First, Solidity allows developers to interleave
their codes with inline-assembly (i.e., a language using EVM
machine opcodes). This allows ﬁne-grained controls, as well
as opens a door for hard-to-discover vulnerabilities (e.g.,
arithmetic vulnerabilities). We have considered ﬁxing vul-
nerabilities with SGUARD (which is possible with efforts).
However,
trivial for a developer to evaluate the
correctness of our ﬁxes as SGUARD would introduce opcodes
into the inline-assembly. We do believe that any modiﬁcation
of the source code should be transparent to the users, and
thus decide not to support ﬁxing vulnerabilities inside inline-
assembly.
is not
it
Second, SGUARD employs multiple heuristics to avoid
useless ﬁxes. For instance, given an arithmetic expression
whose operands are concrete values (which may be the case of
the expression is independent of user-inputs), SGUARD would
not replace it with a function from safe math even if it is a
part of a vulnerable trace. Furthermore, since the number of
iterations to be unfolded for each loop depends on the number
of assignment statements inside the loop, SGUARD identiﬁes
a number of cases where certain assignments can be safely
ignored without sacriﬁcing the soundness of our method. In
particular, although we count SSTORE, MSTORE or SWAP as
assignment statements in general, they are not in the following
exceptional cases.
• A SWAP is not counted if it
is not mapped to an
assignment statement according source-map;
• An assignment statement is not counted if its right-hand-
Fig. 9: Loop bounds computed by SGUARD
side expression is a constant;
• An assignment statement is not counted if its left-hand-
side expression is a storage variable (since dependency
due to the storage variables is analyzed regardless of
execution order).
In addition, SGUARD implements a strategy to estimate the
value of memory pointers. A memory variable is always placed
at a free memory pointer and it is never freed. However,
the free pointer is often a symbolic value. That increases
the complexity. To simplify the problem without missing
dependency, SGUARD estimates the value of the free pointer
ptr if it is originally a symbolic value. That is, if the memory
size of a variable is only known at run-time, we assume that
it occupies 10 memory slots. The free pointer is calculated
as ptrn+1 = 10 × 0x20 + ptrn where ptrn is the previous
free pointer. If memory overlap occurs due to this assumption,
additional dependencies are introduced, which may introduce
false alarms, but never false negatives.
Lastly, SGUARD allows user to provide additional guide to
generate contract-speciﬁc ﬁxes. For instance, users are allowed
to declare certain variables are critical variables so that it
will be protected even if there is no dependency between the
variable and external calls.
B. Evaluation
In the following, we evaluate SGUARD through multiple
experiments to answer the following research questions (RQ).
Our test subjects include 5000 contracts whose veriﬁed source
code are collected from EtherScan [19]. This includes all the
contracts after we ﬁlter 5000 incompilable contracts which
contain invalid syntax or are implemented based on previous
versions of Solidity (e.g., version 0.3.x). We systematically
apply SGUARD to each contract. The timeout is set to be 5
minutes for each contract. Our experiments are conducted on
with 10 concurrent processes and takes 6 hours to complete.
All experiment results reported below are obtained on an
Ubuntu 16.04.6 LTS machine with Intel(R) Core(TM) i9-9900
CPU @ 3.10GHz and 64GB of memory.
RQ1: How bad is the path explosion problem? Out of the 5000
contract, SGUARD times out on 1767 (i.e., 35.34%) contracts
and successfully ﬁnish analyzing and ﬁxing the remaining
contracts within the time limit. Among them, 1590 contracts
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1225
0100020003000400050000100200300400loop boundloop bound80% cutoffare deemed safe (i.e., they do not contain any external calls)
and no ﬁx is applied. The remaining 1643 contracts are ﬁxed in
one way or another. We note that 38 of the ﬁxed contracts are
incompilable. There are two reasons. First, the contract source-
map may refer to invalid code locations if the corresponding
smart contract has special characters (e.g., copyright and heart
emoji). This turns out to be a bug of the Solidity compiler
and has been reported. Second, the formats of AST across
many solidity versions are slightly different, e.g., version
0.6.3 declares a function which is implemented with attribute
implemented while the attribute is absent in version 0.4.26.
Note that the compiler version declared by pragma keyword
is not supported in the experiment setup as SGUARD uses a
list of compilers provided by solc-select [20]. In the end, we
experiment with 1605 smart contracts and report the ﬁndings.
Recall that the number of paths explored largely depend on
the loop bounds. To understand why SGUARD times out on
35.34% of the contracts, we record the maximum loop bound
for each of the 5000 smart contracts. Figure 9 summarizes the
distribution of the loop bounds. From the ﬁgure, we observe
that for 80% of the contracts, the loop bounds are no more
than 17. The loop bounds of the remaining 20% contracts
however vary quite a lot, e.g., with a maximum of 390.
The average loop bound is 15, which shows that the default
bounds in existing symbolic execution engines could be indeed
insufﬁcient.
RQ2: Is SGUARD capable of pinpointing where ﬁxes should
be applied? This question asks whether SGUARD is capable of
precisely identifying where the ﬁxes should be applied. Recall
that SGUARD determines where to apply the ﬁx based on the
result of the dependency analysis, i.e., a precise dependency
analysis would automatically imply that the ﬁx will be ap-
plied at the right place. Furthermore, control dependency is
straightforward and thus the answer to this question relies on
the preciseness of the data dependency analysis. Data depen-
dency analysis in Algorithm 3 may introduce impreciseness
(i.e., over-approximation) at lines 5 and 8 when checking
the intersection of reading/writing addresses. In SGUARD,
the checking is implemented by transforming each symbolic
address to a range of concrete addresses using the base
address and the maximum offset. The over-approximation is
only applied if at least one symbolic address is failed to
transform due to nonstandard access patterns. If both symbolic
addresses are successfully transformed, we can use the ranges
of concrete addresses to precisely check the intersection and
there is no over-approximation. Thus, we can measure the
over-approximation of our analysis by reporting the number
of failed and successful address transformations.
Figure 10 summarizes our experiment results where each
bar represents the number of failed and successful address
transformations regarding the memory (i.e., MLOAD, MSTORE)
and storage (i.e., SLOAD, SSTORE) opcodes. From the results,
we observe that
transforma-
tions are 99.99%, 85.58%, 99.98%, and 98.43% for SLOAD,
MLOAD, SSTORE, and MSTORE respectively. MLOAD has
the percentage of successful
Fig. 10: Memory and storage address transformations
the worst accuracy among the four opcodes. This is mainly
because some opcodes (e.g., CALL, and CALLCODE) may
load different sizes of data on the memory. In this case, the
MLOAD may depend on multiple MSTOREs, and it becomes
even harder considering the size of loaded data is a symbolic
value. Therefore, we simplify the analysis by returning true
(hence over-approximates) if the size of loaded data is not
0x20, a memory allocation unit size.
RQ3: What
is the runtime overhead of SGUARD’s ﬁxes?
This question is designed to measure the runtime overhead
of SGUARD’s ﬁxes. Note that runtime overhead is often con-
sidered as a determining factor on whether to adopt additional
checks at runtime. For instance, the C programming language
has been refusing to introduce runtime overﬂow checks due to
concerns on the runtime overhead, although many argue that it
would reduce a signiﬁcant number of vulnerabilities. The same
question must thus be asked about SGUARD. Furthermore,
runtime checks in smart contracts introduce not only time
overhead but also gas overhead, i.e., gas must be paid for
every additional check that is executed. Considering the huge
number of transactions (e.g., 1.2 million daily transactions are
reported on the Ethereum network [21]), each additional check
may potential translate to large ﬁnancial burden.
To answer the question, we measure additional gas and
computational time that users pay to deploy and execute the
ﬁxed contract in comparison with the original contract. That
is, we download transactions from the Ethereum network
and replicate them on our local network, and compare the
gas/time consumption of the transactions. Among the 1605
smart contracts, 23 contracts are not considered as they are
created internally. In the end, we replicate 6762 transactions
of 1582 ﬁxed contracts. We limit the number of transactions
for each contract to a maximum of 10 such that the results
are not biased towards those active contracts that have a huge
number of transactions.
Since our local setup is unable to completely simulate
the actual Ethereum network (e.g.,
the block number and
timestamps are different), a replicated transaction thus may
end up being a revert. In our experiments, 3548 (52.47%)
transactions execute successfully and thus we report the results
based on them. A close investigation shows that the remaining
transactions fail due to the difference between our private
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1226
SLOADMLOADSSTOREMSTORE0123456number of transformations1e6successfailureFig. 11: Overhead of ﬁxed contracts
Fig. 12: SGUARD execution time
Instruction SGUARD
ADD
SUB
MUL
DIV
BC/SGUARD
3.9×
5.39×
7.19×
8.42×
TABLE III: Total number of bound checks
BC
2245
2125
1423
1508
576
394
198
179
network and the Ethereum network except 1 transaction, which
fails because the size of the bytecode of the ﬁxed contract
exceeds the size limit [22].
Figure 11 summarizes our results. The x-axis and y-axis
show the time overhead and gas overhead of each transaction
respectively. The data shows that the highest gas overhead is
42% while the lowest gas overhead is 0%. On average, users
have to pay extra 0.79% gas to execute a transaction on the
ﬁxed contract. The highest and lowest time overhead are 455%
and 0% respectively. On average, users have to wait extra
14.79% time on a transaction. Based on the result, we believe
that the overhead of ﬁxing smart contracts using SGUARD is
manageable, considering its security guarantee.
For arithmetic vulnerabilities, there is a simplistic ﬁx, i.e.,
add a check to every arithmetic operation. To see the difference
between SGUARD and such an approach, we conduct an
additional experiment on the set of smart contracts that we
successfully ﬁxed (i.e., 1605 of them). We record the total
number of bound checks added to the 4 arithmetic instructions
(i.e., ADD, SUB, MUL and DIV) by SGUARD and the simplistic
approach. The results are shown in Table III, where column BC
shows the number for the simplistic approach. We observe that