### 4. Victim Profiling and C&C Monitoring Capabilities

Table 5 illustrates that Victim Profiling is the most prevalent capability, accounting for 29% (31 out of 104) of the identified capabilities. Live Monitoring and File Exfiltration follow closely, with 28 (27%) and 26 (25%) capabilities, respectively. This suggests that authorities can expect to find detailed victim information on the Command and Control (C&C) server, including system information, personal files, and legally admissible evidence of spying.

Among the 35 variants analyzed, three (Ragebot, Zbot, and Delf) exhibited seven False Positives (FPs) in Victim Profiling, File Exfiltration, and Live Monitoring. Additionally, three False Negatives (FNs) were observed in the Browser Password Stealer, and one FN was noted in Victim Profiling, distributed among Cstealer, Sathurbot, and Blackhole. Further investigation revealed that these FPs and FNs are primarily due to issues encountered while using angr, such as unresolved symbolic constraints during Control Flow Graph (CFG) generation or temporary variable reuse causing spurious dependencies in the backward slice. Despite these occurrences, our investigation confirmed that they are rare. Given the low number of FPs and FNs, and an overall accuracy of over 94%, C3PO effectively identifies C&C monitoring capabilities.

### 5. Large-Scale Deployment

We deployed C3PO to measure over-permissioned protocols and C&C monitoring capabilities, demonstrating that our automated measurement pipeline provides a scalable means for analyzing over-permissioned bots.

#### 5.1 Post-Deployment Dataset Highlights

Deploying C3PO on our dataset revealed a growing trend in the use of over-permissioned protocols in malware. Specifically, 62,202 (over 30%) of the malware samples used one or more over-permissioned protocols. Figure 4 illustrates the adoption of over-permissioned protocols per bot from April 2006 to June 2020. The use of these protocols peaked between 2015 and 2019, accounting for 80% of all over-permissioned protocols identified by C3PO. Notably, not only has the use of over-permissioned protocols increased, but so has the number of protocols used per malware. While it was once uncommon for a single bot to use multiple over-permissioned protocols, this practice is now more prevalent, with over 4,000 bots using multiple protocols. Since 2019 alone, C3PO has detected over 1,500 malware samples that use more than one over-permissioned protocol.

The remaining 70% of the malware in our dataset used only HTTP-based communication for command and control. This aligns with observations by Perdisci et al. [48], who reported that 75% of malware exhibit network activity via HTTP-based communication. Many prior studies [49]â€“[51] have focused exclusively on HTTP-based malware, which sends and receives data in HTTP packets using non-standard message protocols. Unlike the protocols considered in this paper, these HTTP-based messages do not provide direct access to the C&C server, making them less suitable for over-permissioned bot analysis.

#### 5.2 Over-Permissioned Bot Landscape

Table 6 provides insights into the use of over-permissioned protocols. Column 1 lists the protocols studied, Column 2 shows the number of protocol uses, and Columns 3-4 present the total number of High-Level (HL) and Low-Level (LL) identifiers found. Columns 5-6 show their distribution, with temporal changes in each sample displayed in Column 8. The remaining columns present the total number of malware families using specific protocols, along with the first and last times the malware was observed between 2006 and 2020.

C3PO detected 65,739 uses of over-permissioned protocols. FTP is the most commonly used protocol, accounting for 81% of the identified protocols (53,687 uses). FTP has been consistently used across 88% of the 8,512 malware families over 15 years. This confirms our hypothesis that protocol efficiency supports continued prevalence, despite known FTP insecurities. Thus, bot orchestrators are unknowingly leaving the front door wide open, a trend highlighted by our study.

Column 8 of Table 6 illustrates the number of protocol identifiers used in malware since 2006. The number of identifiers per sample has generally fluctuated, except for MQTT and IRC. IRC implementations typically use three tokens to communicate with the C&C server, as shown in the average identifiers per use (Column 6). The total distribution of protocol identifiers (min=2, avg=3, max=7) indicates that many protocols use multiple APIs or tokens, providing authorities with multiple monitoring vantage points. For example, the MongoDB protocol was used in the Cstealer malware but then disappeared, likely due to its rapid discovery and public reporting [52]. We expect a resurgence of the MongoDB protocol as some malware authors prioritize efficiency and ease of use over security.

The MQTT protocol, used by the Expiro malware, shows a similar trend. However, its use was observed over a longer period, and Expiro disappeared from detection in 2015. Industry experts reported a resurgence of Expiro in 2017 [53], adding clarity to our observations. Improvements in Expiro likely correlate with its absence in recent years, possibly due to the exclusion of the MQTT protocol.

From Table 6, we observe that LL identifiers are slightly more common (33,636) than HL identifiers (33,486), with the majority of LL implementations resulting from FTP and IRC protocols. Although many IRC bots are no longer active due to the limitations of centralized architecture, new IRC malware has been detected in 2020. The 8,512 malware families identified highlight the wide-scale applicability of C3PO across multiple malware families and variants.

#### 5.3 C&C Monitoring Capabilities at Scale

[This section can be expanded with further details on the large-scale deployment of C3PO and its effectiveness in identifying C&C monitoring capabilities.]

---

This revised text aims to improve clarity, coherence, and professionalism, ensuring that the information is presented in a structured and easily understandable manner.