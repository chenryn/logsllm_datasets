from a network time server. One further mechanism is also provided: VMware Tools resets the guest operating 
system’s clock to match the host’s clock upon startup. The interface between guest and host uses UTC 
(Coordinated Universal Time, also known as Greenwich Mean Time or GMT), so the guest and host do not 
have to be in the same time zone.
Virtual machines also have a further issue: when the virtual machine is resumed from suspend or restored 
from a snapshot, the guest operating system’s wall‐clock time remains at the value it had at the time of the 
suspension or snapshot and must be updated. VMware Tools handles this issue too, setting the virtual 
machine’s clock to match the host’s clock upon resume or restore. However, because users sometimes need a 
virtual machine to have its clock set to a fictitious time unrelated to the time kept on the host, VMware Tools 
can optionally be told never to change the virtual machine’s clock.
Updating the clock accurately over the long term is challenging because the timer devices in physical machines 
tend to drift, typically running as much as 100 parts per million fast or slow, with the rate varying with 
temperature. The virtual timer devices in a virtual machine have the same amount of inherent drift as the 
underlying hardware on the host, and additional drift and inaccuracy can arise as a result of such factors as 
round‐off error and lost ticks. In a physical machine, it is generally necessary to run network clock 
synchronization software such as NTP or the Windows Time Service to keep time accurately over the long 
term. The same applies to virtual machines, and the same clock synchronization software can be used, 
although it sometimes needs to be configured specially in order to deal with the less smooth behavior of virtual 
timer devices. VMware Tools can also optionally be used to correct long‐term drift and errors by periodically 
resynchronizing the virtual machine’s clock to the host’s clock, but the current version at this writing is limited. 
In particular, in guest operating systems other than NetWare, it does not correct errors in which the guest clock 
is ahead of real time, only those in which the guest clock is behind.
Copyright © 2008 VMware, Inc. All rights reserved.
3
Time and Frequency Units
The following table provides a quick summary of units in which time and frequency are measured:
Table 1.  Units for Measuring Time and Frequency
Abbreviation Description
Timekeeping in VMware Virtual Machines
s
ms
μs
ns
Hz
KHz
MHz
GHz
Seconds
Milliseconds (1/1000 second)
Microseconds (10‐6 seconds)
Nanoseconds (10‐9 seconds)
Frequency (cycles or other events per second)
Kilohertz (1000 cycles or events per second)
Megahertz (106 cycles or events per second)
Gigahertz (109 cycles or events per second)
PC Timer Hardware
For historical reasons, PCs contain several different devices that can be used to keep track of time. Different 
guest operating systems make different choices about which of these devices to use and how to use them. 
Using several of the devices in combination is important in many guest operating systems. Sometimes, one 
device that runs at a known speed is used to measure the speed of another device. Sometimes a fine‐grained 
timing device is used to add additional precision to the tick count obtained from a more coarse‐grained timing 
device. Thus, it is necessary to support all these devices in a virtual machine, and the times read from different 
devices usually must appear to be consistent with one another, even when they are somewhat inconsistent 
with real time.
All PC timer devices can be described using roughly the same block diagram, as shown in Figure 1. Not all the 
devices have all the features shown, and some have additional features, but the diagram is a useful abstraction.
Figure 1.   Abstract Timer Device
Oscillator
Counter
=0
Counter input
Interrupt
The oscillator provides a fixed input frequency to the timer device. The frequency may be specified, or the 
operating system may have to measure it at startup time. The counter may be readable or writable by software. 
The counter counts down one unit for each cycle of the oscillator. When the counter reaches zero, it generates 
an output signal that may interrupt the processor. At this point, if the timer is set to one‐shot mode, it stops; if 
set to periodic mode, it continues counting. There may also be a counter input register whose value is loaded 
into the counter when it reaches zero; this register allows software to control the timer period. Some real timer 
devices count up instead of down and have a register whose value is compared with the counter to determine 
when to interrupt and restart the count at zero, but both count‐up and count‐down timer designs provide 
equivalent functionality.
Copyright © 2008 VMware, Inc. All rights reserved.
4
Timekeeping in VMware Virtual Machines
Common PC timer devices include the programmable interval timer (PIT), the CMOS real time clock (RTC), 
the local advanced programmable interrupt controller (APIC) timers, the advanced configuration and power 
interface (ACPI) timer, the time stamp counter (TSC), and the high precision event timer (HPET).
PIT
The PIT is the oldest PC timer device. It uses a crystal‐controlled 1.193182MHz input oscillator and has 16‐bit 
counter and counter input registers. The oscillator frequency was not chosen for convenient timekeeping; it 
was simply a handy frequency available when the first PC was designed. (The oscillator frequency is one‐third 
of the standard NTSC television color burst frequency.) The PIT device actually contains three identical timers 
that are connected in different ways to the rest of the computer. Timer 0 can generate an interrupt and is 
suitable for system timekeeping. Timer 1 was historically used for RAM refresh and is typically programmed 
for a 15 microsecond period by the PC BIOS. Timer 2 is wired to the PC speaker for tone generation.
CMOS RTC
The CMOS RTC is part of the battery‐backed memory device that keeps a PC’s BIOS settings stable while the 
PC is powered off. The name CMOS comes from the low‐power integrated circuit technology in which this 
device was originally implemented. There are two main time‐related features in the RTC. First, there is a 
continuously running time of day (TOD) clock that keeps time in year/month/day hour:minute:second format. 
This clock can be read only to the nearest second. There is also a timer that can generate periodic interrupts at 
any power‐of‐two rate from 2Hz to 8192Hz. This timer fits the block diagram model in Figure 1, with the 
restriction that the counter cannot be read or written, and the counter input can be set only to a power of two.
Two other interrupts can also be enabled: the update interrupt and the alarm interrupt. The update interrupt 
occurs once per second. It is supposed to reflect the TOD clock turning over to the next second. The alarm 
interrupt occurs when the time of day matches a specified value or pattern.
Local APIC Timer
The local APIC is a part of the interrupt routing logic in modern PCs. In a multiprocessor system, there is one 
local APIC per processor. On current processors, the local APIC is integrated onto the processor chip. The local 
APIC includes a timer device with 32‐bit counter and counter input registers. The input frequency is typically 
the processor’s base front‐side memory bus frequency (before the multiplication by two or four for DDR or 
quad‐pumped memory). Thus, this timer is much finer‐grained and has a wider counter than the PIT or CMOS 
timers, but software does not have a reliable way to determine its frequency. Generally, the only way to 
determine the local APIC timer’s frequency is to measure it using the PIT or CMOS timer, which yields only 
an approximate result.
ACPI Timer
The ACPI timer is an additional system timer that is required as part of the ACPI specification. This timer is 
also known as the power management (PM) timer or the chipset timer. It has a 24‐bit counter that increments 
at 3.579545MHz (three times the PIT frequency). The timer can be programmed to generate an interrupt when 
its high‐order bit changes value. There is no counter input register; the counter always rolls over. (That is, when 
the counter reaches the maximum 24‐bit binary value, it goes back to zero and continues counting from there.) 
The ACPI timer continues running in some power saving modes in which other timers are stopped or slowed. 
The ACPI timer is relatively slow to read (typically 1–2μs).
TSC
The TSC is a 64‐bit cycle counter on Pentium CPUs and newer processors. The TSC runs off the CPU clock 
oscillator, typically 2GHz or more on current systems. At current processor speeds it would take years to roll 
over. The TSC cannot generate interrupts and has no counter input register. The TSC can be read by software 
in one instruction (rdtsc). The rdtsc instruction is normally available in user mode, but operating system 
software can choose to make it unavailable. The TSC is, by far, the finest grained, widest, and most convenient 
timer device to access. However, the TSC also has several drawbacks:
Copyright © 2008 VMware, Inc. All rights reserved.
5
Timekeeping in VMware Virtual Machines
(cid:132) As with the local APIC timer, software does not have a reliable way to determine the TSC’s input 
frequency. Generally, the only way to determine the TSC’s frequency is to measure it approximately using 
the PIT or CMOS timer. 
Several forms of power management technology vary the processor’s clock speed dynamically and thus 
change the TSC’s input oscillator rate with little or no notice. In addition, AMD Opteron K8 processors 
drop some cycles from the TSC when entering and leaving a halt state if the halt clock ramping feature is 
enabled, even though the TSC rate does not change. The latest processors from Intel and AMD no longer 
have these limitations, however.
Some processors stop the TSC in their lower‐power halt states (the ACPI C3 state and below). 
(cid:132)
(cid:132)
(cid:132) On shared‐bus SMP machines, all the TSCs run off a common clock oscillator, so (in the absence of the 