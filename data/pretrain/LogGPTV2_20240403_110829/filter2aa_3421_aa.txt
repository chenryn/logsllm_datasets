# Porosity: Decompiling Ethereum Smart-Contracts

## Presenter
**Matt Suiche (@msuiche)**
- **Founder, Comae Technologies**
- **Contact**: PI:EMAIL
- **Website**: OPCDE - [www.opcde.com](http://www.opcde.com)
- **Background**: 
  - First visit to Las Vegas since BlackHat 2011
  - Primarily focused on Windows-related projects
  - Experience with CloudVolumes (VMware App Volumes) and Memory Forensics for DFIR (Hibr2Bin, DumpIt, etc.)
  - Quoted by TheShadowBrokers as "looks like such a fun guy"
  - Limited prior knowledge of blockchain before this project

## Agenda
- **Ethereum Virtual Machine (EVM)**
  - Memory Management
  - Addresses
  - Call Types
  - Type Discovery
- **Smart-Contract**
  - Code Analysis
  - Known Bugs
  - Future Developments

### Solidity
- **Definition**: A programming language used to write smart contracts on the Ethereum platform.
- **Porosity**: The term also refers to Comae’s smart-contract decompiler. In general, porosity is the quality of being porous, or full of tiny holes, allowing liquids to pass through.

### Ethereum Virtual Machine (EVM)
- **Components**:
  - **Account/Contract/Blockchain**: A smart contract is bytecode stored in the blockchain.
  - **Address**: A 160-bit value corresponding to an "account".
  - **Registers**: EVM operates with 256-bit pseudo-registers, using a virtual stack instead of actual registers.

### Solidity & Smart Contracts
- **Compilation**: Solidity compiles JavaScript-like code into Ethereum bytecode.
- **Example Contract**:
  ```solidity
  contract Coin {
      address public minter;
      mapping (address => uint) public balances;
      event Sent(address from, address to, uint amount);

      function Coin() {
          minter = msg.sender;
      }

      function mint(address receiver, uint amount) {
          if (msg.sender != minter) return;
          balances[receiver] += amount;
      }

      function send(address receiver, uint amount) {
          if (balances[msg.sender] < amount) return;
          balances[msg.sender] -= amount;
          balances[receiver] += amount;
          Sent(msg.sender, receiver, amount);
      }
  }
  ```

### Memory Management
- **Stack**:
  - Used for operations to pass parameters to opcodes.
  - 256-bit values/entries.
  - Maximum size of 1024 elements.
- **Storage (Persistent)**:
  - Key-value storage mapping (256-to-256-bit integers).
  - Cannot be enumerated.
  - Instructions: SSTORE, SLOAD.
- **Memory (Volatile)**:
  - 256-bit values.
  - Useful for type discovery.
  - Instructions: MSTORE, MLOAD.

### Basic Blocks
- **JUMPDEST Instruction**: Usually starts with JUMPDEST, except in a few cases.
- **JUMP Instructions**: Jump to the address contained in the first element of the stack.
- **PUSH Instruction**: Precedes JUMP* instructions to push the destination address onto the stack.
- **Stack Manipulation**: SWAP, DUP, POP instructions can make jump destinations harder to retrieve, requiring dynamic analysis to rebuild relationships between basic blocks.

### EVM Functions/Instructions
- **Arithmetic, Comparison & Bitwise Logic Operations**.
- **SHA3**.
- **Environmental & Block Information**.
- **Stack, Memory, Storage, and Flow Operations**.
- **Logging & System Operations**.

### Instruction Call - Addition
- **EVM Pseudo-Code Example**:
  ```evm
  add(0x2, 0x1)
  ```
- **Instruction Breakdown**:
  - `PUSH1 0x1` -> Stack[0]: 0x1
  - `PUSH1 0x2` -> Stack[0]: 0x2, Stack[1]: 0x1
  - `ADD` -> Stack[0]: 0x3

### EVM Call
- **CALL Instruction**: Identifies external calls.
- **Parameters**:
  - `gasLimit`
  - `to` (external contract address)
  - `value`
  - `inputOffset`
  - `inputSize`
  - `outputOffset`
  - `outputSize`
- **Hardcoded Contracts**:
  - Elliptic curve public key recovery function
  - SHA2 function
  - RIPEMD160 function
  - Identity function

### User-Defined Functions (Solidity)
- **CALLDATALOAD Instruction**: Reads the Environmental Information Block (EIB), including parameters.
- **Function Hash**: First 4 bytes of the EIB contain the 32-bit hash of the called function.
- **Example**:
  ```solidity
  function foo(int a, int b) {
      return a + b;
  }
  ```

### Type Discovery - Addresses
- **Addresses**: 160-bit words.
- **Identification**: Using AND operations with the `0xffffffffffffffffffffffffffffffffffffffff` mask.

### Ethereum Assembly
- **Translation (msg.sender)**:
  - **EVM**: `CALLER`
  - **Intermediate**: `reg256 & (2 ** 0xA0) - 1`
  - **Solidity**: `address`

### Bytecode
- **Categories**:
  - **Pre-loader Code**: Bootstraps the contract.
  - **Runtime Code**: Core code written by the user, compiled by Solidity.
- **Dispatcher**: Redirects calls based on provided hash functions.

### Bytecode – Pre-loader
- **CODECOPY**: Copies the runtime part of the contract into EVM memory, executed at base address 0x0.
- **Example**:
  ```assembly
  PUSH1 60
  PUSH1 40
  MSTORE
  PUSH1 00
  PUSH1 01
  PUSH1 00
  PUSH2 0001
  EXP
  DUP2
  SLOAD
  DUP2
  PUSH1 ff
  MUL
  NOT
  AND
  SWAP1
  DUP4
  MUL
  OR
  SWAP1
  SSTORE
  POP
  PUSH2 bb01
  DUP1
  PUSH2 2b00
  PUSH1 00
  CODECOPY
  PUSH1 00
  RETURN
  ```

### Bytecode – Dispatcher
- **Example**:
  ```assembly
  loc_00000000:
  PUSH1 60
  PUSH1 40
  MSTORE
  PUSH1 e0
  PUSH1 02
  EXP
  PUSH1 00
  CALLDATALOAD
  DIV
  PUSH4 0672e9ee
  DUP2
  EQ
  PUSH1 24
  JUMPI
  ```

### Function Hashes
- **SHA3 (keccak256)**: Generates 4-byte hashes for function names and parameter types.
- **Example**:
  ```json
  [
    {
      "constant": false,
      "inputs": [{ "name": "a", "type": "uint256" }],
      "name": "double",
      "outputs": [{ "name": "", "type": "uint256" }],
      "type": "function"
    }
  ]
  ```

This presentation will not cover Proof of Work (PoW)/Proof of Stake (PoS), Merkle Trees, or how to become a cryptocurrency millionaire. Instead, it will focus on the Ethereum EVM, Solidity, and smart-contract bytecodes. Note that the tool presented is not perfect but aims to provide valuable insights.