error[E0308]: mismatched types
  --> program.rs:38:16
   |
35 |     fn d(&self, by: Vec) -> String{
   |                                 ------ expected `String` because of return type
...
38 |         return d.unwrap()
   |                ^^^^^^^^^^
   |                |
   |                expected struct `String`, found `&str`
   |                help: try using a conversion method: `d.unwrap().to_string()`
error: aborting due to previous error
For more information about this error, try `rustc --explain E0308`.
error: could not compile `Program`.
To learn more, run the command again with --verbose.
```
So, we need to change `d.unwrap()` to `d.unwrap().to_string()`, only to get a warning that `extraterrestrial_msg` is unused. After adding `println!("{}", extraterrestrial_msg);`, we finally get the output:
```console
┌──(user@kali)-[/media/sf_CTFs/cyberark/The_search_for_a_higher_being]
└─$ target/debug/program
mņīŒ6ī6ŊōŔŃŊŗ6łīŗ
```
Well, that doesn't really say much either. We can see that the program is trying to decrypt `"YsOXCMOjKwgrw5vDnsOlw5TDm8OoK8OTCMOo"`, what if we change it to the base64 string we saw in the comment (`"CMObw5jDlMOdw6JKK8OXw5TDocOUSg=="`)?
```console
┌──(user@kali)-[/media/sf_CTFs/cyberark/The_search_for_a_higher_being]
└─$ target/debug/program
īŊŇŃŌőU6ņŃŐŃU
```
Indeed, as the comment stated, "*something is not quite right*".
At this point, let's follow the basic flow of the program. It starts with a base64-encoded string, then sends it to `a()` in order to convert it into bytes. The result gets sent to `b()`, which immediately calls `d()` with the input. `d()` decodes the base64 by calling `c()`, then decodes the result as UTF8. Finally, some kind of manipulation is performed on the string by `e()`. Looks like something is incorrect in that manipulation based on the results we're getting.
If we take a look at the bytes of the base64-decoded string, it's obviously unicode:
```console
┌──(user@kali)-[/media/sf_CTFs/cyberark/The_search_for_a_higher_being]
└─$ echo CMObw5jDlMOdw6JKK8OXw5TDocOUSg== | base64 -d | xxd -g 1
00000000: 08 c3 9b c3 98 c3 94 c3 9d c3 a2 4a 2b c3 97 c3  ...........J+...
00000010: 94 c3 a1 c3 94 4a                                .....J
```
But we can copy the rust program's logic and decode the string as unicode, then use Python's `ord()` to get the code point for each character in a similar manner to what `e()` does by calling `message.chars()` and `c as u32`. Let's do that with the pair we got from the comment:
```python
>>> codepoints = lambda s: [f'{ord(c):02x}' for c in s]
>>> codepoints(base64.b64decode("CMObw5jDlMOdw6JKK8OXw5TDocOUSg==").decode("utf8"))
['08', 'db', 'd8', 'd4', 'dd', 'e2', '4a', '2b', 'd7', 'd4', 'e1', 'd4', '4a']
>>> codepoints("aliens? here?")
['61', '6c', '69', '65', '6e', '73', '3f', '20', '68', '65', '72', '65', '3f']
>>> [f'{c.ljust(2)}' for c in "aliens? here?"]
['a ', 'l ', 'i ', 'e ', 'n ', 's ', '? ', '  ', 'h ', 'e ', 'r ', 'e ', '? ']
```
Comparing the output, it is pretty obvious that this is a simple substitution cipher. We only have a small subset of the key, but is it enough to decipher the other string?
We can map characters from the known ciphertext to their plaintext equivalent:
```python
>>> dict = {cipher_char:plain_char for plain_char, cipher_char in zip("aliens? here?", base64.b64decode("CMObw5jDlMOdw6JKK8OXw5TDocOUSg==").decode("utf8"))}
>>> dict
{'\x08': 'a', 'Û': 'l', 'Ø': 'i', 'Ô': 'e', 'Ý': 'n', 'â': 's', 'J': '?', '+': ' ', '×': 'h', 'á': 'r'}
```
Then use that to try and decode the other ciphertext:
```python
>>> "".join([dict.get(c, "?") for c in base64.b64decode("YsOXCMOjKwgrw5vDnsOlw5TDm8OoK8OTCMOo").decode("utf8")])
'?ha? a l??el? ?a?'
```
That's not bad. To complete the picture, let's take a look at the codepoints themselves:
```python
>>> codepoints(base64.b64decode("YsOXCMOjKwgrw5vDnsOlw5TDm8OoK8OTCMOo").decode("utf8"))
['62', 'd7', '08', 'e3', '2b', '08', '2b', 'db', 'de', 'e5', 'd4', 'db', 'e8', '2b', 'd3', '08', 'e8']
```
Using a [Crossword Quick Solve](https://www.crosswordsolver.org/quicksolve.php) service we can enter the letters we already have and get a list of potential matches. For example, the choices that make sense for the third word are:
```
lifely
likely
lively
lonely
lovely
```
And for the forth word:
```
day
way
```
The answer that was accepted was: `What a lovely day`. Notice how the code-point for the first letter is pretty far away from the others, and that it mapped to a capital letter.
Luckily, we did not have to understand `e()`'s implementation at all. In retrospective, when comparing the code-point of the ciphertext to that of the plaintext, the following pattern is revealed:
```
(a ->)   | (97  -> 8)   |  diff: -89
(l -> Û) | (108 -> 219) |  diff: 111
(i -> Ø) | (105 -> 216) |  diff: 111
(e -> Ô) | (101 -> 212) |  diff: 111
(n -> Ý) | (110 -> 221) |  diff: 111
(s -> â) | (115 -> 226) |  diff: 111
(? -> J) | (63  -> 74)  |  diff: 11
(  -> +) | (32  -> 43)  |  diff: 11
(h -> ×) | (104 -> 215) |  diff: 111
(e -> Ô) | (101 -> 212) |  diff: 111
(r -> á) | (114 -> 225) |  diff: 111
(e -> Ô) | (101 -> 212) |  diff: 111
(? -> J) | (63  -> 74)  |  diff: 11
(W -> b) | (87  -> 98)  |  diff: 11
(h -> ×) | (104 -> 215) |  diff: 111
(a ->)   | (97  -> 8)   |  diff: -89
(t -> ã) | (116 -> 227) |  diff: 111
(  -> +) | (32  -> 43)  |  diff: 11
(a ->)   | (97  -> 8)   |  diff: -89
(  -> +) | (32  -> 43)  |  diff: 11
(l -> Û) | (108 -> 219) |  diff: 111
(o -> Þ) | (111 -> 222) |  diff: 111
(v -> å) | (118 -> 229) |  diff: 111
(e -> Ô) | (101 -> 212) |  diff: 111
(l -> Û) | (108 -> 219) |  diff: 111
(y -> è) | (121 -> 232) |  diff: 111
(  -> +) | (32  -> 43)  |  diff: 11
(d -> Ó) | (100 -> 211) |  diff: 111
(a ->)   | (97  -> 8)   |  diff: -89
(y -> è) | (121 -> 232) |  diff: 111
```