# Title: Looking at the Bag is Not Enough to Find the Bomb: An Evasion of Structural Methods for Malicious PDF Files Detection

## Authors:
- Davide Maiorca
- Igino Corona
- Giorgio Giacinto

### Affiliations:
**Department of Electrical and Electronic Engineering, University of Cagliari**
- Piazza d’Armi, 09123, Cagliari, Italy
- Email: [Email Address]

---

## Abstract
PDF files have proven to be effective vectors for malicious code. Their flexible logical structure allows attacks to be hidden in various ways, often evading file-type filtering mechanisms. Recent research has shown that analyzing the logical structure of PDF files can accurately detect malicious content. In this paper, we present and demonstrate a novel evasion technique called "reverse mimicry," which can defeat such structural analysis. We implement this technique using real samples and validate our approach by testing it against various PDF malware detectors. Finally, we highlight the importance of developing robust systems against adversarial attacks and propose a framework to strengthen PDF malware detection against evasion.

### Categories and Subject Descriptors
- **D.4.6 [Software]:** Operating Systems—Security and Protection
- **I.2.6 [Computing Methodologies]:** Artificial Intelligence—Learning

### Keywords
- Machine Learning
- PDF Malware Detection
- Detection Evasion
- Reverse Mimicry

---

## 1. Introduction
Malicious PDF files have been a significant threat to computer systems for over four years, with 2010 being a particularly dangerous year [15]. The PDF format is an extremely flexible vector for embedding different types of attacks, including sophisticated JavaScript and ActionScript code [28, 27], as well as other malicious files such as EXE files and other PDFs [37]. The structure of PDF files allows attackers to hide these attacks through encryption or obfuscation techniques [36, 12]. Additionally, malicious PDFs can exploit vulnerabilities in reader applications like Adobe Reader [2] or Foxit [13], making them a natural choice for polymorphic attacks.

To address the polymorphism of attacks, machine learning approaches have gained attention for their ability to learn from examples. Current machine learning techniques for detecting malicious PDFs rely on static detection methods, typically measuring features related to embedded JavaScript code or the structure of the PDF file, such as the number of specific keywords, lowercase/uppercase characters, objects, and streams [26, 33, 20, 24, 40]. These techniques are agnostic to the method of embedding the attack and have shown excellent performance in detecting malicious PDFs, which often lack readable content and have structures distinct from benign files.

However, as soon as such techniques are deployed, attackers may adapt to evade them. This raises the question: Do malicious PDFs always show structural differences from benign files? Can they be designed to mimic the structure of benign files (i.e., mimicry attacks)? While theoretical studies have explored mimicry attacks [33, 40], practical implementation and effectiveness remain unclear.

In this work, we investigate these aspects by developing a new attack methodology called "reverse mimicry." Our approach involves injecting malicious content into legitimate PDFs with minimal structural changes. This attack can be easily automated and does not require knowledge of the learning algorithm or the structural features used. We present three different approaches to implement this attack, demonstrating that the resulting malicious PDFs can evade state-of-the-art detectors. We also suggest methods to enhance the robustness of PDF malware detection against such evasion attacks.

### 1.1 Contributions
- **Novel Attack Methodology:** We introduce "reverse mimicry," a new approach to evade structural PDF malware detection.
- **Experimental Evaluation:** We present and evaluate different techniques for creating malicious PDFs using the proposed methodology.
- **Robustness Improvement:** We propose approaches to improve the robustness of PDF malware detection against evasion attacks.

---

## 2. PDF Basics
A PDF file is a hierarchy of logically connected objects. For the purpose of this discussion, we model the PDF file structure as consisting of four basic parts: Objects, File Structure, Document Structure, and Content Streams.

### 2.1 Objects
Objects in a PDF file are divided into indirect and direct objects. Indirect objects are referenced by a number and are used by the reader to build the logical structure, while direct objects are not referenced by a number. PDF objects can be of eight types:

- **Boolean:** An object with a value of True or False.
- **Numeric:** An object represented by a real or integer number.
- **String:** A sequence of literal characters enclosed in parentheses ( ) or hexadecimal data in angle brackets < >.
- **Name:** A literal sequence of characters starting with /.
- **Array:** A sequence of objects enclosed in square brackets [ ].
- **Dictionary:** A sequence of pairs made up of a keyword (name object) and a value, enclosed between << >>.
- **Stream:** A special dictionary object containing stream data such as images, text, and script code, compressed using special filters.
- **Null:** An empty object represented by the keyword null.

### 2.2 File Structure
The File Structure determines how objects are accessed and updated within the PDF file. Each PDF file consists of four parts:

- **Header:** A line providing information about the PDF version.
- **Body:** The main portion of the file containing all PDF objects.
- **Cross-Reference Table:** Indicates the position of every indirect object in memory.
- **Trailer:** Provides relevant information about the root object and the number of revisions made to the document.

### 2.3 Document Structure
The Document Structure specifies how objects are used to represent parts of the PDF document, such as pages, fonts, and animations. It describes the hierarchy of objects in the body of the PDF file. The main object in the hierarchy is the catalog object, represented by a dictionary. Each page is a page object, containing references to other objects on that page. The position of the catalog dictionary is marked by the /Root name object in the trailer.

### 2.4 Content Streams
Content Streams are stream objects containing instructions that describe the appearance of the page and graphical entities. Although defined as objects, they are conceptually different from the objects representing the document structure. The instructions can refer to other indirect objects containing resource information.

The logical structure of a PDF can be complex due to the flexibility in establishing references between objects. Figure 1 shows an example of the PDF structure.

---

## 3. Related Work
Early machine learning approaches for malicious PDF detection involved static analysis of raw (byte-level) documents using n-gram analysis [25, 32] and decision trees [38]. However, these methods were not specifically tailored to PDFs and were susceptible to modern obfuscation techniques like AES encryption [12] and attack techniques such as Return Oriented Programming, Heap Spraying, or JIT Spraying [17, 29, 16].

Subsequent works focused on analyzing embedded JavaScript code. Tools like Jsand [19], Cujo [31], Zozzle [21], and Prophiler [18] are well-known for the dynamic and static analysis of JavaScript code. Wepawet [10], a framework for web-based threats, uses JSand to analyze JavaScript code within PDF files. Jsand employs HtmlUnit, a Java-based browser simulator, and Mozilla’s Rhino to extract behavioral features from the execution of JavaScript code. A statistical classifier is trained on a representative sample of benign and malicious code to detect anomalies.

Other tools, such as MalOffice [22], use pdftk to extract JavaScript code and CWSandbox [41] to analyze its behavior. MDScan [39] detects malicious behavior through Nemu, a tool that intercepts memory-injected shellcode. PJScan [24] proposes a fully static lexical analysis of JavaScript code, training a statistical classifier on malicious files. Malware Slayer [26] and PDFRate [33, 6] are two recent machine learning-based detectors for PDF structural analysis. These tools do not specifically analyze malicious code but rely on structural patterns to distinguish between malicious and benign files.

---

## 4. Techniques for Detecting Malicious PDF Files
As discussed in Section 3, there has been increased interest in developing machine learning approaches for detecting malicious PDF files. The two main approaches to generic malware detection, dynamic and static analysis, are also applied to PDFs.

### Dynamic Analysis
Wepawet [10, 19] implements dynamic analysis by extracting and executing JavaScript code in a sandbox, then extracting features from the runtime execution. This approach, while accurate, can be time-consuming and computationally expensive. It is also prone to evasion by attackers who leverage different implementations of the JavaScript engine.

### Static Analysis
Recent tools focus on static analysis of PDF files, which can be categorized into two types:

1. **Malicious JavaScript Detectors:** These tools look for specific PDF objects containing JavaScript code and analyze their content. Features include the frequency of specific tokens and the presence of specific functions like unescape.
2. **Structural Pattern Detectors:** These tools, such as Malware Slayer and PDFRate, do not specifically analyze malicious code but rely on structural patterns to discriminate between malicious and benign files. They have shown high detection rates with low false positives.

---

## 5. Reverse Mimicry Attack
We present a novel attack methodology called "reverse mimicry" designed to evade structural PDF malware detection systems. Our approach involves injecting malicious content into a legitimate PDF with minimal structural changes. We present three different methods to implement this attack and demonstrate their effectiveness in evading state-of-the-art detectors.

### 5.1 Methodology
- **Method 1:** [Description of the first method]
- **Method 2:** [Description of the second method]
- **Method 3:** [Description of the third method]

### 5.2 Experimental Evaluation
We test our attack and its variants against recently developed systems. Our results show that the malicious PDFs created using reverse mimicry can effectively evade detection.

### 5.3 Immediate Evasion
Certain types of detectors, even those using non-structural features, can be immediately evaded by this attack. We discuss the reasons for this and provide insights into the vulnerabilities of current detection methods.

---

## 6. Testing and Validation
We validate our attack by testing it against various PDF malware detectors. Our experiments show that the malicious PDFs created using reverse mimicry can evade detection by state-of-the-art systems.

---

## 7. Countermeasures
We propose several approaches to make PDF malware detection more robust against evasion attacks. These include:

- **Enhanced Feature Sets:** Incorporating additional features that are harder to mimic.
- **Behavioral Analysis:** Combining static and dynamic analysis to detect anomalous behavior.
- **Adversarial Training:** Training models on both benign and adversarially crafted samples to improve robustness.

---

## 8. Conclusions
In this paper, we introduced a novel evasion technique called "reverse mimicry" for malicious PDF files. We demonstrated its effectiveness in evading state-of-the-art detection systems and proposed methods to enhance the robustness of PDF malware detection. Future work will focus on further refining these countermeasures and exploring new avenues for detection and defense.

---

This optimized version aims to make the text more coherent, clear, and professional, with a structured layout and improved readability.