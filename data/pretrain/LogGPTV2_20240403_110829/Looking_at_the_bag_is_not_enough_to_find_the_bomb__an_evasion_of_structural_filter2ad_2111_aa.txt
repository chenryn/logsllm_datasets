title:Looking at the bag is not enough to find the bomb: an evasion of structural
methods for malicious PDF files detection
author:Davide Maiorca and
Igino Corona and
Giorgio Giacinto
Looking at the Bag is not Enough to Find the Bomb:
An Evasion of Structural Methods for Malicious
PDF Files Detection
Davide Maiorca
Igino Corona
Department of Electrical and
Department of Electrical and
Department of Electrical and
Electronic Engineering
University of Cagliari
Piazza d’Armi, 09123
Cagliari, Italy
Electronic Engineering
University of Cagliari
Piazza d’Armi, 09123
Cagliari, Italy
PI:EMAIL
PI:EMAIL
Giorgio Giacinto
Electronic Engineering
University of Cagliari
Piazza d’Armi, 09123
Cagliari, Italy
PI:EMAIL
ABSTRACT
PDF ﬁles have proved to be excellent malicious-code bearing
vectors. Thanks to their ﬂexible logical structure, an attack
can be hidden in several ways, and easily deceive protection
mechanisms based on ﬁle-type ﬁltering. Recent work showed
that malicious PDF ﬁles can be accurately detected by an-
alyzing their logical structure, with excellent results. In this
paper, we present and practically demonstrate a novel eva-
sion technique, called reverse mimicry, that can easily defeat
such kind of analysis. We implement it using real samples
and validate our approach by testing it against various PDF
malware detectors proposed so far. Finally, we highlight the
importance of developing systems robust to adversarial at-
tacks and propose a framework to strengthen PDF malware
detection against evasion.
Categories and Subject Descriptors
D.4.6 [Software]: Operating Systems—Security and Pro-
tection; I.2.6 [Computing Methodologies]: Artiﬁcial In-
telligence—Learning
Keywords
Machine Learning; PDF Malware Detection; Detection Eva-
sion; Reverse Mimicry
1.
INTRODUCTION
PDF ﬁles bearing malicious content have been harming
computer systems for more than four years, and in 2010 they
have been considered one of the most dangerous threats [15].
From an attacker point of view, the PDF format is an ex-
tremely ﬂexible code-bearing vector. It is possible to embed
diﬀerent types of attacks, such as sophisticated JavaScript
and ActionScript code [28, 27], as well as malicious ﬁles
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
of diﬀerent type, such as EXE ﬁles, and malicious PDF ﬁles
themselves [37]. Moreover, the structure of the PDF for-
mat allows an attacker to hide these attacks in a number
of diﬀerent ways, e.g., by employing encryption, or obfusca-
tion techniques [36, 12]. Finally, malicious PDF ﬁles may
also exploit speciﬁc vulnerabilities of the reader application,
such as Adobe Reader [2] or Foxit [13]. As a consequence,
PDF documents constitute a natural, simple way of devising
polymorphic attacks. To cope with attack polymorphism,
machine learning approaches have attracted researchers for
their ability to learn from examples. To date, machine learn-
ing techniques have been also proposed for the analysis of
PDF ﬁles. State-of-the-art machine learning approaches for
malicious PDF detection basically rely on static detection
techniques. The analysis is typically performed by mea-
suring features related either to the JavaScript code em-
bedded in the PDF ﬁle, or to the structure of PDF ﬁles,
such as the number of speciﬁc keywords, the number of
lowercase/uppercase characters, the number of objects and
streams, etc. [26, 33, 20, 24, 40]. Such techniques claim
to detect diﬀerent kinds of maliciousness, because they are
agnostic with respect to the way an attack is embedded.
As a matter of fact, malicious PDFs typically do not con-
tain any readable document, and their structure is quite dif-
ferent from the one observed in benign PDF ﬁles, created for
exchanging information in a standard format. This allows
attackers to devise lightweight PDFs that can easily spread
through the Internet (e.g., by means of spam techniques),
infecting personal computers as well as mobile devices. For
this reason, structural detection techniques showed excellent
performance in detecting malicious PDF ﬁles. However, we
observe that, as soon as such techniques are adopted in real-
world deployment, the behavior of attackers may rapidly
change to evade them. Now, a natural question arises. Do
malicious PDFs always show structural diﬀerences with re-
spect to benign ﬁles? Is it possible to evade detection by
creating malicious PDFs that mimic the structure of benign
ﬁles (i.e. mimicry attacks)? A theoretical study of such
mimicry attacks has been presented in recent works [33, 40].
However, it is still not clear how to devise such evasion at-
tacks in practice, through real PDF samples. In addition, it
is not clear how diﬃcult this task would be, and how much
such attacks can be eﬀective against state-of-the-art PDF
malware detectors.
In this work, we investigate the above aspects. To this
end, we develop a new attack methodology designed to evade
structural PDF malware detection systems, that we call re-
verse mimicry. Our methodology is simple, yet eﬀective.
We inject malicious content on a legitimate PDF so as to
introduce minimum diﬀerences within its structure. Our at-
tack can be easily automated and grants the possibility of a
fast and eﬀective deployment. Moreover, it does not require
knowledge about the learning algorithm attacked, nor about
the structural features employed to characterize a PDF doc-
ument.
In particular, we present three diﬀerent approaches to im-
plement this attack, that allow creating real samples of mali-
cious PDF ﬁles. Reported experiments show that these ﬁles
evade detection by state-of-the-art malicious PDF detectors
based on learning-by-example techniques. Quite surpris-
ingly, we found that even those which employ non-structural
features may be evaded, but for diﬀerent reasons. Finally,
we suggest some approaches to make PDF malware detec-
tion more robust against evasion attacks.
1.1 Contributions
The contributions of this paper can be summarized as
follows:
• we present a novel attack methodology called reverse
mimicry, designed to evade malicious PDF detectors
based on structural analysis;
• we present and experimentally evaluate diﬀerent tech-
niques to create malicious PDF ﬁles according to the
proposed methodology;
• we propose some approaches to improve robustness
boolean an object whose value can be True or False.
numeric an object represented by a real or integer number.
string a sequence of literal characters enclosed by parenthe-
sis ( ) or hexadecimal data enclosed by angle brackets
.
name a literal sequence of characters starting with /.
array a sequence of objects, between square brackets [ ].
dictionary a sequence of pairs made up of a keyword (name
object) and a value (it could be boolean, numeric, an-
other keyword, or an array). They are enclosed be-
tween >.
stream a special dictionary object between the keywords
stream and endstream. It is used to store stream data
such as images, text, script code, and it can be com-
pressed using special ﬁlters.
null an empty object represented by the keyword null.
2.2 File Structure
The File Structure determines how objects are accessed
and updated inside the PDF ﬁle. Each PDF ﬁle is composed
by four parts:
header a line which gives information on the PDF version
used by the ﬁle.
body it is the main portion of the ﬁle, and contains all the
PDF objects.
against evasion of malicious PDF detection.
cross-reference table it indicates the position of every in-
1.2 Paper Organization
There are seven more sections beyond this one. In Section
2, we provide the basics of the PDF ﬁle format. In Section
3, we discuss the related works. In Section 4, we provide a
description of how structural systems work, along with the
diﬀerences with the other tools. In Section 5, we describe the
reverse mimicry attack, as well as three diﬀerent methodo-
logies to implement this attack. Furthermore, we illustrate
how certain types of detectors can be immediately evaded by
this attack. In Section 6 we test our attack and its variants
against recently developed systems. In Section 7 we provide
an explanation of possible countermeasures against evasion
attacks, such as those described in this paper. Section 8
closes the paper with the conclusions.
2. PDF BASICS
A PDF ﬁle is a hierarchy of objects logically connected
to each other. For the sake of the following discussion, we
will model the PDF ﬁle structure as composed by four basic
parts [11]: Objects, File Structure, Document Structure,
and Content Streams.
2.1 Objects
Objects are divided into indirect objects, i.e., objects refer-
enced by a number (and that are used by the reader to build
its logical structure), and direct objects, i.e., objects that are
not referenced by a number. Basically, PDF objects can be
of eight types:
direct object in memory.
trailer it gives relevant information about the root object
and number of revisions made to the document.
2.3 Document Structure
The Document Structure speciﬁes how objects are used to
represent several parts of the PDF document, such as pages,
font, animations and so on. It describes the hierarchy of the
objects in the body of the PDF ﬁle. The main object in the
hierarchy is the catalog object, represented by a dictionary.
Most of the indirect objects in a PDF ﬁle are dictionaries.
Each page of the document is a page object, which contains
also the references to the other objects that are part of that
page. The position of the catalog dictionary is marked by
the /Root name object located in the trailer.
2.4 Content Streams
Content Streams are stream objects containing a sequence
of instructions which describe the appearance of the page
and the graphical entity. Although they are deﬁned as ob-
jects, they are conceptually diﬀerent from the objects repre-
senting the document structure. The instructions can also
refer to other indirect objects which contain information
about the resources adopted by the stream.
The logical structure can be really complex, since there
are a number of degrees of freedom in establishing references
between objects. Moreover, with the exception of linearized
ﬁles, the order of objects inside the ﬁle is fully arbitrary.
Figure 1 shows an example of the PDF structure.
A similar approach is adopted by MalOffice [22]. MalOf-
fice uses pdftk3 to extract JavaScript code, and CWSand-
box [41] to analyze the code behavior: code classiﬁcation is
carried out by a set of rules. CWSandbox has also been used to
classify general malware behavior [30]. MDScan [39] follows a
diﬀerent approach as malicious behavior is detected through
Nemu, a tool able to intercept memory-injected shellcode. A
very similar idea, but with a diﬀerent implementation, has
been developed in ShellOS [34].
Dynamic detection by the execution of JavaScript code in
a virtual environment may be time consuming and compu-
tationally expensive, and it is prone to evasion by a clever
attacker that leverage on diﬀerent implementations of the
JavaScript engine used by the PDF reader, and by the code
analyzer [39]. To reduce computational costs, PJScan [24]
proposed a fully static lexical analysis of JavaScript code by
training a statistical classiﬁer on malicious ﬁles. Latest re-
search work developed Malware Slayer [26] and PDFRate [33,
6], two malware detectors based on machine learning for
PDF structural analysis. Such solutions do not speciﬁcally
analyze malicious code within PDF ﬁles, but they rely on
structural patterns to discriminate malicious from benign
ﬁles. While Malware Slayer mainly focuses on name ob-
jects, PDFRate tries to retrieve as much information as pos-
sible on the PDF structure (number of objects, streams,
lowercase/uppercase letters, etc.). Both tools have shown
very high detection rate with low false positives rate.
In
2013, an approach similar to Malware Slayer has been pro-
posed by adopting the hierarchical sequence of name objects
as features [40]. It is worth noting that a number of tools
are also available for the analysis of PDF documents, such
as Pdf Tools [5], PeePDF [7] and Origami [4]. Although they
are not designed to detect malicious PDF ﬁles, they extract
useful information on the ﬁle structure and content that can
be used for classiﬁcation. For example, the number of indi-
rect objects, how objects are distributed and connected to
each other, etc.
4. TECHNIQUES FOR DETECTING MALI-
CIOUS PDF FILES
As mentioned in Section 3, in the past years there has
been an increased interest in developing machine learning
approaches for malicious PDF ﬁles detection. Basically, the
two main approaches to generic malware detection, namely,
dynamic and static analysis, are also applied to the detection
of malicious PDF ﬁles.
Wepawet [10, 19] implements a dynamic analysis. It ex-
tracts JavaScript code from PDF ﬁles, executes it in a sand-
box, and extracts speciﬁc features from the run-time exe-
cution. This tool is also able to analyze JavaScript code
extracted from other sources, such as malicious web pages.
In order to improve accuracy and time response, recent
tools focus on the static analysis of PDF ﬁles. These tools
can be subdivided into two categories:
1. malicious JavaScript detectors. These tools look for
speciﬁc PDF objects that contain JavaScript code and
analyze their content. The features adopted by these
tools are related to characteristics of JavaScript code.
For example, the frequency of speciﬁc tokens, or the
presence of speciﬁc functions, such as unescape.
3http://www.pdflabs.com/tools/pdftk-the-pdf-
toolkit
Figure 1: An example of the PDF structure
Usually, it is not possible to modify objects within the
ﬁle, once they got their memory reference inside the cross-
reference table. In order to do so, a new version of an object
must be created and added after the trailer, together with a
new trailer and a new cross-reference table. That is, original
objects are preserved inside the ﬁle. This procedure is also
called version update.
3. RELATED WORK
The ﬁrst approaches based on machine learning for ma-
licious PDF detection proposed static analysis on the raw
(byte-level) document, by means of n-gram analysis [25, 32]
and decision trees [38]. Anyway, these approaches were not
really tailored to PDF ﬁles, but designed to analyze ﬁles in
very diﬀerent formats such as doc, exe, etc. Whereas raw
analysis may detect many malware “implementations” be-
sides malicious PDFs, it is not robust against modern obfus-
cation techniques, such as AES encryption [12], or diﬀerent
attack techniques, such as Return Oriented Programming,
Heap Spraying or JIT Spraying [17, 29, 16].
To address the evolution in malware propagation through
documents in PDF format, subsequent works focused on the
analysis of embedded JavaScript code. A number of solu-
tions for the detection of malicious JavaScript code have
been proposed to date in the context of web security. For
instance, Jsand [19], Cujo [31], Zozzle [21], Prophiler [18]
are well-known tools for the dynamic and static analysis of
JavaScript code. These tools are often employed by systems
designed to identify threats embedded in diﬀerent document
formats.
Wepawet [10], a framework for the analysis of web-based
threats, relies on JSand to analyze JavaScript code within
PDF ﬁles. Jsand [19] adopts HtmlUnit1, a Java-based brow-
ser simulator, and Mozilla’s Rhino2 to extract behavioral
features related to the execution of JavaScript code. A sta-
tistical classiﬁer is trained on a representative sample of be-
nign code, and malicious code is spot by detecting anoma-
lous patterns.