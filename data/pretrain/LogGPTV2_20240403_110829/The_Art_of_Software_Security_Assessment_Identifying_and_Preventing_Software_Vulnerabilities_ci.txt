used for all file system accesses. These IDs are usually kept 100% synced with the 
effective user ID, so their presence doesn't affect use of the normal 
privilege-management APIs. However, a program that wants to temporarily use a 
normal user's file system privileges without exposure to attacks caused by security 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
510 
checks based on effective IDs can simply change its file system user and group IDs 
with the API calls setfsuid() and setfsgid(). 
BSD securelevels 
The BSD securelevels kernel protection (now supported by Linux to some extent) is 
intended to protect the system kernel from the root user. The primary focus of 
securelevels is to enforce some restrictions on every user on the system, including 
the superuser, so that a root compromise doesn't render a machine completely 
vulnerable. It uses a systemwide kernel value, the "securelevel," to help decide what 
actions system users are allowed to perform. The different branches and versions of 
BSD vary in the number of levels they provide and the protection each level offers, 
but the idea is essentially the same in each version. The following excerpt from the 
init(8) man page describes the available levels: 
The kernel runs with four different levels of security. Any superuser process can raise 
the security level, but only init can lower it. The security levels are: 
-1 Permanently insecure modealways run the system in level 0 mode. 
0 Insecure modeimmutable and append-only flags may be turned off. All devices may 
be read or written subject to their permissions. 
1 Secure modethe system immutable and system append-only flags may not be 
turned off; disks for mounted filesystems, /dev/mem, and /dev/kmem may not be 
opened for writing. 
2 Highly secure modesame as secure mode, plus disks may not be opened for writing 
(except by mount(2)) whether mounted or not. This level precludes tampering with 
filesystems by unmounting them, but also inhibits running newfs(8) while the system 
is multi-user. 
If the security level is initially -1, then init leaves it unchanged. Otherwise, init 
arranges to run the system in level 0 mode while single user and in level 1 mode while 
multiuser. If level 2 mode is desired while running multiuser, it can be set while single 
user, e.g., in the startup script /etc/rc, using sysctl(8). 
As you can see, this systemwide setting can inhibit actions for even superusers. 
Although it offers a level of protection, it doesn't allow fine-tuning for specific 
processes and can be susceptible to bypasses by users modifying certain files and 
restarting the machine if they gain root access. 
Capabilities 
Linux has also undertaken the challenge of addressing the basic UNIX privilege 
shortcomings by implementing a technology known as capabilities. This model 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
511 
defines a set of administrative tasks (capabilities) that can be granted to or restricted 
from a process running with elevated privileges. Some of the defined capabilities 
include the following: 
CAP_CHOWN Provides the capability to change the ownership of a file. 
CAP_SETUID/CAP_SETGID Provides the capability to manipulate a user and group 
privileges of a process by using the set*id() functions discussed previously. 
CAP_NET_RAW Provides the capability to use raw sockets. 
CAP_NET_BIND_SERVICE Provides the capability to bind to a "privileged" UDP or 
TCP port (that is, one lower than 1024). 
CAP_SYS_MODULE Provides the capability to load and unload kernel modules. 
Being able to grant and omit certain capabilities from applications makes it possible to 
create processes that have one special system capability without putting the entire 
system at risk if it's compromised. The ping program is a perfect example. Instead of 
having it run with full permissions to create a raw socket, it could be granted the 
CAP_NET_RAW privilege. If the program is compromised, attackers can create raw 
sockets (which is still a breach), but can't automatically load kernel modules or mount 
new file systems, for example. 
Capabilities are applied to running processes but can also be applied to files on disk to 
enforce restrictions or grant special privileges when a certain binary is run (much like 
the setuid/setgid bits associated with a file). 
A process has three bitmasks of capabilities: 
Permitted set The set of capabilities the process can enable. 
Effective set The set of capabilities that has been enabled already (the set 
that's consulted when performing a privileged operation). 
Inheritable set The set of capabilities that a new process can inherit when the 
current process creates one. 
Although the effective set ultimately governs what a process can do, the other two 
sets are equally important. To see why, imagine that the ping program has only the 
CAP_NET_RAW capability in its effective set, but its permitted set includes a series of 
other random capabilities, such as CAP_SYS_MODULE. In this case, if users did 
compromise the ping program, they could enable the CAP_SYS_MODULE capability (thus 
adding it to the effective set) by using the sys_capset() system call and load kernel 
modules as a result. 
File capabilities are similar, except they're associated with a file. A file has three 
capability sets also, but these sets differ slightly: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
512 
Allowed set The set of capabilities that are allowed to be added to the process 
capability sets when the executable runs. (Capabilities apply only to 
executables.) 
Forced set A set of capabilities that are granted in addition to those users 
might already have. This set allows a certain application to be given special 
privileges whenever it runs (like setuid/setgid bits on a file, but more refined). 
Effective set This set isn't really a set, but a bit indicating whether capabilities 
in the permitted set should automatically be transferred to the effective set 
when a new process image is loaded. 
Capabilities Implementation Vulnerability 
In early incarnations of the Linux capabilities solution (Linux kernel 2.2.15), 
Wojciech Purczynski discovered an interesting logic error. Specifically, users 
were able to restrict their privileges to their eventual advantage. By 
removing the CAP_SETUID privilege from the inheritable and permitted 
privilege sets and then running a setuid root application, the application 
would run with root privileges but wasn't permitted to drop privileges if 
necessary. Therefore, a call to setuid(getuid()) would fail, and the 
application would continue to run in an elevated privilege context. An exploit 
was constructed that targeted Sendmail 8.10.1. You can read more details 
about this vulnerability at www.securityfocus.com/bid/1322/discuss. 
7.5.5 File Security 
Every file on a UNIX system has a set of attributes stored in the file system alongside 
the file's content. These attributes describe properties of the file, such as file size, file 
owner, security permissions, and access and modification timestamps. When a 
process attempts to act on a file, the kernel consults these file attributes to determine 
whether the process is permitted to proceed. The following sections describe these 
file attributes and explain how the kernel uses them to make access control decisions, 
and what kind of mistakes might be made in applications that interact with the file 
system. 
File IDs 
As mentioned previously, every file in a UNIX system has an owner, who is a system 
user with responsibility for the file and extended control over it. Every file also 
belongs to a single group on the system so that the members of that group can be 
granted certain privileges on the file. Files have two integer attributes representing 
this ownership information: owner ID and group ID. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
513 
The kernel sets the file's owner and group when the file is first created. The owner is 
always set to the effective user ID of the process that created the file. The initial group 
membership is a little trickier, as there are two common schemes by which the group 
ID can be initialized. BSD-based systems tend to set the initial group ID to the group 
ID of the file's parent directory. The System V and Linux approach is to set the group 
ID to the effective group ID of the creating process. On systems that favor effective 
group IDs, you can usually use the BSD-style directory inheritance approach for 
whole file systems via mount options or for specific directories by using special 
permission flags. 
File IDs can be changed after file creation by using the system calls chown(), lchown(), 
and fchown(), which permit the caller to specify a new owner ID and a new group ID. 
On BSD and Linux systems, only the superuser can change a file's owner. However, 
System V systems have historically allowed file owners to give away ownership to 
another user. This option is configurable system-wide in most System V derivatives, 
and it's disabled by default in Solaris. 
On most systems, the superuser and file owner can change group memberships. File 
owners can change a file's group only to a group of which they are a member. Again, 
System V derivatives, excluding Solaris, tend to allow arbitrary group changes by the 
file owner, but overall, this behavior is uncommon. 
File Permissions 
File permissions are represented by a small, fixed-width set of bits stored as a file 
attribute on the file system. Figure 9-1 shows the permission bitmask. It's divided 
into four components, each composed of three bits. Because each section is a 3-bit 
value with a possible range of 0 to 7, octal notation lends itself quite naturally to 
describing file permissions. 
Figure 9-1. Permission bitmasks 
The four components of the permission bitmask are owner permissions, group 
permissions, other permissions, and a set of special flags. The owner permissions 
apply to only one user: the owner of the file. The group permissions apply to members 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
514 
of the file's group, but they don't apply to the file's owner if he or she is a member of 
that group. The "other" permissions (sometimes known as "world permissions") apply 
to any other user on the system. The special component of the bitmask is a little 
different; it doesn't contain permissions that apply to a particular set of users; instead, 
it has flags indicating special file properties the kernel will honor. These special bits 
are discussed in more detail momentarily. 
Each component has three bits. For the owner, group, and other components, the 
three bits indicate read, write, and execute permissions. These three bits are 
interpreted in different ways depending on the type of the file. For a normal file, the 
read permission generally refers to the user's ability to open the file for reading with 
the open() system call. The write permission refers to the user's ability to open a file 
for writing with the open() system call. The execute permission refers to the user's 
ability to run a file as a program with the execve() system call. 
If a permission bit is set, it indicates that the associated privilege is granted to the 
associated set of users. So a file with a permission bit-string of octal 0645 (binary 000 
110 100 101) indicates that none of the special bits are set, the file owner has read 
and write permission, members of the file's group have read permission, and 
everyone else on the system has read and execute permission. 
The kernel looks only at the most specific set of permissions relevant to a given user. 
This can lead to confusing situations, such as a member of the file's group being 
forbidden from performing an action that everyone else on the system is permitted to 
do or the file owner being forbidden to do something that other system users are 
allowed to do. For example, a file with a permission string of octal 0606 (binary 000 
110 000 110) specifies that the file owner and everyone else on the system have read 
and write access to the file, except members of the file's group, who have no access 
to the file. 
Auditing Tip 
It's a common misunderstanding to think that the less specific permission bits are 
consulted if the more specific permissions prevent an action. 
The three special permission bits are the setuid bit, the setgid bit, and the sticky (or 
tacky) bit. If the setuid bit is set on an executable file, the program runs with the 
privileges of the file's owner, which means the effective user ID and saved 
set-user-ID of the new process are set to the file's owner ID. The setgid bit is similar: 
A program with the setgid bit set runs with the effective group privileges of the file's 
group. This means the effective group ID and saved set-group-ID of the process are 
set to the file's group ID. The sticky bit isn't widely used or supported for normal files, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
515 
but it usually indicates that the file is heavily used and the system should act 
accordingly, which might entail keeping it resident in memory for longer periods. 
File permissions can be changed on an existing file by using the chmod() system call, 
which takes a filename, or the fchmod() system call, which operates on a file the 
process has already opened. The only two users who can change permissions on a file 
are the file owner and the superuser. 
Umask 
Each process has a umask, which is a 9-bit mask used when creating files. Most file 
creation system calls take a mode parameter; users set this parameter to specify the 
12-bit permission string they want the file to have when it's created. The kernel takes 
these mode permissions and uses the umask value to further restrict which privilege 
bits are set. So if a process tries to create a file with read and write access for all users, 
but the umask prohibits it, the file is created without the access bits. 
To calculate the initial permission bits for a new file, the permission argument of the 
file creation system call is calculated with a bitwise AND operation with the 
complement of the umask value. This process is shown in Figure 9-2. The process has 
a umask value of 022, which tells the kernel to turn off group write and world write 
permissions on any file this process creates. With the 022 umask, an open() call with 
a permission argument of octal 0777 results in a file being created with permissions 
of octal 0755. 
Figure 9-2. Permission bitmasks and umask 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
516 
A process may manually set its umask with the umask() system function. It has the 
following prototype: 
mode_t umask(mode_t mask); 
The umask() function will set the process umask to the 9-bit permissions string 
indicated by mask. This function always succeeds. A process's umask is inherited when 
a new program is run. You will learn more about attribute inheritance in Chapter 10(? 
[????.]), "UNIX II: Processes." If a process doesn't manually set its umask, it will 
likely inherit a default umask (022 in most cases). 
Directory Permissions 
As mentioned, directories are a special type of file for containing other files. They 
have a set of permissions like any file on the file system, but the kernel interprets the 
permission flags a little differently. 
If users have read permissions to a directory, they can view the list of files the 
directory contains. To do this, they open the directory with the open() system call, 
and then use a special system call to read the directory entries, such as geTDents(), 
readdir(), or getdirentries(). 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
517 
If users have write permissions to a directory, they are allowed to alter the directory's 
contents. This means users can create new files in the directory through several 
system calls, such as creat(), open(), and mkdir(). Write permissions allow users to 
delete files in a directory by using unlink() or rmdir() and rename files in a directory 
by using the rename() system call. Note that the actual permissions and ownership of 
the files being deleted or renamed don't matter; it's the directory file that is being 
altered. 
Execute permissions, also called search permissions, allow users to enter the 
directory and access files in it. Basically, you need search permissions to enter a 
directory and access the files it contains. If you don't have search permissions, you 
can't access any files in the directory; consequently, any subdirectories of that 
directory are also closed to you. You need search permissions on a directory to enter 
it with the chdir() system call. Generally, if you have write permissions on a directory, 
you also need search permissions on it to be able to do anything. Read permissions, 
however, work without search permissions. 
The setuid bit typically has no meaning for directories on modern UNIX systems. The 
setgid bit is used on some Linux and System V systems to indicate that a directory has 
BSD semantics. For these systems, if a directory is marked with the setgid bit, any file 
created in that directory automatically inherits the directory's group ID. Any directory 
created in one of these special setgid directories is also marked setgid. 
If the sticky bit is set on a directory, the directory effectively becomes "append-only." 
If users have write permissions on a directory, they can rename and delete files in the 
directory at will, regardless of the actual file's permissions and ownership. A sticky 
directory, however, lets users delete and rename only files they own. This permission 
bit is used to implement public temporary directories, such as /tmp. Because /tmp is 
sticky, if one user creates a temporary file in there, another random user can't come 
along and rename or delete it. 
Directory permissions are initially set just as normal file permissions are. The mkdir() 
system call takes the mode argument into account and further restricts permissions 
based on the process's current umask. Directory permissions are changed by using 
the same API calls used for file permissions. 
Privilege Management with File Operations 
A process can attempt numerous actions that cause the kernel to perform a security 
check. Generally, creating or opening a file is subject to an access control check as 
well as operations that alter the directory a file resides in and operations that change 
file attributes. File opening is typically done with the open(), creat(), mknod(), mkdir(), 
or socket() system calls; a file's directory is altered with calls such as unlink() and 
rename(); and file attributes are changed with calls such as chmod(), chown(), or 
utimes(). All these privilege checks consider a file's permission bitmask, ownership, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
518 
and group membership along with the effective user ID, effective group ID, and 
supplemental groups of the process attempting the action. 
The effective permissions of a process are critical for file system interaction because 
they determine which actions the kernel allows on certain files and affect the initial 
ownership and group membership of any files or directories created by the process. 
You've already seen how UNIX processes manage their privileges and the pitfalls 
these programs can encounter. Naturally, applications running with privilege have to 
be extremely careful about how they interact with the file system. 
Privilege Recklessness 
The most straightforward type of file system interaction vulnerability is one that's 
already been discusseda privileged process that simply doesn't take any precautions 
before interacting with the file system. This recklessness usually has serious 
consequences, such as allowing unprivileged users to read or modify critical system 
files. You saw an example of this in Listing 9-1(? [????.]), which was a vulnerability in 
the XFree86 server. 
Libraries 
Sometimes a program is diligent about managing its elevated privileges but can run 
into trouble when it relies on third-party libraries to achieve some desired 
functionality. Shared libraries can often be the source of potential vulnerabilities, 
since users of the library don't know how the library functions internally; they only 
know the API that the library exports. Therefore, it is quite dangerous for libraries to 
access file system resources haphazardly, because if the library is used in a privileged 
application, the library functionality could be used as a vehicle for privilege escalation. 
If developers aren't made aware of the potential side effects of using a particular 
library, they might inadvertently introduce a vulnerability into an otherwise secure 
application. As an example, consider the bug related to the login class capability 
database in FreeBSD that Przemyslaw Frasunek discovered (documented at 
www.osvdb.org/displayvuln.php?osvdb_id=). This researcher noted that both the 
portable OpenSSH program and the login program call various functions in libutil to 
read entries from the login capabilities database before they drop privileges. This 
behavior is dangerous because if libutil is called in a certain way, it looks in a user's 
home directory for a .login.conf file, which contains user-specific login capability 
database entries. This code is encapsulated in the libutil library, so the problem 
wasn't immediately obvious. Here's one of the vulnerable code excerpts from 
OpenSSH: 
     if (newcommand == NULL && !quiet_login 
     && !options.use_login) { 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
519 
             fname = login_getcapstr(lc, "copyright", 
                 NULL, NULL); 
             if (fname != NULL && (f = 
                 fopen(fname, "r")) != NULL) { 
                     while (fgets(buf, sizeof(buf), f) 
                         != NULL) 
                             fputs(buf, stdout); 
                      fclose(f); 
The intent of this code is to print a copyright message defined by the system when 