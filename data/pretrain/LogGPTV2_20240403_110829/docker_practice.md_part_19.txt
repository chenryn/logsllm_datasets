如果一切正常，你应该可以看到 PostgreSQL 的输出，几秒后可以看到这样的重复
信息：
myapp_web_1 | [2014-01-17 17:16:29] INFO WEBrick 1.3.1
myapp_web_1 | [2014-01-17 17:16:29] INFO ruby 2.0.0 (2013-11-22
) [x86_64-linux-gnu]
myapp_web_1 | [2014-01-17 17:16:29] INFO WEBrick::HTTPServer#st
art: pid=1 port=3000
233
实战 Rails
最后， 我们需要做的是创建数据库，打开另一个终端，运行：
$ docker-compose run web rake db:create
这个 web 应用已经开始在你的 docker 守护进程里面监听着 3000 端口了（如果你
有使用 boot2docker ，执行 boot2docker ip ，就会看到它的地址）。
234
实战 wordpress
使用 Wordpress
Compose 让 Wordpress 运行在一个独立的环境中很简易。
安装 Compose ，然后下载 Wordpress 到当前目录：
wordpress.org/latest.tar.gz | tar -xvzf -
这将会创建一个叫 wordpress 目录，你也可以重命名成你想要的名字。在目录里
面，创建一个 Dockerfile 文件，定义应用的运行环境：
FROM orchardup/php5
ADD . /code
以上内容告诉 Docker 创建一个包含 PHP 和 Wordpress 的镜像。更多关于如何编
写 Dockerfile 文件的信息可以查看 镜像创建 和 Dockerfile 使用。
下一步， docker-compose.yml 文件将开启一个 web 服务和一个独立的 MySQL
实例：
web:
build: .
command: php -S 0.0.0.0:8000 -t /code
ports:
- "8000:8000"
links:
- db
volumes:
- .:/code
db:
image: orchardup/mysql
environment:
MYSQL_DATABASE: wordpress
235
实战 wordpress
要让这个应用跑起来还需要两个文件。 第一个， wp-condocker-compose.php
，它是一个标准的 Wordpress 配置文件，有一点需要修改的是把数据库的配置指向
db 容器。
 /usr/local/bin/docker
-machine
$ chmod +x /usr/local/bin/docker-machine
完成后，查看版本信息，验证运行正常。
$ docker-machine -v
docker-machine version 0.3.1-rc1 (993f2db)
Windows
Windows 下面要复杂一些，首先需要安装 msysgit。
msysgit 是 Windows 下的 git 客户端软件包，会提供类似 Linux 下的一些基本的工
具，例如 ssh 等。
安装之后，启动 msysgit 的命令行界面，仍然通过下载二进制包进行安装，需要下
载 docker 客户端和 docker-machine。
241
安装
$ curl -L https://get.docker.com/builds/Windows/x86_64/docker-la
test.exe > /bin/docker
$ curl -L https://github.com/docker/machine/releases/download/v0
.3.1-rc1/docker-machine_windows-amd64.exe > /bin/docker-machine
242
使用
使用
Docker Machine 支持多种后端驱动，包括虚拟机、本地主机和云平台等。
本地主机实例
首先确保本地主机可以通过 user 账号的 key 直接 ssh 到目标主机。
使用 generic 类型的驱动，创建一台 Docker 主机，命名为 test。
$ docker-machine create -d generic --generic-ip-address=10.0.100
.101 --generic-ssh-user=user test
创建主机成功后，可以通过 env 命令来让后续操作对象都是目标主机。
$ docker-machine env test
支持驱动
通过 -d 选项可以选择支持的驱动类型。
amazonec2
azure
digitalocean
exoscale
generic
google
none
openstack
rackspace
softlayer
virtualbox
vmwarevcloudair
vmwarevsphere
243
使用
操作命令
active 查看活跃的 Docker 主机
config 输出连接的配置信息
create 创建一个 Docker 主机
env 显示连接到某个主机需要的环境变量
inspect 输出主机更多信息
ip 获取主机地址
kill 停止某个主机
ls 列出所有管理的主机
regenerate-certs 为某个主机重新生成 TLS 认证信息
restart 重启主机
rm 删除某台主机
ssh SSH 到主机上执行命令
scp 在主机之间复制文件
start 启动一个主机
stop 停止一个主机
upgrade 更新主机 Docker 版本为最新
url 获取主机的 URL
help, h 输出帮助信息
每个命令，又带有不同的参数，可以通过
docker-machine  -h
来查看具体的用法。
244
Docker Swarm 项目
Docker Swarm 项目
Docker Swarm 是 Docker 官方编排（Orchestration）项目之一，负责对 Docker 集
群进行管理。
本章将介绍 Swarm 项目情况以及安装和使用。
245
简介
简介
Docker Swarm 是 Docker公司官方在 2014 年 12月初发布的一套管理 Docker 集群
的工具。它将一群 Docker 宿主机变成一个单一的，虚拟的主机。
Swarm 使用标准的 Docker API 接口作为其前端访问入口，换言之，各种形式的
Docker 工具比如 Dokku，Compose，Krane，Deis，docker-py，Docker 本身等都
可以很容易的与 Swarm 进行集成。
图 1.18.1.1 - Swarm 结构图
在使用 Swarm 管理docker 集群时，会有一个 swarm manager 以及若干的 swarm
node，swarm manager上运行 swarm daemon，用户只需要跟 swarm manager 通
信，然后 swarm manager 再根据discovery service的信息选择一个swarm node 来
246
简介
运行container。
值得注意的是 swarm daemon 只是一个任务调度器(scheduler)和路由器(router),它
本身不运行容器，它只接受 Docker client 发送过来的请求，调度合适的 swarm
node 来运行 container。这意味着，即使 swarm daemon 由于某些原因挂掉了，已
经运行起来的容器也不会有任何影响。
有以下两点需要注意：
集群中的每台节点上面的 Docker 的版本都不能小于1.4
为了让 swarm manager 能够跟每台 swarm node 进行通信，集群中的每台节
点的 Docker daemon 都必须监听同一个网络接口。
247
安装
安装
安装swarm的最简单的方式是使用Docker官方的swarm镜像
$ sudo docker pull swarm
可以使用下面的命令来查看swarm是否成功安装。
$ sudo docker run --rm swarm -v
输出下面的形式则表示成功安装(具体输出根据swarm的版本变化)
swarm version 0.2.0 (48fd993)
248
使用
使用
在使用 swarm 管理集群前，需要把集群中所有的节点的 docker daemon 的监听方
式更改为 0.0.0.0:2375 。
可以有两种方式达到这个目的，第一种是在启动docker daemon的时候指定
sudo docker -H 0.0.0.0:2375&
第二种方式是直接修改 Docker 的配置文件(Ubuntu 上是
/etc/default/docker ，其他版本的 Linux 上略有不同)
在文件的最后添加下面这句代码：
DOCKER_OPTS="-H 0.0.0.0:2375 -H unix:///var/run/docker.sock"
需要注意的是，一定要在所有希望被 Swarm 管理的节点上进行的。修改之后要重
启 Docker
sudo service docker restart
Docker 集群管理需要使用服务发现(Discovery service backend)功能，Swarm支持
以下的几种方式：DockerHub 提供的服务发现功能，本地的文件，etcd，consul，
zookeeper 和 IP 列表，本文会详细讲解前两种方式，其他的用法都是大同小异
的。
先说一下本次试验的环境，本次试验包括三台机器，IP地址分别为
192.168.1.84,192.168.1.83和192.168.1.124.利用这三台机器组成一个docker集
群，其中83这台机器同时充当swarm manager节点。
使用 DockerHub 提供的服务发现功能
创建集群 token
249
使用
在上面三台机器中的任何一台机器上面执行 swarm create 命令来获取一个集群
标志。这条命令执行完毕后，Swarm 会前往 DockerHub 上内置的发现服务中获取
一个全球唯一的 token，用来标识要管理的集群。
sudo docker run --rm swarm create
我们在84这台机器上执行这条命令，输出如下：
rio@084:~$ sudo docker run --rm swarm create
b7625e5a7a2dc7f8c4faacf2b510078e
可以看到我们返回的 token 是 b7625e5a7a2dc7f8c4faacf2b510078e ，每次返
回的结果都是不一样的。这个 token 一定要记住，后面的操作都会用到这个
token。
加入集群
在所有要加入集群的节点上面执行 swarm join 命令，表示要把这台机器加入这
个集群当中。在本次试验中，就是要在 83、84 和 124 这三台机器上执行下面的这
条命令：
sudo docker run -d swarm join --addr=ip_address:2375 token://tok
en_id
其中的 ip_address 换成执行这条命令的机器的 IP，token_id 换成上一步执行
swarm create 返回的 token。
在83这台机器上面的执行结果如下：