可以看到，代码清楚地定义了用户输入的标题部分只能用作list_title1，用户输入的描述部分是list_description2，而用户输入的列表部分可以用于模板3的item_list。
However, sometimes developers treat templates like strings in
programming languages and directly concatenate user input into them.
This is where things go wrong, as the template engine won't be able to
distinguish between user input and the developer's template code.
然而，有时开发人员会像在编程语言中处理字符串一样处理模板，直接将用户输入连接到它们中。这就是问题发生的地方，因为模板引擎无法区分用户输入和开发人员的模板代码。
Here's an example. The following program takes user input and inserts it
into a Jinja template to display the user's name on an HTML page:
以下是一个示例。下面的程序将用户输入插入到Jinja模板中，以在HTML页面上显示用户的姓名：
    from jinja2 import Template
    tmpl = Template("
    The user's name is: " + user_input + "")1 print(tmpl.render())2
The code first creates a template by concatenating HTML code and user
input together [ 1 ]{.CodeAnnotation aria-label="annotation1"} , then
renders the template [ 2 ]{.CodeAnnotation aria-label="annotation2"} .
该代码首先通过将HTML代码和用户输入连接起来创建一个模板，然后渲染该模板。
If users submit a GET request to that page, the website will return an
HTML page that displays their name:
如果用户向该页面提交GET请求，则网站将返回一个显示他们姓名的HTML页面：
    GET /display_name?name=Vickie
    Host: example.com
This request will cause the template engine to render the following
page:
这个请求将会导致模板引擎渲染以下页面：
      The user's name is: Vickie
Now, what if you submitted a payload like the following instead?
如果你提交了以下的有效载荷呢？
    GET /display_name?name={{1+1}}
    Host: example.com
Instead of supplying a name as the `      name     ` parameter, you are
submitting an expression that has special meaning for the template
engine. Jinja2 [ ]{#c16.xhtml#Page_265 .pagebreak title="265"}
interprets anything within double curly brackets `      {{ }}     ` as
Python code. You will notice something odd in the resulting HTML page.
Instead of displaying the string
`      The user's name is: {{1+1}}     ` , the page displays the string
`      The user's name is: 2     ` :
使用表达式作为名称参数而不是提供名称。对于模板引擎，括号内的所有内容都会被视为Python代码。在生成的HTML页面中，您会注意到一些奇怪的地方。页面不会显示字符串"The
user\'s name is: {{1+1}}"，而是显示字符串"The user\'s name is: 2"。
      The user's name is: 2
What just happened? When you submitted `      {{1+1}}     ` as your
name, the template engine mistook the content enclosed in
`      {{ }}     ` as a Python expression, so it executed
`      1+1     ` and returned the number `      2     ` in that field.
刚刚发生了什么？当您将{{1+1}}提交为您的名称时，模板引擎将{{
}}中的内容误认为是Python表达式，因此执行了1+1并返回了数字2在该字段中。
This means you can submit any Python code you'd like and get its results
returned in the HTML page. For instance, `      upper()     ` is a
method in Python that converts a string to uppercase. Try submitting the
code snippet `      {{'Vickie'.upper()}}     ` , like this:
这意味着您可以提交任何Python代码，并在HTML页面中获取其结果返回。例如，upper()是Python中将字符串转换为大写的方法。尝试提交代码片段{{\'Vickie\'.upper()}}，就像这样：
    GET /display_name?name={{'Vickie'.upper()}}
    Host: example.com
You should see an HTML page like this returned:
你应该看到返回的一个像这样的 HTML 页面：
      The user's name is: VICKIE
You may have noticed that template injections are similar to SQL
injections. If the template engine can't determine where a piece of
user-supplied data ends and where the template logic starts, the
template engine will mistake user input for template code. In those
cases, attackers can submit arbitrary code and get the template engine
to execute their input as source code!
你可能会注意到模板注入和 SQL
注入类似。如果模板引擎无法确定用户输入数据在哪里结束，模板逻辑从哪里开始，则模板引擎会将用户输入误认为模板代码。在这种情况下，攻击者可以提交任意代码，并让模板引擎将其输入作为源代码执行！
Depending on the permissions of the compromised application, attackers
might be able to use the template injection vulnerability to read
sensitive files or escalate their privileges on the system. We will talk
more about escalating template injections later in this chapter.
根据被侵入应用的权限，攻击者可能能够利用模板注入漏洞读取敏感文件或提升系统中的权限。我们稍后在本章中将详细讨论如何提升模板注入。
## Prevention {#c16.xhtml#h1-123456c16-0002}
How can you prevent this dangerous vulnerability? The first way is by
regularly patching and updating the frameworks and template libraries
your application uses. Many developers and security professionals are
catching on to the danger of template injections. As a result, template
engines publish various mitigations against this attack. Constantly
updating your software to the newest version will ensure that your
applications are protected against new attack vectors.
你如何预防这个危险漏洞？首先，定期修复和更新应用程序所使用的框架和模板库是一种方法。许多开发人员和安全专家已经意识到模板注入的危险性。因此，模板引擎发布了各种缓解这种攻击的措施。不断更新软件到最新版本将确保您的应用程序受到新攻击向量的保护。
You should also prevent users from supplying user-submitted templates if
possible. If that isn't an option, many template engines provide a
hardened sandbox environment that you can use to safely handle user
input. These sandbox environments remove potentially dangerous modules
and [ ]{#c16.xhtml#Page_266 .pagebreak title="266"} functions, making
user-submitted templates safer to evaluate. However, researchers have
published numerous sandbox escape exploits, so this is by no means a
bulletproof method. Sandbox environments are also only as safe as their
configurations.
如果可能的话，你也应该防止用户提供用户提交的模板。如果这不是一个选择，许多模板引擎提供了一种强化了的沙箱环境，可以用来安全地处理用户输入。这些沙箱环境会移除潜在有害的模块和函数，使得用户提交的模板更安全地进行评估。然而，研究人员已经发表了许多沙箱逃逸漏洞，所以这绝不是一个百分百安全的方法。沙箱环境也只要其配置足够安全，才会更加可靠。
Implement an allowlist for allowed attributes in templates to prevent
the kind of RCE exploit that I'll introduce in this chapter. Also,
sometimes template engines raise descriptive errors that help attackers
develop exploits. You should handle these errors properly and return a
generic error page to the user. Finally, sanitize user input before
embedding it into web templates and avoid injecting user-supplied data
into templates whenever possible.
实现模板中属性允许列表以防止本章介绍的RCE漏洞类型，有时模板引擎会引发有助于攻击者开发漏洞利用的详细错误。应该适当处理这些错误并向用户返回通用错误页面。最后，在将用户输入嵌入Web模板之前对其进行净化，并尽可能避免将用户提供的数据注入模板。
## Hunting for Template Injection {#c16.xhtml#h1-123456c16-0003}
As with hunting for many other vulnerabilities, the first step in
finding template injections is to identify locations in an application
that accept user input.
与寻找其他漏洞一样，寻找模板注入的第一步是识别应用程序中接受用户输入的位置。
### Step 1: Look for User-Input Locations {#c16.xhtml#h2-123456c16-0003}
Look for locations where you can submit user input to the application.
These include URL paths, parameters, fragments, HTTP request headers and
body, file uploads, and more.
寻找可以向应用程序提交用户输入的位置。这些位置包括URL路径、参数、片段、HTTP请求头部和主体、文件上传等。
Templates are typically used to dynamically generate web pages from
stored data or user input. For example, applications often use template
engines to generate customized email or home pages based on the user's
information. So to look for template injections, look for endpoints that
accept user input that will eventually be displayed back to the user.
Since these endpoints typically coincide with the endpoints for possible
XXS attacks, you can use the strategy outlined in [ Chapter 6 ]{.xref
itemid="xref_target_Chapter 6"} to identify candidates for template
injection. Document these input locations for further testing.
模板通常用于从存储的数据或用户输入动态生成网页。例如，应用程序通常使用模板引擎根据用户信息生成定制的电子邮件或主页。因此，要寻找模板注入，请寻找接受用户输入并最终显示回用户的端点。由于这些端点通常与可能的XXS攻击端点重叠，因此您可以使用第6章中概述的策略来识别模板注入的候选项。记录这些输入位置以进行进一步测试。
### Step 2: Detect Template Injection by Submitting Test Payloads {#c16.xhtml#h2-123456c16-0004}
Next, detect template injection vulnerabilities by injecting a test
string into the input fields you identified in the previous step. This
test string should contain special characters commonly used in template
languages. I like to use the string
`      {{1+abcxx}}${1+abcxx}[abcxx]     ` because it's
designed to induce errors in popular template engines.
`      ${...}     ` is the special syntax for expressions in the
FreeMarker and Thymeleaf Java templates; `      {{...}}     ` is the
syntax for expressions in PHP templates such as Smarty or Twig, and
Python templates like Jinja2; and `           ` is the syntax
for the Embedded Ruby template (ERB). And `      [     `
`      random expression     `{.variable} `      ]     ` will make the
server interpret the random expression as a list item if the user input
is placed into an expression tag within the template (we will discuss an
example of this scenario later).
接下来，通过向先前识别出的输入字段注入测试字符串，检测模板注入漏洞。这个测试字符串应该包含常用模板语言中的特殊字符。我喜欢使用字符串{{1+abcxx}}\${1+abcxx}\\[abcxx\]，因为它被设计为在流行的模板引擎中导致错误。\${\...}
是 FreeMarker 和 Thymeleaf Java 模板中表达式的特殊语法；{{\...}} 是 PHP
模板（如 Smarty 或 Twig）和 Python 模板（如 Jinja2）中表达式的语法；\ 是 Embedded Ruby 模板（ERB）中表达式的语法。而 \[random
expression\]
则会使服务器将用户输入放入模板的表达式标记内并将其解释为列表项（稍后我们将讲述这种情况的一个例子）。
In this payload, I make the template engine resolve the variable with
the name `      abcxx     ` , which probably has not been defined in the
application. If you get an application error from this payload, that's a
good indication of [ ]{#c16.xhtml#Page_267 .pagebreak title="267"}
template injection, because it means that the special characters are
being treated as special by the template engine. But if error messages
are suppressed on the server, you need to use another method to detect
template injection vulnerabilities.
在这个有效载荷中，我让模板引擎解析名称为abcxx的变量，这个变量可能没有在应用程序中定义。如果你从这个有效载荷中得到应用程序错误，这是一个很好的模板注入指示，因为这意味着特殊字符被模板引擎视为特殊字符。但是，如果服务器抑制错误消息，你需要使用另一种方法来检测模板注入漏洞。
Try providing these test payloads to the input fields
`      ${7*7}     ` , `      {{7*7}}     ` , and `           `
. These payloads are designed to detect template injection in various
templating languages. `      ${7*7}     ` works for the FreeMarker and
Thymeleaf Java templates; `      {{7*7}}     ` works for PHP templates
such as Smarty or Twig, and Python templates like Jinja2; and
`           ` works for the ERB template. If any of the
returned responses contain the result of the expression, 49, it means
that the data is being interpreted as code by the template engine:
尝试将这些测试载荷提供给输入字段\$ {7 \* 7}，{{7 \* 7}}和\。这些载荷旨在检测各种模板语言中的模板注入。 \$ {7 \*
7}适用于FreeMarker和Thymeleaf Java模板; {{7 \*
7}}适用于PHP模板，如Smarty或Twig，以及Python模板，如Jinja2;并且\适用于ERB模板。如果返回的任何响应都包含表达式结果49，则表示模板引擎正在将数据解释为代码：
    GET /display_name?name={{7*7}}
    Host: example.com
While testing these endpoints for template injections, keep in mind that
successful payloads don't always cause results to return immediately.
Some applications might insert your payload into a template somewhere
else. The results of your injection could show up in future web pages,
emails, and files. A time delay also might occur between when the
payload is submitted and when the user input is rendered in a template.
If you're targeting one of these endpoints, you'll need to look out for
signs that your payload has succeeded. For example, if an application
renders an input field unsafely when generating a bulk email, you will
need to look at the generated email to check whether your attack has
succeeded.
在测试这些端点时防注入模板，请注意成功的有效负载并不总是立即返回结果。有些应用程序可能会将您的有效负载插入到其他地方的模板中。您的注入结果可能会在未来的网页、电子邮件和文件中显示。在有效负载提交后和用户输入在模板中呈现之间，可能会发生时间延迟。如果您正在针对其中之一的端点，则需要注意您的有效负载是否成功。例如，如果应用程序在生成批量电子邮件时不安全地呈现输入字段，则需要查看生成的电子邮件以检查攻击是否成功。
The three test payloads `      ${7*7}     ` , `      {{7*7}}     ` , and
`           ` would work when user input is inserted into the
template as plaintext, as in this code snippet:
三个测试载荷 \${7\*7}, {{7\*7}}, 和 \
当用户输入被插入模板中作为纯文本时将能够工作，就像这段代码片段中一样：
    from jinja2 import Template
    tmpl = Template("
    The user's name is: " + user_input + "")print(tmpl.render())
But what if the user input is concatenated into the template as a part
of the template's logic, as in this code snippet?
但如果用户输入被连接到模板中并作为模板逻辑的一部分，如此代码片段所示，情况会怎样？
    from jinja2 import Template
    tmpl = Template("
    The user's name is: {{" + user_input + "}}")print(tmpl.render())
Here, the user input is placed into the template within expression tags
`      {{...}}     ` . Therefore, you do not have to provide extra
expression tags for the server to interpret the input as code. In that
case, the best way to detect whether your input is being interpreted as
code is to submit a random expression and see if it gets interpreted as
an expression. In this case, you can input `      7*7     ` to the field