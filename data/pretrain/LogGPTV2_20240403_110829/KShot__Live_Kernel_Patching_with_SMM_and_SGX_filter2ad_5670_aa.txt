title:KShot: Live Kernel Patching with SMM and SGX
author:Lei Zhou and
Fengwei Zhang and
Jinghui Liao and
Zhenyu Ning and
Jidong Xiao and
Kevin Leach and
Westley Weimer and
Guojun Wang
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
KShot: Live Kernel Patching with SMM and SGX
∗Department of Computer Science and Engineering, Southern University of Science and Technology, Shenzhen, China,
Lei Zhou∗†, Fengwei Zhang∗, Jinghui Liao‡, Zhengyu Ning∗, Jidong Xiao§
Kevin Leach¶, Westley Weimer¶ and Guojun Wang(cid:3)
{zhoul2019,zhangfw,ningzy2019}@sustech.edu.cn
†School of Computer Science and Engineering, Central South University, Changsha, China
‡Department of Computer Science, Wayne State University, Detroit, USA, PI:EMAIL
§Department of Computer Science, Boise State University, Boise, USA, PI:EMAIL
¶Department of Computer Science and Engineering, University of Michigan, Ann Arbor, USA, {kjleach,weimerw}@umich.edu
(cid:3)School of Computer Science and Cyber Engineering, Guangzhou University, Guangzhou, China, PI:EMAIL
Abstract—Live kernel patching is an increasingly common
trend in operating system distributions, enabling dynamic up-
dates to include new features or to ﬁx vulnerabilities without
having to reboot the system. Patching the kernel at runtime
lowers downtime and reduces the loss of useful state from running
applications. However, existing kernel live patching techniques
(1) rely on speciﬁc support from the target operating system,
and (2) admit patch failures resulting from kernel faults. We
present KSHOT, a kernel
live patching mechanism based on
x86 SMM and Intel SGX that focuses on patching Linux kernel
security vulnerabilities. Our patching processes are protected by
hardware-assisted Trusted Execution Environments. We demon-
strate that our technique can successfully patch vulnerable kernel
functions at the binary-level without support from the underlying
OS and regardless of whether the kernel patching mechanism is
compromised. We demonstrate the applicability of KSHOT by
successfully patching 30 critical indicative kernel vulnerabilities.
I. INTRODUCTION
The growing complexity and heterogeneity of software has
led to a concomitant increase in the pressure to apply patches
and updates,
including to the operating system itself [1].
Frequently, users that choose to patch their kernels may incur
downtime when the patch requires restarting the system. This
unavoidable disruption impacts both enterprise and end users.
For example, in systems that are performing complex scien-
tiﬁc computations or ﬁnancial transactions, users are unlikely
to reboot a system [2], [3]. According to Gartner [4], the
average cost of IT downtime is $5, 600 per minute. Busi-
nesses downtime can reach $300, 000 per hour, on average.
Even for general end users, unplanned downtime interrupts
running applications risks the loss of unsaved data. As a
result, enterprises and users often delay applying patches to
their operating systems, leading to increased risks to their
computing resources [1].
Since patches are important to ﬁxing vulnerabilities and
adding software features, many prior approaches propose live
patching mechanisms that reduce or avoid system reboots
or the loss of application or OS state. Early mechanisms
focused on live updating applications (e.g., POLUS [5]), but
The work was done while Lei Zhou visiting at COMPASS lab.
Fengwei Zhang is the corresponding author.
kernel vulnerabilities also merit patching. Organizations often
use rolling upgrades [3], [6], in which patches are designed
to affect small subsystems that minimize unplanned whole-
system downtime, to update and patch whole server systems.
However, rolling upgrades do not altogether obviate the need
to restart software or reboot systems; instead, dynamic hot
patching (live patching) approaches [7]–[9] aim to apply
patches to running software without having to restart it.
Several kernel-level live patching tools have been designed
previously, including kpatch [10], kGraft [11], Ksplice [12],
and the Canonical Livepatch Service [13]. For example, kpatch
leverages OS-provided infrastructures such as ftrace to
trace a target function, clone and fork to hook the entry
instruction in that target function, and then trampolines to
a patched version of that target function. Moreover, it can
use procfs and ptrace system calls to checkpoint and
restore the state of running applications. In addition, all those
approaches need to modify the existing kernel code and trust
the operating system. In a similar vein, KUP [8] replaces the
whole kernel at runtime while retaining state from running
applications. However, KUP incurs signiﬁcant runtime and
resource overhead (e.g., more than 30GB of memory space)
to support application checkpointing [14], even for very small
kernel patches.
Existing patching techniques must trust the OS kernel or
cooperative patching applications to deploy patches. However,
patching implementations can suffer from numerous bugs [15],
which may cause patching failures or interruptions. Moreover,
a patch may become compromised if the OS or patching
mechanism becomes compromised. For example, an internal
OS update can be hijacked [16]–[18] to download and install
malicious patches. Such attacks download additional malicious
applications while retaining kernel functionality. Further, even
after live patching applies kernel patches, kernel attacks may
be able to revert the software to a vulnerable version [19].
Such situations are more likely to happen in remote or cloud
computing environments [20], [21], where users have less
control over a remote computer’s patching operations.
Thus, there is a need to improve the dependability of live
patching techniques.
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00021
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
To summarize, live kernel patching faces three challenges:
1) Downtime. Traditional kernel patching methods require
downtime, either from unplanned reboots or from stop-
ping applications to checkpoint states.
2) Overhead. Live kernel patching techniques often incur
non-trivial CPU and memory overhead to apply patches
and restore previously-checkpointed state.
3) Trust. Live patching software depends on the correctness
of the underlying OS, which may suffer from bugs [22] or
security vulnerabilities. If the OS-level patching mecha-
nism becomes compromised, then patches applied by that
mechanism cannot be trusted.
In this paper, we present KSHOT, a live kernel patching
technique that uses Intel Software Guard eXtensions (SGX)
and System Management Mode (SMM) to effectively, ef-
ﬁciently, and reliably patch running, untrusted kernels. We
summarize our contributions as follows:
• We develop a reliable architecture for live kernel patch-
ing. We leverage Trusted Execution Environments (TEEs)
implemented with SGX and SMM to prepare and deploy
kernel patches that do not require trusting the kernel
patching mechanism.
• We use SMM (i.e., hardware support) to naturally store
the runtime state of the target host, which reduces
external storage overhead and improves live patching
performance. Employing this hardware-assisted mecha-
nism supports faster restoration without requiring external
checkpoint and restore solutions (e.g., Criu [14]). More-
over, we adopt an SMM-based kernel protection approach
for secure live patching.
• We use SGX as a trusted environment for patch prepa-
ration to provide adequate runtime patch performance.
Furthermore, patching in an SGX enclave precludes ad-
versarial tampering, improving patching reliability.
• We evaluate the effectiveness and efﬁciency of KSHOT
by providing an in-depth analysis on a suite of indicative
kernel vulnerabilities. We demonstrate that our approach
incurs little overhead while providing trustworthy live
kernel patches that mitigate known kernel exploits.
II. BACKGROUND
In this section, we ﬁrst introduce existing live patching
techniques. We then provide an overview of x86 System
Management Mode and Intel Secure Guard eXtensions, which
we use as a trusted base to implement our approach.
A. Kernel Live Patching
Live patching (also known as hot patching) is a method
for dynamically updating software, effectively reducing the
downtime and inconvenience often associated with software
upgrades [7], [10], [23]–[26]. We focus on the particular
domain of Kernel Live Patching (KLP), which updates the
operating system to address vulnerabilities or bugs without
having to restart. Figure 1 illustrates common KLP methods,
which can update kernel software at three levels of abstraction:
function replacement, instruction hooking and jumping, and
Kernel
old kernel
function
replace
new kernel
function
Kernel
vulnerable
function
buggy
instructions
patch
instructions
p
m
ju
&
k
o
o
h
Kernel
old kernel
a
d
s
d
w
r
a
e
s
p
s
i
n
g
new kernel
Fig. 1: Overview of live patching approaches—function-,
instruction-, and kernel-level. In function-level, entire kernel
functions are replaced with new ones by copying bytes into
memory. In instruction-level, single buggy instructions are
replaced with trampolines to new instructions. In kernel-
level, the entire kernel image is replaced with a new binary
image by switching page table entries so that kernel addresses
correspond to a new location in physical memory that contain
the revised image.
kernel switching. In general, these methods can replace single
instructions, vulnerable functions, or even the whole kernel
with a patched one to repair bugs or eliminate vulnerabilities.
Solutions in this area include industry-deployed mechanisms
like Ksplice [12] and kpatch [10] as well as academia-
proposed solutions like KUP [8] and KARMA [9].
However, current KLP techniques extend trust to the kernel
itself to correctly deploy patches. If the kernel becomes
compromised, then any subsequent patches deployed by that
kernel are not trustworthy, potentially leading to additional ma-
licious activities [1]. In our work, we implement a trustworthy
KLP mechanism by leveraging TEEs that enable live kernel
patching even when the underlying kernel patching mechanism
is compromised.
B. System Management Mode
System Management Mode (SMM) is a highly-privileged
CPU execution mode present in all current x86 machines since
the 80386. It is used to handle system-wide functionality such
as power management, system hardware control, or OEM-
speciﬁc code. SMM is used by the system ﬁrmware but not
by applications or normal system software. The code and data
used in SMM are stored in a hardware-protected memory
region named System Management RAM (SMRAM), which
is inaccessible from the normal OS (i.e., can only be accessed
by SMM). SMM code is executed by the CPU upon receiving
a System Management Interrupt (SMI), causing the CPU to
switch modes from (typically) Protected Mode to SMM. The
hardware automatically saves the CPU state in a dedicated
region in SMRAM. Upon completing the execution of SMM
code by the RSM instruction, the CPU’s state is restored,
resuming execution in Protected Mode. Moreover, SMM is
able to access physical memory with a higher privilege,
allowing it to read or modify kernel code and data structures
in kernel memory segments.
C. Software Guard eXtensions
Software Guard eXtensions (SGX) [27] is a TEE technology
proposed by Intel which allows a trusted application to run in
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
2
userspace, even if the OS kernel is compromised. SGX protects
selected code and data from disclosure or modiﬁcation by
the OS. Developers can partition applications into processor-
hardened enclaves, or protected areas of execution in memory,
which increase security without having to extend trust beyond
those enclaves. Enclaves are trusted execution environments
provided by SGX. The enclave code and data reside in a region
of protected physical memory called the Enclave Page Cache
(EPC). The EPC is guarded by CPU access controls: non-
enclave code cannot access enclave memory.
III. THREAT MODEL AND ASSUMPTIONS
We propose an approach to provide reliable live patches to
kernels with untrusted patching mechanisms.
We assume that kernel-based patching mechanisms can
become compromised by internal weaknesses [15], [22] or
external attacks [18]. For example, the vulnerability CVE-
2016-5195, which exploits a race condition for privilege
escalation within the kernel, can be used by attackers to install
rootkits. Attackers can design such rootkits to interfere with
the patching process and prevent memory-level bug repairs
(e.g., by undoing changes to memory introduced by a live-
patching system). Thus, we instead assume that the target
OS supports SGX [28], [29] hardware. We further assume
that the system is trusted during the boot process, and that
System Management RAM (Section II-B) is locked by the
system ﬁrmware so that an attacker cannot modify it (i.e.,
that the hardware is trusted to enforce access control). While
SGX and SMM are potentially vulnerable to side-channel at-
tacks like Spectre [30], Meltdown [31], Foreshadow-NG [32],
SMBR [33], and SMM Reload [34], such vulnerabilities can
be addressed by hardware vendors, and are not the subject of
this paper. In brief, we trust the hardware and ﬁrmware, but
not the software or operating system’s patching mechanism.
In addition, we assume that the source code of the patch is
trusted.
Our proposed approach focuses on live patching vulner-
abilities in existing kernel code, but we note that this ca-
pability is independent of the new kernel’s correct handling
of previously-tainted data. The detection and handling of
tainted data left behind in memory or on the disk by an
OS-compromising attacker is an orthogonal issue that may
be handled by other techniques, such as cross-host
taint
tracking [35], remote witness servers that validate update
effects [36], or SGX-based solutions to the state continuity
problem [37], among others. Alternatively, the OS patch or
update system might employ a mechanism such as type
wrapping or transformation [38] to clean or migrate critical
data. KSHOT is agnostic to the underlying patch being applied
(see Section V-A) and thus supports such approaches. We
also note that denial of service (DOS) attacks could prevent
live patching systems from executing. However, this is not
speciﬁc to our work (and, indeed, KSHOT can detect when
DOS attacks occur). If DOS attacks occur, we assume that
a system operator in the loop would elect to take a victim
system ofﬂine for subsequent manual patching.
SMRAM
Application
System DRAM