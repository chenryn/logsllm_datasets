        USHORT MaximumLength;
        PWCH   Buffer;
    }UNICODE_STRING, *PUNICODE_STRING;
    typedef enum _HARDERROR_RESPONSE_OPTION
    {
        OptionAbortRetryIgnore,
        OptionOk,
        OptionOkCancel,
        OptionRetryCancel,
        OptionYesNo,
        OptionYesNoCancel,
        OptionShutdownSystem
    } HARDERROR_RESPONSE_OPTION, *PHARDERROR_RESPONSE_OPTION;
    typedef enum _HARDERROR_RESPONSE
    {
        ResponseReturnToCaller,
        ResponseNotHandled,
        ResponseAbort,
        ResponseCancel,
        ResponseIgnore,
        ResponseNo,
        ResponseOk,
        ResponseRetry,
        ResponseYes
    } HARDERROR_RESPONSE, *PHARDERROR_RESPONSE;
    // 函数指针
    typedef NTSTATUS(NTAPI *NTRAISEHARDERROR)(
        IN NTSTATUS             ErrorStatus,
        IN ULONG                NumberOfParameters,
        IN PUNICODE_STRING      UnicodeStringParameterMask OPTIONAL,
        IN PVOID                *Parameters,
        IN HARDERROR_RESPONSE_OPTION ResponseOption,
        OUT PHARDERROR_RESPONSE Response
        );
    typedef BOOL(NTAPI *RTLADJUSTPRIVILEGE)(ULONG, BOOL, BOOL, PBOOLEAN);
    HARDERROR_RESPONSE_OPTION ResponseOption = OptionShutdownSystem;
    HARDERROR_RESPONSE Response;
    NTRAISEHARDERROR NtRaiseHardError;
    RTLADJUSTPRIVILEGE RtlAdjustPrivilege;
    int main()
    {
        // 任何进程都会自动加载ntdll，因此直接获取模块地址即可，不必再LoadLibrary
        HMODULE  NtBase = GetModuleHandle(TEXT("ntdll.dll"));
        if (!NtBase) return false;
        // 获取各函数地址
        NtRaiseHardError = (NTRAISEHARDERROR)GetProcAddress(NtBase, "NtRaiseHardError");
        RtlAdjustPrivilege = (RTLADJUSTPRIVILEGE)GetProcAddress(NtBase, "RtlAdjustPrivilege");
        // 提权
        BOOLEAN B;
        if (!RtlAdjustPrivilege(SE_SHUTDOWN_PRIVILEGE, TRUE, FALSE, &B) == 0)
        {
            printf("提权失败");
            getchar();
            return 0;
        }
        NTSTATUS status = NtRaiseHardError(0xC0000217, 0, NULL, NULL, OptionShutdownSystem, &Response);
        return 0;
    }
开启双击调试，直接蓝，连调试的机会都不给你，可以说确实很无解了，至少咱们后面的分析的Critical
Thread是可以被windbg断下来的。这个函数本来是用来显示错误信息的，现在却被用来干这种事，世事难料，安全的对抗是永无止境的。
###  1.栈回溯-观察整体
先通过栈回溯观察下程序的运行流程，便于后续的分析，在`KeWaitForSingleObject`返回地址处下个断点，直接蓝了，说明该函数就是蓝屏的“元凶”，这个函数非常复杂，它具体干了咱们不用管，在这个例子中大致就是等待服务程序插入线程来处理它的关机请求。
###  2.IDA分析NtRaiseHardError
分析基于20H1版本的内核，在win7 x64以上这些函数基本没啥变化。
为了方便理解,下文用PX来代指NtRaiseHardError的参数，a代表当前函数的参数，P1就是NtRaiseHardError的第一个参数，a5则为当前函数的第五个参数。
由于第四个参数为0因此直接跳过中间大部分步骤，直接开始调用`ExpRaiseHardError()`,P1 P2 P3
a5分别是NtRaiseHardError传进来参数1、2、3、5，Dst和v26是一个局部变量数组int64[5]，v22则用于返回Response至a6。当然如果你在R0调用，则PreviousMode=0会走下面那个分支调用`ExRaiseHardError()`
下面让我们看看ExpRaiseHardError干了什么
###  3.ExpRaiseHardError
不要看上面的参数，是错的，流程却是对的，IDA的F5果然还是不靠谱，算了，还是手动分析参数吧。
事实证明，千万不能信任IDA的F5，重要环节还得自己来，用windbg验证一下,`bp
nt!ExpSystemErrorHandler`下个断点，64位函数使用rcx rdx r8 r9来传递前四个参数的值，因此rcx rdx r8
r9应该分别是P1 P2 P3 v26的值，可以发现完全符合，证明我们分析的参数是正确的。
###  4.ExpSystemErrorHandler
这函数没做什么事，直接调用了`ExpSystemErrorHandler2()`，依旧不需要看上面的参数顺序，并不正确，经过分析跟`ExpSystemErrorHandler`的参数完全一样
> ExpSystemErrorHandler2(P1, P2, P3, v26数组地址, a5);  
>
###  5.ExpSystemErrorHandler2
`ExpSystemErrorHandler2`进行一些列字符串的操作，然后调用了`PoShutdownBugCheck`，第三个参数是最初的P1(错误码)。我们通过栈回溯可以知道，并不会执行下面的`KeBugCheckEx`，因为调用`PoShutdownBugCheck`时就已经蓝屏了。
###  6.PoShutdownBugCheck
没做什么有用的事，将函数分发给了ZwInitiatePowerAction，大家也不要看见`KeBugCheckEx`就兴奋，下面的`KeBugCheckEx`依旧没有执行的机会。
Nt是给R0调用的，Nt系列的更底层，Zw系列的函数是给R3调用的，需要做一些检查，不管怎么说最后调用的一定是Nt的，所以咱们直接分析Nt的。
###  7.NtInitiatePowerAction
前面一大堆加锁、去锁，咱们不管它，看关键步骤，执行到这里，调用`KeWaitForSingleObject`
然后等待system线程挂靠，导致蓝屏
## 0x4 总结
整个流程大致如下图所示
由此看来，`NtRaiseHardError`的蓝屏“旅程”并不复杂，后面的进程线程蓝屏才是真正的挑战，由于文章篇幅限制，只能放到下一节内容来进行讲解，后续的分析会比这个更加深入，更加曲折，更加刺激！
## 0x5 参考
[Reactos源码](https://doxygen.reactos.org/)  
[Ring3触发BSOD代码实现及内核逆向分析](https://www.anquanke.com/post/id/213412)  
软件调试 第2版 卷2 Windows平台调试 （上） 第十三章 硬错误和蓝屏