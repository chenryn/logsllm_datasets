– π∗ ← Π.SimPrv(crs, τ, s): the simulated prover algorithm takes as input a CRS, a trapdoor
outputs a CRS together with a trapdoor τ;
τ, and a statement s and outputs a simulated proof π∗.
Deﬁnition 2 (Zero-knowledge). Let games ZK-0 and ZK-1 be as deﬁned in Fig. 2. A proof
system Π for relation R is zero-knowledge if there exists a simulator (Π.SimSetup, Π.SimPrv)
such that for any p.p.t. adversary A,
Π,R,A(λ) ··=(cid:12)(cid:12)(cid:12)Prh1 ← ZK-0A
Π,R(λ)i − Prh1 ← ZK-1A
Π,R(λ)i(cid:12)(cid:12)(cid:12) = negl(λ) .
Advzk
Soundness requires that no p.p.t. adversary can produce a valid proof for a false statement
except with negligible probability. Simulation-soundness is strictly stronger and requires that
this holds even when the adversary has oracle access to the simulated prover.
Deﬁnition 3 ((Simulation-)soundness). Let games SND, resp. SS be deﬁned as in Fig. 3.
A proof system Π for relation R is sound, resp. simulation-sound w.r.t. simulator (Π.SimSetup,
Π.SimPrv), if for any p.p.t. adversary A,
Π,R,A(λ) ··= Prh1 ← SNDA
Π,R,A(λ) ··= Prh1 ← SSA
Π,R(λ)i = negl(λ) ,
Π,R(λ)i = negl(λ) .
Advsnd
resp. Advss
3 Multi-Signature Schemes
3.1 Syntax
A multi-signature scheme MS consists of these algorithms:
– par ← MS.Setup(1λ): the setup algorithm takes the security parameter and returns public
– (sk, vk) ← MS.KeyGen(par): the key generation algorithm takes the public parameters and
parameters par;
returns a secret key sk and a veriﬁcation key vk;
11
Game SNDA
Π,R(λ)
crs ← Π.Setup(1λ)
(s, π) ← A(crs)
return s /∈ LR ∧ Π.Ver(crs, s, π)
Π,R(λ)
Game SSA
(crs, τ) ← Π.SimSetup(1λ) ; Q ··= ( )
(s, π) ← ASimProve(crs)
return (s, π) /∈ Q ∧ s /∈ LR ∧ Π.Ver(crs, s, π)
Oracle SimProve(s)
π ← Π.SimPrv(crs, τ, s)
Q ··= Qk(s, π)
return π
Fig. 3. The soundness and simulation-soundness games for a proof system Π.
– σ ← hMS.Sign(par, V, m, sk1), . . . , MS.Sign(par, V, m, skn
)i is an interactive protocol run
by all the cosigners. Each signer runs the protocol on common inputs the public parameters
par, a message m, and a multiset V of all participants’ veriﬁcation key {vki}n
i=1 and on
secret input its own secret key ski
; each participant obtains a signature σ as common
output;
– b ← MS.Ver(par, V, m, σ): the (deterministic) veriﬁcation algorithm takes public parameters
par, a multiset V of veriﬁcation keys, a message m, and a signature σ and returns a bit
b ∈ {0, 1}.
Correctness. A multi-signature scheme is correct if for every λ, every message m, and every
integer n,
Pr
par ← MS.Setup(1λ)
) ← MS.KeyGen(par), i = 1 . . . n ; V ··= {vki}n
(ski, vki
i=1
σ ← hMS.Sign(par, V, m, sk1), . . . , MS.Sign(par, V, m, skn
b ← MS.Ver(par, V, m, σ)
)i
: b = 1
is negligibly close to 1.
3.2 Security
The security model for a multi-signature scheme in the plain public-key model [BN06] requires,
informally, that it be infeasible for an attacker to forge multi-signatures involving the veriﬁcation
key of at least one honest signer. The security game proceeds as follows. The game generates
keys (sk1, vk1) for the honest signer. The adversary gets vk1 and can start and engage in
(concurrent) instances of the signing protocol with the honest signer for arbitrary messages m
and arbitrary multisets of veriﬁcation keys V such that vk1 ∈ V. Since we work in the plain
public-key model, the adversary can choose other keys in V arbitrarily, in particular it can
copy vk1. Eventually, it returns a multiset of veriﬁcation keys V, a message m, and a signature
σ. The adversary wins if σ is a correct signature for (V, m), vk1 ∈ V, and the adversary never
started an instance of the signing protocol for the pair (V, m). Again, other veriﬁcation keys
in V can be arbitrary (in particular, vk1 can appear multiple times).
12
MS(λ)
Game EUF-CMAA
par ← MS.Setup(λ)
(sk1, vk1) ← MS.KeyGen(par)
// honest signer has index ’1’
Q ··= ( )
(V, m, σ) ← ASign(par, vk1)
return vk1 ∈ V ∧ (V, m) /∈ Q ∧ MS.Ver(par, V, m, σ) = 1
Oracle Sign(V, m)
if vk1 /∈ V then return ⊥
// honest signer must be in the multiset
execute MS.Sign(par, V, m, sk1)
// update Q
Q ··= Qk(V, m)
Fig. 4. The EUF-CMA security game for a multi-signature scheme MS.
Deﬁnition 4 (EUF-CMA). Let game EUF-CMA be as deﬁned in Fig. 4. A multi-signature
scheme MS is existentially unforgeable under chosen-message attacks (EUF-CMA-secure) if
for any p.p.t. adversary A,
Adveuf-cma
MS,A (λ) ··= Prh1 ← EUF-CMAA
MS(λ)i = negl(λ) .
3.3 Additional Security of Deterministic Signing
If the signing protocol MS.Sign is fully deterministic in its inputs par, V, m, ski
security implies security against additional attacks of practical relevance.
, then EUF-CMA
Failures in Randomness Generation. A deterministic signing protocol is trivially un-
aﬀected by failures in external randomness sources, e.g., system PRGs, because it does not
access such sources.
Rewinding Attacks. A deterministic signing protocol prevents state rewinding attacks.
Observe that an EUF-CMA adversary who is given the additional capability of rewinding
the honest signer in any chosen signing session to just before some chosen round j can be
simulated by an ordinary EUF-CMA adversary that simply opens an additional second session
with the honest user (on the same inputs) and replays rounds 1 to j − 1 from the ﬁrst session
in the second session. Since the honest signer is fully deterministic, it will reach the same
internal state in the second session just before round j as it did previously in the ﬁrst session.
4 Description of MuSig-DN
In this section, we give a detailed description of the MuSig-DN scheme, which is a modiﬁcation
of MuSig to support deterministic nonce generation.
Let GrGen be a group generation algorithm and GrGen0 be a (t, ε)-companion group
generation algorithm for some t ∈ poly(λ) and ε ∈ negl(λ). Given (p, G, G) ∈ [GrGen(1λ)]
and (q, E, P, f) ∈ [GrGen0(p)], let KeyDer be a PRNG with key space {0, 1}λ and range
Fp × Zq × {0, 1}λ, let KeyDer0, KeyDer00, and KeyDer000 be the projections of KeyDer onto
respectively its ﬁrst, second and third output component, let RandDer be a PRF with key
13
space {0, 1}λ, input space {0, 1}∗, and range {0, 1}λ, let Hagg and Hsig be hash functions from
{0, 1}∗ to Fp and Hnon be a hash function from {0, 1}∗ to E, and let Π be a NIZK proof system
whose prover algorithm Π.Prv needs at most λ bits of randomness and which is zero-knowledge
and simulation-sound for the relation
R = {((p, G, G, q, E, P, f,F, U, V, R), u) : U, V ∈ E \ F ∧ U = uP ∧ R = f(uV )G},
(2)
where F is a set of exceptional group elements negligibly small in E on which the prover
algorithm is allowed to fail. We will omit p, G, G, q, E, P, f,F when they are clear from the
context. Looking ahead, the set F will allow us to construct a simpler and more eﬃcient proof
system, and the concrete set F that we will use in our proof system is eﬃciently recognizable
such that the veriﬁer algorithm can trivially reject any statement with group elements in F
(see Sections 5 and 6).
We deﬁne the scheme MS ··= MuSig-DN[GrGen, GrGen0, KeyDer, RandDer, Π,F] as follows
(see also Fig. 5 for a pure pseudocode description).
Setup. On input 1λ, the setup algorithm MS.Setup runs (p, G, G) ← GrGen(1λ), (q, E, P, f) ←
GrGen0(p), and crs ← Π.Setup(1λ) and returns par ··= (p, G, G, q, E, P, f, crs).
Key generation. On input par = (p, G, G, q, E, P, f, crs), the key generation algorithm MS.KeyGen
draws a secret key sk ←${0, 1}λ and computes x ··= KeyDer0(sk) (called signature key) and
the veriﬁcation key X ··= xG; it returns sk and vk ··= X.
Signing. Let sk1, x1 = KeyDer0(sk1), and X1 = x1G be respectively the secret key, the signature
key, and the veriﬁcation key of the local signer, let m be the message to sign, let X2, . . . , Xn
of all participants’ veriﬁcation keys.7 The signer ﬁrst computes the aggregate key eX as
be the veriﬁcation keys of the other cosigners, and let X ··= {X1, . . . , Xn} be the multiset
follows:
eX ··=Pn
µi ··= Hagg(X, Xi),
i=1 µiXi.
1 ≤ i ≤ n
It computes its nonce key u1 ··= KeyDer00(sk1) and the corresponding host key U1 ··=
u1P and sends U1 to all other cosigners. Upon reception of other signers host keys Ui,
2 ≤ i ≤ n, it computes V ··= Hnon(K, m) with multiset K ··= {(X1, U1), . . . , (Xn, Un)},8
it computes r1 ··= f(u1V ), R1 ··= r1G, and k ··= KeyDer000(sk1), derives randomness
ρ ··= RandDer(k, (K, m)), generates a NIZK proof
π1 ··= Π.Prv(crs, (U1, V, R1), u1; ρ),
and sends (R1, π1) to all other cosigners. Upon reception of pairs (Ri, πi), 2 ≤ i ≤ n, from
other cosigners, the signer runs Π.Ver(crs, (Ui, V, Ri), πi) and aborts if any veriﬁcation does
not pass. Otherwise, it computes
eR ··=Pn
c ··= Hsig(eX, eR, m),
s1 ··= r1 + cµ1x1,
i=1 Ri,
7 Indices 1, . . . , n are local references to signers, and index 1 is w.l.o.g the index of the local signer.
8 We assume a canonical serialization of multisets, e.g., implemented by sorting and then serializing all elements.
14
MS.Setup(1λ)
(p, G, G) ← GrGen(1λ)
(q, E, P, f) ← GrGen0(p)
crs ← Π.Setup(1λ)
return par ··= (p, G, G, q, E, P, f, crs)
MS.KeyGen(par)
(p, G, G, q, E, P, f, crs) ··= par
sk ←${0, 1}λ
x ··= KeyDer0(sk) ; X ··= xG
vk ··= X
return (sk, vk)
(p, G, G, q, E, P, f, crs) ··= par
{X1, . . . , Xn} ··= X
MS.Ver(par, X, m, (eR, s))
eX ··=Pn
c ··= Hsig(eX,eR, m)
return (sG = eR + ceX)
i=1 Hagg(X, Xi)Xi
MS.Sign(par, X, m, sk1)
(p, G, G, q, E, P, f, crs) ··= par
x1 ··= KeyDer0(sk1) ; X1 ··= x1G
if X1 /∈ X then return ⊥
{X1, . . . , Xn} ··= X
µ1 ··= Hagg(X, X1)
eX ··=Pn
i=1 Hagg(X, Xi)Xi
i=1 Ri
eR ··=Pn
c ··= Hsig(eX,eR, m)
return (eR,Pn
i=1 si)
s1 ··= r1 + cµ1x1
send s1 ; receive (s2, . . . , sn)
u1 ··= KeyDer00(sk1) ; U1 ··= u1P
send U1 ; receive (U2, . . . , Un)
K ··= {(X1, U1), . . . , (Xn, Un)}
V ··= Hnon(K, m)
W ··= u1V ; r1 ··= f(W ) ; R1 ··= r1G
k ··= KeyDer000(sk1) ; ρ ··= RandDer(k, (K, m))
π1 ··= Π.Prv(crs, (U1, V, R1), u1; ρ)
if π1 = ⊥ then return ⊥
send (R1, π1) ; receive ((R2, π2), . . . , (Rn, πn))
for i = 2 . . . n do
if Π.Ver(crs, (Ui, V, Ri), πi) = 0 then return ⊥
Fig. 5. The multi-signature scheme MS ··= MuSig-DN[GrGen, GrGen0, KeyDer, RandDer, Π,F].
it computes s =Pn
i=1 si. The signature is (eR, s).
and sends s1 to all other cosigners. Finally, upon reception of s2, . . . , sn from other cosigners,
a signature (eR, s), the veriﬁcation algorithm MS.Ver computes µi ··= Hagg(X, Xi) for
Veriﬁcation. On input a multiset of veriﬁcation keys X = {X1, . . . , Xn}, a message m, and
1 ≤ i ≤ n, eX ··= Pn
i=1 µiXi, c ··= Hsig(eX, eR, m) and returns 1 if sG = eR + ceX and 0
otherwise.
Deterministic Signing. The NIZK proof algorithm Π.Prv is in general probabilistic. To
obtain a fully deterministic signing protocol, which is robust against failures of external
randomness sources and secure against rewinding attacks (see Section 3.3), we derandomize
not only the generation of the nonce r1 but also Π.Prv by deriving its randomness ρ using the
PRF RandDer on the protocol inputs (K, m).
Stateless Signing. Security against rewinding attacks implies that unforgeability is guaran-
teed even in the case that signers do not have a secure non-resettable storage for keeping state
15
between the rounds of a single signing session. However, MuSig-DN with its fully deterministic
signing algorithm goes one step further: since all state in the signing protocol at a given point
in time can be recomputed from the protocol inputs and the messages received thus far, some
signers may be stateless, i.e., they do not need to keep state at all between the rounds of
signing session, not even for correct functionality. Instead, it suﬃces that only one of the
signers (or an untrusted third party) invokes the stateless signers by providing them with the
public inputs and all previously sent messages from the cosigners. For example, if signer 1 is
stateless, it is possible to ask it for its third-round message s1 by providing it with the public
inputs m, X and the previously sent messages ((Ui), Ri, πi)), 2 ≤ i ≤ n from the cosigners,
and signer 1 can simply replay the ﬁrst two rounds of the protocol internally to produce s1.