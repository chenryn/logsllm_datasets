```
6.  **拉取映像**:这个`hello-world`映像现在可以从新创建的 Docker 注册表中拉取了:
```
 $ sudo docker pull localhost:5000/hello-world 
 Using default tag: latest 
 latest: Pulling from hello-world 
 Digest: 
 sha256:a18ed77532f6d6781500db650194e0f9396ba5f0
 5f8b50d4046b294ae5f83aa4 
 Status: Downloaded newer image for localhost:5000/
 hello-world:latest 
```
7.  **停止 Docker 注册表并删除**:现在使用以下命令停止并删除 Docker 注册表:
```
 $ sudo docker stop registry && sudo docker \ 
 rm -v registry 
 registry 
 registry 
```
8.  **存储** : Docker 注册表将所有注册表数据作为 Docker 卷保留在主机文件系统上。Docker 卷可以安装在`/var/lib/registry`路径上，并使用以下命令指示 Docker 注册表指向该路径:
```
 $ sudo docker run -d -p 5000:5000 \ 
 --restart=always --name registry -v \
 `pwd`/data:/var/lib/registry registry:2 
 Unable to find image 'registry:2' locally 
 2: Pulling from library/registry 
 517dc3530502: Pull complete 
 Digest: sha256:1cfcd718fd8a49fec9ef16496940b962e30e
 3927012e851f99905db55f1f4199 
 Status: Downloaded newer image for registry:2 
 5c0ea3042397720eb487f1c3fdb9103ebb0d149421aa114a
 8c5a9133f775332a 
```
The storage drivers can be configured for `inmemory`, `s3`, `azure`, `swift`, `oss`, and `gcs`: [https://github.com/docker/distribution/blob/master/docs/storage-drivers/index.md](https://github.com/docker/docker.github.io/blob/master/registry/storage-drivers/index.md).
## 使用 SSL 证书在本地主机上运行 Docker 注册表
在本节中，我们将模拟使用 SSL 安全运行 Docker 注册表的概念。在本地主机上运行 Docker 注册表的当前场景中，需要使用 TLS 保护 Docker 引擎。
按照以下步骤安全运行 Docker 注册表:
1.  **获取证书**:我们将对 TLS 证书使用自签名证书。首先创建`certs`目录，然后运行`openssl`命令:
```
 $ mkdir certs
 $ openssl req -newkey rsa:4096 -nodes -sha256 \ 
 -keyout certs/domain.key -x509 -days 365 -out \ 
 certs/domain.crt 
 Generating a 4096 bit RSA private key 
 .....................++ 
 ........................................
 .........++ 
 writing new private key to 'certs/domain.key' 
 ----- 
 You are about to be asked to enter information 
 that will be incorporated into your certificate 
 request. 
 What you are about to enter is what is called a 
 Distinguished Name or a DN. 
 There are quite a few fields but you can leave 
 some blank 
 For some fields there will be a default value, 
 If you enter '.', the field will be left blank. 
 ----- 
 Country Name (2 letter code) [AU]:US 
 State or Province Name (full name) [Some-State]: 
 Locality Name (eg, city) []: 
 Organization Name (eg, company) 
 [Internet Widgits Pty Ltd]: 
 Organizational Unit Name (eg, section) []: 
 Common Name (e.g. server FQDN or YOUR name) 
 []:myregistrydomain.com 
 Email Address []: 
 $ 
```
2.  将`certs`目录复制到`/usr/local/share/ca-certificates`路径下的 Ubuntu 16.o4 的证书目录。此路径特定于 Ubuntu (Debian)系统，如果使用红帽系统，您可能需要使用不同的路径:
```
 $ sudo cp certs/domain.crt \
 /usr/local/share/ca-certificates/myregistrydomain.com.crt 
 $ sudo update-ca-certificates
```
同时将`domain.crt`文件复制到`/etc/docker/certs.d/myregistrydomain.com:5000/ca.crt`中。
Ensure to create the `certs.d` and `myregistrydomain.com:5000` directories before running the preceding command.
3.  重新启动 Docker 引擎:
```
 $ sudo service docker restart 
```
4.  Docker 注册表可以在安全模式下启动，如下所示:
```
 $ sudo docker run -d -p 5000:5000 \ 
 --restart=always --name registry \ 
 > -v `pwd`/certs:/certs 
 > -e REGISTRY_HTTP_TLS_CERTIFICATE=
 /certs/domain.crt 
 > -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key 
 > registry:2 
 Unable to find image 'registry:2' locally 
 2: Pulling from library/registry 
 c0cb142e4345: Pull complete 
 a5002dfce871: Pull complete 
 df53ce740974: Pull complete 
 Digest: sha256:1cfcd718fd8a49fec9ef16496940b962e30e
 3927012e851f99905db55f1f4199 
 Status: Downloaded newer image for registry:2 
 d7c41de81343313f6760c2231c037008581adf07acceea
 0b3372ec2c05a5a321 
 $ 
```
5.  现在，您应该能够从远程 Docker 主机推送映像:
```
 docker pull ubuntu 
 docker tag ubuntu myregistrydomain.com:5000/ubuntu 
```
通过添加`127.0.0.1 myregistrydomain.com`更新`/etc/hosts`，将`myregistrydomain.com`指向本地主机(`127.0.0.1`)。
```
 docker push myregistrydomain.com:5000/ubuntu 
 docker pull myregistrydomain.com:5000/ubuntu 
```
## 运行带有限制的 Docker 注册表
Docker 注册表的安全性至关重要。建议您在安全网络中的安全防火墙和**入侵防护系统** ( **IPS** ) / **入侵防御系统** ( **IDS** )后面运行。此外，假设注册管理机构将只接受 HTTPS 的安全连接。除此之外，Docker Registry 还可以提供访问限制，实现这一点的最简单方法是通过基本身份验证。基本身份验证是使用登录名和密码的 web 服务器的标准身份验证:
```
$ mkdir auth
$ sudo docker run --entrypoint htpasswd 
registry:2 -Bbn testvinod testpassword > auth/htpasswd
$
```
这里我们列出了安全访问 Docker 注册表需要完成的步骤:
1.  由于我们在安全模式下运行此注册表，请使用自签名证书并启用 TLS。
2.  此外，重新启动 Docker 进程以获取更新的配置。
3.  现在重新运行注册表，并确保当前运行的注册表已停止:
```
 $ sudo docker run -d -p 5000:5000 --restart=always \
 --name registry \
 > -v `pwd`/auth:/auth 
 > -e "REGISTRY_AUTH=htpasswd" 
 > -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" 
 > -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd 
 > -v `pwd`/certs:/certs 
 > -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt 
 > -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key 
 > registry:2
```
4.  用户需要从远程计算机登录来测试注册表用户身份验证:
```
 $ sudo docker login myregistrydomain.com:5000 
 Username: testuser 
 Password:testpassword 
 Login Succeeded 
```
5.  从远程机器上推拉映像:
```
 $ sudo docker pull ubuntu 
 Using default tag: latest 
 latest: Pulling from library/ubuntu 
 cad964aed91d: Pull complete 
 3a80a22fea63: Pull complete 
 Digest: sha256:28d4c5234db8d5a634d5e621c363d900f8f241240ee0a6a978784c978fe9c737 
 Status: Downloaded newer image for ubuntu:latest 
 ubuntu@ip-172-30-0-126:~$ sudo docker tag ubuntu 
 myregistrydomain.com:5000/ubuntu 