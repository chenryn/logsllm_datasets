# 原文链接
# The Il Nop 随便说点IL
## 什么是IL/IR?
IL是中间语言的缩写，IR则是中间表示的缩写。中间表示是我们在计算机程序从一个状态转移到另外一个状态时的存储方式，比如从源代码到编译后的二进制文件，中间语言是IR使用的一种语言，用来把程序的语义进行编码，以方便之后的分析。其实这两种属于常常混用。
## 休斯顿总部！我们这出现了问题！
我对[Falcon IL](https://github.com/falconre/falcon)有个问题，是时候来做点改变了。
Falcon将二进制代码提升到一种叫做[Falcon
IL](https://docs.rs/falcon/0.3.1/falcon/il/index.html)的中间语言，这时一种比较简单的中间语言，不过倒是囊括了指令语义和控制流。我用Falcon来实现可以在x86和MIPS二进制上用的静态分析和符号执行工具。
在我打算给Falcon IL做点改变之前，我决定写一篇文章讲讲Falcon
IL的历史，我会讲讲我做的一些决定，哪些事情做起来效果比较好，哪些不太好，以及有哪些已经改变了。
## 在最开始的时候
Falcon
IL并不是我第一个实现的IL，[我第一个IL](https://github.com/endeav0r/rnp_see/blob/master/src/instruction.h)几乎完全就是[RREIL](http://www2.in.tum.de/bib/files/sepp11precise.pdf)的复制品，主要包括了独立的指令语义，但是不包括控制流。[Queso](https://github.com/endeav0r/queso)是另外一个二进制分析框架，不过现在放弃维护了，也包括一个它自己的IL，这次的IL会把程序完全提升成控制流图来做静态符号执行。[Binary
Toolkit](https://github.com/endeav0r/bt/)是一个实验性质的动态二进制插桩引擎，也实现了它自己的IL，叫做[Bins](https://github.com/endeav0r/bt/blob/master/src/bt/bins.h)，也就是Binary
toolkit INStruction.
我其实还是比较喜欢Angr的[pyvex](https://github.com/angr/pyvex)里用的VEX IR的，以及一直很流行的[LLVM
IR](https://llvm.org/)，虽然LLVM
IR更多是为了表示源码级的程序而不是二进制级的，[McSema](https://github.com/trailofbits/mcsema)和[s2e](https://github.com/trailofbits/mcsema)找了一些方法来把LLVM
IR用到二进制程序上。我用过[BAP
IL](https://github.com/BinaryAnalysisPlatform/bap)，现在通过我在ForAllSecure的工作，以及我使用BAP
IL的经验，我终于有了对Falcon的一个初步的设计决策。以及和以前一样，我也发现[binary
ninja](https://binary.ninja/)的LLIL和MLIL对于想快速开始工作还是很好的（我自己也几周前写了一个MLIL的工具）。
但是等到我自己来实现Falcon的IL的时候，我发现我还是需要仔细思考一下需要做什么，以及我到底需要什么。
### 通过指令数来看IL
IL可以通过他们实现了多少种类的指令来画个图,那么RREIL可能是最简单的一种了，它用了一种three
form形式的IL，也就是说（几乎）所有的指令都是`OP, DST, LHS, RHS`的形式。比如一个RREIL的加法指令就是`ADD RAX, RAX,
7`。在RREIL里是没有表达式的，只有指令，它的IL本身也被设计为使得指令的数量越少越好。
与其相对的则是VEX IR。Vex ir并不是针对程序分析所设计，Vex
ir被设计为使得[valgrind](http://valgrind.org/)可以快速运行。VEX
IR有上百条指令种类，允许valgrind去针对插桩代码用最优的指令，以求指令执行速度更快。VEX
IR的吸引力来源于它的完全性，以及价格（GPL），虽然要将其调整为便于程序分析的目的可能会比较麻烦，毕竟有上百条指令种类。
在中间的就有BAP IL，LLVM IR和Binary ninja的IL，这些指令都支持表达式，通过表达式我们就可以有`a = b * (c +
7)`，而没有表达式我们就需要: `temp0 = c + 7; a = b +
temp0`，看起来就比较恶心了。在我看来，表达式用起来还是比较简单的，和three
form的IL一样简单，表达式的变形和简化可以一次性写完，并且到处使用。
所有的这些IL，从RREIL到Binary Ninja的IL，都被设计为保存同样的信息，他们只是表达信息的方式不同，比如一种IL可能会用`ADD DST,
LHS, RHS`而另外一种用`DST = (LHS + RHS)`，但是他们的语义还是保持一样的。
所以在一种IL里哪种算是一条指令，以及哪个IL具有最多的指令数呢？我相信一个IL里的一条指令告诉我们数据会怎样被处理和移动，不过我也知道这并不是一个完全的定义。赋值，读取，存储，跳转都是基本指令类型。
以赋值为例，比如`DST = LHS OP RHS`，其中`OP ∈ {ADD, SUB, MUL}`，其实与`ADD DST, LHS, RHS, SUB
DST, LHS, RHS, and MUL DST, LHS,
RHS`一样，他们总归都是赋值，但是一种形式允许我们编码很多种不同的操作类型，而另外一种就需要根据操作来选择不同的赋值指令类型，相对来说我更喜欢前面一种。
对Falcon来说，我想设计一种简单的，基于表达式的IL，我最开始设计出了5种操作类型：
  * Assign { dst: Scalar, src: Expression }
  * Store { index: Expression, src: Expression }
  * Load { dst: Scalar, src: Expression }
  * Branch { target: Expression }
  * Raise { expr: Expression }
`Expression`一开始包括这些值:
  * Scalar(scalar)
  * Constant(constant)
  * Add(lhs, rhs)
  * Sub(lhs, rhs)
  * Mul(lhs, rhs)
  * Divu(lhs, rhs)
  * Modu(lhs, rhs)
  * Divs(lhs, rhs)
  * Mods(lhs, rhs)
  * And(lhs, rhs)
  * Or(lhs, rhs)
  * Shl(lhs, rhs)
  * Shr(lhs, rhs)
  * Cmpeq(lhs, rhs)
  * Cmpneq(lhs, rhs)
  * Cmplts(lhs, rhs)
  * Cmpltu(lhs, rhs)
  * Trun(bits, rhs)
  * Sext(bits, rhs)
  * Zext(bits, rhs)
scalar的类型是Scalar，constant的类型是Constant，lhs的类型是Expression，rhs的类型是Expression，bits的类型是usize。
每一个`Instruction`都保存了一个`Operation`，以及一些其他的信息，比如这个`Operation`在解码前的地址，可选的注释，一个在一个`Block`中的位置。`Block`和`Edge`组成了一个`ControlFlowGraph`，从里面我们可以就有`Function`，之后有`Program`。
[这里是Falcon原始IL的引用](https://docs.rs/falcon/0.2.0/falcon/il/index.html)
### 通过可读性看IL
Binary
Ninja是第一个我知道的可读的IL，如果你花点时间在逆向工程里看IL，这种感觉就很像你朋友的侄子上Java导论课上的很费劲，然后他很确定他写的找一个数组里最大值的程序是完整的，但是他还是碰到了一点问题，然后这是他可能从来没被教用空格的300行代码，变量名大概都是`all_the_variablesLookLike_THIS`这样，这个时候你还需要去读这段程序。可以说，非常蛋疼。
RREIL是不可读的，VEX IR也不可读，在我有了一些Binary Ninja IL的经验之后，我想要一个可读的IL，这是我现在Falcon
IL的一些示例：
    [ Block: 0x0 ]
    804849B 00 exc:32 = (esp:32 + 0x4:32)
    804849F 01 temp_0.0:32 = (esp:32 & 0xFFFFFFF0:32)
    804849F 02 ZF:1 = (temp_0.0:32 == 0.0:32)
    804849F 03 SF:1 = trun.1((temp_0.0:32 >> 0x1F:32))