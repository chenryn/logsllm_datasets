ZERO TRUST ARCHITECTURE 
16 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
Figure 5: Resource Portal Model 
The primary benefit of this model over the others is that a software component does not need to 
be installed on all client devices. This model is also more flexible for BYOD policies and inter-
organizational collaboration projects. Enterprise administrators do not need to ensure that each 
device has the appropriate device agent before use. However, limited information can be inferred 
from devices requesting access. This model can only scan and analyze assets and devices once 
they connect to the PEP portal and may not be able to continuously monitor them for malware, 
unpatched vulnerabilities, and appropriate configuration.  
The main difference with this model is there is no local agent that handles requests, and so the 
enterprise may not have full visibility or arbitrary control over assets as it can only see/scan them 
when they connect to a portal. The enterprise may be able to employ measures such as browser 
isolation to mitigate or compensate. These assets may be invisible to the enterprise between these 
sessions. This model also allows attackers to discover and attempt to access the portal or attempt 
a denial-of-service (DoS) attack against the portal. The portal systems should be well-
provisioned to provide availability against a DoS attack or network disruption. 
3.2.4 Device Application Sandboxing 
Another variation of the agent/gateway deployment model is having vetted applications or 
processes run compartmentalized on assets. These compartments could be virtual machines, 
containers, or some other implementation, but the goal is the same: to protect the application or 
instances of applications from a possibly compromised host or other applications running on the 
asset.  
NIST SP 800-207 
ZERO TRUST ARCHITECTURE 
17 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
Figure 6: Application Sandboxes 
In Figure 6, the subject device runs approved, vetted applications in a sandbox. The applications 
can communicate with the PEP to request access to resources, but the PEP will refuse requests 
from other applications on the asset. The PEP could be an enterprise local service or a cloud 
service in this model. 
The main advantage of this model variant is that individual applications are segmented from the 
rest of the asset. If the asset cannot be scanned for vulnerabilities, these individual, sandboxed 
applications may be protected from a potential malware infection on the host asset. One of the 
disadvantages of this model is that enterprises must maintain these sandboxed applications for all 
assets and may not have full visibility into client assets. The enterprise also needs to make sure 
each sandboxed application is secure, which may require more effort than simply monitoring 
devices.  
3.3 
Trust Algorithm 
For an enterprise with a ZTA deployment, the policy engine can be thought of as the brain and 
the PE’s trust algorithm as its primary thought process. The trust algorithm (TA) is the process 
used by the policy engine to ultimately grant or deny access to a resource. The policy engine 
takes input from multiple sources (see Section 3): the policy database with observable 
information about subjects, subject attributes and roles, historical subject behavior patterns, 
threat intelligence sources, and other metadata sources. The process can be grouped into broad 
categories and visualized in Figure 7. 
NIST SP 800-207 
ZERO TRUST ARCHITECTURE 
18 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
Figure 7: Trust Algorithm Input 
In the figure, the inputs can be broken into categories based on what they provide to the trust 
algorithm.   
• Access request: This is the actual request from the subject. The resource requested is the 
primary information used, but information about the requester is also used. This can 
include OS version, software used (e.g., does the requesting application appear on a list 
of approved applications?), and patch level. Depending on these factors and the asset 
security posture, access to assets might be restricted or denied. 
• Subject database: This is the “who” that is requesting access to a resource [SP800-63]. 
This is the set of subjects (human and processes) of the enterprise or collaborators and a 
collection of subject attributes/privileges assigned. These subjects and attributes form the 
basis of policies for resource access [SP800-162] [NISTIR 7987]. User identities can 
include a mix of logical identity (e.g., account ID) and results of authentication checks 
performed by PEPs. Attributes of identity that can be factored into deriving the 
confidence level include time and geolocation. A collection of privileges given to 
multiple subjects could be thought of as a role, but privileges should be assigned to a 
subject on an individual basis and not simply because they may fit into a particular role in 
the organization. This collection should be encoded and stored in an ID management 
system and policy database. This may also include data about past observed subject 
behavior in some (TA) variants (see Section 3.3.1). 
• Asset database (and observable status): This is the database that contains the known 
status of each enterprise-owned (and possibly known nonenterprise/BYOD) asset 
(physical and virtual, to some extent). This is compared to the observable status of the 
asset making the request and can include OS version, software present, and its integrity, 
NIST SP 800-207 
ZERO TRUST ARCHITECTURE 
19 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
location (network location and geolocation), and patch level. Depending on the asset state 
compared with this database, access to assets might be restricted or denied. 
• Resource requirements: This set of policies complements the user ID and attributes 
database [SP800-63] and defines the minimal requirements for access to the resource. 
Requirements may include authenticator assurance levels, such as MFA network location 
(e.g., deny access from overseas IP addresses), data sensitivity, and requests for asset 
configuration. These requirements should be developed by both the data custodian (i.e., 
those responsible for the data) and those responsible for the business processes that 
utilize the data (i.e., those responsible for the mission). 
• Threat intelligence: This is an information feed or feeds about general threats and active 
malware operating on the internet. This could also include specific information about 
communication seen from the device that may be suspect (such as queries for possible 
malware command and control nodes). These feeds can be external services or internal 
scans and discoveries and can include attack signatures and mitigations. This is the only 
component that will most likely be under the control of a service rather than the 
enterprise. 
The weight of importance for each data source may be a proprietary algorithm or may be 
configured by the enterprise. These weight values can be used to reflect the importance of the 
data source to an enterprise.  
The final determination is then passed to the PA for execution. The PA’s job is to configure the 
necessary PEPs to enable authorized communication. Depending on how the ZTA is deployed, 
this may involve sending authentication results and connection configuration information to 
gateways and agents or resource portals. PAs may also place a hold or pause on a 
communication session to reauthenticate and reauthorize the connection in accordance with 
policy requirements. The PA is also responsible for issuing the command to terminate the 
connection based on policy (e.g., after a time-out, when the workflow has been completed, due to 
a security alert). 
3.3.1 Trust Algorithm Variations 
There are different ways to implement a TA. Different implementers may wish to weigh the 
above factors differently according to the factors’ perceived importance. There are two other 
major characteristics that can be used to differentiate TAs. The first is how the factors are 
evaluated, whether as binary decisions or weighted parts of a whole “score” or confidence level. 
The second is how requests are evaluated in relation to other requests by the same subject, 
application/service, or device.  
• Criteria- versus score-based: A criteria-based TA assumes a set of qualified attributes 
that must be met before access is granted to a resource or an action (e.g., read/write) is 
allowed. These criteria are configured by the enterprise and should be independently 
configured for every resource. Access is granted or an action applied to a resource only if 
all the criteria are met. A score-based TA computes a confidence level based on values 
for every data source and enterprise-configured weights. If the score is greater than the 
configured threshold value for the resource, access is granted, or the action is performed. 
NIST SP 800-207 
ZERO TRUST ARCHITECTURE 
20 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
Otherwise, the request is denied, or access privileges are reduced (e.g., read access is 
granted but not write access for a file). 
• Singular versus contextual: A singular TA treats each request individually and does not 
take the subject history into consideration when making its evaluation. This can allow 
faster evaluations, but there is a risk that an attack can go undetected if it stays within a 
subject’s allowed role. A contextual TA takes the subject or network agent’s recent 
history into consideration when evaluating access requests. This means the PE must 
maintain some state information on all subjects and applications but may be more likely 
to detect an attacker using subverted credentials to access information in a pattern that is 
atypical of what the PE sees for the given subject. This also means that the PE must be 
informed of user behavior by the PA (and PEPs) that subjects interact with when 
communicating. Analysis of subject behavior can be used to provide a model of 
acceptable use, and deviations from this behavior could trigger additional authentication 
checks or resource request denials. 
The two factors are not always dependent on each other. It is possible to have a TA that assigns a 
confidence level to every subject and/or device and still considers every access request 
independently (i.e., singular). However, contextual, score-based TAs would provide the ability to 
offer more dynamic and granular access control, since the score provides a current confidence 
level for the requesting account and adapts to changing factors more quickly than static policies 
modified by human administrators.  
Ideally, a ZTA trust algorithm should be contextual, but this may not always be possible with the 
infrastructure components available to the enterprise. A contextual TA can mitigate threats 
where an attacker stays close to a “normal” set of access requests for a compromised subject 
account or insider attack. It is important to balance security, usability, and cost-effectiveness 
when defining and implementing trust algorithms. Continually prompting a subject for 
reauthentication against behavior that is consistent with historical trends and norms for their 
mission function and role within the organization can lead to usability issues. For example, if an 
employee in the HR department of an agency normally accesses 20 to 30 employee records in a 
typical workday, a contextual TA may send an alert if the access requests suddenly exceed 100 
records in a day. A contextual TA may also send an alert if someone is making access requests 
after normal business hours as this could be an attacker exfiltrating records by using a 
compromised HR account. These are examples where a contextual TA can detect an attack 
whereas a singular TA may fail to detect the new behavior. In another example, an accountant 
who typically accesses the financial system during normal business hours is now trying to access 
the system in the middle of the night from an unrecognizable location. A contextual TA may 
trigger an alert and require the subject to satisfy a more stringent confidence level or other 
criteria as outlined in NIST Special Publication 800-63A [SP800-63A]. 
Developing a set of criteria or weights/threshold values for each resource requires planning and 
testing. Enterprise administrators may encounter issues during the initial implementation of ZTA 
where access requests that should be approved are denied due to misconfiguration. This will 
result in an initial “tuning” phase of deployment. Criteria or scoring weights may need to be 
adjusted to ensure that the policies are enforced while still allowing the enterprise’s business 
processes to function. How long this tuning phase lasts depends on the enterprise-defined metrics 
NIST SP 800-207 
ZERO TRUST ARCHITECTURE 
21 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
for progress and tolerance for incorrect access denials/approvals for the resources used in the 
workflow.  
3.4 
Network/Environment Components 
In a ZT environment, there should be a separation (logical or possibly physical) of the 
communication flows used to control and configure the network and application/service 
communication flows used to perform the actual work of the organization. This is often broken 
down to a control plane for network control communication and a data plane for 
application/service communication flows [Gilman]. 
The control plane is used by various infrastructure components (both enterprise-owned and from 
service providers) to maintain and configure assets; judge, grant, or deny access to resources; and 
perform any necessary operations to set up communication paths between resources. The data 
plane is used for actual communication between software components. This communication 
channel may not be possible before the path has been established via the control plane. For 
example, the control plane could be used by the PA and PEP to set up the communication path 
between the subject and the enterprise resource. The application/service workload would then 
use the data plane path that was established.   
3.4.1 Network Requirements to Support ZTA 
1. Enterprise assets have basic network connectivity. The local area network (LAN), 
enterprise controlled or not, provides basic routing and infrastructure (e.g., DNS). The 
remote enterprise asset may not necessarily use all infrastructure services. 
2. The enterprise must be able to distinguish between what assets are owned or 
managed by the enterprise and the devices’ current security posture. This is 
determined by enterprise-issued credentials and not using information that cannot be 
authenticated information (e.g., network MAC addresses that can be spoofed).  
3. The enterprise can observe all network traffic. The enterprise records packets seen on 
the data plane, even if it is not be able to perform application layer inspection (i.e., OSI 
layer 7) on all packets. The enterprise filters out metadata about the connection (e.g., 
destination, time, device identity) to dynamically update policies and inform the PE as it 
evaluates access requests. 
4. Enterprise resources should not be reachable without accessing a PEP. Enterprise 
resources do not accept arbitrary incoming connections from the internet. Resources 
accept custom-configured connections only after a client has been authenticated and 
authorized. These communication paths are set up by the PEP. Resources may not even 
be discoverable without accessing a PEP. This prevents attackers from identifying targets 
via scanning and/or launching DoS attacks against resources located behind PEPs. Note 
that not all resources should be hidden this way; some network infrastructure components 
(e.g., DNS servers) must be accessible.  
5. The data plane and control plane are logically separate. The policy engine, policy 
administrator, and PEPs communicate on a network that is logically separate and not 
directly accessible by enterprise assets and resources. The data plane is used for 
NIST SP 800-207 
ZERO TRUST ARCHITECTURE 
22 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
application/service data traffic. The policy engine, policy administrator, and PEPs use the 
control plane to communicate and manage communication paths between assets. The 
PEPs must be able to send and receive messages from both the data and control planes. 
6. Enterprise assets can reach the PEP component. Enterprise subjects must be able to 
access the PEP component to gain access to resources. This could take the form of a web 
portal, network device, or software agent on the enterprise asset that enables the 
connection.  
7. The PEP is the only component that accesses the policy administrator as part of a 
business flow. Each PEP operating on the enterprise network has a connection to the 
policy administrator to establish communication paths from clients to resources. All 
enterprise business process traffic passes through one or more PEPs.  
8. Remote enterprise assets should be able to access enterprise resources without 
needing to traverse enterprise network infrastructure first. For example, a remote 
subject should not be required to use a link back to the enterprise network (i.e., virtual 
private network [VPN]) to access services utilized by the enterprise and hosted by a 
public cloud provider (e.g., email). 
9. The infrastructure used to support the ZTA access decision process should be made 
scalable to account for changes in process load. The PE(s), PA(s), and PEPs used in a 
ZTA become the key components in any business process. Delay or inability to reach a 
PEP (or inability of the PEPs to reach the PA/PE) negatively impacts the ability to 
perform the workflow. An enterprise implementing a ZTA needs to provision the 
components for the expected workload or be able to rapidly scale the infrastructure to 
handle increased usage when needed. 
10. Enterprise assets may not be able to reach certain PEPs due to policy or observable 
factors. For example, there may be a policy stating that mobile assets may not be able to 
reach certain resources if the requesting asset is located outside of the enterprise’s home 
country. These factors could be based on location (geolocation or network location), 
device type, or other criteria. 
NIST SP 800-207 
ZERO TRUST ARCHITECTURE 
23 
This publication is available free of charge from: https://doi.org/10.6028/NIST.SP.800-207 
4 
Deployment Scenarios/Use Cases 
Any enterprise environment can be designed with zero trust tenets in mind. Most organizations 
already have some elements of zero trust in their enterprise infrastructure or are on their way 
through implementation of information security and resiliency policies and best practices. 
Several deployment scenarios and use cases lend themselves readily to a zero trust architecture. 
For instance, ZTA has its roots in organizations that are geographically distributed and/or have a 
highly mobile workforce. That said, any organization can benefit from a zero trust architecture. 
In the use cases below, ZTA is not explicitly indicated since the enterprise likely has both 
perimeter-based and possibly ZTA infrastructures. As discussed in Section 7.2, there will likely 
be a period when ZTA components and perimeter-based network infrastructure are concurrently 
in operation in an enterprise. 
4.1 
Enterprise with Satellite Facilities 
The most common scenario involves an enterprise with a single headquarters and one or more 
geographically dispersed locations that are not joined by an enterprise-owned physical network 
connection (see Figure 8). Employees at the remote location may not have a full enterprise-
owned local network but still need to access enterprise resources to perform their tasks. The 
enterprise may have a Multiprotocol Label Switch (MPLS) link to the enterprise HQ network but 
may not have adequate bandwidth for all traffic or may not wish for traffic destined for cloud-
based applications/services to traverse through the enterprise HQ network. Likewise, employees 
may be teleworking or in a remote location and using enterprise-owned or personally-owned 
devices. In such cases, an enterprise may wish to grant access to some resources (e.g., employee 
calendar, email) but deny access or restrict actions to more sensitive resources (e.g., HR 
database). 