171.66.128.0/24
171.66.129.0/24
171.66.130.0/24
# of OUT # of non-
blocking
# of IN
blocking (e.g., host down) blocking
# of unknown
...
0
0
0
...
4
0
5
...
232
199
228
...
0
0
0
...
20
53
24
...
248
252
247
...
0
0
0
...
0
0
0
instead of ’*.stanford.edu’. These IP blocks appear to be
used for the Stanford University Press, which likely requires
more admissive SMTP trafﬁc policies.
3. Legitimate mail servers residing in the preﬁx, some-
times even co-located with a blocking /24 preﬁx. For
example, we found that in a university preﬁx 128.118.1.0/24
contains several machines allowing outbound SMTP trafﬁc,
which are legitimate mail servers according to the MX
records. Other than these machines, however, 28 other hosts
are blocked for OUT trafﬁc (The rest did not respond),
indicating that the policy made exceptions for these mail
server machines.
Spamhaus PBL:
3) Correlation with
Spamhaus
PBL [37] is a popular blacklist widely used for identifying
IP or IP ranges that should not deliver unauthenticated
SMTP emails. The list includes both dynamic and static
IP ranges and is gathered either from ISPs (ISP operators
may volunteer to contribute to the list) or through other
analysis. We are curious to know if the blocking preﬁxes
we identiﬁed are already on PBL. If so, even if triangular
spamming were used, they will still eventually be blocked
at the mail servers (since the spoofed IP addresses fall into
PBL). Surprisingly, out of 666 preﬁxes, there are only 296
(44%) of them are listed on PBL. It is possible that ISPs
may think that since they already block the user IP ranges
for OUT port 25, there is no need to report these IP ranges
to PBL. However, with triangular spamming, this is not
the case. It is still useful to report these IP ranges to PBL
which can be considered as another layer of defense.
To understand what kind of preﬁxes is missed by PBL,
we studied three preﬁx types as described previously. Out of
23 blocking educational institutions, PBL only listed one of
them. We imagine the reason is that many universities have
departmental mail servers which are difﬁcult to be captured
in a large preﬁx. The only one university preﬁx that gets
on PBL is 130.18.78.0/23 where its DNS names are of the
form ts3.dialup.msstate.edu. For 466 blocking ISPs, only
194 of them are listed. For the remaining 176 unknowns,
101 are listed. This shows that preﬁxes without DNS names
have the highest listed ratio, indicating that they are more
likely to be bad preﬁxes. For ISP preﬁxes, we found that
PBL is still largely incomplete.
We summarize the ﬁndings from our extensive probing
based analysis. We found that most ISPs today are not
careful in blocking incoming SMTP trafﬁc (with source
port 25), despite some effort in reducing spam originated
from their networks by blocking outgoing trafﬁc destined
to port 25. This opens many preﬁxes as relay nodes in
triangular spamming scheme, resulting in these nodes par-
ticipating in spamming in a quite stealthy way. Our designed
probing methodology enables marking of speciﬁc preﬁxes
vulnerable to triangular spamming for subsequent detection
purposes.
IV. EXPERIENCE AND ANALYSIS ON TRIANGULAR
SPAMMING
The previous section shows that today’s network policies
allow the possibility of carrying out triangular spamming.
To better understand its operational model, as the next
step, we build an actual triangular spamming infrastructure
deployed in the Planetlab environment to explore various
tradeoffs. In particular, we focus on the following questions:
1. Does triangular spamming require signiﬁcant engineer-
ing effort and how easily can it be deployed (maliciously
installed) on the relay bot and/or original sender?
2. Does triangular spamming really work in the real world
(via Planetlab deployment)?
3. How much bandwidth utilization or throughput beneﬁt
can there be by using triangular spamming?
4. What property of the system can be leveraged for
detection?
A. Implementation
Figure 1 shows that triangular spamming requires two
separate components: one on the original sender and one
on the relay bot. We build both components under Linux.
Linux is chosen due to ease of development and deployment
on Planetlab testbed. The development effort involves about
1700 lines of C code for the original sender and about
700 lines of C code for the relay bot. For the component
on the original sender,
it can either be deployed on a
spammer-owned machine or some bot with good network
connectivity. One can imagine that the number of such
machines is likely smaller compared to common bots. For
example, based on the Torpig study [38], about 22% of the
infected hosts are in corporate networks that tend to have
better bandwidth support than dial-up and cable networks.
Next we discuss in detail the implementation and design
choice for each component.
1) Component on the original sender: To support IP
spooﬁng, one can either modify the mail sending program
directly or implement in a transparent fashion independent
of the mail software. The latter is the preferred approach
adopted by us because one can write mail sending program
independently of the triangular spamming infrastructure.
Our design of the component is shown in Figure 6. We
intercept outgoing packets destined to port 25 and dynami-
cally rewrite the source IP address to the relay bot’s IP. We
Figure 6. Component on the original sender
also modify the source port due to speciﬁc constraints of
the Planetlab, as it only allows one to intercept incoming
packets destined to certain reserved port ranges.
Note that the relayed packet has its source IP address set
to the relay bot’s IP (instead of the mail server’s IP) because
ISPs of relay hosts may prohibit IP spooﬁng. In fact,
Planetlab does not allow IP spooﬁng [12]. As a result, we
have to rewrite the source IP address to the mail server IP
address upon receiving the packet at the original sender. We
know which server IP address to rewrite to because we keep
track of the mapping between spoofed source IP addresses
and destination mail server IP addresses. Similarly, we
rewrite the destination port to the actual port used by the
original sender.
Since TCP is used, the sender and the receiver will take
care of retransmission for lost packets. The relay bot is
therefore stateless.
We use iptables’ built-in support to intercept and deliver
packets to the user-level program that can modify the pack-
ets and re-inject them. Since it involves additional kernel-to-
user and user-to-kernel transition for every packet, it is not
as efﬁcient compared to a kernel-module-based approach.
For ease of implementation, we chose to implement our
prototype in user space. The associated overhead is not an
inherent limitation.
It
2) Component on the relay bot:
is rather simple
to implement the component on the relay bot given its
functionality is to simply relay packets to the original
sender by rewriting the destination IP (the source IP is also
rewritten to avoid unnecessary IP spooﬁng). However, it
is important to understand under which condition the bot
relays packets. For instance, it is obviously unnecessary
to relay non-SMTP packets. Instead, One simple strategy
is to only relay packets with source port 25. As long as
the original packet is not dropped and the user’s SMTP
trafﬁc is not impacted (assuming the user also uses port
25), it is safe to relay them. However, sometimes, additional
care has to be taken. Consider the original packet is not
dropped and successfully received by the kernel, the kernel
will consider the packet as out-of-state. Depending on the
operating system (OS), it may generate a TCP reset packet
upon receiving such packets. Reset packets are undesirable
because they can terminate the TCP connection at the mail
server side even though the original sender does not intend
to.
Fortunately, many OSes do not generate such packets.
For instance, we have tested and veriﬁed that Windows XP
SP2 and Windows XP SP3 (arguably still the most prevalent
OS in use as of writing) by default do not generate such
reset packets for closed ports. We suspect that the “silent
drop” behavior is the correct behavior from security and
privacy point of view. It is also the case for newer Linux
kernels. However, we do discover that Windows Vista SP1
and Windows 7 will generate the reset packets.
In any case, even if the OS generates reset packets, they
still can be dropped via mechanisms such as iptables.
B. Real-world deployment on Planetlab
We successfully deployed triangular spamming on Plan-
etlab. Using tcpdump trace, we are able to verify that the
server believes it
is talking to the relay bot (setup on
Planetlab node) instead of the original sender.
1) Limitation of Planetlab environment: Unfortunately
Planetlab nodes generate reset packets instead of “silently
dropping” out-of-state TCP packets likely due to their
customized kernel. As a result, we have to modify the
server to drop such reset packets to prevent the mail server
side connection from being reset. However, such limitations
are unlikely present on compromised machines because the
attacker would have full control over the machines and can
easily alter their behavior.
2) IP spooﬁng blocking study using Planetlab: After
setting up the basic infrastructure, we investigate whether
triangular spamming works in reality, meaning that if we
spoof IP addresses of Planetlab nodes across the world, will
our spoofed trafﬁc be detected or dropped at certain ISP
along the path via uRPF [21]? More speciﬁcally, although
our university does not block spoofed trafﬁc, intermediate
ISPs may still block our trafﬁc. Similarly, one may argue
that spammers can always ﬁnd an ISP that does not ﬁlter
spoofed trafﬁc, but this is only true for their home ISP, may
not necessarily hold for intermediate ISPs. We empirically
study from our vantage point to check whether our spoofed
trafﬁc is dropped.
The Spoofer project [27] shows that 80% of ﬁlters are
implemented at a single IP hop from sources and 95%
of the blocked packets are observably ﬁltered within the
source’s Autonomous System. Their result is promising for
triangular spamming, i.e., as long as spammers can locate an
ISP allowing IP spooﬁng (which is quite likely given that
33% of the tested IPs from the Spoofer study can spoof
arbitrary IP addresses), it is unlikely that spoofed trafﬁc is
blocked in the middle of the path. This is because in practice
implementation of such IP-spoof prevention techniques are
often limited by multi-homing, route asymmetry, and other
factors.
In our experiment, we attempt to spoof all available
Planetlab nodes’ IP addresses and use them to connect to
multiple mail servers across various countries. Note that
although the Planetlab node will generate a reset packet
immediately after it receives the SYN-ACK packet from the
mail server, it still relays the SYN-ACK packet back to the
original sender so that we know the IP spooﬁng succeeded.
We record each  pair
in our trace and the results are shown in Table V.
The result is mostly consistent with that of Spoofer [27].
Once the home ISP allows IP spooﬁng, it is likely to allow
arbitrary routable IP address spooﬁng. For example, we
can successfully spoof arbitrary Planetlab node IP addresses
(except a node in Korea) to most popular U.S. mail servers
except Yahoo. The result is shown in Table V. We have
double veriﬁed by repeating the experiments several times
for the failed IP addresses. Interestingly, not only India and
Japan ﬁlter the spoofed Korea IP, Yahoo and Gmail in the
US also ﬁltered them. This is contradicting with Spoofer’s
results about arbitrary IP spooﬁng assertion that may be
caused by insufﬁcient diversity of spoofed nodes, although
the Korea node seems to be an only exception here. For
Yahoo mail server in China, the IP spooﬁng almost always
failed. We veriﬁed that the result is consistent for other
servers in China too, indicating that there is some speciﬁc
ﬁlter along the path to China. However, despite these failed
IP spooﬁng cases, the results are still very promising for
triangular spamming as the ﬁltering is sporadic and virtually
non-existent for US destinations.
C. Bandwidth utilization analysis
1) Bandwidth utilization shifting: As we can see in
Figure 1, the bandwidth utilization behavior completely
changes from the perspective of relay bots. Without trian-
gular spamming, a bot directly initiates a SMTP connection
to the mail server and sends spam messages using its
uplink bandwidth. With triangular spamming, all the uplink
trafﬁc is shifted to the original sender and such trafﬁc is
invisible to the relay bot’s network, effectively lowering the
bandwidth utilization of bots.
Further, since relay bots are most likely DSL or cable
modem hosts, their downlink bandwidth is usually much
higher than uplink bandwidth. For instance, a certain ADSL
connection has a downlink bandwidth of 8 Mbit/s and
a uplink bandwidth of 1.0 Mbit/s. Although the relay
bot still needs to forward packets to the original sender
consuming its uplink bandwidth, the forwarded packets are
SMTP response packets and the SMTP-response trafﬁc is
much smaller than SMTP-send trafﬁc. Analyzing randomly
sampled spam from our local mail server log, we estimate
that the size of SMTP-send trafﬁc is about 5 to 10 times
of the SMTP-response trafﬁc, depending on what the spam
message contains. As a result, we can conclude that trian-
gular spamming allows spammers to associate many more
concurrent connections with a relay bot without triggering
alarms from bandwidth-usage-based anomaly detectors. We
will show that in the next section, we can use selective
forwarding to even reduce the bandwidth usage on relay
bot even further.
IP SPOOFING RESULTS - SPOOFING PLANETLAB NODE IPS
Table V
Destination
Location Spooﬁng-succ count Failed Count
Failed IP & Location
Local Mail server
Hotmail
Yahoo
Gmail
Yahoo.com.cn
University server
University server
University server
University server
University server
US
US
US
US
China
France
India
Japan
Brazil
Korea
313
313
312
312
6
313
312
312
313
313
0
0
1
1
N/A
N/A
116.89.165.133 (Korea)
116.89.165.133 (Korea)
307
All except some servers in the US
0
1
1
0
0
N/A
116.89.165.133 (Korea)
116.89.165.133 (Korea)
N/A
N/A
For relay bots whose IPs are blocked for outgoing
SMTP trafﬁc, there is a clear advantage of using triangular
spamming. It is primarily because IP addresses are scarce
resources and blacklists nowadays can identify malicious
IPs rather quickly so that the IP addresses may be rendered
unusable. As we have shown in previous results, the IP
ranges that block outgoing SMTP trafﬁc are not necessarily
listed on blacklists. This gives spammers strong incentives
to use such IP addresses given they could still successfully
deliver spam.
2) Spamming strategy and techniques: In this section,
we show that triangular spamming offers an opportunity to
improve spamming throughput (i.e., the number of emails
sent per second). Consider the following two spamming
strategies:
Strategy 1: All bots directly send spam at their full speed.
Strategy 2: Triangular spamming is used where only high
bandwidth bots send spam.
Strategy 1 is the baseline for comparison. This strategy
provides a good overall throughput since it utilizes the dis-
tributed resources of the botnet. However, it has two notice-
able disadvantages: ﬁrst, it will expose the high bandwidth
bot IPs; second, even the low bandwidth bots risk of being
detected at its hosting ISP if they are sending spam at full
speed. On the other hand, bandwidth-usage-based detector
may not be able to catch high-bandwidth bot since it is
spooﬁng different IP addresses. Moreover, spammers may
also rent their own high-bandwidth machines in ‘spammer-
friendly’ ISPs. For strategy 2, the high bandwidth bot can
hide its own IP address while sending at full speed. For
low bandwidth bot, given their bandwidth limitation, we
think it might be a good idea to conserve their spamming
activity. Instead, they can be mostly focusing on relaying
server responses back to the sender.
We envision two spamming techniques under Strategy 2
that can help improve throughput for triangular spamming:
Technique 1. Selectively relaying packets at the relay bot
— reducing unnecessary network bandwidth usage.
Given that the common case is that senders can suc-
cessfully deliver emails. It is not really necessary for the
sender to receive the response from the mail server. We
have veriﬁed using our triangular spamming prototype that
the relay bot needs to relay only the TCP SYN-ACK packet
to the high bandwidth bot for spamming. This technique
can signiﬁcantly reduce both the uplink bandwidth usage
of the relay bots and the total bandwidth usage of the high
bandwidth bot. Depending on the email size, the SMTP-
response (incoming trafﬁc) at the high bandwidth bot is
around 1/5 – 1/6 of the total trafﬁc when the email body size