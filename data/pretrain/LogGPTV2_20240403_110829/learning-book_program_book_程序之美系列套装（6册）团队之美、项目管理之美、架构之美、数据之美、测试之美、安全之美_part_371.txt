的任务。原因之一就是一些存在问题的代码可能会隐藏在不经常被
调用的函数内。因此，当对ClamAV进行信息记录时，我们不仅要用
常规数据对其测试，还有给扫描器输入几千个不同格式的文档来增
加瓶颈问题出现的可能性。作为性能测试的一部分，我们也会执行
压力测试。我们通过使用常规数据，创建大量负载来仿真扫描器在
繁忙环境中的活动。在这样的环境中，每天要处理几十万甚至几百
万个文件或电子消息。压力测试有助于发现软件在稳定性、健壮性
和一般的效率方面可能存在的问题（见例20-4）。
例20-4：来自gprof篇平式记录文件范例。记录显示在这一个测试样
例上libclamav在Boyer-Moore和Aho-Corasick模式匹配器上花费的时
间最多
2119
---
## Page 2121
备注
测试用例：编辑摘要
输人第二个摘要
ait for
present ok
steditsu
2120
---
## Page 2122
备注
测试用例：编辑摘要一输入第二个摘要
对误报和漏报的测试
防病毒扫描器有时会产生错误的警报。误报是指合法的文件被标记
成被感染的文件。相似地，漏报是指被感染的文件被错误地确认为
是干净的文件。这两种情况都是所有防病毒软件的噩梦。高比例的
误报会使扫描器失效无用。桌面用户不愿意接受一天好几次从各个
位置弹出病毒警报。同样，如果一个防病毒软件总是把大量经过邮
件服务器的合法邮件标记为感染的，那么系统管理员很快会抛弃这
个产品。漏报的问题稍微有所不同，它的产生有两个方面的原因，
一个明显的原因是在扫描器的数据库中缺少对病毒的定义。而当病
毒扫描器中对于某个病毒包含了正确的病毒特征或者其他的检测机
制但是却没能正确识别时，情况就比较复杂了。这通常与扫描器的
检测引擎的缺陷有关，如无效的文件处理（解压、提取），甚至是
模式匹配器问题，这种情况要引起最大的注意并认真处理。对于漏
2121
---
## Page 2123
报的检测和消除最好是在产品或产品的更新到达终端用户之前完
成，这对于所有的防病毒厂商来说都是必需的。
误报
尽管ClamAV的病毒分析专家花费了很多努力来保证病毒特征的质
量，但是仍然需要通过专门的、完全自动化的测试机制对其测试，
并向世界公布一个有效的测试结果。这个系统的核心组件是一个庞
大的清洁文件集合。文件集合的大小、质量，尤其是文件的多样性
是避免产生误报匹配的关键因素。它包含几百GB的各种可执行文
件、库，以及来自其他流行操作系统和软件的组件，这些文件都是
经过确认的安全文件。当作者要提交一个新的病毒特征，可通过一
个简单的按钮上传到一个特殊的接口。系统用这些病毒特征自动地
对文档集合进行扫描，确保不会检测出病毒。如果检测到病毒，系
统会告知作者并且发布过程立即终止。测试阶段越快越好，并且没
有显著的延迟是非常重要的，否则我们会由于获得结果太晚而不能
应对新的威胁。由于我们要扫描大量的数据，为了有效地完成扫
描，我们将扫描进程分布在多个机器上，每个机器存储集合中的一
部分。如果所有节点都没有报告检测到病毒，那么测试就认为是成
功的。
漏报
扫描进程如何发现漏报呢？通常来说，当扫描器没有检测到某个恶
意软件时，说明系统中没有这个软件的病毒特征。那么修正这一问
题的唯一方法就是更新特征数据库以覆盖这一威胁。然而，有可能
发生扫描器毫无正当理由地停止对某些威胁文件进行检测的情况。
在绝大多数情况下，这种状况通常是与检测引擎的问题有关，并且
会导致令人讨厌的后果。因此，这类问题总是应该尽快地得以解
决。在ClamAV中为了避免这样的问题，我们定期地对恶意软件集合
做回归测试。这些测试的目的是对新代码和版本代码的结果进行比
较，查看一下执行情况。我们用两个版本的扫描器以相同的病毒特
征库对相同的文件集合进行扫描。结果中的任何差异都要引起特殊
的注意，尤其是恶意软件在新代码中没有被检测出来的时候。
可用性和用户验收测试
开源项目的主要优势在于强大的用户群体。ClamAV的用户不仅为我
们供应最新的恶意软件样本，而且还为我们提供有用的建议，验证
2122
---
## Page 2124
我们的并发思路，并作为最好的黑盒测试人员帮助我们。可用性和
用户验收测试是推出最终产品前的最后一步。就我们而言，这与意
见调查和发布候选产品的测试紧密相关。这个测试阶段非常重要，
至少有两个原因。首先，软件作者对于他们自己的创造品永远不能
做到足够的客观和严格。其次，他们永远不能完全找到一种经验性
的测试方法能够完全体现用户对软件期望的所有可能的运行方式。
用户执行的测试能够显示新的功能和变动是否和预期一致，而且在
各种环境和应用中都是没有问题的。这些测试主要关注于可用性、
稳定性、用户界面和可见的程序活动。
意见调查
有时候，每个项目都需要做一些令它的一部分用户感到矛盾甚至不
可接受的改变。由于ClamAV主要用户与其他解决方案或第三方软件
相整合，因此在用户界面、API、报告格式以及其他对用户可见的机
制方面的改变都十分不受欢迎，因为这也许会影响组件之间的协
作。在过去的几年中，我们很快了解到我们不可能让所有用户都满
意，但是我们可以通过对所有重大的改动进行公开的讨论来减少用
户的抱怨。我们经常通过邮件列表来对即将采取的更新进行讨论和
意见调查。通过在社区中对这些问题的讨论，并且确保大部分用户
是能够接受的。如果不能被接受，我们就会看一看有哪些应该进行
改进和修改的地方。通常用户乐于进行回应并提供有用的建议或批
评，但是有时候用户的反馈是低于预期的。尽管这样，用户意见调
查还是值得做的，因为这不仅能够使进一步的用户验收测试更为容
易，而且在以后将改动加入到最终发行版时的讨论中，能够给作者
一个很好的依据。嘿，已经警告过你了！：-）
候选发布版本
由于ClamAV常常用于完成关键任务的应用程序，而且用户期望其拥
有高稳定性，因此我们通常在即将发布新的软件前不会发布任何的a
版或者版，它们是不会有太多用户的。对最新代码感兴趣的用户可
以查看我们的SVN存档，但是我们不建议将此作为产品应用。唯一
例外是ClamAV的候选发布版本，我们总是在主要的新版本发布之前
将其发布出来。只有当代码通过了本文所述的所有重要测试并且没
有重要缺陷的情况下，才会发布这些代码。这些发布版本通常具有
产品级的质量，然而我们仍然发现我们的用户对于这样程序的安装
感到不满意。因此，我们努力迎合所有的用户，对于那些没有专门
的测试环境、不能运行预先版本的用户，我们帮助他们下载、编译
2123
---
## Page 2125
并运行makecheck命令。通过这样的方法，我们能够找出在什么平台
或设置下新版本不能通过编译或内部测试。这是使用单元测试和测
试脚本的又一个漂亮的例子。发布候选版本是用户验收测试的一部
分。这一测试的目的是查看代码在真实坏境中的性能，并且还要新
版本能够满足用户的需求。
总结
本文介绍的关于ClamAV项目测试过程的概况涵盖了日常项目维护的
大多数技术。尽管ClamAV的测试充满挑战性并且常常要花费很多时
间，但是它在过去七年的过程中还是非常令人激动的。在我们的测
试工作中，我们几乎是只使用免费的、开源的应用软件，这些软件
是成熟的，而且每一年都在进步，就如同我们的项目一样。更好的
工具=更好的测试=回馈给开源社区的更好质量的代码。这不是很美
吗？
致谢
如果没有出色的ClamAV项目团队，ClamAnti-Virus不会取得现在的
成就。我要特别感谢TorokEdwin和AlbertoWu对本文的校对，以及
将ClamAV的测试带到更进一步的水平。感谢LucaGibelli保持我们系
统架构的完美运行。他们是我遇见的最棒的“书呆子”！最后，我要
感谢我美丽的妻子，感谢她对我的工作和兴趣保持耐心。
第21章用Windmill测试Web应用程序
Adam Christian
简介
动态Web应用程序已经以不可阻挡的力量永久地改变了科技产业，
并且就像它们被快速地构建起来一样，它们也道切地需要测试。测
试富含动态JavaScript和交互式AJAX（AsynchronousJavaScriptand
XML）的应用程序需要一套更为先进的测试工具，来产生美丽的测
试。从许多方面来讲只有一个熟练的网页开发者才能理解和领会自
动化网页测试的复杂之处，但实际上任何人都能从中获益匪浅。
2124
---
## Page 2126
Windmill源自于开源应用程序基金会（OpenSourceApplications
Foundation,OSAF）在尽量减少Cosmo网页用户界面新版发布时需要
的手工测试上所做的努力。最初Selenium核心也被考察过，但那时它
还处于开发初期，没有提供持续集成所需要的工具或一个积极响应
的社区。因此，Windmill诞生了。开源应用程序基金会在编程语言上
的选择是Python，于是它便也自然而然地成为Windmill的选择。
Windmill在被O'Reilly开源大会（O'Reilly'sOpenSource
Convention,OSCON）于2007年波特兰首次公开宣布的两年后，已经
拥有了一个快速成长的社区和一套非常完美的工具，使得你能为网
页应用程序快速地创建自动化测试用例。
概述
Windmill项目的主要目的是提供一个开源工具，以便你能够以动作序
列的方式来创建测试用例，并将其组织到称为测试套件的集合中。
之后这些测试套件可以在你桌面上通过手动的方式或者使用现有持
续集成工具之一以自动的方式在你选定的浏览器中被执行。Windmill
使用Python构建，并依赖于一批开源Python软件库。PyPi或PIP使得其
安装过程简单易行，你可以选择是安装发行版本或开发中版本。
Windmill的其他部分是完全运行在浏览器中的JavaScript脚本控制
器，以便它能够模拟你的用户会话（图21-1），理解这一点很重
要。这就是为什么每次Windmill测试运行都要求你指定想要运行测试
的浏览器。
2125
---
## Page 2127
备注
测试用例：编辑摘要一输入第二个摘要
图21-1Windmill架构概述
编写测试
如图21-2所示，Windmill集成开发环境（IntegratedDevelopment
Environment,IDE）提供了一个跨浏览器的解决方案，来录制、编辑
和测试测试动作套件。工具的这个部分在严格意义上算不上美丽，
但用过之后你就会发现它能给项目带来的巨大功效。
在这个章节涵盖的所有内容中，录制器最为接近可被视为美丽的东
西。它能够准确地猜测出作为一个用户你想模拟什么。即使录制器
没有剪辑这样美丽的特性，它仍然可以为你节省大量的时间。
在开源应用程序基金会，Cosmo项目的质量保证团队规模相当小：