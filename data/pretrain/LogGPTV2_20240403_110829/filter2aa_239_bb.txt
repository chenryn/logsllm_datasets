File.Copy。
因为第三个参数用来传递新文件名的安全特性，此实现代码不使用它，所以公共方法
只有两个参数。返回类型也改变了。它不通过返回false值来返回一个错误，而是抛出一个
异常。如果出错，非托管方法CreateHardLink就用非托管API SetLastError设置错误号。要
从.NET中读取这个值，[DllImport]字段SetLastError设置为true。在托管方法
CreateHardLink中，错误号是通过调用Marshal.GetLastWin32Error读取的。要从这个号中
创建一个错误消息，应使用System.ComponentModel名称空间中的Win32Exception类。这
个类通过构造函数接受错误号，并返回一个本地化的错误消息。如果出错，就抛出
IOException类型的异常，它有一个类型Win32Exception的内部异常。应用公共方法
CreateHardLink的FileIOPermission特性，检查调用程序是否拥有必要的许可。.NET安全性
详见第24章（代码文件PInvokeSample / NativeMethods.cs）。
    using System;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Security;
    using System.Security.Permissions;
    namespace Wrox.ProCSharp.Interop
    {
      [SecurityCritical]
      internal static class NativeMethods
      {
        [DllImport("kernel32.dll", SetLastError = true,
        EntryPoint = "CreateHardLinkW", CharSet = CharSet.Unicode)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool CreateHardLink(
        [In, MarshalAs(UnmanagedType.LPWStr)] string newFileName,
        [In, MarshalAs(UnmanagedType.LPWStr)] string existingFileName,
        IntPtr securityAttributes);
        internal static void CreateHardLink(string oldFileName,
                                    string newFileName)
        {
        if (! CreateHardLink(newFileName, oldFileName, IntPtr.Zero))
        {
          var ex = new Win32Exception(Marshal.GetLastWin32Error());
          throw new IOException(ex.Message, ex);
        }
        }
      }
      public static class FileUtility
      {
        [FileIOPermission(SecurityAction.LinkDemand, Unrestricted = true)]
        public static void CreateHardLink(string oldFileName,
        string newFileName)
        {
        NativeMethods.CreateHardLink(oldFileName, newFileName);
        }
      }
    }
现在可以使用这个类来轻松地创建硬链接。如果程序的第一个参数传递的文件不存
在，就会得到一个异常，提示“系统无法找到指定的文件”。如果文件存在，就得到一个引
用原始文件的新文件名。很容易验证它：在一个文件中改变文本，它就会出现在另一个文
件中（代码文件PInvokeSample/ Program.cs）：
    using PInvokeSampleLib;
    using System.IO;
    using static System.Console;
    namespace PInvokeSample
    {
      public class Program
      {
        public static void Main(string[] args)
        {
        if (args.Length ! = 2)
        {
          WriteLine("usage: PInvokeSample " +
            "existingfilename newfilename");
          return;
        }
        try
        {
          FileUtility.CreateHardLink(args[0], args[1]);
        }
        catch (IOException ex)
        {
          WriteLine(ex.Message);
        }
        }
      }
    }
调用本地方法时，通常必须使用Windows句柄。Windows句柄是一个32位或64位值，
根据句柄类型，不允许使用一些值。在.NET 1.0中，句柄通常使用IntPtr结构，因为可以用
这种结构设置每一个可能的32位值。然而，对于一些句柄类型，这会导致安全问题，可能
还会出现线程竞态条件，在终结阶段泄露句柄。所以.NET 
2.0引入了SafeHandle类。
SafeHandle类是一个抽象的基类，用于每个Windows句柄。Microsoft.Win32.SafeHandles名
称空间里的派生类是SafeHandleZeroOrMinus-OneIsInvalid和
SafeHandleMinusOneIsInvalid。顾名思义，这些类不接受无效的0或1值。进一步派生的句
柄类型是SafeFileHandle、SafeWaitHandle、SafeNCryptHandle和SafePipeHandle，可以供特
定的Windows API调用使用。
例如，为了映射Windows 
API 
CreateFile，可以使用以下声明，返回一个
SafeFileHandle。当然，通常可以使用.NET类File和FileInfo。
    [DllImport("Kernel32.dll", SetLastError = true,
                CharSet = CharSet.Unicode)]
    internal static extern SafeFileHandle CreateFile(
      string fileName,
      [MarshalAs(UnmanagedType.U4)] FileAccess fileAccess,
      [MarshalAs(UnmanagedType.U4)] FileShare fileShare,
      IntPtr securityAttributes,
      [MarshalAs(UnmanagedType.U4)] FileMode creationDisposition,
      int flags,
      SafeFileHandle template);
5.7 小结
要想成为真正优秀的C#程序员，必须牢固掌握存储单元和垃圾回收的工作原理。本
章描述了CLR管理以及在堆和栈上分配内存的方式，讨论了如何编写正确地释放非托管资
源的类，并介绍如何在C#中使用指针，这些都是很难理解的高级主题，初学者常常不能
正确实现。至少本章有助于理解如何使用IDisposable接口和using语句释放资源。
第6章继续讨论C#语言的一个重要结构：泛型，它也影响IL代码的生成。
第6章
泛型
本章要点
● 泛型概述
● 创建泛型类
● 泛型类的特性
● 泛型接口
● 泛型结构
● 泛型方法
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● 链表对象
● 链表示例
● 文档管理器
● 协变和抗变
● 泛型方法
● 专用
6.1 泛型概述
泛型是C#和.NET的一个重要概念。泛型不仅是C#编程语言的一部分，而且与程序集
中的IL（Intermediate Language，中间语言）代码紧密地集成。有了泛型，就可以创建独
立于被包含类型的类和方法。我们不必给不同的类型编写功能相同的许多方法或类，只创
建一个方法或类即可。
另一个减少代码的选项是使用Object类，但使用派生自Object类的类型进行传递不是
类型安全的。泛型类使用泛型类型，并可以根据需要用特定的类型替换泛型类型。这就保
证了类型安全性：如果某个类型不支持泛型类，编译器就会出现错误。
泛型不仅限于类，本章还将介绍用于接口和方法的泛型。用于委托的泛型参见第9
章。
泛型不仅存在于C#中，其他语言中有类似的概念。例如，C++模板就与泛型相似。但
是，C++模板和.NET泛型之间有一个很大的区别。对于C++模板，在用特定的类型实例化
模板时，需要模板的源代码。相反，泛型不仅是C#语言的一种结构，而且是
CLR（Common Language Runtime）定义的。所以，即使泛型类是在C#中定义的，也可以
在Visual Basic中用一个特定的类型实例化该泛型。
下面几节介绍泛型的优点和缺点，尤其是：
● 性能
● 类型安全性
● 二进制代码重用
● 代码的扩展
● 命名约定
6.1.1 性能
泛型的一个主要优点是性能。第11章介绍了System.Collections和
System.Collections.Generic名称空间的泛型和非泛型集合类。对值类型使用非泛型集合
类，在把值类型转换为引用类型，和把引用类型转换为值类型时，需要进行装箱和拆箱操
作。
  注意： 装箱和拆箱详见第8章，这里仅简要复习一下这些术语。
值类型存储在栈上，引用类型存储在堆上。C#类是引用类型，结构是值类型。.NET
很容易把值类型转换为引用类型，所以可以在需要对象（对象是引用类型）的任意地方使
用值类型。例如，int可以赋予一个对象。从值类型转换为引用类型称为装箱。如果方法
需要把一个对象作为参数，同时传递一个值类型，装箱操作就会自动进行。另一方面，装
箱的值类型可以使用拆箱操作转换为值类型。在拆箱时，需要使用类型强制转换运算符。
下面的例子显示了System.Collections名称空间中的ArrayList类。ArrayList存储对象，
Add（）方法定义为需要把一个对象作为参数，所以要装箱一个整数类型。在读取
ArrayList中的值时，要进行拆箱，把对象转换为整数类型。可以使用类型强制转换运算符
把ArrayList集合的第一个元素赋予变量i1，在访问int类型的变量i2的foreach语句中，也要
使用类型强制转换运算符：
    var list = new ArrayList();
    list.Add(44);  // boxing - convert a value type to a reference type
    int i1 = (int)list[0];  // unboxing - convert a reference type to
                        // a value type
    foreach (int i2 in list)
    {
      WriteLine(i2);  // unboxing
    }
装箱和拆箱操作很容易使用，但性能损失比较大，遍历许多项时尤其如此。
System.Collections.Generic名称空间中的List类不使用对象，而是在使用时定义类
型。在下面的例子中，List类的泛型类型定义为int，所以int类型在JIT（Just-In-Time）
编译器动态生成的类中使用，不再进行装箱和拆箱操作：
    var list = new List();
    list.Add(44);  // no boxing - value types are stored in the List
    int i1 = list[0];  // no unboxing, no cast needed
    foreach (int i2 in list)
    {
      WriteLine(i2);
    }
6.1.2 类型安全
泛型的另一个特性是类型安全。与ArrayList类一样，如果使用对象，就可以在这个集
合中添加任意类型。下面的例子在ArrayList类型的集合中添加一个整数、一个字符串和一
个MyClass类型的对象：
    var list = new ArrayList();
    list.Add(44);
    list.Add("mystring");
    list.Add(new MyClass());
如果这个集合使用下面的foreach语句迭代，而该foreach语句使用整数元素来迭代，编
译器就会接受这段代码。但并不是集合中的所有元素都可以强制转换为int，所以会出现
一个运行时异常：
    foreach (int i in list)
    {
      WriteLine(i);
    }
错误应尽早发现。在泛型类List中，泛型类型T定义了允许使用的类型。有了
List的定义，就只能把整数类型添加到集合中。编译器不会编译这段代码，因为
Add（）方法的参数无效：
    var list = new List();
    list.Add(44);
    list.Add("mystring");  // compile time error
    list.Add(new MyClass());  // compile time error
6.1.3 二进制代码的重用
泛型允许更好地重用二进制代码。泛型类可以定义一次，并且可以用许多不同的类型
实例化。不需要像C++模板那样访问源代码。
例如，System.Collections.Generic名称空间中的List类用一个int、一个字符串和一
个MyClass类型实例化：
    var list = new List();
    list.Add(44);
    var stringList = new List();
    stringList.Add("mystring");
    var myClassList = new List();
    myClassList.Add(new MyClass());
泛型类型可以在一种语言中定义，在任何其他.NET语言中使用。
6.1.4 代码的扩展
在用不同的特定类型实例化泛型时，会创建多少代码？因为泛型类的定义会放在程序
集中，所以用特定类型实例化泛型类不会在IL代码中复制这些类。但是，在JIT编译器把
泛型类编译为本地代码时，会给每个值类型创建一个新类。引用类型共享同一个本地类的
所有相同的实现代码。这是因为引用类型在实例化的泛型类中只需要4个字节的内存地址
（32位系统），就可以引用一个引用类型。值类型包含在实例化的泛型类的内存中，同时
因为每个值类型对内存的要求都不同，所以要为每个值类型实例化一个新类。
6.1.5 命名约定
如果在程序中使用泛型，在区分泛型类型和非泛型类型时就会有一定的帮助。下面是
泛型类型的命名规则：
● 泛型类型的名称用字母T作为前缀。
● 如果没有特殊的要求，泛型类型允许用任意类替代，且只使用了一个泛型类型，就
可以用字符T作为泛型类型的名称。
        public class List { }
        public class LinkedList { }
● 如果泛型类型有特定的要求（例如，它必须实现一个接口或派生自基类），或者使
用了两个或多个泛型类型，就应给泛型类型使用描述性的名称：
        public delegate void EventHandler(object sender,
          TEventArgs e);
        public delegate TOutput Converter(TInput from);
        public class SortedList { }
6.2 创建泛型类
首先介绍一个一般的、非泛型的简化链表类，它可以包含任意类型的对象，以后再把
这个类转化为泛型类。
在链表中，一个元素引用下一个元素。所以必须创建一个类，它将对象封装在链表
中，并引用下一个对象。类LinkedListNode包含一个属性Value，该属性用构造函数初始
化。另外，LinkedListNode类包含对链表中下一个元素和上一个元素的引用，这些元素都
可以从属性中访问（代码文件Linked-ListObjects/LinkedListNode.cs）。
    public class LinkedListNode
    {
      public LinkedListNode(object value)
      {
        Value = value;
      }
      public object Value { get; private set; }
      public LinkedListNode Next { get; internal set; }
      public LinkedListNode Prev { get; internal set; }
    }
LinkedList类包含LinkedListNode类型的First和Last属性，它们分别标记了链表的头
尾。AddLast（）方法在链表尾添加一个新元素。首先创建一个LinkedListNode类型的对
象。如果链表是空的，First和Last属性就设置为该新元素；否则，就把新元素添加为链表
中的最后一个元素。通过实现GetEnumerator（）方法，可以用foreach语句遍历链表。
GetEnumerator（）方法使用yield语句创建一个枚举器类型。
    public class LinkedList: IEnumerable
    {
      public LinkedListNode First { get; private set; }
      public LinkedListNode Last { get; private set; }
      public LinkedListNode AddLast(object node)
      {
        var newNode = new LinkedListNode(node);
        if (First == null)
        {
        First = newNode;
        Last = First;
        }
        else
        {
        LinkedListNode previous = Last;
        Last.Next = newNode;
        Last = newNode;
        Last.Prev = previous;
        }
        return newNode;
      }
      public IEnumerator GetEnumerator()
      {
        LinkedListNode current = First;
        while (current ! = null)
        {
        yield return current.Value;