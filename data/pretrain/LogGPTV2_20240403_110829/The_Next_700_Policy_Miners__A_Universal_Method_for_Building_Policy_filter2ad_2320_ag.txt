π denies z if no π′i , for i ≤ ℓ, authorizes z, but some π′j , for j ≤ ℓ,
denies it.
) denies a request
if some π′i denies it. The policy authorizes the request if no π′i
denies it, but some π′i authorizes it.
A policy π of the form (FirstApp,
) authorizes a re-
quest if there is an i ≤ ℓ such that π′i authorizes it and π′j , for
j  1 and some
child of π has depth M − 1 and the rest have depth at most M − 1.
Two formulas ψ1,ψ2 ∈ L are mutually exclusive if there is no I
and no z ∈ 2AVals such that both ψ I
2 (z) hold. When ψ1
and ψ2 are mutually exclusive, we write ψ1 ⊕ ψ2 instead of ψ1 ∨ ψ2.
1 (z) and ψ I
C.3 A template formula for XACML
For M, N ∈ N, we present a template formula for the language
of all XACML policies of depth and breadth at most M and N ,
respectively.
Let S be the set of all N -ary sequences of length at most M and
let ϵ ∈ S be the empty sequence. For j ∈ {0, . . . , N − 1}, we denote
by σ ▷ j the result of appending j to σ and by j ◁ σ the result of
prepending j to σ.
The set of rigid constants {y
Let REQS be a sort representing all requests, AVALS be a sort
representing all attribute values, and POLS a sort representing
policies and rules. For each σ ∈ S, define a rigid constant y
σ
symbol of sort POLS such that y
σ | σ ∈ S} are intended to represent
is the root
a tree of XACML policies and rules. The constant y
ϵ
policy. For σ ∈ S with length less than M and j ∈ {0, . . . , N − 1},
the constant y
Let z be a variable of sort REQS. Formula C.1 presents a template
formula for the XACML fragment introduced above. We explain its
main parts.
, whenever σ (cid:44) σ ′.
represents one of y
’s children.
We define signature symbols that represent all terminal symbols
in the BNF grammar above. For example, we define two rigid con-
stant symbols XAllows and XDenies that represent the decisions
allow and deny. We define two flexible function symbols XDec and
XComb. For a rigid constant y
denotes the decision
, XDec
(cid:44) y
(cid:18)
(cid:19)
σ ▷j
σ′
σ
σ
σ
y
σ
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom110φXACML
M, N
allows
allowsRule
allowsPol
(cid:19)(cid:19)
(cid:19)(cid:19)
∧
.
, z
y
σ
, z
y
σ
= allow ∧ z ⊨ y
.
σ
(cid:18)
(cid:18)
(cid:18)
(cid:18)
y
ϵ
y
y
y
(cid:18)
(cid:18)
σ
σ
σ
.
σ
σ
σ
σ
σ
y
y
y
y
:=
, z
, z
, z
, z
, z
(cid:19)
(cid:18)
(cid:18)
y
ϵ
XIsRule
(cid:18)
(cid:18)
:= allows
:= XActive
(cid:18)
(cid:43)(cid:47)(cid:47)(cid:45) ⊕
(cid:19)
(cid:19)
(cid:19)
(cid:19)
(cid:42)(cid:46)(cid:46)(cid:44) XComb
(cid:87)
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
(cid:76)
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
(cid:19)
(cid:18)
(cid:19)
(cid:19)
→ allowsRule
(cid:18)
(cid:19)
¬XIsRule
→ allowsPol
(cid:18)
(cid:19)
:= XActive
∧ XDec
y
(cid:19)
(cid:18)
y
∧
(cid:18)
(cid:19)
= AllowOv ∧
(cid:19)
(cid:18)
y
(cid:86)
(cid:42)(cid:46)(cid:46)(cid:44)
= FirstApp ∧
, z
i  0 is a hyper-parameter and
λ ∥I∥ +L
∥I∥ defines I’s complexity. We inductively define the complexity