simply fails. To trigger the bug (assuming data_used = 0), you need to add a test case 
of something like len = 0xFFFFFBFF (the maximum representable integer with 1024 
subtracted from it). The initial range of test cases you come up with need to be 
tailored to the code you're examining to make sure you catch all the artificially 
created boundary cases occurring in the way the code works as well as the logical 
boundary cases you originally devised. 
Test Cases with Multiple Inputs 
The previous example brings up an interesting point dealing with multiple inputs. 
Before you examined the code in some depth, you cared about only one input as far 
as test cases were concerned: the len variable passed to ConnectionRead(). However, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
157 
in the real world, often you deal with multiple inputs to functions. The problem is that 
having multiple inputs multiplies the number of test cases you need, as shown in this 
formula: 
tests = (set of cases)(number of inputs) 
The number of test cases can increase quickly. Furthermore, additional test cases 
might surface; often variables that are multiple inputs to a function are related in 
some way, a concept called "variable relationships" (discussed in Chapter 7(? 
[????.])). Essentially, a lot of variables and inputs in a module are given meaning by 
how they relate to other variables, so you might need to establish test cases to deal 
with boundary cases for a relationship, in addition to boundary cases for variables in 
isolation. The code you looked at previously is an example of such a test case; you 
must test the boundary case for the relationship between len and data_used because 
both those values must operate together to trigger the potential vulnerability. 
When building test cases for a function or code module, it's up to you to identify these 
relationships to make sure you have a complete set of test cases. The more you 
perform test cases, the more quickly you can identify the problem cases from looking 
at code, which speeds up the process. However, it's worth the time to work through 
all potential scenarios and verify whether the code handles them correctly. Spotting 
problems automatically isn't as thorough, and you might miss a case or two. In 
addition, the number of boundary conditions you have doesn't necessarily correspond 
to the number of inputs you supply to a code module because some variables take 
values indirectly from the input (such as data_used, presumably). 
Say you have a large number of test cases and you want to get rid of some, if possible. 
How do you do that while ensuring you're testing all the necessary boundary 
conditions you want to verify? There are two ways to go about cutting out extraneous 
test cases: constraint establishment and extraneous input thinning, explained in the 
following sections. 
Treat Input as Hostile 
Often you encounter code that is dangerous because the developer thinks 
that certain externally supplied variables are safe and trusts their content 
implicitly. This approach is dangerous for several reasons: 
A code path might exist that's not accounted for, so less stringent 
input sanitation is done; therefore, the vulnerable code can be 
reached with variables in an unexpected state. 
A new code path might be introduced in the future in which less 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
158 
stringent input sanitation is done; therefore, the vulnerable code can 
be reached with variables in an unexpected state. 
The input sanitation might not work as effectively as the developer 
expects because of a logic or implementation error, so the vulnerable 
code can be reached with variables in an unexpected state. 
In general, you should be wary of input data from other modules. You don't 
need to assume the same level of danger as completely external input, but 
you should still be a bit suspicious of it. After all, it's just good practice for the 
developer to perform some internal consistency checking, especially in a 
general purpose library. 
Constraint Establishment 
Sometimes you have a large number of test cases that verify code for all sorts of 
boundary conditions, but a lot of these test cases might be useless to you. Why? 
Because the code module you're testing can't be reached with variables in certain 
states, so even if the test cases aren't handled correctly, it doesn't matter because 
they can never happen. 
If you can verify that it's impossible for variables to exist in certain states, a number 
of the test cases become irrelevant, and you can discard them (noting down why you 
discarded them). This process is called constraint establishment. When you do this, 
you should ensure that sanitation checks on the input work as expected by doing 
separate test cases for the part of the code where the sanity checks occur. To see an 
example of where to discard test cases, go back to the ConnectionRead() function. 
Imagine that it's called from only a single place in the application, a function called 
ConnectionReadBuffer() that looks like this: 
int Connection::ConnectionReadBuffer(int len) 
{ 
    return ((len > 0) ? ConnectionRead(len) : 0); 
} 
This function is basically a wrapper to ConnectionRead(), except it ensures that len is 
a value greater than 0. That single check cuts out quite a few test cases; now you 
need to test only situations in which len is positive because ConnectionRead() can 
never be reached with len being 0 or negative. 
Extraneous Input Thinning 
Extraneous input thinning means getting rid of inputs that aren't a concern. For 
example, consider the following function prototype: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
159 
int read_data(int sock, unsigned char *buffer, 
              size_t length, int flags); 
This function is mostly a wrapper to recv(). The initial set of states for each variable 
when this function is called are shown in Table 4-20. 
Table 4-20. Input Data States 
Variable States 
sock 
Valid socket descriptor 
Invalid socket descriptor 
buffer 
NULL 
Non-NULL (size equal to length) 
Non-NULL (size not equal to length) 
length 
0 
Small positive number 
Huge positive number 
flags 
0 
Valid flags 
Invalid flags 
Now you have a set of possible states you want to test for. (You should normally be 
more specific about what values the flags variable can take, but that isn't necessary 
for this example.) You can probably eliminate a couple of these states when you 
examine the constraints for this function. For example, it's highly unlikely the 
program will call this function with an invalid socket descriptor. Beyond this constraint, 
however, certain values are outside an attacker's control both directly and indirectly. 
For example, say the flags variable can be any valid flag or combination of flags that 
the recv() function accepts (and this rule is enforced in the code elsewhere), but the 
program sets that value based on input from a configuration file that only the 
administrator can access. In this case, you don't need to test every combination of 
possible values flags can take; the default configuration from the file is probably 
sufficient. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
160 
When eliminating test cases, be careful that you don't eliminate too many. Just 
because you can't control the value of a variable doesn't mean you can ignore it 
because the values that variable takes might influence how the function or module 
works, and you need to see how your input is dealt with in each circumstance. To 
summarize, you can ignore only input values that meet the following conditions: 
You can't control them directly or indirectly. 
The value of this variable doesn't significantly affect how data you do control 
is dealt with or how the module operates. 
In addition, sometimes you see arguments with the sole purpose of being filled in by 
the function, so when the function is called, the values in these variables are 
irrelevant. 
Unconstrained Data Types 
This discussion of test cases hasn't addressed dealing with data inputs of types that 
aren't constrained to a strict subset or range of values. The examples so far have 
dealt primarily with integer types that can be in one of three states: negative value, 
positive value, or 0. What about character strings, however? String data can be an 
arbitrary length and contain arbitrary characters supplied by users. This makes it 
hard to write a strict set of test cases and ensure that you're covering all possible 
results when the application is running in a real-world environment. String data 
complicates your test case procedures. Furthermore, this type of data isn't rare; 
you'll need to make test cases for it frequently, so you must be able to deal with this 
input in a consistent and accurate fashion. To do this, you need to do be aware of 
some context surrounding the input. In other words, you must determine what the 
unconstrained data represents and how the program interprets it. A number of things 
happen to string data over the course of a program: 
Transformations The data is converted from one representation to another. 
Validations Checks are performed to verify whether certain data elements are 
present at certain locations, to do length checks on the data, and to perform 
other related validation procedures. 
Parsing and extraction Data is parsed into constituent elements. For strings, 
parsing usually means locating element boundaries by searching for a 
delimiter (such as whitespace), and then copying elements as needed by the 
application. 
System usage The data is actually used for retrieving some sort of system 
resource, such as supplied filenames being opened or passed to another 
program to send e-mail. 
To provide effective string test cases, you should choose boundary cases for each 
transformation, validation, or parsing block that takes place. The best way to do this 
is by examining each operation performed on the data and classifying it into one of 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
161 
the three categories: transformation, validation, or parsing. Depending on the 
category, you decide what your goal is so that you can craft test cases accordingly. 
If an operation is a transformation, your goals are to see whether there's a case 
where the transformation occurs incorrectly, see whether corruption of some kind can 
occur, and see whether the order of transformations versus data validation results in 
a logical security vulnerability (that is, a validation procedure checks for the absence 
or presence of some data, but the data is subsequently transformed before it's used). 
These issues are explained in more detail in Chapter 8(? [????.]), "Strings and 
Metacharacters." 
If the operation is a validation procedure, your main goal is to determine whether this 
validation can be subverted in any cases or whether the validation is inadequate given 
the actions that follow. (This determination can include cases with no validation.) 
Again, these issues are discussed in Chapter 8(? [????.]). 
When parsing and extraction is performed, you're concerned with issues related to 
parsing data incorrectly, usually resulting in some sort of memory corruption 
(covered extensively in several later chapters). After completing these steps, often 
you find cases in which the data is used to access a system resource. This is usually 
the final step of the data's handling because it should have been validated and parsed 
by this point. So a vulnerability exists if using this string to access a resource allows 
an attacker to circumvent the application's security policy or corrupt its internal state. 
6.4.10 Code Auditor's Toolbox 
Before you can analyze large chunks of code effectively, you need some tools that 
enable you to navigate code comfortably and perform related tasks such as 
fuzz-testing. This section introduces some major software tools for navigation of both 
source and binary code, debugging, fuzz-testing, and automated code auditing. 
Coverage of each tool includes an overview of its feature set and an assessment of its 
strengths and weaknesses. Code auditors vary in what type of tools they're 
comfortable with, so spend some time testing each product, and find the ones that 
suit you best. The overview tables also indicate which tools have a free version 
available. 
Code auditors tend to be creatures of habit. Most get familiar with certain tools and 
then never try competing tools because of the effort required to change their 
workflow. However, the state of the art changes rapidly, and new tools can introduce 
new capabilities that make code review much easier. If possible, take time to explore 
different products; you might find some features in competing tools that aren't 
available in your current tools. 
Source Code Navigators 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
162 
Source code navigators enable you to manage both small and large source-code 
projects easily and efficiently. Although most programming suites come with IDE 
software, source code navigators vary slightly by focusing on reading and following 
the code instead of building it (although many IDEs have similar functions and might 
be adequate for analyzing code). Some features of good source code navigators 
include the following: 
Cross-referencing functionality The capability to cross-reference a function or 
variable use is one of the most important features of a source code navigator. 
A good tool should enable you to look up definitions as well as uses of an 
object so that you can see the specifics of an object quickly and easily. 
Text searching Text searching is useful for locating code that might be 
performing a particular kind of task (based on what strings it's looking for in 
input data). Additionally, text searching comes in handy for locating objects 
when the tool is unable to find a definition or the object definition comes from 
outside the project source. For example, an RPC server might have definitions 
for a variable declared in an rpcgen.x file, and the tool can't find the definitions 
because it's analyzing only .c files. 
Multiple language support Multiple language support is useful for code 
auditors who examine projects written in a variety of languages. Most source 
code navigators support a few major languages (such as C/C++ and Java). 
Syntax highlighting Every programmer should be familiar with the value of 
syntax highlighting. It is simply color coding that an IDE or source navigator 
applies to different programmatic constructs. Most tools have some form of 
syntax highlighting because it is considered essential for any modern software 
development. 
Graphing capabilities A pictorial representation of an object's use or the 
control flow in a function or function group can be very useful. With graphing 
capabilities, you can get a clear representation of call trees or control-flow 
constructs without getting mired in the code. 
Scripting capabilities Scripting capabilities can be useful for advanced 
automated analysis or manipulation of source code trees. With a powerful 
scripting language, automating some basic (and even not so basic) aspects of 
code auditing might be possible. 
Cscope 
Cscope, summarized in Table 4-21, is a useful utility with cross-referencing features 
in an easy-to-use text interface and search-and-replace features for making text 
substitutions over multiple source files. This utility doesn't offer a satisfactory code 
navigation environment because of the limited features it supports, but it's not 
designed to be an auditing environment. However, it can be a useful complement to 
other products, particularly Ctags, as both products make up for each other's 
drawbacks. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
163 
Table 4-21. Cscope 
Operating system 
Most UNIX-based operating systems (Linux, BSD, Solaris) 
Product requirements None 
Free version available Yes 
URL 
http://cscope.sourceforge.net/ 
Key features 
Cross-referencing 
Text searching and replacing 
Ctags 
Ctags is an extension of the VIM editor designed for navigating source code. It offers 
a number of interesting features, although many features listed in Table 4-22 are 
actually part of VIM, not Ctags. It works by generating a file containing locations of 
data elements (structures, functions, variables, type definitions, preprocessor 
macros, and so on), and then referring to that file when users look up definitions. It's 
easy to use (for those familiar with VIM), and when combined with features already in 
VIM, it creates a functional code-navigating environment. 
Table 4-22. Ctags 
Operating system 
Most UNIX-based operating systems (Linux, BSD, Solaris) 
Product requirements VIM editor 
Free version available Yes 
URL 
http://ctags.sourceforge.net/ 
Key features 
Multiple language support 
Definition lookups 
Syntax highlighting 
Navigational shortcuts 
One of the main drawbacks of Ctags is that occasionally it jumps to the wrong place 
during a definition lookup. It might jump to a prototype instead of the actual function, 
for example. It can be particularly problem prone when a lot of indirection is involved 
in the code being examined. The second main drawback is that it doesn't have 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
164 
cross-referencing features; however, using this tool with Cscope can work around 
that limitation. 
Source Navigator 
Source Navigator (see Table 4-23) is a GUI IDE developed primarily for use on Linux 
(and other UNIX-based OSs), but it also runs on Windows. It offers a rich feature set, 
including support for multiple languages, cross-referencing (text as well as pictorial), 
text searching, and definition lookups. It's an excellent product because the interface 
is simple and fast, and the engine works well. (It doesn't get definition lookups wrong, 
as other products sometimes do.) 
Table 4-23. Source Navigator 
Operating system 
UNIX and Windows 
Product requirements None 
Free version available Yes 
URL 
http://sourcenav.sourceforge.net/ 
Key features 
Multiple language support 
Cross-referencing 
Graphing capabilities 
Text searching and replacing 
Definition lookups 
Many auditors tend to prefer console environments for code auditing, but some of the 
features Source Navigator offers make code auditing in a GUI environment 
reasonably efficient. It does have a couple of drawbacks, however. First, it seems to 
have problems occasionally when dealing with large source trees (which can cause 
the application to crash). This problem isn't common, but it does happen. Second, it 
lacks syntax highlighting, which can make following code a little more difficult. 
Code Surfer 
Code Surfer (summarized in Table 4-24), a product by Grammatech, is specifically 
designed for code-auditing tasks. It extends the basic function of code navigators 
with additional features such as slicing. Slicing is a mechanism for syntax highlighting 