# BHUSA @BlackHatEvents
**eBPF ELFs JMPing Through the Windows**

**Presenter: Richard Johnson, Trellix**

**Information Classification: General**

## Whoami
- **Name:** Richard Johnson
- **Title:** Senior Principal Security Researcher, Trellix
- **Expertise:** Vulnerability Research & Reverse Engineering
- **Owner:** Fuzzing IO
- **Training:** Advanced Fuzzing and Crash Analysis
- **Contact:** [Email](mailto:PI:EMAIL), [@richinseattle](https://twitter.com/richinseattle)
- **Special Thanks to:** Trellix Interns - Kasimir Schulz, Andrea Fioraldi (@abraxus7331, @andreafioraldi)

## Outline
1. Origins and Applications of eBPF
2. Architecture and Design of eBPF for Windows
3. Attack Surface of APIs and Interfaces
4. Fuzzing Methodology and Results
5. Concluding Thoughts

## What is eBPF?
eBPF (Extended Berkeley Packet Filter) is a virtual CPU architecture and VM originally designed as a "Berkeley Packet Filter" for network packet inspection. It has evolved into a general-purpose execution engine, providing an alternative to native kernel modules.

- **Compilation:** eBPF programs are compiled from C into virtual CPU instructions using LLVM.
- **Execution Modes:** Programs can run in emulated or JIT (Just-In-Time) modes.
- **Static Verifier:** A static verifier ensures safe execution by checking memory access and instruction limits.
- **Sandboxed Execution:** eBPF programs are highly restricted in terms of memory access and instruction count.

## Origins of eBPF
- **1992:** BPF (Berkeley Packet Filter) was developed for filtering network packets.
- **Unix Systems:** BPF was reimplemented for most Unix-style operating systems and ported to userland.
- **Common Tools:** Users interact with BPF via tools like `tcpdump`, `wireshark`, `winpcap`, and `npcap`.
- **Performance:** Filters like `dst host 10.10.10.10 and (tcp port 80 or tcp port 443)` compile into high-performance BPF filters.
- **Classic BPF (cBPF):** The original BPF interface is now referred to as cBPF.

### Evolution to eBPF
- **December 2014:** Linux kernel 3.18 introduced the `bpf()` system call, implementing the eBPF API.
- **64-bit Instructions:** eBPF extends BPF to 64-bit instructions and introduces BPF Maps, which are persistent data structures shared between eBPF programs and userspace daemons.
- **General-Purpose Programs:** eBPF allows users to write general-purpose programs that can call kernel-provided APIs.
- **Single Function:** Each eBPF program is a single function but can tail call into others.
- **Static Verification:** All eBPF programs must pass a static verifier to ensure safe execution within the VM.

## Applications of eBPF
- **Linux eBPF Projects:** More projects can be found at [ebpf.io/projects](https://ebpf.io/projects).

### Prior eBPF Research
- **Evil eBPF (Jeff Dileo, DEF CON 27, 2019):**
  - Use of BPF_MAPS for IPC.
  - Discussed unprivileged interface `BPF_PROG_TYPE_SOCKET_FILTER`.
  - Outlined ROP chain injection techniques.
- **With Friends like eBPF, who needs enemies (Guillaume Fournier et al., BH USA 2021):**
  - Demonstrated eBPF rootkits hooking syscall returns and userspace APIs.
  - Exfiltration over replaced HTTPS request packets.
- **Extra Better Program Finagling (Richard Johnson, Toorcon 2021):**
  - Showed hooks on Linux for tracing and intercepting process creation.
  - Preempted loading libc with an attacker-controlled library.
  - Hooked all running processes.
  - Provided a method for pivoting hooks into systemd-init.
  - Fuzzed and previewed crashes in ubpf and PREVAIL verifier.

## eBPF for Windows Timeline
- **May 2021:** eBPF for Windows was announced.
  - Initial hooks: XDP and socket bind.
  - Expected future hooks and helpers.
- **August 2021:** Microsoft, Netflix, Google, Facebook, and Isovalent announced the eBPF Foundation under the Linux Foundation.
- **November 2021:** Added libbpf compatibility and additional BPF_MAPS support.
- **February 2022:** Microsoft released a blog discussing efforts to port Cillium L4LB load balancer from Linux to Windows.

## eBPF for Windows Architecture
- **Kernel vs. Userland:** Unlike Linux, where eBPF is entirely contained in the kernel, the Windows version splits the system into several components, including the IO Visor uBPF VM and the PREVAIL static verifier.
- **Current Capabilities:** eBPF for Windows can perform introspection and modification of network packets and provides a libbpf API compatibility layer for portability.
- **Licensing:** eBPF for Windows is MIT licensed and can be shipped as a component of third-party applications.

## Creating eBPF Programs on Windows
- **Compilation:** eBPF programs can be compiled from C source using LLVM.
- **Output:** The resulting output is an ELF object with eBPF bytecode stored in ELF sections.
- **Example:** An example of a practical eBPF program for dropping certain packets.

## eBPF for Windows Program Types
- **BPF_PROG_TYPE_XDP:** Handles incoming packets as early as possible.
- **BPF_PROG_TYPE_BIND:** Handles socket `bind()` requests.
- **BPF_PROG_TYPE_CGROUP_SOCK_ADDR:** Handles various socket operations.
- **BPF_PROG_TYPE_SOCK_OPS:** Handles socket event notifications.

## eBPF for Windows libbpf API
- **Helper APIs:** Partial representation of current helper APIs.

## eBPF for Windows Security Model
- **Unsigned Code:** eBPF for Windows allows unsigned code to run in the kernel.
- **Access Control:** Administrative access is required to interact with the trusted service or driver directly via IOCTLs.
- **Static Verifier:** Ensures programs terminate within a reasonable time and do not access out-of-bounds memory.
- **Execution Engine:** JIT code to x64 or runs in interpreted mode (debug mode only).

## eBPF for Windows Static Verifier
- **PREVAIL:** Uses abstract interpretation for sound analysis and supports modern eBPF features like loops and tail calls.

## eBPF for Windows Execution Engine
- **uBPF:** BSD-licensed, can run in user or kernel contexts, and can be used as a replacement for Lua or JavaScript.

## eBPF for Windows Security Guarantees
- **Termination:** eBPF programs will terminate within a reasonable amount of time.
- **Memory Access:** Programs will not read memory outside specified bounds.
- **Register Checks:** Registers are checked for value ranges and uninitialized use.
- **Stack References:** Contained to memory written by the program.
- **Type Checking:** Arguments to function calls are type-checked.
- **Pointer Checks:** Pointers must be checked for NULL before dereferencing.
- **HVCI Mode:** Can also be run in a secure HVCI mode.

## eBPF for Windows Attack Scenarios
- **Code Execution as Administrator:** Due to parsing errors on loading third-party modules.
- **Trusted Service Exploitation:** Via RPC API implementation errors, static verifier or JIT compiler bugs.
- **Kernel Exploitation:** Via static verifier, JIT compiler, or interpreter bugs, IOCTL implementation errors, and shim hook implementation errors.

## eBPF4Win API (ebpfapi.dll)
- **User-Facing API:** Allows loading and unloading programs, creating and deleting maps, and verifying ELF sections.
- **Interfaces:** Exposed through `bpftool.exe` and `netsh`.

## Fuzzing ebpfapi.dll
- **Fuzzing Approach:** Combination of fuzzing the PREVAIL verifier on Linux and cross-fuzzing, as well as directly harnessing `ebpfapi.dll` APIs with `libfuzzer`.
- **Vulnerability Example:** Heap corruption during ELF relocation section parsing, leading to arbitrary code execution.

### EbpfApi Arbitrary Code Execution
- **Attack Vector:** Administrator loads a malicious prebuilt eBPF program or compiles a malicious project file.
- **Exploit Details:** Undersized relocation section header data, when freed, allows arbitrary code execution.
- **Heap Corruption:** Confirmed via debugger and heap analysis.
- **Exploit Confidence:** High confidence due to the looping nature of ELF parsing and arbitrary control of sizes and contents.

**For more details, refer to the full presentation and research materials.**