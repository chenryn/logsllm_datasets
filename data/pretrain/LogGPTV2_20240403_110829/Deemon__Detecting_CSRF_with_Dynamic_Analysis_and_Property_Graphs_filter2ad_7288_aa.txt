title:Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs
author:Giancarlo Pellegrino and
Martin Johns and
Simon Koch and
Michael Backes and
Christian Rossow
Deemon: Detecting CSRF with Dynamic Analysis and Property
Giancarlo Pellegrino
CISPA, Saarland University
Saarland Informatics Campus
gpellegrino@cispa.saarland
Graphs
Martin Johns
SAP SE
PI:EMAIL
Simon Koch
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
7
1
0
2
g
u
A
9
2
]
R
C
.
s
c
[
1
v
6
8
7
8
0
.
8
0
7
1
:
v
i
X
r
a
Michael Backes
CISPA, Saarland University
Saarland Informatics Campus
backes@cispa.saarland
Christian Rossow
CISPA, Saarland University
Saarland Informatics Campus
rossow@cispa.saarland
ABSTRACT
Cross-Site Request Forgery (CSRF) vulnerabilities are a severe class
of web vulnerabilities that have received only marginal attention
from the research and security testing communities. While much
e(cid:29)ort has been spent on countermeasures and detection of XSS and
SQLi, to date, the detection of CSRF vulnerabilities is still performed
predominantly manually.
In this paper, we present Deemon, to the best of our knowledge the
(cid:27)rst automated security testing framework to discover CSRF vulner-
abilities. Our approach is based on a new modeling paradigm which
captures multiple aspects of web applications, including execution
traces, data (cid:30)ows, and architecture tiers in a uni(cid:27)ed, comprehensive
property graph. We present the paradigm and show how a concrete
model can be built automatically using dynamic traces. Then, using
graph traversals, we mine for potentially vulnerable operations.
Using the information captured in the model, our approach then
automatically creates and conducts security tests, to practically
validate the found CSRF issues. We evaluate the e(cid:29)ectiveness of
Deemon with 10 popular open source web applications. Our experi-
ments uncovered 14 previously unknown CSRF vulnerabilities that
can be exploited, for instance, to take over user accounts or entire
websites.
1 INTRODUCTION
No other vulnerability class illustrates the fundamental (cid:30)aws of
the web platform better than Cross-Site Request Forgery (CSRF):
Even a brief visit to an untrusted website can cause the victim’s
browser to perform authenticated, security-sensitive operations
at an unrelated, vulnerable web application, without the victim’s
awareness or consent. To achieve this, it is su(cid:28)cient to create a
single cross-origin HTTP request from the attacker webpage, a
capability that is native to the Web ever since Marc Andreessen
introduced the img HTML tag element in February 1993 [2].
Since its discovery in 2001 [36], CSRF vulnerabilities have been
continuosly ranked as one of the top three security risks for web
applications, along with cross-site scripting (XSS) and SQL injec-
tion (SQLi) [6, 11, 31]. Successful CSRF exploitations can result in
illicit money transfers [43], user account takeover [38], or remote
server-side command execution [19], to name only a few publicly
documented cases. In the past, similar vulnerabilities have been
discovered in many popular websites including Gmail [34], Net-
(cid:30)ix [12], ING Direct [43], and, more recently, in Google, Skype, and
Ali Express websites [38].
Despite its popularity, CSRF has received only marginal atten-
tion, compared to SQLi and XSS. Most of the previous e(cid:29)orts have
been spent in proposing active [20, 21, 24] or passive [6] defense
mechanisms, and little has been done to provide developers and
practitioners with e(cid:29)ective techniques to detect this class of vul-
nerabilities. Classical vulnerability detection techniques utilize dy-
namic [4, 10, 32, 33] and static analysis techniques [3, 9, 18, 28, 39],
while mainly focusing on injection vulnerabilities [9, 10, 18] or
(cid:30)aws speci(cid:27)c to the application logic layer [10, 28, 32, 39]. Unfortu-
nately, none of the existing techniques are easily applicable to CSRF.
As a result, to date, CSRF vulnerabilities are still predominately
discovered by manual inspection [38].
Our Approach—We take a step forward by presenting Deemon, a
model-based security testing framework to enable the detection of
CSRF vulnerabilities. To the best of our knowledge, this is the (cid:27)rst
automated technique that targets the detection of CSRF. Deemon
automatically augments the execution environment of a web appli-
cation, to enable the unsupervised generation of dynamic execution
traces, in the form of, e.g., network interaction, server-side execu-
tion, and database operations. Using these traces, Deemon infers a
property graph-based model of the web application capturing dif-
ferent aspects such as state transitions and data (cid:30)ow models in a
uni(cid:27)ed representation. Operating on the resulting model, Deemon
uses graph traversals to identify security-relevant state-changing
HTTP requests, which represent CSRF vulnerability candidates.
Finally, leveraging the augmented application runtime, Deemon vali-
dates the candidate’s vulnerability against the real web applications.
We assessed Deemon against 10 popular open source web appli-
cations and discovered 14 previously-unkown CSRF vulnerabilities
in four of them. These vulnerabilities can be exploited to take over
websites, user accounts, and compromise the integrity of a database.
Finally, we analyzed our test results to assess the current awareness
level of the CSRF vulnerabilities. In two cases, we identi(cid:27)ed alarm-
ing behaviors in which security-sensitive operations are protected
in a too-selective manner.
To summarize, we make the following contributions:
implemented in di(cid:29)erent ways, e.g., with an HTML iframe tag, a
hidden HTML form with self-submitting JavaScript code, or via the
XMLHttpRequest JavaScript API [40]. Then, when a victim visits
the malicious page, her browser generates such a request, which
automatically includes the the session cookie. The bank checks the
cookie, and executes the required operation. If the HTTP request
encodes, e.g., a request to update user password, then the bank
executes it without the actual consent of the bank account owner.
More formally, we de(cid:27)ne an aCSRF vulnerability as follows.
De(cid:27)nition 1. A web application (e.g., bank.com) exposes an aCSRF
vulnerability, if the web application accepts an HTTP request (e.g.,
message 3) with the following properties:
(P1) The incoming request causes a security-relevant state change
of the web application.
(P2) The request can be reliably created by an attacker, i.e., the
attacker knows all the required parameters and values of
the request.
(P3) The request is processed within a valid authentication context
of a user.
Cross-origin requests can be used in other attacks without nec-
essarily causing a server-side state transition, e.g., accessing user
data stored in the target website. These attacks are addressed by
the same-origin policy (SOP) [5] for cross-origin requests, which
blocks the access to HTTP responses. However, the SOP does not
prevent the browser from performing HTTP requests. To defend
against malicious cross-origin requests, the server-side program
can check the request origin via the header Origin. However, this
header may not be present in a request. The current best-practice
aCSRF protection is the so-called anti-CSRF token [6]. An anti-CSRF
token is a pseudo-random value that is created by the server and
explicitly integrated into the request by the client. Various methods
exist to implement anti-CSRF tokens, including hidden form (cid:27)elds
or custom HTTP headers. Further implementation details are left
out of this document for brevity.
3 CHALLENGES IN DETECTING ACSRF
A security testing approach designed to detect aCSRF vulnerabilities
faces two distinct classes of challenges, neither of them met by the
current state-of-the-art in security testing: detection challenges and
operational challenges, as discussed next.
3.1 Detection Challenges
Detecting aCSRF requires reasoning over the relationship between
the application state, the roles and status of request parameters,
and the observed sequences of state transitions. This leads to a set
of speci(cid:27)c detection challenges that directly result from the unique
characteristics of the vulnerability class.
(C1) State Transitions—The (cid:27)rst challenge is to determine when a
state transition occurs. Server-side programs implement several op-
erations; not all of them a(cid:29)ect the state of the application. Consider,
for instance, the function of searching for a product in an online
store: The user provides search criteria, causing the server-side
program to search its database for matching products. The perma-
nent state of the user’s data in the application is una(cid:29)ected by this
process. However, other operations change the state of the program.
Figure 1: Authenticated CSRF attack.
graphs, that is at the core of Deemon;
• We present Deemon, an automated, dynamic analysis, se-
curity testing technique to detect CSRF vulnerabilities in
productive web applications;
• We present a new modeling paradigm based on property
• We show how Deemon’s models can be instantiated in an
unsupervised, automatic fashion, requiring only selected
GUI interaction recordings;
• We report on a practical evaluation of Deemon using 10
popular web applications, which uncovered 14 severe CSRF
vulnerabilities; and
• We assess the CSRF awareness level and discover alarm-
ing behaviors in which security-sensitive operations are
protected in a selective manner.
2 CROSS-SITE REQUEST FORGERY (CSRF)
In CSRF attacks, an attacker tricks the web browser of the victim
to send a request to a vulnerable honest website in order to cause
a desired, security-sensitive action, without the victim’s aware-
ness or consent. Desired actions can be, for example, illicit money
transfers [43], resetting account usernames [38], or the execution
of speci(cid:27)c server-side commands [19]. CSRF attacks can be distin-
guished into two main categories: authenticated and login CSRF.
In an authenticated CSRF (aCSRF), a pre-established, authenticated
user session between the victim’s web browser and the targeted
web application exists. In a login CSRF, such a relationship does not
exist, but the goal of the attacker is to log the victim in by using
the attacker’s credentials. In the remainder of this paper, we focus
on aCSRF attacks, the signi(cid:27)cantly larger category. An extensive
overview of login CSRF is provided by Sudhodanan et al. [38].
Figure 1 shows an example of an aCSRF attack. The actors of
an aCSRF attack are the user (i.e., the victim), a vulnerable target
website (e.g., bank.com, a home banking website), and an attacker
controlling a website (e.g., attacker.org). In an aCSRF attack,
the victim is already authenticated with the target website. Upon
a successful authentication, the website of the bank persists an
authenticated session cookie in the user’s web browser. From this
point on, whenever the user visits the website of the bank, the
browser includes this session cookie [5]. An attacker can exploit
this behavior of the browser as follows. First, she prepares an HTML
page containing malicious code. The goal of this code is to perform
a cross-origin HTTP request to the website of the bank. This can be
http://attacker.orghttps://bank.com231Consider a user that wants to change their login password. The
server-side program uses the new password to update the database
entry. From that point on, the old password is no longer accepted;
thus, the state has changed.
Existing tools such as web application scanners (See, e.g., [11, 23])
mainly operate in a black-box manner. They crawl a web application
and send requests with crafted input. Vulnerabilities are detected
by inspecting responses. This approach works well with XSS and
SQLi, but does not scale to CSRF as it cannot discern when a request
changes the server-side state. Web crawlers can be made aware
of server-side states by inferring a model capturing transitions
via webpage comparisons: If the HTML content is similar, then
they originate from the same state (See, e.g., Doupé et al. [10]).
However, as pages contain dynamic content, the similarity may
not be determined precisely, thus resulting in inaccurate models.
Finally, techniques to infer models are often speci(cid:27)c to the function
being tested (See, e.g., [32, 41]). aCSRF vulnerabilities can a(cid:29)ect
any function of a web application; thus, function-speci(cid:27)c models
cannot be easily used to detect aCSRF vulnerabilities.
(C2) Security-Relevant State Changes—The second challenge is
to determine the relevance of a state transition. State transitions
can be the result of operations such as event logging and tracing
user activity. These operations indeed change the state of the server,
but they are not necessarily security relevant. While a human may
distinguish the two cases, automated tools without a proper de-
scription of the application logic may not tell the two transitions
apart. Especially for static analysis approaches, security-neutral
state changes are indistinguishable from aCSRF candidates.
(C3) Relationships of Request Parameters and State Transi-
tions—The third challenge consists in determining the relations
between request parameters and state transitions. The identi(cid:27)cation
of these relations is relevant for the detection of aCSRF vulnerabili-
ties. For example, consider a parameter carrying a random security
token. An attacker may not be able to guess such a parameter, thus
preventing her from reconstructing the HTTP request. The identi(cid:27)-
cation of these parameters is important, as it suggests the presence
of anti-CSRF countermeasures, and can be used to develop a testing
strategy. For example, the tester may replay the request without the
token to verify whether the web application properly enforces the
use of the security token. Another example is a parameter carrying
a user input, e.g., a new user password, that is stored in the database.
An attacker can use this parameter to hijack a user account by using
a password that she controls.
Existing techniques do not determine the relations between pa-
rameters and state transitions. Web scanners attempt to identify
security tokens by matching parameter names against a prede(cid:27)ned
list of patterns, e.g., the parameter being called token. In general, to
determine the role of a request parameter, we need to determine the
type of relations with state transitions. As these parameter values
traverse the tiers of an application, we may need to track their
(cid:30)ow across all tiers, e.g., presentation, logic, and data. The resulting
model of data (cid:30)ows can be enriched with type information, e.g.,
both semantic and syntactic types, to determine the nature of the
value, e.g., user-controlled or pseudo-random.
3.2 Operational Challenges
The operational challenges in detecting aCSRF are direct conse-
quences of addressing the detection challenges in the context of
dynamic security testing.
(C4) Transitions in Non-Trivial Application Work(cid:30)ows—The
fourth challenge is to reach state-changing requests in non-trivial
web application work(cid:30)ows. Dynamic analysis techniques such as
unsupervised web scanners explore HTML webpages using breadth-
or depth-(cid:27)rst search algorithms. However, these algorithms are too
simplistic to cope with the complexity of modern web application
work(cid:30)ows in which users need to perform a speci(cid:27)c sequence of
actions. Likewise, static analysis techniques look for patterns in the
source code to determine the presence of a vulnerability. However,
without a proper description of the work(cid:30)ow, static approaches
scale poorly to large applications.
(C5) Side-E(cid:29)ect-Free Testing—Dynamic testing for aCSRF vul-
nerabilities is centered around the iterative detection of state-chang-
ing HTTP requests (Challenges C1 & C2). However, as such requests
indeed change the application state, all further test requests at-
tempting to assess the relationships of request parameters and state
transitions (C3) will most likely operate on a now-invalid state.
Take for example the dynamic testing for aCSRF vulnerabilities
in a shopping cart web application. As soon as a test request has
submitted the cart beyond the check-out state, no further secu-
rity testing on this state transition can be conducted, as the active
shopping cart ceases to exist. Thus, a testing method is needed,
that allows evaluation of HTTP request-induced state changes in a
side-e(cid:29)ect-free manner.
(C6) Comprehensive, Reusable Representation of Applica-
tion Functionality—The (cid:27)nal challenge results from the previous
challenges. To detect security-relevant state changes, we need to
combine aspects of the web application. On the one hand, we have
transitions describing the evolution of the internal states of the
server-side program. On the other hand, we have data (cid:30)ow infor-
mation capturing the propagation of data items across tiers and
states. These aspects can be represented by means of models.
In literature, there are many languages and representations to
specify models, ranging from formal languages [13] to custom
models tailored to the speci(cid:27)c application function being tested
(e.g., [32, 41]). Often, the combination of models has been addressed
in a custom way. The shortcoming of this approach is that the com-
bination is achieved without specifying the relationships between
the models, thus making it hard to reuse it for other techniques. An-
other approach is to create representations that combine elements