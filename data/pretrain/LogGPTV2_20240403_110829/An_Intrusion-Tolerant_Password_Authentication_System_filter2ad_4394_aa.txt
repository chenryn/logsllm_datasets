# An Intrusion-Tolerant Password Authentication System

**Authors:**
- Xunhua Wang
- Mohammad Hossain Heydari
- Hua Lin

**Affiliations:**
- Commonwealth Information Security Center & WySTAR Global Retirement Solutions, Department of Computer Science, James Madison University, Harrisonburg, VA 22807, USA
- Wachovia Corporation, Rockville, MD 20850, USA

**Contact:**
- Email: {wangxx, heydarmh}@jmu.edu

## Abstract

In a password-based authentication system, the server typically stores password verification data (PVD), which is derived from the user’s password using publicly known functions. If an attacker gains access to the PVD (e.g., through a server compromise) and the user's password is in the attacker's dictionary, the attacker can perform offline dictionary attacks. This paper introduces a password authentication system that can tolerate server compromises. The system uses multiple (n) servers to share PVD and never reconstructs the shared PVD during user authentication. Only a threshold number (t, where t ≤ n) of these servers are required for authentication. Compromising up to (t − 1) servers will not allow an attacker to mount offline dictionary attacks, even if the user's password is in the attacker's dictionary. The system remains functional even if some servers are unavailable. We provide the system architecture, implementation details, and experimental results demonstrating its effectiveness. The system can be used to build intrusion-tolerant applications.

**Keywords:** Intrusion tolerance, offline dictionary attack, password-authenticated key exchange (PAKE)

## 1. Introduction

Passwords are widely used for authentication. In a password-based system, a user holds a memorizable password, and the server stores related password verification data (PVD). PVD is derived from the password using publicly known functions and is used by the server for client authentication. For example, in Unix systems, PVD is the hash of the user ID, a salt, and the user's password. Password-based systems are vulnerable to dictionary attacks, where an attacker uses a smaller dictionary of likely passwords rather than exhaustively trying all possible passwords. Even with proactive password checking, a significant fraction of actual passwords may still be vulnerable to dictionary attacks [31].

A client can authenticate to the server in two modes:
1. **Secure Password Transfer:** The client sends the password to the server over a secure connection (e.g., SSL). The password is encrypted, and the session key is random, making it difficult for an attacker to replay or decrypt the password.
2. **Password-Based Challenge/Response:** The client demonstrates possession of the password without sending it. The server sends a challenge, and the client computes a response using the password. However, this method is still vulnerable to offline dictionary attacks if an attacker eavesdrops on the (challenge, response) pair.

To address these issues, password-authenticated key exchange (PAKE) protocols have been developed. PAKE protocols do not transfer the password and instead establish an authenticated session key between the client and the server. Several PAKE protocols have been proposed, including EKE, SPEKE, SRP, PAK, BPR00, SNAPI, and KOY01.

**The Problem:** Both secure password transfer and PAKE approaches address network-based offline dictionary attacks but are vulnerable if the server storing PVD is compromised. An attacker who gains access to the PVD can mount offline dictionary attacks on passwords within their dictionary.

**Our Contribution:** We describe an intrusion-tolerant password authentication system that uses multiple (n) servers to store PVD. The PVD is shared among these servers and is never reconstructed during authentication. Compromising up to (t − 1) servers (where t ≤ n) does not allow an attacker to mount offline dictionary attacks, and the system can function even if (n − t) servers are unavailable. We provide the system architecture, implementation details, and experimental results. The system can enhance the security of web applications and other password-based systems like Telnet and FTP.

## 2. Related Work

For trusted third party (TTP)-based authentication systems like Kerberos, Gong [15] proposed techniques to add intrusion tolerance. Our system does not rely on a TTP. MacKenzie et al. [24] and Di Raimondo and Gennaro [10] proposed threshold PAKE protocols (MSJ02 and DG03, respectively) that use multiple servers to share PVD. These protocols are theoretically significant but are inefficient due to their complexity. Our system uses a different model first proposed in [29], which weakens the assumption on the client program and includes an additional public value, β = g1^δ, hard-coded into the client program. This change makes it easier to achieve intrusion tolerance on the server side.

## 3. System Architecture

The architecture of our intrusion-tolerant password authentication system consists of four components:
1. **Client Program:** Runs on the client side, accepts user name and password, connects to the service server, performs PAKE authentication, and establishes a cryptographically strong session key.
2. **Service Server Interface:** Runs on the service server (e.g., Telnet, FTP, web server) and connects to available PVD servers for user authentication.
3. **PVD Servers:** Store shared PVD and help compute the authenticated session key if the user authentication is successful.
4. **Management Server:** Enrolls new users, resets/regenerates user passwords, and audits system activity.

**Communication Links:**
- Secure connections between the service server interface and PVD servers are protected using SSL, with both client and server authentications enabled.
- Connections between the management server and PVD servers are also protected using SSL.

## 4. System Setup

The system has two parameters, t and n, where n is the number of PVD servers and t (t ≤ n) is the minimum number of PVD servers required for trust. When the system is initialized, the management server generates four public parameters: (g1, g2, N, q), where N is a safe prime (N = 2q + 1) and q is also a prime. g1 and g2 are randomly chosen elements in the finite field FN with order q, ensuring that the discrete logarithms logg2 g1 and logg1 g2 are unknown.

## 5. Data Flow

[This section will describe the data flow among the system components, including the steps for user authentication and session key establishment.]

## 6. Implementation Details

[This section will provide detailed information on the implementation of the intrusion-tolerant authentication system, including performance data and methods to improve performance.]

## 7. Operational Issues

[This section will discuss operational issues such as system maintenance, scalability, and potential challenges.]

## 8. Applications

[This section will explore how the described system can be used to build intrusion-tolerant applications, providing examples and case studies.]

## 9. Conclusion

[This section will summarize the key points of the paper, reiterate the contributions, and provide concluding remarks.]

---

This revised version aims to make the text more coherent, professional, and easier to follow.