title:An Intrusion-Tolerant Password Authentication System
author:Xunhua Wang and
Mohammad Hossain Heydari and
Hua Lin
An Intrusion-Tolerant Password Authentication System
Xunhua Wang
‡
, M. Hossain Heydari
Hua Lin
Commonwealth Information Security Center &
WySTAR Global Retirement Solutions
Department of Computer Science
James Madison University
Harrisonburg, VA 22807 USA
{wangxx,heydarmh}@jmu.edu
Wachovia Corporation
Rockville, MD 20850 USA
PI:EMAIL
Abstract
In a password-based authentication system,
to au-
thenticate a user, a server typically stores password ver-
iﬁcation data (PVD), which is a value derived from the
user’s password using publicly known functions. For those
users whose passwords fall within an attacker’s dictio-
nary, their PVDs, if stolen (for example, through server
compromise), will allow the attacker to mount off-line dic-
tionary attacks. In this article, we describe a password
authentication system that can tolerate server compro-
mises. The described system uses multiple (say n) servers
to share password veriﬁcation data and never recon-
structs the shared PVD during user authentications. Only
a threshold number (say t, t ≤ n) of these servers are re-
quired for a user authentication and compromising
up to (t − 1) of
these servers will not allow an at-
tacker to mount off-line dictionary attacks, even if a user’s
password falls within the attacker’s dictionary. The de-
scribed system can still function if some of the servers
are unavailable. In this paper, we give the system archi-
tecture and implementation details. Our experimental re-
sults show that the described system works well. The given
system can be used to build intrusion-tolerant applica-
tions.
Keywords: Intrusion tolerance, off-line dictionary at-
tack, password-authenticated key exchange (PAKE)
1. Introduction
Passwords are widely used for authentication.
In
a password-based authentication system, a user
(also
called client hereinafter) holds a memorizable pass-
word and a server stores related password-veriﬁcation data
‡ A part of this work has been supported by a Cisco CIAG grant.
(PVD). PVD is a value derived from the password us-
ing publicly known functions and is used by the server
for client authentication. For example, in most Unix sys-
tems, PVD is the hash of user ID, a salt, and the user’s pass-
word. Password-based systems are notoriously vulnerable
to the dictionary attack, in which an attacker does not ex-
haust all possible passwords but works on a smaller dictio-
nary of likely passwords for password searching. It should
be noted that for a speciﬁc user, his password might not al-
ways fall within an attacker’s dictionary but a high frac-
tion of the actual passwords may match passwords of
a carefully constructed dictionary, even when a proac-
. Wu [31] has
tive password checking program is used
demonstrated that, in a Kerberos system where a proac-
tive password checker is used, about 8% (2045 out of
25,000) of the passwords are still vulnerable to dictio-
nary attacks.
∗
With a password, the client can use two different modes
to authenticate himself to the server. First, he can simply
send his password to the server, which applies the related
PVD to check the validity of the received password. For se-
curity reasons, the password should be encrypted before it
is transferred. Most password-based authentication systems
on the web employ this mode: a Secure Socket Layer (SSL)
connection is established ﬁrst between the client and the
server and then a password is sent to the server via the SSL
connection for client-side authentication. Since each SSL
session establishes a random session key by which the pass-
word is encrypted, if an attacker eavesdrops the encrypted
password, he will not be able to replay it or decrypt it. Nei-
ther can he use the encrypted password to mount an off-line
dictionary attack, as the encrypting SSL session key is ran-
dom. Throughout this article, this type of authentication is
∗ Most proactive password checkers use well-deﬁned rules for password
checking [31] and an attacker could construct a better password dic-
tionary so that some passwords may escape the proactive password
checking but still fall within the attacker’s dictionary. Interested read-
ers can read [31] for methods to construct such a password dictionary.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:45:51 UTC from IEEE Xplore.  Restrictions apply. 
called secure password transfer. We stress that in this mode
the server stores PVD for password veriﬁcation.
†
The second mode for client-side authentication is to
demonstrate the possession of the password without send-
ing it. The password-based challenge/response authentica-
tion system [21] falls into this mode: a client authenticates
himself by computing a response using his password and
a challenge chosen by the server. It is this computed re-
sponse, not the password, that is sent back to the server.
However, the password-based challenge/response system is
still not secure since an attacker can eavesdrop a (challenge,
response) pair and use them to mount off-line dictionary at-
tacks. A new protocol paradigm following this path, called
password-authenticated key exchange (PAKE), was devel-
oped [3]. In PAKE, user’s password is not transferred at
all and instead, the client authentication is accomplished
through the capability of establishing an authenticated ses-
with the server, who stores the related PVD. This
sion key
authenticated session key would not be possible if the client
does not have the password or the server does not have
the related PVD. A good PAKE protocol is secure against
both the eavesdropping-based dictionary attack and any ac-
tive attacks. PAKE protocols achieve these security goals
through the marriage with public key exchange techniques.
To date, several PAKE protocols have been proposed, in-
cluding the Encrypted Key Exchange (EKE) [3, 4], Secure
Password Exponential Key Exchange (SPEKE) [18, 17],
Simple Remote Password (SRP) [30], the PAK protocol [5],
the BPR00 protocol [1], the SNAPI protocol [23], and the
KOY01 protocol [20]. The SPEKE, SRP, PAK and KOY01
protocols use the Difﬁe-Hellman key exchange algorithm
[12] while BPR00 and SNAPI use the RSA algorithm [27].
We stress three facts about PAKE: 1) a PAKE user possesses
a password only; 2) the client program used by the user to
log into the system has only system parameters (such as the
g and q for Difﬁe-Hellman) and no secrets (say, a private
key) are hard coded into it. Thus, an attacker cannot com-
promise PAKE security by obtaining a copy of the client
program and examining it; 3) the client program should be
reliable in that its code is not corrupted. (Otherwise, a cor-
rupted client program can simply keep a copy of the pass-
word typed by the user and send it to the attacker.)
THE PROBLEM. Both the secure password transfer ap-
proach and the PAKE approach address off-line dictionary
attacks from the network very well. However, the secure
password transfer approach and most of the existing PAKE
protocols use a single server to store users’ PVD. Recall
that PVD is derived from passwords using a publicly known
function. This makes them vulnerable to another type of off-
line dictionary attack: for those passwords that fall within an
†
This authenticated session key is cryptographically strong and can be
used to protect subsequent communications after the authentication.
attacker’s dictionary (such as the 2045 passwords out of the
25,000 reported in [31]). If the attacker managed to com-
promise the centralized server and steal the PVD, he could
simply guess a password (from his dictionary), compute the
corresponding PVD (using the publicly known function)
and verify the correctness of the password by comparing
the computed PVD against the stolen PVD. On the other
hand, server exposure seems inevitable. For instance, an at-
tacker might gain the root privilege of the server by ex-
ploiting bugs in server software (for instance, bug [9] in
the Apache web server, and bug [8] in Kerberos server).
It should be noted that simply applying a threshold secret
sharing scheme (such as the Shamir secret sharing) over
PVD does not solve the problem since the shared secret
(i.e., the PVD) is reconstructed when used, which still al-
lows an attacker to mount an off-line dictionary attack if the
reconstruction point is compromised.
OUR CONTRIBUTION.
In this article, we de-
scribe an intrusion-tolerant password authentication sys-
tem. This system employs multiple (say n) servers —
called PVD servers — to store PVD. Among the multi-
ple PVD servers a user’s PVD is shared and the shared PVD
is never reconstructed during user authentication. The de-
scribed system is intrusion-tolerant
in the sense that
compromising up to (t − 1), 2 ≤ t ≤ n, servers will not al-
low the attacker to mount off-line dictionary attacks and the
system can still function if (n − t) servers go down. We ex-
plore the architecture and implementation details of the
intrusion-tolerant system. Our experimental results show
that the described system works well. One example appli-
cation of our described system is to enhance the security
of the web applications that use password-based authenti-
cation. Other password-based applications such as Telnet
and FTP can also be made intrusion-tolerant by integrat-
ing the described system.
This article is organized as follows. Section 2 gives the
related work and Section 3 presents the system architec-
ture. Section 4 describes the system setup procedure and
Section 5 gives the data ﬂow among the system compo-
nents. In Section 6, we describe the implementation details
of the intrusion-tolerant authentication system, give some
performance data and present methods to improve the per-
formance. Section 7 discusses some operational issues and
Section 8 explores how the described system might be used
to build intrusion-tolerant applications. Concluding remarks
are given in Section 9.
2. Related Work
For trusted third party (TTP)-based authentication sys-
tems such as Kerberos, Gong [15] gave techniques to add
intrusion tolerance to the trusted third party. The intrusion-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:45:51 UTC from IEEE Xplore.  Restrictions apply. 
tolerant password authentication system described in this
article is not based on any trusted third party.
MacKenzie et al. [24] proposed the ﬁrst threshold PAKE
protocol (called MSJ02 hereinafter), which uses multiple
servers to share PVD and is provably secure under the ran-
dom oracle model [2, 7]. Di Raimondo and Gennaro [10]
gave another provably secure (under the standard assump-
tion model) threshold PAKE protocol (called DG03 here-
inafter), which is built on the KOY01 PAKE protocol [20].
(The KOY01 PAKE protocol provides provable security (un-
der the standard assumption model) but it uses a single
server to store PVD and the DG03 protocol enhances it by
using multiple servers.) Both the MSJ02 protocol and the
DG03 protocols are theoretically signiﬁcant in that they pro-
vide provable security (under different security models).
However, they are relatively inefﬁcient due to their com-
plexity. For example, the DG03 protocol uses one-time dig-
ital signature as building block. Since one-time digital sig-
natures are typically inefﬁcient, this makes DG03 inefﬁcient
in communication. (For instance, if the modulus p is 1024
bit and the Merkle one-time digital signature scheme is used
in KOY01 and DG03, both the one-time veriﬁcation key and
(cid:2)|K) will be 20 kilo-
the one-time digital signature on (β
bytes, which is pretty big for a password-based authenti-
cation.) We believe that, for a password-based authentica-
tion system, both security and efﬁciency are important. In
contrast, the intrusion-tolerant password authentication sys-
tem described here uses a different model ﬁrst proposed in
[29]. In this model, the assumption on the client program is
further weakened and, besides (g1, g2, N, q), an additional
public value, β = g1
δ, is also hard coded into the client pro-
−1 is shared among the multiple PVD servers.
gram and δ
This change makes it much easier for us to achieve intru-
sion tolerance on the server side. We like to stress that, in
our intrusion-tolerant system, the client program has no se-
cret hard coded into it and that the client program can be
examined by attackers without losing security. Compared
to [29], the protocol used in the described system is simi-
lar but more scalable, which we shall elaborate later.
3. System Architecture
Depicted in Figure 1 is the architecture for the intrusion-
tolerant password authentication system. There are four
components in the system: the client program, the ser-
vice server interface, the PVD servers and the management
server. The client program runs at the client side. It accepts
user name and password, connects to the service server as
requested, performs a PAKE authentication on the user’s be-
half to the service server and establishes an authenticated
(cryptographically) strong session key to protect subsequent
communication between the client and the service server.
There is no secret hard coded in the client program and the
client program erases the user’s password from memory im-
mediately after the successful login. The service server in-
terface runs on the service server such as Telnet, FTP and
web server. It is activated when a user login request is re-
ceived and it then connects to the available PVD servers for
a user authentication. The PVD servers stay behind the ser-
vice server and are invisible to the client. A user’s PVD is
shared among the multiple PVD servers and is never recon-
structed during the user authentication. For a user authen-
tication, only a threshold number of PVD servers are re-
quired. If a user authentication is successful, the participat-
ing PVD servers help the service server compute an authen-
ticated session key which can also be computed indepen-
dently by the client program since it has the password typed
in by the user. The management server is used to enroll new
users to the system, reset/regenerate user passwords, and au-
dit system activity.
Communication links. In our system, the communi-
cation links between the service server interface and the
PVD servers are protected. These secure connections are
required for the transfer of session key shares from par-
ticipating PVD servers to the service server and they are
realized through SSL [11], in which the service server in-
terface acts as the SSL client and the PVD servers act as
the SSL server. Both the SSL client and server authenti-
cations are enabled. The connections between the manage-
ment server and the PVD servers are also protected through
SSL, in which the management server acts as the SSL client
and the PVD servers act as the SSL server. In these connec-
tions, both SSL client and server authentication are also en-
abled. Over these secure connections the PVD shares are
distributed to the PVD servers after the management server
generates them.
4. System Setup
There are two parameters about the PVD servers, t and
n. n is the number of PVD servers and t, t ≤ n, is the
minimum number of PVD servers to be trusted. t is cho-
sen when the system is initialized while n can dynamically
change. The multiple PVD servers are numbered as PVD
server 1, 2, . . . , n.
When the system is initialized, on the management
server, four public parameters, (g1, g2, N, q), are gen-
erated where N is a safe prime, that is, N = 2q + 1
and q is also a prime. g1 and g2 are two elements in ﬁ-
nite ﬁeld FN and their orders are q. g1 and g2 are ran-
domly chosen so that both the discrete logarithm of g1
to the base g2 (that is, logg2 g1) and the the discrete log-
arithm of g2 to the base g1 (that is, logg1 g2) are un-
known.
• The selection of N and q. In our implementation, we
used the prime from the IKE (Internet Key Exchange)
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:45:51 UTC from IEEE Xplore.  Restrictions apply. 
PVD server 1
PVD server 2
Internet
Network
Client
Alice
Service
server
Management
server