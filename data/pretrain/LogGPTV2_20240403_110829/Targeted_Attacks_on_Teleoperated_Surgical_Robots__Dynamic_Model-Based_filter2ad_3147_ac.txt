### Prevention of Damage to Robotic Arms and Instruments

#### 1. Impact on the Physical System
Corruption of packets sent by the control software to the USB I/O boards was achieved using a malicious wrapper around the `write` system call. This wrapper injects a random value (e.g., between 0 and 100) into one of the bytes (excluding Byte 0). The corruption caused abrupt movements in the robotic arms, leading both the RAVEN II software and hardware to enter the "E-STOP" state. In some cases, these abrupt movements resulted in the breaking of cables on the robot. Visualizations of this scenario in the simulator and on the actual robot are available in references [19] and [24].

This disruption in robot operation can lead to interruptions in surgery, damage to robotic instruments due to collisions, or harm to the patient, such as tearing or perforation of tissues if the instruments were inside the body. If the malicious wrapper is loaded by setting the `LD_PRELOAD` environment variable in the `bashrc` file of the target user, the malware will be reloaded into the system each time the robot is run, even after a system restart. Consequently, the "E-STOP" condition would occur with every invocation of the system call, effectively rendering the robot unavailable to the surgical team.

As discussed in [25], several safety incidents reported to the U.S. Food and Drug Administration (FDA) have been attributed to unexpected movement of robotic instruments due to accidental mechanical or electrical malfunctions or unintentional human errors (not malicious attacks), leading to tearing or perforation of patient tissues, bleeding, and minor or severe injuries. Our results show that similar adverse incidents can be caused by malicious tampering with the robotic system, potentially harming patients or interrupting the surgical procedure without being identified as malicious activity.

#### 2. Impact on the Cyber Domain
We also measured the performance overhead of the malicious system call wrappers on the normal operation of the robot and other processes running in the system. Table II shows the performance overhead of the malicious wrappers, measured by the execution time of the `write` system call wrapper in the RAVEN control process. We collected measurements before and after installing the malicious library wrapper over 50,000 runs of the system call.

| Time (Î¼s) | Min | Max | Mean | Std. |
|-----------|-----|-----|------|------|
| Baseline System Call | 0.2 | 12.7 | 0.9 | 1.3 |
| With Malicious Wrapper (Logging) | 7.9 | 1.5 | 38.1 | 6.7 |
| With Malicious Wrapper (Injection) | 20.0 | 3.6 | 7.5 | 1.1 |

The average execution time of the baseline `write` system call in the RAVEN process was around 1.3 microseconds. The malicious wrapper for logging the USB packets sent by the control software (including checking the process name and file descriptor and sending UDP packets to the remote attacker) added an average of 18.7 microseconds to the execution time. The malicious wrapper that injected malicious bytes to the USB packets (including checking the process name and file descriptor, determining if the desired robot state is reached, and overwriting the malicious value) added about 2.3 microseconds to the baseline `write` system call execution time. These overheads are within the timing constraints (1 millisecond) of the real-time process running the robot control software, so the malicious wrapper does not significantly impact the performance of the robot control, and its effect would not be noticed by human operators or users of the system.

### Why This Attack is Not Easy to Detect

Two important vulnerabilities allow the attacker to identify critical times during robot operation and inject malicious commands: (i) the Linux dynamic loading feature for shared libraries and (ii) the leaking of robot state information from packets transferred between the robot control software and the USB I/O boards.

Malicious shared library attacks or DLL hijacking attacks have been known for some time, but the security community has not paid much attention to them because they require access to the file system on the target machine or remote shell access. Recent reports on attacks to safety-critical cyber-physical systems show the existence of many vulnerabilities that allow remote malicious access. Table V and Table III list vulnerabilities exploited by recent real attacks on hospital networks and commonly used medical devices.

The malicious shared library attacks presented here are difficult to detect in the cyber domain by existing malware detection techniques because:
1. **Malicious actions are confined to the robot control software:**
   - No separate processes are created to run the malware.
   - No system-wide malicious activities are performed.
   - The performance of the target application is not affected.
2. **No changes are made to the control flow of the target process.** The functions in the shared library are invoked by the process following its normal execution flow.
3. **No anomalies in the syntax of robot control commands are introduced.**

Furthermore, the surgical robot operates under stringent real-time constraints (e.g., in RAVEN II, the operational cycle is 1 millisecond). The robot control loop and any real-time detection and mitigation actions must complete within 1 millisecond to avoid potential deviations in system dynamics, which could lead to robot damage or patient harm. Traditional malware detection techniques (e.g., signature- or anomaly-based and control flow checking), encryption mechanisms (e.g., "bump-in-the-wire" (BITW) solutions [31][32]), and remote software attestation [33][34] may introduce significant overhead in system operation and still not eliminate the possibility of TOCTOU exploits. To address this challenge, we developed dynamic model-based detection and mitigation mechanisms, as discussed next.

### Dynamic Model-Based Detection and Mitigation

In this section, we describe the dynamic model-based analysis framework we developed to (i) assess the impact of attacks on the robot physical system and (ii) preemptively detect and mitigate their impact before they manifest in the physical domain (see Figure 7). We validated the detection experimentally using two real attacks involving the injection of unintended user inputs (scenario A) and unintended control motor torque commands (scenario B).

The dynamic model allows us to determine the subsequent state of robot end-effectors and motors incrementally based on the current state and real-time input received from the RAVEN control software. The methods for modeling serial chain robot manipulators and RAVEN II robot dynamics are well understood in the literature, and we briefly outline them for completeness. It is crucial to ensure that the output of the dynamic model closely follows the actual robot movements in real-time for accurate detection.

To preemptively detect and mitigate the impact of attacks, the detection mechanisms need to dynamically estimate the consequences of executing a command on the physical system to ensure the final end-effector movements are within specified safety limits and within the workspace of the robot. There are two main challenges for implementing such monitoring mechanisms at lower layers of the control structure (e.g., at the interface device or the motor controllers):

1. **Estimation of Next Motor and Joint Positions:**
   - The detector needs to estimate the next motor (mpos) and joint positions (jpos) that will be achieved upon executing a given DAC command.
   - The end-effector positions (pos) and orientations (ori) that result from those commands in the next control loop.
   - If the estimated next joint position and end-effector position and orientation values exceed a safety limit (defined by a threshold value) from their current values, the DAC command should not be delivered to the motors, and the robot should move to an emergency E-STOP state (see Figure 7(b)).
   - Solving these estimation problems requires modeling the dynamics of the physical robot (motors and joint dynamics) for estimating the next motor and joint positions.

2. **Real-Time Constraints:**
   - Robotic control systems often face tight real-time constraints. For example, the RAVEN II control loop has a real-time requirement of receiving and processing each packet from the USB boards and sending the next control command to the motor controllers every 1 millisecond.
   - Any preemptive detection mechanism implemented at the software or software-physical interface layers should perform dynamic state estimations within the real-time constraints imposed by the robot control design.

#### Framework Overview

Figure 7(a) shows the dynamic model-based simulation framework we developed to assess the impact of attacks on the physical system and validate the detection and mitigation mechanisms. The framework consists of:

- **Master Console Emulator:** Mimics the teleoperation console functionality by generating user input packets based on previously collected trajectories of surgical movements made by a human operator and sends them to the RAVEN control software.
- **Graphic Simulator:** Animates the robot movements in real-time by listening to the ROS topic generating the robot state and mapping robotic arms and instruments movements to CAD models of robot mechanical components in a 3D virtual environment.
- **Dynamic Model of RAVEN II Physical System:** Integrates motor dynamics and robot manipulator dynamics to model the physical system behavior in real-time.
- **Attack Injection Engine:** Creates attack scenarios targeting different layers of the robot control structure by injecting faults into the robot control software modules.

**Dynamic Model:**
We simulated the functionality of the RAVEN II surgical robot by developing a software module that mimics the dynamical behavior of the robotic actuators. This is done by modeling the MAXON RE40 and RE30 DC motors used by the robot [12] and the robot manipulators (joints). As shown in Figure 7, this model is integrated with the RAVEN control software and can run with or without the physical robot. At each cycle of the software control loop (shown in Figure 2), the model receives the same control commands (DAC values) sent to the physical robot (calculated based on the desired joint and motor positions for the next time step) and estimates the next motor and joint positions.

The challenge in developing the model is to perform estimations within the time constraints of the robot's single iteration loop. To reduce computational cost while maintaining model accuracy and real-time guarantees, we model the robot's dynamics in a way that ensures the estimations are both fast and accurate.