prevents causing damage to the robotic arms and instruments.  
1)  Impact  on  the  Physical  System:  The  corruption  of 
packets sent by the control software to the USB I/O boards was 
achieved using malicious wrapper around the write system call 
to inject a random value (e.g., between 0 and 100) to one of the 
bytes (other than Byte 0). This corruption caused abrupt jumps 
of the robotic arms, leading both the RAVEN II software and 
hardware  to go  into  the  “E-STOP”  state.  In  a few  cases,  the 
abrupt jump of robotic arms, caused the breaking of the cables 
on the robot. The visualization of this scenario in the simulator 
and on the actual robot is available in [19] and [24].  
This  disturbance  of  the  robot  operation  may  lead  to  an 
interruption in the surgery, damage to the robotic instruments 
due to collision, or harm to the patient in the form of tearing or 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
perforation of tissues if the instruments were inside the body. If 
the malicious wrapper is loaded by setting the LD_PRELOAD 
in the bashrc file of the target user, the malware will be reloaded 
to the system on each run of the robot even after restarting the 
system. Consequently, the “E-STOP” condition would happen 
on every invocation of the system call and practically make the 
robot unavailable to the surgical team.  
As discussed in [25], in several safety incidents reported to 
the  U.S.  Food  and  Drug  Administration  (FDA),  unexpected 
movement of robotic instruments due to accidental mechanical 
or  electrical  malfunctions or unintentional human  errors (not 
malicious  attacks)  led  to  tearing  or  perforation  of  patient 
tissues, bleeding, and minor or severe injuries. Our results show 
that  similar  adverse  incidents  can  be  caused  by  malicious 
tampering with the robotic system and potentially harm patients 
or interrupt the surgical procedure without being identified as 
malicious activity.  
2)  Impact on the Cyber Domain: We also measured the 
performance overhead of the malicious system call wrappers on 
the normal operation of the robot and other processes running 
in the system. Table II shows the performance overhead of the 
malicious  wrappers,  measured  by  the  execution  time  of  the 
write system call wrapper in the RAVEN control process. We 
collected  measurements  before  and  after 
the 
malicious library wrapper in 50,000 runs of the system call.  
installing 
RAVEN 
Process 
TABLE II. PERFORMANCE OVERHEAD OF MALICIOUS SYSTEM CALL
Time (μs)  Min  Max  Mean  Std. 
0.2 
12.7 
0.9 
1.3 
Baseline System Call 
With Malicious Wrapper 
 Logging 
Injection 
7.9 
1.5 
38.1 
6.7 
20.0 
3.6 
7.5 
1.1 
The average execution time of the baseline write system call 
in  the  RAVEN  process  was  around  1.3  microseconds.  The 
malicious  wrapper  for  logging  the  USB  packets  sent  by  the 
control software (including checking the process name and the 
file  descriptor  and  sending  the  UDP  packets  to  the  remote 
attacker) on average added 18.7 microseconds to the execution 
time  of  the  write  system  call  in  the  RAVEN  process.  The 
malicious wrapper that injected the malicious bytes to the USB 
packets  (including  checking  for  the  process  name  and  file 
descriptor,  checking  the  packet  contents  to  determine  if  the 
desired  robot  state  is  reached,  and  overwriting  the  malicious 
value)  added  about  2.3  microseconds  to  the  baseline  write 
system  call  execution  time.  These  overheads  are  within  the 
timing  constraints  (1  millisecond)  of  the  real-time  process 
running the robot control software. So the malicious wrapper  
does not have any adverse impact on the performance of robot 
control  and  its  effect  would  not  be  noticed  by  the  human 
operators or users of the system.  
D.  Why this Attack is not Easy to Detect? 
scenarios 
important 
vulnerabilities  allow  the  attacker  to  identify  the  critical  time 
during robot operation and inject the malicious commands: (i) 
Linux  dynamic  loading  feature  for  shared  libraries  and  (ii) 
leaking of robot state information from the packets transferred 
between the robot control software and the USB I/O boards.  
the  presented  attack 
two 
In 
Malicious  shared  library  attacks  or  dll  hijacking  attacks 
have been around. However, the security community has not 
paid  much  attention  to  this  type  of  intrusions,  because  to  be 
successful, such attacks require access to the file system on the 
target machine or a remote shell access. Several recent reports 
on  attacks  to  safety-critical  cyber-physical  systems  show  the 
existence of many vulnerabilities that allow remote malicious 
access.  Table  V 
and 
vulnerabilities exploited  by  the  recent  real  attacks  on  the 
hospital networks and commonly used medical devices. Table 
III  shows  examples  of  recent  zero-day  vulunerablities  in 
different  operating  systems  allowing  remote  code  execution, 
which could be used to download and setup the right scenarios 
for malicious shared library attacks.  
shows 
points 
entry 
the 
The malicious shared library attacks presented here cannot 
be easily detected in the cyber-domain by the existing malware 
detection techniques, because:  
1.  Malicious  actions  are  confined  to  the  robot  control 
software:  
a)  no separate processes are created to run the malware. 
b)  no system-wide malicious activities are performed 
c)  the performance of target application is not affected 
2.  No  changes  are  made  to  the  control  flow  of  the  target 
process. The functions in the shared library are invoked by 
the process following its normal execution flow. 
3.  No anomaly in the syntax of robot control commands are 
introduced.  
Furthermore, the surgical robot puts rather stringent real-
time constrains on the system operation (e.g., in RAVEN II the 
operational cycle is 1 millisecond). The robot control loop plus 
any real-time detection and mitigation actions must complete 
within  1  millisecond  to  avoid  potential  deviation  in  system 
dynamics, leading to robot damage or patient harm. Traditional 
malware  detection  techniques  (e.g.,  signature-  or  anomaly-
based  and  control  flow  checking),  encryption    mechanisms 
(e.g.,  “bump-in-the-wire”  (BITW)  solutions  [31][32]),  and 
remote software attestation [33][34] may introduce significant 
overhead  in  the  system  operation  and  still  not  eliminate  the 
possibility  of  TOCTOU  exploits.  In  order  to  address  this 
challenge,  we  develop  dynamic  model-based  detection  and 
mitigation mechanisms as discussed next.  
TABLE III. RECENT ZERO-DAY VULNERABILITIES  
ALLOWING REMOTE CODE EXECUTION OR PRIVILEGE ESCALATION 
Impact 
CVE 
Vulnerability  Affected 
Systems 
Linux, 
CVE-2015-5123 Flash Player 
Windows,  
Gain administrator 
shell on target 
machine 
OS X 
CVE-2015-0235 
(GHOST) 
CVE-2014-4113
CVE-2014-6271 
(Shellshock) 
Glibc 
Linux 
Privilege 
Escalation  Windows 
Linux,  
Unix, 
OS X 
Bash shell 
Remote code 
execution 
Escalate to 
SYSTEM Privilege
Remote code 
execution 
CVE-2015-5783 OS X 10.10 
Mac 
Gain root access 
Date
[Ref]
Jul. 
2015 
[26] 
Jan. 
2015 
[27] 
Oct. 
2014 
[28] 
Sep. 
2014 
[29] 
Aug. 
2015 
[30] 
401
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
IV. DYNAMIC MODEL-BASED DETECTION AND MITIGATION 
In  this  section  we  describe  the  dynamic  model-based 
analysis  framework  that  we  developed  for  (i)  assessing  the 
impact  of  attacks  on  the  robot  physical  system  and  (ii) 
preemptive detection of the attacks and mitigating their impact 
before they manifest in the physical domain (see Figure 7). We 
validated  the  detection  experimentally  using  two  real  attacks 
involving injection of unintended user inputs (scenario A) and 
unintended control motor torque commands (scenario B).  
The dynamic model allows us to determine the subsequent 
state of robot end-effectors and the motors incrementally based 
on the information on the current state and the real time input 
received from the RAVEN control software. The methods for 
modeling the serial chain robot manipulators and RAVEN II 
robot  dynamics  are  well  understood  in  the  literature  and  we 
briefly outline them for completeness. What is important here 
is  to  ensure  that  the  output  of  the  dynamic  model  closely 
follows  the  actual  robot  movements  in  real-time  so  that  the 
detection is performed accurately. 
To preemptively detect and mitigate the impact of attacks, 
the  detection  mechanisms  need  to  dynamically  estimate  the 
consequence of executing a command on the physical system 
to ensure the final end-effector movements are within specified 
safety limits and within the workspace of the robot. There are 
two  main  challenges  for  implementing  such  monitoring 
mechanisms at lower layers of the control structure (e.g., at the 
interface device or the motor controllers): 
1)  The detector needs to estimate: 
a.  Next motor (mpos) and joints positions (jpos) that will 
be achieved upon executing a given DAC command. 
b.  End-effector positions (pos) and orientations (ori) that 
result from those commands in the next control loop.  
If the estimated next joint position and end-effector position 
and ortientation values are beyond a safety limit (defined by a 
threshold value) from their current values, the DAC command 
should not be delivered to the motors and the robot should move 
to  a  emergency  E-STOP  state  (see  Figure  7(b)).  Finding  a 
solution  to  the  above  estimation problems  requires  modeling 
the dynamics of physical robot (motors and joint dynamics) for 
estimating the next motor and joint positions.  
2)  The  robotic  control  systems  often  face  tight  real-time 
constraints. For example, the RAVEN II control loop has a 
real-time  requirement  of  receiving  and  processing  each 
packet from the USB boards and sending the next control 
command to the motor controllers every 1 millisecond.  
Thus, any preemptive detection mechanism implemented at the 
software or software-physical interface layers should perform 
the dynamic state estimations within the real-time constraints 
imposed by the robot control design.  
A.  Framework Overview 
Figure  7(a)  shows  the  dynamic  model-based  simulation 
framework that we developed to assess the impact of the attacks 
on  the  physical  system  and  validating  the  detection  and 
mitigation mechanisms. The framework consists of:  
•  A master console emulator that mimics the teleoperation 
console functionality by generating user input packets based 
402
(a) 
(b) 
Figure 7. (a) Simulation framework for assessment of the impact of attacks. 
(b) Dynamic-model based detection and mitigation mechanisms. 
on previously collected trajectories of surgical movements 
made by a human operator and sends them to the RAVEN 
control software. 
•  A graphic simulator that animates the robot movements in 
real time by listening to the ROS topic generating the robot 
state and mapping robotic arms and instruments movements 
to CAD models of robot mechanical components in a 3D 
virtual environment. 
•  A dynamic model of the RAVEN II physical system, which 
integrates  the  motor  dynamics  and  robot  manipulator 
dynamics together to model the physical system behavior in 
real time. 
•  An  attack  injection  engine  which  can  create  attack 
scenarios targeting different layers of robot control structure 
by injecting faults into the robot control software modules.     
1)  Dynamic  Model:  We  simulated  the  functionality  of 
RAVEN II surgical robot by developing a software module that 
mimics the dynamical behavior of the robotic actuators. This is 
done by modeling the MAXON RE40 and RE30 DC motors 
used by the robot [12] as well as the robot manipulators (joints).  
As  shown  in  Figure  7,  this  model  is  integrated  with  the 
RAVEN  control  software  and  can  run  with  or  without  the 
physical robot. At each cycle of software control loop (shown 
in  Figure  2)  the  model  receives  the  same  control  commands 
(DAC values) sent to the physical robot (calculated based on 
the desired joint and motor positions for the next time step) and 
estimates the next motor and joint positions.  
through 
iteration 
loop.  To 
the  control 
The  challenge  in  developing  the  model  is  to  be  able  to 
perform estimations within the time constrains of the robot’s 
single 
reduce 
computational  cost  while  maintaining  the  model  accuracy  as 
well as  the system real time guarantees, we model the robot 