*   多达 1，200 的 Docker Swarm 集大小:
*   支持自定义 vNET
Azure 容器服务主要是以 DC/操作系统作为关键组件之一构建的，其实现经过优化，便于在微软 Azure 上创建和使用。ACS 体系结构有三个基本组件:用于管理虚拟机运行状况的 Azure Compute、用于容器运行状况管理的 Mesos 和用于 Docker API 管理的 Swarm:
![Microsoft Azure container service architecture](img/image_10_019.jpg)
Microsoft Azure 容器架构
# 故障排除-微软 Azure 容器服务
在本节中，我们将了解如何部署 Docker Swarm 集群，并在 Microsoft Azure 中提供编排器配置的详细信息:
1.  We need to create an RSA key, which will be requested in the deployment steps. The key will be required to log in to the deployed machines post installation:
    ```
     $ ssh-keygen
    ```
    一旦生成，就可以在`~/root/id_rsa`中找到密钥
2.  Click on the **New** button in your Azure account portal:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_022.jpg)
3.  Search for the **Azure Container Service** and select it:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_023.jpg)
4.  After this step, select **Resource Manager** as the deployment model and click on the **Create** button:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_024.jpg)
5.  Configure the basics settings page, the following details are required: **User name**, which will be administrator for the virtual machines deployed in the Docker Swarm cluster; the second field is to provide the **SSH public key** we created in the step 1; and create a new resource group by specifying the name in the **Resource Group** field:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_025.jpg)
6.  Select the **Orchestrator configuration** as **Swarm**, **DC/OS**, or **Kubernetes**, as required:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_026.jpg)
7.  In the next step, provide the orchestrator configuration, **Agent count**, and **Master count** for this deployment. Also, the DNS prefix can be provided as `dockerswarm` or as required:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_027.jpg)
8.  Check the **Summary**, and once validation is passed click on **OK**. On the next screen, click on the **Purchase** button to go ahead with the deployment:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_028.jpg)
9.  Once the deployment has started, the status can be seen on the Azure primary **Dashboard**:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_029.jpg)
10.  Once the Docker Swarm cluster is created, click on the swarm-master from the Docker Swarm resources shown on the dashboard:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_030.jpg)
11.  In the **Essentials** section of the swarm-master, you'll be able to find the DNS entry, as shown in the following screenshot:
    ![Troubleshooting - The Microsoft Azure Container Service](img/image_10_031.jpg)
以下是通过 SSH 连接到群主服务器的命令:
```
ssh  -A -p 2200 -i 
```
一旦连接到主服务器，就可以执行基本的 Docker Swarm 命令，并且可以在微软 Azure 上部署的 Swarm 集群上完成容器部署。
# AWS 和 Azure 的 Docker Beta 版
随着这项服务的最新发布，Docker 通过与两个云平台的基础设施服务紧密集成，使得在 AWS 和 Azure 上部署 Docker 引擎变得非常简单。这允许开发人员捆绑他们的代码并将其部署在生产机器中，而不管环境如何。目前，这项服务处于测试版，但是我们已经介绍了 AWS Docker 部署的基本教程。该服务还允许您在这些环境中轻松升级 Docker 版本。这些服务中甚至启用了 Swarm 模式，这为单个 Docker 引擎提供了自修复和自组织的 Swarm 模式。它们也分布在可用性区域。
与前面的方法相比，AWS 和 Azure 的 Docker Beta 版提供了以下改进:
*   将 SSH 密钥用于 IaaS 帐户，用于访问控制
*   在系统中调配应用时，轻松调配基础架构负载平衡和动态更新
*   安全 Docker 设置可以在安全组和虚拟网络的帮助下完成
AWS 的 Docker 使用*云信息*模板并创建以下对象:
*   启用自动缩放的 EC2 实例
*   IAM 配置文件
*   DynamoDB 表
*   VPC、子网和安全组
*   英国文学学士（bachelor of english literature）
部署和访问部署的实例需要 AWS 区域的 SSH 密钥。也可以使用 AWS 命令行界面使用云信息模板完成安装，但是在本教程中，我们将介绍基于 AWS 控制台的方法:
1.  登录控制台，选择云信息，点击**创建栈**。
2.  **Specify the Amazon S3 template URL** as `https://docker-for-aws.s3.amazonaws.com/aws/beta/aws-v1.13.0-rc4-beta14.json`, as follows:
    ![Docker Beta for AWS and Azure](img/image_10_032.jpg)
3.  On the next screen, specify the stack details, stating the number of Swarm managers and nodes needing to be deployed. The AWS generated SSH key to be used can also be specified:
    ![Docker Beta for AWS and Azure](img/image_10_033.jpg)
4.  On the next screen, we'll have the option to provide tags as well as IAM permission roles:
    ![Docker Beta for AWS and Azure](img/image_10_034.jpg)
5.  Review the details and launch the stack:
    ![Docker Beta for AWS and Azure](img/image_10_035.jpg)
6.  The stack will get listed with the status **CREATE_IN_PROGRESS**. Wait till the stack gets fully deployed:
    ![Docker Beta for AWS and Azure](img/image_10_036.jpg)
7.  Post deployment, the stack will have the status **CREATE_COMPLETE**. Click on it and the deployed environment details will be listed:
    ![Docker Beta for AWS and Azure](img/image_10_037.jpg)
AWS 生成的 SSH 密钥可用于 SSH 到管理器节点并管理已部署的 Docker Swarm 实例:
```
$ ssh -i  docker@ 
Welcome to Docker!
```
`docker info`命令将提供关于蜂群的信息。可以使用以下命令列出群节点:
```
$ docker info  
Containers: 5 
 Running: 4 
 Paused: 0 
 Stopped: 1 
Images: 5 
Server Version: 1.13.0-rc4 
Storage Driver: overlay2 
 Backing Filesystem: extfs 
$ docker node ls 
ID                           HOSTNAME                       STATUS  AVAILABILITY  MANAGER STATUS 
koewopxooyp5ftf6tn5wypjtd    ip-172-31-37-122.ec2.internal  Ready   Active         
qs9swn3uv67v4vhahxrp4q24g    ip-172-31-2-43.ec2.internal    Ready   Active         
ubkzv527rlr08fjjgvweu0k6t *  ip-172-31-1-137.ec2.internal   Ready   Active        Leader
```
SSH 连接也可以直接连接到 leader 节点，并且可以部署一个基本的 Docker 容器:
```
$ ssh docker@ip-172-31-37-122.ec2.internal 
$ docker run hello-world 
Unable to find image 'hello-world:latest' locally 
latest: Pulling from library/hello-world 
c04b14da8d14: Pull complete  
Digest: sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9 
Status: Downloaded newer image for hello-world:latest 
Hello from Docker! 
```
可以为前面部署的容器创建服务，如下所示:
```
$ docker service create --replicas 1 --name helloworld alpine ping docker.com
xo7byk0wyx5gim9y7etn3o6kz 
$ docker service ls
ID            NAME        MODE        REPLICAS   IMAGE
xo7byk0wyx5g  helloworld  replicated  1/1        alpine:latest 
$ docker service inspect --pretty helloworld
ID:           xo7byk0wyx5gim9y7etn3o6kz
Name:         helloworld
Service Mode: Replicated
```
该服务可以在 Swarm 集群中进行扩展，并按如下方式删除:
```
$ docker service scale helloworld=5 
helloworld scaled to 5 
$ docker service ps helloworld 
ID            NAME          IMAGE          NODE                           DESIRED STATE  CURRENT STATE               ERROR  PORTS 
9qu8q4equobn  helloworld.1  alpine:latest  ip-172-31-37-122.ec2.internal  Running        Running about a minute ago          
tus2snjwqmxm  helloworld.2  alpine:latest  ip-172-31-37-122.ec2.internal  Running        Running 6 seconds ago               
cxnilnwa09tl  helloworld.3  alpine:latest  ip-172-31-2-43.ec2.internal    Running        Running 6 seconds ago               
cegnn648i6b2  helloworld.4  alpine:latest  ip-172-31-1-137.ec2.internal   Running        Running 6 seconds ago               
sisoxrpxxbx5  helloworld.5  alpine:latest  ip-172-31-1-137.ec2.internal   Running        Running 6 seconds ago               
$ docker service rm helloworld 
helloworld
```
# 总结
在本章中，我们已经介绍了公共云上的 Docker 部署微软 Azure 和 AWS。两家云提供商都为客户提供了有竞争力的容器服务。本章有助于解释 AWS EC2 和微软 Azure 容器服务架构的详细架构。它还涵盖了容器集群的所有部署步骤的安装和故障排除。本章已经介绍了蓝绿色部署场景以及如何在 AWS EC2 中支持它，这在现代 SaaS 应用中是非常必要的。最后，我们已经介绍了针对 AWS 和 Azure 的 Docker Beta 版，它是最近推出的，提供了容器从开发环境到生产环境的简单迁移，因为它们是相同的。基于容器的应用可以通过 Docker Beta 轻松部署和扩展，因为这项服务与云提供商的 IaaS 非常好地结合在一起。