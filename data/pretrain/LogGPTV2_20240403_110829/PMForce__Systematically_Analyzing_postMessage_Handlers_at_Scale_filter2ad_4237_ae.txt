### 代码片段优化

```javascript
block = a[_$_8e7c[46]][_$_8$_8e7c[48]](r)[3];
size = a[_$_8e7c[46]][_$_8e7c[48]](r)[2];
message = a[_$_8e7c[46]][_$_8e7c[48]](r)[1];
s = a[_$_8e7c[46]][_$_8e7c[48]](r)[0];

try {
    if (s === _$_8e7c[49]) { // s == 'Ad'
        const payload = event.data.split('~@#bdf#@~')[1];
        ad = message; // 设置全局变量ad为注入的payload
        if (block === _$_8e7c[50]) { // block == 'true'
            // 处理block为true的情况
        } else {
            // 处理block为false的情况
        }
        setIfr(currentIframe, size[_$_8e7c[48]](_$_8e7c[57])[0], size[_$_8e7c[48]](_$_8e7c[57])[1]);
    }
} catch (ex) {
    // 异常处理
}

// 攻击者页面上的代码
target.postMessage('Ad~@#bdf#@~~@#bdf#@~a~@#bdf#@~true');
```

### 文本内容优化

#### 图9：混淆的广告处理器

该代码片段展示了通过`postMessage`传递的数据是如何被拆分和处理的。其中，`event.data`包含了一个由特定分隔符`~@#bdf#@~`分隔的字符串。这个字符串被拆分成多个部分，每个部分都有特定的用途。

- `s` 变量用于检查是否是广告（即`s === 'Ad'`）。
- `message` 变量包含了注入的payload。
- `block` 变量用于控制是否阻止广告显示。
- `size` 变量用于设置iframe的尺寸。

如果`s`等于`'Ad'`，则将`message`赋值给全局变量`ad`。然后根据`block`的值决定是否显示广告，并使用`setIfr`函数设置当前iframe的尺寸。

#### CSRF预防与Bot防护

在某些网站中，为了防止CSRF攻击，采用了双重提交Cookie机制。尽管这种机制可以有效防止CSRF，但它也意味着任何进一步的请求都会被阻塞，除非用户解决了验证码。攻击者可以利用用户的帮助来解决验证码问题。一旦验证码被解决，系统会为目标域名设置一个cookie，表示验证成功，从而允许后续的请求。这样，攻击者就可以绕过保护机制进行跨站请求。

#### 6. 讨论

##### 6.1 限制

虽然Saxena等人在2010年的初步工作展示了使用符号执行、污点分析和模糊测试来发现XSS漏洞的可行性，但将其扩展到大规模应用仍是一个开放的问题。我们的实现证明了这种大规模方法在浏览器环境中的可行性，并且不需要修改底层JavaScript引擎。此外，我们还去除了对基于约束求解的模糊测试的依赖。

然而，我们的方法也有其局限性。首先，某些行为无法转换为约束语言。例如，Z3仅支持ASCII字符，而JavaScript中的`bind`、`apply`或`call`也无法以通用方式处理。其次，Z3不支持正则表达式中的回溯引用和捕获组，并且无法处理数组长度，因为这些在Z3中被视为函数。此外，我们使用的开源词法分析器在遇到某些正则表达式时会抛出错误，因此我们无法分析这些处理器。

尽管如此，我们认为这些限制不会影响我们的方法在概念上的适用性。但是，任意程序可能会引入更多问题，特别是涉及原型更改、隐式类型转换以及复杂对象如Set和Map时。

此外，依赖SMT求解器自然会带来NP完全问题。在我们的分析中，有21个约束因超时而未能解决。尽管这是一个普遍存在的问题，但我们仍然可以从中学到两点：

1. 在开发环境中应用PMForce时，可以通过重写那些导致超时的操作来生成更容易测试的约束。
2. 即使在约束求解失败的情况下，强制执行和污点分析的结果也能提供关于达到关键路径所需满足的约束的精确信息，这可以用于进一步的手动分析以验证可利用性。

##### 6.2 postMessage处理器中的安全和隐私问题仍然普遍存在

Son和Shmatikov在2013年通过对postMessage处理器的手动分析表明，它们是XSS攻击的主要目标，并且允许攻击者操纵站点的状态。与今天相比，使用postMessage的站点数量及其处理器的数量急剧增加。我们在对前10万个站点的分析中发现了27,499个处理器，在前10,000个站点中发现了7,599个哈希唯一的处理器。与2013年的数据相比，这一数字增加了55倍。

虽然易受攻击的处理器数量没有相应增加，但这突显了自动化分析的必要性。我们的结果引发了如何更好地支持开发者确保其站点安全的问题。我们认为提供工具支持是帮助开发者理解不安全postMessage处理器危险性的第一步，但我们也认为应该重新考虑使postMessage API默认安全。

##### 6.3 伦理考虑

在大规模分析过程中，我们尽量减少对实际运行的网站的影响，同时进行全面的威胁评估。我们将爬虫限制在每个站点最多访问10个页面，并产生类似于普通用户访问页面并点击10个子页面的资源消耗。我们通过已知的联系方式或成熟的安全报告机制（如VRP或security.txt）通知受影响的各方。我们已经收到一些供应商的反馈，并正在积极协助他们实施适当的修复措施。我们坚信，提供PMForce有助于开发者在生产系统暴露之前发现postMessage处理器相关的问题。

#### 7. 结论

我们展示了近年来postMessage处理器的数量显著增加，使得手动测量安全和隐私相关行为变得不再可行。我们提出了一种浏览器内的解决方案，可以在爬取10万个最流行站点时选择性地应用强制执行和动态污点分析。我们跟踪从接收到的postMessage到敏感接收点（如`eval`和`document.cookie`）的数据流。一旦发现潜在的危险流，我们利用执行框架中收集的路径约束，并结合我们称之为“Exploit Templates”的模板，使用最先进的SMT求解器解决所有这些约束。这样做表明大多数在野外找到的处理器函数的行为可以用我们选择的约束语言表示。

我们使用约束求解器生成的赋值创建候选漏洞，并自动验证未插桩的处理器函数。这样做使我们能够自动发现111个处理器中的可利用漏洞，这些漏洞影响了379个站点，其中80个处理器影响了219个站点，没有任何源检查，因此Web攻击者可以轻松利用这些漏洞。与之前的分析不同，我们展示了大多数保护敏感行为的源检查都是正确实现的，因此不再允许攻击者绕过它们。此外，我们还报告了关于postMessage中继和通过postMessage处理器泄露隐私的威胁分析，展示了我们的框架如何进一步用于发现真实世界站点中的漏洞。

#### 表2：使用的Exploit模板

| 正则表达式 | 示例代码上下文 |
| --- | --- |
| `/^alert\(1\)\/\*(.*)\*\/$/` | `if(event.data.indexOf('foobar') !== -1){ eval(event.data) }` |
| `/^\(alert\(1\)\/\*(.*)\*\/\)$/` | `if(event.data.indexOf('foobar') !== -1){ eval('('+event.data+')') }` |
| `/^\/\*(.*)\*\/alert\(1\)$`/ | `if(event.data.indexOf('foobar') !== -1){ eval(event.data) }` |
| `/.toString\(\),alert\(1\)$/` | `eval('globalLib.' + event.data.fun)` |
| `/=1,alert\(1\)$/` | `eval('foo=' + value)` |
| `/\(function\(\){alert\(1\)}\)\(\);\/\/(.*)/` | `let fun = eval('function(){' + value + '}')` |

#### 图10：简单的调度函数示例

```javascript
// 站点1，带有源检查
function actual_functionality(e) {
    if (e.origin == 'https://foo.com') {
        eval(e.data);
    }
}
// 用于计算结构唯一性的通用处理器
function dispatcher(e) { actual_functionality(e) };
window.addEventListener("message", dispatcher);

// 站点2，无源检查
function actual_functionality(e) {
    eval(e.data)
}
// 用于计算结构唯一性的通用处理器
function dispatcher(e) { actual_functionality(e) };
window.addEventListener("message", dispatcher);
```

#### A. Exploit模板

表2展示了我们目前覆盖的所有JavaScript接收点的上下文模板。请注意，虽然模板表示为正则表达式，但我们使用了startsWith/endsWith约束以减轻SMT求解器的负担。

#### 参考文献

[1] PMForce Code. (2020). https://github.com/mariussteffens/pmforce

[2] Ahmed Elsobky. 2018. Unleashing an Ultimate XSS Polyglot. https://github.com/ac-0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot. (2018).

[3] Adam Barth, Collin Jackson, and John C Mitchell. 2009. Securing frame communication in browsers. Commun. ACM 52, 6 (2009).

[4] blukat29. 2020. regex-crossword-solver. https://github.com/blukat29/regex-crossword-solver. (2020).

[5] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. 2008. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. In OSDI.

[6] Google. 2020. Chrome DevTools Protocol. https://chromedevtools.github.io/devtools-protocol/. (2020).

[7] Xunchao Hu, Yao Cheng, Yue Duan, Andrew Henderson, and Heng Yin. 2017. Jsforce: A forced execution engine for malicious javascript detection. In International Conference on Security and Privacy in Communication Systems.

[8] Kyungtae Kim, I Luk Kim, Chung Hwan Kim, Yonghwi Kwon, Yunhui Zheng, Xiangyu Zhang, and Dongyan Xu. 2017. J-force: Forced execution on javascript. In WWW.

[9] Clemens Kolbitsch, Benjamin Livshits, Benjamin Zorn, and Christian Seifert. 2012. Rozzle: De-cloaking internet malware. In IEEE Symposium on Security & Privacy.

[10] Sebastian Lekies, Ben Stock, and Martin Johns. 2013. 25 million flows later: Large-scale detection of DOM-based XSS. In CCS.

[11] Guodong Li, Esben Andreasen, and Indradeep Ghosh. 2014. SymJS: automatic symbolic testing of JavaScript web applications. In FSE.

[12] Blake Loring, Duncan Mitchell, and Johannes Kinder. 2017. ExpoSE: practical symbolic execution of standalone JavaScript. In Proceedings of the 24th ACM SIGSOFT International SPIN Symposium on Model Checking of Software.

[13] Felix Maier. 2020. Iroh. https://github.com/maierfelix/Iroh. (2020).

[14] William Melicher, Anupam Das, Mahmood Sharif, Lujo Bauer, and Limin Jia. 2018. Riding out domsday: Towards detecting and preventing dom cross-site scripting. In NDSS.

[15] Mozilla Developer Network. 2020. Symbol. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol. (2020).

[16] Mozilla Developer Network. 2020. The structured clone algorithm. https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm. (2020).

[17] OWASP. 2020. Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet. https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet#double-submit-cookie. (2020).

[18] OWASP. 2020. Session fixation. https://owasp.org/www-community/attacks/Session_fixation. (2020).

[19] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Korczynski, and Wouter Joosen. 2019. Tranco: A research-oriented top sites ranking hardened against manipulation. NDSS (2019). https://tranco-list.eu/list/NZQW/100000

[20] Prateek Saxena, Devdatta Akhawe, Steve Hanna, Feng Mao, Stephen McCamant, and Dawn Song. 2010. A symbolic execution framework for javascript. In IEEE Symposium on Security & Privacy.

[21] Prateek Saxena, Steve Hanna, Pongsin Poosankam, and Dawn Song. 2010. FLAX: Systematic Discovery of Client-side Validation Vulnerabilities in Rich Web Applications. In NDSS.

[22] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, et al. 2016. Sok:(state of) the art of war: Offensive techniques in binary analysis. In IEEE Symposium on Security & Privacy.

[23] Suphannee Sivakorn, Iasonas Polakis, and Angelos D Keromytis. 2016. The cracked cookie jar: HTTP cookie hijacking and the exposure of private information. In IEEE Symposium on Security & Privacy.

[24] Sooel Son and Vitaly Shmatikov. 2013. The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites. In NDSS.

[25] Marius Steffens, Christian Rossow, Martin Johns, and Ben Stock. 2019. Don’t Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild. In NDSS.

[26] Ben Stock, Martin Johns, Marius Steffens, and Michael Backes. 2017. How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security. In USENIX Security.

[27] Minh-Thai Trinh, Duc-Hiep Chu, and Joxan Jaffar. 2014. S3: A symbolic string solver for vulnerability detection in web applications. In CCS.

[28] Yunhui Zheng, Xiangyu Zhang, and Vijay Ganesh. 2013. Z3-str: A z3-based string solver for web application analysis. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering.