import os
import zipfile
import zlib
import hashlib
from struct import pack, unpack
import sys
POLY_SZ = 20
class BitStream:
  def __init__(self, data, sz=None):
    if sz is None:
      sz = len(data) * 8
    self.sz = sz
    self.data = bytearray(data)
    self.idx = 0
  def get_bit(self):
    if self.idx >= self.sz:
      raise Exception('All bits used. Go away.')
    i_byte = self.idx / 8
    i_bit = self.idx % 8
    bit = (self.data[i_byte] >> i_bit) & 1
    self.idx += 1
    return bit
  def get_bits(self, sz):
    v = 0
    for i in xrange(sz):
      v |= self.get_bit() > (self.sz - 1)) & 1
    new_bit = 1
    masked = self.r & self.poly
    for i in xrange(self.sz):
      new_bit ^= (masked >> i) & 1
    self.r = ((self.r   ")
    z = BetterZipCreator(sys.argv[1], sys.argv[3].decode('hex'))
    z.add_file(sys.argv[2])
    z.close()