printf("Are you worth your weight in platinum?\n");
printf("Let's check it out.\n");
printf("Please enter your weight in pounds: ");
/* 获取用户的输入             */
scanf("%f", &weight);
/* 假设白金的价格是每盎司$1700     */
/* 14.5833用于把英镑常衡盎司转换为金衡盎司[1]*/
value = 1700.0 * weight * 14.5833;
110
printf("Your weight in platinum is worth $%.2f.\n", value);
printf("You are easily worth that! If platinum prices drop,\n");
printf("eat more to maintain your value.\n");
return 0;
}
提示 错误与警告
如果输入程序时打错（如，漏了一个分号），编译器会报告语法错误消
息。然而，即使输入正确无误，编译器也可能给出一些警告，如“警告：从
double类型转换成float类型可能会丢失数据”。错误消息表明程序中有错，不
能进行编译。而警告则表明，尽管编写的代码有效，但可能不是程序员想要
的。警告并不终止编译。特殊的警告与C如何处理1700.0这样的值有关。本
例不必理会这个问题，本章稍后会进一步说明。
输入该程序时，可以把1700.0改成贵金属白金当前的市价，但是不要改
动14.5833，该数是1英镑的金衡盎司数（金衡盎司用于衡量贵金属，而英镑
常衡盎司用于衡量人的体重）。
注意，“enter 
your 
weight”的意思是输入你的体重，然后按下Enter或
Return键（不要键入体重后就一直等着）。按下Enter键是告知计算机，你已
完成输入数据。该程序需要你输入一个数字（如，155），而不是单词
（如，too much）。如果输入字母而不是数字，会导致程序出问题。这个问
题要用if语句来解决（详见第7章），因此请先输入数字。下面是程序的输
出示例：
Are you worth your weight in platinum?
Let's check it out.
Please enter your weight in pounds: 156
111
Your weight in platinum is worth $3867491.25.
You are easily worth that! If platinum prices drop,
eat more to maintain your value.
程序调整
即使用第2章介绍的方法，在程序中添加下面一行代码：
getchar();
程序的输出是否依旧在屏幕上一闪而过？本例，需要调用两次getchar()
函数：
getchar();
getchar();
getchar()函数读取下一个输入字符，因此程序会等待用户输入。在这种
情况下，键入 156 并按下Enter（或Return）键（发送一个换行符），然后
scanf()读取键入的数字，第1个getchar()读取换行符，第2个getchar()让程序暂
停，等待输入。
3.1.1 程序中的新元素
程序清单3.1中包含C语言的一些新元素。
注意，代码中使用了一种新的变量声明。前面的例子中只使用了整数类
型的变量（int），但是本例使用了浮点数类型（float）的变量，以便处理更
大范围的数据。float 类型可以储存带小数的数字。
程序中演示了常量的几种新写法。现在可以使用带小数点的数了。
为了打印新类型的变量，在printf()中使用%f来处理浮点值。%.2f中的.2
用于精确控制输出，指定输出的浮点数只显示小数点后面两位。
112
scanf()函数用于读取键盘的输入。%f说明scanf()要读取用户从键盘输入
的浮点数，&weight告诉 scanf()把输入的值赋给名为 weight 的变量。scanf()
函数使用&符号表明找到 weight变量的地点。下一章将详细讨论&。就目前
而言，请按照这样写。
也许本程序最突出的新特点是它的交互性。计算机向用户询问信息，然
后用户输入数字。与非交互式程序相比，交互式程序用起来更有趣。更重要
的是，交互式使得程序更加灵活。例如，示例程序可以使用任何合理的体
重，而不只是 
156磅。不必重写程序，就可以根据不同体重进行计算。
scanf()和printf()函数用于实现这种交互。scanf()函数读取用户从键盘输入的
数据，并把数据传递给程序；printf()函数读取程序中的数据，并把数据显示
在屏幕上。把两个函数结合起来，就可以建立人机双向通信（见图 3.1），
这让使用计算机更加饶有趣味。
图3.1 程序中的scanf()和printf()函数
本章着重解释上述新特性中的前两项：各种数据类型的变量和常量。第
4章将介绍后3项。
113
3.2 变量与常量数据
在程序的指导下，计算机可以做许多事情，如数值计算、名字排序、执
行语言或视频命令、计算彗星轨道、准备邮件列表、拨电话号码、画画、做
决策或其他你能想到的事情。要完成这些任务，程序需要使用数据，即承载
信息的数字和字符。有些数据类型在程序使用之前已经预先设定好了，在整
个程序的运行过程中没有变化，这些称为常量（constant）。其他数据类型
在程序运行期间可能会改变或被赋值，这些称为变量（variable）。在示例
程序中，weight 是一个变量，14.5833 是一个常量。那么，1700.0 是常量还
是变量？在现实生活中，白金的价格不会是常量，但是在程序中，像1700.0
这样的价格被视为常量。
114
3.3 数据：数据类型关键字
不仅变量和常量不同，不同的数据类型之间也有差异。一些数据类型表
示数字，一些数据类型表示字母（更普遍地说是字符）。C通过识别一些基
本的数据类型来区分和使用这些不同的数据类型。如果数据是常量，编译器
一般通过用户书写的形式来识别类型（如，42是整数，42.100是浮点数）。
但是，对变量而言，要在声明时指定其类型。稍后会详细介绍如何声明变
量。现在，我们先来了解一下 C语言的基本类型关键字。K&C给出了7个与
类型相关的关键字。C90标准添加了2个关键字，C99标准又添加了3个关键
字（见表3.1）。
表3.1 C语言的数据类型关键字
在C语言中，用int关键字来表示基本的整数类型。后3个关键字（long、
short和unsigned）和C90新增的signed用于提供基本整数类型的变式，例如
unsigned short int和long long int。char关键字用于指定字母和其他字符（如，
#、$、%和*）。另外，char类型也可以表示较小的整数。float、double和
long 
double表示带小数点的数。_Bool类型表示布尔值（true或false），
_complex和_Imaginary分别表示复数和虚数。
通过这些关键字创建的类型，按计算机的储存方式可分为两大基本类
型：整数类型和浮点数类型。
位、字节和字
位、字节和字是描述计算机数据单元或存储单元的术语。这里主要指存
115
储单元。
最小的存储单元是位（bit），可以储存0或1（或者说，位用于设
置“开”或“关”）。虽然1位储存的信息有限，但是计算机中位的数量十分庞
大。位是计算机内存的基本构建块。
字节（byte）是常用的计算机存储单位。对于几乎所有的机器，1字节
均为8位。这是字节的标准定义，至少在衡量存储单位时是这样（但是，C
语言对此有不同的定义，请参阅本章3.4.3节）。既然1位可以表示0或1，那
么8位字节就有256（2的8次方）种可能的0、1的组合。通过二进制编码（仅
用0和1便可表示数字），便可表示0～255的整数或一组字符（第15章将详细
讨论二进制编码，如果感兴趣可以现在浏览一下该章的内容）。
字（word）是设计计算机时给定的自然存储单位。对于8位的微型计算
机（如，最初的苹果机）， 1个字长只有8位。从那以后，个人计算机字长
增至16位、32位，直到目前的64位。计算机的字长越大，其数据转移越快，
允许的内存访问也更多。
3.3.1 整数和浮点数
整数类型？浮点数类型？如果觉得这些术语非常陌生，别担心，下面先
简述它们的含义。如果不熟悉位、字节和字的概念，请阅读上面方框中的内
容。刚开始学习时，不必了解所有的细节，就像学习开车之前不必详细了解
汽车内部引擎的原理一样。但是，了解一些计算机或汽车引擎内部的原理会
对你有所帮助。
对我们而言，整数和浮点数的区别是它们的书写方式不同。对计算机而
言，它们的区别是储存方式不同。下面详细介绍整数和浮点数。
3.3.2 整数
和数学的概念一样，在C语言中，整数是没有小数部分的数。例如，
2、−23和2456都是整数。而3.14、0.22和2.000都不是整数。计算机以二进制
116
数字储存整数，例如，整数7以二进制写是111。因此，要在8位字节中储存
该数字，需要把前5位都设置成0，后3位设置成1（如图3.2所示）。
图3.2 使用二进制编码储存整数7
3.3.3 浮点数
浮点数与数学中实数的概念差不多。2.75、3.16E7、7.00 和 2e-8 都是浮
点数。注意，在一个值后面加上一个小数点，该值就成为一个浮点值。所
以，7是整数，7.00是浮点数。显然，书写浮点数有多种形式。稍后将详细
介绍e记数法，这里先做简要介绍：3.16E7 表示3.16×107（3.16 乘以10 的7次
方）。其中， 107=10000000，7被称为10的指数。
这里关键要理解浮点数和整数的储存方案不同。计算机把浮点数分成小
数部分和指数部分来表示，而且分开储存这两部分。因此，虽然7.00和7在
数值上相同，但是它们的储存方式不同。在十进制下，可以把7.0写成
0.7E1。这里，0.7是小数部分，1是指数部分。图3.3演示了一个储存浮点数
的例子。当然，计算机在内部使用二进制和2的幂进行储存，而不是10的
幂。第15章将详述相关内容。现在，我们着重讲解这两种类型的实际区别。
整数没有小数部分，浮点数有小数部分。
浮点数可以表示的范围比整数大。参见本章末的表3.3。
对于一些算术运算（如，两个很大的数相减），浮点数损失的精度更
117
多。
图3.3 以浮点格式（十进制）储存π的值
因为在任何区间内（如，1.0 到 2.0 之间）都存在无穷多个实数，所以
计算机的浮点数不能表示区间内所有的值。浮点数通常只是实际值的近似
值。例如，7.0可能被储存为浮点值6.99999。稍后会讨论更多精度方面的内
容。
过去，浮点运算比整数运算慢。不过，现在许多CPU都包含浮点处理
器，缩小了速度上的差距。
118
3.4 C语言基本数据类型
本节将详细节介绍C语言的基本数据类型，包括如何声明变量、如何表
示字面值常量（如，5或2.78），以及典型的用法。一些老式的C语言编译器
无法支持这里提到的所有类型，请查阅你使用的编译器文档，了解可以使用
哪些类型。
3.4.1 int类型
C语言提供了许多整数类型，为什么一种类型不够用？因为 C语言让程
序员针对不同情况选择不同的类型。特别是，C语言中的整数类型可表示不
同的取值范围和正负值。一般情况使用int类型即可，但是为满足特定任务和
机器的要求，还可以选择其他类型。
int类型是有符号整型，即int类型的值必须是整数，可以是正整数、负整
数或零。其取值范围依计算机系统而异。一般而言，储存一个int要占用一个
机器字长。因此，早期的16位IBM PC兼容机使用16位来储存一个int值，其
取值范围（即int值的取值范围）是-32768～32767。目前的个人计算机一般
是32位，因此用32位储存一个int值。现在，个人计算机产业正逐步向着64位
处理器发展，自然能储存更大的整数。ISO 
C规定int的取值范围最小
为-32768～32767。一般而言，系统用一个特殊位的值表示有符号整数的正
负号。第15章将介绍常用的方法。
1.声明int变量
第2章中已经用int声明过基本整型变量。先写上int，然后写变量名，最
后加上一个分号。要声明多个变量，可以单独声明每个变量，也可在int后面
列出多个变量名，变量名之间用逗号分隔。下面都是有效的声明：
int erns;
int hogs, cows, goats;
119
可以分别在4条声明中声明各变量，也可以在一条声明中声明4个变量。
两种方法的效果相同，都为4个int大小的变量赋予名称并分配内存空间。
以上声明创建了变量，但是并没有给它们提供值。变量如何获得值？前
面介绍过在程序中获取值的两种途径。第1种途径是赋值：
cows = 112;
第2种途径是，通过函数（如，scanf()）获得值。接下来，我们着重介
绍第3种途径。
2.初始化变量
初始化（initialize）变量就是为变量赋一个初始值。在C语言中，初始
化可以直接在声明中完成。只需在变量名后面加上赋值运算符（=）和待赋
给变量的值即可。如下所示：
int hogs = 21;
int cows = 32, goats = 14;
int dogs, cats = 94; /* 有效，但是这种格式很糟糕 */
以上示例的最后一行，只初始化了cats，并未初始化dogs。这种写法很
容易让人误认为dogs也被初始化为94，所以最好不要把初始化的变量和未初
始化的变量放在同一条声明中。
简而言之，声明为变量创建和标记存储空间，并为其指定初始值（如图
3.4所示）。
120
图3.4 定义并初始化变量
3.int类型常量
上面示例中出现的整数（21、32、14和94）都是整型常量或整型字面
量。C语言把不含小数点和指数的数作为整数。因此，22和-44都是整型常
量，但是22.0和2.2E1则不是。C语言把大多数整型常量视为int类型，但是非
常大的整数除外。详见后面“long常量和long long常量”小节对long int类型的
讨论。
4.打印int值
可以使用printf()函数打印int类型的值。第2章中介绍过，%d指明了在一
行中打印整数的位置。%d称为转换说明，它指定了printf()应使用什么格式
来显示一个值。格式化字符串中的每个%d都与待打印变量列表中相应的int
值匹配。这个值可以是int类型的变量、int类型的常量或其他任何值为int类型
的表达式。作为程序员，要确保转换说明的数量与待打印值的数量相同，编
译器不会捕获这类型的错误。程序清单3.2演示了一个简单的程序，程序中
初始化了一个变量，并打印该变量的值、一个常量值和一个简单表达式的
值。另外，程序还演示了如果粗心犯错会导致什么结果。
程序清单3.2 print1.c程序
121
/* print1.c - 演示printf()的一些特性 */
#include 
int main(void)
{
int ten = 10;
int two = 2;
printf("Doing it right: ");
printf("%d minus %d is %d\n", ten, 2, ten - two);
printf("Doing it wrong: ");
printf("%d minus %d is %d\n", ten); // 遗漏2个参数
return 0;
}
编译并运行该程序，输出如下：
Doing it right: 10 minus 2 is 8
Doing it wrong: 10 minus 16 is 1650287143
在第一行输出中，第1个%d对应int类型变量ten；第2个%d对应int类型常
量2；第3个%d对应int类型表达式ten - two的值。在第二行输出中，第1个%d
对应ten的值，但是由于没有给后两个%d提供任何值，所以打印出的值是内
存中的任意值（读者在运行该程序时显示的这两个数值会与输出示例中的数
值不同，因为内存中储存的数据不同，而且编译器管理内存的位置也不
同）。
122
你可能会抱怨编译器为何不能捕获这种明显的错误，但实际上问题出在
printf()不寻常的设计。大部分函数都需要指定数目的参数，编译器会检查参
数的数目是否正确。但是，printf()函数的参数数目不定，可以有1个、2个、
3个或更多，编译器也爱莫能助。记住，使用printf()函数时，要确保转换说
明的数量与待打印值的数量相等。
5.八进制和十六进制