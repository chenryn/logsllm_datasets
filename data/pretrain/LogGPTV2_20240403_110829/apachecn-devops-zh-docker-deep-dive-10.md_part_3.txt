运行另一个`docker service scale`命令，将数字从 10 减少到 5。
```
$ docker service scale web-fe=5
web-fe scaled to 5
overall progress: 5 out of 5 tasks 
1/5: running   
2/5: running   
3/5: running   
4/5: running   
5/5: running   
verify: Service converged 
```
 `现在您已经知道如何扩展服务，让我们看看如何删除一个。
#### 删除服务
移除服务很简单—可能太简单了。
以下`docker service rm`命令将删除之前部署的服务。
```
$ docker service rm web-fe
web-fe 
```
 `用`docker service ls`命令确认它消失了。
```
$ docker service ls
ID      NAME    MODE   REPLICAS    IMAGE      PORTS 
```
 `小心使用`docker service rm`命令，因为它会删除所有服务副本，而不要求确认。
现在服务已经从系统中删除，让我们看看如何将滚动更新推送到一个系统中。
#### 滚动更新
将更新推送到已部署的应用是一个现实。在很长一段时间里，这真的很痛苦。由于重大的应用更新，我已经失去了足够多的周末，我也不打算再做一次。
嗯……多亏了 Docker *服务*，将更新推送到设计良好的微服务应用变得很容易。
为了看到这一点，我们将部署一项新服务。但在此之前，我们将为该服务创建一个新的覆盖网络。这不是必需的，但是我想让您看看它是如何完成的，以及如何将服务附加到它上面。
```
$ docker network create -d overlay uber-net
43wfp6pzea470et4d57udn9ws 
```
 `这创建了一个名为“uber-net”的新覆盖网络，我们将在即将创建的服务中使用它。覆盖网络创建了一个新的第 2 层网络，我们可以在上面放置容器，并且上面的所有容器都可以通信。即使所有的群节点都在不同的底层网络上，这也是可行的。基本上，覆盖网络在潜在的多个不同底层网络之上创建一个新的第 2 层容器网络。
图 10.5 显示了由第 3 层路由器连接的两个底层网络上的四个群节点。覆盖网络跨越所有 4 个群节点，创建一个单一的平面第 2 层网络供容器使用。
![Figure 10.5](img/figure10-5.png)
Figure 10.5
运行`docker network ls`以验证网络创建正确，并且在 Docker 主机上可见。
```
$ docker network ls
NETWORK ID          NAME                DRIVER      SCOPE
43wfp6pzea47        uber-net            overlay     swarm 
```
 `在`swarm`范围内成功创建了`uber-net`网络，目前*仅在群中的管理节点上可见。当工作节点运行网络上配置的工作负载时，它将动态扩展到工作节点。*
让我们创建一个新服务并将其连接到网络。
```
$ docker service create --name uber-svc \
   --network uber-net \
   -p 80:80 --replicas 12 \
   nigelpoulton/tu-demo:v1
dhbtgvqrg2q4sg07ttfuhg8nz
overall progress: 12 out of 12 tasks 
1/12: running   
2/12: running   
12/12: running   
verify: Service converged 
```
 `让我们看看我们刚刚用那个`docker service create`命令声明了什么。
我们做的第一件事是命名服务，然后使用`--network`标志告诉它将所有副本放在新的`uber-net`网络上。然后，我们在整个集群中暴露端口 80，并将其映射到我们要求它运行的 12 个副本中的每个副本中的端口 80。最后，我们告诉它所有的复制品都基于 nigelpoulton/tu-demo:v1 映像。
运行`docker service ls`和`docker service ps`命令来验证新服务的状态。
```
$ docker service ls
ID            NAME      REPLICAS  IMAGE
dhbtgvqrg2q4  uber-svc  12/12     nigelpoulton/tu-demo:v1
$ docker service ps uber-svc
ID        NAME          IMAGE                NODE  DESIRED   CURRENT STATE
0v...7e5  uber-svc.1    nigelpoulton/...:v1  wrk3  Running   Running 1 min
bh...wa0  uber-svc.2    nigelpoulton/...:v1  wrk2  Running   Running 1 min
23...u97  uber-svc.3    nigelpoulton/...:v1  wrk2  Running   Running 1 min
82...5y1  uber-svc.4    nigelpoulton/...:v1  mgr2  Running   Running 1 min
c3...gny  uber-svc.5    nigelpoulton/...:v1  wrk3  Running   Running 1 min
e6...3u0  uber-svc.6    nigelpoulton/...:v1  wrk1  Running   Running 1 min
78...r7z  uber-svc.7    nigelpoulton/...:v1  wrk1  Running   Running 1 min
2m...kdz  uber-svc.8    nigelpoulton/...:v1  mgr3  Running   Running 1 min
b9...k7w  uber-svc.9    nigelpoulton/...:v1  mgr3  Running   Running 1 min
ag...v16  uber-svc.10   nigelpoulton/...:v1  mgr2  Running   Running 1 min
e6...dfk  uber-svc.11   nigelpoulton/...:v1  mgr1  Running   Running 1 min
e2...k1j  uber-svc.12   nigelpoulton/...:v1  mgr1  Running   Running 1 min 
```
 `将`-p 80:80`标志传递给服务将确保创建**群范围的**映射，该映射将所有流量从端口 80 上的群中的任何节点映射到任何服务副本内的端口 80。
这种在集群中的每个节点上发布端口的模式，甚至是没有运行服务副本的节点，被称为*入口模式*，并且是默认模式。另一种模式是*主机模式*，它只在运行副本的群节点上发布服务。在*主机模式*下发布服务需要长格式语法，如下所示:
```
$ docker service create --name uber-svc \
   --network uber-net \
   --publish published=80,target=80,mode=host \
   --replicas 12 \
   nigelpoulton/tu-demo:v1 
```
 `打开一个网络浏览器，将它指向端口 80 上集群中任何节点的 IP 地址，以查看服务的运行情况。
![Figure 10.6](img/figure10-6.png)
Figure 10.6
如您所见，这是一个简单的投票应用，将为“足球”或“英式足球”注册投票。请随意将您的网络浏览器指向群中的其他节点。您将能够从任何节点访问 web 服务，因为`-p 80:80`标志在每个群节点上创建了*入口模式*映射。即使在没有运行服务副本的节点上也是如此— **每个节点都获得一个映射，因此可以将您的请求重定向到运行服务的节点**。
现在让我们假设这个特定的投票已经结束，并且您的公司想要运行一个新的投票。已经为新的轮询创建了一个新的容器映像，并将其添加到同一个 Docker Hub 存储库中，但是这个被标记为`v2`而不是`v1`。
让我们也假设您的任务是以分阶段的方式将更新后的映像推送到群集—一次 2 个副本，每个副本之间有 20 秒的延迟。您可以使用以下`docker service update`命令来完成此操作。
```
$ docker service update \
   --image nigelpoulton/tu-demo:v2 \
   --update-parallelism 2 \
   --update-delay 20s uber-svc
overall progress: 4 out of 12 tasks 
1/12: running   
2/12: running   
3/12: running   
4/12: running   
5/12: starting  
6/12: ready     
12/12: 
```
 `让我们回顾一下命令。`docker service update`让我们通过更新服务的期望状态来更新正在运行的服务。本示例指定了映像的新版本，标记为`v2`而不是`v1`。它还指定了`--update-parallelism`和`--update-delay`标志，以确保每次将新映像推送到 2 个副本，每组两个副本之间有 20 秒的冷却时间。最后，它指示群对`uber-svc`服务进行更改。
如果你在更新过程中运行一个`docker service ps uber-svc`，一些副本将在`v2`而一些仍在`v1`。如果您给操作足够的时间来完成(4 分钟)，所有副本将最终达到使用`v2`映像的新的期望状态。
```
$ docker service ps uber-svc
ID        NAME          IMAGE        NODE  DESIRED   CURRENT STATE
7z...nys  uber-svc.1    nigel...v2   mgr2  Running   Running 13 secs
0v...7e5  \_uber-svc.1  nigel...v1   wrk3  Shutdown  Shutdown 13 secs
bh...wa0  uber-svc.2    nigel...v1   wrk2  Running   Running 1 min
e3...gr2  uber-svc.3    nigel...v2   wrk2  Running   Running 13 secs
23...u97  \_uber-svc.3  nigel...v1   wrk2  Shutdown  Shutdown 13 secs
82...5y1  uber-svc.4    nigel...v1   mgr2  Running   Running 1 min
c3...gny  uber-svc.5    nigel...v1   wrk3  Running   Running 1 min
e6...3u0  uber-svc.6    nigel...v1   wrk1  Running   Running 1 min
78...r7z  uber-svc.7    nigel...v1   wrk1  Running   Running 1 min
2m...kdz  uber-svc.8    nigel...v1   mgr3  Running   Running 1 min
b9...k7w  uber-svc.9    nigel...v1   mgr3  Running   Running 1 min
ag...v16  uber-svc.10   nigel...v1   mgr2  Running   Running 1 min
e6...dfk  uber-svc.11   nigel...v1   mgr1  Running   Running 1 min
e2...k1j  uber-svc.12   nigel...v1   mgr1  Running   Running 1 min 
```
 `您可以通过打开群中任何节点的网络浏览器并点击几次刷新来实时见证更新的发生。一些请求将由运行旧版本的副本提供服务，一些将由运行新版本的副本提供服务。足够长的时间后，所有请求都将由运行该服务的更新版本的副本提供服务。
恭喜你。您刚刚将滚动更新推送到一个实时容器化应用。记住，在第 14 章中，Docker Stacks 将所有这些提升到下一个层次。
如果对服务运行`docker inspect --pretty`命令，您将看到更新并行度和更新延迟设置现在是服务定义的一部分。这意味着未来的更新将自动使用这些设置，除非您在`docker service update`命令中覆盖它们。
```
$ docker service inspect --pretty uber-svc
ID:             mub0dgtc8szm80ez5bs8wlt19
Name:           uber-svc
Service Mode:   Replicated
 Replicas:      12
UpdateStatus:
 State:         updating
 Started:       About a minute
 Message:       update in progress
Placement:
UpdateConfig:
 Parallelism:   2
 Delay:         20s
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Update order:      stop-first
RollbackConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s