境下的邮件阅读程序。我对这个项目印象很深，它包括大概20个
人，都是一些有趣的人，彼此可能就某些意见不统一的地方有些争
吵。比如，有一个人曾想做项目主管，可其他人都不大同意。观察
他们如何处理这样的冲突很有意思。
看他们如何进行并发也是非常有趣的事情。在某个时候，他们决定
把刚并始时连接在一起的工作隔离开，希望确保用户可以加密邮件
信息。他们用了标准的加密算法实现，并且定义出一个接口，保证
你可以自已加入其他的加密方法。由此，我认识到了一个团队如何
与其他团队协作。而且他们有很多不同的协作方式。
我从外部研究了不少项目，没有实际加入到团队中去。后来我推导
出一系列我所认为的、与开源项目成功相关的关键因素。接下来要
做的，当然就是在企业的真实生产环境中推广这些结论了。
Jenny：听起来你也观察了人们如何互相影响，而不仅仅是他们构建
的软件。你认为是什么因素使得开源软件团队可以按他们的方式工
作？
Auke：要是仔细观察开源项目，你会发现人们总是要经历某些演变
过程。一般来说，他们刚并始参与软件项目的时候都不是并发人
员。10个人里面有9个都是从使用开源软件开始的。到了一定的时
候，他们中有些人开始对软件进行一些调整，然后他们就成了专家
49
---
## Page 51
级用户。接下来其中某些人并始为项目作出贡献，然后他们就演变
成为并发人员了。在成功的项目中，你会发现：他们对待用户的方
式可以帮助并促进这个演变过程。所以，在成功的并源项目中总是
能够看到：提交缺陷报告是一件很容易的事情。项目团队中的人让
这个过程变得简单，他们帮助遇到问题的人，并花费时间帮人们找
到问题所在。项目中的人把项目看做自己的事情，而且项目本身也
促进了演变的过程，人们从用户变成专家用户，又变成责献者，最
后变成并发人员。有了上述两个因素，并源项目团队就可以按自己
的方式工作并取得成功。
Jenny：这真有意思，很多人在接手软件项目时，对于要解决的问题
域毫无概念。你提到的开源项目成功的一个要素，是有人在真正加
入并开发项目之前，就已经是软件的用户了。
Auke：是的。到目前为止，我所见到的，是人们先开始使用软件，
接下来他们并始为项目作贡献，然后再并始并发。当然，在人数的
量级上有差异。通常是数十个开发人员，没有数千也有数百个贡献
署，以及数万乃至数十万的用户。
Andrew：如果在企业环境之中，开发人员就没有机会从用户开始
了。那你刚才谈到的这些东西，能从中提取哪些司用之处呢？因为
这看起来像是根本上的差异，同很多并源项目相比，人们作为职业
并发人员在公司中被分配的项目工作还是完全不同的。
Auke：嗯，我是从两个角度来看的，你在企业层面也可以看到。并
源的另一个层面是软件工程层面，这也是并源开发的关键因素。首
先，你能享有并放性，而且能做很多事情让并发工作对外并放。其
中之一就是人们很容易看到所有的开发工作。在目前的企业中，通
常任何东西默认都是不能访问的。所以人们不能去了解别人的项
目，即使你们在同一个公司、同一个部门。信息是不能访问的，除
非你对其有特定需要，而且会有人明确安排你去访问需要的信息。
假如我在一个团队中，而你希望使用我正在开发的组件，在使用之
前，很可能你得先调整它。对我来说，帮你做到这一点很容易，我
只需提供一些我验证过而且通过某个级别测试的版本快照，这就可
以节省你和其他潜在贡献者很多时间，让你们赶上进度。换句话
说，通过让我构建的东西更易于访问，项目也就更并放了。这样一
来，我也激发了很多人并始重复使用这个软件。
50
---
## Page 52
所以软件工程是一方面，另一方面是“社区监管”（如果你愿意这么
叫）。即使知道了这两方面，你也得正确操控，才能得到成功的开
源项目。10家企业中有9家都只做软件工程，至于开源中通过“社区
监管"完成的事情，在企业里是由管理层负责的。
Andrew：如果有人读到这里，然后开始琢磨：“噢，你所描述的封
闭的”企业就是我每天工作时见到的状况，我也很想让公司使用一种
开源模式。"但是他们不知道从何入手。你会如何告诉他们？你会
给他们什么建议？你如何从A点到达B点，会采取哪些步骤？
Auke：我曾工作过的公司就是一个很好的案例。谁负责做什么、所
有的项目管理层面、所有的软件战略层面、发展规划、需求管理、
对客户的承诺，所有与上面这些相关的决策，都没有任何改变。但
是真正的工程层面的方法，开始从根本上发生变化。
有些事情必须要做。我认为有三个关键方面。首先是开放，或让与
开发相关的所有信息都容易访问。这包括源代码、过程跟踪、文档
和并发人员之间的沟通。总的来说，就是要让人们易于得到信息。
所以，要把信息放在集中而易于访问的地方，不要让人们绕三个弯
才能找到自已想要的信息。
其次，我们引入了明确定义好的所有权和控制权：并发并维护组件
的团队持有所有权和控制权，按自己需要修改并使用的团队拥有对
修补程序的所有权。这在开源世界里已经是标准了，不过组件的所
有权和控制权在企业开发项目中并没有定义清楚，特别是在两个团
队协作的边界之处。
最后，有了可供访问的相关信息和材料，有了定义好的所有权和控
制权，我们就可以激发团队并始修改另一个团队的组件了，并发修
补程序也可以。他们不必再去想一些短期内的权宜之计，或为了适
合自已要求而去并发什么胶水代码。上面就是与工程相关的三个方
面，有了它们，你就可以开始推行开源模式了。
在我们公司里，当时有120个并发人员，分布在两个地点，并发同
一个产品。基本上，他们要做的，就是并发许多供多个产品使用的
组件。这120个人一直负责构建组件。然后还有大概350个人围绕前
面的团队，在不同产品团队中工作，使用组件实际并发最终产品。
所以，当我们要引入开源模式的时候，我们逐步推行了上面的三个
关键方面，把所有与开发相关的东西都对外开放、允许访问，清晰
51
---
## Page 53
定义所有权和控制权，然后激发开发修订程序的方式，同时大力向
参与进来的不同事业部进行“布道”。这是一个演变过程，逐步开放
更多信息，同时教育团队使用协作模式，然后才让一到两个团队并
始按模式协作。他们后来就能成为其他人的范例了。
Andrew：当你第一次跟他们谈的时候，他们反应如何？
Auke：嗯，还是遇到不少公司政治层面的问题。在某种意义上，这
个产品系列是由公司的高层强力推动的，他们说这对分部有好处，
所以我们必须要强力推行。必须要有一些强制，才能保证一切顺利
进行。可这样做的代价就是：团队内部的人们不喜欢施加于他们的
力量。他们被道并始使用另一个团队构建的公共组件，而不能自行
开发、实现。他们希望选择权完全掌握在自己手里。不过，当然他
们永远不会选择丢用其他团队并发的组件。这里就遇到了“蛋生
鸡，鸡生蛋"的问题：必须要施加一些外力，可这又会引发很多负
面反应。
所以当我刚开始推行时，确实有不少负面反应，主要是由于产品团
队不信任产品系列团队。
Jenny：所以当你并始的时候，团队之间已经有一些隔了？
Auke：没错。比如，产品系列团队已经向产品团队承诺了自己要做
的工作。在产品团队中，像我这样不属于产品系列团队的外人，跟
他们刚并始交谈，他们就马上不假思索地回应道：“好吧，现在产
品系列团队希望采用新的并放式方法，这样他们就不用再支持我们
了，原先的承诺也就不算数了，我们必须自己修复那些组件。”
Andrew：那你是如何说服他们的？你如何克服这个问题，打消他们
的抗拒心理？
Auke：当时做了很多讨论和澄清，都是关于这个模式的运作方式
的。原先许下的承诺在方法、表现和形式上没有任何改变。在这个
公司里，各个团队已经按照封闭模式协作很多年了，所以有点难以
跟上现在的节奏。为这个产品系列工作的还有些新人，他们是刚加
入的，没有历史包袱。我们以此作为一个好的切入点，新人们并始
以并放的新模式为产品系列工作。因此，先讨论，然后让另外一些
人做示范，这样他们就可以在其他人身上看到效果。
52
---
## Page 54
刚并始的时候，产品团队反应寥寥，主要就是在观察我们的进展状
况。最初的关注点主要是要并放整个并发过程。一并始，我们先把
源代码以只读的方式在社区里开放。接下来，我们设置了一个邮件
列表，所有人都能在里面问问题，以打通社区这条通道。在那之
前，所有人提问的对象都是“支持团队”。这帮人的工作可不好做：
基本上，他们的工作就是在两难之间。他们看到问题后，就去平台
团队（有120个人的团队）找一个能够解决问题的专家，之后再把
答案拿回来。所以，支持团队就是中间人，然而很多细节就在这个
传递过程中去失了。结果可想而知，支持工作进展得也不顺利。
观察过开源并发之后，企业中的并发人员能够学到很关键的一点：
拿到别人的组件，如果你不去修改，就是无法重用的。十次有九次
都是这样，你得进行调整，让其适应自已的需要。这家公司此时也
遇到了同样的问题。公共组件也许能满足80%的需要，永远不会达
到100%。产品团队觉得非常痛苦。即使他们提问，支持团队自己也
回答不上来。产品团队必须要自已找答案，而且经常找不到。所
以，产品团队特别失意。他们被道同意加入，却遇到这样的问题：
在没有得力支持的情况下，自行完成手上的工作。
Jenny：不过只用上邮件列表还不够吧？很多公司都有邮件列表，却
没多大作用。
Auke：只是简单使用邮件列表，支持团队仍然负有组织层面的责
任，所以一并始也没什么改变。不过还是有些资深的并发人员，我
让他们加入到邮件列表中，然后他们就并始回答问题了。不知不觉
地，支持团队就被人遗忘了。基本上，他们可以并始做些其他工作
了，他们可以从事并发工作，而不是去为问题找答案。不再有人被
夹在中间。大家都可以顺畅沟通。产品团队提出一个问题，得到答
案的速度更快、质量更好：因为不再有转换过程中造成的信息遗漏
或错误，而如果通过第三方，那么类似情况难以避免。慢慢地，团
队之间的很多不信任和误解通过这样的方式被消解了。而且这种内
部并源的方式赢得了很高的可信度，因为公司内看到了很明显的工
作提升。显而易见，这些都是内部并源方式带来的。
在大公司里，也会推行很多宽泛的协作活动，其问题在于太过宽
泛，没有关联特定的领域。这会导致不可避免的结果：热情的人们
发布大量信息，主题却很分散，也很难找到。我们采取的方式的不
同点在于：将主题聚焦在一些特定的公共组件上面，谈论其开发和
维护。社区里面所有的人都在使用、修改或开发组件。这样的关注
53
---
## Page 55
造成了结果上的差异。能够有机会讨论是一件事情，可还得有内容
讨论才行。
Andrew：这可真不错！只要你让老资格的人们加入进来，你就能让
支持团队干上更舒心的工作了，让他们做一些更加重要、道切的真
实工作，这对整个公司都有好处。
Aude：是的。这产生了巨大而又直接的影响。不过事情做起来却只
花一点点工关，使用邮件列表、开放源代码，又不是什么高科技。
影响却很巨大，而且建立起了很好的公信力。
同时，我继续进行“传道”，对于遇到的每一个人，我都不断强调这
么做的关键因素和价值所在。我还做了另一件事，给它取了个名字
“内部开源活动”，后来这就成了一个很好的流行术语。一般说
来，别人刚听到该词的时候，他们一并始根本不理解是什么意思。
他们只是听到了，然后就并始重复，却不知道别人意味着什么。不
过起这样的名字是有目的的。因为一旦人们并始谈起它了，那么到
某个时间，他们就能并始理解其中的含义。起个名字确实产生了不
少影响。
Jenny：是什么让你开始启动内部开源项目？
Auke：我开始推动内部并源，因为我知道并源活动交付了很多引人
注目的成功项目，同时也有非常多的失败。换句话说，并源中有些
东西可以学习，而且举足轻重。
在我看来，有三个关键方面可以影响项目的成败。首先就是易于接
近和开放：让所有与开发相关的信息易于接近，比如使用邮件列表