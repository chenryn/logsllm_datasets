### Precision in Intent Dependency Detection

Epicc can accurately determine when an `Intent`'s value depends on the execution path by detecting flags and additional data. In contrast, ComDroid does not make this distinction. When Epicc and ComDroid differ in their analysis at a specific code location, we include flags in both the "ComDroid only" and "Epicc only" rows of Table 2.

### Vulnerability Prevalence

Both ComDroid and Epicc frequently identify `Activity` hijacking vulnerabilities, which occur whenever implicit `Intents` are used to start `Activities`. `Service` hijacking vulnerabilities are less common, correlating with the lower usage of `Services` compared to `Activities`. `Broadcast` theft vulnerabilities are also quite prevalent. As discussed in Section 6.3, few exported components are protected by permissions, leading to a high number of malicious `Activity` or `Service` launches and `Broadcast` injection vulnerabilities. The discrepancy between the number of components without permissions and the total number of these vulnerabilities is notable. A significant portion of the unprotected components are `Activities` with the `android.intent.action.MAIN` action and the `android.intent.category.LAUNCHER` category, indicating that these components cannot be started without direct user intervention and thus are not counted as potential vulnerabilities.

### False Positives and Negatives

For the first three vulnerabilities (unauthorized `Intent` receipt), ComDroid flags a high number of locations where Epicc differs. Manual examination of a random subset of applications reveals that these differences are either false positives detected by ComDroid or cases where Epicc provides a more precise vulnerability specification. We observed that ComDroid detects some code locations as vulnerable, whereas Soot does not find them to be reachable. Epicc leverages the sound and precise Soot call graph construction to output fewer false positives. Additionally, Epicc's IDE model accurately tracks differences between branches (e.g., explicit/implicit `Intent` or URI flags), while ComDroid cannot. When an `Intent` is implicit on one branch and explicit on another, ComDroid incorrectly identifies it as explicit, resulting in a false negative. The IDE model, however, correctly tracks these possibilities.

### Comparison of Detected Vulnerabilities

With a few exceptions, ComDroid and Epicc detect the same possible malicious `Activity` and `Service` launches, which is expected since both tools parse the manifest file. Minor implementation differences or bugs in pathological cases explain the few discrepancies. The `Broadcast` injection vulnerability shows stronger differences, with ComDroid detecting 377 cases for the random sample and 5,187 for the popular one, while Epicc finds 277 and 3,546, respectively. Some `Broadcast` injections detected by ComDroid involve dynamically registered `Broadcast Receivers` in unreachable code. The call graph used by Epicc proves advantageous here. Many other cases involve `Receivers` listening to protected system `Broadcasts` (i.e., they are protected by `Intent Filters` that only receive `Intents` sent by the system). ComDroid's list of protected `Broadcasts` is outdated, leading to false positives.

### System Broadcasts Without Action Check

There is a significant difference in the detection of system `Broadcasts` without action check, with Epicc detecting 107 vulnerabilities in the random sample and 706 in the popular one, while ComDroid only detects 33 and 146, respectively. This difference is due to ComDroid's outdated list of protected `Broadcasts` and an edge case where Soot type inference determines `Receivers` registered using the `registerReceiver()` method as having the type `android.content.BroadcastReceiver` (the abstract superclass of all `Receivers`). This occurs when multiple types of `Receivers` can reach the call to `registerReceiver()`. Since no `Receiver` code can be inspected, our analysis conservatively flags it as a vulnerability.

### Overall Detection Summary

Overall, Epicc detects 34,002 potential vulnerabilities, while ComDroid detects 44,869, which is 32% more. The extra flags found by ComDroid, upon manual verification, were all false positives. The potential causes of unsoundness in Epicc (i.e., JNI, reflection, and entry point handling) are also handled unsoundly in ComDroid, suggesting that the locations flagged by ComDroid but not by Epicc are not false negatives. The precision gain over ComDroid is significant and will aid further analyses. It is possible that both tools have false negatives in the presence of JNI, reflection, or when the lifecycle is not properly approximated. Specifically, 776 out of 838 popular applications and 237 out of 348 applications in the random sample make reflective calls. Future work will quantify how often these cause false negatives in practice and verify if the locations flagged by Epicc are true positives.

### Related Work

**ComDroid [6]**: ComDroid is the most closely related work to ours. Our goal is to formalize the concepts it initially captured. Key differences include:
- **Analysis Method**: ComDroid directly analyzes Dalvik bytecode, while we use retargeted Java bytecode, allowing us to leverage Soot's integrated analyses (e.g., call graph).
- **Interprocedural and Context-Sensitive Analysis**: Unlike ComDroid, our analysis is fully interprocedural and context-sensitive.
- **ICC Model**: Our ICC model is sound and more detailed, accounting for multiple branches and aliasing, resulting in fewer false positives as shown in Section 6.4.
- **Vulnerability vs. Attack Detection**: ComDroid focuses on finding potential vulnerabilities, whereas our approach enables identifying attacks for existing vulnerabilities by maintaining a database of analysis results and matching newly analyzed applications with those in our database.

**Other Android Analyses**:
- **Permission Analysis**: Tools like Kirin [13] use permissions to flag potentially dangerous functionality. Other methods [2, 15, 16] include detecting over-privileged applications [15] or malware [36].
- **Dynamic Analysis**: TaintDroid [11] performs dynamic taint tracking, exposing widespread personal data leakage. Extensions to TaintDroid [18] handle implicit flows. AppFence [22] prevents sensitive data exfiltration. Dynamic approaches [4, 9] prevent privilege escalation through ICC.
- **Static Analysis**: Several static analysis approaches [12, 17, 19, 25] focus on finding paths between exposed entry points and sensitive API calls, while we focus on connecting exit points to entry points. ScanDal [23] uses abstract interpretation to detect dangerous flows but has high false positives. Saint [30] modifies the Android framework to control application interaction.

### Conclusion

In this paper, we introduced an efficient and sound technique for inferring ICC specifications, demonstrating its feasibility on a large collection of market applications. Future work will explore various applications and analyses that exploit the ICC specification database. We will also investigate runtime extensions to identify potentially malicious communication between applications. These efforts aim to support the community's efforts to assess the security of market applications.

### Acknowledgements

We thank Matthew Dering for providing our application samples. We also thank Atul Prakash, Patrick Traynor, and our shepherd Ben Livshits for editorial comments during the writing of this paper. This material is based upon work supported by the National Science Foundation Grants No. CNS-1228700, CNS-0905447, CNS-1064944, and CNS-0643907. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation. This research is also supported by a Google Faculty Award.

### References

[References listed as provided]

---

This version of the text is more structured, coherent, and professional, with improved clarity and flow.