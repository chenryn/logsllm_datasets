P
R
292
For the presence of ﬂags and the detection of extra
data, Epicc can precisely indicate when the value of an
Intent depends on the execution path. On the other hand,
a ComDroid speciﬁcation does not make this distinction.
When Epicc and ComDroid differ for a code location, we
include ﬂags in both the “ComDroid only” and “Epicc
only” rows of Table 2.
The Activity hijacking vulnerabilities found by both
ComDroid and Epicc are unsurprisingly common: they
represent all cases where implicit Intents are used to
start Activities. Service hijacking vulnerabilities are
much less prevalent, which is correlated with the fact
that Services are used less often than Activities. Broad-
cast theft vulnerabilities are quite common as well. As
previously described in Section 6.3, few exported com-
ponents are protected by permissions. Therefore, the
high number of malicious Activity or Service launch
as well as Broadcast injection vulnerabilities is not sur-
prising. Note the discrepancy between the number
of components without permissions and the total num-
ber of these vulnerabilities. A large portion of the
components not protected by permissions are Activities
with the android.intent.action.MAIN action and
the android.intent.category.LAUNCHER category,
which indicate that these components cannot be started
without direct user intervention. They are therefore not
counted as potential vulnerabilities.
If we consider the ﬁrst three vulnerabilities (unautho-
rized Intent receipt), we can see that ComDroid ﬂags a
high number of locations where Epicc differs. A manual
examination of a random subset of applications shows
that these differences are either false positives detected
by ComDroid or cases where Epicc gives a more precise
vulnerability speciﬁcation. We observed that a number of
code locations are detected as vulnerable by ComDroid,
whereas Soot does not ﬁnd them to be reachable. Epicc
takes advantage from the sound and precise Soot call
graph construction to output fewer false positives. Ad-
ditionally, the IDE model used by Epicc can accurately
keep track of differences between branches (e.g., explic-
it/implicit Intent or URI ﬂags), whereas ComDroid can-
not. Note that when an Intent is implicit on one branch
and explicit on another, ComDroid detects it as explicit,
which is a false negative. On the other hand, the IDE
model correctly keeps track of the possibilities.
With a few exceptions, the ComDroid and Epicc anal-
yses detect the same possible malicious Activity and Ser-
vice launches. That is expected, since both are detected
by simply parsing the manifest ﬁle. The few differences
can be explained by minor implementation differences
or bugs in pathological cases. The Broadcast injection
vulnerability shows stronger differences, with ComDroid
detecting 377 cases for the random sample and 5,187
for the popular one, whereas Epicc only ﬁnds 277 and
3,546, respectively. Some of the Broadcast injections
detected by ComDroid involved dynamically registered
Broadcast Receivers found in unreachable code. Once
again, the call graph used by Epicc proves to be an ad-
vantage. Many other cases involve Receivers listening
to protected system Broadcasts (i.e., they are protected
by Intent Filters that only receive Intents sent by the sys-
tem). The list of protected Broadcasts used by ComDroid
is outdated, hence the false positives.
Finally, there is a signiﬁcant difference in the de-
tection of the system Broadcasts without action check,
with Epicc detecting 107 vulnerabilities in the random
sample and 706 in the popular one, whereas ComDroid
only detects 33 and 146, respectively. The ﬁrst rea-
son for that difference is that the ComDroid list of pro-
tected Broadcasts is outdated. Another reason is an
edge case, where the Soot type inference determines Re-
ceivers registered using a registerReceiver() method as
having type android.content.BroadcastReceiver
(i.e., the abstract superclass of all Receivers). It occurs
when several types of Receivers can reach the call to
registerReceiver(). Since no Receiver code can be in-
spected, even though there may be a vulnerability, our
analysis conservatively ﬂags it as a vulnerability.
Overall, Epicc detects 34,002 potential vulnerabilities.
On the other hand, ComDroid detects 44,869 potential
security issues, that is, 32% more than Epicc. As de-
tailed above, the extra ﬂags found by ComDroid that
we checked were all false positives. Further, the poten-
tial causes of unsoundness in Epicc (i.e., JNI, reﬂection
and entry point handling) are also handled unsoundly in
ComDroid. Thus, we do not expect the locations ﬂagged
by ComDroid but not by Epicc to be false negatives. The
precision gain over ComDroid is signiﬁcant and will help
further analyses. Note that it is possible that both tools
have false negatives in the presence of JNI, reﬂection,
556  22nd USENIX Security Symposium 
USENIX Association
or when the life cycle is not properly approximated. In
particular, we found that 776 out of the 838 popular ap-
plications and 237 out of 348 applications in the random
sample make reﬂective calls. Future work will seek to
quantify how often these cause false negatives in prac-
tice. We will also attempt to determine if the locations
ﬂagged by Epicc are true positives.
7 Related Work
ComDroid [6] is the work most closely related to ours.
Our work aims to formalize the notions it ﬁrst captured.
It is different in many aspects. First, ComDroid di-
rectly analyses Dalvik bytecode, whereas we use retar-
geted Java bytecode. This allows us to leverage anal-
yses integrated with Soot (e.g., call graph). Also, un-
like ComDroid, our analysis is fully interprocedural and
context-sensitive. Second, our ICC model is sound and
more detailed, taking multiple branches and aliasing into
account. Thus, as shown in Section 6.4, our ICC vulnera-
bility study produces fewer false positives. Finally, Com-
Droid seeks to ﬁnd potential vulnerabilities, whereas our
approach enables ﬁnding attacks for vulnerabilities in ex-
isting applications. This is done by keeping a database
of analysis results and matching newly analyzed applica-
tions with applications in our database. This will allow
us to identify problematic application combinations.
Several kinds of application analysis have been per-
formed for the Android platform [10]. Permission anal-
ysis infers applications properties based on the permis-
sions requested at install time. Kirin [13] uses permis-
sions to ﬂag applications with potential dangerous func-
tionality. Other methods for permission analysis have
been proposed [2, 15, 16], including analyses to detect
over-privileged applications [15] or malware [36].
Dynamic analysis consists in analyzing applications
while they are running. TaintDroid [11] performs dy-
namic taint tracking on Android. It exposes widespread
leakage of personal data to third parties. An extension to
TaintDroid handles implicit ﬂows [18] by monitoring and
recording control ﬂow information. TaintDroid is also
used in the AppFence system [22], which actively pre-
vents sensitive data exﬁltration from mobile devices. Al-
ternative approaches dynamically prevent some classes
of privilege escalation attack through ICC [4, 9]. Dy-
namic analyses such as TaintDroid are limited by the
way they interact with the User Interface (UI). Smart-
Droid [35] tackles this issue by combining static and dy-
namic analyses. It is able to simulate the UI to expose
hidden behavior for seven malwares. As we use static
analysis we do not interact with the UI: the call graph is
complete and does not depend on any runtime condition.
Static analysis consists in analyzing application code
to infer useful properties without running the applica-
tion. Several approaches for static analysis have already
been proposed for Android applications. Enck et al.
use decompilation [28] followed by source code analysis
to characterize security properties of applications [12].
Grace et al. perform a study of the dangers caused by
100 ad libraries found in a sample of 100,000 applica-
tions [20] through a reachability analysis on disassem-
bled bytecode. Several analyses have statically found
permission leaks [17, 19, 25], which happen when a priv-
ileged application leaks its capabilities to unprivileged
ones. These analyses focus on ﬁnding paths between ex-
posed entry points and sensitive API calls, whereas we
focus on connecting exit points to entry points. Thus,
these analyses could beneﬁt from our ICC analysis.
ScanDal [23] attempts to soundly analyze information
ﬂow. It convert Dalvik bytecode to a formally deﬁned
intermediate language. Dangerous ﬂows are detected us-
ing abstract interpretation. Its analysis is path-insensitive
and has limited context-sensitivity. It ﬁnds some actual
privacy leaks, but is limited by a high number of false
positives and ﬂows that are impossible to conﬁrm.
Saint [30] modiﬁes the Android framework to control
application interaction. Every application comes with
a policy describing how it uses permissions it declares.
Policy compliance veriﬁcation is a possible application
of our tool but is out of the scope of this paper.
8 Conclusion
In this paper we have introduced an efﬁcient and sound
technique for inferring ICC speciﬁcations, and demon-
strated its feasibility on a large collection of market ap-
plications. Future work will study a range of applications
and analyses that exploit the database of ICC speciﬁca-
tions. We will also explore a range of extensions that can
use this information at runtime to identify potentially ma-
licious communication between applications. Through
these activities, we aim to aid the community’s efforts to
gauge the security of market applications.
Acknowledgements
We thank Matthew Dering for providing our application
samples. We also thank Atul Prakash, Patrick Traynor
and our shepherd Ben Livshits for editorial comments
during the writing of this paper. This material is based
upon work supported by the National Science Founda-
tion Grants No. CNS-1228700, CNS-0905447, CNS-
1064944 and CNS-0643907. Any opinions, ﬁndings, and
conclusions or recommendations expressed in this mate-
rial are those of the authors and do not necessarily reﬂect
the views of the National Science Foundation. This re-
search is also supported by a Google Faculty Award.
USENIX Association  
22nd USENIX Security Symposium  557
References
[1] ARTHUR, C.
Feature phones dwindle as android powers
ahead in third quarter. The Guardian, Nov. 2012. Available
at http://www.guardian.co.uk/technology/2012/nov/
15/smartphones-market-android-feature-phones.
[2] BARRERA, D., KAYACIK, H. G., VAN OORSHOT, P. C., AND
SOMAYAJI, A. A Methodology for Empirical Analysis of
Permission-Based Security Models and its Application to An-
droid. In Proceedings of the ACM Conference on Computer and
Communications Security (Oct. 2010).
[3] BODDEN, E.
Inter-procedural data-ﬂow analysis with ifds/ide
and soot.
In Proceedings of the ACM SIGPLAN International
Workshop on State of the Art in Java Program analysis (2012).
Available from http://sable.github.com/heros/.
[4] BUGIEL, S., DAVI, L., DMITRIENKO, A., FISCHER, T., AND
SADEGHI, A.-R. XManDroid: A New Android Evolution to
Mitigate Privilege Escalation Attacks. Tech. Rep. TR-2011-04,
Technische Universitat Darmstadt, Germany, Apr. 2011.
[5] BUGIEL, S., DAVI, L., DMITRIENKO, A., FISCHER, T.,
SADEGHI, A.-R., AND SHASTRY, B. Towards taming privilege-
escalation attacks on Android. In Proceedings of the 19th Annual
Network & Distributed System Security Symposium (Feb. 2012).
[6] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D.
Analyzing Inter-Application Communication in Android. In Pro-
ceedings of the 9th Annual International Conference on Mobile
Systems, Applications, and Services (MobiSys) (2011).
[7] CHRISTENSEN, A. S., MØLLER, A., AND SCHWARTZBACH,
M. I. Precise analysis of string expressions.
In Proc. 10th
International Static Analysis Symposium (SAS) (June 2003),
vol. 2694 of LNCS, Springer-Verlag, pp. 1–18. Available from
http://www.brics.dk/JSA/.
[8] DAVI, L., DMITRIENKO, A., SADEGHI, A.-R., AND
WINANDY, M. Privilege Escalation Attacks on Android. In Proc.
of the 13th Information Security Conference (ISC) (Oct. 2010).
[9] DIETZ, M., SHEKHAR, S., PISETSKY, Y., SHU, A., AND WAL-
LACH, D. S. Quire: Lightweight Provenance for Smart Phone
Operating Systems. In 20th USENIX Security Symposium (2011).
[10] ENCK, W. Defending users against smartphone apps: Techniques
and future directions. In ICISS (2011), pp. 49–70.
[11] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG,
J., MCDANIEL, P., AND SHETH, A. N.
TaintDroid: An
Information-Flow Tracking System for Realtime Privacy Moni-
toring on Smartphones.
In Proc. of the 9th USENIX Symp. on
Operating Systems Design and Implementation (OSDI) (2010).
[12] ENCK, W., OCTEAU, D., MCDANIEL, P., AND CHAUDHURI,
S. A Study of Android Application Security. In Proceedings of
the 20th USENIX Security Symposium (August 2011).
[13] ENCK, W., ONGTANG, M., AND MCDANIEL, P.
On
Lightweight Mobile Phone Application Certiﬁcation. In Proceed-
ings of the 16th ACM Conference on Computer and Communica-
tions Security (CCS) (Nov. 2009).
[14] ENCK, W., ONGTANG, M., AND MCDANIEL, P. Understand-
ing Android Security. IEEE Security & Privacy Magazine 7, 1
(January/February 2009), 50–57.
[15] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER,
D. Android Permissions Demystiﬁed. In Proc. of the ACM Conf.
on Computer and Communications Security (CCS) (2011).
[16] FELT, A. P., GREENWOOD, K., AND WAGNER, D. The Ef-
fectiveness of Application Permissions. In Proc. of the USENIX
Conference on Web Application Development (WebApps) (2011).
[17] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND
CHIN, E. Permission Re-Delegation: Attacks and Defenses. In
Proc. of the 20th USENIX Security Symp. (August 2011).
[18] GILBERT, P., CHUN, B.-G., COX, L. P., AND JUNG, J. Vision:
Automated Security Validation of Mobile Apps at App Markets.
In Proceedings of the International Workshop on Mobile Cloud
Computing and Services (MCS) (2011).
[19] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic
Detection of Capability Leaks in Stock Android Smartphones. In
NDSS ’12 (2012).
[20] GRACE, M. C., ZHOU, W., JIANG, X., AND SADEGHI, A.-R.
Unsafe exposure analysis of mobile in-app advertisements.
In
Proceedings of the ﬁfth ACM conference on Security and Privacy
in Wireless and Mobile Networks (2012), WISEC ’12, ACM.
[21] HARDY, N. The confused deputy: (or why capabilities might
have been invented). SIGOPS Oper. Syst. Rev. 22, 4 (Oct. 1988).
[22] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND
WETHERALL, D. These Aren’t the Droids You’re Looking For:
Retroﬁtting Android to Protect Data from Imperious Applica-
tions. In Proceedings of the ACM Conference on Computer and
Communications Security (CCS) (2011).
[23] KIM, J., YOON, Y., AND YI, K. Scandal: Static analyzer for
detecting privacy leaks in android applications. In MoST 2012:
Workshop on Mobile Security Technologies 2012 (2012).
[24] LHOT ´AK, O., AND HENDREN, L. Scaling java points-to analysis
using spark. In Proceedings of the 12th international conference
on Compiler construction (2003), CC’03, Springer-Verlag.
[25] LU, L., LI, Z., WU, Z., LEE, W., AND JIANG, G. Chex: stat-
ically vetting android apps for component hijacking vulnerabil-
ities.
In Proc. of the 2012 ACM conference on Computer and
communications security (2012), CCS ’12, ACM, pp. 229–240.
[26] MCDANIEL, P., AND ENCK, W. Not So Great Expectations:
Why Application Markets Haven’t Failed Security. IEEE Secu-
rity & Privacy Magazine 8, 5 (September/October 2010), 76–78.
[27] MLOT, S. Google’s bouncer malware tool hacked. PC Mag-
azine, June 2012. Available from http://www.pcmag.com/
article2/0,2817,2405358,00.asp.
[28] OCTEAU, D., ENCK, W., AND MCDANIEL, P. The ded Decom-
piler. Tech. Rep. NAS-TR-0140-2010, Network and Security Re-
search Center, Pennsylvania State University, USA, Sept. 2010.
Available from http://siis.cse.psu.edu/ded/.
[29] OCTEAU, D., JHA, S., AND MCDANIEL, P.
Retarget-
ing android applications to java bytecode.
In Proceed-
ings of the 20th International Symposium on the Foundations
of Software Engineering (November 2012). Available from
http://siis.cse.psu.edu/dare/.
[30] ONGTANG, M., MCLAUGHLIN, S., ENCK, W., AND MC-
DANIEL, P. Semantically Rich Application-Centric Security in
Android. In Proceedings of the 25th Annual Computer Security
Applications Conference (ACSAC) (Dec. 2009), pp. 340–349.
[31] ROSENBERG,
J.
Google play hits 25 billion down-
loads.
Avail-
able at http://officialandroid.blogspot.com/2012/
09/google-play-hits-25-billion-downloads.html.
Android - Ofﬁcial blog, Sept. 2012.
[32] SAGIV, M., REPS, T., AND HORWITZ, S. Precise interprocedu-
ral dataﬂow analysis with applications to constant propagation.
Theor. Comput. Sci. 167, 1-2 (Oct. 1996), 131–170.
[33] SECURITY, N. Malware controls 620,000 phones, sends
costly messages. Help Net Security, January 2013. Avail-
able from http://www.net-security.org/malware_news.
php?id=2391.
[34] VALL ´EE-RAI, R., GAGNON, E., HENDREN, L. J., LAM, P.,
POMINVILLE, P., AND SUNDARESAN, V. Optimizing java byte-
code using the soot framework: Is it feasible? In Proc. of the 9th
International Conf. on Compiler Construction (2000), CC ’00.
[35] ZHENG, C., ZHU, S., DAI, S., GU, G., GONG, X., HAN, X.,
AND ZOU, W. Smartdroid: an automatic system for revealing ui-
based trigger conditions in android applications. In Proceedings
of the second ACM workshop on Security and privacy in smart-
phones and mobile devices (2012), ACM, pp. 93–104.
[36] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey, You,
Get off of My Market: Detecting Malicious Apps in Ofﬁcial and
Alternative Android Markets. In Proceedings of the Network and
Distributed System Security Symposium (Feb. 2012).
558  22nd USENIX Security Symposium 
USENIX Association