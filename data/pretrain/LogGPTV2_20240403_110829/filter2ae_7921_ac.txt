可供转换使用的工具有 [Emscripten](http://kripken.github.io/emscripten-site/) 、
[binaryen](https://github.com/WebAssembly/binaryen) 、
[WABT](https://github.com/WebAssembly/wabt) 等。
两个框架的介绍就不详细谢了，具体DOC和介绍按需去他们官网搜吧 :)
简评一下两者区别：
> `asm.js 框架` 可以由手写方式字符串书写，拥有极大的可读性，用于计算类的实现，性能也达到同样C脚本2/3效率。
>
> `WebAssembly 框架` 而是以由c语言脚本书写，再通过编译成中间件file.wasm的Buffer形式实现，因此执行更加高效。
## PoolSocket & WebSocket 流程差异分析
要我去翻看Miner的源码，我是懒得一段段跟进去看了……所以我们直接抓包看看client与server到底在说些什么吧。
PoolSocket:
    client >>
    {
        "method": "login",
        "params": {
            "login": "********** [ Wallet Addr ] **********",
            "pass": "",
            "agent": "xmr-stak-cpu/1.3.0-1.5.0"
        },
        "id": 1
    }
    server >
    {
        "method": "submit",
        "params": {
            "id": "811233385116793",
            "job_id": "664084446453489",
            "nonce": "11018000",
            "result": "0e9b264a2a225cbbdc520b1fbef207a12e092c23325b7667c27bd0d95a590c00"
        },
        "id": 1
    }
    server >
        {
            "type": "auth",
            "params": {
                "site_key": "******* [ siteKey ] *******",
                "type": "anonymous",
                "user": null,
                "goal": 0
            }
        }
    srv >
        {
            "type": "submit",
            "params": {
                "job_id": "931350207026116",
                "nonce": "197aae72",
                "result": "6d9a8c2da95bcd498a4056631f1a03b51f2d6806b1c6d44e4f45fd9878b6eb00"
            }
        }
    srv >
        {
            "type": "submit",
            "params": {
                "job_id": "931350207026116",
                "nonce": "edd815a0",
                "result": "ca182b3086f441510397d67b2323014d201aa14b89b6c1fcf59759794540a900"
            }
        }
    srv >
        {
            "type": "submit",
            "params": {
                "job_id": "931350207026116",
                "nonce": "6e791848",
                "result": "9fec44bc7d338b5e114e138ee902066ba8d6a2a0e4c0b6090fa94571eca54900"
            }
        }
    srv    1. 其实输入输出都是那几个量，验证登录 Wallet(siteKey)，获取jobs，开始计算，返回计算值，由Pool确认算力价值。
>
>   2. 所有的 `method` 变成了 `type`, `params` 内容基本原样传递，`result` 根据流程有所变化。
>
>
看过 `coinhive.min.js` 我们目前大致知道了：
>   1. 脚本通过浏览器端asm实现方式，以尽可能高的效率完成复杂的CPU计算，实现XMR挖矿。
>
>   2. 因为web端无法直接进行Socket通信，所以需要用 `WebSocket` 与矿池通信。
>
>
由以上内容和对wss流量的解析，看出Pool连接流量中最大的变化主要在json内容构造上，而核心的领取jobs、计算hash、提交到pool、确认hash有效四个步骤，实际内容与一般Miner并无根本差异，只是由`JsonRPC2.0`变更为适应前端的长连接类型`WebSocket`而已。
既然浏览器里的CryptoNight算法已经实现，那么改造起来就hin方便辣！我们只需要自己构造Pool或者构造PoolProxy接管所有的操作，就能完全从Coinhive平台跳出来，直接为自己的Wallet挖矿，免去使用平台而损失的30%手续费。
而用算力替代网站内的广告，在控制对CPU占用情况下不对用户造成卡顿，同时避免在自己网站停放广告导致用户厌烦的情况下，赚取用来维护网站的“零花钱”，感觉也是一个更好的发展方向。
## 脚本改造&Pool搭建
Coinhive手续就是高！广告联盟弹框就是飘！
要不是30%手续费让我心如刀割，说不定我就老老实实用Coinhive现成的脚本了，不会有这篇文章了吧！
开个玩笑……
黑客意识哪来？极客情怀何在？众矢之的，打倒虚拟货币资本主义构造属于自己的前端矿池服务器，刻不容缓！
但是！都写了这么长了，各位看官或许也审美疲劳了，那么在下一篇文章中我们再详细来聊聊，如何构造属于自己的前端挖矿PoolProxy~
（Emmmm……）
（好像那篇说Webshell的第二篇文章……也忘了写了……下回一同补档……）
（预习班：来自学一下demo，再养成阅读无注释源码的习惯吧！）
github: 