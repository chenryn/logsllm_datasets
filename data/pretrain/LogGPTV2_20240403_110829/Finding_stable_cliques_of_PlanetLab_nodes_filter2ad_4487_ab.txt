thresholds. 
as unstable. 
clique sizes for 
as stable. 
RTT sample. This mean acts as a statistical 
mean of previously 
The TO is updated for each RTT sample i. Let TOi, be 
computed TO values and 
the weighted 
the current 
to remove noise from the TO curve, making it easier to find 
the TO valleys, 
the following 
the weighted 
corresponds 
weighted 
,B =  4. 
mean of the RTT samples. 
to the difference 
1t::J..(RTTi) -RTTI 
and the 
we used a =  0.9 and 
below. The TO is computed with 
t::J..(RTTi) is 
mean. In the experiments 
of the last RTT sample 
In this expression 
expression. 
described 
filter 
TOi =  mTOi-1 +(l-a)*(t::J..(RTT
i)+,B*It::J..(RTTi)­
RTTI) 
It is important 
to compute a "fair" threshold 
which al­
as stable/unstable. 
lows nodes to be classified 
the TO curve, an example of which is shown in figure 2, it 
often presents 
A valley cor­
responds 
of 
RTT is also low. A peak corresponds 
a series of peaks and valleys. 
to lower values of the TO, and the variation 
to periods in which 
Considering 
978-1-4244-7501-811 
0/$26.00 
©201 0 IEEE 
318 
DSN 2010: Duarte Jr. et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:27 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
samples of the 
is determined 
of consecutive 
there is a higher variation 
RTT. The threshold 
tion of the RTT and the TO curves. 
puted for a pair of nodes is smoothed with a statistical 
filter. 
The communication 
ered to be stable during the periods 
the smoothed curve are below the threshold. 
between the pair of nodes is consid­
in which the valleys 
by observing 
Initially 
for the exact solution 
of 
MC (see, for example, ll8J and liS], or l2J for a survey on 
the subject). 
show that many 
instances 
with reasonable computational resources.  Fortunately, this 
is the case of the graphs generated 
hand. 
experimental 
interest 
of the problem can be solved 
by the experiment 
There are several 
of practical 
algorithms 
Reported 
the curve com­
results 
the varia­
of 
at 
are given in section 4).  The 
The example in 
figure 2 shows the use of a 400ms thresh­
of a node. This TO curve was 
for 4 hours and 30 
of the TO. Until 03:30 of Oc­
and the TO 
a high variation, 
circles 
I (details 
the stability 
show the valleys 
are also high. The RTT variation 
old to determine 
computed for a node that was monitored 
minutes in experiment 
little 
tober 15th, the RTT presented 
valleys 
so do the TO valleys. 
leys are mostly above the threshold, 
BAD (unstable). 
the threshold, 
graph also shows that our classification 
take into account brief variations 
lead to a misclassification. 
the node is classified 
Otherwise, 
In the period in which the TO val­
as 
the node is classified 
when the TO valleys 
are below 
as GOOD (stable). 
criterion 
The 
does not 
of the TO, which could 
then reduces, and 
Plab • LogPlot (131 .175.17.9- 
219.243.200.29) 
:  1 
rtt­
to 
in solving 
as follows. 
approaches 
Some of the most successful 
prac­
of MC are Branch & Bound based ones 
Let G be an undirected 
tical instances 
which can be described 
the set N K 
graph and let K be a clique in G. Consider 
given by the intersection 
of the neighborhoods 
of the ver­
tices in G, that is, NK =  nVEK f(v). Note that K is a 
maximal clique in G if and only if N =  0. Otherwise, 
for every u E NK, the set K U {u} is a clique in G and 
NKU{u} =  NK n f(u). 
The following 
(schematic) 
algorithm 
for finding a max­
imum clique in a given graph G is based on the remarks 
above. The algorithm 
keeps a clique C in G and a list S of 
pairs (K, N K). Initially, 
only 
C is empty and S contains 
the pair (0, V(G)). At each step, the algorithm 
removes a 
pair (K, N K) from S. If N K is empty, then K is a maximal 
clique in G. If IKI > 101, the algorithm 
lets C f-K. If 
N K is not empty, the algorithm  computes 
an upper bound 
b on the size of the maximum clique in G[K U NKJ. If 
b   101, the pair (K, NK) is discarded; 
otherwise, 
a vertex 
v is chosen from NK and the pairs (K U {v},K n f(v)) 
and (K, N K - {v}) are added to S. 
450 
350 J Ii JlilMllrud;ij 
C f-0 
V(G)) 
Sf- push(0, 
while S -=I-0 do 
MaximumClique(G) 
400 
1511001.OU  1511002.00 
1511003.00  1511004.00  1511005.00 
Figure 2. A threshold 
nodes as stable 
is used to classify 
Based on this data the algorithm 
described 
in the next 
section 
is employed for computing 
the stable cliques. 
(K, N) f- pop(S) 
if N =  0 then 
if IKI > 101 then 
Cf- K 
else 
if IKI + Bound(G, N) > ICI then 
v f-pop(N) 
Sf- push(K, 
N) 
Sf- push(K U {v}, N n f(v)) 
return 
C 
3. Computing the Node Cliques 
As is well known, the problem 
of computing 
a maximum 
decision 
graph is NP-hard. 
the corresponding 
clique (MC, for short) in  an arbitrary 
Indeed, 
G and an integer k, does G has a clique of size k?") is 
one of the 21 problems 
basic NP-complete 
of NP-complete 
in [101, as well as one of the "six 
chosen as "the 'basic core' 
for the beginner" 
problem ("given 
problems" 
problems 
in l7J. 
a graph 
In the algorithm, 
S f-push(e) 
denotes the operation 
e f-pop(S) 
this element in e. Bound(G, 
of removing some element from set 
N) returns 
of adding the element e to set S. Likewise, 
denotes the operation 
S and storing 
an 
upper bound on the size of the maximum clique in G[N]. 
Using the schematic 
as a reference, 
from choosing 
and N (and their respective 
the bounding 
different 
the data structures 
algorithms 
implementing 
sets S, K 
MaximumClique( 
for MC result 
insertion/deletion 
function Bound(G, 
policies), 
algorithm 
concrete 
G) above 
N). 
and 
978-1-4244-7501-8/1 
0/$26.00 
©201 0 IEEE 
319 
DSN 2010: Duarte Jr. et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:27 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
For the determination 
of the cliques 
in the graphs pre­
! an algorithm 
sented in this work, we have implemented
along the lines of the one described 
plementation, 
set S is implemented 
sets K and N as balanced 
Bound(G, 
oring of G [N] and returns 
coloring. 
N) computes a (not necessarily 
in [181. In our im­
as a stack and the 
the number of colors used in this 
minimal) 
col­
search trees. The function 
4. PlanetLab Experiments 
network that supports 
the 
[41. As of December 
of about 1 060 nodes located 
at 
consisted 
is a global research 
of new network services 
PlanetLab 
development 
2009, PlanetLab 
491 sites all over the world, connected 
the Internet. 
are connected 
aged in various ways, which results 
great instability. 
Nodes have widely different 
to networks 
which are configured 
in  an environment 
and man­
of 
to each other through 
capabilities 
and 
Three experiments 
in which the monitoring 
scheme de­
we refer to these as ex­
in section 
2 were executed, 
scribed 
periments 
1,2 and 3. 
Experiment 
1 was started 
at October 2008, lasted 7 days, 
in section 
at July 2009, 
(GMT) and involved 
(GMT -3) until October 
(GMT -3) and involved 
from October 11th 2008, 00:00:00 
519 nodes, of 
18th 2008, 00:00:00 
here due to the reasons ex­
which only 200 are considered 
plained 
2 was started 
2; experiment 
lasted 8 days, from July 8th 2009, 00:00:00 
til July 16th 2009, 00:00:00 
which only 400 are considered;  experiment 
3 was started 
at October 2008, lasted 1 2  days, from October 18th 2009, 
00:00:00 
and involved 
In each of the 3 experiments, 
snapshots 
Therefore, 
prises 7 x 24 x 4 =  672 snapshots, 
prises 8 x 24 x 4 =  768 snapshots, 
1 2  x 24 x 4 =  1152 snapshots. 
between 
experiment 
1 com­
experiment 
2 com­
(GMT) until October 30th 2009, 00:00:00 
(GMT) un­
631, of 
the time interval 
was 15 minutes. 
experiment 
(GMT) 
3 comprises 
638 nodes, of which only 461 are considered. 
20 
30 
40 
o 
is employed in or­
from the point of 
data. This al­
As described 
in section 
2, a threshold 
a node as stable or unstable 
of characteristics 
der to classify 
view of another node, given the monitoring 
lows the computation 
views, in which a node is considered 
but the opposite 
of asymmetric 
values of the threshold, 
monitored. 
in experiment 
views obtained 
considering 
all node pairs that were 
such as asymmetric 
to be stable by another, 
is not true. Figure 3 shows the percentage 
1, for different 
IThe implementation 
was coded in C++, using the Boost  Graph  Li­
code was executed in set of Debian/GNU  Linux 
platforms available 
at C3SL (http: 
brary 1171. The resulting 
systems using different  hardware 
//www.c3s1.ufpr.br) 
SO-,,--, 
After the stability 
graph is built corresponding 
is computed for all pairs of nodes, an 
In 
are the nodes themselves 
to a snapshot. 
and there 
to nodes u and v if and only if both 
each other as stable, 
i.e. they do not present 
undirected 
this graph, the vertices 
is an edge adjacent 
nodes classify 
asymmetric 
views. 
We studied 
the behavior 
1, threshold 
For experiment 
of the system for different 
val­
ues of the threshold. 
values of 
400ms, 600ms, 1000ms and 2000ms were used; for exper­
values of 200ms, 400ms, 600ms 
iments 2 and 3 threshold 
were used. In experiment 
1, 672 x 4 =  2688 graphs were 
built, 
and experiment 
total 8448 graphs were built. 
we compute the maximum cliques 
scribed 
1152 x 3 =  3456 graphs. In 
These are the graphs on which 
using the algorithm 
2, 768 x 3 =  2304 graphs were built, 
in experiment 
3 generated 
in section 
de­
3. 
Figures 
4, 5 and 6 show the size of the maximum clique 
1, 2 and 3. As expected, 
the 
as the threshold 
that as the threshold 
between stable and "not so stable" 
increases. 
increases, 
becomes 
communication 
patterns 
fall within the 
Indeed, when a higher threshold 
of each graph in experiments 
maximum clique size increases 
It should be noted however, 