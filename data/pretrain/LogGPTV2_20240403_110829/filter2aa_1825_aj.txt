### Module List and Symbol Status

The module list displays all the DLLs and the EXE that are currently loaded into the debugged process. Each entry includes the start and end virtual addresses where the module is loaded, followed by the symbol status in parentheses. The possible values for symbol status are:

- **deferred**: The symbols for this module have not been needed yet in the current debugging session, so they are not loaded. They will be loaded when required, such as when a call stack contains a function from this module.
- **pdb symbols**: Proper public symbols have been loaded, and the local path to the PDB file is displayed.
- **private pdb symbols**: Private symbols are available, which is common for your own modules compiled with Visual Studio. For Microsoft modules, this is rare (e.g., combase.dll). Private symbols provide information about local variables and private types.
- **export symbols**: Only exported symbols are available. This typically means there are no full symbols, but the debugger can use the exported symbols. It's better than no symbols at all, but it can be confusing because the debugger may use the closest export, which might not be the actual function.
- **no symbols**: The debugger attempted to locate the symbols but found nothing, not even exported symbols. This is common for executables or driver files.

To force the loading of a module's symbols, use the following command:
```plaintext
.reload /f modulename.dll
```
This will provide definitive evidence of the availability of symbols for the module.

Symbol paths can also be configured in the debuggerâ€™s settings dialog. Open the `File / Settings` menu and locate `Debugging Settings`. Add more paths for symbol searching, which is useful if you are debugging your own code and want the debugger to search your directories for relevant PDB files (see Figure 5-3).

**Figure 5-3: Symbols and source paths configuration**

Ensure that symbols are configured correctly before proceeding. To diagnose any issues, you can enter the `!sym noisy` command, which logs detailed information for symbol load attempts.

### Thread List and Current Thread

In the thread list, one of the threads will have a dot in front of its data, indicating the current thread from the debugger's perspective. Any command involving a thread, where the thread is not explicitly specified, will work on this current thread. The "current thread" is also shown in the prompt, with the number to the right of the colon being the current thread index (e.g., 3 in this example).

To show the stack trace for the current thread, enter the `k` command:
```plaintext
0:003> k
# Child-SP RetAddr Call Site
00 00000001`224ffbd8 00007ffc`204aef5b ntdll!DbgBreakPoint
01 00000001`224ffbe0 00007ffc`1f647974 ntdll!DbgUiRemoteBreakin+0x4b
02 00000001`224ffc10 00007ffc`2044a271 KERNEL32!BaseThreadInitThunk+0x14
03 00000001`224ffc40 00000000`00000000 ntdll!RtlUserThreadStart+0x21
```

If you see very large offsets from the beginning of a function, it is likely not the real function name; it is just the closest one the debugger knows about. A 4-hex-digit offset is almost always incorrect.

### Switching Threads and Displaying Call Stacks

To switch to a different thread, use the `~ns` command, where `n` is the thread index. For example, to switch to thread 0 and display its call stack:
```plaintext
0:003> ~0s
win32u!NtUserGetMessage+0x14:
00007ffc`1c4b1164 c3 ret
0:000> k
# Child-SP RetAddr Call Site
00 00000001`2247f998 00007ffc`1d802fbd win32u!NtUserGetMessage+0x14
01 00000001`2247f9a0 00007ff7`5382449f USER32!GetMessageW+0x2d
02 00000001`2247fa00 00007ff7`5383ae07 notepad!WinMain+0x267
03 00000001`2247fb00 00007ffc`1f647974 notepad!__mainCRTStartup+0x19f
04 00000001`2247fbc0 00007ffc`2044a271 KERNEL32!BaseThreadInitThunk+0x14
05 00000001`2247fbf0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
```

This is Notepad's main (first) thread, and the top of the stack shows the thread waiting for UI messages (`win32u!NtUserGetMessage`).

To show the call stack of another thread without switching to it, use the tilde and thread number before the actual command. For example, to show thread 1's stack:
```plaintext
0:000> ~1k
# Child-SP RetAddr Call Site
00 00000001`2267f4c8 00007ffc`204301f4 ntdll!NtWaitForWorkViaWorkerFactory+0x14
01 00000001`2267f4d0 00007ffc`1f647974 ntdll!TppWorkerThread+0x274
02 00000001`2267f7c0 00007ffc`2044a271 KERNEL32!BaseThreadInitThunk+0x14
03 00000001`2267f7f0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
```

This call stack indicates a thread that is part of the thread pool, with `TppWorkerThread` being the entry point for thread pool threads.

### Thread Information and Hexadecimal Conversion

The basic information for a thread provided by the `~` command is shown in Figure 5-4.

**Figure 5-4: Thread information for the `~` command**

Most numbers reported by WinDbg are hexadecimal by default. To convert a value to decimal, use the `?` (evaluate expression) command. For example, to get the decimal process ID:
```plaintext
0:000> ? 874c
Evaluate expression: 34636 = 00000000`0000874c
```

You can also express decimal numbers with the `0n` prefix:
```plaintext
0:000> ? 0n34636
Evaluate expression: 34636 = 00000000`0000874c
```

The `0y` prefix can be used to specify binary values. For example, `0y1100` is the same as `0n12` or `0xc`.

### Examining the TEB of a Thread

To examine the TEB (Thread Environment Block) of a thread, use the `!teb` command. Without an address, it shows the TEB of the current thread:
```plaintext
0:000> !teb
TEB at 000000012229d000
ExceptionList: 0000000000000000
StackBase: 0000000122480000
StackLimit: 000000012246f000
SubSystemTib: 0000000000000000
FiberData: 0000000000001e00
ArbitraryUserPointer: 0000000000000000
Self: 000000012229d000
EnvironmentPointer: 0000000000000000
ClientId: 000000000000874c . 0000000000018068
RpcHandle: 0000000000000000
Tls Storage: 000001c93676c940
PEB Address: 000000012229c000
LastErrorValue: 0
LastStatusValue: 8000001a
Count Owned Locks: 0
HardErrorMode: 0
```

To view the TEB of a specific thread, provide the address:
```plaintext
0:000> !teb 00000001`222a5000
TEB at 00000001222a5000
ExceptionList: 0000000000000000
StackBase: 0000000122680000
StackLimit: 000000012266f000
SubSystemTib: 0000000000000000
FiberData: 0000000000001e00
ArbitraryUserPointer: 0000000000000000
Self: 00000001222a5000
EnvironmentPointer: 0000000000000000
ClientId: 000000000000874c . 00000000000046ac
RpcHandle: 0000000000000000
Tls Storage: 000001c936764260
PEB Address: 000000012229c000
LastErrorValue: 0
LastStatusValue: c0000034
Count Owned Locks: 0
HardErrorMode: 0
```

### Viewing Structure Details

To view the structure details, use the `dt` (display type) command. For example, to view the `_TEB` structure:
```plaintext
0:000> dt ntdll!_teb
+0x000 NtTib : _NT_TIB
+0x038 EnvironmentPointer : Ptr64 Void
+0x040 ClientId : _CLIENT_ID
+0x050 ActiveRpcHandle : Ptr64 Void
+0x058 ThreadLocalStoragePointer : Ptr64 Void
+0x060 ProcessEnvironmentBlock : Ptr64 _PEB
...
+0x1808 LockCount : Uint4B
+0x180c WowTebOffset : Int4B
+0x1810 ResourceRetValue : Ptr64 Void
+0x1818 ReservedForWdf : Ptr64 Void
+0x1820 ReservedForCrt : Uint8B
+0x1828 EffectiveContainerId : _GUID
```

To view the actual values of data members, attach an address to the `dt` command:
```plaintext
0:000> dt ntdll!_teb 00000001`2229d000
+0x000 NtTib : _NT_TIB
+0x038 EnvironmentPointer : (null)
+0x040 ClientId : _CLIENT_ID
+0x050 ActiveRpcHandle : (null)
+0x058 ThreadLocalStoragePointer : 0x000001c9`3676c940 Void
+0x060 ProcessEnvironmentBlock : 0x00000001`2229c000 _PEB
+0x068 LastErrorValue : 0
...
+0x1808 LockCount : 0
+0x180c WowTebOffset : 0n0
+0x1810 ResourceRetValue : 0x000001c9`3677fd00 Void
+0x1818 ReservedForWdf : (null)
+0x1820 ReservedForCrt : 0
+0x1828 EffectiveContainerId : _GUID {00000000-0000-0000-0000-000000000000}
```

### Setting and Managing Breakpoints

To set a breakpoint in the `CreateFileW` API function, use the following command:
```plaintext
0:000> bp kernel32!createfilew
```

To list existing breakpoints, use the `bl` command:
```plaintext
0:000> bl
0 e Disable Clear
00007ffc`1f652300 0001 (0001)
0:**** KERNEL32!CreateFileW
```

To continue execution until the breakpoint hits, use the `g` command or press the Go button on the toolbar (or hit F5):
```plaintext
0:000> g
```

The debugger will show `Busy` in the prompt, and the command area will indicate that the debuggee is running. When the breakpoint is hit, the debugger will break, and you can inspect the state of the process.

### Conclusion

This section covers the essential commands and techniques for managing modules, symbols, threads, and breakpoints in WinDbg. By understanding these concepts, you can effectively debug and analyze processes and their behavior.