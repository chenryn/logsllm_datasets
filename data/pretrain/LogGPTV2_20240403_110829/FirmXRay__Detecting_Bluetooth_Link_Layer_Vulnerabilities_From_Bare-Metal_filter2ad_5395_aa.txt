title:FirmXRay: Detecting Bluetooth Link Layer Vulnerabilities From Bare-Metal
Firmware
author:Haohuang Wen and
Zhiqiang Lin and
Yinqian Zhang
FirmXRay: Detecting Bluetooth Link Layer Vulnerabilities
From Bare-Metal Firmware
Haohuang Wen
PI:EMAIL
The Ohio State University
Zhiqiang Lin
PI:EMAIL
The Ohio State University
Yinqian Zhang
PI:EMAIL
The Ohio State University
ABSTRACT
Today, Bluetooth 4.0, also known as Bluetooth Low Energy (BLE),
has been widely used in many IoT devices (e.g., smart locks, smart
sensors, and wearables). However, BLE devices could contain a
number of vulnerabilities at the BLE link layer during broadcasting,
pairing, and message transmission. To detect these vulnerabilities
directly from the bare-metal firmware, we present FirmXRay, the
first static binary analysis tool with a set of enabling techniques
including a novel base address identification algorithm for robust
firmware disassembling, precise data structure recognition, and
configuration value resolution. As a proof-of-concept, we focus on
the BLE firmware from two leading SoC vendors (i.e., Nordic and
Texas Instruments), and implement a prototype of FirmXRay atop
Ghidra. We have evaluated FirmXRay with 793 unique firmware
(corresponding to 538 unique devices) collected using a mobile app
based approach, and our experiment results show that 98.1% of
the devices have configured random static MAC addresses, 71.5%
Just Works pairing, and 98.5% insecure key exchanges. With these
vulnerabilities, we demonstrate identity tracking, spoofing, and
eavesdropping attacks on real-world BLE devices.
CCS CONCEPTS
• Security and privacy → Software reverse engineering; Em-
bedded systems security; Mobile and wireless security.
KEYWORDS
Firmware analysis, Bluetooth Low Energy, Embedded system secu-
rity, Vulnerability discovery
ACM Reference Format:
Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang. 2020. FirmXRay: De-
tecting Bluetooth Link Layer Vulnerabilities From Bare-Metal Firmware. In
2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3372297.3423344
1 INTRODUCTION
Over the past several years, we have witnessed a rapid growth of
the Internet-of-Things (IoT), thanks to a variety of enabling tech-
nologies from sensors, micro-controllers, actuators, to mobile and
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3423344
cloud computing. Among the deployed IoTs, the BLE-enabled ones
are ubiquitous and have been widely used in many applications (e.g.,
health care, retail, asset tracking [19], and recently contact trac-
ing [59]). The key reason for its success is its low technical barrier
from both hardware and software. Today, there are many System
on Chip (SoC) vendors such as Nordic [11] and Texas Instruments
(TI) [15], which provide both hardware chips and software devel-
opment kits (SDKs) for IoT developers. There are also numerous
software platforms (e.g., Android), frameworks (e.g., Google Home),
and clouds (e.g., AWS) that enable application programmers to easily
assemble hardware gadgets with software components. Therefore,
such a low technical barrier has attracted a huge number of devel-
opers, and together they have produced billions of BLE-IoT devices.
However, a secure BLE device needs proper hardware capability
(e.g., I/O), and also correct configuration for its broadcasting, pair-
ing, and message encryption. Otherwise, it could lead to a number
of vulnerabilities at the BLE link layer. For instance, a BLE device
can be vulnerable to identity tracking [27] and device fingerprint-
ing [63] [20] if developers configure MAC addresses and universally
unique identifiers (UUIDs) statically for broadcasting. Meanwhile, a
BLE device can be vulnerable to active man-in-the-middle (MITM)
attacks (e.g., spoofing) if it is configured to only support Just Works
pairing [41] [49]. In addition, passive MITM attacks (e.g., eavesdrop-
ping) are also possible if it fails to enforce the Low Energy Secure
Connections pairing [36] to secure the key exchange [44] [32].
While it is important for a BLE device to be secure against these
attacks, it is in fact hard to do so for several reasons. First, the
configurations are complicated. For instance, to use secure pairing
methods (e.g., passkey entry and OOB [16]) instead of Just Works,
developers have to clearly specify the MITM protection requirement
and also the device I/O capability in the pairing feature packets.
Second, many security features also rely on capabilities provided by
device hardware. For example, to configure passkey entry pairing,
the device must have a keyboard or a touchable screen to let users
manually enter a passkey to authenticate the pairing device. Third,
some extra implementations are required. For example, to configure
periodically randomized MAC addresses, developers also need to
implement the exchange of Identity Resolving Key (IRK) [16].
Therefore, it is imperative to identify the aforementioned vulner-
abilities in BLE devices. There could be multiple approaches to do
so, such as packet analysis with real devices, or using companion
mobile apps. However, these approaches are either not scalable or
have only limited view. Fortunately, we notice that these vulnerabil-
ities can be directly identified from the low-level configurations in
the corresponding bare-metal firmware (i.e., firmware without OS
support, which is particularly popular for BLE due to its extremely
low energy requirement). While there is a large body of research
in firmware analysis for vulnerability discovery such as firmware
emulation [56] [23], fuzzing [47] [25] [60], rehosting [26] [31], and
static analysis [35] [33], nearly all of them focus on non-bare-metal
firmware (e.g., devices such as IoT routers and cameras [25] with
Linux kernels). Additionally, none of them systematically investi-
gates the vulnerabilities in bare-metal BLE-IoT devices.
To advance the state-of-the-art, we present FirmXRay, the first
static analysis tool to detect BLE link layer vulnerabilities from
configurations in the bare-metal firmware at scale. Specifically, we
have developed three techniques in FirmXRay. The first is Robust
Firmware Disassembling, which uses absolute pointers to model
base address constraints and infers the base address to disassem-
ble the firmware. The second is Precise Data Structure Recognition,
which leverages the static SDK function signatures to identify the
configurations from function parameters. The third is Configuration
Value Resolution to extract the configuration generation path and
resolve the configuration values. We have implemented FirmXRay
atop Ghidra [8], and target the firmware built with the SDKs from
Nordic or TI, the two leading global BLE SoC vendors [46].
To evaluate FirmXRay, we have to collect bare-metal firmware
at scale, which is challenging since IoT vendors seldom release the
device firmware publicly, and also there is no centralized platform
to collect them. Interestingly, we notice that bare-metal firmware
typically do not directly connect to the Internet through cellular
network or Wi-Fi, and thus they must rely on relays (e.g., mobile
apps) to transfer update packets wirelessly. Therefore, we design
a scalable mobile app based approach to collect the bare-metal
firmware. With this approach, we successfully downloaded 793
unique firmware corresponding to 538 unique devices.
Among these devices, FirmXRay discovered that 71.5% of them
adopt Just Works pairing that provides no protection against ac-
tive MITM attacks such as active eavesdropping and spoofing. In
addition, nearly all of them have configured random static MAC
addresses and insecure key exchanges, which allows tracking and
eavesdropping attacks that can leak user’s personal identity and
private data. Our results show that there is a wide spread of vulner-
abilities across various bare-metal BLE-IoT devices. To show the
security implications of the identified vulnerabilities, we demon-
strate three types of concrete attacks on 5 real-world BLE devices.
Contributions. Our paper makes the following contributions:
• We design the first automated static analysis tool FirmXRay to
detect BLE link layer vulnerabilities from the configurations of
bare-metal firmware with a novel algorithm to recognize the
base address, and then identify and resolve the configurations.
• We propose a mobile-app-based scalable approach to efficiently
collect bare-metal firmware images from only mobile apps, re-
sulting in 793 unique ones corresponding to 538 unique devices.
• We implement FirmXRay atop Ghidra, and evaluate it with 793
unique firmware, in which our tool discovered that 71.5% of the
devices use Just Works pairing, and nearly all of them have config-
ured random static MAC addresses and insecure key exchanges.
2 BACKGROUND
2.1 Bare-metal Firmware
Bare-metal firmware is ubiquitous among various IoT embedded
devices such as smart sensors, smart toys, smart locks, and smart
Figure 1: Memory layout of bare-metal IoT devices.
lights, because of its low energy consumption and also the trade
off between price and performance. Since it directly runs on a logic
hardware without any operating systems, fundamentally it is barely
a binary blob that only contains the program code to manage the
device functionality using an infinite loop and interacts with other
software components through interrupts.
Nowadays, many manufactures, such as Nordic [11], TI [15], and
Dialog [6], have developed various Micro Controller Units (MCUs),
which are small and self-contained computers on micro chips to
support the bare-metal firmware. Meanwhile, they often adopt low-
energy technologies such as BLE, and low-end processors such
as ARM Cortex-M0. Moreover, to facilitate the development of
an embedded device, these manufactures also provide software
development kits (SDKs) that have integrated a number of basic
functionalities. Typical examples are SoftDevice [12] from Nordic
and BLE-Stack [2] from TI, which enable developers to implement
specific device logic such as BLE pairing and data exchange, atop
the programming interfaces provided in the SDK.
Memory layout of bare-metal firmware. The memory layout
of a typical bare-metal IoT device is presented in Figure 1 [10]. At
a high level, the layout consists of two main regions: (i) read only
memory (ROM) containing program code and persistent data, and
(ii) random access memory (RAM) holding run-time variables. The
ROM is located at the lower address space (e.g., 0x0) whereas the
RAM is at higher address space (e.g., 0x20000000), and there is a
gap between these two memory regions. On the ROM side, there are
multiple isolated sections including the SDK provided code for the
precompiled vendor-specific functions, application code for device
logic, and bootloader for boot logic. On the RAM side, there are mul-
tiple RAM sections correspondingly for the application and SDK to
store static variables, as well as the stack and heap to store local and
dynamically allocated variables. For each section in the ROM and
RAM, it starts from an absolute base address, such as APP_ROM_BASE
for application, which can be customized before compilation.
Over-the-air upgrade of the firmware. While the bootloader
and the SDK are preloaded into the device memory and seldom get
changed overtime, there is a need for developers to upgrade the
application with new patches (e.g., when fixing vulnerabilities or
bugs). Since the application code does not rely on OS and is isolated
from other sections in the ROM, it is usually small in size (less than
one megabyte according to our observation), which thus allows the
upgrade procedure to directly replace the old application with a
new one. Additionally, since bare-metal devices often do not have
direct Internet access (e.g., cellular network or Wi-Fi), they rely on
other entities (e.g., smartphones) to serve as intermediate relays to
download the upgraded firmware from remote servers, and then
transfer the firmware to the devices. Such an upgrade process is
called over-the-air (OTA) upgrade because the transfer is through
wireless network such as Bluetooth. After receiving the upgraded
ApplicationBootloaderSDKAPP RAMSDK RAMDataGapHeapStackRead Only Memory (ROM)Random Access Memory (RAM)ROM_BASEAPP_ROM_BASERAM_BASEAPP_RAM_BASE0x00x180000x200000000x20002000Figure 2: Bluetooth Low Energy protocol stack.
firmware, the device reboots and the bootloader replaces the old
firmware with the latest one.
2.2 Bluetooth Low Energy
BLE protocol stack. The architecture of the BLE protocol stack [16]
is shown in Figure 2. At a high level, it is divided into three compo-
nents: application, host, and controller. At the bottom of the stack,
the link layer directly interacts with the physical layer, and is re-
sponsible for basic functions including advertising, connection, and
encryption. Meanwhile, the host communicates with the link layer
through the Host Controller Interface (HCI) and defines secure
device communication protocols such as Generic Attribute Profile
(GAP). At the top of the stack, the application layer leverages the
abstractions from the host to implement specific application logic.
BLE workflow. The general workflow of Bluetooth Low Energy
is presented in Figure 3, which illustrates how a central device (e.g.,
a smartphone) pairs with a peripheral device (e.g., a BLE smart
band), and exchanges data. At a high level, the workflow is broken
down into eight steps across three main stages: (I) Broadcast and
connection, (II) Pairing and bonding, and (III) Data Transmission.
The details of each stage are described as follows.
(I) Broadcast and connection. In this stage, the smartphone rec-
ognizes the broadcasting smart band and establishes a connection
with it. Initially, in order to indicate the willingness of connection,
the smart band needs to broadcast data packets to all nearby de-
vices, which include identifiable information such as Media Access
Control (MAC) address and universally unique identifiers (UUIDs).
A device that broadcasts information and waits for connection (❶)
is regarded as a peripheral, while the one scans the advertised BLE
packets (❷) from the peripherals and initiates the connection is
called a central. After the central initiates the connection request
(❸) to the peripheral, the connection is successfully established (❹).
(II) Pairing and bonding. The channel between the central and
peripheral often needs to be encrypted, and thus the pairing process
is for them to negotiate the cryptographic key. While broadcast and
connection is a mandatory stage for all BLE communications, the
pairing and bonding stage is optional. If none of the device requests
for pairing, the transferred data will be in plain text. Specifically,
the pairing process consists of the following three steps:
• Pairing feature exchange (❺). At first, the two devices ex-
change their pairing features so that an appropriate pairing
method (e.g., passkey entry) can be negotiated. The exchanged
features include their I/O capabilities, MITM requirement, BLE
version, etc. If MITM protection is needed and certain I/O require-
ments (e.g., having a keyboard or display) are satisfied, they will
Figure 3: Bluetooth Low Energy workflow.
select a secure pairing method including passkey entry, numeric
comparison, and Out Of Band (OOB). Otherwise, they have to use
Just Works, which has the weakest security protection.
• LTK/STK generation (❻). After the pairing method is decided,
the two devices then negotiate the encryption key. This step
performs differently according to specific BLE versions. When
two devices are below BLE 4.2, they use BLE Legacy Pairing to
generate a temporary short term key (STK) to encrypt the long
term key (LTK), in which the STK is generated based on the
selected pairing method (e.g., requiring a user to manually enter
a 6-digit passkey) [16]. If the two devices support at least BLE
4.2, the LE Secure Connection (LESC) pairing can be used. Based
on the Elliptic-Curve Diffie–Hellman (ECDH) protocol, each of
them generates a public-private key pair and only exchanges the
public key, and then an LTK is directly calculated on both sides
to encrypt the session. Note that the selected pairing method is
used to authenticate the pairing process (e.g., asking the user to
enter a password). If bonding is specified, the negotiated key is
stored in non-volatile memory for future communications.
• Transport specific key distribution (❼). After the STK or
LTK has been generated, the transport specific keys are dis-
tributed from one entity to the other. The distributed keys in-
clude the LTK (in Legacy pairing), Identity Resolution Key (IRK),
Connection Signature Resolving Key (CSRK), and so on.
(III) Data Transmission. When the first two stages are completed,
the central and the peripheral start to communicate with each other
(❽). The communication is through reading or writing data on cer-
tain BLE attribute called characteristic. To be more specific, the BLE
stack maintains a set of hierarchical attributes including services,
characteristics, and descriptors [7], which are identified by UUIDs.
3 OVERVIEW
3.1 Threat Model, Scope, and Assumptions
Threat model. In this paper, we consider that nearby attackers
can compromise the devices by leveraging the vulnerabilities at the
BLE link layer. These attackers are capable of sniffing BLE packets
during broadcast and data transmission, and also performing MITM
attacks. These attacks can be launched by using a programmable
Application LayerGAPGATTSMPATTL2CAPLink LayerPhysical LayerApplicationHostControllerHCI(III) Data Transmission(II) Pairing and Bonding(I) Broadcast and ConnectionScanConnection RequestBroadcast1PeripheralCentral3Connection Established42Pairing Feature Exchange56STK/LTK Generation (Legacy/LESC Pairing)7Read/Write Data8Transport Specific Key DistributionFigure 4: An example of a Just Works pairing vulnerability.
BLE development board such as a Nordic nRF52-DK [13] to build
a Bluetooth sniffer and MITM proxy.
Scope. While there are many attacks against BLE (e.g., [30, 34, 44,
48, 63]), we particularly focus on those caused by the vulnerabilities
at the BLE link layer, which is responsible for broadcast, pairing,
and encryption. To summarize, there are three types of such attacks:
(i) identity tracking, (ii) active MITM, and (iii) passive MITM.
(i) Identity tracking. This attack enables an attacker to keep track
of a victim’s identity based on the advertised information such
as MAC address from a BLE peripheral. While MAC address
is mandatory in each BLE packet, which makes identity track-
ing possible [27], it can be configured to be a static address
(e.g., public IEEE address [40]), or a randomly generated address
which keeps changing periodically (e.g., every 15 minutes [40]).
Therefore, in this case, how resilient the device against identity
tracking depends on the device configuration.
(ii) Active MITM. An active MITM attack allows intercepting (e.g.,
active eavesdropping) and modifying messages (e.g., spoofing).
In BLE, such a vulnerability can also be identified from configu-
rations. Specifically, among the four types of pairing, numeric
comparison and passkey entry are able to prevent active MITM at-
tacks since they rely on a third-party entity (e.g., a human being)
to authenticate the connection with a dedicated I/O (e.g., by man-
ually entering a passkey on the screen). Meanwhile, OOB can
mitigate this attack by narrowing down to an extremely short
connection distance. However, if the firmware fails to properly
configure with MITM protection, or lacks certain I/O capabilities
(which will still be reflected in the configurations), it has to use
Just Works pairing, which provides no protection against active
MITM attacks.
(iii) Passive MITM. Passive MITM attack allows an attacker to
read messages, such as passive eavesdropping. As in BLE, al-
though the communication traffic is encrypted after pairing, the
LTK can still be eavesdropped since the two devices have to first
establish a temporary encryption key negotiated in plain-text
when no public key cryptography is used. To mitigate this vul-
nerability, Bluetooth Special Interest Group (SIG) [3] has adopted
the Elliptic-Curve Diffie–Hellman (ECDH) protocol for key ex-
change since BLE 4.2 [16], which is known as the Low Energy
Secure Connection (LESC) pairing. However, such a protection
also relies on user configuration, because both the central and pe-