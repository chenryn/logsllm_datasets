D
C
(
y
c
n
e
u
q
e
r
F
 1
 0.9
 0.8
 0.7
 0.6
 0.5
2 min
8 min
 0
 1
 2
 3
 4
 5
 6
Difference in number of events per [monitor,prefix]
Figure 3: Diﬀerence in number of events per [moni-
tor,preﬁx] for T =2 and 8 minutes, relatively to T =4
minutes.
utes for clustering the updates of all the preﬁxes collected
from all the 50 monitors during our measurement period.
Let n(M, P, 4) be the number of events identiﬁed by mon-
itor M for preﬁx P using T = 4 minutes; n(M, P, 2) and
n(M, P, 8) are similarly deﬁned but with T = 2 minutes and
T = 8 minutes respectively. Figure 3 shows the distribution
of |n(M, P, 8) − n(M, P, 4)| and |n(M, P, 2) − n(M, P, 4)|,
which reﬂects the impact of using a higher or lower timeout
value, respectively. As one can see from the ﬁgure, in about
50% of the cases the three diﬀerent T values result in the
same number of events, and in more than 80% of the cases
the results from using the diﬀerent T values diﬀer by at most
2 events. Based on the data we can conclude that the result
of event clustering is insensitive to the choice of T = 4 min-
utes. This observation is also consistent with previous work.
For example [7] experimented with various timeout thresh-
old values between 2 minutes and 16 minutes, and found no
signiﬁcant diﬀerence in the clustering results. In the rest of
the paper, we use T = 4 minutes.
2.3 Classifying Routing Events
After the routing updates are grouped into events, we
classify the events into diﬀerent types based on the eﬀect
that each event has on the routing path. Let us consider two
consecutive events n and n + 1 for the same preﬁx observed
by the same monitor. We deﬁne the path in the last update
of event n as the ending path of event n, which is also the
starting path for event n + 1. Let pstart and pend denote
an event’s starting and ending paths, respectively, and ε
denote the path in a withdrawal message (representing an
empty path). If the last update in an event is a withdrawal,
we have pend = ε. Based on the relation between pstart and
pend of each event, we classify all the routing events into one
of the following categories as shown in Figure 4 2.
1. Same Path (Tspath): A routing event is classiﬁed as
a Tspath if its pstart = pend, and every update in the
event reports the same AS path as pstart, although
2To establish a valid starting state, we initialize pstart for
each (monitor,preﬁx) pair with the path extracted from the
routing table of the corresponding monitor.
Observed Events
Path Disturbance
Path Change
Same Path
Tpdist
Tup
Tdown Tshort
Tlong
Tequal Tspath
Figure 4: Event taxonomy.
they may diﬀer in some other BGP attribute such as
MED or COMMUNITY value. Tspath events typically
reﬂect the internal BGP dynamics inside the monitor’s
AS.
2. Path Disturbance (Tpdist): A routing event is classiﬁed
as Tpdist if its pstart = pend, and at least one update in
the event carries a diﬀerent AS path. In other words,
the AS path is the same before and after the event,
with some transient change(s) during the event. Tpdist
events are likely resulted from multiple root causes,
such as a transient failure which is followed quickly by
a recovery, hence the name of the event type. When
multiple root causes occur closely in time, the updates
they produce tend to follow each other very closely,
and no clustering timeout value would be able to ac-
curately separate them out by the root causes. In our
study we identify these Tpdist events but do not include
them in the convergence analysis.
3. Path Change: A routing event is classiﬁed as a path
change if its pstart (cid:5)= pend. In other words, the paths
before and after the event are diﬀerent. Path change
events are further classiﬁed into ﬁve categories, based
on whether the destination becomes available or un-
available, or changed to a more preferred or less pre-
ferred path, at the end of the event. Let pref (p) rep-
resent a router’s preference of path p, with a higher
value representing a higher preference.
• Tup: A routing event is classiﬁed as a Tup if its
pstart = ε. A previously unreachable destination
becomes reachable through path pend by the end
of the event.
• Tdown: A routing event is classiﬁed as Tdown if
its pend = ε. That is, a previously reachable des-
tination becomes unreachable by the end of the
event.
• Tshort: A routing event is classiﬁed as Tshort if its
pstart (cid:5)= ε, pend (cid:5)= ε and pref (pend) > pref (pstart),
indicating a reachable destination has changed
the path to a more preferred one by the end of
the event.
• Tlong: A routing event is classiﬁed as a Tlong event
(cid:5)= ε, pend (cid:5)= ε and pref (pend) <
if its pstart
pref (pstart),
indicating a reachable destination
has changed the path to a less preferred one by
the end of the event.
• Tequal: A routing event is classiﬁed as Tequal if its
pstart (cid:5)= ε, pend (cid:5)= ε and pref (pend) = pref (pstart).
That is, a reachable destination has changed the
path by the end of the event, but the starting and
ending paths have the same preference.
A big challenge in event classiﬁcation is how to diﬀeren-
tiate between Tlong and Tshort events, a task that requires
judging the relative preference between two given paths. In-
dividual routers use locally conﬁgured routing policies to
choose the most preferred path among available ones. Be-
cause we do not have precise knowledge of the routing poli-
cies, we must derive eﬀective heuristics to infer a routers’
path preference. It is possible that our heuristics label two
paths with equal preference, in which case the event will be
classiﬁed as Tequal. However, a good path ranking heuristic
should minimize such ambiguity.
2.4 Comparing AS Paths
If a routing event has non-empty pstart and pend, then
the relative preference between pstart and pend determines
whether the event is a Tlong or Tshort. This would be an easy
task for controlled experiments using beacon preﬁxes, since
one simply create such events by manipulating AS paths.
This was done in the previous studies such as [10], which
used AS paths with length up to 30 AS hops to simulate
Tlong events.
However in general there has been no good way to infer
routers’ preferences among multiple available AS paths to
the same destination. Given a set of available paths, a BGP
router chooses the most preferred one through a decision
process. During this process, the router usually considers
several factors in the following order: local preference (which
usually reﬂects the local routing policy conﬁguration), AS
path length, the MED attribute value, IGP cost, and tie-
breaking rules. Some of the previous eﬀorts in estimating
path preference tried to emulate a BGP router’s decision
process to various degrees. For example, [10, 12, 7] used
path length only. Because BGP is not a shortest-path rout-
ing protocol, however, it is known that the most preferred
BGP paths are not always the shortest paths. In addition,
there often exist multiple shortest paths with equal AS hop
lengths. There are also a number of other eﬀorts in infer-
ring AS relationship and routing policies. However as we will
show later in this section, none of the existing approaches
signiﬁcantly improves the inference accuracy.
To be able to infer path preference with a high accuracy
for our event classiﬁcation, we took a diﬀerent approach
from all the previous studies.
Instead of emulating the
router’s decision process, we propose to look at the end re-
sult of the router’s decision: the usage time of each path.
The usage time is deﬁned as the cumulative duration of time
that a path remains in the router’s routing table. Assum-
ing that the Internet routing is relatively stable most of the
time and failures are recovered promptly, then most pre-
ferred paths should be used most and thus remain in the
routing table for the longest time. Given our study period
is only one month, during this time period it is unlikely that
signiﬁcant changes happened to routing policies and/or ISP
peering connections in the Internet. Thus we conjecture
that relative preferences of routing paths remained stable
for most, if not all, the destinations during our study pe-
riod. Figure 5 shows the path usage time distribution for
a monitor router with IP address 12.0.1.63. We counted
the total number of distinct AS paths that appeared in this
router’s routing table during the month, which is slightly
 1e+07
 1e+06
)
s
(
 100000
i
e
m
T
e
g
a
s
U
h
t
a
P
 10000
 1000
 100
 10
 1
 0
 20000  40000  60000  80000  100000  120000
Path ID
Figure 5: Path usage time for router 12.0.1.63.
over 120,000. Note that one AS path may be used to reach
one or multiple destination preﬁxes, and the usage time for
a path is accounted as long as there is at least one preﬁx
using that path. About 20% of the paths (or 25,000) stay
in the table for the entire measurement period, and about
90,000 paths that appeared in the routing table for only a
small fraction of the period, ranging from a few days to some
small number of seconds.
We compare this new Usage Time based approach with
three other existing methods for inferring path preference:
Length, Policy, and Policy+Length. Usage Time uses the
usage time to rank paths. Length infers path preference
according the AS path length. Policy is derives path pref-
erence based on inferred inter-AS relationships. We used
the algorithm developed in [8] to classify the relationships
between ASes into customer, provider, peer, and sibling. A
path that goes through a customer is preferred over a path
that goes through a peer, which is preferred over a path that
goes through a provider 3 Policy+Length infers path pref-
erence by using the policies ﬁrst, and then using AS length
for those paths that have the same AS relationship.
One challenge in conducting this comparison is how to
verify the path ranking results without knowing the router’s
routing policy conﬁgurations. We tackle this problem by
leveraging our understanding about Tdown and Tup events.
During Tdown events, routers explore multiple paths in the
order of decreasing preference; during Tup events, routers
explore paths in the order of increasing preference. Since
we can identify Tdown and Tup events fairly accurately, we
can use the information learned from these events to verify
the results from diﬀerent path ranking methods.
In an ideal scenario where paths explored during a Tdown
(or Tup) event follow a monotonically decreasing (or increas-
ing) preference order, we can take samples of every con-
secutive pair of routing updates and rank order the paths
they carried. However due to the diﬀerence in update tim-
ing and propagation delays along diﬀerent paths, the mono-
tonicity does not hold true all the time. For example, we
observed path withdrawals appearing in the middle of up-
3We ignore those cases in which we could not establish the
policy relation between two ASes. Such cases happened in
less than 1% of the total paths.
p1
p2
p3
p4
p5
p6
W
Tup
Time
Tdown
Figure 6: Validation of path preference metric.
date sequences during Tdown events. Therefore, instead of
comparing the AS paths carried in adjacent updates during
a routing event, we compare the paths occurred during an
event with the stable path used either before or after the
event. Figure 6 shows our procedure in detail. All the up-
dates in the ﬁgure are for the same preﬁx P . Before the Tup
event occurs, the router does not have any route to reach P .
The ﬁrst four updates are clustered into a Tup event that
stabilizes with path p4. After p4 is in use for some period of
time, the preﬁx P becomes unreachable. During the Tdown
event, paths p5 and p6 are tried before the ﬁnal withdrawal
update. From this example, we can extract the following
pairs of path preference: pref (p1) < pref (p4), pref (p2) <
pref (p4), pref (p3) < pref (p4), pref (p5) < pref (p4), and
pref (p6) < pref (p4).
After extracting path preference pairs from Tdown and Tup
events, we apply the four path ranking methods in compar-
ison to the same set of routing updates and see whether
they produce the same path ranking results as we derived
from Tdown and Tup events. We keep three counters Ccorrect,
Cequal and Cwrong for each method. For instance, in the ex-
ample of Figure 6, if a method results in p1 and p2 being
worse than p4, and p3 being equal to p4, then for the Tup
event we have Ccorrect = 2 , Cequal = 1 and Cwrong = 0.
Likewise, for the Tdown event, if a method results in p5
being better than p4 and p6 being equal to p4, then we
have Ccorrect = 0, Cequal = 1 and Cwrong = 1. To quan-
tify the accuracy of diﬀerent inference methods, we deﬁne
Pcorrect =
. We use Pcorrect as a
measure of accuracy in our comparison.
Ccorrect+Cequal +Cwrong
Ccorrect
To compare the four diﬀerent path ranking methods, we
ﬁrst applied them to our beacon data set which contains
updates generated by Tup and Tdown events, and computed
the values of Ccorrect, Cequal and Cwrong for each of the
four methods. Figure 7 shows the result. As one can see
from the ﬁgure, Length works very well in ranking paths
explored during Tdown events, giving 93% correct cases and
5% equal cases. However, it performs much worse in ranking
the paths explored during Tup events, producing 40% correct
cases and 40% wrong cases. During Tdown events, many
“invalid” paths are explored and they are very likely to be
longer than the stable path. However during Tup events,
only “valid” paths are explored and their preferences are
not necessarily based on their path lengths.
Policy performs roughly equally for ranking paths during
Tdown and Tup events. It does not make many wrong choices,
but produces a large number of equal cases (around 70% of
the total). This demonstrates that the inferred AS relation-
ship and routing policies provide inadequate information for
path ranking. They do not take into account many details,
)
%
(
y
c
n
e
u
q
e
r
F
)
%
(
y
c
n
e
u
q
e
r
F
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0