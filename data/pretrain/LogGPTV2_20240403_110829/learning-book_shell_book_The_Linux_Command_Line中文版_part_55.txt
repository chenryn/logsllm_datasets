[ne@linuxbox -]$ for i in (A. .D); doecho $i; done
A
C
D
或者路径名展开：
[ne@linuxbox -]$ for i in distros*,txt; do echo $i; done
distros-by-date.txt
distros-dates.txt
distros-ktey-nanes.txt
distros-key-vernuns.txt
distros-nanes.txt
distros.txt
distros-vernums.txt
distros-versions.txt
或者命令替换：
#!/bin/bash
# longest-word : find longest string in a file
vhile [[ -n $1 ]]; do
if [[ -r $1 ]]; then
=pxon"xeu
nax_1en=0
for i in $(strings $1) ; do
len=$(echo $i I vc -c)
if (( 1en > max_1len ); then
max_len=$1en
454
---
## Page 456
max_vord=$i
fi
done
echo "$1:*$max_word*($nax_1en characters)“
fi
shift
done
在这个示例中，我们要在一个文件中查找最长的字符串。当在命令行中给出一个或多个文
件名的时候，该程序会使用strings程序（其包含在GNUbinutils包中），为每一个文件产生一
是否为目前为止找到的最长的一个。当循环结束的时候，显示出最长的单词。
如果省略掉for命令的可选项words部分，for命令会默认处理位置参数。我们将修改
longest-word脚本，来使用这种方式：
#!/bin/bash
# longest-vord2 : find longest string in a file
for 1; do
if [[ -r $i ]]; then
nax_vord=
nax_len=0
for j in $(strings $i) ; do
len=$(echo $j Ivc -c)
if (( len > max_len )); then
max_len=$1en
max_vord=$]
fi
done
echo "$i: “$max_vord’ ($nax_len characters)"
fi
done
正如我们所看到的，我们已经更改了最外围的循环，用for循环来代替while循环。通过省
略for命令的words列表，用位置参数替而代之。在循环体内，之前的变量i已经改为变量j。
同时shift命令也被淘汰掉了。
455
---
## Page 457
为什么是？
你可能已经注意到上面所列举的for循环的实例都选择i作为变量。为什么呢？
实际上没有具体原因，除了传统习惯。for循环使用的变量可以是任意有效的变量，
但是i是最常用的一个，其次是j和k。
这一传统的基础源于Fortran编程语言·在Fortran语言中，以字母I、J、K
L和M开头的未声明变量的类型自动设为整形，而以其它字母开头的变量则为实数
类型（带有小数的数字）。这种行为导致程序员使用变量I、J和K作为循环变量，
因为当需要一个临时变量（正如循环变量）的时候，使用它们工作量比较少。这也
引出了如下基于Fortran的俏皮话：
“神是实数，除非是声明的整数。”
34.2for：C语言格式
最新版本的bash已经添加了第二种格式的for命令语法，该语法相似于C语言中的for语法
格式。其它许多编程语言也支持这种格式：
for (( expression1; expression2; expression3 )); do
done
这里的expression1丶expression2和expression3都是算术表达式，commands 是每次循环
送代时要执行的命令。在行为方面，这相当于以下构造形式：
((expression1))
vhile (( expression2 )); do
commands
((expression3 ))
dote
expressionl用来初始化循环条件，expression2用来决定循环结束的时间。还有在每次循环
送代的末尾会执行expression3。
456
---
## Page 458
这里是一个典型应用：
#!/bin/bash
# sinple_counter : deno of C style for comnand
for (( i=0; iHome Space Utilization (A11 Users)
$(du -sh /hone/+)
_EOF
else
457
---
## Page 459
cat Hone Space Utilization ($USER)
$(du =sh $HOME)
_E0F
fi
return
下一步，我们将重写它，以便提供每个用户家目录的更详尽信息，并且包含用户家目录中文
件和目录的总个数：
report_home_space () {
1ocal format=*%8s?10s710s^n"
local i dir_list total_files total_dirs total_size user_nane
if [[ $(id -u) -eq 0 ]]; then
dir_1ist=/hose/
user_nane=*All Users*
else
dir_1ist=$H0ME
user_nane=SUSER
fi
echo "Home Space Utilization ($user_nane)"
for i in $dir_list; do
total_files=$(find $i -type f I wc -1)
(T- oa I p ads- Ts putg)s=sxtpteo
（T - n 1 $ qs- mp)s=aztse4o2
echo "$i*
echo “*
printf“$format" Stotal_dirs $total_files $total_size
echo ""
done
return
J
这次重写应用了目前为止我们学过的许多知识。我们仍然测试超级用户（superuser），但是
458
---
## Page 460
我们在if语句块内设置了一些随后会在for循环中用到的变量，来取代在if语句块内执行完备
的动作集合。我们给函数添加了几个本地变量，并且使用printf来格式化输出。
34.4拓展阅读
·《高级Bash脚本指南》有一章关于循环的内容，其中列举了各种各样的for循环实例：
http:/ /tldp.org/LDP/abs/html/loopsl.html
·《Bash参考手册》描远了循环复合命令，包括了for循环：
http://www.gnu.org/software/bash/manual/bashref.html#Looping-Constructs
459
---
## Page 461
35
字符串和数字
所有的计算机程序都是用来和数据打交道的。在过去的章节中，我们专注于处理文件级别的数
据。然而，许多编程问题需要使用更小的数据单位来解决，比方说字符串和数字。
在这一章中，我们将查看几个用来操作字符串和数字的shell功能。shell提供了各种执行字
符串操作的参数展开功能。除了算术展开（在第七章中接触过），还有一个常见的命令行程序叫
做bc，能执行更高级别的数学运算。
35.1参数展开
尽管参数展开在第七章中出现过，但我们并没有详尽地介绍它，因为大多数的参数展开会用在
脚本中，而不是命令行中。我们已经使用了一些形式的参数展开；例如，shell变量。shell提供
了史多方式。
35.1.1基本参数
最简单的参数展开形式反映在平常使用的变量上。
例如：
Sa
当Sa展开后，会变成变量a所包含的值。简单参数也可能用花括号引起来：
S{a)
虽然这对展开没有影响，但若该变量a与其它的文本相邻，可能会把shell搞糊涂了。在这
个例子中，我们试图创建一个文件名。通过把字符串“file”附加到变量a的值的后面。
[ne@linuxbox -]$ a=*foo"
[ne@linuxbox -]$ echo *$a_file"
460
---
## Page 462
如果我们执行这个序列，没有任何输出结果，因为shell会试着展开一个称为a_file的变量，
而不是a。通过添加花括号可以解决这个问题
foo_file
我们已经知道通过把数字包裹在花括号中，可以访问大于9的位置参数。例如，访问第十
一个位置参数，我们可以这样做：
{11}s
35.1.2管理空变量的展开
几种用来处理不存在和空变量的参数展开形式。这些展开形式对于解决丢失的位置参数和给参
数指定默认值的情况很方便。
S{parumeter-word}
若parameter没有设置（例如，不存在）或者为空，展开结果是word 的值。若parameter
不为空，则展开结果是parameter的值。
[ne@linuxbox -]$ foo=
[nellinuxbox -]$ echo $(foo:-*substitute value if unset"}
if unset
substitute value
[ne@linuxbox -]$ echo $foo
[nedlinuxbox -]$ foo=bar
[nellinuxbox -]$ echo $(foo:-*substitute value if unset"}
bar
[nel@linuxbox -]$ echo $foo
bar
S{parumeter:=word}
若parameter没有设置或为空，展开结果是word的值。另外，word的值会赋值给
parameter。若parameter 不为空，展开结果是parameter 的值。
461
---
## Page 463
[ne@linuxbox -]$ foo=
[neglinuxbox -]$ echo $(foo:=*default value if unset*}
default value if unset
[ne@linuxbox -]$ echo $foo
default value if unset
[ne@linuxbox -]$ foo=bar
[neglinuxbox -]$ echo $(foo:=*default value if unset*}
bar
[ne@linuxbox -]$ echo $foo
bar
注意：位置参数或其它的特殊参数不能以这种方式赋值。
S{parumeter:?word)
若parameter没有设置或为空，这种展开导致脚本带有错误退出，并且word的内容会发送
到标准错误。若parameter不为空，展开结果是parameter的值。
[ne@linuxbox -]$ foo=
[ne@linuxbox -]$ echo $(foo:?parameter is enpty"}
bash: foo: paraneter is enpty
[nedlinuxbox -]$ echo $?
1
[nedlinuxbox -]$ foo=bar
[neglinuxbox -]$ echo ${foo:?°paraneter is enpty"}
bar
[nedlinuxbox -]$ echo $?
S{parumeter:+uord]
若parameter没有设置或为空，展开结果为空。若parameter不为空，展开结果是word的
值会替换掉parameter的值；然而，parameter的值不会改变。
462
---
## Page 464
[ne@linuxbox -]$ foo=
[nellinuxbox -]$ echo $(foo:+*substitute value if set*}
[ne@linuxbox -]$ foo=bar
[ne@linuxbox -]$ echo ${foo:+*substitute value if set°}
substitute value if set
35.2返回变量名的参数展开
shell具有返回变量名的能力。这会用在一些相当独特的情况下。
S{!prefiz*)
{ozfadj}s
这种展开会返回以prefix开头的已有变量名。根据bash文档，这两种展开形式的执行结果
相同·这里，我们列出了所有以BASH开头的环境变量名：
[ne@linuxbox -]$ echo ${!BASH*}
BASH BASH_ARGC BASH_ARGV BASH_COMMAND BASH_COMPLETION
BASH_VERSINFO BASH_VERSION
35.2.1字符串展开
有大量的展开形式可用于操作字符串。其中许多展开形式尤其适用于路径名的展开。
S{#parameter}
展开成由parameter所包含的字符串的长度。通常，parameter是一个字符串：然而，如果
parameter是@或者是*的话，则展开结果是位置参数的个数。
[ne@linuxbox -]$ foo=*This string is long.*
'This string is long.* is 20 characters long.
S{parumeter:offset}
463