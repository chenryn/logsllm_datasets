By virtue of being at the top of the routing hierarchy, WAN routers
carry large volumes of aggregate traffic, often up to terabits per
second. However, low-cost commodity switching chips offer per-
port speeds of 40 Gbps to 100 Gbps. To meet capacity requirements
using these chips, WAN routers must have a large number of ports.
In Google‚Äôs B4, routers have 128 or 512 ports. Moreover, the physical
topology of WANs is sparse. WAN routers interconnect data centers
in large metropolitan areas; since long-distance cables are expensive,
each WAN router usually connects to a small number of other
WAN routers. The sample topology in [25] shows a WAN router
connected to 4-5 other WAN routers.
Thus, multiple ports on a WAN router connect to corresponding
ports on an adjacent WAN router; this collection of physical links is
trunk. All the links in a trunk are of the same capacity (e.g., 40 Gbps)
because all L1 and L2 switches use the same type of switching chip
(e.g., a 16x40 Gbps chip). A router receives traffic on one trunk and
may forward this traffic to one or more other trunks. When doing
so, it evenly splits outbound traffic across all links in the trunk
between the two routers. This uniform splitting enables better uti-
lization of trunk links, and allows a traffic engineering algorithm
to abstract the WAN router as a single node with a fixed capac-
ity [25]. All our techniques in this and subsequent sections model
this crucial constraint. More important, this even split maximizes
early forwarding opportunities.
426
Min-Upflow Trunk WiringEffectiveCapacityCompactForwarding TableTrunk SetWiringWCMPWeightFailure PatternEffectiveCapacityVerificationSIGCOMM ‚Äô19, August 19‚Äì23, 2019, Beijing, China
Sucha Supittayapornpong, Barath Raghavan, and Ramesh Govindan
Figure 5: Upflow depends both on trunk wiring and traffic ma-
trix.
Operators configure trunks when commissioning a router, and
occasionally reconfigure them afterwards. However, trunk reconfig-
uration happens at timescales of weeks or months, since it requires
manual labor to rewire the links on a trunk.
2.2 Goal and Challenges
Figure 3 shows how carefully wiring the trunks across the external
ports of a WAN router can improve resilience by permitting early
forwarding, which reduces upflow. Upflow (defined more formally
below) is the aggregate traffic sent from L1 switches to L2 switches.
In this section, we ask: How can we design scalable methods to
compute the trunk wiring pattern that minimizes upflow?
This question is challenging because upflow depends not just
on the trunk wiring but also on the trunk-to-trunk traffic matrix
(the (i, j)-th entry in a traffic matrix represents the total traffic from
trunk i to trunk j). Figure 5 shows an example that illustrates this
(we omit the detailed upflow calculations for brevity). The topology
on the left and in the middle have different wiring but the same
traffic matrices, and have different upflow. The middle and the right
topologies have the same trunk wiring but different traffic matrices,
and also have different upflow. Unfortunately, traffic matrices at a
WAN router can change frequently based on changes in applica-
tion demand: numbers from [25] suggest that traffic engineering
(TE) computations run once every 2.4 mins on average. Each such
computation can potentially change the traffic matrix at the router.
At these timescales, it is infeasible to re-wire trunks in response to
each such change because trunk wiring is a manual operation.
The rest of this section describes an optimization formulation,
and associated scaling methods to compute a minimal-upflow trunk
wiring that addresses this challenge by computing a wiring that
minimizes the maximum upflow across all possible traffic matrices.
2.3 Formalizing Upflow
to our algorithm is a set
Input and Output. The input
{M1, . . . , MK} of K trunks. We call this set a trunk set, where
th trunk has Mk links, for k ‚àà K and K = {1, . . . , K} is an
the k
index set. The output of the algorithm is a matching (association)
between external ports of the WAN router and links in each trunk
that minimizes upflow (the minimal-upflow trunk wiring). Recall
that WAN router external ports are all connected to L1 switches.
Traffic Matrix. A traffic matrix T = [tij]K√óK is a K-by-K matrix
containing traffic rate tij going from a trunk i to a trunk j for
every i, j ‚àà K. We normalize the traffic rate tij by the link capacity
without loss of generality, since every link in a trunk has the same
capacity. We assume tii = 0 for all i ‚àà K, i.e., that no traffic received
on a trunk exits on the same trunk. Finally, let T be the set of all
possible traffic matrices for a given trunk set {Mk}.
Defining Upflow. We call the normalized aggregate rate of traffic
sent from L1 switches to L2 switches the upflow. To formalize
upflow, let L1 and L2 be the sets of L1 switches and L2 switches
respectively. In a Clos-based WAN router, the number of L1 switches
is twice as many as L2 switches. Let P denote the number of external
ports in each L1 switch. As described above, the upflow at each L1
switch depends on the traffic matrix and how trunks connect to
the WAN router. Specifically, let wsk be the number of links from
trunk k wired to switch s for all s ‚àà L1 and all k ‚àà K, and let w
be a vector of these wsk‚Äôs. We call w a trunk configuration. Given a
traffic matrix T = [tij] ‚àà T , the upflow rate (or, simply, upflow) for
traffic from trunk i to j at switch s is
(cid:20) wsitij
(cid:21)
,
+
ij
Mi
s (w,T) =
‚àí ws jtij
Mj
for all s ‚àà L1,(i, j) ‚àà K2
(1)
u
where [a]+ = max(a, 0) is a positive projection. This formulation re-
lies on the observation that the total traffic on a trunk is evenly split
across its constituent links. Then, the first term on the right hand
side measures the fraction of incoming traffic on trunk i destined to
trunk j that arrives at switch s. The second term measures, at switch
s, the fraction of trunk j‚Äôs outgoing capacity for traffic from trunk
i. The two terms together determine how much of the incoming
traffic on trunk i cannot be ‚Äúearly forwarded‚Äù (i.e., how much must
traverse L2 switches). It follows then that the total upflow to L2
switches for a given trunk configuration w and a traffic matrix T is:
(2)
U(w,T) = 


s (w,T).
ij
u
s‚ààL1
i‚ààK
j‚ààK
Minimizing Upflow. Our approach tries to minimize total upflow
because, in doing so, it reduces the internal capacity required in the
WAN router, thereby enabling the router to mask many failures of
internal links or L2 switches. Because upflow depends on the traffic
matrix, we attempt to find that trunk wiring configuration w that
minimizes the maximum upflow across all possible traffic matrices:
(3)
(cid:26)
wsk ‚àà Z|L1|√óK
W is a feasible set of wiring constraints, defined as:
W =
,
where Z+ a set of non-negative integers. The first constraint en-
sures that the wiring at a switch does not exceed the number of
external ports P, and the second ensures that each link in every
trunk connects to a port.
k ‚ààK wsk ‚â§ P
s‚ààL1 wsk = Mk
for all s ‚àà L1
for all k ‚àà K
T ‚ààT U(w,T),
max
min
w ‚ààW


(cid:27)
+
:
2.4 Scaling
Extreme Traffic Matrices. Unfortunately, this formulation is in-
tractable because there can be infinitely many traffic matrices in T .
We observe that there is a simpler solution: it suffices to examine a
smaller set of extreme traffic matrices, denoted by E, rather than
the full set of all possible traffic matrices T . To understand why,
consider that when a WAN router is non-blocking, traffic rates,
going in and out of the router, are only limited by trunk capacity
(the aggregate rate of trunk‚Äôs links). Since each link has the same
427
ABCABCABC2 2 Cü†ñACü†ñAUpflow = 2 Upflow = 1 2 2 Cü†ñACü†ñA2 2 Bü†ñCBü†ñCUpflow = 2 2 Aü†ñC2 Aü†ñCTowards Highly Available Clos-Based WAN Routers
SIGCOMM ‚Äô19, August 19‚Äì23, 2019, Beijing, China
T ‚àà RK√óK
+
:


tii
T =
 ,
Figure 6: Traffic set and extreme traffic set.
capacity, we can represent each link as having unit capacity, so the
number of links in each trunk constrains the space of all possible
traffic matrices T :
j‚ààK tij ‚â§ Mi
‚â§ Mj
i‚ààK tij
= 0
for all i ‚àà K
for all j ‚àà K
for all i ‚àà K
(4)
where R+ is a set of non-negative real numbers. The set T bounds
all feasible traffic matrices, as shown in Figure 6.
This set is a convex polytope, because constraints in Equation 4
are affine functions [6, 9]. For example, for a WAN router with a
trunk set (2, 2, 4), 6 affine constraints define T . One of them is
t12 + t32 ‚â§ 2 and implies the total (normalized) rate to the second
trunk is at most 2, even though the third trunk can send at most 4.
Using Extreme Traffic Matrices. The vertices of this convex
polytope represent the extreme traffic matrix set E (Figure 6). In
¬ßA.1, we prove that it suffices to use E instead of T in our opti-
mization formulation of Equation 3, as follows:
min
w ‚ààW
T ‚ààE U(w,T).
max
(5)
We can transform this formulation into an MILP problem, and
use an off-the-shelf MILP solver for reasonable problem sizes, e.g.,
128-port router with 4 trunks (¬ß5). Larger WAN routers, or those
with more trunks, need other scaling techniques, described next.
Symmetric Trunk Sets. For some trunk sets, we can obtain the
minimal-upflow trunk wiring without using an MILP solver. Con-
sider a WAN router with 128 ports and 16 L1 switches, and four
trunks with (16, 32, 32, 48) links respectively. Now, suppose we wire
each L1 switch with one link from the first trunk, 2 each from the
second and third trunk, and 3 from the fourth trunk. It turns out
that this trunk configuration achieves zero upflow across all traffic
matrices. More generally, we say that a trunk set is symmetric if
the number of links in each trunk is a multiple of the number of
L1 switches. Specifically, a symmetric trunk set has Mk = ak |L1|
when ak is some positive integer for every k ‚àà K. In ¬ßA.2, we
prove that the upflow for any symmetric trunk set is zero across
any traffic matrix, so in these cases, computing upflow does not
need Equation 5.
Approximating Minimal-Upflow. As the size of a WAN router
increases, the number of L1 switches |L1| increases. Also, a 128-
port WAN router could serve more than 5 trunks. These two factors
represent scaling challenges since the number of auxiliary con-
straints in Equation 5 increases as O
proof), which can cause solvers to exceed memory limits.
(cid:16)|L1| 2K 2(cid:17) (see ¬ßA.3 for a
We have developed an approximation with better scaling behav-
ior based on two ideas. The first is to approximate all the extreme
traffic matrices by ÀÜT , a matrix whose entries are element-wise max-
ima across all the extreme traffic matrices. The second applies our
observation that the minimal-upflow wiring usually tries to evenly
distribute links of a trunk across all L1 switches: we only explore
ÀÜW such that the number of links from a trunk
trunk configurations
assigned to two different L1 switches differ by no more than 1.
¬ßA.4 lists this formulation in which the number of auxiliary
constraints scales as O(|L1| K
2). ¬ß5 shows that this formulation
yields a wiring that match the optimal wiring obtained from the
formulation in Equation 5 for most of the trunk sets we have been
able to evaluate.
3 EFFECTIVE CAPACITY UNDER FAILURE
In this section, we discuss how to define, and compute, the effective
capacity of a WAN router under failures.
3.1 Background
Minimizing upflow can make a WAN router resilient to failure, but
it is important to quantify this resilience. To do so, we compute the
effective capacity of the WAN router under (concurrent) failure of
components. This effective capacity is an input to traffic engineering
(TE) algorithms, such as those used by Google‚Äôs TE Server [25],
which use the effective capacity to route traffic demands based on
application needs (e.g., latency, traffic demand). It is also an input
to our next step, computing compact forwarding tables (¬ß4).
At run time, when a set of failures occurs in a WAN router, it
may be possible to compute an estimate of the effective capacity,
required for TE calculations. However, it is desirable in our setting
to pre-compute this effective capacity for as many failure patterns
as possible, because while computing the effective capacity of a
given failure pattern is inexpensive (as we show below), the next
step of our approach, computing compact forwarding tables (¬ß4)
requires an MILP formulation that can delay convergence of TE
algorithms if run online. To ensure fast TE convergence [19], we
pre-compute effective capacity and routing tables (in ¬ß4).
3.2 Goal and Challenges
Our goal in this section is to determine, for any given trunk con-
figuration, the effective capacity when multiple internal links, or
L1 or L2 switches fail concurrently. This problem is challenging
because, if we want to pre-compute this effective capacity, we have
to explore all possible concurrent failure scenarios, which increase
exponentially. The second challenge is to define effective capacity
precisely. A WAN router, by design, is non-blocking: it can sup-
port any possible traffic matrix. When failures occur, it may not be
possible to support some traffic matrices.
We describe, for ease of exposition, separate algorithms for de-
termining effective capacity (a) under L2 and internal link failures
and (b) under L1 failures. This is because the characteristics of these
failures are different: an L1 failure disables some ingress and egress
trunk links, but a link failure or an L2 failure does not. We defer
the discussion of L1 failures to ¬ßA.7. In ¬ßA.8, we describe a com-
bined algorithm that estimates effective capacity under arbitrary
combinations of internal link and L1/L2 switch failures.
At a high-level, to pre-compute the effective capacity under L2
and internal link failures, our approach enumerates all possible
failure scenarios, and for each computes the effective capacity (and
routing tables (¬ß4)).
428
SIGCOMM ‚Äô19, August 19‚Äì23, 2019, Beijing, China
Sucha Supittayapornpong, Barath Raghavan, and Ramesh Govindan
Figure 7: Link-failure model and canonicalization.
3.3 Modeling Link and L1 Switch Failures
When concurrent internal links fail, we model this as a graph G in
which all the L1 and L2 switches are nodes and only the failed links
are edges in the graph. Figure 7 shows an example with a single
link failure. This graph represents a failure pattern. This approach
can also model L2 switch failures; when an L2 switch fails, we mark
all incident internal links in that switch to have failed. The total
number of possible patterns is 2|L1|√ó|L2|.
Graph Canonicalization and Isomorphism. To address this ex-
ponential complexity, we leverage the symmetry in WAN router
topologies, and use graph canonicalization [29] which reduces a
graph to an isomorphic canonical form. Two graphs are isomorphic