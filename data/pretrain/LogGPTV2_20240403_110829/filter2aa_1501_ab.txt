  have	
  enough	
  fuel,	
  your	
  error	
  channel	
  will	
  report	
  this.	
  See	
  “What	
  the	
  hell	
is	
  going	
  on”	
  below	
  for	
  more	
  information.	
”I	
  want	
  to	
  go	
  that	
  way”	
If	
  you	
  don’t	
  specify	
  a	
  destination	
  manually,	
  you	
  must	
  specify	
  a	
  manual	
  direction.	
This	
  will	
  set	
  your	
  ship	
  on	
  course	
  and	
  no	
  fuel	
  calculations	
  will	
  be	
  made	
  to	
  ensure	
  you	
are	
  able	
  to	
  stop	
  since	
  you	
  don’t	
  have	
  a	
  destination.	
Page	
  8	
  of	
  42	
Keep	
  in	
  mind	
  that	
  that	
  each	
  ship	
  can	
  only	
  move	
  once	
  per	
  game	
  tic.	
  So,	
  if	
  you	
  use	
Move()	
  on	
  a	
  ship,	
  you	
  will	
  not	
  be	
  able	
  to	
  run	
  Move()	
  on	
  that	
  ship	
  again	
  until	
  tic.pl	
  is	
run.	
At	
  the	
  end	
  of	
  each	
  tic,	
  every	
  ship	
  (which	
  has	
  not	
  had	
  the	
  MOVE	
  command	
  run	
manually	
  on	
  it)	
  will	
  progress	
  in	
  the	
  direction	
  specified	
  in	
  the	
  ship’s	
  control	
information.	
  If	
  the	
  ship	
  has	
  reached	
  its	
  destination	
  (if	
  one	
  exists),	
  the	
  ship	
  will	
  try	
  to	
stop	
  (if	
  there’s	
  enough	
  fuel).	
  You	
  can	
  see	
  this	
  information	
  for	
  all	
  your	
  ships	
  with	
SELECT	
  direction,	
  speed,	
  current_fuel	
  from	
  my_ships;	
To	
  update	
  this	
  data	
  for	
  all	
  your	
  ships,	
  you	
  could	
  run:	
UPDATE	
  my_ships	
  SET	
direction=180,	
  speed=20	
  WHERE	
  1=1;	
If	
  you	
  wanted	
  only	
  a	
  single	
  ship,	
  the	
  command:	
UPDATE	
  my_ships	
  SET	
  direction=90,	
  speed=10	
  WHERE	
  name='Shipington'	
If	
  your	
  ships	
  run	
  out	
  of	
  fuel,	
  you	
  can	
  fill	
  them	
  up	
  with	
  the	
  fuel	
  in	
  your	
my_player.fuel_reserve.	
  This	
  command	
  would	
  refuel	
  all	
  your	
  ships	
  at	
  once:	
SELECT	
  REFUEL_SHIP(id),	
  id	
  FROM	
  my_ships;	
Actions	
Outside	
  of	
  moving	
  around,	
  there	
  are	
  three	
  main	
  actions	
  that	
  a	
  ship	
  can	
  perform	
  once	
per	
  tic.	
  These	
  actions	
  must	
  be	
  performed	
  on	
  ships	
  and/or	
  planets	
  that	
  are	
  within	
range	
  of	
  the	
  ship.	
  If	
  a	
  ship	
  is	
  down	
  to	
  0	
  health	
  it	
  will	
  not	
  be	
  able	
  to	
  perform	
  any	
  of	
them	
  until	
  it	
  is	
  repaired.	
  These	
  actions	
  are	
  as	
  follows:	
• Attack(AttackerShip,	
  EnemyShip)	
SELECT	
  Attack(ship_in_range_of,	
  id),	
  name	
  FROM	
  ships_in_range;	
This	
  would	
  cause	
  all	
  of	
  your	
  ships	
  to	
  attempt	
  to	
  attack	
  any	
  ship	
  that	
  is	
  in	
range.	
• Repair(RepairShip,	
  DamagedShip	
  )	
SELECT	
  Repair(10,	
  id)	
  FROM	
  my_ships	
  ORDER	
  BY	
  current_health	
  ASC;	
This	
  would	
  use	
  ship	
  with	
  ID	
  10	
  to	
  repair	
  the	
  most	
  damaged	
  ship	
  you	
  own.	
• Mine(MinerShip,	
  Planet)	
SELECT	
  mine(9,	
  1);	
Page	
  9	
  of	
  42	
In	
  this	
  example,	
  my	
  ship	
  with	
  ID	
  9	
  would	
  try	
  to	
  mine	
  planet	
  1.	
  This	
  adds	
  the	
ship	
  to	
  the	
  planet_miners	
  table	
  and	
  at	
  the	
  end	
  of	
  a	
  tic,	
  the	
  system	
  will	
  decide	
who	
  in	
  the	
  table	
  is	
  awarded	
  fuel	
  from	
  the	
  planet.	
What	
  the	
  hell	
  is	
  going	
  on	
As	
  you	
  play	
  the	
  game,	
  you	
  may	
  want	
  to	
  keep	
  track	
  of	
  what	
  is	
  actually	
  happening	
  (or	
you	
  may	
  not…).	
  To	
  do	
  so,	
  you	
  can	
  watch	
  the	
  my_events	
  view.	
  To	
  see	
  it	
  ordered	
  with	
the	
  latest	
  events	
  at	
  the	
  top	
  you	
  could	
  do	
  the	
  following:	
SELECT	
  *	
  FROM	
  my_events	
  ORDER	
  BY	
  toc	
  DESC;	
If	
  you	
  would	
  like	
  a	
  more	
  readable	
  version	
  of	
  events,	
  use	
  the	
  read_event()	
  function	
within	
  the	
  select	
  statement	
  like	
  so:	
SELECT	
  READ_EVENT(event_id)	
  FROM	
  my_events	
  ORDER	
  BY	
  toc	
  DESC;	
There	
  will	
  also	
  be	
  times	
  where	
  things	
  just	
  don’t	
  seem	
  to	
  be	
  working	
  right.	
  Originally,	
this	
  game	
  had	
  an	
  error	
  log	
  table,	
  but	
  it	
  just	
  grew	
  out	
  of	
  control	
  constantly	
  and	
  was	
pretty	
  much	
  useless.	
  So,	
  the	
  solution	
  to	
  this	
  was	
  to	
  utilize	
  the	
  NOTIFY	
  and	
  LISTEN	
commands	
  to	
  create	
  an	
  error	
  channel	
  that	
  you	
  can	
  listen	
  on.	
Check	
  your	
  my_players	
  view	
  to	
  find	
  your	
  error	
  channel	
  and	
  if	
  your	
  PostgreSQL	
client	
  allows	
  it,	
  you	
  can	
  use:	
LISTEN	
  ;	
With	
  every	
  next	
  query	
  you	
  make	
  (until	
  UNLISTEN),	
  the	
  response	
  will	
  include	
  any	
new	
  messages	
  to	
  your	
  channel.	
If	
  your	
  client	
  doesn’t	
  support	
  it	
  or	
  it	
  just	
  doesn’t	
  seem	
  that	
  convenient,	
  fear	
  not!	
  If	
you	
  can	
  get	
  python	
  working	
  on	
  your	
  system	
  then	
  you	
  use	
  the	
  Schemaverse	
  SOS	
client,	
  SchemaverseOutputStream.py,	
  from	
  our	
  GitHub	
  repository	
(https://github.com/Abstrct/Schemaverse/tree/master/clients/SchemaverseOutp
utStream).	
Buying	
  Upgrades	
To	
  upgrade	
  your	
  ship	
  use	
  the	
  function:	
  UPGRADE	
  (Ship	
  ID,	
  Code,	
  Quantity)	
The	
  following	
  is	
  the	
  price	
  list	
  at	
  the	
  time	
  of	
  publishing:	
code 
cost 
description 
MAX_HEALTH 
50 
Increases a ships MAX_HEALTH by one 
MAX_FUEL 
1 
Increases a ships MAX_FUEL by one 
MAX_SPEED 
1 
Increases a ships MAX_SPEED by one 
RANGE 
25 
Increases a ships RANGE by one 
ATTACK 
25 
Increases a ships ATTACK by one 
DEFENSE 
25 
Increases a ships DEFENSE by one 
ENGINEERING 
25 
Increases a ships ENGINEERING by one 
PROSPECTING 
25 
Increases a ships PROSPECTING by one 
Page	
  10	
  of	
  42	
There	
  are	
  certain	
  limits	
  regarding	
  how	
  much	
  you	
  can	
  upgrade	
  your	
  ships.	
  Those	
values	
  can	
  all	
  be	
  found	
  in	
  the	
  public_variable	
  view.	
  At	
  the	
  time	
  of	
  publishing,	
  they	
were:	
Ability 
Max Value 
MAX_SHIP_SKILL 
500 
MAX_SHIP_RANGE 
2000 
MAX_SHIP_FUEL 
5000 
MAX_SHIP_SPEED 
2000 
MAX_SHIP_HEALTH 
1000 
The	
  Tic	
  (or	
  flow	
  of	
  game)	
A	
  tic	
  is	
  a	
  unit	
  of	
  time	
  in	
  the	
  Schemaverse.	
  Tics	
  occur	
  approximately	
  every	
  minute,	
but	
  they	
  can	
  vary	
  depending	
  on	
  how	
  long	
  it	
  takes	
  to	
  execute	
  fleet	
  scripts.	
  There	
  is	
  a	
cron	
  job	
  that	
  executes	
  TIC.PL,	
  which	
  drives	
  the	
  universe	
  forward	
  by	
  moving	
  ships,	
awarding	
  fuel	
  for	
  planets	
  that	
  are	
  currently	
  being	
  mined,	
  and	
  executing	
  fleet	
  scripts.	
The	
  order	
  of	
  events	
  in	
  tic.pl	
  is	
  as	
  follows:	
• Every	
  ship	
  moves	
  based	
  on	
  the	
  ships	
  direction,	
  speed	
  and	
  destination	
coordinates	
  currently	
  stored	
  in	
  my_ships	
• All	
  fleets	
  run	
  their	
  fleet_script_#()	
  function	
  if	
  they	
  have	
  a	
  runtime	
  of	
  at	
  least	
  1	
minute	
  and	
  are	
  enabled	
• Mining	
  happens	
  for	
  all	
  ships	
  who	
  ran	
  the	
  mine()	
  command	
  that	
  tic	
• Some	
  planets	
  randomly	
  have	
  their	
  fuel	
  increased	
• Any	
  damage/repair	
  that	
  occurred	
  during	
  the	
  tic	
  is	
  committed	
  to	
  the	
  ship	
table	
• Any	
  ships	
  that	
  have	
  been	
  damaged	
  to	
  zero	
  health	
  for	
  the	
  same	
  amount	
  of	
  tics	
as	
  the	
  EXPLODED	
  variable	
  is	
  set	
  to	
  (currently	
  60	
  tics	
  or	
  approximately	
  1	
hour)	
  are	
  set	
  to	
  destroyed	
• tic_seq	
  is	
  incremented	
Every	
  tic	
  is	
  numbered	
  sequentially	
  for	
  the	
  lifetime	
  of	
  the	
  Schemaverse.	
  As	
mentioned	
  earlier,	
  ships	
  can	
  only	
  perform	
  one	
  action	
  per	
  tic.	
  Every	
  time	
  a	
  ship	
performs	
  an	
  action	
  its	
  LAST_ACTION	
  column	
  is	
  updated.	
  You	
  can	
  see	
  the	
  current	
  tic	
number	
  by	
  executing	
  the	
  following	
  SELECT	
  statement:	
SELECT	
  last_value	
  FROM	
  tic_seq;	
Page	
  11	
  of	
  42	
To	
  execute	
  commands	
  automatically	
  every	
  tic,	
  see	
  Fleets	
  below.	
Fleets	
Fleets	
  are	
  essentially	
  groups	
  of	