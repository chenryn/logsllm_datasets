Pj and S. Ignore any subsequent commit messages.
• Decommit Phase: Upon receiving (decommit,
if the tuple
(sid, Pi, Pj, m) is recorded then send (decommit, sid, Pi, Pj, m) to Pj and to S and halt.
Otherwise ignore the message.
sid, Pi, Pj) from Pi,
• When asked by the adversary, obtain from GgRO the list Qsid of illegitimate queries that
pertain to SID sid, and send Qsid to S.
Figure 2: The Commitment Functionality Ftcom.
Functionality Ftot
Ftot running with an oblivious sender S a receiver R and an adversary S proceeds as follows:
• Upon receiving a message (send, sid, s0, s1, S, R) from S where each s0, s1 ∈ {0, 1}n, record
the tuple (sid,s0, s1) and send (send, sid) to R and S. Ignore any subsequent send messages.
• Upon receiving a message (receive, sid, b) from R, where b ∈ {0, 1} send (sid, sb) to R and
(received, sid) to S and S and halt. (If no (send,·) message was previously sent, do nothing).
• When asked by the adversary, obtain from GgRO the list Qsid of illegitimate queries that
pertain to SID sid, and send Qsid to S.
Figure 3: The Oblivious Transfer Functionality Ftot.
Comparison with the GUC model. Our model is weaker than the GUC model of [CDPW07]
as it does not achieve on-line deniability (we discuss more on this in the next paragraph).
However, our leaking of queries has the same ﬂavor of ACRS. Let us explain. Consider the
transferability attack described earlier where there are parties A,B,C and B is simply forwarding
messaging between A and C. In this real attack the adversary B is not doing anything but relaying
messaging. In the ACRS model of [CDPW07] this attack is simulatable for the following reason. B
is a corrupted party and as such the simulator can ask for B’s secret key, even if in real life B did
not actually tried to obtain its secret key neither to use it. Their model somehow “leaks” the secret
key of the corrupt party, but this leakage does not give any advantage to the adversary in breaking
the security of honest parties.
Our mechanism with illegitimate queries is of the the same ﬂavor. Our functionality leaks
illegitimate queries, but knowledge of this queries does not give any advantage to the adversary in
breaking the security of the honest parties. As in the ACRS model where an honest party would
never ask for its secret key, in our model an honest party will not make illegal queries, and its
security is therefore preserved.
About pid-wise corruption. In the constructions provided in [CDPW07] security holds only in
presence of pid-wise corruption. Namely, a corrupted party is corrupt in all sessions (i.e., if a player
is corrupt in one session, she cannot be honest in another one). This is due to the fact that, once
14
Fnisc running in presence of an adversary S proceeds as follows:
Functionality Fnisc
• Initialize a list L of tuples.
• Upon receiving a message input(x) from P1, store x.
– Upon receiving a message input(sid, y) from a player Pi, insert the tuple (Pi, sid, y) to
L. If P1 is corrupted send (Pi, f (x, y)) to P1. Else send message − received(Pi) to P1.
– Upon receiving a message get-outputs from P1, send {(Pi, sid, f (x, y)}(Pi,sid,y)∈L.
– When asked by the adversary, on input sid obtain from GgRO the list Qsid of illegitimate
queries that pertain to SID sid and send Qsid to S.
Figure 4: The Multi-server NISC functionality Fnisc (adapted from [AMPR14]).
a party is corrupt, her secret key is leakead. Once the secret key is revealed, security for this party
cannot be argued anymore. We note that in our model we do not need such restriction.
Oﬀ-line Deniability As pointed out in [CDPW07] it is hard to precisely deﬁne what deniability
is as such deﬁnition might diﬀer depending on the application. The deﬁnition that [CDPW07] gives
is that a protocol is deniable if any party can simulate the protocol with just the knowledge of the
output. Namely, any party can be a simulator.
As we discussed before, our model does not guarantee on-line deniability, as if the corrupted
party is forwarding the messages to a third party, then the protocol is not deniable. However, we
note that our protocols do provide oﬀ-line deniability, as any party, given the output of the function
can simulate an accepting transcript.
Oﬀ-line deniability is instead impossible to achieve in the programmable CRS/RO model.
3 Building Blocks
In this section we provide the deﬁnitions of the building blocks that we use in our protocols.
3.1 Trapdoor Commitment
Deﬁnition 2 (Trapdoor Commitment Scheme). A tuple of PPT algorithms (TCGen, TVer, TCom,
TRec, TEquiv) is a trapdoor commitment scheme if, (pk, sk) ← TCGen(1n) is the generation al-
gorithm that outputs the public key pk and the trapdoor key sk, TVer(pk, sk) outputs 1 iﬀ sk is a
valid trapdoor for pk, TCom is the algorithm that takes in input pk and a message m and outputs
the commitment c and the decommitemt d; TRec is the veriﬁcation algorithm that on input (c, d, m)
outputs 1 iﬀ the d is a valid decommitment of c for message m and TEquiv is a polynomial-time
algorithm that satisﬁes the following:
- trapdoor property: for all PPT A, for any m ∈ {0, 1}n the following two probability distribu-
tions are computationally indistinguishable:
• (pk, c, d, m) where (pk, sk) ← A(1n) s.t. TVer(pk, sk) = 1, and (c, d) ← TCom(pk, m)
15
• (pk, c(cid:48), d(cid:48), m) where (pk, sk) ← A(1n) s.t. TVer(pk, sk) = 1, (c(cid:48), z) ← TCom(pk,·), and d(cid:48) ←
TEquiv(sk, z, m)
The above deﬁnition considers trapdoor commitments with the following properties: (a) the
trapdoor is used only to compute the decommitment, (b) knowledge of the trapdoor allows to
equivocate any previously computed commitment (as long as the state z is known). Such a com-
mitment scheme can be based on Pedersen’s perfectly hiding commitment scheme [Ped91] that we
describe in Fig. 5 for completeness.
• TCGenP : The generation algorithm is a randomized algorithm that outputs pk =
(G, p, q, g, h) and sk = trap where p = 2q + 1, p and q are primes, G is a subgroup of
order q of Z∗
p, g and h = gtrap are generators of G.
• TVerP : The trapdoor veriﬁcation algorithm outputs 1 if h = gsk; otherwise it outputs 0.
• TComP : The commitment algorithm is implemented as: TComP (pk, m) = (gmhr
(mod p)), d = (m, r) where r ∈ Z(cid:63)
p is randomly chosen.
• TRecP : The receiver algorithm takes as input (c, m, r) and outputs 1 iﬀ c = gmhr.
• TEquivP : The equivocation algorithm takes as input (c, m, r, m(cid:48), sk), where c denotes a
commitment, (m, r) denotes the decommitment for c, m(cid:48) is the new message (for which
equivocation is required) and sk is the trapdoor. The algorithm computes the new decom-
mitment (for m(cid:48)) as r(cid:48) = m(cid:48) − m + r and outputs it.
Figure 5: Pedersen’s commitment scheme.
3.2 Non-interactive WIPoK in the gRO model
Based on non-interactive straight-line commitment and Σ-protocols, Pass [Pas03] shows how to
construct an eﬃcient straight-line non-interactive witness-indistinguishable proof of knowledge, for
short NIWIpok, in the non-programmable random oracle model. The idea behind the construction is
the following. Let (α, β, γ) be the three messages of a Σ-protocol. Recall that the special soundness
of Σ-protocols guarantees that if for the same ﬁrst message α, one gets two accepting answers
(β0, γ0) and (β1, γ1), then one can extract the witness. To achieve proof of knowledge, the idea is
to force the prover to commits to both pairs (β0, γ0) and (β1, γ1) using the straight-line extractable
commitment, but open to only one of the answers.
The answers to open is decided by querying the RO with the commitments so computed. The
extractor obtains the witness by running the extractor associated to the extractable commitments.
This protocol achieves only soundness 1/2. For soundness 2L, one needs to repeat this protocol L
times. The protocol is formally described in Protocol 1.In the protocol the RO is invoked with the
preﬁx corresponding to the ID of the prover. Due to the unpredictability of the RO, adding this
preﬁx ensures non-malleability.
Protocol 2.Non-interactive proof of knowledge NIWIpok [Pas03]. Let (α, β, γ) denote the three
messages of a Σ protocol for a language L. Let gRO : {0, 1}2n ← {0, 1}(cid:96)(n) where (cid:96)(n) = ω(log n).
16
Let ExtCom the following commitment algorithm. On input id, x, pick a random string r and out-
puts gRO(id, x, r). The decommitment consists in the pair x, r.
Public input: x.
Private input to P : a witness w for theorem “x ∈ L”.
• P computes α, the ﬁrst message of the Σ-protocol. P picks two challenges β0, β1 (with
β0 (cid:54)= β1), and computes the corresponding answers γ0, γ1 using knowledge of the witness w.
• P commits to β0, β1, γ0, γ1: it computes cβb = ExtCom(“P 0(cid:48)(cid:48) ◦ βb) and cγb = ExtCom(“P 0(cid:48)(cid:48) ◦
γb), for b = 0, 1. Let Dβb, Dγb the corresponding decommitments.
• P computes the challenge e as follows. Let ¯C = (Cβ0, Cβ1, Cγ0, Cγ1) the concatenations of the
commitments so obtained. P compute e = gRO(α, ¯C).
• The non-interactive proof consists of the message: α, ¯C, Dβe, Dγe.
• V checks that: 1)Dβe, Dγe are valid decommitments to βe, γe, 2) α, βe, γe is an accepting
transcript for the theorem x ∈ L.
3.3 Sigma Protocols
In this section we present the Σ-protocol that will be used in Protocol 2.
Σ-protocol to prove Knowledge of a Discrete Logarithm (DLog). Let G be a group of prime
order q generated by g and let w ∈ Zq. Let n be the security parameter, and 2n < q. Let RDL be
the relation for the Discrete Log (DLog) problem as follows: RDL = {((G, q, g, h), w)|h = gw}. The
Σ-protocol for RDL is depicted in Figure 6.
Common input: x = (G, q, g, h).
P ’s secret input: w s.t. (x, w) ∈ RDL.
Σ-protocol:
• P: choose r $← Zq and send a = gr to V .
• V: choose e $← Zq and send it to P .
• P: compute z ← r + ew mod q and send it to V .
• V: accept if and only if gz = ahe.
Figure 6: Σ-protocol for Relation RDL.
Proof of Knowledge of a Compound Statement. Let (x0, x1) be a pair of statements. Let
P be a prover who wants to prove that he knows a witness w such that either (x0, w) ∈ R0 or
(x1, w) ∈ R1 without revealing which is the case. Let π0 be the Σ-protocol for the relation R0
and π1 be the one for R1. Figure 7 shows a Σ-protocol for R0 ∨ R1. This protocol exploits the
honest veriﬁer zero knowledge (HVZK) property of Σ protocol. This property allows to compute an
accepting transcript (a, e, z) given in input the theorem x and the challenge e and without knowing
the witness.
17
Common input: (x0, x1).
P ’s secret input: w s.t. (xb, w) ∈ Rb.
Σ-protocol:
• P: compute ab according to π0 using (xb, w) as input: then choose e1−b and run the HVZK
simulator S for π1−b on input (x1−b, e1−b) to obtain (a1−b, e1−b, z1−b); send (a0, a1) to V .
• V: choose s ∈ {0, 1}t and send it to P .
• P : set eb ← s ⊕ e1−b, compute zb according to πb and send (e0, z0, e1, z1) to V .
• V: check that e0 ⊕ e1 = s and that both transcript (x0, a0, e0, z0) and (x1, a1, e1, z1) are
accepting according to π0 and π1 respectively.
Figure 7: Witness-Indistinguishable PoK of a Compound Statement.
4 UC Commitments in the gRO Model
In this section, we present a UC secure commitment scheme in the global RO model. Our com-
mitment scheme can be based on any stand-alone secure trapdoor commitment scheme (see Def.2).
However, in order to obtain the concrete eﬃciency parameters as discussed earlier in Sec.1.2, we
instantiate the trapdoor commitment scheme with Pedersen’s perfectly hiding commitment scheme
[Ped91] described in Fig. 5. The intuition behind the security proof was given in Sec.1.2.
We now describe a UC secure commitment scheme, denoted (cid:104)C, R(cid:105), in the global random or-
acle model. Here, C denotes the algorithm of the committer and R denotes the algorithm of
the receiver. See Fig. 2 for a formal description of the ideal commitment functionality. Let
(TCGen, TVer, TCom, TRec, TEquiv) be a trapdoor commitment scheme. Let n be the security pa-
rameter and m ∈ {0, 1}|n| denote the input string of the committer. Let sid denote the session
identiﬁer. The commitment scheme (cid:104)C, R(cid:105) consists of two phases, namely, the commitment phase
and the decommitment phase, described as follows:
Protocol 1. UC Commitment in the gRO model.
Inputs. C has in input m ∈ {0, 1}n. R has no input. Let sid denote the session identiﬁer.
Commitment Phase: This phase consists of two rounds.
• R → C: R ﬁrst computes (pk, sk) ← TCGen(1n). Next, it samples a random string r (of
appropriate length) and queries the gRO on the string (sid, ‘R’(cid:107)sk(cid:107)r). Let aR be the resulting
answer. R sends (pk, aR) to C.
• C → R: C ﬁrst computes a trapdoor commitment to its input string m, namely, (cmsg, dmsg) ←
TCom(pk, m). Next, it samples a random string s and queries the gRO on the string (sid, ‘C’(cid:107)m(cid:107)dmsg(cid:107)s).
Let aC be the resulting answer. Finally,
(cro, dro) ← TCom(pk, aC).
C sends (cmsg, cro) to R.
it computes a trapdoor commitment to aC as
Decommitment Phase: This phase consists of 3 rounds.
• C → R: C commits to the decommitments dmsg, dro: it ﬁrst samples a random string s(cid:48) and
C to
queries the gRO on the string (sid, ‘C’(cid:107)dmsg(cid:107)dro(cid:107)s(cid:48)). It then sends the resulting answer a(cid:48)
R.
18
• R → C: R sends (sk, r) to C.
• C → R: C aborts the protocol if either of the following veriﬁcations fails:
(a) aR =
gRO(sid, ‘R’(cid:107)sk(cid:107)r), (b) TVer(pk, sk) = 1. Otherwise, if both the checks succeed, then C
reveals (m, dmsg, dro, aC, s, s(cid:48)) to R.
The receiver R accepts m as the decommitted value iﬀ all of the following veriﬁcations succeed: