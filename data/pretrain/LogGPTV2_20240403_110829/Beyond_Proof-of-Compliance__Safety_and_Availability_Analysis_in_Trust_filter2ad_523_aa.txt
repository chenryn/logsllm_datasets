title:Beyond Proof-of-Compliance: Safety and Availability Analysis in Trust
Management
author:Ninghui Li and
William H. Winsborough and
John C. Mitchell
Beyond Proof-of-compliance: Safety and Availability Analysis in Trust
Management
Ninghui Li
Department of Computer Science
Stanford University
Gates 4B
Stanford, CA 94305-9045
William H. Winsborough
Network Associates Laboratories
15204 Omega Drive
Suite 300
Rockville, MD 20850-4601
PI:EMAIL
william PI:EMAIL
John C. Mitchell
Department of Computer Science
Stanford University
Gates 4B
Stanford, CA 94305-9045
PI:EMAIL
Abstract
Trust management is a form of distributed access control
using distributed policy statements. Since one party may
delegate partial control to another party, it is natural to
ask what permissions may be granted as the result of pol-
icy changes by other parties. We study security properties
such as safety and availability for a family of trust manage-
ment languages, devising algorithms for deciding the possi-
ble consequences of certain changes in policy. While trust
management is more powerful in certain ways than mecha-
nisms in the access matrix model, and the security proper-
ties considered are more than simple safety, we ﬁnd that in
contrast to the classical HRU undecidability of safety prop-
erties, our primary security properties are decidable.
In
particular, most properties we studied are decidable in poly-
nomial time. Containment, the most complicated security
property we studied, is decidable in polynomial time for the
simplest TM language in the family. The problem becomes
coNP-hard when intersection or linked roles are added to
the language.
1
Introduction
Trust Management (TM) is an approach to access con-
trol in decentralized distributed systems with access con-
trol decisions based on policy statements made by multi-
ple principals. A key aspect of trust management is delega-
tion: a principal may transfer limited authority over one or
more resources to other principals. Since delegation gives
a certain degree of control to a principal that may be only
partially trusted, a natural security concern is whether a re-
source owner still has some guarantees about who can ac-
cess their resources. If we think of the union of all policies
of all principals as the state of a TM system, then a resource
owner always has control over some part of the state, but
not necessarily all parts. In this paper, we consider the se-
curity analysis problem, which asks what accesses may be
allowed or prevented by prospective changes in the state of
a TM system.
A few deﬁnitions are useful for stating the security anal-
ysis problem more precisely. In general, a TM language has
a syntax for specifying policy statements and queries, to-
gether with a semantic relation (cid:1). We call a set P of policy
statements a state of a TM system. Given a state P and a
query Q, the relation P (cid:1) Q means that Q is true in P.
When Q arises from an access request, P (cid:1) Q means that
access Q is allowed in P; a proof demonstrating P (cid:1) Q is
then called a proof-of-compliance.
Recognizing that a principal or a coalition of cooperat-
ing principals may control only a part of the global state,
we assume there is a restriction rule, R, that deﬁnes the
uncontrolled changes of state that are possible. For exam-
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
1
is R-reachable from P , or simply P(cid:2)
ple, the principal in question may consider the part of the
state controlled by fully trusted principals to be ﬁxed, while
considering that other principals may remove some policy
statements and/or add new ones. Given a state P and a re-
striction rule R, we write P (cid:5)→R P(cid:2)
if the change from P to
is allowed by R, and P ∗(cid:5)→R P(cid:2)
P(cid:2)
if a sequence of zero or
more allowed changes leads from P to P(cid:2)
, we
say that P(cid:2)
is reach-
able, when P and R are clear from context.
Deﬁnition 1 Let P be a state, R a restriction rule, and Q a
query. An existential security analysis query takes the form:
Does there exist P(cid:2)
and P(cid:2) (cid:1) Q? When
the answer is afﬁrmative, we say Q is possible given P and
R. A universal security analysis query takes the form: For
such that P ∗(cid:5)→R P(cid:2)
, does P(cid:2) (cid:1) Q? If so, we say
every P(cid:2)
Q is necessary given P and R.
. If P ∗(cid:5)→R P(cid:2)
such that P ∗(cid:5)→R P(cid:2)
Here are some motivating examples of security analysis
queries.
Simple Safety (Existential) Does there exist a reachable
state in which a (presumably untrusted) principal has
access to a resource?
Simple Availability (Universal) In every reachable state,
does a (presumably trusted) principal have access to
a resource?
Bounded Safety (Universal) In every reachable state, is
the set of all principals that have access to a resource
bounded by a given set of principals?
Containment (Universal) In every reachable state, does
every principal that has one property (e.g., has access
to a resource) also have another property (e.g., being
an employee)? A query of this form can express safety
or availability (e.g., by interchanging the two example
properties in the previous sentence).
Simple safety queries were ﬁrst formalized in [9] in the
context of the well-known access matrix model [11]. The
model in [9] is commonly know as the HRU model. In the
general HRU model, safety analysis, i.e., answering sim-
ple safety queries, is undecidable [9]. A number of pro-
tection models were developed to address this, for exam-
ple, the take-grant model [17], the Schematic Protection
Model [19], and the Typed Access Matrix model [20]. The
other kinds of queries listed above were not considered in
these previous works. Since some of our queries are about
availability rather than safety, we use the term security anal-
ysis rather than safety analysis.
Security analysis is especially relevant in TM systems,
which focus on delegation. While the use of delegation
greatly enhances ﬂexibility, it may also reduce the control
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
2
that a principal has over the resources it owns. Therefore a
resource owner who is considering delegating control over
access rights needs assistance in assessing the potential con-
sequences. Who could get access? Who could be denied?
These simple questions lead to the security analysis queries
considered here.
Security analysis is needed when the state of a TM sys-
tem may change in the future. It is also useful when the
global state of a TM system is ﬁxed, but only partially
known. Such partial knowledge is typical in distributed sys-
tems, and TM is no exception. For instance, previously un-
known statements may be presented along with new access
requests. Thus, although the global state does not change,
one’s view of that state is changing. To understand the po-
tential consequences of candidate delegation acts, one needs
to consider as-yet-unknown policy statements that could ex-
ist.
To the best of our knowledge, security analysis for TM
systems has not been investigated previously as such.
In
this paper, we deﬁne a precise model for security analysis
in trust management. The policy language we consider is
a slightly simpliﬁed (yet expressively equivalent) version of
the RT0 language [16]. We call the language SRT , for Sim-
pliﬁed RT0. All the security analysis queries listed above
are considered. While the TM language we are studying
supports delegation and is more expressive than the access
matrix model in certain ways, and the kinds of queries we
are considering are more general, somewhat surprisingly,
answering these queries are decidable. Simple safety, sim-
ple availability, and bounded safety queries can all be an-
swered in time polynomial in the size of P. Containment
queries can be more expensive, depending on which pol-
icy language features are used. We show that, for BRT , a
sub-language of SRT that has simple delegation, contain-
ment queries can be answered in polynomial time. Adding
intersection to BRT increases the complexity of answer-
ing containment queries to coNP-complete. For the case of
SRT , which is obtained by adding an additional linked-role
feature, answering containment queries is still decidable (in
coNEXP).
The rest of this paper is organized as follows. In Sec-
tion 2, we deﬁne the model we use to study security analysis
in TM. In Section 3, we handle simple safety, simple avail-
ability, and bounded safety queries. In Section 4, we present
results about containment queries. We discuss related work
in Section 5, and conclude in Section 6. An appendix con-
tains proofs that are not included in the main body.
2
Instantiating The Security Analysis Prob-
lem
The abstract deﬁnition of security analysis in Deﬁni-
tion 1 has three parameters: the language used to express
P, the form of query Q, and the restriction rule R. In this
section, we instantiate the security analysis problem with
speciﬁc parameters, discuss our choices, and give an exam-
ple that will be used throughout the paper.
2.1 Syntax of The TM Language
The policy language we consider is SRT , a slightly sim-
pliﬁed version of RT0 [16]. As in RT0, the basic constructs
of SRT include principals and role names. In this paper,
we use A, B, D, E, F , X, Y , and Z, sometimes with sub-
scripts, to denote principals. A role name is a word over
some given standard alphabet. We use r, u, and w, some-
times with subscripts, to denote role names. A role takes
the form of a principal followed by a role name, separated
by a dot, e.g., A.r and X.u. A role deﬁnes a set of princi-
pals who are members of this role. Each principal A has the
authority to deﬁne who are the members of each role of the
form A.r. An access control permission is represented as a
role as well; for example, that B is a member of the role of
A.r may represent that B has the permission to do action r
on the object A.
There are four types of policy statements in SRT , each
corresponding to a different way of deﬁning role member-
ship:
•
A.r ←− D
Type-1:
•
•
•
This statement means that A deﬁnes D to be a member
of A’s r role.
Type-2:
A.r ←− B.r1
This statement means that A deﬁnes its r role to in-
clude (all members of) B’s r1 role. This represents a
delegation from A to B, since B may affect who is a
member of the role A.r by issuing statements.
Type-3:
A.r ←− A.r1.r2
We call A.r1.r2 a linked role. This statement means
that A deﬁnes A.r to include B.r2 for every B that is
a member of A.r1. This represents a delegation from
A to all the members of the role A.r1.
A.r ←− B1.r1 ∩ B2.r2
We call B1.r1 ∩ B2.r2 an intersection. This statement
means that A deﬁnes A.r to include every principal
who is a member of both B1.r1 and B2.r2. This repre-
sents partial delegations from A to B1 and to B2.
Type-4:
A role expression is a principal, a role, a linked role, or
an intersection. We say that each policy statement deﬁnes
the role A.r. Given a set P of policy statements, we deﬁne
the following: Principals(P) is the set of principals in P,
Names(P) is the set of role names in P, and Roles(P) =
{A.r | A ∈ Principals(P), r ∈ Names(P)}.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
3
The language SRT simpliﬁes RT0 in that type-4 state-
ments in SRT allow the intersection of only two roles; in
RT0, the intersection may contain k components, each can
be a principal, a role, or a linked role. RT0 statements us-
ing such intersections can be equivalently expressed in SRT
by introducing new intermediate roles and additional state-
ments. This simpliﬁcation helps simplify the proofs in this
paper. When studying containment queries, we consider the
following sub-languages of SRT : BRT (for Basic RT0),
which has only type-1 and 2 statements, LRT (for Linking
RT0), which has type-1, 2, and 3 statements, and NRT (for
iNtersection RT0), which has type-1, 2, and 4 statements.
The four types of statements in SRT cover the most com-
mon delegation relationships in existing TM languages such
as the RT family of Role-based Trust-management lan-
guages [16, 15, 14], SPKI/SDSI [6, 4], and KeyNote [2].
SRT captures the basic forms of delegation relationships in
the RT framework, though it does not cover manifold roles.