nents (e.g., services) P, Q, Q1 and Q2. P has obtained the
data “01”, and the accompanying label {L1}. P wants to
transfer the data to Q, without Q obtaining the label {L1}.
Note that Q, Q1 and Q2 initially have the empty label {}.
Additionally, P and Q have a prior understanding that P
will call the ith service of Q to indicate “0” at the ith bit.
Q0s components are programmed to send a message to Q
after a predetermined time if they do not receive a mes-
sage from P (i.e., indicating a “1”). Since the ﬁrst data
bit is “0”, P sends “0” to Q1, whose label ﬂoats to {L1}
( Figure 5b). After a predeﬁned time, the component
that did not receive a message from P, i.e., Q2, sends a
“1” to Q (Figure 5c). The data leak is successful, as Q
knows that the second bit is “1”, and assumes the ﬁrst to
be “0”, all without acquiring the label {L1}. As Android
does not place any limits on the number of components,
a wider n bit channel is possible with n components.
Weir’s polyinstantiation defeats this attack by creating
a new instance of Q1 in a separate process to deliver a call
from a label that mismatches its own (Figure 6a). Next,
the unlabeled instance of Q1 and Q2 both call Q with data
“1”, as shown in Figure 6a. In fact, for n components of
Q, Q will always get n calls with data “1”, as Weir will
polyinstantiate all the components that have been called
by P with the label {L1}. Weir’s use of ﬂoating labels
is resistant to implicit ﬂows inherent to regular ﬂoating
labels, as labels do not ﬂoat to the original instance, but
to a new instance created in the caller’s context.
Jia et al [19] attempt to solve a similar problem,3 by
making the raised label the component’s base (i.e., static)
label. This defense allows the existing leak, but makes
the components that received the message (e.g., Q1) un-
3Refer to page 8 of the paper by Jia et al. [19] for details.
USENIX Association  
25th USENIX Security Symposium  1129
usable for future attacks. Attackers can be expected to
beat this defense by coordinating the components used
for every attack, and transfering signiﬁcant data before
all the components have restrictive static labels.
Finally, while polyinstantiation is resistant to data
leaks in ﬂoating labels, we leave the complete formal-
ization of this idea as future work. The intuition be-
hind the formalization is described as follows: Let L be
the type system corresponding to the labels (e.g., type-
system for ﬂoating labels) and S be the type system cor-
responding to information about stacks (e.g., for k-CFA
analyis strings of size k that capture information about
last k calls). Assume that we have inferencing/propoga-
tion rules for both type systems and they are sound. We
have an intuition that the combined system (denoted by
L ⇥ S ) is sound (the inferencing/propogation rules are
basically a combination of both rules).
7 Evaluation
Our evaluation answers the following questions about
Weir’s performance and compatibility:
Q1 Is Weir compatible with developer preferences that
manipulate component instantiation?
Q2 What is Weir’s performance overhead?
Q3 Is Weir scalable for starting components?
We now provide an overview of the experiments and
highlight the results. The rest of this section describes
each experiment in detail.
7.1 Experiment Overview and Highlights
Weir does not modify components, but only modiﬁes
their instantiation.
Thus, we evaluate compatibility
with options that control component instantiation (Q1),
i.e., the singleTop, singleTask and singleInstance activ-
ity launch modes described in Section 2.4. We trigger
the launch modes in popular Android apps from Google
Play, and record application behavior in unlabeled and la-
beled contexts. We did not observe any crashes or unex-
pected behavior. Every launch mode worked as expected,
while the underlying polyinstantiation ensured delivery
of calls to instances in the caller’s context.
We measure the performance overhead of Weir over
an unmodiﬁed Android (AOSP) build (Q2) with mi-
crobenchmarks for common operations (e.g., starting
components). Our comparison between the unmodiﬁed
build, Weir (unlabeled instance), and Weir (labeled in-
stance) in Table 1 shows negligible overhead. Even in
cases where the overhead percentage is large, the ab-
solute overhead value is negligible (<4ms). Further,
the negligible difference in the values of Weir’s labeled
and unlabeled instances (i.e., relative to the error) would
make a noisy covert channel at best.
As described in Section 5, for every call, Android’s in-
tent resolution gets the target component. The OS then
chooses a runtime instance from available instances of
the target. Hence, the total number of a component’s run-
time instances only affects its own start time. We eval-
uate the scalability of a component’s start time, when a
certain number of its instances already exist (Q3). Our
results in Figure 7 show a linear increase in the start time
with increase in the number of concurrent instances, and
low absolute values (e.g., about 56 ms for 100 instances).
7.2 Compatibility with Launch Modes
We randomly pick 30 of the top applications on Google
Play (i.e., 10 per launch mode, complete list available
at http://wspr.csc.ncsu.edu/weir/).
Methodology: For each launch mode, we ﬁrst launch
each application from two separate unlabeled compo-
nents, and navigate to the speciﬁc activity we want to
test. With this step, we conﬁrm that the application and
speciﬁcally the singleTask/Top/Instance activity works
as expected. Without closing existing instances, we start
the same application from a labeled context and repeat
the prior steps. We record any unexpected behavior.
Observations: We did not observe any unexpected be-
havior, and activities started in their assigned tasks. In
the case of singleTask and singleInstance activities, two
instances of the same activity ran in the designated task
instead of one; i.e., one labeled and the other unlabeled.
Intent messages were delivered to the activity instance
with the caller’s label. This behavior is compatible with
singleTask and singleInstance activities, and also main-
tains label-based separation in memory.
7.3 Microbenchmarks
We evaluate the performance of the operations affected
by Weir (i.e., ﬁle/network access, component/process
start) , on a Nexus 5 device. We perform 50 runs of each
experiment, waiting 200 ms between runs. Table 1 shows
the mean with 95% conﬁdence intervals. Cases with neg-
ative overhead can be attributed to the high error in some
operations. Speciﬁc experimental details are as follows:
Component and Process start: We measure the com-
ponent start time as the time from the placement of the
call (e.g., startActivity) till its delivery. The component is
stopped between runs. To measure the process start time,
we kill the process between subsequent runs. While the
overhead percentages may be high (e.g., for providers),
the absolute values are low, and would not be noticeable
by a user. Further, the process start time that includes
ﬁle-system layering in zygote shows minimal overhead.
File access: We perform ﬁle read and write operations on
1130  25th USENIX Security Symposium 
USENIX Association
Table 1: Performance - Unmodiﬁed Android (AOSP), Weir in unlabeled context, Weir in labeled context.
Operation
Activity start
Service start
Broadcast Receiver start
Content Provider start
Process start
File Read (1MB)
File Write (1MB)
Network
Weir (ms)
Overhead (ms)
AOSP (ms) Weir w/o label Weir w/ label Weir w/o label Weir w/ label
0.76 (3.79%)
20.06±4.47
3.42 (24.53%)
13.94±2.87
12.92±3.96
-1.06 (-8.2%)
4.54±2.28
3.36 (74.01%)
127.18±5.62
5.8 (4.56%)
42.38±6.05
-1.06 (-2.5%)
0.36 (0.77%)
46.8±5.79
66.98±3.62
2.02 (3.02%)
2.16 (10.77%)
1.02 (7.32%)
-1.5 (-11.6%)
2.72 (59.91%)
3.1 (2.44%)
1.08 (2.55%)
1.04 (2.22%)
-1.3 (-1.94%)
22.22±4.69
14.96±2.85
11.42±4.44
7.26±5.32
130.28±5.63
43.46±5.44
47.84±5.42
65.68±2.78
20.82±4.87
17.36±4.78
11.86±3.34
7.9±4.73
132.98±6.66
41.32±5.39
47.16±5.85
69.00±7.04
56.34
49.9649.24
43.56
1 // Creating the tag ‘‘t’’
2 domains={‘‘www.bcloud.com’’,‘‘smtp.bcloud.com’’,...};
3 createTag(‘‘t’’, domains);
Listing 1: BCloud’s policy conﬁguration
41.84
40.9
37.6
32.74
22.8 20.86
)
s
m
(
t
n
e
n
o
p
m
o
c
a
t
r
a
t
s
o
t
n
e
k
a
t
e
m
T
i
60
50
40
30
20
14.96
10
10 20 30 40 50 60 70 80 90 100
0
Number of component instances already started
Figure 7: Linear increase in component start time when
0 ! 100 instances (in steps of 10) already exist.
a 1MB ﬁle using a 8KB buffer. Since the entire check is
performed using the process and ﬁle labels in the kernel,
the overhead value is negligible (e.g., about 0.77% for a
labeled ﬁle write). We also measure the cost of copying
the 1MB ﬁle to the labeled layer, i.e., repeating the ﬁle
write experiment on Weir but deleting the ﬁle between
runs. The extra time taken to copy relative to AOSP is
5.98 ms (about 13% overhead). RedHat’s evaluation of
OverlayFS further demonstrates its scalability [18].
Network access: We measure the time to establish a net-
work connection using the HTTPSUrlConnection API,
using domain declassiﬁcation for the labeled instance.
The labeled instance’s overhead includes the kernel up-
calls and the DNS proxy lookup. The overhead for the
labeled instance (2.02 ms or 3.02%) includes the time
taken by the DNS proxy to inform Weir of the lookup, as
well as the synchronous kernel upcalls.
1
7.4 Scalability of Component Instantiation
We create up to 100 simultaneous instances (in steps of
10) of a service component, each with a different label.
At each step, we then invoke the last instance, i.e., from
a caller with the last instance’s label, and measure the
component start time. Note that this experiment presents
the worst case scenario; i.e., our prototype does not im-
plement any particular strategy (e.g., least recently used
(LRU)) for matching a call with a list of available in-
1 addTag{‘‘t’’};//raise own label to {t}
2 //perform sharing action ...
3 removeTag{‘‘t’’}//lower own label
Listing 2: BCloud raises its label
stances, and a request with the last instance’s label will
always result in a label comparison with all available in-
stances. Figure 7 shows linear scalability, with the high-
est absolute value being less than 57 ms.
8 Case Study
We investigated the use of labeled enterprise data with an
unmodiﬁed third party email (K-9 Mail) application [9].
With this case study, we demonstrate Weir’s utility, and
motivate the trade-off discussion in Section 9.
Application Setup: We created an enterprise cloud ap-
plication, BCloud that allows the user to sync her work
data (e.g., contacts, documents) to the device. Further,
we used the popular email application K-9 Mail with
both user and enterprise data. The setup is as follows:
1. BCloud. We assume that the enterprise policy is to
enable the use of third party applications with work data,
but to allow export to only enterprise domains. For ex-
ample, work data must only be emailed using the work
SMTP server smtp.bcloud.com.4 Thus, BCloud
creates a tag t as shown in Listing 1. To set the policy be-
fore sharing its data or saving it to storage, BCloud may
temporarily raise its label to {t} (Listing 2), or start itself
or other applications with {t} using intent labeling (List-
ing 3). For instance, BCloud raises its label before copy-
ing the work contacts to Android’s Contacts Provider.
2. K-9 Mail. We conﬁgured K-9 Mail for both per-
sonal and work email accounts. Like most modern email
clients, K-9 Mail allows the user to send an email us-
ing the work or the personal account, using the send
as email ﬁeld.
Internally, K-9 Mail uses the SMTP
server smtp.gmail.com for the personal account, and
4We
used mail.yahoo.com, smtp.mail.yahoo.com
and imap.mail.yahoo.com as BCloud’s trusted domains.
USENIX Association  
25th USENIX Security Symposium  1131
smtp.bcloud.com for the work account. To assist
the user in composing an email, K-9 Mail retrieves con-
tacts from the Contacts Provider app, and makes sugges-