### Definitions and Notations

Let \( GID_i = GID \), \( n_i = n \), and \( \phi_i = \phi \). Define the data packets associated with a query as \( DP_i = \{p_1, \ldots, p_n\} = DP \) and the response of the authenticator as \( AP_i = \{a_1, \ldots, a_n\} = AP \).

### Conditions for Received Packets

1. **Inclusion of Authenticated Packets**: At least \(\phi n\) of the authenticated packets \((a_1, \ldots, a_n)\) are included in the received packets \( RP \), i.e., \( |RP \cap AP| \geq \phi n \).
2. **Maximum Number of Received Packets**: The number of received packets is at most \(\gamma n\), i.e., \( |RP| \leq \gamma n \).
3. **Incorrect Decoding**: For some \( 1 \leq j \leq n \), \( p_j \) is the \( j \)-th packet in the original set of data packets \( DP \), such that the corresponding authenticated packet \( a_j \) was received, i.e., \( a_j \in RP \cap AP \), but was not decoded correctly. Specifically, let \( (p'_1, \ldots, p'_n) = \text{Decode}(PK, GID, n, \phi, \gamma, RP) \). For \( p_j \), it holds that \( p_j \neq p'_j \).

### Violation of Security Property

The adversary succeeds if they manage to construct \( RP \) such that the decoder outputs packets \( OP = \{p'_1, \ldots, p'_n\} \) that were never authenticated by the authenticator algorithm for the group identification tag \( GID \). More precisely, the adversary wins if one of the following happens:

1. **Unqueried Group Identification Tag**: The authenticator was never queried with the group identification tag \( GID \) and size \( n \), yet the decoder does not reject. I.e., \( \text{reject} \neq \text{Decode}(PK, GID, n, \phi, \gamma, RP) \).
2. **Incorrect Output Packet**: The authenticator was queried with the group identification tag \( GID \), the values \( n \), \(\phi\), and \(\gamma\), and the data packets \( DP = \{p_1, \ldots, p_n\} \). However, some output packet \( p'_j \neq ? \) is different from the corresponding data packet \( p_j \), where \( OP = \{p_1, \ldots, p_n\} \).

### Construction

In this section, we describe a multicast authentication scheme \((\text{KeyGen}, \text{Auth}, \text{Decode})\) that meets the definitions provided in the previous section. We denote with \(\epsilon > 0\) the tolerance parameter of the decoder, which balances error-tolerance and performance. By \(-\), we denote concatenation, and by \(? \) we denote either an empty packet or the empty string. We often omit the floor and ceiling notation to avoid notational overload.

#### 4.1. Key Generation

We assume a signature scheme \((G, \text{Sign}, \text{Verify})\) and a collision-resistant hash function \( H \) are given (see Definitions 2.1 and 2.2). If \((PK', SK') \leftarrow G(1^k)\), we set \( PK = (PK', H) \) and \( SK = SK' \).

#### 4.2. Authenticator Auth

**Input**: The secret key \( SK \), the public key \( PK \), the group identification tag \( GID \), the data stream size \( n \), parameters \(\phi\) and \(\gamma\) of the network, and the data packets \( DP = \{p_1, \ldots, p_n\} \).

**Algorithm**:
1. For \( 1 \leq i \leq n \), compute the hash value \( h_i = H(p_i) \).
2. Concatenate all hash values and sign them: \(\sigma \leftarrow \text{Sign}_{SK}(GID \parallel h_1 \parallel \cdots \parallel h_n)\).
3. The string \( S = h_1 \parallel \cdots \parallel h_n \parallel \sigma \) is called the authentication information.
4. Encode \( S \) using a Reed-Solomon code with rate \(\rho = \frac{\phi^2}{(1+\epsilon)\gamma}\). This ensures that even if only a fraction \(\phi\) of the packets survive and a large number of packets \((\gamma - \phi)n\) are injected, the receiver still gets all the authentication information.

#### 4.3. Decoder Decode

**Input**: The public key \( PK \), a group identification tag \( GID \), \( n \), parameters \(\phi\) and \(\gamma\), and the received packets \( RP = \{r_1, \ldots, r_m\} \).

**Algorithm**:
1. Parse each packet in \( RP \) as \( r_i = GID_i \parallel j_i \parallel p_i \parallel s_i \).
2. Discard non-conforming packets (i.e., those with \( GID_i \neq GID \) or \( j_i \notin [1, n] \)). Let the remaining packets be \( (r_1, \ldots, r_{m'}) \).
3. If \( m' > \gamma n \), reject.
4. For \( 1 \leq i \leq m' \), set \((x_i, y_i) = (j_i, s_i)\).
5. Run the MGSDecoder with input parameters \( n \), \(\phi\), \(\gamma\), and the points \((x_i, y_i)\) for \( 1 \leq i \leq m' \). If MGSDecoder rejects, reject; otherwise, obtain the candidate codewords \(\{c_1, \ldots, c_\ell\}\).
6. For \( 1 \leq i \leq n \), set \( h_i = ? \). Let \( j = 1 \). While \( j \leq \ell \):
   - Parse the codeword \( c_j \) as string \( h_1 \parallel \cdots \parallel h_n \parallel \sigma \).
   - If \(\text{Verify}_{PK}(GID \parallel h_1 \parallel \cdots \parallel h_n, \sigma) = 1\), set \( h_i = h_i \) for \( 1 \leq i \leq n \) and break out of the loop; otherwise, increment \( j \).
7. If \((h_1, \ldots, h_n) = (?, \ldots, ?)\), reject. Otherwise, compute the output packets \( OP \) as follows:
   - Initialize \( OP = \{p'_1, \ldots, p'_n\} \) with \( p'_i = ? \) for \( 1 \leq i \leq n \).
   - For \( 1 \leq i \leq m' \):
     - View \( r_i \) as \( r_i = GID \parallel j \parallel p_j \parallel s_j \) with \( j \in [1, n] \).
     - If \( H(p_j) = h_j \), set \( p'_j = p_j \).
8. Output \( OP = \{p'_1, \ldots, p'_n\} \) or reject.

### Correctness and Security Proofs

We show that our scheme satisfies Definition 3.4. Suppose there is an adversary \( A \) who breaks the \((\phi, \gamma)\)-correctness or security of our scheme with non-negligible probability \(\varepsilon(k)\). Then one of the following is true:

1. **Violation of Correctness**: With probability \(\varepsilon(k)/2\), the adversary \( A \) violates the \((\phi, \gamma)\)-correctness property.
2. **Violation of Security**: With probability \(\varepsilon(k)/2\), the adversary \( A \) violates the security property.

A non-negligible probability of either event contradicts the security properties of the underlying signature scheme and hash function.

**Claim 4.2**: If a polynomial-time adversary \( A \) violates the \((\phi, \gamma)\)-correctness property of our scheme, then the underlying signature scheme is not secure, or the underlying hash function is not collision-resistant.

**Proof**:
- **Reduction**: The reduction sets up the public key \( PK = (PK', H) \) and has oracle access to the signer \(\text{Sign}_{SK}\).
- **Simulation**: The reduction invokes the adversary \( A \) on input \( PK \) and answers queries to the authenticator \(\text{Auth}\) by computing the signature \(\sigma_i\) via the oracle \(\text{Sign}_{SK}\).
- **View of Adversary**: The view of the adversary in the reduction is identical to the real-life view. Therefore, with the same probability, the adversary violates the correctness property.

**Case 1**: If \( p'_j \neq ? \) and \( H(p_j) \neq H(p'_j) \), the signature oracle was never queried on \( GID \parallel h_1 \parallel \cdots \parallel h_n \), and yet the adversary causes us to compute a valid signature, implying the signature scheme is insecure.

**Case 2**: If \( p'_j = ? \) and \(\phi n\) of the original authenticated packets were received, the MGSDecoder includes the correct candidate value. If \((h_1, \ldots, h_n) \neq (H(p_1), \ldots, H(p_n))\), then the signature is a successful forgery, implying the hash function is not collision-resistant.

**Claim 4.3**: If a polynomial-time adversary \( A \) violates the security property of our scheme, then the underlying signature scheme is not secure, or the underlying hash function is not collision-resistant.

**Proof**:
- **Reduction**: Set up the reduction as in Claim 4.2.
- **Adversary's View**: The adversary's view in the reduction is the same as in real life.
- **Security Violation**: If the authenticator was never queried with \( GID \) and size \( n \), yet the decoder does not reject, or if the authenticator was queried but the output packet \( p'_j \neq ? \) is different from \( p_j \), then the signature scheme or hash function must be insecure.

This completes the proof of the security and correctness of our multicast authentication scheme.