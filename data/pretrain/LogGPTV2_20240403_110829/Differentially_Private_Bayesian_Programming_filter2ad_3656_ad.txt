consider only programs with a well deﬁned semantics: e.g.
we don’t consider programs where we make observations of
events with 0 probability. We will ﬁnally restrict ourselves to
inference algorithms that never fail: we could easily simulate
this by using the maybe monad.
syntactic constructions, this is reﬂected in their interpreta-
tion. For an example, we give in Figure 3 the interpretation
(cid:74)bernoullipeq(cid:75)θ. The operator ran turns a symbolic distribu-
tion in an actual distribution. Its semantics is deﬁned by
cases on the given symbolic distribution. In Figure 3 we
give its interpretation for the case when the given symbolic
distribution is bernoullipeq. The cases for the other symbolic
distributions are similar.
Lemma 4.1. If Γ $ e : τ and θ validates Γ, then(cid:74)e(cid:75)θ P(cid:74)τ(cid:75).
The soundness of the semantics is given by the following:
5. RELATIONAL TYPE SYSTEM
5.1 Relational Typing
To reason about diﬀerential privacy as well as about f -
divergences we will consider a higher-order relational re-
ﬁnement type system. We follow the approach proposed
by Barthe et al. [6].
We will distinguish two sets of variables: XR (relational )
Ť
and XP (plain). Associated with every relational variable
x P XR, we have a left instance xŸ and a right instance xŹ.
xPXRtxŸ, xŹu and X ’ for XR’ Y XP .
We write XR’ for
The set of PrivInfer expressions E is the set of expressions
deﬁned over plain variables, i.e. expressions in PCFppXPq.
The set of PrivInfer relational expressions E’ is the set of
expressions deﬁned over plain and relational variables, ex-
pressions in PCFppX ’q, where only non-relational variables
can be bound.
The sets of relational types T “ tT, U, . . .u and assertions
A “ tφ, ψ, . . .u are deﬁned by the following grammars:
T, U P T
φ, ψ P A ::“ Q px : τq. φ
Q px :: Tq. φ
| ∆D
| e’ “ e’ | e’ ď e’ | Cpφ1, . . . , φnq
::“ rτ | Mf,δrtx ::rτ | φus | Mf,δrtx :: Drrτs | φus
| Drrτs | Πpx :: Tq. T | tx :: T | φu
f pe’, e’q ď δ | f P F
“ tJ{0, K{0, (cid:32){1, _{2, ^{2, ñ{2u,
px P XPq
px P XRq
C
where f, δ, e’ P E’, and Q P t@,Du.
Relational types extend simple types by means of relational
reﬁnements of the shape tx :: T | φu. This is a reﬁnement
type that uses a relational assertion φ stating some rela-
tional property that the inhabitants of this type have to
satisfy. Relational assertions are ﬁrst order formulas over
f pe’, e’q ď δ asserting a bound
some basic predicates: ∆D
on a speciﬁc f -divergence, f P F asserting that f
is a
convex function meeting the requirements of Deﬁnition 3.6,
and e’ “ e’ and e’ ď e’ for the equality and inequal-
ity of relational expressions, respectively. Relational types
also reﬁnes the probability monad. This has now the shape
(cid:74)Γ $ return e : Mrτs(cid:75)θ “ 1(cid:74)e(cid:75)θ
(cid:74)Γ $ mlet x “ e1 in e2 : Mrσs(cid:75)θ “ d ÞÑ
(cid:74)Γ $ observe x ñ t in u : Mrτs(cid:75)θ “ d ÞÑ (cid:74)u(cid:75)θpdq ¨ p(cid:74)t(cid:75)θd
ptrueqq
p(cid:74)u(cid:75)θpgq ¨ p(cid:74)t(cid:75)θg
xptrueqqq
(cid:74)Γ $ ranpbernoullipeqq : MrBs(cid:75)θ “ d ÞÑ
(cid:74)Γ $ bernoullipeq : DrBs(cid:75)θ “ bernoullip(cid:74)e(cid:75)θq
p(cid:74)e1(cid:75)θpgq ¨(cid:74)e2(cid:75)θg
xpdqq
(cid:74)Γ $ infer e : Drτs(cid:75)θ “ AlgInf e
if d “ true
otherwise
ÿ
gP(cid:74)τ(cid:75)θ
#
x
ÿ
gP(cid:74)τ(cid:75)θ
(cid:74)e(cid:75)θ
1 ´(cid:74)e(cid:75)θ
Figure 3: Interpretation for some of PCFp expressions (selected rules).
Mf,δrtx :: T | φus, for T P trτ , Drrτsu, and it corresponds to
a polymonad [27] or parametric eﬀect monads [28] where f
and δ are parameters useful to reason about f -divergences.
Relational expressions can appear in relational reﬁnements
and in the parameters of the probabilistic monad, so the
usual arrow type constructor is replaced by the dependent
type constructor Πpx :: Tq. S.
Before introducing the typing rule of PrivInfer we need to
introduce some notation. A relational environment G is a
ﬁnite sequence of bindings px :: Tq such that each variable
x is never bound twice and only relational variables from
XR are bound. We write xG for the type of x in G. We will
denote by |¨| the type erasure from relational types to simple
types and its extension to environments. We will use instead
the notation }¨}, to describe the following map from relational
environments to environments xs}G} “ x|G| iﬀ x P dompGq,
where s P tŸ,Źu. For example, given a relational binding
px :: Tq, we have }px :: Tq} “ xŸ : |T|, xŹ : |T|.
We can now present our relational type system. PrivInfer
proves typing judgment of the form G $ e1 „ e2 :: T . We will
use Γ $ e :: T as a shorthand for Γ $ e „ e :: T . Several of
the typing rules of PrivInfer come from the system proposed
by Barthe et al. [6]. We report some of them in Figure 5.
We also extend the subtyping relation of Barthe et al. [6]
with the rule for monadic subtyping in Figure 4.
We present the rules that are speciﬁc to PrivInfer in Fig-
ure 5. The rules UnitM and BindM correspond to the unit and
the composition of the probabilistic polymonad. These are
similar to the usual rule for the unit and composition of mon-
ads but additionally they require the indices to well behave.
In particular pf1, f2q are required to be f3 composable to
guarantee that the composition is respected. The rules Infer
and Ran are similar to their simply typed version but they
also transfer the information on the f -divergence from the
indices to the reﬁnements and viceversa. The rule Observe
requires that the sub-expressions are well typed relationally
and it further requires the validity of the assertion:
}G} $ ∆fpobserve xŸ ñ eŸ in e
Ÿ, observe xŹ ñ eŹ in e
Źq ď δ
1
1
for the δ2 that can then be used as a bound for the f -
divergence in the conclusion. This assertion may be surpris-
ing at ﬁrst, since it doesn’t consider the bounds δ and δ1 for
the sub-expressions but instead requires to provide directly a
bound for the conclusion—it is not really compositional. The
reason for this presentation is that a generic bound in term
of δ and δ1 would be often too large to say something useful
In fact, estimating bounds on the
about the conclusion.
2
`
}G} $ δi : R
G $ T ĺ U
}G} $ fi P F
@θ. θ ( G, x :: T ñ(cid:74)f1 ď f2 ^ δ1 ď δ2 ă 8(cid:75)θ
G $ Mf1,δ1rTs ĺ Mf2,δ2rUs
S-M
Figure 4: Relational Subtyping (rule for monadic subtyping)
f -divergence of conditional distributions is a hard task and
often it is only expressed in term of prior perturbations [15].
So, instead we prefer to postpone the task to verify a bound
to the concrete application where a tighter bound can be
found with some calculation. We will see some uses of this
rule in the examples in § 6.
5.2 Relational Interpretation
We want now to give a relational interpretation of relational
types so that we can prove the soundness of the relational type
system of PrivInfer. Before doing this we need to introduce
an important component of our interpretation, the notion of
pf, δq-lifting of a relation, inspired from the relational lifting
of f -divergences by Barthe and Olmedo [2].
Deﬁnition 5.1 (pf, δq-Lifting of a relation Ψ). Let Ψ Ď T1ˆ
T2, let f be a convex function providing an f -divergence and
let δ P R`. Then, we have that µ1 P MrT1s and µ2 P MrT2s
are in the pf, δq-lifting of Ψ, denoted Lpf,δqpΨq iﬀ there exist
two distributions µL, µR P MrT1 ˆ T2s such that
1. µi pa, bq ą 0 implies pa, bq P Ψ, for i P tL, Ru,
2. π1 µL “ µ1 ^ π2 µR “ µ2, and
ř
3. ∆fpµL, µRq ď δ.
y µpx, yq and π2 µ “ λy.
ř
x µpx, yq.
where π1 µ “ λx.
We will call the distributions µL and µR the left and right
witnesses for the lifting, respectively.
This notion of lifting will be used to give a relational
interpretation of monadic types. We say that a valuation θ
validates a relational environment G, denoted θ ( G, if θ (
}G} and @x P dompGq, pxŸθ, xŹθq P(cid:76)xG(cid:77)θ. The relational
interpretation(cid:74)φ(cid:75)θ P tJ,Ku of assertions φ with respect to
a valuation θ ( Γ is an extension of the the one provided
in Barthe et al. [6]. In Figure 7 we provide the extensions
speciﬁc to PrivInfer. Notice that we interpret the assertion
f pe’
We give in Figure 6 the relational interpretation(cid:76)T(cid:77)θ of
∆D
a relational type T with respect to the valuation θ ( }G}.
2 q ď δ with the corresponding f -divergence.
1 , e’
UnitM
BindM
Observe
}G} $ f P F
}G} $ δ : R
`
G $ e :: T
G $ return e :: Mf,δrTs
Infer
pf1, f2q are f3-composable
G, x :: T1 $ e2 :: Mf2,δ2rT2s
G $ mlet x “ e1 in e2 :: Mf3,δ1`δ2rT2s
G $ e1 :: Mf1,δ1rT1s
G $ Mf2,δ2rT2s
G, x :rτ $ e
1
G $ e : Mf,δrtx ::rτ | xŸ “ xŹus
G $ inferpeq : tx :: Drrτs | ∆D
G $ e : tx :: Drrτs | ∆D
G $ ranpeq : Mf,δrtx ::rτ | xŸ “ xŹus
f pxŸ, xŹq ď δu
f pxŸ, xŹq ď δu
Ran
:: Mf,δ1rty :: B | yŸ “ yŹus
}G} $ ∆fpobserve xŸ ñ eŸ in e
Ÿ, observe xŹ ñ eŹ in e
Źq ď δ
1
1
2
G $ e :: Mf,δrty ::rτ | yŸ “ yŹus
:: Mf,δ2rty ::rτ | yŸ “ yŹus
G $ observe x ñ e in e
1
Figure 5: PrivInfer Relational Typing Rules
)
d1, d2 P(cid:74)rτ(cid:75)
!
(cid:74)φ(cid:75)θ
pd1, d2q P(cid:76)T(cid:77)θ
pd1, d2q P(cid:76)rτ(cid:77)θ
xŸ ÞÑ d1
pd1, d2q P(cid:76)tx :: T | φu(cid:77)θ
xŹ ÞÑ d2
f1, f2 P(cid:74)|T| Ñ |U|(cid:75)
!
@pd1, d2q P(cid:76)T(cid:77)θ.pf1pd1q, f2pd2qq P(cid:76)U(cid:77)θ
xŸ ÞÑ d1
pf1, f2q P(cid:76)Πpx :: Tq. U(cid:77)θ
xŹ ÞÑ d2
d1, d2 P(cid:74)Drrτs(cid:75)
pd1, d2q P(cid:76)Drrτs(cid:77)θ
µ1, µ2 P(cid:74)Mr|T|s(cid:75)
Lf,δp(cid:76)T(cid:77)θq µ1 µ2
pµ1, µ2q P(cid:76)Mf,δrTs(cid:77)θ
)
Figure 6: Relational interpretation of types
This corresponds to pairs of values in the standard interpre-
tation of PCFp expressions. To deﬁne this interpretation we
use both the interpretation of relational assertions given in
Figure 7 and the deﬁnition of lifting given in Deﬁnition 5.1.
The interpretation of relational assertions is used in the inter-
pretation of relational reﬁnement types, while the lifting is
used to provide interpretation to the probabilistic polymonad.
Notice that the relational interpretation of a type Drrτs is
of Drrτs. This can then be restricted by using relational
just the set of pairs of values in the standard interpretation
reﬁnement types. We can then prove that the relational re-
ﬁnement type system is sound with respect to the relational
interpretation of types.
Theorem 5.1 (Soundness). If G $ e1 „ e2 :: T , then for
every valuation θ |ù G we have p(cid:74)e1(cid:75)θ,(cid:74)e2(cid:75)θq P(cid:76)T(cid:77)θ.
The soundness theorem above give us a concrete way to
reason about f -divergences.
Corollary 5.1 (f -divergence). If $ e :: Mf,δrty :: τ | yŸ “ yŹus
then for every pµ1, µ2q P(cid:74)e(cid:75) we have ∆fpµ1, µ2q ď δ.
Moreover, thanks to the characterization of diﬀerential
privacy in terms of f -divergence given by Barthe and Olmedo
[2] we can reﬁne the previous result to show that PrivInfer
accurately models diﬀerential privacy.
Corollary 5.2 (Diﬀerential Privacy). If $ e :: tx :: σ |
Φu Ñ M-D,δty :: τ | yŸ “ yŹu then(cid:74)e(cid:75) is p, δq-diﬀerentially
private w.r.t. adjacency relation(cid:74)Φ(cid:75).
(cid:74)f P F(cid:75)θ “(cid:74)f(cid:75)θ P F