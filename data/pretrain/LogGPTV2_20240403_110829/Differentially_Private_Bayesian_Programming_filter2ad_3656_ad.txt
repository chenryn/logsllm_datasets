### Consideration of Programs with Well-Defined Semantics

We will focus on programs that have a well-defined semantics, excluding those where we observe events with zero probability. Additionally, we will restrict our inference algorithms to those that never fail. This can be simulated using the `Maybe` monad.

### Syntactic Constructions and Their Interpretations

Syntactic constructions are reflected in their interpretations. For example, in Figure 3, we provide the interpretation for the `bernoullipeq` distribution. The `ran` operator converts a symbolic distribution into an actual distribution. Its semantics is defined by cases based on the given symbolic distribution. In Figure 3, we show its interpretation for the `bernoullipeq` distribution, and similar cases apply to other symbolic distributions.

**Lemma 4.1.** If \( \Gamma \vdash e : \tau \) and \(\theta\) validates \(\Gamma\), then \(\llbracket e \rrbracket_\theta \in \llbracket \tau \rrbracket\).

The soundness of the semantics is established by the following:

### 5. Relational Type System

#### 5.1 Relational Typing

To reason about differential privacy and f-divergences, we will use a higher-order relational refinement type system, following the approach proposed by Barthe et al. [6].

We distinguish two sets of variables: relational variables \( X_R \) and plain variables \( X_P \). Each relational variable \( x \in X_R \) has a left instance \( x^L \) and a right instance \( x^R \). We write \( X' = X_R \cup X_P \).

The set of PrivInfer expressions \( E \) is the set of expressions defined over plain variables, i.e., expressions in PCFpp\(X_P\)). The set of PrivInfer relational expressions \( E' \) is the set of expressions defined over both plain and relational variables, i.e., expressions in PCFpp\(X'\)), where only non-relational variables can be bound.

The sets of relational types \( T = \{T, U, \ldots\} \) and assertions \( A = \{\varphi, \psi, \ldots\} \) are defined by the following grammars:
\[ T, U \in T \]
\[ \varphi, \psi \in A ::= Q (x : \tau). \varphi \mid Q (x :: T). \varphi \mid \Delta_D \mid e' = e' \mid e' \leq e' \mid C(\varphi_1, \ldots, \varphi_n) \]
\[ ::= r\tau | M_{f,\delta}[x :: r\tau | \varphi] \mid M_{f,\delta}[x :: D[r\tau] | \varphi] \mid D[r\tau] \mid \Pi(x :: T). T \mid t x :: T | \varphi u \]
\[ f(e', e') \leq \delta \mid f \in F \]
where \( f, \delta, e' \in E' \), and \( Q \in \{\forall, \exists\} \).

Relational types extend simple types by means of relational refinements of the form \( t x :: T | \varphi u \). This is a refinement type that uses a relational assertion \(\varphi\) stating some relational property that the inhabitants of this type must satisfy. Relational assertions are first-order formulas over \( f(e', e') \leq \delta \), asserting a bound on a specific f-divergence, \( f \in F \) asserting that \( f \) is a convex function meeting the requirements of Definition 3.6, and \( e' = e' \) and \( e' \leq e' \) for the equality and inequality of relational expressions, respectively. Relational types also refine the probability monad, which now has the shape \( M_{f,\delta}[x :: T | \varphi] \).

#### 5.2 Relational Interpretation

We aim to provide a relational interpretation of relational types to prove the soundness of the relational type system of PrivInfer. Before doing this, we need to introduce the notion of \((f, \delta)\)-lifting of a relation, inspired by the relational lifting of f-divergences by Barthe and Olmedo [2].

**Definition 5.1 ( \((f, \delta)\)-Lifting of a Relation \(\Psi\)).** Let \(\Psi \subseteq T_1 \times T_2\), let \( f \) be a convex function providing an f-divergence, and let \(\delta \in \mathbb{R}^+\). Then, \(\mu_1 \in M[T_1]\) and \(\mu_2 \in M[T_2]\) are in the \((f, \delta)\)-lifting of \(\Psi\), denoted \( L_{(f, \delta)}(\Psi) \), if there exist two distributions \(\mu_L, \mu_R \in M[T_1 \times T_2]\) such that:
1. \(\mu_i(a, b) > 0\) implies \((a, b) \in \Psi\), for \( i \in \{L, R\} \),
2. \(\pi_1 \mu_L = \mu_1 \land \pi_2 \mu_R = \mu_2\), and
3. \(\Delta_f(\mu_L, \mu_R) \leq \delta\).

where \(\pi_1 \mu = \lambda x. \sum_y \mu(x, y)\) and \(\pi_2 \mu = \lambda y. \sum_x \mu(x, y)\).

This notion of lifting is used to give a relational interpretation of monadic types. We say that a valuation \(\theta\) validates a relational environment \( G \), denoted \(\theta \models G\), if \(\theta \models }G}\) and \(\forall x \in \text{dom}(G), (x^L \theta, x^R \theta) \in \llbracket xG \rrbracket_\theta\). The relational interpretation \(\llbracket \varphi \rrbracket_\theta \in \{J, K\}\) of assertions \(\varphi\) with respect to a valuation \(\theta \models \Gamma\) is an extension of the one provided in Barthe et al. [6]. In Figure 7, we provide the extensions specific to PrivInfer. Notice that we interpret the assertion \( f(e'_1, e'_2) \leq \delta \) with the corresponding f-divergence.

In Figure 6, we give the relational interpretation \(\llbracket T \rrbracket_\theta\) of a relational type \( T \) with respect to the valuation \(\theta \models }G}\).

**Theorem 5.1 (Soundness).** If \( G \vdash e_1 \sim e_2 :: T \), then for every valuation \(\theta \models G\), we have \((\llbracket e_1 \rrbracket_\theta, \llbracket e_2 \rrbracket_\theta) \in \llbracket T \rrbracket_\theta\).

The soundness theorem provides a concrete way to reason about f-divergences.

**Corollary 5.1 (f-Divergence).** If \( \vdash e :: M_{f, \delta}[y :: \tau | y^L = y^R] \), then for every \((\mu_1, \mu_2) \in \llbracket e \rrbracket\), we have \(\Delta_f(\mu_1, \mu_2) \leq \delta\).

Moreover, thanks to the characterization of differential privacy in terms of f-divergence given by Barthe and Olmedo [2], we can refine the previous result to show that PrivInfer accurately models differential privacy.

**Corollary 5.2 (Differential Privacy).** If \( \vdash e :: t x :: \sigma | \Phi u \to M_{\epsilon - D, \delta}[y :: \tau | y^L = y^R] \), then \(\llbracket e \rrbracket\) is \((\epsilon, \delta)\)-differentially private w.r.t. adjacency relation \(\llbracket \Phi \rrbracket\).

\(\llbracket f \in F \rrbracket_\theta = \llbracket f \rrbracket_\theta \in F\)

### Figures

- **Figure 3:** Interpretation for some PCFp expressions (selected rules).
- **Figure 4:** Relational Subtyping (rule for monadic subtyping).
- **Figure 5:** PrivInfer Relational Typing Rules.
- **Figure 6:** Relational interpretation of types.
- **Figure 7:** Extensions specific to PrivInfer.