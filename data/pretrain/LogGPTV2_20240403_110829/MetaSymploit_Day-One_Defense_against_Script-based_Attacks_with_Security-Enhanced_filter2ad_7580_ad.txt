(1) Fine-grained execution tracing. This technique
traces the symbolic execution line-by-line in an attack
script. It keeps track of every method call. It also ex-
plores different paths when executing branches. We de-
velop it by enhancing a language feature called Debug
tracing function with Control Flow Graph (CFG).
Debug tracing function is a step-by-step execution
tracing facility used for debugging such as Ruby’s
set trace func (Python’s sys.settrace).
It
captures three major events, line, call, return. The line
event shows the number of the current executing line.
The call/return event shows the name of the method be-
ing called/returned. Every time an event happens, Debug
tracing function suspends the execution and calls a reg-
istered callback function for further event analysis.
We develop our callback function using the CFG of the
attack script. Since the CFG holds both the source code
and the control ﬂows, it offers rich semantics for ana-
lyzing the execution details when parsing every event.
When a line event happens, we locate the current line’s
source code in the CFG. Then we retrieve all call sites
in the current line, which will be matched with the fol-
lowing call/return events happening in this line. Partic-
ularly, this tracing mechanism can log behavioral API
calls when they are found in the call sites.
Our callback function also handles branches to explore
different paths. When the line event reaches a symbolic
branch, we evaluate the branch source code and consult
3The techniques can also build an engine to analyze Python-based
attack scripts, since Ruby and Python share many language features.
a constraint solver for both true and false branch con-
straints. If a solution exists, we concretize the symbolic
branch condition to guide the interpreter to the desired
branch (explained next). If both branches can be satis-
ﬁed, we fork the script execution process into two pro-
cesses to trace both branches. Otherwise, if no solution
is returned, we terminate the execution process. Partic-
ularly, if attack constraints are found, the callback func-
tion would perform constraint logging.
(2) Runtime symbolic variable manipulation. This
technique leverages the Runtime context binding lan-
guage feature to manipulate the runtime values of sym-
In particular, it inspects the values of
bolic variables.
attack payloads during composing.
It also concretizes
symbolic branch conditions to guide branch execution.
Runtime context binding can inspect and modify the
runtime states of the script, such as Ruby’s Binding
and Python’s inspect. It provides a context object that
binds the runtime scope of the current traced code. The
callback function can use this object to access all vari-
ables and methods in the scope of the traced code.
The ﬁrst use of context is to inspect the runtime value
of an attack payload when it is being composed. When a
variable is detected to be assigned by payload composing
APIs, the callback uses context to keep track of its value.
The callback then logs the inspected values together with
the payload composing APIs in the behavior log.
The second use of context is to guide symbolic branch
execution. Since the interpreter cannot move forward
with a symbolic condition, when the constraint solver re-
turns a solution, for each symbolic variable in the condi-
tion, we use context to temporarily replace the symbolic
value with the solved concrete value to guide the inter-
preter to the desired branch. Later when the line event
shows that the branch is taken, we recover them back to
their symbolic form. Recall the version==5 in Listing
1. Since version is symbolic value, we temporarily re-
place its value with 5 to explore one branch, and uses a
non-5 value for the other branch.
(3) Dynamic symbolic method wrapping.
In some
cases, the symbolic return values of method calls are not
associated with any variables, thus cannot be manipu-
lated using the second technique. To handle this, we
leverage the Dynamic method overriding language fea-
ture to dynamically wrap the traced method, associate its
return value with a temporary variable for manipulation.
Dynamic method overriding is a common feature in
Ruby and Python that methods can be runtimely over-
ridden and take effect immediately. Using this language
feature, we dynamically create a wrapper method and
override the original method right before the call event.
Meanwhile, we also preserve the original method, and
recover it right after the return event.
A more important use of the wrapping technique is to
USENIX Association  
22nd USENIX Security Symposium  73
concretize symbolic methods in branch conditions. If no
variable holds the symbolic return value of a method call
in a branch condition, to guide symbolic branch execu-
tion, we override the symbolic method with the wrapper
to return a solved concrete value. In practice some con-
straint solvers require the symbolic method calls to be
associated with variables to enable the solving.
Note that both the API extension and the knowledge
base are one-time system conﬁguration. Since Metas-
ploit components and their APIs are relatively stable for
compatibility with various attack scripts, once they are
collected and supported by MetaSymploit, newly dis-
tributed attack scripts that rely on these components can
be directly supported and automatically analyzed.
4.2 Adaptation for Metasploit
To analyze Metasploit attack scripts, we adapt the engine
and the six techniques in both SymExeLayer and SigGen
to work with the APIs provided by Metasploit and its
built-in components.
The current prototype is based on Metasploit version
4.4 (released in Aug 2012). We select the top 10 most
popular built-in components in Metasploit: Tcp, Udp,
Ftp, Http, Imap, Exe, Seh, Omelet, Egghunter,
Brute. The ﬁrst 5 are popular network protocol com-
ponents. The next 4 are used to attack Windows sys-
tems. Exe can generate exe ﬁle payloads. Seh can cre-
ate SEH-based attacks. Both Omelet and Egghunter
can compose staged payloads. The last Brute can cre-
ate bruteforce attacks. These components cover 548 real
attack scripts carried in Metasploit. By examining the
APIs provided by the launching platform and these com-
ponents of Metasploit, we perform three steps to adapt
the engine for SymExeLayer and SigGen.
First,
in the symbolic library, we apply symbolic
API extension to the environment-related APIs such as
tcp.get, ftp.login, http.read response,
and variant-payload-content-related APIs
such as
gen shellcode4.
rand text,
The library also replaces the output APIs such as
ftp.send cmd, http.send request with our
local-dumping APIs. When the script calls these APIs
during symbolic execution, SymExeLayer redirects the
calls to the symbolic-extended APIs.
make nops,
Second, to equip the symbolic execution tracer with
behavior & constraint
logging ability, we build a
knowledge base collecting behavioral APIs such as
http.fingerprint, gen egghunter and keep a
mapping between APIs and their behavior meaning for
pattern context deriving. We also keep a list of symbolic
labels for identifying attack constraints.
Third, based on the standards of the protocols and the
implementation of the built-in components, we add the
packet formats and common benign bytes of the ﬁve net-
work protocols into the knowledge base. For instance,
we develop speciﬁc parsers to parse payloads embedded
in HTTP headers and FTP commands.
4The listed API names are abbreviated due to space limits. Note that
Metasploit uses payload to represent shellcode. We use shellcode as
a more general term to avoid confusion with attack payloads.
5 Evaluation
We conduct our evaluation on an Intel Core i7 Quad
2.4GHz, 8GB memory, Ubuntu 12.10 machine. We run
MetaSymploit based on Metasploit 4.4, using the ofﬁ-
cial Ruby 1.9.3 interpreter. We evaluate our approach
from three perspectives: (1) the percentage of real-world
attack scripts that can be analyzed by MetaSymploit’s
symbolic execution; (2) the effectiveness of our auto-
matically generated signatures to defend against real-
world attacks; (3) the difference between our automat-
ically generated rules and ofﬁcial Snort rules.
5.1 Coverage Testing with Symbolic Exe-
cution Engine
We ﬁrst evaluate whether MetaSymploit can symboli-
cally execute various attack scripts. We use MetaSym-
ploit to analyze all 548 real attack scripts created with
the top 10 popular Metasploit components. As the result
shown in Table 1, 509 scripts (92.88%) are automatically
executed by MetaSymploit in the symbolic mode without
any manual modiﬁcation of the scripts. Different attack
conditions in the scripts are explored. The attack pay-
loads are captured and Snort rules are generated.
In terms of analysis cost, since MetaSymploit reuses
the launching platform of Metasploit on the ofﬁcial Ruby
interpreter, the symbolic execution has almost the same
speed as that Metasploit executes attack scripts nor-
mally (less than one minute on average). In fact, since
the environment-related APIs are symbolic-extended, the
time for real network communication is saved. Further-
more, signatures are generated in less than 10 seconds.
Among the remaining 39 scripts that MetaSymploit
cannot automatically deal with, we encounter ﬁve main
situations that deserve more discussion.
Loop with Symbolic Condition. We ﬁnd that 9 scripts
have conditional loops whose symbolic conditions can-
not be solved by constraint solvers, which may cause in-
ﬁnite looping. As a common problem in classical sym-
bolic execution, some previous approaches proposed us-
ing random concrete values to replace symbolic condi-
tions to execute loops [20]. However, in our case, do-
ing so may affect the precision of the payload contents.
Other approaches such as LESE [35] speciﬁcally handle
loops, which we plan to explore in future work.
74  22nd USENIX Security Symposium 
USENIX Association
Category
Automatically Executed
Symbolic Loop
Non-Symbolic-Extended API Call
Obfuscation & Encryption
Multi-threading
Bug in Scripts
Total Coverage
Num Percentage
509
92.88%
9
1.64%
12
2.19%
13
2.37%
3
0.55%
2
0.37%
Auto 92.88%
Require Manual Modiﬁcation
No
Avg 10 LOC/per script
Avg 3 LOC/per script
Not Supported
Not Supported
2 LOC in each script
All 96.90%
Table 1: The distribution of different situations in the symbolic execution of the 548 Metasploit attack scripts.
Currently, after manual analysis, we ﬁnd that there are
two cases of using the loops: byte-by-byte modifying a
symbolic string whose length is a symbolic integer, and
performing repeated attack steps in a bruteforce attack.
In the ﬁrst case, since the string length is not concrete,
the looping rounds cannot be decided. However, we ﬁnd
no matter how many rounds are, the looping result is still
a symbolic string. Therefore, we replace the loop code
that operates the symbolic string with a new symbolic
string to represent the looping result (10 LOC per script
on average), while propagating the symbolic label and
logging the loop information for further investigation.
In the second case, the Brute component provides
an API that checks whether the target is compromised or
not. It is typically used as a while loop condition. The
loop keeps attacking the target until the API returns that
the target is compromised. Since in our case the API
returns a symbolic value as the target status, to avoid in-
ﬁnite looping, we set a counter with an upper bound in
the extended version of this API, to control the looping
rounds. If there are payloads and logs captured inside the
loop, the differences between each round are analyzed to
identify the constant patterns.
Non-Symbolic-Extended API Call. Due to the time
limitations, other than the top 10 components, we have
not symbolically extended other APIs in Metasploit. We
detect 12 scripts that call the non-extended APIs related
to assembly translating and encoding the payloads. Since
very few APIs are involved, we decide to modify each of
them individually at this time, and extend the entire com-
ponents in future work. To handle these API calls, since
SymbolicString supports payload content process-
ing, when applicable to the concrete substrings, we allow
the APIs to operate on the concrete parts, while prevent-
ing them from using the symbolic substrings, which may
otherwise cause runtime errors. When the API operates
on a pure symbolic string with no concrete substrings, we
replace the API calls by creating new symbolic strings to
represent the results of the API calls (3 LOC per script