G
-
F
M
P
3
M
P
3
-
F
M
P
E
G
M
P
E
G
-
F
E
N
C
E
N
C
-
F
Figure 6: Characterization results using all 25 features and the results using the selected 6 features (marked with
a -F at the end of the category name) for each category.
ﬂows include a ﬂow of downloading a Postscript ﬁle
with embedded image or downloading a Microsoft
Word document.
It is easy to see that sustained ﬂows will occupy
the classiﬁer most of the time even though repeat-
edly characterizing them yields no additional infor-
mation. This is especially true for sustained static
ﬂows as the ﬂow content does not change at all. Even
for sustained dynamic ﬂows the content type change is
gradual enough to skip a few packets in the ﬂow. Pro-
posed scheduling identiﬁes sustained ﬂows (regardless
of dynamic or static) and throttles them from entering
the characterization component. This prevents dom-
inating ﬂows from using the classiﬁer repeatedly and
balances the use of expensive classiﬁcation across all
four types of ﬂows.
Scheduling Sustained Flows. Within the frame-
work of lossy counting we ﬁrst deﬁne sustained ﬂows
more formally. Given a threshold s, a ﬂow is consid-
ered sustained if it was above the threshold in the past
n buckets where n is a user speciﬁed parameter. Now
we describe the scheduling policy used in Nabs.
Given the deﬁnition for sustained ﬂows, the algo-
rithm to identify sustained ﬂows works as ﬂows: input
to the algorithm is the stream of output from the ﬂow
characterization component. For each element in the
output stream a table D is updated as in lossy count-
ing. In addition, if the corresponding entry satisﬁes
(bcurrent − ∆) ≥ n then the entry is removed from the
table and the flow-id is sent to the ﬂow collection
and throttling component. The throttling component
prevents packets corresponding to the ﬂow from en-
tering the ﬂow-table for a preset epoch k. This epoch
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:35 UTC from IEEE Xplore.  Restrictions apply. 
could be a time interval or a packet count. In our im-
plementation k = n hence throttling will prevent the
ﬂow from entering the ﬂow-table for next n buckets.
Flow-ids that have been throttled for the past k buck-
ets are then removed from the throttling component
which then allows the corresponding ﬂows to use the
classiﬁer. This cycle continues until either the ﬂow
falls below threshold s or it is ﬁnished.
Given that the ﬂow characterization is done multi-
ple times on a single ﬂow, it is possible to characterize
the content type mix in a ﬂow. For example, we can
state that a particular ﬂow is composed of “20% au-
dio, 45% video, and 35% compressed” content. We
call such an estimation ﬂow composition. Obviously
when the scheduler throttles ﬂows it is bound to aﬀect
the accuracy of ﬂow composition. Note, however, this
scheduling only aﬀects the ﬂow composition of sus-
tained dynamic ﬂows. Neither temporary ﬂows nor
sustained static ﬂows are aﬀected by the above throt-
tling because temporary ﬂows are not throttled at all
and content type of sustained static ﬂows does not
change hence ﬂow composition does not apply. In the
worst case, scheduling policy drops all packets of a
set of content types hence ﬂow compositions of these
types, as observed by the system and end user, are
zero. This happens when a content type begins every
n bucket and lasts for the next k buckets. In the best
case, packets from each content type will be dropped
proportional to their contribution to the ﬂow hence
the actual and observed ﬂow composition are identi-
cal. On average, however, the accuracy depends on
the ordering of packets in the ﬂow– which in turn de-
pends on network and application latency and routing
delays. In the next section we show that the schedul-
ing is still feasible and does not aﬀect the ﬂow com-
position accuracy much.
6 Deployment & Experiences
Now we summarize our experiences running the sys-
tem on a live network with hundreds of active hosts
for two weeks. Nabs was deployed at a traﬃc con-
centration point of our campus network to monitor
all TCP and UDP ﬂows. The OC3 link on average
carried 10.57MB/s and was utilized 55% of its capac-
ity. The system ran on a 3GHz Pentium IV with 1GB
of RAM equipped machine with Linux Kernel 2.4.25.
Flow characterization component was set to use 16KB
of data for characterizing content types. The garbage
collector in the ﬂow-table was set to remove ﬂows that
could not accumulate 16KB in 60 seconds. During the
two week monitoring period we observed Nabs pro-
cessing about 600 ﬂows per second on average. Flow
characterization on 16KB payload, including comput-
ing the 6 features on the payload and classifying the
content types using SVM, took 945µs. During the
monitoring period the system’s average main mem-
ory usage was 15MB and never exceeded 20MB.
6.1 Use Policy & Abuse Detection
Although the system can identify the content type of
any ﬂow to tag an event or set of events as abuse we
must ﬁrst deﬁne a use policy to detect abuses pre-
cisely. We summarize the results of observing Nabs
in the network during the two-week period.
Use Policy 1. Encrypted Content Encrypted
traﬃc is allowed only for the purposes of remote shell
and secure web transactions. No other form of en-
crypted traﬃc is allowed within the network or to
outside hosts from within the network.
Abuse: We found plenty of hosts in the network
being sources of encrypted traﬃc however most are
legitimate uses. Upon closer examination, we found
9 hosts on two subnets being sources of signiﬁcant
amount of encrypted traﬃc. Nmapping the hosts re-
veal them being part of Waste peer-to-peer network
which, encrypts connections between the nodes.
Use Policy 2. Multimedia Content Besides the
designated web servers, hosts within the network shall
not serve multimedia content.
Abuse: To locate the abusers of this policy we
queried the system for hosts emanating content types
MP3, MPEG, or JPEG. Among the many hosts, we
found 16 hosts of interest based on the amount of
multimedia traﬃc they serve. Further investigation
revealed them running proxy servers such as http-
proxy and ccftp-proxy, and contents emanate from
these proxies. We also found some machines run-
ning Internet Relay Chat servers. One of the hosts is
running QMQP server which, implements Quick Mail
Queuing Protocol, and used by Spammers for mail
relaying.
Use Policy 3. MP3 Trollers. Web trollers are
crawlers that targets web servers and ftp servers ex-
tracting speciﬁc contents from the servers, such as
images and MP3 ﬁles. This policy disallows the use
of any trollers against servers in the network.
Abuse: Designated web servers did not emanate
any MP3 or MPEG traﬃc therefore we believe the
trollers are useless against these servers.
The above results are very promising in that Nabs
is able to detect these abuses where ﬁrewalls and in-
trusion detection systems deployed in the network
failed.
6.2 Flow Composition
Finally, we wanted to determine the accuracy of ﬂow
composition observed by the system. For this ex-
periment, we used four content types, namely MP3,
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:35 UTC from IEEE Xplore.  Restrictions apply. 
MPEG, JPEG, and plain-text, and constructed ten
diﬀerent ﬂows with random permutations of these
types. Size of each ﬂow was 86MB. We then sent
the streams across the network and monitored it us-
ing Nabs. Table 6.2 shows the actual and observed
ﬂow composition. Observed composition is averaged
over all ten ﬂows.
Actual
Observed
Diﬀerence
Video
Text
Audio
Jpeg
24.83% 25.70% 24.41% 24.83%
27.46% 28.08% 19.75% 20.93%
2.63%
3.90%
2.38%
4.66%
Table 2: Actual and observed ﬂow composition of a
86MB ﬂow with four diﬀerent types of content.
Even though the ﬂow was only 86MB due to the
scheduler between the classiﬁer and ﬂow-table only
half of the ﬂow was examined by the classiﬁer and rest
is dropped by the scheduler to accommodate other
ﬂows on the network. On average, Nabs examined
only 47.52MB or 55.25% of the total ﬂow. As we
can see the results are promising in that they ac-
curately depict the ﬂow composition of a relatively
short-lived ﬂow. Note that the observed ﬂow compo-
sition does not add up to 100%. This is due to false
positives from the classiﬁer which sometimes, for ex-
ample, miss-classiﬁes JPEG as compressed (gzip or
zipped) content. We believe, Nabs will perform even
better on longer ﬂows.
6.3 Caveats of The System
We believe the following issues must be raised in the
context of ﬂow characterization for the sake of com-
pleteness and for motivating future research in this
area.
Pipelining. Connection pipelining is the process of
sending multiple requests/resources through a single
connection. Pipelining of connections may result in
various types of content interlaced in an application
depended manner. This could increase the false pos-
itives of the classiﬁer. However, we did not observe
applications using pipelining.
In [9] Radhakrishnan et. al. pro-
DataMasking.
pose a method to change the statistical properties of
encrypted data to that of non-encrypted content. We
are not clear on the practicality of such method. Data-
Masking, however, could be a potential threat to ﬂow
content characterization if it were feasible.
Compression. Zip/Gzip compressed content is of-
ten confused with other compressed content types
such as MP3, JPEG, and MPEG. We believe this is
due to the fact that compression is not perfect and
leaves traces of the statistical properties of the under-
lying data.
Privacy. We are not addressing the issue explicitly
but it is an important one to consider when imple-
menting the system. However, it can be easily incor-
porated into the system by means of proper autho-
rization mechanisms and monitoring policies.
6.4 Scaling Nabs
Vertical scaling of Nabs is achieved through feature
selection and throttling the ﬂows using lossy counting.
Nabs can also be scaled horizontally by deploying it
on a pool of machines. The challenge is dividing the
ﬂows such that we guarantee each ﬂow is handled by
one and only one machine and all ﬂows are handled
by the pool. A simple hash-based sampling can eﬀec-
tively schedule the ﬂows among the machines. Sup-
pose we hash the flow-id and each machine in the
ﬂow is responsible for a non-overlapping range in the
domain of the hash function, the scheduling works
as follows. For each packet, machines compute the
hash of flow-id. The packet is processed by the ma-
chine that is responsible for the range in which the
hash value fall while the other machines discard the
packet. This strategy ensures all ﬂows are processed
by the pool and only one machine process any given
ﬂow.
7 Related Work
Over the past few years signiﬁcant research has been
done to characterize network ﬂows. Network traﬃc
characteristics of various applications such as, web,
email, and multimedia streaming, have been studied
to support emerging network traﬃc trends for im-
proving the underlying protocols. For this purpose,
researchers have looked into various characteristics of
network traﬃc such as, size of packets, inter-packet
timings, round trip times, and transmission protocols.
Network security community have borrowed some of
these ideas and extended some others to improve the
security of networks by identifying malicious network
ﬂows, applications, or hosts. In this section we brieﬂy
discuss prior work on network traﬃc characterization
related to network security and refer the readers to [5]
for a survey on traﬃc characterization in general.
In [13] a method is presented that uses the neu-
ral network to learn the signature of common net-
work services and then monitor the network to detect
ﬂows that deviate from the norm. The authors use
the total number of bytes transferred as a single fea-
ture to distinguish between Telnet and FTP traﬃc on
networks. In [4], authors propose a method to iden-
tify well-known applications being tunneled through
unconventional ports. The proposed method uses a
decision tree algorithm to learn the statistical proper-
ties of various applications. The model learned is then
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:35 UTC from IEEE Xplore.  Restrictions apply. 
used to characterize the application types of network
ﬂows. Thanks to weak port bindings, port numbers
are not considered in learning the model of both of
these works.
A related problem to the above is tracing connec-
tion chains over multiple networks. Attackers often
obscure their identity and location by forming a con-
nection chain by logging into a set of compromised
systems before attacking a target. Tracing the at-
tack from the victim takes us only to the last link
in the chain but not to the location of the attacker.
In [12, 15], methods are proposed to trace intruders
who obscure their identity by logging through a chain
of multiple machines, known as stepping-stones. The
method proposed in [12] creates “thumb-prints” of
connections using packet content which can be com-
pared to determine whether two connections contain
the same content and are therefore likely to be part
of the same connection chain. However, the method
fails when the connections are encrypted. To address
the problem [15] proposes an algorithm that doesn’t
rely on traﬃc content, instead relies on packet sizes,
packet intervals, etc. to detect stepping stones.
8 Conclusion and Future Work
In this paper we introduced a system that charac-
terizes content types of ﬂows using only the payload.
We presented the design and implementation details
of a system which can be used for this purposes. We
proposed and analyzed two throttling mechanisms to
scale the system for deployment on large networks.
We also identiﬁed 6 statistical properties of payloads
that can characterize content types eﬀectively. The
proposed system was then used to detect abuses of
network resources on a live network over a period of
two weeks. The system performed well in detecting
many cases of abuses which were missed by the ﬁre-
wall and intrusion detection systems.
We are currently developing a query processor that
could integrate both continuous and instantaneous
queries seamlessly. We are also looking to improve
the accuracy of the classiﬁer on compressed contents.
Finally, we plan to design an active abuse detection
system that can automate the enforcement of use poli-
cies on large networks.
References
[3] James P. Early, Carla E. Brodley, and Catherine
Rosenberg. Behavioral authentication of server
ﬂows. In Nineteenth Annual Computer Security
Applications Conference, pages 46–55, Las Vegas,
Nevada, USA, December 2003.
[4] Sunita Kode, Jiten Maheswary, Mukta Nand-
wani, and Shilpa Suresh. Traﬃc characterization
for heterogeneous applications. In Technical Re-
port, May 2001.
[5] Gurmeet Singh Manku and Rajeev Motwani. Ap-
proximate frequency counts over data streams. In
Proceedings of the 28th VLDB Conference, Hong
Kong, China, November 2002.
[6] J. Mendel. Tutorial on higher-order statistics
(spectra) in signal processing and system theory:
Theoretical results and some applications. IEEE
Proceedings, 79:278–305, March 1991.
[7] S. Muthukrishnan.
streams:
Algorithms
applications.
http://www.cs.rutgers.edu/ muthu/ccmfun.pdf.
Data
and
[8] R. Radhakrishnan, K. Shanmugasundaram, and
N. Memon. Data masking: A secure-covert chan-
nel paradigm. St. Thomas, US Virgin Islands,
2002. IEEE Multimedia Signal Processing.
[9] P. Somol, P. Pudil, J. Novovicov, and P. Pa-
clk. Adaptive ﬂoating search methods in feature
selection. Pattern Recognition Letters, 20:1157–
1163, 1999.
[10] S. Staniford-Chen and L.T. Heberlein. Holding
intruders accountable on the internet. Oakland,
1995. Proceedings of the 1995 IEEE Symposium
on Security and Privacy.
[11] K. M. C. Tan and B. S. Collie. Detection and
classiﬁcation of TCP/IP network services.
In
Thirteenth Annual Computer Security Applica-
tions Conference, pages 99–107, San Diego, Cal-
ifornia, USA, December 1997.
[12] V. Vapnik. The nature of statistical learning the-
ory. Springer-Verlag, New York, 1995.
[13] Yin Zhang and Vern Paxson. Detecting stepping
stones. In Proceedings of the 9th USENIX Secu-
rity Symposium, Denver, Colorado, USA, August
2000.
[1] libpcap
packet
capture
http://www.tcpdump.org/.
library.
[2] Chih-Chung Chang
Lin.
vector
LIBSVM:
machines,
at
http://www.csie.ntu.edu.tw/~cjlin/libsvm.
and Chih-Jen
for
a
2001.
support
Software
available
library
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:38:35 UTC from IEEE Xplore.  Restrictions apply.