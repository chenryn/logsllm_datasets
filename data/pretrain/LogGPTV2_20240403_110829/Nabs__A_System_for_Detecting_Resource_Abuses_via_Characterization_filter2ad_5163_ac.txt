### Characterization of Network Flows and Scheduling Mechanisms

**Figure 6: Characterization Results**
- The figure shows the results of using all 25 features and the selected 6 features (marked with -F at the end of the category name) for each category.

**Example Flows:**
- Examples of sustained flows include downloading a PostScript file with embedded images or a Microsoft Word document.

**Sustained Flows and Classifier Usage:**
- Sustained flows, whether static or dynamic, can monopolize the classifier, even though repeated characterization provides no additional information. For static sustained flows, the content remains unchanged, and for dynamic sustained flows, the content changes gradually.
- The proposed scheduling mechanism identifies and throttles sustained flows, preventing them from repeatedly using the classifier and balancing the use of expensive classification across different flow types.

### Scheduling Sustained Flows

**Definition of Sustained Flows:**
- Within the framework of lossy counting, a flow is considered sustained if it exceeds a threshold \( s \) in the past \( n \) buckets, where \( n \) is a user-specified parameter.

**Algorithm for Identifying Sustained Flows:**
- The algorithm processes the output stream from the flow characterization component. For each element in the stream, a table \( D \) is updated as in lossy counting.
- If an entry satisfies \( (b_{\text{current}} - \Delta) \geq n \), it is removed from the table, and the flow ID is sent to the flow collection and throttling component.
- The throttling component prevents packets from entering the flow-table for a preset epoch \( k \), which can be a time interval or packet count. In our implementation, \( k = n \), so throttling prevents the flow from entering the flow-table for the next \( n \) buckets.
- Flow IDs that have been throttled for the past \( k \) buckets are then removed from the throttling component, allowing the corresponding flows to use the classifier again. This cycle continues until the flow falls below the threshold \( s \) or is finished.

### Impact on Flow Composition

**Flow Composition Estimation:**
- Multiple characterizations of a single flow allow for estimating the content type mix, such as "20% audio, 45% video, and 35% compressed" content.
- Throttling affects the accuracy of flow composition for sustained dynamic flows but not for temporary flows or sustained static flows.
- In the worst case, the scheduling policy may drop all packets of certain content types, resulting in zero observed flow composition for those types. In the best case, packets are dropped proportionally, maintaining the actual and observed flow composition.
- On average, the accuracy depends on the ordering of packets, influenced by network and application latency and routing delays.

### Deployment and Experiences

**System Deployment:**
- Nabs was deployed on a campus network to monitor TCP and UDP flows. The system ran on a 3GHz Pentium IV with 1GB of RAM and Linux Kernel 2.4.25.
- During the two-week monitoring period, Nabs processed about 600 flows per second on average, with flow characterization taking 945Âµs for 16KB of payload.

### Use Policies and Abuse Detection

**Use Policy 1: Encrypted Content**
- Only remote shell and secure web transactions are allowed. No other encrypted traffic is permitted.
- **Abuse:** Nine hosts on two subnets were found to be sources of significant encrypted traffic, identified as part of the Waste peer-to-peer network.

**Use Policy 2: Multimedia Content**
- Only designated web servers should serve multimedia content.
- **Abuse:** Sixteen hosts were found to be serving significant amounts of MP3, MPEG, or JPEG content, often through proxy servers and IRC servers.

**Use Policy 3: Web Trollers**
- Disallows the use of trollers against servers in the network.
- **Abuse:** No MP3 or MPEG traffic was detected from designated web servers, suggesting trollers were ineffective.

### Flow Composition Accuracy

**Experiment:**
- Ten different flows with random permutations of MP3, MPEG, JPEG, and plain-text content were constructed and monitored.
- The observed flow composition was compared to the actual composition, showing promising results despite only half of the flow being examined due to the scheduler.

### Caveats and Future Work

**Pipelining:**
- Connection pipelining can interlace various content types, increasing false positives. However, this was not observed in applications.

**Data Masking:**
- A method to change the statistical properties of encrypted data could potentially threaten flow content characterization.

**Compression:**
- Compressed content types like ZIP/GZIP can be confused with MP3, JPEG, and MPEG due to residual statistical properties.

**Privacy:**
- Proper authorization mechanisms and monitoring policies are needed to address privacy concerns.

**Scaling Nabs:**
- Vertical scaling is achieved through feature selection and flow throttling. Horizontal scaling can be achieved by deploying Nabs on a pool of machines, using hash-based sampling to ensure each flow is handled by one machine.

### Related Work

- Significant research has been done on network flow characterization, including methods using neural networks, decision trees, and tracing connection chains.
- Nabs builds on these ideas to improve network security by identifying malicious flows and enforcing use policies.

### Conclusion and Future Work

- Nabs effectively characterizes content types and detects abuses, outperforming firewalls and intrusion detection systems.
- Future work includes developing a query processor, improving classifier accuracy for compressed content, and designing an active abuse detection system.

### References

- [References listed here]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.