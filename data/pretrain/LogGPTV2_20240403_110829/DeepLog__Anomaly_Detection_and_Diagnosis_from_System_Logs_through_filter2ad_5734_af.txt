DeepLog, we know the time taken to build that instance is abnormal,
but we don’t know why. (cid:140)en, since the elapsed time between log
key 53 and its previous log key is too big, by investigating the
work(cid:131)ow model constructed by DeepLog, its previous key is 52:
“Creating image”, so we know that VM creation took longer time
than usual because the time to create image was too long. Further
investigation following this procedure may reveal that it was caused
by slow network speed from control node to compute node.
6 RELATED WORK
Primarily designed for recording notable events to ease debugging,
system event logs are abundantly informative and exist practically
on every computer system, making them a valuable resource to
track and investigate system status. However, since system logs are
largely composed of diverse, freeform text, analytics is challenging.
Numerous log mining tools have been designed for di(cid:130)erent sys-
tems. Many use rule-based approaches [7, 15, 28, 29, 31, 32, 40, 41],
which, though accurate, are limited to speci(cid:128)c application scenar-
ios and also require domain expertise. For example, Beehive [41]
a normal one, LogCluster [19] which clusters and organizes histori-
cal logs to help future problem identi(cid:128)cation, and Stitch [45] that
extracts di(cid:130)erent levels of identi(cid:128)ers from system logs and builds
a web interface for users to visually monitor the progress of each
session and locate performance problems. Note that they are for
diagnosis purposes once an anomaly has been detected, and cannot
be used for anomaly detection itself.
7 CONCLUSION
(cid:140)is paper presents DeepLog, a general-purpose framework for
online log anomaly detection and diagnosis using a deep neural
network based approach. DeepLog learns and encodes entire log
message including timestamp, log key, and parameter values. It
performs anomaly detection at per log entry level, rather than at
per session level as many previous methods are limited to. DeepLog
can separate out di(cid:130)erent tasks from a log (cid:128)le and construct a work-
(cid:131)ow model for each task using both deep learning (LSTM) and
classic mining (density clustering) approaches. (cid:140)is enables e(cid:130)ec-
tive anomaly diagnosis. By incorporating user feedback, DeepLog
supports online update/training to its LSTM models, hence is able
to incorporate and adapt to new execution pa(cid:138)erns. Extensive eval-
uation on large system logs have clearly demonstrated the superior
e(cid:130)ectiveness of DeepLog compared with previous methods.
Future work include but are not limited to incorporating other
types of RNNs (recurrent neural networks) into DeepLog to test
their e(cid:129)ciency, and integrating log data from di(cid:130)erent applications
and systems to perform more comprehensive system diagnosis (e.g.,
failure of a MySQL database may be caused by a disk failure as
re(cid:131)ected in a separate system log).
8 ACKNOWLEDGMENT
(cid:140)e authors appreciate the valuable comments provided by the
anonymous reviewers. Authors thank the support from NSF grants
1314945 and 1514520. Feifei Li is also supported in part by NSFC
grant 61729202. We wish to thank all members of the TCloud
project and the Flux group for helpful discussion and feedback,
especially Cai (Richard) Li, for his valuable input on BROP a(cid:138)ack.
REFERENCES
[1] VAST Challenge 2011. 2011. MC2 - Computer Networking Operations.
(2011). h(cid:138)p://hcil2.cs.umd.edu/newvarepository/VAST%20Challenge%202011/
challenges/MC2%20-%20Computer%20Networking%20Operations/ [Online; ac-
cessed 08-May-2017].
[2] Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Je(cid:130)rey
Dean, Ma(cid:138)hieu Devin, Sanjay Ghemawat, Geo(cid:130)rey Irving, Michael Isard, and
others. 2016. TensorFlow: A system for large-scale machine learning. In Proc.
USENIX Symposium on Operating Systems Design and Implementation (OSDI).
264–285.
[3] Yoshua Bengio, R´ejean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A
neural probabilistic language model. Journal of machine learning research 3, Feb
(2003), 1137–1155.
Ivan Beschastnikh, Yuriy Brun, Michael D Ernst, and Arvind Krishnamurthy.
2014. Inferring models of concurrent systems from logs of their behavior with
CSight. In Proc. International Conference on So(cid:135)ware Engineering (ICSE ). 468–479.
[5] Andrea Bi(cid:138)au, Adam Belay, Ali Mashtizadeh, David Mazi`eres, and Dan Boneh.
2014. Hacking blind. In Security and Privacy (SP), 2014 IEEE Symposium on. IEEE,
227–242.
[6] Franois Chollet. 2015. keras. h(cid:138)ps://github.com/fchollet/keras. (2015). [Online;
[4]
accessed 08-May-2017].
[7] Marcello Cinque, Domenico Cotroneo, and Antonio Pecchia. 2013. Event logs
for the analysis of so(cid:137)ware failures: A rule-based approach. IEEE Transactions
on So(cid:135)ware Engineering (TSE) (2013), 806–821.
Figure 11: OpenStack VM Creation work(cid:131)ow.
identi(cid:128)es potential security threats from logs by unsupervised clus-
tering of data-speci(cid:128)c features, and then manually labeling outliers.
Oprea [28] uses belief propagation to detect early-stage enterprise
infection from DNS logs. PerfAugur [32] is designed speci(cid:128)cally to
(cid:128)nd performance problems by mining service logs using special-
ized features such as predicate combinations. DeepLog is a general
approach that does not rely on any domain-speci(cid:128)c knowledge.
Other generic methods that use system logs for anomaly detec-
tion typically apply a two-step procedure. First, a log parser [9, 14,
16, 23, 36, 37] is used to parse log entries to structured forms, which
typically only contain “log keys” (or “message types”). Parameter
values and timestamps are discarded except for identi(cid:128)ers which
are used to separate and group log entries. (cid:140)en, anomaly detection
is performed on log key sequences. A typical way is to generate
a numeric vector for each session or time window, by counting
unique log keys or using more sophisticated approaches like TF-IDF.
(cid:140)e matrix comprising of these vectors is then amenable to matrix-
based unsupervised anomaly detection methods such as Principal
Component Analysis (PCA) [38, 39] and invariant mining (IM) [22].
Constructing such a matrix is o(cid:137)en an o(cid:132)ine process, and these
methods are not able to provide log-entry level anomaly detection
(rather, they can only operate at session level). We refer the reader
to [17] for an overview and comparison on these methods.
Supervised methods [17, 44] use normal and abnormal vectors to
train a binary classi(cid:128)er that detects future anomalies. A downside of
such methods is that unknown anomalies not in training data may
not be detected. Furthermore, anomalous data are hard to obtain
for training. We have shown in our evaluation that using only a
small portion of normal data to train, DeepLog can achieve online
anomaly detection with be(cid:138)er performance. Moreover, DeepLog
also uses timestamps and parameter values for anomaly detection
which are missing in previous work.
Work(cid:131)ow construction has been studied largely using log keys
extracted from o(cid:132)ine log (cid:128)les [4, 11, 21, 42] . It has been shown
that work(cid:131)ow o(cid:130)ers limited advantage for anomaly detection [11,
42]. Instead, a major utility of work(cid:131)ows is to aid system diagno-
sis [4, 21]. However, all past work assumes a log (cid:128)le to model only
contains repeated executions of one single task. In this paper, we
propose methods to automatically separate di(cid:130)erent tasks from log
(cid:128)les in order to build work(cid:131)ow models for di(cid:130)erent tasks.
Besides work(cid:131)ows, other systems that perform anomaly diag-
nosis using system logs include DISTALYZER [26] that diagnoses
system performance issues by comparing a problematic log against
44235253322551185457561844: instance: * Attempting claim: memory * disk * vcpus * CPU51: instance: * Claim successful23: instance: * GET * HTTP\/1.1" status: * len: * time: *52: instance: * Creating image53: instance: * VM Started (Lifecycle Event)32: instance: * VM Paused (Lifecycle Event)18: instance: * VM Resumed (Lifecycle Event).......56: instance: * Took * seconds to build instance[13]
[8] Andrew M Dai and (cid:139)oc V Le. 2015. Semi-supervised sequence learning. In Proc.
[9] Min Du and Feifei Li. 2016. Spell: Streaming Parsing of System Event Logs. In
Neural Information Processing Systems Conference (NIPS). 3079–3087.
Proc. IEEE International Conference on Data Mining (ICDM). 859–864.
[10] Min Du and Feifei Li. 2017. ATOM: E(cid:129)cient Tracking, Monitoring, and Orches-
tration of Cloud Resources. IEEE Transactions on Parallel and Distributed Systems
(2017).
[11] Qiang Fu, Jian-Guang Lou, Yi Wang, and Jiang Li. 2009. Execution anomaly
detection in distributed systems through unstructured log analysis. In Proc. IEEE
International Conference on Data Mining (ICDM). 149–158.
[12] Yoav Goldberg. 2016. A primer on neural network models for natural language
processing. Journal of Arti(cid:128)cial Intelligence Research 57 (2016), 345–420.
Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep Learning. MIT
Press. h(cid:138)p://www.deeplearningbook.org.
[14] Hossein Hamooni, Biplob Debnath, Jianwu Xu, Hui Zhang, Guofei Jiang, and
Abdullah Mueen. 2016. LogMine: Fast Pa(cid:138)ern Recognition for Log Analytics. In
Proc. Conference on Information and Knowledge Management (CIKM). 1573–1582.
[15] Stephen E Hansen and E Todd Atkins. 1993. Automated System Monitoring
and Noti(cid:128)cation with Swatch.. In Proc. Large Installation System Administration
Conference (LISA). 145–152.
[16] Pinjia He, Jieming Zhu, Shilin He, Jian Li, and Michael R Lyu. 2016. An evaluation
study on log parsing and its use in log mining. In Proc. International Conference
on Dependable Systems and Networks (DSN). 654–661.
[17] Shilin He, Jieming Zhu, Pinjia He, and Michael R Lyu. 2016. Experience Report:
System Log Analysis for Anomaly Detection. In Proc. International Symposium
on So(cid:135)ware Reliability Engineering (ISSRE). 207–218.
[18] Sepp Hochreiter and J¨urgen Schmidhuber. 1997. Long short-term memory. Neural
computation (1997), 1735–1780.
[19] Qingwei Lin, Hongyu Zhang, Jian-Guang Lou, Yu Zhang, and Xuewei Chen.
2016. Log clustering based problem identi(cid:128)cation for online service systems. In
Proc. International Conference on So(cid:135)ware Engineering (ICSE ). 102–111.
[20] Chaochun Liu, Huan Sun, Nan Du, Shulong Tan, Hongliang Fei, Wei Fan, Tao
Yang, Hao Wu, Yaliang Li, and Chenwei Zhang. 2016. Augmented LSTM Frame-
work to Construct Medical Self-diagnosis Android. In Proc. IEEE International
Conference on Data Mining (ICDM). 251–260.
Jian-Guang Lou, Qiang Fu, Shengqi Yang, Jiang Li, and Bin Wu. 2010. Mining
program work(cid:131)ow from interleaved traces. In Proc. ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining (SIGKDD).
Jian-Guang Lou, Qiang Fu, Shengqi Yang, Ye Xu, and Jiang Li. 2010. Mining
Invariants from Console Logs for System Problem Detection.. In Proc. USENIX
Annual Technical Conference (ATC). 231–244.
[23] Adetokunbo AO Makanju, A Nur Zincir-Heywood, and Evangelos E Milios.
2009. Clustering event logs using iterative partitioning. In Proc. ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining (SIGKDD).
1255–1264.
[24] Christopher D Manning and Hinrich Sch¨utze. 1999. Foundations of statistical
natural language processing. MIT Press.
[25] Tomas Mikolov, Martin Kara(cid:128)´at, Lukas Burget, Jan Cernock`y, and Sanjeev Khu-
danpur. 2010. Recurrent neural network based language model.. In Interspeech,
Vol. 2. 3.
[26] Karthik Nagaraj, Charles Killian, and Jennifer Neville. 2012. Structured compara-
tive analysis of systems logs to diagnose performance problems. In Proc. USENIX
Symposium on Networked Systems Design and Implementation (NSDI). 26–26.
[27] Christopher Olah. 2015. Understanding LSTM Networks. (2015). h(cid:138)p://colah.
github.io/posts/2015-08-Understanding-LSTMs [Online; accessed 16-May-2017].
[28] Alina Oprea, Zhou Li, Ting-Fang Yen, Sang H Chin, and Sumayah Alrwais. 2015.
Detection of early-stage enterprise infection by mining large-scale log data. In
[21]
[22]
[31]
[35]
[29]
Proc. International Conference on Dependable Systems and Networks (DSN). 45–56.
James E Prewe(cid:138). 2003. Analyzing cluster log (cid:128)les using Logsurfer. In Proc. Annual
Conference on Linux Clusters.
[30] Robert Ricci, Eric Eide, and (cid:140)e CloudLab Team. 2014. Introducing CloudLab:
Scienti(cid:128)c Infrastructure for Advancing Cloud Architectures and Applications.
USENIX ;login: 39, 6 (Dec. 2014). h(cid:138)ps://www.usenix.org/publications/login/
dec14/ricci
John P Rouillard. 2004. Real-time Log File Analysis Using the Simple Event
Correlator (SEC).. In Proc. Large Installation System Administration Conference
(LISA). 133–150.
[32] Sudip Roy, Arnd Christian K¨onig, Igor Dvorkin, and Manish Kumar. 2015. Per-
faugur: Robust diagnostics for performance anomalies in cloud services. In Proc.
IEEE International Conference on Data Engineering (ICDE). IEEE, 1167–1178.
[33] Elastic Stack. 2017. (cid:140)e Open Source Elastic Stack. (2017). h(cid:138)ps://www.elastic.
co/products [Online; accessed 16-May-2017].
[34] Martin Sundermeyer, Ralf Schl¨uter, and Hermann Ney. 2012. LSTM Neural
Networks for Language Modeling.. In Interspeech. 194–197.
Ilya Sutskever, Oriol Vinyals, and (cid:139)oc V Le. 2014. Sequence to sequence learning
with neural networks. In Proc. Neural Information Processing Systems Conference
(NIPS). 3104–3112.
[36] Liang Tang and Tao Li. 2010. LogTree: A framework for generating system
events from raw textual logs. In Proc. IEEE International Conference on Data
Mining (ICDM). 491–500.
[37] Liang Tang, Tao Li, and Chang-Shing Perng. 2011. LogSig: Generating system
events from raw textual logs. In Proc. Conference on Information and Knowledge
Management (CIKM). 785–794.
[38] Wei Xu, Ling Huang, Armando Fox, David Pa(cid:138)erson, and Michael Jordan. 2009.
Online system problem detection by mining pa(cid:138)erns of console logs. In Proc.
IEEE International Conference on Data Mining (ICDM). 588–597.
[39] Wei Xu, Ling Huang, Armando Fox, David Pa(cid:138)erson, and Michael I Jordan. 2009.
Detecting large-scale system problems by mining console logs. In Proc. ACM
Symposium on Operating Systems Principles (SOSP). 117–132.
[40] Kenji Yamanishi and Yuko Maruyama. 2015. Dynamic syslog mining for network
failure monitoring. In Proc. ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining (SIGKDD). 499–508.
[41] Ting-Fang Yen, Alina Oprea, Kaan Onarlioglu, Todd Leetham, William Robertson,
Ari Juels, and Engin Kirda. 2013. Beehive: Large-scale log analysis for detecting
suspicious activity in enterprise networks. In Proc. International Conference on
Dependable Systems and Networks (ACSAC). 199–208.
[42] Xiao Yu, Pallavi Joshi, Jianwu Xu, Guoliang Jin, Hui Zhang, and Guofei Jiang. 2016.
CloudSeer: Work(cid:131)ow Monitoring of Cloud Infrastructures via Interleaved Logs.
In Proc. ACM International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS). 489–502.
[43] Ding Yuan, Haohui Mai, Weiwei Xiong, Lin Tan, Yuanyuan Zhou, and Shankar
Pasupathy. 2010. SherLog: error diagnosis by connecting clues from run-time
logs. In ACM SIGARCH computer architecture news. ACM, 143–154.
[44] Ke Zhang, Jianwu Xu, Martin Renqiang Min, Guofei Jiang, Konstantinos Pelechri-
nis, and Hui Zhang. 2016. Automated IT system failure prediction: A deep learn-
ing approach. In Proc. IEEE International Conference on Big Data (IEEE BigData).
1291–1300.
[45] Xu Zhao, Kirk Rodrigues, Yu Luo, Ding Yuan, and Michael Stumm. 2016. Non-
intrusive performance pro(cid:128)ling for entire so(cid:137)ware stacks based on the (cid:131)ow
reconstruction principle. In Proc. USENIX Symposium on Operating Systems Design
and Implementation (OSDI). 603–618.