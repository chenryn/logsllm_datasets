title:NodeSentry: least-privilege library integration for server-side JavaScript
author:Willem De Groef and
Fabio Massacci and
Frank Piessens
NodeSentry: Least-privilege Library Integration for
Server-Side JavaScript
Willem De Groef
iMinds–DistriNet
KU Leuven, Belgium
PI:EMAIL
Fabio Massacci
University of Trento
PI:EMAIL
Frank Piessens
iMinds–DistriNet
KU Leuven, Belgium
PI:EMAIL
ABSTRACT
Node.js is a popular JavaScript server-side framework with an
eﬃcient runtime for cloud-based event-driven architectures.
Its strength is the presence of thousands of third-party
libraries which allow developers to quickly build and deploy
applications. These very libraries are a source of security
threats as a vulnerability in one library can (and in some
cases did) compromise one’s entire server.
In order to support the least-privilege integration of li-
braries, we developed NodeSentry, the ﬁrst security archi-
tecture for server-side JavaScript. Our policy enforcement
infrastructure supports an easy deployment of web-hardening
techniques and access control policies on interactions between
libraries and their environment, including any dependent
library.
We discuss the implementation of NodeSentry, and
present its practical evaluation. For hundreds of concurrent
clients, NodeSentry has the same capacity and throughput
as plain Node.js. Only on a large scale, when Node.js
itself yields to a heavy load, NodeSentry shows a limited
overhead.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection; H.3.5 [Information
Storage and Retrieval]: Web-based services
Keywords
Web security, JavaScript
1.
INTRODUCTION
Services oﬀered on the web have a standard conceptual
architecture: a client (or tenant) accesses a web application
which talks to one or more databases [8]. In order to serve
multiple clients, the traditional approach (represented by e.g.,
Apache and IIS) has been to duplicate the entire path for each
client at the process level. In order to cope with increasing
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from Permissions@acm.org.
ACSAC ’14 December 08 - 12 2014, New Orleans, LA, USA
ACM 978-1-4503-3005-3/14/12 ...$15.00.
http://dx.doi.org/10.1145/2664243.2664276
demands, modern services (e.g., Salesforce, SAP-ByDesign)
have evolved to multi-tenancy event-driven architecture:
diﬀerent tenants access the same pipe which takes care of
the diﬀerent events by an event-driven program [41].
The major reason behind the success of event-driven pro-
grams is that they oﬀer developers a much ﬁner control
(and therefore better performance) than switching between
application processes [41, 17]. Among the various event-
driven programming languages, Node.js is a widely successful
platform that combines the popular JavaScript language
with an eﬃcient runtime tailored for a cloud-based event
architecture [34].
JavaScript has many advantages for web development [14].
It is the de facto dominant language for client-side appli-
cations and it oﬀers the ﬂexibility of dynamic languages.
In particular it allows the easy combination or mash-up of
content and libraries from disparate third parties. Such
ﬂexibility comes at a price of signiﬁcant security problems
[26, 33], and researchers have proposed a number of solutions
to contain them: from sandboxing (e.g., Google’s Caja or [35,
2]) and information ﬂow control [9, 10] to instrumenting the
client with a number of policies [30], or trying to guarantee
control-ﬂow integrity at a web-ﬁrewall level [6]. Bielova
presents a good recent survey on JavaScript security policies
and their enforcement mechanism within a web browser [4].
These proposals are appropriate for client-side JavaScript
but cannot be lifted to server-side code. At ﬁrst, they assume
that the client is not running with high-privileges; second
they command a signiﬁcant overhead acceptable at client
side but not at server side. For example, Meyerovich’s et
al., [30] report some of the best micro-benchmarks for client
side JavaScript and still report an overhead between 24% to
300% of the raw time.
Security problems are magniﬁed at server side: applications
run without sandboxing and serve a large number of clients
simultaneously; server processes must handle load without
interruptions for extended periods of time. Any corruption
of the global state, whether unintentional or induced by
an attacker, can be disastrous. Unfortunately, JavaScript
features make it easy to slip and introduce security vulner-
abilities which may allow a diversion of the control ﬂow or
even complete server poisoning. Hence, developers should be
cautious when developing server applications in JavaScript,
yet the current trend is to build up one’s application by
loading (dynamically) a large number of third-party libraries.
Figure 2 shows the libraries integrated in one of the most
popular web application servers based on Node.js. Verifying
such a massive amount of third-party code, especially in a
(cid:23)(cid:23)(cid:25)
language as dynamic and ﬂexible as JavaScript, is close to
impossible [43, §6].
How do we combine the ﬂexibility of loading third-party
libraries from a vibrant ecosystem with strong security guar-
antees at an acceptable performance price? There is essen-
tially no academic work addressing the problem of server-side
JavaScript security. Our paper targets this gap.
1.1 Contributions
This paper proposes a solution to the problem of least-
privilege integration of libraries with the following contribu-
tions:
1. NodeSentry, a novel server-side JavaScript security
architecture;
2. Policy infrastructure that allows to subsume and com-
bine common web-hardening techniques and measures,
common and custom access control policies on interac-
tions between libraries and their environment, including
any dependent library;
3. Description of the key features of NodeSentry’s im-
plementation and its policy infrastructure in Node.js;
4. Practical evaluation of the performance of our solution.
In summary we show that for hundreds of concurrent
clients NodeSentry is essentially close to its theoretical
optimum, between 250-500 concurrent clients NodeSentry
exhibits an increasing drop in capacity and after 500 move
in synch with Node.js’s own drop in performance reaching
50% of the theoretical optimum (while Node.js is at 60%).
The rest of this paper is structured as follows. Section 2
sketches the necessary background on Node.js and the se-
curity problems of its ecosystem of third-party libraries.
Section 3 describes the exact threat model and gives a general
overview of our solution, called NodeSentry. Section 4
discusses how NodeSentry can be used in practice and
how it protects against real-life attacks. In Section 5, we
exemplify several real-life policies and Section 6 gives insight
into the implementation. Section 7 discusses the quantitative
evaluation of the performance. Finally, Section 8 discusses
related work, and Section 9 summarizes the contributions.
2. BACKGROUND ON Node.js LIBRARIES
Node.js by itself only provides core system functionality
like e.g., accessing the ﬁle system or network communication.
Developers that want to build applications must therefor
often rely on third-party libraries. They are distributed as
packages, structured according to the CommonJS package
format and installable via the de facto standard "npm" pack-
age manager (by itself a JavaScript package). The oﬃcial
package registry contains more than 70 thousand packages
and has more then 290 million downloads each month. Such
libraries are statically or dynamically loaded in order to
provide the corresponding services.
Node.js module loading system is very easy to use. Via
the built-in require function, modules living within the base
system, in a separate ﬁle or directory, can be included in the
application. The loading works by reading the JavaScript
code (from memory or from disk), executing that code in
its own name space and returning an exports object, which
acts as the public interface for external code. On line 2 of
1
2
3
4
5
var mime = require ('mime ')
var path = require ('path ')
var fs;
try { fs = require (" graceful -fs") }
catch (e) { fs = require ('fs ') }
Figure 1: Code excerpt that shows how diﬀerent sys-
tem functionalities are exposed within the Node.js
environment by requiring speciﬁc libraries.
Figure 1, the variable path will be an object with several
properties including path.sep that represents the separator
character or the function path.dirname that returns the
directory name of a given ﬁle path.
Libraries can also be dynamically loaded at any place in
a program. For example on line 4, the program ﬁrst tries
to load the "graceful-fs" library. If this load fails, e.g.,
because it is not installed, the program falls back into loading
the original system library "fs" (line 5). In this example
constant string are provided to the require function but
this is not necessary. A developer can deﬁne a variable var
lib=’fs’ and later on just call a require(lib) function
where lib is dynamically evaluated.
The resulting ecosystem is such that almost all applications
are composed of a large numbers of libraries which recursively
call other libraries. The most popular packages can include
hundreds of libraries: "jade", "grunt" and "mongoose"
make up for more than 200 included libraries each (directly
or recursively); "express", a popular web package includes
138, whereas "socket.io" can be unrolled to 160 libraries.
Figure 2 shows a bird’s eye view of the library used by
the "npm-www" JavaScript package maintainer. One of the
single nodes of this package tree, is the sub library "st" (the
fourth node from the left) which is developed speciﬁcally to
manage static ﬁles hosting for the backend of the web site 1.
As you can see, the "st" library further relies on access to
the "http" and "url" package to process URLs and on the
"fs" package to access the ﬁle system.
The quote below from a blog post of a Node.js devel-
oper clearly explains the sharing principles of the Node.js
ecosystem2:
I’m working on my own project, and was looking
for a good static serving library.
I found the
best one, but sadly it was melded tightly to the
npm-www project... glad to see it extracted and
modularized!
Unfortunately, the resulting "st" turned out to be vul-
nerable to a directory traversal bug3 which allowed it to
serve essentially all ﬁles on the server, and thus leading to a
potential massive compromise of all activities.
How can one check libraries for potential vulnerabilities?
Server-side JavaScript code is not subject to changes as client-
side code, so one may hope that static analysis might work.
1http://blog.npmjs.org/post/80277229932/
newly-paranoid-maintainers
2https://github.com/isaacs/st/issues/3
3https://nodesecurity.io/advisories/st_directory_traversal
&
http://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2014-3744
(cid:23)(cid:23)(cid:26)
npm-user-validate
routes
sanitizer
st
domain
touch
replicate
redsess
comma-it
glob
marked
npmconf
nib
moment
npm-registry-client
mailcomposer
simplesmtp
csrf-lite
npm
couch-login
emcee
ejs
cookies
error-page
once
nopt
osenv
inherits
conﬁg-chain
redis
minimatch
cluster-master
keygrip
canvas
stylus
semver
npmlog
mkdirp
slide
retry
chownr
rimraf
templar
stream
mimelib-noiconv
rai
dns
bunyan
request
gravatar
graceful-fs
canonical-host
async-cache
hardhttps
http
ini
proto-list
node-msgpack
bison
colors
underscore
metrics
hiredis
sys
sigmund
cluster
repl
path
net
debug
cssom
iconv
starttls
os
util
events
assert
ben
crypto
cookie-jar
form-data
forever-agent
json-stringify-safe
tunnel-agent
mime
node-uuid
http-signature
aws-sign
hawk
oauth-sign
qs
nodeunit
querystring
constants
url
fs
lru-cache
tls
https
npm-www
nodemailer
Figure 2: The code that runs http://npmjs.org, which is a Node.js package itself (top image), loads a large
number of third parties libraries (which may use further libraries). The fourth node from left is the "st"
library which further uses additional libraries (bottom image). Static veriﬁcation is close to impossible.
Unfortunately, the dynamic functionalities and the usage of
exceptions alone make static analysis of JavaScript packages
extremely diﬃcult: only a handful of frameworks for static
analysis can deal with exceptions and dynamic calls [18,
16]. Further, the large quantity of libraries to be considered
(and modeled) is another major hurdle. For example JAM
requires modeling such dependencies in Prolog [15]. Run-
time monitoring seems the only alternative if it can scale up
to hundreds or thousands of concurrent requests. For client-
side JavaScript, for one client, an eﬀective implementation
like ConScript already tallies a minimum 25% up to 300%
overhead.
3. THREAT MODEL AND SOLUTION
The server-side scenario, discussed earlier, assumes that
libraries are actually executed on the server with server priv-
ileges. Hence, we assume non-malicious libraries, although
potentially vulnerable and exploitable (semi-trusted), as for
example the "st" library. They might end up using malicious
objects or doing something they were not intended to do.
The purpose of our security model is to shield the potential