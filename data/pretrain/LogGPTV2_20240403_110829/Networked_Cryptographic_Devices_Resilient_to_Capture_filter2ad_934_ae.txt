as described  above may  not  be able to  simulate properly. 
Thus we  show that  either F  succeeds (in a way  not inher- 
ently  possible)  in  a  simulation  where  the  encryptions are 
of  strings of zeros, and thus we can construct a forger F* 
that breaks the underlying RSA signature scheme, or F does 
not succeed  (in a way  not inherently possible)  in  that sim- 
ulation, and thus it must be able to distinguish  the true en- 
cryptions from  the  zeroed encryptions.  Then we  can con- 
struct  an  attacker  .4 that  breaks the underlying  encryption 
scheme. In addition, we note that the device-compromising 
forgers for which we prove this result are even stronger than 
allowed in  Section 3: after capturing dvc, the forger is per- 
mitted to cause dvc to initiate the S-RSA protocol on ames- 
sage of the forger's choice, with dvc using the correct pass- 
word  TO  even if the forger docs not know ?r0.  This models 
a forger that may be able to capture the static data from the 
device  without  capturing the device itself, i.e., without  the 
knowledge of the user. 
For  proving  security  against  all  types  of  forgers,  one 
must  assume that  both  h and f  behave  as random oracles. 
However, for certain types of forgers, weaker hash function 
properties suffice.'  For proving security against a forger in 
ADV({dvc}), we make  no requirement on the  f  function, 
and  we  only  require h to have  a  negligible probability  of 
collisions over the  dictionary D. If  1231 were polynomial 
in  K ,  then  it  would  suffice for h to be  a collision resistant 
hash function. If  ID1 were super-polynomial, that property 
would  not  suffice.  However, it  would  suffice  for  h to be 
a  permutation.3  For  proving  security  against  a  forger  in 
ADV({svr, no}),  we  make no  requirement on  the  h func- 
tion,  and  it  would  suffice  for  { f v }  to be a pseudorandom 
function family.  For  proving  security  against a  forger in 
ADV({dvc, T O } ) ,   we make no requirement on either h or f .  
In the theorems below, we use ''x" to indicate equality to 
within negligible factors. Moreover, in our simulations, the 
forger F  is run at most once, and so the times of our sim- 
ulations are straightforward and omitted from our theorem 
statements. 
Theorem 6.1  Let  { fu}  be a pseudorandomjiinction fam- 
ily.  If a  y p e  ADv({svr, n o } )  forger  (Q, €)-breaks the  S- 
RSA[€, D] scheme, then there exists a forger that (qdvc,  E ' ) -  
breaks the underljing RSA signature scheme with E'  M E .  
Proof  Given  F  E  ADV({svr,no})  that  (Q,~)-breaks the 
S-RSA[&, D] scheme, we construct a forger F* for the un- 
derlying  RSA  signature scheme.  F* is  given  public  key 
  for the RSA  signature scheme and  simulates the 
S-RSA system for F ,  so that any forgery constructed by F 
will be a forgery in the underlying RSA signature scheme. 
Simulation: F* gives   to F  as the device's pub- 
lic signature key.  Then F* generates the  server's key  pair 
(plcsvr, skSvr), and gives  that  to  F .   Next F* generates the 
user  password no  +-R  V and gives  that  to F .  Finally  F* 
generates    for  the  ticket  r  in  the  normal 
way, using  random t ,  w E  (0, l}", except that  dp  is drawn 
randomly from Zp,. 
F* responds to  svr queries as in  the  real  protocol.  F* 
responds to dvc start(m) queries by querying the signature 
oracle to get U =  and then responding as in the real 
protocol using that r value.  F* responds to a dvc finish(q) 
query corresponding to a start(m) query by computing v = 
@ p  (where p  was  computed in  the start(m) query) and 
checking that v - N  
If  this is false, F* 
has dvc abort.  Otherwise, F'  returns the 0 returned from 
the signature oracle query in the start query.  F* responds 
to a getVals query to the disable oracle by returning t ,  T. 
Analysis:  Let S-RSA'  be the  S-RSA protocol with  fu 
replaced with a perfectly random function, and let E"  be the 
(encode(m, T )
) ~ ~ .
2Minimizing  reliance  on  the  random  oracle  model  is  generally  de- 
sirable,  since  random  oracles  are  not  a  standard  cryptographic  assump- 
tion  [ 121. 
3Also, certain  weaker properties  for h would lead to provable security, 
but with weaker bounds  in the theorem. 
22 
probability  that F  produces a forgery  when run against S- 
RSA'.  By  the pseudorandomness of  f ,  E"  x E .  Now  let 
E'  be  the  probability  that  F  forges in  the  simulation, and 
hence the probability  that F* forges in the underlying RSA 
signature scheme.  One can  see that  the  simulation above 
is statistically  indistinguishable from S-RSA'  to F ,  and so 
E'  x E/'  x E. 
0 
If  a 
Theorem6.2  Let  h  and  f  be  random  oracles. 
type ADv( {dvc, svr}) forger (?j,  €)-breaks the S-RSA[€, D] 
scheme, then there exists a forger F* that (qdvc, €')-breaks 
the underlying RSA signature scheme with E'  M E  - - 
Q h f q f  
IDI  . 
Proof  Given  F  E  ADv({dvc, svr})  that  (?j,  €)-breaks the 
S-RSA[&, D] scheme, we construct a forger F* for the un- 
derlying  RSA  signature scheme.  F*  is  given  public  key 
  for the  RSA signature scheme and simulates the 
S-RSA system for F ,  so that  any  forgery construct by  F 
without F  guessing the password (as described below) will 
be a forgery in the underlying RSA signature scheme. 
Simulation: F* gives   to F  as the device's pub- 
lic signature key.  Then  F* generates the server's key  pair 
(pksvr, sksvr), and  gives  that  to F .   Next F'  generates the 
secret user password TO  +R  D. Finally, F* generates the 
data   for the ticket r in the normal way, us- 
ing random t ,  U E  (0, l}", except that dp is drawn randomly 
from ZN. F* gives a, U ,  and r = Epk,,,( )  
to F .  
F* responds to an  h ( ~ )  or  f(w',n) query as a normal 
random oracle would, except that it aborts if n = no (for an 
h ( )  query) or 7r  = no and w'  = v (for an f() query). 
A responds to queries to the svr, dvc, and disable oracles 
as in the proof of Theorem 6.1. 
which occurs with  probability  at most w, the  simula- 
Analysis:  Unless  F  makes a  query   TO)  or  f(w,To), 
tion is indistinguishable from the real protocol to F ,  so if F 
produced a forgery with probability  E  in S-RSA, F* would 
produce a forgery with probability  at least E'  M E  - 
in the underlying RSA signature scheme. 
IDI 
0 
' 
ID1 
l (  1+Qdvc) 
Theorem 6.3  Suppose h has a negligibleprobability of col- 
lision over ID.  I f a  type ADV({dvc}) forger (q,~)-breaks 
+ q!~, then either 
the S-RSA[&,D] scheme where  E  = 
there  exists  an attacker A*  that  (2qsvr, €')-breaks &  with 
or there  exists a forger F* that (qdvc, E / ' ) -  
E'  M 
breaks the underlying RSA signature scheme with E'' M f .  
Proof: Given  F  E  ADv({dvc})  that  (Q,~)-breaks the  S- 
RSA[&, VI scheme, we  show that either we can construct 
a forger F* for the  underlying RSA  signature scheme, or 
an  attacker A* against &.  We  first  show  that if  forger F 
wins  (as defined  below) against a  certain  simulation with 
+ $, we can construct a forger 
probability  greater than 
/'Dl 
F* that can  ( q d v c ,  €’’)-break the underlying RSA signature 
scheme with E“  = f . Assuming F does not win against that 
simulation with the probability  stated above, then we show 
that  we can construct an attacker 4 *  that  (2qs,,,  €’)-breaks 
& with E’  x &. 
Part  I  F*  is  given  public  key     for  the  RSA 
scheme and  simulates the  S-RSA system for F .   We  say 
F wins against the simulation if F  produces a valid forgery 
or if  F  makes a successful  online password guess.  This is 
defined  as F  making a  server query  with  input  ( y , 6 , ~ ’ ) ,  
where S = mac,( )  for the mac key a stored on the 
device, and either (1) T’ is the ticket stored on the device and 
y is a ciphertext not generated by a device start query, and 
where    t D,ksv, (y), and  = h(n0); or ( 2 )  
r’ ismot the ticket stored on the device but y was generated 
by  a device start query, and where   t 
Dsk,.,(7’), and b’  = h(n0). 
Part I  Simulation:  F* gives   to F as the device’s 
public  signature key.  Then F* generates the  server’s key 
pair  (plcsvr, S k S v r ) ,  and gives pk,,,  to F .  Next F* generates 
the secret user password no t~ D. Finally, F* generates 
  for the ticket  T  in the  normal  way, using 
random t ,  U  E  (0, l}K, except that  da  is  drawn randomly 
from ZN. F* gives a, U ,  and T  = Epk,,, (03‘“+“) to F. 
F’  responds to a getVals query to the disable oracle by 
returning t, 7. 
F* responds to  a  svr  disable(t’,T’)  query  as  a  normal 
server would, but using the U  value generated in the initial- 
ization if  7’ = T .  F* responds to serve(y, 6 , ~ ’ )  queries for 
a r‘ that has not been disabled as follows: 
Case  1:  ( y , 6 , ~ ‘ )  is  from  a  dvc  start(m)  query:  Return 
p  @ ,((encode(m,r))dz  mod N )  where m,  r ,  and  p  were 
from the start query. 
Case 2:  y and r’  are from a dvc start query, but not 6: Be- 
have like a normal server (i.e., svr will abort). 
Case 3:  T’  = T ,  but y is not from a dvc start query: Verify 
the mac like a normal server, but using the a value from ini- 
tialization  as the mac key.  Then compute   t 
Dsk,,;(y). Abort the simulation if p = b (this is a successful 
onlinepassword guess), and have svr abort if p # b. 
Case 4:  T’  #  T ,  but  y is  from a  dvc start query:  Com- 
pute   t Dsksv,(r’). Verify the mac like 
a  normal server, using  mac key a’. Abort the simulation  if 
b‘  = b (this is a successful online password guess), and have 
svr abort if b’  # b. 
Case 5: r’ # r and y is not from a dvc start query: Behave 
like a normal server. 
F* responds to a dvc start(m)  query as in Theorem 6.1, 
F* responds to 
except setting y = Epk,,, ( O l m l + K s z g + ) c + X ) .  
a dvc finish(77) query as in Theorem 6.1. 
Part I  Analysis: The probability that F makes a success- 
ful online password guess is at most &, disregarding negli- 
gible probabilities (since TO was chosen randomly and h has 
a negligible  probability  of  collision  over D), so if  F  wins 
against the simulation with probability  at least  $ + fi, it 
produces a forgery with probability  at least $, and thus F* 
produces a forgery in the underlying RSA signature scheme 
with probability  at least 6’’  M $. 
P I  
Part 2  For the second part  of the proof, we assume that 
+ f .  
the probability  of F  winning in  Part  1  is at most 
Then we construct an attacker A* that breaks & with prob- 
ability  &. 
Our attacker A* is given a public key pk’ 
from I ,  and runs a simulation of the S-RSA system for F .  
First  consider  a  simulator  that  gives  pk’  to  F  as  the 
server’s public encryption key, and then  simulates S-RSA 
exactly, but  using  a decryption oracle to decrypt messages 
encrypted under key pk‘ by the adversary.  There will be at 
most 2qSvr of these.  (Note that the decryptions of T and any 
y generated by the dvc would already be known to the simu- 
lator.) This simulation would be perfectly indistinguishable 
from the real protocol to F .  Now consider the same simula- 
tion, but with the ticket and all y values generated by the de- 
vice changed to encryptions of strings of zeros.  (Naturally, 
the server pretends the encryptions are of the  normal mes- 
sages, not strings of zeros.)  The latter simulation is equiv- 
alent to the Part  1 simulation, except that the attacker does 
not abort on  a successful online password  guess.  Still, the 
probability  of  F  forging in the  latter simulation  is at most 
fi + $, while the probability  of  F  forging in the  former 
simulation is at least fi + 4. 
Now we use a standard hybrid argument to construct A’. 
Let experiment j  E  (0, . . . , qdvc + 1) correspond to the first 
j  ciphertexts (generated by A*) be of the normal messages, 
and the  remainder be encryptions of  strings of O’s, and  let 
p, be the probability  of F forging in experiment j. Then the 
average value for i  E  (0,. . . , q d v c }   ofp,+l  - p ,  is at least 
L 
2(1+4’dvc). 
Therefore, to construct A*, we  simply have A* choose 
a random value z  E  (0,. . . , qdvc},  and run experiment i as 
above, but calling the test oracle for the (i + l)st encryption 
to be generated by  the  simulator, where  the  two messages 
X ,  and XI submitted to the test oracle are the normal mes- 
sage and the string of zeros, respectively.  Then A* outputs 
0 if F  forges (meaning it believes .U,  was encrypted by the 