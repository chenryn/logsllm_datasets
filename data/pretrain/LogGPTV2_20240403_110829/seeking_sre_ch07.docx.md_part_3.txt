当我们最终确定这是一个问题时，定义了一个服务层次结构：哪些服务*至关重要*，哪些服务*很重要*，以及那些可以等待空闲人手的服务。在这个过程中出现了"核心服务"的概念。由于
Spotify
的目的是让人们能够听音乐，因此核心服务被定义为从用户登录到客户端音频播放的关键功能相关的任何后端服务。这对应于少量的服务，运行在一小组服务器上。除了面向用户的核心服务外，基础设施系统（如边界路由器、后端网络交换、防火墙和
DNS）也被视为关键。
通过做出这些指定，我们减轻了夜间工作的负担，并可以更健康地面对抉择。
## 部署时间的抉择
 因为运维人员尚未正式开始轮值，对于非工作时间我们很谨慎，极少在这个时段进行新的部署。我们的规定是在工作时间进行敏感的部署，这样许多人可以在发生严重错误时提供帮助。这适用于我们所有的部署，但网络基础结构的更改除外，这些更改是在大多数用户和员工处于睡眠状态时完成的。
鼓励功能团队避免在周五进行任何部署。这使我们能够有一个确实的机会在周末得到休息。
## 轮值和警报
到目前，没有人负责轮值。运维人员没有自动发送系统故障警报的机制。如果夜里有哪个系统崩溃了，直到早上有人检查图表并做出反应时，问题才会得到解决。如果发生了故障，我们又没有自己注意到，我们的同事会打电话给运维团队中的一个人，于是我们将开始解决问题的工作。
因此，睡觉是很困难的，因为我们不知道我们是否会被叫醒。压力影响了我们在夜间的决策能力，以及我们工作时间的正常执行力，有时干脆就感觉一整天都很乏力。
当 2010 年初，当运维团队发展到 5
人时，我们终于可以做之前很长时间应该做的事情，但由于工作量提升的原因，我们仍然无法做到：安装适当的警报系统。这解决了我们的一个关键问题：并没有把系统异常判断和故障检测变成偶尔为之。
现在，我们可以继续计划的下一步，从定义每周轮值计划开始。由于一个人对所有后端服务中断都进行了轮值，我们运维团队的其他人终于能够入睡，但需要注意的是，如果事件涉及我们作为运维所有者的核心系统，就可能会被卷入维修过程。任何有关非核心系统的事件既然不是优先事项，就没有必要在半夜解决问题。相反，我们做了一些基本的故障排除来理解问题；然后，我们让服务保持现状，直到下一个工作日由适当的人处理。最后，轮值的人有权打电话给
CTO，如果需要，CTO 可以打电话给公司的任何人。
### 不完全无痛
尽管定义了轮换计划并设置了警报，但每天都会充满意外，包括计划外工作、问题和故障。而且故障排除优先于任何其他工作。处于轮值状态意味着在
Spotify
的每时每分都要带着手机，每当某些指标超过或低于静态定义的阈值时会收到警报。如果我们在轮值时没有收到警报，那只能意味着两件事之一：要么我们短信额度用光了，要么我们的手机提供商由于我们警报的频度过高而屏蔽了我们的短信。
轮值带来的疲劳是不变的，但企业文化和友情缓解了这种感受：如果轮值的工程师因为故障恢复而累了，需要几个小时的休息，任何人都可以自愿介入。以最不可预测的方式排除故障也很有趣。通过失败学习是健康工程文化的重要组成部分。
## 生成内部办公室支持
 如前所述，到目前为止，我们运营部门的大部分工作量一直是内部办公室 IT
系统和支持。由于我们的成长，几个星期后，我们将有四位新同事，每个同事都渴望开始，他们需要一台电脑、一部手机、LDAP
证书、电子邮箱、wiki
简介和通常的密码安全讲座。除此之外，我们的办公室网络和共享文件系统需要维护和改善。支持非技术型同事需要时间和耐心，并且必须暂时忘记后台维护的那些头疼的事情。
 为了更好地支持我们的客户，Spotify
最终将运维团队一分为二：生产运维和内部 IT
运维。这使得每个团队能够集中精力开展各自的工作。
## 解决剩余首要问题
我们将讨论一下我们在此阶段面临的一些问题，以及我们如何改进。
### 漫长的提前周期
 尽管将内部 IT
支持拆分给另一个团队，我们仍每周收到大量请求，包括开发人员在维护其服务、解决网络问题、如何与外部各方协调与
Spotify 后端集成，并保持与数据中心和硬件供应商的通信。
所有这些问题都以尽力的方式处理，这毫无疑问会导致很长的筹备时间，并不满意的同事和客户。
### 无意的专门化与不协调
  我们会无意中成为领域专家。如果我们中的一个人解决了一个具体问题，那么在下次遇到类似情况时，寻求帮助的人将不可避免地找到同一个人。其他人会听到这个，他们对这个话题有疑问时，他们会求助于这个人。这样我们不仅成为知识孤岛，而且由于我们各自的方法在
SRE
之外与其他人不一致，我们的解决方案空间也变得孤立。例如，我们有多个部署工具在
SRE 之外使用；一组工具的作者并不总是知道其他人的工作。
### 中断
 最后，不断出现中断，使得我们的日常工作（有时需要较长的分析、规划和实施时间）非常困难。
尽管我们正在成为一个更大的工程师群体，但开发团队与现在的生产运维之间的密切关系仍然充满活力。许多任务和请求的处理方式和请求，就好像我们是一个小团队一样：有人寻求帮助、寻求指导或需要完成工作，他们会走到我们的办公桌前，向周围的人求助。通常，这将导致不止一个人中断他们当前的工作，倾听和加入讨论。这是一种奇妙的协作方式，但上下文切换的数量意味着我们在改进工作中的进展比预期慢得多。
### 介绍守门员角色
  我们解决这三个问题的方法是引入一个新的角色：守门员。守门员每周轮换一次，并作为运维团队办公时间内所有响应请求的指定接待员。如果某天的请求数量比较少，目标人员会尝试自行解决所有问题，偶尔会向其他运维工程师寻求帮助。如果请求特别多，守门员将进行判断，拒绝一些请求，并将其余请求传递给团队中的适当人员。轮值守门员的角色最大限度地减少了知识孤岛，因为每个人都能面临最常见的问题。
## 创建侦探
 作为
SRE，我们工作中更具创造性和回报的一个方面是，我们常常需要卷起袖子，在系统异常期间和之后进行取证。这种侦探工作需要了解生态系统中的每一个服务，以及它们是如何结合在一起的。典型的调查可能从我们的
Spotify
客户中的一个特殊行为开始，导致我们研究一种摇摇欲坠的后端服务，当服务稳定下来时，证明它是无辜的。然后，我们会找到一个下游系统，它起初看上去是一个模范公民，但实际上却引发了一连串的失败。
尽管我们从复杂事件的处理中获得了越来越多的知识和经验，但却无法跟上不断增加的工作清单，这使我们不断面临重复的问题再现。更糟糕的是，新开发人员和服务的涌入增加了事件发生的速度。尽管我们非常希望向开发人员同行寻求帮助，但鉴于他们是各自服务方面的专家，所以大多都缺乏大局观念。
只有少数 SRE
侦探，并且越来越多的事件需要研究和解决。我们需要更多的侦探。
一个解决方案出现了：通过向开发人员解释后端系统的工作原理，我们可以培训出更多的侦探。从这种洞察力中，引发了一场相当受欢迎的讲座，被称为"点击播放"。
最初，我们向一些感兴趣的开发人员解释了后端及其工作方式。我们注意到，如果我们围绕用户登录直到播放第一首歌的用例来讲解后台系统，教学会更有效果。最终，这成为
Spotify 工程师入职培训中的标准组件，现在向全球所有 Spotify
员工教授一个较短的非技术版本。
## 关键收获
我们从这一高速增长时期的主要收获是：
-   部署的时间窗口最好得到运维护航，因此应该明智地利用它们。
-   警报和轮值需要有流程和期望。快速拥抱失败，并通过失败学习。
-   教学技能和责任是业务的重要组成部分。举办关于整个系统如何工作的教学讲座。
-   让单个团队在早期阶段处理生产和 IT 是很有诱惑力的，但要成为高效的 SRE
    团队，就应该将其拆分。
-   "守门员"角色或其他正式的处理中断工作的方式，这有助于团队专注于主动式工作。 
# 宠物和牲口，以及敏捷：2011
-    八名运维工程师
-   约 25 名后端工程师
-   2 个数据中心
-   约 30 个后端服务
-   7 种客户端
## 前奏
在本节中，我们将讨论如何在处理运营时变得更加敏捷，以及我们的价值如何同步增长：
敏捷运维
:   我们需要从将服务器视为"宠物"的心态，转向硬件集群是"牲口"的心态；这从根本上改变了我们处理工具和操作流程的方式。
核心工程价值
:   我们从一开始就倾向于自主和信任，这为我们的工作方式开了一点。然而，随着我们对运维流程的熟悉，技术组织正在发生更大的转变，这将促使我们再次重新评估我们的方法。
过去，当我们谈论服务时，我们经常谈论单个服务器："服务器 X
的磁盘已满"、"我们需要添加另一个 CPU
够威力的服务器，以减轻其他登录服务器的负载"等等。这对我们很重要，因为每个服务器都有自己的特性和个性，只有知道这一点，我们才能真正优化这些服务器的使用。此外，每个健康的服务器都是某人的宠物。通过查看服务器受到的精心处理，可以判断哪些服务是健康的：例如，*/home*目录是否定期清理，或者特定于服务的日志是否良好且有序。
我们的世界以服务器为中心，而不是以服务为中心，这在我们的对话、优先级和工具中都表现出来。
## 形成不良习惯