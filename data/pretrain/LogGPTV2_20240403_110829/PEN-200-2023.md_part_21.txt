### 使用 `iptables` 监控 Nmap 端口扫描流量

**链路输出 (策略：接受 67,923 个数据包，7,606 KB)**
```
pkts   bytes  target  prot opt in     out    source          destination
68,807 4,127K ACCEPT  all  --  *      *      0.0.0.0/0       192.168.50.149
```

### 使用 Nmap 进行端口扫描

#### 列表 57 - 使用 `iptables` 监控 Nmap 对所有 TCP 端口的流量
对所有 65,535 个端口进行本地端口扫描生成了约 4 MB 的流量，明显高于默认的 TCP 扫描。全端口扫描发现了更多的开放端口。

我们的结果表明，对一个 C 类网络（254 台主机）进行全面 Nmap 扫描将产生超过 1 GB 的流量。理想情况下，对每个目标机器进行全面的 TCP 和 UDP 端口扫描可以提供最准确的网络服务信息。然而，我们需要在流量限制（如慢速上行链路）与通过更详尽的扫描发现更多开放端口和服务之间找到平衡。这一点对于 A 类或 B 类网络评估尤为重要。

现代端口扫描工具如 MASSCAN 和 RustScan 虽然比 Nmap 更快，但会产生大量的并发流量。相比之下，Nmap 通过限制流量速率，减少了带宽拥塞并提供了更隐蔽的行为。

### Nmap 的基本使用

接下来，我们将探讨 Nmap 的各种扫描技术，从隐蔽/SYN 扫描开始。

#### SYN 扫描
SYN 扫描是最受欢迎的 Nmap 扫描技术。它涉及向目标机器上的多个端口发送 SYN 数据包，而不完成 TCP 握手。如果某个 TCP 端口是开放的，目标机器将返回一个 SYN-ACK，指示该端口是开放的。此时，端口扫描器不会发送最终的 ACK 来完成三次握手。

```bash
kali@kali:~$ sudo nmap -sS 192.168.50.149
Starting Nmap 7.92 (https://nmap.org) at 2022-03-09 06:31 EST
Nmap scan report for 192.168.50.149
Host is up (0.11s latency).
Not shown: 989 closed tcp ports (reset)
PORT   STATE  SERVICE
53/tcp open   domain
88/tcp open   kerberos-sec
135/tcp open  msrpc
139/tcp open  netbios-ssn
389/tcp open  ldap
445/tcp open  microsoft-ds
464/tcp open  kpasswd5
593/tcp open  http-rpc-epmap
636/tcp open  ldapssl
3268/tcp open globalcatLDAP
3269/tcp open globalcatLDAPssl
...
```

因为三次握手从未完成，所以信息不会传递到应用层，因此不会出现在任何应用日志中。SYN 扫描更快且更高效，因为它发送和接收的数据包较少。

请注意，“隐蔽”一词指的是过去防火墙未能记录不完整的 TCP 连接。尽管这个术语仍然存在，但它可能会误导，因为现代防火墙已经能够记录这些连接。

#### TCP Connect 扫描
当用户运行 Nmap 时没有原始套接字权限时，Nmap 将默认使用 TCP Connect 扫描技术。由于 Nmap 的 TCP Connect 扫描使用 Berkeley 套接字 API 完成三次握手，因此不需要提升权限。然而，由于 Nmap 必须等待连接完成才能获取状态，TCP Connect 扫描比 SYN 扫描要慢得多。

我们可以使用 `-sT` 选项启动连接扫描。

```bash
kali@kali:~$ nmap -sT 192.168.50.149
Starting Nmap 7.92 (https://nmap.org) at 2022-03-09 06:44 EST
Nmap scan report for 192.168.50.149
Host is up (0.11s latency).
Not shown: 989 closed tcp ports (conn-refused)
PORT   STATE  SERVICE
53/tcp open   domain
88/tcp open   kerberos-sec
135/tcp open  msrpc
139/tcp open  netbios-ssn
389/tcp open  ldap
445/tcp open  microsoft-ds
464/tcp open  kpasswd5
593/tcp open  http-rpc-epmap
636/tcp open  ldapssl
3268/tcp open globalcatLDAP
3269/tcp open globalcatLDAPssl
...
```

输出显示，连接扫描揭示了一些仅在 Windows 主机上活跃的服务，尤其是域控制器。即使是从这个简单的扫描中，我们也可以推断出目标主机的操作系统和角色。

### UDP 扫描
在执行 UDP 扫描时，Nmap 会使用两种不同的方法来确定端口是否开放。对于大多数端口，它会使用标准的“ICMP 端口不可达”方法，通过向给定端口发送空数据包来实现。然而，对于常见端口（如 SNMP 使用的 161 端口），它会发送特定协议的 SNMP 数据包以尝试从绑定到该端口的应用程序获取响应。要执行 UDP 扫描，我们可以使用 `-sU` 选项，并需要 `sudo` 权限来访问原始套接字。

```bash
kali@kali:~$ sudo nmap -sU 192.168.50.149
Starting Nmap 7.70 (https://nmap.org) at 2019-03-04 11:46 EST
Nmap scan report for 192.168.50.149
Host is up (0.11s latency).
Not shown: 977 closed udp ports (port-unreach)
PORT   STATE  SERVICE
123/udp open  ntp
389/udp open  ldap
...
```

UDP 扫描（-sU）可以与 TCP SYN 扫描（-sS）结合使用，以构建更完整的目标视图。

```bash
kali@kali:~$ sudo nmap -sU -sS 192.168.50.149
Starting Nmap 7.92 (https://nmap.org) at 2022-03-09 08:16 EST
Nmap scan report for 192.168.50.149
Host is up (0.10s latency).
Not shown: 989 closed tcp ports (reset), 977 closed udp ports (port-unreach)
PORT   STATE  SERVICE
53/tcp open  domain
88/tcp open  kerberos-sec
135/tcp open  msrpc
139/tcp open  netbios-ssn
389/tcp open  ldap
445/tcp open  microsoft-ds
464/tcp open  kpasswd5
593/tcp open  http-rpc-epmap
636/tcp open  ldapssl
3268/tcp open globalcatLDAP
3269/tcp open globalcatLDAPssl
53/udp open  domain
123/udp open  ntp
389/udp open  ldap
...
```

联合 TCP 和 UDP 扫描揭示了额外的开放 UDP 端口，进一步披露了目标主机上运行的服务。

### 网络扫描
为了处理大量主机或减少网络流量，我们可以使用网络扫描技术，从广泛的扫描开始，然后针对感兴趣的主机进行更具体的扫描。

使用 Nmap 的 `-sn` 选项进行网络扫描时，主机发现过程不仅包括发送 ICMP 回显请求，还包括发送到端口 443 的 TCP SYN 数据包、发送到端口 80 的 TCP ACK 数据包以及 ICMP 时间戳请求，以验证主机是否可用。

```bash
kali@kali:~$ nmap -sn 192.168.50.1-253
Starting Nmap 7.92 (https://nmap.org) at 2022-03-10 03:19 EST
Nmap scan report for 192.168.50.6
Host is up (0.12s latency).
Nmap scan report for 192.168.50.8
Host is up (0.12s latency).
...
Nmap done: 254 IP addresses (13 hosts up) scanned in 3.74 seconds
```

使用 `grep` 命令在标准 Nmap 输出中查找活动主机可能很麻烦。相反，我们可以使用 Nmap 的“可解析”输出参数 `-oG` 以更易于管理的格式保存结果。

```bash
kali@kali:~$ nmap -v -sn 192.168.50.1-253 -oG ping-sweep.txt
Starting Nmap 7.92 (https://nmap.org) at 2022-03-10 03:21 EST
Initiating Ping Scan at 03:21
...
Read data files from: /usr/bin/../share/nmap
Nmap done: 254 IP addresses (13 hosts up) scanned in 3.74 seconds
...
kali@kali:~$ grep Up ping-sweep.txt | cut -d " " -f 2
192.168.50.6
192.168.50.8
192.168.50.9
...
```

我们还可以在网络范围内扫描特定的 TCP 或 UDP 端口，探测常见的服务和端口，以定位有用的系统或具有已知漏洞的系统。这种扫描通常比 ping 扫描更准确。

```bash
kali@kali:~$ nmap -p 80 192.168.50.1-253 -oG web-sweep.txt
Starting Nmap 7.92 (https://nmap.org) at 2022-03-10 03:50 EST
Nmap scan report for 192.168.50.6
Host is up (0.11s latency).
PORT   STATE  SERVICE
80/tcp open  http
Nmap scan report for 192.168.50.8
Host is up (0.11s latency).
PORT   STATE  SERVICE
80/tcp closed http
...
kali@kali:~$ grep open web-sweep.txt | cut -d" " -f2
192.168.50.6
192.168.50.20
192.168.50.21
```

为了节省时间和网络资源，我们还可以扫描多个 IP 地址，探测少量常见端口。例如，让我们使用 `--top-ports` 选项进行前 20 个 TCP 端口的 TCP 连接扫描，并启用 OS 版本检测、脚本扫描和路由跟踪。

```bash
kali@kali:~$ nmap -sT -A --top-ports=20 192.168.50.1-253 -oG top-port-sweep.txt
Starting Nmap 7.92 (https://nmap.org) at 2022-03-10 04:04 EST
Nmap scan report for 192.168.50.6
Host is up (0.12s latency).
PORT   STATE  SERVICE  VERSION
21/tcp closed ftp
22/tcp open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
| 3072 56:57:11:b5:dc:f1:13:d3:50:88:b8:ab:a9:83:e2:29 (RSA)
| 256 4f:1d:f2:55:cb:40:e0:76:b4:36:90:19:a2:ba:f0:44 (ECDSA)
|_ 256 67:46:b3:97:26:a9:e3:a8:4d:eb:20:b3:9b:8d:7a:32 (ED25519)
23/tcp closed telnet
25/tcp closed smtp
53/tcp closed domain
80/tcp open  http     Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
|_http-title: Under Construction
110/tcp closed pop3
111/tcp closed rpcbind
...
```

前 20 个 Nmap 端口由 `/usr/share/nmap/nmap-services` 文件确定，该文件使用三个空格分隔的列。第一列是服务名称，第二列包含端口号和协议，第三列是“端口频率”。

```bash
kali@kali:~$ cat /usr/share/nmap/nmap-services
...
finger 79/udp 0.000956
http 80/sctp 0.000000 # www-http | www | World Wide Web HTTP
http 80/tcp 0.484143 # World Wide Web HTTP
http 80/udp 0.035767 # World Wide Web HTTP
hosts2-ns 81/tcp 0.012056 # HOSTS2 Name Server
hosts2-ns 81/udp 0.001005 # HOSTS2 Name Server
...
```

此时，我们可以对那些服务丰富或有趣的单个主机进行更详尽的扫描。

有许多创造性的方式来节省带宽或降低我们的扫描可见性，以及值得进一步研究的有趣主机发现技术。

### 操作系统指纹识别
操作系统指纹识别可以通过 `-O` 选项启用。此功能通过检查从目标机器返回的数据包来猜测其操作系统。这是因为操作系统经常使用略有不同的 TCP/IP 栈实现（例如，默认 TTL 值和 TCP 窗口大小的不同），这些微小的差异创建了一个 Nmap 可以识别的指纹。

Nmap 将检查从目标机器收到的流量，并尝试将其与已知列表匹配。默认情况下，Nmap 只有在检索到的指纹非常准确时才会显示检测到的操作系统。由于我们希望获得目标操作系统的粗略信息，因此我们使用 `--osscan-guess` 选项强制 Nmap 即使不完全准确也打印猜测结果。

例如，考虑以下简单的 Nmap 操作系统指纹扫描：

```bash
kali@kali:~$ sudo nmap -O 192.168.50.14 --osscan-guess
...
Running (JUST GUESSING): Microsoft Windows 2008|2012|2016|7|Vista (88%)
OS CPE: cpe:/o:microsoft:windows_server_2008::sp1
cpe:/o:microsoft:windows_server_2008:r2
cpe:/o:microsoft:windows_server_2012:r2
cpe:/o:microsoft:windows_server_2016
cpe:/o:microsoft:windows_7
cpe:/o:microsoft:windows_vista::sp1:home_premium
Aggressive OS guesses: Microsoft Windows Server 2008 SP1 or Windows Server 2008 R2
```

### 总结
通过以上步骤，我们可以有效地使用 Nmap 进行端口扫描、网络扫描和操作系统指纹识别。这为我们提供了关于目标网络和主机的详细信息，有助于进行渗透测试和安全评估。