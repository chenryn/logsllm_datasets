uration while keeping low communication overhead is challenging.
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3504Prior protocols [1] incur 𝑂(𝜅𝑛3) communication without thresh-
old signatures, and moreover, the execution cannot be split across
rounds to reduce per round complexity. We introduce a new clock
synchronization primitive that synchronizes new nodes when a
majority of honest nodes are already synchronized while main-
taining quadratic communication per round. The protocol utilizes
homomorphic addition property of VSS secret shares that yields
constant-sized secrets when the secret is opened. The homomor-
phic secret can be broadcast among all nodes to synchronize all the
nodes with only 𝑂(𝜅𝑛2) communication.
Implementation and Evaluation. We implement our protocol
and demonstrate the practicality of our random beacon. We show
that our BRandPiper protocol is as good as the state of the art
practically deployed system: Drand in terms of beacons per minute.
Concretely, we show that choosing a Δ value for BRandPiper such
that it always succeeds, we are always better than Drand if we
assume a similar low Δ value for Drand. Giving a benefit of doubt
to Drand, by choosing slightly relaxed value of 99.9𝑡ℎ percentile
value of Δ, we show that our protocol is still as practical as Drand.
Summary of contributions. To summarize, we make the follow-
ing contributions in this work:
(1) In Section 3, we present a communication efficient BFT SMR
protocol with quadratic communication per consensus decision.
(2) We then present two random beacon protocols. Section 4.1
presents GRandPiper, a simple beacon protocol using PVSS with
𝑂(𝜅𝑛2) communication. We then present BRandPiper, a protocol
with better unpredictability in Section 4.2.
(3) In Section 5, we evaluate our BRandPiper protocol.
(4) We present mechanisms for synchronizing a new node in
Appendix C and reconfiguration in Appendix D.
Related Work. We present detailed related works in Appendix A.
Limitations. Our protocol depends on the synchrony assumption,
i.e., messages sent between any two honest nodes in the system are
always delivered within a public value Δ.
2 MODEL AND DEFINITIONS
We consider a system P := {𝑝1, . . . , 𝑝𝑛} consisting of 𝑛 nodes out
of which at most 𝑡 = ⌊𝑛 − 1/2⌋ nodes can be Byzantine which we
term as a 𝑡-bounded adversary. The Byzantine nodes may behave
arbitrarily. When we assume an adaptive adversary A, the nodes
can be corrupted to behave arbitrarily at any time during execution.
When we assume a static adversary A, the nodes to be corrupted
must be chosen by the adversary before the start of the protocol
execution. We also use the term 𝑡-bounded adversary. A node that
is not faulty throughout the execution is considered to be honest
and executes the protocol as specified.
We assume the network between nodes consists of point-to-point
secure (authenticated and confidential) synchronous communica-
tion channels. Messages between nodes may take at most Δ time
before they arrive, where Δ is a known maximum network delay.
To provide safety under adversarial conditions, we assume that the
adversary is capable of delaying the message for an arbitrary time
upper bounded by Δ. In addition, we assume all honest nodes have
clocks moving at the same speed. They also start executing the pro-
tocol within Δ time from each other. This can be easily achieved by
4
using the clock synchronization protocol [1] once at the beginning
of the protocol.
We make use of digital signatures and a public-key infrastructure
(PKI) to prevent spoofing and replays and to validate messages.
Message 𝑥 sent by a node 𝑝 is digitally signed by 𝑝’s private key
and is denoted by ⟨𝑥⟩𝑝. In addition, we use 𝐻(𝑥) to denote the
invocation of the random oracle 𝐻 on input 𝑥.
2.1 Definitions
We consider a state machine replication protocol defined as follows:
Definition 2.1 (Byzantine Fault-tolerant State Machine Replica-
tion [45]). A Byzantine fault-tolerant state machine replication proto-
col commits client requests as a linearizable log to provide a consistent
view of the log akin to a single non-faulty server, providing the follow-
ing two guarantees: (i) Safety. Honest nodes do not commit different
values at the same log position. (ii) Liveness. Each client request is
eventually committed by all honest nodes.
We define 𝑑-absolute unpredictability as follows:
Definition 2.2 (𝑑-absolute unpredictability). Consider an epoch
based protocol. Let the fastest honest node be at epoch 𝑒. The protocol
is said to be unpredictable with absolute bound 𝑑 for 𝑑 ≥ 1, if the
probability of an adversary A predicting the honest output for any
epoch 𝑒′ ≥ 𝑒 + 𝑑 is negl(𝜅).
We define the security requirements for a random beacon proto-
col RB as follows:
Definition 2.3 (Secure random beacon protocol). An epoch based
protocol RB is said to be a 𝑑-secure random beacon protocol if it
satisfies the following conditions:
(1) Bias-resistance. Let O be the output of the beacon for some
epoch 𝑒. No adversary A can bias the output of the beacon, i.e., fix
some 𝑐 bits of O for any epoch 𝑒 > 1 with probability better than
negl(𝑐) + negl(𝜅).
(2) Unpredictability. The protocol is 𝑑-absolute unpredictable.
(3) Guaranteed Output Delivery. For every epoch 𝑒 ≥ 1, the
protocol outputs a value.
2.2 Primitives
In this section, we present several primitives used in our protocols.
Linear erasure and error correcting codes. We use standard
(𝑡 + 1, 𝑛) Reed-Solomon (RS) codes [41]. This code encodes 𝑡 + 1
data symbols into code words of 𝑛 symbols and can decode the 𝑡 + 1
elements of code words to recover the original data.
• ENC. Given inputs 𝑚1, . . . , 𝑚𝑡+1, an encoding function ENC
computes (𝑠1, . . . , 𝑠𝑛) = ENC(𝑚1, . . . , 𝑚𝑡+1), where (𝑠1, . . . , 𝑠𝑛) are
code words of length 𝑛. A combination of any 𝑡+1 elements of 𝑛 code
words uniquely determines the input message and the remaining
of the code word.
• DEC. DEC computes (𝑚1, . . . , 𝑚𝑡+1) = DEC(𝑠1, ..., 𝑠𝑛), and is
capable of tolerating up to 𝑐 errors and 𝑑 erasures in code words
(𝑠1, . . . , 𝑠𝑛), if and only if 𝑡 ≥ 2𝑐 + 𝑑.
Cryptographic accumulators. A cryptographic accumulator sc-
heme constructs an accumulation value for a set of values and
produces a witness for each value in the set. Given the accumulation
value and a witness, any node can verify if a value is indeed in the
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3505set. Formally, given a parameter 𝑘, and a set 𝐷 of 𝑛 values 𝑑1, . . . , 𝑑𝑛,
an accumulator has the following components:
• Gen(1𝑘, 𝑛): This algorithm takes a parameter 𝑘 represented in
unary form 1𝑘 and an accumulation threshold 𝑛 (an upper bound on
the number of values that can be accumulated securely), returns an
accumulator key 𝑎𝑘. The accumulator key 𝑎𝑘 is part of the 𝑞-SDH
setup and therefore is public to all nodes.
• Eval(𝑎𝑘, D): This algorithm takes an accumulator key 𝑎𝑘 and
a set D of values to be accumulated, returns an accumulation value
𝑧 for the value set D.
• CreateWit(𝑎𝑘, 𝑧, 𝑑𝑖, D): This algorithm takes an accumulator
key 𝑎𝑘, an accumulation value 𝑧 for D and a value 𝑑𝑖, returns ⊥ if
𝑑𝑖 ∈ D, and a witness 𝑤𝑖 if 𝑑𝑖 ∈ D.
• Verify(𝑎𝑘, 𝑧, 𝑤𝑖, 𝑑𝑖): This algorithm takes an accumulator key
𝑎𝑘, an accumulation value 𝑧 for D, a witness 𝑤𝑖 and a value 𝑑𝑖,
returns true if 𝑤𝑖 is the witness for 𝑑𝑖 ∈ D, and false otherwise.
In this paper, we use collision free bilinear accumulators from [37]
as cryptographic accumulators.
Verifiable Secret Sharing and Commitments. We assume the
existence of a secure Verifiable secret sharing scheme VSS with
commitments, satisfying the security properties in Definition 2.4.
We use the interfaces to a secure VSS scheme VSS as described in
Table 2 (Appendix B).
Definition 2.4 (VSS Security [6]). A VSS protocol consists of two
phases: sharing and reconstruction. We call an 𝑛−node VSS protocol,
with 𝑡−bounded adversary A and security parameter 𝜅, an (𝑛−𝑡)-VSS
protocol if it satisfies the following conditions:
1. Secrecy. If the dealer 𝐿 is honest, then the probability of A learning
any information about the dealer’s secret 𝑠 in the sharing phase is
negl(𝜅).
2. Correctness. If 𝐿 is honest, then the honest nodes output the secret
𝑠 at the end of the reconstruction phase with a high probability of
1 − negl(𝜅).
3. Commitment. If 𝐿 is Byzantine, then at the end of the sharing
phase there exists a value 𝑠★ in the input space including ⊥, such that
at the end of the reconstruction phase all honest nodes output 𝑠★ with
high probability 1 − negl(𝜅).
In our work, we implicitly assume that the VSS scheme used is
(𝑛/2 + 1)-secure.
Publicly Verifiable Secret Sharing — PVSS. PVSS schemes con-
sist of communication such as broadcasts, posts on the bulletin
board, as well as computational components such as share genera-
tion, encryption, etc. We separate the two components and present
interfaces to computational algorithms that we will use in our pro-
tocols. We use the interfaces to a secure PVSS scheme PVSS as
described in Table 3 (Appendix B).
We assume the existence of a secure PVSS algorithm PVSS as
defined in Definition 2.5.
Definition 2.5 (PVSS security [6, 17]). Let 𝐿 ∈ P be the dealer with
secret 𝑠 and 𝜅 be the security parameter. A PVSS scheme PVSS is a
secure VSS scheme (see Definition 2.4) and must provide the following
guarantees:
4. Public Verifiability. If the check in share verification algorithm
(PVSS.ShVrfy, see Table 3) returns 1, i.e., succeeds, then with high
probability 1−negl(𝜅), the encryptions are valid shares of some secret.
Normalizing the length of cryptographic building blocks. Let
𝜆 denote the security parameter, 𝜅ℎ = 𝜅ℎ(𝜆) denote the hash size,
𝜅𝑎 = 𝜅𝑎(𝜆) denote the size of the accumulation value and witness
of the accumulator and 𝜅𝑣 = 𝜅𝑣(𝜆) denote the size of secret share
along with the associated proofs (both for PVSS and VSS). Further,
let 𝜅 = max(𝜅ℎ, 𝜅𝑎, 𝜅𝑣); we assume 𝜅 = Θ(𝜅ℎ) = Θ(𝜅𝑣) = Θ(𝜅𝑎) =
Θ(𝜆). Throughout the paper, we will use the same parameter 𝜅 to
denote the hash size, signature size, accumulator size and secret
share size for convenience.
3 BFT SMR PROTOCOL
In this section, we present a simple BFT SMR protocol as a ba-
sic building block for the random beacon protocols discussed in
following sections. Our SMR protocol achieves 𝑂(𝜅𝑛2) bits com-
munication complexity with a universal structured reference string
(SRS) setup under the 𝑞-SDH assumption, or 𝑂(𝜅𝑛2 log 𝑛) bits com-
munication complexity without the 𝑞-SDH setup assumption. In
particular, we do not use threshold signatures, and thus avoid any
distributed key generation during the setup or proactive secret
sharing during reconfiguration. We note that prior synchronous
BFT SMR protocols [3, 19, 46] with honest majority incur 𝑂(𝜅𝑛3)
communication per consensus decision without threshold signa-
tures.
Epochs. Our protocol progresses through a series of numbered
epochs with each epoch coordinated by a distinct leader. Epochs
are numbered by integers starting with one. Each epoch lasts for
11Δ time. The leaders for each epoch are rotated irrespective of the
progress made in each epoch. For simplicity, we use round-robin
leader election in this section and the leader of epoch 𝑒, represented
as 𝐿𝑒, is determined by 𝑒 mod 𝑛. Later in the beacon protocols, we
introduce different leader election rules.
Blocks and block format. An epoch leader’s proposal is repre-
sented as a block. Each block references its predecessor except for
the genesis block which has no predecessor. We call a block’s po-
sition in the chain as its height. A block 𝐵ℎ at height ℎ has the
format, 𝐵ℎ := (𝑏ℎ, 𝐻(𝐵ℎ−1)) where 𝑏ℎ denotes the proposed pay-
load at height ℎ, 𝐵ℎ−1 is the block at height ℎ − 1 and 𝐻(𝐵ℎ−1) is
the hash digest of 𝐵ℎ−1. The predecessor for the genesis block is ⊥.
A block 𝐵ℎ is said to be valid if (1) its predecessor block is valid, or
if ℎ = 1, predecessor is ⊥, and (2) the payload in the block meets
the application-level validity conditions. A block 𝐵ℎ extends a block
𝐵𝑙 (ℎ ≥ 𝑙) if 𝐵𝑙 is an ancestor of 𝐵ℎ. Note that a block’s height ℎ
and its epoch 𝑒 need not necessarily be the same.
Certified blocks, and locked blocks. A block certificate on a
block 𝐵ℎ consists of 𝑡 + 1 distinct signatures in an epoch 𝑒 and is
represented by C𝑒(𝐵ℎ). Block certificates are ranked by epochs, i.e.,
blocks certified in a higher epoch has a higher rank. During the
protocol execution, each node keeps track of all certified blocks and
keeps updating the highest ranked certified block to its knowledge.
Nodes will lock on highest ranked certified blocks and do not vote
for blocks that do not extend the locked blocks to ensure safety of
a commit.
Equivocation. Two or more messages of the same type but with