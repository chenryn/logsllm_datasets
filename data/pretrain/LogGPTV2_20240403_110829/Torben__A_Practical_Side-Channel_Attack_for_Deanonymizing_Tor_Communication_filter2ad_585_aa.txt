title:Torben: A Practical Side-Channel Attack for Deanonymizing Tor Communication
author:Daniel Arp and
Fabian Yamaguchi and
Konrad Rieck
Torben: A Practical Side-Channel Attack
for Deanonymizing Tor Communication
Daniel Arp
University of Göttingen
Göttingen, Germany
Fabian Yamaguchi
University of Göttingen
Göttingen, Germany
Konrad Rieck
University of Göttingen
Göttingen, Germany
Abstract
The Tor network has established itself as de-facto standard
for anonymous communication on the Internet, providing an
increased level of privacy to over a million users worldwide.
As a result, interest in the security of Tor is steadily growing,
attracting researchers from academia as well as industry and
even nation-state actors. While various attacks based on
traﬃc analysis have been proposed, low accuracy and high
false-positive rates in real-world settings still prohibit their
application on a large scale.
In this paper, we present Torben, a novel deanonymization
attack against Tor. Our approach is considerably more reli-
able than existing traﬃc analysis attacks, simultaneously far
less intrusive than browser exploits. The attack is based on
an unfortunate interplay of technologies: (a) web pages can
be easily manipulated to load content from untrusted ori-
gins and (b) despite encryption, low-latency anonymization
networks cannot eﬀectively hide the size of request-response
pairs. We demonstrate that an attacker can abuse this in-
terplay to design a side channel in the communication of
Tor, allowing short web page markers to be transmitted to
expose the web page a user visits over Tor. In an empirical
evaluation with 60,000 web pages, our attack enables detect-
ing these markers with an accuracy of over 91% and no false
positives.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and Protection; I.5.4
Applications
[Pattern Recognition]:
Keywords
Anonymity; Side Channels; Traﬃc Analysis
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or repub-
lish, to post on servers or to distribute to lists, requires prior speciﬁc permission and/or
a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714627.
1.
INTRODUCTION
The Tor network is one of the largest eﬀorts to provide
anonymity and privacy on the Internet. The network im-
plements a low-latency anonymity service based on the con-
cept of Onion Routing. The network consists of over 6,000
relay nodes worldwide that enable its users to relay com-
munication through a circuit of these nodes, for example,
to anonymously express their opinion or circumvent digital
censorship.
With the increasing use of Tor in practice, research on
attacks against this service have gained considerable atten-
tion. A large body of work has studied passive attacks
based on traﬃc analysis, most notably website ﬁngerprint-
ing and traﬃc conﬁrmation attacks. The former enable an
attacker to detect patterns indicative for web pages in Tor
traﬃc [e.g., 2, 4, 8]. Although these approaches provide
good results in closed-world settings, in practice they suﬀer
from high false-positive rates. Traﬃc conﬁrmation attacks
on the other hand are not limited to web traﬃc but require
an attacker who is able to eavesdrop on both ends of a com-
munication over a long period of time [e.g., 6, 9]. A second
strain of research has thus considered active attacks against
the Tor network, such as path-selection attacks based on
network congestion and traﬃc watermarking using packet
delays [e.g., 10]. While these techniques provide a more ac-
curate and faster deanonymization, they involve a signiﬁcant
eﬀort for the adversary. As a result, the few known cases
of deanonymization of Tor have been reported to instead
make use of advertisement networks or rely on vulnerabili-
ties in browser implementations and are thus unrelated to
insecurities of Tor itself.
In this paper, we present Torben, a novel deanonymization
attack against Tor that is signiﬁcantly more reliable than
traﬃc analysis attacks but far less intrusive than browser
exploits. In contrast to other active attacks, Torben operates
entirely on the application layer and does not require Tor
nodes or routers to be controlled by the adversary. The
attack is based on an unfortunate interplay of technologies:
First, web pages can often be manipulated to load content
from untrusted origins, for example, using advertisements
or user-provided content. Second, despite encryption, low-
latency anonymization networks cannot eﬀectively hide the
size of request-response pairs in web traﬃc. We show that
an attacker can abuse this interplay to design a side channel
in the communication of Tor. This side channel enables the
transmission of short web page markers that expose the web
page a user visits to an observer between the Tor client and
the entry node. Although it is well-known that active web
content allows to track the visitors of web pages, we are the
ﬁrst to show that it can be used to deanonymize Tor users
in a short period of time.
In summary, our contributions are the following:
• We present a novel side channel in Tor communication.
By issuing HTTP requests from the user’s browser, an
attacker is able to induce distinct patterns observable
in encrypted traﬃc.
• We demonstrate that this side channel can be used to
perform a novel deanonymization attack against Tor,
allowing us to transmit web page markers exposing the
page visited by a user.
• Finally, we show that these web page markers can be
accurately detected in real Tor traﬃc with high accu-
racy by combining techniques from signal processing
and machine learning.
2. BACKGROUND
Before presenting our deanonymization attack and dis-
cussing details of how to transmit data through the under-
lying side channel, we need to brieﬂy review the basics of
the Tor network (Section 2.1) and deﬁne the attack scenario
we are considering (Section 2.2).
2.1 The Tor Network
The Tor network [3] is a low-latency anonymization net-
work whose purpose is to protect the privacy of its users by
obfuscating their network traﬃc. This is achieved by tun-
neling user traﬃc through arbitrary paths in the Tor net-
work, which consist of multiple hops (Tor relays) that run
the Tor software and are operated by volunteers. The secu-
rity of Tor is based on the use of strong encryption and the
large number of relays that can be used to establish a path,
thus signiﬁcantly lowering the ability of an attacker to easily
eavesdrop a communication or link senders and receivers.
A user who wants to establish a connection to a server
through Tor has to run a Tor client on his computer which
will ﬁrst select a path through the Tor network. After estab-
lishing a path, the user can send data over the Tor network
using ﬁxed size Tor cells which are multi-layer encrypted
with previously negotiated session keys. Each relay node on
the path then removes one layer of encryption while the cell
is forwarded to its destination.
2.2 Attack Scenario
For our attack, we consider a scenario that involves an
active attacker. We assume that, ﬁrst, this attacker is able to
monitor the encrypted communication between a Tor client
and the entry node, and, second, she actively implants a
marker into a web page of interest. An overview of this
attack scenario is depicted in Figure 1.
Let us, for instance, consider a totalitarian regime or law
enforcement agency that wants to determine whether a par-
ticular user visits a certain web page, despite the fact that
Tor is being used to anonymize the communication. Clearly,
this attacker can be expected to be capable of observing
the encrypted network communication between the user’s
browser and the Tor entry node. However, this alone is a
vast underestimation of her capabilities, as it considers a
passive attacker. It is reasonable to assume that the user’s
browser may be exposed to attacker-provided web content at
some point throughout the browsing session. This content
may be delivered through a multitude of vectors. Based on
the chosen vector, we consider the following two variants of
the attack scenario:
• Remote markers In this scenario, the attacker ex-
ploits the fact that web pages often embed content
from diﬀerent origins, some of which might be con-
trolled by the attacker. The attacker may, for instance,
be able to host and advertisement on the web page.
• Local markers In this scenario, the attacker is able to
inject content directly into a web page. For example,
the content of a web page may be manipulated at the
server to track its users.
Regardless of the type of the marker, attacker-provided
content is loaded in the user’s browser and can be used to
generate a characteristic pattern in the resulting Tor com-
munication. This pattern can then be detected in the en-
crypted traﬃc between the Tor client and the entry node,
ultimately enabling an adversary to deanonymize the visi-
tors of marked web pages.
3. A SIDE-CHANNEL ATTACK ON TOR
A fundamental limitation of low-latency anonymization
networks is that they cannot eﬀectively hide the sizes and
order of relayed packets. For users browsing web pages via
Tor, this means that HTTP request and response sizes di-
rectly inﬂuence the stream of TLS records observed between
the Tor client and the entry node. Unfortunately, this set-
ting can be exploited by an attacker. If the user accesses
attacker-controlled content, such as JavaScript code, the at-
tacker gains partial control over the stream of request and
response sizes.
The overall idea of our attack is to leverage this control
to carry out a side-channel attack by creating distinct com-
munication patterns in the encrypted data stream that can
be eﬀectively detected using machine learning techniques.
While this idea is simple at core, applying it to construct
a successful attack requires careful engineering of a number
of diﬀerent components.
In particular, the following four
challenges need to be addressed:
• Preprocessing of network traces. Network traces
need to be preprocessed and transformed into a robust
representation suitable for analysis of request and re-
sponse sizes (Section 3.1).
• Side channel design. A reliable side channel needs
to be designed that allows short messages to be trans-
mitted to an attacker observing the encrypted data
stream of Tor (Section 3.2).
• Transmission of web page markers. Markers need
to be transmitted using the side channel, such that the
visit of a marked web page induces a distinct pattern
in the encrypted traﬃc (Section 3.3).
• Detection of web page markers. Finally, a method
for automatic detection of these web page markers is
required that enables identifying individual markers in
real network traces (Section 3.4).
Figure 1: Attack scenario: A web page marker is implanted using embedded or user-provided content, such as an advertisement.
The marker induces a traﬃc pattern visible at the entry node, for example, using JavaScript code.
3.1 Preprocessing of Network Traces
The success of traﬃc analysis attacks critically depends
on the choice of a suitable representation of observed net-
work communication. With this goal in mind, we preprocess
network traces by leveraging inherent properties of the Tor
protocol and the protocols it depends on, thus allowing us to
remove noise sources and highlight those properties of net-
work traﬃc that are controllable by the attacker. The key
insight our preprocessing scheme is based on, is that by con-
trolling the size of HTTP requests and responses, we do not
gain control over the size of IP packets or TLS records but
only over the amount of data transferred from one change of
direction to the next. We devise a representation emphasiz-
ing this aspect of the record stream in a two-step procedure
outlined in the following.
3.1.1 TCP Stream Reassembly
All Tor communication takes place via Tor cells encapsu-
lated in TLS records. While HTTP communication relayed
by the Tor network may inﬂuence these sequences, they are
distorted by several noise sources that needlessly complicate
analysis. In particular, delayed or dropped IP packets cause
the transport layer to issue re-transmissions of packets.
Fortunately, we can easily address all of these problems by
reassembling TCP streams using readily available tools such
as tshark. This allows all subsequent analysis to be carried
out on streams of TLS records as opposed to raw IP pack-
ets. In eﬀect, the order of Tor cells is preserved and artifacts
of TCP/IP such as re-transmissions and acknowledgments
carrying no data are removed. To simplify all further pro-
cessing, we map traces to sequences of record sizes where a
positive and negative sign are used for incoming and outgo-
ing traﬃc respectively.
3.1.2 Filtering and Merging TLS Records
We proceed to apply the following chain of transforma-
tions to account for various properties of Tor and TLS that
impact the analysis of network traﬃc.
Filtering empty records. As a ﬁrst step, we ﬁlter se-
quences such that they only contain entries representing
records of 100 bytes or more. This preserves Tor cells as
the minimum cell size is 512 bytes.
Merging of records. We merge adjacent TLS records go-
ing into the same direction to obtain a sequence representing
the amount of data rather than individual records.
Filtering control cells. We ﬁlter single cells that are un-
related to user data by discarding any sizes smaller than
twice the cell size after merging. Upon removal of these sin-
gle cells, we merge TLS records again to connect data relay
cells previously separated by control cells.
Normalization of sizes. The concrete sizes of transfered
data vary slightly depending on the version of Tor and its
libraries. As a simple normalization, we express all sizes in
multiples of 2000 bytes.
Upon completion of the preprocessing step, each Tor con-
nection is represented by a sequence of integers that encodes
the amount, direction and order of data transfers. We refer
to these sequences as data transfer sequences throughout the
rest of this paper.
3.2 Side Channel Design
We design our side channel such that it satisﬁes the fol-
lowing two properties: First, normal web traﬃc should be
clearly distinguishable from any side-channel communica-
tion to make false positives very unlikely. Second, the trans-
mission speed needs to be high enough to allow short byte
sequences to be transmitted before the user leaves a web
page.
Side-channel communication can only be distinguished from
regular web traﬃc, if data transfer patterns exist that are
atypical for normal web pages. We thus design 16 diﬀerent
symbols using request-response pairs with discrete request
and response sizes of 2, 000, 4, 000, 6, 000 and 8, 000 bytes.
These sizes are large enough to be atypical but still enable
a fast transmission.
A message is then encoded by splitting it into quad bits
and encoding each quad bit separately using the correspond-
ing request-response pair. By concatenating the resulting
symbols, we ﬁnally obtain a data transfer sequence suitable
for transmission over the side channel. A more detailed dis-
cussion of our side channel can be found in [1].
3.3 Transmission of Web Page Markers
Equipped with a side channel, we can now expose visited
web pages by transmitting suitable messages from the user’s
browser. This, however, creates two additional challenges.
First, a suitable browser-based mechanism for transmission
of correctly ordered sequences of HTTP requests needs to be
found, and second, web page markers that encode the names
or URLs of visited web pages need to be constructed.
3.3.1
In our experiments, we assume that an attacker is able to
execute JavaScript code within the browser of a Tor user.
This code can be embedded in a displayed advertisement,
injected via cross-site scripting or contained in any other
included JavaScript code. For establishing the side channel,
Issuing HTTP Requests
Tor ClientEntry nodeExit nodeTor networkImplantation of web page markere.g., HTTP redirects or JavaScript code in an advertisementiFrameDetection of markerAdthe code does not need to operate in the context of the
marked web page and thus our attack is not eﬀected by the
same-origin policy.
The standard JavaScript object XMLHttpRequest oﬀers a
mechanism for request transmission that ﬁts our needs per-
fectly. The object allows requests to be issued from the
user’s browser synchronously while oﬀering ﬁne-grained con-
trol over request content and headers. We can employ XML-
HttpRequest to transmit a request-response pair (r1, r2) us-