SECURITY PAPER
Preparation Date: 11 Dec 2016
Art of Anti Detection – 1
Introduction to AV & Detection
Techniques
Prepared by:
Ege BALCI
Penetration Tester
ege.balciinvictuseurope.com
INVICTUS
2
Security
TABLE OF CONTENT
1.
Abstract:.............................................................................................................................................. 3
2.
Introduction........................................................................................................................................3
3.
Terminology....................................................................................................................................... 3
4.
Common Techniques..................................................................................................................... 4
4.1
Obfuscation............................................................................................................................... 4
4.2
Packers........................................................................................................................................ 4
4.3
Crypters...................................................................................................................................... 5
5.
The Problem About Crypters & Packers............................................................................... 5
5.1
PE Injection:............................................................................................................................. 5
6.
Perfect Approach..............................................................................................................................6
7.
Heuristic Engines.......................................................................................................................... 10
8.
Decrypt Shellcode.........................................................................................................................10
9.
Dynamic Analysis Detection....................................................................................................11
9.1
Is Debugger Present:........................................................................................................ 12
9.2
Load Fake Library................................................................................................................13
9.3
Get Tick Count...................................................................................................................... 13
9.4
Number Of Cores.................................................................................................................14
9.5
Huge Memory Allocations................................................................................................14
9.6
Trap Flag Manipulation..................................................................................................... 15
9.7
Mutex Triggered WinExec................................................................................................15
10.
Proper Ways To Execute Shellcodes...............................................................................16
10.1
HeapCreate/HeapAlloc:.................................................................................................... 16
10.2
LoadLibrary/GetProcAddress:........................................................................................16
10.3
GetModuleHandle/GetProcAddress:...........................................................................16
11.
Multi Threading......................................................................................................................... 17
12.
Conclusion....................................................................................................................................18
13.
References:.................................................................................................................................19
INVICTUS
3
Security
1. Abstract:
This paper will explain effective methods for bypassing the static, dynamic and
heuristic analysis of up to date anti-virus products. Some of the methods are
already known by public but there are few methods and implementation tricks
that is the key for generating FUD(Fully Undetectable) malware, also the size of
the malware is almost as important as anti-detection, when implementing these
methods i will try to keep the size as minimum as possible. this paper also
explains the inner workings of anti-viruses and windows operating system,
reader should have at least intermediate C/C++ and assembly knowledge and
decent understanding of PE file structure.
2. Introduction
Implementing anti detection techniques should be specific for each malware type,
all the methods explained in this paper will also work for all kind of malware but
in
this
paper
mainly
focuses
on
stager
meterpreter
payloads
because
meterpreter is capable of all the things that all other malware does, getting a
meterpreter
session
on
remote
machine
allows
many
things
like
privilege
escalation, credential stealing, process migration, registry manipulation and allot
more post exploitation, also meterpreter has a very active community and it’s
very popular among security researchers.
3. Terminology
Signature Based Detection:
Traditional antivirus software relies heavily upon signatures to identify malware.
Substantially, when a malware arrives in the hands of an antivirus firm, it is
analysed by malware researchers or by dynamic analysis systems. Then, once it
is determined to be a malware, a proper signature of the file is extracted and
added to the signatures database of the antivirus software.
Static Program Analyze:
Static program analysis is the analysis of computer software is performed
without actually executing programs.
In most cases the analysis is performed on some version of the source code, and
in the other cases, some form of the object code.
Dynamic Program Analyze:
Dynamic program analysis is the analysis of computer software that is performed
by executing programs on a real or virtual processor. For dynamic program
analysis to be effective, the target program must be executed with sufficient test
inputs to produce interesting behavior.
Sandbox:
In computer security, a sandbox is a security mechanism for separating running
programs. It is often used to execute untested or untrusted programs or code,
possibly from unverified or untrusted third parties, suppliers, users or websites,
without risking harm to the host machine or operating system.
INVICTUS
4
Security
Heuristic Analysis:
Heuristic analysis is a method employed by many computer antivirus programs
designed to detect previously unknown computer viruses, as well as new variants
of viruses already in the "wild".Heuristic analysis is an expert based analysis that
determines the susceptibility of a system towards particular threat/risk using
various decision rules or weighing methods. MultiCriteria analysis (MCA) is one of
the means of weighing. This method differs from statistical analysis, which bases
itself on the available data/statistics.
Entropy:
In computing, entropy is the randomness collected by an operating system or
application for use in cryptography or other uses that require random data. This
randomness is often collected from hardware sources, either pre-existing ones
such as mouse movements or specially provided randomness generators. A lack
of entropy can have a negative impact on performance and security.
4. Common Techniques
When it comes to reducing a malware’s detection score first things that comes in
mind are crypters, packers and code obfuscation. These tools and techniques are
still able to bypass good amount of AV product but because of the advancements
in cyber security field most of the tools and methods in the wild is outdated and
can’t produce FUD malware. For understanding the inner workings of these
techniques and tools i will give brief descriptions;
4.1
Obfuscation
Code obfuscation can be defined as mixing the source code of the binary without
disrupting the real function, it makes static analyzing harder and also changes
the hash signatures of the binary. Obfuscation can simply be implemented whit
adding few lines of garbage code or programmatically changing the execution
order of the instructions. This method can bypass good amount of AV product
but it depends on how much you obfuscate.
4.2
Packers
Executable packer is any means of compressing an executable file and combining
the compressed data with decompression code into a single executable. When
this compressed executable is executed, the decompression code recreates the
original code from the compressed code before executing it. In most cases this
happens transparently so the compressed executable can be used in exactly the
same way as the original. When a AV scanner scans a packed malware it needs
to determine the compression algorithm and decompress it. Because of files that
packed with packers are harder to analyze malware authors have a keen interest
on packers.
INVICTUS
5
Security
4.3
Crypters
Crypters are programs that encrypts the given binary for making it hard to
analyze or reverse engineer. A crypter exists of two parts, a builder and a stub,
builder simply just encrypts the given binary and places inside the stub, stub is
the most important piece of the crypter, when we execute the generated binary
first stub runs and decrypts the original binary to memory and then executes the
binary on memory via “RunPE” method(in most cases).
5. The Problem About Crypters & Packers
Before moving on to the effective methods, there are few thinks that needs to be
acknowledged about what is wrong in well-known techniques and tools. Today's
AV companies has already realized the danger, now instead of just searching for
malware signatures and harmful behavior they also search for signs of crypters
and packers. Compared to detecting malware detecting crypters and packers is
relatively easy because of they all have to do certain suspicious things like
decrypting the encrypted PE file and executing it on the memory.
5.1
PE Injection:
In order to fully explain the in memory execution of a PE image i have to talk
about how windows loads the PE files. Generally when compiling a PE file the
compiler sets the main module address at 0x00400000, while compile process all
the full address pointers and addresses at long jump instructions are calculated
according to main module address, at the end of compiling process compiler
creates a relocation table section in PE file, relocation section contains the
addresses of instructions that depends on the base address of the image, such as
full address pointers and long jump instruction.
INVICTUS
6
Security
While in execution of the PE image, operating system checks the availability of
the PE image’s preferred address space, if the preferred space is not available,
operating system loads the PE image to a random available address on memory,
before starting the process system loader needs to adjust the absolute addresses
on memory, with the help of relocation section system loader fixes the all
address
dependent
instructions
and
starts
the
suspended
process.
All
this
mechanism is called “Address Layout Randomization”.
In order to execute a PE image on memory crypters needs to parse the PE
headers and relocate the absolute addresses, simply they have to mimic system
loader witch is very unusual and suspicious. When we analyze crypters written in
c or higher level languages in almost every cases we could see these windows
API
functions
called
“NtUnmapViewOfSection”
and
“ZwUnmapViewOfSection”
these functions simply
unmaps a view of a section from the virtual address
space of a subject process, they play a very important role at in memory
execution method called RunPE which almost %90 of crypters uses.
Of course AV products can’t just declare malicious for every program that uses
these windows API functions, but the order of using this functions matter a lot.
There are small percentage of crypters (mostly written in assembly) witch does
not uses these functions and performs the relocation manually, they are very
effective at the time but sooner or later usage of crypters will not be profitable
because of logically no non harmful program tries to mimic the system loader.
Another downside is huge entropy increase on input files, because of encrypting
the entire PE file, entropy will rise inevitably, when AV scanners detects unusual
entropy on a PE file they will probably mark the file as suspicious.
6. Perfect Approach
The concept of encrypting the malicious code is clever but the decryption
function should be obfuscated properly and when it comes to executing the
decrypted code in memory we have to do it without relocating the absolute
addresses, also there has to be a detection mechanism checking for weather the
malware is analyzing dynamically in a sand box or not, if detection mechanism
detects that malware is being analyzed by the AV then the decryption function
shouldn’t
be executed.
Instead
of encrypting the entire PE
file encrypting
shellcodes or only the .text section of the binary is much more suitable, it keeps
the entropy and size low and makes no changes to image headers and sections.
INVICTUS
7
Security
This will be the malware flow chart.
INVICTUS
8
Security
Our “AV Detect.” function will detect if the malware is being analyze dynamically
in a sandbox or not, if the function detects any sign of AV scanner then it will call
the main function again or just crash, if “AV Detect” function don’t finds any sign
of AV scanner it will call the “Decrypt Shellcode” function
This is meterpreter reverse TCP shellcode in raw format.
INVICTUS
9
Security
For keeping the entropy and size in appropriate value i will pass this shellcode to
simple xor cipher with a multi byte key, xor is not an encryption standard like