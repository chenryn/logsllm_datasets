4.7
4.5
perspective, it can help us ﬁnd out which online devices
are still vulnerable and perform security patches for criti-
cal infrastructure immediately. Normally one vulnerabil-
ity of IoT devices is associated with a particular model of
IoT devices. For instance, a buffer overﬂow vulnerabil-
ity CVE-2015-4409 has occurred in the Hikvision DS-
76xxNI-E1/2 series and Hikvision DS-77xxxNI-E4 se-
ries devices.
We develop the VDA application to reveal underlying
vulnerable devices. VDA ﬁrst crawls the vulnerability
information from the NVD website [12] [5]. For every
vulnerability item, VDA obtains their vendor names and
product names. Then VDA uses the regex to match rules
with the vulnerability information. We extract the cat-
egory information of vulnerabilities and group similar
weakness descriptions. One vulnerability usually occurs
on multiple platforms and device models. Table 9 lists
the Common Weakness Enumeration (CWE) of online
IoT devices, in which the left column is the CWE ID,
the middle column is the weakness description, and the
right column is the number of IoT devices with this type
of vulnerability. The VDA application aims to reveal un-
derlying vulnerable devices accessible on the Internet.
Discovery. From Table 9, we can see that there is still
a large number of underlying vulnerable devices in the
cyberspace. The majority of the top 10 vulnerabilities
in the CWE list are related to improper implementation
(Path Traversal, Credentials Management, and Improper
Access Control), which could be easily avoided if a de-
veloper pays more attention to security. On the CVE
website, the security patches have been distributed for
those IoT devices. However, updating security patches
of IoT devices is a non-trivial task for many users. They
must download the ﬁrmware from the ofﬁcial support
website or via administrative tools, and then install the
ﬁrmware into the ROM to reprogram integrated chip cir-
cuits of the devices.
7 Related Work
IoT device recognition has gained much interest re-
cently, mostly due to the increasing number of IoT de-
Table 9: Top 10 CWE by the number of CVEs.
CWE
ID
200
22
352
264
255
79
119
399
284
77
Weakness Summary
Information Disclosure
Path Traversal
CSRF
Permission, Privileges, Access Control
Credentials Management
Cross-site Scripting
Buffer Overﬂow
Resource Management Errors
Improper Access Control
Command Injection
Number of
IoT devices
573,656
363,894
348,031
345,175
342,215
331,649
149,984
93,292
69,229
64727
vices that are connected to the Internet. The research
community has also proposed many recognition tech-
niques, particularly in two methodologies: ﬁngerprinting
and banner-grabbing.
Fingerprinting. We have witnessed a 20-year de-
velopment for ﬁngerprinting technologies, which map
the input to a narrower output for object identiﬁca-
tion [8, 10, 11, 15, 18, 19, 32, 35, 36, 39]. Dependent upon
the method of data collection, ﬁngerprinting can be di-
vided into active and passive. Active ﬁngerprinting is
to send probing packets to remote hosts for extracting
features and inferring the classiﬁcation model. One clas-
sic usage is OS ﬁngerprinting, which identiﬁes the OS
of a remote host based on the different implementations
of a TCP/IP network stack. Nmap [8] is the most pop-
ular tool for OS ﬁngerprinting, which sends 16 crafted
packets for extracting features. Xprobe [15] uses ICMP
packets to extract OS features. The retransmission time
between vantage points and hosts can be exploited as
another feature for OS ﬁngerprinting. Snacktime [11],
Hershel [36], and Faulds [35] use this feature to ﬁnger-
print OSes on the large scale. Passive ﬁngerprinting is to
collect the trafﬁc/behavior of an object without sending
probing packets. P0f [10] is the passive ﬁngerprinting
tool that extracts ongoing TCP packets to infer different
OS versions. Kohno et al. [32] proposed monitoring TCP
trafﬁc for calculating the clock skews as features.
In general, a ﬁngerprinting tool consists of three major
components: feature selection, training data collection,
and learning algorithms. Prior works are focused on how
to select distinctive features for ﬁngerprinting OS ver-
sions. However, due to the lack of training data, we can-
not apply ﬁngerprinting techniques for identifying IoT
devices. Furthermore, the number of different IoT de-
vice models is vast, and it is impossible to manually col-
lect the training data. Thus, we propose ARE that is able
to learn the rules for automatic IoT device identiﬁcation
without any training data or human effort.
USENIX Association
27th USENIX Security Symposium    339
Banner-grabbing. The banner-grabbing technique is
to proﬁle the text information of applications and soft-
ware services. Nowadays various tools have been used
to gather web applications for administrative and security
auditing purposes. WhatWeb [14] is a website auditing
tool that uses 1,000 plugins (similar to regex) to recog-
nize the platform version of a website. Wapplyzer [13]
is an open-source tool for identifying web applications,
which extracts response headers of websites and uses
regex patterns for matching. Nmap [8] also provides a
service library to identify application and web services
for end users. For annotating IoT devices, people cur-
rently tend to use banner-grabbing in practice.
In the
analysis of the Mirai botnet [21], the regex in banner-
grabbing is used to annotate the device type, vendors,
and products. Xuan et.al [30] proposed to utilized the
banner of industrial control protocols to ﬁnd a critical in-
frastructure equipment. Shodan [37] and Censys [25] use
a set of rules in the banner-grabbing technique to identify
online devices.
To use those banner-grabbing tools, developers usu-
ally need the necessary background knowledge to write
the regex/extensions for grabbing application informa-
tion. This has to be done in a manual fashion, which
incurs high time cost, impeding a large-scale annotation.
By contrast, ARE overcomes these obstacles by automat-
ically generating rules.
8 Conclusions
As the increasing number of IoT devices are connected
to the Internet, discovering and annotating those devices
is essential for administrative and security purposes. In
this paper, we propose an Acquisitional Rule-based En-
gine (ARE) for discovering and annotating IoT devices.
ARE automates the rule generation process without hu-
man effort or training data. We implement a prototype
of ARE and conduct experiments to evaluate its perfor-
mance. Our results show that ARE can achieve a preci-
sion of 97%. Furthermore, we apply ARE to three ap-
plication cases: (1) inferring and characterizing millions
of IoT devices in the whole IPv4 space, (2) discovering
thousands of compromised IoT devices with malicious
behaviors, and (3) revealing hundreds of thousands of
IoT devices that are still vulnerable to malicious attacks.
Acknowledgments
We are grateful to our shepherd Gang Wang and anony-
mous reviewers for their insightful feedback. This work
was supported in part by the National Key R&D Program
of China (Grant No. 2016YFB0801303-1), Key Program
of National Natural Science Foundation of China (Grant
No. U1766215) and National Natural Science Founda-
tion of China (Grant No. 61602029).
References
[1] 20.8 billion IoT devices by 2020. https://www.gartner.
com/newsroom/id/3598917.
[2] Apache Kafka. https://kafka.apache.org.
[3] Apyori, a simple implementation of Apriori algorithm with
Python. https://pypi.python.org/pypi/apyori/1.1.1.
[4] Beautiful Soup, A Python library designed for quick
turnaround projects. https://www.crummy.com/software/
BeautifulSoup/.
[5] Common Vulnerabilities and Exposures. http://cve.mitre.
org/.
[6] Cowrie SSH/Telnet Honeypot.
micheloosterhof/cowrie.
https://github.com/
[7] Natural language toolkit. http://www.nltk.org/.
[8] Nmap, network security scanner tool. https://nmap.org/.
[9] Nmap service detection probe list.
https://github.com/
nmap/nmap/blob/master/nmap-service-probes.
[10] P0f: The passive OS and application tool for penetration test-
ing, routine network monitoring, and forensics, 2004. http:
//freshmeat.net/projects/p0f/.
[11] Snacktime: A perl solution for remote os ﬁngerprinting.
[12] U.s. national institute of standards and technology. national vul-
nerability database. https://nvd.nist.gov/home.cfm.
[13] Wappalyzer identify technology on websites.
[14] Whatweb identiﬁes websites.
urbanadventurer/whatweb/wiki.
https://github.com/
[15] Xprobe2 - a remote active operating system ﬁngerprinting tool.
https://linux.die.net/man/1/xprobe2.
[16] ZTag, an utility for annotating raw scan data with additional
metadata. http://github.com/zmap/ztag.
[17] Abiword. Enchant. http://www.abisource.com/projects/
enchant/, 2010.
[18] ACAR, G., EUBANK, C., ENGLEHARDT, S., JU ´AREZ, M.,
NARAYANAN, A., AND D´IAZ, C. The web never forgets: Persis-
tent tracking mechanisms in the wild. In Proceedings of the 2014
ACM SIGSAC Conference on Computer and Communications
Security, Scottsdale, AZ, USA, November 3-7, 2014, pp. 674–
689.
[19] ACAR, G.,
JU ´AREZ, M., NIKIFORAKIS, N., D´IAZ, C.,
G ¨URSES, S. F., PIESSENS, F., AND PRENEEL, B.
Fpde-
In 2013
tective:
ACM SIGSAC Conference on Computer and Communications
Security, CCS’13, Berlin, Germany, November 4-8, 2013,
pp. 1129–1140.
dusting the web for ﬁngerprinters.
[20] AMAZON. Amazon elastic compute cloud (amazon ec2). https:
//aws.amazon.com/ec2/, 2013.
[21] ANTONAKAKIS, M., APRIL, T., BAILEY, M., BERNHARD, M.,
BURSZTEIN, E., COCHRAN, J., DURUMERIC, Z., HALDER-
MAN, J. A., INVERNIZZI, L., KALLITSIS, M., KUMAR, D.,
LEVER, C., MA, Z., MASON, J., MENSCHER, D., SEAMAN,
C., SULLIVAN, N., THOMAS, K., AND ZHOU, Y. Understand-
In 26th USENIX Security Symposium,
ing the mirai botnet.
USENIX Security 2017, Vancouver, BC, Canada, August 16-18,
2017., pp. 1093–1110.
340    27th USENIX Security Symposium
USENIX Association
[36] SHAMSI, Z., NANDWANI, A., LEONARD, D., AND LOGU-
INOV, D. Hershel: single-packet os ﬁngerprinting.
In ACM
SIGMETRICS / International Conference on Measurement and
Modeling of Computer Systems, SIGMETRICS ’14, Austin, TX,
USA - June 16 - 20, 2014, pp. 195–206.
[37] SHODAN. The search engine for Internet-connected devices.
https://www.shodan.io/.
[38] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C., KRUEGEL,
C., AND VIGNA, G. Firmalice - automatic detection of au-
thentication bypass vulnerabilities in binary ﬁrmware.
In 22nd
Annual Network and Distributed System Security Symposium,
NDSS 2015, San Diego, California, USA, February 8-11, 2015.
[39] STAROV, O., AND NIKIFORAKIS, N. XHOUND: quantify-
ing the ﬁngerprintability of browser extensions.
In 2017 IEEE
Symposium on Security and Privacy, SP 2017, San Jose, CA,
USA, May 22-26, 2017, pp. 941–956.
[40] VENKATARAMAN, S., CABALLERO, J., POOSANKAM, P.,
Fig: Automatic ﬁn-
KANG, M. G., AND SONG, D. X.
gerprint generation.
In Proceedings of the Network and
Distributed System Security Symposium, NDSS 2007, San
Diego, California, USA, 28th February - 2nd March 2007.
[22] BEVERLY, R. Yarrp’ing the internet: Randomized high-speed
active topology discovery.
In Proceedings of the 2016 ACM
on Internet Measurement Conference, IMC 2016, Santa Monica,
CA, USA, November 14-16, 2016, pp. 413–420.
[23] CUI, A., COSTELLO, M., AND STOLFO, S. J. When ﬁrmware
modiﬁcations attack: A case study of embedded exploita-
tion. In 20th Annual Network and Distributed System Security
Symposium, NDSS 2013, San Diego, California, USA, February
24-27, 2013.
[24] CUI, A., AND STOLFO, S. J. A quantitative analysis of the in-
security of embedded network devices: results of a wide-area
scan. In Twenty-Sixth Annual Computer Security Applications
Conference, ACSAC 2010, Austin, Texas, USA, 6-10 December
2010, pp. 97–106.
[25] DURUMERIC, Z., ADRIAN, D., MIRIAN, A., BAILEY, M., AND
HALDERMAN, J. A. A search engine backed by internet-wide
scanning. In Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security, Denver, CO, USA,
October 12-6, 2015, pp. 542–553.
[26] DURUMERIC, Z., KASTEN, J., ADRIAN, D., HALDERMAN,
J. A., BAILEY, M., LI, F., WEAVER, N., AMANN, J., BEEK-
MAN, J., PAYER, M., AND PAXSON, V.
The matter of
In Proceedings of the 2014 Internet Measurement
heartbleed.
Conference, IMC 2014, Vancouver, BC, Canada, November 5-7,
2014, pp. 475–488.
[27] ENGLEHARDT, S., AND NARAYANAN, A. Online tracking:
A 1-million-site measurement and analysis.
In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, Vienna, Austria, October 24-28, 2016,
pp. 1388–1401.
[28] FACHKHA, C., BOU-HARB, E., KELIRIS, A., MEMON, N.,
Internet-scale probing of cps: Inference,
AND AHAMAD, M.
In Proceedings of
characterization and orchestration analysis.
Network and Distributed System Security Symposium (2017),
vol. 17.
[29] FARINHOLT, B., REZAEIRAD, M., PEARCE, P., DHARM-
DASANI, H., YIN, H., BLOND, S. L., MCCOY, D., AND
LEVCHENKO, K. To catch a ratter: Monitoring the behavior of
amateur darkcomet RAT operators in the wild.
In 2017 IEEE
Symposium on Security and Privacy, SP 2017, San Jose, CA,
USA, May 22-26, 2017, pp. 770–787.
[30] FENG, X., LI, Q., WANG, H., AND SUN, L. Characterizing
industrial control system devices on the internet. In 24th IEEE
International Conference on Network Protocols, ICNP 2016,
Singapore, November 8-11, 2016.
[31] HEIDEMANN, J. S., PRYADKIN, Y., GOVINDAN, R., PA-
PADOPOULOS, C., BARTLETT, G., AND BANNISTER, J. A.
Census and survey of the visible internet. In Proceedings of the
8th ACM SIGCOMM Internet Measurement Conference, IMC
2008, Vouliagmeni, Greece, October 20-22, 2008, pp. 169–182.
[32] KOHNO, T., BROIDO, A., AND CLAFFY, K. C. Remote physi-
cal device ﬁngerprinting. IEEE Transactions on Dependable and
Secure Computing 2, 2 (April 2005), 93–108.
[33] LEONARD, D., AND LOGUINOV, D. Demystifying service dis-
covery: implementing an internet-wide scanner. In Proceedings
of the 10th ACM SIGCOMM Internet Measurement Conference,
IMC 2010, Melbourne, Australia - November 1-3, 2010, pp. 109–
122.
[34] MAXMIND. Maxmind geoip2. https://www.maxmind.com/
en/geoip2-services-and-databases, 2016.
[35] SHAMSI, Z., CLINE, D. B. H., AND LOGUINOV, D. Faulds:
A non-parametric iterative classiﬁer for internet-wide OS ﬁnger-
printing. In Proceedings of the 2017 ACM SIGSAC Conference
on Computer and Communications Security, CCS 2017, Dallas,
TX, USA, October 30 - November 03, 2017, pp. 971–982.
USENIX Association
27th USENIX Security Symposium    341