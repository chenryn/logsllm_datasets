nodenum=127 
def lson(x): 
    ret=x*2 
    if ret > nodenum: 
        print "l erro" 
        ret=0 
    return ret 
def rson(x): 
    ret=(x*2)+1 
    if ret > nodenum: 
        print "r erro" 
        ret=0 
    return ret 
def d(x): 
    if x >> s='53534354467b5353435446266e3163613163613126326f6936262a2e2a7d' 
>>> s.decode('hex') 
'SSCTF{SSCTF&n1ca1ca1&2oi6&*.*}' 
''' 
Misc300(Hungry Game) 
这道题目是一个 js 写的游戏，最终目的是打 boss。 
在解题的过程中，有这么几层： 
第一层：有一道过不去的门，提示找钥匙但是并不知道钥匙在哪。通过阅读 game.js 代码可
以知道，游戏通过发送 msg('next', {}) 来进入下一关。所以果断打开浏览器控制台输入如下
代码： 
ws.send(JSON.stringify([msg('next', {})])); 
即可进入下一层。 
第二层：从这里开始游戏不允许直接跳关。游戏要求采集 9999 的木头，按住空格，1 秒一
个。然而游戏时间限制在 5 分钟，通常手段必然过不去。阅读 game.js 得知 msg('wood', {'time': 
tmp})为发送到服务器的数据，tmp 是时间(毫秒)，所以构造 payload： 
ws.send(JSON.stringify([msg('wood',{'time':100000000000000})]));ws.send(JSON.stringify([msg('
next', {})])); 
即可进入下一关。 
第三层：游戏要求采集 9999 的钻石，按空格一下一个。采用和第二层相同的方式，发现服
务器有检查，不能按得过快(也就是不能在一次内采集过多钻石)，于是改为 for 循环形式： 
for(var 
i=0;i 1: 
continue 
self.PA_FOUND = 1 
self.PA_RESULT = (nextx,nexty) 
return 
elif self.PA_FOUND: 
return 
return 
def GetPivotOutsideBlock(self,pos): 
#print pos 
#DIRECTION = [(1,0),(-1,0),(0,-1),(0,1)] 
#DIRECTIONJ = [(1,0),(-1,0),(0,-1),(0,1)] 
DIRECTIONJ = [(0,-1),(1,0),(-1,0),(0,1)] 
DIRECTION = [(0,-1),(1,0),(-1,0),(0,1)] 
self.VISITED[pos[0]][pos[1]] = 1 
for i in DIRECTION: 
nextx = pos[0] + i[0] 
nexty = pos[1] + i[1] 
#print 'Going ', (nextx,nexty) 
if not self.VISITED[nextx][nexty] and 
self.MAP[nextx][nexty] == '@': 
self.GetPivotOutsideBlock((nextx,nexty)) 
if self.PO_FOUND: return 
for j in DIRECTIONJ: 
kx = nextx + j[0] 
ky = nexty + j[1] 
if self.MAP[kx][ky] == '.': 
self.PO_FOUND = 1 
self.PO_RESULT = (nextx,nexty) 
return 
return 
def GetPivotPos(self,id): 
return self.PIVOT[id] 
# FIXED 
def ReadMap(self): 
# init 
self.MAP = [] 
self.BLOCK = [] 
self.PIVOT = [] 
self.POSX = 0 
self.POSY = 0 
map_buf = list(self.IO.recv(99999)) 
t = map_buf 
try: 
while map_buf[0] != '#': 
map_buf.pop(0) 
# remove all dummy characters 
except Exception,e: 
print e, t 
self.IO.interactive() 
X = 0 
Y = 0 
while 1: 
self.MAP.append([]) 
Y = 0 
while 1: 
ch = map_buf.pop(0) 
#print ord(ch) 
if ch == '\n': 
self.MAXY = Y 
break 
self.MAP[X].append(ch) 
Y += 1 
X += 1 
if len(map_buf) == 0: 
break 
self.MAXX = X 
# scan map for pivots 
self.VISITED = [] 
for i in range(self.MAXX): 
self.VISITED.append([]) 
for j in range(self.MAXY): 
self.VISITED[i].append(0) 
for i in range(self.MAXX): 
for j in range(self.MAXY): 
if self.MAP[i][j] == 'A': 
self.POSX = i 
self.POSY = j 
elif self.MAP[i][j] == '$': 
self.BLOCK.append([]) 
self.ScanPivot((i,j),len(self.PIVOT)) 
self.PIVOT.append((i,j)) 
return 
def GotoPos(self,pos,ignoreBlocks=True): 
print 'Going to', pos 
path = '' 
q = [] 
visit = [] 
for i in range(self.MAXX): 
visit.append([]) 
for j in range(self.MAXY): 
visit[i].append(0) 
visit[self.POSX][self.POSY] = 1 
q.append({'pos':(self.POSX,self.POSY,''),'prev':0}) 
DIRECTION = [(0,1,'l'),(1,0,'j'),(-1,0,'k'),(0,-1,'h')] 
while len(q) > 0: 
cur = q.pop(0) 
if cur['pos'][0] == pos[0] and cur['pos'][1] == pos[1]: 
while isinstance(cur,dict): 
path = cur['pos'][2] + path 
cur = cur['prev'] 
return path 
for i in DIRECTION: 
next_x = cur['pos'][0] + i[0] 
next_y = cur['pos'][1] + i[1] 
if not visit[next_x][next_y] and 
self.MAP[next_x][next_y] != '#' and self.MAP[next_x][next_y] != '$': 
if not ignoreBlocks and self.MAP[next_x][next_y] == 
'@': 
continue 
q.append({'pos':(next_x,next_y,i[2]),'prev':cur}) 
visit[next_x][next_y] = 1 
# cannot get there 