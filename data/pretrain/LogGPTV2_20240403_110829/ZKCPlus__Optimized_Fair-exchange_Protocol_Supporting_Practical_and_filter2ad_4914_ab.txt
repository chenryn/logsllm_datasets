knowledge argument Arg can be transformed into a non-interactive
zero-knowledge (NIZK) argument of knowledge, where V’s mes-
sages are replaced by outputs of a cryptographic hash function
over the transcript up to the point. We model the resulting NIZK
argument as a tuple of algorithms Π = (KeyGen, Prove, Verify) s.t.
• KeyGen(1𝜆) → 𝜎 generates the CRS 𝜎 on input parameter 𝜆;
• Prove(𝜎, s, w) → 𝜋 outputs proof 𝜋 for R(s, w) = 1;
• Verify(𝜎, s, 𝜋) → b accepts (b = 1) or rejects (b = 0) the proof 𝜋.
In random oracle model, the resulting Π has perfect completeness,
computational knowledge soundness and zero-knowledge (formal defi-
nitions in Appendix A.4), provided that the original interactive argu-
ment Arg has perfect completeness, computational witness-extended
emulation, and special honest-verifier zero-knowledge [4].
In Appendix B, we describe an argument for inner products for
vectors from [31], a basic building block that we use repeatedly on
various occasions throughout this work.
2.4 Commit-and-prove arguments
We adopt the notion of commit-and-prove non-interactive argu-
ments from LegoSNARK [12]. For a relation R and a commitment
scheme Com with message space Mpp, a commit-and-prove NIZK
(CP-NIZK) argument of knowledge proves the knowledge of a wit-
ness w for a statement s s.t. R(s, w) = 1, where w = (u, aux) splits into
a message part u ∈ Mpp which opens a specified commitment c, and
an auxiliary part aux. More specifically, it demonstrates a relation
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3004Figure 1: Block cipher in CTR mode
RCom defined over pairs (s, w) where s = (s, c) and w = (u, r, aux),
s.t. RCom(s, w) = 1 iff
Com.Check(pp, c, u, r) = 1 ∧ R(s, (u, aux)) = 1.
(1)
s = (s, c) and witness w = (u, r, aux);
eters of the commitment scheme pp ← Com.Setup(1𝜆);
We model the CP-NIZK argument of knowledge as a tuple of algo-
rithms ΠCom = (KeyGen, Prove, Verify) where
• KeyGen(1𝜆) → 𝜎 generates 𝜎, which includes the public param-
• Prove(𝜎, (s, c), (u, r, aux)) → 𝜋 outputs proof 𝜋 for statement
• Verify(𝜎, (s, c), 𝜋) → b accepts (b = 1) or rejects (b = 0).
It should satisfy the notion of completeness, knowledge soundness,
and zero-knowledge as a usual NIZK argument of knowledge. In
practice, u may split into many segments. Informally, we write
u = {ui}, and they are committed as c = {ci} with blinders r = {ri}.
Correspondingly, RCom holds iff
Com.Check(pp, ci, ui, ri) = 1 ∧ R(s, ({ui}, aux)) = 1.
(2)

i
The notion of commit-and-prove allows a “bottom-up” approach
to build arguments for composed relations. The base case is the
conjunction of relations with shared inputs. For two CP-NIZK argu-
ments of knowledge ΠCom
1 which respectively attesting
relations R0(s0, (u, aux0)) = 1 and R1(s1, (u, aux1)) = 1, with shared
input u. It is proved that for a computationally binding commitment
scheme Com, there exists a CP-NIZK argument of knowledge ΠCom∧
for conjunction of R0 and R1. More specifically, ΠCom∧ works for
relation R∧ s.t R∧((s0, s1), (u, aux0, aux1)) = 1 iff
and ΠCom
0
R0(s0, (u, aux0)) = 1 ∧ R1(s1, (u, aux1)) = 1.
(3)
Extension to conjunctions of more than two relations is trivial. Dis-
junctions and sequential composition of functions can be reduced
to this base case as well. Refer to Appendix C for more details.
and ΠCom
link . Let ΠCom
Herein we single out a special type of CP-NIZK argument de-
be CP-NIZK arguments of
noted as ΠCom
1
knowledge for relation R0 and R1 s.t. R0(s0, (u0, aux0)) = 1, and
R1(s1, (u1, aux1)) = 1. Argument ΠCom
link shares input u0 with ΠCom
,
input u1 with ΠCom
, and proves that u0 and u1 are related by an in-
terlinking function f s.t. f (u0, u1) = 0. By composability of CP-NIZK
arguments, ΠCom
R0(s0, (u0, aux0)) = 1 ∧ R1(s1, (u1, aux1)) = 1 ∧ f (u0, u1) = 0. (4)
link jointly prove the relation
and ΠCom
, ΠCom
0
0
1
0
1
0
1
and ΠCom
link acts as an adaptor between ΠCom
Therefore, ΠCom
. With
link , it is possible to assemble small CP-NIZK arguments together,
ΠCom
and build an argument that works for very complicated relations.
2.5 Rank-1 constraint system
Rank-1 Constraint System (R1CS) extends the notion of Quadratic
Arithmetic Program (QAP) [27], and offers a convenient description
for arithmetic circuits. For a circuit of size m (containing m multi-
plication gates), its corresponding R1CS is written as {A, B, C, s; w},
where A, B, C ∈ Fm×l
are the coefficient matrices, s represents the
p
public input, and w the witness for the circuit. An assignment
x = (1, s, w) ∈ Fl
p satisfies the circuit iff
Ax ◦ Bx = Cx.
(5)
For simplicity, in the following we shall assume m = l.
2.6 MiMC block cipher
MiMC [1] is a family of symmetric cryptographic primitives that
works natively in finite fields. In particular, MiMC-p/p is a block
cipher Ck(·) operating over a prime field Fp, constructed by embed-
ding a non-linear permutation F(x) = xd for x ∈ Fp in its round func-
tion, where the exponent d satisfies the condition gcd(d, p – 1) = 1.
For each round, the round function is defined as Fi(x) = F(x + k + ci),
where k denotes the encryption key, and ci a round constant. The
number of rounds should be sufficiently large to thwart the interpo-
lation attacks [36]. The block cipher is arithmetic circuit friendly;
for example, it promises 129-bit security with only 82 multiplica-
tions in Fp.
We use the MiMC-p/p block cipher in the counter (CTR) mode.
An arbitrary input message x is encoded as a vector over Fp of
length n. With key k, x ∈ Fn
p is encrypted into ciphertext z ∈ Fn
p,
whose i-th element is computed by
zi = xi + Ck(ctri),
(6)
where counter ctri is offset by a random nonce, ctri = nonce+ i, and
the operation + is defined in Fp. Collectively, we write z = Enck(x).
2.7 Blockchain and smart contract
Bitcoin [44] is a decentralized ledger system jointly maintained
by indefinite number of nodes via a peer-to-peer consensus pro-
tocol. If a majority of the nodes honour the protocol, the ledger
is ensured correctness without any centralized coordination. On
Bitcoin blockchain, users’ currencies and transactions are managed
by simple Bitcoin scripts with limited functionalities.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3005Going one step further, Ethereum [54] extends the ledger to
a “world state” consisting of rich variables, which can be modi-
fied by code called “smart contracts”. A smart contract consists of
global variables and functions, and the functions can be invoked by
Ethereum users or other contracts reactively. The miners execute
the invoked functions to update the global state of the ledger. In con-
trast with the limited Bitcoin scripts, smart contracts on Ethereum
support Turing complete language. In particular, it allows elliptic
curve operations, so on-chain Pedersen commitment opening is
made easy.
3 Building block: CP-NIZK argument for data-parallel
computations
In this section, we focus on the construction of an efficient CP-NIZK
argument for data-parallel circuits. We say an arithmetic circuit is
data-parallel if it consists of multiple copies of identical sub-circuits
running on separated inputs. This argument is a core building block
for our ZKCPlus protocol.
3.1 Argument construction
Consider a data-parallel circuit consisting of n identical sub-circuits,
and each sub-circuit is of size m. Instead of constructing a large
R1CS for the whole circuit of size n × m, we use R1CS for the sub-
circuit of size m and apply it to n assignments. Specifically, we
define matrix
X = [x1, . . . , xn] ∈ Fm×n
(9)
where xk is the assignment to the k-th sub-circuit. The satisfiability
relation for the whole circuit can be stated concisely as
p
,
AX ◦ BX = CX.
(10)
Instead of interpreting X as a collection of n columns of xk ∈ Fm
p ,
each of length m, henceforth we view it as a stack of m row vectors
each of length n. We denote the row vectors as vj ∈ Fn
p for j ∈ [m].
They are divided into two categories, those corresponding to public
inputs (statement) with j ∈ pub, and those for P’s private inputs
(witness) with j ∈ priv, where pub ∪ priv = [m]. We reformulate
the satisfiability relation of (10) as m identities about Hadamard
products, namely
,
p
(A, B, C) ∈ Fm×m
{vj ∈ Fn
p}j∈pub;
{vj ∈ Fn
p}j∈priv
ai =
bi =
ci =

j∈[m] Aij · vj,
j∈[m] Bij · vj,
j∈[m] Cij · vj,
i∈[m] ai ◦ bi = ci
 ,
(11)
where Mij denotes an element of matrix M with row and column
indices i and j for M ∈ {A, B, C}. We build an interactive protocol for
this relation using techniques in [11, 31]. The details are in Figure 2.
The protocol relies on the Pedersen commitment scheme Com
as described in Section 2.2. In a nutshell, it involves a prover P com-
mitting vj as Vj. With Vj the verifier V can compute commitments
to ai, bi, ci utilizing the homomorphic property of Com as
Cij · Vj.
Bij · Vj, Ci = 
Ai = 
Bi = 
Aij · Vj,
(12)
j∈[m]
j∈[m]
j∈[m]
Then P contrives to convince V that for i ∈ [m] the vectors ai, bi, ci
satisfy the equations ai ◦ bi = ci. It is in turn converted into an
equation for inner product ⟨ai, bi ◦ yn⟩ – ⟨ci, yn⟩ = 0, where yn =
Public input: R1CS instance A, B, C ∈ Fm×m
P’s private input: {vj ∈ Fn
p
.
p}i∈[m].
(Vj, 𝜈j) ← Commit(pp, vj).
P : for i ∈ [m]
P → V : {Vj}j∈[m].
$← Fp.
V → P : w, y
P : for i ∈ [m]
li = wi ·(cid:0)
ri =(cid:0)
𝜄i = wi ·(cid:0)
𝜌i =(cid:0)
j
j
j
Bij · vj
Aij · vj
(cid:1),
(cid:1) ◦ yn,
(cid:1),
(cid:1),
Aij · 𝜈j
li+m = wi ·(cid:0)
𝜄i+m = wi ·(cid:0)
ri+m = –yn,
j
𝜌i+m = 0.
(cid:1),
(cid:1),
Cij · vj
Cij · 𝜈j
j
p}i∈[2m], {𝜄i, 𝜌i ∈ Fp}i∈[2m], 𝜏 = 0.
Bij · 𝜈j
P’s private input: {li, ri ∈ Fn
j
d
i=1
Repeat for k in [log m . . . 0]:
t+
k =
⟨li, ri+d⟩,
P : d = 2k,
k ) ← Commit(pp, t+
(T +
k , 𝜏+
k ),
P −→ V : T +
k , T –
k .
$← Fp.
V −→ P : uk
P : for i ∈ [d]
d
t–
k =
i=1
(T –
k , 𝜏–
⟨li+d, ri⟩,
k ) ← Commit(pp, t–
k ).
(7)
(8)
k
li ← uk · li + u–1
𝜄i ← uk · 𝜄i + u–1
𝜏 ← 𝜏 + u2
k · 𝜏+
· li+d,
· 𝜄i+d,
k
k + u–2
k
ri ← u–1
ri ← u–1
· 𝜏–
k .
k
k
· li + uk · ri+d,
· 𝜌i + uk · 𝜌i+d,
l = 
𝜄 = 
Reduced : z = (u0u1 · · · uk, u0u1 · · · u–1
k , . . . , u–1
z–1
i
z–1
i
· 𝜏–
k .
zi · li,
zi · 𝜄i,
k · 𝜏+
u2
i∈[2m]
k + u–2
k
· ri,