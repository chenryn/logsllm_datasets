# Presentation on Pre-Boot Authentication Vulnerabilities

## Who Am I?
This presentation introduces a new class of vulnerabilities affecting multiple pre-boot authentication software under x86 and x64 architectures, which can be exploited without physical access. The focus will be solely on password-based authentication.

## Scope of the Presentation
- **Introduction to Pre-Boot Authentication**
- **Password Leakage in Windows**
- **Password Leakage in *nix Systems**
- **Rebooting Despite Pre-Boot Authentication**
- **Examples of Vulnerable Software**
- **Mitigating These Vulnerabilities**

## Contents
1. (Technically) Defining Pre-Boot Authentication
2. Password Leakage under Windows
3. Password Leakage under *nix
4. Rebooting Despite Pre-Boot Authentication
5. Examples of Vulnerable Software
6. Mitigating These Vulnerabilities

### I. (Technically) Defining Pre-Boot Authentication
1. **Boot Sequence Overview**
2. **Taxonomy of Pre-Boot Authentication Software**
   - BIOS Passwords
   - Bootloader Passwords (e.g., BitLocker, GRUB, LILO, TrueCrypt, DiskCryptor)
   - Early Kernel Stage Passwords (e.g., Suspend2 hibernation patch for GNU/Linux)
3. **BIOS API for User Inputs**
   - **Interruption 0x16 Functions:**
     - `ah=0x00`: "Get keystroke" - Returns the keystroke scancode in AH and its ASCII code in AL.
     - `ah=0x01`: "Check for keystroke" - Sets the Zero Flag if no keystroke is available in the BIOS keyboard buffer.
4. **BIOS Internals for Keyboard Management**
5. **BIOS Keyboard Buffer Remanence**
   - Filling the BIOS keyboard buffer with the keyboard
   - Reading the BIOS keyboard buffer using `int 0x16, ah=0x00` or `ah=0x01`
   - Who is responsible for clearing the keyboard buffer?
6. **Verifying the Bug in Real Life**
   - Writing a small USB-bootable OS in 16-bit assembly to read the BIOS keyboard buffer in Real Mode.
   - Results: Most BIOS passwords are vulnerable.
7. **Password Chaining**
   - If two authentication devices are used sequentially, the passwords may be concatenated in the BIOS keyboard buffer.

### II. Password Leakage under Windows
1. **The Challenge**
   - How to read the password at `0x40:0x1e` once in protected mode.
2. **Possible Attack Scenarios**
   - Returning to real-mode
   - Switching to System Management Mode (SMM)
   - Retrieving from kernel land
   - All scenarios require high privileges.
3. **Reading the Password from a Guest Account**
   - MS-DOS emulation mode: Maps physical memory ranges into userland, allowing potential access to the password.

### III. Password Leakage under *nix
1. **Challenge**
   - No direct RAM leakage as in Windows; requires retrieval from a privileged account.
2. **Getting the Password from User Land**
   - Using `/dev/mem`, `/dev/kmem`, and `/dev/kcore` to map physical and kernel memory.
   - A simple tool to read possible passwords from these mappings.
3. **Getting the Password from Kernel Land**
   - The BIOS Data Area is copied to a "safe" zone during early booting.
   - Verifying the password location using remote kernel debugging.
   - A simple Loadable Kernel Module (LKM) to display possible passwords in the `/proc` pseudo-filesystem.
4. **Conclusion**
   - This bug has been present since the inception of BIOS passwords (over 25 years).
   - Retrieving the password is as simple as reading a file at a specific location.

### IV. Rebooting Despite Pre-Boot Authentication
1. **Agenda**
   - Handling cases where the password is not used for decryption.
   - Handling cases where the password is used for disk decryption.
2. **Rebooting Without Disk Encryption**
   - Patching the password checking routine.
3. **Rebooting with a Password Used for Disk Decryption**
   - Exploiting the BIOS keyboard buffer feature.
   - Attack scenario and methodology to install a rogue bootloader.

### V. Examples of Vulnerable Software
1. **Vulnerable Software**
   - BIOS Passwords: Award BIOS, Insyde BIOS, Intel Corp, Hewlett-Packard, Lenovo
   - Full Disk Encryption: BitLocker, TrueCrypt, DiskCryptor, Secu Star DriveCrypt Plus Pack
   - Boot Loader Passwords: GRUB, LILO
   - Other Software: Software suspend 2 (TuxOnIce)
2. **Non-Vulnerable Software**
   - BIOS Passwords: Hewlett-Packard, Phoenix Technologies
   - Full Disk Encryption: SafeGuard, PGP Desktop Professional

### VI. Mitigating These Vulnerabilities
- **Write Correct Software:** Sanitize the BIOS keyboard buffer (and other password buffers) before and after use.
- **Patches:** Available on our website: [http://www.ivizindia.com/BIOS-patches/](http://www.ivizindia.com/BIOS-patches/)

### Greetings
- Thanks to my elite reviewers, the iViZ Technical Team, and everyone who attended this presentation. Special thanks to the [http://www.everybody-dies.com/](http://www.everybody-dies.com/) website for the screenshots and to irc.pulltheplug.org and irc.blacksecurity.org for their support.