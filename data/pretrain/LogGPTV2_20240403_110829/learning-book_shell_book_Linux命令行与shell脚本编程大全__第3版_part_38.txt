SUSER、SUID和SHOME环境变量用来显示已登录用户的有关信息。脚本输出如下：
Z18eq x+n powos
---
## Page 230
11.4使用变量
215
-/test2
User info for userid: Samantha
HOME: /home/Samantha
UID: 1001
注意，echo命令中的环境变量会在脚本运行时替换成当前值。另外，在第一个字符串中可
以将sUSER系统变量放置到双引号中，而shelI依然能够知道我们的意图。但采用这种方法也有一
个问题。看看下面这个例子会怎么样。
$ echo *The cost of the iten ia $15*
The cost of the item is 5
显然这不是我们想要的。只要脚本在引号中出现美元符，它就会以为你在引用一个变量。在
这个例子中，脚本会尝试显示变量$1（但并未定义），再显示数字5。要显示美元符，你必须在它
前面放置一个反斜线。
$ echo *The cost of the iten ia 1$15*
The cost of the item is $15
看起来好多了。反斜线允许shell脚本将美元符解读为实际的美元符，面不是变量。下一节将
会介绍如何在脚本中创建自己的变量。
说明你可能还见过通过s（variable}形式引用的变量。变量名两侧额外的花括号通常用来帮
助识别美元符后的变量名。
11.4.2用户变量
除了环境变量，shell脚本还允许在脚本中定义和使用自已的变量。定义变量允许临时存储数
据并在整个脚本中使用，从而使shell脚本看起来更像一个真正的计算机程序。
用户变量可以是任何由字母、数字或下划线组成的文本字符串，长度不超过20个。用户变量
区分大小写，所以变量Var1和变量var1是不同的。这个小规矩经常让脚本编程初学者感到头疼。
使用等号将值赋给用户变量。在变量、等号和值之间不能出现空格（另一个困扰初学者的用
法）。这里有一些给用户变量赋值的例子。
11
var1=10
var2= 57
var4=*still more testing*
var3=testing
shell脚本会自动决定变量值的数据类型。在脚本的整个生命周期里，shell脚本中定义的变量
会一直保持着它们的值，但在shell脚本结束时会被删除掉。
与系统变量类似，用户变量可通过美元符引用。
$ cat test3
 1 /bin/ba.sh
---
## Page 231
216
第11章构建基本脚本
teating variables
guest=*Katle*
Gays=10
echo *$guest checked Ln Sdaya days ago*
days=5
guest=*Jeaelca*
echo *Sguest. checked In $daya daya ago*
运行脚本会有如下输出。
$ chnod u+x test3
Katie checked in 10 daya ago
$./test3
Jessica checked Ln S Gaya ago
变量每次被引用时，都会输出当前赋给它的值。重要的是要记住，引用一个变量值时需要使
用关元符，而引用变量来对其进行赋值时则不要使用关元符。通过一个例子你就能明白我的意思。
$ cat test4
 asslgning a varlable value to another variable
#1/bin/bash
valuel=10
echo The resulting value 1α $value2
value2=$valuel
在赋值语句中使用valuel变量的值时，仍然必须用美元符。这段代码产生如下输出。
$ chnod u+x test4
The resulting value 1g 10
$ ./test4
要是忘了用美元符，使得value2的赋值行变成了这样：
value2=valuel
那你会得到如下输出：
The resulting value la valuel
$./test4
$
没有美元符，shell会将变量名解释成普通的文本字符串，通常这并不是你想要的结果。
11.4.3命令替换
shell脚本中最有用的特性之一就是可以从命令输出中提取信息，并将其赋给变量。把输出赋
给变量之后，就可以随意在脚本中使用了。这个特性在处理脚本数据时尤为方便。
有两种方法可以将命令输出赋给变量：
口反引号字符（）
---
## Page 232
11.4使用变量
217
s{）格式
要注意反引号字符，这可不是用于字符串的那个普通的单引号字符。由于在shell脚本之外很
许多shell脚本中的重要组件。提示：在关式键盘上，它通常和波浪线（一）位于同一键位。
命令替换允许你将shell命令的输出赋给变量。尽管这看起来并不那么重要，但它却是脚本编
程中的一个主要组成部分。
要么用一对反引号把整个命令行命令围起来：
testing=′date′
要么使用s（）格式：
testing=$ (date)
shell会运行命令替换符号中的命令，并将其输出赋给变量testing。注意，赋值等号和命令
替换字符之间没有空格。这里有个使用普通的shell命令输出创建变量的例子。
$ cat test5
testing=$ (date)
 1/bin./ba.sh
echo *The date and tine are: * Stesting
变量testing获得了date命令的输出，然后使用echo语句显示出它的值。运行这个shell脚
本生成如下输出。
$ chmod u+x test5
The date and time are1 Mon Jan 31 20:23125 EDT 2014
$./test5
这个例子毫无吸引人的地方（也可以干脆将该命令放在echo语句中），但只要将命令的输出
放到了变量里，你就可以想干什么就干什么了。
下面这个例子很常见，它在脚本中通过命令替换获得当前日期并用它来生成唯一文件名。
# 1/bin./ba.sh
 cogy the /usr/bin directory listing to a log file
1s /usr/bin -al > log.$today
today =$ (date +ly&ntd.)
11
today变量是被赋予格式化后的date命令的输出。这是提取日期信息来生成日志文件名常用
的一种技术。+3yemga格式告诉date命令将日期显示为两位数的年月日的组合。
$ date +tykn%d
140131
这个脚本将日期值赋给一个变量，之后再将其作为文件名的一部分。文件自身含有目录列表
的重定向输出（将在11.5节详细讨论）。运行该脚本之后，应该能在目录中看到一个新文件。
M-----
1user
2gn
769 Jan 31 10:15 1og.140131
---
## Page 233
218
第11章构建基本脚本
目录中出现的日志文件采用stoday变量的值作为文件名的一部分。日志文件的内容是
usr/bin目录内容的列表输出。如果脚本在明天运行，日志文件名会是log.140201，就这样为新的
一大创建一个新文件。
警告命令替换会创建一个子shell来运行对应的命令。子shell（subshell）是由运行该脚本的shell
所创建出来的一个独立的子shell（child shell）。正因如此，由该子shell所执行命令是无法
使用脚本中所创建的变量的，
在命令行提示符下使用路径./运行命令的话，也会创建出子shell：委是运行命令的时候
不加入路径，就不会创建子shell。如果你使用的是内建的shell命令，并不会涉及子shell。
在命令行提示符下运行脚本时一定要留心！
11.5重定向输入和输出
有些时候你想要保存某个命令的输出而不仅仅只是让它显示在显示器上。bash shell提供了几
个操作符，可以将命令的输出重定向到另一个位置（比如文件）。重定向可以用于输人，也可以
用于输出，可以将文件重定向到命令输人。本节介绍了如何在shell脚本中使用重定向。
11.5.1输出重定向
最基本的重定向将命令的输出发送到一个文件中。bashshell用大于号（>）来完成这项功能：
command > output.f11e
之前显示器上出现的命令输出会被保存到指定的输出文件中。
$ date > test6
$ 1s -1 test6
-=-=-
1 user
user
2.9 Feb 10 17 : 56 te.st6
$ cat teat6
Thu Feb 10 17:56 :58 EDT 2014
重定向操作符创建了一个文件test6（通过默认的umask设置），并将date命令的输出重定向
到该文件中。如果输出文件已经存在了，重定向操作符会用新的文件数据覆盖已有文件。
$ who > test.6
$ cat teat6
user
pts/0  Feb 10 17:55
现在test6文件的内容就是who命令的输出。
有时，你可能并不想覆盖文件原有内容，而是想要将命令的输出追加到已有文件中，比如你正
在创建一个记录系统上某个操作的日志文件。在这种情况下，可以用双大于号（>>）来追加数据。
---
## Page 234
11.5重定向输入和输出
219
$Gate >> teat6
$ cat test6
Thu Feb 10 18:02:14 EDT 2014
usex
pta/0
Feb 10 17:55
test6文件仍然包含早些时候who命令的数据，现在又加上了来自date命令的输出。
11.5.2输入重定向
输人重定向和输出重定向正好相反。输人重定向将文件的内容重定向到命令，而非将命令的
输出重定向到文件。
输人重定向符号是小于号（> puemo2
data
marker
在命令行上使用内联输人重定向时，shell会用PS2环境变量中定义的次提示符（参见第6章）
来提示输人数据。下面是它的使用情况。
$ vc  test string 1
> test string 2
> EOF
 01118 189 
---
## Page 235
220第11章构建基本脚本
3
4.2
次提示符会持续提示，以获取更多的输人数据，直到你输人了作为文本标记的那个字符串。
wc命令会对内联输人重定向提供的数据进行行、词和字节计数。
11.6管道
有时需要将一个命令的输出作为另一个命令的输人。这可以用重定向来实现，只是有些笨拙。
$xpn -qa > xpn. 11.at
$ sort < rpn.1iat 
abrt1.1.14-1.fc14,1686
abxtaddon-ccpp-1 1.141.fc14. 1686
abzt -aGdon=lcerne1oopa1. 1.141. fc14 . 1686
abxt -aGdon-python1.1 .141 - fc14 .1686
abzt-deaktop1.1.141.fc14.1686
abxt-gu11.1.141.fc14.1686
abzt -p1uginbugz111a1. 1 .141 fc14 .1686
abzt11bs1.1,141,[c14.1686
abzt-p1ugin1ogger-1.1.141,fc14,1686
abxt -p1uginzunapp1.1,141, fc14, 1686
ac1-2.2,498,fc14,1686
[ -. .]
rpm命令通过RedHat包管理系统（RPM）对系统（比如上例中的Fedora系统）上安装的软件
包进行管理。配合-qa选项使用时，它会生成已安装包的列表，但这个列表并不会遵循某种特定
的顺序。如果你在查找某个或某组特定的包，想在rpm命令的输出中找到就比较困难了。
通过标准输出重定向，rpm命令的输出被重定向到了文件rpm.list。命令完成后，rpm.list保存
着系统中所有已安装的软件包列表。接下来，输人重定向将rpm.list文件的内容发送给sort命令，
该命令按字母顺序对软件包名称进行排序。
这种方法的确管用，但仍然是一种比较繁琐的信息生成方式。我们用不着将命令输出重定向
到文件中，可以将其直接重定向到另一个命令。这个过程叫作管道连接（piping）。
和命令替换所用的反引号（）一样，管道符号在shell编程之外也很少用到。该符号由两个
竖线构成，一个在另一个上面。然而管道符号的印刷体通常看起来更像是单个竖线（1）。在美式
键盘上，它通常和反斜线（\）位于同一个键。管道被放在命令之间，将一个命令的输出重定向
到另一个命令中：
cormand1 1 command2
不要以为由管道串起的两个命令会依次执行。Linux系统实际上会同时运行这两个命令，在
系统内部将它们连接起来。在第一个命令产生输出的同时，输出会被立即送给第二个命令。数据
传输不会用到任何中间文件或缓冲区。
现在，可以利用管道将rpm命令的输出送人sort命令来产生结果。
---
## Page 236
11.6管道
221
$ rpm -qa 1 sort
abrt-1.1,14-1,fe14.1686
abrt -addon-ccpp1.1 141,fc14. 1686
abrt -addon-python1 1.141. fc14.1686
abxt addonkexneloops1 ,1 , 141 , Ec14 , 686
abxt desktop1 ,1.141.fc14, 1686
abrt1iba1.1.141,fc14 1686
abrt -gu1-1.1.141.fc14.1686
abrt -plugin-bugzi11a1.1.141,fc14,1686
abrt -plugin1ogger1.1.141. fc14 1686
abrt -pluginrunapp1.1.141. fc14 1686
ac12 .2 , 498.fc14.1686
[ -- .]
除非你的眼神特别好，否则可能根本来不及看清楚命令的输出。由于管道操作是实时运行的，
所以只要rpm命令一输出数据，sort命令就会立即对其进行排序。等到rpm命令输出完数据，sort
命令就已经将数据排好序并显示了在显示器上。
可以在一条命令中使用任意多条管道。可以持续地将命令的输出通过管道传给其他命令来细
化操作。
在这个例子中，sort命令的输出会一闪面过，所以可以用一条文本分页命令（例如1ess或
more）来强行将输出按屏显示。
$ xpe -qa 1eort 1more
这行命令序列会先执行rpm命令，将它的输出通过管道传给sort命令，然后再将sort的输
出通过管道传给more命令来显示，在显示完一屏信息后停下来。这样你就可以在继续处理前停
下来阅读显示器上显示的信息，如图11-1所示。
file Edit View Search Terminal nelp
1.14-1. fc14
ac1-2.2.49-8.fC14.1605
alsa-f1rmare-1.e.23-1.fc14.roarch
al5a-]b-1.0.23-2,fc14.186
alsa-uti1s-1.8.23-3,fc14.i696
apr-1.3.9-3,fc13.1586
-More
图11-1通过管道将数据发送给more命令
---