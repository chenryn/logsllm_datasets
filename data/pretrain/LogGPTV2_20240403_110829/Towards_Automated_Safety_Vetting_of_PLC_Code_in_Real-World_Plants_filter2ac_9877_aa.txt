title:Towards Automated Safety Vetting of PLC Code in Real-World Plants
author:Mu Zhang and
Chien-Ying Chen and
Bin-Chou Kao and
Yassine Qamsane and
Yuru Shao and
Yikai Lin and
Elaine Shi and
Sibin Mohan and
Kira Barton and
James R. Moyne and
Z. Morley Mao
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Towards Automated Safety Vetting of PLC Code
in Real-World Plants
Mu Zhang
∗
, Chien-Ying Chen
†
‡
§
, Yassine Qamsane
, Bin-Chou Kao
†
§
§
, James Moyne
, Kira Barton
, Sibin Mohan
∗
Elaine Shi
, Yuru Shao
and Z. Morley Mao
¶
¶
, Yikai Lin
,
¶
∗
†
‡
§
¶
Department of Computer Science, Cornell University
Department of Computer Science, University of Illinois at Urbana-Champaign
Information Trust Institute, University of Illinois at Urbana-Champaign
Department of Mechanical Engineering, University of Michigan
∗
PI:EMAIL,
Department of Electrical Engineering and Computer Science, University of Michigan
§{yqamsane,bartonkl,moyne}@umich.edu,
¶{yurushao,yklin,zmao}@umich.edu
†{cchen140,sibin}@illinois.edu,
PI:EMAIL,
∗
‡
PI:EMAIL,
Abstract—Safety violations in programmable logic controllers
(PLCs), caused either by faults or attacks, have recently garnered
signiﬁcant attention. However, prior efforts at PLC code vetting
suffer from many drawbacks. Static analyses and veriﬁcation
cause signiﬁcant false positives and cannot reveal speciﬁc runtime
contexts. Dynamic analyses and symbolic execution, on the other
hand, fail due to their inability to handle real-world PLC pro-
grams that are event-driven and timing sensitive. In this paper, we
propose VETPLC, a temporal context-aware, program analysis-
based approach to produce timed event sequences that can be
used for automatic safety vetting. To this end, we (a) perform static
program analysis to create timed event causality graphs in order
to understand causal relations among events in PLC code and (b)
mine temporal invariants from data traces collected in Industrial
Control System (ICS) testbeds to quantitatively gauge temporal
dependencies that are constrained by machine operations. Our
VETPLC prototype has been implemented in 15K lines of code.
We evaluate it on 10 real-world scenarios from two different
ICS settings. Our experiments show that VETPLC outperforms
state-of-the-art techniques and can generate event sequences that
can be used to automatically detect hidden safety violations.
I. INTRODUCTION
Industrial control systems (ICS) play an essential role in
modern society. In the new era of Industry 4.0 [12], comput-
erized control systems have become the backbone of crucial
infrastructures such as power grids, transportation as well as
manufacturing sectors. Compared to traditional ICS that were
constructed using ﬁxed electronic circuits, programmable logic
controllers (PLC) have brought ﬂexibility, conﬁgurability and
automation to these domains. However, this freedom has also
introduced complexity, and thus uncertainty, to safety-critical
physical plants. Unexpected logic errors may cause serious
problems such as fatal collisions or massive explosions. Re-
ports have shown that anomalous ICS behaviors have resulted
in loss of life on real-world factory ﬂoors [11], [19].
In addition, security problems are highly coupled with safety
issues in the ICS domain. In fact, physical damage is one
of the major goals for security breaches in ICS. Compared
to attacks targeting consumers or IT systems, that often aim
to make proﬁts or steal data, cyberattacks on factory ﬂoors
are intended to sabotage physical infrastructures. Real-world
incidents, including Stuxnet [36], German Steel Mill Cyber At-
tack [49], Ukrainian Power Grid Attack [50], have shown that
although adversaries must ﬁrst leverage security penetration
techniques to inﬁltrate the digital layers of modern plants, they
often attempt to manipulate critical safety parameters, such as
the frequency of nuclear centrifuges, and trigger benign but
faulty code, to cause serious damage. Hence, there is a need
for detecting situations where such safety violations can occur.
Due to the complexity of contemporary ICS, that involves
interactions between PLCs and various other machines, we
need automated mechanisms to ﬁnd such problems.
While there exists work [24], [28], [30], [31], [42], [44],
[57], [58], [61], [63], [65] that aims to statically verify PLC
logic in a formal manner, such static analysis techniques
suffer from signiﬁcant false positives since they are unable
to reason about runtime execution contexts. For instance, they
may detect potential problematic paths in the code that are
infeasible at runtime. In addition,
the behavior of ICS is
strictly constrained by physical limits at runtime (e.g., velocity,
temperature, etc.) as well as changes to these properties.
To address these limitations, prior work [35], [39], [45],
[62] has explored the usage of dynamic simulations of runtime
behaviors to detect PLC safety violations. In addition, recent
work [43], [54] has enabled symbolic execution on PLC
code. Despite their apparent effectiveness in ﬁnding bugs
in independent PLC programs, these techniques are limited
because they overlook an important fact that a real-world
PLC is never working alone. On the contrary, it collaborates
with other programmable components on the factory ﬂoor,
such as robots, CNCs or even other PLCs,
to carry out
certain tasks. Hence, PLC logic is not only triggered by
internal data inputs but also driven by external events due
to the coordination and communication among multiple units.
Unfortunately, the aforementioned work focuses mainly on the
testing or resolution of input values and not on the complete
event space of multiple collaborating components, and thus
cannot automatically exercise real-life PLC programs.
To address this problem, we propose VETPLC, a temporal
context-aware, program analysis-based system that automati-
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:46)(cid:86)(cid:1)(cid:59)(cid:73)(cid:66)(cid:79)(cid:72)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:20)(cid:21)
(cid:22)(cid:19)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
Although they are still
cally constructs timed event sequences. These sequences can
then enable automated dynamic safety vetting of PLC code.
lacking in the PLC context,
automated dynamic analysis and symbolic execution on
event-driven programs have been well-studied in the smart-
phone [27], [46], [55], [67] and web [51], [66] domains. To
model non-deterministic events, researchers have proposed to
automatically generate event sequences of different orders,
based upon program models [67] or testing [27], [46], [51],
[55], [66] – to drive program execution. Yet permutation of
events is insufﬁcient to describe the conditions that lead to
safety violations in PLC code. The timings, at which events
are delivered, matter. This is because PLC events have implicit
temporal dependencies caused by both intrinsic durations and
external physical constraints. Our key observation is that
multiple event sequences of the same valid order may or
may not lead to safety violations due to the different timings
between events. Thus, generating timed event sequences is a
requisite step to successfully reveal safety issues in PLC code.
Thus, VETPLC complements the prior research on dynamic
analyses and symbolic execution that search merely the value
space in PLC code. It further introduces novel techniques to
explore the timed event space so as to effectively exercise and
examine PLC programs.
Speciﬁcally, (a) to uncover the order of triggering events,
we ﬁrst perform static program analyses on controller code (of
the various interconnected units), including PLC and robot and
generate timed event causality graphs to represent the temporal
dependencies of cross-device events; (b) to quantitatively
model the timing of events, we analyze the controller code
to extract internal time limits, collect runtime data traces from
physical ICS systems and then leverage data mining to recover
temporal invariants; (c) combining this timing model with
causality graphs, we then create timed event sequences that can
serve as inputs for any dynamic PLC code analyses; to enable
automated safety vetting, we formally deﬁne and manually
craft safety speciﬁcations based upon expert knowledge and
conduct runtime veriﬁcation on PLC execution traces.
It is worth noting that previous research has also sought
to create timed event sequences for testing event-driven real-
time programs. Event sequences have been produced from
either manually crafted speciﬁcations [48] or proﬁling program
execution time [52]. In contrast, we automatically extract event
ordering and timing using program analyses and data mining,
and further enable this technique in the new domain of PLCs
and broadly in the context of ICS.
To the best of our knowledge, we are the ﬁrst to enable
timing-aware safety vetting on event-driven time-constrained
PLC code for real-world ICS, in particular, via extracting event
temporalities from program logic and physical environments.
We have implemented VETPLC in 15K lines of code –
7K lines of C++ and 8K lines of Java. To demonstrate the
efﬁcacy of our approach, we apply it to 10 real-world scenarios
on two ICS testbeds that are of completely different physical
compositions: (i) the SMART [47] testbed is a scaled-down
yet fully functional automotive production line and (ii) the
Fischertechnik testbed replicates a consecutive part processing
facility controlled by multiple collaborative PLCs. Note that
the PLC programs under examination remain intact, and we
did not introduce vulnerable code into them. Experimental
results show that VETPLC outperforms the state-of-the-art
techniques and can effectively produce event sequences that
lead to deep and authentic safety bugs, which are already
hidden in real-world PLC code due to developers’ mistakes.
In summary, this paper makes the following contributions:
• We explore physical ICS testbeds to gain an important
insight: real-world controller code is event-driven and
timing-sensitive.
• We are the ﬁrst to automate dynamic safety vetting of
real-world PLC code via the creation of timed event
sequences.
• We use custom static analyses, that address the speciﬁc
programming paradigms of PLCs, to extract causal rela-
tionships among events.
• To the best of our knowledge, this is the ﬁrst work that
distills temporal dependencies in physical ICS testbeds.
• We have demonstrated the effectiveness of VETPLC on
two different types of real-world ICS testbeds: VETPLC
has found “organic” vulnerabilities in real-world testbeds.
II. BACKGROUND
Programmable Logic Controller. A programmable logic
controller [18] is the core control unit of a large number
of modern automation systems. It can be either used as a
separated master controller or integrated as a slave controller
to other machines such as CNCs. The basic functionality of
a PLC is to repeatedly generate control commands based on
input signals and internal control logic. On startup, a PLC is
running in an inﬁnite loop where each iteration, called a scan
cycle, consists of three major phases. 1) Input: PLC reads
inputs from external events (e.g., sensors) and buffers them
in memory. 2) Computation: All variable values are ﬁxed.
The PLC then invokes its logic program and calculates new
variable states based on the buffered inputs and their current
states. 3) Output: The PLC writes the computed new states
into output memory in order to start the next cycle.
PLC programming languages follow the international stan-
dard IEC 61131-3 [10]. It deﬁnes three graphical languages
and two textual languages. All of the languages share IEC
61131-3 common elements and can be translated between
each. In particular, the Structured Text (ST) is a high-level
textual language that syntactically resembles Pascal (Figure 2)
and thus is known for its understandability [20]. Notice,
however, although an ST program resembles those written in
other high-level languages, its dataﬂow is very different due
to the existence of scan cycles. Since PLC variables are kept
intact during the computation phase, value changes caused by
logic code do not become effective until the next cycle. In
effect, in any scan cycle, a PLC variable bears two “versions”:
the “current” version from the last cycle is effective at the
present time; the “new” version records all the changes in the
current round and eventually replaces the “current” one during
(cid:22)(cid:19)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
the output phase. As a result, 1) there exists no dataﬂow within
one scan cycle; 2) dataﬂow happens between two neighboring
cycles and the “current” value of a variable may be the result
of any assignment instructions in the last cycle.
in general fall
Industrial Robot. An industrial robot is essential for per-
forming various actuations, such as assembly, pick-and-place,
packaging, etc. Robot programming languages of individual
vendors are proprietary but
into two cate-
gories: high-level and low-level. High-level languages, such as
KAREL for FANUC robots or RAPID for ABB, are inﬂuenced
by the Pascal syntax. Low-level code is assembly-like, and is
developed through teach pendants which are handheld devices
directly connected to robots. Aside from common program
instructions (e.g., assignments, conditional or unconditional
jumps and function calls), these programs all employ special
motion instructions to guide physical movements and use wait
instructions to enable delays and control timings. While Robot
programs can be launched via a main function, in practice
they are triggered dynamically by input events. The mapping
between triggering signals and call targets is conﬁgured using
teach pendants. Without loss of generality, we hereafter ex-
plain robot inner-workings based upon pick-and-place robots
from FANUC that has the most industrial robots installed
worldwide [56]. Speciﬁcally, we focus on its teach pendant
(TP) language, depicted in Figure 8, which is the de facto
standard to program FANUC robots [1].
Cross-Device Communication. A PLC and a remote device
communicate via signals using industrial network protocols,
such as EtherNet/IP [8]. The remote device opens multiple
pins for inputs and outputs. For example, a FANUC robot can
enable 512 bits of digit inputs (DI) and 512 bits of digit outputs
(DO). On the PLC side, each remote pin is mapped as a base
address (i.e., IP address) plus an offset. Thus, PLC code can
control a remote device by directly accessing these mapped
I/O bits. The I/O mappings are automatically conﬁgured when
a remote device is added to an ICS environment supervised
by a PLC. Once its IP address is determined, the underlying
EtherNet/IP protocol takes the responsibility to recognize the
I/Os on this device and bind them to PLC variables.
III. PROBLEM STATEMENT & APPROACH OVERVIEW
A. Motivating Example
We motivate our problem using our SMART testbed [47],
depicted in Figure 1. This testbed represents a fully functional
assembly line that produces model cars. It consists of a gantry
crane, a circular conveyor belt, 2 pick-and-place robots, 3 CNC
(Computer Numerical Control) machines, and is controlled by
a PLC. Particularly, it is equipped with Allen Bradley PLC
from Rockwell Automation1 and FANUC robots2.
It is worth noting that the SMART testbed is a miniature
of real-world automotive manufacturing sectors. It has been
established and constantly upgraded for over 20 years, and has
been used for numerous projects over the decades. This testbed