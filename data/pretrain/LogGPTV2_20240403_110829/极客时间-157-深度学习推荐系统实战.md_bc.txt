# 18 | Wide&Deep：如何让模型兼具记忆与泛化能力？

大家好，我是王喆。今天我们要学习的是在业界具有巨大影响力的推荐模型——Google的Wide&Deep模型。掌握这一模型将有助于我们更好地理解近年来深度推荐模型的发展趋势。

### 什么是Wide&Deep模型？

"宽且深的模型"是Wide&Deep模型的中文译名。虽然这个名称听起来通俗易懂，但你真的理解其中"宽"和"深"的具体含义吗？上一节课中我们讨论了经典的Embedding+MLP结构，由于MLP可以包含多层神经网络，因此它被认为是一个相对“深”的模型。那么，在Wide&Deep模型中，“深”是否具有同样的意义呢？而所谓的“宽”又指的是什么？这两者各自扮演着怎样的角色？为什么需要将它们结合成一个统一的模型？带着这些问题，让我们从模型架构入手，逐步深入到其应用细节，并最终动手实现该模型。

### Wide&Deep模型架构

首先，让我们来了解一下Wide&Deep模型的基本结构。只有先理解了整体框架，才能更有效地掌握后续的技术细节。

![](https://static001.geekbang.org/resource/image/fb/e0/fb17112c951ebb2a515f12dace262de0.jpg)
*图1: Wide&Deep模型架构（来源：《Wide & Deep Learning for Recommender Systems》）*

如上图所示，Wide&Deep模型由左侧的Wide部分和右侧的Deep部分组成。Wide部分直接将输入层连接至输出层，未经过任何中间处理；而Deep部分则采用了我们在前一课中学过的Embedding+MLP结构。

知道了基本结构之后，接下来要探讨的问题是：Google为何要设计这样一种混合式架构？这涉及到Wide与Deep两部分的不同功能。简单来说，Wide部分主要负责增强模型的记忆力（Memorization），而Deep部分侧重于提升模型的泛化能力（Generalization）。这种设计使得模型能够同时具备逻辑回归和深度神经网络的优点——既能高效地处理大量历史行为数据，又能展现出强大的表达力。

#### 模型的记忆能力

**记忆力**是指模型能够直接从历史数据中学习物品或特征共现频率，并据此做出推荐的能力。例如，在电影推荐场景下，如果观察到看过A电影的用户往往也喜欢B电影，则可形成“A→B”这样的规则。这类规则直观且有价值，但也存在两个显著特点：一是数量庞大，要求模型具备良好的记忆性能；二是过于具体，难以与其他特征进一步组合使用。正因如此，Wide部分采用单层线性模型以强化记忆效果。

#### 模型的泛化能力

**泛化能力**指的是模型对于新样本及从未见过的特征组合进行预测的能力。举例说明，假设已知25岁男性喜欢某部影片A，而35岁女性同样偏爱此片，当面对“35岁男性是否会喜欢A”这样一个问题时，仅有记忆力的模型可能无法给出答案。相反，拥有强大泛化能力的模型可以通过分析已有信息推断出35岁男性大概率也会喜欢这部电影。由此可见，泛化能力对于处理稀疏或全新情况至关重要。为此，Wide&Deep模型中的Deep部分沿用了Embedding+MLP结构，以便通过多层次神经网络充分交叉特征，从而提高模型的学习效率。

### 应用案例：Google Play

Wide&Deep模型最初由Google Play团队提出，旨在为用户提供可能感兴趣并愿意下载的应用程序。针对这一特定应用场景，Google Play是如何选择Wide和Deep两部分所需特征的呢？

![](https://static001.geekbang.org/resource/image/4b/be/4b2f89d82768ba851e3f7392b17df2be.jpg)
*图2: Google Play中Wide&Deep模型的详细特征配置（来源同上）*

从图2可以看出，Wide部分仅关注“已安装应用”与“当前展示应用”之间的关联，试图捕捉简单的因果关系；而Deep部分则包含了更多维度的信息，如用户年龄、性别、设备类型等，通过嵌入表示和多层感知机共同作用，使模型能够发现复杂模式并作出准确预测。

### TensorFlow实现

最后，我们将基于SparrowRecsys平台，在TensorFlow环境中实现Wide&Deep模型。鉴于你已经在之前的课程中掌握了相关基础知识，这里我们将重点放在模型定义环节。以下是使用Keras API构建Wide&Deep模型的部分代码示例：

```python
# 定义Wide&Deep模型
def build_model():
    # 宽度组件
    wide = tf.keras.layers.DenseFeatures(wide_columns)(inputs)
    
    # 深度组件
    deep = tf.keras.layers.DenseFeatures(deep_columns)(inputs)
    for units in [64, 32]:
        deep = tf.keras.layers.Dense(units, activation='relu')(deep)
    
    # 合并宽度与深度输出
    both = tf.keras.layers.concatenate([wide, deep])
    output = tf.keras.layers.Dense(1, activation='sigmoid')(both)

    model = tf.keras.Model(inputs=inputs, outputs=output)
    return model
```

通过上述步骤，我们不仅深入理解了Wide&Deep模型的设计理念及其工作原理，还亲手完成了其实现过程。希望本节课对你有所帮助！