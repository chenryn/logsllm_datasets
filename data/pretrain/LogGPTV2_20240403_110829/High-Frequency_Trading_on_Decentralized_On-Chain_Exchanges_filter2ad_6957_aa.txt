title:High-Frequency Trading on Decentralized On-Chain Exchanges
author:Liyi Zhou and
Kaihua Qin and
Christof Ferreira Torres and
Duc Viet Le and
Arthur Gervais
7
2
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
High-Frequency Trading on
Decentralized On-Chain Exchanges
Liyi Zhou ∗, Kaihua Qin ∗, Christof Ferreira Torres †, Duc V Le ‡ and Arthur Gervais ∗
∗Imperial College London, United Kingdom
†University of Luxembourg, Luxembourg
‡Purdue University, United States
Abstract—Decentralized exchanges (DEXs) allow
parties to participate in ﬁnancial markets while retain-
ing full custody of their funds. However, the trans-
parency of blockchain-based DEX in combination with
the latency for transactions to be processed, makes
market-manipulation feasible. For instance, adversaries
could perform front-running — the practice of exploit-
ing (typically non-public) information that may change
the price of an asset for ﬁnancial gain.
In this work we formalize, analytically exposit and
empirically evaluate an augmented variant of front-
running: sandwich attacks, which involve front- and
back-running victim transactions on a blockchain-based
DEX. We quantify the probability of an adversarial
trader being able to undertake the attack, based on the
relative positioning of a transaction within a blockchain
block. We ﬁnd that a single adversarial trader can earn
a daily revenue of over several thousand USD when
performing sandwich attacks on one particular DEX —
Uniswap, an exchange with over 5M USD daily trading
volume by June 2020. In addition to a single-adversary
game, we simulate the outcome of sandwich attacks
under multiple competing adversaries, to account for
the real-world trading environment.
I. Introduction
Decades of asset trading on traditional exchanges have
brought to fruition a veritable collection of market manip-
ulation techniques, such as front-running [6], pump and
dump schemes [54] and wash trading [3]. In the context
of cryptocurrencies, research to date indicates that the
ecosystem requires a greater awareness of such malprac-
tices [54], [21], [45], and better exchange design [12] to pre-
vent misbehavior. Most existing legislation does not reg-
ulate crypto-exchanges to the same degree as traditional
exchanges — leaving ignorant traders open to exploitation
by predatory practices, some of which is close to risk-free.
Decentralized exchanges (DEXs) allow traders to trade
ﬁnancial assets without giving up asset custody to a
third party. Orders can be placed and matched in their
entirety through immutable blockchain smart contracts,
oﬀering the possibility of censorship resistance, where
orders cannot be modiﬁed prior and after execution1.
Disclosure: Arthur Gervais works on the Liquidity Network, a
community-driven, open source layer-2 blockchain scaling solution.
1DEX prevent anyone from censoring trades, even the exchange
itself. Censorship-resistance is a key property of permissionless
blockchains such as Bitcoin and Ethereum, where users remain
custodian over their assets at any point in time.
Censorship-resistant trade is itself made possible through
reliance on an underlying blockchain, which makes public
all attempted and executed trades within its peer-to-peer
(P2P) network. The transparency of the blockchain layer,
however, in combination with the latency for orders to
deterministically execute makes, front-running easier to
undertake — and hence inﬂuences negatively the security
of the trader’s assets.
This paper. We focus on a combination of front- and
back-running2, known as a sandwiching, for a single on-
chain DEX. To the best of our knowledge, we are the ﬁrst
to formalize and quantify sandwich attacks. To make their
sandwich, a predatory trader ﬁrst observes a blockchain
P2P network for a victim transaction and then rushes to
squeeze it by placing one order just before the transaction
(i.e. front-run) and one order just after it (i.e. back-run).
If the target transaction is going to increase (decrease)
the price of an asset, the adversary can place an order
before which buys (sells) the asset in question, and an
order afterward which sells (buys) the asset again.
We restrict our focus to automated market maker
(AMM) DEXs [52], [4], as opposed to DEXs which operate
limit order books (LOB) [20], on account of their determin-
istic nature which enables us to rely on fewer assumptions
in our analysis. AMM DEXs simplify trading by algo-
rithmically performing market making3, resulting in near-
instant liquidity (i.e. the ability to purchase and sell assets)
for market participants. Uniswap is a prominent example
of an AMM DEX, which, by March 2020, has amassed
a total liquidity of nearly 48M USD (corresponding to a
75% market liquidity share for AMM DEX) and had a
trading volume of over 250M USD since its inception in
November 2018. We formalize, analytically exposit and
empirically evaluate sandwiching on AMM DEXs. We
quantify optimal adversarial revenues and perform a real-
world empirical evaluation of sandwich attacks. We also
study the probability of a transaction having a particular
relative position within a blockchain block, informing the
prospects for such an attack. Finally, to account for a real-
world scenario in which multiple adversaries are likely to
2While the SEC deﬁnes front-running as an action on private
information, we only operate on public trade information.
3The process of serving a market with the possibility to purchase
and sell an asset.
© 2021, Liyi Zhou. Under license to IEEE.
DOI 10.1109/SP40001.2021.00027
428
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
compete over victim transactions, we perform simulations
to quantify the transaction fees resulting from a reactive
fee counter-bidding contest.
Summary of contributions:
• Formalization of sandwich attacks. We state a
mathematical formalization of the AMM mechanism
and the sandwich attack, providing an adversary with
a framework to manage their portfolio of assets and
maximize the proﬁtability of the attack.
• Analytic and empirical evaluation. We analyt-
ically and empirically evaluate sandwich attacks on
AMM DEX. Besides an adversarial liquidity taker, we
introduce a new class of sandwich attacks performed
by an adversarial liquidity provider. We quantify the
optimal adversarial revenue and validate our results
on the Uniswap exchange (largest DEX, with 5M USD
trading volume at the time of writing). Our empirical
results show that an adversary can achieve an average
daily revenue of 3, 414 USD4. Even without collusion
with a miner, we ﬁnd that, in the absence of other ad-
versaries, the likelihood to position a transaction be-
fore or after another transaction within a blockchain
block is at least 79%, using a transaction fee payment
strategy of ±1 Wei5.
• Multiple Attacker Game. We simulate the sand-
wich attacks under multiple simultaneous attackers
that follow a reactive counter-bidding strategy [21].
We ﬁnd that the presence of 2, 5 and 10 attackers
respectively reduce the expected proﬁtability for each
attacker by 51.0%, 81.4% and 91.5% to 0.45, 0.17,
0.08 ETH (67, 25, 12 USD), given a victim that
transacts 20 ETH to DAI on Uniswap with a transac-
tion pending on the P2P layer for 10 seconds before
being mined. If the blockchain is congested (i.e. the
victim transaction remains pending for longer than
the average block interval), we show that the break-
even of the attacker becomes harder to attain.
• DEX security vs. scalability tradeoﬀ. Our work
uncovers an inherent tension between the security and
scalability of an AMM DEX. If the DEX is used
securely (i.e. under a low or zero price slippage),
trades are likely to fail under high transaction volume;
and an adversarial trader may proﬁt otherwise.
II. Decentralized Exchanges
At the root of decentralized exchanges are blockchains.
Blockchains, such as Bitcoin [48], enable peers to transact
without trusting third-party intermediaries. The core com-
ponent of a blockchain is a hash-linked chain of blocks [15],
where miners form blocks as a data-structure which accu-
mulates transactions. Blockchains which allow the execu-
tion of smart contracts [53], constitutes the basic building
block for exchanges. A crucial aspect of this paper is
4We disclosed our preliminary results to Uniswap on 18th of
November 2019, which allowed tightening the trader protections.
5The smallest amount of Ether currency, 1 WEI = 10−18 ETH
that in most blockchain designs, transactions are executed
in the sequence in which they are written into a block.
This sequence dependence matters for blockchain-based
exchanges, and will be detailed extensively in Section III.
An exchange is built out of three main components: a
price discovery mechanism, a trade matching engine, and a
trade clearing system. Blockchains allow these components
to be encoded within a smart contract to construct a
decentralized, or non-custodial exchange [33], [52], [5], [43],
[39], [23]. The non-custodial property guarantees that a
trader retains custody over their assets at any point in
time. If all exchange components are implemented within
smart contracts, the exchange qualiﬁes as an on-chain
DEX. If only the trade clearing is realized within a smart
contract, the exchange may be centralized but can retain
the non-custodial property [39].
A. DEX components
A DEX is a game between a liquidity provider and taker.
Liquidity Provider: a market participant that provides
liquidity (ﬁnancial asset trade oﬀers).
Liquidity Taker: a market participant that buys or sells
one asset in exchange for another asset, by taking the
liquidity oﬀered by a liquidity provider.
Further, we distinguish between two varieties of DEX,
depending on their mechanisms of price discovery.
Order Book: a list of buy and sell orders for a partic-
ular asset, where each order stipulates a price and
and quantity. A liquidity provider quotes bid and
ask prices, with an associated volume, competing for
liquidity taker order ﬂow [5], [43], [39], such that a
match between supply (from a liquidity provider) and
demand (from a liquidity taker) is facilitated (also
referred to as market making).
Automated Market Maker (AMM): A
predeﬁned
pricing algorithm automatically performs price-
discovery and market making, using assets within
liquidity pools [52],
[4]. Liquidity providers are,
therefore, not required to monitor the market to
adjust bid and ask prices. Liquidity takers can
directly trade against the AMM liquidity. Such
automation also serves to reduce the number of
on-chain transactions, making such mechanisms
particularly suitable for smart contract-based DEXs
given an underlying blockchain that supports only a
limited number of transactions per second (tps).
B. AMM Mechanism
We denote with X/Y an asset pair composed of asset X
and Y . An AMM asset pair X/Y consists of two liquidity
pools, respectively for each asset:
Asset X liquidity pool (x ∈ R+): Total amount of as-
Asset Y liquidity pool (y ∈ R+): Total amount of as-
set X deposited by liquidity providers.
set Y deposited by liquidity providers.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
429
Deﬁnition 1. The state (or depth) of an AMM market
X/Y is deﬁned as (x, y), x the amount of asset X, y the
amount of asset Y in the liquidity pool. The state at a given
blockchain block N is denoted (xN , yN).
AMM DEXs support the following actions.
AddLiquidity: A liquidity provider deposits δx of asset
X, and δy of asset Y into the corresponding liquidity
pools (cf. Equation 1).
(x + δx, y + δy)
(x − δx, y − δy)
−−−−−−−−−−−−→
(x, y) AddLiquidity(δx,δy)
δx∈R+, δy∈R+
(1)
RemoveLiquidity: A liquidity provider withdraws δx of
asset X, and δy of asset Y from the corresponding
liquidity pools (cf. Equation 2).
−−−−−−−−−−−−−−→
(x, y) RemoveLiquidity(δx,δy)
δx∈R+≤x, δy∈R+≤y
(2)
TransactXforY : A liquidity taker can trade δx of asset
X, increasing the available liquidity of asset X, in
exchange for δy = f(δx − cx(·)) − cy(·) of asset
Y , decreasing the available liquidity of asset Y (cf.
Equation 3). cx(·), cy(·) represent the trade fees in
asset X and Y respectively. f(·) calculates the amount
of asset Y purchased by the liquidity taker. Each
AMM exchange may chose a custom pricing function
f(·) for governing the asset exchange [1]. Note that
the exchange asset pricing cannot be determined by
a simple constant, as the market dynamics of pur-
chasing and selling power must be modeled within
the exchange (i.e. the more assets on would want to
purchase, the higher the fees).
−−−−−−−−−−−−→
(x, y) TransactXforY (δx)
(x+δx, y−f(δx−cx(·))+cy(·))