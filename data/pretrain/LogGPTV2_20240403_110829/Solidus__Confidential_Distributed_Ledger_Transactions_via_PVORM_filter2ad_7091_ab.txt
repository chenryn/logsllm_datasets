Example 3.1 (TradeWind Markets). TradeWind Markets, whose
use case helped inform the design of Solidus, offers an example
of how Solidus might support management of asset titles [59].
TradeWind is building an electronic communication network (ECN)
for physical gold bullion to be traded using a bank-intermediated
ledger for settlement and title management. The physical bullion
is managed by a custodian who is trusted to track inflows and
outflows to and from a specifically designated vault. Each user
has an account with a holding bank—generally a large commercial
bank—which manages trades. A user may additionally buy gold
from outside, send it to the vault, and sell it on the TradeWind
ECN—requiring the custodian to create a record of the asset—or
buy gold on the TradeWind ECN, remove it from the vault, and sell
it elsewhere—requring the custodian to destroy the asset record.
5Solidus uses the group for elliptic curve secp256k1. We make this choice for perfor-
mance, so despite elliptic curve groups typically using additive notation, we will use
multiplicative notation for simplicity and generality.
Holdings are represented on the ledger as fractional ounces of
gold held by individual users. To trade gold, a user authorizes her
holding bank to transfer the gold to another user. Holding banks
may also provide other services, such as holding gold as collateral
against a loan. In such cases the bank may freeze assets, for example,
until the loan is repaid.
As we shall show, Solidus can support the full asset lifecycle
of a system like the TradeWind ECN while providing practical
performance and strong confidentiality and verifiability guarantees.
3.1 Design Approach
Solidus has two important features that differ from existing ledger
systems and make it more amenable to the financial industry.
The first is its bank-intermediated design: unlike nearly all sys-
tems proposed by the research community (see Section 8), Solidus
aligns with the structure of the modern financial system. Each bank
in Solidus has a set of customers or users who hold shares of some
asset (e.g., securities, cryptocurrency, or gold) in their accounts.
Specially designated entities called asset notaries record the injec-
tion of assets into the system, as we discuss below. Second, unlike
other bank-intermediated systems, Solidus provides strong confi-
dentiality. It conceals account balances and transaction details from
non-transacting entities, placing them on the ledger as ciphertexts.
It is for these reasons that Solidus uses PVORM. Each bank main-
tains its own PVORM on the ledger to record the identities and
balances of its account.
Each transaction involves a sending user at a sending bank, and
a receiving user at a receiving bank. When a user (sender) Us signs
a transaction and gives it to her (sending) bank Bs, Bs first verifies
the validity of the transaction—that it is correctly signed and Us
possesses the funds $v to be sent—then updates its PVORM to
reflect the results of the transaction. The receiving bank performs
a corresponding update on the receiving user’s account.
The confidentiality properties of PVORM ensure that another
entity can learn only the identities of the sending and receiving
banks, not $v or the identities of the transacting users. Indeed,
even the sending bank cannot identify the receiving user nor the
receiving bank the sending user.6 The public verifiability of PVORM
ensures that any entity with access to the ledger can verify that
each transaction is correctly processed by both banks.
Solidus is designed to be agnostic to the implementation of the
underlying ledger. While it does require a mutually-aware group of
banks and transaction validation by the ledger maintainers, those
maintainers can be a “permissioned” (fixed-entity) group, an “un-
permissioned” (fully decentralized) ledger (a blockchain), or any
other trustworthy append-only data structure.
3.2 Architectural Model
In Solidus, a predetermined set of banks B1, . . . , Bm maintain asset
titles on a ledger. Each bank Bi has a public/private key pair for
each of encrypting and signing. It also has up to n users {U i
j }n
j=1
each with a signature key pair. Each account is publicly associated
with one bank, so bank(U i
j ) = Bi is well-defined.
6It is desirable for receiver to be able to verify the sender’s identity. The sender can
easily acquire a receipt by retaining a proof that she authorized the transaction.
4
T : U s2 → U r1 : $v
Bs
U s1
pks1 $bs1
U s2
pks2 $bs2
Br
U r1
pkr1 $br1
U r2
pkr2 $br2
pks1 $bs1
PVORM
pks2 $bs2
(−$v )
pkr1 $br1
(+$v )
pkr2 $br2
PVORM
T : Bs → Br
+ZK-Proofs
Ledger
Figure 1: An example transaction T where U s2 at Bs sends $v to
U r1 at Br and each bank has two users. The upper boxes are the
logical (plaintext) memory of each bank’s PVORM, and the lower
boxes are the associated public (encrypted) memories. Entities other
than Bs, Br , U s2 , and U r1 learn only that a user at Bs sent money
to a user at Br and both banks updated their PVORMs correctly.
j ← $bi
A transaction T is a digitally signed request by user U i
Each bank Bi maintains its own private data structure Mi con-
taining each user’s balance and public key. It maintains a corre-
sponding public data structure Ci, placed on the ledger, whose ele-
ments are encrypted under Bi’s encryption key. Mi and Ci together
constitute the memory in a PVORM, which we describe in Section 4.
Solidus uses this structure to ensure that updates to Ci reflect valid
transactions processed in Mi while concealing transaction details
and the transaction graph.
j with
j to send some amount $v of asset to another user U i′
j′ .
balance $bi
j ≥ $v ≥ 0. To process a transaction,
The transaction is valid if $bi
j − $v and Bi′ updates Mi′ to set
Bi updates Mi to set $bi
$bi′
j′ ← $bi′
j′ + $v. They generate publicly verifiable ZK-proofs that
$v ≥ 0 and that they updated their respective PVORMs correctly
using $v. Figure 1 depicts a simple Solidus transaction.
We treat the ledger as a public append-only memory which veri-
fies transactions. All banks have asynchronous authenticated read
and write access and the ledger accepts only well-formed transac-
tions not already present. We model this by an ideal functionality
FLedger, detailed in Section 5, which any bank can invoke.
Notarizing New Asset Titles. As described above, all user trans-
actions must be zero-sum; U i
j sends money (that she must have)
to U i′
j′ . Financial systems are generally not closed, though. That
is, assets can enter and leave the system through specific chan-
nels. To support this, Solidus defines a fixed set of asset notaries
{U $
ℓ }. These are accounts with no recorded balance, but
the authority to create and destroy asset titles. To ease auditing of
this sensitive action, transactions involving U $
i reveal its identity.
Asset notaries clearly must be restricted; it would make no sense
to allow arbitrary users to create and destroy asset titles. In Exam-
ple 3.1, Solidus would designate the custodian as the sole notary
responsible for acknowledging receipt and removal of the physical
asset (gold) and guaranteeing its physical integrity.
1 , . . . ,U $
3.3 Trust Model
Solidus assumes that banks respect the confidentiality of their own
users but otherwise need not behave honestly. They may attempt
to steal money, illicitly give money to others, manipulate account
balances, falsify proofs, etc. Banks (respectively, users) can also
attempt to violate the confidentiality of other banks’ users (respec-
tively, other users) passively or actively. We assume no bound on
the number of corrupted banks or users, which may collude freely.
The Ledger. We assume the ledger abstraction given in Section 3.2.
In practice, the ledger can, but need not, be maintained by the
banks themselves. If not maintained by the banks, the ledger’s trust
model is independent from the higher-level protocol. It may be
constructed using a (crash-tolerant) consensus protocol such as
Paxos [37], ZooKeeper [31], or Raft [50], a Byzantine consensus
protocol such as PBFT [20], a decentralized consensus protocol such
as Nakamoto consensus [49], or even a single trustworthy entity.
We simply assume that the ledger maintainers satisfy the protocol’s
requirements and the ledger remains correct and available.
We regard the ledger together with the public PVORM data struc-
tures {Ci} as a replicated state machine. Despite this, Solidus’s flex-
ible design allows us to treat the consensus and application layers
as entirely separate for the majority of our discussion.
Availability. We assume that the ledger remains available at all
times; it is not susceptible to denial-of-service attacks and enough
consensus nodes will remain non-faulty to maintain liveness. A
bank, however, can be unavailable in two ways: it can freeze a user’s
assets by rejecting transactions or it can go offline entirely.
Asset freezing can be a feature. For certain types of assets (e.g. gold,
as in Example 3.1) a user may wish to use her balance as collateral
against a loan. A bank could, however, maliciously freeze a user’s
assets or go offline due to a technical or business failure. In either
case, an auditor with the bank’s decryption key (see below) could
enable a user to prove her balance and recover funds despite being
unable to transact directly.
Auditing. Regulators and auditors play a pivotal role in the finan-
cial sector. While Solidus does not include explicit audit support,
it enables banks to prove correct decryption of on-chain data or
share their private decryption key. In the first case, the auditor
can acquire a transaction log on demand and verify its correctness
and completeness. In the second case, the auditor can directly and
proactively monitor activity within the bank and its accounts.
Network. We do not assume a network adversary. An active net-
work adversary would make the availability requirement of the
ledger impossible, while a passive adversary can be mostly mit-
igated simply by securing all messages with TLS. The existence
of communication between users and their banks could still leak
information, but this is inherent in any bank-intermediated system
and could be mitigated using Tor [27] or similar protocols.
3.4 Security Goals
Solidus aims to provide very strong safety and confidentiality guar-
antees for both individual users and the system as a whole.
Safety Guarantees. Solidus provides a very simple but strong set
of safety guarantees. First, no user’s balance may decrease without
explicit permission of that user (in the form of a signature), and such
authorization can be used only once; there are no replay attacks.
Second, account balances can never be negative, ensuring that no
user can spend money she does not have. Finally, transactions that
do not include asset notaries must be zero-sum.
To ensure the above properties hold, we require that the correct-
ness of every transaction be proved in a publicly-verifiable fashion
(via ZK-Proof). If the ledger checks these proofs before accepting—
and settling—the transaction, then every transaction will maintain
these guarantees. Solidus places all proofs on the ledger, meaning
an auditor can verify them offline.
Maintaining these guarantees requires all transactions involving
a single bank to be serialized. Banks can use the serialization pro-
vided by the ledger or another locking mechanism to accomplish
this, but everyone must agree on the ordering.
Confidentiality Guarantees. To facilitate audits and asset recov-
ery against malicious banks, Solidus places all account balances
and transaction details directly on the ledger. Despite this persis-
tent public record, Solidus provides a strong confidentiality for all
users. First, account balances are visible only to the user’s bank
(and authorized auditors). Second, while transactions do reveal the
sending and receiving banks, there is no way to determine if two
transactions involving the same bank involved the same account.
We use a hidden-public-key signature scheme (see Appendix A.3)
to enforce the publicly-verifiable authorization requirement above
without revealing identities. This second feature is often referred to
as transaction graph confidentiality. It precludes use of the pseudony-
mous schemes employed by Bitcoin and similar systems, and is the
challenge specifically addressed by PVORM.
We do not directly address information leaked by the timing
of transactions. These channels and the bank-level transaction
graph can, however, be eliminated by requiring each bank to post
transactions at regular intervals in batches of uniform size. These
batches would be padded out by “dummy” transactions of value 0
to obscure which banks conducted real transactions.
We present a formal model in Section 5 that encompasses all of
these security and confidentiality goals.
4 PVORM
As discussed in Section 2.3, ORAM presents a means to conceal
the Solidus transaction graph, but lacks the public verifiability that
Solidus requires. To overcome this limitation, we introduce the
Publicly-Verifiable Oblivious RAM Machine (PVORM).
As with ORAMs, PVORMs have a private logical memory M and
corresponding encrypted physical memory C. There are, however,
four key differences:
• Constrained Updates. Write operations are constrained by a public
function f . In Solidus, for example, M contains account IDs and
balances and f updates a single balance to a non-negative value.
• Publicly Verifiable Updates. Whenever the client modifies C, it
must publicly prove (in zero-knowledge) that the change reflects
a valid application of f .
• Client Maintains All Memory. Instead of a client maintaining M
and a server maintaining C, the client maintains both directly.
5
While M remains hidden, C is now publicly visible (e.g., on a
ledger in Solidus).
• No Private Stash. Any data in M not represented in C would
prevent the client from proving correctness of writes. Instead of
a variable-size private stash, PVORM includes a fixed-size public
encrypted stash.
To achieve public verifiability, our PVORM construction relies
on public-key cryptography. Another example of an ORAM scheme
that uses public key cryptography is Group ORAM [39], which does
so for a more standard cloud setting, rather than our setting here.
In fact, while traditional ORAMs generally uses symmetric-key
primitives, this difference is not fundamental. One could construct
a PVORM using symmetric-key encryption and zk-SNARKs, but as
we see in Section 7.3, such a construction performs poorly.
We also leverage the fact that PVORM is designed for public
verifiability and not storage outsourcing to improve efficiency. In
ORAM, reads incur a cost as the client must retrieve data from
the server. In PVORM, reads are “free” in that they require only
reading public state—the ledger in Solidus—which leaks nothing.
Writes, however, are still publicly visible. Second, since PVORM
does not aim to reduce local memory usage, we assume that the
client locally maintains a full copy of the PVORM including private
data and metadata. This allows clients to perform updates much
more efficiently by avoiding unnecessary decryption.
These features are nearly identical to those leveraged by write-
only ORAM, but those techniques do not apply. Write-only ORAM
requires simple writes, but we implement updates as read-update-
write operations to prove properties about changes in values.
4.1 Formal Definition
We now present a formal definition of PVORM. We let M represent
a private array of values from a publicly-defined space (e.g. N) and
C be the public (encrypted) representation of M. U is the space of
update specifications (e.g., account ID, balance change pairs).
Definition and Correctness. We first define the public interface
of a PVORM and its correct operation. A PVORM consists of the
following operations.
• Init(1λ, n, m0, U )
$−→ (pk, sk, C), a randomized function that ini-
tializes the PVORM with security parameter 1λ, n data elements,
initial memory M = (m0, . . . , m0), and valid update values U .
• An update constraint function f (u, M ) → M′ that updates M
according to update u ∈ U . Note that f may be undefined on
some inputs (invalid updates), and must be undefined if u (cid:60) U .
$−→ (C′, e, proof ), a randomized update function
that takes an update u and a public memory and emits a new
public memory, a ciphertext e of u, and a zero-knowledge proof
of correct application.
• Ver(pk, C, C′, e, proof ) → {true, false}, a deterministic update
• Update(sk, u, C)
verification function.
We also define Read(sk, C) → M and Dec(sk, e) → u, two determin-
istic functions that read every value from a C as a plaintext memory
M and decrypt an update ciphertext, respectively. We employ these