previous frame’s stack pointer and return address to hijack control
to the exploit stack frames, beginning execution of the attacker’s
instruction sequences.
4. SPARC GADGET CATALOG
In this section, we describe our set of SPARC gadgets using the
Solaris standard C library. Our collection loosely mirrors Shacham’s
x86 gadget catalog [23], and is similarly Turing-complete on in-
spection. An attacker can create a return-oriented program com-
prised of our gadgets with the full computational power of a real
SPARC program. We emphasize that our collection is not merely
theoretical; every gadget discussed here is fully implemented in our
gadget C API and exploit compiler (discussed in Section 5).
We describe our gadget operations in terms of gadget variables,
e.g., v1, v2, and v3, where each variable refers to a addressable
four-byte memory location. In our ﬁgures, the column “Inst. Seq.”
describes a shorthand version of the effective instruction sequence
operation. The column “Preset” indicates information encoded in
an overﬂow. E.g., “%i3 = &v2” means that the address of variable
v2 is encoded in the register save area for %i3 of an exploit stack
frame. The notation “m[v2]” indicates access to the memory stored
at the address stored in variable v2. The column “Assembly” shows
the libc instruction sequence assembly code.
4.1 Memory
As gadget “variables” are stored in memory, all gadgets use loads
and stores for variable reads and writes. Thus, our “memory” gad-
gets describe operations using gadget variables to manipulate other
areas of process memory. Our memory gadget operations are mostly
analogous to C-style pointer operations, which load / store memory
dereferenced from an address stored in a pointer variable.
4.1.1 Address Assignment
Assigning the address of a gadget variable to another gadget vari-
able (v1 = &v2) is done by using the constant assignment gadget,
described in Section 4.2.1.
4.1.2 Pointer Read
The pointer read gadget (v1 = *v2) uses two instruction se-
quences and is described in Fig. 3. The ﬁrst sequence dereferences
a gadget variable v2 and places the pointed-to value into %i0 using
two loads. The second sequence takes the value (now in %o0 after
the register window slide) and stores it in the memory location of
gadget variable v1.
Inst. Seq.
%i0 = m[v2]
v1 = m[v2]
Assembly
Preset
%i4 = &v2 ld [%i4], %i0
ld [%i0], %i0
ret
restore
%i3 = &v1 st %o0, [%i3]
ret
restore
Figure 3: Pointer Read (v1 = *v2)
4.1.3 Pointer Write
The pointer write gadget (*v1 = v2) uses two sequences and is
described in Fig. 4. The ﬁrst sequence loads the value of a gadget
variable v2 into register %i0. The second sequence stores the value
(now in %o0) into the memory location of the address stored in
gadget variable v1.
Inst. Seq.
%i0 = v2
Preset
%l1 = &v2
Assembly
ld [%l1], %i0
ret
restore
%i0 = &v1-8 ld [%i0 + 0x8], %i1
m[v1] = v2
st %o0, [%i1]
ret
restore
Figure 4: Pointer Write (*v1 = v2)
As the second instruction sequence indicates, we were not al-
ways able to ﬁnd completely ideal assembly instructions in libc.
Here, our load instruction (ld [%i0 + 0x8], %i1) actually re-
quires encoding the address of v1 minus eight into the save register
area of the exploit stack frame to pass the proper address value to
the %i0 + 0x8 load.
4.2 Assignment
Our assignment gadgets store a value (from a constant or other
gadget variable) into the memory location corresponding to a gad-
get variable.
4.2.1 Constant Assignment
Assignment of a constant value to a gadget variable (v1 = Val-
ue ) ideally would simply entail encoding a constant value in an
exploit stack frame that is stored to memory with an instruction
sequence. However, because all exploit frames must pack into a
string buffer overﬂow, we have to encode constant values to avoid
zero bytes. Our approach is to detect and mask any constant value
zero bytes on encoding, and then later re-zero the bytes.
Our basic constant assignment gadget for a value with no zero
bytes is shown in 5. Non-zero hexadecimal byte values are denoted
with “**”.
Inst. Seq.
v1 = 0x********
Assembly
Preset
%i0 = Value st %i0, [%i3]
%i3 = &v1
ret
restore
Figure 5: Constant Assignment (v1 = 0x********)
For all other constants, we mask each zero byte with 0xff for
encoding, and then use clrb (clear byte) instruction sequences to
re-zero the bytes and restore the full constant. For example, Fig. 6
illustrates encoding for a value where the most signiﬁcant byte is
zero.
Inst. Seq.
Preset
%i0 = Value |
Assembly
st %i0, [%i3]
v1 = 0xff******
0xff000000 ret
v1 = 0x00******
%i3 = &v1
%i0 = &v1
restore
clrb [%i0]
ret
restore ...
Figure 6: Constant Assignment (v1 = 0x00******)
4.2.2 Variable Assignment
Assignment from one gadget variable to another (v1 = v2) is
described in Fig. 7. The memory location of a gadget variable v2 is
loaded into local register %l6, then stored to the memory location
of gadget variable v1.
Inst. Seq. Preset
Assembly
v1 = v2
%l7 = &v1 ld [%i0], %l6
%i0 = &v2 st %l6, [%l7]
ret
restore
Figure 7: Variable Assignment (v1 = v2)
4.3 Arithmetic
Arithmetic gadgets load one or two gadget variables as input,
perform a math operation, and store the result to an output gadget
variable’s memory location.
4.3.1 Increment, Decrement
The increment gadget (v1++) uses a single instruction sequence
for a straightforward load-increment-store, as shown in Fig. 8. The
decrement gadget (v1--) consists of a single analogous load-de-
crement-store instruction sequence.
4.3.2 Addition, Subtraction, Negation
The addition gadget (v1 = v2 + v3) is shown in Fig. 9. The
gadget uses the two instruction sequences to load values for gadget
variables v2 and v3 and store them into the register save area of the
third instruction sequence frame directly, so that the proper source
registers in the third sequence will contain the values of the source
Inst. Seq. Preset
Assembly
%i1 = &v1 ld [%i1], %i0
v1++
add %i0, 0x1, %o7
st %o7, [%i1]
ret
restore
Figure 8: Increment (v1++)
gadget variables. The third instruction sequence dynamically gets
v2 and v3 in registers %i0 and %i3, adds them, and stores the result
to the memory location corresponding to gadget variable v1.
Inst. Seq.
m[&%i0] = v2
Preset
%l7 = &%i0
Assembly
ld [%i0], %l6
(+2 Frames ) st %l6, [%l7]
%i0 = &v2
%l7 = &%i3
m[&%i3] = v3
(+1 Frame )
%i0 = &v3
ret
restore
ld [%i0], %l6
st %l6, [%l7]
ret
restore
v1 = v2 + v3
%i0 = v2 (stored ) add %i0, %i3, %i5
%i3 = v3 (stored ) st %i5, [%i4]
%i4 = &v1
ret
restore
Figure 9: Addition (v1 = v2 + v3)
The subtraction gadget (v1 = v2 - v3) is analogous to the ad-
dition gadget, with nearly identical instruction sequences (except
with a sub operation). The negation gadget (v1 = -v2) uses three
instruction sequences to load a gadget variable, negate the value,
and store the result to the memory location of an output variable.
4.4 Logic
Logic gadgets load one or two gadget variable memory locations,
perform a bitwise logic operation, and store the result to an output
gadget variable’s memory location.
4.4.1 And, Or, Not
The bitwise and gadget (v1 = v2 & v3) is described in Fig. 10.
The ﬁrst two instruction sequences write the values of gadget vari-
ables v2 and v3 to the third instruction sequence frame. The third
instruction sequence restores these source values, performs the bit-
wise and, and writes the results to the memory location of gadget
variable v1.
The bitwise or gadget (v1 = v2 | v3) works like the and gad-
get. Two instruction sequences load gadget variables v2 and v3 and
write to a third instruction sequence frame, where the bitwise or is
performed. The result is stored to the memory location of variable
v1.
The bitwise not gadget (v1 = ∼v2) uses two instruction sequen-
ces. The ﬁrst sequence loads gadget variable v2 into a register
available in the second sequence, where the bitwise not is per-
formed and the result is stored to the memory location of variable
v1.
4.4.2 Shift Left, Shift Right
The shift left gadget (v1 = v2 > v3) is virtually identical, except
performing a srl (shift right) operation in the third instruction se-
quence.
Inst. Seq.
m[&%i2] = v2
m[&%i5] = v3
Preset
%l7 = &%i2
(+2 Frames )
%i0 = &v2
%l7 = &%i5
(+1 Frame )
%i0 = &v3
Assembly
ld [%i0], %l6
st %l6, [%l7]
ret
restore
ld [%i0], %l6
st %l6, [%l7]
ret
restore
%i0 = v2 
v2): jump T1, else T2) is virtually identical to the branch equal
gadget, except for using a branch greater than SPARC instruction
(bg).
4.5.3 Branch Not Equal; Branch Less Than; Branch
Greater Than or Equal
Gadgets for the remaining branches are obtained via simple wrap-
pers around the branch gadgets in the previous section. Our branch
not equal gadget (if (v1 != v2): jump T1, else T2) is equiv-
alent to the branch equal gadget with targets T1 and T2 switched:
if (v1 == v2): jump T2, else T1. The branch less than gad-
get (if (v1  v1): jump T1,
Inst. Seq.