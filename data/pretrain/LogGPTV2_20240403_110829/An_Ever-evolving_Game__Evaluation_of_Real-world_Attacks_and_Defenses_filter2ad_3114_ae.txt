# Airdrop Hunting and Reentrancy: Defense Techniques and Observations

## Table 7: Defense Techniques Against Different Attacks
| Checked Values | # of Deployed Contracts | Target Attack | # of Prevented Transactions | # of Successful Transactions |
|----------------|-------------------------|---------------|------------------------------|-------------------------------|
| canDistr       | 2,505                   | airdrop hunting | 21                           | 65,240                        |
| state variable distributionFinished | - | - | - | - |
| nonReentrant   | 952                     | reentrancy     | 77                           | 0                             |
| state variable _guardCounter | - | - | - | - |
| SafeMath       | 3,110,124               | integer overflow | 1,161                        | 0                             |

### Defense Techniques
- **canDistr**: This defense checks the total number of distributed airdrops to limit the total amount of loss due to airdrop hunting. It is deployed by 2,505 contracts and is effective once the hunted airdrops exceed a certain amount. It prevents 21 adversarial transactions, but 65,240 transactions succeed in obtaining illegitimate airdrops.
- **nonReentrant**: This defense checks the state variable `_guardCounter` to ensure that a function is only invoked once during a transaction. It is deployed by 952 contracts and prevents 77 adversarial transactions. No adversarial transactions evade this defense.
- **SafeMath**: This library provides safe arithmetic operations for Solidity contracts, including addition, subtraction, multiplication, and division. It is the most widely-adopted defense, used by 3,110,124 contracts. SafeMath successfully defends against 1,161 adversarial transactions targeting integer overflows. However, it can be evaded due to incomplete deployment, such as mixed use of SafeMath functions and normal arithmetic operations.

### Additional Defenses
- **onlyOwner**: This general defense is used to prevent privilege escalation, which can be a consequence of many existing attacks, such as call injection.
- **anotherIsHuman or anotherIsContract**: This defense checks whether the origin of a transaction equals the sender of the message to ensure the message sender is not a slave of another master contract. It is deployed by 3,416 token contracts and is effective in defending against airdrop hunting, with only three transactions attempting to circumvent it, all of which failed.

## Observations and Advice

### Observations
1. **Attack Strategy Shift**:
   - The major attack tactics have evolved from reentrancy in 2016 and call injection in 2017 to honeypot in 2018 and airdrop hunting in 2019.
   - After significant incidents like TheDAO and Parity Wallet, the number of adversarial transactions targeting reentrancy and call injection dropped significantly.
   - New attack surfaces are introduced as smart contracts evolve, leading to new attack strategies. For example, the burst of integer overflow in 2017 and 2018 was due to the emergence of contracts with multi-transfer functionality.
   - Honeypot contracts remain a consistent target for attackers because there are no defenses for them.

2. **"Benign" Adversarial Transactions**:
   - Some attacks are launched by white hat hackers to save vulnerable contracts. For example, in TheDAO attack, 97 adversarial transactions from seven contract addresses (5.25% of total) were from "White Hat Group" members, who eventually transferred the obtained ethers to a WithdrawDAO contract for victims to claim.
   - In the Parity Wallet attack, 1,959 adversarial transactions (72.29% of total) were also from "White Hat Group" members, with a similar refund contract deployed for victims.

### Advice
1. **Improving Existing Program Analysis**:
   - Enhance inter-contract dataflow analysis and increase code coverage to detect zero-day vulnerabilities. Many zero-day reentrancies and integer overflows are due to imprecision in prior analysis.

2. **Keeping Pace with New Strategies**:
   - Continuously look for new attack strategies, such as airdrop hunting, and develop corresponding detections and defenses. New attack strategies often gain popularity among adversaries due to the lack of existing defenses.

## Related Work
- **Smart Contract Vulnerability Detection**:
  - Tools like Oyente, Mythril, Manticore, Vandal, Securify, and teEther use static analysis to detect vulnerabilities.
  - Sereum and ContractFuzzer use dynamic analysis to provide runtime protection and find vulnerabilities.
  - Maian, Gasper, and MadMax propose new types of vulnerabilities, such as trace vulnerabilities and gas-focused vulnerabilities.

- **Transactional Analysis**:
  - Studies like Sereum, HoneyBadger, and Perez and Livshits analyze smart contract transactions to understand past attacks and their impact.

- **Safer Smart Contracts or Frameworks**:
  - Proposals like the Hydra Framework and safer smart contract designs aim to improve the security of smart contracts through better development practices.

## Conclusion
This comprehensive measurement study of Ethereum blockchain transactions reveals the gap between reported vulnerabilities and real-world attacks. We identified 344 previously unknown vulnerable contracts with 100,641 adversarial transactions. Our findings highlight the need for improved program analysis and continuous monitoring of new attack strategies to enhance the security of the Ethereum ecosystem.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.