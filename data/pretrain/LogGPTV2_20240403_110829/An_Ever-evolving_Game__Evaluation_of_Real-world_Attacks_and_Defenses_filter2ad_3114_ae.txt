airdrop hunting
reentrancy
0
14
3
21
77
2,691
887
0
65,240
0
Table 7: Defense techniques against different attacks.
Checked Values
# of deployed ct
Target Attack
# of prevented atx
# of successful atx
canDistr
state variable distributionFinished
nonReentrant
state variable _guardCounter
SafeMath
* Privilege escalation can be the consequence of many existing attacks, such as call injection. onlyOwner is a general defense against such escalation.
function parameters
1,161
3,110,124
integer overﬂow
55
We have observed that this defense is successful in prevent-
ing 14 automatically-launched adversarial transactions. As
mentioned in Section 2.1, this defense can be circumvented
via embedding code in the contract’s constructor function
where the code size equals to zero as the contract has not
been constructed yet. We have observed 887 adversarial
transactions that evade deployed defenses.
• anotherIsHuman or anotherIsContract. This defense
checks whether the origin of transaction equals the sender
of the message to ensure that the message sender is not a
slave of another master contract. The defense is deployed
by 3,416 token contracts. Since the defense is effective
in defending against airdrop hunting, we have observed
only three transactions that try, but fail to circumvent the
defense. We did not observe any adversarial transactions
that can evade this defense.
• canDistr. canDistr is a defense that checks the total num-
ber of distributed airdrops to limit the total amount of loss
due to airdrop hunting. Such a defense, deployed by 2,505
contracts, is only effective once the hunted airdrops exceed
a certain amount. As expected, due to the nature of this
defense, it only prevents 21 adversarial transactions when
the total hunted airdrops exceed the limit. On the contrary,
there are 65,240 adversarial transactions that succeed in
obtaining illegitimate airdrops, i.e., evaded this defense.
• nonReentrant. nonReentrant is a defense that checks the
state variable _guardCounter to ensure that the function
is only invoked once during a transaction. The intuition
is that if the function, e.g., a token or ether transfer, is
recursively invoked more than once in one transaction, a
reentrancy attack is in place. nonReentrant is deployed by
952 contracts to prevent reentrancy attacks.
We have observed 77 adversarial transactions that are pre-
vented by the nonReentrant defense. Because the defense
is effective, we did not observe any adversarial transactions
that evade this defense.
• Sa f eMath.
Sa f eMath is a defense library that pro-
vides safe arithmetic operations including addition, sub-
traction, multiplication and division for Solidity contracts.
Sa f eMath, the most widely-adopted defense by 3,110,124
contracts, checks whether the operation results have any
Figure 8: The distribution of adversarial transactions broken
down by attack type over time (We marked three well-known
incidents in the graph; we excluded all the transactions with a
number less than 10 to make the graph clear to view).
integer overﬂows or underﬂows.
We have observed that Sa f eMath is successful in defend-
ing against 1,161 adversarial transactions that target in-
teger overﬂow vulnerabilities. Interestingly, we also ob-
served that Sa f eMath is evaded due to incomplete deploy-
ment, i.e., mixed use of Sa f eMath functions and normal
arithmetic operations. Note that although prior report [10]
warned incorrect implementations of Sa f eMath, we did
not observe any adversarial transactions.
6 Observations and Advices
In this section, we describe several observations made from
our measurement results and also give some advice to existing
security researchers based on our observations.
6.1 Observeations
We present two observations below.
Observation 1 [Attack Strategy Shift]: The major attack
tactics adopted by real-world adversaries evolve from reen-
trancy in 2016 and call injection in 2017 to honeypot in 2018
and airdrop hunting in 2019.
Our ﬁrst observation states that the attack tactics shift over
time: For example, Figure 8 shows that after the famous
TheDAO and Parity Wallet incidents, the amount of adversar-
2804    29th USENIX Security Symposium
USENIX Association
< 10 100 1000 10000 1000002016.012016.072017.012017.072018.012018.072019.01TheDAOParity WalletSpankChainairdrop huntingreentrancyinteger overflowcall injectioncall-after-destructhoneypotTable 8: Peak period of different attack tactics (The average
transactions per month of attacked contracts drop signiﬁcantly
after the attack peak).
Vulnerability
Attack Peak
% atx
Average # tx per month
Before Peak
After Peak
reentrancy
call injection
integer overﬂow
airdrop hunting
2016.6 - 2016.8
2017.7
2018.8 - 2019.1
2018.8 - 2019.3
97.04%
79.40%
70.10%
82.90%
180
22
6,007
7,106
0
0
24
167
* atx: adversarial transactions.
ial transactions targeting both reentrancy and call injection
drops signiﬁcantly. We believe that such a shift of attack tac-
tics is due to the following three reasons:
Reason 1.a: As the smart contract evolves, new attack sur-
faces are introduced as well.
The ﬁrst reason for attack strategy shift is that many new
attack tactics are targeting contracts with new features as well.
Let us analyze integer overﬂow and airdrop hunting sepa-
rately. The burst of integer overﬂow in 2017 and 2018 is due
to the emergence of contracts with multi-transfer functionality,
i.e., transferMulti, batchTransfer and multiTransfer,
as compared to the old, unproﬁtable integer overﬂow vulnera-
bilities in loop conditions as found by prior works [9, 31].
The burst of airdrop hunting in 2018 and 2019 is because
the ﬁrst airdrop tokens were only spotted in late 2017 and
then became much more popular in October 2018. For exam-
ple, our investigation shows that 851 airdropping contracts
have emerged between June 2018 and October 2018. The fast
introduction of airdropping contracts leads to corresponding
airdrop hunting attacks as well.
Reason 1.b: The breakout of attacks drains off all the high-
value, vulnerable contracts, causing the follow-up attacks
unproﬁtable.
The second reason for attack strategy shift is that after the
breakout of each attack category, e.g., reentrancy and call
injection attack, the rest contracts with similar code patterns
are of low-value, i.e., being not worth of attacking. Table 8
shows the peak period of each attack category and the average
number of transactions of vulnerable contracts before and
after the peak. Clearly, the number of users drops signiﬁcantly
after being attacked.
One exceptional category that attackers always like to adopt
from its emergence in 2017 until recently is honeypot con-
tracts, the transaction amount of which distributes almost
evenly across the time axis. The reason is that there exist no
defenses for a honeypot contract, in which the owners are the
adversaries waiting for adventurers to fall into the pit.
Reason 1.c: Most contracts die with very few number of trans-
actions after being attacked.
We observed a dramatic drop in the number of contracts’
transactions the month after being attacked. Over 95% of
the attacked contracts suffer an over 75% drop in terms of
transactions, and 81.69% contracts have no transactions at all
after being attacked. Table 8 shows the average number of
normal transactions before and after the attack peak periods
broken down by different attack tactics. This clearly shows
that most contracts die after being attacked.
We also analyze the contracts that survive the attacks and
report the reasons. One typical kind of survivors are airdrop
token contracts. The core reason for their survival is that their
vulnerabilities are time-limited. Speciﬁcally, these token con-
tracts only airdrop newcomers during a “promotion period”.
Therefore, the amount of airdrop token is actually limited,
preventing attackers from draining all the token. The represen-
tative of another kind of survivors is SpankChain. Among all
the public security incidents, the attacks against SpankChain
caused the least loss. Our manual analysis shows that this
is due to the modular design of SpankChain contracts. The
attacker was only able to compromise one payment channel
smart contract of SpankChain, which contains a limited num-
ber of ethers compared to its market capitalization (less than
1%). What’s more, the modular design enables SpankChain
team to apply a quick patch by just replacing the vulnerable
payment contract, without affecting other modules.
Observation 2 [“Benign” Adversarial Transactions]:
Some attacks are launched by white hat hackers to save vul-
nerable contracts.
Our second observation is that some adversarial transac-
tions, although exploiting a vulnerability, could be “benign”
as well. Particularly, many white hat hackers, being aware of
the existence of a vulnerability, may exploit it and compete
with real adversaries. These white hat hackers will return all
the saved ethers and tokens back to the victims afterward. We
have observed this trend for both TheDAO and Parity Wallet.
• “Benign” Adversarial Transactions for TheDAO. We ob-
served that 97 adversarial transactions from seven contract
addresses, i.e., 5.25% of total adversarial transactions of
TheDAO attack, are from “White Hat Group”(WHG) mem-
bers. All the ethers obtained by these seven addresses—
which are 7.9 million ethers—are eventually transferred to
a newly-created WithdrawDAO contract [2]. Then, a victim
of TheDAO attack can claim those ethers by calling the
contract’s withdraw function, which returns the victim’s
balance in TheDAO contract back. In August 2019, there
still exist 120K ethers in the WithdrawDAO contract.
• “Benign” Adversarial Transactions for Parity Wallet. We
observed that 1,959 adversarial transactions, i.e., 72.29%
of total adversarial transactions of the Parity Wallet attack,
are also from “White Hat Group”(WHG) members, with a
total number of 50K ethers. A similar refund contract [3]
has also been deployed for victims to get their ethers back.
6.2 Advices
We now present two advices that we are suggesting for smart
contract research.
Advice 1 [Improving Existing Program Analysis]: We sug-
USENIX Association
29th USENIX Security Symposium    2805
gest to improve existing program analysis, such as supporting
inter-contract dataﬂow analysis and increasing code cover-
age.
Our ﬁrst advice is to improve existing program analysis,
because many zero-day vulnerabilities of traditional attack
categories are discovered in our study due to the imprecision
of prior analysis. For example, several zero-day reentrancies
are due to the fact that state variable is stored in a cross-
contract location, and zero-day integer overﬂows are because
some code branches, such as new interfaces, are not covered
during static analysis. Therefore, we suggest existing secu-
rity analysis tools using program analysis to include such
important factors.
Advice 2 [Keeping Pace with New Strategies]: We suggest
to look for new attack strategies adopted by adversaries and
keep pace with corresponding detections and defenses.
Our second advice is that we should keep looking for new
attack strategies adopted by adversaries, such as airdrop hunt-
ing studied in this measurement, and then study defenses
and detections. Those new attack strategies usually gain very
popular within adversaries due to the lack of corresponding
defenses and therefore should be of high priority in our re-
search community once emerged.
7 Related Work
In this section, we discuss related work on smart contracts
from two aspects: (i) static or dynamic analysis of contracts
in detecting vulnerabilities, and (ii) transactional analysis of
attacks.
7.1 Smart Contract Vulnerability Detection
Researchers have proposed many works in detecting smart
contract vulnerabilities, especially the traditional ones like
reentrancy, integer overﬂow and call injection. On one hand,
Oyente [31], Mythril [9], Manticore [5], Vandal [23], Secu-
rify [41] and teEther [30] adopt static analysis, e.g., symbolic
execution, to detect an execution path between a source, e.g.,
a contract input, and a vulnerable sink. Bhargavan et al. [21]
present preliminary work to use existing veriﬁcation systems
to validate smart contracts. ZEUS [29] transfers low-level
bytecode to LLVM IR [17] and applies static symbolic model
checking to detect whether a violation exists. On the other
hand, Sereum [36], a dynamic analysis tool, provides runtime
protection against reentrancy attacks and also detects many
real-world, new reentrancy patterns that have never been re-
ported before. ContractFuzzer [28] ﬁrst leverages dynamic
testing method [15] to ﬁnd vulnerabilities in smart contracts.
It generates testing inputs from the ABI speciﬁcations of
contracts and instruments EVM to determine whether vulner-
abilities are triggered.
Researchers have also proposed many new vulnerabilities
in smart contracts. Maian [33] is the ﬁrst to propose a class
of so-called trace vulnerabilities that have to be triggered by
multiple invocations over a contract which belongs to a spe-
cial type of call-after-destruct. Gasper [25] ﬁrst points out
the extra gas cost caused by under-optimized contract code.
MadMax [27] further focuses on EVM gas-focused vulnera-
bilities, for example, unbounded mass operations leading to
an out-of-gas exception. This vulnerability will cause a DoS
consequence with no direct ether or token losses. Torres and
Steichen [40] observe the rising of honeypot contracts and
summarize the techniques adopted by the honeypots.
As a general comparison, our measurement study focuses
on these vulnerabilities that are attacked in the real world, but
not these contracts that can be attacked. Our study does point
out a gap between what has been detected by prior works and
what has been attacked—this sets off alarm bells to security
researchers on what needs to be studied in the future.
7.2 Transactional Analysis
Researchers have also proposed to analyze smart contract
transactions and understand, to some degree, what has been
attacked in the past. For example, Sereum replays 78 mil-
lion transactions involved in the ﬁrst 4.5 million blocks of
Ethereum and conﬁrms reentrancy attacks of two exploited
contracts. HoneyBadger crawls all the transactions of 282
true positives to track the ether ﬂowing in and out the hon-
eypots. Perez and Livshits [35] evaluate all the vulnerable
contracts reported by prior work and their transactions, and
then conclude that only a small number of contracts are ac-
tually attacked. We also have a similar observation as Perez
and Livshits in terms of attacked contracts.
As a general comparison, our measurement study is the ﬁrst
work to analyze all the transactions during a certain period
and study the vulnerability patterns and attack trends. From
these attacks, we also evaluate the effectiveness of existing
defenses in terms of prevented and successful transactions.
Our work sheds a light on future research directions: We
believe that researchers should focus on new vulnerability
types and old vulnerabilities with new patterns.
7.3 Safer Smart Contracts or Framework
Some researchers are working on the design of a safer smart
contract or framework. For example, Breindenbach et al. [22]
propose a so-called Hydra Framework, which models and
administers bug bounties to incentivize bug disclosure. For
another example, Delmolino et al. [26] present their own ex-
perience in building safer smart contracts at the University of
Maryland. As a comparison, those works are orthogonal to our
measurement study, because they are suggesting a new way
to develop contracts, while we are studying existing attacks
and defenses.
8 Conclusion
In this paper, we perform the ﬁrst comprehensive measure-
ment study of transactions on the Ethereum blockchain by
analyzing real-world attacks and defenses. Our results reveal
and quantify the gap between what has been reported by prior
2806    29th USENIX Security Symposium
USENIX Association
work and what has been adopted by real-world adversaries.
Particularly, we have identiﬁed 344 previously-unknown vul-
nerable contracts with 100,641 adversarial transactions.
When analyzing adversarial transactions, we also study
how developers adopt defenses against real-world attacks.
We have identiﬁed six classes of defenses, which prevented
1,276 adversarial transactions in total. We ﬁnd that these
defenses are evaded as well largely due to incomplete de-
ployments. The back-and-forth attacks and defenses show an
ever-evolving game that exists in the Ethereum ecosystem.
We are making two suggestions for smart contract related
researches. First, we suggest keeping improving prior pro-
gram analysis to support inter-contract dataﬂow and increase
existing code coverage. Second, we suggest keeping an eye
on newly-emerged attack strategies as they can easily draw
much attention to adversaries.
Acknowledgement
We would like to thank the anonymous reviewers for their
insightful comments that helped improve the quality of the
paper, and the authors of related researches [23,28–31,39–41]
for their datasets that help us evaluate our tool. This work was
supported in part by the National Natural Science Founda-
tion of China (U1636204, U1736208, U1836210, U1836213,
61972099, 61602121, 61602123), Natural Science Founda-
tion of Shanghai (19ZR1404800). Min Yang is the corre-
sponding author, and a faculty of Shanghai Institute of Intelli-
gent Electronics & Systems, Shanghai Institute for Advanced