你有没有被别人问过一个非常简单的问题，却震惊地发现自己不能清晰地解答。你刚开始会说：“这个，很明显……”，接下来只有“哦……”。这种情况在我身上屡屡发生。我们自认为已经透彻理解了这个话题，实际上我们只是掌握了表面知识。
这就是传道授业的价值。在你的知识集合里面，总有一部分知识你并没有理解透彻到可以向别人解释，而“教”的过程能够迫使你面对这一部分。作为人类，我们的大脑善于模式识别。我们能够识别模式，并且套用这些固定的模式去解决许多问题，而没有做到“知其然”也“知其所以然”。
这种肤浅的理解力无碍于我们完成工作，因而不易被察觉。然而一旦我们试着向别人解释某件事情的运作原理或背后的原因的时候，我们在认知上的漏洞就会暴露出来。
不过这并非坏事。我们需要知道自己的弱点，然后才能对症下药。在教别人的时候，你迫使自己面对课题中的难点，深入探索，从只知皮毛变成完全理解。学习是暂时的，而理解是永久性的。我可以背诵九九乘法表，但是一旦理解了乘法的运算原理，即使突然记性不好，我也可以重做一张乘法表。
在教别人的时候，你需要重新组织大脑中的所有数据。当我们刚开始学新东西的时候，通常都是些零散的知识点。这些素材在你被教授的时候可能都是组织得很好的，但是一旦进入你的大脑后，它们经常是以非常混乱的形式被存储起来的。你掌握的一个概念，然后又跳到下一个概念，然后又跳回到之前的概念，直到回到之前没有掌握的内容。
这种在大脑中存储信息的方式非常低效且混乱。这就是当别人来问你问题的时候，你明明知道答案，但说出来却是前言不搭后语的原因。你知道自己知道，却无法解释得一清二楚。
在你试图教别人的时候，你强迫自己重新组织大脑中的资料。最好的思维方法就是解释某样东西并将其记录在纸上，或者记录到Word文件或者幻灯片中，使你可以将这些互不连贯的碎片信息收集起来，并以一种有效的方法重新组织起来。要想教人，你得先把自己教会。传道授业为何是卓有成效的学习方法，原因正是如此。
入门
也许，现在，我已经让你相信，传道授业是一件你可以做也应该去做的事情，尤其当你希望自己能够深刻理解已有知识的时候。那你会想知道：如何才能真正开始传道授业？要想切实迈出这一步，成为某个学科的权威并非易事。对于该学科，你也许会得心应手，也可能是忐忑不安。
我发现最好的教学方式就是以谦虚的视角来观察问题，以权威的口吻去诠释问题。我的意思是说，当你教别人的时候，无需让自己表现得比学生更智慧、更博学，但要充满信心，坚信自己所说的一切。没人愿意跟一个对自己讲的内容毫无底气的人学习，也没有人愿意在学习的过程中被人看作是愚不可及的。
要把这一切做到恰到好处还需要一些练习，因为很容易从一个极端走向另一个极端。你要明白，你教的目的是为了帮助别人，而不是为了证明自己的优越性或者寻求认可。
想想让你印象深刻的老师们，他们让你沉浸在学习之中，对你的生活产生了积极影响。他们拥有哪些素质？他们采用的教学方法有哪些？
那么从哪里着手呢？是不是应该需要开设自己的课堂，广招学生呢？
我的建议是：你从“小”做起，渐渐习惯去分享自己的想法。我一直建议开发人员要开自己的博客（参见本书第二篇）。博客是很棒的地方，它能让你在教自己所学的知识的同时不必承受过多的压力。在你掌握一个主题之后，可以撰写博客来分享自己所学。看看自己能不能以这一简单的方式来从接收到的信息中提炼出要点。事实上，我就是这样开始写自己的博客“Simple Programmer”的。我最初的目标，也是最重要的目标，就是“化繁为简”。当我开始写博客的时候，我希望能将自己学到的东西进行简化，从而方便别人理解。
然而你并不要止步于写博客。另一个重要方法就是在本地用户组的聚会上或者自己的工作场所进行演讲。只要记住一个原则：心态谦卑，信心满满（而不是傲慢自大）。即使你可能不是最好的演讲者，你也会做得很好。
视频，尤其是教程截屏，也是一种很好的教学方式，很容易上手。你可以使用像Camtasia(http://simpleprogrammer.com/ss-camtasia)或ScreenFlow(http://simpleprogrammer. com/ss-screenflow)这样的录屏软件来录制你的屏幕，并提供一个画外音来解释操作过程。这种教学方式能够真正给你带来挑战，迫使你去思考呈现信息的最佳方式（音频、视频和实际演示）。
采取行动
想出一个你可以教别人的话题并教给别人。本周你要尝试一些教学方法，如写博客、发表演讲、录制截屏等。
当你做教学准备的时候，要特别注意这些准备工作是如何提升自己对某个主题的理解的。对那些没打算去教别人就不可能发现的自己的知识短板要多加留意。
第34章 你需要一个学位吗，还是可以对此忽略不计
关于大学学位对于软件开发人员的价值，长期以来存在各种争论。没有学位的软件开发人员在职业生涯中和生活中能取得成功，又或者他们注定就是要搜遍每个角落还是找不到工作？
在本章中，我们会探讨高等教育的优势和弊端。当你没能走上学术之路的时候，你该如何获得成功？对此我会给你一些提示。
获得成功必须要有学位吗
我敢肯定，你知道这是一个很棘手的问题。如果你问的是一个有学位的人，他们很可能会说“是”。如果你问的是一个没有学位的人，答案可能是“不”——除非他们当时正好处于失业的状态。但是，真相到底是什么？你到底是否需要一个学位？
好吧，我碰巧有一个计算机科学的学位，但是我刚开始工作的时候我还没有学位，所以我刚好处于两大阵营的中间。虽然这并不能让我的答案无懈可击，但是无论如何，这种经历确实可以让我以两个阵营中任何一方的视角来看待有关求职和晋升的问题。
以我的经验，我发现，拥有学位并不是成功所必需的，但它肯定是一个限制性因素，它限制了可以提供给你的职位数量，并且某种程度上也限制了你的晋升，特别是在大公司中。没有学位可能会让你的简历被过滤掉，连被人看到的机会都没有。许多公司，特别是大公司，会根据受教育水平来过滤求职申请。事实上，一些公司的招聘政策中明确要求软件开发人员拥有大学学位。当然，这并不意味着你就不能从这些公司获得工作机会，总有一些例外，但是肯定会难上加难。
我不想在这里过分强调学位的重要性，但我希望你能明白，没有学位会限制你的选择。在这个大前提下，我确信，学位并不是成功的必备条件。
我知道有许多成功的软件开发人员并没有拿到学位，比尔·盖茨就是一个很好的例子。他没有完成学业，但是看看他现在的成就。在我软件开发职业生涯的大部分时间里，我并没有学位，我也做得很好。在软件开发领域，能力最为重要。与一纸学历证明相比，如果你能写好代码，能解决问题，能证明自己有此能力，你就能走得更远。
与其他行业相比，软件开发最大的不同就是：该领域总是不断变化。每天都有新的框架和技术问世。在教育机构中培养能适应真实工作环境的软件开发人员几乎是不可能的。等到教材出版、课表排好的时候，很多东西已经改变。
但是，这并不意味着，在软件开发中不存在永恒不变的核心领域。许多计算机科学课程中包含的算法、操作系统、关系型数据库理论和其他主题都是永恒的。然而最简单的事实是，当你坐在办公桌前开始写代码的时候，你极少会用到在学校学到的技能。身为软件开发人员，我们所做的大部分工作，都是如何使用新技术，学会如何用它们完成工作。我们很少需要回溯到计算机科学的本源。
同样，这并不意味基础的计算机科学教育毫无价值。能够深入挖掘问题并理解问题（而不是停留在表面上）的能力更具价值。对大多数软件开发人员来说，在工作中取得成功的更直接因素还是相关工作经验。
拥有学历的优势
我们已经讨论了拥有学历的一些优势，现在让我们更深入地探讨一下这个问题。
首先，学历教育可以确保你在软件开发方面获得全面的教育。计算机科学方面的学位或者其他与软件开发相关的学位，不会给你带来成为优秀的软件开发人员所需的全部教育，但是大多数学位课程能给你打下坚实的基础。
你当然也可以自学这些东西，但如果你选择自学，最终会在你的知识体系中留有漏洞，将来这些漏洞有可能会在你的职业生涯中会伤害到你。计算机科学或相关学位的教育让你学习高等数学，了解编程语言、操作系统和算法，以及一些并非日常工作所必需的核心主题；这能让你拥有良好的基础，能够让你更深入的理解自己在做什么，以及各种工作原理。
拥有一个学位也可以帮你即使毫无经验也能踏入职场。软件开发领域很难闯入，特别是缺乏任何经验的话。在这种情况下，有个学位就大不相同。如果从来就没有从事过相关工作又没有接受过正规教育，你就很难让别人相信你会写代码。
学位还可以给你更多的选择。如果你没有获得过相关学位，有一些职位你是永远不会得到的，尤其是在大公司中。没有学位，做到一定的行政岗位之后就会有一个困难期。如果你决定要转到管理岗位，你可能得获得MBA学位，而这会要求你必须先拥有一个较低的学位。表34-1列出了学位的几个好处和缺点。
表34-1 学位的好处和缺点
学位的好处
学位的缺点
接受有关软件开发方面的全面的系统教育
花费原本可以赚钱的时间去学习
无需经验就可以入行
可能会受困于思维定势，难以打破
有更多选择，更容易转到行政或管理岗位
没有学历又当如何
显然，拥有学历不仅对你无害反而能帮到你。但是如果没有学历你该怎么做呢？
如果没有学历，你就不得不更多地依靠经验来证明自己的能力。学位至少可以让雇主相信你具了解某些软件开发的知识，那么如果你没有学位的话，你就要能够证明自己有这些能力。
证明自己的能力的最好的办法就是以往的工作经验。如果在过去五年中你一直从事软件开发的工作，那么即使没有学位也能说明你会写代码。但是，如果你刚刚踏入职场，那你的求职之路会很艰难，你不得不去证明自己确实能够做到你自己所说的那些。因此准备一份作品集是最好的方法。
不管你是拥有学位还是拥有经验，我都建议你将自己的工作成果总结为作品集。如果你既没有工作经验也没有学位的话，你最好能够展示一些自己写的代码。现在，做到这一点的最好的办法就是在GitHub（http://github.com）这样的代码托管网站上创建或者参与一个开源项目。GitHub上托管着许多开源项目，人们可以通过你的GitHub页面看到你的贡献。
你也可以把自己创建的网站或者应用程序整理出来，带着这些源代码去面试。我一直推荐开发人员（特别是刚入行的开发人员）创建一个移动应用，Android或iOS应用均可。这是向未来雇主展示能力的好办法——让他了解你具有开发并部署一个完整应用的能力。