   addr = ScreenEA();  
   AddBpt(addr);  
   SetBptCnd(addr, "my_breakpoint_condition()");  
}
my_breakpoint_condition
 的复杂程度完全由你自己决定。在这个例子中，每次遇到一个新的断点，都会显示一个对话框，询问用户是想要继续执行进程，还是在当前位置暂停。调试器使用my_breakpoint_condition
 返回的值决定是实践断点，还是忽略断点。
从SDK 及通过使用脚本均能够以编程方式控制调试器。在 SDK 内，IDA 利用事件驱动模型并在发生特定的调试器事件时向插件提供回调通知。遗憾的是，IDA 的脚本功能并不便于在脚本中使用事件驱动范型。因此，Hex-Rays 引入了许多用于从脚本中同步控制调试器的脚本函数。使用脚本驱动调试器的基本方法是开始一个调试器操作，然后等待对应的调试器事件代码。记住，调用一个同步调试器函数（这是你在脚本中能够执行的所有操作）时，IDA 的所有其他操作将被阻止，直到这个调用完成。下面详细说明了几个调试扩展。
long GetDebuggerEvent``(long wait_evt, long timeout)
 。在指定的秒数内（1 表示永远等待）等待一个调试器事件（由 wait_evt
 指定）发生。返回一个事件类型，指出收到的事件的类型。使用一个或几个WFNE_XXX
 （WFNE表示Wait For Next Event）标志指定 wait_evt
 。请参阅IDA 帮助文件了解可能的返回值。
bool RunTo(long addr)
 。运行进程，直到到达指定的位置或遇到一个断点。
bool StepInto()
 。按指令逐步运行进程，步入任何函数调用。
bool StepOver()
 。按指令逐步运行进程，跨过任何函数调用。遇到断点时该调用可能提前终止。
bool StepUntilRet()
 。运行进程，直到当前函数调用返回或遇到一个断点。
bool EnableTracing(long trace_level, long enable)
 。启用（或禁用）跟踪事件的生成。trace_level
 参数应设置为在 idc.idc 中定义的一个 TRACE_ XXX
 常量。
long GetEventXXX()
 。有许多函数可用于获取与当前调试事件有关的信息。其中一些函数仅对特定的事件类型有效。你应该测试 GetDebuggerEvent
 的返回值，以确保某个GetEventXXX
 函数可用。
为了获取调试器的事件代码，在每一个使进程执行的函数返回后，必须调用GetDebugger- Event
 。如果不这样做，随后单步执行或运行进程的尝试将会失败。例如，下面的代码只会单步执行调试器一次，因为它没有在两次调用StepOver
 之间调用 GetDebuggerEvent
 ，以清除上一个事件类型。
StepOver();  
StepOver();    //this and all subsequent calls will fail  
StepOver();  
StepOver();
正确的执行方法是在每次调用 StepOver
 之后调用一次 GetDebuggerEvent
 ，如下所示：
StepOver();  
GetDebuggerEvent(WFNE_SUSP, -1);  
StepOver();  
GetDebuggerEvent(WFNE_SUSP, -1);  
StepOver();  
GetDebuggerEvent(WFNE_SUSP, -1);  
StepOver();  
GetDebuggerEvent(WFNE_SUSP, -1);
调用GetDebuggerEvent
 后，即使你选择忽略 GetDebuggerEvent
 的返回值，执行仍将继续。事件类型 WFNE_SUSP
 表示我们要等待一个使被调试的进程挂起的事件，如一个异常或断点。你可能已经注意到，并没有函数可以恢复执行一个被挂起的进程1
 。但是，通过在调用 GetDebugger-Event
 时使用WFNE_CONT
 标志，我们可以达到相同的目的，如下所示：
1. 实际上有一个定义为GetDebuggerEvent(WFNE_CONT|WFNE_NOWAIT，O)
 的宏Resume Process
 。
GetDebuggerEvent(WFNE_SUSP | WFNE_CONT, -1);
这个特殊的调用通过继续由当前指令位置执行进程，等待初步恢复执行后的下一个可用的挂起事件。
其他函数可用于自动启动调试器和依附正在运行的进程。请参阅 IDA 帮助文件，了解这些函数的更多信息。
下面是一个简单的调试器脚本，通过它可以收集与被提取的指令的地址有关的统计信息（假如调试器已经启用），如下所示：
  static main() {  
     auto ca, code, addr, count, idx;  
➊    ca = GetArrayId("stats");  
     if (ca != -1) {  
         DeleteArray(ca);  
     }  
     ca = CreateArray("stats");  
➋    EnableTracing(TRACE_STEP, 1);  
➌    for (code = GetDebuggerEvent(WFNE_ANY | WFNE_CONT, -1); code > 0  
             code = GetDebuggerEvent(WFNE_ANY | WFNE_CONT, -1)) {  
➍         addr = GetEventEa();  
➎         count = GetArrayElement(AR_LONG, ca, addr) + 1;  
➏         SetArrayLong(ca, addr, count);  
      }  
     EnableTracing(TRACE_STEP, 0);  
➐    for (idx = GetFirstIndex(AR_LONG, ca);  
             idx != BADADDR;  
             idx = GetNextIndex(AR_LONG, ca, idx)) {  
        count = GetArrayElement(AR_LONG, ca, idx);  
        Message("%x: %d\n", idx, count);  
     }  
➑    DeleteArray(ca);  
    }
这个脚本首先测试一个名为 stats
 的全局数组是否存在（➊ ）。如果存在，则删除该数组，再重建一个，以便我们可以使用一个空数组。接下来，启用单步跟踪（➋ ），然后进入一个循环（➌ ）开始单步执行进程。每次生成一个调试事件，将获取相关事件的地址（➍ ），相关地址的当前总数从全局数组中获取，并不断递增（➎ ），该数组将根据新的总数更新（➏）。注意，这里的指令指针用做稀疏全局数组的索引，使我们免于查找其他数据结构的地址，从而节省大量时间。整个过程结束后，再使用第二个循环（➐ ）获取并打印所有拥有有效值的数组位置的值。在这个例子中，拥有有效值的数组索引代表被提取指令的地址。最后，这个脚本删除用于收集统计信息的全局数组（➑）。这个脚本的示例输出如下所示：
401028: 1  
40102b: 1  
40102e: 2  
401031: 2  
401034: 2  
401036: 1  
40103b: 1
稍作修改后，前面的例子可用于收集有关指令类型的统计信息，即在一个进程执行过程中，有哪些类型的指令被执行。下面的例子说明如何对第一个循环进行必要的修改，以收集指令类型数据（而非地址数据）：
   for (code = GetDebuggerEvent(WFNE_ANY | WFNE_CONT, -1); code > 0;  
        code = GetDebuggerEvent(WFNE_ANY | WFNE_CONT, -1)) {  
      addr = GetEventEa();  
➊   mnem = GetMnem(addr);  
➋   count = GetHashLong(ht, mnem) + 1;  
➌   SetHashLong(ht, mnem, count);  
   }
我们并没有对各个操作码分类，而是选择按助记符将指令分组（➊）。由于助记符是字符串，所以我们利用全局数组的散列表特性获取与一个给定助记符有关的当前总数（➋），并将更新后的总数（➌）保存到对应的散列表条目中。这个修改后的脚本的样本输出如下所示：
add:   18  
and:   2  
call:  46  
cmp:   16  
dec:   1  
imul:  2  
jge:   2  
jmp:   5  
jnz:   7  
js:    1  
jz:    5  
lea:   4  
mov:   56  
pop:   25  
push:  59  
retn:  19  
sar:   2  
setnz: 3  
test:  3  
xor:   7
在第25 章中，我们将讨论如何利用调试器的迭代功能对二进制文件进行去模糊处理。
24.4.2 使用IDA 插件实现调试器操作自动化
在第16 章中，我们了解到，IDA 的SDK 提供了非常强大的功能，用于开发各种复杂的编译扩展，这些扩展可以与 IDA 集成，并能够访问全部 IDA API 。IDA API 提供了IDC 的所有功能，调试扩展也不例外。 API 的调试器扩展在/dbg.hpp 文件中声明，其中包含与我们迄今为止所讨论的 IDC 函数对应的C++ 函数，以及全面的异步调试器接口功能。
为了实现异步交互，插件通过“钩住”HT_DBG
 通知类型（参见 loader.hpp 文件）访问调试器通知。调试器通知在 dbg.hpp文件中的dbg_notification_t
 枚举中声明。
在调试器 API 中，用于与调试器交互的命令通常成对定义，一个函数用于同步交互，另一个函数则用于异步交互。一般而言，一个函数的同步形式命名为 COMMAND()
 ，而对应的异步形式则命名为request_COMMAND()
 。rehttp://www.ituring.com.cn/article/50699quest_XXX
 函数用于对调试器操作排队，以便于随后的处理。排列好异步请求后，必须调用 run_requests
 函数，开始处理请求队列。在处理请求时，调试器通知将被传递给你通过 hook_to_notification_point
 注册的任何回调函数。
使用异步通知，我们可以为前一节中用于统计地址总数的脚本开发一个异步版本。首先，我们需要配置如何“钩住”和松开调试器通知。我们使用插件的init
 和term
 方法完成这个任务，如下所示：
//A netnode to gather stats into  