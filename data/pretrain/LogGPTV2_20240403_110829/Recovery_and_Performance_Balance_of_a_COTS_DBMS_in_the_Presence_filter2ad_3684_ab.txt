### Database Administrator Tasks and Operator Faults

The list of tasks performed by a database administrator (DBA) is extensive. To better understand and manage these tasks, we have analyzed and categorized them into classes related to the major groups of database administration operations. This analysis was based on the core functions available in all DBMS [10], interviews with DBAs from real-world database installations, and an examination of database scripts used to assist in various administrative tasks. Table 1 outlines the proposed classes of DBMS operator faults, each class encompassing multiple types of mistakes, along with examples.

#### Major Groups of Operations

These major groups of operations are common across commercial DBMS, as they pertain to core functionalities available in all DBMS [10]. While specific details of some administrative tasks may vary between different DBMS, the use of standard SQL simplifies the identification of equivalent mistakes across different implementations. Some operator faults, however, are closely tied to unique features of a particular DBMS and may not have direct counterparts in other systems.

#### Impact of Administrator Mistakes

Administrator mistakes can significantly affect the availability and performance of a DBMS, highlighting the importance of benchmarking the system's behavior in the presence of such faults. Injecting operator faults into a DBMS can be achieved by reproducing common DBA errors, using the same methods employed by actual DBAs. This process can be automated through scripts that perform the incorrect operation at a specified time (the fault trigger). The fault trigger can be configured to distribute faults uniformly over time or synchronize them with specific events or commands in the workload.

### Classes of DBMS Operator Faults

| Class | Description |
|-------|-------------|
| **Memory and Process Administration** | Mistakes in managing processes and memory structures, such as incorrect memory allocation, process initialization parameters, and accidental database shutdowns. |
| **Security Management** | Errors in assigning passwords, access privileges, and disk space to users. These faults are particularly problematic due to their difficult detection. |
| **Storage Administration** | Mistakes in handling physical and logical storage structures, such as incorrect file distribution across disks and running out of storage space. |
| **Database Schema Administration** | Errors related to user object management, including the removal or corruption of objects like tables, indexes, and incorrect configuration of optimization structures. |
| **Recovery Mechanisms Administration** | Mistakes in configuring and administering database recovery mechanisms, such as the absence of backups, log file removal or corruption, and missing archive logs. |

### Example of Operator Faults in Oracle DBMS

Table 2 provides an example of specific operator faults for Oracle 8i DBMS, indicating whether each type of fault is likely to be found in other DBMS based on the analysis of fault characteristics and general architectural features of DBMS [10].

| Type of Operator Fault | Other DBMS |
|------------------------|-------------|
| Making a database instance shutdown | Yes |
| Removing or corrupting the initialization file | Equivalent |
| Incorrect configuration of SGA parameters | Equivalent |
| Incorrect configuration of max. number of user sessions | Equivalent |
| Killing a user session | Yes |
| Database access level faults (passwords) | Equivalent |
| Incorrect attribution of system and object privileges | Equivalent |
| Attribution of incorrect disk quotas to users | Equivalent |
| Attribution of incorrect profiles to users | Equivalent |
| Incorrect attribution of tablespaces to users | Equivalent |
| Delete a controlfile, tablespace, or rollback segment | Oracle |
| Delete a datafile | Yes |
| Incorrect distribution of datafiles through disks | Yes |
| Insufficient number of rollback segments | Yes |
| Set a tablespace offline | Yes |
| Set a datafile offline | Yes |
| Set a rollback segment offline | Yes |
| Allow a tablespace to run out of space | Yes |
| Allow a rollback segment to run out of space | Yes |
| Delete a database user | Yes |
| Delete any user’s database object | Yes |
| Incorrect configuration of object’s storage parameters | Yes |
| Set the NOLOGGING option in tables | Yes |
| Incorrect use of optimization structures | Yes |
| Delete a redo log file or group | Equivalent |
| Store all redo log group members in the same disk | Equivalent |
| Insufficient redo log groups to support archive | Equivalent |
| Inexistence of archive logs | Equivalent |
| Delete an archive log file | Equivalent |
| Store archive files in the same disk as data files | Equivalent |
| Backups missing to allow recovery | Equivalent |

### Emulation and Recovery of Operator Faults

To emulate an operator fault, a set of steps must be followed, as shown in Figure 1. A crucial aspect is the fault trigger, which determines the moment of fault activation. Different fault triggers can result in varying system behaviors depending on the system state.

Additionally, it is essential to evaluate the required recovery procedures after each fault. The recovery process includes the time needed to detect the error, which is typically human-dependent. For experimental purposes, a standard detection time is established for each type of fault.

### Experimental Setup

The experiments were conducted on a platform consisting of two Intel Pentium III servers, each with 256MB of memory, four 20GB hard disks, running Windows 2000, and connected via a dedicated fast-Ethernet network. The TPC-C performance benchmark [1] was used, running on Oracle 8i, to evaluate both performance and recoverability. The TPC-C benchmark simulates typical OLTP environments, with a mix of read-only and update-intensive transactions. Performance is measured in transactions-per-minute-C (tpmC).

Figure 2 illustrates the experimental setup, which includes configurations with a single database server and a stand-by server to assess the benefits of using a spare server for faster recovery. The driver system emulates client applications and records data for recovery and integrity measures, such as recovery time and transaction execution.

### Experimental Results and Discussion

Three sets of experiments were conducted:
1. **Basic Recovery Mechanism**: Evaluated the effectiveness of online redo logs.
2. **Archive Log Mechanism**: Assessed different configurations of the archive log mechanism.
3. **Stand-by Database Mechanism**: Examined the effectiveness of a stand-by database for recovery.

#### Results with Basic Recovery Mechanism

The online redo log mechanism alone ensures recovery from Shutdown Abort faults. Other faults can be recovered if the last database backup was made after the last reuse of any redo log file. The frequency of checkpoints is a critical factor affecting recovery time. Frequent checkpoints and minimizing the time dirty data blocks remain in the cache can reduce recovery time.

This structured approach provides a comprehensive understanding of DBA tasks and the impact of operator faults, enabling better management and recovery strategies.