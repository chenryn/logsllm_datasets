A common pattern with signals like SIGHUP, SIGINT, and SIGTERM is to perform
some cleanup and then invoke the default handler. For example, in C:
    static void signal_handler(int signum) {
        do_cleanup();
        signal(signum, SIG_DFL);
        raise(signum);
    }
This is different from calling `exit` yourself. For one thing, `exit` is not
async-signal-safe, so you'd actually need to call `_exit` or `abort`. But more
importantly, the parent process (e.g. the shell) can tell from `wait` if a
child was killed by a signal or exited normally. So even if you mimic the exit
code:
    await Deno.signal(sig);
    Deno.exit(128 + sig);
it will not be the same as invoking the default handler.
You can call `Deno.kill(Deno.pid, sig)`, but this requires the very broad
permission `--allow-run`. It would be better if there was a `Deno.raise(sig)`
function that did not require any permission.