## Page 489
474
第22章gawk进阶
$gaukc  BEGIN(FS=*, *) (print $1, *FNR=*FNR) * datal data1
datal1 FNR=1
data21 FNR=2
E=8Nd teesep
data11 FNR=1
data21 FNR=2
E=αNd Teerep
在这个例子中，gawk程序的命令行定义了两个输入文件（两次指定的是同样的输入文件）。
这个脚本会打印第一个数据字段的值和FNR变量的当前值。注意，当gawk程序处理第二个数据文
件时，FNR值被设回了1。
现在，让我们加上NR变量看看会输出什么。
$gawk 
(‘=S4) NI0G8  END(pzint *There were*,NR, *records processed*)* datal Gatal
datal1 FNR=1 NR=1
E=N E=Na Teeep
data21 FNR=2 NR=2
datal1 FNR=1 NR=4
data21 FNR=2 NR=5
There vere 6 records processed
data31 FNR=3 NR= 6
FNR变量的值在gawk处理第二个数据文件时被重置了，而NR变量则在处理第二个数据文件时
继续计数。结果就是：如果只使用一个数据文件作为输人，FNR和NR的值是相同的；如果使用多
个数据文件作为输人，FNR的值会在处理每个数据文件时被重置，而NR的值则会继续计数直到处
理完所有的数据文件。
说明在使用gawk时你可能会注意到，gawk脚本通常会比shell脚本中的其他部分还妥大一些。
为了简单起兑，在本章的例子中，我们利用shel的多行特性直接在命令行上运行了gawk
脚本。在shell脚本中使用gawk时，应该将不同的gawk命令放到不同的行，这样会比较容
易阅读和理解，不要在shel脚本中将所有的命令都塞到同一行。还有，如果你发现在不同
的shell脚本中用到了同样的gawk脚本，记着将这段gawk脚本放到一个单独的文件中，并
用-参数来在shell脚本中引用它（参见第19章）。
22.1.2自定义变量
跟其他典型的编程语言一样，gawk允许你定义自己的变量在程序代码中使用。gawk自定义
变量名可以是任意数目的字母、数字和下划线。但不能以数字开头。重要的是，要记住gawk变
量名区分大小写。
---
## Page 490
22.1使用变量
475
1.在脚本中给变量赋值
在gawk程序中给变量赋值跟在shell脚本中赋值类似，都用赋值语句。
$gawk *
> testing=*This is a test*
)NIDG8  print testing
Thie is a test
print语句的输出是testing变量的当前值。跟shell脚本变量一样，gawk变量可以保存数值
或文本值。
$ gawk *
)NIDG8  testing=*This is a test′
> print testing
> testing=45
> print testing
Thie is a test
 print capital [*Illinois*]
Springfield
}
在引用数组变量时，会得到数据元素的值。数据元素值是数字值时也一样。
> var [1] = 34
> var [2] = 3
> tota] = var [1]+var[2]
> print total
37
}'
$
正如你在该例子中看到的，可以像使用gawk程序中的其他变量一样使用数组变量。
22.2.2遍历数组变量
关联数组变量的问题在于你可能无法知晓索引值是什么。跟使用连续数字作为索引值的数字
数组不同，关联数组的索引可以是任何东西。
如果要在gawk中遍历一个关联数组，可以用for语句的一种特殊形式。
for (var in arzay)
22
stacements
这个for语句会在每次循环时将关联数组array的下一个索引值赋给变量var，然后执行一
遍statements。重要的是记住这个变量中存储的是索引值而不是数组元素值。可以将这个变量
用作数组的索引，轻松地取出数据元素值。
)NI0G8. x4e6 $
> var[*a*] = 1
[6，]aeA  for (test in var)
print *Indexi*,test,*
- Value1*, var [test]
}
Index1 u -  Value: 4
 var[ *g*] = 2
> for (teat in vax)
>[
pxint *Index:*, test, * - Value:*, var[test]
[,6,]xes o[eg 1
> for (test in var)
pxint *Index:*,test,* - Value:*, var[test]
Index: a - Value: 1
1'
Index: g
Z:aneA -
Index: a - Value: 1
一旦从关联数组中删除了索引值，你就没法再用它来提取元素值。
22.3使用模式
gawk程序支持多种类型的匹配模式来过滤数据记录，这一点眼sed编辑器大同小异。第19章
已经介绍了两种特殊的模式在实践中的应用。BEGIN和END关键字是用来在读取数据流之前或之
后执行命令的特殊模式。类似地，你可以创建其他模式在数据流中出现匹配数据时执行一些命令。
本节将会演示如何在gawk脚本中用匹配模式来限定程序脚本作用在哪些记录上。
22.3.1正则表达式
第20章介绍了如何将正则表达式用作匹配模式。可以用基础正则表达式（BRE）或扩展正则
表达式（ERE）来选择程序脚本作用在数据流中的哪些行上。
在使用正则表达式时，正则表达式必须出现在它要控制的程序脚本的左花括号前。
$gawk BEGIN(FS=*,*)/11/ (print $1) * datal
Gatal1
正则表达式/11/匹配了数据字段中含有字符串11的记录。gawk程序会用正则表达式对记录
---
## Page 494
22.3使用模式
479
中所有的数据字段进行匹配，包括字段分隔符。
$ gawk *BEGIN(FS=*,*) /,d/ (pzint $1)* datal
data11
data21
data31
这个例子使用正则表达式匹配了用作字段分隔符的逗号。这也并不总是件好事。它可能会造
成如下问题：当试图匹配某个数据字段中的特定数据时，这些数据又出现在其他数据字段中。如
果需要用正则表达式匹配某个特定的数据实例，应该使用匹配操作符。
22.3.2匹配操作符
医配操作符（matchingoperator）允许将正则表达式限定在记录中的特定数据字段。匹配操
作符是波浪线（～）。可以指定匹配操作符、数据字段变量以及要匹配的正则表达式。
$1 ~ /^data/
$1变量代表记录中的第一个数据字段。这个表达式会过滤出第一个字段以文本data开头的
所有记录。下面是在gawk程序脚本中使用匹配操作符的例子。
$gawk *BEGIN(FS=*,*) $2 -/^data2/ (print $0)* data1]
dat.a21, data22, data23, data24 , Gata25
匹配操作符会用正则表达式/^data2/来比较第二个数据字段，该正则表达式指明字符申要
以文本data2开头。
22
这可是件强大的工具，gawk程序脚本中经常用它在数据文件中搜索特定的数据元素。
$ gawk -F1 *$1 - /rich/(print $1,$NF) * /etc/passwd
rich /bin/bash
这个例子会在第一个数据字段中查找文本rich。如果在记录中找到了这个模式，它会打印
该记录的第一个和最后一个数据字段值。
你也可以用：符号来排除正则表达式的匹配。
$1I ~ /expression/
如果记录中没有找到匹配正则表达式的文本，程序脚本就会作用到记录数据。
$ gawk -F1 *$1 I~ /rich/(print $1,sNF)* /etc/pasewd
root /bin/bash
daemon /bin/sh
bin /bin/sh
uα/uTq/ αAs
output truncated ---
在这个例子中，gawk程序脚本会打印/etc/passwd文件中与用户IDrich不匹配的用户ID和登
录shell。
---
## Page 495
480
第22章gawk进阶
22.3.3数学表达式
除了正则表达式，你也可以在匹配模式中用数学表达式。这个功能在匹配数据字段中的数字
值时非常方便。举个例子，如果你想显示所有属于root用户组（组ID为a）的系统用户，可以用
这个脚本。
$ gawk -F:*$4 == 0(pxint $1)*/etc/pasavd
root
sync
shutdown
halt
operat.ox
这段脚本会查看第四个数据字段含有值o的记录。在这个Linux系统中，有五个用户账户属于
root用户组。
可以使用任何常见的数学比较表达式。
 x--y：值x等于y。
x=y：值x大于等于y。
x>y：值x大于y
也可以对文本数据使用表达式，但必须小心。跟正则表达式不同，表达式必须完全匹配。数
据必须跟模式严格匹配。
$ gawk -F,*$1 == *data*(pxint $1)*Gata1
$ gavk -F,*$1 == *Gata11* (print $1) * data1
Gata11
第一个测试没有匹配任何记录，因为第一个数据字段的值不在任何记录中。第二个测试用值
datal1匹配了一条记录。
22.4结构化命令
gawk编程语言支持常见的结构化编程命令。本节将会介绍这些命令，并演示如何在gawk编
程环境中使用它们。
22.4.1if语句
gawk编程语言支持标准的if-then-else格式的if语句。你必须为ir语句定义一个求值的
条件，并将其用圆括号括起来。如果条件求值为TRUE，紧跟在if语句后的语句会执行。如果条
件求值为FALSE，这条语句就会被跳过。可以用这种格式：