### JavaCard Connected Platform Specification

**JavaCard Connected Platform Speci 3.0.1**
- **Source:** [Oracle](https://www.oracle.com/java/technologies/javacard/platform-specification-3-0-1.html)
- **Accessed on:** June 1, 2021

### 30th USENIX Security Symposium
- **Organized by:** USENIX Association

### Lattice-Based Attack on ECDSA Signatures

Given the equations for each ECDSA signature:
- \( A_i = s_i^{-1} \) and \( B_i = -s_i^{-1} h_i \) for \( i = 1, \ldots, N \).

We first eliminate the secret key \( d \) from the equations. This reduces the number of unknowns and results in a lattice of smaller dimension, improving the efficiency of the lattice reduction. By subtracting the equation for \( i = 1 \) from the others, we obtain \( N - 1 \) equations of the form:
\[ k_i = A_i k_1 - B_i \pmod{q} \]
where
\[ A_i = s_i r_i^{-1} \quad \text{and} \quad B_i = r_i^{-1} (h(m_1) - s_1^{-1} h(m_i)) \pmod{q} \]

Next, we express the nonce \( k_i \) as:
\[ k_i = \hat{k}_i + \sum_{j=1}^{\ell_i} u_{i,j} 2^{\lambda_{i,j}} \]
This leads to the following \( N - 1 \) congruences:
\[ u_{i,1} \equiv \ell_i \sum_{j=2}^{\ell_i} \sigma_{i,j} u_{i,j} + \ell_1 \sum_{j=1}^{\ell_1} \tau_{j,i} u_{1,j} + \gamma_i \pmod{q} \]
where
\[ \tau_{j,i} = A_i 2^{\lambda_{1,j} + \lambda_{i,1}}, \quad \sigma_{i,j} = -2^{\lambda_{i,j} - \lambda_{i,1}}, \quad \text{and} \quad \gamma_i = -2^{-\lambda_{i,1}} (\hat{k}_i - A_i \hat{k}_1 + B_i) \]

The unknown blocks \( u_{i,j} \) represent sequences of unknown bits of the nonces, with an upper bound \( U_{i,j} = 2^{\mu_{i,j}} \) for each. To optimize the attack, we shift the interval of each \( u_{i,j} \) from \([0, U_{i,j}]\) to \([-U_{i,j}/2, U_{i,j}/2]\). We set:
\[ u'_{i,j} = u_{i,j} - U_{i,j}/2 \]
and update the equations accordingly:
\[ u'_{i,1} \equiv \ell_i \sum_{j=2}^{\ell_i} \sigma_{i,j} u'_{i,j} + \ell_1 \sum_{j=1}^{\ell_1} \tau_{j,i} u'_{1,j} + \gamma'_i \pmod{q} \]
where
\[ \gamma'_i = \ell_i \sum_{j=2}^{\ell_i} \sigma_{i,j} \frac{U_{i,j}}{2} + \ell_1 \sum_{j=1}^{\ell_1} \tau_{j,i} \frac{U_{1,j}}{2} + \gamma_i - \frac{U_{i,1}}{2} \]

Finally, using the embedding technique described in [18], we construct the lattice \( L \) with the following basis:
\[ M_L = \begin{pmatrix}
q & 0 & 0 & \cdots & 0 & 0 & 0 \\
0 & q & 0 & \cdots & 0 & 0 & 0 \\
0 & 0 & q & \cdots & 0 & 0 & 0 \\
\vdots & \vdots & \vdots & \ddots & \vdots & \vdots & \vdots \\
0 & 0 & 0 & \cdots & q & 0 & 0 \\
\tau_2 & \tau_3 & \tau_4 & \cdots & \tau_t & 0 & 0 \\
\sigma_2 & \sigma_3 & \sigma_4 & \cdots & \sigma_t & 0 & 0 \\
\gamma'_2 & \gamma'_3 & \gamma'_4 & \cdots & \gamma'_t & 0 & 0 \\
\end{pmatrix} \times D \]
where \( D \) is the diagonal matrix defined by:
\[ D = \text{diag}(J_{2,1}, \ldots, J_{t,1}, J_{1,1}, \ldots, J_{1,\ell_1}, J_{2,2}, \ldots, J_{2,\ell_2}, \ldots, J_{t,2}, \ldots, J_{t,\ell_t}, J/2) \]
with \( J = 2^{\lfloor \log_2 q \rfloor} \) and \( J_{i,j} = J / U_{i,j} \in \mathbb{Z} \).

By solving the Shortest Vector Problem (SVP) in \( L \), we aim to find the short vector:
\[ v = (u'_{2,1} J_{2,1}, \ldots, u'_{2,2} J_{2,2}, \ldots, u'_{1,1} J_{1,1}, \ldots, u'_{t,1} J_{t,1}, u'_{2,\ell_2} J_{2,\ell_2}, \ldots, u'_{1,\ell_1} J_{1,\ell_1}, u'_{t,2} J_{t,2}, \ldots, u'_{t,\ell_t} J_{t,\ell_t}, J/2) \]

From \( v \), we can retrieve the secret key \( d \). The smaller the norm of \( v \), the higher the chance of finding it using a lattice reduction algorithm. Shifting the interval where the \( u_{i,j} \)'s live allows us to search for a vector \( v \) whose squared norm is bounded by \( (J/2)^2 \). Without this re-centering optimization, the squared norm would be bounded by \( \sum_{1 \leq i \leq t, 1 \leq j \leq \ell_i} J^2 \), which is four times larger.

### Experimental Results

#### Impact of Re-centering Optimization
Figure 14 shows the impact of the re-centering optimization in the Titan case (i.e., a single block of 5 known bits randomly located in the upper half part of the nonces). All experiments were conducted using the BKZ reduction algorithm with a blocksize of 25.

**Figure 14: Comparison of the success rate of the optimized and non-optimized attack on the ECDSA signature scheme with the P-256 curve**

#### Attack Success Rate with BKZ
Our initial attack targeted 80 ECDSA signatures and used the LLL algorithm for lattice reduction, achieving up to 50% success rate. However, BKZ is known to perform better than LLL. Further experiments evaluated how BKZ could improve the data complexity of our attack.

**Figure 15: Success rates of the optimized attack using BKZ, in the Titan case with a 5-bit known block.**

**Figure 16: Success rates of the optimized attack using BKZ, in the Titan case with a 4-bit known block.**

Using BKZ with a blocksize of 35, we achieved 100% success rate with fewer than 60 signatures in the Titan case. Reducing the number of known bits to 4, about 75 signatures are sufficient to reach 100% success rate. These results significantly reduce the number of ECDSA observations required for the Titan attack.

**Figures:**
- **Figure 15:** Success rates of the optimized attack using BKZ, in the Titan case with a 5-bit known block.
- **Figure 16:** Success rates of the optimized attack using BKZ, in the Titan case with a 4-bit known block.

### References
[Additional references and citations have been included in the original text.]

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.