java/technologies/javacard/platform-
JavaCard Connected Platform Speci-
https://www.oracle.com/
3.0.1.
246    30th USENIX Security Symposium
USENIX Association
where Ai = s−1
i
(i = 1, . . . ,N).
ri and Bi = −s−1
i hi for each ECDSA signature
We ﬁrst remove the secret key d from the equations. This
removes one unknown and one equation and results in a lattice
of smaller dimension (thus improving the efﬁciency of the
lattice reduction). By subtracting the equation for i = 1 to the
others we obtain N − 1 equations of the form
ki = Aik1 − Bi
1 s−1
ri and Bi = r−1
(mod q),
1 s−1
i
i
rih(m1)− s−1
1 h(mi)
where Ai = s1r−1
for i = 2, . . . ,N.
Now, writing the nonce ki as in equation 1, with its known
j=1 ui, j2λi, j we obtain the fol-
part ˆki and its unknown parts ∑(cid:96)i
lowing N − 1 congruences:
ui,1 ≡ (cid:96)i∑
j=2
σi, jui, j +
(cid:96)1∑
j=1
τ j,iu1, j + γi
(mod q),
where τ j,i = Ai2λ1, j+λi,1, σi, j = −2λi, j−λi,1
−2−λi,1(ˆki − Aiˆk1 + Bi).
and γi =
The unknown blocks ui, j represent sequences of unknown
bits of the nonces, we then know an upper bound Ui, j = 2µi, j
for each of them (where µi, j is the size of the sequence of
unknown bits). As explained in section 5.2, we can optimize
our attack by shifting the interval of each ui, j from [0,Ui, j] to
i, j = ui, j −Ui, j/2 and
[−Ui, j/2;Ui, j/2]. To this end, we set u(cid:48)
we report this change of variable to the previous equations, to
get:
i,1 ≡ (cid:96)i∑
u(cid:48)
j=2
σi, ju(cid:48)
i, j +
(cid:96)1∑
j=1
τ j,iu(cid:48)
1, j + γ(cid:48)
i
(mod q),
where γ(cid:48)
2, . . . ,N.
i, j =
(cid:96)i
∑
j=2
σi, j
Ui, j
2 +
(cid:96)1
∑
j=1
τ j,i
U1, j
2 + γi − Ui,1
2
for i =
Finally, using the embedding technique described in [18]
which is known to be more efﬁcient, we build the lattice L
given by the following base
q
0
0
τ2
σ2
γ(cid:48)
2
ML =
0
...
0
1
0
...
. . .
...
. . .
0
...
q
τt
0
...
σt
γ(cid:48)
t
0
...
...
0
...
1
× D
specification-3-0-1.html.
1-June-2021].
[online; accessed
[33] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel,
B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer,
R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cour-
napeau, M. Brucher, M. Perrot, and E. Duchesnay.
Scikit-learn: Machine learning in Python. Journal of
Machine Learning Research, 12:2825–2830, 2011.
[34] Pico Technology.
6000 Series
datasheet. https://www.picotech.com/download/
datasheets/PicoScope6000CDSeriesDataSheet.
pdf, 2019. [online; accessed 1-June-2021].
PicoScope
[35] Thomas Roche, Laurent Imbert, and Victor Lomné. Side-
channel attacks on blinded scalar multiplications revis-
ited. In Sonia Belaïd and Tim Güneysu, editors, CARDIS
2019, Prague, Czech Republic, November 11-13, 2019,
Revised Selected Papers, volume 11833 of LNCS, pages
95–108. Springer, 2019.
[36] Keegan Ryan. Return of the Hidden Number Prob-
lem.: A Widespread and Novel Key Extraction Attack
on ECDSA and DSA. IACR Transactions on Crypto-
graphic Hardware and Embedded Systems, 2019(1):146–
168, Nov. 2018.
[37] Thorlabs.
Manual 3-axes
Stage
PT3/M.
https://www.thorlabs.com/thorproduct.cfm?
partnumber=PT3/M#ad-image-0, 2019.
accessed 1-June-2021].
[online;
[38] Samuel Weiser, David Schrammel, Lukas Bodner, and
Raphael Spreitzer. Big Numbers - Big Troubles: System-
atically Analyzing Nonce Leakage in (EC)DSA Imple-
mentations. In USENIX Security 20, pages 1767–1784.
USENIX Association, August 2020.
[39] B. L. Welch. The Generalization of ‘Student’s’ Prob-
lem when Several Different Population Variances are
Involved. Biometrika, 34(1/2):28–35, 1947.
[40] Carolyn Whitnall and Elisabeth Oswald. A critical anal-
ysis of ISO 17825 (’testing methods for the mitigation of
non-invasive attack classes against cryptographic mod-
ules’). In Steven D. Galbraith and Shiho Moriai, edi-
tors, Advances in Cryptology - ASIACRYPT 2019, Kobe,
Japan, December 8-12, 2019, Proceedings, Part III, vol-
ume 11923 of LNCS, pages 256–284. Springer, 2019.
A Details of the Lattice Construction
Let us jump back to the modular equations given in Sec-
tion 5.2 that involves the nonces ki, the secret key d and the
public data hi and (si,ri):
ki = Aid − Bi
(mod q),
The coefﬁcients τi represent the column vector (τ j,i)(cid:96)1
the coefﬁcients σi represent the column vector (σi, j)(cid:96)i
j=1,
j=1 and
USENIX Association
30th USENIX Security Symposium    247
D represent the diagonal matrix deﬁned by:
D =diag(J2,1, . . . ,Jt,1,J1,1, . . . ,J1,(cid:96)1 ,
J2,2, . . . ,J2,(cid:96)2, . . . ,Jt,2, . . . ,Jt,(cid:96)t ,J/2),
where J = 2(cid:100)log2 q(cid:101) and Ji, j = J/Ui, j ∈ Z.
By solving SVP in L, we hope to ﬁnd the following short
vector:
v = (u(cid:48)
2,1J2,1, . . . ,u(cid:48)
u(cid:48)
2,2J2,2, . . . ,u(cid:48)
1,1J1,1, . . . ,u(cid:48)
t,1Jt,1,u(cid:48)
2,(cid:96)2J2,(cid:96)2, . . . ,u(cid:48)
1,(cid:96)1J1,(cid:96)1,
t,2Jt,2, . . . ,u(cid:48)
t,(cid:96)t Jt,(cid:96)t ,J/2),
and from v retrieve the secret key d. The smaller the norm
of v, the more chance we have to ﬁnd it using a lattice re-
duction algorithm. Shifting the interval where the ui, j’s live
allows to search for a vector v whose squared norm is bounded
(J/2)2. Without this re-centering optimization, the
by ∑ 1≤i≤t,
1≤ j≤(cid:96)i
squared norm of the vector v would have been bounded by
∑1≤i≤t,
1≤ j≤li
Figure 14 shows the impact of this re-centering optimiza-
tion in the Titan case (i.e. a single block of 5 known bits
randomly located in the upper half part of the nonces). All our
experiments were done using the BKZ reduction algorithm
with a blocksize 25.
J2 which is 4 times bigger.
e
t
a
r
s
s
e
c
c
u
S
100
50
0
Optimized
Non optimized
50
60
70
80
# signatures
90
100
Figure 14: Comparison of the success rate of the optimized
and non-optimized attack on the ECDSA signature scheme
with the P-256 curve
B Attack Success Rate with BKZ
Our initial attack targeted 80 ECDSA signatures and used
LLL for the lattice reduction since early simulations showed
that with 80 signatures we could expect up to 50% success
rate16. It is however well known that BKZ can perform better
16in the Titan case, meaning when the attacker knows 5 consecutive bits
located in the upper-half of each nonce.
than LLL. We then conducted further experiments to evaluate
how BKZ could improve the data complexity of our attack.
Figures 15 provides the success rates for BKZ with various
medium blocksizes, these results clearly outperform the ones
with LLL since with blocksize 35 one obtains 100% success
rate with less than 60 signatures.
In Figure 16, the success-rates relate to similar experiments
but where the number of known bits is reduced to 4 (instead
of 5). With a blocksize of 35, about 75 signatures are sufﬁ-
cient to reach 100% success-rate. Using these results in the
Titan attack would drastically reduce the number of ECDSA
observations.
e
t
a
r
s
s
e
c
c
u
S
100
50
0
Blocksize 25
Blocksize 30
Blocksize 35
50
55
60
# signatures
Figure 15: Success rates of the optimized attack using BKZ,
in the Titan case with 5-bit known block.
100
50
e
t
a
r
s
s
e
c
c
u
S
0
60
Blocksize 25
Blocksize 30
Blocksize 35
90
70
80
# signatures
Figure 16: Success rates of the optimized attack using BKZ,
in the Titan case with 4-bit known block.
248    30th USENIX Security Symposium
USENIX Association