UUNET, and the SANS Institute. Like CROCODILE, RAT
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
is implemented in the Perl programming language. The tool
is freely available from the Center for Internet Security [3]. 
RAT  checks  router  configurations  against  configurable
checking rules mirroring NSA recommendations [5]. A RAT
rule consists of a pattern, which is declared as either required
or forbidden. The rule is considered a PASS or FAIL depending
on whether or not the corresponding pattern appears in the
configuration text.
RAT’s evaluation result is a list of all checking rules, each
marked either as passed or as failed. Checking rules may be
enriched by attributes such as a rule weight reflecting their
importance,  plaintext  descriptions  and  explanations,  and
possibly a fix suggestion — that is, a sequence of IOS com-
mands for correcting the failed configuration clause. These
data are added to the evaluation report in the form of hyper-
links and support the user in understanding the findings. In
CROCODILE terms, RAT thus offers three types of displays:
(1) weighted PASS/FAIL statistics; (2) an explanation of the
checking rules; (3) a sketch of possible corrections.
Similar to CROCODILE, RAT patterns may also be spec-
ified relative to certain IOS configuration modes. For exam-
ple, they may be restricted to certain interface or line con-
texts. However, RAT does not support individual pattern han-
dlers.1 And in contrast to CROCODILE’s compound patterns,
RAT is essentially restricted to basic patterns. That is, eval-
uation criteria based on the interplay of multiple unrelated
configuration  lines  cannot  be  handled  with  RAT’s  simple
pattern-matching approach. 
RAT  thus  lacks  the  abilities  for  analyzing  the  deeper
semantics of several related, but scattered IOS configuration
clauses. This becomes clear when taking a closer look at the
test  run  discussed  in  Section  3.2  that  included  a  standard
RAT evaluation2, depicted in Figure 2:
•
In  the  example  shown,  line  19  passed  the  RAT  rule
"IOS – user password quality". In fact, in the local con-
text of line 19 the password 'f4p01' is reasonably
secure. The  reason why  this password should be
rejected  is  because it  is  identical to  the  strongly
encrypted enable secret in line 17 and only weakly
encrypted, thus compromising the strong encryption by
pointing a potential password cracker to the required
plaintext.
• Another typical weakness of the RAT approach shows
in ingress/egress checking. The RAT distribution con-
1.
Instead of a pattern (a Perl regular expression in RAT), a so-called
callout  (an  arbitrary  Perl  function)  may  be  specified  in  order  to
make  a  PASS/FAIL  decision.  However,  the  RAT  distribution
contains only rudimentary callouts, and the callout interface is not
meant  for  user  customizations.  Even  callouts  cannot  produce  any
analysis results beyond the binary PASS/FAIL decision.
2.
To apply the rule set of the RAT 2.0 distribution, we used our RAT
emulation module, see below
tains a rule "IOS – ingress filter definition" that tries to
check for RFC2827-compliant ingress filtering [6].
This rule, however, performs simple pattern matching
of an ACL template containing the required clauses in
predefined ordering and format. Consequently, RAT
will report a "false positive" (i.e., a wrong FAIL deci-
sion) if the configuration happens to contain the
required IOS clauses, but in a different order, or if it
contains different clauses that nevertheless amount to
equivalent filtering. RAT may even report a "false neg-
ative" (i.e., a wrong PASS decision) if the required
sequence of ACL rules occurs in the configuration, but
is made unreachable by a preceding, conflicting rule
such as "permit ip any any" — a worst-case example.
RAT cannot recognize this type of problems, because
RAT rules only assess the structure, not the meaning of
an IOS configuration.
These shortcomings come as no surprise when noting that
the analysis capabilities of RAT correspond exactly to those
of CROCODILE’s CompoundPatterns checker (restricted to
only basic patterns without any compounds)— a versatile,
but rather shallow module. Admittedly, CompoundPatterns
refrains  from  attributing  its  rules  and  delivering  further
explanations about the interpretation of its findings (which
other modules certainly  do);  however,  this restriction was
deliberately chosen for this particular module in order to keep
the effort for specifying user-defined evaluation criteria at a
minimum, and the rule syntax simple.
On the whole, RAT compared to CROCODILE offers rel-
atively weak, but richly documented checking rules. In fact,
CROCODILE is able to benefit from RAT’s elaborated rule
sets, in particular from the links to further reading that are
embedded  in  these  rule  specifications:  A  special  checker
module — RATemulation — takes RAT rule descriptions as
input and faithfully applies the specified evaluation criteria
to the IOS configuration under test. In addition to customary
CROCODILE views, which (among other findings) contain
the  extracted  RAT  links,  the  emulation  module  produces
reports  equivalent  to  those  of  original  RAT.  This  offers  a
migration path for former RAT users and also demonstrates
the superiority of the CROCODILE framework. Note, how-
ever, that the available RAT checking rules do not improve
CROCODILE’s  depth  of  analysis,  but  merely  complement
the "More Information" sections of CROCODILE’s views.
4.2. Equant router tool
Information  on  the  router  security  tool  developed  by
Equant  [4]  is  scarce3,  and  the  tool  —  presumably  named
conf_validation — does not appear to be available to the
3. We tried to contact the authors but received no reply.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
public.  The  Equant  tool  offers  numerous  small-scale  tests
comparable  in  scope  to  the  capabilities  of  CROCODILE’s
CompoundPatterns module, equipped with only basic pat-
terns; however, its most striking feature seems to be the anal-
ysis of the interplay of the rules of an ACL. In this respect,
the tool surpasses the single-lines analysis of RAT: Within
the rules of each ACL, the tool compares all possible pairs
of rules and checks if they are contradictory, or if one of them
is redundant. However, the complete whiteset and blackset
resulting from the combined effect of all rules is never com-
puted; accordingly, most of the security checks described in
Section 3.5 are not available.
With R denoting the set of packets matching an ACL rule
r, the tool recognizes a rule ri as redundant relative to a rule
⊆ Rj and both rules are of the same type ('permit' or
rj, if Ri
'deny', respectively). Such a rule is not directly harmful, but
should be removed for the sake of clarity. Note, however,
that  only  those  rules  are  recognized  as  redundant  whose
effect is a sub-effect of only one other rule in this ACL. That
is,  if  the  effect  of  a  rule  is  implied  only  by  the  combined
effect of two or more other rules, the redundancy is not rec-
ognized. In contrast, our approach yields the complete set of
redundant rules.
Rules ri , rj (i < j) are recognized as inconsistent if Rj
⊆ Ri
and one of them is a "deny", the other a "permit" rule. In
this case, the net effect of rj is void, probably contrary to the
intention of its author. CROCODILE recognizes this, too, and
flags such rules as dead.
4.3. Firewall Analysis Tools
Firewall analysis tools analyze ACLs and routing tables,
which is only one of the many facets of CROCODILE.
The Lumeta Firewall Analyzer (LFA) [7] simulates a fire-
wall’s filtering behavior for all possible IP packets and pro-
duces HTML output showing what packets from and to what
hosts and services this firewall configuration will or will not
let pass. In this respect, LFA’s processing of firewall rules is
very similar to CROCODILE’s processing of a router ACL.
The  LFA  output  offers  the  passed  and  dropped  packets
indexed by service and by host (or host group), separated in
inbound and outbound direction. This is conceptually rather
similar  to  the  functionality  of  CROCODILE,  though  more
conveniently presented.
LFA works by translating configuration files for firewalls
from vendor-specific format to a common intermediate con-
figuration language, and also draws on the firewall’s routing
table in order to determine what subnets are behind the fire-
wall’s  network  interfaces  (this  is  comparable  to  CROCO-
DILE’s Connectivity module). While CROCODILE explic-
itly  computes  the  blackset  and  whiteset  of  an  ACL,  LFA
seems to build its picture of the filtering behavior by succes-
sively probing individual combinations of source, destina-
tion,  and  service  (which  may  in  turn  contain  wildcards).
However, dead rules (as in CROCODILE) cannot be discov-
ered in this way. Unfortunately, a detailed comparison of the
two approaches, in particular regarding performance, cov-
erage, and generality, is not possible based on the information
currently available. The public availability of the LFA tool
is unclear — it is mentioned, but not marketed in any way
on the Lumeta web site.
Another  tool  for  ACL  analysis  is  based  on  translating
ACL  rules  to  logical  clauses  in  a  Prolog-like  language,
which are then used by an inference engine to answer ques-
tions about the filtering effect of this ACL [8]. The clauses
gained from the ACLs are enriched by general logical clauses
encoding typical routing concepts such as the accessibility
of  certain  subnets or  services. Queries  may  also  be posed
using  these  additional  concepts.  Users  may  even  program
their own logical clauses, which makes the tool extensible
in a way similar to CROCODILE.
Even if the tool seems rather immature on the whole and
there is apparently no experience with complex real-world
ACLs  yet,  the  approach  is  nevertheless  rather  interesting
conceptually. Encoding application-specific rules in a Pro-
log-like language may be more natural for certain problems
than using Perl; however, it is also less flexible, as the rules
no  longer  operate  on  the  original  router  configuration
description, but on the predefined set of logical atoms. The
performance  of  such  an  inference-based  approach  seems
critical; the authors make no statements about this, and they
have apparently tested their tool with only relatively simple
ACLs  (10–20  rules)  so  far.  The  dissection  of  overlapping
ACLs rules mentioned only in passing raises additional con-
cerns about the performance of this approach.
Another tool to interactively query the filtering effect of
an ACL is presented in [9], which again answers questions
about accepted and rejected IP packets. Redundant rules are
flagged, though not inconsistent ones. Furthermore, the dif-
ferential blackset and whiteset of two versions of an ACL
may be computed. Extending the tool by higher-level con-
cepts as is possible with [8] or CROCODILE is not supported.
The bit vector representation used for ACLs makes formu-
lating queries  and  interpreting results  rather  cumbersome;
this approach may be more appropriate for a router compiling
ACL rules to a more efficiently evaluated form than for a
human user, who thinks  rather at  the  level  of  subnets  and
services than at the level of bit vectors.
5. Conclusions and Outlook
CROCODILE is an easily extended and flexible tool sup-
porting the human expert in the security analysis of router
configurations.  It  relieves  the  user  of  cumbersome  details
and grades all its findings according to their severity while
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
crocodile, which includes an online demonstration and a
detailed manual in German and English version.
6. References
[1] S. Groß, R. Schwarz, Ein Werkzeug zur Sicherheitsüberprü-
fung von Cisco IOS Routerkonfigurationen, IESE Report Nr. 
078/01D, Fraunhofer IESE, Kaiserslautern, Germany, 
December 2001.
[2] Cisco Systems Inc., Cisco IOS 12.0 Configuration Funda-
mentals, Cisco Press, 1999.
[3] Center for Internet Security, Router Audit Tool, March 2003. 
http://www.cisecurity.org
[4] D. Valois, C. Llorens, "Identification of Security Holes in 
Router Configurations", Proceedings of the 14th Annual 
Computer Security Incident Handling Conference (FIRST 
2002),Hilton Waikoloa Village, Hawaii, June 24-28, 2002.
http://www.first.org/events/progconf/2002/d4-
04-valois-paper.pdf
[5] National Security Agency: Router Security Configuration 
Guide. February 2003.
http://www.nsa.gov/snac/cisco
[6] P. Ferguson, D. Senie, Network Ingress Filtering – Defeating 
Denial of Service Attacks which employ IP Source Address 
Spoofing, RFC 2827, The Internet Society, May 2000.
http://www.ietf.org/rfc/rfc2827.txt
[7] A. Wool, "Architecting the Lumeta Firewall Analyzer", Pro-
ceedings of the 10th USENIX Security Symposium, Washing-
ton, D.C., August 13-17, 2001
http://www.usenix.org/events/sec01/wool.html
[8] P. Eronen, J. Zitting, An expert system for analyzing firewall 
rules, Proceedings of the 6th Nordic Workshop on Secure IT 
Systems (NordSec2001), Copenhagen, Denmark, 2001. 
http://www.cs.hut.fi/~peronen/publications
[9] S. Hazelhurst, Algorithms for Analysing Firewall and Router 
Access Lists, Tech. Report TR-Wits-CS-99-5, University of 
the Witwatersrand, South Africa, July, 1999.
http://citeseer.nj.nec.com/
hazelhurst99algorithm.html
adding  many  other  useful  pieces  of  information.  The  tool
presents  a  wealth  of  information  in  various  topic-specific
views.
We have analyzed various practical configurations, orig-
inating, however, from only two external user organizations
(both with trained staff) so far. CROCODILE has found irreg-
ularities in most of these configurations — frequently even
grave errors such as references to undefined ACLs! Config-
uration  defects  thus  seem  to  be  the  norm  rather  than  the
exception, and security breaches often remain undiscovered
for long times. The fact that the checker modules existing so
far  have  uncovered  many  problems  overlooked  even  by
trained staff underlines the validity of our approach.
CROCODILE offers truly novel functionality in various
places,  particularly  regarding  the  features  building  on  the
global view of the router configuration and on the blackset
and whiteset analysis. Nevertheless, in spite of all its func-
tionality, CROCODILE cannot replace the human expert —
the mere customization of the configurable checker modules
requires context knowledge that is not available to a tool.
Interpreting all details of the evaluation results will always
require the expertise of a networking specialist. Fully auto-
mated corrections were thus never a goal of CROCODILE.
The  development  of  CROCODILE  continues,  including
the creation of new checker modules for additional evalua-
tion  areas.  Further  development  will  be  driven  by  user
demand. However, a large, but fixed inventory of checker
modules seems less important than the simple extensibility
of the CROCODILE framework enabled by the framework’s
inheritance  mechanisms.  CROCODILE’s  application  pro-
grammer interface provides substantial support for the fur-
ther extension of checking capabilities, most prominently
•
•
•
•
a  clean  "plug  in"  interface  for  new  checker  modules,
supplying each module with only the relevant pieces of
information, based on BNF pattern specifications;
an  internal  database  for  storing  findings,  cross  refer-
ences, fix suggestions, and other useful information in
structured format, with a simple yet versatile interface
for checker modules;
a  hypertext  report  generator  that  presents  the  contents
of the database in uniform style and groups related find-
ings as logical views connected via hyperlinks;
a differential display mode that automatically applies to
any (new) module — including the RAT emulation
module.
By defining suitable patterns and handlers, the CROCODILE
approach may even be extended to the security checking of
other text-based configuration descriptions — ranging from
routers by other vendors over firewalls to general network
services.
Information  about  the  current  status  of  CROCODILE  is
available  on  the  homepage  at  www.iese.fraunhofer.de/
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply.