### UUNET, SANS Institute, and RAT: A Comparative Analysis

#### Introduction
This document discusses the Router Audit Tool (RAT) developed by the Center for Internet Security and compares it with other tools such as CROCODILE and Equant's router security tool. The focus is on the capabilities, limitations, and comparative strengths of these tools in analyzing router configurations.

#### RAT Overview
RAT is implemented in the Perl programming language and is freely available from the Center for Internet Security [3]. It checks router configurations against configurable rules that mirror NSA recommendations [5]. Each rule consists of a pattern, which is either required or forbidden. The rule is marked as PASS or FAIL based on the presence or absence of the corresponding pattern in the configuration text.

**Key Features of RAT:**
- **Evaluation Results:** RAT provides a list of all checking rules, each marked as passed or failed.
- **Rule Attributes:** Rules can be enriched with attributes such as weight, descriptions, explanations, and fix suggestions (sequences of IOS commands).
- **Display Types:**
  1. Weighted PASS/FAIL statistics.
  2. Explanations of the checking rules.
  3. Sketches of possible corrections.

**Limitations:**
- **Basic Patterns:** RAT is limited to basic patterns and does not support compound patterns, making it unable to handle evaluation criteria based on the interplay of multiple unrelated configuration lines.
- **Semantic Analysis:** RAT lacks the ability to analyze the deeper semantics of related but scattered IOS configuration clauses.

**Example Analysis:**
- **Password Quality:** In one example, RAT passed a password quality check because the local context of the password was secure. However, the password should have been rejected because it was identical to a strongly encrypted enable secret, compromising the strong encryption.
- **Ingress/Egress Checking:** RAT's ingress filter definition rule performs simple pattern matching, leading to false positives and negatives if the required IOS clauses are in a different order or made unreachable by conflicting rules.

#### Comparison with CROCODILE
CROCODILE offers more advanced features compared to RAT, including:
- **Compound Patterns:** CROCODILE supports compound patterns, allowing for more complex and accurate analysis.
- **Deeper Semantic Analysis:** CROCODILE can analyze the interplay of multiple configuration lines, providing a deeper understanding of the configuration.
- **Extensibility:** CROCODILE has a more extensible framework, enabling the addition of new checker modules and supporting a wider range of security checks.

**RAT Emulation in CROCODILE:**
- CROCODILE includes a RAT emulation module that takes RAT rule descriptions and applies the specified evaluation criteria to the IOS configuration.
- This module produces reports equivalent to those of original RAT, offering a migration path for former RAT users and demonstrating the superiority of the CROCODILE framework.

#### Equant Router Tool
The Equant router tool, named conf_validation, is less well-documented and not publicly available. Its key features include:
- **Small-Scale Tests:** Similar in scope to CROCODILE’s CompoundPatterns module with only basic patterns.
- **ACL Rule Analysis:** Analyzes the interplay of ACL rules, recognizing redundant and inconsistent rules within an ACL.
- **Redundancy and Inconsistency Detection:** Identifies redundant and inconsistent rules, though it does not compute the complete whiteset and blackset resulting from the combined effect of all rules.

#### Firewall Analysis Tools
**Lumeta Firewall Analyzer (LFA):**
- **Functionality:** Simulates a firewall’s filtering behavior for all possible IP packets and produces HTML output.
- **Processing:** Translates vendor-specific configuration files to a common intermediate language and uses the routing table to determine subnets behind network interfaces.
- **Comparison with CROCODILE:** Conceptually similar to CROCODILE’s processing of router ACLs, but LFA cannot discover dead rules.

**Prolog-Based ACL Analysis:**
- **Approach:** Translates ACL rules into logical clauses in a Prolog-like language, using an inference engine to answer questions about the filtering effect.
- **Extensibility:** Users can program their own logical clauses, making the tool extensible.
- **Performance Concerns:** The performance of this approach is critical, and the authors have tested it with only relatively simple ACLs.

**Interactive ACL Query Tool:**
- **Functionality:** Allows interactive querying of the filtering effect of an ACL, flagging redundant rules.
- **Differential Analysis:** Computes the differential blackset and whiteset of two versions of an ACL.
- **Bit Vector Representation:** Uses a bit vector representation, which may be more suitable for router compilation than for human interpretation.

#### Conclusions and Outlook
CROCODILE is a flexible and easily extendable tool that supports the security analysis of router configurations. It provides a wealth of information in various topic-specific views and has uncovered many problems overlooked even by trained staff. While CROCODILE offers novel functionality, it cannot replace the human expert, as the customization of checker modules requires context knowledge and the interpretation of results needs networking expertise.

**Future Development:**
- **New Checker Modules:** Ongoing development includes the creation of new checker modules for additional evaluation areas.
- **Extensibility:** CROCODILE’s framework supports the addition of new modules through a clean "plug-in" interface, an internal database, a hypertext report generator, and a differential display mode.
- **Application Scope:** The CROCODILE approach can be extended to the security checking of other text-based configuration descriptions, including routers by other vendors, firewalls, and general network services.

For more information on the current status of CROCODILE, visit the homepage at www.iese.fraunhofer.de.

---

**References:**
[1] S. Groß, R. Schwarz, Ein Werkzeug zur Sicherheitsüberprüfung von Cisco IOS Routerkonfigurationen, IESE Report Nr. 078/01D, Fraunhofer IESE, Kaiserslautern, Germany, December 2001.
[2] Cisco Systems Inc., Cisco IOS 12.0 Configuration Fundamentals, Cisco Press, 1999.
[3] Center for Internet Security, Router Audit Tool, March 2003. http://www.cisecurity.org
[4] D. Valois, C. Llorens, "Identification of Security Holes in Router Configurations", Proceedings of the 14th Annual Computer Security Incident Handling Conference (FIRST 2002), Hilton Waikoloa Village, Hawaii, June 24-28, 2002. http://www.first.org/events/progconf/2002/d4-04-valois-paper.pdf
[5] National Security Agency: Router Security Configuration Guide. February 2003. http://www.nsa.gov/snac/cisco
[6] P. Ferguson, D. Senie, Network Ingress Filtering – Defeating Denial of Service Attacks which employ IP Source Address Spoofing, RFC 2827, The Internet Society, May 2000. http://www.ietf.org/rfc/rfc2827.txt
[7] A. Wool, "Architecting the Lumeta Firewall Analyzer", Proceedings of the 10th USENIX Security Symposium, Washington, D.C., August 13-17, 2001. http://www.usenix.org/events/sec01/wool.html
[8] P. Eronen, J. Zitting, An expert system for analyzing firewall rules, Proceedings of the 6th Nordic Workshop on Secure IT Systems (NordSec2001), Copenhagen, Denmark, 2001. http://www.cs.hut.fi/~peronen/publications
[9] S. Hazelhurst, Algorithms for Analysing Firewall and Router Access Lists, Tech. Report TR-Wits-CS-99-5, University of the Witwatersrand, South Africa, July, 1999. http://citeseer.nj.nec.com/hazelhurst99algorithm.html