+ (1 x)²xSampleRTT, +(1  x)²SampleRTT 。
b)
EstimatedRIT(∞)
=x(1-x)-SampleRTT
1
j=1
+ (1 x)-SampleRTT,
(
EstimatedRTT(x)
X
1x
(1-x)SampleRTT
9SampleRTT
9
The weight given to past samples decays exponentially.
---
## Page 60
Problem33
Let's look at what could wrong if TCP measures SampleRTT for a retransmitted
segment. Suppose the source sends packet P1, the timer for P1 expires, and the source
then sends P2, a new copy of the same packet. Further suppose the source measures
SampleRTT for P2 (the retransmitted packet). Finally suppose that shortly after
transmitting P2 an acknowledgment for P1 arrives. The source will mistakenly take this
acknowledgment as an acknowledgment for P2 and calculate an incorrect value of
SampleRTT.
Let's look at what could be wrong if TCP measures SampleRTT for a retransmitted
segment. Suppose the source sends packet P1, the timer for P1 expires, and the source
then sends P2, a new copy of the same packet. Further suppose the source measures
SampleRTT for P2 (the retransmitted packet). Finally suppose that shortly after
transmitting P2 an acknowledgment for P1 arrives. The source will mistakenly take this
acknowledgment as an acknowledgment for P2 and calculate an incorrect value of
SampleRTT.
Problem 34
At any given time , SendBase - 1 is the sequence number of the last byte that the
sender knows has been received correctly, and in order, at the receiver. The actually last
byte received (correctly and in order) at the receiver at time I may be greater if there are
acknowledgements in the pipe. Thus
SendBase-1 ≤ LastByteRcvd
Problem35
When, at time r, the sender receives an acknowledgement with value y, the sender knows
for sure that the receiver has received everything up through y-1. The actual last byte
received (correctly and in order) at the receiver at time f may be greater if y≤
SendBase or if there are other acknowledgements in the pipe. Thus
y-1≤LastByteRvcd
Problem36
Suppose packets n, n+1, and n+2 are sent, and that packet n is received and ACKed. If
packets n+1 and n+2 are reordered along the end-to-end-path (i.e., are received in the
order n+2, n+1) then the receipt of packet n+2 will generate a duplicate ack for n and
would trigger a retransmission under a policy of waiting only for second duplicate ACK
for retransmission. By waiting for a triple duplicate ACK, it must be the case that wo
---
## Page 61
packets after packet n are correctly received, while n+1 was not received. The designers
of the triple duplicate ACK scheme probably felt that waiting for two packets (rather than
1) was the right tradeoff between triggering a quick retransmission when needed, but not
retransmitting prematurely in the face of packet reordering
Problem37
a)GoBackN:
A sends 9 segments in total. They are initially sent segments 1, 2, 3, 4, 5 and later re-
sent segments 2, 3, 4, and 5.
B sends 8 ACKs. They are 4 ACKS with sequence number 1, and 4 ACKS with
sequence numbers 2, 3, 4, and 5.
Selective Repeat:
A sends 6 segments in total. They are initially sent segments 1, 2, 3, 4, 5 and later re-
sent segments 2.
B sends 5 ACKs. They are 4 ACKS with sequence number 1, 3, 4, 5. And there is one
ACK with sequence number 2.
TCP:
A sends 6 segments in total. They are initially sent segments 1, 2, 3, 4, 5 and later re-
sent segments 2.
B sends 5 ACKs. They are 4 ACKS with sequence number 2. There is one ACK with
sequence numbers 6. Note that TCP always send an ACK with expected sequence
number.
b)TCP. This is because TCP uses fast retransmit without waiting until time out.
Problem38
Yes, the sending rate is always roughly cwnd/RTT.
Problem39
If the arrival rate increases beyond R/2 in Figure 3.46(b), then the total arrival rate to the
queue exceeds the queue's capacity, resulting in increasing loss as the arrival rate
increases. When the arrival rate equals R/2, 1 out of every three packets that leaves the
queue is a retransmission. With increased loss, even a larger fraction of the packets
leaving the queue will be retransmissions. Given that the maximum departure rate from
the queue for one of the sessions is R/2, and given that a third or more will be
transmissions as the arrival rate increases, the throughput of successfully deliver data can
not increase beyond ou. Following similar reasoning, if half of the packets leaving the
queue are retransmissions, and the maximum rate of output packets per session is R/2,
then the maximum value of out is (R/2)/2 or R/4.
---
## Page 62
Problem40
a)TCP slowstart is operating in the intervals [1,6] and [23,26]
b)TCP congestion avoidance is operating in the intervals [6,16] and [17,22]
c)After the 16h transmission round, packet loss is recognized by a triple duplicate
ACK. If there was a timeout, the congestion window size would have dropped to 1.
d)After the 22nd transmission round, segment loss is detected due to timeout, and hence
the congestion window size is set to 1.
e)The threshold is initially 32, since it is at this window size that slow start stops and
congestion avoidance begins.
f)The threshold is set to half the value of the congestion window when packet loss is
detected. When loss is detected during transmission round 16, the congestion
windows size is 42. Hence the threshold is 21 during the 18’ transmission round.
g)The threshold is set to half the value of the congestion window when packet loss is
detected.When loss is detected during transmission round 22, the congestion
windows size is 29. Hence the threshold is 14 (taking lower floor of 14.5) during the
24"h transmission round.
transmission round; packets 4-7 are sent in the 3rd transmission round; packets 8-15
are sent in the 4"h transmission round; packets 16-31 are sent in the 5h transmission
round; packets 32-63 are sent in the 6" transmission round; packets 64  96 are sent
in the 7ih transmission round. Thus packet 70 is sent in the 7"f transmission round.
i)The threshold will be set to half the current value of the congestion window (8) when
the loss occurred and congestion window will be set to the new threshold value + 3
MSS . Thus the new values of the threshold and window will be 4 and 7 respectively.
j)threshold is 21, and congestion window size is 1.
k) round 17, 1 packet; round 18, 2 packets; round 19, 4 packets; round 20, 8 packets;
round 21, 16 packets; round 22, 21 packets. So, the total number is 52.
Problem41
Refer to Figure 5. In Figure 5(a), the ratio of the linear decrease on loss between
connection 1 and connection 2 is the same - as ratio of the linear increases: unity. In this
case, the throughputs never move off of the AB line segment. In Figure 5(b), the ratio of
the linear decrease on loss between connection 1 and connection 2 is 2:1.  That is,
whenever there is a loss, connection 1 decreases its window by twice the amount of
connection 2. We see that eventually, after enough losses, and subsequent increases, that
connection 1's throughput will go to 0, and the full link bandwidth will be allocated to
connection 2
---
## Page 63
equal
Full
equal
Full
bandwidth
R
bandwidth
bandwldth
bandwidth
share
utilization
share
utilization
Nine
ine
ar
N
uo
Connection 1 throughput R
Connection 1 throughput R
(a) linear increase, with equal
(b)linear increase,connection 1
linear decrease
decrease is twice that of connection 2
Figure 5: Lack of TCP convergence with linear increase, linear decrease
Problem 42
If TCP were a stop-and-wait protocol, then the doubling of the time out interval would
suffice as a congestion control mechanism. However, TCP uses pipelining (and is
therefore not a stop-and-wait protocol), which allows the sender to have multiple
outstanding unacknowledged segments. The doubling of the timeout interval does not
prevent a TCP sender from sending a large number of first-time-transmitted packets into
the network, even when the end-to-end path is highly congested. Therefore a congestion-
control mechanism is needed to stem the flow of “data received from the application
above” when there are signs of network congestion.
Problem 43
In this problem, there is no danger in overflowing the receiver since the receiver’s receive
buffer can hold the entire file. Also, because there is no loss and acknowledgements are
returned before timers expire, TCP congestion control does not throttle the sender.
However, the process in host A will not continuously pass data to the socket because the
send buffer will quickly fill up. Once the send buffer becomes full, the process will pass
data at an average rate or R =W/2.
Let Tp denote the one-way propagation delay between the sender and the receiver.
When the window size reaches the minimum W/2 and the buffer is empty, we need to
make sure the link is also busy sending data. Thus, we must have W/2/(2Tp)>=C, thus,
W/2>=C*2Tp.
Thus, S>=C*2Tp.
Problem 48
a)Let W denote the max window size. Then, W*MSS/RTT = 10Gbps, as packets will
be dropped if maximum sending rate reaches link capacity. Thus, we have
W*1500*8/0.15=10*10^9, then W= 125000 segments.
b)As congestion window size varies from W/2 to W, then the average window size is
0.75W=93750 segments. Average throughput is 93750*1500*8/0.1=7.5Gbps.
c)93750/2 *0.15 /60= 117 minutes. In order to speed up the window increase process,
we can increase the window size by a much larger value, instead of increasing
window size only by one in each RTT. Some protocols are proposed to solve this
problem, such as ScalableTCP or HighSpeed TCP.
Problem49
so we know that,
RTT -L
L= (1.22*MSS/ (B*R77) )2
Since between two consecutive packet losses, there are 1/L packets sent by the TCP
sender, thus, T=(1/L)*MSS/B. Thus, we find that TB*RT7²/(1.22²*MSS), that is, T is a
function of B
---
## Page 66
Problem50
a)The key difference between C1 and C2 is that C1's RTT is only half of that of C2.
Thus C1 adjusts its window size after 50 msec, but C2 adjusts its window size after
100 msec. Assume that whenever a loss event happens, C1 receives it after 50msec
and C2 receives it after 100msec. We further have the following simplified model of
TCP. After each RTT, a connection determines if it should increase window size or
not. For C1, we compute the average total sending rate in the link in the previous 50
msec. If that rate exceeds the link capacity, then we assume that C1 detects loss and
reduces its window size. But for C2, we compute the average total sending rate in the
link in the previous 100msec. If that rate exceeds the link capacity, then we assume
that C2 detects loss and reduces its window size. Note that it is possible that the
average sending rate in last 50msec is higher than the link capacity, but the average
sending rate in last 100msec is smaller than or equal to the link capacity, then in this
case, we assume that C1 will experience loss event but C2 will not.
The following table describes the evolution of window sizes and sending rates based
on the above assumptions.
C1
C2
Time
Window Size
Average data sending
Window
Average data sending
(msec)
(num.
of
rate
(segments
per
Size(num. of
rate
(segments
per
segments sent
second,
segments
second, =Window/0.1)
in
next
=Window/0.05)
sent in next
50msec)
100msec)
0
10
200 (in [0-50]msec]
10
100 (in [0-50]msec)
50
5
100 (in [50-100]msec]
100 (in [50-100]msec)
(decreases
window
size
as
the
avg.
total sending
rate
to
the
link
in
last
50msec
is
300=
200+100)
100
2
5
50
(decreases
(decreases
window size
window size
as the
avg.
as the avg.
total sending
total sending
rate
to
the
rate to the
link in last
link in last
50msec
is
100msec
200=
250=
(001+001
(200+100)/2
+
---
## Page 67
(100+100/2)
150
20
50
(decreases
window size
as the avg.
total sending
rate
to
the
link in last
50msec
is
90 (40+50)
200
20
20
(no
further
(decreases
decrease,
as
window size
window
size
as the avg.
is already 1)
total sending
rate to the
link in last
100msee
80=
(40+20)/2
(50+50)/2)
250
20
20