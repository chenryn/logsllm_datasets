### Markov Chain Generation and Solution

When generating and solving an underlying Markov chain, only the tangible states are of interest, and the vanishing states can be eliminated [3, 4, 12]. Similar to traditional reachability set generation algorithms, vanishing states can be eliminated either during the generation process (often referred to as "on-the-fly") or after the entire reachability set has been generated. This means we can either construct the set \( T \) directly or construct the entire reachability set \( S \), partition it into \( T \) and \( V \), and retain only \( T \).

#### 5.1. Elimination During Generation

Eliminating vanishing states during generation involves maintaining only the set \( T \) and ensuring that only the tangible reachable states are added to \( T \). This is achieved by using a modified next-state function \( N' \), which, given a tangible state, returns the set of tangible states that can be reached from the given state when a single timed event occurs, possibly via a sequence of vanishing states. If a tangible state reaches a vanishing state via a timed event, the sequences of vanishing states are collapsed until another tangible state is reached. If the initial state is tangible, generating the reachability set using \( N' \) will produce exactly the set \( T \). A vanishing initial state can be handled by determining all the tangible states that can be reached from the initial state via immediate events only, and using those as the initial states.

If the next-state function is represented as a matrix \( N \), we can classify the rows and columns as either tangible or vanishing, resulting in the block structure:
\[
N = \begin{pmatrix}
N_{TT} & N_{TV} \\
N_{VT} & N_{VV}
\end{pmatrix}
\]
where \( N_{TT} \) describes transitions from tangible states to tangible states, \( N_{TV} \) describes transitions from tangible states to vanishing states, and so on. The matrix representation \( N' \) is given by:
\[
N' = N_{TT} + N_{TV} \cdot N_{VV}^* \cdot N_{VT}
\]
where \( * \) denotes the transitive and reflexive closure. To get from a tangible state to another tangible state via a single timed event, it is possible directly, by a transition from a tangible state to a tangible state, or via vanishing states, by a transition from a tangible state to a vanishing state, followed by zero or more transitions from a vanishing state to another vanishing state, and finally a transition from a vanishing state to a tangible state.

To construct the matrix diagram \( N' \), we use the above equation. Given the next-state function for each event, modified to account for priorities, we can compute \( N_T \) by summing the next-state functions for the timed events, and \( N_V \) by summing the next-state functions for the immediate events, using BinaryAdd. The potential tangible states can be found by computing \( P_T = \text{EmptyRows}(N_V) \), and the potential vanishing states can be found by computing \( P_V = \text{EmptyRows}(P_T) \). The tangible (vanishing) columns of a matrix can be selected by multiplying the matrix by \( P_T \) (\( P_V \)). For instance, we compute \( N_{TT} = \text{BinaryMult}(N_T, P_T) \) and \( N_{TV} = \text{BinaryMult}(N_T, P_V) \).

To compute the transitive and reflexive closure of \( N_{VV} \), we compute \( N_{VV}^* = (I + N_{VV})^\infty \) by iterative squaring: we initialize \( N_{VV}^* \) to \( I + N_{VV} \), and repeatedly compute \( N_{VV}^* \leftarrow (N_{VV}^*)^2 \) using BinaryMult until convergence is achieved.

#### 5.2. Elimination After Generation

Eliminating vanishing states after the reachability set has been generated is relatively straightforward. The next-state functions are constructed as described in Section 4, with immediate events having priority over timed events, and are summed to obtain the overall next-state function \( N \). Using the saturation algorithm, we generate the set of reachable states \( S = T \cup V \). The set of tangible, reachable states \( T \) can be determined using a simple query, as described in [27]. First, we determine the set of potential states that are tangible by identifying the states that do not enable any immediate events. This is done by computing \( P_T = \text{EmptyRows}(N_V) \). The non-empty rows of \( P_T \) correspond to the potential tangible states. We then compute the intersection of the reachability set with the set of potential tangible states, which gives us the set of tangible, reachable states.

### Experimental Results

Prototypes of both "elimination after generation" and "elimination during generation" are implemented in the SMART tool [16]. All results are obtained from 933 MHz Pentium III workstations with 512 MB of RAM, running Linux. No reported results made use of virtual memory.

We examine several models taken from the literature, each parameterized by an integer \( N \). The dining philosopher model, taken from [27, 30], is composed of \( N \) subnets, one for each philosopher. Our model differs from the models in [27, 30] by using immediate transitions instead of timed transitions for the action of picking up a fork. The dining philosophers net is broken into subnets so that each subnet consists of two adjacent philosophers.

We also study a kanban network and a flexible manufacturing system (FMS), taken from [17] and [20]. These models are fixed in size but have \( N \) tokens initially in certain places, corresponding to parts or jobs that circulate in the system. We use the "immediate" version of the kanban model, which has immediate synchronizing transitions. The FMS model is modified from its original presentation [20] so that all arc cardinalities are one. Finally, we consider a multiserver polling system, described in [2], using the 1×Q server utilization policy. The system consists of multiple queues, and servers that move from queue to queue. The Polling model is composed of a subnet for each queue, and contains multiple tokens corresponding to the numbers of jobs.

The experimental results are summarized in the following table:

| Model        | Phils 16   | Phils 30   | Phils 60   | Phils 90   | Kanban 8   | Kanban 30  | Kanban 40  | Kanban 50  | FMS 8      | FMS 20     | FMS 40     | FMS 80     | Poll 5     | Poll 10    | Poll 15    | Poll 20    |
|--------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|
| \( |T| \)     | 4.87 × 10⁶ | 3.46 × 10¹² | 1.20 × 10²⁵ | 4.15 × 10³⁷ | 4.23 × 10⁷ | 2.36 × 10¹² | 2.86 × 10¹³ | 2.01 × 10¹⁴ | 4.59 × 10⁶ | 8.83 × 10⁹ | 4.97 × 10¹² | 3.71 × 10¹⁵ | 5.91 × 10⁶ | 9.34 × 10¹⁶ | 2.28 × 10²⁸ | 3.20 × 10⁴⁰ |
| CPU (sec)    | 0.2        | 1.2        | 9.5        | —          | 0.3        | 22,275     | 96         | —          | 1,758      | 2          | 356        | 63,036     | 0.1        | 9.4        | 15,284     | 297        |
| Memory (Kb)  | 174        | 631        | 2,508      | —          | 188        | 96         | 1,784      | 15,284     | 356        | 63,036     | 62         | 297        | 1,051      | 16,637     | 166,520    | —          |

For generating \( T \):

| Model        | Phils 16   | Phils 30   | Phils 60   | Phils 90   | Kanban 8   | Kanban 30  | Kanban 40  | Kanban 50  | FMS 8      | FMS 20     | FMS 40     | FMS 80     | Poll 5     | Poll 10    | Poll 15    | Poll 20    |
|--------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|------------|
| CPU (sec)    | 0.8        | 19         | 389        | —          | 1.1        | 2,157      | —          | —          | 0.1        | 1.5        | —          | —          | 0.2        | 4.6        | 36         | —          |
| Memory (Kb)  | 10         | 69         | 204        | 0.5        | 67         | 280        | 979        | 0.2        | 2.5        | 29         | 447        | 0.4        | 13         | 113        | 540        | —          |

These results demonstrate the effectiveness of both elimination methods in different scenarios.