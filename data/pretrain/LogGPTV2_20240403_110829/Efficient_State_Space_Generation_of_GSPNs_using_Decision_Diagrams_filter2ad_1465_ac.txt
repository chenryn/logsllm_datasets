especially generation and solution of an underlying Markov
chain, only the tangible states are of interest, and the vanish-
ing states can be eliminated [3, 4, 12]. As with traditional
reachability set generation algorithms, elimination of van-
ishing states can be done either during generation (some-
times called “on-the-ﬂy”) or after generation. That is, we
can either construct the set T directly, or we can construct
the entire reachability set S, partition it into T and V, and
keep only T .
5.1. Elimination during generation
Elimination of vanishing states during generation must
maintain only the set T and ensure that only the tangible
reachable states are added to the set T . This is done by us-
ing a modiﬁed next-state function N (cid:7)
that, given a tangible
state, returns the set of tangible states that can be reached
from the given state when a single timed event occurs, pos-
sibly via a sequence of vanishing states. If a tangible state
reaches a vanishing state via a timed event, then the se-
quences of vanishing states are collapsed until another tan-
gible state is reached. If the initial state is tangible, then
generating the reachability set using N (cid:7)
will produce ex-
actly the set T . A vanishing initial state can be handled by
determining all the tangible states that can be reached from
the initial state via immediate events only, and using those
as the initial states.
If the next-state function is represented as a matrix N,
then we can classify the rows and columns as either tangible
or vanishing, and obtain the block structure
(cid:3)
(cid:2)
(cid:3)
(cid:2)
=
N =
NT
NV
NT T NT V
NVT NVV
where NT T describes transitions from tangible states to
tangible states, NT V describes transitions from tangible
states to vanishing states, and so on. The matrix representa-
tion N(cid:7)
is exactly
(cid:7) = NT T + NT V · N
VV · NVT
∗
N
(3)
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
Na
0 1 2
Ea
0 1 2
Nb
0 1 2
Ea · Nb
0 1 2
Eb
0 1 2
Nc
Eb · Nc
0 1 2
0 1 2
0 1 2
0 1 2
0 1 2
0 1 2
0 1 2
0 1
1
0 1
0 1
1
1
1
Level 3
Level 2
Level 1
0 1
0 1
Level 0
1
1
1
Figure 8. Example next-state construction for events a, b, c
where “*” denotes transitive and reﬂexive closure. Thus,
to get from a tangible state to another tangible state via a
single timed event is possible directly, by a transition from
a tangible state to a tangible state, or via vanishing states,
by a transition from a tangible state to a vanishing state,
followed by zero or more transitions from a vanishing state
to another vanishing state, followed by a transition from a
vanishing state to a tangible state.
To construct the matrix diagram N(cid:7)
, we use Equation 3.
Given the next-state function for each event, modiﬁed to
account for priorities (as described earlier), we can com-
pute NT by summing the next-state functions for the timed
events, and NV by summing the next-state functions for the
immediate events, using BinaryAdd. The potential tangible
states can be found by computing PT = EmptyRows(NV),
and the potential vanishing states can be found by com-
puting PV = EmptyRows(PT ). The tangible (vanishing)
columns of a matrix can be selected by multiplying the
matrix by PT (PV). For instance, we compute NT T =
BinaryMult(NT , PT ) and NT V = BinaryMult(NT , PV).
To compute the transitive and reﬂexive closure of NVV,
we compute N∗
VV = (I + NVV)∞
by iterative squaring:
we initialize N∗
VV to I + NVV, and repeatedly compute
VV ← (N∗
N∗
VV)2 using BinaryMult until convergence is
achieved.
5.2. Elimination after generation
Elimination of the vanishing states after the reachability
set has been generated is fairly straightforward. The next-
state functions are constructed as described in Section 4,
with the immediate events having priority over the timed
events, and are summed to obtain the overall next-state
function N . Using the saturation algorithm, we generate
the set of reachable states S = T ∪ V. The set of tangible,
reachable states T can be determined using a simple query,
as described in [27]. First, we determine the set of poten-
tial states that are tangible, by determining the states that
do not enable any immediate events. This is done by com-
puting PT = EmptyRows(NV), as described earlier. The
non-empty rows of PT correspond to the potential tangible
states. We then compute the intersection of the reachability
set with the set of potential tangible states, which gives us
the set of tangible, reachable states.
6. Experimental results
Prototypes of both “elimination after generation” and
“elimination during generation” are implemented in the
SMART tool [16]. All results are obtained from 933 MHz
Pentium III workstations with 512Mb of RAM, running
Linux. No reported results made use of virtual memory.
We examine several models taken from the literature,
each parameterized by an integer N . The dining philoso-
pher model, taken from [27, 30], is composed of N sub-
nets, one for each philosopher. Our model differs from
the models in [27, 30]: we use immediate transitions in-
stead of timed transitions for the action of picking up a
fork. The dining philosophers net is broken into subnets
so that each subnet consists of two adjacent philosophers.
We also study a kanban network and a ﬂexible manufactur-
ing system (FMS), taken from [17] and [20]. These mod-
els are ﬁxed in size but have N tokens initially in certain
places, corresponding to parts or jobs that circulate in the
system. We use the “immediate” version of the kanban
model, which has immediate synchronizing transitions. The
FMS model is modiﬁed from its original presentation [20]
so that all arc cardinalities are one. Finally, we consider a
multiserver polling system, described in [2], using the 1×Q
server utilization policy. The system consists of multiple
queues, and servers that move from queue to queue. The
Polling model is composed of a subnet for each queue, and
contains multiple tokens corresponding to the numbers of
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
Elimination during generation
Generating N (cid:7)
Elimination after generation
Generating N
Generating T
Model
Phils 16
Phils 30
Phils 60
Phils 90
Kanban 8
Kanban 30
Kanban 40
Kanban 50
FMS 8
FMS 20
FMS 40
FMS 80
Poll 5
Poll 10
Poll 15
Poll 20
|T |
4.87 × 106
3.46 × 1012
1.20 × 1025
4.15 × 1037
4.23 × 107
2.36 × 1012
2.86 × 1013
2.01 × 1014
4.59 × 106
8.83 × 109
4.97 × 1012
3.71 × 1015
5.91 × 106
9.34 × 1016
2.28 × 1028
3.20 × 1040
CPU Memory (Kb)
Peak
(sec)
0.2
174
1.2
631
2,508
9.5
—
—
0.3
188
22,275
96
—
—
—
—
1,758
2
356
63,036
—
—
—
—
0.1
62
1,784
9.4
15,284
297
—
—
Final
74
150
314
—
42
147
—
—
23
51
—
—
18
68
147
—
Peak (Kb)
1,051
16,637
166,520
Generating T
CPU
(sec)
0.8
19
389
—
1.1
2,157
—
—
0.1
1.5
—
—
0.2
4.6
36
—
Memory CPU Memory (Kb) CPU
(sec)
1.3
10
69
204
0.5
67
280
979
0.2
2.5
29
447
0.4
13
113
540
(sec)
0.04
0.08
0.21
— 0.39
878
0.00
0.02
193,920
— 0.03
— 0.04
0.01
153
1,376
0.01
— 0.03
— 0.05
0.01
220
4,677
0.03
0.07
29,288
— 0.14
Final
43