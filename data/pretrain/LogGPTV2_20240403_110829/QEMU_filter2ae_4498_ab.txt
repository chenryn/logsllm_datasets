**lspci 命令**
如果 QEMU 直接启动了一个系统，那么就可以优先考虑使用 lspci 命令列出系统中所有 PCI 总线和设备的详细信息。
    # lspci
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 00ff: dead:beef
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 0200: 8086:100e
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
命令开头的 xx:yy.z 格式对应的是 bus（总线）、device（设备）、function（功能），之后的内容是
Class、Vendor、Device。
有了 bus、device、function 这三个信息我们就能够通过 **/sys/devices/pci0000:00/0000:[tag]** 其中的
tag 格式就是 lspci 中第一列所看到的”bus:device:function”。
**info pci 命令**
这个命令依赖于 QEMU 中的 monitor
首先需要修改 launch.sh，添加 monitor 选项（-monitor telnet:127.0.0.1:4444,server,nowait）
添加后在 QEMU 启动时就会开启 4444 端口为 monitor，我们可以使用 nc 或者 telnet 连接 4444 端口对 QEMU
进行管理操作。
连接后输入 info pci 就可以查看到所有 PCI
    wjh@ubuntu:~$ nc 127.0.0.1 4444
    QEMU 6.0.93 monitor - type 'help' for more information
    (qemu) info pci
    info pci
      Bus  0, device   0, function 0:
        Host bridge: PCI device 8086:1237
          PCI subsystem 1af4:1100
          id ""
      Bus  0, device   1, function 0:
        ISA bridge: PCI device 8086:7000
          PCI subsystem 1af4:1100
          id ""
      Bus  0, device   1, function 1:
        IDE controller: PCI device 8086:7010
          PCI subsystem 1af4:1100
          BAR4: I/O at 0xffffffffffffffff [0x000e].
          id ""
      Bus  0, device   1, function 3:
        Bridge: PCI device 8086:7113
          PCI subsystem 1af4:1100
          IRQ 0, pin A
          id ""
      Bus  0, device   2, function 0:
        Class 0255: PCI device 2021:0815
          PCI subsystem 1af4:1100
          IRQ 0, pin A
          BAR0: 32 bit memory at 0xffffffffffffffff [0x000ffffe].
          id ""
如果觉得信息不够完善，还可以用 info qtree 来输出树形结构的完整信息。
    (qemu) info qtree
    info qtree
    bus: main-system-bus
      type System
      dev: hpet, id ""
        gpio-in "" 2
        gpio-out "" 1
        gpio-out "sysbus-irq" 32
        timers = 3 (0x3)
        msi = false
        hpet-intcap = 4 (0x4)
        hpet-offset-saved = true
        mmio 00000000fed00000/0000000000000400
      dev: ioapic, id ""
        gpio-in "" 24
        version = 32 (0x20)
        mmio 00000000fec00000/0000000000001000
      dev: i440FX-pcihost, id ""
        pci-hole64-size = 2147483648 (2 GiB)
        short_root_bus = 0 (0x0)
        x-pci-hole64-fix = true
        x-config-reg-migration-enabled = true
        bypass-iommu = false
        bus: pci.0
          type PCI
          dev: ctf, id ""
            addr = 02.0
            romfile = ""
            romsize = 4294967295 (0xffffffff)
            rombar = 1 (0x1)
            multifunction = false
            x-pcie-lnksta-dllla = true
            x-pcie-extcap-init = true
            failover_pair_id = ""
            acpi-index = 0 (0x0)
            class Class 00ff, addr 00:02.0, pci id 2021:0815 (sub 1af4:1100)
            bar 0: mem at 0xffffffffffffffff [0xffffe]
          ...
          dev: i440FX, id ""
            addr = 00.0
            romfile = ""
            romsize = 4294967295 (0xffffffff)
            rombar = 1 (0x1)
            multifunction = false
            x-pcie-lnksta-dllla = true
            x-pcie-extcap-init = true
            failover_pair_id = ""
            acpi-index = 0 (0x0)
            class Host bridge, addr 00:00.0, pci id 8086:1237 (sub 1af4:1100)
      dev: fw_cfg_io, id ""
        dma_enabled = true
        x-file-slots = 32 (0x20)
        acpi-mr-restore = true
      dev: kvmvapic, id ""
**1.3.5 QEMU 程序中的 PCI 设备定位**
如果我们想要查到某个 QEMU 程序中 PCI 设备所对应的路径，那么可以通过对照 Class、Vendor、Device 的信息来确定。
例如下图中我搜索到 QEMU 中的 FastCP 设备
找到此设备的初始化函数（FastCP_class_init），并且设置对应变量的类型为 **PCIDeviceClass ***
根据其中的 class_id 赋值就可以得知，对应的 Class 应该是 00ff，根据对 vendor_id 赋值可知，对应的 Vendor ID 是
dead 、 Device ID 是 beef（这里由于程序的优化，把结构中两个连续的二字节的变量优化成一次赋值）
对照着 lspci 的结果，我们就可以得知 FastCP 对应的 PCI 设备条目是
    00:04.0 Class 00ff: dead:beef
得知其条目后我们可以访问该目录（/sys/devices/pci0000:00/0000:00:04.0/）中对应的文件资源来得到我们需要的数据
  * **resource 文件** ：此文件包含其相应空间的数据，resource0 对应 MMIO 空间，resource1 对应 PMIO 空间，这个文件可以便于我们在用户空间编程访问，在 **1.3.6 QEMU 中访问 PCI 设备的 I/O 空间** 中还会提及。
  * **config 文件** ：此文件包含着该设备的配置文件信息，结合之前的配置空间格式可以快速的看到开头的 dead 和 beef 分别对应着 vendor 和 device，这和之前用 lspci 看到的内容一致。 
        # hexdump  /sys/devices/pci0000\:00/0000\:00\:04.0/config
    0000000 dead beef 0103 0010 0001 00ff 0000 0000
    0000010 0000 fea0 0000 0000 0000 0000 0000 0000
    0000020 0000 0000 0000 0000 0000 0000 1af4 1100
    0000030 0000 0000 0040 0000 0000 0000 010b 0000
    0000040 0005 0080 0000 0000 0000 0000 0000 0000
    0000050 0000 0000 0000 0000 0000 0000 0000 0000
**1.3.6 QEMU 中访问 PCI 设备的 MMIO 空间**
**在用户态访问 mmio 空间**
通过映射 resource0 文件来实现，函数中的参数类型选择 uint32_t 还是 uint64_t 可以根据设备代码中限制的要求来确定，示例代码如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include
    unsigned char* mmio_mem;
    void die(const char* msg)
    {
        perror(msg);
        exit(-1);
    }
    void mmio_write(uint32_t addr, uint32_t value)
    {
        *((uint32_t*)(mmio_mem + addr)) = value;
    }
    uint32_t mmio_read(uint32_t addr)
    {
        return *((uint32_t*)(mmio_mem + addr));
    }
    int main(int argc, char *argv[])
    {
        // Open and map I/O memory for the strng device
        int mmio_fd = open("/sys/devices/pci0000:00/0000:00:04.0/resource0", O_RDWR | O_SYNC);
        if (mmio_fd == -1)
            die("mmio_fd open failed");
        mmio_mem = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, 0);
        if (mmio_mem == MAP_FAILED)
            die("mmap mmio_mem failed");
        printf("mmio_mem @ %p\n", mmio_mem);
        mmio_read(0x128);
        mmio_write(0x128, 1337);
    }
**在内核态中访问 mmio 空间**
示例代码如下：
    #include 
    #include 
    long addr=ioremap(ioaddr,iomemsize);
    readb(addr);
    readw(addr);
    readl(addr);
    readq(addr);//qwords=8 btyes
    writeb(val,addr);
    writew(val,addr);
    writel(val,addr);
    writeq(val,addr);
    iounmap(addr);
**1.3.7 QEMU 中访问 PCI 设备的 PMIO 空间**
根据上文所说，直接通过 in 和 out 指令就可以访问 I/O memory（outb/inb, outw/inw, outl/inl）
但是使用这些函数的前提是要让程序有访问端口的权限：
  * 在 0x000-0x3ff 之间的端口，可以使用 ioperm(from, num, turn_on)
  * 对于 0x3ff 以上的端口，可以使用 iopl(3)，使程序可以访问所有端口
示例代码：
    #include 
    uint32_t pmio_base = 0xc050;
    uint32_t pmio_write(uint32_t addr, uint32_t value)
    {
        outl(value,addr);
    }
    uint32_t pmio_read(uint32_t addr)
    {
        return (uint32_t)inl(addr);
    }
    int main(int argc, char *argv[])
    {
        // Open and map I/O memory for the strng device
        if (iopl(3) !=0 )
            die("I/O permission is not enough");