### Reference Object in Memory
For the procedure name, the compiler concatenates the text "new" with the value held by the `ident` parameter. This is a straightforward method by which templates allow you to construct identifiers.

### Creating a Configuration DSL
To verify that the constructor procedure is generated, compile the code again and observe the output:
```nim
echo treeRepr(typeName)
echo treeRepr(fields)
echo treeRepr(result)
echo repr(result)
```

### Generating the Load Procedure
The final step is to generate the load procedure. This procedure will read the configuration file, parse it, and populate an instance of the configuration type with its contents.

For the config definition provided in the previous sections, which includes an `address` string field and a `port` integer field, the load procedure should be defined as follows:
```nim
proc load*(cfg: MyAppConfig, filename: string) =
  var obj = parseFile(filename)
  cfg.address = obj["address"].getStr
  cfg.port = obj["port"].getNum.int
```
In this example, the underlying configuration format is JSON. The load procedure first parses the JSON file and then accesses the `address` and `port` fields in the parsed JSON object, assigning them to the corresponding fields in the configuration instance. The `address` field is a string, so the `getStr` method is used to retrieve its value. The `port` field is an integer, so the `getNum` method is used, followed by a type conversion to `int`.

To generate these statements, you need information about the config fields, including their names and types. The code already handles this information using `IdentDefs`. You can reuse the `IdentDefs` that have been created to generate the load procedure. Let's review the `IdentDefs` for the `MyAppConfig` definition:
```nim
IdentDefs
  Ident "address"
  Ident "string"
  Empty
IdentDefs
  Ident "port"
  Ident "int"
  Empty
```

### Steps to Generate the Load Procedure
1. **Define the `createLoadProc` Procedure:**
   Add the following procedure just above the `config` macro in your `configurator.nim` file:
   ```nim
   proc createLoadProc(typeName: NimIdent, identDefs: seq[NimNode]): NimNode =
     var cfgIdent = newIdentNode("cfg")
     var filenameIdent = newIdentNode("filename")
     var objIdent = newIdentNode("obj")

     var body = newStmtList()
     body.add quote do:
       var `objIdent` = parseFile(`filenameIdent`)

     for identDef in identDefs:
       let fieldNameIdent = identDef[0]
       let fieldName = $fieldNameIdent.ident
       case $identDef[1].ident
       of "string":
         body.add quote do:
           `cfgIdent`.`fieldNameIdent` = `objIdent`[`fieldName`].getStr
       of "int":
         body.add quote do:
           `cfgIdent`.`fieldNameIdent` = `objIdent`[`fieldName`].getNum().int
       else:
         doAssert(false, "Not Implemented")

     return newProc(
       newIdentNode("load"),
       [newEmptyNode(),
        newIdentDefs(cfgIdent, newIdentNode(typeName)),
        newIdentDefs(filenameIdent, newIdentNode("string"))],
       body
     )
   ```

2. **Add a Call to `createLoadProc` in the `config` Macro:**
   Add the following line below the `getAst` call in the `config` macro:
   ```nim
   result.add createLoadProc(typeName.ident, identDefs)
   ```

### Testing the Configurator
Before testing, create a JSON file named `myappconfig.json` next to your `configurator.nim` file with the following content:
```json
{
  "address": "http://google.com",
  "port": 80
}
```

Add the following code to the bottom of the `configurator.nim` file to test the configurator:
```nim
import json

config MyAppConfig:
  address: string
  port: int

var myConf = newMyAppConfig()
myConf.load("myappconfig.json")
echo("Address: ", myConf.address)
echo("Port: ", myConf.port)
```

Compile and run the file. You should see the following output:
```
Address: http://google.com
Port: 80
```
**Note:** Ensure you run the program from the `src` directory; otherwise, the `myappconfig.json` file will not be found.

### Summary
- **Metaprogramming Constructs:**
  - Generics: Reduce code duplication.
  - Templates: Advanced substitution mechanism expanded at compile time.
  - Macros: Read, generate, and modify code in the form of an abstract syntax tree (AST).

- **Generic Procedures:**
  - Reduce code duplication.
  - Concepts: Experimental feature related to generics, allowing you to specify requirements for matched types.

- **Templates:**
  - Support hygiene, controlling access to variables.
  - Can take a code block as an argument.

- **Macros:**
  - Work by reading, generating, and modifying code in the form of an AST.
  - Can get an AST representation of any piece of Nim code.
  - Can generate code by constructing an AST using macros.

### Getting Help
If you encounter issues while reading this book or need help with Nim, the Nim community is available to assist you. You can reach out via:
- **Real-time Communication:**
  - IRC: #nim on freenode.
  - Gitter: https://gitter.im/nim-lang/Nim.
- **Forums:**
  - Nim Forum: http://forum.nim-lang.org/.
  - Manning Forum: https://forums.manning.com/forums/nim-in-action.
- **Other Communication Methods:**
  - Community Page: http://nim-lang.org/community.html.

### Installing Nim
#### Building from Source
1. **Install a C Compiler:**
   - **Windows:** Install MinGW from www.mingw.org.
   - **Mac OS:** Use Clang, installable via Homebrew (`brew install clang`) or Xcode Command Line Tools (`xcode-select --install`).
   - **Linux:** Use GCC, installable via package managers like `sudo yum install gcc` or `sudo apt-get install gcc`.

2. **Download the Nim Compiler Archive:**
   - Navigate to the Nim download page and download the C sources for your OS.

3. **Extract the Archive and Move It to a Safe Location:**
   - Extract the archive and move the Nim folder to a safe location, e.g., `~/programs/nim`.

4. **Compile the Nim Compiler:**
   - Open a terminal, navigate to the Nim directory, and execute the build script (`sh build.sh` for non-Windows, `build.bat` or `build64.bat` for Windows).

5. **Add Nim to Your PATH:**
   - **Windows:** Access advanced system settings and add the Nim bin directory to the PATH.
   - **Mac/Linux:** Modify the `.bashrc`, `.zshrc`, or equivalent to include the Nim bin directory.

6. **Verify the Installation:**
   - Open a new terminal and run `nim -v` to check the installation.

You are now ready to start developing Nim applications!