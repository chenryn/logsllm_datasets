  } 
  func g() private { 
     ... 
  } 
}
Fig. 4: Automated SMACS adoption for a legacy contract.
for access control of security-critical methods or for example
when a client is unknown to the requested TS. To realize
this property, one may be tempted to rely on the nonce
mechanism employed by Ethereum for counteracting replay
attacks. However, we emphasize that the transaction’s nonce
cannot be accessed by the smart contract itself. Therefore,
SMACS has to implement an in-contract mechanism to support
the veriﬁcation of one-time tokens.
The TS maintains counter variable (corresponding to the
index ﬁeld of a token) for issuing tokens with the one-time
property set. counter is initialized to 0, whenever a new
one-time token is being issued, it is incremented by 1, and the
updated valued is used as the index value for this token.
Since a one-time token is supposed to be used only once,
when a client with such a token tries to access an SMACS-
enabled smart contract, the contract has to check whether the
underlying token has been used before, and then permits or
denies the access attempt accordingly. A trivial way for the
contract to realize this is to store the index values of all one-
time tokens having made a successful access. However, as the
on-chain storage is expensive, this approach can be costly and
impractical if the number of issued one-time tokens is large.
Based on the observations that the TS can assign every
one-time token with a unique index consecutively and the
token lifetime is limited, we propose a cost-effective scheme
to handle one-time tokens, where every index is efﬁciently
encoded as a single bit of a cyclically reused bitmap. In our
approach, an n-bit map S (together with its internal state)
is used to represent
the status (used or unused) of a set
of n one-time tokens with consecutive index values. The
state of the bitmap can be represented by a tuple (S, start,
startPtr, end, endPtr), where S ∈ {0, 1}n, start ∈ {0, 1,···},
startP tr ∈ {0,··· , n − 1}, end = start + n − 1, and
endP tr = startP tr + n − 1 mod n. In Alg. 2, the n-bit
sequence S [startP tr] (cid:2) S [startP tr + 1 mod n] (cid:2) ··· (cid:2)
S [endP tr] indicates the status of the n one-time tokens with
indexes start, start + 1,···, and end. A token with the in-
dex i is regarded as unused if and only if a) i ∈ {start, start+
1,··· , start+n−1} and S[(startP tr+i−start) mod n] = 0,
or b) i > end. When the index i of a token is unused, the state
of the bitmap is updated according to Alg. 2.
Alg. 2: Bitmap state update.
/* Initialization */
S ← [0,··· , 0]; start ← 0; end ← n − 1;
startP tr ← 0; endP tr ← n − 1;
/* Update */
i ← getIndex(token)
if i  end+n,
the bitmap will reset all cells to zero and update the pointers
according to Alg. 2.
Therefore, the bitmap approach ensures that any one-time
token can be used at most once. It is possible that in certain
situations some one-time tokens become invalid before they
are used, which is called a token miss. For example, if the
smart contract has processed a token with the index 13, the
range of the bitmap is updated to start=6 and end=13. This
implies that any (even unused) token with an index smaller
than 6 will be rejected (missed) by the contract. In this case, a
holder of such an unused token would need to re-apply for a
new token from the TS again. To avoid this situation, an owner
should allocate a large-enough bitmap in its smart contract.
There is a trade-off between the size of the bitmap and the
miss rate. The two factors that allow to model the bitmap
size are a) a token lifetime, and b) the (expected) maximum
number of transactions per second that the contract is going to
process. Then the bitmap size required to not reject any unused
and non-expired token is token_lifetime × max_tx_per_second
bits. Fortunately, as we show in § VI-A, even for the most
popular Ethereum contracts and realistic token lifetimes, the
cost of the bitmap storage is low.
D. Tokens for Call Chains
Starting from a transaction originated by an external owned
account, an invoked contract method can call a method of
another contract which in turn can call a method of a third
contract, and this call chain (see § II-C) can go on.
When the smart contracts involved in the call chain are
protected with SMACS, the client initiating the call chain has
to obtain proper tokens for all these smart contracts. Let us
consider a simple example shown in Fig. 5. Before a client
triggers this call chain, she needs to obtain three tokens (e.g.,
method tokens) from the TSes corresponding to SCA, SCB,
and SCC (these TSes can be operated by different owners).
Assuming that the client successfully gets the three tokens
tkA, tkB, and tkC, then she can embed an array of the three
tokens of the following form in the transaction:
SCA : tkA (cid:2) SCB : tkB (cid:2) SCC : tkC.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
{
sender: {
whitelist: ["0x366c...", "0xd488...",...],
},
method: {
methodA: {
blacklist: ["0xBa7F...", "0xb1D4...",...],
},
...
},
argument: {
argA: {
whitelist: ["0x3540...", "0x9e9B...",...],
},
...
}
}
Fig. 6: An example of whitelists and blacklists.
When SCA receives the transaction, it can extract the token
(tkA) associated with its address and verify validity according
to Alg. 1. Subsequently, this array of tokens will be passed
to SCB via a message call who parses out tkB and veriﬁes
it. Finally, the array is passed while calling SCC which can
perform the analogous operations as SCA and SCB.
E. Access Control Rules (ACRs)
Rules in SMACS deﬁne the set of token requests which
can successfully get the token from a TS when submitted. For
every token type, there is a set of rules associated with it. A
token request of a particular type will be checked against the
set of rules associated with that type. In the following section,
we present sample rules that can be implemented in SMACS.
a) Blacklist and Whitelist: Blacklist and whitelist are
the
generic ACRs supported in SMACS. In our context,
simplest form of a whitelist is just a set of Ethereum addresses.
Every address outside this list cannot obtain a valid token
from the TS, and therefore it cannot access the SMACS-
enabled smart contract. As depicted in Fig. 6, each token
type has either a blacklist or whitelist. SMACS does not
mandate how these lists are created and for instance an address
whitelisted for super tokens can be blacklisted for argument
token. Moreover, the listed objects are not necessarily account
addresses. For example, it is possible to blacklist dangerous
argument values for certain contract methods. In SMACS, all
these access lists can be dynamically updated by the owner
without any modiﬁcation to the deployed smart contract.
b) Rules for Runtime Veriﬁcation: Apart from these
basic rules above, the argument token type allows us to craft
more advanced ACRs that can enhance the runtime security
of the SMACS-enabled smart contract. Imagining that a client
tries to access a method of a smart contract with a particular
set of arguments. SMACS allows TSes to simulate the runtime
behavior of the smart contract in an isolated off-chain envi-
ronment and deny access if any abnormal behaviors triggered
by the requested call are observed. Then a TS implementing
proper rules for argument tokens would be able to protect
even vulnerable already deployed smart contracts. We show
concrete instantiations of such rules in the next section.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:34:17 UTC from IEEE Xplore.  Restrictions apply. 
227
V. RUNTIME VERIFICATION CASE STUDIES
Defensive logics with arbitrary complexity can be plugged
into SMACS. In particular, SMACS can be powerful when
combined with any other runtime veriﬁcation tools preventing
speciﬁc attack classes. In this section, we show two concrete
examples where third-party tools are employed to implement
advanced rules enforcing certain runtime security properties.
A. Enforcing Hydra Uniformity
Hydra is a recent framework for smart contract bug bounty
administration, which enables runtime detection and rewarding
of critical bugs [27]. Basically,
in the Hydra framework,
multiple independent program instances written in different
programming languages but with the same intended high-
level logic run in parallel over the blockchain. These program
instances are called the heads (of the Hydra).
When a smart contract protected by Hydra executes, its
intended logic proceeds normally only if the outputs of the
heads are identical. If the outputs diverge for different heads,
it is likely that certain erroneous state is triggered for some
heads. At this point, the execution of the smart contract aborts
and the rewarding logic of Hydra takes control to pay out a
bounty. Therefore, Hydra can detect bugs at runtime at the
cost of increased on-chain resource consumption by a factor
round N when N heads are employed.
We integrated Hydra into SMACS by deﬁning a dedicated
rule for argument tokens. This rule dictates that an argument
token is issued only when the outputs of all heads are identical
when called with the payload speciﬁed in the token request.
In contrast to Hydra, heads in SMACS are run by a TS on
its local testnet. Hydra acts as a simulator in SMACS, does
not consume on-chain resources, and therefore it is possible
to implement more heads in our case without introducing
additional on-chain cost. In summary, this rule enforces Hydra
uniformity, where transactions leading to different head out-
puts are unable to get a token at the ﬁrst place. We show the
efﬁciency of Hydra-supported SMACS in § VI-B.
B. Blocking Re-entrancy Attacks
In this case, we show how to protect a smart contract from
the so-called re-entrancy attack, the essence of the real-world