## Page 2137
### Windmill 的调试功能
除了基本的调试功能外，Windmill 还内置了多种用于调试文档对象模型（Document Object Model, DOM）和 JavaScript 的客户端特性。这些特性旨在帮助开发者更有效地进行测试和调试。

#### Firebug 精简版
Firebug 精简版已集成到 Windmill IDE 中，无论是在测试窗口还是在 Windmill IDE 中，它都提供了与 Firebug Firefox 插件类似的功能，并且支持所有浏览器。Firebug 的主要目标是使你能够随时与网页应用程序的任何部分进行交互。它包括以下视图：
- DOM 查看器
- JavaScript 控制台
- HTML 视图
- CSS 视图
- Script 视图
- XML HTTPRequest (XHR) 视图

如图 21-6 所示。

---

## Page 2138
### 图 21-6: Firebug 精简版用户界面

#### LookupNode
使用 Firebug 精简版控制台，你可以利用 Windmill 内置的功能在整个 DOM 中搜索节点。其中最有用的方法之一是 `lookupNode`，因为它可以跨窗口、框架和内嵌框架查找节点。`lookupNode` 支持多种定位符，如 ID、属性、XPath 和 jQuery 选择器等，以帮助你找到所需的节点。

**示例 21-8：通过 `lookupNode` 定位节点的会话示例**
```python
>>> lookupNode({name: 'q'})
>>> lookupNode({name: 'q'}).name
"q"
>>> lookupNode({name: 'q'}).parentNode
/testing xpath lookup
>>>
lookupNode({xpath: "html/body/center/form/table[1]/tbody/tr/td[2]/input[2]"})
```

---

## Page 2139
### 项目本身
Windmill 是一个开源项目，可以通过 [http://www.getwindmill.com](http://www.getwindmill.com) 访问。邮件列表广泛用于决策、回答问题以及让社区了解最新动态。虽然邮件列表非常高效，但 IRC 频道仍然是项目沟通的重要手段，并且是一种快速解答问题的好方法。随着对测试网页应用程序能力需求的增长，社区和这些工具只会变得更强。Windmill 基于 JavaScript 平台运行，并且遵循开源原则，不断推出新特性。其文档也非常全面，能够积极响应社区的需求。

### 比较
有许多解决方案可用于在浏览器中测试网页应用程序，例如 Watir、Selenium、Twill 和 WebDriver 等。虽然每个工具都有其优点和缺点，但 Windmill 具有一些非常有用的特性，尤其是对于新手来说，无论他们需要测试的平台或浏览器是什么，Windmill 的入门门槛最低。

- **录制器**：Windmill 提供了一个强大的录制器。
- **集成 Firebug 精简版**：提供查看器并支持跨域测试和 SSL 测试。
- **内容安全模式**：Windmill 在内容安全模式下运行，这意味着它无法访问某些浏览器部分，如确认对话框或文件上传。不过，Windmill 已经为这些挑战提供了许多解决方案或变通方案。

**Selenium** 以其 GRID 项目而自豪，该项目允许将测试分布到多台机器上运行。尽管 Windmill 尚未提供类似的解决方案，但这一问题已在发展蓝图中考虑。

**其他项目**（如 Twill）可以提供更快的测试运行速度，并具有更高的测试语法可读性。然而，这些框架缺乏测试大量使用 JavaScript 应用程序的能力，限制了其使用范围。如果你的应用程序不使用任何 JavaScript，并且你不担心跨浏览器缺陷，那么使用 Twill 可能会带来更愉快的测试体验。

---

## Page 2140
### 结论
你现在对 Windmill 的工具、优势、劣势及其竞争对手有了深入了解，是时候开始测试了！随着网页应用程序变得越来越普遍，测试的需求也日益增加，测试社区的重要性也随之提高。

很难准确描述为什么测试自动化如此美妙，因为这涉及到多层次的技术协作。从 Python 代码与浏览器的对话，到 JavaScript 发起并捕获针对 DOM 的事件，每一部分都有其复杂性和优雅性。单独来看，这些部分可能并不令人印象深刻，但当它们组合成一个优美的系统时，就创造出大量的实用工具。这种计算机模拟人的能力让我看到了其中的美丽。

一旦自动化测试开始为你找出缺陷，你将会发现网页自动化测试的魅力。

### 参考文献
- Gift, N. 2009. "Functional testing for Web applications: Using Selenium, Windmill, and twill to test GAE applications." [http://www.ibm.com/developerworks/library/wa-aj-testing/](http://www.ibm.com/developerworks/library/wa-aj-testing/)
- Jaffamonkey blog. "Windmill Testing Framework." [http://www.jaffamonkey.co.uk/2009/03/12/windmill-testing-framework/](http://www.jaffamonkey.co.uk/2009/03/12/windmill-testing-framework/)
- Selenium Core. [http://seleniumhq.org/projects/core/](http://seleniumhq.org/projects/core/)
- Windmill Developers Google Group.
- Windmill Testing Framework. [http://www.getwindmill.com/](http://www.getwindmill.com/) and [http://trac.getwindmill.com/](http://trac.getwindmill.com/)

---

## Page 2141
### 第 22 章：测试一百万个网页
Tim Riley

将看似无关且功能单一的测试工具巧妙地整合起来，创造出特殊的测试能力也是一种美。本章案例中的测试工具最初于六年前开发完成。这些工具从简单的网页蜘蛛爬虫工具演变而来，能够对上百个网页提供判断提示和崩溃测试的测试工具，进而发展成可以测试上百万个网页的自动化测试框架。

这个大容量网页测试框架需要具有较高的灵活性。它可以在不同的操作系统上以不同的编译模式（如标准和调试）对大量可选页面集合进行挂起及崩溃测试。

这需要融合开发者的智慧和协作，创造出一个全新而有趣的工具。一个又一个的工具被开发出来。最终，一个能把站点收集起来的神奇框架产生了。被收集到的页面可能是一百、一万，甚至一百多万个。这些可能是世界上所有网站的首页，也可能是阿尔巴尼亚电子商务网站的首页。它们可以使用标准、调试及优化建模进行测试，框架可以测试你大脑能想象到的或试验成功所能处理的任何组合。

### 故事的开始
我们的 Mozilla 项目小组需要验证类似于 HTML 标签或者 DOM 元素的页面元素是否被使用，以及它们的使用频率。为了实现这个需求，我们开发了 Spider 工具，它用于遍历网页并检查某些特定的标签或者元素。Spider 的检索方式进行模块化设计，允许“用户程序接入点”进行快速增加或交换以增强自身的各种测试和分析能力。随着时间的推移，我们做了一些小的改进并加入了新的用户程序接入点，但网页蜘蛛爬虫部分依旧保持不变。

Spider 的核心代码如下：
```javascript
while (this.mCurrentUrl != null && !isGoodUrl) {
    var href = this.mCurrentUrl.mUrl;
    var lhref = href.toLowerCase();
    if (this.mCurrentUrl.mDepth > this.mDepth) {
        dlog('CSpider.loadPage ignoring ' + this.mCurrentUrl.mUrl +
             ' mCurrentUrl.mDepth > ' + this.mCurrentUrl.mDepth +
             ' CSpider.mDepth ' + this.mDepth);
        this.mCurrentUrl = this.mPagesPending.pop();
    } else if (lhref.search(/\.aac$/) != -1 ||
               lhref.search(/\.ads$/) != -1 ||
               lhref.search(/\.adp$/) != -1 ||
               lhref.search(/\.app$/) != -1 ||
               lhref.search(/\.xls$/) != -1 ||
               lhref.search(/\.xpi$/) != -1 ||
               lhref.search(/\.zip$/) != -1) {
        dlog('CSpider.loadPage Bad extension blocked ' + href);
        this.mCurrentUrl = this.mPagesPending.pop();
    } else if (this.mRespectRobotRules &&
               isRobotBlocked(href, this.mUserAgent)) {
        msg('CSpider.loadPage Robot Rules blocked ' + href);
        this.mCurrentUrl = this.mPagesPending.pop();
    } else {
        isGoodUrl = true;
    }
}
```
你可以在以下链接找到 Spider 扩展：
[http://bclary.com/projects/spider/spider/spider.xpi](http://bclary.com/projects/spider/spider/spider.xpi)

三年前，我们的团队正被没完没了的 JavaScript 测试搞得狼狈不堪。每当我们打算安心开发新的项目时，就会被拉回来运行那些半自动的 JavaScript 测试。于是我们决定用 Spider 来做自动化的 JavaScript 测试。我们开发了一个基于 JavaScript 的框架，我们称之为 Sisyphus（这个名字特别恰当，它来自于希腊神话故事，说是一个国王被罚推一块巨石到山顶，但石头总是会再滚下来）。

Spider 在 Sisyphus 测试框架中一直是基于浏览器测试的核心部分。它允许针对大量真实的页面递归地运行 JavaScript 测试。感谢 Sisyphus，我们再也不会在重要更新或发布回归测试的时刻被召唤回去运行没完没了的 JavaScript 测试了。生活从此真美好！

那时候，我们手握利器却无人知晓。我们自己运行 Sisyphus，并为测试特别配置了一个“魔法盒”。除了我们没有人知道怎么运行它，也没有人主动提出愿意学习如何运行它。我们下一步要做的就是让它发扬光大。

追溯到六个月前的 2008 年 12 月，我们正在使用一个可以加载预定义 URL 列表的工具进行测试。这个工具可以测试大约 500 个页面，由于预定义了列表，使得它无法就此向上扩展。它的目的是加载 Firefox 中的页面并检查是否存在崩溃和断言。内存泄漏、断言和崩溃都会被记录在一个大的日志文件里。崩溃的原因以退出状态的形式按站点各自最先出现崩溃的位置分别记录下来。下面是一个日志文件的示例：

---

希望这些修改能使文本更加清晰、连贯和专业。如果有更多具体要求，请告诉我！