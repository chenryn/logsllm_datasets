## Page 2137
u'version':u'0.1'}
(All of the output associated with the click action)
除了这些调试功能外，Windmill也内建有一些用于调试文档对象模型
（DocumentObjectModel,DOM）和JavaScript的客户端特性。
Firebug精简版
Firebug精简版被集成到了WindmillIDE中。不论是在测试窗口中还是
在WindmillIDE中，它都提供了和FirebugFirefox插件差不多相同的
功能，并支持所有的浏览器。Firebug的主要目标是使得你能够与网
页应用程序的任何部分在任何时间进行交互。这其中包括一个DOM
查看器，一个JavaScript控制台，以及如下视图：HTML、CSS、
Script、DOM、XML HTTPRequest(XHR)。如图21-6。
2136
---
## Page 2138
图21-6Firebug精简版用户界面
LookupNode
使用Firebug精简版控制台，你可以使用Windmill内建的功能来在整
个DOM中搜索节点。其中最有用的方法之一就是lookupNode，因为
它会为寻找一个节点而对定位符做一次跨窗口、框架和内嵌框架的
查找（例21-8）。lookupNode通过使用多个不同“定位符"或者多种不
同匹配DOM节点属性的方法来帮助你找到要找的节点。最简单的案
例是ID，但它也支持属性、XPath和jQuery定位符等的搜索。
例21-8：通过lookupNode来定位节点的会话示例
>>>lookupNode({name:'q′)
>>>lookupNode({name:'q'}).name
"q"
>>>lookupNode({name:'q'}).parentNode
/testing xpath lookup
>>>
lookupNode({xpath:"html/body/center/form/table[1]/tbody/tr/td[2]/input[2
1"})
2137
---
## Page 2139
项目本身
Windmill是开源的，可以通过http://www.getwindmill.com自由访问。
邮件列表被大量用于决策、回答问题，并使得社区能了解到最新的
动态。虽然邮件列表非常高效，IRC频道仍然是项目聊关不变的手
段，而且是一种能使你的问题得到快速解答的不错的方式。随着对
测试网页应用程序的能力需求的增长，社区和这些工具只会变得更
强。Windmill已就JavaScript平台继续在网络上运行和开源原则对于
新特性发展方向的影响下定了赌注。文档也已被证明是非常全面的
和能够积极响应社区的。
比较
在浏览器中测试网页应用程序有很多种解决方案：Watir、
Selenium、Twill和WebDriver等。虽然它们都各有长处和短处，但是
Windmill显然有一些非常有用的特性，而且对于新的测试编写人员来
讲，不管他们需要测试的平台或浏览器是什么，Windmill的入门门槛
最低。
Windmill有一个引以为豪的录制器，集成了Firebug精简版、查看
器，并且支持跨域测试和SSL测试。然而，不像Watir、Windmill运行
于内容安全模式下，这意味着它无法访问浏览器的某些部分，如确
认对话框或文件上传。不过Windmill已经为许多这种挑战做出了解决
方案或变通方案。
Selenium以能将测试分布到多台机器上去运行的GRID项目为荣。
Windmill还没有拿出一个类似的解决方案，但测试运行时间在大型测
试集中是如此重要的一个因素，所以这个问题已经被考虑在发展蓝
图之中。
其他项目（如Twill）可以提供更快的测试运行速度，在许多方面拥
有可读性更高的测试语法。然而，这些框架缺乏测试大量使用
JavaScript的应用程序的能力，限制了其使用范围。如果你发现自己
测试的应用程序并不使用任何JavaScript，并且你也不担心跨浏览器
的缺陷，你可能会发现使用Twilli这样的工具会带来更愉快的测试运
行体验。
结论
2138
---
## Page 2140
你已经了解了Windmill的大量工具，以及它的优势、劣势和竞争，现
在是时间开始测试了！由于网页应用程序变得极其普遍，对于测试
的需求日益增加，而测试社区的重要性也同样如此。
很难去精确描述为什么测试自动化是美丽的，因为有那么多层技术
的参与才使其得以实现。从Python代码与浏览器的对话，到
JavaScript发起并捕获针对DOM的事件，每一部分都有它自己的复杂
和优雅。单独来看，这些部分中的每一个都算不上令人印象深刻，
但是一旦它们组合成为一个优美的系统，它们就创造出惊人数量的
实用工具。从这种以计算机来模拟人的能力中，我看到了充溢着的
美丽。
一旦自动化测试开始为你找出缺陷，你将会发现网页自动化测试的
美丽。
参考文献
Gift,N.2009. "Functional testing for Web applications:Using
Selenium, Windmill,and twill to test GAE applications."
http://www.ibm.com/developerworks/library/wa-aj-testing/
Jaffamonkeyblog."Windmill TestingFramework."
http://www.jaffamonkey.co.uk/2009/03/12/windmill-testing-framework/
Selenium Core,htp:/seleniumhq.org/projects/core/.
Windmill Developers Google
p-lpno.ooosnono.
Windmil1 Testing Framework,http:/www.getwindmill.com/ and
http://trac.getwindmill.com/
第22章测试一百万个网页
TimRiley
将看似无关且功能单一的测试工具巧妙地整合起来，创造出特殊的
测试能力也是一种美。本章案例中的测试工具最初于六年前开发完
是）日
2139
---
## Page 2141
管理总监）。这些工具从简单的网页蜘蛛爬虫Spidering山工具演变
而来，能对上百网页提供判断提示和崩溃测试的测试工具，进而发
展成可以测试上百万网页的自动化测试框架。
这个大容量网页测试框架需要具有较高的灵活性。它包括可以在不
同的操作系统上不同的编译模式上（如标准和调试）对大量可选页
面集合进行挂起及崩溃测试。
这需要融合开发者的智慧和协作，创造出一个全新而有趣的工具。
一个又一个的工具被开发出来。最终一个能把站点收集起来的神奇
框架产生了。被收集到的页面可能是一百、一万，甚至一百多万
个。这些可能是世界上所有网站的首页，也可能是阿尔巴尼亚电子
购物网站的首页。它们可以使用标准、调试及优化建模进行测试，
框架可以测试你大脑能想象到的或试验成功所能处理的任何组合。
试框架的。
故事的开始..
.....我们的Mozilla项目小组需要验证类似于HTML标签或者DOM元
素的页面元素是否被使用，（如果被使用）多久用一次。为了实现
这个需求我们开发了Spider②工具，它用于遍历网页并检查某些特
定的标签或者元素。Spider的检索方式进行模块化设计，允许"用户
程序接入点"进行快速增加或交换以增强自身的各种测试和分析能
力。随着时间的推移，我们做了一些小的改进并加入了新的用户程
序的接入点，但是网页蜘蛛爬虫部分依旧保持不变。
Spider的核心代码如下：
while(this.mCurrentUrl !=null &&!isGoodUrl)
var href=this.mCurrentUrl.mUrl;
var Ihref=href.toLowerCase();
if(this.mCurrentUrl.mDepth>this.mDepth)
2140
---
## Page 2142
dlog('CSpider.loadPage ignoring'+this.mCurrentUrl.mUrl+
'mCurrentUrl.mDepth>'+this.mCurrentUrl.mDepth+
CSpider.mDepth'+this.mDepth);
this.mCurrentUrl=this.mPagesPending.popO;
1
else if(lhref.search(/.aacS/)!=-1l
lhref.search(/.adsS/)!=-1l
lhref.search(/LadpS/)!=-1l
Ihref.search(/.appS/)!=1
lhref.search(/.xls$/)!=-1/|
lhref.search(/LxpiS/)!-1I
lhref.search(/.zipS/)!=-1
）
dlog('CSpider.loadPage Bad extension blocked’+href);
this.mCurrentUrl=this.mPagesPending.popO;
1
else if(this.mRespectRobotRules &&
isRobotBlocked(href,this.mUserAgent)
msg('CSpider.loadPage Robot Rules blocked'+href);
2141
---
## Page 2143
this.mCurrentUrl=this.mPagesPending.popO;
else
isGoodUrl=true;
你可以在这里找到Spider扩展：
http://bclary.com/projects/spider/spider/spider.xpi
时间快速转到三年前。我们的团队正被没完没了的JavaScript测试搞
得狼犯不堪。每当我们打算安心开发新的项目时我们就会被拉回来
运行那些半自动的JavaScript测试。于是我们决定用Spider来做自动
化的JavaScript测试。我们开发了一个基于JavaScript的框架，我们管
它叫做Sisyphus（这个名字特别恰当，它来自于希腊神话故事，说得
是一个国王被罚推一块巨石到山顶，但石头总是会再滚下来3]）。
Spider在Sisyphus测试框架中一直是基于浏览器测试的核心部分。它
允许针对大量真实的页面递归地运行JavaScript测试。感谢Sisyphus，
我们再也不会在重要更新或发布回归测试的时刻被召唤回去运行没
完没了的JavaScript测试了。生活从此真美好！
那时候，我们手握利器却无人知晓。我们自己运行Sisyphus，并为测
试特别配置了一个“魔法盒”。除了我们没有人知道怎么运行它，也
没有人主动提出愿意学习如何运行它。我们下一步要做的就是让其
扬光大。
追溯到六个月前的2008年12月，我们正在使用一个可以加载预定义
URL列表的工具进行测试。这个工具可以测试大约500个页面，由于
预定义了列表，使得它无法就此向上扩展。它的目的是加载Firefox
中的页面并检查是否存在崩溃和断言。内存泄漏、断言和崩溃都会
被记录在一个大的日志文件里。崩溃的原因以退出状态的形式按站
点各自最先出现崩溃的位置分别记录下来。下面是一个日志文件的
示例：