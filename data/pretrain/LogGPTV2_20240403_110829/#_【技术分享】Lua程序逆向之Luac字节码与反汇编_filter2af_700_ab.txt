        return ((inst)>>POS_Bx) & ((~((~(Instruction)0)>POS_Ax) & ((~((~(Instruction)0);
            local uchar inst_sz = get_inst_sz();
            local int pc = 1;
            if (inst_sz == 4) {
                local uint32 sz = sizecode;
                while (sz-- > 0) {
                    Inst inst(pc);
                    pc++;
                }
            } else {
                Warning("Error size_Instruction.");
            }
            typedef struct(int pc) {
                local int pc_ = pc;
                local uchar inst_sz = get_inst_sz();
                if (inst_sz == 4) {
                    uint32 inst;
                } else {
                    Warning("Error size_Instruction.");
                }
            } Inst ;
        } code ;
        ......
        // upvalue names
        UpValueNames names;
    } Proto ;
然后在代码中，通过parentof(parentof(inst)就能够返回一个Proto的引用类型，然后就可以愉快的读Proto中所有的字段数据了。
**指令语义转换**
所谓语义转换，就是将直接的指令格式表示成可以读懂的指令反汇编语句。如指令0x0000C1，反汇编后，它的指令表示为“LOADK R3
K0”，LOADK为OpCode的助记符，这里取助记符时，直接通过010
Editor模板函数EnumToString()，传入OpCode名，然后去掉前面的OP_就可以获得。使用get_opcode_str()实现该功能，代码如下：
    string get_opcode_str(OpCode o) {
        string str = EnumToString(o);
        str = SubStr(str, 3);
        return str;
    }
R3表示寄存器，K0表示常量1，即当前函数的Constants中索引为0的Constant。这一条指令经过语义转换后就变成了“R3 :=
xxx”，这个xxx是常量的值，需要通过DecompileConstant()获取它具体的值。
在进行语义转换时，将处理后的指令信息保存到line字符串中，将语义字符串转换到lend字符串中，处理完后输出时加在一起，中间放一个分号。如下所示是指令处理后的输出效果：
    struct Inst inst[1]
    [2] LOADK     R3 K0        ; R3 := 1
**指令依赖处理**
指令依赖是什么意思呢？即一条指令想要完整的了解它的语义，需要依赖它前面或后面的指令，就解析该指令时，需要用到指令前面或后面的数据。
拿OP_LE指令来说，它的注释部分如下：
    /*
    A B C
    if ((RK(B)  。