postgres=# insert into t_gist select generate_series(1,100000), point(round((random()*1000)::numeric, 2), round((random()*1000)::numeric, 2));    
INSERT 0 100000    
postgres=# select * from t_gist  limit 3;    
 id |       pos           
----+-----------------    
  1 | (325.43,477.07)    
  2 | (257.65,710.94)    
  3 | (502.42,582.25)    
(3 rows)    
postgres=# create index idx_t_gist_1 on t_gist using gist (pos);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gist where circle '((100,100) 10)'  @> pos;    
                                                       QUERY PLAN                                                           
------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.t_gist  (cost=2.55..125.54 rows=100 width=20) (actual time=0.072..0.132 rows=46 loops=1)    
   Output: id, pos    
   Recheck Cond: (''::circle @> t_gist.pos)    
   Heap Blocks: exact=41    
   Buffers: shared hit=47    
   ->  Bitmap Index Scan on idx_t_gist_1  (cost=0.00..2.53 rows=100 width=0) (actual time=0.061..0.061 rows=46 loops=1)    
         Index Cond: (''::circle @> t_gist.pos)    
         Buffers: shared hit=6    
 Planning time: 0.147 ms    
 Execution time: 0.167 ms    
(10 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_gist where circle '((100,100) 1)' @> pos order by pos  '(100,100)' limit 10;    
                                                              QUERY PLAN                                                                   
---------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=0.28..14.60 rows=10 width=28) (actual time=0.045..0.048 rows=2 loops=1)    
   Output: id, pos, ((pos  '(100,100)'::point))    
   Buffers: shared hit=5    
   ->  Index Scan using idx_t_gist_1 on public.t_gist  (cost=0.28..143.53 rows=100 width=28) (actual time=0.044..0.046 rows=2 loops=1)    
         Output: id, pos, (pos  '(100,100)'::point)    
         Index Cond: (''::circle @> t_gist.pos)    
         Order By: (t_gist.pos  '(100,100)'::point)    
         Buffers: shared hit=5    
 Planning time: 0.092 ms    
 Execution time: 0.076 ms    
(10 rows)    
```    
2、标量类型排序    
```    
postgres=# create extension btree_gist;    
CREATE EXTENSION    
postgres=# create index idx_t_btree_2 on t_btree using gist(id);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_btree order by id  100 limit 1;    
                                                                QUERY PLAN                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=0.15..0.19 rows=1 width=41) (actual time=0.046..0.046 rows=1 loops=1)    
   Output: id, info, ((id  100))    
   Buffers: shared hit=3    
   ->  Index Scan using idx_t_btree_2 on public.t_btree  (cost=0.15..408.65 rows=10000 width=41) (actual time=0.045..0.045 rows=1 loops=1)    
         Output: id, info, (id  100)    
         Order By: (t_btree.id  100)    
         Buffers: shared hit=3    
 Planning time: 0.085 ms    
 Execution time: 0.076 ms    
(9 rows)    
```    
## 五、sp-gist    
### 原理    
SP-GiST is an abbreviation for space-partitioned GiST.     
SP-GiST supports partitioned search trees, which facilitate development of a wide range of different non-balanced data structures, such as quad-trees, k-d trees, and radix trees (tries).     
The common feature of these structures is that they repeatedly divide the search space into partitions that need not be of equal size.     
Searches that are well matched to the partitioning rule can be very fast.    
SP-GiST类似GiST，是一个通用的索引接口，但是SP-GIST使用了空间分区的方法，使得SP-GiST可以更好的支持非平衡数据结构，例如quad-trees, k-d tree, radis tree.    
[《Space-partitioning trees in PostgreSQL》](20170627_01_pdf_001.pdf)    
[《SP-GiST for PostgreSQL User Manual》](20170627_01_pdf_002.pdf)    
### 应用场景    
1、几何类型，支持位置搜索（包含、相交、在上下左右等），按距离排序。    
2、范围类型，支持位置搜索（包含、相交、在左右等）。    
3、IP类型，支持位置搜索（包含、相交、在左右等）。    
### 例子    
1、范围类型搜索    
```    
postgres=# create table t_spgist (id int, rg int4range);    
CREATE TABLE    
postgres=# insert into t_spgist select id, int4range(id, id+(random()*200)::int) from generate_series(1,100000) t(id);    
INSERT 0 100000    
postgres=# select * from t_spgist  limit 3;    
 id |   rg        
----+---------    
  1 | [1,138)    
  2 | [2,4)    
  3 | [3,111)    
(3 rows)    
postgres=# set maintenance_work_mem ='32GB';    
SET    
postgres=# create index idx_t_spgist_1 on t_spgist using spgist (rg);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_spgist where rg && int4range(1,100);    
                                                       QUERY PLAN                                                            
-------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.t_spgist  (cost=2.55..124.30 rows=99 width=17) (actual time=0.059..0.071 rows=99 loops=1)    
   Output: id, rg    
   Recheck Cond: (t_spgist.rg && '[1,100)'::int4range)    
   Heap Blocks: exact=1    
   Buffers: shared hit=6    
   ->  Bitmap Index Scan on idx_t_spgist_1  (cost=0.00..2.52 rows=99 width=0) (actual time=0.043..0.043 rows=99 loops=1)    
         Index Cond: (t_spgist.rg && '[1,100)'::int4range)    
         Buffers: shared hit=5    
 Planning time: 0.133 ms    
 Execution time: 0.111 ms    
(10 rows)    
postgres=# set enable_bitmapscan=off;    
SET    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_spgist where rg && int4range(1,100);    
                                                             QUERY PLAN                                                                  
-------------------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_t_spgist_1 on public.t_spgist  (cost=0.28..141.51 rows=99 width=17) (actual time=0.021..0.051 rows=99 loops=1)    
   Output: id, rg    
   Index Cond: (t_spgist.rg && '[1,100)'::int4range)    
   Buffers: shared hit=8    
 Planning time: 0.097 ms    
 Execution time: 0.074 ms    
(6 rows)    
```    
## 六、brin    
### 原理    
BRIN 索引是块级索引，有别于B-TREE等索引，BRIN记录并不是以行号为单位记录索引明细，而是记录每个数据块或者每段连续的数据块的统计信息。因此BRIN索引空间占用特别的小，对数据写入、更新、删除的影响也很小。    
BRIN属于LOSSLY索引，当被索引列的值与物理存储相关性很强时，BRIN索引的效果非常的好。    
例如时序数据，在时间或序列字段创建BRIN索引，进行等值、范围查询时效果很棒。    
### 应用场景    
[《BRIN (block range index) index》](../201504/20150419_01.md)     
[《PostgreSQL 物联网黑科技 - 瘦身几百倍的索引(BRIN index)》](../201604/20160414_01.md)      
[《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)      
[《PostgreSQL 并行写入堆表，如何保证时序线性存储 - BRIN索引优化》](../201706/20170611_02.md)      
### 例子    
```    
postgres=# create table t_brin (id int, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# insert into t_brin select generate_series(1,1000000), md5(random()::text), clock_timestamp();    
INSERT 0 1000000    
postgres=# select ctid,* from t_brin limit 3;    
 ctid  | id |               info               |          crt_time              
-------+----+----------------------------------+----------------------------    
 (0,1) |  1 | e48a6cd688b6cc8e86ee858fa993b31b | 2017-06-27 22:50:19.172224    
 (0,2) |  2 | e79c335c679b0bf544e8ba5f01569df7 | 2017-06-27 22:50:19.172319    
 (0,3) |  3 | b75ec6db320891a620097164b751e682 | 2017-06-27 22:50:19.172323    
(3 rows)    
postgres=# select correlation from pg_stats where tablename='t_brin' and attname='id';    
 correlation     
-------------    
           1    
(1 row)    
postgres=# select correlation from pg_stats where tablename='t_brin' and attname='crt_time';    
 correlation     
-------------    
           1    
(1 row)    
postgres=# create index idx_t_brin_1 on t_brin using brin (id) with (pages_per_range=1);    
CREATE INDEX    
postgres=# create index idx_t_brin_2 on t_brin using brin (crt_time) with (pages_per_range=1);    
CREATE INDEX    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from t_brin where id between 100 and 200;    
                                                       QUERY PLAN                                                            
-------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.t_brin  (cost=43.52..199.90 rows=74 width=45) (actual time=1.858..1.876 rows=101 loops=1)    
   Output: id, info, crt_time    
   Recheck Cond: ((t_brin.id >= 100) AND (t_brin.id   Bitmap Index Scan on idx_t_brin_1  (cost=0.00..43.50 rows=107 width=0) (actual time=1.840..1.840 rows=20 loops=1)    
         Index Cond: ((t_brin.id >= 100) AND (t_brin.id = '2017-06-27 22:50:19.172224'::timestamp without time zone) AND (t_brin.crt_time   Bitmap Index Scan on idx_t_brin_2  (cost=0.00..58.51 rows=4494 width=0) (actual time=1.848..1.848 rows=460 loops=1)    
         Index Cond: ((t_brin.crt_time >= '2017-06-27 22:50:19.172224'::timestamp without time zone) AND (t_brin.crt_time  "激情" 进行匹配，而GIN索引则无法做到）    
位置信息如下    
```  
postgres=# select to_tsvector('english', 'hello digoal');  
     to_tsvector        
----------------------  
 'digoal':2 'hello':1  
(1 row)  
postgres=# select to_tsvector('english', 'hello i digoal');  
     to_tsvector        
----------------------  
 'digoal':3 'hello':1  
(1 row)  
postgres=# select to_tsvector('english', 'hello i am digoal');  
     to_tsvector        
----------------------  
 'digoal':4 'hello':1  
(1 row)  
postgres=# select to_tsquery('english', 'hello  digoal');  
      to_tsquery        
----------------------  
 'hello'  'digoal'  
(1 row)  
postgres=# select to_tsquery('english', 'hello  digoal');  
      to_tsquery        
----------------------  
 'hello'  'digoal'  
(1 row)  
postgres=# select to_tsquery('english', 'hello  digoal');  
      to_tsquery        
----------------------  
 'hello'  'digoal'  
(1 row)  
postgres=# select to_tsvector('hello digoal') @@ to_tsquery('english', 'hello  digoal');  
 ?column?   
----------  
 t  
(1 row)  
postgres=# select to_tsvector('hello digoal') @@ to_tsquery('english', 'hello  digoal');  
 ?column?   
----------  
 f  
(1 row)  