and Xiaomi. All phones are off-the-shelf products released during
2015-2019. Details about the tested phones are given in Table 2.
The Android systems installed on these Android phones are
from version 5.0 to the latest mainstream version 9.0 (by 2019). The
corresponding platform app developed by each manufacturer for
implementing the data clone service is also listed. It is worthy noting
that the mobile phones by Gionee are security-enhanced Android
phones with an EAL4+ certificate (No. ISCCC-2016-VP-304).
In our experiments, five data clone services (i.e., Huawei, Motorola,
Nokia, OnePlus, and Xiaomi) are analyzed by using at least one rooted
phone. For the other three data clone services (Gionee, OPPO, and
Vivo), we extracted the universal versions of the data clone apps
and installed them on the rooted Motorola (Android 5.0), Huawei
(Android 7.0), and Xiaomi phone (Android 8.0) for analysis.
To conduct the security analysis for testing each data clone
service, we prepared two Android mobile phones developed by
each manufacturer, phone A (pA) and phone B (pB) with the built-
in data clone services, to simulate the phone-to-phone data clone
procedure. Before the test, we also stored user data in pA including
contacts, SMS messages, installed apps, etc., and executed a factory
325Certified Copy? Understanding Security Risks of Wi-Fi Hotspot based Android Data Clone Services
ACSAC 2020, December 7–11, 2020, Austin, USA
reset for pB. Then we ran the data clone apps on pA and pB to
transfer data.
Table 2: Analyzed data clone services and their related An-
droid devices
4.2 Analysis Results
Having the details about the Android phones, we first analyzed
the data types that can be transferred. The transferred data types
supported by each manufacturer are listed in Table 3. We found that
all the services, except for the Motorola service, support transferring
all types of sensitive data (i.e., communication records, files on
SD card, app-related data, and system settings). Next, we utilized
Poirot to assess the security risks these services may suffer from.
The analysis results are discussed in what follows.
Table 3: Supported data types for each data clone service
4.2.1 Data Export & Import. We inspected all data clone services
supporting data export/import. When the data clone app is granted
with normal and dangerous permissions, communication records,
SD card data, and APK files can be operated on. Since all the data
clone apps are installed as platform apps on their own brands
of Android phones, signature permissions are granted, and thus
system settings and install apps are accessible without requiring
the access to be granted by the users. Note that the data clone
services of Motorola and Nokia are not allowed to operate on app
data and system settings, even though they possess the signature
level permissions. In addition, we found that six manufacturers
implemented supporting system components to help data clone
services access the protected data (e.g., WLAN history and app
data). Among them, Xiaomi and Vivo modified the original Android
BackupManagerService to ignore the android:allowBackup="false"
flag and thus their data clone apps can backup private data of ALL
the installed apps. The customized processes with root privilege
were introduced by Huawei7, OnePlus8 and Oppo9, whereas Gionee
integrated a built-in superuser executable to grant root privilege to
its data clone service. For these services requiring sensitive permis-
sions, Poirot did not detect explicitly exposed components, which
indicates that a third-party app could not utilize interfaces of these
services directly.
The code analysis and the network traffic analysis demonstrated
that all eight data clone services transfer data separately. That is,
data are first packed into files of different formats and then each
file is sent individually. By utilizing the dynamic instrumentation
of Poirot, we found that three data clone services (that is, Huawei,
Motorola, and Vivo) store intermediate files at the app sandbox, while
the other five data clone services (that is, Gionee, Nokia, OnePlus,
OPPO, and Xiaomi) use the SD card as buffer for intermediate data.
This leads to a temporary file retrieving attack (see details in Sec-
tion 4.3).
4.2.2 Data Transmission. We found that there are significant dif-
ferences between data transmission protocols adopted by each data
clone service (see the last two columns of Table 4). The data clone
services of Gionee, Nokia, OnePlus, OPPO, and Xiaomi adopt their
proprietary, TCP based protocols. The data clone services of Huawei,
Motorola, and Vivo use multiple protocols to transfer different types
of data. The Huawei data clone service uses the File Transfer Proto-
col (FTP) to transfer user data, a customized UDP-based heartbeat
protocol to keep a long-lived connection, and a proprietary TCP-
based protocol to send control commands. The Motorola data clone
service utilizes the standard HTTP protocol to transfer communica-
tion records and a TCP-based proprietary protocol to transfer files
stored on the SD card. The Vivo data clone service utilizes the HTTP
protocol to transfer user data while an additional WebSocket-based
heartbeat protocol is used to maintain the connection.
With the help of Poirot, we successfully located the code snip-
pets related to data packing and data sending/receiving in all eight
data clone apps. We then conducted a manual reverse engineering
to recover the formats of transferred data. For the data clone ser-
vices of Nokia and Gionee, the transferred data are serialized using
writeObject. The Nokia data clone service separates communication
sessions into metadata sessions and raw content sessions, while the
Gionee data clone service combines the metadata and the content
of transferred data in the same session. The data clone services
of OnePlus and OPPO share a similar solution that transfers user
data without compressing them. The difference is that the OPPO
data clone service uses only one session to send all data while the
OnePlus data clone service establishes several sessions to transfer
data payload and other metadata, respectively. The data clone ser-
vice of Xiaomi transfers user data in both the text-format and the
binary-format. The text-format user data contain JSON-serialized
control commands and file metadata, and the binary-format files
contain the raw content of the transferred data. The data clone
services of Motorola transfers data (SD card files with TCP, commu-
nication records with HTTP) without any packing. The Vivo data
7/system/bin/filebackup
8/system/bin/br_app_data_service
9/system/bin/br_app_data_service
Table2:AnalyzeddatacloneservicesandtheirrelatedAn-droiddevicesDeviceCloneAppPhoneAPhoneBSystemGioneeAmiGdataGhostGN8002SGN8003Android6.0HuaweiPhoneCloneP9*Mate8Android7.0MotorolaMigrateXT1079*XT1085*Android5.0NokiaPhoneClonerX5*X5*Android9.0OnePlusBackupRestore5T*5*Android9.0OPPOBackupAndRestoreA37mR9PlusmAAndroid5.1VivoEasyShareU1U1Android8.1XiaomiBackupMI5MI6*Android8.0*:thephoneisrootedSDcard,app-relateddata,andsystemsettings).Next,weutilizedPoirottoassessthesecurityriskstheseservicesmaysufferfrom.Theanalysisresultsarediscussedinwhatfollows.Table3:SupporteddatatypesforeachdatacloneserviceServiceOn-deviceAttackNetwork-levelAttackGioneevulnerablevulnerableHuawei-partiallyvulnerableMotorolavulnerable-Nokia--OnePlusvulnerablevulnerableOPPOvulnerable-Vivo-vulnerableXiaomivulnerablevulnerable14.2.1DataExport&Import.Weinspectedalldatacloneservicessupportingdataexport/import.Whenthedatacloneappisgrantedwithnormalanddangerouspermissions,communicationrecords,SDcarddata,andAPKfilescanbeoperatedon.SinceallthedatacloneappsareinstalledasplatformappsontheirownbrandsofAndroidphones,signaturepermissionsaregranted,andthussystemsettingsandinstallappsareaccessiblewithoutrequiringtheaccesstobegrantedbytheusers.NotethatthedatacloneservicesofMotorolaandNokiaarenotallowedtooperateonappdataandsystemsettings,eventhoughtheypossessthesignaturelevelpermissions.Inaddition,wefoundthatsixmanufacturersimplementedsupportingsystemcomponentstohelpdatacloneservicesaccesstheprotecteddata(e.g.,WLANhistoryandappdata).Amongthem,XiaomiandVivomodifiedtheoriginalAndroidBackupManagerServicetoignoretheandroid:allowBackup="false"flagandthustheirdatacloneappscanbackupprivatedataofALLtheinstalledapps.ThecustomizedprocesseswithrootprivilegewereintroducedbyHuawei7,OnePlus8andOppo9,whereasGioneeintegratedabuilt-insuperuserexecutabletograntrootprivilegetoitsdatacloneservice.Fortheseservicesrequiringsensitivepermis-sions,Poirotdidnotdetectexplicitlyexposedcomponents,whichindicatesthatathird-partyappcouldnotutilizeinterfacesoftheseservicesdirectly.7/system/bin/filebackup8/system/bin/br_app_data_service9/system/bin/br_app_data_serviceThecodeanalysisandthenetworktrafficanalysisdemonstratedthatalleightdatacloneservicestransferdataseparately.Thatis,dataarefirstpackedintofilesofdifferentformatsandtheneachfileissentindividually.ByutilizingthedynamicinstrumentationofPoirot,wefoundthatthreedatacloneservices(thatis,Huawei,Motorola,andVivo)storeintermediatefilesattheappsandbox,whiletheotherfivedatacloneservices(thatis,Gionee,Nokia,OnePlus,OPPO,andXiaomi)usetheSDcardasbufferforintermediatedata.Thisleadstoatemporaryfileretrievingattack(seedetailsinSec-tion4.3).4.2.2DataTransmission.Wefoundthattherearesignificantdif-ferencesbetweendatatransmissionprotocolsadoptedbyeachdatacloneservice(seethelasttwocolumnsofTable4).ThedatacloneservicesofGionee,Nokia,OnePlus,OPPO,andXiaomiadopttheirproprietary,TCPbasedprotocols.ThedatacloneservicesofHuawei,Motorola,andVivousemultipleprotocolstotransferdifferenttypesofdata.TheHuaweidatacloneserviceusestheFileTransferProto-col(FTP)totransferuserdata,acustomizedUDP-basedheartbeatprotocoltokeepalong-livedconnection,andaproprietaryTCP-basedprotocoltosendcontrolcommands.TheMotoroladatacloneserviceutilizesthestandardHTTPprotocoltotransfercommunica-tionrecordsandaTCP-basedproprietaryprotocoltotransferfilesstoredontheSDcard.TheVivodatacloneserviceutilizestheHTTPprotocoltotransferuserdatawhileanadditionalWebSocket-basedheartbeatprotocolisusedtomaintaintheconnection.WiththehelpofPoirot,wesuccessfullylocatedthecodesnip-petsrelatedtodatapackinganddatasending/receivinginalleightdatacloneapps.Wethenconductedamanualreverseengineeringtorecovertheformatsoftransferreddata.Forthedatacloneser-vicesofNokiaandGionee,thetransferreddataareserializedusingwriteObject.TheNokiadatacloneserviceseparatescommunicationsessionsintometadatasessionsandrawcontentsessions,whiletheGioneedatacloneservicecombinesthemetadataandthecontentoftransferreddatainthesamesession.ThedatacloneservicesofOnePlusandOPPOshareasimilarsolutionthattransfersuserdatawithoutcompressingthem.ThedifferenceisthattheOPPOdatacloneserviceusesonlyonesessiontosendalldatawhiletheOnePlusdatacloneserviceestablishesseveralsessionstotransferdatapayloadandothermetadata,respectively.Thedatacloneser-viceofXiaomitransfersuserdatainboththetext-formatandthebinary-format.Thetext-formatuserdatacontainJSON-serializedcontrolcommandsandfilemetadata,andthebinary-formatfilescontaintherawcontentofthetransferreddata.ThedatacloneservicesofMotorolatransfersdata(SDcardfileswithTCP,commu-nicationrecordswithHTTP)withoutanypacking.TheVivodatacloneserviceadoptsadatatransmissionwithHTTPtotransferdifferentdatafilesseparately,andpartofthedataarepacked(me-diadataarecompressedasa.zipfile,andappdataarepackedasfileswithAndroidBackupformat).TheHuaweidatacloneservicepacksmostuser-generateddata(communicationrecords,appdata,systemsettings)intoSQLite3(.db)files,butitsendsAPKfilesandmediafilesdirectlyorarchivesthemasa.tarfile.Inshort,wefoundthatexporteddataandmetadata(i.e.,filepaths,filesizes,andchecksums)areencodedintodifferentfileswithcustomizedpackingformat.ButNONEOFTHEMencryptsthesefiles.Alleightservicesonlyrelyontheprotectionofthe7ServiceOn-deviceAttackNetwork-levelAttackGioneevulnerablevulnerableHuawei-partiallyvulnerableMotorolavulnerable-Nokia--OnePlusvulnerablevulnerableOPPOvulnerable-Vivo-vulnerableXiaomivulnerablevulnerable1326ACSAC 2020, December 7–11, 2020, Austin, USA
Siqi Ma, Hehao Li, Wenbo Yang, Juanru Li1, Surya Nepal, and Elisa Bertino
Table 4: Wi-Fi and protocol features of data clone services (Strings in red are constant SSIDs)
clone service adopts a data transmission with HTTP to transfer
different data files separately, and part of the data are packed (me-
dia data are compressed as a .zip file, and app data are packed as
files with Android Backup format). The Huawei data clone service
packs most user-generated data (communication records, app data,
system settings) into SQLite3 (.db) files, but it sends APK files and
media files directly or archives them as a .tar file.
In short, we found that exported data and metadata (i.e., file
paths, file sizes, and checksums) are encoded into different files
with customized packing format. But NONE OF THEM encrypts
these files. All eight services only rely on the protection of the
established private Wi-Fi network, and thus fail to guarantee data
confidentiality during their data clone process. In addition, we
checked how each service validates the integrity of transferred
data. Surprisingly, none of those data clone services executes a
robust data integrity validation: they either miss the data integrity
check or incorrectly implement it. Only Huawei and Xiaomi employ
data checksum validations (HMAC-SHA256 and CRC-32, respec-
tively) in their protocols, while the other services do not use any
checksum for integrity validation. And even though the Xiaomi ser-
vice attaches a CRC checksum to each transferred file, for some
unknown reasons the data clone app just ignores the check. Thus,
even if the transferred data does not match its CRC checksum, the
data clone app on pB still accepts it.
4.2.3 Wi-Fi Configuration. Our experiments inspected the follow-
ing three aspects of the established Wi-Fi network:
SSID randomness: By reverse engineering the data clone platform
apps, we found that most apps generate an SSID in a certain for-
mat. This SSID can be used as a fingerprint of its corresponding
data clone service. The SSID generation rules are shown in Table 4.
Among them, the services of Gionee, Vivo, and Xiaomi always gen-
erate constant SSIDs on the same device. The SSIDs generated by
other services follow certain rules; thus one can learn the patterns
of those services in advance and continuously scan the Wi-Fi sig-
nals to wait for a matched SSID. When an expected SSID is scanned,
it indicates that a data clone process is starting. Subsequently, the at-
tacker can try to circumvent the password authentication (see next
paragraph) and join the network and intercept messages exchanged
by the two vulnerable devices.
Password strength: We found that many data clone services do
not randomly generate Wi-Fi passwords. Instead, they adopt inse-
cure password generation rules. Table 4 lists the recovered Wi-Fi
password generation rules. In detail, only the data clone service of
Nokia implements a secure password generation (that is, it uses the
default configuration provided by the Android system ). For other
data clone services, we found the following flaws:
a) Predictable Passwords: The data clone service of Xiaomi gener-
ates the password by hashing the SSID and fetching the first four
bytes in hex format (e.g., “A1B2C3D4”). Any attacker could directly
calculate the password since both the SSID and the hash algorithm
are publicly known. The password used by the Gionee data clone
service is a hard-coded constant string in its platform app. The
Wi-Fi network established by Vivo data clone service is an open
WLAN without any password protection. The passwords created
by OnePlus and Huawei data clone services suffer from several issues.
First, both services provide partially-random passwords. Only four
digits (104 candidates) are random in the OnePlus data clone service,
while eight digits (108 candidates) are random in the Huawei data
clone service. A brute-force attack against the Wi-Fi network hand-
shake packet can allow the attacker to obtain the password within
at most 50 seconds, using a state-of-the-art GPU such as RTX 2080
Ti. Second, theOnePlus data clone service uses the system time as
the random seed, which has inadequate information entropy and is
easily to be guessed.
b) Passwords Leakage: We found that although the passwords
generated by the Oppo and Motorola data clone services are random
and unpredictable. the Android systems of the tested devices (ver-
sion below 8.0) provide a reflection mechanism to invoke the system
API getWiFiApConfiguration that allows any apps to query the SSID
and the password of the established Wi-Fi network. A third-party
app on the same device thus can easily obtain the password of the
private WLAN [23].
Connection restriction: We argue that the private Wi-Fi network
used in a data clone service should strictly validate the connected
devices. Unfortunately, we found that all the Wi-Fi networks except
Table4:Wi-Fiandprotocolfeaturesofdatacloneservices(StringsinredareconstantSSIDs)ServiceHotspotAPSSIDPasswdProtocolServerPortFixedPatternFixedPatternGioneesender✓AmiClone_DN✓"Lss19900716"TCP5024Huaweireceiver✗DN%nn%CloudClone✗nnnnnnnnFTP/TCP/UDP-Motorolareceiver✗DIRECT-pp-DN_iiiia✗pppppppTCP/HTTP6000Nokiareceiver✗AndroidShare_nnnn✗RandomUUIDTCP8988OnePlusreceiver✗DN_co_apllll✗llllnnnnTCP8940OPPOreceiver✗DN_co_apllll✓iiiiiiiiTCP8939Vivosender✓Vivo#DN#ii--HTTP/WebSocket10178Xiaomireceiver✓𝑠𝑡𝑟bDN✓SSID-relatedTCP57383-57386DN:devicenameordevicemodel;n:arandomnumber;p:arandomprintablecharactersuchasnumberorletter;l:arandomlowercaseletter;i:afixedcharacteroncegeneratedatfirsttime.aanexampleis“DIRECT-2k-XT1085_8e6e”inwhich“DIRECT”isafixedstring,“XT1085”isdevicemodel,“2k”isarandomstringthatchangesforeachtimeofexecutionand“8e6e”isafixedstring.bstrisadevice-specific,base64-encodedstring,whichisconstantforacertainsmartphone.establishedprivateWi-Finetwork,andthusfailtoguaranteedataconfidentialityduringtheirdatacloneprocess.Inaddition,wecheckedhoweachservicevalidatestheintegrityoftransferreddata.Surprisingly,noneofthosedatacloneservicesexecutesarobustdataintegrityvalidation:theyeithermissthedataintegritycheckorincorrectlyimplementit.OnlyHuaweiandXiaomiemploydatachecksumvalidations(HMAC-SHA256andCRC-32,respec-tively)intheirprotocols,whiletheotherservicesdonotuseanychecksumforintegrityvalidation.AndeventhoughtheXiaomiser-viceattachesaCRCchecksumtoeachtransferredfile,forsomeunknownreasonsthedatacloneappjustignoresthecheck.Thus,evenifthetransferreddatadoesnotmatchitsCRCchecksum,thedatacloneappon𝑝𝐵stillacceptsit.4.2.3Wi-FiConfiguration.Ourexperimentsinspectedthefollow-ingthreeaspectsoftheestablishedWi-Finetwork:SSIDrandomness:Byreverseengineeringthedatacloneplatformapps,wefoundthatmostappsgenerateanSSIDinacertainfor-mat.ThisSSIDcanbeusedasafingerprintofitscorrespondingdatacloneservice.TheSSIDgenerationrulesareshowninTable4.Amongthem,theservicesofGionee,Vivo,andXiaomialwaysgen-erateconstantSSIDsonthesamedevice.TheSSIDsgeneratedbyotherservicesfollowcertainrules;thusonecanlearnthepatternsofthoseservicesinadvanceandcontinuouslyscantheWi-Fisig-nalstowaitforamatchedSSID.WhenanexpectedSSIDisscanned,itindicatesthatadatacloneprocessisstarting.Subsequently,theat-tackercantrytocircumventthepasswordauthentication(seenextparagraph)andjointhenetworkandinterceptmessagesexchangedbythetwovulnerabledevices.Passwordstrength:WefoundthatmanydatacloneservicesdonotrandomlygenerateWi-Fipasswords.Instead,theyadoptinse-curepasswordgenerationrules.Table4liststherecoveredWi-Fipasswordgenerationrules.Indetail,onlythedatacloneserviceofNokiaimplementsasecurepasswordgeneration(thatis,itusesthedefaultconfigurationprovidedbytheAndroidsystem).Forotherdatacloneservices,wefoundthefollowingflaws:a)PredictablePasswords:ThedatacloneserviceofXiaomigener-atesthepasswordbyhashingtheSSIDandfetchingthefirstfourbytesinhexformat(e.g.,“A1B2C3D4”).AnyattackercoulddirectlycalculatethepasswordsinceboththeSSIDandthehashalgorithmarepubliclyknown.ThepasswordusedbytheGioneedatacloneserviceisahard-codedconstantstringinitsplatformapp.TheWi-FinetworkestablishedbyVivodatacloneserviceisanopenWLANwithoutanypasswordprotection.ThepasswordscreatedbyOnePlusandHuaweidatacloneservicessufferfromseveralissues.First,bothservicesprovidepartially-randompasswords.Onlyfourdigits(104candidates)arerandomintheOnePlusdatacloneservice,whileeightdigits(108candidates)arerandomintheHuaweidatacloneservice.Abrute-forceattackagainsttheWi-Finetworkhand-shakepacketcanallowtheattackertoobtainthepasswordwithinatmost50seconds,usingastate-of-the-artGPUsuchasRTX2080Ti.Second,theOnePlusdatacloneserviceusesthesystemtimeastherandomseed,whichhasinadequateinformationentropyandiseasilytobeguessed.b)PasswordsLeakage:WefoundthatalthoughthepasswordsgeneratedbytheOppoandMotoroladatacloneservicesarerandomandunpredictable.theAndroidsystemsofthetesteddevices(ver-sionbelow8.0)provideareflectionmechanismtoinvokethesystemAPIgetWiFiApConfigurationthatallowsanyappstoquerytheSSIDandthepasswordoftheestablishedWi-Finetwork.Athird-partyapponthesamedevicethuscaneasilyobtainthepasswordoftheprivateWLAN[23].Connectionrestriction:WearguethattheprivateWi-Finetworkusedinadatacloneserviceshouldstrictlyvalidatetheconnecteddevices.Unfortunately,wefoundthatalltheWi-FinetworksexceptfortheoneestablishedbyHuaweidonotrestrictthenumberofconnecteddevices.Inaddition,noneoftheeightdatacloneser-vicesemployaphone-to-phoneauthenticationandthusanymobilephonewiththepasswordcouldjointheWLAN.Thiscouldleadtoasandboxdataextractionattack(seeSection4.3).4.3AttacksTodemonstratehowtheseinsecureimplementationsthreatuserdataprivacy,wedesignedtwotypesofattack:aon-deviceattackandanetwork-levelattack.Wefirstdefinedsevenessentialrequire-mentsthatasecureWi-Fihotspotbaseddatacloneserviceshouldsatisfy.Table5listsforeachconsidereddatacloneservicethere-quirementssatisfiedbythedatacloneservice.Asshowninthe8327Certified Copy? Understanding Security Risks of Wi-Fi Hotspot based Android Data Clone Services
ACSAC 2020, December 7–11, 2020, Austin, USA
Table 5: Security overview of the analyzed data clone services
for the one established by Huawei do not restrict the number of
connected devices. In addition, none of the eight data clone ser-
vices employ a phone-to-phone authentication and thus any mobile
phone with the password could join the WLAN. This could lead to
a sandbox data extraction attack (see Section 4.3).
4.3 Attacks
To demonstrate how these insecure implementations threat user
data privacy, we designed two types of attack: a on-device attack
and a network-level attack. We first defined seven essential require-
ments that a secure Wi-Fi hotspot based data clone service should