SQL注入攻击与防御（第2版）
IIS7.0的ASPNET集成模式通过将ASPNET请求管道与IIS核心请求管道相结合
来扩展这一能力。从本质上讲，可以将ASPNET的HtpModule集成到IS中并拥有对
所有请求和响应的控制权（而在之前的IIS版本中，只有使用ISAPI过滤器才能实现这种
控制).这为HttpModule赋予了进行全面的请求和响应处理的能力，并且SPF这样的模
块可以通过转换响应内客来向非ASPNET的Web应用提供不可编辑的输入保护，要想
获取关于SPF提供的这种保护的更多信息，请参阅9.2.3节“不可编辑与可编辑的输入
保护
3.使用脚本语言实现过滤器模式
对于Web脚本语言来说，实现过滤器模式会更加困难。PHP和经典ASP等技术均未提供
内置的接口来在页面执行之前/之后挂钩(hook）请求/响应的处理。可以使用Web服务器过滤器，
获取详细信息）来保护易受攻击的经典ASP应用。不过，修改配置需要Web服务器上的管理员
权限，这一要求有时无法满足或者不是很方便。此外，您有时会因为9.2节“使用运行时保护”
开头讨论的原因面不想修改代码。
就 PHP Web 应用而言，可以在 pbhp.ini 文件中利用 auto_prepend_file 和 auto_append_file 配
置指令，这些指令指向那些在每个请求的PHP脚本执行之前和之后才执行的PHP文件。添加
的逻辑在各种HTTP请求集合（查询字符串、POST、cookie、头等）间循环，必要时可以进行验
证和(或)日志记录。
另一种用于PHP和经典ASP应用的方法是使用“包含文件(includefile)”。这需要通过在
每个应用程序页面添加 include指令来修改代码。同样，被包含的逻辑也在各种HTTP请求集
合间循环，必要时也可以进行验证和（或）日志记录。
4.过滤Web服务消息
务。通过输入过滤器可以对方法参数执行验证并记录SQL注入企图，还可以使用输出过滤器
阻止错误的细节，比如在 SOAP错误消息的错误原因中经常泄露的信息。例如，.NET Web Service
和Apache Axis平台提供了过滤内部及外泄消息的机制。
ModSecurity也可以处理带内(inbound)XML消息以便使用XMLTARGET执行验证和日志
记录。可以使用XPATH或者根据模式（schema）或 DTD(Document Type Definition，文档类型定
义）文件来执行验证，还可以考虑商用的XML防火墙。不过，这些通常是网络设备。如果只是
寻求SQL注入保护，那么有可能出现过度杀伤。
9.2.3不可编辑与可编辑的输入保护
几乎每一种过滤器实现均利用了黑名单保护，而应对SQL注入时功能更强大且更有效的
白名单验证则不太流行且配置起来通常比较复杂。这可能因为为每个请求参数定义准确匹配
(例如，白名单）是一项令人畏惧的任务（即便存在学习模式)。对于排除自由格式文本的输入(比
如文本框)来说，情况更是如此。
336
---
## Page 351
第9章平台层防御
另一种值得考虑的输入验证策略是将应用程序的输入分成可编辑的和不可编辑的两类，并
且锁定不可编辑的输入以便无法操作它们。不可编辑输入是指最终用户不需要直接修改的输
入，比如隐藏表单字段、URI和查询字符串参数、cookie等。该策略隐含的原理是：应用程序
应该只允许用户执行用户接口暴露给他们的动作。其思想是：在运行时利用HTTP响应以区分
所有合法请求（表单和链接）并收集每个可能请求的状态，之后再根据存储的状态信息来验证接
下来的请求。对于很多应用程序来说，它们接收的大部分输入是不可编辑输入。因此，如果能
够在运行时自动锁定它们，那么接下来就可以将精力集中到全面验证可编辑输入上，这通常更
容易处理。
实现这种策略的技术范例是HDIV(HTTP Data Integrity Validator，HTTP数据完整性验证器)
和 SPF。可以使用HDIV保护大多数遵循MVC(Model-View-Controller)模式的J2EEWeb应用。
可以从 www.hdiv.org 上下载到 HDIV。可以使用 SPF 保护运行在 IIS 6.0上的 ASP.NET Web 应用。
不过，可以利用SPF以真正保护任何运行在IIS7.0上的Web应用，请参考前面的“工具与陷阱”
“使用ASP.NET和ⅡIS 保护Web应用”以获取更多信息。可以从http://spf.codeplex.com上
下载 SPF。
9.2.4ORL策略与页面层策略
我们来看一些其他的在不修改源代码的前提下，为易受攻击的URL或页面打虚拟补丁的
技术。
1.页面覆写（overide）
如果页面易受攻击且需要替换，那么可以创建一个在运行时提交的替代页面或类，通过修
改Web应用配置文件中的配置可以实现这种替换。在ASPNET应用中，则可以使用HTTPhandler
（处理程序）实现这一任务。
下面展示了一个自定义HTTPhandler的配置，它用于处理发送给PageVulnToSqllLaspx页
面而非易受攻击页面的请求。替换后的handler类通过一种安全的方式来实现原始页面逻辑，
其中包括对请求参数的严格验证以及对安全数据访问对象的使用：
Cadd verb="* #
path="PageVulnToSqlI .aspx"
type="Chapter9,Examples,SecureAspxHandler, Subclass*
validate="false" />
可以在J2EE Web应用的部署描述器(Deployment Descriptor)中使用类似的方法。可以将易
受攻击的URL映射到一个通过安全方式处理请求的servlet上，如下所示：
SecureServlet
chapter9.examples.SecureServletClass
ServletVulnToSqli--)
337
---
## Page 352
SQL注入攻击与防御（第2版）
Cservlet-name>SecureServlet
/ServletVulnToSqli
2. URL重写
URL重写（rewrite）是一种与页面覆写（override）类似的技术。可以通过配置Web服务器或应
用框架来接收那些发送给易受攻击页面或URL的请求，并将它们重定向到该页面的替代版本。
页面的新版本通过一种安全的方式来实现原始页面逻辑。应该在服务器端实现这种重定向以保
持与客户端的无缝相连。根据Web服务器和应用平台的不同，可通过多种方法来实现该任务。
Apache的 mod_rewrite 模块和.NET框架的 urlMappings元素就是两个示例。
3.资源代理与封装
可以将资源代理与封装和页面覆写或URL重写结合使用，以便将替换页面需要的自定义
编码数量降至最低。替代页面在处理重写请求时会循环访问请求参数（查询字符申、POST、
cookie等）并执行必需的验证。如果确认请求是安全的，那么接下来就允许通过内部服务器请求
来将该请求传递给易受攻击页面。易受攻击页面会处理该输入并执行所需要的谊染。由于替代
页面已经执行了必需的验证，因而通过这种方式向易受攻击页面传递输入是可行的。从本质上
看，替代页面对易受攻击页面进行了封装，但不需要复制逻辑。
9.2.5面向方面编程
面向方面编程（Aspcct-Oriented Programming，AOP）是一种构建可应用到应用程序范围内的
通用可重用例程的技术，在开发过程中，它有利于核心应用程序逻辑和通用、重复任务（输入
验证、记录日志、错误处理等）的分离。运行时，可以使用AOP来热补(hot-patch）易受SQL注
入攻击的应用程序，也可以无须修改底层源代码就直接将入侵检测和日志审查功能嵌入到应用
程序中。安全逻辑的集中化与前面介绍的截断过滤器类似，不过可以很好地将AOP的益处扩
展至Web层之外。可以将安全的方面应用到数据访问类、胖客户端应用和中间层组件（比如
EJB(Enterprise JavaBcan))中。例如，可以对不安全的动态SQL库（例如，executeQucryO)进行检
查、阻止查询执行以及将对后继补教努力的攻击型调用记录到日志中。存在很多AOP实现，
最常见的是Aspect、Spring AOP 和 Aspect.NET。
9.2.6应用程序入侵检测系统
可以使用传统的基于网络的入侵检测系统(Intrusion Detection Systems，IDS）来检测SQL注
入攻击。但这些IDS 距离应用和Web服务器非常远，通常不是最理想的选择。如果已经在网
络中运行了这样一种IDS，就可以利用它并将其作为防御的起始线。
前面讲过，可以将WAF作为一种非常好的IDS，因为它运行在应用层并且可针对受保护
的应用程序进行微调。大多数WAF都附带有一种被动模式和警告功能。在许多产品级的应用
环境中，会优先使用该功能中的安全过滤器或WAF。可以使用它们来检测攻击并向管理员发
出警告，管理员之后可以决定对该漏洞采取何种措施（例如，为特定的页面/参数组合启用恶意
请求阻塞或者应用虚拟补丁)。
338
---
## Page 353
第9章平台层防御
另一种选择是使用PHPIDS(http://phpids.org/)这样的嵌入式解决方案。PHPIDS不会过滤或
审查输入，它检测攻击并根据配置来采取措施。其覆盖范围从简单的日志记录到向开发团队发
送一封紧急情况的e-mail、为攻击者显示一条警告信息甚至是结束用户会话。
9.2.7数据库防火墙
我们介绍的最后一种运行时保护技术是数据库防火墙，它本质上是一种介于应用程序和数
据库之间的代理服务器。应用程序连接到数据库防火墙并像正常连接到数据库那样发送查询。
数据库防火墙分析预期的查询，如果认为是安全的，就将它传递给数据库服务器加以执行。反
之，如果认为是恶意的，就阻止运行该查询。数据库防火墙还可以通过以被动模式监视连接和
向管理员发出可疑行为警告来作为恶意数据库行为的应用层IDS。就SQL注入而言，数据库防
火墙潜在地与WAF一样高效。请思考Web应用发送给数据库的查询，它们大多是数量已知的
命令，而且结构也是已知的。可通过利用这些信息来配置一个灵活可调的规则集。该规则集根
据访问数据库时出现的异常或恶意查询的不同来采取恰当的措施（写日志、阻塞等)。在WAF
中锁定输入最困难的问题是恶意用户可以向Web服务器提交任何请求组合。在开源实现方面
的一个示例是GreenSQL，可以从www.greensql.net上下载到。
9.3确保数据库安全
攻击者拥有一个可利用的SQL注入漏润后，可以米取两种利用途径。他可以设法得到应
用程序数据本身，根据应用程序的不同，这些数据可能非常值钱。如果应用程序以不安全的方
式存储并处理个人标识信息或财务数据（比如银行账户和信用卡信息)，那么情况会大致如此。
此外，攻击者可能对修改数据库服务器以便渗透到内部受信任网络感兴趣。本节我们将介绍一
些限制未授权访问应用程序数据的方法，之后再介绍一些数据库服务器加固技术以便阻止权限
提升并限制访问超出目标数据库服务器语境（context）的服务器资源。首先应该完整地测试非产
品环境中介绍的步骤以避免破坏现有应用程序的功能。新应用程序的优点是，可以将这些建议
较早地构建到开发生命周期中，从面避免与不必要的特权功能有依赖关系。
9.3.1锁定应用程序数据
我们先介绍一些将SQL注入攻击的范围限制在应用程序所用数据库的技术，之后再介绍一
些约束访问的方法（即使攻击者已被成功沙箱化至应用程序使用的数据库)。
1.使用较低权限的数据库登录
应用程序连接到数据库服务器的登录语境应该是：拥有的许可权限仅仅只能执行需要的应
用程序任务。这种关键性防御可显著降低SQL注入风险，它限制了攻击者利用易受攻击的应
用程序时可以访问并执行的内容。例如，用于报表目的的Web应用（比如检查投资组合的业绩）
在理想情况下，应该使用只继承了产生该数据必需的对象（存储过程、表等）访间许可的登录权
限来访间数据库，其中包括对几个存储过程的EXECUTE许可和少数表列的SELECT许可，就
SQL注入面言，这样至少可以将可能的命令集限制在应用程序所用数据库的存储过程和表上，
并阻止超出这种语境的恶意SQL（比如从数据库中删除表或执行操作系统命令）。一定要记住，
339
---
## Page 354
SQL注入攻击与防御（第2版）
即便使用了这种缓和性控制，攻击者也仍然能够避开业务规则并查看其他用户的证券投资组合
数据。
为确定分配给数据库登录的许可，需寻找其角色成员并移除所有的非必要或特权角色（比
如公共或数据库管理员角色）。理想情况下，登录应该是一种或多种自定义应用程序角色中的
一员。接下来审查分配给自定义应用程序角色的许可以保证它们被正确锁定。在审查数据库的
过程中，常见的做法是寻找分配给只读访问权限的自定义应用程序角色的不必要UPDATE或
INSERT许可。可以使用数据库服务器平台自带的图形化管理工具或者借助查询控制台的SQL
来执行这些审查步骤及后续的清理步骤。
2.隔离数据库登录
对于既需要写访问也需要读访问数据库的应用程序，可以使用多个用户登录数据库，这是
对使用最小权限登录数据库的扩展。与大量只读功能或报表功能相比，对于具有相对较小写入
权限或更新功能的应用程序，通过在应用程序内将只读的SELECT功能与其他功能相隔离，比
如与要求具有广泛写入访问权限的功能（例如INSERT或UPDATE）隔离，可以提高应用程序的
安全性。接下来还可以将应用程序的每一部分都隔离在底层数据库的登录权限之下，并使该登
录权限仅仅具有实现其功能所必需的数据库访问权限。在应用程序的只读部分，这种办法可以
将任何SQL注入间题造成的影响减小到最小程度。
3.撒销public许可
每种数据库服务器平台均拥有通常称为公共（public）角色的默认角色（所有登录均属于这种
角色）。它包含一个默认的许可集，其中包括对系统对象的访问。攻击者使用这种默认访问查
询系统目录以描绘出数据库模式并瞄准那些对后续查询有吸引力的表（例如那些存储应用登录
凭证的表）。公共角色还被赋予了执行内置系统存储过程、包和用于管理目的的功能的许可。
通常是无法删除公共角色的，建议不要为公共角色赋予其他额外的许可，因为每种数据库
用户均会继承该角色的许可。应尽可能多地撒销系统对象的公共角色许可。此外，还必须撒销
为自定义数据库对象（比如应用程序使用的表和存储过程）赋予的公共角色的元余许可，除非存
在的许可拥有合理的理由。必要时可以为自定义角色分配数据库许可。可以使用这些角色来为
特定的用户和组赋予默认的访问级别。
4.使用存储过程
从安全角度看，应该将应用程序的SQL查询封装到存储过程中并且只能为这些对象赋予
EXECUTE许可。可以撤销底层对象的所有其他许可，比如SELECT、INSERT等。就SQL注
入而言，最低权限的数据库登录（应用程序使用的存储过程只拥有EXECUTE许可）可保证更难
向浏览器返回任意结果集。这并不能保证免受SQL注入的侵害，因为不安全的代码无法存在
于存储过程本身。此外，可通过其他方法获取结果集，比如使用SQL盲注技术。
5.使用强加密技术来保护存储的敏感数据
要想避免数据库中敏感数据的非授权查看，一种关键的控制就是使用强加密技术。可选的
方法包括存储数据的数学哈希（而非数据本身）或者存储使用对称算法加密后的数据。这两种情
况均应该使用功能强大的公共加密算法。应尽可能避免使用土法炮制的加密解决方案。
340
---
## Page 355
第9章平台层防御
如果不需要存储数据本身，那么请考虑一种正确的衍生数学哈希。这种情况的例子包括用
于验证用户身份的数据，比如口令或安全问题的答案。如果攻击者能够查者到存储这些数据的
表，那么将只有口令哈希会返回。攻击者必须经历耗时的破解口令哈希的练习才能获取真正的
凭证。哈希的另一个明显优点是消除了与加密相关的关键管理问题。要想保持一致的良好安全
行为，请确保所选的哈希算法不会被数学方法推导出且不易受冲突影响，比如MD5和SHA-1。
请参考诸如 NIST（http://csrc.nist.gov/groups/ST/hash/policy.html)这样的资源，以找到当前可以接
受的哈希算法集。
如果必须存储敏感数据，请使用强对称加密算法来进行保护，比如 AES（Advanced Encryption
Standard，高级加密标准）或三重DES(Data Encryption Standard，数据加密标准)。加密敏感数据
的主要挑战是将密钥保存到攻击者无法轻易访问到的位置，水远不要在客户端存储加密的密
钥。密钥存储最好的服务器端解决方案通常取决于应用程序的架构。如果密钥能够在运行时提
供，那么只有当它位于服务器的内存中时才会比较理想（根据应用程序框架的不同，密钥位于
内存中有时可以对其起到很好的保护作用）。不过，在大多数企业级应用环境中，运行时产生
密钥通常并不可行或实用。一种可能的解决方案是在应用服务器上受保护的位置存储密钥，这
样一米，攻击者就需要同时攻破数据库服务器和应用服务器才能解密它。在Windows环境中，
可以使用DPAPI(数据保护API)加密应用数据并利用操作系统来安全地存储密钥。另一种针对