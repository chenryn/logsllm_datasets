* [PHP手册：PDO](http://php.net/manual/en/book.pdo.php)
* [为什么你应该使用PHP的PDO访问数据库](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/)
* [Stack Overflow: PHP PDO vs 普通的mysql\_connect](http://stackoverflow.com/questions/1402017/php-pdo-vs-normal-mysql-connect)
* [Stack Overflow: PDO预处理语句足以防范SQL注入吗？](http://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection)
* [Stack Overflow: 在MySQL中使用SET NAMES utf8？](http://stackoverflow.com/questions/2159434/set-names-utf8-in-mysql)
PHP标签
-----
### 使用  。
有几种不同的方式用来区分PHP程序块：, , , 以及。对于打字来说，更短的标签更方便些，但唯一一种在所有PHP服务器上都一定能工作的标签 是。若你计划将你的PHP应用部署到一台上面的PHP配置你无法控制的服务器上，那么你应始终使用 。
若你仅仅是为自己编码，也能控制你将使用的PHP配置，你可能觉得短标签更方便些。但记住 可能会和XML声明冲突，并且实际上是ASP的风格。
无论你选择哪一种，确保一致。
**陷阱**
* 在一个纯PHP文件（例如，仅包含一个类定义的文件）中包含一个关闭?>标签时，确保其后 不会跟着任何换行。当PHP解析器安全地吃进跟在关闭标签之后的单个换行符时，任何其他的换行 都可能被输出到浏览器，如果之后要输出某些HTTP头，那么可能会造成混淆。
* 编写Web应用时，确保在关闭?>标签与html的标签之间不会留下换行。正确的HTML 文件中，标签必须是文件中的第一样东西—在其之前的任何空格或换行都会使其 无效。
**进一步阅读**
* [Stack Overflow: 可以使用PHP短标签吗？](http://stackoverflow.com/questions/200640/are-php-short-tags-acceptable-to-use)
自动加载类
-----
### 使用[spl\_autoload\_register()](http://php.net/manual/en/function.spl-autoload-register.php)来注册你的自动加载函数。
PHP提供了若干方式来自动加载包含还未加载的类的文件。老的方法是使用名为[\_\_autoload()](http://php.net/manual/en/function.autoload.php)魔术全局函数。然而你一次仅能定义一个\_\_autoload()函数，因此如果你的程序 包含一个也使用了\_\_autoload()函数的库，就会发生冲突。
处理这个问题的正确方法是唯一地命名你的自动加载函数，然后使用spl\_autoload\_register()函数 来注册它。该函数允许定义多个\_\_autoload()这样的函数，因此你不必担心其他代码的\_\_autoload()函数。
**示例**
**进一步阅读**
* [PHP手册：spl\_autoload\_register()](http://php.net/manual/en/function.spl-autoload-register.php)
* [Stack Overflow: 高效的PHP自动加载和命名策略](http://stackoverflow.com/questions/791899/efficient-php-auto-loading-and-naming-strategies)
从性能角度来看单引号和双引号
--------------
### 其实并不重要。
已有很多人花费很多笔墨来讨论是使用单引号（'）还是双引号（"）来定义字符串。 单引号字符串不会被解析，因此放入字符串的任何东西都会以原样显示。双引号字符串会被解析， 字符串中的任何PHP变量都会被求值。另外，转义字符如换行符\n和制表符\t在单引号字符串中 不会被求值，但在双引号字符串中会被求值。
由于双引号字符串在程序运行时要求值，从而理论上使用单引号字符串能提高性能，因为PHP 不会对单引号字符串求值。这对于一定规模的应用来说也许确实如此，但对于现实中一般的应用来说， 区别非常小以至于根本不用在意。因此对于普通应用，你选择哪种字符串并不重要。对于负载 极其高的应用来说，是有点作用的。根据你的应用的需要来做选择，但无论你选择什么，请保持一致。
**进一步阅读**
* [PHP手册：字符串](http://php.net/manual/en/language.types.string.php)
* [PHP基准](http://phpbench.com/)（向下滚动到引号类型(Quote Types)）
* [Stack Overflow: PHP中单引号字符串相比双引号字符串有性能优势么？](http://stackoverflow.com/questions/13620/speed-difference-in-using-inline-strings-vs-concatenation-in-php5)
define() vs. const
------------------
### 使用[define()](http://www.php.net/manual/en/function.define.php)，除非考虑到可读性、类常量、或关注微优化
习惯上，在PHP中是使用define()函数来定义常量。但从某个时候开始，PHP中也能够使用[const](http://php.net/manual/en/language.oop5.constants.php) 关键字来声明常量了。那么当定义常量时，该使用哪种方式呢？
答案在于这两种方法之间的区别。
1. define()在执行期定义常量，而const在编译期定义常量。这样const就有轻微的速度优势， 但不值得考虑这个问题，除非你在构建大规模的软件。
2. define()将常量放入全局作用域，虽然你可以在常量名中包含命名空间。这意味着你不能 使用define()定义类常量。
3. define()允许你在常量名和常量值中使用表达式，而const则都不允许。这使得define() 更加灵活。
4. define()可以在if()代码块中调用，但const不行。
**示例**
因为define()更加灵活，你应该使用它以避免一些令人头疼的事情，除非你明确地需要类 常量。使用const通常会产生更加可读的代码，但是以牺牲灵活性为代价的。
无论你选择哪一种，请保持一致。
**进一步阅读**
* [Stack Overflow: define() vs. const](http://stackoverflow.com/questions/2447791/define-vs-const)
* [PHP手册：常量](http://www.php.net/manual/en/language.constants.syntax.php)
* [Stack Overflow: define() vs. 变量](http://stackoverflow.com/questions/1225082/define-vs-variable-in-php)
缓存PHP opcode
------------
### 使用[APC](http://php.net/manual/en/book.apc.php)
在一个标准的PHP环境中，每次访问PHP脚本时，脚本都会被编译然后执行。一次又一次地花费 时间编译相同的脚本对于大型站点会造成性能问题。
解决方案是采用一个opcode缓存。opcode缓存是一个能够记下每个脚本经过编译的版本，这样 服务器就不需要浪费时间一次又一次地编译了。通常这些opcode缓存系统也能智能地检测到 一个脚本是否发生改变，因此当你升级PHP源码时，并不需要手动清空缓存。
有几个PHP opcode缓存可用，其中值得关注的有[eaccelerator](http://sourceforge.net/projects/eaccelerator/)， [xcache](http://xcache.lighttpd.net/)，以及[APC](http://php.net/manual/en/book.apc.php)。 APC是PHP项目官方支持的，最为活跃，也最容易安装。它也提供一个可选的类[memcached](http://memcached.org/) 的持久化键-值对存储，因此你应使用它。
**安装APC**
在Ubuntu 12.04上你可以通过在终端中执行以下命令来安装APC：
user@localhost: sudo apt-get install php-apc
除此之外，不需要进一步的配置。
**将APC作为一个持久化键-值存储系统来使用**
APC也提供了对于你的脚本透明的类似于memcached的功能。与使用memcached相比一个大的优势是 APC是集成到PHP核心的，因此你不需要在服务器上维护另一个运行的部件，并且PHP开发者在APC 上的工作很活跃。但从另一方面来说，APC并不是一个分布式缓存，如果你需要这个特性，你就 必须使用memcached了。
**示例**
**陷阱**
* 如果你使用的不是[PHP-FPM](https://phpbestpractices.org/#serving-php)（例如你在 使用[mod\_php](http://stackoverflow.com/questions/2712825/what-is-mod-php) 或[mod\_fastcgi](http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html)），那么 每个PHP进程都会有自己独有的APC实例，包括键-值存储。若你不注意，这可能会在你的应用 代码中造成同步问题。
**进一步阅读**
* [PHP手册：APC](http://php.net/manual/en/book.apc.php)
PHP与Memcached
-------------
### 若你需要一个分布式缓存，那就使用[Memcached](http://php.net/manual/en/book.memcached.php)客户端库。否则，使用APC。
缓存系统通常能够提升应用的性能。Memcached是一个受欢迎的选择，它能配合许多语言使用， 包括PHP。
然而，从一个PHP脚本中访问一个Memcached服务器，你有两个不同且命名很愚蠢的客户端库选择项：[Memcache](http://php.net/manual/en/book.memcache.php)和[Memcached](http://php.net/manual/en/book.memcached.php)。 它们是两个名字几乎相同的不同库，两者都可用于访问一个Memcached实例。
事实证明，Memcached库对于Memcached协议的实现最好，包含了一些Mmecache库没有的有用的特性， 并且看起来Memcached库的开发也最为活跃。
然而，如果不需要访问来自一组分布式服务器的一个Memcached实例，那就[使用APC](https://phpbestpractices.org/#opcode-cache)。 APC得到PHP项目的支持，具备很多和Memcached相同的功能，并且能够用作opcode缓存，这能提高PHP脚本的性能。
**安装Memcached客户端库**
在安装Memcached服务器之后，需要安装Memcached客户端库。没有该库，PHP脚本就没法与 Memcached服务器通信。
在Ubuntu 12.04上，你可以使用如下命令来安装Memcached客户端库：
user@localhost: sudo apt-get install php5-memcached
**使用APC作为替代**
查看[opcode缓存一节](https://phpbestpractices.org/#opcode-cache)阅读更多与使用APC作为 Memcached替代方案相关的信息。
**进一步阅读**
* [PHP手册：Memcached](http://php.net/manual/en/book.memcached.php)
* [PHP手册：APC](http://php.net/manual/en/book.apc.php)
* [Stack Overflow: PHP中使用Memcache vs. Memcached](http://stackoverflow.com/questions/1442411/using-memcache-vs-memcached-with-php)
* [Stack Overflow: Memcached vs APC，我该选择哪一个？](http://stackoverflow.com/questions/815041/memcached-vs-apc-which-one-should-i-choose)
PHP与正则表达式
---------