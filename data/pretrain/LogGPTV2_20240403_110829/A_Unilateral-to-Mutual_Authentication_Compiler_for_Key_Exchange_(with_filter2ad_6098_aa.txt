# Title: A Unilateral-to-Mutual Authentication Compiler for Key Exchange (with Applications to Client Authentication in TLS 1.3)

## Author: Hugo Krawczyk, IBM Research

### Abstract
We explore the development of "compilers" that transform unilaterally authenticated (UA) key-exchange protocols into mutually authenticated (MA) ones. We introduce a simple and efficient compiler and identify the class of UA protocols that can be upgraded to the MA model, which includes a significant and important subset. This question, though natural, has not been widely studied. Our work is partly motivated by the ongoing design of TLS 1.3, particularly the design of client authentication mechanisms, including post-handshake authentication. Our approach supports a general and modular analysis of these mechanisms, aided by the concept of "functional security," a generalization of key exchange models that may be of independent interest.

### 1. Introduction
A fundamental question in key-exchange (KE) protocols is how to convert a secure unilateral-authentication (UA) protocol, where only one party authenticates and the other remains anonymous, into a secure mutual-authentication (MA) protocol. Surprisingly, this question has received limited attention in complexity-based KE literature, as much of the research has focused on mutual authentication. In practice, however, the most widely used KE protocol, TLS, primarily uses unilateral (server-only) authentication with an optional upgrade to mutual authentication. 

In this work, we investigate this question within the context of complexity-theoretic models of KE, aiming for results that are both general and practically relevant, especially to the ongoing design of TLS 1.3. We develop compilers that extend secure unilateral key-exchange protocols into secure mutual key-exchange protocols, focusing on signature-based compilers where the client uses a digital signature for public-key authentication.

#### The SIGMAC Compiler
Our compiler, called SIGMAC (for SIGnature and MAC Compiler), is straightforward. To upgrade a unilateral protocol \(\Pi_1\) into a mutually authenticated \(\Pi_2\), after \(\Pi_1\) completes, the client sends a single message containing:
1. The client's signature on a portion of \(\Pi_1\)'s transcript.
2. A MAC value computed on the client and server's identities using a MAC key derived from \(\Pi_1\).

The design intuition is clear: while anyone can sign the transcript, and just MACing the identities is insufficient, the combination of a signature and a MAC ensures a binding between an identity and the knowledge of a key. Proving the security of the compiler, especially regarding what information should be signed, is non-trivial. However, we show that the compiler works for important classes of protocols, including those based on Diffie-Hellman exchanges. We introduce a notion called "transport replication security" (treplication security) to characterize the necessary conditions for the compiler to produce a provably secure mutually authenticated KE protocol.

By minimizing the information under the client's signature, we achieve more general results and allow the client to omit signing any information they do not want to make non-repudiable. For example, signing the server's identity can be safely omitted, preserving deniability against passive servers. Conversely, if the protocol contains specific information that needs explicit authentication, such as the negotiation of security properties, these must be included under the signature.

#### Use of MAC in SIGMAC
The use of a MAC function in the SIGMAC compiler is essential. Even if the client's signature covers both server and client identities, omitting the MAC, particularly the MACed client identity, invalidates the compiler's ability to produce a mutually authenticated protocol. The use of a MAC fits well with TLS and its Finished message.

### Application to TLS 1.3
While our main results are generally applicable, a timely application is the analysis of TLS 1.3. The TLS handshake protocol in current and prior versions is designed as a server-only authentication protocol with an optional extension to client authentication. This aligns perfectly with the need for a unilateral-to-mutual compiler.

The SIGMAC compiler captures the mechanism used in TLS, which combines a signature and a MAC (the latter referred to as the client's Finished message in TLS). A challenging aspect of TLS 1.3 is the allowance for post-handshake client authentication, where a session key, authenticated only by the server, is used to protect TLS data before the client authentication extension is applied. Our compiler approach helps analyze this setting, showing that upon successful client authentication, the exchanged and protected data enjoys mutual authentication security. This is crucial for understanding the security implications of late client authentication in TLS 1.3, including the validity of using the session key to encrypt the client authentication messages.

### Related Work
The literature on key-exchange protocols is extensive, but relatively few papers focus on unilateral authentication. Notable exceptions include Shoup's work on "anonymous protocols" and Halevi and Krawczyk's treatment of unilateral security in password protocols. Our approach is based on the Canetti-Krawczyk (CK) model, specialized for the unilateral case. Recent works, motivated by the analysis of TLS, have also studied unilateral authentication, but not the generic transformation from unilateral to mutual authentication.

Several works have presented authentication compilers for unauthenticated key-exchange protocols, but these often require changes to the original protocol or add unnecessary complexity. The SIGMA protocol, for instance, shows that each party signing the transcript and applying a MAC on their own identity is secure, but applying this technique to one party only does not result in a secure protocol.

### Conclusion
Our results are relevant to the analysis of client authentication in TLS 1.3, including post-handshake authentication and the use of session keys for encrypting client authentication messages. The functional generalization of the key exchange model we introduce provides a valuable tool for analyzing complex security questions. While familiarity with TLS 1.3 is not essential, our results are motivated by and applicable to the ongoing design of TLS 1.3.

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical depth and relevance of the original text.