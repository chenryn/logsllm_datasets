title:Binder, a Logic-Based Security Language
author:John DeTreville
Binder, a Logic-Based Security Language 
John DeTreville 
Microsoft Research 
PI:EMAIL 
Abstract 
1. Security languages
1
We introduce the concept of a security language, used 
to  express  security  statements  in  a  distributed  system. 
Most  existing  security  languages  encode  security  state-
ments  as  schematized  data  structures,  such  as  ACLs  and 
X.509  certificates.  In  contrast,  Binder  is  an  open  logic-
based  security  language  that encodes  security  statements 
as  components  of  communicating  distributed  logic  pro-
grams.  Binder  programs  can  be  more  expressive  than 
statements in standard security languages, and the mean-
ings  of  standard  security  constructs  and  operations  such 
as certificates and delegation are simplified and clarified 
by  their  formulation  in  Binder.  Translation  into  Binder 
has been used to explore the design of other new and ex-
isting security languages. 
Client
certificate
“John Smith is a full-
time BigCo employee.”
(signed, BigCo HR)
local policy
“I trust BigCo HR to
say who is a BigCo
employee.”
Service S
Resource R
ACL
“Full-time BigCo
employees can read
resource R.”
Figure 1. Certificates, policies, and ACLs
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
Access control decisions in a loosely-coupled distrib-
uted environment are driven by distributed security state-
ments.  As  shown in  the  example  in  Figure 1, these  state-
ments can be stored in a variety of places: in signed cer-
tificates that can flow among the parties; in policies local 
to  the  services;  in  access  control  lists  (ACLs)  associated 
with  the  individual  resources;  and  perhaps  elsewhere. 
When  a  client  requests  an  operation  on  a  resource,  the 
service controlling that resource—here, service S controls 
resource R—uses the security statements available to it to 
determine  whether  to grant  or  deny  the requested  access. 
In  this  example,  service  S  would  presumably  allow  John 
Smith to read resource R. 
Traditional systems store security statements in a va-
riety  of  data  structures. The  certificate  shown here might 
be an X.509 certificate that attests to an identity [12]; the 
local  policy  might  enumerate  the  X.509  roots  that  the 
service  will trust to certify identities; and the  ACL might 
be  an  ordered  list  of  pairs  that  map  users’  identities  to 
their  access  rights.  A  predefined  decision  procedure 
matches  these  data  structures  against  the  identity  of  any 
client  requesting  an  operation,  thereby  verifying  the  cli-
ent’s access rights. 
However these security statements are encoded, they 
must  necessarily  obey  some  formal  schema.  We  can  say 
that this schema and its accompanying decision procedure 
define a security language, and that our certificates, poli-
cies,  ACLs,  etc.,  are  formed  from  security  statements 
written  in  our  security  language  and  interpreted  by  its 
decision  procedure.  For  example,  since  X.509  specifies 
the  form  and  meaning  of  X.509  certificates,  X.509  is  a 
security language. SDSI and SPKI are other security lan-
guages, as are PolicyMaker and KeyNote, and so on. 
to  reprint/republish 
©  2002  IEEE.  Personal  use  of  this  material  is  permitted.  However, 
permission 
for  advertising  or 
promotional purposes  or  for creating new  collective  works  for resale  or 
redistribution to servers or lists, or to reuse any copyrighted component 
of this work in other works must be obtained from the IEEE. 
this  material 
Many  existing  security  languages  are  designed  for 
very  specific  domains—like  X.509,  meant  to  control  ac-
cess  to  an  X.500  database—and  each  can  express  some 
statements  more  readily  than  others.  X.509  excels  at 
building  chains  of  Certification  Authorities  (CAs).  SDSI 
lets us define and refer to principals and groups of princi-
pals  (e.g.,  the  group  of  all  company  employees).  Policy-
Maker  is  a  language  for  encoding  a  service’s  local  secu-
rity policy. Inevitably, in any given domain, some security 
languages are more expressive than others. 
If  we  are  designing  a  closed  system  with  known  re-
quirements, we may be able to choose a minimalist secu-
rity  language,  closely  matching  its  design  to  our  needs. 
Conversely,  if  we  are  designing an  open  system  that  will 
be  used  in  unexpected  ways  and  that  will  evolve  in  un-
known directions, then it might be better to make our lan-
guage more expressive than currently needed. 
This  paper  presents  the  design  of  a  new  logic-based 
security  language  for  open  systems—called Binder—that 
is intended to be more expressive than most existing secu-
rity languages, while remaining practical. Binder does not 
directly  implement  higher-level  security  concepts  like 
delegation,  but  provides  flexible  low-level  programming 
tools  to  do  so.  Our  experience  with  Binder  suggests  that 
logic programming can be a useful foundation for a prac-
tical security language, and that it can also help us explore 
new  and  existing  security  languages.  The  section  below 
on  related  work  draws  more  specific  comparisons  with 
existing security languages. 
2. Datalog for authorization 
Binder is an  extension  of  the  datalog logic-program-
ming language, which can be decided in polynomial time 
[17].  (Datalog  is  a  restricted  subset  of  the  well-known 
Prolog  logic-programming  language  [15].)  An  EBNF 
grammar of Binder may be found in Appendix A. Binder 
extends  datalog  with  constructs  for  communicating  se-
curely  across  a  distributed  environment,  but  we  use  the 
datalog  subset  of  Binder in  this  section to  write  local  se-
curity programs that do not communicate. 
Let  us  imagine  that  John  Smith  wishes  to  read  re-
source R. By convention, we will grant this access if and 
only if we can derive the authorization atom 
    can(john_smith, read, resource_r) 
(An  atom  combines  a  predicate  and  one  or  more  terms. 
Here,  can  is  a  predicate  and  john_smith,  read,  and 
resource_r  are  constant  terms.)  A  simple  ACL  for  re-
source  R  might  be  represented  by  the  (tedious)  datalog 
program 
can(john_smith, read, resource_r). 
can(john_smith, write, resource_r). 
can(fred_jones, read, resource_r). 
… 
at  service  S.  (Statements  of  this  form,  with  a  single 
atom—a single predicate applied to zero or more terms—
are  called  facts.)  Since  our  authorization  atom  is  part  of 
this program, it is trivially derivable and access is granted. 
To  raise  the  level  of  allowable  abstraction,  existing 
security  languages  like  SDSI  also  let  us  define  groups  of 
principals (like John Smith and Fred Jones). We can also 
model  groups  in  datalog,  as  in  the  different  datalog  pro-
gram 
can(X, read, resource_r) :- 
  employee(X, bigco). 
employee(john_smith, bigco). 
… 
The  first  statement  is  a  rule  stating  that  principal  X—a 
variable  term—can read resource  R  if  X  is  a  BigCo  em-
ployee;  the  atom  on  the  left  is  derivable  if  the  atom  or 
atoms  to  the  right  also  are.  (Variables  begin  with  upper-
case letters, while constants begin with lower-case letters.) 
The second statement is a fact, stating that John Smith is a 
BigCo employee.  Again, our authorization atom is deriv-
able with X=john_smith, and access is granted. 
While  datalog  can  express  abstractions  that  are  also 
expressible  in  existing  security  languages,  like  groups,  it 
can express more powerful and more general concepts too. 
Consider the following datalog program. 
can(X, read, resource_r) :- 
  employee(X, bigco), 
  boss(Y, X), 
  approves(Y, X, read, resource_r). 
employee(john_smith, bigco). 
boss(fred_jones, john_smith). 
approves(fred_jones, john_smith, 
         read, resource_r). 
… 
The  first  statement  is  a  rule  stating  that  principal  X  can 
read resource R if X is a BigCo employee and X’s boss (Y) 
approves. Using new predicates, datalog lets us define and 
use  new  relations as needed  to  express  our  desired  secu-
rity  policies.  In  contrast,  SDSI’s  existing  mechanism  for 
defining groups is not powerful enough to model this ex-
ample policy. 
Datalog  programs  can  encode  a  wide  range  of  secu-
rity policies, but an open distributed system with multiple 
administrative  domains  will  have  multiple  interoperating 
policies.  It  is  no  more  practical  to  encode  these  various 
interoperating policies in a single datalog program than it 
would  be  to  encode  them  in  a  single  global  database. 
(What single party could maintain the program or the da-
tabase? How would everyone agree?) Instead, Binder lets 
separate  programs  (separate  databases)  interoperate  cor-
rectly and securely. 
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
context_1
statement
export
certificate
statement
(signed: context_1)
import
context_2
context_1 says
statement
Figure 2. Communicating contexts
3. Communicating contexts 
Each component of a distributed environment has its 
own  local  Binder  context  with  its  own  Binder  program, 
where certain local Binder atoms are derivable. A service 
uses  its  local  Binder  context  to  make  its  local  authoriza-
tion decisions, and Binder provides extensions to datalog 
for these distributed contexts to work together. 
Binder contexts communicate via signed certificates, 
as  shown  in  Figure  2.  Each  Binder  context  has  its  own 
cryptographic  key  pair;  the  exporting  context  uses  the 
private key (which it keeps secret) to sign statements, and 
the  corresponding  public  key—used  to  verify  the  signa-
ture  at  the  importing  context—also  serves  to  name  the 
context, as in SDSI/SPKI. 
A  statement  from  one  Binder  context—fact,  rule,  or 
derivable atom—may be exported into a signed certificate, 
BCL HR
certificate c1
“John Smith is a
BCL employee.”
export
“John Smith is a BCL
employee.” (signed:
BCL HR)
import
BigCo HR
“I trust BCL HR
to say who is a
BCL employee.”
“All BCL
employees are
BigCo
employees.”
certificate c2
“John Smith is a
BigCo employee.”
(signed: BigCo HR)
certificate c3
export
“I trust BCL HR to say
import
who is a BCL
employee.” (signed:
BigCo HR)
certificate c4
“All BCL employees
are BigCo
employees.” (signed:
BigCo HR)
and  later  imported  from  the  certificate  into  another  con-
text.  Imported  statements  are  automatically  quoted  using 
says to distinguish them from local assertions. If the pub-
lic  key  rsa:3:c1ebab5d  belongs  to  BigCo  HR—real 
keys are much longer, of course—then the statement 
  employee(john_smith, bigco) 
exported by BigCo HR would be imported as 
  rsa:3:c1ebab5d says 
    employee(john_smith, bigco). 
(Appendix  B  contains  a  more  precise  explanation  of  the 
rules  for  importing  statements.)  If  the  importing  context 
has a rule like 
  employee(X, bigco) 
    :- rsa:3:c1ebab5d says 
         employee(X, bigco). 
then employee(john_smith, bigco) is also derivable 
there. In the absence of any such rule, the imported state-
ment will by default be inert and will not take further part 
in the decision procedure. 
4. Delegation and trust 
In  Binder,  statements  from  any  Binder  context  may 
be exported and later imported. Since imported statements 
are automatically quoted with says, the local context can 
treat  imported  statements  differently  from  local  state-
ments. The controlled importation of signed statements is 
Binder’s  mechanism  for  “trust”  (as  in,  “Service  S  trusts 
BigCo  HR”)  or  “delegation”  (“Service  S  delegates  the 
identification  of  BigCo  employees  to 
BigCo  HR”)  or  “speaks-for” (“BigCo 
HR speaks for service S”); Binder lets 
us  implement  an  unambiguous  logic-
based policy with the same effect. 
Service S
“I trust BigCo HR
employee.”
Let’s  extend  the  example  from 
Figure 1 by adding an additional level 
of  indirection.  In  Figure  3,  BigCo  HR 
has  delegated  the  identification  of  BigCo  Labs  (BCL) 
employees to BCL HR, and all BCL employees are BigCo 
employees.  Our  goal  is  still  to  convince  service  S  that 
John  Smith  is  a  BigCo  employee,  but  the  necessary  in-
formation can flow along multiple distinct paths in differ-
ent scenarios. 
to say who is a
BigCo
Figure 3: Possible certificate flow
In  one  scenario,  BCL  HR  exports  certificate  c1  to 
BigCo  HR,  whose  local  policy  allows  its  import.  BigCo 
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
HR now concludes that John Smith is a BigCo employee, 
and exports certificate c2 to service S, whose local policy 
allows  its  import.  Service  S  now  concludes  that  John 
Smith is a BigCo employee. 
Alternatively,  BCL  HR  can  export  certificate  c1  di-
rectly to service S, and BigCo HR can export certificates 
c3 and c4 also directly to service S, which can now con-
clude, as above but on its own, that John Smith is a BigCo 
employee.  Here,  we  model  a  traditional  “chain  of  trust”: 
service  S  trusts  BigCo  HR  to  establish  a  policy,  while 
BigCo HR trusts BCL HR. 
5. Example of Binder programs 
This section shows the complete Binder programs for 