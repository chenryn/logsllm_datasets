√
√
√
√
√
√
SMS
√ †
√ †
√ †
√ †
√ †
√
√
√
√ ‡
√ †
√ ‡
√ †
√
√ ‡
√ ‡
√ †
√ †
√ †
√
√
√ †
√ †
√ ‡
√
√ †
√
√ ‡
√ ‡
28
571
Block
SMS
SMS
Phone
Number
User
Account
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
17
315
13
138
15
563
3
43
ADRD
AnserverBot
Asroot
BaseBridge
BeanBot
BgServ
CoinPirate
Crusewin
DogWars
DroidCoupon
DroidDeluxe
DroidDream
DroidDreamLight
DroidKungFu1
DroidKungFu2
DroidKungFu3
DroidKungFu4
DroidKungFu5
DroidKungFuUpdate
Endofday
FakeNetﬂix
FakePlayer
GamblerSMS
Geinimi
GGTracker
GingerMaster
GoldDream
Gone60
GPSSMSSpy
HippoSMS
Jifake
jSMSHider
KMin
Lovetrap
NickyBot
Nickyspy
Pjapps
Plankton
RogueLemon
RogueSPPush
SMSReplicator
SndApps
Spitmo
TapSnake
Walkinwat
YZHC
zHash
Zitmo
Zsone
number of families
number of samples
√
√
√
√
√
√
6
389
8
440
1
4
1
8
4
363
27
1171
1
1
4
246
a permission-guarded function sendTextMessage that
allows for sending an SMS message in the background
without user’s awareness. We are able to conﬁrm this type of
attacks targeting users in Russia, United States, and China.
The very ﬁrst Android malware FakePlayer sends SMS
message “798657” to multiple premium-rate numbers in
Russia. GGTracker automatically signs up the infected user
to premium services in US without user’s knowledge. zSone
sends SMS messages to premium-rate numbers in China
without user’s consent. In total, there are 55 samples (4.4%)
in Table V) that
falling in 7 different families (tagged with
send SMS messages to the premium-rate numbers hardcoded
‡
in the infected apps.
Moreover,
some malware choose not
to hard-code
premium-rate numbers. Instead, they leverage the ﬂexible
remote control to push down the numbers at runtime. In our
†
dataset, there are 13 such malware families (tagged with
in Table V). Apparently, these malware families are more
stealthy than earlier ones because the destination number
will not be known by simply analyzing the infected apps.
In our analysis, we also observe that by automatically
subscribing to premium-rate services, these malware families
need to reply to certain SMS messages. This may due to the
second-conﬁrmation policy required in some countries such
102
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
0
200
400
600
800
1000
1200
0
200
400
600
800
1000
1200
INTERNET
READ_PHONE_STATE
ACCESS_NETWORK_STATE
WRITE_EXTERNAL_STORAGE
ACCESS_WIFI_STATE
READ_SMS
RECEIVE_BOOT_COMPLETED
WRITE_SMS
SEND_SMS
RECEIVE_SMS
VIBRATE
ACCESS_COARSE_LOCATION
READ_CONTACTS
ACCESS_FINE_LOCATION
WAKE_LOCK
CALL_PHONE
CHANGE_WIFI_STATE
WRITE_CONTACTS
WRITE_APN_SETTINGS
RESTART_PACKAGES
847
804
790
688
658
553
499
483
480
457
432
425
424
398
374
349
333
1232
1179
INTERNET
ACCESS_NETWORK_STATE
1023
WRITE_EXTERNAL_STORAGE
READ_PHONE_STATE
VIBRATE
ACCESS_FINE_LOCATION
ACCESS_COARSE_LOCATION
488
433
287
285
263
1122
913
WAKE_LOCK
218
RECEIVE_BOOT_COMPLETED
ACCESS_WIFI_STATE
137
134
CALL_PHONE
114
CAMERA
READ_CONTACTS
73
71
GET_TASKS
60
GET_ACCOUNTS
SET_WALLPAPER
SEND_SMS
WRITE_SETTINGS
CHANGE_WIFI_STATE
RESTART_PACKAGES
54
49
43
39
34
33
(a) Top 20 Permissions Requested By 1260 Malware Samples
(b) Top 20 Permissions Requested by 1260 Top Free (Benign) Apps on
the Ofﬁcal Android Market
Figure 5. The Comparison of Top 20 Requested Permissions by Malicious and Benign Apps
as China. Speciﬁcally, to sign up a premium-rate service, the
user must reply to a conﬁrming SMS message sent from the
service provider to ﬁnalize or activate the service subscrip-
tion. To avoid users from being notiﬁed, they will take care
of replying to these conﬁrming messages by themselves. As
an example, RogueSPPush will automatically reply “Y” to
such incoming messages in the background; GGTracker will
reply “YES” to one premium number, 99735, to active the
subscribed service. Similarly, to prevent users from knowing
subsequent billing-related messages, they choose to ﬁlter
these SMS messages as well. This behavior is present in
a number of malware, including zSone, RogueSPPush, and
GGTracker.
Besides these premium-rate numbers, some malware also
leverage the same functionality by sending SMS messages
to other phone numbers. Though less serious than previous
ones, they still result in certain ﬁnancial charges especially
when the user does not have an unlimited messaging plan.
For example, DogWars sends SMS messages to all the con-
tacts in the phone without user’s awareness. Other malware
may also make background phone calls. With the same
remote control capability, the destination number can be
provided from a remote C&C server, as shown in Geinimi.
4) Information Collection
In addition to the above
payloads, we also ﬁnd that malware are actively harvesting
various information on the infected phones, including SMS
messages, phone numbers as well as user accounts. In
particular, there are 13 malware families (138 samples) in
our dataset that collect SMS messages, 15 families (563
samples) gather phone numbers, and 3 families (43 samples)
obtain and upload the information about user accounts. For
example, SndApps collects users’ email addresses and sends
them to a remote server. FakeNetflix gathers users’ Netﬂix
accounts and passwords by providing a fake but seeming
identical Netﬂix UI.
We consider the collection of users’ SMS messages is
a highly suspicious behavior. The user credential may be
included in SMS messages. For example, both Zitmo (the
Zeus version on Android) and Spitmo (the SpyEpy version
on Android) attempt to intercept SMS veriﬁcation messages
and then upload them to a remote server. If successful, the
attacker may use them to generate fraudulent transactions
on behalf of infected users.
D. Permission Uses
For Android apps without root exploits, their capabilities
are strictly constrained by the permissions users grant to
them. Therefore, it will be interesting to compare top permis-
sions requested by these malicious apps in the dataset with
top permissions requested by benign ones. To this end, we
have randomly chosen 1260 top free apps downloaded from
the ofﬁcial Android Market in the ﬁrst week of October,
2011. The results are shown in Figure 5.
Based on the comparison, INTERNET, READ_PHONE_STATE,
ACCESS_NETWORK_STATE, and WRITE_EXTERNAL_STORAGE per-
missions are widely requested in both malicious and benign
apps. The ﬁrst two are typically needed to allow for the em-
bedded ad libraries to function properly. But malicious apps
clearly tend to request more frequently on the SMS-related
permissions, such as READ_SMS, WRITE_SMS, RECEIVE_SMS,
and SEND_SMS. Speciﬁcally, there are 790 samples (62.7%)
in our dataset that request the READ_SMS permission, while
less than 33 benign apps (or 2.6%) request this permission.
These results are consistent with the fact that 28 malware
families in our dataset (or 45.3% of the samples) that have
the SMS-related malicious functionality.
103
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:05 UTC from IEEE Xplore.  Restrictions apply. 
Also, we observe 688 malware samples request
the
RECEIVE_BOOT_COMPLETED permission. This number is ﬁve
times of that in benign apps (137 samples). This could be
due to the fact that malware is more likely to run back-
ground services without user’s intervention. Note that there
are 398 malware samples requesting CHANGE_WIFI_STATE
permission, which is an order of magnitude higher than that
in benign apps (34 samples). That is mainly because the
Exploid root exploit requires certain hot plug events such as
changing the WIFI state, which is related to this permission.
Finally, we notice that malicious apps tend to request more
permissions than benign ones. In our dataset, the average
number of permissions requested by malicious apps is 11
while the average number requested by benign apps is 4.
Among the top 20 permissions, 9 of them are requested by
malicious apps on average while 3 of them on average are
requested by benign apps.
IV. MALWARE EVOLUTION
As mentioned earlier, since summer of 2011, we have
observed rapid growth of Android malware. In this section,
we dive into representative samples and present a more in-
depth analysis of their evolution. Speciﬁcally, we choose
DroidKungFu (including its variants) and AnserverBot for
illustration as they reﬂect
trend of Android
malware growth.
the current
A. DroidKungFu
The ﬁrst version of DroidKungFu (or DroidKungFu1) mal-
ware was detected by our research team [30] in June
2011. It was considered one of the most sophisticated
Android malware at that time. Later on, we further detected
the second version DroidKungFu2 and the third version
DroidKungFu3 in July and August, respectively. The fourth
version DroidKungFu4 was detected by other researchers in
October 2011 [31]. Shortly after that, we also came across
the ﬁfth version DroidKungFuSapp, which is still a new
variant not being detected yet by existing mobile anti-virus
software (Section V). In the meantime, there is another vari-
ant called DroidKungFuUpdate [32] that utilizes the update
attack (Section III). In Table VI, we summarize these six
DroidKungFu variants. In total there are 473 DroidKungFu
malware samples in our dataset.
The emergence of these DroidKungFu variants clearly
demonstrates the current rapid development of Android
malware. In the following, we zoom in various aspects of
DroidKungFu malware.
1) Root Exploits Among these six variants, four of them
contain encrypted root exploits. Some of these encrypted
ﬁles are located under the directory “assets”, which look like
normal data ﬁles. To the best of our knowledge, DroidKungFu
is the ﬁrst time we have observed in Android malware to
include encrypted root exploits.
The use of encryption is helpful for DroidKungFu to
evade detection. And different variants tend to use different
encryption keys to better protect themselves. For example,
the key used in DroidKungFu1 is Fuck_sExy-aLl!Pw, which
has been changed to Stak_yExy-eLt!Pw in DroidKungFu4.
It
in DroidKungFu1,
is interesting to notice that
the
ﬁle name with the encrypted root exploit is “ratc” – the
acronym of RageAgainstTheCage.
In DroidKungFu2 and
DroidKungFu3, this ﬁle name with the same root exploit has
been changed to “myicon”, pretending to be an icon ﬁle.
2) C&C Servers
All DroidKungFu variants have a
payload that communicates with remote C&C servers and
receives the commands from them. Our investigation shows
that
the malware keeps changing the ways to store the
C&C server addresses. For example, in DroidKungFu1, the
C&C server is saved in plain-text in a Java class ﬁle. In
DroidKungFu2, this C&C server address is moved to a native
program in plaintext. Also, remote C&C servers have been
increased from 1 to 3. In DroidKungFu3, it encrypts the
C&C server addresses in a Java class ﬁle. In DroidKungFu4,
it moves the C&C address back to a native program as
DroidKungFu2 but
in cipertext. In DroidKungFuSapp, we
observe using a new C&C server and a different home-made
encryption scheme.
3) Shadow Payloads
DroidKungFu also carries with
itself an embedded app, which will be stealthily installed