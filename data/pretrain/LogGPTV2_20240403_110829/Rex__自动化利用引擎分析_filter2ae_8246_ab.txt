                    if self.state.solver.symbolic(sym_action.data):
                        l.info("detected write-what-where vulnerability")
                        self.crash_types.append(Vulnerability.WRITE_WHAT_WHERE)
                    else:
                        l.info("detected write-x-where vulnerability")
                        self.crash_types.append(Vulnerability.WRITE_X_WHERE)
                    self.violating_action = sym_action
                    break
                if sym_action.action == "read":
                    # special vulnerability type, if this is detected we can explore the crash further
                    l.info("detected arbitrary-read vulnerability")
                    self.crash_types.append(Vulnerability.ARBITRARY_READ)
                    self.violating_action = sym_action
                    break
完成漏洞类型判定后，我们会对 crash 进行一些判断如 `explorable/leakable`，如 explore 目的是寻找一个更有价值的
crash, 方便漏洞利用。
#### explore
首先判断 crash 是否可 explore, 可以 explore 的漏洞类型是:
`ARBITRARY_READ/WRITE_WHAT_WHERE/WRITE_X_WHERE`
    def explorable(self):
            explorables = [Vulnerability.ARBITRARY_READ, Vulnerability.WRITE_WHAT_WHERE, Vulnerability.WRITE_X_WHERE]
            return self.one_of(explorables)
explore 主要针对任意内存读写漏洞，对应两种实现：`_explore_arbitrary_read` 和
`_explore_arbitrary_write`。
    if self.one_of([Vulnerability.ARBITRARY_READ]):
                    self._explore_arbitrary_read(path_file)
            elif self.one_of([Vulnerability.WRITE_WHAT_WHERE, Vulnerability.WRITE_X_WHERE]):
                self._explore_arbitrary_write(path_file)
            else:
                raise CannotExplore("unknown explorable crash type: %s" % self.crash_types)
`_explore_arbitrary_read / _explore_arbitrary_write`
进行路径探索，分别对应任意写和任意读漏洞，使读写的地址是符号化地址，即我们可控的 ( point the violating address at a
symbolic memory region )，返回一个 crash 对象。
#### 可利用性判定
通过调用 exploitable 接口判断 crash 是否可利用，rex 会判断 Crash 的漏洞类型是否属于可 exploitable 漏洞之一 。
    def exploitable(self):
            exploitables = [Vulnerability.IP_OVERWRITE, Vulnerability.PARTIAL_IP_OVERWRITE, Vulnerability.BP_OVERWRITE,
                    Vulnerability.PARTIAL_BP_OVERWRITE, Vulnerability.WRITE_WHAT_WHERE, Vulnerability.WRITE_X_WHERE]
            return self.one_of(exploitables)
检查是否可以泄露信息, 判断 crash 类型是否属于 `ARBITRARY_READ/ARBITRARY_TRANSMIT` 其中一种.
### Technique 对象
每个 technique 都是 Technique 对象的子类, 主要对 check / apply 这两个接口进行重写. 同时 Technique
对象实现了一些通用的接口, 作为构造 exploit 的辅助函数.
下面介绍一下 check / apply
    check: 检查对于给定的crash, 该技术能否应用到 binary 上,返回布尔值
    apply : 在binary的崩溃状态点应用该技术,返回 Exploit 对象或抛出  CannotExploit  异常
apply 其实就是根据每个技术的不同，添加不同的约束。
每种包含 applicable_to 属性,表示可以应用的平台, unix 或者 cgc
以下是 technique 的基本信息, 基本通过名称就能知道攻击技术，就不一一介绍了，它们的实现也比较朴素。
名称 | 限定漏洞类型 | 其他条件 | 平台  
---|---|---|---  
`call_jmp_sp_shellcode` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE | 栈可执行 | unix  
`call_shellcode` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE | 栈可执行 | unix  
circumstantially_set_register | IP_OVERWRITE / PARTIAL_IP_OVERWRITE |  | cgc  
`rop_leak_memory` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE |  | cgc  
`rop_register_control` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE |  | unix  
`rop_set_register` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE |  | cgc  
`rop_to_accept_system` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE | 存在 accept&
read函数 | unix  
`rop_to_execl` | IP_OVERWRITE/PARTIAL_IP_OVERWRITE | 存在 execl&dup2 函数 | unix  
`rop_to_system` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE | 存在 system 函数 | unix  
`rop_to_system_complicated` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE | libc 被加载&
system 函数 & plt | unix  
`shellcode_leak_address` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE | 栈可执行 | cgc  
`shellcode_set_register` | IP_OVERWRITE / PARTIAL_IP_OVERWRITE | 栈可执行 | cgc  
可以在调用 exploit 时设置 `blacklist_techniques` 参数排除不需要使用的技术.
成功应用 Technique 会返回 Exploit 对象，接下来介绍 Exploit 对象。
### Exploit 对象
> An Exploit object represents the successful application of an exploit
> technique to a crash state.
rex 实现了 `ExploitFactory` 类，用于管理和构建 exploit,
调用 exploit() 方法时，`ExploitFactory` 会依次应用每一种利用技术, 尝试生成 exploit, 得到的 exploit
会以`arsenal[]` 形式存储在 arsenal 属性中. 针对 CGC 实现了
[CGCExploitFactory](https://github.com/angr/rex/blob/0df09e0bc0a8a64b876ce366e3202998bd58b8f0/rex/exploit/cgc_exploit_factory.py#L8)
类.
构建 exp:
    def exploit(self, blacklist_symbolic_explore=True, **kwargs):
            """
            Initialize an exploit factory, with which you can build exploits.
            :return:    An initialized ExploitFactory instance.
            :rtype:     ExploitFactory
            """
            factory = self._prepare_exploit_factory(blacklist_symbolic_explore, **kwargs)
            factory.initialize()
            return factory
`_prepare_exploit_factory` 函数主要为 exploit 的生成做一些准备操作，比如设置 technique
的黑名单，判断输入类型等。
### 测试
以下是分别对 cgc 和 linux 两种格式的测试样例
#### cgc
    def test_legit_00003():
        # Test exploration and exploitation of legit_00003.
        inp = b"1\n" + b"A" * 200 #设置输入内容
        path = os.path.join(bin_location, "tests/defcon24/legit_00003")
        with archr.targets.LocalTarget([path], target_os='cgc') as target:
            crash = rex.Crash(target, inp, fast_mode=True, rop_cache_path=os.path.join(cache_location, 'legit_00003'))
            nose.tools.assert_true(crash.explorable())  #判断是否可以 explore
            nose.tools.assert_true(crash.one_of(Vulnerability.WRITE_WHAT_WHERE)) # 漏洞是否为任意写
            crash.explore() #进行探索m
            arsenal = crash.exploit(blacklist_techniques={'rop_set_register', 'rop_leak_memory'})
            nose.tools.assert_true(len(arsenal.register_setters) >= 2)
            nose.tools.assert_true(len(arsenal.leakers) >= 1)
            crash.project.loader.close()
            for reg_setter in arsenal.register_setters:
                nose.tools.assert_true(_do_pov_test(reg_setter))
            for leaker in arsenal.leakers:
                nose.tools.assert_true(_do_pov_test(leaker))
#### linux
    def test_linux_stacksmash_32():
        # Test exploiting a simple linux program with a stack buffer overflow. We should be able to exploit the test binary by
        # ropping to 'system', calling shellcode in the BSS and calling 'jmpsp' shellcode in the BSS.
        inp = b"A" * 227
        lib_path = os.path.join(bin_location, "tests/i386")
        ld_path = os.path.join(lib_path, "ld-linux.so.2")
        path = os.path.join(lib_path, "vuln_stacksmash")
        with archr.targets.LocalTarget([ld_path, '--library-path', lib_path, path], path, target_arch='i386').build().start() as target:
            crash = rex.Crash(target, inp, fast_mode=True, rop_cache_path=os.path.join(cache_location, 'vuln_stacksmash'))
            exploit = crash.exploit(blacklist_techniques={'rop_leak_memory', 'rop_set_register'})
            crash.project.loader.close()
            # make sure we're able to exploit it in all possible ways
            assert len(exploit.arsenal) == 3
            assert 'rop_to_system' in exploit.arsenal
            assert 'call_shellcode' in exploit.arsenal
            assert 'call_jmp_sp_shellcode' in exploit.arsenal
            _check_arsenal_has_send(exploit.arsenal)
### 相关库
这里顺便介绍一些 rex 依赖的 [archr](https://github.com/angr/archr) 模块
#### archr
前面提到，在使用 rex 前，需要使用 archr 创建 target 对象。我们可以指定 `target_path / target_os(linux
/cgc) / target_arch(linux , x86_64)` 等.
archr 模块实现了以 target 为中心的分析模型。（传统是以程序 program 为中心）
其中包含两个重要的概念，
Targets: 包含 target 的说明，如何配置，如何启动以及如何交互。
Bows：明确 target 特定的分析动作，包括 tracing，符号执行（symbolic execution）等，为了实现目标，Bows 可能会注入
`Arrows` （如`qemu-user`, `gdbserver`等）到 target 中。
archr 提供了两种 target:
  * `DockerImageTarget`: docker 镜像
  * `LocalTarget`：本地系统运行的 target
提供了以下 Bows ：
名称 | 描述  
---|---  
`DataScoutBow` | 获取进程启动时的内存映射，环境，属性  
`AngrProjectBow` | 创建 angr Project  
`AngrStateBow` | 创建 angr State  
`QEMUTraceBow` | 执行 qemu tracing  
`GDBServerBow` | 在 gdbserver 中启动 target  
`STraceBow` | strace 目标（即跟踪系统调用和信号）  
`CoreBow` | 启动target 并恢复 core  
`InputFDBow` | 确定用户输入的FD数目  
具体使用方法可以查看项目。
#### 总结
对于自动化利用，rex 比较简陋，漏洞利用技术也比较简单，但是我们可以学习它的思路，对其进行改进。
## 参考链接
  1. [https://paper.seebug.org/papers/Security%20Conf/Hitcon/Hitcon-2016/1202%20R2%201510%20automatic%20binary%20exploitation%20and%20patching%20using%20mechanical%20shellphish.pdf](https://paper.seebug.org/papers/Security Conf/Hitcon/Hitcon-2016/1202 R2 1510 automatic binary exploitation and patching using mechanical shellphish.pdf)
  2. 
  3. 
  4. 
  5. 