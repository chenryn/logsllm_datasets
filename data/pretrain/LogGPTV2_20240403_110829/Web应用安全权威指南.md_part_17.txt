    综上所述，动态生成 JavaScript 字符串字面量时需要遵循以下规则。
    （1）按照 JavaScript 语法，将引号（单引号及双引号）和斜杠 \\
    及换行符等进行转义。 \" → \\\"\' → \\\' 换行符→ \\n \\ →
    \\（2-1）如果是事件绑定函数，将（1）的执行结果按照字符实体进行 HTML
    转义，并用双引号括起来（2-2）如果是在 script
    元素中，执行（1）后确保字符串中不存在 \ **代码清单 /43/escape_js_string.php**
        ``` 代码无行号
        ```
        **调用例**
        ``` 代码无行号
          alert('');
        ```
        **生成的脚本**
        ``` 代码无行号
        ```
        **脚本解说**
        -   `unicode_escape` 函数的功能为将输入字符串全部以 \\uXXXX 的
            UNICODE 形式进行转义
        -   在 `mb_convert_encoding` 中将输入字符串的字符编码转换为
            UTF-16
        -   在 `bin2hex` 中将对象字符串转换为十六进制
        -   使用正则表达式，每 4 个字节插入一个 \\u
        -   `escape_js_string` 函数的功能为将字母与数字以外的字符转义为
            \\uXXXX 的形式
        -   在 `preg_replace_callback`
            函数中，将字母和数字以外的字符串全部传给 `unicode_escape`
            函数处理
    -   **JavaScript 中引用定义在 script 元素外的参数的方法**
        为了避免动态生成 JavaScript，在 script 元素外部定义参数后再在
        JavaScript
        中引用该参数也是一个解决方案。不过，该方案的实施需要利用 hidden
        参数。
        下面展示了利用 hidden 参数的示例脚本。前提条件是内部字符编码为
        UTF-8。
            ">
            ...
            var familyname = document.getElementById('familyname').value;
            //...
        开头的 input 元素指定了 `id="familyname"`
        以使其能被引用。此外，根据属性值的转义规则，第 2
        行在设值时使用了 `htmlspecialchars`
        进行转义并将其用双引号括了起来。
        而 input 的值则在倒数第 2 行被 `getElementById` 方法引用。
        此方案的优点为，由于避开了 JavaScript
        特有的繁琐问题，只需遵守少量规则就能防范
        XSS，因此思路比较简单。而缺点就是定义 JavaScript
        代码与参数的地方相隔较远，可能会使脚本的可读性降低。
        读者在实际操作时，可以在综合考虑两种方案的特性后，根据实际情况做出抉择。
[18]{.注释编号下}
为了方便读者理解，支持页面中收录的代码添加了在页面上显示查询字符串的处理。
#### **DOM based XSS**
除了上述的各种 XSS 之外，还有一种叫作"DOM based XSS"的 XSS。JavaScript
常用于客户端的显示处理，DOM based XSS 即潜藏于此处的安全隐患。
下面是含有 DOM based XSS 漏洞的简单的 HTML。
> **代码清单 /43/43-011.html**
    你好
这段 HTML 的目的是将查询字符串中 `name=` 指定的姓名通过 JavaScript
显示在页面上。例如，使用 http://example.jp/43-011.html?name=YamadaURL
显示页面时，页面上就会显示"你好，Yamada"。
按照惯例，下面我们来看一下对这段 HTML 进行攻击的示例。使用如下 URL
打开网页时，页面显示如图 4-27 所示。
``` 代码无行号
http://example.jp/43/43-011.html?name=
```
![{%}](Image00067.jpg)
**图 4-27 DOM based XSS 的结果**
攻击者注入的 JavaScript 代码不会出现于服务器端生成的 HTML 中，因此这类
XSS 被称为"DOM based XSS"。现今使用 JavaScript
来显示页面的案例越来越多，而即便是部分显示使用 JavaScript
也必须要考虑其中是否会有 HTML 标签。
JavaScript 的标准函数中没有提供转义 HTML 的功能，因此这里我们使用 jQuery
这个风靡全球的 JavaScript 库来示范字符串的显示。使用 span
元素确定字符串的显示位置，然后向 id 指定的 DOM
中插入文本文字。这时可以使用 `text` 方法自动进行转义操作。
> **代码清单 /43/43-011a.html**
     ←──加载 jQuery
    你好 
实施防范策略后的脚本运行结果如下图，能看到 \ ）等。
#### **参考：Perl 中转义 Unicode 的函数**
以下为 Perl 中转义 Unicode 的函数范例。
``` 代码无行号
#!/usr/bin/perl use strict;
use utf8;
use Encode qw(decode encode);
# ...
# 将输入值全部转义为 \uXXXX 形式
sub unicode_escape {
  my $u16 = encode('UTF-16BE', $_[0]);  # 转换为 UTF-16
  my $hex = unpack('H*', $u16);         # 转换为十六进制字符串
# 每隔 4 个字符插入一个 \u
  $hex =~ s/([0-9a-f]{4})/\\u\1/g;
  return $hex;
}
# 将字母和数字以外的字符转义为 \uXXXX 形式
sub escape_js_string {
  my ($s) = @_;
# 将字母、数字、减号、点号以外的字符串传给 unicode 函数处理
  $s =~ s/([^-\.0-9a-zA-Z]+)/unicode_escape($1)/eg;
  return $s;
}
```
### **4.3.3 错误消息导致的信息泄漏** {#text00000.html#nav_point_24}
错误消息导致的信息泄漏有以下两种情况。
-   错误消息中含有对攻击者有帮助的应用程序内部信息
-   通过蓄意攻击使错误信息中显示隐私信息（如用户个人信息等）
应用程序内部信息是指，发生错误的函数名、数据库的表名、列名等，这些信息都有可能成为攻击的突破口。而第二种情况的具体内容会在
4.4.1 节中结合示例讲解。
为了解决以上问题，当应用程序发生错误时，应该仅在页面上显示"此时访问量太大，请稍后再试"等提示用户的消息，而错误的详细内容则以错误日志（Error
Log）的形式输出。详情可参考 5.4 节。
PHP 的情况下，禁止显示详细错误信息，只需在 php.ini 中做如下设置。
``` 代码无行号
display_errors = Off
```
#### **总结**
4.3 节集中讲述了 XSS 漏洞。由于 XSS
漏洞产生的主要原因为显示的方法存在问题，所以消除 XSS
漏洞的第一步就是生成正确的 HTML。开发新项目时，只要能够保持警惕，避免
XSS 漏洞并不困难，但事后再来应对 XSS
漏洞的话却相当费心费力，而且有时即使发现了隐患也会姑且将其搁置。但这样做是非常危险的，因此，不论网站的特点如何，笔者都强烈建议从最开始就编写正确的代码来杜绝
XSS 漏洞。
#### **继续深入学习**
读者们在学习完本书的内容后，如果还想继续深入学习的话，可以参考以下信息。
-   **长谷川阳介的连载**