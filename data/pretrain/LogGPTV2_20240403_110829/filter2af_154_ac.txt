        /*end*/
        /*jmp end delete_func*/
        /* 0x2dc-0x2d0-2*/
        "nop\n"
        "nop\n"
        /*print nosuchnote*/
        "mov $0x400C8E,%edi\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        /*end delete_func*/
        "leave\n"
        "ret\n"
    );
**静态编译：**
    gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook
**LIEF脚本patch**
    import lief
    from pwn import *
    def patch_jmp(file,op,srcaddr,dstaddr,arch="amd64"):
        length = (dstaddr-srcaddr-2)
        print hex(length)
        order = chr(op)+chr(length)
        print disasm(order,arch=arch)
        file.patch_address(srcaddr,[ord(i) for i in order])
    def patch_call(file,srcaddr,dstaddr,arch="amd64"):
        length = p32((dstaddr-srcaddr-5)&0xffffffff)
        order = "\xe8"+length
        print disasm(order,arch=arch)
        file.patch_address(srcaddr,[ord(i) for i in order])
    # add hook's patched func to binary as a new segment
    binary = lief.parse("./vul")
    hook = lief.parse("./hook")
    hook_func_base = 0x279
    hook_sec = hook.get_section(".text")
    bin_eh_frame =  binary.get_section(".eh_frame")
    print hook_sec.content
    print bin_eh_frame.content
    bin_eh_frame.content = hook_sec.content
    print bin_eh_frame.content
    # hook call delete_note
    dstaddr = bin_eh_frame.virtual_address
    srcaddr = 0x400B9A
    patch_call(binary,srcaddr,dstaddr)
    # patch print_inputidx
    dstaddr = 0x400760
    srcaddr = bin_eh_frame.virtual_address + (0x28b-hook_func_base)
    patch_call(binary,srcaddr,dstaddr)
    # patch call read_int
    dstaddr = 0x4008d6
    srcaddr = bin_eh_frame.virtual_address +(0x295-hook_func_base)
    patch_call(binary,srcaddr,dstaddr)
    # patch call free
    dstaddr = 0x400710
    srcaddr = bin_eh_frame.virtual_address + (0x2bc-hook_func_base)
    patch_call(binary,srcaddr,dstaddr)
    # patch call puts
    dstaddr = 0x400740
    srcaddr = bin_eh_frame.virtual_address + (0x2d9-hook_func_base)
    patch_call(binary,srcaddr,dstaddr)
    # patch jz printnosuchnote short jz
    dstaddr = bin_eh_frame.virtual_address+(0x2d4-hook_func_base)
    srcaddr = bin_eh_frame.virtual_address+(0x2ad -hook_func_base)
    patch_jmp(binary,0x74,srcaddr,dstaddr)
    # patch jmp end_func
    srcaddr = bin_eh_frame.virtual_address + (0x2d2-hook_func_base)
    dstaddr = bin_eh_frame.virtual_address + (0x2de-hook_func_base)
    patch_jmp(binary,0xeb,srcaddr,dstaddr)
    binary.write("patch_md_ehframe")
patch的效果：  
delete_note函数被hook修改调用为eh_frame处的sub_400D70  
sub_400D70的实现  
patch前后的程序大小：  
同样是增加一个函数，大小没有发生变化，因为代码都写入了原binary的.eh_frame段了。
对于exp的抵御：  
###### 4.1.2.2 jmp实现的hook
上面的方法都是通过对整个函数逻辑进行重写，为的就是添加一句free后的指针置零操作，工作量太大。patch中jmp的方式实现函数逻辑的添加更为方便简单。对需要添加逻辑的部分，在原程序中合适位置中jmp
跳转到 修改的.eh_frame处，执行完毕后（指针置零）再次jmp跳转到原成功的逻辑。此处涉及到jmp的跨段的长跳转，寻址方式与call的计算一样。
**编写hook逻辑**
    asm(
        "mov -4(%rbp),%eax\n"
        "cdqe\n"
        "mov 0x6020e0(,%rax,8),%rax\n"
        "test %rax,%rax\n"
        /*jz puts nosuchnote */
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "mov -4(%rbp),%eax\n"
        "cdqe\n"
        "mov 0x6020e0(,%rax,8),%rdi\n"
        /*call free*/
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "mov $0x0,%ecx\n"
        "mov -4(%rbp),%eax\n"
        "cdqe\n"
        "mov %ecx,0x6020e0(,%rax,8)\n"
        /*jmp back to end*/
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
    );
可以看到实现的只是其中的一部分内容，工作量减少：  
在原来调用if-else的判断逻辑处进行跳转，loc400D70是我们上述汇编实现的if-else判断处理，增加了对free后的指针置零操作，原本的if-else逻辑被弃用。
**LIEF脚本patch地址**
    import lief
    from pwn import *
    def patch_jmp(file,srcaddr,dstaddr,arch="amd64"):
        length = p32((dstaddr-srcaddr-5)&0xffffffff) # long jmp address calc
        print length
        order = "\xe9"+length
        print disasm(order,arch=arch)
        file.patch_address(srcaddr,[ord(i) for i in order])
    def patch_jz(file,srcaddr,dstaddr,arch="amd64"):
        length = p32((dstaddr-srcaddr-6)&0xffffffff)
        order = "\x0f\x84"+length
        print disasm(order,arch=arch)
        file.patch_address(srcaddr,[ord(i) for i in order])
    def patch_call(file,srcaddr,dstaddr,arch="amd64"):
        length = p32((dstaddr-srcaddr-5)&0xffffffff)
        order = "\xe8"+length
        print disasm(order,arch=arch)
        file.patch_address(srcaddr,[ord(i) for i in order])
    # add hook's patched func to binary as a new segment
    binary = lief.parse("./vul")
    hook = lief.parse("./hook")
    hook_func_base = 0x279
    hook_sec = hook.get_section(".text")
    bin_eh_frame =  binary.get_section(".eh_frame")
    print hook_sec.content
    print bin_eh_frame.content
    bin_eh_frame.content = hook_sec.content
    print bin_eh_frame.content
    # hook delete_note to eh_frame
    dstaddr = bin_eh_frame.virtual_address
    srcaddr = 0x400A15
    patch_jmp(binary,srcaddr,dstaddr)
    # patch jz put_nosuchnote
    dstaddr = 0x400A3E
    srcaddr = bin_eh_frame.virtual_address + (0x289-hook_func_base)
    patch_jz(binary,srcaddr,dstaddr)
    # patch call free
    dstaddr = 0x400710
    srcaddr = bin_eh_frame.virtual_address + (0x29c-hook_func_base)
    patch_call(binary,srcaddr,dstaddr)
    # patch jmp back to delete_note end
    dstaddr = 0x400A48
    srcaddr = bin_eh_frame.virtual_address + (0x2b2 - hook_func_base)
    patch_jmp(binary,srcaddr,dstaddr)
    binary.write("patch_jmp_ehframe")
**patch的效果：**  
main函数主循环中的delete_note调用没有hook,但是delete_note里面的逻辑已经发生改变  
增加了free后指针置0操作  
对fast_bin attach的防御：  
#### 4.2 使用Keypatch
上面都是通过编程的手段对binary进行patch，不方便之处就是处理两个binary间的指令跳转的地址计算，通过lief提供的API函数获得加载基址与计算的偏移量，对脚本的nop占位进行修改，人工计算汇编间地址比较多，如ds:note[rax*8]的计算等。一种方便的快速patch手段是使用IDA的第三方插件Keypatch，可以省去这些binary内部符号的地址计算与编写脚本的工作，直接写汇编进keypatch，它会自动编码成二进制指令并插入到指定地方。[官方文档](http://www.keystone-engine.org/keypatch/)
支持的修改：
  * patcher ：对指定一行汇编的修改，覆盖原来的机器指令。
  * fill range：对指定范围的指令进行覆写。（通常用于.eh_frame写入多行逻辑处理指令）
  * undo：撤销上一步patch修改
  * 实时显示编码的指令的长度
通过上面的分析，采用jmp跳转到.eh_frame进行指针置零操作的if-else逻辑处理，此处采用Intel指令格式的汇编。要注意的是，拖keypatch中不能编码汇编指令为二进制机器指令时候要考虑：
  1. jmp , call等不能采用free,sub_xxxx，loc_xxxx的形式，即keypatch不能识别符号地址跳转，要手动指定十六进制地址，但对于ds:note[rax*8]段寻址方式是可以直接识别。
  2. mov 的立即数传数不正确。有关于mov的指令格式，[参考](https://blog.csdn.net/jnu_simba/article/details/11747901)
利用keypatch对vul中double free进行修改：
  1. 写入增加free后指针置零的if-else逻辑到.eh_frame，使用fill range:
        mov     eax, [rbp-4];
     cdqe;
     mov     rax, ds:note[rax*8];
     test rax,rax;
     jz 0x400A3E; //keypatch 在跳转（jmp、call）采用十六进制地址进行（否则无法编码）
     mov     eax, [rbp-4];
     cdqe;
     mov     rax, ds:note[rax*8];
     mov rdi,rax;
     call 0x400710;//call _free
     mov     eax, [rbp-4];cdqe;
     mov rcx,0;
     mov ds:note[rax*8],rcx;//关于mov寻址操作约定：段地址不能直接赋予立即数
     jmp 0x400A48
     ;多条汇编指令间用;隔开成一行
先随便选取.eh_frame一段范围，写入汇编  
可以看到采用Intel语法，成功Encode后的size为68
bytes，若不能成功Encode所写的汇编代码，则检查上述可能出现的语法错误。增大选中的大小写入。  
  2. 原binary的if-else判断前的跳转，由于长跳转占用5bytes，使用fill range:  
成功写入：  
  3. 保存修改到文件  
Edit->patch program -> apply into input files  
close之后在重新打开即可看到patched的结果：  
  4. patch前后的大小与对fast_bin attack的防御  
可以看到使用keypatch插件工作量在尽量少的情况下实现同样的防御效果，上述patched手法选用哪个都一样，看个人喜好，都是patch的一些工具。