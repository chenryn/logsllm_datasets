Tocheck := cert .Attributes ∩ TT .Attributes /* Initialize attributes to check for veriﬁcation */
While Tocheck 6= ∅ ∧ Verify Queue 6= ∅
A := Tocheck /* Initialize attributes covered by a veriﬁed path */
[to,p attrs ,p cost ] := Extract maxp cost (Verify Queue)
If p attrs ∩ Tocheck 6= ∅ then
Let a be any attribute in p attrs ∩ Tocheck
Repeat /* go back in the chain for a from to to cert.issuer */
from := Pred to[a]
If valid(λ(hfrom,toi).id) then
A := A ∩ λ(hfrom,toi).Attributes
to := from
else /* certiﬁcate id is not valid */
to := cert .issuer /* set condition for termination */
A := ∅ /* no attribute veriﬁed along the chain */
Until to = cert .issuer
Tocheck := Tocheck − A /* remove veriﬁed attributes from Tocheck */
If Tocheck 6= ∅ then return(false) /* Not all attributes veriﬁed */
return(true )
Figure 1: Chain veriﬁcation algorithm
154
Example 5. The following view grants each physician
access to the data of her patients (having the physician
recorded as their primary doctor).
create view PatientView as
select Patients.*
from Patients, Physicians
where Physicians.code = Patients.doctor_code
4. DELEGATION CHAIN VERIFICATION
One of the most critical components of every trust man-
agement proposal is the design of the algorithm responsible
for the identiﬁcation of the delegation chains. Many models
have been proposed for the management of this important
step, both in centralized and distributed contexts, consid-
ering several alternative models for the representation of
delegation (e.g., [12]). Unfortunately, all the models that
oﬀer the representation of a ﬂexible delegation mechanism
use algorithms for the veriﬁcation of delegation chains that
are extremely diﬃcult to apply in the database context, due
to their computational cost. It is indeed hard to convince
a database implementor to integrate within the relational
engine a logic model checker, for the veriﬁcation of certiﬁ-
cates presented by a client. We instead show that our model
permits the application of an algorithm that is able to iden-
tify, with an acceptable computational eﬀort, if a set of cer-
tiﬁcates produces a delegation path for a set of attributes
appearing in a certiﬁcate. Also, with an approach similar
to the one used by DBMS query optimizers, the algorithm
can apply a cost model that estimates the computational ef-
fort required for the veriﬁcation of delegation chains. In this
way, the algorithm is also able to identify, for each attribute
in the certiﬁcate, the path in the delegation graph that re-
quires the minimal cost for its veriﬁcation. The algorithm
is therefore a crucial component of the proposed approach
since it shows that the complexity of our delegation mecha-
nism remains manageable by a DBMS.
We assume that the system has knowledge of all the del-
egation certiﬁcates Deleg Certs needed for the veriﬁcation.
Each delegation can be either unrestricted or applicable only
to a subset of attributes. We also assume that each dele-
gation certiﬁcate is associated with a cost representing an
estimate of the computational eﬀort required for the certiﬁ-
cate veriﬁcation. The reason for capturing cost information
is that cryptographic functions are computationally expen-
sive and it is therefore important to minimize their use. The
cost information can be used to model the lower cost of us-
ing certiﬁcates cached as valid in prior veriﬁcation as well as
the diﬀerent higher costs of retrieving certiﬁcates from re-
mote directories. Finally, we assume that the cryptographic
check over certiﬁcates is carried out by invoking an external
function, called valid.
4.1 Algorithm
We consider a client that presents a certiﬁcate cert . For
each trust table TT with a structure that is compatible
with cert , the algorithm illustrated in Figure 1 determines
whether cert satisﬁes TT either directly or via a delegation
chain, returning true or false accordingly.
The algorithm starts by checking if the issuer of the certiﬁ-
cate (cert .issuer ) belongs to the set of root authorities of
cert .issuer
A7
ha,2i
h{b,c},2i
A4
A6
ha,1i
h{b,c},4i
A5
hb,4i
h{a,b},1i
h{b,c},3i
A1
A2
A3
root authority
root authority
root authority
Figure 2: An example of delegation graph
TT . If this is the case, the algorithm terminates right away
returning the outcome of function valid over the certiﬁcate.
Otherwise (the issuer is not a root authority) the algorithm
proceeds to determine whether the certiﬁcate is supported
by a chain of delegation certiﬁcates in Deleg Certs . If dele-
gation is not allowed (the set of root authorities for which
delegation is allowed is empty), the algorithm terminates
returning false; otherwise, it proceeds to retrieve a possible
delegation chain.
The process of determining a delegation chain can be seen as
composed of three parts: ﬁrst the algorithm deﬁnes a graph
representing all delegation certiﬁcates in Deleg Certs, then
it ﬁnds support chains for the attributes involved, and ﬁnally
it checks the validity of the certiﬁcates in the chains.
Phase 1: graph construction. The delegation graph G
representing all the delegation certiﬁcates Deleg Certs has a
node for every issuer and every subject of certiﬁcates, and
an edge for each certiﬁcate dc, going from the subject of dc
to its issuer. The edge is labeled (via a function λ) with a
triple reporting the (Attributes ) in the certiﬁcate, the cost
for checking its validity, and its identiﬁer. As an exam-
ple, suppose that certiﬁcate cert contains three attributes,
namely, a, b, c, and that the issuer of this certiﬁcate is au-
thority A7. Figure 2 illustrates an example of delegation
graph with three root authorities (A1, A2, and A3) and seven
delegate certiﬁcates (one for each edge in the graph) involv-
ing authorities A4, A5, A6, and A7. Each edge is associated
with a label that speciﬁes the delegated attributes and the
cost, respectively.3
Phase 2: ﬁnd supporting chains. Finding a support
chain for an attribute a means ﬁnding a path in the graph
starting from the issuer of cert and ending in one of the root
authorities for TT (set Roots) such that the set of attributes
of all the edges in the path includes a. The cost of a sup-
port chain is deﬁned as the sum of the costs of the edges
belonging to the chain; the shortest chain for an attribute
is the chain with minimum cost that exists for it.
3For the sake of simplicity, we omit the identiﬁers associated
with the delegation certiﬁcates corresponding to the edges
of the graph.
155
a guarantee on the robustness in terms of security. Third,
there is a need for a good integration with current SQL
constructs, in order to minimize the eﬀort required to the
database designer in the modelling of application require-
ments for access control. Our proposal has been designed
taking into account all these principles ensuring seamless
integration with existing DBMSs.
One key aspect deserving mention in the implementation of
our solution concerns role activation. The SQL standard,
since SQL:1999, oﬀers supports for roles; however the SQL
model with roles binds roles to user identities and therefore
must be adapted to support role activation (i.e., granting of
privileges) on the basis of certiﬁed attributes. We solve this
problem by using sessions (instead of user ids) as target of
grant statements triggered by the trust policy to enable role
activation (see Section 3.3.1).
5.1 Translation of the SQL Constructs
The SQL statements that we presented for the deﬁnition of
authorities, trust tables, and trust policies facilitate the in-
tegration of these aspects within relational databases. We
describe in more details how each SQL trust statement can
be translated into traditional SQL structures. The table in
the appendix summarizes the discussion. The goal is not to
suggest a strategy for DBAs to represent trust directly in
the DBMS (a higher level representation has to be used to
model an access policy), but to demonstrate the compatibil-
ity of our proposal with the internal architecture of current
DBMSs.
The description of authorities within the schema requires
to introduce a table in the database catalog, which we call
Authority, which has to present two non-null attributes,
name and public key, storing the name and the public key
of each authority, respectively. The speciﬁcation of a create
authority statement therefore corresponds to the insertion
of a tuple in the Authority table, where the authority name
and the public key are those indicated in the statement.
and
create authorityclass
Statements
create
trusttable produce a more extensive impact on the
catalog. Each authority class produces a table correspond-
ing to the authority class description. Analogously, each
trust table produces a table to contain the attribute values
obtained from client certiﬁcates. Depending on the feature
set of the DBMS, these tables can be managed as global
temporary tables.4 Global temporary tables are described
in the SQL standard [6] and represent tables that are part
of the database schema, but that diﬀer from base tables
because their content cannot be shared between diﬀerent
sessions; a session can then use a global temporary table
to store information that is then needed within the same
session and that must not be shared with other sessions.
The advantage of global temporary tables is typically
greater performance, due to the fact that locks, and in
general concurrency control mechanisms, are not used
4For database servers that do not support global temporary
tables, it is necessary to simulate their services using in the
schema of the trust table an additional attribute, the session
identiﬁer session id . The goal of this attribute is to asso-
ciate each certiﬁcate with the session on which it has been
presented.
The process for ﬁnding supporting chains is performed via a
Dijkstra-like process, with a while cycle that iterates until
either a chain has been retrieved for all attributes (Tocheck
is empty) or there are no more edges to examine (Queue is
empty). When a path (chain) ending in a root authority is
found, Verify Queue is updated accordingly. Verify Queue
keeps track of the root authorities reached by a support
chain for some attributes. At the end of the while cycle, if
Tocheck is not empty, then no chain has been found for some
attributes and the algorithm terminates returning false.
Otherwise, the algorithm proceeds verifying the chains re-
trieved. The algorithm makes use of classical Dijkstra-like
structures to maintain information on the paths being found.
Phase 3: verify chains. The chain veriﬁcation process
starts by initializing variable Tocheck to the set of attributes
to be veriﬁed. Then,
it processes chains to be veriﬁed
(Verify Queue) in decreasing order of cost. For each chain,
the certiﬁcates corresponding to the edges are checked via
a call to function valid and if the chain is correctly ver-
iﬁed, the attributes certiﬁed by it removed from those to
be checked. The process (controlled by the while cycle)
continues until there are no more attributes to be veriﬁed
(Tocheck is empty) or there are no more chains to process
(Verify Queue is empty).
In this latter case, not all at-
tributes have been veriﬁed and the algorithm terminates re-
turning false; otherwise it returns true.
As an example, for the delegation graph in Figure 2, our
algorithm determines two veriﬁcation chains:hA7, A4, A1i for
attribute a and hA7, A6, A5, A3i for attributes {b, c}.
Note that the reason why the elements in Verify Queue are
processed in decreasing order of cost is to minimize the num-
ber of chains to be veriﬁed. For instance, with respect to
the delegation graph in Figure 2, our algorithm veriﬁes both
attribute b and attribute c with path hA7, A6, A5, A3i with
cost 9, instead of considering two paths: hA7, A3i for at-
tribute b with cost 4 and hA7, A6, A5, A3i for attribute c
with cost 9.
In summary, the algorithm is able to eﬃciently identify (with
a computational eﬀort that grows almost linearly with the
number of edges in the graph multiplied by the number of
attribute labels) the presence of a delegation chain support-
ing the certiﬁcate in the graph. We observe that the algo-
rithm has a tuple oriented structure: at each iteration, in
the search for the minimum cost path, a single edge is con-
sidered. This is the reason while we have chosen not to use
SQL instructions.
INTEGRATION WITHIN A DBMS
5.
There are few principles that have to be followed in the
integration within a current DBMS of the trust manage-
ment services we described. First, the implementation in
real systems of these services can be successful only if it is
focused on a few components, otherwise, it could introduce
many side eﬀects, in terms of functionality or performance,
which would create problems in current database applica-
tions. Second, the implementation has to require a mod-
est coding eﬀort; apart from the increase in costs that can
make this extension too expensive in the eye of the DBMS
producer, it would be considerably more diﬃcult to have
156
to access the table; an additional beneﬁt is that a rigid
separation of the information pertaining to distinct sessions
is automatically supported, with automatic removal of the
information at the closure of the session. Both the create
authorityclass statement and the create trusttable
statement
correspond to a create global temporary
table statement, where the name of the global temporary
table is the name of the authority class and the name
of the trust table, respectively, and the schema is the
list of attributes and constraints deﬁned by the create
authorityclass and create trusttable statements.
The management of the optional clauses on trusted author-
ities, delegation, and exceptions forces the introduction of
additional tables, which have an important role in the eval-
uation, database-side, of the validity of the certiﬁcates pre-
sented by the client. More precisely, tables AuthorityClass
and AuthorityTT are needed to store the list of author-
ities trusted (clause authoritative) for asserting that a
given party has given attributes and for producing certiﬁ-
cates that can contain the list of attributes deﬁned in the
trust table, respectively. These tables have three attributes,
name, authority, and delegation ﬂag, storing the name of
the authority class or trust table, the name of the authority,
and whether chains of delegated authorities with authority
as a starting point are acceptable (delegation ﬂag is set to
true) or not (delegation ﬂag is set to false). Analogously,
tables NotAuthorityClass and NotAuthorityTT are needed
to store the list of authorities that are not trusted (clause
except) in the speciﬁc authority class and trust table, re-
spectively. These tables have two attributes, name and au-
thority, storing the name of the authority class or trust table
and the name of the authority, respectively.
Each create authorityclass statement and each create
trusttable statement are therefore translated into one or
more insert statements that have to be executed on these
tables: one insert statement on tables AuthorityClass
and AuthorityTT for each authority speciﬁed in the
authoritative clause and one insert statement on tables
NotAuthorityClass and NotAuthorityTT for each authority
speciﬁed in the except clause, as reported in the appendix.