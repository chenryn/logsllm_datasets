# Web Services Wind Tunnel: On Performance Testing Large-Scale Stateful Web Services

**Authors:**  
Marcelo De Barros, Jing Shiau, Chen Shang, Kenton Gidewall, Hui Shi, Joe Forsmann  
Microsoft Corporation  
{marcelod, jshiau, cshang, kentong, huishi, josephfo}@microsoft.com

## Abstract
Performance testing of large-scale stateful web services, such as Passport.com, is essential to ensure high availability. This paper addresses the challenges of performance testing in managed test environments, particularly the reproducibility of production conditions. Key challenges include creating a dataset that mimics the production environment and characterizing load patterns. We discuss practical approaches, including data sanitization and the use of Markov Chains for load pattern characterization. The paper also provides guidelines for developing cache-based load simulation tools for the performance evaluation of stateful systems.

## 1. Introduction
Large-scale online web services, such as Passport.com, can handle up to 300,000 user-driven transactions per second and manage datasets with over 500 million users. Therefore, new versions of these services must undergo rigorous performance testing before release. The testing process typically involves environment preparation, execution, and analysis. This paper describes practical approaches for creating accurate performance tests for stateful web services.

Stateful web services contain hard-state data, which cannot be lost due to its irreconstructability. Examples include user profiles and bank account transactions. In contrast, soft-state data can be reconstructed from hard-state data, such as aggregated financial reports. Many web services today are stateful, making accurate performance testing crucial.

## 2. Data Sanitization
Using production data for testing new features is essential for both functional validation and performance evaluation. However, production data contains sensitive information, known as Personally Identifiable Information (PII), which must be kept confidential even in restricted test environments. The data sanitization process obfuscates PII while preserving three key characteristics:
- **Data Integrity:** Constraints like primary keys and uniqueness are maintained.
- **Data Relationships:** Relationships between tables in a relational database are preserved.
- **Data Equivalence Classes:** Subsets of the domain input data are preserved, ensuring that all elements within a subset are treated uniformly.

### 2.1 PII Identification
The first step in the sanitization process is identifying the data that needs to be obfuscated. Tools in the data sanitizer framework assist in this identification, though manual intervention is required due to the complexity of large-scale systems.

### 2.2 Sanitization Method Assignment
Once PII is identified, a suitable sanitization method is chosen to preserve data integrity, relationships, and equivalence classes. Common methods include erasing non-binary fields, replacing fields with random strings or numbers, and applying one-way hash functions.

### 2.3 Test and Sanitization Execution
After PII identification and method assignment, the sanitization process is tested in restricted laboratories on non-production data. Upon verification, the process is executed in production environments. The main sanitizer tool is multithreaded for optimal speed, and database constraints are temporarily removed during sanitization to avoid violations.

## 3. Markov Chain Stress Model
The Markov Chain Stress Model includes two components: the knowledge retriever and the knowledge exerciser. Both components use the concept of the Markov Chain dynamic stochastic process to describe system states at successive times.

### 3.1 Knowledge Retriever
The knowledge retriever applies data mining to production activity logs to discover parameter load patterns for each API. It assumes a set of countable APIs, where each API has a known set of domain data and client applications make API calls according to a Markov process.

### 3.2 Knowledge Exerciser
The knowledge exerciser uses Markov Chain Monte Carlo methods to sample from probability distributions, generating dynamic scenarios consistent with production load patterns. This ensures that the stress test environment accurately reflects real-world conditions.

## 4. Cache-Based Performance Test Tools
This section discusses the development of cache-based performance test tools that leverage sanitized production data. These tools can import the sanitized data into test environments, providing a more accurate representation of production conditions.

## 5. Results and Future Improvements
We present practical results from using these techniques and discuss potential future improvements. The goal is to continually refine the methods to enhance the accuracy and efficiency of performance testing for large-scale stateful web services.

---

This optimized version aims to improve clarity, coherence, and professionalism by structuring the content, refining the language, and ensuring a logical flow of ideas.