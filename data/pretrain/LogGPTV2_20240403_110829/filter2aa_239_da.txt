下面的类StringSample定义了一个带字符串参数的构造函数、方法GetStringDemo和一
个字段。方法GetStringDemo根据first和second参数使用不同的路径，并返回一个从这些参
数得到的字符串（代码文件UnitTestingSamples /StringSample.cs）：
    public class StringSample
    {
      public StringSample(string init)
      {
        if (init == null)
        throw new ArgumentNullException(nameof(init));
        _init = init;
      }
      private string _init;
      public string GetStringDemo(string first, string second)
      {
        if (first == null)
        {
        throw new ArgumentNullException(nameof(first));
        }
        if (string.IsNullOrEmpty(first))
        {
        throw new ArgumentException("empty string is not allowed", first);
        }
        if (second == null)
        {
        throw new ArgumentNullException(nameof(second));
        }
        if (second.Length > first.Length)
        {
        throw new ArgumentOutOfRangeException(nameof(second),
          "must be shorter than first");
        }
        int startIndex = first.IndexOf(second);
        if (startIndex  XElement.Load(F1Addresses.RacersUrl);
    }
现在就能够修改ChampionsByCountry（）方法的实现，使用接口而不是直接使用
XElement.Load方法（）来加载冠军。新的方法命名为ChampionsByCountry2，以便有两个
版本可用于单元测试。IChampionsLoader传递给类Formula1的构造函数，然后
ChampionsByCountry2（）将使用这个加载器（代码文件
UnitTestingSamples/Formula1.cs）：
    public class Formula1
    {
      private IChampionsLoader _loader;
      public Formula1(IChampionsLoader loader)
      {
        _loader = loader;
      }
      public XElement ChampionsByCountry2(string country)
      {
        var q = from r in _loader.LoadChampions().Elements("Racer")
                where r.Element("Country").Value == country
                orderby int.Parse(r.Element("Wins").Value) descending
                select new XElement("Racer",
                new XAttribute("Name", r.Element("Firstname").Value + " " +
                  r.Element("Lastname").Value),
                new XAttribute("Country", r.Element("Country").Value),
                new XAttribute("Wins", r.Element("Wins").Value));
        return new XElement("Racers", q.ToArray());
      }
    }
在典型实现中，会把一个ChampionsLoader实例传递给Formula1构造函数，以从服务
器检索赛车手。
创建单元测试时，可以实现一个自定义方法来返回一级方程式冠军，如方法
Formula1SampleData（）所示（代码文件UnitTestingSamplesTests/ Formula1Tests.cs）：
    internal static string Formula1SampleData()
    {
      return @"
        Nelson
        Piquet
        Brazil
        204
        23
        Ayrton
        Senna
        Brazil
        161
        41
        Nigel
        Mansell
        England
        187
        31
      //... more sample data
方法Formula1VerificationData返回符合预期结果的样品测试数据：
    internal static XElement Formula1VerificationData()
    {
      return XElement.Parse(@"
    ");
    }
测试数据的加载器实现了与ChampionsLoader类相同的接口：IChampionsLoader。这
个加载器仅使用样本数据，而不访问Web服务器：
    public class F1TestLoader: IChampionsLoader
    {
      public XElement LoadChampions() => XElement.Parse(Formula1SampleData());
    }
现在，很容易创建一个使用样本数据的单元测试：
    [TestMethod]
    public void TestChampionsByCountry2()
    {
      Formula1 f1 = new Formula1(new F1TestLoader());
      XElement actual = f1.ChampionsByCountry2("Finland");
      Assert.AreEqual(Formula1VerificationData().ToString(), actual.ToString());
    }
当然，真正的测试不应该只覆盖传递Finland作为一个字符串并在测试数据中返回两
个冠军这样一种情况。还应该针对其他情况编写测试，例如传递没有匹配结果的字符串，
返回两个以上的冠军的情况，可能还包括数字排序顺序与字母数字排序顺序不同的情况。
19.2.6 Fakes Framework
有时无法重构要测试的方法，使其独立于数据源，例如使用不能改变的旧代码。这
时，Fakes Framework能够提供很大的帮助。Fakes Framework是Visual Studio Enterprise
Edition提供的一个框架。
使用这个框架，可以测试ChampionsByCountry方法，而没有任何改变，仍然可以把服
务器排除在单元测试之外。记住，这个方法的实现代码使用XElement.Load，直接访问
Web服务器上的文件。Fakes 
Framework允许只针对测试用例改变ChampionsByCountry方
法的实现代码，用其他代码代替XElement.Load方法（代码文件UnitTestingSamples 
/
Formula1.cs）：
    public XElement ChampionsByCountry(string country)
    {
      XElement champions = XElement.Load(F1Addresses.RacersUrl);
      var q = from r in champions.Elements("Racer")
            where r.Element("Country").Value == country
            orderby int.Parse(r.Element("Wins").Value) descending
            select new XElement("Racer",
              new XAttribute("Name", r.Element("Firstname").Value + " " +
                r.Element("Lastname").Value),
              new XAttribute("Country", r.Element("Country").Value),
              new XAttribute("Wins", r.Element("Wins").Value));
      return new XElement("Racers", q.ToArray());
    }
为了在单元测试项目的引用中使用Fakes 
Framework，选择包括XElement类的程序
集。XElement类在System.Xml.Linq程序集中。当选择System.Xml.Linq程序集，打开上下
文菜单时，可看到Add 
Fakes 
Assembly菜单项。选择该菜单项将创建
System.Xml.Linq.4.0.0.0.Fakes程序集，
它在System.Xml.Linq.Fakes名称空间中包含一些填充码类。System.Xml.Linq程序集中
的所有类型在这个名称空间中都有填充码版本，例如，XAttribute有ShimXAttribute,
XDocument有ShimXDocument。
本例中只需要使用ShimXElement。对于XElement类中的每个公有的重载成员，
ShimXElement中都包含对应的成员。ShimXElement重载了XElement的Load（）方法，使
其可以接收String、Stream、TextReader和XMLReader类型作为参数，另外还提供了可接受
第二个参数LoadOptions的重载版本。具体来说，ShimXElement定义了LoadString（）、
LoadStream（）、LoadTextReader（）、LoadXmlReader（）成员方法，以及还可以接受
LoadOptions的成员方法，如LoadStringLoadOptions（）、LoadStreamLoadOptions（）
等。
所有这些成员都是委托类型，该委托类型允许指定一个自定义方法，在测试方法时，
将用自定义方法代替原方法调用。单元测试方法TestChampionsByCountry（）将
Formula1.ChampionsByCountry方法中带有一个参数的XElement.Load（）方法替换为
XElement.Parse（），以访问样本数据。ShimXElement.LoadString指定了新方法的实现。
使用填充码版本时，需要使用ShimsContext.Create方法创建一个上下文。该上下文一
直处于活动状态，直到在using代码块的末尾调用Dispose（）方法（代码文件
UnitTestingSamplesTests/Formula1Tests.cs）：
    [TestMethod]
    public void TestChampionsByCountry()
    {
      using (ShimsContext.Create())
      {
        ShimXElement.LoadString = s => XElement.Parse(Formula1SampleData());
        Formula1 f1 = new Formula1();
        XElement actual = f1.ChampionsByCountry("Finland");
        Assert.AreEqual(Formula1VerificationData().ToString(), actual.ToString())
;
      }
    }
虽然最好的方法是让要测试的代码具有灵活的实现，但在测试代码时，可以将Fakes