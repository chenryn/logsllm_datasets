= x3
1 + ax1 + b + d−3(x3
2 + ad2x2 + d3b)
1 + ax1 + b + (d−1x2)3 + ad−1x2 + b
(x1 − d−1x2)2
(x1 − d−1x2)2
− x1 − d−1x2
− x1 − d−1x2.
d component in the
Finally we obtain
Fu(z) = (x1 + d−1x2)(a + x1d−1x2) + 2b
(x1 − d−1x2)2
.
(5)
In other words, the PRF evaluation is a simple function of the x-coordinates of u1H1(z) and
u2H2(z).
This equation does not hold in the exceptional cases that u1H1(z) = 0E1 or u2H2(z) = 0E2,
which exactly correspond to U = uP or V = Hnon(z) having order less than q. To avoid these
cases when constructing a concrete NIZK proof system, we deﬁne the set F ⊆ E (see Section 4)
as F = {P ∈ E : q1P = 0E ∨ q2P = 0E}. Clearly F is negligibly small in E.
The E group law used above only applies in case the summands are distinct and not each
other’s negation, so we must verify that is the case for (x1, y1) and τ−1 ((x2, y2)). Since they
are in distinct subgroups E[q1] and E[q2] there is only a problem if both lie in the intersection of
those subgroups. As q1 and q2 are coprime, that intersection is exactly {0E}, which is excluded
by being a subset of F.
20
6 Eﬃcient NIZK
It remains to construct an eﬃcient NIZK proof for the relation
R = {((p, G, G, q, E, P, f,F, U, V, R), u) : U, V ∈ E \ F ∧ U = uP ∧ R = f(uV )G}.
In this section, we describe an arithmetic circuit11 over the ﬁeld Fp for this statement, where p
is the group order of G. Recall that the public points R ∈ G and U ∈ E are in diﬀerent groups.
By using a NIZK proof framework for arithmetic circuits that natively supports secret input
scalars s ∈ Fp given in public “commitments” sG ∈ G as inputs to the circuit, we avoid the
costly scalar multiplication f(uV ) · G in G. Note that in the typical case G is an elliptic curve
group of order p and deﬁned over a ﬁeld Fp0 with p0 6= p such that this multiplication would
be prohibitively expensive to implement in a circuit over the “wrong” ﬁeld Fp.
We optimize for a low number of multiplication gates in the circuit, which makes our
technique compatible and eﬃcient when used with NIZK proof frameworks for arithmetic circuit
satisﬁability meeting the aforementioned requirement of supporting inputs in commitments,
e.g., Bulletproofs [BBB+18] and the recent framework by Lai, Malavolta and Ronge [LMR19].
This section gives a high-level description of our circuit, which has 2030 multiplication
gates for a 256-bit curve. A full implementation of the circuit in Python is available [Wui19].
Elliptic Curve Selection. Arithmetic operations over elements in Fp will be native to our
circuit and thus very eﬃcient. To make use of these native operations, we would like to work
on elliptic curves E1 and E2 over the ﬁeld Fp, i.e., the coordinates of points on E1 and E2 are
elements of Fp. For typical choices of G (and hence p) such as the secp256k1 elliptic curve
used in Bitcoin, it is feasible to ﬁnd suitable curves E1 and E2 in few CPU days on a modern
laptop using the SageMath computer algebra system [Sag19]. We make our code and curve
parameters of E1 and E2 suitable for a few common choices available [Wui19].
For the sake of concreteness, we assume the secp256k1 curve in the remainder of this
section. For this choice of G, the group order is p = 2256 − 232 − 29 − 28 − 27 − 26 − 24 − 1,
which we treat as negligibly close to 2256.
Handling Exceptional Points. As our circuit relies on Eq. (5) to evaluate f, it is
not prepared to handle the exceptional points in the set F. However, since F is eﬃciently
recognizable, we can simply modify the prover and veriﬁer algorithm of a given NIZK proof
framework to immediately output ⊥ or 0, respectively, when run on an input with U ∈ F or
V ∈ F.
6.1 Construction of Arithmetic Circuit
Half-range Point Multiplication. Given the x-coordinates of uP and uV , the function
f can be computed with 4 multiplications using Eq. (5). Thus the main task of the circuit
is to perform the two scalar multiplications uP and uV . We use a variant of a wNAF
11 An arithmetic circuit with n inputs over a ﬁeld F is a directed acyclic graph with n vertices of in-degree 0
labeled with variables x1, . . . , xn taking values in F and whose all other vertices have in-degree 2 and are
labeled with one of the two arithmetic operations {+,×}.
21
(windowed Non Adjacent Form) algorithm. In more detail, we represent u by a 255-bit string
k = (k0,··· , k254) ∈ {0, 1}255 as
u = 80(1 + 2k0 + 4k1)(−1)k2 + 81(1 + 2k3 + 4k4)(−1)k5 + ···
+ 883(1 + 2k249 + 4k250)(−1)k251
+ (2252 + 2253k252 + 2254k253 + k254).
It can be veriﬁed that u ∈ {1, . . . , 2255}. Since Eq. (5) does not depend on the y-coordinate
of uV , the “sign” of u is irrelevant and p/2 is just below 2255, this range suﬃces for u. By
multiplying the entire equation with an input point Q ∈ {P, V }, we obtain
uQ = 80(1 + 2k0 + 4k1)(−1)k2Q + 81(1 + 2k3 + 4k4)(−1)k5Q + ···
+ 883(1 + 2k249 + 4k250)(−1)k251Q
+ (2252 + 2253k252 + 2254k253 + k254)Q,
a recipe for computing uQ. Our resulting algorithm evaluates the sum of points on the right-
hand side from left to right. The summands in the ﬁrst and second line can be precomputed
multiples of Q of the form [−8i · 7Q,−8i · 5Q,−8i · 3Q,−8i · Q, 8i · Q, 8i · 3Q, 8i · 5Q, 8i · 7Q]; the
lookup of these can be eﬃciently implemented as 2-bit lookups with an optional negation. The
summands in the last line correspond to other precomputed multiples of points; the lookup of
these can be implemented as 3-bit lookups.
A crucial property of this algorithm is that a point will never be added to itself or its
negation when computing the sum from the left to the right. This follows from the observation
that the absolute value of the coeﬃcient of any summand is always greater than the sum of all
coeﬃcients in the previous summands. By avoiding these two special cases, we can work with
an incomplete group law (see below).
Lookup Tables. We often need a circuit that implements a lookup in a constant table of 2m
values based on the value of m bits [HBHW19, Section A.3.3.9].
One bit. To implement the map {0 7→ v0, 1 7→ v1} based on the value of the bit b0, write the
expression as v0 + (v1 − v0)x. This is a linear expression in b0, so no multiplications are
needed.
Two bits. To implement the map {00 7→ v00, 10 7→ v10, 01 7→ v01, 11 7→ v11}, based on the
value of the variables b0 and b1, precompute A = v00, B = v10 − v00, C = v01 − v00,
D = v00 + v11 − v01 − v10. The lookup can then be written as A + Bx + Cy + Dxy. This
requires one multiplication to ﬁnd b0b1. When multiple lookups based on the same b0 and
b1 are needed, this multiplication can be shared across all of them.
Three bits. To implement a map from 3 bits b0, b1, and b2 to 8 values, precompute A = v000,
B = v100 − v000, C = v010 − v000, D = v001 − v000, E = v000 + v110 − v100 − v010,
F = v000 + v101 − v100 − v001, G = v000 + v011 − v010 − v001, H = v100 + v010 + v001 + v111 −
v000 − v110 − v101 − v011. The lookup can then be written as A + Bb0 + Cb1 + Db2 + Eb0b1 +
F b0b2 + Gb1b2 + Hb0b1b2. This requires 4 multiplications; one for each of b0b1, b0b2, b1b2,
and b0b1b2. Again these multiplications are shared across all lookups using the same input
bits.
22
Precomputed Odd Multiples of Points. To construct a circuit that looks up the
coordinates of one of [−8i · 7Q,−8i · 5Q,−8i · 3Q,−8i · Q, 8i · Q, 8i · 3Q, 8i · 5Q, 8i · 7Q]
where Q ∈ {P, V }, using 3 input bits b0, b1, b2 with just 2 multiplication gates, we start by
constructing two instances of the two-bit lookup circuit from the previous paragraph; one for
the x-coordinate of [8i · Q, 8i · 3Q, 8i · 5Q, 8i · 7Q] and one for the y-coordinate of those same
points. This consumes b0 and b1, and needs one gate (as the product of the two bits only needs
to be computed once). The bit b2 is then used to optionally negate the y-coordinate. That
costs another gate (Y = (2z − 1)Y 0), and extends the range to all 8 outputs.
Affine Elliptic Curve Point Addition. For point additions, it is often preferable to
represent curve points in Jacobian coordinates because this largely avoids expensive modular
divisions. However, when all we care about is verifying the validity of a given equation, modular
division is just as expensive as a multiplication – it is just a multiplication where the role of
the output is swapped with one of the inputs.
This makes the simpler, aﬃne coordinates more appealing. If the input points are
(x1, y1), (x2, y2) and their sum is (x3, y3), then for γ = (y2 − y1)/(x2 − x1) we have
y3 = γ(x1 − x3) − y1.
γ(x2 − x1) = (y2 − y1),
x3 = γ2 − x1 − x2,
It requires 3 multiplication gates to verify these equations. Note that even if we ignore the point
at inﬁnity, these formulas do not form a complete group law: If the two input points are each
other’s negation, no satisfaction can be found. If the two points are equal, γ(x2 − x1) = y2 − y1
will be valid for every value of γ. We stress that our circuit works securely with this incomplete
group law as discussed above.
6.2 Implementation and Performance Evaluation
To evaluate the performance of Purify we generated the arithmetic circuit for G = secp256k1,
and benchmarked it on a Bulletproofs implementation written in C. We make our code
available [Wui19, Nic20]. Besides the fact that it supports inputs given in commitments we
choose Bulletproofs as proof system because its security is based only on the DL assumption
in G, which we already require for the security of MuSig-DN. As a result, we do not introduce
computational assumptions beyond the hardness of DDH on the curves E1 and E2.
We ran the experiments on an Intel i7-7820HQ system pinned to 2.90 GHz using a single
thread and using no more than 50 MB of memory. The implementation takes advantage of
the secp256k1 endomorphism to speed up scalar multiplication, and leverages Bulletproofs’
support for batch veriﬁcation of multiple proofs (which can be used to verify the proofs of all
cosigners in a single batch). For reference, verifying a Schnorr signature takes 58 µs on the
same system. The results in Table 1 show that MuSig-DN is practical on commodity hardware.
The proof size is 1124 bytes. Bulletproofs [BBB+18] enables a signer to create a single
aggregate proof for multiple concurrent signing sessions, e.g., when signing multiple transactions
with the same set of cosigners at the same time. This would further save bandwidth because
the resulting aggregate proof is smaller than sending a separate proofs for every signing session.
We have not implemented this optimization.
23
Table 1. Running time of Bulletproofs with Purify arithmetic circuits for secp256k1, averaging over 50 runs.
Algorithm
Prover (Π.Prv)
Veriﬁer (Π.Ver)
Batch size
-
1
2
10
100
Time
943 ms
50 ms
61 ms
143 ms
1078 ms
7 Further Applications
We believe that our techniques are useful beyond the area of deterministic multi-signatures. In
this section we describe further promising applications of Purify. We leave a formal treatment
for future work.
Verifiable Encryption of Discrete Logarithms. A veriﬁable encryption scheme (VES)
is a public-key encryption scheme in which a ciphertext for some encryption key V comes
with a proof that (i) the ciphertext is indeed decryptable for anybody with the decryption
key corresponding to V , and (ii) the resulting plaintext has some special property. Purify
speciﬁcally applies to the veriﬁable encryption of a discrete logarithm, i.e., in our case property
(ii) means that the resulting plaintext is a discrete logarithm of some given public group
element R. The only VES we are aware of that supports this use case is by Camenisch and
Shoup [CS03] and is speciﬁc to discrete logarithms in ﬁnite ﬁelds and does not generalize to
other groups such as elliptic curve groups.
We believe that our techniques imply a VES for discrete logarithms in any prime-order
group G supported by our construction and in particular elliptic curve groups. Say V = vP ∈ E
is the public encryption key. To encrypt the discrete logarithm r of public group element
R = rG ∈ G to V , generate a random ephemeral scalar u of E, and output the ElGamal-style
ciphertext (U, c) = (uP, r + f(uV )) together with a NIZK proof that there is a witness (u, r)
such that
U = uP ∧ R = rG ∧ r = c − f(uV ),
ignoring expectional cases. This statement corresponds to the correct decryption r = c −
f(vU) = c − f(uV ). Observe that this statement is very similar to the proof statement used in
MuSig-DN; the only diﬀerence is that the discrete logarithm of R is oﬀset by an additional
public input c.
A practical usage example in the context of cryptocurrencies is veriﬁable encryption to an
escrow agent trusted by buyer and seller of a good [Zmn19]. In this scenario, the buyer (with
veriﬁcation key A = aG) does not trust the seller (with veriﬁcation key B = bG) to ship the
goods after receiving a payment in Bitcoin. Therefore, the buyer ﬁrst sends the coins to some
aggregate veriﬁcation key ˜X jointly controlled by both parties (e.g., ˜X can be generated from
A and B as in MuSig). Because the seller does not trust the buyer to ﬁnalize the payment
honestly, the buyer uses VES to encrypt her secret key a to the escrow agent, and sends the
resulting ciphertext together with the proof of correct encryption to the seller. After having
veriﬁed the proof of correct encryption with respect to the veriﬁcation key A, the seller delivers
the good. If the buyer now refuses to cooperate with the seller to unlock the money and send
24
it to the seller, the seller can instead provide an out-of-band proof of the buyer’s misbehavior
to the escrow agent and request the decryption of the buyer’s secret key a. The advantage of
this particular protocol is that the escrow agent does not need to be involved (and does not
even learn about the existence of the deal) in the common case that buyer and seller cooperate.
Nevertheless, the seller can be sure that the escrow agent is indeed able to obtain a due to the
use of VES.
Double-Authentication-Preventing Signatures. In a double-authentication-preventing
signature (DAPS) scheme [PS14, PS17], signatures on messages are created with respect to an
additional subject value. Signers are held accountable in the following sense: If a signer signs
two diﬀerent messages for the same subject, then the secret key can be computed from the
two signatures.
This property is supposed to disincentivize signers from signing conﬂicting statements, i.e.,
certify two diﬀerent public keys for the same individual (the subject). Even though initially
proposed for public-key infrastructures, DAPS have been proposed to be used in the context
of cryptocurrencies in non-equivocation contracts [RKS15] where the secret key is also used as
a key to access a cryptocurrency wallet. If the signer signs two conﬂicting statements, then
everybody is able to steal (or burn the funds) of the misbehaving signer.
Recall that discrete logarithm-based signature schemes suﬀer from the property that
reusing the same nonce R for two signatures on two diﬀerent messages will expose the secret
key. With this in mind, an obvious idea to construct DAPS is to turn this weakness into a
feature and force the signer to derive the nonce R deterministically from some secret and
the subject, such that signing two messages for the same subject will imply the use of the
same R and thus exposure of the secret key. However, this seemingly simple approach so far
has resisted all attempts to turn it into a concrete realization of DAPS. Derler, Ramacher,
and Slamanig [DRS18] explain the issues that arise when trying to use a VRF such as the
one by Dodis and Yampolskiy [DY05] and call the aforementioned idea a dead end, and all
existing constructions of DAPS in the discrete logarithm setting [RKS15, Poe18, DRS18] rely
on diﬀerent ideas. We conjecture that an approach that relies on Purify to derive R overcomes
these diﬃculties, precisely because it provides a stronger pseudorandomness property than the
Dodis-Yampolskiy PRF as discussed in Section 1.2.
Acknowledgments
We thank Tomer Ashur, Siemen Dhooghe, and Alan Szepieniec for help with ﬁnding parameters
for a comparison between Purify and Rescue (see Section 1.3). We further thank Mihir Bellare,
Greg Maxwell, Ruben Somsen, and the anonymous reviewers for their helpful comments and
suggestions.
References
[AAB+19]
Abdelrahaman Aly, Tomer Ashur, Eli Ben-Sasson, Siemen Dhooghe, and Alan Szepieniec. Design
of symmetric-key primitives for advanced cryptographic protocols. Cryptology ePrint Archive,
Report 2019/426, 2019. https://eprint.iacr.org/2019/426.
[ACG+19] Martin R. Albrecht, Carlos Cid, Lorenzo Grassi, Dmitry Khovratovich, Reinhard Lüftenegger,
Christian Rechberger, and Markus Schofnegger. Algebraic cryptanalysis of STARK-friendly
designs: Application to MARVELlous and MiMC. In Steven D. Galbraith and Shiho Moriai,
25