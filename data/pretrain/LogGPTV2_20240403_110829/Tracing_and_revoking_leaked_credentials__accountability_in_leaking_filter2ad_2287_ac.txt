(cid:17)·
(cid:16)
(cid:16)
z=1(γ+H(IDz,j ))(cid:17)(cid:17)
−γs, h∆k,j
γ+H(IDk,j ) , hs(cid:81)r
(cid:81)r
(cid:16)
z=1,z(cid:54)=k(γ+H(IDz,j ))+s(cid:81)r
e (g, h)s(cid:81)r
−s(cid:81)r
z=1,z(cid:54)=k(γ+H(IDz,j ))(cid:17)
1
z=1,z(cid:54)=k
e (g, h)
=
(cid:16)
(cid:81)r
e
g
e
g
=
1
z=1,z(cid:54)=k
Then it recovers M as M = C0/M(cid:48).
Correctness. Suppose CT is well formed for S, then
H(IDz,j )
1
z=1,z(cid:54)=k
z=1,z(cid:54)=k H(IDz,j ) ·
H(IDz,j )
with
∆k,j =
(cid:48)
M
H(IDz,j )
 .
H(IDz,j)
= e(g, h)s.
Thus, M = C0/M(cid:48).
For a user (IDk, i), if his codeword has a 0 in the j-th po-
sition, then he only has the private key for IDk|j|0. Thus,
he can only decrypt the ciphertext component CT0. Other-
wise, he can only decrypt CT1. The point is that a user can
have a key for either IDk|j|0 or IDk|j|1 in the position j.
Digital Forensics: When the owner suspects a PD from
having access to his ﬁles stored in the cloud without his
authorization, he can call the TTP to run this procedure
and ﬁnd the users who have taken part in creating this PD.
Usually, the PD is imperfect in the sense that it decrypts
the ciphertexts only with a probability less than one. This
issue has been extensively discussed and a robust ﬁngerprint
code can be employed in this case [4]. Hence, in the rest of
this paper, we assume that the PD is perfect, i.e.,
Pr[PD(Encrypt(M P K, S, M )) = M ] = 1.
When TTP receives a request to enforce digital forensics
on a PD and a set S of group identities, it ﬁrst calls the
Trace algorithm.
T ← Trace(M P K,PD, S): This algorithm takes as inputs
M P K and a PD able to decrypt the ciphertexts generated
with S = {IDz}r
z=1. It works in two steps. First, this algo-
rithm conducts the following experiments to ﬁnd the feasible
codeword associated with the illegal access credential used
by PD to access the data owner’s ﬁle.
This algorithm chooses each j from 1 to l and does the
following.
least one original access credential used to produce the il-
legal one. The two security properties are formally deﬁned
by two games: one is the semantic security game (Game 1)
and the other is the traceability game (Game 2).
1. Randomly choose two distinct symmetric keys Mj and
M(cid:48)
j.
2. Compute the ciphertexts
CT0 ← Encrypt
(cid:48)
1 ← Encrypt
(cid:48)
(cid:48)
CT
(M P K,{IDz|j|0}r
(M P K,{IDz|j|1}r
z=1, Mj),
z=1, M
(cid:48)
j).
3. Take ciphertext CT ∗ = (j, CT0, CT (cid:48)
PD. Deﬁne the output of PD as M∗
1) as the input of
j and set
(cid:26) 0 if M∗
∗
j =
ω
j = Mj,
1 otherwise.
j for j = 1, 2,··· , l to form
Finally, the algorithm uses all ω∗
2 ··· ω
∗
∗
1 ω
= ω
∗
l ,
∗
ω
which is set as the feasible codeword associated with the
illegal credential.
Second, the algorithm takes this codeword ω∗ as input of
the tracing algorithm TraF C of the underlying ﬁngerprint
code scheme. For a suspected group, this tracing algorithm
then outputs a set
T ⊆ {1,··· , n}.
Since our system is traceable against t-collusion attack
(we give the proof in next section), the set T is a subset
of the users whose access credentials or private keys were
leaked. TTP returns this set to the data owner as the re-
sponse for the digital forensics request so that the owner can
take further countermeasures (e.g., lawsuit).
User Revocation: When the digital forensics procedure
traces a set of users in group IDk who have leaked their ac-
cess credentials, the data owner can revoke the access rights
of this group to access his ﬁles. To revoke group IDk from
set S, the owner asks the TTP to compute twice
with
and
C2 ← (C2)
1
γ+H(IDk,j )
IDk,j = IDk|j|0 for CT0
IDk,j = IDk|j|1 for CT1,
respectively. Note that although this procedure is invoked
by the data owners, it does not require them perform the
revocation since all the tasks are done by the TTP.
5. FORMAL SECURITY ANALYSIS
In this section, we evaluate the security of our TRLAC
scheme.
Intuitively, we require TRLAC to have semanti-
cal security and traceability, where the former states that
someone having no access credential cannot get any useful
information about the ﬁle created by the data owner, and
the latter states that, if someone accesses the uploaded ﬁle
with an illegal access credential, then the TTP can ﬁnd at
z}r
Game 1: In this game, to capture the access attempts
from unauthorized users colluding with CSP, we deﬁne an
attacker which is able to query the users’ private keys. To
illustrate the security against this attack, we challenge the
attacker with a ciphertext that cannot be decrypted by any
of the queried private keys. The attacker has to output its
guess on the challenge ciphertext. More formally, the at-
tacker is able to choose to be challenged on an encryption
to a set of group identities, i.e., S∗ = {ID∗
z=1 and ask
for any private key of (IDk, i ∈ [1, n]) on the condition that
IDk (cid:54)∈ S∗. This game is deﬁned as follows between an ad-
versary A and a challenger.
Init: The adversary A outputs a set S∗ = {ID∗
group identities that it wants to attack.
Setup: The challenger runs the setup algorithm to obtain
a master public key M P K and give it to adversary A.
Phase 1: The adversary A speciﬁes a user’s identity (IDk, i).
In response, the challenger creates a key for this identity by
calling the KeyGen algorithm, and sends this key to A.
Challenge: The adversary A outputs two equal-length mes-
sages M0 and M1 with an extra restriction that any queried
group identity is not involved in S∗. The challenger ﬂips a
coin β ∈ {0, 1}, encrypts Mβ under identity S∗ and returns
the ciphertext CT ∗ to A.
Phase 2: This is the same as Phase 1 with the constraint
that any group identity queried in this phase must not be
included in S∗.
Guess: The attacker outputs a guess β(cid:48) ∈ {0, 1}.
The advantage of an attacker A in this game is deﬁned as
z=1 of
z}r
AdvSA = |P [β = β
(cid:48)
] − 1/2|.
Definition 1. A TRLAC system is semantically secure
against chosen-plaintext attacks if any polynomial-time ad-
versary A has only a negligible advantage in the above game.
The semantic security states that any polynomial-time at-
tacker cannot distinguish the ciphertexts of two equal-length
messages encrypted to the challenge set, provided that the
attacker cannot query for private keys which can be used to
decrypt the challenge ciphertext.
Game 2: In this game, we deﬁne an adversary which can
collude with authorized users by querying their private keys
(these users are then regarded as traitors who leaked their
keys). Then the adversary can use these keys to create a PD
through which one can illegally access data without directly
identifying the traitors. The adversary terminates the key
queries by outputting the pirate decryptor as a challenge.
Formally, this game is deﬁned as follows.
Setup: The challenger runs the setup algorithm to obtain
the master public key M P K and give it to adversary A.
Query: For a query on (ID, i) from A, the challenger re-
sponds by calling the KeyGen algorithm and returning the
key SKID,i to A.
Challenge: The adversary A outputs a pirate decryptor
PD for a set S∗ of group identities.
Trace: The challenger runs the Trace(M P K,PD, S∗) algo-
rithm and outputs a set T ⊆ {1,··· , n} for the suspected
group. Let S denote the set of users with private keys queried
by A. The adversary wins this game if the following condi-
tions hold:
(1) The set T is empty or is not a subset of S.
(2) There are at most t private key queries with group
(3) The pirate decryptor PD is perfect, i.e.,
identities included in S∗.
Pr[PD(Encrypt(M P K, S
∗
, M )) = M ] = 1
The ﬁrst condition is straightforward and the third one is
required by the assumption about PD as described in the
digital forensics procedure. The second condition is required
by the underlying ﬁngerprint codes [24]. Since this scheme
is secure against at most t colluders, then it is also required
that there are at most t queried private keys that can be
used to directly decrypt the encryption with S∗.
The advantage of an attacker A in this game is deﬁned as
AdvTA = Pr[A wins].
Definition 2. A TRLAC system is t-collusion resistant
if for all polynomial-time adversary A we have that AdvSA
and AdvTA are negligible in Game 1 and Game 2, respectively.
The t-collusion resistant security implies that: 1) there is
semantic security and 2) at least one member of any collusion
of at most t members can be found out.
The following formal claim guarantees that our TRLAC
is semantically secure and traceable.
Theorem 1. Our TRLAC scheme is t-collusion resistant
if the ﬁngerprint codes scheme [24] is t-collusion resistant
and the underlying IBBE scheme [11] is semantically secure
against chosen-plaintext attacks. Formally, let l denote the
length of the ﬁngerprint code and |M| the size of the mes-
sage space. Then, for all t > 0, n ≥ t, any polynomial-time
attacker breaks our TRLAC system with advantage at most
AdvTA ≤ l · AdvSA +  +
l
|M| .
If the TRLAC scheme is semantically secure, then the
advantage AdvSA of any adversary breaking its semantic se-
curity is negligible. The code length l is much less than
the message space size |M|, so l/|M| is a negligible quo-
tient. Since the underlying ﬁngerprint codes scheme has
been shown -secure, the advantage AdvTA of any adversary
breaking the scheme’s traceability is negligible, which means
that the TRLAC scheme is t-collusion resistant. The proof
of this theorem is given in the Appendix.
6. PERFORMANCE EVALUATION
In this section, we evaluate the TRLAC scheme both the-
oretically and experimentally. The analyses show that the
introduction of traceability hardly aﬀects the most frequent
processes of ﬁle outsourcing and ﬁle access. The TRLAC
scheme is eﬃcient to be employed in cloud storage systems
to provide traceability of leaked access credentials, as well
as protection of the outsourced data.
6.1 Theoretical Analysis
We ﬁrst analyze the computational complexity of the pro-
posed scheme in each of its procedures. In this analysis, we
treat the underlying ﬁngerprint scheme as a black-box and
Table 1: Computation
Operation
Computational Complexity
1τpair + (m + 2)τexp + O(GenF C )
System Setup
User Admission
File Creation
File Access
Digital Forensics
User Revocation
l · τexp
2 · (|S| + 4)τexp
2 · τpair + |S| · τexp
2l · (|S| + 4)τexp + O(TraF C )
2 · τexp
let O(GenF C ) and O(TraF C ) denote the computation com-
plexity of GenF C and TraF C , respectively. We focus on the
most time-consuming operations, i.e., exponentiation and
bilinear pairing map, conducted in groups G and GT . Their
time is respectively denoted by τexp and τpair, without dis-
criminating exponentiations in G and GT . Also, we do not
discriminate a multi-base exponentiation from a single-base
one, as the latter is only slightly more eﬃcient. The time to
sample a random element in G is approximated to (indeed,
slightly less than) the time to compute an exponentiation.
We do not take into account the time costs of the symmetric
encryption and decryption in our evaluation, since both are
relatively negligible compared to the asymmetric encryption
and decryption.
Table 1 summarizes the computation cost of each proce-
dure in our TRLAC scheme. In this table, m denotes the
maximal size of the set of groups in which each member can
access a stored ﬁle and |S| ≤ m denotes the size of set S spec-