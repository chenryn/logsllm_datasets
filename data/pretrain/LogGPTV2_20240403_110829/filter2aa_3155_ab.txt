different parsing primitives for the URL components following the scheme.
The available character set is well defined, allowing lowercase letters, digits, plus sign (+), 
period (.) and a hyphen (-). As of RFC 2396, valid schemes require the first character to be a 
lowercase letter. Prior to that, any combination of the character set was valid as a scheme. 
Here is how a scheme is defined in RFC 2396 and RFC 3986:
scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
And here is how it is defined in RFC 1738 and RFC 1808: 
scheme      
= 1*[ lowalpha | digit | "+" | "-" | "." ]
The scheme is the only required component; all others are optional. 
Authority/Netloc
This component's name was changed from netloc to authority, but still refers to the host that 
holds the wanted resource.
The authority component of the URL is built from three sub-components, below.
authority   = [ userinfo "@" ] host [ ":" port ]
Whereas userinfo is a user:password string, host is either a hostname or an IP address, 
and port is a digit within the valid port range.
As of RFC 2396, the usage of user:password was discouraged, and in RFC 3986 it was
deprecated.
RFC 2396
Some URL schemes use the format "user:password" in the userinfo
field. This practice is NOT RECOMMENDED, because the passing of
authentication information in clear text (such as URI) has proven to
be a security risk in almost every case where it has been used.
RFC 3986
Use of the format "user:password" in the userinfo field is
deprecated.  Applications should not render as clear text any data
URL Components
Scheme
The scheme defines the protocol to be used (i.e. HTTP, HTTPS, FTP etc.), and could define
different parsing primitives for the URL components following the scheme.
The available character set is well defined, allowing lowercase letters, digits, plus sign (+), 
period (.) and a hyphen (-). As of RFC 2396, valid schemes require the first character to be a 
lowercase letter. Prior to that, any combination of the character set was valid as a scheme. 
Here is how a scheme is defined in RFC 2396 and RFC 3986:
scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
And here is how it is defined in RFC 1738 and RFC 1808:
scheme      
= 1*[ lowalpha | digit | "+" | "-" | "." ]
The scheme is the only required component; all others are optional. 
Authority/Netloc
This component's name was changed from netloc to authority, but still refers to the host that 
holds the wanted resource.
The authority component of the URL is built from three sub-components, below.
authority   = [ userinfo "@" ] host [ ":" port ] 
Whereas userinfo is a user:password string, host is either a hostname or an IP address, 
and port is a digit within the valid port range.
As of RFC 2396, the usage of user:password was discouraged, and in RFC 3986 it was
deprecated.
RFC 2396
Some URL schemes use the format "user:password" in the userinfo
field. This practice is NOT RECOMMENDED, because the passing of
authentication information in clear text (such as URI) has proven to
be a security risk in almost every case where it has been used.
RFC 3986
Use of the format "user:password" in the userinfo field is
deprecated.  Applications should not render as clear text any data
URL Components
Scheme
The scheme defines the protocol to be used (i.e. HTTP, HTTPS, FTP etc.), and could define
different parsing primitives for the URL components following the scheme.
The available character set is well defined, allowing lowercase letters, digits, plus sign (+), 
period (.) and a hyphen (-). As of RFC 2396, valid schemes require the first character to be a 
lowercase letter. Prior to that, any combination of the character set was valid as a scheme. 
Here is how a scheme is defined in RFC 2396 and RFC 3986:
scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
And here is how it is defined in RFC 1738 and RFC 1808:
scheme      
= 1*[ lowalpha | digit | "+" | "-" | "." ]
The scheme is the only required component; all others are optional. 
Authority/Netloc
This component's name was changed from netloc to authority, but still refers to the host that 
holds the wanted resource.
The authority component of the URL is built from three sub-components, below.
authority   = [ userinfo "@" ] host [ ":" port ]
Whereas userinfo is a user:password string, host is either a hostname or an IP address, 
and port is a digit within the valid port range.
As of RFC 2396, the usage of user:password was discouraged, and in RFC 3986 it was
deprecated.
RFC 2396 
    Some URL schemes use the format "user:password" in the userinfo 
    field. This practice is NOT RECOMMENDED, because the passing of 
    authentication information in clear text (such as URI) has proven to 
    be a security risk in almost every case where it has been used. 
RFC 3986
Use of the format "user:password" in the userinfo field is
deprecated.  Applications should not render as clear text any data
claroty.com
8
Copyright Â© 2021 Claroty Ltd. All rights reserved
RFC 3986
PATH
This component identifies the specific resource that is accessed.
Even though the path seems like the simplest component of a URL, it is also the component that was changed the most 
over the years.
In RFC 1738 and RFC 1808, the path component is dependent entirely on the specified scheme. Generally, the path is 
built from printable characters specifying a directory path leading to the wanted file. The only reserved characters are a 
semicolon (;), a forward slash (/) and a question mark (?); these are reserved for protocol-specific settings. The semicolon (;) 
is reserved for passing parameters to the protocol, for example in the FTP protocol, semicolon is used for passing the 
type opcode. 
However, RFC 2396 changed how a path is built. RFC 2396 defined it this way: 
after the first colon (":") character found within a userinfo
subcomponent unless the data after the colon is the empty string
(indicating no password).  Applications may choose to ignore or
reject such data when it is received as part of a reference and
should reject the storage of such data in unencrypted form.  The
passing of authentication information in clear text has proven to be
a security risk in almost every case where it has been used.
Path
This component identifies the specific resource that is accessed.
Even though the path seems like the simplest component of a URL, it is also the component
that was changed the most over the years.
In RFC 1738 and RFC 1808, the path component is dependent entirely on the specified 
scheme. Generally, the path is built from printable characters specifying a directory path leading 
to the wanted file. The only reserved characters are a semicolon (;), a forward slash (/) and a 
question mark (?); these are reserved for protocol-specific settings. The semicolon (;) is 
reserved for passing parameters to the protocol, for example in the FTP protocol, semicolon is 
used for passing the type opcode.
Url_path 
=  //...//;type=
However, RFC 2396 changed how a path is built. RFC 2396 defined it this way:
path          = [ abs_path | opaque_part ] 
path_segments = segment *( "/" segment ) 
segment       = *pchar *( ";" param ) 
param
= *pchar 
pchar         = unreserved | escaped | 
        ":" | "@" | "&" | "=" | "+" | "$" | "," 
   The path may consist of a sequence of path segments separated by a 
   single slash "/" character.  Within a path segment, the characters 
   "/", ";", "=", and "?" are reserved.  Each path segment may include a 
   sequence of parameters, indicated by the semicolon ";" character. 
   The parameters are not significant to the parsing of relative 
   references. 
after the first colon (":") character found within a userinfo
subcomponent unless the data after the colon is the empty string
(indicating no password).  Applications may choose to ignore or
reject such data when it is received as part of a reference and
should reject the storage of such data in unencrypted form.  The
passing of authentication information in clear text has proven to be
a security risk in almost every case where it has been used.
Path
This component identifies the specific resource that is accessed.
Even though the path seems like the simplest component of a URL, it is also the component
that was changed the most over the years.
In RFC 1738 and RFC 1808, the path component is dependent entirely on the specified 
scheme. Generally, the path is built from printable characters specifying a directory path leading 
to the wanted file. The only reserved characters are a semicolon (;), a forward slash (/) and a 
question mark (?); these are reserved for protocol-specific settings. The semicolon (;) is 
reserved for passing parameters to the protocol, for example in the FTP protocol, semicolon is 
used for passing the type opcode.
Url_path 
=  //...//;type= 
However, RFC 2396 changed how a path is built. RFC 2396 defined it this way:
path          = [ abs_path | opaque_part ]
path_segments = segment *( "/" segment )
segment       = *pchar *( ";" param )
param         = *pchar
pchar         = unreserved | escaped |
":" | "@" | "&" | "=" | "+" | "$" | ","
The path may consist of a sequence of path segments separated by a
single slash "/" character.  Within a path segment, the characters
"/", ";", "=", and "?" are reserved.  Each path segment may include a
sequence of parameters, indicated by the semicolon ";" character.
The parameters are not significant to the parsing of relative
references.
Some URL schemes use the format "user:password" in the userinfo
field. This practice is NOT RECOMMENDED, because the passing of
authentication information in clear text (such as URI) has proven to
be a security risk in almost every case where it has been used.
RFC 3986 
    Use of the format "user:password" in the userinfo field is 
    deprecated.  Applications should not render as clear text any data 
    after the first colon (":") character found within a userinfo 
subcomponent unless the data after the colon is the empty string
    (indicating no password).  Applications may choose to ignore or 
    reject such data when it is received as part of a reference and 
    should reject the storage of such data in unencrypted form.  The 
    passing of authentication information in clear text has proven to be 
    a security risk in almost every case where it has been used. 
Path
This component identifies the specific resource that is accessed.
Even though the path seems like the simplest component of a URL, it is also the component
that was changed the most over the years.
In RFC 1738 and RFC 1808, the path component is dependent entirely on the specified 
scheme. Generally, the path is built from printable characters specifying a directory path leading 
to the wanted file. The only reserved characters are a semicolon (;), a forward slash (/) and a 
question mark (?); these are reserved for protocol-specific settings. The semicolon (;) is 
reserved for passing parameters to the protocol, for example in the FTP protocol, semicolon is 
used for passing the type opcode.
Url_path 
=  //...//;type=
However, RFC 2396 changed how a path is built. RFC 2396 defined it this way:
path          = [ abs_path | opaque_part ]
path_segments = segment *( "/" segment )
segment       = *pchar *( ";" param )
param         = *pchar
pchar         = unreserved | escaped |
":" | "@" | "&" | "=" | "+" | "$" | ","
The path may consist of a sequence of path segments separated by a
single slash "/" character.  Within a path segment, the characters
"/", ";", "=", and "?" are reserved.  Each path segment may include a
sequence of parameters, indicated by the semicolon ";" character.
The parameters are not significant to the parsing of relative
references.
claroty.com
9
Copyright Â© 2021 Claroty Ltd. All rights reserved
RFC 2396 specified that each path segment (separated by a single slash, /) could have parameters indicated by a semicolon 
(;). Now each path segment could specify a parameter relevant to it. 
RFC 3986, which came soon after, removed support for URL parameters, and made the path specification close to how it 
was before, returning to protocol-specific parsing. The FTP protocol for example retained the usage of its parameters, and 
the HTTP protocol still did not support them.
QUERY
A query is a key-value pair of information that should be accessed, interpreted, and used by the resource. As stated in 
RFC 3986, the query component is indicated by the first question mark (?) character, and terminated by a number sign (#) 
character or by the end of the URI. Within a query component, the characters, semicolon (;), forward slash (/),  question 
mark (?), colon (:), at-symbol (@), ampersand (&), equal sign (=), plus sign (+), comma (,), and dollar sign ($) are reserved, and 
if used, will be URL encoded.
The query component has not changed much over the years. 
FRAGMENT
The fragment is the last URL component, and is used to identify and access a second resource within the first fetched 
resource specified by the path component. A fragment component is indicated by the presence of a number sign (#) and is 
terminated by the end of the URI. 
As weâve seen, the URL specification has changed significantly during the last 25 years, and URL parsers should have 
changed to support the new specifications. However, implementing all of these changes while remaining backward-
compatible is not an easy job.
Furthermore, many URI components use the same reserved characters, something that could theoretically lead to confusion. 
For example, the colon (:) is used to specify many things, including the URI scheme, the supplied user:password,  
and the port. Sometimes, common characters could lead parsers into mistakenly separating the wrong parts of the URI.
RFC 2396 specified that each path segment (separated by a single slash, /) could have 
parameters indicated by a semicolon (;). Now each path segment could specify a parameter 
relevant to it.  
RFC 3986, which came soon after, removed support for URL parameters, and made the path 
specification close to how it was before, returning to protocol-specific parsing. The FTP protocol 
for example retained the usage of its parameters, and the HTTP protocol still did not support 
them. 
path          = path-abempty    ; begins with "/" or is empty 
                    / path-absolute   ; begins with "/" but not "//" 
                    / path-noscheme   ; begins with a non-colon segment 
                    / path-rootless   ; begins with a segment 
                    / path-empty      ; zero characters 
path-abempty  = *( "/" segment ) 
path-absolute = "/" [ segment-nz *( "/" segment ) ] 
path-noscheme = segment-nz-nc *( "/" segment ) 
path-rootless = segment-nz *( "/" segment ) 
path-empty    = 0 
segment       = *pchar 
segment-nz    = 1*pchar 
segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / "@" ) 
                    ; non-zero-length segment without any colon ":" 
pchar         = unreserved / pct-encoded / sub-delims / ":" / "@" 
Query 
A query is a key-value pair of information that should be accessed, interpreted, and used by the 