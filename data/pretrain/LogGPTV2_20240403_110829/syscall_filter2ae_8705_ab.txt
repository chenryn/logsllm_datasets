该结构体中会包含所有的原生函数，也即委托的签名，这样就可以在之后的syscall中使用它们了。
在定义委托之前，先看一下NtCreateFile在C中的语法。
    __kernel_entry NTSTATUS NtCreateFile(
      OUT PHANDLE           FileHandle,
      IN ACCESS_MASK        DesiredAccess,
      IN POBJECT_ATTRIBUTES ObjectAttributes,
      OUT PIO_STATUS_BLOCK  IoStatusBlock,
      IN PLARGE_INTEGER     AllocationSize,
      IN ULONG              FileAttributes,
      IN ULONG              ShareAccess,
      IN ULONG              CreateDisposition,
      IN ULONG              CreateOptions,
      IN PVOID              EaBuffer,
      IN ULONG              EaLength
    );
在上面的语法结构中，有一些内容是我们之前没看到过的。
首先，NtCreateFile函数的返回类型为[NTSTATUS](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55)，该结构体中包含了代表每个消息标识符的无符号32位整数。除此之外，该函数中的部分参数接受的是一组不同的标志或者结构，比如说[ACCESS_MASK](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/7a53f60e-e730-4dfe-bbe9-b21b62eb790b)标志，[OBJECT__ATTRIBUTES](https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes)结构以及[IO_STATUS_BLOCK](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_io_status_block)结构。
如果再查看一下其他参数的定义，比如说`FileAttributes`还有`CreateOptions`，我们会发现这些参数接受的也是特定的标志。
所以如果想要在C#中使用非托管代码，就存在一个关键问题，我们需要 **手动**
创建这些标志的枚举类型以及结构，让其与上述Windows定义的值相同。否则，如果我们传递到syscall的参数与定义不符，就会导致syscall中断或者返回错误信息。
值得庆幸的是，[P/Invoke
wiki](https://www.pinvoke.net/)中包含相关信息。我们可以在这里查找如何实现原生的函数，结构体以及标志。
你也可以在Microsoft的[Reference
Source](https://referencesource.microsoft.com/)上搜索需要的特定结构以及标志信息。这里的内容应该比P/Invoke中的内容更接近原始的Windows参考手册。
下列链接有助于我们实现NtCreateFile函数中所需的必要结构以及标志：
  * [NTSTATUS](https://www.pinvoke.net/default.aspx/Enums/NtStatus.html)
  * [ACCESS_MASK](https://www.pinvoke.net/default.aspx/Enums.ACCESS_MASK)
  * [OBJECT_ATTRIBUTES & IO_STATUS_BLOCK](https://www.pinvoke.net/default.aspx/ntdll.ntcreatefile)
  * [FileAttributes, ShareAccess & CreateDisposition](https://www.pinvoke.net/default.aspx/kernel32.CreateFile)
由于这些值，结构和标志对于Windows来说都是“原生”的，我们把它们添加到`Native.cs`文件下的`Native`类中。
所有内容添加完毕后，下图显示了`Native.cs`文件的部分内容：
注意，上图只显示了一部分已经实现的原生结构与标志。如果要阅读完整内容，请查看我的GitHub上SharpCall项目中的[Native.cs](https://github.com/jhalon/SharpCall/blob/master/Native.cs)文件。
此外，注意到在每个结构以及标志枚举器之前我们都添加了[public](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/public)关键字。这样我们就能从程序的其他文件中访问这些内容了。
实现以上内容后，我们就可以把NtCreateFile中C++形式的数据类型转换为C#形式的数据类型。转换后，该函数在C#中的语法应该为：
    NTSTATUS NtCreateFile(
      out Microsoft.Win32.SafeHandles.SafeFileHandle FileHadle,
      FileAccess DesiredAcces,
      ref OBJECT_ATTRIBUTES ObjectAttributes,
      ref IO_STATUS_BLOCK IoStatusBlock,
      ref long AllocationSize,
      FileAttributes FileAttributes,
      FileShare ShareAccess,
      CreationDisposition CreateDisposition,
      CreateOption CreateOptions,
      IntPtr EaBuffer,
      uint EaLength
    );
在按照该结构定义一个委托之前，我们先简要介绍一下上面的部分数据类型。
之前说过，C++中的指针或句柄在C#中一般都可以转换为[IntPtr](https://docs.microsoft.com/en-us/dotnet/api/system.intptr?view=netframework-4.8)，但在此例中，我把PHANDLE（指向[句柄](https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types#handle)的指针）转换成了[SafeFileHandle](https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.safehandles.safefilehandle?view=netframework-4.8)类型。之所以这么做是因为在C#中
**SafeFileHandle** 代表了一个文件句柄的包装类。
因为我们需要创建文件，并且会通过委托把数据从托管代码传递到非托管代码（或者反向），所以我们要确保C#可以处理并理解它要marshaling的数据类型，否则可能会报错。
其余的数据类型应该很简单，因为`FileAttributes`，`FileShare`这些类型代表的就是我们添加到`Native`类中的结构以及标志枚举器中的变量和值。每次把数据传递给这些参数（无论是值还是描述符）时，都需要与特定的结构或是标志枚举器相对应。
你可能也注意到，我在一些参数中添加了[ref](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref)和[out](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier)关键字。这两个关键字表明参数是通过引用而不是值传递。
**ref** 和 **out** 之间的区别在于， **ref** 关键字表示参数在传递之前必须先对其进行初始化，而 **out**
则不需要。另一个区别是， **ref** 关键字表示数据可以双向传递，并且当控制权返回到调用方法时，在被调用方法中对参数的任何修改都会反映到对应的变量中。而
**out** 关键字表示数据仅在单向传递，并且无论调用方法返回的值是什么，最后都会被设置成该引用变量。
所以在NtCreateFile函数中，我们为`FileHandle`添加了 **out** 关键字，因为如果函数执行 **成功** ，该参数会是一个指向用于
**接收** 文件句柄的变量的指针。这就表示数据只会被“传回”给我们。
接下来我们就可以把符合C#语法的NtCreateFile函数添加到`Syscalls`类中的`Delegates`结构中了。
完成后，Syscalls类应该如下所示。
**注意** ：我在文件顶部添加了`using static
SharpCall.Native`。它告诉了C#使用叫做`Native`的静态类。之前已经解释过了，这么做就可以直接使用原生的函数，结构以及标志，而不需要添加类名的限定了。
在继续下一步之前，还要注意到在Delegates结构中，在设置NtCreateFile的委托类型之前，我还调用了[UnmanagedFunctionPointer](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.unmanagedfunctionpointerattribute?view=netframework-4.8)属性。该属性会控制委托的签名的marshaling行为，在传入或传出非托管代码时，与非托管函数指针类型进行转换。
该属性的添加十分关键，因为我们会使用不安全代码把非托管指针类型从syscall汇编代码marshal到上述函数委托中，正如上一篇文章所述。
太好了，我们已经取得了一些进展，定义了结构，标志枚举器以及函数委托，现在我们需要进一步实现该委托，从而处理传递给该委托的任何参数。这些参数会先被初始化，然后由syscall汇编代码进行处理。
先创建，或者说实例化我们的NtCreateFile函数委托。这部分内容可以直接添加在在syscall汇编代码之后。
创建完成后，`Syscalls.cs`文件应如下所示。
实例化委托后的`TODO`注释部分，会用来添加对传递于托管与非托管代码之间的数据进行处理的代码。
在上一篇文章中，我解释了[Marshal.GetDelegateForFunctionPointer](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.getdelegateforfunctionpointer?view=netframework-4.8#System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_System_IntPtr_System_Type_)允许我们将非托管函数指针转换为指定类型的委托。
如果在[unsafe](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/unsafe)的上下文中使用该方法，我们就能创建一个指向shellcode所在内存位置的指针（即syscall汇编代码），并使用委托在托管代码中执行该汇编代码。
我们会在这里执行同样的操作。先创建一个新的名为`syscall`的[字节数组](https://docs.microsoft.com/en-us/dotnet/api/system.byte?view=netframework-4.8)，并将其设置为`bNtCreateFile`汇编代码的内容。
完成后，设置 **unsafe** 上下文并在大括号中添加不安全的代码。
更新完成后的`Syscalls.cs`文件应如下所示。
我在上一篇文章中也解释过，在该不安全上下文中，我们会初始化一个新的名为`ptr`的字节指针，将其设置为`syscall`的内容，也就是汇编代码的字节数组。
之后，如前文所述，我们为指针添加了[fixed](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/fixed-statement)语句，这样我们就能防止垃圾回收器在内存中对syscall字节数组进行重新定位。
之后，我们会直接把字节数组指针转换（[cast](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions)）成一个叫做`memoryAddress`的IntPtr。 这样我们就能在程序执行期间获取到syscall字节数组所处的内存地址了。
更新完成后的`Syscall.cs`文件应如下所示。
接下来要格外注意了，下面就是奇迹发生的地方！ 😉
由于我们现在已经拥有了（或将要拥有）程序执行期间syscall汇编代码所在的内存地址，我们需要完成一些操作以确保这部分代码能够在其分配的内存区域内得到正确的执行。
如果你熟悉exploit开发期间shellcode的工作原理——每当我们想要在目标进程或目标内存页中写入，读取或者执行shellcode的时候，首先要确保这部分内存区域具有相应的访问权限。
如果你对此还不熟悉，请阅读有关Windows安全模型对[进程安全及访问权限](//docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights))进行控制的内容。
比如说，让我们看看 **NtCreateFile** 函数在记事本中执行时具有怎样的内存保护。
    0:000> x ntdll!NtCreateFile
    00007ffb`f6b9cb50 ntdll!NtCreateFile (NtCreateFile)
    0:000> !address 00007ffb`f6b9cb50
    Usage:                  Image
    Base Address:           00007ffb`f6b01000
    End Address:            00007ffb`f6c18000
    Region Size:            00000000`00117000 (   1.090 MB)