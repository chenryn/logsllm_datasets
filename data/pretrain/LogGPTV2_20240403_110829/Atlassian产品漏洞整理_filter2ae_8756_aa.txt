# Atlassian产品漏洞整理
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Atlassian简介
以下来自Atlassian中文官方微信公众号。
>
> 关于Atlassian：全球领先的软件开发和协作平台，为全球11万家企业提供创新的力量。全球前100强公司有超过90%的企业都在使用Atlassian的产品。其明星软件Jira
> Software为全球敏捷团队的首选软件开发工具，帮助开发团队规划、追踪和发布世界一流的软件。Atlassian的Marketplace拥有数千款不同功能的应用程序，可帮助您自定义和扩展Atlassian的功能。
>
>
> Atlassian的全球客户包括：HSBC、摩根士丹利、耐飞、宝马、奔驰、耐克、Oracle、GSK，Airbnb、CSIRO、特斯拉、Autodesk、eBay、丰田等。
>
>
> Atlassian的中国客户包括：百度、华为、联想、滴滴、京东、360企业安全、小米、顺丰、摩拜、招商银行、民生银行、中信银行、平安证券、泰康人寿、中华保险、众安保险等。
###  参考
  * [Atlassian：一家没有销售团队，不靠融资做到百亿美元市值的技术公司](https://mp.weixin.qq.com/s/EqlK9WjFpYndjqohC6LuCg)
  * [Atlassian 这家公司的产品为什么这么火？](https://www.zhihu.com/question/20721319)
  * [协同软件供应商Atlassian估值超30亿美元](https://mp.weixin.qq.com/s/jHxzaSN6GcFkpyA03j4lWA)
  * [非典型硅谷式创业 科技公司Atlassian的奇迹](https://mp.weixin.qq.com/s/ypynzvRyD3nFUkFenE5BQg)
  * [中国移动通信研究院：为什么选择Atlassian项目管理及协作工具](https://mp.weixin.qq.com/s/1SudKlnZdMc5TG-goK8B1w)
  * [Atlassian中国封面人物 | 李晓东，打造民生银行软件工程平台](https://mp.weixin.qq.com/s/Y7sOihxHPEceM_6w8G1o9w)
  * [拐点临近 – 美国国防部 Atlassian 应用程序的扩展之路](https://mp.weixin.qq.com/s/A23MCCOEAU9pGvhYG_qg9Q)
## Atlassian核心产品简介
Atlassian服务端软件主要有
  * Jira（缺陷跟踪管理系统。该系统主要用于对工作中各类问题、缺陷进行跟踪管理）
  * Confluence（企业知识管理与协同软件，也可以用于构建企业WiKi）
  * Bitbucket（Git代码托管解决方案）
其中最著名的是Jira和Confluence。很多大厂包括(Apache的issue)用Jira跟踪bug和漏洞，也有很多大厂用Confluence作为一个在线协作文档编写的工具。
## Jira相关背景知识
背景知识主要内容翻译自官方文档。
###  WebWork
Jira使用MVC框架WebWork（不同于Struts 2）来处理用户发起的WEB请求。每个请求都是使用WebWork
action来处理，在其中又使用了其他的utility and Manager classes来完成一个任务。
作为响应返回给客户端的HTML大部分都是View层的JSP生成的。  
URL中的”.jspa”后缀标识其后端对应的是一个JSP文件。
在Jira中，URL到Java类的映射关系是通过Webwork
1.x框架来完成的。其文档可以参考：
而在Confluence, Bamboo and Crowd中，已经被Webwork 2所取代。
classes和URL的对应关系在actions.xml文件中声明了
    src/webapp/WEB-INF/classes/actions.xml
其典型的样子大概长这样：
            /secure/admin/views/workflow/viewworkflowtransition.jsp
                /secure/admin/views/workflow/viewworkflowtransition.jsp
                /secure/admin/views/workflow/viewworkflowtransition.jsp
                /secure/admin/views/workflow/viewworkflowtransition.jsp
                /secure/admin/views/workflow/viewworkflowtransition.jsp
详细参考：  
注意几点：
  * 每个action都有一个`alias`属性，其实就是你在浏览器看到的URL的一部分。而`name`属性就是这个alias对应的Java类。
  * command元素的name属性可以在URL中加上`!commandName`作为其后缀，然后需要在对应的Action类中实现`doCommandName()`方法。
  * 如果action中没有指定`roles-required`的值，则此action需要自行处理其权限问题，否则此action可以被任意用户访问。
Command元素是可选的，如果同一个Action需要处理多个交互，就会用到command。一般带有command的URL长这样：
    SomeAction!myCommand.jspa
然后其在Action类中是这样实现的。
    public String doMyCommand() {
        // implement the command logic here
        return "someview";
    }
当没有指定command的时候，Action中对应的处理方法是：`doExecute`
原文讲得很清楚，看原文就可以了。
###  Jira登录认证框架(Seraph)
Seraph是一个开源认证框架，主要由Atlassian开发和维护。  
Jira、Confluence的登录认证是都由Seraph来负责的。  
Seraph是通过Servlet的Filter实现的。
Seraph的功能只是用来在给定一个Web请求的情况下，将该请求与特定用户相关联。它支持多种认证方式：
  * HTTP Basic认证
  * 基于表单的认证：基于Cookie、(ie. redirect to an internal or external login form), and looking up credentials already stored in the user’s session (e.g. a cookie set by a SSO system).
Seraph本身并不进行用户管理，它只是检查请求中的登录凭证，然后将用户管理的功能（查找某用户，查看某用户的密码是否正确）指派给Jira的用户管理系统（内置的Crowd）处理。Crowd本来是Atlassian的身份管理及单点登录工具。而Jira
and Confluence都内置了一部分Crowd的核心模块，用于统一的用户管理。
如果想将单点登录（SSO）功能集成到Jira中，需要实现一个[自定义的Seraph
authenticator](https://docs.atlassian.com/atlassian-seraph/2.6.1-m1/sso.html)。很多客户也都是这样做的，因为Jira本身并没有集成单点登录系统。如果将Crowd集成到Jira中，参考：
Seraph 由几个核心元素组成：
  * Security Service  
Security services用于确定特定的HTTP请求需要哪些角色的权限。  
Seraph有两个security services：the `Path` service and the `WebWork` service.  
其中Path Service 用于对URL paths进行安全限定，可通过其自己的xm文件进行配置：seraph-paths.xml。  
受限，在security-config.xml配置文件中需要有这样的配置：
          config.file
          /seraph-paths.xml
然后seraph-paths.xml中定义了特定url请求所需要的对应角色：
          /admin/*
          myapp-administrators, myapp-owners
比如上面这个配置就定义了`/admin/*`这样的url就必须myapp-administrators，myapp-owners这样角色的用户可以访问。
另外WebWork Service需要用actions.xml配置文件来进行配置（前面已经提到了）：
        /secure/admin/views/addproject.jsp
比如上面这个就表示`/secure/admin/views/addproject.jsp`这个url请求的需要admin角色才能操作。
  * Interceptor：用于在一些安全事件（登录、注销）的前后执行的一些代码。在Servlet规范下是不可能做的。比如用户登录之后，记录上次登录的日期；用户注销之后清理一些资源；记录用户登录失败的次数。
  * Authenticator  
Authenticator用于对用户进行认证（authenticate） , 对用户进行登录、注销等操作，以及检查他们的角色权限。
  * Controller：进行全局的安全控制开关。
  * Role Mapper
###  如何配置Seraph
可以在两个地方配置Seraph：
**通过seraph-config.xml配置文件**
Seraph的核心是通过seraph-config.xml来进行配置的。通常放在web应用的`WEB-INF/classes`目录下。
          login.url
          /login.jsp?os_destination=${originalurl}
          http://example.com/SSOLogin?target=${originalurl}-->
          <!--          the URL to redirect to when the user explicitly clicks on a login link (rather than being redirected after
            trying to access a protected resource). Most of the time, this will be the same value as 'login.url'.
          - same properties as login.url above