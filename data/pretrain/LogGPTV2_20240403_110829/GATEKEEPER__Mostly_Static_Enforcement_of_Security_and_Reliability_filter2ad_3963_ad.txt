### 4.5 Host-Specific Policies

The policies discussed so far have been relatively generic. In this section, we present examples of policies that are specific to the host site they reside on.

#### 4.5.1 No XMLHttpRequest Use in Live Widgets

The first policy of this type comes directly from the Live Web Widget Developer Checklist [34]. Among other rules, it disallows the use of the `XMLHttpRequest` object in favor of the `Web.Network.createRequest` function. The latter ensures that network requests are properly proxied to work cross-domain:

**Query Output:**
- **WindowOpen(i : I)**
- **WindowOpen(i)**
  - **Preconditions:**
    - `WindowObject(h)`
    - `HEAPPTSTO(h, "open", h0)`
    - `CALLS(i, h0)`

- **XMLHttpRequest(i : I)**
- **XMLHttpRequest(i)**
  - **Preconditions:**
    - `GlobalSym("XMLHttpRequest", h)`
    - `CALLS(i, h)`

- **ActiveXExecute(i : I)**
- **ActiveXObjectCalls(i)**
- **ShellExecuteCalls(i)**
  - **Preconditions:**
    - `GlobalSym("ActiveXObject", h0)`
    - `CALLS(i, h0)`
    - `PTSTO("global", h1)`
    - `HEAPPTSTO(h1, "System", h2)`
    - `HEAPPTSTO(h2, "Shell", h3)`
    - `HEAPPTSTO(h3, "execute", h4)`
    - `CALLS(i, h4)`

- **ActiveXExecute(i)**
  - **Preconditions:**
    - `ActiveXObjectCalls(i)`
    - `CALLRET(i, v)`
    - `PTSTO(v, h)`
    - `HEAPPTSTO(h, _, m)`
    - `CALLS(i?, m)`
    - `CALLRET(i?, r)`
    - `PTSTO(r, h?)`
    - `ShellExecuteCalls(i0)`
    - `ACTUAL(i0, _, v0)`
    - `PTSTO(v0, h?)`

**Figure 14:** Query for finding information flow violations in Vista Sidebar widgets.

#### 4.5.2 Global Namespace Pollution in Live Widgets

Web widgets can be deployed on a page with other widgets running within the same JavaScript interpreter. Polluting the global namespace can lead to name clashes and unpredictable behavior. Hosting providers such as Facebook, Yahoo!, and Live strongly discourage pollution of the global namespace, favoring a module or namespace approach instead [11] to avoid name collisions.

We can easily prevent stores to the global scope:

**Query Output:**
- **GlobalStore(h : H)**
- **GlobalStore(h)**
  - **Preconditions:**
    - `PTSTO("global", g)`
    - `HEAPPTSTO(g, _, h)`

**Figure 13:** Example of a global namespace pollution violation (Section 4.5.2) in a Live widget. Because the same widget can be deployed twice within the same interpreter scope with different values of `SearchTag`, this can lead to a data race on the globally declared variable `SearchTagStr`.

Our analysis approach is fundamentally different from proposals that advocate language restrictions such as AdSafe or Cajita [12, 13, 29] to protect access to the global object. These techniques face the challenge that the `this` identifier in the global scope points to the global object. Disallowing `this` completely makes object-oriented programming difficult. With the whole-program analysis GATEKEEPER implements, we can distinguish references to `this` that point to the global object (aliased with the global variable) from local references to `this` within a function.

#### 4.5.3 Tainting Data in Sidebar Widgets

This policy ensures that data from ActiveX controls, which may be instantiated by a Sidebar widget, does not get passed into `System.Shell.execute` for direct execution on the user's machine. This is because ActiveX controls often retrieve unsanitized network data, leading to potential exploits. For example, in a published RSS Sidebar exploit [27], data obtained from an ActiveX-based RSS control was assigned directly to the `innerHTML` field within a widget, allowing a cross-site scripting exploit.

**Example Pattern:**
```javascript
var o = new ActiveXObject();
var x = o.m();
System.Shell.Execute(x);
```

The Datalog query in Figure 14 looks for instances where the tainted result of a call to method `m` on an ActiveX object is directly passed as an argument to the `System.Shell.Execute` function. Auxiliary queries look for `ActiveXObjectCalls` and `ShellExecuteCalls`, and tie all constraints together to match the call pattern described above.

Similar queries can be used to find information flow violations involving cookie stealing and location resetting, as described in Chugh et al. [10].

### 5 Experimental Results

For our experiments, we downloaded a large number of widgets from various widget hosting sites' galleries. We experimented with widgets from Live.com, the Vista Sidebar, and Google. We automated the download process to save widgets locally for analysis. After downloading, we parsed each widget's manifest to determine where the relevant JavaScript code resides. This process varied slightly across widget hosts. For instance, Google widgets tended to embed their JavaScript in HTML, requiring us to develop a limited-purpose HTML parser. In the case of the Sidebar, we had to extract the relevant JavaScript code from an archive. We ended up with a total of 8,379 JavaScript files for analysis.

**Figure 15:** Aggregate statistics for widgets from Live portal, Windows Sidebar, and Google portal widget repositories (columns 2–3). Information about widget distribution for different JavaScript language subsets (columns 4–7).

**JavaScript Code Example:**
```javascript
function MM_preloadImages() {
    var d = m_Doc;
    if (d.images) {
        if (!d.MM_p) d.MM_p = new Array();
        var i, j = d.MM_p.length,
            a = MM_preloadImages.arguments;
        for (i = 0; i < a.length; i++)
            if (a[i].indexOf("#") != 0) {
                d.MM_p[j] = new Image;
                d.MM_p[j++].src = a[i];
            }
    }
}
```

**Figure 18:** False positives in `common.js` from JustMusic.FM.

To validate the precision of our analysis, we examined all violations reported by our policies. GATEKEEPER output was cross-referenced with widget sources. Most of our query results were easy to spot-check, making result checking a relatively quick task. Encouragingly, for most inputs, GATEKEEPER was quite precise.

#### 5.2 False Positives

A conservative analysis like GATEKEEPER is inherently imprecise. Two main sources of false positives in our formulation are prototype handling and arrays. Out of over 6,000 analyzed files in the JavaScriptGK subset, only two widgets led to false positives in our experiments. Almost all false positive reports came from the Sidebar widget, JustMusic.FM, file `common.js`. Due to our handling of arrays, the analysis conservatively concludes that certain heap-allocated objects can reach many others by following any element of array `a`, as shown in Figure 18. This example contains several features that are difficult to analyze statically, including array aliasing, the use of the `arguments` array, and array element loads and stores.

It is common for a single imprecision within static analysis to create numerous "cascading" false positive reports. This is the case here as well. Luckily, it is possible to group cascading reports together to avoid overwhelming the user with false positives caused by a single imprecision. This imprecision affects `FrozenViolation` and `LocationAssign` queries, leading to many very similar reports. A total of 113 false positives are reported, but they affect only two widgets.

#### 5.3 Analysis Running Times

Our implementation uses a publicly available declarative analysis engine provided by bddbddb [32], a highly optimized BDD-based solver for Datalog queries used for static analysis in the past. Because repeatedly starting bddbddb is inefficient, we perform both the points-to analysis and run our Datalog queries corresponding to the policies in Section 4 as part of one run for each widget.

Our analysis is quite scalable in practice, as shown in Figure 17. This histogram shows the distribution of analysis time, in seconds. These results were obtained on a Pentium Core 2 duo 3 GHz machine with 4 GB of memory, running Microsoft Vista SP1. Note that the analysis time includes the JavaScript parsing time, the normalization time, the points-to analysis time, and the time to run all nine policies. For the vast majority of widgets, the analysis time is under 4 seconds, as shown by the cumulative percentage curve in the figure. The bddbddb-based approach has been shown to scale to much larger programs—up to 500,000 lines of code—in the past [32], so we are confident that we should be able to scale to larger codebases in GATEKEEPER as well.

#### 5.4 Runtime Instrumentation

Programs outside of the JavaScriptSAFE language subset but within the JavaScriptGK language subset require instrumentation. Figure 19 summarizes data on the number of instrumentation points required, both as an absolute number and in proportion to the number of widgets that required instrumentation.

**Figure 19:** Instrumentation statistics.