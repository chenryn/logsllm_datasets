Explorer中的树状结构，在
MainWindow.xaml.cs的下面可以找到MainWindow类。Solution Explorer在该文件中显示了
所有代码文件中的类型。在MainWindow类型中，可以看到类的所有成员。_contentLoaded
是一个布尔类型的字段。单击这个字段，会打开MainWindow.g.i.cs文件。这个文件是
MainWindow类的一部分，它由设计器自动生成，包含一些初始化代码。
5．预览项
Solution Explorer提供的一个新功能是Preview Selected Items按钮。启用这个按钮，在
Solution 
Explorer中单击一项，就会打开该项的编辑器，这与往常相同。但如果该项以前
没有打开过，编辑器的选项卡流就会在最右端显示新打开的项。现在单击另一项，以前打
开的项就会关闭。这大大减少了打开的项数。
在预览项的编辑器选项卡中有Keep Open按钮，它会使该项在单击另一项时仍处于打
开状态，保持打开的项的选项卡会向左移动。
6．使用作用域
设置作用域可以让用户专注于解决方案
的某一特定部分。Solution Explorer列表显示
的项会越来越多。例如，打开一个类型的上
下文菜单，就可以从Base 
Types菜单中选择
该类型的基类型。这里可以看到完整的类型
继承层次结构，如图17-13所示。
因为Solution Explorer包含的信息量比在
一个屏幕中可以轻松查看的信息量要多，所
以可以用New Solution Explorer View菜单项
一次打开多个Solution Explorer窗口，并且可
以设置作用域来显示一个特定元素。例如，
要显示一个项目或一个类，可选择上下文菜单中的Scope to This命令。要返回到以前的作
用域，可单击Back按钮。
7．将项添加到项目中
在Solution 
Explorer中可以直接将不同的项添加到项目中。选择项目，打开上下文菜
单Add |New Item，打开如图17-14所示的对话框。打开这个对话框的另一种方式是，使用
主菜单Project | Add New Item。该对话框有很多不同的类别，例如添加类或接口的代码
项、使用Entity Framework或其他数据访问技术的数据项等。
图17-14
8．管理引用
使用Visual Studio添加引用需要特别关注，因为项目类型有区别。如果使用完整的框
架，即.NET 4.6，在.NET Framework中给程序集添加引用仍是一个重要的任务。如果使用
旧模板，例如WPF，或使用新模板，例如Console Application （Package），这个任务就不
重要。记住，使用新模板，仍可以面向.NET 4.5.2 （或.NET 4.6）和.NET Core 1.0。
如图17-15所示的Reference 
Manager可以把引用添加到来自.NET 
Framework的程序
集，还可以把引用添加到用库项目创建的程序集。
图17-15
根据要添加引用的项目类型，Reference Manager提供了不同的选项。图17-16显示，
Reference Manager打开了一个WPF应用程序。在这里可以引用共享项目和COM对象，还
可以浏览程序集。
图17-16
当创建Universal Windows Platform应用程序时，会看到Reference Manager的一个新特
性，如图17-17所示。在这里可以引用Universal Windows Extensions，例如可用于Windows
IoT或Windows Mobile的API扩展。
图17-17
9．使用NuGet包
.NET Core的所有新功能都可以通过NuGet包使用。许多对.NET 4.6的改进也可以通过
NuGet包使用。NuGet允许比.NET Framework更快的创新，如今这是必须的。
NuGet包管理器如图17-18所示，已经为Visual Studio 2015完全重写了。它不再是一个
模态对话框，NuGet包管理器从互联网上下载一些包时，用户可以继续工作。现在可以轻
松地选择需要安装的NuGet包的具体版本。而在Visual Studio 2013中，这需要使用命令
行。
图17-18
要配置NuGet包的来源，可以通过选择Tools 
| 
Options，打开Options对话框。在
Options对话框中选择树视图中的NuGet Package Manager | Package Sources （见图17-
19）。默认情况下，配置了微软的NuGet服务器，也可以配置其他NuGet服务器或自己的
服务器。在.NET Core和ASP.NET Core 1.0中，微软提供了每日更新的NuGet包种子。
图17-19
使用NuGet包管理器，不仅可以选择包的来源，也可以选择一个过滤器，查看安装的
所有包，或者可用的升级包，并搜索服务器上的包。
  注意： 在ASP.NET Core 1.0中，JavaScript库不再在NuGet服务器中使用。相
反，JavaScript包管理器，例如NPM、Bower等，在Visual Studio 2015中获得直接支持。
参见第40章。
17.3.3 使用代码编辑器
Visual Studio代码编辑器是进行大部分开发工作的地方。在Visual Studio中，从默认配
置中移除一些工具栏，并移除了菜单栏、工具栏和选项卡标题的边框，从而增加了代码编
辑器的可用空间。下面介绍该编辑器中最有用的功能。
1．可折叠的编辑器
Visual Studio中的一个显著功能是使用可折叠的编辑器作为默认的代码编辑器。图17-
20是前面生成的控制台应用程序代码。注意窗口左侧的小减号，这些符号所标记的点是编
辑器认为新代码块（或文档注释）的开始位置。可以单击这些图标来关闭相应代码块的视
图，如同关闭树状控件中的节点，如图17-21所示。
图17-20
图17-21
这意味着在编辑时可以只关注所需的代码区域，隐藏此刻不感兴趣的代码。如果不喜
欢编辑器折叠代码的方式，可以用C#预处理器指令#region和#endregion来指定要折叠的代
码块。例如，要折叠Main方法中的代码，可以添加如图17-22所示的代码。
图17-22
代码编辑器自动检测#region块，并通过#region指令放置一个新的减号标识，这允许
关闭该区域。封闭区域中的这段代码允许编辑器关闭它（如图17-23所示），在#region指
令中用指定的注释标记这个区域。然而，编译器会忽略这些指令，跟往常一样编译Main
方法。
图17-23
2．在编辑器中导航
编辑器的顶行是三个组合框。右边的组合框允许导航输入的类型成员。中间的组合框
允许导航类型。左边的组合框在Visual Studio 2015中是新增的，它允许在不同的应用程序
或框架之间导航。例如，如果正在处理一个共享项目的源代码，在编辑器的左边组合框
中，可以选择使用共享项目的一个项目，查看所选项目的活跃代码。不为所选项目编译的
代码会暗显。使用C#预处理器命令可以为不同的平台创建代码段。
3. IntelliSense
除了可折叠编辑器的功能之外，Visual Studio的代码编辑器也集成了Microsoft流行的
IntelliSense功能。它不仅减少了输入量，还确保使用正确的参数。IntelliSense会记住首选
项，并从这些选项开始提供列表，而不是使用IntelliSense提供的有时相当长的列表。
代码编辑器甚至在编译代码之前就对代码进行语法检查，用短波浪线指示错误。将鼠
标指针悬停在带有下划线的文本上，会弹出一个包含了错误描述的小方框。
4. CodeLens
Visual Studio 2013中的一个新功能是CodeLens。在Visual Studio 2015中，这个功能现
在可用于专业版。
用户可能修改了一个方法，但忘了调用它的方法。现在很容易找到调用者。引用数会
直接显示在编辑器中，如图17-24所示。单击引用链接时，会打开CodeLens，以便查看调
用者的代码，并导航到它们。还可以使用另一个新功能Code Map来查看引用。
图17-24
如果使用Git或TFS把源代码签入到源代码控制系统中，例如Visual Studio Online，也
可以看到作者和所进行的更改。
5．使用代码片段
代码片段提升了代码编辑器的工作效率，仅需要在编辑器中写入cw，编辑
器就会创建Console.WriteLine（）;。Visual Studio自带很多代码片段：
● 使用快捷方式do、for、forr、foreach和while创建循环
● 使用equals来实现Equals方法
● 使用attribute和exception来创建Attribute和Exception派生类型等
选择Tools | Code Snippets Manager，在打开的Code Snippets Manager中可以看到所有
可用的代码片段（如图17-25所示）。也可以创建自定义的代码片段。
图17-25
可以使用用于XAML的代码片段。代码片段可以从http://xamlsnippets.codeplex.com上
获得。
17.3.4 学习和理解其他窗口
除了代码编辑器和Solution Explorer外，Visual Studio还提供了许多其他窗口，允许从
不同的角度来查看或管理项目。
  注意： 本节的其余部分介绍其他几个窗口。如果这些窗口在屏幕上不可见，
可以在View菜单中选择它们。要显示设计视图或代码编辑器，可以右击Solution
Explorer中的文件名，并选择上下文菜单中的View Designer或View Code；也可以选择
Solution Explorer顶部工具栏中的对应项。设计视图和代码编辑器共用同一个选项卡式
窗口。
1．使用设计视图窗口
如果设计一个用户界面应用程序，如WPF应用程序或Windows控件库，则可以使用设
计视图窗口。这个窗口显示窗体的可视化概览。设计视图窗口经常和工具箱窗口一起使
用。工具箱包含许多.NET组件，可以将它们拖放到程序中。工具箱的组件会根据项目类
型而有所不同。图17-26显示了WPF应用程序的工具箱。
图17-26
要将自定义的类别添加到工具箱，请执行如下步骤：
（1）右击任何一个类别。
（2）选择上下文菜单中的Add Tab。
也可以选择上下文菜单中的Choose Items，在工具箱中放置其他工具，这尤其适合于
添加自定义的组件或工具箱默认没有显示的.NET Framework组件。
2．使用Properties窗口
如本书第I部分所述，.NET类可以实现属性。Properties窗口可用于项目、文件和使用
设计视图选择的项。图17-27显示了Windows Service的Properties视图。
图17-27
在这个窗口中可以看到一项的所有属性，并对其进行相应的配置。一些属性可以通过
在文本框中输入文本来改变，一些属性有预定义的选项，一些属性有自定义的编辑器。也
可以在Properties窗口中添加事件处理程序。
在UWP和WPF应用程序中，Properties窗口看起来非常不同，如图17-28所示。这个窗
口提供了很多图形效果，并允许用图形方式来设置属性。这个属性窗口最初来源于Blend
工具。如前所述，Visual Studio和Blend for Visual Studio有许多相似之处。
图17-28
图17-29
3．使用类视图窗口
Solution 
Explorer可以显示类和类的成
员，这是类视图的一般功能（如图17-29所
示）。要调用类视图，可选择View| 
Class
View。类视图显示代码中的名称空间和类的
层次结构。它提供了一个树型结构，可以展
开该结构来查看名称空间下包含哪些类，类
中包含哪些成员。
类视图的一个杰出功能是，如果右击任
何有权访问其源代码的项的名称，然后选择
上下文菜单中的Go To Definition命令，就会
转到代码编辑器中的项定义。另外，在类视
图中双击该项（或在代码编辑器中右击想要
的项，并从上下文菜单中选择相同的选
项），也可以查看该项的定义。上下文菜单
还允许给类添加字段、方法、属性、或索引器。换句话说，在对话框中指定相关成员的详
细信息，就会自动添加代码。这个功能对于添加属性和索引器非常有用，因为它可以减少
相当多的输入量。
4．使用Object Browser窗口
在.NET环境中编程的一个重要方面是能够找出基类或从程序集引用的其他库中有哪
些可用的方法和其他代码项。这个功能可通过Object 
Browser窗口来获得（参见图17-
30）。在Visual Studio 2015中选择View菜单中的Object Browser，可以访问这个窗口。使
用这个工具，可以浏览并选择现有的组件集，如.NET Framework 2.0到4.6版本、适用于
Windows运行库的.NET Portable Subsets，和.NET for UWP，并查看这个子集中可用的类和
类成员。在Browse下拉框中选择Windows Runtime，来选择Windows运行库，也可以找到
这个用于UWP应用程序的原生新API的所有名称空间、类型和方法。
图17-30
5．使用Server Explorer窗口
使用Server Explorer窗口，如图17-31所示，可以在编码时找出计算机在网络中的相关
信息。在该窗口的Servers部分中，可以找到服务运行情况的信息（这对于开发Windows服
务是非常有用的），创建新的性能计数，访问事件日志。在Data 
Connections部分中不仅
能够连接现有数据库，查询数据，还可以创建新的数据库。Visual Studio 2015也有一些内
置于Server 
Explorer的Windows 
Azure信息，包括Windows 
Azure 
Compute、Mobile
Services、Storage、Service Bus和Virtual Machines选项。
图17-31
6．使用Cloud Explorer
如果安装了Azure SDK和Cloud Explorer扩展，那么Cloud Explorer （见图17-32）是一
个可用于Visual Studio 2015的新浏览器。使用Cloud Explorer可以访问Microsoft Azure订
阅，访问资源，查看日志文件，连接调试器，直接进入Azure门户。
图17-32
7．使用Document Outline窗口
可用于WPF和UWP应用程序的一个窗口是Document 
Outline。如图17-33所示，在这
个窗口中打开了第34章的一个应用程序，从中可以查看XAML元素的逻辑结构和层次结
构，锁定元素以防止其无意中被修改，在层次结构中轻松地移动元素，在新的元素容器中
分组元素和改变布局类型。
图17-33
使用这个工具还可以创建XAML模板，图形化地编辑数据绑定。
17.3.5 排列窗口
学习Visual Studio时会发现，许多窗口有一个有趣的功能会让人联想到工具栏。尤其
是，它们都可以浮动（也可以显示在第二个显示器上），也可以停靠。当它们停靠时，在
每个窗口右上角的最小化按钮旁边会显示一个类似图钉的额外图标。这个图标的作用确实
像图钉，它可以用来固定打开的窗口。固定窗口（图钉是垂直显示的）的行为与平时使用
的窗口一样。但当它们取消固定时（图钉是水平显示的），则窗口只有获得焦点，才会打
开。当失去焦点时（因为单击或者移动鼠标到其他地方），它们会快速退出到Visual
Studio应用程序的主边框内。固定和取消固定窗口提供了另一种方式来更好地利用屏幕上
有限的空间。
Visual Studio 2015中的一个新特性是，可以存储不同的布局。用户很有可能运行在不
同的环境中。例如，在办公室笔记本电脑可能连接到两个大屏幕上，但在平面上编程时，
就只有一个屏幕。过去，可能总是根据需要安排窗口，必须一天几次地改变窗口的布局。
可能需要不同布局的另一个场景是做网络开发，创建UWP和Xamarin应用程序。现在可以
保存布局，轻松地从一个布局切换到另一个。在Window菜单中选择Save 
Window
Layout，保存当前的工具布局。使用Window | Apply Window Layout，选择一个保存的布
局，把窗口安排为保存它们时的布局。
17.4 构建项目
Visual 
Studio不仅可以编写项目，它实际上是一个IDE，管理着项目的整个生命周
期，包括生成或编译解决方案。本节讨论如何用Visual Studio生成项目。
17.4.1 构建、编译和生成代码
讨论各种构建选项之前，先要弄清楚一些术语。从源代码转换为可执行代码的过程
中，经常看到3个不同的术语：构建、编译和生成。这3个术语的起源反映了一个事实：直
到最近，从源代码到可执行代码的过程涉及多个步骤（在C++中仍然如此）。这主要是因
为一个程序包含了大量的源文件。
例如，在C++中，每个源文件都需要单独编译。这就产生了所谓的对象文件，每个对
象文件包含类似于可执行代码的内容，但每个对象文件只与一个源文件相关。要生成一个
可执行文件，这些对象文件需要连接在一起，这个过程官方称为链接。这个合并过程通常
称为构建代码（至少在Windows平台上是如此）。然而，在C#术语中，编译器比较复杂，
能够将所有的源文件当作一个块来读取和处理。因此，没有真正独立的链接阶段，所以在
C#上下文中，术语“构建”和“编译”可以互换使用。
术语“生成”的含义与“构建”基本相同，虽然它在C#上下文中没有真正使用。术语“生
成”起源于旧的大型机系统，在该系统中，当一个项目由许多源文件组成时，就在一个单
独的文件中写入指令，告诉编译器如何构建项目：包含哪些文件和链接什么库等。这个文
件通常称为生成文件，在UNIX系统上它仍然是非常标准的文件。事实上，MSBuild项目
文件和旧的生成文件非常类似，它只是一个新的高级XML变体。在MSBuild项目中，可以
使用MSBuild命令，将项目文件当作输入，来编译所有的源文件。使用构建文件非常适合
于在一个单独的构建服务器上进行构建，其中所有的开发人员仅需要签入他们的代码，构
建过程会在深夜自动完成。第1章介绍了.NET 
Core命令行（CLI）工具，该命令行建立
了.NET Core环境。
17.4.2 调试版本和发布版本
C++开发人员非常熟悉生成两个版本的这种思想，有Visual Basic开发背景的开发人员
也不会十分陌生。其关键在于：可执行文件在调试时的目标和行为应与正式发布时不同。
准备发布软件时，可执行文件应尽可能小而快。但是，这两个目标与调试代码时的需求不
兼容，在接下来的小节中将看到这一点。
1．优化
在高性能方面，编译器对代码进行的多次优化起到了一定的作用。这意味着编译器在
编译代码时，会在代码实现细节中积极找出可以修改的地方。编译器所做的修改并不会改
变整体效果，但是会使程序更加高效。例如，假设编译器遇到了下面的源代码：
    double InchesToCm(double ins) => ins ＊ 2.54;
    // later on in the code
    Y = InchesToCm(X);
就可能把它们替换为下面的代码：
    Y = X ＊ 2.54;
类似地，编译器可能把下面的代码：
    {
      string message = "Hi";
      Console.WriteLine(message);
    }
替换为：
    Console.WriteLine("Hi");
这样，编译器就不需要在此过程中声明任何非必要的对象引用。
C#编译器会进行怎样的优化无从判断，我们也不知道前两个例子中的优化在特定情
况中是否会实际发生，因为编译器的文档没有提供这类细节。不过，对于C#这样的托管
语言，上述优化很可能在JIT编译时发生，而不是在C#编译器把源代码编译为程序集时发
生。显然，由于专利原因，编写编译器的公司通常不愿意过多地说明他们使用了什么技
巧。注意，优化不会影响源代码，而只影响可执行代码的内容。通过前面的示例，可以基
本了解优化产生的效果。
问题在于，虽然示例代码中的优化可以加快代码的运行速度，但是它们也增加了调试
的难度。在第一个例子中，假设想要在InchesToCm（）方法中设置一个断点，了解该方
法的工作机制。如果在编译器做了优化后，可执行代码中不再包含InchesToCm（）方
法，怎么可能进行这种操作呢？同样，如果编译后的代码中不再包含Message变量，又如
何监视该变量的值？