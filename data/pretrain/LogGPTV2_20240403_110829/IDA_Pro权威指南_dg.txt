➊  UPX1:00410370 pusha  
  UPX1:00410371 mov     esi, offset off_40A000  
  UPX1:00410376 lea     edi, [esi-9000h]  
  UPX1:0041037C push    edi  
  ...  
  UPX1:004104EC pop     eax  
➋  UPX1:004104ED popa                            ; opcode 0x53  
  UPX1:004104EE lea     eax, [esp-80h]  
  UPX1:004104F2  
  UPX1:004104F2 loc_4104F2:                       ; CODE XREF: start+186↓ j  
  UPX1:004104F2 push    0  
  UPX1:004104F4 cmp     esp, eax  
  UPX1:004104F6 jnz     short loc_4104F2  
  UPX1:004104F8 sub     esp, 0FFFFFF80h  
➌  UPX1:004104FB jmp     loc_40134C
这个例程的几个特点可用于自动识别它是否完成。首先，这个例程一开始就在程序入口点将所有寄存器压入栈中（➊ ）。例程快结束时（➋ ）弹出所有寄存器，这时程序已经解压。最后，控制权已转移到新解压的程序（➌）。因此，要自动完成解压，一种策略是单步跟踪程序，直到当前指令为 popa
 。由于单步跟踪相当缓慢，代码清单 25-1 中的IDC 示例采用一种稍微不同的方法来扫描 popa
 指令，然后运行程序，直到 popa
 所在的地址：
代码清单 25-1 简单的 UPX 解包器脚本
   #include   
   #define POPA 0x53  
   static main() {  
      auto addr, seg;  
      addr = BeginEA();   //Obtain the entry point address  
      seg = SegName(addr);  
➋      while (addr != BADADDR && SegName(addr) == seg) {  
➌         if (Byte(addr) == POPA) {  
➍            RunTo(addr);  
            GetDebuggerEvent(WFNE_SUSP, -1);  
            Warning("Program is unpacked!");  
➎            TakeMemorySnapshot(1);  
            return;  
         }  
➊         addr = FindCode(addr, SEARCH_NEXT | SEARCH_DOWN);  
      }  
      Warning("Failed to locate popa!");  
   }
代码清单25-1 中的脚本需要在启动调试器之前在 IDA 数据库中启动，并且假设你以前已经使用Debugger ▶Select debugger选择了一个调试器。这段脚本详细说明了如何启动调试器并控制新建的进程。这个脚本利用了 UPX 的一些非常特殊的特性，因此并不特别适合作为通用的去模糊脚本。但是，它说明了一些我们稍后将要用到的概念。这个脚本有两个依据：首先，解压例程位于一个程序段（通常叫做 UPX1
 ）的尾部；其次，UPX 并未利用任何取消同步技巧来阻止正确的反汇编。
模糊器之模糊
UPX是当前最流行的模糊实用工具之一（可能因为它是免费的）。但是，它的流行并未使它成为一种特别有效的工具。在效率方面，它的一个主要缺点在于 UPX 本身提供一个命令行选项，能够将 UPX 打包的二进制文件恢复到它的原始状态。因此，一个“作坊式”行业逐渐形成，他们专门开发用于阻止 UPX 解包的工具。由于在解包一个压缩二进制文件之前，UPX会对这个文件全面检查，因此，我们可以对该文件进行一些简单的修改，使完整性检查失效，并令UPX 的解包功能无法操作，但又不影响这个压缩二进制文件的运行。其中一个这样的技巧是将默认的 UPX 区块名称更改为 UPX0
 、UPX1
 和UPX2
 以外的名称。因此，在为解包 UPX 开发脚本时，最好不要硬编码这些区块名称。
这个脚本因这两个依据从程序的入口点开始向前扫描，一次一条指令（➊）——只要下一条指令位于同一个程序段内（➋）——直到当前指令为 popa
 （➌）。一旦到达 popa
 指令，调试器将被调用（➍），以执行 popa
 指令的地址所在处的进程，这时程序已经被解压。最后一步是拍摄一张内存快照（➎），将经过去模糊处理的程序加载到我们的数据库中，以进行深入分析。
一个更加通用的自动化解包解决方案利用了一个事实：许多去模糊例程通常被附加到一个二进制文件的结尾部分，一旦去模糊完成，它将跳转到初始的入口点，这个入口点通常在二进制文件的开始部分。有时候，初始的入口点可能位于一个截然不同的程序段；而在其他情况下，原始的入口点可能就在去模糊代码所使用的地址的前面。代码清单 25-2 中的Python 脚本提供了一个更加直接的方法，可以运行一个简单的去模糊算法，直到它跳转到程序的初始入口点。
代码清单 25-2 继续运行，直到到达 OEP
   start = BeginEA()  
➊  RunTo(start)  
     GetDebuggerEvent(WFNE_SUSP, -1)  
➋  EnableTracing(TRACE_STEP, 1)  
   code = GetDebuggerEvent(WFNE_ANY | WFNE_CONT, -1)  
   while code > 0:  
➌     if GetEventEa() &lt start: break  
     code = GetDebuggerEvent(WFNE_ANY | WFNE_CONT, -1)  
➍  PauseProcess()  
   GetDebuggerEvent(WFNE_SUSP, -1)  
➎  EnableTracing(TRACE_STEP, 0)  
➏  MakeCode(GetEventEa())  
   TakeMemorySnapshot(1)
与代码清单 25-1 中的脚本类似，这个脚本应该从反汇编器而不是调试器中启动。这个脚本详细说明如何启动调试器并获得必要的控制权，以运行新建的进程。这个特殊的脚本有两个假设：入口点之前的所有代码都被模糊处理；在将控制权转交给入口点前面的地址之前，没有任何恶意行为发生。这个脚本首先启动调试器并在程序的入口点处暂停（➊）。然后，程序执行单步跟踪（➋）和循环，以测试每一个生成的事件的地址（➌）。只要事件地址到达程序入口点地址的前面，则认为去模糊已经完成，进程将被暂停（➍），单步跟踪也被禁用（➎）。最后，这个脚本还确保当前指令指针位置处的字节被格式化成代码（➏）。
在执行这个脚本的过程中，你通常会看到如图 25-5 所示的警告。
图25-5 调试器指令指针警告
这条警告指出，指令指针指向一个 IDA 认为是数据的项目，或者指向一个之前已经反汇编的指令的中间。在单步执行利用反汇编“去同步”技巧的代码时，常常会遇到这样的警告。当一个程序跳转到一个之前为数据现在为代码的区域（对一个程序进行去模糊处理后往往会出现这种情况）时，这个警告也经常出现。对警告中的问题回答“是”，IDA 会将相关字节重新格式化成代码，这样做是正确的，因为指令指针指出这是下一个将要提取出来并执行的项目。
需要注意的是，因为使用了单步跟踪，代码清单25-2 中的脚本的执行速度要比代码清单 25-1中的脚本慢得多。但是，执行缓慢也带来了一些好处。首先，我们可以指定一个与任何地址都无关的终止条件，而仅仅使用断点却无法做到这一点。其次，在这个脚本中，任何对反汇编器去同步的尝试都将失败，因为指令边界完全由指令指针的运行时值决定，而不能通过静态反汇编分析决定。在有关脚本化调试功能3
 的声明中，Hex-Rays 提供了一个更加健壮的脚本，该脚本能够执行一个通用解包器的任务。
3. 参见http://www.hex-rays.com/idapro/scriptable.htm
 。
25.3.3 导入表重建
对二进制文件去模糊后，接下来可以开始分析这个文件。虽然我们从未打算执行经过去模糊处理的导入表（实际上，如果一个快照被直接加载到 IDA 数据库中，我们根本无法执行这个程序），但是要了解程序的行为，该程序的导入表几乎总是一个非常重要的资源。
正常情况下，在最初创建数据库之后，IDA 能够在随后的文件加载过程中解析程序的导入表。但在模糊程序中，IDA 在加载阶段看到的唯一导入表属于该程序的去模糊组件。此导入表通常仅包含完成去模糊过程所需的最小数量的函数。最复杂的模糊器可能会生成空导入表，这时去模糊组件必须包含自行加载库和解析必要的函数所需的全部代码。
对于已经过模糊处理的二进制文件，多数情况下，它的导入表也已经过模糊处理，并在去模糊过程中以某种形式进行了重建。一般情况下，重建过程需要利用新近经过去模糊处理的数据进行它自己的库加载和函数地址解析。对于 Windows 程序而言，这个过程几乎总是需要调用LoadLibrary
 函数和重复调用 GetProcAddress
 ，以解析所需的函数地址。
更加复杂的导入表重建例程可能会利用自定义查找函数来代替 GetProcAddress
 ，以避免触发GetProcAddress
 自己设置的断点。这些例程还可能会用散列值代替字符串，以识别被请求的函数的地址。少数情况下，导入表重建可能还需要避开 LoadLibrary
 函数，这时重建例程必须自己执行该函数的自定义版本。
最终，导入表重建过程将生成一个函数地址表，在静态分析上下文中，这些地址没有任何意义。如果拍摄一个进程的内存快照，我们最多可以得到下面的内容（部分显示）：
 UPX1:0040A000 dword_40A000    dd 7C812F1Dh        ; DATA XREF: start+1↓o  
 UPX1:0040A004 dword_40A004    dd 7C91043Dh        ; DATA XREF: sub_403BF3+68↑r  
 UPX1:0040A004                                     ; sub_405F0B+2B4↑ r ...  
 UPX1:0040A008                 dd 7C812ADEh  
 UPX1:0040A00C dword_40A00C    dd 7C9105D4h        ; DATA XREF: sub_40621F+5D↑r  
 UPX1:0040A00C                                     ; sub_4070E8+F↑ r ...  
 UPX1:0040A010                 dd 7C80ABC1h  
 UPX1:0040A014 dword_40A014    dd 7C901005h        ; DATA XREF: sub_401564+34↑r  
 UPX1:0040A014                                     ; sub_4015A0+27↑ r ...
这段代码描述大量 4 字节值，它们的地址紧密相连，并且被程序中许多不同的位置引用。问题在于，如果映射到我们调试的进程中，这些值（如 7C812F1Dh
 ）表示库函数的地址。在程序的代码块中，我们可以看到类似于下面的函数调用：
 UPX0:00403C5B               ➊ call    ds:dword_40A004  
 UPX0:00403C61                test    eax, eax  
 UPX0:00403C63              jnz     short loc_403C7B  
 UPX0:00403C65             ➌ call    sub_40230F  
 UPX0:00403C6A                mov     esi, eax  
 UPX0:00403C6C             ➋ call    ds:dword_40A058
需要注意的是，有两个函数调用（➊和➋）引用了重建后的导入表的内容，而第三个函数调用（➌）引用的是一个正文位于数据库中的函数。理想情况下，重建后的导入表中的每个条目将以它包含其地址的函数命名。
我们最好在为经过去模糊处理的进程拍摄内存快照前解决上述问题。如下所示，如果从调试器中查看与上面相同的内存范围，我们将看到一个截然不同的列表。因为调试器已经访问了每一个被引用的函数所在的内存区域，现在调试器能够将地址（如 7C812F1Dh
 ）显示成与之对应的符号名称（这里为 kernel32_GetCommandLineA
 ）。
UPX1:0040A000 off_40A000 dd offset kernel32_GetCommandLineA;DATAXREF:UPX0:loc_40128F↑r
UPX1:0040A000                                          ; start+1 ↓ o  
UPX1:0040A004 off_40A004 dd offset ntdll_RtlFreeHeap   ; DATA XREF: UPX0:004011E4↑ r
UPX1:0040A004                                          ; UPX0:0040120A↑r ...
UPX1:0040A008 off_40A008 dd offset kernel32_GetVersionExA  ;DATA XREF: UPX0:004011D4↑r
UPX1:0040A00C dd offset ntdll_RtlAllocateHeap          ; DATA XREF:UPX0:004011B3↑r  
UPX1:0040A00C                                          ; sub_405E98+D↑ r ...  
UPX1:0040A010 off_40A010 dd offset kernel32_GetProcessHeap  ;DATA XREF:UPX0:004011AA↑r
UPX1:0040A014 dd offset ntdll_RtlEnterCriticalSection ; DATA XREF: sub_401564+34↑ r  
UPX1:0040A014                                         ; sub_4015A0+27 ↑ r ...
注意，这时调试器采用的命名方案与我们常见的命名方案略有不同。调试器会在所有由共享库导出的函数前面加上相关库的名称和一个下划线。例如，kernel32.dll 导出的GetCommandLineA
 函数的名称为kernel32_GetCommandLineA
 。这样做可确保在两个库导出同一个名称时生成唯一的名称。
对于上面的导入表，我们需要解决两个问题。其一，为了使函数调用更具可读性，我们需要根据导入表中的每个条目引用的函数，为这些条目命名。如果这些条目拥有正确的名称，IDA 将能够自动显示它的类型库中的函数签名。只要拥有可供分配的名称，那么命名每一个导入表条目就是一个相对容易的任务。这诱生了第二个问题：要获得适当的名称。获得名称的一种方法是解析调试器生成的名称，去除前面的库名称，并将剩下的文本作为导入表条目的名称。这种获取名称的方法存在一种问题，即有些时候，库名称和函数名称可能都包含有下划线字符，这使得我们很难确定一个较长的名称字符串中函数名称的准确长度。尽管如此，IDA 自带的 renimp.idc 导入表重命名脚本（位于/idc目录）仍然采用了这种方法。
这个脚本必须在调试器处于活动状态（以便访问加载的库名称）时才能正常运行，并且我们必须能够确定去模糊二进制文件中重构导入表的位置。确定已重建的导入表的位置的一种策略是，跟踪对 GetProcAddress
 的调用并记下结果在内存中的存储位置。UPX 用于调用GetProcAddress
 并存储结果的代码如代码清单 25-3 所示。
代码清单 25-3 解析并存储导入的函数地址的UPX代码
UPX1:00408897           ➊ call    dword ptr [esi+8090h]  
UPX1:0040889D            or      eax, eax  
UPX1:0040889F            jz      short loc_4088A8  
UPX1:004088A1           ➋ mov     [ebx], eax  
UPX1:004088A3           ➌ add     ebx, 4
对GetProcAddress
 的调用发生在➊处，其结果存储在内存中的➋处。记住，➋处的ebx
 寄存器中保存的值将可获知导入表的位置。ebx
 寄存器之前有 4 个字节（➌），用于为它下次遍历函数解析循环作好准备。
确定已重建的导入表的位置后，renimp.idc 要求我们使用单击并拖动操作突出显示从表开头到结尾的内容。renimp.idc 脚本将遍历这些内容，获得所引用的函数的名称，去除库名称前缀并相应地为导入表条目命名。执行这个脚本后，前面的导入表将转换成如下所示的导入表：
UPX1:0040A000 ; LPSTR __stdcall GetCommandLineA()
UPX1:0040A000 GetCommandLineA dd offset kernel32_GetCommandLineA  
UPX1:0040A000                                         ; DATA XREF: UPX0:loc_40128F↑r
UPX1:0040A000                                         ; start+1 ↓ o  
UPX1:0040A004 RtlFreeHeap dd offset ntdll_RtlFreeHeap ; DATA XREF: UPX0:004011E4↑r
UPX1:0040A004                                         ; UPX0:0040120A ↑ r ...  
UPX1:0040A008 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)  