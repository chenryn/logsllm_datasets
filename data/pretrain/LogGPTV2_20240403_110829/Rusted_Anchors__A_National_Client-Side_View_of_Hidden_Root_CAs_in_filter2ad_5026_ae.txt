tation violates a SHOULD in standards) and NOTICE (other low-risk
information). We focus on all ERROR messages output by Zlint, as
they are violations of basic implementation requirements.
Finding 5.5: The implementation of most hidden root certificates
is problematic, with over 87% of them violating at least one basic
requirement of X.509 standards.
Problematic content of root certificates. Of 1.17 million hidden
root certificates, Zlint reports 1,201,189 ERROR messages of 73 lints.
Over 87.3% of all hidden root certificates have been reported at least
one ERROR message, as shown in Table 5. Unfortunately, considering
average performance, CAs from fake authentications exhibited the
best with 0.84 errors per root, while the weakest were self-built
CAs with an average error number of 3.25. Specifically, most root
certificates miss critical extensions such as key identifiers, which
can cause certificate verification errors. Invalid and vulnerable field
values (e.g., negative serial numbers and weak public keys) are also
prevalent. In addition, 10.9% hidden root certificates only receive
WARNING and NOTICE messages. While they do not violate basic
requirements, the implementation is also considered flawed and
should be fixed [19, 33, 44].
Figure 10: Zlint ERROR message ratio of leaf certificates asso-
ciated with the top 100 certificate groups.
Finding 5.6: The implementation of leaf certificates signed by
hidden CAs is even more worrisome. 85 of the top 100 root cer-
tificate groups sign every leaf certificate with implementation
errors.
Problematic content of leaf certificates. The implementation
of leaf certificates signed by hidden CAs is even worse. On aver-
age, Zlint reports 8.14 ERROR and 1.93 WARNING messages for each
leaf certificate. Compared to the root certificates, the ERROR mes-
sages in leaf certs come from 114 lints, with an increased ratio
of vulnerable fields (22.8%). After inspection, we confirm that it’s
caused by a prevalent usage of weak 1024-bit RSA keys (which
would be detailed discussed in Sec 6). However, similar to the case
of root certificates, we found leaf certs from fake authentications
contribute the least to the violations. The top 10 groups with the
highest average number of errors in their issued leaf certificates
include 2 VPNs, 1 Proxy, 4 Enterprise CAs, 2 Government CAs and
1 group of unknown category. The correlation between the scale of
leaf certificates signed by each hidden CA group and their errors
is shown in Figure 10. The size of each bubble shows the scale of
leaf certificates and the color shows the certificate error rate. 85 of
the top 100 groups sign every leaf certificate with implementation
errors (i.e., the error rate is 100%). Only 3 certificate groups with a
smaller scale of leaf certificates have an error rate of less than 50%.
The results are significantly more worrisome than leaf certificates
signed by public trusted CAs, where only 0.02% received ERROR
messages in 2018 [44].
6 VALIDATION ERRORS FROM WEB CLIENTS
We have spotted several implementation flaws of hidden CAs, such
as extra-long validity periods and violating wildcards in Sec 5.
However, as for real-world web visits, the validity rules checked
by clients are not exactly the same as the above discussed security
guidelines documented in standards and could be analyzed based
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1383on scaled certificate data alone. For example, it could be impossible
for the client to check whether the root certificate issued the chain
shares the public key with other roots, but instead, it could reject
the chain based on local and contextual information such as local
trust lists (AUTHORITY_INVALID), timestamps (DATE_INVALID) and
the host it accesses (COMMON_NAME_INVALID).
This section benefits from the STATUS_CODE of each record in
our collected data, which reports the actual errors detected by
the web client at the time it received the chain. It could provide
a complement to the validity of hidden CA issued chains from
the perspective of web clients in the wild. Table 9 of Appendix A
lists all the reported error types. Besides, recall that 360 Secure
Browser also collects invalid certificate chains signed by public
trusted CAs (see Table 1), which provides us the opportunity to
perform comparisons with public CAs.
Figure 11: Daily ratio of invalid certificate chains
Finding 6.1: On average, clients would report more errors when
encountering chains issued by hidden CAs than public CAs in
the wild, with an overall error rate of 3.59%.
Overall error rate. The daily ratio of invalid certificate chains
(over the number of all certificate chains) is shown in Figure 11. As
expected, certificate chains signed by hidden CAs show a higher
invalid ratio: an average of 3.59% are invalid, while the number for
public trusted roots is 0.55%. It is also worth noting that, several
prevalent implementation flaws analyzed in Sec 5 are currently not
in the checking list of clients, probably for better usability. While,
it also leaves the users in some blinded state, i.e., hard to be aware
of the presence and potential risks of hidden CAs in their daily web
visiting traffic. Besides, unfortunately, we found the potentially least
reputable member of the hidden CA ecosystem, the chains issued by
fake roots had the lowest invalid rate, while self-built CAs signing
public websites presented the highest error rate on the contrary (see
Table 2). Table 6 also shows the top 5 verification errors occurring
in the hidden CA ecosystem and their main contributors. The most
serious error reported by clients is WEAK_SIGNATURE_ALGORITHM,
i.e., the signature algorithm is weaker than the requirements of
the verification API, suggesting that hidden CAs, especially the
self-built roots, may have weaker cryptographic practices.
Finding 6.2: Cryptographic flaws are the most serious errors of
hidden CAs validated by clients. Weak algorithms like SHA-1 are
still used and weak keys like 1024-bit RSA are found in over 97%
of their issued leaf certificates.
Table 6: Top 5 verification errors occurring in certificate
chains signed by hidden root CAs.
Error Type
COMMON_NAME_INVALID
% traffic
WEAK_SIGNATURE_ALGORITHM 2.4645%
2.2392%
1.5260%
0.4832%
0.1715%
AUTHORITY_INVALID
DATE_INVALID
INVALID
Main Source
Self-built (81.38%)
Self-built (74.81%)
Self-built (55.90%)
Fake Root (38.33%)
Unknown (97.80%)
Table 7: Signature algorithms of hidden certificates (weak
algorithms are marked red).
Signature Algorithm
SHA-256 with RSA
SHA-256 with ECDSA
SHA-512 with RSA
SHA-1 with RSA
Other
Root Certs
Leaf Certs
1,041,118 (88.59%)
128,857 (10.97%)
102 (0.01%)
5,005 (0.43%)
63 (0.01%)
59,553,038 (99.56%)
190,241 (0.32%)
640 (0.00%)
69,419 (0.12%)
4247 (0.01%)
Table 8: Public key strength of hidden certificates (weak
keys are marked red).
Key Type
RSA (2048-bit)
ECDSA (256-bit)
RSA (4096-bit)
RSA (1024-bit)
RSA (256-bit)
Other
Root Certs
Leaf Certs
1,038,534 (88.37%)
128,857 (10.97%)
781 (0.07%)
6,905 (0.59%)
-
68 (0.01%)
1,451,858 (2.43%)
190,114 (0.32%)
661 (0.00%)
58,165,008 (97.24%)
5,905 (0.01%)
4039 (0.01%)
Cryptographic practice issues. We then take a closer look at
the cryptography flaws of hidden CAs. Table 7 and 8 show the
distribution of their signature algorithms and public key strengths.
From recommendations by NIST [8], algorithms and public keys
that are considered weak and dangerous are marked in red. As
shown in Table 7, a small number of hidden CAs (including 1,679
roots of Proxy/VPN) still use vulnerable algorithms as SHA-1, which
should be banned since 2016 [33]. As for public keys, 0.59% hidden
root certificates (20.73% of self-built CAs) use weak keys, while up to
97% leaf certificates signed by them use weak public keys. Comparing
to leaf certificates signed by public trusted CAs, a study in 2013 [26]
find that nearly 90% already had a key strength of 2048-bit RSA or
above.
7 DISCUSSION
Comparison with HTTPS interception studies. Although pre-
vious studies of HTTPS interception seem to be the most relevant
to this work, the scope of research is different: traffic from hidden
roots is not always covered by interception (e.g., visits to websites is-
sued certificates from government self-built roots), and intercepted
traffic is also not covered by hidden roots only (e.g., mis-issuance
from public trusted CAs). Thus we consider several results of previ-
ous works, such as the HTTPS interception rate [23, 39, 58, 64], are
not directly comparable with our results. Besides, since a consider-
able proportion of our data also comes from interceptions, some
of our findings, e.g., the hijacking behavior of fake CAs and the
implementation flaws in local software, have also been discussed
previously [15, 21, 22, 28, 56]. However, we are the first to report
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1384the systematic evaluation of their impact on real-world clients. Be-
sides, the insights we provide into the nature of the hidden root
ecosystem are not covered by previous works, e.g., its dynamic
update properties.
Distribution channels of hidden root CAs. In this work, we
study over 1.19 million hidden root certificates. While they can be
imported or pinned to local operating systems, we cannot learn
exactly how they got trusted by web clients (i.e., their distribu-
tion channels) solely from certificate data analysis. For websites
that actively use self-built root CAs, instructions on how to im-
port non-public certificates into local root stores are often shown
to web users (e.g., www.rootca.gov.cn and gat.hunan.gov.cn).
Typically, users may follow the instructions in order to dismiss
certificate errors and visit the websites. For root certificates of fake
CAs, we find several of them hitting threat intelligence or associated
with malware according to sandbox logs. They may be maliciously
installed by client-side malware or spamming tools in order to
inspect secure connections. For others, they can be imported by
local software (e.g., VPNs and proxies). While we are still unsure of
the exact reason, considering the widespread impact and various
implementation flaws of hidden CAs as discussed in this work, web
users and security software are recommended to check carefully,
or even prompt alert messages when installing software with such
behaviors.
Recommendations. This paper reveals the large-scale and wide-
spread impact of hidden root certificates. Meanwhile, the inherent
“non-transparency” of this ecosystem makes it hard to be well regu-
lated. It also leaves serious security risks as reported in this work.
We acknowledge that it could be impractical to rigorously check
and block all roots outside of the public trust list, while at least
several parties could cooperate to mitigate the potential security
risks. Below lists our recommendations.
● Operating system: To regulate root store modification. It is
allowed to install hidden roots into the local trust store, while the
modification process could be regulated by the operating system
in a stricter way through the following steps: 1) Compliance check
before import. Unlike public CAs that are effectively reviewed by
CTs, hidden roots can be generated and installed locally with non-
audit content. Therefore, the OS should take the responsibility of
the regulator, i.e., check the compliance of hidden roots (at least
their certificate content, as Sec 5 and Sec 6 in this work) before
importing them and reject the flawed ones. 2) Monitor and log
trust store modifications. Any insertion into the local trust store
should be monitored and logged in detail, including which appli-
cation/process requests the insertion. 3) Provide explicit risk noti-
fication to users. Importing hidden roots into the local trust store
should be considered as a high-risk operation, thus the OS should
prompt informative security alerts (instead of simply notifying
“local configuration is being modified” ) to users.
● Browser: To enhance UI design and notification. Currently,
except for Mozilla [57] which maintains its own root store, the
vast majority of browsers rely on the trust list provided by the
platform they are running on. That is, certificate chains issued
by hidden roots imported in local trust lists would be indicated as
authenticated just as public trusted ones, e.g., with a (green) padlock
shown in the address bar, and leaving the users even unaware of
the presence of hidden roots. However, as found in this work, the
security properties of such links are questionable (e.g., malicious
interceptions and vulnerable chains from flawed hidden roots).
Therefore, we recommend browsers adjust the alerting mechanism
by: 1) Maintaining a public trusted list itself (or transition to its
own root store, as Chrome [16] plans to do) to distinguish hidden
roots. 2) Differentiating safety icons for such links, e.g., by turning
the padlock orange or tagging it.
● Application: To standardize certificate implementation. We
find non-standard certificate implementations are very common,
especially with ambiguous subject information, which raises great
difficulties in identifying the ownership and usage of hidden roots.
In this work, despite the best efforts, 15 out of the top 100 hidden
root groups are still indistinguishable and temporarily marked as
unknown. Therefore, we suggest that, at least for local applications
that intercept traffic for non-malicious purposes, as well as the in-
ternal roots of governments and enterprises, provide more precise
subject information and normalize certificate content for better
identity verification and security regulations.
8 CONCLUSION
Root CAs serve as trust anchors in the Web PKI security. However,
client-side local root CA stores could be manipulated by vendors,
local software or even malware. Suffering from hidden root CAs
that are not trusted from public root programs into local stores,
web clients are exposed to a series of security risks, such as HTTPS
downgrade and TLS interception.
In this study, we provide a national client-side view of large-scale
hidden root certificates by cooperating with a leading browser ven-
dor in China. We performed a comprehensive measurement study,
and identified 1.17M hidden root certificates, affecting 5.07 million
web clients and 222 million (0.54%) HTTPS connections. Follow-
ing, we also classified their usages and analyzed their distribution
sources, including self-built CAs, local software and fake authenti-
cations CAs. Numerous implementation and operation flaws have