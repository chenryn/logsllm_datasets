# 十五、弹性 Beanstalk
到目前为止，在本书中，我们主要关注弹性容器服务(ECS)及其变体 AWS Fargate 的使用，以管理和部署 Docker 应用。这本书的其余部分将集中在替代技术上，您可以使用这些技术在 AWS 中运行您的 Docker 应用，我们将讨论的第一个是弹性 Beanstalk。
Elastic Beanstalk 属于业界通常称为**平台即服务** ( **PaaS** )的一类，是一种旨在为您的应用提供托管运行时环境的服务，让您专注于开发、部署和操作您的应用，而不必担心周围的基础架构。为了加强这种范式，Elastic Beanstalk 专注于支持各种流行的编程语言，今天包括对 Node.js、PHP、Python、Ruby、Java、.NET 和 Go 应用。当您创建弹性 Beanstalk 应用时，您指定目标编程语言，弹性 Beanstalk 将部署一个支持您的编程语言和相关运行时和应用框架的环境。Elastic Beanstalk 还将部署负载平衡器和数据库等支持基础架构，更重要的是将配置您的环境，以便您可以轻松访问日志、监控信息和警报，确保您不仅可以部署应用，还可以监控它们，并确保它们以最佳状态启动和运行。
除了前面提到的编程语言之外，Elastic Beanstalk 还支持 Docker 环境，这意味着它可以支持任何可以在 Docker 容器中运行的应用，无论是编程语言还是应用运行时，在本章中，您将学习如何使用 Elastic Beanstalk 来管理和部署您的 Docker 应用。您将学习如何使用 AWS 控制台创建弹性 Beanstalk 应用，并创建一个环境，其中包括我们的应用所需的应用负载平衡器和 RDS 数据库实例。您将在初始设置中遇到一些问题，并学习如何使用 AWS 控制台和弹性 Beanstalk 命令行工具诊断和排除这些问题。
为了解决这些问题，您将配置一个名为 **ebextensions** 的功能，这是 Elastic Beanstalk 的高级配置功能，可用于将许多自定义配置方案应用到您的应用中。您将利用 ebextensions 来解决 Docker 卷的权限问题，将 Elastic Beanstalk 生成的默认环境变量转换为应用期望的格式，并最终确保单次部署任务(如执行数据库迁移)仅在每个应用部署的单个实例上运行。
This chapter is not intended to provide exhaustive coverage of Elastic Beanstalk and will only focus on core scenarios related to deploying and managing Docker applications.  For coverage of support for other programming languages and more advanced scenarios, refer to the [AWS Elastic Beanstalk Developer Guide](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/Welcome.html).
本章将涵盖以下主题:
*   弹性 Beanstalk 简介
*   使用 AWS 控制台创建弹性 Beanstalk 应用
*   使用弹性 Beanstalk 命令行界面管理弹性 Beanstalk 应用
*   定制弹性 Beanstalk 应用
*   部署和测试弹性 Beanstalk 应用
# 技术要求
以下是本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   按照第 1 章中的说明配置本地环境
*   根据第 3 章中的说明配置的本地 AWS 配置文件
*   Python 2.7 或 3.x
*   画中画包管理器
*   AWS CLI 版本 1.15.71 或更高版本
*   Docker 18.06 CE 或更高版本
*   Docker 写作 1.22 或更高
*   GNU Make 3.82 或更高版本
本章假设您已经成功完成了本书到目前为止涵盖的所有配置任务
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch14](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14)。
查看以下视频，了解《行动守则》:
[http://bit.ly/2MDhtj2](http://bit.ly/2MDhtj2)
# 弹性 Beanstalk 简介
正如本章介绍中所讨论的，Elastic Beanstalk 是 AWS 提供的 PaaS 产品，它允许您专注于应用代码和功能，而不用担心支持应用所需的周围基础架构。为此，弹性 Beanstalk 在方法上有些固执己见，通常以特定的方式工作。Elastic Beanstalk 确实尽可能地利用其他 AWS 服务，并试图从与这些服务的集成中获得努力和复杂性，如果您遵循 Elastic Beanstalk 期望您使用这些服务的方式，这将非常有效。如果你在一个中小型组织中管理一个小团队，弹性 Beanstalk 可以给桌子带来很多价值，提供很多开箱即用的功能。但是，一旦您的组织发展壮大，并且您希望优化和标准化您部署、监控和操作应用的方式，您可能会发现您已经超越了 Elastic Beanstalk 以应用为中心的方法。
例如，重要的是要理解弹性 Beanstalk 基于每个 EC2 实例的单个 ECS 任务定义的概念进行操作，因此如果您想要在共享基础架构上运行多个容器工作负载，弹性 Beanstalk 并不是您的正确选择。这同样适用于日志和操作工具——一般来说，弹性 Beanstalk 提供自己的工具链，非常专注于单个应用，而您的组织可能希望采用跨多个应用运行的标准工具集。就我个人而言，我更喜欢使用 ECS 提供的更灵活和可扩展的方法，但我必须承认，您基本上通过弹性 Beanstalk 免费获得的一些现成的操作和监控工具对启动和运行应用非常有吸引力，并且与其他 AWS 服务完全集成。
# 弹性 Beanstalk 概念
本章只专注于使用弹性 Beanstalk 运行 Docker 应用，因此不要期望对弹性 Beanstalk 及其所有支持的编程语言进行详尽的介绍。然而，理解基本概念是很重要的，在我们开始创建弹性 Beanstalk 应用之前，我现在将简要介绍一下这些概念。
使用弹性 Beanstalk 时，您可以创建*应用*，该应用可以定义一个或多个*环境*。以 todo back and 应用为例，您可以将 todo back and 应用定义为弹性 Beanstalk 应用，并创建一个名为 Dev 的环境和一个名为 Prod 的环境，以反映我们迄今为止部署的开发和生产环境。每个环境都引用应用的特定版本，其中包含应用的可部署代码。在 Docker 应用的情况下，源代码包括一个名为`Dockerrun.aws.json`的规范，该规范为您的应用定义了容器环境，该环境可能引用外部 Docker 映像或引用用于构建您的应用的本地 Docker 文件。
另一个需要理解的重要概念是，在幕后，Elastic Beanstalk 在常规的 EC2 实例上运行您的应用，并且遵循一个非常严格的范例，即每个 EC2 实例一个您的应用实例。每个弹性 Beanstalk EC2 实例都基于您的目标应用运行一个特别精心策划的环境，例如，在多容器 Docker 应用的情况下，EC2 实例包括 Docker 引擎和 ECS 代理。在 Linux 服务器的情况下，弹性 Beanstalk 还允许您通过 SSH 访问和管理这些 EC2 实例(我们将在本章中使用)，尽管您通常应该出于故障排除的目的保留这种访问权限，并且永远不要尝试自己直接修改这些实例的配置。
# 创建弹性 Beanstalk 应用
现在您已经了解了弹性 Beanstalk 的基本概念，让我们将注意力转向创建一个新的弹性 Beanstalk 应用。您可以使用多种方法创建和配置弹性 Beanstalk 应用:
*   AWS 控制台
*   AWS 命令行界面和软件开发工具包
*   AWS 云阵
*   弹性 Beanstalk
在本章中，我们将首先在 AWS 控制台中创建一个弹性 Beanstalk 应用，然后使用弹性 Beanstalk 命令行界面来管理、更新和细化该应用。
当您创建 Docker 应用时，一定要了解弹性 Beanstalk 支持两种 Docker 应用:
*   单容器应用:[https://docs . AWS . Amazon . com/elastic cbeanstalk/latest/DG/docker-single container-deploy . html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/docker-singlecontainer-deploy.html)
*   多容器应用:[https://docs . AWS . Amazon . com/elastic cbeanstalk/latest/DG/create _ deploy _ docker _ ECS . html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker_ecs.html)
对于我们的用例，我们将遵循与前几章中如何为 ECS 配置 todo back and 应用非常相似的方法，因此我们将需要一个多容器应用，因为我们之前在 ECS 任务定义中定义了一个名为**todo back and**的主应用容器定义和一个 **collectstatic** 容器定义(参见*使用 CloudFormation* 定义 ECS 任务定义一节中的*使用 ECS* 部署应用一章)。总的来说，我推荐多容器方法，不管您的应用是否是单容器应用，因为最初的单容器应用模型违背了 Docker 最佳实践，如果您的应用需求发生变化或增长，它会强制您从单个容器运行所有内容。
# 创建 Dockrrun . AWS . JSON 文件
无论您正在创建的 Docker 应用的类型如何，您都必须首先创建一个名为`Dockerrun.aws.json`的文件，该文件定义了组成您的应用的各种容器。该文件以 JSON 格式定义，并基于您在前面章节中配置的 ECS 任务定义格式，我们将使用该格式作为`Dockerrun.aws.json`文件中设置的基础。
让我们在`todobackend-aws`存储库中创建一个名为`eb`的文件夹，并定义一个名为`Dockerrun.aws.json`的新文件，如下所示:
```
{
  "AWSEBDockerrunVersion": 2,
  "volumes": [
    {
      "name": "public",
      "host": {"sourcePath": "/tmp/public"}
    }
  ],
  "containerDefinitions": [
    {
      "name": "todobackend",
      "image": "385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend",
      "essential": true,
      "memoryReservation": 395,
      "mountPoints": [
        {
          "sourceVolume": "public",
          "containerPath": "/public"
        }
      ],
      "environment": [
        {"name":"DJANGO_SETTINGS_MODULE","value":"todobackend.settings_release"}
      ],
      "command": [
        "uwsgi",
        "--http=0.0.0.0:8000",
        "--module=todobackend.wsgi",
        "--master",
        "--die-on-term",
        "--processes=4",
        "--threads=2",
        "--check-static=/public"
      ],
      "portMappings": [
        {
          "hostPort": 80,
          "containerPort": 8000
        }
      ]
    },
    {
      "name": "collectstatic",
      "image": "385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend",
      "essential": false,
      "memoryReservation": 5,
      "mountPoints": [
        {
          "sourceVolume": "public",
          "containerPath": "/public"
        }
      ],
      "environment": [
        {"name":"DJANGO_SETTINGS_MODULE","value":"todobackend.settings_release"}
      ],
      "command": [
        "python3",
        "manage.py",
        "collectstatic",
        "--no-input"
      ]
    }
  ]
}
```
定义多容器 Docker 应用时，必须指定并使用规范格式的版本 2，这是通过`AWSEBDockerrunVersion`属性配置的。如果您回头参考*一章中的*使用云信息*定义 ECS 任务定义，您可以看到`Dockerrun.aws.json`文件的版本 2 规范非常相似，尽管格式是 JSON，而不是我们在云信息模板中一直使用的 YAML 格式。我们使用 camel 用例命名来定义每个参数。*
该文件包括两个容器定义——一个用于主 todobackend 应用，一个用于生成静态内容——我们定义了一个名为`public`的卷，用于存储静态内容。我们还在主机上配置了从容器端口 8000 到端口 80 的静态端口映射，因为默认情况下，端口 80 是弹性 Beanstalk 希望您的网络应用监听的地方。
请注意，与我们用于 ECS 的方法有一些重要的区别:
*   **映像**:我们引用了同一个 ECR 映像，但是我们没有指定映像标签，这意味着将始终部署 Docker 映像的最新版本。`Dockerrun.aws.json`文件不支持参数或变量引用，因此如果您想要引用一个显式映像，您将需要一个连续的交付工作流来自动生成该文件作为构建过程的一部分。
*   **环境**:注意我们没有指定任何与数据库配置相关的环境变量，比如`MYSQL_HOST`或者`MYSQL_USER`。我们将在本章的后面讨论这种情况的原因，但是现在请理解，当您在弹性 Beanstalk 中使用对 RDS 的集成支持时，您的应用自动可用的环境变量遵循不同的格式，我们需要对其进行转换以满足我们应用的期望。
*   **日志**:我已经删除了 CloudWatch 日志配置来简化本章，但是没有理由不能在容器中包含 CloudWatch 日志配置。请注意，如果您确实使用了 CloudWatch 日志，您将需要修改 Elastic Beanstalk EC2 服务角色，以包括将日志写入 CloudWatch 日志的权限。我们将在本章后面看到一个这样的例子。
I have also removed the `XRAY_DAEMON_ADDRESS` environment variable to keep things simple, as you may no longer have the X-Ray daemon running in your environment.  Note that if you did want to support X-Ray, you would need to ensure the instance security group attached to your Elastic Beanstalk instances included security rules permitting network communications to the X-Ray daemon.
现在我们已经定义了一个`Dockerrun.aws.json`文件，我们需要创建一个包含这个文件的 ZIP 存档。弹性 Beanstalk 要求您的应用源以 ZIP 或 WAR 存档格式上传，因此有此要求。您可以使用`zip`实用程序从命令行执行此操作，如下所示:
```
todobackend-aws/eb> zip -9 -r app.zip . -x .DS_Store
adding: Dockerrun.aws.json (deflated 69%)
```
这将在`todobackend-aws/eb`文件夹中创建一个名为`app.zip`的归档文件，`-r`标志指定 zip 应该递归地添加任何可能存在的文件夹中的所有文件(这将在本章稍后介绍)。在指定`app.zip`的档案名称后，我们通过指定`.`而不是`*`来引用当前工作目录，因为使用`.`语法将包括任何隐藏的目录或文件(同样，这将是本章后面的情况)。
还要注意，在 macOS 环境中，您可以使用`-x`标志来排除`.DS_Store`目录元数据文件包含在您的归档中。
# 使用 AWS 控制台创建弹性 Beanstalk 应用
我们现在准备使用 AWS 控制台创建一个弹性 Beanstalk 应用。要开始，选择**服务** | **弹性 Beanstalk**，然后点击**开始**按钮创建新应用。在**创建 web app** 画面中，指定 todobackend 的应用名称，配置**多容器 Docker** 的平台，最后使用**应用代码**设置的**上传代码**选项上传您之前创建的`app.zip`文件:
![](img/d841d257-68b2-4f59-8ea4-50c2ff17d47f.png)
Creating an Elastic Beanstalk web application
接下来，点击**配置更多选项**按钮，将出现一个名为**配置 Todobackend-Env** 的屏幕，允许您自定义您的应用。请注意，默认情况下，弹性 Beanstalk 命名您的第一个应用环境`-Env`，因此命名为 **Todobackend-Env** 。
在配置预置部分，选择**高可用性**选项，这将为您的配置添加负载平衡器:
![](img/5e471f97-8e8c-4707-9949-f22419a59c26.png)
Configuring an Elastic Beanstalk web application
如果查看当前设置，会注意到**实例**部分的 **EC2 实例类型**为 **t1.micro** ，**负载均衡器**部分的**负载均衡器类型**为**经典**，当前未配置**数据库**部分。我们先将 **EC2 实例类型**修改为自由层 **t2 .微**实例类型，方法是单击**实例**部分的**修改**链接，更改**实例类型**，然后单击**保存**:
![](img/6955ffa0-6782-47dd-aed1-eca0baed8119.png)
Modifying EC2 instance type
接下来，通过单击**负载平衡器**部分的**修改**链接，然后切片**保存**，将**负载平衡器类型**更改为**应用负载平衡器**。请注意，默认设置期望将您在端口- `80`上的应用暴露给外部世界，如**应用负载平衡器**和**规则**部分中所定义的，并且您的容器将暴露在您的 EC2 实例上的端口 80 上，如**进程**部分中所定义的:
![](img/cb26c7fb-cf9e-4789-bf21-df41b88b4254.png)
Modifying load balancer type
最后，我们需要通过单击**数据库**部分中的**修改**链接来定义应用的数据库配置。选择 **mysql** 作为**引擎**，指定一个合适的**用户名**和**密码**，最后将**保留**设置为**删除**，因为我们只是为了测试目的使用这个环境。其他设置的默认值已经足够，所以您可以在完成配置后点击**保存**按钮:
![](img/2a591e2a-6b48-4839-bcc2-e776bfeb2e48.png)
Configuring database settings
此时，您已经完成了应用的配置，可以点击**配置 Todobackend-env** 屏幕底部的**创建应用**按钮。弹性 Beanstalk 现在将开始创建您的应用，并在控制台中向您显示这方面的进展。
The Elastic Beanstalk application wizard creates a CloudFormation stack behind the scenes that includes all of the resources and configuration you specified.  It is also possible to create your own Elastic Beanstalk environments using CloudFormation without using the wizard.