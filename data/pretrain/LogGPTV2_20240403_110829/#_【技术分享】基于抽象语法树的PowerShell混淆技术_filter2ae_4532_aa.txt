# 【技术分享】基于抽象语法树的PowerShell混淆技术

## 译文声明
本文是翻译文章，原文来源：[cobbr.io](https://cobbr.io)  
原文地址：[原文链接]  
译文仅供参考，具体内容及含义以原文为准。

## 译者信息
- 译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
- 预估稿费：200RMB
- 投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 一、前言
在最新发布的[PSAmsi](https://github.com/cobbr/PSAmsi) v1.1版本中，最大的更新之一是增加了基于Abstract Syntax Tree (AST, 抽象语法树) 的PowerShell“混淆”功能。请注意，“混淆”一词在这里被加上了引号，阅读完本文后您将理解其中的含义。

## 二、Abstract Syntax Tree简介
**什么是Abstract Syntax Tree (AST)?**  
AST是一种常用的结构，通过树状形式来分析和解析编译型语言以及解释型语言的源代码。从PowerShell v3开始，就引入了AST功能。与其他语言相比，PowerShell的独特之处在于其提供的AST结构非常便于开发者使用，并且相关的[文档](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.language)也非常详尽。

一个PowerShell脚本可以对应一个完整的AST结构，如下所示：

## 三、示例脚本
为了更好地介绍相关知识点，我们将以下述脚本为例进行说明：
```powershell
function Test-AstObfuscation {
    [CmdletBinding()]
    param (
        [Parameter(ParameterSetName = "Set1", Position = 0, Mandatory = $true, ValueFromPipelineByPropertyName = $true)]
        [string]$Input
    )
    # 脚本主体
}
```
这个PowerShell函数并没有实际的功能，但它有助于我们理解基于AST的一些混淆技术。

### 3.1 基于PSToken的混淆技术
为了理解基于AST混淆技术的优势，首先了解一下基于PSToken混淆技术的工作原理。Token（或称为“PSToken”）是另一种语法结构，用于解析并表示PowerShell代码。PowerShell从v2版本开始引入了这一功能。PowerShell脚本实际上由大量的PSToken组成，这些PSToken通常以空格符分隔。AST则以更复杂的结构形式表示脚本，并根据函数组件进行分组；而PSToken则采用更为简单的列表形式。

在PSAmsi v1.0版本中，唯一使用的混淆技术是[Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)中的“Token”混淆技术。这是一种基于PSToken的混淆方法。Invoke-Obfuscation提供了多种选项，可以用来混淆各种类型的PSToken。从顶层视角来看，该技术会遍历脚本中的所有PSToken，单独处理每个PSToken，最后将混淆后的片段重新组合起来。

例如，上述示例脚本的PSToken混淆过程如下：

1. **CommandArgument类型的Token**:
   - 原始内容: `Test-AstObfuscation`
   - 混淆后: `TE`s`t-AS`TOBFus`CAtIon`

2. **Member类型的ParameterSetName Token**:
   - 原始内容: `ParameterSetName`
   - 混淆后: `ParamEterseTNAME`

3. **String类型的Token**:
   - 原始内容: `Set1`
   - 混淆后: `"S`et1"`

这种迭代过程会贯穿整个脚本，对每一个Token进行混淆处理。最终结果如下：

| 类型              | 原始内容                      | 混淆后的内容                          |
|-----------------|-------------------------------|------------------------------------|
| CommandArgument | `Test-AstObfuscation`         | `TE`s`t-AS`TOBFus`CAtIon`          |
| Member          | `ParameterSetName`            | `ParamEterseTNAME`                 |
| String          | `Set1`                        | `"S`et1"`                          |
| Member          | `Position`                    | `PositiOn`                         |
| Member          | `Mandatory`                   | `MAnDatoRY`                        |
| Member          | `ValueFromPipelineByPropertyName` | `ValUefroMPipELiNebyProPeRTyname` |
| Variable        | `True`                        | `${t`RuE}`                         |

通过这种方式，基于PSToken的混淆技术可以有效地改变脚本的外观，但并不改变其功能。