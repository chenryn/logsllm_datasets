# 【技术分享】基于抽象语法树的PowerShell混淆技术
|
##### 译文声明
本文是翻译文章，文章来源：cobbr.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、前言**
在最新发布的[PSAmsi](https://github.com/cobbr/PSAmsi)
v1.1版本中，最大的变化就是增加了基于AbstractSyntaxTree（抽象语法树）的PowerShell“混淆”功能。这里“混淆”一词打了引号，希望大家阅读完本文后能理解这个引号的含义。
**  
**
**二、AbstractSyntaxTree简介**
什么是AbstractSyntaxTree（抽象语法树，AST）？AST是一种常用结构，可以通过树状表现形式来分析、解析编译型语言以及解释型语言的源代码。PowerShell从v3以来就引入了AST功能。与其他语言相比，PowerShell的独特之处在于，该语言提供的AST结构非常便于开发者使用，并且相关的[文档](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.language)也非常翔实。
一个PowerShell脚本可以对应一个完整的AbstractSyntaxTree结构，如下所示：
**  
**
**三、示例脚本**
在下文中，我们会以如下脚本为例来介绍相关知识点：
这个PowerShell函数并没有什么实际功能，但有助于我们理解基于AST的一些混淆技术。
**3.1 基于PSToken的混淆技术**
为了理解基于AST混淆技术的优点，我觉得我们可以先来了解一下基于PSToken混淆技术的工作原理。Token或者“PSToken”是另一种语法结构，可以用来解析并表示PowerShell代码，PowerShell从v2开始就引入了这个功能。PowerShell脚本实际上由大量PSToken所组成，这些PSToken之间通常以空格符隔开。AST通常以较为复杂的结构形式来表示脚本，并且会根据函数组件来分组，而PSToken则采用了更为简单的列表形式。
在v1.0版的PSAmsi中，唯一使用的混淆技术为[Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)的“Token”混淆技术，这是一种基于PSToken的混淆技术。Invoke-Obfuscation提供了各种选项，可以用来混淆各种类型的PSToken。从顶层视角来看，该技术会遍历脚本中的所有PSToken，单独混淆处理每个PSToken，最后将混淆后的片段重新组合起来。
比如，上面这个示例脚本所对应的PSToken混淆过程如下所示：
首先是遍历所有PSToken，第一个是CommandArgument类型的token。PowerShell中，我们可以在CommandArgument类型的token中插入一些特殊符号，如下所示：
    Type            Content                     ObfuscatedContent
    ----            -------                     -----------------    CommandArgument Test-AstObfuscation   ->    TE`s`t-AS`TOBFus`CAtIon
接下来，我们面对的是一个Member类型的ParameterSetNametoken，这种token中无法插入特殊符号，因此我们可以随机化其中包含的字符。
    Type            Content                     ObfuscatedContent
    ----            -------                     -----------------    CommandArgument Test-AstObfuscation   ->    TE`s`t-AS`TOBFus`CAtIon
    Member          ParameterSetName      ->    ParamEterseTNAME
接下来是一个String类型的token，这种类型的token有一些混淆方法，这里我们直接加入一些特殊符号，如下所示：
    Type            Content                     ObfuscatedContent
    ----            -------                     -----------------    CommandArgument Test-AstObfuscation   ->    TE`s`t-AS`TOBFus`CAtIon
    Member          ParameterSetName      ->    ParamEterseTNAME
    String          Set1                  ->    “S`et1”
这种迭代过程会贯穿整个脚本：
    Type            Content                                  ObfuscatedContent
    ----            -------                                  -----------------    CommandArgument Test-AstObfuscation              ->      TE`s`t-AS`TOBFus`CAtIon
    Member          ParameterSetName                 ->      ParamEterseTNAME
    String          Set1                             ->      “S`et1”
    Member          Position                         ->      PositiOn
    Member          Mandatory                        ->      MAnDatoRY
    Member          ValueFromPipelineByPropertyName  ->      ValUefroMPipELiNebyProPeRTyname
    Variable        True                             ->      ${t`RuE}             