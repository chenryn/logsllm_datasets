### z/OS Traces

For more information, see “Other types of trace on z/OS” on page 403.

#### Related Tasks
- “Collecting troubleshooting information for IBM Support” on page 302

When you open a case with IBM, you can include additional IBM MQ troubleshooting information (MustGather data) that you have collected to help with investigating the problem. In addition to the information described in this section, IBM Support might request further information on a case-by-case basis.

### Using the GTF with IBM MQ Global Trace on z/OS

On z/OS, you can obtain information about MQI calls and user parameters passed by some IBM MQ calls on entry to, and exit from, IBM MQ. To do this, use the IBM MQ global trace in conjunction with the z/OS generalized trace facility (GTF).

#### Starting and Stopping the GTF

On z/OS, you can use the generalized trace facility (GTF) to record and diagnose system and program problems.

**About This Task:**
You can obtain information about MQI calls and user parameters passed by some IBM MQ calls on entry to, and exit from, IBM MQ. To do this, use the global trace in conjunction with the z/OS generalized trace facility (GTF).

**Procedure:**

1. **Start the GTF at the console:**
   - Enter the `START GTF` command.
   - When starting the GTF, specify the `USRP` option. You will be prompted to enter a list of event identifiers (EIDs). The EIDs used by IBM MQ are:
     - `5E9`: To collect information about control blocks on entry to IBM MQ.
     - `5EA`: To collect information about control blocks on exit from IBM MQ.
     - `5EE`: To collect internal information within IBM MQ.
   - You can also use the `JOBNAMEP` option, specifying the batch, CICS, IMS, or TSO job name, to limit the trace output to specific jobs.

   **Example:**
   ```plaintext
   START GTFxx.yy
   #HASP100 GTFxx.yy ON STCINRDR
   #HASP373 GTFxx.yy STARTED
   *01 AHL100A SPECIFY TRACE OPTIONS
   R 01,TRACE=JOBNAMEP,USRP
   TRACE=JOBNAMEP,USRP
   IEE600I REPLY TO 01 IS;TRACE=JOBNAMEP,USRP
   *02 ALH101A SPECIFY TRACE EVENT KEYWORDS - JOBNAME=,USR=
   R 02,JOBNAME=(xxxxMSTR,xxxxCHIN,zzzzzzzz),USR=(5E9,5EA,5EE)
   JOBNAME=(xxxxMSTR,xxxxCHIN,zzzzzzzz),USR=(5E9,5EA,5EE)
   IEE600I REPLY TO 02 IS;JOBNAME=(xxxxMSTR,xxxxCHIN,zzzzzzzz),USR=(5E9,5EA,5EE)
   *03 ALH102A CONTINUE TRACE DEFINITION OR REPLY END
   R 03,END
   END
   IEE600I REPLY TO 03 IS;END
   AHL103I TRACE OPTIONS SELECTED-USR=(5E9,5EA,5EE)
   AHL103I JOBNAME=(xxxxMSTR,xxxxCHIN,zzzzzzzz)
   *04 AHL125A RESPECIFY TRACE OPTIONS OR REPLY U
   R 04,U
   U
   IEE600I REPLY TO 04 IS;U
   AHL031I GTF INITIALIZATION COMPLETE
   ```
   - `xx` is the name of the GTF procedure to use (optional).
   - `yy` is an identifier for this occurrence of GTF trace.
   - `xxxx` is the name of the queue manager.
   - `zzzzzzzz` is a batch job or CICS region name.
   - Up to 5 job names can be listed.
   - When using GTF, specify the primary job name (CHINIT, CICS, or batch) in addition to the queue manager name (xxxxMSTR).

2. **Stop the GTF at the console:**
   - Enter the `STOP yy` command, where `yy` is the identifier used at startup.

**Related Information:**
- Generating IBM MQ GTF trace on IBM z/OS
- Using IBM MQ global trace

### Controlling IBM MQ Trace on z/OS

On z/OS, you can control IBM MQ trace using MQSC commands.

**Before You Begin:**
To use any of the trace commands, you must have one of the following:
- Authority to issue start and stop trace commands (trace authority).
- Authority to issue the display trace command (display authority).

**Notes:**
1. The trace commands can also be entered through the initialization input data sets.
2. The trace information produced will also include details of syncpoint flows, such as PREPARE and COMMIT.

**Procedure:**

1. **To start writing IBM MQ records to the GTF:**
   - Use the `START TRACE` command, specifying `trace type GLOBAL`.
   - Example: `/cpf start trace(GLOBAL)class(2,3)dest(GTF)`
   - Define the events that you want to produce trace data for using one or more of the following classes:
     - `CLASS 2`: Record the MQI call and MQI parameters when a completion code other than `MQRC_NONE` is detected.
     - `CLASS 3`: Record the MQI call and MQI parameters on entry to and exit from the queue manager.

2. **After the trace has started:**
   - Use the `DISPLAY TRACE` command to display a list of active traces.
   - Use the `ALTER TRACE` command to change the trace events being traced for a particular active queue manager trace. `ALTER TRACE` stops the specified trace and restarts it with the altered parameters.

3. **To stop tracing:**
   - Use the `STOP TRACE` command.
   - Example: `/cpf STOP TRACE(GLOBAL) DEST(GTF) CLASS(*) RMID(*)`
   - In this command, `/cpf` refers to the command prefix for the IBM MQ subsystem.

### Formatting and Identifying Control Block Information on z/OS

After capturing a trace, the output must be formatted, and the IBM MQ control blocks identified.

**Formatting the Information:**
- To format the user parameter data that is collected by the global trace, use either the batch job shown in Figure 59 on page 398 or the `IPCS GTFTRACE USR( xxx )` command, where `xxx` is:
  - `5E9`: To format information about control blocks on entry to IBM MQ MQI calls.
  - `5EA`: To format information about control blocks on exit from IBM MQ MQI calls.
  - `5EE`: To format information about IBM MQ internals.
- You can also specify the `JOBNAME(jobname)` parameter to limit the formatted output to specific jobs.

**Example Batch Job:**
```plaintext
//S1 EXEC PGM=IKJEFT01,DYNAMNBR=20,REGION=4096K
//IPCSPARM DD DSN=SYS1.PARMLIB,DISP=SHR
//IPCSDDIR DD DSN=thlqual.ipcs.dataset.directory,DISP=SHR
//SYSTSPRT DD SYSOUT=*,DCB=(LRECL=137)
//IPCSTOC DD SYSOUT=*
//GTFIN DD DSN=gtf.trace,DISP=SHR
//SYSTSIN DD *
IPCS
SETDEF FILE(GTFIN) NOCONFIRM
GTFTRACE USR(5E9,5EA,5EE)
/*
//STEPLIB DD DSN=thlqual.SCSQAUTH,DISP=SHR
```

**Identifying the Control Blocks Associated with IBM MQ:**
- The format identifier for the IBM MQ trace is `D9`. This value appears at the beginning of each formatted control block in the formatted GTF output, in the form: `USRD9`.

**Identifying the Event Identifier Associated with the Control Block:**
- The trace formatter inserts one of the following messages at the start of each control block, indicating whether the data was captured on entry to or exit from IBM MQ:
  - `CSQW072I ENTRY: MQ user parameter trace`
  - `CSQW073I EXIT: MQ user parameter trace`

**Interpreting the Trace Information on z/OS:**
- The GTFTRACE produced by IBM MQ can be examined to determine possible errors with invalid addresses, invalid control blocks, and invalid data.
- Consider the following points when looking at the data produced by the GTFTRACE command:
  - If the control block consists completely of zeros, it is possible that an error occurred while copying data from the user's address space. This might be because an invalid address was passed.
  - If the first part of the control block contains non-null data, but the rest consists of zeros, it is again possible that an error occurred while copying data from the user's address space, for example, the control block was not placed entirely within valid storage. This might also be due to the control block not being initialized correctly.
  - If the error occurred on exit from IBM MQ, it is possible that IBM MQ might not write the data to the user's address space. The data displayed is the version that it was attempting to copy to the user's address space.

**Table 28. Control Blocks Traced for IBM MQ MQI Calls:**

| MQI Call | Entry                     | Exit                                          |
|----------|---------------------------|-----------------------------------------------|
| `MQCB`   | `MQCBD, MQMD, MQGMO`      | `MQCBD, MQMD, MQGMO`                         |
| `MQCLOSE`| None                      | None                                          |
| `MQGET`  | `MQMD, MQGMO`             | `MQMD, MQGMO, and the first 256 bytes of message data` |
| `MQINQ`  | Selectors (if `SelectorCount` is greater than 0) | Integer attributes (if `IntAttrCount` is greater than 0) |
|          | Character attributes (if `CharAttrLength` is greater than 0) | Character attributes (if `CharAttrLength` is greater than 0) |
| `MQOPEN` | `MQOD`                    | `MQOD`                                        |
| `MQPUT`  | `MQMD, MQPMO, and the first 256 bytes of message data` | `MQMD, MQPMO, and the first 256 bytes of message data` |
| `MQPUT1` | `MQMD, MQOD, MQPMO, and the first 256 bytes of message data` | `MQMD, MQOD, MQPMO, and the first 256 bytes of message data` |
| `MQSET`  | Selectors (if `SelectorCount` is greater than 0) | Selectors (if `SelectorCount` is greater than 0) |
|          | Integer attributes (if `IntAttrCount` is greater than 0) | Integer attributes (if `IntAttrCount` is greater than 0) |
|          | Character attributes (if `CharAttrLength` is greater than 0) | Character attributes (if `CharAttrLength` is greater than 0) |
| `MQSTAT` | `MQSTS`                   | `MQSTS`                                       |
| `MQSUB`  | `MQSD, MQSD.ObjectString, MQSD.SubName, MQSD.SubUserData, MQSD.SelectionString, MQSD.ResObjectString` | `MQSD, MQSD.ObjectString, MQSD.SubName, MQSD.SubUserData, MQSD.SelectionString, MQSD.ResObjectString` |
| `MQSUBRQ`| `MQSRO`                   | `MQSRO`                                       |

**Note:**
- In the special case of an `MQGET` call with the `WAIT` option, a double entry is seen if there is no message available at the time of the `MQGET` request, but a message subsequently becomes available before the expiry of any time interval specified. This is because, although the application has issued a single `MQGET` call, the adapter is performing the wait on behalf of the application and, when a message becomes available, it reissues the call. So, in the trace, it appears as a second `MQGET` call.

**Information About Specific Fields of the Queue Request Parameter List:**

| Identifier | Description                             |
|------------|-----------------------------------------|
| `Action`   | Requested action                        |
| `BufferL`  | Buffer length                           |
| `CBD`      | Address of callback descriptor          |
| `CompCode` | Completion code                         |
| `CharAttL` | Character attributes length             |
| `DataL`    | Data length                             |
| `Hobj`     | Object handle                           |
| `Hsub`     | Subscription handle                      |
| `IntAttC`  | Count of integer attributes             |
| `pObjDesc` | Object descriptor                       |
| `Oper`     | Operation                               |
| `Options`  | Options                                 |
| `pBuffer`  | Address of buffer                       |
| `pCharAtt` | Address of character attributes         |
| `pCTLO`    | Address of control callback options     |
| `pECB`     | Address of ECB used in get              |
| `pGMO`     | Address of get message options          |
| `pIntAtt`  | Address of integer attributes           |
| `pMsgDesc` | Address of message descriptor           |
| `pPMO`     | Address of put message options          |
| `pSD`      | Address of subscription descriptor      |
| `pSelect`  | Address of selectors                    |
| `pSRQOpt`  | Address of subscription request options |
| `pSTS`     | Address of status structure             |
| `Reason`   | Reason code                             |
| `RSVn`     | Reserved for IBM                        |
| `SelectC`  | Selector count                          |
| `Thread`   | Thread                                  |
| `Type`     | Requested type                          |
| `UOWInfo`  | Information about the unit of work      |
| `Userid`   | CICS or IMS user ID, for batch or TSO this is zero |

### Using the Channel Initiator Trace

The channel initiator trace can help determine why a problem is happening in the CHIN address space, whether the cause of the problem is in IBM MQ, the operating system, or the network.

**About This Task:**
- See Figure 46 on page 270 for information about how to get a dump of the channel initiator address space. Note that dumps produced by the channel initiator do not include trace data space. The trace data space, which is called `CSQXTRDS`, contains trace information. You can request this by specifying it on a slip trap or when you use the dump command.

**Procedure:**

1. **To run the trace:**
   - Use the `START TRACE` command.
   - You can also set this trace to start automatically using the `TRAXSTR` queue manager attribute. For more information about how to do this, see `ALTER QMGR`.

2. **To display this trace information:**
   - Enter the `IPCS` command: `LIST 1000. DSPNAME(CSQXTRDS)`

3. **To format the trace:**
   - Use the command: `CTRACE COMP(CSQXssnm)`, where `ssnm` is the subsystem name.

**Related Tasks:**
- “Collecting troubleshooting information for IBM Support” on page 302

When you open a case with IBM, you can include additional IBM MQ troubleshooting information (MustGather data) that you have collected to help with investigating the problem. In addition to the information described in this section, IBM Support might request further information on a case-by-case basis.

### Using Line Trace

A wrap-around line trace exists for each channel. This trace is kept in a 4 KB buffer for each channel in the channel initiator address space. Trace is produced for each channel, making it ideal for problems where a channel appears to be hung, as information can be collected about the activity of this channel long after the normal trace has wrapped.

**About This Task:**
- The line trace is always active; you cannot turn it off. It is available for both LU 6.2 and TCP channels and should reduce the number of times a communications trace is required.
- You can view the trace as unformatted trace that is written to `CSQSNAP`.

**Procedure:**

1. **Ensure that the CHIN procedure has a SNAP DD statement.**

2. **Start a CHIN trace, specifying IFCID 202:**
   - `START TRACE(CHINIT) CLASS(4) IFCID(202)`

3. **Display the channel status for those channels for which the line trace is required:**
   - `DISPLAY CHSTATUS(channel) SAVED`
   - This dumps the current line for the selected channels to `CSQSNAP`. For more information, see “Snap dumps on z/OS” on page 286.

**Notes:**
- The addresses of the storage dump are incorrect because the `CSQXFFST` mechanism takes a copy of the storage before writing it to `CSQSNAP`.
- The dump to `CSQSNAP` is only produced the first time you run the `DISPLAY CHSTATUS SAVED` command. This is to prevent getting dumps each time you run the command.

4. **To obtain another dump of line trace data, stop and restart the current trace:**
   - You can use a selective `STOP TRACE` command to stop just the trace that was started to gather the line trace data. To do this, note the `TRACE NUMBER` assigned to the trace as shown in this example:
     ```plaintext
     +ssid START TRACE(CHINIT) CLASS(4) IFCID(202)
     ```