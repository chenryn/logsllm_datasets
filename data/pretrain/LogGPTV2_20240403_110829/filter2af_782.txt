# Tethr：安卓网络共享服务开通状态检查绕过漏洞 (CVE-2017-0554)

## 译文声明
本文为翻译文章，原作者为 lanrat，原文发布于 lanrat.com。译文仅供参考，具体内容及含义以原文为准。

在绝大多数未Root且使用原厂ROM的安卓手机上，启用网络共享（Tethering）功能前需要进行服务开通状态检查（Provisioning Check），确保数据流量计划允许共享。本文主要介绍了一种名为Tethr的方法，该方法可以在Android 7.1.2版本之前绕过这一检查。

发现此问题后，我向安卓开发团队报告了这一漏洞，并获得了CVE-2017-0554编号。目前，在7.1.2版本之后已经修复了该问题。关于漏洞的具体细节，请参见 [in-telephony]。

## 背景介绍

安卓系统中的网络共享功能由`/system/build.prop`文件控制。默认情况下，启用网络共享前需进行服务开通状态检查。可以通过添加以下行来绕过这项检查：

```plaintext
net.tethering.noprovisioning=true
```

未Root的设备没有权限编辑`/system/build.prop`文件，因此通常由ROM制造商设置该属性。例如，Google Nexus 6P 默认将 `net.tethering.noprovisioning` 设置为 `true`，从而绕过了检查。然而，这只是一个例外情况。Nexus 5X、Pixel 和 Pixel 2 都会执行服务开通状态检查。

## 漏洞概述

在安卓系统上启用网络共享时，操作系统首先与运营商通信，进行服务开通状态检查，以确定用户的套餐是否允许共享。如果允许，则立即启用共享；否则，会显示错误提示。

如果没有插入SIM卡，不会执行该项检查，直接允许共享。此外，如果在无SIM卡的情况下启用网络共享后再插入SIM卡，共享会被立即关闭，确保验证的可靠性。

然而，在无线通信连接过程中启用网络共享时，不会进行服务开通状态检查，并且在网络连接建立后，共享仍保持启用状态。由此发现了两个问题：

1. 在原厂安卓系统上，用户安装的应用程序具有重置蜂窝调制解调器的权限。
2. 一旦蜂窝调制解调器完成重连接过程，将不会再进行服务开通状态检查。

这两个BUG使得即使设置了`net.tethering.noprovisioning=true`，也能绕过服务开通状态检查。

## Tethr演示

在深入研究细节之前，请观看我们的演示视频。视频展示了在安卓系统的用户界面中何时应该启用网络共享功能、如何执行服务开通状态检查以及不允许网络共享的情况。然后，当我们运行Tethr演示应用程序时，调制解调器会重置，手机暂时失去信号，随后成功启用网络共享。

演示视频：
﻿您的浏览器不支持Video标签﻿  
项目源代码请参见：[GitHub链接]
编译后的APK文件请参见：[APK下载链接]

### 漏洞1: 通过Java反射重置无线通信

在安卓系统中，可以使用Java反射来调用未记录或隐藏的API。虽然这种方法不受官方支持，但最终可以允许应用程序开发人员执行不受支持的任务，或在这种情况下绕过权限检查。

在`CellRefresh.java`中，通过调用`CellRefresh.Refresh()`可以执行蜂窝调制解调器的重置。大多数安卓版本上，`CellRefresh`会重置蜂窝网络连接，但在安卓6及以上版本，使用如下反射：

```java
getSystemService(Context.TELEPHONY_SERVICE).getITelephony().setCellInfoListRate();
getSystemService(Context.CONNECTIVITY_SERVICE).mService.setMobileDataEnabled();
```

较旧的安卓版本，则使用如下反射：

```java
getSystemService(Context.CONNECTIVITY_SERVICE).mService.setRadio();
getSystemService(Context.TELEPHONY_SERVICE).getITelephony().disableDataConnectivity();
getSystemService(Context.TELEPHONY_SERVICE).getITelephony().enableDataConnectivity();
```

修复方案是：在使用这些方法之前，应检查应用程序是否具有系统权限或特权。

### 漏洞2: 网络共享服务开通状态检查竞争条件漏洞

为了利用竞争条件漏洞并绕过网络共享服务开通状态检查，可以在特定时间使用`PhoneStateListener`和`AccessibilityService`启用网络共享模式。

首先，如上所述，重置网络。在重置过程中，`PhoneStateListener`（`TetherPhoneStateListener.java`）会监听蜂窝网络何时断开，然后使用`AccessibilityService`（`TetherAccessibilityService.java`）找到相应的UI开关，启动系统的网络共享功能。

实际上，不一定需要使用`AccessibilityService`和`PhoneStateListener`。用户可以在恰当的时间手动开启网络共享功能，也可以实现相同的结果。但由于可开启网络共享的时间非常短暂，使用`AccessibilityService`自动完成更为简单。

针对这一漏洞，建议在每次无线通信重置后也进行一次服务开通状态检查。

## 测试过程

通信运营商：Verizon 和 AT&T。

测试手机（使用原厂ROM、锁定Bootloader、OEM系统）：
1. Nexus 5X（系统：Android 6.0.1）
2. Nexus 5X（系统：Android 7.0.0）
3. Nexus 5X（系统：Android 7.1.1）
4. Samsung Galaxy S7（系统：Android 6.0.1）

未进行测试，但也同样可利用该漏洞的手机有：
1. Pixel (XL)
2. 其他非Nexus品牌但同样执行服务开通状态检查的设备

特别指出的是，由于Nexus 6P在其原厂`build.prop`中已将`net.tethering.noprovisioning`设定为`true`，因此不需要利用这个漏洞，直接就会绕过服务开通状态检查。

## 修复方案

在我将该漏洞情况提交给安卓开发团队后，Google对这一问题进行了修复，并针对安卓7.1.2版本发布了两个补丁。第一个补丁增加了对`setCellInfoListRate`的权限检查，第二个补丁修复了网络共享服务开通状态检查的逻辑缺陷，并增加了重新校验的过程。

修复完成后，Google还赠送给我一部Pixel XL手机，作为发现并报告上述漏洞的奖励。