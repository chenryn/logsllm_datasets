### Cluster Network Design with Wireless Flyways

In our design, each rack in a cluster is equipped with one or more wireless devices, which can be dynamically configured to create flyways as needed. This design is independent of the specific topology used in the oversubscribed core, whether it is a typical tree structure or recent proposals for non-oversubscribed networks [1, 8, 9] with proportionally fewer switches and links.

#### Objective
Our goal is to configure the flyway links and routing to improve the time required to satisfy traffic demands. The key metric we focus on is the Completion Time of Demands (CTD), defined as the time it takes for the last flow to complete.

#### System Tasks
The system performs three main tasks:
1. **Traffic Demand Measurement and Estimation:** Measure and estimate the traffic demands.
2. **Flyway Instantiation:** Decide which flyways to instantiate.
3. **Routing Configuration:** Make appropriate routing changes to route traffic over the flyways.

**Inputs:**
- Measured 60 GHz channel model
- Antenna characteristics
- Device locations
- Traffic demands (if available)

We primarily focus on flyway instantiation, with brief discussions on traffic estimation and routing (§5.3).

#### Challenges and Design Approach
Computing an optimal choice of flyways is challenging due to wireless constraints such as range and interference, which are difficult to incorporate into a max-flow formulation. Therefore, our design decomposes the problem into two sub-parts:
1. **Flyway Picker (§5.1):** Proposes flyways that will improve the CTD.
2. **Flyway Validator (§5.2):** Confirms or rejects the proposed flyways based on feasibility and non-interference. The validator also predicts the capacity of the flyways, allowing the picker to add approved flyways and propose additional ones for subsequent hotspots. The process repeats until no more flyways can be added.

This decomposition, while not optimal, finishes quickly, scales well, and provides significant gains, as we will demonstrate.

### 5.1 Choosing Flyways

Assuming known traffic demands, we begin with an example. Consider the network in Figure 14(b). Six ToR switches (A and C–G) have traffic to send to ToR B. A has 100 units to send, while the rest each send 80 units. Each ToR has one wireless device connected to it. The wired link capacity in and out of the ToRs is 10 units/sec, and these are the only potential bottlenecks. The downlink into B is the bottleneck, carrying 500 units of traffic in total, taking 50 seconds to complete. Hence, the CTD is 50 seconds.

If we add a flyway (capacity 3) from A to B to improve the performance of the straggler (the ToR pair that sends the most traffic on the bottleneck link and completes last), the traffic on the bottleneck drops to 400 units, and the CTD reduces to 40 seconds. However, the straggler often contributes only a small proportion of the total demand on that link (in this case, 100/500). Alleviating the straggler provides only a 20% gain, reducing the CTD to 40 seconds.

There is room to spare on the flyway; the demand from A to B completes after 33.3 seconds, 6.7 seconds before traffic from C–G. Our datasets indicate that very few ToR pairs on hot links require substantial capacity. Therefore, we allow indirect transit traffic to use the flyway. As shown in Figure 14(d), traffic from other sources to B bypasses the bottleneck by flowing via node A and the flyway, improving the CTD to 38.5 seconds.

Often, the flyway to the straggler is infeasible or inferior. Allowing transit traffic ensures that any flyway that can offload traffic on the bottleneck will be useful, even if it is not between the straggler pair. In this case, enabling the flyway from C to B, with twice the capacity of the flyway from A, is more effective, resulting in a CTD of 31.2 seconds.

**Proposed Algorithm:**
Our approach formalizes these insights. By allowing transit traffic on a flyway, we avoid high fan-in (or fan-out) issues correlated with congestion. We choose the flyway that diverts the most traffic away from the bottleneck link. For a congested downlink to ToR p, the best flyway will be from the ToR that has a high-capacity flyway and sufficient available bandwidth on its downlink to allow transit traffic through:

\[
\arg \max_{\text{ToR } i} \min(C_{i \rightarrow p}, D_{i \rightarrow p} + \text{down}_i)
\]

- \(C_{i \rightarrow p}\): Capacity of the flyway.
- \(D_{i \rightarrow p}\): Demand from i to p.
- \(\text{down}_i\): Available bandwidth on the downlink to i.

For a congested uplink to ToR, the expression is similar:

\[
\arg \max_{\text{ToR } i} \min(C_{p \rightarrow i}, D_{p \rightarrow i} + \text{up}_i)
\]

### 5.2 Validating Flyway Choice

The flyway validator determines whether a specified set of flyways can operate together by computing the effects of interference and the likely capacity of each link. It uses the same principle as DIRC's conflict graph [17]: If we know the signal delivered between all pairs of nodes in all transmit and receive antenna orientations, we can compute the SINR for all nodes and select rates using a simple SINR-based auto-rate algorithm (§B).

Our SINR model is conservative, assuming all nodes from other flyways send concurrently and adding an additional 3 dB. We disable carrier sense on our flyway links, managing contention with other types of coordination (§C). The SINR model and rate selection are appropriate for our data center environment due to high directionality (§3 and [17]).

**Signal Strength Table Generation:**
In the simulator, we compute delivered signal power using models of antennas and signal propagation developed in §3. In a real DC deployment, we measure it, as a data center provides a stable, line-of-sight environment with known geographic coordinates. We can afford to measure this table once when the data center is configured, and measurements remain valid over time. Idle nodes can refresh entries opportunistically without disrupting ongoing wireless traffic.

The table can also determine the best antenna orientation for communication between two ToRs, eliminating the need for complex 802.11ad antenna mechanisms. Advanced antenna methods like null-steering could increase flyway concurrency, but we defer these to future work. Our results (§6) show that even a simple antenna model effectively improves data center performance.

### 5.3 Traffic Estimation and Routing

Traffic estimation and routing are not the main focus of this paper, and our system design in these areas is similar to prior work [30, 7, 8]. We briefly describe them for completeness.

**Estimating Traffic Demands:**
- **Cluster-Wide Schedulers:** For clusters orchestrated by cluster-wide schedulers (e.g., map-reduce schedulers like Quincy [11]), logically co-locating our system with such a scheduler makes traffic demands visible. C-Through [30] takes a similar approach, assuming applications hint at their traffic demands.
- **Predictable Traffic Patterns:** In clusters with predictable traffic patterns, such as HPC datasets, we use instrumentation to estimate current traffic demands and pick flyways based on these estimates. Such distributed, end-host-based traffic measurement instrumentation is already used in EC2 and Windows Azure for billing and accounting.

We designed a simple traffic estimation scheme using a shim layer (an NDIS filter driver) on servers to collect traffic statistics, similar to prior work [6, 14]. We use a simple moving average of recent estimates, which works well with our traces and is feasible at line rate with negligible server load.

**Obtaining the Conflict Graph:**
If there are \(N\) racks and \(K\) antenna orientations, the input to the validator is an \((N \times K)^2\)-size table of received signal strengths.

**Routing:**
We present a simple mechanism that routes traffic across potentially multiple paths made feasible with flyways. Our approach treats flyways as point-to-point links. Every path on the flyway transits through exactly one flyway link, so the routing encapsulates packets to the appropriate interface address. The flyway picker computes the fraction of traffic to flow on each path and relays these decisions to the servers. We built this functionality into the NDIS filter driver, and micro-benchmarks on standard DC servers with 1 Gbps NICs indicate that these operations can be performed at line speed with negligible additional load.

When changing the flyway setup, we disable encapsulation and remove the added routes. The default routes on the ToR and Agg switches remain unchanged, directing traffic over the wired network. Thus, during flyway changes (and failures, if any), packets are sent over the wired network.

### 6. Evaluating Flyways

We combine our measurement- and standard-driven wireless models with real data center traces to evaluate the practical benefits of our wireless flyways system in oversubscribed networks.

#### Methodology

**Demands:**
We replay traffic measured from four different clusters, including workloads from latency- and throughput-sensitive applications and highly tuned HPC applications.

**Wireless Models:**
We use the wireless physical and MAC layers and channel models described in §B, with a few salient specifics:
- Three channels defined in 802.11ad to increase concurrent links.
- Devices use a uniform 10 mW transmit power.
- The system uses the interference model and rate selection algorithms described in §B and the flyways validator described in §5.2.
- 802.11ad OFDM rates peak at 6.76 Gbps, with about 85% usable for traffic (§C).

**Geography:**
We mimic the geographical layout of racks as per measurements from an open floor-plan data center (see Figure 9). Each ToR is equipped with \(K\) wireless devices, often 1, mounted atop the rack. ToR switches have a few unused ports for occasional network management tasks.

**System Variants:**
- **Straggler:** The simplest alternative, where the picker proposes a flyway between the pair of ToRs taking the longest time to complete. If the validator accepts this proposal, the flyway is added; otherwise, the process terminates.
- **Transit:** Augments Straggler by allowing transit traffic on added flyways, improving performance by offloading more traffic from the bottleneck link.
- **Greedy:** Augments Transit by preferentially picking, in each iteration, the flyway that offloads the most traffic from the bottleneck link. This results in using flyways between close-by nodes with high capacity, adding shorter links and more feasible flyways than Straggler.

**Metric:**
Our primary metric is the completion time of demands (CTD). Figures 15 and 16 show the significant improvements provided by the greedy traffic-aware choice of flyways for observed data center demands.