Uplink vs. Downlink. The eNodeB synchronizes uplink trans-
missions depending on the distance between the UE and itself.
In particular, it estimates the required transmission delay and
signals the time offset for sending data in advance. Deploying
an uplink sniffer between the UE and the eNodeB requires the
attacker to synchronize with this advance offset. Consequently,
the attacker must guess the exact location of the UE, which
challenges using an uplink sniffer.
In contrast, there is no advance synchronization between
the eNodeB and the UE in the downlink direction, i. e., the
downlink sniffer can be deployed without any knowledge
about the UE’s location. In conclusion, it is preferable to use
the downlink sniffer on an average of 94.73 % of contention-
based resolution access procedures rather than depending on
the advance synchronization in the uplink direction.
B. Website Fingerprinting
Tor is a prominent example for website ﬁngerprinting at-
tacks, where an adversary learns the destination of a con-
nection despite the layered encryption of Tor [9], [19]. This
becomes possible due to information leaks in the metadata
of a connection, e. g., characteristic timing patterns of trans-
missions that allow distinguishing different websites. In the
following, we demonstrate how the challenge of website
ﬁngerprinting can be mapped to LTE layer two attacks.
The MAC layer is responsible for scheduling the data trans-
mission of a connection. In particular, the DCI information
deﬁnes the data allocation for the uplink and downlink for each
user individually. As a passive adversary, we can eavesdrop on
this information and learn the user data consumption, i. e., the
volume of trafﬁc that was sent and received over a connection.
This becomes possible by decoding the DCI information that
provides unencrypted information up to the PDCP layer. From
this information, we learn metadata features, like the length of
a PDCP packet, which helps to distinguish requests to different
websites in their time series representation.
For conducting a closed-world website ﬁngerprinting attack,
we record a corpus of labeled traces for a representative set
of websites. Starting from this information set, we analyze
traces of new connections and compare their characteristics
with the metadata features of the already recorded corpus.
An attack can be considered successful
if we manage to
identify requested websites just from metadata information at
an acceptable success rate.
1) Experiments: We conduct
the website ﬁngerprinting
attack within our own LTE network for recording a sample
corpus of layer two traces in up- and downlink connection,
according to the following experimental setup and attack
procedure.
Experimental Setup. We build a lab LTE network setup by
deploying a modiﬁed version of the srsLTE eNodeB along
with an OpenAirInterface Evolved Packet Core (EPC) [14],
[20]. Both components behave speciﬁcation conform and we
can connect COTS mobile phones with a programmable SIM
card to our LTE network. In particular, we test three Android
phones and access the Alexa top 50 websites overall 100 times
with each phone automatically by using Appium [21]. For
each new visit, we reset all caches at the phone. Each page
visit results in a pcap trace, recorded at the eNodeB. We can
distinguish user and control plane trafﬁc based on the logical
channel ID in the MAC header and thus obtain traces free
from control trafﬁc. The raw user plane traces then document
(cid:18)(cid:18)(cid:19)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:42 UTC from IEEE Xplore.  Restrictions apply. 
the (f1, rnti), (f2, pdcpd) PDCP direction (up- or downlink),
(f3, pdcps) PDCP sequence number, (f4, pdcpl) PDCP length,
and the timestamp of each packet.
Procedure. Our classiﬁcation procedure consists of two con-
secutive analysis steps. First, we compare all captured traces
using fast dynamic time warping (FastDTW) as a distance
metric for the comparison of recorded traces [22]. This time
series analysis stretches two input vectors X, Y in a way
that the Euclidean distances between corresponding points are
minimal. In other words, DTW helps to compute the similarity
of measured trafﬁc without depending on synchronization,
e. g., we use this for distinguishing websites by individual
trafﬁc patterns. Second, we use the distances as an input to
the k-nearest neighbor algorithm (k-NN) as decision function.
In particular, for an unknown trace, we search the closest (1-
NN) other trace within the set of labeled traces [23] and use
this to classify the new sample. We repeat the analysis using
a 10-fold cross-validation for the veriﬁcation of our results.
The standard, i. e., non-optimized time warping problem,
constructs a warp path W given two time series X, Y of
lengths |X|,|Y |:
W = w1, w2, . . . , wK
max(|X|,|Y |) ≤ K < |X| + |Y |,
(1)
where K is the length of the warp path, and the kth element
of the warp path is wk = (i, j) with i as index of a time series
element in X and j an index of Y , respectively. We get an
optimal warp path Wopt if the distance is minimal:
K(cid:2)
k=1
dist(Wopt) =
dist(wk(i), wk(j)),
(2)
where dist(wk(i), wk(j)) is the distance between two data
point indexes of i ∈ X, j ∈ Y in the kth element of the
warp path. The standard implementation of the Dynamic Time
Warping, as introduced in Equations 1 and 2, has a complexity
of O(N 2), whereas we refer to the approximate FastDTW
implementation with complexity O(N ) [22].
Applying FastDTW as distance metric, we generate a dis-
tance matrix Mdist = K × L with mutual distances between
traces of a training set gk ∈ G and a test set tl ∈ T :
⎞
d(g1, tL)
⎟⎟⎟⎠ ,
d(g2, tL)
d(g1, t1)
d(g2, t1)
d(g1, t2)
d(g2, t2)
Mdist =
(3)
⎛
⎜⎜⎜⎝
···
···
...
··· d(gK, tL)
...
d(gK, t1) d(gK, t2)
...
...
where d(gk, tl) is the distance between the respective train-
ing and test trace. The matrix includes all candidate websites
of the recorded corpus, e. g., depending on the training and
test set size, we draw a deﬁned number of traces from each
website. From the distances, we deﬁne the 1-NN nearest
neighbor, i. e., the lowest distance trace within the training
data for the current test trace. More precisely, we determine
the minimum of each column in the distance matrix Mdist.
As a metric for the success of the attack, we derive (1) the
average success and standard deviation for a 10-fold cross-
validation, as well as (2) the false positive matches for each
site in particular.
2) Results: Our results are shown in Table II represent
the average true positive (TP) rates, i. e., the relative number
of correct website guesses, and the standard deviation (SD)
over all ten repetitions of the cross-validation. We achieve an
average success rate of 89.63 %±10.63 in uplink and 89.13 %
±11.2 in downlink transmissions for individual devices, i. e.,
when comparing traces for each phone individually.
WEBSITE FINGERPRINTING SUCCESS RATES
TABLE II
Android
Device
LG Nexus 5
Huawei p9 Lite
Motorola Moto G4
OS
v5.1
v7.0
v6.0.1
Downlink
SD
TP
0.949 ±0.067
0.932 ±0.108
0.808 ±0.144
Uplink
SD
TP
0.936 ±0.071
0.922 ±0.117
0.816 ±0.148
While we apply comparably simple analysis methods, the
success rates of the website ﬁngerprinting attack indicate a
promising starting point for future work.
3) Discussion: We present the website ﬁngerprinting attack
as a ﬁrst proof-of-concept for demonstrating the threat of
trafﬁc analysis on PDCP sublayer metadata. While our results
indicate high success rates for the up- and downlink trafﬁc
of different devices, we emphasize that these ﬁrst insights
are limited in several ways. In the following, we discuss the
real-world application and how future work can improve our
current ﬁndings.
Our measurements are biased towards time, location, and
network setup, e. g., we recorded all traces from a single
position and in closed blocks with our experimental LTE
network that is completely under our control.
The choice of conducting the website ﬁngerprinting within
our experimental network has two main reasons. First, the
conﬁguration of mobile networks is volatile, e.g., features like
the physical cell ID or retransmission timers might change
over time. Such ﬂuctuations can inﬂuence the experimental
results and disrupt their reproducibility. A real-world attacker
must face short-term and long-term changes of the network
conﬁguration and in website contents, i. e., a representative
trace corpus requires continuous updates. Second, we are
unable to monitor the uplink transmissions on the PDCP layer
of a connection in a commercial network (see Section III-A3).
Consequently, it would remain unclear whether such uplink
metadata is a suitable candidate for website ﬁngerprinting
attacks. In contrast to the commercial setup, our experimental
LTE network enables us to monitor transmissions also in
uplink direction for a coherent evaluation of trafﬁc features.
We use a closed-world setup and identify websites in a set
of k candidates, which is very small in comparison to the
actual number of existing websites. Open-world setups [19],
[24] increase the realism and allow arbitrary page visits for a
monitored set of k websites.
(cid:18)(cid:18)(cid:19)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:42 UTC from IEEE Xplore.  Restrictions apply. 
We limit the scope of this paper to a ﬁrst demonstration
of website ﬁngerprinting on LTE trafﬁc. While website ﬁn-
gerprinting in general is a well-established research area, the
application to LTE trafﬁc is novel. We limit our evaluation to
the presented general proof-of-concept and leave the demon-
stration of the attack in a commercial network, along with the
use of sophisticated experiments, to future work.
IV. ALTER: LTE USER DATA MANIPULATION ATTACK
The lack of integrity protection for LTE user data opens
an attack vector for active manipulation of the ciphertext.
We exploit this vulnerability in the ALTER attack, in which
we deploy a malicious MitM relay between the UE and
the eNodeB to manipulate the (encrypted) payload of user
data transmissions. We instantiate ALTER to perform a DNS
redirection attack and describe the individual attack steps in
the following.
A. High-level Overview of DNS Redirection Attack
Our goal is to manipulate the destination IP address of a
DNS request and detour requests to a malicious rather than
the original DNS server. Accordingly,
this puts us in the
position of redirecting the DNS requests to a server under
adversarial control rather than the intended destination. The
attack procedure is as follows (cf. Figure 4).
As a precondition for the attack, we deploy a malicious
relay within the vicinity of the user and assure a stable
radio connection towards both the UE and a commercial
eNodeB. As soon as the user’s mobile is switched on, the
UE and the commercial network perform the Authentication
and Key Agreement (AKA) (cf. Figure 4 0 ) to establish
the security parameters for an upcoming connection. Send-
ing a DNS request to the server is triggered under many
circumstances, e.g., when the user intends to visit a website
or an app contacts a server. To perform a DNS request, the
UE ﬁrst encapsulates the request in a UDP and IP packet
and then encrypts the packet using AES in counter mode
(AES-CTR). Next, the UE forwards the packet to the intended
DNS server, using its original IP destination address 1 . Our
MitM relay intercepts this transmission, distinguishes DNS
packets from other payloads, and applies a manipulation mask
to change the original destination IP to the address of our
malicious DNS server 2 . After the manipulation, our relay
forwards the manipulated request (all other packets are relayed
unaltered) to the commercial network 3 , where it is decrypted
and forwarded to the malicious instead of the original DNS
server 4 . In the downlink path, we add another manipulation
mask and assure that the source IP address matches the target
of the outgoing packet 5 , such that the manipulation remains
undetected.
B. Challenges
While the attack procedure is straightforward, we must
consider a set of technical challenges to maintain a stable
connection and remain undetected during the attack procedure.
In particular, we must assure a connection between the UE,
malicious relay, and the commercial eNodeB (IV-B1), reliably
distinguish DNS packets from other transmissions (IV-B2),
and alter the destination IP without violating the existing
checksums of packets (IV-B3).
1) Stable Malicious Relay: Our malicious relay is of fun-
damental importance for the ALTER attack. It impersonates a
valid eNodeB towards the user and acts as a UE towards the
network, i. e., it relays all transmissions between both entities.
Deploying a MitM relay means to compete with all other radio
connections offered by benign eNodeBs in the vicinity of the
user. Therefore, we must motivate the UE to connect to our
relay rather than the commercial network and provide a stable
and legitimate connection during the entire attack.
Connecting to the Relay. One option to lure a user into
connecting to the malicious relay is overshadowing the au-
thentic frequencies of the commercial network at a higher
transmission power. This approach holds the risk of letting
the malicious relay connect to itself: As we remember, our
relay impersonates a UE towards the network and an eNodeB
towards the user. We avoid a connection between the UE and
eNodeB component of our relay by using the physical cell
identity of the commercial network, i. e., we use the physical
cell identity of the commercial eNodeB to establish a ﬁxed
connection between our UE component and the commercial
network.
Stable Radio Connection. For conducting a stealthy attack,
our malicious relay must comply with all original protocol
capabilities while passing on transmissions between the UE
and the eNodeB. In particular, our relay needs to be aware of
conﬁguration parameters for the data bearer, the RLC, and the
underlying physical layer, as otherwise, the connection would
terminate. While the data bearer and RLC conﬁguration remain
stable for the network, we guess the parameters of the physical
layer that are set for each new radio connection individually.
The idea behind individual guessing is as follows: After
the Authentication and Key Agreement (AKA) took place
between the UE and the commercial network, the security
mode command deﬁnes the encryption and integrity protection
algorithms for the new radio connection. The eNodeB com-
ponent of our malicious relay then opens up all possible slots
for uplink transmissions, waiting for the UE to use one of the
potential slots. Based on the chosen slot, the malicious relay
guesses the respective conﬁguration parameter. We can apply
the individual guessing for both physical parameters, e. g., the
scheduling request index and the channel quality indicator.
Both parameters use different uplink slots, and we monitor
transmissions, respectively. If the value remains stable, we
assume its correctness. We then notify the UE component of
our relay about the parameters and set them for the uplink
transmission to the commercial network.
2) Identifying DNS Requests and Responses: Since we
only redirect DNS requests to our malicious DNS server, the
destination IP addresses of all other packets must remain intact
to maintain the Internet connection of the UE. Therefore, we
need a reliable way to distinguish DNS request packets from
(cid:18)(cid:18)(cid:19)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:42 UTC from IEEE Xplore.  Restrictions apply. 
UE
UE
Encapsulate
Encapsulate
EEA2
EEA2
0
0
1
1
Relay
Relay
Commercial Network
Commercial Network
Internet
Internet