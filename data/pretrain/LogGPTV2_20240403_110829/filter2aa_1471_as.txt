64
C:\Windows\SysWow64
X86 
on 
ARM
64
C:\Windows\SyChpe32 (or 
C:\Windows\SysWow64 if the target file 
does not exist in SyChpe32)
ARM
32
C:\Windows\SysArm32
%ProgramFile
s%
Nativ
e
C:\Program Files
X86
C:\Program Files (x86)
ARM
32
C:\Program Files (Arm)
%CommonPro
gramFiles%
Nativ
e
C:\Program Files\Common Files
X86
C:\Program Files (x86)
ARM
32
C:\Program Files (Arm)\Common Files
C:\Windows\r
egedit.exe
X86
C:\Windows\SysWow64\regedit.exe
ARM
32
C:\Windows\SysArm32\regedit.exe
C:\Windows\L
astGood\Syste
m32
X86
C:\Windows\LastGood\SysWow64
ARM
32
C:\Windows\LastGood\SysArm32
There are a few subdirectories of \Windows\System32 that, for
compatibility and security reasons, are exempted from being redirected such
that access attempts to them made by 32-bit applications actually access the
real one. These directories include the following:
■    %windir%\system32\catroot and %windir%\system32\catroot2
■    %windir%\system32\driverstore
■    %windir%\system32\drivers\etc
■    %windir%\system32\hostdriverstore
■    %windir%\system32\logfiles
■    %windir%\system32\spool
Finally, WoW64 provides a mechanism to control the file system
redirection built into WoW64 on a per-thread basis through the
Wow64DisableWow64FsRedirection and Wow64RevertWow64FsRedirection
functions. This mechanism works by storing an enabled/disabled value on the
TLS index 8, which is consulted by the internal WoW64 RedirectPath
function. However, the mechanism can have issues with delay-loaded DLLs,
opening files through the common file dialog and even internationalization—
because once redirection is disabled, the system no longer uses it during
internal loading either, and certain 64-bit-only files would then fail to be
found. Using the %SystemRoot%\Sysnative path or some of the other
consistent paths introduced earlier is usually a safer methodology for
developers to use.
 Note
Because certain 32-bit applications might indeed be aware and able to
deal with 64-bit images, a virtual directory, \Windows\Sysnative, allows
any I/Os originating from a 32-bit application to this directory to be
exempted from file redirection. This directory doesn’t actually exist—it is
a virtual path that allows access to the real System32 directory, even from
an application running under WoW64.
Registry redirection
Applications and components store their configuration data in the registry.
Components usually write their configuration data in the registry when they
are registered during installation. If the same component is installed and
registered both as a 32-bit binary and a 64-bit binary, the last component
registered will override the registration of the previous component because
they both write to the same location in the registry.
To help solve this problem transparently without introducing any code
changes to 32-bit components, the registry is split into two portions: Native
and WoW64. By default, 32-bit components access the 32-bit view, and 64-
bit components access the 64-bit view. This provides a safe execution
environment for 32-bit and 64-bit components and separates the 32-bit
application state from the 64-bit one, if it exists.
As discussed later in the “System calls” section, the WoW64 system call
layer intercepts all the system calls invoked by a 32-bit process. When
WoW64 intercepts the registry system calls that open or create a registry key,
it translates the key path to point to the WoW64 view of the registry (unless
the caller explicitly asks for the 64-bit view.) WoW64 can keep track of the
redirected keys thanks to multiple tree data structures, which store a list of
shared and split registry keys and subkeys (an anchor tree node defines where
the system should begin the redirection). WoW64 redirects the registry at
these points:
■    HKLM\SOFTWARE
■    HKEY_CLASSES_ROOT
Not the entire hive is split. Subkeys belonging to those root keys can be
stored in the private WoW64 part of the registry (in this case, the subkey is a
split key). Otherwise, the subkey can be kept shared between 32-bit and 64-
bit apps (in this case, the subkey is a shared key). Under each of the split
keys (in the position tracked by an anchor node), WoW64 creates a key
called WoW6432Node (for x86 application) or WowAA32Node (for ARM32
applications). Under this key is stored 32-bit configuration information. All
other portions of the registry are shared between 32-bit and 64-bit
applications (for example, HKLM\SYSTEM).
As extra help, if an x86 32-bit application writes a REG_SZ or
REG_EXPAND_SZ value that starts with the data “%ProgramFiles%” or
%CommonProgramFiles%” to the registry, WoW64 modifies the actual
values to “%ProgramFiles(x86)%” and %CommonProgramFiles(x86)%” to
match the file system redirection and layout explained earlier. The 32-bit
application must write exactly these strings using this case—any other data
will be ignored and written normally.
For applications that need to explicitly specify a registry key for a certain
view, the following flags on the RegOpenKeyEx, RegCreateKeyEx,
RegOpenKeyTransacted, RegCreateKeyTransacted, and RegDeleteKeyEx
functions permit this:
■    KEY_WoW64_64KEY Explicitly opens a 64-bit key from either a
32-bit or 64-bit application and disables the REG_SZ or
REG_EXPAND_SZ interception explained earlier
■    KEY_WoW64_32KEY Explicitly opens a 32-bit key from either a
32-bit or 64-bit application
X86 simulation on AMD64 platforms
The interface of the x86 simulator for AMD64 platforms (Wow64cpu.dll) is
pretty simple. The simulator process initialization function enables the fast
system call interface, depending on the presence of software MBEC (Mode
Based Execute Control is discussed in Chapter 9). When the WoW64 core
starts the simulation by invoking the BtCpuSimulate simulator’s interface, the
simulator builds the WoW64 stack frame (based on the 32-bit CPU context
provided by the WoW64 core), initializes the Turbo thunks array for
dispatching fast system calls, and prepares the FS segment register to point to
the thread’s 32-bit TEB. It finally sets up a call gate targeting a 32-bit
segment (usually the segment 0x20), switches the stacks, and emits a far
jump to the final 32-bit entry point (at the first execution, the entry point is
set to the 32-bit version of the LdrInitializeThunk loader function). When the
CPU executes the far jump, it detects that the call gate targets a 32-bit
segment, thus it changes the CPU execution mode to 32-bit. The code
execution exits 32-bit mode only in case of an interrupt or a system call being
dispatched. More details about call gates are available in the Intel and AMD
software development manuals.
 Note
During the first switch to 32-bit mode, the simulator uses the IRET
opcode instead of a far call. This is because all the 32-bit registers,
including volatile registers and EFLAGS, need to be initialized.
System calls
For 32-bit applications, the WoW64 layer acts similarly to the NT kernel:
special 32-bit versions of Ntdll.dll, User32.dll, and Gdi32.dll are located in
the \Windows\Syswow64 folder (as well as certain other DLLs that perform
interprocess communication, such as Rpcrt4.dll). When a 32-bit application
requires assistance from the OS, it invokes functions located in the special
32-bit versions of the OS libraries. Like their 64-bit counterparts, the OS
routines can perform their job directly in user mode, or they can require
assistance from the NT kernel. In the latter case, they invoke system calls
through stub functions like the one implemented in the regular 64-bit Ntdll.
The stub places the system call index into a register, but, instead of issuing
the native 32-bit system call instruction, it invokes the WoW64 system call
dispatcher (through the Wow64Transition variable compiled by the WoW64
core).
The WoW64 system call dispatcher is implemented in the platform-
specific simulator (wow64cpu.dll). It emits another far jump for transitioning
to the native 64-bit execution mode, exiting from the simulation. The binary
translator switches the stack to the 64-bit one and saves the old CPU’s
context. It then captures the parameters associated with the system call and
converts them. The conversion process is called “thunking” and allows
machine code executed following the 32-bit ABI to interoperate with 64-bit
code. The calling convention (which is described by the ABI) defines how
data structure, pointers, and values are passed in parameters of each function
and accessed through the machine code.
Thunking is performed in the simulator using two strategies. For APIs that
do not interoperate with complex data structures provided by the client (but
deal with simple input and output values), the Turbo thunks (small
conversion routines implemented in the simulator) take care of the
conversion and directly invoke the native 64-bit API. Other complex APIs
need the Wow64SystemServiceEx routine’s assistance, which extracts the
correct WoW64 system call table number from the system call index and
invokes the correct WoW64 system call function. WoW64 system calls are
implemented in the WoW64 core library and in Wow64win.dll and have the
same name as the native system calls but with the wh- prefix. (So, for
example, the NtCreateFile WoW64 API is called whNtCreateFile.)
After the conversion has been correctly performed, the simulator issues the
corresponding native 64-bit system call. When the native system call returns,
WoW64 converts (or thunks) any output parameters if necessary, from 64-bit
to 32-bit formats, and restarts the simulation.
Exception dispatching
Similar to WoW64 system calls, exception dispatching forces the CPU
simulation to exit. When an exception happens, the NT kernel determines
whether it has been generated by a thread executing user-mode code. If so,
the NT kernel builds an extended exception frame on the active stack and
dispatches the exception by returning to the user-mode
KiUserExceptionDispatcher function in the 64-bit Ntdll (for more
information about exceptions, refer to the “Exception dispatching” section
earlier in this chapter).
Note that a 64-bit exception frame (which includes the captured CPU
context) is allocated in the 32-bit stack that was currently active when the
exception was generated. Thus, it needs to be converted before being
dispatched to the CPU simulator. This is exactly the role of the
Wow64PrepareForException function (exported by the WoW64 core
library), which allocates space on the native 64-bit stack and copies the
native exception frame from the 32-bit stack in it. It then switches to the 64-
bit stack and converts both the native exception and context records to their
relative 32-bit counterpart, storing the result on the 32-bit stack (replacing the
64-bit exception frame). At this point, the WoW64 Core can restart the
simulation from the 32-bit version of the KiUserExceptionDispatcher
function, which dispatches the exception in the same way the native 32-bit
Ntdll would.
32-bit user-mode APC delivery follows a similar implementation. A
regular user-mode APC is delivered through the native Ntdll’s
KiUserApcDispatcher. When the 64-bit kernel is about to dispatch a user-
mode APC to a WoW64 process, it maps the 32-bit APC address to a higher
range of 64-bit address space. The 64-bit Ntdll then invokes the
Wow64ApcRoutine routine exported by the WoW64 core library, which
captures the native APC and context record in user mode and maps it back in
the 32-bit stack. It then prepares a 32-bit user-mode APC and context record
and restarts the CPU simulation from the 32-bit version of the
KiUserApcDispatcher function, which dispatches the APC the same way the
native 32-bit Ntdll would.
ARM
ARM is a family of Reduced Instruction Set Computing (RISC) architectures
originally designed by the ARM Holding company. The company, unlike
Intel and AMD, designs the CPU’s architecture and licenses it to other
companies, such as Qualcomm and Samsung, which produce the final CPUs.
As a result, there have been multiple releases and versions of the ARM
architecture, which have quickly evolved during the years, starting from very
simple 32-bit CPUs, initially brought by the ARMv3 generation in the year
1993, up to the latest ARMv8. The, latest ARM64v8.2 CPUs natively support
multiple execution modes (or states), most commonly AArch32, Thumb-2,
and AArch64:
■    AArch32 is the most classical execution mode, where the CPU
executes 32-bit code only and transfers data to and from the main
memory through a 32-bit bus using 32-bit registers.
■    Thumb-2 is an execution state that is a subset of the AArch32 mode.
The Thumb instruction set has been designed for improving code
density in low-power embedded systems. In this mode, the CPU can
execute a mix of 16-bit and 32-bit instructions, while still accessing
32-bit registers and memory.
■    AArch64 is the modern execution mode. The CPU in this execution
state has access to 64-bit general purpose registers and can transfer
data to and from the main memory through a 64-bit bus.
Windows 10 for ARM64 systems can operate in the AArch64 or Thumb-2
execution mode (AArch32 is generally not used). Thumb-2 was especially
used in old Windows RT systems. The current state of an ARM64 processor
is determined also by the current Exception level (EL), which defines
different levels of privilege: ARM currently defines three exception levels
and two security states. They are both discussed more in depth in Chapter 9
and in the ARM Architecture Reference Manual.
Memory models
In the “Hardware side-channel vulnerabilities” earlier in this chapter, we
introduced the concept of a cache coherency protocol, which guarantees that
the same data located in a CPU’s core cache is observed while accessed by
multiple processors (MESI is one of the most famous cache coherency
protocols). Like the cache coherency protocol, modern CPUs also should
provide a memory consistency (or ordering) model for solving another
problem that can arise in multiprocessor environments: memory reordering.
Some architectures (ARM64 is an example) are indeed free to re-order
memory accesses with the goal to make more efficient use of the memory
subsystem and parallelize memory access instructions (achieving better
performance while accessing the slower memory bus). This kind of
architecture follows a weak memory model, unlike the AMD64 architecture,
which follows a strong memory model, in which memory access instructions
are generally executed in program order. Weak models allow the processor to
be faster and access the memory in a more efficient way but bring a lot of
synchronization issues when developing multiprocessor software. In contrast,
a strong model is more intuitive and stable, but it has the big drawback of
being slower.
CPUs that can do memory reordering (following the weak model) provide
some machine instructions that act as memory barriers. A barrier prevents
the processor from reordering memory accesses before and after the barrier,
helping multiprocessors synchronization issues. Memory barriers are slow;
thus, they are used only when strictly needed by critical multiprocessor code
in Windows, especially in synchronization primitives (like spinlocks,
mutexes, pushlocks, and so on).
As we describe in the next section, the ARM64 jitter always makes use of
memory barriers while translating x86 code in a multiprocessor environment.
Indeed, it can’t infer whether the code that will execute could be run by
multiple threads in parallel at the same time (and thus have potential
synchronization issues. X86 follows a strong memory model, so it does not
have the reordering issue, a part of generic out-of-order execution as
explained in the previous section).
 Note
Other than the CPU, memory reordering can also affect the compiler,
which, during compilation time, can reorder (and possibly remove)
memory references in the source code for efficiency and speed reasons.
This kind of reordering is called compiler reordering, whereas the type
described in the previous section is processor reordering.
ARM32 simulation on ARM64 platforms
The simulation of ARM32 applications under ARM64 is performed in a very
similar way as for x86 under AMD64. As discussed in the previous section,
an ARM64v8 CPU is capable of dynamic switching between the AArch64
and Thumb-2 execution state (so it can execute 32-bit instructions directly in
hardware). However, unlike AMD64 systems, the CPU can’t switch
execution mode in user mode via a specific instruction, so the WoW64 layer
needs to invoke the NT kernel to request the execution mode switch. To do
this, the BtCpuSimulate function, exported by the ARM-on-ARM64 CPU
simulator (Wowarmhw.dll), saves the nonvolatile AArch64 registers in the
64-bit stack, restores the 32-bit context stored in WoW64 CPU area, and
finally emits a well-defined system call (which has an invalid syscall number,
–1).
The NT kernel exception handler (which, on ARM64, is the same as the
syscall handler), detects that the exception has been raised due to a system
call, thus it checks the syscall number. In case the number is the special –1,
the NT kernel knows that the request is due to an execution mode change
coming from WoW64. In that case, it invokes the KiEnter32BitMode routine,
which sets the new execution state for the lower EL (exception level) to
AArch32, dismisses the exception, and returns to user mode.
The code starts the execution in AArch32 state. Like the x86 simulator for
AMD64 systems, the execution controls return to the simulator only in case
an exception is raised or a system call is invoked. Both exceptions and
system calls are dispatched in an identical way as for the x86 simulator under
AMD64.
X86 simulation on ARM64 platforms
The x86-on-ARM64 CPU simulator (Xtajit.dll) is different from other binary
translators described in the previous sections, mostly because it cannot
directly execute x86 instructions using the hardware. The ARM64 processor
is simply not able to understand any x86 instruction. Thus, the x86-on-ARM
simulator implements a full x86 emulator and a jitter, which can translate
blocks of x86 opcodes in AArch64 code and execute the translated blocks
directly.
When the simulator process initialization function (BtCpuProcessInit) is
invoked for a new WoW64 process, it builds the jitter main registry key for
the process by combining the
HKLM\SOFTWARE\Microsoft\Wow64\x86\xtajit path with the name of the
main process image. If the key exists, the simulator queries multiple
configuration information from it (most common are the multiprocessor
compatibility and JIT block threshold size. Note that the simulator also
queries configuration settings from the application compatibility database.)
The simulator then allocates and compiles the Syscall page, which, as the
name implies, is used for emitting x86 syscalls (the page is then linked to
Ntdll thanks to the Wow64Transition variable). At this point, the simulator
determines whether the process can use the XTA cache.
The simulator uses two different caches for storing precompiled code
blocks: The internal cache is allocated per-thread and contains code blocks
generated by the simulator while compiling x86 code executed by the thread
(those code blocks are called jitted blocks); the external XTA cache is
managed by the XtaCache service and contains all the jitted blocks generated
lazily for an x86 image by the XtaCache service. The per-image XTA cache
is stored in an external cache file (more details provided later in this chapter.)
The process initialization routine allocates also the Compile Hybrid
Executable (CHPE) bitmap, which covers the entire 4-GB address space
potentially used by a 32-bit process. The bitmap uses a single bit to indicate
that a page of memory contains CHPE code (CHPE is described later in this
chapter.)
The simulator thread initialization routine (BtCpuThreadInit) initializes the
compiler and allocates the per-thread CPU state on the native stack, an
important data structure that contains the per-thread compiler state, including
the x86 thread context, the x86 code emitter state, the internal code cache,
and the configuration of the emulated x86 CPU (segment registers, FPU
state, emulated CPUIDs.)
Simulator’s image load notification
Unlike any other binary translator, the x86-on-ARM64 CPU simulator must
be informed any time a new image is mapped in the process address space,
including for the CHPE Ntdll. This is achieved thanks to the WoW64 core,
which intercepts when the NtMapViewOfSection native API is called from the
32-bit code and informs the Xtajit simulator through the exported
BTCpuNotifyMapViewOfSection routine. It is important that the notification
happen because the simulator needs to update the internal compiler data, such
as
■    The CHPE bitmap (which needs to be updated by setting bits to 1
when the target image contains CHPE code pages)
■    The internal emulated CFG (Control Flow Guard) state