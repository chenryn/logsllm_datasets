7、```select ? from a except select ? from b```，适用于输出字段与条件字段相同的情形。  
```  
do language plpgsql $$  
declare  
  ts timestamp := clock_timestamp();  
  mx int8;  
begin  
  for i in 0..6 loop  
    mx := (1*(10^i))::int8;  
    ts := clock_timestamp();  
    perform a.id from t_in_test a except select (random()*100000)::int id from generate_series(1,mx);  
    raise notice '%: %', mx, clock_timestamp()-ts;  
  end loop;  
end;  
$$ ;  
```  
### 7、测试  
1、```not in (...)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能  
```  
NOTICE:  1: 00:00:20.760034  
NOTICE:  10: 00:00:27.766224  
NOTICE:  100: 00:01:22.95002  
NOTICE:  1000: 00:10:16.690793  
..........  
10000开始很久也没跑出来。继续看后面其他方法的测试。  
```  
2、```not in (table or subquery or srf)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能  
```  
-----  
```  
3、```<> all (array)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能  
```  
-----  
```  
4、```not exists (select 1 from (values (),(),...) as t(id) where x.?=t.id)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能  
```  
NOTICE:  1: 00:00:35.253582  
NOTICE:  10: 00:00:35.256638  
NOTICE:  100: 00:00:35.164034  
NOTICE:  1000: 00:00:35.417756  
NOTICE:  10000: 00:00:35.205454  
NOTICE:  100000: 00:00:35.458987  
NOTICE:  1000000: 00:00:35.447743  
DO  
```  
6、```a left join others b on (a.?=b.?) where b.* is null```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能  
```  
NOTICE:  1: 00:00:36.474715  
NOTICE:  10: 00:00:36.53191  
NOTICE:  100: 00:00:36.60439  
NOTICE:  1000: 00:00:36.534846  
NOTICE:  10000: 00:00:36.574136  
NOTICE:  100000: 00:00:36.519582  
NOTICE:  1000000: 00:00:37.675594  
DO  
```  
7、```select ? from a except select ? from b```，适用于输出字段与条件字段相同的情形。  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能  
```  
NOTICE:  1: 00:00:50.566741  
NOTICE:  10: 00:00:50.051715  
NOTICE:  100: 00:00:50.098839  
NOTICE:  1000: 00:00:49.966196  
NOTICE:  10000: 00:00:50.608288  
NOTICE:  100000: 00:00:50.715218  
NOTICE:  1000000: 00:00:51.794935  
DO  
```  
#### TPS  
#### 平均响应时间  
not exists为例，1亿记录1到100万个点的排他过滤耗时，响应时间均匀，约35秒。   
```
NOTICE: 1: 00:00:35.253582 
NOTICE: 10: 00:00:35.256638 
NOTICE: 100: 00:00:35.164034 
NOTICE: 1000: 00:00:35.417756 
NOTICE: 10000: 00:00:35.205454 
NOTICE: 100000: 00:00:35.458987 
NOTICE: 1000000: 00:00:35.447743 
DO 
```  
## 补充PostgreSQL 11 parallel hash join性能
依旧是1亿NOT IN 1到100万，或者not exists的写法。    
1、测试数据  
```
postgres=# create table a(id int);  
CREATE TABLE  
postgres=# create table b(id int);  
CREATE TABLE  
postgres=# insert into a select generate_series(1,100000000);  
INSERT 0 100000000  
postgres=# insert into b select generate_series(1,1000000);  
INSERT 0 1000000  
```
2、NOT IN 性能(work_mem足够大才会选择hashed)   
```
postgres=# set work_mem ='16GB';
SET
postgres=# explain analyze select count(*) from a where id not in (select id from b limit 1);
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=464968.97..464968.98 rows=1 width=8) (actual time=801.161..801.161 rows=1 loops=1)
   ->  Gather  (cost=464962.40..464968.81 rows=64 width=8) (actual time=801.031..801.146 rows=65 loops=1)
         Workers Planned: 64
         Workers Launched: 64
         ->  Partial Aggregate  (cost=463962.40..463962.41 rows=1 width=8) (actual time=763.825..763.825 rows=1 loops=65)
               ->  Parallel Seq Scan on a  (cost=0.02..462009.27 rows=781250 width=0) (actual time=0.058..603.051 rows=1538462 loops=65)
                     Filter: (NOT (hashed SubPlan 1))
                     Rows Removed by Filter: 0
                     SubPlan 1
                       ->  Limit  (cost=0.00..0.01 rows=1 width=4) (actual time=0.026..0.026 rows=1 loops=65)
                             ->  Seq Scan on b  (cost=0.00..14425.00 rows=1000000 width=4) (actual time=0.025..0.025 rows=1 loops=65)
 Planning time: 0.067 ms
 Execution time: 845.690 ms
(13 rows)
postgres=# explain analyze select count(*) from a where id not in (select id from b);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=481893.95..481893.96 rows=1 width=8) (actual time=1710.007..1710.007 rows=1 loops=1)
   ->  Gather  (cost=481887.38..481893.79 rows=64 width=8) (actual time=1698.510..1709.989 rows=65 loops=1)
         Workers Planned: 64
         Workers Launched: 64
         ->  Partial Aggregate  (cost=480887.38..480887.39 rows=1 width=8) (actual time=1641.223..1641.223 rows=1 loops=65)
               ->  Parallel Seq Scan on a  (cost=16925.00..478934.26 rows=781250 width=0) (actual time=677.123..1492.332 rows=1523077 loops=65)
                     Filter: (NOT (hashed SubPlan 1))
                     Rows Removed by Filter: 15385
                     SubPlan 1
                       ->  Seq Scan on b  (cost=0.00..14425.00 rows=1000000 width=4) (actual time=0.043..158.634 rows=1000000 loops=65)
 Planning time: 0.079 ms
 Execution time: 1806.930 ms
(12 rows)
```
3、NOT EXISTS 性能
```
postgres=# explain analyze select count(*) from a where not exists (select 1 from (select id from b limit 1) b where a.id=b.id);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=482742.42..482742.43 rows=1 width=8) (actual time=876.618..876.618 rows=1 loops=1)
   ->  Gather  (cost=482735.85..482742.26 rows=64 width=8) (actual time=876.470..876.602 rows=65 loops=1)
         Workers Planned: 64
         Workers Launched: 64
         ->  Partial Aggregate  (cost=481735.85..481735.86 rows=1 width=8) (actual time=840.644..840.644 rows=1 loops=65)
               ->  Hash Anti Join  (cost=0.04..477829.60 rows=1562500 width=0) (actual time=0.257..686.240 rows=1538462 loops=65)
                     Hash Cond: (a.id = b.id)
                     ->  Parallel Seq Scan on a  (cost=0.00..458103.01 rows=1562500 width=4) (actual time=0.020..289.812 rows=1538462 loops=65)
                     ->  Hash  (cost=0.02..0.02 rows=1 width=4) (actual time=0.032..0.032 rows=1 loops=65)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Limit  (cost=0.00..0.01 rows=1 width=4) (actual time=0.025..0.026 rows=1 loops=65)
                                 ->  Seq Scan on b  (cost=0.00..14425.00 rows=1000000 width=4) (actual time=0.025..0.025 rows=1 loops=65)
 Planning time: 0.147 ms
 Execution time: 920.628 ms
(14 rows)
postgres=# explain analyze select count(*) from a where not exists (select 1 from b where a.id=b.id);  
                                                                   QUERY PLAN                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------  
 Finalize Aggregate  (cost=487341.22..487341.23 rows=1 width=8) (actual time=1171.201..1171.201 rows=1 loops=1)  
   ->  Gather  (cost=487334.65..487341.06 rows=64 width=8) (actual time=1169.676..1171.185 rows=65 loops=1)  
         Workers Planned: 64  
         Workers Launched: 64  
         ->  Partial Aggregate  (cost=486334.65..486334.66 rows=1 width=8) (actual time=1110.487..1110.487 rows=1 loops=65)  
               ->  Parallel Hash Anti Join  (cost=4776.56..482467.46 rows=1546876 width=0) (actual time=53.768..964.692 rows=1523077 loops=65)  
                     Hash Cond: (a.id = b.id)  
                     ->  Parallel Seq Scan on a  (cost=0.00..458103.01 rows=1562500 width=4) (actual time=0.023..288.519 rows=1538462 loops=65)  
                     ->  Parallel Hash  (cost=4581.25..4581.25 rows=15625 width=4) (actual time=35.322..35.322 rows=15385 loops=65)  
                           Buckets: 1048576  Batches: 1  Memory Usage: 48864kB  
                           ->  Parallel Seq Scan on b  (cost=0.00..4581.25 rows=15625 width=4) (actual time=0.022..2.010 rows=15385 loops=65)  
 Planning time: 0.129 ms  
 Execution time: 1259.454 ms  
(13 rows)  
```
## 参考  
[《PostgreSQL、Greenplum 应用案例宝典《如来神掌》 - 目录》](../201706/20170601_02.md)  
[《数据库选型之 - 大象十八摸 - 致 架构师、开发者》](../201702/20170209_01.md)  
[《PostgreSQL 使用 pgbench 测试 sysbench 相关case》](../201610/20161031_02.md)  
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)  
https://www.postgresql.org/docs/10/static/pgbench.html  
[《PostgreSQL 与关系代数 (Equi-Join , Semi-Join , Anti-Join , Division)》](../201802/20180205_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")