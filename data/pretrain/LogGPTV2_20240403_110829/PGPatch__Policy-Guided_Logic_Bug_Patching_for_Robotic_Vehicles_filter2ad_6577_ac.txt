e.g., a formula that contradicts another existing formula. To
resolve this problem, the Preprocessor veriﬁes whether an added
formula contradicts any existing formulas. For instance, if a user
inputs the formula: “if Statei is true, then Behaviori is on”,
PGPATCH can detect that this formula contradicts the following
existing formula: “if Statei is true, then Behaviori is off”.
In this case, PGPATCH produces an error message and denies
creating a patch corresponding to the newly added formula.
In this step, PGPATCH
achieves two goals: (i) classifying terms into variable, function,
or RV state types, and (ii) detecting any syntax error in the
terms. PGPATCH ﬁrst classiﬁes each term into “variable”,
“function”, or “RV state” types based on the term classiﬁcation
table, as shown in Figure 1 ( 3b ) and Figure 3. PGPATCH
creates the table from RV source code and documentation
(Detailed in Section VI). If a term does not match any type in
the term classiﬁcation table, PGPATCH considers it as a syntax
error and stops generating the patch.
3) Checking Validity of Terms:
C. Patch Type Analyzer
PGPATCH maps terms to variables/functions in the source
code to determine the most appropriate patch type to ﬁx a bug.
1If Failsafe is on and FS_BATT_ENABLE is 2 and home_distance is
more than 2, then mode is RTL
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
51830
Term
failsafe
Mapped variables / functions on source code
void Copter::failsafe_ekf_event() in ekf_check.cpp
void Copter::failsafe_ekf_off_event() in ekf_check.cpp
void Copter::failsafe_battery_event() in events.cpp
void Copter::failsafe_gcs_check() in events.cpp
…
FS_BATT_ENABLE int failsafe_battery_enabled in Parameters.cpp
home_distance
Fig. 4: Illustration of a term-source code mapping table.
float home_distance in AC_Fence.h
int home_distance in Copter.h
1) Mapping Terms to Source Code: PGPATCH infers each
term’s type as detailed in Section V-B3. However, ﬁnding
a patch location and generating the patch requires mapping
the terms to speciﬁc variables/functions in the source code.
To address this, PGPATCH matches each term with vari-
ables/functions in the source code via name-based matching.
Speciﬁcally, when the term and the variable have the same
name, they are matched. For instance, PGPATCH extracts
Failsafe, FS_BATT_ENABLE, and home_distance terms from
the created expression tree of Battery Fail-safe (Figure 3). It
then constructs a term-source code mapping table (Figure 4),
which consists of each term and mapped variables/functions.
We found that a term can be mapped to multiple variables
that have the same name in the source code. For example, the
home_distance term is mapped to two different variables, float
home_distance and int home_distance, as they have the
same variable name. Yet, not all mapped variables are related
to the logic bugs, e.g., float home_distance is not related
to the home_distance term to trigger the bug. To ﬁlter the
unrelated variables, PGPATCH performs a dynamic analysis on
an RV simulator: (1) it annotates the mapped variables in the
source code, (2) it compiles the annotated code and uploads a
new binary ﬁle into the simulator, (3) it executes the inputs
that trigger a logic bug, e.g., moving an RV to another location,
and (4) it ﬁlters out the variables that do not change their
value based on the executed inputs. For example, the float
home_distance variable always has a zero value regardless of
the executed bug-triggering inputs because ArduPilot changes
this value only if geo-fence is activated [25]. Thus, PGPATCH
excludes the float home_distance variable from the term-
source code mapping table (Figure 4).
2) Identifying a Patch Type: Different logic bugs require
a separate technique for inferring their patch locations and
generating the patches. To identify the patch type that ﬁxes
the logic bug, PGPATCH ﬁrst executes inputs to trigger the
logic bug on the simulator and collects the following run-time
information: (1) the violated PPL formula’s propositions for
DISABLE, (2) the conﬁguration parameters’ values for CHECK,
(3) the preconditions that trigger a logic bug for UPDATE, and
(4) the ﬂight stage at which the bug occurs for ADD and REUSE.
PGPATCH then extracts preconditions and post-conditions from
the violated formula. For instance, in the PPL formula “if
Statei is true, then Behaviori is on”, the precondition is the
left side of the “then” keyword, i.e., (Statei = true), and the
post-condition is the right side of “then”, i.e., (Behaviori = on).
Using this information, PGPATCH determines the patch type
by traversing the ﬂow diagram (Figure 12 in Appendix).
Flight stages
1) ANGLE_MAX = 5
2) Arming
3) Takeoff
4) Navigating waypoints
Test 
Case 1
Flight stages
1) Arming
2) ANGLE_MAX = 5
3) Takeoff
4) Navigating waypoints
Test 
Case 2
Fig. 5: An example of test cases created from Algorithm 1.
Disabling a Statement (DISABLE). PGPATCH classiﬁes the
logic bug to be patched as DISABLE type when a violated PPL
formula and the RV’s states satisfy the following two conditions:
(i) the formula’s post-condition explicitly represents a state
that must not be changed, and (ii) the RV’s states satisfy
the formula’s preconditions but violate the post-conditions.
This is because disabling a statement can prevent triggering
the incorrect state change that violates the formula’s post-
condition. For instance, for the Tilt Angle Bug (Section III-D),
PX4 limits the tilt value during the LAND and RTL ﬂight
modes, violating the formula2. PGPATCH classiﬁes this bug
into DISABLE because the logic bug causes a change in
_constraints.tilt during LAND or RTL modes even though it
must not be changed according to the policy’s post-condition
(i.e., _constraints.tilt = disabled).
Checking Valid Parameter Ranges (CHECK). PGPATCH
classiﬁes logic bugs as CHECK when an out-of-range parameter
value causes a policy violation. PGPATCH obtains the valid
values of parameters from the RV’s documentation and checks
whether an input, which contains a value outside its valid range,
causes a policy violation. For example, COM_POS_FS_DELAY
parameter’s valid range is from 1 to 100. Yet, PX4 does not
check the parameter’s value, which causes PX4 to fail to
trigger the GPS fail-safe when it loses GPS signals. PGPATCH
classiﬁes this bug as CHECK because the parameter contains a
value outside its valid range.
Updating a Statement (UPDATE). PGPATCH classiﬁes a logic
bug into the UPDATE patch type if an RV’s states do not satisfy
all of the preconditions in a PPL formula before triggering a
behavior. The reason is that an incorrect “if statement” makes
the RV prematurely trigger a behavior, which can be ﬁxed by
updating the “if statement”. For example, ArduPilot conducts
pre-ﬂight checks before arming the motors. The pre-ﬂight
ensures an RV’s current states are ready to start a ﬂight. Yet,
the RV software must temporarily stop the pre-ﬂight check
when the RV conducts sensor calibration as the pre-ﬂight detects
strange sensor values during the calibration and incorrectly
concludes that the RV cannot make a ﬂy. This bug violates the
following policy: “Iff armed is false and calibration is
false, then preflightCheck is on”. PGPATCH classiﬁes this
case as UPDATE because the RV triggers the pre-ﬂight behavior
although it satisﬁes only the “armed is false” precondition.
Distinguishing between ADD and REUSE. If a logic bug is
not classiﬁed as DISABLE, CHECK, or UPDATE, PGPATCH uses
a custom algorithm (Algorithm 1 in Appendix) to further
determine the patch types of ADD and REUSE. The algorithm
takes two types of inputs: (1) a default mission plan that consists
of arming, takeoff, navigating waypoints, return to home
position, and landing. (Missionset) and (2) bug-triggering
2If mode is LAND or mode is RTL, then _constraints.tilt is disabled
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
61831
3.
inputs (Inputbug). We adopted a default mission plan from
ArduPilot to create the Missionset
The algorithm works as follows: (1) It creates test cases
consisting of user inputs to trigger the bug and the default
mission plan. Each test case triggers the logic bug at a different
ﬂight stage. (2) It executes a user input of a created test case on
a simulator. (3) It checks whether a policy violation (i.e., logic
bug) occurs after executing each user input. (4) It logs the
RV’s physical states when the logic bug occurs. (5) It repeats
(2)-(4) for each test case. For instance, an input to trigger
the logic bug (Inputbug) is ANGLE_MAX = 5. In the ﬁrst test
case, PGPATCH triggers the logic bug at the ﬁrst ﬂight stage,
as shown in Figure 5. In the second test case, the logic bug
is triggered at the second ﬂight stage. PGPATCH triggers the
logic bug at all ﬂight stages to determine the patch type.
Adding a Condition Check (ADD). If the algorithm outputs
that a policy violation occurs regardless of the ﬂight stages,
PGPATCH classiﬁes it into ADD patch type. This is because an
RV’s control program does not trigger a behavior though the
RV’s states satisfy the preconditions to trigger the behavior.
For the Sailboat Pre-Arming Bug (Section III-B): “If armed
is false and SAIL_ENABLE is 1 and WNDVN_TYPE is 0, then
pre_arm_checks is error”, ArduPilot does not produce a
pre-arming error when the formula’s preconditions are satisﬁed
(i.e., armed is false, SAIL_ENABLE is 1, and WNDVN_TYPE
is 0). This means ArduPilot does not have an “if statement” to
trigger the behavior; thus, it is classiﬁed as ADD.
Reusing an Existing Code Snippet (REUSE). If the algorithm
outputs that an RV does not trigger a behavior after a speciﬁc
ﬂight stage, we consider such a case as REUSE. For instance,
ArduPilot must return an error message to the ground control
system when ANGLE_MAX parameter has a value outside its valid
range. This policy is formally expressed as “If ANGLE_MAX is
less than 1000 or ANGLE_MAX is more than 8000, then prearm
is error”. The algorithm’s ﬁrst test case (See Figure 5) does
not lead to a logic bug. However, the second test case causes a
formula violation because ArduPilot does not check the valid
values of ANGLE_MAX parameter after the arming ﬂight stage.
This bug leads to unstable attitude control or even crashing on
the ground. PGPATCH classiﬁes this case into REUSE because
the logic bug occurs only after the arming ﬂight stage.
D. Patch Generator
To generate a patch, PGPATCH ﬁrst creates an access
pattern mapping table representing how PGPATCH accesses
the mapped variables and functions in the term-source code
mapping table, and then infers the patch location. PGPATCH
uses this table to create and insert the patch.
Below, we ﬁrst describe how to create the access pattern
mapping table (Section V-D1). We then explain how PGPATCH
ﬁnds the patch location and generates a patch per each patch
type (Section V-D2 – Section V-D6).
1) Creating an Access Pattern Mapping Table: To infer
how to access the mapped variables and functions in a patch
3ArduPilot provides mission plans for all RV types, which can be used by
other RV control programs if they follow the MAVLink protocol [53].
Term
How to access?
Mapped variables / functions 
on source code
bool armed in AP_Notify.h
armed
SAIL_ENABLE int enable in Sailboat.h
WNDVN_TYPE int direction in AP_WindVane.h
Fig. 6: An access pattern mapping table for generating a patch.
AP_Notify::flags.armed
rover.g2.sailboat.sail_enabled()
rover.g2.windvane_enabled()
location, PGPATCH conducts the following four steps. First, it
merges all source ﬁles of an RV control software. Second, it
extracts mapped variables and functions from the term-source
code mapping table (Figure 4). Third, if a patch location is in
the same class as the mapped variables/functions, it directly
accesses them. Otherwise, PGPATCH leverages encapsulation
in object-oriented programming and uses public getter/setter
functions to access the private variables. Speciﬁcally, PGPATCH
ﬁnds get, set, enabled, and disabled functions that contain the
mapped private variables. To illustrate, when the WNDVN_-
TYPE term is mapped to the direction variable (Figure 6),
it searches for a function that uses one of the above function
names (i.e., either getter or setter) and returns the mapped
private variable. It ﬁnds the following function that returns the
mapped direction’s value.
bool AP_WindVane::enabled(){return direction!=WINDVANE_NONE;}
Lastly, PGPATCH learns how to access the mapped variables
and functions from the merged source code. PGPATCH searches
how other classes call the found function, e.g., enabled().
For example, other classes in ArduPilot call enabled()
via rover.g2.windvane.enabled(). However, there may be
multiple patterns to access a single variable or function from the
source code. To choose the correct one, PGPATCH ﬁrst inserts
a found access pattern to a patch location, then, PGPATCH
veriﬁes which access pattern is the correct one to access the
mapped variable or function.
2) Adding a Condition Check (ADD): To generate patches
for ADD patch type, PGPATCH inserts a missing “if statement”
at the right location in the source code.
To ﬁnd the patch location, PGPATCH extracts terms from
a PPL formula’s post-condition part. It then maps the terms
to variables and functions in the source code, and uses the
mapped variables and functions as potential patch location
candidates. For example, in the sailboat policy (Section III-B):
“If armed is false and SAIL_ENABLE is 1 and WNDVN_TYPE
is 0, then pre_arm_checks is error”, the left-hand side of
the “then” keyword is the preconditions to trigger an action
(i.e., pre_arm_checks must return false). Further, the pre_-
arm_checks term is mapped to the bool pre_arm_checks()
function. Thus, PGPATCH infers the bool pre_arm_checks()
function as the patch location. If terms of a PPL formula’s
post-conditions are mapped to variables instead of a function,
PGPATCH considers functions in which the mapped variables
are used as patch location candidates.
To generate the patch, PGPATCH ﬁrst switches terminal
nodes of the expression tree to the found access patterns, as
shown in Figure 7. It then generates a patch based on the
updated expression tree, conducting an in-order traversal of
the expression tree to create an ‘if statement”. For example,
it creates the “if statement” shown in Listing 6 from the
expression tree in Figure 7. We note that PGPATCH inserts
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
71832
Term
armed
SAIL_
ENABLE
WNDVN_
TYPE
How to access?
armed
rover.g2.sailboat.sail_enabled()
rover.g2.windvane_enabled()
and
and
is
is
is
WNDVN_
TYPE
armed
false
SAIL_
ENABLE
1
Fig. 7: Illustration of generating the patch for ADD patch type.
bool AP_Arming_Rover::pre_arm_checks(...) {
if (armed == false && rover.g2.sailboat.sail_enabled() == 1
&& rover.g2.windvane.enable() == 0) {
return false; }
0x3110138
(cid:91)
%call11
0x310ff28
(cid:92)
0x310ff28
(cid:93)
%angle_max
0x3110080
0
(cid:90)
[%11, 0x3110138, 0x31oe830]
[%call11, 0x310ff28, 0x3110138]
0x31oe830
%11,
(cid:88)
(cid:89)
0x3110138
: def-use chain for instruction
: operand’s name and address
[definition, write access, read access]
Fig. 8: Backtracking the def-use chains of a %cmp instruction.
[%cmp29, 0x31oe830, 0x31oe027]
8000,
0x3110000
void Copter::one_hz_loop() {
if (copter.aparm.angle_max  8000) // raise an error
Listing 6: Fixing the fail-safe bug in sailboat (Section III-B).
Listing 7: Fixing the ANGLE_MAX bug.
the formula’s post-conditions (i.e., actions to be executed) into
the basic block of the created “if statement”. For example,
it inserts return false to the basic block of the “if statement”
as the formula’s post-condition (pre_arm_checks is false)
explicitly denotes returning false in pre_arm_checks function.
3) Reusing an Existing Code Snippet (REUSE): Logic bugs
in REUSE patch type cause an RV control program not to
perform a behavior after a speciﬁc ﬂight stage although the
RV’s states satisfy preconditions to activate the behavior. This
means that the program already has a code snippet to trigger
the correct behavior, but it stops activating the behavior after
a speciﬁc ﬂight stage. Thus, PGPATCH reuses the existing “if
statement” code block to activate the desired behavior in all
ﬂight stages. For example, the PPL formula “If ANGLE_MAX is
less than 1000 or ANGLE_MAX is more than 8000, then prearm
is error” deﬁnes that ANGLE_MAX conﬁguration parameter in
ArduPilot must have a valid range from 1K to 8K. However, a
logic bug occurs because ArduPilot calls the following function
to check whether the ANGLE_MAX parameter has a valid value
only before the arming stage.
bool AP_Arming_copter::parameter_checks() {
if (angle_max  8000) return false; }
In these cases, PGPATCH reuses a code snippet that already
exists in the source code to generate the patch. Speciﬁcally,
PGPATCH ﬁrst ﬁnds the existing code snippet, and then inserts
the identiﬁed code block into a control loop to make the RV
execute the behavior at all ﬂight stages. To detail, PGPATCH
ﬁrst extracts all terms from the violated formula and maps
the terms into variables in the source code, e.g., ANGLE_-
MAX is mapped to the angle_max variable. PGPATCH also
extracts the formulas’ constant and Boolean values, e.g., it
obtains the following terms: angle_max, 1000, and 8000 from
the ANGLE_MAX policy. PGPATCH next creates the LLVM
bitcode from the source code, ﬁnds all functions, including
an “if statement” (i.e., “cmp” instruction), and obtains def-use
chains of all the “cmp” instructions and their operands from
these functions. PGPATCH ﬁnds an “if statement” that consists
of the obtained terms (angle_max, 1000 and 8000).
For instance, in the example shown in Figure 8, PGPATCH
performs the following, it ﬁnds a def-use chain of %cmp29
instruction ( 1 ), matches one of the obtained terms (i.e., 8000)
with the operand (i.e., the constant value stored in 0x3110000)
( 2 ), backtracks the def-use chain of another operand in the
%cmp29 instruction (%11 in 0x3110138) ( 3 ), matches the
obtained terms with the operand %call11 ( 4 ), backtracks
an operand’s def-use chain %call11 ( 5 ), matches one of the
obtained terms (i.e., angle_max) with the operand %angle_max
( 6 ), and returns the function that includes %cmp29 because
PGPATCH identiﬁes the target “if statement”. Thereafter
PGPATCH ﬁnds the “if statement” in the parameter_checks()
and it inserts the identiﬁed code snippet into a control loop,
which is called periodically. We note that PGPATCH requires
users to designate the control loop.
Lastly, PGPATCH changes the access patterns for variables
and functions in the found code snippet because the patch
location is in a different class from the found code snippet.
For example, PGPATCH extracts access patterns from the