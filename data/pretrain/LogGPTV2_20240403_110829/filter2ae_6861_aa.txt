**作者: evilpan  
博客: [PansLabyrinth](https://evilpan.com/2020/03/29/wifi-security/) **
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
本文主要分享WiFi相关的一些安全研究，以及分析几个实际的攻击案例，如PMKID、KARMA、Krack、Kr00k等。
# WiFi起源
WiFi是一种无线局域网协议(WLAN)，经过多年的发展，WLAN基本上也等同于WiFi。史前时代的LAN可以追溯到1971年ALOHAnet提出的多址接入思想。
![
](https://images.seebug.org/content/images/2020/03/d372ca63-a29d-4e14-a729-3ff80bceb9e8.png-w331s)
但我们不看那么远，直接跳到1985年，当时FCC(US Federal Communications Commission,
美国联邦通信委员会)首次开放2.4GHz等频段，允许节点在这些频段以扩频技术通信，为后续无线局域网的发展立下基础。
> 扩频(Spread Spectrum)通信的方法有很多，常见的是蓝牙用的跳频(Frequency Hopping)和WiFi用的直序扩频(Direct
> Sequence)
随后在1989年，第一个无线局域网产品WaveLAN出现；次年，`IEEE
802.11`委员会被正式成立，开始构建一个无线局域网的专用协议。期间WaveLAN经过了许多部署尝试，在产业界沉淀了实践基础。
WiFi，正确写法应该是`Wi-Fi`(Wireless-Fidelity)，即无线-高保真。无线都能理解，高保真则是要求在无线网络中可靠地传输数据。WiFi最初是一个独立的完整协议，其主要内容在 **后来** 被IEEE
802.11委员会接受并成了`802.11a`的标准。
1999年，Wi-Fi联盟成立，这多个厂商发起的非盈利联盟，致力于解决工业界的兼容性和统一问题，填补学术界和工业界之间的实现差异。
![
](https://images.seebug.org/content/images/2020/03/8efccc44-ae9b-4c8c-8838-76ef1d77e224.png-w331s)
还是1999年，IEEE颁布了`802.11b`协议，这是WiFi协议的里程碑，早期笔记本电脑和PS游戏机中的无线功能都是基于802.11b的。同年，苹果也推出了基于WiFi原理的Airport技术。
一年后的2000年，`802.11a`才正式通过。但是因为当时5GHz开放的信道有限，802.11a并没有推广开来。
2003年，颁布`802.11g`协议标准，修改802.11a的不足，在2.4GHz频段上使用OFDM技术。
2004年，`802.11i`颁布，关键词是WiFi安全性。
2009年，`802.11n`，关键词是MIMO(多输入多输出)。
2014年，`802.11ac`，关键词是下行MU-MIMO。
...
2019年，`802.11ax`，WiFi6，关键词是双向MU-MIMO。
当然，这只是其中几个关键的标准。我们可以在[802.11_Timelines](http://grouper.ieee.org/groups/802/11/Reports/802.11_Timelines.htm)中看到所有802.11颁布的协议和时间线。按照演进的方向，也可以概要为下图：
![
](https://images.seebug.org/content/images/2020/03/63569978-3457-4d66-9bdb-0ac7a5849efc.png-w331s)
# WPA/WPA2/WPA3
WiFi虽然广为人知，但是其物理层和链路层的实现也是相当复杂，念完研究生的无线网络课程也不敢说自己精通WiFi。因此，我们主要聚焦在协议安全性以及实现的安全性上。
WPA([Wi-Fi Protected Access](https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access))，即无线保护访问，是WiFi联盟为应对WEP([Wired Equivalent
Privacy](https://en.wikipedia.org/wiki/Wired_Equivalent_Privacy))中存在的各种安全问题而推出的解决方案。其中WPA最初只是作为草稿发布，并为后续更完善的WPA2铺路，二者都定义在`802.11i(IEEE
802.11i-2004)`的标准中。
我们目前广泛使用的WiFi安全保护访问就是WPA2的标准。在2018年1月，WiFi联盟又推出WPA3，在WPA2的基础上做了一些[安全增强](https://www.wi-fi.org/news-events/newsroom/wi-fi-alliance-introduces-security-enhancements)。
WPA是标准，而我们常见的WPA-PSK TKIP/AES-CCMP则是具体的加密模式和加密方法。
> 拓展阅读： [what-is-the-difference-between-tkip-and-> ccmp](http://www.comtechpass.com/what-is-the-difference-between-tkip-and-> ccmp/)
# 4-Way Handshake
说到WiFi安全，就不能不说校验过程中涉及到的四路握手。四路握手的目的是为了安全地验证和交换秘钥，验证对端合法性，防止中间人攻击。
四路握手中涉及到的一些名词如下：
  * authenticator：即AP(Access Point)，可以理解成路由器
  * supplicant：即想要接入AP的Client，简写为STA(Station)
  * MSK (Master Session Key)
  * PMK (Pairwise Master Key)
  * GMK (Group Master Key)
  * PTK (Pairwise Transit Key)
  * GTK (Group Temporal Key)
  * ANonce：Authenticator Nonce
  * SNonce：Supplicant Nonce
  * MIC：Message Integrity Check
是否有很多问号？不要紧，待会回头再看就很清晰了。先放一张四路握手的大图，记得时不时拉回来看看：）
![
](https://images.seebug.org/content/images/2020/03/04613f68-4667-4b40-b303-4323fc962695.png-w331s)
接下来就围绕着上图的握手流程进行分析。
## 802.11帧
既然我们不关注物理层，那么就可以从接受并解码后的数字信号说起。首先打开我们的WireShark抓一会儿包(monitor
mode)，挑选其中任意一个无线数据包查看，可以看到最顶层的包头是`IEEE 802.11 XXX frame`，所以我们就从这个包说起。
>
> 实际上面还有一层radiotap，是抓包工具加的，提供额外信息，比如时间，信道等，这些内容不是标准中的一部分，详情可见： are-radiotap-headers.html>
![
](https://images.seebug.org/content/images/2020/03/f287af00-e4ce-4faa-9f4b-d76510602da6.png-w331s)
一个802.11帧就是这么朴实无华，且枯燥。但是后面的介绍会用到里面的一些字段，所以就先放出来。注意前两字节是帧控制(Frame
Control)头，每个bit有不同的意思，具体可以看虚线下的展开。
接下来我们通过实际抓包来看WiFi连接认证的完整过程。测试使用我们自己搭建的WiFi，AP的SSID为`evilpan`，BSSID为`66x6`，WPA2密码为12345678，所连接的客户端为苹果手机。
## Auth & Associate
一般情况下，AP会一直向周围广播宣告自己的存在，这样STA才知道周围有哪些热点，并选其中的一个进行连接。广播的数据称为`Beacon
Frame`其中包括了热点的BSSID(即MAC地址)和ESSID(即热点名)。
![
](https://images.seebug.org/content/images/2020/03/73331792-04fa-4162-886c-1c17f3fa406a.png-w331s)
> **Beacon Frame** 并不是必须的，路由器可以配置不广播，STA依然可以通过指定SSID和密码进行连接，即所谓的隐藏热点。
在WiFi握手前还可以看到两大类型的帧，Authentication和Association，分别是认证和连接。注意这里的认证和安全性无关，只是认证双方是和符合标准的802.11设备。而连接后则在链路层接入网络，如果是Open
WiFi，此时已经接入LAN，如果需要WPA认证，即我们所讨论的情况，则正式开始四路握手。
回顾上面的四路握手大图。注意在握手开始之前，双方手上都有一个`PMK`，即配对主秘钥。这个秘钥是从哪来的呢？在`IEEE
802.11i-2004`标准中有定义，如果使用PSK(Pre-Shared
Key)认证，那么PMK实际上就是PSK。而PSK则是通过WiFi密码计算出来的：
    PMK = PSK = key_derivation_func(wifi_passwd)
key_derivation_func是一个秘钥推导函数(PBKDF1/2)，内部以SHA-1为哈希函数。
还注意到，AP端不止有PMK，还有一个`GMK`。这是AP自己`生成`的，GMK用来为每个连接的STA生成GTK，并分享给STA。为了避免GMK被STA猜解，有的AP可以设置定时更换GMK，如思科的设备中`broadcast
key rotation`选项。
> 拓展阅读：[Real 802.11 Security: Wi-Fi Protected Access and
> 802.11i](https://books.google.com/books?id=nnbD-> FPpszMC&pg=PA210&lpg=PA210&dq=how+is+GMK+generate&source=bl&ots=LP4NjRTyaH&sig=ACfU3U2NRkgzwu1mC07WnS2HxKW3rRdLJA&hl=en&sa=X&ved=2ahUKEwjD3cK6nb3oAhWRdn0KHX2wBSMQ6AEwBXoECAoQAQ#v=onepage&q=how%20is%20GMK%20generate&f=false)
WPA中四路握手的协议也称为`EAPOL(Extensible authentication protocol over
LAN)`，可以直接在wireshark等工具中使用eapol过滤出来。
## 握手1/4
握手第一阶段，AP向客户端发送随机数`ANonce`。
![
](https://images.seebug.org/content/images/2020/03/ec038553-0085-4bf5-8c5f-90ff0e747975.png-w331s)
此时，客户端中有PMK、ANonce、SNonce(客户端自行生成的随机数)，以及双方的MAC地址信息。通过这些信息，计算PTK：
    PTK = func(PMK + Anonce + SNonce + Mac (AA)+ Mac (SA))
> `func`是个伪函数，表示经过某种运算。函数的实现细节不展开，下面都使用func作为伪函数名。
PTK是 _Pairwise Transit Key_
，根据参与运算的参数可见，该秘钥在每个客户端每次握手中都是不同的。PTK也可以理解为一个临时秘钥，用来加密客户端和AP之间的流量。
## 握手2/4
客户端生成PTK后，带着自己生成的SNonce发送给AP，目的是为了让AP使用同样的方法计算出PTK，从而确保双方在后续加密中使用正确的秘钥。
在这次发送的数据中，还包含MIC(Message Integrity Check)字段，AP用以校验该条信息的完整性，确保没有被篡改。
## 握手3/4
客户端收到第二阶段发送的SNonce之后，就可以算出PTK，并用PTK加密GTK后，发送给客户端，同样带有MIC校验。
![
](https://images.seebug.org/content/images/2020/03/12fe0d95-5318-43f1-bf35-e9432ed785eb.png-w331s)
发送的GTK是最初从GMK生成而来的，主要用来加密组播和广播数据(实现上切分为GEK/GIK，在CCMP和TKIP作为不同字段使用)。
## 握手4/4
此时双方都有了后续加密通信所需要的PTK和GTK，第四次握手仅仅是STA告诉AP秘钥已经收到，并无额外数据：
![
](https://images.seebug.org/content/images/2020/03/bd6ea926-1e79-4d58-aa26-c8a020a06641.png-w331s)
## 小结
根据秘钥的唯一性，可以分为两种：
  * Parwise Key：一机一密，每个客户端保存一个，AP端保存多个，用来加密单播数据
  * Group Key：一组一密，所有客户端和AP都保存一个，用来加密组播或广播数据
根据秘钥的类型，也可以分为两类：
  * Master Key：主秘钥，预先安装或者很久才更新一次
  * Temporal Key：临时秘钥，每次通过主秘钥去生成
这样，理解前面的各种Key也就更加直观了。注意由于Group Key是所有客户端共享的，所以当某个客户端离开AP之后，AP会重新生成Group
Key，并通知其他终端进行更新；此外，前面也说了，某些AP也可以配置定期更新Group Key。
握手也可以简化描述为以下四步：
  1. AP发送ANonce给STA
  2. STA使用ANonce计算获得单播秘钥，发送SNonce给AP
  3. AP使用SNonce计算获得单播秘钥，并将加密的组播秘钥发送给STA
  4. 完成握手，双方都有PTK和GTK，加密后续对应报文