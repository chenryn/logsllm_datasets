title:Enhancing DNS Resilience against Denial of Service Attacks
author:Vasileios Pappas and
Daniel Massey and
Lixia Zhang
Enhancing DNS Resilience against Denial of Service Attacks
Vasileios Pappas
T.J. Watson Center
IBM Research
PI:EMAIL
Dan Massey
Lixia Zhang
Computer Science Department
Computer Science Department
Colorado State University
PI:EMAIL
UCLA
PI:EMAIL
Abstract
The Domain Name System (DNS) is a critical Internet
infrastructure that provides name to address mapping ser-
vices. In the past few years, distributed denial of service
(DDoS) attacks have targeted the DNS infrastructure and
threaten to disrupt this critical service. In this paper we
show that the existing DNS can gain signiﬁcant resilience
against DDoS attacks through a simple change to the cur-
rent DNS operations, by setting longer time-to-live values
for a special class of DNS resource records, the infras-
tructure records. These records are used to navigate the
DNS hierarchy and change infrequently. Furthermore, in
combination with a set of simple and incrementally deploy-
able record renewal policies, the DNS service availabil-
ity can be improved by one order of magnitude. Our ap-
proach requires neither additional physical resources nor
any change to the existing DNS design. We evaluate the
effectiveness of our proposed enhancement by using DNS
traces collected from multiple locations.
Keywords: DDoS, DNS, resilience, caching
1 Introduction
The Domain Name System (DNS) [16] provides name
services for the Internet. It maps hostnames to IP addresses
and also provides services for a growing number of other
applications, such as mapping IP addresses to geographic
locations or directory services for legacy telephony appli-
cations. Furthermore, protocols such as SMTP and SIP de-
pend on the DNS in order to route messages through appro-
priate application level gateways. As a result, the availabil-
ity of the DNS can affect the availability of a large number
of Internet applications. Ensuring the DNS data availability
is an essential part of providing a robust Internet.
Due to its hierarchical structure, the DNS availability
depends on a small number of servers that serve the root
and other important top level domains. A number of dis-
tributed denial of service (DDoS) attacks have been di-
rected against these top level DNS name-servers in recent
years [2, 3, 5, 7]. The impact on overall DNS availability
is debatable [1, 4], but some attacks did succeed in dis-
abling the targeted DNS servers and resulted in parts of
the Internet experiencing severe name resolution problems.
Overall, attacks can potentially threaten the DNS availabil-
ity and effectively threaten the availability of the Internet
itself.
We have developed a simple approach that can effec-
tively enhance the DNS resilience against DDoS attacks.
We identify a special class of DNS records called infras-
tructure records, which store data for DNS infrastructure
components (namely the name-servers). DNS resolvers
use the infrastructure records to navigate the DNS hier-
archy. The presence of the infrastructure records in DNS
local caches can greatly improve the resilience of the DNS
in the presence of failures. In this paper we propose and
evaluate two methods for caching infrastructure records
for longer periods of time. First, we propose to assign a
much longer TTL value for the infrastructure records than
the data records. This is feasible because, generally speak-
ing, the infrastructure records change less frequently than
other DNS data records. Second, we propose a set of sim-
ple record renewal policies. Our analysis shows that these
two changes can improve DNS service availability during
a DDoS attack by one order of magnitude.
The main beneﬁt of our approach is that it is oper-
ationally feasible and immediately deployable by either
large or small zones. In contrast, the currently deployed
solution of shared unicast addresses [14] aims at absorb-
ing the attack load by installing a large number of name-
servers. This solution is suitable for large zones, such
as the root and the top level domains, that can afford the
cost. Smaller zones may not be able to afford adding a
large number of name-servers. Other solutions proposed
by the research community [10, 21, 20, 12, 11] address the
problem of DDoS attacks against DNS by introducing ma-
jor protocol changes or by redesigning the whole system.
Although some of them are considered incrementally de-
ployable, their adoption is hindered by the operators’ re-
luctance to introducing major changes in an operational
system. Our approach requires no protocol changes while
achieving similar levels of resilience against DDoS attacks.
The rest of the paper is structured as follows. Sections 2
and 3 review the basic DNS concepts and the threat posed
by DDoS attacks. Section 4 presents our TTL guidelines
and caching enhancements. Section 5 evaluates of our ap-
proach using a set of real DNS trafﬁc traces. Section 6 dis-
cusses some issues related to other attack strategies. Sec-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007tion 7 reviews related work and Section 8 concludes the
paper.
2 Domain Name System
In DNS parlance, the name space is divided into a large
number of zones. Roughly speaking, each zone is author-
itative for the names that share the same sufﬁx with the
zone’s name. A zone can also delegate part of its name-
space to another zone, referred as a child zone. For exam-
ple, the ucla.edu zone has delegated the cs.ucla.edu name-
space to create a child zone. This delegation procedure
results in an inverted tree structure with each node being a
zone and each edge representing a delegation point. The
root zone resides at the top of this tree structure. Generic
top-level domains (gTLD), such as edu, and country code
top-level domains (ccTLD) appear directly below the root.
Figure 1 displays a part of the DNS tree structure with some
functional elements introduced in the next two paragraphs.
Each zone stores the resource records ((cid:0)(cid:0)s) associated
with names under its authority. There are several different
types of (cid:0)(cid:0)s with the most common one being the address
(A) resource record used to map names to IPv4 addresses.
Each (cid:0)(cid:0) has a time to live value ((cid:1) (cid:1) ) that speciﬁes the
maximum lifetime when caching the record. For example,
the IP address of www.ucla.edu is stored in an A resource
record and has a (cid:1) (cid:1)  value of 4 hours.
All the (cid:0)(cid:0)s that belong to a zone are available from
a set of DNS servers called authoritative name-servers
((cid:3)s) for the zone. The (cid:3)s are identiﬁed by a spe-
cial type of resource record, the name-server (NS) resource
record. The NS records for a zone are stored at the zone
itself and also at its parent zone. Each NS record points to
the name of the authoritative name-server (rather than its
IP address) and thus one needs both the NS and A records
of the server in order to contact a zone. We call the set of
NS and A records that are associated with the (cid:3)s infras-
tructure resource records ((cid:0)(cid:0)s). (cid:0)(cid:0)s are used in order
to construct the DNS tree structure.
Client applications typically retrieve a desired (cid:0)(cid:0)s by
querying a stub-resolver ((cid:6)(cid:0)), a DNS element which is im-
plemented in every operating system. An (cid:6)(cid:0) typically for-
wards the query to a special type of server, called caching
server ((cid:7)(cid:6)) and the (cid:7)(cid:6) obtains the desired (cid:0)(cid:0). More
speciﬁcally, the (cid:7)(cid:6) obtains (cid:0)(cid:0)’s from zone (cid:8) by query-
ing (cid:8)’s (cid:3)s. The (cid:7)(cid:6) knows (cid:8)’s (cid:3)s either because it
has previously cached (cid:8)’s (cid:0)(cid:0)s or by querying (cid:8)’s par-
ent zone. The parent zone knows the (cid:8)’s (cid:0)(cid:0)s because it
is required to have a copy of (cid:8)’s (cid:0)(cid:0)s. If the (cid:7)(cid:6) does
not know the (cid:0)(cid:0)s for (cid:8) or (cid:8)’s parent, it repeats ﬁnds the
nearest ancestor zone for which it has the (cid:0)(cid:0)s. Every (cid:7)(cid:6)
is hard-coded with the (cid:0)(cid:0)s of the root zone and thus can
always start at the root zone if no better (cid:0)(cid:0)s are known.
A (cid:7)(cid:6) caches each (cid:0)(cid:0) that it learns for a period of time
equal to the (cid:1) (cid:1)  value of the record. Thus, it can reply
back to a (cid:6)(cid:0) either with information that is locally cached
or with information that is retrieved directly from an (cid:3).
3 Threat Assessment of DDoS Attacks
A successful Distributed Denial of Service (DDoS) at-
tack against the DNS offers potential for a high "pay-off".
Almost every Internet application utilizes the DNS and an
attacker can potentially achieve a DoS attack against many
services and many locations by disabling the DNS. The
DNS tree structure also seems to introduce critical points of
failure such as DNS root or DNS top level domains. Well
known DDoS attacks have been launched against the DNS
root and other top level zones [2, 3, 5, 7]. A simplistic view
suggests a successful attack against the DNS root servers
could cripple the Internet.
However, both the vulnerabilities and the potential im-
pacts are more complex than the simplistic view suggests.
A more informed analysis must take the various DNS com-
ponents such as redundant servers and caches into account.
A DNS zone can be served by a large number of DNS
name-servers. Protocol limitations have ﬁxed the number
of IPv4 root server addresses at 13, but techniques such as
shared unicast addresses are being used to increase the ac-
tual number of servers. Second, even if the attack success-
fully disables the name-servers of a targeted zone, it may
have limited effect on the DNS service given that cached
records will continue to be served.
3.1 Launching a Successful Attack
This paper considers DDoS attacks that target the au-
thoritative name-servers for a zone. We assume the attack
objective is to disable the DNS resolution of all zones be-
low the targeted zone. Many high level zones such as the
root and top level domains (com, net, edu, uk, cn, and so
forth) primarily provide referrals to other zones lower in the
tree. For example, an attack against the edu authoritative
servers is intended to prevent resolvers from reaching any
of the zones below edu. Most of the well known large-scale
DNS attacks fall under this category. Section 6 discusses
other types of attacks.
Whether an attack succeeds it depends on both the re-
sources of the attacker and the defender. DDoS attacks
can easily succeed if a zone is served by a small number
of servers. Currently, most zones use two or three name-
servers and are thus vulnerable to relatively small attacks.
Larger and more critical zones tend to deploy more servers,
but their number still ranges in the order of tens or hun-
dreds. Unfortunately, some of the "botnets" controlled by
attackers include hundreds of thousands of "drone" ma-
chines [6] and can potentially be successful even against
the few zones that deploy anycast enabled name-servers
[14]. Overall, the situation creates an arms race between
attacker and defenders with both sides seeking enough re-
sources to overwhelm the other.
3.2 Factors Affecting Attack Impact
While it may be feasible to launch a successful DDoS
attack against a zone, the attack will not necessarily have
any impact on Internet applications. There are mainly three
factors that affect the end-user experience of a successful
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Authoritative Server
Caching Server
Stub Resolver
DNS zone
Subnet
.
from parent
from child
edu. NS  ns1.edu.
edu. NS  ns2.edu.
TTL
net.
edu.
No Refresh
Refresh
ucla.edu.
ucla.edu. NS  ns1.ucla.edu.
ucla.edu. NS  ns2.ucla.edu.
Renew + Refresh
Long-TTL + Refresh
Figure 1. Overview of DNS elements.
Figure 2. Proposed schemes showcase.
DDoS attack against DNS:
Position of the Target Zone
If a zone is a stub in the
DNS tree structure, i.e.
it is not used in order to access
the name-servers for other zones, then the attack will only
affect the names deﬁned in the targeted zone. Note that a
leaf-zone, i.e. a zone that has no children, is not necessar-
ily a stub-zone. In many cases leaf-zones are used in order
to resolve the IP address of other zones’ name-servers. In
essence, the number of descendant zones that can be re-
solved through a zone can indicate the severity of a suc-
cessful attack against that zone. If one considers only the
position of a zone, then the root zone would be considered
the most important zone given that it is needed in order to
resolve all other zones.
Popularity of the Target Zone The impact of a success-
ful attack also depends on the frequency of referrals pro-
vided by the target zone. The number of referrals depends
partly on the the number of child zones below the parent
zone. But it is also inﬂuenced by the popularity of the child
zones, i.e. the number of caching servers that query them.
In addition, the TTL values of the child zones (cid:0)(cid:0)s can
also inﬂuence the frequency of referrals. To illustrate this,
consider an attack that targets the root zone. Every zone
is a descendant of the root, but an attack against a popu-
lar TLD may be more catastrophic than attack against the
root. There are only around two to three hundreds zones
directly below the root, compared to millions of zones di-
rectly below the largest TLDs. Furthermore, the zones di-
rectly below the root tend to have (cid:0)(cid:0) records with rela-
tively TTL values. In contrast, many zones below the TLDs
have shorter TTL values for the (cid:0)(cid:0) records. As a conse-
quence, the caching servers query TLDs more frequently
than they query the root zone.
Resource Record Caching The impact of a successful
DDoS attack is also affected by resource record caching.
Even if some zones are unavailable due to a DDoS attack,
the records deﬁned at these zones may be cached in some
caching servers and thus still accessible. Clearly, the higher
the TTL value for a record and the more popular the record
may be, the higher the probability of being cached.
In
essence, the use of resource record caching allows end-user
application to still function even though a zone’s authorita-
tive name servers are not accessible. In a similar manner,
the caching of infrastructure records can allow a caching
server to access a zone’s name-servers, even if an ascen-
dant zone is not accessible due to a DDoS attack. While
the caching of data records plays a role, the caching of in-
frastructure records plays a more prominent role in mitigat-
ing DDoS attacks. The presence of a zone’s infrastructure
record in the local cache allows the resolution of all the
names deﬁned inside the zone and also allows the resolu-
tion of all the descendant zones even when the parent zone
(or any other ascendant zone) is unavailable.
4 Enhancing DNS Resilience
Previous efforts [10, 21, 20, 12, 11] of enhancing the
DNS resilience against DDos attacks focus on reducing
or eliminating critical points of failure in the DNS hierar-
chy. Either they introduce new ways of resolving the name-
servers [21, 12] which do not coincide with the name-space
tree structure, or they abandon completely the concept of
name-servers [10, 20, 11], at least in the way that they are
currently deﬁned. As a consequence these previous propos-
als require substantial changes in the DNS infrastructure.
In contrast, our approach of enhancing the DNS re-
silience against DNS attacks focuses on zone popularity
and caching. We introduce changes only at the caching
servers and we do not require any modiﬁcations to the un-
derlying DNS infrastructure. Our enhancements aim at
forcing the caching servers ((cid:7)(cid:6)) to maintain for longer pe-
riods of time copies of the infrastructure resource records
((cid:0)(cid:0)s) for the zones that they use the most frequently. In
consequence, the number of referral, i.e queries that a (cid:7)(cid:6)
sends at a parent zone in order to resolve names belong-
ing to a child zone, can potentially decrease. In this way
the popularity of a zone depends mainly on the number of
queries generated for the names that belong to the zone and
less on the number of queries generated for names belong-
ing to a child zone.
We provide the following example in order to elaborate
more on the basic idea of our approach. Let’s consider a
successful attack against the edu zone. In that case, a (cid:7)(cid:6)
cannot resolve a zone that resides just below the edu if it
does not have the (cid:0)(cid:0)s for that zone. The probability of
having the (cid:0)(cid:0)s for the zone cached are increased when a
zone is more popular or when the (cid:0)(cid:0)s have a longer TTL.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:32:21 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007In order to increase the probability of having the (cid:0)(cid:0)s, a
(cid:7)(cid:6) can "artiﬁcially" increase the popularity of the zone
by querying it whenever the (cid:0)(cid:0)s are ready to expire or
the zone’s administrator can increase the TTL value of the
zone’s (cid:0)(cid:0)s. Note that in the extreme case, a (cid:7)(cid:6) can
indeﬁnitely query for the (cid:0)(cid:0)s and the zone’s administra-
tor can unlimitedly increase the TTL value. While both of
these extreme cases can lead to the best resilience against
DDoS attacks, they are not desirable given that the ﬁrst can
introduce a considerable message overhead and the second
can potentially introduce (cid:0)(cid:0)s inconsistencies.
Next we present three feasible techniques that can be
used in order to increase the probability of having the
(cid:0)(cid:0)s for a zone locally cached. Figure 2 provides their
graphical representation, corresponding to the (cid:0)(cid:0)s of a
zone, which are cached inside a (cid:7)(cid:6). The longer arrows
represent referral replies from the parent zone, while the
shorter arrows represent replies from the child zone. The
horizontal lines represent the period of time for which the
(cid:0)(cid:0)s are cached. We should point out that the proposed
methods affect only the (cid:0)(cid:0)s and not any other record,
e.g. as the various data records.
TTL Refresh In order to explain how TTLrefresh works
we ﬁrst need to provide some speciﬁc details on how (cid:7)(cid:6)s
learn and cache these records. A (cid:7)(cid:6) learns the (cid:0)(cid:0) for a
zone (cid:8) initially from (cid:8)’s parent zone ( ). The (cid:0)(cid:0) for (cid:8)
are included in the authority and the additional sections of
the referral sent by  ’s name-servers. The (cid:7)(cid:6) caches these
records locally and then contacts one of (cid:8)’s name-servers
to obtain the desired data. The reply from (cid:8)’s name-servers
also includes a the (cid:0)(cid:0) for (cid:8) in the authority and addi-
tional sections of the reply. The (cid:7)(cid:6) ought to replace the
cached (cid:0)(cid:0) that come from the parent with the (cid:0)(cid:0) that
come from the child zone when they are not identical [13].
This establishes initial (cid:0)(cid:0) records for zone (cid:8).
Additional queries for names in (cid:8) can make use of the
(cid:0)(cid:0) data and go directly to (cid:8)’s name-servers. Each query
to a (cid:8) name-server will include a copy of (cid:8)’s (cid:0)(cid:0) data
and TTL refresh uses this new data to refresh the TTL on
(cid:8)’s (cid:0)(cid:0). For example, a query for www.ucla.edu will re-
sult in the cache learning both the requested www.ucla.edu
record and the (cid:0)(cid:0) data from ucla.edu. If the (cid:0)(cid:0) for
(cid:8) has not yet expired, a later query for ftp.ucla.edu will
go directly to the (cid:8) name-servers and the response will in-
clude both the ftp.ucla.edu record and another copy of the
ucla.edu (cid:0)(cid:0) data. This new copy of the (cid:0)(cid:0) informa-
tion could be used to refresh the cached copy of all ucla.edu
(cid:0)(cid:0), but many popular DNS caching server implementa-
tions do not refresh the TTL value for the (cid:0)(cid:0). Note that
the www.ucla.edu record may expire before the ucla.edu
(cid:0)(cid:0) and thus even another query for www.ucla.edu could
be used to refresh the (cid:0)(cid:0).
This simple modiﬁcation is very effective for the zones
that a (cid:7)(cid:6) visits frequently. Assuming a (cid:7)(cid:6) sends some
query to zone’s name-servers before the (cid:0)(cid:0) expires. Ev-