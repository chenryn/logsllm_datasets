### 20. Estimation of \( P_r(X_a(t) > \tau_i + x - t_{mr}) \)

The probability that the CR-TS (Crash-Recovery Target System) does not crash until \(\tau_i + x\) after its last recovery can be estimated as follows:

\[
P_r(X_a(t) > \tau_i + x - t_{mr}) = 1 - \int_0^{\tau_i + x - t_{mr}} f_a(x) \, dx
\]

This can be further simplified to:

\[
P_r(X_a(t) > \tau_i + x - t_{mr}) \geq 1 - F_a(x) \bigg|_{\tau_i - t_{mr}}
\]

When the probability density function \(f_a(x)\) or the distribution function \(F_a(x)\) is unknown, an empirical distribution function (EDF) can be used to estimate these functions. Similarly, for estimating \(P_r(X_c(t) > \eta + \text{timeout})\), an empirical probability distribution can be utilized.

### 6. Simulation and Evaluation

For our simulation studies, we set the heartbeat interval \(\eta = 1\) and gradually increase the timeout length. The message transmission parameters are \(p_L = 0.01\) and \(E(D) = 0.02\), both modeled as exponentially distributed random variables. These settings are consistent with the simulations in [3].

The CR-TS is defined as a recoverable process with various mean time to failure (MTTF) and mean time to repair (MTTR) values, also modeled as exponentially distributed random variables. We chose the exponential distribution for the non-deterministic MTTF and MTTR for the following reasons:
1. Exponential failures are widely adopted for reliability analysis in many practical systems.
2. Unlike heavy-tailed distributions such as the log-normal distribution, crashes and recoveries with an exponential distribution will occur with reasonable inter-arrival times, avoiding the CR-TS from behaving like a fail-free or crash-stop process.

We implemented the revised NFD-S (Network Failure Detection and State) algorithm to evaluate the quality of service (QoS) of the algorithm. Figures 5-7 demonstrate the performance of the algorithm from different perspectives.

**Figure 5: E(TM) Analysis**

In a crash-recovery run, the mistakes caused by the CR-TS's crash and recovery impact \(E(TM)\). For the same timeout length, four aspects affect \(TM\):
- Message delay and loss
- CR-TS's crash and recovery (see Figure 2)

\(TM\) caused by message delay is governed by the ratio between \(E(D)\) and the timeout. For the same \(E(D)\), as the timeout increases, a larger delay can be tolerated, reducing the frequency of \(T_1M\).

\(TM\) caused by message loss (\(T_2M\)) is related to \(\eta\), \(p_L\), \(E(D)\), and the timeout length. For constant QoS of message communication (i.e., the same \(p_L\) and \(E(D)\)), \(TM\) caused by message loss is governed by the ratio between \(\eta\) and the timeout. As the timeout length increases, more consecutive message losses can be tolerated, reducing the average duration and frequency of \(T_2M\).

\(TM\) caused by a crash (\(T_3M\)) is mainly governed by the timeout length (see Figure 2(c)) and bounded by the CR-TS's recovery duration. If a crash occurs, a false positive mistake will last until the failure detection time or until the CR-TS recovers. For detectable crashes, as the timeout length increases, \(T_3M\) will increase.

\(TM\) caused by a recovery (\(T_4M\)) is mainly governed by \(p_L\) and \(E(D)\) (see Figure 2(d)). After the CR-TS's recovery, the recovery can be detected when a valid liveness message is received.

From the above analysis, for the same \(\eta\), \(p_L\), \(E(D)\), MTTF, and MTTR (as set in each simulation case), when the timeout increases, the mistake duration caused by message delay and loss decreases (\(T_1M\)), the mistake duration caused by the CR-TS's crash increases (\(T_3M\)), and the mistake caused by the recovery for detectable crashes is not affected by the timeout length (\(T_4M\)), but fewer crashes and recoveries will be detected.

In the first simulation, with \(p_L = 0.01\) and MTBF = \(10^5\), when the timeout length is small, \(T_2M\) and \(T_3M\) occur with similar frequency. When the timeout is increased from 0.5 to 1.0, the FDS can tolerate zero message loss and most message delays, causing \(E(TM)\) to increase slowly because the impacts of \(T_1M\) and \(T_4M\) counterbalance. Overall, \(E(TM)\) remains stable within this duration. As the timeout length increases, \(T_2M\) occurs less frequently, but \(T_3M\) becomes dominant, causing \(E(TM)\) to increase gradually.

In the second simulation, with \(p_L = 0.01\) and MTBF = \(10^5\), when the timeout is small, \(T_2M\) has more impact than \(T_3M\) because \(T_2M\) occurs more frequently than crashes and recoveries. As the timeout length increases, the average duration of \(T_2M\) decreases, and \(E(TM)\) may even decrease since more message losses are tolerated. However, if the timeout continues to increase, \(T_3M\) will become dominant, and \(E(TM)\) will increase gradually.

Overall, Figure 5 shows that in a crash-recovery run, \(E(TM)\) exhibits different characteristics from a fail-free or crash-stop run. If the message delay and the probability of message loss are not very large, \(E(TM)\) is bounded by MTTR. From Figure 5, we also observe that \(E(TM)\) can be decreased by choosing an appropriate timeout value. Continually increasing the timeout length does not always achieve better \(TM\) in a crash-recovery run.

**Figure 6: E(TMR) Analysis**

Figure 6 demonstrates the \(E(TMR)\) of the NFD-S algorithm with exponential MTTF and MTTR values. As MTBF increases, for the same timeout length, \(E(TMR)\) increases, indicating that \(E(TMR)\) is greatly impacted by the dependability of the CR-TS. For both simulation cases, \(E(TMR)\) increases exponentially at the beginning but stops increasing exponentially once it reaches \(MTBF/2\). If the CR-TS has a deterministic recovery duration, \(E(TMR)\) will stop at \(MTBF/2\) when failures are detectable. This is because, when timeout + \(\eta\) is smaller than MTTR, all crashes are detectable. Even if all message delays and losses are tolerated, for every MTBF period, there are still two mistakes (\(T_3M\), \(T_4M\)) that will certainly occur. Thus, \(E(TMR) \leq MTBF/2\) within this period (see inequality (2) in Theorem 4.1).

If timeout + \(\eta\) is larger than the recovery duration, all crashes might become undetectable. When mistakes caused by message delays and losses occur less frequently than the CR-TS's crashes and recoveries, \(E(TMR)\) will stabilize at MTBF. In our simulation, the recovery duration of the CR-TS is an exponentially distributed random variable. Therefore, \(E(TMR)\) will increase gradually and approach MTBF, rather than stop at \(MTBF/2\), until all crashes become undetectable. For detectable crashes, \(TMR \leq MTBF/2\), and for undetectable crashes, \(TMR \leq MTBF\). Thus, \(E(TMR)\) will increase gradually between \([MTBF/2, MTBF]\) and finally stabilize at MTBF. These results match our analysis of inequalities (1)-(2) in Theorem 4.1 and indicate that if a CR-TS is not fail-free or crash-stop, \(E(TMR)\) will be bounded by MTBF when failures are undetectable and \(MTBF/2\) when failures are detectable.

**Figure 7: E(RDF) Analysis**

Figure 7 shows the proportion of detected failures of the NFD-S algorithm with different CR-TS dependability. As the timeout length increases, \(E(RDF)\) of the NFD-S algorithm decreases. When MTTR becomes shorter, \(E(RDF)\) decreases faster because the smaller MTTR is, the faster timeout + \(\eta\) crosses MTTR (\(T_U^D > MTTR\)). Therefore, more crashes remain undetected. We conclude that the NFD-S algorithm can achieve weak completeness in a crash-recovery run. If strong completeness is required for a crash-recovery failure detector, new solutions are needed to achieve this goal (see footnote 3).

Overall, from Figures 5-7, we can see that \(E(TMR)\) and \(E(TM)\) have bounds. Continually increasing the timeout length might not be a reasonable way to achieve better PA, \(E(TMR)\), and \(E(TM)\). It might, in fact, decrease \(E(RDF)\). A trade-off exists between the QoS metrics. According to our simulation settings, for the NFD-S algorithm, timeout \(\in [1, 1.1]\) (with \(T_U^D = \text{timeout} + \eta \in [2, 2.1]\)) might achieve the best overall QoS for a highly available, highly consistent, but not highly reliable CR-TS.

### 7. Conclusions

In this paper, we extended previously proposed QoS metrics to adapt to the behavior of a crash-recovery target, measuring the recovery detection speed and the completeness property of a failure detector. In addition to the QoS of message transmission, the dependability characteristics of the crash-recovery target are involved in the analysis of the failure detector's QoS bounds. Our analysis results show that the QoS analysis in [3] is a particular case of a crash-recovery run. The dependability of the crash-recovery target significantly impacts the QoS of a failure detector when the target is not fail-free or crash-stop. We have shown that when MTTF and MTTR do not approach infinity, the dependability metrics must also be used as inputs for the estimation of \(\eta\) and timeout, rather than only considering the impact of liveness message transmission measurements (see Figure 8). Furthermore, we have provided a method to estimate the FDS's parameters according to the QoS of message communication, the dependability of the CR-TS, and the QoS requirements of the FDS based on Chen's NFD-S algorithm.