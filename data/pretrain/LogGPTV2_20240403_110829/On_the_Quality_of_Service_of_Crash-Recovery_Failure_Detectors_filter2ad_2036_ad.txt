(20)
r
nX
m=1
=
1
n
Estimated P r(Xa(t) > τi+x−tm
r ): the probability that
the CR-TS does not crash until τi + x after its last recovery,
can be estimated as follows:
P r(Xa(t) > τi + x − tm
r ) = 1 −
Z τi+x−tm
≥ 1 − Fa(x)|τi−tm
0
r
r
0
fa(x)dx
(21)
When the probability density function fa(x) or distribution
function Fa(x) is unknown, an empirical distribution func-
tion (EDF) estimation can be adopted to estimate fa(x) or
Fa(x). Similarly, for P r(Xc(t) > η+timeout) estimation,
an empirical probability distribution can be used.
6. Simulation and Evaluation
For the simulation studies, we ﬁx the heartbeat interval at
η = 1 and increase the timeout length gradually. The mes-
sage transmission parameters are pL=0.01, E(D) = 0.02,
both exponentially distributed random variables. All of
Figure 5. The NFD-S Algorithm: E(TM)
these settings are similar to the simulations in [3]. The
CR-TS is deﬁned as a recoverable process with various
MTTF and MTTR as exponentially distributed random vari-
ables. We choose the exponential distribution for the non-
deterministic MTTF and MTTR for the following reasons.
First, exponential failures are widely adopted for reliabil-
ity analysis in many practical systems; second, unlike some
heavy tail distributions such as the log-normal distribution,
crash and recovery with an exponential distribution will oc-
cur with reasonable inter-arrival times, avoiding the CR-TS
behaving like a fail-free or crash-stop process. Further-
more, some reasonable durations of MTTF and MTTR are
provided as simulation cases. Such crash-recovery targets
are highly available and consistent, but not highly reliable,
targets. We implement the revised NFD-S algorithm to eval-
uate the QoS of the algorithm. Figs. 5-7 demonstrate the
algorithm from different perspectives.
Fig. 5 shows that in a crash-recovery run, the mistakes
caused by the CR-TS’s crash and recovery have impact on
E(TM). For the same timeout length, there are four as-
pects which have impact on TM: the message delay and loss,
the CR-TS’s crash and recovery (see Fig. 2). TM caused by
a message delay is governed by the ratio between E(D)
and timeout. For the same E(D), as timeout increases,
a larger delay can be tolerated. Thus TM caused by mes-
M) will decrease and occur less frequently. TM
sage delay (T 1
M) is related to η, pL, E(D) and
caused by a message loss (T 2
the timeout length. For constant QoS of message commu-
nication (i.e. the same pL and E(D)), TM caused by mes-
sage loss is governed by the ratio between η and timeout.
Since as the timeout length increases more consecutive
message losses can be tolerated, the average duration of T 2
M
M will occur less frequently. TM caused
will decrease and T 2
by a crash (T 3
M) is mainly governed by the timeout length
(see Fig. 2(c)) and bounded by the CR-TS’s recovery du-
ration, because if a crash occurs, a false positive mistake
will last until the failure detection time or until the CR-TS
recovers. For detectable crashes, as the timeout length in-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007M will increase. TM caused by a recovery (T 4
creases, T 3
M) is
mainly governed by pL and E(D) (see Fig. 2(d)), since af-
ter CR-TS’s recovery, the recovery can be detected when a
valid liveness message is received.
M (cid:23) and T 2
From the above analysis we know, for the same η, pL,
E(D), MTTF and MTTR (as set in each simulation case),
when timeout increases, the mistake duration caused by
M (cid:23)),
the message delay and loss will decrease (T 1
the mistake duration caused by the CR-TS’s crash increases
M (cid:22)), and the mistake caused by the recovery for the de-
(T 3
M),
tectable crashes is not affected by the timeout length (T 4
but less crashes and recoveries will be detected.
In the
ﬁrst simulation, pL=0.01 and MTBF = 105, when timeout
length is small, T 2
M occur with similar frequency.
When timeout is increased from 0.5 to 1.0, (the FDS can
tolerate zero message loss and most message delays), the
M (cid:22) and T 4
E(TM) increases slowly because T 1
M.
Thus their impacts counterbalance. Overall E(TM) is sta-
ble within this duration. As the timeout length increases,
M occurs every MTBF
M will occur less frequently. But T 3
T 2
period. Thus, as the timeout length increases, T 3
M will be-
come dominant and E(TM) will increase gradually.
M (cid:23), T 2
M (cid:23), T 3
M and T 3
In the second simulation, pL=0.01 and MTBF = 1050.
M will have more impact than T 3
M,
When timeout is small, T 2
because T 2
M occurs more frequently than crash and recov-
ery. Therefore, as the timeout length increases, the aver-
age duration of T 2
M occurs less frequently;
E(TM) will increase slower or even decrease since more
message losses are tolerated. But if timeout continues to
increase, T 3
M will become dominant, and E(TM) will later
increase gradually.
M decreases and T 2
Overall, Fig. 5 shows that in a crash-recovery run,
E(TM) exhibits quite different characteristics from a fail-
free or crash-stop run. If the message delay and the proba-
bility of message loss are not very large, E(TM) is bounded
by MTTR. From Fig. 5 we also observe that E(TM) can
possibly be decreased when some timeout value is chosen.
In a crash-recovery run, continually increasing the timeout
length cannot achieve a better TM as in a fail-free run.
Fig. 6 demonstrates the E(TMR) of the NFD-S algorithm
with exponential MTTF and MTTR with various values.
We can see that as MTBF increases, for the same timeout
length, E(TMR) increases. This implies that E(TMR) is
greatly impacted by the dependability of the CR-TS. We
can also see that, for both the simulation cases, E(TMR) in-
creases exponentially fast at the beginning but after E(TMR)
reaches MTBF
, it will stop increasing exponentially. If the
CR-TS has a deterministic recovery duration, E(TMR) will
stop at MTBF
2 when failures are detectable. This is because
when timeout + η is smaller than MTTR, all of the crashes
are detectable. Even if all of the message delays and losses
are tolerated, for every MTBF period there are still two mis-
M) which will certainly occur. Thus E(TMR) ≤
takes (T 3
M, T 4
2
Figure 6. The NFD-S Algorithm: E(TMR)
MTBF
2 within this period (see inequality (2) in Theorem 4.1).
If timeout + η is larger than the recovery duration, all of
the crashes might become undetectable. When mistakes
caused by the message delays and message losses occur
less frequently than the crash and recovery of the CR-TS,
E(TMR) will become stable at MTBF. In our simulation,
the recovery duration of the CR-TS is an exponentially dis-
tributed random variable. Therefore, E(TMR) will increase
gradually and approach MTBF, rather than stop at MTBF
,
until all of the crashes become undetectable since for non-
deterministic recovery duration, as the timeout length in-
creases, the proportion of the detectable crashes decreases.
For the detectable crashes, TMR ≤ MTBF
and for the unde-
tectable crashes, TMR ≤ MTBF. Thus E(TMR) will increase
gradually between [ MTBF
, MTBF] and ﬁnally stabilize at
MTBF. All of these results match our analysis of inequal-
ities (1)-(2) in Theorem 4.1 well and indicate that if a CR-
TS is not fail-free or crash-stop, E(TMR) will be bounded
by MTBF when failures are undetectable and MTBF
2 when
failures are detectable.
2
2
2
Fig. 7 shows the proportion of the detected failures of
the NFD-S algorithm with different CR-TS dependability.
Figure 7. The NFD-S Algorithm: E(RDF)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007a method to estimate the FDS’s parameters according to
the QoS of message communication, the dependability of
the CR-TS and the QoS requirements of the FDS based on
Chen’s NFD-S algorithm.
References
[1] M. K. Aguilera, W. Chen, and S. Toueg. Failure Detection
and Consensus in the Crash-Recovery Model. Distributed
Computing, 13(2):99 – 125, Apr. 2000.
[2] T. D. Chandra and S. Toueg. Unreliable Failure Detectors for
Asynchronous Distributed Systems. Technical Report TR93
- 1377, Department of Computer Science, Cornell Univer-
sity, 1993.
[3] W. Chen, S. Toueg, and M. K. Aguilera. On the Quality
of Service of Failure Detectors. IEEE Tran. on Computers,
51(5):561 – 580, 2002.
[4] L. Falai and A. Bondavalli. Experimental Evaluation of
the QoS of Failure Detectors on Wide Area Network.
In
Proc. of Int. Conf. on Dependable Systems and Networks
(DSN2005), pages 624 – 633, Jul. 2005.
[5] I. Gupta, T. D. Chandra, and G. S. Goldszmidt. On Scalable
and Efﬁcient Distributed Failure Detectors. In Proc. of the
Twentieth Annual ACM Symp. on Principles of Distributed
Computing, pages 170 – 179, 2001.
[6] N. Hayashibara, A. Cherif, and T. Katayama. Failure De-
tectors for Large-Scale Distributed Systems. In Proc. of the
21st IEEE Symp. on Reliable Distributed Systems, pages 404
– 409, 2002.
[7] N. Hayashibara, X. Defago, R. Yared, and T. Katayama. The
Accrual Failure Detector. In Proc. of 23rd IEEE Int. Symp.
on Reliable Distributed Systems, pages 66 – 78, 2004.
[8] M. Hurﬁn, A. Mostefaoui, and M. Raynal. Consensus in
Asynchronous Systems Where Processes Can Crash and Re-
In Proc. of the 17th IEEE Symp. on Reliable Dis-
cover.
tributed Systems (SRDS), pages 280 – 286, 20-23 Oct 1998.
[9] T. Ma. Quality of Service of Crash-Recovery Failure Detec-
tors. PhD thesis, The University of Edinburgh, March 2007.
[10] T. Ma, J. Hillston, and S. Anderson. Evaluation of the QoS
of Crash-Recovery Failure Detection. In SAC’07: Proc. of
the ACM Symp. on Applied Computing (DADS Track), pages
538 – 542. ACM, 2007.
[11] R. C. Nunes and I. Jansch-Pˆorto. QoS of Timeout-Based
Self-Tuned Failure Detectors: The Effects of the Communi-
cation Delay Predictor and the Safety Margin. In Proc. of
the Int. Conf. on Dependable Systems and Networks, pages
753 – 761, 2004.
[12] R. Oliveira, R. Guerraoui, and A. Schiper. Consensus in
the Crash-Recover Model. Technical Report TR-97/239,
D´epartment d’Informatique, Ecole Polytechnique Federale
de Lausanne (EPFL), 1997.
[13] R. V. Renesse, Y. Minsky, and M. Hayden. A Gossip-Style
Failure Detection Service. Proc. of Middleware, 98:55–70,
1998.
[14] I. Sotoma and E. R. M. Madeira. A Markov Model for
Quality of Service of Failure Detectors in the Pressure of
Loss Bursts. In AINA ’04: Proc. of the 18th Int. Conf. on
Advanced Information Networking and Applications, vol-
ume 2, pages 62 – 67, 2004.
Figure 8. The QoS Relationship for the FDS’s
Parameters Estimation
Notice that as the timeout length increases, E(RDF) of
the NFD-S algorithm decreases. When MTTR becomes
shorter, E(RDF) will decrease faster. This is because the
smaller MTTR is, the faster timeout + η crosses MTTR
(T U
D > MTTR). Therefore, more crashes remain unde-
tected. Thus we can conclude that NFD-S algorithm can
achieve a weak completeness in a crash-recovery run. If a
strong completeness is required for a crash-recovery failure
detector, then new solutions are needed to achieve such a
goal (see footnote 3).
Overall, from Figs. 5-7, we can see that, E(TMR) and
E(TM) have bounds; continually increasing the timeout
length might not be a reasonable way to achieve better PA,
E(TMR) and E(TM). It might in fact decrease E(RDF). A
trade-off exists between the QoS metrics. For instance, ac-
cording to our simulation settings, for the NFD-S algorithm,
timeout ∈ [1, 1.1] (T U
D = timeout + η ∈ [2, 2.1]) might
achieve the best overall QoS for a highly available, highly
consistent but not highly reliable CR-TS.
7. Conclusions
In this paper, we have extended previously proposed QoS
metrics to adapt to the behavior of a crash-recovery target
to measure the recovery detection speed and the complete-
ness property of a failure detector. In addition to the QoS
of message transmission, the dependability characteristics
of the crash-recovery target are involved in the analysis of
failure detector’s QoS bounds. Our analysis results show
that the QoS analysis in [3] is a particular case of a crash-
recovery run. The dependability of the crash-recovery tar-
get could have signiﬁcant impact on the QoS of a failure
detector when the target is not fail-free or crash-stop. We
have shown that when MTTF and MTTR do not approach
inﬁnity, the dependability metrics must also be used as in-
puts for the estimation of η and timeout, rather than only
considering the impact of the liveness message transmis-
sion measurements (see Fig. 8). Furthermore we have given
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:50 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007