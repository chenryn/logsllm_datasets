台湾学术网络管理文件：Backup Tools in UNIX（Linux）:
http://nmc.nchu.edu.tw/tanet/backup_tools_in_unix.htm
中文 How to 文件计划 （CLDP）：http://www.linux.org.tw/CLDP/HOWTO/hardware/CD-Writing-HOWTO/CD-Writing-HOWTO-3.html
熊宝贝工作记录之： Linux 烧录实作：http://csc.ocean-pioneer.com/docum/linux_burn.html
PHP5 网管实验室： http://www.php5.idv.tw/html.php?mod=article&do=show&shid=26
CentOS 7.x 之 man xfsdump
CentOS 7.x 之 man xfsrestore
2003/02/09：第一次完成
2003/05/05：修改 tar 的部分内容，尤其是 -P 这个参数的配合用法
2005/07/26：将旧有的文章移动到 这里
2005/07/27：大略修改了一些风格，另外，动作较大的是在范例的部分！
2005/08/29：加入了 dd 这个有趣的指令喔！
2006/05/02：将原本“tar -zxvpf /tmp/etc.tar.gz /etc”修改为“tar -zcvpf /tmp/etc.tar.gz /etc” 感谢讨论区网友 chinu 提供的信息。
2008/10/31：将原本针对 FC4 的旧版本移动到此处
2008/12/18：这次的改版在这一章添加了不少东西！尤其是将 cpio 与 dd 的范例重新做个整理！并加入 dump/restore, mkisofs/cdrecord
2009/08/20：加入情境仿真的题目。
2015/06/29：将就的基于 CentOS 5.x 的版本移动到此处
2015/06/29：因为 compress 几乎没人在用了，所以这一章将他拿掉，而加入的是新的 xz 喔！
2015/07/16：竟然忘记复原 /etc 需要恢复 SELinux type 的说明！请参考这一个项目的说明喔！
第第第第九九九九章章章章、、、、vviimm 程程程程序序序序编编编编辑辑辑辑器器器器
最近更新日期：2015/07/07
粟纃筅玪叼瘨酱褥嶉伀寕旓弻褥侒擝³ 譢缒锨丿酱褥挽亚瘨郱缒攫亚，嚄欈膗宵弻褥嬊亡 祱争­ 瘨攫曐瓰霆瘨攫上纺輵嘌。 苏㤽暭瘨 Linux distributions
­ 垒邡亡暭瘨 婿攫上纺輵嘌寕旓 vi ，羰º 弬垦挽亚碱譈七旓伣瓌 vi 俾ã 乺亐纺輵瘨捉厇， 嚄欈鷃咉庞譒恌剅彩褥嬊亡伣瓌 vi 载Ð 𪳍襨瘨攫上纺輵嘌。欈墺，vim
旓轿窥毁瘨 vi ， vim ² 仪厓争瓌² 厂顀铺既磞攫娴儩孝，轼股壃轿蟰谠夦 shell script, C program 竭禯帐纺輵剃股， 伄厓争宪 vim 袜ã 祱禯帐纺輵嘌！鷃咉
七旓瓌 vim 纺輵鷃阱瘨绵頙攫窄吆！ ^_^
由前面一路走来，我们一直建议使用文字模式来处理 Linux 系统的设置问题，因为不但可以让你比较容易了解到 Linux 的运行状况，也
比较容易了解整个设置的基本精神，更能“保证”你的修改可以顺利的被运行。 所以，在 Linux 的系统中使用文字编辑器来编辑你的 Linux 参数
配置文件，可是一件很重要的事情呦！也因此呢，系统管理员至少应该要熟悉一种文书处理器的！
Tips
这里要再次的强调，不同的 Linux distribution 各有其不同的附加软件，例如 Red Hat Enterprise Linux 与 Fedora 的 ntsysv 与
setup 等，而 SuSE 则有 YAST 管理工具等等， 因此，如果你只会使用此种类型的软件来控制你的 Linux 系统时，当接管不同的 Linux distributions
时，呵呵！那可就苦恼了！
在 Linux 的世界中，绝大部分的配置文件都是以 ASCII 的纯文本形态存在，因此利用简单的文字编辑软件就能够修改设置了！ 与微软的
Windows 系统不同的是，如果你用惯了 Microsoft Word 或 Corel Wordperfect 的话，那么除了 X window 里面的图形接口编辑程序（如 xemacs
）用起来尚可应付外，在 Linux 的文字模式下，会觉得文书编辑程序都没有窗口接口来的直观与方便。
Tips
什么是纯文本文件？其实文件记录的就是 0 与 1 ，而我们通过编码系统来将这些 0 与 1 转成我们认识的文字就是了。 在第零章里面的数据表
示方式有较多说明，请自行查阅。 ASCII 就是其中一种广为使用的文字编码系统，在 ASCII 系统中的图示与代码可以参考
http://zh.wikipedia.org/wiki/ASCII呢！
那么 Linux 在文本界面下的文书编辑器有哪些呢？其实有非常多喔！常常听到的就有： emacs, pico, nano, joe, 与 vim 等等[1]。 既然有
这么多文本界面的文书编辑器，那么我们为什么一定要学 vi 啊？还有那个 vim 是做啥用的？下面就来谈一谈先！
文书编辑器那么多，我们之前在第四章也曾经介绍过那简单好用的 nano ，既然已经学会了 nano ，干嘛鸟哥还一直要你学这不是很友善
的 vi 呢？其实是有原因的啦！因为：
所有的 Unix Like 系统都会内置 vi 文书编辑器，其他的文书编辑器则不一定会存在；
很多个别软件的编辑接口都会主动调用 vi （例如未来会谈到的 crontab, visudo, edquota 等指令）；
vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计；
因为程序简单，编辑速度相当快速。
其实重点是上述的第二点，因为有太多 Linux 上面的指令都默认使用 vi 作为数据编辑的接口，所以你必须、一定要学会 vi ，否则很多指
令你根本就无法操作呢！这样说，有刺激到你务必要学会 vi 的热情了吗？ ^_^
那么什么是 vim 呢？其实你可以将 vim 视作 vi 的进阶版本，vim 可以用颜色或底线等方式来显示一些特殊的信息。 举例来说，当你使用
vim 去编辑一个 C 程序语言的文件，或者是我们后续会谈到的 shell script 脚本程序时，vim 会依据文件的扩展名或者是文件内的开头信息， 判
断该文件的内容而自动的调用该程序的语法判断式，再以颜色来显示程序码与一般信息。也就是说， 这个 vim 是个“程序编辑器”啦！甚至一些
Linux 基础配置文件内的语法，都能够用 vim 来检查呢！ 例如我们在第七章谈到的 /etc/fstab 这个文件的内容。
简单的来说， vi 是老式的文书处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用
的工具，就连 vim 的官方网站 （http://www.vim.org） 自己也说 vim 是一个“程序开发工具”而不是文书处理软件～^_^。 因为 vim 里面加入了很
多额外的功能，例如支持正则表达式的搜寻架构、多文件编辑、区块复制等等。 这对于我们在 Linux 上面进行一些配置文件的修订工作时，是
很棒的一项功能呢！
Tips
什么时候会使用到 vim 呢？其实鸟哥的整个网站都是在 vim 的环境下一字一字的创建起来的喔！ 早期鸟哥使用网页制作软件在编写网页，但是
老是发现网页编辑软件都不怎么友善，尤其是写到 PHP 方面的程序码时。 后来就干脆不使用所见即所得的编辑软件，直接使用 vim ，然后标签 （tag）
也都自行用键盘输入！ 这样整个文件也比较干净！所以说，鸟哥我是很喜欢 vim 的啦！ ^_^
下面鸟哥会先就简单的 vi 做个介绍，然后再跟大家报告一下 vim 的额外功能与用法呢！
基本上 vi 共分为三种模式，分别是“一般指令模式”、“编辑模式”与“指令列命令模式”。 这三种模式的作用分别是：
一般指令模式 （command mode）
以 vi 打开一个文件就直接进入一般指令模式了（这是默认的模式，也简称为一般模式）。在这个模式中， 你可以使用“上下左
右”按键来移动光标，你可以使用“删除字符”或“删除整列”来处理文件内容， 也可以使用“复制、贴上”来处理你的文件数据。
编辑模式 （insert mode）
在一般指令模式中可以进行删除、复制、贴上等等的动作，但是却无法编辑文件内容的！ 要等到你按下“i, I, o, O, a, A, r, R”等任何
一个字母之后才会进入编辑模式。注意了！通常在 Linux 中，按下这些按键时，在画面的左下方会出现“ INSERT 或 REPLACE ”的字样，
此时才可以进行编辑。而如果要回到一般指令模式时， 则必须要按下“Esc”这个按键即可退出编辑模式。
指令列命令模式 （command-line mode）
在一般模式当中，输入“ : / ? ”三个中的任何一个按钮，就可以将光标移动到最下面那一列。在这个模式当中， 可以提供你“搜寻数
据”的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等等的动作则是在此模式中达成的！
简单的说，我们可以将这三个模式想成下面的图示来表示：
图9.2.1、vi三种模式的相互关系
注意到上面的图示，你会发现一般指令模式可与编辑模式及指令列模式切换， 但编辑模式与指令列模式之间不可互相切换喔！这非常重
要啦！闲话不多说，我们下面以一个简单的例子来进行说明吧！
Tips
过去鸟哥的前一版本中，一般指令模式被称为一般模式。但是英文版的 vi/vim 说明中，一般模式其实是“ command mode ”的意思！中文直译
会变成指令模式啊！ 之所以称为指令模式，主因是我们可以在一般模式下面按下很多特殊的指令功能！例如删除、复制、区块选择等等！只是这个模式很容
易跟指令列模式 （command-line） 混淆～ 所以鸟哥过去才称为一般模式而已。不过真的很容易误解啦！所以这一版开始，这一模式被鸟哥改为“一般指
令模式”了！要尊重英文原文！
如果你想要使用 vi 来创建一个名为 welcome.txt 的文件时，你可以这样做：
1. 使用“ vi filename ”进入一般指令模式
[dmtsai@study ~]$ /bin/vi welcome.txt
# 在 CentOS 7 当中，由于一般帐号默认 vi 已经被 vim 取代了，因此得要输入绝对路径来执行才行！
直接输入“ vi 文件名”就能够进入 vi 的一般指令模式了。不过请注意，由于一般帐号默认已经使用 vim 来取代，因此如上表所示，
如果使用一般帐号来测试，得要使用绝对路径的方式来执行 /bin/vi 才好！另外，请注意，记得 vi 后面一定要加文件名，不管该文件名存
在与否！
整个画面主要分为两部份，上半部与最下面一列两者可以视为独立的。如下图 9.2.2 所示，图中那个虚线是不存在的， 鸟哥用来
说明而已啦！上半部显示的是文件的实际内容，最下面一列则是状态显示列（如下图的[New File]信息），或者是命令下达列喔！
图9.2.2、用 vi 打开一个新文件
如果你打开的文件是旧文件（已经存在的文件），则可能会出现如下的信息：
图9.2.3、用 vi 打开一个旧文件
如上图 9.2.3 所示，箭头所指的那个“"/etc/man_db.conf" [readonly] 131L, 5171C”代表的是“现在打开的文件名为
/etc/man_db.conf， 由于启动者的身份缘故，目前文件为只读状态，且文件内有 131 列 以及具有 5171 个字符”的意思！那一列的内容并
不是在文件内，而是 vi 显示一些信息的地方喔！此时是在一般指令模式的环境下啦。接下来开始来输入吧！
2. 按下 i 进入编辑模式，开始编辑文字
在一般指令模式之中，只要按下 i, o, a 等字符就可以进入编辑模式了！在编辑模式当中，你可以发现在左下角状态列中会出现 –
INSERT- 的字样，那就是可以输入任意字符的提示啰！这个时候，键盘上除了 [Esc] 这个按键之外，其他的按键都可以视作为一般的输
入按钮了，所以你可以进行任何的编辑啰！
图9.2.4、开始用 vi 来进行编辑
3. 按下 [ESC] 按钮回到一般指令模式
好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 [Esc] 这个按钮即可！
马上你就会发现画面左下角的 – INSERT – 不见了！！
4. 进入指令列模式，文件储存并离开 vi 环境
OK，我们要存盘了，存盘 （write） 并离开 （quit） 的指令很简单，输入“:wq”即可存盘离开！ （注意了，按下 : 该光标就会移动
到最下面一列去！） 这时你在提示字符后面输入“ ls -l ”即可看到我们刚刚创建的 welcome.txt 文件啦！整个图示有点像下面这样：
图9.2.5、在指令列模式进行储存及离开 vi 环境
如此一来，你的文件 welcome.txt 就已经创建起来啰！需要注意的是，如果你的文件权限不对，例如为 -r--r--r-- 时，那么可能会无法写
入，此时可以使用“强制写入”的方式吗？可以！使用“ :wq! ” 多加一个惊叹号即可！不过，需要特别注意呦！那个是在“你的权限可以改变”的情
况下才能成立的！ 关于权限的概念，请自行回去翻一下第五章的内容吧！
除了上面简易范例的 i, [Esc], :wq 之外，其实 vi 还有非常多的按键可以使用喔！在介绍之前还是要再次强调， vi 的三种模式只有一般指
令模式可以与编辑、指令列模式切换，编辑模式与指令列模式之间并不能切换的！ 这点在图9.2.1里面有介绍到，注意去看看喔！下面就来谈
谈 vi 软件中会用到的按键功能吧！
第第一一部部份份：：一一般般指指令令模模式式可可用用的的按按钮钮说说明明，，光光标标移移动动、、复复制制贴贴上上、、搜搜寻寻取取代代等等
移动光标的方法
h 或 向左方向键（←） 光标向左移动一个字符
j 或 向下方向键（↓） 光标向下移动一个字符
k 或 向上方向键（↑） 光标向上移动一个字符
l 或 向右方向键（→） 光标向右移动一个字符
如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，
例如向下移动 30 列，可以使用 "30j" 或 "30↓" 的组合按键， 亦即加上想要进行的次数（数字）后，按下动作即可！
[Ctrl] + [f] 屏幕“向下”移动一页，相当于 [Page Down]按键 （常用）
[Ctrl] + [b] 屏幕“向上”移动一页，相当于 [Page Up] 按键 （常用）
[Ctrl] + [d] 屏幕“向下”移动半页
[Ctrl] + [u] 屏幕“向上”移动半页