        //获取当前ESP寄存器的值
        dwGlobal_InitialStackPtr = CURRENT_EXCEPTION_STACK_PTR;
        //返回地址处打硬件断点
        ExceptionInfo->ContextRecord->Dr1 = *(NATIVE_VALUE*)dwGlobal_InitialStackPtr;
        // initial trace started
        dwGlobal_TraceStarted = 1;
    }
接着执行，ScanAllModulesForAddress()函数是用来扫描子函数的，其参数是当前eip和当前esp，然后将EFlags设置为了单步执行，意味着后面每执行一条汇编指令，都会触发单步异常，从而进入这个异常处理函数。
    // scan all modules for the current instruction pointer
    ScanAllModulesForAddress(CURRENT_EXCEPTION_INSTRUCTION_PTR, CURRENT_EXCEPTION_STACK_PTR);
    // single step
    ExceptionInfo->ContextRecord->EFlags |= SINGLE_STEP_FLAG;
当进入到合适的子函数头部中时，就会调用下面的遍历过程，计算出其对应的dll以及函数地址，和栈偏移。下面两个函数，一个遍历模块，一个遍历EAT表，当遍历出子函数时，就会用最初目标函数的的esp-现在的esp，从而得到栈偏移。
    DWORD ScanModuleForAddress(BYTE* pModuleBase, char* pModuleName, NATIVE_VALUE dwAddr, NATIVE_VALUE dwStackPtr)
    {
        IMAGE_DOS_HEADER* pImageDosHeader = NULL;
        IMAGE_NT_HEADERS* pImageNtHeader = NULL;
        IMAGE_SECTION_HEADER* pCurrSectionHeader = NULL;
        DWORD dwReadOffset = 0;
        BYTE* pCurrPtr = NULL;
        MEMORY_BASIC_INFORMATION MemoryBasicInfo;
        DWORD dwStackDelta = 0;
        // get dos header
        pImageDosHeader = (IMAGE_DOS_HEADER*)pModuleBase;
        if (pImageDosHeader->e_magic != 0x5A4D)
        {
            return 1;
        }
        // get nt header
        pImageNtHeader = (IMAGE_NT_HEADERS*)(pModuleBase + pImageDosHeader->e_lfanew);
        if (pImageNtHeader->Signature != IMAGE_NT_SIGNATURE)
        {
            return 1;
        }
        // loop through all sections
        for (DWORD i = 0; i FileHeader.NumberOfSections; i++)
        {
            // get current section header
            pCurrSectionHeader = (IMAGE_SECTION_HEADER*)((BYTE*)&pImageNtHeader->OptionalHeader + pImageNtHeader->FileHeader.SizeOfOptionalHeader + (i * sizeof(IMAGE_SECTION_HEADER)));
            // ignore executable sections
            if (pCurrSectionHeader->Characteristics & IMAGE_SCN_MEM_EXECUTE)
            {
                continue;
            }
            // scan current section for the target address
            dwReadOffset = pCurrSectionHeader->VirtualAddress;
            for (DWORD ii = 0; ii Misc.VirtualSize / sizeof(NATIVE_VALUE); ii++)
            {
                // check if the current value contains the target address
                pCurrPtr = pModuleBase + dwReadOffset;
                if (*(NATIVE_VALUE*)pCurrPtr == dwAddr)
                {
                    // found target address - check memory protection
                    memset((void*)&MemoryBasicInfo, 0, sizeof(MemoryBasicInfo));
                    if (VirtualQuery(pCurrPtr, &MemoryBasicInfo, sizeof(MemoryBasicInfo)) != 0)
                    {
                        // check if the current region is writable
                        if (MemoryBasicInfo.Protect == PAGE_EXECUTE_READWRITE || MemoryBasicInfo.Protect == PAGE_READWRITE)
                        {
                            // ensure the address list is not full
                            if (dwGlobal_AddressCount >= MAXIMUM_STORED_ADDRESS_COUNT)
                            {
                                printf("Error: Address list is full\n");
                                return 1;
                            }
                            // store current address in list
                            dwGlobal_AddressList[dwGlobal_AddressCount] = (NATIVE_VALUE)pCurrPtr;
                            dwGlobal_AddressCount++;
                            // calculate stack delta
                            dwStackDelta = (DWORD)(dwGlobal_InitialStackPtr - dwStackPtr);
                            printf("Instruction 0x%p referenced at %s!0x%p (sect: %s, virt_addr: 0x%X, stack delta: 0x%X)\n", (void*)dwAddr, pModuleName, (void*)pCurrPtr, pCurrSectionHeader->Name, dwReadOffset, dwStackDelta);
                        }
                    }
                }
                // increase read offset
                dwReadOffset += sizeof(NATIVE_VALUE);
            }
        }
        return 0;
    }
    DWORD ScanAllModulesForAddress(NATIVE_VALUE dwAddr, NATIVE_VALUE dwStackPtr)
    {
        DWORD dwPEB = 0;
        PEB* pPEB = NULL;
        LDR_DATA_TABLE_ENTRY* pCurrEntry = NULL;
        LIST_ENTRY* pCurrListEntry = NULL;
        DWORD dwEntryOffset = 0;
        char szModuleName[512];
        DWORD dwStringLength = 0;
        // get PEB ptr
    #if _WIN64
        pPEB = (PEB*)__readgsqword(0x60);
    #else
        pPEB = (PEB*)__readfsdword(0x30);
    #endif
        // get InMemoryOrderLinks offset in structure
        dwEntryOffset = (DWORD)((BYTE*)&pCurrEntry->InLoadOrderLinks - (BYTE*)pCurrEntry);
        // get first link
        pCurrListEntry = pPEB->Ldr->InLoadOrderModuleList.Flink;
        // enumerate all modules
        for (;;)
        {
            // get ptr to current module entry
            pCurrEntry = (LDR_DATA_TABLE_ENTRY*)((BYTE*)pCurrListEntry - dwEntryOffset);
            // check if this is the final entry
            if (pCurrEntry->DllBase == 0)
            {
                // end of module list
                break;
            }
            // ignore main exe module
            if (pCurrEntry->DllBase != pGlobal_ExeBase)
            {
                // convert module name to ansi
                dwStringLength = pCurrEntry->BaseDllName.Length / sizeof(wchar_t);
                if (dwStringLength > sizeof(szModuleName) - 1)
                {
                    dwStringLength = sizeof(szModuleName) - 1;
                }
                memset(szModuleName, 0, sizeof(szModuleName));
                wcstombs(szModuleName, pCurrEntry->BaseDllName.Buffer, dwStringLength);
                // scan current module
                ScanModuleForAddress((BYTE*)pCurrEntry->DllBase, szModuleName, dwAddr, dwStackPtr);
            }
            // get next module entry in list
            pCurrListEntry = pCurrListEntry->Flink;
        }
        return 0;
    }
最终会将所有合适的子函数都保存到dwGlobal_AddressList[dwGlobal_AddressCount]这个全局数组中。
然后会验证一下获取到的这些子函数地址的可用性。
    {
        // attempt to hook the target function at all referenced instructions found earlier
        for (DWORD i = 0; i ExceptionRecord->ExceptionCode == EXCEPTION_ACCESS_VIOLATION)
    {
        // access violation - check if the eip matches the expected value
        if (CURRENT_EXCEPTION_INSTRUCTION_PTR != OVERWRITE_REFERENCE_ADDRESS_VALUE)
        {
            return EXCEPTION_CONTINUE_SEARCH;
        }
        // caught current hook successfully
        dwGlobal_CurrHookExecuted = 1;
        // restore correct instruction pointer
        CURRENT_EXCEPTION_INSTRUCTION_PTR = dwGlobal_OriginalReferenceValue;
        // continue execution
        return EXCEPTION_CONTINUE_EXECUTION;
    }
## 总结
此hook方式的思路还是很新颖，同样也存在一些缺点，那就是只能在目标函数执行完成后，修改流程，并且可能hook的子函数万一被其他函数也调用了，这时候修改栈上的值，是否会有触发崩溃可能性呢。
通过这个工具的代码，也学到不少东西，异常处理，打硬件断点等等，可惜的是每想要hook一个API函数，都必须要去修改一下源码。
## 参考
* * *