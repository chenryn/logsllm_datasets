//returns 1
queue.empty(); // returns false
---
## Page 91
11.3我和队列
86/143 
题解
我们可以用两个栈来实现一个队列：因为我们需要得到先人先出的结果，所以必定要通过一
个额外栈翻转一次数组。这个翻转过程既可以在插人时完成，也可以在取值时完成。
class MyQueue {
stack in, out;
public:
MyQueue(){)
void push(int x) {
in.push (x) ;
int pop(){
in2out ();
int x = out.top();
out .pop() ;
return x;
int peek() {
in2out () ;
return out.top();
void in2out() {
if (out.empty(））{
while (!in.empty()){
int x= in.top();
in.pop();
out push (x) ;
bool empty(){
return in.empty() &k out.empty();
}；
155.Min Stack (Easy)
题目描述
设计一个最小栈，除了需要支持常规栈的操作外，还需要支持在O（1)时间内查询栈内最小
值的功能。
输人输出样例
以下是数据结构的调用样例。
MinStack minStack = nev MinStack();
---
## Page 92
11.3我和队列
87/143 -
minStack push(-2);
minStack.push(0) ;
minStack.push(-3) ;
minStack-getMin(); / / Returns 3
minStack-pop();
minStack.top();
// Returns 0
minStack-getMin() ; // Returns
题解
我们可以额外建立一个新栈，栈顶表示原栈里所有值的最小值。每当在原栈里插入一个数字
时，若该数字小于等于新栈栈顶，则表示这个数字在原栈里是最小值，我们将其同时插人新栈内。
每当从原栈里取出一个数字时，若该数字等于新栈栈顶，则表示这个数是原栈里的最小值之一：
我们同时取出新栈栈顶的值。
一个写起来更简单但是时间复杂度略高的方法是，我们每次插入原栈时，都向新栈插人一次
原栈里所有值的最小值（新栈栈顶和待插人值中小的那一个）：每次从原栈里取出数字时，同样
取出新栈的栈顶。这样可以避免判断，但是每次都要插人和取出。我们这里只展示第一种写法。
class MinStack {
stack s, min_s;
public:
MinStack() )
void push(int x) {
s.push(x);
if (min_s.empty() 11 min_s.top() >= x) {
min_s,push(x);
void pop() {
if (!min_s.empty() && min_s.top() == s.top()) {
min_s.pop();
8.pop();
int top(){
return s.top();
int getHin(){
return min_s.top();
};
20.Valid Parentheses (Easy)
题目描述
给定一个只由左右原括号、花括号和方括号组成的字符中，求这个字符中是否合法。合法的
定义是每一个类型的左括号都有一个右括号一一对应，且括号内的字符中也满足此要求。
---
## Page 93
11.4单调栈
88/143 -
输人输出样例
输入是一个字符中，输出是一个布尔值，表示字符中是否合法。
-(）[ndu
Output: true
题解
括号匹配是典型的使用栈来解决的问题。我们从左往右遍历，每当遇到左括号便放人栈内，
遇到右括号则判断其和栈顶的括号是否是统一类型，是则从栈内取出左括号，否则说明字符中不
合法。
bool isValid(string s){
stack parsed;
for (int i = 0; i  dailyTemperatures(vector& temperatures){
int n = temperatures.size();
vector ans(n);
stack indices;
for (int i = 0; i  heap;
//获得最大值
void top(){
return heap[0] ;
//插入任意值：把新的数字放在最后一位，然后上浮
void push(int k) {
heap .push_back (k) ;
gvim(heap size () - 1) ;
//删除最大值：把最后一个数字抑到开头，然后下沉
void pop() {
heap[0] - heap.back();
sink(0);
//上浮
void svim(int pos) {
while (pos > 1 && heap[pos/2]= heap[i]) break;
svap(heap [pos] , heap[i]) ;
pos - i;
通过将算法中的大于号和小于号互换，我们也可以得到一个快速获得最小值的优先队列。
另外，正如我们在STL章节提到的那样，如果我们需要在维持大小关系的同时，还需要支持
---
## Page 96
11.5优先队列
91/143 -
查找任意值、删除任意值、维护所有数字的大小关系等操作，可以考虑使用set或map来代替优
先队列。
23. Merge k Sorted Lists (Hard)
题目描述
给定k个增序的链表，试将它们合并成一条增序链表。
输人输出样例
输入是一个一维数组，每个位置存储链表的头节点；输出是一条链表。
Input:
[1->4->5,
1->3->4,
2->6]
9val > 12->val;
};
ListNode* mergeKLists(vector& lists) {
if (1ists.empty()) return nullptr;
priority_queue, Comp> q;
for (ListNode* list: lists){
if (list) {
q.push(1ist);
ListNode+ dunmy = nev ListNode(0), *cur = dummy;
while(1q.empty())(
cur->next = q.top();
q-pop();
x-x =
if (cur->next）{
q-push(cur->next);
return dummy->next;
F
---
## Page 97
11.5优先队列
92/143 -
218. The Skyline Problem (Hard)
题目描述
给定建筑物的起止位置和高度，返回建筑物轮廊（天际线）的拐点。
输人输出样例
输入是一个二维整数数组，表示每个建筑物的[左端，右端，高度]：输出是一个二维整数数组，
表示每个拐点的横纵坐标。
A
图11.3：题目218-建筑物及其天际线样例
Input: [[2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8]]
0utput: [[2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0]]
题解
我们可以使用优先队列储存每个建筑物的高度和右端（这里使用pair，其默认比较函数是先
比较第一个值，如果相等则再比较第二个值），从而获取目前会拔高天际线、且妨碍到前一个建
筑物（的右端端点）的下一个建筑物。
vector> getSkyline(vector>& buildings){
vector> ans;
priority_queue>max_heap;//
int i = 0, len = buildings.size();
int cur_x, cur_h;
while(i [][]suq  u > 11（）du·deuxw) 
second) {
cur_x = buildings[i] [0];
while (i < len && cur_x == buildings[i] [o]) {
max_heap.emplace (bui1dings[i] [2] , buildings[i] [1]) ;
++1;
}else{
cur_x = max_heap.top() .second;
max_heap-pop ();
上
---
## Page 98
11.6双坞队列
93/143 -
cur_h = (max_heap.enpty()) ? 0 : max_heap.top() .first;
if (ans.empty() 11 cur_h != ans.back() [1]) {
ans push_back({cur_x, cur_h});
return ans;
11.6双端队列
239.Sliding Window Maximum (Hard)
题目描述
给定一个整数数组和一个滑动窗口大小，求在这个窗口的滑动过程中，每个时刻其包含的最
大值。
输人输出样例
输入是一个一维整数数组，和一个表示滑动窗口大小的整数；输出是一个一维整数数组，表
示每个时刻时的窗口内最大值。
Input: nums = [1,3, -1, -3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
在这个样例中，滑动窗口在每个位置的最大包含值取法如下：
Vindov position
Max
[1 3
-1]-3 5 3 6
7
3
1
[3 -1
-3]  5 36
7
3