# 【技术分享】Windows PsSetLoadImageNotifyRoutine的0day漏洞（续）

#### 译文声明
本文是翻译文章，原文来源：breakingmalware.com。译文仅供参考，具体内容及含义请以原文为准。

#### 译者信息
- 译者：[anhkgg](http://bobao.360.cn/member/contribute?uid=2894976744)
- 预估稿费：200RMB
- 投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

#### 传送门
- [【技术分享】Windows PsSetLoadImageNotifyRoutine的0day漏洞](http://bobao.360.cn/learning/detail/4397.html)

#### 简介
安全服务商和内核开发者需注意，Windows内核中的一个代码错误可能导致无法在运行时获取加载模块的信息。修复这个问题并不像想象中那么简单。

#### 快速回顾
在研究Windows内核的过程中，我们发现了一个关于 **PsSetLoadImageNotifyRoutine** 的有趣问题。该函数用于注册PE模块加载的通知，但在注册后，内核回调函数可能会收到非法的镜像名称。在之前的博客中，我们探讨了与此bug相关的不同内核组件，并找到了一种解决方案。

#### 持久的问题
令人困惑的是，这个机制已经存在很长时间，但之前似乎没有人遇到过这个问题。这样一个广泛使用的Windows内核机制怎么会存在这么明显的缺陷，且未被修复或更新文档？经过一番搜索，我们没有找到任何官方文档或相关信息。然而，在[社区讨论](http://www.osronline.com/showThread.cfm?link=88362)中，我们发现了一些重要信息：
1. 我们复现的问题似乎源于同一原因。
2. 同样的回调通知bug早在十年前甚至更早就已出现（我们在2001年以前未找到相关记录）。
3. 微软应该已经知道这个问题。

#### 错误的解决方案
在寻找解决方法时，我们发现了一些工具试图通过不同的方法来解决这个问题，但效果不佳。例如，使用 **ObQueryNameString** 或其他API会产生相同的结果。还有一些工具尝试通过增加与 **FILE_OBJECT.FileName** 相关的 **DEVICE_OBJECT** 名称来解决问题，但实际上这些对象在其生命周期中从未使用过。

#### 继续探索
我们决定进一步检查其他提供PE加载回调通知的函数，如 **PsSetCreateProcessNotifyRoutineEx**，该函数自Windows Vista SP1起可用。我们想看看它是否也存在同样的内核bug。令我们困惑的是，在 **CreateInfo** 参数中有一个特定标志 **FileOpenNameAvailable**。当设置为TRUE时，表示完整的文件名是要打开的可执行文件的名称；若为FALSE，则操作系统仅提供部分名称。查看 **nt!PspInsertThread** 的反汇编代码时，发现此标志被设置为FALSE，而 **ImageFileName** 是 **FILE_OBJECT**（进程的SECTION）的 **FileName** 字段。这表明传递给回调的参数完整性不可信。

图1. Nt!PspInsertThread – 在调用注册的回调之前初始化 **CreateInfo.ImageFileName** 和 **CreateInfo.FileOpenNameAvailable**

看起来微软已经注意到这个问题，至少负责 **PsSetCreateProcessNotifyRoutineEx** 的开发者已经注意到了。然而，为什么至今仍未解决 **PsSetLoadImageNotifyRoutine** 的bug仍然让人不解。

#### 用微软的方式（几乎正确）
在搜索更多关于 **PsSetCreateProcessNotifyRoutineEx** 的文档时，我们找到了一篇2007年5月的文档《支持Windows Server 2008的内核数据和过滤》，目前该文档已在微软网站上删除（[这里有引用](https://breakingmalware.com/wp-content/uploads/2017/09/Kernel-Data-and-Filtering-Support-for-Windows-Server-2008.pdf)）。该文档指出，在使用进程创建回调时，驱动可以通过过滤管理API获取额外属性，如 **FltGetFileNameInformationUnsafe**。

根据这些信息，我们确认 **FltGetFileNameInformationUnsafe** 可以为我们提供最优雅和简单的解决方案。使用该函数可以让我们无需实现文件系统小过滤驱动就能解决问题。从 **PsSetLoadImageNotifyRoutine** 回调中获取 **FILE_OBJECT** 的方式与从 **PsSetCreateProcessNotifyRoutineEx** 回调中获取的方式非常相似，因此在我们的场景中，这是一个可行的解决方案。

让我们更加放心的是，某些Windows自带组件（如Windows Defender和防火墙）也在使用这个函数。

图2. Windows 10 Redstone中Windows Defender (WdFilter.sys) 和防火墙的回调

#### 尽管未尽明
在加载镜像通知回调中使用 **FltGetFileNameInformationUnsafe** 有时会失败，返回 **STATUS_OBJECT_NAME_NOT_FOUND**。微软文档中并未记录此错误为该函数可能的错误之一。经过一些实验，我们找到了能够始终重现此错误状态的确切事件序列。 **FltGetFileNameInformationUnsafe** 会在某个阶段调用 **fltmgr!FltpExpandShortNames**，这是实际验证文件路径是否存在的函数。

图3. Fltmgr!FltGetFileNameInformationUnsafe 中的 fltmgr!FltpExpandShortNames 回调

问题是，这种验证只进行了一部分：代码验证路径中的所有目录是否存在，但忽略了检查给定路径中的文件本身是否存在。因此，我们现在知道，只有当文件当前不在其以前的目录中时，才会返回错误代码。我们至少可以在传递适当的标志时获取到它打开的名称。

因此，我们需要处理的最后一件事是：无论何时 **FltGetFileNameInformationUnsafe** 调用成功，我们都必须确保获取的路径确实是文件实际存在的路径。此外，我们还需要验证该文件与我们在加载镜像回调中获取的文件是同一个。

#### 总结
理论上，上一篇博客描述的这个Windows内核bug具有潜在危险，可能会欺骗依赖通知机制提供信息的安全产品。这个缺陷似乎源于一个代码编写错误，影响范围从Windows 2000到最新的Windows 10发布版。这意味着，在微软修复此bug之前，安全厂商在Windows环境中开发的产品不能依赖回调通知提供的错误信息。安全厂商必须寻找替代的、更可信的方法来获取通知机制提供的不可靠信息，希望本博客中的研究内容能有所帮助。