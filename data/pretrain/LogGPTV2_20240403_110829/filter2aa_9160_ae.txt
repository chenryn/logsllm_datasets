0339:0000009B  jne  000000A0 ($+3)             (down)                 EAX:00000068 EBX:000000BE ECX:00000000 EDX:000000B4 ESI:00000050 EDI:00000100 EBP:0000091C ESP:00000100 DS:0345 ES:0329 FS:0000 GS:0000 SS:0359 CF:1 ZF:0 SF:1 OF:1 AF:0 PF:1 IF:1
0339:000000A0  mov  dx,0120                                           EAX:00000068 EBX:000000BE ECX:00000000 EDX:000000B4 ESI:00000050 EDI:00000100 EBP:0000091C ESP:00000100 DS:0345 ES:0329 FS:0000 GS:0000 SS:0359 CF:1 ZF:0 SF:1 OF:1 AF:0 PF:1 IF:1
0339:000000A3  mov  ah,09                                             EAX:00000068 EBX:000000BE ECX:00000000 EDX:00000120 ESI:00000050 EDI:00000100 EBP:0000091C ESP:00000100 DS:0345 ES:0329 FS:0000 GS:0000 SS:0359 CF:1 ZF:0 SF:1 OF:1 AF:0 PF:1 IF:1
0339:000000A5  int  21                                                EAX:00000968 EBX:000000BE ECX:00000000 EDX:00000120 ESI:00000050 EDI:00000100 EBP:0000091C ESP:00000100 DS:0345 ES:0329 FS:0000 GS:0000 SS:0359 CF:1 ZF:0 SF:1 OF:1 AF:0 PF:1 IF:1
F000:0000EB0C  sti                                                    EAX:00000968 EBX:000000BE ECX:00000000 EDX:00000120 ESI:00000050 EDI:00000100 EBP:0000091C ESP:000000FA DS:0345 ES:0329 FS:0000 GS:0000 SS:0359 CF:1 ZF:0 SF:1 OF:1 AF:0 PF:1 IF:0
F000:0000EB0D  callback 0035  (DOS Int 21)                            EAX:00000968 EBX:000000BE ECX:00000000 EDX:00000120 ESI:00000050 EDI:00000100 EBP:0000091C ESP:000000FA DS:0345 ES:0329 FS:0000 GS:0000 SS:0359 CF:1 ZF:0 SF:1 OF:1 AF:0 PF:1 IF:1
```
The debugger output shows `shl` commands while the disassembly showed `shr` commands. What's happening here?
It's time to go back to the CS-modifying instructions we've skipped before:
```assembly
mov word cs:[0x11], 0x27d1
mov word cs:[0x13], 0x27d1
mov word cs:[0x15], 0x701
```
We can see that these instructions are modifying values within the code segment, and specifically within the hash function. Before the commands are executed, the hash function implementation is:
```assembly
0339:00000000 55                  push bp          
0339:00000001 8BEC                mov  bp,sp       
0339:00000003 8B5E06              mov  bx,[bp+06]  
0339:00000006 8B4E08              mov  cx,[bp+08]  
0339:00000009 8A0F                mov  cl,[bx]     
0339:0000000B B400                mov  ah,00       
0339:0000000D 53                  push bx          
0339:0000000E 8B5E04              mov  bx,[bp+04]  
0339:00000011 D12F                shr  word [bx],1 
0339:00000013 D12F                shr  word [bx],1 
0339:00000015 2907                sub  [bx],ax     
```
And after:
```assembly
0339:00000000 55                  push bp          
0339:00000001 8BEC                mov  bp,sp       
0339:00000003 8B5E06              mov  bx,[bp+06]  
0339:00000006 8B4E08              mov  cx,[bp+08]  
0339:00000009 8A0F                mov  cl,[bx]     
0339:0000000B B400                mov  ah,00       
0339:0000000D 53                  push bx          
0339:0000000E 8B5E04              mov  bx,[bp+04]  
0339:00000011 D127                shl  word [bx],1  ; = ord('!'))
    solver.add(key[i] <= ord('~'))
solver.add(hash(key) == 0xcfe1)
if solver.check() == sat:
    res = ""
    m = solver.model()
    print(m)
    for i in range(KEY_LEN):
        res += chr(m[key[i]].as_long())
    print res
```
Output:
```console
root@kali:/media/sf_CTFs/kaf/dkdos# python solve.py
[3 = 57,
 0 = 34,
 1 = 40,
 5 = 34,
 6 = 34,
 4 = 64,
 2 = 33,
 7 = 57]
"(!9@""9
```
In any case, both answers give us the flag:
```console
root@kali:/media/sf_CTFs/kaf/dkdos# nc ctf.kaf.sh 6000
MS-DOS KIPOD SHOP
------------------------------------------------
Wanna buy some KIPODIM?
First, I have to make sure you're allowed to.
Please log in with you password: aaxxxxzy
KAF{D05_15_JU57_700_C00L}
```