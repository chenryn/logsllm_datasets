Scheme
Experimental setup
block size ORAM capacity
processors
private RAM consumed
Results
response time
throughput
Shroud [25]
10 KB
Secure co-processors (IBM 4764), distributed setting
320 TB
10,000*
300 GB
360 ms
28 KB/s
7 HDDs, 50ms network latency to storage, 12ms disk seek latency, single modern processor (client-side)
‡
[6, 47]
‡
[47]
PrivateFS
PD-ORAM
‡
PrivateFS
ObliviStore
[6, 47]
ObliviStore
4 KB
10 KB
4 KB
4 KB
4 KB
100MB
13 GB
1 TB
1
1
1
1s
>1s
191 ms
>1s
196 ms
(peak performance [6])
110 KB/s
†
15 KB/s
757 KB/s
†
20 KB/s
364 KB/s
31.5 MB/s
43.4 MB/s
ObliviStore
ObliviStore
Distributed setting, 20 SSDs, 11 modern processors
1 oblivious load balancer + 10 ORAM nodes (each with 2SSDs directly attached)
4 KB
16 KB
66 ms
276 ms
36 GB
33 GB
3 TB
3 TB
11
11
Table IV: Comparison with related work.
Throughput means average total throughput measured after warming up the ORAM (i.e., the ORAM is in a state that it would be after
O(N ) accesses, where N is the ORAM capacity), unless otherwise indicated.
†: These numbers obtained through personal communication [6] with the authors of PrivateFS [47]. PrivateFS reports the amount of private
memory provisioned (instead of consumed) to be 2GB.
‡: Based on personal communication with the authors, the PrivateFS paper has two sets of experiments: PD-ORAM experiments and
PrivateFS experiments. Based on our understanding: i) PD-ORAM seems to be an older version of PrivateFS; and ii) the experimental
methodology for these two sets of experiments are different.
*: Based on a combination of experimentation and theoretic projection. Due to the constrained I/O bandwidth and computational power
of IBM 4768 secure co-processors, unlike PrivateFS and ObliviStore, Shroud [25] is mainly constrained by the chip I/O, computational
power, and memory available on these off-the-shelf secure co-processors.
performance numbers for ObliviStore.
• PrivateFS also experimented with faster disks, i.e., six
0.4TB 15K RPM SCSI (hardware RAID0) disks. They
report a 2X speedup with these faster HDDs due to the
superior seek time on these drives. We were not able to
obtain the same disks for our experiments, but since disk
seek is our main bottleneck with the HDD experiments,
we expect to see a similar speedup with these faster disks.
VIII. RELATED WORK
Oblivious RAM: theory. Oblivious RAM was ﬁrst pro-
posed by Goldreich and Ostrovsky [14]. They propose a
seminal hierarchical construction with O((log N )3) amor-
tized cost, where N denotes the storage capacity of the
ORAM. This means that to access a block, a client needs
to access O((log N )3) blocks on average to mask from the
server the true block of intent. Since then, a line of research
has been dedicated to ORAM [9, 11, 13–16, 18, 23, 28,
29, 31, 43, 44, 46], most of which build on top of and
improve the original hierarchical construction by Goldreich
and Ostrovsky [14]. Recently, researchers have proposed a
new paradigm for constructing ORAM [35, 40]. By relying
on secure partitioning, this new paradigm breaks an ORAM
into smaller instances, therefore reducing data shufﬂing (i.e.,
oblivious sorting) overhead [40] or completely eliminating
oblivious sorting [35]. Constant round-trip ORAMs have
been studied in seminal works by Goodrich et. al. [17] and
Williams et. al. [45].
Oblivious RAM: bridging theory and practice. Willams,
Sion et. al. have been pioneers in bridging the theory and
practice of ORAM [43, 46, 47]. Goodrich, Mitzenmacher,
Ohrimenko, Tamassia et. al. [17, 18] have also made sig-
niﬁcant contributions to bridging the theory and practice of
ORAM.
Backes et. al. [8] use a combination of the binary-
tree ORAM [35] and trusted hardware to build privacy-
preserving behavioral advertising applications. They demon-
strated a request
latency of 4 to 5 seconds under rea-
266
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:02 UTC from IEEE Xplore.  Restrictions apply. 
sonable parametrization. However, their implementation is
synchronous and all operations are blocking and sequen-
tialized. Backes et. al. reported only latency results, but
no throughput results. Their request latency can be broken
down into an online latency of 750ms for fetching data from
ORAM, and an ofﬂine latency of ∼ 4s for data shufﬂing.
The most closely related works are the independent works
by Williams et. al. [47] (i.e., PrivateFS and PD-ORAM) and
Lorch et. al. [25]. We refer the readers to Section VII-E for
a detailed comparison of these works and ours.
ACKNOWLEDGMENTS
We gratefully acknowledge Dawn Song and Bobby Bhat-
tacharjee for their kind support, Dustin Schnaitman from
Amazon for helping us acquire resources, and Jonathan
Dautrich for helping clarify the pseudocode. We are indebted
to Radu Sion, Peter Williams, Jay Lorch, and Bryan Parno
for patiently discussing the details of PrivateFS/Shroud with
us, so we can make an informed comparison. We would
also like to thank the anonymous reviewers for their in-
sightful comments and suggestions. This material is partially
supported by the National Science Foundation Graduate
Research Fellowship under Grant No. DGE-0946797, and by
the DoD National Defense Science and Engineering Grad-
uate Fellowship. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this material are those of
the author(s) and do not necessarily reﬂect the views of the
funding agencies.
REFERENCES
[1] http://www.storagereview.com/php/benchmark/suite v4.php?typeID=
10&testbedID=4&osID=6&raidconﬁgID=1&numDrives=1&devID
0=368&devCnt=1.
[2] IBM 4764 PCI-X cryptographic coprocessor (PCIXCC).
www-03.ibm.com/security/cryptocards/pcixcc/overview.shtml.
http://
[3] Sloccount. http://www.dwheeler.com/sloccount/.
[4] Ssd
real world.
adoption
the
in
enterprise-insights/2012/08/ssd-adoption.aspx.
http://esj.com/blogs/
[5] Trusted computing group. http://www.trustedcomputinggroup.org/.
[6] Personal communication with Radu Sion and Peter Williams., Nov.
2012.
retrieval. In PET, 2003.
[7] D. Asonov and J.-C. Freytag. Almost optimal private information
[8] M. Backes, A. Kate, M. Maffe, and K. Pecina. Obliviad: Provably
secure and practical online behavioral advertising. In S & P, 2012.
[9] D. Boneh, D. Mazieres, and R. A. Popa. Remote oblivious storage:
Making oblivious RAM practical. Manuscript, http://dspace.mit.edu/
bitstream/handle/1721.1/62006/MIT-CSAIL-TR-2011-018.pdf, 2011.
[10] R. Chow, P. Golle, M. Jakobsson, E. Shi, J. Staddon, R. Masuoka,
and J. Molina. Controlling data in the cloud: outsourcing computation
without outsourcing control. In CCSW, 2009.
[11] I. Damg˚ard, S. Meldgaard, and J. B. Nielsen.
Perfectly secure
oblivious RAM without random oracles. In TCC, 2011.
[12] C. W. Fletcher, M. v. Dijk, and S. Devadas. A secure processor
In
architecture for encrypted computation on untrusted programs.
STC, 2012.
[13] O. Goldreich. Towards a theory of software protection and simulation
by oblivious RAMs. In STOC, 1987.
[14] O. Goldreich and R. Ostrovsky. Software protection and simulation
on oblivious RAMs. J. ACM, 1996.
[15] M. T. Goodrich and M. Mitzenmacher. Privacy-preserving access of
outsourced data via oblivious RAM simulation. In ICALP, 2011.
[16] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia.
Oblivious RAM simulation with efﬁcient worst-case access overhead.
In ACM Cloud Computing Security Workshop (CCSW), 2011.
[17] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia.
Practical oblivious storage. In CODASPY, 2012.
[18] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia.
Privacy-preserving group data access via stateless oblivious RAM
simulation. In SODA, 2012.
[19] A. Iliev and S. Smith. Towards tiny trusted third parties. Technical
report, 2005.
[20] A. Iliev and S. W. Smith. Protecting client privacy with trusted
IEEE Security and Privacy, 3(2):20–28,
computing at the server.
Mar. 2005.
[21] M. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure
on searchable encryption: Ramiﬁcation, attack and mitigation.
In
Network and Distributed System Security Symposium (NDSS), 2012.
[22] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin,
D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell,
H. Tuch, and S. Winwood. sel4: formal veriﬁcation of an os kernel.
In SOSP, 2009.
[23] E. Kushilevitz, S. Lu, and R. Ostrovsky. On the (in)security of hash-
based oblivious RAM and a new balancing scheme. In SODA, 2012.
[24] J. Liedtke. On micro-kernel construction. In SOSP, 1995.
[25] J. R. Lorch, B. Parno, J. W. Mickens, M. Raykova, and J. Schiffman.
Shroud: Ensuring private access to large-scale data in the data center.
FAST, 2013:199–213, 2013.
[26] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. D. Gligor, and
A. Perrig. Trustvisor: Efﬁcient TCB reduction and attestation. In S
& P, 2010.
[27] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki.
In
Flicker: An execution infrastructure for TCB minimization.
EuroSys, 2008.
[28] R. Ostrovsky. Efﬁcient computation on oblivious RAMs.
In ACM
Symposium on Theory of Computing (STOC), 1990.
[29] R. Ostrovsky and V. Shoup. Private information storage (extended
abstract). In STOC, pages 294–303, 1997.
[30] D.
Perry.
HDD
ssd-hdd-solid-state-drive-hard-disk-drive-prices,14336.html, 2011.
prices.
prices
than
http://www.tomshardware.com/news/
falling
faster
SSD
[31] B. Pinkas and T. Reinman. Oblivious RAM revisited. In CRYPTO,
[32] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and
implementation of a TCG-based integrity measurement architecture.
In USENIX Security Symposium, 2004.
[33] N. Santos, R. Rodrigues, K. P. Gummadi, and S. Saroiu. Policy-sealed
data: a new abstraction for building trusted cloud services. In Usenix
Security, 2012.
[34] J. Schiffman, T. Moyer, H. Vijayakumar, T. Jaeger, and P. McDaniel.
Seeding clouds with trust anchors. In CCSW, pages 43–46, 2010.
[35] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li. Oblivious RAM with
O((log N )3) worst-case cost. In ASIACRYPT, pages 197–214, 2011.
[36] S. W. Smith. Outbound authentication for programmable secure
coprocessors. In ESORICS, 2002.
[37] S. W. Smith and D. Safford. Practical server privacy with secure
coprocessors. IBM Syst. J., 40(3):683–695, Mar. 2001.
[38] S. W. Smith and S. Weingart. Building a high-performance, pro-
grammable secure coprocessor. Comput. Netw., 31(9):831–860, 1999.
[39] E. Stefanov and E. Shi. ObliviStore: High performance oblivious
cloud storage. Technical report.
[40] E. Stefanov, E. Shi, and D. Song. Towards practical oblivious RAM.
In NDSS, 2012.
[41] E. Stefanov, M. van Dijk, A. Oprea, and A. Juels. Iris: A scalable
cloud ﬁle system with efﬁcient integrity checks. In ACSAC, 2012.
[42] U. Steinberg and B. Kauer. Nova: a microhypervisor-based secure
virtualization architecture. In EuroSys, 2010.
[43] P. Williams and R. Sion. Usable PIR. In NDSS, 2008.
[44] P. Williams and R. Sion. Round-optimal access privacy on outsourced
2010.
storage. In CCS, 2012.
storage. In CCS, 2012.
[45] P. Williams and R. Sion. Single round access privacy on outsourced
[46] P. Williams, R. Sion, and B. Carbunar. Building castles out of mud:
practical access pattern privacy and correctness on untrusted storage.
In CCS, 2008.
[47] P. Williams, R. Sion, and A. Tomescu. Privatefs: A parallel oblivious
ﬁle system. In CCS, 2012.
[48] K. Zhang, X. Zhou, Y. Chen, X. Wang, and Y. Ruan. Sedic: privacy-
aware data intensive computing on hybrid clouds. In CCS, 2011.
267
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:02 UTC from IEEE Xplore.  Restrictions apply.