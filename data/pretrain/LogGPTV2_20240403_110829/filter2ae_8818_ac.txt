ptt 利用
    Certify.exe request /ca:"CA01.corp.qihoo.cn\corp-CA01-CA" /template:ESC3_2 /onbehalfof:administrator /enrollcert:esc3_1.pfx /enrollcertpw:123456
可看到证书颁发给了 administrator
#### EDITF_ATTRIBUTESUBJECTALTNAME2 滥用
一些企业因业务需求会把颁发 CA + `EDITF_ATTRIBUTESUBJECTALTNAME2` 来启用 SAN
(主题备用名)，从而允许用户在申请证书时说明自己身份。例如 [CBA for Azure
AD](https://samilamppu.com/2017/01/21/cba-for-azure-ad/) 场景中证书通过 NDES
分发到移动设备，用户需要使用 RFC 名称或主体名称作为 SAN 扩展名来声明自己的身份。
至此利用手段与第一种一样均可伪造身份，区别在于一个是证书属性，一个是证书扩展。
  * 企业CA授予低权限用户请求权限（默认）
  * 模板中CA管理员审批未启用（默认）
  * 模板中不需要授权的签名（默认）
  * **CA +EDITF_ATTRIBUTESUBJECTALTNAME2**
通过远程注册表判断 CA 是否开启 SAN 标识
    certutil -config "CA01.corp.qihoo.cn\corp-CA01-CA" -getreg "policy\EditFlags"
手动创建利用证书请求
    certreq –new usercert.inf certrequest.req
    #usercert.inf
    [NewRequest]
    KeyLength=2048
    KeySpec=1
    RequestType = PKCS10
    Exportable = TRUE 
    ExportableEncrypted = TRUE
    [RequestAttributes]
    CertificateTemplate=USER
利用 req 请求上步得到 .cer 含公钥证书，其他字段可翻阅[官方文档](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn296456\(v=ws.11\))
    certreq -submit -config "CA01.corp.qihoo.cn\corp-CA01-CA" -attrib "SAN:upn=PI:EMAIL" certrequest.req certrequest.cer
将 .cer 导入机器后连同私钥导出为 .pfx ，同样顺利通过 ptt 认证。
### 2\. 访问权限
前面提到，证书模板和证书颁发机构是 AD 中的安全对象，这意味着安全描述符同样可用来指定哪些主体对他们具有特定的权限，详细内容可阅读 ACL 相关文档。
在对应设置中安全选项可用于对用户的权限进行相关设置，我们关注5种权限
权限 | 描述  
---|---  
Owner | 对象所有人，可以编辑任何属性  
Full Control | 完全控制对象，可以编辑任何属性  
WriteOwner | 允许委托人修改对象的安全描述符的所有者部分  
WriteDacl | 可以修改访问控制  
WriteProperty | 可以编辑任何属性  
#### 模板访问权限配置错误
例如我们已经拿下整个域想借助证书模板进行权限维持，那我们可对一个无害正常模板进行相关 ACL 添加
  * NT AUTHORITY\Authenticated Users -> WriteDacl
  * NT AUTHORITY\Authenticated Users -> WriteProperty
当我们重新回到域内通过密码喷洒等手段再次拿到任意一个用户凭据后，即可将该无害模板变成我们可以利用的提权模板
  * msPKI-Certificates-Name-Flag -edit-> ENROLLEE_SUPPLIES_SUBJECT (WriteProperty)
  * msPKI-Certificate-Application-Policy -add-> 服务器身份验证 (WriteProperty)
  * mspki-enrollment-flag -edit-> AUTO_ENROLLMENT (WriteProperty)
  * Enrollment Rights -add-> Control User (WriteDacl)
随后利用恶意模板进行 **CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT** 提权利用，可拿到 administrator
的证书凭据即可 ptt ，相比 Certify ，certi 是可以在域外使用的。
#### PKI 访问权限配置错误
如果低特权的攻击者可以对 `CN=Public Key Services,CN=Services,CN=Configuration,DC=,DC=`
控制，那么攻击者就会直接控制 PKI 系统 (证书模板容器、证书颁发机构容器、NTAuthCertificates对象、注册服务容器等)。
将 `CN=Public Key Services,CN=Services,CN=Configuration` 添加 CORP\zhangsan 用户对其
GenericAll 的权限
此时我们可以滥用权限创建一个新的恶意证书模板来使用进行前面相关的域权限提升方法。
#### CA 访问权限配置错误
CA 本身具有一组安全权限用于权限管理
我们主要关注 **ManageCA** ， **ManageCertificates** 两种权限
权限 | 描述  
---|---  
Read | 读取 CA  
ManageCA | CA 管理员  
Issue and manage certificates | 证书管理  
Request certificates | 请求证书，默认拥有  
**利用面一：隐藏 CA 申请记录**
在拿到域管权限或拥有 PKI 操作权限后创建一个恶意证书模板
使用 **CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT** 姿势获取到 administrator 的 pfx 证书用于权限维持
(用户状态异常无法利用该证书)
我们出于隐蔽考虑可删除模板并利用拥有 ManageCA 权限的 zhangsan 调用 COM 接口 `ICertAdminD2::DeleteRow` 从
CA 数据库中删除申请的证书痕迹
运维人员是无法从证书控制台观察到我们的证书申请记录并无法吊销证书。只要 administrator 用户不过期，证书不过期即可一直使用，即使用户密码更改。
**利用面二：修改 CA 属性用于证书提权**
当我们拥有 ManageCA 权限下调用 `ICertAdminD2::SetConfigEntry` 来修改 CA
的配置数据，例如`Config_CA_Accept_Request_Attributes_SAN` 的bool型数据从而开启 CA 的
`EDITF_ATTRIBUTESUBJECTALTNAME2`
此时可参考前面 **EDITF_ATTRIBUTESUBJECTALTNAME2** 证书提权滥用拿到域控制权
**利用面三：自己审批证书注册**
在证书模板设置时，部分运维会出于安全考虑将模板发布要求设置为 CA 证书管理员审批，管理员就会在 `certsrv.msc` 上进行确认
当拥有 ManageCertificates 权限时，可调用 `ICertAdminD::ResubmitRequest`
去给需要审核的滥用证书进行批准放行。
### 3\. 其他利用
#### Golden Certificates
使用偷来的证书颁发机构 (CA) 证书以及私钥来为任意用户伪造证书，这些用户可以对活动目录进行身份验证， **因为签署颁发证书的唯一密钥就是 CA
的私钥** 。
当我们获取到 CA 服务器时，通过 mimikatz 或
[SharpDPAPI](https://github.com/GhostPack/SharpDPAPI) 项目提取任何不受硬件保护的 CA 证书私钥。
    SharpDPAPI4.exe certificates /machine 
使用 openssl 转化格式后，利用 [ForgeCert](https://github.com/GhostPack/ForgeCert) 或
[pyForgeCert](https://github.com/Ridter/pyForgeCert) 进行证书构造，故含私钥的 CA 为“黄金证书”。
#### NTLM Relay to ADCS HTTP Endpoints
该利用方式是因为 http 的证书注册接口易受 NTLM Relay 攻击所导致的。NTLM 相关利用文章有很多，例如
CVE-2018-8581、CVE-2019-1040、Printerbug 等这里不再介绍。
PetitPotam 可以指定域内的一台服务器，使其对指定目标进行身份验证。当目标为低版本 (16以下) 时，可以做到匿名触发。
通过调用 `MS-EFSRPC` 相关函数到域控，使域控发送请求我们的监听，我们将获取到的 NTLM Relay 到 ADCS 的 Web 注册页面。
通过域控机器用户 NTLM 凭据向 web 服务注册证书，成功得到域控机器账户的Encode Base64 证书。
利用 kekeo 进行 ask tgt 成功拿到 DC$ 权限进行 Dcsync。
## 0x04 写在后面
ADCS 相关利用手段在实战场景中权限提升，权限维持非常便捷。针对 ADCS 的防御方案在白皮书也有详细提到，这里就不详细写了。
部分解决方案有提到微软的三层架构：
核心思想就是你是什么用户就访问怎样的资产，无法向下级访问且向上访问会告警。那么 CA 、ADCS 服务器的本地管理员组、PKI
和证书模板所拥有者都应该处于0层。
最后灵腾实验室长期招聘高级攻防专家，高级安全研究员，感兴趣可发送简历至g-linton-lab[AT]360.cn
## 0x05 参考链接
* * *