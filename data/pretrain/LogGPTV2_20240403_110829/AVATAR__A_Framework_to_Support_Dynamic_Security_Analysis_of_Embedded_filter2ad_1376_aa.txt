title:AVATAR: A Framework to Support Dynamic Security Analysis of Embedded
Systems' Firmwares
author:Jonas Zaddach and
Luca Bruno and
Aur&apos;elien Francillon and
Davide Balzarotti
Avatar: A Framework to Support Dynamic Security
Analysis of Embedded Systems’ Firmwares
Jonas Zaddach, Luca Bruno, Aur´elien Francillon and Davide Balzarotti
EURECOM
{ﬁrstname.lastname}@eurecom.fr
Abstract—To address the growing concerns about the security
of embedded systems, it is important to perform accurate analysis
of ﬁrmware binaries, even when the source code or the hardware
documentation are not available. However, research in this ﬁeld
is hindered by the lack of dedicated tools. For example, dynamic
analysis is one of the main foundations of security analysis, e.g.,
through dynamic taint tracing or symbolic execution. Unlike
static analysis, dynamic analysis relies on the ability to execute
software in a controlled environment, often an instrumented
emulator. However, emulating ﬁrmwares of embedded devices
requires accurate models of all hardware components used by the
system under analysis. Unfortunately, the lack of documentation
and the large variety of hardware on the market make this
approach infeasible in practice.
In this paper we present Avatar, a framework that enables
complex dynamic analysis of embedded devices by orchestrating
the execution of an emulator together with the real hardware. We
ﬁrst introduce the basic mechanism to forward I/O accesses from
the emulator to the embedded device, and then describe several
techniques to improve the system’s performance by dynamically
optimizing the distribution of code and data between the two
environments. Finally, we evaluate our tool by applying it to
three different security scenarios, including reverse engineering,
vulnerability discovery and hardcoded backdoor detection. To
show the ﬂexibility of Avatar, we perform this analysis on three
completely different devices: a GSM feature phone, a hard disk
bootloader, and a wireless sensor node.
I.
INTRODUCTION
An embedded system consists of a number of interdepen-
dent hardware and software components, often designed to
interact with a speciﬁc environment (e.g., a car, a peacemaker,
a television, or an industrial control system). Those compo-
nents are often based on basic blocks, such as CPUs and
bus controllers, which are integrated into a complete custom
system. When produced in large quantities, such customization
results in a considerable cost reduction. For large quantities,
custom built integrated circuits (ASIC) are preferred as they
allow to tailor functionality according to the speciﬁc needs,
which results in cost reduction, better integration, and a
reduction of the total number of parts. Such chips, also called
System on a Chip (SoC), are often built from a standard CPU
core to which both standard and custom hardware blocks are
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1)Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:19)(cid:26)
added. Standard blocks, commonly called IP Cores, are often
in the form of a single component that can be integrated
into a more complex design (e.g., memory controllers or
standard peripherals). On the other hand, custom hardware
blocks are often developed for a speciﬁc purpose, device,
and manufacturer. For example, a mobile phone modem may
contain a custom voice processing DSP, an accelerator for the
GSM proprietary hardware cryptography (A5 algorithms) and
an off-the-shelf USB controller.
Over the years, such SoCs have signiﬁcantly grown in
complexity. Nowadays, they often include Multiple Processors
(MPSoC) and complex, custom, hardware devices. As a conse-
quence, virtually every embedded system relies on a different,
application speciﬁc, system conﬁguration. As a witness of this
phenomenon, the website of ARM Ltd., which provides one
of the most common CPU core used in embedded systems,
lists about 200 silicon partners1. Most of those partners are
producing several product families of SoCs relying on ARM
cores. This leads to a huge number of systems on the market,
which are all different, but all rely on the same CPU core
family.
Unfortunately, the increasing pervasiveness and connectiv-
ity of embedded devices signiﬁcantly increased their exposure
to attacks and misuses. Such systems are often designed
without security in mind. Moreover visible features, low time
to market, and reduction of costs are the common driving
forces of their engineering teams. As a consequence, an
increase in the number of reports of embedded systems ex-
ploitation has been recently observed, often with very serious
consequences [8], [11], [12], [19], [23], [25], [44], [46], [54],
[60]. To make things worse, such systems frequently play an
important role in security-relevant scenarios: they are often part
of safety critical systems, integrated in home networks, or they
are responsible to handle personal user information. Therefore,
it
to develop the tools and techniques
that would make easier to analyze the security of embedded
systems.
is very important
In the traditional IT world, dynamic analysis systems play a
crucial role in many security activities - ranging from malware
analysis and reverse engineering, to vulnerability discovery and
incident handling. Unfortunately, there is not an equivalent
in the embedded system world. If an attacker compromises
the ﬁrmware of a device (e.g., a smart meter or a PLC in a
Stuxnet-like attack scenario [25]) even vendors often do not
have the required tools to dynamically analyze the behavior of
the malicious code.
1http://www.arm.com/community/partners/silicon.php
Dynamic analysis allows users to overcome many limita-
tions of static analysis (e.g., packed or obfuscated code) and to
perform a wide range of more sophisticated examinations [24]
- including taint propagation [33], [55], symbolic and concolic
execution [10], [15], [22], unpacking [34], malware sandbox-
ing [1], [5], and whitebox fuzzing [28], [29].
Unfortunately, all these techniques and their beneﬁts are
still not available in the world of embedded systems. The
reason is that in the majority of the cases they require an
emulator to execute the code and possibly monitor or alter its
execution. However, as we will explain in Section II, the large
number of custom and proprietary hardware components make
the task of building an accurate emulator a daunting process. If
we then consider that additional modules and hardware plugins
should be developed for each embedded system on the market,
we can easily understand the infeasibility of this approach.
In this paper, we present a technique to ﬁll this gap and
overcome the limitation of pure ﬁrmware emulation. Our tool,
named Avatar, acts as an orchestration engine between the
physical device and an external emulator. By injecting a special
software proxy in the embedded device, Avatar can execute the
ﬁrmware instructions inside the emulator while channeling the
I/O operations to the physical hardware. Since it is infeasible to
perfectly emulate an entire embedded system and it is currently
impossible to perform advanced dynamic analysis by running
code on the device itself, Avatar takes a hybrid approach.
It leverages the real hardware to handle I/O operations, but
extracts the ﬁrmware code from the embedded device and
emulates it on an external machine.
To summarize, in this paper we make the following con-
tributions:
• We present the design and implementation of Avatar,
a novel dynamic analysis framework that allows a user
to emulate the ﬁrmware of an embedded device.
• We discuss several techniques that can be used to
optimize the performance of the system and to adapt
Avatar to the user’s needs. We also show how com-
plex dynamic analysis applications (such as concolic
execution) can be implemented on top of Avatar.
• We evaluate Avatar by applying it to three different
security scenarios, including reverse engineering, vul-
nerability discovery, and backdoor detection. To show
the ﬂexibility of our system, each test was performed
on a completely different class of devices.
II. DYNAMIC FIRMWARE ANALYSIS
While the security analysis of ﬁrmwares of embedded
devices is still a new and emerging ﬁeld, several techniques
have been proposed in the past to support the debugging and
troubleshooting of embedded systems.
Hardware debugging features (mostly built around In-
Circuit Emulators [13], [35], [42] and JTAG-based hardware
debuggers [3]) are nowadays included in many embedded
devices to simplify the debugging procedure. However, the
analysis remains extremely challenging and often requires ded-
icated hardware and a profound knowledge of the system under
test. Several debugging interfaces exist, like the Background
Debug Mode (BDM) [58] and the ARM CoreSight debug and
trace technology [58]. Architecture-independent standards for
debugging embedded devices also exist, such as the IEEE
NEXUS standard [4]. Most of these technologies allow the user
to access, copy, and manipulate the state of the memory and
of the CPU core, to insert breakpoints, to single step through
the code, and to collect instructions or data traces.
When available, hardware debugging interfaces can be used
to perform certain types of dynamic analysis. However, they
are often limited in their functionalities and do not allow the
user to perform complex operations, such as taint propaga-
tion or symbolic execution. In fact, these advanced dynamic
analysis techniques require an instruction set simulator to
interpret the ﬁrmware of the embedded target. But for a proper
emulation of the embedded system, not only the CPU, but
all peripheral devices need to be emulated. Without such a
support, the emulated ﬁrmware would often hang, crash, or
in the best case, show a different behavior than on the real
hardware. Such deviations can be due, for example, to incorrect
memory mappings, active polling on a value that should be
changed by the hardware, or the lack of the proper hardware-
generated interrupts or DMA operations.
To overcome these problems, researchers and engineers
have resolved to three classes of solutions, each with its own
limitations and drawbacks:
•
•
Complete Hardware Emulation
Chipounov [14] and Kuznetsov et al. [37] analyze
device drivers by relying on an emulated PCI bus
and network card that return symbolic values. This
approach has the main drawback that it requires to
emulate the device properly. While this is not much
of a problem for well understood devices, like a PCI
network card supported by most PC emulation soft-
ware, it can be a real challenge in embedded systems
and can be just impossible when the hardware is not
documented. Unfortunately, lack of documentation is
the rule in the embedded world, especially in complex
proprietary SoCs.
In some cases, accurate system emulators are devel-
oped as part of the product development to allow the
ﬁrmware development team to develop software while
the ﬁnal hardware is still not available. However, those
emulators are usually unavailable outside the develop-
ment team and they are often not designed for code
instrumentation, making them unable to perform basic
security analysis like tainting or symbolic execution.
Hardware Over-Approximation
Another approach consists in using a generic, ap-
proximated, model of the hardware. For example, by
assuming interrupts can happen at any time or that
reading an IO port can return any value. This approach
is easy to implement because it does not require
a deep knowledge of the real hardware, but it can
clearly lead to false positives, (e.g., values that will
never be returned by the real system) or misbehavior
of the emulated code (when a particular value is
required). This approach is commonly used when an-
alyzing small systems and programs that are typically
limited to a few hundreds lines of code, as showed
2
•
by Schlich [49] and Davidson et al. [22]. However,
on larger programs and on complex peripherals this
approach will invariably lead to a state explosion that
will prevent any useful analysis.
Firmware Adaptation
Another approach consists in adapting the ﬁrmware
(or in extracting limited parts of its code) in order
to emulate it in a generic emulator. While this is
possible in some speciﬁc cases, for example with
Linux-based embedded devices, this technique does
not allow for an holistic analysis and may still be
limited by the presence of custom peripherals. More-
over,
this approach is not possible for monolithic
ﬁrmwares that cannot be easily split into independent
parts - unfortunately a very common case in low-end
embedded systems [20].
In the next section we present our novel hybrid technique
based on a combination of the actual hardware with a generic
CPU emulator. Our approach allows to perform advanced
dynamic analysis of embedded systems, even when very little
information is available on their ﬁrmware and hardware, or
when basic hardware debugging support is not available. This
opens the possibility to analyze a large corpus of devices on
which dynamic analysis was not possible before.
III. AVATAR
Avatar2 is an event-based arbitration framework that or-
chestrates the communication between an emulator and a target
physical device.
Avatar’s goal is to enable complex dynamic analysis of
embedded ﬁrmware in order to assist in a wide range of
security-related activities including (but not limited to) re-
verse engineering, malware analysis, vulnerability discovery,
vulnerability assessment, backtrace acquisition and root-cause
analysis of known test cases.
A. System Architecture
The architecture of the system is summarized in Figure 1:
the ﬁrmware code is executed inside a modiﬁed emulator,
running on a traditional personal computer. Any IO access is
then intercepted and forwarded to the physical device, while
signals and interrupts are collected on the device and injected
into the emulator.
The internal architecture is completely event-based, allow-
ing user-deﬁned plugins to tap into the data stream and even
modify the data as it ﬂows between the emulator and the target.
In the simplest case Avatar requires only a backend to
talk to the emulator and one to talk to the target system,
but more plugins can be added to automate, customize, and
enhance the ﬁrmware analysis. In our prototype, we developed
a single emulator backend. This controls S2E (or Selective
Symbolic Execution engine), which is an open-source platform
for selective symbolic execution of binary code [15]. It builds
on the foundation of Qemu, a very popular open-source system
emulator [7]. Qemu supports many processor families such as
i386, x86-64, Arm, Mips and many others. Apart from being
a processor emulator, Qemu can also mimic the behavior of
many hardware devices that are typically attached to the central
processor, such as serial ports, network cards, displays, etc.
S2E leverages the intermediate binary code representation
of Qemu called Tiny Code Generator (TCG), and dynamically
translates from TCG bytecode to Low-Level Virtual Machine
(LLVM) bytecode whenever symbolic execution is active [39].
KLEE, the actual symbolic execution engine, is then taking
care of exploring the different execution paths and keeps track
of the path constraints for each symbolic value [10]. Evaluating
possible states exhaustively, for some symbolic input, can be
assimilated to model checking and can lead to proving some
property about a piece of software [38].
Even though S2E uses the TCG representation of the binary
code to generate LLVM code, each processor architecture has
its own intricacies that make it necessary to write architecture
speciﬁc extensions to make S2E work with a new processor
architecture. Since our focus was on embedded systems and
all the systems we analyzed are ARM systems, we updated