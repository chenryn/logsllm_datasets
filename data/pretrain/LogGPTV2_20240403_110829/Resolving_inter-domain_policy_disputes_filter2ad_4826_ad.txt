indicates whether the chosen route is the most preferred: if
not, then its value increases. No additional information is
revealed compared to BGP today: given the inputs, a route
is not the most preferred if it is not advertised.
For routes stored in history, all have been previously ad-
vertised before and have been intended to be used for rout-
ing, none have been explicitly propagated for purposes of
eliminating oscillations. Route numbers indicate the routers
having policy conﬂicts and do not contain any more infor-
mation. Thus, we do not expose any additional ISP policies.
3. No requirement for global knowledge: Dispute
detection operates solely on route advertisements received
from neighbors, and are fully decentralized. No third party
is required to gather and compute optimal routes for all
ISPs. The route numbers are propagated upstream only for
the purposes of troubleshooting, and do not aﬀect nodes
elsewhere, including other parts of the wheel.
4. Identiﬁcation of potential pivot nodes: Although
it is possible to use some other unique number as the route
number, we believe that inclusion of the router IP or AS
number gives the right amount of visibility to assist in net-
work troubleshooting. If a node is forced to select a less pre-
ferred route, it appends its route number to those already
associated with the selected route, otherwise the existing
numbers are propagated unchanged. Thus, the set of nodes
identiﬁed by the list of numbers includes all potential piv-
ots encountered downstream. Although not all pivots along
the wheel can be identiﬁed from a single viewpoint, adjust-
ment of just one such node’s preferences is suﬃcient to break
the dispute, reducing global precedence values and relaxing
constraints on route selection.
(a) Incoming routes P2:0 and P1:1
(b)
AS Path
Global
Precedence
Local
Precedence
Feasible
P0
P3
...
Pn−2
Pn−1
1
0
...
0
1
0
1
...
1
1
true
true
...
false
true
AS Path
Global
Precedence
Local
Precedence
Feasible
P0
P1
P2
P3
...
Pn−2
Pn−1
1
1
0
0
...
0
1
Outgoing route P2:1
0
1
1
1
...
1
1
true
true
true
false
...
false
true
Figure 12: (a) Before and (b) after a history table is
updated. The routes with the lowest global values
are ﬁrst selected, after which ties are broken using
the BGP decision process of today. Only feasible
routes can be chosen.
if route from neighbor N is ﬁltered then
set previous feasible route Rp from N infeasible
else if diﬀerent route received from neighbor N then
if not feasible then
remove entry
else if same route received from neighbor then
set previous route Rp from N infeasible
compute R’s local precedence
insert R into history table, set feasible
if previous feasible route Rp (cid:2)= R then
1: let current router counter be Cc
2: if local routing has converged then
for each entry in history table do
3:
4:
5:
6: for each route R received do
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22: select set S of eligible routes
with lowest global precedence, S(cid:1) ⊂ S
23: select set S(cid:1)
24: select route R with lowest local precedence, R ∈ S(cid:1)
25: if local precedence of R (cid:2)= 0 then
associate with R the router counter C ← Cc + 1
26:
27: return R
compute R’s local precedence
insert R into history table, set feasible
else if ﬁrst route R is received from neighbor then
set Rp infeasible
else
update R’s global precedence value
set R feasible
Figure 13: Pseudo-code for updating history table
and determination of the selected route for each des-
tination.
6. ROUTER CHANGES
In this section we describe extensions to a BGP router
necessary to implement our solution. We elaborate on the
primary additional components, including the history table,
router counter, and the adaptive convergence window, in
this section.
6.1 History Table
The history table stores routes received from neighbors, as
well as information necessary for dispute detection. Mem-
ory used to store routes may be shared amongst the diﬀerent
data structures, and is dependent on actual implementation.
Thus, the history table can be thought of as an extension to
other structures. We call a route currently available and ad-
vertised by a neighboring router feasible. Routes that have
recently been withdrawn, but which has not timed out and
hence still present in the history table are called infeasible.
Figure 12 shows an example of a history table being up-
dated, and Figure 13 provides the pseudo-code. Entries in
the table are sorted in order of local precedence, that is, the
ordering is determined using the same rules as the BGP de-
1: let incoming route be Ri
2: let associated router counter be Ci
3: let current largest encountered router counter be Cc
4: if Ri includes current AS (i.e. loop) then
5:
6: (Note: routes ﬁltered due to policies are still considered.)
7: Cc ← max(Cc, Ci)
return
Figure 14: Pseudo-code for updating router counter
for each destination preﬁx.
cision process in use today. This ordering provides the local
precedence value: the most locally preferred has value 0, the
rest have value 1.
6.2 Router Counter
A router counter is associated with each destination pre-
ﬁx, and is initialized and has a lower bound value of 1.
As shown in the pseudo-code (Figure 14),
it is updated
with each incoming route, and cleared whenever routing is
deemed to have converged. The router counter is advertised
together with the associated route only when the router is
in the detection phase (§5.1), and when it advertises a route
with incremented precedence value, that is, when it may be
a pivot node.
6.3 Adaptive Convergence Window
As elaborated in §5, infeasible routes are kept in mem-
ory for a period of time in order to detect disputes. We
call this period of time the convergence window. Assum-
ing that one-hop route propagation delay W is similar to
the Minimum Route Advertisement Interval (MRAI), the
window size should be proportional to the number of nodes
traversed by the router counter value (Cr), or W Cr.
The convergence window begins with a short duration
(one MRAI), so that networks not containing disputes can
converge relatively quickly. At the end of each convergence
window, any updates to the advertised route implies that
routing has not converged, and the next window is set to be
the size of the current Cr. Lastly, the window size is reset
after the network converges.
7. EVALUATION
We next evaluate the performance of our solution, describ-
ing our simulator, methodology as well as the performance
metrics used.
7.1 Simulator
We built an event-based, packet-level and asynchronous
simulator. Route updates are batched, and take place every
Minimum Route Advertisement Interval (MRAI). Figure ??
shows the main steps of the batch update process, whereas
Figures 13 and 14 describe maintenance of the history and
router counters respectively. We set MRAI to 30 seconds,
processing delay jitter to 1 second, and link propagation
delay to 10 milliseconds.
7.2 Metholodgy
To better understand the basic performance of our solu-
tion, we use simple graphs, which consist only of rim, pivot
and destination nodes. Whilst these graphs are not repre-
sentative of a real network in general, they are still useful in
determining properties of a dispute wheel.
To evaluate the eﬀectiveness of our solution in practice, we
use an AS-level network topology constructed using routing
t
)
s
e
u
n
m
i
(
e
m
i
t
e
c
n
e
g
r
e
v
n
o
C
 12
 10
 8
 6
 4
 2
 0
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
C.d. 2
C.d. 4
C.d. 6
 0
 1
 2
 3
 4
 5
 6
Number of rim nodes between consecutive pivots
 1
 1.2
 1.6
 1.4
Route Length Inflation Ratio
 1.8
 2
 2.2
 2.4
Figure 15: Simple graphs: 3-pivot network’s conver-
gence time against rim-to-pivot ratio.
table dumps from RouteViews [13]. Route dumps from Jan-
uary 3rd 2007 were used to construct an AS-level network
which consists of 24307 ASes and 56914 inter-AS links. Since
complete policy information is impossible to obtain [3, 15],
we sought an alternative method of generating local prefer-
ences. Restricting ourselves to next hop preferences, we note
that a dispute-free conﬁguration can be obtained as long as
the most preferred neighbor lies along a cycle-free path to
the destination. Thus, a shortest-path algorithm will gener-
ate local preferences that can guarantee convergence.
However, inter-domain routing typically does not result in
shortest paths [16], and as we show later, the network con-
vergence time as well as the degree of route exploration (and
hence the number of routes encountered) are dependent on
the ratio of actual versus shortest path lengths (i.e. route in-
ﬂation). Thus, we focus on routing algorithms that provide
approximately the same route inﬂation. We use a combi-
nation of depth-limited and breadth-ﬁrst searches to obtain
routing trees: depth-limited search is used whilst within the
limit at each stage, otherwise breadth-ﬁrst search is used.
In general, increasing the maximum depth at each stage re-
sults in greater route path inﬂation. The remaining neigh-
bors’ preferences are set in a random fashion. Finally, we
simulated misconﬁgurations by selecting a subset of routers
and randomly assigning local preferences.
7.3 Metrics
We use convergence time and memory requirement as met-
rics. We say that a node has converged at a certain time if
its routing table no longer changes thereafter. As for mem-
ory requirements, we look at the ratio of routes stored when
using our solution against normal BGP. This allows compar-
ison across the entire network, taking into account routers
with varying numbers of neighbors.
7.4 Results
Simple graphs: Using simple graphs, we determined
that the convergence time is dependent on the rim-to-pivot
ratio and not the total size of the network. We show rep-
resentative results in Figure 15, where the number of pivot
nodes is 3. Each data point in the ﬁgure is obtained from 20
samples; we see that the mean convergence time increases
with this ratio, and there is little deviation in all cases. In
all experiments the networks converged.
RouteView graph: We varied the maximum depth of
each constrained depth-ﬁrst iteration, obtaining the mean
route length inﬂation ratios shown in Figure 16. A maxi-
Figure 16:
Increase in the maximum depth of
constrained depth-ﬁrst routing results in inﬂated
routes.
n
o
i
t
c
a
r
F
e
v
i
t
l