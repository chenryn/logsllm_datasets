    `早期 kdump`{.literal} 功能：
    ``` literallayout
    # cat /proc/cmdline
    BOOT_IMAGE=(hd0,msdos1)/vmlinuz-4.18.0-187.el8.x86_64 root=/dev/mapper/rhel-root ro crashkernel=auto resume=/dev/mapper/rhel-swap rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet rd.earlykdump
    # journalctl -x | grep early-kdump
    Mar 20 15:44:41 redhat dracut-cmdline[304]: early-kdump is enabled.
    Mar 20 15:44:42 redhat dracut-cmdline[304]: kexec: loaded early-kdump kernel
    ```
:::
::: itemizedlist
**其它资源**
-   `/usr/share/doc/kexec-tools/early-kdump-howto.txt`{.literal} file
-   [什么是早期 kdump
    支持？如何配置它？](https://access.redhat.com/solutions/3700611){.link}
-   [启用和禁用 kdump
    服务](#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#enabling-and-disabling-the-kdump-service_configuring-kdump-on-the-command-line "启用和禁用 kdump 服务"){.link}
:::
:::
:::
[]{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel}第 17 章 使用内核实时修补程序应用补丁 {.title}
:::
您可以使用 Red Hat Enterprise Linux
内核实时修补解决方案在不重启或者重启任何进程的情况下对运行的内核进行补丁。
使用这个解决方案，系统管理员需要：
::: itemizedlist
-   可以在内核中立即应用重要的安全补丁。
-   不必等待长时间运行的任务完成、关闭或调度停机时间。
-   可以控制系统的正常运行时间，且不会牺牲安全性和稳定性。
:::
请注意，并非所有关键或重要的 CVE
都使用内核实时补丁解决方案来解决。我们的目标是，在应用安全相关的补丁时，尽量减少重启的需要，但无法完全避免重启。有关实时补丁范围的详情，请参阅
[*[[客户门户网站解决方案文章](https://access.redhat.com/solutions/2206511){.link}]{.citetitle}*]{.emphasis}。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
内核实时补丁和其它内核子组件之间存在一些不兼容。在使用内核实时补丁前，请仔细阅读
[kpatch
的限制](#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#limitations-of-kpatch_applying-patches-with-kernel-live-patching "kpatch 的限制"){.link}。
:::
::: section
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#limitations-of-kpatch_applying-patches-with-kernel-live-patching}kpatch 的限制 {.title}
:::
::: itemizedlist
-   `kpatch`{.literal}
    功能不是一个通用内核升级机制。它可用于在无法立即重启系统时应用简单的安全性和程序错误修复更新。
-   不要在载入补丁期间或之后使用 `SystemTap`{.literal} 或
    `kprobe`{.literal} 工具。在删除此类探测后，补丁可能无法生效。
:::
:::
::: section
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#support-for-third-party-live-patching_applying-patches-with-kernel-live-patching}对第三方实时补丁的支持 {.title}
:::
`kpatch`{.literal} 实用程序是红帽通过红帽软件仓库提供的 RPM
模块支持的唯一内核实时补丁程序。红帽不支持任何不是由红帽提供的实时补丁。
如果您需要支持第三方实时补丁所带来的问题，红帽建议您在调查开始时，与需要确定根本原因的任何调查开始时，创建一个与实时补丁供应商案例。如果供应商允许源代码，并且其支持组织能够在向红帽支持升级调查前为其支持组织提供根本原因方面的帮助，则源代码可以被提供。
对于任何使用了第三方补丁程序运行的系统，红帽保留请求用户使用由红帽提供并支持的软件重现问题的权利。如果无法做到这一点，我们需要在测试环境中部署类似的系统和工作负载，而无需应用实时补丁，以确认是否观察到了相同的行为。
有关第三方软件支持政策的更多信息，请参阅[红帽全球支持服务如何处理第三方软件、驱动程序和/或未经认证的硬件/管理程序或虚拟机操作系统？](https://access.redhat.com/articles/1067){.link}
:::
::: section
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#access-to-kernel-live-patches_applying-patches-with-kernel-live-patching}获得内核实时补丁 {.title}
:::
内核实时补丁功能是作为内核模块（`kmod`{.literal}）实现的，该模块作为 RPM
软件包提供。
所有客户都可以访问内核实时补丁，这些补丁通过常用的通道提供。但是，在下一个次版本发布后，未订阅延长支持服务的客户将无法访问当前次要版本的新修补程序。例如，具有标准订阅的客户只能在
RHEL 8.3 内核发布前提供 RHEL 8.2 内核补丁。
:::
::: section
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#components-of-kernel-live-patching_applying-patches-with-kernel-live-patching}组件内核实时修补 {.title}
:::
内核实时补丁的组件如下：
::: variablelist
[内核补丁模块]{.term}
:   ::: itemizedlist
    -   内核实时补丁的交付机制。
    -   为内核建补丁的内核模块。
    -   patch 模块包含内核所需修复的代码。
    -   patch 模块使用 `livepatch`{.literal}
        内核子系统注册，并提供要替换的原始功能的信息，并提供与替换功能对应的指针。内核补丁模块以
        RPM 的形式提供。
    -   命名规则为
        `kpatch___`{.literal}。名称中\"kernel
        version\"部分的[*点*]{.emphasis}被[*下划线*]{.emphasis}替代。
    :::
[`kpatch`{.literal} 工具]{.term}
:   用于管理补丁模块的命令行工具。
[`kpatch`{.literal} 服务]{.term}
:   `multiuser.target`{.literal} 所需的 `systemd`{.literal}
    服务。这个目标会在引导时载入内核补丁模块。
[`kpatch-dnf`{.literal} 软件包]{.term}
:   以 RPM 软件包的形式提供的 DNF
    插件。此插件管理内核实时补丁的自动订阅。
:::
:::
::: section
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#how-kernel-live-patching-works_applying-patches-with-kernel-live-patching}内核实时补丁如何工作 {.title}
:::
`kpatch`{.literal} 内核补丁解决方案使用 `livepatch`{.literal}
内核子系统将旧功能重定向到新功能。当实时内核补丁应用到系统时，会出现以下情况：
::: orderedlist
1.  内核补丁模块复制到 `/var/lib/kpatch/`{.literal}
    目录中，并在下次引导时由 `systemd`{.literal} 注册以重新应用到内核。
2.  kpatch 模块被加载到正在运行的内核中，新的功能会注册到
    `ftrace`{.literal} 机制中，带有指向新代码内存中位置的指针。
3.  当内核访问补丁的功能时，它将由 `ftrace`{.literal}
    机制重定向，该机制绕过原始功能并将内核重定向到功能补丁版本。
:::
::: figure
[]{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#applying-patches-with-kernel-live-patching-figu-how-kpatch-works}
**图 17.1. 内核实时补丁如何工作**
::: figure-contents
::: mediaobject
![RHEL kpatch 概述](images/rhel_kpatch_overview.png)
:::
:::
:::
:::
::: section
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#subscribing-the-currently-installed-kernels-to-the-live-patching-stream_applying-patches-with-kernel-live-patching}将当前安装的内核订阅到实时补丁流 {.title}
:::
内核补丁模块在 RPM 软件包中提供，具体取决于被修补的内核版本。每个 RPM
软件包将随着时间不断累积更新。
以下流程解释了如何订阅以后为给定内核的所有累积实时补丁更新。因为实时补丁是累计的，所以您无法选择为一个特定的内核部署哪些单独的补丁。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
红帽不支持任何适用于红帽支持的系统的第三方实时补丁。
:::
::: itemizedlist
**先决条件**
-   根权限
:::
::: orderedlist
**流程**
1.  另外，还可检查您的内核版本：
    ``` literallayout
    # uname -r
    4.18.0-94.el8.x86_64
    ```
2.  搜索与内核版本对应的实时补丁软件包：
    ``` literallayout
    # yum search $(uname -r)
    ```
3.  安装实时补丁（live patching）软件包：
    ``` literallayout
    # yum install "kpatch-patch = $(uname -r)"
    ```
    以上命令只为特定内核安装并应用最新的实时补丁。
    如果实时补丁软件包的版本是 1-1
    或更高版本，则软件包将包含补丁模块。在这种情况下，内核会在安装 live
    patching 软件包期间自动修补。
    内核补丁模块也安装到 `/var/lib/kpatch/`{.literal} 目录中，供
    `systemd`{.literal} 系统和服务管理器以后重启时载入。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    当给定内核没有可用的实时补丁时，将安装空的实时补丁软件包。空的 live
    patching 软件包会有一个 0-0 的
    [*kpatch_version-kpatch_release*]{.emphasis}，如
    `kpatch-patch-4_18_0-94-0-0.el8.x86_64.rpm`{.literal}。空 RPM
    安装会将系统订阅到以后为给定内核提供的所有实时补丁。
    :::
4.  另外，用来确认内核已应用了补丁程序：
    ``` literallayout
    # kpatch list
    Loaded patch modules:
    kpatch_4_18_0_94_1_1 [enabled]
    Installed patch modules:
    kpatch_4_18_0_94_1_1 (4.18.0-94.el8.x86_64)
    …​
    ```
    输出显示内核补丁模块已加载到内核中，现在它使用来自
    `kpatch-patch-4_18_0-94-1-1.el8.x86_64.rpm`{.literal}
    软件包的最新修复进行补丁。
:::
::: itemizedlist
**其它资源**
-   `kpatch(1)`{.literal} 手册页
-   [*[[配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#installing-software-packages_managing-software-packages){.link}]{.citetitle}*]{.emphasis}
    Red Hat Enterprise Linux
:::
:::
::: section
::: titlepage
# []{#applying-patches-with-kernel-live-patching_managing-monitoring-and-updating-the-kernel.html#automatically-subscribing-any-future-kernel-to-the-live-patching-stream_applying-patches-with-kernel-live-patching}自动订阅将来的内核到实时补丁流 {.title}
:::
您可以使用 `kpatch-dnf`{.literal} DNF
插件订阅系统，从而修复内核补丁模块（也称为内核实时补丁）提供的修复。该插件为系统当前使用的任何内核启用[**自动**]{.strong}订阅，以及[**在以后安装**]{.strong}地内核。
::: itemizedlist
**先决条件**
-   root 权限。
:::
::: orderedlist
**流程**
1.  （可选）检查所有安装的内核和您当前运行的内核：
    ``` literallayout
    # yum list installed | grep kernel
    Updating Subscription Management repositories.
    Installed Packages
    ...
    kernel-core.x86_64         4.18.0-240.10.1.el8_3           @rhel-8-for-x86_64-baseos-rpms
    kernel-core.x86_64         4.18.0-240.15.1.el8_3           @rhel-8-for-x86_64-baseos-rpms
    ...
    # uname -r
    4.18.0-240.10.1.el8_3.x86_64
    ```
2.  安装 `kpatch-dnf`{.literal} 插件：
    ``` literallayout
    # yum install kpatch-dnf
    ```
3.  启用自动订阅内核实时补丁：
    ``` literallayout
    # yum kpatch auto
    Updating Subscription Management repositories.
    Last metadata expiration check: 19:10:26 ago on Wed 10 Mar 2021 04:08:06 PM CET.
    Dependencies resolved.
    ==================================================
     Package                             Architecture
    ==================================================
    Installing:
     kpatch-patch-4_18_0-240_10_1        x86_64