本人在目前就职企业做安全建设的时间接近3年，从一开始不足20台服务器到现在300+的规模，想跟大家分享一些自己在安全建设上的方法，希望对大家能有所帮助。
之前有过两年多的时间做漏洞审核与应急响应工作，在我之前接触过的可导致服务器被入侵的安全问题中（注意`是可直接导致服务器被入侵的安全问题而非全部安全问题`），至少70%以上是由于高危端口对外开放，弱口令或易猜解口令问题导致的，因为大多时候并没有多少人去针对你的企业去做渗透，更多是黑产的批量扫描，所以我觉得首先做好以下几点可以避免大多数因为服务器被入侵而导致的高级别安全事件：
1.严格的端口访问控制（至少对外的要严格）：  
我们的服务器绝大部分部署在公有云上，端口限制比较方便，对外的话默认是任何端口都不开，有web服务的话开启80和443，其余情况单独防火墙策略配置，大多是第三方数据回调或者测试人员要求在移动网络环境下访问测试系统，如果有实在没法针对ip做限制的情况只能是做好安全检测后开放出去，必要时候安全是要向业务让步的。
2.服务器禁用密码登陆：  
服务器禁用密码登陆我们的做法是只留一台主机作为跳板机对外开放22端口，其余主机一律不对外开放，需开放的主机编辑ssh服务配置文件，大部分路径为/etc/sshd_config或者/etc/ssh/sshd_config，将PasswordAuthentication对应的值改为no即可，如果不统一入口的话就要考虑其他人员私自将配置改回去的情况发生，对ssh配置文件做监控的话成本相对较高。
3.有一套统一的后台登录系统，登录方式为多因素：  
统一后台登录系统我建议是一定要搞的，如果自己写不了就去协调开发去弄，大多数企业总会有无法去做访问限制的后台，你也很难保证其他员工不会使用弱口令或易猜解口令，这个时候如果有一个多因素认证的统一后台登录系统，可以避免很多问题，如果你不知道有哪些后台系统，对于中小企业来说，可以去找业务方核对甚至自己到机器上通过servername的配置以及在accesslog中筛选url并去掉参数部分去重寻找。
4.增加webserver安全配置：  
主要是为了防止源码包或者web目录在用户家目录导致.bash_history这类文件可被访问带来的安全问题，这里给出两条nginx的配置供大家参考，注意部署前先看下accesslog中是否存在正常的此类后缀文件下载，以免影响正常业务
    location ~ .*\.(bak|jpa|rar|sql|tar|gz|zip|conf|tgz|bz2|log)$ {
            return 405;
        }
     location ~ /\..* {
            return 405;
        }
5.至少做一遍整体的安全检测  
最后就是对企业整体做一次安全检测，尽可能的把存在的安全问题先筛一遍，在这个过程中也能帮助了解自己企业中容易出问题的地方。
此外，如果你是刚到一个企业做安全建设，或者之前没有排查过服务器是否被入侵的话，强烈建议先挨个主机检查下webshell与rootkit，webshell的检查我一般使用D盾webshell查杀
 （程序是在windows环境下运行的，如果是其他系统可以拷出来到windows系统下检测）
，rootkit检测我一般使用rkhunter 
程序本身有一定的局限性，但是对付一般的rootkit也够用。  
做完以上基础建设后，下面给出我这的一些其他实践，大家可以自行选择实践到自己的企业环境中去
**主机权限控制**  
如果你的企业没有买堡垒机的预算，那么我一定会推荐freeipa，完全免费，完成一次认证后可以在有权限的主机间直接跳转，全部人员账户集中管理，方便离职人员的清理，权限配置简单，并且支持黑白名单命令，新版支持OTP，安装及配置参考
与  
目前我在运维这套系统，300+机器只部署了一个热备，SLA可以达到99.999%以上，这里说下使用中遇到的几点问题，1）依赖系统sssd服务，某些系统中会存在sssd服务运行状态正常但实际上已无法正常工作的情况，可以重启sssd服务解决，暂时未找到根治的办法，临时解决方案是开启sssd服务nss模块的log，编辑/etc/sssd/sssd.conf文件，[nss]标签下添加debug_level
= 4，配置如图  
然后系统中写一个小程序监控/var/log/sssd/sssd_nss.log文件中是否存在error，存在的话自动重启sssd服务，同时清空日志内容防止不断重启（记录nss日志暂时只有这一个作用所以我这里直接清空）  
2）CA证书到期，3.x版本的freeipa自带的CA证书时间是两年，到期后机器认证没问题，但是管理端绝大部分功能都不可用，所以建议安装新版本，CA证书时间为20年且更新也比较简单  
3）sssd日志权限错误导致认证失败，sssd的log文件必须存在且权限必须为600，错误则会导致服务异常  
4）Freeipa默认的管理账户用户名为admin，如果你部署了freeipa的任意一台客户端的ssh端口开放到了外网且允许密码登陆，你就会发现admin账户经常无法使用，因为外面一直有扫admin弱口令的，经常触发账户锁定策略  
5）由于freeipa是基于kerberos协议的，所以客户端系统时间与服务器时间相差超过5分钟的话会导致认证失败，所以时间一定要同步
**标准化**  
我觉得标准化是个一劳永逸的事情，当你的企业安装大部分应用都有自己的一套标准，比如统一的启动权限，统一的安装路径，那么无论是对运维或者安全都会有很大的帮助。我们目前的做法是将常用的应用的安装脚本放置在内网的一个下载站上，同时有一个shell脚本打包在系统安装镜像里，运行这个shell脚本会让你选择安装某个应用，直接输入该软件对应的值，就会从内网下载站上获取安装脚本完成应用的安装。对于使用者来说安装应用非常方便，对于安全人员来说，你可以在软件中集成好安全配置，例如上面提到的nginx安全配置，你写在默认安装包的example.conf里，使用者往往都是根据默认配置做些简单更改，这样就会都有安全配置了。还要就是php默认禁用危险函数，为各种默认为弱口令甚至空口令的应用设置一个强壮的密码。同时还要有一个技术性的监控保证实施的有效性，比如redis、tomcat大多都是直接以root权限运行的，我们知道这样很危险，那么我就在运维的中控机上增加一个天级的计划任务去检查redis、tomcat的运行进程，如果发现是root启动则报警，我再去推动相关人员进行更改。这块可以做的事情很多，这里只提供一下大概思路及一些例子，大家可以结合自己企业的环境自由发挥。
**邮箱安全**  
企业邮箱安全是个比较大的问题，这里推荐下腾讯企业邮箱，好处是开启微信安全登录后，网页登录需要验证动态码，而对于客户端也把密码换成了一个很复杂的客户端授权码，这样就基本告别了邮箱使用弱口令或易猜解口令带来的安全问题。由于操作并不是很傻瓜化，所以推的时候不要一次就全部都强制启用安全登录，我们是先把文档发给全员，让一部分人先自己去弄，然后一段时间后在按部门或小组的形式陆续开启强制安全登录。对于其他没有使用支持动态口令功能的邮箱，可以定期主动的对员工邮箱进行暴力破解测试。此外，可以创建蜜罐邮箱账户并且在多在外部站点发布该邮箱地址，使其被搜索引擎收录，增加邮箱收到钓鱼邮件的几率，便于根据钓鱼邮件内容进行响应，对于收到的二进制文件我一般会到腾讯哈勃
或者微步在线 跑下。
**Webshell监控**  
监控webshell主要依赖了auditd，具体方法可参考  
《[另类WebShell监测机制--基于auditd](https://bbs.ichunqiu.com/thread-27874-1-1.html
"另类WebShell监测机制--基于auditd")》  
《[Linux下利用auditd监控JAVA执行命令并通过OSSEC告警](http://vinc.top/2017/07/17/linux%E4%B8%8B%E5%88%A9%E7%94%A8auditd%E7%9B%91%E6%8E%A7java%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%B9%B6%E9%80%9A%E8%BF%87ossec%E5%91%8A%E8%AD%A6/
"Linux下利用auditd监控JAVA执行命令并通过OSSEC告警")》  
这里要说明一下，第一篇文章其实给出的是一个监控所有系统命令执行的方法，由于auditd是基于系统底层调用的监控，所以不管你是用bash，dash或者zsh等都会被记录下来，但是监控webshell的话我更推荐第二篇文章中指定web用户的方法，结果会更精准。第二篇文章的标题是监控java执行命令，其实是任何语言都适用的。而且除了监控webshell外，也可以发现企业中是否有执行系统命令逻辑的代码，方便发现命令执行漏洞（前提是要做好标准化，企业的web由相同的用户权限运行，否则部署会很麻烦）。
**命令监控**  