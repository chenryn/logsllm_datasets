both the message sender (source) and recipient is as follows:
allowed(s, o, R) ⇒
(1)
(o.U RI ∈ s.U RIr) ∧ (o.U RI ∈ o.source.U RIw)
In equation (1), allowed(s, o, R) indicates that subject s is
allowed right R to object o (i.e., a recipient s is allowed to
receive a message o). The decision is made by checking the
condition at the right. In IoT scenarios, this rule ensures that,
from message recipient’s perspective, if a message’s source
(o.source, e.g., a user client that sent the message) has lost
rights for accessing the topic where this message is from (by
checking if o.U RI is not in o.source.U RIw), this message
(e.g., Will Message) should be rejected. In addition, this rule
also checks whether the recipient is allowed to receive the
message by checking if the message’s topic (o.U RI) is in
the allowed topic set s.U RIr. Such a rule bridges the gap
for considering security implications of message recipients
and can defeat our message-related attacks (Section III-A and
Section III-B).
Discussion. MOUCON also supports other security policies.
For example, we can deﬁne a rule to authorize a message
sender based on its attribute U RIw, which speciﬁes the topics
it is allowed to send messages to. Further, a more complete
solution should take into account how to properly update the
sender and the recipient’s privileges during an IoT system’s
runtime: for example, how a client’s Read/Write privileges
can be dynamically revoked, how to authorize such revocation
requests by the cloud, etc. Down the road, we also plan to
extend the model to safeguard other messaging protocols such
as CoAP when they operate in an IoT environment, e.g, by
extending the attribute sets we deﬁne and corresponding au-
thorization rules to enhance the protection of these protocols.
C. Implementation and Evaluation
We implemented the above protection on Mosquitto (version
1.5.4, which originally was not equipped with our protection).
Speciﬁcally, we modiﬁed relevant data structures relating
to its messages (struct mosquitto_msg_store) to add
security-related attributes (e.g., a message’s source), and added
authorization functions to its broker (e.g., check message
source before delivery). Also, we added the proposed ClientId
restriction in the broker’s existing access control function [52]
used for establishing sessions.
We deployed our secured version of Mosquitto in lab
environment and evaluated its effectiveness and performance
overhead. Speciﬁcally, our secured Mosquitto and the orig-
inal unprotected Mosquitto were respectively deployed on a
workstation powered by 3.40GHz Intel i7-6700 CPU, 15.6G
Memory and 475.3GB Disk. We also ran scripts on laptops
(2.2 GHz Intel Core i7, 16 GB Memory, 251GB SSD and
2.3 GHz Intel Core i5, 16 GB Memory, 251GB SSD) that
acted as MQTT clients. To evaluate the effectiveness of our
protection, we launched all attacks in Section III: our secured
Mosquitto defeated all attacks while the unprotected server did
not capture any attack. To evaluate the performance overhead
introduced by our added protection, against each server, we ran
concurrent clients to publish messages and the same number of
subscribers to receive messages. For each server, we recorded
the average delay (in ms) between message publishing and
receiving, and average CPU and memory usage in the period.
We repeated the experiment for different numbers of concur-
rent publishing clients, ranging from 1000 to 8000. The results
(detailed in Table II) show that our added protection incurs
negligible messaging delay (at most 0.63%) and memory
overhead (at most 0.16%). Although CPU usage is higher
(around 10%), this is under normal expectation: adding critical
security checks usually comes at a cost especially compared
to a non-protected implementation.
VI. DISCUSSION AND FUTURE WORK
Lessons learnt. The most important lesson learnt from our
study is the caution one should take when applying a utility-
oriented, common-purpose protocol to the domains that may
involve malicious parties. In such a case, both the scenarios the
protocol does not cover and individual states of the protocol
need to be evaluated to identify the gap between what the
protocol can protect and what needs to be protected. More
speciﬁcally in the use of general messaging protocols for IoT
device-user communication, our study highlights that not only
should ClientId and its related states be safeguarded with
proper authentication and authorization, but also the whole
revocation process, which is security critical, needs to be added
to the protocol with protection in place. Note that although
our research focuses on MQTT, due to its wide deployment,
other messaging protocols such as Firehose [53], CoAP [54],
AMQP [55], JoyLink [56] and Alink [57] may also have
similar problems. Indeed, we discovered a similar revocation
issue in the Firehose WebSocket on Samsung’s Artik IoT
cloud [53], with Samsung’s acknowledgement: the cloud fails
to terminate a client’s session for receiving messages even
after its privilege expires.
Mitigating such authentication/authorization ﬂaws requires
a joint effort from both the protocol designer and the IoT
manufacturer. As mentioned earlier, though the MQTT TC
starts enhancing the protocol against the threats we discovered,
manufacturers also need to do their part. For this purpose,
uniform interfaces that enable them to securely connect their
devices and users to the cloud through different messaging
protocols are valuable. Our approach makes a ﬁrst step toward
this end and is released online [14].
Automated discovery of the ﬂaws. Based upon our under-
standing of the security pitfalls in applying generic messaging
protocols to support IoT management, we believe that more
systematic and automatic security analysis and vulnerability
discovery are feasible. Using MQTT as an example, a possible
approach is to semi-automatically construct state transitions of
its operations, particularly those introduced by the protocol’s
IoT customization, and utilize model checking and/or guided
manual analysis to detect security ﬂaws. More speciﬁcally,
the ﬁnite-state machine (FSM) of MQTT could be recovered
using Natural Language Processing (NLP) through comparing
MQTT speciﬁcations against the IoT cloud documents, as we
did in our prior work [58] (on analysis of payment services).
On the FSM, we could manually identify desired security
properties, such as session state updates for access privilege
revocation, and specify them using Linear Temporal Logic
(LTL) [59]. The presence of the properties on the FSM could
be evaluated using a model checker, e.g., SAL [60]. A problem
reported by the checker could serve as a counter-example for
ﬁnding security ﬂaws on the MQTT-IoT system, by running
the example against the system. In reality, however, NLP might
not fully capture all details of an IoT protocol, due to its
limitations and/or incomplete or inaccurate speciﬁcations in
the protocol documentation. Also, a complicated FSM might
render formal veriﬁcation hard to succeed. In both cases,
the vague, incomplete description or the complicated protocol
logic could guide our analysis to focus on related implemen-
tation for ﬁnding security weaknesses. Note that this step
could also be automated to some level, for example, through
a guided fuzz test on protocol entities (e.g., clientID, topic,
Will Message, etc.). Down the road, we envision that a line of
research will happen in this direction, to automate discovery of
complicated security ﬂaws in IoT systems, particularly those
built atop existing messaging protocols.
MQTT 5. The new version of MQTT speciﬁcation, MQTT5,
became an OASIS standard in March 2019 [18]. As far as we
know, no public IoT cloud supports MQTT5 during the time of
our research. Also, the new standard maintains all features in
the previous version, so all of our attacks are expected to work
13
PERFORMANCE EVALUATION BY COMPARING OUR SECURED MOSQUITTO WITH THE UNPROTECTED MOSQUITTO IMPLEMENTATION
TABLE II
Clients Num
Delay (s)
CPU (%)
MEM (KB)
Without
Protection
1.432
19.1
6725
Protection
1000
With
1.441
22.2
6734
Overhead
(%)
0.63
5.52
0.13
Without
Protection
1.450
23.2
6736
Protection
2000
With
1.456
25.6
6740
Overhead
(%)
0.40
10.34
0.05
Without
Protection
1.456
24.4
6752
Protection
4000
With
1.462
26.9
6756
Overhead
(%)
0.41
10.25
0.05
Without
Protection
1.458
27.6
6872
Protection
6000
With
1.459
29.6
6880
Overhead
(%)
0.06
7.34
0.12
Without
Protection
1.466
29.5
6883
Protection
8000
With
1.471
32.2
6963
Overhead
(%)
0.34
9.15
0.16
on IoT clouds using MQTT5 without extra protection. Also,
the new speciﬁcation does not provide protocol-layer solutions
to address the security risks we discovered. Even though its
non-normative sections mention that the client needs to be
authorized to use a ClientId and an implementation should pro-
vide access controls to restrict the client’s capability to publish
or subscribe to particular topics, it offers no recommendation
on how such protection should be enforced in the IoT scenarios
we studied. We reported our ﬁndings to the OASIS MQTT TC,
which acknowledged that our ﬁndings affect both version 5
and 3.1.1, and the issues are under open discussion now [11].
VII. RELATED WORK
Security studies on MQTT. Industry reports showed that the
general MQTT protocol lacks basic authentication and autho-
rization. Without any protection such as those already added
by IoT clouds today, [61] showed that an attacker was able to
connect to arbitrary MQTT servers without authentication and
subscribe to any topics. Another industry report [62] scanned
exposed MQTT server endpoints on the Internet and imple-
mentation bugs (in handling character encoding) in MQTT
libraries and broker implementation. In contrast to these works
that studied completely unprotected MQTT implementation,
we focus on the protection today’s mainstream IoT clouds
put in place in adopting MQTT and their insufﬁciency in
eliminating new risks unique to IoT environments.
Academic studies proposed to enhance the security model
of MQTT due to its lack of basic security consideration in the
protocol design. [63] proposed new mechanisms for distribut-
ing temporary keys to MQTT clients; [64] proposed to enhance
security protection through considering clients’ context infor-
mation, such as IP address; [65] proposed dynamic control
model that equips MQTT by monitoring mutable attributes for
making access decisions; [66] proposed to introduce OAuth
into MQTT environment as a security addition. In contrast
to the previous works, our study focused on real-world IoT
platforms, the weaknesses of their added security protection in
MQTT deployment, and analyzed practical security challenges
and pitfalls IoT vendors are facing today.
IoT platform security. The security of IoT platforms has been
extensively studied, such as in [30], [67]–[72]. [70] conducted
the ﬁrst security analysis of Samsung’s SmartThings platform
and discovered its coarse-grained access control design. [30]
studied the interactions between IoT devices, mobile apps, and
clouds and focused on weaknesses in state transition diagrams
of the three entities. Works have also been proposed to protect
IoT systems. [73]–[75] studied how to restrict the capabilities
of the cloud, mobile application and device; [76] tracks and
14
protect sensitive IoT information; [77] proposed a provenance-
based framework to aggregate device activities for detecting
errors and malicious activities. In sharp contrast, our study of
IoT focuses on the unique aspects of the underlying messaging
protocol, i.e., MQTT, and the insufﬁcient security protection
added by IoT clouds in adopting MQTT to the complicated
and adversarial device-user interactions.
VIII. CONCLUSION
We performed the ﬁrst systematic study on security risks
in the use of the general messaging protocol for IoT device-
user communication. Our research reveals the gap between
the protocol designed for operating in a simple and benign
environment and the complicated, adversarial IoT scenarios,
and the challenges in covering the gap with proper security
means. From the ﬁndings, we generalized new design princi-
ples and proposed an enhanced access model. Our protection
is implemented and its high effectiveness and efﬁciency are
evaluated. Our new ﬁndings and protection will lead to better
protection of user-device interactions in the real world.
ACKNOWLEDGMENTS
We would like to thank our shepherd Nick Feamster, the
anonymous reviewers and MQTT TC for their insightful
comments. Yan Jia, Yuhang Mao, Shangru Zhao and Yuqing
Zhang were supported by National Natural Science Foundation
of China (No.U1836210, No.61572460) and in part by China
Scholarship Council. The IU authors were supported in part
by Indiana University FRSP-SF, and the NSF CNS-1618493,
1801432 and 1838083.
REFERENCES
[1] A. W. S. (AWS), “Aws iot core,”
https://aws.amazon.com/iot-core/,
https://azure.microsoft.com/en-us/services/iot-hub/,
accessed: 2019-01.
[2] “Azure iot hub,”
accessed: 2019-01.
01.
[3] “Samsung smartthings,” https://www.smartthings.com/, accessed: 2019-
[4] OASIS, “Mqtt version 3.1.1 plus errata 01,” http://docs.oasis-open.org/
mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html, 2015, accessed: 2019-01.
[5] “Key trends from the iot developer survey 2018,”
https://blog.ben
jamin-cabe.com/2018/04/17/key-trends-iot-developer-survey-2018, ac-
cessed: 2019-07.
[6] W. He, M. Golla, R. Padhi, J. Ofek, M. D¨urmuth, E. Fernandes, and
B. Ur, “Rethinking access control and authentication for the home
internet of things (iot),” in 27th USENIX Security Symposium (USENIX
Security 18). USENIX Association, Baltimore, MD, 2018, pp. 255–272.
[7] “Hilton announces connected room, the ﬁrst mobile-centric hotel room,
to begin rollout
https://newsroom.hilton.com/corporate/ne
ws/hilton-announces-connected-room-the-first-mobilecentric-hotel-roo
m-to-begin-rollout-in-2018, 2017, accessed: 2019-01.
in 2018,”
[8] “Smart hosting: The dos and don’ts of the ultimate airbnb smart
home,” https://www.the-ambient.com/guides/host-smart-airbnb-home-t
ech-217, 2018, accessed: 2019-01.
[9] “The best smart lock for airbnb hosts,” https://www.remotelock.com/s
mart-locks-airbnb-hosts, accessed: 2019-01.
[10] “Smar home technology can increase your earning potential,” https: