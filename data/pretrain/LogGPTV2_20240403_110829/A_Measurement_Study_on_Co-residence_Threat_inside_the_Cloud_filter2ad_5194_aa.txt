title:A Measurement Study on Co-residence Threat inside the Cloud
author:Zhang Xu and
Haining Wang and
Zhenyu Wu
A Measurement Study on Co-residence Threat 
inside the Cloud
Zhang Xu, College of William and Mary; Haining Wang, University of Delaware; 
Zhenyu Wu, NEC Laboratories America
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/xu
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXA Measurement Study on Co-residence Threat inside the Cloud
The College of William and Mary
University of Delaware
Zhang Xu
PI:EMAIL
Haining Wang
PI:EMAIL
Zhenyu Wu
NEC Laboratories America
PI:EMAIL
Abstract
As the most basic cloud service model, Infrastructure as a
Service (IaaS) has been widely used for serving the ever-
growing computing demand due to the prevalence of the
cloud. Using pools of hypervisors within the cloud, IaaS
can support a large number of Virtual Machines (VMs)
and scale services in a highly dynamic manner. How-
ever, it is well-known that the VMs in IaaS are vulnerable
to co-residence threat, which can be easily exploited to
launch different malicious attacks. In this measurement
study, we investigate how IaaS evolves in VM placement,
network management, and Virtual Private Cloud (VPC),
as well as the impact upon co-residence. Speciﬁcally,
through intensive measurement probing, we ﬁrst proﬁle
the dynamic environment of cloud instances inside the
cloud. Then using real experiments, we quantify the im-
pacts of VM placement and network management upon
co-residence. Moreover, we explore VPC, which is a de-
fensive network-based service of Amazon EC2 for se-
curity enhancement, from the routing perspective. On
one hand, our measurement shows that VPC is widely
used and can indeed suppress co-residence threat. On the
other hand, we demonstrate a new approach to achieving
co-residence in VPC, indicating that co-residence threat
still exists in the cloud.
1
Introduction
Entering the era of cloud computing, Infrastructure as
a Service(IaaS) has become prevalent in providing In-
formation Technology (IT) support.
IT giants such as
Amazon [1], Microsoft [4], and Google [2] have de-
ployed large-scale IaaS services for public usage. Em-
ploying IaaS, individual IT service providers can achieve
high reliability with low operation cost and no longer
need to maintain their own computing infrastructures.
However, IaaS groups multiple third-party services to-
gether into one physical pool, and sharing physical re-
sources with other customers could lead to unexpected
security breaches such as side-channel [25] and covert
channel [19] attacks. It is well-known that IaaS is vul-
nerable to the co-residence threat, in which two cloud in-
stances (i.e., VMs) from different organizations share the
same physical machine. Co-residence with the victim is
the prerequisite for mounting a side-channel or covert-
channel attack.
The security issues induced by co-residence threat
have been studied in previous research. However, most
previous works focus on “what an attacker can do” [14,
19, 25], “what a victim user should do” [24], and “what
a cloud vendor would do” [12, 15, 26]. In contrast, to
the best of our knowledge, this measurement work ini-
tiates one of the ﬁrst attempts to understand how cloud
service vendors have potentially reacted to co-residence
threat in the past few years and explore potential new
vulnerabilities of co-residence inside the cloud. While
Amazon Elastic Compute Cloud (EC2) is the pioneer of
IaaS, it has the largest business scale among mainstream
IaaS vendors [11, 18]. Therefore, we focus our study
on Amazon EC2. More speciﬁcally, our measurement is
mainly conducted in the largest data center hosting EC2
services: the northern Virginia data center, widely known
as US-East region.
In our measurement study, we ﬁrst perform a 15-
day continuous measurement on the data center using
ZMap [10] to investigate the data center’s business scale
and some basic management policies. With the basic
knowledge of the cloud, we explore how EC2 has ad-
justed VM placement along with its impact on security.
We further evaluate how much effort an attacker needs
to expend to achieve co-residence in different circum-
stances. Comparing our evaluation results with those
from 2008 [14], we demonstrate that the VM placement
adjustment made by EC2 during the past few years has
mitigated the co-residence threat.
As network management plays a critical role in cloud
performance and security, we also investigate how the
networking management in EC2 has been calibrated to
USENIX Association  
24th USENIX Security Symposium  929
suppress co-residence threat. We conduct large scale
trace-routing from multiple sources. Based on our mea-
surements, we highlight how the current networking con-
ﬁguration of EC2 is different from what it was and
demonstrate how such evolution impacts co-residence in-
side the cloud. In particular, we measure the change of
routing conﬁguration made by EC2 to increase the difﬁ-
culty of cloud cartography. We also propose a new algo-
rithm to identify whether a rack is connected with Top of
Rack switch or End of Row switch. With this algorithm,
we are able to derive the network topology of EC2, which
is useful for achieving co-residence inside the cloud.
To provide tenants an isolated networking environ-
ment, EC2 has introduced the service of Virtual Private
Cloud (VPC). While VPC can isolate the instances from
the large networking pool of EC2, it does not physically
isolate the instances. After proﬁling the VPC usage and
the routing conﬁgurations in VPC, we propose a novel
approach to speculating the physical location of an in-
stance in VPC based on trace-routing information. Our
experiments show that even if a cloud instance is hid-
den behind VPC, an adversary can still gain co-residence
with the victim with some extra effort.
The remainder of the paper is organized as follows.
Section 2 introduces background and related work on
cloud measurement and security. Section 3 presents our
measurement results on understanding the overview of
Amazon EC2 and its basic management policies. Section
4 details our measurement on VM placement in EC2, in-
cluding co-residence quantiﬁcation. Section 5 quantiﬁes
the impact of EC2-improved network management upon
co-residence. Section 6 describes VPC, the most effec-
tive defense against co-residence threat, and reveals the
haunted co-residence threat in VPC. Section 7 proposes
potential solutions to make the cloud environment more
secure. Finally, Section 8 concludes our work.
2 Background and Related Work
To leverage physical resources efﬁciently and provide
high ﬂexibility, IaaS vendors place multiple VMs owned
by different tenants on the same physical machine. Gen-
erally, a scenario where VMs from different tenants
are located on the same physical machine is called co-
residence. In this work, the deﬁnition of co-residence is
further relaxed. We deﬁne two VMs located in the same
physical rack as co-residence. Thus, two VMs located
in the same physical machine is considered as machine-
level co-residence, while two VMs located in the same
rack is deﬁned as rack-level co-residence.
2.1 Co-residence threat
The threat of co-residence in the cloud was ﬁrst identiﬁed
by Ristenpart et al. [14] in 2009. Their work demon-
strates that an attacker can place a malicious VM co-
resident with a target and then launch certain attacks such
as side channel and covert channel attacks. Following
Ristenpart’s work, Xu et al. [20] studied the bit rate of
cache-based covert channel in EC2. Wu et al. [19] con-
structed a new covert channel on a memory bus with a
much higher bit rate, resulting in more serious threats
in an IaaS cloud. Zhang et al. [25] proposed a new
framework to launch side channel attacks as well as ap-
proaches to detect and mitigate co-residence threat in the
cloud [24, 26]. Bates et al. [7] proposed a co-resident wa-
termarking scheme to detect co-residence by leveraging
active trafﬁc analysis.
The reason we deﬁne different levels of co-residence
is that some attacks do not require VMs to be located on
the same physical machine, but rather in the same rack
or in a higher level network topology. For instance, Xu
et al. [23] proposed a new threat called power attack in
the cloud, in which an attacker can rent many VMs under
the same rack in a data center and cause a power out-
age. There are also some side channel and covert chan-
nel attacks that only require the co-residence in the same
sub-network [5].
In parallel with our work, Varadarajan et al. [16] per-
formed a systematical study on placement vulnerability
in different clouds. While their work mainly stands at
the attacker side to explore more effective launch strate-
gies for achieving co-residence in three different clouds,
our work performs an in-depth study to understand the
evolution of cloud management and the impact on co-
residence threat in Amazon EC2. The two complemen-
tary works both support the point that public clouds are
still vulnerable to co-residence threat.
2.2 Measurement in the cloud
In contrast to the measurement on private clouds from
an internal point of view[9], the measurement works on
public data centers are mostly conducted from the per-
spective of cloud customers. Wang et al. [17] demon-
strated that in a public cloud, the virtualization technique
induces a negative impact on network performance of
different instance types. The work of Xu et al. [21] mea-
sures network performance in Amazon EC2 and demon-
strates a long tail distribution of the latency. Their work
also analyzes the reason behind the long tails and pro-
poses a new VM deployment solution to address this is-
sue. Bermudez et al. [8] performed a large-scale mea-
surement on Amazon AWS trafﬁc. Their study shows
that most web service trafﬁc towards Amazon AWS goes
to the data center in Virginia, U.S. Some recent stud-
ies [11, 18] measure how web services are deployed
in public clouds. They found that although many top-
ranked domains deploy their subdomains into the cloud,
most subdomains are located in the same region or zone,
930  24th USENIX Security Symposium 
USENIX Association
2
USENIX Association  
24th USENIX Security Symposium  931
Figure1:ThesystemusedtoscanEC2.resultinginarelativelypoorfaulttolerance.Incontrasttothosemeasurementefforts,ourstudyprovidesameasurementanalysisfromtheperspectiveofsecuritytorevealthemanagementpoliciesofapubliccloudandtheirimpactuponco-residencethreat.3AnOverviewofEC2ManagementAsthepioneerofIaaS,AmazonEC2deploysitsdatacentersallaroundtheworld,hostingthelargestscaleofIaaSbusiness.Inthissection,weintroducesometer-minologyinEC2andprovideanoverviewoftheEC2environment.3.1InstancetypeAninstancerepresentsavirtualmachine(VM)inthecloud,soweusetheterm“instance”and“VM”inter-changeablythroughouttherestofthepaper.EC2pro-videsalistofinstancetypesforclientstoselectwhilelaunchinganewinstance.Thetypeofaninstancein-dicatestheconﬁgurationoftheVM,determiningtheamountofresourcestheVMcanuse.TheinstancetypeisdeﬁnedintheformatXX.XXXsuchasm1.small.Theﬁrstpartoftheinstancetyperevealsthemodelofthephysi-calserverthatwillhostthistypeofinstance.Thesecondpartindicatesthe“size”oftheVM,i.e.,theamountofresourcesallocatedtotheinstance.Thedetailedconﬁg-urationofdifferentinstancetypescanbefoundat[3].3.2RegionsandzonesAmazonEC2hastheconceptof“region,”whichrepre-sentsthephysicalareawherethebootedinstancewillbeplaced.Amazonhas9locationsaroundtheworldhostingEC2services.Therefore,theinstancesinEC2canbelocatedin9regions:USeast(northernVirginia),USwest(Oregon),USwest(northernCalifornia),SouthAmerica(SaoPaulo),AsiaPaciﬁcsoutheast(Singapore),AsiaPaciﬁcsoutheast(Sydney),AsiaPaciﬁcnortheast(Tokyo),EUwest(Ireland),andEUcentral(Frankfurt).Aspointedoutinpreviouswork[11],themajorityofIaaSbusinessishostedintheUSeastregion,e.g.,inthedatacenterlocatedinnorthernVirginia.Mostexistingresearchoncloudmeasurementwasconductedonthisregion[8,13,14].Therefore,wealsofocusourstudyontheUSeastregion.Fortherestofthepaper,weusetheterm“cloud”tomeantheEC2USeastregionandtheterm“datacenter”tomeantheAmazonEC2datacenterinnorthernVirginia,US.Inadditiontoregions,AmazonEC2alsoallowsclientstoassignaninstancetoacertain“zone.”Azoneisalogicalpartitionofthespacewithinaregion.PreviousworkshowsthattheinstancesinthesamezonesharecommoncharactersinprivateIPaddresses,andlikelyin-stanceswithinthesamezonearephysicallyclosetoeachother[14,19].TherearefouravailabilityzonesintheUSeastregion:us-east-1a,us-east-1b,us-east-1c,andus-east-1d.3.3NamingThenamingserviceisessentialtocloudmanagement.Ononehand,thenamingservicecanhelpcustomerstoeasilyaccesstheirinstancesandsimplifyresourceman-agement.Ontheotherhand,thenamingserviceshouldhelpthecloudvendortomanagethecloudefﬁcientlywithhighnetworkperformance.InEC2,aninstanceisautomaticallyassignedtwodo-mainnames:onepublicandoneprivate.ThepublicdomainnameisconstructedbasedonthepublicIPad-dressoftheinstance,whiletheprivatedomainnameisconstructedbasedoneithertheprivateIPaddressortheMACaddress.PerformingaDNSlookupoutsideEC2returnsthepublicIPoftheinstance,whileperformingaDNSlookupinsideEC2returnstheprivateIPoftheinstance.3.4ScanningEC2insideandoutsideTobetterunderstandtheenvironmentandbusinessscaleofEC2,weperformeda15-daycontinuousmeasurementontheEC2USeastregion.Figure1illustratesoursystemtoscanEC2.FirstwedeployedascanneroutsideEC2toscanthecloudthroughapublicIPaddress.SinceEC2publishestheIPrangeforitsIaaSinstances,ourscannerusesZMap[10]toscanthespeciﬁedrangesofIPaddresses.Theportswescannedinclude:ports20and21usedforFTP,port22usedforSSH,port23fortelnet,ports25and587forSMTP,port43forWHOIS,port53forDNS,port68forDHCP,port79forFingerprotocol,port80forHTTP,port118forSQL,port443forHTTPS,andport3306forMySQL.WealsoperformedanICMPechoscan.Afterscanning,ouroutsidescannerobtainedalistoflivehostsinEC2withthecorrespondingpublicIPaddresses.Inthenextstep,weperformedautomaticdomainnamegeneration.Asmentionedabove,thepublicdomainnameofanin-stanceinEC2canbederivedusingitspublicIP.Thisstepproducesalistofpublicdomainnamesoflivehosts.Thegeneratedpublicdomainnameswerethensenttoourin-sidescannerdeployedinsideEC2.OurinsidescannerthenperformedDNSlookupsforthesedomainnames.3Due to the DNS lookup mechanism of EC2, the DNS
server in EC2 answered the queries with the private IP
addresses of the hosts. Reaching this point, our mea-
surement system can detect live hosts in EC2 with their
domain names, IP addresses, as well as the mapping be-
tween the public IP address and private IP address.
The scan interval is set to 20 minutes, which is a trade-
off between cost and accuracy. Scanning the entire EC2
US east region per port takes about 40 seconds, and we
have 14 ports to scan. This means that scanning all the
ports will take around 10 minutes. Note that our mea-
surement also includes DNS lookups for all the detected
live hosts. Performing these DNS lookups takes around
20 minutes, which is approximately the time for two
rounds of scanning.
Our scanning measurement provides us an overview
of the large business scale of EC2, the diversity of ser-
vices, and the dynamic running environment. This scan-
ning measurement also gives us the knowledge base to
understand co-residence threat. The detailed results and
analysis of our scanning measurement can be found in
the Appendix A and B.
4 The Impact of VM Placement upon Co-
residence
The VM placement policy of the cloud determines how
easy or hard it is for an attacker to achieve co-residence.
In this section, we present our measurement on VM
placement and quantiﬁcation of achieving co-residence.
By comparing our measurement results with previous
work, we demonstrate how the VM placement policy has
been evolving in EC2 and its impact on mitigating co-
residence threats.
4.1 Basic understanding of VM placement
We ﬁrst launched a sufﬁciently large number of in-
stances with different types in EC2. Then, we had two
tasks to fulﬁll:
loca-
tion) information of launched instances and (2) quan-
tifying co-residence threat, i.e., given the current VM
placement policy of EC2, how much effort an attacker
needs to make to achieve co-residence. Since the pro-
cess of achieving co-residence requires the knowledge
of instance location, we can complete the two tasks to-
gether. For every instance we launched while seeking
co-residence, we recorded its private IP address and pub-
lic IP address. We also performed an automatic trace-
route from the instance to its “neighbors” that share the
/24 preﬁx with it. This information can provide us the
basic knowledge of where the instances are placed.
(1) collecting networking (i.e.,
During our measurement, we recorded the detailed
information of 2,200 instances of type t1.micro, 1,800
instances of type m1.small, 1,000 instances of type
)
x
(
F
1
0.8
0.6
0.4
0.2
0
0
Empirical CDF
Micro
Small
20
40
60
80
100
120
Private address distance
Figure 2: CDF of IP address distances between co-resident VMs.
m1.medium, 1,000 instances of type m3.medium, 80 in-
stances of m3.large, and 40 instances of m3.xlarge. We
selected some random samples from the instances we
recorded to study the internal IP distribution. We investi-
gated how private IP addresses are associated by the in-
stance type and availability zones, i.e., whether the VM
placement has type and zone locality. Our results demon-
strate that currently EC2 still exhibits certain type and
zone locality, i.e., instances with the same type in the
same zone are more likely to be placed close to one an-
other. However, compared with corresponding results in
2008 [14], such locality has been signiﬁcantly weakened.
More details of locality comparison can be found in Ap-
pendix C.
After understanding the current VM placement in
EC2, we further investigate co-residence threats in EC2.
4.2 Quantifying machine level co-residence
To understand how VM placement will affect co-
residence, we assess the effort one needs to make to
achieve machine level co-residence in two scenarios. The
ﬁrst scenario is to have a random pair of instances located
on the same physical machine, and the second scenario is
to have an instance co-reside with a targeted victim.
4.2.1 Random co-residence
To make our random co-residence quantiﬁcation more
comprehensive, we perform our measurement with dif-
ferent instance types and in different availability zones.