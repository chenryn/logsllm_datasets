中
nt!KiUnexpectedInterruptX
N/A
没有使用
FD
断
从表3-4可以看出，Windows 8的IDT表只使用了两种类型的门描述
符：任务门和中断门，并没有使用陷阱门。其实，中断门和陷阱门的行
为非常类似，二者之间的差异只有一个，那就是对于中断门，CPU在将
标志寄存器（EFLAGS）的当前值压入栈保存后，在开始执行处理函数
前，会自动清除标记寄存器的IF位，也就是屏蔽中断，而对于陷阱门，
CPU不会自动清除IF位。
在Linux系统中，IDT的大多数表项使用的也是中断门描述符，但也
使用了陷阱门。比如用于调用系统服务的SYSCALL_VECTOR（常量
0x80）向量使用的就是陷阱门，有关的源代码如下：
// arch/x86/kernel/traps.c
   set_system_trap_gate(SYSCALL_VECTOR, &system_call);
// arch/x86/include/asm/irq_vectors.h
# define SYSCALL_VECTOR            0x80
在Windows的系统调用处理函数KiSystemService中，可以看到有一
条启用中断位的sti指令，这是因为CPU经过中断门进入内核后，IF位被
自动清除了，考虑到系统调用的执行时间可能比较长，为了能及时响应
中断，有必要再设置IF位。从这个角度来看，Linux内核的系统调用向
量使用陷阱门更好地利用了硬件的特征，更合理一些。奔腾II开始的x86
CPU都支持特殊的快速系统调用指令来做系统调用，我们将在卷2中详
细讨论。
 格物致知 
下面通过试验来观察Linux系统中的IDT表，您可以根据附录D中的
提示建立好实验环境，然后按照以下提示做实验。
① 启动Linux虚拟机，单击桌面上的Terminal图标，打开一个控制
台窗口。
② 执行如下命令启动GDB：
# sudo gdb --core /proc/kcore
根据提示输入密码（见附录D），成功后，gdb会被启动，并开始
本地内核调试（见第9章）。
③ 在GDB中执行如下命令，加载符号文件。
(gdb) symbol-file /usr/src/kernels/linux-2.6.35.9/vmlinux
④ Linux内核使用全局数组idt_table作为IDT表，执行如下命令打印
出这个表的起始地址。
(gdb) print /x &idt_table
执行成功后，GDB会显示出类似下面这样的结果：
$6 = 0xc16ff000
其中的$6是伪变量名，后续的命令可以使用它来索引这个命令结
果。等号后面的0xc16ff000便是idt_table变量的位置，其实也就是IDT的
线性地址，记下这个地址。
⑤ 执行print /x idt_table[0]打印出IDT表的第一个表项，其结果类似
如下内容：
$10 = {{{a = 0x601cec, b = 0xc14b8e00}, {limit0 = 0x1cec, base0 = 0x60,
     base1 = 0x0, type = 0xe, s = 0x0, dpl = 0x0, p = 0x1, limit = 0xb,
     avl = 0x0, l = 0x0, d = 0x1, g = 0x0, base2 = 0xc1}}}
在Linux的源代码中，每个IDT表项被定义为一个desc_struct结构
体，这个结构体的长度为8个字节，内部又是两个结构体的联合，第一
个子结构体是两个32位整数a和b，用于按32位来访问IDT表项的高4字节
（b）和低4字节（a）。第二个子结构体是按照段描述符的位布局来定
义的，适合描述第2章介绍的GDT中的段描述符，不适合描述IDT的门
描述符。因此，我们观察这个结果时，可以根据图3-4理解其中的内
容。比如，取b的高16位加上a的低16位便可以得到处理函数的地址，即
0xc14b1cec，然后可以使用info symbol命令寻找其对应的符号：
(gdb) i symbol 0xc14b1cec
divide_error in section .text
正好是除0异常的处理函数。
⑥ 也可以使用x命令直接观察IDT的数据，比如：
(gdb) x /2x &idt_table[0]
0xc16ff000:    0x00601cec    0xc14b8e00
⑦ 略微调整以上两步中的命令，便可以观察IDT中其他表项的值，
比如以下命令可以观察用于系统调用的80号表项：
(gdb) x /2x &idt_table[0x80]
0xc16ff400:    0x00601720    0xc14bef00
(gdb) i symbol 0xc14b1720
system_call in section .text
注意，高4字节中的类型位为0xf，代表使用的是陷阱门。
⑧ 读者可以继续观察更多的表项，或者执行x /512x &idt_table[0]可
以将整个IDT表的原始数据显示出来。观察结束后，执行q命令退出
GDB。
3.5.3 IA-32e模式
在IA-32e（64位）模式下，IDT仍然是处理中断异常的核心枢纽，
但做了一些改动，主要表现在如下两个方面。
首先，每个IDT表项的长度扩展为16个字节，新增的两个
DWORD，高地址的保留未用，低地址的用于记录处理函数地址的高32
位。因为每个表项的增大，IDT表的总长度也随之增加到4096字节
（4KB），刚好是一个普通内存页大小。
其次，因为x64架构不再支持硬件方式的任务切换，所以IDT中也不
再有任务门。这便产生了一个问题，当某些异常发生时，当前线程的栈
可能已经用完了，比如因为栈溢出而导致的双误异常便是如此。为了能
够处理这样的情况，x64架构引入了一种名为IST的机制，利用该机制，
CPU可以在处理异常时自动切换栈。
IST是Interrupt Stack Table的缩写，也是一张线性表，位于x64的新
格式TSS中。IST每个表项的大小为64位（8字节），其内容就是一个指
向栈的数据指针。IST的最大表项数为7，索引号为1～7。在x64的新格
式门描述符中，有一个用于索引IST的位域，位于第二个WORD的Bit 0
～2，共3个比特，可以索引到IST中的任一个表项，索引0用来代表不需
要切换栈，不指向任何有效的IST表项。在32位的门描述符中，IST的对
应位置是保留未用的。
图3-6所示的是调试64位Windows 10时执行!idt命令得到的IDT表信
息（局部，完整列表请见试验材料src\chap03\idt_w10_64.txt），图中带
有“Stack = ×××”的项使用了非0值的IST索引，指示CPU在发生这类中断
或者异常时要先切换栈。
图3-6 64位Windows 10的中断描述符表（局部）
总的看来，IA-32e模式下的IDT变得更简单了，不再有任务门，只
有中断门和陷阱门，中断门和陷阱门都支持通过它们中的IST位域来指
定是否要切换栈。
3.6 ARM架构中的异常机制
本节将简要介绍ARM架构中的异常机制，把前面关于x86架构的内
容扩展到ARM架构。我们将着重介绍二者的差异。
首先，两个架构中异常和中断的范畴是不同的。在x86中，中断和
异常是并列的两个概念，但是在ARM中，中断被看作异常的一种，包
含在异常中。根据ARM手册，ARM架构中的异常包括如下5类。
复位（reset）。
中断（interrupt）。
内存系统中止（memory system abort）。
未定义的指令（undefined instruction）。
系统调用（Supervisor Call，SVC）、安全监视器调用（Secure
Monitor Call，SMC）和超级调用（Hypervisor Call，HVC）。
可见，ARM架构把导致CPU脱离正常执行流程（normal flow）的各
种软硬件触发条件都纳入了异常范畴。
其次，ARM架构中登记异常处理器的方法也有所不同，使用的不
是IDT，而是一种称为异常向量表（exception vector table）的特殊格
式，下面以WoA（Windows on ARM）系统为例来介绍其工作原理。
WoA系统启动时，内核中的KiInitializeExceptionVectorTable函数会
把事先准备好的异常向量表地址加载到系统控制器（CP15）的
VBAR（Vector Base Address Register）寄存器中。关键的指令如下：
810dc7ae 4b08     ldr   r3,=nt!KiArmExceptionVectors+0x1 (81037701) 
810dc7b0 f0230301 bic   r3,r3,#1
810dc7b4 ee0c3f10 mcr  p15,#0,r3,c12,c0
上面第一条指令是把记录在全局变量KiArmExceptionVectors中的异
常向量表地址加载到寄存器R3中，第二条指令是把最低位清零（按位逻
辑与非），相当于R3 = R3 & ~1。第三条指令是把R3的内容写到协处理
器CP15的VBAR寄存器中。
根据ARM手册，异常向量表应该包含8个表项（向量），每个表项
中存放的并不是异常处理函数的地址，而是一个操作码。图3-7是使用
WinDBG的dds（Display Words and Symbols）命令观察
KiArmExceptionVectors的结果。
图3-7 WoA的异常向量表的原始数据和对应符号
在图3-7中，前8行每行对应一个表项，内容都是f01cf8df。大家不
必奇怪，使用u命令反汇编一下就明白了（见图3-8）。
图3-8 反汇编异常向量表中的操作码
原来，f01cf8df是下面这样的ldr指令的机器码：
ldr     pc, [pc, #VECTOR_OFFSET]
这条指令使用了相对程序指针的寻址方法，可以以当前指令地址为
基础，加上操作数中指定的偏移，然后把这几个地址加载到程序指针寄
存器，其作用相当于一种特殊的跳转。有了这个基础之后再观察图3-7
就可以理解了。可以把KiArmExceptionVectors看作包含16个元素的数组
（线性表），前8个元素是特殊的ldr指令，后8个元素是异常处理的函数
地址（或者−1表示不使用），ldr指令通过操作数中的偏移找到对应的处
理函数，因为定义数组时是按顺序依次定义的，所以偏移值也是一样
的，导致8条指令的机器码完全一样。
下面解释一下图3-8中出现的6个异常处理函数（全F的表项表示没
有使用该异常）。它们基本上是与上面定义的5类异常相对应的。其
中，KiUndefinedInstructionException用来处理未定义指令异常，
KiSWIException用来处理系统调用，KiPrefetchAbortException和
KiDataAbort Exception都是用来处理内存系统中止，不过二者分工明
确，前者负责处理访问代码时遇到的异常（比如缺页），后者负责处理
访问数据时遇到的异常。KiInterruptException是所有中断的统一入口，
它内部会判断中断源，然后再分发给合适的处理函数。KiFIQException
是高优先级中断（FIQ）的入口，不过WoA不支持FIQ，如果进入
KiFIQException函数，那么它便会触发蓝屏，让系统崩溃。
对于WoA目标，在WinDBG中使用!idt -a命令可以显示出系统中注
册的中断处理函数，比如：
0: kd> !idt -a
Dumping IDT: 8122912c
Dumping Extended IDT: 00000000
Dumping Secondary IDT: 8542b000 
1000:KeyButton+0x388c (KMDF) (KINTERRUPT 8b05fe00)
1003:FT5X06+0x6cc8 (KMDF) (KINTERRUPT 8b05fd00)
1004:VirtualCodec+0x6350 (KMDF) (KINTERRUPT 8b05fc00)
1005:sdport!SdPortWriteRegisterUshort+0x38c8 (KINTERRUPT 8b05f900)
但这个IDT是完全由软件定义和维护的，旨在给驱动程序（KMDF
和WDM驱动）提供兼容的开发接口和调试信息，与x86架构中的IDT有
根本不同。
3.7 本章小结
本章首先介绍了中断和异常这两个重要概念（见3.1节和3.2节），
然后介绍了IA-32 CPU定义的各个异常（见3.3节）。3.4节讨论了中断和
异常的优先级。3.5节介绍了中断/异常的响应和处理。3.6节介绍了ARM
架构中的异常处理机制。
异常与调试有着更为密切的关系，本章从CPU的角度首次介绍了异
常的基本概念，第三篇和第四篇将分别从操作系统和编译器（程序语
言）的角度做进一步阐述。
参考资料
[1] IA-32 Intel Architecture Software Developer’s Manual Volume 3.
Intel Corporation.
[2] Tom Shanley. The Unabridged Pentium 4: IA-32 Processor
Genealogy[M]. Boston: Addison Wesley, 2004 .
[3] ARM Architecture Reference Manual ARMv7-A and ARMv7-R
edition (B1.8 Exception handling). ARM Holdings. 
第4章 断点和单步执行
提到调试，很多人立刻会想到设置断点和单步执行。的确，这是两
种常用的调试方法，是所有调试器必备的核心功能。本章首先介绍x86
CPU是如何支持断点和单步执行功能的，然后再扩展到ARM架构。4.1
节和4.2节将分别介绍软件断点和硬件断点，4.3节介绍用于实现单步执
行功能的陷阱标志。在前三节的基础上，4.4节将分析一个真实的调试
器程序，看它是如何实现断点和单步执行功能的。4.5节将通过实例介
绍反调试和化解的方法。4.6节介绍ARM架构对断点和单步执行的支
持。
4.1 软件断点
x86系列处理器从其第一代产品英特尔8086开始就提供了一条专门
用来支持调试的指令，即INT 3。简单地说，这条指令的目的就是使
CPU中断（break）到调试器，以供调试者对执行现场进行各种分析。调
试程序时，我们可以在可能有问题的地方插入一条INT 3指令，使CPU
执行到这一点时停下来。这便是软件调试中经常用到的断点