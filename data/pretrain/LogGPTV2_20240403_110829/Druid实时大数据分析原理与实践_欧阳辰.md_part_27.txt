根据DataSource获取TimeLine
它按照查询的 interval拆分成对
批量从级存中拉取结果
是否使用绶存？
个
使用缓存
不使用缓存
219
---
## Page 244
请求，而不是通过采用多线程实现并发，减少线程切换带来的开销。
用的是基于Netty开发的HttpClient，通过异步NIO的方式，并发地向多个DruidServer发起
返回的 Sequence合并，这是Scatter/Gather模式的实现。值得一提的是，DirectDruidClient采
>List的map，然后使用DirectDruidClient并发地向多个DruidServer 发
列化成Sequence；没有命中的部分，使用ServerSelector选取节点以后，构建出DruidServer-
所示。
220
回到执行流程中，如果使用缓存的话，命中的部分从缓存中按 Segment拉取数据反序
·PartitionHolder，存放Segment的所有分区，PartitionChunk代表一个分片。PartitionChunk
·interval，Segment的interval。
先来了解两个重要的类：TimeLine和TimeLineObjectHolder。TimeLine由多个TimeLi-
version，Segment的版本信息
DruidServer.
点)。默认的加载规则是采用两个副本，查询时会根据制定的策略选择一个Queryable-
DruidServer，QueryableDruidServer指历史节点或者实时节点（或是索引服务中的节
的Object 对象指向ServerSelector。SeverSelector保存了分区及其所在的Queryable-
Quenyserverl
图8-13TimeLineObjectHolder类的组成图
TimelimeOityectHolder
interval
PanitianChunkl
QuerySierver2
SenveiSelector
ParftianChunk
ueryServerN
Druid实时大数据分析原理与实践
PartinChunkN
---
## Page 245
过程，如图8-14所示。
首先会根据TimeLine找到相应的Segment，后续执行则大致相同，都是根据Segment创建调
用，更多的应用场景是接收来自于查询节点的请求，按照Segment查询而不是interval，使用
的职责链。下面我们以典型的历史节点实现ServerManager为例来讲解。ServerManager除了
7.QuerySegmentWalker
第8章核心源代码探析
getQueryRunnerForIntervals方法是直接在历史节点上执行按照interval的查询才会被调
·SpecificSegmentQueryRunner，用于修改执行线程的名字。
不同类型节点的QuerySegmentWalker实现逻辑不同，但其共同之处是构建QueryRunner
每种类型节点的QuerySegmentWalker实现不同。
QuerySegmentWallker有两个功能。
·ReferenceCountingSegmentQueryRunner，用于创建针对Segment的查询，它主要是调
·实时节点的实现是RealtimeManager。
·统治节点的实现是ThreadPoolTaskRunner。
·查询节点的实现是ClientQuerySegmentWalker。
·历史节点的实现是ServerManager。
·针对传入的多个Segment构建QuneryRunner。
·针对传入的多个interval构建QueryRunner。
tQueryRunner 之前，用于收集“query/segment/time”的Metric。
MetricsEmittingQueryRunner,在CachingQueryRunner 之后，ReferenceCountingSegmen-
执行查询。
如GroupBy查询则会创建一个GroupByQueryRunner，在这个类中调用相应的引擎类
用QueryRunnerFactory的createRunner方法，创建具体查询类型的QueryRunner，例
CachingQueryRunner，为查询结果添加缓存功能。
QueryRunner之前，用于收集“query/segmentAndCache/time”的Metric。
1
---
## Page 246
public abstract Function makePreComputeManipulatorFn(
Metrics等信息。
public abstract ServiceMetricEvent.Builder makeMetricBuilder(QueryType query);
public abstract QueryRunner mergeResults(QueryRunnerrunner);
有自己的QueryToolChest实现。
8.QueryToolChest
222
MetricManipulationFn fn
QueryType query,
用于构建Metrics中的查询相关信息，例如numDimensions、numMetrics和numComplex-
构建一个新的QueryRunner，用于合并多个QueryRunner的结果集。
QueryToolChest提供了如下方法。
QueryToolChest类似于工具箱，用于辅助构建QueryRunner职责链。每一种查询类型都
图8-14查询过程中的Runner步骤
ReferenceCountingSegmentQueryRunner
S(queryType)QueryRunner
MetricsEmitingQueryRunner
MetricsEmittingQueryRunner
BySegmentQueryRunner
SpecificSegmentQueryRunn
CPUTimeMetricQueryRunner
CachingQueryRunner
Druid实时大数据分析原理与实践
---
## Page 247
用该Function对复杂对象进行反序列化。MetricManipulationFn提供了反序列化和将复杂对
适的值。
分成12个小查询并发执行。但要确保在Broker 中设置“druid.processing.numThreads”为合
有一个查询要查时间区间为1年的数据，当设置chunkPeriod为PiM时，则会把这个查询拆
对资源使用的影响。在查询上下文中设置chunkPeriod，如果为o则不拆分。举个例子，如果
装成IntervalChunkingQueryRunner，将长时间区间的查询拆分成小段时间区间的查询，减轻
方法的返回值是传递给mergeResults方法的。它用在Broker层面，将传入的QueryRunner封
public QueryRunner preMergeQueryDecoration(QueryRunnerrunner)
的，如果返回null则不使用缓存。
publicCacheStrategy getCacheStrategy(QueryType query)
public abstractTypeReferencegetResultTypeReference();
景之一是把复杂对象Metric例如HyperLogLog转换成数值类型。
public Function makePostComputeManipulatorfn(QueryType query,
象类型转换为数值类型等常用Functiono
是如果查询中含有复杂对象Metric，Broker合并从历史节点或者实时节点返回的结果时，使
第8章核心源代码探析
return runner;
return null;
return makePreComputeManipulatorFn(query, fn);
封装传入的QueryRunner，这个QueryRunner必须在合并结果之前执行。事实上，这个
获取缓存策略，用于决定如何从缓存中加载数据，以及从缓存中删除数据。这个是可选
使用JSON反序列化时获取对象的类型。
其功能类似于makePreComputeManipulatorFn，但是在合并结果之后使用。它的使用场
MetricManipulationFn fn)
223
---
## Page 248
我们以最重要的mergeResults方法为例，其整体执行流程如图8-15所示。
public QueryRunner postMergeQueryDecoration(QueryRunnerrunner)
224
return runner;
GroupbyQueryToolChest是辅助Group By查询的具体实现，是所有查询类型中最复杂的。
封装传入的QueryRunner，
根据结果构建子查
图8-15GroupbyQueryToolChest执行流程图
subQuery
询的
获取
这个QueryRunner必须在合并结果之后执行。
从query中获取DataSource
采用递归方式执
执行Having过滤
执行postAggregat
执行Limit
执行排序
返回结果
重写Query
执行Query
合
Druid实时大数据分析原理与实践
---
## Page 249
electorFactory，ColumnSelectorFactory是一个工厂接口，提供了如下方法。
protected abstract BinaryFn createMergeFn(Queryquery);
型的查询都需要指定的排序和合并方法。ResultMergeQueryRunner是一个抽象类，提供了两
sults方法，在TimeseriesQueryQueryToolChest中设计了ResultMergeQueryRunner用于合并结
的 Sequence 继续执行PostAggregate、Having、排序及Limit 等流程，最后将结果返回。
mentallndex，然后使用GroupByQueryEngine在Incrementallndex中执行外层Query，其返回
查询是一致的。
Source 是否为QueryDataSource。子查询也必须是Group By查询，子查询的执行流程和普通
8.6.4
protected abstract OrderingmakeOrdering(Queryquery);
个抽象方法用于辅助构建CombiningSequence。
合并在一起，例如Timeseries查询是把含有相同“时间列”的记录合并成一条，每种不同类
ingSequence合并多个Sequence，combine不同于concat，它会使用合并方法，把不同的记录
果，除了GroupBy查询，几乎其他所有查询都是采用该类执行合并结果的。它利用Combin-
第8章核心源代码探析
在学习查询引擎之前必须要熟悉Cursor。先来看一下Cursor接口，它继承了ColumnS-
TimeseriesQueryQueryToolChest是辅助Timeseries查询的具体实现。还是来看mergeRe-
·createMergeFn，创建执行合并逻辑的函数，在Timeseries查询中，利用AggregatorFactory
·执行排序，将Having 过滤以后的 Sequence进行排序。
·把从多个节点返回的结果在IncrmentalIndex中聚合。
Group By查询支持子查询，也就是QueryDataSource，所以首先判断Query中的Data-
·makeOrdering，其作用是创建一个带有比较功能的Ordering对象，例如Timeseries查
再回到QueryDataSource中，此时子查询执行完成，根据子查询执行的结果构建Incr-
·执行Limit，按照Limit截取指定的条数。
·执行Having过滤，采用FilterSequence完成Having过滤。这也是可选项。
询的结果都是，首先会比较timestamp，如相同才会执行合并。
·重写Query，去掉Limit、Having及postAgg。
杂的运算。这是可选项，当Query中包含PostAggregatorSpecs时才执行。
查询引擎
的combine方法合并两个metric。
225
---
## Page 250
public int lookupId(String name);
public String lookupName(int id);
publicint getValueCardinality(）;
publicIndexedInts getRow(）;
public void reset();
public boolean isDone(）;
public void advanceTo(int offset);
public void advance();
public DateTime getTime(）;
public ObjectColumnSelector makeObjectColumnSelector(String columnName);
publicLongColumnSelector makeLongColumnSelector(String columnName);
publicFloatColumnSelector makeFloatColumnSelector(String columnName);
public DimensionSelector makeDimensionSelector(DimensionSpec dimensionSpec);
226
·getValueCardinality方法返回维度的基数，基数是指集合中不重复值的数量。例如以下
·getRow方法返回当前行的维度值，返回的 IndexInts 是int 类型的列表，列表中元素是
再来看一下DimensionSelector，这也是非常重要的接口，用于辅助构建Cursora
·advanceTo方法，跳到指定偏移的行。
·advance方法，类似于选代器的 next方法，指向下一行。
·getTime方法，获取Cursor指向当前行的时间。
·isDone方法，判断游标是否结束，类似于迭代器的hasNext方法。
Cursor本身提供了一些和迭代遍历相关的方法。
·reset方法，重置游标到初始偏移处。
·makeLongColumnSelector，其功能同makeFloatColumnSelectoro
·makeDimensionSelector方法，构建DimensionSelector，用于获取Cursor指向的当前行
维度在字典编码中的值，采用列表是为了兼容处理多值维度。
例如 HyperUnique。
makeObjectColumnSelector，构建ObjectColumnSelector，一般用于获取复杂对象的值，
行的Metric的值，并将其转换为Float类型。
makeFloatColumnSelector方法，构建FloatColumnSelector用于获取Cursor指向的当前
的维度值。
Druid实时大数据分析原理与实践
---
## Page 251
9
S
提供了makeCursorBasedQuery方法来实现上述执行模式，不同查询提供Function来实现具
行模式是通用的。查询引擎的执行模式加下。
第8章核心源代码探析
for（DimensionSpec dim:dims）{
final Map dimSelectors =Maps.newHashMap();
据。它的执行逻辑很简单，拉取每一条数据的Dimension和Metric，接下来分析其执行流程。
体的查询逻辑。
dimSelectors.put(dim.getoutputName(）,dimSelector);
final DimensionSelector dimSelector=
Select查询的引擎是SelectQueryEngine，Select查询的功能是获取Roll-up以后的原始数
构建Cursor和迭代遍历Cursor是相同的，不同的是具体的查询逻辑。QueryRunnerHelper
·迭代遍历Cursor，执行不同查询的具体逻辑。
·根据Query的Filter、Interval等条件调用 StorageAdapter的makeCursors，如果Filter不
Druid没有执行计划，而是采用固定的查询模型。每种类型的查询引擎实现不同，但执
当Cursor指向第一行时，getRow的返回值是[0]。
：lookupId和lookupName相反，根据Name得到字典编码值，这个方法常用于在获取
·lookupName方法会根据传入的字典编码值在字典中查询得到真实的维度值。
为空，则采用Bitmap 得到Ofset，从而根据Ofset构建Cursor，性能非常高。
Id以后，再根据Id查找倒排索引中的Bitmap。
例如延续上面的例子，lookupName(1)的返回值是B。
[0,1]
[1] 
[0,1]
[0] 
基数是2，字典编码以后是：
A,B
A,B
4行数据：
A
Cursor,makeDimensionSelector(dim);
227
---
## Page 252
9
3
亿
6
9
5
3
二
6
8
for(:!cursor.isDone(） &&offset.hasNext();cursor.advance(）,offset.next(）)[
int lastoffset=offset.startoffset();
cursor.advanceTo(offset.startDelta());
for(String metric:metrics）{
final MapmetSelectors=Maps.newHashMap(）;
228
metSelectors.put(metric,metricSelector);
final ObjectColumnSelector metricSelector=cursor.makeObjectColumnSelector(metric);
for(Map.Entry dimSelector :dimSelectors.entrySet(）){
final String metric= metSelector.getKey(）;
]else{
if（selector==null）{
final DimensionSelector selector=dimSelector.getValue(）;
final String dim=dimSelector.getKey();
theEvent.put(dim,null);
if （vals.size（）==1）{
final IndexedInts vals=selector.getRow();
else{
heEvent.put(dim, dimVal);
final String dimVal=selector.lookupName(vals.get（0));
theEvent.put(dim,dimVals);
for (int i= 0;i dimVals=Lists.newArrayList();
(i）));
theEvent.put(EventHolder.timestampKey,new DateTime(timestampColumnSelector
get(））);
ObjectColumnSelector>metSelector:metSelectors.entrySet())
Druid实时大数据分析原理与实践
---
## Page 253
5
5
9
的管理和分发，用于控制历史节点上的Segment装载和移除，并且保持Segment在各个历史
8.7
Builder中，SelectResultValueBuilder采用队列存放Select查询的结果。
维度值；如果size大于1，则说明是多值维度，使用List存放多值。
如果indexedInt 的 size为1，则取单值，然后再利用 selector的 lookupName方法获取真实的
代表一条事件记录。首先利用selector的getRow获取indexedInt，这是字典编码的整数列表，
builder.finished(segmentId, lastoffset);
节点上的负载平衡。
tifiers.
第8章
builder.addEntry(new EventHolder(segmentId,lastoffset=offset.current(),theEvent));
Coordinator是Druid的中心协调模块，用于解耦各个模块之间的直接联系，负责Segment
第52行，此时已经得到一行记录中所需的维度和Metric的值，放人SelectResultValue-
第41~50行，遍历metSelectors获取Metric的值，都是使用ObjectColumnSelecotr。
第22~39行遍历dimSelectors获取维度的值，并按照dim->dimValues放到event中，event
第18~53行，遍历Cursor，直到Cursor达到最后位置或者PageOfset达到设定的阈值。
第15行，使用Cursor的advanceTo方法跳到开始偏移处。
第13行，根据Segment获取开始Offset。需要在Query的pagingSpec中设置paginglden-
第7~11行，根据Metric创建ObjectColumnSelecotr放在metSelectors 中。
第2~5行，
}else{
if(selector
final ObjectColumnSelector selector=metSelector.getValue();
theEvent.put(metric,selector.get());
theEvent.put(metric,null);
Coordinator模块
核心源代码探析
，根据维度创建DimensionSelector放在dimSelectors中。
==null）
229
---