Evaluate JSON path predicate (operator @@).
• jsonb_path_query() => setof jsonb
Extract a sequence of SQL/JSON items from a JSON value.
• jsonb_path_query_array() => jsonb
Extract a sequence of SQL/JSON items wrapped into JSON array.
• jsonb_path_query_first() => jsonb
Extract the first SQL/JSON item from a JSON value.
Jsonpath functions
• All jsonb_path_xxx() functions have the same signature:
jsonb_path_xxx(
js jsonb,
jsp jsonpath,
vars jsonb DEFAULT '{}',
silent boolean DEFAULT false
)
• "vars" is a jsonb object used for passing jsonpath variables:
SELECT jsonb_path_query_array('[1,2,3,4,5]', '$[*] ? (@ > $x)',
vars => '{"x": 2}');
jsonb_path_query_array
------------------------
[3, 4, 5]
Jsonpath functions
•
"silent" flag enables suppression of errors:
SELECT jsonb_path_query('[]', 'strict $.a');
ERROR: jsonpath member accessor can only be applied to an object
SELECT jsonb_path_query('[]', 'strict $.a', silent => true);
jsonb_path_query
------------------
(0 rows)
Jsonpath functions: Examples
•
jsonb_path_exists('{"a": 1}', '$.a') => true
jsonb_path_exists('{"a": 1}', '$.b') => false
•
jsonb_path_match('{"a": 1}', '$.a == 1') => true
jsonb_path_match('{"a": 1}', '$.a >= 2') => false
•
jsonb_path_query('{"a": [1,2,3,4,5]}',
'$.a[*] ? (@ > 2)') => 3, 4, 5 (3 rows)
jsonb_path_query('{"a": [1,2,3,4,5]}',
'$.a[*] ? (@ > 5)') => (0 rows)
Jsonpath functions: Examples
•
jsonb_path_query_array('{"a": [1,2,3,4,5]}',
'$.a[*] ? (@ > 2)') => [3, 4, 5]
jsonb_path_query_array('{"a": [1,2,3,4,5]}',
'$.a[*] ? (@ > 5)') => []
•
jsonb_path_query_first('{"a": [1,2,3,4,5]}',
'$.a[*] ? (@ > 2)') => 3
jsonb_path_query_first('{"a": [1,2,3,4,5]}',
'$.a[*] ? (@ > 5)') => NULL
Jsonpath: boolean operators for jsonb
• jsonb @? jsonpath (exists)
Test whether a JSON path expression returns any SQL/JSON items.
jsonb '[1,2,3]' @? '$[*] ? (@ == 3)' => true
• jsonb @@ jsonpath (match)
Evaluate JSON path predicate ( unknown converts to SQL NULL )
jsonb '[1,2,3]' @@ '$[*] == 3' => true
jsonb '1' @@ '$/0 > 1' => NULL
• These operators are interchangeable:
js @? '$.a'  js @@ 'exists($.a)'
js @@ '$.a == 1'  js @? '$ ? ($.a == 1)'
$.floor[0,1].apt[1 to last]
[
{
"no": 2,
"area": 80,
"rooms": 3
},
{
"no": 3,
"area": null,
"rooms": 2
},
{
"no": 5,
"area": 60,
"rooms": 2
}
]
(1 row)
$.floor[0, 1].apt[1 to last]
PG12 (jsonpath) query
●
SELECT jsonb_path_query_array(js, '$.floor[0, 1].apt[1 to last]')
FROM house;
PG11 query
●
SELECT jsonb_agg(apt)
FROM (SELECT apt->generate_series(1, jsonb_array_length(apt) - 1)
FROM (SELECT js->'floor'->unnest(array[0, 1])->'apt'
FROM house) apts(apt)) apts(apt);
$.floor[*].apt[*] ? (@.area > 40 && @.area  40 && @.area  40 && @.area 'floor')->'apt')
FROM house) apts(apt)
WHERE (apt->>'area')::int > 40 AND (apt->>'area')::int  operator
• Overlapping of large postings might be slow
• jsonb_hash_ops extracts hashes of paths:
• hash("k1"."v1"), hash("k2".#."v2"), hash("k2".#."v3")
• Supports only contains @> operator
• Much faster and smaller than default opclass (for @>)
JSONB indexing: Jsquery extension
• jsonb_path_value_ops
• (hash(full_path);value)
• exact and range queries on values, exact path searches
• jsonb_laxpath_value_ops (branch sqljson)
• The same as above, but array path items are ignored, which greatly simplifies
extraction of lax JSON path queries.
• jsonb_value_path_ops
• (value; bloom(path_1) | bloom(path_2) | … bloom(path_N))
• Exact value search and wildcard path queries.
• Also, jsquery provides debugging and query optimizer with hints.
Jsonpath queries could use existing jsonb indexes
• Find all authors with the same bookmarks as the given author
CREATE index ON bookmarks USING gin(jb jsonb_path_ops );
SELECT
b1.jb->'author'
FROM
bookmarks b1,
bookmarks b2
WHERE
b1.jb @@ format('$.title == %s && $.author != %s', b2.jb -> 'title', b2.jb -> 'author')::jsonpath
AND b2.jb @@ '$.author == "ant.on"'::jsonpath;
Seq scan: 35000 ms, Index scan: 6 ms
Jsonpath performance (simple queries)
• Test table with 3 mln rows
CREATE TABLE t AS
SELECT jsonb_build_object('x', jsonb_build_object('y', jsonb_build_object('z', i::text))) AS js
FROM generate_series(1, 3000000) i;
SELECT * from t where jsonb_path_query_first(js, '$.x.y.z') = '"123"';
js
--------------------------
{"x": {"y": {"z": "123"}}}
(1 row)
Jsonpath performance (simple queries)
• Performance of arrow operators is slightly better for simple queries, but
jsonpath allows more complex queries.
query | time, ms |
---------------------------------------------------------------------
jsonb_path_query_first(js, '$.x.y.z') = '"123"' | 1700 |
js->'x'->'y'->'z' = '"123"' | 1700 |
jsonb_path_query_first(js, '$.x.y.z')->>0 = '123' | 600 |
js->'x'->'y'->>'z' = '123' | 430 |
jsonb_path_exists(js, '$ ? ($.x.y.z == "123")') | 1000 |
jsonb_path_match(js, '$.x.y.z == "123"') | 1000 |
jsonb_path_match(js, '$.x.y.z == $x', '{"x": "123"}') | 1100 |
jsonb_path_match(js, '$.x.y.z == $x', | 1100 |immutable
jsonb_object(array['x'], array['123'])) | |
jsonb_path_match(js, '$.x.y.z == $x', | 2800 | stable
jsonb_build_object('x', '123')) | |
jsonb_extract_path(js, 'x', 'y', 'z') = '"123"' | 1670 |
jsonb_extract_path_text(js, 'x', 'y', 'z') = '123' | 580 |
Jsonpath performance (complex queries)
• Test table with 1 mln rows
CREATE TABLE t AS
SELECT jsonb_agg(i)::jsonb js
FROM generate_series(0, 9999999) i GROUP BY i / 10;
SELECT * FROM tt LIMIT 10;
js
--------------------------------------------------------------------------------------------
[7900, 7901, 7902, 7903, 7904, 7905, 7906, 7907, 7908, 7909]
[6627180, 6627181, 6627182, 6627183, 6627184, 6627185, 6627186, 6627187, 6627188, 6627189]
[6943390, 6943391, 6943392, 6943393, 6943394, 6943395, 6943396, 6943397, 6943398, 6943399]
[2333380, 2333381, 2333382, 2333383, 2333384, 2333385, 2333386, 2333387, 2333388, 2333389]
[1299760, 1299761, 1299762, 1299763, 1299764, 1299765, 1299766, 1299767, 1299768, 1299769]
[7560020, 7560021, 7560022, 7560023, 7560024, 7560025, 7560026, 7560027, 7560028, 7560029]
[1641250, 1641251, 1641252, 1641253, 1641254, 1641255, 1641256, 1641257, 1641258, 1641259]
[5020840, 5020841, 5020842, 5020843, 5020844, 5020845, 5020846, 5020847, 5020848, 5020849]
[1575140, 1575141, 1575142, 1575143, 1575144, 1575145, 1575146, 1575147, 1575148, 1575149]
[5035140, 5035141, 5035142, 5035143, 5035144, 5035145, 5035146, 5035147, 5035148, 5035149]
(10 rows)
Jsonpath performance (complex queries)
• Performance of jsonpath for complex queries is better, because of
internal executor.
query | time, ms
---------------------------------------------------------------------
js @> '1' | 620
js @@ '$[*] == 1' | 1274
exists (select from jsonb_array_elements(js) e where e = '1') | 5926
js @@ '$[*] i i 'id' FROM names
"role": "actor",
WHERE jb @@ '$.roles[*] ? (@.role == "actor").title ==
"title": ….
$.roles[*] ? (@.role == "editor").title
}
&&
…
$.roles[*].role == "editor" &&
{}
$.roles[*].role == "actor"
]
';
Sequential Scan: 29748.223 ms
Sequential Scan (parallel): 4678.925 ms
Bitmap Index Scan ( jsquery index): 2328.880 ms
Jsonpath intra joins (joining parts of the same column)
Query: find all the actors && editors in the same movie (43808 out of 6378007 rows in
names). Actress && editors — 7173.
"id": ….
• Jsonpath:
"roles": [
SELECT jb->'id' FROM names {
WHERE jb @@ '$.roles[*] ? (@.role == "actor").title ==
"role": "actor",
$.roles[*] ? (@.role == "editor").title′;
"title": ….
Sequential Scan: 29748.223 ms
}
Sequential Scan (parallel): 4678.925 ms
…
Bitmap Index Scan ( jsquery index): 2328.880 ms
{}
• «Old» way:
]
SELECT jb->'id' FROM names WHERE
jb @> '{"roles": [{"role": "actor"}, {"role": "editor"}]}' AND
(SELECT array_agg(r->>'title') FROM jsonb_array_elements(jb->'roles') roles(r)
WHERE r->>'role' = 'actor') &&
(SELECT array_agg(r->>'title') FROM jsonb_array_elements(jb->'roles') roles(r)
WHERE r->>'role' = 'editor');
Sequential scan: 20233.032 ms
Bitmap Index Scan
: 3860.534 ms
Jsonpath intra joins (joining parts of the same column)
Jsonpath version is the fastest, since it has its own executor, no overheads.
• Jsonpath:
"id": ….
Sequential Scan: 29748.223 ms "roles": [
Sequential Scan (parallel): 4678.925 ms {
Bitmap Index Scan ( jsquery index): 2328.880 ms "role": "actor",
"title": ….
• Arrow (old way):
}
Sequential scan: 20233.032 ms
…
Bitmap Index Scan
: 3860.534 ms
{}
• Relational way: ]
Sequential Scan: 34840.434 ms
Sequential Scan (parallel,6): 4233.829 ms
Bitmap Index Scan: 13745.517 ms