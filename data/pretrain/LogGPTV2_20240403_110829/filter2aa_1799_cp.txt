by demand-zero PTEs. The NT page fault handler in this case allocates zeroed pages. The Secure Kernel 
copies the content of each shared physical page into each new private page and applies the needed 
private relocations if needed.
The loading of the module in the VBS-based enclave is complete. The Secure Kernel applies the SLAT 
protection to the private enclave pages (the NT kernel has no access to the image’s code and data in 
the enclave), unmaps the shared section from the secure system process, and yields the execution to 
the NT kernel. The Loader can now proceed with the next module.
Step 3: Enclave initialization After all the modules have been loaded into the enclave, an applica-
tion initializes the enclave using the InitializeEnclave API, and specifies the maximum number of threads 
supported by the enclave (which will be bound to threads able to perform enclave calls in the contain-
ing process). The Secure Kernel’s INITIALIZE_ENCLAVE secure call’s handler verifies that the policies 
specified during enclave creation are compatible with the policies expressed in the configuration infor-
mation of the primary image, verifies that the enclave’s platform library is loaded (Vertdll.dll), calculates 
the final 256-bit hash of the enclave (used for generating the enclave sealed report), and creates all the 
secure enclave threads. When the execution control is returned to the Windows Loader code in VTL 0, 
the system performs the first enclave call, which executes the initialization code of the platform DLL. 
Step 4: Enclave calls (inbound and outbound) After the enclave has been correctly initialized, an 
application can make an arbitrary number of calls into the enclave. All the callable functions in the en-
clave need to be exported. An application can call the standard GetProcAddress API to get the address 
of the enclave’s function and then use the CallEnclave routine for transferring the execution control to 
the secure enclave. In this scenario, which describes an inbound call, the NtCallEnclave kernel routine 
384 
CHAPTER 9 Virtualization technologies
performs the thread selection algorithm, which binds the calling VTL 0 thread to an enclave thread, 
according to the following rules:
I 
If the normal thread was not previously called by the enclave (enclaves support nested calls),
then an arbitrary idle enclave thread is selected for execution. In case no idle enclave threads
are available, the call blocks until an enclave thread becomes available (if specified by the caller;
otherwise the call simply fails).
I 
In case the normal thread was previously called by the enclave, then the call into the enclave is
made on the same enclave thread that issued the previous call to the host.
A list of enclave thread’s descriptors is maintained by both the NT and Secure Kernel. When a 
normal thread is bound to an enclave thread, the enclave thread is inserted in another list, which is 
called the bound threads list. Enclave threads tracked by the latter are currently running and are not 
available anymore.
After the thread selection algorithm succeeds, the NT kernel emits the CALLENCLAVE secure call. 
The Secure Kernel creates a new stack frame for the enclave and returns to user mode. The first user 
mode function executed in the context of the enclave is RtlEnclaveCallDispatcher. The latter, in case the 
enclave call was the first one ever emitted, transfers the execution to the initialization routine of the 
VSM enclave runtime DLL (Vertdll.dll), which initializes the CRT, the loader, and all the services provided 
to the enclave; it finally calls the DllMain function of the enclave’s main module and of all its dependent 
images (by specifying a DLL_PROCESS_ATTACH reason).
In normal situations, where the enclave platform DLL has been already initialized, the enclave 
dispatcher invokes the DllMain of each module by specifying a DLL_THREAD_ATTACH reason, verifies 
whether the specified address of the target enclave’s function is valid, and, if so, finally calls the target 
function. When the target enclave’s routine finishes its execution, it returns to VTL 0 by calling back into 
the containing process. For doing this, it still relies on the enclave platform DLL, which again calls the 
NtCallEnclave kernel routine. Even though the latter is implemented slightly differently in the Secure 
Kernel, it adopts a similar strategy for returning to VTL 0. The enclave itself can emit enclave calls for 
executing some function in the context of the unsecure containing process. In this scenario (which 
describes an outbound call), the enclave code uses the CallEnclave routine and specifies the address of 
an exported function in the containing process’s main module.
Step 5: Termination and destruction When termination of an entire enclave is requested through 
the TerminateEnclave API, all threads executing inside the enclave will be forced to return to VTL 0. 
Once termination of an enclave is requested, all further calls into the enclave will fail. As threads ter-
minate, their VTL1 thread state (including thread stacks) is destroyed. Once all threads have stopped 
executing, the enclave can be destroyed. When the enclave is destroyed, all remaining VTL 1 state 
associated with the enclave is destroyed, too (including the entire enclave address space), and all pages 
are freed in VTL 0. Finally, the enclave VAD is deleted and all committed enclave memory is freed. 
Destruction is triggered when the containing process calls VirtualFree with the base of the enclave’s ad-
dress range. Destruction is not possible unless the enclave has been terminated or was never initialized.
CHAPTER 9 Virtualization technologies
385
Note As we have discussed previously, all the memory pages that are mapped into the 
enclave address space are private. This has multiple implications. No memory pages that 
belong to the VTL 0 containing process are mapped in the enclave address space, though 
(and also no VADs describing the containing process’s allocation is present). So how can the 
enclave access all the memory pages of the containing process?
The answer is in the Secure Kernel page fault handler (SkmmAccessFault). In its code, the 
fault handler checks whether the faulting process is an enclave. If it is, the fault handler 
checks whether the fault happens because the enclave tried to execute some code out-
side its region. In this case, it raises an access violation error. If the fault is due to a read 
or write access outside the enclave’s address space, the secure page fault handler emits a 
GET_PHYSICAL_PAGE normal service, which results in the VTL 0 access fault handler to be 
called. The VTL 0 handler checks the containing process VAD tree, obtains the PFN of the 
page from its PTE—by bringing it in memory if needed—and returns it to VTL 1. At this 
stage, the Secure Kernel can create the necessary paging structures to map the physical 
page at the same virtual address (which is guaranteed to be available thanks to the property 
of the enclave itself) and resumes the execution. The page is now valid in the context of the 
secure enclave.
Sealing and attestation
VBS-based enclaves, like hardware-based enclaves, support both the sealing and attestation of the 
data. The term sealing refers to the encryption of arbitrary data using one or more encryption keys 
that aren’t visible to the enclave’s code but are managed by the Secure Kernel and tied to the ma-
chine and to the enclave’s identity. Enclaves will never have access to those keys; instead, the Secure 
Kernel offers services for sealing and unsealing arbitrary contents (through the EnclaveSealData and 
EnclaveUnsealData APIs) using an appropriate key designated by the enclave. At the time the data is 
sealed, a set of parameters is supplied that controls which enclaves are permitted to unseal the data. 
The following policies are supported:
I 
Security version number (SVN) of the Secure Kernel and of the primary image No en-
clave can unseal any data that was sealed by a later version of the enclave or the Secure Kernel.
I 
Exact code The data can be unsealed only by an enclave that maps the same identical mod-
ules of the enclave that has sealed it. The Secure Kernel verifies the hash of the Unique ID of
every image mapped in the enclave to allow a proper unsealing.
I 
Same image, family, or author The data can be unsealed only by an enclave that has the
same author ID, family ID, and/or image ID.
I 
Runtime policy The data can be unsealed only if the unsealing enclave has the same debug-
ging policy of the original one (debuggable versus nondebuggable).
386 
CHAPTER 9 Virtualization technologies
It is possible for every enclave to attest to any third party that it is running as a VBS enclave with all the 
protections offered by the VBS-enclave architecture. An enclave attestation report provides proof that 
a specific enclave is running under the control of the Secure Kernel. The attestation report contains the 
identity of all code loaded into the enclave as well as policies controlling how the enclave is executing.
Describing the internal details of the sealing and attestation operations is outside the scope of this 
book. An enclave can generate an attestation report through the EnclaveGetAttestationReport API. The 
memory buffer returned by the API can be transmitted to another enclave, which can “attest” the in-
tegrity of the environment in which the original enclave ran by verifying the attestation report through 
the EnclaveVerifyAttestationReport function.
System Guard runtime attestation
System Guard runtime attestation (SGRA) is an operating system integrity component that leverages 
the aforementioned VBS-enclaves—together with a remote attestation service component—to pro-
vide strong guarantees around its execution environment. This environment is used to assert sensitive 
system properties at runtime and allows for a relying party to observe violations of security promises 
that the system provides. The first implementation of this new technology was introduced in Windows 
10 April 2018 Update (RS4).
SGRA allows an application to view a statement about the security posture of the device. This state-
ment is composed of three parts: 
I 
A session report, which includes a security level describing the attestable boot-time properties
of the device
I 
A runtime report, which describes the runtime state of the device
I 
A signed session certificate, which can be used to verify the reports
The SGRA service, SgrmBroker.exe, hosts a component (SgrmEnclave_secure.dll) that runs in a VTL 
1 as a VBS enclave that continually asserts the system for runtime violations of security features. These 
assertions are surfaced in the runtime report, which can be verified on the backend by a relying part. As 
the assertions run in a separate domain-of-trust, attacking the contents of the runtime report directly 
becomes difficult.
SGRA internals
Figure 9-41 shows a high-level overview of the architecture of Windows Defender System Guard run-
time attestation, which consists of the following client-side components:
I 
The VTL-1 assertion engine: SgrmEnclave_secure.dll
I 
A VTL-0 kernel mode agent: SgrmAgent.sys
I 
A VTL-0 WinTCB Protected broker process hosting the assertion engine: SgrmBroker.exe
I 
A VTL-0 LPAC process used by the WinTCBPP broker process to interact with the networking
stack: SgrmLpac.exe
CHAPTER 9 Virtualization technologies
387
VTL0
VTL1
Windows
Defender
ATP cloud
Attestation
service
Windows
Defender
ATP
Windows
Defender
AV
Critical
Services
Third party
software
Windows Defender System Guard API
Windows Defender System Guard
runtime monitor broker
Windows Defender System Guard
runtime monitor enclave
(Assertion engine)
Windows Defender System Guard
runtime monitor agent
FIGURE 9-41 Windows Defender System Guard runtime attestation’s architecture.
To be able to rapidly respond to threats, SGRA includes a dynamic scripting engine (Lua) forming 
the core of the assertion mechanism that executes in a VTL 1 enclave—an approach that allows fre-
quent assertion logic updates.
Due to the isolation provided by the VBS enclave, threads executing in VTL 1 are limited in terms of 
their ability to access VTL 0 NT APIs. Therefore, for the runtime component of SGRA to perform mean-
ingful work, a way of working around the limited VBS enclave API surface is necessary.
An agent-based approach is implemented to expose VTL 0 facilities to the logic running in VTL 1; 
these facilities are termed assists and are serviced by the SgrmBroker user mode component or by an 
agent driver running in VTL 0 kernel mode (SgrmAgent.sys). The VTL 1 logic running in the enclave can 
call out to these VTL 0 components with the goal of requesting assists that provide a range of facilities, 
including NT kernel synchronize primitives, page mapping capabilities, and so on.
As an example of how this mechanism works, SGRA is capable of allowing the VTL 1 assertion 
engine to directly read VTL 0–owned physical pages. The enclave requests a mapping of an arbitrary 
page via an assist. The page would then be locked and mapped into the SgrmBroker VTL 0 address 
space (making it resident). As VBS enclaves have direct access to the host process address space, the 
secure logic can read directly from the mapped virtual addresses. These reads must be synchronized 
with the VTL 0 kernel itself. The VTL 0 resident broker agent (SgrmAgent.sys driver) is also used to 
perform synchronization.
Assertion logic
As mentioned earlier, SGRA asserts system security properties at runtime. These assertions are execut-
ed within the assertion engine hosted in the VBS-based enclave. Signed Lua bytecode describing the 
assertion logic is provided to the assertion engine during start up.
388 
CHAPTER 9 Virtualization technologies
Assertions are run periodically. When a violation of an asserted property is discovered (that is, when 
the assertion “fails”), the failure is recorded and stored within the enclave. This failure will be exposed 
to a relying party in the runtime report that is generated and signed (with the session certificate) within 
the enclave.
An example of the assertion capabilities provided by SGRA are the asserts surrounding various ex-
ecutive process object attributes—for example, the periodic enumeration of running processes and the 
assertion of the state of a process’s protection bits that govern protected process policies. 
The flow for the assertion engine performing this check can be approximated to the following steps:
1.
The assertion engine running within VTL 1 calls into its VTL 0 host process (SgrmBroker) to
request that an executive process object be referenced by the kernel.
2.
The broker process forwards this request to the kernel mode agent (SgrmAgent), which services
the request by obtaining a reference to the requested executive process object.
3.
The agent notifies the broker that the request has been serviced and passes any necessary
metadata down to the broker.
4.
The broker forwards this response to the requesting VTL 1 assertion logic.
5.
The logic can then elect to have the physical page backing the referenced executive process
object locked and mapped into its accessible address space; this is done by calling out of the
enclave using a similar flow as steps 1 through 4.
6.
Once the page is mapped, the VTL 1 engine can read it directly and check the executive process
object protection bit against its internally held context.
7. 
The VTL 1 logic again calls out to VTL 0 to unwind the page mapping and kernel object reference.
Reports and trust establishment
A WinRT-based API is exposed to allow relying parties to obtain the SGRA session certificate and the 
signed session and runtime reports. This API is not public and is available under NDA to vendors that 
are part of the Microsoft Virus Initiative (note that Microsoft Defender Advanced Threat Protection is 
currently the only in-box component that interfaces directly with SGRA via this API).
The flow for obtaining a trusted statement from SGRA is as follows:
1.
A session is created between the relying party and SGRA. Establishment of the session requires
a network connection. The SgrmEnclave assertion engine (running in VTL-1) generates a public-
private key pair, and the SgrmBroker protected process retrieves the TCG log and the VBS at-
testation report, sending them to Microsoft’s System Guard attestation service with the public
component of the key generated in the previous step.
2.
The attestation service verifies the TCG log (from the TPM) and the VBS attestation report (as
proof that the logic is running within a VBS enclave) and generates a session report describing
the attested boot time properties of the device. It signs the public key with an SGRA attestation
service intermediate key to create a certificate that will be used to verify runtime reports.
CHAPTER 9 Virtualization technologies
389
3.
The session report and the certificate are returned to the relying party. From this point, the
relying party can verify the validity of the session report and runtime certificate.
4.
Periodically, the relying party can request a runtime report from SGRA using the established
session: the SgrmEnclave assertion engine generates a runtime report describing the state of
the assertions that have been run. The report will be signed using the paired private key gener-
ated during session creation and returned to the relying party (the private key never leaves
the enclave).
5.
The relying party can verify the validity of the runtime report against the runtime certificate
obtained earlier and make a policy decision based on both the contents of the session report
(boot-time attested state) and the runtime report (asserted state).
SGRA provides some API that relying parties can use to attest to the state of the device at a point 
in time. The API returns a runtime report that details the claims that Windows Defender System Guard 
runtime attestation makes about the security posture of the system. These claims include assertions, 
which are runtime measurements of sensitive system properties. For example, an app could ask 
Windows Defender System Guard to measure the security of the system from the hardware-backed 
enclave and return a report. The details in this report can be used by the app to decide whether it 
performs a sensitive financial transaction or displays personal information.
As discussed in the previous section, a VBS-based enclave can also expose an enclave attestation 
report signed by a VBS-specific signing key. If Windows Defender System Guard can obtain proof that 
the host system is running with VSM active, it can use this proof with a signed session report to ensure 
that the particular enclave is running. Establishing the trust necessary to guarantee that the runtime 
report is authentic, therefore, requires the following:
1.
Attesting to the boot state of the machine; the OS, hypervisor, and Secure Kernel (SK) binaries
must be signed by Microsoft and configured according to a secure policy.
2.
Binding trust between the TPM and the health of the hypervisor to allow trust in the Measured
Boot Log.
3.
Extracting the needed key (VSM IDKs) from the Measured Boot Log and using these to verify
the VBS enclave signature (see Chapter 12 for further details).
4.
Signing of the public component of an ephemeral key-pair generated within the enclave with
a trusted Certificate Authority to issue a session certificate.
5.
Signing of the runtime report with the ephemeral private key.
Networking calls between the enclave and the Windows Defender System Guard attestation service 
are made from VTL 0. However, the design of the attestation protocol ensures that it is resilient against 
tampering even over untrusted transport mechanisms.
Numerous underlying technologies are required before the chain of trust described earlier can be 
sufficiently established. To inform a relying party of the level of trust in the runtime report that they can 
expect on any particular configuration, a security level is assigned to each Windows Defender System 
Guard attestation service-signed session report. The security level reflects the underlying technologies 
390 
CHAPTER 9 Virtualization technologies
enabled on the platform and attributes a level of trust based on the capabilities of the platform. 
Microsoft is mapping the enablement of various security technologies to security levels and will share 