roles/docker/task/main.yml文件的内容如下：
让我们看看定义了正在使用的角色的roles/docker目录。它由两个子目录、
'Red Hat Enterprise Linux'
'Ubuntu'
include:centos.yml
when:ansible_distribution =='Debian'or ansible_distribution ==
include:debian.yml
name:DebianDaemonisreloaded
tags:[docker]
register: copy_result
template:
name: Debian files are present
tags:[docker]
name: Debian docker-py is present
tags:[docker]
apt:name=python-pip state=present
name:Debian python-pip is present
tags:[docker]
apt:
name: Debian Docker is present
tags:[docker]
when:ansible_distribution =='Centos'or ansible_distribution ==
repo: deb https://apt.dockerproject.org/repo ubuntu-{f debian_
src: "{f docker_cfg }}"
force:yes
tate:latest
name:docker-engines
state:present
6.1CFEngine 87
---
## Page 103
88
第6章Docker世界中的配置管理
正复杂的，但是，根据一些任务及其相互依赖性，一些角色可能或多或少是复杂
为这是在 playbook 中指定的 hosts 参数的值：
host/prod清单相当大，因为它贯穿整本书。目前，我们只对 prod部分感兴趣，因
参数，可以使用这个参数来指定带有 playbook 应该运行的主机列表的清单文件。
个任务有名称和状态键，这些键是 service 的子级，而这些键又是Ansible 模块之
要了解的重要事情是缩进如何工作。YAML 基于键/值、父/子结构。例如，最后一
例如，如果你想知道第二个任务是做什么的，那么可以打开 apt 模块。目前唯一需
http://docs.ansible.com/ansible/list_of_al1_modules.html中查找相关模块。
进一步的解释。如果我错了，并且你确实需要讲解，请在Ansible 文档的
假设你有基本的Linux知识，那么我敢打赌，你可以理解每个任务，也不需要任何
也会很感激能获得更多智慧。但我认为没有理由这样做。Ansible 非常简单直接。
稍后会看到更复杂的例子。我故意说更复杂是因为在 Ansible 中没有什么是真
如果想将相同的配置应用于多台服务器，则只需要添加另一个IP。
10.100.198.201
还有一件事是要使用我们的 prod.yml playbook。执行的命令有-i hosts/prod
如果这是一个完全不同的框架或工具，我会对每一个任务进行逐一解释，你
.[prod]
tags:[docker]
when:copy_result|changed or user_result|changed
service:
name: Debian Docker service is restarted
tags:[docker]
user:
name: vagrant user is added to the docker group
tags:[docker]
command:systemctldaemon-reload
state:restarted
name:docker
group: docker
name:vagrant
register:user_result
---
## Page 104
Compose），下面可以继续进行部署流水线的基本实现。
vagrant destroy-f
exit
要的工具。
来转而去完成令人兴奋的、更高效的任务。
录、监控等，这是本书的一大收获。大规模自动化是成功的关键，让我们解脱出
绍的工具，就不需要 ssh 进入服务器手动执行任务。在我看来，知识和创造力应该
运行所有命令。这样的做法贯穿全书。有了 Ansible 以及其他一些我们稍后将要介
它。我们将依靠它来完成所有的配置管理任务。
的。我希望刚刚运行的 playbook 给你一个近似 Ansible 的工具类型，我希望你喜欢
应用于编码，
随着第一台生产服务器的启动和运行（目前只有UbuntuOS、Docker和Docker
与以前一样，我们将在结束本章的时候销毁所有的虚拟机，第7章再创建所需
你可能已经注意到，我们从来没有进入过 prod 环境，而只是从 cd 服务器远程
，其他一切都应该是自动化的：测试、构建、部署、扩展、日志记
6.1 CFEngine←89
---
## Page 105
机会。现在要用Ansible playbook来配置生产服务器并在其上部署容器（见图7-1)。
多。现阶段，对部署来说，Docker 是唯一的必要条件，同时也是体验配置管理的好
没有生产服务器，就无法完成部署管道的基本实现。我们要用的东西并不
（9）将测试容器推送到镜像库一
（8）运行部署后测试—
（7）集成容器—
（6）在生产服务器上部署容器一
（5）将容器推送到镜像库一
（4）构建容器—已完成。
（3）编译并打包代码一
（2）运行部署前测试—
（1）检出代码—
Implementation of the Deployment
一待完成。
一已完成。
部署管道的实现
待完成。
一已完成。
一已完成。
一已完成。
待完成。
一待完成。
一中间阶段
第7章
---
## Page 106
92
第7章部署管道的实现一
7.1
里，所以**dockercompose.yml*也不例外。可以从GitHub下载该文件：
行的 Docker Compose 配置文件。我喜欢把与服务有关的文件都放在相同的代码库
命令配置了虚拟机 prod。
（映射为主机目录），
ansible-playbook /vagrant/ansible/prod.yml\
vagrantsshcd
vagrantupcdprod
-i/vagrant/ansible/hosts/prod
在生产服务器上部署容器
现在已经正确地配置了生产服务器，可以部署 books-ms 容器了。虽然镜像文
第一行命令启动了虚拟机 cd 和 prod，第二行命令登录到虚拟机 cd，最后一行
让我们来创建和配置本章要使用的虚拟机：
与手动部署管道相比，还差四个步骤。
在CD节点上执行
构建容器
将推送
4
一中间阶段
，可以从那儿得到镜像文件。现在还缺少用来指定容器如何运
图7-1基于Docker的部署管道的初始阶段
前译
检出代码
---
## Page 107
部署到prod服务器。无需登录目标服务器，就可以在远端完成部署。
target app。因为 DOCKER_HOST 指向远端主机，所以 app target 及其连接的容器 db 被
Docker客户端，其位于prod节点和 2375 端口。第二行命令运行Docker Compose
exportDOCKER_HOST=tcp://prod:2375
么做可以减少潜在的冲突。在开发环境中，往往只会运行少量的服务（就是那些现
服务所使用的。然而，docker-compose.yml 有所不同，它只有内部端口部分。这
指定端口的方式。在 docker-compose-dev.yml 中，我们使用由冒号分隔的两个数
个 target，第三个 target 代表了服务所需的数据库。你可能已注意到，我们改变了
app target将运行保存在cd 服务器的镜像库中的容器，同时 app target还连接了第三
到的 targets）：
docker-composeup-dapp
作。因此，打算让Docker 给主机暴露随机的端口。
的端口很容易引起冲突。如果其中的两个服务使用相同的端口，它们都将无法工
在所需要的），然而在生产环境中，有可能同时运行成百上千个服务。使用预定义
字（8080：8080）。第一个端口是Docker暴露给主机的，第二个端口是容器内部的
同时避免了重复的定义。通过扩展服务，可以覆盖原来的参数或增加新的参数。
/books-ms/master/docker-compose.yml
wget https://raw.githubusercontent.com/vfarcic\
下载完 docker-compose.yml 后，下面来快速看看它的内容（不包括本章用不
出于安全原因，调用远端Docker API 的功能默认是关闭的。不过，Ansible
可以设置 DoCKER_HOST 变量来告诉本地的Docker客户端发送命令给远端的
下面运行 Docker Compose 的 app target:
base target包含了容器的基本定义。下一个 target( app)扩展了 base 中的服务，
db: image: mongo
app:
environment:-SERVICE_NAME=books-ms
image: 10.100.198.200:5000/bo0ks-ms
base:
links:-db:db
extends:
ports:-8080
service:base
7.1在生产服务器上部署容器93
---
## Page 108
6
第7章部署管道的实现——中间阶段
docker inspect vagrant_app_1
inspect 命令得到这个随机端口。
vagrant_db_1
vagrant_app_1
Name
docker-compose ps
许信任地址访问远端的 Docker API。
（0.0.0.0）的远程请求。请注意，在实际的生产环境中，我们要严格得多，只允
私有镜像库拉取镜像文件。-H参数告诉 Docker 在 2375 端口上监听来自任何地址
tcp://0.0.0.0:2375-Hunix:///var/run/docker.sock"
文件的内容如下：
playbook 任务可以通过修改/etc/default/docker 配置文件来改变这种行为。配置
感兴趣的部分输出类似于：
因为 Docker 给服务的内部端口 808g 分配了一个随机端口，所以需要使用
输出如下：
通过执行另一个远程调用，可以确认两个容器都真正运行在虚拟机 prod上：
"NetworkSettings":{
"Ports":{
"PortMapping":null,
"MacAddress":"02:42:ac:11:00:04",
"LinkLocalIPv6PrefixLen":0,
"LinkLocalIPv6Address":
"IPv6Gateway":
"IPPrefixLen":
"Gateway":"172.17.42.1",
"EndpointID":"45a8ea03cc2514b128448...",
"Bridge": ""
"IPAddress":"172.17.0.4"
HairpinMode":false,
'GlobalIPv6PrefixLen":0,
"8080/tcp":[
/entrypoint.sh mongod
/run.sh
Command
State
27017/tcp
0.0.0.0:32770->8080/tcp
-----
Ports
---
## Page 109
确认服务正在运行并且已经连接到数据库。
达到同样的目的。现在这个只是临时性的变通做法。
式，这的确不是太好理解。令人欣慰的是，在第8章中，我们将使用更好的方式来
32770映射到内部端口8080。更好的做法是使用--format参数：
要）。现在感兴趣的部分是 Networksettings.ports，在上面的例子中，HostPort
我们把得到的端口保存在 PORT 变量中。现在可以使用已经熟悉的cur1命令来
curl-H'Content-Type:application/json’-XPUT-d\
不要对--format 的值的语法感到害怕。它使用了 Go 语言的 text/template 格
echo $PORT
0).HostPort}}'\
PORT=$（dockerinspect\
原始的输出比这个要多，包含所有的信息，有些是我们需要的（有些不需
vagrant_app_1)
\"author\":\"John Doe\",
"{\"_id\":3,
http://prod:$PORT/api/v1/books\
\"description\": \"Not a bad as the first book\"}" \
\"author\":\"John Doe\",
\"title\":\"My Second Book\",
"{\"_id\":2,
http://prod:$PORT/api/v1/books\
"{\"_id\":1,
--format='{{(index(index.NetworkSettings.Ports "8080/tcp")
\"author\":\"JohnDoe\"，
"title\":\"My First Book\",
"SecondaryIPv6Addresses":null
"SecondaryIPAddresses": null,
"Sandboxkey":"/var/run/docker/netns/f78bc787f617",
-H'Content-Type:application/json'-X PUT-d\
"HostIp":"0.0.0.0",
7.1在生产服务器上部署容器
95
---
## Page 110
96
第7章部署管道的实现一
Docker UI
多资源，如图7-2所示。
行大量容器时，这的确非常有用。DockerUI 是非常轻量级的应用，并不会使用太
的方式来获取系统的概况，以及与容器、网络和镜像有关的详细信息。当集群运
桌面方案，比如VNC。
器的桌面并且已经安装了浏览器。如果你需要远程访问服务器，则可以试试远程
有问题。相反，如果使用公司的服务器来运行这些例子，请确保你可以访问服务
问这些IP。如果你使用的是笔记本电脑，那么用你的浏览器访问Docker UI应该没
览器打开http://10.100.198.201:9000，就能看到在 prod节点上运行的实例。
docker Ansible role 的一部分，运行在所有配置了Docker 的服务器上。使用任何浏
Docker API完成的。
的有效方式。我们有更好的方式并且还能做集成测试。
认可以从数据库中查询到它们。无论如何，这都不是一种验证服务部署是否正确
虽然使用命令行（CLI）操作容器更为高效，但是 Docker UI 提供了一种直观
请注意，所有通过Vagrant设置的IP地址都是私有的，意味着只能在宿主机访
Docker UI 是一个很好的开源项目，现在正是介绍它的合适机会。它被定义为
值得注意的是，我们并没有登录 prod 节点。所有的部署命令都是通过远端的
和以前一样，在开发环境下运行相同的命令时，在数据库中添加三本书并确
最后一行命令的输出如下：
curl
curlhttp://prod:$PORT/api/v1/books\
"title":"My First Book"
"id":1,
.b
\"description\":\"Failed writers club\"}"\
http://prod:$PORT/api/v1/books/_id/1\
一中间阶段
---