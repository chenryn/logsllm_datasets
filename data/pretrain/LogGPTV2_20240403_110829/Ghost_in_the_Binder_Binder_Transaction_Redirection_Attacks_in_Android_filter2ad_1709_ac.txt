status_t setCBIProxy (sp  cbi ) {
1 class SubService : public BnSubTBI {
2
3
4
5 private :
6
7 }
8 class TService : public BnTBI {
9 public :
10
11
12
13
14
15
16
17
18
19 private :
20
21 }
}
status_t sendSubTBI () {
this -> mCBI = cbi ;
return OK ;
sp  subTBI = new subTBI ;
mCBI -> callback ( subTBI );
return OK ;
}
sp  mCBI ;
The attacker then implements an evil CBI server with callback
function to receive the Binder proxy of SubTBI (Line 2 below) and
to trigger the bug (Line 3).
status_t callback (sp  subTBI ){
subTBI -> bofBug (0 xdeadbeaf );
1 class EvilCBIServer : public BnCBI {
2
3
4
5 };
6 int main () {
7
8
}
sp  cbi = new EvilCBIServer ;
sp  service = ServiceManager :: getService (" tservice "
);
service -> setCBIProxy ( cbi ); // set evil cbi
service -> sendSubTBI () ; // trigger the bof bug
9
10
11 }
We found two Type III vulnerabilities in the TBI IStatsd. This
TBI, once induced to communicate with our CBI IPullAtomCallback,
constructs and sends a Binder proxy of IPullAtomResultReceiver,
whose Binder server executes in the same process with the TBI
server and enjoys the same privilege. Through invoking IPullAtom-
ResultReceiver’s function with malformed buffer, we can trigger
two memory corruption bugs via out-of-bounds writes.
Type IV: Multiple CBIs, Multiple TBIs. Type IV is a combina-
tion of Type II and III. The attacked TBI is provided by another TBI,
and the CBI causing actual damage is from another CBI crafted by
the attacker. We have not found any vulnerabilities of this type,
but these attack scenarios do exist in the hierarchical Binder inter-
faces [32] in Android system.
7 DISCUSSION
7.1 Impact of the BiTRe Attacks
Attacking Unprotected Territories. The vulnerabilities we dis-
covered in Binder exceed those in previous studies [25, 28, 42] not
only in quantity but also in damage, because we explore a new and
pervasive attack surface mostly neglected by both academia and
industry. Specifically, existing studies do not attend to the possibil-
ity that a Binder server returns malformed data to a system service.
Moreover, Binder objects nested among the input parameters and
outputs of other Binder interfaces—those involved in Type II and
Type III vulnerabilities—are excluded from these studies, as they
are deemed unreachable by the attacker.
Non-Triviality of Fixing BiTRe Attacks. There is no silver bul-
let that can eliminate the BiTRe attacks. The role-reversal case
cannot be forbidden as it enables the separation of system services
into different Binder servers so that their operations are mostly
independent of each other, which is indispensable for Android’s
security. Enabling universal mutual authentication may results in
information leakage from the system services to the applications,
which would invalidate, rather than improve, the security model of
the C/S architecture.
7.2 Mitigating the BiTRe Attacks
Given the impossibility of a simple defense, we suggest the follow-
ing mitigation efforts on three different levels.
New Protection Mechanism. Although mutual authentication is
inadvisable, we observe that a Binder client can verify whether two
Binder proxies are referring to the same Binder server, which leads
to our following solution. We suggest introducing a new system
service, registered in ServiceManager and in charge of construct-
ing Binder servers—corresponding to those in our CBI list—for
applications. This service implements strict restrictions to forbid
overwriting critical functions. Applications should always commis-
sion this service to construct their Binder servers. Note that we
cannot prevent an application from bypassing this requirement and
constructing CBI servers by themselves; however, that should not be
a problem if the next rule is enforced. Whenever a system service
first transacts with a Binder server, it should query the Binder-
server-construction service if the Binder server is not constructed
by itself. The construction service then traverses its global object
map and responds with whether the object is constructed by it. The
system service aborts the transaction if a match is not found. To
avoid information leakage from the Binder-server-construction ser-
vice, an application, which runs in unprivileged processes, cannot
query for Binder servers not commissioned by itself.
Sanitization Measures. Input validation must be enforced in all
system services, regardless of whether the corresponding Binder
servers/clients are trusted. However, manual sanitization during
development is not adequate for ruling out all vulnerabilities. Aux-
iliary frameworks, such as the RLBox API [36], can be considered
for mitigating unknown vulnerabilities.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1592Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Raising Awareness. BiTRe attacks should be explicitly addressed
in both Android’s development and its security audits. Specifi-
cally, Android developers should refactor the Binder interfaces to
avoid the transmission of active objects whenever possible, thus
reducing the role-reversal cases. Security auditors should test all
Binder interface functions, rather than excluding those believed to
be unreachable by attackers, prioritizing CBIs with high Interface
Complexity and their corresponding TBIs.
7.3 Exploring the Folded Attack Surfaces
The vulnerabilities we discovered are by no means exhaustive in
the BiTRe family. Moreover, BiTRe is just one example of a greater
family, where the attack surface is folded in exceptions (e.g., role
reversal enabled by the active object transmission of Binder) of
the designer-envisioned security model (e.g., the fixed-role C/S
architecture). We suggest future research to explore these folded
attack surfaces in the following directions:
Thorough Inspection of the BiTRe Attacks. Our inspection can
be extended in two aspects. First, to continue reviewing TBIs and
CBIs, both manually and with the help of automatic vulnerability
discovery methods such as fuzzing. Second, to include Java system
services and hardware/vendor services in the analysis.
BiTRe Attacks in Other Platforms. The temporary reversal of
C/S roles is not unique to Android. For example, svchost, a Win-
dows system service that hosts many Windows services, can also
temporarily act as a client process to interact with a customized
server received from an application [35]. The susceptibility of other
systems to BiTRe attacks is worth further investigation.
Other Folded Attack Surfaces. The BiTRe attacks resemble the
tip of the iceberg, where attackers exploit the inconspicuous excep-
tions that violate the system’s general security model to invalidate
its security guarantees. Similar examples include the exceptions
of sending allowed objects to Android Sandbox against the general
model of isolation; the possibility to develop applications in C/C++
in Android against the general adaptation of Java. Nevertheless,
these exceptions are usually ignored by both developers and re-
searchers, whose investigations are often restrained by the vision
of the system designer—even though the attackers are not. With
this study, we, therefore, aim to raise the community’s awareness
of these folded attack surfaces so that we can work together to
unfold their mechanisms, enumerate the vulnerabilities and take
precautions.
8 RELATED WORK
We first introduce three types of prior studies on Android IPC
security that assumes a fixed Binder-client role of the attacker.
Afterward, we highlight two other attacks that also construct Binder
servers, which inspire our work.
Permission Related Vulnerabilities. Several studies [2, 12–14,
19] analyze the necessary permissions, which are sometimes not
documented, to launch each developer API method. Based on these
API-to-permission-set mappings, other studies, including AceDroid [1],
ACMiner [22] and Kratos [39], discover that different paths visiting
the same system resource may demand different sets of permis-
sions. Further studies [18, 23] extend these studies to visit system
resources indirectly via some vulnerable deputy APIs, bypassing
the permission checks.
Parcel Deserialization Vulnerabilities. The XBRF risk proposed
by Rosa [38] cannot cause any damage in practice, as the attack
is defended by Binder’s object searching algorithm. XBRF is not
similar to BiTRe: it focuses on the deserialization process and does
not involve the customization of Binder servers. Another family of
Parcelable mismatch bugs, first discovered by Bednarski [15] and
then caught in Android Trojans in the wild [40], allow attackers to
launch arbitrary components.
Input Validation Vulnerabilities. Input validation in Android
is often “unstructured, ill-defined and fragmented” compared to
permission checks, making it more challenging to analyze [44].
Researchers conduct code review [21], or builds systems leverag-
ing fuzz testing [16, 20, 27, 32, 32, 43], taint analysis [42], machine
learning [44] and symbolic execution [33] to find vulnerabilities
in system services. For countermeasures, Android fixes numerous
vulnerabilities [31] and applies multiple exploit containment mea-
sures [29] to restrain the security impact even when some processes
are compromised.
Vulnerabilities Involving Customized Binder Servers. Wang
et al. [42] proposed the “call me back” attack via constructing ir-
responsive callback functions and resulting in a denial of service
of a few system services and apps. As a case study among a series
of Parcel deserialization bugs [24], He identified a vulnerability
in the unmarshalling of AMessage objects. Triggering this vulner-
ability involves constructing a CBI Server, i.e., the IStreamSource
server, and sending the malformed AMessage from IStreamSource
to IMediaPlayer.
9 CONCLUSION
As Binder follows the classic C/S architecture, previous security
analyses and studies were trapped by its fixed-role assumption,
neglecting the fact that the role-reversal case is widely adopted by
both system services and applications. In this paper, we highlighted
the severe security implications of this role-reversal case: it allows
the attacker to reach a large attack surface that was previously
deemed unreachable, thus often unprotected. We discovered a se-
ries of vulnerabilities that exploit the attack surface from three
approaches. Unfortunately, the vulnerabilities we discovered are
by no means exhaustive in the BiTRe family. Neither can the coun-
termeasures we proposed guarantee the elimination of the attack
surface. We advocate developers and researchers scrutinize this
folded attack surface, among others of similar nature, before they
are maliciously exploited by attackers.
ACKNOWLEDGEMENTS
We would like to thank Prof. Kaiyu Shao from China University of
Political Science and Law and the anonymous reviewers for their
constructive comments. This work is supported by the Strategic
Priority Research Program of Chinese Academy of Sciences (No.
XDC02040100). Ren is partially supported by Shandong Key Re-
search and Development Program (Grant No. 2020ZLYS09).
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1593CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Xiaobo Xiang, Ren Zhang, Hanxiang Wen, Xiaorui Gong (cid:66), and Baoxu Liu
REFERENCES
[1] Yousra Aafer, Jianjun Huang, Yi Sun, Xiangyu Zhang, Ninghui Li, and Chen
Tian. 2018. AceDroid: Normalizing Diverse Android Access Control Checks for
Inconsistency Detection. In NDSS.
[2] Yousra Aafer, Guanhong Tao, Jianjun Huang, Xiangyu Zhang, and Ninghui
Li. 2018. Precise android api protection mapping derivation and reasoning. In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications
Security. 1151–1164.
[3] Yousra Aafer, Wei You, Yi Sun, Yu Shi, Xiangyu Zhang, and Heng Yin. 2021.
Android SmartTVs Vulnerability Discovery via Log-Guided Fuzzing. In 30th
USENIX Security Symposium (USENIX Security 21).
[4] Muath Alkhalaf, Shauvik Roy Choudhary, Mattia Fazzini, Tevfik Bultan, Alessan-
dro Orso, and Christopher Kruegel. 2012. Viewpoints: differential string analysis
for discovering client-and server-side input validation inconsistencies. In Pro-
ceedings of the 2012 International Symposium on Software Testing and Analysis.
56–66.
https:
libbinder: Add SafeInterface.
//cs.android.com/android/_/android/platform/frameworks/native/+/
d630e520de9ff4bc50723a7e8f91b6d9be27db1c. Accessed on Jan 31, 2021.
[5] Android Code Search. 2021.
[6] Android Code Search. 2021.
Source code of CameraService.h in AOSP.
https://cs.android.com/android/platform/superproject/+/master:frameworks/
av/services/camera/libcameraservice/CameraService.h?q=cameraservice.
Accessed on May 7, 2021.
[7] Android developers. 2021. Android AppOpsManager. https://developer.android.
com/reference/android/app/AppOpsManager. Accessed on Aug 3, 2021.
[8] Android developers. 2021. Android PermissionChecker Developer API. https://
developer.android.com/reference/androidx/core/content/PermissionChecker. Ac-
cessed on July 29, 2021.
[9] Android Developers. 2021. Parcel. https://developer.android.com/reference/
android/os/Parcel#active-objects. Accessed on Feb 2, 2021.
[10] Android Developers Blog. 2017. Here comes Treble: A modular base for An-
droid. https://android-developers.googleblog.com/2017/05/here-comes-treble-
modular-base-for.html. Accessed on Feb 2, 2021.
[11] Android Open Source Project. 2021. Android Interface Definition Language
(AIDL). https://developer.android.com/guide/components/aidl. Accessed on Jan
31, 2021.
[12] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. 2012. PScout: ana-
lyzing the Android permission specification. In the ACM Conference on Computer
and Communications Security. 217–228.
[13] Michael Backes, Sven Bugiel, Erik Derr, Patrick McDaniel, Damien Octeau, and
Sebastian Weisgerber. 2016. On demystifying the Android application framework:
Re-visiting Android permission specification analysis. In 25th USENIX security
symposium (USENIX security 16). 1101–1118.
[14] A. Bartel, J. Klein, M. Monperrus, and Y. Le Traon. 2014. Static Analysis for
Extracting Permission Checks of a Large Scale Framework: The Challenges and
Solutions for Analyzing Android. IEEE Transactions on Software Engineering 40,
6 (2014), 617–632.
[15] Michal Bednarski. 2017. Reparcel Bug. https://github.com/michalbednarski/
ReparcelBug. Accessed on Feb 3, 2021.
[16] Cao Chen, Gao Neng, Liu Peng, and Xiang Ji. 2015. Towards Analyzing the Input
Validation Vulnerabilities Associated with Android System Services. In Proceed-
ings of the 31st Annual Computer Security Applications Conference. Association
for Computing Machinery, 361–370.
[17] Haining Chen, Ninghui Li, William Enck, Yousra Aafer, and Xiangyu Zhang.
2017. Analysis of SEAndroid policies: combining MAC and DAC in Android.
In Proceedings of the 33rd Annual Computer Security Applications Conference.
553–565.
[18] William Enck. 2020. Analysis of access control enforcement in Android. In
Proceedings of the 25th ACM Symposium on Access Control Models and Technologies.
117–118.
[19] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner.
2011. Android permissions demystified. In Proceedings of the 18th ACM conference
on Computer and communications security. 627–638.
[20] Huan Feng and Kang G Shin. 2016. BinderCracker: Assessing the Robustness of
Android System Services. arXiv preprint arXiv:1604.06964 (2016).
privilege. BlackHat USA (2015).
[22] Sigmund Albert Gorski, Benjamin Andow, Adwait Nadkarni, Sunil Manandhar,
William Enck, Eric Bodden, and Alexandre Bartel. 2019. ACMiner: Extraction
and Analysis of Authorization Checks in Android’s Middleware. In Proceedings of
the Ninth ACM Conference on Data and Application Security and Privacy. 25–36.
[23] Sigmund Albert Gorski III and William Enck. 2019. ARF: identifying re-delegation
vulnerabilities in Android system services. In Proceedings of the 12th Conference
on Security and Privacy in Wireless and Mobile Networks. 151–161.
[24] Qidan He. 2016. Hey your Parcel Looks Bad, Fuzzing and Exploiting Parcelization
vulnerabilities in Android. In BlackHat Asia, 2016.
[21] Guang Gong. 2015. Fuzzing android system services by binder call to escalate
[25] Heqing Huang, Sencun Zhu, Kai Chen, and Peng Liu. 2015. From system services
freezing to system server shutdown in Android: All you need is a loop in an app. In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications
Security. 1236–1247.
[26] Jim Huang. 2012. Android IPC Mechanism. https://www.slideshare.net/jserv/
android-ipc-mechanism.
[27] Antonio Ken Iannillo, Roberto Natella, Domenico Cotroneo, and Cristina Nita-
Rotaru. 2017. Chizpurfle: A gray-box Android fuzzer for vendor service customiza-
tions. In IEEE 28th International Symposium on Software Reliability Engineering
(ISSRE). 1–11.
[28] Wang Kai, Zhang Yuqing, Liu Qixu, and Fan Dan. 2015. A fuzzing test for dynamic
vulnerability detection on Android Binder mechanism. In IEEE Conference on
Communications and Network Security (CNS). 709–710.
[29] Nick Kralevich. 2017. Honey, I Shrunk the Attack Surface – Adventures in
Android Security Hardening.
[30] Chris Lattner. 2008. LLVM and Clang: Next generation compiler technology. In
The BSD conference, Vol. 5.
[31] Mario Linares-Vásquez, Gabriele Bavota, and Camilo Escobar-Velásquez. 2017.
An empirical study on Android-related vulnerabilities. In IEEE/ACM 14th Inter-
national Conference on Mining Software Repositories (MSR). IEEE, 2–13.
[32] Baozheng Liu, Chao Zhang, Guang Gong, Yishun Zeng, Haifeng Ruan, and Jian-
wei Zhuge. 2020. FANS: Fuzzing Android Native System Services via Automated
Interface Analysis. In 29th USENIX Security Symposium (USENIX Security).
[33] Lannan Luo, Qiang Zeng, Chen Cao, Kai Chen, Jian Liu, Limin Liu, Neng Gao,
Min Yang, Xinyu Xing, and Peng Liu. 2017. System service call-oriented symbolic
execution of Android framework with applications to vulnerability discovery
and exploit generation. In Proceedings of the 15th Annual International Conference
on Mobile Systems, Applications, and Services. 225–238.
[34] Pratyusa K Manadhata and Jeannette M Wing. 2010. An attack surface metric.
IEEE Transactions on Software Engineering 37, 3 (2010), 371–386.
[35] Microsoft Security Update Guide. 2020. CVE-2020-1393 Windows Diagnostics
Hub Elevation of Privilege Vulnerability. https://msrc.microsoft.com/update-
guide/vulnerability/CVE-2020-1393. Accessed on Jan 31, 2021.
[36] Shravan Narayan, Craig Disselkoen, Tal Garfinkel, Nathan Froyd, Eric Rahm,
Sorin Lerner, Hovav Shacham, and Deian Stefan. 2020. Retrofitting fine grain iso-
lation in the Firefox renderer. In 29th {USENIX} Security Symposium ({USENIX}
Security 20). 699–716.
[37] Stephen Hines Nick Desaulniers, Greg Hackmann. 2021. Compiling Android
userspace and Linux Kernel with LLVM. https://llvm.org/devmtg/2017-10/slides/
Hines-CompilingAndroidKeynote.pdf. Accessed on Jan 31, 2021.
[38] Tomáš Rosa. 2011. Android Binder Security Note: On Passing Binder Through
Another Binder. https://crypto.hyperlink.cz/files/xbinder.pdf. Accessed on Feb
2, 2021.
[39] Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason Ott, and Zhiyun Qian.
2016. Kratos: Discovering Inconsistent Security Policy Enforcement in the An-
droid Framework.. In NDSS.
https://sudonull.com/post/26295-EvilParcel-Vulnerability-Analysis-Doctor-
Web-Blog. Accessed on Feb 3, 2021.
[40] SUDONULL.
[41] Tuna. 2021. Monthly tarball of AOSP. https://mirrors.tuna.tsinghua.edu.cn/aosp-
Vulnerability
EvilParcel
Analysis.
2019.
monthly/. Accessed on May 6, 2021.
[42] Kai Wang, Yuqing Zhang, and Peng Liu. 2016. Call Me Back! Attacks on System
Server and System Apps in Android Through Synchronous Callback. In ACM
SIGSAC Conference on Computer and Communications Security. 92–103.
[43] J. Wu, S. Liu, S. Ji, M. Yang, T. Luo, Y. Wu, and Y. Wang. 2017. Exception beyond
Exception: Crashing Android System by Trapping in "Uncaught Exception".
In IEEE/ACM 39th International Conference on Software Engineering: Software
Engineering in Practice Track (ICSE-SEIP). 283–292.
[44] Lei Zhang, Zhemin Yang, Yuyu He, Zhenyu Zhang, Zhiyun Qian, Geng Hong,
Yuan Zhang, and Min Yang. 2018. Invetter: Locating insecure input validations in
android services. In Proceedings of the 2018 ACM SIGSAC Conference on Computer
and Communications Security. 1165–1178.
[45] Walter Zimmer. 1995. Relationships between design patterns. Pattern languages
of program design 57 (1995), 345–364.
A CHOOSING THE ANALYZING STAGE AND
THE ANALYZING TOOLS
Analyzing Stage. The intimidating size of Android’s source code—
115.3 GB as of May 2021 [41]—prevents any manual data extraction
approach. An automatic analysis demands us to first choose among
the three stages of the system—the source code, the binaries, or
analyzing during compilation. Parsing the source code cannot give
us a complete list of Binder interfaces as some Binder interfaces are
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1594Ghost in the Binder: Binder Transaction Redirection Attacks in Android System Services
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Table 3: CBIs triggered by our PoRs and their corresponding TBIs. The column “# CBIF” is the number of invoked CBIFs by
the TBI. Note that the “IBinder” does not stand for an actual CBI; the “# CBIF” column of “IBinder” is the number of death
recipients triggered once killing the CBI server.
CBI
IAudioPolicyServiceClient
IBinder
ICameraDeviceCallbacks
ICameraServiceListener
IMediaHTTPService
IDataSource
IDataSource
IGraphicBufferProducer
IAudioFlingerClient
IBinder
ISetInputWindowsListener
...
# CBIF
2
1
2
1
1
3
3
3
1
1
1
...
Table 4: TBIs with the highest numbers of CTBIFs in An-
droid release 11.0.0_r1.
Interface name
ISurfaceComposer
IKeystoreService
IVold
ICameraService
IServiceManager
ICameraDeviceUser
IWificond
IMediaPlayer
IMountService
ICamera
IStatsd
IThermalService
ISurfaceComposerClient
...
CTBIF TBIF
50
37
81
18
9
23
14
42
27
26
26
11
5
...
32
15
7
7
7
6
6
5
5
5
5
5
5
...
⊲ a parameter of a Binder function
⊲ a set of IBinder objects in param
Algorithm 1 Searching for IBinder Object in a Param
INPUT: 𝑝𝑎𝑟𝑎𝑚
OUTPUT: 𝑟𝑒𝑠
1: function search(𝑝𝑎𝑟𝑎𝑚)
𝑟𝑒𝑠 ← {}
2:
for all 𝑡𝑦𝑝𝑒 ∈ 𝑝𝑎𝑟𝑎𝑚.𝑠𝑢𝑏𝑡𝑦𝑝𝑒𝑠() do
3:
4:
𝑡𝑦𝑝𝑒 ← 𝑡𝑦𝑝𝑒.𝑔𝑒𝑡𝐸𝑙𝑒𝑚𝑒𝑛𝑡𝑇𝑦()
5:
6:
7:
8:
9:
10:
11:
12:
13:
while 𝑡𝑦𝑝𝑒.𝑖𝑠𝑃𝑜𝑖𝑛𝑡𝑒𝑟𝑇𝑦() do
if 𝑡𝑦𝑝𝑒 ∈ 𝑠_𝑣𝑖𝑠𝑖𝑡𝑒𝑑 then
𝑠_𝑣𝑖𝑠𝑖𝑡𝑒𝑑.𝑎𝑑𝑑(𝑡𝑦𝑝𝑒)
if 𝑡𝑦𝑝𝑒.𝑛𝑎𝑚𝑒 == “𝐼𝐵𝑖𝑛𝑑𝑒𝑟” then
𝑟𝑒𝑠.𝑎𝑑𝑑(𝑠𝑢𝑏𝑡𝑦𝑝𝑒)
for all 𝑠𝑢𝑏𝑡𝑦𝑝𝑒 ∈ 𝑡𝑦𝑝𝑒.𝑠𝑢𝑏𝑡𝑦𝑝𝑒𝑠() do
𝑟𝑒𝑠.𝑢𝑛𝑖𝑜𝑛(search(𝑠𝑢𝑏𝑡𝑦𝑝𝑒))
continue
else
return 𝑟𝑒𝑠
TBI
IAudioPolicyService
ICameraService
IMediaMetadataRetriever
IMediaExtractor
ISurfaceComposer
IAudioFlinger
IInputFlinger
...
⇒
⇒
⇒
⇒
⇒
⇒
⇒
⇒
⇒
⇒
⇒
⇒
⇒
defined and implemented in code generated during building [11].
The extensive use of macros, which are not processed until compila-
tion, also renders a pre-compilation analysis inaccurate. Extracting
Binder interfaces from the binary files is also infeasible, as all the
names and data structures are lost after compilation, thwarting us
from identifying Binder interfaces and active objects. Therefore,
we choose to scrutinize the system during compilation in its IR
form, when all the code is generated, and the class names and the
inheritance relationships are still visible.
Analyzing Tools. As Android’s default compilation toolchain since
Oct 2016 [37], LLVM provides powerful APIs for us to implement a
compiler plugin and thus comprehensively enumerate the attack
surface. Here we briefly introduce the capabilities of some LLVM
APIs. Each source file is compiled as a Module in LLVM. For each
Module, we can query its list of functions and their argument lists.
For each argument of a function, we can query its type, which
could either be a synthetic type—class or struct—or a primitive type,
such as integer or char. Synthetic types can be further decomposed.
Moreover, we can restore the class name of a class member function
by querying the type of this pointer—the first or second argument
in the member function’s IR form. Given a class name, we can query
the name of its parent class. By querying the parent class name
recursively, we can restore a class inheritance chain.
B LIST OF CBI-TBI PAIR TRIGGERED BY
PORS.
The selected list of TBI-CBIF paths that can be triggered by our
PoRs is shown in Table 3.
C LIST OF TBIS AND THEIR TBIF & CTBIF
COUNTS.
The selected list of TBIs is shown in Table 4. The number of CTBIFs
indicates how many entry points to which an attacker can send
their CBIs; the number of TBIF shows how many functions which
an attacker can leverage to induce the TBI into proper states.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1595CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Xiaobo Xiang, Ren Zhang, Hanxiang Wen, Xiaorui Gong (cid:66), and Baoxu Liu
in SEARCH
in ANALYSIS
Algorithm 2 Reachability Analysis
INPUT: 𝑏𝑖_𝑠𝑒𝑡
⊲ a set of extracted Binder interfaces
⊲ a set of reachable Binder interfaces
OUTPUT: 𝑟_𝑠𝑒𝑡
1: 𝑠_𝑣𝑖𝑠𝑖𝑡𝑒𝑑 ← {} ⊲ a global set used to avoid infinite recursion
2: 𝑟_𝑣𝑖𝑠𝑖𝑡𝑒𝑑 ← {} ⊲ a global set used to avoid infinite recursion
3: 𝑟_𝑠𝑒𝑡 ← Analyse(𝑏𝑖_𝑠𝑒𝑡)
4: function Analyse(𝑏𝑖_𝑠𝑒𝑡)
𝑡𝑚𝑝_𝑠𝑒𝑡 ← {}
5:
for all 𝑏𝑖 ∈ 𝑏𝑖_𝑠𝑒𝑡 do
6:
7:
8:
9:
10:
11:
12:
13:
if then𝑏𝑖 ∈ 𝑟_𝑣𝑖𝑠𝑖𝑡𝑒𝑑
𝑟_𝑣𝑖𝑠𝑖𝑡𝑒𝑑.𝑎𝑑𝑑(𝑏𝑖)
if is_registed(𝑏𝑖) then
𝑡𝑚𝑝_𝑠𝑒𝑡 .𝑎𝑑𝑑(𝑏𝑖)
if 𝑏𝑖 ∈ 𝑡𝑚𝑝_𝑠𝑒𝑡 then
continue
for all
𝑓 𝑢𝑛𝑐 ∈ 𝑏𝑖
for all 𝑝𝑎𝑟𝑎𝑚 ∈ 𝑓 𝑢𝑛𝑐 do
if is_outparam(param) then
𝑠_𝑣𝑖𝑠𝑖𝑡𝑒𝑑 ← {}
𝑠𝑢𝑏 ← search(𝑝𝑎𝑟𝑎𝑚)
𝑡𝑚𝑝_𝑠𝑒𝑡 .𝑢𝑛𝑖𝑜𝑛(𝑠𝑢𝑏𝑠)
𝑡𝑚𝑝_𝑠𝑒𝑡 .𝑢𝑛𝑖𝑜𝑛(Analyse(𝑠𝑢𝑏𝑠))
this param is a struct return of the function
if is_sret(param) then ⊲ Check whether
do
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
𝑠_𝑣𝑖𝑠𝑖𝑡𝑒𝑑 ← {}
𝑠𝑢𝑏𝑠 ← search(𝑝𝑎𝑟𝑎𝑚)
𝑡𝑚𝑝_𝑠𝑒𝑡 .𝑢𝑛𝑖𝑜𝑛(𝑠𝑢𝑏𝑠)
𝑡𝑚𝑝_𝑠𝑒𝑡 .𝑢𝑛𝑖𝑜𝑛(Analyse(𝑠𝑢𝑏𝑠))
return 𝑡𝑚𝑝_𝑠𝑒𝑡
D REACHABILITY ANALYSIS ALGORITHM