Formulas
Modal Formulas
A,B ::= R | M | (cid:62) | ⊥ | A ∧ B | A ∨ B | A ⊃ B | ¬A | ∀x.A | ∃x.A | A @ t
J
::= [P]tb,te
A |
I
[a]tb,te
I,x A
Figure 2. Syntax of LS2
technical approach for designing a sound proof system
that supports this local style of reasoning in spite of the
global nature of shared memory changes and execution of
dynamically loaded code.
We reason about memory locally using axioms that es-
tablish invariance of values in memory, using information
about locks and actions of threads that hold the locks.
These axioms are modular (there is one set of axioms for
each type of memory) and extensible (more axioms can
be added for new types of memory, as we do for Platform
Conﬁguration Registers in Section 3). As examples, the
following two axioms are invariance rules for locations of
RAM and disk respectively. The ﬁrst axiom says that if
location m.RAM.k (denoting a location with address k in
the RAM of machine m) contains value e at time tb, during
the interval (tb,te) thread I has a lock on this location,
thread I does not write to the location, and machine m is
not reset during the interval, then m.RAM.k must contain
the value e throughout the interval (tb,te). The second
axiom is similar, but it applies to locations on disk. In
this case, the precondition that machine m not be reset is
unnecessary because contents of the disk do not change
due to a reset.
(MemIR) (cid:96) (Mem(m.RAM.k,e) @ tb)
∧ (IsLocked(m.RAM.k,I) on (tb,te))
∧ (∀e(cid:48). ¬Write(I,m.RAM.k,e(cid:48)) on (tb,te))
∧ (¬Reset(m) on (tb,te))
⊃ (Mem(m.RAM.k,e) on (tb,te))
(MemID) (cid:96) (Mem(m.disk.k,e) @ tb)
∧ (IsLocked(m.disk.k,I) on (tb,te))
∧ (∀e(cid:48). ¬Write(I,m.disk.k,e(cid:48)) on (tb,te))
⊃ (Mem(m.disk.k,e) on (tb,te))
For reasoning about execution of dynamically loaded
code, we introduce the following rule that allows us
to combine information about the invariants of a pro-
gram P with the knowledge that
the program was
branched to. We deﬁne a program invariant as a prop-
erty that holds whenever any preﬁx of the sequence
of actions of the program executes. The preﬁxes or
initial sequences IS(P) of a program P are formally
deﬁned as follows: IS(·) = {·}, IS(jump e) = {·, jump e},
IS(latelaunch ) = {·, latelaunch }, IS(x := a;P) =
{·}∪{x := a;Q | Q ∈ IS(P)}.
For every Q in IS(P) : (cid:96) [Q]tb,te
I
(tb,te fresh constants)
A(tb,te)
(cid:96) Jump(I,P) @ t ⊃ ∀t(cid:48). (t(cid:48) > t) ⊃ A(t,t(cid:48))
Jump
In its premise the rule requires that for every initial
sequence Q of P, there be a proof, generic in the constants
tb and te, that establishes A(tb,te) given that Q executes
in thread I during the interval (tb,te]. The conclusion says
that if thread I branches to program P at time t (assump-
tion Jump(I,P) @ t), then for any time t(cid:48) > t, A(t,t(cid:48)) must
hold. Informally, we may explain the soundness of this
rule as follows. If thread I branches to code P at time t,
then for any t(cid:48) > t, the thread I must execute some preﬁx
of P in the interval (t,t(cid:48)]. Instantiating the premise with
this preﬁx Q, and t,t(cid:48) for tb,te, we get exactly the desired
property A(t,t(cid:48)).
The above rule is central among LS2’s principles for
reasoning about dynamically loaded code, which we be-
lieve to be novel. Both a discussion of the novelty and
an example of the reasoning principles are postponed to
Section 4.1. Whereas their application to reasoning about
dynamically loaded code is new, invariants over initial
segments of code are not a contribution of this work. PCL
uses invariants similar to ours to reason about principals
who are executing known pieces of code. LS2 also uses
invariants for many other purposes besides reasoning
about jumps, including reasoning about resets. The latter
is simpler than reasoning about jumps, because we assume
that when a machine is reset, a ﬁxed program is started
to reboot the machine. The code marked SRT M(m) in
Figure 3 is one example of the form this program may
have.
Semantics and Soundness. Formulas of LS2 are inter-
preted over timed traces obtained from execution of a
program in the programming language. The proof system
of LS2 is formally connected to the programming language
semantics through a program independent soundness the-
orem which guarantees that any property established in
the proof system actually holds over all traces obtainable
from the program and any number of adversarial threads.
Let Γ denote a set of formulas, and ϕ denote a formula
or a modal formula. Further, let Γ (cid:96) ϕ denote provability
in LS2’s proof system, and Γ |= ϕ denote semantic entail-
ment. Our main technical result for LS2 is the following
soundness theorem.
Theorem 1 (Soundness). If Γ (cid:96) ϕ then Γ |= ϕ.
The proof of this theorem, as well as those of all
later theorems, can be found in the full version of this
paper [17].
3. Modeling Trusted Computing Primitives
This section describes extensions to LS2 to model and
reason about hardware primitives used with protocols
speciﬁed by the Trusted Computing Group (TCG). These
hardware primitives include the TCG’s Trusted Platform
Module (TPM) and static Platform Conﬁguration Regis-
ters (PCRs), as well as the more recent hardware support
for late launch and dynamic PCRs as implemented by
AMD’s Secure Virtual Machine (SVM) extensions [23]
and Intel’s Trusted eXecution Technology (TXT) [16].
We describe below the hardware primitives and their for-
malization in LS2 at a high level. In subsequent sections,
we use our formalizations to prove security properties of
trusted computing protocols.
3.1. Trusted Platform Module
The Trusted Platform Module (TPM) is a secure co-
processor that performs cryptographic operations such as
encryption, decryption, and creation and veriﬁcation of
digital signatures. Each TPM includes a unique embedded
private key (called the Attestation Identity Key or AIK).
The public key corresponding to each AIK is published in
a manufacturer-signed certiﬁcate. The private component
of the AIK is assumed to be protected from compromise
by malicious software. As a result, signatures produced
by a TPM are guaranteed to be authentic, and unique to
the platform on which the TPM resides.
We model relevant aspects of the TPM in LS2 as
follows. The private attestation identity key of the TPM
on machine m is modeled as a value in LS2, de-
noted AIK−1(m). Its corresponding public key is denoted
AIK(m). The TPM itself is represented as a principal,
ˆAIK(m). Of the many programs hardcoded into
denoted
the TPM, only two are relevant for our purposes. These
are idealized by the LS2 programs marked T PMSRT M(m)
and T PMDRT M(m) in Figures 3 and 4 respectively, and are
explained in the next section. Both the fact that the TPM
executes only one of these programs, and the fact that the
TPM’s private key cannot be leaked are modeled in LS2
by a single predicate:
Honest( ˆAIK(m),{T PMSRT M(m),T PMDRT M(m)})
This predicate entails (through the rules and axioms of
the proof system) that any signature created by the key
AIK−1(m) could only have been created in the TPM on
machine m. It can also be used to prove invariants about
threads which are known to execute on the TPM, using a
rule similar to (Jump) that was described in Section 2.2.1
We emphasize that the predicate mentioned above is not
an axiom in LS2, since its soundness cannot be established
directly. Instead, we always assume it explicitly when we
reason about the TPM.
Static PCRs. Static Platform Conﬁguration Registers
(PCRs) are protected registers contained in every TPM.
From our perspective, the relevant property of PCRs is that
their contents can only be modiﬁed in two ways: (a) by re-
setting the machine on which the TPM resides; this sets all
the static PCRs to a special value that we denote symboli-
cally using the name sinit (sinit is zero on most platforms),
and (b) through a special TPM interface extend , which
takes two arguments: a PCR to modify, and a value v that
is appended to the PCR. Since each PCR is of a ﬁxed
length but may be asked to store arbitrarily many values,
extend replaces the current value of the PCR with a hash
of the concatenation of its current value and a hash of v.
In pseudocode, the effect of extending PCR p with value
v may be described as the assignment p ← H(p || H(v)),
where || denotes concatenation and H denotes a hash
function. More generally, if the values extended into a
PCR after a reset are v1, . . . ,vn in sequence, its contents
will be H(. . .(H(sinit||H(v1))||H(v2)) . . .||H(vn)). We use
the notation seq(sinit,v1, . . . ,vn) to denote this value. A
common use for PCRs is to extend integrity measurements
of program code into them during the boot process, then
to have the TPM sign them with its AIK, and to submit
this signed aggregate to a remote party as evidence that
the values were generated in sequence on the machine.
We model PCRs as a special class of memory in LS2.
The kth static PCR on machine m is denoted m.pcr.k.
PCRs can be read using the usual read action in LS2’s
programming language, and they can be locked for access
control, but the usual write action does not apply to them.
Instead, the extend program is modeled as a primitive
action in the programming language. It has exactly the
effect described in the previous paragraph. Properties of
PCRs are captured through axioms in LS2. For example,
the following axiom models the fact that sinit is written
to every PCR when a machine is reset. In words, it states
that if machine m is reset at time t, then any PCR k on m
contains value sinit at time t.
(MemPR) (cid:96) (Reset(m) @ t) ⊃ (Mem(m.pcr.k,sinit) @ t)
Several other important properties of PCRs arise as a
consequence of their restricted interface. First, if a PCR
contains sinit at time t, then the machine m on which it
1. The predicate Honest is adapted from a predicate of the same
name in PCL. PCL’s predicate is slightly weaker since it lacks the
second argument, but the reasoning principles associated with the two
are similar.
resides must have been reset most recently at some time
t(cid:48) since a reset is the only way to put sinit into a PCR.
This is captured by the following axiom:
(PCR2) (cid:96) (Mem(m.pcr.k,sinit) @ t)
⊃ (∃t(cid:48). (t(cid:48) ≤ t) ∧ (Reset(m) @ t(cid:48))
∧ (¬Reset(m) on (t(cid:48),t]))
Second, if a PCR contains seq(sinit,v1, . . . ,vn) at time
t, it must also have contained seq(sinit,v1, . . . ,vn−1) at
some prior time t(cid:48), without any reset in the interim. Thus
the contents of a PCR are witness to every extension
performed on it since its last reset. Formally, this property
is captured in LS2 by the following axiom:
(PCR1) (cid:96) (Mem(m.pcr.k,seq(sinit,v1, . . . ,vn)) @ t)
⊃ (∃t(cid:48). (t(cid:48) < t)
∧ (Mem(m.pcr.k,seq(sinit,v1, . . . ,vn−1)) @ t(cid:48))
∧ (¬Reset(m) on (t(cid:48),t]))
(n ≥ 1)
In many cases of interest, we need to prove that the value
in a PCR does not change over a period of time. To this
end, we introduce an invariance axiom for PCRs, similar
to axioms (MemIR) and (MemID) from Section 2.2. The
modular design of the logic eases the introduction of this
axiom.
(MemIP) (cid:96) (Mem(m.pcr.k,e) @ tb)
∧ (IsLocked(m.pcr.k,I) on (tb,te))
∧ (∀e(cid:48). ¬Extend(I,m.pcr.k,e(cid:48)) on (tb,te))
∧ (¬Reset(m) on (tb,te))
⊃ (Mem(m.pcr.k,e) on (tb,te))
3.2. Late Launch and Dynamic PCRs
Another hardware feature available in trusted comput-
ing platforms is late launch. Late launch provides the
ability to measure and invoke a program,
typically a
security kernel or Virtual Machine Monitor (VMM), in
a protected environment. Upon receiving a late launch
instruction (SKINIT on the AMD SVM and SENTER on
the Intel TXT), the processor switches from the currently
executing operating system to a Dynamic Root of Trust
for Measurement (DRTM) from which it is possible to
later resume the suspended operating system. The program
to be executed in a late launch session is speciﬁed by
providing the physical address of the Secure Loader Block
(SLB). When a late launch is performed, interrupts are
disabled, direct memory access (DMA) is disabled to all
physical memory pages containing the SLB and debugging
access is disabled. The processor then jumps to the code
in the SLB. This code may load other code. In addition to
providing a protected environment, a special set of PCRs
called dynamic PCRs are reset with a special value that we
call dinit symbolically and the code in the SLB is hashed
and extended into the dynamic PCR 17 (dinit is distinct
from sinit). The dynamic PCRs can then be extended with
other values, and the contents of the PCRs, signed by the
TPM’s key AIK, can be submitted as evidence that a late
launch was performed.
We formally model late launch by adding a new action
latelaunch to LS2’s programming language. This action
can be executed by any thread. The operational semantics
of the language are extended to ensure that whenever
latelaunch executes a new thread I is created with a
special program LL(m), which extends the SLB into a
dynamic PCR and branches to it. This program is shown
in Figure 4. Protection of I is modeled using locks –
when started, I is given locks to all dynamic PCRs on
the machine m it uses. I may subsequently acquire more
locks to protect itself. In the logic, the implicit locking
of dynamic PCRs is captured by the following axiom,
which means that if some thread executes latelaunch
on machine m at time t, creating the thread I, then I has
a lock on any dynamic PCR on m at time t. m.d pcr.k
denotes the kth dynamic PCR on machine m.
(LockLL) (cid:96) (LateLaunch(m,I) @ t)
⊃ (IsLocked(m.d pcr.k,I) @ t)
Dynamic PCRs have properties very similar to static
PCRs. For example,
the following axiom, similar to
(MemPR) described above, means that dinit is written to
every dynamic PCR when a late launch happens.
(MemLL) (cid:96) (LateLaunch(m,I) @ t)
⊃ (Mem(m.d pcr.k,dinit) @ t)
Axioms corresponding to (PCR1) and (PCR2) are also
sound for dynamic PCRs. The difference is that Reset and
sinit must be replaced by LateLaunch and dinit respec-
tively. The following axiom is used to prove invariance
properties of dynamic PCRs.
(MemIdP) (cid:96) (Mem(m.d pcr.k,e) @ tb)
∧ (IsLocked(m.d pcr.k,I) on (tb,te))
∧ (∀e(cid:48). ¬Extend(I,m.d pcr.k,e(cid:48)) on (tb,te))
∧ (¬Reset(m) on (tb,te))
∧ (¬∃I. LateLaunch(m,I) on (tb,te))
⊃ (Mem(m.d pcr.k,e) on (tb,te))
4. Trusted Computing Protocols
We analyze two trusted computing protocols that rely on
TPMs to provide integrity properties: load-time attestation
using an SRTM and late-launch-based attestation using a
DRTM. In an attestation protocol, a platform utilizes a
TPM to attest to platform state by performing two steps:
integrity measurement and integrity reporting. Integrity
measurement consists of collecting cryptographic hashes