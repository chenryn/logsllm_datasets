# The Evolution of Chrome Security Architecture

## Speaker Introduction
**Huan Ren**  
Chromium Contributor, Qihoo 360 Technology Ltd.

- **2011.07 - Present:** Engineering Lead, 360 Browser Team, Qihoo 360 Technology Ltd.
- **2007 - 2011:** Staff Software Engineer, Google Inc. (Founding Engineer, Google Chrome Team)
- **2004 - 2006:** Software Design Engineer, Windows Base Team, Microsoft

## Historical Overview
- **Initial Version:** Multi-process architecture, no sandbox.
- **2007:** Renderer sandbox introduced.
- **2009:** Extension system implemented.
- **2010:**
  - Out-of-process GPU rendering.
  - Ongoing development of plugin sandbox and Pepper API.

## Current Chrome Architecture
### Components
- **Browser Process**
- **Renderer Process**
- **Extension System**
- **Plugin System**
- **GPU Process**

### Sandbox Policy
#### Render Sandbox
- **Token Creation:** 
  - `CreateRestrictedToken` with Null SID and all privileges removed.
- **Job Object Limits:**
  - `JOB_OBJECT_LIMIT_ACTIVE_PROCESS`
  - `JOB_OBJECT_UILIMIT_READCLIPBOARD`
- **Alternate Desktop:**
  - Low integrity level (for Vista and later).

#### Challenges: Compatibility
- **Two Phases:**
  - **Bootstrap:** Initial token setup.
  - **Lockdown:** After `LowerToken()` is called.
- **API Interceptions:**
  - For compatibility, not for sandboxing.

### Interprocess Communication (IPC)
- **Policy Engine and Client:**
  - Broker (browser) and renderer processes.
  - Intercepts APIs for compatibility.

### Render Process Separation
- **Process Models:**
  - **Process per Tab**
  - **Process per Site**
  - **Process per Site Instance**
- **Mandatory Process Separation:**
  - WebUI, extension, and normal render processes.

## Extension Security Architecture
### Components
- **Browser Process**
- **Sandboxed Extension (as Renderer)**
- **Sandboxed Renderer Process**
- **Unsandboxed Plugin**
- **Content Script**
- **Background Page**
- **Extension Host**

### Permissions and Message Passing
- **Permissions:**
  - Cross-origin `XMLHttpRequest`
  - Call extension APIs
  - Load plugins
- **Message Passing:**
  - **One-time Requests:**
    - `chrome.extension.sendMessage`
    - `chrome.tabs.sendMessage`
    - `chrome.extension.onMessage.addListener`
  - **Long-lived Connections:**
    - `chrome.extension.connect`
    - `chrome.extension.onConnect.addListener`
  - **Cross-extension Messaging:**

### Manifest
```json
{
  "key": "publicKey",
  "permissions": ["tabs", "bookmarks", "http://*.google.com/", "unlimitedStorage"],
  "plugins": [...]
}
```

### Common Extension Vulnerabilities
- **Network Hijack:** Using HTTP URLs.
- **XSS:** `eval()`, `innerHTML`, `document.write()`
  ```javascript
  function displayAddress(address) {
    eval("alert('" + address + "')");
  }
  ```

### Evaluation of Chrome Extensions
- **Study by UC Berkeley:**
  - **Methodology:**
    - Manual review of 50 popular and 50 randomly selected extensions.
  - **Findings:**
    - 70 vulnerabilities across 40 extensions.
  - **Source:**
    - "An Evaluation of the Google Chrome Extension Security Architecture" (USENIX Security Symposium 2012)

### Vulnerability Breakdown
| Vulnerable Component | Web Attacker | Network Attacker |
|----------------------|--------------|------------------|
| Core Extension        | 5            | 50               |
| Content Script        | 3            | 1                |
| Website               | 6            | 14               |

| Vulnerable Component | Popular | Random | Total |
|----------------------|---------|--------|-------|
| Core Extension        | 12      | 15     | 27    |
| Content Script        | 1       | 2      | 3     |
| Website               | 11      | 6      | 17    |
| Any                   | 22      | 18     | 40    |

### Extension Security V2
- **Support for Content Security Policy (CSP):**
  - `script-src 'self'`
  - `object-src 'self'`
  - No inline scripts or `eval()`.
  - Load objects only from within the package or whitelist.
- **Effectiveness:**
  - Prevents 96% (49 out of 51) of core extension vulnerabilities.

### Other Threats on Extensions
- **Threat Model:**
  - **Attack on Core Extension:** Primary design goal.
  - **Malicious Extensions:**
    - Chrome sync amplifies the threat.
    - Websites altered by extensions.
  - **Mitigations:**
    - From Chrome 21, installation allowed only from the web store.

### GPU Process
- **Renderer Process and GPU Process:**
  - Shared memory for commands, bitmaps, and arrays.
  - Hardware decoder.
  - HWND and child HWND.

### GPU Sandbox
- **Token:**
  - `WinBuiltinUsersSid`, `WinWorldSid`, `WinRestrictedCodeSid`
- **Desktop Connection:**
  - Interactive desktop.

### Plugins
- **NPAPI Plugins:**
  - Not sandboxed; weakest link in the system.
  - Mitigations:
    - Blacklist
    - Click to play
    - Built-in Flash player (fast updates, sandboxed on Vista and later, low integrity mode)

### PPAPI Plugins
- **Browser Process, Plugin Process, Renderer Process:**
  - Locked down as a renderer process.
  - Cross-platform system APIs.

### Current Progress
- **Performance Improvement:**
  - From synchronous layout model to asynchronous.
- **Conversion to PPAPI:**
  - Flash, PDF reader.
- **Chrome 21 Beta:**
  - PPAPI Flash enabled by default.

### Design Principles
- **Least Privilege**
- **Privilege Separation**
- **Leveraging System Security Mechanisms**
- **Balancing Security, Performance, and User Experience**