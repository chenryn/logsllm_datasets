...
(cid:8)K
rK1 rK2 . . . rKN
...
(cid:8)N
...
⎞
⎟⎟⎟⎠. And the sum of the elements in
k=1
n=1
R is denoted as Sum =
rkn. Suppose the maximum capability of
downlink channel in T seconds is Sum0, Sum
Sum0 denotes the resource utilization
rate of the downlink channel. In order to save resources of the control channel,
we design our SWGuard system as attack-driven, which means when Sum
< α,
Sum0
SWGuard is in sleep state except for Event Collector. All the downlink messages
ﬂow through the third queue (queue for Conﬁguration Messages). α is a danger
value between 0 and 1, set by the network operators.
rkn
When the reﬂection attacks are detected, the Priority Composition Module
is wakened and starts to calculate the penalty coeﬃcient of each HAP, βkn =
rkn−iknSum0
. ikn, rkn denote the corresponding element in matrix I0, R. If βkn
is negative, we set it as 0. Then we use two thresholds (thh, thl) to map the
penalty coeﬃcient βkn into priority (00, 01 or 10) and tag a 2-bit ﬁeld into
packet metadata to encapsulate priority.
Policy Consistency. Multi-queue based software protocol agent may violate
the consistency of some downlink messages. For example, some control messages
need to be sent in a particular order for correctness reasons, however, in this
multi-queue based software agent, if a previous arriving message is put into a
queue with high load while a later arriving message is put into a queue with low
load, the order to maintain correctness may be violated.
To address this issue, we design a coordination mechanism between the
Behavior Monitor and Classiﬁer in software protocol agent. If a series of down-
link messages require consistency, they are supposed to reuse the 2-bit priority
packet metadata (ﬁll it with 11) in the packet header to express their intents.
Then the Classiﬁer in the software protocol agent will check the label to learn
whether the message has the consistency demand. If consistency demand is con-
ﬁrmed, this message will be scheduled to the queue for consistency required
messages.
5.3 Defense Evaluation
We implement the prototype of SWGuard system, including Behavior Monitor
and Software Protocol Agent, on Floodlight [6] and Open vSwitch [7] with about
4000 Lines of Code. We use Open vSwitch and set corresponding thresholds to
limit its control channel throughput, making its ﬂow rule update rate (130 pps)
and ﬂow table size (2000) analogous to the hardware switches.
To demonstrate the defense eﬀect of SWGuard, we use the average value of
ﬂow rule installation/statistic query latencies of normal users/applications as the
representative metric, which is named as Event Response Time in our ﬁgures. As
Control Plane Reﬂection Attacks
179
Fig. 12. Defense eﬀect.
Fig. 13. Defense overhead.
shown in Fig. 127, with native system, event response time becomes extremely
large when the rate of downlink messages is above 110 packets per second. While
with SWGuard, event response time is nearly unchanged. All of these are due
to the limited capability of SDN-enabled switches for processing downlink mes-
sages. The experimental results illustrate that our SWGuard provides eﬀective
protection for both the ﬂow rule installation and statistics query.
For the overheads of SWGuard, we measure the latency introduced by
SWGuard. Compared with native OpenFlow, packets in SWGuard need to go
through two extra components, Event Collector of Behavior Monitor and Conﬁg-
uration Message queue of Software Protocol Agent under normal circumstance,
since other components are in sleep state when no attack is detected. When an
attack happens, packets must pass a full path in Behavior Monitor and Soft-
ware Protocol Agent. As shown in Fig. 13, the latency is almost the same for
native OpenFlow and SWGuard under normal circumstance. Even under attacks,
Behavior Monitor and Software Protocol Agent only incur a latency less than
100 us. All of these demonstrate that SWGuard only brings about a negligible
delay for the control channel messages.
6 Discussion
Emerging Programmable Data Planes: Current prototypes, attacks and
defenses are based on OpenFlow-based hardware switches. We believe the core
idea of Control Plane Reﬂection Attacks is applicable to the emerging gener-
ation of programmable data planes, e.g. P4 and RMT chips [2], because these
platforms also use traditional TCAM-based ﬂow tables and Control Plane Reﬂec-
tion Attacks address a property of TCAM that is invariant to underlying TCAM
design.
Generality of the SWGuard System: SWGuard is also applicable for no-
adversary circumstances, such as ﬂash crowds of downlink messages under nor-
mal conditions. By prioritizing the downlink messages, SWGuard can provide
7 Since this experiment is conducted on the software environment, the nonlinear jump
point is a little diﬀerent from the previous hardware experimental results.
180
M. Zhang et al.
lower latencies for more important messages under the congestion status of con-
trol channel.
Source Address Forgery Problem: One concern is that an attacker may
forge another host’s source address to pollute the HAP statistics of other hosts.
Nevertheless, in SWGuard, we can also harness the edge switch port to identify a
host. As the header ﬁelds of the upstream messages are assigned by the hardware
switch, the attacker is not able to forge or change this ﬁeld.
7 Related Work
DoS Attacks Against SDN: Shin et al. [28] ﬁrst proposes the concept of
Data-to-control Plane Saturation Attack against SDN. To mitigate this dedi-
cated DoS attack, AVANT-GUARD [27] introduces connection migration and
actuating triggers to extend the data plane functions. However, it is applica-
ble to TCP protocol only. Further, a protocol-independent defense framework,
FloodGuard [32], pre-installs proactive ﬂow rules to reduce table-miss packets,
and forwards table-miss packets to additional data plane caches. To gain the
beneﬁt of no hardware modiﬁcation and addition, FloodDefender [9] oﬄoads
table-miss packets to neighbor switches and ﬁlters out attack traﬃc with two-
phase ﬁltering. Control Plane Reﬂection Attacks distinguish themselves from
previous works in both attack methods and attack eﬀects. On one hand, the
saturation attack uses a pretty straightforward attack method that attacker just
ﬂoods arbitrary attack traﬃc to trigger the direct data plane events while the
reﬂection attacks resort to more advanced and sophisticated techniques, and a
two-phase probing-trigger approach is specially developed to exploit both direct
and indirect data plane events. On the other hand, since the simplicity of the
saturation attack, it is not hard to capture the attack, thus it could have limited
attack eﬀects. By contrary, the reﬂection attacks are much more stealthy and
the same attack expenses of the attacker could cause more obvious attack eﬀects
for victims. Scotch [31] alleviates the communication bottleneck between control
plane and data plane leveraging a pool of vSwitches distributed across the net-
work, and it shares the same observation that SDN-enabled hardware switches
have a very limited capacity for control channel communications.
Timing-Based Side Channel Attacks: Side channel attacks have long existed
in computer systems, and they are usually used to leak the secret information
(e.g. secret cryptographic keys) of dedicated systems. Publications more related
to our work are various works applying side channel attacks to SDN. Shin et
al. [28] presents an SDN scanner which could determine whether a network is
using SDN or not. Leng et al. [19] proposes to measure the response time of
requests to obtain the approximate capacity of switch’s ﬂow table. Sonchack
et al. [29] demonstrates an inference attack to time the control plane, which
could be used to infer host communication patterns, ACL entries and network
monitoring policies. Liu et al. [21] permits the attacker to select the best probes
with a Markov model to infer the recent occurrence of a target ﬂow. Our attack
Control Plane Reﬂection Attacks
181
methods are somewhat inspired by these previous works. However, all of them
only focus on the direct data plane events, and remain at a low level to infer the
existence of network policies/device conﬁgurations. To the best of our knowledge,
our work proposes the exploitation of indirect data plane events for the ﬁrst time
and take the next step that we not only take the existence into consideration, but
also obtain more concrete policies and policy thresholds to promote the attack
eﬀects.
8 Conclusion
In this paper, we present Control Plane Reﬂection Attacks to exploit the limited
processing capability of SDN-enabled hardware switches by using direct and
indirect data plane events. Moreover, we develop a two-phase attack strategy
to make such attacks eﬃcient, stealthy and powerful. The experiments showcase
the reﬂection attacks can cause extremely harmful eﬀects with acceptable attack
expenses. To mitigate reﬂection attacks, we propose a novel defense solution,
called SWGuard, by detecting anomalies of control messages and prioritizing
them based on the host-application pair. The evaluation results of SWGuard
demonstrate its eﬀectiveness under reﬂection attacks with minor overheads.
Acknowledgement. This material is based upon work supported by National Key
R&D Program of China (2017YFB0801701), the National Science Foundation of China
(No.61472213) and CERNET Innovation Project (NGII20160123). It is also based upon
work supported in part by the National Science Foundation (NSF) under Grant No.
1617985, 1642129, 1700544, and 1740791. Jun Bi is the corresponding author. We also
thank Yi Qiao, Chen Sun, Yongbin Li and Kai Gao from Tsinghua University for
joining the discussion of this paper.
References
1. Bai, W., et al.: Information-agnostic ﬂow scheduling for commodity data cen-
ters. In: NSDI, pp. 455–468. USENIX Association, Oakland (2015). https://www.
usenix.org/conference/nsdi15/technical-sessions/presentation/bai
2. Bosshart, P., et al.: P4: programming protocol-independent packet processors. SIG-
COMM CCR 44(3), 87–95 (2014)
3. Braga, R.,
al.: Lightweight DDoS ﬂooding
NOX/OpenFlow. In: LCN, pp. 408–415. IEEE (2010)
et
attack detection using
4. Casado, M., et al.: Ethane: taking control of the enterprise. In: SIGCOMM, vol.
37, pp. 1–12. ACM (2007)
5. Chen, H., Benson, T.: The case for making tight control plane latency guarantees
in SDN switches. In: SOSR, pp. 150–156. ACM (2017)
6. Floodlight Community: Floodlight, August 2017. http://www.projectﬂoodlight.
org/ﬂoodlight/
7. Open vSwitch Community: Open vSwitch, August 2017. http://openvswitch.org/
8. Curtis, A.R.: DevoFlow: scaling ﬂow management for high-performance networks.
SIGCOMM 41(4), 254–265 (2011)
182
M. Zhang et al.
9. Gao, S., et al.: FloodDefender: protecting data and control plane resources under
SDN-aimed DoS attacks. In: INFOCOM, pp. 1–9 (2017)
10. Ghorbani, S., et al.: DRILL: micro load balancing for low-latency data center
networks. In: SOGCOMM, pp. 225–238. ACM (2017)
11. Hassas Yeganeh, S., Ganjali, Y.: Kandoo: a framework for eﬃcient and scalable
oﬄoading of control applications. In: HotSDN, pp. 19–24. ACM (2012)
12. He, K., et al.: Mazu: taming latency in software deﬁned networks. Technical report,
University of Wisconsin-Madison (2014)
13. He, K., et al.: Measuring control plane latency in SDN-enabled switches. In: SOSR,
p. 25. ACM (2015)
14. Jin, X., et al.: SoftCell: scalable and ﬂexible cellular core network architecture. In:
CoNEXT, pp. 163–174. ACM (2013)
15. Jin, X., et al.: Dynamic scheduling of network updates. In: SIGCOMM, vol. 44,
pp. 539–550. ACM (2014)
16. Katta, N., et al.: CacheFlow: dependency-aware rule-caching for software-deﬁned
networks. In: SOSR, p. 6. ACM (2016)
17. Koponen, T., et al.: Onix: a distributed control platform for large-scale production
networks. In: OSDI, vol. 10, pp. 1–6 (2010)
18. Lazaris, A., et al.: Tango: simplifying SDN control with automatic switch property
inference, abstraction, and optimization. In: CoNEXT, pp. 199–212. ACM (2014)
19. Leng, J., et al.: An inference attack model for ﬂow table capacity and usage: exploit-
ing the vulnerability of ﬂow table overﬂow in software-deﬁned network. arXiv
preprint arXiv:1504.03095 (2015)
20. Li, Y., et al.: Flowinsight: decoupling visibility from operability in SDN data plane.
SIGCOMM Demo 44(4), 137–138 (2015)
21. Liu, S., et al.: Flow reconnaissance via timing attacks on SDN switches. In: ICDCS,
pp. 196–206. IEEE (2017)
22. Liu, Z., et al.: One sketch to rule them all: rethinking network ﬂow monitoring
with UnivMon. In: SIGCOMM, pp. 101–114. ACM (2016)
23. McKeown, N.: OpenFlow: enabling innovation in campus networks. SIGCOMM
CCR 38(2), 69–74 (2008)
24. Pica8: Flow scalability per broadcom chipset, March 2018. https://docs.pica8.com/
display/picos2102cg/Flow+Scalability+per+Broadcom+Chipset
25. Postel, J.: Transmission control protocol (1981)
26. Postel, J., et al.: RFC 792: Internet control message protocol. InterNet Network
Working Group (1981)
27. Shin, S., et al.: AVANT-GUARD: scalable and vigilant switch ﬂow management
in software-deﬁned networks. In: CCS, pp. 413–424. ACM (2013)
28. Shin, S., Gu, G.: Attacking software-deﬁned networks: a ﬁrst feasibility study. In:
HotSDN, pp. 165–166. ACM (2013)
29. Sonchack, J., et al.: Timing-based reconnaissance and defense in software-deﬁned
networks. In: ACSAC, pp. 89–100. ACM (2016)
30. Tootoonchian, A., Ganjali, Y.: HyperFlow: a distributed control plane for Open-
Flow. In: Proceedings of the 2010 Internet Network Management Conference on
Research on Enterprise Networking, p. 3 (2010)
31. Wang, A., et al.: Scotch: elastically scaling up SDN control-plane using vSwitch
based overlay. In: CoNEXT, pp. 403–414. ACM (2014)
32. Wang, H., et al.: FloodGuard: a DoS attack prevention extension in software-
deﬁned networks. In: DSN, pp. 239–250. IEEE (2015)
33. Xu, H., et al.: Real-time update with joint optimization of route selection and
update scheduling for SDNs. In: ICNP, pp. 1–10. IEEE (2016)
Control Plane Reﬂection Attacks
183
34. Xu, Y., Liu, Y.: DDoS attack detection under SDN context. In: INFOCOM, pp.
1–9. IEEE (2016)
35. Zhang, M., et al.: FTGuard: a priority-aware strategy against the ﬂow table over-
ﬂow attack in SDN. In: SIGCOMM Demo, pp. 141–143. ACM (2017)
36. Zhang, M., et al.: Control plane reﬂection attacks in SDNs: new attacks
and countermeasures. Technical report, June 2018. https://www.dropbox.com/s/
bnwe8apx5w06a85/sdns-attacks-countermeasures-tr.pdf?dl=0