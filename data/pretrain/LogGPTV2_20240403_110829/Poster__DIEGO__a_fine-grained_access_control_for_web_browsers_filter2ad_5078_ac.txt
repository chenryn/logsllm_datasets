key
m
)
key
key
• 
may be the DES algorithm and the Enc_key is the key which 
was determined by using the Diffie-Helman protocol. 
Since the database knows the user who works with it, it can 
store  the  Enc_key,  the  AS_key  and  the  Roll_key  for  each 
active user. For each next SQL sentence it will generate the 
next rolling key as the database does. The three numbers are 
cleared when the user disconnects from the application. 
However, one problem with using the rolling code is known as the 
problem of synchronization. The problem of synchronization can 
arise  when  the  application  will  advance  the  code  and  send  the 
SQL statement, but the database will not accept it (for example, 
because  of  a  disconnection  in  communication  between  a  web 
server and a database server). In such case the application already 
advanced the code, but the database remained with the old code, 
as it did not receive the sentence. 
It is similar to using of a rolling code in a car alarm. Both the car’s 
remote control and the alarm system need to be synchronized. The 
solution  is  for  the  database  (the  car)  to  check  n  forward  rolling 
keys and not only the last one.  So we need to adapt the function 
that checks if the next rolling code is legal and check n next codes 
instead of one.  
The advantages of the AS key method compared to the method of 
rolling key are clear: The calculation of the next key in the rolling 
key  method  is  expensive  regarding  the  system’s  resources, 
especially  when  the  quantity  of  sentences  sent  is  large.  This 
method does not use such calculation, so it is more efficient. The 
performance  of  the  Update  following  each  calculation  is  also 
saved in this method. So the AS key method is preferable from the 
efficiency point of view to the parameter method which is based 
on a rolling key. 
But the advantages of the rolling key method compared to AS key 
method are mainly that it’s more secure! The method is resistant 
to replay attacks and a correct guess of a code is only valid for 
running one sentence. If the attacker tries to guess the code and 
comes to the conclusion that a particular code is not valid, she has 
no confidence that this code will not be valid in a few seconds, 
while the user under attack will run the next sentence. For the AS 
key, if the attacker rules out a particular code, then she knows that 
this  code  will  not  be  valid  throughout  the  entire  session  of  the 
user,  so  the  attacker  can  reduce  the  number  of  possibilities  of 
valid  codes  according  to  the  AS  key  method.  Therefore,  the 
rolling key method is much safer. 
5.3 The Parameter Method for Anonymous  
      Users 
Although the application does not authenticate users, it is aware of 
each user session, so it can attribute each session with AS key or 
rolling key. The table of anonymous users will appear as follows: 
Table 3: anonymous users for AS key 
User 
Anonymous1
Anonymous
2
AS_key
01100…
10010…
In the case the intruder wants to bypass the application logic and 
submit SQL injection or other type of attack, she must know the 
random key. So our method can also prevent illegal accesses of 
anonymous  users.  For  example,  in  the  University  system  all  the 
students  can  retrieve  a  course  list  for  a  chosen  semester.  The 
select statement can look like this: 
SELECT *  
FROM   Course_View(01100…) 
WHERE  Semester = ‘Fall 2006’ 
Figure 12: course list retrieval 
Now  if  the  intruder  wants  to  change  this  SQL  by  the  SQL 
injection attack, she may change her input of Fall 2006 into 
some  more  complicated  union  form  and  submit  the  following 
statement: 
SELECT *  
FROM   Course_View(01100…) 
WHERE  Semester = ‘Fall 2006’ 
UNION 
SELECT *  
FROM   Student_Mark_View()--’ 
be 
supplied 
to 
Figure 13: course list retrieval resistant to SQL injection 
parameter 
that  must 
But  her  attack  will  be  unsuccessful  as  she  does  not  know  the 
random 
the 
Student_Mark_View! 
Another  thing  that  can  be  useful  is  the  ability  to  differentiate 
between sessions of different anonymous users. The idea is to use 
a separate session key for each application session and after that 
to partition the SQL log that can be created by the database. Now 
we can employ many existing intrusion detection methods when 
they are applied to the appropriate SQL log slice and thus we can 
look  for  intrusions  on  a  session  layer  instead  of  a  single  SQL 
statement layer as it happens with traditional approaches.  
One  important  thing  for  the  applications  that  do  not  require  the 
user  authentication  is  privacy  preserving.  Since  our  method 
transfers  a  random  key  that  tell  the  database  nothing  about  the 
actual user, our method also preserve privacy of the anonymous 
user. In the next section we will describe how to define views for 
tables that do not contain identifier in one of its fields- these are 
the views required by us for the applications without identification 
process. 
5.4  DB Schema with Parameterized Views 
We presented the use of parameterized views for the control of the 
access to databases from web systems. Now we will show how to 
structure  a  database  schema,  which  allows 
the  use  of 
parameterized views. 
For  each  table  in  the  database  the  view  must  be  defined,  the 
access  to  this  view  must  be  granted  to  the  application  and  the 
access to the table must be revoked. Let’s look at an example of a 
table with many different access roles to it: in the School system 
there  is  the  Students_Table  and  a  student  can  access  her 
detailed record or names and e-mails of other students in her class. 
For such a case the following definition can be used: 
SELECT Student_No FROM Users_Table 
WHERE  Users_Table.AS_key=:pAS_key 
CREATE VIEW  Students_View WITH pAS_key 
SELECT Name, E_Mail, Other_fields... 
FROM  Students_Table 
WHERE  Student_No IN 
   ( 
   ) 
UNION 
SELECT Name, E_Mail, ‘dummy’... 
FROM  Students_Table 
WHERE  Class_No IN 
   ( 
   ) 
AND Student_No NOT IN 
   ( 
   ) 
SELECT Class_No 
FROM  Classes_Table, Users_Table  
WHERE  Users_Table.AS_key=:pAS_key 
Classes_Table.Student_No =  
AND 
Users_Table.Student_No 
SELECT Student_No FROM Users_Table 
WHERE  Users_Table.AS_key=:pAS_key 
Figure 14: students parameterized view definition 
This definition is polymorphic in the sense that it allows a single 
definition to be used with different types of access roles. With this 
kind of polymorphic definitions, the number of views expected to 
be  maintained  is  exactly  the  number  of  tables  in  the  database 
schema.  
The  structuring  of  views  needs  to  be  based  on  the  parameter 
which  either  provides  the  identity  of  the  user,  or  the  session 
identity.  In  general,  a  database  schema  (in  Relational  systems) 
may contain tables of two types: 
• 
Tables which include the user identifier in one of the fields. 
In general, this identifier is included in the primary key of the 
table. 
Tables which do not contain a user identifier. 
• 
A parameterized view for the first type was presented in Sections 
5.1  and  5.2.  There  are  three  possibilities  for  access  control  on 
tables of the second type: 
• 
The access to the table is not relevant to the system, so no 
authorization should be provided to this table for the DB user 
of the application. 
The access to all the rows of a table is relevant to all users. 
An example of such table can be the table of courses offered 
during the semester, as all the users of the system are allowed 
to  access  this  table.  So  a  parameterized  view  needs  to  be 
structured. But the role of the parameter is not to filter rows, 
but  to  return  a  full  table  in  case  the  parameter  is  valid; 
otherwise, it will not return anything. For example, the view 
defined in Figure 15 may be used. 
• 
CREATE VIEW  Courses_View   
WITH  pAS_key, pRoll_key  
SELECT *  
FROM   Courses_Table  
WHERE  Authorize(:pAS_key, :pRoll_key)  
IS NOT NULL 
Figure 15: course parameterized view definition 
• 
The idea of this definition is to allow only the application’s 
users to access the table. In other words, it is not enough to 
connect to the database with the DB user, in order to access 
the table, but you also need to be one of the legal application 
users, so that you can access data. Another reason for the use 
of such view is to enable intrusion detection. By having the 
database  storing  the  AS_key,  it  can  later  identify  the  user 
session precisely and thus enable the process of post-mortem 
intrusion detection by analyzing the database log. 
Tables without identifiers can also be a subject to individual 
user authorizations, but in this case the parameterized view 
must join them to some identifier-based table. For example, 
the  Course  Stuff  table  can  contain  confidential  information 
so the natural policy may be that the student can access only 
the stuff details of the courses she is enrolled in. In this case 
the  parameterized  view  will  be  constructed  on  joining  the 
Student Courses table with the Course Stuff table. 
6.  ANALYSIS AND EVALUATION 
The  advantages  of  the  parameter  method  described  above  are 
clear. Since the parameter enables to identify the user, each SQL 
sentence that arrives to the database is attributed to a specific user. 
Consequently,  the  database  provides  access  only  to  the  data 
relevant  to  a  particular  user,  while  being  assisted  by  the 
mechanism of parameterized views. Furthermore, the log of SQL 
sentences which arrive to the database includes the indication of 
the  user  who  ran  it.  This  is  very  important  for  developers  of 
intrusion  detection  systems  of  databases,  because  now  they  can 
distinguish  between  the  transactions  of  different  users.  Next  we 
present  analytic  and  experimental  evaluation  of  the  parameter 
method. 
6.1  Analysis of Parameter Method 
The safety of the parameter method rests with the difficulties of 
guessing the various keys. For the application session key method, 
there  is  a  need  to  guess  a  session  key  of  some  currently  active 
user.  If  we  assume  a  key  of  64  bits  then  the  probability  of 
1 . If we assume that the maximum of 
guessing this number is
642
active users connected to the system at the time of an attack is X, 
X .  Note  that 
the  probability  for  the  successful  attack  will  be
642
this is an unselective attack since the attacker cannot control the 
attacked user identity when she tries to guess some key. 
For  the  rolling  key  method,  there  are  two  items  to  guess,  the 
session  key  and  the  rolling  key.  If  we  assume  a  session  key  of 
only  8  bit,  rolling  key  of  64  bit  and  256  possible  correct  codes 
(because  of  dealing  with  the  synchronization  problem)  then 
probability for the correct guess will be
8
X
2*
2*2
64
8
=
X
2
64
.  
Obviously,  it’s  possible  to  use  longer  codes,  if  we  want  to 
increase the level of security; for example, 128 bits and then the 
probability for a successful attack will decrease respectively. But 
it can be a burden on the system: 
1.  As  the  key  is  longer,  the  computing  of  the  next  key  need 
more processor’s time. 
2.  As  the  key  is  longer,  the  length  of  the  SQL  sentence 
increases  and  it  can  be  a  burden  on  the  communication 
between the web server and databases server. The databases 
will also need to cope with longer SQL sentences 
Note  that  the  method  of  a  rolling  parameter  is  resistant  against 
replay  attacks,  as  the  repetition  on  the  same  sentence  with  the 
same  parameter does  not  bring any  result  because  of  the  rolling 
key.  Even  if  the  intruder  succeeded  to  obtain  the  code  from  the 
parameter of another user, it does not help him at all, as without 
knowing  the  encryption  key,  he  does  not  have  the  ability  to 
compute the next valid code. 
6.2  Performance Evaluation 
The performance evaluation was split into two stages. In the first 
stage  our  target  was  to  compare  the  performance  of  a  single 
regular SQL statement with our two methods: AS key and rolling 
key  methods.  We  used  a  stand  alone  computer  with  the  SQL 
Server with approximately 1,000,000 tuples in relevant tables and 
created views like the view from Fig 8.  Next we run a transaction 
that included Select/Update statement directly on the table and on 
the view with AS key and rolling key. To average the processing 
time we repeated this for 100, 1000 and 10000 serial transactions: 
Select statement
Regular trns.
AS Key trns.
Rolling Key trns.
90
80
70
60
50
40
30
20
10
0
c.
e
s
n 
e 
m
Ti
i
10000
1000
# of transactions
100
Update statement
Regular trns.