### Title: Detecting (Un)Intentionally Hidden Injected Code by Examining Page Table Entries

Malware often employs code injection techniques to manipulate other processes, such as those used by banking trojans, or to conceal its presence. With a few exceptions, like ROP gadgets, the injected code must be executable by the CPU at some point.

In this presentation, we will explore hiding techniques that prevent executable pages containing injected code from being detected by current memory forensic plugins. These techniques can be implemented by malware to hide its injected code, as has been observed in some cases. Additionally, in one scenario, the operating system's paging mechanism can unintentionally contribute to this concealment.

We will then introduce an approach to uncover these hidden pages by examining Page Table Entries. This method has been implemented as a plugin for the Rekall memory forensic framework, which automatically identifies and reports any memory regions containing executable pages.

The talk will also feature live demonstrations, showcasing how current memory forensic plugins can be bypassed and how our plugin can effectively detect the hidden code.