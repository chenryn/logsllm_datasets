User: 请回答以下安全问题为什么客户端散列密码如此罕见？很少有网站在将用户密码提交给服务器之前对其进行哈希处理。Javascript甚至不支持SHA或其他算法。
但我能想到很多优点，比如防止跨站点泄漏或恶意管理员，而SSL没有提供这些优点。
那么，为什么这种做法在网站中如此罕见呢？

Assistant: 这里是JavaScript密码哈希的发明者
早在1998年，我就在构建一个Wiki，这是我构建的第一个带有登录系统的网站。我不可能负担得起SSL托管的费用，但我担心纯文本密码会在互联网上传播。我读过CHAP（challenge hash authentication protocol，挑战散列身份验证协议），并意识到我可以用JavaScript实现它。我最终将JavaScriptMD5作为一个独立的项目发布，它已经成为我开发的最受欢迎的开源软件。维基从未超越阿尔法。
与SSL相比，它有许多弱点：
只能防止被动窃听。活动的MITM可以篡改JavaScript并禁用哈希。
服务器端散列变成了密码等价物。至少在共同执行中；有一些变化可以避免这种情况。
捕获的哈希可以是暴力强制的。从理论上讲，使用JavaScriptRSA可以避免这种情况。
我总是提前说明这些限制。我曾经定期为他们发火。但直到今天，我仍然坚持最初的原则：如果出于任何原因没有SSL，这比明文密码要好。在21世纪初，许多大型提供商（最著名的是雅虎）都使用这种方式登录。他们认为，即使只是用于登录的SSL也会有太多的开销。我认为他们在2006年只为登录而改用SSL，2011年Firesheep发布时，大多数提供商都改用了完整的SSL。
因此，简单的答案是：客户端哈希是罕见的，因为人们使用SSL。
客户端哈希仍然有一些潜在的好处：
有些软件不知道是否会使用SSL进行部署，所以包含哈希是有意义的。vBulletin就是一个常见的例子。
服务器救济-使用计算成本高昂的哈希，客户端做一些工作是有意义的。请参阅此问题。
恶意的管理员或服务器端哈希会使他们无法看到明文密码。这通常被忽略，因为他们可以修改JavaScript并禁用哈希。但公平地说，这种行为增加了他们被发现的机会，所以这有一些好处。
最终，尽管这些好处很小，而且增加了很多复杂性，但在试图提高安全性的过程中，确实存在引入更严重漏洞的风险。对于那些想要比密码更安全的人来说，多因素身份验证是一个更好的解决方案。
因此，第二个简短的答案是：因为多因素身份验证比客户端密码哈希提供了更多的安全性。