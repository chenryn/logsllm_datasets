flightsperformedbyBoeingfromSheremetyevoairport:
=> SELECT count(*) FROM flights
WHERE departure_airport = 'SVO' AND aircraft_code = '733';
count
−−−−−−−
2037
(1 row)
=> EXPLAIN SELECT * FROM flights
WHERE departure_airport = 'SVO' AND aircraft_code = '733';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on flights (cost=0.00..5847.00 rows=708 width=63)
Filter: ((departure_airport = 'SVO'::bpchar) AND (aircraft_cod...
(2 rows)
Inthiscase,youcanimprovetheestimationbycollectingstatisticsonmultivariate
lists:1
=> CREATE STATISTICS flights_mcv(mcv)
ON departure_airport, aircraft_code FROM flights;
=> ANALYZE flights;
Thenewcardinalityestimationismuchmoreaccurate:
=> EXPLAIN SELECT * FROM flights
WHERE departure_airport = 'SVO' AND aircraft_code = '733';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on flights (cost=0.00..5847.00 rows=2134 width=63)
Filter: ((departure_airport = 'SVO'::bpchar) AND (aircraft_cod...
(2 rows)
1 backend/statistics/README.mcv
backend/statistics/mcv.c
331
Chapter17 Statistics
To get this estimation, the planner relies on the frequency values stored in the
systemcatalog:
=> SELECT values, frequency
FROM pg_statistic_ext stx
JOIN pg_statistic_ext_data stxd ON stx.oid = stxd.stxoid,
pg_mcv_list_items(stxdmcv) m
WHERE stxname = 'flights_mcv'
AND values = '{SVO,773}';
values | frequency
−−−−−−−−−−−+−−−−−−−−−−−
{SVO,773} | 0.005
(1 row)
100 Justlikearegularlist,amultivariatelistholdsdefault_statistics_targetvalues
(ifthisparameterisalsosetatthecolumnlevel,thelargestofitsvaluesisused).
v. If required, you can also change the size of the list, like it is done for extended
expressionstatistics:
ALTER STATISTICS ... SET STATISTICS ...;
Inalltheseexamples,Ihaveusedonlytwocolumns,butyoucancollectmultivari-
atestatisticsonalargernumberofcolumnstoo.
To combine statistics of several types in one object, you can provide a comma-
separated list of these types in its definition. If no type is specified, Postgre
willcollectstatisticsofallthepossibletypesforthespecifiedcolumns.
v. Apartfromtheactualcolumnnames,multivariatestatisticscanalsousearbitrary
expressions,justlikeexpressionstatistics.
332
18
Table Access Methods
18.1 Pluggable Storage Engines
ThedatalayoutusedbyPostgreisneithertheonlypossiblenorthebestonefor
allloadtypes. Followingtheideaofextensibility,Postgreallowsyoutocreate v.
andpluginvarioustableaccessmethods(pluggablestorageengines),butthereis
onlyoneavailableoutoftheboxatthemoment:
=> SELECT amname, amhandler FROM pg_am WHERE amtype = 't';
amname | amhandler
−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−
heap | heap_tableam_handler
(1 row)
You can specify the engine to use when creating a table (  ... );
otherwise,thedefaultenginelistedinthedefault_table_access_method parameter heap
willbeapplied.
For the Postgre core to work with various engines in the same way, table ac-
cessmethodsmustimplementaspecialinterface.1 Thefunctionspecifiedinthe
amhandler column returns the interface structure2 that contains all the informa-
tionrequiredbythecore.
Thefollowingcorecomponentscanbeusedbyalltableaccessmethods:
• transactionmanager,includingandsnapshotisolationsupport
• buffermanager
1 postgresql.org/docs/14/tableam.html
2 include/access/tableam.h
333
Chapter18 TableAccessMethods
• /subsystem
• 
• optimizerandexecutor
• indexsupport
Thesecomponentsalwaysremainatthedisposaloftheengine,evenifitdoesnot
usethemall.
Intheirturn,enginesdefine:
• tupleformatanddatastructure
• tablescanimplementationandcostestimation
• implementationofinsert,delete,update,andlockoperations
• visibilityrules
• vacuumandanalysisprocedures
Historically,Postgreusedasinglebuilt-indatastoragewithoutanyproperpro-
gramminginterface,sonowitisveryhardtocomeupwithagooddesignthattakes
all the specifics of the standard engine into account and does not interfere with
othermethods.
Forexample,itisstillunclearhowtodealwiththe. Newaccessmethodsmayneedto
logtheirownoperationsthatthecoreisunawareof.Theexistinggenericmechanism1
isusuallyabadchoice,asitincurstoomuchoverhead.Youcanaddyetanotherinterface
for handling newtypes of  entries,but then crash recoverywill depend on external
code,whichishighlyundesirable.Theonlyplausiblesolutionsofarispatchingthecore
foreachparticularengine.
Forthisreason,Ididnotstrivetoprovideanystrictdistinctionbetweentableac-
cessmethods and the core. Many featuresdescribed in the previousparts of the
bookformallybelongtotheheapaccessmethodratherthantothecoreitself.This
method is likely to always remain the ultimate standard engine for Postgre,
whileothermethodswillfillseparatenichestoaddresschallengesofspecificload
types.
1 postgresql.org/docs/14/generic-wal.html
334
18.2 SequentialScans
Ofallthenewenginesthatarecurrentlybeingdeveloped,Iwouldliketomention
thefollowing:
Zheap is aimed at fighting table bloating.1 It implements in-place row updates
andmoveshistoric-relateddataintoaseparateundostorage. Suchan
enginewillbeusefulforloadsthatinvolvefrequentdataupdates.
ZheaparchitecturewillseemfamiliartoOracleusers,althoughitdoeshave
some nuances (for example, the interface of index access methods does not p.
allowcreatingindexeswiththeirownversioning).
Zedstore implementscolumnarstorage,2 whichislikelytobemostefficientwith
queries.
Thestoreddataisstructuredasa-treeoftuples;eachcolumnisstoredin
itsown-treeassociatedwiththemainone.Inthefuture,itmightbepossible
tostoreseveralcolumnsinone-tree,thusgettingahybridstorage.
18.2 Sequential Scans
Thestorageenginedefinesthephysicallayoutoftabledataandprovidesanaccess
methodtoit.Theonlysupportedmethodisasequentialscan,whichreadsthefile
(or files) of the table’s main fork in full. In each read page,the visibility of each p.
tupleischecked;thosetuplesthatdonotsatisfythequeryarefilteredout.
tablepage
atuple
tobefilteredout
1 github.com/EnterpriseDB/zheap
2 github.com/greenplum-db/postgres/tree/zedstore
335
Chapter18 TableAccessMethods
p. Ascanningprocessgoesthroughthebuffercache; toensurethatlargetablesdo
notoustusefuldata,asmall-sizedbufferringisemployed. Otherprocessesthat
are scanning the same table join this buffer ring,thus avoiding extra disk reads;
suchscansarecalledsynchronized. Thus,scanningdoesnotalwayshavetobegin
atthestartofthefile.
Sequentialscanningisthemostefficientwaytoreadthewholetableorthebest
part of it. In other words,sequential scans bring the most value when the selec-
tivityislow.(Iftheselectivityishigh,meaningthatthequeryhastoselectonlya
p. fewrows,itispreferabletouseanindex.)
Cost Estimation
Inthequeryexecutionplan,asequentialscanisrepresentedbytheSeqScannode:
=> EXPLAIN SELECT *
FROM flights;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on flights (cost=0.00..4772.67 rows=214867 width=63)
(1 row)
Theestimatednumberofrowsisprovidedaspartofthebasicstatistics:
=> SELECT reltuples FROM pg_class WHERE relname = 'flights';
reltuples
−−−−−−−−−−−
214867
(1 row)
Whenestimatingthecost,theoptimizertakesthefollowingtwocomponentsinto
account: disk/andresources.1
I/cost is calculated by multiplying the number of pages in a table and the cost
ofreadingasinglepageassumingthatpagesarebeingreadsequentially.When
1 backend/optimizer/path/costsize.c,cost_seqscanfunction
336
18.2 SequentialScans
thebuffermanagerrequestsapage,theoperatingsystemactuallyreadsmore
data from disk, so several subsequent pages are highly likely to be found in
theoperatingsystemcache.Forthisreason,thecostofreadingasinglepage
using sequential scanning (which the planner estimates at seq_page_cost) is 1
lowerthantherandomaccesscost(definedbytherandom_page_costvalue). 4
Thedefaultsettingsworkwellfors;ifyouareusings,itmakessense
tosignificantlyreducetherandom_page_cost value(theseq_page_cost param-
eterisusuallyleftasis,servingasareferencevalue). Sincetheoptimalratio
between these parameters depends on the hardware, they are usually set at
thetablespacelevel(...).
=> SELECT relpages,
current_setting('seq_page_cost') AS seq_page_cost,
relpages * current_setting('seq_page_cost')::real AS total
FROM pg_class WHERE relname = 'flights';
relpages | seq_page_cost | total
−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−
2624 | 1 | 2624
(1 row)
Thesecalculationsclearlyshowtheconsequencesoftablebloatingcausedby p.
untimely vacuuming: the larger the main fork of the table, the more pages
havetobescanned,regardlessofthenumberoflivetuplestheycontain.
Cresourceestimation comprises the costs of processing each tuple (which the
plannerestimatesatcpu_tuple_cost): 0.01
=> SELECT reltuples,
current_setting('cpu_tuple_cost') AS cpu_tuple_cost,
reltuples * current_setting('cpu_tuple_cost')::real AS total
FROM pg_class WHERE relname = 'flights';
reltuples | cpu_tuple_cost | total
−−−−−−−−−−−+−−−−−−−−−−−−−−−−+−−−−−−−−−
214867 | 0.01 | 2148.67
(1 row)
The sum of these two estimates represents the total cost of the plan. The
startupcostiszerobecausesequentialscanshavenoprerequisites.
337
Chapter18 TableAccessMethods
If the scanned table needs to be filtered, the applied filter conditions appear in
p. the plan under the Filter section of the Seq Scan node. The estimated row count
dependsontheselectivityoftheseconditions,whilethecostestimationincludes
therelatedcomputationexpenses.
The   command displays both the actual number of returned rows
andthenumberofrowsthathavebeenfilteredout:
=> EXPLAIN (analyze, timing off, summary off)
SELECT * FROM flights
WHERE status = 'Scheduled';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on flights
(cost=0.00..5309.84 rows=15383 width=63)
(actual rows=15383 loops=1)
Filter: ((status)::text = 'Scheduled'::text)
Rows Removed by Filter: 199484
(5 rows)
Let’stakealookatamorecomplexexecutionplanthatusesaggregation:
=> EXPLAIN SELECT count(*) FROM seats;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Aggregate (cost=24.74..24.75 rows=1 width=8)
−> Seq Scan on seats (cost=0.00..21.39 rows=1339 width=0)
(2 rows)
Theplanconsistsoftwonodes: theuppernode(Aggregate),whichcomputesthe
count function, pulls the data from the lower node (Seq Scan), which scans the
table.
The startup cost of the Aggregate node includes the aggregation itself: it is im-
possibletoreturnthefirstrow(whichistheonlyoneinthiscase)withoutgetting
alltherowsfromthelowernode. Theaggregationcostisestimatedbasedonthe
0.0025 executioncostofaconditionaloperation(estimatedatcpu_operator_cost)foreach
inputrow:1
1 backend/optimizer/path/costsize.c,cost_aggfunction
338
18.2 SequentialScans
=> SELECT reltuples,
current_setting('cpu_operator_cost') AS cpu_operator_cost,
round((
reltuples * current_setting('cpu_operator_cost')::real
)::numeric, 2) AS cpu_cost
FROM pg_class WHERE relname = 'seats';
reltuples | cpu_operator_cost | cpu_cost
−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−+−−−−−−−−−−
1339 | 0.0025 | 3.35
(1 row)
ThereceivedestimateisaddedtothetotalcostoftheSeqScannode.
ThetotalcostoftheAggregatenodealsoincludesthecostofprocessingarowto
bereturned,whichisestimatedatcpu_tuple_cost: 0.01
=> WITH t(cpu_cost) AS (
SELECT round((
reltuples * current_setting('cpu_operator_cost')::real
)::numeric, 2)
FROM pg_class WHERE relname = 'seats'
)
SELECT 21.39 + t.cpu_cost AS startup_cost,
round((
21.39 + t.cpu_cost +
1 * current_setting('cpu_tuple_cost')::real
)::numeric, 2) AS total_cost
FROM t;
startup_cost | total_cost
−−−−−−−−−−−−−−+−−−−−−−−−−−−
24.74 | 24.75
(1 row)
Thus,costestimationdependenciescanbepicturedasfollows:
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Aggregate
(cost=24.74..24.75 rows=1 width=8)
−> Seq Scan on seats
(cost=0.00..21.39 rows=1339 width=0)
(4 rows)
339
Chapter18 TableAccessMethods
18.3 Parallel Plans
v.. Postgresupportsparallelqueryexecution.1 Theleadingprocessthatperforms
thequeryspawns(viapostmaster)severalworkerprocessesthatexecuteoneand
the same parallel part of the plan simultaneously. The results are passed to the
leader, which puts them together in the Gather2 node. When not accepting the
data, the leader may also participate in the execution of the parallel part of the
plan.
v. Ifrequired,youcanforbidtheleader’scontributionstotheparallelplanexecution
on byturningofftheparallel_leader_participationparameter.
sequential
partoftheplan
Gather
parallel parallel parallel
partoftheplan partoftheplan partoftheplan
worker leader worker
Naturally,startingtheseprocessesandsendingdatabetweenthemisnotfree,so
notallqueriesbyfarshouldbeparallelized.
Besides, not all parts of the plan can be processed concurrently, even if parallel
executionisallowed.Someoftheoperationsareperformedbytheleaderalone,in
thesequentialmode.
1 postgresql.org/docs/14/parallel-query.html
backend/access/transam/README.parallel
2 backend/executor/nodeGather.c