title:Protection of Keys against Modification Attack
author:Wai W. Fung and
Mordecai J. Golin and
James W. Gray III
Protection of Keys against Modification Attack 
Wai W. Fung 
Mordecai J. Golin 
Department of Computer Science, HKUST 
Clear Water Bay, Kowloon, Hong Kong 
Department of Computer Science, HKUST 
Clear Water Bay, Kowloon, Hong Kong 
wwfung @cs.ust.hk 
golin @cs.ust.hk 
James W. Gray, 111 
xaot88 @aol.com 
Abstract 
In recent work, Anderson and Kuhn [3] described an U I -  
tack  against tamper-resistant devices wherein  a secret  key 
stored in EEPROM is compromised using a simple arid low- 
cost attack.  The attack  consists of setting  bits  in the EEP- 
ROM  using  low-cost probes arid observing  the effect on the 
output of  the device.  These attacks are extremely  general, 
as they apply to virtually any cryptosystem.  The objective 
of the present work  is to explore  cryptographic techniques 
with the goal ofraising the cost (in terms of time and nionej) 
of caryirig out the EEPROM modification attack by Class I 
attackers, at least to a point where it is as prohibitive as the 
cost of purchasing more expensive equipnieni.  We propose 
the m-permutation protection scheme  in which  the key will 
be encoded in a special way and burned into the EEPROM 
ofthe device.  To attack the scheme, the attacker needs to be 
P, in which 
able to solve for K  in the equation K  = 
P,’s are  unknown.  It  is observed  that  the m-permutation 
protection scheme does riot distribute the key K  uniformly 
Analysis  shows  that m  = 3 or m  = 5 are  already good 
enough praciically to provide strong security if the encoding 
is done properly and that m  > 5  may not give significant 
improvement to the security ofthe scheme. 
1. Introduction 
tack,  at  least  to  the  point  where  it is  more expensive than 
EEPROM reading equipment. 
In  this  attack, we  assume that  attackers can  write  arbi- 
trary  values to arbitrary  locations of an EEPROM, and the 
location  of  the  key  within  EEPROM  is  known.  This  is  in 
fact  often  the  case,  since,  in  practice  a  DES  key  is  often 
stored  in the bottom  eight bytes of the EEPROM. We  also 
assume  that  EEPROM  bits  cannot  be  read  directly  since 
equipment  to  sense  the  value  of  an  EEPROM  bit  is  sub- 
stantially more expensive than the microprobing needles. 
Anderson  and  Kuhn’s attack  makes  use  of the  key  par- 
ity errors implemented in many applications utilizing  DES. 
Their  assumption  is  that  the  tamperproof  device  will  not 
work  (e.g.,  returning  an  error  condition) whenever  a  key 
parity error is detected. We will see below that this assump- 
tion is not strictly necessary for a successful attack. 
The paper is structured  as follows.  We  first describe the 
EEPROM modification attack.  Then various possible  pro- 
tection  schemes  will  be  discussed, and  we  argue that  it  is 
not an easy problem.  Our proposed  scheme for protecting 
the  keys against the modification  attack will  be  introduced 
in Section 5 and analysed in Section 6. 
1.1. The EEPROM Modification Attack 
Anderson  and  Kuhn’s original attack proceeded  as fol- 
lows. 
In  1997, Anderson  and  Kuhn  introduced  a low-cost  at- 
tack called the EEPROM modification attack in [3]. This is 
dles ’ are used,  with the  help of  a microscope and  micro- 
a physical  attack in which two low-cost microprobing nee- 
manipulators, to set or clear target  bits  in an effort  to infer 
those bits. In addition  to being low-cost, this attack is quite 
general  and  practical.  The objective of the present  work  is 
to explore techniques  of  raising  the  cost  (in  terms of  time 
and money) of  carrying out  an EEPROM  modification  at- 
‘ A  reviewer  has  pointed  out  that  such  microprobing  needles  can  be 
obtained for only five US dollars each. 
1 
2 
3 
4 
5 
6 
7 
8 
1081-6011101 $10.00 0 2001 IEEE 
26 
Modification Attack 
loop f o r i  from 0 to length(key) -1 
randomly set the ith bit to 1 (or 0, it 
doesn’t matter) 
operate (e.g. encrypt or sign) with the device 
if (device works) then 
conclude the bit was a 1 
if (key pariv error message appears) then 
re-set the bit to 0 (as it was 0)’ 
loopend 
Although  Anderson  and  Kuhn  originally  described  the 
above attack with  respect to a DES key and the associated 
key-parity bits, the attack can be generalized for an arbitrary 
key, with or without key-parity  bits.  In particular,  to infer 
bit i, the attacker  runs  the device once before setting bit  i, 
and once after setting bit i. If the output changes in any way 
(e.g., giving a key parity  error or simply giving a different 
output) we know the original value for bit i is zero; if there 
was no change, the original value was one. Thus, the attack 
is quite general and efficient, and can be applied to virtually 
any key stored in a known EEPROM location. 
tion.  That something is, essentially, the key.  Thus, storing 
the key  in  a random  location,  and  using  it  indirectly, does 
not,  in  itself  solve our problem.  It succeeds in  making the 
attacker’s job a little bit harder because he needs to find the 
address before  finding the  actual key.  But  still, the attack 
can be done in O(n) time. For the above reason, the model 
we set  out in Section 3 assumes that  the key  is stored in  a 
fixed location  within  EEPROM. 
2.2.On-chip Reprogramming 
2. A Closer Look 
In our discussion, we use K to denote the actual  key bit 
vector.  That is, the key  value to be used by  the card in en- 
crypting, signing, etc. P ,will be used to denote the physical 
key bit vector.  It is the actual bit pattern stored in the EEP- 
ROM  and is not necessarily the same as K. In particular, it 
may  represent some encoding of  K  and may take  up more 
space than K would. 
There are at least two weaknesses that  the modification 
attack  exploits.  The first  is that  P  = K, that  is,  the key  is 
stored bare in the device; and hence every bit compromised 
is  the actual  key  bit  to be  used  in  the  encryption process. 
The second is that the key  parity error enables the attacker 
to know  with  100% certainty whether the current  bit  was 
changed or not.  Together, these two weaknesses allow the 
attack  to be performed fast, using O ( n )  probes, where n is 
the length of K. 
These observations lead us to consider possible  protec- 
tion schemes that could help close these loopholes. At first, 
it may seem that  there are easy ways of foiling the modifi- 
cation attack. We  will discuss a few ideas and why they do 
not work. 
Another approach that comes to mind immediately is for 
the card to keep track of the number of faults occurring dur- 
ing  its use  (using e.g., a counter) and erase the key  once a 
certain threshold  is  reached.  In  fact,  one can  imagine any 
number of possible booby traps that could be set for the at- 
tacker,  foiling with  high  probability  any  attempt to use  an 
EEPROM modification attack. 
This seems like a good solution. For example, if we erase 
the key  the first  time  a key  parity error is detected, the at- 
tacker  would cause an error with  probability  1 - 2-”  (for 
an n-bit  key).  Thus, the key  would probably be erased  by 
the third  or  fourth bit  being  attacked.  For  large n, the  at- 
tacker’s probability of obtaining the complete key would be 
negligible. 
However, this approach again adds only a small  amount 
of security.  As pointed  out by  Anderson and  Kuhn  in  [ 2 ] ,  
on-chip  reprogramming  of  the  EEPROM  requires  a  pro- 
gramming voltage that would be generated using a large ca- 
pacitor.  Further,  such capacitors can be identified  under a 
microscope and destroyed, thus removing the on-chip EEP- 
ROM  reprogramming  capability  of  the  card.  Hence,  the 
model  we  set  out  in  the  next  section  will  rule  out  repro- 
gramming of the EEPROM. 
2.1. Hiding the Key in a Random Location 
3. Model 
One may  think  it  would  help  if  we  store  the  key  in  a 
random location; thus  the attacker would  not  know  where 
exactly, within the EEPROM, to apply his attack. 
By  the following  reasoning, this approach adds negligi- 
ble  security  to the system.  Whenever the  key  needs to be 
used, its address (e.g., its offset  within EEPROM) needs to 
be  retrieved.  That  is, the  actual  address of  the  key  needs 
to be stored on the card. But, is this address stored at some 
fixed location? If it is, the address becomes, essentially, part 
of the  key;  the attacker begins his attack by  reading (via a 
modification  attack) the address of the key and then contin- 
ues by  reading  the actual  key.  If  the  address  is  not  stored 
in  a  fixed  location-perhaps 
it  is  also  stored in  a random 
the  address’  address needs  to be  stored on 
location-then 
the card. Now is the address’ address stored in a fixed loca- 
tion? 
Clearly,  we cannot do address indirection  ad infinitum; 
at some point,  we need to store something in  a fixed  loca- 
We  will  make  several  assumptions  in  our  discussion. 
Firstly,  class  I  attackers  (from  the  taxonomy  of  attackers 
proposed  by IBM [I]),  namely, clever outsiders with  mod- 
erately sophisticated equipment, are assumed. In particular, 
we do not  attempt to address attacks by  insiders or attacks 
utilizing military-grade equipment.  Secondly, it is assumed 
that  P  is  stored  in  EEPROM  and  that  the  attacker cannot 
read the EEPROM directly. Finally, we assume the attacker 
is not  able to see the exact wiring of the device.  In particu- 
lar, part of the wiring will be hidden beneath the surface of 
the chip (i.e., in one of the lower layers) during the chip fab- 
rication process.  This wiring is considered to be the “batch 
key”, which is known only to the manufacturers and to those 
who need to program the device.  For example, the devices 
would  be  manufactured  in  batches  of  10,000 all  with  the 
same batch key.  A single customer, say a bank, would pur- 
chase a batch of devices and would be given the batch key. 
This would enable them to program keys into the card. 
27 
On the other hand, we will  assume that  the attacker can 
get hold  of the device and can operate it as many times as 
he  wishes.  Other than  the  hidden wiring, the algorithm is 
open  and  we assume the  attacker knows the  details of  the 
protection scheme. 
A protection scheme is formally specified  by the follow- 
ing entities: 
1.  n - the length of the actual key K 
2.  p - the length of the physical key P 
3.  The  function  encode  will  be  used  at  the  card- 
programmingkard-issuing  organization 
the 
bank); it will  generate a pattern to be burned into the 
chip: 
(e.g., 
encode : (0, I}"  -+ (0, I}" 
4.  The decoding functions and  wiring  functions will  be 
implemented by the chip manufacturer. For each actual 
key bit, 2,  0 5 i  A 8  -+ { 0 , 1 )  
0  The  ith wiring  function  determines  the  offset 
within  P from where a  wire  is connected  to the 
ith decoding function: 
wiring* : { l ; . . , A i )   + { O , l , . . . , p -   1> 
For example, wiring;(j)  = k  means the jth in- 
put bit for the ith decoding function is wired from 
the kth bit of P. 
For any valid protection scheme, we require that the same K 
will  be decoded from its encoded version by the chip. That 
is, if the actual key  is K  = kolcl. . .kn-l,  and the physical 
key is P = encode(K), we require that for all i, 0 5 i < n, 
ki  = decodei (P[wiringi (I)], . . . , P[wiringi ( A i ) ] )  
With respect to this model, the attacker is assumed to know 
the location of P as well  as the decoding functions decode; 
and the wiring functions wiringi. Of course, the card man- 
ufacturer can choose to keep all these secret. But protection 
schemes will be designed under Kerckoff's principle [ 6 ] ,  in 
which  the  security of  a  cryptosystem  is  not  based  on  the 
secrecy of what system is being used. 
The attacker can use the microprobing needles to write a 
0 or 1 to any  location  of the EEPROM storage for P. Each 
of the attacker's writes to the EEPROM is called a probe. 
28 
4. Possible Protection Schemes 
4.1. Introducing Redundancy 
In this approach, P is chosen to be a redundant represen- 
tation  of K.  The idea is that even when some bits of  P are 
changed, there will  be no change in the output. It is tempt- 
ing to think we will be able to design the wiring and decod- 