structures in the driver and recover the value of the assignment
of the ioctl handler function pointer. In the case of our running
example, we identify the write to the unlocked_ioctl field of a
file_operations structure (Listing 4, line 9). We can then consider
the function ioctl_handler as an ioctl handler.
4.3 Device File Detection
To determine the device file corresponding to an ioctl handler, we
need to identify the name provided in the registration of the ioctl
handler (for example, in our running example, the device file would
be /dev/example_device, from line 7 of Listing 4).
Depending on the type of device, there are several ways to
register the file name in the Linux kernel [14, 56]. For example,
the registration of a character device [35] will use the method
alloc_chrdev_region to associate a name with the device. For
proc devices, the method proc_create is used to provide the file-
name. Furthermore, as mentioned in Section 3.1, depending on the
device type, the directory in which the device file is found may
vary.
Given an ioctl handler, we use the following procedure to
identify the corresponding device name.
(1) First, we search for any LLVM store instruction that is
storing the address into one of the fields of any operations
structures listed in Appendix A.
(2) We then check for any reference to the operations structure
in any of the registration functions [56].
(3) We analyze the argument value for the device filename and
return it if it is a constant.
2There are at least 72 variations of these structures.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2128In case of the running example, Listing 4, we previously de-
termine that the ioctl handler function is ioctl_handler. We
identify that ioctl_handler is stored in the file_operations
structure (i.e., driver_ops) at line 9 (Step 1), then check for the
usage of driver_ops, as parameter for the function cdev_init
at line 10 (Step 2). The function cdev_add implies that the device
is a character device. We backtrack to the allocation function for
the device metadata (alloc_chrdrv_region) at line 7, whose third
argument is the device name, detect it as a constant string, and
return /dev/example_device as the device name.
1
2
3
4
5
6
7
8
VOS_INT __init RNIC_InitNetCard(VOS_VOID) {
...
snprintf(pstDev->name, sizeof(pstDev->name),
"%s%s",
RNIC_DEV_NAME_PREFIX,
g_astRnicManageTbl[ucIndex].pucRnicNetCardName);
...
}
Listing 5: Dynamically generated device name in RNIC dri-
ver on Huawei Honor phone. DIFUZE fails to find the device
name for this driver.
A driver could use dynamically created filenames, as shown in
Listing 5. Unfortunately, with the limitations inherent to static anal-
ysis, we miss such filenames and must fallback to manual analysis
(of course, if we wish to remain fully automated we can simply
ignore these devices).
Next, we proceed on to identifying valid command identifiers
accepted by a given ioctl handler.
4.4 Command Value Determination
Given the ioctl handler, we perform a static inter-procedural, path-
sensitive analysis to collect all the equality constraints on the cmd
value (i.e., the second argument of the ioctl()). We then use Range
Analysis [52] to recover the possible values for the comparison
operand. In the case of the ioctl example shown in Listing 3, we
collect the following constraints: cmd == 0x1003 (line 10), cmd ==
0x1002 (line 12) and cmd == 0x1001 (line 32 → Line 41). As the
comparison operands are constants, running Range Analysis on
them results in constants: 0x1003, 0x1002 and 0x1001 respectively.
We consider only equality constraints on the cmd value. Based
on our observation that almost all the drivers use equality com-
parison to check for the valid command IDs. There exists special
ioctl functions, such as V4L2 drivers, in which the driver specific
functions are called in a nested manner by other drivers. We expand
our solution for these cases in Appendix B.
4.5 Argument Type Identification
The ioctl command identifiers and the corresponding data struc-
ture definitions have a many-to-many relationship: each ioctl com-
mand may take several different structures (for example, based on
global configuration), and each command structure may be passed
to multiple ioctl commands. To find these structures, we first iden-
tify all the paths to the copy_from_user function, which the Linux
kernel uses to copy data from userspace to kernel space, such as
line 16 in Listing 3 → line 3 in Listing 2. We ignore call-sites whose
source operand (i.e., the second argument of copy_from_user) is
not the passed argument to the ioctl function, since such case
cannot help us to determine the ioctl argument type. At each of
the remaining call-sites, we find the type of the source operand.
This is the type definition to which the user data argument to the
ioctl handler must conform.
Note that pointer casting could hide the actual structure type.
Consider the running example, where the copy_from_user in line
3 of Listing 2 is reachable from the ioctl handler, ioctl_handler
in Listing 3 from multiple paths (like line 16, line 21, and line 32
→ line 41). However, the actual type of the source operand at the
call-site is void *. In addition, the copy_from_user function might
reside in a wrapper function and be called indirectly by the ioctl
function (such as line 16 in Listing 3 → line 3 in Listing 2), which
is distributed across different functions or files.
To handle this, we perform inter-procedural, path-sensitive type
propagation to determine all the possible types that may be assigned
to the source operand of a copy_to_user function in each path.
This gives us the set of possible types, for each given path, of the
user data argument to the ioctl handler.
To associate the command identifier to each of these structure
types, we also collect the equality constraints (as explained in
Section 4.4) along the path while performing the type propaga-
tion. The constraints on the command value on a path reaching a
copy_from_user function represent the possible command identi-
fiers associated with the structure type.
For the running example in Listing 3, we first identify all paths
reaching a copy_from_user call-site (Note that the actual call hap-
pens through the wrapper function copy_from_user_wrapper).
Table 1, column 2 shows all the relevant paths. For brevity, we
ignored the paths that have the same constraints on cmd and reach
the same call-site.
We also ignore Path 6 since the source operand is not the user
argument (i.e., at line 49 in Listing 3, the second argument of
copy_from_user_wrapper is not argp). Finally, for the remain-
ing paths, we identify the type of the destination operand of the
target copy_from_user call-site to determine the command value
type. For example, for Path 1 in Table 1, the type of argp is the
same as the destination operand curr_idx at line 16 in 3, which is
defined as uint32_t at line 6. For each command value, we may get
multiple types. For instance, as shown in Table 1, Path 1 and Path 2
have the same cmd constraint values but different argument types.
For each command value, we associate all the possible argument
types. For example, from Table 1, the command value 0x1003 can
be associated with argument types uint32_t and uint8_t. Next,
we need to extract the arguments’ structure definitions.
4.6 Finding the Structure Definition
Finding the definition of a type requires finding the definition of
all the types it is composed of. In the case of our running example,
in Listing 1, extracting the definition of type DriverStructOne
requires extracting the definitions of both DriverStructTwo and
DriverSubstructTwo.
For each of the types identified in Section 4.5, we find the source
file name of the corresponding copy_from_user function using the
debug information computed in Section 4.1. Knowing the source file,
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2129Table 1: Relevant paths from ioctl handler (of Listing 3) to a copy_from_user call-site
Id
1
2
3
4
5
6
Line 10 → Line 11 → Line 16 → Line 3 (of Listing 2)
Line 10 → Line 11 → Line 21 → Line 3 (of Listing 2)
Path
Line 12 → Line 16 → Line 3 (of Listing 2)
Line 12 → Line 21 → Line 3 (of Listing 2)
Line 30 → Line 32 → Line 41 → Line 3 (of Listing 2)
Line 30 → Line 32 → Line 49 → Line 3 (of Listing 2)
cmd constraints Resolved command id User argument type
cmd == 0x1003
cmd == 0x1003
cmd == 0x1002
cmd == 0x1002
cmd == 0x1001
cmd == 0x1001
0x1003
0x1003
0x1002
0x1002
0x1001
0x1001
uint32_t
uint8_t
uint32_t
uint8_t
DriverStructOne
N/A
we use our GCC-to-LLVM pipeline to generate the corresponding
preprocessed file. As preprocessed files should contain a definition
of all the required types, we find the definition of the identified
type. Then we run c2xml [63] tool to parse the C struct definition
into XML format from which the required definition of the types is
extracted.
5 STRUCTURE GENERATION
After DIFUZE recovers the ioctl interface, it can begin generating
instances of structures to pass to the on-device execution engine.
The procedure for this is straightforward: DIFUZE instantiates
structures, fills their fields with random data, and properly sets
pointers to build complex inputs to ioctls.
Type-Specific Value Creation: Certain values are more likely
to trigger increased code coverage than others. For example, buffer
lengths in system code are often aligned to bit boundaries (i.e.,
buffers of size 128, 256, and so on), so values on or just under a bit
boundary are more likely to trigger corner cases (such as single-byte
overwrites due to careless string termination). This observation
is common wisdom in the fuzzing community, and previous work
has widely used it [68]. DIFUZE leverages this concept as well, and
favors (but does not confine itself to) integers that are a power of
two, one less than a power of two, or one greater than a power of
two in its generated integers.
There are some pointers that reference data that is either unstruc-
tured (char * pointers, for example), or for which the structure
definition can’t be recovered (void * data). For this data, DIFUZE
allocates a page of random content.
Sub-structure Generation: Inputs to ioctls often take the
form of nested structures, where a top-level structure contains
pointers to other structures. DIFUZE generates these structure
instances individually and sends them to the on-device execution
component. This component, in the next stage, merges them into a
nested structure before passing them to the ioctl itself.
6 ON-DEVICE EXECUTION
While prior stages of DIFUZE run on the analysis host, the actual
execution of ioctls must happen on the target host. As such, the
structure generation component sends the generated structures,
along with the target device driver filename and ioctl command
identifier, to the on-device execution component. This component
then finalizes these structures and triggers the ioctl.
6.1 Pointer Fixup
Some structures comprise multiple memory regions connected by
pointers. To save space, the structure generation component trans-
mits the different memory region instances independently, along
with metadata about how they can be combined, and the on-device
execution component builds the complete structure using this data.
This preserves bandwidth between the analysis host and target
host, since the same data can be used for differently built structures.
For example, since the individual nodes of a tree structure will be
sent individually, these nodes can be used to create many different
final configurations of the tree structure.
Some structures are recursive. For example, a linked list node may
contain a pointer to the next linked list node. To set a bound on the
number of combinations of structures that the on-device execution
component attempts to create, DIFUZE limits the recursion of such
structures to a set threshold.
6.2 Execution
With the structure created, DIFUZE’s on-device execution com-
ponent opens the appropriate device file and triggers the ioctl
system call with the ioctl command identifier and the proper data
structure. At this point, DIFUZE watches for any bug in the ker-
nel, which crashes the target device. This is done by maintaining
a heartbeat signal between the analysis host and the target host.
When DIFUZE finds a bug, it logs the series of inputs that had been
sent to the host device for later reproduction and triage.
System restart. When a bug is triggered, the target host will
either be in an inconsistent state or will have crashed. In the former
case, the on-device execution component triggers a reboot of the
device before resuming fuzzing on other ioctl commands and
other drivers. In the latter case, depending on the way the crash
occurred, the device sometimes restarts itself. When that happens,
DIFUZE can resume without analyst interaction. Otherwise, an
analyst will need to reboot the device before fuzzing can resume.
7 IMPLEMENTATION
As shown in Figure 1, we engineered our system to be completely
automated. The user simply provides the compilable kernel source
archive, connects the target host (i.e., the mobile phone) to the
analysis host, and starts the on-device execution component on the
target host. After that, with a single command, our entire pipeline
will be run.
Interface Extraction: We used LLVM 3.8 to implement the
interface extraction techniques. All components of the interface
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2130extraction are implemented as individual LLVM passes. As men-
tioned in Section 4.4, We used an existing implementation of Range
Analysis [52] to recover valid command identifiers.
Table 2: Android Phones Used in Evaluation (Note that the
kernel versions were the latest Android kernels for each
phone at the time of our experiment)
7.1 Interface-Aware Fuzzing
Our implementation of Sections 5 and 6 is called MangoFuzz. Man-
goFuzz is the combination of structure generation on the analysis
host and on-device execution of ioctls, which together achieve
interface-aware fuzzing. It is an intentionally simple prototype de-
signed to test the effectiveness of interface-aware fuzzing, without
other optimizations that could influence the results.
MangoFuzz specifically targets ioctl system calls on real An-
droid devices. Using the methods described in Section 5, it generates
random sequences of ioctl calls, along with associated structures,
and sends them to the on-device execution component running on
the target host.
For a “production-ready” variant of our approach, we also in-
tegrated DIFUZE into syzkaller, a state-of-the-art Linux system
call fuzzer. This integration has the goal of creating the best pos-
sible tool, which we will contribute back to the community as an
open-source enhancement of syzkaller.
Syzkaller is a Linux system call fuzzer, which allows analysts to
(manually) provide system call descriptions, after which it will fuzz
the associated system call. Syzkaller can handle structures as system
call arguments if corresponding formats are manually specified. To
integrate with DIFUZE, we automatically convert the results of our
Interface Recovery step to the format expected by syzkaller, making
it interface-aware. Syzkaller is typically used on kernels compiled
with coverage information and KASAN (or another memory access
sanitizer). However, there is a configuration for running on real,
unmodified Android devices, which can be used for our purposes.
8 EVALUATION
To determine the effectiveness of DIFUZE we evaluate both its
interface recovery and bug-finding capabilities. The evaluation is
performed on seven different Android phones from five of the most
popular vendors, covering a wide range of device drivers. Table 2
shows the specific phones along with the vendor of the chipsets.
First, we evaluate the effectiveness and efficiency of the interface
recovery, as it is the core component of the system. To validate
the results, we manually analyze a random sampling of ioctls
and structures and check them against our system’s recovered
interfaces. We then perform a comparative evaluation of the bug
finding capabilities of DIFUZE, using both MangoFuzz and our
improvements to syzkaller as the fuzzing component.
8.1 Interface Extraction Evaluation
All the steps of interface extraction are run on the same experiment
platform, a machine with an Intel Xeon CPU E5-2690 (3.00 GHz)
running Ubuntu 16.04.2 LTS. On average, it took 55.74 minutes to
complete the entire interface extraction phase for a kernel.
We evaluate the effectiveness of different steps of our interface
extraction on the kernels of the devices listed in Table 2. Table 3
shows the interface extraction results on different kernels. DIFUZE
identified a total of 789 ioctl handlers in the kernels of seven
Device
Pixel
E9 Plus
M9
P9 Lite
Honor 8
Galaxy S6
Xperia XA
Vendor
Google
HTC
HTC
Huawei
Huawei
Samsung
Sony
Chipset Vendor
Qualcomm
Mediatek
Qualcomm
Huawei