## PostgreSQL xid(int4) to txid(int8)  
### 作者                                 
digoal                         
### 日期                                                                                             
2011-09-30                        
### 标签                          
PostgreSQL , 事务号 , xid , txid , int4 , int8   
----                                                                                          
## 背景                      
这篇BLOG的起源还是MVCC，PostgreSQL很多东西都是围绕 MVCC展开的。所以建议可以阅读一下手册的相关部分，另外我之前也写过几篇和MVCC相关的BLOG，有兴趣的朋友可以浏览一下。  
今天我的同事francs发现我们昨天出现BUG的那个数据库的事务ID到100多亿了，正常情况下应该是在2^32约40亿以内的。  
一开始我也非常惊讶，怎么会出现这样的情况。  
到数据库里面查询，果真如此 :   
```  
digoal=# select txid_current();  
 txid_current   
--------------  
  11658174917  
(1 row)  
```  
那么怎么会这样呢?  
我们先来看看数据库里面xid类型的定义 :   
```  
digoal=# select * from pg_type where typname='xid';  
 typname | typnamespace | typowner | typlen | typbyval | typtype | typcategory | typispreferred | typisdefined | typdelim | typrelid  
 | typelem | typarray | typinput | typoutput | typreceive | typsend | typmodin | typmodout | typanalyze | typalign | typstorage | ty  
pnotnull | typbasetype | typtypmod | typndims | typdefaultbin | typdefault   
---------+--------------+----------+--------+----------+---------+-------------+----------------+--------------+----------+---------  
-+---------+----------+----------+-----------+------------+---------+----------+-----------+------------+----------+------------+---  
---------+-------------+-----------+----------+---------------+------------  
 xid     |           11 |       10 |      4 | t        | b       | U           | f              | t            | ,        |        0  
 |       0 |     1011 | xidin    | xidout    | xidrecv    | xidsend | -        | -         | -          | i        | p          | f   
         |           0 |        -1 |        0 |               |   
(1 row)  
```  
显然长度是4字节，32位没错的。  
然后来看看 txid_current()这个函数返回的结果是什么类型 :   
```  
digoal=# \df+ txid_current  
                                                                     List of functions  
   Schema   |     Name     | Result data type | Argument data types |  Type  | Volatility |  Owner   | Language | Source code  |      
    Description           
------------+--------------+------------------+---------------------+--------+------------+----------+----------+--------------+----  
------------------------  
 pg_catalog | txid_current | bigint           |                     | normal | stable     | postgres | internal | txid_current | get  
 current transaction ID  
(1 row)  
```  
结果是bigint,占据64个比特位.  
那么为什么系统要使用这样一个超出XID范围的结果类型呢？  
手册中有指出 :   
```  
The internal transaction ID type (xid) is 32 bits wide and wraps around every 4 billion transactions. However, these functions export a 64-bit format that is extended with an"epoch" counter so it will not wrap around during the life of an installation.  
```  
具体可以参考我另一篇BLOG  
[Get txid from pg_controldata's output](20110930_02.md)
所以txid_current()这个函数和tuple里面查到的xmin,xmax就没有太大的可比性了，计算年龄还是使用系统提供的age()函数比较靠谱。  
关于这个函数返回的值，源码文件txid.c有这样一段 :   
```  
 *      Export internal transaction IDs to user level.  
 *  
 * Note that only top-level transaction IDs are ever converted to TXID.  
 * This is important because TXIDs frequently persist beyond the global  
 * xmin horizon, or may even be shipped to other machines, so we cannot  
 * rely on being able to correlate subtransaction IDs with their parents  
 * via functions such as SubTransGetTopmostTransaction().  
 *  
/* txid will be signed int8 in database, so must limit to 63 bits */  
#define MAX_TXID   UINT64CONST(0x7FFFFFFFFFFFFFFF)  
/*  
 * do a TransactionId -> txid conversion for an XID near the given epoch  
 */  
static txid  
convert_xid(TransactionId xid, const TxidEpoch *state)  
{  
        uint64          epoch;  
        /* return special xid's as-is */  
        if (!TransactionIdIsNormal(xid))  
                return (txid) xid;  
        /* xid can be on either side when near wrap-around */  
        epoch = (uint64) state->epoch;  
        if (xid > state->last_xid &&  
                TransactionIdPrecedes(xid, state->last_xid))  
                epoch--;  
        else if (xid last_xid &&  
                         TransactionIdFollows(xid, state->last_xid))  
                epoch++;  
        return (epoch << 32) | xid;  
}  
```  
## 关于freeze的示例  
```  
digoal=# create table txid_test(id int);  
CREATE TABLE  
digoal=# insert into txid_test values (1);  
INSERT 0 1  
digoal=# insert into txid_test values (2);  
INSERT 0 1  
digoal=# insert into txid_test values (3);  
INSERT 0 1  
digoal=# select relfrozenxid,age(relfrozenxid) from pg_class where relname='txid_test';  
 relfrozenxid |  age     
--------------+--------  
   3070449946 | 361154  
(1 row)  
digoal=# select id,age(xmin),xmin,txid_current() from txid_test ;  
 id |  age  |    xmin    | txid_current   
----+-------+------------+--------------  
  1 | 16578 | 3070798309 |  11660749479  
  2 | 14431 | 3070800456 |  11660749479  
  3 | 13595 | 3070801292 |  11660749479  
(3 rows)  
digoal=# vacuum full txid_test ;  
VACUUM  
digoal=# select relfrozenxid,age(relfrozenxid) from pg_class where relname='txid_test';  
 relfrozenxid |  age     
--------------+--------  
   3070449946 | 386485  
(1 row)  
digoal=# select id,age(xmin),xmin,txid_current() from txid_test ;  
 id |  age  |    xmin    | txid_current   
----+-------+------------+--------------  
  1 | 46133 | 3070798309 |  11660779034  
  2 | 43986 | 3070800456 |  11660779034  
  3 | 43150 | 3070801292 |  11660779034  
(3 rows)  
```  
vacuum full并没有对xmin进行修改，原因是这个表的relfrozenxid 的年龄未达到触发freeze事件 (默认是5000W).  
下面是强制使用freeze。  
```  
digoal=# vacuum full freeze txid_test ;   
VACUUM  
digoal=# select relfrozenxid from pg_class where relname='txid_test';  
 relfrozenxid   
--------------  
   3070104853  
(1 row)  
digoal=# select id,age(xmin),xmin,txid_current() from txid_test ;  
 id |    age     | xmin | txid_current   
----+------------+------+--------------  
  1 | 2147483647 |    2 |  11660042643  
  2 | 2147483647 |    2 |  11660042643  
  3 | 2147483647 |    2 |  11660042643  
(3 rows)  
```  
所以xmin发生了变化，  
另外需要注意的是，freeze后的tuple, xmin 变成了一个FrozenXID，这个XID不参与比较，始终认为这个ID比其他的XID老，所以用 age 去计算始终显示 2147483647 。  
术语解释请参考后面的术语部分。  
## 关于freeze的示例2  
这个示例和前面是一样的，只是凸显了set vacuum_freeze_min_age=0;的效果。  
```  
digoal=# delete from txid_test ;  
DELETE 3  
digoal=# alter table txid_test set (autovacuum_freeze_min_age=0);  
ALTER TABLE  
digoal=# insert into txid_test values (1);  
INSERT 0 1  
digoal=# insert into txid_test values (2);  
INSERT 0 1  
digoal=# insert into txid_test values (3);  
INSERT 0 1  
digoal=# select relfrozenxid,age(relfrozenxid) from pg_class where relname='txid_test';  
 relfrozenxid |  age     
--------------+--------  
   3070449946 | 852352  
(1 row)  
digoal=# vacuum full txid_test;  
VACUUM  
digoal=# select relfrozenxid,age(relfrozenxid) from pg_class where relname='txid_test';  
 relfrozenxid |  age     
--------------+--------  
   3070449946 | 859567  
(1 row)  
digoal=# select id,age(xmin),xmin,txid_current() from txid_test ;  
 id |  age  |    xmin    | txid_current   
----+-------+------------+--------------  
  1 | 19165 | 3071293757 |  11661247514  
  2 | 17484 | 3071295438 |  11661247514  
  3 | 16902 | 3071296020 |  11661247514  
(3 rows)  
```  
显然，没有XMIN没有发生变化，原因是autovacuum_freeze_min_age=0是autovacuum触发时生效的。我们手工的vacuum不会去读这个属性。  
```  
digoal=# set vacuum_freeze_min_age=0;  
SET  
digoal=# vacuum full txid_test ;  