A substantial number of alternative PoW protocols have
been proposed to address NC’s security issues. In this part
we split these designs into two groups, better-chain-quality
and attack-resistant protocols, based on their claims, and
selectively introduce some most
inﬂuential designs. These
two groups are not mutually exclusive. Although we omit
non-security-related innovations and hybrid protocols,
i.e.,
protocols that combine PoW with other consensus mecha-
nisms [43]–[45], our security analysis is still applicable to their
underlying PoW protocols. We refer interested readers to the
recent SoK paper of Bano et al. [28] for a more complete
overview of consensus protocols.
1) Better-chain-quality protocols: These designs usually
modify NC’s fork-resolving policy, hoping to reduce the prob-
ability that the compliant miners work on the attacker’s chain
during a block race. The ﬁrst three designs abandon NC’s ﬁrst-
received tie-breaking rule, yet still follow the longest-chain
rule, whereas the others abandon both rules.
a) Uniform tie-breaking: Eyal and Sirer suggest during
a tie, miners choose which chain to mine on uniformly at
random regardless of which one they receive ﬁrst [6]. This
policy is adopted by the PoW component of Ethereum, the
cryptocurrency with the second largest market capitaliza-
tion [46]. Bitcoin-NG, a high-throughput blockchain proto-
col [47] implemented in two cryptocurrencies Waves [48] and
Aeternity [49], also follows uniform tie-breaking policy.
177
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. A Fruitchains execution. Banana’s gap is height(E)− height(B) = 2.
Tomato is not a valid fruit because its pointer block (D) is orphaned. When
To = 3, pear is not valid even if it is included in E, as its gap reaches To.
i.e.,
b) Largest-fee and smallest-hash tie-breaking: Lerner
proposes DECOR+, in which during a tie, miners choose
the chain whose tip,
the last block, has the largest
transaction fees, and when multiple tips have the same amount
of fees, choose the one with the smallest hash [12]. A variant
of DECOR+ is implemented in Rootstock [17], a Bitcoin
sidechain [50]. The author believes a deterministic tie-breaking
policy helps the compliant miners choose the same chain in a
tie, thus limiting the attacker’s ability.
c) Unpredictable deterministic tie-breaking:
In Byz-
coin [18], Kokoris-Kogias et al. recommend that
ties are
resolved deterministically via a pseudorandom function taking
all competing blocks as inputs. This tie-breaking policy is also
described by Camacho and Lerner in an updated version of
DECOR+ [21]. Within this policy, the attacker can neither
determine whether a secretly-mined block can win a tie with
unfair possibility before all competing blocks are mined, nor
split the compliant mining power.
d) Publish or perish: Zhang and Preneel present a design
Publish or Perish, in which forks are resolved by comparing all
chains’ weights [13]. Blocks published after their competitors
do not contribute to the weight of its chain, and blocks that
incorporate links to their parents’ competitors are appreciated
more. Consequently, a block that is kept secret until a compet-
ing block is published contributes to neither or both branches,
hence it confers no advantage in winning the block race.
e) Others: Other better-chain-quality protocols include
the GHOST protocol designed by Sompolinsky and Zohar [33]
and Chainweb by Martino et al. [23].
2) Attack-resistant protocols: These designs usually modify
NC’s blockchain topology and reward distribution policy,
hoping to reduce the attacker’s proﬁtability or to reduce the
compliant miners’ losses. They can be categorized into three
types: the ﬁrst two types issue rewards based on the block’s
topological position in the blockchain, whereas the third type
issues rewards based on the block content.
a) Reward-all protocols: In these designs, most of recent
PoW solutions receive a fraction of a full reward, although
some of them may not contribute to the transaction conﬁr-
mation. Consequently, the compliant miners’ losses due to
malicious orphaning of their blocks are compensated.
Fruitchains by Pass and Shi [20] distributes rewards to all
recent fruits, which are parallel products of block mining.
Similar to “a block candidate is a block if its hash’s ﬁrst l bits
are smaller than a predeﬁned target”, the candidate is a fruit if
its hash’s last l bits are smaller than another target. Although
generated from the same mining process, fruits and blocks
have different functionalities. Each block embeds an ordered
fruit list, similar to each block in NC embeds an ordered
transaction list; transactions are embedded in fruits instead.
Transactions are ordered based on their ﬁrst fruit appearances
in the blockchain. In addition to the transactions, each fruit
contains a pointer to a recent main chain block which the fruit
miner is certain will not be orphaned. A fruit is valid if its
pointer block is not orphaned, or its gap—the height difference
between its pointer block and the main chain block contains
the fruit—is smaller than a timeout threshold To. All valid
fruits receive the same reward and blocks receive nothing.
This incentive mechanism is also adopted by Thunderella, a
blockchain design of the same authors [43].
b) Punishment protocols: As it
Other designs of this type include the PoW component of
Ethereum, the Inclusive protocol by Lewenberg et al. [10],
SPECTRE by Sompolinsky et al. [14], Meshcash by Bentov
et al. [15], and PHANTOM by Sompolinsky and Zohar [16].
is often hard to tell
which of the competing blocks are mined by the attacker,
these designs forfeit rewards of all competing blocks to deter
attacks. In DECOR+, the block reward is split evenly among
all competing blocks of the same height [12], [21]. The authors
propose some other punishment rules for suspected malicious
behaviors. Bahack suggests another punishment protocol [7].
c) Reward-lucky protocols: These designs selectively
reward PoW solutions, hoping that these solutions serve as
anchor points to stabilize the blockchain. Subchains by Rizun
demands miners to broadcast weak blocks, i.e., block candi-
dates with larger difﬁculty target, in addition to blocks [11].
Weak blocks also count in chain length and contribute to the
transaction conﬁrmation, though receive no reward. Subchains
follows NC’s longest chain and ﬁrst-received rule. Bobtail by
Bissias and Levine [22] is another reward-lucky protocol.
III. EVALUATION FRAMEWORK AND SECURITY MODEL
As non-NC PoW protocols’ security improvements remain
self-claimed, we propose our evaluation framework in order
to investigate whether they have ﬁxed NC’s weaknesses, and
to shed light on the possibility of such improvement.
A. Evaluation Framework
We present four metrics for a more comprehensive view on
PoW protocols’ security. This is not an exhaustive list of all
metrics proposed in the literature, but rather a comparative
framework with NC as the benchmark. In particular, though
the chain-growth and the common-preﬁx properties are also
used to quantify consensus protocol security [3], [15], [25],
[51], they are not included, because the attack vectors on these
properties are only introduced by certain non-NC protocols.
1) Chain quality: This metric measures the difﬁculty to
substitute the honest main chain blocks. In line with previous
research [3], [25], [51], we deﬁne the chain quality Q as the
expected lower bound on the fraction of honest main chain
blocks, given that the attacker controls a fraction of total
mining power α. Deﬁning Bc and Ba as the total number
178
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
BCEDAtimepointer blockparent blockof main chain blocks mined by the compliant miners and the
attacker respectively, and s the attacker’s strategy, we have:
Q(α) = min
lim
t→∞
s
Bc
Ba + Bc
.
(cid:80) Rc
(cid:80) Ra +(cid:80) Rc
Ideally, Q(α) = 1 − α, namely the attacker gets main chain
blocks at most proportional to the mining power. A protocol’s
chain quality is not related to its reward distribution policy.
2) Incentive compatibility: This metric measures a proto-
col’s selﬁsh mining resistance. It is deﬁned as the expected
lower bound on the relative revenue of the compliant min-
ers [4]–[7], [13], [26], [31], namely:
s
,
where(cid:80) Ra and(cid:80) Rc are the cumulative rewards received by
I(α) = min
lim
t→∞
the attacker and the compliant miners, respectively. Incentive
compatibility shares the same ideal value 1 − α with chain
quality. Unlike chain quality, all three attack resistance metrics
are tightly related to the reward distribution policy.
3) Subversion gain: This metric measures the proﬁtability
of double-spending attacks, which is quantiﬁed as the time-
averaged illegal upper bound proﬁt in a speciﬁc attack model,
in line with several previous papers [26], [31], [32]. In this
model, every honest block contains a payment transaction to
the merchant, whose conﬂicting version is embedded in the
block’s secret competitor, if the competitor exists. The service
or goods are delivered when the block containing the payment
transaction reaches σ conﬁrmations, with σ = 6 in Bitcoin, or
the attacker gives up on attacking this block. In the former
case, if the payment transaction is later invalidated, for every
block that is orphaned after conﬁrmation, the attacker receives
a double-spending reward Vds, in the unit of block rewards.
In other words, if the attacker successfully orphans k blocks
in a row, the double-spending reward is deﬁned as
k < σ
(k + 1 − σ)Vds, k ≥ σ
(1)
where k + 1 − σ is the number of σ-conﬁrmation blocks that
are orphaned. In addition, if the ﬁrst payment transaction is
invalidated before reaching σ conﬁrmations, Rds = 0. The
attacker receives no punishment for failed double-spending
attempts, because if an attack fails,
the service or goods
will be delivered eventually, compensating the attacker’s loss.
This metric captures multiple aspects of a protocol’s double-
spending resistance. First,
attacker to balance the risk of losing block rewards with the
double-spending gain. Second, the merchant is allowed to
delay delivery if the conﬂicting transaction is broadcast before
σ conﬁrmations, counteracting the attack. Third, longer forks,
which cause more damage in reality, result in higher rewards.
incorporating (cid:80) Ra forces the
(cid:26) 0,
Rds(k, σ, Vds) =
,
The subversion gain of the attacker is deﬁned as:
(cid:80) Ra +(cid:80) Rds
S(α, σ, Vds) = max
s
lim
t→∞
t
− α,
where t represents the lasting time, measured as the number of
block generation intervals; α is the time-averaged mining re-
ward without the double-spending attack. Ideally, the attacker
complies with the protocol to avoid losing any block reward,
namely S(α, σ, Vds) = 0. However, an attacker is always
incentivized to deviate as long as Vds is large enough.
4) Censorship susceptibility:
Inspired by feather-forking
attacks, we measure censorship susceptibility as the maximum
fraction of income loss the attacker incur on compliant miners
in a censorship retaliation attack. We choose not to incorporate
the attacker’s economic loss, as the retaliation does not happen
if the censorship threat succeeds. As long as the other miners
are convinced of the attacker’s determination, the only factor
affecting their strategy is the expected loss of not cooperating.
Unlike feather-forking, in which the retaliation starts after
receiving the block containing the target transaction, in our
model, the attack is initiated as soon as compliant miners start
mining the block. This setting is practical, as the attacker can
learn the transaction inclusion as soon as the mining starts by
eavesdropping in compliant mining pools. Another difference
with feather-forking is that we remove the reliance on the
parameter k by allowing the attacker to drop the falling-behind
chain and try to orphan the next honest block at any time.
As the attacker’s goal is to maximize the compliant miners’
loss, mining on a falling-behind chain is not always optimal.
Our generalized setting captures multiple attack scenarios. For
example, in an extreme form of the attack, attackers degrade
the system’s availability by replacing honest blocks with empty
blocks, delaying all transactions’ conﬁrmation.
A protocol’s censorship susceptibility is deﬁned as:
s
C(α) = max
where (cid:80) Oc is the compliant miners’ cumulative reward
lim
t→∞
loss due to the attack, in the unit of block rewards. Ideally,
C(α) = 0, namely the compliant miners have no risk rejecting
a censorship request.
,
(cid:80) Oc
(cid:80) Oc +(cid:80) Rc
B. Threat Model
We follow the threat model of most studies on PoW
security [3]–[7], [9], [13], [26], [31], [32], [52]. In this model,
there is only one colluding pool of malicious miners, denoted
as “the attacker”, with less than half of total mining power.
All other miners are compliant. This is the strongest form of
the attacks as multiple attackers cause more damage when
combining their mining power. We do not consider the effect
of transaction fees as in [35], [42], [53]. Neither do we
incorporate the difﬁculty adjustment mechanism as in [39].
In terms of network connectivity, the attacker cannot drop
other miners’ messages or downgrade their propagation speed.
However, the attacker may, after seeing a compliant miner’s
message, send a new one to certain miners that arrives before
the original message. The propagation delay is modeled as
a ﬁxed natural orphan rate, as in [31]. Unfortunately, as
many protocols we evaluate are under development and their
parameters are not speciﬁed, it is difﬁcult to estimate their
orphan rates. Therefore we assume all protocols in this work
have the same expected block interval and zero natural orphan
rate, in order to ensure a fair comparison on the protocol level.
179
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
In this model, the following result has been proven [4], [52]:
if the protocol follows the longest-chain rule and the attacker is
rational, there are at most two active chains at any given time:
a public chain, and at most one attacker chain, whose last
several blocks might be hidden from the compliant miners.
Any more-than-two-chain strategy decreases the attacker’s
effective mining power, therefore is strictly dominated by a
two-chain strategy. We refer to the last common block of these
two chains, namely the last block recognized by all miners, as
the consensus block.
C. Modeling Mining Processes as MDPs
An MDP is a discrete time stochastic control process that
models the decision making in situations where outcomes
are partly random and partly under the control of a decision
maker. To model a system as an MDP, we need to encode
all status and history information that might inﬂuence the
strategic player’s decisions into a state, and the player’s
available decisions into several actions. Moreover, a state
transition matrix describes the probability distribution of the
next state over every (state, action) pair. At last, when cer-
tain (state, action, new state) transition happens, a reward is
allocated to the player to facilitate utility computation.
In line with previous studies [4], [13], [26], [31], [32],
mining is modeled as a sequence of steps. The MDP state de-
scribes the blockchain’s status at the beginning of a step, which
incorporates all information that might affect the attacker and
the compliant miners’ decisions, e.g., the lengths of competing
chains, the miners of the last several blocks, and the number
of unpublished attacker blocks. Encoding a blockchain status
into a state is challenging, as despite the sparseness of the
transition matrices and our optimization, an MDP solver gives
the exact solution only when the number of states is less than
about 107. In each step, the attacker ﬁrst decides how many