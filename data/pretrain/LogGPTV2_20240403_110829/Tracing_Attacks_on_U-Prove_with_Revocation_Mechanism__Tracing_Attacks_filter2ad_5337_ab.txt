1 −xid)−1·...·(x(cid:48)(cid:48)
1−xid)·...·(x(cid:48)
1, . . . , x(cid:48)
k−xid)·(x(cid:48)(cid:48)
m−xid)−1
(cid:48)
Z
t
and the same procedure as above for answering the queries to the
Revocation Authority can be applied.
Finally, one can check that despite the manipulations the user
and the veriﬁer obtain the same values for T1, T2, T3 (note that
they must derive them in a different way). Therefore, no change in
the protocol is observable by the veriﬁer.
2.2 Tracing by Setup Manipulations
In this section we present a tracing attack which remains unde-
tected even if the complete list R of revoked revocation attributes
is available. This is achieved without manipulating the parameters
used for computing witnesses.
2.2.1 Preliminary Observations
Let us note that the output of RASetup( ) does not include any
proof of equality of the discrete logarithms for the pairs: (gt, gδ
t )
and (g, K), where the ﬁrst element in the pair denotes the base
element and the second element denotes the exponentiation result.
Accordingly, the Revocation Authority may choose the values δ
and logg K to be different modulo q. So for a while we assume
that K = g ˜δ and ˜δ (cid:54)= δ.
We have to check that for ˜δ (cid:54)= δ set during the RASetup( )
the procedure VerifyNonRevocationProof( ) executed by
the veriﬁer will behave just as in the case when ˜δ = δ. This is
the case when the arguments for computing the hash value c (dur-
ing execution of GenerateNonRevocationProof( )) and c(cid:48)
(during execution of VerifyNonRevocationProof( )) are
exactly the same. However, one can check that these arguments
are equal even if δ (cid:54)= δ(cid:48). Therefore, the difference will not be ob-
servable by the veriﬁer, unless the problem of equality of discrete
logarithm is easy. However, the authors of [8, 9] explicitly wish to
avoid pairing groups, so we may expect that the DDH Problem will
be hard in the group chosen for the implementation.
2.2.2 The Attack
We assume that the Revocation Authority knows all the values
xid and therefore can compute witnesses of all users. The RSSetup
procedure is executed in a slightly different way. Namely, the
Revocation Authority chooses ˜δ (cid:54)= δ mod q at random and sets
K := g ˜δ instead of K := gδ.
During VerifyNonRevocationProof( ) the Revocation
Authority is asked to check whether Y = X δ. However, due to the
RSSetup modiﬁcation this equality does not hold with high prob-
ability as X = W gt1 and Y = QK t1 where Q = W δ, K = g ˜δ
and t1 is random. So instead of checking the equality Y = X δ the
Revocation Authority executes the following steps using δ and ˜δ:
1. (cid:102)W := Y · X−˜δ.
correctly by the prover, then we get(cid:102)W = Q · W −˜δ.)
2. (cid:99)W :=(cid:102)W η, where η = (δ − ˜δ)−1 mod q.
(cid:16)
W δ−˜δ(cid:17)(δ−˜δ)−1 mod q
If the witness was correctly computed by the user, then
(cid:99)W =
= W.
(Note that if X and Y were calculated
Note that W depends on xid and can be used to match the non-
revocation proof with xid. The Revocation Authority maintains a
database with the entries (xid, W ), where W is the value resulting
from the current value of the revocation list R. The values W are
updated each time the list R changes.
2.2.3 Attack Countermeasures
In the original description, the Revocation Authority gets the pair
(X, Y ) and has to check whether Y = X δ. However, one can mod-
ify the scheme so that the Revocation Authority gets only X and
605responds with X δ; subsequently the veriﬁer compares the answer
with Y .
As after the modiﬁcation Y (cid:54)= X δ, the Revocation Authority
seem to be in trouble. Of course, for each W the Revocation Au-
thority may compute
YW := W δ−˜δX
˜δ .
Note that for the correct W
YW = W δ−˜δ ·(cid:0)W gt1(cid:1)˜δ
= W δ ·(cid:16)
g
˜δ(cid:17)t1
= QK t1 = Y
and therefore it could check whether
(cid:48) ?= H(g, g1, gt, K, ˜cid, X, Y, Cd, T1, T2, T3) .
c
So, contrary to the intention of the authors of [8, 9] the details of
a non-revocation proof (namely, the parameters c(cid:48), s1, . . . , s6, Cd)
must be hidden from the Revocation Authority.
The right way to defend against the attack is to expand the proto-
col by a proof that the same secret key δ is used for computation of
the accumulator value V and for computing K. However, we do
not follow this direction as in the next section we describe a more
complicated attack that works for K = gδ.
2.3 Tracing when gδ=K
In this section we present an attack that does not manipulate the
parameter K and therefore a malicious Revocation Authority may
safely present a proof that K = gδ. Consequently, augmenting the
output of the RASetup( ) procedure by the appropriate proof of
correctness is not enough to prevent an attack on users’ privacy.
2.3.1 Preliminary Ideas and Observations
During the corrupted RSSetup procedure α1, α2 are chosen at
random so that α2 (cid:54)= α1 mod q. Let
δ := (α1 + α2) · 2
(1)
(Note that for any given δ it is easy to ﬁnd α1 (cid:54)= α2 so that (1)
holds.) If the order q of g is a large prime number, then 2−1 mod q
exists. On the other hand, if gcd(2, q) > 1, then it is easy to gen-
eralize the reasoning below to the representation δ = (α1 + ··· +
α(cid:96))· (cid:96)−1 mod q for some (cid:96) coprime to q (in this case the deﬁnition
(cid:96))·(cid:96)−1 mod q
of Λi given below would change to Λi := g(αi
).
For i = 0, 1, 2, . . . let:
−1 mod q .
1+···+αi
t
Λi := g(αi
t
1+αi
2)·2−1 mod q
and ∆i := gδi
t
.
(2)
So in particular
and Λ1 = ∆1 .
Λ0 = ∆0 = gt
(cid:81)m
native is to get ﬁrst the numbers ∆i, then compute(cid:81)m
Note that in order to get V one can ﬁrst compute the exponent
i=1(δ + xi) and then raise gt to the computed power. An alter-
i=1(δ + xi)
as a polynomial of an unknown δ, i.e.
(cid:81)m
i=1(δ + xi) =(cid:80)m
V :=(cid:81)m
i=0(∆i)ai
.
i=0 ai · δi ,
and ﬁnally put
Therefore, it is not necessary to know the secret key δ to compute
the accumulator value V as long as the values of ∆i are known for
sufﬁciently many i’s.
Below we assume that instead of using the vector
t = (∆0, ∆1, ∆2, . . . , ∆m)
(3)
the Revocation Authority will use the vector
(cid:48)
t
= (Λ0, Λ1, Λ2, . . . , Λm)
(4)
to calculate the value of V . That is, the Revocation Authority
creates the accumulator according to the formula:
m(cid:89)
V :=
(Λi)ai
.
i=0
The protocol from [9] (as well as [8]) does not include any proof
of correctness of the accumulator value. Obviously, it has to lead
to correct answers during non-revocation proofs. Moreover, as we
shall see below, the users have some possibilities to recompute the
accumulator values when the changes on the list R occur. There-
fore, the results of the users have to agree with the values pub-
lished by the Revocation Authority.
In particular, the users can
collectively re-compute some values Λi from the data available
for the users. However, there is no direct way to check whether
Λi+1 = Λδ
i if the DDH Problem is hard for the group used.
2.3.2 Updates
Recall that according to the draft [9] users’ witnesses are com-
puted by ComputeWitness( ) or UpdateWitness( ) pro-
cedure. As we shall see, the ﬁrst method may be extended to a
more direct method of computing W and Q, a method that may be
run by (a set of) users. Hence if the second method is available to
the users, then both methods should be and yield the same results.
Below we discuss the technical details.
Authority. Deﬁne a polynomial f over Zq as
First assume that the witnesses are updated by the Revocation
f (X) = (X + xi1 ) · (X + xi2 ) · . . . · (X + xik ) ,
(5)
where xi1 , ..., xik are the revocation attributes of all revoked users.
If the full revocation list is published by the Revocation Authority,
then f can be immediately derived. However, one can prove (the
proof is omitted due to space limitations) that a coalition of users
can reconstruct f even if the Revocation Authority attempts to hide
R.
In this case k−1 users can ﬁnd the powers gYk−1
, . . . , gY1
t
that are used by the Revocation Authority to generate the values of
the witnesses. Namely, consider the following procedure:
, gYk−2
t
t
1. A colluding user holding own parameters xi, di and the global
parameter f (X) ﬁnds the polynomial
k−1(cid:88)
gi(X) = (f (X) − di)/(X + xi) =
µi,jX j
(6)
Note that according to the deﬁnition, the witness W for xi
equals
j=0
.
t
Wi = ggi(δ)
(cid:80)k−1
j=0 µi,j Yj
So the user learns all the coefﬁcients µi,j in the equation
g
t
= Wi,
(7)
where for each j = 1, . . . , k−1 the unknown Yj presumably
satisﬁes the condition Yj = δj. We must emphasize that the
colluding users assume that in (7) the values Wi are indeed
calculated according to the protocol. However, gYj
t will suc-
cessfully be determined even if Yj (cid:54)= δj for at least some of
the values j = 0, 1, . . . .
6062. The colluding users, say id1, . . . , idk−1, create together the
By (1), (6) and (7), for Yj = (αj
following system of equations:
(cid:80)k−1
(cid:80)k−1
(cid:80)k−1
g
t
g
t
g
t
j=1 µid1,j Yj
j=1 µid2,j Yj
j=1 µidk−1 ,j Yj
−µid1,0
−µid2,0
t
= Wid1 · g
= Wid2 · g
. . .
= Widk−1 · g
t
−µidk−1 ,0
t
2
t
=
W
α1+α2
id
Qid
1 + αj
(cid:0)(cid:0)ggid(α1)+gid(α2)
(cid:1) 1
2(cid:1) α1+α2
2) · 2−1 mod q we get:
(cid:0)ggid(α1)·α1+gid(α2)·α2
(cid:1) 1
(cid:16)
(cid:17) 1
gid(α1)·(cid:16) α1+α2
+gid(α2)·(cid:16) α1+α2
(cid:17)
(cid:16)
(cid:17) α2−α1
(cid:1)4·(α2−α1)−1 mod q = ggid(α1)−gid(α2)
ggid(α1)−gid(α2)
2 −α2
2 −α1
(cid:17)
g
t
t
t
4
2
2
2
W δ
id
Qid
=
=
(8)
=
That is,(cid:0) Xδ
∆i+1 =
and perform Gaussian elimination in the exponents. That is,
instead of scalar multiplications they have exponentiations,
instead of subtractions they have divisions in the group gen-
erated by gt. Since xid are assumed to be random and in-
dependent, they count for the corresponding matrix (i.e., the
matrix [µidi,j], for i, j ∈ {1, . . . , k − 1}) to be invertible. 1
Thereby the colluding users should obtain the set of solutions
gYj
t
, for j = 1, . . . , k − 1.
t
t
id
· gdid
Yk(cid:48)−1
t
, gYk−2
, . . . , gY1