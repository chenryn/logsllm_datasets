mining attacks, such as selfish mining [1, 9], BWH attacks
[7, 9, 16], FAW attacks [13], and bribery attacks [2, 15].
1. We normalize the total computational power of the
Bitcoin system as 1 [7, 9, 13, 16]. The computational power
of each miner/pool is a fraction of this total, which should
be less than or equal to 0.5 to avoid “51% attacks” [3].
2. No unintentional forks in the Bitcoin system. This as-
sumption is reasonable since the probability of unintentional
forks is negligible, about 0.41% [10] (this assumption is also
made in [13]). Therefore, the expected reward of a miner
equals to the probability of finding a valid block in each
round. Since the time of a miner finds a valid block has an
exponential distribution with mean inversely to his compu-
tational power [8], the probability of a miner finding a valid
block equals to his normalized computational power.
3. Miners are selfish but honest except the attackers. Hon-
est miners can choose their best strategy (i.e. mining on
which branch) to get a higher reward, but will not launch
any attacks [7, 9, 13, 16]. The assumption of profit-driven
miners is also made in [7, 9]. It is acceptable since mining on
different branches brings no different rewards for followers
(discussed in Section 4.2).
4. We normalize the reward of finding a valid block to
1 instead of 12.5 BTC. The reward in our analysis is the
expected reward [13, 16].
5. When a pool manager earns a reward (via propagating a
valid block from an FPoW), he distributes the reward to pool
miners based on the number of submitted shares (FPoWs
and PPoWs) in this round [7, 13, 16].
4 OBSERVATION AND MOTIVATION
4.1 FAW Reward
In FAW attacks, an attacker’s innocent mining power will
help the attacker to win a whole profit. The infiltration
mining power will help to share the reward from the victim
pool’s profit. As a result, after an FPoW is discovered, the
infiltration mining power only contributes to earning a share
(via submitting PPoWs). Therefore, when the mining pool
is relatively large and the pool’s (attacker’s) branch has less
chance to be chosen as the main chain, the infiltration mining
reward (shared profit) is “less attractive” to the attacker after
an FPoW is found. Allocating more power to innocent mining,
which is the “more attractive” part with higher reward, would
be more profitable.
Note that power adjusting does not always mean shifting
infiltration power to innocent power. Shifting reversely is
also acceptable when winning a share is more attractive (in a
smaller pool with better chance to win in forks). We discuss
Figure 1: “0-lead” racing. The blockchain is forked by two
branches of the same length (caused by the attacker 𝑎 and
some other miners 𝑜).
the detailed power shifting strategies under different scenarios
in Section 5.
4.2 “0-lead” Racing
“0-lead” racing indicates two branches of the same length race
on the blockchain, as depicted in Fig. 1. This situation can
occur in selfish mining [9], stubborn mining [22], and FAW
attacks [13], when the attacker withholds block 𝑖′ till another
miner finds block 𝑖. In this situation, the attacker (𝑎) will
continue mining on block 𝑖′ and the miners which find blocks
on block 𝑖’s branch (𝑜) will continue mining on block 𝑖. For
other miners (𝑏), they can choose to mine on block 𝑖 or 𝑖′,
since it has no difference which branch is extended (normally
they choose to mine on the firstly received block). When any
branch is extended by 𝑏, 𝑏 can get one profit, and no profit
for other cases.
Now consider the attacker lures 𝑏 to mine on block 𝑖′ with
bribery attacks (containing bribery transactions in block 𝑖′).
The racing will become unfair (bribery racing) since choosing
to mine on block 𝑖′ branch becomes more profitable for 𝑏
than on block 𝑖 branch, The best strategy for miners in 𝑏 is
to extend attacker’s branch. Moreover, since the attacker’s
reward increases with the probability of her branch selected
as the main chain in some mining attacks (e.g. selfish mining),
the attacker can get more rewards than not adopting bribery
racing when choosing a proper bribing fee.
5 POWER ADJUSTING
WITHHOLDING
5.1 Overview
We introduce novel power adjusting withholding (PAW) at-
tacks against mining pools which combines power adjusting
strategy and FAW attacks. In our observation in FAW attacks
(Section 4.1), we point out FAW adopts fixed power split-
ting strategy, which may result in wasting too much mining
power on the less attractive reward. The key insight behind
our new PAW attacks is allowing the attacker dynamically
adjust the mining power between innocent and infiltration
mining. Therefore, the attacker can always increase her re-
ward by allocating more power on the more attractive reward
(whole profit or a share). Besides, PAW can also preserve the
advantage of FAW to avoid the “miner’s dilemma”.
In one victim pool scenario, the attacker first splits her
computational power into innocent mining and infiltration
mining, and mines both solely (via innocent mining) and in-
pool (via infiltration mining). There are four possible cases
when a valid block (FPoW) is found:
Case 1. Found by innocent mining. The attacker propa-
gates it and earns a legitimate profit.
Case 2. Found by other miners not in the victim pool. The
attacker accepts the block and continues mining the next
block. No profit will be earned by the attacker.
Case 3. Found by other victim pool miners. The attacker
earns a shared profit from the pool.
Case 4. Found by infiltration mining. When the infiltration
mining finds an FPoW, the attacker withholds the FPoW
and reallocates her computational power. There are further
three subcases when a new block/FPoW is found.
Case 4-1. Found by innocent mining. The attacker dis-
cards the withheld FPoW and propagates the new one.
Case 4-2. Found by other miners not in the victim pool.
The attacker immediately submits the withheld FPoW to the
victim pool manager. A fork can be generated in the Bitcoin
network when the manager propagates her FPoW.
Case 4-3. Found by other victim pool miners. The attacker
discards the withheld FPoW and earns a share.
In summary, the strategies of PAW attacks are similar to
FAW attacks. The difference is that an attacker will reallo-
cate her computational power after an FPoW is found by
infiltration mining in PAW attacks, while in FAW attacks,
an attacker never adjusts her computational power. Clearly,
PAW attacks can earn as much reward as FAW attacks (when
not adjusting computational power). Besides, we also show
that PAW attacks can be more profitable than FAW attacks
when the computational power is adjusted properly in the
Section 5.2 and 5.3.
In multiple victim pools scenario, PAW attacks adjust
the power allocation every time when an FPoW is found by
innocent mining, and submit all 𝑘 withheld FPoWs when
other miners not in the victim pools find a valid block to
cause a fork with (𝑘 + 1) branches (1 (cid:54) 𝑘 (cid:54) 𝑛 when targeting
at 𝑛 pools). Since 𝑘 branches are generated by infiltration
mining, the probability of the attacker winning a shared
profit via infiltration mining increases.
5.2 PAW Against One Pool
Theoretical analysis. Refereing to the cases in Section 5.1,
we use the following parameters to analyze PAW attacks:
𝛼: Total computational power of the attacker;
𝛽: Computational power of the victim pool;
𝜏1: Attacker’s original infiltration mining power as a
proportion of 𝛼 before Case 4;
𝜏2: Attacker’s reallocated infiltration mining power as a
proportion of 𝛼 after Case 4;
as the main chain in Case 4-2.
¯𝜏 : Attacker’s average portion of computational power
allocated to infiltration mining in a mining process;
𝑐: Probability of the attacker’s FPoW will be selected
The attacker allocates (1 − 𝜏1)𝛼 computational power for
innocent mining and 𝜏1𝛼 for infiltration mining before Case 4;
and will use (1 − 𝜏2)𝛼 and 𝜏2𝛼 for innocent mining and infil-
tration mining respectively after Case 4. The computational
power of the victim pool (𝛽) does not include the infiltration
mining power (𝜏1𝛼 or 𝜏2𝛼). 𝑐 is a coefficient related to at-
tacker’s network capability and the Bitcoin network topology
[19]. The calculation of 𝑐 can be referred to [13]. Attacker
can also get an extra reward even when 𝑐 is unknown (e.g.
by setting 𝑐 = 0 or 𝑐 = 𝛼 + 𝛽 for an honest/rational pool
manager, which is same as the strategies in FAW attacks
[13]).
miners  (o s) branchattacker s (a s) branchblock iblock i k   0  blocks  public chainAttacker’s reward. Based on our analysis in Section 4.1, the
attacker has (1− 𝜏1)𝛼 probability to fall in Case 1; (1− 𝛼− 𝛽)
probability for Case 2; 𝛽 probability for Case 3; and 𝜏1𝛼
for Case 4. The total probability of these four cases is 1
as expected. In Case 4, after adjusting the computational
power, the total mining power will become (1− 𝜏2)𝛼 since the
infiltration mining will not propagate any FPoWs. Therefore,
the attacker has 𝜏1𝛼 · (1−𝜏2)𝛼
1−𝜏2𝛼 probability to fall in Case 4-1;
𝜏1𝛼· 1−𝛼−𝛽
1−𝜏2𝛼 probability
in Case 4-3. As expected, the sum of the probability in Case
4-1, 4-2, and 4-3 is 𝜏1𝛼 (same as Case 4). We can further
derive the reward of a PAW attacker 𝑅𝑃
𝑎 (𝜏1, 𝜏2) as follows:
1−𝜏2𝛼 probability in Case 4-2; and 𝜏1𝛼·
𝛽
𝑎 (𝜏1, 𝜏2) = (1 − 𝜏1)𝛼 + 𝛽 ·
𝑅𝑃
𝜏1𝛼
𝛽 + 𝜏1𝛼
+
(︂ (1−𝜏2)𝛼
1 − 𝜏2𝛼
𝜏1𝛼·
+(𝑐· 1−𝛼−𝛽
1 − 𝜏2𝛼
+
𝛽
1−𝜏2𝛼
)·
¯𝜏 𝛼
𝛽 + ¯𝜏 𝛼
.
(1)
)︂
¯𝜏 can be regarded as a function related to 𝜏1 and 𝜏2. We
discuss the calculation of ¯𝜏 in Theorem 5.1.
Equation (1) is derived by separating the attacker’s re-
ward into innocent mining reward and infiltration mining
reward. We have two cases for innocent mining reward: Case
1 and Case 4-1. The innocent mining reward is (1 − 𝜏1)𝛼 +
𝜏1𝛼 (1−𝜏2)𝛼
1−𝜏2𝛼 . For infiltration mining reward, we have three
cases: Case 3, Case 4-2, and Case 4-3. Since the attacker will
share the profit with other miners in pool, the reward will
be 𝛽 ·
𝛽+¯𝜏 𝛼
in the three cases respectively. Therefore, we can derive the
attacker’s reward in Equation (1).
𝛽+𝜏1𝛼 , 𝑐𝜏1𝛼 · 1−𝛼−𝛽
1−𝜏2𝛼 ·
𝛽+¯𝜏 𝛼 , and 𝜏1𝛼 ·
1−𝜏2𝛼 ·
𝜏1𝛼
¯𝜏 𝛼
¯𝜏 𝛼
𝛽
Clearly, PAW downgrades to FAW when 𝜏1 = 𝜏2.
Theorem 5.1. The average portion of computational power
1,··· ,𝑘, 𝑘 (cid:62) 2):
for infiltration mining in 𝑖-th pool, Pool𝑖, is (¯𝜏 (𝑖)
𝑗 + 𝜏 (𝑖)
𝑘 𝛼)∑︀𝑘−1
𝑖∈𝒫 𝜏 (𝑖)
𝑗=1 𝜏 (𝑖)
𝑘
¯𝜏 (𝑖)
1,··· ,𝑘 =
𝑖∈𝒫 𝜏 (𝑖)
𝑘 𝛼)(𝑘 − 1) + 1
,
(1 −∑︀
(1 −∑︀
𝑗
where 𝜏 (𝑖)
is the infiltration mining power in Pool𝑖 as a
portion of 𝛼 between (𝑗 − 1)-th and 𝑗-th FPoWs are found.
𝒫 is the victim pool set.
Specifically, in one victim scenario, when 𝑘 = 2, ¯𝜏 = ¯𝜏 (1)
1,2 ,
𝜏1 = 𝜏 (1)
1 , and 𝜏2 = 𝜏 (1)
¯𝜏 = ¯𝜏 (1)
1,2 =
2 , we have:
𝜏1 + 𝜏2 − 𝜏1𝜏2𝛼
2 − 𝜏2𝛼
.
(2)
Proof of Theorem 5.1 is presented in Appendix-A.
How to adjust mining power? Based on Equation (1), we
formalize the best power adjusting strategy by finding the
optimal portion of attacker’s computational power (̂︀𝜏1 and
̂︀𝜏2) to maximize the expected reward (𝑅𝑃
𝑎 (𝜏1, 𝜏2)):
s.t.
𝑅𝑃
arg max
0 (cid:54) 𝜏1 (cid:54) 1,
𝜏1,𝜏2
𝑎 (𝜏1, 𝜏2),
0 (cid:54) 𝜏2 (cid:54) 1.
(3)
Equation (3) can be solved by using Lagrange multipliers
(presented in Appendix-B). Besides, the maximized reward
witĥ︀𝜏1 and̂︀𝜏2 satisfies the following theorem.
Theorem 5.2. A PAW attacker can always earn more
rewards than honest mining. The reward of a PAW attack
has a lower bound defined by the reward of an FAW attack.
Proof. Previous research [13] has shown that the reward
of an FAW attack is always greater than that of honest mining
(a) 𝑅𝐸𝑅𝑃,𝐻
.
𝑎
(b) 𝑅𝐸𝑅𝑃,𝐻
.
𝑝
Figure 2: A PAW attack against one pool. RERs of an attacker
and the victim pool, according to the size of victim pool 𝛽 and
coefficient 𝑐 when the attacker has 0.2 computational power
𝛼 = 0.2.
(𝛼) when a proper 𝜏1 is chosen. Suppose the optimal 𝜏1 for
an FAW attack is ˙𝜏1. The reward of the FAW attack under
˙𝜏1 equals to the reward of a PAW attack when 𝜏1 = 𝜏2 = ˙𝜏1.
Now considering a 𝜏1-preset PAW attack with fixed 𝜏1 = ˙𝜏1,
and adjusting 𝜏2 = ¨𝜏2 to maximize the reward in Case-4. The
total reward of this 𝜏1-preset PAW attack should be greater
than or equal to the FAW attack. Furthermore, considering
a regular PAW attack that adjusts 𝜏1 and 𝜏2 simultaneously
to maximize the reward at̂︀𝜏1 and̂︀𝜏2, the reward should at
least equal to the 𝜏1-preset PAW attack. Therefore, we have:
𝛼 < 𝑅𝐹
𝑎 ( ˙𝜏1) = 𝑅𝑃
𝑎 ( ˙𝜏1, ˙𝜏1) (cid:54) 𝑅𝑃
𝑎 ( ˙𝜏1, ¨𝜏2) (cid:54) 𝑅𝑃
𝑎 (̂︀𝜏1,̂︀𝜏2),
where 𝑅𝐹
attacker at ˙𝜏1.
𝑎 ( ˙𝜏1) represents the maximized reward of an FAW
(cid:3)
Quantitative analysis and simulation. We use a spe-
cific case to show the additional reward of an attacker who
launches PAW attacks against one pool. Referring to [13], we
also use the expected relative extra reward (RER) to show
the performance of PAW attacks. The expected RER can be
expressed as
𝑅𝐸𝑅𝑆1,𝑆2
𝑥