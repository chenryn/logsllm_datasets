天涯社区是我个人职业生涯的培育期，让我重新审视自我，明确了未来的规
划与定位。2011年9月是我职业生涯的成长期的开始，加盟了腾讯，负责静态图
片、大游戏下载业务CDN的运维工作，接触到庞大的用户群、海量的资源（设
备、带宽、存储）、世界级的平台、人性化的工作氛围以及大量优秀的同事。
所有的这些都深深地吸引着我，也让我的视野与工作能力得到前所未有的提
升。分工细化产生运维工作模式的差异，从“单兵作战”转向“集团军作战”。我继
续保持着对新技术的狂热，思考如何使用Python在运维工作中发挥作用。工作期
间研究了大量高级组件，包括Paramiko、Fabric、Saltstack、Ansible、Func等，
这些组件有了更高级的封装，强大且灵活，贴近各类业务场景。我个人也基于
Python开发了集群自动化操作工具——yorauto，在公司各大事业群广泛使用，
同时入选公司精品推荐组件。我的部分个人发明专利使用Python作为技术实现。
目前我也关注大数据发展趋势，研究Python在大数据领域所扮演的角色。
回到主题“为什么要写这本书”，这一点可以从51CTO对我的专访中找到答
案。当时的场景是这样的：
51CTO：您对开源是如何理解的？天涯社区在过去两年间陆续开源了包含
LVS管理系统、Varnish缓存推送平台、高性能数据引擎memlink等好几个项目，
业内人士对此都十分关注，您认为这给整个产业带来了哪些好处？身为天涯社
区的一位运维人员，您认为在这个过程中自己的价值在哪里？
刘天斯：开源就是分享，让更多人受益的同时自己也在提高。经常看到很多
朋友都在做监控平台、运维工具。事实上功能惊人相似，大家都在做重复的工
作，为什么不能由一个人开源出来，大家一起来使用、完善呢。这样对整个行
业来讲，这块的投入成本都会降低，对个体来讲也是资源的整合。如果形成良
性循环，行业的生态环境将会有很大程度的改善。本人热衷于开源技术，同样
也愿意为开源贡献自己一分微薄之力，希望更多的人能支持开源、参考开源。
这就是我的初衷，也是答案。写书的意义在于将10年的工作沉淀、经验、思
路方法做个梳理与总结，同时与大家分享。最终目的是为每个渴望学习、进
步、提升的运营人员提供指导。
读者对象
·系统架构师、运维人员
·运营开发人员
·Python程序员
·系统管理员或企业网管
·大专院校的计算机专业学生
如何阅读本书
本书分为三大部分。
第一部分为基础篇（第1~4章），介绍Python在运维领域中的常用基础模
块，覆盖了系统基础信息、服务监控、数据报表、系统安全等内容。
第二部分为高级篇（第5~12章），着重讲解Python在系统运维生命周期中的
高级应用功能，包括相关自动化操作、系统管理、配置管理、集群管理及大数
据应用等内容。
第三部分为案例篇（第13~16章），通过讲解4个不同功能运维平台案例，让
读者了解平台的完整架构及开发流程。
说明：
·书中的代码以“【路径】”方式引用，测试路径为“/home/test/模块”、
“/data/www/项目”。
·书中涉及的所有示例及源码的Github地址为
https://github.com/yorkoliu/pyauto，以章节名称作为目录层次结构，模块及项目
代码分别存放在对应的章节目录中。
其中第三部分以接近实战的案例来讲解，相比于前两部分更独立。如果你是
一名经验丰富Linux管理员且具有Python基础，可以直接切入高级篇。但如果你
是一名初学者，请一定从基础篇开始学习。本书不涉及Python基础知识，推荐新
手在线学习手册：《简明Python教程》与《深入Python：Dive Into Python中文
版》。
勘误和支持
由于笔者的水平有限，且编写时间仓促，书中难免会出现一些错误或者不准
确的地方，恳请读者批评指正。为此，特意创建一个在线支持与应急方案问答
站点：http://qa.liuts.com。你可以将书中的错误发布到“错误反馈”分类中，同时
如果你遇到任何问题或有任何建议，也可以在问答站点中发表，我将尽量在线
上提供最满意的解答。我也会将及时更新相应的功能更新。如果你有更多的宝
贵意见，欢迎发送邮件至邮箱PI:EMAIL，期待能够得到你们的真挚反
馈。
致谢
首先要感谢Guido大神，是他创立了Python语言，同时也要感谢提供Python
优秀第三方模块的所有作者，开源的精神与力量在他们身上体现得淋漓尽致。
感谢钟总、王工、诗成兄，是他们给予我第一份工作，也为个人此后的成长
提供了非常多的指导。感谢天涯社区的邢总（968）、王总（建科）、小军，是
他们提供了这么优秀的平台，让我有机会可以尽情施展才能，体现个人价值。
感谢腾讯的Willim（崔晓春）、Tomxiao（肖志立）、Thundersun（孙雷）、
Stanleysun（孙龙君）、Trackynong（农益辉）、Chanceli（李飞宏）、Blue（许
明）导师，以及接入运维组（TEG）、数据管理组（IEG）所有兄弟姐妹在工作
中给予的帮助、指导与支持，让我可以在新的环境继续突破自我，实现自我价
值。感谢洪春兄（抚琴煮酒）的引荐，在他的努力下才促成了这本书的合作与
出版。
感谢机械工业出版社的编辑杨福川和姜影，在这一年多的时间中始终支持我
的写作，他们的鼓励和帮助引导我能顺利完成全部书稿。
感谢已经过世的爷爷，是他深深影响着我的人生观与价值观，他的教导我会
永远铭记在心。感谢我的爸爸、妈妈，感谢他们将我培养成人，在成长的过程
中不断鼓励、激励我继续前进。感谢姐姐、弟弟，他们是我成长过程中最好的
挚友与伙伴。
最后感谢我的爱人杜海英，没有你就没有我们幸福的小家和可爱的宝宝。感
谢她支持我做的所有决定，没有她背后默默的支持与鼓励，也没有我今天的成
就，更也不会有这本书。我想说：谢谢你！有你真好。
谨以此书献给我最亲爱的家人与我自己，以及众多热爱开源技术的朋友们！
刘天斯（Yorkoliu）
第一部分 基础篇
·第1章 系统基础信息模块详解
·第2章 业务服务监控详解
·第3章 定制业务质量报表详解
·第4章 Python与系统安全
第1章 系统基础信息模块详解
系统基础信息采集模块作为监控模块的重要组成部分，能够帮助运维人员了
解当前系统的健康程度，同时也是衡量业务的服务质量的依据，比如系统资源
吃紧，会直接影响业务的服务质量及用户体验，另外获取设备的流量信息，也
可以让运维人员更好地评估带宽、设备资源是否应该扩容。本章通过运用Python
第三方系统基础模块，可以轻松获取服务关键运营指标数据，包括Linux基本性
能、块设备、网卡接口、系统信息、网络地址库等信息。在采集到这些数据
后，我们就可以全方位了解系统服务的状态，再结合告警机制，可以在第一时
间响应，将异常出现在苗头时就得以处理。
本章通过具体的示例来帮助读者学习、理解并掌握。在本章接下来的内容当
中，我们的示例将在一个连续的Python交互环境中进行。
进入Python终端，执行python命令进入交互式的Python环境，像这样：
# python
Python 2.6.6 （r266：84292， Nov 22 2013， 12：16：22）
[GCC 4.4.7 20120313 （Red Hat 4.4.7-4）] on linux2
Type "help"， "copyright"， "credits" or "license" for more information.
>>>
1.1 系统性能信息模块psutil
psutil是一个跨平台库（http://code.google.com/p/psutil/），能够轻松实现获取
系统运行的进程和系统利用率（包括CPU、内存、磁盘、网络等）信息。它主要
应用于系统监控，分析和限制系统资源及进程的管理。它实现了同等命令行工
具提供的功能，如ps、top、lsof、netstat、ifconfig、who、df、kill、free、nice、
ionice、iostat、iotop、uptime、pidof、tty、taskset、pmap等。目前支持32位和64
位的Linux、Windows、OS X、FreeBSD和Sun Solaris等操作系统，支持从2.4到
3.4的Python版本，目前最新版本为2.0.0。通常我们获取操作系统信息往往采用
编写shell来实现，如获取当前物理内存总大小及已使用大小，shell命令如下：
物理内存total值： free -m | grep Mem | awk '{print $2}'
物理内存used值： free -m | grep Mem | awk '{print $3}'
相比较而言，使用psutil库实现则更加简单明了。psutil大小单位一般都采用
字节，如下：
>>> import psutil
>>>mem = psutil.virtual_memory（）
>>>mem.total，mem.used
（506277888L， 500367360L）
psutil的源码安装步骤如下：
#wget https：//pypi.python.org/packages/source/p/psutil/psutil-
2.0.0.tar.gz --no-check-certificate
# tar -xzvf psutil-2.0.0.tar.gz
# cd psutil-2.0.0
# python setup.py install
1.1.1 获取系统性能信息
采集系统的基本性能信息包括CPU、内存、磁盘、网络等，可以完整描述当
前系统的运行状态及质量。psutil模块已经封装了这些方法，用户可以根据自身
的应用场景，调用相应的方法来满足需求，非常简单实用。
（1）CPU信息
Linux操作系统的CPU利用率有以下几个部分：
·User Time，执行用户进程的时间百分比；
·System Time，执行内核进程和中断的时间百分比；
·Wait IO，由于IO等待而使CPU处于idle（空闲）状态的时间百分比；
·Idle，CPU处于idle状态的时间百分比。
我们使用Python的psutil.cpu_times（）方法可以非常简单地得到这些信息，
同时也可以获取CPU的硬件相关信息，比如CPU的物理个数与逻辑个数，具体见
下面的操作例子：
>>> import psutil
>>>psutil.cpu_times（）#使用cpu_times方法获取CPU完整信息，需要显示所有逻辑CPU信息，
>>>#指定方法变量percpu=True即可，如psutil.cpu_times（percpu=True）
scputimes（user=38.039999999999999， nice=0.01， system=110.88， idle=177062.59， iowait=53.399999999999999， irq=2.9100000000000001， softirq=79.579999999999998， steal=0.0， guest=0.0）
>>>psutil.cpu_times（）.user #获取单项数据信息，如用户user的CPU时间比
38.0
>>>psutil.cpu_count（） #获取CPU的逻辑个数，默认logical=True4
>>>psutil.cpu_count（logical=False） #获取CPU的物理个数
2
>>>
（2）内存信息
Linux系统的内存利用率信息涉及total（内存总数）、used（已使用的内存
数）、free（空闲内存数）、buffers（缓冲使用数）、cache（缓存使用数）、
swap（交换分区使用数）等，分别使用psutil.virtual_memory（）与
psutil.swap_memory（）方法获取这些信息，具体见下面的操作例子：
>>> import psutil
>>>mem = psutil.virtual_memory（） #使用psutil.virtual_memory方法获取内存完整信
息
>>>mem
svmem（total=506277888L， available=204951552L， percent=59.5， used=499867648L， free=6410240L， active=245858304， inactive=163733504， buffers=117035008L， cached=81506304）
>>>mem.total #获取内存总数
506277888L
>>>mem.free #获取空闲内存数
6410240L
>>>psutil.swap_memory（） #获取SWAP分区信息
sswap（total=1073733632L， used=0L， free=1073733632L， percent=0.0， sin=0， sout=0）
>>>
（3）磁盘信息
在系统的所有磁盘信息中，我们更加关注磁盘的利用率及IO信息，其中磁盘
利用率使用psutil.disk_usage方法获取。磁盘IO信息包括read_count（读IO数）、
write_count（写IO数）、read_bytes（IO读字节数）、write_bytes（IO写字节
数）、read_time（磁盘读时间）、write_time（磁盘写时间）等。这些IO信息可
以使用psutil.disk_io_counters（）获取，具体见下面的操作例子：
>>>psutil.disk_partitions（） #使用psutil.disk_partitions方法获取磁盘完整信息
[sdiskpart（device='/dev/sda1'， mountpoint='/'， fstype='ext4'， opts='rw'）， sdiskpart（device='/dev/sda3'， mountpoint='/data'， fstype='ext4'， opts='rw'）]
>>>
>>>psutil.disk_usage（'/'） #使用psutil.disk_usage方法获取分区（参数）的使用情况
sdiskusage（total=15481577472， used=4008087552， free=10687057920， percent=25.899999999999999）
>>>
>>>psutil.disk_io_counters（） #使用psutil.disk_io_counters获取硬盘总的IO个
数、
#读写信息
sdiskio（read_count=9424， write_count=35824， read_bytes=128006144， write_bytes=204312576， read_time=72266， write_time=182485）
>>>
>>>psutil.disk_io_counters（perdisk=True） #“perdisk=True”参数获取单个分区IO个
数、
#读写信息
{'sda2'： sdiskio（read_count=322， write_count=0， read_bytes=1445888， write_bytes=0， read_time=445， write_time=0）， 'sda3'： sdiskio（read_count=618， write_count=3， read_bytes=2855936， write_bytes=12288， read_time=871， write_time=155）， 'sda1'： sdiskio（read_count=8484， write_count=35821， read_bytes=123704320， write_bytes=204300288， read_time=70950， write_time=182330）}
（4）网络信息
系统的网络信息与磁盘IO类似，涉及几个关键点，包括bytes_sent（发送字
节数）、bytes_recv=28220119（接收字节数）、packets_sent=200978（发送数据
包数）、packets_recv=212672（接收数据包数）等。这些网络信息使用
psutil.net_io_counters（）方法获取，具体见下面的操作例子：
>>>psutil.net_io_counters（） #使用psutil.net_io_counters获取网络总的IO信息，
默
#认pernic=False
snetio（bytes_sent=27098178， bytes_recv=28220119， packets_sent=200978， packets_recv=212672， errin=0， errout=0， dropin=0， dropout=0）
>>>psutil.net_io_counters（pernic=True） #pernic=True输出每个网络接口的IO信息
{'lo'： snetio（bytes_sent=26406824， bytes_recv=26406824， packets_sent=198526， packets_recv=198526， errin=0， errout=0， dropin=0， dropout=0）， 'eth0'： snetio（bytes_sent=694750， bytes_recv=1816743， packets_sent=2478， packets_recv=14175， errin=0， errout=0， dropin=0， dropout=0）}
>>>
（5）其他系统信息
除了前面介绍的几个获取系统基本信息的方法，psutil模块还支持获取用户
登录、开机时间等信息，具体见下面的操作例子：
>>>psutil.users（） #使用psutil.users方法返回当前登录系统的用户信息
[suser（name='root'， terminal='pts/0'， host='192.168.1.103'， started=1394638720.0）， suser（name='root'， terminal='pts/1'， host='192.168.1.103'， started=1394723840.0）]
>>> import psutil， datetime
>>>psutil.boot_time（） #使用psutil.boot_time方法获取开机时间，以Linux时间戳格式
返回
1389563460.0
>>>datetime.datetime.fromtimestamp（psutil.boot_time（））.strftime（"%Y-%m-
%d %H：%M：%S"）
'2014-01-12 22：51：00' #转换成自然时间格式
1.1.2 系统进程管理方法
获得当前系统的进程信息，可以让运维人员得知应用程序的运行状态，包括
进程的启动时间、查看或设置CPU亲和度、内存使用率、IO信息、socket连接、
线程数等，这些信息可以呈现出指定进程是否存活、资源利用情况，为开发人
员的代码优化、问题定位提供很好的数据参考。
（1）进程信息
psutil模块在获取进程信息方面也提供了很好的支持，包括使用
psutil.pids（）方法获取所有进程PID，使用psutil.Process（）方法获取单个进程
的名称、路径、状态、系统资源利用率等信息，具体见下面的操作例子：
>>> import psutil
>>>psutil.pids（） #列出所有进程PID
[1， 2， 3， 4， 5， 6， 7， 8， 9， 10， 11， 12， 13， 14， 15， 16， 17， 18， 19……]
>>> p = psutil.Process（2424） #实例化一个Process对象，参数为一进程PID
>>> p.name（） #进程名
'java'
>>> p.exe（） #进程bin路径
'/usr/java/jdk1.6.0_45/bin/java'
>>>p.cwd（） #进程工作目录绝对路径
'/usr/local/hadoop-1.2.1'
>>>p.status（） #进程状态
'sleeping'
>>>p.create_time（） #进程创建时间，时间戳格式
1394852592.6900001
>>>p.uids（） #进程uid信息
puids（real=0， effective=0， saved=0）
>>>p.gids（） #进程gid信息
pgids（real=0， effective=0， saved=0）
>>>p.cpu_times（） #进程CPU时间信息，包括user、system两个CPU时间
pcputimes（user=9.0500000000000007， system=20.25）
>>>p.cpu_affinity（） #get进程CPU亲和度，如要设置进程CPU亲和度，将CPU号作为参数即可
[0， 1]
>>>p.memory_percent（） #进程内存利用率
14.147714861289776
>>>p.memory_info（） #进程内存rss、vms信息
pmem（rss=71626752， vms=1575665664）