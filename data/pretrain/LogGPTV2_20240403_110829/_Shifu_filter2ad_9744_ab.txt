    00401EFB   popa
**自定义PE loader**
它首先获得shellcode的结尾，用来扫描exploit injector文件的“MZ“：
    00077174   jmp short 00077178
    00077176   pop eax
    00077177   retn
    00077178   call 00077176
接下来，一个自己写的GetProcAddress()函数用来获取VirtualAllocEx()函数地址。然后，VirtualAllocEx()用来分配一个内存空间，能够将exploit
injector节信息以适当的内存对齐的方式写入该内存。必要的地址重定位调整，API函数地址重新解析，IAT重新填充。最后shellcode跳转到新创建的exploit
injector的DLL的入口点。
**Exploit injector**
首先，字符串“kernel32.dll”，“LoadLibrary“，”GetProcAddress“被创建。然后kernel32.dll的模块地址被搜索到，继而得到LoadLibrary()和GetProcAddress()的地址。在这些函数的帮助下，exploit
injector的IAT被重建。这个功能的目的不清楚，因为它已经被second stage
injector完成了。然后，用CreateThread()函数创建一个新的线程。
这个线程调用IsWow64Process()，根据结果决定x86还是x64版本的利用文件被写入内存。“MZ”写入利用文件的开始。然后，一个名为“WaitEventX”的事件被创建，这个事件稍后被利用使用。最后这个主利用加载函数被调用。
这个主利用加载函数搜索以下进程，这些进程是趋势安全软件的一部分：
    “uiSeAgnt.exe”
    “PtSessionAgent.exe”
    “PwmSvc.exe”
    “coreServiceShell.exe”
如果有一个进程被找到，一个挂起的wuauclt.exe被创建。否则，一个挂起的svchost.exe被创建。在两种情况下，都使用命令行参数“-k
netsvc”，但是只被svchost.exe使用。应该注意到的是这个功能在x64版本的趋势安全软件安装的情况下总是失败的。代码（x86）在x64进程中调用调用CreateToolhelp32Snapshot()函数将导致ERROR_PARTIAL_COPY错误。而且，它也总是会失败，因为没有没有权限访问趋势进程。
接下来，它用CreateFileMapping()和MapViewOfFile()函数将x86或x64的利用文件映射进内存并在内存中填充利用字节。最终，节被用ZwMapViewOfSection()函数映射到挂起的进程svchost.exe或wuauclt.exe中。如果系统版本是5.2（Windows
Server2003和Windows XP
64位版本）将直接退出。然后，两个内存空间被创建，一个shellcode被写入内存中。第一个混淆的shellcode调用第二个shellcode。接下来，调用ResumeThread()函数恢复挂起的进程，利用就被执行了。
Second stage
injector验证利用成功与否，通过检验完整性等级是否一直是SECURITY_MANDATORY_LOW_RID。如果不是，利用成功的话将提权至SECURITY_MANDATORY_SYSTEM_RID，并且继续main
payload的注入。如果利用失败，它将尝试自己用cmd.exe和runas.exe来运行自身获取SYSTEM的权限。
**Atom字符串的创建**
代替当今常用的互斥量，second stage injector创建了一个atom和校验这个全局atom表来判断Shifu是否已经运行。
首先，它用字符串“%OS%_%NUMBER_OF_PROCESSORS%”调用ExpandEnvironmentStrings()函数来获取Windows版本和处理器数目。例如在1个处理器的Windows
7上面结果就是“Windows_NT_1”。这个字符串被用来调用RtlComputeCrc32()函数计算4个CRC32哈希值，四个初始值如下：
    0xFFFFFFFF
    0xEEEEEEEE
    0xAAAAAAAA
    0x77777777
字符串“Windows_NT_1”的哈希结果如下：
    0x395693AE
    0xB24495D2
    0xF39F86E1
    0xBAE0B5C8
接下来，每个CRC哈希的最后一个字节在栈上面是以DWORD存储的：
    0xAE000000
    0xD2000000
    0xE1000000
    0xC8000000
字节序列如下：
    AE 00 00 00 D2 00 00 00 E1 00 00 00 C8 00 00 00
这个atom字符串用snprintf()函数转化前8个字节到ASCII字符串中，结果如下：
    “ae000000d2000000”
最后，调用GlobalFindAtom()函数是否存在，如果不存在则调用GlobalAddAtom()添加。
图3. 在全局atom表中的Shifu的atom
**命令行参数**
Second stage injector有两个命令行，但是只有一个起作用。他们在将来可能有一个新功能或者只是忘了删除了。
    -crypt-test
只有一个包含“It work’s!”的消息框显示：
    -vm-test
没啥功能
**反分析技巧**
反Sandboxie和Avast，Shifu在它自己的进程内调用GetModuleHandleA()函数校验snxhk.dll(Avast)或者sbiedll.dll(Sandboxie)是否存在，如果存在将调用Sleep()永久休眠。
所有的下面的检测手段都是32位操作系统下的。
**进程名检测**
枚举运行的进程名，转化为小写，计算那些名字的CRC32哈希值，按下面列表比较：
    0x99DD4432 – ?
    0x1F413C1F – vmwaretray.exe
    0x6D3323D9 – vmusrvc.exe
    0x3BFFF885 – vmsrvc.exe
    0x64340DCE – ?
    0x63C54474 – vboxtray.exe
    0x2B05B17D – ?
    0xF725433E – ?
    0x77AE10F7 – ?
    0xCE7D304E – dumpcap.exe
    0xAF2015F2 – ollydbg.exe
    0x31FD677C – importrec.exe
    0x6E9AD238 – petools.exe
    0xE90ACC42 – idag.exe
    0x4231F0AD – sysanalyzer.exe
    0xD20981E0 – sniff_hit.exe
    0xCCEA165E – scktool.exe
    0xFCA978AC – proc_analyzer.exe
    0x46FA37FB – hookexplorer.exe
    0xEEBF618A – multi_pot.exe
    0x06AAAE60 – idaq.exe
    0x5BA9B1FE – procmon.exe
    0x3CE2BEF3 – regmon.exe
    0xA945E459 – procexp.exe
    0x877A154B – peid.exe
    0x33495995 – autoruns.exe
    0x68684B33 – autorunsc.exe
    0xB4364A7A – ?
    0x9305F80D – imul.exe
    0xC4AAED42 – emul.exe
    0x14078D5B – apispy.exe
    0x7E3DF4F6 – ?
    0xD3B48D5B – hookanaapp.exe
    0x332FD095 – fortitracer.exe
    0x2D6A6921 – ?
    0x2AAA273B – joeboxserver.exe
    0x777BE06C – joeboxcontrol.exe
    0x954B35E8 – ?
    0x870E13A2 – ?
**文件名检测**
Shifu校验下面文件或文件夹是否存在，如果存在则调用Sleep()永久休眠：
    c:samplepos.exe
    c:analysissandboxstarter.exe
    c:analysis
    c:insidetm
    c:windowssystem32driversvmmouse.sys
    c:windowssystem32driversvmhgfs.sys
    c:windowssystem32driversvboxmouse.sys
    c:iDEFENSE
    c:popupkiller.exe
    c:toolsexecute.exe
    c:Perl
    c:Python27
**调试器检测**
调用IsDebuggerPresent()判断调试器是否存在。同时，调用ZwQueryInformationSystem()判断ProcessDebugPort和ProcessDebugObjectHandle。如果调试器被检测到则调用Sleep()永久休眠。
**Wireshark检测**
调用CreateFile()尝试打开\\.NPF_NdisWanIp，如果过成功则调用Sleep()永久休眠。
**自我检验**
校验自己的名字长度，如果长于30个字符则调用Sleep()永久休眠。同时用CRC32哈希值校验自己的进程名：
    0xE84126B8 – sample.exe
    0x0A84E285 – ?
    0x3C164BED – ?
    0xC19DADCE – ?
    0xA07ACEDD – ?
    0xD254F323 – ?
    0xF3C4E556 – ?
    0xF8782263 – ?
    0xCA96016D – ?
而且，判断自己的进程中是否有来自GFI沙箱的模块：
    api_log.dll
    dir_watch.dll
    pstorec.dll
**未知的反分析技巧**
用了一个不知道目的的技巧。它获取Process32NextW()函数的地址，前五个字节和序列0x33C0C220800比较：
    33C0  XOR EAX,EAX
    C2 0800   RETN 8
这些代码只能在32位的Windows XP使用，因为Unicode版本的函数可能还没实现。如果代码序列被检测到，将调用Sleep()永久休眠。
**Windows域名校验**
用NetServerGetinfo()和NetWkstaGetInfo()判断计算机工作组名是否是“WORKGROUP”或“HOME”。如果不是则永久休眠。接下来判断是否是”ANALYSERS”，如果是则永久休眠。
**计算机和用户名校验**
用GetComputerName()和GetUserName()获取计算机名和用户名，判断是否是如下字符串：
    SANDBOX
    FORTINET
    VIRUS
    MALWARE
    MALNETVM
如果被发现一个，则永久休眠。
**进程结束特征**
Second stage injector枚举所有运行的进程，将名字转化为小写，计算CRC32的哈希值：
    0xD2EFC6C4 – python.exe
    0xE185BD8C – pythonw.exe
    0xDE1BACD2 – perl.exe
    0xF2EAA55E – autoit3.exe
    0xB8BED542 – ?
如果有一个被匹配到，尝试打开进程并结束进程。如果过失败，将尝试用ZwClose关闭进程的主窗口句柄。然后以所有权限打开进程，用ZwUnmapViewOfSection()函数卸载它。最后，被卸载的进程的主窗口句柄被关闭。
**Main payload解密、解压和注入**
为了解密main payload，second stage
injector从.rsrc节获取解密算法需要用到的数据。它使用一个修改版的RC4算法，之前获得的值与256字节数组的每个字节异或。加密过的数组用来解密位于.tls节的main
payload。解密的main payload还被aPlib库压缩了。
如果原始的loader作为一个中等级或高等级的进程运行，计算atom字符串的方法再次被调用。这次只有4个字节被用来创建字符串，例如“ae000000”。接下来，哈希值被计算出来，并通过从0x0到0xFF与另一个256字节的数组异或。这个加密的字符串再次被用来加密和解密main
payload。为了持续性，加密的数据被写入注册表“HKCUsoftwaremicrosoftwindows”键值中，如”f4e64d63”。同时，“ae000000”也被创建并用空字符串和原始的loader的路径填充。最后临时加密的main
payload再次被解密。
图4. 加密的main payload和原始loader的路径被存储在Windows注册表中
接下来，main payload在内存中被解压。然后，一个挂起的svchost.exe(x86)被以和父进程相同的完整性等级创建。Main
payload被映射到进程中并且“MZ”被修改掉。Svchost进程恢复则main payload被执行。最后，一个批处理文件被创建在%TEMP%文件夹中。
**Main payload 分析**
Main payload的模块的IAT函数与0xFF异或加密使得静态分析更加困难。在.data节中的重要的字符串也与0x8D异或加密，解密字符串如下：
    AddMandatoryAce
    ADVAPI
    Advapi32.dlladvapi32.dllws2_32.dll
    WPUCloseEvent
    WPUCloseSocketHandleWPUCreateEvent
    WPUCreateSocketHandle
    WPUFDIsSet
    WPUGetProviderPath
    WPUModifyIFSHandle
    WPUPostMessage
    WPUQueryBlockingCallbackWPUQuerySocketHandleContext
    WPUQueueApc
    WPUResetEvent
    WPUSetEvent
    WPUOpenCurrentThreadWPUCloseThread
    WSPStartup
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/echo 
     > %1rndel %0
    rundll32.exe shell32.dll, ShellExec_RunDLL %s
    software\microsoft\windows\currentversion\run
    Microsoft\Microsoft AntimalwareSoftware\Coranti
    Software\risingSoftware\TrendMicroSoftware\Symantec
    Software\ComodoGroup
    Software\Network Associates\TVD
    Software\Data Fellows\F-SecureSoftware\Eset\Nod
    Software\Softed\ViGUARD
    Software\Zone Labs\ZoneAlarm
    Software\Avg
    Software\VBA32
    Software\Doctor WebSoftware\G DataSoftware\Avira
    Software\AVAST Software\Avast
    Software\KasperskyLab\protected
    Software\Bitdefender
    Software\Panda SoftwareSoftware\Sophos.bat|$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW$$$$$$XYZ[\]^_`abcdefghijklmnop
    q
    \\.\%C:
    conhost
    CreateProcessInternalW
    ConvertStringSecurityDescriptorToSecurityDescriptorWContent-Type: application/x-www-form-urlencodedrn
    Content-Type: multipart/form-data; boundary=---------------------------%srn
    Host: %srn%d.%d.%d.%d
    %d.%d.%d.%d.%x
    %temp%\debug_file.txt
    [%u][%s:%s:%u][0x%x;0x%x] %sDnsFlushResolverCache
    \*.*
    dnsapi.dll
    DnsGetCacheDataTable.dll.exedownload.windowsupdate.com
    vk.com
    yandex.ru
    HTTP/1.1https://http://%s
    IsWow64Process
    kernel
    kernel32.dllLdrGetProcedureAddress
    Microsoft
    NtAllocateVirtualMemory
    CLOSED
    LAST_ACKTIME_WAIT
    DELETE_TCB
    LISTEN
    SYN_SENTSYN_RCVDESTAB
    FIN_WAIT1
    FIN_WAIT2
    CLOSE_WAIT
    CLOSING
    TCPt%s:%dt%s:%dt%sn
    netstatnPrototLocal addresstRemote addresstStaten
    ntdll.dll
    NtResumeProcess
    NtSuspendProcess\\?\globalroot\systemroot\system32\drivers\null.sys
    NtWriteVirtualMemoryopenRegisterApplicationRestart
    RtlCreateUserThread
    ResetSR
    RtlComputeCrc32
    rundll32SeDebugPrivilegeSystemDrive
    \StringFileInfo\%04x%04x\ProductName