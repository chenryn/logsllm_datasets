title:The Sounds of the Phones: Dangers of Zero-Effort Second Factor Login
based on Ambient Audio
author:Babins Shrestha and
Maliheh Shirvanian and
Prakash Shrestha and
Nitesh Saxena
The Sounds of the Phones: Dangers of Zero-Effort
Second Factor Login based on Ambient Audio
Babins Shrestha
University of Alabama at Birmingham
PI:EMAIL
Prakash Shrestha
University of Alabama at Birmingham
PI:EMAIL
Abstract
Reducing user burden underlying traditional two-factor authentica-
tion constitutes an important research effort. An interesting repre-
sentative approach, Sound-Proof, leverages ambient sounds to de-
tect the proximity between the second factor device (phone) and
the login terminal (browser). Sound-Proof was shown to be secure
against remote attackers and highly usable, and is now under early
deployment phases.
In this paper, we identify a weakness of the Sound-Proof sys-
tem, namely, the remote attacker does not have to predict the am-
bient sounds near the phone as assumed in the Sound-Proof paper,
but rather can deliberately make—or wait for—the phone to pro-
duce predictable or previously known sounds (e.g., ringer, notiﬁca-
tion or alarm sounds). Exploiting this weakness, we build Sound-
Danger, a full attack system that can successfully compromise the
security of Sound-Proof. The attack involves buzzing the victim
user’s phone, or waiting for the phone to buzz, and feeding the cor-
responding sounds at the browser to login on behalf of the user.
The attack works precisely under Sound-Proof’s threat model.
Our contributions are three-fold. First, we design and develop
the Sound-Danger attack system that exploits a wide range of a
smartphone’s functionality to break Sound-Proof, such as by ac-
tively making a phone or VoIP call, sending an SMS and creating
an app-based notiﬁcation, or by passively waiting for the phone to
trigger an alarm. Second, we re-implement Sound-Proof’s audio
correlation algorithm and evaluate it against Sound-Danger under
a large variety of attack settings. Our results show that many of our
attacks succeed with a 100% chance such that the Sound-Proof cor-
relation algorithm will accept the attacked audio samples as valid.
Third, we collect general population statistics via an online sur-
vey to determine the phone usage habits relevant to our attacks.
We then use these statistics to show how our different correlation-
based attacks can be carefully executed to, for instance, compro-
mise about 57% user accounts in just the ﬁrst attempt and about
83% user accounts in less than a day. Finally, we provide some
mitigation strategies and future directions that may help overcome
some of our attacks and strengthen Sound-Proof.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978328
Maliheh Shirvanian
University of Alabama at Birmingham
PI:EMAIL
Nitesh Saxena
University of Alabama at Birmingham
PI:EMAIL
1.
INTRODUCTION
Two-factor authentication (2FA), combining the use of a pass-
word (“something you know”) and a token (“something you have”),
is gaining momentum for web authentication. A traditional 2FA
scheme requires the user (Alice) to enter her password and copy a
random one-time PIN (OTP) from the token over to the authenti-
cation terminal. This improves security because the attacker now
needs to not only guess the user’s password but also the current
OTP value to hack into the user’s account. The use of a general-
purpose smartphone as a token [3, 12, 14], as opposed to a dedi-
cated device [21, 27], helps improve usability and deployability of
2FA, and is currently a commonly used approach on the Internet.
However, the need to look-up and interact with the phone, and
copy the OTP value during a 2FA authentication session lowers the
system’s usability, which may prevent users from adopting this ap-
proach for authentication [17]. In this light, researchers and prac-
titioners have recognized the need for reducing, and ideally elim-
inating, the user burden underlying traditional 2FA, giving rise to
an important research direction. The goal of such zero-effort 2FA
schemes is to allow the user to login using the 2FA approach by
ideally only typing in her password.
An interesting representative zero-effort 2FA approach, Sound-
Proof [17], leverages ambient sounds to detect the proximity be-
tween the phone and the login terminal (browser). Speciﬁcally,
during the login session, the browser and the phone each record a
short audio clip, and the login is deemed successful only if the two
recorded audio samples are highly correlated with each other (and
the correct password is supplied). Except of entering the password,
Sound-Proof does not require any user action (e.g., transferring PIN
codes or even looking-up the phone) – mere proximity of the phone
with the terminal is sufﬁcient to login. It may also work even if the
phone is inside a purse or pocket. Unlike other zero-effort 2FA
approaches [11, 23], which rely upon proximity channels, such as
Bluetooth or Wi-Fi, to automatically transfer the PIN codes, a com-
pelling deployability feature of Sound-Proof is that it does not re-
quire browser plugins or any changes to the current browsers.
The main security goal of Sound-Proof is to defeat a remote at-
tacker, who has learned the user’s password (e.g., by hacking into
a password database server of the web service in question), and
is attempting to login to the user’s account, and possibly multiple
user accounts. As argued in [17], given the prominence of remote
attacks on the web today, this is a very legitimate goal. In order
to login to the user’s account, the remote attacker against Sound-
Proof would have to predict the ambient sounds in the environment
of the phone and possibly be in a very similar environment as the
user, which may be a difﬁcult endeavor in practice, as shown in the
908security analysis reported in [17]. In other words, if the attacker
can not predict the user’s environment and is in a different environ-
ment than the user, the audio samples at the browser’s end and the
phone’s end would not correlate, thereby preventing the attacker
from logging in [17]. Indeed, in the comprehensive security evalu-
ation reported in [17], Sound-Proof was shown to be highly secure
against such remote attackers. In addition, in the usability evalu-
ation reported in [17], Sound-Proof was shown to be highly user-
friendly, when contrasted with a traditional 2FA scheme involv-
ing OTPs [14]. Given these very promising security and usability
properties, Sound-Proof is apparently now under early deployment
phases in the form of a start-up (see: http://sound-proof.ch/).
In this paper, we set out to closely inspect the security of Sound-
Proof, motivated by its very appealing usability and practicality
features. Unfortunately, we identify a weakness of the Sound-Proof
system. Namely, the remote attacker against Sound-Proof does not
have to predict the ambient sounds near the phone, but rather can
make the phone create predictable or previously known sounds,
or wait for the phone to produce such sounds (e.g., ringer, noti-
ﬁcation or alarm sounds). Given the close physical proximity of
the source of these sounds (the phone’s speaker) and the receiver
of these sounds (the phone’s microphone), the phone’s recordings
would be dominated by these sounds rather than the ambient noises
present in the environment.
Exploiting this weakness, we introduce and build Sound-Danger,
a full attack system that can successfully compromise the security
of Sound-Proof. The attack involves remotely buzzing the victim
user’s phone, or waiting for the phone to buzz on its own, and
feeding the corresponding sounds at the browser to login on be-
half of the user. The attack works precisely under the limits of
Sound-Proof’s threat model, only uses the information available
in hacked password databases (e.g., passwords, phone numbers or
other account information [1, 2, 4, 6–9]), is fully remote and can
be launched against multiple user accounts. We note that phone
numbers, in particular, are readily available in password databases
as they are commonly used to facilitate account recovery in case of
forgotten username/password and are essential for 2FA-supported
web services which often need to send OTPs to users’ phones via
SMS (Sound-Proof also supports fallback to traditional 2FA [17]).
Our Contributions: We believe that our work makes the following
scientiﬁc contributions:
1. A Novel Attack against a Notable Zero-Effort 2FA Scheme: We
introduce, design and develop the Sound-Danger attack system
that exploits a wide variety of a smartphone’s functionality to
break Sound-Proof, a prominent zero-effort 2FA scheme. Our re-
mote attack involves either making the phone to generate known
sounds, such as, by actively making a phone or VoIP call, sending
an SMS and triggering an app-based notiﬁcation, or by passively
waiting for the phone to sound an alarm at a predictable moment.
Our attack exploits the “sounds of the phones”, which is funda-
mentally different from, and more devastating than, the attacks
studied in [17] which exploit the “sounds of the ambience”.
2. Correlation Analysis of the Attack System: We re-implement the
Sound-Proof’s audio correlation algorithm and evaluate it against
Sound-Danger under a large variety of attack settings. Our re-
sults show that many of our attacks (e.g., WhatsApp1 or Face-
book calling, Viber2 notiﬁcations and phone alarm) succeed with
a 100% chance such that Sound-Proof’ correlation detection en-
gine accepts the attacked audio samples as valid, i.e., the attacker
1http://www.whatsapp.com/
2http://www.viber.com/
(browser) and the phone are deemed to be in proximity (even
though they are remote).
3. Real-World Attack Strategies based on Population Statistics: As
a representative example of how to deploy our attacks in prac-
tice, we collect general population statistics via an online survey
to determine the phone usage habits and patterns relevant to our
attacks. We then use these common statistics from our popula-
tion sample to show how our different correlation-based attacks
against Sound-Proof can be carefully executed to compromise,
for example, about 57% user accounts in the ﬁrst attempt and
about 83% user accounts in less than a day. Our attack strategy
is extensible to other population samples beyond the one we stud-
ied, and may actually be used to eventually compromise almost
all user accounts.
Potential Defenses and Broader Implications: While our work
mainly serves to raise an alarm against the pitfalls and challenges
of designing zero-effort two-factor authentication mechanisms, we
also provide some strategies for Sound-Proof designers that may
help mitigate some of our attacks and could strengthen the security
of Sound-Proof, hopefully without undermining its usability. Fur-
ther work will be needed in this direction though. We believe that
our work is timely, since the Sound-Proof system seems to be near-
ing deployment at this point. Addressing the vulnerability reported
in our paper, prior to fully launching Sound-Proof in the wild, will
help protect future Sound-Proof users.
Our attack is not just limited to the speciﬁc audio correlation al-
gorithm implemented by Sound-Proof. Since we essentially create
the very similar sounds at the attacker’s (browser’s) end as the vic-
tim’s (phone’s) end, it seems that any audio correlation engine may
be defeated. Another algorithm for audio correlation was proposed
in [16], which also seems vulnerable to our attacks. On the other
hand, if the detection approach employs stricter parameters, such as
very high correlation thresholds and narrower synchronization lags
between audio samples, to lower the impact of the attack, it would
considerably lower the usability of the system, since even in the be-
nign settings, many matching samples will be rejected, preventing
the legitimate user from logging in.
Also, at the conceptual level, our attack is not just limited to
the domain of two-factor authentication. There exists other zero-
interaction proximity detection and device pairing schemes based
on ambient audio, which also seem vulnerable to our attack. For
example, one security scheme is geared for preventing relay at-
tacks in the context of “local” terminal authentication (e.g., mo-
bile payments) [16]. And, another scheme is aimed for pairing of
devices based on common ambient audio signals [22]. Here, if
the attacker knows the victim’s phone number or app account user-
names, it could also succeed in defeating such schemes. However,
in the threat model of such schemes, such personalized information
about the victim’s phone may not be available to the attacker, un-
like Sound-Proof where this information is readily available from
the same databases which leak the victim’s passwords.
Overall, the main broader lesson learned from our study is that,
while reducing the user effort and removing the user from the au-
thentication loop is a compelling proposition, it requires utmost
care in the design of such schemes.
2. BACKGROUND
Sound-Proof [17] is claimed to be a usable and deployable zero-
effort 2FA mechanism, which does not require interaction between
a user and the 2FA application on the device during the authenti-
cation process. In Sound-Proof, the second authentication factor is
the proximity of the user’s phone and the client terminal (browser),
909which is veriﬁed by the application on the phone by comparing the
ambient noise recorded by the phone and the browser.
2.1 Threat Model
The primary goal of Sound-Proof is to defeat a remote attacker,
who may be attempting to login into a victim user’s account from a
remote machine, which is in full control of the attacker. Sound-
Proof’s threat model assumes that this remote attacker has the
knowledge of the victim user’s username and password. This infor-
mation can be learned, for example, via leaked password databases
of the web service that may be using Sound-Proof or other web ser-
vices for the purpose of authenticating its users. The attacker’s goal
is to authenticate to the web service on behalf of the user and pos-
sibly compromise multiple user accounts. Sound-Proof assumes
that the attacker has not compromised the user’s phone and/or the
user’s terminal. If the attacker gains control of one of the victim’s
devices, the security of any 2FA scheme reduces to the security
of password-only authentication. Also, Sound-Proof does not con-
sider targeted attacks such as those involving co-located malicious
entities that are in close physical proximity of the victim.
This threat model may be weaker than that considered by tradi-
tional 2FA schemes involving OTPs. However, as argued in [17],
given the prominence of remote attacks, this is still a very legit-
imate model.
If more and more web services and users adopt
Sound-Proof given its unique zero-effort feature, and remote at-
tackers could still be thwarted, this will be a major improvement to
the state of web authentication in practice.
As such, our proposed Sound-Danger system follows a threat
model very similar to that of Sound-Proof. We consider that
the attacker gets other user information from the leaked password
database besides user credentials. That is, we assume that the pass-
word databases store phone numbers for password-only or 2FA im-
plementations in order to send account recovery information or ver-
iﬁcation codes [1, 7], IP address information from which the users
log in [1, 2, 9], or even users’ physical address information [9]. The
Sound-Danger attacker uses the phone numbers to perform active
attacks while it utilizes IP addresses or physical address informa-
tion to locate the users and their timezones. By identifying the
timezone of the users, the attacker can estimate when a particular
noise may occur at the users’ side, such as morning alarms. Since
many users often use the same usernames across multiple web ap-
plications, the attacker can utilize the username information to per-
form attacks based on notiﬁcations triggered by apps that use the
same username. For example, if a user has the same username in
the leaked database server and Skype, the attacker can send a no-
tiﬁcation (e.g., a friend’s request) to user’s Skype account. Like in
Sound-Proof’s threat model, the Sound-Danger system does not at-
tempt targeted attacks. Rather, it assumes that the attacker can col-
lect general population statistics through online user surveys in or-
der to devise speciﬁc attack strategies against a population of users
for compromising multiple user accounts.
2.2 Implementing Sound-Proof Framework
As a prerequisite to evaluating the Sound-Danger attack system,
we ﬁrst re-implemented Sound-Proof, as described in [17]. We
implemented phone-side, server-side and browser-side applications
as described below:
• Phone Application: We created an Android app that stays idle in
the background and is automatically activated when a push mes-
sage arrives. Google Cloud Messaging (GCM) is used to send
a push message from the browser to the Android phone. When
GCM push message arrives from the browser for recording, the
Android app automatically gets activated and starts recording the
ambient noise. The app stops recording as soon as another GCM
push message arrives.
• Web Server and Browser Application: The server component is
implemented using PHP while the browser component is imple-
mented in HTML and JavaScript. Browser application has a
simple button to control the recordings on the browser and on
the phone. When the button is pressed to “start recording”, the
browser application sends GCM push message to the Android
phone. If the button is pressed to stop recording, a “stop record-
ing” GCM push message is sent to the Android phone. In the
meantime, the browser application also starts recording ambi-
ent noise. Thus, the browser application has two main func-
tions:
(1) sending start/stop recording commands, i.e., GCM
push messages, to the Android phone, and (2) recording ambi-
ent noise. In order to record ambient noise through the browser,
we use HTML5 WebRTC API [15]. In particular, we use nav-
igator.getUserMedia() API to access the local microphone from