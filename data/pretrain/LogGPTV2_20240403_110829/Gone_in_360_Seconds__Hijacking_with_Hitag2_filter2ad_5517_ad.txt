the attacker
and for each
z := ˆk ⊕
trace {nR}{aR},
sets
{nR}0 . . . {nR}17. If there is an entry in T~k for which
y ⊕ b0 . . . b17 equals z but b32 6= {aR}0 then the at-
tacker learns that ˆk is a bad guess, so he tries the
next one. Otherwise, if b32 = {aR}0 then ˆk is still
a viable guess and therefore the adversary tries the
next trace.
4. Each ~kˆk that passed the test for all traces is a partial
candidate key. For each such candidate (typically 2
or 3), the adversary performs an exhaustive search
for the remaining key bits ~k = k34 . . . k47. For each
full candidate key, the adversary decrypts two traces
and checks whether both {aR} decrypt to all ones as
speciﬁed in the authentication protocol. If a candid-
ate passes this test then it is the secret key. If none
of them passes then the adversary goes back to Step
2 and tries the next ~k.
Complexity and time.
In step 1, the adversary needs to
gather 136 partial authentication traces. This can be done
within 1 minute using the Proxmark III. In steps 2 and 3,
the adversary needs to build 216 tables. For each of these
tables the adversary needs to compute 218 encryptions
plus 218 table lookups. Step 4 has negligible complex-
ity thus we ignore it. This adds to a total complexity of
216 × (218 + 218) = 235 encryptions/lookups. Note that
it is straightforward to split up the search space of ~k in
as many processes as you wish. On an standard quad-
core laptop this computation takes less than ﬁve minutes.
Therefore, the whole attack can be performed in less than
360 seconds which explains the title of the paper.
This attack is faster than other practical attacks pro-
posed in [14, 45]. The following table shows a com-
parison between this attack and other attacks from the
literature.
Attack
[45]
[14]
[42]
[44]
Our
Description
brute-force
sat-solver
sat-solver
cube
cryptanalytic
Practical
yes
yes
no1
no2
yes
Computation
2102400 min
2880 min
386 min
1 min
5 min
Traces
2
4
N/A
500
136
Time
4 years
2 days
N/A
N/A
6 min
1Soos et al. require 50 bits of contiguous keystream.
2Sun et al. require control over the encrypted reader nonce {nR}
Figure 15: Comparison of attack times and requirements
10
Figure 16: Left: Authentication failure message
Right: Successful authentication using a Proxmark III
6 Starting a car
In order to elaborate on the practicality of our attacks,
this section describes our experience with one concrete
vehicle. For this we have chosen a German car, mainly
due to the fact that it has keyless ignition.
Instead of
the typical mechanical key, this car has a hybrid re-
mote control which contains a Hitag2 transponder.
In
the dashboard of the car there is a slot to insert the re-
mote and a button to start the engine. When a piece
of plastic of suitable size is inserted in this slot the car
repeatedly attempts to authenticate the transponder (and
fails). This car uses an identiﬁer white-list as described
in Section 7.5. The same section explains how to wire-
lessly pickpocket a valid identiﬁer from the victim’s re-
mote. As soon as the car receives a valid identiﬁer, the
dashboard lights up and the LCD screen pops-up display-
ing the message shown in Figure 16-Left. Note also the
sign on the dashboard. At this point we used the Prox-
mark to quickly gather enough traces and execute the at-
tack from Section 5.3 to recover the secret key. This car
is one of the few that we tested that does not have a pre-
dictable password so we wirelessly read it from the vic-
tim’s remote. Then we use the Proxmark to emulate the
transponder. Figure 16-Right shows that the car accepts
the Proxmark as if it was the legitimate transponder. The
same picture shows (by looking at the tachometer) that at
this stage it is possible to start the engine.
7 Implementation weaknesses
To verify the practicality of our attacks, we have tested
all three of them on at least 20 different car models
from various makes. During our experiments we found
that, besides the weaknesses in cipher and protocol, the
transponder is often misconﬁgured and poorly integrated
in the cars. Most of the cars we tested use a default
or predictable transponder password. Some generate
nonces with a very low entropy. Most car keys have
vehicle-dependant information stored in the user deﬁned
memory of the transponder, but none of the tested cars
actually check this data. Some cars use Hitag2 for key-
less ignition systems, which are more vulnerable because
they lack a physical key. This section summarizes some
of the weaknesses we found during our practical experi-
ments. Especially, Section 7.4 shows the implications of
the attack described in Section 5.3 when the transponder
uses a predictable password. Section 7.5 describes how
to circumvent identiﬁer white-listing. This is an addi-
tional security mechanism which is often used in vehicle
immobilizers.
7.1 Weak random number generators
From the cars we tested, most pseudo-random number
generators (PRNG) use the time as a seed. The time in-
tervals do not have enough precision. Multiple authen-
tication attempts within a time frame of one second get
the same random number. Even worse, we came across
two cars which have a PRNG with dangerously low en-
tropy. The ﬁrst one, a French car (A), produces nonces
with only 8 bits of entropy, by setting 24 of the 32 bits
always to zero as shown in Figure 17.
Origin Message
CAR
TAG
CAR
TAG
CAR
TAG
CAR
TAG
18
39 0F 20 10
0A 00 00 00 23 71 90 14
27 23 F8 AF
18
39 0F 20 10
56 00 00 00 85 CA 95 BA
38 07 50 C5
Description
authenticate
id
{nR}{aR}
{aT }
authenticate
id
{nR}{aR}
{aT }
Figure 17: Random numbers generated by car A
11
Another French car (B), produced random looking
nonces, but in fact, the last nibble of each byte was de-
termined by the last nibble of the ﬁrst byte. A subset of
these nonces are shown shown in Figure 18.
{nR}
20 D1 0B 08
70 61 1B 58
B0 A1 5B 98
D0 41 FB B8
25 1A 3C AD
05 7A 9C 8D
C5 3A 5C 4D
E5 DA FC 6D
{aR}
56 36 F3 66
1B 18 F3 38
1E 94 62 3A
01 3B 54 10
15 88 5E 19
F7 4D F7 70
30 B1 4A D4
D8 BD 79 C3
Figure 18: Random numbers generated by car B
7.2 Low entropy keys
Some cars have repetitive patterns in their keys which
makes them vulnerable to dictionary attacks. Recent
models of a Korean car (C) use the key with the lowest
entropy we came across. It tries to access the transpon-
der in password mode as well as in crypto mode. For this
it uses the default password MIKR and a key of the form
0xFFFF∗ ∗ ∗ ∗ ∗∗FF as shown in Figure 19.
Origin Message
CAR
TAG
CAR
CAR
TAG
CAR
TAG
18
E4 13 05 1A
4D 49 4B 52
18
E4 13 05 1A
DA 63 3D 24 A7 19 07 12
EC 2A 4B 58
Description
authenticate
id
password = MIKR
authenticate
id
{nR}{aR}
{aT }
Figure 19: Car C authenticates using the default pass-
word and secret key 0xFFFF814632FF
7.3 Readable keys
Section 5.1 shows how to recover the memory dump
of a Hitag2 transponder. Almost all makes protect the
secret key against read operations by setting the bits of
the conﬁguration in such a way that block one and two
are not readable. Although there are some exceptions.
For example, experiments show that most cars from a
French manufacturer have not set this protection bit. This
enables an attacker to recover the secret key in an in-
stant. Even more worrying, many of these cars have
the optional feature to use a remote key-less entry sys-
tem which have a much wider range and are therefore
more vulnerable to wireless attacks. The combination
12
of a transponder that is wirelessly accessible over a dis-
tance of several meters and a non protected readable key
is most worrying.
7.4 Predictable transponder passwords
The transponder password is encrypted and sent in the
transponder answer aT of the authentication protocol.
This is an additional security mechanism of the Hitag2
protocol apart from the cryptographic algorithm. Be-
sides the fact that the transponder proves knowledge of
the secret key, it sends its password encrypted. In general
it is good to have some fall back scenario and counter-
measure if the used cryptosystem gets broken. Section
5.3 demonstrates how to recover the secret key from a
vehicle. But to start the engine, it is necessary to know
the transponder password as well. Experiments show
that at least half of the cars we tested on use default or
predictable passwords.
7.5 Identiﬁer pickpocketing
The ﬁrst generation of vehicle immobilizers were
not able to compute any cryptographic operations.
These transponders were simply transmitting a constant
(unique) identiﬁer over the RF channel. Legitimate
transponder identiﬁers were white-listed by the vehicle
and only those transponders in the white-list would en-
able the engine to start. Most immobilizer units in cars
still use such white-listing mechanism, which is actually
encouraged by NXP. These cars would only attempt to
authenticate transponders in their white-list. This is an
extra obstacle for an attacker, namely recovering a genu-
ine identiﬁer from the victim before being able to execute
any attack. There are (at least) two ways for an adversary
to wirelessly pickpocket a Hitag2 identiﬁer:
• One option is to use the low-frequency (LF) inter-
face to wirelessly pickpocket the identiﬁer from the
victim’s key. This can be done within proximity
distance and takes only a few milliseconds. Accord-
ing to the Hitag2 datasheet [36], the communication
range of a transponder is up to one meter. Although,
Hitag2 transponders embedded into car keys are op-
timized for size and do not achieve such a commu-
nication distance. However, an adversary can use
tuned equipment with big antennas that ignore ra-
diation regulations (e.g., [17]) in order to reach a
larger reading distance. Many examples in the lit-
erature show the simplicity and low-cost of such a
setup [24, 30, 31, 43].
• Another option is to use the wide range ultra-high
frequency (UHF) interface. For this an adversary
needs to eavesdrop the transmission of a hybrid
Hitag2 transponder [39] when the victim presses a
button on the remote (e.g. to close the doors). Most
keyless entry transponders broadcast their identiﬁer
in the clear on request (see for example [39]).
With respect to the LF interface, the UHF interface has
a much wider transmission range. As shown in [18] it
is not hard to eavesdrop such a transmission from a dis-
tance of 100 meters. From a security perspective, the ﬁrst
generation Hitag2 transponders have a physical advant-
age over the hybrid transponders since they only support
the LF interface.
8 Mitigation
This section brieﬂy discusses a simple but effective au-
thentication protocol for car immobilizers and it also de-
scribes a number of mitigating measures for the attacks
proposed in Section 5. For more details we refer the
reader to [1, 9].
First of all we emphasize that it is important for the
automotive industry to migrate from weak proprietary
ciphers to a peer-reviewed one such as AES [15], used
in cipher block chaining mode (CBC). A straightfor-
ward mutual authentication protocol is sketched in Fig-
ure 20. The random nonces nR, nT , secret key k and
transponder password PWDT should be at least 128 bits
long. Comparable schemes are proposed in the literat-
ure [32, 33, 46, 48, 49].
authenticate
−−−−−−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−−−−−−
id,nT
{nR,nT }k
−−−−−−−−−−−−−−−−−−−→
{nR,PWDT }k
←−−−−−−−−−−−−−−−−−−−
Figure 20:
AES
Immobilizer authentication protocol using
There are already in the market immobilizer transpon-
ders which implement AES like the ATA5795[2] from
Atmel and the Hitag AES / Pro[37] from NXP. It should
be noted that, although they use a peer-reviewed encryp-
tion algorithm, their authentication protocol is still pro-
prietary and therefore lacks public and academic scru-
tiny.
In order to reduce the applicability of our crypto-
graphic attack, the automotive industry could consider
the following measures. This attack is the most sensitive
as it does not require access to the car key. These coun-
termeasures should be interpreted as palliating (but not a
solution) before migrating to a more secure and openly
designed product.
13
• Extend the transponder password
The transponder password is an important part of
the authentication protocol but grievously it has
only an entropy of 24 bits. Such a password is