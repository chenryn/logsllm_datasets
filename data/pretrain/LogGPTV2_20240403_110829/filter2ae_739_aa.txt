> Author:HENRY.CHEN  
>  
当你的网站上了 HTTPS 以后，可否觉得网站已经安全了？[这里](https://myssl.com/) 提供了一个 HTTPS
是否安全的检测工具，你可以试试。
本篇正文讲述的是 HTTP 安全的最佳实践，着重在于 HTTPS 网站的 Header 的相关配置。
### 1 连接安全性和加密
#### 1.1 SSL/TLS
传输层安全（TLS）及其前身安全套接字层（SSL），通过在浏览器和 web 服务器之间提供端到端加密来促进机密通信。没有 TLS，就谈不上什么安全。TLS
是 HTTP 安全性的基础。
想要部署 TLS 是非常容易的，但其难点在于如何使用安全的配置来保障站点的安全。  
尤其是 Protocol 版本和 Cipher 需要小心选择和配置。你可以通过本站 [工具](https://myssl.com/)
体检你的网站，发现并解决这些细节的问题。
**建议**  
所有本地和链接的资源需要正确的配置，且要使用 TLS。
#### 1.2 HTTP Strict Transport Security (HSTS)
指示浏览器只使用 HTTPS 连接到目标服务器。这可以防止一些潜在的中间人攻击，包括 SSL 剥离，会话 cookie 窃取（如果没有被
[适当保护](https://blog.myssl.com/https-security-best-practices/#4cookies)）。如果遇到任何与证书相关的错误，它还可以阻止浏览器连接到网站。当浏览器访问一个设置相应 HTTP header 的
HTTPS 网站时，HSTS 将被激活。
HSTS 有一个固定期限，由 max-age 字段值控制。这个值可以是静态的，也可以是相对于将来某个特定日期的，你可以设置成 SSL 证书的过期时间。
在浏览器中，HSTS 首选项可以通过提交到 [Chromium's HSTS preload
list](https://hstspreload.appspot.com/) 来硬编码，这是所有实现 HSTS 使用的浏览器。
注意，HSTS 确实有陷阱。它提供了 `include subdomains`
选项，这在实践中可能是太宽泛了。此外，客户端错误可能会造成严重的后果——客户端错误的时钟导致它认为服务器的 SSL 证书无效或过期，或者缺少根 CA
证书——将不再导致浏览器中的证书错误。浏览器将完全拒绝访问页面，并且可能会显示让安全专家之外的完全无法理解的错误。
**建议**  
设置 HSTS header 长的生命周期，最好是半年及以上。
    Strict-Transport-Security: max-age=31536000
#### 1.3 Public Key Pins
HTTP PKP（HPKP）指示浏览器只与提供的 SSL/TLS 的 HASH 相符或存在于同一证书链的服务器相连接。换句话说，如果 SSL/TLS
证书以一种意想不到的方式发生了变化，浏览器就无法连接到主机。这主要是针对受信任证书颁发机构（CA）或流氓 CA 证书颁发的伪造证书，用户可能会被骗安装。
例如，浏览器连接到 `https://example.com`，它存在这个头。header 告诉浏览器，如果证书 key 匹配，或者在发出证书链中有一个
key 匹配，那么在将来才会再次连接。其他的指令组合是可能的。它们都极大地减少了攻击者在客户端和合法主机之间模拟主机或拦截通信的可能性。
像 HSTS 一样，HPKP 在实现之前需要仔细的思考和计划。错误可以将用户锁定在您的站点之外，并且不容易修复。
像 [HSTS](https://blog.myssl.com/https-security-best-practices/#12httpstricttransportsecurityhsts) 一样，HPKP
在实现之前需要仔细的思考和计划。错误可以将用户锁定在您的站点之外，并且不容易修复。
**建议**  
确定是否需要为您的站点使用 PKP。如果是这样的话，那么从一个较小的实践开始，如果在一段时间之后没有遇到问题，就增加它。如果 SSL/TLS
密钥需要更新，建立备份计划。优先创建备份密钥和离线存储。
示例HTTP头:
    Public-Key-Pins: max-age=5184000; pin-sha256="+oZq/vo3Kcv0CQPjpdwyInqVXmLiobmUJ3FaDpD/U6c="; pin-sha256="47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="
#### 1.4 Mixed HTTPS and HTTP Content
主站点通过 HTTPS 安全地服务，但是在 HTTP 上加载一些文件（images、js、css）。这是一个巨大的安全漏洞，破坏了 HTTPS
提供的安全性。受影响的站点可能会泄漏会话 cookie 或用户行为信息。它们也可能容易受到注入和其他 MITM 攻击的攻击，而 HTTPS
通常会阻止这种攻击。
**建议**  
如果 HTTPS 部署在主站上，请将任何地方的所有内容都 HTTPS 化（全站 HTTPS）。
### 2 Content security
#### 2.1 Content Security Policy
为浏览器提供关于网站内容类型和行为的明确说明。良好的内容安全策略（CSP）可以帮助抵御跨站点脚本（XSS）和其他注入攻击等攻击。CSP
支持所有主要的浏览器，尽管只是部分地之前在 IE 11。
一个好的 CSP 是基于白名单的方法，不允许任何东西，除了明确允许的内容。它还限制了 javascript 的来源和允许操作。
CSP 很难启用遗留代码库。为了简化实现，CSP 提供了一个 `report-only` 模式，在浏览器中，CSP
的违规被发送到一个网站端点，但是该策略没有被强制执行。  
新项目应该从一开始就使用 CSP。
**建议**  
从限制性政策开始，在必要时放松。禁止所有的例子:
    Content-Security-Policy: default-src 'none';
现在让我们允许自托管 scripts、images、CSS、fonts 和 AJAX，以及 jQuery CDN 托管脚本和 Google
Analytics:
    Content-Security-Policy: default-src 'none'; script-src 'self' https://code.jquery.com https://www.google-analytics.com; img-src 'self' https://www.google-analytics.com; connect-src 'self'; font-src 'self'; style-src 'self';
要注意的是，不要让所有的东西都破坏你的网站，例如，如果你使用 `child-src` 指令，而浏览器不支持它。一个不那么严格的政策可能从以下开始:
    Content-Security-Policy: default-src 'self';
甚至更少的限制性政策甚至可以使用 `default-src '*'`，然后添加限制。我建议你不要这么做，除非你完全明白其中的含义。否则，你可能会依赖
CSP，它只会给你一种错误的安全感。
#### 2.2 Frame Options
控制站点是否可以放置在 ``，`` 或 `` 标签。不允许使用框架可以防止 clickjacking
攻击。例如，从 2015 年 2 月起，[Internet Explorer’s universal cross-site-scripting
bug](http://thehackernews.com/2015/02/internet-explorer-xss.html) 就被这个消息头减轻了。
`X-Frame-Options` 是一个非标准的 header，在内容安全策略级别 2 中被 _frame ancestor_ 指令所取代。然而，