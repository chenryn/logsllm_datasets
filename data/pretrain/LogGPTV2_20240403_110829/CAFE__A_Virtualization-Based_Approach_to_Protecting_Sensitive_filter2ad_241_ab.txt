to both the SBS and the application that uses the secret
binary. The cloud infrastructure maintains the association
between a VM ID and a user, and what licenses the user
has for billing purposes. Based on this information, the SBS
determines whether the user associated with the VM ID has
a valid license for the application of the secret binary ID. If
the license is valid, the SBS proceeds to the transmission,
otherwise it refuses the request.
Transmission of secret binaries: The SBS encrypts a
secret binary with the encryption key and the IV using the
HMAC message authentication of the encrypted secret bi-
naries with the shared HMAC key. The SBS and the hyper-
visor establish a new secure channel with a diﬀerent session
key (K in Figure 2) at every request of a secret binary, and
the secret binary is encrypted using the session key. There-
fore, the deployment protocol can resist brute-force attacks
on the secure channel and the secret binary encryption.
Loading of secret binaries: After the transmission,
the secret binaries remain encrypted in the user VM’s disk
throughout the all steps of the secret binary loading and
execution. The hypervisor decrypts and loads secret binaries
in the conﬁdential execution environment that is isolated
from the user VM. The integrity of the secret binaries is
checked using the shared HMAC key with the SBS before
the loading. Finally, the result of the loading is sent back
to the SBS, and the application receives the address of the
secret binary.
3.2 Runtime Protection of Secret Binary
In this section, we describe how CAFE protects secret
binaries on disk and memory.
Protection of the secret binary on disk: The se-
cret binary ﬁle on disk is cryptographically protected by an
Figure 2: Secret binary deployment protocol.
Execution of an application: When the cloud user
runs the purchased application in the VM, the application
requests the hypervisor to load the secret binaries via a hy-
percall. The hypervisor, in turn, communicates with the
SBS to prove the authenticity of itself and the user’s license
for the application. Speciﬁcally, the hypervisor and the SBS
exchange the session key to establish a secure channel, and
the SBS attests the integrity of the hypervisor leveraging
the Trusted Platform Module (TPM) to ensure the genuine-
ness of hypervisor. After that, the SBS transfers the secret
binaries encrypted using the session key shared with the hy-
pervisor. Upon receiving them, the hypervisor decrypts and
loads the secret binaries in a secure runtime environment
which is completely isolated from the user VM.
Designation of sensitive code: Security sensitive code
has the key logic of an application requiring a high degree
of protection. Since this is typically a small portion of the
entire application code, the cost to achieve conﬁdentiality is
generally amortized in the overall performance of programs.
Our evaluation in Section 4 will conﬁrm that this high se-
crecy property can be achieved with minimal overhead.
3.1 Secure Authentication and Deployment of
Secret Binary
Figure 2 depicts our deployment protocol of secret bina-
ries, designed to defend against attacks.
Secure channel establishment: When an application
requests a secret binary from the hypervisor, a secure chan-
nel is established between the hypervisor and the SBS for
tamper-resistant communication. The details of the secure
channel establishment are as follows.
Among several candidate key exchange algorithms (i.e.,
Diﬃe-Hellan and RSA), we choose a variant of Transport
Layer Security (TLS) [3] as our handshake protocol and RSA
as our key exchange algorithm. TLS allows two parties of
the secure channel (i.e., the SBS and the hypervisor) to au-
thenticate each other with the other’s certiﬁcate. The certiﬁ-
cate authority (CA) guarantees the certiﬁcates of both sides;
thereby, they can securely authenticate each other. Unlike
the standard handshake protocol of TLS, CAFE leverages
the TPM to generate an RSA key pair of the hypervisor
CloudApplicationHypervisorSecretBinaryServerEncryptedSecretBinaryVerify(CertAIK)Attest(SignedDigest)Load(SecretBinary)NonceEstablish Secure ChannelGenRand(Nonce)SignedDigestEncK(SecretBinary)DecK(EncryptedSecretBinary)LoadResultAttestResultVmID, SecretBinaryIDSecretBinaryAddressSecretBinaryIDCheckLicense(VmID, SecretBinaryID)Insecure ChannelSecure ChannelLegend:(PCR17, Nonce, Locality)TPM_Quote2653encryption algorithm. Among various available encryption
algorithms, we choose AES-256 in the CBC mode to en-
crypt and decrypt secret binaries. The SBS performs the
encryption of the binary on demand when a request for a
binary is received from an application. The session key ob-
tained from the session channel establishment (Section 3.1)
is used for encryption to prevent brute-force attempts that
target the transmission of the secret binary. The application
uses an API provided by CAFE to load the secret binary.
The secret binary ﬁle remains encrypted until it is veriﬁed
and loaded into an isolated memory maintained by the hy-
pervisor. Therefore, any attempts to reverse-engineer the
decrypted content of the binary ﬁle on disk fail.
Protection of the secret binary in memory: Once
the secret binary is loaded into memory,
it is protected
by the hardware-assisted memory virtualization technology.
Several types of hardware-support for memory virtualiza-
tion are readily available in modern commodity processors
such as Intel Extended Page Tables and AMD Rapid Vir-
tualization Indexing. CAFE uses this technique to load the
secret binary into the memory and create a secure execution
environment isolated from the user VM.
Speciﬁcally before the secret binary is loaded, there is one
set of nested page tables (NPTs) that is maintained by the
hypervisor to map all guest physical addresses to machine
physical addresses. When the binary is loaded, the NPTs
are split into two exclusive sets: the public NPTs and the
secret NPTs. The public NPTs contain the page entries for
all memory blocks used by the user VM except those used by
the secret binary, whereas the secret NPTs contain the page
entries for the secret binary only. The hypervisor ensures
that the user VM uses the public NPTs while the public
binary is running. Thus, any memory access to the secret
binary during the execution of the public binary is blocked
by the MMU. On the other hand, when the application ex-
ecutes the secret binary the hypervisor switches the public
NPTs with the secret NPTs which enforce the exclusive ac-
cess by the secret binary providing strong isolation between
the secret binary and the user VM.
Previous work leveraging memory virtualization primar-
ily focus on the runtime isolation of the program binary in
memory [16, 15]. Compared to the existing work, CAFE en-
sures that the sensitive application logic is inaccessible from
the user VM at any time.
3.3 Secure Hypervisor Loading of Secret Bi-
nary
A program’s execution is performed through low level op-
erations such as allocation of system resources, program
loading and linking, and the bootstrapping of the program.
These operations are typically performed by the high priv-
ileged software layer in the OS or system level libraries.
In our setting, the user VM including its OS is untrusted.
Therefore, CAFE has its own mechanism for such operations
to ensure the conﬁdentiality of the program throughout its
execution. In this section, we describe how this execution
environment is established.
Loading of an executable binary: Program code typi-
cally consists of multiple binary codes: the main executable
and a number of shared libraries linked to the main exe-
cutable. When a binary is loaded, the location in the vir-
tual memory of the process and the symbols (e.g., exported
global variables and functions) are determined dynamically
by the loader. Thus, any instructions of the program that
refer to the symbols must be updated with the addresses de-
termined at runtime and this process is known as relocation.
When the executable ﬁle is built, the compiler constructs a
relocation table that includes the information necessary for
the relocation: the locations of the instruction operands to
be patched, the location of the symbols in the binary, and
how the loader is expected to perform relocation (i.e., the
relocation type). This table is used by the loader when the
executable ﬁle is loaded or when the relocation is necessary
in a lazy manner depending on the conﬁguration.
Loading by the hypervisor: The application requests
the hypervisor to load the secret binary using the APIs pro-
vided CAFE. Then the hypervisor decrypts the secret bi-
nary into the memory isolated from the user VM. Since the
OS loader is untrusted, we use the hypervisor to perform
the loading, the decryption, and the relocation of the secret
binary. When the binary is loaded into the isolated mem-
ory, the hypervisor performs the decryption. After that it
performs the relocation of the binary. When the applica-
tion requests CAFE to load a secret binary, it locates the
relocation section of the secret binary, and the encrypted
relocation information is sent to the hypervisor via a hyper-
call. When the hypervisor receives the hypercall, it decrypts
the relocation information. If decryption is successful, then
it performs relocation on all sections of the secret binary.
4. EVALUATION
CAFE consists of three major components: the hypervi-
sor, the secret binary server (SBS), and the user level APIs
that the cloud applications use to send requests to the hy-
pervisor via hypercall.
The hypervisor is implemented on top of eXtensible and
Modular Hypervisor Framework (XMHF) [22] which is used
in several related work [22, 15, 23]. We implement the au-
thentication/veriﬁcation layer that interacts with the SBS
and the loading and unloading mechanism for secret bina-
ries that involve the hypervisor level relocation.
We use two separate machines for our experiments for the
hypervisor and the SBS. Both machines are equipped with
an AMD Turion II P520 2.30GHz processor, 4GB RAM, and
a 256GB SSD, and run the 32-bit version of Ubuntu 12.04.
The virtual machines and the SBS are connected to a 1Gb/s
network.
4.1 Use Cases
We demonstrate that various types of application code
can be protected by CAFE using six applications grouped
into three distinct categories (as listed in Table 1). The
applications are selected based on their popularity in real-
world usages and cloud marketplaces. We use the source
code of these applications to slice out example sensitive code
that is compiled into secret binaries. The chosen program
logic may not be “conﬁdential” in real world, but they are
selected to simulate the developers’ eﬀorts to take the beneﬁt
of conﬁdential execution of CAFE. Our experiment shows
the applicability of CAFE to various types of application
software to verify that similar program logic can be executed
conﬁdentially.
Table 1 shows the details of the applications that run
on CAFE with conﬁdential execution. The ﬁrst column
presents three categories of program logic: decision-making
logic, cryptographic operations, and data processing work-
654Application
Category
Decision-
making logic
Cryptographic
operations
Program
Name
NGINX
Sendmail
Google Authenticator
EncFS
Data processing MapReduce
workload
Hadoop
Binary
Name
nginx-access
sendmail-filter
gauth-otp
encfs-aria
mapreduce-kmeans
hadoop-wcount
Code info
Protected code
Access module
Mail Filter (Milter)
One-time passcode generation
ARIA block encryption/decryption
k-means clustering
Word counting
|L|
169
106
102
220
173
180
|F|
1
1
1
3
1
2
|C|
4
52
8
24
12
4