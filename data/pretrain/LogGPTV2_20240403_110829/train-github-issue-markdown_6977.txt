### Describe the workflow you want to enable
The Markov Chain is an algorithm that can generate data from data.
The idea of the Markov Chain was first published in 1906.
It fits SK-Learn's model of `fit`, `predict/transform` by fitting the data to
a model, and then predicting a new sequence of data.
What I am looking for is the green light to go ahead with the implementation,
in order to ensure the source code is organized properly, and to ensure there
is no duplication.
### Describe your proposed solution
I would like to implement the Markov Chain algorithm:  
https://en.wikipedia.org/wiki/Markov_chain
My proposal is to provide it with a numpy array such as:
    [
        [1, 2], 
        [2, 3], 
        [3, 4], 
    ]
So the training data is not limited to one dimensional data. I would like to
implement the option to use one dimensional data for user simplicity. An
example of 2 dimensional data would be when using music notes as the training
data, each data point could be a vector containing the type of note (ex. half,
whole, quarter) and the note itself (ex. A#2, C4).
To generate a sequence the user will provide a maximum length, or a stop
condition (ex, element contains a 4, or element equals `[3, 4]`
The result of the predict would be the same format as the input.
### Describe alternatives you've considered, if relevant
_No response_
### Additional context
I have used Markov chains to generate music from a song, and to generate
sentences from Lord of the Rings. I have implemented this algorithm twice (for
one and two dimensional data).