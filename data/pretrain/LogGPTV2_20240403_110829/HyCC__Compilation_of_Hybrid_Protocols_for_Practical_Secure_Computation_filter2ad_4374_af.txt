A+B
Y
A+Y
B
A+B
Y
A+Y
non-linear
Gates
1,441,732
5,395
849,711
4,990
4,429,046
529,526
2,550,076
443,900
8,981,870
1,163,575
5,158,825
937,049
Interaction
Rounds
1,237
1,187
3
17
765
708
3
32
767
708
3
32
Setup Phase
LAN WAN Comm.
[MiB]
[ms]
593
44
2
29
26
858
1
22
135
1,645
451
26
1,725
78
23
472
274
3,521
54
832
3,212
158
927
47
[ms]
3,776
927
3,619
815
13,312
5,201
8,317
3,433
26,766
7,085
15,960
5,837
Online Phase
LAN WAN Comm.
[KiB]
[ms]
1,310
733
56
144
752
679
30
4
2,179
4,219
564
6,827
1,272
100
6,705
435
9,846
4,403
13,295
1,202
2,660
250
12,861
942
[ms]
63,430
59,319
886
606
43,090
36,652
1,451
2,395
48,937
38,155
2,861
3,603
runtime for any of the benchmark applications. This is because we
performed all benchmarks in the function dependent preprocess-
ing model, which is the default setting in ABY, and which allows
to garble the circuit in the setup phase. When using a function
independent cost model for preprocessing, HyCC identifies A+B
as the fastest protocol combination in the LAN setting for many
applications.
6 CONCLUSIONS AND FUTURE WORK
In our evaluation we observed that hybrid protocols can signifi-
cantly outperform standalone protocols. HyCC is capable of auto-
matically synthesizing the required hybrid protocols from a high-
level description and selecting them for a given deployment sce-
nario. As such, HyCC is even capable of outperforming certain
hand-optimized protocols. Moreover, as the manual creation of
circuits and their selection are tedious and error-prone tasks, we
conclude that HyCC makes hybrid MPC more practical and also
accessible to developers without expert-knowledge in MPC.
In future work, we will extend HyCC with floating point opera-
tions and integrate more MPC protocols with different cost models.
A natural candidate for extension is homomorphic encryption, simi-
lar to TASTY [24]. Another possibility would be integrating trusted
hardware environments such as Intel’s SGX.
ACKNOWLEDGMENTS
We thank all anonymous reviewers for their helpful and construc-
tive comments. This work has been co-funded by the German
Federal Ministry of Education and Research (BMBF) and the Hes-
sen State Ministry for Higher Education, Research and the Arts
(HMWK) within CRISP, by the DFG as part of projects E4 and S5
within the CRC 1119 CROSSING, and by the DFG as part of project
A.1 within the RTG 2050 “Privacy and Trust for Mobile User”.
REFERENCES
[1]
J. B. Almeida et al. Jasmin: high-assurance and high-speed cryptography. In
ACM CCS’17, pp. 1807–1823. ACM Press, 2017.
G. Asharov, Y. Lindell, T. Schneider, and M. Zohner. More efficient oblivious
transfer and extensions for faster secure computation. In ACM CCS’13, pp. 535–
548. ACM Press, 2013.
D. Beaver. Correlated pseudorandomness and the complexity of private com-
putations. In ACM STOC’96, pp. 479–488. ACM Press, 1996.
[2]
[3]
[4]
[10]
[8]
[9]
D. Beaver, S. Micali, and P. Rogaway. The round complexity of secure protocols
(extended abstract). In ACM STOC’90, pp. 503–513. ACM Press, 1990.
[5] M. Bellare, V. T. Hoang, S. Keelveedhi, and P. Rogaway. Efficient garbling from
a fixed-key blockcipher. In IEEE S&P’13, pp. 478–492. IEEE Computer Society
Press, 2013.
[6] D. Bogdanov, M. Jõemets, S. Siim, and M. Vaht. How the estonian tax and
customs board evaluated a tax fraud detection system based on secure multi-
party computation. In FC’15, pp. 227–234. Springer, 2015.
[7] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: a framework for fast
privacy-preserving computations. In ESORICS’08, pp. 192–206. Springer, 2008.
N. Büscher, M. Franz, A. Holzer, H. Veith, and S. Katzenbeisser. On compiling
boolean circuits optimized for secure multi-party computation. Formal Methods
in System Design, 51(2):308–331, 2017.
N. Büscher, A. Holzer, A. Weber, and S. Katzenbeisser. Compiling low depth
circuits for practical secure computation. In ESORICS’16, pp. 80–98. Springer,
2016.
N. Büscher, D. Kretzmer, A. Jindal, and S. Katzenbeisser. Scalable secure com-
putation from ANSI-C. In IEEE International Workshop on Information Forensics
and Security (WIFS’16), pp. 1–6. IEEE, 2016.
[11] H. Carter, C. Lever, and P. Traynor. Whitewash: outsourcing garbled circuit
generation for mobile devices. In ACM ACSAC’14, pp. 266–275. ACM Press,
2014.
[12] H. Carter, B. Mood, P. Traynor, and K. Butler. Outsourcing secure two-party
computation as a black box. In Security and Communication Networks (SCN’16),
pp. 2261–2275. Wiley Online Library, 2016.
[13] H. Carter, B. Mood, P. Traynor, and K. Butler. Secure outsourced garbled circuit
evaluation for mobile devices. In USENIX Security’13, pp. 289–304. USENIX
Association, 2013.
N. Chandran, D. Gupta, A. Rastogi, R. Sharma, and S. Tripathi. EzPC: pro-
grammable, efficient, and scalable secure two-party computation. Cryptology
ePrint Archive, Report 2017/1109, 2017. http://eprint.iacr.org/2017/
1109.
S. G. Choi, K.-W. Hwang, J. Katz, T. Malkin, and D. Rubenstein. Secure multi-
party computation of Boolean circuits with applications to privacy in on-line
marketplaces. In CT-RSA’12, pp. 416–432. Springer, 2012.
I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias. Multiparty computation from
somewhat homomorphic encryption. In CRYPTO’12, pp. 643–662. Springer,
2012.
[17] D. Demmler, G. Dessouky, F. Koushanfar, A.-R. Sadeghi, T. Schneider, and
S. Zeitouni. Automated synthesis of optimized circuits for secure computation.
In ACM CCS’15, pp. 1504–1517. ACM Press, 2015.
[18] D. Demmler, T. Schneider, and M. Zohner. ABY - A framework for efficient
mixed-protocol secure two-party computation. In NDSS 2015. The Internet
Society, 2015.
[19] W. Du, Y. S. Han, and S. Chen. Privacy-preserving multivariate statistical
analysis: linear regression and classification. In SIAM International Conference
on Data Mining’04, pp. 222–233, 2004.
J. Furukawa, Y. Lindell, A. Nof, and O. Weinstein. High-throughput secure
three-party computation for malicious adversaries and an honest majority. In
EUROCRYPT’17, pp. 225–255. Springer, 2017.
R. Gilad-Bachrach, N. Dowlin, K. Laine, K. E. Lauter, M. Naehrig, and J. Werns-
ing. Cryptonets: applying neural networks to encrypted data with high through-
put and accuracy. In International Conference on Machine Learning, ICML’16,
pp. 201–210, 2016.
N. Gilboa. Two party RSA key generation. In CRYPTO’99, pp. 116–129. Springer,
1999.
[16]
[20]
[14]
[15]
[21]
[22]
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada860[32]
[33]
[34]
[31]
[30]
[29]
[28]
[27]
[26]
[23] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game
or A completeness theorem for protocols with honest majority. In STOC’87,
pp. 218–229. ACM Press, 1987.
[24] W. Henecka, S. Kögl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY:
tool for automating secure two-party computations. In ACM CCS’10, pp. 451–
462. ACM Press, 2010.
[25] W. Henecka and T. Schneider. Faster secure two-party computation with less
memory. In ASIACCS’13, pp. 437–446. ACM Press, 2013.
A. Holzer, M. Franz, S. Katzenbeisser, and H. Veith. Secure two-party computa-
tions in ANSI C. In ACM CCS’12, pp. 772–783. ACM Press, 2012.
Y. Huang, P. Chapman, and D. Evans. Privacy-preserving applications on
smartphones. In USENIX Conference on Hot Topics in Security (HotSec’13), pp. 4–
4. USENIX Association, 2011.
Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation
using garbled circuits. In USENIX Security’11, pp. 331–335. USENIX Association,
2011.
F. Irigoin, P. Jouvelot, and R. Triolet. Semantical interprocedural parallelization:
an overview of the PIPS project. In International Conference on Supercomputing
(ICS’91), pp. 244–251. ACM Press, 1991.
Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending oblivious transfers
efficiently. In CRYPTO 2003, pp. 145–161. Springer, 2003.
G. Jagannathan and R. N. Wright. Privacy-preserving distributed k-means
clustering over arbitrarily partitioned data. In ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining’05, pp. 593–599, 2005.
F. Kerschbaum, T. Schneider, and A. Schröpfer. Automatic protocol selection
in secure two-party computations. In ACNS 14, pp. 566–584. Springer, 2014.
V. Kolesnikov and T. Schneider. Improved garbled circuit: free XOR gates and
applications. In ICALP’08, pp. 486–498. Springer, 2008.
B. Kreuter, A. Shelat, B. Mood, and K. R. B. Butler. PCF: A portable circuit format
for scalable two-party secure computation. In USENIX Security’13, pp. 321–336.
USENIX Association, 2013.
B. Kreuter, A. Shelat, and C. Shen. Billion-gate secure computation with ma-
licious adversaries. In USENIX Security’12, pp. 285–300. USENIX Association,
2012.
Y. Lindell and A. Nof. A framework for constructing fast MPC over arithmetic
circuits with malicious adversaries and an honest-majority. In ACM CCS’17,
pp. 259–276. ACM Press, 2017.
C. Liu, X. S. Wang, K. Nayak, Y. Huang, and E. Shi. ObliVM: A programming
framework for secure computation. In IEEE S&P’15, pp. 359–376. IEEE Com-
puter Society Press, 2015.
J. Liu, M. Juuti, Y. Lu, and N. Asokan. Oblivious neural network predictions via
MiniONN transformations. In ACM CCS’17, pp. 619–631. ACM Press, 2017.
[39] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay – a secure two-party
computation system. In USENIX Security’04, pp. 287–302. USENIX Association,
2004.
P. Mohassel and P. Rindal. ABY 3: a mixed protocol framework for machine
learning. Cryptology ePrint Archive, Report 2018/403, 2018. http://eprint.
iacr.org/2018/403.
B. Mood, D. Gupta, H. Carter, K. R. B. Butler, and P. Traynor. Frigate: A validated,
extensible, and efficient compiler and interpreter for secure computation. In
IEEE EuroS&P’16, pp. 112–127. IEEE, 2016.
[42] M. Naor, B. Pinkas, and R. Sumner. Privacy preserving auctions and mechanism
design. In ACM Conference on Electronic Commerce’99, pp. 129–139. ACM, 1999.
V. Nikolaenko, U. Weinsberg, S. Ioannidis, M. Joye, D. Boneh, and N. Taft.
Privacy-preserving ridge regression on hundreds of millions of records. In IEEE
S&P’13, pp. 334–348. IEEE Computer Society Press, 2013.
E. Pattuk, M. Kantarcioglu, H. Ulusoy, and B. Malin. CheapSMC: A framework
to minimize secure multiparty computation cost in the cloud. In DBSec’16,
pp. 285–294. Springer, 2016.
[44]
[35]
[36]
[37]
[38]
[40]
[41]
[43]
[45]
[49]
[48]
[47]
A. Rastogi, M. A. Hammer, and M. Hicks. Wysteria: A programming language
for generic, mixed-mode multiparty computations. In IEEE S&P’14, pp. 655–670.
IEEE Computer Society Press, 2014.
[46] M. S. Riazi, C. Weinert, O. Tkachenko, E. M. Songhori, T. Schneider, and F.
Koushanfar. Chameleon: a hybrid secure computation framework for machine
learning applications. In ACM ASIACCS’18. ACM Press, 2018.
T. Schneider and M. Zohner. GMW vs. Yao? Efficient secure two-party compu-
tation with low depth circuits. In FC’13, pp. 275–292. Springer, 2013.
E. M. Songhori, S. U. Hussain, A.-R. Sadeghi, T. Schneider, and F. Koushanfar.
TinyGarble: highly compressed and scalable sequential garbled circuits. In IEEE
S&P’15, pp. 411–428. IEEE Computer Society Press, 2015.
J. Vaidya and C. Clifton. Privacy-preserving k-means clustering over verti-
cally partitioned data. In ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining’13, pp. 206–215. ACM Press, 2003.
R. P. Wilson et al. SUIF: an infrastructure for research on parallelizing and
optimizing compilers. ACM SIGPLAN Notices, 29(12):31–37, 1994.
A. C.-C. Yao. How to generate and exchange secrets (extended abstract). In
IEEE FOCS’86, pp. 162–167. IEEE Computer Society Press, 1986.
S. Zahur and D. Evans. Obliv-C: A language for extensible data-oblivious
computation. Cryptology ePrint Archive, Report 2015/1153, 2015. http://
eprint.iacr.org/2015/1153.
S. Zahur, M. Rosulek, and D. Evans. Two halves make a whole - reducing data
transfer in garbled circuits using half gates. In EUROCRYPT’15, pp. 220–250.
Springer, 2015.
Y. Zhang, A. Steele, and M. Blanton. PICCO: a general-purpose compiler for
private distributed computation. In ACM CCS’13, pp. 813–826. ACM Press,
2013.
[51]
[52]
[50]
[53]
[54]
A FIXED-POINT COMPUTATIONS IN HYCC
In Listing 5 a code example is shown that implements 32 bit fixed-
point numbers for ANSI C that can be used in any application
compiled with HyCC.
1 # include 
2
3 # define FP_BITS 32
4 # define FP_INTEGER_BITS 24
5 # define FP_FRACTION_BITS ( FP_BITS - FP_INTEGER_BITS )
6
7 typedef int32_t fixedpt ;
8 typedef int64_t fixedptd ;
9
10 fixedpt fixedpt_mul ( fixedpt a , fixedpt b)
11 {
12
13
14 }
15
16 fixedpt fixedpt_div ( fixedpt a , fixedpt b)
17 {
18
19 }
Listing 5: Code to add fixed-point support in ANSI C and
thus, also applications compiled with HyCC.
>>
( fixedptd ) FP_FRACTION_BITS );
return (( fixedptd )a < <( fixedptd ) FP_FRACTION_BITS )/b;
(( fixedptd )a * ( fixedptd )b)
return
\
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada861