### 优化后的文本

#### 表格数据
| 协议组合 | 门数 | LAN 通信量 [MiB] | LAN 延迟 [ms] | WAN 通信量 [KiB] | WAN 延迟 [ms] |
|----------|------|------------------|---------------|------------------|---------------|
| A+B      | 1,441,732 | 593              | 3,776         | 1,310            | 63,430        |
| Y        | 5,395     | 858              | 927           | 752              | 59,319        |
| A+Y      | 849,711   | 1                | 3,619         | 30               | 886           |
| B        | 4,990     | 135              | 815           | 4                | 606           |
| A+B      | 4,429,046 | 1,725            | 13,312        | 2,179            | 43,090        |
| Y        | 529,526   | 274              | 5,201         | 564              | 36,652        |
| A+Y      | 2,550,076 | 3,521            | 8,317         | 1,272            | 1,451         |
| non-linear | 443,900  | 54               | 3,433         | 100              | 2,395         |
| Gates    | 8,981,870 | 3,212            | 26,766        | 6,705            | 48,937        |
| A+B      | 1,163,575 | 158              | 7,085         | 435              | 38,155        |
| Y        | 5,158,825 | 927              | 15,960        | 9,846            | 2,861         |
| A+Y      | 937,049   | 47               | 5,837         | 13,295           | 3,603         |

#### 交互轮数
| 交互轮数 | 
|---------|
| 1,237   |
| 1,187   |
| 3       |
| 17      |
| 765     |
| 708     |
| 3       |
| 32      |
| 767     |
| 708     |
| 3       |
| 32      |

#### 结论与未来工作
在我们的评估中，我们观察到混合协议可以显著优于独立协议。HyCC 能够从高层次描述自动合成所需的混合协议，并为给定的部署场景选择合适的协议。因此，HyCC 甚至能够超越某些手工优化的协议。此外，由于手动创建电路及其选择是繁琐且容易出错的任务，我们认为 HyCC 使得混合多方计算（MPC）更加实用，并且对没有 MPC 专业知识的开发者也更加易于使用。

在未来的工作中，我们将扩展 HyCC 以支持浮点运算，并集成更多具有不同成本模型的 MPC 协议。一个自然的扩展方向是同态加密，类似于 TASTY [24]。另一个可能的方向是集成可信硬件环境，如 Intel 的 SGX。

#### 致谢
感谢所有匿名审稿人提供的宝贵和建设性的意见。本研究得到了德国联邦教育和研究部（BMBF）、黑森州科学与艺术部（HMWK）的支持，并在 CRISP 项目中得到了资助。此外，还得到了 DFG 在 CRC 1119 CROSSING 项目 E4 和 S5 以及 RTG 2050 “移动用户的隐私和信任” 项目 A.1 中的支持。

#### 参考文献
[1] J. B. Almeida 等人. Jasmin: 高保障和高速密码学. 在 ACM CCS’17, 第 1807-1823 页. ACM 出版社, 2017.

[2] G. Asharov, Y. Lindell, T. Schneider, M. Zohner. 更高效的混淆传输及扩展以实现更快的安全计算. 在 ACM CCS’13, 第 535-548 页. ACM 出版社, 2013.

[3] D. Beaver. 相关伪随机性和私密计算的复杂性. 在 ACM STOC’96, 第 479-488 页. ACM 出版社, 1996.

[4] D. Beaver, S. Micali, P. Rogaway. 安全协议的轮复杂性 (扩展摘要). 在 ACM STOC’90, 第 503-513 页. ACM 出版社, 1990.

[5] M. Bellare, V. T. Hoang, S. Keelveedhi, P. Rogaway. 从固定密钥块密码中高效构建混淆. 在 IEEE S&P’13, 第 478-492 页. IEEE 计算机学会出版社, 2013.

...

#### 固定点计算在 HyCC 中
在清单 5 中展示了 ANSI C 中实现 32 位定点数的代码示例，这些定点数可以在任何用 HyCC 编译的应用程序中使用。

```c
#include <stdint.h>

#define FP_BITS 32
#define FP_INTEGER_BITS 24
#define FP_FRACTION_BITS (FP_BITS - FP_INTEGER_BITS)

typedef int32_t fixedpt;
typedef int64_t fixedptd;

fixedpt fixedpt_mul(fixedpt a, fixedpt b) {
    return ((fixedptd)a * (fixedptd)b) >> FP_FRACTION_BITS;
}

fixedpt fixedpt_div(fixedpt a, fixedpt b) {
    return ((fixedptd)a << FP_FRACTION_BITS) / b;
}
```

清单 5: 用于在 ANSI C 中添加定点支持的代码，从而也可以在用 HyCC 编译的应用程序中使用。

---

通过上述优化，文本变得更加清晰、连贯和专业。希望这对您有帮助！