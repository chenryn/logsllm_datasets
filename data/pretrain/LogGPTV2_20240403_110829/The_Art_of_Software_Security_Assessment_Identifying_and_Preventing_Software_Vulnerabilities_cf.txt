real user ID set to 0, it can regain its superuser privileges later. 
A program running as root might also want to fully drop its root privileges and assume 
the role of a normal user permanently. To fully drop root privileges, the program must 
set all three of its user IDs and group IDs to the correct IDs for the user that it wants 
to become. 
A good example of a program like this is the login program, which authenticates 
users on a local terminal or remotely via the telnet service. This login program 
displays the login prompt and waits for the user to try to log in to the machine. At this 
point in time, the login program is running as root, because it needs access to system 
authentication databases. If the user authenticates successfully, login assumes the 
identity of that user before it opens a command shell, such as /bin/sh It does this by 
initializing its group IDs based on the user's group membership and then setting all 
three of its user IDs to the user's ID. 
User ID Functions 
The setuid(), seteuid(), setreuid(), and setresuid() functions are used to 
manipulate the three user IDs associated with a process. These functions have 
slightly different semantics on different UNIX OSs, and these differences can lead to 
security problems in applications that are intended to be portable across UNIX 
variants. This section introduces the user ID functions exposed by the standard C 
library and notes system-specific idiosyncrasies when relevant. 
Note 
You can find an excellent paper on the nuances of the setuid() family of functions at 
www.csl.sri.com/users/ddean/papers/usenix02.pdf. 
The seteuid() Function 
The effective user ID associated with a process is changed with the seteuid() 
function: 
int seteuid(uid_t euid); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
486 
This function, summarized in Table 9-1, has a single parameter, euid, which indicates 
the desired UID that the effective user ID should be set to. If a process is running with 
superuser privileges (effective user ID of 0), it can set the effective user ID to any 
arbitrary ID. Otherwise, for non-root processes, it can toggle the effective user ID 
between the saved set-user-ID and the real user ID. Programs use seteuid() to 
temporarily change their privileges. 
Table 9-1. Seteuid() Behavior 
Privileged OS 
Notes 
Yes 
General 
Changes the effective user ID to any arbitrary value. 
Yes 
Linux libc 
glibc 2.1 
and earlier 
If the new ID isn't the real user ID or the saved 
set-user-ID, the saved set-user-ID is updated along with 
the effective user ID. seteuid() is equivalent to 
setreuid(-1, euid). 
No 
General 
Toggles the effective user ID between the real user ID, the 
effective user ID, and the saved set-user-ID. 
No 
NetBSD 
FreeBSD 
Toggles the effective user ID between the real user ID and 
the saved set-user-ID. 
Take a closer look at this nonprivileged case: Say a user named admin has a user ID 
of 1000. The admin user runs a file owned by the bin user (typically user ID 1) and the 
saved set-user-ID bit is set on the file. When the program runs, the process has the 
following IDs: 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
effective user ID - 1 - bin 
The program can do anything the bin user is allowed to do. If the program wants to 
temporarily relinquish these privileges, it can use seteuid(1000). It then has the 
following privileges: 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
effective user ID - 1000 - admin 
If the program wants to regain its privileges, it uses seteuid(1). It then has these 
associated IDs: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
487 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
effective user ID - 1 - bin 
For the sake of completeness, say you have a program running as root with the 
following IDs: 
real user ID - 0 - root 
saved set-user-ID - 0 - root 
effective user ID - 0 - root 
This program can call a seteuid() with any value it likes, including values for user IDs 
that don't exist in the system, and the kernel allows it. Using a seteuid(4242) would 
result in the following IDs: 
real user ID - 0 - root 
saved set-user-ID - 0 - root 
effective user ID - 4242 - arbitrary 
Warning 
There's one caveat with seteuid() that should never be an issue in production code, 
but it's worth mentioning. On Linux systems with libc or glibc versions before 2.1, if 
you are the superuser and change the effective user ID to an ID that isn't the real user 
ID or the saved set-user-ID, the saved set-user-ID is changed along with the effective 
user ID. So if you're root and all three of your IDs are 0, and you use a seteuid(4242) 
on a Linux glibc 2.0 system, the process would have the following IDs: 
real user ID - 0 - root 
saved set-user-ID - 4242 - arbitrary 
effective user ID - 4242 - arbitrary 
The setuid() Function 
The behavior exhibited by the setuid() function has evolved and mutated over time, 
with subtle variances surfacing in different implementations across divergent UNIX 
systems. It has the following prototype: 
int setuid(uid_t uid); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
488 
The uid parameter is used to specify a new effective user ID to be associated with the 
calling process. This function will also change both the real user ID and saved 
set-user-ID, contingent upon the privileges the calling process is running with and the 
UNIX variant that the process is running on (see Table 9-2). For processes running 
with superuser privileges, setuid() sets all three of a process's user IDs to the 
specified argument. For example, if a process's effective user ID is 0, a setuid(12345) 
sets the real user ID, saved set-user-ID, and effective user ID to 12345. setuid() is 
mainly used for permanently assuming the role of a user, usually for the purposes of 
dropping privileges. 
Table 9-2. Setuid() Behavior 
Privileged OS 
Notes 
Yes 
General 
Real user ID, effective user ID, and saved set-user-ID are all 
set to the new value. 
No 
Linux 
Solaris 
You can specify the real user ID or the saved set-user-ID. The 
effective user ID is updated; works much like seteuid(). 
No 
OpenBSD You can specify the real user ID, the saved set-user-ID, or 
the effective user ID. If the specified value is equal to the the 
current effective user ID, the real user ID and saved 
set-user-ID are also updated. Otherwise, it works like 
seteuid(), just updating the effective user ID. 
No 
NetBSD 
You can specify only the real user ID. The real user ID, 
effective user ID, and saved set-user-ID are all set to the 
specified value. 
No 
FreeBSD 
You can specify the real user ID or the effective user ID. The 
real user ID, effective user ID, and saved set-user-ID are set 
to the specified value. 
If the process isn't running as the superuser, setuid() has a behavior that varies 
across different flavors of UNIX. UNIX variants fall into two basic camps. The first 
camp believes that setuid() should work just like seteuid() when dealing with 
nonsuperuser processes. Linux, Solaris, and OpenBSD fall roughly into this camp. The 
second camp says that setuid() should work in a fashion consistent with how it works 
for superuser programs, so it should drop all privileges if the user requests a setuid() 
to the real user ID. FreeBSD and NetBSD belong in this camp. 
Say the admin user runs a set-user-ID bin file: 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
489 
effective user ID - 1 - bin 
In Linux and Solaris, setuid() behaves exactly like seteuid() when the effective user 
ID isn't the superuser's. You can specify the real user ID or saved set-user-ID as the 
argument, and setuid() updates the process's effective user ID. So in the preceding 
case, the two potentially valid calls are setuid(1000) and setuid(1), both of which 
would change only the effective user ID. So if you use setuid(1000), the IDs would 
change as follows: 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
effective user ID - 1000 - admin 
If you then use setuid(1), you have this result: 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
effective user ID - 1 - bin 
OpenBSD allows you to use setuid() on the real user ID, the saved set-user-ID, or 
the effective user ID. Its behavior is a little different; if you use the current effective 
user ID as the argument, setuid() in OpenBSD sets all three IDs to that user ID. 
However, if you use setuid() to toggle between the saved set-user-ID and effective 
user ID, as you would in Linux or Solaris, the function behaves like seteuid(). The 
basic idea is that if you repeat the setuid() call, you can make the permission change 
permanent. For example, say you have this set of IDs : 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
effective user ID - 1 - bin 
If you use setuid(1), you effectively assume the bin user's identity, and all three IDs 
are changed to 1. If you use setuid(1000), however, you toggle your effective user ID, 
and the result is as follows: 
real user ID - 1000 - admin 
saved set-user-ID - 1 - bin 
effective user ID - 1000 - admin 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
490 
From here, you could use another setuid(1000) and cause the program to fully 
assume the admin user's identity, or you could toggle back to bin by using setuid(1). 
FreeBSD allows you to use setuid() on the real user ID or effective user ID, and the 
result causes all three user IDs to be set. So in the preceding example, you could use 
setuid(1000) to set all three IDs to 1000, or you could use setuid(1) to set all three 
IDs to 1. FreeBSD always lets you fully drop privileges back to the real user ID. 
However, it also lets you use setuid() to confirm your current effective user ID and 
have it become your new user ID across all three IDs. 
NetBSD allows you to use setuid() only with the real user ID, and the result causes 
all three user IDs to be set. In essence, the NetBSD version of setuid() allows only a 
nonsuperuser process to fully drop privileges back to the real user ID. So in the 
preceding example, if you use a setuid(1000), you would end up with all three IDs 
being 1000. 
All these details are great, but what's the bottom line for auditing code that uses 
setuid()? Basically, if the program has an effective user ID of 0, and the developer is 
using it to fully drop user privileges, everything is probably fine. If the program 
doesn't have an effective user ID of 0, setuid() is probably the wrong function for 
trying to manipulate privileges. If developers try to rely on it to fully drop privileges, 
they are burned by the saved set-user-IDs persisting in Linux, OpenBSD, and Solaris. 
If they try to rely on it just to change the effective user ID, they inadvertently throw 
away credentials in FreeBSD and NetBSD. 
The setresuid() Function 
The setresuid() function is used to explicitly set the real, effective, and saver 
set-user-IDs. This function has the following prototype: 
int setresuid(uid_t ruid, uid_t euid, uid_t suid); 
The ruid, euid, and suid parameters indicate new values for the real user ID, effective 
user ID, and saved set-user-ID attributes respectively. The caller can place a -1 in 
any of the arguments, and the kernel fills in the current value of the corresponding 
UID. Superusers can set the IDs to any value they want. A nonsuperuser process can 
set any of the IDs to the value of any of the three current IDs. This function has clear 
semantics and is implemented the same way across the UNIX variants that provide it. 
It's currently available on Linux, FreeBSD, HPUX, and newer versions of OpenBSD. 
This is summarized in Table 9-3. 
Table 9-3. Setresuid() Behavior 
Privileged OS 
Notes 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
491 
Table 9-3. Setresuid() Behavior 
Privileged OS 
Notes 
Yes 
Linux 
FreeBSD 
HPUX 
OpenBSD 3.3 
and later. 
Real user ID, effective user ID, and saved set-user-ID 
are set to the specified values or filled in from current 
values 
No 
Linux 
FreeBSD 
HPUX 
OpenBSD3.3 
and later 
Any of the three values can be set to any of the current 
real user ID, effective user ID, or saved set-user-ID. 
Other values can be filled in by the kernel. 
The setreuid() Function 
The setreuid() function sets both the real user ID and effective user ID of a process. 
It works as shown: 
int setreuid(uid_t ruid, uid_t euid); 
The setreuid() takes a ruid parameter to indicate what the real userID should be set 
to, and an euid function to indicate what the effective user ID should be set to. If you 
provide an argument of -1 for ruid or euid, the function fills in the current value from 
the process. The semantics of this function are explored in Table 9-4. 
Table 9-4. Setreuid() Behavior 
Privileged OS 
Notes 
Yes 
NetBSD 
Real user ID and effective user ID can be set to arbitrary 
values. Saved set-user-ID is set to the effective user ID if 
the real user ID value is specified, even if it isn't changed. 
Yes 
FreeBSD 
Solaris 
Real user ID and effective user ID can be set to arbitrary 
values. Saved set-user-ID is set to the effective user ID if 
the real user ID is specified or the effective user ID doesn't 
equal the real user ID. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
492 
Table 9-4. Setreuid() Behavior 
Privileged OS 
Notes 
Yes 
Linux 
Real user ID and effective user ID can be set to arbitrary 
values. Saved set-user-ID is set to the effective user ID if 
the real user ID is specified or the effective user ID is 
specified and its new value doesn't equal the real user ID. 
Yes 
OpenBSD 
3.3 and 
later 
Real user ID and effective user ID can be set to arbitrary 
values. Saved set-user-ID is set to the effective user ID if 
the real user ID is specified and the real user ID is actually 
changed or the effective user ID doesn't equal the saved 
user ID. 
Yes 
OpenBSD 
before 3.3 
Effectively unsupported. Behavior is provided through 
compatibility lib with rather complex, nonconfirming 
behavior. 
No 
NetBSD 
Real user ID can be set to real user ID or effective user ID. 
Effective user ID can be set to real user ID, effective user 
ID, or saved set-user-ID. Saved set-user-ID is set to the 
effective user ID if the real user ID value is specified, even 
if it isn't changed. 
No 
FreeBSD 
Real user ID can be set to real user ID or saved user ID. 
Effective user ID can be set to real user ID, effective user 
ID, or saved set-user-ID. Saved set-user-ID is set to the 
effective user ID if the real user ID is specified or the 
effective user ID doesn't equal the real user ID. 
No 
Solaris 
Real user ID can be set to real user ID or effective user ID. 
Effective user ID can be set to real user ID, effective user 
ID, or saved set-user-ID. Saved set-user-ID is set to the 
effective user ID if the real user ID is specified or the 
effective user ID doesn't equal the real user ID. 
No 
Linux 
Real user ID can be set to real user ID or effective user ID. 
Effective user ID can be set to real user ID, effective user 
ID, or saved set-user-ID. Saved set-user-ID is set to the 
effective user ID if the real user ID is specified or the 
effective user ID is specified and its new value doesn't 
equal the real user ID. 
No 
OpenBSD 
3.3 and 