2.根据 Web 服务器的类型选择对应的服务端脚本并上传到 Web 服务器上，本例中则使用 JSP
脚本，上传到服务器后直接访问会出现如下界面，类似一串随机的英文 ＋ 数字，这就是服务端脚本对信息进行加密之后的结果，加解密方法具体可以参考
abptts.jsp 和 abpttsclient.py 中的代码。因为每次通过 abpttsfactory.py 产生的通信密钥是随机的，所以访问不同的
abptts.jsp 得到的字符串也都会不同。
3.看到上述字符串后可以确定服务端脚本正常工作，A 这时可以在本机运行
    python abttsclient.py -c tomcat_walkthrough/config.txt -u http://x.x.x.x:8080/abptts.jsp -f 127.0.0.1:22222/127.0.0.1:22
这里 －u 指定对应服务端脚本的 URL；－f 指定对应的映射关系，可以抽象为
LOCAL_NETWORK_IP:LOCAL_PORT/REMOTE_NETWORK_IP:REMOTE_PORT。－c
指定的对应服务端脚本的配置，config.txt 里包含 HTTP Tunnel 各项配置内容，格式如下：
    headerNameKey:::::::x-sourcing-unisex-extollingheaderValueKey:::::::6ivKbot3qLL4ATtoMWrS15T2pay5Q7bz/x3i8qA=encryptionKeyHex:::::::635587d56a6ecb687cc1b20f0aec4804.........
运行脚本后可以看到 HTTP Tunnel 已经打通，本地 22222 端口正在等待连接。
    [2016-08-10 11:24:53.318090] ---===[[[ A Black Path Toward The Sun ]]]===---[2016-08-10 11:24:53.318125]    --==[[       -  Client  -          ]]==--[2016-08-10 11:24:53.318131]             Ben Lincoln, NCC Group[2016-08-10 11:24:53.318137]            Version 1.0 - 2016-07-30[2016-08-10 11:24:53.319952] Listener ready to forward connections from 127.0.0.1:22222 to 127.0.0.1:22 via http://x.x.x.x:8080/abptts.jsp[2016-08-10 11:24:53.319978] Waiting for client connection to 127.0.0.1:22222
4\. 此时便可以直接通过 HTTP Tunnel 进行 TCP-Over-HTTP 通信，建立 SSH 连接如下。
    ssh root@127.0.0.1 -p 22222 -i ~/.ssh/xxx/id_rsa
运行脚本后可以看到 HTTP Tunnel 已经打通，本地 22222 端口正在等待连接。
**  
**
**Part Three － 讨论**
* * *
其实在 ABPTTS 出现之前就已经有不少类似且好用的工具，那么为什么还要重复造轮子呢？官方手册中指出，开发 ABPTTS 的主要目标有如下几个：
  * 让工具的部署需要尽可能的简单 － 在服务器上增加部分依赖或服务代码即可部署，或者更简单的，直接上传一个文件即可。
  * HTTP Tunnel 流量需要能够抵抗指纹检测 － HTTP Tunnel 中的流量需要看上去够 “随机”，每次转换后的 HTTP 流量中不能有特征字符。
  * 配置文件的生成需要尽可能的自动化 － 往往使用这类的软件，因为需要对转换后的 HTTP 流量进行加密，所以往往配置文件中需要配置各种各样的内容，如：AES 密钥、客户端 Token、伪造请求头等等，而且这些配置文件的内容往往是使用者并不真正关心的，也不会去对他们进行修改，所以配置文件需要可以自动生成。
  * HTTP Tunnel 流量需要进行加密 － 很多协议本身对传输的敏感数据不进行加密，如果不加密再流入 HTTP Tunnel 中那么很可能导致信息泄漏或者是指纹明显，ABPTTS 最后选择了对流量进行 AES－128 非对称方式进行加密。
  * 可以多个客户端共用一个 HTTP Tunnel 服务端 － 前文有说到往往为了进入复杂网络环境需要占用一整个窗口来进行交互操作，而这种情况下往往需要多个客户端窗口，在可以共用一个 HTTP Tunnel 服务端的情况下，减少了使用者需要进行的操作。
顺道一提，由于 HTTP Tunnel 确实不是一项新的技术之前也有类似成形的项目，使用的比较多的有 Tunna 和 HTTPTunnel
这两个，试着了解了一下这两个项目，下面做出一些对比：
[Tunna](https://github.com/SECFORCE/Tunna)
  * 优点：支持 aspx／jsp／php 三种类型的服务端脚本，部署方便；客户端脚本没有使用第三方库纯净 Python 可以运行。
  * 缺点：（太）容易掉线，连接不稳定，更不用说多客户端共用一个 Tunnel 服务端；对流量没有加密，很容易被 IDS／IPS／WAF 等检测到或者是泄漏敏感信息；没有配置文件；不能自定义 HTTP Tunnel 返回页面模版。
[HTTPTunnel](http://http-tunnel.sourceforge.net/)
  * 优点：可以多个 Client 共用一个 Server；配置简单，可以通过 Web GUI 进行配置；不仅支持 HTTP Tunnel 还支持 SOCKS4（5）；流量加密和压缩，提高传输效率；干扰检测。
  * 缺点：服务端只支持 Perl 、PHP，客户端只支持 Perl，条件比较苛刻；年代过于久远。
上述这两个项目均已经停止更新，Tunna 上次更新在两年前而 HTTPTunnel 上次更新是 2010 年。ABPTTS 项目在 Github
开源之后初步了解体验了一下，基本上述的内容基本都已经实现，下面也进行相对应的总结。
[ABPTTS](https://github.com/nccgroup/abptts)
  * 优点：目前是最新的，特征暂时没有进入各大杀软的指纹库，并且会持续更新；配置简单，会自动根据当前项目生成配置文件；服务端支持或将会支持大部分主流语言的脚本文件和部署包（ASPX／JSP／WAR／PHP／RoR／Node.js／）；流量加密传输；多个 Client 可以共用一个 Server；可以自定义 HTTP Tunnel 的响应模版进行伪装，降低被识别的可能。
  * 缺点：配置文件修改时比较麻烦；暂不支持 PHP；客户端 Python 脚本使用了第三方库 httplib2 不能直接运行；连接有时仍然会存在不稳定的情况。
虽然 ABPTTS 在使用中仍有不足之处，但是相比之下已经有超越上述两个项目的实力，另外看了一眼他的 TODO 还是很有意思的，想深入了解的话可以在
ABPTTS 的 Git [文档](https://github.com/nccgroup/ABPTTS/blob/master/ABPTTS-Manual.pdf)查看。
* * *
文中内容如有错误，敬请斧正，欢迎交流。
最后YSRC送个福利，关注“同程安全应急响应中心”公众号，点击底部菜单，ISC含餐两日通票，仅售396元~