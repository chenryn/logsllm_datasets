the attack trafﬁc reaches the targeted link the attack ﬂows will be
aggregated together, causing congestion on that link. After the in-
tersection point trafﬁc takes different paths toward its ﬁnal destina-
tions, dispersing in an effort to not congest downstream links.
CXPST uses a straight-forward algorithm to automate attacker
assignment. Prior to allocating resources, our attacker builds two
ﬂow networks based on the traceroutes used to select targets. In
one network, bots are treated as sources and target links are treated
as sinks. In the other, target links are treated as sources and desti-
nation networks are treated as sinks. The attacker can either guess
the bandwidth of links involved or actively measure their capacity.
When selecting destinations for attack trafﬁc, the attacker runs a
max ﬂow algorithm on the ﬁrst ﬂow network, establishing which
bots will be used to attack each targeted link. Then the second ﬂow
network is then analyzed to determine which destination networks
attackers should address their trafﬁc to. Where possible bots will
attempt to send attack trafﬁc to IP address of other bots in the bot-
net as described by Sunder and Perrig in Coremelt [4]. In this way,
trafﬁc sent by the attacker is “wanted” and not reported.
3.4 Thwarting Defenses
There are some mechanisms that exist to reduce the effects of
route ﬂapping. Since CXPST is artiﬁcially induced route ﬂapping,
these defenses might impede it. These defenses though, were de-
signed to deal with random network events, not an adaptive adver-
sary. Two of the defenses, BGP Graceful Restart and Minimum
Route Advertisement Intervals, require no changes. Route Damp-
ing on the other hand requires some minimal changes to CXPST’s
behavior. During the course of the attack the bots will need to re-
move links that get damped from their target set. Bots notice that
links are being damped when the paths used to reach their targets
727F
D
C
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0.0
64k Nodes
125k Nodes
250k Nodes
500k Nodes
 0
 10
 20
 30
 40
 50
F
D
C
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0.0
64k Nodes
125k Nodes
250k Nodes
500k Nodes
 0
 1
 2
 3
 4
 5
 6
F
D
C
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0.0
64k Nodes
125k Nodes
250k Nodes
500k Nodes
 0
 2
 4
 6
 8
 10
Factors of normal load
1000’s of messages per 5-seconds
1000’s of messages per 5-seconds
(a)
(b)
(c)
Figure 1: Median router load of targeted routers under attack as a factor of normal load (a). Message loads experienced by routers
under attack, measured in BGP updates seen in 5-second windows: 75th percentile (b), and 90th percentile (c).
do not re-appear within a time window. New target links are then
chosen from the list of available targets.
4. SIMULATION
In order to answer these questions we built a discrete event driven
simulator modeling the dynamics of routers on the Internet. Given
the level of complexity found in the system that we were attempting
to model, this presented a challenge. Many diverse agents needed
to be represented including: ASes, routing polices, the routers them-
selves, the physical links that connect these routers, and the botnet
used by our attacker.
4.1 Simulation Methodology
Using inferred AS relationships from CAIDA, we chose ASes
servicing other providers, i.e. all ASes who had at least one cus-
tomer that itself had customers, and generated a graph modeling
the interconnection of these ASes. The result was a connected
graph with 1,829 ASes and nearly 13,000 edges. Since we are more
concerned with the dynamics of trafﬁc passing between ASes than
trafﬁc moving inside an AS, we modeled an AS as a single BGP
speaker with a link connecting it to each AS its host AS has a rela-
tionships with. This simpliﬁcation is acceptable for experimenting
with CXPST as we focus on the behavior of trafﬁc at the network
edges, and are largely unconcerned with internal dynamics.
The bandwidth model for links in our simulator is meant to be
as disadvantageous to the attacker as possible. Link capacities are
based on the degrees of the connected ASes. Since we are con-
cerned about the ability to ﬁll core AS links we use OC-768 size
links, the largest link size currently in the SONET standard, for
those links. In the same spirit we connect all fringe ASes, where
the majority of the attacker’s resources reside, with OC-3 links. It is
important to mention that while the aggregate bandwidth between
two ASes may be much higher than a single OC-768 link, we are
only concerned with attacking single inter-AS links, meaning that
having to attack an OC-768 link is truly a worst case scenario.
We used the data set for the Waledac botnet [2] to build our
model of bot distributions. IP addresses of infected machines were
mapped to their parent ASes using the GeoIP database, providing a
rough count of infections per AS. We then uniformly scaled these
numbers up or down to achieve the botnet size desired. To ensure a
proper lower bound for attacker bandwidth, bots were given a basic
ADSL connections with an upload capacity capped at 1.0 Mbit/sec.
Bots were only given the ability to send network trafﬁc and perform
traceroutes. They were not given any additional information about
the network, such as link capacities or AS relationships.
4.2 Simulation Results
We ran our attack with botnets of 64, 125, 250, and 500 thousand
nodes. Targets were selected from the core routers in our topology,
the top 10% of ASes by degree. There are two reasons behind
this selection strategy: the sizes of these ASes would increase the
magnitude of control plane instability, and their expansive customer
base would increase the impact of the resulting data plane failures.
As mentioned in Section 2.2, large bursts of updates have a sig-
niﬁcant impact on the performance of the Internet. Simulations
show that CXPST successfully creates BGP update message bursts
throughout the duration of the attack. For example, during normal
operation the 90th percentile load is 182 messages per 5 seconds.
During CXPST, the 90th percentile load is dramatically increased
for the targeted routers, as seen in a CDF of their 90th percentile
In the case of the 250, 000-node attacker,
loads in Figure 1(c).
more than half of core routers are at or above an order of magni-
tude increase in load. These bursts of updates are not a few isolated
incidents. At the 75th percentile of update load, shown Figure 1(b),
we continue to see the same dramatic increases in processing load.
Moreover, these spikes are not the only effect of CXPST, an in-
crease in BGP update rate is felt throughout the attack. Figure 1(a)
shows the increase in the median load of routers during the attack.
In the case of the 250, 000-node botnet, the median load on nearly
half of the core routers increased by a factor of 20 or more. Even
using the 125, 000-node botnet results in 50% of routers’ median
loads increased by an order of magnitude or more. This increased
median load shows that routers will not have a chance to recover
from the previous bursts of updates.
Acknowledgments This work was supported by NSF grant 0917154.
We thank Adrian Perrig and Shubho Sen for helpful discussions
about this work.
5. REFERENCES
[1] N. W. Group. RFC4271 - A Border Gateway Protocol 4 (BGP-4).
http://tools.ietf.org/html/rfc4271, January 2006.
[2] G. Sinclair, C. Nunnery, and B. B. Kang. The Waledac protocol: The how and
why. In In proceeding the IEEE International Conference on Malicious and
Unwanted Software (MALWARE), pages 69–77, October 2009.
[3] K. Sriram, D. Montgomery, O. Borchert, O. Kim, and D. R. Kuhn. Study of BGP
peering session attacks and their impacts on routing performance. IEEE Journal
on Selected Areas in Communications, 24(10):1901–1915, 2006.
[4] A. Studer and A. Perrig. The Coremelt attack. In Proceedings of the European
Symposium on Research in Computer Security (ESORICS), Sept. 2009.
[5] F. Wang, Z. M. Mao, J. Wang, L. Gao, and R. Bush. A measurement study on the
impact of routing events on end-to-end Internet path performance. SIGCOMM
Comput. Commun. Rev., 36(4):375–386, 2006.
[6] Y. Zhang, Z. M. Mao, and J. Wang. Low-rate TCP-targeted DoS attack disrupts
Internet routing. In Proceedings of the Network and Distributed System Security
Symposium (NDSS), 2007.
728