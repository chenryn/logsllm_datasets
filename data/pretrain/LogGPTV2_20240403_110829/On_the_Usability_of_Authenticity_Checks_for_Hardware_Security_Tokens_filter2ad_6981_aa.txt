title:On the Usability of Authenticity Checks for Hardware Security Tokens
author:Katharina Pfeffer and
Alexandra Mai and
Adrian Dabrowski and
Matthias Gusenbauer and
Philipp Schindler and
Edgar R. Weippl and
Michael Franz and
Katharina Krombholz
On the Usability of Authenticity Checks for 
Hardware Security Tokens
Katharina Pfeffer and Alexandra Mai, SBA Research; Adrian Dabrowski, 
University of California, Irvine; Matthias Gusenbauer, Tokyo Institute of Technology 
& SBA Research; Philipp Schindler, SBA Research; Edgar Weippl, University of Vienna; 
Michael Franz, University of California, Irvine; Katharina Krombholz, 
CISPA Helmholtz Center for Information Security
https://www.usenix.org/conference/usenixsecurity21/presentation/pfeffer
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.On the Usability of Authenticity Checks for Hardware Security Tokens
Katharina Pfeffer
SBA Research
Alexandra Mai
SBA Research
Adrian Dabrowski
University of California, Irvine
Matthias Gusenbauer
Tokyo Institute of Technology & SBA Research
Philipp Schindler
SBA Research
Edgar Weippl
University of Vienna, Austria
Michael Franz
University of California, Irvine
Katharina Krombholz
CISPA Helmholtz Center for Information Security
Abstract
The ﬁnal responsibility to verify whether a newly purchased
hardware security token (HST) is authentic and unmodiﬁed
lies with the end user. However, recently reported attacks
on such tokens suggest that users cannot take the security
guarantees of their HSTs for granted, even despite widely
deployed authenticity checks. We present the ﬁrst comprehen-
sive market review evaluating the effectiveness and usability
of authenticity checks for the most commonly used HSTs.
Furthermore, we conducted a survey (n = 194) to examine
users’ perceptions and usage of these checks.
We found that due to a lack of transparency and informa-
tion, users often do not carry out—or even are not aware
of—essential checks but rely on less meaningful methods.
Moreover, our results conﬁrm that currently deployed authen-
ticity checks suffer from improperly perceived effectiveness
and cannot mitigate all variants of distribution attacks. Further-
more, some authenticity concepts of different manufacturers
contradict each other. In order to address these challenges, we
suggest (i) a combination of conventional and novel authen-
ticity checks, and (ii) a user-centered, transparent design.
1 Introduction
Due to an abundance of reported malware and CPU vulner-
abilities [32, 46, 76, 85, 117], the establishment of trust has
in recent years shifted from general-purpose computers to
specialized single-application devices, i.e., hardware security
tokens (HSTs). HSTs (e.g., Two-Factor Authentication (2FA)
tokens or cryptocurrency hardware wallets) promise to keep
the stored secrets secure, even if attackers control the client
computer. Consequently, these tokens have experienced an
enormous market growth during the last decade [72, 73]; all
major browsers and many large service providers now support
2FA tokens [110]. Similarly, in the cryptocurrency ecosys-
tem, hardware wallets are considered the most secure way to
manage keys and sign transactions.
However, known attacks using modiﬁed, replaced, or coun-
terfeit tokens [60, 75, 86, 95, 109] raise the questions whether
this shift of trust is justiﬁed and how users may verify the
authenticity of their HSTs. In the context of this paper, au-
thenticity checks are deﬁned as (i) conventional attestation1
methods, and (ii) haptic and visual inspection of the packag-
ing, casings, and electronics.
Despite extensive research focusing on authenticity checks
for computing devices [6, 27, 63, 70, 80, 99], little attention
has been paid to whether and how these checks can be ap-
plied to HSTs. For HSTs, no categorization of authenticity
checks concerning their effectiveness, efﬁciency, or usability
exists. As a result, HST manufacturers2 have no directives
or best practices available for designing and implementing
defenses. Although end users play a central role in judging
a token’s authenticity, no human-centered research has so
far been pursued in this area. It remains therefore unclear
how users can make sure that a token is genuine and/or has
not been manipulated. In particular, the following research
questions arise:
(RQ1) How effective are currently deployed authenticity
checks of HSTs in defending against possible attacks?
(RQ2) How do users perceive and use the provided authen-
ticity checks?
(RQ3) Which (combination of) authenticity checks can max-
imize security and usability?
To answer these questions, we contribute:
• A market review of authenticity checks deployed in
HSTs, yielding an evaluation framework for comparing
their effectiveness and usability.
• A quantitative survey (n = 194) to understand users’ per-
ception, awareness, and usage of the investigated authen-
ticity checks as well as related trust decisions.
• Actionable recommendations pointing out directions for
the best (combination of) authenticity checks.
In this paper, we assessed (i) cryptocurrency hardware wal-
lets, as they are high-value targets, and (ii) Universal Second
1Attestation proves that no unwarranted modiﬁcations to the software or
hardware took place [13].
2Companies that (mostly) perform the ﬁnal assembly as well as the de-
velopment, design, and advertisement of a product.
USENIX Association
30th USENIX Security Symposium    37
a keyboard [114]—or NFC.
In U2F mode, the user sends the password to the server
which replies with a challenge (see Figure 1); the user’s pres-
ence is veriﬁed by touching the YubiKey sensor. Then the
YubiKey utilizes a private key generated per-service to calcu-
late a response to the server’s challenge, i.e., a signature. The
browser never learns the private key and the YubiKey never
sees the user’s password, hence there is no single point of
trust. An application ID derived from the URI is included in
the signature to prevent phishing attacks.
3 Related Work
The usability challenges of HSTs and 2FA schemes have
been extensively studied. Bonneau et al. [10] showed that
most password-less web authentication methods, including
hardware tokens, outperform passwords regarding security
but are weaker concerning usability. Payne et al. [81] ex-
plored user perceptions of the Pico authentication token. They
found that tokens increase the user’s responsibility to mitigate
security risks, which is usually perceived as inconvenient.
More recently, Acemyan et al. [2] found severe usabil-
ity issues in Google 2FA features. Studies by Reynolds et
al. [87, 88] revealed usability issues in the set-up and usage
of U2F tokens in enterprise and non-enterprise settings. Das
et al. [18] conducted a study with YubiKey users, reporting
usability and trust issues as well as misconceptions about the
token’s beneﬁts. In two other user studies, Ciolino et al. [14]
conﬁrmed uncertainties about the security beneﬁts of 2FA to-
kens and identiﬁed usability issues of online services secured
with 2FA. Human-centered research in the domain of hard-
ware wallets mainly focused on the fact that humans usually
fail to manually compare long hashes [20, 42, 104], which is
required by most devices. So far, user perceptions of HST au-
thenticity and related decisions regarding trust—as presented
in this paper—have not been examined.
In order to prevent and detect supply-chain tampering
of software and hardware [7, 17], various attestation ap-
proaches have been suggested. Software attestation [6, 63,
99, 101] aims at validating the authenticity of code by ver-
ifying software modules (e.g., calculating a hash or MAC).
Hardware attestation aims to ensure the authenticity of hard-
ware components. Approaches range from (i) dedicated hard-
ware designs (e.g., tamper-proof environments for isolation
of security-critical functionality [66], single-piece or open-
able enclosures [36], tamper-evident seals [48]) to (ii) sensors
that detect suspicious behavior [31, 39, 62] to (iii) hardware
metering [52, 53] (e.g., using PUFs [38, 44, 91] or IC ﬁnger-
printing [3]).
However, each of these approaches poses different chal-
lenges [5]. Hence, solutions must be found that combine sev-
eral methods and are tailored to each use case and threat
model. We discuss which of these approaches are currently
implemented by popular HSTs and evaluate how effective they
Figure 1: Simpliﬁed U2F/HW-Wallet Authentication Models
Factor (U2F) tokens which are widely used for 2FA. We focus
on attacks which take place during the distribution process,
consequently deﬁning them as distribution attacks. Many of
these attacks can be carried out with no technical expertise,
in a reasonable time, and with low ﬁnancial cost.
2 Hardware Security Tokens (HSTs)
The main purpose of HSTs is to securely store cryptographic
keys. Depending on the application context, the tokens can
carry out different operations, such as proving a user’s identity
or signing a cryptocurrency transaction.
2.1 Hardware Wallets
Hardware wallets are used to store the user’s private key in
tamper-resistant storage and to sign transactions. For this
purpose, they communicate with a PC via USB (or alterna-
tively, NFC or Bluetooth), as shown in Figure 1. A dedicated
client software constructs transactions and sends them to the
hardware device for signing. The device signs after explicit
and successful user approval (e.g., PIN or hash comparison).
When used for the ﬁrst time, the device generates a seed for
deterministic private keys, which never leaves the wallet [33].
Hardware wallets fully control the secrets for signing. They
have access to the complete transactions including sender and
receiver address, an optional change address, and the payment
amount. The increased usage of hardware wallets makes them
a valuable attack target.
2.2 U2F Tokens
Currently, the most popular U2F tokens are the YubiKeys (cf.
the corresponding media and industry attention [37, 50] and
Google trend analysis [34]). YubiKeys provide multi-factor
and password-less authentication for logins. They currently
support, amongst others, the following protocols: (i) Univer-
sal 2nd Factor (U2F/FIDO2), (ii) one-time password (OTP),
(iii) Smart card, and (iv) PGP. In this paper, we focus on
YubiKey’s U2F functionality.
The tokens are shipped with a pre-conﬁgured public/private
identity and an AES key which serves as the master secret
for deriving subsequent authentication keys. Users may also
generate their own keys. The initialized YubiKey communi-
cates with the computer via USB [26]—including mimicking
38    30th USENIX Security Symposium
USENIX Association
2. PIN3. signed transactionblockchain1. transaction1. password2. challenge, URIserver3. signatureU2FHW-Walletare against real-world attack vectors (see Section 4.1). Dauter-
man et al. [19] introduced a two-party key and signature gen-
eration protocol as a (partial) solution to defend against faulty
or backdoored tokens. We discuss their scheme in Section 7.4.
While previous research mainly focused on a theoretic evalua-
tion of individual attestation methods, our work assesses these
methods’ usability for HSTs operated by average end users.
4 Threat Model
The attackers’ aim is to exﬁltrate or pre-load secrets stored
on the HST (i.e., keys or cryptographic seeds), interrupt its
availability, or ask for ransom [12]. Attackers can replace
or modify HSTs anywhere and anytime between the token
leaving the manufacturer and arriving at the end user. This
includes building fraudulent HSTs and selling them directly
to end users, inserting them into the re-seller hierarchy, or
intercepting and replacing shipments during delivery. An at-
tacker might also buy a genuine token and return a tampered
one to the vendor, who usually does not check the returned de-
vices before redistribution [43]. We deﬁne this set of attacks
as distribution attacks.
Attacks performed after the initialization of a hardware
device such as Man-in-the-middle and phishing attacks are
out of this work’s scope. We assume token manufacturers
and designers to be trustworthy, meaning that they are not
altering hardware or ﬁrmware. Still, fraudulent manufacturers
or parties that (re-)sell counterfeit tokens do exist. We include
nation-state attackers if they modify or replace HSTs on their
route from the manufacturer to the end user. Finally, for au-
thenticity checks involving the client software, we assume
that this software is not compromised.
Generally, attacks can be aimed at one or more speciﬁc
targets (targeted attacks) or at multiple unspeciﬁc targets
(large-scale attacks). Targeted attacks concern U2F token
users (e.g., campaign teams, activists, journalists, IT admin-
istrators) and individual hardware wallet users holding high
amounts of cryptocurrencies. In contrast, large-scale attacks
mainly affect hardware wallets due to the expected monetary
gain. Even though reported attacks on HSTs are still rare,
their relevance for HST users is justiﬁed given the ﬁnancial
and/or reputational losses. Also, talks and papers on the con-
struction of counterfeit tokens [60, 75] emphasize that HST
authenticity should be addressed before a larger number of
attacks can take place.
4.1 Attack Vectors
We conducted an extensive review of scientiﬁc literature, se-
curity conferences, and blog articles to understand the threat
landscape of HSTs. We then extracted attack vectors which
are categorized in software, hardware, and secret extraction.
We deﬁne attack vectors as ways or means by which attack-
ers can carry out attacks. Examples of attack scenarios are
described in Section 4.2. A visual mapping of attack vectors
and scenarios can be found in Table 1.
Although the attack vectors are the same for hardware wal-
lets and YubiKeys, the actual attack scenarios vary, since Yu-
biKeys and other U2F tokens—unlike hardware wallets—do
not present a single point of trust when used for 2FA. Here, the
key material alone is useless since the token never learns the
user’s password. However, if the token is used for single-factor
authentication, a counterfeit token that manages to exﬁltrate
or pre-load secrets can achieve authentication. Consequently,
using a U2F token without a supplementary factor increases
the probability of severe attacks being successful.
4.1.1 Software
Firmware modiﬁcations can be conducted by reverse-
engineering code, changing open-source software, or taking
advantage of ﬁrmware vulnerabilities. Alternatively, attack-
ers might exploit security risks of the USB interface (USB
exploits) [106] or pre-initialize tokens. Programmers, for
example, can conduct such attacks without any special addi-
tional knowledge [86, 98, 108, 109].
4.1.2 Hardware
Attackers can add and wire-up additional components to the
token—so-called hardware implants such as a GSM mod-
ule or Bluetooth transceiver. This aims at leaking secrets or
remotely controlling the tokens. Alternatively, Integrated Cir-
cuit (IC) modiﬁcation is possible to introduce vulnerabilities
or backdoors [8].
Lastly, attackers can build token replicas, which is feasible
for hardware wallets and YubiKeys [60, 75]. Instructions on
how to create HST replicas are publicly available and can
be implemented without any expert knowledge. If successful,
attackers gain full access to the design of the hardware and
ﬁrmware and may modify them to their own advantage.
4.1.3 Secret Extraction
Hardware and software attacks use various approaches to ex-
tract secrets from a token, e.g., keys or cryptographic seeds.
Most commonly, information can be derived from fault injec-
tions, timing side-channels (including transient execution
attacks (see Section 5.2.3), IC microprobing, or bus snoop-
ing [8]. Some of these attacks require expensive equipment
and in-depth knowledge. However, respective instructions are
publicly available and prices for the required equipment are
falling, thus facilitating secret extraction [43].
4.2 Attack Scenarios
Run-time seed or key exﬁltration (in-band): The attacker
replaces the HST and/or modiﬁes its ﬁrmware so that it leaks
secrets through in-protocol covert channels3 via the signa-
ture [23] or other parts of the transaction [11].
Run-time seed or key exﬁltration (out-of-band): The
attacker modiﬁes or replaces the HST’s software or hardware
so that it leaks secrets through covert channels outside the
3Covert channels [116] intentionally hide the communication between
two parties, whereas side channels unintentionally leak internal state.
USENIX Association
30th USENIX Security Symposium    39
protocol (e.g., using Bluetooth [60], Wi-Fi, GSM [75], or
USB exploits.
Delivery-time seed or key extraction: Through side chan-
nels, bus snooping, IC microprobing, or fault injection, the
attacker extracts pre-conﬁgured keys or seeds that allow key
determination [60, 78, 82]. This attack is relevant for Yu-
biKeys which are shipped with manufacturer-chosen seeds—
and as long as users do not program their own secrets later
on—but is infeasible for hardware wallets since customers
(should) initialize the tokens themselves.
Seed or key ﬁxation: Using hardware implants, token repli-
cation, or ﬁrmware modiﬁcation, the attacker pre-loads a key
to the token, makes the key computation deterministic, or
pre-initializes a hardware wallet and inserts a fake recovery
sheet [98].
Predictable RNG modiﬁcation: The attacker makes the
Random Number Generator predictable [68] by using hard-
ware implants, replicated HSTs, or IC/ﬁrmware modiﬁcations.
Alternatively, the attacker exploits unintentionally weak ran-
domness [113].
USB pivoting: The attacker uses the USB interface to infect
the computer with malware [106], trigger buffer overﬂows
in the client software, or emulate a keyboard similar to a
USB Rubber Ducky [71]. This can be used for attacks on
YubiKeys that require leaking information such as usernames
or passwords in addition to the key or seed.
Table 1: Evaluation Framework
Effectiveness (market review)
(cid:35) no prevention
(cid:32) strong protection
(cid:71)(cid:35) complicates attack/decreases usefulness
Attack Vector Usage in Scenarios
 potentially used
implants
replication
modiﬁcation
Hardware
Token
IC