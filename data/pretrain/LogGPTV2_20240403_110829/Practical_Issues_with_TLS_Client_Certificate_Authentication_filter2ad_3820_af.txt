did not support empty TLS record fragments (Oracle-AS,
danskebank.ee, nordea.ee) and TLS record fragmen-
tation (IIS 6.0), we appended the client’s Certificate
message with dummy certiﬁcates to enlarge the handshake and
sent TLS records split into 1 byte TCP packets, one per second.
9) Client Certiﬁcate Revocation Checking: The validity of
authentication certiﬁcates issued by SK can be checked using
CRLs, which are issued every 12 hours or by using the SK
paid validity service provided using OCSP.
To test whether the service provider performs revocation
checks for client certiﬁcates issued under both SK intermediate
CAs, we used two client certiﬁcates issued to one of the
authors of this study – ID card certiﬁcate issued by SK
intermediate CA ESTEID 2007 and Digi-ID4 certiﬁcate issued
by SK intermediate CA ESTEID 2011.
If access was denied immediately after the certiﬁcate was
revoked, we concluded that OCSP was being used. If the
access was denied only after the serial number of the revoked
certiﬁcate appeared on CRL, we concluded that CRL was
being used. If we could successfully authenticate even after
nextUpdate speciﬁed in the previous CRL was reached,
we concluded that no revocation checks had been performed
(marked as “–”).
For some service provider web sites we did not have an
account; therefore, we could not test whether the revocation
checks were performed at the application level after login. In
these cases the rows are marked with a question mark.
We observed a strange behavior in the case of the service
providers pensionikeskus.ee and emu.ee. When our
ID card certiﬁcate was revoked,
the access using Digi-ID
certiﬁcate was also denied by the service provider. We suspect
that these service providers use LDAP instead of OCSP for
certiﬁcate revocation checking. According to the ESTEID
Certiﬁcation Policy [38], the SK LDAP directory contains
4Estonian residents may also obtain a Digi-ID smart card. The only
difference to an ID card is that it cannot be used for physical identiﬁcation and
the organizationName attribute of subject DN in Digi-ID authentication
certiﬁcate contains “ESTEID (Digi-ID)” instead of “ESTEID”.
11
only valid unexpired certiﬁcates; therefore LDAP can be used
to check certiﬁcate status. However, these service providers
apparently use a ﬁxed organizationName ﬁeld in the
LDAP search query to check the existence of any ID card
authentication certiﬁcate in LDAP issued to the person, without
comparing the certiﬁcate in LDAP with the client certiﬁcate
received. In fact, it is likely that more service providers marked
“OCSP” use LDAP for revocation checking.
The use of LDAP for revocation checking in addition to CRL
and OCSP has a security advantage, since not only can the
serial number of the certiﬁcate be veriﬁed, but the whole cer-
tiﬁcate. This allows the detection of fraudulent certiﬁcates that
have been issued with the serial numbers of legitimate ones, as
seen in the DigiNotar compromise [28]. However, since the SK
LDAP trafﬁc is not cryptographically protected [39], it cannot
be trusted since an attacker might be able to perform a MITM
attack between the service provider and SK LDAP.
in the case of
When testing handshake timeout enforcement, we observed
that
the service providers apollo.ee,
energia.ee, laen.ee, osta.ee and tlu.ee the TCP
connection was closed shortly before the time speciﬁed in
nextUpdate of CRLs was reached. Apparently these service
providers use a non-graceful Apache restart after updating
CRLs.
10) Other Observations: We did not observe any service
provider using window.crypto.logout() to implement
CCA logout functionality.
The service provider seb.ee was the only one that, after
we logged out and tried to login, was able to detect that the
TLS CCA session established on the previous login was being
used. However, the service provider was still not able to clear
the TLS session on the server side and asked the user to restart
his browser in order to re-authenticate.
ehis.ee,
It was observed that TLS implementations of
the
service
g4s.ee,
hinnavaatlus.ee, iizi.ee, nordea.ee, ox.ee,
parkimine.ee, tbb.ee and ttu.ee did not support
the TLS renegotiation indication extension [37] that ﬁxes the
TLS renegotiation vulnerability (CVE-2009-3555).
elion.ee,
providers
V. OUR RECOMMENDATIONS
A. For Service Providers
are
no
in
For service providers deploying TLS CCA with the current
spare CA certiﬁcates
SSLCACertificateFile.
options available, we suggest they ensure that:
• There
the
• The CA certiﬁcates that are direct issuers of client cer-
tiﬁcates are speciﬁed in the SSLCADNRequestFile.
• Additional checks are performed at the application level
to verify that
the client certiﬁcate is issued by the
intermediate CA intended (at least the issuer name of
client certiﬁcate should be veriﬁed).
• The SSLVerifyDepth constraint is conﬁgured to the
• The SSLVerifyClient directive is speciﬁed in a
directory context
in order to perform TLS CCA on
renegotiation, thereby preserving the privacy of the client
certiﬁcate.
• An Apache module such as mod_reqtimeout is cor-
• Client certiﬁcate revocation checks are performed and if
LDAP is used, the full content of the client certiﬁcate is
compared to the one found in the LDAP directory.
rectly used to enforce the CCA handshake timeout.
minimal value required.
• To implement the CCA logout functionality, the Firefox
speciﬁc window.crypto.logout() function and
the Chrome workaround described in Section III-I are
used.
• Until decent TLS CCA audit functionality is available in
mod_ssl, the cipher suites providing perfect forward
secrecy are disabled (unless forward secrecy is more
important than availability of an audit trail) and a packet
capture of TLS trafﬁc is saved.
• In the case of highly sensitive services the authenticated
session is bound to TLS CCA (although this has a
negative performance impact due to the mod_ssl bug
described in Section III-D).
Meanwhile, we encourage service providers all over the world
to implement a PKI-less TLS CCA option as described in
Section III-J.
B. For mod_ssl Developers
As a relatively simple improvement, the mod_ssl bugs [7],
[8] and [13] should be ﬁxed, and other undocumented issues
pointed out through this paper should be reﬂected in the ofﬁcial
mod_ssl documentation [5].
Next, we suggest a mod_ssl redesign that would provide
a ﬂexible yet simple and secure conﬁguration for most TLS
CCA use cases. We suggest three conﬁguration values for the
SSLVerifyClient conﬁguration directive:
• none - CCA is not required (current none behavior)
• require_success - require successful CCA or TLS
• require_any - optionally request any client certiﬁ-
The environment variable SSL_CLIENT_VERIFY_RESULT
should be set based on the veriﬁcation result – NONE,
SUCCESS or FAILED:reason (the veriﬁcation must fail on
the ﬁrst error to reduce DoS attack vectors).
handshake fails (current require behavior)
cate.
In addition, the certiﬁcate chain building process should
succeed when any certiﬁcate loaded in the trust store is
reached. This will allow enforcement of veriﬁcation using
a speciﬁc intermediate CA certiﬁcate and authorization of
speciﬁc client certiﬁcates by storing them directly in the trust
store.
The SSLVerifyClient value require_success is
useful for closed deployments where no HTTP requests should
be processed for unauthenticated clients. On the other hand, the
value require_any gives the opportunity for an application
to provide a personalized error message in the case of CCA
failure, and at the same time allows client certiﬁcates to be
used just as a transport for the public key whose authenticity
is established by an out-of-band mechanism (PKI-less CCA).
In order to enable TLS CCA re-authentication, we recom-
mend that a special response header (e.g., X-TLS-Reset) is
introduced, which, if set by a server-side application, would
force mod_ssl to delete an associated TLS session after
returning the response.
Finally, the application level should have access to both
the timestamp that speciﬁes the freshness of the proof given
in the TLS CCA process, and to the certiﬁcate chain used
in the veriﬁcation process. The logging of decrypted TLS
handshake messages as described in Section III-H should also
be implemented.
C. For Browser Vendors
The browser vendors analyzed in this study can relatively
easily improve the security and usability of TLS CCA by:
informs about
• Showing a warning message that
the
privacy leak if the client certiﬁcate is requested on initial
negotiation.
CCA handshake fails (applies to Firefox and IE).
• Clearing the cached client certiﬁcate choice if the TLS
• Using the Expect: 100-continue mechanism
• Making the client certiﬁcate used for the CCA to the
server on the previous occasion the default certiﬁcate
choice in the client certiﬁcate selection window.
when sending large HTTP POST requests over TLS.
A bigger challenge, however, is to standardize the JavaScript
API. This could be used separately to:
• delete the TLS session cache from the client side, thereby
providing support for client certiﬁcate re-authentication
in the background (as an alternative to the server-side
X-TLS-Reset mechanism proposed);
thereby providing TLS CCA logout functionality.
• forget client certiﬁcate choice cached by the browser,
In addition, we encourage extension of the HTTP Strict
Transport Security policy [34] mechanism with opt-in for
strong locked same-origin-policy.
VI. RELATED WORK
Ristic, in his SSL Labs research effort [40] sets out TLS
deployment best practices, gives a TLS server rating guide,
and performs an Internet TLS survey that analyzes TLS server
deployments on the Internet. However, his work does not cover
aspects of TLS CCA.
Hess et al. in [41] describe the TLS protocol-related limita-
tions of CCA. While the issues listed there can be a limitation
in speciﬁc use scenarios, they are not a stumbling block for
everyday TLS CCA use. Some limitations enumerated in that
study, such as client certiﬁcate disclosure, can be easily solved
by renegotiation as described in this paper.
Dietz et al. in their work [42] give a list of reasons why
TLS CCA does not work in today’s web. In our opinion, all
the issues listed there (with the exception of the portability
issue) could be solved if the recommendations provided in
this paper were implemented.
Fahl et al. in [43] and Georgiev et al. in [44] perform a
large-scale study researching how TLS server certiﬁcates are
veriﬁed in non-browser software. By contrast, we focus on how
certiﬁcate veriﬁcation is performed in server-side software to
authenticate a client.
VII. CONCLUSION
In this paper we have described several issues related to TLS
CCA use in practice and have provided a list of solutions that
can be implemented at an application level without requiring
changes to the TLS protocol. While this study has shown that
there is a room for improving TLS CCA implementations,
the Estonian example shows that the problem of establishing
a secure user identity on the Internet has a solution, and
more importantly the solution works in practice. We hope that
the suggestions for improvements provided in this paper ﬁnd
support in the respective communities, thereby leading to the
spread of TLS CCA use on a much larger scale.
12
ACKNOWLEDGEMENT
We would like to thank Dominique Unruh, Peter Gutmann,
Ivan Ristic, Tiit Pikma, Martin Paljak (CERT-EE) and the
anonymous reviewers for their feedback on this paper.
This research was supported by the European Regional
Development Fund through the Estonian Center of Excellence
in Computer Science, EXCS, Estonian National Electoral
Committee and Estonian Doctoral School in Information and
Communication Technology, IKTDK.
REFERENCES
[1] D. Wendlandt, D. G. Andersen, and A. Perrig, “Perspectives: improving
SSH-style host authentication with multi-path probing,” in USENIX
2008 Annual Technical Conference on Annual Technical Conference,
ser. ATC’08. Berkeley, CA, USA: USENIX Association, 2008, pp.
321–334.
[2] B. Laurie, A. Langley, and E. Kasper, “Certiﬁcate Transparency,” RFC
draft, Internet Engineering Task Force, Apr. 2013, http://tools.ietf.org/
html/draft-laurie-pki-sunlight-12.
[5]
[4]
[3] T. Dierks and C. Allen, “The TLS Protocol Version 1.0,” RFC 2246
(Proposed Standard), Internet Engineering Task Force, Jan. 1999, http:
//www.ietf.org/rfc/rfc2246.txt.
J. Salowey, H. Zhou, P. Eronen, and H. Tschofenig, “Transport Layer
Security (TLS) Session Resumption without Server-Side State,” RFC
5077 (Proposed Standard), Internet Engineering Task Force, Jan. 2008,
http://www.ietf.org/rfc/rfc5077.txt.
“Apache mod ssl module,” http://httpd.apache.org/docs/2.2/mod/mod
ssl.html.
“Bug 2768:
openssl.org/Ticket/Display.html?id=2768.
“Bug
SSL CLIENT VERIFY,”
bug.cgi?id=53193.
“Bug 45054: SSLVerifyClient optional no ca is broken,” https://issues.
apache.org/bugzilla/show bug.cgi?id=45054.
“OpenSSL Verify Operation,” Aug. 2013, http://www.openssl.org/docs/
apps/verify.html.
wrong
https://issues.apache.org/bugzilla/show
internal verify() hides errors from callbacks,” http://rt.
SSLVerifyClient
optional no ca
53193:
[6]
[7]
[8]
[9]
[10] AS Sertiﬁtseerimiskeskus, “Conﬁguring Apache web server to sup-
port ID-card certiﬁcates. v1.03,” http://www.id.ee/public/Conﬁguring
Apache web server to support ID.pdf.
[11] A. Langley, “Transport Layer Security (TLS) Encrypted Client Certiﬁ-
cates,” Internet Draft, Oct. 2011, http://tools.ietf.org/html/draft-agl-tls-
encryptedclientcerts-00.
[13]
[12] M. Ray, “Transport Layer Security (TLS) Encrypted Handshake Exten-
sion,” Internet Draft, May 2012, http://tools.ietf.org/html/draft-ray-tls-
encrypted-handshake-00.
“Bug 47055: SSLVerifyClient + Directory doesn’t use cache sessions,”
https://issues.apache.org/bugzilla/show bug.cgi?id=47055.
“ASN.1 Denial of Service Attacks (CVE-2006-2937, CVE-2006-
2940),” http://www.openssl.org/news/secadv 20060928.txt.
“Bug 12355: POST incompatible with renegotiate https: connection,”
https://issues.apache.org/bugzilla/show bug.cgi?id=12355#c31.
“Bug 803673: Investigate using Expect: 100-continue for Metrics Data
Ping,” https://bugzilla.mozilla.org/show bug.cgi?id=803673.
[14]
[15]
[16]
[17] R. Hansen, “Slowloris - the low bandwidth, yet greedy and poisonous
HTTP client,” http://ha.ckers.org/slowloris/.
“Apache mod reqtimeout module,” http://httpd.apache.org/docs/2.2/
mod/mod reqtimeout.html.
[18]
[19] The Debian Project, “Apache module mod reqtimeout default conﬁg-
uration ﬁle. Version 2.2.22-13.” http://sources.debian.net/data/main/a/
apache2/2.2.22-13/debian/conﬁg-dir/mods-available/reqtimeout.conf.
[20] R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, and J.-K.
Tsay, “Efﬁcient Padding Oracle Attacks on Cryptographic Hardware,”
INRIA, Rapport de recherche RR-7944, Apr. 2012. [Online]. Available:
http://hal.inria.fr/hal-00691958
[21] Mozilla, “Personal Security Manager: Client certiﬁcate prompt,” Oct.
2011, https://wiki.mozilla.org/PSM:CertPrompt.
13
[22]
“Issue 90454: Feature: Add the ability to purge the SSL session
cache for a browsing session,” http://code.google.com/p/chromium/
issues/detail?id=90454.
[23] Mozilla, “JavaScript crypto object,” Jan. 2012, https://developer.mozilla.
org/en/docs/JavaScript crypto.
“Issue 90676: window.crypto.logout() and login() don’t work,” http://
code.google.com/p/chromium/issues/detail?id=90676.
[24]
[25] E. Lawrence, “Understanding Session Lifetime,” http://blogs.msdn.
com/b/ieinternals/archive/2010/04/05/understanding-browser-session-
lifetime.aspx.
“Issue 29784: User Interface Improvement for Client Certiﬁcate Usage,”
http://code.google.com/p/chromium/issues/detail?id=29784.
[26]
[27] A. C. Magencio, “How to create a certiﬁcate request with CertEnroll,”
Jan. 2009, http://blogs.msdn.com/b/alejacma/archive/2009/01/28/how-
to-create-a-certiﬁcate-request-with-certenroll-javascript.aspx.
[28] Fox-IT BV, “Report of the investigation into the DigiNotar Certiﬁcate
Authority breach,” Aug. 2012, http://www.rijksoverheid.nl/documenten-
en-publicaties/rapporten/2012/08/13/black-tulip-update.html.
[29] Comodo, “Report of Incident,” Mar. 2011, https://www.comodo.com/
Comodo-Fraud-Incident-2011-03-23.html.
[30] Trustwave, “Clarifying The Trustwave CA Policy Update,” Feb. 2012,
http://blog.spiderlabs.com/2012/02/clarifying-the-trustwave-ca-policy-
update.html.
[31] TURKTRUST, “Public announcements concerning the security ad-
visory,” Feb. 2013, http://turktrust.com.tr/en/kamuoyu-aciklamasi-en.
html.
[32] M. Zalewski, The Tangled Web: A Guide to Securing Modern Web
Applications, 1st ed. San Francisco, CA, USA: No Starch Press, 2011.
[33] C. Karlof, U. Shankar, J. D. Tygar, and D. Wagner, “Dynamic pharming
attacks and locked same-origin policies for web browsers,” in Proceed-
ings of the 14th ACM conference on Computer and communications
security, ser. CCS ’07. New York, NY, USA: ACM, 2007, pp. 58–71.
J. Hodges, C. Jackson, and A. Barth, “HTTP Strict Transport Security
(HSTS),” RFC 6797 (Proposed Standard), Internet Engineering Task
Force, Nov. 2012, http://www.ietf.org/rfc/rfc6797.txt.
[34]
[35] A. Satirov and M. Zusman, “Breaking the security myths of
extended validation SSL certiﬁcates,” 2009, http://www.blackhat.
com/presentations/bh-usa-09/ZUSMAN/BHUSA09-Zusman-
AttackExtSSL-SLIDES.pdf.
[36] C. Jackson and A. Barth, “Beware of Finer-Grained Origins,” in In
Web 2.0 Security and Privacy (W2SP 2008), 2008. [Online]. Available:
http://seclab.stanford.edu/websec/origins/fgo.pdf
[37] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov, “Transport Layer
Security (TLS) Renegotiation Indication Extension,” RFC 5746 (Pro-
posed Standard), Internet Engineering Task Force, Feb. 2010, http:
//tools.ietf.org/html/rfc5746.
[38] AS Sertiﬁtseerimiskeskus, “ESTEID Card Certiﬁcation Policy, Version
3.3,” https://sk.ee/upload/ﬁles/SK-CP-ESTEID-20120901v3 3 en.pdf.
[39] AS Sertiﬁtseerimiskeskus, “LDAP ldap.sk.ee technical description.”
Nov. 2013, https://sk.ee/en/repository/ldap/ldap-kataloogi-kasutamine/.
I. Ristic, “SSL Labs Projects,” https://www.ssllabs.com/projects/index.
html.
[40]
[41] A. Hess, J. Jacobson, H. Mills, R. Wamsley, K. E. Seamons, and
B. Smith, “Advanced Client/Server Authentication in TLS,” in Pro-
ceedings of the Network and Distributed System Security Symposium
(NDSS), 2002.
[42] M. Dietz, A. Czeskis, D. Balfanz, and D. S. Wallach, “Origin-bound
certiﬁcates: a fresh approach to strong client authentication for the web,”
in Proceedings of the 21st USENIX conference on Security symposium,
2012, pp. 16–16.
[43] S. Fahl, M. Harbach, T. Muders, L. Baumg¨artner, B. Freisleben, and
M. Smith, “Why Eve and Mallory Love Android: An Analysis of
Android SSL (in)Security,” in Proceedings of the 2012 ACM Conference
on Computer and Communications Security, 2012, pp. 50–61.
[44] M. Georgiev, S.
Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov, “The most dangerous code in the world: validating SSL
certiﬁcates in non-browser software,” in Proceedings of the 2012 ACM
Conference on Computer and Communications Security, 2012, pp. 38–
49.