title:POSTER: Locally Virtualized Environment for Mitigating Ransomware
Threat
author:Manish Shukla and
Sutapa Mondal and
Sachin Lodha
POSTER: Locally Virtualized Environment for Mitigating
Ransomware Threat
Manish Shukla
TCS Research
Pune, India
PI:EMAIL
Sutapa Mondal
TCS Research
Pune, India
PI:EMAIL
Sachin Lodha
TCS Research
Pune, India
PI:EMAIL
ABSTRACT
Ransomware is one of the rising malwares in the crimeware
family.
It encrypts the user ﬁles and demands extortion
money. From the perspective of an enterprise it is very cru-
cial to detect and stop a ransomware attack. A well studied
technique is to monitor ﬁle system behavior for suspicious
activity. In this work we will show the gap in the existing
state of art and describe a dynamic system which learns new
behavior while under attack.
Keywords
Ransomware; Malware Analysis; Behavior Modeling
1. MOTIVATION & RELATED WORK
Ransomware is one of the most discussed malwares in the
present time. According to Symantec [1], it is a danger-
ous cyberthreat to individuals and organizations alike. The
losses due to it are running in multi-million US dollars. Till
now most of the reported attacks were on individual users
or small businesses due to lack of security hygiene, though
recently some hospitals [2] were also aﬀected. As per[1] IoT,
health care sector and big businesses will be the next big tar-
gets as they provide volume, easy access and potential high
proﬁt. From the perspective of an enterprise it is a serious
threat as this might result in loss of intellectual property or
money or reputation or combination of them.
The ﬁrst documented ransomware using symmetric key
cryptography appeared in 1989.
In 1996, Young et.al.[3]
discussed its ineﬀectiveness and presented the idea of us-
ing public key cryptography for such attacks. The current
generation of ransomware uses combination of symmetric
and public key cryptography for taking control of user ﬁles.
Newer and better strains of the ransomware are emerging
due to its success with respect to development, deployment
and returns. The latest such trend is to oﬀer Ransomware-
as-a-Service wherein skilled developers write the malware
and oﬀer it as a service. This is a concerning issue as it low-
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’16 October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4139-4/16/10.
DOI: http://dx.doi.org/10.1145/2976749.2989051
ers the skillset needed for mounting an attack and introduces
a human agent for more eﬀective distribution.
However there are some technical challenges when it comes
to mitigation of ransomware threat. First, the attack de-
tection itself is diﬃcult owing to indistinguishibility of the
malicious process from a normal application. Secondly, the
culprit identiﬁcation is tricky as the malicious component
might be a single process or it could have been injected
into a trusted process or spread across multiple processes.
Over the past few years many solutions were proposed to
detect ransomware. Some existing techniques consist of sig-
nature based pattern detection, static code analysis of bina-
ries and runtime analysis of process behavior. Unfortunately
these methods tend to fail for newer variants with signﬁcant
changes as discussed in [4, 5, 6].
A more resilient technique is based on detecting behavioral
traits of the malware. The method is speciﬁcally powerful
as it abstracts the behavior from actual binary structure.
Kharraz et.al.[7] have ﬁrst proposed to use the sequence
and types of I/O Request Packets(IRP) to the ﬁle system
for detecting an ongoing attack. They extended their work
in [5] to include an entropy based indicator for diﬀerentiat-
ing between normal and malicious process. A similar work
is presented by Scaife et.al.[4] wherein they discussed few
additional indicators for such diﬀerentiation. Even though
their method is more general than the previous techniques
[7, 5], it has some weak underlying assumptions. Table 1
shows the behavioral traits in the existing literature.
Comments
Features
Shannon Entropy E∆ = EW rite − ERead [4, 5]
Mime
Change of mime type [4]
Similarity Change Fuzzy Hash{orig,f inal} [4]
[4]
Rate of Deletion Secondary indicator
IRP Sequence
[5, 7]
Order of events
Used In
Table 1: Existing Behavioral Traits
This work is an extension of the work done by Shukla et.al
[8] on ﬁle system event analytics. Here we ﬁrst discuss the
gap in the existing behavior based ransomware detection so-
lutions. Following that, we discuss our distributed solution
and its components.
2. NEW BEHAVIORS
To show gap in the existing state of art we developed
multiple new strains of ransomware with various diﬀerent
1784behavioral traits. For focused discussion we are assuming
that ransomware is downloaded and running.
Zero Replacement: In this variant we read the original
ﬁle and write it in a separate SQLite database. Once done
we encrypt the database and delete the original ﬁles. As
it does not create intermediate ﬁles and does not replace
the original ﬁle with encrypted content, therefore, [7, 4, 5]
overlook this attack.
(cid:46) Random path
(content, metadata) := read ﬁle
write content & metadata in sqlite database
create a sqlite database
ﬁles := enumerate all interesting ﬁles on volume
for ﬁle in ﬁles do
Strain 1 Zero Replacement Behavior
1: procedure RansomwareMain(void)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: end procedure
end for
encrypt sqlite database
// Delete after encrypting. Reduces suspicion.
for ﬁle in ﬁles do
delete ﬁle
end for
Friends in Deed: It creates multiple processes consist-
ing of reader, writer and remover. The reader process can
choose to handle only similar set of ﬁles. Once active, the
malware was able to bypass funneling ﬁlters as mentioned
in [4] and IRP sequencing as used in [7, 5] as diﬀerent stages
were delegated to diﬀerent processes. Also, this behavior
discourages any per process entropy change detection.
end for
(content, metadata) := read ﬁle
pass content & metadata to writer process
ﬁles := enumerate ﬁles based on extensions
for ﬁle in ﬁles do
Strain 2 Friends in Deed Behavior
1: procedure ReaderProcess(extensions)
2:
3:
4:
5:
6:
7: end procedure
8:
9: procedure WriterProcess(content, metadata)
10:
11:
12:
13: end procedure
14:
15: procedure RemoverProcess(ﬁles)
16:
17:
18:
19: end procedure
buﬀer := encrypt content & metadata
write buﬀer in random location
update path database
for ﬁle in ﬁles do
delete ﬁle
end for
(cid:46) db of path mapping
Ledger Manager: In this variant we are doing an addi-
tional high entropy read for every low entropy read, there-
fore, E∆ ≈ 0 in the following equation.
E∆ := EW rite − ERead
Both [4, 5], failed to detect this strain as [4] expect E∆ (cid:62) 0.1
and [5] expects writing on the same oﬀset.
high entropy ﬁle := create high entropy ﬁle
ﬁles := enumerate all interesting ﬁles on volume
for ﬁle in ﬁles do
Strain 3 Ledger Manager Behavior
1: procedure RansomwareMain(void)
2: