Signature generation is quite efﬁcient and it costs an average 7.64ms to generate a BLS signature (1.5ms on
the map-to-point operation and 6.14ms on the scalar multiplication operation) and another 0.05ms to fold it
into the aggregate. Aggregation imposes little overhead on the overall time for Asig. Veriﬁcation cost is quite
7
Table 1. Notations.
M tP t(H1(·)) t map-to-point operations
SclM ultt
m(l) t scalar multiplications with modulus of size m and exponent of size l
SclAddt
m t scalar additions with modulus of size m
BM (t) t bilinear mappings
Hasht(l)(H(·)) t hash operations with input size of l
Table 2. Operation Cost in Terms of Cryptographic Operations.
Parameters
Aggregate Signature Size
Secret Key Size
Key Update Time
Cost Complexity
|p|
O(1)
|q|
O(1)
Hash(|q|)
O(1)
Aggregate Signing Time M tP 1 + Exp1|p|(|q|)
O(1)
+M ult1(|p|)
T ∗ |q|
BM (t + 1)+
+M ultk∗t−1(|p|)
Aggregate Verifying Time
Public Key Size
Table 3. Operation Cost in msecs.
BLS Sign
Asig 1 signature M tP 1 SclM ul1
6.14
1.5
p(q)
1 signature
Aver k=1000, t=1
k=100, t=10
k=10, t=100
53.62
54.40
295.71
2708.79
Aggregation
SclAdd1
p
0.05
O(T )
O(t)
expensive because of the involvement of pairing operations. When the number of time periods increases to
100, it takes the veriﬁer more than 2 seconds to verify. The veriﬁcation cost might impose an upper ceiling
on the total number of time periods T .
B Security Model
The security of a FssAgg signature scheme is deﬁned as the nonexistence of an adversary, capable, within
the conﬁnes of a certain game, of existentially forging a FssAgg signature even in the event of exposure
of the current secret key. Because a FssAgg signature scheme combines security properties from both a
aggregate signature scheme and a forward-secure signature scheme, we describe a security model for it that
is a hybrid of the aggregate chosen key model for aggregate signatures [7, 17] and the break-in model for
forward-secure signatures [4].
This new security model reﬂects the way a FssAgg scheme is used. In this model, the adversary A
ﬁrst conducts an adaptive chosen message attack, requesting signatures on messages of its choice for as
many time periods as it desires. Whenever it chooses, it “breaks in” and is given the secret key skb for the
current time period b. Its goal is the existential forgery of a FssAgg signature pertaining to any past time
periods before the break-in time period. A forgery σ1,t over messages m1,··· , mt under keys ski,··· , skt
is considered as a valid forgery if at least one message mi (1 ≤ i ≤ t ≤ b) is not queried by A during the
chosen message attack phase. To make explanation easy, we set i = t and the attackers’s goal is to forge a
signature σ1,t such that mt is not queried in the chosen message attack phase. The advantage of A is deﬁned
to be its probability of success in the following game.
Setup. The FssAgg forger A is provided with the public key pk and T .
Queries. The initial time period is i = 1. Proceeding adaptively, at time period i, A gets access to a
signing oracle Oi under the current secret key ski. For each query, it also supplies a FssAgg signature
σi−1 on messages m1,··· , mi−1 signed by secret keys sk1,··· , ski−1, and an additional message mi
to be signed by the oracle under key ski. A queries this as often as it wants until it indicates it is done for
the current time period. Then A moves into the next time period i + 1 and it is provided with a signing
oracle Oi+1 under the secret key ski+1. The query process repeats until A chooses to break in.
Break − in. At time period b, A chooses to break in and is given the break-in privilege, the current secret
key skb.
8
Response. Finally, A outputs a FssAgg signature σ1,t on messages m1,··· , mt under keys sk1,··· , skt.
The forger wins if (1) t  t then B provides A
the secret information for that period (B knows it).
t under keys sk1,··· , skt(cid:48). B acts
(cid:54)= t, B aborts its run failing to forge. Otherwise if t(cid:48) = t, B outputs a forgery σt =
as follows. If t(cid:48)
i=1 σ−1
i where σi is a BLS signature over message mi under key ski, 1 ≤ i < t (B knows ski
Output. Finally A outputs a forgery σ1,t(cid:48) over messages m1,··· , m(cid:48)
σ1,t ·(cid:81)t
e(σt, g2) = e(σ1,t·t−1(cid:89)
and so it can generate σi). Then
t−1(cid:89)
t(cid:89)
t−1(cid:89)
σ−1
i
, g2) = e(σ1,t, g2)·e(
σ−1
i
, g2) =
e(hi, pki)·e(
i=1
i=1
i=1
i=1
9
σ−1
i
, g2) = e(ht, pkt)
(4)
That σ1,t is a valid FssAgg forgery means mt is not queried by A during time period t, so in particular
B did not ask for that signature from Ocpk. Hence σt is a valid forgery for B.
Algorithm B makes as many as hash queries as A makes. Algorithm B makes at most 1/T signature
queries as A makes. Algorithm B’s running time is that of A, plus the overhead in handling A’s hash and
signature queries.
If A succeeds with probability of  in forging, B succeeds at least with probability roughly /T . The
argument is outlined as follows. First, the view of A that B produces is computationally indistinguishable
from the view of A interacting with a real FssAgg signing oracle (where all secret keys are produced out
of a single initial seed from the forward-secure hash function H). Indeed, if a distinguisher exists for these
two views of A then, we can construct a distinguisher for H. Next, conditioned on B choosing the value of
t as the period for which A eventually output a forgery, we have the probability that B outputs a forgery
against the choosing public key pk is the same probability that A succeeds in forging, i.e., probability .
Since choosing the “right” t happens with probability 1/T we get that /T is an approximate lower bound
on the forging probability of B.
10