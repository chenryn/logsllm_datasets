### 优化后的文本

在代码清单 5-67 的第 15 行，代码试图创建一个未公开的 `alertCounter` 类型的值。然而，这会导致编译错误，因为 `counters.alertCounter` 是一个未公开的标识符，无法被 `listing64.go` 访问。

由于 `counters` 包中的 `alertCounter` 类型是使用小写字母声明的，因此它是未公开的，不能从外部包访问。如果将该类型改为大写字母开头，则不会产生编译错误。请参阅代码清单 5-68，其中展示了在 `counters` 包中实现工厂函数的新示例程序。

#### 代码清单 5-68: listing68/counters/counters.go
```go
// counters 包提供告警计数器的功能
package counters

// alertCounter 是一个未公开的类型，用于保存告警计数
type alertCounter int

// New 创建并返回一个未公开的 alertCounter 类型的值
func New(value int) alertCounter {
    return alertCounter(value)
}
```

#### 代码清单 5-68: listing68.go
```go
// 这个示例程序展示如何通过另一个包的公开工厂函数访问未公开类型的值
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing68/counters"
)

// main 是应用程序的入口
func main() {
    // 使用 counters 包公开的 New 函数来创建一个未公开类型的变量
    counter := counters.New(10)
    fmt.Printf("Counter: %d\n", counter)
}
```

在这个例子中，我们使用工厂函数来创建一个未公开的 `alertCounter` 类型的值。让我们先看一下 `counters` 包的代码（代码清单 5-69）。

#### 代码清单 5-69: counters/counters.go
```go
// counters 包提供告警计数器的功能
package counters

// alertCounter 是一个未公开的类型，用于保存告警计数
type alertCounter int

// New 创建并返回一个未公开的 alertCounter 类型的值
func New(value int) alertCounter {
    return alertCounter(value)
}
```

在代码清单 5-69 中，`alertCounter` 类型仍然是未公开的，但我们在第 10 行添加了一个名为 `New` 的新函数。这是 Go 语言中的常见做法。这个 `New` 函数创建了一个未公开类型的值，并将其返回给调用者。

接下来，我们来看一下 `listing68.go` 中的 `main` 函数（代码清单 5-70）。

#### 代码清单 5-70: listing68.go
```go
// main 是应用程序的入口
func main() {
    // 使用 counters 包公开的 New 函数来创建一个未公开类型的变量
    counter := counters.New(10)
    fmt.Printf("Counter: %d\n", counter)
}
```

在代码清单 5-70 的第 15 行，可以看到对 `counters` 包中 `New` 函数的调用。这个 `New` 函数返回的值被赋给一个名为 `counter` 的变量。程序可以成功编译和运行，原因有两点：首先，公开或未公开的标识符不是一个值；其次，短变量声明操作符能够捕获引用的类型并创建一个未公开类型的变量。虽然不能显式创建一个未公开类型的变量，但短变量声明操作符可以做到这一点。

现在，让我们看一个新例子，展示这些可见性规则如何影响结构体中的字段（代码清单 5-71）。

#### 代码清单 5-71: listing71/entities/entities.go
```go
// entities 包包含系统中与人有关的类型
package entities

// User 定义了一个用户类型
type User struct {
    Name  string
    email string
}
```

#### 代码清单 5-71: listing71.go
```go
// 这个示例程序展示公开的结构类型中未公开的字段无法直接访问
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing71/entities"
)

// main 是应用程序的入口
func main() {
    // 创建 entities 包中的 User 类型的值
    u := entities.User{
        Name:  "Bill",
        email: "PI:EMAIL", // 编译错误：未知字段 'email'
    }
    fmt.Printf("User: %v\n", u)
}
```

在代码清单 5-71 中，`entities` 包定义了一个名为 `User` 的结构类型（代码清单 5-72）。

#### 代码清单 5-72: entities/entities.go
```go
// entities 包包含系统中与人有关的类型
package entities

// User 定义了一个用户类型
type User struct {
    Name  string
    email string
}
```

在代码清单 5-72 的第 6 行，`User` 类型被声明为公开类型，包含两个字段：一个公开的 `Name` 字段和一个未公开的 `email` 字段。让我们看一下 `listing71.go` 的代码（代码清单 5-73）。

#### 代码清单 5-73: listing71.go
```go
// 这个示例程序展示公开的结构类型中未公开的字段无法直接访问
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing71/entities"
)

// main 是应用程序的入口
func main() {
    // 创建 entities 包中的 User 类型的值
    u := entities.User{
        Name:  "Bill",
        email: "PI:EMAIL", // 编译错误：未知字段 'email'
    }
    fmt.Printf("User: %v\n", u)
}
```

在代码清单 5-73 的第 8 行导入了 `entities` 包。在第 14 行声明了 `entities` 包中的公开类型 `User` 的变量 `u`，并对字段进行了初始化。但是，第 16 行的代码试图初始化未公开的 `email` 字段，因此编译器会报错。因为 `email` 标识符是未公开的，所以它不能在 `entities` 包外被访问。

最后，让我们看一个展示公开和未公开内嵌类型如何工作的例子（代码清单 5-74）。

#### 代码清单 5-74: listing74/entities/entities.go
```go
// entities 包包含系统中与人有关的类型
package entities

// user 定义了一个用户类型
type user struct {
    Name  string
    Email string
}

// Admin 定义了管理员类型
type Admin struct {
    user   // 嵌入的类型是未公开的
    Rights int
}
```

#### 代码清单 5-74: listing74.go
```go
// 这个示例程序展示如何在公开的结构类型中访问未公开的内嵌类型的字段
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing74/entities"
)

// main 是应用程序的入口
func main() {
    // 创建 entities 包中的 Admin 类型的值
    a := entities.Admin{
        Rights: 10,
    }

    // 设置未公开的内部类型的公开字段的值
    a.Name = "Bill"
    a.Email = "PI:EMAIL"

    fmt.Printf("User: %v\n", a)
}
```

在代码清单 5-74 中，`entities` 包包含两个结构类型（代码清单 5-75）。

#### 代码清单 5-75: entities/entities.go
```go
// entities 包包含系统中与人有关的类型
package entities

// user 定义了一个用户类型
type user struct {
    Name  string
    Email string
}

// Admin 定义了管理员类型
type Admin struct {
    user   // 嵌入的类型未公开
    Rights int
}
```

在代码清单 5-75 的第 6 行，声明了一个未公开的结构类型 `user`，包含两个公开的字段 `Name` 和 `Email`。在第 12 行，声明了一个公开的结构类型 `Admin`，包含一个公开的 `Rights` 字段，并嵌入了一个未公开的 `user` 类型。让我们看一下 `listing74.go` 的 `main` 函数（代码清单 5-76）。

#### 代码清单 5-76: listing74.go
```go
// main 是应用程序的入口
func main() {
    // 创建 entities 包中的 Admin 类型的值
    a := entities.Admin{
        Rights: 10,
    }

    // 设置未公开的内部类型的公开字段的值
    a.Name = "Bill"
    a.Email = "PI:EMAIL"

    fmt.Printf("User: %v\n", a)
}
```

在代码清单 5-76 的第 14 行，声明了 `entities` 包中的公开类型 `Admin` 的变量 `a`，并对 `Rights` 字段进行了初始化。然后，在第 20 行和第 21 行，设置了嵌入的未公开类型 `user` 的公开字段 `Name` 和 `Email` 的值。程序可以成功编译和运行，因为尽管 `user` 类型是未公开的，但其公开字段仍然可以通过 `Admin` 类型访问。