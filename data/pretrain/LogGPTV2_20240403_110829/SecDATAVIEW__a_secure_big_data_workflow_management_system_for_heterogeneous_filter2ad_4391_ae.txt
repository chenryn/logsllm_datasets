to call the SGX primitives in native C/C++ that helped it to maintain
a small size of TCB. SecureKeeper imposes 32.18% overhead on the
base ZooKeeper. Schuster et al. proposed VC3 [9] that works with
unmodified Hadoop and uses Intel SGX to protect Map-Reduce
code and job execution. In VC3, all Map-Reduce jobs run inside the
enclave with one executing thread (No multi-threading applied).
Additionally, all data traffic of intermediate Map-Reduce results
is kept encrypted during the job execution. VC3 results show a
performance overhead between 4.3% to 24.5% when the enclave
self-integrity checking mode is used. Pires et al. [46] proposed a
lightweight, secure Map-Reduce framework that leveraged Intel
SGX. Their system is integrated with a lightweight virtual machine
for Lua language [23], which is a high-level language that interprets
the Map-Reduce Lua scripts, and a Secure Content Based Routing
System (SCBR) [47], which is a secure publish/subscribe system
for the message passing and data distribution in the distributed
system between the client and worker nodes. In this system, three
main entities, client, SCBR, and worker nodes collaborate to exe-
cute a Map-Reduce workflow. All message routing as well as the
map and reduce Lua scripts execution happens inside the secure
enclave. The reported results showed up to 2x performance over-
head. Zheng et al. [61] proposed Opaque that enhanced the security
of the Spark SQL with SGX. One of the execution modes referred
to as the encryption mode provides the confidentiality protection
on the data and the results. In this mode, the Opaque’s code at the
client side is transferred to the enclave and with the help of Intel
attestation protocol, the code is verified and the secret keys are
distributed inside the enclave. Their experimental results show that
the Opaque’s encryption mode imposes 3.3x performance overhead
on the execution time. Moreover, Opaque uses the oblivious mode
and the oblivious pad mode to provide protection against the access
pattern leakage and the size leakage with the help of oblivious com-
putations. Opaque’s experimental results showed that the oblivious
mode imposes 1.60x to 46x overhead on the execution time.
6 CONCLUSIONS AND FUTURE WORK
In this paper, we present SecDATAVIEW, an efficient and secure big
data workflow management system that protects the confidentiality
and integrity of Java-written tasks and data in the workflow with
the help of SGX/SEV worker nodes. SecDATAVIEW significantly
reduces the TCB size of the worker node, and protects the Task Ex-
ecutor and individual workflow tasks by executing them inside the
SGX enclave or the SEV-protected instance. Our experiments with
different types of workflows show the usability of the system with a
low-performance overhead while securing the confidential task exe-
cution at SGX enclave/SEV instance runtime. We plan to investigate
the security issues of collaborative scientific workflows [41, 60] in
the future, in which multiple users design and execute a workflow
in the cloud collaboratively.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their insightful
comments that helped improve this paper. This work is supported
by National Science Foundation under grant NSF OAC-1738929.
REFERENCES
[1] [n.d.]. National institute of standards, national vulnerability database. https:
//nvd.nist.gov/.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
S. Mofrad et al.
[29] David Kaplan, Jeremy Powell, and Tom Woller. 2016. AMD memory encryption.
[2] Secunia Advisory. 2013. Xen pv kernel decompression multiple vulnerabilities.
[3] Ishtiaq Ahmed, Shiyong Lu, Changxin Bai, and Fahima Amin Bhuyan. 2018.
Diagnosis Recommendation using Machine Learning Scientific Workflows. In
Big Data Congress, 2018 IEEE International Conference on. IEEE.
[4] AMD. 2018. Secure Encrypted Virtualization API Version 0.16. https://support.
amd.com/en-us/search/tech-docs.
[5] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative
technology for CPU based attestation and sealing. In Proceedings of the 2nd
international workshop on hardware and architectural support for security and
privacy, Vol. 13.
[6] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’keeffe, and Mark L
Stillwell. 2016. SCONE: Secure Linux Containers with Intel SGX. In OSDI, Vol. 16.
689–703.
[7] Alessandro Barenghi, Luca Breveglieri, Israel Koren, and David Naccache. 2012.
Fault injection attacks on cryptographic devices: Theory, practice, and counter-
measures. Proc. IEEE 100, 11 (2012), 3056–3076.
[8] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. Shielding applications
from an untrusted cloud with haven. ACM Transactions on Computer Systems
(TOCS) 33, 3 (2015), 8.
[9] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. VC3: Trustworthy
data analytics in the cloud using SGX. In IEEE Symposium on Security and Privacy
(SP), 2015. IEEE, 38–54.
[10] Fahima Bhuyan, Shiyong Lu, Ishtiaq Ahmed, and Jia Zhang. 2017. Predicting
efficacy of therapeutic services for autism spectrum disorder using scientific
workflows. In 2017 IEEE International Conference on Big Data (Big Data). IEEE,
3847–3856.
[11] inc Black Duck Software. [n.d.]. Black Duck Open Hub. https://www.openhub.
net/p?query=xen&sort=relevance.
[12] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan
Capkun, and Ahmad-Reza Sadeghi. 2017. Software grand exposure: SGX cache
attacks are practical. arXiv preprint arXiv:1702.07521 (2017), 33.
[13] Stefan Brenner, Colin Wulf, David Goltzsche, Nico Weichbrodt, Matthias Lorenz,
Christof Fetzer, Peter Pietzuch, and Rüdiger Kapitza. 2016. SecureKeeper: Confi-
dential ZooKeeper using Intel SGX. In Middleware. 14.
[14] Sven Bugiel, Stefan Nürnberger, Thomas Pöppelmann, Ahmad-Reza Sadeghi, and
Thomas Schneider. 2011. AmazonIA: when elasticity snaps back. In Proceedings
of the 18th ACM conference on Computer and communications security. ACM,
389–400.
[15] Jon Crowcroft. 2018. Description of SGX-LKL by Peter Pietzuch - Imperial College
London. https://www.cl.cam.ac.uk/~jac22/talks/ox-strachey-6.3.2018.pptx.
[16] Jeffrey Dean and Sanjay Ghemawat. 2008. MapReduce: simplified data processing
on large clusters. Commun. ACM 51, 1 (2008), 107–113.
[17] Tien Tuan Anh Dinh, Prateek Saxena, Ee-Chien Chang, Beng Chin Ooi, and Chun-
wang Zhang. 2015. M2R: Enabling Stronger Privacy in MapReduce Computation..
In USENIX Security Symposium. 447–462.
[18] Paul DâĂŹAvilar, Jeremy DâĂŹErrico, Ken Berends, and Michael Peck. 2004.
Reading Guide 3: Authenticated Encryption. (2004).
[19] Xubo Fei and Shiyong Lu. 2010. A dataflow-based scientific workflow composition
framework. IEEE Transactions on Services Computing 5, 1 (2010), 45–58.
[20] Robert W Graves and Arben Pitarka. 2010. Broadband ground-motion simulation
using a hybrid approach. Bulletin of the Seismological Society of America 100, 5A
(2010), 2095–2123.
[21] Marcus Hähnel, Weidong Cui, and Marcus Peinado. 2017. High-resolution Side
Channels for Untrusted Operating Systems. In Proceedings of the 2017 USENIX
Conference on Usenix Annual Technical Conference (USENIX ATC ’17). USENIX
Association, Berkeley, CA, USA, 299–312. http://dl.acm.org/citation.cfm?id=
3154690.3154719
[22] Hajar Hamidian, Shiyong Lu, Satyendra Rana, Farshad Fotouhi, and Hamid
Soltanian-Zadeh. 2014. Adapting Medical Image Processing Tasks to a Scalable
Scientific Workflow System. In 2014 IEEE World Congress on Services. IEEE, 385–
392.
[23] Ashwin Hirschi. 2007. Traveling light, the Lua way. IEEE software 24, 5 (2007).
[24] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan
Del Cuvillo. 2013. Using innovative instructions to create trustworthy software
solutions.. In HASP@ ISCA. 11.
[25] Intel. 2018. Intel Software Guard Extensions SDK (EDL). https://software.intel.
com/en-us/sgx-sdk-dev-reference.
[26] Intel. 2019. Intel Software Guard Extensions SDK (ECALL-OCALL Functions).
https://software.intel.com/en-us/node/702973.
[27] Geetha Jagannathan and Rebecca N Wright. 2005. Privacy-preserving distributed
k-means clustering over arbitrarily partitioned data. In Proceedings of the eleventh
ACM SIGKDD international conference on Knowledge discovery in data mining.
ACM, 593–599.
[28] David Kaplan. 2016. AMD x86 Memory Encryption Technologies. USENIX
Association, Austin, TX.
White paper, Apr (2016).
[30] Kashlev et al. 2014. A system architecture for running big data workflows in the
cloud. In Proc. of the 2014 IEEE International Conference on Services Computing
(SCC). IEEE, 51–58.
[31] Andrey Kashlev and Shiyong Lu. 2014. A system architecture for running big
data workflows in the cloud. In Services Computing (SCC), 2014 IEEE International
Conference on. IEEE, 51–58.
[32] Andrey Kashlev and Shiyong Lu. 2014. A system architecture for running big
data workflows in the cloud. In Services Computing (SCC), 2014 IEEE International
Conference on. IEEE, 51–58.
[33] Andrey Kashlev, Shiyong Lu, and Aravind Mohan. 2017. Big Data Workflows: a
Reference Architecture and the DATAVIEW System. Services Transactions on Big
Data (STBD) 4, 1 (2017), 1–19.
[34] Kostya Kortchinsky. 2009. Cloudburst: A VMware guest to host escape story.
Black Hat USA (2009), 19.
[35] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus
Peinado. 2017.
Inferring fine-grained control flow inside SGX enclaves with
branch shadowing. In 26th USENIX Security Symposium, USENIX Security. 16–18.
[36] Cui Lin, Shiyong Lu, Xubo Fei, Artem Chebotko, Darshan Pai, Zhaoqiang Lai,
Farshad Fotouhi, and Jing Hua. 2009. A reference architecture for scientific
workflow management systems and the VIEW SOA solution. IEEE Transactions
on Services Computing 2, 1 (2009), 79–92.
[37] Xiao Liu, Dong Yuan, Gaofeng Zhang, Wenhao Li, Dahai Cao, Qiang He, Jinjun
Chen, and Yun Yang. 2011. The design of cloud workflow systems. Springer Science
& Business Media.
[38] LSDS. 2018. SGX-LKL,Remote Attestation. https://github.com/lsds/sgx-lkl/wiki/
Remote-Attestation-and-Remote-Control.
[39] LSDS. 2019.
The Allan Turing Institute SGX-LKL Library.
https:
//www.turing.ac.uk/research/publications/sgx-lkl-library-os-running-java-
applications-intel-sgx-enclaves.
[40] LSDS. 2019. LSDS SGX-LKL Library. https://github.com/lsds/sgx-lkl.
[41] Shiyong Lu and Jia Zhang. 2009. Collaborative scientific workflows. In 2009 IEEE
International Conference on Web Services. IEEE, 527–534.
[42] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi,
Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative instructions
and software model for isolated execution.. In HASP@ISCA. 10.
[43] Saeid Mofrad, Fengwei Zhang, Shiyong Lu, and Weidong Shi. 2018. A Comparison
Study of Intel SGX and AMD Memory Encryption Technology. In Proceedings
of the 7th International Workshop on Hardware and Architectural Support for
Security and Privacy (HASP ’18). ACM, New York, NY, USA, Article 9, 8 pages.
https://doi.org/10.1145/3214292.3214301
[44] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. Cachezoom:
How SGX amplifies the power of cache attacks. In International Conference on
Cryptographic Hardware and Embedded Systems. Springer, 69–90.
[45] Diego Perez-Botero, Jakub Szefer, and Ruby B Lee. 2013. Characterizing hy-
pervisor vulnerabilities in cloud computing servers. In Proceedings of the 2013
international workshop on Security in cloud computing. ACM, 3–10.
[46] Rafael Pires, Daniel Gavril, Pascal Felber, Emanuel Onica, and Marcelo Pasin.
2017. A lightweight MapReduce framework for secure processing with SGX. In
Cluster, Cloud and Grid Computing (CCGRID), 2017 17th IEEE/ACM International
Symposium on. IEEE, 1100–1107.
[47] Rafael Pires, Marcelo Pasin, Pascal Felber, and Christof Fetzer. 2016. Secure
content-based routing using Intel Software Guard Extensions. In Proceedings of
the 17th International Middleware Conference. ACM, 10.
[48] Jean-François Raymond. 2001. Traffic analysis: Protocols, attacks, design issues,
and open problems. In Designing Privacy Enhancing Technologies. Springer, 10–29.
[49] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009.
Hey, you, get off of my cloud: exploring information leakage in third-party
compute clouds. In Proceedings of the 16th ACM conference on Computer and
communications security. ACM, 199–212.
[50] Francisco Rocha and Miguel Correia. 2011. Lucy in the sky without diamonds:
Stealing confidential data in the cloud. In Dependable Systems and Networks
Workshops (DSN-W), 2011 IEEE/IFIP 41st International Conference on. IEEE, 129–
134.
[51] Phillip Rogaway. 2002. Authenticated-encryption with Associated-data. In Pro-
ceedings of the 9th ACM Conference on Computer and Communications Security
(CCS ’02). ACM, New York, NY, USA, 98–107. https://doi.org/10.1145/586110.
586125
[52] Bruce Schneier. 2007. Applied cryptography: protocols, algorithms, and source code
in C. john wiley & sons.
[53] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan
Mangard. 2017. Malware guard extension: Using SGX to conceal cache attacks. In
International Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment. Springer, 3–24.
[54] Cloud Research Security. 2018. SGX-LKL,SCONE,Graphene-SGX-Remote Attes-
tation status. https://github.com/lsds/sgx-lkl/issues/13.
SecDATAVIEW: A Secure Big Data Workflow Management System for Heterogeneous Computing Environments
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
[55] Chia-Che Tsai, Donald E Porter, and Mona Vij. 2017. Graphene-SGX: A practical
library OS for unmodified applications on SGX. In 2017 USENIX Annual Technical
Conference (USENIX ATC).
[56] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang,
Vincent Bindschaedler, Haixu Tang, and Carl A Gunter. 2017. Leaky cauldron
on the dark land: Understanding memory side-channel hazards in SGX. In Pro-
ceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2421–2434.
[57] Rafal Wojtczuk, Joanna Rutkowska, and Alexander Tereshkin. 2008. Xen 0wning
trilogy. Invisible Things Lab (2008).
[58] Yuan Xiao, Mengyuan Li, Sanchuan Chen, and Yinqian Zhang. 2017. Stacco:
Differentially analyzing side-channel traces for detecting SSL/TLS vulnerabilities
in secure enclaves. In Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security. ACM, 859–874.
[59] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-channel
attacks: Deterministic side channels for untrusted operating systems. In Security
and Privacy (SP), 2015 IEEE Symposium on. IEEE, 640–656.
[60] Jia Zhang, Daniel Kuc, and Shiyong Lu. 2012. Confucius: A tool supporting
IEEE Transactions on Services
collaborative scientific workflow composition.
Computing 7, 1 (2012), 2–17.
[61] Wenting Zheng, Ankur Dave, Jethro G Beekman, Raluca Ada Popa, Joseph E
Gonzalez, and Ion Stoica. 2017. Opaque: An Oblivious and Encrypted Distributed
Analytics Platform.. In NSDI. 283–298.
7 APPENDIX
The WCPAC protocol’s main functionality includes: 1) to provision
and attest secure worker nodes, 2) to provision securely the code
for the Task Executor and workflow tasks on each participating
worker node, 3) to establish the secure communication and file
transfers between the master node and worker nodes, and 4) to
ensure secure file transfers among worker nodes. Figure 7 shows
the steps of WCPAC and relations between different entities in the
SecDATAVIEW. In the following, we define SecDATAVIEW naming
conventions for the sequence diagram.
machineLaunchRequest(machineType, IP): This function is to
call Cloud Resource Management for launching the remote worker
node (SEV or SGX machines). It accepts machineType and the IP
address from the workflow executor and initializes the remote
machines based on the given parameters, machineTypes are cate-
gorized as "AMD" or "SGX".
send(file): This function is responsible for sending a corresponding
file from source to destination. Sending file is implemented by SFTP.
message(content): This function is responsible for sending mes-
sage through SSL socket from source to destination. This message
is used for sending various signals. The content type is a string.
sha256(file): This function is responsible for generating the SHA256
digest of a given file.
keyGen(): This function is responsible for generating a random
password.
encrypt(key, AD, file): This function AEAD encrypts the input
file based on the given secret key and AD (Associated Data).
decrypt(key, AD, file): This function AEAD decrypts the provided
encrypted file based on the given secret key and AD.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
S. Mofrad et al.
Figure 7: The Sequence Diagram of the WCPAC Protocol.