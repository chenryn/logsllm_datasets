a conflicting block 𝐵𝑙 cannot exist.
Proof. Suppose an honest replica directly commits a block 𝐵𝑘
in a view 𝑣, then it must have received 𝑛 − 𝛾𝑠 ⟨commit, 𝐵𝑘, 𝑣⟩. At
least one of them is from an honest replica since 𝑛−𝛾𝑠 > 𝛽𝑠. Let 𝑡 be
the first time when an honest replica (say 𝑟) sends ⟨commit, 𝐵𝑘, 𝑣⟩,
then 𝑟 must have received and broadcasted C𝑣(𝐵𝑘) by 𝑡 − 2Δ. Thus,
all honest replicas must have received C𝑣(𝐵𝑘) by 𝑡 − Δ, and could
not have voted a conflicting block 𝐵𝑙 after that. But if any honest
replica voted for 𝐵𝑙 (and forwarded the proposal of 𝐵𝑙) before 𝑡 − Δ,
then 𝑟 must have received the conflicting proposal of 𝐵𝑙 by 𝑡. Then,
𝑟 would have then stopped all processes in the steady state of view
𝑣 and could not have sent commit for 𝐵𝑘 at 𝑡, a contradiction. Thus,
no honest replica could not voted for 𝐵𝑙. As 𝑛 − 𝛾𝑠 > 𝛽𝑠, there are
not enough votes for 𝐵𝑙 to form C𝑣(𝐵𝑙)
□
Lemma 4.7. If an honest replica directly commits a block 𝐵𝑘 in
a view 𝑣, then at least 𝛾𝑠 + 1 honest replicas receive C𝑣(𝐵𝑘) before
entering the next view 𝑣 + 1.
Proof. Suppose an honest replica directly commits a block 𝐵𝑘
in a view 𝑣, then it must have received 𝑛 − 𝛾𝑠 ⟨commit, 𝐵𝑘, 𝑣⟩. At
least one of them is from an honest replica since 𝑛−𝛾𝑠 > 𝛽𝑠. Let 𝑡 be
the first time when an honest replica (say 𝑟) sends ⟨commit, 𝐵𝑘, 𝑣⟩,
then 𝑟 must have received and broadcasted C𝑣(𝐵𝑘) by 𝑡 − 2Δ. Thus,
all honest replicas must have received C𝑣(𝐵𝑘) by 𝑡−Δ. We just need
to prove that no honest replica has entered the next view before
𝑡 − Δ. Suppose for the sake of contradiction an honest replica enters
the next view 𝑣 + 1 before 𝑡 − Δ, then it must have received and
broadcasted B𝑣 before 𝑡 − Δ. Then, 𝑟 must have received B𝑣 before
𝑡, and could not have sent commit for 𝐵𝑘 at 𝑡, a contradiction. Thus,
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1693Let 𝑣 be the view number and replica 𝐿 be the leader of the view 𝑣. While in view 𝑣, a replica 𝑟 runs the following steps in iterations:
the proposal and ⟨vote, 𝐵𝑘, 𝑣⟩𝑟 .
(1) Propose. Upon receiving C𝑣(𝐵𝑘−1), if 𝑟 = 𝐿, broadcast ⟨propose, 𝐵𝑘, C𝑣(𝐵𝑘−1), 𝑣⟩𝐿 where 𝐵𝑘 extends 𝐵𝑘−1.
(2) Vote. Upon receiving a valid proposal ⟨propose, 𝐵𝑘, C𝑣(𝐵𝑘−1), 𝑣⟩𝐿, if it has not detected equivocation in the current view 𝑣, broadcast
(3) Pre-commit. Upon receiving C𝑣(𝐵𝑘), broadcast it, wait for 2Δ, and broadcast ⟨commit, 𝐵𝑘, 𝑣⟩𝑟 .
(4) Commit. Upon receiving a quorum of ⟨commit, 𝐵𝑘, 𝑣⟩∗, forward them, and commit 𝐵𝑘 and all its ancestors.
Figure 2: An optimal multi-threshold BFT SMR – steady state protocol.
Let 𝑣 be the view number and replica 𝐿 and 𝐿′ be the leader of the view 𝑣 and 𝑣′, respectively. A replica 𝑟 run the following in view 𝑣.
(1) Blame. When either two conditions below holds, broadcast ⟨blame, 𝑣⟩𝑟 .
(a) The replica 𝑟 cannot commit a transaction 𝑡𝑥 by max{𝑇𝑡𝑥,𝑇𝑣} + Λ where 𝑇𝑡𝑥 is the time it receives 𝑡𝑥, and 𝑇𝑣 is the time it starts
view 𝑣, and Λ is a given time-out.
(b) The replica 𝑟 receives two equivocating proposals.
In the third case, broadcasts the two proposals, and stop all processes in the steady state of view 𝑣 immediately.
(2) Status. Upon receiving B𝑣, broadcast it, stop all processes in the steady state of view 𝑣, and send ⟨status, lock𝑟 , 𝑣⟩𝑟 to 𝐿′ where
lock𝑟 is the highest certificate known to 𝑟. Enter the next view 𝑣 + 1.
(3) New-View. Upon receiving a quorum of ⟨status, lock, 𝑣⟩∗ denoted S𝑣, if 𝑟 = 𝐿′, broadcast ⟨new-view, lock𝑣+1,S𝑣, 𝑣 + 1⟩𝐿′, where
lock𝑣+1 is a highest certificate in S𝑣.
certificate in S𝑣.
(4) First-Vote Upon receiving the first ⟨new-view, C𝑣′(𝐵𝑘′),S𝑣, 𝑣 + 1⟩𝐿′, broadcast it and ⟨vote, 𝐵𝑘′, 𝑣 + 1⟩𝑟 , if C𝑣′(𝐵𝑘′) is the highest
Figure 3: An optimal multi-threshold BFT SMR – view change protocol.
all 𝑛 − 𝛽𝑠 ≥ 𝛾𝑠 + 1 honest replicas receive C𝑣(𝐵𝑘) before entering
the next view 𝑣 + 1, and the lemma holds.
□
The rest of the safety proof under synchrony is the same as the
safety proof under partial synchrony.
Liveness. We prove liveness under partial synchrony when at most
𝛾𝑎 ≤ 𝛾𝑠 replicas are faulty. Liveness under synchrony can be proven
in the same way, and we omit the details of the proof. We prove
that, with a reasonable timeout of Λ = 𝑂(Δ), every transaction is
eventually committed by all honest replicas.
Lemma 4.8. There exists a timeout Λ = 𝑂(Δ) such that every
transaction is eventually committed by all honest replicas.
Proof. Let 𝑣𝑔 be the highest view among honest replicas at the
global standardization time 𝑇𝑔. Then, all honest replicas receive
B𝑣𝑔−1 by 𝑇𝑔 + Δ and enter view 𝑣𝑔. We first prove that if an honest
replica (say 𝑟) permanently stays in a view 𝑣 ≥ 𝑣𝑔, then every
transaction will eventually be committed by all honest replicas in
view 𝑣.
If 𝑟 permanently stays in a view 𝑣 ≥ 𝑣𝑔, then no honest replica
enters a higher view 𝑣′ > 𝑣 because that will make 𝑟 eventually
enter view 𝑣′ as well. If an honest replica commits a transaction
by committing a block 𝐵𝑘 in view 𝑣, then the replica must have
received and broadcast a quorum of 𝑛 − 𝛾𝑠 ⟨commit, 𝐵𝑘, 𝑣⟩∗, and all
honest replicas will also commit 𝐵𝑘 and the transaction. Thus, if
any transaction 𝑡𝑥 is not eventually committed by 𝑟, then it is not
committed in view 𝑣 by any honest replica. Then, all honest replicas
send ⟨blame, 𝑣⟩, receive B𝑣, and enter the next view 𝑣+1. Therefore,
if 𝑟 permanently stays in a view 𝑣 ≥ 𝑣𝑔, then every transaction is
eventually committed by all honest replicas in view 𝑣.
To complete the proof, it remains to show such a view indeed
exists. In fact, after the global standardization time, a view 𝑣 with an
honest leader 𝐿 is a view that all honest replicas permanently stay
in. Let 𝑡 be the time when the first honest replica enters this view 𝑣.
Then, the honest leader 𝐿 collects a quorum of ⟨status, lock, 𝑣 − 1⟩∗,
broadcasts a valid ⟨new-view, C𝑣′(𝐵𝑘′),S𝑣, 𝑣 + 1⟩𝐿, and receives a
certificate C𝑣(𝐵𝑘′), and thus proposes a first block in the view 𝑣
containing all transactions that have not committed yet by 𝑡 +𝑂(Δ).
After that 𝐿 proposes a new block every 2Δ time (or less) upon
collecting a certificate for the previous proposal. Each proposed
block will collect a quorum of 𝑛 − 𝛾𝑠 vote and commit within 𝑂(Δ)
time. Therefore, every honest replica commits every transaction 𝑡𝑥
by max{𝑇𝑣,𝑇𝑡𝑥} + 𝑂(Δ), and thus stays in view 𝑣.
□
Remark on censorship resistance. Our protocol uses the stan-
dard and widely used stable leader approach of PBFT [14] where a
leader is replaced only if it is believed to be faulty. Thus, the pro-
tocol sets a timeout for each transaction to prevent a faulty leader
from censoring specific transactions. But this approach assumes an
honest leader is able to propose all transactions in time. In practice,
an adversary may create a large number of dummy transactions to
saturate the system and that would create an issue for the stable
leader approach. An alternative is to revolve the leader after every
block proposal such as in HotStuff [47]. The revolving leader ap-
proach offers simpler censorship resistance but is less efficient as a
leader cannot proposal multiple blocks in a non-blocking fashion.
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea16944.5 Efficiency
The latency of our protocol is 2Δ+3𝛿. It almost matches the latency
of Sync HotStuff (2Δ+ 2𝛿). The number of messages sent to commit
a block is 𝑛+3𝑛2, which also close to that of PBFT (𝑛+2𝑛2) and Sync
HotStuff (𝑛+𝑛2). The amount of bits sent to commit a block is 𝑂(𝑛3)
as some message contains a linear number of signatures, which
matches that of Sync HotStuff but is more expensive than PBFT’s
𝑂(𝑛2) bit complexity. It can be reduced to 𝑂(𝑛2) using threshold
signatures. Our protocol commits blocks every 2𝛿 as a leader can
propose a subsequent block upon collecting a quorum of votes
for the previous proposal, which also matches that of PBFT and
Sync HotStuff. Therefore, we expect our protocol to have similar
performance as PBFT and Sync HotStuff.
4.6 Parameter Choices
Our protocol allows flexible parameter choices within the trade-offs
between safety and liveness as well as synchronous and partially
synchronous security. There are several characteristic parameter
choices with suited applications.
Strengthen the classic partially synchronous setting. A
prominent parameter choice is 𝛽𝑎 = 𝛾𝑎 = 𝛾𝑠  𝛽′
It is then easy to see that the converted protocol is live if both
the base protocol and the RBC protocol are live, and they commit
the same block. More interestingly, the converted protocol is safe if
either the base protocol or the RBC protocol is safe. From another
angle, in order to break safety in the converted protocol, the adver-
sary needs to break the safety of both the base protocol and the
RBC protocol. This is the key observation that leads to the upgraded
synchronous safety tolerance. Even when the base protocol violates
safety under synchrony, in the presence of 𝑛−𝛾′
𝑠 faults, the
RBC protocol, with its higher synchronous safety tolerance, guards
the safety of the converted protocol.
The other cases are more straightforward. With 𝛾𝑠′ faults under
synchrony or 𝛾𝑎′ faults under asynchrony, both the base protocol
and the RBC protocol are safe and live. This also means the base
protocol functions as an honest virtual sender for the RBC. In this
case, by the integrity and validity properties, the RBC protocol
commits the same block as the base protocol. Thus, the converted
protocol achieves both safety and liveness. With 𝛽𝑠′ faults under
synchrony or 𝛽𝑎′ faults under asynchrony, both the base protocol
and the RBC protocol are safe (but not necessarily live). The con-
verted protocol is also safe. We remind the readers that we only
consider the case with 𝛾𝑠′ ≤ 𝛽𝑠′ and 𝛾𝑎′ ≤ 𝛽𝑎′ in this paper. That
means a multi-threshold protocol may enjoy safety without live-
ness; but we do not consider the case in which a protocol enjoys
liveness without safety.
Actual framework with consistent broadcast. An acute reader
may have noticed that we did not use RBC’s totality property in the
above argument. Indeed, totality is not needed and RBC is a slight
overkill. We used RBC in this intuitive overview for convenience
since we have already introduced RBC. In the actual framework,
we use a multi-threshold consistent broadcast, which is a weaker