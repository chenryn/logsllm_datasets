the round number in which the token was observed.
Places. Any AC protocol with K parties P = {P1, . . . , PK}
consists of the following places:
• S: A token in S denotes a user message (real or noise)
• $1: This place is responsible for providing randomness.
the
• Pi with Pi ∈ P: A token in Pi denotes a message which
• R: A token in R denotes a message which has already
Whenever a transition picks a token from this place,
transition basically picks a random value.
is currently held by the party Pi ∈ P.
which is scheduled to enter the network after ts rounds.
been delivered to a recipient.
Transitions. As part of the initial conﬁguration, the chal-
lenger populates S on behalf of the protocol. All other places
are initially empty. The transitions then consumes tokens from
one place and generate tokens to other places, to modify the
conﬁguration of the petri-net. The event of consumption of a
token from one place by a transition and generation of a new
token represents the movement of a message from one party to
another. We deﬁne the following transitions (refer to Figure 4
for the pseudocodes of the transitions):
, ts(cid:6) from S and a
• TS: takes a token (cid:5)msg,
, u,
token from $1 to write t = (cid:5)msg, meta, (cid:4), IDt, u, Pi, ts = 1(cid:6) to
Pi; the values of i and meta are decided by the AC protocol.
, Pi, ts(cid:6)
• TPi:
takes
a
token
t
from Pi
token
and
=
(cid:2), Pi, P (cid:2), 1(cid:6) to P (cid:2). If Pi is an honest
(cid:2), tr − 1, IDt
(cid:5)msg, meta
(cid:2)
is freshly generated, but if Pi is a compromised
party IDt
= IDt. The place P (cid:2) ∈ {P1, . . . , PK} ∪ {R} and
(cid:2)
party IDt
(cid:2) are decided by the AC protocol, with the exception
meta
that if tr = 0, P (cid:2) always is R.
In either case, the transition also adds an element (t(cid:2), r) to the
set Tokens, where r is the current round number and t(cid:2) is a
copy of the respective (new) token t, with the ﬁelds meta and
(cid:5)msg, meta, tr, IDt,
to write
from $1
a
,
,
,
,
, u,
, ts(cid:5) from S and $ from $1:
TS on tokens q = (cid:4)msg,
(Pi, meta) = fΠ(q, $); IDt = a fresh randomly generated ID
r = current round; t = (cid:4)msg, meta, (cid:2), IDt, u, Pi, 1(cid:5)
if Pi = R then Tokens = Tokens ∪ ((cid:4)msg,
else Tokens = Tokens ∪ ((cid:4) ,
, IDt, u, Pi, 1(cid:5), r)
, IDt, u, Pi, 1(cid:5), r)
,
,
, Pi, ts(cid:5) from Pi, $ from $1:
= a fresh randomly generated ID
(cid:3)
, tr, IDt,
) = fΠ(q, $) ; r = current round
Output: token t at Pi
TPi on tokens q = (cid:4)msg,
(P (cid:3), meta
if tr − 1 = 0 then P (cid:3)
if Pi is honest then IDt
else if Pi is compromised then IDt
= IDt
t = (cid:4)msg, meta
(cid:3), tr − 1, IDt
if Pi = R then Tokens = Tokens∪ ((cid:4)msg,
else Tokens = Tokens ∪ ((cid:4) ,
(cid:3), Pi, P (cid:3), 1(cid:5)
= R
(cid:3)
, IDt
(cid:3)
,
Output: token t at P (cid:3)
,
, IDt
(cid:3), Pi, P (cid:3), 1(cid:5), r)
(cid:3), Pi, P (cid:3), 1(cid:5), r)
fΠ: A function provided by Π to determine routing and the meta ﬁeld.
Fig. 4. Transitions in petri net model M
tr are removed. If the place where t was written to is not R,
then additionally the ﬁeld msg is removed.
Game Setting. Recall that we deﬁne anonymity as a game
between a PPT adversary A and an honest challenger Ch.
Validity of the Protocol Model. The above protocol model
M behaves as expected (more details in Lemma 2 in Ap-
pendix A). We show in Lemma 2 that the protocols indeed
have a bandwidth overhead of β and a latency overhead of
(cid:4). For every message that is sent from one party in S ∪ P
to another party in P ∪ R, the adversary learns the time, the
sender, and the receiver. When a message leaves the network,
the attacker learns whether it was the target (i.e., the challenge)
message. The attacker also learns the mapping between the
input and output messages of compromised parties.
B. Expressing Protocols
Our protocol model M allows the expression of any AC
protocol with very few, esoteric exceptions.
Mix networks can be naturally embedded into our model, in
particular any stop-and-go mix [46] that uses discrete distri-
bution and even AC protocols with specialized path selection
algorithms [47], [48]. For the sake of our necessary constraints,
low-latency protocols (with time-bounded channels) that are
not round-based (e.g., Tor [44]) can be expressed in a round-
based variant, since it only strengthens the protocols anony-
mity properties. This section illustrates embedding techniques
into our model for some other kinds of protocols, but a much
larger variety of protocols can be expressed in our model.
Users as protocol parties.
In peer-to-peer protocols like
dining cryptographers networks (DC net) [16], [18], there are
no separate protocol parties, users act as a type of relays. Also,
any noise sent by users counts into the bandwidth overhead of
the protocol (we will see in Claim 2 that noise sent by nodes
that are not users can be treated differently). Whenever a user
wants to send a message it should use the transition TS, but
when it acts as a relay it should use the transition TPi. For
113
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
interested readers, we show in Appendix A how to model a
speciﬁc DC net type protocol using our petri net model.
Splitting and Recombining Messages. We model protocols
that split and later re-combine messages by declaring one of
the parts as the main message and the other parts as noise,
which may count into the bandwidth overhead. This declara-
tion is mainly required for the analysis, i.e., for evaluating the
success of the adversary and for quantifying the amount of
noise messages introduced by the protocol. We do not restrict
the strategy by which the protocol decides which message
is “the main share” (i.e., the message that is sent on) and
which is “an additional share” (i.e., a fresh noise message). A
more complex scenario involves threshold schemes in which
a smaller number of shares sufﬁces for reconstructing the
message and in which some shares are dropped randomly.
In such cases we consider the protocol to decide beforehand
which of the constructed shares will be dropped later and to
declare one of the remaining shares the “main share”.
Broadcasting Messages.
If the protocol chooses to copy or
broadcast messages to several receivers, we consider the copy
sent to the challenge receiver to be the main message and
copies sent to other receivers to be noise (which, if the copies
are created by nodes that are not users, will not count into the
bandwidth overhead).6
Private Information Retrieval. In schemes based on private
information retrieval we require that the receiver retrieves the
information sufﬁciently fast (within the latency limit). Other-
wise, our method is similar to the broadcasting of messages:
the receiver of interest will retrieve the main message, whereas
other receivers will retrieve copies that are modeled as noise.
Excluded Protocols. For this work we exclude protocols that
cannot guarantee the delivery of a message within the given
latency bound (except if this occurs with a negligible proba-
bility). Moreover, we cannot easily express the exploitation of
side channels to transfer information, e.g., sending information
about one message in the meta-data of another message, or
sending bits of information by not sending a message.
C. Construction of a Concrete Adversary
Given two challenge users u0 and u1 and the set of observed
tokens (t, r) ∈ Tokens, where t is the token and r the round
in which the token was observed, an adversary can construct
the sets Sj (for j ∈ {0, 1}). Assume the challenge message
arrives at the receiver R in a round r. We construct possible
paths of varying length k, s.t., each element p ∈ Sj represents
a possible path of the challenge message starting from uj (j ∈
{0, 1}) and the challenge message then arrives at R in round
rk = r. With challenge bit b, Sb cannot be empty, as the actual
path taken by the challenge message to reach R has to be one
element in Sb.
6We note that in some cases, where users act as nodes and broadcast
messages to other users, our quantiﬁcation of the bandwidth overhead might
be a bit harsh. If the group of users to which the broadcast will be sent is
known in advance (i.e., if messages are broadcast to all users or to pre-existing
groups of users), we can allow the protocol to use a single receiver for these
messages instead.
i+1 : (t(cid:2)
∧ t(cid:2)
i+1.IDt = ti.IDt) ⇒ t(cid:2)
i+1 = ti+1)}
Sj = {p = (t1.prev, . . . , tk.prev, tk.next) :
((t1, r1), . . . , (tk, rk)) ∈ Tokens s.t.
t1.prev = uj ∧ tk.next = R
∧ tk.msg = Challenge ∧ k ≤ (cid:3)
∧ ∀i∈{1,...,k−1}(ti.next = ti+1.prev ∧ ri+1 = ri + 1
∧ ( ∃t(cid:2)
i+1, ri+1) ∈ Tokens ∧ t(cid:2)
i+1.prev = ti.next
Deﬁnition 5 (Adversary Apaths). Given a set of users S,
a set of protocol parties P of size K, and a number of
possibly compromised nodes c, the adversary Apaths proceeds
as follows: 1) Apaths selects and compromises c different
parties from P uniformly at random. 2) Apaths chooses two
challenge users u0, u1 ∈ S uniformly at random. 3) Apaths
makes observations and, based upon those, constructs the sets
S0 and S1. For any i ∈ {0, 1}, if Si = ∅, then Apaths returns
1 − i. Otherwise, it returns 0 or 1 uniformly at random.
Apaths thus checks whether both challenge users could have
sent the challenge message. We explicitly ignore differences
in probabilities of the challenge users having sent the chal-
lenge message, as those probabilities can be protocol speciﬁc.
Naturally, when c = 0, Apaths represents a non-compromising
adversary; but when c (cid:11)= 0, Apaths is partially compromising.
D. Protocol Invariants
there needs to be at
We now investigate the robustness of protocols against our
adversary. We deﬁne an invariant that, if not satisﬁed, allows
Apaths to win against any protocol. Moreover, we present
a protocol that maximizes the probability of fulﬁlling the
invariant. Moreover, we show that whenever the invariant is
fulﬁlled by our protocol, the advantage of Apaths reduces to
zero (as it is forced to randomly guess b).
Necessary invariant for protocol anonymity. It is necessary
that at least both challenge users send messages in one of the
(cid:4) rounds before the challenge message reaches the recipient,
as otherwise there is no way both of them could have sent
the challenge message. Moreover, on the path of the actual
challenge message,
least one honest
(uncompromised) party, as otherwise the adversary can track
the challenge message from the sender to the recipient ( Sb
will have exactly one element and S1−b will be empty). Those
two conditions together form our necessary protocol invariant.
Invariant 1. Let u0 and u1 be the challenge users; let b be the
challenge bit; and let t0 be the time when ub sends the chal-
lenge message. Assume that the challenge message reaches the
recipient at r. Assume furthermore that u1−b sends her mes-
sages (including noise messages) at V = {t1, t2, t3, . . . , tk}.
Now, let T = {t : t ∈ V ∧ (r − (cid:4)) ≤ t < r}. Then,
(i) the set T is not empty, and
(ii) the challenge message passes through at least one honest
node at some time t(cid:2) such that, t(cid:2) ∈ {min(T ), . . . , r − 1}.
Claim 1 (Invariant 1 is necessary for anonymity). Let Π be
any protocol ∈ M with latency overhead (cid:4) and bandwidth
114
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
overhead β. Let u0, u1, b and T be deﬁned as in Invariant 1.
If Invariant 1 is not satisﬁed by Π, then our adversary Apaths
as in Deﬁnition 5 wins.
We refer to Appendix B for the proof. We next claim that it
sufﬁces to consider noise messages sent by users that also
remain within the system for at most (cid:4) rounds, i.e., noise
messages that follow the same rules as real messages. Note that
we consider every new message originating from any user’s
client as a fresh noise message.
Claim 2 (Internal noise does not inﬂuence Invariant 1). Any
message not originating from an end user u ∈ S does not
inﬂuence the probability for Invariant 1 being true. Moreover,
noise messages do not contribute to the probability for Invari-
ant 1 being true after they stayed in the network for (cid:4) rounds.
We refer to Appendix B for the proof. We henceforth
consider noise messages as a protocol input.
E. Ideal Protocol
We construct a protocol Πideal that maximizes the prob-
ability of fulﬁlling Invariant 1. We show that the invariant
is sufﬁcient for Πideal to win against Apaths, i.e., to reduce
Apaths’s advantage to 0. Claim 1 shows that for any protocol
in our model Apaths wins whenever Invariant 1 does not hold.
Thus, an upper bound on the probability that Πideal satisﬁes
Invariant 1 yields an upper bound for all these protocols.
Given the set of all protocol parties P = {P0, . . . , PK−1} of
size K, the strategy of Πideal is as follows: in a round r, Πideal
delivers all messages scheduled for delivery to a recipient. All
other messages (including the messages that enter Πideal in
round r) are sent to the protocol party Pi with i = r mod K.
For every message that enters the protocol, Πideal queries an
oracle O for the number of rounds the message should remain
in the protocol. We deﬁne the following events:
rounds from x to y. For a single round we use u.sent(x).
• u.sent(x, y) : user u has sent at least one message within
• Cmpr(x) : Apaths has compromised the next x consecu-
• ¬H : NOT of event H.
tive parties on the path.
Given a message sent at t0 by sender x, and delivered to the
recipient at (t0 + t), we deﬁne Pt for sender v ∈ S \ {x}:
Pt =
Pr [v.sent(j) ∧ ¬v.sent(j + 1, t0)] × Pr [¬Cmpr(t)]
j=r−(cid:2)
(cid:10)t0
(cid:10)r
+
j=t0+1
Pr [v.sent(j) ∧ ¬v.sent(r − (cid:3), j − 1)]
× Pr [¬Cmpr(r − j)]
When v = u1−b, and the message is the challenge message,
Pt is the probability of fulﬁlling Invariant 1, for the strategy
above. For each message, oracle O chooses an optimal t that
maximizes the expectation of Pt over all users. After the oracle
has decided the latencies for all messages, it sets the time t
for the messages from u1−b to (cid:4). Since the oracle uses the
knowledge of u1−b, Πideal
is slightly more powerful than
protocols in M. Due to the over-approximation with this
(not realizable) oracle, the resulting protocol is optimal w.r.t.
Invariant 1 (Refer to Claim 3 and Claim 4).
115
Claim 3 (Ideal protocol is ideal for the invariant). Against
the given adversary Apaths, Πideal satisﬁes Invariant 1 with