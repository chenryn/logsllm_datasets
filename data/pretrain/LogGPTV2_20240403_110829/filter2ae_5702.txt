# 【技术分享】射频信号的自动化逆向分析（含演示视频）

**译文声明**

本文为翻译文章，原文来源：安全客。具体表达及含义请以原文为准。

## 前言

近年来，软件定义无线电（SDR）和射频（RF）分析变得越来越热门。随着科技的不断进步，相关软硬件也在持续升级。特别是在开源领域，SDR技术无疑将成为安全社区的一种新趋势。作为一名前软件工程师，我计划使用简单的调制方案来处理原始二进制数据，并实现信号的自动化转换。开关键控（OOK）和频移键控（FSK/2FSK）尤其引起我的兴趣，因为它们在汽车、物联网、智能家居以及安全行业中有着广泛应用。

## 使用工具与方法

### 初步尝试

我最初选择了GQRX这款开源软件来记录射频传输数据，并将其保存为wave音频文件。然后，尝试用Audacity进行数据分析。尽管Audacity界面友好且功能强大，但GQRX并不适合用于数据逆向分析。不仅无法直观地观察到数据处理过程，还需要根据不同的信号类型进行复杂配置。此外，用户也无法直接从GQRX的输出数据中看到频率变化。

### GQRX简介

GQRX是一款实验性软件，它利用GNU Radio和Qt GUI工具实现无线电接收功能。除了作为传统的AM/FM/SSB接收器外，GQRX还可以通过网络套接字与外部应用程序交互。目前，该项目仅提供Linux平台的源码包和二进制代码，Mac用户则需通过macports安装。
- **GitHub链接**: [GQRX](https://github.com/csete/gqrx)

### Inspectrum介绍

随后，我发现了一款名为Inspectrum的跨平台工具，它可以以可视化方式展示射频信号的频移值和振幅值，并支持多种RAW文件格式，如*.cf32, *.cfile (GNURadio, osmocom_fft), *.cs16 (BladeRF), *.cs8 (HackRF), 和*.cu8 (RTL-SDR)。如果加载了未知格式的文件，Inspectrum会默认按*.cf32格式处理。
- **GitHub链接**: [Inspectrum](https://github.com/miek/inspectrum)

## 实验分析

借助Inspectrum，我现在可以更有效地查看OOK和2FSK信号并对其进行逆向分析。采用网格叠加法确定波特率并对信号进行解码，这种方法相比之前使用Audacity时有以下改进：
- 提高了信号传输可靠性；
- 可检查射频信号的频移；
- 自动计算传输信号波特率；

在深入理解这些信号的识别和解调机制后，我开始为Inspectrum开发一个封装程序，该程序能够自动获取信号振幅或频移值，并计算平均值作为阈值。当信号单元低于阈值时，视为“0”；高于阈值时，则视为“1”。最终输出原始二进制数据。这大大提高了我的逆向分析效率，并减少了人为错误。

为进一步优化流程，我还开发了一个增强版的命令行工具dspectrum，增加了两个新功能：
1. 对同一文件内不同部分的信号进行半自动化比较；
2. 对不同文件中的两个信号进行半自动化比较。

经过测试发现，通过调整平均时间参数，即使面对滚动码系统或其他复杂情况，设备的平均分析时间也从一个小时缩短至约五分钟。

### dspectrum

- **GitHub链接**: [dspectrum](https://github.com/tresacton/dspectrum)
- **依赖项**:
  - Inspectrum
  - Ruby
- **安装步骤**:
  ```bash
  git clone https://github.com/tresacton/dspectrum
  cd dspectrum
  chmod +x ./dspectrum
  gem install colorize
  cp ./dspectrum /usr/local/bin/  # 可选
  ```
- **使用说明**:
  ```bash
  ./dspectrum  # 或者简单地运行 `dspectrum` 如果已复制到 /usr/local/bin
  ```

运行上述命令后，将进入一个可交互式shell环境。此脚本已成功应用于OOK和2FSK信号分析，准确率达到100%。它会对信号进行全面检查并在发现问题时立即提醒用户。

## 结束语

除了以上内容外，我还制作了一个演示视频，在其中展示了如何在不到两分钟的时间内识别出两个不同设备生成的信号所包含的代码或标识符。希望对您有所帮助！