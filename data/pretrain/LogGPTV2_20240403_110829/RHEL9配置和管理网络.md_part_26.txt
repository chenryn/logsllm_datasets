-   每个 RHEL 路由器都有一个网络接口，它连接到互联网。
:::
::: orderedlist
**流程**
1.  在网络 A 的 RHEL 路由器上：
    ::: orderedlist
    1.  创建名为 `bridge0`{.literal} 的网桥接口：
        ``` literallayout
        # nmcli connection add type bridge con-name bridge0 ifname bridge0
        ```
    2.  配置网桥的 IP 设置：
        ``` literallayout
        # nmcli connection modify bridge0 ipv4.addresses '192.0.2.1/24'
        # nmcli connection modify bridge0 ipv4.method manual
        ```
    3.  为连接到本地网络的接口添加新连接配置集到网桥：
        ``` literallayout
        # nmcli connection add type ethernet slave-type bridge con-name bridge0-port1 ifname enp1s0 master bridge0
        ```
    4.  为网桥添加 GRETAP 隧道接口的新连接配置集：
        ``` literallayout
        # nmcli connection add type ip-tunnel ip-tunnel.mode gretap slave-type bridge con-name bridge0-port2 ifname gretap1 remote 198.51.100.5 local 203.0.113.10 master bridge0
        ```
        `远程和本地`{.literal} `参数设置`{.literal}
        远程和本地路由器的公共 IP 地址。
    5.  可选：如果您不需要，STP（Spanning Tree Protocol）：
        ``` literallayout
        # nmcli connection modify bridge0 bridge.stp no
        ```
        默认情况下，STP 被启用并导致在使用连接前出现延迟。
    6.  配置激活 `bridge0`{.literal} 连接会自动激活网桥端口：
        ``` literallayout
        # nmcli connection modify bridge0 connection.autoconnect-slaves 1
        ```
    7.  激活 `bridge0`{.literal} 连接：
        ``` literallayout
        # nmcli connection up bridge0
        ```
    :::
2.  在网络 B 中的 RHEL 路由器中：
    ::: orderedlist
    1.  创建名为 `bridge0`{.literal} 的网桥接口：
        ``` literallayout
        # nmcli connection add type bridge con-name bridge0 ifname bridge0
        ```
    2.  配置网桥的 IP 设置：
        ``` literallayout
        # nmcli connection modify bridge0 ipv4.addresses '192.0.2.2/24'
        # nmcli connection modify bridge0 ipv4.method manual
        ```
    3.  为连接到本地网络的接口添加新连接配置集到网桥：
        ``` literallayout
        # nmcli connection add type ethernet slave-type bridge con-name bridge0-port1 ifname enp1s0 master bridge0
        ```
    4.  为网桥添加 GRETAP 隧道接口的新连接配置集：
        ``` literallayout
        # nmcli connection add type ip-tunnel ip-tunnel.mode gretap slave-type bridge con-name bridge0-port2 ifname gretap1 remote 203.0.113.10 local 198.51.100.5 master bridge0
        ```
        `远程和本地`{.literal} `参数设置`{.literal}
        远程和本地路由器的公共 IP 地址。
    5.  可选：如果您不需要，STP（Spanning Tree Protocol）：
        ``` literallayout
        # nmcli connection modify bridge0 bridge.stp no
        ```
    6.  配置激活 `bridge0`{.literal} 连接会自动激活网桥端口：
        ``` literallayout
        # nmcli connection modify bridge0 connection.autoconnect-slaves 1
        ```
    7.  激活 `bridge0`{.literal} 连接：
        ``` literallayout
        # nmcli connection up bridge0
        ```
    :::
:::
::: orderedlist
**验证步骤**
1.  在两个路由器上，验证 `enp1s0`{.literal} 和 `gretap1`{.literal}
    连接是否已连接，并且 `CONNECTION`{.literal} 列显示端口的连接名称：
    ``` literallayout
    # nmcli device
    nmcli device
    DEVICE   TYPE      STATE      CONNECTION
    ...
    bridge0  bridge    connected  bridge0
    enp1s0   ethernet  connected  bridge0-port1
    gretap1  iptunnel  connected  bridge0-port2
    ```
2.  从每个 RHEL 路由器中，ping 路由器的内部接口的 IP 地址：
    ::: orderedlist
    1.  在路由器 A 上，ping `192.0.2.2`{.literal} ：
        ``` literallayout
        # ping 192.0.2.2
        ```
    2.  在路由器 B 上，ping `192.0.2.1`{.literal} ：
        ``` literallayout
        # ping 192.0.2.1
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `nmcli`{.literal} man page
-   `nm -settings(5)`{.literal} man page 中的 ip-tunnel``{=html}
    设置部分
:::
:::
::: section
::: titlepage
# []{#configuring-ip-tunnels_configuring-and-managing-networking.html#_additional_resources_2}其他资源 {.title}
:::
::: itemizedlist
-   `ip-link(8)`{.literal} man page
:::
:::
:::
[]{#assembly_port-mirroring_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_port-mirroring_configuring-and-managing-networking.html#assembly_port-mirroring_configuring-and-managing-networking}第 16 章 端口镜像 {.title}
:::
网络管理员可以使用端口镜像将入站和出站网络流量从一个网络设备传输到另一个网络设备。管理员使用端口镜像来监控网络流量并收集网络流量以：
::: itemizedlist
-   调试网络问题并调整网络流
-   检查和分析网络流量以对网络问题进行故障排除
-   检测入侵
:::
::: section
::: titlepage
# []{#assembly_port-mirroring_configuring-and-managing-networking.html#proc_mirroring-a-network-interface-using-nmcli_assembly_port-mirroring}使用 nmcli 对网络接口进行镜像(mirror) {.title}
:::
您可以使用 NetworkManager
配置端口镜像。以下流程通过将流量控制(`tc`{.literal})规则和过滤器添加到
[*enp1s0*]{.emphasis}，将网络流量从 [*enp1s0*]{.emphasis} 镜像到
[*enp7s0*]{.emphasis} 网络接口。
::: itemizedlist
**先决条件**
-   将网络流量镜像到的网络接口。
:::
::: orderedlist
**步骤**
1.  添加您要镜像网络流量的网络连接配置集：
    ``` literallayout
    # nmcli connection add type ethernet ifname enp1s0 con-name enp1s0 autoconnect no
    ```
2.  为带有句柄 \'10:\' 的 egress（传出）流量将 `prio`{.literal} qdisc
    附加到 [*enp1s0*]{.emphasis}。附加没有子项的 \'prio\' qdisc
    可以附加过滤器。
    ``` literallayout
    # nmcli connection modify enp1s0 +tc.qdisc "root prio handle 10:"
    ```
3.  为入口流量添加 qdisc，带有句柄 \'ffff:\'。
    ``` literallayout
    # nmcli connection modify enp1s0 +tc.qdisc "ingress handle ffff:"
    ```
4.  要匹配 ingress 和 egress `qdiscs`{.literal}
    上的数据包，并将它们镜像到另一个接口，请添加以下过滤器。
    ``` literallayout
    # nmcli connection modify enp1s0 +tc.tfilter "parent ffff: matchall action mirred egress mirror dev mirror-of-enp1s0"
    # nmcli connection modify enp1s0 +tc.tfilter "parent 10: matchall action mirred egress mirror dev mirror-of-enp1s0"
    ```
    `matchall`{.literal} 过滤器匹配所有数据包，`mirred`{.literal}
    操作会将数据包重定向到目的地。
5.  激活连接：
    ``` literallayout
    # nmcli connection up enp1s0
    ```
:::
::: orderedlist
**验证步骤**
1.  安装 `tcpdump`{.literal} 实用程序：
    ``` literallayout
    # dnf install tcpdump
    ```
2.  查看目标设备中已镜像的流量([*mirror-of-enp1s0*]{.emphasis})：
    ``` literallayout
    # tcpdump -i enp7s0
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_port-mirroring_configuring-and-managing-networking.html#_additional_resources_3}其他资源 {.title}
:::
::: itemizedlist
-   有关使用 `tcpdump`{.literal} 工具程序的更多信息，请参阅[如何使用
    `tcpdump`{.literal}](https://access.redhat.com/solutions/8787){.link}
    知识库解决方案捕获网络数据包。
:::
:::
:::
[]{#assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses_configuring-and-managing-networking.html#assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses_configuring-and-managing-networking}第 17 章 配置网络设备以接受来自所有 MAC 地址的流量 {.title}
:::
网络设备通常截获并读取其控制器被编程为接收的数据包。您可以配置网络设备，以接受来自虚拟交换机或端口组级别所有
MAC 地址的流量。
您可以使用这个网络模式：
::: itemizedlist
-   诊断网络连接问题，
-   出于安全考虑，监控网络活动，
-   截获网络中的私有数据转换或入侵。
:::
本节论述了如何将网络设备配置为使用
`iproute2`{.literal}、`nmcli`{.literal} 或 `nmstatectl`{.literal}
工具接受来自所有 MAC 地址的流量。除 `InfiniBand`{.literal}
外，您可以为任何类型的网络设备启用此模式。
::: section
::: titlepage
# []{#assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses_configuring-and-managing-networking.html#proc_temporarily-configuring-a-network-network-device-to-accept-all-traffic-using-iproute2_assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses}临时配置网络设备，以使用 iproute2 接受所有流量 {.title}
:::
这个步骤描述了如何配置网络设备以接受所有流量，而不考虑 MAC 地址。使用
`iproute2`{.literal}
实用程序进行的任何更改是临时的，并在机器重启后丢失。
::: orderedlist
**步骤**
1.  可选：显示要识别要接收所有流量的网络接口：
    ``` literallayout
    # ip a
    1: enp1s0:  mtu 1500 qdisc fq_codel state DOWN group default qlen 1000
        link/ether 98:fa:9b:a4:34:09 brd ff:ff:ff:ff:ff:ff
    2: bond0:  mtu 1500 qdisc noqueue state DOWN group default qlen 1000
        link/ether 6a:fd:16:b0:83:5c brd ff:ff:ff:ff:ff:ff
    3: wlp61s0:  mtu 1500 qdisc noqueue state UP group default qlen 1000
    ...
    ```
2.  修改设备以启用或禁用此属性。
    ::: itemizedlist
    -   为 `enp1s0`{.literal} 启用 `accept-all-mac-address`{.literal}
        模式：
        ``` literallayout
        # ip link set enp1s0 promisc on
        ```
    -   为 `enp1s0`{.literal} 禁用 `accept-all-mac-address`{.literal}
        模式：
        ``` literallayout
        # ip link set enp1s0 promisc off
        ```
    :::
:::
::: itemizedlist
**验证步骤**
-   验证 `accept-all-mac-address`{.literal} 模式是否已启用：
    ``` literallayout
    # ip link show enp1s0
    1: enp1s0:  mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000
        link/ether 98:fa:9b:a4:34:09 brd ff:ff:ff:ff:ff:ff
    ```
:::
设备描述中的 `PROMISC`{.literal} 标志表示启用了该模式。
:::
::: section
::: titlepage
# []{#assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses_configuring-and-managing-networking.html#proc_permanently-configuring-a-network-device-to-accept-all-traffic-using-nmcli_assembly_configuring-network-devices-to-accept-traffic-from-all-mac-addresses}使用 nmcli 永久配置网络设备以接受所有流量 {.title}