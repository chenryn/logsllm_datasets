作“临时规避措施”、经验不足的团队是不会写上这条的。修不了漏洞时可以采用一些治标
的补救性措施，比如对有漏洞的页面做访问控制，只允许有限的 src.ip访问，比如在前端
的WAF/IPS设备上加规则过滤对应的恶意请求，或者临时性的去掉一些权限，或者干脆关
掉某些功能，但凡你想得到的通常总能找到临时规避方案，即便是有了补丁升级也不是立
即完成的，在大型互联网生产网络里，全网打完一个补丁是需要不少时间的，有可能一个
礼拜都弄不完，面且修复过程中要考虑服务可用性需要使用灰度和滚动升级的方法，比如
修复前先把负载均衡上的流量切换到备用节点，然后对坐节点的服务器打补丁，打完再把
流量切回去，然后对备用节点的服务器打补丁打完补丁后把临时防御措施再“回滚
掉（有价值的保留，核心设备上不建议留太多臃肿的规则），然后把特征加入全流量和主机
IDS。回顾整个时间轴的防护措施依次是：临时性规避措施一push补丁/根治措施一取消临
时性措施一添加常态性的特征检测措施一检测到漏网之鱼一继续上述过程，这个过程离最
佳实践实际上还差了一个环节，不过这里只是用来说明开头提到的那个问题故面不展开了，
后面会介绍对于个漏润修复是否需要上升层次的问题
4.风险和影响的平衡
假如你遇到一个安全问题是这样的：vlan数目不够，vxlan又不可用，提交问题后研发
的反馈的方案A是如果要彻底修复则需要新增一个dhcpd的安全功能大约包含10000（loc）
即1万行代码，此时产品线又处于整体加班加点赶工大版本的状态，有人提出了方案B做
IP/MAC双向绑定的缓解性措施，但这样的结果很可能是客户觉得太麻烦，面且配置一多
容易出错，此时你想到了一个折中的办法方案C：给大客户单独vlan，若干小客户共享一
个vlan，这样的好处是不需要太多成本，风险降低到可控，客户可以接受。如果选择方案
A是不是更好？这个要看，假如这1万行代码只是用来临时的解决这个问题，显然ROI比
---
## Page 44
32理论管
较低，但是如果后续的版本本来就要加人这个功能，不妨考虑一下。又如果后续版本不需
要这个小众的功能，研发心里其实本不打算去开发的，说不定下次告诉你说要2方行代码，
然后你到CTO那里也说不清风险到底多么严重，就会陷入僵局。风险缓解的原则是在以下
三者之间做最大平衡：1）风险暴露程度；2）研发运维变更成本；3）用户体验的负面影响。
5.修复成本的折中
一个安全漏润的修复如果研发说要开发一周，另外一个方案是运维改一个服务器配置，
而你其实心里知道在WAF上加条规则就能过滤，只不过你怕被绕过心里对这个措施不是特
别有底气。对于这个场景我也不打算直接给出答案，但通常情况下改产品的成本是最高的，
成本最高的往往不容易推动，推不动就无法落地，最后就是一堆安全问题。
Amazon有一个研发理论，用一种T-Shirt Size 估计的方式来做项目。产品经理会对
每一条需求评估上业务影响力的尺寸，如：XXXL影响一千万人以上或是可以占到上亿
美金的市场，XXL影响百万用户或是占了千万金级别以上的市场，后面还有XL、L、M
S，这样逐级减小。开发团队也一样，要评估投入的人员时间成本，XXXL表示要千1年，
XXL千半年，XL千3个月，L千两个月，M千一个月，S干两周以下。等等。
于是，可以这样推理：
口当业务影响力是XL，时间人员成本是S，这是最高优先级。
口当业务影响力是M，时间人员成本是M，这是低优先级。
口当业务影响力是S，时间人员成本是XL，直接欧掉这个需求。因为是亏的。
口当业务影响力是XXL，时间人员成本是XXL，需要简化需求，把需求简化成XL，
时间人员成本变成M以下。
安全其实也类似，风险和修复成本去比较，在坚守底线的基础上选择最优解。
综上所述，大家可以发现最优解往往不一定是最安全的解，市场上乙方公司渗透测试
报告中提的修复方案有些也是无法实施的，很多批判企业安全做得不好的帽子们，有机会
真应该到企业里体验一下，企业安全岂是找洞补洞这么简单的事。
陈皓的“加班与效率“ (http://coolshel1.cn/articles/10217.html#more-10217)
---
## Page 45
第3章甲方安全建设方法论33
3.6需要自己发明安全机制吗
1.安全机制的含义
首先解释一下发明安全机制这句话的意思。安全机制包括：常见的对称和非对称加密
算法，操作系统自带的RBAC基于角色的访问控制，自带的防火墙Netfilter，Android的基
于appid隔离的机制，kemel支持的 DEP（数据段执行保护），以及各种ASLR（地址空间随
机映射），各种安全函数、服务器软件的安全选项，这些都属于已经存在的安全机制，注意
我用的词是“已经存在”，而这个话题是针对是不是要在已有的安全机制上再去发明新的安
全机制，比如三星手机的KNOX，就是在Android基础上自已造了个轮子。
2.企业安全建设中的需求
企业安全的日常工作是不是也会面临自已去发明安全机制的需求？会，但是不常见。
实际上，在日常中发生的绝大多数问题都属于对现有安全机制的理解有误、没有启用或没
有正确使用安全机制面导致的漏洞，而不是缺少安全机制，所以绝大多数场景都不需要去
发明安全机制。发明安全机制是需要成本的，且需要有足够的自信，否则不健全的安全机
制消耗了开发的人力又会引入新的安全问题，但此话不绝对。
3.取舍点
那什么情况下应该发明安全机制呢，这其实非常考验判断者的技术实力。之前也提过
对于很多安全漏润的修复是否要上升层次的问题，首先要判断这是单个问题还是属于一类
问题，如果是前者，用教火的方式堵上这个洞就好，没必要再去考虑更多。但假如这是一
类问题，面你又没提出通条这一类问题的手段就会永远处于教火之中，疲于奔命。如果是
一类问题，分几种情况。第一种归入安全编程能力不足导致的安全问题，这类问题不需要
通过导入新机制解决，而是通过加强SDL的某些环节，加强培训教育去解决。第二种情况
则是属于在相应的领域还没有成熟的安全解决方案或者现有的安全机制对抗强度太弱，则
可以考虑自己去造轮子。
比如有一个函数存在整形溢出，但只有在极特殊的情况下才能触发，平时开发过程中
已经大量的使用了安全函数，启用了编译的安全选项，除了给这个函数加一个条件判断修
复这个bug外是不是还要考虑更进一层的防护呢？大多数情况下显然是没必要的，假如这
---
## Page 46
34理论
是一个公共函数，那你可以选择把修复后的代码封装成安全的API，避免其他程序员自己
实现的时候发生同类问题。
换个问题，如果公司产品的某个私有协议总是被人频繁地解密和利用，面这种解密对
产品的影响又较大，假设就是游戏客户端跟服务端通信的指令都能被破解和仿冒，那这种
情况下就需要考虑是否更改或创建安全机制，即有没有必要通过实现更强的通信协议加密
或提高客户端反调试的对抗等级来缓解这一问题。
如果你说新建安全机制也是补润的话，其实也没错，就像DEP相对于用户态的程序面
言是一种机制，而对于操作系统和冯·诺依曼体系结构面言是一个洞。当你过于勤奋地在
很微观的细节上补洞却总是补不完的时候，不妨停下来看看能否在更高更抽象的层次上打
个补丁。
安全工程师如果要晋升为Leader很重要的一点就是对安全事件和安全漏洞的抽象能力
没有抽象就谈不上PDCA，就意味着更高的管理者对安全KPI在你手上能否改进不一定有
信心。在纵深防御体系向中高阶段发展时，实际上会比较多的遇到是否要创新安全机制的
问题，但是这个场景大多数公司未必会遇到。
3.7如何看待SDL
SDL（安全开发生命周期）优化模型如图3-1所示。
设
基本
标准化
高级
动态
图3-1SDL优化模型
---
## Page 47
第3章甲方安全建设方法论35
SDL起源于微软，2004年将SDL引人其内部软件开发流程中，目的是减少其软件中
的漏洞数量和降低其严重级别。SDL侧重于长期维护、流程改进并能够帮助开发过程应对
不断变化的威胁状况。早些年微软的产品安全问题比较多，微软在某一年甚至下令所有产
品线开发计划停止半年，全部用于整顿安全问题。起初SDL适用于传统的瀑布模型和螺旋
式开发，到了2010年SDL增加了敏捷的部分改进，用于应对互联网下的Web开发，目前
SDL的“全貌”如图3-2所示。
响应
确定安全要求
确定设计要求
使用批准的工具
动态分析
事件响应计划
创建质量门/
弃用不安全
执行事件响应
核心安全培训
Bug栏
分析攻击面
的函数
模期测试
最终安全评析
计划
安全和隐私风
威胁建模
静态分析
攻击面评析
发布存档
险评估
图3-2SDL整体框架
基本软件安全培训应涵盖的基础概念如下所示。
口安全设计，包括以下主题：
·减小攻击面
深度防御
·最小权限原则
·安全默认设置
威胁建模，包括以下主题：
·威胁建模概述
·威胁模型的设计意义
·基于威胁模型的编码约束
口安全编码，包括以下主题：
·缓冲区溢出（对于使用C和C++的应用程序）
·整数算法错误（对于使用C和C++的应用程序）
·跨站点脚本（对于托管代码和Web应用程序）
*SQL注人（对于托管代码和Web应用程序）
·弱加密
口安全测试，包括以下主题：
---
## Page 48
36理论篇
·安全测试与功能测试之间的区别
·风险评估
·安全测试方法
口隐私，包括以下主题：
·隐私敏感数据的类型
·隐私设计最佳实践
·风险评估
·隐私开发最佳实践
·隐私测试最佳实践
口高级概念方面的培训，包括但不限于以下方面：
·高级安全设计和体系结构
·可信用户界面设计
·安全漏洞细节
·实施自定义威胁缓解
先看这份培训列表。能把这些彻底讲明白的人其实还是资深工程师以上的人。有人可
能觉得我说的夸张了，原因在于大部分互联网公司的研发环境主要是Web，有很多人能把
SQL注人、XSS、CSRF这些讲清楚，但问题是这样就算SDL了么？非也，当下热闹的安
全大会各种讲攻防的议题，但这些离真正的产品安全设计还差很远，行业的普遍现状是能
做入侵检测，能把漏润修补原理说清楚，但很少有人能把安全架构设计非常体系化的讲清
楚。很多人认为SDL在互联网公司无法完全落地的原因是因为DevOps模式下的频繁交付
导致SDL显得过于“厚重”，我觉得这只说对了一半，根据大多数互联网公司现行的模式，
我加了一个帽子，姑且就叫“攻防驱动修改”吧。
3.7.1攻防驱动修改
大多数甲方安全团队所做的工作实际上处于这个维度。通过对已知的攻击手段，例如
SQL注人，XSS等建立事前的安全编码标准，并在发布前做代码审计、渗透测试和提出漏
洞修补方案。这种模式的显著优点是针对性比较强，直人主题，见效快。
简单的流程+事件驱动型构成了这种日常行为的本质，简单的流程通常包括：
口事前基线：Web安全编码标准，各公司内部范围流传的APP应用安全设计文档，这
---
## Page 49
第3章甲方安全建设方法论37
个文档的质量水平通常可以差很远，当然文档永远只是文档，可能就是开发部门不
强制不考试800年都不看的东西。
口事中措施：代码审计，发布前过一轮扫描器+渗透测试。
口事后机制：HTTP全流量IDS，Web日志大数据分析，等等。
口事件驱动：发现了新的安全问题就“事后诸葛亮一把”，做点补教性措施。
从整个过程看，攻防驱动修改比较偏“事后”，相对于完整的SDL，威胁建模等工作而
言，它似乎不用发散精力投人太多就能覆盖已知的攻击点，面且在研发侧不用面对比较大
的“推动SDL落地的压力”
但是它的缺点也是显而易见的，由于过程方法论的施力点的比较偏事后，所以在从源
头上发现和改进问题的能力不足，弱于在产品内建的安全机制上建立纵深防御，被绕过的
可能性比较大，事后的bug率到一定程度就很难再改善，只能通过不断的攻防对抗升级去
事后修补。笼统一点讲就是考虑不够系统性。这跟当前安全行业缺少真正的安全架构设计
人才有关，攻防的声音铺大盖地，跟国外比一下在设计和工程化方面差距不小。
事后修补是不是总是有效的，缝缝补补的感觉你觉得会如何呢，对于公司的边缘性产
品你可以希望它早日归入历史的尘埃，面对于公司的支柱型产品你只能寄希望于某一个大
版本更新时把某些机制推倒重新来过。
3.7.2SDL落地率低的原因
1.DevOps的交付模式
互联网赖繁的选代和发布，不同于传统的软件开发过程。如果一个软件要一年交付，