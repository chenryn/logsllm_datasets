# XDCTF2015代码审计全解
|
##### 译文声明
本文是翻译文章，文章来源：phith0n
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
WEB2是一个大题,一共4个flag,分别代表:获取源码、拿下前台管理、拿下后台、getshell。
目标站:http://xdsec-cms-12023458.xdctf.win/
根据提示:
**0×01 获取源码**
“  
时雨的十一  
时雨是某校一名学生,平日钟爱php开发。
十一七天,全国人民都在水深火热地准备朋友圈杯旅游摄影大赛,而苦逼的时雨却只能在宿舍给某邪恶组织开发CMS——XDSEC-CMS。  
喜欢开源的时雨将XDSEC-CMS源码使用git更新起来,准备等开发完成后push到github上。  
结果被领导发现了,喝令他rm所有源码。在领导的淫威下,时雨也只好删除了所有源码。  
但聪明的小朋友们,你能找到时雨君的源码并发现其中的漏洞么?  
”  
可得知获取源码的方式和git有关。
扫描9418端口发现没开,非Git协议。访问http://xdsec-cms-12023458.xdctf.win/.git/发现403,目录可能存在,存在git泄露源码漏洞。
用lijiejie的GitHack工具获取源码:[http://www.lijiejie.com/githack-a-git-disclosure-exploit/](http://www.lijiejie.com/githack-a-git-disclosure-exploit/)
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/29551443956906.png)
并不能获取全部源码,只获取到一个README.md和.gitignore。
读取README.md可见提示:“All source files are in git tag 1.0”。
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/25ae1443956907.png)
可以反推出当时“时雨”的操作是:
    git init
    git add.git commit
    git tag1.0
    git rm –rf *
    echo "Allsource files areingit tag1.0" > README.md
    git add.git commit
真正的源码在tag == 1.0的commit中。那么怎么从泄露的.git目录反提取出1.0的源码?
这道题有“原理法”和“工具法”。当然先从原理讲起。
首先根据git目录结构,下载文件。这个文件其实是commit的一个“链接”。
这是个文本文件,就是一个sha1的commit id:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/25ae1443956907.png)
然后简单说一下git object。
Git object是保存git内容的对象,保存在.git目录下的objects目录中。Id(sha1编码过)的前2个字母是目录名,后38个字母是文件名。
所以 d16ecb17678b0297516962e2232080200ce7f2b3 这个id所代表的目录就是 
请求(所有git对象都是zlib压缩过,所以我利用管道传入py脚本中做简单解压缩):
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/f3c81443956908.png)
可见这也是个文本文件,指向了一个新id : 456ec92fa30e600fb256cc535a79e0c9206aec33,和一些信息。
我再请求这个 id:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/46071443956908.png)
可见,得到一个二进制文件。
阅读下文可先简单了解一下git对象文件结构:
到这一步,我们接下来会接触到的对象就只有“Tree 对象”和“Blob对象”。
这个图可以表示对象间的关系:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/7dfd1443956909.png)
实际上我第一次获取的d16ecb17678b0297516962e2232080200ce7f2b3就是commit对象(绿色),刚才获取的456ec92fa30e600fb256cc535a79e0c9206aec33是tree对象(蓝色),真正保存文件内容的是blob对象(红色)。
那么这个tree对象具体的文件结构是:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/e1fb1443956910.png)
实际上我们看到的二进制内容是sha1编码和而已。
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/e1fb1443956910.png)
Tree对象一般就是目录,而blob对象一般是具体文件。Blob对象的文件结构更简单:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/47c11443956912.png)
简单说就是:
“blob [文件大小]x00[文件内容]”
知道了文件结构,就好解析了。直接从456ec92fa30e600fb256cc535a79e0c9206aec33入手,遇到tree对象则跟进,遇到blob对象则保存成具体文件。
最后利用刚才我的分析,我写了一个脚本([gitcommit.py](https://github.com/phith0n/XDCTF2015/blob/master/gitcommit.py)),可以成功获取到所有源码:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/4c4f1443956914.png)
如下:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/37991443956915.png)
查看index.php,获取到第一个flag:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/d7151443956915.png)
当然,知道原理就OK。如果能用工具的话,何必要自己写代码呢?
说一下“工具法”。
这里不得不提到git自带工具:git cat-file和git ls-tree
其实git ls-tree就是用来解析类型为”tree”的git object,而git cat-file就说用来解析类型为”blob”的git
object。我们只需要把object放在该在的位置,然后调用git ls-tree [git-id]即可。
比如这个工具:[https://github.com/denny0223/scrabble](https://github.com/denny0223/scrabble)
稍加修改即可用来获取tag==1.0的源码:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/b2691443956918.png)
给出我修改过的工具(因为原理已经说清楚了,工具怎么用、怎么改我就不说了):
**0×02 拿下前台管理员**
代码审计正式开始。
首先代码其实是完整的,如果想本地运行需要先composer安装所有php依赖,并且需要php5.5.0版本及以上+linux环境。Web目录设置为./front即可。
源代码中没有SQL结构,可访问http://xdsec-cms-12023458.xdctf.win/xdsec_cms.sql下载SQL初始化文件。(在前台可以找到这个地址)
遍观代码可见是一个基于Codeigniter框架的cms,模板库使用的是twig,数据库使用mysql,session使用文件。
多的不说,直接说我留的漏洞。首先看前台(因为不知道后台地址):
/xdsec_app/front_app/controllers/Auth.php 110行handle_resetpwd函数,
    public function handle_resetpwd()
        {
            if(empty($_GET["email"]) || empty($_GET["verify"])) {
                $this->error("Bad request", site_url("auth/forgetpwd"));
            }
            $user = $this->user->get_user(I("get.email"), "email");
            if(I('get.verify') != $user['verify']) {
                $this->error("Your verify code is error", site_url('auth/forgetpwd'));
            }
    …
主要是判断传入的$_GET['verify']是否等于数据库中的$user['verify']。而数据库结构中可以看到,verify默认为null。
由Php弱类型比较(双等号)可以得知,当我们传入$_GET['verify']为空字符串''时,''==null,即可绕过这里的判断。
但第一行代码使用empty($_GET['verify'])检测了是否为空,所以仍然需要绕过。
看到获取GET变量的I函数。I函数的原型是ThinkPHP中的I函数,熟悉ThinkPHP的人应该知道,I函数默认是会调用trim进行处理的。
查看源码得知,Xdsec-cms中的I函数也会一样处理。所以我们可以通过传入%20来绕过empty()的判断,再经过I函数处理后得到空字符串,与null比较返回true。
即可重置任意用户密码。
那么挖掘到重置漏洞,下一步怎么办?
查看页面HTML源文件,可见meta处的版权声明,包含一个敏感邮箱:PI:EMAIL
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/29551443957897.png)
我们直接重置这个邮箱代表的用户:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/25ae1443957899.png)
如下图提交数据包,重置成功。(前台开启了csrf防御,所以需要带上token。CI的token是保存在cookie中的,所以去看一下就知道了)
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/f3c81443957901.png)
利用重置后的账号密码登录PI:EMAIL。
在用户附件处,发现第2枚flag:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/46071443957902.png)
打开:
[](https://dn-leavesongs.qbox.me/content/uploadfile/201510/7dfd1443957905.png)
可见除了flag以外告诉了后台地址为/th3r315adm1n.php 。
但没有后台账号密码,所以要进行下一步审计。
这里有同学说不知道管理员邮箱,我想说你即使把我社工个遍、再把网站翻个遍,也就6、7个邮箱顶多了,你一个个试,也就试出来了。
渗透时候的信息搜集也很重要,如果连管理员/开发者邮箱都找不着,后续的渗透可能就比较难办了。
相比于这篇文章里提到的类似漏洞,本次的漏洞要简单的多:https://www.leavesongs.com/PENETRATION/findpwd-funny-logic-vul.html,而本文的漏洞是实战中发现的。
所以,偏向实战是我出题的第一考虑因素。
**0×03 拿下后台管理员账号密码**
拿到后台地址,不知道管理员账号、密码。有的同志想到社工、爆破之类的。其实依旧是找漏洞,我在hint里也说明了。
这一步需要深入Codeigniter核心框架。
浏览/xdsec_cms/core/Codeigniter.php,可以大概看出脚本执行流程:
core -> 实例化控制器(执行构造函数__construct) -> hook -> controller主体函数
其中,hook是脚本钩子,等于可以在执行的中途加入其它代码。
后台钩子的具体代码在/xdsec_app/admin_app/config/hooks.php
    $hook['post_controller_constructor'] = function()
    {
        $self = & get_instance();
        $self->load->library('session');
        if(SELF == "admin.php" || config_item("index_page") == "admin.php") {
            $self->error("Please rename admin filename 'admin.php' and config item 'index_page'", site_url());
        }
        $self->template_data["is_admin"] = $self->is_admin();
        if(method_exists($self, "init")) {
            call_user_func([$self, "init"]);
        }
    };
    $hook['post_controller'] = function()
    {
        session_write_close();
    };
跟进query_log方法:我写了两个hook,分别是post_controller_constructor和post_controller。post_controller_constructor是在控制器类实例化后,执行具体方法前,来执行。
而且在core代码中,还有个点,如果我们实现了_remap方法,那么_remap方法也将hook掉原始的控制器方法:
    if ( ! class_exists($class, FALSE) OR $method[0] === '_' OR method_exists('CI_Controller', $method))
    {
                $e404 = TRUE;
    }
    elseif (method_exists($class, '_remap'))
    {
                $params = array($method, array_slice($URI->rsegments, 2));