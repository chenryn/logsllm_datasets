performance, as suggested by the paper itself. Burow et al.
208    28th USENIX Security Symposium
USENIX Association
PathArmor
Control ﬂow
last branches taken
PittyPat
Control ﬂow
Processor execution paths
On-demand, constraint
driven
context-
sensitive CFG
Selected syscalls
Abstract-interpretation based
online points-to analysis
Whole program, enforced at
selected syscalls
Intel PT for execution history
Intel MPX for meta-
data storage
Intel LBR for taken
branches
Categories
Protected
Context
CFG
CFIXX
Object type
vPtr to vTable
binding
None
Coverage
Virtual calls
Required
hardware
Kernel
changes
Runtime
support
µCFI
Control ﬂow
Execution paths and constraint
data
Run-time points-to analysis
Whole program, enforced at
selected syscalls
Intel PT for execution history
and control data
OS-CFI
Control ﬂow & Object type
Origins of function point-
ers and objects
CFGs based on context-
, ﬂow- and ﬁeld-sensitive
static points-to analysis
Whole program, enforced
at every ICT
Intel MPX for metadata
storage and Intel TSX to
protect reference monitors
No, built-in MPX and TSX
support
Hash based veriﬁcation
protected by TSX
No, built-in MPX
support
Library to track the
type of each object
Yes, enforce CFI on the
syscall boundary
Per-thread
transfer monitoring
control
Yes, redirect traces and en-
force CFI on syscall boundary
Additional threads to parse
trace and verify control ﬂow
Yes, redirect traces and en-
force CFI on syscall boundary
Additional threads to parse
trace and verify control ﬂow
Table 6: Comparison between OS-CFI and recent (context-sensitive) CFI systems
independently discovered the way to re-purpose the MPX table
as a generic key-value store [5]. As a hardware accelerated data
store, MPX can be used in a wide variety of security systems,
especially considering that its bound registers can be used for
high-performance SFI (software-fault isolation) [4,22,39].
Anotherclosely related system is CFIXX [4],which enforces
the object-type integrity (OTI). CFIXX prevents attacks such
as COOP [32] from subverting an object’s vPtr pointer. OTI is
a complementary policy to CFI [4]. It requires and strengthens
CFI to provide more complete protection. OS-CFI’s protection
of virtual calls uses the same key (but diﬀerent metadata, i.e.,
the origin) as OTI as a by-product of using MPX to keep
the metadata. As mentioned earlier, OS-CFI can use diﬀerent
keys in its design as long as it can retrieve the origin of
the receiving object because the origin alone can uniquely
identify the target. Overall, OS-CFI provides stronger security
guarantee than CFIXX with its CFI for all ICTs. There are
several other systems that focus on protecting virtual calls,such
as VTrust [42] and SAFEDISPATCH [20]. OS-CFI supports
both C-style ICTs and C++ virtual calls.
6 Summary
We have presented a new type of context for CFI systems
– origin sensitivity. By considering the origins of function
pointers and objects during the veriﬁcation of control transfers,
we can signiﬁcantly improve the security of CFI by reducing
the largest and average EC sizes. By leveraging the commodity
hardware features such as MPX and TSX, our system incurs
only a small overhead.
7 Availability
Our prototype is available as an open-source project at https:
//github.com/mustakcsecuet/OS-CFI.
8 Acknowledgment
We would like to thank the anonymous reviewers and our shep-
herd, Dr. Nathan Dautenhahn, for their insightful comments
that helped improve the presentation of this paper. This project
was partially supported by National Science Foundation (NSF)
under Grant 1453020. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this paper are those of the
authors and do not necessarily reﬂect the views of NSF.
References
[1] Niu, Ben and Tan, Gang , “Per-input Control-ﬂow In-
tegrity,” in Proceedings of the 22nd ACM SIGSAC Con-
ference on Computer and Communications Security.
ACM, 2015, pp. 914–926.
[2] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti,
“Control-ﬂow Integrity,” in Proceedings of the 12th ACM
conference on Computer and communications security.
ACM, 2005, pp. 340–353.
[3] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz,
S. Brunthaler, and M. Payer, “Control-Flow Integrity:
Precision, Security, and Performance,” ACM Comput.
Surv., vol. 50, no. 1, pp. 16:1–16:33, Apr. 2017. [Online].
Available: http://doi.acm.org/10.1145/3054924
[4] N. Burow, D. McKee, S. A. Carr, and M. Payer, “CFIXX:
Object Type Integrity for C++,” in Proceedings of the
2018 Network and Distributed System Security Sympo-
sium, 2018.
[5] N. Burow, X. Zhang, and M. Payer, “SoK: Shining Light
on Shadow Stacks,” in Proceedings of the 2019 IEEE
Symposium on Security and Privacy, ser. SP ’19. Wash-
ington, DC, USA: IEEE Computer Society, 2019.
USENIX Association
28th USENIX Security Symposium    209
[6] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R.
Gross, “Control-Flow Bending: On the Eﬀectiveness
of Control-Flow Integrity,” in Proceedings of the 24th
USENIX Security Symposium, vol. 14, 2015, pp. 28–38.
[7] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang, “Detect-
ing Privileged Side-channel Attacks in Shielded Execu-
tion with Déjá Vu,” in Proceedings of the 2017 ACM
on Asia Conference on Computer and Communications
Security. ACM, 2017, pp. 7–18.
[8] “Bjarne Stroustrup’s C++ Style and Technique FAQ,”
http://www.stroustrup.com/bs_faq2.html, p. 5.
[9] J. Criswell, N. Dautenhahn, and V. Adve, “KCoFI: Com-
plete Control-ﬂow Integrity for Commodity Operating
System Kernels,” in Security and Privacy (SP), 2014
IEEE Symposium on.
IEEE, 2014, pp. 292–307.
[10] T. H. Dang, P. Maniatis, and D. Wagner, “The Perfor-
mance Cost of Shadow Stacks and Stack Canaries,” in
Proceedings of the 10th ACM Symposium on Informa-
tion, Computer and Communications Security, ser. ASIA
CCS ’15, 2015.
[11] L. Davi, P. Koeberl, and A.-R. Sadeghi, “Hardware-
assisted Fine-grained Control-ﬂow Integrity: Towards
Eﬃcient Protection of Embedded Systems against Soft-
ware Exploitation,” in Proceedings of the 51st Annual
Design Automation Conference. ACM, 2014, pp. 1–6.
[12] L. Davi and A.-R. Sadeghi, “Building Control-ﬂow
Integrity Defenses,” in Building Secure Defenses Against
Code-Reuse Attacks. Springer, 2015, pp. 27–54.
[13] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose,
“Stitching the Gadgets: On the Ineﬀectiveness of Coarse-
grained Control-ﬂow Integrity Protection,” in Proceed-
ings of the 23Rd USENIX Conference on Security, ser.
SEC’14, 2014.
[14] R. Ding, C. Qian, C. Song, B. Harris, T. Kim,
and W. Lee, “Eﬃcient Protection of Path-sensitive
Control Security,” in 26th USENIX Security Sym-
posium (USENIX Security 17). Vancouver, BC:
USENIX Association, 2017, pp. 131–148.
[On-
line]. Available: https://www.usenix.org/conference/
usenixsecurity17/technical-sessions/presentation/ding
[15] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard,
H. Okhravi, and S. Sidiroglou-Douskos, “Control Ju-
jutsu: On the Weaknesses of Fine-grained Control-ﬂow
Integrity,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security.
ACM, 2015, pp. 901–913.
[16] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portoka-
lidis, “Out of Control: Overcoming Control-ﬂow In-
tegrity,” in Proceedings of the 2014 IEEE Symposium
on Security and Privacy, ser. SP ’14, 2014.
[17] H. Hu, C. Qian, C. Yagemann, S. P. H. Chung,
W. R. Harris, T. Kim, and W. Lee, “Enforcing
Unique Code Target Property for Control-Flow
Integrity,”
the 2018 ACM
SIGSAC Conference on Computer and Communications
Security, ser. CCS ’18. New York, NY, USA:
ACM, 2018, pp. 1470–1486.
[Online]. Available:
http://doi.acm.org/10.1145/3243734.3243797
in Proceedings of
[18] Intel 64 and IA-32 Architectures Software Developerś
Manual, Intel.
[19] Intel,
“Control-ﬂow
//software.intel.com/sites/default/ﬁles/managed/4d/
2a/control-ﬂow-enforcement-technology-preview.pdf,
2018.
Enforcement,”
https:
[20] D. Jang, Z. Tatlock, and S. Lerner, “SafeDispatch: Secur-
ing C++ Virtual Calls from Memory Corruption Attacks,”
in NDSS, 2014.
[21] M. Khandaker, A. Naser, W. Liu, Z. Wang, Y. Zhou, and
Y. Cheng, “Adaptive Call-site Sensitive Control Flow
Integrity,” in Proceedings of the 4th IEEE European
Symposium on Security and Privacy (EuroS&P 2019),
2019.
[22] K. Koning, X. Chen, H. Bos, C. Giuﬀrida, and
E. Athanasopoulos, “No Need to Hide: Protecting Safe
Regions on Commodity Hardware,” in Proceedings
of the Twelfth European Conference on Computer
Systems, ser. EuroSys ’17. New York, NY, USA:
ACM, 2017, pp. 437–452.
[Online]. Available:
http://doi.acm.org/10.1145/3064176.3064217
[23] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea,
R. Sekar, and D. Song, “Code-pointer Integrity,” in
11th USENIX Symposium on Operating Systems Design
and Implementation (OSDI 14). Broomﬁeld, CO:
USENIX Association, 2014, pp. 147–163. [Online].
Available: https://www.usenix.org/conference/osdi14/
technical-sessions/presentation/kuznetsov
[24] J. Li, Z. Wang, T. Bletsch, D. Srinivasan, M. Grace, and
X. Jiang, “Comprehensive and Eﬃcient Protection of
Kernel Control Data,” IEEE Transactions on Information
Forensics and Security, vol. 6, no. 4, pp. 1404–1417,
Dec 2011.
[25] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and
M. Franz, “Opaque Control-ﬂow Integrity,” in Proceed-
ings of the 22th Network and Distributed System Security
Symposium, ser. NDSS ’15, 2015.
210    28th USENIX Security Symposium
USENIX Association
[26] “Intel MPX Performance Evaluation for Bound Check-
ing,” https://intel-mpx.github.io/performance/.
[27] “GCC 9 Looks Set To Remove Intel MPX Sup-
port,” https://www.phoronix.com/scan.php?page=news_
item&px=GCC-Patch-To-Drop-MPX.
[28] B. Niu and G. Tan, “Modular Control-ﬂow Integrity,”
ACM SIGPLAN Notices, vol. 49, no. 6, pp. 577–587,
2014.
[29] Niu,Ben and Tan,Gang,“RockJIT: Securing Just-in-time
Compilation Using Modular Control-ﬂow Integrity,” in
Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2014,
pp. 1317–1328.
[30] O. Oleksenko, D. Kuvaiskii, P. Bhatotia, P. Felber, and
C. Fetzer, “Intel MPX explained: An empirical study
of intel MPX and software-based bounds checking ap-
proaches,” arXiv preprint arXiv:1702.00719, 2017.
[31] M. Payer, A. Barresi, and T. R. Gross, “Fine-grained
Control-ﬂow Integrity through Binary Hardening,” in
International Conference on Detection of Intrusions and
Malware, and Vulnerability Assessment. Springer, 2015,
pp. 144–164.
[32] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R.
Sadeghi, and T. Holz, “Counterfeit Object-oriented Pro-
gramming: On the Diﬃculty of Preventing Code Reuse
Attacks in C++ Applications,” in Proceedings of the
36th IEEE Symposium on Security and Privacy.
IEEE,
2015.
[33] E. J. Schwartz, T. Avgerinos, and D. Brumley, “All You
Ever Wanted to Know About Dynamic Taint Analy-
sis and Forward Symbolic Execution (but Might Have
Been Afraid to Ask),” in Proceedings of the 2010 IEEE
Symposium on Security and Privacy, ser. SP ’10, 2010.
[34] Y. Sui and J. Xue, “On-demand Strong Update Analy-
sis via Value-ﬂow Reﬁnement,” in Proceedings of the
2016 24th ACM SIGSOFT International Symposium on
Foundations of Software Engineering. ACM, 2016, pp.
460–473.
[35] “Demand Driven Pointer Annalysis,” https://github.com/
SVF-tools/SUPA.
[36] “Static Value-Flow Graph in LLVM,” https://github.com/
SVF-tools/SVF.
[37] C. Tice,T. Roeder,P. Collingbourne,S. Checkoway,Ú. Er-
lingsson, L. Lozano, and G. Pike, “Enforcing Forward-
edge Control-ﬂow Integrity in GCC & LLVM,” in
USENIX Security Symposium, 2014, pp. 941–955.
[38] V. van der Veen, D. Andriesse, E. Göktaş, B. Gras,
L. Sambuc, A. Slowinska, H. Bos, and C. Giuﬀrida,
“Practical Context-sensitive CFI,” in Proceedings of
the 22Nd ACM SIGSAC Conference on Computer and
Communications Security, ser. CCS ’15, 2015.
[39] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham,
“Eﬃcient Software-based Fault Isolation,” in Proceed-
ings of the 14th ACM Symposium On Operating System
Principles, December 1993.
[40] Z. Wang and X. Jiang, “Hypersafe: A Lightweight Ap-
proach to Provide Lifetime Hypervisor Control-ﬂow
Integrity,” in Security and Privacy (SP), 2010 IEEE
Symposium on.
IEEE, 2010, pp. 380–395.
[41] Y. Xia, Y. Liu, H. Chen, and B. Zang, “CFIMon: De-
tecting Violation of Control-ﬂow Integrity Using Perfor-
mance Counters,” in Dependable Systems and Networks
(DSN), 2012 42nd Annual IEEE/IFIP International Con-
ference on.
IEEE, 2012, pp. 1–12.
[42] C. Zhang, D. Song, S. A. Carr, M. Payer, T. Li, Y. Ding,
and C. Song, “VTrust: Regaining Trust on Virtual Calls,”
in NDSS, 2016.
[43] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. Mc-
Camant, D. Song, and W. Zou, “Practical Control Flow
Integrity and Randomization for Binary Executables,” in
Proceedings of the 2013 IEEE Symposium on Security
and Privacy, ser. SP ’13, 2013.
[44] M. Zhang and R. Sekar, “Control Flow Integrity for
COTS Binaries,” in Proceedings of the 22Nd USENIX
Conference on Security, ser. SEC’13, 2013.
[45] T. Zhang, Y. Zhang, and R. B. Lee, “Cloudradar: A
real-time side-channel attack detection system in clouds,”
in International Symposium on Research in Attacks,
Intrusions, and Defenses. Springer, 2016.
USENIX Association
28th USENIX Security Symposium    211