### Performance and Context-Sensitive Control-Flow Integrity (CFI) Systems

**Abstract:**
This paper discusses the performance of context-sensitive CFI systems, as suggested by Burow et al. [3]. The following sections compare several recent CFI systems, including PathArmor, PittyPat, µCFI, and OS-CFI, highlighting their key features and differences.

### Table 6: Comparison of OS-CFI with Recent (Context-Sensitive) CFI Systems

| **Categories** | **PathArmor** | **PittyPat** | **µCFI** | **OS-CFI** |
|---------------|---------------|--------------|----------|------------|
| **Protected Context** | Control flow | Control flow | Execution paths and constraint data | Control flow & Object type |
| **CFG** | Last branches taken | Processor execution paths | Run-time points-to analysis | Origins of function pointers and objects |
| **Object Type** | vPtr to vTable binding | None | None | CFGs based on context-, flow-, and field-sensitive static points-to analysis |
| **Coverage** | Virtual calls | Whole program, enforced at selected syscalls | Whole program, enforced at selected syscalls | Whole program, enforced at every ICT |
| **Required Hardware** | Intel PT for execution history, Intel MPX for metadata storage, Intel LBR for taken branches | On-demand, constraint-driven context-sensitive CFG | Intel PT for execution history and control data | Intel MPX for metadata storage and Intel TSX to protect reference monitors |
| **Kernel Changes** | No | No | No, built-in MPX support | No, built-in MPX and TSX support |
| **Runtime Support** | Additional threads to parse trace and verify control flow | Additional threads to parse trace and verify control flow | Per-thread transfer monitoring control | Hash-based verification protected by TSX, additional threads to parse trace and enforce CFI on syscall boundary |
| **Library** | Library to track the type of each object | N/A | Yes, enforce CFI on the syscall boundary | Yes, redirect traces and enforce CFI on syscall boundary |

### Related Work

#### Re-purposing MPX
Burow et al. independently discovered a method to re-purpose the MPX table as a generic key-value store [5]. As a hardware-accelerated data store, MPX can be used in various security systems, especially considering its bound registers can be used for high-performance SFI (software-fault isolation) [4, 22, 39].

#### CFIXX
Another closely related system is CFIXX [4], which enforces object-type integrity (OTI). CFIXX prevents attacks such as COOP [32] from subverting an object’s vPtr pointer. OTI complements CFI [4] and strengthens it to provide more complete protection. OS-CFI's protection of virtual calls uses the same key (but different metadata, i.e., the origin) as OTI, as a by-product of using MPX to keep the metadata. OS-CFI can use different keys in its design as long as it can retrieve the origin of the receiving object because the origin alone can uniquely identify the target. Overall, OS-CFI provides stronger security guarantees than CFIXX with its CFI for all indirect control transfers (ICTs).

#### Other Systems
Several other systems focus on protecting virtual calls, such as VTrust [42] and SAFEDISPATCH [20]. OS-CFI supports both C-style ICTs and C++ virtual calls.

### Summary
We have presented a new type of context for CFI systems—origin sensitivity. By considering the origins of function pointers and objects during the verification of control transfers, we can significantly improve the security of CFI by reducing the largest and average EC sizes. Leveraging commodity hardware features such as MPX and TSX, our system incurs only a small overhead.

### Availability
Our prototype is available as an open-source project at https://github.com/mustakcsecuet/OS-CFI.

### Acknowledgment
We would like to thank the anonymous reviewers and our shepherd, Dr. Nathan Dautenhahn, for their insightful comments that helped improve the presentation of this paper. This project was partially supported by the National Science Foundation (NSF) under Grant 1453020. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of NSF.

### References
[1] Niu, Ben and Tan, Gang, “Per-input Control-flow Integrity,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 914–926.
[2] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow Integrity,” in Proceedings of the 12th ACM conference on Computer and communications security. ACM, 2005, pp. 340–353.
[3] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler, and M. Payer, “Control-Flow Integrity: Precision, Security, and Performance,” ACM Comput. Surv., vol. 50, no. 1, pp. 16:1–16:33, Apr. 2017. [Online]. Available: http://doi.acm.org/10.1145/3054924
[4] N. Burow, D. McKee, S. A. Carr, and M. Payer, “CFIXX: Object Type Integrity for C++,” in Proceedings of the 2018 Network and Distributed System Security Symposium, 2018.
[5] N. Burow, X. Zhang, and M. Payer, “SoK: Shining Light on Shadow Stacks,” in Proceedings of the 2019 IEEE Symposium on Security and Privacy, ser. SP ’19. Washington, DC, USA: IEEE Computer Society, 2019.
...
[45] T. Zhang, Y. Zhang, and R. B. Lee, “Cloudradar: A real-time side-channel attack detection system in clouds,” in International Symposium on Research in Attacks, Intrusions, and Defenses. Springer, 2016.

---

This version of the text is more organized and professional, with clear headings and a structured format. The comparison table is also more readable and informative.