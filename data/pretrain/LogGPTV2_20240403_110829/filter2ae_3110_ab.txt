            ZEND_VM_SMART_BRANCH(result, 0);
            ZVAL_BOOL(EX_VAR(opline->result.var), result);
            ZEND_VM_NEXT_OPCODE();
        } while (0);
        SAVE_OPLINE();
        if (IS_CV == IS_CV && UNEXPECTED(Z_TYPE_P(op1) == IS_UNDEF)) { // 异常判断
            op1 = GET_OP1_UNDEF_CV(op1, BP_VAR_R);
        }
        if (IS_CONST == IS_CV && UNEXPECTED(Z_TYPE_P(op2) == IS_UNDEF)) { // 异常判断
            op2 = GET_OP2_UNDEF_CV(op2, BP_VAR_R);
        }
        result = EX_VAR(opline->result.var);
        compare_function(result, op1, op2); // 后面进行重点分析
        ZVAL_BOOL(result, Z_LVAL_P(result) == 0); // 将结果转换为布尔型
        ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION(); // Zend虚拟机执行下一个opcode
    }
可以看到，如果前面的条件都没能成立，就会进入`compare_function`函数。  
首先我们查看一下调用关系，可以知道`compare_function`是`PHP`中变量对比的一个核心函数，  
为了方便阅读，我把其中用到的宏放到了下面。
    #define TYPE_PAIR(t1,t2) (((t1) Z_LVAL_P(op2)?1:(Z_LVAL_P(op1)get) { // OP1.handlers.get函数存在
                            zval rv;
                            op_free = Z_OBJ_HT_P(op1)->get(op1, &rv); // 获取OP1的值
                            ret = compare_function(result, op_free, op2); // 递归调用compare_function
                            zend_free_obj_get_result(op_free);
                            return ret;
                        } else if (Z_TYPE_P(op2) != IS_OBJECT && Z_OBJ_HT_P(op1)->cast_object) { // 如果OP2不是对象，并且OP1.handlers.cast_object函数(用来将对象转换为其他类型)存在
                            ZVAL_UNDEF(&tmp_free);
                            if (Z_OBJ_HT_P(op1)->cast_object(op1, &tmp_free, ((Z_TYPE_P(op2) == IS_FALSE || Z_TYPE_P(op2) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op2))) == FAILURE) { // 如果OP2是布尔型，则将OP1转换为布尔型，否则转换失败
                                ZVAL_LONG(result, 1); // OP1 > OP2
                                zend_free_obj_get_result(&tmp_free);
                                return SUCCESS;
                            }
                            ret = compare_function(result, &tmp_free, op2);
                            zend_free_obj_get_result(&tmp_free);
                            return ret;
                        }
                    }
                    if (Z_TYPE_P(op2) == IS_OBJECT) { // 如果OP2是个对象
                        if (Z_OBJ_HT_P(op2)->get) { // OP2.handlers.get函数存在
                            zval rv;
                            op_free = Z_OBJ_HT_P(op2)->get(op2, &rv); // 获取OP2的值
                            ret = compare_function(result, op1, op_free); // 递归调用compare_function
                            zend_free_obj_get_result(op_free);
                            return ret;
                        } else if (Z_TYPE_P(op1) != IS_OBJECT && Z_OBJ_HT_P(op2)->cast_object) { // 如果OP1不是对象，并且OP2.handlers.cast_object函数(用来将对象转换为其他类型)存在
                            ZVAL_UNDEF(&tmp_free);