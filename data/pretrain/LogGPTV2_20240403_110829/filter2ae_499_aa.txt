### 0x01 前言
前段时间，发了一篇文章[《基于Java反序列化RCE -搞懂RMI、JRMP、JNDI》](https://xz.aliyun.com/t/7079)，以概念和例子，粗略的讲解了什么是RMI，什么是JRMP、以及什么是JNDI，本来，我的初衷是为了照顾初学者，还有没多少Java基础的学习者，让他们能初步了解RMI\JRMP\JNDI，而不被很多讲得不清不楚的文章搞得迷迷糊糊，浪费了大量的时间。
但是，最近我发现，虽说文章大部分人也看懂了，而有小部分准备深入研究Java安全的人，对于稍微深入一点的部分会有点迷惑，因此，我准备新开这篇文章，以简单的源码浅析，去把它搞清楚。
在阅读这篇文章之前，我希望你能简单的看看这篇文章[《基于Java反序列化RCE -搞懂RMI、JRMP、JNDI》](https://xz.aliyun.com/t/7079)，先搞清楚什么是RMI、JRMP、JNDI，以及什么是RMI
Registry等等概念。
在文章内容开始之前，先做一个高度的总结，貌似会比较友好，而后面的文章内容，将会以这个顺序去慢慢讲解：
  1. RMI攻击主要分3种目标：RMI Client、RMI Server、RMI Registry。
  2. 使用远程Reference字节码进行攻击。
  3. 从jdk8u121开始，RMI加入了反序列化白名单机制，JRMP的payload登上舞台，这里的payload指的是ysoserial修改后的JRMPClient。
  4. 从jdk8u121开始，RMI远程Reference代码默认不信任，RMI远程Reference代码攻击方式开始失效。
  5. 从jdk8u191开始，LDAP远程Reference代码默认不信任，LDAP远程Reference代码攻击方式开始失效，需要通过javaSerializedData返回序列化gadget方式实现攻击。
### 0x02 从JDK不同版本进行源码分析
最早的最早，从分布式概念出现以后，工程师们，制造了一种，基于Java语言的远程方法调用的东西，它叫RMI（Remote Method
Invocation），我们使用Java代码，可以利用这种技术，去跨越JVM，调用另一个JVM的类方法。
而在使用RMI之前，我们需要把被调用的类，注册到一个叫做RMI Registry的地方，只有把类注册到这个地方，调用者就能通过RMI
Registry找到类所在JVM的ip和port，才能跨越JVM完成远程方法的调用。
调用者，我们称之为客户端，被调用者，我们则称之为服务端。
RMI Registry，我们又叫它为RMI注册中心，它是一个独立的服务，但是，它又可以与服务端存在于同一个JVM内，而RMI
Registry服务的创建非常的简单，仅需一行代码即可完成。
创建RMI Registry服务：
    LocateRegistry.createRegistry(1099);
这就是，创建RMI Registry服务的代码，在创建RMI Registry服务之后，我们就能像前面所说一样，服务端通过与RMI
Registry建立的TCP连接，注册一个可被远程调用的类进去，然后客户端，从RMI
Registry服务获取到服务端注册类的信息，从而与服务端建立TCP连接，完成远程方法调用（RMI）。但这里有一个必须要注意的地方，当你使用独立JVM去部署RMI
Registry的时候，必须把被调用类实现的接口，也要放在RMI Registry类加载器能加载的地方。类似下面所说的nterface
HelloService
服务端注册服务类到RMI Registry：
    public interface HelloService extends Remote {
      String sayHello() throws RemoteException;
    }
    public class HelloServiceImpl extends UnicastRemoteObject implements HelloService {
      protected HelloServiceImpl() throws RemoteException {
      }
      @Override
      public String sayHello() {
        System.out.println("hello!");
        return "hello!";
      }
    }
    public class RMIServer {
      public static void main(String[] args) {
        try {
          LocateRegistry.getRegistry("127.0.0.1", 1099).bind("hello", new HelloServiceImpl());
        } catch (AlreadyBoundException | RemoteException e) {
          e.printStackTrace();
        }
      }
    }
客户端获取注册类信息，并调用：
    public interface HelloService extends Remote {
      String sayHello() throws RemoteException;
    }
    public class RMIClient {
      public static void main(String[] args) {
        try {
          HelloService helloService = (HelloService) LocateRegistry.getRegistry("127.0.0.1", 1099).lookup("hello");
          System.out.println(helloService.sayHello());;
        } catch (RemoteException | NotBoundException e) {
          e.printStackTrace();
        }
      }
    }
这里说明一下，当执行`Registry registry =
LocateRegistry.createRegistry(1099);`的时候，返回的registry对象类是sun.rmi.registry.RegistryImpl，其内部的ref，也就是sun.rmi.server.UnicastServerRef，持有sun.rmi.registry.RegistryImpl_Skel类型的对象变量ref。
而服务端以及客户端，执行`Registry registry = LocateRegistry.getRegistry("127.0.0.1",
1099);`返回的是sun.rmi.registry.RegistryImpl_Stub。
当服务端对实现了HelloService接口并继承了UnicastRemoteObject类的HelloServiceImpl实例化时，在其父类UnicastRemoteObject中，会对当前对象进行导出，返回一个当前对象的stub，也就是HelloService_stub，在其执行`registry.bind("hello",
helloService);`的时候，会把这个stub对象，发送到RMI Registry存根。
当客户端执行`HelloService helloService = (HelloService)
registry.lookup("hello")`的时候，就会从RMI Registry获取到服务端存进去的stub。
接着客户端就可以通过stub对象，对服务端发起一个远程方法调用`helloService.sayHello()`，stub对象，存储了如何跟服务端联系的信息，以及封装了RMI的通讯实现细节，对开发者完全透明。
#### jdk版本 < jdk8u121
接下来，开始从小于jdk8u121版本的jdk8u112版本进行分析。
前面也描述的很清楚了，RMI
Registry的创建，从`LocateRegistry.createRegistry(1099);`开始，这个方法执行以后，就会创建一个监听1099端口的ServerSocket，当RMI服务端执行bind的时候，会发送stub的序列化数据过来，最后在RMI
Registry的sun.rmi.registry.RegistryImpl_Skel#dispatch方法被处理。
整个执行栈是这样的：
    dispatch:-1, RegistryImpl_Skel (sun.rmi.registry)
    oldDispatch:450, UnicastServerRef (sun.rmi.server)
    dispatch:294, UnicastServerRef (sun.rmi.server)
    run:200, Transport$1 (sun.rmi.transport)
    run:197, Transport$1 (sun.rmi.transport)
    doPrivileged:-1, AccessController (java.security)
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:568, TCPTransport (sun.rmi.transport.tcp)
    run0:826, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    lambda$run$0:683, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    run:-1, 1640924712 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$5)
    doPrivileged:-1, AccessController (java.security)
    run:682, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)
    runWorker:1142, ThreadPoolExecutor (java.util.concurrent)
    run:617, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:745, Thread (java.lang)
而在这个dispatch方法中，我们可以清晰的看到，对序列化数据进行了反序列化操作
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
        if (var4 != 4905912898345647071L) {
          throw new SkeletonMismatchException("interface hash mismatch");
        } else {
          RegistryImpl var6 = (RegistryImpl)var1;
          String var7;
          Remote var8;
          ObjectInput var10;
          ObjectInput var11;
          switch(var3) {
          case 0:
            try {
              var11 = var2.getInputStream();
              var7 = (String)var11.readObject();
              var8 = (Remote)var11.readObject();
            } catch (IOException var94) {
              throw new UnmarshalException("error unmarshalling arguments", var94);
            } catch (ClassNotFoundException var95) {
              throw new UnmarshalException("error unmarshalling arguments", var95);
            } finally {
              var2.releaseInputStream();
            }
            var6.bind(var7, var8);
            try {
              var2.getResultStream(true);
              break;
            } catch (IOException var93) {
              throw new MarshalException("error marshalling return", var93);
            }
          case 1:
            var2.releaseInputStream();
            String[] var97 = var6.list();
            try {
              ObjectOutput var98 = var2.getResultStream(true);
              var98.writeObject(var97);
              break;
            } catch (IOException var92) {
              throw new MarshalException("error marshalling return", var92);
            }
          case 2:
            try {
              var10 = var2.getInputStream();
              var7 = (String)var10.readObject();
            } catch (IOException var89) {
              throw new UnmarshalException("error unmarshalling arguments", var89);
            } catch (ClassNotFoundException var90) {
              throw new UnmarshalException("error unmarshalling arguments", var90);
            } finally {
              var2.releaseInputStream();
            }
            var8 = var6.lookup(var7);
            try {
              ObjectOutput var9 = var2.getResultStream(true);
              var9.writeObject(var8);
              break;
            } catch (IOException var88) {
              throw new MarshalException("error marshalling return", var88);
            }
          case 3:
            try {
              var11 = var2.getInputStream();
              var7 = (String)var11.readObject();
              var8 = (Remote)var11.readObject();
            } catch (IOException var85) {
              throw new UnmarshalException("error unmarshalling arguments", var85);
            } catch (ClassNotFoundException var86) {
              throw new UnmarshalException("error unmarshalling arguments", var86);
            } finally {
              var2.releaseInputStream();
            }
            var6.rebind(var7, var8);
            try {
              var2.getResultStream(true);
              break;
            } catch (IOException var84) {
              throw new MarshalException("error marshalling return", var84);
            }
          case 4:
            try {
              var10 = var2.getInputStream();
              var7 = (String)var10.readObject();
            } catch (IOException var81) {
              throw new UnmarshalException("error unmarshalling arguments", var81);
            } catch (ClassNotFoundException var82) {
              throw new UnmarshalException("error unmarshalling arguments", var82);
            } finally {
              var2.releaseInputStream();
            }
            var6.unbind(var7);
            try {
              var2.getResultStream(true);
              break;
            } catch (IOException var80) {
              throw new MarshalException("error marshalling return", var80);
            }
          default:
            throw new UnmarshalException("invalid method number");
          }
        }
    }
可以看到，根据传输过来的数据头，一共分为了0、1、2、3、4五个case处理逻辑，那么，我们看看服务端在执行bind方法注册服务类到RMI
Registry的时候，到底传过来的是case多少。
代码位于sun.rmi.registry.RegistryImpl_Stub#bind
    public void bind(String var1, Remote var2) throws AccessException, AlreadyBoundException, RemoteException {
        try {
          RemoteCall var3 = super.ref.newCall(this, operations, 0, 4905912898345647071L);
          try {
            ObjectOutput var4 = var3.getOutputStream();
            var4.writeObject(var1);
            var4.writeObject(var2);
          } catch (IOException var5) {
            throw new MarshalException("error marshalling arguments", var5);
          }
          super.ref.invoke(var3);
          super.ref.done(var3);
        } catch (RuntimeException var6) {
          throw var6;
        } catch (RemoteException var7) {
          throw var7;
        } catch (AlreadyBoundException var8) {
          throw var8;
        } catch (Exception var9) {
          throw new UnexpectedException("undeclared checked exception", var9);
        }
    }
可以看到`RemoteCall var3 = super.ref.newCall(this, operations, 0,
4905912898345647071L);`第三个参数，也就是0，并且在其后向RMI Registry写了两个序列化对象数据。
接着回到RMI Registry，我们可以看到，对于case=0的时候，毫无疑问，对RMI服务端bind时发过来的序列化数据进行了反序列化，也就是说，
**通过RMI服务端执行bind，我们就可以攻击RMI Registry注册中心，导致其反序列化RCE** 。
接下来，我们进一步分析RMI客户端lookup的时候，具体做了什么操作。
通过debug，可以看到，RMI客户端执行lookup部分代码位于sun.rmi.registry.RegistryImpl_Stub#lookup
    public Remote lookup(String var1) throws AccessException, NotBoundException, RemoteException {
        try {
          RemoteCall var2 = super.ref.newCall(this, operations, 2, 4905912898345647071L);
          try {
            ObjectOutput var3 = var2.getOutputStream();
            var3.writeObject(var1);
          } catch (IOException var18) {
            throw new MarshalException("error marshalling arguments", var18);
          }
          super.ref.invoke(var2);
          Remote var23;
          try {
            ObjectInput var6 = var2.getInputStream();
            var23 = (Remote)var6.readObject();
          } catch (IOException var15) {
            throw new UnmarshalException("error unmarshalling return", var15);
          } catch (ClassNotFoundException var16) {
            throw new UnmarshalException("error unmarshalling return", var16);
          } finally {
            super.ref.done(var2);
          }
          return var23;
        } catch (RuntimeException var19) {
          throw var19;
        } catch (RemoteException var20) {
          throw var20;
        } catch (NotBoundException var21) {
          throw var21;
        } catch (Exception var22) {
          throw new UnexpectedException("undeclared checked exception", var22);
        }
    }
跟RMI服务端bind一样，此处也执行了`RemoteCall var2 = super.ref.newCall(this, operations, 2,
4905912898345647071L);`，不过第三个参数为2，也就是说RMI Registry会执行其case=2的操作。
接着，在lookup中`var3.writeObject(var1);`对参数var1对象进行了序列化发送至RMI Registry，然后对RMI
Registry的返回数据进行了反序列化`var23 = (Remote)var6.readObject();`，也就是说，l
**ookup方法，理论上，我们可以在客户端用它去主动攻击RMI Registry，也能通过RMI Registry去被动攻击客户端**
，只不过lookup发送的序列化数据似乎只能发送String类型，但是，我们完全可以在debug的情况下，控制发送其它类型的序列化数据，达到攻击RMI
Registry的效果。
前面，我们已经搞明白了两个目标的攻击方法：
  1. RMI服务端使用bind方法可以实现主动攻击RMI Registry
  2. RMI客户端使用lookup方法理论上可以主动攻击RMI Registry
  3. RMI Registry在RMI客户端使用lookup方法的时候，可以实现被动攻击RMI客户端