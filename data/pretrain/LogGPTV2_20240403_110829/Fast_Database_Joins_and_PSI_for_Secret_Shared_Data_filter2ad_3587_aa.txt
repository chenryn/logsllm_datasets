title:Fast Database Joins and PSI for Secret Shared Data
author:Payman Mohassel and
Peter Rindal and
Mike Rosulek
Fast Database Joins and PSI for Secret Shared Data
Payman Mohassel,
Peter Rindal,
Mike Rosulek
September 9, 2020
Abstract
We present a scalable protocol for database joins on secret shared data in
the honest-majority three-party setting. The key features of our protocol are
a rich set of SQL-like join/select queries and the ability to compose join oper-
ations together due to the inputs and outputs being generically secret shared
between the parties. Provided that all joins operate on unique primary keys, no
information is revealed to any party during the protocol. In particular, not even
the sizes of intermediate joins are revealed. All of our protocols are constant-
round and achieve O(n) communication and computation overhead for joining
two tables of n rows.
These properties make our protocol ideal for outsourced secure computation.
In this setting several non-colluding servers are setup and the input data is
shared among them. These servers then perform the relevant secret shared
computation and output the result. This model has recently been gaining
traction in industry, e.g. Facebook’s Crypten, Cape Privacy’s TFEncrypted,
Mozilla Telemetry.
We additionally implement two applications on top of our framework. The
ﬁrst application detects voter registration errors within and between agencies
of 50 US states, in a privacy-preserving manner. The second application allows
several organizations to compare network security logs to more accurately iden-
tify common security threats, e.g. the IP addresses of a bot net. In both cases,
the practicality of these applications depends on eﬃciently performing joins on
millions of secret shared records. For example, our three party protocol can
perform a join on two sets of 1 million records in 4.9 seconds or, alternatively,
compute the cardinality of this join in just 3.1 seconds.
1
Introduction
We consider the problem of performing SQL-style join operations on tables that
are secret shared among three parties, in the presence of an honest majority. Our
proposed protocol takes two or more arbitrarily secret shared database tables and
constructs another secret shared table containing a join of the two tables, without
revealing any information beyond the secret shares themselves. Our protocol is
constant-round and has computation and communication overhead that is linear
1
in the size of the tables. Simulation-based security is achieved in the semi-honest
setting with an honest-majority. Our protocol can perform inner, left and full joins
along with union and arbitrary computation on the resulting table, with the best
performance and security guarantees when joins operate on unique primary keys.
New techniques [PSZ14, PSSZ15, PSZ16, KKRT16, PSWW18, CLR17, CHLR18,
IKN+17, RA18, KLS+17, OOS17, KMP+17] for performing set intersection, inner
join and related functionalities have shown great promise for practical deployment.
The vast majority of these works perform private set intersection (PSI), which is
analogous to revealing the entire result of an inner join. Computing a join without
revealing it (i.e., performing further joins, ﬁltering, or computing only aggregate
information) is signiﬁcantly harder, and optimizations for such a setting do not
automatically translate to our composable setting. We highlight a few notable
results that hide the contents of a join (revealing only some function of it):
Ion et al. recently deployed a private set intersection sum protocol[IKN+17]
to allow customers of Google Adwords to correlate online advertising with oﬄine
sales, while preserving user privacy. Pinkas et al.
[PSWW18] also introduced a
practical protocol that can compute any (symmetric) function of the intersection and
associated data. These protocols can be framed in terms of SQL queries consisting
of an inner join followed by an aggregation on the resulting table, e.g. summing
a column. Neither of these protocols (and almost no prior related results) support
secret-shared inputs, but rather require the source tables to be held in the clear by
each party.
The majority of these protocols consider the two party setting and are based on
various cryptographic primitives, e.g. exponentiation [IKN+17], oblivious transfer[PSWW18],
or fully homomorphic encryption[CLR17]. However, in this work we alter the se-
curity model to consider three parties with an honest majority. The motivation is
that typical protocols in this setting (e.g.[AFL+16]) require less computation and
communication than similar two party protocols, by a factor of at least the security
parameter κ = 128. Moreover, we will see that the honest majority enables various
algorithms which are orders of magnitude more eﬃcient, e.g. oblivious permutations
require O(n) work instead of O(n log nκ) [MS13].
Given this observation we investigate how to leverage the eﬃciency gains in the
three party setting to construct practical protocols for performing set intersection
and other SQL-like operations where both the inputs and outputs are secret shared.
One critical aspect of this input/output requirement is that join operations can
then be composed together, where the output of a join can be the input to another.
Allowing this composability greatly increases the ability to perform highly complex
queries and enables external parties to contribute data simply by secret sharing it
between the primary parties which participate in the protocol.
The fact that we support secret-shared inputs also leads to outsourced secure
computation. Three non-coluding servers can be established, and inputs can be
provided by the servers themselves or by external parties simply by secret sharing
2
the input among the servers. This model has been gaining traction in industry.
Mozilla recently deployed a service to collect telemetry data about Firefox[RH18]
using two non-colluding servers running the Prio protocol[CB17]. Other examples
include privacy preserving machine learning frameworks which support secret shared
inputs such as Facebook’s Crypten built for PyTorch[Fac20] and Cape Privacy’s
FTEncrypted built for TensorFlow[MD20].
Complex joins on secret-shared inputs/outputs are valuable in all of these exam-
ples. Most privacy preserving machine learning publications[MR18, Fac20, MD20,
WGC19, RSC+19] assume that the data being trained on has already been joined
together. However, without a framework like ours it is unclear how this would
be accomplished while preserving privacy and eﬃciency. The generality of our ap-
proach allows us to solve these problems and many others, e.g. the two applications
presented in Section 5.
1.1 Functionality
Our protocol oﬀers a wide variety of functionality including set intersection, set
union, set diﬀerence and a variety of SQL-like joins with complex boolean queries.
Generally speaking, our protocol works on tables of secret shared data which are
functionally similar to SQL tables. This is in contrast to traditional PSI and PSU
protocols[PSZ14, PSSZ15, PSZ16, KKRT16] in that each record is now a tuple of
values as opposed to a single key.
We deﬁne our database tables in the natural way. Each table can be viewed
as a collection of rows or as a vector of columns. For a table X, we denote the
ith row as X[i] and the jth column as Xj. Our core protocol requires each table
to contain unique values in the column deﬁning the join (i.e., we can only join
on “unique primary keys”). For example, if we consider the following SQL styled
join/intersection query
select X2 from X inner join Y on X1 = Y1
then the join-keys are X1 and Y1. This uniqueness condition can be extended to the
setting where multiple columns are being compared for equality. Later on we will
discuss the case when such a uniqueness property does not hold. Our protocols also
support a where clause that ﬁlters the selection using an arbitrary predicate of the
X and Y rows. Furthermore, the select clause can also return a function of the
two rows. For example,
select X1, max(X2, Y2) from X inner join Y
on X1 = Y1 where Y2 > 23.3
In general, the supported join operations can be characterized in three parts: 1)
The select function S(·) that deﬁnes how the rows of X, Y are used to construct
each output row, e.g. S(X, Y ) = (X1, max(X2, Y2)) . 2) The predicate P (·) that
deﬁnes the where clause, and 3) which columns are being joined on.
3
Several other types of joins are also supported including left and right joins, set
union and set minus (diﬀerence) and full joins. A left join takes the inner join and
includes all of the missing records from the left table. For the records solely from
the left table, the resulting table contains NULL for the columns from the right table.
Right join is deﬁned symmetrically. A full join is a natural extension where all the
missing rows from X and Y are added to the output table.
We deﬁne the union of two tables to contain all records from the left table,
along with all the records from the right table which are not in the intersection with
respect to the join-keys. Note that this deﬁnition is not strictly symmetric with
respect to the left and right tables due to rows in the intersection coming from the
left table. Table minus is similarly deﬁned as all of the left table whose join-column
value is not present in the right table.
Beyond these various join operations, our framework supports two broad classes
of operations which are a function of a single table. The ﬁrst is a general SQL select
statement which can perform computation on each row (e.g. compute the max of
two columns) and ﬁlter the results using a where clause predicate. The second class
is referred to as an aggregation which performs an operation across all of the rows of
a table — for example, computing the sum, counts, or the max of a given column.
1.2 Our Results
We present the ﬁrst practical secure multi-party computation protocol for perform-
ing SQL-style database joins with linear overhead and constant rounds. Our protocol
is fully composable in that the input and output tables are generically secret shared
between the parties. We achieve this result by combining various techniques from
private set intersection and secure computation more broadly. We build on the
the binary secret sharing technique of [AFL+16] with enhancements described by
[MR18]. We then combine this secret sharing scheme with cuckoo hashing[PSZ14],
an MPC friendly PRF[ARS+15] and a custom protocol for evaluating an oblivious
switching network[MS13]. Using these building blocks our protocol is capable of
computing the intersection of two tables of n = 220 rows in 4.9 seconds. Beyond
these two speciﬁc functionalities, our protocol allows arbitrary computation applied
to a shared table. Compared to existing three party protocols with similar function-
ality (composable), our implementation is roughly 1000× faster. When compared
with non-composable two party protocol, we observe a larger diﬀerence ranging from
our protocol being 1.25× slower to 4000× faster depending on the functionality.
Building on our proposed protocol we demonstrate its utility by showcasing two
potential applications. The ﬁrst prototype would involve running our protocol be-
tween and within the states of the United States to validate the accuracy of the voter
registration data in a privacy preserving way. The Pew Charitable Trust[Smi14] re-
ported 1 in 8 voter registration records in the United States contains a serious error
while 1 in 4 eligible citizens remain unregistered. Our privacy preserving protocol
identiﬁes when an individual’s address is out of date or more seriously if someone is
4
registered to vote in more than one state which could allow them to cast two votes.
Due to how the data is distributed between diﬀerent governmental agencies, it will
be critical that our protocol allows for composable operations. We implement this
application and demonstrate that it is practical to run at a national scale (250M
records) and low cost.
The second application that we consider allows multiple organizations to com-
pare computer security incidents and logs to more accurately identify unwanted
activities, e.g. a bot net. Several companies already oﬀer this service including
Facebook’s ThreatExchange[thr18] and an open source alternative[alt18]. One of
the primary limitations of these existing solutions is the requirement that each or-
ganization send their security logs to a central party, e.g. Facebook. We propose
using our protocol to distribute the trust of this central party between three parties
such that privacy is guaranteed so long as there is an honest majority.
1.3 Related Work
We now review several related works that use secure computation techniques. With
respect to functionality the closest related work is that of Blanton and Aguiar[BA12]
which describes a relatively complete set of protocols for performing intersections,
unions, set diﬀerence, etc. and the corresponding SQL-like operations. Moreover,
these operations are composable in that the inputs and outputs are secret shared
between the parties. At the core of their technique is the use of a generic MPC
protocol and an oblivious sorting algorithm that merges the two sets. This is followed
by a linear pass over the sorted data where a relation is performed on adjacent items.
Their technique has the advantage of being very general. However, the proposed
algorithm has complexity O(n log2 n), is not constant round, and also requires unique
join keys. This results in poor concrete performance as shown in Section 6.
Pinkas, Schneider and Zohner [PSZ14] introduced a paradigm for set intersection
that combines a hash table technique known as cuckoo hashing with a randomized
encoding technique using oblivious transfer. Due to the hashing technique, the
problem is reduced to comparing a single item x to a small set {y1, ..., ym}. Oblivi-
ous transfer is then used to interactively compute the randomized encoding x(cid:48) of x
m}. A plaintext in-
while the other party locally computes the encodings {y(cid:48)
tersection can then be perform directly on these encodings. With the use of several
optimization[PSSZ15, PSZ16, KKRT16, OOS17] this paradigm is extremely eﬃcient
and can perform a set intersection using O(n) calls to a random oracle and O(n)
communication. These protocols are not composable since the input must be known
in the clear. Making them composable is non-trivial and they would likely introduce
a large overhead.
1, ..., y(cid:48)
Laur, Talvista and Willemson[LTW13] present techniques in the honest majority
setting for composable joins, unions and many other operations at the expense of
information leakage. Consider two parties each with a sets X, Y . The parties ﬁrst
generate secret shares of the sets and then use a generic MPC protocol to apply a
5
pseudorandom function (PRF) F to the shared sets to compute X(cid:48) = {Fk(x) | x ∈
X}, Y (cid:48) = {Fk(y) | y ∈ Y } where the key k is uniformly sampled by the MPC protocol
(i.e. neither party knows k). X(cid:48) and Y (cid:48) are then revealed to both parties who use
this information to infer the intersection, union and many other SQL-like operations.
This basic approach dates back to the ﬁrst PSI protocols [Mea86, HFH99] where
the (oblivious) PRF was implemented using a Diﬃe-Hellman protocol.
[LTW13]
extended this paradigm to allow the input sets to be secret shared as opposed to
being known in the clear.
The primary limitation of this approach is that all operations require all parties
to know X(cid:48) and Y (cid:48). This prevents the protocol from being composable without
signiﬁcant information leakage. In particular, the cardinality of X(cid:48) ∩ Y (cid:48) and the
result of the where clause for each row is revealed. This is of particular concern when
several dataset are being combined. Learning the size of the intersection or the union
can represent signiﬁcant information. For instance, in the threat log application the
union of many sets are taken. Each of these unions would reveal how many unique
logs the new set has. Alternatively, taking the join between a set of hospital patients
and a set of HIV positive patients would reveal how many have HIV. When combined
with other information it could lead to the ability to identify some or all of these
patients. Beyond this, the provided three party implementation achieved relatively
poor performance. A join between two tables of a million records is estimated to
require one hour on their three benchmark machines[LTW13]. Looking forward,
our protocol can perform a similar join operation in 4 seconds while preventing all
leakage.
Bater, Elliott, et al.[BEE+17] describe a outsourced MPC protocol where a client
sends a SQL query to one of the computational parties who runs a garbled circuit
based protocol amongst themselves. They present optimizations where some the
computation is performed outside the MPC. We leave it as future work to explore
the application of our new techniques in their setting.
2 Preliminaries
2.1 Security Model
Our protocols are presented in the semi-honest three-party setting with an honest
majority. That is, the received messages of any single party are computationally
indistinguishable from messages that are only dependent of their ﬁnal output. We
present our ideal functionality in Figure 7. See [AFL+16] for a more details of our
simulation based security model.
2.2 Notation
Let [m] denote the set {1, 2, ..., m}. Let V be a vector with elements V = (V1, ..., Vn).
We also use the notion V [i] to index the ith element Vi. We deﬁne a permutation of
6
size m as an injective function π : [m] → [m]. We extend this deﬁnition such that
when π is applied to a vector V of m elements, then π(V ) = (Vπ(1), ..., Vπ(m)). The
image of a function f : X → Y is deﬁned as image(f ) := {y ∈ Y : ∃x ∈ X, f (x) =
y}. Preimage of a pair (f, y) is deﬁned as preimage(f, y) := {x ∈ X : f (x) = y}.
We use n to represent the number of rows a table has. Parties are referred to as
P0, P1, P2. We use κ to denote the computational security parameter, e.g. κ = 128,
and λ as the statistical security parameters, e.g. λ = 40.
2.3 Secret Sharing Framework
Our protocol builds on the ABY3 framework of Rindal and Mohassel [MR18] for
secure computation of circuits. That is, we use their binary/arithmetic addition
use the notation that(cid:74)x(cid:75) is a 2-out-of-3 binary replicated secret sharing of the value
and multiplication protocols along with their share conversion protocols. We will
x. That is, (x0, x1, x2) are sampled uniformly s.t. x = x0 ⊕ x1 ⊕ x2. Party Pi holds