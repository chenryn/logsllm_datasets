DH shares get combined and hashed afterwards. In this case,
different versions of the PRFODH assumption are used to
argue indistinguishability of the games before and after the
hop. For PQ-WireGuard, these steps use KEM encapsulations
and decapsulations. In these cases, indistinguishability can
be argued using the IND-CPA security of CPAKEM and the
IND-CCA security of CCAKEM.
The differences between the proofs for WireGuard and
PQ-WireGuard are not just limited to these asymmetric game
hops: The ways values are combined in some cases in
PQ-WireGuard differ substantially from WireGuard. This is
necessary to deal with the more limited abilities of KEMs
when compared to Difﬁe-Hellman. As a consequence we had
to add multiple new symmetric game hops, particularly around
most asymmetric game hops.
In addition to that we noticed one minor mistake in the
WireGuard proof that also directly affects our proof. The
WireGuard proof claims that it is sufﬁcient for KDF to be
a prf. This turns out to be too weak. KDF is used to combine
two inputs. While in different corruption settings there is
always one input that is indistinguishable from random for the
attacker, but it is not always the same input. Consequently, the
function actually has to be a dual-PRF (which can be keyed on
either input). For the most part this occurs in asymmetric game
hops where the prf-assumption is “hidden” in the PRFODH
assumption but it also occurs in one symmetric hop. We no-
tiﬁed the authors of the WireGuard proof who acknowledged
the issue.
Given these changes, we are able to show that there is
no efﬁcient adversary against the eCK-PFS-PSK security of
PQ-WireGuard under the assumptions that
the used KDF
is a secure dual-PRF, that the used KEMs are respectively
IND-CCA and IND-CPA secure, and that the used AEAD
scheme is secure in terms of authenticity. More speciﬁcally, we
show that for every (possibly quantum) adversary A we can
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
312
construct a set R of (possibly quantum) reduction algorithms
Ri that use oracle access to A to break one of the security
assumptions running in about the same time as A so that:
⎞
pqWG,cleaneCK-PFS-PSK,nP ,nS ,A(λ)
AdveCK-PFS-PSK
⎛
⎜⎜⎜⎜⎜⎜⎜⎝
≤ n2
P nS
· Advprf
(7nS + 9)
KDF,R(λ)
· Advprfswap
+ (2nS + 4)
KDF,R(λ)
· AdvIND-CCA
+ (nS + 2)
CCAKEM,R(λ)
· AdvIND-CPA
+
CPAKEM,R(λ)
nS
2 · Advauth-aead
+
AEAD,R (λ)
·
+ (nS + 2)
ns
2λ
⎟⎟⎟⎟⎟⎟⎟⎠
where nP is the number of parties and nS is the number of
sessions. Here we use Advprop
F,R(λ) for the maximum success
probability over all Ri ∈ R against property prop of building
block F. Our security proof, including a slightly tighter and
more precise bound is available in Appendix B.
Finally we would like to point out a pleasant side-result of
the strong security-notion and the use of two different KEMs
that correspond to static and ephemeral keys: If we model the
break of a KEM as the reveal of all secret keys (and therefore
also encapsulated secrets) then a break of either KEM does not
break the conﬁdentiality of PQ-WireGuard as long as there is
no further corruption:
A break of our CCA-KEM would be equivalent to a corrup-
tion of all static secrets, but notably not the ephemeral keys
used with the CPA-KEM. As long as no ephemeral secrets are
compromised, eCK-PFS-PSK-security still promises that the
established key remains conﬁdential. (However, authenticity is
trivially broken.)
A break of our CPA-KEM on the other hand would be
equivalent to a corruption of all ephemeral secrets, but not of
the static secrets that are used with the CCA-KEM. As long as
no static secrets are compromised eCK-PFS-PSK-security still
promises authenticity and conﬁdentiality, losing PFS though.
The consequence of this is an increased robustness of
the scheme which is relevant to us as most post-quantum
primitives (in case of our proposed instantiation particularly
Dagger) are rather new and therefore more likely to break
than more traditional schemes. The practical impact is that
PQ-WireGuard already provides some of the properties of
hybrid protocols that aim at redundance of security assump-
tions by combining cryptographic schemes that use different
security assumptions (e.g., ECC and lattice-based schemes).
B. The Symbolic Proof
The symbolic proof of PQ-WireGuard uses the Tamarin
prover [43], building on the symbolic proof for WireGuard [8].
Tamarin is a formal veriﬁcation tool for cryptographic pro-
tocols. It supports stateful protocols, falsiﬁcation, and un-
bounded veriﬁcation. Those features as well as its built-
in support of Difﬁe-Hellman exponentiation motivated the
use of Tamarin to analyze several cryptographic protocols,
including TLS 1.3 [59] and the 5G protocol [60]. An extensive
description of Tamarin can be found in [61].
Our Symbolic Model. The symbolic model of PQ-WireGuard
is based on the Tamarin model of WireGuard [8] but extends
it. The Tamarin model of WireGuard does not cover replay re-
sistance and DoS mitigation, both claimed by WireGuard. We
add proofs of these properties. Furthermore, the WireGuard
model did not allow an adversary to compromise the random-
number generator of an honest party, which is allowed in our
extended model, e.g. when corrupting the ephemeral state of
a party. Moreover, the WireGuard model only covered weak-
PFS while our extended model covers full PFS. In the proof of
identity hiding, we observe an issue with the applicability of
the symbolic model. In the case of KEMs, it turns out that the
assumptions implicitly made by the symbolic model for the
the proof of identity hiding are not implied by the standard
security assumptions. In summary, our Tamarin model shows
that the security properties of WireGuard are also satisﬁed by
PQ-WireGuard, although with an additional requirement on
the CCAKEM for the case of identity hiding.
We modiﬁed the original model to reﬂect PQ-WireGuard
and extended the ability of the adversary. In particular, we
analyze the PQ-WireGuard protocol for an unbounded number
of concurrent handshakes under MEX attacks.
The DH-based key exchange of WireGuard was modeled as
rule Handshake_Init:
let pkI = ’g’^~ltkI
= ’g’^~ekI
= pkR^~ekI
= h(’noise’)
= h()
= h()
= h()
= h()
pekI
eisr
cii
hii
ci0
ci1
ki1
astat = aead(ki1, , hii)
hi0
ci2
ki2
ats
hi1
m1
[ ...
For PQ-WireGuard this key exchange is replaced by the KEM-
based construction described in Algorithm 2. We model this
approach with the following rule:
rule Handshake_Init:
let pkI = pk(~ltkI)
= h()
= h()
= h()
= aead(ki2, $ts, hi0)
= h()
=  in
= prf(~tpk, ~r3)
= pk(~ekI)
= h(’noise’)
= h()
= h()
= aenc{kb}pkR
= h()
= h()
kb
pekI
cii
hii
ci0
sct
ci1
ki1
astat = aead(ki1, , hii)
hi0
ci2
ki2
ats
hi1
m1
[ ...
= h()
= h()
= h()
= aead(ki2, , hi0)
= h()
=  in
This way we modiﬁed both the model and the proofs of the ex-
isting security properties to match PQ-WireGuard. In addition,
we analyzed the aforementioned missing security properties
that were not included in the original model. For each of those
security properties, we identify the exact conditions under
which the security property holds. The results for the added
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
313
security proofs are presented in the rest of this section. The
results for the remaining properties can be found in the full
version. The full Tamarin proof is part of the supplementary
material of this paper.
Replay Attacks. We model the replay-attack protection on the
responder as a restriction that only allows a responder to accept
an initiation message with a particular timestamp once.
restriction OnlyOnce:
"All i r t #i #j. OnlyOnce(i, r, t) @ i
& OnlyOnce(i, r, t) @ j ==> #i = #j"
This timestamp value is public, which reﬂects the fact that an
adversary can easily infer the timestamp. A responder records
the timestamp of all incoming initiation messages and will
not accept an initiation message whose timestamp has been
recorded.
Note that in the actual implementation, initiation messages
whose timestamp has never been recorded, but is older than
the timestamp in the latest accepted initiation message will
also be rejected. We do not model this, however, since this
case is not a replay attack.
This restriction already prevents an adversary from replay-
ing an initiation message as a whole. We further allow an
adversary to tamper with arbitrary ﬁelds in an initiation mes-
sage before it is replayed. An initiation message contains the
ﬁelds (sidi, epki, ct1, ltk, time). sidi is purely a handshake
session identiﬁer and plays no role in the actual handshake. ct1
encapsulates shk1. The ephemeral public key epki is mixed
together with shk1 to generate the symmetric keys κ3 and
κ4 used to encrypt ltk and time. Therefore, the adversary
must compromise shk1 in order to tamper the timestamp value
encrypted in time.
With this notion in mind, the replay-attack protection seems
to rely on the secrecy of shk1 alone, and we prove with lemma
replay_attack_resistance that this is indeed the case.
lemma replay_attack_resistance:
"All pki pkr peki peki2 psk psk2 cr cr2 kb ka ka2 k k2
ts ts2 tpk r #i #i1 #j.
// if R receives an init msg containing secret kb
RKeys() @ i
& OnlyOnce(pki, pkr, ts) @ i
// and the init msg indeed comes from I
& ISend() @ i1 & #i1 ) @ j
// but with a different timestamp
& #i  // then the attacker crafted the second init msg
not(Ex #j1. ISend() @j1
& #j1 ) @ i