# Title: Towards Scalable Cluster Auditing through Grammatical Inference over Provenance Graphs

## Authors:
- Wajih Ul Hassan
- Mark Lemay
- Nuraini Aguse
- Adam Bates
- Thomas Moyer

### Affiliations:
- **University of Illinois at Urbana-Champaign**: Wajih Ul Hassan, Nuraini Aguse, Adam Bates
  - Email: {whassan3, aguse2, batesa}@illinois.edu
- **Boston University**: Mark Lemay
  - Email: PI:EMAIL
- **UNC Charlotte**: Thomas Moyer
  - Email: PI:EMAIL

## Abstract
Investigating system intrusions in large distributed systems remains a significant challenge. While monitoring tools (e.g., firewalls, IDS) provide preliminary alerts, attack reconstruction still requires administrators to sift through gigabytes of system audit logs stored locally on hundreds of machines. Two fundamental obstacles prevent synergy between system-layer auditing and modern cluster monitoring tools: 1) the volume of audit data generated in a data center is prohibitively costly to transmit to a central node, and 2) system-layer auditing poses a "needle-in-a-haystack" problem, requiring extensive time and resources to diagnose a single intrusion.

This paper introduces Winnower, a scalable system for audit-based cluster monitoring that addresses these challenges. The key insight is that, for tasks replicated across nodes in a distributed application, a model can be defined over audit logs to succinctly summarize the behavior of many nodes, thus eliminating the need to transmit redundant audit records to a central monitoring node. Winnower parses audit records into provenance graphs, then performs grammatical inference using a novel adaptation of Deterministic Finite Automata (DFA) Learning to produce a behavioral model of multiple nodes. This model can be efficiently transmitted to a central node and used to identify anomalous events in the cluster.

We have implemented Winnower for Docker Swarm container clusters and evaluated it against real-world applications and attacks. Our results show that Winnower dramatically reduces storage and network overhead associated with aggregating system audit logs by up to 98%, without sacrificing the critical information needed for attack investigation. Thus, Winnower represents a significant step forward for security monitoring in distributed systems.

## 1. Introduction
Auditing large compute clusters during system intrusions remains a costly and error-prone process. Security monitoring tools like firewalls and antivirus software provide efficient preliminary alerts, but determining the veracity and context of these alerts requires inspecting system-layer audit logs. However, system logs generate gigabytes of data per node per day, making it impractical to store and process these records centrally. Additionally, the volume of audit information transforms attack reconstruction into a "needle-in-a-haystack" problem, often delaying incident response for months as security teams spend hundreds to thousands of employee hours stitching together log records from dozens of machines.

The audit problem is further exacerbated by the growing popularity of container-based virtualization, which has enabled rapid deployment and extreme scalability in data centers and multi-tenant environments. Containers represent the realization of the microservice architecture principle, encouraging applications to run as discrete, loosely-coupled, and replicated services. However, the rapid adoption of containers has outpaced system administrators' ability to apply control and governance. Container marketplaces such as Docker Store host over 0.5 million containers and boast over 8 billion downloads, creating an ecosystem where poorly maintained or malicious code can spread. A recent Red Hat survey found that 75% of enterprises consider security a major concern in using containers.

Data provenance, metadata describing the lineage of data transformed by a system, is a promising approach to system auditing. Provenance-based techniques parse kernel-layer audit records into a causal graph that describes the history of system execution. These techniques have numerous applications, including database management, network diagnosis, and forensic reconstruction. However, even state-of-the-art provenance-based techniques are not scalable for cluster auditing due to their high storage overhead and "needle-in-a-haystack" problem.

In this paper, we present Winnower, a system that leverages provenance graphs to model the behavior of applications replicated across different nodes in a cluster. Winnower provides a storage- and network-efficient means of transmitting audit data to a central node for cluster-wide monitoring. The output is a provenance model that concisely describes the behavior of hundreds of nodes and can be used to identify abnormal behaviors. Our key insight is that, because cluster applications are replicated according to microservice architecture principles, the provenance graphs of these instances are operationally equivalent except in the presence of anomalous activity. Thus, recognizing and removing equivalent activity from provenance graphs simultaneously solves both challenges associated with cluster auditing.

At the core of Winnower is a novel adaptation of graph grammar techniques. Inspired by formal grammars for string languages, graph grammars provide rule-based mechanisms for generating, manipulating, and analyzing graphs. We demonstrate how graph grammar models can be learned over system-level provenance graphs using Deterministic Finite Automata (DFA) learning, which encodes causality in generated models. These models can determine whether new audit events are already described by the model or whether the model needs to be incrementally updated. This approach enables a series of graph abstraction techniques that allow DFA learning to generalize over the provenance of multiple nodes despite instance-specific information such as hostnames and process IDs. Combining these features, Winnower can transmit and store causal information to the central monitoring node in a cost-effective manner and generate concise provenance graphs without sacrificing the information needed to identify attacks.

### Contributions
- **Analysis of Docker Store:** We conduct an analysis of Docker Store that uncovers high-severity vulnerabilities, justifying the need for auditing tools.
- **Graph Grammar Adaptation:** We design a novel adaptation of graph grammars, demonstrating their applicability for system auditing. To our knowledge, this is the first use of grammatical inference over data provenance, with potential additional security applications in information flow monitoring and control.
- **Winnower Implementation:** We present a proof-of-concept implementation of Winnower that enables cluster auditing for Docker Swarm, Docker's cluster management tool. Winnower augments the Linux Audit System (auditd) to make it container-aware, providing fine-grained provenance for container-based applications. Our evaluation shows that Winnower reduces the overheads of cluster auditing by up to 98%.
- **Case Studies:** We undertake an expansive series of case studies across five real-world attack scenarios, demonstrating that Winnower simplifies attack reconstruction compared to traditional methods based on auditd.

## 2. Background & Motivation

### 2.1 Docker Ecosystem
Docker is the most widely used container-based technology, allowing users to create self-contained applications with all dependencies built-in as images. Docker Store is an online registry for sharing Docker images. Docker images are built on top of other images, and Docker Store contains two types of public image sharing repositories: official repositories verified by vendors and community repositories from the public. At the time of this study, there were 140 official containers on Docker Store.

In this work, we used Docker Swarm, the native Docker cluster management tool for resource allocation and dynamic scheduling of containers. Docker Swarm users can specify a replication factor when launching containers, which provides isolation, horizontal auto-scaling, load-balancing, and fault-tolerance. For example, the following command deploys 12 Nginx containers in a Docker Swarm cluster:

```bash
docker service create --name nginx --replicas 12 nginx
```

### 2.2 Security Analysis of Docker Store
To demonstrate the potential security risks in the container ecosystem, we downloaded 140 official images and the top 500 community images from Docker Store. Using Anchoreâ€™s cve-scan tool, we statically analyzed the operating system packages built-in or downloaded by these Docker images. The cve-scan tool categorizes vulnerabilities using the Common Vulnerability Scoring System V3 (CVSS), which specifies four severity levels: Low, Medium, High, and Critical.

As shown in Figure 2, the cve-scan uncovered thousands of CVEs in both official and community images. Over 70% of official images have at least one High severity vulnerability. These results indicate that security threats abound in the container ecosystem, underscoring the importance of developing runtime auditing solutions for container clusters.

### 2.3 Motivating Attack Scenario
To characterize the limitations of existing cluster auditing systems, we consider a concrete scenario involving an online file storage web service. The service consists of a cluster with one master node and four worker nodes running 10 ProFTPD-1.3.3c containers, each configured with multiple worker daemons backed by 5 MySQL database containers for authentication. ProFTPD-1.3.3c is vulnerable to a remote code execution attack. We configured the worker nodes to stream complete descriptions of their activities to the master node using the Linux audit subsystem (auditd).

During a 3-minute workflow, an attack was launched on one of the nodes' containers, using the ProFTPD-1.3.3c vulnerability to obtain bash access and download a backdoor program for persistent access. The master node's view of the cluster is shown in Figure 3a, where the worker nodes' auditd streams are represented as a provenance directed acyclic graph (DAG) detailing the causal relations of the system. The graph has been simplified for readability; each node's graph was roughly 2 MB in size and contained around 2,000 vertices. The subgraph titled "Attack Provenance" only appears in Node 1, whereas the remainder of Node 1's graph is operationally equivalent to the activities of the other nodes.

Based on this exercise, we observe fundamental limitations to leveraging system-layer audits in large clusters:
- **Graph Complexity:** Ideally, an administrator would have the ability to quickly identify and isolate anomalous behavior, but the complexity of the graph makes this difficult.
- **Scalability:** The volume of data and the need to transmit it to a central node make current approaches impractical for large-scale clusters.

These observations motivate the need for a more efficient and scalable solution, such as Winnower, to address the challenges of cluster auditing.