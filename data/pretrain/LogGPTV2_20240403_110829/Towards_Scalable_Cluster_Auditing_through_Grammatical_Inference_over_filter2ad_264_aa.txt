title:Towards Scalable Cluster Auditing through Grammatical Inference over
Provenance Graphs
author:Wajih Ul Hassan and
Mark Lemay and
Nuraini Aguse and
Adam Bates and
Thomas Moyer
Towards Scalable Cluster Auditing through
Grammatical Inference over Provenance Graphs
Wajih Ul Hassan, Mark Lemay,‡ Nuraini Aguse, Adam Bates, Thomas Moyer∗
University of Illinois at Urbana-Champaign
{whassan3,aguse2,batesa}@illinois.edu
‡ Boston University
PI:EMAIL
∗ UNC Charlotte
PI:EMAIL
Abstract—Investigating the nature of system intrusions in
large distributed systems remains a notoriously difﬁcult challenge.
While monitoring tools (e.g., Firewalls, IDS) provide preliminary
alerts through easy-to-use administrative interfaces, attack recon-
struction still requires that administrators sift through gigabytes
of system audit logs stored locally on hundreds of machines.
At present, two fundamental obstacles prevent synergy between
system-layer auditing and modern cluster monitoring tools: 1)
the sheer volume of audit data generated in a data center is
prohibitively costly to transmit to a central node, and 2) system-
layer auditing poses a “needle-in-a-haystack” problem, such that
hundreds of employee hours may be required to diagnose a single
intrusion.
This paper presents Winnower, a scalable system for audit-
based cluster monitoring that addresses these challenges. Our
key insight is that, for tasks that are replicated across nodes in
a distributed application, a model can be deﬁned over audit logs
to succinctly summarize the behavior of many nodes, thus elimi-
nating the need to transmit redundant audit records to a central
monitoring node. Speciﬁcally, Winnower parses audit records into
provenance graphs that describe the actions of individual nodes,
then performs grammatical
inference over individual graphs
using a novel adaptation of Deterministic Finite Automata (DFA)
Learning to produce a behavioral model of many nodes at once.
This provenance model can be efﬁciently transmitted to a central
node and used to identify anomalous events in the cluster. We have
implemented Winnower for Docker Swarm container clusters
and evaluate our system against real-world applications and
attacks. We show that Winnower dramatically reduces storage
and network overhead associated with aggregating system audit
logs, by as much as 98%, without sacriﬁcing the important
information needed for attack investigation. Winnower thus
represents a signiﬁcant step forward for security monitoring in
distributed systems.
I.
INTRODUCTION
When investigating system intrusions, auditing large com-
pute clusters remains a costly and error-prone process. Security
monitoring tools such as ﬁrewalls and antivirus provide an
efﬁcient preliminary alert system for administrators, quickly
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23141
www.ndss-symposium.org
notifying them if a suspicious activity such as a malware
signature or a blacklisted IP is spotted somewhere in the
cluster. However, determining the veracity and context of these
compromise indicators still ultimately requires the inspection
of system-layer audit logs. Unfortunately, auditing systems
are not scaling to meet
the needs of modern computing
paradigms. System logs generate gigabytes of information per
node per day, making it impractical to proactively store and
process these records centrally. Moreover, the volume of audit
information transforms attack reconstruction into a “needle-
in-a-haystack” problem. In Advanced Persistent Threat (APT)
scenarios, this reality delays incident response for months [48]
as security teams spend hundreds to thousands of employee
hours stitching together log records from dozens of machines.
The audit problem is only further exacerbated by the grow-
ing popularity of container-based virtualization, which has en-
abled rapid deployment and extreme scalability in datacenters
and other multi-tenant environments [22]. Containers represent
the realization of the microservice architecture principle [59], a
popular pattern that encourages applications to run as discrete,
loosely-coupled, and replicated services to provide scalability
and fault-tolerance. However, the rapid adoption of containers
has outpaced system administrators’ ability to apply control
and governance to their production environments. Container
marketplaces such as Docker Store [4] now host over 0.5
million containers and boast over 8 billion downloads [1];
while these services simplify the sharing of applications, they
also create a new ecosystem in which poorly maintained
or malicious code is permitted to spread. These containers
have no security guarantees and can contain vulnerabilities
that could be used as attack vectors [65], [63]. Recently,
Red Hat surveyed enterprises to ﬁgure out technical factors
which prevent the use of containers in production and 75% of
enterprises claimed security to be a major concern [9].
Data provenance, metadata that describes the lineage of
data transformed by a system, is a promising new approach
to system auditing. In the context of operating systems,
provenance-based techniques parse kernel-layer audit records
into a causal graph that describes the history of system
execution [20], [58], [50], [47], [60]. The applications for
data provenance are numerous, ranging from database manage-
ment [30], [35], [45], networks diagnosis and debugging [26],
[27], and forensic reconstruction of a chain of events after an
attack [18], [72], [19], [67]. Unfortunately, even state-of-the-
art provenance-based techniques are not presently applicable to
the cluster auditing problem as they suffer from huge storage
overhead and “needle-in-a-haystack” problem. While work on
reducing provenance storage overhead exists [54], [51], [69],
[25]; these systems lack scalability required for auditing large
clusters.
In this paper, we present Winnower, a system that leverages
provenance graphs as the basis for online modeling the behav-
ior of applications that have been replicated across different
nodes in a cluster. Winnower provides a storage- and network-
efﬁcient means of transmitting audit data to a central node
for cluster-wide monitoring. The output of Winnower is a
provenance model that concisely describes the behavior of
hundreds of nodes, and can be used by system administrators
to identify abnormal behaviors in the cluster. Our key insight
is that, because cluster applications are replicated in accor-
dance with microservice architecture principle, the provenance
graphs of these instances are operationally equivalent (i.e.,
highly redundant) except in the presence of anomalous activity.
Thus, recognition and removal of equivalent activity from
provenance graphs will simultaneously solve both challenges
associated with cluster auditing.
At the core of Winnower is a novel adaptation of graph
grammar techniques. Inspired by formal grammars for string
languages, graph grammars provide rule-based mechanisms for
generating, manipulating and analyzing graphs [71], [44]. We
demonstrate how graph grammar models can be learned over
system-level provenance graphs through use of Deterministic
Finite Automata (DFA) learning, a restrictive class of graph
grammars which encodes the causality in generated models.
These models can be used to determine whether new audit
events are already described by the model, or whether the
model needs to be incrementally updated. This approach made
possible a series of graph abstraction techniques that enable
DFA learning to generalize over the provenance of multiple
nodes despite the presence of instance-speciﬁc information
such as hostnames and process IDs. Combining these two
features, Winnower can transmit and store causal information
to the central monitoring node in a cost-effective manner and
generate concise provenance graphs without sacriﬁcing the
information needed to identify attacks.
This paper makes the following contributions:
– To motivate our use of the container ecosystem as an
exemplar, we conduct an analysis of Docker Store that
uncovers high severity vulnerabilities, justifying the need
for auditing tools (§II);
– We design a novel adaptation of graph grammars that
demonstrates their applicability for system auditing. While
to the best of our knowledge,
this is the ﬁrst use of
grammatical inference over data provenance, we foresee
additional security applications in the areas of information
ﬂow monitoring and control (§III);
– We present the Winnower, a proof-of-concept implemen-
tation that enables cluster auditing for Docker Swarm,
Docker’s cluster management tool (§IV). Winnower aug-
ments the Linux Audit System (auditd)
to make it
container-aware, providing a means for ﬁne-grained prove-
nance of container-based applications. In the evaluation,
we demonstrate that Winnower reduces the overheads of
cluster auditing by as much as 98% (§V).
– To determine the efﬁcacy of Winnower for cluster au-
diting, we undertake an expansive series of case studies.
Across ﬁve real-world attack scenarios, we demonstrate
that Winnower dramatically simpliﬁes attack reconstruction
as compared to traditional methods based on auditd (§VI).
II. BACKGROUND & MOTIVATION
A. Docker Ecosystem
Docker is the most widely used container-based technol-
ogy [1] which allows users to create self-contained applications
with all dependencies built-in the form of images. Docker Store
is an online registry that allows Docker users to share appli-
cation container images online. Docker images are built on
top of other images; for example, we can create LAMP stack
image by selecting an Ubuntu distribution as a base image,
then add Apache, MySQL, and PHP images. Currently, Docker
Store contains two types of public image sharing repositories:
ofﬁcial repositories that contain curated application containers
veriﬁed by the vendors and community repositories that contain
application containers from the public. At the time of this
study, there are 140 ofﬁcial containers on Docker Store.
Fig. 1: Docker Swarm Architecture.
In this work, we used Docker Swarm which is the native
Docker cluster management tool for resource allocation and
dynamic scheduling of containers. However, our system is
extensible to other cluster management
tools (see §VIII).
The basic architecture of Docker Swarm cluster is shown
in Figure 1. Docker Swarm manager (master) is a frontend
for users to control containers in the cluster while actual
container executes on Docker Swarm nodes (workers). Docker
Swarm users can specify replication factor when launching
containers. Replication is useful to provide isolation, horizontal
auto-scaling, load-balancing and fault-tolerance to services.
For example, the following command will deploy 12 Nginx
containers in Docker Swarm cluster.
docker service create --name nginx --replicas 12 nginx
(a) Results of CVE Scan by severity
for all 140 Docker Ofﬁcial images
and the top 500 most popular Docker
Community images.
(b)
Percentage of Docker images
that have at least one speciﬁed sever-
ity CVE in them
Fig. 2: Docker Store Security Analysis Results.
2
Worker NodeDocker DaemonWorker NodeWorker NodeSchedulerDiscoverySwarm ManagerContainerDockerClientDocker StoreMaster NodeAPIImages 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000LowMedium    HighCriticalLowMediumHighCriticalTotal Number of CVEsNo FixFix32925939202702690946688913628Docker CommunityDocker Official 0 10 20 30 40 50 60 70 80LowMedium   HighCriticalNonePercentage of ImagesOfficialCommunityCVSS RatingsFig. 3: (a) Part of raw provenance graphs generated on master node using auditd. (b) Concise Provenance Graph generated by Winnower for
monitoring cluster-wide behaviour with conﬁdence levels. Diamonds, circles and rectangles shows socket (artifact), ﬁles (artifact), and process
(activity) respectively. We removed edge relationships for readability.
(a)
(b)
Security Analysis of Docker Store.
To demonstrate the
potential security risks in the container ecosystem, we down-
loaded 140 ofﬁcial images and top 500 community images
from Docker Store. Then, using Anchore’s cve-scan tool [7]
we statically analyzed the operating system packages built-
in or downloaded by these Docker images. cve-scan catego-
rizes the vulnerabilities present in container images using the
Common Vulnerability Scoring System V3 (CVSS)1 provided
by CVE database, which speciﬁes four severity levels for
vulnerabilities: Low, Medium, High, and Critical. As shown
in Figure 2a and 2b, cve-scan uncovers thousands of CVE’s
in both ofﬁcial and community images.2 Moreover, we found
that over 70% of ofﬁcial images have at least one High severity
vulnerability (Figure 2b). These results indicate that security
threats abound in the container ecosystem, underscoring the
importance of developing runtime auditing solutions to con-
tainer clusters.
B. Motivating Attack Scenario
To characterize the limitations of existing cluster auditing
systems, we now consider a concrete scenario in which audit
records can be used to diagnose an attack – an online ﬁle
storage webservice which allows users to upload and download
ﬁles using FTP. The webservice consists of a cluster with
one master node and 4 worker nodes running 10 ProFTPD-
1.3.3c containers conﬁgured with multiple worker daemons
backed with 5 MySQL database containers for authentication.
ProFTPD-1.3.3c version is vulnerable to a remote code ex-
ecution attack3. We conﬁgured the worker nodes to stream
complete descriptions of their activities to the master node
using the Linux audit subsystem (auditd) [5], a widely used
forensic tracking tool for Linux [70]. While the master node
aggregated audit records from the workers’ auditd streams,
we generated a 3 minute workﬂow of heterogeneous requests
1See https://nvd.nist.gov/vuln-metrics/cvss
2cve-scan does not analyze vulnerabilities in package managers such
as NPM, PIP, and Maven. Nor does it detect insecure conﬁguration settings,
making our assessment a conservative lower bound on the severity of Docker
insecurity.
3Available at https://www.exploit-db.com/exploits/15662/
3
during which an attack was launched on one of the nodes’
container. The attack used the ProFTPD-1.3.3c vulnerability
to obtain bash access and download a backdoor program to
gain persistent access to the container.
The master node’s view of the cluster is shown in Figure 3a,
where the worker nodes’ auditd streams are represented as
provenance directed acyclic graph (DAG) [39] detailing the
causal relations of the system. The graph has been simpliﬁed
for readability; each node’s graph was roughly 2 MB in
size and contained around 2,000 vertices. The subgraph titled
Attack Provenance only appears in Node 1, whereas the
remainder of Node 1’s graph is operationally equivalent to the
activities of the other nodes. Based on this exercise, we observe
fundamental limitations to leveraging system-layer audits in
large clusters:
– Graph Complexity. Ideally, an administrator would have the