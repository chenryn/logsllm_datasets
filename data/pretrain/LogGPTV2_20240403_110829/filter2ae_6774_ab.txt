下面是钱包合约的内容：
    contract Wallet is WalletEvents {
      // WALLET CONSTRUCTOR
      //   calls the `initWallet` method of the Library in this context
      function Wallet(address[] _owners, uint _required, uint _daylimit) {
        // Signature of the Wallet Library's init function
        bytes4 sig = bytes4(sha3("initWallet(address[],uint256,uint256)"));
        address target = _walletLibrary;
        // Compute the size of the call data : arrays has 2
        // 32bytes for offset and length, plus 32bytes per element ;
        // plus 2 32bytes for each uint
        uint argarraysize = (2 + _owners.length);
        uint argsize = (2 + argarraysize) * 32;
        assembly {
          // Add the signature first to memory
          mstore(0x0, sig)
          // Add the call data, which is at the end of the
          // code
          codecopy(0x4,  sub(codesize, argsize), argsize)
          // Delegate call to the library
          delegatecall(sub(gas, 10000), target, 0x0, add(argsize, 0x4), 0x0, 0x0)
        }
      }
      // METHODS
      // gets called when no other function matches
      function() payable {
        // just being sent some cash?
        if (msg.value > 0)
          Deposit(msg.sender, msg.value);
        else if (msg.data.length > 0)
          _walletLibrary.delegatecall(msg.data);
      }
      // Gets an owner by 0-indexed position (using numOwners as the count)
      function getOwner(uint ownerIndex) constant returns (address) {
        return address(m_owners[ownerIndex + 1]);
      }
      // As return statement unavailable in fallback, explicit the method here
      function hasConfirmed(bytes32 _operation, address _owner) external constant returns (bool) {
        return _walletLibrary.delegatecall(msg.data);
      }
      function isOwner(address _addr) constant returns (bool) {
        return _walletLibrary.delegatecall(msg.data);
      }
      // FIELDS
      address constant _walletLibrary = 0xcafecafecafecafecafecafecafecafecafecafe;
      // the number of owners that must confirm the same operation before it is run.
      uint public m_required;
      // pointer used to find a free slot in m_owners
      uint public m_numOwners;
      uint public m_dailyLimit;
      uint public m_spentToday;
      uint public m_lastDay;
      // list of owners
      uint[256] m_owners;
    }
在此合约中，我们能看到支付函数中存在`_walletLibrary.delegatecall(msg.data);`。而我们知道倘若我们令其系统执行了此函数，那么我们就可以随心所欲的执行所有`_walletLibrary`中的内容了。
    function() payable {
        // just being sent some cash?
        if (msg.value > 0)
          Deposit(msg.sender, msg.value);
        else if (msg.data.length > 0)
          _walletLibrary.delegatecall(msg.data);
      }
此时，我们通过往这个合约地址转账一个value = 0, msg.data.length >
0的交易，以执行_walletLibrary.delegatecall分支。
并将msg.data中传入我们要执行的`initWallet ()`函数。而此类函数的特性也就帮助我们将钱包进行了初始化。又由于钱包初始化函数
`initMultiowned()`未做校验，可以被多次调用。所以尽管钱包在最初的时候进行了合法的初始化，但是我攻击者可以将其系统中进行修改，迫使系统代码自行将所有的地址更变为攻击值的地址值。
流程图如下：
之后，攻击者执行execute()函数。
    // Outside-visible transact entry point. Executes transaction immediately if below daily spend limit.
      // If not, goes into multisig process. We provide a hash on return to allow the sender to provide
      // shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value
      // and _data arguments). They still get the option of using them if they want, anyways.
      function execute(address _to, uint _value, bytes _data) external onlyowner returns (bytes32 o_hash) {
        // first, take the opportunity to check that we're under the daily limit.
        if ((_data.length == 0 && underLimit(_value)) || m_required == 1) {
          // yes - just execute the call.
          address created;
          if (_to == 0) {
            created = create(_value, _data);
          } else {
            if (!_to.call.value(_value)(_data))
              throw;
          }
          SingleTransact(msg.sender, _value, _to, _data, created);
        } else {
          // determine our operation hash.
          o_hash = sha3(msg.data, block.number);
          // store if it's new
          if (m_txs[o_hash].to == 0 && m_txs[o_hash].value == 0 && m_txs[o_hash].data.length == 0) {
            m_txs[o_hash].to = _to;
            m_txs[o_hash].value = _value;
            m_txs[o_hash].data = _data;
          }
          if (!confirm(o_hash)) {
            ConfirmationNeeded(o_hash, msg.sender, _value, _to, _data);
          }
        }
      }
而我们可以看到函数中的`external onlyowner`。
    // simple single-sig function modifier.
    modifier onlyowner {
        if (isOwner(msg.sender))
            _;
    }
此函数使攻击者不能轻易的进行转账操作，但是我们之前所有的操作均是为了将此函数绕过（通过修改owner地址）。
此时我们的黑客就可以收钱了hhh。
### 四、总结
简单来说，此次攻击存在代码过滤不严格的情况。首先是没有代码去检查钱包初始化是否执行过，导致初始化函数可以多次使用。除此之外，我们给与用户的权限过于大，也就是自由发展带来的损失。所以为了生态圈的“野蛮生长”，我们既要放开绳子，又要对核心层进行严格把关。
如何解决上述问题呢？我们可以定义一下限制器函数。
    // throw unless the contract is not yet initialized.
    modifier only_uninitialized {
        if (m_numOwners > 0) throw; 
            _;
    }
并在上述初始化函数中进行使用，以便使这些函数无法多次调用。
本稿件的分析是我经过大量阅读已经自己的分析后进行的详细总结，因为我想将内容讲到更细节的地方，所以分析的内容较多。如果大家有什么想法进行交流讨论，可以在下方评论。谢谢！
### 五、参考链接
  * 1 [https://baijiahao.baidu.com/s?id=1608675086808181221&wfr=spider&for=pc](https://baijiahao.baidu.com/s?id=1608675086808181221&wfr=spider&for=pc)
  * 2 
  * 3 
  * 4 
  * 5 
  * 6 
  * 7 
**本稿为原创稿件，转载请标明出处。谢谢。**