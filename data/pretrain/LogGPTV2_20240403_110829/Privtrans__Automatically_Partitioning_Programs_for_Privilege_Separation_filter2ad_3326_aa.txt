title:Privtrans: Automatically Partitioning Programs for Privilege Separation
author:David Brumley and
Dawn Xiaodong Song
USENIX Association
Proceedings of the
13th USENIX Security Symposium
San Diego, CA, USA
August 9–13, 2004
© 2004 by The USENIX Association
Phone: 1 510 528 8649
All Rights Reserved
FAX: 1 510 548 5738
Rights to individual papers remain with the author or the author's employer.
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Privtrans: Automatically Partitioning Programs for Privilege Separation
David Brumley and Dawn Song
Carnegie Mellon University
{david.brumley,dawn.song}@cs.cmu.edu ∗
Abstract
Privilege separation partitions a single program into two
parts: a privileged program called the monitor and an
unprivileged program called the slave. All trust and
privileges are relegated to the monitor, which results in
a smaller and more easily secured trust base. Previ-
ously the privilege separation procedure, i.e., partition-
ing one program into the monitor and slave, was done
by hand [18, 28]. We design techniques and develop a
tool called Privtrans that allows us to automatically in-
tegrate privilege separation into source code, provided
a few programmer annotations. For instance, our ap-
proach can automatically integrate the privilege separa-
tion previously done by hand in OpenSSH, while enjoy-
ing similar security beneﬁts. Additionally, we propose
optimization techniques that augment static analysis with
dynamic information. Our optimization techniques re-
duce the number of expensive calls made by the slave to
the monitor. We show Privtrans is effective by integrat-
ing privilege separation into several open-source appli-
cations.
1 Introduction
Software security provides the ﬁrst
line of defense
against malicious attacks. Unfortunately, most software
is written in unsafe languages such as C. Unsafe opera-
tions may lead to buffer overﬂows, format string vulnera-
bilities, off-by-one errors, and other common vulnerabil-
ities. Exploiting a vulnerability can subvert a programs’
logic, resulting in unintended execution paths such as in-
appropriately running a shell.
∗This research was supported in part by NSF and the Center for
Computer and Communications Security at Carnegie Mellon under
grant DAAD19-02-1-0389 from the Army Research Ofﬁce. The views
and conclusions contained her are those of the authors and should not
be interpreted as necessarily representing the ofﬁcial policies or en-
dorsements, either expressed or implied, of ARO, NSF, Carnegie Mel-
lon University, or the U.S. Government or any of its agencies.
Privileged programs — programs that run with elevated
privileges — are the most common attack targets. A suc-
cessful exploit may allow the attacker to execute arbi-
trary instructions with the elevated privileges. Even if
attackers cannot execute arbitrary instructions, they may
be able to change the semantics of the code by disabling
a policy of the program. For example, an exploit may
disable or alter an “if” statement that checks for success-
ful authentication.
The number of programs that execute with privileges on
a system is typically high, including setuid/setgid pro-
grams (e.g., ping), common network daemons (e.g., web-
servers), and system maintenance programs (e.g., cron).
In order to prevent a compromise, every privileged pro-
gram on a system must be secured.
Privilege separation is one promising approach to im-
proving the safety of programs. Privilege separation par-
titions a single program into two programs: a privileged
monitor program that handles all privileged operations,
and an unprivileged slave program that is responsible for
everything else. The monitor and slave run as separate
processes, but communicate and cooperate to perform
the same function as the original program. When neces-
sary, a program can be separated into more than 2 pieces.
In this paper we show how to automatically add privi-
lege separation to a program. The overall procedure for
adding privilege separation to a program is depicted in
Figure 1. The programmer supplies the source code and a
small number of annotations to indicate privileged oper-
ations. Our tool, Privtrans, then automatically performs
inter-procedural static analysis and C-to-C translation to
partition the input source code into two programs: the
monitor and slave.
Safety between the slave and monitor is primarily pro-
vided by process isolation in the operating system. Thus,
a compromise of the slave does not compromise the mon-
itor. The slave and monitor communicate via either inter-
process or inter-network sockets.
not just system calls.
Static analysis can be used to ﬁnd bugs in programs [9,
12, 11, 19, 32, 37, 42]. However, it is difﬁcult to perform
precise static analysis on C programs. Our approach is
to use static analysis as a tool to help partition the input
source code, not ﬁnd bugs. We rely upon process isola-
tion for safety. We also use dynamic information to aug-
ment static analysis to reduce the number of expensive
calls made by the slave to the monitor.
Provos et al. demonstrated the value of privilege separa-
tion in OpenSSH [28]. However, they manually edited
OpenSSH to incorporate privilege separation. When
privilege separation is enabled, OpenSSH resists several
attacks [8, 23, 24]. Our techniques enable automatic
privilege separation for programs, including OpenSSH.
Privman [18], a library for partitioning applications, pro-
vides an API a programmer can use when adding privi-
lege separation to a program. However, the library can
only make authorization decisions and does not provide
complete mediation. Further, the programmer must man-
ually edit the source at every call point to use the corre-
sponding Privman equivalent. Our method uses data ﬂow
techniques to automatically ﬁnd the proper place to insert
calls to the monitor, and allows for ﬁner-grained policies
than access control. Policies are discussed in section 2.3.
1.2 Our contributions
In this paper, we describe our techniques that allow our
tool Privtrans to automatically add privilege separation to
programs. The programmer provides a few simple anno-
tations to variables or functions that could be privileged.
Privtrans then statically propagates the attributes by per-
forming inter-procedural analysis on the source code to
ﬁnd privileged call sites. Privtrans then performs C-to-
C translation to partition the input source code into the
source code for the monitor and slave. Privtrans also au-
tomatically inserts dynamic checks which reduce over-
head by limiting the number of expensive calls from the
slave to the monitor.
Our contributions include:
• We design new techniques that allow us to de-
velop the ﬁrst tool for automatic privilege separa-
tion. Our automatic approach makes it easy to add
privilege separation to many programs. We use a
strong model for privilege separation (section 2).
Figure 1: We automatically incorporate privilege sepa-
ration into source code by partitioning it into two pro-
grams: the monitor which handles privileged operations
and the slave which executes everything else. The pro-
grammer supplies a few annotations to help Privtrans de-
cide how to properly partition the input source code.
The monitor exports only a limited interface to the slave.
As a result, a compromised slave can execute only a lim-
ited number of privileged operations. Without privilege
separation, a compromised slave may be able to run ar-
bitrary instructions with the elevated privileges.
The monitor can further limit allowed privileged oper-
ations by employing policies. Since the slave asks the
monitor to perform privileged operations on its behalf,
the monitor can be viewed as interposing between priv-
ileged operations and the main execution in the slave.
Policies can be ﬁne-grained and express what privileged
operations (or sequence of operations) are allowed, and
are enforced during interposition.
1.1 Related approaches
In this section we discuss closely related approaches for
the purpose of comparison. A thorough treatment of re-
lated work can be found in section 6.
System call interposition [1, 5, 14, 16, 27] monitors sys-
tem calls and decides whether to allow or deny a call
based upon a user-speciﬁed policy. Privilege separation
is different from system call interposition because it stat-
ically changes the source code of a program. As a result,
privilege separation can interpose on any function call,
Our approach allows for ﬁne-grained policies (sec-
tion 2). With only a few annotations provided by the
programmer, our tool automatically performs inter-
procedural static analysis and C-to-C translation
to partition a program into the privilege-separated
monitor and slave programs (section 3).
Our results show that our approach is able to limit
the interface exported by the monitor to the slave
automatically. Furthermore, our experiments (sec-
tion 4) demonstrate that the interface exported be-
tween the monitor and slave using our automatic
privilege separation is comparable to manually in-
tegrating privilege separation. These results indi-
cate that our automatic privilege separation can en-
joy similar security as manual privilege separation.
As an additional beneﬁt, automatic program transla-
tion, as opposed to manually changing code, allows
us to track and re-incorporate privilege separation
as the source code evolves.
• We design and develop techniques to augment static
analysis with dynamic information to improve efﬁ-
ciency. Since static analysis of C programs is con-
servative, we insert dynamic checks to reduce the
number of expensive calls made by the slave to the
monitor.
• We allow for privilege separation in a distributed
setting. Previous work only considered the mon-
itor and slave running on the same host [18, 28].
Running the monitor and slave on different hosts
is important in many scenarios (section 2), such as
privilege separation in OpenSSL (section 4).
1.3 Organization
Section 2 introduces the model we use for privilege sep-
aration, the components needed for automatic privilege
separation, and the requirements for programmers using
privilege separation. Section 3 details our techniques and
implementation of Privtrans. Section 4 shows Privtrans
works on several different open-source programs. We
then discuss when our techniques are applicable in sec-
tion 5. We discuss related work in section 6, followed
by the conclusion.
2 The general approach to automatic priv-
ilege separation
In this section we begin by describing the model we use
for privilege separation. We then discuss the compo-
nents needed for automatic privilege separation. Last,
we discuss components that need to be supplied by the
programmer.
2.1 Our model for privilege separation
In our model the monitor must mediate access to all priv-
ileged resources, including the data derived from such a
resource. Speciﬁcally, it is not sufﬁcient for the mon-
itor to only perform access control. The monitor, and
hence privileged data, functions, and resources, must be
in an address space that is inaccessible from the slave.
Our model is the same used by Provos et al. [28], but
is stronger than that of Privman [18], since it encom-
passes both access control and protecting data derived
from privileged resources.
It is often insufﬁcient to only perform access control on
privileged resources – it is also important to protect the
data derived from the privileged resource. For example,
if a program requires access to a private key, we may
wish to regulate how that key is used, e.g., the key should
not be leaked to a third party. Access control only allows
us to decide whether to allow or deny a program access
to the private key. A subsequent exploit may reveal that
key to a third party. With privilege separation, the mon-
itor controls the private key at all times. As a result, the
monitor can ensure the key is not leaked. In our model
policies can be expressed for both access control and pro-
tecting data data derived from privileged resources.
We assume that the original program accesses privileged
resources through a function call. This assumption is
naturally met by most programs, as privileges are only
needed for a system call (such as opening a ﬁle and sub-
sequently reading it) or library call (such as reading in a
private key and subsequently using it to decrypt).
2.2 Components needed for automatic privi-
lege separation
In order to create the monitor and slave from the given
source code, automatic privilege separation requires:
1.
2.
int sndsize = 128*1024;
int s = socket(AF INET,
SOCK RAW, IPPPROTO ICMP);
3.
setsockopt(s, SOL SOCKET,
SO SNDBUF, & sndsize,
&(sizeof(sndsize)));
Figure 2: The monitor must track the socket created
on line 2, and relate it to a subsequent call such as
setsockopt on line 3.
1. A mechanism for identifying privileged resources,
i.e., functions that require privileges or data ac-
quired from calling a function that requires privi-
leges.
2. An RPC mechanism for communication between
the monitor and slave. The RPC mechanism in-
cludes support for marshaling/demarshaling arbi-
trary data types that the slave and monitor may ex-
change.
3. A storage mechanism inside the monitor for stor-
ing the result of a privileged operation in case it is
needed in a later call to the monitor.
The third mechanism, storage, is needed when multiple
calls to the monitor may use the same privileged data.
Consider the sequence of calls given in Figure 2. On line
2 a socket is created. Since the socket is a raw socket, its
creation is a privileged operation and must be executed in
the monitor. At this point the monitor creates the socket,
saves the resulting ﬁle descriptor sock, and returns an
opaque index to the ﬁle descriptor to the slave. On line
3 the slave calls setsockopt on the privileged socket.
To accomplish this the slave asks the monitor to perform
the call and provides it with the opaque index from line 2.
The monitor uses the index to get the ﬁle descriptor for
sock, performs setsockopt, and returns the result.
Note that if the monitor passed the ﬁle descriptor to the
slave, we could not enforce any policies on how the ﬁle
descriptor may be used.
Our tool, Privtrans, provides all three mechanisms. The
programmer supplies a few annotations to mark privi-
leged resources. Privtrans then automatically propagates
attributes to locate all privileged functions and data. We
supply a base RPC library, drop-in replacement wrap-
pers for common privileged calls, and the monitor itself
including the state store. Thus, the programmer is re-
sponsible only for adding a few annotations and deﬁning
appropriate policies.
2.3 Annotations and policies supplied by the
user
Annotations Privtrans deﬁnes two C type qualiﬁer [2]
annotations for variables and functions: the “priv” and
“unpriv” annotations 1. The programmer uses the “priv”
annotation to mark when a variable is initialized by ac-
cessing a privileged resource, or when a function is priv-
ileged and should be executed in the monitor. The “un-
priv” attribute is only used when downgrading a privi-
leged variable.
After the programmer supplies the initial annotations,
propagation infers the dependencies between privileged
operations and adds the privileged attribute as necessary.
Propagation is discussed further in section 3.
The “priv” and “unpriv” attributes are used to partition
the source code into the monitor source and the slave
source. If a variable has the privileged attribute, it should
only be accessed in the monitor. Similarly, if a function
has the privileged attribute, it should only be executed
in the monitor. All other statements and operations are
executed in the slave.
The programmer decides where to place annotations
based upon two criteria: what resources are privileged in
the OS, and what is the overall security goal. A resource
is privileged if it requires privileges to access, e.g., open-
ing a protected ﬁle.
Annotations can also be placed so that the resulting slave
and monitor meet a site-speciﬁc security goal. For exam-
ple, a site-speciﬁc goal may state all private key opera-
tions happen on a secured server. With properly placed
annotations the source will be partitioned such that only
the monitor has access to the private keys. The monitor
can then be run on the secured server, while the slave
(say using the corresponding public keys) can be run on