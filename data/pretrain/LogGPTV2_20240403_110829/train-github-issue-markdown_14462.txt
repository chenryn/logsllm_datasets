ES6 supports duplicate properties in object literals even in strict mode, but
some (recent versions of) browsers still fail to parse strict mode code that
has object literals with duplicate properties. Chrome 38 and Safari 8 are two
browsers like this.
Currently, the following code:
    var x = {o: 5, o: 6};
transpiles to
    "use strict";
    var x = { o: 5, o: 6 };
which entirely fails to parse in some browsers.
Could babel transpile code with duplicate properties in object literals as
defining an object literal with no duplicate properties, and then assigning
further properties, similar to how computed keys are handled? So that way
    var x = {o: 5, o: 6};
and
    var x = {o: 5, ["o"]: 6};
would both transpile to the same following thing, which works in all browsers:
    "use strict";
    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    var x = _defineProperty({ o: 5 }, "o", 6);