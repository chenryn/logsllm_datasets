# 七、创建 ECS 集群
在上一章中，您学习了如何构建定制的 ECS 容器实例 Amazon Machine Image (AMI)，它介绍了您在生产实际用例中通常需要的功能，包括定制的存储配置、CloudWatch 日志支持以及与 CloudFormation 的集成。
在本章中，您将使用您的自定义机器映像，基于您的自定义机器映像构建一个由 ECS 容器实例组成的 ECS 集群。在本章中，我们将重点关注使用基础架构即代码的方法，并使用 CloudFormation 定义您的 ECS 集群和支持资源，而不是采用前几章的方法，即讨论配置 AWS 资源的各种方法。
部署 ECS 集群的标准模型基于 EC2 自动扩展组，该组由一组 EC2 实例组成，这些实例可以根据各种因素自动扩展或缩小。在 ECS 集群的使用案例中，EC2 自动扩展组是 ECS 容器实例的集合，它们共同形成了一个 ECS 集群，您可以将 ECS 服务和 ECS 任务部署到该集群中。您将学习如何定义 EC2 自动扩展组，定义控制 EC2 实例部署方式的启动配置，以及配置 CloudFormation Init 元数据，该元数据允许您在实例创建时触发自定义初始化逻辑，并等待每个实例发出初始化成功的信号。最后，您将配置支持资源，如 IAM 实例配置文件和 EC2 安全组，继续创建您的云信息栈，并部署您的 ECS 集群和底层 EC2 自动扩展组。
将涵盖以下主题:
*   部署概述
*   定义 ECS 集群
*   配置 EC2 自动缩放组
*   定义 EC2 自动扩展启动配置
*   配置云信息初始化元数据
*   配置自动缩放组创建策略
*   配置 EC2 实例配置文件
*   配置 EC2 安全组
*   部署和测试 ECS 集群
# 技术要求
下面列出了完成本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置本地 AWS 配置文件
*   AWS CLI
此 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch7](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch7)[。](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
查看以下视频，了解《行动守则》:
[http://bit.ly/2PaK6AM](http://bit.ly/2PaK6AM)
# 部署概述
接下来两章的目标是建立使用 AWS 部署 Docker 应用的支持基础架构和资源。本着将您的基础架构定义为代码的最佳实践的精神，您将定义一个云信息模板，该模板将包括支持您在 ECS 中运行的 Docker 应用所需的所有 AWS 资源。随着每一章的深入，您将在这个模板的基础上进行构建，缓慢但肯定地添加越来越多的资源，直到您有一个完整的解决方案来使用 ECS 在 AWS 中部署您的 Docker 应用。
考虑到这一点，本章的重点是学习如何使用 CloudFormation 构建 ECS 集群，正如您在前面几章中已经学习到的，ECS 集群是运行 ECS 服务或 ECS 任务时可以作为目标的 ECS 容器实例的集合。
ECS 集群本身是非常简单的构造——它们只是定义了一个 ECS 容器实例的集合和一个集群名称。然而，如何形成这些集群要复杂得多，需要多种支持资源，包括以下资源:
*   **EC2 自动缩放组**:定义具有相同配置的 EC2 实例的集合。
*   **EC2 自动缩放启动配置**:定义自动缩放组中新创建实例的启动配置。启动配置通常包括用户数据脚本，这些脚本在第一次运行时由实例执行，并可用于触发您在上一章的自定义机器映像中安装的 cloud information 帮助器脚本，以与 CloudFormation Init 元数据进行交互。
*   **cloud information Init Metadata**:定义自动扩展组中的每个 EC2 实例在初始创建时应该运行的初始化逻辑，例如运行配置命令、启用服务以及创建用户和组。CloudFormation Init Metadata 比用户数据提供的资源调配功能更强大，最重要的是，它为每个实例提供了一种机制，向 cloud information 发出信号，表明该实例已经成功地自行进行了资源调配。
*   **云信息创建策略**:定义标准，确定云信息何时可以认为 EC2 自动扩展组已成功创建，并继续在云信息栈中提供其他依赖项。这是基于云信息从每个 EC2 实例接收可配置数量的成功消息，该实例是 EC2 自动缩放组的一部分。
There are other ways you can form ECS clusters, but for large-scale production environments, you generally want to use EC2 Auto Scaling groups and use CloudFormation and associated CloudFormation Init Metadata and Creation Policies to deploy your clusters in a robust, repeatable, infrastructure-as-code manner.
这些组件如何协同工作最好用一个图表来描述，接下来是对这些组件如何形成 ECS 集群的简短描述，之后您将继续学习如何执行创建您自己的 ECS 集群所需的每个相关配置任务。
下图说明了创建 ECS 集群的部署过程，假设您使用的是 EC2 自动扩展组和云信息:
![](img/8fb418d5-187f-43c2-baa4-5def9d81bef0.png)
ECS cluster deployment overview using EC2 Auto Scaling Groups and CloudFormation
在上图中，一般方法如下:
1.  作为云信息部署的一部分，云信息确定它准备好开始创建已配置的 ECS 集群资源。ECS 群集资源将在云信息初始化元数据中引用，该元数据是 EC2 自动扩展启动配置资源的一部分，因此必须首先创建该 ECS 群集资源。请注意，此时，ECS 集群为空，正在等待 ECS 容器实例加入集群。
2.  CloudFormation 创建了一个 EC2 自动扩展启动配置资源，该资源定义了 EC2 自动扩展组中的每个 EC2 实例将在实例创建时应用的启动配置。启动配置包括一个用户数据脚本，该脚本调用安装在 EC2 实例上的 CloudFormation 帮助器脚本，该脚本又下载 CloudFormation Init 元数据，该元数据定义了每个实例在创建时应该执行的一系列命令和其他初始化操作。
3.  创建启动配置资源后，云信息会创建 EC2 自动缩放组资源。自动缩放组的创建将触发 EC2 自动缩放服务，以在组中创建可配置的所需数量的 EC2 实例。
4.  当每个 EC2 实例启动时，它会应用启动配置，执行用户数据脚本，并下载和执行 CloudFormation Init Metadata 中定义的配置任务。这将包括各种初始化任务，在我们的特定用例中，实例将执行您在上一章中添加到您的自定义机器映像中的第一个运行脚本，以加入已配置的 ECS 集群，确保 CloudWatch logs 代理配置为登录到正确的 CloudWatch 日志组，启动并启用 Docker 和 ECS 代理，最后，验证 EC2 实例是否成功加入 ECS 集群，并向 CloudFormation 发出信号，表明 EC2 实例已成功启动。
5.  自动缩放组配置有创建策略，这是 cloud information 的一个特殊功能，它使 cloud information 等待，直到从自动缩放组中的 EC2 实例接收到可配置数量的成功信号。通常，您会将其配置为 EC2 自动扩展组中的所有实例，确保所有实例都已成功加入 ECS 群集，并且在继续执行其他资源调配任务之前状态良好。
6.  有了从 EC2 自动扩展组派生的正确数量的 ECS 容器实例的 ECS 集群，云信息可以安全地调配需要健康的 ECS 集群的其他 ECS 资源。例如，您可能会创建一个 ECS 服务，它会将您的容器应用部署到您的 ECS 集群中。
# 定义 ECS 集群
现在，您已经大致了解了 ECS 群集资源调配过程，让我们逐步了解启动和运行 ECS 群集所需的配置。
正如部署概述中所指出的，您将使用云信息以基础架构即代码的方式创建您的资源，并且因为您正处于这一旅程的起点，所以您首先需要创建这个云信息模板，我假设您正在名为`stack.yml`的文件中定义该模板，该文件位于您之前在第 5 章- *中创建的 **todobackend-aws** 存储库的根目录下，使用 ECR* 发布 Docker 映像，如下例所示:
```
> touch stack.yml
> tree .
.
├── ecr.yml
└── stack.yml
0 directories, 2 files
```
Establishing the todobackend-aws repository
现在，您可以在`stack.yml`文件中建立一个框架云信息模板，并创建您的 ECS 集群资源:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: Todobackend Application
Resources:
  ApplicationCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: todobackend-cluster
```
Defining a CloudFormation template
正如您在前面的示例中看到的，定义一个 ECS 集群非常简单，其中`AWS::ECS::Cluster`资源类型只有一个名为`ClusterName`的可选属性。确保您的环境配置了正确的 AWS 配置文件后，您现在可以使用`aws cloudformation deploy`命令创建和部署栈，并使用`aws ecs list-clusters`命令验证您的集群是否已创建，如下例所示:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --template-file stack.yml --stack-name todobackend
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - todobackend
> aws ecs list-clusters
{
    "clusterArns": [
        "arn:aws:ecs:us-east-1:385605022855:cluster/todobackend-cluster"
    ]
}
```
Creating an ECS cluster using CloudFormation
# 配置 EC2 自动缩放组
您已经建立了一个 ECS 集群，但是如果没有 ECS 容器实例来提供容器运行时和计算资源，集群就没有多大用处。此时，您可以创建单独的 ECS 容器实例并将它们加入集群，但是，如果您需要运行需要支持几十个或几百个容器的生产工作负载，根据集群的当前资源需求动态地向集群添加和删除 ECS 容器实例，这种方法是不可行的。
为您的 ECS 容器实例提供这种行为的 AWS 机制是 EC2 自动扩展组，它作为 EC2 实例的集合运行，这些实例共享被称为启动配置的相同配置。EC2 自动扩展服务是由 AWS 提供的托管服务，负责管理 EC2 自动扩展组和组成该组的 EC2 实例的生命周期。这种机制提供了云的核心原则之一——弹性——并允许您动态地增加或减少服务于您的应用的 EC2 实例的数量。
在 ECS 的上下文中，您通常可以认为 ECS 集群与 EC2 自动扩展组有密切的关联，而 ECS 容器实例是 EC2 自动扩展组中的 EC2 实例，其中 ECS 代理和 Docker 引擎是在每个 EC2 实例上运行的应用。严格来说，这并不正确，因为您可以拥有跨多个 EC2 自动扩展组的 ECS 集群，但是通常在您的 ECS 集群和 EC2 自动扩展组之间构建一对一的关系，将 ECS 容器实例直接链接到 EC2 实例。
现在，您已经了解了 EC2 自动缩放组的基本背景以及它们与 ECS 的具体关系，概述创建 EC2 自动缩放组时需要与之交互的各种配置结构非常重要:
*   **自动缩放组**:定义 EC2 实例的集合，并为该组指定最小、最大和理想容量。
*   **启动配置**:启动配置定义了在实例创建时应用于每个 EC2 实例的通用配置。
*   **CloudFormation Init 元数据**:定义可以在实例创建时应用的自定义初始化逻辑。
*   **IAM 实例配置文件和角色**:授予每个 EC2 实例与 ECS 服务交互并发布到 CloudWatch 日志的权限。
*   **EC2 安全组**:定义入口和出口网络策略规则。至少，这些规则必须允许运行在每个 EC2 实例上的 ECS 代理与 ECS 应用编程接口通信。
Note that I am presenting a top-down approach of defining the requirements for an EC2 Auto Scaling group, which is possible when using a declarative infrastructure-as-code approach, such as CloudFormation. When it comes to the actual implementation of these resources, they will be applied in a bottom-up manner, where dependencies, such as security groups and IAM roles, are first created, after which the launch configuration, and finally the Auto Scaling group will be created. This, of course, is handled by CloudFormation, so we can focus on the desired state configuration and let CloudFormation deal with the specific imperative execution requirements of meeting the desired state.
# 创建 EC2 自动缩放组
创建 EC2 自动缩放组时，您需要定义的第一个资源是 EC2 自动缩放组本身，用云信息术语来说，它被定义为`AWS::AutoScaling::AutoScalingGroup`类型的资源:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: Todobackend Application
Parameters:
  ApplicationDesiredCount:
 Type: Number
 Description: Desired EC2 instance count
  ApplicationSubnets:
 Type: List
 Description: Target subnets for EC2 instances
Resources:
  ApplicationCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: todobackend-cluster
  ApplicationAutoscaling:
 Type: AWS::AutoScaling::AutoScalingGroup
 Properties:
 LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration
 MinSize: 0
 MaxSize: 4
 DesiredCapacity: !Ref ApplicationDesiredCount
 VPCZoneIdentifier: !Ref ApplicationSubnets
 Tags:
 - Key: Name
 Value: !Sub ${AWS::StackName}-ApplicationAutoscaling-instance
 PropagateAtLaunch: "true"
```
Defining an EC2 Auto Scaling group