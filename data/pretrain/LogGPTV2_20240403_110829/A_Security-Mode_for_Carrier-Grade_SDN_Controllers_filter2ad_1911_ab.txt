### Network Segmentation and Application Permissions

Network segmentation allows the global topology to be divided into sub-topologies, each consisting of a subset of switches. We propose a new form of topology permissions that can restrict applications to operate within a Network Operating System (NOS)’s virtual network abstraction. This approach enables operators to assign applications to manage only specific devices within their assigned virtual networks while maintaining a global view of the entire topology. By employing topology permissions, our security extension can reduce instabilities caused by unexpected interactions among deployed applications, which might otherwise fail to coordinate in managing shared devices.

#### Traffic Authority Partitioning

Another critical capability for managing applications is partitioning the IP address ranges or network service flows that each Software-Defined Networking (SDN) application can manage. This requires understanding the parameters submitted in flow modifications. Similar to topology permissions, a NOS operator may wish to deploy an application to manage only a subset of addresses or services within the global network. For example, an HTTP load balancer should be constrained to manage only web-related traffic (e.g., ports 80 and 443/TCP), preventing it from issuing flow management requests for other non-HTTP flows. This feature allows the NOS operator to designate applications as lead authorities for specific subsets of network traffic, minimizing conflicts among peer SDN applications.

### Permission Model

Our objective is to design an optional security extension for existing distributed controller frameworks to address the challenges outlined above. This extension enhances the NOS application management facilities, introducing a security mode that can be integrated into platforms like ONOS and ODL.

#### Key Features of the Security Extension

1. **Control Over Northbound APIs and Services**: Operators can enable or constrain each application’s use of Northbound APIs and services.
2. **Topology and Traffic Access Constraints**: Applications can be restricted to specific subsets of the network’s topology and traffic.

#### Types of Application Permissions

Permissions are expressed in two forms: developer-specified and operator-specified.

**Developer-Specified Permissions**:
1. **Bundle-level Role**: Determines whether the code package is run as a “non-app” or “app” OSGi bundle.
2. **Application-level Role**: Assigns roles such as “admin” or “user” to control access to admin and regular services.
3. **API-level Permissions**: Specifies the set of API-level permissions used by the application, enforced through a deny-by-default policy.

**Operator-Specified Permissions**:
1. **Topology Access Constraints**: Restricts applications to specific virtual networks.
2. **Header-space Access Constraints**: Limits applications based on header-space criteria (IP address ranges, ports, and protocols).

### Detailed Permission Mechanisms

#### Bundle-level RBAC

In modular NOSs like ONOS and ODL, which use the OSGi framework, Bundle-level Role-Based Access Control (RBAC) is the coarsest level of control. The developer specifies whether the code package should run as a “non-app” or “app” OSGi bundle. Non-app bundles are part of the trusted ONOS code base and have full permissions, while app bundles run in a constrained environment.

#### Application-level RBAC

Each Northbound service in OSGi-based NOSs comprises a set of APIs performing similar operations. There are two types of services: Admin services and Regular services. Admin services include sensitive operations, and their use is controlled by assigning “admin” or “user” roles to applications. Admin applications have access to both admin and regular services, while user applications are limited to regular services.

#### API-level PBAC

API-level Permission-Based Access Control (PBAC) ensures that applications perform only the operations they were audited for. A deny-by-default policy is employed, allowing an application to use a given API only if it has the necessary permission. This provides fine-grained control over API usage, with well-defined and intuitive permission types.

#### Network-level PBAC

Network-level permissions, defined by the operator at deployment time, provide custom access partitioning for each application over the target network. These permissions are defined using two schemes:

1. **Header-space Permissions**: Restrict applications based on IP address ranges, ports, and protocols.
2. **Topology-based Permissions**: Restrict applications to specific virtual networks, effectively filtering flow modifications and intent requests to devices outside those networks.

### System Design

To verify the feasibility and effectiveness of the security extension, we implemented Security-mode for ONOS (SM-ONOS). The system design includes key insertion points where security extensions are added and their functions.

#### SM-ONOS Overview

SM-ONOS effectively sandboxes applications by logically separating the underlying Network-OS layer from host applications. It leverages the Felix OSGi security extension and JavaSE 1.2 security to enforce access-control policies.

#### Policy Expression

In security mode, each application must include a security policy file at distribution time. This file defines the role and required permissions of the application. During installation, the policy file is parsed and stored within ONOS. The end-user (operator) can also supply a network policy file to enable network-level access control features, restricting the application’s ability to read, write, or alter flows from specified portions of the managed network.

### Conclusion

By implementing these permission mechanisms, SM-ONOS enhances the security and stability of NOSs, enabling finer control over application behavior and reducing potential conflicts and instabilities in the network.