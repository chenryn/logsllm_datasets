straction, enabling the global topology to be segmented into sub-
topologies that are composed of subsets of switches. We seek a new
form of topology permissions that can constrain applications to
operate within a NOS’s virtual network abstraction. Doing so will
enable operators to target applications to manage only those de-
vices within the virtual network they are assigned, while also main-
taining their global view of the entire topology. When applicable
for a given deployment scenario, employing topology permissions
within our security extension could reduce instabilities that may
arise from unexpected interactions among deployed applications
that would otherwise fail to coordinate in the management of a
common device.
How to partition traffic authority among applications? An-
other highly desirable capability for managing applications is that
of partitioning which IP address range or network service flows
each SDN application may manage. This form of access permission
requires an understanding of the parameters that an application
submits within a flow mod. As with topology permissions, a NOS
operator may wish to deploy an application to manage only a sub-
set of addresses within the global network or a subset of network
services. For example, today a NOS operator who deploys an ap-
plication to efficiently manage a subset of traffic, such as an HTTP
load balancer, cannot constrain the application from managing
other flows unrelated to web services. Header-space permissions
would enable the operator to grant the load balancing application
an ability to submit flow mods and intent policies pertaining to
80,443/TCP, while preventing it from issuing flow management re-
quests for other non-HTTP flows. Such a service would enable the
NOS operator to deploy applications as lead authority for a subset
of network traffic, offering a further means to minimize conflicts
among peer SDN applications.
4 PERMISSION MODEL
Our objective is design an optional security extension to existing
distributed controller frameworks to address the challenges raised
in the previous section. To do this, we design a critical enhancement
to the NOS application management facilities, introducing an op-
tional security extension (security-mode). Here, we will discuss the
security extension in the context of its integration into the ONOS
platform. However, the features discussed here are applicable to
other comparable distributed controllers, such as ODL.
This extension allows operators to enable or constrain each ap-
plication’s use of Northbound APIs, services, and to constrain its
access to subsets of the network’s topology and traffic. Application
permissions are expressed in two forms: those that are (initially)
developer-specified and then either granted or rejected by the net-
work operator, and those that are entirely operator-specified and
assigned to each application at installation.
There are three forms of developer-specified application permis-
sions: (i) the Bundle-level role, (ii) the application-level role, and
(iii) the set of API-level permissions used by the application. These
permissions are enumerated and bundled with the application, us-
ing the application’s app.xml configuration file, as discussed later.
There are two forms of operator-specified application permission
that are (optionally) defined by the operator: (i) topology access con-
straints, and (ii) header-space access constraints. Here, we discuss
each permission and its effect on the application.
4.1 Bundle-level RBAC
One of the major design goal of the open-source NOSs, such as
ONOS or ODL, is code modularity. To increase architectural co-
herence, testability, and maintainability, the NOSs are designed
as distributed layered architecture, with crisply defined bound-
aries and responsibilities; and hence, the typical implementation
is composed of various modules (or code packages) with different
functions. In particular, ONOS and ODL leverages OSGi framework,
and such modules are referred to as OSGi bundles [21].
Bundle-level Role-Based Access Control (RBAC) is the most
coarse-grained level of control that is specified for an application.
This developer-specified role determines whether the code package
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
C. Yoon et al.
cumulatively granted to each SDN application by each access con-
trol mechanism. At the bundle level of access control, only the
minimum permissions required to access the Northbound API bun-
dles and other necessary utility bundles are selectively granted to
application bundles.
4.2 Application-level RBAC
In OSGi-based NOSs, each Northbound service comprises a set of
Northbound APIs performing similar operations. There are two
types of Northbound services: Admin services and regular Services.
Admin services include administrative APIs that perform sensitive
network and system operations. For example, in ONOS, DeviceAd-
minService provides an API for removing a selected infrastructure
device from the device inventory. Hence, the use of such services
at application-level is controlled by enforcing a second form of role
assignment (RBAC) that must be specified by the developer and
then accepted by the NOS operator.
Application-level RBAC provides a coarse-grained mechanism,
where the role of “admin” or “user” is assigned to each SDN ap-
plication bundle, and the service-level permissions are selectively
granted to each bundle according to its role, as shown in Figure 1.
Applications that operate with the “admin” role are granted per-
mission to access both the admin and regular services, while “user”
applications are limited to regular services only.
4.3 API-level PBAC
As each SDN application has the capability to directly affect the
network behavior through the injection of flow rules, it must be
carefully analyzed before the actual deployment. When an appli-
cation is deployed after the auditing process, the application must
perform only the operations that were audited, because any unex-
pected operation may both directly and indirectly affect the network
behavior. For example, an SDN application may modify the shared
network resources, which may produce unexpected network behav-
ior when other SDN applications implement flow routing decisions
based upon unexpectedly altered resource.
In security-mode, NOSs employ an API-level Permission-Based
Access Control (PBAC) mechanism to solve the problem stated
above. PBAC employs a deny-by-default policy: it allows an SDN
application to use a given API only if it has the necessary permission,
and a set of such permissions are granted to each application by
the application developer. PBAC offers the network operator with
a powerful fine-grained management control using a rich range
of permission types. The permission types utilized in this level of
access control are well-defined and intuitive for operator review.
The permission types must cover all the Northbound APIs, and
each permission type should effectively and intuitively represent
each type of SDN application operation. Accordingly, for ONOS,
we have derived several types of SDN application permissions from
the ONOS Northbound APIs based on which ONOS/network re-
source each API is accessing and which type of action (e.g. READ,
WRITE, and EVENT) it takes against the resource (see Appendix
A). Note that we do not take the administrative Northbound APIs
into account at this level of access control mechanism, because the
access to those APIs is already controlled in the previous access
control mechanism.
Figure 1: The permission model for a distributed controller
framework is illustrated in this flowchart. In security-mode,
the behavior of each NOS component bundle is controlled
by granting or revoking permissions.
should be run either as a “non-app” or as an “app” OSGi bundle. This
selection is either then affirmed by the network operator or rejected.
As its name implies, the bundle-level role-based access control is
enforced at the OSGi bundle-level. As discussed previously, ONOS is
a modular project that runs on the OSGi framework using Apache
Karaf, and is comprised of OSGi bundles with different functionali-
ties. Likewise, SDN applications are also OSGi bundles, and thus
SDN applications can be easily instantiated. When specified as an
“app” bundle, our security extension will force the application to
run in a constrained environment.
In security mode, the non-app role designation is assigned to
bundles that are intended to be part of the ONOS trusted security
boundary. Operators should only accept “non-app” bundles that are
intended to be part of the trusted ONOS code base. The behavior of
the bundles with the “non-app” role is not controlled, because they
are either a component bundle of the ONOS-kernel or the represent
ONOS-internal utility bundle. Hence, all permissions are granted
to these type of bundles, as shown in Figure 1.
OSGi bundles that are assigned the “app” role (i.e., ONOS/ODL
application bundle) represent different types of permissions are
Bundle-level RBACAPI-level PBACNetwork-level PBACis application bundle ?has admin role ?has API-permissions speciﬁed ?has network-permissions speciﬁed ?Revoke all permissions, and grant application default permissionsGrant all permissionsGrant non-administrative service permissionsGrant administrative service permissionsYESNONOYESYESGrant API-permissionsNOENDGrant network-permissionsYESApplication-level RBACNew bundleis system bundle ?YESNORevokeall permissions(network-operator speciﬁed)NOA Security-Mode for Carrier-Grade SDN Controllers
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
As illustrated in Figure 1, each SDN application is granted a set of
NOS operating permissions, and simply possessing each permission
allows the application to use a certain set of APIs. For example, if
an ONOS application is given FLOWRULE_WRITE permission in
security-mode, the application can call a specific set of the North-
bound APIs that issue/dispatch/generate/install flow mods.
4.4 Network-level PBAC
Unlike the previous access control policies, Network-level permis-
sions are optionally defined by the network operator at deployment
time, and may provide custom access partitioning for each applica-
tion over the target network. Operators can use these access control
mechanisms to reduce undesired overlap among applications that
operate in parallel over the same NOS cluster. Network-level per-
missions are defined using two distinct schemes: Header-space
permissions and topology-based permissions.
As discussed previously, while NOS instances are widely dis-
tributed to manage large networks, SDN applications can manipu-
late any portion of the managed network. SDN applications may
issue packet outs to forward network packets or issue flow mods to
forward particular network traffic to any destinations as desired.
Thus, we introduce network-level permission-based access controls,
which enable the NOS operator to constrain applications based on
header-space criteria: IP address ranges, ports, and protocols. When
defined, the security subsystem will reject all flow mods whose
parameters contain header-space criteria that do not match the
header-space constraints assigned by the NOS operator.
It is also possible to assign topology permissions to an applica-
tion. Here, the topology designates to which virtual networks the
application is granted read and write access. As discussed previ-
ously, ONOS defines virtual networks as subgraphs of the global
topology graph of network devices. Thus, in security-mode, assign-
ing the application to a set of virtual networks effectively filters all
flow mod and intent requests to all devices that fall outside those
virtual networks.
The OSGi security layer performs both monitoring and control
of OSGi-related activities, such as acquiring services, and manip-
ulating the metadata or behavior of other bundles. Of particular
interest, SM-ONOS uses the OSGi security layer to enforce both
Bundle-level RBAC and Application-level RBAC. The Java secu-
rity layer employs standard Java permissions to both manage each
application’s Northbound API access as well as Java’s native sys-
tem activities that requires FilePermission, SocketPermission, Run-
timePermission and etc.
Next, we describe how each feature enforces the access control
policies. We also discuss how we address the challenges introduced
in Section 3, including how the policy-enforcement service handles
the distributed nature of ONOS applications. This includes a discus-
sion of the mechanism used to address the issue of what to do when
developer-assigned application permissions are in conflict with the
expectations of what the ONOS operator is willing to deploy.
5.2 Policy expression
In security-mode, each application must have a security policy file
incorporated into its package at distribution time. If an application
is missing the application policy file or the file does not specify
all the information required, it cannot later be activated into the
ONOS runtime. Once distributed with policy file, the end-user of the
application (i.e., the ONOS operator) will then view and approve or
adjust this file prior to installation. Figure 2 illustrates the extension
to application preparation required for loading applications when
security-mode is enabled in ONOS.
5 SYSTEM DESIGN
In order to verify the feasibility and effectiveness of the security
extension for the advanced NOSs, we implement Security-mode for
ONOS (SM-ONOS), and this section introduces the system design of
the extension. We identify the key insertion points where security
extensions are added and describe their functions. We then discuss
how SM-ONOS enforces the access-control policies introduced in
Section 4 and how it addresses the challenges mentioned in Section
3.
5.1 SM-ONOS overview
We have designed the architecture of SM-ONOS to effectively sand-
box applications by logically separating the underlying Network-OS
layer of ONOS from unexpected or unwanted interactions from
host applications. In addition to mediating application accesses
through the ONOS core and layers below, SM-ONOS isolates the
Java Virtual Machine that hosts ONOS itself from the application
layer. We do this by leveraging both Felix OSGi security extension
implementation [27] and JavaSE 1.2 security [9].
Figure 2: SM-ONOS overview. When deploying applications
compatible with security mode, the developer must include
the application policy file within the application package be-
fore distribution, and the ONOS operator (the application’s
end-user) may optionally supply a network security policy
file to enable network-level access control feature.
The policy file must explicitly define the role of the application
and all the permissions that the application requires. During the
application installation phase, this policy file is extracted from the
package, parsed, and the extracted security policy is stored within
ONOS. We extended the application subsystem to perform the policy
load task, and once loaded the security policy is accessible within
the ONOS cluster as long as the application is installed. Figure 3
illustrates the developer-specified security policy file template.
The end-user may also supply an optional network policy file
(Figure 4) to enable network-level access control features. This file
is deployment specific, and used by the operator to restrict the
application’s ability to read, write, or alter flows from specified
portions of the managed network.
Securty-mode compatibleONOS ApplicationdistributeSecurty-Mode ONOSclusterONOS application developerSecurty-mode compatibleONOS Applicationdeploy- application auditing   - policy violation notiﬁcationONOS ApplicationONOS network operatorpolicyﬁleACSAC 2017, December 4–8, 2017, Orlando, FL, USA
C. Yoon et al.
3
4
5
6
7
8
9
10
11
12
13
14
15
DEVICE_READ
TOPOLOGY_READ
FLOWRULE_WRITE
ServicePermission
org.onosproject.demo.DemoAPI
get,register