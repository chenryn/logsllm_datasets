我们在本书中使用下面的印刷惯例：
868
---
## Page 870
斜体（Italic）
表示URL、邮件地址。
等宽字体（Constantwidth）
用于程序清单，以及在段落中引用程序元素，如变量名或函数名、
数据库、数据类型、环境变量、语句和关键字。
等宽粗体（Constantwidthbold）
表示命令或其他由用户输入的文本。
等宽斜体（Constantwidthitalic）
表示应该由用户输入的值或上下文相关的值来替代的文本。
使用代码示例
这本书的目的是帮助你完成自已的工作。一般来说，你可以在程序
中使用这本书中的代码和文档。你不需要联系我们获得许可，除非
你打算复制大量的代码。例如，写一个程序使用本书中的几段代码
是不需要获得许可的。销售或发行来自OReilly书籍的示例光盘需要
许可。引用本书来回答问题或引用示例代码不需要许可。在产品文
档中包含大量本书的示例代码需要获得许可。
我们希望在引用时说明来源，但这不是必需的。来源说明通常包括
标题、作者、出版商和ISBN号。例如：“BeautifulArchitecture,edited
by Diomidis Spinellis and Georgios Gousios.Copyright 2009 O'Reilly
Media,Inc., 978-0-596-51798-4."
如果你觉得对示例代码的使用超过了这里的许可，请通过
PI:EMAIL联系我们。
我们的联系方式
请把涉及本书的评论和疑问邮寄至以下地址：
美国：
O'Reilly Media,Inc.
869
---
## Page 871
1005 Gravenstein Highway North
Sebastopol,CA 95472
中国：
100035北京市西城区西直门南大街2号成铭大厦C座807室
奥莱利技术咨询（北京）有限公司
我们为本书制作了网页，上面列出了勘误表、示例和任何附加的信
息。该网页地址为：
http://www.oreilly.com/catalog/9780596517984
http://www.oreilly.com.cn/book.php?bn=978-7-111-28356-0
为了评论或获得本书的技术支持，请发E-mail至以下地址：
PI:EMAIL
PI:EMAIL
欲获得其他图书、会议、资源中心和OReilly网络的更多信息，请访
问以下网址：
http://www.oreilly.com
致谢
一本书的出版是一个团队努力的结果，一本合集更是如此。我们要
感谢许多人。首先，我们要感谢本书的诸位作者，他们及时地提供
了优秀的素材，然后满足了我们多次改动和修订的要求。这本书的
审阅者包括Robert A.Maksimchuk、Gary Pollice、David West、Greg
Wilson和BobbiYoung，他们给出了许多极好的建议，改进了每一章
和整本书。在O'Reilly，我们的编辑MaryTreseler帮助我们联系作
者，组织复审过程，高效地管理本书的出版过程。后来，Sarah
Schneider作为本书的制作编辑，巧妙地处理了紧张的进度计划和经
常发生冲突的要求。文字编辑GenevievedEntremont和编索引者Fred
Brown灵巧地理顺了来自世界各地的作者的材料，让它们就像是一
个人写出来的那样流畅。插图作者RobertRomano设法将我们提供的
870
---
## Page 872
各种图像格式（包括一些手绘的草图）变成专业的图表。封面设计
者KarenMontgomery设计了漂亮的、让人兴奋的封面，切合本书的
内容。版式设计者DavidFutato设计了创新而实用的布局结构，将每
章的说明与图书的设计集成在一起。最后，我们要感谢我们的家人
和朋友在我们将精力集中在这本书上时给予的支持，这些时间本应
属于他们。
[L].本书由机械工业出版社引进出版，其中文版书名为《代码之
美》，标准书号为978-7-111-25133-0。
[2].正如某些忠心的用户所说的：“Emacs是我的操作系统，Linux只
是提供了设备驱动。”
第一部分论架构
第1章架构概述
第2章两个系统的故事：现代软件神话
第1章架构概述JohnKleinDavidWeiss
1.1简介
建筑师、音乐家、作家、计算机设计师、网络设计师和软件并发者
都在使用“架构"这个术语，其他人也用（你有没有听说过“食物架
构”？），然而不同的用法其结果也不同。建筑与交响乐完全不
同，但都有架构。而且，所有的架构师都在谈论他们工作中的美，
以及因此而导致的结果。建筑师可能会说，一座建筑应该提供适合
工作或生活的环境，而且它应该看起来很美。音乐家可能会说，音
乐应该能演奏，包含能够辨明的主题，而且它应该听起来很美。软
件架构师可能会说，系统应该对用户友好、响应及时、可维护、没
有重大错误、易于安装、可靠，应该通过标准的方式与其他系统通
信，而且也应该是美的。
这本书为你提供了一些美丽架构的详细例子，它们来自于各类计算
机系统。相对来说，计算机是比较年轻的一个学科。因为年轻，所
以不像建筑、音乐或写作等领域那样，有那么多的例子；也因为年
轻，则需要更多的例子。我们希望这本书能满足这种需要。
871
---
## Page 873
在你开始研究这些例子之前，我们希望你考虑以下两个问题：1
架构的不同定义，每个学科都有自已的定义，所以我们将首先探讨
不同学科中的架构有何共同点，以及人们试图用架构解决哪些问
题。具体来说，架构有助于确保系统能够满足其利益相关人的关注
点，在构想、计划、构建和维护系统时，架构有助于处理复杂性。
然后我们将介绍架构的定义，展示如何将这个定义应用于软件架
构，因为软件是本书后面大部分例子关注的核心。这个定义的关键
在于，架构由一组结构组成，这些结构的设计目的是让架构师、构
建者，以及其他利益相关人看到他们的关注点是如何得到满足的。
在本章末尾，我们将讨论美丽架构的特性，并引用一些例子。美的
核心在于概念完整性一即一组抽象和规则，在整个系统中尽可能简
单地应用它们。
在讨论中，我们将“架构”作为一个名词，它意味着一组工件，包括
像蓝图和构建规范这样的文档。这些工件描述了要构建的对象，在
这种描述中，该对象被视为一组结构。某些人也把“架构"作为一个
动词，用来描述创建这些工件的过程，包括由此而导致的工作。然
而，正如JimWaldo和其他人曾指出的，没有什么过程可以保证你学
了以后就能创造出好的系统架构，更不必说美的架构了（Waldo
2006），所以我们将更关注工件，而非过程。
架构：“建造的艺术或科学：特别是设计和建造人类使用的建筑时
的艺术或实践，同时考虑到美学因素和实用因素。”
《TheShorterOxfordEnglishDictionary》（小型牛津英语字典，
第5版）
在所有学科中，架构都提供了一种方式来解决共同的问题：确保建
筑、桥梁、乐曲、书籍、计算机、网络或系统在完成后具有某些属
性或行为。换言之，架构既是所构建系统的计划，确保由此得到期
望的特性，同时也是所构建系统的描述。维基百科上说：“根据这
方面已知最早的著作，即Vitruvius的OnArchitecture'，好的建筑应
该美观（Venustas）、坚固（Firmitas）、实用（Utilitas）；架构可
以说是这三方面的一种平衡和配合，没有哪一个方面比其他方面更
重要。”
872
---
## Page 874
我们谈到交响乐的“架构（architecture）”，反过来，又将架构
（architecture）称为“凝固的音乐”。
——DeryckCooke，《TheLanguage ofMusic》（音乐的语言）
好的系统架构展示了架构完整性。也就是说，它来自于一组设计规
则，这组规则有助于减少复杂性，并可以用于指导详细设计和系统
验证。设计规则可能包含特定的抽象，这些抽象总是以同样的方式
使用，诸如虚拟设备等。这些规则可能表现为一种模式，如管道和
过滤器。在最理想的情况下，存在一些可以用于验证的规则，如
“在设备失效时，所有某一类的虚拟设备都可以用任何其他同类的
虚拟设备代替”，或“所有竞争同一资源的进程必须具有相同的调度
优先级”。
当代的架构师可能会说，待构建的对象或系统必须具有以下特征：
具备客户要求的功能。
能够在要求的工期内安全地构建。
性能足够好。
·可靠的。
·可用的，并且使用时不会造成伤害。
·安全的。
成本是可以接受的。
·符合法规标准。
将超越前人及其竞争者。
我们将计算机系统的架构定义为一组最小的特征集，它们决定了哪
些程序将运行，以及这些程序将得到什么结果。
Gerrit Blaauw和IFrederickBrooks，《ComputerArchitecture》
（计算机体系结构）
873
---
## Page 875
我们从来没有看到过一个复杂系统能够很好地满足上述特征。架构
是一种折中—决定改进其中一个特征常常会对其他特征产生负面影
响。架构师必须确定怎样做是足够好的，方法就是发现特定系统的
重要关注点，以及充分满足这些关注点的条件。
架构观点中的常见思想是结构，每种结构都由各种类型的组件及其
关系构成：它们如何组合、相互调用、通信、同步，以及进行其他
交互。组件可以是建筑中的支架横梁或内部腔室、交响乐中的旋
律、故事中的章节或人物、计算机中的CPU和内存、通信栈中的层
或连接到一个网络上的处理器、协作的顺序过程、对象、编译时的
宏、构建时的脚本。每个学科都有自己的一套组件和组件间的相互
关系。
从更大的范围来说，术语“架构”总是意味着“不变的深层次结构”。
Stewart Brand，《HowBuildings Learn》
面对不断增长的系统复杂性，以及它们内部和相互之间的交互，由
一组结构形成的架构提供了对付复杂性的主要手段，目的是确保得
到的系统具备所要求的特征。结构为我们提供途径，将系统化解为
一些交互的组件。
每种结构都是为了帮助架构师理解如何来满足特定的关注点，如可
变性或性能。展示某些关注点得到满足时，可能会影响到其他方面
的关注点，但架构师必须能够说明所有关注点都已得到满足。
网络架构：构成一个网络的通信设备、协议和传输链路，以及它们
的组织方式。
-http://www.wtcs.org/snmp4tpc/jton.htm
1.1.1建筑师的角色
在设计、构建和修复建筑时，我们指定关键的设计师为“建筑师
（architects）”，并赋予他们广泛的职责。建筑师准备建筑最初的草
图，展示外观和内部布局，与客户讨论这些草图，直至所有相关方
都达成一致意见，认为展示的就是他们想要的。这些草图是抽象：