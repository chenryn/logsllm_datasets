repurposing executable codes in
assembly loading, 190–193
using Reflection APIs, 190
.NET Core, 80
.NET Reflector, 290–291
Netcat, 180–182, 234, 282
NetClientTemplate class, 184–185
netstat -r command, 65
Netwide Assembler, 256
network, 1
||||||||||||||||||||
||||||||||||||||||||
connectivity and protocol testing tools
Hping, 282
Netcat, 282
Nmap, 282–283
monitoring connections with DTrace, 16–18
proxies, 20–35
routing, 7–8
network address, 7, 20, 22, 52–53, 66, 71, 123
network address translation (NAT), 68–71
defined, 68
destination, 24, 68
source, 68–69
network communication, 4
Berkeley Sockets model, 15
layers, 3
man-in-the-middle attack on, 20
symmetric ciphers, 150
user-to-kernel, 15
network interface, 121–124
client connection to TCP server, 122
TCP client connection to server, 121–122
Network News Transfer Protocol (NNTP), 59
network order, 42
newInstance() method (Java), 195
Nmap, 282–283
NNTP (Network News Transfer Protocol), 59
nodes, 1
gateway, 64
identifying through addressing, 2
no-execute (NX) mitigation, 267
nonlinearity, 165
nonpersistent denial-of-service, 208
NULL, 263–264
numeric data
decimal numbers, 55
floating-point data, 40–41
integers, 55
Technet24
||||||||||||||||||||
||||||||||||||||||||
signed integers, 39
text protocols, 55
unsigned integers, 38
variable-length integers, 39–40
NX (no-execute) mitigation, 267
O
OAEP (Optimal Asymmetric Encryption Padding), 162
obfuscation, 143–144
octets, 38–40
octet-stream, 57
off-by-one error, 213
offer (DHCP packet), 71
one-time pad encryption, 148
open system call, 18
OpenSSL, 132
operands, 115
operating system
application binary interface, 123–124
executable file formats, 119–120
networking interface, 121–124
processes, 120–121
sections, 120
threads, 120–121
Optimal Asymmetric Encryption Padding (OAEP), 162
OR instruction, 115
outbound bytes, 89
outbound traffic, 89
outer padding block, 168
out-of-band method, 253
out-of-bounds buffer indexing, 216–217
output feedback mode, 159
overflow flag, 117
P
||||||||||||||||||||
||||||||||||||||||||
package-private scoped classes, 193
packets, 6
calculating checksum of, 93–94
capturing, 83–84
finding, 87–88
identifying structure with Hex Dump, 86–95
sniffing, 12–14
viewing, 87–88
packing tools, 134
padded data, 49
padding
block ciphers, 155–156
decryption, 155–157
encryption, 155
inner block, 168
OAEP, 162
oracle attack, 156–158
outer block, 168
RSA encryption, 155, 162
Page Heap, 244–245
parity flag, 117
Parser class, 106, 185
parser.csx script, 183–184
parsing
binary conversion and, 90
decimal numbers and, 55
endianness of data and, 41
HTTP header, 33
message command, 101–102
message packet, 100–103
mutation fuzzer and, 235
protocol, 107–108
Python script for, 91
traffic, 183
URL, 230
variable-length integers, 40
partial overwrites, 272–273
Technet24
||||||||||||||||||||
||||||||||||||||||||
passive network capture
advantages and disadvantages of, 19–20
Dtrace, 16–18
packet sniffing, 12–14
Process Monitor tool, 17–18
strace, 16
system call tracing, 14–16
tools
LibPCAP, 278–279
Microsoft Message Analyzer, 278
TCPDump, 278–279
Wireshark, 12–13, 279–280
path, 220
$pc, 239
PDB (program database) file, 129–131
PDP-11, 42
PDU (protocol data unit), 4
PE (Portable Executable) format, 120, 134, 144
PEiD, 134
PEM format, 202
percent encoding, 60
perfect forward secrecy, 177
permutation boxes (P-Box), 152
persistent denial-of-service, 208
PGP (Pretty Good Privacy), 169
PHP, 255
PKI. See public key infrastructure (PKI)
plain, 57
plaintext, 146
plus sign (+), 54
Point-to-Point Protocol (PPP), 3
POP3 (Post Office Protocol 3), 4
POP instruction, 115
port, 2
port numbers, 5
Portable Executable (PE) format, 120, 134, 144
||||||||||||||||||||
||||||||||||||||||||
port-forwarding proxy. See also proxies
advantages and disadvantages of, 23–24
binding to network addresses, 22
redirecting traffic to, 22–23
simple implementation of, 21–22
POSIX, 15
POSIX/Unix time, 50
POST, 29
Post Office Protocol 3 (POP3), 4
PowerPC, 38
PPP (Point-to-Point Protocol), 3
Practical Packet Analysis, 14
pre-image resistance (hashing algorithm), 165
pre-master secret (TLS), 175
Pretty Good Privacy (PGP), 169
printable characters (ASCII), 43
printf function, 227
private Connect() method (.NET), 192
private exponent, 161
private key, 161, 165
PRNGs (pseudorandom number generators), 149
Process() method, 275–276
Process Monitor tool, 17–18
processes, 120–121
processor architectures, 42
program database (PDB) file, 129–131
program flow, 118–119
ProGuard, 143–144
promiscuous mode, 12
PROT_EXEC flag, 257
protocol data unit (PDU), 4
protocol stack, 3
protocols
analysis, 8–10, 105–106
binary, 38–49
changing behavior of, 108–109
Technet24
||||||||||||||||||||
||||||||||||||||||||
checksum, 93–94
dates, 49–50
determining structure of, 88–89
fragmentation, 51–52
functions of, 2
multiplexing, 51–52
network address, 52–53
network connectivity and protocol testing
Hping, 282
Netcat, 282
Nmap, 282–283
parsing, 107–108
security, 145–178
structured binary formats, 53–54
tag, length, value (TLV) pattern, 50–51
text, 54–58
times, 49–50
unknown parts, 93
proxies
HTTP, 29–35
man-in-the-middle, 20
port-forwarding, 21–24
protocol analysis with, 105–106
setting up, 103–105
SOCKS, 24–29, 103
traffic analysis with, 103–110
Proxifier, 27
pseudo registers, 239
pseudorandom number generators (PRNGs), 149
public Connect() method (.NET), 192
public exponent, 161
public key, 160–161, 165
Public Key Cryptography Standard #1.5, 162
Public Key Cryptography Standard #7 (PKCS#7), 155–156
public key encryption. See asymmetric key cryptography
public key infrastructure (PKI), 169–172
certificate chain verification, 170–172
||||||||||||||||||||
||||||||||||||||||||
defined, 169
web of trust, 169
X.509 certificates, 169–170
PublicClass class, 189
PublicMethod() method, 189
PUSH instruction, 115
Python, 210
binary conversions, 90–92
calling functions with, 199
ctypes library, 195
data types, 198
dissecting protocol with, 90–95
loading library with, 197
resending captured UDP traffic with, 182–183
struct library, 90–92
Q
quoted string, 47–48
R
rand() function, 149
random number generators, 149
RAX register, 257–260
RC4 stream cipher, 176
RDP (Remote Desktop Protocol), 51
read system call, 15, 18, 122
read_bytes() function, 91
ReadData() function, 108
ReadOutbound() function, 109
Real Time Messaging Protocol (RTMP), 29
Receive() method (.NET), 193
recv system call, 15, 122–123
recvfrom system call, 15
reflection, 189
registers
Technet24
||||||||||||||||||||
||||||||||||||||||||
control, 117
CS, 116, 118
DS, 116, 118
EAX, 116, 123, 242, 258, 270
EBP, 116–117, 124
EBX, 116, 124
ECX, 116, 124
EDI, 116–117, 124
EDX, 116, 123–124
EFLAGS, 117, 119, 136
EIP, 116–117, 135
ES, 116, 118
ESI, 116, 124
ESP, 116–117, 124, 136, 270
FS, 116, 118
general purpose, 116–117, 136
GS, 116, 118
memory index, 117
pseudo, 239
RAX, 257–260
scratch, 123
selector, 118
SS, 116
x86 architecture, 116–118
remote code execution, 208
Remote Desktop Protocol (RDP), 51
Remote Method Invocation (RMI), 29
Remote Procedure Call (RPC), 22
request (DHCP packet), 72
Request for Comments (RFCs), 42, 56–57
request line, 30
rerouting traffic, 64–66
RESP field, 25
RET instruction, 115
Ret2Libc, 269
RETN instruction, 115
return-oriented programming (ROP), 268–270
||||||||||||||||||||
||||||||||||||||||||
reverse engineering
dynamic, 134–137
managed languages, 137–144
obfuscation, 143–144
resources, 144
static, 125–134
tools
Hopper, 289–290
IDA Pro, 289