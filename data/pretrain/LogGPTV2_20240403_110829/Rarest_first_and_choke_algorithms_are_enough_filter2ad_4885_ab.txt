pieces, thus its download time will be on average shorter.
Second, BitTorrent also applies a strict priority policy,
which is at the block level. When at least one block of
a piece has been requested, the other blocks of the same
piece are requested with the highest priority. The aim of
the strict priority policy is to complete the download of a
piece as fast as possible. As only complete pieces can be
sent, it is important to minimize the number of partially
received pieces.
Finally, the last policy is the end game mode [8]. This
mode starts once a peer has requested all blocks, i.e., all
blocks have either been already received or requested. While
in this mode, the peer requests all blocks not yet received
to all the peers in its peer set that have the corresponding
blocks. Each time a block is received, it cancels the request
for the received block to all the peers in its peer set that
have the corresponding pending request. As a peer has a
small buﬀer of pending requests, all blocks are eﬀectively
requested close to the end of the download. Therefore, the
end game mode is used at the very end of the download,
thus it has little impact on the overall performance.
2.3.2 Choke Algorithm
The choke algorithm was introduced to guarantee a rea-
sonable level of upload and download reciprocation. As a
consequence, free riders, i.e., peers that never upload, should
be penalized. For the sake of clarity, we describe without
loss of generality the choke algorithm from the point of view
of the local peer. In this section, interested always means in-
terested in the local peer, and choked always means choked
by the local peer.
The choke algorithm diﬀers in leecher and seed states. We
describe ﬁrst the choke algorithm in leecher state. At most
4 remote peers can be unchoked and interested at the same
time. Peers are unchoked using the following policy.
1. Every 10 seconds, the interested remote peers are or-
dered according to their download rate to the local
peer and the 3 fastest peers are unchoked.
2. Every 30 seconds, one additional interested remote
peer is unchoked at random. We call this random un-
choke the optimistic unchoke.
In the following, we call the three peers unchoked in step 1
the regular unchoked (RU) peers, and the peer unchoked in
step 2 the optimistic unchoked (OU) peer. The optimistic
unchoke peer selection has two purposes. It allows to evalu-
ate the download capacity of new peers in the peer set, and
it allows to bootstrap new peers that do not have any piece
to share by giving them their ﬁrst piece.
We describe now the choke algorithm in seed state.
In
previous versions of the BitTorrent protocol, the choke algo-
rithm was the same in leecher state and in seed state except
that in seed state the ordering performed in step 1 was based
on upload rates from the local peer. With this algorithm,
peers with a high download rate are favored independently
of their contribution to the torrent.
Starting with version 4.0.0, the mainline client [2] intro-
duced an entirely new algorithm in seed state. We are not
aware of any documentation on this new algorithm, nor of
any implementation of it apart from the mainline client.
We describe this new algorithm in seed state in the follow-
ing. At most 4 remote peers can be unchoked and interested
at the same time. Peers are unchoked using the following
policy.
1. Every 10 seconds, the unchoked and interested remote
peers are ordered according to the time they were last
unchoked, most recently unchoked peers ﬁrst.
2. For two consecutive periods of 10 seconds, the 3 ﬁrst
peers are kept unchoked and an additional 4th peer
that is choked and interested is selected at random
and unchoked.
3. For the third period of 10 seconds, the 4 ﬁrst peers are
kept unchoked.
In the following, we call the three or four peers that are
kept unchoked according to the time they were last unchoked
the seed kept unchoked (SKU) peers, and the unchoked peer
selected at random the seed random unchoked (SRU) peer.
With this new algorithm, peers are no longer unchoked ac-
cording to their upload rate from the local peer, but accord-
ing to the time of their last unchoke. As a consequence, the
peers in the active peer set are changed regularly, each new
SRU peer taking an unchoke slot oﬀ the oldest SKU peer.
We show in section 4.2.1 why the new choke algorithm
in seed state is fundamental to the fairness of the choke
algorithm.
3. EXPERIMENTAL METHODOLOGY
In order to evaluate experimentally the rarest ﬁrst and
choke algorithms on real torrents, we have instrumented a
BitTorrent client and connected this client to live torrents
with diﬀerent characteristics. The experiments were per-
formed one at a time in order to avoid a possible bias due
to overlapping experiments. We have instrumented a sin-
gle client and we make no assumption on the other clients
connected to the same torrent. As we only considered real
torrents, we captured a large variety of client conﬁguration,
connectivity, and behavior. In the following, we give details
on how we conducted the experiments.
3.1 Choice of the Monitored BitTorrent Client
Several BitTorrent clients are available. The ﬁrst BitTor-
rent client has been developed by Bram Cohen, the inventor
of the protocol. This client is open source and is called
mainline [2]. As there is no well maintained and oﬃcial
speciﬁcation of the BitTorrent protocol, the mainline client
is considered as reference for the BitTorrent protocol.
It
should be noted that, up to now, each improvement of Bram
Cohen to the BitTorrent protocol has been replicated to the
most popular other clients.
The other clients diﬀer from the mainline client by a more
sophisticated interface with a nice look and feel, realtime
statistics, many conﬁguration options, experimental exten-
sions to the protocol, etc.
Since our goal is to evaluate the basic BitTorrent protocol,
we have decided to restrict ourselves to the mainline client.
This client is very popular as it is the second most down-
loaded BitTorrent client at SourceForge with more than 52
million downloads. We instrumented the version 4.0.2 of
the mainline client released at the end of May 20051. This
version of the instrumented mainline client implements the
new choke algorithm in seed state (see section 2.3.2).
3.2 Choice of the Torrents
The aim of this work is to understand how the rarest ﬁrst
and choke algorithms behave on real torrents. It is not in-
tended to provide an exhaustive study on the characteristics
of today’s torrents. For this reason, we have selected tor-
rents based on: their proportion of seeds to leechers, the
absolute number of seeds and leechers, and the content size.
The torrents monitored in this study were found on pop-
ular sites2. We considered copyrighted and free contents,
which are TV shows, movies, cartoons, music albums, live
concert recordings, and softwares. Each experiment lasted
for 8 hours in order to make sure that each client became
a seed and to have a representative trace in seed state. We
performed all the experiments between June 2005 and May
2006.
We give the characteristic of each torrent in Table 1. The
number of seeds and leechers is given at the beginning of
the experiment. Therefore, these numbers can be very dif-
ferent at the end of the experiment. We see that there is
a large variety of torrents: torrents with few seeds and few
leechers, torrents with few seeds and a large number of leech-
1The latest stable branch of development is 4.20.x. In this
branch, there is no new functionality to the core protocol,
but a new tracker-less functionality and some improvements
to the client. As the evaluation of the tracker functionality
was outside the scope of this study we focused on version
4.0.2.
2www.legaltorrents.com, bt.etree.org,
www.mininova.org, isohunt.com.
fedora.redhat.com,
Table 1: Torrent characteristics. Column 1 (ID):
torrent ID, column 2 (# of S): number of seeds at the
beginning of the experiment, column 3 (# of L): number
of leechers at the beginning of the experiment, column 4
(Ratio S
L ): ratio (number of seeds)/(number of leechers),
column 5 (Max. PS): maximum peer set size in leecher
state, column 6 (Size): size of the content in MB.
0
0.5
0.034
0.025
0.02
0.038
0.0078
0.0014
0.0012
0.00095
0.00083
0.00071
0.0049
ID # of S # of L Ratio S
L
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
0
1
1
1
1
1
1
1
1
1
1
3
9
20
30
50
102
115
160
177
462
514
1197
3697
11641
12612
66
2
29
40
50
130
713
861
1055
1207
1411
612
30
126
230
18
342
19
5
4657
180
1703
4151
7341
5418
7052
0.3
0.16
0.13
2.8
0.3
6
32
2.6
0.3
0.29
0.5
2.1
1.8
Max. PS
60
3
34
75
60
80
80
80
80
80
80
80
35
80
80
40
80
55
17
80
80
80
80
80
80
80
Size
700
580
350
800
1419
820
700
3000
2000
348
710
1413
350
184
820
600
200
430
6
2000
2600
349
349
349
350
140
ers, torrents with a large number of seeds and few leechers,
and torrents with a large number of seeds and leechers. We
discuss in section 3.5.2 the limitations in the choice of the
torrents considered.
3.3 Experimental Setup
We performed a complete instrumentation of the main-
line client. The instrumentation consists of: a log of each
BitTorrent message sent or received with the detailed con-
tent of the message, a log of each state change in the choke
algorithm, a log of the rate estimation used by the choke
algorithm, and a log of important events (end game mode,
seed state).
As monitored client, we use the mainline client with all
the default parameters for all our experimentations.
It is
outside of the scope of this study to evaluate the impact
of each BitTorrent parameter. The main default parame-
ters for the monitored client are: the maximum upload rate
(default to 20 kB/s), the minimum number of peers in the
peer set before requesting more peers to the tracker (de-
fault to 20), the maximum number of connections the local
peer can initiate (default to 40), the maximum number of
peers in the peer set (default to 80), the number of peers in
the active peer set including the optimistic unchoke (default
to 4), the block size (default to 214 Bytes), the number of