### 2.3.1 Block and Piece Prioritization

BitTorrent employs several strategies to optimize the download process, including piece prioritization and a strict priority policy at the block level.

#### Rarest First Policy
The rarest first policy ensures that the least common pieces are downloaded first. This approach helps in reducing the overall download time by focusing on the pieces that are most likely to be missing from other peers. As a result, the average download time is generally shorter.

#### Strict Priority Policy
BitTorrent also implements a strict priority policy at the block level. When at least one block of a piece has been requested, the remaining blocks of the same piece are given the highest priority. The goal of this policy is to complete the download of a piece as quickly as possible. Since only complete pieces can be shared, minimizing the number of partially received pieces is crucial for efficient distribution.

#### End Game Mode
The end game mode is activated when a peer has requested all blocks, either already received or pending. In this mode, the peer requests all remaining blocks from all peers in its peer set that have the corresponding blocks. Each time a block is received, the request for that block is canceled for all peers with pending requests. Because a peer has a small buffer of pending requests, all blocks are effectively requested near the end of the download. Consequently, the end game mode has a minimal impact on overall performance.

### 2.3.2 Choke Algorithm

The choke algorithm is designed to ensure a reasonable level of upload and download reciprocity, penalizing free riders (peers that never upload). We will describe the choke algorithm from the perspective of the local peer, where "interested" always refers to interest in the local peer, and "choked" means choked by the local peer.

#### Choke Algorithm in Leecher State
In leecher state, at most four remote peers can be unchoked and interested simultaneously. Peers are unchoked according to the following policy:

1. **Regular Unchoke (RU):** Every 10 seconds, the interested remote peers are ordered by their download rate to the local peer, and the three fastest peers are unchoked.
2. **Optimistic Unchoke (OU):** Every 30 seconds, one additional interested remote peer is unchoked at random. This is known as the optimistic unchoke.

The optimistic unchoke serves two purposes: it evaluates the download capacity of new peers and helps bootstrap new peers by providing them with their first piece.

#### Choke Algorithm in Seed State
In previous versions of the BitTorrent protocol, the choke algorithm in seed state was similar to the leecher state, but the ordering in step 1 was based on upload rates from the local peer. This favored peers with high download rates, regardless of their contribution.

Starting with version 4.0.0, the mainline client introduced a new algorithm for the seed state. The new algorithm is as follows:

1. **Seed Kept Unchoked (SKU):** Every 10 seconds, the unchoked and interested remote peers are ordered by the time they were last unchoked, with the most recently unchoked peers first.
2. **Seed Random Unchoked (SRU):** For two consecutive periods of 10 seconds, the three first peers are kept unchoked, and an additional fourth peer that is choked and interested is selected at random and unchoked.
3. **Third Period:** For the third period of 10 seconds, the four first peers are kept unchoked.

This new algorithm changes the active peer set regularly, with each new SRU peer taking an unchoke slot from the oldest SKU peer. This ensures fairness in the choke algorithm, as discussed in section 4.2.1.

### 3. Experimental Methodology

To evaluate the rarest first and choke algorithms on real torrents, we instrumented a BitTorrent client and connected it to live torrents with varying characteristics. Experiments were conducted one at a time to avoid bias from overlapping tests. We used a single instrumented client and made no assumptions about other clients connected to the same torrent. The experiments captured a wide variety of client configurations, connectivity, and behavior. Below are the details of our experimental setup.

#### 3.1 Choice of the Monitored BitTorrent Client
Several BitTorrent clients are available, but the mainline client, developed by Bram Cohen, is considered the reference for the BitTorrent protocol. It is open-source and very popular, with over 52 million downloads on SourceForge. We instrumented version 4.0.2 of the mainline client, released in May 2005, which implements the new choke algorithm in seed state.

#### 3.2 Choice of the Torrents
Our goal was to understand how the rarest first and choke algorithms behave on real torrents. We selected torrents based on the proportion of seeds to leechers, the absolute number of seeds and leechers, and the content size. The monitored torrents included a variety of content types, such as TV shows, movies, music, and software. Each experiment lasted 8 hours to ensure that each client became a seed and to provide a representative trace in seed state. The experiments were conducted between June 2005 and May 2006.

| ID | # of S | # of L | Ratio S/L | Max. PS | Size (MB) |
|----|--------|--------|-----------|---------|-----------|
| 1  | 0      | 66     | 0.0000    | 60      | 700       |
| 2  | 1      | 2      | 0.5000    | 3       | 580       |
| 3  | 1      | 29     | 0.0345    | 34      | 350       |
| 4  | 1      | 40     | 0.0250    | 75      | 800       |
| 5  | 1      | 50     | 0.0200    | 60      | 1419      |
| 6  | 1      | 130    | 0.0077    | 80      | 820       |
| 7  | 1      | 713    | 0.0014    | 80      | 700       |
| 8  | 1      | 861    | 0.0012    | 80      | 3000      |
| 9  | 1      | 1055   | 0.00095   | 80      | 2000      |
| 10 | 1      | 1207   | 0.00083   | 80      | 348       |
| 11 | 1      | 1411   | 0.00071   | 80      | 710       |
| 12 | 3      | 30     | 0.1000    | 80      | 1413      |
| 13 | 9      | 126    | 0.0714    | 80      | 350       |
| 14 | 20     | 230    | 0.0870    | 80      | 184       |
| 15 | 30     | 18     | 1.6667    | 80      | 820       |
| 16 | 50     | 342    | 0.1462    | 80      | 600       |
| 17 | 102    | 19     | 5.3684    | 80      | 200       |
| 18 | 115    | 5      | 23.0000   | 80      | 430       |
| 19 | 160    | 4657   | 0.0344    | 80      | 6         |
| 20 | 177    | 180    | 0.9833    | 80      | 2000      |
| 21 | 462    | 1703   | 0.2712    | 80      | 2600      |
| 22 | 514    | 4151   | 0.1238    | 80      | 349       |
| 23 | 1197   | 7341   | 0.1630    | 80      | 349       |
| 24 | 3697   | 5418   | 0.6822    | 80      | 349       |
| 25 | 11641  | 7052   | 1.6505    | 80      | 350       |
| 26 | 12612  | 7052   | 1.7884    | 80      | 140       |

#### 3.3 Experimental Setup
We performed a complete instrumentation of the mainline client, logging each BitTorrent message sent or received, state changes in the choke algorithm, rate estimations, and important events (end game mode, seed state). The monitored client used default parameters, including a maximum upload rate of 20 kB/s, a minimum of 20 peers in the peer set before requesting more, a maximum of 40 connections, a maximum of 80 peers in the peer set, and a block size of 2^14 bytes.