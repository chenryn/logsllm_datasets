数，其参数列表与αefine-html-special-operator 中指定的参数列表相同。通过将
然后在同样的文件中使用刚刚定义的特殊操作符的话，那么这个EVAL-WHEN将是必要的。
代码产生的效果在编译期可见。如果你想要在一个文件中使用define-html-special-operator
那么它相当于下面的写法：
其宏展开式。如果你写出了下面的定义：
了了解它的工作方式，我们取该宏的一个简单用例，即特殊操作符:noescape的定义，然后查看
有了以这种方式定义的特殊操作符，process-special-form所要做的就是查询特殊操作
特殊操作符:noescape尤其简单，它所做的全部就是在*escapes*绑定到NrL的情况下，将
现在你可以开始定义其余的5个FOO特殊操作符了。与:noescape类似的是:attribute,
 该匿名函数的主体就是提供给define-html-special-operator的主体。该匿名函数的任
随后的sETF表达式将符号:noescape的属性html-special-operator设置成一个匿名函
(defun foo-value (something)
在第20章里讨论过，EVAL-WHEN特殊操作符确保了当你用COMPILE-FILE编译时，其主体中的
(define-html-special-operator :noescape (processor &rest body)
(0 ( 01-01) 1: :) )
(defun process-special-form (processor form)
(eval-when (:compile-toplevel :load-toplevel :execute)
(html (:print (frob something))))
(apply(get(car form):
((((dxa 1ossaooid ssaooid) op Apoq uT dxa xoy doot)
(let
((*escapes* nil))
(lambda (processor &rest body)
(let ((*escapes*
(loop for exp in body do (process processor exp))))))
'html-special-operator) processor (rest form)))
 nil))
www.TopSage.com
31.2FOO 特殊操作符
397
---
## Page 415
其主体中的Lisp形式。
编译期求值：format而无需等到运行期再做。：print和：format的定义如下所示：
比下面这个更好一些：
个字符串然后再嵌入它。将：format定义为特殊操作符主要是出于方便的考虑。
在编译过的FOO程序里嵌入任意Lisp表达式的值，差不多等价于先用（formatnil...）生成一
编写该函数：
那么你会希望它可以生成使用*attribute-escapes*的代码。因此，你可以另行像下面这样来
398
①：noescape和：attribute特殊操作符必须被定义成特殊操作符，这是因为FOO是在编译期决定如何转义的，
最后，特殊操作符：progn和CommonLisp中的pRoGN特殊操作符相似。它简单地按顺序处理
它还有另外一点优势，如果你将：format与全部是自求值的参数一起使用，那么FOO可以在
（:format“Foo:~dx)
下面两个特殊操作符：print和：format用来输出值。早先讨论过，特殊操作符：print用于
:attribute的定义如下所示：
(defun foo-value(something)
(html（:p（:progn"Foo"（:i"bar")"baz")))
换句话说，下面的形式
(define-html-special-operator :newline (processor)
特殊操作符：newline强制输出一个字面换行，这有时是有用的。
(define-html-special-operator :format (processor &rest args)
(define-html-special-operator :print (processor form)
（:print（formatnil"Foo:~d"x）)
而不是运行期。这允许FOO在编译期转义字面值，从而比在运行期扫描所有输出要高效得多。
(loop for exp inbody do（process processor exp）))
(let((*escapes**attribute-escapes*))
(html（:attribute（:print（frob something)))))
(newline processor))
(if（every #'self
(cond
(loop for exp in body do (process processor exp))))
(proc
((self-evaluating-p form)
(embed-value processor form))))
(process-sexp-html processor form))
(warn "Redundant:print of self-evaluating form~s"form)
第31章实践：HTML生成库，编译器部分
cess-sexp-html
-evaluating-p args)
process
www.TopSage.com
(apply#'formatnil args))
---
## Page 416
HTML控制构造类型来使用。作为一个简单的例子，考虑下面这个实现了：if构造的宏：
的宏形式将不会解析属性，并且宏函数将被应用在单一参数上，即一个含有主体表达式的列表。
&attributes参数。如果有这个参数的话，那么宏形式将按照正常点对形式来解析，并且宏函
并且可能想要容易地访问一个属性列表。其他的宏只是简单地想要直接访问它们主体的元素。
过程会更加复杂一些，因为FOO支持两种类型的宏。一些你将定义的宏类似于正常的HTML元素，
语法中。不过，你需要传递一个不同的谓词函数，它用来测试形式名是否是一个带有非NIL的
符的实现非常相似。
个新的FOO表达式作为结果，后者随后按照正常的FOO求值规则来求值。实际的实现与特殊操作
31.3FOO宏
前者对于本质上的HTML模板很有用。例如：
数将被传递两个值，一个属性的plist和一个构成宏形式体的表达式列表。没有&attributes参数
html-macro属性的符号。另外，和特殊操作符的实现一样，你将定义一个宏用来定义FOO宏，
要实现的最后一个语言特性上。
过，这个特殊操作符将在一种情形里变得非常有用一
将生成与下面形式相同的代码：
你可以使这两种类型的宏的区别变得隐性：当你定义一个FOO宏时，参数列表可以包含一个
后一种类型的宏对于编写管理其主体中Lisp形式的宏更加有用。这个类型的宏可以作为一种
和特殊操作符一样，你可以定义一个谓词来测试给定Lisp形式是否是一个宏形式。
FOO宏类似于CommonLisp宏。FOO宏是一点儿代码，它接受FOO表达式作为参数并返回一
HTML> (html (:mytag "Foo"))
(define-html-macro :mytag (&attributes attrs &body body)
使用前面定义的函数cons-form-p，是因为你想要允许宏被用在所有非宏的FOO点对形式
这可能看起来是个奇怪的需要，因为正常的FOO表达式可以在其主体中有任意多个形式。不
NIL
Foo
NIL
Foo
{html (:p "Foo " (:i “bar")
(((((oxew-tuzu. x 2ab) (x dtoquFoo
,@attrs) ,@body))
"baz"}）
www.TopSage.com
一当编写FOO宏的时候，这将把你带到你需
31.3FOO宏
399
---
## Page 417
用一个助手函数来生成正确类型的代码。
生成HTML宏的两种形式之一，因此主宏简单地检测其正在定义哪种类型的HTML宏，并随后调
中去掉&attributes标记及其后续列表元素后剩下的所有元素的列表。
表。该函数返回两个值，&attributes参数的名字或者其不存在时为NIL，以及一个含有args
而不必写成下面这个较长的版本：
400
① 注意&attributes只不过是另一个符号罢了，以“α"开头的名字本质上没有什么特别之处。
现在你可以开始定义define-html-macro了。根据是否指定了&attributes参数，你需要
实际生成展开式的函数如下所示：
((  e ( x Aa) sne) : at-epq1-oio5-a-as1ea)  (parse-html-macro-lambda-list '(a b c &attributes attrs))
((o q e siaae saanqtranes): astt-epquet-oxoeu-Twau-asied)  (parse-html-macro-lambda-list :(a b c))
(let
`(if ,test (html.,then) (html ,else)))
(if attribute-var 
(values
(nconc (ldiff args attr-cons) (cddr attr-cons)))))
(cadr attr-cons)
第31章实践：HTML生成库，编译器部分
(generate-macro-no-attributes name args body))))
(generate-macro-with-attributes name attribute-var args body)
(parse-html-macro-lambda-list args)
((attr-cons (member '&attributes args)))
www.TopSage.com
---
## Page 418
用户也希望编写自己的HTML宏。另一方面，define-html-special-operator不是公共API
define-html-macro。define-html-maco之所以需要成为公共API的一部分，是因为FOO的
部分还包括我在上一章里讨论过的emit-html和with-html-ouput，以及上一节里讨论过的
31.4
form中使用该属性来决定宏函数被调用的方式：
一部分的理由，是它需要太多的关于FOO内部的知识来定义一个新的特殊操作符。并且应该几乎
下保存--个布尔值，以指示该宏是否接受&attributes参数。你在下面的函数expand-macro-
函数保存在其名字的属性表中的html-macro之下，并且在属性html-macro-wants-attributes
并绑定到在对define-html-macro的调用中所定义的参数上。在两个展开式中，你都需要将宏
现在，你终于完成了对html宏的实现，它就是FOO编译器的主入口点。FOO公共API的其余
这就是process的最终版本。
最后一步是通过在顶层process 函数的派发coND语句里添加一个子句来集成对宏的支持。
你将定义的宏函数接受一个或两个参数，然后使用DESTRUCTURING-BIND来将参数提取出来
(defun process (processor form)
(defun expand-macro-form (form)
(defun generate-macro-no-attributes (name args body)
(cond
(if (or (consp
(with-gensyms (form-body)
公共 API
{t
(destructuring-bind (tag &body body)
(eval-when (:compile-toplevel :load-toplevel :execute)
(eval-when (:compile-toplevel :load-toplevel :execute)
(consp form)
(sexp-html-p form)
(macro-form-p form)
{funcall (get tag
(funcall (get tag 'html-macro) attributes body))
(setf (get 
( (---   )
(setf (get ',name 
(get (first form) ‘html-macro-wants-attributes))
(lambda (,form-body)
(destructuring-bind （,@args) ,form-body ,@body)))))
(destructuring-bind (,@attribute-args)
(first
(destructuring-bind (,@args) ,form-body
,name
,@body))）)
,name
‘html-macro) body))))
form)
‘html-macro)
'html-macro)
html-macro-wants-attributes) t)
(process-special-form processor form))
(embed-value processor form))))
(embed-code processor form))
(process-sexp-html processor form))
www.TopSage.com
form
,attributes
31.4公共 API
401
---