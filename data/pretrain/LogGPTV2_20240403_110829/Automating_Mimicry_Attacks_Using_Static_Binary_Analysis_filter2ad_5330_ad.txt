state of the system, before execution has started from ad-
dress s. Thus, a symbolic term expresses the current value
of a register or a memory location as a function of the ini-
tial values. Therefore, the solution of the linear inequality
system denotes which variables of the initial state have to
be set, together with their appropriate values, to achieve
the desired result. Because the conﬁguration fulﬁlls the
path constraints of the current symbolic execution thread,
the actual execution will follow the path of this thread.
Moreover, the target value of the indirect control trans-
fer instruction will be t. Variables that are not part of the
linear inequality system do not have an inﬂuence on the
choice of the path or on the target address of the control
ﬂow instruction, thus, they do not need to be modiﬁed.
As an example, consider the sequence of machine instruc-
tions (and corresponding C source code) shown in Fig-
ure 7. In this example, the set of path constraints at the
indirect jump consists of a single constraint that requires
flag (stored at address 0x80495b4) to be greater than
0. After adding the constraint that requires the jump tar-
get (the address of the shared library function printf
stored at 0x80495a4) to be equal to t, the inequality sys-
tem is solved. In this case, the solution is trivial: the con-
tent of the memory location that holds the jump target is
set to t and variable flag is set to 1. In fact, any value
greater than 0 would be suitable for flag, but our con-
straint solver returns 1 as the ﬁrst solution.
The handling of data transfer instructions (store opera-
tions) is similar to the handling of control transfer instruc-
tions. The only difference is that, for a data transfer in-
struction, it is necessary that the destination address of
the operation be set to a function return address and that
the source of the operation be set to t. If this is the case,
the attacker can overwrite a function return address with
the address of the attacker code, and, on function return,
control is recovered. For each data transfer instruction,
two constraints are added to the linear inequation system.
One constraint requires that the destination address of the
store operation is equal to the function return address. The
other constraint requires that the stored value is equal to t.
Also, a check is required that makes sure that no system
call is invoked between the modiﬁcation of the function
return address and its use in the function epilogue (i.e., on
function return). The reason is that the intrusion detec-
tion system veriﬁes the integrity of the call stack at each
170
14th USENIX Security Symposium
USENIX Association
system call. Note, however, that most applications do not
invoke system calls directly but indirectly using library
functions, which are usually called indirectly via the PLT.
To solve the linear constraint systems, we use the Parma
Polyhedral Library (PPL) [1]. In general, solving a lin-
ear constraint system is exponential in the number of in-
equalities. However, PPL uses a number of optimizations
to improve the run time in practice and the number of in-
equalities is usually sufﬁciently small.
4.4 Memory Aliasing and Unknown Stores
In the previous discussion, two problems were ignored
that considerably complicate the analysis for real pro-
grams: memory aliasing and store operations to unknown
destination addresses.
Memory aliasing refers to the problem that two different
symbolic expressions s1 and s2 point to the same address.
That is, although s1 and s2 contain different variables,
both expressions evaluate to the same value. In this case,
the assignment of a value to an address that is speciﬁed
by s1 has unexpected side effects. In particular, such an
assignment simultaneously changes the content of the lo-
cation pointed to by s2.
Memory aliasing is a typical problem in static analy-
sis, which also affects high-level languages with pointers
(such as C). Unfortunately, the problem is exacerbated at
machine code level. The reason is that, in a high-level
language, only a certain subset of variables can be ac-
cessed via pointers. Also, it is often possible to perform
alias analysis that further reduces the set of variables that
might be subject to aliasing. Thus, one can often guar-
antee that certain variables are not modiﬁed by write op-
erations through pointers. At machine level, the address
space is uniformly treated as an array of storage locations.
Thus, a write operation could potentially modify any other
variable.
In our prototype, we initially take an optimistic approach
and assume that different symbolic expressions refer to
different memory locations. This approach is motivated
by the fact that C compilers (we use gcc 3.3 for our
experiments) address local and global variables so that a
distinct expression is used for each access to a different
variable. In the case of global variables, the address of the
variable is directly encoded in the instruction, making the
identiﬁcation of the variable particularly easy. For each
local variable, the access is done by calculating a different
offset to the value of the base pointer register (%ebp).
Of course, our optimistic assumption might turn out to be
incorrect, and we assume the independence of two sym-
bolic expressions when, in fact, they refer to the same
memory location. To address this problem, we introduce
an additional a posteriori check after a potentially ex-
ploitable instruction was found. This check operates by
simulating the program execution with the new conﬁgu-
ration that is derived from the solution of the constraint
system.
In many cases, having a conﬁguration in which sym-
bolic variables have concrete numerical values allows one
to resolve symbolic expressions directly to unambiguous
memory locations. Also, it can be determined with cer-
tainty which continuation of a conditional branch is taken.
In such cases, we can guarantee that control ﬂow will
be successfully regained.
In other cases, however, not
all symbolic expressions can be resolved and there is a
(small) probability that aliasing effects interfere with our
goal. In our current system, this problem is ignored. The
reason is that an attacker can simply run the attack to
check whether it is successful or not. If the attack fails,
one can manually determine the reason for failure and
provide the symbolic execution engine with aliasing in-
formation (e.g., adding constraints to specify that two ex-
pressions are identical).
In the future, we will explore
mechanisms to automatically derive constraints such that
all symbolic expressions can be resolved to a concrete
value.
A store operation to an unknown address is related to the
aliasing problem as such an operation could potentially
modify any memory location. Again, we follow an op-
timistic approach and assume that such a store operation
does not interfere with any variable that is part of the so-
lution of the linear inequality system (and thus, part of the
conﬁguration) and use simulation to check the validity of
this assumption.
5 Experimental Results
This section provides experimental results that demon-
strate that our symbolic execution technique is capable of
generating conﬁgurations C in which control is recovered
after making a system call (and, in doing so, temporar-
ily transferring control to the application program). For
all experiments, the programs were compiled using gcc
3.3 on a x86 Linux host. Our experiments were carried
out on the binary representation of programs, without ac-
cessing the source code.
For the ﬁrst experiment, we attempted to exploit three
sample programs that were protected by the intrusion de-
tection systems presented in [4] and [14]. The ﬁrst vulner-
able program is shown in Figure 8. This program starts by
reading a password from standard input. If the password
is correct (identical to the hard-coded string “secret”), a
USENIX Association
14th USENIX Security Symposium
171
command is read from a ﬁle and then executed with supe-
ruser privileges. Also, the program has a logging facility
that can output the command and the identiﬁer of the user
that has initially launched the program. The automaton in
Figure 9 shows the relevant portion of the graph that de-
termines the sequence of system calls that are permitted
by the intrusion detection system. The ﬁrst read system
call corresponds to the reading of the password (on line
23), while the execve call corresponds to the execution
of the command obtained from the ﬁle (on line 30). Note
the two possible sequences that result because commands
can be either logged or not.
 1:  #define CMD_FILE "commands.txt" 
 2:  
 3:  int enable_logging = 0;
 4:      
 5:  int check_pw(int uid, char *pass)
 6:  {
 7:      char buf[128];    
 8:      strcpy(buf, pass);
 9:      return !strcmp(buf, "secret");
10:  }
11:
12:  int main(int argc, char **argv)
13:  {
14:      FILE *f;
15:      int uid;
16:      char passwd[256], cmd[128];
17:
18:      if ((f = fopen(CMD_FILE, "r")) == NULL) {
19:          perror("error: fopen"); exit(1);
20:      }
21:    
22:      uid = getuid();
23:      fgets(passwd, sizeof(passwd), stdin);
24:    
25:      if (check_pw(uid, passwd)) {
26:          fgets(cmd, sizeof(cmd), f);
27:          if (enable_logging)  
28:              printf("uid [%d]: %s\n", uid, cmd);
29:          setuid(0);
30:          if (execl(cmd, cmd, 0) next)
13:          if (p->uid == uid)
14:              break;
15:        
16:      if (p == NULL) {
17:          p = (struct cmd_entry *)  
18:          p->uid = uid;
19:          p->next = cmds;
20:          cmds = p;
21:      }
22:
23:      p->cmd_id = cmd_id++;
24:  }
...
calloc(1, sizeof(struct cmd_entry));