31old ﬂags might be needed for the subsequent computation.
The constant $DMask denotes the data-region mask. Fol-
lowing PittSFIeld [21], a single bitwise-and sandboxing in-
struction is used to ensure that the resulting address is in
the data region. For instance, if the data region starts from
0x20000000 and is of 16MB size, then $DMask is 0x20ffffff.
The sandboxing instruction will also be called a check in the
rest of the paper.
4.1 Liveness analysis
Our system performs liveness analysis on registers and the
ﬂags register to remove operations that save and restore old
values when they are unnecessary.
Register liveness analysis. Oftentimes inlined reference
monitors require the use of scratch registers for storing inter-
mediate results. For instance, eax is used as a scratch regis-
ter in Fig. 3(b). One simple approach to avoiding the over-
head of saving and restoring scratch registers is to reserve a
dedicated scratch register. As an example, PittSFIeld [21]
reserves ebx as the scratch register. This approach has the
downside of increasing the register pressure, especially on
machines with few general-purpose registers.
Our alternative approach relies on register liveness analy-
sis. Liveness analysis is a classic compiler analysis technique.
At each program point, the liveness analysis calculates the
set of live registers; that is, those registers whose values are
used in the future. A register is dead if it is not live. At a
program point, a dead register can be used as the scratch
register without saving its old value (since the old value will
no longer be needed). When no dead register is available,
we can resort to the old way of saving the scratch register
on the stack.
For the running example in Fig. 3, if register liveness anal-
ysis determines that eax is dead after the instruction ebx :=
[ecx + 4], then there is no need to save and restore its old
value; the sequence in Fig. 3(c) is then suﬃcient.
We implemented an intra-procedural register liveness anal-
ysis with extra assumptions about the calling convention. It
is a backward dataﬂow analysis and uses a standard work-
list algorithm. The analysis takes advantage of the cdecl
calling convention to deal with function calls and returns.
In particular, the live-out of a return instruction is those
callee-saved registers (including ebx, esi, and edi) together
with registers that contain the return value. The live-in of
a call instruction is the live-out subtracted by the set of
caller-saved registers (including eax, ecx, and edx).
We note the correctness of liveness analysis (including the
assumption about the calling convention) does not aﬀect
security. When liveness analysis produced wrong results,
some registers would not be properly saved and restored;
this would aﬀect the correctness of the program, but not
the security of its memory operations.
Flags-register liveness analysis. We also perform the
ﬂags-register liveness analysis to remove unnecessary opera-
tions for saving and restoring the ﬂags register. Saving and
restoring the status ﬂags are costly on modern processors.
For the running example, if the analysis determines that the
ﬂags register is dead after the instruction ebx := [ecx +
4], then the sequence in Fig. 3(d) can be used.
For simplicity, we perform the ﬂags-register liveness anal-
ysis only within basic blocks. We assume ﬂags are not used
across basic blocks (meaning the register is assumed dead at
Figure 2: Data region and guard zones.
4. DATA SANDBOXING OPTIMIZATIONS
We next present a series of optimizations that signiﬁ-
cantly cut the data-sandboxing cost. The data-sandboxing
optimizations utilize static analysis to identify optimization
opportunities. The optimizations are similar to those per-
formed in an optimizing compiler, except they need to not
only improve performance but also maintain the security.
Note this section assumes CFI is already in place; Sec. 6
will discuss CFI and its own optimizations. One immediate
beneﬁt of CFI is it obviates the need for chunk-based control-
ﬂow integrity [21, 25]. CFI provides better security as its
control-ﬂow graph is more precise. Moreover, it also avoids
the large number of no-ops that have to be inserted for in-
struction alignment. The extra no-ops add both spatial and
temporal overheads. PittSFIeld [21] reports that inserted
no-ops account for about half of the runtime overhead of
enforcing data integrity. NaCl [25] reports that instruction
alignment accounts for most of its performance overhead.
In addition, CFI enables many other optimizations. Be-
fore we discuss these optimizations, we present a running
example that will be used to illustrates how the optimiza-
tions work.
A running example. Fig. 3 presents the example. For
clarity, this and other programs in the paper use a pseudo-
assembly syntax whose notation is described as follows. We
use “:=” for an assignment. When an operand represents a
memory address, it is put into square brackets. For instance,
[esp] denotes a memory-address operand with the address
in esp, while esp (without square brackets) represents a reg-
ister operand. We will also use the syntax “if
... goto
...” to represent a comparison followed by a conditional
jump instruction (i.e., jcc).
Fig. 3(a) shows an instruction that transfers the contents
at memory location ecx+4 to ebx. For protecting conﬁden-
tiality, the address has to be sandboxed before the memory
read. Fig. 3(b) presents an unoptimized sequence of instruc-
tions that performs the sandboxing. In the sequence, eax is
used as a scratch register for holding the intermediate value.
Since the old value of eax might be needed afterwards, the
sequence pushes eax onto the stack and later restores its
value. The ﬂags register, which stores status ﬂags such as
the overﬂow ﬂag, also needs to be saved and restored since
the bitwise-and instruction changes the status ﬂags and the
32(a) Original instruction
(b) Unoptimized instruction sequence
(c) When eax is a dead register
ebx := [ecx + 4]
push eflags
push eax
eax := ecx + 4
eax := eax & $DMask
ebx := [eax]
pop eax
pop eflags
push eflags
eax := ecx + 4
eax := eax & $DMask
ebx := [eax]
pop eflags
(d) When the ﬂags register is dead
(e) After in-place sandboxing
eax := ecx + 4
eax := eax & $DMask
ebx := [eax]
ecx := ecx & $DMask
ebx := [ecx + 4]
Figure 3: A running example for illustrating optimizations. DMask is the data-region mask.
the end of a basic block). This seems to be an assumption
used by compilers and has been conﬁrmed by our experi-
ments on SPECint2000.3
PittSFIeld [21] avoids saving and restoring the ﬂags regis-
ter by disabling instruction scheduling in compilers. It pre-
vents compilers from moving comparisons away from their
corresponding branching instructions. In contrast, our ap-
proach allows instruction scheduling within basic blocks.
4.2 In-place sandboxing
Thanks to the guard zones before and after the data re-
gion, there are special cases where we can avoid using a
scratch register. A commonly used address pattern in mem-
ory operations is a base register plus a small displacement
(which is a static constant value). For instance, this pattern
is used to access ﬁelds of a data structure; the base register
holds the base address of the data structure and the dis-
placement is the oﬀset of a ﬁeld. When a memory address
of this pattern is used, we can perform the optimization
that sandboxes just the base register. The running exam-
ple in Fig. 3 uses address ecx+4. Therefore, the sequence in
Fig. 3(e) sandboxes the base register ecx directly.
The safety of this transformation is straightforward to see.
After “ecx := ecx & $DMask”, register ecx is constrained
within the data region. Consequently, ecx+4 must be within
the data region plus the guard zones (assuming GSize ≥ 4).
The memory operation is then allowed according to the data
security policy.
We call this optimization in-place sandboxing since it sand-
boxes the base register directly and avoids the use of an extra
scratch register. Additionally, it has the beneﬁt of making
it convenient to remove redundant checks, as shown next.
4.3 Optimizations based on range analysis
According to the data-sandboxing policy, a memory access
is allowed if the address range is within the valid range of the
data region plus guard zones. This deﬁnition naturally leads
to a strategy of removing unnecessary checks: if the address
range of a memory access can be statically determined to
3This might be broken by hand-written assembly code. But
similar to register liveness analysis, the correctness of this
analysis does not aﬀect security.
ecx := ecx & $DMask
eax := [ecx + 4]
ecx ∈ [−∞, +∞]
ecx ∈ [DB, DL]
ecx ∈ [DB, DL]
ecx ∈ [DB, DL]
ecx ∈ [DB, DL]
ecx ∈ [DB, DL]
... // assume ecx not changed in between
ecx := ecx & $DMask
ebx := [ecx + 8]
Figure 4: An example demonstrating redundant
check elimination.
be within the valid range, then it is unnecessary to have a
check before the memory access.
To realize this idea, we have implemented range analy-
sis on low-level code. At each program point, the range
analysis determines the ranges of values in registers. The
range [−∞, +∞] is the universe and gives no information.
For instance, after an operation that loads contents from
the data region into a register, the register’s range becomes
[−∞, +∞]; this reﬂects that the attack model allows arbi-
trary changes to the data region. In many other situations,
a more accurate range can be obtained. For instance, after
“ecx := ecx & $DMask”, the range of ecx is [DB, DL] (i.e.,
the data region).
We have implemented two optimizations that take advan-
tage of range analysis. We discuss them next.
Redundant check elimination. This optimization takes
an input program with checks embedded in and aims to elim-
inate redundant checks. It is performed in two steps. In the
ﬁrst step, range analysis is performed on the input program.
In the second step, it uses the results of range analysis and
heuristics to decide whether a check can be eliminated. For
instance, if the range of r is within the data region before
“r := r & $DMask”, then the check is equivalent to a no-
op and thus unnecessary. As another example, suppose (1)
the instruction sequence is “r := r & $DMask” immediately
followed by a memory dereference through r; (2) the range
of r before the sequence is within the data region plus the
guard zones, then the check can also be removed because the
memory dereference is safe without the check. The general
33(a) Unoptimized sequence
(b) Hoisting checks outside of the loop
esi := eax
ecx := eax + ebx * 4
edx := 0
loop:
esi≥uecx goto end
if
esi := esi & $DMask
edx := edx + [esi]
esi := esi + 4
jmp loop
esi := eax
ecx := eax + ebx * 4
edx := 0
esi := esi & $DMask
loop:
esi≥uecx goto end
if
edx := edx + [esi]
esi := esi + 4
jmp loop
end:
end:
Figure 5: An example demonstrating loop check hoisting.
criterion for a removal is if it can be statically determined
that the removal will not result in unsafe access in the fol-
lowing memory dereference.
We next examine a simple example in Fig. 4. Imagine ecx
is the base address of a C struct. The program then loads
two ﬁelds from the struct. Each memory read is preceded
by a check. The ﬁgure also shows the ranges of ecx at each
program point. With range analysis, the optimizer can tell
that the second check can be removed because the range of
ecx is already in the data region before the check.
Loop check hoisting. This optimization hoists checks so
that one single check outside the loop is suﬃcient to guar-
antee safety of all memory access in the loop.
Fig. 5 presents an example program showing how static
analysis enables hoisting checks outside of loops. The assem-
bly program in the ﬁgure calculates the sum of an integer
array (with base address a and length len) and roughly cor-
responds to the following C program:
sum = 0;
int *p = a;
while (p < a + len) {
sum = sum + *p;
p = p + 1;
}
In Fig. 5, eax holds the initial address of the array, ebx
holds the length, and esi holds the pointer value p. With-
out optimization, esi needs to be sandboxed within the loop
body. The sandboxing instruction is underlined in Fig. 5.
That sandboxing instruction can actually be moved outside
of the loop, avoiding the per-iteration sandboxing (how the
optimization is achieved will be discussed shortly). The op-
timized code is shown in Fig. 5(b).
It is instructive to understand why the code in Fig. 5(b)
is safe even though it sandboxes only the beginning address
of the array and there is no restriction on the array length.
To show its safety, it is suﬃcient to show that esi ∈ [DB,
DL+4] is a loop invariant. The condition is clearly true at the
beginning of the loop since the sandboxing instruction gives
esi ∈ [DB, DL]. Next, assuming the condition holds at the
beginning of the loop body, we try to re-establish it at the
end of the loop body. The key step in the reasoning is that
esi ∈ [DB, DL] holds after edx := edx + [esi]—a hard-
ware trap would be generated if esi were in guard zones.
With that result, the following add-by-four operation clearly
re-establishes the loop invariant. What has been exploited
is the following observation: since access to guard zones can
Figure 6: Range analysis result for the program in
Figure 5(a), after the check is duplicated at the loop
pre-head. Only the ranges of esi are included.
be eﬃciently trapped, a successful (untrapped) memory ac-
cess actually serves as a “check” and narrows the range down
to the data region.
The loop optimization is implemented in multiple steps,
outlined as follows:
(1) Dominator trees are used to identify loops in assembly
code. Backward edges in a dominator tree is then used
to locate loops. Calculation of the dominator tree and
loop identiﬁcation are standard techniques in an opti-
mizing compiler [3].
(2) Given an input program, any check that appears in the
loop body is duplicated at the beginning of a loop. For
the program in Fig. 5(a), this step results in the pro-
gram depicted in Fig. 6. Notice the instruction “esi :=
esi & $DMask” is duplicated before the loop. One worry
of eagerly sandboxing before the loop is it might change
the program behavior. However, if we assume good code
will always have pointers that point into the data region,
then eager sandboxing should be an idempotent opera-
tion for good code and it breaks only programs that
would violate the policy.4
4Certain programming practices use pointers that are out-
34(3) A range analysis is then performed to decide if any check
is unnecessary. Fig. 6 also presents the ranges of esi at
each program point. Notice the range of esi is within
the data region plus guard zones (assuming GSize ≥
4). This enables the optimizer to remove the check in
the loop body. After its removal, we get the optimized
program in Fig. 5(b). There is also a possibility that the
optimizer decides that the check in the loop cannot be
removed; in this case, the corresponding one that was
added before the loop is removed.
The above strategy of loop optimizations has the beneﬁt
of performing only one round of range analysis even if the
program has multiple loops or nested loops. However, it
does not capture every loop-hoisting opportunity. Another
strategy is to hoist checks outside the loop one by one, and
use the veriﬁer (discussed in the next section) to check the
safety of intermediate results; but it involves backtracking
and performing a range analysis after each intermediate step.
5. VALIDATING DATA SANDBOXING
Of the three SFI optimizations we have discussed, live-
ness analysis is not security critical: security would not be
aﬀected even if it produced wrong results. On the other
hand, the other two optimizations change checks, remove
checks, or move checks to a diﬀerent place. Security would
be aﬀected if they were wrong. Since low-level optimiza-
tions are extremely error prone, it is always a good idea to
have a separate veriﬁer to verify the results of optimizations,
instead of trusting the optimizer.
Previous SFI veriﬁers assume checks appear immediately
before memory operations. With that assumption, a simple