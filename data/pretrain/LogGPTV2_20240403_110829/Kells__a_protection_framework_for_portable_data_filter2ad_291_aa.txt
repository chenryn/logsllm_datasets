title:Kells: a protection framework for portable data
author:Kevin R. B. Butler and
Stephen E. McLaughlin and
Patrick D. McDaniel
Kells: A Protection Framework for Portable Data ∗
Kevin R.B. Butler
Department of Computer & Information Science
University of Oregon, Eugene, OR
PI:EMAIL
Stephen E. McLaughlin and
Patrick D. McDaniel
Systems and Internet Infrastructure Security
Laboratory (SIIS)
Penn State University, University Park, PA
{smclaugh,mcdaniel}@cse.psu.edu
ABSTRACT
Portable storage devices, such as key-chain USB devices, are ubiq-
uitous. These devices are often used with impunity, with users re-
peatedly using the same storage device in open computer labora-
tories, Internet cafes, and on ofﬁce and home computers. Conse-
quently, they are the target of malware that exploit the data present
or use them as a means to propagate malicious software.This paper
presents the Kells mobile storage system. Kells limits untrusted
or unknown systems from accessing sensitive data by continuously
validating the accessing host’s integrity state. We explore the de-
sign and operation of Kells, and implement a proof-of-concept USB
2.0 storage device on experimental hardware. Our analysis of Kells is
twofold. We ﬁrst prove the security of device operation (within a
freshness security parameter ∆t) using the LS2 logic of secure sys-
tems. Second, we empirically evaluate the performance of Kells.
These experiments indicate nominal overheads associated with host
validation , showing a worst case throughput overhead of 1.22% for
read operations and 2.78% for writes.
1.
INTRODUCTION
Recent advances in materials and memory systems have irre-
versibly changed the storage landscape. Small form factor portable
storage devices housing previously unimaginable capacities are now
commonplace today–supporting sizes up to a quarter of a terabyte [15].
Such devices change how we store our data; single keychain de-
vices can simultaneously hold decades of personal email, millions
of documents, thousands of songs, and many virtual machine im-
ages. These devices are convenient, as we can carry the artifacts of
our digital lives wherever we go.
The casual use of mobile storage has a darker implication. Users
plugging their storage devices into untrusted hosts are subject to
data loss [16] or corruption. Compromised hosts have unfettered
access to the storage plugged into their interfaces, and therefore
have free rein to extract or modify its contents. Users face this risk
when accessing a friend’s computer, using a hotel’s business ofﬁce,
in university computer laboratories, or in Internet cafes. The risks
∗This work was supported by Symantec Research Labs and by
grant NSF CCF-HECURA 0937344.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
here are real. Much like the ﬂoppy disk-borne viruses in the 1980’s
and 90’s, malware like Conﬁcker [22] and Agent.bz [32] exploit
mobile storage to propagate malicious code. The compromise of
hosts throughout military networks, due to malware propagated by
rogue portable storage devices, has already led to a ban of their
use by the US Department of Defense [28]. The underlying se-
curity problem is age-old: users cannot ascertain how secure the
computer they are using to access their data is. As a result, all of
their information is potentially at risk if the system is compromised.
This paper attempts to address this conundrum by responding to the
following challenge: How can we verify that the computer we are
attaching our portable storage to is safe to use?
Storage security has recently become an active area of investi-
gation. Solutions such as full-disk encryption [25] and Microsoft’s
BitLocker to Go [18] require that the user supply a secret to access
stored data. This addresses the problem of device loss or theft, but
does not aid the user when the host to which it is to be attached is
itself untrustworthy. Conversely, BitLocker (for ﬁxed disks) uses a
trusted platform module (TPM) [36] to seal a disk partition to the
integrity state of the host, thereby ensuring that the data is safe-
guarded from compromised hosts. This is not viable for mobile
storage, as data is bound to the single physical host. In another ef-
fort, the Trusted Computing Group (TCG) has considered methods
of authenticating storage to the host through the Opal protocol [37]
such as pre-boot authentication and range encryption and locking
for access control. These services may act in a complementary
manner to our solution for protecting mobile storage from poten-
tially compromised hosts.
In this paper, we introduce Kells1, an intelligent USB storage de-
vice that validates host integrity prior to allowing read/write access
to its contents, and thereafter only if the host can provide ongoing
evidence of its integrity state. When initially plugged into an un-
trusted device, Kells performs a series of attestations with trusted
hardware on the host, repeated periodically to ensure that the host’s
integrity state remains good. Kells uses integrity measurement to
ascertain the state of the system and the software running on it at
boot time in order to determine whether it presents a safe platform
for exposing data. If the platform is deemed to be trustworthy then
a trusted storage partition will be exposed to the user; otherwise,
depending on a conﬁgurable policy, the device will either mount
only a “public” partition with untrusted ﬁles exposed or will not
mount at all. If at any time the device cannot determine the host’s
integrity state or the state becomes undesirable, the protected par-
tition becomes inaccessible. Kells can thus ensure the integrity of
data on a trusted storage partition by ensuring that data can only
be written to it from high-integrity, uncompromised systems. Our
1The Book of Kells is traceable to the 12th century Abbey of Kells,
Ireland due to information on land charters written into it.
231Figure 1: Overview of the Kells system operation. Attestations of system state are required to be received successfully by the device in order
for the integrity of the host to be proved, a necessary precondition for allowing data to be available to the host.
design uses the commodity Trusted Platform Module (TPM) found
in the majority of modern computers as our source for trusted hard-
ware, and our implementation and analysis use it as a component.
We note, however, that it is not integral to the design: any host
integrity measurement solution (e.g., Pioneer [26]) can be used.
Kells diverges substantially from past attempts at securing ﬁxed
and mobile storage. In using the mobile storage device as an au-
tonomous trusted computing base (TCB), we extend the notion of
self-protecting storage [3, 11, 21] to encompass a system that ac-
tively vets the devices that make use of it. A Kells device is active
in order to be able to make these policy decisions. While this is
a change from the passive USB devices often currently employed,
we note that an increasing class of storage devices include process-
ing elements such as cryptographic ASICs. We thus provide a path
to enjoying the convenience of now-ubiquitous portable storage in
a safe manner. Our contributions are as follows:
• We identify system designs and protocols that support portable
storage device validation of an untrusted host’s initial and on-
going integrity state. To the best of our knowledge, this is the
ﬁrst use of such a system by a dedicated portable storage de-
vice.
• We reason about the security properties of Kells using the
LS2 logic [6], and prove that the storage can only be ac-
cessed by hosts whose integrity state is valid (within a secu-
rity parameter ∆t).
• We describe and benchmark our proof of concept Kells sys-
tem built on a DevKit 8000 board running embedded Linux
and connected to a modiﬁed Linux host. We empirically
evaluate the performance of the Kells device. These experi-
ments indicate that the overheads associated with host valida-
tion are minimal, showing a worst case throughput overhead
of 1.22% for read operations and 2.78% for writes.
We begin the description of Kells by providing a broad overview of
its goals, security model, and operation.
2. OVERVIEW
Figure 1 illustrates the operation of Kells. Once a device is
inserted, the host may request a public or trusted partition.
If a
trusted partition is requested, the host and Kells device perform
an attestation-based exchange that validates host integrity. If this
fails, the host will be permitted to mount the public partition, if any
exists. If the validation process is successful, the host is allowed
access to the trusted partition. The process is executed periodically
to ensure the system remains in a valid state. The frequency of the
re-validation process is determined by the Kells policy.
2.1 Operational Modes
There are two modes of operation for Kells, depending on how
much control over device administration should be available to the
user and how much interaction he should have with the device. We
review these below:
Transparent Mode.
In this mode of operation, the device requires no input from the
user. The host veriﬁcation process executes immediately after the
device is inserted into the USB interface. If the process succeeds,
the device may be used in a trusted manner as described above,
i.e., the device will mount with the trusted partition available to the
user. If the attestation process is unsuccessful, then depending on
the reason for the failure (e.g., because the host does not contain
a TPM or contains one that is unknown to the device), the public
partition on the device can be made available. Alternately, the de-
vice can be rendered unmountable altogether. A visual indicator on
the device such as an LED can allow the user to know whether the
host is trusted or not: a green light may indicate a good state while
a ﬂashing red light indicates an unknown or untrusted host.
User-Deﬁned Mode.
The second mode of operation provides the user with a more
active role in making storage available. When the Kells device is
inserted into the system, prior to the attestation taking place, a par-
tition containing user-executable programs is made available. One
is a program prompting the user to choose whether to run the de-
vice in trusted or public mode. If the user chooses to operate in
trusted mode, then the attestation protocol is performed, while if
public mode is chosen, no attestations occur. In this manner, the
user can make the decision to access either partition, with further
policy that may be applied on trusted hosts opening untrusted par-
titions, to prevent potential malware infection. These hosts may
quarantine the public partition, requiring a partition scan prior to
allowing access. Such a scan can also be performed by the device.
Such a scenario could be useful if there is a need or desire to access
speciﬁc media (e.g., photographs, songs) from the public partition
of the disk while using a trusted host, without having to mark the
information as trusted. Trusted partitions on a Kells device are un-
likely to be infected to begin with, on account of any host using
this partition having to attest its integrity state. This is essential,
since a user would not be hesitant to load or execute content from
a partition that is considered trusted.
Note that the policies described above are but two examples of
the methods of operation available with this infrastructure. For sim-
plicity, we have described the coarse-grained granularity of trusted
and public partitions. Within the trusted parition, however, fur-
ther ﬁne-grained policy can be enforced depending on the identi-
ﬁed host; for example, blocks within the partition may be labeled
USB drive plugged inHost request for trusted partition?Host veriﬁcation processMount public partitionMount trusted partition (if needed)YesNoPassFailRevalidation Timeout232Figure 2: Overview of the Kells architecture.
depending on the host writing to them, with a data structure keep-
ing track of the labels and access controls to data (e.g., encrypting
labeled data and only decrypting based on the host having access
to this label, as speciﬁed by device policy).
2.2 Threat Model
We assume the adversary is capable of subverting a host oper-
ating system at any time. While we do not speciﬁcally address
physical attacks against the Kells device, such as opening the drive
enclosure to manipulate the physical storage media or modifying
the device tick-counter clock, we note that defenses against these
attacks have been implemented by device manufacturers. Notably,
portable storage devices from IronKey [1] contain signiﬁcant phys-
ical tamper resistance with epoxy encasing the chips on the de-
vice, electromagnetic shielding of the cryptographic processor, and
a waterproof enclosure. SanDisk’s Cruzer Enterprise [24] contains
a secure area for encryption keys that is sealed with epoxy glue.
Tamper-resistance has also been considered for solutions such as
the IBM Zurich Trusted Information Channel [38]. Such solutions
would be an appropriate method of defense for Kells. In addition,
we assume that any reset of the hardware is detectable by the de-
vice (for example, by detecting voltages changes on the USB bus
and receiving cleared PCR values from the TPM).
Kells does not in itself provide protection for the host’s internal
storage, though an adaptation of our design can be used to pro-
vide a similar protection mechanism, as with the Firma storage-
rooted secure boot system [2]). Integrity-based solutions exist that
protect the host’s internal storage (hard disks), including storage-
based intrusion detection [21] and rootkit-resistant disks [3]. As
is common in these systems, we declare physical attacks against
the host’s TPM outside the scope of this work. As previously dis-
cussed, the TPM is used as an implementation point within our
architecture and other solutions for providing host-based integrity
measurement may be used. As a result, we do not make any at-
tempt to solve the many limitations of TPM usage in our solution.
Additionally, we do not consider the issue of devices attesting their
state to the host. The TCG’s Opal protocol [37] includes provisions
for trusted peripherals, addressing the issue by requiring devices
to contain TPMs. Software-based attestation mechanisms such as
SWATT [27], which does not require additional trusted hardware,
may also be used. Finally, we rely on system administrators to
provide accurate measurements of their systems, which must be
updated if there are changes (e.g., due to conﬁguration or updates).
Without updates, Kells will not be able to provide access to the
trusted partitions of these systems.
3. DESIGN AND IMPLEMENTATION
We now turn to our design of the Kells architecture, shown in
Figure 2, and describe details of its implementation. There are
three major components of the system where modiﬁcations are nec-
Figure 3: Overview of USB operation with an embedded Linux
mass storage device, or gadget.
Figure 4: Sample USB setup between a host and the Kells device.
essary: the interface between the host and the device, the storage
device itself, and the host’s operating system.
3.1 USB Interface
We begin by describing the basics of USB operation in order to
aid in understanding the design of Kells. This is a brief overview;
more details may be found in the appendix.
The basic USB mass storage device stack is shown in Figure 3.
At the USB layer are endpoints, the means by which USB com-
mands are send and received. USB mass storage devices primarily
use bulk transfers, a best-effort service, to transmit information, but
every device also supports the ﬂow of control transfers over end-
point 0. Above the USB layer is a SCSI emulation layer supporting
a limited subset of SCSI commands, such as reads and writes.
Within operating systems that support USB, such as Linux, the
number and functionality of supported devices is large and diverse.
To support devices (or gadgets) that do not conform to the USB
speciﬁcaton, Linux contains a repository for these devices and sets
ﬂags when they to modify the host behavior, in order to correctly
operate with these devices.
USB is a master-slave protocol, meaning that all commands must
be initiated by the host. This model is conceptually at odds with a
device such as Kells, which independently enforces security policy.
Therefore, we reconsider how the device interacts with the host.
Figure 4 gives an abridged overview of the device setup process
at the USB layer. As with any USB device, high-speed detection
policystoretrusted storagepublic storageUSB InterfaceTPMdriverattestationdaemonIMAattestationsremote updatesHostDeviceUSBSCSIep0ep1ep2USBCTRLBULK (IN)SCSIep0ep1ep2READ, WRITEFilesystemFAT32OSLinuxHostDeviceBULK (OUT)HostDeviceResetHS Detection HandshakeSet Address (n)ACKDescriptors (Vendor ID, Product ID)GetDescriptor (Interface)Descriptors (mass storage, BBB)Check received IDs, set flags if trustedADSC (Begin Protocol)Challenge (nonce)GetDescriptor (Device)233and bus addressing is performed before information is requested by
the host. The host requests the device descriptor, which includes
information such as the device’s vendor and product ID, as well as
a unique serial number. When the host requests the interface de-
scriptor, the Kells device identiﬁes itself as a mass storage device
that operates in the typical fashion of only performing bulk trans-
fers. The host will set ﬂags accordingly in order to send the correct