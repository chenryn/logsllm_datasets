# 18 \| 性能分析：找出程序的瓶颈你好，我是 Chrono。今天是"技能进阶"单元的最后一节课，我也要兑现刚开始在"概论"里的承诺，讲一讲在运行阶段我们能做什么。运行阶段能做什么在编码阶段，你会运用之前学习的各种范式和技巧，写出优雅、高效的代码，然后把它交给编译器。经过预处理和编译这两个阶段，源码转换成了二进制的可执行程序，就能够在CPU 上"跑"起来。在运行阶段，C++ 静态程序变成了动态进程，是一个实时、复杂的状态机，由CPU 全程掌控。但因为 CPU的速度实在太快，程序的状态又实在太多，所以前几个阶段的思路、方法在这个时候都用不上。所以，我认为，在运行阶段能做、应该做的事情主要有三件：**调试**（Debug）**、测试**（Test）**和性能分析**（PerformanceProfiling）。调试你一定很熟悉了，常用的工具是GDB，我在前面的"轻松话题slate-object="inline""里也讲过一点它的使用技巧。它的关键是让高速的 CPU慢下来，把它降速到和人类大脑一样的程度，于是，我们就可以跟得上 CPU的节奏，理清楚程序的动态流程。测试的目标是检验程序的功能和性能，保证软件的质量，它与调试是相辅相成的关系。测试发现Bug，调试去解决Bug，再返回给测试验证。好的测试对于软件的成功至关重要，有很多现成的测试理论、应用、系统（你可以参考下，我就不多说了）。一般来说，程序经过调试和测试这两个步骤，就可以上线运行了，进入第三个、也是最难的性能分析阶段。什么是性能分析呢？你可以把它跟 Code Review 对比一下。Code Review是一种静态的程序分析方法，在编码阶段通过观察源码来优化程序、找出隐藏的Bug。而性能分析是一种动态的程序分析方法，在运行阶段采集程序的各种信息，再整合、研究，找出软件运行的"瓶颈"，为进一步优化性能提供依据，指明方向。从这个粗略的定义里，你可以看到，性能分析的关键就是"**测量**"，用数据说话。没有实际数据的支撑，优化根本无从谈起，即使做了，也只能是漫无目的的"不成熟优化"，即使成功了，也只是"瞎猫碰上死耗子"而已。性能分析的范围非常广，可以从 CPU利用率、内存占用率、网络吞吐量、系统延迟等许多维度来评估。今天，我只讲多数时候最看重的 CPU 性能分析。因为 CPU利用率通常是评价程序运行的好坏最直观、最容易获取的指标，优化它是提升系统性能最快速的手段。而其他的几个维度也大多与CPU分析相关，可以达到"以点带面"的效果。系统级工具刚才也说了，性能分析的关键是测量，而测量就需要使用工具，那么，你该选什么、又该怎么用工具呢？其实，Linux 系统自己就内置了很多用于性能分析的工具，比如top、sar、vmstat、netstat，等等。但是，Linux的性能分析工具太多、太杂，有点"乱花渐欲迷人眼"的感觉，想要学会并用在实际项目里，不狠下一番功夫是不行的。所以，为了让你能够快速入门性能分析，我根据我这些年的经验，挑选了四个"高性价比"的工具：top、pstack、strace和perf。它们用起来很简单，而且实用性很强，可以观测到程序的很多外部参数和内部函数调用，由内而外、由表及里地分析程序性能。第一个要说的是"**top**"，它通常是性能分析的"起点"。无论你开发的是什么样的应用程序，敲个top 命令，就能够简单直观地看到CPU、内存等几个最关键的性能指标。top展示出来的各项指标的含义都非常丰富，我来说几个操作要点吧，帮助你快速地抓住它的关键信息。一个是按"M"，看内存占用（RES/MEM），另一个是按"P"，看 CPU占用，这两个都会从大到小自动排序，方便你找出最耗费资源的进程。另外，你也可以按组合键"xb"，然后用"\"手动选择排序的列，这样查看起来更自由。我曾经做过一个"魔改"Nginx 的实际项目，下面的这个截图展示的就是一次top 查看的性能：![](Images/a64eb681ac87cfa910e626433c43a68e.png)savepage-src="https://static001.geekbang.org/resource/image/6a/a8/6a44808ccc8b1df7bef0a51c888ce2a8.png"}从 top 的输出结果里，你可以看到进程运行的概况，知道CPU、内存的使用率。如果你发现某个指标超出了预期，就说明可能存在问题，接下来，你就应该采取更具体的措施去进一步分析。比如说，这里面的一个进程 CPU使用率太高，我怀疑有问题，那我就要深入进程内部，看看到底是哪些操作消耗了CPU。 这时，我们可以选用两个工具：**pstack 和strace**。pstack可以打印出进程的调用栈信息，有点像是给正在运行的进程拍了个快照，你能看到某个时刻的进程里调用的函数和关系，对进程的运行有个初步的印象。下面这张截图显示了一个进程的部分调用栈，可以看到，跑了好几个 ZMQ的线程在收发数据：![](Images/d80ebcdd220f5b063e1dd671379b10e1.png)savepage-src="https://static001.geekbang.org/resource/image/6c/9c/6c115ce03d6b4803960277468cf91b9c.png"}不过，pstack 显示的只是进程的一个"静态截面"，信息量还是有点少，而strace可以显示出进程的正在运行的系统调用，实时查看进程与系统内核交换了哪些信息：![](Images/96a3d6eb78fbaa849872ce42cffcda58.png)savepage-src="https://static001.geekbang.org/resource/image/b7/f0/b747d0d977c7f420507ec9e9d84e6ff0.png"}把 pstack 和 strace结合起来，你大概就可以知道，进程在用户空间和内核空间都干了些什么。当进程的CPU利用率过高或者过低的时候，我们有很大概率能直接发现瓶颈所在。不过，有的时候，你也可能会"一无所获"，毕竟这两个工具获得的信息只是"表象"，数据的"含金量"太低，做不出什么有效的决策，还是得靠"猜"。要拿到更有说服力的"数字"，就得**perf** 出场了。perf 可以说是 pstack 和 strace的"高级版"，它按照固定的频率去"采样"，相当于连续执行多次的pstack，然后再统计函数的调用次数，算出百分比。只要采样的频率足够大，把这些"瞬时截面"组合在一起，就可以得到进程运行时的可信数据，比较全面地描述出CPU 使用情况。我常用的 perf 命令是"**perf top -K -pxxx** "，按 CPU使用率排序，只看用户空间的调用，这样很容易就能找出最耗费 CPU的函数。 比如，下面这张图显示的是大部分 CPU 时间都消耗在了 ZMQ库上，其中，内存拷贝调用居然达到了近30%，是不折不扣的"大户"。所以，只要能把这些拷贝操作减少一点，就能提升不少性能。![](Images/26ae14f5c2ce4eceb52eb1119d68877f.png)savepage-src="https://static001.geekbang.org/resource/image/55/15/5543dec44c23d23b583bc937213e7c15.png"}总之， **使用 perf通常可以快速定位系统的瓶颈，帮助你找准性能优化的方向**。课下你也可以自己尝试多分析各种进程，比如Redis、MySQL，等等，观察它们都在干什么。源码级工具top、pstack、strace 和 perf属于"非侵入"式的分析工具，不需要修改源码，就可以在软件的外部观察、收集数据。它们虽然方便易用，但毕竟是"隔岸观火"，还是不能非常细致地分析软件，效果不是太理想。所以，我们还需要有"侵入"式的分析工具，在源码里"埋点"，直接写特别的性能分析代码。这样针对性更强，能够有目的地对系统的某个模块做精细化分析，拿到更准确、更详细的数据。其实，这种做法你并不陌生，比如计时器、计数器、关键节点打印日志，等等，只是通常并没有上升到性能分析的高度，手法比较"原始"。在这里，我要推荐一个专业的源码级性能分析工具：**Google PerformanceTools** ，一般简称为gperftools。它是一个 C++工具集，里面包含了几个专门的性能分析工具（还有一个高效的内存分配器tcmalloc），分析效果直观、友好、易理解，被广泛地应用于很多系统，经过了充分的实际验证。    apt-get install google-perftools    apt-get install libgoogle-perftools-devgperftools 的性能分析工具有 CPUProfiler 和 HeapProfiler两种，用来分析 CPU和内存。不过，如果你听从我的建议，总是使用智能指针、标准容器，不使用new/delete，就完全可以不用关心HeapProfiler。CPUProfiler 的原理和 perf 差不多，也是按频率采样，默认是每秒 100次（100Hz），也就是每 10毫秒采样一次程序的函数调用情况。它的用法也比较简单，只需要在源码里添加三个函数：1.  **ProfilerStart()**        ，开始性能分析，把数据存入指定的文件里；        2.  **ProfilerRegisterThread()**        ，允许对线程做性能分析；        3.  **ProfilerStop()**        ，停止性能分析。        所以，你只要把想做性能分析的代码"夹"在这三个函数之间就行，运行起来后，gperftools就会自动产生分析数据。为了写起来方便，我用 shared_ptr 实现一个自动管理功能。这里利用了void\* 和空指针，可以在智能指针析构的时候执行任意代码（简单的 RAII惯用法）：     auto make_cpu_profiler =            // lambda表达式启动性能分析    [](const string& filename)          // 传入性能分析的数据文件名    {      ProfilerStart(filename.c_str());  // 启动性能分析      ProfilerRegisterThread();         // 对线程做性能分析      return std::shared_ptr(     // 返回智能指针        nullptr,                        // 空指针，只用来占位        [](void*){                      // 删除函数执行停止动作            ProfilerStop();             // 停止性能分析        }         );      };下面我写一小段代码，测试正则表达式处理文本的性能：    auto cp = make_cpu_profiler("case1.perf");     // 启动性能分析    auto str = "neir:automata"s;    for(int i = 0; i  case1.txt    Total: 72 samples      4   5.6%   5.6%   4   5.6% __gnu_cxx::__normal_iterator::base      4   5.6%  11.1%   4   5.6% _init      4   5.6%  16.7%   4   5.6% std::vector::begin      3   4.2%  20.8%   4   5.6% __gnu_cxx::operator-      3   4.2%  25.0%   5   6.9% std::__distance      2   2.8%  27.8%   2   2.8% __GI___strnlen      2   2.8%  30.6%   6   8.3% __GI___strxfrm_l      2   2.8%  33.3%   3   4.2% __dynamic_cast      2   2.8%  36.1%   2   2.8% __memset_sse2      2   2.8%  38.9%   2   2.8% operator new[pprof 的文本分析报告和 perf的很像，也是列出了函数的采样次数和百分比，但因为是源码级的采样，会看到大量的内部函数细节，虽然很详细，但很难找出重点。好在 pprof也能输出图形化的分析报告，支持有向图和火焰图，需要你提前安装 Graphviz 和FlameGraph：    apt-get install graphviz    git clone PI:EMAIL:brendangregg/FlameGraph.git然后，你就可以使用"`--svg`""`--collapsed`"等选项，生成更直观易懂的图形报告了：    pprof --svg ./a.out case1.perf > case1.svg    pprof --collapsed ./a.out case1.perf > case1.cbt    flamegraph.pl case1.cbt > flame.svg    flamegraph.pl --invert --color aqua case1.cbt > icicle.svg我就拿最方便的火焰图来"看图说话"吧。你也可以在GitHubslate-object="inline"上找到原图。![](Images/ca66a178709ee4d837c04fdc1cf0c567.png)savepage-src="https://static001.geekbang.org/resource/image/75/30/7587a411eb9c7a16f68bd3453a1eec30.png"}这张火焰图实际上是"倒置"的冰柱图，显示的是自顶向下查看函数的调用栈。由于 C++有名字空间、类、模板等特性，函数的名字都很长，看起来有点费劲，不过这样也比纯文本要直观一些，可以很容易地看出，正则表达式占用了绝大部分的CPU 时间。再仔细观察的话，就会发现，\_Compiler()这个函数是真正的"罪魁祸首"。找到了问题所在，现在我们就可以优化代码了，把创建正则对象的语句提到循环外面：    auto reg  = make_regex(R"(^(\w+)\:(\w+)$)");  // 正则表达式对象    auto what = make_match();    for(int i = 0; i `）。第二个是**开闭原则**，它也许是最"模糊"的设计原则了，通常的表述是"**对扩展开放，对修改关闭**"，但没有说具体该怎么做，跟没说一样。我觉得，你可以反过来理解这个原则，在设计类的时候问一下自己，这个类封装得是否足够好，是否可以不改变源码就能够增加新功能。如果答案是否定的（要改源码），那就说明违反了开闭原则。**应用开闭原则的关键是做好封装**，隐藏内部的具体实现细节，然后开放足够的接口，这样外部的客户代码就可以只通过接口去扩展功能，而不必侵入类的内部。你可以在一些结构型模式和行为模式里找到开闭原则的"影子"：比如桥接模式让接口保持稳定，而另一边的实现任意变化；又比如迭代器模式让集合保持稳定，改变访问集合的方式只需要变动迭代器。C++ 语言里的 final 关键字（第 5 讲slate-object="inline"）也是实践开闭原则的"利器"，把它用在类和成员函数上，就可以有效地防止子类的修改。第三个原则是**里氏替换原则**，意思是**子类必须能够完全替代父类**。这个原则还是比较好理解的，就是说子类不能改变、违反父类定义的行为。像在第5讲里说的正方形、鸟类的例子，它们就是违反了里氏替换原则。不过，因为 C++ 支持泛型编程，而且我也不建议多用继承，所以在 C++里你只要了解一下它就好。第四个是**接口隔离原则**，它和单一职责原则有点像，但侧重点是对外的接口而不是内部的功能，目标是**尽量简化、归并给外界调用的接口**，避免写出大而不当的"面条类"。大多数结构型模式都可以用来实现接口隔离，比如，使用适配器来转换接口，使用装饰模式来增加接口，使用外观来简化复杂系统的接口。第五个原则是**依赖反转原则**，个人觉得是一个比较难懂的原则，我的理解是**上层要避免依赖下层的实现细节，下层要反过来依赖上层的抽象定义**，说白了，大概就是"解耦"吧。模板方法模式可以算是比较明显的依赖反转的例子，父类定义主要的操作步骤，子类必须遵照这些步骤去实现具体的功能。如果单从"解耦"的角度来理解的话，存在上下级调用关系的设计模式都可以算成是依赖反转，比如抽象工厂、桥接、适配器。![](Images/3465f3a3c398f70391332303d1d9f5a0.png)savepage-src="https://static001.geekbang.org/resource/image/c2/ca/c257c85fc3c5aefbfcdfb8d3ecb4b9ca.jpg"}除了 SOLID 这五个之外，我觉得还有两个比较有用：DRY（Don't RepeateYourself）和 KISS（Keep It SimpleStupid）。 它们的含义都是要让代码尽量保持简单、简洁，避免重复的代码，这在 C++里可以有很多方式去实现，比如用宏代替字面值，用 lambda表达式就地定义函数，多使用容器、算法和第三方库。小结好了，今天就到这里吧，我从比较"宏观"的层面说了设计模式和设计原则。其实这些就是对我们实际开发经验的高度浓缩和总结。理解掌握了这些经验，你就会始终保持着清醒的头脑，在写C++代码的过程中有意识地去发现、应用模式，设计出好的结构，对坏的代码进行重构。小结一下这节课的要点：1.       面向对象是主流编程范式，使用设计模式可以比较容易地得到良好的面向对象设计；        2.       经典的设计模式有 23    个，分成三大类：创建型模式、结构型模式和行为模式；        3.       应该从多角度、多方面去研究设计模式，多关注代码之外的部分，学习解决问题的思路；        4.       设计原则是设计模式之上更高层面的指导思想，适用性强，但可操作性弱，需要多在实践中体会；        5.       最常用的五个设计原则是"SOLID"，此外，还有"DRY"和"KISS"。        不过，我还要特别提醒你，设计模式虽然很好，但它绝不是包治百病的"灵丹妙药"。如果不论什么项目都套上设计模式，就很容易导致过度设计，反而会增加复杂度，僵化系统。对于我们 C++ 程序员来说，更是要清楚地认识到这一点，因为在 C++里，不仅有面向对象编程，还有泛型编程和函数式编程等其他范式，所以领会它的思想，在恰当的时候改用模板/ 泛型 /lambda来替换"纯"面向对象，才是使用设计模式的最佳做法。课下作业最后是课下作业时间，给你留两个思考题：1.       你觉得使用设计模式有什么好处？        2.       你是怎么理解 SOLID    设计原则的？哪个对你最有指导意义？        欢迎你在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。![](Images/33c9e3057ea235247aba35e88e03aff1.png)savepage-src="https://static001.geekbang.org/resource/image/36/c0/363f39702c4f6788b6b56d96881650c0.png"}
# 20 \| 设计模式（下）：C++是怎么应用设计模式的？你好，我是 Chrono。上节课，我谈了设计模式和设计原则。今天，我就具体说说，在 C++里，该怎么应用单件、工厂、适配器、代理、职责链等这些经典的设计模式，用到的有call_once()、make_unique()、async() 等 C++工具，希望能够给你一些在实际编码时的启发。（在接下来学的时候，你也可以同时思考一下它们都符合哪些设计原则，把设计模式和设计原则结合起来学习。）创建型模式首先来看看创建型模式，**它隐藏了类的实例化过程和细节，让对象的创建独立于系统的其他部分**。创建型模式不多，一共有 5个，我觉得最有用的是**单件和工厂**。![](Images/016b84f1838a79281b68070e33185cd2.png)savepage-src="https://static001.geekbang.org/resource/image/9e/34/9e859a3bba338b1c4eff565d87a63834.jpg"}单件很简单，要点在于控制对象的创建数量，只能有一个实例，就像是公司的CEO 一样，有且唯一。关于它的使用方式、应用场景，存在着一些争议，但我个人觉得，它很好地体现了设计模式的基本思想，足够简单，可以作为范例，用来好好学习模式里的各个要素。关于单件模式，一个"老生常谈"的话题是"双重检查锁定"，你可能也有所了解，它可以用来避免在多线程环境里多次初始化单件，写起来特别繁琐。使用 [第 14讲  slate-object="inline"里提到的call_once，可以很轻松地解决这个问题，但如果你想要更省事的话，其实在 C++里还有一种方法（C++ 11之后），就是**直接使用函数内部的 static静态变量** 。C++语言会保证静态变量的初始化是线程安全的，绝对不会有线程冲突。比如：    auto& instance()    // 生产单件对象的函数    {      static T obj;     // 静态变量      return obj;       // 返回对象的引用    }说完了单件，再来看工厂模式吧。工厂模式是我个人的"笼统"说法，指的是抽象工厂、工厂方法这两个模式，因为它们就像是现实世界里的工厂一样，专门用来生产对象。抽象工厂是一个类，而工厂方法是一个函数，在纯面向对象范式里，两者的区别很大。而C++支持泛型编程，不需要特意派生出子类，只要接口相同就行，所以，这两个模式在C++里用起来也就更自由一些，界限比较模糊。为什么非要用工厂来创建对象呢？这样做的好处在哪里呢？我觉得，你可以用 DRY（Don't RepeateYourself）原则来理解，也就是说尽量避免重复的代码，简单地认为它就是"**对 new 的封装**"。想象一下，如果程序里到处都是"硬编码"的new，一旦设计发生变动，比如说把"new 苹果"改成"new梨子"，你就需要把代码里所有出现 new的地方都改一遍，不仅麻烦，而且很容易遗漏，甚至是出错。如果把 new用工厂封装起来，就形成了一个"中间层"，隔离了客户代码和创建对象，两边只能通过工厂交互，彼此不知情，也就实现了解耦，由之前的强联系转变成了弱联系。所以，你就可以在工厂模式里拥有对象的"生杀大权"，随意控制生产的方式、生产的时机、生产的内容。在 [第 8讲  slate-object="inline"里说到的 make_unique()、make_shared()这两个函数，就是工厂模式的具体应用，它们封装了创建的细节，看不见new，直接返回智能指针对象，而且接口更简洁，内部有更多的优化。    auto ptr1 = make_unique(42);    auto ptr2 = make_shared("metroid");还有之前课程里的用函数抛出异常（第 9 讲slate-object="inline"）、创建正则对象（第 11 讲）、创建 Lua虚拟机（ [第 17讲  slate-object="inline"），其实也都是应用了工厂模式。这些你可以结合课程的具体内容，再回顾一下，我就不多说了。使用工厂模式的关键，就是**要理解它面对的问题和解决问题的思路**，比如说创建专属的对象、创建成套的对象，重点是"如何创建对象、创建出什么样的对象"，用函数或者类会比单纯用new 更灵活。结构型模式接下来说说结构型模式，它关注的是对象的**静态联系，以灵活、可拆卸、可装配的方式组合出新的对象**。这里你要注意结构型模式的重要特点：虽然它会有多个参与者，但最后必定得到且使用的是"**一个**"对象，而不是"多个"对象。结构型模式一共有 7 个，其中，我觉得在 C++里比较有用、常用的是**适配器、外观和代理**。![](Images/bba6c89e371a41ee39b8b8982159cd85.png)savepage-src="https://static001.geekbang.org/resource/image/0c/38/0c142aa2f536c22008b6e24aa609ce38.jpg"}**1. 适配器模式**适配器模式的目的是接口转换，不需要修改源码，就能够把一个对象转换成可以在本系统中使用的形式。打个比方，就像是拿到了一个英式电源插头，无法插到国标插座上，但你不必拿工具去拆开插头改造，只要买个转换头就行。适配器模式在 C++里多出现在有第三方库或者外部接口的时候，通常这些接口不会恰好符合我们自己的系统，功能很好，但不能直接用，想改源码很难，甚至是不可能的。所以，就需要用适配器模式给"适配"一下，让外部工具能够"match"我们的系统，而两边都不需要变动，"皆大欢喜"。还记得 [第 12讲  slate-object="inline"里的容器 array 吗？它就是一个适配器，包装了 C++的原生数组，转换成了容器的形式，让"裸内存数据"也可以接入标准库的泛型体系。    array arr = {0,1,2,3,4};    auto b = begin(arr);    auto e = end(arr);    for_each(b, e, [](int x){...});**2. 外观模式**再来看外观模式，它封装了一组对象，目的是简化这组对象的通信关系，提供一个高层次的易用接口，让外部用户更容易使用，降低系统的复杂度。外观模式的特点是内部会操作很多对象，然后对外表现成一个对象。使用它的话，你就可以不用"事必躬亲"了，只要发一个指令，后面的杂事就都由它代劳了，就像是一个"大管家"。不过要注意，外观模式并不绝对控制、屏蔽内部包装的那些对象。如果你觉得外观不好用，完全可以越过它，自己"深入基层"，去实现外观没有提供的功能。第 14 讲里提到的函数 async()就是外观模式的一个例子，它封装了线程的创建、调度等细节，用起来很简单，但也不排斥你直接使用thread、mutex 等底层线程工具。    auto f = std::async([](){...});    f.wait();**3. 代理模式**它和适配器有点像，都是包装一个对象，但关键在于它们的目的、意图有差异：不是为了适配插入系统，而是要"控制"对象，不允许外部直接与内部对象通信，所以叫作"代理"。代理模式的应用非常广泛，如果你想限制、屏蔽、隐藏、增强或者优化一个类，就可以使用代理。这样，客户代码看到的只是代理对象，不知道原始对象（被代理的对象）是什么样，只能用代理对象给出的接口，这样就实现了控制的目的。代理在 C++里的一个典型应用就是智能指针（第 8 讲slate-object="inline"），它接管了原始指针，限制了某些危险操作，并且添加了自动生命周期管理，虽然少了些自由，但获得了更多的安全。行为模式看完了适配器、外观和代理这三个结构型模式，再来看行为模式，**它描述了对象之间动态的消息传递，也就是对象的"行为"、工作的方式**。行为模式比较多，有 11个，这是因为，面向对象的设计更注重运行时的组合，比静态的组合更能增加系统的灵活性和可扩展性。![](Images/628d0e46e0f44c198dfd09bd3085a719.png)savepage-src="https://static001.geekbang.org/resource/image/ba/2e/ba02d02ec2cac0adf60342fa3054312e.jpg"}因为行为模式都是在运行时才建立联系，所以通常都很复杂，不太好理解对象之间的关系和通信机制。我觉得比较难用，或者说是要尽量避免使用的模式有解释器和中介者，它们的结构比较难懂，会增加系统的复杂度。而比较容易理解、容易使用的有**职责链、命令和策略**，所以我重点说说它们。职责链和命令这两个模式经常联合起来使用。职责链把多个对象串成一个"链条"，让链条里的每个对象都有机会去处理请求。而请求通常使用的是命令模式，把相关的数据打包成一个对象，解耦请求的发送方和接收方。其实，你仔细想一下就会发现，C++的异常处理机制（第 9 讲）就是"职责链 +命令"的一个实际应用。在异常处理的过程中，异常类 exception 就是一个命令对象，throw抛出异常就是发起了一个请求处理流程。而一系列的 try-catch块就构成了处理异常的职责链，异常会自下而上地走过函数调用栈------也就是职责链，直到在链条中找到一个能够处理的catch 块。 策略模式的要点是"策略"这两个字，它封装了不同的算法，可以在运行的时候灵活地互相替换，从而在外部"非侵入"地改变系统的行为内核。策略模式有点像装饰模式和状态模式，你可不要弄混了。跟它们相比，策略模式的的特点是不会改变类的外部表现和内部状态，只是动态替换一个很小的算法功能模块。前面讲过的容器和算法用到的比较函数、散列函数，还有 for_each 算法里的lambda表达式，它们都可以算是策略模式的具体应用。另外，策略模式也非常适合应用在有 if-else/switch-case这样"分支决策"的代码里，你可以把每个分支逻辑都封装成类或者 lambda表达式，再把它们存进容器，让容器来帮你查找最合适的处理策略。小结好了，今天说了几个我个人认为比较重要的模式，还列出了 C++里的具体例子，两者互相参照，你就能更好地理解设计模式和 C++语言。接下来你可以去借鉴这些用法，尝试看看自己以前写的程序，是不是能应用工厂、适配器、代理、策略等模式去重构，让代码更加优雅、灵活。再小结一下今天的内容：1.       创建型模式里常用的有单件和工厂，封装了对象的创建过程，隔离了对象的生产和使用；        2.       结构型模式里常用的有适配器、外观和代理，通过对象组合，得到一个新对象，目的是适配、简化或者控制，隔离了客户代码与原对象的接口；        3.       行为模式里常用的有职责链、命令和策略，只有在运行时才会建立联系，封装、隔离了程序里动态变化的那部分。        按照这些模式的使用的难易程度，我又画了一个表格，你可以对比着看一下。![](Images/4832439d1b587231e4927bb95a087603.png)savepage-src="https://static001.geekbang.org/resource/image/d5/b8/d54086bbbd999eeb3cddc0456b55c8b8.jpg"}今天虽然说了不少，但除了这些经典的设计模式，还有很多其他的设计模式，比如对象池、空对象、反应器、前摄器、包装外观，等等。虽然它们也流传比较广，但还不那么"权威"，用得也不是很多，你不需要重点掌握，所以我就不多讲了，课下你可以再去找些资料学习。课下作业最后是课下作业时间，给你留两个思考题：1.       你觉得创建型模式有什么好处？        2.       你能说一下适配器、外观和代理这三个模式的相同点和不同点吗？        欢迎在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。![](Images/aaefdaba7fcc939ba771507d406ced94.png)savepage-src="https://static001.geekbang.org/resource/image/41/af/410920dee8bceaadd16e86de520e98af.jpg"}