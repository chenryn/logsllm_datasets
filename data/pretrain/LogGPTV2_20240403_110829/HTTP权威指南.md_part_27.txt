### 6.5.7 没有代理时URI的解析

当浏览器没有通过代理进行请求时，它对URI的解析过程会有所不同。首先，浏览器会尝试获取用户输入的URI，并寻找相应的IP地址。如果找到了主机名，浏览器会尝试连接对应的IP地址，直到成功为止。

#### 主机名查找失败时的处理
如果找不到主机，许多浏览器会提供某种形式的主机名自动“扩展”机制，以应对用户可能输入的是主机名的简写形式（参见2.3.2节）。
- **常见的扩展方式**：很多浏览器会尝试在输入的主机名前加上`www.`后缀，并在后面加上`.com`。例如，用户输入`yahoo`，浏览器会尝试将其转换为`www.yahoo.com`。
- **第三方校正服务**：有些浏览器甚至会将未解析的URI传递给第三方站点，这些站点会尝试纠正拼写错误，并给出一些用户可能希望访问的URI建议。
- **DNS配置**：大多数系统中的DNS配置允许用户只输入主机名的前缀，然后DNS会自动搜索域名。例如，如果用户位于`oreilly.com`的范围内，并输入了`host7`，DNS会自动尝试将其与`host7.oreilly.com`进行匹配。

#### 示例流程
图6-16展示了在没有代理的情况下，浏览器如何进行主机名自动扩展的例子。

1. **用户输入**：用户在浏览器的URI地址栏中输入`oreilly`。
2. **初始DNS查询**：
   - 浏览器通过DNS搜索主机`oreilly`。
   - 查询失败，未知主机名。
3. **自动扩展**：
   - 浏览器将`oreilly`转换为`www.oreilly.com`。
   - 浏览器通过DNS搜索主机`www.oreilly.com`。
   - 查询成功，取回IP地址。
4. **建立连接**：
   - 浏览器尝试连接到获取的IP地址，直到成功建立连接。
5. **发送和接收HTTP请求**：
   - 浏览器发送HTTP请求。
   - 浏览器获取HTTP响应。

### 6.5.8 有显式代理时URI的解析

当使用显式代理时，用户的URI会被直接发送给代理，因此浏览器不再执行上述的便捷扩展功能。

#### 示例流程
图6-17展示了有显式代理时，浏览器如何处理不完整的主机名。

1. **用户输入**：用户在浏览器的URI地址栏中输入`oreilly`。
2. **DNS查询**：
   - 浏览器用DNS搜索代理服务器的地址。
   - 获取代理服务器的IP地址。
3. **连接代理**：
   - 浏览器尝试连接代理。
   - 连接成功。
4. **发送HTTP请求**：
   - 浏览器发送HTTP请求给代理，请求中包含不完整的主机名`oreilly`。
   - 客户端没有进行自动扩展，因此代理收到的是不完整主机名。

### 6.5.9 有拦截代理时URI的解析

使用不可见的拦截代理时，对主机名的解析行为类似于无代理的情况，但连接建立过程中有一个重要区别。

#### 示例流程
图6-18展示了使用拦截代理时的解析过程。

1. **用户输入**：用户在浏览器的URI地址栏中输入`oreilly`。
2. **初始DNS查询**：
   - 浏览器通过DNS查找主机`oreilly`。
   - 查询失败，未知主机名。
3. **自动扩展**：
   - 浏览器将`oreilly`转换为`www.oreilly.com`。
   - 浏览器通过DNS查找主机`www.oreilly.com`。
   - 查询成功，取回IP地址。
4. **连接建立**：
   - 客户端尝试连接每个IP地址，直到成功。
   - 对拦截代理来说，第一次连接请求会被代理服务器拦截，不会连接到原始服务器。
5. **代理与服务器交互**：
   - 代理最终准备好与真正的原始服务器进行交互。
   - 如果发现IP地址指向已停用的服务器，代理可以通过解析Host首部或反向DNS查找来尝试其他IP地址。

### 6.6 追踪报文

在网络中追踪经过多个代理的报文流对于检测问题非常重要，类似于追踪IP分组流。

#### Via首部字段

Via首部字段用于记录报文途经的每个中间节点的信息。每个节点都会在Via列表末尾添加自己的信息。

##### 示例
```
Via: 1.1 proxy-62.irenes-isp.net, 1.0 cache.joes-hardware.com
```

##### 功能
- **记录转发路径**：记录报文经过的每个中间节点。
- **诊断循环**：检测网络中的路由循环。
- **协议能力**：标识请求/响应链上所有发送者的协议能力。

##### 语法
```
Via = "Via" ":" 1#( waypoint )
waypoint = ( received-protocol received-by [ comment ] )
received-protocol = [ protocol-name "/" ] protocol-version
received-by = ( host [ ":" port ] ) | pseudonym
```

##### 组件
- **协议名**：可选，默认为HTTP。
- **协议版本**：必选，如1.0、1.1等。
- **节点名**：必选，中间节点的主机和可选端口号。
- **节点注释**：可选，进一步描述中间节点的信息。

##### 请求和响应路径
请求和响应报文中都应包含Via首部，响应的Via首部通常与请求的Via首部相反。

##### 与网关
某些代理作为非HTTP协议的网关，Via首部记录这些协议转换，帮助HTTP应用程序了解代理链上的协议处理能力及所做的协议转换。

希望这些优化后的文本能够更加清晰、连贯和专业。如果有任何进一步的需求，请随时告知。