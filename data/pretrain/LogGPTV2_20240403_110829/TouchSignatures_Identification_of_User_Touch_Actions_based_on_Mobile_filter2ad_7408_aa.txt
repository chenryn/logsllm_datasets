title:TouchSignatures: Identification of User Touch Actions based on Mobile
Sensors via JavaScript
author:Maryam Mehrnezhad and
Ehsan Toreini and
Siamak Fayyaz Shahandashti and
Feng Hao
TouchSignatures: Identiﬁcation of User Touch Actions
and PINs Based on Mobile Sensor Data via JavaScript1
Maryam Mehrnezhad, Ehsan Toreini, Siamak F. Shahandashti, Feng Hao
School of Computing Science, Newcastle University, UK
{m.mehrnezhad, ehsan.toreini, siamak.shahandashti, feng.hao}@ncl.ac.uk
Abstract
Conforming to W3C speciﬁcations, mobile web browsers allow JavaScript
code in a web page to access motion and orientation sensor data without
the user’s permission. The associated risks to user security and privacy are
however not considered in W3C speciﬁcations.
In this work, for the ﬁrst
time, we show how user security can be compromised using these sensor data
via browser, despite that the data rate is 3 to 5 times slower than what is
available in app. We examine multiple popular browsers on Android and
iOS platforms and study their policies in granting permissions to JavaScript
code with respect to access to motion and orientation sensor data. Based on
our observations, we identify multiple vulnerabilities, and propose TouchSig-
natures which implements an attack where malicious JavaScript code on
an attack tab listens to such sensor data measurements. Based on these
streams, TouchSignatures is able to distinguish the user’s touch actions (i.e.,
tap, scroll, hold, and zoom) and her PINs, allowing a remote website to learn
the client-side user activities. We demonstrate the practicality of this attack
by collecting data from real users and reporting high success rates using our
proof-of-concept implementations. We also present a set of potential solu-
tions to address the vulnerabilities. The W3C community and major mobile
browser vendors including Mozilla, Google, Apple and Opera have acknowl-
edge our work and are implementing some of our proposed countermeasures.
Keywords: Mobile sensors, JavaScript attack, Mobile browsers, User
security, User privacy, Machine learning, Touch actions, PINs
1A preliminary version of the paper was presented at ASIACCS 2015 as a poster [14].
Preprint submitted to Journal of Information Security and ApplicationsThursday 3rd December, 2015
Identiﬁcation item
Sensor
Work
Camera, Mic PINs
PIN Skimmer [22]
PINs
PIN Skimming [23]
Light
Keylogging by Mic [18] Mic
Keyboard, PINs
Keyboard, Area taps
Acc
ACCessory [19]
Keyboard, Icon taps
Acc, Gyr
Tapprints [16]
PINs, Patterns
Acc side channel [5]
Acc
Motion side channel [9] Acc, Gyr
Keyboard, PINs
PINs
Acc, Ori
TapLogger [25]
PINs
Ori
TouchLogger [8]
TouchSignatures
Motion, Ori
Touch actions, PINs
Access
in-app
in-app
in-app
in-app
in-app
in-app
in-app
in-app
in-app
in-browser
Table 1: Brief description of TouchSignatures and in-app sensor-based Password/ PIN
identiﬁers. Acc = accelerometer, Gyr = gyroscope, and Ori = Orientation. Motion streams
are a set of measurements which are accessible within browsers and include accelerometer,
accelerometer-including-gravity, and rotation rate (see Section 3.2).
1. Introduction
1.1. Access to mobile sensors within app
Sensor-rich mobile devices are becoming ubiquitous. Smart phones and
tablets are increasingly equipped with a multitude of sensors such as GPS,
gyroscope, compass, and accelerometer. Data provided by such sensors, com-
bined with the growing computation capabilities of modern mobile devices
enable richer, more personalised, and more usable apps on such devices. On
the other hand, access to the sensor streams provides an app running in the
background a side channel. Listening to mobile sensor data via a background
process either for improving user security [13, 11, 6, 20, 12, 21, 7, 24] or at-
tacking it [8, 25, 16, 19, 16, 15] has been always interesting for researchers.
Listening to the sensor data through a malicious background process may
enable the app to compromise the user security. Here, we present Table 1 and
brieﬂy describe the existing in-app sensor-based password/PIN identiﬁers.
Some of the existing works in Table 1 try to identify PINs and Passwords
by using sensors such as light, camera and microphone [23, 22, 18]. In this
paper, we are interested in the use of accelerometer and gyroscope sensors as
a side channel to learn about users PINs and Passwords [16, 19, 5, 8, 25].
2
1.2. Access to mobile sensors within browser
All these attacks suggest to obtain sensor data through a background
process activated by a mobile app, which requires installation and user per-
mission. By contrast, TouchSignatures suggests to record the sensor mea-
surements via JavaScript code without any user permission. This is the ﬁrst
report of such a JavaScript-based attack. This attack is potentially more
dangerous than previous app-based attacks as it does not need any user per-
mission for installation to run the attack code.
Mobile web applications are increasingly provided access to more mo-
bile resources, particularly sensor data. Client-side scripting languages such
as JavaScript are progressively providing richer APIs to access mobile sen-
sor data. Currently, mobile web applications have access to the following
sensor data: geolocation [1], multimedia (video cameras, microphones, web-
cams) [4], light [2], and device motion and orientation [3].
W3C speciﬁcations discuss security and privacy issues for some mobile
sensors such as GPS and light. For example, the working draft on am-
bient light events explicitly discuss security and privacy considerations as
follows [2]: “The event deﬁned in this speciﬁcation is only ﬁred in the top-
level browsing context to avoid the privacy risk of sharing the information
deﬁned in this speciﬁcation with contexts unfamiliar to the user. For exam-
ple, a mobile device will only ﬁre the event on the active tab, and not on
the background tabs or within iframes”. The geolocation API on the other
hand, requires explicit user permission to grant access to the web app due to
security and privacy considerations.
On the other hand, security and privacy issues regarding motion and ori-
entation sensor data have not been as readily evident to the W3C community
and browser vendors as those of the sensors discussed above. Interestingly,
in contrast to geolocation and ambient light sensors, there is no security and
privacy considerations section in the W3C working draft on motion and ori-
entation sensors [3]. JavaScript code in a web page is given full access to
motion and orientation sensor streams on mobile devices without needing to
ask for user permission. This opens the door for attackers to compromise
user security by listening to the motion and orientation sensor data as we
present in this paper.
1.3. Access to mobile sensors within app vs. browser
The in-browser sensor data access that the W3C speciﬁcation allows is
heavily restricted in multiple ways. First, the access is restricted to only
3
Device/mOS
Nexus 5/Android 5.0.1
iPhone 5/iOS 8.2
Accelerometer Gyroscope
Freq. (Hz)
Freq. (Hz)
200
100
200
100
Table 2: Maximum in-app sampling frequencies on diﬀerent mobile OSs
two types of streams: the device orientation which supplies the physical
orientation of the device, and the device motion which represents the accel-
eration of the device. Motion data includes sequences from accelerometer,
accelerometer-including-gravity, and rotation rate [3]. The orientation sen-
sor, on the other hand, derives its data by processing the raw sensor data
from the accelerometer and the geomagnetic ﬁeld sensor2.
More importantly, access is also restricted to low-rate streams which pro-
vide data with slower frequencies as compared to those provided in-app.
Here, we present two tables (Tables 2 and 3) on sampling frequencies on
diﬀerent platforms and popular browsers. The in-app frequency rates in
Table 2 for Android are obtained from running an open source program
(MPLSensor.cpp ﬁle) available on Android Git repository3. And the in-app
frequency rates for iOS are from system.setAccelerometerInterval() and sys-
tem.setGyroscopeInterval() functions available on Coronalabs4. For obtain-
ing the in-browser accelerometer and gyroscope sampling rates presented in
Table 3, we implemented our own JavaScript code (see Appendix B). We
observed the amount of data recordable during a second in diﬀerent mobile
operating systems (mobile OS) and browsers.
As it can bee seen in Table 2, iOS and Android limit the mentioned
sensors’ maximum sampling rates to 100 Hz and 200 Hz, respectively. How-
ever, the hardware is capable to sample the sensor signals at much higher
frequencies (up to thousands of Hz) [15]. This reduction is to save power
consumption. Moreover according to the results of our tests in Table 3, we
found out that all currently available versions on diﬀerent mobile browsers
reduce the sampling rate even further - 3 to 5 times lower, regardless of the
2http://developer.android.com/guide/topics/sensors/sensors position.html
3https://android.googlesource.com/platform/hardware/invensense/+/
#sensors-pos-orient
android-5.0.1 r4
4https://docs.coronalabs.com/api/library/system
4
Device OS
Browser
1 Chrome
Motion
Orientation
Freq. (Hz) Freq. (Hz)
5
s
u
x
e
N
5
e
n
o
h
P
i
.
0
.
5
d
i
o
r
d
n
A
2
.
8
S
O
i
Opera
Firefox
Dolphin
UC Browser
Safari
Chrome
Dolphin
UC Browser
60
60
50
NA
NA
20
20
20
20
44
52
50
151
15
20
20
20
20
Table 3: Maximum in-browser sampling frequencies on diﬀerent mobile OSs and browsers
engine (Webkit, Blink, Gecko, etc.) that they use. Our observations on the
sampling rates of diﬀerent mobile browsers are mostly consistent with the
results reported in [15].
The tight restrictions for in-browser access on sensor-related data streams
seem to be put in place as a measure to strike a balance between providing
too little data to be useful on one hand and too much data which can poten-
tially compromise user security on the other hand. Indeed, the low-rate and
processed device orientation and motion data streams provided in-browser
give the impression of being the minimum needed to make applications such
as game control possible in-browser, and might project a sense of security in
using such in-browser access to sensor-related data in practice. However, in
this work, for the ﬁrst time, we show how user security can be compromised
using device motion and orientation data provided in-browser as a side chan-
nel. We demonstrate how an inactive or even a minimised web page, using
JavaScript, is able to listen to and silently report the device motion and ori-
entation data about a user who is working on a separate tab or a separate
app on the device. Moreover, we show that the reported data, although re-
stricted in multiple ways as discussed before, is suﬃcient to recognise the
user’s touch actions such as tapping, holding, scrolling (up, down, left, and
right), and zooming (in and out), and eventually the user’s PINs on the
separate tab/app.
Note that neither Android nor iOS explicitly requires user permission
to access such sensor data at the time when the browser is installed. Fur-
thermore, none of the browsers seek user permission or even notify the user
5
when such sensor data is provided to a JavaScript-enabled web page. Conse-
quently, the user is completely oblivious to such an attack that compromises
her security. At the same time, users increasingly use web browsers on their
mobile devices to access services such as online banking and healthcare ser-
vices which involve personal and highly sensitive information. These facts
demonstrate the potential damage that may be caused by attacks such as ours
and stress the urgent need for major mobile operating systems and browser
developers and also W3C standards to address this problem.
1.4. Contributions
In this work, we initiate the ﬁrst study on the possibility of attacks com-
promising user security via web content, and demonstrate weaknesses in W3C
standards, and also mobile OS and browser policies which leave the door open
for such exploits. In particular, the main contributions of this work are as
follows:
• We examine multiple popular browsers on both Android and iOS plat-
forms and study 1) their sampling frequencies, and 2) their policies
in granting permissions to JavaScript code with respect to access to
orientation and motion sensor data. Based on these examinations, we
identify multiple vulnerabilities which could be potentially exploited in
diﬀerent attack scenarios.
• Based on our ﬁndings, we propose TouchSignatures which includes at-
tacks that compromise user security through malicious JavaScript code
by listening to orientation and motion sensor data streams. Our attack
is designed in two phases: 1) identifying user’s touch actions (e.g. tap,
scroll, hold, and zoom), and 2) identifying user’s PINs. We demonstrate
the practicality of the above two-phase attack by collecting data from
real users and reporting high success rates using our proof-of-concept
implementations.
2. Examining mobile browsers
In this Section, we report our ﬁndings on diﬀerent mobile OSs and mo-
bile browsers policies with respect to providing access to device motion and
orientation sensor data to active web content. We developed JavaScript code
(see Appendix B) that listens to and records the above sensor data streams
6
Locked
1
.
0
.
5
d
i
o
r
d
n
A
/
5
s
u
x
e
N
2
.
8
S
O
i
/
5
e
n
o
h
P
i
Device/mOS/Browser
same
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
Active
iframe
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes