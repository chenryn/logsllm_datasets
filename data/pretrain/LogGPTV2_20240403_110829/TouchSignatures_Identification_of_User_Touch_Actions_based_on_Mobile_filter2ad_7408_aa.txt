# Title: TouchSignatures: Identification of User Touch Actions and PINs Based on Mobile Sensor Data via JavaScript

## Authors:
- Maryam Mehrnezhad
- Ehsan Toreini
- Siamak Fayyaz Shahandashti
- Feng Hao

## Abstract
In accordance with W3C specifications, mobile web browsers allow JavaScript code in a web page to access motion and orientation sensor data without the user's explicit permission. However, these specifications do not consider the associated risks to user security and privacy. In this work, we demonstrate for the first time how user security can be compromised using these sensor data, even though the data rate is 3 to 5 times slower than what is available in mobile apps. We examine multiple popular browsers on Android and iOS platforms and study their policies regarding permissions for JavaScript code to access motion and orientation sensor data. Based on our observations, we identify several vulnerabilities and propose TouchSignatures, an attack where malicious JavaScript code listens to sensor data measurements. TouchSignatures can distinguish the user's touch actions (e.g., tap, scroll, hold, and zoom) and their PINs, allowing a remote website to learn about client-side user activities. We demonstrate the practicality of this attack by collecting data from real users and reporting high success rates using our proof-of-concept implementations. We also present potential solutions to address these vulnerabilities. The W3C community and major mobile browser vendors, including Mozilla, Google, Apple, and Opera, have acknowledged our work and are implementing some of our proposed countermeasures.

**Keywords:** Mobile sensors, JavaScript attack, Mobile browsers, User security, User privacy, Machine learning, Touch actions, PINs

**Note:** A preliminary version of this paper was presented at ASIACCS 2015 as a poster [14]. Preprint submitted to the Journal of Information Security and Applications on Thursday, December 3, 2015.

## 1. Introduction

### 1.1. Access to Mobile Sensors within Apps
Sensor-rich mobile devices, such as smartphones and tablets, are becoming increasingly common. These devices are equipped with a variety of sensors, including GPS, gyroscope, compass, and accelerometer. The data provided by these sensors, combined with the growing computational capabilities of modern mobile devices, enable richer, more personalized, and more usable apps. However, access to sensor streams also provides a side channel for background processes, which can either enhance user security or be used to compromise it. Table 1 briefly describes existing in-app sensor-based password/PIN identifiers. Some of these works use sensors like light, camera, and microphone to identify PINs and passwords. In this paper, we focus on the use of accelerometer and gyroscope sensors as a side channel to learn about users' PINs and passwords.

### 1.2. Access to Mobile Sensors within Browsers
Previous attacks typically require obtaining sensor data through a background process activated by a mobile app, which necessitates installation and user permission. In contrast, TouchSignatures records sensor measurements via JavaScript code without any user permission, making it a potentially more dangerous attack. Mobile web applications are increasingly gaining access to more mobile resources, particularly sensor data. Client-side scripting languages like JavaScript provide rich APIs to access mobile sensor data, including geolocation, multimedia (video cameras, microphones, webcams), light, and device motion and orientation.

W3C specifications address security and privacy issues for some mobile sensors, such as GPS and light. For example, the working draft on ambient light events explicitly discusses security and privacy considerations, limiting the event to the top-level browsing context to avoid sharing information with unfamiliar contexts. The geolocation API, on the other hand, requires explicit user permission due to security and privacy concerns. However, security and privacy issues related to motion and orientation sensor data have not been as evident to the W3C community and browser vendors. There is no security and privacy considerations section in the W3C working draft on motion and orientation sensors, and JavaScript code in a web page has full access to these sensor streams without needing user permission. This opens the door for attackers to compromise user security by listening to motion and orientation sensor data.

### 1.3. Comparison of Access to Mobile Sensors within Apps vs. Browsers
The in-browser sensor data access allowed by W3C specifications is heavily restricted. First, access is limited to two types of streams: device orientation, which supplies the physical orientation of the device, and device motion, which represents the acceleration of the device. Motion data includes sequences from the accelerometer, accelerometer-including-gravity, and rotation rate. The orientation sensor derives its data by processing raw sensor data from the accelerometer and geomagnetic field sensor.

Access is also restricted to low-rate streams, providing data at slower frequencies compared to in-app access. Tables 2 and 3 show sampling frequencies on different platforms and popular browsers. The in-app frequency rates for Android and iOS are obtained from running open-source programs and system functions. For in-browser sampling rates, we implemented our own JavaScript code. Our tests revealed that all currently available versions of mobile browsers further reduce the sampling rate, typically 3 to 5 times lower than in-app rates, regardless of the browser engine used.

These restrictions seem to strike a balance between providing useful data and ensuring user security. However, in this work, we show for the first time how user security can be compromised using device motion and orientation data provided in-browser as a side channel. We demonstrate how an inactive or minimized web page can listen to and silently report device motion and orientation data about a user working on a separate tab or app. The reported data, although restricted, is sufficient to recognize the user's touch actions (e.g., tapping, holding, scrolling, and zooming) and eventually their PINs on the separate tab/app.

Neither Android nor iOS explicitly requires user permission to access such sensor data when the browser is installed, and none of the browsers seek user permission or notify the user when such data is provided to a JavaScript-enabled web page. Consequently, the user is completely unaware of such an attack, which can compromise their security. Given that users increasingly use web browsers on their mobile devices to access sensitive services like online banking and healthcare, the potential damage from such attacks is significant, underscoring the urgent need for major mobile operating systems, browser developers, and W3C standards to address this problem.

### 1.4. Contributions
In this work, we initiate the first study on the possibility of compromising user security via web content and demonstrate weaknesses in W3C standards, mobile OS, and browser policies. Our main contributions are:

- **Examination of Browsers:** We examine multiple popular browsers on both Android and iOS platforms, studying their sampling frequencies and policies regarding permissions for JavaScript code to access orientation and motion sensor data. Based on these examinations, we identify multiple vulnerabilities that could be exploited in different attack scenarios.
- **TouchSignatures Attack:** Based on our findings, we propose TouchSignatures, an attack that compromises user security through malicious JavaScript code by listening to orientation and motion sensor data streams. Our attack is designed in two phases: 1) identifying the user's touch actions (e.g., tap, scroll, hold, and zoom), and 2) identifying the user's PINs. We demonstrate the practicality of this two-phase attack by collecting data from real users and reporting high success rates using our proof-of-concept implementations.

## 2. Examining Mobile Browsers
In this section, we report our findings on different mobile OSs and mobile browser policies regarding access to device motion and orientation sensor data for active web content. We developed JavaScript code (see Appendix B) that listens to and records the above sensor data streams. 

| Device/OS/Browser | Locked | Active | iframe |
|-------------------|--------|--------|--------|
| Nexus 5/Android 5.0.1 | Yes | Yes | Yes |
| iPhone 5/iOS 8.2 | Yes | Yes | Yes |

Table 3: Maximum in-browser sampling frequencies on different mobile OSs and browsers

| Device/OS | Browser | Motion (Hz) | Orientation (Hz) |
|-----------|---------|-------------|------------------|
| Nexus 5/Android 5.0.1 | Chrome | 60 | 60 |
| Nexus 5/Android 5.0.1 | Opera | 50 | 50 |
| Nexus 5/Android 5.0.1 | Firefox | 50 | 50 |
| Nexus 5/Android 5.0.1 | Dolphin | 20 | 20 |
| Nexus 5/Android 5.0.1 | UC Browser | 20 | 20 |
| iPhone 5/iOS 8.2 | Safari | 44 | 52 |
| iPhone 5/iOS 8.2 | Chrome | 20 | 20 |
| iPhone 5/iOS 8.2 | Dolphin | 20 | 20 |
| iPhone 5/iOS 8.2 | UC Browser | 20 | 20 |

Table 2: Maximum in-app sampling frequencies on different mobile OSs