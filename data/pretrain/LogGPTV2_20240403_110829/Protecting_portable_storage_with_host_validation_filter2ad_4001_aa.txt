# Protecting Portable Storage with Host Validation

**Authors:**
- Kevin R. B. Butler, Department of Computer and Information Science, University of Oregon, Eugene, OR
- Stephen E. McLaughlin, Systems and Internet Infrastructure Security Laboratory (SIIS), Pennsylvania State University, University Park, PA
- Patrick D. McDaniel, Systems and Internet Infrastructure Security Laboratory (SIIS), Pennsylvania State University, University Park, PA

**Contact:**
- Kevin Butler: PI:EMAIL
- Stephen McLaughlin & Patrick McDaniel: {smclaugh, mcdaniel}@cse.psu.edu

## Abstract
Portable storage devices, such as key-chain USB drives, are ubiquitous and used in various settings, including open computer labs, internet cafes, and home and office computers. This widespread use makes them a prime target for malware that can exploit the data stored on these devices or use them to propagate malicious software. We introduce Kells, a mobile storage system that limits access to sensitive data by continuously validating the integrity state of the host system. We explore the design and operation of Kells and implement a proof-of-concept USB 2.0 storage device on experimental hardware. Our experiments show minimal overhead associated with host validation, with a worst-case throughput overhead of 1.22% for reads and 2.78% for writes.

**Categories and Subject Descriptors:**
- D.4.6 [Operating Systems]: Security and Protection

**General Terms:**
- Security

**Keywords:**
- Storage, security, validation

## 1. Introduction
Recent advancements in materials and memory systems have transformed the storage landscape. Small form factor portable storage devices, capable of holding up to 256 GB, are now commonplace. These devices allow users to carry vast amounts of data, including personal emails, documents, and media, wherever they go. However, this convenience comes with significant security risks. When users plug their storage devices into untrusted hosts, they risk data loss or corruption. Compromised hosts can freely access and modify the contents of the connected storage, posing a real threat to data integrity.

Malware like Conficker has exploited mobile storage to spread malicious code, leading to bans on their use in military networks by the US Department of Defense. The fundamental security challenge is that users cannot easily determine the security of the computer they are using to access their data. Therefore, all information on the storage device is potentially at risk if the system is compromised. The question is: How can we verify that the computer we are attaching our portable storage to is safe to use?

### Recent Solutions and Their Limitations
- **Full-Disk Encryption and BitLocker to Go**: These solutions require a user-supplied secret to access stored data, addressing the problem of device loss or theft but not protecting against untrustworthy hosts.
- **BitLocker (for fixed disks)**: Uses a Trusted Platform Module (TPM) to seal a disk partition to the host's integrity state, ensuring data safety from compromised hosts. However, this is not viable for mobile storage as data is bound to a single physical host and does not assess host integrity after mounting.
- **Trusted Computing Group (TCG) Opal Protocol**: Considers methods of authenticating storage to the host through pre-boot authentication and range encryption, which can complement our solution for protecting mobile storage.

### Kells: An Intelligent USB Storage Device
Kells is an intelligent USB storage device that validates the host's integrity before allowing read/write access to its contents. It performs a series of attestations with trusted hardware on the host when initially plugged in and periodically thereafter to ensure the host's integrity remains stable. If the host is deemed trustworthy, a trusted storage partition is exposed to the user; otherwise, depending on a configurable policy, either a "public" partition with untrusted files is mounted, or no partition is mounted at all. If the host's integrity state becomes undesirable, the protected partition becomes inaccessible. Kells ensures the integrity of data on the trusted partition by allowing data to be written only from high-integrity, uncompromised systems. Our design uses the Trusted Platform Module (TPM) found in most modern computers as the source of trusted hardware.

## 2. System Design

### 2.1 USB Interface
Kells is designed to use USB, the most common external computer interface. We built Kells by modifying the USB mass storage device stack. Operating systems like Linux support a wide variety of USB devices. To handle non-standard devices, Linux includes a repository and sets flags to modify host behavior. A host that recognizes a Kells device will set these flags and send special command transfer operations. If these commands are not received, the host can access the public partition as a standard mass storage device, unaware of the trusted protocols and storage.

### 2.2 Storage Device Architecture
Kells requires the ability to make policy decisions independently of the host. Therefore, it includes logic to execute on the device and a way to receive command transfers from the host to make access decisions. The basic architecture extends the Linux USB gadget stack, with a user-space daemon responsible for policy decisions and accessing important information. In the kernel, we added functionality for Kells to receive control transfers from the host, which are exported to user space via the sysfs interface. When plugged in, the daemon sets a timer and waits for the host to present proper credentials. If the host does not provide the required authenticating information within a defined time, the device defaults to exposing only the public partition. If the protocol fails, the failure is logged in the device's audit log, which is not exposed to the host. If the protocol is successful, the trusted partition is mounted.

The Kells device includes a policy store with information about known hosts, a measurement database for comparing attestations, and policy details such as whether the host is authenticated as an administrative console and whether a public partition should be exposed if the attestation check fails. Optionally, the device can store user credentials, such as biometric data, to configure policies for specific machines.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.