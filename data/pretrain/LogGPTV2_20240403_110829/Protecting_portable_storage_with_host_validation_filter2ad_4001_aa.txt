title:Protecting portable storage with host validation
author:Kevin R. B. Butler and
Stephen E. McLaughlin and
Patrick D. McDaniel
Protecting Portable Storage with Host Validation
Kevin Butler
Department of Computer and
Information Science
University of Oregon, Eugene, OR
PI:EMAIL
Stephen McLaughlin & Patrick McDaniel
Systems and Internet Infrastructure Security
{smclaugh,mcdaniel}@cse.psu.edu
Laboratory (SIIS)
Pennsylvania State University,
University Park, PA
ABSTRACT
Portable storage devices, such as key-chain USB devices, are ubiq-
uitous and used everywhere; users repeatedly use the same storage
device in open computer laboratories, Internet cafes, and on ofﬁce
and home computers. Consequently, they are the target of malware
that exploit the data present or use them as a means to propagate
malicious software.We present the Kells mobile storage system,
which limits untrusted or unknown systems from accessing sen-
sitive data by continuously validating the accessing host’s integrity
state. We explore the design and operation of Kells, and implement
a proof-of-concept USB 2.0 storage device on experimental hard-
ware. Our experiments indicate nominal overheads associated with
host validation, with a worst-case throughput overhead of 1.22%
for reads and 2.78% for writes.
Categories and Subject Descriptors: D.4.6 [Operating Systems]:
Security and Protection
General Terms: Security
Keywords: storage, security, validation
1.
INTRODUCTION
Recent advances in materials and memory systems have irre-
versibly changed the storage landscape. Small form factor portable
storage devices housing previously unimaginable capacities are now
commonplace today–supporting sizes up to 256 GB1. Such devices
change how we store our data; single keychain devices can simul-
taneously hold decades of personal email, millions of documents,
and thousands of songs. These devices are convenient, allowing us
to carry artifacts of our digital lives wherever we go.
The casual use of mobile storage has a darker implication. Users
plugging their storage devices into untrusted hosts are subject to
data loss or corruption. Compromised hosts have unfettered access
to the storage plugged into their interfaces, and therefore have free
rein to extract or modify its contents. Users face this risk when ac-
cessing a friend’s computer, using a hotel’s business ofﬁce, in uni-
versity computer laboratories, or in Internet cafes. The risks here
are real. Much like the ﬂoppy disk-borne viruses in the 1980’s and
90’s, malware like Conﬁcker [7] exploit mobile storage to propa-
gate malicious code. The compromise of hosts throughout military
networks, due to malware propagated by rogue portable storage de-
vices, has already led to a ban of their use by the US Department
of Defense [11]. The underlying security problem is age-old: users
1http://www.kingston.com/ukroot/flash/dt300.asp
cannot ascertain how secure the computer they are using to access
their data is. Thus, all of their information is potentially at risk if
the system is compromised. The challenge is this: How can we
verify that the computer we are attaching our portable storage to is
safe to use?
Storage security has recently become an active area of investi-
gation. Solutions such as full-disk encryption [9] and Microsoft’s
BitLocker to Go [5] require that the user supply a secret to access
stored data. This addresses the problem of device loss or theft, but
does not aid the user when the host to which it is to be attached is
itself untrustworthy. Conversely, BitLocker (for ﬁxed disks) uses a
trusted platform module (TPM) [13] to seal a disk partition to the
integrity state of the host, thereby ensuring that the data is safe-
guarded from compromised hosts. This is not viable for mobile
storage, as data is bound to the single physical host. Additionally,
BitLocker does not assess the integrity of the host at any time af-
ter the data is mounted. In another effort, the Trusted Computing
Group (TCG) has considered methods of authenticating storage to
the host through the Opal protocol [14] such as pre-boot authenti-
cation and range encryption and locking for access control. These
services may act in a complementary manner to our solution for
protecting mobile storage from potentially compromised hosts.
This abstract introduces Kells2, an intelligent USB storage de-
vice that validates host integrity prior to allowing read/write access
to its contents, and thereafter only if the host can provide ongoing
evidence of its integrity state. When initially plugged into an un-
trusted device, Kells performs a series of attestations with trusted
hardware on the host. These exchanges are repeated periodically to
ensure the integrity state of the system remains stable. Kells uses
integrity measurement to ascertain the state of the system and the
software running on it at boot time in order to determine whether
it presents a safe platform for exposing data.
If the platform is
deemed to be trustworthy then a trusted storage partition will be
exposed to the user; otherwise, depending on a conﬁgurable policy,
the device will either mount only a “public” partition with untrusted
ﬁles exposed or will not mount at all.
If at any time the device
cannot determine the host’s integrity state or the state becomes un-
desirable, the protected partition becomes inaccessible. Kells can
thus ensure the integrity of data on a trusted storage partition by
ensuring that data can only be written to it from high-integrity, un-
compromised systems. Our design uses the commodity Trusted
Platform Module (TPM) found in the majority of modern comput-
ers as our source for trusted hardware, and our implementation and
analysis use it as a component. We note, however, that it is not in-
Copyright is held by the author/owner(s).
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
ACM 978-1-4503-0244-9/10/10.
2Named for the Book of Kells, which is traceable to having resided
at the Abbey of Kells, Ireland, in the 12th century thanks to infor-
mation on land charters written into it.
651Figure 1: Overview of the Kells system operation. Attestations of system state are required to be received successfully by the device
in order for the integrity of the host to be proved, a necessary precondition for allowing data to be available to the host.
2.1 USB Interface
We designed Kells to use USB, as it is the most common ex-
ternal computer interface. We built Kells by modifying the USB
mass storage device stack. Within operating systems that support
USB, such as Linux, the number and functionality of supported de-
vices is large and diverse. To support devices that do not conform
to the USB speciﬁcaton, Linux contains a repository for these de-
vices and sets ﬂags when they to modify the host behavior. A host
that recognizes a Kells device will set these ﬂags and send spe-
cial command transfer operations to it. When the device receives
these commands, it can begin the attestation protocol. If these com-
mands sare not received, the host can access the public partition as
a standard mass storage device, oblivious to the trusted protocols
and storage.
2.2 Designing the Storage Device
Kells requires the ability to perform policy decisions indepen-
dent of the host. As a result, logic must execute on these devices,
as well as a way of receiving command transfers from the host and
to use these for making the correct access decisions.
The basic architecture for the storage device is an extension to
the Linux USB gadget stack, along with a user-space daemon in
charge of policy decisions and accessing other important informa-
tion. Within the kernel, we added new functionality allowing Kells
to receive control transfers from the host. These are exported to
user space through the sysfs interface, where they are read as strings
by the daemon tasked with marshaling this data. When plugged
in, the daemon on the device sets a timer and waits to determine
whether the host presents the proper credentials.
If the command transfer containing authenticating information
from the host is not received within a deﬁned time period, operation
on the device defaults to only exposing the public operation.
If
the device is conﬁgured such that the policy does not allow any
partitions to be mounted, the device will not present any further
information to the host. If the protocol fails, the failure is logged
in the storage device’s audit log, which is unexposed to the host. If
the protocol is successful and the host attests its state to the device,
the daemon presents the trusted partition to be mounted.
Within the Kells device is a policy store containing information
about every known host, a measurement database to compare at-
testations against, and policy details, such as whether the host is
authenticated as an administrative console and whether the host
should expose a public partition if the attestation check fails. Op-
tionally, the device can also store information on user credentials
supplied directly to the device through methods such as biometrics.
Policy can then be conﬁgured to allow or disallow the device to be
plugged into speciﬁc machines.