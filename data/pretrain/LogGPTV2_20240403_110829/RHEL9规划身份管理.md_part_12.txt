3.  输入 `yes`{.literal} 以确认备份中的当前数据覆盖。
    ``` literallayout
    Preparing restore from /var/lib/ipa/backup/ipa-full-2020-01-14-12-02-32 on server1.example.com
    Performing FULL restore from FULL backup
    Temporary setting umask to 022
    Restoring data will overwrite existing live data. Continue to restore? [no]: yes
    ```
4.  `ipa-restore`{.literal} 工具禁用所有可用服务器的复制：
    ``` literallayout
    Each master will individually need to be re-initialized or
    re-created from this one. The replication agreements on
    masters running IPA 3.1 or earlier will need to be manually
    re-enabled. See the man page for details.
    Disabling all replication.
    Disabling replication agreement on server1.example.com to caReplica2.example.com
    Disabling CA replication agreement on server1.example.com to caReplica2.example.com
    Disabling replication agreement on caReplica2.example.com to server1.example.com
    Disabling replication agreement on caReplica2.example.com to replica3.example.com
    Disabling CA replication agreement on caReplica2.example.com to server1.example.com
    Disabling replication agreement on replica3.example.com to caReplica2.example.com
    ```
    然后该工具将停止 IdM 服务，恢复备份并重启服务：
    ``` literallayout
    Stopping IPA services
    Systemwide CA database updated.
    Restoring files
    Systemwide CA database updated.
    Restoring from userRoot in EXAMPLE-COM
    Restoring from ipaca in EXAMPLE-COM
    Restarting GSS-proxy
    Starting IPA services
    Restarting SSSD
    Restarting oddjobd
    Restoring umask to 18
    The ipa-restore command was successful
    ```
5.  重新初始化连接到恢复的服务器的所有副本：
    ::: orderedlist
    1.  列出 `domai`{.literal}
        后缀的所有复制拓扑片段，记录涉及恢复的服务器的拓扑片段。
        ``` literallayout
        [root@server1 ~]# ipa topologysegment-find domain
        ------------------
        2 segments matched
        ------------------
          Segment name: server1.example.com-to-caReplica2.example.com
          Left node: server1.example.com
          Right node: caReplica2.example.com
          Connectivity: both
          Segment name: caReplica2.example.com-to-replica3.example.com
          Left node: caReplica2.example.com
          Right node: replica3.example.com
          Connectivity: both
        ----------------------------
        Number of entries returned 2
        ----------------------------
        ```
    2.  使用恢复的服务器重新初始化所有拓扑片段的 `domai`{.literal}
        后缀。
        在本例中，使用来自 `server1`{.literal} 的数据对
        `caReplica2`{.literal} 进行重新初始化。
        ``` literallayout
        [root@caReplica2 ~]# ipa-replica-manage re-initialize --from=server1.example.com
        Update in progress, 2 seconds elapsed
        Update succeeded
        ```
    3.  继续到证书颁发机构数据，列出 `ca`{.literal}
        后缀的所有复制拓扑片段。
        ``` literallayout
        [root@server1 ~]# ipa topologysegment-find ca
        -----------------
        1 segment matched
        -----------------
          Segment name: server1.example.com-to-caReplica2.example.com
          Left node: server1.example.com
          Right node: caReplica2.example.com
          Connectivity: both
        ----------------------------
        Number of entries returned 1
        ----------------------------
        ```
    4.  重新初始化连接到恢复的服务器的所有 CA 副本。
        在本例中，使用来自 `server1`{.literal} 的数据执行
        `caReplica2`{.literal} 的 `csreplica`{.literal} 重新初始化。
        ``` literallayout
        [root@caReplica2 ~]# ipa-csreplica-manage re-initialize --from=server1.example.com
        Directory Manager password:
        Update in progress, 3 seconds elapsed
        Update succeeded
        ```
    :::
6.  继续进入复制拓扑，重新初始化连续的副本，直到所有服务器都已使用恢复的服务器
    `server1.example.com`{.literal} 的数据进行更新。
    在本例中，我们只需要使用 `caReplica2`{.literal} 中的数据在
    `replica3`{.literal} 上重新初始化 `domai`{.literal} 后缀。
    ``` literallayout
    [root@replica3 ~]# ipa-replica-manage re-initialize --from=caReplica2.example.com
    Directory Manager password:
    Update in progress, 3 seconds elapsed
    Update succeeded
    ```
7.  清除 SSSD
    在每台服务器上的缓存，以避免因为数据无效而导致身份验证问题：
    ::: orderedlist
    1.  停止 SSSD 服务：
        ``` literallayout
        [root@server ~]# systemctl stop sssd
        ```
    2.  从 SSSD 中删除所有缓存的内容：
        ``` literallayout
        [root@server ~]# sss_cache -E
        ```
    3.  启动 SSSD 服务：
        ``` literallayout
        [root@server ~]# systemctl start sssd
        ```
    4.  重启服务器。
    :::
:::
::: itemizedlist
**其他资源**
-   `ipa-restore(1)`{.literal} man page
    还详细介绍了如何在恢复期间处理复杂复制方案。
:::
:::
::: section
::: titlepage
# []{#backing-up-and-restoring-idm_planning-identity-management.html#restoring-encrypted-backup_backing-up-and-restoring-idm}从加密备份中恢复 {.title}
:::
这个过程从加密的 IdM 备份恢复 IdM 服务器。`ipa-restore`{.literal}
工具会自动检测 IdM 备份是否已加密，并使用 GPG2 根密钥环恢复它。
::: itemizedlist
**先决条件**
-   GPG 加密的 IdM 备份。请参阅 [创建加密的 IdM
    备份](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/planning_identity_management/backing-up-and-restoring-idm_planning-identity-management#creating-encrypted-backups_backing-up-and-restoring-idm){.link}。
-   LDAP Directory Manager 密码
-   创建 GPG 密钥时使用的口令
:::
::: orderedlist
**流程**
1.  如果您在创建 GPG2 密钥时使用了自定义密钥环位置，请确保将
    `$GNUPGHOME`{.literal} 环境变量设置为该目录。请参阅 [创建 GPG2
    密钥](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/planning_identity_management/backing-up-and-restoring-idm_planning-identity-management#creating-gpg-key_creating-encrypted-backups){.link}。
    ``` literallayout
    [root@server ~]# echo $GNUPGHOME
    /root/backup
    ```
2.  为 `ipa-restore`{.literal} 实用程序提供备份目录位置。
    ``` literallayout
    [root@server ~]# ipa-restore ipa-full-2020-01-13-18-30-54
    ```
    ::: orderedlist
    1.  输入 Directory Manager 密码。
        ``` literallayout
        Directory Manager (existing master) password:
        ```
    2.  输入您创建 GPG 密钥时使用的密码短语。
        ``` literallayout
        ┌────────────────────────────────────────────────────────────────┐
        │ Please enter the passphrase to unlock the OpenPGP secret key:  │
        │ "GPG User (first key) "                      │
        │ 2048-bit RSA key, ID BF28FFA302EF4557,                         │
        │ created 2020-01-13.                                            │
        │                                                                │
        │                                                                │
        │ Passphrase:                                        │
        │                                                                │
        │                                                    │
        └────────────────────────────────────────────────────────────────┘
        ```
    :::
3.  重新初始化连接到恢复的服务器的所有副本。请参阅 [从备份恢复 IdM
    服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/planning_identity_management/backing-up-and-restoring-idm_planning-identity-management#restoring-a-backup_backing-up-and-restoring-idm){.link}
    。
:::
:::
:::
[]{#assembly_backing-up-and-restoring-idm-servers-using-ansible-playbooks_planning-identity-management.html}
::: chapter
::: titlepage
# []{#assembly_backing-up-and-restoring-idm-servers-using-ansible-playbooks_planning-identity-management.html#assembly_backing-up-and-restoring-idm-servers-using-ansible-playbooks_planning-identity-management}第 10 章 使用 Ansible playbook 备份和恢复 IdM 服务器 {.title}
:::
使用 `ipabackup`{.literal} Ansible 角色，您可以自动备份 IdM
服务器，在服务器和 Ansible 控制器之间传输备份文件，并从备份中恢复 IdM
服务器。
::: section
::: titlepage
# []{#assembly_backing-up-and-restoring-idm-servers-using-ansible-playbooks_planning-identity-management.html#proc_using-ansible-to-create-a-backup-of-an-idm-server_assembly_backing-up-and-restoring-idm-servers-using-ansible-playbooks}使用 Ansible 创建 IdM 服务器的备份 {.title}
:::
以下流程描述了如何在 Ansible playbook 中使用 ipabackup 角色来创建 IdM
服务器的备份并将其存储在 IdM 服务器中。
::: itemizedlist
**先决条件**
-   您已配置了符合以下要求的 Ansible 控制节点：
    ::: itemizedlist
    -   您使用 Ansible 版本 2.8 或更高版本。
    -   您已安装 `ansible-freeipa`{.literal} 软件包。
    -   您已创建了带有您要配置这些选项的 IdM 服务器的完全限定域名 (FQDN)
        的 Ansible 清单文件。
    -   您的 Ansible 清单文件位于 `~/MyPlaybooks/`{.literal} 目录中。
    :::
:::
::: orderedlist
**流程**
1.  进入 `~/MyPlaybooks/`{.literal} 目录：
    ``` literallayout
    $ cd ~/MyPlaybooks/
    ```
2.  创建位于 `/usr/share/doc/ansible-freeipa/playbooks`{.literal}
    目录中的 `backup-server.yml`{.literal} 文件的副本：
    ``` literallayout
    $ cp /usr/share/doc/ansible-freeipa/playbooks/backup-server.yml backup-my-server.yml
    ```
3.  打开 `backup-my-server.yml`{.literal} Ansible playbook
    文件以进行编辑。
4.  通过将您的清单文件中的 `hosts`{.literal} 变量设置为主机组来调整
    文件。在本例中，将其设置为 `ipaserver`{.literal} 主机组：
    ``` literallayout
    ---
    - name: Playbook to backup IPA server
      hosts: ipaserver
      become: true
      roles:
      - role: ipabackup
        state: present
    ```
5.  保存这个文件。
6.  运行 Ansible playbook，指定清单文件和 playbook 文件：
    ``` literallayout
    $ ansible-playbook -v -i ~/MyPlaybooks/inventory backup-my-server.yml
    ```
:::
::: orderedlist
**验证步骤**
1.  登录到您备份的 IdM 服务器。
2.  验证备份是否位于 `/var/lib/ipa/backup`{.literal} 目录中。
    ``` literallayout
    [root@server ~]# ls /var/lib/ipa/backup/
    ipa-full-2021-04-30-13-12-00
    ```