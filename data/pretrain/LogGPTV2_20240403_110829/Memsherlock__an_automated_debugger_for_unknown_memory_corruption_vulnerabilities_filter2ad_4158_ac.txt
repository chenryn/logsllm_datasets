mine the original memory region being modiﬁed.
When generating the dynamic program slice for the ex-
ploited vulnerability, MemSherlock uses the Taint data struc-
ture from TaintCheck. Every tainted memory region is asso-
ciated with a Taint data structure. When the taint is prop-
agated to a new memory region, a new Taint data structure
is created. This data structure stores the instruction that
propagated the taint, the tainted memory address, the cur-
rent execution stack, and a reference to the Taint structure
of the source memory regions. By using these data struc-
tures, particularly the execution stacks, MemSherlock can
identify the part of the program that propagated malicious
network input, the involved memory regions, and the depen-
dency among the memory regions.
When generating the output of the analysis, we can high-
light the statements in the source code (through the trans-
lation from instructions to ﬁle name and line number pairs),
and associate these statements with the memory regions in-
volved in the exploit. Figure 6 in Section 6.1 shows an ex-
ample of the output, using one of our test cases.
In most cases, checking whether the value being written is
tainted is suﬃcient. One exception is when a tainted value
is used as a size argument during memory allocation. One of
our test cases (Null HTTPD) has such an overﬂow vulnera-
bility, where a user-provided value is used in calculating the
size for a heap buﬀer, which is then overﬂowed. In this ex-
ample, the inﬂuence of the tainted data is indirect. In order
to deal with such indirect eﬀects, we use source code rewrit-
ing and a functionality of Valgrind that allows it to receive
client calls from the client program during debugging. We
modify the source code such that every time a user variable
is passed as a size argument to a malloc family of function
call, a client call is made to the debugging agent to inform
the memory location of the variable. When a buﬀer overﬂow
occurs, we not only check if the value is tainted but also if
the size used during allocation is tainted as well.
5.
IMPLEMENTATION
MemSherlock is implemented as two pre-debugging tools
and a security debugging agent.
In this implementation,
we try to reuse existing software as much as possible to
reduce the development cycle. In the following, we present
the implementation details.
5.1 MemSherlock Preprocessing Tools
In the current implementation, MemSherlock uses two
programs to facilitate the pre-debugging phase: SrcRewrite
performs source code rewriting, as discussed in Section 3.1.2,
while WriteSetGen performs source code and binary static
analysis to generate write sets and auxiliary information.
5.1.1 Source Code Rewriting via SrcRewrite
SrcRewrite uses C Intermediate Language (CIL) to rewrite
source code ﬁles. The CIL executable cilly supports an
OCaml scripting interface that allows users to deﬁne their
own rewriting rules. cilly supports rewriting at diﬀerent lev-
els such as per function, per statement and even per l-value.
We use statement based rewriting, which allows us to deﬁne
new temporary variables and insert new statements or alter
the existing one.
For every l-value and function argument that is a chained
dereference or a reference to a ﬁeld of a struct, we insert
a temporary variable temp of compatible type and insert
an assignment statement that sets temp to the expression.
The l-value is then replaced with temp in the assignment
statement.
For each library, SrcRewrite takes as input a speciﬁcation
ﬁle for the library which lists the functions that modify their
arguments and the argument numbers that are modiﬁed.
SrcRewrite rewrites all such arguments in the source code
and converts them to simple dereferences if necessary.
Finally, in order to aid MemSherlock in security debug-
ging phase, SrcRewrite inserts client calls into the source
code whenever a malloc family of function call is passed a
non-static size (i.e., variable or expression). Expressions are
ﬁrst transformed to l-values. This client call informs the de-
bugger of the location of the variable being used as the size,
which in turn is checked for taintedness.
5.1.2 Generating Write Sets via WriteSetGen
During the pre-debugging phase, WriteSetGen performs
static analysis in two steps to produce the information for
In step 1, WriteSetGen uses Code
its debugging agent.
Surfer [5], a commercial static analysis tool, to identify vari-
ables and their write sets. Code Surfer analyzes a program
and creates its own internal data structures, including data
and control-ﬂow dependency graphs. It is equipped with a
scripting interface that allows users to access these internal
data structures. WriteSetGen uses a script to determine the
variables and their legitimate write sets automatically. This
script also contains speciﬁcations for standard library func-
tions that potentially modify their arguments just as in Sr-
cRewrite). When such a function is called with a monitored
variable as a potentially modiﬁed argument, WriteSetGen
adds the call site to the variable’s legitimate write set.
The Code Surfer script outputs a text ﬁle listing every
variable along with its WS in the form of ﬁle and line num-
ber pairs. Variables are distinguished as global or local.
For local variables, it also outputs the variable’s enclosing
function.
In addition, pointer variables, pointer type for-
mal parameters and struct variables are ﬂagged as such.
Finally, line numbers in a pointer’s WS are marked with a
ﬂag if the statement modiﬁes the referent object instead of
the pointer. This enables the MemSherlock debugging agent
to distinguish between the write sets of the pointer and its
referent object.
In step 2, WriteSetGen analyzes the program executable
to determine the global variable addresses, function addresses,
and oﬀsets of local variables. To further facilitate the de-
bugging process, we compile the code using debugging ﬂags,
and use the dwarfdump tool to determine the addresses for
global variables and functions, and oﬀsets for local variables.
dwarfdump’s output eﬀectively provides a mapping from pro-
gram source variables to their corresponding runtime mem-
ory locations. WriteSetGen includes a pre-debugging script
written in Ruby to parse dwarfdump’s output and combine
the relevant data with Code Surfer’s output to produce the
ﬁnal input ﬁle for the debugging agent. The script also splits
struct variables into its ﬁelds, and outputs individual mem-
ory region information for each ﬁeld as well as its WS.
5.2 MemSherlock Debugging Agent
The MemSherlock debugging agent is implemented as an
extension to Valgrind [19], which is an open-source CPU em-
ulator for x86 architectures that provides facilities to mon-
itor all aspects of program execution,
including memory
writes, memory allocation events, function calls and system
calls. The MemSherlock debugging agent is implemented
as a Valgrind skin that logs all memory operations, mon-
itors memory regions, and performs checks to ensure that
only legitimate memory writes occur. When a program is
executed under Valgrind, the binary code undergoes certain
transformations one basic block at a time. In our implemen-
tation of the MemSherlock debugging agent, we instrument
the basic blocks with calls to our own functions when certain
events are observed, including function calls, returns, mem-
ory writes, and system calls. MemSherlock also incorporates
the taint analysis from TaintCheck [20]. This information is
used in extracting the dynamic slice of the program respon-
sible for the vulnerability.
Another implementation detail worth mentioning is the
way MemSherlock handles struct type pointer assignments.
MemSherlock assumes MemoryRegions are non-overlapping.
Moreover, to capture overﬂows from one struct ﬁeld onto
another, we represent these ﬁelds as individual memory re-
gions. The challenge then, is to determine whether a pointer
points to the ﬁeld itself or the entire struct variable. Essen-
tially, the two are diﬀerentiated by a ﬂag associated with the
pointer variable during pre-debugging static analysis. Dur-
ing memory write checking, when this pointer is analyzed,
MemSherlock ﬁrst checks the MemoryRegion of the variable
itself, and then its referent object’s MemoryRegion, just like
--20361--
--20361-- Error type: Heap Buffer Overflow
--20361-- Dest Addr: 3AB3E360
--20361-- IP: 0x804E5C7: ReadPOSTData (http.c:108)
--20361-- Dest address resolved to:
--20361-- Global variable "heap var"
@ 3AB3E280 (size: 224)
--20361--
--20361-- Memory allocated by 0x804E531:
ReadPOSTData (http.c:100)
0x804E5C7: ReadPOSTData (http.c:108)
--20361--
--20361-- TAINTED destination 3AB3E360
--20361-- Fully tainted from:
--20361--
--20361--
--20361-- TAINTED size used during allocation
--20361-- Tainted from:
--20361--
--20361--
--20361--
--20361--
0x804E456: ReadPOSTData (http.c:100)
0x804FBB5: read_header (http.c:153)
0x805121B: sgets (server.c:211)
Figure 5: A typical error message from the debugger
any other pointer variable.
In the case when the pointer
variable is ﬂagged as a struct pointer, the debugger further
checks the MemoryRegions of the subsequent ﬁelds. There-
fore, the struct ﬂag determines whether this instruction is
allowed to modify the ﬁeld alone or the entire struct.
6. EXPERIMENTAL EVALUATION
We performed a series of experiments to evaluate MemSh-
erlock. In our evaluation, we used 11 real-world applications
with a variety of vulnerabilities, along with the attack pro-
grams that exploit these vulnerable applications. Table 1
gives the information about these test applications. The
ﬁrst three columns in Table 1 show the list of applications,
their vulnerability type and a brief description. Six of the
test cases have stack buﬀer overﬂow vulnerabilities, three
have heap overﬂow vulnerabilities, and the other two have
format string vulnerabilities. It is worth noting that other
types of memory corruption attacks rely on these three vul-
nerabilities. For example, return-to-library attacks are a
variation of stack overﬂows, whereas the malloc-free attack
relies on overﬂowing a heap buﬀer and corrupting the meta
data used by the memory manager.
Table 1 also summarizes the evaluation results, including
whether the vulnerabilities are captured and the number of
false positives. Moreover, Table 1 presents the false positives
in three classes based on their reasons. It is worth pointing
out that all the false positives were due to the limitation of
our implementation rather than the proposed method. In
the following, we describe the evaluation results in detail.
6.1 Automated Debugging
MemSherlock can provide crucial information about ex-
ploited vulnerabilities to aid programmers in debugging, sig-
nature generation, patching, etc. To demonstrate the depth
of information MemSherlock can provide, we use the vulner-
ability output from Null HTTP as an example.
Figure 5 shows the error message displayed by MemSher-
lock when NullHTTP’s heap is overﬂowed. The ﬁrst para-
graph displays the location of the error; both the instruction
number and the source ﬁle location which states that line
108 was responsible for this memory corruption. The error
message then provides the destination memory address and
the memory region to which it corresponds. In this particu-
lar example, since the destination address is the meta data
of the heap memory region, the heap memory region that
was allocated is shown rather than the meta data’s.
Knowing the corruption point, a programmer easily can
guess that the recv function call is responsible for the over-
ﬂow. What is not apparent from this information alone is
that the reason the buﬀer is overﬂowed is not due to an
oversized packet alone. The size of the overﬂowed buﬀer is
calculated from user data, and a negative value provided by
the user can cause the buﬀer to be smaller than expected.
The error message states that the buﬀer was allocated from
line 100 in http.c and also performs taint analysis on both
the array and the size value that was used during allocation.
MemSherlock produces enough information to detail this
vulnerability. A more intuitive display of the vulnerabil-
ity can be generated by extracting a dynamic slice of the
program and presenting it as a graph. Figure 6 shows the
fragments from the source code, highlighting the statements
involved in the propagation of the tainted data. It includes
the critical program steps from the time when the malicious
input is introduced to the time of memory corruption.
As highlighted in Figure 6, the function read header calls
sgets, passing its local variable line as an argument. The
sgets function taints the memory region belonging to line
through the recv library function call. Note that the ar-
gument used while calling recv is buffer. This assign-
ment is captured during the function call to sgets and the
connection is clearly shown in Figure 6. Once sgets re-
turns, the value in line is converted into a decimal num-
ber at line 153 in read header. This statement propagates
the taint into another heap memory region belonging to
conn[sid].dat->in ContentLength. The dotted line be-
tween the two memory regions show the taint propagation.
Later, the tainted heap memory region is used as the size ar-
gument in ReadPOSTData at line 100, where the calloc func-
tion call at line 100 creates a new memory region. (Note that
TaintCheck itself cannot capture the connection between the
tainted size argument and the newly created memory re-
gion. MemSherlock uses a Valgrind client call inserted by
SrcRewrite to capture it.) Finally, with the call to recv at
line 108, ReadPOSTData taints the newly created memory re-
gion and also overﬂows it at the same time, for which the
debugger issues the error message.
As illustrated in Figure 6, MemSherlock can simplify the
security debugging process greatly by providing the informa-
tion on how a memory corruption vulnerability is exploited,
and thus signiﬁcantly reduce the time and eﬀort required
in understanding and ﬁxing unknown memory corruption
vulnerabilities.
6.2 False Positive Analysis
Our evaluation shows that MemSherlock generates very
few false positives. We observed a total of 25 false positives
in our 11 test applications. Most of them were due to the
same implementation limitations manifesting themselves in
diﬀerent locations within the program. We categorize these
false positives into three groups, as discussed below.
Embedded Assembly: Code Surfer cannot perform source
code analysis on embedded assembly code. This prevents
WriteSetGen from including the statement in the WS of
the variable on which it operates. This missing information
causes the debugger to label the memory modiﬁcation as
illegal.
Application Vuln. Description
Name
Type
Captured #FP
(total)
#FP
due to
asm
#FP
due to
clib
#FP
due to
struct
GHTTP
Icecast
Sumus
Monit
Newspost
Prozilla
NullHTTP
Xtelnet
Wsmp3
OpenVMPS
Power
S
S
S
S
S
S
H
H
H
F
F
A small HTTP server
A mp3 broadcast server
A game server for ’mus’
Multi-purpose anomaly detector
Automatic news posting
A download accelerator for Linux
Null HTTP, HTTP server
A telnet server
Web server with mp3 broadcasting
Open source VLan management policy server
UPS monitoring utility
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
Yes
Yes
7
0
0
0
2
0
0
4
0
2
10
4
0
0
0
0
0
0
0
0
0
6
2
0
0
0
1
0
0
4
0
2
4
1
0
0
0
1