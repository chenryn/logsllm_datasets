interprocedural CFG (Control Flow Graph) of the program [50].
Slicing. For each candidate object o, the program is sliced to keep
only the relevant functions that o may flow to (i.e., o’s liveness
scope) by using a standard mod-ref analysis, with its value-flow
dependences computed by a flow-insensitive pointer analysis [23,
60]. Our typestate analysis for o will be performed on this slice.
Typestate Analysis. Our typestate analysis starts from a candi-
date object o created at its allocation site, with its path-sensitivity
focused on the typestates of the FSA depicted in Figure 1. Following
ESP [17], a data-flow fact is a symbolic state consisting of a property
state, i.e., live, dead or error, and an execution state, which rep-
resents the values of all the variables affecting the control flow. At
a two-way joint point, one symbolic state is obtained, by merging
the execution states whose corresponding property states are the
same. On encountering a free site f ree (p), the FSA transits from
live to dead if o ∈ pt(p). On encountering subsequently a use/free
SVMClassifierTypestateAutomationTargetProgramBug ReportPre-AnalysisPath-SensitiveTypestate AnalysisGuide state transitionNo state transitionallocation site of𝑜True UAFFalse UAFFeaturesFeaturesCrossValidationTrainig PhaseExtractExtractApply a classifier to FeatureExtractionThe slice of 𝑜TrainingSamplesProgramSlicingQuery for if free(p)frees 𝑜and use(q)accesses 𝑜Main Analysis PhasePointerAnalysisnoyes( i.e., if *pand *qare aliased to 𝑜)ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Hua Yan, Yulei Sui, Shiping Chen, and Jingling Xue
void* p = malloc(1);//o1
void* q = p;
int flag = 0;
if (Cond) {
free(p);
p = malloc(2);//o2
flag = 1;
}
if (flag == 0)
1: void foo() {
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: }
use(q); // False UAF w.r.t. line 6
use(q); // True UAF w.r.t line 6
use(p); // False UAF w.r.t line 6
(a) Path-sensitivity
// Data structure for linked-lists
1: typedef struct NODE {
2:
3:
4: } NODE;
int data;
struct NODE* nxt;
// The 1st, 2nd, 3rd and ith nodes
5: NODE *n1, *n2, *n3, *ni;
6: unsigned sz = sizeof(NODE);
7: void bar() {
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: }
(b) Linked-list
ni = n1 = (NODE*)malloc(sz);//o1
for (int i = 0; i nxt = (NODE*)malloc(sz);//o2
ni = ni->nxt;
ni->nxt = NULL;
}
n2 = n1->nxt;
n3 = n2->nxt;
free(n2);
use(n1); // False UAF w.r.t line 16
use(n2); // True UAF w.r.t line 16
use(n3); // False UAF w.r.t line 16
Figure 3: Examples illustrating how imprecise pointer analysis leads to imprecise typestate analysis for UAF detection.
site use (q)/f ree (q), the FSA transits from dead to error if both
o ∈ pt(q) and the aliasing relation between ∗p and ∗q (with respect
to o) reported by the pointer analysis is also validated by our SVM
classifier. In this case, a UAF/double-free warning is issued.
Given a UAF pair,⟨f ree (p), use (q)⟩, pt(p) and pt(q) are computed
by using a demand-driven flow-sensitive pointer analysis [58]. If
∗p and ∗q are found to be aliased (with o), we pass the pair to an
SVM classifier for a further sanity check based on the features of
⟨f ree (p), use (q)⟩ extracted on the fly from the sliced program of o.
2.3 Examples
Figure 3 gives two examples to illustrate how the imprecision in
pointer analysis leads to the imprecision in typestate analysis.
Typestate Analysis with Path-Insensitive Pointer Analysis.
ESP-based typestate analysis is path-sensitive in tracking non-
pointer scalar values but interprets pointer values conservatively
as ⊥, i.e., obtainable from a pointer analysis. Figure 3(a) gives an
example with one true UAF bug (at line 12) and two false UAF bugs
(at lines 11 and 13) with respect to the free site at line 6, by using
the points-to information computed by a path-insensitive pointer
analysis.
We focus on analyzing the object o1 allocated at line 2 and freed
conditionally at line 6, at which point, the property state of o1
becomes dead. By using a flow-sensitive pointer analysis without
path sensitivity, ESP can (1) prove that use (q) at line 11 is not a
UAF bug, (2) identify use (q) at line 12 as a true UAF bug, but (3)
report imprecisely use (p) at line 13 as a false alarm.
Table 1 gives the symbolic states (including o1’s property states
for the FSA shown in Figure 1 and execution states) and the points-
to sets at some relevant program points. After analyzing line 9, type-
state analysis combines the symbolic states from the two branches
into one, resulting in sline9 = s1 ∪ s2, where s1 = [dead, p = q =
⊥, flag = 1, Cond] (if-branch) and s2 = [live, p = q = ⊥, flag =
0,¬Cond] (else-branch). However, after line 10, s1 is filtered out
due to path contradiction, since f laд = 1 in s1’s execution state is
inconsistent with the branch condition f laд == 0 at line 10. As a
transition from dead to error is impossible, the typestate analysis
correctly proves the absence of a UAF bug for use (q) at line 11.
Table 1: ESP-based Typestate analysis with path-insensitive
pointer analysis for the program given in Figure 3(a).
line 4:
line 6:
line 8:
line 9:
line 10:
line 11:
[live, p = q = ⊥, flag = 0]
[dead, p = q = ⊥, flag = 0, Cond]
[dead, p = q = ⊥, flag = 1, Cond]
[dead, p = q = ⊥, flag = 1, Cond] ∪
[live, p = q = ⊥, flag = 0,¬Cond]
[live, p = q = ⊥, flag = 0,¬Cond]
[dead, p = q = ⊥, flag = 1, Cond] ∪
[live, p = q = ⊥, flag = 0,¬Cond]
pt (p) = {o1}
line 6:
lines 11 and 12: pt (q) = {o1}
pt (p) = {o1, o2}
line 13:
symbolic
typestates
points-to
sets
At line 12, the pointer analysis finds precisely that p and q point
to o1 allocated at line 2. Therefore, a state transition from dead to
error occurs in s1, so that a true UAF bug for use (q) at line 12 is
reported. However, at line 13, due to the lack of path-sensitivity, p
is found to point to both o1 (allocated at line 2) and o2 (allocated
at line 7), resulting in a spurious alias relation between ∗p and ∗q.
Therefore, f ree (p) at line 6 and use (q) at line 13 are considered to
access o1, triggering a spurious state transition from dead to error
in s1. Thus, a false alarm is raised for use (p) at line 13.
Typestate Analysis with Imprecise Handling of Lists. Fig-
ure 3(b) gives a linked-list example to demonstrate that field-
sensitivity is not powerful enough to enable pointer analysis to
distinguish the internal structure of an aggregate object.
With field-sensitivity, we can distinguish the head node (repre-
sented by o1) from the remaining 10 nodes (abstracted by o2) in
the linked-list, created at the two allocation sites at lines 8 and 10,
respectively. Thus, the typestate analysis can correctly prove the
absence of a UAF bug for use (n1) at line 17 and report use (n2) at
line 18 as a true UAF bug. However, the pointer analysis cannot
distinguish the accesses to the second and third elements of the
linked-list, since pt(n2) = pt(n3) = {o2}, resulting in a spurious
alias relation between ∗n2 and ∗n3. Therefore, a false alarm for
use (n3) at line 19 is reported.
Machine-Learning-Guided Typestate Analysis for Static Use-After-Free Detection ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
2.4 Discussion
There are many spurious aliases introduced by pointer analysis.
We propose to apply machine learning to significantly reduce their
presence in order to improve the precision of typestate analysis.
3 TAC APPROACH
We introduce Tac, including its training phase (Section 3.1) and
machine-learning-guided typestate analysis phase (Section 3.2).
3.1 Training
The aim of our SVM classifier is to further disambiguate the UAF-
related aliases imprecisely reported by pointer analysis.
Building an SVM Classifier. We use x ∈ X to denote a UAF sam-
ple representing a pair of free and use sites ⟨f ree (p), use (q)⟩x ∈ X.
A feature Fi is either a syntactic or semantic property of a program,
mapping x to either a boolean or numeric value Fi : X → N. Fol-
lowing the standard normalization [10] to achieve accuracy in the
training process, we adjust the values of the samples in X in order to
map a feature to a real number between 0 and 1 inclusive, by using
function Fi : X → [0, 1]n. Specifically, given a sample x ∈ X, this is
done as Fi (x ) = (Fi (x ) − min(Fi (X )))/(max(Fi (X )) − min(Fi (X ))),
where min (max) returns the minimum (maximum) value for Fi
among all the samples in X. Finally, a feature vector of length n
is defined as F = (F1, . . . , Fn ) containing a set of n features to
capture the properties of every sample.
During the training process, we build an SVM classifier C :
[0, 1]n → {0, 1} that takes a feature vector F of a sample
⟨f ree (p), use (q)⟩x as input and returns whether ∗p and ∗q are
aliases (1) or not (0). The typestate analysis phase will make use of
the classifier to reduce the number of UAF-related spurious aliases.
For a program, let Xall be the set of all UAF pairs ⟨f ree (p), use (q)⟩x
causing the FSA in Figure 1 to transit into error, where ∗p and
∗q are found to be aliased by a pointer analysis used. Only the
following subset XML will be further investigated by the typestate
analysis:
XML={⟨f ree (p), use (q)⟩x ∈ Xall | C (F (x )) =1 ∧ pt(p)∩pt(q) (cid:44) ∅}
In other words, the UAF pairs ⟨f ree (p), use (q)⟩x in Xall \ XML
are ignored, since ∗p and ∗q are not aliases by the SVM classifier.
Extracting Program Features. Table 2 gives a set of 35 features,
which are divided into four categories below, to represent a UAF
sample. Note that this set of features can be extended by considering
other program characteristics or reused by other program analyses.
• Type Information (Features 1 – 9). Type information is used
to identify arrays (F1), structs (F2), C++ containers (F3), different
kinds of use sites (F4, F5 and F6), global variable accesses for free
and use sites (F7 and F8), and type compatibility for the pointers
p and q at a free site f ree (p) and a use site use (q) (F9).
• Control Flow (Features 10 – 17). We consider the following
control-flow properties, including whether a pair of free and use
sites resides in the same loop or recursion cycle (F10 and F11),
the distance between a free site and a use site in the program’s
call graph (F12), control-flow reachability from a free site to a use
site via a loop back-edge (F13), control-flow dominance and post-
dominance between a free site and a use site (F14 and F15), the
number of indirect calls along the shortest path from a free site
to a use site in the program’s call graph (F16), and control-flow
reachability from a use site to a free site for a UAF pair (F17).
• Common Programming Practices (Features 18 – 25). We
consider a number of programming practices for memory man-
agement, including setting p to null immediately after f ree (p)
(F18), returning an integer or a boolean value from a wrapper
for f ree (p) to signify the success or failure for f ree (p) (F19 and
F20), pointer casting (F21), setting p to point to a newly allocated
object after f ree (p) (F22), reference counting for an object (F23),
and null checking before a pointer is freed (F24) or used (F25).
• Points-to Information (Features 26 – 35). We take advantage
of the points-to information computed by the pointer analysis
used, including the sizes of the points-to sets at free and use sites
(F26 and F27), the number of UAF pairs sharing the same free (F28)
or use (F29) site, and the number of aliased pointers pointing to a
candidate UAF object (F30). In addition, we also consider whether
a candidate object is allocated in loops (F31), recursion cycles
(F32) or as a node of a linked-list (F33) participating in a points-
to cycle (causing the object to abstract many concrete nodes
in the list). Finally, we consider whether p and q at a UAF pair,
⟨f ree (p), use (q)⟩, are the same variable (F34) and whether q at
use (q) is defined just before the free site (F35).
Let us revisit the two examples in Figure 3. In Figure 3(a),
F9, F14, F15, F22, F26, F27, F34 and F35 for line 13 are useful to pre-
dict that the UAF pair at lines 6 and 13 is not a bug. In Figure 3(b),
F31, F33 and F35 for line 19 can help avoid a false alarm that would
otherwise be raised for the UAF pair at lines 16 and 19.
Support Vector Machine (SVM). Given a set of labeled samples
represented by their feature vectors, an SVM [15] can separate them
by computing an underlying mathematical function, called a kernel
function. There are four commonly used kernels: linear, polynomial,
radial basis function (RBF) and sigmoid kernels. Following [26, 36,
65], a RBF kernel is used. The kernel function maps each feature
vector to a high dimensional space, where the SVM computes a
hyperplane that best separates the labeled samples into two sides.
Once trained, an SVM classifier can be used to classify a given UAF
pair according to simply which side of the hyperplane it falls in.
3.2 Typestate Analysis
We describe our ESP-based typestate analysis for UAF detection.
The basic idea is to achieve improved precision (compared to the
prior work) by applying an SMV classifier to further validate the
UAF-related aliases found imprecisely by the pointer analysis.
Our typestate analysis is a whole-program analysis. We describe
how it works, first intraprocedurally and then interprocedurally.
Intraprocedural Analysis. Intraprocedurally, our typestate
analysis is performed on the CFG of a function, CFG = (N , E), where
N is a set of nodes representing program statements and E ⊆ N × N
is a set of edges corresponding to the flow of control between nodes.
For a given edge e, src (e)/dst (e) denotes its source/destination node.
Following ESP [17], we assume three types of nodes on a CFG,
i.e., N = JointNode ∪ BranchNode ∪ StmtNode: (1) a joint node