### 优化后的文本

#### 密钥参数
在这一部分中，我们讨论了模数 \( n \)、公钥指数 \( e \) 和私钥指数 \( d \)。这些参数以大端字节序的十六进制表示。虽然实际应用中需要一个2048位的密钥，但这里为了说明方便使用了512位密钥。

#### 伪造签名
伪造签名相对简单。首先，计算证书前六个字段的MD5哈希值，并根据规范添加一些常量。然后，使用终端服务密钥的私钥部分进行加密。具体实现可以参考以下Python代码：

```python
# Python代码示例
```

#### 拦截加密的Client Random
接下来，我们需要拦截包含加密的Client Random的消息。该消息如下所示：

```
From client:
00000000: 03 00 01 1F 02 F0 80 64 00 08 03 EB 70 81 10 01 .......d....p...
00000010: 02 00 00 08 01 00 00 DD 8A 43 35 DD 1A 12 99 44 .........C5....D
00000020: A1 3E F5 38 5C DB 3F 3F 40 D1 ED C4 A9 3B 60 6A .>.8.??@....;`j
00000030: A6 10 5A AF FD 17 7A 21 43 69 D0 F8 9B F1 21 A3 ..Z...z!Ci....!.
00000040: F1 49 C6 80 96 03 62 BF 43 54 9D 38 4D 68 75 8C .I....b.CT.8Mhu.
00000050: EA A1 69 23 2F F6 E9 3B E7 E0 48 A1 B8 6B E2 D7 ..i#/..;..H..k..
00000060: E2 49 B1 B2 1B BF BA D9 65 0B 34 5A B0 10 73 6E .I......e.4Z..sn
00000070: 4F 15 FA D7 04 CA 5C E5 E2 87 87 ED 55 0F 00 45 O..........U..E
00000080: 65 2C C6 1A 4C 09 6F 27 44 54 FE B6 02 1C BA 9F e,..L.o'DT......
00000090: 3B D8 D0 8D A5 E6 93 45 0C 9B 68 36 5C 93 16 79 ;......E..h6..y
000000A0: 0B B8 19 BF 88 08 5D AC 19 85 7C BB AA 66 C4 D9 ......]...|..f..
000000B0: 8E C3 11 ED F3 8D 27 60 8A 08 E0 B1 20 1D 08 9A ......'`.... ...
000000C0: 97 44 6D 33 23 0E 5C 73 D4 02 4C 20 97 5C C9 F6 .Dm3#.s..L ...
000000D0: 6D 31 B2 70 35 39 37 A4 C2 52 62 C7 5A 69 54 44 m1.p597..Rb.ZiTD
000000E0: 4C 4A 75 D2 63 CC 52 15 8F 6E 2A D8 0D 61 A5 0A LJu.c.R..n*..a..
000000F0: 47 5B 2A 68 97 7B 1B FF D3 33 10 49 15 9A D6 2C G[*h.{...3.I...,
00000100: DF 04 6D 93 21 78 32 98 8B 0B F4 01 33 FB CC 5B ..m.!x2.....3..[
00000110: 83 BA 2D 7F EA 82 3B 00 00 00 00 00 00 00 00 ..-...;........
```

其中，高亮显示的部分是加密的Client Random，其长度为0x0108（四个字节）。

#### 解密和重新加密
由于该消息使用我们的证书进行了加密，因此我们可以轻松解密并重新使用服务器的公钥进行加密。解密后的Client Random如下所示：

```
00000000: 4bbd f97d 49b6 8996 ec45 0ce0 36e3 d170 K..}I....E..6..p
00000010: 65a8 f962 f487 5f27 cd1f 294b 2630 74e4 e..b.._'..)K&0t.
```

#### 提取会话密钥
尽管我们现在知道了Client Random，但微软并没有直接将其用作对称密钥。通过一个精心设计的程序[6]，我们可以导出客户端和服务器的加密密钥以及签名密钥。

#### RC4流初始化
提取会话密钥后，我们可以初始化RC4流的S-box。RDP协议使用两个不同的S-box分别处理来自客户端和服务器的消息。S-box是一个256字节的数组，根据密钥进行重排，生成伪随机数流与数据流进行异或操作。以下是相关的Python代码示例：

```python
# Python代码示例
```

协议要求每加密4096个数据包后更新密钥，但在这里我们不实现这一点，因为我们只关注概念验证。

#### 键盘输入事件解析
现在，我们可以读取所有流量，并特别关注键盘输入事件（按键和按键释放）。根据规范[12]，消息可以包含多个数据包，分为慢路径包（从0x03开始）和快路径包（第一个字节可被四整除）。

例如，键盘输入事件由两个字节组成：

```
1 00000000: 01 1F ..
```

这表示“S”键（0x1F）已被释放（因为第一个字节是0x01）。

需要注意的是，这里的解析工作并不完善，有时鼠标移动事件会被误识别为键盘事件。此外，扫描码需要转换为虚拟键代码，这取决于键盘类型和布局。为了简化，我们采用了参考资料[14]中的方法。

#### 实验结果
连接到我们的虚假RDP服务器后，用户会收到无法验证服务器身份的警告。但这不是SSL警告。此时，我们可以看到用户的按键信息（见图5）。

**攻陷增强型RDP安全协议**
降级到标准RDP安全协议并不理想。作为攻击者，我们希望攻击看起来更加隐蔽。如果用户看到不同于平常的警告，他们可能会怀疑连接的安全性。

因此，我们尝试将连接降级为增强型RDP安全协议。为此，我们需要自签名的SSL证书，可以通过OpenSSL生成：

```sh
$ openssl req -new -newkey rsa:"$KEYLENGTH" -days "$DAYS" -nodes -x509 \
-subj "$SUBJ" -keyout privatekey.key -out certificate.crt 2> /dev/null
```

我们需要在正确的时间将Python TCP套接字封装到SSL套接字中。标准RDP协议使用SSL隧道，但服务器总是选择“None”作为其加密级别。这使得我们可以假设SSL封装器能确保数据的真实性和完整性。

唯一多出来的安全功能是服务器会对原始协议协商请求进行确认。建立SSL连接后，服务器会向客户端发送确认消息：

```
From server:
00000000: 03 00 00 70 02 F0 80 7F 66 66 0A 01 00 02 01 00 ...p....ff......
00000010: 30 1A 02 01 22 02 01 03 02 01 00 02 01 01 02 01 0..."...........
00000020: 00 02 01 01 02 03 00 FF F8 02 01 02 04 42 00 05 .............B..
00000030: 00 14 7C 00 01 2A 14 76 0A 01 01 00 01 C0 00 4D ..|..*.v.......M
00000040: 63 44 6E 2C 01 0C 10 00 04 00 08 00 01 00 00 00 cDn,............
00000050: 01 00 00 00 03 0C 10 00 EB 03 04 00 EC 03 ED 03 ................
00000060: EE 03 EF 03 02 0C 0C 00 00 00 00 00 00 00 00 00 ................
```

客户端可以将该值与最初发送的值进行比较，如果不匹配则终止连接。作为中间人，我们可以通过替换相应字节来隐藏伪协商请求。

**突破CredSSP协议**
最后，我们尝试绕过CredSSP协议。如果不降低连接的安全等级，发送到服务器的相关消息如下所示：

```
From client:
00000000: 30 82 02 85 A0 03 02 01 04 A1 82 01 DA 30 82 01 0............0..
00000010: D6 30 82 01 D2 A0 82 01 CE 04 82 01 CA 4E 54 4C .0...........NTL
00000020: 4D 53 53 50 00 03 00 00 00 18 00 18 00 74 00 00 MSSP.........t..
00000030: 00 2E 01 2E 01 8C 00 00 00 08 00 08 00 58 00 00 .............X..
00000040: 00 0A 00 0A 00 60 00 00 00 0A 00 0A 00 6A 00 00 .....`.......j..
00000050: 00 10 00 10 00 BA 01 00 00 35 82 88 E2 0A 00 39 .........5.....9
00000060: 38 00 00 00 0F 6D 49 C4 55 46 C0 67 E4 B4 5D 86 8....mI.UF.g..].
00000070: 8A FC 3B 59 94 52 00 44 00 31 00 34 00 55 00 73 ..;Y.R.D.1.4.U.s
00000080: 00 65 00 72 00 31 00 57 00 49 00 4E 00 31 00 30 .e.r.1.W.I.N.1.0
00000090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
000000A0: 00 00 00 00 00 00 00 00 00 11 0D 65 8E 92 7F 07 ...........e....
000000B0: 7B 04 02 04 0C C1 A6 B6 EF 01 01 00 00 00 00 00 {...............
000000C0: 00 D5 FD A8 7C EC 95 D2 01 A7 55 9D 44 F4 31 84 ....|.....U.D.1.
```

通过以上步骤，我们可以成功绕过CredSSP协议并监听所有流量。