375
3.1 Review of the Chatterjee and Sarkar’s
mIB-KEM
Let G and GT be groups of prime order p, and let e :
It selects a random α ∈ Z∗
G × G → GT be the bilinear map.
Setup(1k, n): The algorithm picks a random generator
g ∈ G.
p and sets g1 = gα.
It picks random elements g2, g3 ∈ G and a random vector
(cid:126)U = (u1, . . . , ua) with entries in G. The public parameters
PP (with the description of (G, GT , e, p)) and the master
key MK are given by
PP = (g, g1, g2, g3, (cid:126)U , H),
MK = gα
2
p → {1, . . . , a}.
where H is a publicly computable surjective function such
that H : Z∗
KeyGen(ID, MK, PP): Given an identity ID ∈ Z∗
p, the al-
gorithm computes H(ID) = v where 1 ≤ v ≤ a. It picks a
random r ∈ Zp and output
dID = ( gα
2 · (g3 · uID
v )r, gr,
ur
1, . . . , ur
v−1, ur
v+1, . . . , ur
a ) ∈ Ga+1.
Encapsulate(S, PP): A sender chooses a random s ∈ Zp
and sets K = e(g1, g2)s ∈ GT . Next, the sender partitions
the set S into subsets in the following manner.
Let H(S) = {j1, . . . , jk} be the set of distinct indices ob-
tained by applying the function H to the elements in S. For
i = 1, . . . , k, let {si,1, . . . , si,τi} be the subset of all elements
in S which map to ji. Let τ = max1≤i≤k(τi). We view S
as a k × τ matrix having entries si,j where 1 ≤ i ≤ k and
1 ≤ j ≤ τi. For 1 ≤ j ≤ τ , deﬁne the set Sj to be the
j-th column of this matrix. Then S is a disjoint union of
S1, . . . , Sτ and for all j, we have |Sj| = |H(Sj)| (it means H
is injective on Sj).
Then, the sender sets the header as
Hdr = ( (g3 · ΠID∈S1 (uH(ID))ID)s, . . . ,
(g3 · ΠID∈Sτ (uH(ID))ID)s, gs ) ∈ Gτ +1.
The sender broadcasts (S1, . . . , Sτ , Hdr, CM ), where CM is
an encrypted message under the K using a symmetric key
cipher.
Decapsulate(dID, S, Hdr): Let Hdr = (A1, . . . , Aτ , B). As-
sume a receiver with identity ID belongs to the subset Sj and
H(ID) = v. To decrypt the Hdr, it is suﬃcient for him to
obtain (Sj, Aj, B) where ID ∈ Sj. The receiver decrypts the
Hdr using his private key dID = (dID,1, dID,2, kID,1, . . . , kID,v−1,
kID,v+1, . . . , kID,a) as follows:
K = e(dID,1 · Π ID(cid:48)∈Sj
ID(cid:48)(cid:54)=ID
(kID,H(ID(cid:48)))ID(cid:48)
, B) / e(Aj, dID,2).
Correctness of the decapsulation above, which we omit
here, can be showed by the similar calculation to that of
Section 4.1.
3.2 Security Analysis
We describe how a revoked user can decrypt the Hdr suc-
cessfully. Let ID(cid:48) be the identity of a revoked user. Let
S1, S2 be the subsets of receivers such that ID1 ∈ S1 and
ID2 ∈ S2. From the partition of the receiver set, we can
assume the case where H(ID1) = H(ID2) = H(ID(cid:48)) = v, be-
p → {1, . . . , a} is surjective. Then,
cause the function H : Z∗
the A1 and A2 elements in the Hdr = (A1, A2, . . . , Aτ , B)
are constructed as
A1 = (g3 ··· uID1
v
··· )s,
A2 = (g3 ··· uID2
v
··· )s
for some (unknown) s ∈ Zp. Let l = (ID1−ID(cid:48))/(ID(cid:48)−ID2) ∈
p, which is computable since ID(cid:48) (cid:54)= ID1 and ID(cid:48) (cid:54)= ID2. The
Z∗
revoked user then computes A(cid:48) = (A1Al
2)1/(l+1) where (l+1)
would become zero with negligible probability. Observe that
(cid:48)
A
··· )s/(l+1)
v
v
· gl
3 ··· uID2·l
··· uID1+ID2·l
= (g3 ··· uID1
= (gl+1
= (g3 ··· u(ID1+ID2·l)/(l+1)
= (g3 ··· uID(cid:48)
v ··· )s.
v
v
3
··· )s/(l+1)
··· )s
Since the set information about S1 and S2 is transmitted
along with the Hdr, the revoked user can easily know the
exponential value of each uk for k = 1, . . . , v − 1, v + 1, . . . , a
(if necessary). Recall that the private key for the revoked
user ID(cid:48) is
dID(cid:48) = ( gα
which can be used to decrypt the Hdr using the elements
(A(cid:48), B), where B is the element in the Hdr.
We consider the simpler case where H(ID1) = H(ID(cid:48)) = v.
2 · (g3 · uID(cid:48)
v )r, gr, ur
v+1, . . . , ur
1, . . . , ur
v−1, ur
a )
Then, the A1 and A2 elements are computed as
A1 = (g3 ··· uID1
v
··· )s,
A2 = (g3 ··· uID3
v−1 · uID4
v+1 ··· )s
for some identities ID3, ID4 ∈ S2. (Here, the A2 could be
constructed diﬀerently, but the important point is that S2
does not include an identity ID ∈ Z∗
p such that H(ID) =
H(ID(cid:48)) = v.) In this case, let l(cid:48) = (ID1 − ID(cid:48))/ID(cid:48) ∈ Zp.
The revoked user computes A(cid:48)(cid:48) = (A1Al(cid:48)
2 )1/(l(cid:48)+1). By the
similar calculation to that above, we can see that A(cid:48)(cid:48) =
(g3 ··· uID(cid:48)
v ··· )s for some unknown s ∈ Zp. This allows the
revoked user to decrypt the Hdr successfully.
In [12], the authors focused only on the impossibility of re-
voked users for building a private key suitable for decryption.
However, the observation above shows that a revoked user
could generate a valid component of the Hdr, and success-
fully recover the message encryption key, given that there is
some possible collision of the function H. As shown in the
above analysis, this is because the same element g3 is used
for all the partitioned subsets. Thus, in order to avoid such
an attack, one natural solution is to use diﬀerent elements
for each subset. We will present this solution in the next
section.
Chatterjee and Sarkar [12] suggested a CCA-secure mIB-
KEM which is based on the CPA-secure scheme. Unfortu-
nately, we can show the resulting scheme is also insecure
against the attacks described above in the same manner.
4. CPA-SECURE MIB-KEM
In this section we present a new CPA-secure mIB-KEM
which overcomes the security leak identiﬁed in the previous
section. The crux of our method is to use diﬀerent elements
associated with subsets of receivers, which can prevent such
attacks from occurring. To relate an identity to one of these
additional elements, we need another publicly computable
surjective function, denoted by H1 here.
As opposed to the previous scheme [12], our construction
imposes a priori maximum number n of receivers as the in-
put of Setup algorithm. For now, we assume identities are
elements of Z∗
p, but as noted in [4] we can extend the domain
to all of {0, 1}∗ by hashing each identity ID using a collision
resistant hash function H : {0, 1}∗ → Z∗
p. Note that De-
capsulate algorithm below does not require any elements
of public parameters as input.
4.1 Scheme
G × G → GT be the bilinear map.
Setup(1k, n): The algorithm picks a random generator g ∈
G. It selects a random α ∈ Z∗
p and sets g1 = gα. It picks
random elements x0, x1, . . . , xa, y1, . . . , yb ∈ G. The public
parameters PP (with the description of (G, GT , e, p)) and
the master key MK are given by
Let G and GT be groups of prime order p, and let e :
PP = (g, g1, x0, x1, . . . , xa, y1, . . . , yb, H1, H2),
MK = α
p → {1, . . . , a} and H2 : Z∗
where H1 and H2 are publicly computable surjective func-
p →
tions such that H1 : Z∗
{1, . . . , b}.
KeyGen(ID, MK, PP): Given an identity ID ∈ Z∗
p, the algo-
rithm ﬁnds two values u, v (where 1 ≤ u ≤ a and 1 ≤ v ≤ b)
such that H1(ID) = u and H2(ID) = v.
If there already
exists an identity ID(cid:48) ∈ Z∗
p such that H1(ID(cid:48)) = u and
H2(ID(cid:48)) = v, the KGC aborts. Otherwise, it picks a ran-
dom r ∈ Zp and set the private key for ID as
dID = ( xα
0 · (xu · yID
v )r, gr,
yr
1, . . . , yr
v−1, yr
v+1, . . . , yr
b ) ∈ Gb+1.
Encapsulate(S, PP): A sender chooses a random s ∈ Zp
and set K = e(x0, g1)s ∈ GT . Wlog, we can assume the set
S is divided into subsets S1, . . . , Sa after computing H1(ID)
and H2(ID) for ID ∈ S. Then, for all ID ∈ Si, we have
H1(ID) = i. Set the header as
Hdr = ( (x1 · ΠID∈S1 (yH2(ID))ID)s, . . . ,
(xa · ΠID∈Sa (yH2(ID))ID)s, gs ) ∈ Ga+1.
The algorithm outputs the pair (Hdr, K). Then, the sender
broadcasts (S, Hdr, CM ), where CM is an encrypted message
under the K using a symmetric key cipher.
Decapsulate(dID, S, Hdr): Assume a receiver with iden-
tity ID is assigned to index u, v such that H1(ID) = u and
H2(ID) = v. The receiver decrypts the Hdr using his private
key dID = (dID,1, dID,2, kID,1, . . . , kID,v−1, kID,v+1, . . . , kID,b).
Let Hdr = (A1, . . . , Aa, B). Then, output
K = e(dID,1 · Π ID(cid:48)∈Su
ID(cid:48)(cid:54)=ID
(kID,H2(ID(cid:48)))ID(cid:48)
, B) / e(Au, dID,2).
Correctness: Assuming the Hdr is well-formed, the cor-
rectness of the decapsulation is checked as follows:
K = e(dID,1 · Π ID(cid:48)∈Su
ID(cid:48)(cid:54)=ID
0 · (xu · yID
= e(xα
(kID,H2(ID(cid:48)))ID(cid:48)
v )r · Π ID(cid:48)∈Su
ID(cid:48)(cid:54)=ID
, B) / e(Au, dID,2)
H2(ID(cid:48)))ID(cid:48)
(yr
, gs) /
= e(xα
0 · (xu · ΠID(cid:48)∈Su (yH2(ID(cid:48)))ID(cid:48)
e((xu · ΠID(cid:48)∈Su (yH2(ID(cid:48)))ID(cid:48)
)r, gs) /
e((xu · ΠID(cid:48)∈Su (yH2(ID(cid:48)))ID(cid:48)
)s, gr)
)s, gr)
= e(x0, g1)s.
376
Remark: As stated in [12], the outputs of two surjective
functions H1 and H2 are expected to be uniformly dis-
tributed, so that the entire elements of xi and yj could be
used. However, H1 and H2 do not act as random oracles in
our security proofs.
4.2 Security
The CPA-security of the mIB-KEM above is proven under
the decision (b + 1)-BDHE assumption.
Theorem 1. Suppose that the decision (t, , b + 1)-BDHE
assumption holds in G. Then the previous mIB-KEM is
(t(cid:48), , n, qID)-CPA-secure in the sID security model for any
positive integers n, b and t(cid:48) < t − Θ(τ bn), where τ is the
maximum time for an exponentiation in G.
Proof. Suppose there exists an adversary A which has
advantage  in attacking the mIB-KEM. We want to build
an algorithm B that uses A to solve the decision (b + 1)-
BDHE problem in G. For a generator g ∈ G and α ∈ Zp, let
gi = g(αi) ∈ G. On input (z, g, g1, . . . , gb, gb+2, . . . , g2b, T ),
B outputs 1 if T = e(z, gb+1) and 0 otherwise. B works by
interacting with A as follows:
Init: A outputs a set S∗ that it intends to attack.
Setup: After deciding two publicly computable surjective
p → {1, . . . , b},
functions H1 : Z∗
B divides the challenge set S∗ into subsets S∗
It
depends on the values H1(ID) and H2(ID) for ID ∈ S∗. Next,
B selects a random ρ ∈ Zp and set x0 = gb · gρ. It also picks
random γ1, . . . , γb, δ1, . . . , δa ∈ Zp.
It sets yi = gγi gi for
i = 1, . . . , b and sets xj = gδj · (ΠID∈S∗
(gH2(ID))ID)−1 for
j = 1, . . . , a. Finally, B gives A the public parameters
p → {1, . . . , a} and H2 : Z∗
1, . . . , S∗
a.
j
PP = ( g, g1, x0, x1, . . . , xa, y1, . . . , yb, H1, H2 ).
Since ρ,{γi}, and {δj} values are chosen uniformly at ran-
dom, this public key has an identical distribution to that in
the actual construction.
Phase 1: B needs to generate private keys dID for ID /∈ S∗.
Consider a private key for ID such that H1(ID) = u and
H2(ID) = v. Wlog, we can assume the pair (u, v) does not
belong to the set {(H1(ID), H2(ID)) : ID ∈ S∗}. B picks a
random r ∈ Zp. Let r(cid:48) = r − α(b+1−v)/ ID. (Recall that
ID ∈ Z∗
p) B generates the private key dID for ID as
0 · (xu · yID
v+1, . . . , yr(cid:48)
b )
1 , . . . , yr(cid:48)
v−1, yr(cid:48)
, yr(cid:48)
, gr(cid:48)
v )r(cid:48)
( xα
which is a properly distributed private key for ID due to
the randomness r. We show that B can compute all com-