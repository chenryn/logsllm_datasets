# AFLGo 分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0\. Directed fuzzing
**Directed fuzzing** 可以翻译为定向模糊测试，导向型模糊测试，是灰盒模糊测试中的一种。传统的覆盖率引导的模糊测试 (Coverage-guided fuzzing)
是期望覆盖到更多的代码，所以是以覆盖率的增加作为引导。而在某些场景下，例如对patch进行测试，此时，传统的基于覆盖率的模糊测试那种盲目探索的方式不能满足快速到达特定目标点的需求。
所以，基于上述的场景，提出了 directed fuzzing ，导向型模糊测试是有特定目标的，希望能够快速覆盖到使用者期望到达的目标点。所以需要对
fuzzing 进行引导，忽略其余不相关的部分，使得 fuzzer 朝着目标点探索。
## 1\. AFLGo论文
2017年，Directed fuzzing这个概念在 B¨ohme等人的论文 _Directed Greybox Fuzzing_
中第一次被提出，文章开源了一个名为 [AFLGo](https://github.com/aflgo/aflgo "AFLGo Github URL")
的工具，是在 AFL 的基础上，实现了一个可以快速到达指定目标点的模糊测试工具。后续出现的 Directed fuzzing，基本都无法完全脱离 AFLGo
的方法，可以说，AFLGo 开创了导向型模糊测试的先河。
###  1.1 概述
AFLGo的流程如下图：
1.首先，编译源码，得到待 fuzz 程序的控制流图 (Control Flow Graph, CFG) 和函数调用图 (Call Graph, CG)
。这一步由AFL中作者编写的 LLVM Pass 完成。
2.其次，通过 CFG 和 CG，以及给定的 target，计算所有的基本块 (Basic Block, BB) 到 target 所在的基本块的
**距离** 。这一步由 python 脚本完成。
3.然后，再编译一次源码，对程序进行插桩，除了AFL原有的插桩逻辑外，添加向指定地址增加每个基本块距离的指令，即指定一个共享内存地址为记录 distance
的变量，在基本块中插桩，插入如下指令：distance += current_BB_distance，向 distance 变量增加当前基本块的距离。
4.最后是 fuzzing 部分的逻辑，根据插桩反馈的信息，我们可以在每一个 seed 作为输入给程序执行的时候得到这个 seed 对应的
distance，也就是 seed 执行路径距离目标点的距离，然后根据距离对 seed
进行打分，这个打分的算法就是模拟退火算法，距离越近，打分越高，seed 得到变异的机会越多。
至此，整个 AFLGo 的流程结束。
###  1.2 距离计算
AFLGO 首先根据 CG 计算 **函数层面 (function-level)** 的距离，然后基于 CFG 计算 **基本块层面 (basic-block level)** 的距离，最后将基本块的距离作为插桩时使用的距离。
因为 AFLGo 支持标记多个目标，所以在距离计算时需要将每个基本块到多个目标的距离做一个加和，这里采用的是对到每个目标的距离和取 **调和平均数** 。
为什么不取算术平均数？因为在多目标的情况下，算术平均数无法区分‘一个基本块离一个目标近一个目标远’和‘一个基本块离两个目标点距离相等’的情况。
如下图，当目标为Y1和Y2时，三个白色基本块都可以到达这两个灰色的目标点。当用算术平均数计算时，左右分别到两个目标点的距离是1和3，平均下来就是(1+3)
/ 2=
2。而最上面的点到两个目标的距离都是2，平均下来也是2，这样三个点距离都是2，区分不出到哪个点距离近。如果取调和平均数，左右两个点距离都是是3/4，最上面的点距离是1，这样就能区分出远近了。
**1.2.1 函数层面距离计算**
目标基本块所在的函数就是目标函数。
公式看起来比较复杂，其实就是两句话：
1.当该函数不能到达任意一个目标函数(即：CG上该函数没有路径能到达目标函数)时，不定义距离
2.否则，将该函数能够到达的目标函数之间的 **最短距离** 取调和平均数
**1.2.2 基本块层面距离计算**
有了函数层面的距离，再计算更加细的基本块距离，规则如下：
1.当基本块就是目标基本块时，该基本块的距离为0
2.当前基本块存在函数调用链可以到达目标函数时，距离为该基本块中调用的函数集和中，‘距离目标函数最近的路径距离’乘上一个系数
3.否则，距离为‘有能到达目标基本块的后继基本块时，取当前基本块到后继基本块距离’ + ‘该后继基本块到目标基本块的距离’，取到所有目标的调和平均数
###  1.3 模拟退火算法
公式也很复杂，但这里只讲算法的作用：模拟退火算法是为了解决 **探索-利用 (exploration-exploitation)** 的问题。
在fuzzing的前期，因为探索到的路径有限，此时离目标点的距离可能还很远，此时重点在探索，即尽可能扩大覆盖率，当覆盖率到一定程度时，再利用距离较近的seed来变异，此时到达目标点的可能性更大。
如果在距离还很远的时候，就只针对当前距离最近的seed进行变异，虽然当前seed距离是相对最近的，但是在绝对距离上可能还很远，无论怎么fuzzing，到达目标点的可能性就很小，这样就可能会陷入
**局部最优** 的困境中。
模拟退火算法就是为了避免uzzing陷入局部最优的困境中的方法。
AFL中有一个环节叫 power scheduling，即对 seed 进行打分，综合各项指标计算分数，这个分数直接影响到对每个 seed 进行
fuzzing 的时间长度。
而 AFLGo 在 power scheduling 部分加上模拟退火算法，同时以时间和距离来计算分数。当时间越长，距离越近的 seed 得分越高，能够得到
fuzzing 的时间越长。
## 2\. 源码分析
这一节我们按照 workflow，对照源码进行分析。
###  2.1 预处理阶段
以 AFLGo `README` 中例子为例，首先是第一次编译，输入程序源码，输出 CG 和 CFG。
    # Set aflgo-instrumenter
    export CC=$AFLGO/afl-clang-fast
    export CXX=$AFLGO/afl-clang-fast++
    # Set aflgo-instrumentation flags
    export COPY_CFLAGS=$CFLAGS
    export COPY_CXXFLAGS=$CXXFLAGS
    export ADDITIONAL="-targets=$TMP_DIR/BBtargets.txt -outdir=$TMP_DIR -flto -fuse-ld=gold -Wl,-plugin-opt=save-temps"
    export CFLAGS="$CFLAGS $ADDITIONAL"
    export CXXFLAGS="$CXXFLAGS $ADDITIONAL"
    # Build libxml2 (in order to generate CG and CFGs).
    # Meanwhile go have a coffee ☕️
    export LDFLAGS=-lpthread
    pushd $SUBJECT
      ./autogen.sh
      ./configure --disable-shared
      make clean
      make xmllint
    popd
与 AFL 不一样的地方在于，需要多传入3个编译选项`-targets=$TMP_DIR/BBtargets.txt -outdir=$TMP_DIR
-flto -fuse-ld=gold -Wl,-plugin-opt=save-temps"`。
`-target`传入的是目标点位置文件，`-outdir`传入的是 graph 导出的目录。
最后的`-flto -fuse-ld=gold -Wl,-plugin-opt=save-temps`是开启 llvm link time
optimization 选项，是在链接阶段进行模块间的优化，`-Wl,-plugin-opt=save-temps`选项是为了保存下整个程序的`.bc`文件，便于之后生成
CG。这一步需要`libLTO.so`和`LLVMgold.so`两个动态库，所以编译前需要保证这两个`.so`文件在`/usr/lib/bfd-plugins`目录下。
* * *
第一次编译的主要处理代码在`llvm_mode/afl-llvm-pass.so.cc`文件中，该文件是 llvm 的 pass 插件文件，编译后作为
llvm 的插件，在编译时自动加载运行。
主程序的逻辑都在`AFLCoverage::runOnModule`函数中。
    bool AFLCoverage::runOnModule(Module &M) {
      bool is_aflgo = false;
      bool is_aflgo_preprocessing = false;
      /* 判断目标文件和距离文件是否同时声明，因为这是第一次编译和第二次编译两个阶段分别需要的文件
      不可以同时声明。
      */
      if (!TargetsFile.empty() && !DistanceFile.empty()) {
        FATAL("Cannot specify both '-targets' and '-distance'!");
        return false;
      }
      std::list targets; // 存储目标点的list
      std::map bb_to_dis; // 存储基本块和对应距离的map
      std::vector basic_blocks; // 存储基本块名字的vector
      /* 当目标文件不为空时，说明是第一次编译阶段。
      */
      if (!TargetsFile.empty()) {
        /* 检查输出文件目录是否为空
        */
        if (OutDirectory.empty()) {
          FATAL("Provide output directory '-outdir '");
          return false;
        }
        /* 按行读取目标点文件，存储到target中，然后置flag，表示为preprocessing阶段
        */
        std::ifstream targetsfile(TargetsFile);
        std::string line;
        while (std::getline(targetsfile, line))
          targets.push_back(line);
        targetsfile.close();
        is_aflgo_preprocessing = true;
      } else if (!DistanceFile.empty()) {
          ...
      }
这里接收命令行参数的变量为`TargetsFile`和`OutDirectory`，以及第二次编译接收距离文件的变量`DistanceFile`，定义为
    cl::opt DistanceFile(
        "distance",
        cl::desc("Distance file containing the distance of each basic block to the provided targets."),
        cl::value_desc("filename")
    );
    cl::opt TargetsFile(
        "targets",
        cl::desc("Input file containing the target lines of code."),
        cl::value_desc("targets"));
    cl::opt OutDirectory(
        "outdir",
        cl::desc("Output directory where Ftargets.txt, Fnames.txt, and BBnames.txt are generated."),
        cl::value_desc("outdir"));
这是 llvm 提供的 commandline
library，方便解析命令行参数。这里有一个小tips，因为`cl::opt`类默认是只允许不出现或者出现一次声明，但经过实践发现在编译一些程序库的时候，因为不太清楚这些库的
makefile
是怎么写的，很容易出现对编译选项的重复声明，为了方便，建议这里定义时加上`cl::ZeroOrMore`，这样即使重复，也不会报错，编译选项的值取最后一次声明。
AFLGo 还需要修改的地方是`llvm_mode/afl-clang-fast.c`中，需要加上以下代码才能让 AFL 的 clang wrapper
能够识别添加的编译选项
        if (!strncmp(cur, "-distance", 9)
            || !strncmp(cur, "-targets", 8)
            || !strncmp(cur, "-outdir", 7))
          cc_params[cc_par_cnt++] = "-mllvm";
参考来自[文档](https://llvm.org/docs/CommandLine.html)：
> The allowed values for this option group are:
>
>   * The **cl::Optional** modifier (which is the default for the
> [cl::opt](https://llvm.org/docs/CommandLine.html#cl-opt) and
> [cl::alias](https://llvm.org/docs/CommandLine.html#cl-alias) classes)
> indicates that your program will allow either zero or one occurrence of the
> option to be specified.
>   * The **cl::ZeroOrMore** modifier (which is the default for the
> [cl::list](https://llvm.org/docs/CommandLine.html#cl-list) class) indicates
> that your program will allow the option to be specified zero or more times.
>   * The **cl::Required** modifier indicates that the specified option must
> be specified exactly one time.
>   * The **cl::OneOrMore** modifier indicates that the option must be
> specified at least one time.
>   * The **cl::ConsumeAfter** modifier is described in the [Positional
> arguments section](https://llvm.org/docs/CommandLine.html#positional-> arguments-section).
>
接下来是运行时的提示 banner 和 AFL 本身的插桩比例，没什么重要点
      /* Show a banner */
      char be_quiet = 0;
      if (isatty(2) && !getenv("AFL_QUIET")) {
        if (is_aflgo || is_aflgo_preprocessing)
          SAYF(cCYA "aflgo-llvm-pass (yeah!) " cBRI VERSION cRST " (%s mode)\n",
               (is_aflgo_preprocessing ? "preprocessing" : "distance instrumentation"));
        else
          SAYF(cCYA "afl-llvm-pass " cBRI VERSION cRST " by \n");
      } else be_quiet = 1;
      /* Decide instrumentation ratio */
      char* inst_ratio_str = getenv("AFL_INST_RATIO");
      unsigned int inst_ratio = 100;
      if (inst_ratio_str) {
        if (sscanf(inst_ratio_str, "%u", &inst_ratio) != 1 || !inst_ratio ||
            inst_ratio > 100)
          FATAL("Bad value of AFL_INST_RATIO (must be between 1 and 100)");
      }
但 AFLGo 也仿照 AFL
做了插桩比例的选择，即如果声明了`AFLGO_SELECTIVE`环境变量以及`AFLGO_INST_RATIO`，`AFLGO_INST_RATIO`数值就是
AFlGo 的插桩百分比。
      /* Default: Not selective */
      char* is_selective_str = getenv("AFLGO_SELECTIVE");
      unsigned int is_selective = 0;
      if (is_selective_str && sscanf(is_selective_str, "%u", &is_selective) != 1)
        FATAL("Bad value of AFLGO_SELECTIVE (must be 0 or 1)");
      char* dinst_ratio_str = getenv("AFLGO_INST_RATIO");
      unsigned int dinst_ratio = 100;
      if (dinst_ratio_str) {
        if (sscanf(dinst_ratio_str, "%u", &dinst_ratio) != 1 || !dinst_ratio ||
            dinst_ratio > 100)
          FATAL("Bad value of AFLGO_INST_RATIO (must be between 1 and 100)");
      }
然后进入到 preprocessing 阶段
      if (is_aflgo_preprocessing) {
        std::ofstream bbnames(OutDirectory + "/BBnames.txt", std::ofstream::out | std::ofstream::app); // 记录基本块名字文件
        std::ofstream bbcalls(OutDirectory + "/BBcalls.txt", std::ofstream::out | std::ofstream::app); // 记录callsite文件，格式为[基本块，函数名]
        std::ofstream fnames(OutDirectory + "/Fnames.txt", std::ofstream::out | std::ofstream::app); // 记录函数名文件
        std::ofstream ftargets(OutDirectory + "/Ftargets.txt", std::ofstream::out | std::ofstream::app); // 记录目标基本块所在函数名文件
        /* Create dot-files directory */
        std::string dotfiles(OutDirectory + "/dot-files");
        if (sys::fs::create_directory(dotfiles)) {