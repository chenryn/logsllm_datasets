title:Result Pattern Hiding Searchable Encryption for Conjunctive Queries
author:Shangqi Lai and
Sikhar Patranabis and
Amin Sakzad and
Joseph K. Liu and
Debdeep Mukhopadhyay and
Ron Steinfeld and
Shifeng Sun and
Dongxi Liu and
Cong Zuo
Result Pattern Hiding Searchable Encryption for Conjunctive
Queries
(Full Version)
Shangqi Lai∗
Monash University
Melbourne, Australia
PI:EMAIL
Joseph K. Liu†
Monash University
Melbourne, Australia
PI:EMAIL
Shi-Feng Sun∗†
Monash University
Melbourne, Australia
PI:EMAIL
Sikhar Patranabis
Indian Institute of Technology
Kharagpur, India
PI:EMAIL
Debdeep Mukhopadhyay
Indian Institute of Technology
Kharagpur, India
PI:EMAIL
Dongxi Liu
Data61, CSIRO
Syndey, Australia
PI:EMAIL
Amin Sakzad
Monash University
Melbourne, Australia
PI:EMAIL
Ron Steinfeld
Monash University
Melbourne, Australia
PI:EMAIL
Cong Zuo∗
Monash University
Melbourne, Australia
PI:EMAIL
ABSTRACT
The recently proposed Oblivious Cross-Tags (OXT) protocol (CRYP-
TO 2013) has broken new ground in designing efficient searchable
symmetric encryption (SSE) protocol with support for conjunctive
keyword search in a single-writer single-reader framework. While
the OXT protocol offers high performance by adopting a number
of specialised data-structures, it also trades-off security by leaking
‘partial’ database information to the server. Recent attacks have
exploited similar partial information leakage to breach database
confidentiality. Consequently, it is an open problem to design SSE
protocols that plug such leakages while retaining similar efficiency.
In this paper, we propose a new SSE protocol, called Hidden Cross-
Tags (HXT), that removes ‘Keyword Pair Result Pattern’ (KPRP)
leakage for conjunctive keyword search. We avoid this leakage by
adopting two additional cryptographic primitives - Hidden Vector
Encryption (HVE) and probabilistic (Bloom filter) indexing into the
HXT protocol. We propose a ‘lightweight’ HVE scheme that only
uses efficient symmetric-key building blocks, and entirely avoids
elliptic curve-based operations. At the same time, it affords selective
simulation-security against an unbounded number of secret-key
queries. Adopting this efficient HVE scheme, the overall practical
storage and computational overheads of HXT over OXT are rela-
tively small (no more than 10% for two keywords query, and 21%
for six keywords query), while providing a higher level of security.
∗Also with Data61, CSIRO, Melbourne, Australia.
†Corresponding authors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols; Man-
agement and querying of encrypted data;
KEYWORDS
Searchable Encryption, Hidden Vector Encryption, Leakage Profile
ACM Reference Format:
Shangqi Lai, Sikhar Patranabis, Amin Sakzad, Joseph K. Liu, Debdeep
Mukhopadhyay, Ron Steinfeld, Shi-Feng Sun, Dongxi Liu, and Cong Zuo.
2018. Result Pattern Hiding Searchable Encryption for Conjunctive Queries:
(Full Version). In 2018 ACM SIGSAC Conference on Computer and Communi-
cations Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM,
New York, NY, USA, 21 pages. https://doi.org/10.1145/3243734.3243753
1 INTRODUCTION
Privacy of stored data is important in many applications. Yet it
is becoming increasingly common for data to be hosted off-site,
especially with the rise of cloud computing. However, cloud storage
providers often cannot be trusted to respect the privacy of the data
they host [13], especially in the face of malicious insiders. A simple
solution is to encrypt the data before uploading it to the cloud.
However, this would prevent the data from being searched [28,
29]. For example, users may wish to use their mobile phone to
search their email. The cloud server will not be able to identify
which documents match the search query if the user’s email data is
encrypted using standard encryption techniques.
Searchable symmetric encryption (SSE) [11, 12, 16, 19, 22, 33, 35,
36] offers a potential solution to this problem by providing a way for
encrypted data to be searched securely. However, all SSE protocols
must have trade-off between security, performance, and function-
ality. The performance of SSE protocols is crucial in practice and
needs to be comparable to performance of search on unencrypted
databases in order to remain feasible for most practical applications.
Consequently, recent research has focused on high performance
SSE protocols that scale efficiently to large databases, by adapting
data structures used in efficient unencrypted database search to the
encrypted database setting. In particular, an efficient class of SSE
protocols [11, 12, 16, 19, 36] preprocessing the database using an
inverted-index to allow keyword searches to be performed in sub-
linear time, with a careful choice of encryption techniques applied
to the index to hide its contents and the queries from the server,
while allowing a flexible range of search queries. The benchmark
in this class of SSE protocols (supporting conjunctive queries) is
‘Oblivious Cross-Tags’ (OXT) [12]. Nevertheless, to achieve their
high performance, these protocols do trade-off security. In partic-
ular, they leak some ‘partial’ information to the server, both on
the queries themselves, as well as on the database contents. Recent
attacks [10, 25, 30, 39] have shown that such ‘partial’ leakages can
sometimes be exploited in practical applications, especially when
the attacker has available some auxiliary side information (which
may be obtained publicly in many cases). This state of affairs moti-
vates a re-examination of the security-efficiency trade-offs for SSE
protocols and raises the question:
Is it possible to reduce the leakage in existing state-of-the-art effi-
cient SSE protocols while preserving a practical level of performance?
In this paper, we make progress on this question. We focus,
like OXT, only on the setting of conjunctive keyword queries, since
such queries tend to be the most common in many practical appli-
cations. In this setting, queries consist of any number of keywords,
and the result consists of all documents containing all those key-
words.
Overview of OXT. To explain the main technical ideas behind
our construction, it is instructive to first briefly review the ‘TSet’
and ‘XSet’ data structures of OXT and how they are used to effi-
ciently process conjunction queries of the form w1 ∧ · · · ∧ wn. In
OXT, TSet is cryptographic data structure that associates a list of
fixed-length data tuples to each keyword in a database. It is an en-
crypted inverted index that enables the owner to issue correspond-
ing tokens to retrieve these lists related to the queried keywords.
In particular, the client sends the server a ‘search token’ (called an
stag) related to the keyword w1 (called the ‘s-term’ and denoted by
sterm), which allows the server to retrieve from the TSet, the set
DB(w1) of all database documents containing w1. In addition, the
client sends ‘intersection tokens’ (called ‘xtraps’) related to the n−1
keyword pairs (w1, wi) consisting of the ‘s-term’ paired with each
of the remaining query keywords wi, 2 ≤ i ≤ n (called ‘x-terms’).
The intersection tokens allow the server to filter the set DB(w1) to
determine the n − 1 subsets of documents DB(w1) ∩ DB(wi) that
contains the pairs (w1, wi), returning only those documents that
contain all {wi}1≤i ≤n. The intersection subsets DB(w1) ∩ DB(wi)
are efficiently computed by the server using the ‘XSet’ data struc-
ture; the ‘XSet’ is in essence a list of hashed pairs h(id, w), over all
database document identities id and keywords w contained in id,
where h is a certain (public) cryptographic hash function. To fil-
ter DB(w1) to compute DB(w1) ∩ DB(wi), the server runs through
each document id in DB(w1) and checks, using the xtrap token
for (w1, wi), whether h(id, wi) is in the XSet. Therefore, the server
computation time is dominated by |DB(w1)|(n − 1) evaluations of
h, which is proportional to just the number of database documents
containing the least frequent ‘s-term’ w1, even if other ‘xterm’ key-
words are much more common. However, this method also reveals
to the server the Keyword Pair Result Pattern (KPRP, called RP
in [12]), i.e. the partial result sets DB(w1) ∩ DB(wi) for each pair
(w1, wi).
Result Pattern (RP) Leakage in SSE protocols. Information
leakage in SSE protocols can be classified into three types: storage
leakage, query pattern leakage, and result pattern leakage. In this
paper, we focus on the third type of leakage, namely result pattern
leakage (RP), i.e. information leaked to the server on the query
results. Ideally, in the conjunctive query SSE context, result pattern
leakage would reveal only the Whole Result Pattern (WRP), i.e. the
number (and possibly also, identities) of documents matching all query
keywords. Leaking the WRP is in most SSE settings unavoidable,
as it would be leaked to the server via the document identities
retrieved by the client after the query (unless an ORAM or PIR
protocol is used, which currently seems impractical). But in OXT, RP
leakage is larger than the WRP ideally desired, and comes in three
forms: single keyword result pattern (SP) leakage, Keyword-Pair
Result Pattern (KPRP) leakage and multiple keyword cross-query
intersection result pattern (IP) leakage.
The KPRP leakage is a ‘non-ideal’ leakage related to multiple
keywords in each query. This reveals partial query results to the
database server; for an n keyword conjunction query w1 ∧· · ·∧ wn,
with w1 designated as the ‘s-term’ keyword, the KPRP reveals to
the server the set DB(w1)∩ DB(wi) of documents containing every
pair of query keywords of the form (w1, wi), 2 ≤ i ≤ n. This may
leak significantly more information on the inverted-index and/or
j=1DB(wj)
the query than what is leaked by WRP, which is the set ∩n
of documents matching all n query keywords.
The recent proposed file-injection attacks [39] have an adapted
version which exploits KPRP leakage in OXT to reveal all key-
words of a conjunctive queries with 100% accuracy. Thus, finding
an SSE protocol that eliminates KPRP leakage may be a feasible
way to mitigate such attack towards the conjunctive queries on the
inverted-index.
ℓ
Our Contributions. In this paper, we present the first efficient
SSE protocol, called ‘Hidden Cross-Tags’ (HXT) that eliminates
KPRP leakage presented in the state-of-the-art OXT protocol [12].
Our protocol removes the KPRP ‘partial query’ leakage component,
leaving in its place only the minimal (in our SSE context) and
significantly smaller WRP. Furthermore, it leaves other query and
result pattern leakage components in existing SSE protocols (i.e.
SP and IP) unchanged. Thus, in terms of security, our protocol
offers strictly better guarantees than OXT protocol, and is likely
to significantly reduce the rate of query pattern leakage to the
database server, as discussed above.
The improved security of our protocol as compared to OXT may
be attributed to the adoption of two additional cryptographic prim-
itives - namely, Hidden Vector Encryption (HVE) and probabilistic
(Bloom filter) indexing [4]. HVE is a functional encryption prim-
itive typically used in the public-key setting. All existing HVE
schemes [6, 24, 27, 32] in the cryptographic literature use either
prime order or composite order bilinear pairings over elliptic curve
groups. In our HVE-based scheme, a dataset owner can encrypt a set
S ⊆ T = {1, . . . , n}, for some positive integer n, into a ciphertext cS ,
which specifies a ‘policy’. Using a master secret key msk, the owner
1, . . . , s′
can generate a search token tkS′ for any subset S′ = {s′
}
of T . Using the token tkS′ for S′ and the ciphertext cS for S, any-
one can efficiently check whether S′ ⊆ S or not, without leaking
any partial information if S′ ⊈ S, e.g. whether any particular el-
ement s′
of S′ is in S or not (note that in the scheme of [6], the
set S is used to generate the token, while the set S′ is encrypted
i
in the ciphertext). Unfortunately, adopting such schemes into our
protocol leads to a huge compromise in overall performance and
efficiency. We address this issue by proposing a ‘lightweight’ HVE
scheme that only uses efficient symmetric-key building blocks, and
entirely avoids elliptic curve-based operations. At the same time, it
affords selective simulation-security against an unbounded number
of secret-key queries. Given this subset membership searchable
encryption protocol, a natural idea to apply it to eliminate KPRP
leakage in OXT would be to use it to encrypt the ‘XSet’ during set
up: we let S ⊆ T denote the XSet list of hashed pairs h(id, w), over
all documents id and keywords w contained in id, and we encrypt
S into a ciphertext cS stored on the server using our HVE-based
subset searchable encryption scheme. In the search phase with
query w1∧· · ·∧wn, the client issues the server a HVE search token
tkS′ for S′ = {h(id, wi)}n
i =2, id ∈ DB(w1). This allows the client
to check whether S′ ⊆ S, i.e., whether id contains all n keywords
{wi}1≤i ≤n, without revealing the KPRP information on whether
id contains any particular pair (w1, wi).
To demonstrate the high performance of our protocols and assess
the efficiency overhead of our security improvements, we report
our experimental results on the implementation of our protocol
and its performance evaluation, compared with the original OXT
protocol.
Security of HXT. We prove the client privacy of HXT against
the “honest-but-curious” server in a natural extension of the secu-
rity model used to prove the security of OXT [12], assuming the
security of the underlying HVE scheme, the DDH assumption, and
the security of the employed symmetric key primitives. The main
difference from [12] is that the leakage function in our security
model is weaker, as it eliminates the KPRP leakage component and
replaces it with the smaller WRP.
Practicality of HXT. We believe HXT is a practical, more secure
alternative to OXT for searching large databases. To support this
statement, we discuss the practical storage, computation, and com-
munication costs of HXT versus OXT (see Sec. 6 and Sec. 7 for more
details and experimental results). In terms of storage, we note that,
like HXT, practical implementations of OXT [12] also use a Bloom
filter for the XSet, and thus have a similar false positive probability
Pe and overhead factor in number of array storage locations. One
additional overhead in our HXT protocol is that each binary entry