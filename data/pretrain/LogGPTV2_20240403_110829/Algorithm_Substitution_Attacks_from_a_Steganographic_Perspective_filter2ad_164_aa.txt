title:Algorithm Substitution Attacks from a Steganographic Perspective
author:Sebastian Berndt and
Maciej Liskiewicz
Algorithm Substitution Attacks from a
Steganographic Perspective
Sebastian Berndt
University of Lübeck
Lübeck, Germany
PI:EMAIL
ABSTRACT
The goal of an algorithm substitution attack (ASA), also called a
subversion attack (SA), is to replace an honest implementation of
a cryptographic tool by a subverted one which allows to leak pri-
vate information while generating output indistinguishable from
the honest output. Bellare, Paterson, and Rogaway provided at
CRYPTO ’14 a formal security model to capture this kind of attacks
and constructed practically implementable ASAs against a large
class of symmetric encryption schemes. At CCS’15, Ateniese, Magri,
and Venturi extended this model to allow the attackers to work in
a fully-adaptive and continuous fashion and proposed subversion
attacks against digital signature schemes. Both papers also showed
the impossibility of ASAs in cases where the cryptographic tools are
deterministic. Also at CCS’15, Bellare, Jaeger, and Kane strength-
ened the original model and proposed a universal ASA against
sufficiently random encryption schemes. In this paper we analyze
ASAs from the perspective of steganography – the well known
concept of hiding the presence of secret messages in legal commu-
nications. While a close connection between ASAs and steganog-
raphy is known, this lacks a rigorous treatment. We consider the
common computational model for secret-key steganography and
prove that successful ASAs correspond to secure stegosystems on
certain channels and vice versa. This formal proof allows us to
conclude that ASAs are stegosystems and to “rediscover” several
results concerning ASAs known in the steganographic literature.
KEYWORDS
algorithm substitution attack; subversion attack; steganography;
symmetric encryption scheme; digital signature
1 INTRODUCTION
The publication of secret internal documents of the NSA by Edward
Snowden (see e. g. [4, 14, 20]) allowed the cryptographic community
a unique insight into some well-kept secrets of one of the world’s
largest security agency. Two conclusions may be drawn from these
reveals:
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3133981
Maciej Liśkiewicz
University of Lübeck
Lübeck, Germany
PI:EMAIL
• On the one hand, even a large organization such as the NSA
seems not to be able to break well established implementa-
tions of cryptographic primitives such as RSA or AES.
• On the other hand, the documents clearly show that the NSA
develops methods and techniques to circumvent the well
established security notions by e. g. manipulating standard-
ization processes (e. g. issues surrounding the Dual_EC_DRBG
number generator [11, 23, 25]) or reason about metadata.
This confirms that the security guarantees provided by the crypto-
graphic community are sound, but also indicates that some security
definitions are too narrow to evade all possible attacks, including
(non-)intentional improper handling of theoretically sound crypto-
graphic protocols. A very realistic attack which goes beyond the
common framework is a modification of an appropriate implemen-
tation of a secure protocol. The modified implementation should
remain indistinguishable from a truthful one and its aim is to al-
low leakage of secret information during subsequent runs of the
subverted protocol. Attacks of this kind are known in the literature
[2, 6, 7, 21, 28, 29] and an overview on this topic is given in the
current survey [24] by Schneier et al.
A powerful class of such attacks that we will focus on – coined
secretly embedded trapdoor with universal protection (SETUP) attacks
– was presented over twenty years ago by Young and Yung in the
kleptographic model framework [28, 29]. The model is meant to
capture a situation where an adversary (or “big brother” as we
shall occasionally say) has the opportunity to implement (and, in-
deed, “mis-implement” or subvert) a basic cryptographic tool. The
difficulty in detecting such an attack is based on the hardness of
program verification. By using closed source software, the user must
trust the developers that their implementation of cryptographic
primitives is truthful and does not contain any backdoors. This
is especially true for hardware-based cryptography [7]. But it is
difficult to verify this property. Even if the software is open source –
the source code is publicly available – the sheer complexity of cryp-
tographic implementations allows only very specialized experts to
be able to judge these implementations. Two of the most prominent
bugs of the widely spread cryptographic library OpenSSL1 – the
Heartbleed bug and Debian’s faulty implementation of the pseudo-
random number generator – remained undiscovered for more than
two years [24].
Inspired by Snowden’s reveals, the recent developments reignited
the interest in these kind of attacks. Bellare et al. named them
algorithm substitution attacks (ASA) and showed several attacks on
certain symmetric encryption schemes [7]. Note that they defined
a very weak model, where the only goal of the attacker was to
1https://www.openssl.org/
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1649distinguish between two ciphertexts, but mostly used a stronger
scenario with the aim to recover the encryption key. Degabriele
et al. criticized the model of [7] by pointing out the results crucially
rely on the fact that a subverted encryption algorithm always needs
to produce valid ciphertexts (the decryptability assumption) and
proposed a refined security notion [13]. The model of algorithm
substitution attacks introduced in [7] was extended to signature
schemes by Ateniese et al. in [2]. Simultaneously, Bellare et al. [6]
strengthened the result of [7] by enforcing that the attack needs to
be stateless.
In this paper we thoroughly analyze (general) ASAs from the
steganographic point of view. The principle goal of steganography
is to hide information in unsuspicious communication such that
no observer can distinguish between normal documents and docu-
ments that carry additional information. Modern steganography
was first made popular due to the prisoners’ problem by Simmons
[26] but, interestingly, the model was inspired by detecting the
risk of ASAs during development of the SALT2 treaty between
the Soviet Union and the United States in the late seventies [27].
This sheds some light on the inherent relationship between these
two frameworks which is well known in the literature (see e. g.
[22, 28, 29]).
Our main achievement is providing a strict relationship between
secure algorithm substitution attacks and the common computa-
tional model for secret-key steganography. Particularly, we prove
that successful ASAs correspond to secure stegosystems on certain
channels and vice versa. This formal proof allows us to conclude
that ASAs are stegosystems and to “rediscover” results of [2, 6, 7]
concerning ASAs.
The computational model for steganography used in this paper
was first presented by Hopper, Langford, and von Ahn [15, 16] and
independently proposed by Katzenbeisser and Petitcolas [18]. A
stegosystem consists of an encoder and a decoder sharing a key.
The encoder’s goal is to embed a secret message into a sequence
of documents which are send via a public communication channel
C monitored by an adversary (often called the warden due to the
prisoners problem of Simmons [26]). The warden wants to distin-
guish documents that carry no secret information from those sent
by the encoder. If all polynomial-time (in the security parameter κ)
wardens fail to distinguish these cases, we say that the stegosystem
is secure. If the decoder is able to reconstruct the secret message
from the sequence send by the encoder, the system is called reliable.
Our Results
We first investigate algorithm substitution attacks against symmet-
ric encryption schemes in the framework by Bellare et al. [6]. We
model encryption schemes as steganographic channels in appropri-
ate way which allows to relate algorithm substitution attacks with
steganographic systems and vice versa. This leads to the following
result.
Theorem 1.1 (Informal). Assume that SES is a symmetric en-
cryption scheme. Then there exists an indistinguishable and reliable
algorithm substitution attack against SES if and only if there exists a
secure and reliable stegosystem on the channel determined by SES.
The proof of the theorem is constructive in the sense that we
give an explicit construction of an algorithm substitution attack
against SES from a stegosystem and vice versa. As conclusion we
provide a generic ASA against every symmetric encryption scheme
SES whose insecurity is negligible if, roughly speaking, SES has
sufficiently large min-entropy. Our algorithm against SES achieves
almost the same performance as the construction of Bellare et al.
(see Theorem 4.1 and Theorem 4.2 in [6] and also our discussion in
Section 6).
Next, we generalize our construction and show a generic algo-
rithm substitution attack ASA against any (polynomial-time) ran-
domized algorithm R which, with hardwired secret s, takes inputs x
and generates outputs y. Algorithm ASA, using a hidden hardwired
random key ak, returns upon the secret s the sequence ˜y1, ˜y2, . . .
such that the output is indistinguishable from R(s, x1), R(s, x2), . . .
and ˜y1, ˜y2, . . . embeds the secret s. From this result we conclude:
Theorem 1.2 (Informal). There exists a generic algorithm sub-
stitution attack ASA that allows an undetectable subversion of any
cryptographic primitive of sufficiently large min-entropy.
Theorem 1.3 (Informal). Let Π be a cryptographic primitive
consisting with algorithms (Π.A1, Π.A2, . . . , Π.Ar) such that {Ai |
i ∈ I} for some I ⊆ {1, . . . , r} are deterministic. Then there is no ASA
on Π which subverts only algorithms {Ai | i ∈ I}.
As a corollary we obtain the result of Ateniese et al. (Theorem 1
in [2]) that for every coin-injective signature scheme, there is a
successful algorithm substitution attack of negligible insecurity.
Moreover we get (Theorem 2 in [2]) that for every coin-extractable
signature scheme, there is a successful and secure ASA. We can
conclude also (Theorem 3 in [2]) that unique signature schemes
are resistant to ASAs fulfilling the verifiability condition. Roughly
speaking the last property means that each message has exactly
one signature and the ASA can only produce valid signatures.
We furthermore introduce the concept of universal ASAs that
can be used without a detailed description of the implementation
of the underlying cryptographic primitive and note that almost all
known ASAs belong to this class. Based upon this definition, we
prove the following upper bound on the information that can be
embedded into a single ciphertext:
Theorem 1.4 (Informal). No universal ASA is able to embed
more than O(1) · log(κ) bits of information into a single ciphertext in
the random oracle model.
The paper is organized as follows. Section 2 contains the ba-
sic preliminaries and notations that we use throughout this work,
Section 3 presents the formal definitions of algorithm substitution
attacks, and Section 4 gives the necessary background on steganog-
raphy. In order to relate ASAs and steganography, we make use of
an appropriate channel for symmetric encryption schemes defined
in Section 5. The proof of Theorem 1.1 is given in Section 6, where
one direction is contained in Theorem 6.1 and the other direction
is given as Theorem 6.3. We generalize our results to arbitrary ran-
domized algorithms in Section 7. Combining the positive results
of Theorem 7.1 with the generic stegosystem provided by Theo-
rem 4.1 allows us to conclude Theorem 1.2. The negative results of
Theorem 7.2 directly give Theorem 1.3. Finally, Section 8 defines
universal ASAs and contains the upper bound on the transmis-
sion rate of these ASAs via a sequence of lemmata that results in
Corollary 8.3 implying Theorem 1.4.
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA16502 BASIC PRELIMINARIES AND NOTATIONS
We use the following standard notations. A function f : N → N is
negligible, if for all c ∈ N, there is an n0 ∈ N such that f (n) < n−c
for all n ≥ n0. The set of all strings of length n on an alphabet Σ
is denoted by Σn and the set of all strings of length at most n is
denoted by Σ≤n := ∪n
i =0Σi. If S is a set, x ← S denotes the uniform
random assignment of an element of S to x. If A is a randomized al-
gorithm, x ← A denotes the random assignment (with regard to the
internal randomness of A) of the output of A to x. The min-entropy
measures the amount of randomness of a probability distribution
D and is defined as H∞(D) = infx ∈supp(D){− log PrD(x)}, where
supp(D) is the support of D. Moreover, PPTM stands for probabilis-
tic polynomial-time Turing machine.
A symmetric encryption scheme SES is a triple of probabilistic
polynomial-time algorithms (SES.Gen, SES.Enc, SES.Dec) with pa-
rameters SES.ml(κ) describing the length of the encrypted message
and SES.cl(κ) describing the length of a generated cipher message.
The algorithms have the following properties:
• The key generator SES.Gen produces upon input 1κ a key k
with |k| = κ.
• The encryption algorithm SES.Enc takes as input the key k
and a message m ∈ {0, 1}SES.ml(κ) of length SES.ml(κ) and
produces a ciphertext c ∈ {0, 1}SES.cl(κ) of length SES.cl(κ).
• The decryption algorithm SES.Dec takes as input the key k
and a ciphertext c ∈ {0, 1}SES.cl(κ) and produces a message
m′ ∈ {0, 1}SES.ml(κ).
If the context is clear, we also write Gen, Enc, Dec, ml and cl
without the prefix SES. We say that (Gen, Enc, Dec) is reliable, if
Dec(k, Enc(k, m)) = m for all k and all m.
An cpa-attacker A against a symmetric encryption scheme is
a PPTM that mounts chosen-plaintext-attacks (cpa): It is given a
challenging oracle CH that either equals Enck for a randomly gen-
erated key k or produces random bitstrings of length cl(κ). For
an integer λ, let RAND(λ) be an algorithm that returns uniformly
distributed bitstrings of length λ. The goal of A is to distinguish
between those settings. Formally, this is defined via the following
experiment named CPA-Dist:
CPA-DistA,SES(κ)
Parties: attacker A, symmetric encryption scheme SES =
(Gen, Enc, Dec)
1: k ← Gen(1κ); b ← {0, 1}
2: b′ ← ACH(1κ)
3: return b = b′
oracle CH(m)
1: if b = 0 then return Enc(k, m)