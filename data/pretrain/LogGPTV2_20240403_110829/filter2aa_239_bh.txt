下面说明这个功能：
    public class Tuple
其中，最后一个模板参数是一个元组类型，所以可以创建带任意多项的元组：
    var tuple = Tuple.Create>("Stephanie", "Alina", "Nagel", 2009, 6, 2, 1.37,
            Tuple.Create(52, 3490));
7.9 结构比较
数组和元组都实现接口IStructuralEquatable和IStructuralComparable。这两个接口不仅
可以比较引用，还可以比较内容。这些接口都是显式实现的，所以在使用时需要把数组和
元组强制转换为这个接口。IStructuralEquatable接口用于比较两个元组或数组是否有相同
的内容，IStructuralComparable接口用于给元组或数组排序。
对于说明IStructuralEquatable接口的示例，使用实现IEquatable接口的Person类。
IEquatable接口定义了一个强类型化的Equals（）方法，以比较FirstName和LastName属性
的值（代码文件StructuralComparison/Person.cs）：
    public class Person: IEquatable
    {
      public int Id { get; private set; }
      public string FirstName { get; set; }
      public string LastName { get; set; }
      public override string ToString() => $"{Id}, {FirstName} {LastName}";
      public override bool Equals(object obj)
      {
        if (obj == null)
        {
          return base.Equals(obj);
        }
        return Equals(obj as Person);
      }
      public override int GetHashCode() => Id.GetHashCode();
      public bool Equals(Person other)
      {
        if (other == null)
          return base.Equals(other);
        return Id == other.Id && FirstName == other.FirstName &&
          LastName == other.LastName;
      }
    }
现在创建了两个包含Person项的数组。这两个数组通过变量名janet包含相同的Person
对象，和两个内容相同的不同Person对象。比较运算符“! =”返回true，因为这其实是两个
变量persons1和persons2引用的两个不同数组。因为Array类没有重写带一个参数的
Equals（）方法，所以用“==”运算符比较引用也会得到相同的结果，即这两个变量不相同
（代码文件StructuralComparison/Program.cs）：
    var janet = new Person { FirstName = "Janet", LastName = "Jackson" };
    Person[] persons1 = {
      new Person
      {
        FirstName = "Michael",
        LastName = "Jackson"
      },
      janet
    };
    Person[] persons2 = {
      new Person
      {
        FirstName = "Michael",
        LastName = "Jackson"
      },
      janet
    };
    if (persons1 ! = persons2)
    {
      WriteLine("not the same reference");
    }
对于IStructuralEquatable接口定义的Equals（）方法，它的第一个参数是object类型，
第二个参数是IEqualityComparer类型。调用这个方法时，通过传递一个实现了
IEqualityComparer的对象，就可以定义如何进行比较。通过EqualityComparer类完
成IEqualityComparer的一个默认实现。这个实现检查该类型是否实现了IEquatable接口，
并调用IEquatable.Equals（）方法。如果该类型没有实现IEquatable，就调用Object基类中
的Equals（）方法进行比较。
Person实现IEquatable，在此过程中比较对象的内容，而数组的确包含相同的
内容：
    if ((persons1 as IStructuralEquatable).Equals(persons2,
        EqualityComparer.Default))
    {
      WriteLine("the same content");
    }
下面看看如何对元组执行相同的操作。这里创建了两个内容相同的元组实例。当然，
因为引用t1和t2引用了两个不同的对象，所以比较运算符“! =”返回true：
    var t1 = Tuple.Create(1, "Stephanie");
    var t2 = Tuple.Create(1, "Stephanie");
    if (t1 ! = t2)
    {
      WriteLine("not the same reference to the tuple");
    }
Tuple<>类提供了两个Equals（）方法：一个重写了Object基类中的Equals（）方法，
并把object作为参数，第二个由IStructuralEqualityComparer接口定义，并把object和
IEqualityComparer作为参数。可以给第一个方法传送另一个元组，如下所示。这个方法使
用EqualityComparer.Default获取一个ObjectEqualityComparer，以进行比
较。这样，就会调用Object.Equals（）方法比较元组的每一项。如果每一项都返回true,
Equals（）方法的最终结果就是true，这里因为int和string值都相同，所以返回true：
    if (t1.Equals(t2))
    {
      WriteLine("the same content");
    }
还可以使用类TupleComparer创建一个自定义的IEqualityComparer，如下所示。这个
类实现了IEqualityComparer接口的两个方法Equals（）和GetHashCode（）：
    class TupleComparer: IEqualityComparer
    {
      public new bool Equals(object x, object y) => x.Equals(y);
      public int GetHashCode(object obj) => obj.GetHashCode();
    }
  注意： 实现IEqualityComparer接口的Equals（）方法需要new修饰符或者隐式
实现的接口，因为基类Object也定义了带两个参数的静态Equals（）方法。
使用TupleComparer，给Tuple类的Equals（）方法传递一个新实例。Tuple类
的Equals（）方法为要比较的每一项调用TupleComparer的Equals（）方法。所以，对于
Tuple类，要调用两次TupleComparer，以检查所有项是否相等：
    if (t1.Equals(t2, new TupleComparer()))
    {
      WriteLine("equals using TupleComparer");
    }
7.10 小结
本章介绍了创建和使用简单数组、多维数组和锯齿数组的C#表示法。C#数组在后台
使用Array类，这样就可以用数组变量调用这个类的属性和方法。
我们还探讨了如何使用IComparable和IComparer接口给数组中的元素排序，描述了如
何使用和创建枚举器、IEnumerable和IEnumerator接口，以及yield语句。
最后介绍了如何在数组中组织相同类型的对象，在元组中组织不同类型的对象。
第8章介绍运算符和强制类型转换。
第8章
运算符和类型强制转换
本章要点
● C#中的运算符
● 使用C# 6的新运算符nameof和空值传播
● 隐式和显式转换
● 使用装箱技术把值类型转换为引用类型
● 比较值类型和引用类型
● 重载标准的运算符以支持自定义类型
● 实现索引运算符
● 通过类型强制转换在引用类型之间转换
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● OperatorOverloadingSample
● OperatorOverloadingSample2
● OverloadingComparisonSample
● CustomIndexerSample
● CastingSample
8.1 运算符和类型转换
前几章介绍了使用C#编写有用程序所需要的大部分知识。本章将首先讨论基本语言
元素，接着论述C#语言的强大扩展功能。
8.2 运算符
C#运算符非常类似于C++和Java运算符，但有一些区别。
C#支持表8-1中的运算符。
表8-1
类别
运算符
算术运算符
+ - * / %
逻辑运算符
& | ^ ～ && || !
字符串连接运算符
+
递增和递减运算符
++ - -
移位运算符
>
比较运算符
== ! = <>  =
赋值运算符
= += -= *= /= %= &= |= ^= >=
成员访问运算符（用于对象和结构）
.
索引运算符（用于数组和索引器）
[]
类型转换运算符
（）
条件运算符（三元运算符）
？:
委托连接和删除运算符（见第9章）
+ -
对象创建运算符
new
类型信息运算符
sizeof is typeof as
溢出异常控制运算符
checked unchecked
间接寻址运算符
[]
名称空间别名限定符（见第2章）
::
空合并运算符
？？
空值传播运算符
？. ? []
标识符的名称运算符
nameof（）
  注意： 有4个运算符（sizeof、*、->和&）只能用于不安全的代码（这些代码
忽略了C#的类型安全性检查），这些不安全的代码见第5章的讨论。
使用C#运算符的一个最大缺点是，与C风格的语言一样，对于赋值（=）和比较
（==）运算，C#使用不同的运算符。例如，下述语句表示“使x等于3”：
    x = 3;
如果要比较x和另一个值，就需要使用两个等号（==）：
    if (x == 3)
    {
    }
幸运的是，C#非常严格的类型安全规则防止出现常见的C错误，也就是在逻辑语句中
使用赋值运算符代替比较运算符。在C#中，下述语句会产生一个编译器错误：
    if (x = 3)
    {
    }
习惯使用与字符（&）来连接字符串的Visual 
Basic程序员必须改变这个习惯。在C#
中，使用加号（+）连接字符串，而“&”符号表示两个不同整数值的按位AND运算。“|”符
号则在两个整数之间执行按位OR运算。Visual Basic程序员可能还没有使用过取模（%）
运算符，它返回除运算的余数，例如，如果x等于7，则x % 5会返回2。
在C#中很少会用到指针，因此也很少用到间接寻址运算符（->）。使用它们的唯一
场合是在不安全的代码块中，因为只有在此C#才允许使用指针。指针和不安全的代码见
第5章。
8.2.1 运算符的简化操作
表8-2列出了C#中的全部简化赋值运算符。
表8-2
简化运算符
等价于
x++, ++x
x = x + 1
x--, --x
x = x-1
x+= y
x = x + y
x- = y
x = x - y
x *= y
x = x * y
x /= y
x = x / y
x %= y
x = x % y
x >>= y
x = x >> y
x <<= y
x = x << y
x &= y
x = x & y
x |= y
x = x | y
为什么用两个例子来分别说明“++”递增和“- -”递减运算符？把运算符放在表达式的前
面称为前置，把运算符放在表达式的后面称为后置。要点是注意它们的行为方式有所不
同。
递增或递减运算符可以作用于整个表达式，也可以作用于表达式的内部。当x++和
++x单独占一行时，它们的作用是相同的，对应于语句x = x + 1。但当它们用于较长的表
达式内部时，把运算符放在前面（++x）会在计算表达式之前递增x；换言之，递增了x
后，在表达式中使用新值进行计算。而把运算符放在后面（x++）会在计算表达式之后递
增x——使用x的原始值计算表达式。下面的例子使用“++”增量运算符说明了它们的区
别：
    int x = 5;
    if (++x == 6) // true - x is incremented to 6 before the evaluation
    {
      WriteLine("This will execute");
    }
    if (x++ == 7) // false - x is incremented to 7 after the evaluation
    {
      WriteLine("This won't");
    }
判断第一个if条件得到true，因为在计算表达式之前，x值从5递增为6。然而，第二条
if语句中的条件为false，因为在计算整个表达式（x == 6）后，x值才递增为7。
前置运算符--x和后置运算符x--与此类似，但它们是递减，而不是递增。
其他简化运算符，如+=和-=，需要两个操作数，通过对第一个操作数执行算术、逻
辑运算，从而改变该操作数的值。例如，下面两行代码是等价的：
    x += 5;
    x = x + 5;
下面介绍在C#代码中频繁使用的基本运算符和类型强制转换运算符。
1．条件运算符
条件运算符（?:）也称为三元运算符，是if...else结构的简化形式。其名称的出处是它
带有3个操作数。它首先判断一个条件，如果条件为真，就返回一个值；如果条件为假，
则返回另一个值。其语法如下：
    condition ? true_value: false_value
其中condition是要判断的布尔表达式，true_value是condition为真时返回的值，
false_value是condition为假时返回的值。
恰当地使用三元运算符，可以使程序非常简洁。它特别适合于给调用的函数提供两个
参数中的一个。使用它可以把布尔值快速转换为字符串值true或false。它也很适合于显示
正确的单数形式或复数形式，例如：
    int x = 1;
    string s = x + " ";
    s += (x == 1 ? "man": "men");
    WriteLine(s);
如果x等于1，这段代码就显示1 man；如果x等于其他数，就显示其正确的复数形式。
但要注意，如果结果需要本地化为不同的语言，就必须编写更复杂的例程，以考虑到不同
语言的不同语法规则。
2. checked和unchecked运算符
考虑下面的代码：
    byte b = byte.MaxValue;
    b++;
    WriteLine(b);
byte数据类型只能包含0～255的数，给byte.MaxValue分配一个字节，得到255。对于
255，字节中所有可用的8个位都得到设置：11111111。所以递增这个值会导致溢出，得到
0。
CLR如何处理这个溢出取决于许多因素，包括编译器选项；所以只要有未预料到的溢
出风险，就需要用某种方式确保得到我们希望的结果。