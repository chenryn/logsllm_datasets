In addition, the C-x C-r command re-reads this init ﬁle, thus incorporating any changes
that you might have made to it.
1.3.1 Readline Init File Syntax
There are only a few basic constructs allowed in the Readline init ﬁle. Blank lines are
ignored. Lines beginning with a ‘#’ are comments. Lines beginning with a ‘$’ indicate
conditional constructs (see Section 1.3.2 [Conditional Init Constructs], page 10).
Other
lines denote variable settings and key bindings.
Variable Settings
You can modify the run-time behavior of Readline by altering the values of
variables in Readline using the set command within the init ﬁle. The syntax
is simple:
set variable value
Here, for example, is how to change from the default Emacs-like key binding to
use vi line editing commands:
set editing-mode vi
Variable names and values, where appropriate, are recognized without regard
to case. Unrecognized variable names are ignored.
Boolean variables (those that can be set to on or oﬀ) are set to on if the value is
null or empty, on (case-insensitive), or 1. Any other value results in the variable
being set to oﬀ.
A great deal of run-time behavior is changeable with the following variables.
bell-style
Controls what happens when Readline wants to ring the termi-
nal bell. If set to ‘none’, Readline never rings the bell. If set to
Chapter 1: Command Line Editing
5
‘visible’, Readline uses a visible bell if one is available. If set to
‘audible’ (the default), Readline attempts to ring the terminal’s
bell.
bind-tty-special-chars
If set to ‘on’, Readline attempts to bind the control characters
treated specially by the kernel’s terminal driver to their Readline
equivalents.
comment-begin
The string to insert at the beginning of the line when the insert-
comment command is executed. The default value is "#".
completion-ignore-case
If set to ‘on’, Readline performs ﬁlename matching and completion
in a case-insensitive fashion. The default value is ‘off’.
completion-prefix-display-length
The length in characters of the common preﬁx of a list of possible
completions that is displayed without modiﬁcation. When set to a
value greater than zero, common preﬁxes longer than this value are
replaced with an ellipsis when displaying possible completions.
completion-query-items
The number of possible completions that determines when the user
is asked whether the list of possibilities should be displayed. If the
number of possible completions is greater than this value, Readline
will ask the user whether or not he wishes to view them; otherwise,
they are simply listed. This variable must be set to an integer value
greater than or equal to 0. A negative value means Readline should
never ask. The default limit is 100.
convert-meta
If set to ‘on’, Readline will convert characters with the eighth bit set
to an ascii key sequence by stripping the eighth bit and preﬁxing
an ESC character, converting them to a meta-preﬁxed key sequence.
The default value is ‘on’.
disable-completion
If set to ‘On’, Readline will inhibit word completion. Completion
characters will be inserted into the line as if they had been mapped
to self-insert. The default is ‘off’.
editing-mode
The editing-mode variable controls which default set of key bind-
ings is used. By default, Readline starts up in Emacs editing mode,
where the keystrokes are most similar to Emacs. This variable can
be set to either ‘emacs’ or ‘vi’.
echo-control-characters
When set to ‘on’, on operating systems that indicate they support
it, readline echoes a character corresponding to a signal generated
from the keyboard. The default is ‘on’.
Chapter 1: Command Line Editing
6
enable-keypad
When set to ‘on’, Readline will try to enable the application keypad
when it is called. Some systems need this to enable the arrow keys.
The default is ‘off’.
enable-meta-key
When set to ‘on’, Readline will try to enable any meta modiﬁer
key the terminal claims to support when it is called.
On many
terminals, the meta key is used to send eight-bit characters. The
default is ‘on’.
expand-tilde
If set to ‘on’, tilde expansion is performed when Readline attempts
word completion. The default is ‘off’.
history-preserve-point
If set to ‘on’, the history code attempts to place the point (the
current cursor position) at the same location on each history line
retrieved with previous-history or next-history. The default
is ‘off’.
history-size
Set the maximum number of history entries saved in the history
list. If set to zero, the number of entries in the history list is not
limited.
horizontal-scroll-mode
This variable can be set to either ‘on’ or ‘off’. Setting it to ‘on’
means that the text of the lines being edited will scroll horizontally
on a single screen line when they are longer than the width of the
screen, instead of wrapping onto a new screen line. By default, this
variable is set to ‘off’.
input-meta
If set to ‘on’, Readline will enable eight-bit input (it will not clear
the eighth bit in the characters it reads), regardless of what the
terminal claims it can support. The default value is ‘off’. The
name meta-flag is a synonym for this variable.
isearch-terminators
The string of characters that should terminate an incremental
search without subsequently executing the character as a command
(see Section 1.2.5 [Searching], page 3).
If this variable has not
been given a value, the characters ESC and C-J will terminate an
incremental search.
keymap
Sets Readline’s idea of the current keymap for key binding com-
mands.
Acceptable keymap names are emacs, emacs-standard,
emacs-meta,
emacs-ctlx,
vi,
vi-move,
vi-command,
and
vi-insert. vi is equivalent to vi-command; emacs is equivalent
to emacs-standard. The default value is emacs. The value of the
editing-mode variable also aﬀects the default keymap.
Chapter 1: Command Line Editing
7
mark-directories
If set to ‘on’, completed directory names have a slash appended.
The default is ‘on’.
mark-modified-lines
This variable, when set to ‘on’, causes Readline to display an as-
terisk (‘*’) at the start of history lines which have been modiﬁed.
This variable is ‘off’ by default.
mark-symlinked-directories
If set to ‘on’, completed names which are symbolic links to di-
rectories have a slash appended (subject to the value of mark-
directories). The default is ‘off’.
match-hidden-files
This variable, when set to ‘on’, causes Readline to match ﬁles whose
names begin with a ‘.’ (hidden ﬁles) when performing ﬁlename
completion, unless the leading ‘.’ is supplied by the user in the
ﬁlename to be completed. This variable is ‘on’ by default.
output-meta
If set to ‘on’, Readline will display characters with the eighth bit
set directly rather than as a meta-preﬁxed escape sequence. The
default is ‘off’.
page-completions
If set to ‘on’, Readline uses an internal more-like pager to display
a screenful of possible completions at a time. This variable is ‘on’
by default.
print-completions-horizontally
If set to ‘on’, Readline will display completions with matches sorted
horizontally in alphabetical order, rather than down the screen.
The default is ‘off’.
revert-all-at-newline
If set to ‘on’, Readline will undo all changes to history lines before
returning when accept-line is executed. By default, history lines
may be modiﬁed and retain individual undo lists across calls to
readline. The default is ‘off’.
show-all-if-ambiguous
This alters the default behavior of the completion functions. If set
to ‘on’, words which have more than one possible completion cause
the matches to be listed immediately instead of ringing the bell.
The default value is ‘off’.
show-all-if-unmodified
This alters the default behavior of the completion functions in a
fashion similar to show-all-if-ambiguous. If set to ‘on’, words which
have more than one possible completion without any possible par-
tial completion (the possible completions don’t share a common
Chapter 1: Command Line Editing
8
preﬁx) cause the matches to be listed immediately instead of ring-
ing the bell. The default value is ‘off’.
skip-completed-text
If set to ‘on’, this alters the default completion behavior when in-
serting a single match into the line. It’s only active when perform-
ing completion in the middle of a word. If enabled, readline does
not insert characters from the completion that match characters
after point in the word being completed, so portions of the word
following the cursor are not duplicated. For instance, if this is en-
abled, attempting completion when the cursor is after the ‘e’ in
‘Makefile’ will result in ‘Makefile’ rather than ‘Makefilefile’,
assuming there is a single possible completion. The default value
is ‘off’.
visible-stats
If set to ‘on’, a character denoting a ﬁle’s type is appended to the
ﬁlename when listing possible completions. The default is ‘off’.
Key Bindings
The syntax for controlling key bindings in the init ﬁle is simple.
First you
need to ﬁnd the name of the command that you want to change. The following
sections contain tables of the command name, the default keybinding, if any,
and a short description of what the command does.
Once you know the name of the command, simply place on a line in the init
ﬁle the name of the key you wish to bind the command to, a colon, and then
the name of the command. There can be no space between the key name and
the colon – that will be interpreted as part of the key name. The name of
the key can be expressed in diﬀerent ways, depending on what you ﬁnd most
comfortable.
In addition to command names, readline allows keys to be bound to a string
that is inserted when the key is pressed (a macro).
keyname: function-name or macro
keyname is the name of a key spelled out in English. For example:
Control-u: universal-argument
Meta-Rubout: backward-kill-word
Control-o: "> output"
In the above example, C-u is bound to the function universal-
argument, M-DEL is bound to the function backward-kill-word,
and C-o is bound to run the macro expressed on the right hand
side (that is, to insert the text ‘> output’ into the line).
A number of symbolic character names are recognized while pro-
cessing this key binding syntax: DEL, ESC, ESCAPE, LFD, NEW-
LINE, RET, RETURN, RUBOUT, SPACE, SPC, and TAB.
"keyseq": function-name or macro
keyseq diﬀers from keyname above in that strings denoting an en-
tire key sequence can be speciﬁed, by placing the key sequence in
Chapter 1: Command Line Editing
9
double quotes. Some gnu Emacs style key escapes can be used, as
in the following example, but the special character names are not
recognized.
"\C-u": universal-argument
"\C-x\C-r": re-read-init-file
"\e[11~": "Function Key 1"
In the above example, C-u is again bound to the function
universal-argument (just as it was in the ﬁrst example), ‘C-x
C-r’ is bound to the function re-read-init-file, and ‘ESC [ 1 1
~’ is bound to insert the text ‘Function Key 1’.
The following gnu Emacs style escape sequences are available when specifying
key sequences:
\C-
control preﬁx
\M-
meta preﬁx
\e
an escape character
\\
backslash
\"
", a double quotation mark
\’
’, a single quote or apostrophe
In addition to the gnu Emacs style escape sequences, a second set of backslash
escapes is available:
\a
alert (bell)
\b
backspace
\d
delete
\f
form feed
\n
newline
\r
carriage return
\t
horizontal tab
\v
vertical tab
\nnn
the eight-bit character whose value is the octal value nnn (one to
three digits)
\xHH
the eight-bit character whose value is the hexadecimal value HH
(one or two hex digits)
When entering the text of a macro, single or double quotes must be used to
indicate a macro deﬁnition. Unquoted text is assumed to be a function name. In
the macro body, the backslash escapes described above are expanded. Backslash
will quote any other character in the macro text, including ‘"’ and ‘’’. For
example, the following binding will make ‘C-x \’ insert a single ‘\’ into the line:
"\C-x\\": "\\"
Chapter 1: Command Line Editing
10
1.3.2 Conditional Init Constructs
Readline implements a facility similar in spirit to the conditional compilation features of
the C preprocessor which allows key bindings and variable settings to be performed as the
result of tests. There are four parser directives used.
$if
The $if construct allows bindings to be made based on the editing mode, the
terminal being used, or the application using Readline. The text of the test
extends to the end of the line; no characters are required to isolate it.
mode
The mode= form of the $if directive is used to test whether Readline
is in emacs or vi mode. This may be used in conjunction with the
‘set keymap’ command, for instance, to set bindings in the emacs-
standard and emacs-ctlx keymaps only if Readline is starting out
in emacs mode.
term