very likely that the vertices represent the same keyword. The
attack builds on this idea and a series of ﬁltering steps. Due to
space constraints, the pseudo-code appears in the full version
of this work.
Details. Subgraph attacks are query-recovery attacks
with known-data that can exploit any atomic leakage pattern;
that is, any pattern that reveals a function of each matching
document. Formally, a pattern patt is atomic if there exists a
function h : D → Y such that
patt(D, q1, . . . , qt) =(cid:0)L1, . . . , Lt
(cid:1)
where, for all i ∈ [t], Li is a tuple (h(D))D∈D(qi). Atomic
patterns are relatively common and include the volume pattern
vol and the identiﬁer pattern rid. In the case of the volume
pattern, h is the function | · |w. In the case of the identiﬁer
pattern, h is the function ids. In the following, we refer to
the value h(D) as D’s handle. We stress that just because
a subgraph attack can be deﬁned with respect to any atomic
leakage pattern, it does not necessarily mean that it will be
successful against that pattern. Its accuracy has to be veriﬁed
experimentally, as we do in Section V. The attack works as
follows.
Bipartite graphs. The attack takes as input an auxiliary
data set (cid:101)D ⊆ D and query leakage (L1, . . . , Lt) deﬁned
as above. It starts by creating two bipartite graphs (cid:101)G =
(cid:0)((cid:101)L, W),(cid:101)E(cid:1) and G =(cid:0)(L, Q), E(cid:1) from the auxiliary data and
the leakage, respectively. The vertex set(cid:101)L is composed of the
handles of the known documents; that is,
(cid:26)
(cid:27)
h((cid:101)D)
(cid:101)L =
(cid:101)D∈(cid:101)D
.
For all keywords w ∈ W and documents (cid:101)D ∈ (cid:101)D, (cid:101)E includes
an edge (cid:0)w, h((cid:101)D)(cid:1) if w ∈ (cid:101)D. The second bipartite graph
G = ((L, Q), E) is constructed as follows. The vertex set L
is composed of the observed document handles; that is,
(cid:26)
(cid:27)
L =
h(D)
D∈(cid:83)t
i=1 D(qi)
.
D ∈(cid:83)t
The vertex set Q = (q1, . . . , qt) is composed of the queries q1
through qt. The edges E are created using the observed leakage
by adding an edge (qj, h(D)) if h(D) ∈ Lj, for all j ∈ [t] and
i=1 D(qi).
Reﬁnement. Given these two graphs, the algorithm’s
goal is to match each qi in Q to some w in W. For each qi, the
attack will build a set of potential keyword matches Si ⊆ W
and keep reﬁning it using several ﬁltering steps. We will denote
by S(j)
the set of qi’s potential keyword matches after the jth
reﬁnement step. Let S(0)
i be qi’s correct
match. The ﬁrst ﬁltering step is based on the observation that
w∗
i ’s matching documents in (cid:101)D have to be a subset of qi’s
i = W and let w∗
i
matching documents in D. More formally, we have
(cid:26)
(cid:27)
w ∈ W : N(cid:101)G(w) ⊆ NG(qi)
,
S(1)
i =
(cid:101)G and G, respectively. The second ﬁltering step is based on
where N(cid:101)G(w) and NG(w) are the neighbors of w and qi in
the observation that the selectivity of w∗ in (cid:101)D should be a δ
fraction of its selectivity in D, where δ is the known-data rate.
Based on this we have
w ∈ S(1)
(cid:27)
: #N(cid:101)G(w) ≥ δ · #NG(qi) − ε
S(2)
i =
(cid:26)
,
i
where ε is an error parameter we set experimentally.
Cross ﬁltering. The next ﬁltering step is optional and
can be used only if the function h : D → Y is a bijection
and if the adversary knows a large enough fraction of D. The
observation we rely on is that the correct keyword in a potential
set S(2)
i must be contained in all the documents in the set
h−1(Li). As a concrete example, consider the case where h
is the document ID function id. In this case, the observation
above translates to the fact that the correct keyword w∗
i in S(2)
must be contained in all the documents (Dα)α∈Li. This follows
from the correctness of the ESA scheme. More formally, we
have that
i
(cid:92)(cid:18) (cid:92)
(cid:19)
D
.
i ∈ S(2)
w∗
i
D∈h−1(Li)
Notice, however, that we may not be able to compute the
above subset because it requires us to invert h and recover
all the documents that matched the query. In particular, we
can only invert h if our auxiliary dataset is complete, i.e.,
δ = 1. Nevertheless, we can approximate the set h−1 even
when δ < 1 as follows. We use the set (cid:101)L ∩ Li which is the
subset of observed handles of documents that we know. We
then compute
(cid:92)(cid:18) (cid:92)
α∈(cid:101)L∩Li
(cid:19)
.
(cid:101)Dα
S(3)
i = S(2)
i
At the end of this step, if the size of the set S(3)
is equal to
1, then this means that we found a match for the ith query qi,
and therefore update the map α accordingly.
i
Iterative elimination. The ﬁnal step of the attack relies
on the observation that if some w is the correct match for a
query qi then it cannot be the correct match for another query
qj, where i (cid:54)= j. In other words, if w is the unique element
, for (cid:96) ∈ [4, t + 3], then w cannot
of some potential set S((cid:96))
be the matching keyword in some other potential set S((cid:96))
and,
therefore, we can remove it from S((cid:96))
. If this removal leads to
S((cid:96))
having a single element, then we can in turn remove that
j
element from other potential sets. This process keeps going
until the potential sets stabilize. Note that while the algorithm
will terminate it may not ﬁnd matches for all qi.
j
j
i
Efﬁciency. The ﬁrst ﬁltering step is O(t·#W), the cross
ﬁltering step is
(cid:18)
O
t +
(cid:19)
#D
t(cid:88)
(cid:88)
i=1
D∈D(qi)
and the iterative elimination step is O(t2). In total, the algo-
rithm runs in time
(cid:18)
t · #W +
O
(cid:19)
#D
.
t(cid:88)
(cid:88)
i=1
D∈D(qi)
The volumetric subgraph attack. As discussed above,
subgraph attacks can exploit any atomic leakage pattern by
properly instantiating the handle function h. The volumetric
subgraph attack results from instantiating h with the function
|·|w which maps each document to its volume. Note that |·|w is
not bijective so this instantiation cannot use the cross ﬁltering
step.
The identiﬁer subgraph attack. Our subgraph frame-
work can also be used to exploit the identiﬁer pattern by
instantiating h with the function ids that maps keywords to the
identiﬁers of the documents that contain it. Note that because
ids is bijective, we can use the cross ﬁltering step.
IV. VOLUMETRIC INJECTION ATTACKS
Injection attacks were ﬁrst proposed by Cash et al. [13]
in the context of the PPE-based ShadowCrypt and Mimesis
[36], [49] systems. The ﬁrst injection attacks on structured
ESAs were described by Zhang, Katz and Papamanthou in
[75]. In that work, two attacks are described, each of which
exploits the identiﬁer pattern. In this section, we describe new
volumetric injection attacks. In particular, our attacks exploit
the total volume pattern and, therefore, can even be used
against oblivious ESAs.
A. The Decoding Attack
We now describe our decoding attack. At a high-level, the
attack ﬁrst observes user queries and their associated volume. It
then uses this information to create documents with carefully-
chosen sizes for the purpose of injection. More precisely, the
sizes of an injected documents are chosen so that the volume of
each keyword becomes unique. This unique volume can then
be used as a signature when the keyword is queried again. Due
to space constraints, the pseudo-code of this attack appears in
the full version of this work.
The decoding attack works in two phases: baseline and
recovery. In the baseline phase, the adversary waits until it has
observed the total volumes for all keywords in W.7 During the
recovery phase, the adversary observes an additional sequence
of t ≥ 1 client queries q = (q1, . . . , qt) with total volumes
v = (v1, . . . , vt). The attack will recover all queries in q. We
now describe each phase in more detail.
Baseline. During the baseline phase,
the adversary
observes queries until it holds the volumes b = (b1 . . . , bm)
of all the keywords w1, . . . , w(cid:96) ∈ W. It then creates a set of
documents to inject as follows. It ﬁrst computes an offset γ
deﬁned as
γ = min
γ ∈ N : ∀i, j ∈ [m], γ(cid:54) | bi − bj
.
(cid:26)
(cid:27)
For all keywords wi ∈ W, the adversary injects a document
with volume i· γ ﬁlled with wi. Intuitively, this step increases
wi’s volume by i · γ.
7Note that the attack works similarly if the user only queries a strict subset
of W. This will lead to fewer injections.
8
Recovery. During the recovery phase, the adversary will
observe volumes v = (v1, . . . , vt) on queries q = (q1, . . . , qt).
Note that for all i ∈ [t], the volume of qi can be written as
Baseline. During the baseline phase,
the adversary
observes queries until it holds the volumes b(0) = (b1, . . . , bm)
for each keyword w1, . . . , w(cid:96) ∈ W(0), where W(0) = W.
Targeting. During the targeting phase, the adversary
observes queries until it decides on a target query q0 with
total volume v0. It then partitions W(0) into two equal-sized
sets, W(0)
1
and W(0)
and computes an offset
γ ∈ N : ∀j ∈ [m], γ (cid:54)= |v0 − b(0)
j
| ∧ γ ≥ |W(0)
1 |w
(cid:26)
0
(cid:27)
.
γ = min
The adversary then injects a document with volume γ that
contains all the keywords in W(0)
1 .
Recovery. In the ﬁrst round of the recovery phase, the
adversary observes the total volume v1 for query q1. It then
uses γ to decide on one of three cases:
• if v1 = v0 + γ then the adversary concludes that q1 = q0
• if v1 = v0 then the adversary concludes that q1 = q0 and
• if v1 (cid:54)= v0 and v1 (cid:54)= v0 + γ then the adversary concludes
and that q0 ∈ W(0)
1 ;
that q0 ∈ W(0)
0 ;
that q1 (cid:54)= q0.
1
1 . If q0 ∈ W(0)
If q0 ∈ W(0)
the adversary sets W(1) = W(0)
it
sets W(1) = W(0)
0 . For both these cases, before moving to the
(cid:27)
next round, the adversary re-injects a document with volume
γ such that
(cid:26)
0
γ ∈ N : ∀j ∈ [m], γ (cid:54)= |v1 − b(1)
j
| ∧ γ ≥ |W(1)
1 |w
γ = min
,
1 +γ,··· , b(0)
where b(1) = (b(0), b(0)
are
the two partitions of W(1). If otherwise q1 (cid:54)= q0, the adversary
moves to the next round without changing W(0) nor injecting
a new ﬁle.
m +γ), W(1)