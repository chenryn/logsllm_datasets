for testing the security of SAML implementations. The testing
framework automatically generated various SAML attack pat-
terns by permuting the positions of the original and malicious
elements in a SAML assertion. In this paper, we do not
consider the XML signature wrapping attack (XSW in short).
However, we checked the feasibility of extending our approach
to support XSW attacks (see Section VIII for details).
Bozic et al. [28] proposed attack pattern-based combinato-
rial testing for detecting XSS vulnerabilities in web applica-
tions. In order to increase the coverage of our attack patterns,
we applied the concept of combinatorial testing, as mentioned
in Section III.
B. Other Black-Box Techniques.
Wang et al. [36] identiﬁed many vulnerabilities in the inte-
gration of web SSO systems. The proposed technique analyzes
the HTTP trafﬁc going through the browser, infers syntax and
semantics of the trafﬁc parameters, checks the applicability
of three different attack strategies and provides an overview
to assist a security expert in manually identifying concrete
attacks. In our approach, we adopted their inference concept,
further enhanced it with data ﬂow patterns and automated the
process of attack discovery.
Prithvi et al. [27] proposes a black-box technique for
exposing vulnerabilities in the server-side logic of web applica-
tions by identifying various parameter tampering opportunities
and by generating test cases corresponding to the identiﬁed
opportunity. However, this technique required manual effort to
convert these exploit opportunities to actual ones.
Zhou et al. [40] proposed SSOScan, a tool for automat-
ically testing SP websites that implements Facebook SSO.
SSOScan probes the SP website for detecting the presence of
5 vulnerabilities that are speciﬁc to Facebook SSO. SSOScan
in conducting large-scale security testing of SPs
is useful
implementing the same SSO solution. Even though our input
collection module requires more manual effort compared to
that of SSOScan, the concept of application agnostic attack
patterns extends the generality of our approach by enabling
the testing framework to detect attacks in multiple scenarios
(SSO, CaaS, etc.).
None of the above mentioned black-box techniques pro-
vides experimental evidence of the applicability of the ap-
proach in multiple MPWA scenarios (CaaS, SSO, etc.) as we
do.
C. Other Techniques.
Bai et al. proposed AUTHSCAN [24] for automatically
extracting formal speciﬁcations from the implementations of
authentication protocols and verify it using a model checker
to identify vulnerabilities. AUTHSCAN uses sophisticated
techniques such as analyzing the available client-side code in
order to increase the correctness of the automatically extracted
formal model. However,
the authors mention that due to
the issue of false positives, manual effort was required for
checking inconsistencies between the actual implementation
and the extracted formal model. This requires the tester to
be knowledgeable on formal speciﬁcation. Our approach does
not have such a strong requirement and its applicability is not
limited to authentication protocols.
WebSpi [25] is a library for modeling web applications
using a variant of the applied pi-calculus. These formal models
were veriﬁed using the ProVerif tool to discover a variety
of attacks in the integration of OAuth-based Single Sign-
On solutions. The authors of [25] also proposed the idea of
automatically obtaining the formal speciﬁcation of applications
written in a subset of PHP and JavaScript. This work also
emphasized the importance of considering CSRF and open
redirectors while evaluating the security of web-based security
protocols.
Sun et al. [29] proposed to detect logical vulnerabilities
in e-commerce applications through static analysis of the
available program code. Even though the level of automation in
[29] is higher than our approach, we were able to detect similar
attacks without requiring the source-code of the application.
Recently, there have been some efforts [39], [29] to prevent
14
further reﬁne it to overcome these kinds of issues.
the exploitation of logical vulnerabilities in the integrations
of CaaS and SSO APIs. However, these techniques requires
changes to be made in the way applications are deployed. Our
approach does not have this requirement as we are focusing
on detecting the attacks rather than preventing them.
VIII. LIMITATIONS AND FUTURE DIRECTIONS
it
Coverage is a general
issue for the black-box security
testing community. Though each of our attack pattern can
state precisely what
is testing, our approach is not an
exception in this respect. Additionally, it can only detect known
types of attacks because our attack patterns are inspired by
known attacks. Creative security experts could craft attack
patterns capturing novel attack strategies to explore new types
of attacks. Two cases can be foreseen here. The new attack
patterns (new recipes) can be built (cooked) on top of the
available preconditions, actions, and postconditions (ingredi-
ents). In this case it should be pretty straightforward for
security experts to cook this new recipe. If new ingredients are
necessary, extensions are needed. These can range from adding
a simple operation on top of OWASP ZAP up to extending the
inference module with e.g., control-ﬂow related inferences and
similar. Another research direction could focus on integrating
fuzzing capabilities within some of our attack patterns. A
clear drawback is that this extension will likely make the
entire approach subject to false positives. A more challenging
research direction could focus on automated generation of
attack patterns. Though this may look as a Holy Grail quest,
there may be reasonable paths to explore. For instance, when
considering replay attacks and the patterns we created for
them, it is clear that the attack search space we are covering
is far from being complete. How many sessions and which
sessions should be considered in the replay attack strategy as
well as which goal that strategy should target remain open
questions. However, attack patterns could be automatically
generated to explore this combinatorial search space.
A few attacks reported in the MPWA literature are not
covered by our attack patterns. In fact, Table I does present
neither XML rewriting attacks [34] nor XSS attacks, e.g., [22,
§4]. For XSS we did not invest too much in that direction
as there are already specialized techniques in literature that
are both protocol- and domain-agnostic. By adding XML
support, new attack patterns can be created to target also XML
rewriting attacks as in [34]. This can be a straightforward
extension of our approach and prototype especially considering
that OWASP ZAP supports Jython [16]. Basically, all Java
libraries can be run within OWASP ZAP so that Java functions
performing transformations on the HTTP trafﬁc (e.g., base64,
XML parsing) can be used in the attack patterns. Our approach
can also be extended to handle postMessage[3]: frames would
be considered as protocol entities and their interactions as
communication events. While there are no conceptual issues
to perform this extension, there is technical obstacle as, at
the moment, OWASP ZAP provides only partial support to
intercept postMessages.
As mentioned in the paper,
the approach is not fully
automated because it requires the tester to provide the initial
conﬁgurations. The quality of these conﬁgurations has a direct
impact on the results. For instance if the Flags are not chosen
properly, our system may report false positives.
Still, as shown, the approach is effective and we plan to
[24] BAI, G., LEI, J., MENG, G., VENKATRAMAN, S. S., SAXENA, P.,
SUN, J., LIU, Y., AND DONG, J. S. Authscan: Automatic extraction
of web authentication protocols from implementations. In Proceedings
of NDSS’13, San Diego, CA, USA (2013).
[25] BANSAL, C., BHARGAVAN, K., AND MAFFEIS, S. Discovering Con-
In CSF
crete Attacks on Website Authorization by Formal Analysis.
2012 IEEE (June 2012), pp. 247–262.
[26] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust Defenses for
Cross-site Request Forgery. In Proceedings of the 15th ACM Conference
on Computer and Communications Security (New York, NY, USA,
2008), CCS ’08, ACM, pp. 75–88.
[27] BISHT, P., HINRICHS, T., SKRUPSKY, N., BOBROWICZ, R., AND
VENKATAKRISHNAN, V. N. Notamper: Automatic blackbox detection
of parameter tampering opportunities in web applications. In Proceed-
ings of the 17th ACM Conference on Computer and Communications
Security (New York, NY, USA, 2010), CCS ’10, ACM, pp. 607–618.
[28] BOZIC, J., SIMOS, D. E., AND WOTAWA, F. Attack pattern-based
combinatorial testing. In Proceedings of the 9th International Workshop
on Automation of Software Test (New York, NY, USA, 2014), AST
2014, ACM, pp. 1–7.
[29] CHEN, E., CHEN, S., QADEER, S., AND WANG, R. Securing mul-
tiparty online services via certiﬁcation of symbolic transactions.
In
Proceedings of the IEEE Symposium on Security and Privacy (Oakland)
(May 2015), IEEE Institute of Electrical and Electronics Engineers.
[30] CONSORTIUM, O.
SAML V2.0 Technical Overview.
oasis-open.org/security/Saml2TechOverview, Mar. 2008.
http://wiki.
[31] MAINKA, C., MLADENOV, V., AND SCHWENK, J. Do not trust me:
Using malicious idps for analyzing and attacking single sign-on. CoRR
abs/1412.1623 (2014).
[32] PELLEGRINO, G., AND BALZAROTTI, D. Toward black-box detection
of logic ﬂaws in web applications. In NDSS (2014), Internet Society.
[33] PHILLIPS, C., AND SWILER, L. P. A graph-based system for network-
vulnerability analysis. In Proceedings of the 1998 Workshop on New
Security Paradigms (NY, USA, 1998), NSPW ’98, ACM, pp. 71–79.
[34] SOMOROVSKY, J., MAYER, A., SCHWENK, J., KAMPMANN, M., AND
JENSEN, M. On Breaking SAML: Be Whoever You Want to Be. In
Presented as part of the 21st USENIX Security Symposium (USENIX
Security 12) (Bellevue, WA, 2012), USENIX, pp. 397–412.
[35] SUN, F., XU, L., AND SU, Z. Detecting Logic Vulnerabilities in E-
In NDSS 2014, California, USA, February
commerce Applications.
23-26, 2013 (2014).
[36] WANG, R., CHEN, S., AND WANG, X. Signing me onto your accounts
through facebook and google: A trafﬁc-guided security study of com-
mercially deployed single-sign-on web services. In Proceedings of the
2012 IEEE Symposium on Security and Privacy (Washington, DC, USA,
2012), SP ’12, IEEE Computer Society, pp. 365–379.
[37] WANG, R., CHEN, S., WANG, X., AND QADEER, S. How to shop
for free online – security analysis of cashier-as-a-service based web
the 2011 IEEE Symposium on Security
stores.
and Privacy (Washington, DC, USA, 2011), SP ’11, IEEE Computer
Society, pp. 465–480.
In Proceedings of
[38] WANG, R., ZHOU, Y., CHEN, S., QADEER, S., EVANS, D., AND
GUREVICH, Y. Explicating sdks: Uncovering assumptions underlying
In Proceedings of the 22Nd
secure authentication and authorization.
USENIX Conference on Security (Berkeley, CA, USA, 2013), SEC’13,
USENIX Association, pp. 399–414.
[39] XING, L., CHEN, Y., WANG, X., AND CHEN, S.
InteGuard: Toward
Automatic Protection of Third-Party Web Service Integrations. In NDSS
(February 2013).
[40] ZHOU, Y., AND EVANS, D. SSOScan: Automated Testing of Web
Applications for Single Sign-on Vulnerabilities. In Proceedings of the
23rd USENIX Conference on Security Symposium (CA, USA, 2014),
SEC’14, USENIX Association, pp. 495–510.
IX. CONCLUSIONS
We presented an approach for black-box security testing
of MPWAs. The core of our approach is the concept of
application-agnostic attack patterns. These attack patterns are
inspired by the similarities in the attack strategies of the previ-
ously discovered attacks against MPWAs. The implementation
of our approach is based on OWASP ZAP, a widely-used open-
source legacy penetration testing tool. By using our approach,
we have been able to identify serious drawbacks in the SSO
and CaaS solutions offered by LinkedIn, PayPal and Stripe,
previously unknown vulnerabilities in a number of websites
leveraging the SSO solutions offered by Facebook and In-
stagram and automatically generate test cases that reproduce
previously known attacks against vulnerable integration of the
2Checkout service.
ACKNOWLEDGMENT
This work has been partly supported by the EU under grant
317387 SECENTIS (FP7-PEOPLE-2012-ITN).
REFERENCES
[1] Account hijacking by leaking authorization code.
oauthsecurity.com/.
http://www.
[2] Covert Redirect. http://oauth.net/advisories/2014-1-covert-redirect/.
[3] HTML5 Web Messaging.
http://www.w3.org/TR/webmessaging/
[4]
[5]
#posting-messages.
Instagram API Console. https://apigee.com/console/instagram.
Integrate Log In with PayPal.
integration/direct/identity/log-in-with-paypal/.
https://developer.paypal.com/docs/
[6] Log In with PayPal demo site.
loginwithpaypal-live/.
https://lipp.ebaystratus.com/
[7] LogIn to experience INstant. http://instant.linkedinlabs.com/.
[8] The most common oauth2 vulnerability.
http://homakov.blogspot.it/
2012/07/saferweb-most-common-oauth2.html.
[9] OAuth
2.0
oauthplayground/.
Playground.
https://developers.google.com/
[10] OAuth Security Advisory: 2009.1. http://oauth.net/advisories/2009-1/.
[11] PayPal Express Checkout.
https://www.paypal.com/webapps/mpp/
referral/paypal-express-checkout.
[12] PayPal Payments Standard.
paypal-payments-standard.
https://www.paypal.com/webapps/mpp/
[13] Selenium WebDriver. http://docs.seleniumhq.org/projects/webdriver/.
[14] Stripe Checkout. https://stripe.com/docs/checkout.
[15] Stripe Wiki. http://en.wikipedia.org/wiki/Stripe %28company%29.
[16] The Jython Project. http://www.jython.org/.
[17] The ZAP Zest Add-on. https://code.google.com/p/zap-extensions/wiki/
AddOn Zest.
[18] Token Fixation in PayPal.
token-ﬁxation-in-paypal.html.
http://homakov.blogspot.it/2014/01/
[19] Vulnerability Reawards Program Rules. https://hackerone.com/twitter.
[20] OAuth 2.0 Threat Model and Security Considerations. https://tools.ietf.
org/html/rfc6819#section-4.4.2.2, January 2013.
[21] AKHAWE, D., BARTH, A., LAM, P. E., MITCHELL, J., AND SONG, D.
Towards a formal foundation of web security. CSF ’10, IEEE Computer
Society, pp. 290–304.
[22] ARMANDO, A., CARBONE, R., COMPAGNA, L., CU ´ELLAR, J., PEL-
LEGRINO, G., AND SORNIOTTI, A. From Multiple Credentials to
Browser-Based Single Sign-On: Are We More Secure? vol. 354 of IFIP
Advances in Information and Communication Technology. Springer,
2011, pp. 68–79.
[23] ARMANDO, A., CARBONE, R., COMPAGNA, L., CU ´ELLAR, J., AND
TOBARRA, L. Formal Analysis of SAML 2.0 Web Browser Single
Sign-On: Breaking the SAML-based Single Sign-On for Google Apps.
In Proc. ACM FMSE (2008), V. Shmatikov, Ed., ACM Press, pp. 1–10.
15