指针，而涉及指针的编程错误往往难以察觉。有句话说的好：想拥有自由就
必须时刻保持警惕。
C 语言紧凑简洁，结合了大量的运算符。正因如此，我们也可以编写出
让人极其费解的代码。虽然没必要强迫自己编写晦涩的代码，但是有兴趣写
写也无妨。试问，除 C语言外还为哪种语言举办过年度混乱代码大赛[1]？
瑕不掩瑜，C语言的优点比缺点多很多。我们不想在这里多费笔墨，还
是来聊聊C语言的其他话题。
31
1.3 C语言的应用范围
早在20世纪80年代，C语言就已经成为小型计算机（UNIX系统）使用的
主流语言。从那以后，C语言的应用范围扩展到微型机（个人计算机）和大
型机（庞然大物）。如图1.2所示，许多软件公司都用C语言来开发文字处理
程序、电子表格、编译器和其他产品，因为用 
C语言编写的程序紧凑而高
效。更重要的是，C程序很方便修改，而且移植到新型号的计算机中也没什
么问题。
无论是软件公司、经验丰富的C程序员，还是其他用户，都能从C语言
中受益。越来越多的计算机用户已转而求助C语言解决一些安全问题。不一
定非得是计算机专家也能使用C语言。
20世纪90年代，许多软件公司开始改用C++来开发大型的编程项目。
C++在C语言的基础上嫁接了面向对象编程工具（面向对象编程是一门哲
学，它通过对语言建模来适应问题，而不是对问题建模以适应语言）。
C++几乎是C的超集，这意味着任何C程序差不多就是一个C++程序。学习C
语言，也相当于学习了许多C++的知识。
32
图1.2 C语言的应用范围
虽然这些年来C++和JAVA非常流行，但是C语言仍是软件业中的核心技
能。在最想具备的技能中，C语言通常位居前十。特别是，C 语言已成为嵌
入式系统编程的流行语言。也就是说，越来越多的汽车、照相机、DVD 播
放机和其他现代化设备的微处理器都用 C 语言进行编程。除此之外，C 语
言还从长期被FORTRAN独占的科学编程领域分得一杯羹。最终，作为开发
操作系统的卓越语言，C在Linux开发中扮演着极其重要的角色。因此，在进
入21世纪的第2个10年中，C语言仍然保持着强劲的势头。
简而言之，C 语言是最重要的编程语言之一，将来也是如此。如果你想
33
拿下一份编程的工作，被问到是否会C语言时，最好回答“是”。
34
1.4 计算机能做什么
在学习如何用C语言编程之前，最好先了解一下计算机的工作原理。这
些知识有助于你理解用C语言编写程序和运行C程序时所发生的事情之间有
什么联系。
现代的计算机由多种部件构成。中央处理单元（CPU）承担绝大部分的
运算工作。随机存取内存（RAM）是存储程序和文件的工作区；而永久内
存存储设备（过去一般指机械硬盘，现在还包括固态硬盘）即使在关闭计算
机后，也不会丢失之前储存的程序和文件。另外，还有各种外围设备（如，
键盘、鼠标、触摸屏、监视器）提供人与计算机之间的交互。CPU负责处理
程序，接下来我们重点讨论它的工作原理。
CPU 
的工作非常简单，至少从以下简短的描述中看是这样。它从内存
中获取并执行一条指令，然后再从内存中获取并执行下一条指令，诸如此类
（一个吉赫兹的CPU一秒钟能重复这样的操作大约十亿次，因此，CPU 能以
惊人的速度从事枯燥的工作）。CPU 
有自己的小工作区——由若干个寄存
器组成，每个寄存器都可以储存一个数字。一个寄存器储存下一条指令的内
存地址，CPU 使用该地址来获取和更新下一条指令。在获取指令后，CPU在
另一个寄存器中储存该指令，并更新第1个寄存器储存下一条指令的地址。
CPU能理解的指令有限（这些指令的集合叫作指令集）。而且，这些指令相
当具体，其中的许多指令都是用于请求计算机把一个数字从一个位置移动到
另一个位置。例如，从内存移动到寄存器。
下面介绍两个有趣的知识。其一，储存在计算机中的所有内容都是数
字。计算机以数字形式储存数字和字符（如，在文本文档中使用的字母）。
每个字符都有一个数字码。计算机载入寄存器的指令也以数字形式储存，指
令集中的每条指令都有一个数字码。其二，计算机程序最终必须以数字指令
码（即，机器语言）来表示。
简而言之，计算机的工作原理是：如果希望计算机做某些事，就必须为
其提供特殊的指令列表（程序），确切地告诉计算机要做的事以及如何做。
35
你必须用计算机能直接明白的语言（机器语言）创建程序。这是一项繁琐、
乏味、费力的任务。计算机要完成诸如两数相加这样简单的事，就得分成类
似以下几个步骤。
1.从内存位置2000上把一个数字拷贝到寄存器1。
2.从内存位置2004上把另一个数字拷贝到寄存器2。
3.把寄存器2中的内容与寄存器1中的内容相加，把结果储存在寄存器1
中。
4.把寄存器1中的内容拷贝到内存位置2008。
而你要做的是，必须用数字码来表示以上的每个步骤！
如果以这种方式编写程序很合你的意，那不得不说抱歉，因为用机器语
言编程的黄金时代已一去不复返。但是，如果你对有趣的事情比较感兴趣，
不妨试试高级编程语言。
36
1.5 高级计算机语言和编译器
高级编程语言（如，C）以多种方式简化了编程工作。首先，不必用数
字码表示指令；其次，使用的指令更贴近你如何想这个问题，而不是类似计
算机那样繁琐的步骤。使用高级编程语言，可以在更抽象的层面表达你的想
法，不用考虑CPU在完成任务时具体需要哪些步骤。例如，对于两数相加，
可以这样写：
total = mine + yours;
对我们而言，光看这行代码就知道要计算机做什么；而看用机器语言写
成的等价指令（多条以数字码形式表现的指令）则费劲得多。但是，对计算
机而言却恰恰相反。在计算机看来，高级指令就是一堆无法理解的无用数
据。编译器在这里派上了用场。编译器是把高级语言程序翻译成计算机能理
解的机器语言指令集的程序。程序员进行高级思维活动，而编译器则负责处
理冗长乏味的细节工作。
编译器还有一个优势。一般而言，不同CPU制造商使用的指令系统和编
码格式不同。例如，用Intel Core i7 （英特尔酷睿i7）CPU编写的机器语言程
序对于ARM Cortex-A57 CPU而言什么都不是。但是，可以找到与特定类型
CPU匹配的编译器。因此，使用合适的编译器或编译器集，便可把一种高级
语言程序转换成供各种不同类型 CPU 使用的机器语言程序。一旦解决了一
个编程问题，便可让编译器集翻译成不同 CPU 使用的机器语言。
简而言之，高级语言（如C、Java、Pascal）以更抽象的方式描述行
为，不受限于特定CPU或指令集。而且，高级语言简单易学，用高级语言编
程比用机器语言编程容易得多。
1964年，控制数据公司（Control Data Corporation）研制出了CDC 6600
计算机。这台庞然大物是世界上首台超级计算机，当时的售价是600万美
元。它是高能核物理研究的首选。然而，现在的普通智能手机在计算能力和
内存方面都超过它数百倍，而且能看视频，放音乐。
37
1964 年，在工程和科学领域的主流编程语言是 FORTRAN。虽然编程语
言不如硬件发展那么突飞猛进，但是也发生了很大变化。为了应对越来越大
型的编程项目，语言先后为结构化编程和面向对象编程提供了更多的支持。
随着时间的推移，不仅新语言层出不穷，而且现有语言也会发生变化。
38
1.6 语言标准
目前，有许多C实现可用。在理想情况下，编写C程序时，假设该程序
中未使用机器特定的编程技术，那么它的运行情况在任何实现中都应该相
同。要在实践中做到这一点，不同的实现要遵循同一个标准。
C语言发展之初，并没有所谓的C标准。1987年，布莱恩·柯林汉（Brian
Kernighan）和丹尼斯·里奇（Dennis 
Ritchie）合著的The 
C 
Programming
Language（《C语言程序设计》）第1版是公认的C标准，通常称之为K&R C
或经典C。特别是，该书中的附录中的“C语言参考手册”已成为实现C的指导
标准。例如，编译器都声称提供完整的K&R实现。虽然这本书中的附录定
义了C语言，但却没有定义C库。与大多数语言不同的是，C语言比其他语言
更依赖库，因此需要一个标准库。实际上，由于缺乏官方标准，UNIX实现
提供的库已成为了标准库。
1.6.1 第1个ANSI/ISO C标准
随着C的不断发展，越来越广泛地应用于更多系统中，C社区意识到需
要一个更全面、更新颖、更严格的标准。鉴于此，美国国家标准协会
（ANSI）于 1983 年组建了一个委员会（X3J11），开发了一套新标准，并
于1989年正式公布。该标准（ANSI C）定义了C语言和C标准库。国际标准
化组织于1990年采用了这套C标准（ISO C）。ISO C和ANSI C是完全相同的
标准。ANSI/ISO标准的最终版本通常叫作C89（因为ANSI于1989年批准该标
准）或C90（因为ISO于1990年批准该标准）。另外，由于ANSI先公布C标
准，因此业界人士通常使用ANSI C。
在该委员会制定的指导原则中，最有趣的可能是：保持 C的精神。委员
会在表述这一精神时列出了以下几点：
信任程序员；
不要妨碍程序员做需要做的事；
39
保持语言精练简单；
只提供一种方法执行一项操作；
让程序运行更快，即使不能保证其可移植性。
在最后一点上，标准委员会的用意是：作为实现，应该针对目标计算机
来定义最合适的某特定操作，而不是强加一个抽象、统一的定义。在学习C
语言过程中，许多方面都反映了这一哲学思想。
1.6.2 C99标准
1994年，ANSI/ISO联合委员会（C9X委员会）开始修订C标准，最终发
布了C99标准。该委员会遵循了最初C90标准的原则，包括保持语言的精练
简单。委员会的用意不是在C语言中添加新特性，而是为了达到新的目标。
第1个目标是，支持国际化编程。例如，提供多种方法处理国际字符集。第2
个目标是，“调整现有实践致力于解决明显的缺陷”。因此，在遇到需要将C
移至64位处理器时，委员会根据现实生活中处理问题的经验来添加标准。第
3个目标是，为适应科学和工程项目中的关键数值计算，提高C的适应性，
让C比FORTRAN更有竞争力。
这3点（国际化、弥补缺陷和提高计算的实用性）是主要的修订目标。
在其他方面的改变则更为保守，例如，尽量与C90、C++兼容，让语言在概
念上保持简单。用委员会的话说：“„„委员会很满意让C++成为大型、功能
强大的语言”。
C99的修订保留了C语言的精髓，C仍是一门简洁高效的语言。本书指出
了许多C99修改的地方。虽然该标准已发布了很长时间，但并非所有的编译
器都完全实现C99的所有改动。因此，你可能发现C99的一些改动在自己的
系统中不可用，或者只有改变编译器的设置才可用。
1.6.3 C11标准
维护标准任重道远。标准委员会在2007年承诺C标准的下一个版本是
40
C1X，2011年终于发布了C11标准。此次，委员会提出了一些新的指导原
则。出于对当前编程安全的担忧，不那么强调“信任程序员”目标了。而且，
供应商并未像对C90那样很好地接受和支持C99。这使得C99的一些特性成为
C11的可选项。因为委员会认为，不应要求服务小型机市场的供应商支持其
目标环境中用不到的特性。另外需要强调的是，修订标准的原因不是因为原
标准不能用，而是需要跟进新的技术。例如，新标准添加了可选项支持当前
使用多处理器的计算机。对于C11标准，我们浅尝辄止，深入分析这部分内
容已超出本书讨论的范围。
注意
本书使用术语ANSI C、ISO C或ANSI/ISO C讲解C89/90和较新标准共有
的特性，用C99或C11介绍新的特性。有时也使用C90（例如，讨论一个特性
被首次加入C语言时）。
41
1.7 使用C语言的7个步骤
C是编译型语言。如果之前使用过编译型语言（如，Pascal或
FORTRAN），就会很熟悉组建C程序的几个基本步骤。但是，如果以前使
用的是解释型语言（如，BASIC）或面向图形界面语言（如，Visual
Basic），或者甚至没接触过任何编程语言，就有必要学习如何编译。别担
心，这并不复杂。首先，为了让读者对编程有大概的了解，我们把编写C程
序的过程分解成7个步骤（见图1.3）。注意，这是理想状态。在实际的使用
过程中，尤其是在较大型的项目中，可能要做一些重复的工作，根据下一个
步骤的情况来调整或改进上一个步骤。
图1.3 编程的7个步骤
1.7.1 第1步：定义程序的目标
42
在动手写程序之前，要在脑中有清晰的思路。想要程序去做什么首先自
己要明确自己想做什么，思考你的程序需要哪些信息，要进行哪些计算和控
制，以及程序应该要报告什么信息。在这一步骤中，不涉及具体的计算机语
言，应该用一般术语来描述问题。
1.7.2 第2步：设计程序
对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来
完成它。例如，用户界面应该是怎样的？如何组织程序？目标用户是谁？准
备花多长时间来完成这个程序？
除此之外，还要决定在程序（还可能是辅助文件）中如何表示数据，以
及用什么方法处理数据。学习C语言之初，遇到的问题都很简单，没什么可
选的。但是，随着要处理的情况越来越复杂，需要决策和考虑的方面也越来
越多。通常，选择一个合适的方式表示信息可以更容易地设计程序和处理数
据。
再次强调，应该用一般术语来描述问题，而不是用具体的代码。但是，
你的某些决策可能取决于语言的特性。例如，在数据表示方面，C的程序员
就比Pascal的程序员有更多选择。
1.7.3 第3步：编写代码
设计好程序后，就可以编写代码来实现它。也就是说，把你设计的程序
翻译成 C语言。这里是真正需要使用C语言的地方。可以把思路写在纸上，
但是最终还是要把代码输入计算机。这个过程的机制取决于编程环境，我们
稍后会详细介绍一些常见的环境。一般而言，使用文本编辑器创建源代码文
件。该文件中内容就是你翻译的C语言代码。程序清单1.1是一个C源代码的
示例。
程序清单1.1 C源代码示例
#include 
43
int main(void)
{
int dogs;
printf("How many dogs do you have?\n");
scanf("%d", &dogs);
printf("So you have %d dog(s)!\n", dogs);
return 0;
}
在这一步骤中，应该给自己编写的程序添加文字注释。最简单的方式是
使用 C的注释工具在源代码中加入对代码的解释。第2章将详细介绍如何在
代码中添加注释。
1.7.4 第4步：编译
接下来的这一步是编译源代码。再次提醒读者注意，编译的细节取决于
编程的环境，我们稍后马上介绍一些常见的编程环境。现在，先从概念的角
度讲解编译发生了什么事情。
前面介绍过，编译器是把源代码转换成可执行代码的程序。可执行代码
是用计算机的机器语言表示的代码。这种语言由数字码表示的指令组成。如
前所述，不同的计算机使用不同的机器语言方案。C 编译器负责把C代码翻
译成特定的机器语言。此外，C编译器还将源代码与C库（库中包含大量的
标准函数供用户使用，如printf()和scanf()）的代码合并成最终的程序（更精
确地说，应该是由一个被称为链接器的程序来链接库函数，但是在大多数系
统中，编译器运行链接器）。其结果是，生成一个用户可以运行的可执行文
件，其中包含着计算机能理解的代码。
44
编译器还会检查C语言程序是否有效。如果C编译器发现错误，就不生
成可执行文件并报错。理解特定编译器报告的错误或警告信息是程序员要掌
握的另一项技能。
1.7.5 第5步：运行程序
传统上，可执行文件是可运行的程序。在常见环境（包括Windows命令
提示符模式、UNIX终端模式和Linux终端模式）中运行程序要输入可执行文
件的文件名，而其他环境可能要运行命令（如，在VAX中的VMS[2]）或一
些其他机制。例如，在Windows和Macintosh提供的集成开发环境（IDE）
中，用户可以在IDE中通过选择菜单中的选项或按下特殊键来编辑和执行C
程序。最终生成的程序可通过单击或双击文件名或图标直接在操作系统中运
行。
1.7.6 第6步：测试和调试程序
程序能运行是个好迹象，但有时也可能会出现运行错误。接下来，应该