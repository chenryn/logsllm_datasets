  echo "This scan was created on $TODAY" > $DIRECTORY/report
    if [ -f $DIRECTORY/nmap ];then 2
    echo "Results for Nmap:" >> $DIRECTORY/report
    grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report
  fi
    if [ -f $DIRECTORY/dirsearch ];then 3
    echo "Results for Dirsearch:" >> $DIRECTORY/report
    cat $DIRECTORY/dirsearch >> $DIRECTORY/report
  fi
    if [ -f $DIRECTORY/crt ];then 4
    echo "Results for crt.sh:" >> $DIRECTORY/report
    jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report
  fi
  done 5
    The
     for
    loop starts with the
     for
    keyword
     1
    and ends with the
     done
    keyword
     5
    . Notice that we also added a few lines in the report section to see if we need to generate each type of report. We check whether the output file of an Nmap scan, a Dirsearch scan, or a crt.sh scan exist so we can determine if we need to generate a report for that scan type
     2
     3
     4
    .
    for循环从for关键字1开始，到done关键字5结束。请注意，我们还在报告部分添加了一些行，以查看是否需要生成每种类型的报告。我们检查Nmap扫描，Dirsearch扫描或crt.sh扫描的输出文件是否存在，以便确定我们是否需要为该扫描类型生成报告。
    The brackets around a condition mean that we’re passing the contents into a
     test
    command:
     [ -f $DIRECTORY/nmap ]
    is equivalent to
     test -f $DIRECTORY/nmap
    .
    条件周围的括号表示我们将内容传递到测试命令中：[ -f $DIRECTORY/nmap ] 等同于 test -f $DIRECTORY/nmap。
    The
     test
    command evaluates a conditional and outputs either
     true
    or
     false
    . The
     -f
    flag tests whether a file exists. But you can test for more conditions! Let’s go through some useful test conditions. The
     -eq
    and -
     ne
    flags test for equality and inequality, respectively. This returns
     true
    if
     $3
    is equal to
     1
    :
    测试命令评估一个条件并输出真或假。-f 标志测试文件是否存在。但您可以测试更多的条件！让我们来看看一些有用的测试条件。-eq 和 -ne 标志分别测试相等和不相等。如果 $3 等于1，则返回 true：
if [ $3 -eq 1 ]
    This returns
     true
    if
     $3
    is not equal to
     1
    :
    这个语句返回 true 如果 3 不等于 1。
if [ $3 -ne 1 ]
    The
     -gt
    ,
     -ge
    ,
     -lt
    , and
     le
    flags test for greater than, greater than or equal to, less than, and less than or equal to, respectively:
    '-gt'表示大于，'-ge'表示大于或等于，'-lt'表示小于，'le'表示小于或等于。
if [ $3 -gt 1 ]
if [ $3 -ge 1 ]
if [ $3 -lt 1 ]
if [ $3 -le 1 ]
    The
     -z
    and
     -n
    flags test whether a string is empty. These conditions are both true:
    "-z和-n标志测试字符串是否为空。这些条件都是真的:"
if [ -z "" ]
if [ -n "abc" ]
    The
     -d
    ,
     -f
    ,
     -r
    ,
     -w
    , and
     -x
    flags check for directory and file statuses. You can use them to check the existence and permissions of a file before your shell script operates on them. For instance, this command returns
     true
    if
     /bin
    is a directory that exists:
    -d、-f、-r、-w 和 -x 标记检查目录和文件状态。您可以使用它们在 shell 脚本操作文件之前检查文件的存在和权限。例如，如果 /bin 是一个存在的目录，这个命令返回 true：
if [ -d /bin]
    This one returns
     true
    if
     /bin/bash
    is a file that exists:
    如果/bin/bash是存在的文件，则返回true。
if [ -f /bin/bash ]
    And this one returns
     true
    if
     /bin/bash
    is a readable file:
    如果/bin/bash是可读文件，则此命令将返回true。
if [ -r /bin/bash ]
    or a writable file:
    或者可写入的文件：
if [ -w /bin/bash ]
    or an executable file:
    或一个可执行文件：
if [ -x /bin/bash ]
    You can also use
     &&
    and
     ||
    to combine test expressions. This command returns
     true
    if both expressions are true:
    您也可以使用&&和||来组合测试表达式。如果两个表达式都为真，则此命令将返回true。
if [ $3 -gt 1 ] && [ $3 -lt 3 ]
    And this one returns
     true
    if at least one of them is true:
    如果其中至少有一个为真，则返回true。
if [ $3 -gt 1 ] || [ $3 -lt 0 ]
    You can find more comparison flags in the
     test
    command’s manual by running
     man test
    . (If you aren’t sure about the commands you’re using, you can always enter
     man
    followed by the command name in the terminal to access the command’s manual file.)
    如果您对正在使用的命令不确定，可以在终端输入 man 跟随命令名称来访问命令的说明文件，您可以在测试命令的手册中找到更多的比较标志，通过运行 man test。
    Writing a Function Library
    As your codebase gets larger, you should consider writing a
     function library
    to reuse code. We can store all the commonly used functions in a separate file called
     scan.lib
    . That way, we can call these functions as needed for future recon tasks:
    随着代码库越来越庞大，您应该考虑编写函数库以重用代码。我们可以将所有常用的函数存储在一个名为scan.lib的单独文件中。这样，我们就可以根据未来的勘察任务需要随时调用这些函数。
#!/bin/bash
nmap_scan()
{
  nmap $DOMAIN > $DIRECTORY/nmap
  echo "The results of nmap scan are stored in $DIRECTORY/nmap."
}
dirsearch_scan()
{
  $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
  echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
}
crt_scan()
{
  curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
  echo "The results of cert parsing is stored in $DIRECTORY/crt."
}
    In another file, we can source
    the library file in order to use all of its functions and variables. We source a script via the
     source
    command, followed by the path to the script:
    在另一个文件中，我们可以通过调用库文件来使用它的所有函数和变量。我们可以通过source命令，后面跟着脚本的路径，来调用脚本文件。
#!/bin/bash
source ./scan.lib
PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
getopts "m:" OPTION
MODE=$OPTARG
for i in "${@:$OPTIND:$#}"
do
  DOMAIN=$i
  DIRECTORY=${DOMAIN}_recon
  echo "Creating directory $DIRECTORY."
  mkdir $DIRECTORY
  case $MODE in
    nmap-only)
      nmap_scan
      ;;
    dirsearch-only)