User: I am trying to figure out an elegant way to share a variable between a windows form app and a python script running in the background.  The variable would be used solely to update a progress bar in the windows form based on the the long running process in the python script.  More specifically, a windows timer will fire every n seconds, check the variable, then update the progress bar value.  Sound stupid enough yet?  I'll try to explain the need for this below.
I have a windows app that lets a user define a number of parameters to fire off a long running process (python script).  Without getting into unnecessary detail, this long running process will insert many (100k+ records) into a sqlite database over a significant period of time.  In order to make the python script as performant as possible, I don't call commit on the sqlite database until the very end of the python script.  Trying to query the sqlite database from the windows app (via System.Data.Sqlite) before the commit occurs always yields 0 records, regardless of far along the process is.
The windows app will know how many total records will be inserted by the python process, so determining progress will be straight-forward enough, assuming I can get access to a record count in the python script.  
I know I could do this with a text file, but is there any better way?
Assistant: Easiest solution is probably to just have the python script print to stdout: say each time an item is processed, print a line with a number representing how many items have been processed (or a percentage). Then have the forms application read the output line by line, updating the progressbar based on that information.