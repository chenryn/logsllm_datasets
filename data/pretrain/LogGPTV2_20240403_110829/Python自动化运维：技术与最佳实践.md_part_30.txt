mid="Mid_"+self.ModuleId
#加载模块ID应对的模块名，格式为“Mid_”
except:
try:
#判断是否通过认证
logging.basicConfig (level=logging.DEBUG,
exposed_Runcommands(self,get_string):
sys_param_array=[]
self.Hosts=self.get_string_array[1]
else:
if user=="OMuser" and passwd=="KJS23o4ij09gHF734iuhsdfhkGYSihoiwhj38u4h"
try:
for iin range(2,len(self.get string_array)-1):
获取 rpyc Client 的请求串 get_string，通过tdecode方法解密后再进行分隔，分隔符为“@@”
Linux公社
sys_param_array.append(self.get_string_array[i])
if self.Checkout_pass!=True:
 self.Checkout_pass=True
return tencode("Invalid Login!",SECRET_KEY)
return tencode("User verify failed!",SEcRET_KEY)
filemode='a')
filename=sys.path[0]+'/logs/omsys.1og',
format='%(asctime)s [%(levelname)s] %(message)s',
www.linuxidc.com
#获取功能模块的扩展参数并追加到列表
#认证失败
#认证结果标记变量，值为“True”则认证通过，反之
+模块ID，如“Mid_1001.py”
#获取操作目标主机
#获取功能模块
#启用系统日志记录
KEY).split('@@)
ID
---
## Page 267
防护。
py 中的 SECRET_KEY 变量值。同时在rpyc服务器端添加 loginO)方法，实现逻辑层的安全
进行加密，在数据接收完毕后调用dencodeO方法进行解密。解密的密钥采用项目 setings.
实现数据的加密与解密。OMServer平台遵循一个原则，数据在传输之前调用tencodeO方法
要
要。OMServer平台采用base64.b64encodeO、base64.b64decodeO加上密钥混淆算法（RC4）
def crypt(data, key):
#!/usr/bin/env python
【/home/test/OMServer/libraries.py 】
#RC4加密算法
from hashlib import shal
import random,base64
数据传输的安全性关系到整个运营平台的生命线，因此严格做好入侵安全防范至关重
s.start()
s=ThreadedServer(ManagerService,port=11511,auto_register=False)
it",SECRET_KEY)
-*-coding:utf-8-*-
for i in range(256):
box
=range(256)
return tencode(returnString,SECRET_KEY)
#对返回给rpycClient的数据串进行加密
elif
elif AUTO_PLATFORM=="ansible":
if AUTO_PLATFORM=="func"
Runobj=Modulehandle(self.ModuleId,self.Hosts,sys_param_array)
#调用模块相关方法，下发执行任务
Runmessages=Runobj.run()
except:
Linux公社
根据不同主控端组件格式化输出，
if type(Runmessages)
else:
if type(Runmessages) == dict:
if type (Runmessages)
return tencode(u"module\""+mid+u"\"does not exist, Please add
#启动rpyc服务监听、接收、响应请求
else:
else:
exec importstring
AUTO_PLATFORM=="saltstack":
returnString
returnstring =
returnString =str(Runmessages).strip()
returnString = ansible_transform(Runmessages,self.Hosts)
returnString =str(Runmessages).strip()
returnString = func_transform (Runmessages,self.Hosts)
 www.linuxidc.com
str(Runmessages).strip()
saltstack_transform(Runmessages,self.Hosts)
==dict：
=dict：
支持Func、Ansible、Saltstack
第13章从零开始打造B/S自动化运维平台
239
---
## Page 268
图13-9所示，记下模块ID“1007”，
模块，具体操作如图13-8所示。
作为其定义值，当然，扩展更多参数的改造成本也非常低。在本示例中添加“重启进程服务"
OMServer目前支持最多两个扩展参数，name 属性要求使用“sys_param_1”、“sys_param_2”
是“模块扩展”输人框，支持所有HTML表单元素，后台通过name属性引用其值（value）。
具体操作是点击首页的【添加模块】按钮，跳转到“添加模块”表单页面，其中最关键的
服务器端编写对应的任务模块，下面对具体内容进行详细说明。
13.5.3
240
提交后将返回新增模块的ID，
OMServer平台模块的扩展需要完成两件事情，一是在前端添加模块基本信息，二是在
添加前端模块包括指定模块名称、功能说明、模块扩展（HTML表单作为模块参数）等，
（1）添加前端模块
def tdecode(data,key, decode=base64.b64decode, salt_length=16):
#使用 RC4算法解密编码后的数据，data为加密的数据，key为密钥
deftencode(data,key,encode=base64.b64encode,
#使用RC4算法加密编码后的数据，data为加密的数据，key为密钥
第三部分案例篇
平台功能模块扩展
return crypt(data[salt_length:], shal(key + salt).digest())
salt=data[:salt_length]
if decode:
return data
ifencode:
data=salt
for n in range(salt_length):
salt
return
for char in data:
out
x=y=0
data =decode(data)
data =encode(data)
box[x],box[y]=box[y]，
=[]
box[i],box[x] =box[x],box[i]
（=（x +box[i]+ord(key[i % len(key)])）%256
=
=（x+1）%256
9（[x]xoq+）
Linux公社www.linuxidc.com
该模块ID同时会作为服务器端任务模块的后缀名，如
前端模块添加完毕。
box[(box[x] +box[y]）% 256]))
box[x]
salt_length=l6):
---
## Page 269
在模块目录（modules）下组件名作为二级目录名，二级目录下为具体的任务模块，文件名称
此OMServer在设计时就将不同组件的模块进行隔离，具体模块目录结构如图13-10所示，
作组件，包括 Saltstack、Ansible、Func。不同组件的API语法及返回数据结构都不一样，因
服务器端模块的作用是负责具体远程操作任务的功能封装，支持3种Python自动化操
（2）添加服务器端任务模块
Linux公社 www.linuxidc.com
块扩展
功能说明：
模块各称：
重启进程服务
系统支持荷个表单扩展酸数、ID确名约定为"sys_param_1”、
[功能说明]重自目标服务器指定的进程或服务
重启进程服务
功能说明]br>重启目标服务器的指定的进程或服务
分
支持两
系统提示：
图13-9提交前端模块添加
个表单扩展参数，D命名约定为sys_Daram_1，sys_par
图13-8
提文
文
季加功能镜块
第13章
确定
添加前端模块
国
从零开始打造B/S自动化运维平台2
edsAs
支持HTML
241
---
## Page 270
copy 模块实现文件远程同步，详细源码如下：
不同实现方法。
的调用以及返回执行结果。针对“重启进程服务”这个任务模块，下面分别介绍3个组件的
始化模块基本信息，包括操作主机列表、模块ID、模块扩展参数等；runO方法实现组件API
@9fzsmh_o)-=(byt5jmg=e3#foya6u"
用性。
API模块包及全局参数，同时也增加代码的复
Public_lib.py 文件的作用是导人、定义各组件的
持一致。另外modules/(ansible|saltstack|func)/
与项目 settings.py 中的 SECRET_KEY 变量保
“SECRET_KEY”为指定加密、解密的密钥，
可选项为“ansible”、“saltstack”、“func”
中“AUTOPLATFORM”为指定组件环境
需要更新配置文件config.py 的两个选项，其
242第三部分案例篇
根据Ansible组件模块的开发原理，通过调用command模块实现远程命令执行，使用
服务器端任务模块由Modulehandle类及其两个方法组成，其中_init_O方法作用为初
1）编写Ansible组件ID为“i007”模块。
【/home/test/OMServer/config.py】
关于任务模块的编写，不同组件的实现规范和方法都不一样，在编写任务模块之前
class Modulehandle():
#重启应用模块进程服务#
SECRET_KEY
量保持一致
#密钥，与项目中setting.py的SECRET_KEY变
件环境，支持Saltstack、Ansible、Func
AUTOPLATFORM=
#!/usr/bin/env python
#-*-coding:utf-8-*-
-*
def
coding:utf-8-*
self.hosts=target_host（hosts,"IP"）#格式化主机信息，参数“IP”为IP地址，“SN”为主机名
self.moduleid=moduleid
self.Runresult
_init
libimport
"ctmj#&amp;8hrgow_^sj$ejt
Linux公社 www.linuxidc.com
#指定组
#模块ID
#模块扩展参数列表
图13-10服务器端模块目录结构
0
D03
#初始化方法无须改动
---
## Page 271
使用client.copyfile.copyfileO方法实现文件远程同步，详细源码（部分）如下：
fle”参数实现远程命令执行及文件远程同步，详细源码（部分）如下：
【/home/test/OMServer/modules/saltstack/Mid_1007.py】
根据Func 组件模块的开发原理，通过调用client.command.runO方法实现远程命令执行，
3）编写Func 组件ID为“1007”模块。
expr_form='list')
2）编写Saltstack组件ID为“1007”模块。
def run(self）:
def run(self):
#任务下发、执行方法
return self.Runresult
try:
return self.Runresult
except Exception,e:
try:
Linux公社www.linuxidc.com
return str(e)
if len(self.Runresult）==0:
self.Runresult
#调用Saltstack提供的API(cmd.run模块），执行远程命令
client =salt.client.Localclient()
return str(e)
if len(self.Runresult['dark'])
pattern=self.hosts, forks=forks,
self.Runresult = ansible.runner.Runner(
#调用Ansible 提供的API（command模块），执行远程命令
elifcommonname=="lighttpd":
elif commonname=="apache":
elif commonname=="haproxy":
elif commonname=="nginx":
commonname=str(self.sys_param_array[0])
.....
return "No hosts found，请确认主机已经添加ansible环境！
self.command="/etc/init.d/httpd restart"
self.command="/etc/init.d/haproxy restart"
return
self.command="/etc/init.d/nginx restart"
self.command="/etc/init.d/resin restart"
#根据模块扩展参数定义执行的不同命令集
"Nohostsfound，请确认主机已经添加saltstack环境！“
=client.cmd(self.hosts,'cmd.run',[self.command],\
#返回执行结果
#返回执行结果
第13章
从零开始打造B/S自动化运维平台
and
len(self.Runresult['contacted'])==0:
243
---
## Page 272
244
最后，打开浏览器访问http://omserver.domain.com，效果见图13-11。
任务模块编写完成后，启动服务端服务，运行以下命令：
#调用Func提供的API（command.run模块），执行远程命令
#pythonOMservermain.py&
.....
第三部分案例篇
cd/home/test/oMServer
RC4加密算法参考文章http://www.snip2code.com/Snippet/27937/Blockout-encryption-
decryption-methods-p。
OMServer
return self.Runresult
except Exception,e:
try:
def run(self):
Linux公社 www.linuxidc.com
self.Runresult=client.command.run(self.command)
client =fc.Overlord(self.hosts)
return
102.168.121
nx:[K
进能ng
str(e)
图13-11
#返回执行结果
远程操作功能截图
---
## Page 273
用OMServer的前端作为实时输出展示，平台首页截图见图14-1。
用户实时触发事件，在该事件中加入Python 编写的上报脚本，实现数据的实时跟踪，最后利
记录）工作机制实现，同时设置用户全局环境/etc/profile的history属性变量，实现定制系统
攻击者做了事后的操作痕迹清理也无济于事。该功能结合Linux系统的history（命令行历史
实时跟踪所有Linux服务器系统登录账号的操作记录，由于操作记录异地集中式存储，即使
14.1
计功能。
有可靠性、完整性、不可抵赖等特点。本章将介绍在OMServer平台扩展Linux系统安全审
的应对措施；同时也可作为日后攻击者的犯罪证据，为后续的审计工作提供数据依据，具
证：实时跟踪黑客的操作记录，可在第一时间监测到攻击者的行为，并让管理员采取相应
措施来保证网络或服务的正常运行，其中系统安全审计是记录人侵攻击主机的一个重要凭
器渗透、数据窃取、恶意攻击等。为了解决网络安全的问题，人们采取了各式各样的防护
安全审计功能作为OMServer平台的一部分，扩展了Linux系统安全审计的功能，实现
随着互联网逐渐深人我们日常生活的方方面面，网络安全威胁也随之严重，比如服务
平台功能介绍
Linux公社www.linuxidc.com
打造Linux系统安全审计功能
第14章
Chayte1a
---
## Page 274
步展示，系统架构图见图14-2。
实时上报，使用 MySQL数据库作为数据存储，客户端采用 prototype.js 前端架构实现数据同
14.2
246第三部分案例篇
OMServer平台安全审计的功能同样基于B/S 结构，服务端的数据来源于业务集群Agent
192.168122
OMServer
从图14-2中可以看出系统的整体架构，
系统构架设计
Linux公社 www.linuxidc.com
办公设备
办公设备
图14-1平台首页截图
图14-2系统架构图
OMServe
Web服务
品
，首先管理员在业务服务器集群部署Python数据
HTTPGET
业务服务器集群（Python agent）
---
## Page 275
server_list 表中的 server_lip字段进行关联，详细见图14-3的数据库模型。
操作事件表（server_history），其中，将表 server_history 的history_ip字段设置成外键，与
14.3.2
于操作事件信息的存储，且与 server_list 的IP字段配置外键关联。表信息说明如下。
14.3.1
14.3
查看、跟踪服务器上报的审计信息，整个流程结束。
history_command
history_datetime
history_user
history_ip
history_id
上报脚本，通过OMServer 提供的cgi接口实现数据接收、入库，最后通过访问前端页面来
db_datetime