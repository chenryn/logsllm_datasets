capitalizations.
https://
[2] ABLON, L., LIBICKI, M. C., AND GOLAY, A. A. Markets for
cybercrime tools and stolen data: Hackers’ bazaar. Rand Corpo-
ration, 2014.
[3] AMANI, S., B ´EGEL, M., BORTIN, M., AND STAPLES, M.
Towards verifying Ethereum smart contract bytecode in Is-
abelle/HOL. CPP. ACM. To appear (2018).
[4] ARGHIRE, I. Researchers claim Wickr patched ﬂaws but didn’t
pay rewards, Oct. 2016.
http://www.securityweek.com/
researchers-claim-wickr-patched-flaws-didnt-pay-
rewards.
[5] ATZEI, N., BARTOLETTI, M., AND CIMOLI, T. A survey of
In International
attacks on Ethereum smart contracts (SoK).
Conference on Principles of Security and Trust (2017), Springer,
pp. 164–186.
[6] AVI ˇZIENIS, A. The methodology of N-version programming. In
Software Fault Tolerance, M. R. Lyu, Ed. John Wiley & Sons Ltd,
1995.
[7] BANISADR,
E.
How $800k
evaporated
PoWH coin Ponzi scheme overnight, 2018.
blog.goodaudience.com/how-800k-evaporated-
from-the-powh-coin-ponzi-scheme-overnight-
1b025c33b530.
from the
https://
[8] BENTOV, I., BREIDENBACH, L., DAIAN, P., JUELS, A., LI,
Y., AND ZHAO, X. The cost of decentralization in 0x and
EtherDelta, Aug. 2017. http://hackingdistributed.com/
2017/08/13/cost-of-decent/.
[9] BHARGAVAN, K., DELIGNAT-LAVAUD, A., FOURNET, C.,
GOLLAMUDI, A., GONTHIER, G., KOBEISSI, N., KULATOVA,
N., RASTOGI, A., SIBUT-PINOTE, T., SWAMY, N., ET AL. For-
mal veriﬁcation of smart contracts: Short paper. In ACM PLAS
(2016), ACM, pp. 91–96.
[10] BOGATTY, I. Implementing Ethereum trading front-runs on the
Bancor exchange in Python, Oct. 2017. https://medium.com/
@ivanbogatyy/front-running-bancor-in-150-lines-
of-python-with-ethereum-api-d5e2bfd0d798.
[11] BREIDENBACH, L., DAIAN, P., JUELS, A., AND SIRER,
E. G.
the Parity multisig bug,
Jul. 2017. http://hackingdistributed.com/2017/07/22/
deep-dive-parity-bug/.
An in-depth look at
[12] BREIDENBACH, L., DAIAN, P., JUELS, A., AND TRAM `ER,
To sink frontrunners, send in the submarines, Aug.
http://hackingdistributed.com/2017/08/28/
F.
2017.
submarine-sends/.
[13] BREIDENBACH, L., DAIAN, P., TRAM `ER, F., AND JUELS, A.
Enter the Hydra: Towards principled bug bounties and exploit-
resistant smart contracts. Cryptology ePrint Archive, Report
2017/1090, 2017. https://eprint.iacr.org/2017/1090.
[14] BUTERIN, V.
Ethereum: A next-generation smart contract
and decentralized application platform. https://github.com/
ethereum/wiki/wiki/White-Paper, 2014.
[15] BUTERIN, V. Hard fork completed, Jul. 2016.
https://
blog.ethereum.org/2016/07/20/hard-fork-completed/.
security,
https://blog.ethereum.org/2016/06/19/
Jun. 2016.
thinking-smart-contract-security/.
Thinking about
smart contract
[16] BUTERIN, V.
[17] CHEN, L., AND AVI ˇZIENIS, A. N-version programming: A
fault-tolerance approach to reliability of software operation. In
Fault-Tolerant Computing (1995), IEEE, p. 113.
1348    27th USENIX Security Symposium
USENIX Association
[18] DAIAN, P.
Analysis of
the DAO exploit,
Jun. 2016.
http://hackingdistributed.com/2016/06/18/
analysis-of-the-dao-exploit/.
[19] DELMOLINO, K., ARNETT, M., KOSBA, A., MILLER, A., AND
SHI, E. Step by step towards creating a safe smart contract:
In Financial
Lessons and insights from a cryptocurrency lab.
Cryptography (2016), Springer, pp. 79–94.
[20] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. Tor:
The second-generation onion router. Tech. rep., Naval Research
Lab Washington DC, 2004.
[21] ECKHARDT, D. E., CAGLAYAN, A. K., KNIGHT, J. C., LEE,
L. D., MCALLISTER, D. F., VOUK, M. A., AND KELLY, J. P. J.
An experimental evaluation of software redundancy as a strategy
for improving reliability. IEEE TSE 17, 7 (1991), 692–702.
[22] ECKHARDT, D. E., AND LEE, L. D. A theoretical basis for
the analysis of multiversion software subject to coincident errors.
IEEE TSE, 12 (1985), 1511–1517.
[23] ETHEREUM.
Security considerations.
Solidity documen-
http://solidity.readthedocs.io/en/develop/
tation.
security-considerations.html.
[24] ETHEREUM. Ethereum bug bounty, Jun. 2018.
bounty.ethereum.org/.
https://
[37] LUU, L.
PeaceRelay: Connecting the many Ethereum
https://medium.com/@loiluu/
blockchains, Jul. 2017.
22605c300ad3.
[38] LUU, L., CHU, D.-H., OLICKEL, H., SAXENA, P., AND HO-
BOR, A. Making smart contracts smarter. In ACM CCS (2016),
ACM, pp. 254–269.
[39] LUU, L., TEUTSCH, J., KULKARNI, R., AND SAXENA, P. De-
mystifying incentives in the consensus computer. In ACM CCS
(2015), ACM, pp. 706–719.
[40] MANNING, J. Ether.Camp’s HKG token has a bug and needs
to be reissued,
https://www.ethnews.com/
ethercamps-hkg-token-has-a-bug-and-needs-to-be-
reissued.
Jan. 2017.
[41] MARINO, B., AND JUELS, A. Setting standards for altering and
undoing smart contracts. In RuleML (2016), Springer, pp. 151–
166.
[42] MCKEEMAN, W. M. Differential testing for software. Digital
Technical Journal 10, 1 (1998), 100–107.
[43] MILLER, C.
Apple’s bug bounty program faltering due
Jul.
https://9to5mac.com/2017/07/06/apple-bug-
to researchers, new report claims,
to low payouts
2017.
bounty-program-payouts.
[25] EYAL, I., AND SIRER, E. G. Majority is not enough: Bit-
In Financial Cryptography (2014),
coin mining is vulnerable.
Springer, pp. 436–454.
[44] MURDOCH, S. J., AND LEWIS, S. Embedding covert channels
into TCP/IP. In Information hiding (2005), vol. 3727, Springer,
pp. 247–261.
[26] HIGH-TECH BRIDGE SA.
What’s your email security
12 dollars and 50 cents according to Yahoo, Sep.
https://www.htbridge.com/news/what_s_your_
worth?
2013.
email_security_worth_12_dollars_and_50_cents_
according_to_yahoo.html.
[27] HILDENBRANDT, E., SAXENA, M., ZHU, X., RODRIGUES, N.,
DAIAN, P., GUTH, D., AND ROSU, G. KEVM: A complete
semantics of the Ethereum Virtual Machine, 2017.
[28] HIRAI, Y. Formal veriﬁcation of Deed contract in Ethereum
name service, 2016.
[29] HIRAI, Y. Deﬁning the Ethereum Virtual Machine for interac-
tive theorem provers. In International Conference on Financial
Cryptography and Data Security (2017), Springer, pp. 520–535.
[30] JAKOBSSON, M., AND JUELS, A. X-cash: Executable digital
cash. In Financial Cryptography (1998), Springer, pp. 16–27.
[31] JUELS, A., KOSBA, A., AND SHI, E. The Ring of Gyges: In-
vestigating the future of criminal smart contracts. In ACM CCS
(2016), ACM, pp. 283–295.
[32] KATZENBEISSER, S., AND PETITCOLAS, F. Information hiding
techniques for steganography and digital watermarking. Artech
house, 2000.
[33] KNIGHT, J. C., AND LEVESON, N. G. An experimental evalua-
tion of the assumption of independence in multiversion program-
ming. IEEE Transactions on software engineering, 1 (1986), 96–
109.
[34] KNIGHT, J. C., AND LEVESON, N. G. A reply to the criticisms
of the Knight & Leveson experiment. ACM SEN 15, 1 (1990),
24–35.
[35] KOSBA, A., MILLER, A., SHI, E., WEN, Z., AND PAPAMAN-
THOU, C. Hawk: The blockchain model of cryptography and
privacy-preserving smart contracts. In IEEE S&P (2016), IEEE,
pp. 839–858.
[36] KRUPP, J., AND ROSSOW, C.
to automatically exploit smart contracts.
(2018).
teEther: Gnawing at Ethereum
In USENIX Security
[45] NAGY, L., FORD, R., AND ALLEN, W. N-version programming
for the detection of zero-day exploits. In IEEE Topical Confer-
ence on Cybersecurity (2006).
[46] RANDELL, B. System structure for software fault tolerance.
IEEE TSE, 2 (1975), 220–232.
[47] REDDIT USER “JUPITER0”. From the MAKER DAO slack:
“today we discovered a vulnerability in the ETH token wrap-
per which would let anyone drain it.”, Jun. 2016. https://
www.reddit.com/r/ethereum/comments/4nmohu/.
[48] RO, S. 29 instances of a major world stock market shutdown,
http://www.businessinsider.com/history-
Mar. 2014.
of-world-stock-market-breaks-2014-3.
[49] SOLANA, J.
$500K hack challenge backﬁres on blockchain
lottery SmartBillions, Oct. 2017. https://calvinayre.com/
2017/10/13/bitcoin/500k-hack-challenge-
backfires-blockchain-lottery-smartbillions/.
[50] STEINER,
the
J.
Parity multi-sig
Security is a process:
on
https://blog.ethcore.io/security-is-a-process-
a-postmortem-on-the-parity-multi-sig-library-
self-destruct/.
self-destruct,
library
A postmortem
2017.
[51] SWENDE, M. H. Blockchain frontrunning, Jul. 2017. http://
www.swende.se/blog/Frontrunning.html.
[52] SZABO, N. Formalizing and securing relationships on public
networks. First Monday 2, 9 (1997).
[53] TRAM `ER, F., ZHANG, F., LIN, H., HUBAUX, J.-P., JUELS, A.,
AND SHI, E. Sealed-glass proofs: Using transparent enclaves to
prove and sell knowledge. In IEEE EuroS&P (2017), pp. 19–34.
PayPal refuses to pay bug-ﬁnding teen, May
2013. https://nakedsecurity.sophos.com/2013/05/29/
paypal-refuses-to-pay-bug-finding-teen/.
[54] VAAS, L.
[55] VOGELSTELLER, F., AND BUTERIN, V.
ERC-20 token
Ethereum Improvement Proposal, Nov. 2015.
standard.
https://github.com/ethereum/EIPs/blob/master/
EIPS/eip-20-token-standard.md.
USENIX Association
27th USENIX Security Symposium    1349
[56] WIKIPEDIA.
Monty Hall
problem.
en.wikipedia.org/wiki/Monty_Hall_problem.
https://
[57] WOOD, G. Ethereum: A secure decentralised generalised trans-
action ledger, 2014.
[58] ZHANG, F., CECCHETTI, E., CROMAN, K., JUELS, A., AND
SHI, E. Town Crier: An authenticated data feed for smart con-
tracts. In ACM CCS (2016), ACM, pp. 270–282.
A Analysis of NNVP in the NASA Experi-
ment
We brieﬂy justify the results we obtained when applying
our NNVP paradigm for the experimental results in [21].
The experiment consisted of 20 different program ver-
sions evaluated on six work-loads (corresponding to dif-
ferent initial system states). For y ∈ [0,20], Eckhardt et
al. report g(y), the empirical proportion of inputs in each
of their test suites that induce a failure in exactly y out of
20 programs. They do not distinguish whether the fail-
ures are identical or not. Compared to our setting of Sec-
tion 2, Eckhardt et al. further consider a distribution over
programs. That is, the N programs to be aggregated are
chosen at random from the pool of 20 programs.
Following the notation and analysis for majority-
voting in [21], we deﬁne the empirical probability ˜Pmaj
that a majority of the N programs (randomly chosen from
the 20) fail simultaneously (see [21, Equation 6]):
(cid:18)20
(cid:19)−1
N
N
∑
l= N+1
2
(cid:19)(cid:18)20− y
(cid:18)y
(cid:19)
l
N − l
˜Pmaj =
20
∑
y=0
g(y) .
(5)
Similarly, we deﬁne the empirical probability ˜PNNVP
that all N chosen programs fail simultaneously on a given
input:
(cid:18)20
(cid:19)−1(cid:18) y
(cid:19)
N
N
˜Pall =
20
∑
y=0