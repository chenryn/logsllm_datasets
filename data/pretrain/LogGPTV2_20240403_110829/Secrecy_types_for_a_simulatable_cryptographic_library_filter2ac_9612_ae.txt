### 6. Correctness of the Type System

The type system is correct in the following sense:

**Theorem 1 (Preservation of Secrecy):** Let \( \text{ChanP} \) be the set of abstract channels used by all processes in the initial states of all machines \( P_i \). If there exists a typing \( \sigma \) with \( \text{dom}(\sigma) = \text{ChanP} \cup \{s, r\} \), such that \( \sigma \) satisfies the constraints on \( \sigma(c, s) \) and \( \sigma(c, r) \) as stated in Section 5, and \( \sigma \vdash I \) for all input processes \( I \) in the initial states of the machines \( P_i \) executing the protocols, then the execution of the configurations of the structure \( C_n' \) satisfies properties (I)–(V).

From this result and the preservation of secrecy of messages under simulatability, we immediately get:

**Corollary 2:** If the conditions of Theorem 1 are met, then the structure \( C_n \) preserves the secrecy of messages it receives over the channels \( \text{pinui} \).

#### Proof Sketch

For a detailed proof, refer to [34]. The main tool in showing the correctness of the type system is a result similar to subject reduction. We need to track the secrets given to participants by users and the orders of symmetric keys. We extend the definition of values (Figure 1) by adding \( v ::= \ldots \mid n \text{trk} \) and expressions by \( e ::= \ldots \mid n \text{trk} \), where \( n \in \mathbb{N} \). These values are called "tracked."

- If participant \( P_i \) has received a message \( n \) from the \( i \)-th user, this message is saved in the state of \( P_i \) as \( n \text{trk} \).
- We must ensure that conditions (I)–(III) hold for these values.
- We also modify some commands of \( TH_n \) to track "raw data" stored in its database. Specifically, the `store` command must be aware if its argument is tracked and store it differently from untracked values.
- The `retrieve` command must preserve the tracked status in its return values.
- In an `if`-statement, the values \( n \) and \( n \text{trk} \) are considered equal.

Additionally, when \( P_i \) sends the command `gen_symenc_key(i)` to \( TH_n \) to generate a new symmetric key of order \( i \), \( TH_n \) also stores \( i \) along with the newly created term denoting the key.

To define when a state \( C \) types according to \( \sigma \), we extend \( \sigma \) to the terms \( T \) in the database of \( TH_n \) and to the handles of terms returned to participants. We denote the type of the handle \( n \in \mathbb{N} \) given to the \( i \)-th participant by \( \sigma(n, i) \). We also extend the typing relation \( \vdash \).

- For each participant identity \( i \), we define a relation \( \vdash_i \) for expressions and processes.
- All rules in Figures 7–9 hold for \( \vdash_i \).
- We introduce axioms: \( \sigma \vdash_i n \text{trk} : \text{SecRD} \), \( \sigma \vdash_i n : \sigma(n, i) \), and \( \sigma \vdash_i \text{NF}(n \text{trk}) \).

We write \( \sigma \vdash C \) if the following holds:

1. **(A)** \( \sigma \vdash_i P \) for all (input) processes \( P \) in the state \( S_i \), for all \( i \). If some state \( S_i \) is active and the source of the message in that state is not some participant, the received message is a handle to some term \( T \) in the database of \( TH_n \) and \( \sigma(T) \leq \sigma(c, r) \), where \( c \) is the abstract channel name stored in \( S_i \). If there is a message awaiting sending, it is a pair where the first component indicates the abstract channel \( c \), the second component is the actual message, and the type of the second component, given by \( \sigma \), is less than or equal to \( \sigma(c, s) \). The same condition holds for messages in the buffers \( L_{i \to j} \) of secure and authentic channels. Additionally, the abstract channel recorded in the message must correspond to the security level of the concrete channel.

2. **(B)** If \( n \) has been given as a handle to the term \( T \) to some participant \( i \) and \( n \) is present in the state \( S_i \) (as part of an expression in a process or as a handle to the received message), then \( \sigma(n, i) = \sigma(T) \).

3. **(C)** Let \( \tau \) be the type of the term \( T \), as recorded by \( TH_n \). Depending on \( \tau \), the type \( \sigma(T) \) must be one of the following:
   - \( \tau = \text{data} \): \( \sigma(T) \) must be either `PubData` or `SecData`. If the stored data is \( n \text{trk} \), \( \sigma(T) \) must be `SecData`.
   - \( \tau = \text{list} \): \( \sigma(T) \) must be `List(\sigma(T_1), \ldots, \sigma(T_k))`, where \( T_1, \ldots, T_k \) are the immediate subterms of \( T \).
   - \( \tau = \text{nonce} \): \( \sigma(T) \) must be either `SNonce` or `Public`.
   - \( \tau = \text{skse} \): \( \sigma(T) \) must be either `Public` (if \( T \) was created by the adversary) or `SK_i(T)` for some \( T \), where \( i \) is the order of \( T \) (if \( T \) was created by an honest party).
   - \( \tau = \text{ske} \): \( \sigma(T) \) must be either `Public` or `DK(T)` for some \( T \). If \( T \) is generated by a protocol party, \( \sigma(T) \neq \text{Public} \).
   - \( \tau = \text{pke} \): Let \( T_0 \) be the term representing the corresponding secret key. If \( \sigma(T_0) = \text{Public} \), \( \sigma(T) = \text{Public} \). If \( \sigma(T_0) = \text{DK}(T) \), \( \sigma(T) = \text{EK}(T) \).
   - For other values of \( \tau \), \( \sigma(T) = \text{Public} \).

   A term is public if its type, according to \( \sigma \), is `Public`. Otherwise, it is secret.

4. **(D)** If the adversary has a handle to a term \( T \), then \( T \) is public.

5. **(E)** If a term \( T \) is public and its immediate subterm \( T_0 \) is secret (the subterms of a ciphertext are the plaintext and the public key of type `pke` or `pkse`), then the type of \( T \), as recorded by \( TH_n \), is `enc` or `symenc`, \( T_0 \) is the corresponding plaintext, and the decryption key is secret.

6. **(F)** If the type of the term \( T \), as recorded by \( TH_n \), is `symenc`, and the type (by \( \sigma \)) of the corresponding key is `SK_i(T)` for some type \( T \), then the type (by \( \sigma \)) of the plaintext must be a subtype of `List(T)`. If the type of \( T \) is `enc` and the type of the corresponding decryption key is `DK(T)`, then the type of the plaintext must be a subtype of `List(T)` or a public type.

With the definition of \( \sigma \vdash C \) in place, the following lemmas and theorems are straightforward to prove:

**Lemma 3:** Let \( C \) be a state of the configuration \( C \), let \( \sigma \vdash C \). Let \( e \) be a closed expression, \( v \) be a value, and \( e \xrightarrow{C:O+i} O' v \). Let \( C' = C O' \). Let \( \sigma \vdash_i e : T \). Then there exists a typing \( \sigma' \) of \( C' \) that extends \( \sigma \) (i.e., \( \text{dom}(\sigma') \supseteq \text{dom}(\sigma) \) and \( \sigma' \) agrees with \( \sigma \) on all arguments from \( \text{dom}(\sigma) \)), such that \( \sigma' \vdash C' \), and if \( T \in TH \), then \( v \) is either \( ? \) or contains a handle to a term \( T_v \), such that \( \sigma'(T_v) \leq T \).

**Lemma 4:** Let \( C \) be a state of the configuration \( C \), let \( \sigma \vdash C \). Let \( e \) be an expression and let \( v \) be the result of the \( i \)-th participant computing its value in the state \( C \). If \( \sigma \vdash_i \text{NF}(e) \) and \( e \) has a type according to \( \sigma \) and \( \vdash_i \), then \( v \neq ? \). If \( \sigma \vdash_i \text{AF}(e) \), then \( v = ? \).

**Theorem 5 (Subject Reduction):** Let \( C \) and \( C' \) be two states of the composition \( C \) and let \( \sigma \) be a typing such that \( \sigma \vdash C \) and \( C \rightarrow C' \). Then there exists a typing \( \sigma' \) extending \( \sigma \), such that \( \sigma' \vdash C' \).

### 7. Conclusions

We have presented a relatively simple type system for protocols using the Backes-Pfitzmann-Waidner (BPW) cryptographic library. This type system can be used to show that the protocol preserves the secrecy of input messages. Our results demonstrate that existing methods for (semi)automatically checking the security of protocols (including type systems, model-checking, program analysis, constraint solving, etc.) are applicable to the BPW library. Abadi and Blanchet [3] describe an automatic tool whose operation is equivalent to the type inference according to their type system; this tool should be readily modifiable for our type system. We are also confident that more complex type systems, such as those by Gordon and Jeffrey [26, 25, 27] for checking integrity properties in protocols using the Dolev-Yao model, can be adapted to the BPW library.

### 8. Acknowledgments

We are grateful to Cédric Fournet and the anonymous referees of CCS 2005 for their valuable comments. This research was supported by the Estonian Science Foundation, grant #6095.

### 9. References

[1] M. Abadi. Secrecy by Typing in Security Protocols. Journal of the ACM, 46(5):749–786, Sept. 1999.
[2] M. Abadi and B. Blanchet. Secrecy Types for Asymmetric Communication. Theoretical Computer Science, 298(3):387–415, 2003.
[3] M. Abadi and B. Blanchet. Analyzing Security Protocols with Secrecy Types and Logic Programs. Journal of the ACM, 52(1):102–146, Jan. 2005.
[4] M. Abadi and A. Gordon. A Calculus for Cryptographic Protocols: The Spi Calculus. Information and Computation, 148(1):1–70, Jan. 1999.
[5] M. Abadi and J. Jürjens. Formal Eavesdropping and Its Computational Interpretation. In proc. of TACS 2001 (LNCS 2215), pages 82–94.
[6] M. Abadi and P. Rogaway. Reconciling Two Views of Cryptography (The Computational Soundness of Formal Encryption). In proc. of International Conference IFIP TCS 2000 (LNCS 1872) pages 3–22.
[7] M. Backes. A Cryptographically Sound Dolev-Yao Style Security Proof of the Otway-Rees Protocol. In proc. of ESORICS 2004 (LNCS 3193) pages 89–108.
[8] M. Backes and B. Pfitzmann. A Cryptographically Sound Security Proof of the Needham-Schroeder-Lowe Public-Key Protocol. In proc. of FST TCS 2003 (LNCS 2914), pages 1–12.
[9] M. Backes and B. Pfitzmann. Symmetric Encryption in a Simulatable Dolev-Yao Style Cryptographic Library. In proc. of IEEE CSFW 2004, pages 204–218.
[10] M. Backes and B. Pfitzmann. Relating Symbolic and Cryptographic Secrecy. In proc. of IEEE S&P 2005.
[11] M. Backes, B. Pfitzmann, and M. Waidner. Symmetric Authentication within a Simulatable Cryptographic Library. In proc. of ESORICS 2003 (LNCS 2808), pages 271–290.
[12] M. Backes, B. Pfitzmann, and M. Waidner. A Universally Composable Cryptographic Library. In proc. of ACM CCS 2003, pages 220-230.
[13] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway. A Concrete Security Treatment of Symmetric Encryption. In proc. of FOCS 1997, pages 394–403.
[14] M. Bellare, A. Desai, D. Pointcheval, and P. Rogaway. Relations among Notions of Security for Public-Key Encryption Schemes. In proc of. CRYPTO '98 (LNCS 1462), pages 26–45.
[15] B. Blanchet. Automatic Proof of Strong Secrecy for Security Protocols. In proc. of IEEE S&P 2004, pages 86–100.
[16] R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In proc. of FOCS 2001, pages 136–145.
[17] R. Canetti and M. Fischlin. Universally Composable Commitments. In proc. of CRYPTO 2001 (LNCS 2139), pages 19–40.
[18] R. Canetti and J. Herzog. Universally Composable Symbolic Analysis of Cryptographic Protocols (The case of encryption-based mutual authentication and key exchange). Cryptology ePrint Archive: Report 2004/334, 22 Feb. 2005.
[19] R. Canetti and H. Krawczyk. Universally Composable Notions of Key Exchange and Secure Channels. In proc. of EUROCRYPT 2002 (LNCS 2332), pages 337–351.
[20] R. Canetti, Y. Lindell, R. Ostrovsky, and A. Sahai. Universally composable two-party and multi-party secure computation. In proc. of STOC 2002, pages 494–503.
[21] V. Cortier and B. Warinschi. Computationally Sound, Automated Proofs for Security Protocols. In proc. of ESOP 2005 (LNCS 3444), pages 157–171.
[22] D. Dolev and A. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, IT-29(12):198–208, Mar. 1983.
[23] O. Goldreich. Foundations of Cryptography (Basic Tools). Cambridge University Press, 2001.
[24] S. Goldwasser and S. Micali. Probabilistic Encryption. Journal of Computer and System Sciences, 28(2):270–299, Apr. 1984.
[25] A. D. Gordon and A. Jeffrey. Authenticity by Typing for Security Protocols. Journal of Computer Security, 11(4):451–520, 2003.
[26] A. D. Gordon and A. Jeffrey. Typing Correspondence Assertions for Communication Protocols. Theoretical Computer Science, 300(1-3):379–409.
[27] A. D. Gordon and A. Jeffrey. Types and Effects for Asymmetric Cryptographic Protocols. Journal of Computer Security, 12(3-4):435–483, 2004.
[28] J. Guttman, F. Thayer, and L. Zuck. The Faithfulness of Abstract Protocol Analysis: Message Authentication. In proc. of ACM CCS 2001, pages 186–195.
[29] J. Herzog, M. Liskov, and S. Micali. Plaintext Awareness via Key Registration. In proc. of CRYPTO 2003 (LNCS 2729), pages 548–564.
[30] R. Janvier, Y. Lakhnech, and L. Mazaré. Completing the Picture: Soundness of Formal Encryption in the Presence of Active Adversaries. In proc. of ESOP 2005 (LNCS 3444), pages 172–185.
[31] R. Janvier, Y. Lakhnech, and L. Mazaré. (De)Compositions of Cryptographic Schemes and their Applications to Protocols. Cryptology ePrint Archive, Report 2005/020, 1 Feb. 2005.
[32] P. Laud. Handling Encryption in Analyses for Secure Information Flow. In proc. of ESOP 2003 (LNCS 2618), pages 159–173.
[33] P. Laud. Symmetric Encryption in Automatic Analyses for Confidentiality against Active Adversaries. In proc. of IEEE S&P 2004, pages 71–85.
[34] P. Laud. Secrecy Types for a Simulatable Cryptographic Library. Research Report IT-LU-O-162-050823, Cybernetica, Aug. 2005.
[35] P. Laud and V. Vene. A Type System for Computationally Secure Information Flow. In proc. of FCT 2005 (LNCS 3623), pages 365–377.
[36] P. Lincoln, J. Mitchell, M. Mitchell, and A. Scedrov. A Probabilistic Poly-Time Framework for Protocol Analysis. In proc. of ACM CCS '98, pages 112–121.
[37] P. Lincoln, J. Mitchell, M. Mitchell, and A. Scedrov. Probabilistic Polynomial-Time Equivalence and Security Analysis. In proc. of FM '99 (LNCS 1708), pages 776–793.
[38] G. Lowe. Breaking and Fixing the Needham-Schroeder Public-Key Protocol Using FDR. In proc. of TACAS '96 (LNCS 1055), pages 147–166.
[39] C. Meadows. Formal Methods for Cryptographic Protocol Analysis: Emerging Issues and Trends. IEEE Journal on Selected Areas in Communication, 21(1):44–54, Jan. 2003.
[40] D. Micciancio and S. Panjwani. Adaptive Security of Symbolic Encryption. In proc. of TCC 2005 (LNCS 3378), pages 169–187.
[41] D. Micciancio and B. Warinschi. Completeness Theorems for the Abadi-Rogaway Logic of Encrypted Expressions. In Workshop on Issues in the Theory of Security - WITS 2002, Portland, Oregon, Jan. 2002.
[42] D. Micciancio and B. Warinschi. Soundness of Formal Encryption in the Presence of Active Adversaries. In proc. TCC 2004 (LNCS 2951), pages 133-151.
[43] R. M. Needham and M. D. Schroeder. Using Encryption for Authentication in Large Networks of Computers. Communications of the ACM, 21(12):993–999, Dec. 1978.
[44] B. Pfitzmann and M. Waidner. A Model for Asynchronous Reactive Systems and its Application to Secure Message Transmission. In IEEE S&P 2001, pages 184–200.
[45] C. Rackoff and D. R. Simon. Non-interactive Zero-Knowledge Proof of Knowledge and Chosen Ciphertext Attack. In proc. of CRYPTO '91 (LNCS 576), pages 433–444.
[46] A. Ramanathan, J. C. Mitchell, A. Scedrov, and V. Teague. Probabilistic Bisimulation and Equivalence for Security Analysis of Network Protocols. In proc. of FOSSACS 2004 (LNCS 2987), pages 468–483.
[47] A. Yao. Theory and Applications of Trapdoor Functions (Extended Abstract). In proc. of FOCS '82, pages 80–91.
[48] R. Zunino and P. Degano. A Note on the Perfect Encryption Assumption in a Process Calculus. In proc. of FOSSACS 2004 (LNCS 2987), pages 514–528.