---
author: Julia Evans
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4827
date: '2022-07-25 11:02:21'
editorchoice: false
excerpt: 当你在终端中按下键盘上的一个键（比如 Delete，或 Escape，或 a），发送了哪些字节？
fromurl: https://jvns.ca/blog/2022/07/20/pseudoterminals/
id: 14863
islctt: true
largepic: /data/attachment/album/202207/25/110217dlbzqvm9lltkq244.jpg
permalink: /article-14863-1.html
pic: /data/attachment/album/202207/25/110217dlbzqvm9lltkq244.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 当你在终端中按下键盘上的一个键（比如 Delete，或 Escape，或 a），发送了哪些字节？
tags:
- 终端
- 键盘
thumb: false
title: 当你在终端上按下一个键时会发生什么？
titlepic: true
translator: wxy
updated: '2022-07-25 11:02:21'
---
![](/data/attachment/album/202207/25/110217dlbzqvm9lltkq244.jpg)
我对 终端   Terminal 是怎么回事困惑了很久。
但在上个星期，我使用 [xterm.js](https://xtermjs.org/) 在浏览器中显示了一个交互式终端，我终于想到要问一个相当基本的问题：当你在终端中按下键盘上的一个键（比如 `Delete`，或 `Escape`，或 `a`），发送了哪些字节？
像往常一样，我们将通过做一些实验来回答这个问题，看看会发生什么 : )
### 远程终端是非常古老的技术
首先，我想说的是，用 `xterm.js` 在浏览器中显示一个终端可能看起来像一个新事物，但它真的不是。在 70 年代，计算机很昂贵。因此，一个机构的许多员工会共用一台电脑，每个人都可以有自己的 “终端” 来连接该电脑。
例如，这里有一张 70 年代或 80 年代的 VT100 终端的照片。这看起来像是一台计算机（它有点大！），但它不是 —— 它只是显示实际计算机发送的任何信息。
[![DEC VT100终端](/data/attachment/album/202207/25/110221ize6ezvaehez2za6.jpg)](https://commons.wikimedia.org/wiki/File:DEC_VT100_terminal.jpg "Jason Scott, CC BY 2.0 , via Wikimedia Commons")
当然，在 70 年代，他们并没有使用 Websocket 来做这个，但来回发送的信息的方式和当时差不多。
（照片中的终端是来自西雅图的    活电脑博物馆    Living Computer Museum ，我曾经去过那里，并在一个非常老的 Unix 系统上用 `ed` 编写了 FizzBuzz，所以我有可能真的用过那台机器或它的一个兄弟姐妹！我真的希望活电脑博物馆能再次开放，能玩到老式电脑是非常酷的。）
### 发送了什么信息？
很明显，如果你想连接到一个远程计算机（用 `ssh` 或使用 `xterm.js` 和 Websocket，或其他任何方式），那么需要在客户端和服务器之间发送一些信息。
具体来说：
**客户端** 需要发送用户输入的键盘信息（如 `ls -l`）。 **服务器** 需要告诉客户端在屏幕上显示什么。
让我们看看一个真正的程序，它在浏览器中运行一个远程终端，看看有哪些信息会被来回发送！
### 我们将使用 goterm 来进行实验
我在 GitHub 上发现了这个叫做 [goterm](https://github.com/freman/goterm) 的小程序，它运行一个 Go 服务器，可以让你在浏览器中使用 `xterm.js` 与终端进行交互。这个程序非常不安全，但它很简单，很适合学习。
我 [复刻了它](https://github.com/jvns/goterm)，使它能与最新的 `xterm.js` 一起工作，因为它最后一次更新是在 6 年前。然后，我添加了一些日志语句，以打印出每次通过 WebSocket 发送/接收的字节数。
让我们来看看在几个不同的终端交互过程中的发送和接收情况吧!
### 示例：ls
首先，让我们运行 `ls`。下面是我在 `xterm.js` 终端上看到的情况：
```
~:/play$ ls
file
~:/play$
```
以下是发送和接收的内容：（在我的代码中，我记录了每次客户端发送的字节：`sent: [bytes]`，每次它从服务器接收的字节：`recv: [bytes]`）
```
sent: "l"
recv: "l"
sent: "s"
recv: "s"
sent: "\r"
recv: "\r\n\x1b[?2004l\r"
recv: "file\r\n"
recv: "\x1b[~:/play$ "
```
我在这个输出中注意到 3 件事：
1. 回显：客户端发送 `l`，然后立即收到一个 `l` 发送回来。我想这里的意思是，客户端真的很笨 —— 它不知道当我输入`l` 时，我想让 `l` 被回显到屏幕上。它必须由服务器进程明确地告诉它来显示它。
2. 换行：当我按下回车键时，它发送了一个 `\r'（回车）符号，而不是`\n'（换行）。
3. 转义序列：`\x1b` 是 ASCII 转义字符，所以 `\x1b[?2004h` 是告诉终端显示什么或其他东西。我想这是一个颜色序列，但我不确定。我们稍后会详细讨论转义序列。
好了，现在我们来做一些稍微复杂的事情。
### 示例：Ctrl+C
接下来，让我们看看当我们用 `Ctrl+C` 中断一个进程时会发生什么。下面是我在终端中看到的情况：
```
~:/play$ cat
^C
~:/play$
```
而这里是客户端发送和接收的内容。
```
sent: "c"
recv: "c"
sent: "a"
recv: "a"
sent: "t"
recv: "t"
sent: "\r"
recv: "\r\n\x1b[?2004l\r"
sent: "\x03"
recv: "^C"
recv: "\r\n"
recv: "\x1b[?2004h"
recv: "~:/play$ "
```
当我按下 `Ctrl+C` 时，客户端发送了 `\x03`。如果我查 ASCII 表，`\x03` 是 “文本结束”，这似乎很合理。我认为这真的很酷，因为我一直对 `Ctrl+C` 的工作原理有点困惑 —— 很高兴知道它只是在发送一个 `\x03` 字符。
我相信当我们按 `Ctrl+C` 时，`cat` 被中断的原因是服务器端的 Linux 内核收到这个 `\x03` 字符，识别出它意味着 “中断”，然后发送一个 `SIGINT` 到拥有伪终端的进程组。所以它是在内核而不是在用户空间处理的。
### 示例：Ctrl+D
让我们试试完全相同的事情，只是用 `Ctrl+D`。下面是我在终端看到的情况：
```
~:/play$ cat
~:/play$
```
而这里是发送和接收的内容：
```
sent: "c"
recv: "c"
sent: "a"