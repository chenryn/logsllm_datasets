    Content-Length: [size_of_data]
    Connection: close
    inputvar=[fuzz_string]
## 了解fuzz协议
成功的fuzz测试通常需要将错误的格式或意外的数据输入应用程序的特定区域。 这是因为程序通常需要对用户提供的数据执行某种处理，以便触发可利用的崩溃。
这要求我们将fuzz值输入网络协议的特定区域，并且在该区域中应用程序找到“正确”的输入。
换句话说，要将“错误”数据放入“正确”的位置，我们需要了解我们用于与目标应用程序通信的网络协议的结构，以便将我们的模糊测试数据导入适用的应用领域。
可以通过多种方式获得对网络协议的理解 -通过查看RFC文档，使用客户端应用程序生成流量，使用Wireshark或tcpdump等工具捕获结果，对于非常简单的协议，可以直接与应用程序交互，看看它是如何工作的。
在此次例子中Vulnserver便是直接交互。由于我们是fuzz的Vulnserver，假设我们发送给程序的数据导致了程序的异常，我们希望看到它发生了什么，可以在调试器中运行该程序这样我们可以及时查看到崩溃现场。
在Windows系统上启动OllyDbg，载入vulnserver.exe，然后按F9键，点击OllyDbg工具栏上的Play按钮或从OllyDbg
Debug菜单中选择Run以允许程序 在调试器中运行。
此时，程序正常运行，但是如果我们在Vulnserver进程中触发崩溃，调试器将获得控制权并获取当前寄存器和堆栈的状态以便我们分析。  
现在，再Linux fuzz测试系统使用netcat连接到运行的Vulnserver。
以（-vv）运行netcat以获取有关连接的一些其他信息，禁用DNS解析（-n）。
    root@bt4r1vm:~# nc -nvv 192.168.56.101 9999
    (UNKNOWN) [192.168.56.101] 9999 (?) open
    Welcome to Vulnerable Server! Enter HELP for help.
我们在连接到Vulnserver后，我们可以输入HELP来获取一些帮助信息。 让我们尝试一下，看看会发生什么：
    root@bt4r1vm:~# nc -nvv 192.168.56.101 9999
    (UNKNOWN) [192.168.56.101] 9999 (?) open
    Welcome to Vulnerable Server! Enter HELP for help.
    HELP
    Valid Commands:
    HELP
    STATS [stat_value]
    RTIME [rtime_value]
    LTIME [ltime_value]
    SRUN [srun_value]
    TRUN [trun_value]
    GMON [gmon_value]
    GDOG [gdog_value]
    KSTET [kstet_value]
    GTER [gter_value]
    HTER [hter_value]
    LTER [lter_value]
    KSTAN [lstan_value]
    EXIT
好的，HELP为我们提供了一些被程序接受的有效命令列表。 让我们尝试输入其中一些命令，以及其他一些随机字符串，看看会发生什么。
    STATS
    UNKNOWN COMMAND
似乎不支持运行不带参数的STATS命令。 如果我们再次尝试它会怎么样，但这次在命令之后加入一些通用文本。
    STATS test
    STATS VALUE NORMAL
好的，这似乎有效。 如果我们改变STATS命令的情况呢？
    stats test
    UNKNOWN COMMAND
命令看起来区分大小写。 现在让我们尝试一些未列为支持命令的其他指令。
    BLAH
    UNKNOWN COMMAND
似乎任何不正确/不支持的命令都会生成UNKNOWN COMMAND响应。 现在让我们尝试另一个支持的命令，带上随机参数。
    TRUN hhh
    TRUN COMPLETE
这也给出了不同的回应。 现在让我们看看HELP是否可以获得更多信息。
    HELP STATS
    Command specific help has not been implemented
不，没有什么帮助。
正如你所看到的那样，我试图通过这种方式询问程序接受了哪些类型的消息来完成工作，以为构建我的fuzz测试请求做准备。根据我们到目前为止看到的情况，似乎该程序支持许多“命令”，并且这些命令中的有些命令需要输入参数来进行操作。
考虑到这一点，我们可以将fuzz数据插入应用程序的支持命令里：
  * 代替支持的命令
  * 作为某些带参数的命令的参数（STATS，RTIME，LTIME等）。
  * 作为某些不带参数的命令的参数，这些命令不表示它们支持参数（HELP，也可能是EXIT）。
现在我们已经了解了如何与Vulnserver应用程序进行通信，以及在Vulnserver“协议”中我们可以插入我们的fuzz数据的位置。
这是一个非常简单的协议分析示例，但我相信它可以很好地演示一般的预fuzz化过程 -我们确定程序如何从用户接收输入数据，并使用该方法将fuzz数据插入到应用程序中。
## 使用SPIKE fuzz Vulnserver
所以现在让我们使用从分析Vulnserver“协议”中获得的信息来实际使用SPIKE fuzzer。
在上一节中，我们发现，发送模糊字符串代替支持的命令可能很有用，并且作为支持命令的参数可能很有用，不支持参数命令的参数。 让我们先从最简单的情况开始 -发送一个fuzz字符串代替支持的命令。
实现此目的的SPIKE脚本如下所示：
    s_readline(); //print received line from server
    s_string_variable("COMMAND"); //send fuzzed string
在这里，我们正在等待从连接时看到的服务器收到初始“欢迎”消息，然后我们将模糊字符串发送到应用程序。将此内容保存为Linux
fuzzing系统上的磁盘“vscommand.spk”。
在我们实际使用SPIKE启动此脚本之前，让我们在Linux系统上使用Wireshark启动数据包捕获，以便我们可以看到SPIKE实际发送的内容。
我的Vulnserver的IP地址为192.168.56.101默认端口为9999，因此我将设置捕获过滤器以忽略所有其他流量。 过滤器如下所示 -如果您的目标系统位于不同的IP地址上，或者Vulnserver正在侦听其他端口，请相应地调整过滤器。
host 192.168.56.101 and tcp port 9999  
启动Wireshark捕获，然后使用如下所示的命令启动SPIKE模糊器。
此命令假定您正在从BackTrack执行模糊测试，BackTrack默认将SPIKE存储在/ pentest / fuzzers /
spike中，并且已将vscommand.spk文件保存到当前工作目录中。
如果您已经下载了SPIKE，那么generic_send_tcp将位于SPIKE归档内的SPIKE / SPIKE /
src目录中（有关安装SPIKE的一些详细信息，请参阅“要求和系统设置”部分）。
    root@bt4r1vm:~/vulnserver# /pentest/fuzzers/spike/generic_send_tcp 192.168.56.101 9999 vscommand.spk 0 0
    Total Number of Strings is 681
    Fuzzing
    Fuzzing Variable 0:0
    line read=Welcome to Vulnerable Server! Enter HELP for help.
    Fuzzing Variable 0:1
    Variablesize= 5004
    Fuzzing Variable 0:2
    line read=Welcome to Vulnerable Server! Enter HELP for help.
    Variablesize= 5005
    [...SNIP...]
    Fuzzing Variable 0:2041
    line read=Welcome to Vulnerable Server! Enter HELP for help.
    Fuzzing Variable 0:2042
    line read=Welcome to Vulnerable Server! Enter HELP for help.
    Fuzzing Variable 0:2043
    line read=Welcome to Vulnerable Server! Enter HELP for help.
    Done.
如果你让它继续运行，这个SPIKE脚本应该在几分钟后完成，如果你检查在其调试器中运行的VulnServer，你会发现它似乎运行正常 - 没有崩溃。
所以看来只是发送fuzz数据代替支持的命令不会导致VulnServer崩溃（或者至少发送SPIKE生成的坏字符串代替命令不会导致Vulnserver崩溃。）没关系，我们在程序中还有很多其他区域可以插入fuzz数据，但在我们继续之前，让我们看一下我们在Wireshark中捕获的数据，这样我们就可以看到SPIKE正在做什么。
向上滚动到Wireshark窗口的最顶部，选择第一个数据包，然后右键单击并从菜单中选择Follow TCP
Stream，我们应该能够看到发送的第一个SPIKE的内容。  
第一个SPIKE如下所示。 您可以看到这里发生了什么，SPIKE只是从服务器收到欢迎消息，然后将字符串COMMAND发送到应用程序。
这个字符串并非巧合，它正是我们在SPIKE脚本文件的s_string_variable命令中指定的字符串。
到目前为止，SPIKE还没有做任何特别有趣的事情，但也许当我们看到其他一些请求时....  
在我们继续之前要注意的另一件事是我们看到服务器对我们提供的输入的响应 - 即字符串“UNKNOWN COMMAND” - 被发送回客户端。
这表明在从SPIKE接收到该字符串后，Vulnserver应用程序仍然能够发回响应 - 这意味着它在此阶段没有崩溃。
后来当我们到达实际导致崩溃的程度时，这种类型的信息可以用来识别哪个模糊字符串造成崩溃。
让我们看看下一个请求。 点击Follow TCP Stream窗口底部的Filter Out This
Stream按钮，然后右键单击新过滤的Wireshark视图中的第一个数据包，再次选择Follow TCP Stream。 这次我们看到更有趣的东西。
不是我们在上一个请求中看到的文本“COMMAND”，而是SPIKE发送了一个非常长的大写字母“A”字符串，前面是一些其他随机字符。  
如果您感到好奇，可以继续查看SPIKE发送的其他一些fuzz 数据。
这里需要知道的是，每次在SPIKE脚本中使用s_string_variable命令时，SPIKE将首先在命令后发送括号中指定的文本，然后它将遍历其预定义的fuzz字符串列表，将列表项一个一个发送到应用程序，直到它完成。如果脚本中有多个变量，它将依次遍历每个变量的所有可能值。
但是，你无法使用一个SPIKE脚本创建多个单独的SPIKES。如果您有多种不同的消息类型，其中包含您想要fuzz的固定数据，例如表示各种支持的命令（如STATS，RTIME，LTIME等）的字符串，则需要使用使用构造指定此数据的单个SPIKE脚本
例如s_string命令。
这演示了运行单个SPIKE脚本的基本过程，但对于Vulnserver，程序中还有许多其他区域需要fuzz，并且当运行每个所需的SPIKE脚本以查看程序崩溃时，单独执行和查看这些脚本并不方便。