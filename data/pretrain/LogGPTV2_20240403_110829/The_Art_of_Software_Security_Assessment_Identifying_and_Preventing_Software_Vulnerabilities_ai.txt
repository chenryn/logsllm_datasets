environments, the Filemon, Regmon, WinObj, and Process Explorer utilities 
(from www.sysinternals.com) are helpful for this activity. 
Scanning Probe the application on any listening ports, RPC interfaces, or 
similar external interfaces. Try grabbing banners to validate the protocols in 
use and identify any authentication requirements. For HTTP applications, try 
spidering links and identifying as many unique entry points as possible. 
Application Architecture Modeling 
After you have some background information, you need to begin examining the 
application architecture. This phase involves familiarizing yourself with how the 
software is structured and what components can affect its overall security. These 
steps help identify design concerns and let you know where to focus your energies 
during the implementation review. You build this knowledge by reviewing existing 
documentation of the application model and developing new models as required. 
Every piece of software is modeled to some extent during its development; the only 
difference is whether the models are ever formally recorded. So you need to 
understand the types of modeling in common use and how you can develop your own. 
Unified Markup Language 
Unified Markup Language (UML) is a specification developed by the Object 
Management Group (OMG; www.omg.org/uml/) to describe many different aspects 
of how an application operates from a fairly high level. It includes diagrams to 
describe information flow, interaction between components, different states the 
application can be in, and more. Of particular interest in this phase are class diagrams, 
component diagrams, and use cases. The following list briefly describes these types 
of diagrams so that you get a feel for what they're trying to convey. If you're 
unfamiliar with UML, picking up one of the myriad books available on the subject is 
strongly recommended. Because of UML's complexity, explaining it in depth is far 
beyond the scope of this chapter. 
Note 
UML has gone through several revisions. The currently accepted standard is UML 2.0. 
Class diagrams A class diagram is a UML diagram for modeling an 
object-oriented (OO) solution. Each object class is represented by a rectangle 
that includes the methods and attributes in the class. Relationships between 
objects are then represented by lines between classes. Lines with arrows on 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
67 
one end define parents in an inheritance hierarchy; unadorned lines (no 
arrows) with numbers near the ends indicate a cardinality relationship. 
Class diagrams can be helpful when you're trying to understand relationships 
in a complex module. They essentially spell out how an application is modeled 
and how classes interact with each other. Realistically, however, you won't 
encounter them all that often unless you're performing in-house code reviews. 
By analyzing an OO solution, you can roughly construct class diagrams. 
Although doing so might seem like a waste of time, they can be useful when 
you need to come back and review the same software later or when you 
perform an initial high-level review and then hand off various code-auditing 
tasks to other members of a team. 
Component diagrams Component diagrams divide a solution into its 
constituent components, with connectors indicating how they interact with 
each other. A component is defined as an opaque subsystem that provides an 
independent function for a solution. Examples of a component include a 
database, a parser of some description, an ordering system, and so forth. A 
component diagram offers a less complex view of a system than class 
diagrams do because components generally represent a complete 
self-contained subsystem, often implemented by many classes and modules. 
A component diagram exposes interfaces (denoted by protruding circles) and 
uses interfaces of other components (denoted by an empty semicircle). 
Components are tied together through these interface exposures or by means 
of association lines, which indicate that two components are inherently 
interrelated and don't rely on exposed interfaces. Component diagrams also 
allow two components to be joined together by realization. A realization 
simply means that the functionality required by one component is a subset of 
the functionality exposed by an interface of another component. Realization is 
represented by a dotted line. 
In an assessment, a component diagram can be valuable for defining the 
high-level view of a system and its intercomponent relationships. It can be 
especially useful when you're trying to develop the initial context of a threat 
model because it eliminates much of a system's complexity and allows you to 
focus on the big picture. 
Use cases A use case is possibly the most nebulous component of the UML 
standard. There are no strict requirements for what a use case should look like 
or include. It can be represented with text or graphics, and developers choose 
which they prefer. Fundamentally, a use case is intended to describe how an 
application should be used, so a good set of use cases can come in handy. 
After all, when you know what an application should be doing, addressing 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
68 
what it shouldn't be doing is easier. When reviewing use cases, keep an eye 
out for any developer assumptions about the system's behavior. 
Data Flow Diagrams 
A number of diagramming tools can aid in understanding a system, but the data flow 
diagram (DFD) is one of the most effective for security purposes. These diagrams 
are used to map how data moves through a system and identify any affected 
elements. If done properly, the DFD modeling process accounts not only for the 
application functionality exposed directly to external sources, but also the 
functionality that's exposed indirectly. This modeling process also accounts for 
mitigating factors in a system's design, such as additional security measures 
enforcing trust boundaries. Figure 2-2 shows the five main elements of a DFD, which 
are summarized in the following list: 
Figure 2-2. DFD elements 
[View full size image] 
Processes Processes are opaque logic components with well-defined input 
and output requirements. They are represented with a circle, and groups of 
related processes are represented by a circle with a double border. Multiple 
process groups can be further decomposed in additional DFDs for each single 
process. Although processes aren't typically assets, they can be in some 
contexts. 
Data stores Data stores are information resources the system uses, such as 
files and databases. They are represented by open-ended rectangular boxes. 
Usually, anything represented in this way in a DFD is considered a system 
asset. 
External entities These elements, described previously in "Information 
Collection," are "actors" and remote systems that communicate with the 
system over its entry points. They are represented by closed rectangles. 
Identifying external entities helps you isolate system entry points quickly and 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
69 
determine what assets are externally accessible. External entities might also 
represent assets that need to be protected, such as a remote server. 
Data flow The flow of data is represented by arrows. It indicates what data is 
sent through what parts of the system. These elements can be useful for 
discovering what user-supplied data can reach certain components so that you 
can target them in the implementation review. 
Trust boundary Trust boundaries are the boundaries between different entities 
in the system or between entire systems. They are represented by a dotted 
line between the two components. 
Figure 2-3 shows how you can use DFD elements to model a system. It represents a 
simplified model of a basic Web application that allows users to log in and access 
resources stored in a database. Of course, DFDs look different at various levels of an 
application. A simple, high-level DFD that encapsulates a large system is referred to 
as a context diagram. The Web site example is a context diagram because it 
represents a high-level abstraction that encapsulates a complex system. 
Figure 2-3. A DFD context diagram 
[View full size image] 
However, your analysis generally requires you to decompose the system further. 
Each successive level of decomposition is labeled numerically, starting from zero. A 
level-0 diagram identifies the major application subsystems. The major subsystems 
in this Web application are distinguished by the user's authentication state. This 
distinction is represented in the level-0 diagram in Figure 2-4. 
Figure 2-4. A DFD level-0 diagram of the login process 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
70 
Depending on the complexity of a system, you may need to continue decomposing. 
Figure 2-5 is a level-1 diagram of the Web application's login process. Normally, you 
would only progress beyond level-0 diagrams when modeling complex subsystems. 
However, this level-1 diagram provides a useful starting point for using DFDs to 
isolate design vulnerabilities. 
Figure 2-5. A DFD level-0 diagram of the login process 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
71 
When preparing for an implementation review, you can use these diagrams to model 
application behavior and isolate components. For instance, Figure 2-6 shows the login 
process altered just a bit. Can you see where the vulnerability is? The way the login 
process handles an invalid login has been changed so that it now returns the result of 
each phase directly back to the client. This altered process is vulnerable because 
attackers can identify valid usernames without logging in successfully, which can be 
extremely useful in attempting a brute-force attack against the authentication 
system. 
Figure 2-6. A DFD showing a login vulnerability 
[View full size image] 
By diagramming this system, you can more easily identify its security components. In 
this example, it helped you isolate a vulnerability in the way the system authenticates. 
Of course, the login example is still fairly simple; a more complex system might have 
several layers of complexity that must be encapsulated in multiple DFDs. You 
probably don't want model all these layers, but you should decompose different 
components until you've reached a point that isolates the security-relevant 
considerations. Fortunately, there are tools to assist in this process. Diagramming 
applications such as Microsoft Visio are useful, and the Microsoft Threat Modeling Tool 
is especially helpful in this process. 
Threat Identification 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
72 
Threat identification is the process of determining an application's security 
exposure based on your knowledge of the system. This phase builds on the work you 
did in previous phases by applying your models and understanding of the system to 
determine how vulnerable it is to external entities. For this phase, you use a new 
modeling tool called attack trees (or threat trees), which provide a standardized 
approach for identifying and documenting potential attack vectors in a system. 
Drawing an Attack Tree 
The structure of an attack tree is quite simple. It consists of a root node, which 
describes the attacker's objective, and a series of subnodes that indicate ways of 
achieving that objective. Each level of the tree breaks the steps into more detail until 
you have a realistic map of how an attacker can exploit a system. Using the simple 
Web application example from the previous section, assume it's used to store 
personal information. Figure 2-7 shows a high-level attack tree for this application. 
Figure 2-7. Attack tree example 
[View full size image] 
As you can see, the root node is at the top with several subnodes underneath. Each 
subnode states an attack methodology that could be used to achieve the goal stated 
in the root node. This process is further decomposed, as necessary, into subnodes 
that eventually define an attack. Looking at this diagram, you should start to notice 
the similarities between attack trees and DFDs. After all, an attack tree isn't 
developed in a vacuum. It's best created by walking through a DFD and using the 
attack tree to note specific concerns. As an example, notice how the branch leading to 
subnode 1.2.1 follows the same reasoning pattern used previously in analyzing the 
DFD of the flawed login process. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
73 
As with DFDs, you want to continue decomposing attack trees only along 
security-relevant paths. You need to use your judgment and determine what paths 
constitute reasonable attack vectors and what vectors are unlikely. Before getting 
into that topic, however, continue to the next section for a more detailed description 
of the attack tree structure. 
Node Types 
You might have noticed some strange markings in the lines connecting each node to 
its children (such as nodes 1.2.1.1 and 1.2.1.2). The arc between these node 
connectors indicates that the child nodes are AND nodes, meaning both conditions of 
the child node must be met to continue evaluating the vector. A node without an arc 
is simply an OR node, meaning either branch can be traversed without any additional 
condition. Referring to Figure 2-7, look at the brute-force login vector in node 1.2.1. 
To traverse past this node, you must meet the following conditions in the two 
subnodes: 
Identify username 
Identify user password 
Neither step can be left out. A username with no password is useless, and a password 
without the associated username is equally useless. Therefore, node 1.2.1 is an AND 
node. 
Conversely, OR nodes describe cases in which an objective can be reached by 
achieving any one of the subnodes. So the condition of just a single node must be met 
to continue evaluating the child nodes. Referring to Figure 2-7 again, look at the 
objective "Log in as target user" in node 1.2. This objective can be achieved with 
either of the following approaches: 
Brute-force login 
Steal user credentials 
To log in as the user, you don't have to achieve both goals; you need to achieve only 
one. Therefore, they are OR nodes. 
Textual Representation 
You can represent attack trees with text as well as graphics. Text versions convey 
identical information as the graphical versions but sometimes aren't as easy to 
visualize (although they're more compact). The following example shows how you 
would represent the attack tree from Figure 2-7 in a text format: 
1. Adversary gains access to a user's personal information 
   OR  1.1 Gain direct access to the database 
           1.1.1 Exploit a hole in system application or kernel 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
74 
       1.2 Log in as target user 
           OR 1.2.1 Brute-force login 
              AND 1.2.1.1 Identify username 
                  1.2.1.2 Identify user password 
              1.2.2 Steal user credentials 
       1.3 Hijack user session 
               1.3.1 Steal user session cookie 
       1.4 Passively intercept personal data 
           AND 1.4.1 Identify user connection initiation 
               1.4.2 Sniff network traffic for personal data 
As you can see, all the same information is present. First, the root node objective is 
stated as the heading of the attack tree, and its immediate descendants are 
numbered and indented below the heading. Each new level is indented again and 
numbered below its parent node in the same fashion. The AND and OR keywords are 
used to indicate whether nodes are AND or OR nodes. 
Threat Mitigation 
Part of the value of an attack tree is that it allows you to track potential threats. 
However, tracking threats isn't particularly useful if you have no way of identifying 
how they are mitigated. Fortunately, attack trees include a special type of node for 
addressing that concern: a circular node. Figure 2-8 shows a sample attack tree with 
mitigating factors in place. 
Figure 2-8. An attack tree with mitigation nodes 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
75 
Three mitigation nodes have been added to this attack tree to help you realize that 
these vectors are less likely avenues of attack than the unmitigated branches. The 
dashed lines used in one mitigation node are a shorthand way to identify a branch as 
an unlikely attack vector. It doesn't remove the branch, but it does encourage you to 
direct your focus elsewhere. 
One final note on mitigation: You don't want to look for it too early. Identifying 
mitigating factors is useful because it can prevent you from pursuing an unlikely 
attack vector. However, you don't want to get lulled into a false sense of security and 
miss a likely branch. So consider mitigation carefully, and make sure you perform 
some validation before you add it to your attack tree. 
Documentation of Findings 
Now that the investigative work is done, you need to document what you discovered. 
In the documentation phase, you will review the threats you uncovered in the 
previous phase and present them in a formal manner. For each threat you uncovered, 
you need to provide a brief summary along with any recommendations for eliminating 
the threat. To see how this process works, use the "Brute-force login" threat (node 
1.2.1) from your sample attack tree. This threat could allow an attacker to log in with 
another user's credentials. The documentation of your threat summary would look 
similar to Table 2-1. 
Table 2-1. Threat Summary 
Threat 
Brute-force login. 
Affected 
Component 
Web application login component. 
Description 
Clients can brute-force attack usernames and passwords by 
repeatedly connecting and attempting to log in. This threat is 
increased because the application returns different error messages for 
invalid username and passwords, making usernames easier to 
identify. 
Result 
Untrusted clients can gain access to a user account and, therefore, 
read or modify sensitive information. 
Mitigation 
Strategies 
Make error messages ambiguous so that an attacker doesn't know 
whether the username or password is invalid. Lock the user account 
after repeated failed login attempts. (Three or five attempts would be 
appropriate.) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
76 
All the information for the brute-force login threat is neatly summarized in a table. In 
the next part of this phase, you extend this table to include some additional 
information on the risk of the threat. 
DREAD Risk Ratings 
Real-world applications are generally much larger and more complex in both design 
and implementation than the examples used in this chapter. Increased size and 
complexity creates a broad spectrum of attack vectors in a variety of user classes. As 
a result, you can usually come up with a long list of potential threats and possible 
recommendations to help mitigate those threats. In a perfect world, designers could 
systematically go about addressing each threat and fixing potential issues, closing 
each attack vector as necessary. However, certain business realities might not allow 
mitigating every identified vector, and almost certainly not all at once. Clearly, some 
sort of prioritization is needed to help address the more serious vectors before 
worrying about the less important ones. By assigning a threat severity rating, you can 
rank each uncovered threat based on the risk it poses to the security of the 
application and associated systems. This rating can then be used as a guideline for 
developers to help decide which issues take precedence. 
You can choose to rate threats in a number of different ways. What's most important 
is that you incorporate the exposure of the threat (how easy is it to exploit and who 
the vector is available to) and the amount of damage incurred during a successful 