title:An Architecture for Specification-Based Detection of Semantic Integrity
Violations in Kernel Dynamic Data
author:Nick L. Petroni Jr. and
Timothy Fraser and
Aaron Walters and
William A. Arbaugh
An Architecture for Speciﬁcation-Based Detection of Semantic Integrity
Violations in Kernel Dynamic Data
Nick L. Petroni, Jr.†
PI:EMAIL
Department of
Computer Science
Timothy Fraser†
AAron Walters‡
William A. Arbaugh†
PI:EMAIL
PI:EMAIL
PI:EMAIL
Institute for Advanced
Computer Studies
Department of
Computer Science
Department of
Computer Science
† University of Maryland, College Park, MD 20742, USA
‡ Purdue University, West Lafayette, IN 47907, USA
Abstract
The ability of intruders to hide their presence in com-
promised systems has surpassed the ability of the current
generation of integrity monitors to detect them. Once
in control of a system, intruders modify the state of
constantly-changing dynamic kernel data structures to
hide their processes and elevate their privileges. Current
monitoring tools are limited to detecting changes in nom-
inally static kernel data and text and cannot distinguish
a valid state change from tampering in these dynamic
data structures. We introduce a novel general architec-
ture for deﬁning and monitoring semantic integrity con-
straints using a speciﬁcation language-based approach.
This approach will enable a new generation of integrity
monitors to distinguish valid states from tampering.
1 Introduction
The foundation of
the Trusted Computing Base
(TCB) [26] on most currently deployed computer sys-
tems is an Operating System that is large, complex, and
difﬁcult to secure. Upon penetrating a system, sophisti-
cated intruders often tamper with the Operating System’s
programs and data to hide their presence from legiti-
mate administrators and to provide backdoors for easy
re-entry. The Operating System kernel itself is a favored
target, since a kernel modiﬁed to serve the attacker ren-
ders user-mode security programs ineffective. Many so-
called ”rootkits” are now available to automate this tam-
pering.
Recent advances in defensive technologies, such as
external kernel integrity monitors [17, 37, 13, 29] and
code attestation/execution veriﬁcation architectures [18,
34, 33], have demonstrated their ability to detect the
kinds of tampering historically performed by rootkits.
Unfortunately, rootkit technology has already moved to
a more sophisticated level. While these defensive tech-
nologies have focused on the relatively straightforward
task of detecting tampering in static and unchanging re-
gions of kernel text and data structures—typical targets
of the previous generation of rootkits—the new rootkit
generation has evolved to more sophisticated tampering
behavior that targets dynamic parts of the kernel. Seek-
ing to avoid detection and subsequent removal from the
system, clever intruders can hide their processes from le-
gitimate administrators by modifying links in the Linux
and Windows XP/2000 kernels’ process tables. Because
the state of the process table changes continuously during
kernel runtime, identifying these modiﬁed links is difﬁ-
cult for the current generation of kernel integrity moni-
toring tools that focus only on static data. Although this
targeting of dynamic data was not entirely unanticipated
by researchers [37, 13], there has yet to be a general ap-
proach for dealing with this threat.
In response to a continually advancing threat, we in-
troduce an architecture for the runtime detection of se-
mantic integrity violations in objects dynamically allo-
cated in the kernel heap or in static objects that change
depending upon the kernel state. This new approach is
the ﬁrst to address the issue of dynamic kernel data in
a comprehensive way.
In order to be effective against
the latest rootkit technology, defensive mechanisms must
consider both static and dynamic kernel data, as changes
in either can lead to the compromise of the whole. We
believe our approach provides an excellent complement
to state of the art binary integrity systems.
Our approach is characterized by the following
properties:
Speciﬁcation-based. The previous generation’s detec-
tion methods, which can be characterized by calculating
hashes of static kernel data and text and comparing the
result to known-good values, is not applicable to the
continuously changing dynamic data structures now
being targeted by rootkits.
Instead of characterizing
a correct state using hashes, our architecture relies
upon an expert to describe the correct operation of
USENIX Association
Security ’06: 15th USENIX Security Symposium
289
the system via an abstract model for low-level data
structures and the relationships between them. This
model is a simpliﬁed description of security-relevant
data structures and how they interoperate. Additionally,
part of the speciﬁcation is a set of constraints that
must hold at runtime in order for the system to remain
correct with regard to the semantic integrity of the kernel.
Automatic. The architecture includes a compiler that
automatically translates the high-level speciﬁcation
language into low-level machine code to perform the
checks. This automation allows experts to maximize the
use of their time writing the speciﬁcation and verifying
its correctness, rather than writing low-level code.
Independent. Our architecture does not depend upon
the correctness of the monitored kernel in order to detect
that something is wrong.
Instead, our approach relies
on a trustworthy monitor that has direct access to kernel
memory on the protected system and does not rely on
the protected kernel’s correctness.
Monitor agnostic. While our prototype implemen-
tation utilizes a PCI-based kernel monitor similar to
Copilot [29] as the low-level mechanism for accessing
system resources, our architecture allows for the use of
any monitor with access to kernel memory that can also
provide isolation. Other possibilities include software-
based systems such as Pioneer [33] or a virtual machine
introspection approach [13]. The focus of this work is
on the type of checks performed, not the mechanism
used to perform them. As such, our architecture is
general enough to support different types of monitors,
both software- and hardware-based.
Extensible response. The architecture is designed to
allow speciﬁcation writers to decide how the system
should react to the violation of a particular constraint.
At a minimum, most cases will require administrator
notiﬁcation. Currently, this is the only response we have
implemented. However, the possibility for extension
to other responses is apparent, particularly given the
amount of forensic information available to our monitor.
We have demonstrated the feasibility of our approach
by writing sample speciﬁcations for two different kernel
subsystems in the Linux 2.6 kernel: the process (task) ac-
counting system and the SELinux [22] mandatory access
control (MAC) system’s access vector cache (AVC). We
have tested the system’s effectiveness at detecting real-
world attacks on dynamic kernel data in each subsystem,
including a publicly available rootkit for the Linux ker-
nel. Our results show that low-level code based on our
initial speciﬁcations successfully detects the example at-
tacks, which include data-only process hiding and mod-
iﬁcations of SELinux access control results directly in
memory.
2 Threats Against Dynamic Kernel Data
This section describes two examples of how intrud-
ers might, after gaining full administrative control of a
GNU/Linux system, modify some of the kernel’s dy-
namic data structures to their advantage. In the ﬁrst ex-
ample, an intruder removes tasks from the Linux kernel’s
all-tasks list in order to hide them from the system’s legit-
imate administrators. In the second example, an intruder
modiﬁes an entry in the Linux kernel’s SELinux access
vector cache to temporarily elevate their privileges and
disable auditing without making visible changes to the
SELinux policy conﬁguration. Note that neither of these
examples expose ﬂaws in the Linux kernel or its SELinux
security module. These examples represent the potential
acts of an intruder who has already gained full control
of the system—perhaps by exploiting the trust or care-
lessness of the system’s human operators in a manner
entirely outside the scope of the system’s technological
safeguards.
2.1 Data-only Process Hiding
Rootkits have evolved beyond the historical methods of
hiding processes, which included modifying the text of
the ps program to lie to legitimate administrators or
causing the kernel itself to lie by replacing the normally-
static values of kernel text or function pointers, such
as the system call vector or jump tables in the /proc
ﬁlesystem, with the addresses of malicious functions.
Even the most sophisticated threats became easy to de-
tect by monitors that could compare the modiﬁed values
against a known-good value—after all, in a healthy sys-
tem, these values should never change [29].
Unfortunately, attackers do not need to modify any
kernel code to hide processes within a running kernel.
In fact, they do not need to rely on manipulating the con-
trol ﬂow of the kernel at all. Instead, adversaries have
found techniques to hide their processes even from cor-
rect, unmodiﬁed kernel code. By directly manipulating
the underlying data structures used for process account-
ing, an attacker can quickly and effectively remove any
desired process from the view of standard, unmodiﬁed
administrator tools. While the process remains hidden
for accounting purposes, it continues to execute as nor-
mal and will remain unaffected from the perspective of
the scheduler. To understand how this state is achieved,
we provide a brief overview of Linux 2.6 process man-
agement.
290
Security ’06: 15th USENIX Security Symposium
USENIX Association
Modified All−Tasks linked−list
init_task
Hidden Process
run_list
tasks
run_list
tasks
run_list
tasks
run_list
tasks
pid
gid
pid
gid
pid
gid
pid
gid
uids
uids
uids
uids
per_cpu__runqueues
active
expired
prio_array
bitmap
array[0]
array[1]
array[2]
...
array[n]
Running Tasks linked−list
Figure 1: Data-only process hiding in Linux.
The primary data structure for process management in
the Linux kernel is the task struct structure [23].
All threads are represented by a task struct in-
stance within the kernel. A single-threaded process
will therefore be represented internally by exactly one
task struct.
Since scheduling occurs on a per-
thread basis, a multi-threaded processes is simply a set of
task struct objects that share certain resources such
as memory regions and open ﬁles, as well as a few other
properties including a common process identiﬁer (PID),
the unique number given to each running process on the
system.
In a correctly-running system, all task struct ob-
jects are connected in a complex set of linked lists
that represent various groupings relevant to that task at
a particular time [23]. For accounting purposes, all
tasks are members of a single doubly-linked list, iden-
tiﬁed by the task struct.tasks member. This
list, which we refer to as the all-tasks list,
insures
that any kernel function needing access to all tasks can
easily traverse the list and be sure to encounter each
task exactly once. The head of the task list is the
swapper process (PID 0), identiﬁed by the static sym-
bol init task.
In order to support efﬁcient lookup
based on PID, the kernel also maintains a hash table that
is keyed by PID and whose members are hash-list nodes
located in the task struct.pid structure. Only one
thread per matching hash of the PID is a member of
the hash table; the rest are linked in a list as part of
task struct.pid member. Other list memberships
include parent/child and sibling relationships and a set
of scheduler-related lists discussed next.
Scheduling in the Linux kernel is also governed by a
set of lists [23]. Each task exists in exactly one state. For
example, a task may be actively running on the processor,
waiting to be run on the processor, waiting for some other
event to occur (such as I/O), or waiting to be cleaned up
by a parent process. Depending on the state of a task,
that task will be a member of at least one scheduling list
somewhere in the kernel. At any given time, a typical
active task will either be a member of one of the many
wait queues spread throughout the kernel or a member
of a per-processor run queue. Tasks cannot be on both a
wait queue and a run queue at the same time.
Primed with this knowledge of the internals of Linux
process management, we now describe the trivial tech-
nique by which an attacker can gain the ultimate stealth
for a running process. Figure 1 depicts the primary step
of the attack: removing the process from the doubly-
linked all-tasks list (indicated by the solid line between
tasks). Since this list is used for all process accounting
functions, such as the readdir() call in the /proc
ﬁlesystem, removal from this list provides all of the
stealth needed by an adversary. For an attacker who
has already gained access to kernel memory, making this
modiﬁcation is as simple as modifying two pointers per
hidden process. As a secondary step to the attack, adver-
saries might also choose to remove their processes from
the PID hash table (not pictured) in order to prevent the
receipt of unwanted signals.
USENIX Association
Security ’06: 15th USENIX Security Symposium
291
As shown in Figure 1, a task not present in the all-tasks
list can continue to function because the set of lists used
for scheduling is disjoint from the set used for account-
ing. The dashed line shows the relationship between ob-
jects relevant to a particular processor’s run queue, in-
cluding tasks that are waiting to be run (or are currently
running) on that processor. Even though the second de-
picted task is no longer present in the all-tasks list, it con-
tinues to be scheduled by the kernel. Two simple changes
to dynamic data therefore result in perfect stealth for the
attacker, without any modiﬁcations to static data or ker-
nel text.
2.2 Modiﬁcation of System Capabilities
When most actions occur in the kernel, some form of a
capability is used to identify whether or not a principal
should be given (or already has been given) access to a
resource. These capabilities therefore represent a prime
target for attackers wishing to elevate privilege. Chang-
ing process user identiﬁers (UIDs) has long been a fa-
vorite technique of attackers. Other examples include ﬁle
descriptors and sockets (both implemented in the same
abstraction in the kernel).
The SELinux access vector cache provides a good ex-
ample of this kind of capability and represents a potential
target for an adversary seeking privilege escalation. This
section describes the structure and purpose of the AVC