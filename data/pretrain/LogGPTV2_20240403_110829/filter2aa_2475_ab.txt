### ARP Request and Reply Injection

#### Sending an ARP Request
- **Command:**
  ```bash
  ~$ ./arpcraft -i en0 -sha 00:aa:bb:cc:dd:ee -spa 192.168.1.20 -tha 00:aa:bb:cc:dd:ff -tpa 192.168.1.100 -o request
  ```

- **Ethernet Frame Layout:**
  #################################################################
  #  Destination MAC Address:     00:aa:bb:cc:dd:ff               #
  #  Source MAC Address:          00:aa:bb:cc:dd:ee               #
  #  Ether Type:                  ARP                             #
  #################################################################

- **ARP Packet Layout:**
  #################################################################
  #  Hardware Type:                       1 (Ethernet)            #
  #  Protocol Type:                       0800 (IP)               #
  #  Hardware Address Length:             (6)                     #
  #  Protocol Address Length:             (4)                     #
  #  Opcode:                              Request                 #
  #  Sender Hardware Address (SHA):       00:aa:bb:cc:dd:ee       #
  #  Sender Protocol Address (SPA):       192.168.1.20            #
  #  Target Hardware Address (THA):       00:aa:bb:cc:dd:ff       #
  #  Target Protocol Address (TPA):       192.168.1.100           #
  #################################################################

- **Injection:**
  Injecting ARP request to 192.168.1.100 [00:aa:bb:cc:dd:ff] from 192.168.1.20 [00:aa:bb:cc:dd:ee]

#### Sending an ARP Reply
- **Command:**
  ```bash
  ~$ ./arpcraft -i en0 -sha 00:aa:bb:cc:dd:ee -spa 192.168.1.20 -tha 00:AB:CD:EF:01:02 -tpa 192.168.1.85 -o reply
  ```

- **Ethernet Frame Layout:**
  #################################################################
  #  Destination MAC Address:     00:AB:CD:EF:01:02               #
  #  Source MAC Address:          00:aa:bb:cc:dd:ee               #
  #  Ether Type:                  ARP                             #
  #################################################################

- **ARP Packet Layout:**
  #################################################################
  #  Hardware Type:                       1 (Ethernet)            #
  #  Protocol Type:                       0800 (IP)               #
  #  Hardware Address Length:             (6)                     #
  #  Protocol Address Length:             (4)                     #
  #  Opcode:                              Reply                   #
  #  Sender Hardware Address (SHA):       00:aa:bb:cc:dd:ee       #
  #  Sender Protocol Address (SPA):       192.168.1.20            #
  #  Target Hardware Address (THA):       00:AB:CD:EF:01:02       #
  #  Target Protocol Address (TPA):       192.168.1.85            #
  #################################################################

- **Injection:**
  Injecting ARP reply to 192.168.1.85 [00:AB:CD:EF:01:02] from 192.168.1.20 [00:aa:bb:cc:dd:ee]

### Attacks Reloaded - ARP Cache Poisoning

- **Traditional ARP Cache Poisoning Weaknesses:**
  - Some operating systems do not update their ARP cache after receiving gratuitous ARP replies that they are not expecting.
  - Most, if not all, operating systems will not add an entry to their ARP cache after receiving a reply if an entry is not already there.

- **RFC 826 Compliance:**
  - According to RFC 826, if a host receives an ARP REQUEST and the target hardware address (THA) and target protocol address (TPA) match their own, the host will update or add the source protocol address (SPA) and source hardware address (SHA) to its cache.
  - Verbatim from RFC 826:
    ```
    "If the pair <protocol type, sender protocol address> is already in my translation table, update the sender hardware address field of the entry with the new information in the packet and set Merge_flag to true.
    Am I the target protocol address?
    Yes:
    If Merge_flag is false, add the triplet <sender hardware address, sender protocol address, target hardware address> to the translation table..."
    ```

- **Poisoning with ARP Requests:**
  - Using ARP REQUEST packets instead of ARP REPLY packets allows for more reliable cache poisoning, even adding new entries to the cache.

- **Example:**
  - Attacker sends a REQUEST to 192.168.1.20 from 192.168.1.1 with the attacker’s MAC address.

- **Demo:**
  - Demonstration of ARP cache poisoning with ARP requests.

### Focused Sniffing

- **CAM Table Overflow Drawbacks:**
  - Highly identifiable.
  - Requires hundreds or thousands of packets.
  - Modern switches can defeat it with technologies like "Port Security," which limit the number of MAC addresses per port.

- **Alternative Method:**
  - By poisoning the ARP cache of the victim with a NULL hardware address (00:00:00:00:00:00) for the destination (e.g., the network gateway), all frames from the victim to the gateway will be forwarded to all switch ports, allowing eavesdropping on that communication.
  - This method works on various switches (Cisco, Bay Networks, HP, etc.) and is less identifiable to network detection tools.

- **Demo:**
  - Demonstration of focused sniffing using ARP cache poisoning with a NULL MAC address.

### Other ARP Attack Techniques

- **Self-MAC Poisoning:**
  - Some operating systems can be poisoned with their own MAC address for the destination, severing communication and preventing messages from reaching the network.
  - Useful for:
    - Preventing log messages from reaching a log host.
    - Preventing host-based IDS from reporting to a central console.

- **Duplicate IP Address:**
  - Sending an ARP request or reply with the same IP address but a different MAC address can cause most operating systems to warn of a duplicate IP address.
  - Example: Windows pop-up warning of an IP address conflict.
  - Can be used in social engineering scenarios to trick users into giving up credentials.
  - Potential DoS: Many such packets can slow down Windows systems.

- **Tool: Arpvenom**
  - A tool to automate ARP attacks presented in this session.

### Conclusion

- **Summary:**
  - Traditional ARP attacks work well but have some weaknesses in certain environments.
  - Using ARP REQUEST packets for cache poisoning can be more reliable.
  - Focused sniffing by poisoning the victim’s cache with a NULL MAC address is less noisy and more reliable on switches with controls to prevent CAM table overflow.

### Resources

- **Slides, Tools, and References:**
  - Latest version of slides, arpcraft, arpvenom, etc.:
    - [Praetorian Global](http://www.praetorianglobal.net/Presentations/arpreload.html)
    - [DigRev](http://www.digrev.org)
  - [RFC 826](http://www.faqs.org/rfcs/rfc826.html)

### Questions?

- **Contact:**
  - Email: PI:EMAIL

**Defcon 15, Las Vegas, NV, August 2007**
**Jesse D’Aguanno**
**(c) Copyright 2007 Praetorian Global, LLC**