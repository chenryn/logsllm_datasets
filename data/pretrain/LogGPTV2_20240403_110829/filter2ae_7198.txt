# Joomla 核心文件 database.php 中的 preg_replace /e 后门

#### 译文声明
本文为翻译文章，原文来源：360安全播报  
原文地址：[请提供链接]  
译文仅供参考，具体内容和含义以原文为准。

我们通常在 Sucuri Labs 或博客上分享许多关于模糊处理的方法。有时还会编写一些免费工具来处理不免费的代码，并且提供了一个在线工具帮助用户解码恶意软件。然而，在某些情况下，我们并不清楚恶意软件是通过 base64、gzinflate、十六进制编码字符串、字符串旋转还是其他常见方法进行加密的。正如今天我们将要讨论的案例所示，这种后门隐藏在 Joomla 核心文件中，用于管理数据库输入。

我们的工具检测到一个客户端站点上的异常结构: `/includes/joomla/database/database.php`，其中包含一个转换成 `preg_replace` 的十六进制编码字符串。

### 为什么这会是异常现象？
1. `/includes/joomla/database/database.php` 并不是 Joomla 2.5.8 版本的一部分（这是客户端站点运行的一个过时版本）。
2. Joomla 核心文件不会使用这种编码方法。

如果这是一个由客户端创建的合法文件，用来管理 Joomla 数据库，那又会是什么样子呢？这种情况是可能的，我见过太多 CMS 核心文件因客户需求而被修改。因此，最好的办法是首先进行核查。

### 文件分析
前几行与常见的 Joomla 核心文件没有区别，包括详细的注释、`getlnstance` 函数等。但随后就变得有些奇怪了。所有的变量都被过度缩进来存储其他变量，看起来像是一种函数。这时问题就显现出来了。

#### 功能形式
经过仔细检查，我发现了一些其他函数、变量、十六进制编码字符串以及一个非常奇怪的串联：
```
// 示例代码
```

我的第一反应是检查它的输出。可能恶意软件以某种形式隐藏在那里，基于变量内容，它会存储数据库内容。但是……

这个串联只是为了转移注意力，目的是不让分析师深入研究其内涵。不过现在还不是时候，除了研究这份疯狂的 db 代码之外，我还有更重要的事情要做。也许之后我会再回头研究这份代码，这要看它是否还会被用在其他地方。所以现在先留着它然后继续探究吧。

### 深入调查
进一步调查后，我发现了以下内容：
```
// 示例代码
```

#### 最终解码
我们看到 `$new_stats` 由存储在另一变量中的函数命名。这样好理解吗？让我们换一种方式解释：

首先，我们看到了一个新的变量 `$_state`。我将其从另一部分代码中移除，以便更清楚地看到到底发生了什么。

还记得我之前提到的常用于模糊处理恶意软件的各种函数吗？是的，这个恶意软件编写者几乎在每一行代码中都使用了这些函数！

这些代码获取 HTTP_SCHEME 服务器变量的内容并稍作处理，以备后用。该服务器未在默认情况下登录，或者使用了模板并且存储空间巨大，又或者是只保存最近登录记录。

下一步，获取 `$_validate` 创建的数组，并使用 `strtr` 函数进行 `$new_stats` 转换。因为我们没有通过 HTTP_SCHEME 发送的数组，所以很难确定 `$new_stats` 内容是否就是之后在 `preg_replace` 中执行的恶意代码，还是说有一个全新的代码完全覆盖了变量内容。我希望它是存储在变量中的，那样事情就会变得容易得多。

正如我前文所讲，最后一行代码是用来执行 base64 解码内容的转换。

#### Preg_replace 的 e 修饰符
在 `Preg_replace` 正则表达式中使用的修饰符 `e` 基于 PHP 7.0.0 将会被删除。为了方便查阅，这里摘抄了 php.net 手册的相关内容：
> 如果设置了已否决的修饰符，`Preg_replace` 会在替换字符中做出常规反应，将它评定为 PHP 代码，然后用结果替换搜索字符串。单引号、双引号、反斜杠和 NULL 字符会由反向引用的反斜杠代替。

发现问题了吗？这是我们修复团队在清理受害网站时每天都在寻找的函数。

### 结论
日常的恶意软件越来越难以发现。攻击者们将恶意软件存储在数据库里，进行加密，甚至将其编码成核心文件的样子。现在是时候对您的网站进行全面健康检查了，看看是否有被添加或被修改的文件，像强迫症一样细致一点吧。