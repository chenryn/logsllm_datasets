v
The blocks in Be are exactly those covered by CFI. Therefore, if ECF I
is the basic
= Ev,
block sequences considered valid by CFI, then according to Corollary 2, ECF I
making CFI the most precise statically constructed sequence based model. Any other
system call approach based on static analysis [9, 31, 16, 13] considers the basic block
v as valid, where Ev ⊆ ES
sequences ES
v . Therefore, CFI subsumes all system call
sequence based IDS built on static analysis.
⊆ Ev that
are more restrictive than statically constructed models. The system call sequence based
(cid:2)
models utilizing dynamic analysis [12, 10, 15] recognize basic block sequences ES
v as
⊆ ECF I
valid where ES
,
v
v
(cid:3)
Dynamic analysis based approaches relying on execution language E
v
v . When compared with CFI, we cannot say that ES
v
⊆ ES
(cid:2)
v
(cid:2)
34
M. Sharif et al.
⊆ ES
v
(cid:2)
nor can we say that ECF I
v . Our formal framework therefore proves the intuition
that neither of the approaches are more precise than the other. Each may detect attacks
that the other does not. However, according to Corollary 1, a more precise control-ﬂow
(cid:3)
v, becoming
model for dynamic analysis exists. Such an approach will be as precise as E
⊆ ES
(cid:3)
(cid:2)
fundamentally more precise than the system call based counterpart because E
v .
v
5 Incomplete Analysis and Hybrid Approaches
The precision of control-ﬂow sequence models depends on the exposure of control-
ﬂow events in a program. To be as precise as possible, the essential basic blocks at
least need to be identiﬁed and covered. This is generally straightforward for source
code or for binaries with compiler generated hints. However, due to known undecid-
able problems [25] there is no static or dynamic binary analysis technique that guaran-
tees complete coverage of code for arbitrary binaries. In such situations, an unchecked
control-transfer instruction may be exploited by an attacker without being detected by
a control-ﬂow sequence based approach. On the other hand, system-call based methods
achieve complete coverage of system calls by default because the system call interface
can be completely mediated.
A trend toward combining the power of control ﬂows with system calls is evident
from PAID [23] with its recent improvements [24]. Intuitively, the advantage of a hybrid
approach is that even if an attacker can escape the control-ﬂow veriﬁcation and execute
injected code, a system-call based check should be able to detect invalid system call
sequence. However, we show that hybrid sequence approaches are not fundamentally
more precise than control-ﬂow sequence based approaches even in the case of incom-
plete binary analysis. One point to note is that PAID considers system call arguments,
but since our framework does not consider data, the theoretical results are applicable to
sequence based hybrid approaches only.
5.1 The Effect of Incomplete Analysis
In order to help us analyze the effect of models resulting from incomplete analysis, we
consider the models that would have resulted if the program could have been analyzed
completely. Assume the original deﬁnitions of Ev, Cv, Bv and Be to hold for the models
(cid:3)
found in the complete case. Let B
v be the
valid execution language due generated due to incomplete analysis. Let the essential
basic blocks for the incomplete case be B
(cid:3)
v be the discovered set of basic blocks and E
The following theorem proves that if the events from the essential basic blocks in
(cid:3)
the discovered region (B
e) are exposed by a control-ﬂow based scheme, then the IDS
detects any attack that exploits a control-transfer instruction in the undiscovered region.
(cid:3)
e.
Theorem 4. Any feasible execution sequence e that uses an anomaly generating (AG)
control-ﬂow event from a basic block in b ∈ Bv − B
Proof. Without loss of generality, we can assume that e started in the known region of
(cid:3)
v, prior to any control-ﬂow event emanating
code, i.e. in the blocks B
(cid:3)
from b there must be a control-ﬂow event that transitions outside from B
v. Such an
event is of the form c = (b1, b2) where b1 ∈ B
(cid:3)
v. This event c has to be
an anomaly generating event (AG) because it turns a valid sequence invalid. Therefore,
v. Since b /∈ B
(cid:3)
v and b2 /∈ B
(cid:3)
(cid:3)
v is not in E
(cid:3)
v.
Understanding Precision in Host Based Intrusion Detection
35
(cid:3)
e and accordingly is exposed. A simpliﬁed control-ﬂow model will therefore
b1 ∈ B
detect it as an anomaly, resulting in e /∈ E
(cid:3)
v.
Hence, as long as the essential blocks in the discovered region of code are exposed and
checked, there can be no undetected attacks that try to exploit unchecked transfers in
the undiscovered code.
5.2 Hybrid Models
We can represent hybrid models consisting of both system call and control-ﬂow infor-
mation in our framework in order to analyze their precision. The alphabet of our hybrid
language is ΣH = ΣC ∪ ΣS, containing both control-ﬂow events and system calls. We
can formally describe the derivation as a homomorphism hh, which has the effects of
hs to add system call information from any basic block, and the effects of hce to keep
a subsequence of exposed control-ﬂow events from blocks in Bh. The homomorphism
hh : Σ
∗
H is deﬁned as following:
→ Σ
∗
C
⎧⎪⎪⎪⎨
⎪⎪⎪⎩
hh((b1, b2)) =
(b1, b2)s,
(b1, b2),
s,
,
b1 ∈ Bh and b2 calls s ∈ ΣS
b1 ∈ Bh and no syscall in b2
b1 /∈ Bh and b2 calls s ∈ ΣS
otherwise
Using the above homomorphism, the valid sequence model for the hybrid language
Hv can be found from the comprehensive control-ﬂow langauge Cv, by Hv = hh(Cv).
Compared to the pure control-ﬂow and the system-call based models, hybrid models
constrain both the control-ﬂow and system call sequences. Therefore, the basic block
sequences considered valid by the hybrid model are not less constrained than other two.
Assume that the basic block sequences considered valid by a hybrid, a control-ﬂow
sequence and a system call sequence models are EH
v and ES
v respectively. The
following corollary can be very easily derived from our framework.
v , EC
⊆ EC
Corollary 5. If a hybrid model and a pure control-ﬂow sequence model expose the
⊆ ES
control-ﬂow events from the same set of basic blocks, then EH
v .
v
The above shows the relative precision of the three approaches in the general case.
However, we will show that in the case that the essential basic blocks are exposed,
hybrid models and control-ﬂow models become equal in precision.
cs (Hv) ∩ Cf when
−1
It can be proved in a manner similar to Theorem 3 that Cv = h
the essential blocks are exposed, i.e. Bh = Be. Therefore, basic block sequences con-
sidered valid by the hybrid model then becomes precise as the valid execution language,
i.e. EH
v = Ev. Therefore:
v and EH
v
Corollary 6. If all essential basic blocks Be are exposed, then a hybrid model is equiv-
alent in precision to a control-ﬂow model, i.e. EH
v = Ev ⊆ ES
v .
v = EC
All that is required to make control-ﬂow based approaches as precise as hybrid models
is the coverage of essential basic blocks. We have also seen in the previous section that
even for incomplete binary analysis, it is sufﬁcient to cover essential basic blocks in
the discovered region of code. Moreover, it is straightforward to identify essential basic
blocks in the discovered region of code. Therefore, this shows that control-ﬂow based
36
M. Sharif et al.
approaches can be as precise as hybrid models in all cases; hybrid approaches do not
have any fundamental advantage over control-ﬂow models. Further research in creating
more precise hybrid models may not be fruitful because eventually these systems will
become precise enough to make the system call information in the models redundant.
6 Control-Flow Based IDS Using External Monitoring
Traditionally, system call based IDSes have used an external monitor. CFI uses efﬁcient
inlined monitoring to keep the overhead of monitoring at the ﬁne-grained control-ﬂow
level low. Although control-ﬂow based methods have been proven to be more precise
than system calls, using an external monitor would provide a fair comparison of per-
formance between the two paradigms. We provide evidence against the intuition that
an external monitor shifting to this control-ﬂow interface will incur signiﬁcant over-
head. We implement and evaluate a precise control-ﬂow based approach built on static
analysis and using external monitoring.
External monitoring has several advantages including easier development and de-
bugging. It can also be easily deployed as a centralized security service. Moreover, it is
a more generalized approach that does not rely on tricks to protect memory access to
the inlined model or require hardware features such as NXD.
Our external monitor reduces the number of control-ﬂow events that require expo-
sure without losing model precision. We used a run-time program transformation to
restrict the feasible executions of a program and hence reduce essential basic blocks.
We begin by presenting the implementation details and then demonstrate the validity
of the implementation by testing detection of multiple synthetic attacks and real attacks
against a collection of test programs. Finally, our performance tests show a surprisingly
low cost for external monitoring at the control-ﬂow level.
6.1 Construction Via Static Binary Analysis and Rewriting
Our selection of control-ﬂow instructions to model and monitor is similar to CFI. Our
model contains a list of valid target addresses for each dynamically computed control-
transfer instruction, and a PDA-like stack that stores calling context used to validate the
targets of function returns. Like CFI, sequence information is not explicitly required;
the stack checks the subsequences of calls and returns. We ﬁrst construct the static
CFG of a program. Then, for each control-transfer instruction that has a dynamically
computed target, we use the CFG to identify valid target addresses.
Our system constructs models for dynamically-linked Linux ELF binaries on the
x86 architecture. We use DynInst [19], a binary analysis and instrumentation library,
as our low-level static analyzer. The one-time model construction procedure rewrites
the binary program to expose control-ﬂow operations to the external monitor. We use
DynInst to replace monitored control-ﬂow instructions with single-byte software break-
points (the INT3 instruction) that can be securely intercepted by an external monitor.
That monitor limits the program’s execution by the model every time the program
is subsequently loaded for execution. Using the ptrace system call, the monitor inter-
cepts the software breakpoints previously inserted by DynInst. For each interception,
the target of a control transfer is extracted from the program’s context or memory. This
method of extracting control-ﬂow information ensures that an attacker cannot pass fake
Understanding Precision in Host Based Intrusion Detection
37
information to the monitor. We implemented the control-ﬂow model itself as a hash ta-
ble. We key the table on value pairs—a source and destination address for control-ﬂow
events. The hash table is sparse with few collisions, providing O(1) average time com-
plexity for lookups. After veriﬁcation, as DynInst had overwritten the original control-
ﬂow instructions with breakpoints, the monitor emulates the execution of the clobbered
control ﬂow before returning execution control to the monitored process. During execu-
tion, our system also intercepts dynamic library loads and updates the model with valid
target addresses for indirect jumps that use the GOT.
An external monitor requires context switches into and out of the monitor at every
event. We reduce the number of events that the monitor checks by restricting feasible
execution of a program (Corollary 4). We use a transformation similar to function in-
lining. By creating duplicate copies of functions and replacing function call and return