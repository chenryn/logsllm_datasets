```
除了通过注册表服务分发映像之外，还有一些选项可以将映像转储为 TAR 存档，并将其导入本地存储库:
*   `docker commit [CONTAINER]`:将容器层的更改提交到新映像中
*   `docker save --output [filename] IMAGE1 IMAGE2 ...`:将一个或多个映像保存到 TAR 档案中
*   `docker load -i [filename]`:将`tarball`映像加载到本地存储库中
*   `docker export --output [filename] [CONTAINER]`:将容器的文件系统导出为 TAR 档案
*   `docker import --output [filename] IMAGE1 IMAGE2`:导入文件系统`tarball`
带有`save`和`export`的`commit`命令看起来基本相同。主要区别在于，保存的映像会保留层间的文件，即使这些文件最终会被删除；另一方面，导出的映像将所有中间层压缩成一个最终层。另一个区别是，保存的映像保留了元数据，如图层历史，但这些在导出的映像中不可用。因此，导出的映像通常尺寸较小。
下图描述了容器和映像之间的状态关系。箭头上的标题是 Docker 的相应子命令:
![](img/00029.jpeg)
# 连接容器
Docker 提供了三种网络来管理容器内和主机之间的通信，即`bridge`、`host`和`none`。
```
$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
1224183f2080        bridge              bridge              local
801dec6d5e30        host                host                local
f938cd2d644d        none                null                local
```
默认情况下，每个容器在创建时都连接到桥网络。在这种模式下，每个容器都被分配了一个虚拟接口和一个私有 IP 地址，通过该接口的流量被桥接到主机的`docker0`接口。此外，同一网桥网络中的其他容器可以通过它们的 IP 地址相互连接。让我们运行一个通过端口`5000`发送短消息的容器，并观察其配置。`--expose`旗向容器以外的世界开放指定的港口:
```
$ docker run --name greeter -d --expose 5000 alpine \
/bin/sh -c "echo Welcome stranger! | nc -lp 5000"
2069cbdf37210461bc42c2c40d96e56bd99e075c7fb92326af1ec47e64d6b344 $ docker exec greeter ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02
inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
...
```
这里容器`greeter`分配了 IP `172.17.0.2`。现在运行另一个使用此 IP 地址连接到它的容器:
```
$ docker run alpine telnet 172.17.0.2 5000
Welcome stranger!
Connection closed by foreign host
```
The `docker network inspect bridge` command gives configuration details, such as subnet segments and the gateway information.
除此之外，您可以将一些容器分组到一个用户定义的桥接网络中。这也是在单个主机上连接多个容器的推荐方式。用户定义的桥接网络与默认的略有不同，主要区别在于您可以从其他容器访问一个容器，并使用其名称而不是 IP 地址。创建网络由`docker network create [NW-NAME]`完成，在创建时通过标记`--network [NW-NAME]`将容器附加到网络上。容器的网络名称默认为它的名称，但也可以给它另一个带有`--network-alias`标志的别名:
```
$ docker network create room
b0cdd64d375b203b24b5142da41701ad9ab168b53ad6559e6705d6f82564baea
$ docker run -d --network room \
--network-alias dad --name sleeper alpine sleep 60
b5290bcca85b830935a1d0252ca1bf05d03438ddd226751eea922c72aba66417
$ docker run --network room alpine ping -c 1 sleeper
PING sleeper (172.18.0.2): 56 data bytes
...
$ docker run --network room alpine ping -c 1 dad
PING dad (172.18.0.2): 56 data bytes
...
```
主机网络按照其名称字面意思工作；每个连接的容器共享主机的网络，但同时也失去了隔离属性。无网络是一个完全分离的盒子。无论是入口还是出口，流量都被隔离在内部，因为没有网络接口连接到容器。在这里，我们将一个在端口`5000`上监听的容器附加到主机网络，并在本地与之通信:
```
$ docker run -d --expose 5000 --network host alpine \
/bin/sh -c "echo im a container | nc -lp 5000"
ca73774caba1401b91b4b1ca04d7d5363b6c281a05a32828e293b84795d85b54
$ telnet localhost 5000
im a container
Connection closed by foreign host
```
If you are using Docker CE for macOS, the host means the moby Linux on top of the hypervisor framework.
主机和三种网络模式之间的交互如下图所示。主机和网桥网络中的容器连接有适当的网络接口，并与同一个网络以及外部世界中的容器进行通信，但是 none 网络远离主机接口。
![](img/00030.jpeg)
除了共享主机网络，创建容器时的标志`-p(--publish) [host]:[container]`还允许您将主机端口映射到容器。这个标志意味着`-expose`，因为在任何情况下你都需要打开一个容器的港口。以下命令在端口`80`启动一个简单的 HTTP 服务器。你也可以用浏览器查看。
```
$ docker run -p 80:5000 alpine /bin/sh -c \
"while :; do echo -e 'HTTP/1.1 200 OK\n\ngood day'|nc -lp 5000; done"
$ curl localhost
good day
```
# 使用 Dockerfile
组装映像时，无论是通过 Docker 提交还是导出，以托管方式优化结果都是一项挑战，更不用说与 CI/CD 管道集成了。另一方面，`Dockerfile`以 as-a-code 的形式表示构建任务，这大大降低了我们构建任务的复杂度。在本节中，我们将描述如何将 Docker 命令映射到`Dockerfile`中，并进一步优化它。
# 写你的第一个文档
一个`Dockerfile`由一系列文本指令组成，引导 Docker 守护进程形成 Docker 镜像。一般来说，一个`Dockerfile`是并且必须是以指令`FROM`开始的，并且遵循零个或多个指令。例如，我们可能有一个由以下一行构建的映像:
```
docker commit $(   \
docker start $(  \
docker create alpine /bin/sh -c    \
"echo My custom build > /etc/motd" \
 ))
```
大致相当于以下`Dockerfile`:
```
./Dockerfile:
---
FROM alpine
RUN echo "My custom build" > /etc/motd
---
```
显然，用`Dockerfile`来构建更简洁明了。
`docker build [OPTIONS] [CONTEXT]`命令是唯一一个与建筑任务相关的命令。上下文可以是本地路径、网址或`stdin`；表示`Dockerfile`的位置。一旦构建被触发，`Dockerfile`连同上下文下的所有内容将被预先发送给 Docker 守护程序，然后守护程序将开始依次执行`Dockerfile`中的指令。每次执行指令都会产生一个新的缓存层，随后的指令会在级联中的新缓存层执行。由于上下文将被发送到某个不能保证是本地路径的地方，所以最好将`Dockerfile`、代码、必要的文件和一个`.dockerignore`文件放在一个空文件夹中，以确保生成的映像只包含所需的文件。
`.dockerignore`文件是一个列表，指示在构建期间同一目录下的哪些文件可以被忽略，它通常看起来像以下文件:
```
./.dockerignore:
---
# ignore .dockerignore, .git
.dockerignore 
.git
# exclude all *.tmp files and vim swp file recursively
**/*.tmp
**/[._]*.s[a-w][a-z]
...
---
```
一般情况下，`docker build`会尝试在`context`下找到一个名为`Dockerfile`的文件开始一个构建；但有时出于某种原因，我们可能喜欢给它取另一个名字。`-f` ( `--file`)旗就是为了这个目的。另外，另一个有用的标志`-t` ( `--tag`)能够在构建映像后给出一个或多个存储库标签的映像。假设我们要在`./deploy`下构建一个名为`builder.dck`的`Dockerfile`，并用当前日期和最新标签进行标注，命令将是:
```
$ docker build -f deploy/builder.dck  \
-t my-reg.com/prod/teabreak:$(date +"%g%m%d") \
-t my-reg.com/prod/teabreak:latest .
```
# dockerfile 语法
一个`Dockerfile`的构建模块是十几个或者更多的指令；大部分都是`docker run/create`旗帜功能的对应物。这里我们列出了最重要的:
*   `FROM [:TAG|[@DIGEST]`:这是告诉 Docker 守护进程当前`Dockerfile`基于哪个镜像。这也是唯一一个必须在`Dockerfile`中的指令，这意味着你可以有一个只包含一行的`Dockerfile`。像所有其他与映像相关的命令一样，如果未指定，标签默认为最新的。
*   `RUN`:
```
RUN 
RUN ["executable", "params", "more params"]
```
`RUN`指令在当前缓存层运行一行命令，并提交结果。这两种形式之间的主要差异在于命令是如何执行的。第一个叫做**壳形式**，它实际上是以`/bin/sh -c `的形式执行命令；另一种形式叫做**执行形式**，直接用`exec`处理命令。
使用 shell 形式类似于编写 shell 脚本，因此通过 shell 操作符连接多个命令，行延续、条件测试或变量替换都是完全有效的。但是请记住，命令不是由`bash`处理的，而是由`sh`处理的。
exec 形式被解析为 JSON 数组，这意味着您必须用双引号将文本换行并转义保留字符。此外，由于命令不被任何 shell 处理，数组中的 shell 变量将不会被计算。另一方面，如果 shell 不存在于基本映像中，您仍然可以使用 exec 形式来调用可执行文件。
*   `CMD`:
```
CMD ["executable", "params", "more params"]
CMD ["param1","param2"]
CMD command param1 param2 ...:
```
`CMD`设置构建映像的默认命令；它不会在构建期间运行命令。如果在 Docker 运行时提供参数，这里的`CMD`配置将被覆盖。`CMD`的语法规则和`RUN`几乎一样；第一种形式是 exec 形式，第三种形式是 shell 形式，也是前置的`/bin/sh -c`。还有一个指令`ENTRYPOINT`和`CMD`交互；当容器启动时，三种形式的`CMD`实际上是`ENTRYPOINT`的前置。一个`Dockerfile`中可以有很多`CMD`指令，但只有最后一个才会生效。
*   `ENTRYPOINT`:
```
ENTRYPOINT ["executable", "param1", "param2"] ENTRYPOINT command param1 param2
```
这两种形式分别是 exec 形式和 shell 形式，语法规则与`RUN`相同。入口点是映像的默认可执行文件。也就是说，当一个容器旋转时，它运行由`ENTRYPOINT`配置的可执行文件。当`ENTRYPOINT`与`CMD`和`docker run`的论点结合在一起时，用不同的形式写作会导致非常多样的行为。以下是它们组合的组织规则:
```
     /bin/sh -c entry_cmd entry_params ...     
```
```
      entry_cmd entry_params run_arguments
```