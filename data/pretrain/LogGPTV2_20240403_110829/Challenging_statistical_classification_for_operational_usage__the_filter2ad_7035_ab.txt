53
54
48
90.0
90.0
91.9
94.7
1380
1820
2100
1450
73.4 K
200 K
295 K
561 K
Table 1: Traces summary.
(a) Breakdown in ﬂows
(b) Breakdown in bytes
Figure 1: Application breakdown in the data sets.
whose latest version features DPI functions, in [16]. Specif-
icaly, we have shown that ODT and Tstat v2 oﬀer similar
performance and outperfom signature based tools used in
the litterature [12, 5]. As ODT embeds a larger set of signa-
tures than Tstat v2, we rely on the former to establish the
ground truth in our study.
We are aware that the wording ground truth remains
tricky as even DPI tools might fail. We face here the same
issue as former studies in the domain. However, there barely
exists any alternative to DPIs. Some approaches have been
recently proposed to obtain high quality reference data sets.
In [7], the authors propose a network driver installed on
end hosts. This middleware ﬂags ﬂows according to the ap-
plication generating traﬃc. However, this solution is not
applicable to the case of large ADSL traces. The stance we
take in this study is thus to compare various statistical clas-
siﬁers with one another, given an accurate, but not perfect,
ground truth establishment tool.
3.3 Trafﬁc breakdown
Classes used in this work are summarized in Table 2. This
choice of classes can be considered as a typical one for an ISP
that monitors its network. It calls for a few remarks. First,
HTTP traﬃc is broken into several classes depending on the
application implemented on top: Webmail is categorized as
mail, HTTP streaming as streaming, HTTP ﬁle transfers
as FTP, etc. Second, popular p2p applications have their
own class. Less popular p2p applications are merged into
the P2P-REST class. The OTHERS class aggregates less
popular applications that ODT recognized (See Table 2).
Figure 1 shows classiﬁcation results obtained by ODT, in
ﬂows and bytes, for our four traces. On PoPs where ODT
is used continuously, we checked that the application break-
down is typical of the traﬃc observed on longer periods of
time (day or week). Among the p2p applications, most bytes
and ﬂows are due to eDonkey (more precisely eMule client
[25]) followed by Bittorrent and Gnutella. Concerning eDon-
key, we observed that obfuscated traﬃc accounts typically
for half of the bytes in the EDONKEY class. Less popu-
lar ﬁle sharing applications (including the P2P-REST class)
generated a negligible amount of ﬂows and bytes. We ex-
clude them from our subsequent analysis. We also exclude
the NEWS class for similar reasons.
The vast majority of traﬃc in the HTTP Streaming class
is due to Dailymotion [26] and Youtube [24], which account
for 80% of the bytes. P2P streaming applications, that fall
into the STREAMING class, are active during short time
periods, e.g., popular sport events, which probably explains
why we do not observe such traﬃc in our data [1]. The
OTHERS class contains mostly unidirectional ﬂows to ports
135, 445 and 139. Those Windows services are targeted by
a large family of self-propagating malware (see for instance
[17]).
Overall, ODT provides fractions of UNKNOWN bytes
that range between 8% and 24% depending on the trace.
In Sections 5 and 6, we consider only traﬃc known by ODT,
keeping unclassiﬁed ﬂows aside. We focus on the
UNKNOWN class in Section 7.
4. CLASSIFICATION METHODOLOGY
This section describes our classiﬁcation methodology to
build our statistical classiﬁer, including the classiﬁcation al-
gorithms, the ﬂow deﬁnition and the performance metrics.
4.1 Classiﬁcation algorithms
In this paper, we rely on machine learning algorithms pro-
vided in the Weka suite [27], that is widely used in the con-
text of traﬃc classiﬁcation [13, 12, 22]. Speciﬁcally, we eval-
uated the following supervised learning algorithms [13, 12]:
Naive Bayes Kernel Estimation: this algorithm is a
generalization of the Naive Bayes one, which models features
using several Gaussian distributions. It is known to be more
accurate than Naive Bayes.
Bayesian Network: this algorithm makes use of a model
that represents a set of features (or classes) as its nodes,
MS−IR−IIR−IIIT−I020406080100  WEBEDONKEY(EDO)BITTORRENT(BT)GNUTELLAMAILCHATSTREAMINGHTTP−STRFTPDBOTHERSGAMESUNKNOWN(X)WEBWEBWEBWEBXXXXEDOEDOEDOEDOOTHERSOTHERSOTHERSOTHERSBTBTBTMAILMAILMAILMS−IR−IIR−IIIT−I020406080100  WEBEDONKEY (EDO)BITTORRENT (BT)GNUTELLAMAILCHATSTREAMINGHTTP−STR (HSTR)FTPDBOTHERSGAMESUNKNOWN (X)WEBWEBWEBWEBEDOEDOEDOEDOXXXXHSTRHSTRHSTRHSTRBTBTBTBTDBDBDBDB124Class
WEB
EDONKEY
MAIL
CHAT
HTTP-STR
OTHERS
DB
Application/protocol
HTTP and HTTPs browsing
eDonkey, eMule obfuscated
SMTP, POP3, IMAP, IMAPs
POP3s, HTTP Mail
MSN, IRC, Jabber
Yahoo Msn, HTTP Chat
HTTP Streaming
NBS, Ms-ds, Epmap, Attacks
LDAP, Microsoft SQL, Oracle SQL,
mySQL
BITTORRENT Bittorrent
FTP
GAMES
Ftp data, Ftp control, HTTP ﬁle transfer
NFS3, Blizzard Battlenet, Quake II/III
Counter Strike, HTTP Games
STREAMING MS Media Server, Real Player
GNUTELLA
ARES
TRIBALL
P2P-REST
NEWS
UNKNOWN
iTunes, Quick Time
Gnutella
Ares
Triball
Kazaa, SoulSeek, Filetopia, Others
Nntp
-
Table 2: Application classes.
Abbreviation
Push pkt down
Push pkt up
Avg seg size down
Description
Count of packets with Push ﬂag
downstream
Count of packets with Push ﬂag
upstream
Data bytes divided by # of packets
downstream
Min seg size down Minimum segment size down
Data pkt down
Pkt size median up Packet size median upstream
Local port
Distant port
Local TCP port
Distant TCP port
Packets with payload downstream
Table 3: Set B - Per ﬂow features.
and their probabilistic relationship as edges. In some cases,
Bayesian Network may outperform Naive Bayes.
C4.5 Decision Tree: this algorithm constructs a model
based on a tree structure, in which each internal node rep-
resents a test on features, each branch representing an out-
come of the test, and each leaf node representing a class
label. The version we use incorporates a number of improve-
ments such as pruning that aims at reducing data overﬁtting.
More details about the algorithm can be found in [8].
For all the scenarios we investigated, C4.5 oﬀered the best
performance in terms of accuracy and precision (see Section
4.4 for precise deﬁnitions). Unless stated otherwise results
presented in this work were obtained with the C4.5 decision
tree algorithm. We will elaborate on the results of the other
algorithms in Section 6.4.
4.2 Features
information like packet sizes [3, 2]. The second family of fea-
tures consists of ﬂow-level statistics like duration or fraction
of push ﬂags [13]. Accordingly, we use two feature sets, one
from each family. The ﬁrst one, that we designate as set A,
was proposed in [3]. It consists of the size and direction of
the ﬁrst few data packets of a transfer. The second one, set
B, consists of per ﬂow features inspired by [13]. The full list
of features we use is given in Table 33. In this work, we test
separately both sets. To extract packet sizes we used the
tool released by authors of [3]. For set B, we used ad-hoc
tools.
4.3 Flow deﬁnition
We seek to classify bidirectional TCP ﬂow. We use the
deﬁnition of a ﬂow based on its 5-tuple {source IP address,
destination IP address, protocol, source port, destination
port}. We restrict our attention to TCP ﬂows as they carry
the vast majority of bytes in our traces. We are still left
with the issue of deﬁning the set of ﬂows to be analyzed.
We might restrict ourselves to ﬂows for which a three-way
handshake is observed. We can be even more restrictive by
imposing observation of a FIN or RST ﬂag at the end of
the transfer. The latter option is advocated by the authors
in [13], as they observed that for their (academic) traces,
imposing this additional constraint does not signiﬁcantly re-
duce the fraction of ﬂows and bytes to be analyzed. This is
not the case with our traces as we will see below.
Some restrictions might also be imposed by the classiﬁca-
tion method itself. For instance, when using as features the
size of the ﬁrst 4 data packets (the choice of 4 is justiﬁed in
Section 5.1), we implicitly exclude all ﬂows with less than
4 data packets. Note that padding small ﬂows with zeros
would fool the classiﬁer, and thus it is not an option.
To gain a clear view of the impact of the various ﬁlter-
ing options, we applied successively the three following ﬂow
deﬁnitions to the ﬂows in our traces:
• S/S: Only ﬂows with a three way handshake.
• S/S+4D: Only ﬂows with a three way handshake and
at least four data packets. We used the tool publicly
released after the work in [3].
• S/S+F/R: Only ﬂows with a three way handshake
and with a FIN or RST ﬂag at the end of the data
transfer.
Results are depicted in Table 4 for the case of the MS-
I trace (other traces oﬀer similar results), with one line
per application and the last line presenting average results.
Clearly, imposing constraints on the termination of the ﬂow
appears extremely restrictive as about 50% of the bytes are
exluded from the analysis. On a per application case, the
issue can be even more pronounced.
Even imposing the observation of a three way handshake
can heavily impact some applications. This is the case for
STREAMING, GAMES, DB, and OTHERS. The latter case
(OTHERS) results from the nature of traﬃc carried (pre-
sumably attacks), as explained in Section 3.2. For the other
classes, this decrease in bytes can be due to ﬂows for which
we do not observe the beginning.
Two broad families of features have been used for classiﬁ-
cation in the literature. The ﬁrst one relies on packet-level
3The features were computed over the whole ﬂow in contrast
to [13] where the ﬁrst ﬁve packets of each transfer was used.
125Observing the beginning of a transfer is however crucial
for traﬃc classiﬁcation in general, as it carries application
level speciﬁc information (while the rest of the transfer might
be user data for instance). We thus analyzed only those
ﬂows for which we observed a proper three-way handshake.
Note that even though the amount of bytes is reduced for
some classes, the remaining number of ﬂows per class is large
enough (at least several hundreds) to justify further statis-
tical analysis.
Our ﬁrst set of features (packet sizes) imposes that we
have at least 4 data packets per transfer. As we can see
from Table 4, this further reduces the number of ﬂows per
application but has little impact on the number of bytes due
to the heavy-tailed nature of the Internet traﬃc.
Class
MS-I [ﬂows%/bytes%]
WEB
DB
FTP
GAMES
S/S
HTTP-STR
OTHERS
EDONKEY
MAIL
CHAT
S/S+F/R
S/S+4D
32%/73% 89%/83% 80%/64%