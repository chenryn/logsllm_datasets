### Traces Summary
| Metric | Value 1 | Value 2 | Value 3 | Value 4 | Value 5 | Value 6 | Value 7 | Value 8 | Value 9 | Value 10 | Value 11 | Value 12 | Value 13 | Value 14 |
|--------|---------|---------|---------|---------|---------|---------|---------|---------|---------|----------|----------|----------|----------|----------|
| Flows  | 53      | 54      | 48      | 90.0    | 90.0    | 91.9    | 94.7    | 1380    | 1820    | 2100     | 1450      |          |          |          |
| Bytes  | 73.4 K  | 200 K   | 295 K   | 561 K   |         |         |         |         |         |          |          |          |          |          |

**Table 1: Traces Summary.**

(a) Breakdown in flows  
(b) Breakdown in bytes

**Figure 1: Application breakdown in the data sets.**

### Introduction to DPI Tools
In this study, we utilize ODT (the latest version featuring DPI functions) and Tstat v2, as described in [16]. Our findings indicate that both ODT and Tstat v2 offer comparable performance and outperform signature-based tools commonly used in the literature [12, 5]. Given that ODT incorporates a more extensive set of signatures than Tstat v2, we use ODT to establish the ground truth for our analysis.

We acknowledge that the term "ground truth" can be problematic, as even DPI tools may not always be accurate. This issue is consistent with previous studies in the field. However, there are few alternatives to DPIs. Some recent approaches, such as the network driver proposed in [7], aim to provide high-quality reference datasets by flagging flows based on the generating application. Unfortunately, this solution is not feasible for large ADSL traces. Therefore, our approach is to compare various statistical classifiers using an accurate, albeit not perfect, ground truth tool.

### Traffic Breakdown
The classes used in this work are summarized in Table 2. These classes are typical for an ISP monitoring its network. A few notes:
- HTTP traffic is categorized into multiple classes based on the application: Webmail as mail, HTTP streaming as streaming, HTTP file transfers as FTP, etc.
- Popular P2P applications have their own class, while less popular ones are grouped into the P2P-REST class.
- The OTHERS class includes less common applications recognized by ODT (see Table 2).

**Figure 1** shows the classification results obtained by ODT, in terms of flows and bytes, for our four traces. On PoPs where ODT is continuously used, the application breakdown is representative of longer periods (day or week). Among P2P applications, eDonkey (specifically eMule client [25]) and Bittorrent generate the most bytes and flows, followed by Gnutella. Obfuscated eDonkey traffic typically accounts for half of the EDONKEY class. Less popular file-sharing applications, including the P2P-REST class, generate negligible amounts of flows and bytes, and thus are excluded from further analysis. The NEWS class is also excluded for similar reasons.

The majority of traffic in the HTTP Streaming class is attributed to Dailymotion [26] and YouTube [24], which account for 80% of the bytes. P2P streaming applications, classified under the STREAMING class, are active during short periods, such as popular sports events, which explains their absence in our data [1]. The OTHERS class primarily contains unidirectional flows to ports 135, 445, and 139, often targeted by self-propagating malware [17].

Overall, ODT identifies between 8% and 24% of UNKNOWN bytes depending on the trace. In Sections 5 and 6, we focus on traffic known to ODT, setting aside unclassified flows. The UNKNOWN class is discussed in Section 7.

### Classification Methodology
This section outlines our methodology for building a statistical classifier, including the algorithms, flow definition, and performance metrics.

#### Classification Algorithms
We use machine learning algorithms provided in the Weka suite [27], which is widely employed in traffic classification [13, 12, 22]. Specifically, we evaluated the following supervised learning algorithms [13, 12]:
- **Naive Bayes Kernel Estimation**: A generalization of Naive Bayes, modeling features using multiple Gaussian distributions. It is more accurate than standard Naive Bayes.
- **Bayesian Network**: Uses a model representing features as nodes and their probabilistic relationships as edges. In some cases, it outperforms Naive Bayes.
- **C4.5 Decision Tree**: Constructs a tree structure where each internal node represents a feature test, branches represent outcomes, and leaf nodes represent class labels. The version we use includes improvements like pruning to reduce overfitting [8].

C4.5 offered the best performance in terms of accuracy and precision (see Section 4.4 for definitions). Unless otherwise specified, results presented here were obtained using C4.5. Further details on other algorithms are provided in Section 6.4.

#### Features
Two families of features are used for classification:
1. **Packet-level features**: Such as packet sizes [3, 2].
2. **Flow-level statistics**: Such as duration or fraction of push flags [13].

We use two feature sets:
- **Set A**: Proposed in [3], consisting of the size and direction of the first few data packets.
- **Set B**: Consisting of per-flow features inspired by [13] (see Table 3 for a full list).

#### Flow Definition
We classify bidirectional TCP flows defined by the 5-tuple {source IP address, destination IP address, protocol, source port, destination port}. We focus on TCP flows, which carry the majority of bytes in our traces. We apply the following flow definitions:
- **S/S**: Flows with a three-way handshake.
- **S/S+4D**: Flows with a three-way handshake and at least four data packets.
- **S/S+F/R**: Flows with a three-way handshake and a FIN or RST flag at the end of the transfer.

**Table 4** shows the impact of these definitions on the MS-I trace (similar results for other traces), with one line per application and the last line presenting average results. Imposing constraints on flow termination excludes about 50% of the bytes, particularly affecting certain applications. Observing the beginning of a transfer is crucial for classification, as it carries application-specific information. Thus, we analyze only those flows with a proper three-way handshake.

**Table 2: Application Classes.**

| Class        | Application/Protocol                                  | Abbreviation |
|--------------|-------------------------------------------------------|--------------|
| WEB          | HTTP and HTTPS browsing                               | WEB          |
| EDONKEY      | eDonkey, eMule obfuscated                             | EDO          |
| MAIL         | SMTP, POP3, IMAP, IMAPs, POP3s, HTTP Mail            | MAIL         |
| CHAT         | MSN, IRC, Jabber, Yahoo Msn, HTTP Chat                | CHAT         |
| HTTP-STR     | HTTP Streaming                                        | HSTR         |
| OTHERS       | NBS, Ms-ds, Epmap, Attacks, LDAP, Microsoft SQL, Oracle SQL, mySQL | OTHERS       |
| BITTORRENT   | Bittorrent                                            | BT           |
| FTP          | Ftp data, Ftp control, HTTP file transfer              | FTP          |
| GAMES        | NFS3, Blizzard Battlenet, Quake II/III, Counter Strike, HTTP Games | GAMES        |
| STREAMING    | MS Media Server, Real Player                          | STREAMING    |
| GNUTELLA     | Gnutella                                              | GNUTELLA     |
| ARES         | Ares                                                  | ARES         |
| TRIBALL      | Triball                                               | TRIBALL      |
| P2P-REST     | Kazaa, SoulSeek, Filetopia, Others                    | P2P-REST     |
| NEWS         | Nntp                                                  | NEWS         |
| UNKNOWN      | -                                                     | X            |

**Table 3: Set B - Per Flow Features.**

| Feature                  | Description                                           |
|--------------------------|-------------------------------------------------------|
| Push pkt down            | Count of packets with Push flag downstream            |
| Push pkt up              | Count of packets with Push flag upstream              |
| Avg seg size down        | Data bytes divided by # of packets downstream         |
| Min seg size down        | Minimum segment size downstream                       |
| Data pkt down            | Packets with payload downstream                       |
| Pkt size median up       | Packet size median upstream                           |
| Local port               | Local TCP port                                        |
| Distant port             | Distant TCP port                                      |

**Table 4: Impact of Flow Definitions on MS-I Trace.**

| Class        | S/S [flows%/bytes%] | S/S+F/R [flows%/bytes%] | S/S+4D [flows%/bytes%] |
|--------------|---------------------|-------------------------|------------------------|
| WEB          | 32%/73%             | 89%/83%                 | 80%/64%                |
| DB           |                     |                         |                        |
| FTP          |                     |                         |                        |
| GAMES        |                     |                         |                        |
| HTTP-STR     |                     |                         |                        |
| OTHERS       |                     |                         |                        |
| EDONKEY      |                     |                         |                        |
| MAIL         |                     |                         |                        |
| CHAT         |                     |                         |                        |

Note: Other traces show similar results.