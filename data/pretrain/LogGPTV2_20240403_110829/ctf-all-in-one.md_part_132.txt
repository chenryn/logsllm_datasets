| 0x0804883e xor eax, dword gs:[0x14]
| ,= 0x0804884c leave
\ 0x0804884d ret
所以该函数所读入的字符串是先放在栈上，然后复制到堆。最后调用一个函数打印
出了堆上的字符串。
来看一下读入字符串的函数 sub.read_68d ：
[0x08048590]> pdf @ sub.read_68d
/ (fcn) sub.read_68d 124
| sub.read_68d (int arg_8h, int arg_ch, int arg_10h);
| ; var int local_1ch @ ebp-0x1c
1303
6.1.23 pwn BCTF2016 bcloud
| ; var int local_dh @ ebp-0xd
| ; var int local_ch @ ebp-0xc
| ; arg int arg_8h @ ebp+0x8
| ; arg int arg_ch @ ebp+0xc
| ; arg int arg_10h @ ebp+0x10
| ; var int local_4h @ esp+0x4
| ; var int local_8h @ esp+0x8
| ; XREFS: CALL 0x080487f8 CALL 0x080488d4 CALL 0x08
0488fe CALL 0x08048737 CALL 0x08048a79 CALL 0x08048b4f
| 0x0804868d push ebp
| 0x0804868e mov ebp, esp
| 0x08048690 sub esp, 0x28
; '('
| 0x08048693 mov eax, dword [arg_10h]
; 第三个参数
| 0x08048696 mov byte [local_1ch], al
; 通过后面的程序可知这里是换行符 "\x0a"
| 0x08048699 mov dword [local_ch], 0
| 0x080486a0 mov dword [local_ch], 0
; 循环计数 i，初始化为 0
| ,= 0x080486a9 mov dword [local_8h], 1
| :| 0x080486b1 lea eax, [local_dh]
| :| 0x080486b4 mov dword [local_4h], eax
| :| 0x080486b8 mov dword [esp], 0
| :| 0x080486bf call sym.imp.read
; read(0, [local_dh], 1) 读入一个字节
| :| 0x080486c4 test eax, eax
| ,=== 0x080486d4 movzx eax, byte [local_dh]
| :| 0x080486d8 cmp al, byte [local_1ch]
; 将读入字节与换行符比较
| ,=== 0x080486df mov edx, dword [local_ch]
; 取出 i
| | :| 0x080486e2 mov eax, dword [arg_8h]
; 第一个参数，即 buf 的位置
| | :| 0x080486e5 add edx, eax
; buf[i]
| | :| 0x080486e7 movzx eax, byte [local_dh]
| | :| 0x080486eb mov byte [edx], al
; 将读入字节放到 buf[i]
| | :| 0x080486ed add dword [local_ch], 1
; i = i + 1
| | :| ; JMP XREF from 0x080486a7 (sub.read_68d)
| | :`-> 0x080486f1 mov eax, dword [local_ch]
| | : 0x080486f4 cmp eax, dword [arg_ch]
; i 与第二个参数比较
| | `== 0x080486f9 mov edx, dword [local_ch]
| 0x080486fc mov eax, dword [arg_8h]
; 取出 buf 的位置
| 0x080486ff add eax, edx
; buf[i]
| 0x08048701 mov byte [eax], 0
; 将 "\x00" 放到 buf[i]
| 0x08048704 mov eax, dword [local_ch]
; 返回 i
| 0x08048707 leave
\ 0x08048708 ret
乍看之下似乎没有问题，在读入字符串末尾也加上了截断 \x00 。
但是，注意观察读入字符串和 malloc 返回地址在栈上的位置关系。字符串其实地
址 local_5ch ，最多 0x40 个字节，返回地址位于 local_5ch + 0x40 ，所以
如果我们正好读入 0x40 字节，则 \x00 会被放到 local_5ch + 0x41 的位
1305
6.1.23 pwn BCTF2016 bcloud
置，然后正好被返回地址给覆盖掉了。由于函数 strcpy() 是以 \x00 来决定
字符串结尾的，所以字符串连上返回地址会被一起复制到堆上。然后又被一起打印
出来。于是我们就得到了堆地址。
继续看函数 sub.memset_84e ：
[0x08048590]> pdf @ sub.memset_84e
/ (fcn) sub.memset_84e 334
| sub.memset_84e ();
| ; var int local_a8h @ ebp-0xa8
| ; var int local_a4h @ ebp-0xa4
| ; var int local_a0h @ ebp-0xa0
| ; var int local_9ch @ ebp-0x9c
| ; var int local_ch @ ebp-0xc
| ; var int local_4h @ esp+0x4
| ; var int local_8h @ esp+0x8
| ; CALL XREF from 0x080489a7 (fcn.0804899c)
| 0x0804884e push ebp
| 0x0804884f mov ebp, esp
| 0x08048851 sub esp, 0xb8
; 开辟栈空间
| 0x08048857 mov eax, dword gs:[0x14]
; [0x14:4]=-1 ; 20
| 0x0804885d mov dword [local_ch], eax
| 0x08048860 xor eax, eax
| 0x08048862 lea eax, [local_9ch]
; eax = local_9ch
| 0x08048868 add eax, 0x40
; eax = local_9ch + 0x40
| 0x0804886b mov dword [local_a8h], eax
; [local_a8h] = local_9ch + 0x40
| 0x08048871 lea eax, [local_9ch]
; eax = local_9ch
| 0x08048877 add eax, 0x44
; eax = local_9ch + 0x44
| 0x0804887a mov dword [local_a4h], eax
; [local_a4h] = local_9ch + 0x44
| 0x08048880 lea eax, [local_9ch]
; eax = local_9ch
| 0x08048886 add eax, 0x88
1306
6.1.23 pwn BCTF2016 bcloud
; eax = local_9ch + 0x88
| 0x0804888b mov dword [local_a0h], eax
; [local_a0h] = local_9ch + 0x88
| 0x08048891 mov dword [local_8h], 0x90
; [0x90:4]=-1 ; 144
| 0x08048899 mov dword [local_4h], 0
| 0x080488a1 lea eax, [local_9ch]
| 0x080488a7 mov dword [esp], eax
| 0x080488aa call sym.imp.memset
; memset(local_9ch, 0, 0x90) 初始化内存
| 0x080488af mov dword [esp], str.Org:
; [0x8048e98:4]=0x3a67724f ; "Org:"
| 0x080488b6 call sym.imp.puts
; int puts(const char *s)
| 0x080488bb mov dword [local_8h], 0xa
| 0x080488c3 mov dword [local_4h], 0x40
; '@' ; [0x40:4]=-1 ; 64
| 0x080488cb lea eax, [local_9ch]
| 0x080488d1 mov dword [esp], eax
| 0x080488d4 call sub.read_68d
; read_68d(local_9ch, 0x40, 0xa) 调用函数读入 Org 到栈
| 0x080488d9 mov dword [esp], str.Host:
; [0x8048e9d:4]=0x74736f48 ; "Host:"
| 0x080488e0 call sym.imp.puts
; int puts(const char *s)
| 0x080488e5 mov dword [local_8h], 0xa
| 0x080488ed mov dword [local_4h], 0x40
; '@' ; [0x40:4]=-1 ; 64
| 0x080488f5 mov eax, dword [local_a4h]
| 0x080488fb mov dword [esp], eax
| 0x080488fe call sub.read_68d
; read_68d(local_9ch + 0x44, 0x40, 0xa) 调用函数读入 Host
到栈
| 0x08048903 mov dword [esp], 0x40
; '@' ; [0x40:4]=-1 ; 64
| 0x0804890a call sym.imp.malloc
; addr1 = malloc(0x40) 分配空间
| 0x0804890f mov edx, eax
| 0x08048911 mov eax, dword [local_a0h]
; eax = local_9ch + 0x88
1307
6.1.23 pwn BCTF2016 bcloud
| 0x08048917 mov dword [eax], edx
; 将返回地址 addr1 放到 [local_9ch + 0x88]
| 0x08048919 mov dword [esp], 0x40
; '@' ; [0x40:4]=-1 ; 64
| 0x08048920 call sym.imp.malloc
; addr2 = malloc(0x40) 分配空间
| 0x08048925 mov edx, eax
| 0x08048927 mov eax, dword [local_a8h]
; eax = local_9ch + 0x40
| 0x0804892d mov dword [eax], edx
; 将返回地址 addr2 放到 [local_9ch + 0x40]
| 0x0804892f mov eax, dword [local_a8h]
| 0x08048935 mov eax, dword [eax]
| 0x08048937 mov dword [0x804b0c8], eax
; 将返回地址 addr2 放到 [0x804b0c8]
| 0x0804893c mov eax, dword [local_a0h]
| 0x08048942 mov eax, dword [eax]
| 0x08048944 mov dword [0x804b148], eax
; 将返回地址 addr1 放到 [0x804b148]
| 0x08048949 mov eax, dword [local_a0h]
| 0x0804894f mov eax, dword [eax]
| 0x08048951 mov edx, dword [local_a4h]
| 0x08048957 mov dword [local_4h], edx
| 0x0804895b mov dword [esp], eax
| 0x0804895e call sym.imp.strcpy
; strcpy(addr1, local_9ch + 0x44) 复制 Host 到 addr1
| 0x08048963 mov eax, dword [local_a8h]
| 0x08048969 mov eax, dword [eax]
| 0x0804896b lea edx, [local_9ch]
| 0x08048971 mov dword [local_4h], edx
| 0x08048975 mov dword [esp], eax
| 0x08048978 call sym.imp.strcpy
; strcpy(addr2, local_9ch) 复制 Org 到 addr2
| 0x0804897d mov dword [esp], str.OKay__Enjoy:
; [0x8048ea3:4]=0x79614b4f ; "OKay! Enjoy:)"
| 0x08048984 call sym.imp.puts
; int puts(const char *s)
| 0x08048989 mov eax, dword [local_ch]
| 0x0804898c xor eax, dword gs:[0x14]
| ,= 0x0804899a leave
\ 0x0804899b ret
同样的，Host 的返回地址放在 local_9ch + 0x88 的位置，而字符串最多到
local_9ch + 0x44 + 0x40 ，中间还间隔了 0x4 字节，所以不存在漏洞。但是
Org 的返回地址放在 local_9ch + 0x40 ，正好位于字符串的后面，所以存在漏
洞。同时 Host 的字符串又正好位于 Org 返回地址的后面，所以 strcpy 会将 Org 字
符串，返回地址和 Host 字符串全都复制到 Org 的堆上，造成堆溢出。利用这个堆
溢出我们可以修改 top chunk 的 size，即 house-of-force。
当然这种漏洞有一定的几率不会成功，比如返回地址的低位本来就是 \x00 的时
候，就恰好截断了。
New note
[0x08048590]> pdf @ sub.Input_the_length_of_the_note_content:_9a
e
/ (fcn) sub.Input_the_length_of_the_note_content:_9ae 244
| sub.Input_the_length_of_the_note_content:_9ae (int arg_9h, i
nt arg_ah);
| ; var int local_10h @ ebp-0x10
| ; var int local_ch @ ebp-0xc
| ; arg int arg_9h @ ebp+0x9
| ; arg int arg_ah @ ebp+0xa
| ; CALL XREF from 0x08048d11 (main + 144)
| 0x080489ae push ebp
| 0x080489af mov ebp, esp
| 0x080489b1 sub esp, 0x28
; '('
| 0x080489b4 mov dword [local_ch], 0
| 0x080489bb mov dword [local_10h], 0
| 0x080489c2 mov dword [local_10h], 0
; 循环计数 i，初始化为 0
| ,= 0x080489cb mov eax, dword [local_10h]
| :| 0x080489ce mov eax, dword [eax*4 + 0x804b120]
; 取出 notes[i]
| :| 0x080489d5 test eax, eax
| ,=== 0x080489db add dword [local_10h], 1
; i = i + 1
| | :| ; JMP XREF from 0x080489c9 (sub.Input_the_length_of_
the_note_content:_9ae)
| | :`-> 0x080489df cmp dword [local_10h], 9
; 最多有 10 个 note
| | `== 0x080489e5 cmp dword [local_10h], 0xa
; [0xa:4]=-1 ; 10
| ,= 0x080489fc mov dword [esp], str.Input_the_lengt
h_of_the_note_content: ; [0x8048eec:4]=0x75706e49
| | 0x08048a03 call sym.imp.puts
; int puts(const char *s)