currentTotal=9, data=" "
Tok[1][4]: type= ASCII_CMDVAR, dataLen=5, 
currentTotal=14, data="jared"
Tok[1][5]: type=
ASCII_SPACE, dataLen=1, 
currentTotal=15, data=" "
Tok[1][6]: type= ASCII_CMDVAR, dataLen=3, 
currentTotal=18, data="{5}"
Tok[1][7]: type=
ASCII_END, dataLen=2, 
currentTotal=20, data="\x0d\x0a"
Tok[3][0]: type=
ASCII_CMD, dataLen=5, 
currentTotal=5, data="jared"
Tok[3][1]: type=
ASCII_END, dataLen=2, 
currentTotal=7, data="\x0d\x0a"
158
Building and Classifying Fuzzers
5.2
Detailed View of Fuzzer Types
159
Tok[5][0]: type=
ASCII_CMD, dataLen=2, 
currentTotal=2, data="03"
Tok[5][1]: type=
ASCII_SPACE, dataLen=1, 
currentTotal=3, data=" "
Tok[5][2]: type=
ASCII_CMDVAR, dataLen=10, 
currentTotal=13, data="CAPABILITY"
Tok[5][3]: type=
ASCII_END, dataLen=2, 
currentTotal=15, data="\x0d\x0a"
Each piece of data, now called a token, is assigned a type. Note that GPF
didn’t attempt to tokenize the server data, because this will simply be
read in by GPF and generally not acted upon. Each token is fuzzed
according to its own heuristics. For example, an ASCII_END might be
reordered (\x0a\x0d), replaced by a null, or left off. ASCII_CMDs aren’t
fuzzed as often because parsing mistakes tend to be in CMDVARs. See
the GPF source code for a complete description of the many heuristics.
d. The –E mode is the newest: the Evolutionary Fuzzing System. EFS will
be detailed in Chapter 7.
5.2.6
Next-Generation Fuzzing Frameworks: Sulley
Sulley is a new fuzzing framework that is a cross between Spike, Autodafé, and
PaiMei. The tester defines a protocol file that describes the protocol and the meth-
ods by which they will be fuzzed in the “request” description file. This protocol
description information could come from a network capture, by reading the proto-
col RFC, or both. That information is used in a “session” file that initializes the
logging and begins the transfer of fuzzed sessions, which are described by “request”
files. Sulley is the most complete open source fuzzing framework, but it does not
come “loaded” with any real out-of-the-box protocol descriptions. In other words,
it is great help in writing fuzzers but can’t fuzz anything by itself. Sulley includes
target health monitoring and reset capability, network logging, fault detection and
categorization, postmortem analysis, and more. Sulley is fully described in the book
Fuzzing: Brute Force Vulnerability Discovery by Michael Sutton, Adam Greene,
and Pedrum Amini or online at www.fuzzing.org.
Sulley contains the fullest featured syntax to describe protocols. As an example
of how to write such a specification, we provide a description of the TLS protocol.
TLS is commonly known as SSL and is most often used to secure web traffic for e-
commerce applications. This first snippet is the session code named fuzz_tls.py (Fig-
ure 5.12):
Figure 5.13 shows the implementation of the requests.
As a quick overview, the TLS handshake protocol goes like this:
client_hello Æ
¨ server_hello_certificate
¨ server_key_exchange
client_key_exchange_change_cipher_finish Æ
¨ server_change_cipher_finish
160
Building and Classifying Fuzzers
Figure 5.12
fuzz_tls.py.
Figure 5.13
The Sulley request for a TLS Client hello message.
If it is desirable to fuzz the server, really only two messages (requests) are
important: the client_hello and the client_key_exchange. There could be others
based on specific implementations. Additionally, it might be wise to fuzz SSL clients
(web browsers in many cases). The session file (called fuzz_tls.py) calls the two
requests of interest. Both of these requests (and the session file) had to be created
from scratch. Thus, you see the weakness of intelligent fuzzing: understanding TLS,
being proficient with Sulley, and doing the leg work to implement specific requests
is nontrivial. By contrast, setting up ProxyFuzz would only take a few moments, but
fewer bugs would likely be found. Implementing the second request is left as an
exercise to the reader. Again, for a detailed explanation of Sulley sytnax, see
www.fuzzing.org/wp-content/SulleyManual.pdf or www.fuzzing.org/wp-content/
Amini-Portnoy-BHUS07.zip.
5.2.7
In-Memory Fuzzing
In-memory fuzzing is substantially different from the other types of fuzzing dis-
cussed throughout this chapter. One of the major advantages of fuzzing over source
code auditing and reverse engineering is that fuzzing finds “real” bugs by exercis-
ing accessible interfaces. In static analysis, a dangerous function may be identified,
but after further investigation it might be found to be inaccessible via available user
interfaces or the data is filtered in some manner. With in-memory fuzzing, this same
false positive scenario can arise, as will be shown via further explanation.
In-memory fuzzing involves modifying arguments, in memory, before they are
consumed by internal program functions. This fuzzing technique is more suited to
closed source applications, in which individual test harnesses cannot be easily con-
structed due to lack of source code.
The targeted functions may or may not be reachable via user input. As we’ve
discussed, only a small subset of program functions are employed to handle user
input. Thus, in-memory fuzzing will likely require the services of an experienced
reverse engineer who can identify the start and stop locations of parsing routines to
be fuzzed. For a network server, hooking the application just after a recv() call
could be a good choice.
5.2
Detailed View of Fuzzer Types
161
Figure 5.13
Continued
In-memory fuzzing is further complicated by the fact that the elements being
fuzzed are not files or packets, but rather, function parameters. This means that the
state of the program under test needs to be reset for each iteration of the fuction.
There are tools available such as PyDbg that can save and restore state.
Should the time be taken to implement the above system, there are a few dis-
tinct advantages. Consider a closed source application with a complicated encryp-
tion scheme handled over multiple network handshake packets. Normally, this
protocol would have to be reverse engineered to create an intelligent fuzzer. A
mutation-based approach (flipping bits) would not fuzz the underlying data, but
only the decryption functions. With in-memory fuzzing, all or some of the func-
tions after the recv() function can be fuzzed in memory without understanding how
the encryption works.29 In this way, the actual underlying data being parsed can be
fuzzed directly. Also, consider a network server that has a very slow client-server
protocol. A speed increase could be realized via in-memory fuzzing in this case.
5.3
Fuzzer Classification via Interface
Fuzzers could also be classified according to the interface they’re intended to test.
The following sections point out how a fuzzer could be used or constructed based
on particular interfaces.
5.3.1
Local Program
The classic example of local program fuzzing is finding a Unix SUID program and
fuzzing it. Any flaw in it may be used to elevate the privileges of an attacker. Typ-
ically, local fuzzers fuzz command line arguments, environment variables, and any
other exposed interfaces. A good example of such a fuzzer is Sharefuzz.
Other examples of fuzzing a local program is hooking an application running
on the test computer with a debugger and fuzzing functions in memory. File fuzzing
is another example of local program testing (although this is often to find remote,
client-side vulnerabilities). Testing IPC or local socket programs could be consid-
ered local. This is really a catch-all category.
5.3.2
Network Interfaces
Testing IP protocols was once the dominant application of fuzzers. It is perhaps the
most critical use of fuzzing due to the consequences of a remote security breach by
a hacker. This particular type of fuzzer is likely what you think of when you think
of fuzzing. At its core, it involves sending semi-valid application packets to the
server or client. As we discussed, there are many different ways to generate the test
cases. Examples of this type of fuzzer include GPF and TAOF.
162
Building and Classifying Fuzzers
29Going back to the IKE example, this may be a way to fuzz IKE without building a generation
fuzzer.
5.3.3
Files
File fuzzing involves repeatedly delivering semi-valid files to the application that
consumes those files. These files may consist of audio files, video files, word pro-
cessing, or in general, any file that an application might parse. Again, there are a
variety of ways to generate these files, depending on the domain-specific knowledge
known for the file and the amount of time or effort available.
Below is a simple Java program that performs non-intelligent file fuzzing:30
import java.io.*;
import java.security.SecureRandom;
import java.util.Random;
public class Fuzzer {
private Random random = new SecureRandom();31
private int count = 1;
public File fuzz(File in, int start, int length) throws IOException
{
byte[] data = new byte[(int) in.length()];
DataInputStream din = new DataInputStream(new
FileInputStream(in));
din.readFully(data);
fuzz(data, start, length);
String name = "fuzz_" + count + "_" + in.getName();
File fout = new File(name);
FileOutputStream out = new FileOutputStream(fout);
out.write(data);
out.close();
din.close();
count++;
return fout;
}
// Modifies byte array in place
public void fuzz(byte[] in, int start, int length) {
byte[] fuzz = new byte[length];
random.nextBytes(fuzz);
System.arraycopy(fuzz, 0, in, start, fuzz.length);
}
}
5.3
Fuzzer Classification via Interface
163
30Elliotte Harold, “Fuzz Testing: Attack Your Programs Before Someone Else Does,” www-128
.ibm.com/developerworks/java/library/j-fuzztest.html
31SecureRandom() might not be the best choice: If you use Random with a seed, you will be able
to reproduce the tests.
Other well known file fuzzers include FileFuzz, SPIKEfile, notSPIKEfile, and
the file fuzz PaiMei module.
5.3.4
APIs
An application programmer interface is a software description of how a certain
function is called. For example, in C, the definition of a function void myfunc(int,
int, char); would be the API, or prototype, to that function. The function returns
nothing, but accepts two integers and a character as parameters. API fuzzing
involves supplying unexpected parameters when this function is called. This could
be done with or without source code. If source code is not available, pre-analysis of
the function or basic block would be required. A reverse engineering tool such as
IDA Pro could be used to quickly determine the parameters to internal functions.
Gray-box (requires debugger) API fuzzing would likely be carried out by security
auditors, while white-box (requires UNIT strap or instrumentation) API fuzzing
would likely be performed by QA professionals. Examples of API fuzzers include
COMRaider, (a COM object fuzzer) and AxMan, (an ActiveX fuzzer).
5.3.5
Web Fuzzing
For the most part “web fuzzing” is a misnomer. It certainly is possible to fuzz the
HTTP protocol, just as it is any other protocol. Web testing receives extra attention
because HTTP/HTTPS traffic is the most common Internet traffic. Often, though,
when people refer to web fuzzing, what they really mean is automated web audit-
ing. This consists of submitting various semi-valid data to various form fields of
web applications and “spidering” the application to discover all the valid pages,
URLs, and inputs. The open source projects Pantera and Spike Proxy are both
examples of web application fuzzers. WebInspect and AppScan are two well-known
commercial web application fuzzers.
5.3.6
Client-Side Fuzzers
Some of us may recall the month of browser bugs posted by H.D. Moore.32 How
did this happen? A new browser bug posted everyday for an entire month! This was
a result of three primary factors:
• Browsers are terribly complex, including things like Java Virtual Machines.
• Client-side testing had not been considered important in the past.
• H.D. was the first one in. Fuzzing is particularly effective against mostly
untested interfaces. The first to fuzz will find the bulk of bugs. This makes
sense. The same is true for the first round of rough testing done by develop-
ers in a traditional setting.
Client-side testing simply indicates that it’s not the server under test but the
client. This had not been done much in the past because hackers normally like to
164
Building and Classifying Fuzzers
32MoBBs. http://browserfun.blogspot.com/2006/07/welcome-to-browser-fun-blog.html
find exploits that allow the attacker to actively attack a server. Server bugs are best
for this type of active exploitation. As server code has gotten better over the years,
new avenues of pwning (hacker lingo for exploiting) boxes was required. It was dis-
covered that setting up a bogus website that would send illegitimate connections
back to weak browsers was one such avenue. Let this be a lesson: Clients are as
important as servers. If you disagree, don’t test your client, but don’t complain
when your product is in the news for being hacked. Some well-known client-side
fuzzers include MangleMe, (an HTML fuzzer) and jsfunfuzz, (a JavaScript fuzzer).
5.3.7
Layer 2 Through 7 Fuzzing
OSI (Open Systems Interconnection) is a standard description for how messages
should be transmitted between any two points on a network. Seven layers are used:
• Layer 7: Application layer;
• Layer 6: Presentation layer;
• Layer 5: Session layer;
• Layer 4: Transport layer;
• Layer 3: Network layer;
• Layer 2: Data Link layer;
• Layer 1: Physical layer.
Any of the layers could be fuzzed, but for example, sending random voltages to
the physical layer would just prove what we already know—it’ll fry it if you crank
up the juice. However, all the other layers include data that must be processed and
could lead to vulnerabilities if not done correctly. Just recently the wireless data
link layer has been a popular test subject and led to a controversial Mac OS X vul-
nerability, by Maynor and Ellch.
Layer 3 (the network layer) of the networking stack is the IP header. A tool was
written years ago by Mike Frantzen called IP Stack Integrity Checker (ISIC), which
was surprisingly good at causing kernel panics in all types of Unix systems. The
idea is the same as all fuzzing: Create a mostly valid IP header but either random-
ize a few fields or purposely pick known bad values. The IP stack on Microsoft’s
Vista platform is of particular interest lately for two reasons:
1. Vista user land applications are fairly secure these days, but kernel bugs
could prove more damaging.
2. The IP stack was totally rewritten for Vista. New code is fertile ground for
fuzzing.
Additionally, there are commercial entities out there focused on writing layer 3
fuzzing for SCADA33 and industrial platforms that have received relatively little
testing from the security community.34
5.3
Fuzzer Classification via Interface
165
33http://en.wikipedia.org/wiki/SCADA, accessed on 12/28/07.
34Digital Bond is one such company: www.digitalbond.com/index.php/2007/03/13/achilles-
controller-certification-part-1-of-4
5.4
Summary
Bug detection tools known as fuzzers are a useful part of software testing and vul-
nerability analysis. The best fuzzers of today are built by experienced vulnerability
analysts and testers and employ the power of automatic protocol descriptions, ran-
domness, known useful heuristics, tracing, debugging, logging, and more.
This chapter has shown that many fuzzer types exist. At their core, they are all
very similar: Deliver semi-invalid data and report on results. However, the vehicle by
which the data is delivered to the test target is important if real results are desired.
Only the imagination limits the number of fuzzer categories and types, but we have
tried to give examples of the inner workings of the prevalent options. Understand-
ing the internal operation of a given fuzzer is important for many reasons. Interpret-
ing expected and actual results would be one reason. Another is that in Chapter 8 we
will compare and contrast commercial options with open source options. For this to
be possible we require an understanding of the various tool types.
166
Building and Classifying Fuzzers
C H A P T E R  6
Target Monitoring
You’ve spent significant time analyzing the source and deriving high-quality fuzzed
inputs to test the target system. You’ve faithfully sent these inputs to the target.
Now what? Almost as important as the generation of inputs in the process of
fuzzing is the way in which the target is monitored. After all, if you can’t tell when
an input has caused a problem, it doesn’t do any good to have created and sent it!
As we’ll see in this chapter, there are a number of options when it comes to target
monitoring, some relatively basic and others that are quite complex and intrusive
to the target, but that may find vulnerabilities missed by less-detailed monitoring
techniques.
6.1
What Can Go Wrong and What Does It Look Like?
Before we can discuss how to properly monitor a system, we must first examine
what can go wrong with the target. Once we understand the issues that can arise,
we can better understand how to detect these problems. Since we already discussed
this earlier in the book, we will review this quickly.
6.1.1
Denial of Service (DoS)
One common security problem found in systems is that of a denial of service con-
dition. This means that the functionality provided by the system is no longer avail-
able to the intended user or this functionality is only available at a degraded
capacity. This may mean the entire system is unusable, requires administration,
reboots, and so on. It may simply mean that an application is no longer available
or that so many resources of the system are being used and the performance of the
system is so severely degraded that users cannot utilize the service.
Denial of service problems are relatively easy to detect. The service can be peri-
odically checked to make sure it functions as intended in a timely manner. Like-
wise, on the target, system resources can be monitored and alerts can be generated
if they exceed some threshold. One caveat is that oftentimes a denial of service con-
dition is transient. That is, the condition may only be temporary, and the system
may restore itself to full capacity after a short delay. One example of this would be