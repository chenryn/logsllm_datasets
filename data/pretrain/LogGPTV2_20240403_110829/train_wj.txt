.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" wed jun 14 16:10:28 bst 1995 wilf. (PI:EMAIL)
.\" tiny change in formatting - aeb, 950812
.\" modified 8 may 1998 by joseph s. myers (PI:EMAIL)
.\"
.\" show the synopsis section nicely
.th regex 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
regcomp, regexec, regerror, regfree \- posix regex functions
.sh synopsis
.nf
.b #include 
.pp
.bi "int regcomp(regex_t *restrict " preg ", const char *restrict " regex ,
.bi "            int " cflags );
.bi "int regexec(const regex_t *restrict " preg \
", const char *restrict " string ,
.bi "            size_t " nmatch ", regmatch_t " pmatch "[restrict]\
, int " eflags );
.pp
.bi "size_t regerror(int " errcode ", const regex_t *restrict " preg ,
.bi "            char *restrict " errbuf ", size_t " errbuf_size );
.bi "void regfree(regex_t *" preg );
.fi
.sh description
.ss posix regex compiling
.br regcomp ()
is used to compile a regular expression into a form that is suitable
for subsequent
.br regexec ()
searches.
.pp
.br regcomp ()
is supplied with
.ir preg ,
a pointer to a pattern buffer storage area;
.ir regex ,
a pointer to the null-terminated string and
.ir cflags ,
flags used to determine the type of compilation.
.pp
all regular expression searching must be done via a compiled pattern
buffer, thus
.br regexec ()
must always be supplied with the address of a
.br regcomp ()-initialized
pattern buffer.
.pp
.i cflags
is the
.rb bitwise- or
of zero or more of the following:
.tp
.b reg_extended
use
.b posix
extended regular expression syntax when interpreting
.ir regex .
if not set,
.b posix
basic regular expression syntax is used.
.tp
.b reg_icase
do not differentiate case.
subsequent
.br regexec ()
searches using this pattern buffer will be case insensitive.
.tp
.b reg_nosub
do not report position of matches.
the
.i nmatch
and
.i pmatch
arguments to
.br regexec ()
are ignored if the pattern buffer supplied was compiled with this flag set.
.tp
.b reg_newline
match-any-character operators don't match a newline.
.ip
a nonmatching list
.rb ( [\(ha...] )
not containing a newline does not match a newline.
.ip
match-beginning-of-line operator
.rb ( \(ha )
matches the empty string immediately after a newline, regardless of
whether
.ir eflags ,
the execution flags of
.br regexec (),
contains
.br reg_notbol .
.ip
match-end-of-line operator
.rb ( $ )
matches the empty string immediately before a newline, regardless of
whether
.i eflags
contains
.br reg_noteol .
.ss posix regex matching
.br regexec ()
is used to match a null-terminated string
against the precompiled pattern buffer,
.ir preg .
.i nmatch
and
.i pmatch
are used to provide information regarding the location of any matches.
.i eflags
is the
.rb bitwise- or
of zero or more of the following flags:
.tp
.b reg_notbol
the match-beginning-of-line operator always fails to match (but see the
compilation flag
.b reg_newline
above).
this flag may be used when different portions of a string are passed to
.br regexec ()
and the beginning of the string should not be interpreted as the
beginning of the line.
.tp
.b reg_noteol
the match-end-of-line operator always fails to match (but see the
compilation flag
.b reg_newline
above).
.tp
.b reg_startend
use
.i pmatch[0]
on the input string, starting at byte
.i pmatch[0].rm_so
and ending before byte
.ir pmatch[0].rm_eo .
this allows matching embedded nul bytes
and avoids a
.br strlen (3)
on large strings.
it does not use
.i nmatch
on input, and does not change
.b reg_notbol
or
.b reg_newline
processing.
this flag is a bsd extension, not present in posix.
.ss byte offsets
unless
.b reg_nosub
was set for the compilation of the pattern buffer, it is possible to
obtain match addressing information.
.i pmatch
must be dimensioned to have at least
.i nmatch
elements.
these are filled in by
.br regexec ()
with substring match addresses.
the offsets of the subexpression starting at the
.ir i th
open parenthesis are stored in
.ir pmatch[i] .
the entire regular expression's match addresses are stored in
.ir pmatch[0] .
(note that to return the offsets of
.i n
subexpression matches,
.i nmatch
must be at least
.ir n+1 .)
any unused structure elements will contain the value \-1.
.pp
the
.i regmatch_t
structure which is the type of
.i pmatch
is defined in
.ir  .
.pp
.in +4n
.ex
typedef struct {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;
.ee
.in
.pp
each
.i rm_so
element that is not \-1 indicates the start offset of the next largest
substring match within the string.
the relative
.i rm_eo
element indicates the end offset of the match,
which is the offset of the first character after the matching text.
.ss posix error reporting
.br regerror ()
is used to turn the error codes that can be returned by both
.br regcomp ()
and
.br regexec ()
into error message strings.
.pp
.br regerror ()
is passed the error code,
.ir errcode ,
the pattern buffer,
.ir preg ,
a pointer to a character string buffer,
.ir errbuf ,
and the size of the string buffer,
.ir errbuf_size .
it returns the size of the
.i errbuf
required to contain the null-terminated error message string.
if both
.i errbuf
and
.i errbuf_size
are nonzero,
.i errbuf
is filled in with the first
.i "errbuf_size \- 1"
characters of the error message and a terminating null byte (\(aq\e0\(aq).
.ss posix pattern buffer freeing
supplying
.br regfree ()
with a precompiled pattern buffer,
.i preg
will free the memory allocated to the pattern buffer by the compiling
process,
.br regcomp ().
.sh return value
.br regcomp ()
returns zero for a successful compilation or an error code for failure.
.pp
.br regexec ()
returns zero for a successful match or
.b reg_nomatch
for failure.
.sh errors
the following errors can be returned by
.br regcomp ():
.tp
.b reg_badbr
invalid use of back reference operator.
.tp
.b reg_badpat
invalid use of pattern operators such as group or list.
.tp
.b reg_badrpt
invalid use of repetition operators such as using \(aq*\(aq
as the first character.
.tp
.b reg_ebrace
un-matched brace interval operators.
.tp
.b reg_ebrack
un-matched bracket list operators.
.tp
.b reg_ecollate
invalid collating element.
.tp
.b reg_ectype
unknown character class name.
.tp
.b reg_eend
nonspecific error.
this is not defined by posix.2.
.tp
.b reg_eescape
trailing backslash.
.tp
.b reg_eparen
un-matched parenthesis group operators.
.tp
.b reg_erange
invalid use of the range operator; for example, the ending point of the range
occurs prior to the starting point.
.tp
.b reg_esize
compiled regular expression requires a pattern buffer larger than 64\ kb.
this is not defined by posix.2.
.tp
.b reg_espace
the regex routines ran out of memory.
.tp
.b reg_esubreg
invalid back reference to a subexpression.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br regcomp (),
.br regexec ()
t}	thread safety	mt-safe locale
t{
.br regerror ()
t}	thread safety	mt-safe env
t{
.br regfree ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh examples
.ex
#include 
#include 
#include 
#include 
#define array_size(arr) (sizeof((arr)) / sizeof((arr)[0]))
static const char *const str =
        "1) john driverhacker;\en2) john doe;\en3) john foo;\en";
static const char *const re = "john.*o";
int main(void)
{
    static const char *s = str;
    regex_t     regex;
    regmatch_t  pmatch[1];
    regoff_t    off, len;
    if (regcomp(&regex, re, reg_newline))
        exit(exit_failure);
    printf("string = \e"%s\e"\en", str);
    printf("matches:\en");
    for (int i = 0; ; i++) {
        if (regexec(&regex, s, array_size(pmatch), pmatch, 0))
            break;
        off = pmatch[0].rm_so + (s \- str);
        len = pmatch[0].rm_eo \- pmatch[0].rm_so;
        printf("#%d:\en", i);
        printf("offset = %jd; length = %jd\en", (intmax_t) off,
                (intmax_t) len);
        printf("substring = \e"%.*s\e"\en", len, s + pmatch[0].rm_so);
        s += pmatch[0].rm_eo;
    }
    exit(exit_success);
}
.ee
.sh see also
.br grep (1),
.br regex (7)
.pp
the glibc manual section,
.i "regular expressions"
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/unlocked_stdio.3
.so man3/rpc.3
.\" copyright 2015-2017 mathieu desnoyers 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th membarrier 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
membarrier \- issue memory barriers on a set of threads
.sh synopsis
.nf
.pp
.br "#include " \
" /* definition of " membarrier_* " constants */"
.br "#include " "      /* definition of " sys_* " constants */"
.b #include 
.pp
.bi "int syscall(sys_membarrier, int " cmd ", unsigned int " flags \
", int " cpu_id );
.fi
.pp
.ir note :
glibc provides no wrapper for
.br membarrier (),
necessitating the use of
.br syscall (2).
.sh description
the
.br membarrier ()
system call helps reducing the overhead of the memory barrier
instructions required to order memory accesses on multi-core systems.
however, this system call is heavier than a memory barrier, so using it
effectively is
.i not
as simple as replacing memory barriers with this
system call, but requires understanding of the details below.
.pp
use of memory barriers needs to be done taking into account that a
memory barrier always needs to be either matched with its memory barrier
counterparts, or that the architecture's memory model doesn't require the
matching barriers.
.pp
there are cases where one side of the matching barriers (which we will
refer to as "fast side") is executed much more often than the other
(which we will refer to as "slow side").
this is a prime target for the use of
.br membarrier ().
the key idea is to replace, for these matching
barriers, the fast-side memory barriers by simple compiler barriers,
for example:
.pp
.in +4n
.ex
asm volatile ("" : : : "memory")
.ee
.in
.pp
and replace the slow-side memory barriers by calls to
.br membarrier ().
.pp
this will add overhead to the slow side, and remove overhead from the
fast side, thus resulting in an overall performance increase as long as
the slow side is infrequent enough that the overhead of the
.br membarrier ()
calls does not outweigh the performance gain on the fast side.
.pp
the
.i cmd
argument is one of the following:
.tp
.br membarrier_cmd_query " (since linux 4.3)"
query the set of supported commands.
the return value of the call is a bit mask of supported
commands.
.br membarrier_cmd_query ,
which has the value 0,
is not itself included in this bit mask.
this command is always supported (on kernels where
.br membarrier ()
is provided).
.tp
.br membarrier_cmd_global " (since linux 4.16)"
ensure that all threads from all processes on the system pass through a
state where all memory accesses to user-space addresses match program
order between entry to and return from the
.br membarrier ()
system call.
all threads on the system are targeted by this command.
.tp
.br membarrier_cmd_global_expedited " (since linux 4.16)"
execute a memory barrier on all running threads of all processes that
previously registered with
.br membarrier_cmd_register_global_expedited .
.ip
upon return from the system call, the calling thread has a guarantee that all
running threads have passed through a state where all memory accesses to
user-space addresses match program order between entry to and return
from the system call (non-running threads are de facto in such a state).
this guarantee is provided only for the threads of processes that
previously registered with
.br membarrier_cmd_register_global_expedited .
.ip
given that registration is about the intent to receive the barriers, it
is valid to invoke
.br membarrier_cmd_global_expedited
from a process that has not employed
.br membarrier_cmd_register_global_expedited .
.ip
the "expedited" commands complete faster than the non-expedited ones;
they never block, but have the downside of causing extra overhead.
.tp
.br membarrier_cmd_register_global_expedited " (since linux 4.16)"
register the process's intent to receive
.br membarrier_cmd_global_expedited
memory barriers.
.tp
.br membarrier_cmd_private_expedited " (since linux 4.14)"
execute a memory barrier on each running thread belonging to the same
process as the calling thread.
.ip
upon return from the system call, the calling
thread has a guarantee that all its running thread siblings have passed
through a state where all memory accesses to user-space addresses match
program order between entry to and return from the system call
(non-running threads are de facto in such a state).
this guarantee is provided only for threads in
the same process as the calling thread.
.ip
the "expedited" commands complete faster than the non-expedited ones;
they never block, but have the downside of causing extra overhead.
.ip