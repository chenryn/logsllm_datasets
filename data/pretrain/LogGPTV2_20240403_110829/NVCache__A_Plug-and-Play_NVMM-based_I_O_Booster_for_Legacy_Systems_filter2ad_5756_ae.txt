### Wrapper (Similar in Essence to Our Prototype)

A wide array of file systems and I/O boosters have been designed and implemented for non-volatile memory (NVM). Table I (see Â§I) provides an analysis of recent research efforts in this field. Some of these systems are specifically tailored for NVM, either by porting existing file systems to NVM, such as Ext4-DAX [20], [56], or by adapting them to better leverage NVM, such as NOVA [57] or SplitFS [33].

Currently, due to high costs, NVM has a much smaller capacity compared to mass storage devices like SSDs or HDDs, making it impractical for large workloads. To address this, some systems propose combining NVM with mass storage to offer larger storage space. These systems aim to improve reliability [60], [13] or boost I/O performance [37], [53], [18], [50], [61], [16], [42], [48]. However, they often require modifications in the kernel (which are hard to maintain), in the application (which are hard to apply), or new interfaces between the kernel and user space (which increase the attack surface of the kernel).

With NVCACHE, we demonstrate that I/O performance can be enhanced without modifying the kernel or applications, and without requiring new kernel interfaces. DM-WriteCache is a Linux kernel project that boosts I/O performance without needing new kernel interfaces. While most other systems can efficiently provide new correctness guarantees such as synchronous durability, our evaluation shows that DM-WriteCache does not achieve this because the write cache is implemented behind the kernel page cache. NVCACHE, on the other hand, implements the write cache on top of the kernel page cache (in user space in our case, but it could also be implemented in the upper layers of the kernel), thereby boosting write performance and providing advanced correctness guarantees.

### Direct Use of Persistent Memory

Instead of using NVM for file systems, persistent memory can be directly accessed using load and store instructions. Persistent transactional memory (PTM) libraries use transactions to ensure a consistent state in the event of a non-corrupting failure [28]. Typically, they intercept every load and store operation of the application, using techniques such as redo-log, undo-log, or shadow data [54], [51], [49], [21]. However, most legacy applications designed to write to the file system would require substantial re-engineering to use these PTMs.

### Conclusion

NVCACHE is a write cache in NVM that enhances the write performance of legacy applications. Unlike persistent libraries, NVCACHE allows legacy applications to use NVM without any redesign or code modifications. Our evaluation shows that NVM performs as well as Ext4 configured as a direct access file system and, in most cases, on par with NOVA, but without limiting the storage space to the NVM size.

### Experimental Reproducibility

We encourage experimental reproducibility. The code is freely available at https://github.com/Xarboule/nvcache.

### Acknowledgments

According to Google Shop in September 2020, 1 GB of NVM remains roughly 100 times more expensive than 1 GB of SATA SSD. This work was funded by the Swiss National Science Foundation (FNS) under project PersiST (no. 178822).

### References

[References section remains unchanged]

This version of the text is more structured and coherent, with clearer transitions between sections and a more professional tone.