wrapper (similar in essence to what we did in our prototype).
A plethora of ﬁle systems and I/O boosters have been
designed and implemented for non-volatile memory. Table I
(see §I) presents an analysis of recent research efforts in
the ﬁeld. To begin, some of the systems implement a ﬁle
system only tailored for NVMM, either by porting an existing
ﬁle system to NVMM [52], e.g., Ext4-DAX [20], [56], or
by adapting existing ﬁle systems to better leverage NVMM,
e.g., NOVA [57] or SplitFS [33]. Today, because of high
prices,7 NVMM comes with a much smaller capacity than
mass storage devices such as SSD or HDD, making its use for
large workloads currently unrealistic. Other systems propose
to combine NVMM and mass storage to offer larger storage
space. They have either the goal of improve reliability [60],
[13] or of boosting I/O performance [37], [53], [18], [50], [61],
[16], [42], [48]. These systems require either modiﬁcations
in the kernel (hard to maintain) or in the application (hard
to apply), or new interfaces between the kernel and the user
space (which increase the attack surface of the kernel). With
NVCACHE, we show that we can boost I/O performance
without modifying the kernel or the applications, and without
requiring coordination between the kernel and the user space
through new kernel interfaces. DM-WriteCache is a Linux
kernel project that boosts I/O performance, but without requir-
ing new kernel interfaces. While most of the other systems
can efﬁciently provide new correctness guarantees such as
synchronous durability, our evaluation shows that this is not
the case with DM-WriteCache because the write cache is
implemented behind the kernel page cache. With NVCACHE
we show that, by implementing the write cache on top of the
kernel page cache (in user land in our case, but we could also
implement the write cache in the upper layers of the kernel),
we can both boost write performance and efﬁciently provide
advanced correctness guarantees.
Instead of exploiting NVMM for ﬁle systems, persistent
memory can be used directly using load and store in-
structions. Persistent transactional memory (PTM) libraries use
transactions to guarantee a consistent state in the event of
a non-corrupting failure [28]. Typically they intercept every
load and store of the application, using one of the following
three techniques to guarantee consistency: redo-log, undo-log
or shadow data [54], [51], [49], [21]. Most legacy applications
that persist data were designed to write to the ﬁle system
and modifying those applications to use the PTMs described
previously would require substantial re-engineering.
VI. CONCLUSION
NVCACHE is a write cache in NVMM that
improves
the write performance of legacy applications. Unlike with
persistent libraries, NVCACHE allows legacy applications to
use NVMM without any redesign or code modiﬁcations.
Our evaluation shows that NVMM performs as well as Ext4
conﬁgured as a direct access ﬁle system, and in most cases
on par with NOVA, but without restricting the storage space
to the NVMM size.
Experimental reproducibility. We encourage experimental
reproducibility.
at
https://github.com/Xarboule/nvcache.
available
The
code
is
freely
ACKNOWLEDGMENTS
7According to Google Shop in September 2020, 1 GB of NVMM remains
roughly 100× more expensive than 1 GB of SATA SSD.
This work received funds from the Swiss National Science
Foundation (FNS) under project PersiST (no. 178822).
11
020406080102030Time[s]Throughput[MiB/s]WritethroughputCachesize:100entries10Kentries100Kentries250Kentries1Mentries0204060802030Time[s]Throughput[MiB/s]ReadthroughputREFERENCES
[1] https://pubs.opengroup.org/onlinepubs/9699919799.2016edition/
functions/V2 chap02.html, section 2.9.7. Accessed: 2021-03-26.
[2] “Non-volatile memory SQL server tail of log caching on NVDIMM,”
https://docs.microsoft.com/en-us/archive/blogs/bobsql/how-it-works-it-
just-runs-faster-non-volatile-memory-sql-server-tail-of-log-caching-
on-nvdimm.
[3] “SQLite,” https://www.sqlite.org, accessed: 2020-05-25.
[4] “Trees I: Radix trees,” https://lwn.net/Articles/175432/, 2006.
[5] “Intel 3D XPoint™ Technology,” https://intel.ly/2XBUk4M, 2019.
[6] “Micron 3D XPoint™ Technology,” https://www.micron.com/products/
advanced-solutions/3d-xpoint-technology, 2019.
[7] “Intel® Optane™ DC Persistent Memory,” https://intel.ly/2WFisT8,
2020.
[8] H. Akinaga and H. Shima, “Resistive random access memory (ReRAM)
based on metal oxides,” Proceedings of the IEEE, vol. 98, no. 12, pp.
2237–2251, 2010.
[9] S. Aky¨urek and K. Salem, “Adaptive Block Rearrangement,” ACM
Trans. Comput. Syst., vol. 13, no. 2, p. 89–121, May 1995.
[10] J. Arulraj, A. Pavlo, and S. R. Dulloor, “Let’s talk about storage
& recovery methods for non-volatile memory database systems,” in
Proceedings of the 2015 ACM SIGMOD International Conference on
Management of Data, 2015, pp. 707–722.
[11] A. Athmanathan, M. Stanisavljevic, N. Papandreou, H. Pozidis, and
E. Eleftheriou, “Multilevel-cell phase-change memory: A viable tech-
nology,” IEEE Journal on Emerging and Selected Topics in Circuits
and Systems, vol. 6, no. 1, pp. 87–100, 2016.
[12] J. Axboe, “Fio-ﬂexible I/O tester synthetic benchmark,” https://github.
com/axboe/ﬁo, accessed: 2020-05-25.
[13] M. Baker, S. Asami, E. Deprit, J. Ouseterhout, and M. Seltzer, “Non-
Volatile Memory for Fast, Reliable File Systems,” in Proceedings of the
5th International Conference on Architectural Support for Programming
Languages and Operating Systems, ser. ASPLOS V. New York, NY,
USA: ACM, 1992, p. 10–22.
[14] G. W. Burr, M. J. Breitwisch, M. Franceschini, D. Garetto, K. Gopalakr-
ishnan, B. Jackson, B. Kurdi, C. Lam, L. A. Lastras, A. Padilla et al.,
“Phase change memory technology,” Journal of Vacuum Science & Tech-
nology B, Nanotechnology and Microelectronics: Materials, Processing,
Measurement, and Phenomena, vol. 28, no. 2, pp. 223–262, 2010.
[15] Z. Cao, S. Dong, S. Vemuri, and D. H. Du, “Characterizing, Modeling,
and Benchmarking RocksDB Key-Value Workloads at Facebook,”
in 18th USENIX Conference on File and Storage Technologies
(FAST 20).
Santa Clara, CA: USENIX Association, Feb. 2020,
pp. 209–223. [Online]. Available: https://www.usenix.org/conference/
fast20/presentation/cao-zhichao
[16] J. Chen, Q. Wei, C. Chen, and L. Wu, “FSMAC: A ﬁle system metadata
accelerator with non-volatile memory,” in IEEE 29th Symposium on
Mass Storage Systems and Technologies (MSST), May 2013, pp. 1–11.
[17] B. Choi, P. Saxena, R. Huang, and R. Burns, “Observations on porting
in-memory kv stores to persistent memory,” 2020.
[18] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. Lee, D. Burger, and
D. Coetzee, “Better I/O through Byte-Addressable, Persistent Memory,”
in Proceedings of the ACM SIGOPS 22nd Symposium on Operating
Systems Principles, ser. SOSP ’09. New York, NY, USA: Association
for Computing Machinery, 2009, p. 133–146.
[19] N. Copa et al., “Alpine Linux,” accessed on March, 2020. [Online].
Available: https://alpinelinux.org/
[20] J. Corbet, “Supporting ﬁlesystems in persistent memory,” Linux Weekly
News, 2014.
[21] A. Correia, P. Felber, and P. Ramalhete, “Romulus: Efﬁcient Algorithms
for Persistent Transactional Memory,” in Proceedings of the 30th on
Symposium on Parallelism in Algorithms and Architectures, ser. SPAA
’18. New York, NY, USA: Association for Computing Machinery,
2018, p. 271–282.
[22] G. Crump, “Enabling intel optane for modern applications – memverge
brieﬁng note,” 2019. [Online]. Available: https://storageswiss.com/2019/
04/10/enabling-intel-optane-for-modern-applications-memverge/
[23] Docker, Inc., “Docker,” accessed on March, 2020. [Online]. Available:
https://www.docker.com/
[24] E. Doller, “Phase change memory and its impacts on memory hierarchy,”
2009.
12
[27] F. T. Hady, A. Foong, B. Veal, and D. Williams, “Platform storage
performance with 3D XPoint technology,” Proceedings of the IEEE,
vol. 105, no. 9, pp. 1822–1833, 2017.
[28] J. Izraelevitz, T. Kelly, and A. Kolli, “Failure-atomic persistent memory
updates via justdo logging,” in Proceedings of the Twenty-First Interna-
tional Conference on Architectural Support for Programming Languages
and Operating Systems, ser. ASPLOS ’16.
New York, NY, USA:
Association for Computing Machinery, 2016, p. 427–442.
[29] J. Izraelevitz, H. Mendes, and M. L. Scott, “Linearizability of persistent
memory objects under a full-system-crash failure model,” in Interna-
tional Symposium on Distributed Computing. Springer, 2016, pp. 313–
327.
[30] J. Izraelevitz, J. Yang, L. Zhang, J. Kim, X. Liu, A. Memaripour, Y. J.
Soh, Z. Wang, Y. Xu, S. R. Dulloor, J. Zhao, and S. Swanson, “Basic
Performance Measurements of the Intel Optane DC Persistent Memory
Module,” 2019.
[31] S. Jeong, K. Lee, S. Lee, S. Son, and Y. Won, “I/o stack optimization
for smartphones,” in Proceedings of the 2013 USENIX Conference on
Annual Technical Conference, ser. USENIX ATC’13. USA: USENIX
Association, 2013, p. 309–320.
[32] S. H. Jo, T. Kumar, S. Narayanan, W. D. Lu, and H. Nazarian, “3D-
stackable crossbar resistive memory based on ﬁeld assisted superlinear
threshold (FAST) selector,” in 2014 IEEE international electron devices
meeting.
IEEE, 2014, pp. 6–7.
[33] R. Kadekodi, S. K. Lee, S. Kashyap, T. Kim, A. Kolli, and V. Chi-
dambaram, “SplitFS: Reducing software overhead in ﬁle systems for
persistent memory,” in Proceedings of the 27th ACM Symposium on
Operating Systems Principles, ser. SOSP ’19. New York, NY, USA:
ACM, 2019, p. 494–508.
[34] W.-H. Kang, S.-W. Lee, and B. Moon, “Flash-Based Extended Cache
for Higher Throughput and Faster Recovery,” Proceedings of the VLDB
Endowment, vol. 5, no. 11, 2012.
[35] W.-H. Kang, S.-W. Lee, B. Moon, Y.-S. Kee, and M. Oh, “Durable Write
Cache in Flash Memory SSD for Relational and NoSQL Databases,”
in Proceedings of the 2014 ACM SIGMOD International Conference
on Management of Data, ser. SIGMOD 14. New York, NY, USA:
Association for Computing Machinery, 2014, p. 529540.
[36] H. Kim, N. Agrawal, and C. Ungureanu, “Revisiting storage for smart-
phones,” ACM Transactions on Storage (TOS), vol. 8, no. 4, pp. 1–25,
2012.
[37] Y. Kwon, H. Fingler, T. Hunt, S. Peter, E. Witchel, and T. Anderson,
the 26th
New
“Strata: A Cross Media File System,” in Proceedings of
Symposium on Operating Systems Principles, ser. SOSP ’17.
York, NY, USA: ACM, 2017, p. 460–477.
[25] L. A. Eisner, T. Mollov, and S. J. Swanson, “Quill: Exploiting fast non-
volatile memory by transparently bypassing the ﬁle system,” Department
of Computer Science and Engineering, University of California, San
Diego, Tech. Rep., 2013.
[26] R. Felker et al., “musl
libc,” accessed on March, 2020. [Online].
Available: https://musl.libc.org/
[38] B. C. Lee, E. Ipek, O. Mutlu, and D. Burger, “Architecting phase change
memory as a scalable dram alternative,” in Proceedings of the 36th
Annual International Symposium on Computer Architecture, ser. ISCA
’09. New York, NY, USA: Association for Computing Machinery, 2009,
p. 2–13. [Online]. Available: https://doi.org/10.1145/1555754.1555758
[39] B. C. Lee, P. Zhou, J. Yang, Y. Zhang, B. Zhao, E. Ipek, O. Mutlu, and
D. Burger, “Phase-change technology and the future of main memory,”
IEEE MICRO, vol. 30, no. 1, pp. 143–143, 2010.
[40] L. Lersch, I. Oukid, I. Schreter, and W. Lehner, “Rethinking DRAM
caching for LSMs in an NVRAM environment,” in Advances in
Databases and Information Systems. Springer, 2017, pp. 326–340.
[41] J. Liu and S. Chen, “Initial experience with 3D XPoint main memory,”
in 2019 IEEE 35th International Conference on Data Engineering
Workshops (ICDEW).
IEEE, 2019, pp. 300–305.
[42] Y. Liu, H. Li, Y. Lu, Z. Chen, N. Xiao, and M. Zhao, “HasFS:
optimizing ﬁle system consistency mechanism on NVM-based hybrid
storage architecture,” Cluster Computing, 2019.
[43] R. Love, “Linux System Programming, 2nd Edition.” O’Reilly Media,
Inc., 2013. [Online]. Available: https://www.oreilly.com/library/view/
linux-system-programming/9781449341527/ch04.html
[44] L. Lu, T. S. Pillai, H. Gopalakrishnan, A. C. Arpaci-Dusseau, and
R. H. Arpaci-Dusseau, “WiscKey: Separating Keys from Values in SSD-
Conscious Storage,” ACM Trans. Storage, vol. 13, no. 1, Mar. 2017.
[45] J. Matthews, S. Trika, D. Hensgen, R. Coulson, and K. Grimsrud,
“Intel turbo memory: Nonvolatile disk caches in the storage hierarchy
of mainstream computer systems,” ACM Trans. Storage, vol. 4, no. 2,
May 2008.
[46] C. Min, K. Kim, H. Cho, S.-W. Lee, and Y. I. Eom, “SFS: Random Write
Considered Harmful in Solid State Drives,” in Proceedings of the 10th
USENIX Conference on File and Storage Technologies, ser. FAST’12.
USA: USENIX Association, 2012, p. 12.
[47] E. Mumolo and M. Savron, “Reducing disk I/O times using anticipatory
movements of the disk head,” Journal of systems architecture, vol. 50,
no. 1, pp. 17–33, 2004.
[48] D. Niu, Q. He, T. Cai, B. Chen, Y. Zhan, and J. Liang, “XPMFS: A
new NVM ﬁle system for vehicle big data,” IEEE Access, vol. 6, pp.
34 863–34 873, 2018.
[49] PMDK team, “Persistent Memory Development Kit,” https://pmem.io/
pmdk/, 2018.
[50] S. Qiu and A. L. Narasimha Reddy, “NVMFS: A hybrid ﬁle system for
improving random write in nand-ﬂash SSD,” in IEEE 29th Symposium
on Mass Storage Systems and Technologies (MSST), May 2013, pp. 1–5.
[51] P. Ramalhete, A. Correia, P. Felber, and N. Cohen, “OneFile: A Wait-
Free Persistent Transactional Memory,” in 2019 49th Annual IEEE/IFIP
International Conference on Dependable Systems and Networks (DSN),
June 2019, pp. 151–163.
[52] P. Sehgal, S. Basu, K. Srinivasan, and K. Voruganti, “An empirical study
of ﬁle systems on NVM,” in 31st Symposium on Mass Storage Systems
and Technologies (MSST), May 2015, pp. 1–14.
[53] R. Tadakamadla, M. Patocka, T. Kani, and S. J. Norton, “Accelerating
Database Workloads with DM-WriteCache and Persistent Memory,”
in Proceedings of the 2019 ACM/SPEC International Conference on
Performance Engineering, ser. ICPE ’19. New York, NY, USA:
Association for Computing Machinery, 2019, p. 255–263. [Online].
Available: https://doi.org/10.1145/3297663.3309669
[54] H. Volos, A. J. Tack, and M. M. Swift, “Mnemosyne: Lightweight per-
sistent memory,” ACM SIGARCH Computer Architecture News, vol. 39,
no. 1, pp. 91–104, 2011.
[55] W. Wang and S. Diestelhorst, “Quantify the Performance Overheads of
PMDK,” in Proceedings of the International Symposium on Memory
Systems, ser. MEMSYS ’18. New York, NY, USA: ACM, 2018, p.
50–52.
[56] M. Wilcox, “Add support for NV-DIMMs to ext4,” https://lwn.net/
Articles/613384, 2014.
[57] J. Xu and S. Swanson, “NOVA: A Log-Structured File System for
Hybrid Volatile/Non-Volatile Main Memories,” in Proceedings of the
14th Usenix Conference on File and Storage Technologies, ser. FAST’16.
USA: USENIX Association, 2016, p. 323–338.
[58] J. J. Yang and R. S. Williams, “Memristive devices in computing system:
Promises and challenges,” ACM Journal on Emerging Technologies in
Computing Systems (JETC), vol. 9, no. 2, pp. 1–20, 2013.
[59] J. Yang, J. Kim, M. Hoseinzadeh, J. Izraelevitz, and S. Swanson,
“An Empirical Guide
and Use of Scalable
Persistent Memory,” in 18th USENIX Conference on File and Storage
Technologies (FAST 20).
Santa Clara, CA: USENIX, Feb. 2020,
pp. 169–182. [Online]. Available: https://www.usenix.org/conference/
fast20/presentation/yang
to the Behavior
[60] Yiming Hu, Qing Yang, and T. Nightingale, “RAPID-cache-a reliable
and inexpensive write cache for disk I/O systems,” in Proceedings 5th
International Symposium on High-Performance Computer Architecture,
Jan 1999, pp. 204–213.
[61] S. Zheng, M. Hoseinzadeh, and S. Swanson, “Ziggurat: A Tiered
File System for Non-Volatile Main Memories and Disks,” in 17th
USENIX Conference on File and Storage Technologies (FAST 19).
Boston, MA: USENIX, Feb. 2019, pp. 207–219. [Online]. Available:
https://www.usenix.org/conference/fast19/presentation/zheng
13