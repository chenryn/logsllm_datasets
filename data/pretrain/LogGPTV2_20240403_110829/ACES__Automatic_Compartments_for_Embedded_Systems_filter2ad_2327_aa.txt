title:ACES: Automatic Compartments for Embedded Systems
author:Abraham A. Clements and
Naif Saleh Almakhdhub and
Saurabh Bagchi and
Mathias Payer
ACES: Automatic Compartments 
for Embedded Systems
Abraham A Clements, Purdue University and Sandia National Labs;  
Naif Saleh Almakhdhub, Saurabh Bagchi, and Mathias Payer, Purdue University
https://www.usenix.org/conference/usenixsecurity18/presentation/clements
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.ACES: Automatic Compartments for Embedded Systems
Abraham A. Clements
Purdue University and
Sandia National Labs
PI:EMAIL
Naif Saleh Almakhdhub
Purdue University
Saurabh Bagchi
Purdue University
PI:EMAIL
PI:EMAIL
Mathias Payer
Purdue University
PI:EMAIL
Abstract
Securing the rapidly expanding Internet of Things (IoT)
is critical. Many of these “things” are vulnerable bare-
metal embedded systems where the application executes
directly on hardware without an operating system. Un-
fortunately, the integrity of current systems may be com-
promised by a single vulnerability, as recently shown by
Google’s P0 team against Broadcom’s WiFi SoC.
We present ACES (Automatic Compartments for
Embedded Systems)1, an LLVM-based compiler that au-
tomatically infers and enforces inter-component isola-
tion on bare-metal systems, thus applying the principle
of least privileges. ACES takes a developer-speciﬁed
compartmentalization policy and then automatically cre-
ates an instrumented binary that isolates compartments at
runtime, while handling the hardware limitations of bare-
metal embedded devices. We demonstrate ACES’ abil-
ity to implement arbitrary compartmentalization policies
by implementing three policies and comparing the com-
partment isolation, runtime overhead, and memory over-
head. Our results show that ACES’ compartments can
have low runtime overheads (13% on our largest test ap-
plication), while using 59% less Flash, and 84% less
RAM than the Mbed µVisor—the current state-of-the-
art compartmentalization technique for bare-metal sys-
tems. ACES ‘ compartments protect the integrity of priv-
ileged data, provide control-ﬂow integrity between com-
partments, and reduce exposure to ROP attacks by 94.3%
compared to µVisor.
1
Introduction
The proliferation of the Internet of Things (IoT) is bring-
ing new levels of connectivity and automation to embed-
ded systems. This connectivity has great potential to im-
prove our lives. However, it exposes embedded systems
1ACES is available as open-source at https://github.com/
embedded-sec/ACES.
to network-based attacks on an unprecedented scale. At-
tacks against IoT devices have already unleashed mas-
sive Denial of Service attacks [30], invalidated trafﬁc
tickets [14], taken control of vehicles [23], and facili-
tated robbing hotel rooms [8]. Embedded devices face
a wide variety of attacks similar to always-connected
server-class systems. Hence, their security must become
a ﬁrst-class concern.
We focus on a particularly vulnerable and constrained
subclass of embedded systems—bare-metal systems.
They execute a single statically linked binary image pro-
viding both the (operating) system functionality and ap-
plication logic without privilege separation between the
two. Bare-metal systems are not an exotic or rare plat-
form: they are often found as part of larger systems. For
example, smart phones delegate control over the lower
protocol layers of WiFi and Bluetooth to a dedicated
bare-metal System on a Chip (SoC). These components
can be compromised to gain access to higher level sys-
tems, as demonstrated by Google P0’s disclosure of vul-
nerabilities in Broadcom’s WiFi SoC that enable gain-
ing control of a smartphone’s application processor [6].
This is an area of growing concern, as SoC ﬁrmware has
proven to be exploitable [16, 15, 17].
Protecting bare-metal systems is challenging due to
tight resource constraints and software design patterns
used on these devices. Embedded devices have limited
energy, memory, and computing resources and often lim-
ited hardware functionality to enforce security proper-
ties. For example, a Memory Management Unit (MMU)
which is required for Address Space Layout Randomiza-
tion [42] is often missing. Due to the tight constraints,
the dominant programming model shuns abstractions, al-
lowing all code to access all data and peripherals without
any active mitigations. For example, Broadcom’s WiFi
SoC did not enable Data Execution Prevention. Even if
enabled, the entire address space is readable/writable by
the executing program, thus a single bug can be used to
trivially disable DEP by overwriting a ﬂag in memory.
USENIX Association
27th USENIX Security Symposium    65
underlying hardware constraints. This enables the devel-
oper to focus on the high-level policy that best ﬁts her
goals for performance and security isolation. Likewise,
the automated workﬂow of ACES frees the developer
from challenging implementation issues of the security
controls.
Our work breaks the coupling between the applica-
tion, hardware constraints, and the security policy, and
enables the automatic enforcement of compartmentaliza-
tion policies. ACES allows the formation of compart-
ments based on functionality, i.e., distinct functionality
is separated into different compartments. It uses a piece
of hardware widely available in even the low-end embed-
ded devices called the Memory Protection Unit (MPU) to
enforce access protections to different segments of mem-
ory from different parts of code. ACES moves away from
the constraint in MINION and µVisor that an entire pro-
cess or thread needs to be at the same privilege level.
ACES extends the LLVM tool-chain and takes the pol-
icy speciﬁcation as user input, as shown in Figure 1. It
then creates a Program Dependence Graph (PDG) [21]
and transforms compartmentalization into a graph parti-
tioning problem. The result of the compilation pipeline
is a secure binary that runs on the bare-metal device. We
evaluate three policies to partition ﬁve IoT applications.
The results demonstrate the ability to partition applica-
tions into many compartments (ranging from 14 to 34)
protecting the integrity of data and restricting code reuse
attacks. The policies have modest runtime overhead, on
average 15.7% for the strongest policy.
In summary, our contributions are:
(1) Integrity of
code and data for unmodiﬁed applications running on
bare-metal embedded devices. (2) Automated enforce-
ment of security compartments, while maintaining pro-
gram dependencies and respecting hardware constraints.
The created compartments separate code and data, on
a sub-thread level, breaking up the monolithic memory
space of bare-metal applications.
(3) Use of a micro-
emulator to allow selective writes to small data regions.
This eases restrictions on compartmentalization imposed
by the MPU’s limited number of regions and their size.
(4) Separating the compartmentalization policy from the
program implementation. This enables exploration of
security-performance trade-offs for different compart-
mentalization policies, without having to rewrite appli-
cation code and handle low level hardware requirements
to enforce the policy.
2 Threat Model and Assumptions
We assume an attacker who tries to gain arbitrary code
execution with access to an arbitrary read/write primi-
tive. Using the arbitrary read/write primitive, the attacker
can perform arbitrary malicious execution, e.g., code in-
Figure 1: ACES’s development tool ﬂow overview.
Conventional security principles, namely, least priv-
ileges [45] or process isolation are challenging to im-
plement in bare-metal systems. Bare-metal systems no
longer focus on a dedicated task but increasingly run
multiple independent or loosely related tasks. For exam-
ple, a single SoC often implements both Bluetooth and
WiFi, where neither Bluetooth nor WiFi needs to access
the code and data of the other. However, without isola-
tion, a single bug compromises the entire SoC and possi-
bly the entire system [6].
While many bare-metal systems employ no defenses,
there are ongoing efforts to improve their security.
EPOXY [12] demonstrated how DEP, diversity, and
stack protections can be deployed on bare-metal systems.
However, EPOXY does not address the issue of least
privileges or process isolation. MINION [27] uses the
compiler and dynamic analysis to infer thread-level com-
partments and uses the OS’s context switch to change
compartments. It uses a ﬁxed algorithm to determine the
compartments, providing the developer no freedom in
determining the best security boundaries for their appli-
cation. ARM’s Mbed µVisor [39] is a compartmentaliza-
tion platform for ARM Cortex-M series devices. µVisor
enables the developer to create compartments within a
bare-metal application, thereby restricting access to data
and peripherals to subsets of the code. It requires the de-
veloper to manually partition data and manage all com-
munication between compartments. Compartments are
restricted to individual threads, and all code is always ex-
ecutable, since no compartmentalization exists for code,
only for data and peripherals. This results in a daunting
challenge for developers, while only achieving coarse-
grained data/peripheral compartments.
We present ACES (Automatic Compartments for
Embedded Systems), an extension to the LLVM com-
piler that enables the exploration of strategies to apply
the principle of least privileges to bare-metal systems.
ACES uses two broad inputs—a high level, generic com-
partmentalization policy and the program source code.
Using these, it automatically applies the policy to the
application while satisfying the program’s dependencies
(i.e., ensuring code can access its required data) and the
66    27th USENIX Security Symposium
USENIX Association
1. LLVM : Compile Source2. LLVM: ACES Analyzer3. ACES Policy GeneratorACES BinaryIR (LLVM Bitcode)Program DependenciesCompartment Description & Linker ScriptIR4. LLVM : ACES Instrumentation User SelectedPolicyjection (in executable memory) or code reuse techniques
(by redirecting indirect control-ﬂow transfers [47]), or
directly overwrite sensitive data. We assume that the
software itself is trustworthy (i.e., the program is buggy
but not malicious). Data conﬁdentiality defenses [11] are
complementary to our work. This attacker model is in
line with other control-ﬂow hijack defenses or compart-
mentalization mechanisms.
We assume the system is running a single statically
linked bare-metal application with no protections. We
also assume the hardware has a Memory Protection Unit
(MPU) and the availability of all source code that is to be
compartmentalized. Bare-metal systems execute a single
application, there are no dynamically linked or shared
libraries. Lack of source code will cause a reduction in
precision for the compartmentalization for ACES.
ACES applies defenses to: (1) isolate memory cor-
ruption vulnerabilities from affecting the entire system;
(2) protect the integrity of sensitive data and peripherals.
The compartmentalization of data, peripherals, and code
conﬁnes the effect of a memory corruption vulnerabil-
ity to an isolated compartment, prohibiting escalation to
control over the entire system. Our threat model assumes
a powerful adversary and provides a realistic scenario of
current attacks.
3 Background
To understand ACES’ design it is essential to understand
some basics about bare-metal systems and the hardware
on which they execute. We focus on the ARMv7-M ar-
chitecture [3], which covers the widely used Cortex-M(3,
4, and 7) micro-controllers. Other architectures are com-
parable or have more relaxed requirements on protected
memory regions simplifying their use [2, 5].
Address Space: Creating compartments restricts ac-
cess to code, data, and peripherals during execution. Fig-
ure 2 shows ARM’s memory model for the ARMv7-M
architecture. It breaks a 32bit (4GB) memory space into
several different areas. It is a memory mapped architec-
ture, meaning that all IO (peripherals and external de-
vices) are directly mapped into the memory space and
addressed by dereferencing memory locations. The ar-
chitecture reserves large amounts of space for each area,
but only a small portion of each area is actually used.
For example, the Cortex-M4 (STM32F479I) [48] device
we use in our evaluation has 2MB of Flash in the code
area, 384KB of RAM, and uses only a small portion of
the peripheral space—and this is a higher end Cortex-M4
micro-controller. The sparse layout requires each area to
have its own protection scheme.
Memory Protection Unit: A central component of
compartment creation is controlling access to memory.
ACES utilizes the MPU for this purpose. The MPU en-
Figure 2: ARM’s memory model for ARMv7-M devices
ables setting permissions on regions of physical memory.
It controls read, write, and execute permissions for both
privileged and unprivileged software. An MPU is similar
to an MMU, however it does not provide virtual memory
address translation. On the ARMv7-M architecture the
MPU can deﬁne up to eight regions, numbered 0-7. Each
region is deﬁned by setting a starting address, size, and
permissions. Each region must be a power of two in size,
greater than or equal to 32 bytes and start at a multiple
of its size (e.g., if the size is 1KB then valid starting ad-
dress are 0, 1K, 2K, 3K, etc). Each region greater than
256 bytes can be divided into eight equally sized sub-
regions that are individually activated. All sub-regions
have the same permissions. Regions can overlap, and
higher numbered regions have precedence. In addition
to the regions 0-7, a default region with priority -1 can
be enabled for privileged mode only. The default region
enables read, write, and execute permissions to most of
memory. Throughout this paper, we use the term, “MPU
region” to describe a contiguous area of memory whose
permissions are controlled by one MPU register.
The MPU’s restrictions signiﬁcantly complicate the
design of compartments. The limited number of regions
requires all code, global variables, stack data, heap data,
and peripherals that need to be accessed within a com-
partment to ﬁt in eight contiguous regions of memory.
These regions must satisfy the size and alignment re-
strictions of the MPU. The requirement that MPU region
sizes be a power of two leads to fragmentation, and the
requirement that MPU regions be aligned on a multiple
of its size creates a circular dependency between the lo-
cation of the region and its size.
Execution Modes: ARMv7-M devices support priv-
ileged and unprivileged execution modes. Typically,
when executing in privileged mode, all instructions can
be executed and all memory regions accessed. Peripher-
als, which reside on the private peripheral bus, are only
accessible in privileged mode. Exception handlers al-
ways execute in privileged mode, and unprivileged code
can create a software exception by executing an SVC
USENIX Association
27th USENIX Security Symposium    67
Code512MBData512MBPeripherals512MBPrivate Periph. Bus(1MB)External Ram/Devices2GBVendor Mem.(511MB)code, and zero or more regions of data and peripherals.
ACES utilizes the MPU to set permissions on each re-
gion and thus, the compartments must satisfy the MPU’s
constraints, such as starting address and number of MPU
regions.
The starting point to our workﬂow is a Program De-
pendence Graph (PDG) [21]. The PDG captures all
control-ﬂow, global data, and peripheral dependencies
of the application. While precise PDGs are known to
be infeasible to create—due to the intractable aliasing
problem [43], over approximations can be created using
known alias analysis techniques (e.g., type-based alias
analysis [33]). Dynamic analysis gives only true depen-
dencies and is thus more accurate, with the trade off that
it needs to be determined during execution. ACES’ de-
sign allows PDG creation using static analysis, dynamic
analysis, or a hybrid.
Using the PDG and a device description, an initial re-
gion graph is created. The region graph is a directed
graph that captures the grouping of functions, global
data, and peripherals into MPU regions. An initial re-
gion graph is shown in Figure 4b, and was created from
the PDG shown in Figure 4a. Each vertex has a type
that is determined by the program elements (code, data,
peripheral) it contains. Each code vertex may have di-
rected edges to zero or more data and/or peripheral ver-
tices. Edges indicate that a function within the code ver-
tex reads or writes a component in the connected data/pe-
ripheral vertices.
The initial region graph is created by mapping all func-
tions and data nodes in the PDG along with their associ-
ated edges directly to the region graph. Mapping periph-
erals is done by creating a vertex in the region graph for
each edge in the PDG. Thus, a unique peripheral vertex
is created for every peripheral dependency in the PDG.
This enables each code region to independently deter-
mine the MPU regions it will use to access its required
peripherals. The initial region graph does not consider
hardware constraints and thus, applies no bounds on the
total number of regions created.
4.2 Process for Merging Regions
The initial region graph will likely not satisfy perfor-
mance and resource constraints. For example, it may
require more data regions than there are available MPU
regions, or the performance overhead caused by transi-
tioning between compartments may be too high. Several
regions therefore have to be merged. Merging vertices
causes their contents to be placed in the same MPU re-
gion. Only vertices of the same type may be merged.
Code vertices are merged by taking the union of their
contained functions and associated edges. Merging code
vertices may expose the data/peripheral to merged func-
Figure 3:
Illustration of ACES’ concept of compart-
ments. ACES isolates memory (a) – with permissions
shown in the column set – and restricts control-ﬂow be-
tween compartments (b).
(i.e., supervisor call) instruction. This will cause the
SVC exception handler to execute. This is the mech-
anism through which system calls are traditionally cre-
ated in an OS. Bare-metal systems traditionally execute
all code in privileged mode.
4 Design
ACES automatically enforces the principle of least priv-
ileges on bare-metal applications by providing write and
control-ﬂow integrity between regions of the program,
i.e., if a given code region is exploited via a vulnerability
in it, the attack is contained to that compartment. A sec-
ondary goal of ACES is enabling a developer to explore
compartmentalization strategies to ﬁnd the correct trade-
offs between performance and security, without needing
her to change the application.
4.1 PDG and Initial Region Graph
A compartment is deﬁned as an isolated code region,
along with its accessible data, peripherals, and allowed
control-ﬂow transfers. Each instruction belongs to ex-
actly one compartment, while data and peripherals may
be accessible from multiple compartments. Thus, our
compartments are code centric, not thread centric, en-
abling ACES to form compartments within a single
thread. Figure 3 shows several compartments, in it Com-
partment A enables access to code region X and read-
write access to peripheral 1, data region 1, and data re-
gion 3. Compartment A can also transition from Foo
into compartment C by calling Baz. Any other calls out-
side of the compartment are prohibited. When mapped to
memory, a compartment becomes a region of contiguous
68    27th USENIX Security Symposium
USENIX Association
Control Edge
Periph. Dep.
Global Dep.