    GET / HTTP/1.1
    Host: XX.X.XXX.XX:8082
    Content-Length: 34
    GET proxy.config.alarm_email
    HTTP/1.1 200 Connection Established
    Date: Tue, 07 Feb 2017 16:57:02 GMT
    Transfer-Encoding: chunked
    Connection: keep-alive
    Ok
    / HTTP/1.1 is unavailable
    Ok
    Unknown Command
    Ok
    proxy.config.alarm_email = "PI:EMAIL"
通过使用SET命令，我可以对Yahoo的负载平衡器池进行大范围的配置更改，包括[启用SOCKS代理](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html#socks-processor)和授予我的IP地址权限，[直接将项目推送到其缓存中](https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.config.en.html#proxy-config-http-push-method-enabled)。接着我向雅虎及时汇报了这个问题，他们为我的努力付出了15,000美元的奖励。几个星期后，ZGrab管道发现另一台具有相同漏洞的服务器，获得了额外的5,000美元。
#
调查对象-[BT](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwikoabipr_VAhXIEbwKHeA5AZIQFggoMAA&url=http%3A%2F%2Fhome.bt.com%2F&usg=AFQjCNFKOrWqP1zPRTU20TOcEeYkSlL-xw)
在尝试错误的主机技术时，因为有些攻击载荷发送到完全不相关的公司（其中包括cloud.mail.ru），我发现了它们的pingbacks都来自一小块IP地址。最初我假设这些公司必须共同使用相同的云WAF解决方案，接着我发现可以欺骗这些服务器将我的请求错误的路由到到其内部管理界面。不过事情并不是一直顺利的，这个IP池的反向DNS解析是bn-proxyXX.ealing.ukcore.bt.net -BT是英国电信公司的ISP。从英国肯特发送一个攻击载荷到俄罗斯，获取的`pingback`是不可预料的。我决定使用Burp
Repeater进行调试，调试中我发现响应在50ms内回来，这快得让人质疑，毕竟这是从英国到俄罗斯的请求，然后到爱尔兰的数据中心，最后从俄罗斯回到英国。于是我使用Traceroute，接着80端口的TCP跟踪信息揭示了事实：
我尝试与cloud.mail.ru建立TCP链接，但却被自己的ISP终止了。请注意发送到443端口的流量并没有受到保护，这就暗示了正在执行篡改操作的实体并没有控制mail.ru的TLS证书，甚至可能不需要mail.ru的授权和资料就能进行流量拦截。因为我在家里和办公室都可以复现这个场景，所以GHCQ（英国的政府网站）决定选择我来对这些奇怪数据包进行深度检测，接着是我意外的利用了他们的系统。为了排除这种偶然的可能性，我确认了我的朋友能够复现这个场景，但遗留的问题是这个系统是用来做什么的？
为了揭开这个系统的真实面纱，我使用了`Masscan`在整个IPv4的空间里去ping
80端口，其中所有ping的TTL都是10，这是一次有效的全网追踪。在筛选掉缓存和自我托管的网站后，我拿到了一份完整的目标IP地址清单。通过对清单抽样发现这个系统主要是用来对受版权保护的内容进行访问控制限制。黑名单IP的流量会被重路由到代理池，这样他们就可以检查HTTP的host头，并且以‘我确信我们正直的英国读者是悉知的’消息提醒你被屏蔽了。
    GET / HTTP/1.1
    Host: www.icefilms.info
    HTTP/1.1 200 OK
    ...
    Access to the websites listed on this page has been blocked pursuant to orders of the high court.
这个屏蔽可以被绕过，甚至不需要修改host头。但具体怎么操作，这就留给读者来完成了。
整个过程有一些注意的结果。由于像谷歌这类的虚拟主机、云主机网站早就停止采用黑名单的策略，这就意味着从客户或BT用户到他们那的流量都是走的代理。站在被列入黑名单的服务器角度来想的话，可以得到结论：所有的BT用户共享了一个微小的IP地址池。这就导致了BT代理IP地址滥用黑名单，许多网站无法访问，影响所有的BT用户。这个时候，如果我使用之前提到的admin访问漏洞那就能够控制代理的管理界面了，甚至可能重新配置代理向流向BT用户的流量注入恶意内容。最终，这个漏洞的亮点就这么轻易的被忽略了。这么多年我和其他的英国渗透朋友一直都在通过存在问题的代理进行黑客行为，但却没注意到它的存在。
最后的最后，我向bt的员工报告了能够访问内网控制面板的问题，他答复一定会及时修复。他们还向我透露了这个拦截系统是作为CleanFeed项目的一部分，缘由是政府想要拦截人们对虐待孩子图像的访问。但是，这个系统却不可避免的重新设计成阻止访问版权滥用。
#
调查对象-[METROTEL](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwip64vIpr_VAhWCbrwKHaymCH0QFggoMAA&url=http%3A%2F%2Fwww.metrotel.com.ar%2F&usg=AFQjCNEXSVk7i8j_J8UnUhUUQrm743bbzg)
后来的日子里，我见证了类似的行为发生在哥伦比亚ISP（METROTEL）。Rapid7的Sonar项目使用了一个公共的METROTEL
DNS服务器，该服务器选择性的给特定域名进行DNS污染导致流量重定向[DPI](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwjbpLPNp7_VAhXGXLwKHU7LBGgQFggoMAA&url=https%3A%2F%2Fdpi.wi.gov%2F&usg=AFQjCNEbgaOtIJxuzYoMQjm5jIFs8w4oZg)代理服务器。为了通过HTTPS流量而不导致证书错误，他们从服务器名称指示器（SNI）字段中嗅探了远程主机。于是我通知了Rapid7去识别行为怪异的DNS服务器，这意味着我能够为其提供Alexa排名100w的域名列表，并从中识别出目标主机。但那台服务器似乎是针对不同的图像和视频主机的，以及一些不知名的社交网络。于是我尝试访问这些网站，结果被重定向到了`http://internetsano.metrotel.net.co/`，上面提示着该网站因为含有虐待儿童图片被屏蔽。
这个系统和BT的情况一样，最初的目的是令人值得赞扬的。但是有证据显示它被利用了，除了以图像服务的网站为目标，这台DNS服务器还会对特定的新闻网站（包括`bbc.co.uk`）进行查找污染。这可能是为了屏蔽或者篡改某些新闻网站，尽管我还没确定哪些文章被作为了目标。
# 处理输入
假如你真的把这一些列小事故当成偶然的一个错误，那就看看我接下来碰到的七台服务器池。他们收到请求是这样的：
    GET / HTTP/1.1
    Host: burpcollaborator.net
    Connection: close
他们对外发送了一个请求。在路径中出现了两次：
    GET /burpcollaborator.net/burpcollaborator.net HTTP/1.1
    Host: outage.burpcollaborator.net
    Via: o2-b.ycpi.tp2.yahoo.net
这种行为是无法预测的，所以唯一合理的反应是确保你的服务器可以通过使用泛解析、wildcard
SSL和多个协议来处理客户端的异常行为。这种特殊的行为看起来是无法利用的，因为内部服务器不可能在`/burpcollaborator.net/burpcollaborator.net`上托管敏感内容的。幸运的是，如果你注册了带外的域名（比如outage.yourdomain.com）并且将其解析到内部IP地址，这就可能利用规范的路径将请求发送到内部服务器的webroot:
    GET / HTTP/1.1
    Host: ../?x=.vcap.me
    Connection: close
这个请求会导致下面这个请求：
    GET /vcap.me/../?=x=.vcap.me
    Host: outage.vcap.me
    Via: o2-b.ycpi.tp2.yahoo.net
在对路径正常化后，url会变成`http://outage.vcap.me/?x=whatever`。vcap.me是一个方便的公共域名，其中所有的子域名都是解析到`127.0.0.1`。因此这个请求就相当于访问
# 主机覆盖
另外一个类似的技术是我之前用过的，当时是通过密码污染来重置邮件，这在美国国防部的某台服务器上生效了。这是因为有些服务器是对host头进行了白名单设置，但却忘记了请求行是可以指定优先级的。
    GET http://internal-website.mil/ HTTP/1.1
    Host: xxxxxxx.mil
    Connection: close
将存在漏洞的前端系统作为大门，我获得了访问很多不同有意思的网站的权限，其中包括一个攻击面的库和公共论坛提到的文件传输服务。
# 奇怪的请求
有些目标是藏在Incapsula的以云为基础的web应用waf后面。Incapsula依赖于检测host头来判断请求该转发至哪台服务器，所以之前谈论的攻击在这不起作用。然而，只要是Incapsula所指定的端口，它都可以对host头进行解析，这意味着它会把下面的请求路由到`incapsula-client.net`：
    GET / HTTP/1.1
    Host: incapsula-client.net:PI:EMAIL
    Connection: close
Incapsula-client.net的后台会把这个输入变成链接`http://incapsula-client.net:PI:EMAIL/`，这会导致后台会尝试使用`incapsula-client.net`用户名和密码`80`来授权`burp-collaborator.net`。这除了暴露了新的有意思的攻击面，同时也会揭露服务器的位置，这促使我绕过了Incapsula的保护直到后端系统。
# 出乎意料
坏掉的请求路由漏洞并不总是由于配置错误引起。比如说在New Relic基础设备上的这段代码就导致了严重的漏洞：
    Url backendURL = "http://public-backend/";
    String uri = ctx.getRequest().getRawUri();
    URI proxyUri;
    try {
    proxyUri = new URIBuilder(uri)
            .setHost(backendURL.getHost())
            .setPort(backendURL.getPort())
            .setScheme(backendURL.getScheme())
            .build();
    } catch (URISyntaxException e) {
        Util.sendError(ctx, 400, INVALID_REQUEST_URL);
        return;
    }
这段代码看起来似乎没有错误--首先接受用户输入的url，然后用硬编码在后端把域名换成了IP地址，不幸的是Apache HttpComponents
服务端库不能要求路径以`/`开头，这意味着如果我发送了下面这个请求：
    GET @burp-collaborator.net/ HTTP/1.1