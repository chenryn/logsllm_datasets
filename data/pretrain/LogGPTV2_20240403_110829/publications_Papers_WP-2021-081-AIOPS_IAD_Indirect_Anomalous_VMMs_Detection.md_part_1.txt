IAD: Indirect Anomalous VMMs Detection in
the Cloud-based Environment
Anshul Jindal1[0000−0002−7773−5342], Ilya Shakhat2, Jorge
Cardoso2,3[0000−0001−8992−3466], Michael Gerndt1[0000−0002−3210−5048], and
Vladimir Podolskiy1[0000−0002−2775−3630]
1 Chair of Computer Architecture and Parallel Systems,
Technical University of Munich, Garching, Germany
PI:EMAIL, PI:EMAIL, PI:EMAIL
2 Huawei Munich Research Center, Huawei Technologies Munich,Germany
{ilya.shakhat1, jorge.cardoso}@huawei.com
3 University of Coimbra, CISUC, DEI, Coimbra, Portugal
Abstract. Server virtualization in the form of virtual machines (VMs)
withtheuseofahypervisororaVirtualMachineMonitor(VMM)isan
essential part of cloud computing technology to provide infrastructure-
as-a-service(IaaS).AfaultorananomalyintheVMMcanpropagateto
theVMshostedonitandultimatelyaffecttheavailabilityandreliability
of the applications running on those VMs. Therefore, identifying and
eventually resolving it quickly is highly important. However, anomalous
VMM detection is a challenge in the cloud environment since the user
does not have access to the VMM.
This paper addresses this challenge of anomalous VMM detection in
the cloud-based environment without having any knowledge or data from
VMM by introducing a novel machine learning-based algorithm called
IAD:IndirectAnomalousVMMsDetection.Thisalgorithmsolelyuses
theVM’sresourcesutilizationdatahostedonthoseVMMsfortheanoma-
lousVMMsdetection.Thedevelopedalgorithm’saccuracywastestedon
four datasets comprising the synthetic and real and compared against
four other popular algorithms, which can also be used to the described
problem. It was found that the proposed IAD algorithm has an average
F1-score of 83.7% averaged across four datasets, and also outperforms
other algorithms by an average F1-score of 11%.
Keywords: anomaly detection · cloud computing · VMM · hypervisor.
1 Introduction
Cloud computing enables industries to develop and deploy highly available and
scalableapplicationstoprovideaffordableandon-demandaccesstocomputeand
storage resources. Server virtualization in the form of virtual machines (VMs)
is an essential part of cloud computing technology to provide infrastructure-
as-a-service (IaaS) with the use of a hypervisor or Virtual Machine Monitor
(VMM) [12]. Users can then deploy their applications on these VMs with only
2 Jindal et al.
APP APP APP
OS … OS OS
VM VM VM
Anomalies propagation
Hypervisor Anomaly
Hardware
Fig.1:AnexampleshowcasingthepropagationofanomaliesinaType-1hypervisoror
VMM to the virtual machines (VMs) hosted on it.
the required resources. This allows the efficient usage of the physical hardware
and reduces the overall cost. The virtualization layer, especially the hypervi-
sors, is prone to temporary hardware errors caused by manufacturing defects,
a sudden increase in CPU utilization caused by some task or disconnection of
externally mounted storage devices, etc. The VMs running on these VMMs are
then susceptible to errors from the underneath stack, as a result, can impact
the performance of the applications running on these VMs [7,8]. Figure 1 shows
an example propagation of anomalies in a virtualization stack using a type-1
hypervisor to the VM hosted on it. These anomalies may lead to the failure of
all VMs and, ultimately, the applications hosted on them.
In the development environment, these anomalous VMMs are relatively eas-
ily detectable by analyzing the logs from the hypervisor dumps. But in the
production environment running on the cloud, anomalous VMMs detection is a
challenge since a cloud user does not have access to the VMMs logs. Addition-
ally,manyanomalousVMMdetectiontechniqueshavebeenproposed[11,13,15].
However,theseworkseitherrequirethemonitoringdataofthehypervisororin-
ject custom probes into the hypervisor. Therefore, the usage of such solutions
becomes infeasible. Furthermore, due to the low downtime requirements for the
applications running on the cloud, detecting such anomalous VMMs and their
resolutions is to be done as quickly as possible.
Therefore, this challenge is addressed in this paper for detecting anoma-
lous VMMs by solely using the VM’s resources utilization data hosted on those
VMMs by creating a novel algorithm called IAD: Indirect Anomalous VMMs
Detection.Wecallthealgorithmindirectsincethedetectionmustbedonewith-
out any internal knowledge or data from the VMM; it should be solely based on
the virtual machine’s data hosted on it. The key contributions are :
– Wepresentanonlinenovelmachinelearning-basedalgorithmIADforaccu-
rateandefficientdetectionofanomalousVMMsbysolelyusingtheresource’s
utilization data of the VM’s hosted on them as the main metric (§3).
– WeevaluatetheperformanceoftheIAD ontwodifferentaspects:1)Anoma-
lous VMMs finding accuracy (§5.1), and 2) Anomalous VMMs finding effi-
IAD: Indirect Anomalous VMMs Detection in the Cloud-based Environment 3
Table 1: Symbols and definitions.
Symbol Interpretation
n Number of time ticks in data
d Number of virtual machines hosted on a VMM
X The percentage utilization of a resource (for example, CPU
t
or disk usage) by a VM at a time t
Xj The percentage utilization of a resource at a time t for jth VM
t
{c1,c2,...,cm} a set of m ≤d VMs with change point at time tick t
t t t
w Window size
minPercentVMsFault Minimum % of total number of VMs on a VMM which must
have a change point for classifying the VMM anomalous.
ciencyandscalability(§5.2),andcompareitagainstfiveotherpopularalgo-
rithms which can also be applied to some extent on the described problem.
– We evaluate the IAD algorithm and other five popular algorithms on syn-
thetic and two real datasets.
Paper Organization: Section 2 describes the overall problem statement ad-
dressed in this paper along with an illustrative example. The design and details
oftheproposedIAD algorithmarepresentedinSection3.Section4providesex-
perimentalconfigurationdetailsalongwiththealgorithmsandthedatasetsused
in this work for evaluation. In Section 5, the evaluation results are presented.
Finally, Section 6 concludes the paper and presents an outlook.
2 Problem Definition
Thissectionpresentstheoverallproblemdefinitionofindirectlydetectinganoma-
lous VMMs in a cloud-based environment. Table 1 shows the symbols used in
this paper.
We are given X = n×d dataset, with n representing the number of time
ticks and d the number of virtual machines hosted on a VMM. Xj denotes the
t
percentage utilization of a resource (for example, CPU or disk usage) at a time
t for jth VM. Our goal is to detect whether the VMM on which the d virtual
machines are hosted is anomalous or not. Formally:
Problem 1. (Indirect Anomalous VMM Detection )
– Given a multivariate dataset of n time ticks, with d virtual machines (Xj
t
for j = {1,··· ,d} and t = {1,··· ,n}) representing the CPU utilization
observations of VMs hosted on a VMM.
– Output asubsetoftimeticksoratimetickwherethebehavioroftheVMM
is anomalous.
One of the significant challenges in this problem is the online detection, in
which we receive the data incrementally, one time tick for each VM at a time,
i.e., Xj,Xj,···, for the jth VM. As we receive the data, the algorithm should
1 2
4 Jindal et al.
Fig.2: Examples showing CPU utilization of two virtual machines hosted on a VMM.
The left sub-figure shows an application running only on VM 2, while the right sub-
figureshowstheapplicationrunningonbothVMs.Wecanseeasignificantdecrement
intheCPUutilizationofthetwoVMswhenananomaly(high-CPUload)isgenerated
on the VMM (shown by dotted red lines).
outputthetimetickswherethebehavioroftheVMMisobservedasanomalous.
However, without looking at the future few time ticks after time t, it would
be impractical to determine whether at time point t, the VMM is anomalous
or not since the time ticks t+1,t+2,···, are essential in deciding whether an
apparent detection at time t was an actual or simply noise. Hence, we introduce
a window parameter w, upon receiving a time tick t+w, the algorithm outputs
whetherattimettheVMMshowcasedanomalousbehaviorornot.Additionally,
as the change points for VMs hosted on VMM could be spread over a specific
duration due to the effect of the actual fault being propagating to the VMs and
thegranularityofthecollectedmonitoringdata,therefore,usinganappropriate
window size can provide a way for getting those change points.
2.1 Illustrative Example
HereweillustratetheproblemwithtwoexamplesinFig.2showcasingtheCPU
utilization of two virtual machines hosted on a VMM. In the left sub-figure,
an application is running only on VM 2, while in the right, an application is
running on both VMs. During the application run time, an anomaly, i.e., high
CPU load, was generated on the hypervisor for some time (shown by dotted red
lines).Duringthistime,wecanobserveasignificantdropintheCPUutilization
bytheapplication(affectingtheperformanceoftheapplication)ofthetwoVMs
(especially when an application is running on the VM). The load on a VMM
affects all or most of the VMs hosted on it, which ultimately can significantly
affect the performance of the applications running on the two VMs; therefore,
we call such a VMM anomalous when the load was generated on it.
3 Indirect Anomaly Detection (IAD) Algorithm
ThissectionpresentsourproposedIndirectAnomalyDetection(IAD)algorithm
along with the implemented system for evaluating it. The overall system work-
flow diagram is shown in Figure 4 and mainly consists of two parts: the main
IAD Algorithm, and the Test Module for evaluating the algorithm.
IAD: Indirect Anomalous VMMs Detection in the Cloud-based Environment 5
Fig.3: High-level system workflow of the implemented system for evaluating IAD al-
gorithm and the interaction between its components in a general use case.
3.1 IAD Algorithm
Our principal intuition behind the algorithm is that if a time tick t represents
a change point for some resource utilization (such as CPU utilization) in most
VMshostedonaVMM;thentheVMMisalsoanomalousatthattimetick.This
is based on the fact that a fault in VMM will affect most of the VMs hosted
on it, and therefore those VMs would observe a change point at a similar point
of time (in the chosen window w (Table 1)) in their resource’s utilization. IAD
algorithm consists of two main parts, described below:
Change Points Detector : We first explain how the change point, i.e., time
tickwherethetimeserieschangessignificantly,iscalculated.Recallfrom§2that,
we have introduced a window parameter w, upon receiving the time tick t+w,
the Change Points Detector outputs whether the time tick t is a change point
or not. Given a dataset Xj of size w for jth VM, this component is responsible
for finding the change points in that VM. This can be calculated in two ways:
Mean-based detector and Z-score-based detector.
– Mean-based Detector:Inthisdetector,awindowed mean,i.e.,themean
of all the values in the window, and the global mean, i.e., the mean of all
the values until the current time tick is calculated. Since the IAD algorithm
is designed for running it in an online way, therefore not all the values can
bestored.Thusglobal meaniscalculatedusingKnuth’salgorithm[5,9].We
then calculate the absolute percentage difference between the two means:
windowed mean and global mean. If the percentage difference is more sig-
nificant than the specified threshold (by default is 5%), then the time tick t
for jth VM is regarded as the change point.
– Z-score-basedDetector:ThisdetectorisbasedonthecalculationoftheZ-
scores[4,6].SimilartotheMean-baseddetector,herealsoawindowed mean,
i.e., the mean of all the values in the window, and the global mean, i.e., the
mean of all the values until the current time tick is calculated. We addition-
ally calculate the global stand deviation, i.e., the standard deviation of all
6 Jindal et al.
Fig.4: Indirect Anomaly Detection (IAD) Algorithm workflow sequence diagram
the values until the current time tick. Since the IAD algorithm is designed
for running it in an online way, global stand deviation is calculated using
Welford’s method [9]. These statistics are then used for the calculation of
the z-scores for all the data points in the window using Equation 1.
(windowed mean−global mean)
z scores= (1)
globalstanddeviation
√
w
If the Z-scores of all windowed observations are greater than the defined
threshold (3 × global stand deviation) then the time tick t for jth VM is
regarded as the change point.
In the main algorithm, only Z-Ssore-based Detector is used as it provides
higher accuracy and has fewer false positives.
Anomaly Detector This component receives the input resource utilization
data X of size n×d where d is the number VMs hosted on a VMM along with
the minPercentVMsFault (Table 1)) as the input parameter. We first check the
input timeseries of w length for 1) zero-length timeseries and 2) if the input
timeseries of all VMs are of the same length or not. If any of the two initial
checks are true, then we quit and don’t proceed ahead. We assume that all the
VM’sresourcesutilizationdataisofthesamelengthonly.Afterdoingtheinitial
checks, each of the VM’s windowed timeseries belonging to the VMM is sent to
the Change Points Detector for the detection of whether the time tick t is a
change point or not. If the percentage number of VMs ({c1,c2,...,cm} out of d)
t t t
having the change point at time tick t is greater than the minPercentVMsFault
input parameter, then the VMM is reported as anomalous at time tick t. The
above procedure is repeated for all time ticks. Figure 4 shows the workflow
sequence diagram of the IAD algorithm. Furthermore, the developed approach
can be applied for multiple VMMs as well.