printf()函数的最后一条指令如图 13.7 所示： 
图 13.7  OllyDbg：Printf()函数的最后一条指令 
此时，字符串“two”就会被输出到控制台窗口（console）。 
接下来，我们使用 F7 或 F8 键、单步执行这条返回指令。然而程序没有返回 f()函数，而是回到了主函
数 main()，如图 13.8 所示。 
图 13.8  OllyDbg: 返回至 main()函数 
正如你所看到的那样，程序从 printf()函数的内部直接返回到 main()函数。这是因为 RA 寄存器里存储
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
133 
的返回地址确实不是 f()函数中的某个地址，而是 main()函数里的某个地址。请仔细观察返回地址的上一条
指令，即“CALL 0X00FF1000”指令。它同样还是调用函数（即调用 f()）的指令。 
13.1.2 ARM: Optimizing Keil 6/2013 (ARM mode) 
.text:0000014C                f1: 
.text:0000014C 00 00 50 E3    CMP     R0, #0 
.text:00000150 13 0E 8F 02    ADREQ   R0, aZero ; "zero\n" 
.text:00000154 05 00 00 0A    BEQ     loc_170 
.text:00000158 01 00 50 E3    CMP     R0, #1 
.text:0000015C 4B 0F 8F 02    ADREQ   R0, aOne  ; "one\n" 
.text:00000160 02 00 00 0A    BEQ     loc_170 
.text:00000164 02 00 50 E3    CMP     R0, #2 
.text:00000168 4A 0F 8F 12    ADRNE   R0, aSomethingUnkno ; "something unknown\n" 
.text:0000016C 4E 0F 8F 02    ADREQ   R0, aTwo  ; "two\n" 
.text:00000170 
.text:00000170               loc_170 ; CODE XREF: f1+8 
.text:00000170                         ; f1+14 
.text:00000170 78 18 00 EA   B       __2printf 
我们同样无法根据汇编指令判断源代码使用的是 switch()语句还是 if()语句。 
此外，这段代码还出现了 ADRQ 指令之类的条件执行指令。第一条 ADREQ 指令会在 R0＝0 的情况下，
将字符串“zero \n”的地址传给 R0。紧接其后都 BEQ 指令在相同的条件下把控制流转交给 loc_170。或许
有读者会问，ADREQ 之后的 BEQ 指令还能读取到前面由 CMP 设置的标志吗？这当然不是问题。只有少
数指令才会修改标志位寄存器的值，而一般的条件执行指令不会重设任何标志位。 
其余的指令不难理解。程序只在尾部调用了一次 printf()函数。前面的 6.2.1 节讲解过编译器的这种处
理技术。最后，3 条逻辑分支都会收敛于同一个 printf()函数。 
最后一条 CMP 指令是“CMP R0, #2”。它的作用是检查 a 是否为 2。如果条件不成立，程序将通过 ADRNE
指令把“something unknown \n”的指针赋值给 R0 寄存器。在此之前，程序已经检查过 a 是否是 0 或 1；
所以运行到这里时，我们已经可以确定变量 a 不是这两个值。如果 R0 的值为 2，那么 ADREQ 指令将把“two”
的指针传递给 R0 寄存器。 
13.1.3 ARM: Optimizing Keil 6/2013 (Thumb mode) 
.text:000000D4               f1: 
.text:000000D4 10 B5        PUSH     {R4,LR} 
.text:000000D6 00 28        CMP      R0, #0 
.text:000000D8 05 D0        BEQ      zero_case 
.text:000000DA 01 28        CMP      R0, #1 
.text:000000DC 05 D0        BEQ      one_case 
.text:000000DE 02 28        CMP      R0, #2 
.text:000000E0 05 D0        BEQ      two_case 
.text:000000E2 91 A0        ADR      R0, aSomethingUnkno ; "something unknown \n" 
.text:000000E4 04 E0        B       default_case 
.text:000000E6             zero_case ; CODE XREF: f1+4 
.text:000000E6 95 A0        ADR      R0, aZero ; "zero\n" 
.text:000000E8 02 E0        B       default_case 
.text:000000EA               one_case ; CODE XREF: f1+8 
.text:000000EA 96 A0        ADR      R0, aOne ; "one\n" 
.text:000000EC 00 E0        B       default_case 
.text:000000EE               two_case ; CODE XREF: f1+C 
.text:000000EE 97 A0        ADR      R0, aTwo ; "two\n" 
.text:000000F0               default_case ; CODE XREF: f1+10 
.text:000000F0                                            ; f1+14 
.text:000000F0 06 F0 7E F8 BL      __2printf 
.text:000000F4 10 BD        POP     {R4,  PC} 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
134 
逆向工程权威指南（上册） 
前文介绍说过，条件执行指令是 ARM 模式指令的特色之一。Thumb 模式的指令集里没有条件执行指
令。所以 Thumb 模式的指令更为接近 x86 CISC（复杂指令集）的指令，理解难度相对较低。 
13.1.4 ARM64: Non-optimizing GCC (Linaro) 4.9 
.LC12: 
  .string "zero" 
.LC13: 
  .string "one" 
.LC14: 
  .string "two" 
.LC15: 
  .string "something unknown" 
f12: 
  stp     x29, x30, [sp, -32]! 
  add     x29, sp, 0 
  str     w0, [x29,28] 
  ldr     w0, [x29,28] 
  cmp     w0, 1 
  beq     .L34 
  cmp     w0, 2 
  beq     .L35 
  cmp     w0, wzr 
  bne     .L38               ; jump to default label 
  adrp    x0, .LC12         ; "zero" 
  add     x0, x0, :lo12:.LC12 
  bl      puts 
  b       .L32  
.L34: 
  adrp    x0, .LC13        ; "one" 
  add     x0, x0, :lo12:.LC13 
  bl      puts 
  b       .L32 
.L35: 
  adrp    x0, .LC14        ; "two" 
  add     x0, x0, :lo12:.LC14 
  bl      puts 
  b       .L32 
.L38: 
  adrp    x0, .LC15        ; "something unknown" 
  add     x0, x0, :lo12:.LC15 
  bl      puts 
  nop  
.L32: 
  ldp     x29, x30, [sp], 32 
  ret 
因为输入变量属于整型数据，所以 ARM64 编译器没有给它分配 64 位的 X0 寄存器而是为它分配了容
量相当的 X0 寄存器。另外，本例用 ADRP/ADD 指令对向 puts()函数传递字符串指针。前文 3.4.5 节中的
“Hello,world！”也是这样传递参数的。 
13.1.5 ARM64: Optimizing GCC (Linaro) 4.9 
f12: 
  cmp     w0, 1 
  beq     .L31 
  cmp     w0, 2 
  beq     .L32 
  cbz     w0, .L35 
; default case 
  adrp    x0, .LC15        ; "something unknown" 
  add     x0, x0, :lo12:.LC15 
  b       puts  
.L35: 
  adrp    x0, .LC12        ; "zero" 
  add     x0, x0, :lo12:.LC12 
  b       puts 
.L32: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
135 
  adrp    x0, .LC14        ; "two" 
  add     x0, x0, :lo12:.LC14 
  b       puts  
.L31: 
  adrp    x0, .LC13        ; "one" 
  add     x0, x0, :lo12:.LC13 
  b       puts 
优化编译的效果显著。CBZ(Compare and Branch on Zero)会在 W0 的值为零的情况下进行跳转。此外，在调用
puts()函数的时候，本例使用的是 JMP 指令而非常规的 call 指令调用，这再现了 13.1.1 节出现过的函数调用方式。 
13.1.6 MIPS 
指令清单 13.3  Optimizing GCC 4.4.5(IDA) 
f: 
                   lui     $gp, (__gnu_local_gp >> 16) 
; is it 1? 
                   Li      $v0, 1 
                   beq     $a0, $v0, loc_60 
                   la      $gp, (__gnu_local_gp & 0xFFFF) ; branch delay slot 
; is it 2? 
                   Li      $v0, 2 
                   beq     $a0, $v0, loc_4C 
                   or       $at, $zero ; branch delay slot, NOP 
; jump, if not equal to 0: 
                   bnez     $a0, loc_38 
                   or       $at, $zero ; branch delay slot, NOP 
; zero case: 
                   lui      $a0, ($LC0 >> 16)  # "zero" 
                   lw       $t9, (puts & 0xFFFF)($gp) 
                   or       $at, $zero ; load delay slot, NOP 
                   jr       $t9 ; branch delay slot, NOP 
                   la       $a0, ($LC0 & 0xFFFF)  # "zero" ; branch delay slot 
# -------------------------------------------------------- 
loc_38:                                        # CODE XREF: f+1C 
                   lui      $a0, ($LC3 >> 16)  # "something unknown" 
                   lw       $t9, (puts & 0xFFFF)($gp) 
                   or       $at, $zero ; load delay slot, NOP 
                   jr       $t9 
                   la       $a0, ($LC3 & 0xFFFF)  # "something unknown" ; branch delay slot 
# -------------------------------------------------------- 
loc_4C:                                        # CODE XREF: f+14 
                   lui      $a0, ($LC2 >> 16)  # "two" 
                   lw       $t9, (puts & 0xFFFF)($gp) 
                   or       $at, $zero ; load delay slot, NOP 
                   jr       $t9 
                   la       $a0, ($LC2 & 0xFFFF)  # "two" ; branch delay slot 
# -------------------------------------------------------- 
loc_60:                                        # CODE XREF: f+8 
                   lui      $a0, ($LC1 >> 16)  # "one" 
                   lw       $t9, (puts & 0xFFFF)($gp) 
                   or       $at, $zero ; load delay slot, NOP 
                   jr       $t9 
                   la       $a0, ($LC1 & 0xFFFF)  # "one" ; branch delay slot 
在汇编层面，每个 case 分支的最后一条指令都是调用 puts()函数的指令。而且本例的每个 case 分支
都通过跳转指令 JR（Jump Register）调用 puts()函数，完全没有使用常规的函数调用指令 JAL (Jump And 
Link)。有关详细介绍，请参阅 13.1.1 节。 
另外，参数 LW 指令之后有一条 NOP 指令。这种指令组合叫作“加载延迟槽/load delay slot”，是 MIPS
平台的另一种延迟槽。在 LW 指令从内存加载数据的时候，下面的那条指令可能和它并发执行。这样一来，
LW 后面的那条指令就无法使用 LW 读取的数据了。当今主流的 MIPS CPU 都针对这一问题进行了优化，
异步社区会员 dearfuture(15918834820) 专享 尊重版权
136 
逆向工程权威指南（上册） 
在下一条指令 LW 的数据的情况下能够进行自动处理。虽然现在的 MIPS 处理器不再存在加载延时槽，但
是 GCC 还是会颇为保守地添加加载延迟槽。总之，我们已经可以忽视这种延迟槽了。 
13.1.7 总结 
在 case 分支较少的情况下，switch()语句和 if/else 语句的编译结果基本相同。指令清单 13.1 可充分论
证这个结论。 
13.2  case 陈述式较多的情况 
在 switch()语句存在大量 case()分支的情况下，编译器就不能直接套用大量 JE/JNE 指令了。否则程序
代码肯定会非常庞大。 
#include  
void f (int a) 
{ 
    switch (a) 
    { 
    case 0: printf ("zero\n"); break; 
    case 1: printf ("one\n"); break; 
    case 2: printf ("two\n"); break; 
    case 3: printf ("three\n"); break; 
    case 4: printf ("four\n"); break; 
    default: printf ("something unknown\n"); break; 
    };  
}; 
int main() 
{ 
    f(2); // test 
}; 
13.2.1 x86 
Non-optimizing MSVC 
使用 MSVC 2010 编译上述程序，可得到如下指令。 
指令清单 13.4  MSVC 2010 
tv64 = -4   ; size=4  
_a$  =  8    ; size = 4 
_f     PROC 
     push   ebp 
     mov    ebp, esp 
     push   ecx 
     mov    eax, DWORD PTR _a$[ebp] 
     mov    DWORD PTR tv64[ebp], eax 
     cmp    DWORD PTR tv64[ebp], 4 
     ja     SHORT $LN1@f 
     mov    ecx, DWORD PTR tv64[ebp] 
     jmp    DWORD PTR $LN11@f[ecx*4] 
$LN6@f: 
     push   OFFSET $SG739 ; 'zero', 0aH, 00H 
     call   _printf 
     add    esp, 4 
     jmp    SHORT $LN9@f 
$LN5@f: 
     push   OFFSET $SG741 ; 'one', 0aH, 00H 
     call   _printf 
     add    esp, 4 
     jmp    SHORT $LN9@f 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
137 
$LN4@f: 
     push   OFFSET $SG743 ; 'two', 0aH, 00H 
     call   _printf 
     add    esp, 4 
     jmp    SHORT $LN9@f 
$LN3@f: 
     push   OFFSET $SG745 ; 'three', 0aH, 00H 
     call   _printf 
     add    esp, 4 
     jmp    SHORT $LN9@f 
$LN2@f: 
     push   OFFSET $SG747 ; 'four', 0aH, 00H 
     call   _printf 
     add    esp, 4 
     jmp    SHORT $LN9@f 
$LN1@f: 
     push   OFFSET $SG749 ; 'something unknown', 0aH, 00H 
     call   _printf 
     add    esp, 4 
$LN9@f: 
     mov    esp, ebp 
     pop    ebp 
     ret    0 
     npad    2; align next label 
$LN11@f: 
     DD    $LN6@f ; 0 
     DD    $LN5@f ; 1 
     DD    $LN4@f ; 2 
     DD    $LN3@f ; 3 
     DD    $LN2@f ; 4 
_f     ENDP 
这段代码可被分为数个调用 printf()函数的指令组，而且每组指令传递给 printf()函数的参数还各不相
同。这些指令组在内存中拥有各自的起始地址，也就被编译器分配到了不同的符号标签（symbolic label）
之后。总的来看，程序通过$LN11@f 处的一组数据调派这些符号标签。 
函数最初把变量 a 的值与数字 4 进行比较。如果 a 大于 4，函数则跳转到$LN1@f处，把字符串“something 
unknown”的指针传递给 printf()函数。 
如果变量 a 小于或等于 4，则会计算 a 乘以 4 的积，再计算积与$LN11@f 的偏移量的和（表查询），
并跳转到这个结果所指向的地址上。以变量 a 等于 2 的情况来说，2×4=8（由于 x86 系统的内存地址都是
32 位数据，所以$LN11@f 表中的每个地址都占用 4 字节）。在计算 8 与$LN11@f 的偏移量的和之后，再跳
转到这个和指向的标签——即$LN4@f 处。JMP 指令最终跳转到$LN4@f 的地址。 
$LN11@f标签（偏移量）开始的表，叫作“转移表jumptable”，也叫作“转移（输出）表branchtable”。
①
OllyDbg 
当 a 等于 2 的时候，程序分配给 printf()的参数是“two”。实际上，此时的 switch 语句的分支指令等
效于“jmp DWORD PTR $LN11@f[ecx*4]”。它会进行间接取值的操作，把指针“PTR｛表达式｝”所指
向 的 数 据读 取 出来 ， 当 作 DWORD 型 数 据 传 递 给 JMP 指令 。 在这 个程 序 里，表 达 式 的值 为
$LN11@f+ecx*4。 
此处出现的 npad 指令属于汇编宏，本书第 88 章会详细介绍它。它的作用是把紧接其后的标签地址向
4 字节（或 16 字节）边界对齐。npad 的地址对齐功能可提高处理器的 IO 读写效率，通过一次操作即可完
成内存总线、缓冲内存等设备的数据操作。 
接下来使用 OllyDbg 调试这个程序。我们在 EAX＝2 的时候进行调试，如图 13.9 所示。 
① 这个名称来自于 Fortran 早期的 GOTO 算法。虽然现在保留了这个名称，但是已经和那个概念没什么关系了。详情请参见
http://en.wikipedia.org/wiki/Branch_table。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
138 
逆向工程权威指南（上册） 
图 13.9  使用 OllyDbg 查看 EAX 获取输入值的情况 
程序将检验输入值是否大于 4。因为 2<4，所以不会执行“default”规则的跳转，如图 13.10 所示。 
图 13.10  OllyDbgEAX≤4,不会触发 default 规则的跳转 
然后就开始处理转移表，如图 13.11 所示。 
图 13.11  利用转移表计算目标地址 
在用鼠标选择“Follow in Dump”→“Address constant”功能之后，即可在数据窗口看见转移表。表里
有 5 个 32 位的值
①
① OllyDbg 用下画线的格式显示这些值，因为它们也是 FIXUPS。本书的 68.2.6 节会进行详细的解释。 
。现在ECX寄存器的值是 2，所以对应表中的第 2 个元素（从 0 开始数）。另外，您还
可以使用OllyDbg的“Follow in Dump→Memory address”功能查看JMP指令的目标地址。此时，这个目标
地址为 0x010B103A。 
地址 0x010B103A 处的指令将会打印字符串“two”，如图 13.12 所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
139 
图 13.12  使用 OllyDbg 观察 case：label 的触发过程 
Non-optimizing GCC 
GCC 4.4.1 编译出的代码如下。 