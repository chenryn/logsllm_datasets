title:Application Intrusion Detection using Language Library Calls
author:Anita K. Jones and
Yu Lin
Application Intrusion Detection using Language Library Calls
Anita K. Jones                                                  Yu Lin
PI:EMAIL                                     PI:EMAIL
University of Virginia
Abstract
Traditionally, 
intrusion  detection  systems  detect
intrusions  at  the  operating  system  (OS)  level.  In  this
paper we explore the possibility of detecting intrusion at
the application level by using rich application semantics.
We  use  short  sequences  of  language  library  calls  as
signatures. We consider library call signatures to be more
application-oriented than system call signatures because
they  are  a  more  direct  reflection  of  application  code.
Most applications are written in a higher-level language
with  an  associated  support  library,  such  as  C  or  C++.
We hypothesize that library call signatures can be used to
detect  attacks  that  cause  perturbation  in  the  application
code.    We  are  hopeful  that  this  technique  will  be
amenable  to  detecting  attacks  that  are  carried  out  by
internal intruders, who are viewed as legitimate users by
an operating system.
1. Introduction
An intrusion can be defined as any set of actions that
attempt  to  compromise  the  integrity,  confidentiality  or
availability  of  a  resource  [3].  There  are  two  types  of
intruders, internal and external. External intruders do not
have  any  authorized  access  to  the  system  they  attack.
Internal intruders have some authority and therefore some
legitimate  access,  but  seek  to  gain  additional  ability  to
take action without legitimate authorization.
We can improve security through the use of tools such
as  Intrusion  Detection  Systems.  An  intrusion  detection
system,  or  IDS  for  short,  detects  either  attempted
intrusions  into  a  system  or  activities  of  intruders  after
breaking  in.  Traditionally,  intrusion  detection  systems
detect intrusions at  the  OS  level  by  comparing  expected
and  observed  system  resource  usage.  Unfortunately,  OS
intrusion  detection  systems  are  typically  insufficient  to
catch 
they  are  already
legitimate  users  of  the  system.  Their  activities  neither
significantly deviate from expected behavior, nor exhibit
the  anticipated  actions  of  first  entry  into  the  operating
system from the outside.
intruders  because 
internal 
One  reason  for  the  insufficiency  of  OS  intrusion
detection  systems  is  that  they  depend  only  on  resource
usage  as  seen  by  the  OS.  Our  approach  is  to  detect
intrusions  at  the  application  level  using  sequences  of
language library calls as signatures for program behavior.
We  regard  an  application  as  a  black  box  that  can  emit
some  observable  events  (library  call  invocations)  when
executing. Thus our technique does not require analysis of
the semantics of the application.
2. Related Work
Stephanie  Forrest  at  the  University  of  New  Mexico
proposed a method of intrusion detection using sequences
of  system  calls  [1][2][4].  This  method  uses  short
sequences of system call invocations as being descriptive
of the execution of privileged processes in Unix systems.
The method used to build a signature database is to trace
system  calls  generated  by  a  particular  program,  slide  a
window of size k across the trace, and record each unique
sequence of length k that  is  encountered  in  the  window.
is  called
This  method  for  enumerating  sequences 
sequence 
(stide). 
Intrusion
detection  experiments  show  that  short  sequences  of
system  calls  can  be  a  remarkably  good  discriminator
between normal and abnormal operating characteristics of
common  Unix  programs.    In  other  words,  sequences  of
system calls are highly likely to be perturbed by intrusive
activities.
embedding 
time-delay 
The  increasing  trend  towards  distributed  platforms,
exemplified  by  CORBA,  presents  new  challenges  for
intrusion  detection.  Researchers  at  Odyssey  Research
Associates  have  applied  similar  techniques  to  CORBA-
based applications to detect intrusion in distributed object
applications at the application level [8].
3. Library call signatures
Our library call signatures are defined to be sequences
of  library  call  invocations.  For  simplicity,  only  the
identity of library calls and their sequence are preserved.
All  other  aspects  of  a  library  call  invocation,  such  as
arguments,  are  ignored.  Then  we  build  a  signature
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:52 UTC from IEEE Xplore.  Restrictions apply. 
database for an application by enumerating an “adequate”
number of unique short sequences in a way that is similar
to  the  technique  used  by  the  New  Mexico  researchers.
Finally,  we  monitor 
the  specific
application for  significant  deviations.  If  “enough”  of  the
observed  sequences  are  different  from  those  in  the
signature database, there may be intrusions.
the  execution  of 
3.1 Signature database definition
We  use  the  term  robust  to  describe  a  signature
database that contains sufficient sequences to characterize
the application in a substantial way.  The algorithm used
to  build  a  robust  signature  database  is  to  scan  traces  of
library calls generated by the target application. We slide
a  window  of  size  k  across  the  trace  and  record  each
unique  sequence  of  length  k  that  is  encountered.  When
monitoring  multiple  processes  that  execute  the  target
application, we restrict sequences to library calls from one
process,  i.e.  we  don’t  mix  library  calls  from  multiple
processes in one sequence.
is  specific 
Each  application  is  characterized  by  its  signature
database.  This  means  that,  in  practice,  each  application
has  a  different  signature  database. 
  That  signature
database 
to  application  code,  hardware
architecture,  software  version  and  configuration,  local
administrative  policies,  and  usage  patterns  of  the  user
community.  Once  a 
is
constructed  for  a  given  application,  it  can  be  used  to
monitor the ongoing behavior of the processes that result
from invoking that application.
robust  signature  database 
The  structure  of 
is  best
illustrated with a concrete example. Suppose we have the
following trace of library calls:
the  signature  database 
fopen, fread, strcmp, strcmp, fopen, fread, strcmp
We slide a window of size k across the trace and record
each unique sequence of length k that is encountered. For
example,  if  k  =  3,  then  the  result  is  the  four  unique
sequences of length 3 depicted in Figure 1.
For efficiency, these sequences can be stored as trees
in the database. Each tree is rooted at the first library call
in  its  sequence.  Two  sequences  with  initial  identical
segments  will  share the same  initial  tree structure in the
database.    The  advantage  of  trees  is  that  the  storage
requirements are lower and that comparison of monitored
sequences to sequences in the database is efficient.
3.2 Synthetic and real signature databases
There  are  two  approaches 
to  building  a  robust
signature  database.  The  synthetic  signature  database  is
built by exercising as many normal modes of usage of an
application  as  possible.    The  real  signature  database
derives from tracing the actual execution of the program
in a live user environment. Usually it takes more time and
facilities to build a real signature database than a synthetic
signature database.
A  real  signature  database  may  not  be  as  robust  as  a
synthetically  built  signature  database.  When  building  a
signature  database  in  a  real,  open  environment,  it  is
difficult  to  ensure  that  no  intrusion  occurred  during
database  generation.  Also, 
real  execution
environment, there is no mechanism to force execution of
a majority of paths through the application code.
system 
in  different 
Two  signature  databases  collected  for  the  identical
program  and  operating 
real
environments may differ significantly both in size, and in
content.  Unlike 
real  signature  databases,  synthetic
signature  databases  tend  to  be  more  similar  because
experimenters  use  a  similar  strategy 
to  stimulate
application  execution.  Therefore,  synthetic  databases  are
useful  for  replicating  results,  comparing  performance  in
different  settings,  and  performing  different  kinds  of
controlled  experiments.  For  those  reasons,  we  chose  to
experiment with synthetic signature databases.
in  a 
3.3 Different Anomaly Measures
Once  a  signature  database  has  been  built,  monitoring
for deviant behavior uses essentially the same method that
is  used  to  build  the  signature  database.  Sequences  of
length  k  from  the  monitored  behavior  are  compared  to
those  in  the  signature  database.  If  monitored  sequences
deviate significantly from those in the signature database,
the application behavior is considered to be anomalistic.
We next define several different anomaly measures to
express the strength of an anomalous signal. In this paper,
fopen
fread
strcmp
fread
strcmp
strcmp
strcmp
strcmp
fopen
fopen
fread
Figure 1. An example of library call sequence trees
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:52 UTC from IEEE Xplore.  Restrictions apply. 
2
 we discuss three anomaly measures: the mismatch count,
the  locality  frame  count,  and  the  normalized  anomaly
signal.
Monitored  sequences  that  are  not  in  the  signature
database  are  defined  to  be  mismatches.  The  mismatch
count records the number of mismatches. In experiments,
we  use  not  only  the  raw  mismatch  count,  but  also  the
percentage of mismatches (mismatch count divided by the
total number of monitored sequences).
     To  determine  that  a  new  sequence  of  length  k  is  a
mismatch  requires  at  most  k  comparisons,  because  the
sequences in the signature database are stored as a forest
of  trees,  where  the  root  of  each  tree  corresponds  to  a
different library call. Similarly, it takes k comparisons to
determine a match.
    How  many  mismatches  does  it  take  to  indicate  truly
anomalous behavior?  Recall that the signature database is
not  guaranteed 
legitimate
sequences.    One  answer  is  to  count  the  number  of
mismatches occurring in the monitored behavior, and only
consider that behavior to be anomalous when a mismatch
threshold  is  reached.  Even  this  solution  is  problematic
because the mismatch count is dependent on trace length
and some processes execute endlessly.  Another answer is
to compute the percentage of mismatches once “enough”
sequences  have  been  encountered  to  assure  reasonable
initialization.
to  contain  all  possible 
The  second  measure  is  the  locality  frame  count.  It  is
based on the assumption that anomalous sequences due to
intrusions  will  occur  in  local  bursts.  When  a  process  is
exploited, there may be a short period of time – a locality
–  when  the  percentage  of  anomalous  sequences  is  much
higher. For example,  ten  anomalies  over  the  course  of  a
long run may not be cause for concern. But ten anomalies
within thirty overlapping sequences might be. Thus, it can
be useful to observe how many anomalies occur during a
limited  interval.  The  number  of  sequences  that  are
considered to be local to one another is called the size of
the  locality  frame.    In  our  experiments,  we  arbitrarily
choose  20  as  a  (reasonable)  size  for  the  locality  frame.
We report the largest number of anomalies  found  within
each locality frame. One advantage of the locality  frame
count is that it provides a real-time measure. Because the
locality  frame  count  is  calculated  locally,  a  system
administrator  can  immediately  be  notified  when  an
intrusion may be occurring.
The third measure, widely used to detect intrusions, is
∧
AS   [4].  It
called  the  normalized  anomaly  signal, 
characterizes  how  much  one  sequence  differs  from
existing  sequences  in  the  signature  database. 
  The
difference  between  two  sequences  s1  and  s2  is  the
Hamming  distance  d(s1,  s2)  between  them,  that  is  the
number  of  calls  by  which  they  differ.  For  a  monitored
sequence s1, the minimal Hamming distance d  min (s1) is
defined as the minimum of all Hamming distance measure
between s1 and the sequences in the database, i.e.,
dmin  (s1)  =  min  {  d(s1,  s)  for  all  sequences  s  in  the
signature database }.
is  monitored, 
Again, the dmin value indicates how much a monitored
sequence,  s1,  differs  from  the  signature  database.  When
the  execution  of  an  application 
the
maximum  dmin  value  that  was  encountered  in  a  trace
represents  the  strongest  anomalous  signal  found  in  the
AS , is defined
monitored trace.  So the anomaly signal, 
as:
AS  = max { d min (s) for all monitored sequences s }.
In  order  to  compare 
AS   values  when  k  varies,  the
∧
AS  is normalized by the sequence length
anomaly signal 
k, i.e.:
∧
AS  = 
The normalized anomaly signal 
AS /k.
∧
AS  is more compute
intensive  than  other  two  measures.  Like  the  mismatch
count, it takes  k  comparisons  to  determine  a  match,  and
takes at most k comparisons to determine a mismatch. If a
mismatch exists, we compute d min. Because d min (s) is the
smallest Hamming distance between  s  and  all  sequences