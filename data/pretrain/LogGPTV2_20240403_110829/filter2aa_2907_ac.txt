### Next Instruction:
```c
if (x < 0) {
    // Constraints: X == 0
}
```

### Next Instruction:
```c
return 0;
```

### Diagram
1. Step the program until it meets the branch.
2. If all given operands are concrete, return a constant expression. If not, record the current condition constraints and clone the state.
3. Step the states until they hit an exit call or an error.
4. Solve the conditional constraint.
5. Loop until no remaining states or a user-defined timeout is reached.

### Differences in KLEE
- **State Concept**: KLEE introduces the concept of a state, allowing deeper paths to be reached by stepping through the state tree.
- **GNU C Library Support**: KLEE supports the GNU C library. To use it, run KLEE with the `--libc=uclibc --posix-runtime` parameters.
- **External Calls**: When KLEE detects that the analyzed program makes an external call to a library that isn't compiled to LLVM IR, it links the library with the program. The library call is done concretely, which means losing symbolic information within the library call.

### Angr
- **Website**: [http://angr.io/](http://angr.io/)
- **Overview**: Angr is a Python framework for analyzing binaries, combining static and dynamic symbolic ("concolic") analysis. It supports various architectures.
- **Flow**:
  1. Import Angr.
  2. Load the binary and initialize the Angr project.
  3. Define `argv1` as a 100-byte bitvector.
  4. Initialize the state with `argv1`.
  5. Initialize the simulation manager.
  6. Explore the states that match the condition.
  7. Extract one state from the found states.
  8. Solve the expression with the solver.

### Example Code
```python
import angr
import claripy

project = angr.Project("./ais3_crackme")
argv1 = claripy.BVS("argv1", 100 * 8)
state = project.factory.entry_state(args=["./crackme1", argv1])
simgr = project.factory.simgr(state)
simgr.explore(find=0x400602)
found = simgr.found[0]
solution = found.solver.eval(argv1, cast_to=str)
print(repr(solution))
```

### Target Address and Solution
- **Binary Location**: [https://github.com/angr/angr-doc/blob/master/examples/ais3_crackme/](https://github.com/angr/angr-doc/blob/master/examples/ais3_crackme/)
- **Execution**:
  - Run the binary with an argument.
  - If the argument is correct, print "Correct! That is the secret key!"
  - Otherwise, print "I'm sorry, that's the wrong secret key!"

### Intermediate Representation (IR)
- **Purpose**: To analyze and execute machine code from different CPU architectures, Angr performs most of its analysis on an intermediate representation (VEX).
- **Abstraction**:
  - **Register Names**: VEX models registers as a separate memory space with integer offsets.
  - **Memory Access**: The IR abstracts differences in how different architectures access memory.
  - **Memory Segmentation**: Some architectures support memory segmentation through special segment registers.
  - **Instruction Side-Effects**: Most instructions have side-effects.

### Stash Types
- **Active**: Contains states that will be stepped by default.
- **Deadended**: States that cannot continue execution due to reasons like no more valid instructions or an invalid instruction pointer.
- **Pruned**: States that are determined to be unsatisfiable when using LAZY_SOLVES.
- **Unconstrained**: States where the instruction pointer is controlled by user data or other symbolic data.
- **Unsat**: States with contradictory constraints.

### Differences in Angr
- **State Concept**: Angr's state concept is more complete and categorized, allowing for more operations on the state.
- **Symbolic Function**:
  - **SimProcedures**: Angr tries to replace external calls to library functions with symbolic summaries (SimProcedures).
  - **Inaccuracy**: SimProcedures can be inaccurate and may cause path explosion.
  - **Handling Inaccuracy**:
    1. Disable the SimProcedure.
    2. Replace the SimProcedure with a custom implementation.
    3. Fix the SimProcedure.

### Symbolic Function (scanf)
- **Source Code**: [https://github.com/angr/angr/blob/master/angr/procedures/libc/scanf.py](https://github.com/angr/angr/blob/master/angr/procedures/libc/scanf.py)
- **Steps**:
  1. Define the function return type by the architecture.
  2. Parse the format string.
  3. Read input from file descriptor 0 (standard input).
  4. Perform the read operation.

### References
- **Symbolic Execution Wiki**: [https://en.wikipedia.org/wiki/Symbolic_execution](https://en.wikipedia.org/wiki/Symbolic_execution)
- **GDB Python API**: [https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html](https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html)
- **Triton**: [https://triton.quarkslab.com/](https://triton.quarkslab.com/)
- **Peda**: [https://github.com/longld/peda](https://github.com/longld/peda)
- **Ponce**: [https://github.com/illera88/Ponce](https://github.com/illera88/Ponce)
- **Angr**: [http://angr.io/](http://angr.io/)
- **KLEE**: [https://klee.github.io/](https://klee.github.io/)
- **Symbolic vs. Concolic Execution**: [https://github.com/JonathanSalwan/Triton/issues/284](https://github.com/JonathanSalwan/Triton/issues/284)
- **KLEE Library Call Explained**: [https://dimjasevic.net/marko/2016/06/03/klee-it-aint-gonna-do-much-without-libraries/](https://dimjasevic.net/marko/2016/06/03/klee-it-aint-gonna-do-much-without-libraries/)

### Q & A
- **Contact**: PI:EMAIL @bananaappletw