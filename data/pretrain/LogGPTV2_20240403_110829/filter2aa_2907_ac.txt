Next)instruction:)
if)(x)<)0))
Constraints:)
X==0)
Next)instruction:)
return)0;)
Diagram 
1.  Step)the)program)until)it)
meets)the)branch)
2.  If)all)given)operands)are)
concrete,)return)constant)
expression.))If)not,)record)
current)condition)constraints)
and)clone)the)state)
3.  Step)the)states)until)they)hit)
exit)call)or)error)
4.  Solve)the)conditional)
constraint)
X==0)
Constraints:)
X!=0)
Next)instruction:)
if)(x)<)0))
Constraints:)
X==0)
Next)instruction:)
return)0;)
Diagram 
1.  Step)the)program)until)it)meets)the)branch)
2.  If)all)given)operands)are)concrete,)return)constant)expression.))If)
not,)record)current)condition)constraints)and)clone)the)state)
3.  Step)the)states)until)they)hit)exit)call)or)error)
4.  Solve)the)conditional)constraint)
5.  Loop)until)no)remaining)states)or)user-defined)timeout)is)reached)
What's the difference in KLEE
•  Introduce)to)the)concept)of)state,)the)deeper)path)could)be)reached)
by)stepping)the)state)tree.)
•  Seems)like)support)GNU)c)library?)
What's the difference in KLEE
•  Current)state)is)now,)our)final)goal)is)to)
reach)path)D.)
•  In)Triton)
•  solve)the)symbolic)variable)to)path)B)
•  Set)the)concrete)value)and)step)to)path)B)
•  Solve)the)symbolic)variable)to)path)D)
•  In)KLEE)
•  Record)condition)constraints)to)path)B"
•  Clone)the)state)
•  Solve)the)symbolic)variable)to)path)D
now
A
B
C
D
What's the difference in KLEE
•  When)KLEE)need)to)deal)with)GNU)c)library,)run)KLEE)with)--
libc=uclibc)--posix-runtime)parameters.)
•  When)KLEE)detect)the)analyzed)program)make)the)external)call)to)the)
library,)which)isn't)compiled)to)LLVM)IR)instead)linked)with)the)
program)together.)
•  The)library)call)is)only)done)concretely,)which)means)loosing)symbolic)
information)within)the)library)call.
Angr 
•  Website:)http://angr.io/)
•  Angr)is)a)python)framework)for)analyzing)binaries.)It)combines)both)
static)and)dynamic)symbolic)("concolic"))analysis,)making)it)applicable)
to)a)variety)of)tasks.)
•  Support)various)architectures)
•  Flow)
•  Loading)a)binary)into)the)analysis)program.)
•  Translating)a)binary)into)an)intermediate)representation(IR).)
•  Performing)the)actual)analysis)
Flow 
•  Import)angr)
import)angr)
•  Load)the)binary)and)initialize)angr)project)
project)=)angr.Project('./ais3_crackme'))
•  Define)argv1)as)100)bytes)bitvectors)
argv1)=)claripy.BVS("argv1",100*8))
•  Initialize)the)state)with)argv1)
state)=)project.factory.entry_state(args=["./crackme1",argv1]))
Flow 
)
•  Initialize)the)simulation)manager)
simgr)=)p.factory.simgr(state))
•  Explore)the)states)that)matches)the)condition)
simgr.explore(find=)0x400602))
•  Extract)one)state)from)found)states)
found)=)simgr.found[0]))
•  Solve)the)expression)with)solver)
solution)=)found.solver.eval(argv1,)cast_to=str))
ais3 crackme 
•  Binary)could)be)found)in:)
https://github.com/angr/angr-doc/blob/master/examples/
ais3_crackme/))
•  Run)binary)with)argument)
•  If)argument)is)correct)
•  print)"Correct!)that)is)the)secret)key!")
•  else))
•  print)"I'm)sorry,)that's)the)wrong)secret)key!")
Target address 
Solution 
import)angr)
import)claripy)
project)=)angr.Project("./ais3_crackme"))
argv1)=)claripy.BVS("argv1",100*8))
state)=)project.factory.entry_state(args=["./
crackme1",argv1]))
simgr)=)project.factory.simgr(state))
simgr.explore(find=0x400602))
found)=)simgr.found[0])
solution)=)found.solver.eval(argv1,)
cast_to=str))
print(repr(solution)))
Result 
Intermediate Representation 
•  In)order)to)be)able)to)analyze)and)execute)machine)code)from)
different)CPU)architectures,)Angr)performs)most)of)its)analysis)on)an)
intermediate)representation)
•  Angr's)intermediate)representation)is)VEX(Valgrind),)since)the)
uplifting)of)binary)code)into)VEX)is)quite)well)supported)
Intermediate Representation 
•  IR)abstracts)away)several)architecture)differences)when)dealing)with)
different)architectures)
•  Register"names:)VEX)models)the)registers)as)a)separate)memory)space,)with)
integer)offsets)
•  Memory"access:)The)IR)abstracts)difference)between)architectures)access)
memory)in)different)ways)
•  Memory"segmentation:)Some)architectures)support)memory)segmentation)
through)the)use)of)special)segment)registers)
•  Instruction"side-effects:)Most)instructions)have)side-effects)
Intermediate Representation 
•  addl)%eax,)%ebx)
•  t3)=)GET:I32(0)))
•  #)get)%eax,)a)32-bit)integer)
•  t2)=)GET:I32(12))
•  #)get)%ebx,)a)32-bit)integer)
•  t1)=)Add32(t3,t2))
•  #)addl)
•  PUT(0))=)t1)
•  #)put)%eax)
Stash types 
active"
This"stash"contains"the"states"that"will"be"stepped"by"default,"unless"an"alternate"stash"is"
specified."
deadended)
A)state)goes)to)the)deadended)stash)when)it)cannot)continue)the)execution)for)some)reason,)
including)no)more)valid)instructions,)unsat)state)of)all)of)its)successors,)or)an)invalid)instruction)
pointer.)
pruned)
When)using)LAZY_SOLVES,)states)are)not)checked)for)satisfiability)unless)absolutely)necessary.)
When)a)state)is)found)to)be)unsat)in)the)presence)of)LAZY_SOLVES,)the)state)hierarchy)is)traversed)
to)identify)when,)in)its)history,)it)initially)became)unsat.)All)states)that)are)descendants)of)that)point)
(which)will)also)be)unsat,)since)a)state)cannot)become)un-unsat))are)pruned)and)put)in)this)stash.)
unconstrained)
If)the)save_unconstrained)option)is)provided)to)the)SimulationManager)constructor,)states)that)are)
determined)to)be)unconstrained)(i.e.,)with)the)instruction)pointer)controlled)by)user)data)or)some)
other)source)of)symbolic)data))are)placed)here.)
unsat)
If)the)save_unsat)option)is)provided)to)the)SimulationManager)constructor,)states)that)are)
determined)to)be)unsatisfiable)(i.e.,)they)have)constraints)that)are)contradictory,)like)the)input)
having)to)be)both)"AAAA")and)"BBBB")at)the)same)time))are)placed)here.)
What's difference in Angr 
•  State)concept)is)more)complete,)categorized,)and)more)operation)we)
can)do)upon)the)state.)
•  Symbolic)function)
Symbolic Function 
•  Project)tries)to)replace)external)calls)to)library)functions)by)using)
symbolic)summaries)termed)SimProcedures"
•  Because)SimProcedures)are)library)hooks)written)in)Python,)it)has)
inaccuracy)
•  If)you)encounter)path)explosion)or)inaccuracy,)you)can)do:)
1.  Disable)the)SimProcedure)
2.  Replace)the)SimProcedure)with)something)written)directly)to)the)situation)
in)question)
3.  Fix)the)SimProcedure))
Symbolic Function(scanf) 
•  Source)code:)
https://github.com/angr/angr/blob/master/angr/procedures/libc/
scanf.py)
•  Get)first)argument(pointer)to)format)string))
1.  Define)function)return)type)by)the)architecture)
2.  Parse)format)string)
3.  According)format)string,)read)input)from)file)descriptor)0(i.e.,)
standard)input))
4.  Do)the)read)operation)
Symbolic Function(scanf) 
class)SimProcedure(object):)
))))@staticmethod)
))))def)ty_ptr(self,)ty):)
))))))))return)SimTypePointer(self.arch,)ty))
class)FormatParser(SimProcedure):)
))))def)_parse(self,)fmt_idx):)
))))""")
))))fmt_idx:)The)index)of)the)(pointer)to)the))format)string)in)the)arguments)
list.)
))))"""
def)interpret(self,)addr,)startpos,)args,)region=None):)
))))""")
))))Interpret)a)format)string,)reading)the)data)at)`addr`)in)`region`)into)`args`)
starting)at)`startpos`.)
))))"""
Symbolic Function(scanf) 
from)angr.procedures.stubs.format_parser)import)FormatParser)
from)angr.sim_type)import)SimTypeInt,)SimTypeString)
class)scanf(FormatParser):)
))))def)run(self,)fmt):)
))))))))self.argument_types)=){0:)self.ty_ptr(SimTypeString())})
))))))))self.return_type)=)SimTypeInt(self.state.arch.bits,)True))
))))))))fmt_str)=)self._parse(0))
))))))))f)=)self.state.posix.get_file(0))
))))))))region)=)f.content)
))))))))start)=)f.pos)
))))))))(end,)items))=)fmt_str.interpret(start,)1,)self.arg,)region=region))
))))))))#)do)the)read,)correcting)the)internal)file)position)and)logging)the)action)
))))))))self.state.posix.read_from(0,)end)-)start))
))))))))return)items
def _parse(self, fmt_idx): 
int)scanf)()const)char)*)format,)...));)
scanf)("%d",&i);)
int)sscanf)()const)char)*)s,)const)char)
*)format,)...);)
sscanf)(sentence,"%s)%*s)%d",str,&i);)
fmt_str)=)self._parse(1))
fmt_str)=)self._parse(0))
def _parse(self, fmt_idx): 
int)scanf)()const)char)*)format,)...));)
scanf)("%d",&i);)
int)sscanf)()const)char)*)s,)const)char)
*)format,)...);)
sscanf)(sentence,"%s)%*s)%d",str,&i);)
f)=)self.state.posix.get_file(0))
region)=)f.content)
start)=)f.pos)
(end,)items))=)fmt_str.interpret(start,)
1,)self.arg,)region=region))
_,)items)=)
fmt_str.interpret(self.arg(0),)2,)
self.arg,)region=self.state.memory))
References 
•  Symbolic)execution)wiki:)
https://en.wikipedia.org/wiki/Symbolic_execution)
•  GDB)Python)API:)
https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html)
•  Triton:)https://triton.quarkslab.com/)
•  Peda:)https://github.com/longld/peda)
•  Ponce:)https://github.com/illera88/Ponce)
•  Angr:)http://angr.io/)
References 
•  KLEE:)https://klee.github.io/)
•  Symbolic)execution)versus)Concolic)execution:)
https://github.com/JonathanSalwan/Triton/issues/284)
•  KLEE)library)call)explained:)
https://dimjasevic.net/marko/2016/06/03/klee-it-aint-gonna-do-
much-without-libraries/)
Q & A 
PI:EMAIL)
@bananaappletw)
)