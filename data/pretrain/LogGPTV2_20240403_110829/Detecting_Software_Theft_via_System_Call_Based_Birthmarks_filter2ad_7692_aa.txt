title:Detecting Software Theft via System Call Based Birthmarks
author:Xinran Wang and
Yoon-chan Jhi and
Sencun Zhu and
Peng Liu
2009 Annual Computer Security Applications Conference
Detecting Software Theft via System Call Based Birthmarks
Xinran Wang, Yoon-Chan Jhi, Sencun Zhu
Department of Computer Science and Engineering
Pennsylvania State University
University Park, PA 16802
Email: {xinrwang, jhi, szhu}@cse.psu.edu
College of Information Sciences and Technology
Peng Liu
Pennsylvania State University
University Park, PA 16802
Email: PI:EMAIL
Abstract—Along with the burst of open source projects,
software theft (or plagiarism) has become a very serious threat
to the healthiness of software industry. Software birthmark,
which represents the unique characteristic of a program, can
be used for software theft detection. We propose two system
call based software birthmarks: SCSSB (System Call Short
Sequence Birthmark) and IDSCSB (Input Dependant System
Call Subsequence Birthmark), and examine how well they
reﬂect unique behavioral characteristics of a program. To our
knowledge, our detection system based on SCSSB and IDSCSB
is the ﬁrst one that is capable of software component theft
detection where only partial code is stolen. We demonstrate the
strength of our birthmarks against various evasion techniques,
including those based on different compilers and different
compiler optimization levels as well as those based on very
powerful obfuscation techniques supported by SandMark.
Unlike the existing work that were evaluated through small or
toy software, we also evaluate our birthmarks on a set of large
software (web browsers). Our results show that system call
based birthmarks are very practical and effective in detecting
software theft that even adopts advanced evasion techniques.
Keywords-detection; plagiarism; birthmark;
I. INTRODUCTION
Software theft is an act of reusing someone else’s code,
in whole or in part, into one’s own program in a way
violating the terms of original license. Along with the rapid
developing software industry and the burst of open source
projects (e.g., in SourceForge.net there were over 180,000
registered open source projects as of Aug.2008), software
theft has become a very serious concern to honest soft-
ware companies and open source communities. To protect
software from theft, Collberg and Thoborson [1] proposed
software watermark techniques. Software watermark is a
unique identiﬁer inserted into the protected software, which
is hard to remove but easy to verify. However, theoretically,
any watermark can be removed by sufﬁciently determined
attackers [2]. As such, a new kind of software protection
techniques called software birthmark were recently proposed
[3]–[6]. A software birthmark is a unique characteristic that a
The work of Wang and Zhu was supported by CAREER NSF-0643906.
The work of Jhi and Liu was supported in part by AFOSR MURI grant
FA9550-07-1-0527, ARO MURI: Computer-aided Human Centric Cyber
Situation Awareness, and NSF CNS-0905131. This work was also supported
by AFRL award FA8750-08-C-0137.
program inherently possesses, which can be used to identify
the program. Though some initial research has been done
on software birthmarks, existing schemes are still limited
in meeting the following highly desired requirements: (R1)
Resiliency to semantics-preserving obfuscation techniques
[7]; (R2) Capability to detect theft of components, which
may be only a small part of the original program; (R3)
Scalability to detect large-scale commercial or open source
software theft; (R4) Applicability to binary executables,
because the source code of a suspected software product
often cannot be obtained until some strong evidences are
collected. To see the limitations of the existing techniques
with respect to above requirements, let us break them down
into four classes: (C1) static source code based birthmark
[3]; (C2) static executable code based birthmark [8]; (C3)
dynamic whole program path(WPP) based birthmark [5];
(C4) dynamic API based birthmark [4], [6]. We brieﬂy
summarize their limitations as follows: C1, C2 and C3
techniques cannot satisfy requirement R1 because they are
vulnerable to the techniques such as outlining and ordering
transformation; C2, C3 and C4 detect only whole program
theft thus cannot satisfy R2; C1 cannot meet R4 because
it requires source code; none of the existing techniques has
been evaluated on large-scale programs.
In this paper, we propose behavior based birthmarks for
meeting these key requirements. Behavior characteristic has
been widely used to identify malware from benign programs
[9], [10]. While two software independently developed for
the same purpose share many common behaviors, one usu-
ally contains unique behaviors compared to the other due
to the difference in features and implementation details. For
example, the Gecko HTML rendering engine [11] supports
MathML, while KHTML [12] does not; Gecko implements
RDF (resource description framework) to manage resources,
while KHTML implements its own framework. The unique
behaviors can be used as birthmarks for software theft
detection. Note that we aim to protect large-scale software.
The programs or components that are too small to bear
unique behaviors are out of our scope.
A system call sequence is a good candidate for behavior
based birthmarks because it shows the interaction between
a program and the operating system, where the interaction
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.24
149
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
is an essential behavioral characteristic of the program [9],
[10]. Although a code stealer may apply compiler op-
timization techniques or sophisticated semantic-preserving
transformation on a program to hide original code, these
techniques usually do not change the sequence of system
calls. It is also difﬁcult to avoid system calls, because system
calls are the only way for a user mode program to request
kernel services in modern operating systems. For example,
in operating systems such as Unix/Linux, there is no way
to go through the ﬁle access control enforcement other than
invoking open()/read()/write() system calls.
We develop two system call based dynamic birthmarks
SCSSB (System Call Short Sequence Birthmark) and ID-
SCSB (Input Dependant System Call Subsequence Birth-
mark) to meet aforementioned key requirements. To extract
SCSSB, short subsequences of system calls are collected
from the whole system call sequence during the execution
of a program with a given input. Observing that some
system call short sequences in the set are commonly found
in many other programs and hence they do not represent
the unique behavior characteristic of the program, we estab-
lish a database of the common short sequences of system
calls from various programs. SCSSB is then extracted by
removing the commonly found short sequences from the
system call short sequences of the program. To address
noise injection attacks, we further propose IDSCSB, which
involves slightly higher performance overhead than SCSSB.
In IDSCSB, with two different inputs, we ﬁrst extract two
whole system call sequences that only include the system
calls dependent to the individual input. The IDSCSB is
generated from each system call sequence by excluding the
system calls which appear in both system call sequences in
common. In this way, we can remove noisy system calls that
are intentionally injected. Our contributions are threefold:
• We proposed a novel type of birthmarks, which exploits
short sequences or input dependent subsequences of system
calls to represent unique behaviors of a program. Without
requiring any source code from the suspect, the system
call birthmark detection is a practical solution for reducing
plaintiff’s risks of false accusation before ﬁling an intel-
lectual property lawsuit.
• As one of the most fundamental runtime indicators of pro-
gram behaviors, our system call birthmarks are resilient to
various advanced obfuscation techniques. Our experiment
results indicate that it not only is resilient to simple evasion
techniques such as different compilers and different opti-
mization levels, but also successfully discriminates code
obfuscated by SandMark [13], a state-of-the-art obfuscator.
• To our best knowledge, SCSSB and IDSCSB are the ﬁrst
birthmarks that are proposed to detect software compo-
nent theft. Moreover, unlike existing techniques that are
evaluated with small or toy programs, we evaluate our
birthmark on a set of large software (web browsers). Thus,
!" #$%
&"
/"
0"
’())*+,,!-).)))
)))#!%
)))(12)*3,$%34/%355-)
.
)))))))#&%
)))))))#/%
)))))))#0%
))):
)))#6%
6"
7"
8"
9"
;"
!$":))<).
!!")))#7%
!&":
)))))*?-
#$)#!)#&)#/)#0)#&)#/)#0)#&)#/)#0)#6
*@-
#),).))#$#!#&#/A))#!#&#/#0A)
#&#/#0#&A))#/#0#&#/A))#0#&#/#0A)
#&#/#0#6:
))))))))))))))))))))))))*B-
Figure 1.
(a) An example program. S0,...,S6 denote system calls. (b) The
system call trace generated by the execution of the example program with
input i = 1. (c) 4-long system call sequence set of the system call trace.
our evaluation shows the proposed birthmarks are practical.
II. PROBLEM FORMALIZATION
A. Software Birthmarks
A software birthmark is an inherent characteristic of a
program, which can uniquely identify the program. Before
we formally deﬁne software birthmarks, we ﬁrst deﬁne copy.
Program q is a copy of program p, if q is exactly the same
as p. q is still considered as a copy of p after a sophisticated
software thief applies semantic preserving transformation
such as obfuscation techniques and compiler optimization.
Tamada et al. [3] and Myles et al. [5] deﬁne software
birthmark and dynamic software birthmark as follows:
Deﬁnition 1: (Software Birthmark) Let p, q be programs
or program components. Let f(p) be a set of characteristics
extracted from p. We say f(p) is a birthmark of component
p, only if both of the following conditions are satisﬁed:
1) f(p) is obtained only from p itself.
2) program q is a copy of p ⇒ f(p) = f(q).
Software birthmarks can be classiﬁed into static birth-
marks and dynamic birthmarks. A static birthmark relies on
syntactic structure of a program. Existing static birthmarks
are vulnerable to simple semantic-preserving transforma-
tions [5]. On the other hand, dynamic birthmarks rely on
the runtime behavior of a program, which is more difﬁcult
to be altered through the code obfuscation techniques. In
this paper, we propose two dynamic birthmarks.
Deﬁnition 2: (Dynamic Software Birthmark) Let p, q be
programs or program components. Let I be an input to p
and q. Let f(p, I) be a set of characteristics extracted from p
by executing p with input I. f(p, I) is a dynamic birthmark
of p, only if both of the following conditions are satisﬁed:
1) f(p, I) is obtained only from p executed with input I
2) q is a copy of q ⇒ f(p, I) = f(q, I)
B. System Call Birthmarks
Deﬁnition 3: (System Call Trace) Let p be a program or
a program component. Let I be an input to p. A system call
trace T (p, I) is the trace of system calls called by program
p during the execution of program p with input I.
150
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1(b) shows an example of a system call trace. For
simplicity, we show only the order of the system calls. The
actual system call traces also contain the parameter values
passed to the system calls and the return values.
Deﬁnition 4: (System Call Sequence Set) Let p be a
program or a program component. Let I be an input to p.
Let T (p, I) be the trace of system calls called by p during
the execution of p with input I. Then, k-long system call
sequence set S(p, I, k) is deﬁned as follows:
S(p, I, k) = {t| t is a substring of T (p, I) and |t| = k}
Figure 1(c) shows an example of a 4-long system call
sequence set.
C. System Call Short Sequence Birthmark
Short sequences of system calls have been widely used
for intrusion detection systems to detect irregularities in
the behavior of a program for many years [14]. Here, we
use system call short sequences as a birthmark to detect
similarity of two programs. We deﬁne system call short
sequence birthmark as follows:
Deﬁnition 5: (SCSSB: System Call Short Sequence
Birthmark) Let p be a program or a program component.
Let I be an input to p. System call short sequence birthmark
SCSSB(p, I, k) is deﬁned as a subset of a system call se-
quence set S(p, I, k) that satisﬁes the following conditions:
1) q is a copy of p ⇒ SCSSB(p, I, k) =
SCSSB(q, I, k) for any I.
2) q is different from p ⇒ SCSSB(p, I, k) should not
appear in q’s execution instances.
D. Measurement of Birthmark Similarity
The simplest measurement of similarity of two programs
is resemblance. Assuming a birthmark is a set of values
that represent unique characteristics of a program, we can
deﬁne resemblance of two birthmarks A and B using set
operations: R(A, B) = |A ∩ B|
. Here the ∩ and ∪ opera-
|A ∪ B|
tions are set intersection and union operations, respectively,
and the || operation denotes set cardinality. However, a
software plagiarizer can deliberately insert noise in a stolen
program. As a consequence, the resemblance is decreased
so that the stolen program can evade detections. In addition,
the resemblance is not an accurate measurement for core
component theft, because the core component may be only a
small part of the whole program. To overcome the limitation
of resemblance measurement, we deﬁne containment of two
birthmarks.
Deﬁnition 6: (Containment) The containment of A in B
is deﬁned as:
C(A, B) = |A ∩ B|
|A|
Here A is the birthmark of a plaintiff program or its
component, and B is the birthmark of a suspect program.
Original 
Program
System Call Tracer
 Input
Suspicious 
Program
System Call Tracer
System Call Abstraction
System Call Abstraction 
Birthmark 
Generator
Birthmark 
Comparison
Birthmark 
Generator
 Detection
  Result
Figure 2. System Design Diagram
From above deﬁnition, although a plagiarist may be able to
inject noise into B, as long as we can ensure |A ∩ B| will
not change, the containment measurement will be robust to
such attacks and suitable for core component theft detection.
III. SYSTEM DESIGN AND IMPLEMENTATION
Figure 2 shows the generic system diagram of our soft-
ware theft detection system. Given two programs in binary
executable, one is the plaintiff program and the other is the
suspect one, we ﬁrst select inputs to feed both programs.
Note that to avoid false positives and false negatives caused
by program randomness, a number of different inputs should
be tested. In the runtime we use system call tracer to record
the whole system call sequence from each of the execution
with the same input. Then, system call abstraction removes
the system calls that are normally not related to program
behaviors. Next, system call birthmarks are generated by
birthmark generator and their similarity is measured. Fi-
nally, given a detection threshold, our system reports the
detection result. Let us describe these components in detail.
A. System Call Tracer
The simplest way to record system call traces is to use a
tool such as strace in Linux. Strace can record all system
calls invoked by a process, but it does not provide the thread
identiﬁer when tracing a multi-threaded program. Thus, due
to the scheduling of threads, strace cannot always generate
accurate system call sequence birthmarks.
Therefore, we implemented SATracer based on Valgrind
[15]. Valgrind is an open source dynamic emulator. It
supports extensions called skins, which can dynamically
instrument a program. SATracer records the system call
traces of a program by running the program in its own
emulation environment. It records the system call number
as well as the process and thread numbers when a system
call is invoked.
SATracer can also mark whether a system call is called by
a speciﬁc component. This is useful for detecting software
component theft because we need to know which system
calls are invoked from which component of a plaintiff
program. Speciﬁcally, there are two options. one method is
151
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
to check whether a system call is called by a subroutine of
the component during the execution. We ﬁrst prepare a list
of all subroutines of the component in SATracer. The list is
automatically generated by analyzing the source ﬁles of the
component using parser Elsa [16]. Then, SATracer checks
the execution stack of the running thread when a system
call is called from one of the subroutines. If a subroutine
in the execution stack exists in the prepared list, it must
be that this system call was called by the component and
hence it will be marked. Note that we assume that we have
control to the compiling process of plaintiff programs so
that symbol tables are kept in the executables. Alternatively,
if we can compile the speciﬁc component to a dynamically
linked library, a simpler method is used. Valgrind supplies
a function which maps a subroutine to the library which
the subroutine belongs to. Therefore, if a subroutine in the
execution stack is called from the component library during
the execution of a plaintiff program, it will be marked. In
either way, we can generate a birthmark for a component of
the plaintiff program.
B. System Call Abstraction
Since it is possible that two different system call se-
quences represent the same behavior, we do not extract
birthmarks directly from the raw system call sequences. To
address this, we abstract the system calls to a higher level
in the following way. First, we ignore the system calls that
apparently do not represent the behavior characteristic of a
program. For example, a libc malloc function is normally
implemented by system call brk and/or mmap. The mmap
system call
is used when extremely large segments are
allocated. The brk system call changes the size of the heap
to be larger or smaller as needed. It is normally called to
grab a large chunk of memory and then split it as needed
to get smaller chunks in C function malloc. As such, not
every malloc in C need a system call and two programs
with the same behavior may have very different memory
management system call sequences. Fortunately, we can
ignore all memory management system calls, because they
do not represent the behavior characteristic of a program.
Second, we consider aliases or multiple versions of a system
call as the same in system call birthmarks. For example,
is the same as
fstat(int
stat(const char *path, struct stat *sb) except that fstat uses
the ﬁle descriptor fd as its parameter instead of the ﬁle name
path . We consider them the same. This not only reduces the
sophistication of dealing with many different system calls,
but also helps avoid the counterattack where an attacker
replaces one system call with another. Finally, since failed
system calls do not affect the behavior characteristic of a
program, they are also ignored. For example, assume that
a program opening a ﬁle fails at the ﬁrst attempt and then
succeed in the next time. Although system call open is called
twice, the ﬁrst failed call should be removed.
fd, struct stat *sb) system call
C. Birthmark Generator
Birthmarks are extracted from abstracted system calls
provided by the previous step. As to the SCSSB birthmark,
We extract it based on its deﬁnition. Condition 1 in Def.
5 tells us that given the same input the extracted system
call sequence should be the same. Therefore, we should
remove those loading-environment-dependent system calls.
To achieve this, the program is run multiple times with
the same input to ﬁnd the common subsequences of the
multiple system call traces. Condition 2 in Def. 5 tells
us that the SCSSB of a program should be unique to the
program; therefore, we should remove the (noisy) system
calls common to the other programs. To do this, we establish
a database of common system call short sequences by
analyzing various sample programs in the wild. After that,
we remove these noise from our system call short sequences
and get the SCSSB birthmark.
D. Input Dependant System Call Subsequence Birthmarks
As the next section will show, SCSSB is robust to the
existing obfuscation techniques. However, if an attacker
can insert arbitrary system calls into the original program
meanwhile preserving its original semantics (although we
have not seen such automated tools yet), the original SCSSB
could be polluted or even destroyed.
To address the system call injection attack, next we pro-
pose an input dependent system call subsequence birthmark
(IDSCSB), which introduces slightly higher performance
overhead than SCSSB. We observe that many system calls
in a system call sequence are independent to the input and
do not reﬂect the semantic characteristic of a program for a
given input. A system call is said to be dependant to input
if any of the following conditions is true when the input
changes: (1) the system call disappears in the system call
sequence; (2) parameters to the system call changes; (3)
return value of the system call changes. We consider input
independent system calls as noise, because an attacker may
deliberately inject them. Therefore, we only extract input
dependent system calls as a birthmark.
Deﬁnition 7: (IDSCSB: Input Dependant System Call
Subsequence Birthmark) Let p be a program or a program
component. Let I be an input to p and J another input.
Let T (p, I) and T (p, J be system call traces generated by
executing program p with input I and J, respectively. Input
dependent system call subsequence birthmark is deﬁned as:
IDSCSB(p, I) = {s|s ∈ T (p, I) and s /∈ T (p, J)}
We also use the containment measurement to compare
two IDSCSB birthmarks, but revise its deﬁnition for ID-
SCSB birthmarks by replacing the ∩ operation with the
computation of the longest common subsequence (LCS) and
replacing || operation with the length of a system call trace.
Note that LCS does not require every subsequence to be a
continuous segment of the mother sequence. For example,
152
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
Input 1
Execute the program
three times
Input 2
Execute the program
three times
Extract the common 
subsequence of three 
traces of input 1
Extract the common 
subsequence of three 
traces of input 2
Extract difference 
Birthmark for the 
program with input 1
Figure 3. The process of extracting IDSCSB Birthmarks
both {1, 6, 120} and {2, 24} are valid subsequences of the
value sequence {1, 2, 6, 24, 120}. In this sense, it is resilient
to noise injection attacks.
Extracting IDSCSB Birthmarks Figure 3 shows the
process of extracting IDSCSB Birthmarks. First, we prepare
two different inputs, and generate the system call sequence
for one input. To remove environmental noise, we extract
the common subsequence of the multiple system call traces
obtained by running a program multiple times with the same
input. In our experiment, we run the target Second, we
generate the system call sequence for the other input. The
same method as in the ﬁrst step is used to remove noise.
Finally, the results from above two steps are compared and
the system calls that are independent to both of the inputs are
identiﬁed. The IDSCSB birthmark is generated by extracting
the system calls which appear only in the result of the ﬁrst
(or the second, depending on which input we would use to
detect plagiarism) input.
There are two additional implementation details. First,
some parameters and return values of system calls such as
“ﬁle id” and “process id” are ignored because the parameters
vary when the execution environment changes. Second, to
control the length of the system call log, large parameters
over 32 bytes are hashed by the MD5 algorithm and only
their hash values are recorded.
IV. EVALUATION
In Section 1 we mentioned four key requirements on
software theft detection. It is easy to see R4 (Applicability
to binary executables) is already met by our design. In this
section, we evaluate the performance of SCSSB and ID-
SCSB birthmarks with respect to four primary criteria: (M1)
capability to detect whole program theft (M2) capability
to detect component theft for large-scale programs, (M3)
credibility to independently developed program, and (M4)
resiliency to obfuscation. These four criteria contain more
than R1, R2 and R3 because of M3.
In this section, we will ﬁrst demonstrate the strength
of our birthmarks against evasion techniques that apply
different compilers or different compiler optimization levels.
Then, we will evaluate criteria M1, M2, M3 and M4 for both
SCSSB and IDSCSB against some advanced obfuscation
techniques and 15 real-world large applications.
For ease of presentation, before showing the results we
ﬁrst
the
introduce SandMark [13], a tool developed at
University of Arizona for analyzing and processing Java
byte code. We use SandMark because it is the only free
and powerful software with a comprehensive list of fully
functioning code obfuscation algorithms. Note that our
system call birthmark extractor built upon Valgrind reads
only x86 Linux executables. To feed the extractor with Java
applications, we convert Java class ﬁles to x86 executable
using GCJ 4.1.2, the GNU ahead-of-time Compiler for the
Java language.
For code obfuscation analysis, SandMark implements 39
byte code obfuscators. Dividing an array to multiple arrays,
splitting an array element, promoting all primitive data
types to classes, wrap and move a part of a class into a
new class, merging two variables in a longer variable, and
encrypting string variables are some of the features that
SandMark provides for data obfuscation. For control obfus-
cation, SandMark can insert opaque predicates to every con-
ditional branch, reorder instructions, inline/merge/interleave
methods, randomly insert opaque branches within a basic
block. Besides, SandMark can alter method-signatures by
adding or reordering parameters, change class inheritance
structures, and thwart static decompilation.
A. Impact of Compiler Optimization Levels
Changing compiler optimization levels is a type of se-
mantic preserving transformation techniques which may be
used by a software plagiarist to avoid detection. Here, we
evaluated the impact of compiler optimization levels on
system call based birthmarks. A set of programs were used:
bzip2 (a popular lossless compression tool), gzip (a popular
lossless compression tool) and oggenc (an encoding tool
for Ogg Vorbis, a free lossy audio compression format). To
make them easy to compile with several different compilers,
single compilation-unit source code (bzip2.c, gzip.c and
oggenc.c) were used. 1 We used ﬁve optimization switches (-
O0,-O1,-O2,-O3 and -Os) of GCC to generate executables of
different optimization levels (e.g., bzip2-O0, bzip2-O3, etc.)
for each program. The generated executables were executed
with the same input and a system call sequence was recorded
for each executable. We compared the system call sequences,
and found that applying optimization options did not change
the system call sequences of bzip2 and gzip while the system
call sequences for oggenc with optimization options -O3
and -Os had only one less “write” system calls compared
to the executables with optimization options -O0, -O1 and
-O2. This result shows that system call based birthmarks are
robust to compiler optimization.
B. Impact of Different Compilers
A software plagiarist may also use a different compiler to
avoid detection. To evaluate the impact of applying different
compilers, we compared system call sequences with three
1http://people.csail.mit.edu/smcc/projects/single-ﬁle-programs/
153
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
)
%
(
t
n
e
m
n
a
i
t
n
o
C
 100
 80
 60
 40
 20
 0
)
%
(
t
n
e
m
n
a
i
t
n
o
C
 100
 80
 60
 40
 20
 0
l
a
n
g
i
r
i
O
r
e
l
r
e
d
o
F
y
a
r
r
t
t
i
l
r
e
k
r
a
M
k
c
o
B
l
p
S
y
a
r
r
A
A
e
d
o
C
y
g
g
u
B
r
e
r
e
I
t
t
i
l
t
r
e
v
n
p
S
n
a
e
o
o
B
l
h
c
n
a
r
B
r
e
t
t
i
l
p
S
s
s
a
C
l
s
e
r
u
t
i
a
n
g
S
n
o
e
g
d
u
B
l
s
r