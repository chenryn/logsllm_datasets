##### ISSUE TYPE
Feature Idea
##### COMPONENT NAME
shell module
##### ANSIBLE VERSION
2.3
##### SUMMARY
From @lordbaco on 2015-05-22T09:32:33Z  
Countless of times, I need to create two blocks of command or shell actions.  
One to check the status of the system (and register it to an ansible variable)
and  
One to execute the command if really needed.
My idea is to add a check= option to both command and shell core modules  
so you can combine both actions in one. This will make playbook/task shorter.
In bash, I like to do things like  
test -f /etc/libvirt/qemu/autostart/test.xml || virsh autostart test  
rsync --dry-run -av a/ b/ && rsync -av a/ b/  
patch --dry-run -p1 -R < test.patch && patch -p1 -R < test.patch  
grep -q 'test3' /root/file || perl -p -i -e 's/test2/test3/g' /root/file  
grep -q 'test4' /root/file || perl -p -i -e '$_ = undef if(/test4/)'
/root/file
To come back to Ansible this will translate to  
command: rsync -av a/ b/ check="rsync --dry-run -av a/ b/"  
when: check.rc == 0  
command: virsh autostart test check="test -f
/etc/libvirt/qemu/autostart/test.xml"  
when: check.rc == 0  
shell: patch -p1 -R < test.patch check="patch --dry-run -p1 -R < test.patch"  
when: check.rc == 0  
shell: perl -p -i -e 's/test2/test3/g' /root/file check="grep -q 'test3'
/root/file"  
when: check.rc != 0  
shell: perl -p -i -e '$_ = undef if(/test4/)' /root/file check="grep -q
'test4' /root/file"  
when: check.rc != 0  
...
In certain cases, you need to do execute the command when the check= based  
on more complex condition(s) so the idea is to use it in conjuction with  
"when:" and evaluate check.rc, check.stdout, check.stderr to anything you want
-name: check if ssh host keys need to be regenerated  
shell: rm -f /etc/ssh/ssh_host_* verify="cat /etc/ssh/ssh_host_rsa_key.pub"  
when: check.stdout.find('root@template-') != -1  
notify:  
reconfigure ssh  
tags: ssh
Copied from original issue: ansible/ansible-modules-core#1396