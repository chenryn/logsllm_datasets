### 4.1 Fault Classification

This section analyzes the GDI (General Data Interface) data for the entire month of July 2003. Figure 6 illustrates the variations in temperature and humidity over a complete day, specifically on July 9th. The data clearly show that both temperature and humidity fluctuate continuously throughout the day, and this trend is consistent for the entire month.

#### Experimental Setup

Table 1 outlines the parameters used in the experimental setup to determine the Markov Models, as discussed in § 3.1. The Model State Identification module requires an initial estimate of the set of model states, which can be random or based on historical data. In our study, we used an initial set of 6 states, determined by running an off-line clustering algorithm on the entire dataset. The observation window size is another critical input. Given that our sensors sample data every 5 minutes, we use a window size of 12 samples, which allows us to capture environmental attribute variations with sufficient time accuracy (one hour) and statistical significance (approximately 100 sensor readings, considering some data may be missed or corrupted).

| Parameter | Description | Value |
| --- | --- | --- |
| K | Number of sensors | 10 |
| M | Number of initial model states | 6 |
| w | Observation window size | 12 |
| α | Learning factor for estimating model states | 0.10 |
| β | Learning factor for estimating state transition probability A | 0.90 |
| γ | Learning factor for estimating observation symbol probability B | 0.90 |

#### Markov Model Estimation

Figure 7 depicts the correct Markov Model MC of the environment, estimated using the procedure described in § 3. Four main states of the system are identified: (12,94), (17,84), (24,70), and (31,56), where each state is represented by a (temperature, humidity) tuple. An additional state (16,27) results from minor fluctuations within the readings. This state has a very low transition probability and is not considered a key state.

By applying the proposed methodology to the GDI data, we identified two consistently faulty sensor nodes: sensor 6 and sensor 7. Figure 8 compares the humidity values reported by these two faulty sensors with a non-faulty sensor (sensor 9). Sensor 6 reports a continuously decreasing humidity value, eventually reaching almost zero, while sensor 7 reports, on average, a value about 10% higher than the correct sensors.

#### Hidden Markov Models for Faulty Sensors

Figure 9 shows the two Hidden Markov Models (HMMs) learned for sensor 6, labeled MCO and MCE. Tables 2 and 3 report the corresponding state transition probability matrix (A) and observation symbol probability matrices (BCO and BCE). The additional state (⊥) in BCE models the scenario when the faulty sensor does not produce faulty data and is not considered during classification. Based on the relations described in § 3.4, we observe that the rows and columns of BCO are approximately orthogonal, and BCE has all columns nearly null except for one column (corresponding to state (15,1)) with values close to one. This leads to the correct classification of sensor 6 as being in a stuck-at state (15,1).

| i ↓, j → | (12,94) | (31,56) | (16,27) | (24,70) | (17,84) |
| --- | --- | --- | --- | --- | --- |
| (12,94) | 1 | 0 | 0 | 0 | 0 |
| (31,56) | 0 | 1 | 0 | 0.11 | 0 |
| (16,27) | 0 | 0 | 1 | 0 | 0.17 |
| (24,70) | 0 | 0 | 0 | 0 | 0.89 |
| (17,84) | 0 | 0 | 0 | 0.83 | 0 |

| i ↓, j → | (16,27) | (12,94) | (31,56) | (16,27) | (24,70) | (17,84) |
| --- | --- | --- | --- | --- | --- | --- |
| (16,27) | 0.33 | 0.01 | 0 | 0 | 0 | 0 |
| (15,1) | 1 | 1 | 0.9 | 0.67 | 0.99 | 0 |
| ⊥ | 0 | 0 | 0.1 | 0 | 0 | 0 |

A similar analysis for sensor 7, shown in Tables 4 and 5, reveals that the resulting observation symbol probability matrices, BCO and BCE, are approximately orthogonal. When computing the ratios and differences between the attributes of corresponding model states, we obtain ratios with averages (1.24, 1.16) and low variances (0.006, 0.007), and differences with averages (5, 10) and high variances (0, 8). This leads to the correct classification of sensor 7 as having a calibration fault.

| i ↓, j → | (22,80) | (17,88) | (13,96) | (27,68) | (32,56) |
| --- | --- | --- | --- | --- | --- |
| (22,80) | 0.001 | 0 | 0 | 0 | 0 |
| (17,88) | 0.02 | 0.8 | 0 | 0 | 0 |
| (13,96) | 0 | 0.2 | 1 | 0 | 0 |
| (27,68) | 0 | 0 | 0 | 0.999 | 0 |
| (32,56) | 0 | 0 | 0 | 0 | 0.999 |

| i ↓, j → | (22,80) | (17,88) | (13,96) | (27,68) | (32,56) |
| --- | --- | --- | --- | --- | --- |
| (22,80) | 0.87 | 0 | 0 | 0 | 0 |
| (17,88) | 0.86 | 0 | 0 | 0 | 0 |
| (13,96) | 0.85 | 0 | 0 | 0 | 0 |
| (27,68) | 0 | 0 | 0 | 0.46 | 0 |
| (32,56) | 0 | 0 | 0 | 0 | 0 |
| ⊥ | 0.14 | 0.15 | 1 | 0.13 | 0.54 |

### 4.2 Attack Classification

To evaluate the proposed methodology under attack scenarios, we injected malicious behavior into the system. The original data did not contain malicious attacks. In the modeled attacks, the malicious nodes attempt to force the system into a new state (Dynamic Creation) or delete a valid state (Dynamic Deletion). Malicious behavior was injected into one-third of the available sensors.

In the scenario shown in Figure 10(a), the malicious attack deletes a correct environment state (29,56) by reporting lower temperature values, keeping the overall observed temperature constant at 24. The malicious sensor also maintains the humidity value approximately constant at 70 during this period. (Note that forcing the overall humidity to a precise 70 value would require malicious humidity values greater than 100, which could be easily detected with range checking. In this study, we maintained malicious values within their admissible range, e.g., [0, 100] for humidity.)

As discussed in § 3.4, attacks can be classified by analyzing the observation symbol probability distribution, BCO. Table 6 depicts matrix BCO for the malicious sensor 7. It can be seen that the row probabilities are not orthogonal (see row (29,56) and row (20,71)). According to our methodology, this indicates that an adversary has deleted an environment state (state (29,56) in the example) from the observations. In fact, the considered attack effectively eliminated a transition from state (20,71) to state (29,56) by forcing the temperature values to remain constant.

| i ↓, j → | (29,56) | (20,71) | (24,70) | (29,56) | (20,71) |
| --- | --- | --- | --- | --- | --- |
| (29,56) | 0.98 | 0 | 0 | 0 | 0 |
| (20,71) | 0 | 0.98 | 0 | 0 | 0 |
| (24,70) | 0 | 0 | 0.98 | 0 | 0 |

In summary, the proposed methodology effectively identifies and classifies both faulty and malicious sensor behaviors, providing a robust framework for maintaining the integrity of the sensor network.