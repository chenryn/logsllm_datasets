ATT&CK.”
[Online].
Available:
https:
//attack.mitre.org/
[46] O. Moe, “Living Off The Land Binaries and Scripts.” [Online].
Available: https://lolbas-project.github.io/
[47] ——, “Discovering The Anti-Virus Signature and Bypassing It,” 2020.
[Online]. Available: https://www.trustedsec.com/blog/discovering-the-
anti-virus-signature-and-bypassing-it/
[48] National Cyber Security Centre, “Advisory: Turla Group Exploits
Iranian APT
[Online].
Available: https://www.ncsc.gov.uk/news/turla-group-exploits-iran-apt-
to-expand-coverage-of-victims
Expand Coverage
of Victims.”
to
[49] ——, “APT10 Continuing to Target UK Organisations.” [Online].
https://www.ncsc.gov.uk/news/apt10-continuing-target-uk-
Available:
organisations
[50] ——,
“Reckless
Campaign
Rus-
sian Military
[Online]. Avail-
able: https://www.ncsc.gov.uk/news/reckless-campaign-cyber-attacks-
russian-military-intelligence-service-exposed
Intelligence Service Exposed.”
Cyber Attacks
by
of
[51] National Cybersecurity Authority, “Destructive Attack “ DUSTMAN ”
Technical Report,” 2019.
[52] R. Nolen,
S. Miller,
“Squiblydoo” Continues
OS Tools
https://www.carbonblack.com/2016/04/28/threat-advisory-squiblydoo-
continues-trend-of-attackers-using-native-os-tools-to-live-off-the-land/
“Threat Advisory:
of Attackers Using Native
[Online]. Available:
and R. Valdez,
Trend
the Land”.”
“Live
off
to
[53] Nozomi
Networks,
“GreyEnergy
from Maldoc
the Mal-
Re-
[Online].
https://www.nozominetworks.com/downloads/US/Nozomi-
ware
verse Engineering Analysis,”
Available:
Networks-GreyEnergy-Dissecting-the-Malware.pdf
Backdoor
no.
Comprehensive
Dissecting
February,
2019.
to
:
[54] Opswat Metadefender-Cloud, “Windows Anti-malware Market Share
Report,” 2019. [Online]. Available: https://metadefender.opswat.com/
reports/anti-malware-market-share?date=2019-09-30
[55] S. Pastrana and G. Suarez-Tangil, “A ﬁrst look at the crypto-mining
malware ecosystem: A decade of unrestricted wealth,” Proceedings of
the ACM SIGCOMM Internet Measurement Conference, IMC, no. ii, pp.
73–86, 2019. [Online]. Available: https://arxiv.org/pdf/1901.00846.pdf
[56] J. A. Pendergrass, N. Hull, J. Clemens, S. Helble, M. Thober, K. McGill,
M. Gregory, and P. Loscocco, “Runtime Detection Of Userspace Im-
plants,” 2019.
https:
[57] F. Pendlebury, F. Pierazzi, R. Jordaney, J. Kinder, and L. Cavallaro,
“Tesseract: Eliminating experimental bias in malware classiﬁcation
across
the
28th USENIX
[Online]. Available:
Security
https://www.usenix.org/system/ﬁles/sec19-pendlebury.pdf
time,” Proceedings
Symposium,
of
2019.
729–746,
space
and
pp.
[58] N. Pinkas, L. Rochberger, and M. Zatz, “Triple Threat: Emotet
2019.
https://www.cybereason.com/blog/triple-threat-
Deploys Trickbot To Steal Data
[Online]. Available:
emotet-deploys-trickbot-to-steal-data-spread-ryuk-ransomware
and Spread Ryuk,”
[59] M. Rezaeirad, B. Farinholt, H. Dharmdasani, P. Pearce, K. Levchenko,
and D. McCoy, “Schr¨odinger’s RAT: Proﬁling the stakeholders
in
of
the 27th USENIX Security Symposium, pp. 1043–1060, 2018.
https://www.usenix.org/system/ﬁles/conference/
[Online]. Available:
usenixsecurity18/sec18-rezaeirad.pdf
Proceedings
ecosystem,”
remote
Trojan
access
the
[60] C. Rossow, C.
J. Dietrich, C. Grier, C. Kreibich, V. Paxson,
N. Pohlmann, H. Bos, and M. Van Steen, “Prudent practices for
designing malware experiments: Status quo and outlook,” Proceedings
- IEEE Symposium on Security and Privacy, pp. 65–79, 2012. [Online].
Available: https://oaklandsok.github.io/papers/rossow2012.pdf
[61] A. Rubin, S. Kels, and D. Hendler, “AMSI-Based Detection of
Malicious PowerShell Code Using Contextual Embeddings,” 2019.
[Online]. Available: http://arxiv.org/abs/1905.09538
[62] M. Sebasti´an, R. Rivera, P. Kotzias, and J. Caballero, “AVclass: A Tool
for Massive Malware Labeling,” in Research in Attacks, Intrusions, and
Defenses, F. Monrose, M. Dacier, G. Blanc, and J. Garcia-Alfaro, Eds.
Cham: Springer International Publishing, 2016, pp. 230–253.
[63] StatCounter, “Desktop Operating System Market Share Worldwide.”
[Online]. Available: https://gs.statcounter.com/os-market-share/mobile/
worldwide
[64] Sudhakar and S. Kumar, “An emerging threat Fileless malware: a
survey and research challenges,” Cybersecurity, vol. 3, no. 1, pp.
1–12, 2020. [Online]. Available: https://link.springer.com/content/pdf/
10.1186/s42400-019-0043-x.pdf
[65] V. Svajcer, “Hunting for LoLBins,” 2019.
[Online]. Available:
https://blog.talosintelligence.com/2019/11/hunting-for-lolbins.html
[66] Symantec,
“Living
off
the
Land:
Turning
Infrastructure
https://www.symantec.com/content/dam/symantec/docs/white-papers/
living-off-the-land-turning-your-infrastructure-against-you-en.pdf
[Online].
Against
2019.
You,”
Your
Available:
[67] D. Ugarte, D. Maiorca, F. Cara, and G. Giacinto, “PowerDrive:
Accurate de-obfuscation and analysis of powershell malware,” 16th
Conference on Detection of Intrusions and Malware & Vulnerability
Assessment, vol. 11543 LNCS, pp. 240–259, 2019. [Online]. Available:
http://pralab.diee.unica.it/sites/default/ﬁles/dimva19-paper76-ﬁnal.pdf
[68] X. Ugarte-Pedrero, M. Graziano, and D. Balzarotti, “A Close Look at
a Daily Dataset of Malware Samples,” ACM Transactions on Privacy
and Security, vol. 22, no. 1, pp. 1–30, 2019. [Online]. Available:
http://s3.eurecom.fr/docs/tops19{ }dailymalware.pdf
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1571
[69] VirusShare,
“VirusShare.com.”
virusshare.com/hashes.4n6
[Online].
Available:
https://
the sample range is mostly within the period from 2015 to
2020.
[70] VX Underground, “VX Underground Samples,” 2020.
Available: https://vx-underground.org/samples.html
[Online].
[71] Q. Wang, W. U. Hassan, D. Li, K. Jee, X. Yu, J. Rhee, Z. Chen,
W. Cheng, C. A. Gunter, and H. Chen, “You Are What You Do :
Hunting Stealthy Malware via Data Provenance Analysis,” Network and
Distributed System Security Symposium, no. February, 2020. [Online].
Available: https://www.ndss-symposium.org/wp-content/uploads/2020/
02/24167.pdf
[72] Q. Wang, W. U. Hassan, D. Li, K. Jee, X. Yu, K. Zou, J. Rhee,
Z. Chen, W. Cheng, C. A. Gunter, and H. Chen, “You Are What
You Do: Hunting Stealthy Malware via Data Provenance Analysis,”
Network and Distributed System Security Symposium, no. February,
2020. [Online]. Available: https://dx.doi.org/10.14722/ndss.2020.24167
[73] C. Wueest and H. Anand, “Living off
the land and ﬁleless
attack techniques,” Symantec, Tech. Rep., 2017. [Online]. Available:
https://www.symantec.com/content/dam/symantec/docs/security-
center/white-papers/istr-living-off-the-land-and-ﬁleless-attack-
techniques-en.pdf
[74] Yara, “Yara: Cuckoo Module,” 2019.
[Online]. Available: https:
//yara.readthedocs.io/en/v3.5.0/modules/cuckoo.html
A. Dataset Characterisation
APPENDIX
Fig. 7: Number of Positive Detections Distribution
To expand upon the nature of the datasets that we analysed,
we illustrate their characteristics and identify the differences
between them.
Number of Positives. Within VirusTotal, every sample is
scanned by a number of different AV engines. We deﬁne the
‘Number of Positives’ variable as the number of engines that
identify a sample as malware. Figure 7 plots the number of
positive matches found by various AV engines to characterise
the dataset.
First Seen Date. The ﬁrst seen ﬁeld is a value within
VirusTotal reports which contains the date that this malware
was ﬁrst uploaded to the VT platform. We plot the ﬁrst seen
date for each dataset in Figure 8 and Figure 9, for which
B. Dataset Quality
Rossow et al. [60] describe ﬂaws and limitations in existing
malware analysis papers and prudent steps to take in order to
avoid biases. We adhere to the three critical assessment criteria
(correctness, transparency and realism) as far as is possible in
our paper.
Correctness. We removed goodware as recommended by
Pendlebury et al. [57], to ensure reliability. We accomplished
this by separating elements of the Ember dataset that are
labelled as known goodware. We did not remove samples with
zero detections, as this may be evasive malware and malware
uses LotL techniques partially for the purpose of achieving
evasiveness.
We removed hashes from our dataset if there were duplicates
in sub-datasets or if there was incomplete data available for a
particular hash. We also removed several datasets, reducing our
initial count of over 45,000,000 malware hashes and associated
reports to a distilled selection of datasets.
Transparency. We describe all datasets and their provenance
and characteristics as thoroughly as possible in Appendix
A. The virtual environment
in which these samples were
detonated is VT’s fork of Cuckoo sandbox and similar deriva-
tives.
Realism. The aim of dataset selection is to analyse samples
that are a representative cross-section of modern malware.
We included several well-known public malware datasets as
a realistic and typical sample. We also included and focused
our analysis on several datasets that we collected, to show
the malware landscape from different representative perspec-
tives.
C. Windows 10 System Preparation for AV Experimental
Setup
We took two speciﬁc steps to facilitate the testing of evasive
the potential of malware on Windows 10 systems.
Bypassing AMSI. Windows underlying Anti-Malware Scan
Interface (AMSI) is a part of the Windows operating system.
Before installing an AV on each virtual system, we disabled
AMSI. While various bypasses that have been historically
available for Windows 10 systems have been patched after-
wards, an AMSI bypass exploit is available at the time of
writing [10].
The purpose of using this approach to disable AMSI is to
isolate the detection and prevention capabilities of various
engines against LotL binaries.
Enabling Unauthenticated Share Access. By default
in
Windows 10, guest access to shares is disabled. To perform
these bypasses this feature was enabled [34]. We accomplished
this by running a command as a user and editing group policy
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1572
s
e
l
p
m
a
S
f
o
r
e
b
m
u
N
s
e
l
p
m
a
S
f
o
r
e
b
m
u
N
106
105
104
103
102
101
100
106
105
104
103
102
101
100
APT
VT Balanced
Yara
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
Date of First Upload (Quarterly Increments)
Fig. 8: First Seen Distribution for Private Datasets
Ember
Georgia Tech
MalShare
VirusShare
VXUG
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
Date of First Upload (Quarterly Increments)
Fig. 9: First Seen Distribution for Public Datasets
to enable insecure guest logons to an SMB share. Whilst
unauthenticated access to an SMB share is not necessary for
all tests, it was necessary for those that involve staging from
an SMB server. Alternatively, SMB Server login details can be
cached to access them in a similar manner without the editing
of registry keys.
D. LotL binary based Bypass Techniques
Ftp.exe. Ftp.exe can be used to execute commands from
a stored text ﬁle containing instructions (-s:ﬁle.txt parameter).
When the ﬁle is executed a simple Powershell reverse shell
can be spawned.
For some of the AV engines that are more resilient to evasion
techniques, the tool Powercat [18] was invoked to achieve a
UDP reverse shell. Additionally for 2 engines, the Invoke-
Obfuscation [6] toolkit was invoked to obfuscate the contents
of Powercat for evasion.
Mshta.exe. Mshta.exe allows the execution of scripts con-
tained within .hta ﬁles. We found it sufﬁcient to use Mshta
to load the .hta ﬁle from a network share, which would
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1573
call a Powershell script from VBScript and then execute a
reverse shell to evade AV. Many AV programs were able to
identify this payload ﬁle as malicious, but when obfuscation
was applied (Spookﬂare [20]), detection was avoided.
Wmic.exe. Wmic.exe is a native binary on Windows systems
that can, amongst other malicious uses, execute other binaries.
For most of the AVs, evasion is achieved by invoking a simple
Powershell reverse shell from Wmic.exe. For other AVs,
evasion was achieved by executing a shell over UDP using
Powercat, instead of TCP. Further obfuscation was necessary
to bypass AMSI and Windows Defender, for which Invoke-
Obfuscation [6] was also used.
Rundll32.exe. We use Koadic [17], a tool
for post-
exploitation, for testing the viability and detectability of
Rundll32.exe. Koadic provides several command-line pa-
rameters to provide to the Rundll32.exe binary. Koadic’s
evasive exploitation leverages the fact that Rundll32.exe,
when provided with the ‘-javascript’ parameter, allows the
execution of Javascript code. Koadic is sufﬁcient to achieve
a bypass for most AV engines, for others JS-Rat-Py [22], a
similar remote access tool, sufﬁces.
Some AV engines were able to identify the execution of
Javascript by Rundll32.exe as malicious, spawning a
network connection. To bypass these, we generated a malicious
.dll with MSFvenom, or in particularly evasive cases, we gen-
erated and compiled a reverse shell .dll from C++ code.
Regsvr32.exe. Regsvr32.exe binary can be used to exe-
cute remote .sct ﬁles in the squiblydoo [52] attack. This attack
enables the execution of remotely hosted .sct ﬁles, containing
Javascript code that can execute arbitrary commands such as
creating ActiveXObjects. For our repeated experiments, as the
squibblydoo attack has been patched by Microsoft, we used a
bypass that still allows this attack to be conducted, described
by Oddvar Moe [47].
For a number of the bypasses, Koadic was used. This tool
allows a reverse shell to be executed in the form of JavaScript
code. Where Koadic was detected, JS-Rat-Py’s Regsvr32 com-
ponent was not. For others, we used custom code within an
.sct ﬁle.
Bitsadmin.exe. Bitsadmin.exe was used to create Back-
ground Intelligent Transfer Service jobs. It is typically used
for the transfer of ﬁles between different machines. However
it has undocumented functionality allowing the execution of
binaries or arbitrary commands. It can execute malicious ﬁles
and bypass application whitelisting.
Bitsadmin.exe was used to create a Powershell reverse
shell, by creating a job and resuming it. This Powershell re-
verse shell was spawned by either calling Powershell directly,
or performing this via several layers of obfuscation using an
.hta ﬁle. This .hta ﬁle calls Powershell via a Visual Basic script
within that .hta ﬁle called by Mshta.exe.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1574