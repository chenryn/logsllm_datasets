adopt the popular XML access control model proposed in [5,
20, 22].
In this model, users are members of appropriate
roles; and an access control policy consists of a set of role-
based 5-tuple access control rules (ACR): R = {subject, ob-
ject, action, sign, type}, where (1) subject is a role to whom
an authorization is granted; (2) object is a set of XML nodes
speciﬁed by XPath; (3) action is one of “read,”“write,” and
“update”; (4) sign ∈ {+,−} refers to access “granted” or
“denied,” respectively; and (5) type ∈ {LC, RC} refers to
either “Local Check” (i.e., authorization is only applied to
attributes or textual data of context nodes–“self::text()
| self::attribute()”), or “Recursive Check” (i.e., autho-
rization is applied to context nodes and propagated to all
descendants–“descendant-or-self::node()”). When an XML
node does not have either explicit (via LC rules) or implicit
(via RC rules) authorization, it is considered to be “access
denied.” It is possible for an XML node to have more than
one relevant access control rule. If conﬂict occurs between
“+” and “−” rules, “−” rules take precedence. Five example
access control rules under the 5-tuple model are shown in
Figure 2
In our DIBS, each owner contributes a policy governing
the access to her data objects, and the system-wide access
control policy is simply the union of all the per-owner poli-
cies.
3.3 Automata-based Access Control
Enforcement
View-based access control enforcement suﬀers from exces-
sive storage requirement and expensive maintenance. Many
view-free XML access control mechanisms are proposed to
overcome the disadvantage. In our approach, we adopt and
extend a view-free automaton-based access control mecha-
nism proposed in [15]. It uses XPath expressions in access
control rules (ACR) to build a Non-deterministic Finite Au-
tomaton (NFA). We call such a NFA an access control au-
tomaton. Each incoming query is checked against the NFA.
As a result, each query could be (1) accepted: when user
is allowed (by ACR) to access all the requested nodes, the
query is kept as is. (2) rewritten: when user is allowed to
access part of the requested content, the query is rewritten
into a safe one, which asks for authorized content only. (3)
denied: when user is not allowed to access any requested
node, query is rejected.
Here, we use an example to illustrate how automaton-
based access control enforcement works.
In the examples
throughout the paper, we adopt the well known XMark [23]
schema, mimicking an online auction. As shown in Figure 2,
we use 5 access control rules assigned to two roles. First, an
automaton is built based on the XPath expressions from ob-
ject part of the rules. For example, constructing NFA with
rule R1, we will have automaton states 0, 1, 2, 3, and 4 as
shown in the ﬁgure. Especially, state 4 is an accept state,
as shown in double-circle. Moreover, each state is attached
with two binary arrays, namely access list (indicating which
roles can access this state) and accept list (indicating this
is accept state for particular role(s)), respectively. For in-
stance, state 4 is accessible to users of role 1 only, and is an
accept state for this role.
At run time, user queries are checked against the automa-
ton. Using the same example, suppose a user of role 1 asks
three XPath queries. (1) Q1: /site/categories/books/name
goes through states 1, 2, 3, and reach accept state 4. As a re-
sult, this query is accepted. (2) Q2: /site/regions/asia/*
/name goes through states 0, 1, 5, 6, 7 and 8. Based on
the semantics of * in XML, the query is rewritten into
into safe query: /site/regions/asia/item/name. (3) Q3:
/site/regions/*/item/price is denied since no accept state
can be reached.
Due to space limit, we omit the details of automaton based
access control. Please refer to [15, 13].
3.4 Automata-based In-network Query
Broker
In traditional DIBS, access control mechanisms are im-
plemented at data servers so as to check the accessibility
right of a query (either by the database kernel or by a query
ﬁlter [15] outside of the kernel) before answering it. How-
ever, [13] claims that, whenever access control is enforced at
the data source-side, suspicious queries are allowed to tra-
verse through the whole system until they get rejected at
the far end. Thus, by sending snooping queries, attackers
can probe the system to get data distribution and server
location information, and do further inferences after suc-
cessfully ﬁnding out the location of sensitive data. In addi-
tion, source-side access control wastes substantial network
Access control rules:
R1: { role 1, “/site/categories//name”, read, +, RC} 
R2: { role 1, “/site/regions/*/item/location”, read, +, RC}
R3: { role 1, “/site/regions/*/item/quantity”, read, +, RC}
R4: { role 2, “/site/regions/*/item/description”, read, +, RC}
R5: { role 2, “/site /regions/*/item/name”, read, +, RC}
Indexing guidelines:
L1: { “/site/categories/category/name”, 192.168.0.5}
L2: { “/site//*/item/location”, 192.168.0.1}
L3: { “/site/regions”, 192.168.0.3}
(cid:304)
0
0
1
0
2
categories
1
0
1
0
1
regions
5
1
1
*
0
0
*
3
4
name
0
0
1
0
7
1
1
6
item
1
1
0
0
0
1
1
site
0
0
1
0
1
0
location
quantity
name
0
0
description
192.168.0.5
8
192.168.0.1
192.168.0.3 
192.168.0.3
192.168.0.3
192.168.0.3
1
0
1
0
0
1
0
1
1
0
1
0
0
1
0
1
9
10
11
Figure 2: An example of automaton based access
control and routing.
resources (e.g., bandwidth). To tackle the above problems,
in-broker access control is proposed in [13]. The idea is to
“push” the access control mechanism from the edge (i.e., data
source side) to the “heart” of information brokering systems
(i.e., information brokers). In this paper, we will embrace
this idea and do access control at coordinators.
Content-based XML routing is applied in all DIBS [11, 12,
13]. In this paper, we adopt a rather simple content-based
routing scheme, as the one used in [13]. In the scheme, each
coordinator holds a set of indexing guidelines, and each in-
dexing guideline consists of (1) an XPath expression indi-
cating data objects and (2) an IP address indicating data
location. It means that if a query matches the XPath ex-
pression, it will be forwarded to the IP address.
In [13], indexing guidelines are attached to accept states
of the access control NFA, since only accepted/rewritten
queries should be forwarded to the data servers. Let us use
the indexing guidelines (L1 to L3) in Figure 2 as an exam-
ple. Comparing with the ﬁve access control rules, L1 is only
relevant to R1. As a result, IP of 192.168.0.5 is attached
to state 4, and all queries accepted at this state will be for-
warded to data server 192.168.0.5. Please refer to [13] for
details.
3.5 Assumptions
We assume that multiple data owners contribute XML
data to DIBS. Therefore, data is stored in multiple data
servers which are geographically distributed; and data may
be replicated. In our model, each data location is an IP ad-
dress identifying a unique data server; and each data object
is indexed by an XPath expression. We assume data owners
share data within some sort of consortium. Whenever a new
data owner O joins the consortium, (1) O will let the consor-
tium know which data objects she owns and where the data
objects are stored, and (2) the consortium will “align” and
merge the XML schema of O’s data into the XML schema
shared by the members of the consortium. We assume all
XPath queries are crafted based on the shared XML schema.
4. PRIVACY PRESERVING INFORMATION
BROKERING APPROACH (PPIB)
In this section, we propose an innovative Privacy Preserv-
ing Information Brokering (PPIB) framework to address the
Privacy Type 
User
Location 
Query
Content 
Data Server 
Location  
Data Object 
Distribution 
Access 
Control Policy  
Index
Information 
Broker 
Root-
Coordinator 
Coordinator 
Leaf- 
Coordinator 
Data Server 
Trust 
Hide 
Hide
Hide 
Hide 
Hide 
Trust 
(Partially) 
Trust
Hide 
Trust 
Hide 
Hide 
Hide 
Trust 
Trust 
Hide 
Hide 
Hide 
Hide 
Trust 
Hide 
(Partially) 
(Partially) 
Trust
Trust
Hide 
(Partially) 
Trust 
(Partially) 
Trust 
Hide 
Trust 
Trust 
Hide 
Figure 3: Brokering components have restricted
trust on system privacy.
user/data/metadata privacy vulnerabilities associated with
existing distributed information brokering systems, includ-
ing the DIBS presented in [13].
4.1 Broker-Coordinator Overlay
As shown in Figure 1, we consider a broker-coordinator
overlay consisting of N brokers and M coordinators, denoted
by B1, B2, ...BN and M1, M2, ...MM , respectively. Based on
their functions, coordinators are classiﬁed into three types:
a root-coordinator M1, intermediate coordinators M2, ...Mi,
and leaf-coordinators Mi+1, ...MN . All the coordinators form
a coordinator tree of height h: (1) The root-coordinator is
the root of the tree. It is an entrance for incoming queries.
(2) Each intermediate coordinator holds a speciﬁc segment
of an access control automaton (see Section 3). It also holds
the location information of its child coordinator(s), which
holds the “next segment” of the automaton. (3) Each leaf-
coordinator holds an NFA-based query indexer, which was
constructed from indexing rules. At runtime, it forwards
safe queries to data servers, which has the data to answer
it.
In this framework, the number of coordinators, M , and
the height of the coordinator tree, h, are highly dependent
on how access control policies are segmented (to be elabo-
rated in Section 4.2). In the broker-coordinator overlay, bro-
kers and coordinators work separately and cooperatively. N
brokers are distributed in the DIBS system so that each user
is directly connected with at least one local broker. Each lo-
cal broker also has direct link with at least one active root-
coordinator. Coordinators are replicated to provide eﬃcient
and reliable service. We also introduce a centralized control
point, the super node, into the PPIB approach. It is respon-
sible for initiation setting and key management in the whole
information brokering process (see section 5).
In PPIB, the responsibility sharing principle is implemented
for two purposes. (1) To protect user privacy: a user query is
divided into access-control-related part (e.g., the role of the
user and query content) and user-privacy-related part(e.g.,
authentication information, location, etc). The ﬁrst part is
visible to coordinators for access control enforcement; while
the second part is visible to local brokers for authentication.
Encryption is adopted so that access-control-related infor-
mation is not visible to brokers, although they route it to
the root-coordinator. (2) To protect data privacy and access
control policy privacy: ACRs and data object distribution
information are divided and distributed to several coordi-
nators (to be elaborated in 4.2). As a result, PPIB only
requires minimal trust (or honesty) in each coordinator, as
shown in Figure 3, where “Hide” means “no need to trust”. It
is clear that whenever the system’s level of trust in each bro-
kering component can be lowered without hurting privacy,
the system’s privacy protection capability will be enhanced.
4.2 Automaton Segmentation
In PPIB, we adopt the view-free automaton-based access
control mechanism [13, 15], and extend it in a decentral-
ized manner with our Automaton Segmentation scheme. The
idea of automaton segmentation comes from the concept of
multilateral security: split sensitive information to largely
meaningless shares held by multiple parties who cooperate
to share the privacy-preserving responsibility.
Our automaton segmentation scheme ﬁrst divides the global
access control automaton into several segments. Granular-
ity of segmentation is controlled by a parameter partition
size, which denotes how many XPath states in the global
automaton are partitioned and put into one segment. By
and large, the granularity is a choice of the system adminis-
trator. Higher granularity leads to better privacy preserving,
but also more complex query processing. Each accept state
of the global automaton is specially partitioned as a separate
segment. Then we assign each segment to one independent
site. As a result, a site in essence holds a small automaton.
At run-time, it conducts NFA-based access control enforce-
ment as a stand-alone component. However, in the state
transition table of the last state of each segment, the “next
state” points to a root state at a remote site, instead of a
local state.
In PPIB, a site is actually a logical unit. So a physical
coordinator (i.e., a machine) can in fact hold multiple sites.
For convenience, we add dummy accept states to each au-
tomaton segment. The dummy accept states do not accept
queries. Instead, they are used to store the location of actual
“next states,” i.e. the address(es) of the coordinators who
hold the next segment of the global automaton. At runtime,
they are used to forward the halfway processed query to the
next coordinators. On the other hand, only the sites hold-
ing original accept states accept queries and forward them
to the data servers. As a result, access control and query
brokering are seamlessly integrated at coordinators, and the
global automaton-based query brokering mechanism is de-
centralized and distributed among many coordinators.
Algorithm 1 Automaton Segmentation: Deploy()
Input: Automaton State S
Output: Site Address: addr
for each symbol k in S.StateT ransT able do