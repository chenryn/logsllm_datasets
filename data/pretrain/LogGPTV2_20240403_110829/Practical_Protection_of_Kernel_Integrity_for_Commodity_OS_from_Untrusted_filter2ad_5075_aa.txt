title:Practical Protection of Kernel Integrity for Commodity OS from Untrusted
Extensions
author:Xi Xiong and
Donghai Tian and
Peng Liu
Practical Protection of Kernel Integrity for Commodity OS from Untrusted
Extensions
Xi Xiong
Donghai Tian
Peng Liu
The Pennsylvania State
The Pennsylvania State
The Pennsylvania State
University
University
PI:EMAIL
Beijing Institute of Technology
University
PI:EMAIL
PI:EMAIL
Abstract
Kernel extensions are widely used by attackers to com-
promise the operating system kernel. With the presence of
various untrusted extensions, it remains a challenging prob-
lem to comprehensively preserve the integrity of OS kernels
in a practical and generic way. In this paper, we present
HUKO, a hypervisor-based integrity protection system de-
signed to protect commodity OS kernels from untrusted ex-
tensions. In HUKO system, untrusted kernel extensions can
safely run to provide desired functionalities. The behaviors
of untrusted extensions, however, are conﬁned by manda-
tory access control policies, which signiﬁcantly limit the
attacker’s ability to compromise the integrity of the ker-
nel. To guarantee multi-aspect protection and enforcement,
HUKO leverages hardware assisted paging to transparently
isolate untrusted extensions from the OS kernel. Moreover,
HUKO overcomes the challenge of mediation overhead by
introducing a novel design named subject-aware protection
state transition to eliminate unnecessary privilege transi-
tions caused by mediating allowed accesses. Our approach
is practical because it requires little change for either OS
kernel or extensions, and it can inherently support multiple
commodity operating systems and legacy extensions. We
have implemented a prototype of HUKO based on the open
source Xen hypervisor. The evaluation results show that
HUKO can comprehensively protect the integrity for both
Linux and Windows kernel from various kinds of malicious
extensions with an acceptable performance cost.
1
Introduction
Kernel-level extensions are widely supported in com-
modity operating systems to extend the kernel’s function-
ality. However, the extension interface could also be lever-
aged by attackers to tamper the integrity of the OS kernel.
For example, attackers can install malicious extensions such
as kernel rootkits to hide their activities in the system. On
the other hand, the existence of buggy third-party device
drivers exposes many vulnerabilities which can be exploited
by attackers to inject their malicious code into the kernel
space. These untrusted extensions threaten the kernel in-
tegrity greatly, yet unfortunately in many cases users have
to let them run in order to provide the desired functional-
ities and availability. Therefore, preserving the OS kernel
integrity from the presence of untrusted extensions remains
a challenging problem.
Previous research efforts on protecting the OS kernel pri-
marily target at one aspect of kernel integrity protection,
such as code integrity [27, 25], data integrity [10, 31] and
control ﬂow/data integrity [33, 23, 35]. While these ap-
proaches are effective against certain categories of attacks,
the lack of multi-aspect protection renders the system’s in-
capability to deal with multiple types of malicious activi-
ties. For example, systems that only guarantee the integrity
of kernel code and hooks are vulnerable to DKOM (Direct
Kernel Object Manipulation) attacks. Similarly, protecting
kernel code and data is not enough for defeating new con-
trol ﬂow attacks such as return-oriented rootkits [28, 24].
Moreover, current approaches are also limited in countering
advanced attacks such as direct kernel stack manipulation in
commodity systems, in which the attacker manipulates con-
trol and/or non-control data in the kernel stack shared by all
code entities in the OS kernel.
Another difﬁculty is about making the protection scheme
practical and generic. Several proposals [27, 25, 22] pre-
serve kernel code integrity by preventing untrusted code
from executing in the kernel space to defeat code injection
and malwares. However, they also eliminate all the benign
functionalities and availability provided by untrusted exten-
sions. Quite a few security approaches [23, 10, 26, 11, 14]
utilize the knowledge of kernel data structures to achieve
ﬁne-grained auditing and intrusion detection. However,
these approaches are dependent upon data structure seman-
tics of a speciﬁc kernel, making them difﬁcult to adapt
different OS kernels with another version or from other
venders. Moreover, the performance overhead induced by
dynamically reconstructing and tracking ﬁne-grained ker-
nel objects makes these approaches not that suitable for an
online protection system.
To achieve tamperproof and transparency in a system
that protects the OS kernel, a common approach is to lever-
age the virtual machine monitor (VMM), which provides
another layer of indirection.
In such systems, to protect
a security sensitive-kernel object, the VMM intercepts all
the events that access this object and validates each event
based on the protection policy. This approach is effective
for protecting a small number of crucial objects in the ker-
nel. However, severe performance problem arises once the
quantity of protected objects becomes large, say, the entire
kernel code and data area. The reason is that, no matter
how VMMs are trapping these events (e.g., via instruction
instrumentation or page protection), performing mediation
for each event will always cause control transfers between
the VMM and the guest, which will need multiple time-
consuming privilege transitions (e.g., ring faults or VMEX-
ITs). Researchers have proposed techniques such as hook
indirection [33] to mitigate the performance problems for
hook protection. However, this approach is only useful for
protecting objects that are scattered across page boundaries,
yet still cannot be applied to the entire kernel code and data.
This paper presents HUKO, a hypervisor-based integrity
protection system designed to protect commodity operating
system kernels from untrusted extensions. HUKO allows
users to execute untrusted extensions in the kernel space
to provide desired functionalities. The behaviors of un-
trusted extensions, however, are conﬁned by mandatory ac-
cess control policies, which signiﬁcantly limit the attacker’s
ability to compromise the integrity of the kernel. In order
to achieve multi-aspect protection, HUKO leverages hard-
ware assisted paging to transparently isolate untrusted ex-
tensions from the OS kernel so that it could mediate all in-
teractions (including memory modiﬁcation, control trans-
fers and DMA) between extensions and the kernel. Re-
garding kernel stack integrity, HUKO’s approach includes
a VMM-level private stack with lazy synchronization to of-
fer a transparent and efﬁcient stack separation and permis-
sion management for unmodiﬁed OS kernels. To address
the challenge of mediation performance, HUKO introduces
a design named subject-aware protection state transition to
eliminate unnecessary privilege transitions caused by medi-
ating benign accesses. HUKO is a practical approach be-
cause it requires little change for either OS kernel or exten-
sions. Also it does not depend on semantic knowledge of
kernel data structures so that it can inherently support mul-
tiple commodity operating systems and legacy extensions.
We have implemented HUKO prototype based on the
open source Xen hypervisor. To facilitate HUKO’s de-
sign, we leverage contemporary hardware virtualization
techniques such as Intel’s EPT, VPID and VT-d1 [4, 5].
We evaluated HUKO’s protection effectiveness by running
malicious kernel extensions in both Linux and Windwos.
Our experiments show that HUKO can protect the ker-
nel integrity in the presence of various kinds of malicious
extensions, including DKOM and return-oriented rootkits.
In terms of mediation performance, the evaluation results
show that the average performance overhead in application
level benchmarks is ranged from less than 1% to 21%. Even
for extreme cases when HUKO isolates the entire ext3 ﬁle
system (the largest module in our Linux OS) from the ker-
nel, the mediation overhead for extracting a Linux kernel
tarball is about 21%, with the protection state transfer rate
at 390,000 per second.
We believe that HUKO provides a generic and trans-
parent framework for running untrusted code in OS kernel
with enhanced integrity protection for commodity systems.
Also, this framework could be used to enforce mandatory
access control policies inside commodity OS kernels with
an acceptable impact on performance.
The remainder of this paper is organized as follows. We
ﬁrst describe the threat model, the integrity properties that
HUKO enforces and our assumptions in Section 2. Section
3 provides an overview of the design of HUKO. Section 4
details the design and implementation of the entire archi-
tecture. Our evaluation experiments for both the protection
effectiveness and performance of HUKO are shown in Sec-
tion 5. We discuss limitations and future work of our system
in Section 6. Finally, Section 7 introduces related work and
Section 8 is the conclusion.
2 Kernel Integrity Threat Model
In this paper, we focus on attacks that the adversary
utilizes the kernel extension interface to compromise the
kernel integrity, which is the most common method to at-
tack a commodity OS kernel. To speciﬁcally illustrate the
threats, we present three different attack scenarios as fol-
lows: (1) The attacker gains the root privilege of the entire
system, then he loads malicious extensions such as kernel-
level rootkits into the OS kernel. (2) The attacker exploits
a vulnerability existed in a benign kernel extension (e.g.,
a buggy device driver) to inject malicious code and there-
fore changes the extension’s behavior. (3) A careless nor-
mal user loads an unveriﬁed kernel extension (e.g., a third-
party device driver), which contains malicious code. There
are various ways in which these malicious code could dam-
age the control ﬂow integrity and data integrity of the ker-
1AMD also has similar techniques with different names.
nel, for example, direct modiﬁcation of kernel code, mod-
ifying control data (e.g., system call table, IDT and func-
tion pointers), modifying non-control data (e.g., process de-
scriptors and ﬁle system metadata), writing to the kernel
space via malicious DMA requests, and stack manipulation
(e.g., return-oriented attacks).
We classify subjects in an operating system kernel into
three categories. The ﬁrst category is the OS kernel, which
HUKO aims to protect. The second category consists
of trusted kernel extensions, which are kernel extensions
trusted by the system administrator. Generally their code
need to be attested and veriﬁed to guarantee security. The
third category is untrusted extensions, which are extensions
that may be compromised or inherently malicious. Rootkits
and unveriﬁed device drivers belong to this category.
HUKO protects the integrity of the OS kernel by enforc-
ing the following properties in a mandatory protection sys-
tem:
(cid:129) Kernel code/data integrity: code, static data and dy-
namic data of the OS kernel are protected from being
modiﬁed by untrusted extensions via direct memory
access or DMA access.
(cid:129) Architectural state integrity: architectural environ-
ment describing the execution state of the OS kernel
such as segment registers, control registers and certain
ﬂag registers cannot be altered by untrusted extensions.
(cid:129) Control ﬂow integrity: (1) control transfers from un-
trusted extensions to the OS kernel, including function
calls, jumps and preemptions, are restricted to a set
of kernel service functions named trusted entry points
(TEPs) speciﬁed by the OS provider or the administra-
tor; (2) function call consistencies such as call-return
consistency are strictly enforced.
(cid:129) Stack integrity:
(1) malicious code cannot be in-
jected into stack frames belonging to the OS kernel;
(2) For an untrusted extension, manipulating control
data (i.e., function pointers, return addresses) in its
own stack frames cannot subvert control ﬂow integrity
stated above; (3) non-control data (i.e., saved registers,
parameters and variables) and control data in stack
frames owned by OS kernel or other extensions can-
not be corrupted by an untrusted extension.
For practical and usability reasons, the default manda-
tory access control policy of HUKO does not prohibit the
OS kernel from reading information from untrusted exten-
sions, which is different from classic integrity models such
as Biba. However, if there is a need to satisfy this strict in-
tegrity requirement, the ﬂexible mediation and enforcement
mechanism in HUKO can still support system administra-
tors to write policies with appropriate exceptions to enforce
the “no read down” property.
HUKO is designed to be an added-on layer which pro-
vides an enhanced integrity protection for various operating
system kernels with an affordable performance cost. As a
design principle, HUKO relies on as little semantics of any
speciﬁc kernel as possible. On the other side, HUKO is not
the elixir for every kernel security threats. For example,
HUKO is limited in verifying the correctness of function
parameters and general data passed between the OS kernel
and extensions, which could open certain avenues that im-
pact kernel integrity in indirect ways. Also our system does
not prevent the untrusted extension from abusing the privi-
lege granted by the OS kernel in current stage. We discuss
these limitations and possible solutions in Section 6.
This paper is focused on protecting the integrity of OS
kernels. Other security issues, such as attacks on secrecy
(e.g., information leakage) and availability (e.g., interrupt
ﬂooding, abuse of resource) of OS kernels are not in the
scope of this paper. Also, this work concentrates on dealing
with threats from the kernel extension interface, and we as-
sume that the hardware is trusted for the OS kernel. Regard-
ing attacks to the kernel directly from the userspace, HUKO
prevents untrusted kernel extensions from executing user-
level content and prohibits user programs to write kernel
memory. Previous work such as Secvisor [27] provides in-
depth research on protecting the OS kernel from userspace
intrusions using a hypervisor, and we believe that its method
can be effectively integrated with HUKO to achieve a more
comprehensive protection. At last, in HUKO system, the
hypervisor is the trusted computing base which we assume
its integrity is preserved.
3 HUKO Overview
3.1 Design Principles
The following paragraphs describe three major princi-
ples which motivated our research and guided our design
process of the HUKO system.
the kernel
(cid:129) Multi-aspect Protection. The architecture must guar-
antee that
integrity properties stated in
Section 2 are enforced with mandatory protection.
Security-sensitive operations that involve interactions
between untrusted extensions and the OS kernel, in-
cluding memory reference, DMA, control transfers
and stack modiﬁcation, must be mediated and vali-
dated upon mandatory integrity policies.
(cid:129) Performance. The architecture must not have high
performance impact due to mediation, object recon-
struction/tracking or enforcing protection.
(cid:129) Ease-of-Adoption. The architecture should support
multiple commodity operating systems and any un-
modiﬁed legacy kernel extension. The architecture
should not change the semantics of either OS or the
extensions. Also, the architecture should be a layered
approach which requires little deployment efforts.
3.2 Design Overview
HUKO provides a transparent protection environment
for commodity OS kernels in which untrusted kernel ex-
tensions can run with an enhanced protection. In HUKO
system, we name all the kernel objects that are supposed to
be protected by our mechanism security-sensitive objects.
These objects are labeled and tracked by the labeling com-
ponent in HUKO’s hypervisor. Depending on the various
purposes of deploying HUKO integrity protection, security-
sensitive objects can be labeled as 1) the entire kernel code
and data region, or 2) a given set of kernel objects that may
be tampered by attackers to achieve speciﬁc goals, for ex-
ample, hiding a malicious process by manipulating hooks
and process descriptors. To guarantee multi-aspect protec-
tion and generality, in our design, by default we label and
track the entire kernel code and data region as security-
sensitive objects.
The following paragraphs abstractly explain various
challenges we faced in designing the system as well as key
features of HUKO.
Mediation Overhead. Regarding how to achieve the
mandatory access control mechanism, an intuitive way is
to intercept every access to security-sensitive objects, then
to validate whether the access is permitted by the policy or
not. This approach is straightforward and convenient for
out-of-boxed monitoring, however, it is not practical be-
cause the mediation overhead is considerable even if the
number of objects to be monitored is relatively small. We
observed that many security-sensitive objects in the kernel
are highly frequently accessed by operating system kernel
itself. For example, in Linux, task struct is a typical
security-sensitive data object because it can be manipulated
by rootkits to perform process hiding and privilege esca-
lation. On the other hand, task struct is also a cru-
cial accounting and scheduling data structure which would
be modiﬁed several times by the scheduler during each
context switch. Posing mediation on these legal accesses
through an external reference monitor (i.e., VMM) causes
enormous amount of unnecessary privilege transitions (e.g.,
page faults, ring faults and VMEXIT), which result in seri-
ous impact on performance.
1
2
5
6
3
4
7
8
1
2
3
4
6
5
7
8
Figure 1. The protection state transition dia-
gram.
To overcome this limitation, HUKO adopts a design
named subject-aware state transition which divides the sys-
tem workﬂow into multiple protection states. The behavior
of the protection mechanism is determined by the current
protection state, which is further determined by precisely
distinguishing the type of current subject in the guest sys-
tem context. Speciﬁcally, if the current subject is an un-
trusted extension, HUKO does complete mediation on all
accesses to security-sensitive objects in order to protect the
kernel integrity. By contrast, in the case when the OS ker-
nel is executing, HUKO poses minimal interposition on ob-
ject accesses. It only needs to audit control transfer events
that cause a protection state transition. In this way, the to-
tal number of privilege transitions caused by mediation is
signiﬁcantly reduced, which grants HUKO much better me-
diation performance. Table 1 illustrates an example of dif-
ferent protection behaviors that are associated with different
protection states. From it we could see that the number of
events that lead to privilege transitions (presented in grey
cells) is minimized due to the subject-aware state transition
mechanism in HUKO.
Figure 1 is the state diagram which shows the various
protection states of HUKO system as well as the state tran-
sition events. Currently HUKO has four protection states,
which correspond to the OS kernel, trusted extensions, un-