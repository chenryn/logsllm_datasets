  content-disposition: form-data; name="pics"
  Content-type: multipart/mixed, boundary=BbC04y
  --BbC04y
  Content-disposition: attachment; filename="file1.txt"
  Content-Type: text/plain
  ... contents of file1.txt ...
  --BbC04y
  Content-disposition: attachment; filename="file2.gif"
  Content-type: image/gif
  Content-Transfer-Encoding: binary
  ...contents of file2.gif...
  --BbC04y--
  --AaB03x--
```
与上传文件相关的下载文件 **Content-Type: application/octet-stream**  
> Hence:
Content-Type: application/octet-stream  
Content-Disposition: attachment; filename="picture.png"  
Means "I don't know what the hell this is. Please save it as a file, preferably named picture.png".  
Content-Type: image/png  
Content-Disposition: attachment; filename="picture.png"  
Means "This is a PNG image. Please save it as a file, preferably named picture.png".  
Content-Type: image/png  
Content-Disposition: inline; filename="picture.png"  
Means "This is a PNG image. Please display it unless you don't know how to display PNG images. Otherwise, or if the user chooses to save it, we recommend the name picture.png for the file you save it as".  
Of those browsers that recognise inline some would always use it, while others would use it if the user had selected "save link as" but not if they'd selected "save" while viewing (or at least IE used to be like that, it may have changed some years ago).
3.**application/json**  
application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。
```
POST http://www.example.com HTTP/1.1 
Content-Type: application/json;charset=utf-8 
{"title":"test","sub":[1,2,3]}
```
4.**text/xml**  
XML-RPC 协议简单、功能够用，各种语言的实现都有。
```
POST http://www.example.com HTTP/1.1 
Content-Type: text/xml
    examples.getStateName
            41
```
php 在处理不同 post数据方式时的不同点：
- Content-Type 仅在取值为application/x-www-data-urlencoded 和multipart/form-data 两种情况下，PHP才会将http请求数据包中相应的数据 urldecode 后以 keyvalue 形式 填入全局变量$_POST
- 只有Content-Type 为multipart/form-data 的时候，PHP不会将http请求数据包中的相应数据填入php://input，否则其它情况都会。填入的长度，由Content-Length 指定。
- 只有Content-Type为application/x-www-data-urlencoded 时，php://input 数据才跟$_POST 数据相“一致”。也就是说其他情况下 php://input 是原始的字符串，需要经过解析才能进一步使用，比如 application/json (调用 json_decode)。
- php://input 数据总是跟 $HTTP_RAW_POST_DATA 相同，但是php://input 比$HTTP_RAW_POST_DATA 更奏效，且不需要特殊设置php.ini（需要设置php.ini中的always_populate_raw_post_data 值为On，PHP才会把POST 数据填入变量 $http_raw_post_data ）
- PHP会将PATH字段的query_path 部分，urldecode 后填入全局变量$_GET。通常情况下，GET方法提交的http请求，body 为空。
## 六、Http 协议的chunked编码
在 HTTP/1.1 协议中增加了如下关于 chunk 的内容： 
> Faster response for dynamically-generated pages, by supporting chunked encoding, which allows a response to be sent before its total length is known.
对于支持 HTTP/1.1 协议的客户端，要求能够处理以 chunked 形式组织的 response ，具体如下： 
【Chunked Transfer-Encoding】 
如果服务器想要在不知道 response 总体长度的情况下进行应答（就像使 long script output 那样），其需要使用简单的 chunked transfer-encoding 方式，即将完整的 response 拆分成更小的 chunk 后连续发送。你可以很容易辨认出这种类型的 response ，因为其包含了 Transfer-Encoding: chunked 头。所有支持 HTTP/1.1 协议的客户端都必须能够接收并处理 chunked 消息。 
一条 chunked 消息由一组 chunk 构成，随后是由 "0" 构成的行，然后是多个可选的 footer ，最后是空行。每一块 chunk 有两部分构成： 
* 用于表示 chunk 数据长度的、以十六进制表示的、独占一行的数值。其后可能还有可以忽略的分号和额外参数（目前这些内容都未成为标准），以及结束标志 CRLF 。
* 数据本身，以 CRLF 结尾。
上述 chunked response 样子如下： 
```
HTTP/1.1 200 OK
Date: Fri, 31 Dec 1999 23:59:59 GMT
Content-Type: text/plain
Transfer-Encoding: chunked
1a; ignore-stuff-here
abcdefghijklmnopqrstuvwxyz
10
1234567890abcdef
0
some-footer: some-value
another-footer: another-value
[blank line here]
```
需要注意的是，最后一个 footer 后面还需要有空行。当前文本数据的长度是 42 个字节（十六机制 1a + 10），而数据本身为 abcdefghijklmnopqrstuvwxyz1234567890abcdef 。而 footer 要以 header 来看待，就好像它们是直接被放在 response 头部一样。 
chunk 数据可以包含任意二进制数据，并且很可能包含了很大的数据。表明 chunk 长度的 size 值很好被直接使用，但你需要确保程序中正确的忽略掉它们。footer 也很少被使用，但是它们会被用于 checksum 或数字签名的场景中。 
作为对比，下面提供了一个等价于上面 response 的另一个例子，但是没有采用 chunked 编码形式：
``` 
HTTP/1.1 200 OK
Date: Fri, 31 Dec 1999 23:59:59 GMT
Content-Type: text/plain
Content-Length: 42
some-footer: some-value
another-footer: another-value
abcdefghijklmnopqrstuvwxyz1234567890abcdef
```
而对于支持 HTTP/1.1 协议的服务器，同样需要能够接受以 chunked 数据格式发送来的 request，这种request 有时候能作为绕 waf 的手段。 
> Just as HTTP 1.1 clients must accept chunked responses, servers must accept chunked requests (an unlikely scenario, but possible). Servers aren't required to generate chunked messages; they just have to be able to receive them.