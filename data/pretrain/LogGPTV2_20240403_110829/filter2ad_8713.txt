# RMI Bypass Jep290（Jdk8u231）反序列化漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：Hu3sky@360CERT
## 0x01 漏洞简述
随着RMI的进步一发展，RMI上的反序列化攻击手段正逐渐增多，该类漏洞最近正受到愈加广泛的关注。
RMI (Java Remote Method Invocation) 是Java远程方法调用，是一种允许一个 JVM 上的 object 调用另一个
JVM 上 object 方法的机制，在Java RMI 的通信过程中存在反序列化漏洞，攻击者能够利用该漏洞造成代码执行，漏洞等级：高危。
在JDK8u231之前的JDK版本，能够让注册中心反序列化UnicastRef这个类，该类可以发起一个JRMP连接到恶意服务端上，从而在DGC层造成一个反序列化，因为DGC层的filter是在反序列化之后进行设置的，没有起到实际作用，在JDK8u231进行了修复，在DGC层反序列化之前就为InputStream设置了filter，来过滤传入的序列化数据，提高安全性。
国外安全研究人员@An Trinhs发现了一个gadgets利用链，能够直接反序列化UnicastRemoteObject造成反序列化漏洞。
该漏洞的相关技术细节已公开。
对此，360CERT建议广大用户及时将JDK升级到最新版本，下载地址为：[Java SE
Downloads](https://www.oracle.com/java/technologies/javase-downloads.html)
。与此同时，请做好资产自查以及预防工作，以免遭受黑客攻击。
## 0x02 影响版本
  * JDK： constructor = UnicastRemoteObject.class.getDeclaredConstructor(null);
            constructor.setAccessible(true);
            UnicastRemoteObject clz = (UnicastRemoteObject) constructor.newInstance(null);
            Field ssf = UnicastRemoteObject.class.getDeclaredField("ssf");
            ssf.setAccessible(true);
    ssf.set(clz,rmiServerSocketFactory);
然后我们利用Server端进行bind，让注册中心反序列化这个UnicastRemoteObject对象，不过序列化的时候出现了问题，在调用RegistryImpl_Stub.bind的时候，进行writeObject的时候。
如果enableReplace为true。
检测我们要序列化的obj，是否实现Remote/RemoteStub，由于UnicastRemoteObject实现了Remote，没有实现RemoteStub，于是会进入判断，就会替换我们的obj，以至于反序列化的时候不能还原我们构造的类。
所以，需要把enableReplace改为false。这里可以自己实现重写RegistryImpl_Stub，将bind方法进行修改，在序列化之前，通过反射，把enableReplace值进行修改。
  4. 恶意服务端只需要利用ysoserial.exploit.JRMPListener开启，监听到来自客户端的请求之后，就会向客户端发送byte值2，并序列化恶意类，最终让客户端反序列化恶意类。 
### jdk8u241中的修复
在jdk8u241进行了修复，在调用UnicastRef.invoke之前，做了一个检测。
声明方法的类，必须要实现Remote接口，然而这里的RMIServerSocketFactory并没有实现，于是无法进入到invoke方法，直接抛出错误。
## 0x04 时间线
2020-07-24 360-CERT 发布分析报告
## 0x05 参考链接
  1. [AN TRINHS RMI REGISTRY BYPASS](https://mogwailabs.de/blog/2020/02/an-trinhs-rmi-registry-bypass/)