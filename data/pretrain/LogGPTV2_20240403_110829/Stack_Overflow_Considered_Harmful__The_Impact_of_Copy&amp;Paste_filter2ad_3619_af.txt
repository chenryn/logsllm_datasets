B. Developer Studies
The bulk of identiﬁed security issues are attributed to devel-
opers that are poorly skilled in security-related programming.
Core reasons for these issues were identiﬁed in a developer
study conducted by Fahl et al. [17]: developers that customized
TLS code disabled TLS functionality during testing and forgot
to re-enable it for production, and they did not understand the
security guarantees provided by and the security consequences
imposed by improper TLS use. Similar root causes were
reported by Georgiev et al. [47], showing that developers were
confused by the many parameters, options and defaults of TLS
APIs. Both papers explicitly mentioned Stack Overﬂow as a
platform that provides various solutions for ”circumventing”
TLS-related error messages by disabling TLS features. Acar
et al. [42] conducted a laboratory study to investigate the
impact of information sources on code security and found
that developers using Stack Overﬂow for looking up security-
related issues produced the most functional but also the most
insecure code, whereas participants using Android’s ofﬁcial
documentation produced more secure but less functional code.
Treude et al. [48] report that developer discussion platforms
like Stack Overﬂow are very effective at code reviews and
conceptual questions. Vasilescu et al. [49] investigate the
interplay of Stack Overﬂow activity and development process
on GitHub. They conclude that knowledge of the GitHub
community ﬂows into Stack Overﬂow. In turn, this knowledge
increases the number of commits of Stack Overﬂow users on
GitHub. Vasquez et al. [50] created an algorithm to link Stack
Overﬂow questions with Android classes detected in source
code. They found that Android developer question counts peak
on Stack Overﬂow immediately after APIs receive updates that
modify their behavior.
D. Detection of Code Reusage in Apps
Jiang et al. [39] compared the similarity of abstract syntax
trees to detect code duplicates in source code. Hanna et
al. [38] created k-gram streams from bytecode basic blocks.
Each k-gram deﬁnes a program feature. A code snippet and
an application is represented by the binary feature vector
that is created using universal hashing over k-grams. They
decide if a code snippet is contained in an app by dividing
the number of common features by the number of features
of the code snippet. While their approach works in benign
scenarios, it is not robust against trivial code modiﬁcations
(e. g. reordering of instructions or renaming of variables).
Crussell et al. [35], [36] detect code clones by searching for
subgraph isomophisms of program dependency graphs (PDG).
Their approach is able to detect code fragments that perform
similar computations through different syntactic variants [51]
and robust against trivial modiﬁcations, constant renaming
and method/class restructuring. Chen et al. [51] use Control
Flow Graphs (CFG) in combination with opcodes to detect
code clones in Android applications. They deﬁne a geometry
characteristic called centroid to embed a CFG into vector
space.
IX. COUNTERMEASURES
On the one hand, there is a signiﬁcant amount of secure code
on Stack Overﬂow that ﬁnds its way into Android applications.
The question is how we can reinforce this ﬂow that surely
is beneﬁcial for the Android ecosystem. On the other hand,
we also observed a vast amount of highly insecure code
snippets. How can we prevent insecure code snippets from
being copied?
In Section VII-D we showed that the deployed scoring
system of Stack Overﬂow is not ﬁne-grained enough to mirror
security concerns provided by the community. This suggests
a scoring system that is purely focused on security aspects.
However, a ﬁne-grained scoring system will possibly also
include equitable aspects such as code stability, efﬁciency, or
audibility. This might impact the overall usability of Stack
Overﬂow and we fully understand the decision for just one
score for each post.
Instead of expanding (and maybe complicating) the scoring
system of posts, we propose another solution: Classiﬁcation of
134
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
challenging ﬁeld of work for future usable security and privacy
researchers.
ACKNOWLEDGEMENTS
The authors would like to thank Siddharth Subrama-
nian for his strong support with JavaBaker and the anony-
mous reviewers for
their helpful comments. This work
was supported in part by the German Ministry for Educa-
tion and Research (BMBF) through funding for the Center
for IT-Security, Privacy and Accountability (CISPA) (FKZ:
16KIS0344,16KIS0656)
REFERENCES
[1] A. Porter Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
Permissions Demystiﬁed,” in Proceedings of the 18th ACM Conference
on Computer and Communication Security. ACM, 2011.
[2] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumg¨artner, and
B. Freisleben, “Why Eve and Mallory love Android: An analysis of
Android SSL (in) security,” in Proc. 19th ACM Conference on Computer
and Communication Security (CCS’12). ACM, 2012.
[3] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An Em-
pirical Study of Cryptographic Misuse in Android Applications,” in
Proceedings of the 2013 ACM SIGSAC Conference on Computer &
Communications Security. ACM, 2013.
[4] Oracle, “Java SE 8,” http://www.oracle.com/technetwork/java/javase/
tech/index-jsp-136007.html.
“Libraries
Zhitnitsky,
[5] A.
on GitHub,”
http://blog.takipi.com/
we-analyzed-60678-libraries-on-github-here-are-the-top-100, 2015.
[6] T. Duong and J. Rizzo, “Cryptography in the Web: The Case of
Cryptographic Design Flaws in ASP.NET,” in 2011 IEEE Symposium
on Security and Privacy, 2011.
[7] A. Dey and S. Weis, “Keyczar: A Cryptographic Toolkit,” 2008.
[8] jasypt, “Java Simpliﬁed Encryption,” http://www.jasypt.org, 2014.
[9] D. Gonz´alez, O. Esparza, J. L. Mu˜noz, J. Alins, and J. Mata, “Evaluation
of Cryptographic Capabilities for the Android Platform,” in Future
Network Systems and Security: First International Conference, FNSS
2015, Paris, France, June 11-13, 2015, Proceedings, 2015.
[10] B. Dagenais and L. Hendren, “Enabling Static Analysis for Partial Java
Programs,” in Proceedings of the 23rd ACM SIGPLAN Conference on
Object-oriented Programming Systems Languages and Applications, ser.
OOPSLA ’08, 2008.
[11] S. Subramanian, L. Inozemtseva, and R. Holmes, “Live API Documen-
tation,” in Proceedings of the 36th International Conference on Software
Engineering, ser. ICSE, 2014.
[12] Y. Sheffer and R. Holz, “Recommendations for Secure Use of Transport
Layer Security (TLS) and Datagram Transport Layer Security (DTLS),”
Tech. Rep., 2015.
[13] B. Kaliski, “PKCS #5: Password-Based cryptography speciﬁcation ver-
sion 2.0,” Internet Engineering Task Force, RFC, 2000.
[14] J. Manger, “A Chosen Ciphertext Attack on RSA Optimal Asymmetric
Encryption Padding (OAEP) As Standardized in PKCS #1 V2.0,” in
Proceedings of the 21st Annual International Cryptology Conference on
Advances in Cryptology, ser. CRYPTO, 2001.
[15] E. Barker and A. Roginsky, “Transitions: Recommendation for Transi-
tioning the Use of Cryptographic Algorithms and Key Lengths,” http://
nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf.
[16] D. Bleichenbacher, “Chosen Ciphertext Attacks Against Protocols Based
on the RSA Encryption Standard PKCS #1,” in Proceedings of the 18th
Annual International Cryptology Conference on Advances in Cryptology,
ser. CRYPTO ’98, 1998.
[17] S. Fahl, M. Harbach, H. Perl, M. Koetter, and M. Smith, “Rethinking
ssl development in an appiﬁed world,” in Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security, ser. CCS
’13. ACM, 2013, pp. 49–60.
[18] M. Oltrogge, Y. Acar, S. Dechand, M. Smith, and S. Fahl, “To Pin or Not
to Pin—Helping App Developers Bullet Proof Their TLS Connections,”
in Proc. 24th USENIX Security Symposium (SEC’15).
USENIX
Association, 2015.
[19] S. Turner and T. Polk, “Prohibiting Secure Sockets Layer (SSL) Version
code snippets into secure and insecure is fully automated in our
approach, which allows us to implement a browser-plugin that
directly indicates security issues by real-time classiﬁcation of
snippets. This includes both, snippets copied to the clipboard
and snippets parsed on the actually watched discussion thread.
Such a browser plugin is not limited to Stack Overﬂow, but
would work without much effort for any source of snippets in
the web. We are currently actively developing such a browser
plugin for Mozilla Firefox and Chrome.
X. CONCLUSION
We present, implement and evaluate the ﬁrst systematic and
fully automated processing pipeline for measuring the ﬂow
of secure and insecure code snippets from Stack Overﬂow
into Android applications available at Google Play. First, we
scanned public discussion threads for code snippets ﬁltering
out the security-relevant subset using a robust oracle-based
approach. Next, we applied machine learning classiﬁcation to
receive a security scoring for code snippets. By constructing
an abstract representation in form of a program dependency
graph for each snippet, we detect their presence in compiled
Android applications.
We evaluate the performance of our approach by searching
for security-related code snippets from Stack Overﬂow in
1,305,820 Android applications available at Google Play. We
show that 196,403 (15%) of the 1.3 million Android applica-
tions contain vulnerable code snippets that were very likely
copied from Stack Overﬂow (cf. Section VII-E). We detected
73,839 applications (cf. SectionVII-C8) using a secure code
snippet from Stack Overﬂow. By analyzing metadata, we
gain insight into developer behavior: From typical post up-
voting trends and popularity of insecure code to favoured
security libraries of speciﬁc domains (such as ﬁnance and
gaming) we are able to draw interesting new conclusions on
behavior of the Android developer community. We expect
that a future systematic investigation augmenting metadata
of security-related code snippets with metadata of affected
Android applications will serve as a rich source of new and
interesting research questions.
Answering the original research question whether Stack
Overﬂow should be considered harmful is difﬁcult. Although
we cannot guarantee that code snippets we detected originate
from Stack Overﬂow with 100% certainty, the fact that Stack
Overﬂow is the most popular Q&A site for Android developers
and many of them heavily rely on the posted discussions and
solutions [42] suggests Stack Overﬂow’s signiﬁcant responsi-
bility. Luckily, there is hope on the horizon. We presented
a fully automated solution to detect security-related code
snippets posted on Stack Overﬂow and analyze their security.
Stack Overﬂow could implement our or a similar approach
and either remove insecure code snippets entirely or add clear
security warnings to prevent developers from copying and
pasting those snippets into their applications. Identifying the
most effective way of dealing with insecure code snippets
and communicating risks to developers is an interesting and
2.0,” 2011.
135
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply. 
[20] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3,”
Tech. Rep., 2016.
[21] T. Dierks and E. Rescorla, “The Transport Layer Security (TLS) Protocol
Version 1.2,” Tech. Rep., 2008.
[22] S. Vaudenay, “Security Flaws Induced by CBC Padding - Applications to
SSL, IPSEC, WTLS ...” in Proceedings of the International Conference
on the Theory and Applications of Cryptographic Techniques: Advances
in Cryptology, ser. EUROCRYPT ’02, 2002.
[23] J. Kelsey, B. Schneier, and D. Wagner, “Related-key Cryptanalysis of
3-WAY, Biham-DES, CAST, DES-X, NewDES, RC2, and TEA,” in
Proceedings of the First International Conference on Information and
Communication Security, ser. ICICS ’97, 1997.
[24] N. J. AlFardan, D. J. Bernstein, K. G. Paterson, B. Poettering, and J. C.
Schuldt, “On the Security of RC4 in TLS.” in Usenix Security, 2013.
[25] S. Lucks, “Attacking Triple Encryption,” in Fast Software Encryption:
5th International Workshop, FSE’ 98 Paris, France, March 23–25, 1998
Proceedings, S. Vaudenay, Ed., 1998.
[26] S. Vaudenay, “On the Weak Keys of Blowﬁsh,” in Fast Software
Encryption, 1996.
[27] O. Kara and C. Manap, “A New Class of Weak Keys for Blowﬁsh,” in
Fast Software Encryption, 2007.
[28] “Java Security and Related Topics,” http://armoredbarista.blogspot.de/
2012/09/rsaecb-how-block-operation-modes-and.html.
[29] D. Giry, “Keylength,” https://www.keylength.com/en/4/.
[30] SANS Institute, “Four Attacks on OAuth - How to Secure Your OAuth
https://www.sans.org/reading-room/whitepapers/
Implementation,”
application/attacks-oauth-secure-oauth-implementation-33644.
[31] “Android Developers,” http://android-developers.blogspot.de/2013/02/
using-cryptography-to-store-credentials.html.
[32] B. Sch¨olkopf, “Statistical Learning and Kernel Methods,” Microsoft
Research, Tech. Rep., 2000.
[33] H. C. Wu, R. W. P. Luk, K. F. Wong, and K. L. Kwok, “Interpreting
TF-IDF Term Weights As Making Relevance Decisions,” ACM Trans.
Inf. Syst., 2008.
[34] Google Inc., “Enjarify,” https://github.com/google/enjarify.
[35] J. Crussell, C. Gibler, and H. Chen, “Attack of the Clones: Detecting
Cloned Applications on Android Markets,” in ESORICS 2012: 17th
European Symposium on Research in Computer Security, Pisa, Italy,
September 10-12, 2012. Proceedings, 2012.
[36] ——, “AnDarwin: Scalable Detection of Semantically Similar An-
droid Applications,” in ESORICS 2013: 18th European Symposium on
Research in Computer Security, Egham, UK, September 9-13, 2013.
Proceedings, 2013.
[37] K. Riesen and H. Bunke, “Graph Classiﬁcation Based on Vector Space
Embedding,” International Journal of Pattern Recognition and Artiﬁcial
Intelligence, 2009.
[38] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and D. Song, “Jux-
tapp: A Scalable System for Detecting Code Reuse Among Android
Applications,” in Proceedings of the 9th International Conference on
Detection of Intrusions and Malware, and Vulnerability Assessment, ser.
DIMVA’12, 2013.
[39] L. Jiang, G. Misherghi, Z. Su, and S. Glondu, “DECKARD: Scalable
and Accurate Tree-Based Detection of Code Clones,” in Proceedings of
the 29th International Conference on Software Engineering, ser. ICSE
’07, 2007.
[40] L. I. Smith, “A Tutorial on Principal Components Analysis,” Cornell
University, USA, Tech. Rep., 2002.
[41] J. Makhoul, F. Kubala, R. Schwartz, and R. Weischedel, “Performance
Measures For Information Extraction,” in In Proceedings of DARPA
Broadcast News Workshop, 1999.
[42] Y. Acar, M. Backes, S. Fahl, D. Kim, M. L. Mazurek, and C. Stransky,
“You Get Where You’re Looking For: The Impact of Information
Sources on Code Security,” IEEE Symposium on Security and Privacy
(SP), 2016.
[43] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and
A. N. Sheth, “TaintDroid: An Information-Flow Tracking System for
Realtime Privacy Monitoring on Smartphones,” in Proc. 9th Usenix Sym-
posium on Operating Systems Design and Implementation (OSDI’10).
USENIX Association, 2010.
[44] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing Inter-
application Communication in Android,” in Proceedings of
the 9th
international conference on Mobile systems, applications, and services.
ACM, 2011.
[45] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A Study of
Android Application Security,” in Proceedings of the 20th USENIX
Conference on Security, Aug. 2011.
[46] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna,
“Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading
in Android Applications,” in Proc. 21st Annual Network and Distributed
System Security Symposium (NDSS’14). The Internet Society, 2014.
[47] M. Georgiev, S.
Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov, “The Most Dangerous Code in the World: Validating SSL
Certiﬁcates in Non-Browser Software,” in Proceedings of the 2012 ACM
Conference on Computer and Communications security. ACM Press,
Oct. 2012.
[48] C. Treude, O. Barzilay, and M.-A. Storey, “How Do Programmers
Ask and Answer Questions on the Web?: Nier track,” in Software
Engineering (ICSE), 2011 33rd International Conference on.
IEEE,
2011.
[49] B. Vasilescu, V. Filkov, and A. Serebrenik, “StackOverﬂow and
GitHub: Associations Between Software Development and Crowd-
sourced Knowledge,” in Social Computing (SocialCom), 2013 Interna-
tional Conference on.
IEEE, 2013.
[50] M. Linares-V´asquez, G. Bavota, M. Di Penta, R. Oliveto, and D. Poshy-
vanyk, “How Do API Changes Trigger Stack Overﬂow Discussions? A
Study on the Android SDK,” in proceedings of the 22nd International
Conference on Program Comprehension. ACM, 2014.
[51] K. Chen, P. Liu, and Y. Zhang, “Achieving Accuracy and Scalability
Simultaneously in Detecting Application Clones on Android Markets,”
in Proceedings of the 36th International Conference on Software Engi-
neering, ser. ICSE 2014. ACM, 2014.
APPENDIX
Listing 1: Empty HostnameVeriﬁer - Accepts all hostnames
@Override
public boolean verify(String hostname, SSLSession
session) {
return true;
}
Listing 2: Sample of static IVs and Keys in Snippets
byte[] rawSecretKey = {0x00, 0x00, 0x00, 0x00, 0
x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
, 0x00, 0x00, 0x00, 0x00};
String iv = "00000000";
byte[] iv = new byte[] { 0x0, 0x1, 0x2, 0x3, 0x4,
0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD,
0xE, 0xF };
Listing 3: String used to replace the random number
generators seed
byte[] keyStart = "this is a key".getBytes();
SecureRandom sr =
SecureRandom.getInstance("SHA1PRNG");
sr.setSeed(keyStart);
Listing 4: Top offending snippet
TrustManager tm = new X509TrustManager() {
public void checkClientTrusted(
X509Certificate[] chain, String authType)
throws CertificateException { }
public void checkServerTrusted(
X509Certificate[] chain, String authType)
throws CertificateException { }
public X509Certificate[] getAcceptedIssuers()
{ return null; }
};
136
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:20 UTC from IEEE Xplore.  Restrictions apply.