### B. Developer Studies

A significant number of identified security issues in software development are attributed to developers with inadequate skills in security-related programming. Fahl et al. [17] conducted a study that highlighted several core reasons for these issues. For instance, developers who customized TLS (Transport Layer Security) code often disabled TLS functionality during testing and failed to re-enable it for production. Additionally, they did not fully understand the security guarantees provided by TLS or the consequences of improper usage. Similar root causes were reported by Georgiev et al. [47], who found that developers were often confused by the numerous parameters, options, and defaults of TLS APIs.

Both studies explicitly mentioned Stack Overflow as a platform where developers frequently seek solutions to "circumvent" TLS-related error messages by disabling TLS features. Acar et al. [42] conducted a laboratory study to investigate the impact of information sources on code security. They found that developers using Stack Overflow for security-related issues produced the most functional but also the most insecure code, while those using Androidâ€™s official documentation produced more secure but less functional code.

Treude et al. [48] reported that developer discussion platforms like Stack Overflow are highly effective for code reviews and conceptual questions. Vasilescu et al. [49] explored the interplay between Stack Overflow activity and the development process on GitHub. Their findings suggest that knowledge from the GitHub community flows into Stack Overflow, which in turn increases the number of commits made by Stack Overflow users on GitHub. Vasquez et al. [50] developed an algorithm to link Stack Overflow questions with Android classes detected in source code. They observed that the number of Android developer questions on Stack Overflow peaks immediately after API updates that modify their behavior.

### D. Detection of Code Reuse in Apps

Jiang et al. [39] compared the similarity of abstract syntax trees to detect code duplicates in source code. Hanna et al. [38] created k-gram streams from bytecode basic blocks, where each k-gram defines a program feature. A code snippet and an application are represented by a binary feature vector created using universal hashing over k-grams. They determine if a code snippet is contained in an app by dividing the number of common features by the number of features in the code snippet. While this approach works well in benign scenarios, it is not robust against trivial code modifications, such as reordering instructions or renaming variables.

Crussell et al. [35, 36] detect code clones by searching for subgraph isomorphisms in program dependency graphs (PDGs). Their method can identify code fragments that perform similar computations through different syntactic variants and is robust against trivial modifications, constant renaming, and method/class restructuring. Chen et al. [51] use Control Flow Graphs (CFGs) in combination with opcodes to detect code clones in Android applications. They define a geometric characteristic called the centroid to embed a CFG into vector space.

### IX. Countermeasures

On one hand, there is a significant amount of secure code on Stack Overflow that finds its way into Android applications. The challenge is to reinforce this beneficial flow for the Android ecosystem. On the other hand, we have also observed a large number of highly insecure code snippets. How can we prevent these insecure code snippets from being copied?

In Section VII-D, we showed that the current scoring system on Stack Overflow is not fine-grained enough to reflect security concerns raised by the community. This suggests the need for a scoring system that focuses specifically on security aspects. However, a fine-grained scoring system might also include equitable aspects such as code stability, efficiency, or audibility, which could impact the overall usability of Stack Overflow. We understand the decision to maintain a single score for each post.

Instead of expanding and potentially complicating the scoring system, we propose another solution: the classification of code snippets into secure and insecure categories. Our approach is fully automated, allowing us to implement a browser plugin that indicates security issues in real-time by classifying snippets. This includes both snippets copied to the clipboard and those parsed from the currently viewed discussion thread. Such a browser plugin is not limited to Stack Overflow and can be easily adapted for any web-based source of code snippets. We are currently developing such a plugin for Mozilla Firefox and Chrome.

### X. Conclusion

We present, implement, and evaluate the first systematic and fully automated processing pipeline for measuring the flow of secure and insecure code snippets from Stack Overflow into Android applications available on Google Play. First, we scanned public discussion threads for code snippets, filtering out the security-relevant subset using a robust oracle-based approach. Next, we applied machine learning classification to receive a security score for each code snippet. By constructing an abstract representation in the form of a program dependency graph for each snippet, we detect their presence in compiled Android applications.

We evaluated our approach by searching for security-related code snippets from Stack Overflow in 1,305,820 Android applications available on Google Play. Our results show that 196,403 (15%) of the 1.3 million Android applications contain vulnerable code snippets likely copied from Stack Overflow (cf. Section VII-E). We also detected 73,839 applications (cf. Section VII-C8) using a secure code snippet from Stack Overflow. By analyzing metadata, we gain insights into developer behavior, such as typical post upvoting trends, the popularity of insecure code, and the favored security libraries in specific domains (e.g., finance and gaming). This allows us to draw interesting new conclusions about the behavior of the Android developer community. We expect that a future systematic investigation augmenting metadata of security-related code snippets with metadata of affected Android applications will serve as a rich source of new and interesting research questions.

Answering the original research question of whether Stack Overflow should be considered harmful is challenging. Although we cannot guarantee with 100% certainty that the code snippets we detected originated from Stack Overflow, the fact that it is the most popular Q&A site for Android developers and many rely heavily on posted discussions and solutions [42] suggests a significant responsibility. Fortunately, there is hope. We presented a fully automated solution to detect security-related code snippets posted on Stack Overflow and analyze their security. Stack Overflow could implement our or a similar approach, either removing insecure code snippets entirely or adding clear security warnings to prevent developers from copying and pasting them into their applications. Identifying the most effective way to deal with insecure code snippets and communicating risks to developers is an interesting and challenging field of work for future usable security and privacy researchers.