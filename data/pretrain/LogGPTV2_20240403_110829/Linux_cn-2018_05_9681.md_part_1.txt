---
author: Trey Hunner
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 6880
date: '2018-05-26 08:04:00'
editorchoice: false
excerpt: 在这篇文章中，我们将深入探讨 Python 的 for 循环来看看它们在底层如何工作，以及为什么它们会按照它们的方式工作。
fromurl: https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python
id: 9681
islctt: true
largepic: /data/attachment/album/201805/26/080352ai3a6qticbnnbb8o.jpg
permalink: /article-9681-1.html
pic: /data/attachment/album/201805/26/080352ai3a6qticbnnbb8o.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在这篇文章中，我们将深入探讨 Python 的 for 循环来看看它们在底层如何工作，以及为什么它们会按照它们的方式工作。
tags:
- Python
- 循环
- 迭代
thumb: false
title: 更深入的理解 Python 中的迭代
titlepic: true
translator: MjSeven
updated: '2018-05-26 08:04:00'
---
> 
> 深入探讨 Python 的 `for` 循环来看看它们在底层如何工作，以及为什么它们会按照它们的方式工作。
> 
> 
> 
![](/data/attachment/album/201805/26/080352ai3a6qticbnnbb8o.jpg)
Python 的 `for` 循环不会像其他语言中的 `for` 循环那样工作。在这篇文章中，我们将深入探讨 Python 的 `for` 循环来看看它们在底层如何工作，以及为什么它们会按照它们的方式工作。
### 循环的问题
我们将通过看一些“陷阱”开始我们的旅程，在我们了解循环如何在 Python 中工作之后，我们将再次看看这些问题并解释发生了什么。
#### 问题 1：循环两次
假设我们有一个数字列表和一个生成器，生成器会返回这些数字的平方：
```
>>> numbers = [1, 2, 3, 5, 7]
>>> squares = (n**2 for n in numbers)
```
我们可以将生成器对象传递给 `tuple` 构造器，从而使其变为一个元组：
```
>>> tuple(squares)
(1, 4, 9, 25, 49)
```
如果我们使用相同的生成器对象并将其传给 `sum` 函数，我们可能会期望得到这些数的和，即 `88`。
```
>>> sum(squares)
0
```
但是我们得到了 `0`。
#### 问题 2：包含的检查
让我们使用相同的数字列表和相同的生成器对象：
```
>>> numbers = [1, 2, 3, 5, 7]
>>> squares = (n**2 for n in numbers)
```
如果我们询问 `9` 是否在 `squares` 生成器中，Python 将会告诉我们 9 在 `squares` 中。但是如果我们再次询问相同的问题，Python 会告诉我们 9 不在 `squares` 中。
```
>>> 9 in squares
True
>>> 9 in squares
False
```
我们询问相同的问题两次，Python 给了两个不同的答案。
#### 问题 3 ：拆包
这个字典有两个键值对：
```
>>> counts = {'apples': 2, 'oranges': 1}
```
让我们使用多个变量来对这个字典进行拆包：
```
>>> x, y = counts
```
你可能会期望当我们对这个字典进行拆包时，我们会得到键值对或者得到一个错误。
但是解包字典不会引发错误，也不会返回键值对。当你解包一个字典时，你会得到键：
```
>>> x
'apples'
```
### 回顾：Python 的 for 循环
在我们了解一些关于这些 Python 片段的逻辑之后，我们将回到这些问题。
Python 没有传统的 `for` 循环。为了解释我的意思，让我们看一看另一种编程语言的 `for` 循环。
这是一种传统 C 风格的 `for` 循环，用 JavaScript 编写：
```
let numbers = [1, 2, 3, 5, 7];
for (let i = 0; i >> numbers = [1, 2, 3, 5, 7]
>>> coordinates = (4, 5, 7)
>>> words = "hello there"
```
序列是可迭代的，它有一些特定的特征集。它们可以从 `0` 开始索引，以小于序列的长度结束，它们有一个长度并且它们可以被切分。列表，元组，字符串和其他所有序列都是这样工作的。
```
>>> numbers[0]
1
>>> coordinates[2]
7
>>> words[4]
'o'
```
Python 中很多东西都是可迭代的，但不是所有可迭代的东西都是序列。集合、字典、文件和生成器都是可迭代的，但是它们都不是序列。
```
>>> my_set = {1, 2, 3}
>>> my_dict = {'k1': 'v1', 'k2': 'v2'}
>>> my_file = open('some_file.txt')
>>> squares = (n**2 for n in my_set)
```
因此，任何可以用 `for` 循环遍历的东西都是可迭代的，序列只是一种可迭代的类型，但是 Python 也有许多其他种类的迭代器。
### Python 的 for 循环不使用索引
你可能认为，Python 的 `for` 循环在底层使用了索引进行循环。在这里我们使用 `while` 循环和索引手动遍历：
```
numbers = [1, 2, 3, 5, 7]
i = 0
while i >> fruits = {'lemon', 'apple', 'orange', 'watermelon'}
>>> i = 0
>>> while i ", line 2, in 
TypeError: 'set' object does not support indexing
```
集合不是序列，所以它们不支持索引。
我们不能使用索引手动对 Python 中的每一个迭代对象进行遍历。对于那些不是序列的迭代器来说，这是行不通的。
### 迭代器驱动 for 循环
因此，我们已经看到，Python 的 `for` 循环在底层不使用索引。相反，Python 的 `for` 循环使用**迭代器**。
迭代器就是可以驱动可迭代对象的东西。你可以从任何可迭代对象中获得迭代器，你也可以使用迭代器来手动对它的迭代进行遍历。
让我们来看看它是如何工作的。
这里有三个可迭代对象：一个集合，一个元组和一个字符串。
```
>>> numbers = {1, 2, 3, 5, 7}
>>> coordinates = (4, 5, 7)
>>> words = "hello there"
```
我们可以使用 Python 的内置 `iter` 函数来访问这些迭代器，将一个迭代器传递给 `iter` 函数总会给我们返回一个迭代器，无论我们正在使用哪种类型的迭代器。
```
>>> iter(numbers)
>>> iter(coordinates)
>>> iter(words)
```
一旦我们有了迭代器，我们可以做的事情就是通过将它传递给内置的 `next` 函数来获取它的下一项。
```
>>> numbers = [1, 2, 3]
>>> my_iterator = iter(numbers)
>>> next(my_iterator)
1
>>> next(my_iterator)
2
```
迭代器是有状态的，这意味着一旦你从它们中消耗了一项，它就消失了。
如果你从迭代器中请求 `next` 项，但是其中没有更多的项了，你将得到一个 `StopIteration` 异常：
```
>>> next(my_iterator)
3
>>> next(my_iterator)
Traceback (most recent call last):
  File "", line 1, in 
StopIteration
```
所以你可以从每个迭代中获得一个迭代器，迭代器唯一能做的事情就是用 `next` 函数请求它们的下一项。如果你将它们传递给 `next`，但它们没有下一项了，那么就会引发 `StopIteration` 异常。