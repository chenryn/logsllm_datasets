title:C3PO: Large-Scale Study Of Covert Monitoring of C&amp;C Servers
via Over-Permissioned Protocol Infiltration
author:Jonathan Fuller and
Ranjita Pai Kasturi and
Amit Sikder and
Haichuan Xu and
Berat Arik and
Vivek Verma and
Ehsan Asdar and
Brendan Saltaformaggio
C3PO: Large-Scale Study of Covert Monitoring of C&C Servers
via Over-Permissioned Protocol Infiltration
Jonathan Fuller, Ranjita Pai Kasturi, Amit Sikder, Haichuan Xu, Berat Arik
Vivek Verma, Ehsan Asdar, Brendan Saltaformaggio
Georgia Institute of Technology
ABSTRACT
Current techniques to monitor botnets towards disruption or take-
down are likely to result in inaccurate data gathered about the
botnet or be detected by C&C orchestrators. Seeking a covert and
scalable solution, we look to an evolving pattern in modern malware
that integrates standardized over-permissioned protocols, exposing
privileged access to C&C servers. We implement techniques to
detect and exploit these protocols from over-permissioned bots
toward covert C&C server monitoring. Our empirical study of 200k
malware captured since 2006 revealed 62,202 over-permissioned
bots (nearly 1 in 3) and 443,905 C&C monitoring capabilities, with
a steady increase of over-permissioned protocol use over the last
15 years. Due to their ubiquity, we conclude that even though
over-permissioned protocols allow for C&C server infiltration, the
efficiency and ease of use they provide continue to make them
prevalent in the malware operational landscape. This paper presents
C3PO, a pipeline that enables our study and empowers incident
responders to automatically identify over-permissioned protocols,
infiltration vectors to spoof bot-to-C&C communication, and C&C
monitoring capabilities that guide covert monitoring post infiltra-
tion. Our findings suggest the over-permissioned protocol weak-
ness provides a scalable approach to covertly monitor C&C servers,
which is a fundamental enabler of botnet disruptions and take-
downs.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation;
KEYWORDS
Malware; Botnets; Covert Infiltration; Symbolic Execution
ACM Reference Format:
Jonathan Fuller, Ranjita Pai Kasturi, Amit Sikder, Haichuan Xu, Berat Arik
and Vivek Verma, Ehsan Asdar, Brendan Saltaformaggio. 2021. C3PO: Large-
Scale Study of Covert Monitoring of C&C Servers via Over-Permissioned
Protocol Infiltration. In Proceedings of Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security, Virtual Event, Repub-
lic of Korea, November 15–19, 2021 (CCS ’21), 14 pages.
https://doi.org/10.1145/3460120.3484537
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484537
1 INTRODUCTION
Botnet disruptions and takedowns are driven by Command and
Control (C&C) server monitoring before any action is taken and
after to gauge success. This means that disruption or takedown
attempts are not only provably necessary, but must be targeted
and effective [1]–[9]. Modern approaches can be categorized as
passive or active monitoring. Passive monitoring (e.g., sensor node
injection) is coarse-grained and may not give accurate insights into
the botnet [10], [11], i.e., the number and location of the victims
and the extent of damages incurred. It also requires a full reverse
engineering effort to maintain sensor nodes making this approach
not widely used [11]. Therefore, active monitoring is the preferred
approach [1], [10], generally providing better insights into botnet
operations. However, active monitoring techniques, including re-
mote penetration testing [12]–[16] and domain seizure [1], [3]–[6],
[17], are noisy making them easily detectable. Seeking a better so-
lution, this research proposes that standard protocols, which are
increasingly used by botnets, can be leveraged for general and covert
C&C server monitoring.
In previous botnet disruption and takedown attempts, authori-
ties first monitored the C&C server to prove malware as the catalyst
for incurred damages before legal permission was granted for coun-
teraction [18]. Yet, accurate monitoring goes beyond determining
the legality of counteraction. For example, to protect the 2020 elec-
tion, Microsoft took down 120 of 128 Trickbot C&C servers [19].
Accurately identifying C&C servers pre-takedown (profiling), then
tracking successes post takedown (validation), required an in-depth
understanding of the peers in the botnet, C&C server locations, and
weaknesses to leverage for botnet disruption. Therefore, successful
monitoring must result in accurate, legally-admissible information
gathered during profiling and remain covert to avoid discovery by
C&C orchestrators, prompting defensive evasion or hardening [11],
[20], [21]. An ideal solution should provide authorities with a means
to access the C&C server under the guise of normal bot operation.
As the end-host agents of a C&C orchestrator, bots are entrusted
with C&C server access. In fact, attackers are entirely dependent
on the information exfiltrated by bots to gain situational aware-
ness in a victim’s network. To enable command and control, bots
use standard protocols for file transfer, data storage, and message-
based communication. However, many standard protocols are over-
permissioned, meaning that they provide feature-rich and unfet-
tered access to the server beyond the subset of features implemented
by a given client. A similar trend has been observed in benign soft-
ware where over-permissioned client-side protocols lead to unau-
thorized server access [22]–[25]. This prompted our key insight:
over-permissioned protocols combined with the trust C&C servers
place in their bots expose a scalable opportunity for covert monitoring
of C&C servers through protocol infiltration.
Session 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3352To explore this insight, a systematic study is needed to iden-
tify the evolution of over-permissioned protocol use in malware.
Moreover, to conduct such a study, the analysis must be scalable,
reproducible, and provide the requisite information to covertly mon-
itor C&C servers through over-permissioned protocol infiltration.
The study must expose over-permissioned protocols, how they are
being used, and the associated levels of access and recoverable data
on the C&C server. Finally, an automated pipeline must be made
available to enable the authorities to take action on these common
malware weaknesses in future botnet outbreaks.
We turned our attention to how the authorities could recover
C&C server access privileges from over-permissioned bots (bots
using over-permissioned protocols) allowing them to spoof bot-to-
C&C communication. To this end, we designed and implemented
C3PO1, an automated memory-image-based symbolic analysis mea-
surement pipeline. C3PO analyzes a malware memory image to
identify (1) over-permissioned protocols, (2) infiltration vectors (i.e.,
authentication information to spoof bot-to-C&C communication),
and (3) C&C monitoring capabilities (i.e., capabilities in the end-
host bot that reveal the C&C server’s composition and content to
guide covert monitoring post infiltration).
Through our collaboration with Netskope, the leading Secure
Access Service Edge (SASE) provider, which provides cloud secu-
rity and networking to more than 30% of the Fortune 100, we used
C3PO to study the evolution of over-permissioned protocol use
in 200k malware spanning back 15 years. C3PO uncovered 62,202
over-permissioned bots (≈1 in 3). Our empirical measurement re-
vealed several interesting findings: FTP is the most prevalent over-
permissioned protocol found in over 79% of all over-permissioned
bots. C3PO also identified 443,905 C&C monitoring capabilities (an
average of 7 per bot), enabling victim profiling, evidence collection
from spyware, and even client-side code reflection. This trend has
only increased since 2006, with over 8,000 over-permissioned bots
appearing per year in 2018 and 2019. Furthermore, recent bots (since
2015) implemented as many as 3 over-permissioned protocols.
Finally, we present two case studies to demonstrate covert C&C
server monitoring through protocol infiltration. We were careful
to follow ethical guidelines and adhere to applicable laws when
conducting this study. Covert monitoring succeeded and revealed
the number of files, their contents, and validation of information
inferred by the C&C monitoring capabilities, which will support
future botnet disruption and takedown attempts. We are working
with Netskope towards the disclosure and remediation of the iden-
tified C&C servers. Lastly, we have made C3PO available to the
community at: https://cyfi.ece.gatech.edu/.
2 A MOTIVATING EXAMPLE
Botnet disruptions and takedowns rely on accurate C&C server
monitoring to profile the botnet beforehand and validate successes
after. Consider Sanny, an APT that targets government agencies
through spearfishing. After infection, Sanny hijacks Windows ser-
vice components to enable persistence, deletes dropped files to cover
their tracks, and conducts sensitive data exfiltration. The Sanny
botnet survived takedown attempts in 2013 [26] and persists today.
After botnet monitoring began to fail, an extensive investigation
1C3PO: Covert Monitoring of C&C Servers via Protocol InfiltratiOn
Figure 1: C3PO-enabled Covert Monitoring of Sanny.
was conducted in 2018, revealing Sanny’s C&C server update [27],
but this required a tedious manual analysis.
The authorities reverse engineered dropped malicious files to
investigate the new Sanny variant. At the time, authorities found
never-before-seen FTP APIs and authentication credentials through-
out the malware binary and configuration files on the infected sys-
tem, revealing the update to the Sanny C&C server. However, since
no further action was taken, they likely did not realize the leverage
this provided for covert C&C server infiltration. If they did, the
authorities could have also identified the malware capabilities that
rely on FTP for interaction with the C&C server. This would have
allowed them to reinstate monitoring of the botnet’s spread by
extracting victim profiles and new bot command updates, all under
the covert guise of a trusted FTP connect.
Armed with our key insight, C3PO monitors the C&C server
by first identifying over-permissioned protocols, FTP in this case,
through their invocation points in the malware. Figure 1 illus-
trates the sequence of events toward covert C&C server moni-
toring. During malware analysis 1 , C3PO identified FTP APIs (e.g.,
FTPPutFile) in Sanny which confirmed the updated Sanny C&C
server (Table 1, Row 1). C3PO then used Iterative Selective Sym-
bolic Execution (iSSE) to extract infiltration vectors (IVs) from FTP
APIs 2 , allowing C3PO to spoof bot-to-C&C communication for
infiltration while masquerading as a trusted bot (Table 1, Row 2).
Had authorities realized the leverage FTP provided for botnet
infiltration, they could have monitored victim profiles and new bot
command updates. C3PO automatically provides this by identifying
C&C monitoring capabilities 3 revealing the C&C’s composition
and content that authorities can expect post infiltration. C3PO only
targets those capabilities that are exploitable, i.e., they interact with
the C&C server in a way that can be observed by C3PO when it
connects to the C&C server using the same protocol. For example,
Sanny performs victim profiling by exfiltrating victim locale infor-
mation, files, and passwords (from Firefox and Microsoft Outlook)
via FTP and used code reflection to execute arbitrary commands
on the victim system from a file on the C&C server (Table 1, Row
3). C3PO maps these capabilities to specific files and directories to
monitor on the C&C server via FTP protocol infiltration.
Table 1: C3PO’s Analysis of the Sanny Malware[27].
Protocol
Infiltration
Vectors
C&C Monitoring
Capabilities
Covert
Monitoring
Outputs
FTP
Username: cnix_21072852
Password: vlasimir2017
Server: ftp.capnix.com
Victim Profiling, File Exfiltration,
Password Stealing, and Code Reflection
(1)Peer disclosure as victim information is listed as
"_(#report) | UserName | TimeStamp"
(2) Code Reflection to update the C&C host name
C&C ServerC3POMalwareAnalysis1xxxxxunameInfiltration Vectors2C&C MonitoringCapabilities3xxxCovertAccess4ActiveMonitoring5Session 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3353Figure 2: C3PO Measurement Pipeline.
After C3PO extracts the IVs 2 and capabilities 3 , it actively
monitors the C&C server. C3PO can use the IVs (Table 1, Row 2)
to infiltrate 4 the Sanny C&C server, via the trusted bot-to-C&C
channel, and directly locate data from victims 5 in the form of
files containing infected system information and passwords result-
ing in peer disclosure (Table 1, Row 4) which serves as evidence
of computer fraud and abuse. Furthermore, C3PO identified code
reflection where the bot orchestrators issue the chip command
to the bot to trigger the FTP hostname to update. The ability to
monitor this transaction ensures that we maintain persistent covert
monitoring irrespective of migrating servers.
In contrast to previous works, C3PO gives the ability to identify,
assess, and pursue counteraction via scalable covert monitoring.
Notably, C3PO does not attempt to find exploitable vulnerabilities
in protocol implementations but instead, leverages the inherent
capabilities of the protocol.
3 MEASUREMENT PIPELINE
In collaboration with Netskope, we designed C3PO to study the
adoption of over-permissioned protocols in bots and how their use
has evolved from April 2006 to June 2020. Our dataset included 200k
malware with collection dates spanning back 15 years. This allows
us to retroactively deploy C3PO by analyzing each malware sample
and give C3PO the vantage point to observe existing trends in the
progression of malware development. C3PO identified 62,202 of
these as over-permissioned bots totaling 65,739 over-permissioned
protocol uses detected across 8,512 malware families. Furthermore,
C3PO identified that each bot contains on average 7 C&C moni-
toring capabilities, totaling 443,905 capabilities identified across
our dataset. We hope C3PO provides an automated measurement
pipeline to study the over-permissioned bot landscape in the wild
and this opportunity for covert botnet monitoring.
Figure 2 shows the four phases of C3PO’s automated measure-
ment pipeline that employs a memory-image-based symbolic anal-
ysis. Taking a malware binary as input, C3PO conducts Dynamic
Memory Image Extraction (subsection 3.1) by executing the malware
under instrumentation and capturing memory images during this
execution for analysis. This provides the best vantage point to by-
pass malware packing and obfuscation. C3PO transitions to static
analysis for Over-Permissioned Bot Identification (subsection 3.2)
by identifying invocation points for protocol APIs and protocol
keywords/commands (tokens). Next, C3PO uses Iterative Selective
Symbolic Execution (iSSE) for Infiltration Vector Identification to
allow the authorities to spoof bot-to-C&C communication for in-
filtration (subsection 3.3). C3PO then conducts C&C Monitoring
Capabilities Identification to reveal the composition and content
that authorities can expect from the C&C server during infiltra-
tion (subsection 3.4). Finally, infiltration vectors can be used for
Covert Monitoring of the C&C servers to pinpoint data inferred by
C&C monitoring capabilities enabling botnet monitoring.
3.1 Dynamic Memory Image Extraction
Malware often employs sophisticated packing and obfuscation tech-
niques that constrain analysis and also inhibit large-scale measure-
ments [28], [29]. Although there are numerous unpacking tools
available, modern packing techniques employ robust anti-analysis
methods rendering existing solutions mute [28]. While sandboxes
or software emulation are viable approaches, they require careful
configuration per malware sample/family which is likely to prevent
scaling to analyze a large dataset and may accidentally result in
introduced errors through incomplete configurations. As a pipeline
designed for large-scale measurement, C3PO aims to provide a scal-
able means of malware analysis through dynamic unpacking and
memory image extraction, i.e., taking a snapshot of the malware
during normal execution. Ideally, creating a memory image during
dynamic execution allows the malware to unpack and deobfuscate
itself, leaving C3PO with unpacked and deobfuscated code and
execution data to analyze.
Inspired by prior works [28], [30], C3PO extracts multiple mem-
ory images during the malware execution by hooking Internet and
Network (I/N) APIs2. This technique is based on two observations:
(1) Irrespective of the packing scheme, after unpacking, the mal-
ware must invoke I/N APIs to interact with its C&C server. (2) Since
recent research has shown that most modern packers have at least
two layers of packing [28], if malware memory image extraction is
untimely, or at the wrong layer, it will still be packed. Therefore,
C3PO extracts multiple memory images by hooking all I/N APIs, as
their DLLs are loaded, using a trampoline to replace instructions
in the hooked API with a call to our custom code that writes the
memory image to a file and returns to the trampoline. Each memory
image contains the execution context (i.e., register values, stack,
program counter, etc., at the time of memory image extraction)
which ensures that malware analysis begins from a valid execution
point in the malware.
After extracting malware memory images, C3PO proceeds to
the memory-image-based analysis to measure the prevalence of
over-permissioned protocol use and the leverage they provide to
covertly monitor C&C servers.
2I/N APIs allow the malware to interact with FTP and HTTP protocols to access
Internet resources.
InstrumentedExecutionCFGsCombined CFGFTPTFTPBitTorrentMongoMySQLODBCMQTTIRCProtocol Database𝐻!Protocol IDs𝐿!Protocol IDsBackward Slicingfrom Authentication APIsIterative SelectiveSymbolic ExecutionBackward Slicingfrom Data Exfiltration and Defense Evasion APIsAPI-to-CapabilityMappingxxxInfiltration VectorsDynamic Memory Image ExtractionOver-Permissioned Bot IdentificationInfiltration Vector IdentificationC&C Monitoring Capability IdentificationMalwareBinary010001110010101101011100110100011010000110100100011100100101110111001010111001101010001110010101101011100110100011010000110100100011100100101110111001010111001101010001110010101101011100110100011010000110100100011100100101110111001010111001101Memory Images12n12nC&C MonitoringCapabilitiesCovert  MonitoringAPIs, Call Sites,TokensSession 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea33543.2 Over-Permissioned Bot Identification
Over-Permissioned bots use over-permissioned protocols that au-
thorities can leverage to covertly monitor C&C servers. We con-
struct a protocol database that C3PO can reference as it confirms
the invocation of protocol identifiers (APIs and protocol keywords
or commands, i.e., tokens) validating protocol use. If the bot is over-
permissioned, C3PO outputs the protocol APIs, tokens, and call
sites for later analysis.
3.2.1 Protocol Implementations. Protocols are implemented us-
ing low-level functions or high-level, built-in library functions to
achieve the same overall functionality. We, therefore, categorize
protocol implementations as low-level (𝐿𝐿) or high-level (𝐻𝐿) for
our measurement study.
HL Implementations. Protocol-specific APIs are used for 𝐻𝐿 pro-
tocol implementations (e.g., SQLConnect), which reduce flexibility
in modifying or adding to the protocol but make communications
easy and efficient given the built-in APIs.
LL Implementations. Malware authors often hide the use of well-
known protocols and prevent an investigator’s immediate under-
standing of the C&C communication routines. 𝐿𝐿 implementations
use raw-socket (non protocol specific) APIs (e.g., send) in conjunc-
tion with official protocol tokens (e.g., NICK for the IRC protocol).
Notably, all protocols have 𝐿𝐿 implementations, but only some
also have a 𝐻𝐿 implementation. Although custom protocol imple-
mentations are feasible, their uniqueness supports signature devel-
opment making them easier to filter with firewall rules. Thus, C3PO
identifies 𝐻𝐿 and 𝐿𝐿 implementations, and could be easily extended
to other protocols when deemed necessary for an investigation.
3.2.2 Protocol Database. Standard protocols are often used for:
(1) file transfer, (2) data storage, and (3) message-based communi-
cation. However, their ubiquitous integration into benign software
has prompted research into inherent vulnerabilities which has led
to unauthorized server access [22]–[25]. Noticing a similar trend in
malware, we select common over-permissioned protocols discov-
ered in preliminary research, reports from industry experts [31],
[32], and related work [33] for our study, as shown in Table 2.
Based on the protocols, we constructed a database of all proto-
col identifiers for C3PO to reference during protocol identification
(subsubsection 3.2.3). To construct this database, we developed a
web-crawler and targeted it to the respective protocol documenta-
tion [34]–[38] or manually extracted protocol details to populate
the database. However, as other over-permissioned protocols be-
come widely adopted by malware, they can be easily integrated
by adding their identifiers to the protocol database. Based on the
protocol implementations and the database as a reference, C3PO
conducts protocol identification to pinpoint protocol use.
3.2.3 Protocol Identification. To establish the execution context