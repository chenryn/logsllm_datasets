title:The Art of The Scam: Demystifying Honeypots in Ethereum Smart Contracts
author:Christof Ferreira Torres and
Mathis Steichen and
Radu State
The Art of The Scam: Demystifying Honeypots in 
Ethereum Smart Contracts
Christof Ferreira Torres, Mathis Steichen, and Radu State, University of Luxembourg
https://www.usenix.org/conference/usenixsecurity19/presentation/ferreira
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.The Art of The Scam:
Demystifying Honeypots in Ethereum Smart Contracts
Christof Ferreira Torres
SnT, University of Luxembourg
Mathis Steichen
SnT, University of Luxembourg
Radu State
SnT, University of Luxembourg
Abstract
Modern blockchains, such as Ethereum, enable the execu-
tion of so-called smart contracts – programs that are exe-
cuted across a decentralised network of nodes. As smart
contracts become more popular and carry more value, they
become more of an interesting target for attackers.
In the
past few years, several smart contracts have been exploited
by attackers. However, a new trend towards a more proac-
tive approach seems to be on the rise, where attackers do not
search for vulnerable contracts anymore. Instead, they try
to lure their victims into traps by deploying seemingly vul-
nerable contracts that contain hidden traps. This new type
of contracts is commonly referred to as honeypots. In this
paper, we present the ﬁrst systematic analysis of honeypot
smart contracts, by investigating their prevalence, behaviour
and impact on the Ethereum blockchain. We develop a tax-
onomy of honeypot techniques and use this to build HON-
EYBADGER – a tool that employs symbolic execution and
well deﬁned heuristics to expose honeypots. We perform a
large-scale analysis on more than 2 million smart contracts
and show that our tool not only achieves high precision, but
is also highly efﬁcient. We identify 690 honeypot smart con-
tracts as well as 240 victims in the wild, with an accumulated
proﬁt of more than $90,000 for the honeypot creators. Our
manual validation shows that 87% of the reported contracts
are indeed honeypots.
1 Introduction
The concept of blockchain has been introduced in 2009
with the release of Satoshi Nakamoto’s Bitcoin [26] and
has greatly evolved since then. It is regarded as one of the
most disruptive technologies since the invention of the In-
ternet itself.
In recent years, companies across the globe
have poured value into blockchain research, examining how
it can make their existing business more efﬁcient and secure.
A blockchain is essentially a veriﬁable, append-only list of
records in which all transactions are recorded in so-called
blocks. Every block is linked to its previous block via a cryp-
tographic hash, thus forming a chain of blocks or a so-called
“blockchain”. This list is maintained by a distributed peer-
to-peer network of untrusted nodes, which follow a consen-
sus protocol that dictates the appending of new blocks. Trust
is obtained via the assumption that the majority acts faith-
fully and going against the protocol is too costly.
A broad range of different blockchain implementations
have emerged since the inception of Bitcoin. However, all of
these implementations pursue a common goal, namely, the
decentralisation of control over a particular asset. Bitcoin’s
asset is its cryptocurrency and the trusted centralised enti-
ties it attempts to decentralise are traditional banks. Mod-
ern blockchains such as Ethereum [46] aim to decentralise
the computer as a whole through so-called smart contracts.
Smart contracts are programs that are stored and executed
across the Ethereum blockchain via the Ethereum Virtual
Machine (EVM). The EVM is a purely stack-based virtual
machine that supports a Turing-complete instruction set of
opcodes. Smart contracts are deployed, invoked and re-
moved from the blockchain via transactions. Each operation
on the EVM costs a speciﬁed amount of gas. When the total
amount of gas assigned to a transaction is exceeded, program
execution is terminated and its effects are reversed. In con-
trast to traditional programs, smart contracts are immutable.
Thus, programming mistakes that were never intended by
the developer, become now irreversible. Developers usu-
ally write smart contract code in a high-level language which
compiles into EVM bytecode. At the time of writing, Solid-
ity [47] is the most prevalent high-level language for devel-
oping smart contracts in Ethereum.
In 2018, Ethereum reached a market capitalisation of over
$133 billion [9]. As it becomes more and more valuable, at-
tackers become more and more incentivised to ﬁnd and ex-
ploit vulnerable contracts. In fact, Ethereum already faced
several devastating attacks on vulnerable smart contracts.
The most prominent ones being the DAO hack in 2016 [34]
and the Parity Wallet hack in 2017 [29], together causing
a loss of over $400 million. In response to these attacks,
USENIX Association
28th USENIX Security Symposium    1591
academia proposed a plethora of different tools that allow
to scan contracts for vulnerabilities, prior to deploying them
on the blockchain (see e.g. [21, 25, 38]). Unfortunately, these
tools may also be used by attackers in order to easily ﬁnd vul-
nerable contracts and exploit them. This potentially enables
attackers to follow a reactive approach by actively scanning
the blockchain for vulnerable contracts.
Alternatively, attackers could follow a more proactive ap-
proach by luring their victims into traps. In other words: Why
should I spend time on looking for victims, if I can just let the
victims come to me? This new type of fraud has been intro-
duced by the community as “honeypots” (see e.g. [32, 33]).
Honeypots are smart contracts that appear to have an obvious
ﬂaw in their design, which allows an arbitrary user to drain
ether (Ethereum’s cryptocurrency) from the contract, given
that the user transfers a priori a certain amount of ether to the
contract. However, once the user tries to exploit this appar-
ent vulnerability, a second, yet unknown, trapdoor unfolds
which prevents the draining of ether to succeed. The idea
is that the user solely focuses on the apparent vulnerability
and does not consider the possibility that a second vulnera-
bility might be hidden in the contract. Similar to other types
of fraud, honeypots work because human beings are often
easily manipulated. People are not always capable of quan-
tifying risk against their own greed and presumptions.
In this paper, we investigate the prevalence of such honey-
pot smart contracts in Ethereum. To the best of our knowl-
edge this is the ﬁrst work to provide an in depth analysis on
the inner workings of this new type of fraud. Moreover, we
introduce HONEYBADGER – a tool that uses a combination
of symbolic execution and precise heuristics to automatically
detect various types of honeypots. Using HONEYBADGER,
we are able to provide interesting insights on the plethora,
anatomy and popularity of honeypots that are currently de-
ployed on the Ethereum blockchain. Finally, we investigate
whether this new type of scam is proﬁtable and we discuss
the effectiveness of such honeypots. In summary, we present
the following main contributions:
• We conduct the ﬁrst systematic analysis of an emerging
new type of fraud in Ethereum: honeypots.
• We identify common techniques used by honeypots and
organise them in a taxonomy.
• We present HONEYBADGER, a tool that automatically
detects honeypots in Ethereum smart contracts.
• We run HONEYBADGER on 151,935 unique smart con-
tracts and conﬁrm the prevalence of at least 282 unique
honeypots.
2 Background
In this section, we provide the required background for un-
derstanding the setting of our work, including a description
of smart contracts, the Ethereum virtual machine, and the
Etherscan blockchain explorer.
2.1 Smart Contracts
The notion of smart contracts has been introduced by Nick
Szabo in 1997 [35]. He described the concept of a trustless
system consisting of self-executing computer programs that
would facilitate the digital veriﬁcation and enforcement of
contract clauses contained in legal contracts. However, this
concept only became a reality with the release of Ethereum
in 2015. Ethereum smart contracts are different from tra-
ditional programs in several aspects. For example, as the
code is stored on the blockchain, it becomes immutable and
its execution is guaranteed by the blockchain. Nevertheless,
smart contracts may be destroyed, if they contain the nec-
essary code to handle their destruction. Once destroyed, a
contract can no longer be invoked and its funds are trans-
ferred to another address. Smart contracts are usually de-
veloped using a dedicated high-level programming language
that compiles into low-level bytecode. The bytecode of a
smart contract is then deployed to the blockchain through a
transaction. Once successfully deployed, a smart contract is
identiﬁed by a 160-bit address. Despite a large variety of pro-
gramming languages (e.g. Vyper [44], LLL [19] and Bam-
boo [6]), Solidity [47] remains the most prominent program-
ming language for developing smart contracts in Ethereum.
Solidity’s syntax resembles a mixture of C and JavaScript. It
comes with a multitude of unique concepts that are speciﬁc
to smart contracts, such as the transfer of funds or the capa-
bility to call other contracts.
2.2 Ethereum Virtual Machine
The Ethereum blockchain consists of a network of mutually
distrusting nodes that together form a decentralised public
ledger. This ledger allows users to create and invoke smart
contracts by submitting transactions to the network. These
transactions are processed by so-called miners. Miners exe-
cute smart contracts during the veriﬁcation of blocks, using
a dedicated virtual machine denoted as the Ethereum Virtual
Machine [46]. The EVM is a stack-based, register-less vir-
tual machine, running low-level bytecode, that is represented
by an instruction set of opcodes. To guarantee termination
of a contract and thus prevent miners to be stuck in endless
loops of execution, the concept of gas has been introduced.
It associates costs to the execution of every single instruc-
tion. When issuing a transaction, the sender has to specify
the amount of gas that he or she is willing to pay to the miner
for the execution of the smart contract. The execution of a
smart contract results in a modiﬁcation of the world state σ,
a data structure stored on the blockchain mapping an address
a to an account state σ [a]. The account state of a smart con-
tract consists of two main parts: a balance σ [a]b, that holds
1592    28th USENIX Security Symposium
USENIX Association
3. The attacker withdraws the bait together with the funds
that the victim lost in the attempt of exploitation.
An attacker does not require special capabilities to set up
a honeypot.
In fact, an attacker has the same capabilities
as a regular Ethereum user. He or she solely requires the
necessary funds to deploy the smart contract and place a bait.
3.2 Taxonomy of Honeypots
We grasped public sources available on the Internet, in or-
der to have a ﬁrst glimpse at the inner workings of honey-
pots [45, 22, 32, 31, 33]. We were able to collect a total of 24
honeypots (see Table 5 in Appendix A) and distill 8 different
honeypot techniques. We organise the different techniques
in a taxonomy (see Table 1), whose purpose is twofold: (i)
as a reference for users in order to avoid common honeypots
in Ethereum; (ii) as a guide for researchers to foster the de-
velopment of methods for the detection of fraudulent smart
contracts. We group the different techniques into three dif-
ferent classes, according to the level on which they operate:
1. Ethereum Virtual Machine
2. Solidity Compiler
3. Etherscan Blockchain Explorer
The ﬁrst class tricks users by making use of the unusual
behaviour of the EVM. Although the EVM follows a strict
and publicly known set of rules, users can still be misled
or confused by devious smart contract implementations that
suggest a non-conforming behaviour. The second class re-
lates to honeypots that beneﬁt from issues that are intro-
duced by the Solidity compiler. While some compiler is-
sues are well known, others still remain undocumented and
might go unnoticed if a user does not analyse the smart con-
tract carefully or does not test it under real-world conditions.
The ﬁnal and third class takes advantage of issues that are
related to the limited information displayed on Etherscan’s
website. Etherscan is perhaps the most prominent Ethereum
Level
Ethereum Virtual Machine
Etherscan
Blockchain Explorer
Technique
Balance Disorder
Inheritance Disorder
Skip Empty String Literal
Type Deduction Overﬂow
Uninitialised Struct
Hidden State Update
Hidden Transfer
Straw Man Contract
Figure 1: Actors and phases of a honeypot.
the amount of ether owned by the contract, and storage σ [a]s,
which holds the persistent data of the contract. Storage is or-
ganised as a key-value store and is the only way for a smart
contract to retain state across executions. Besides the world
state σ, the EVM also holds a transaction execution environ-
ment I, which contains the address of the smart contract that
is being executed Ia, the transaction input data Id, the trans-
action sender Is and the transaction value Iv. The EVM can
essentially be seen as a transaction-based state machine, that
takes as input σ and I, and outputs a modiﬁed world state σ(cid:48).
2.3 Etherscan Blockchain Explorer
Etherscan1 is an online platform that collects and displays
blockchain speciﬁc information. It acts as a blockchain nav-
igator allowing users to easily lookup the contents of indi-
vidual blocks, transactions and smart contracts on Ethereum.
It offers multiple services on top of its exploring capabili-
ties. One of these services is the possibility for smart con-
tract creators to publish their source code and conﬁrm that
the bytecode stored under a speciﬁc address is the result of
compilation of the speciﬁed source code. It also offers users
the possibility to leave comments on smart contracts.
3 Ethereum Honeypots
In this section, we provide a general deﬁnition of a honeypot
and introduce our taxonomy of honeypots.
3.1 Honeypots
Deﬁnition 1 (Honeypot) A honeypot is a smart contract
that pretends to leak its funds to an arbitrary user (victim),
provided that the user sends additional funds to it. However,
the funds provided by the user will be trapped and at most
the honeypot creator (attacker) will be able to retrieve them.
1. The attacker deploys a seemingly vulnerable contract
and places a bait in the form of funds;
2. The victim attempts to exploit the contract by transfer-
ring at least the required amount of funds and fails;
1https://etherscan.io/
Figure 1 depicts the different actors and phases of a honey-
pot. A honeypot generally operates in three phases:
Solidity Compiler
Table 1: A taxonomy of honeypot techniques in Ethereum
smart contracts.
USENIX Association
28th USENIX Security Symposium    1593
AttackerHoneypot1) Deployment3) Withdrawal2) ExploitationVictim1
2
3
4
5
6
7
c o n t r a c t M u l t i p l i c a t o r X 3 {
...
f u n c t i o n m u l t i p l i c a t e ( address adr ) payable {
if ( msg . value >= this . balance )
adr . t r a n s f e r ( this . balance + msg . value ) ;
}
}
Figure 2: An example of a balance disorder honeypot.
blockchain explorer and many users fully trust the data dis-
played therein. In the following, we explain each honey-
pot technique through a simpliﬁed example. We also assume
that: 1) the attacker has placed a bait in form of ether into the
smart contract, as an incentive for users to try to exploit the
contract; 2) the attacker has a way of retrieving the amount
of ether contained in the honeypot.
3.2.1 Ethereum Virtual Machine
Balance Disorder. Every smart contract in Ethereum pos-
sesses a balance. The contract in Figure 2 depicts an ex-
ample of a honeypot that makes use of a technique that we
denote as balance disorder. The function multiplicate
suggests that the balance of the contract (this.balance)
and the value included in the transaction to this function call
(msg.value) are transferred to an arbitrary address, if the
caller of this function includes a value that is higher than or
equal to the current balance of the smart contract. Hence, a
naive user will believe that all that he or she needs to do, is
to call this function with a value that is higher or equal to
the current balance, and that in return he or she will obtain
the “invested” value plus the balance contained in the con-
tract. However, if a user tries to do so, he or she will quickly
realise that line 5 is not executed because the condition at
line 4 does not hold. The reason for this is that the balance
is already incremented with the transaction value, before the
actual execution of the smart contract takes place. It is worth
noting that: 1) the condition at line 4 can be satisﬁed if the
current balance of the contract is zero, but then the user does
not have an incentive to exploit the contract; 2) the addition
this.balance+msg.value at line 5, solely serves the pur-
pose of making the user further believe that the balance is
updated only after the execution.
3.2.2 Solidity Compiler
Inheritance Disorder. Solidity supports inheritance via