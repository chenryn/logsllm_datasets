to an adversary who knows P1. We consider two volumes for simplicity and because two
6 http://www.wolframalpha.com/
10
volumes are used in the implementation; the attack generalizes directly to any number
of volumes. We assume that each volume consists of S blocks of B bytes, so the disk has
4SB bytes in total (because it needs to be twice the size of all the volumes combined).
We overload the notation for the access operations in Deﬁnition 1 to allow reading
and writing of multiple blocks of data in a single query. In what follows, 0SB denotes an
all-zero string of SB bytes, equating to S blocks of B bytes each.
Our adversary AB,S,T then proceeds in ﬁve steps:
D0 of the disk.
1. AB,S,T sends l = 2 to the challenger and receives the password P1 and a snapshot
2. AB,S,T sends o1,0 = o1,1 = (w, 0, V1, 0SB).
3. AB,S,T sends o2,0 = (w, 1, V2, 0SB), o2,1 = (r, 0, V1, d, SB).
4. AB,S,T requests a snapshot Df , containing 4S blocks. AB,S,T disregards the blocks
that are the same as in D0, runs D successively on each of the remaining E used
blocks of Df and concatenates the output bits of D to form a string R ∈ {0, 1}E.
5. Finally, AB,S,T outputs 1 if W , the Hamming weight of R, is at most T ; otherwise it
outputs 0.
The following theorem is immediate (noting that reading or writing B bytes counts
as making 1 query in the security model given previously, so AB,S,T makes 2S queries
in total):
Theorem 2. Let τB,S,T denote the running time of AB,S,T and AdvB,S,T its advantage.
Then HIVE is not (AdvB,S,T , τB,S,T , 2S)-plausible hiding against one-time adversaries.
Now let us determine values for S, B and T for which the theorem gives a meaningful
attack. We consider what information AB,S,T has access to in its attack when b = 0 and
b = 1 in the security experiment. When b = 0, the disk is initialised with V1 and V2, and
o1,0 and o2,0 are executed. When b = 1, the disk is initialised only with V1, and o1,1 and
o2,1 are executed.
The adversary gets an initial snapshot of the disk before any operations are executed,
so identifying unused blocks is trivial; E denotes the number of blocks that diﬀer between
D0 and Df . All blocks that are written to certainly diﬀer, so we have 2S ≤ E ≤ 4S. We
call EB the eﬀective disk size, since the other blocks are irrelevant to the attack. Note
that the expected value of E is approximately 3.1075S. (There are 4S blocks on the disk,
and in the 2S read and write operations in our attack, HIVE will choose K · 2S = 6S
blocks at random to write to. This means that we expect that, out of the total of 4S
we get E[E] ≈ (1 − e−1.5)4S ≈ 3.1075S.)
(cid:1)6S blocks are not written to.7 Using (1 − 1/n)m ≈ e−m/n,
blocks available, 4S ·(cid:0)1 − 1
4S
Let Wb denote the Hamming weight of the vector R constructed by AdvB,S,T in case
b. We have:
7 In reality, because of the way the stash operates, slightly fewer than S or 2S blocks of data might be
written to the disc. However, this does not materially aﬀect our analysis. The probability of eight or
more items remaining on the stash is only 0.05 %.
11
– When b = 0, 2S blocks of data are written to the disk, so it contains 2S blocks of
AES output and E− 2S blocks of RC4 output. Since AES output is indistinguishable
from random (otherwise, we would have an attack on AES), the expected value for
W0 is α · 2S + (1 − β) · (E − 2S).
– When b = 1, only S blocks of data are written to the disk, so it contains S blocks
of AES output and E − S blocks of RC4 output. The expected value for W1 is
α · S + (1 − β) · (E − S).
The diﬀerence in the expected values of the Hamming weight of R in the two cases
is therefore (1 − α − β)S = δS, which corresponds to the S blocks of additional data
written to the disk in case 0.
Note that the output of D on each B-byte block is an independent Bernoulli random
variable with one of two possible distributions, depending on whether the block contains
output from RC4 or AES (and where we assume the latter is indistinguishable from
truly random bytes). Speciﬁcally, when a block contains RC4 output, D’s output equals
1 with probability 1 − β, while, when it contains AES output, D’s output equals 1 with
probability α. Thus, when b = 0, the distribution of W is a Poisson binomial distribution
with parameters p1 = . . . = p2S = α, p2S+1 = . . . = pE = 1 − β (since the trials are
independent, the order does not matter). Similarly, when b = 1, the distribution of W is
a Poisson binomial distribution with parameters p1 = . . . = pS = α, pS+1 = . . . = pE =
1 − β.
By standard results for the Poisson binomial distribution, the variance of W0 is equal
to 2Sα(1− α) + (E − 2S)β(1− β), while the variance of W1 is equal to Sα(1− α) + (E −
S)β(1− β). Since α(1− α), β(1− β) ≤ 1/4 and E ≤ 4S, it follows that the two variances
are bounded by S. We deﬁne σ2 := S.
Now, given that W0 and W1 are obtained as sums of large numbers of independent
Bernoulli random variables, we can consider them to be Normally distributed to a good
approximation (here, we assume E is large, as indeed it will need to be to obtain rea-
sonable success rates for our adversary). We already established that their variances are
bounded by S, while their means are separated by δS. Note that
Advpl-otAB,S,T ,Σ(k) = |Pr[1 ← Exppl-ot-0AB,S,T ,Σ(k)] − Pr[1 ← Exppl-ot-1AB,S,T ,Σ(k)]|
= |Pr[W0 ≤ T ] − Pr[W1 ≤ T ]|
where W0 and W1 are Normally distributed by assumption. We set T to be half-way
between the means; viz T = E − 1.5S − 1.5Sα − (E − 1.5S)β. This ﬁnally brings us to a
position where we can apply standard tail bounds for Normal distributions in order to
estimate the advantage of AB,S,T .
Suppose that we insist that the means of W0, W1 are 2nσ apart for some parameter
n; then by our choice of T and under our assumption of Normality (and since σ2 is an
upper bound on the variances of W0, W1) we get an advantage for our adversary which
is at least
(cid:19)
(cid:18) n√
2
1 − erf
12
n log2 S (ideal) log2 S (experimental) AdvB,S,T
1
2
3
0.683
0.954
0.997
19.6
21.6
22.7
20.5
22.5
23.7
Table 1. Number of blocks S required to achieve a given advantage AdvB,S,T for B =
4096.
where erf(·) is the standard error function for the Normal distribution:
erf(x) =
1√
π
e−t2
dt.
(cid:90) x
−x
4n2
δ2
Hence, under the condition that δS = 2nσ = 2nS1/2, the advantage AdvB,S,T of our
2). Solving for
adversary AB,S,T will be at least the claimed value, namely 1 − erf(n/
S, we see that we require
√
S =
to achieve the claimed advantage.
4.1 Concrete Numbers
To launch a concrete attack, we set B = 4096, as in [2]. Then, from the results of Section
3 we can take δ = 0.002273 as the optimal setting. Setting n = 1 in the above analysis
and solving for S, we get S = 219.6 for an advantage of 0.683. Continuing for other
values of n, we obtain the second column in Table 1. Thus we see that an adversary
with advantage very close to 1 can be achieved by setting S = 222.7, i.e. for an attack
involving 2S = 223.7 read/write queries on a disk containing a total of 4S = 224.7 blocks
and 4BS = 236.7 bytes of data (i.e. roughly 104 GB of data).
The third column in Table 1 contains estimates for S based on setting δ = 0.001648,
the value experimentally observed when setting η = 0 in the statistical test developed in
Section 3.6. The higher numbers in this column reﬂect the sub-optimal performance of
the blockwise distinguisher for this setting of η.
The main computational cost of implementing the attack is that of running the
blockwise distinguisher E times; since E ≤ 4S, the total cost of the attack is on the
order of Gmax · B · S ﬂoating point operations. In our implementation, the running time
for a single execution of the blockwise distinguisher for Gmax = 64, B = 4096 was
0.000719s (on a Macbook Air with a 1.3 GHz Intel Core i5 processor and 8GB of RAM);
the running time of the whole attack with E = 4S and S = 223.7 would then be about 11
hours. This running time could be improved by optimising the choice of η (thus allowing
a reduced value of S).
Similar calculations can be carried out with B = 256, where we can take δ = 0.00055.
We obtain Table 2. We see that S is required to be greater, reﬂecting the much weaker
performance of our blockwise distinguisher when the block size is small. On the other
13
n log2 S (ideal) AdvB,S,T
1
2
3
0.683
0.954
0.997
23.6
25.6
26.8
Table 2. Number of blocks S required to achieve a given advantage AdvB,S,T for B =
256.
hand, the total disk size is only moderately increased and the running time of the dis-
tinguisher is further reduced (because of the reduced block size).
5 Conclusions
We have shown that the current instantiation of HIVE using RC4 is insecure. Speciﬁcally,
there is an eﬃcient attack involving 223.7 read/write queries on B = 4096 byte blocks for
which we can construct an adversary having advantage 0.997 in the security model for
plausible hiding against one-time adversaries. This violates the main security property
claimed for HIVE.
Our work illustrates that if a provably secure scheme is instantiated with an insecure
primitive, then all security guarantees may be lost.
HIVE can be repaired by replacing RC4 with a stronger PRG. For example, AES in
counter mode (CTR) could be used instead; as well as being more secure, the performance
will be better than that of the current RC4-based system on platforms with hardware
support for AES. More options, optimized for performance in hard- or software, are
oﬀered by the eSTREAM project.8
We gave the authors of HIVE the opportunity to make changes to their code and to
their paper after notifying them of our initial concerns about their scheme’s reliance on
RC4. They did not avail themselves of this opportunity. In view of the fact that HIVE
had been released to the public and was promoted as “not rely[ing] on heuristics or obfus-
cation techniques, but rather strong cryptographic primitives which can be mathematically
proven” and as being able to “provide very strong security in practice”9, we decided to
reﬁne and publish our attack to provide a clear demonstration of the shortcomings of
instantiating the system with RC4.
Shortly after publication of a pre-print version of this paper, RC4 was replaced by
AES-CTR as the default PRG in the HIVE implementation. According to the HIVE
developers, I/O performance remains unaﬀected.10
References
1. N. J. AlFardan, D. J. Bernstein, K. G. Paterson, B. Poettering, and J. C. N. Schuldt. On the
security of RC4 in TLS. In USENIX Security. USENIX Association, 2013. https://www.usenix.
org/conference/usenixsecurity13/security-rc4-tls.
8 http://www.ecrypt.eu.org/stream/
9 Both quotes from http://hive.ccs.neu.edu/, date of access 26/10/2014
10 http://www.onarlioglu.com/hive/, section “Change Log”
14
2. E.-O. Blass, T. Mayberry, G. Noubir, and K. Onarlioglu. Toward robust hidden volumes using write-
only oblivious RAM. In CCS ’14, pages 203–214. ACM, 2014. Full version at https://eprint.iacr.
org/2014/344.
3. S. R. Fluhrer and D. A. McGrew. Statistical analysis of the alleged RC4 keystream generator. In
FSE 2000, volume 1978 of Lecture Notes in Computer Science, pages 19–30. Springer, 2001.
4. I. Mantin. Predicting and distinguishing attacks on RC4 keystream generator.
In EUROCRYPT
2005, volume 3494 of Lecture Notes in Computer Science, pages 491–506. Springer, 2005.
5. I. Mantin and A. Shamir. A practical attack on broadcast RC4. In FSE 2001, volume 2355 of Lecture
Notes in Computer Science, pages 152–164. Springer, 2002.
6. S. Sen Gupta, S. Maitra, G. Paul, and S. Sarkar. (Non-) random sequences from (non-) random
permutations – analysis of RC4 stream cipher. Journal of Cryptology, 27(1):67–108, 2014.
15