title:Limbo: Efficient Zero-knowledge MPCitH-based Arguments
author:Cyprien Delpech de Saint Guilhem and
Emmanuela Orsini and
Titouan Tanguy
Limbo: Efficient Zero-knowledge MPCitH-based Arguments
Cyprien Delpech de Saint
Titouan Tanguy
Guilhem
imec-COSIC, KU Leuven
Leuven, Belgium
PI:EMAIL
Emmanuela Orsini
imec-COSIC, KU Leuven
Leuven, Belgium
PI:EMAIL
imec-COSIC, KU Leuven
Leuven, Belgium
PI:EMAIL
ABSTRACT
This work introduces a new interactive oracle proof system based
on the MPC-in-the-Head paradigm. To improve concrete efficiency
and offer flexibility between computation time and communica-
tion size, a generic proof construction based on multi-round MPC
protocols is proposed, instantiated with a specific protocol and
implemented and compared to similar proof systems.
Performance gains over previous work derive from a multi-party
multiplication check optimized for the multi-round and MPC-in-
the-Head settings. Of most interest among implementation opti-
mizations is the use of identical randomness across repeated MPC
protocol executions in order to accelerate computation without
excessive cost to the soundness error.
The new system creates proofs of SHA-256 pre-images of 43KB
in 53ms with 16 MPC parties, or 23KB in 188ms for 128 parties. As a
signature scheme, the non-interactive variant produces signatures,
based on the AES-128 circuit, of 18KB in about 4ms; this is 20%
faster and 32 % larger than the Picnic3 scheme (13kB in 5.3ms for
16 parties) which is based on the 90% smaller LowMC circuit.
CCS CONCEPTS
• Theory of computation → Cryptographic protocols; • Secu-
rity and privacy → Public key (asymmetric) techniques.
KEYWORDS
Zero-knowledge, MPC-in-the-Head, Post-quantum signatures
ACM Reference Format:
Cyprien Delpech de Saint Guilhem, Emmanuela Orsini, and Titouan Tan-
guy. 2021. Limbo: Efficient Zero-knowledge MPCitH-based Arguments. In
Proceedings of the 2021 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’21), November 15–19, 2021, Virtual Event, Republic of
Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.
3484595
1 INTRODUCTION
A zero-knowledge (ZK) proof is a cryptographic tool that allows
a prover to convince a verifier that a statement is true without
leaking any information to the verifier other than the validity of
the assertion. Since their introduction by Goldwasser, Micali and
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484595
Rackoff [26] in the 1980s, ZK proofs have become a fundamental
tool for both cryptography theory and, more recently, practical
systems thanks to real-world applications such as distributed ledger
technology and cryptocurrencies.
There have been many developments in the construction of
highly efficient zero-knowledge systems in recent years, each of
which offers different trade-offs between several efficiency mea-
sures such as the number of interactions between prover and verifier
(in particular distinguishing interactive and non-interactive sys-
tems), communication complexity, proof length, and prover and
verifier computation complexity.
A common and useful way to simplify protocol construction
in such a large design space is to proceed in a modular way: first
construct an information-theoretic protocol (also called a proba-
bilistically checkable proof or PCP) which makes use of idealised
assumptions, and then compile it to a ‘real’ world protocol, or more
formally an argument system [17], using cryptographic tools. This
approach is used for example to construct succint non-interactive ar-
guments [6–8, 14, 31, 32, 36]. Here, the term succinct usually refers
to systems with sub-linear proof size, but can additionally refer to
efficient verification. The extension of PCPs to interactive PCPs
(IPCPs) [29] allows more interaction between prover and verifier
after the proof generation; the recent further extension to interac-
tive oracle proofs (IOPs) [9, 39], which are effectively “multi-round
PCPs”, achieves even better efficiency than standard PCPs. Other
related variants include linear PCPs [12] and their generalization
to fully linear PCPs and IOPs [15]. In particular, linear PCPs have
been used to build sub-linear arguments with preprocessing, with
very efficient instantiations [24]. The main drawbacks of this ap-
proach usually include prover complexity, heavy use of public-key
machinery and requirement for trusted setup.
More generally, due to the modular approach, it is possible to
combine different information-theoretic proof systems with dif-
ferent cryptographic tools to obtain systems with very different
characteristics, especially in term of efficiency.
In 2007, Ishai, Kushilevitz, Ostrovsky and Sahai [28] introduced
a very powerful paradigm to build (honest-verifier) ZKPCPs us-
ing secure multi-party computation (MPC), known as MPC-in-the-
Head (MPCitH). Recent efficient solutions for circuit satisfiability
based on this approach include ZKBoo [25], KKW [30], BN [5] and
Ligero [2, 11]. Common features of these schemes are the prover’s
linear complexity (in the circuit size) and their overall concrete
efficiency, which makes these schemes very competitive, even for
relatively large statements. In particular, among MPCitH-based
systems, KKW offers the best concrete computational performance,
while Ligero notably achieves sub-linear communication complex-
ity and hence shortest proof lengths for large enough circuits.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3022Interestingly, the MPCitH approach has been successfully used
to construct very efficient digital signature schemes with post-
quantum security, such as Picnic [19, 30, 42].
proof system to interactive and non-interactive zero-knowledge
arguments, we obtain better overall performance than previous
related work for small and medium size circuits.
1.1 Our Contributions and Techniques
Motivated by the simplicity and flexibility of the MPCitH par-
adigm, in addition to the good concrete performance of systems
based on it, we construct Limbo, a new zero-knowledge MPCitH-
based argument for circuit satisfiability which works for both
Boolean and arithmetic circuits.
Our construction offers linear communication and prover com-
plexity, however our focus is on concrete performance rather than
asymptotic complexity, and Limbo achieves extremely good effi-
ciency, both in terms of prover complexity and proof length. As
common to all MPCitH-based systems, it also achieves transparency
(no need for trusted setup) and post-quantum security.
Concretely, our scheme offers computational performance com-
parable with KKW, but with significantly shorter proofs, achieving
the best overall performance among MPCitH-based schemes for
medium size circuits (i.e. with less than 500000 multiplication gates).
For larger circuits, Ligero has shorter proofs but is computationally
more expensive than our protocol.
We also use the non-interactive variant of our construction
(NILimbo) to design a post-quantum signature scheme, in line with
previous works such as Picnic [19], BBQ [21], LegRoast [10] and
Banquet [3].
We furthermore provide an implementation of our protocols and
compare its performance with other MPCitH-based systems. We
now detail our contributions and techniques.
MPCitH zk-IOP. We extend the general MPCitH zk-IOP construc-
tions defined in Ligero and Ligero++ [2, 11], which in turn can
be seen as an optimized version of the black-box transformation
introduced in IKOS [28], to work with MPC protocols with arbitrary
number of rounds. This allows for more freedom in the choice of
the MPC components and hence for zero-knowledge systems with
different efficiency features.
After this, we instantiate this general system with a very simple
MPC protocol with low communication complexity in order to
minimize both the proof length and prover complexity.
A common way to design concretely efficient MPCitH protocols
is to instantiate the MPC component with efficient MPC building
blocks, as done in KKW [30] and BN [5]. While this approach can
be seen as the most natural, it may not hold that efficient MPC
protocols lead to the most efficient MPCitH counterpart. Instead,
we use a protocol that is specifically designed to fit in the MPCitH
framework, i.e. with a single party knowing all inputs and with
minimal communication complexity. At a high level, we define
a protocol with only one computing party, where the role of the
remaining parties is only to check that the circuit evaluation was
done correctly. Note that the underlying MPC component used in
the Ligero family [2, 11] respects this same model, but with very dif-
ferent security guarantees and “checking method”. While the goal
of [2, 11] was to achieve succinctness (still with competitive run-
ning times), we aim to have a better concrete balance between proof
size and prover complexity. When we compile our zero-knowledge
Post-quantum Signature Schemes. We use our zero-knowledge
argument protocol to describe a Picnic-like post-quantum signature
scheme. Picnic is one of the alternate candidates in Round Three
of the NIST Post-quantum Standardization process and, as proved
in a recent work by Cremers et al. [20], is the one (together with
CRYSTALS-Dilithium [33]) offering the strongest security guaran-
tees among the six finalists. Picnic uses an MPCitH zero-knowledge
protocol to prove knowledge of a secret key k such that 𝐹k(𝑥) = 𝑦,
where 𝐹k is a one-way function. In practice, Picnic uses LowMC [1]
as the underlying OWF, hence basing its security on non-standard
assumptions. Replacing LowMC with a more standard cipher, such
as AES, increases the proof size significantly. The BBQ protocol [21]
shows how to reduce this overhead when AES is used instead of
LowMC, using the same underlying MPC protocol as in Picnic [30],
but basing the computation on F28 rather than F2, i.e. focusing on
S-boxes rather than individual AND gates. BBQ signatures are how-
ever still at least two times larger than Picnic ones. The more recent
proposal of Banquet further reduces this gap using an underlying
MPC protocol similar to the one used in this work [3].
Assuming an additive secret-sharing scheme, our protocol first
has an input and evaluation phase where a single sender party per-
forms the actual computation of the circuit, “injecting” the values
needed to evaluate non-linear gates to the remaining server parties,
after distributing the shares of the inputs. Given those values, all
the server parties can then perform a local evaluation of the circuit
on their own shares to compute their shares of the circuit output.
After this phase, the server parties check that the injected values
are correct, i.e. that the circuit has been correctly evaluated. This
phase also requires injected values from the sender party and does
not require any communication between the server parties, but
only access to a random coin functionality. The check protocol that
we use is an adaptation from [15, 16, 27] and concretely allows
to test whether multiplication gates were correctly evaluated by
checking the correctness of the corresponding multiplicative triples.
Roughly speaking, the main difference between our MPC protocol
and the one used in Banquet is in the way the correctness of the
multiplication gates is tested.
Overall, we achieve better running times compared to Ban-
quet [3] and comparable signature size. More importantly, our
generalized approach offers a framework for MPCitH signature
schemes that could hopefully lead to new improvements to Picnic-
like signatures with different instantiations of the main building
blocks.
Optimizations. It is common practice to reduce the soundness
error of a zero-knowledge proof by repeating, either in parallel
or sequentially, the protocol a certain number of times. However,
this approach significantly increases the complexity of the system
both computationally and in communication. Instead, we improve
the soundness of our general interactive construction by running
the underlying MPC evaluation protocol multiple times in parallel
and then checking these evaluations using the same public coin
functionality shared across all of them. We then apply this general
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3023𝑛
16
32
64
128
Reps.
11
9
7
6
53
77
113
188
25
39
50
92
47
71
104
178
21.1
35
44
82
42229
34604
26971
23157
Our SHA 256
Prover (ms)
1 thread
4 threads
Verifier (ms)
1 thread
4 threads Communication (bytes)
Table 1: Our performance for SHA-256 pre-image proof of knowledge with soundness 2−40 for 𝑛 parties. Reps is the number of repetitions.
technique to our protocol. This approach allows for implementa-
tion optimizations and better concrete performance. In particular,
this improves prover time by roughly 7–10% compared to naïvely
repeating the protocol.
We can use this technique to also improve the performance in
the multi-instance case. In Appendix A, we sketch different options
to deal with this case efficiently.
Going beyond the gate-by-gate approach. We explore elements
which enable our protocol to move beyond the gate-by-gate para-
digm. Already in the application to AES-based signatures, similarly
to BBQ and Banquet, our protocol considers S-box operations as the
unit of computation (1 inverse over F28; rather than 32 AND gates
over F2). Taking this approach allows for greater improvements
than only improving binary circuits at the AND-gate level.
In Section 7 we further continue in this direction by adapting our
protocol to the verification of inner products and matrix multiplica-
tions. Considering these larger operations again allows for specific
optimizations to be made which provide significant improvements
over their gate-by-gate implementation. Using this approach we
can prove multiplication of two 256 × 256 matrices in 20s (resp.
11s) with one thread (resp. 4 threads); this requires only 340KB of
total communication: a 38x improvement compared to the naïve
approach which would require 2563 AND gates.
Concrete Efficiency. We present a detailed concrete analysis of
both the communication and the computational cost of our proto-
cols, and measure the concrete efficiency of our construction and
compare it with other MPCitH-based systems.
Both our interactive and non-interactive variants work for arith-
metic and Boolean circuits, however, since the checking phase of
our protocol requires a large field, our construction is inherently
more efficient when used for arithmetic circuits over such large
finite fields. Nevertheless, to better compare our protocols with
systems such as KKW, and use it for post-quantum signatures, we
run most of our tests over very small fields, namely F2 and F28.
Our system depends on many parameters and is very flexible; we
can trade communication for computation in a significant way by
changing the number of parties in the MPC protocol, the extension
field or other settings in the checking phase.
Concretely, to verify one instance of SHA-256 preimage, with
40 bits of security, our system requires 53ms for the prover and
43KB of communication when the number of parties is 𝑛 = 16, and
188ms and 23 KB, respectively, when 𝑛 = 128 (see Table 1). This
represents a 3x improvement in computation time (with comparable
communication) over the Ligero system (44KB of communication
and 140ms of running time for the same circuit). Using 4 threads
we further reduce prover computation time to 25ms.
We also compare the performance of our protocol with KKW and
its recent highly optimized implementation, Reverie [34]. Although
our current implementation is incomparable with Reverie, we show
that our performance are already very close to those of Reverie. We
plan to apply some of the techniques used in Reverie to improve
our implementation in future works. Overall, we improve KKW in
both proof size and run times.
Our implementation also shows that our signature scheme has