92690
85544
91438
205984
239018
308643
313488
313442
319834
346884
450004
412563
422170
797643
898387
1646
1492
1436
1585
1666
1566
1402
1573
1915
2377
7
7
7
7
7
7
7
7
7
7
0
0
0
0
0
0
0
0
0
0
47
61
59
62
66
54
64
56
68
71
1507
1452
1485
1506
1560
1365
1274
1293
1768
2085
Average
219
7
29
104971
458305
175207
0
1654
62
1545
97
2560
1672
19959
4175
65628
62
J. Zeng et al.
in column |F C|. We can notice that there are many context sensitive tap points
because diﬀerent syntactic types (which is from the same semantic type) use the
same P C for the allocation, but in diﬀerent calling context. We can also notice
some tap points can be used to delete diﬀerent type of object (e.g., in Linux ker-
nel 2.6.32.8, there are 1566 syntactic types allocated, but it only requires 1365
deletion tap points), and there are too many object traversal tap points, which
proves it will be extremely diﬃcult to identify them with just purely manual
analysis. Regarding how to use the derived tap points, we present a case study
in Sect. 5.
Result for Semantic Types. As shown in Table 2, there are too many tap
points. To really use them for introspection, we have to select the ones of our
interest. Therefore, we have to get the tap points based on the semantic types.
We take Linux-2.6.32.8 as an example, and describe in greater details how this
is achieved.
For Linux-2.6.32.8, as our syntactic type is an over-split of the semantic types
(i.e., multiple syntactic types can correspond to just one semantic type), our
technique eventually resolved the semantic types of 87.6 % (1372/1566) of the
syntactic types. Once we have resolved the semantic types, we have to iterate our
tap points uncovering again for each semantic types using the same algorithm
described in Sect. 3.3.
Take task struct as an example, before applying the semantic types, we
acquired 6 diﬀerent syntactic types of task struct, namely, each of these is
created in a diﬀerent call-chain. The (64-bit) integer encoding of these syntac-
tic types are presented in the ﬁrst column of Table 3. For object creation, each
of these syntactic types has a context-sensitive tap point, and none of them
is context-insensitive; similar result also applies to object deletion. For recur-
sive traversal, we observed the 3rd syntactic type of task struct has a heavy
recursive traversal. Compared with other syntactic type, this one has many more
task struct instances. For non recursive type traversal, each syntactic type has
a lot of context-sensitive pointer read. Finally, for the object ﬁeld (i.e., non-
pointer) read, we can notice most of their tap points are context sensitive.
Table 3. Tap points statistics for 6 diﬀerent syntactic types of task struct.
Creation Deletion
|P C|
|F C|
1
|P C|
0
|F C|
1
RT raversal NT raversal FREAD
|P C|
0
|F C|
9
|P C|
3
|F C|
102
|P C|
1
|F C|
299
Syntactic type
4dd23b5e689e2ad7 0
536881ec388d6516 0
7554a8d7acf81704 0
8649536d24938b96 0
9ac37673946479aa 0
9d41a458fa47a47b 0
1
1
1
1
1
0
0
0
0
0
1
1
1
1
1
1
41
0
0
0
7
131
0
30
0
20
403
0
0
2
225
402
304
136
289
36
435
1
14
0
420
563
437
318
448
Automatic Uncovering of Tap Points from Kernel Executions
63
Table 4. The statistics for the uncovered tap points for the observed semantic types
of linux-2.6.32.8 in slab/slub allocators
#Syntactic Creation Deletion RT raversal NT raversal
FRead
Type
1024
50
24
38
27
8
235
395
1023
|P C| |F C| |P C| |F C| |P C| |F C| |P C| |F C| |P C| |F C|
24
1
4
1
0
1
32
1
137
84
36
15
1
3
0
8
161
161
34
30
26
30
7
2
10
262
348
1
3
41
4
3
113
0
0
95
0
3
49
194
2
0
1
4
36
0
1
3
0
1
1
3
10
24
9
0
725
15
0
0
0
5
21
113
74
0
29
4
0
11
1
1
76
152
64
18
0
0
7
22
321
74
38
1
17
25
227
9
5
28
66
6
7
21
15
0
8
3
7
0
11
8
28
4
21
15
17
1
0
12
2
0
0
118
113
23
155
6
70
89
148
59
123
0
1
15
164
197
136
580
1
113
41
352
44
15
25
50
33
31
63
37
107
24
2
25
66
265
8
352
53
423
39
106
19
16
24
22
7
98
2
0
0
0
0
0
84
7
0
8
2
0
0
0
0
0
1
0
3
0
0
0
13
80
6
6
0
11
0
4
0
2
0
19
0