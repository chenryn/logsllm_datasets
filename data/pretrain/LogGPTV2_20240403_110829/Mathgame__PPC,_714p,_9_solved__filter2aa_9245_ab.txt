                    self.cubes[length - i][length - j] = self.cubes[j][length - i]
                    self.cubes[j][length - i] = tmp
            self.calculate_hashes()
        def print_face(self):
            for i in range(len(self.cubes)):
                print(' '.join([str(x) for x in self.cubes[i]]))
            print()
    faces = []
    for side in sides:
        f = Face(side)
        faces.append(f)
    A = faces[0]
    SIDES = [None] * 4
    TOP = None
    for f in faces[1:]:
        print("new face")
        try:
            a_pos, f_pos = find_match(A.hashes, f.hashes)
            print(DIRECTIONS[a_pos], DIRECTIONS[f_pos])
            SIDES[a_pos] = f
            while a_pos != (f_pos + 2) % 4:
                f.turn_clockwise()
                a_pos, f_pos = find_match(A.hashes, f.hashes)
                print(DIRECTIONS[a_pos], DIRECTIONS[f_pos])
        except TypeError:
            print("bee")
            TOP = f
    # align top
    UP_POS, TOP_pos = find_match(SIDES[0].hashes, TOP.hashes)
    print(DIRECTIONS[UP_POS], DIRECTIONS[TOP_pos])
    while UP_POS != (TOP_pos + 2) % 4:
        TOP.turn_clockwise()
        UP_POS, TOP_pos = find_match(SIDES[0].hashes, TOP.hashes)
        print(DIRECTIONS[UP_POS], DIRECTIONS[TOP_pos])
    cubes = {}
    # process bottom
    BOTTOM = A
    print("Bottom")
    for i in range(7):
        for j in range(7):
            x = i
            y = j
            z = 0
            if (x, y, z) in cubes:
                assert cubes[(x, y, z)] == BOTTOM.cubes[j][i]
            cubes[(x, y, z)] = BOTTOM.cubes[j][i]
    ############################################################
    BACK = SIDES[0]
    print("Front")
    for i in range(7):
        for j in range(7):
            x = i
            y = 0
            z = 6 - j
            if (x, y, z) in cubes:
                assert cubes[(x, y, z)] == BACK.cubes[j][i]
            cubes[(x, y, z)] = BACK.cubes[j][i]
    ############################################################
    RIGHT = SIDES[1]
    print("Right")
    for i in range(7):
        for j in range(7):
            x = 6
            y = j
            z = i
            if (x, y, z) in cubes:
                assert cubes[(x, y, z)] == RIGHT.cubes[j][i]
            cubes[(x, y, z)] = RIGHT.cubes[j][i]
    ############################################################
    FRONT = SIDES[2]
    print("Back")
    for i in range(7):
        for j in range(7):
            x = i
            y = 6
            z = j
            if (x, y, z) in cubes:
                assert cubes[(x, y, z)] == FRONT.cubes[j][i]
            cubes[(x, y, z)] = FRONT.cubes[j][i]
    ############################################################
    LEFT = SIDES[3]
    print("Left")
    for i in range(7):
        for j in range(7):
            x = 0
            y = j
            z = 6 - i
            if (x, y, z) in cubes:
                assert cubes[(x, y, z)] == LEFT.cubes[j][i]
            cubes[(x, y, z)] = LEFT.cubes[j][i]
    ############################################################
    TOP = TOP
    print("Top")
    for i in range(7):
        for j in range(7):
            x = i
            y = 6 - j
            z = 6
            if (x, y, z) in cubes:
                assert cubes[(x, y, z)] == TOP.cubes[j][i]
            cubes[(x, y, z)] = TOP.cubes[j][i]
    print(len((filter(lambda x: x % 2 == 0, cubes.values()))))
    print(cubes)
    return cubes
def find_specials(matrix):
    odds = list(filter(lambda x: x[1] % 2 == 1, matrix.items()))
    print(len(odds))
    if len(odds) == 7:
        return odds
    evens = list(filter(lambda x: x[1] % 2 == 0, matrix.items()))
    print(len(evens))
    if len(evens) == 7:
        return evens
    primes = list(filter(lambda x: is_prime(x[1]), matrix.items()))
    print(len(primes))
    if len(primes) == 7:
        return primes
    non_primes = list(filter(lambda x: is_prime(x[1]) is False, matrix.items()))
    print(len(non_primes))
    if len(non_primes) == 7:
        return non_primes
    primes = get_primes(1000000)
    three_divisors = list(filter(lambda x: len(factor_p(x[1], primes, 100000)[0]) == 3, matrix.items()))
    print(len(three_divisors))
    if len(three_divisors) == 7:
        return three_divisors
    small = list(filter(lambda x: x[1]  0 and intersection not in line1 and intersection not in line2 and is_internal_cube(intersection):
                    intersections.add(intersection)
    print('all internal intersections', intersections)
    return list(intersections)[0]
def main():
    while True:
        try:
            s = nc("47.75.60.212", 11011)
            data = receive_until_match(s, "Please give me str", None)
            p = PoW(data)
            send(s, p)
            print(receive_until_match(s, "you will get the flag.", None))
            while True:
                x = receive_until_match(s, "------------------------------------------------------------------------------", None)
                print(x)
                question_data = receive_until_match(s, "Please enter the coordinates of the answer:", None)
                print(question_data)
                if "N1CTF" in x or "N1CTF" in question_data:
                    interactive(s)
                matrix = parse_data(question_data)
                specials = find_specials(matrix)
                print('specials', specials)
                specials_coords = [x[0] for x in specials]
                intersection_point = find_perpendicular_crossing(specials_coords)
                print('intersection at', intersection_point)
                for i in range(3):
                    send(s, str(intersection_point[i]))
        except:
            pass
main()
```
In the end the hardest part was parsing the input data and assigning coordinates to numbers.
This was because the walls would have random rotations and random positions, so we had to match them by edges.
After that the calculations were pretty simple:
1. Find special points
2. Calculate vectors between each pair
3. Find perpendicular vectors (dot product of such vectors is 0)
4. Find intersection between two lines indicated by 4 points we have (2 points per vector)
5. If intersection crosses an internal cube then consider this a proper solution
It took a couple of minutes but we finally got: `N1CTF{This_1s_a_1j_Math_Game4!}`