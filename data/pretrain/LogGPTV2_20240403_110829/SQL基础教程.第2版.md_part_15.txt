语法3-4 ORDER BY子句
SELECT , , , ……
FROM 
ORDER BY , , ……
例如，按照销售单价由低到高，也就是升序排列时，请参见代码清单
3-28。
代码清单3-28 按照销售单价由低到高（升序）进行排列
SELECT product_id, product_name, sale_price, purchase_price
FROM Product
ORDER BY sale_price;
执行结果
product_id | product_name | sale_price | purchase_price
----------+---------------+-------------+---------------
0008 | 圆珠笔 | 100 |
销售单价的升序
0006 | 叉子 | 500 |
0002 | 打孔器 | 500 | 320
0007 | 擦菜板 | 880 | 790
0001 | T恤衫 | 1000 | 500
0004 | 菜刀 | 3000 | 2800
0003 | 运动T恤 | 4000 | 2800
0005 | 高压锅 | 6800 | 5000
不论何种情况，ORDER BY子句都需要写在SELECT语句的末尾。这
是因为对数据行进行排序的操作必须在结果即将返回时执行。ORDER BY
KEYWORD 子句中书写的列名称为排序键。该子句与其他子句的顺序关系如下所示。
●排序键
子句的书写顺序 ▲
1. SELECT子句 → 2. FROM子句 → 3. WHERE子句 → 4. GROUP BY子句 →
5. HAVING子句 → 6. ORDER BY子句
● 110 第3章 聚合与排序
法则3-15
ORDER BY子句通常写在SELECT语句的末尾。
不想指定数据行的排列顺序时，SELECT语句中不写ORDER BY子
句也没关系。
指定升序或降序
KEYWORD 与上述示例相反，想要按照销售单价由高到低，也就是降序排列时，
●降序
可以参见代码清单3-29，在列名后面使用DESC关键字。
●DESC关键字
代码清单3-29 按照销售单价由高到低（降序）进行排列
SELECT product_id, product_name, sale_price, purchase_price
FROM Product
ORDER BY sale_price DESC;
执行结果
product_id | product_name | sale_ price | purchase_ price
------------+--------------+------------+---------------
0005 | 高压锅 | 6800 | 5000
0003 | 运动T恤 | 4000 | 2800
0004 | 菜刀 | 3000 | 2800
0001 | T恤衫 | 1000 | 500
0007 | 擦菜板 | 880 | 790
0002 | 打孔器 | 500 | 320
0006 | 叉子 | 500 |
0008 | 圆珠笔 | 100 |
如上所示，这次销售单价最高（6800日元）的高压锅排在了第一位。
KEYWORD 其实，使用升序进行排列时，正式的书写方式应该是使用关键字ASC，
●ASC关键字
但是省略该关键字时会默认使用升序进行排序。这可能是因为实际应用中
按照升序排序的情况更多吧。ASC和DESC是ascendent（上升的）和
descendent（下降的）这两个单词的缩写。
法则3-16
未指定ORDER BY子句中排列顺序时会默认使用升序进行排列。
3-4 对查询结果进行排序 111 ●
由于ASC和DESC这两个关键字是以列为单位指定的，因此可以
同时指定一个列为升序，指定其他列为降序。
指定多个排序键
本节开头曾提到过对销售单价进行升序排列的SELECT语句（代码
清单3-28）的执行结果，我们再来回顾一下。可以发现销售单价为500日
元的商品有2件。相同价格的商品的顺序并没有特别指定，或者可以说是
随机排列的。
如果想要对该顺序的商品进行更细致的排序的话，就需要再添加一个
排序键。在此，我们以添加商品编号的升序为例，请参见代码清单3-30。
代码清单3-30 按照销售单价和商品编号的升序进行排序
SELECT product_id, product_name, sale_price, purchase_price
FROM Product
ORDER BY sale_price, product_id;
执行结果
product_id | product_name | sale_price | purchase_price
----------+---------------+-------------+---------------
0008 | 圆珠笔 | 100 |
0002 | 打孔器 | 500 | 320
价格相同
0006 | 叉子 | 500 |
时按照商
0007 | 擦菜板 | 880 | 790
0001 | T恤衫 | 1000 | 500 品编号的
0004 | 菜刀 | 3000 | 2800 升序排列
0003 | 运动T恤 | 4000 | 2800
0005 | 高压锅 | 6800 | 5000
这样一来，就可以在ORDER BY子句中同时指定多个排序键了。
规则是优先使用左侧的键，如果该列存在相同值的话，再接着参考右侧的
键。当然，也可以同时使用3个以上的排序键。
的顺序
NULL
在此前的示例中，我们已经使用过销售单价（sale_price列）
作为排序键了，这次让我们尝试使用进货单价（purchase_price列）
● 112 第3章 聚合与排序
作为排序键吧。此时，问题来了，圆珠笔和叉子对应的值是NULL，究竟
NULL会按照什么顺序进行排列呢？NULL是大于100还是小于100呢？
或者说5000和NULL哪个更大呢？
请大家回忆一下我们在第2章中学过的内容（2-2节）。没错，不能对
NULL使用比较运算符，也就是说，不能对NULL和数字进行排序，也不
能与字符串和日期比较大小。因此，使用含有NULL的列作为排序键时，
NULL会在结果的开头或末尾汇总显示（代码清单3-31）。
代码清单3-31 按照进货单价的升序进行排列
SELECT product_id, product_name, sale_price, purchase_price
FROM Product
ORDER BY purchase_price;
执行结果
product_id | product_name | sale_price | purchase_price
----------+---------------+-------------+--------------
0002 | 打孔器 | 500 | 320
0001 | T恤衫 | 1000 | 500
0007 | 擦菜板 | 880 | 790
0003 | 运动T恤 | 4000 | 2800
0004 | 菜刀 | 3000 | 2800
NULL会汇集
0005 | 高压锅 | 6800 | 5000
在开头或者
0006 | 叉子 | 500 |
末尾
0008 | 圆珠笔 | 100 |
究竟是在开头显示还是在末尾显示，并没有特殊规定。某些DBMS
中可以指定NULL在开头或末尾显示，希望大家对自己使用的DBMS的
功能研究一下。
法则3-17
排序键中包含NULL时，会在开头或末尾进行汇总。
在排序键中使用显示用的别名
在3-2节“常见错误②”中曾介绍过，在GROUP BY子句中不能使用
SELECT子句中定义的别名，但是在ORDER BY子句中却是允许使用别
名的。因此，代码清单3-32中的SELECT语句并不会出错，可正确执行。
3-4 对查询结果进行排序 113 ●
代码清单3-32 ORDER BY子句中可以使用列的别名
SELECT product_id AS id, product_name, sale_price AS sp, purchase
_price
FROM Product
ORDER BY sp, id;
表示下一行接续本行，只是由于版面所限而换行。
上述SELECT语句与之前按照“销售单价和商品编号的升序进行排
列”的SELECT语句（代码清单3-31）意思完全相同。
执行结果
id | product_name | sp | purchase_price
------+---------------+------+---------------
0008 | 圆珠笔 | 100 |
0002 | 打孔器 | 500 | 320
0006 | 叉子 | 500 |
0007 | 擦菜板 | 880 | 790
0001 | T恤衫 | 1000 | 500
0004 | 菜刀 | 3000 | 2800
0003 | 运动T恤 | 4000 | 2800
0005 | 高压锅 | 6800 | 5000
不能在GROUP BY子句中使用的别名，为什么可以在ORDER BY
子句中使用呢？这是因为SQL语句在DBMS内部的执行顺序被掩盖起来
了。SELECT语句按照子句为单位的执行顺序如下所示。
使用HAVING子句时SELECT语句的顺序 ▲
FROM→WHERE→GROUP BY→HAVING→SELECT→ORDER BY
这只是一个粗略的总结，虽然具体的执行顺序根据DBMS的不同而
不同，但是大家有这样一个大致的印象就可以了。一定要记住SELECT子
句的执行顺序在GROUP BY子句之后，ORDER BY子句之前。因此，在执
行GROUP BY子句时，SELECT语句中定义的别名无法被识别A。对于
注A
也是因为这一原因，HAVING子 在SELECT子句之后执行的ORDER BY子句来说，就没有这样的问题了。
句也不能使用别名。
法则3-18
在ORDER BY子句中可以使用SELECT子句中定义的别名。
● 114 第3章 聚合与排序
子句中可以使用的列
ORDER BY
ORDER BY子句中也可以使用存在于表中、但并不包含在SELECT
子句之中的列（代码清单3-33）。
代码清单3-33 SELECT子句中未包含的列也可以在ORDER BY子句中使用
SELECT product_name, sale_price, purchase_price
FROM Product
ORDER BY product_id;
执行结果
product_name | sale_price | purchase_price
---------------+-------------+----------------
T恤衫 | 1000 | 500
打孔器 | 500 | 320
运动T恤 | 4000 | 2800
菜刀 | 3000 | 2800
高压锅 | 6800 | 5000
叉子 | 500 |
擦菜板 | 880 | 790
圆珠笔 | 100 |
除此之外，还可以使用聚合函数（代码清单3-34）。
代码清单3-34 ORDER BY子句中也可以使用聚合函数
SELECT product_type, COUNT(*)
FROM Product
GROUP BY product_type
ORDER BY COUNT(*);
也可以使用聚合函数
执行结果
product_type | count
---------------+------
衣服 | 2
办公用品 | 2
厨房用具 | 4
法则3-19
在ORDER BY子句中可以使用SELECT子句中未使用的列和聚合函数。
不要使用列编号
在ORDER BY子句中，还可以使用在SELECT子句中出现的列所对
3-4 对查询结果进行排序 115 ●
KEYWORD 应的编号，是不是没想到？列编号是指SELECT子句中的列按照从左到
●列编号
右的顺序进行排列时所对应的编号（1, 2, 3, …）。因此，代码清单3-35中
的两条SELECT语句的含义是相同的。
代码清单3-35 ORDER BY子句中可以使用列的编号
-- 通过列名指定
SELECT product_id, product_name, sale_price, purchase_price
FROM Product
ORDER BY sale_price DESC, product_id;
-- 通过列编号指定
SELECT product_id, product_name, sale_price, purchase_price
FROM Product
ORDER BY 3 DESC, 1;
上述第2条SELECT语句中的ORDER BY子句所代表的含义，就
是“按照SELECT子句中第3列的降序和第1列的升序进行排列”，这和
第1条SELECT语句的含义完全相同。
执行结果
product_id | product_name | sale_price | purchase_price
----------+---------------+-------------+----------------
0005 | 高压锅 | 6800 | 5000
0003 | 运动T恤 | 4000 | 2800
0004 | 菜刀 | 3000 | 2800
0001 | T恤衫 | 1000 | 500
0007 | 擦菜板 | 880 | 790
0002 | 打孔器 | 500 | 320
0006 | 叉子 | 500 |
0008 | 圆珠笔 | 100 |
虽然列编号使用起来非常方便，但我们并不推荐使用，原因有以下
两点。
第一，代码阅读起来比较难。使用列编号时，如果只看ORDER BY
子句是无法知道当前是按照哪一列进行排序的，只能去SELECT子句的
列表中按照列编号进行确认。上述示例中SELECT子句的列数比较少，
因此可能并没有什么明显的感觉。但是在实际应用中往往会出现列数很多
的情况，而且SELECT子句和ORDER BY子句之间，还可能包含很复杂
的WHERE子句和HAVING子句，直接人工确认实在太麻烦了。
注A 第二，这也是最根本的问题，实际上，在SQL-92A中已经明确指出
1992年制定的SQL标准。
该排序功能将来会被删除。因此，虽然现在使用起来没有问题，但是将来
● 116 第3章 聚合与排序
随着DBMS的版本升级，可能原本能够正常执行的SQL突然就会出错。
不光是这种单独使用的SQL语句，对于那些在系统中混合使用的SQL来
说，更要极力避免。
法则3-20
在ORDER BY子句中不要使用列编号。
练习题
3.1 请指出下述SELECT语句中所有的语法错误。
SELECT product_id, SUM(product_name)
-- 本SELECT语句中存在错误。
FROM Product
GROUP BY product_type
WHERE regist_date > '2009-09-01';
3.2 请编写一条SELECT语句，求出销售单价（sale_price列）合计值是
进货单价（purchase_price列）合计值1.5倍的商品种类。执行结果
如下所示。
product_type | sum | sum
--------------+-----+------