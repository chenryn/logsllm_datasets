### 个人简介
- **姓名**：刘镇东
- **别名**：yzddMr6
- **职位**：阿里云安全工程师
- **主要贡献**：
  - AntSword开发组核心成员
  - 开源工具As-Exploits、WebCrack、webshell-venom的作者
- **研究方向**：
  - Webshell攻防研究
  - 阿里云恶意文本检测引擎的建设
- **联系方式**：
  - Github: [yzddMr6](https://github.com/yzddMr6)
  - Blog: [yzddmr6.com](http://yzddmr6.com)
  - CTF团队: L3H_Sec

### Webshell攻防概述
- **定义**：Webshell通常被视为获取系统权限的第一步。
- **重要性**：Java Webshell在攻防演练中占据重要地位。
- **挑战**：随着防护设备的不断升级，攻击者如何逃避检测成为关键问题。

### Tomcat解析篇
#### Unicode混淆
- **技术细节**：
  - 在JSP中，可以使用Unicode或变形Unicode（`\uuuuuuxxxx`）格式对恶意代码进行混淆。
  - 如果Webshell检测引擎没有正确解码这些字符，就会被绕过。
  - 这种混淆方式已被广泛使用，大多数安全设备已支持检测。
- **常见问题解答**：
  - **Q**：为什么支持Unicode写法？
    - **A**：Javac/ecj在底层解析字符时支持Unicode编码。
  - **Q**：为什么支持`\uuuuuu`这种格式？
    - **A**：解析过程中，只要`\`后的字符是`u`，编译器会继续循环读取下一个字符。
- **相关代码**：
  - Javac: `com.sun.tools.javac.parser.UnicodeReader#convertUnicode`
  - ecj: `org.eclipse.jdt.internal.compiler.parser.Scanner#getNextUnicodeChar`

#### 特殊字符集编码
- **技术细节**：
  - Tomcat内部支持许多小众字符集编码。
  - 如果检测引擎不支持这些字符集，它们将被视为无法识别的乱码。
  - 使用特殊字符集构造Webshell可以实现“降维打击”。
- **解析过程**：
  - `org.apache.jasper.compiler.ParserController#doParse` (开始页面解析)
  - `org.apache.jasper.compiler.ParserController#determineSyntaxAndEncoding` (分析文件编码)
  - `org.apache.jasper.compiler.EncodingDetector` (通过BOM头判断编码)
  - `org.apache.jasper.compiler.ParserController#getPageEncodingForJspSyntax` (从声明中提取编码类型)

- **常见字符集**：
  - UTF-8 (默认值)
  - ISO-8859-1 (默认值)
  - 其他特殊字符集（如UTF-16LE, UTF-16BE, ISO-10646-UCS-4, CP037等）

- **示例**：
  - 编码前：`Runtime.getRuntime().exec(request.getParameter("cmd"));`
  - 编码后：（具体编码后的结果）

- **常见问题解答**：
  - **Q**：Tomcat到底支持多少编码？
    - **A**：在JDK 8 + Tomcat 8.5下，共支持900多种编码。
  - **Q**：有多少编码可以被利用？
    - **A**：经过逐个分析和归一化处理，发现十余种编码可用于构造混淆Webshell。
- **可利用编码**：
  - 单字节编码：cp037、cp290等
  - 2或4字节编码：utf-16le, utf-16be等
  - 4字节编码：utf-32le, utf-32be等

- **字符集别名**：
  - 例如，cp290有多个别名：ibm290, ibm-290, csIBM290, EBCDIC-JP-kana, 290等。

- **发现的BUG**：
  - 在分析JDK底层支持编码的过程中，发现了一个潜藏于JDK数十年的编码转换BUG。
  - 该BUG在最新的JDK 19中仍可复现，提交给JDK官方后已修复完毕。

#### 标签操作
- **技术细节**：
  - JSP在被Tomcat加载到内存之前，需要经过标签解析转换阶段。
  - 利用标签解析转换的特性，可以构造出几乎不可读的混淆样本。
  - 如果检测引擎不能正确处理，就可以实现“降维打击”。

- **JSP加载过程**：
  1. 从JSP文件中提取所有需要的信息。
  2. 将信息填充到Java模板文件中。
  3. 编译Java文件，生成class并加载。

- **关键点**：
  - JSP虽然不符合语法结构，但嵌套后的Java文件前后括号闭合，可以正常编译解析。
  - JSP在处理setProperty, useBean等属性时未对名称进行转义，导致在渲染模板时可以代码逃逸。
  - 插入的文本可以利用前后注释闭合，打破检测引擎的语法结构分析。

- **示例**：
  - JSP: `() {public String get() { try{String s = request.getParameter(\"cmd\");Process process = new ProcessBuilder().command(s.split(\" \")).start();} catch (Exception e) { e.printStackTrace();}return \"\";}}.get() + \"" property="*"/>`
  - 渲染为Java后: `org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("" + new java.util.function.Supplier() {public String get() { try{String s = request.getParameter("cmd");Process process = new ProcessBuilder().command(s.split(" ")).start();} catch (Exception e) { e.printStackTrace();}return "";}}.get() + ""), request);`

- **文件上传场景**：
  - 可用于绕过对某些代码的检测。

- **XML解析**：
  - Tomcat在识别Jspx文件后，会调用XML解析器来解析标签。
  - 可以利用XML字符串相关特性（如HTML实体编码、CDATA等）来实现绕过。

### 危险类篇
- **技术细节**：
  - Java是一门面向对象的语言，在其底层存在着各种复杂的调用。
  - 对于任意一个可以用来RCE的类，可以查找其底层实现类和上层包装类。
  - 调用不在黑名单中的类方法，可以绕过检测引擎。
- **示例**：
  - `java.lang.Runtime#exec -> sun.net.www.MimeLauncher#run`
  - `sun.security.krb5.internal.ccache.FileCredentialsCache#exec`
  - `com.sun.corba.se.impl.activation.ServerTableEntry#verify`

- **思考**：
  - 大多数函数方法修饰符是非Public的，这增加了反射调用函数的特征，增加被发现的风险。
  - 除了直接的`Runtime#exec`以外，是否还可以利用其他命令执行类？

通过以上内容，我们可以看到在Webshell攻防中，利用各种编码和标签操作可以有效绕过检测引擎。希望这些信息对您的研究有所帮助。