### Nels and Protocol Channels

In addition to messages, any protocol can open a channel for each operation. However, our analysis does not permit channels for all protocols.

### Amortized Costs and Storage Volume

As noted by the authors, if \( L = n^\epsilon \) for \( 0 < \epsilon < 1 \), the amortized costs become \( O(1) \). While this is true, in our analysis, the choice of \( L \) depends on the storage volume block size for I/O optimizations rather than the client's volatile storage capacity. Therefore, the costs remain logarithmic.

### Search Bandwidth and Tree State

The search bandwidth is heavily dependent on the current state of the tree. When the tree is completely unsorted (e.g., during the first query), all elements must be transferred to split the large root, and possibly internal nodes will also need to be split, requiring the transfer of \( N \) elements. 

When the tree is completely sorted (after a large number of uniform queries), the bandwidth will be similar to that of a standard B+ tree, i.e., \( O(L \log_L N + r) \). The average case is difficult to compute; however, the authors provide an upper bound on the bandwidth after \( n \) insertions and \( m \) queries: \( O(mL \log_L n + n \log_L m + n \log_L(\log n)) \).

### POPE Tree and I/O Optimization

The POPE tree is not optimized for I/O operations in the same way as a B-tree. Analyzing the search complexity and bandwidth complexity is challenging. In the worst-case scenario (first query), all blocks need to be accessed, resulting in \( O(N/B + r) \) I/O operations. In the best-case scenario, all nodes occupy exactly one block, and the I/O complexity is the same as with a B+ tree, i.e., \( O(\log_L N + r) \). The average case lies between these two extremes.

### Client Storage and Buffer Management

The client's persistent storage is minimal, storing only the encryption key. Volatile storage is bounded by \( L \). Practitioners should consider that buffers within a node are unsorted, leading to up to \( 2(L-1) \) extra entries in the query result, which the client must discard. After a large number of insertions, the first query will require the client to sort all \( N \) elements, resulting in different performance for cold and warm starts. Additionally, even to navigate an already structured tree, the server must send the entire \( L \)-sized chunks and ask for navigation directions at all levels.

### Intermediate Buffers and Subtree Traversal

[58] does not emphasize that after alternating insertions and queries, some intermediate buffers may not be empty, necessitating the inclusion of these buffers in communication between endpoints. This results in the traversal of the entire subtree between paths to endpoints, unlike the B+ tree, where only leaves are involved.

### Logarithmic-BRC Protocol

Demertzis et al. [20] introduced the "Logarithmic-BRC" protocol, which has I/O complexity dependent only on the result size, regardless of the database size. The core primitive is a Searchable Symmetric Encryption (SSE) scheme, where the server stores a specially encrypted keywords-to-documents map, and the client can query documents using keywords without the server learning either the keywords or the documents.

#### Construction and Query

The construction treats record values as documents and index ranges as keywords. A client builds a virtual binary tree over the domain of indices and assigns each record a set of keywords, which is the path from the record to the root. Upon a query, the client computes a coverâ€”a set of nodes whose sub-trees cover the requested range. The client sends these keywords to the SSE server, which returns encrypted documents. We chose the Best Range Cover (BRC) technique, which results in the fewest nodes and no false-positives. Kiayias et al. [42] have proven that the worst-case number of nodes for a domain of size \( N \) is \( O(\log N) \) and presented an efficient BRC algorithm.

#### Security and Implementation

In a snapshot setting, the security of this construction is that of the SSE. We used [14] and [13] SSE schemes, which leak only the database size and some initialization parameters, making them fully hiding in our setting. Additional access pattern leakage occurs during queries, but its exact implications remain an open research problem.

#### Communication and I/O Complexity

Communication involves the client sending at most \( \log_2 N \) keywords and the server responding with the exact result. For each keyword, the server queries the SSE scheme, which returns \( r \) documents. The I/O complexity of both SSE schemes is linear with the result size \( r \). The [13] scheme makes at most one I/O per result document in the worst-case and has extensions to improve I/O complexity, such as packing documents in blocks to fit I/O pages.

### Baseline Protocols

To contextualize the aforementioned protocols, we introduce two baseline protocols: an efficient and insecure construction (no encryption) and a maximally secure protocol (ORAM).

#### No Encryption

This protocol is a regular B+ tree without any Order-Revealing Encryption (ORE). It provides no security guarantees but is optimal in terms of efficiency. The B+ tree data structure is optimal in I/O usage, and there is no overhead in comparing elements inside the nodes.

#### ORAM

Oblivious RAM (ORAM) provides semantic security in a snapshot setting and provably hides the access pattern. Goldreich and Ostrovsky [25] introduced ORAM and proved its lower bound of logarithmic overhead per request. We use PathORAM [61], a state-of-the-art construction. In our baseline, B+ tree nodes are stored in ORAM, and the client communicates with ORAM to access nodes. This protocol is fully hiding in the snapshot model and hides the access pattern, but it incurs a logarithmic overhead, resulting in \( O(\log^2 N) \) complexity.

### Evaluation

All experiments were conducted on a single machine with macOS 10.14.2, an 8-Core 3.2GHz Intel Xeon W processor, 32 GB DDR4 ECC main memory, and a 1 TB SSD disk. The code is written in C# and runs on .NET Core 2.1.3.

#### Interactive Website

We host an interactive website [7] where researchers can run small-sized simulations. Users can select a protocol, cache size, and policy, supply their own data and query sets, and run the simulations. Simulations typically complete within seconds, and users can view the results.