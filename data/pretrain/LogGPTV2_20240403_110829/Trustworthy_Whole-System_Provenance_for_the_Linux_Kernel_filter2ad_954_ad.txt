14:
15:
16:
17: end procedure
end if
end for
if NumSrcs = 0 then
end for
return PB-DLP_PERMIT
if src in A then
NumSrcs−−
return PB-DLP_DENY
end if
end if
(cid:31) A ⊇ Srcs, deny.
(cid:31) A (cid:31)⊇ Srcs, permit.
5.1 Monitoring Phase
The goal of monitoring is to allow administrators to rea-
son about how sensitive data is stored and put to use on
their systems. The end product of the monitor phase is a
set of rules (a policy) that restrict the permissible ﬂows
for sensitive data sources. Monitoring is an ongoing pro-
cess in DLP, where administrators attempt to iteratively
improve protection against data leakage. The ﬁrst step is
to identify the data that needs protection. Identifying the
source of such information is often quite simple; for ex-
ample, a database of PCI or PII data. However, reliably
ﬁnding data objects that were derived from this source is
extraordinarily complicated using existing solutions, but
is simple now with LPM. To begin, we deﬁne a helper
function for system monitoring:
1. FindSuccessors(Entity): This function performs a
provenance graph traversal to obtain the list of data
objects derived from Entity.
FindSuccessors can then be used as the basis for a
function that summarizes the spread of sensitive data:
2. Report(Entity): List the locations that a target object
and its successors have propagated. This function is
deﬁned in Algorithm 1.
The information provided by Report is similar to the
data found in the Symantec DLP Dashboard [1], and
could be used as the backbone of a PB-DLP user inter-
face. Administrators can use this information to write a
PB-DLP policy or revise an existing one.
5.2 Enforcement Phase
Possessing a PB-DLP policy, the goal of the enforcement
phase is to prevent entities that were derived from sensi-
tive sources from being written to restricted locations. To
USENIX Association  
24th USENIX Security Symposium  327
9
do so, we need to inspect the object’s provenance to dis-
cover the entities from which it was derived. We deﬁne
the following helper function:
3. FindAncestors(Entity): This function performs a
provenance graph traversal to obtain the list of data
objects used in the creation of Entity.
FindAncestors can be then used as the basis for a func-
tion that prevents the spread of sensitive data:
4. ProvWrite(Entity, Destination, Rules): Write the tar-
get entity to the destination if and only if it is valid to
the provided rule set, as deﬁned in Algorithm 2.
5.3 File Transfer Application
In many enterprise networks that are isolated from the
Internet via ﬁrewalls and proxies, it is desirable to share
ﬁles with external users. File transfer services are one
way to achieve this, and provide a single entry/exit point
to the enterprise network where ﬁles being transferred
can be examined before being released.17
In the case
of incoming ﬁles, scans can check for known malware,
and in some cases, check for other types of malicious
behavior from unknown malware.
We implemented PB-DLP as a ﬁle transfer applica-
tion for provenance-aware systems using LPM’s Prov-
mon module. The application interfaced with LPM’s
SNAP recorder using a custom API. Before permitting
a ﬁle to be transmitted to a remote host, the application
ran a query that traversed WasDerivedFrom edges to re-
turn a list of the ﬁle’s ancestors, permitting the transfer
only if the ﬁle was not derived from a restricted source.
PB-DLP allows internal users to share data, while ensur-
ing that sensitive data is not exﬁltrated in the process.
Because provenance graphs continue to grow indeﬁ-
nitely over time, in practice the bottleneck of this appli-
cation is the speed of provenance querying. We evaluate
the performance of PB-DLP queries in Section 6.3.
5.4 PB-DLP Analysis
Below, we select two open source systems that approx-
imate label based and regular expression (regex) based
DLP solutions, and compare their beneﬁts to PB-DLP.
5.4.1 Label-Based DLP
The SELinux MLS policy [31] provides information ﬂow
security through a label-based approach, and could be
used to approximate a DLP solution without relying on
commercial products. Proprietary label-based DLP sys-
tems rely on manual annotations provided by users, re-
quiring them to provide correct labeling based on their
knowledge of data content. Using SELinux as an exem-
plar labeling system is therefore an extremely conserva-
tive approach to analysis.
Within an MLS system, each subject, and object, is
assigned a classiﬁcation level, and categories, or com-
partments. Consider an example system, with classi-
ﬁcation levels, {A,B} with A dominating B, and com-
partments {α,β}. We can model our policy as a lat-
tice, where each node in the lattice is a tuple of the
form {,{compartments}}. Once the policy
is deﬁned, it is possible to enforce the simple and *-
properties. If a user has access to data with classiﬁcation
level A, and compartment α, he cannot read anything in
compartment {β} (no read-up). Furthermore, when data
is accessed in A,{α}, the user cannot write anything to
B,{α} (no write-down).
In order to use SELinux’s MLS enforcement as a DLP
solution, the administrator conﬁgures the policy to en-
force the constraint that no data of speciﬁed types can
be sent over the network. However, this is difﬁcult in
practice. Consider an example system that processes PII.
The users of the system may need to access information,
such as last names, and send these to the payroll depart-
ment to ensure that each employee receives a paycheck.
Separately, the user may need to send a list of birthdays
to another user in the department to coordinate birthday
celebrations for each month. Either of these activities are
acceptable (Figure 5, Decision Condition 2). However,
it is common practice for organizations to have stricter
sharing policies for data that contains multiple forms of
PII, so while either of these identiﬁers could be transmit-
ted in isolation, the two pieces of information combined
could not be shared (Figure 5, Decision Condition 3).
The MLS policy cannot easily handle this type of data
fusion. In order to provide support for correctly label-
ing fused data, an administrator would need to deﬁne the
power set of all compartments within the MLS policy.
In the example above, the administrator would deﬁne the
following compartments: {}, {α}, {β}, {α,β}. In the
default conﬁguration SELinux supports 256 unique cate-
gories, meaning an SELinux DLP policy could only sup-
port eight types of data. Furthermore, the MLS policy
does not support deﬁning multiple categories within a
single sensitivity level18. This implies that the MLS pol-
icy cannot support having a security level for A,{α} and
for A,{α,β}. Instead, the most restrictive labeling must
be deﬁned to protect the data on the system. In contrast,
PB-DLP can support an arbitrary number of data fusions.
17 Two examples of vendors that provide this capability are FireEye
(http://www.ﬁreeye.com) and Accellion (http://www.accellion.com/)
18See
the
deﬁnition
of
level
statements
at http://
selinuxproject.org/page/MLSStatements
328  24th USENIX Security Symposium 
USENIX Association
10
1
Training_Data:0
Birth_Dates:0
SSNs:0
2
Used
Used
join Birth_Dates SSNs > PII_Data
WasGeneratedBy
3
PII_Data:0
Used
gzip PII_Data
WasGeneratedBy
4
PII_Data.gz:0
Figure 5: A provenance graph of PII data objects that are ﬁrst fused and then transformed. The numbers mark
DLP decision conditions. Objects marked by green circles should not be restricted, while red octagons should be
restricted. Label-Based DLP correctly handles data resembling PII (1,2) and data transformations (4), but struggles
with data fusions (3). Regex-Based DLP correctly identiﬁes data fusions (3), but is prone to incorrect handling of data
resembling PII (1) and fails to identify data transformations (4). PB-DLP correctly handles all conditions.
5.4.2 Regex-Based DLP
The majority of DLP software relies on pattern matching
techniques to identify sensitive data. While enterprise so-
lutions offer greater sophistication and customizability,
their fundamental approach resembles that of Cornell’s
Spider 7, a forensics tools for identifying sensitive per-
sonal data (e.g., credit card or social security numbers).
Because it is open source, we make use of Spider as an
exemplar application for regex-based DLP.
for
set of
identifying
PII,
social
potential
a
is pre-conﬁgured with a
Regex approaches are prone to false positives.
regular
Spider
e.g.,
expressions
se-
(\d{3}-\d{2}-\d{4}) identiﬁes
curity number. However,
it is common practice for
developers to generate and distribute training datasets
to aid in software testing (Figure 5, Decision Condition
1). Spider is oblivious to information ﬂows, instead
searching for content
that bears structural similarity
to PII, and therefore would be unable to distinguish
between true PII and training data. PB-DLP tracks the
propagation of data from its source onwards, and could
trivially differentiate between true PII and training sets.
Regex approaches are also prone to false negatives.
Even after the most trivial data transformations, PII and
PCI data is no longer identiﬁable to the Spider system
(Figure 5, Decision Condition 4), permitting its exﬁltra-
tion. To demonstrate, we generated a ﬁle full of ran-
dom valid social security numbers that Spider was able to
identify. We then ran gzip on the ﬁle and stored it in a
second ﬁle. Spider was unable to identify the second ﬁle,
but PB-DLP correctly identiﬁed both ﬁles as PII since the
gzip output was derived from a sensitive input.
6 Evaluation
We now evaluate the performance of LPM. Our bench-
marks were run on a bare metal server machine with 12
GB memory and 2 Intel Xeon quad core CPUs. The Red
Hat 2.6.32 kernel was compiled and installed under 3 dif-
ferent conﬁgurations: all provenance disabled (Vanilla),
Vanilla
LPM
Provmon
0.14 (0%)
0.21 (0%)
1.6 (2%)
0.14
0.21
1.57
2.75
0.25
1.37
380
873
2990
0.14 (0%)
0.32 (52%)
2.8 (78%)
3.91 (42%)
0.25 (0%)
1.39 (1%)
401 (6%)
911 (4%)
3113 (4%)
Test Type
Process tests, times in µseconds (smaller is better)
null call
null I/O
stat
open/close ﬁle
signal install
signal handle
fork process
exec process
shell process
File and memory latencies in µseconds (smaller is better)
ﬁle create (0k)
ﬁle delete (0k)
ﬁle create (10k)
ﬁle delete (10k)
mmap latency
protect fault
page fault
100 fd select
11.2 (-3%)
8.12 (-5%)
21.6 (-8%)
12 (-4%)
1053 (-1%)
0.3 (-6%)
0.016 (0%)
1.53 (0%)
15.8 (37%)
11.8 (39%)
28.8 (23%)
14.7 (18%)
1120 (5%)
0.346 (8%)
0.016 (0%)
1.53 (0%)
2.42 (-12%)
0.25 (0%)
1.29 (-6%)
396 (4%)
879 (1%)
3000 (0%)
11.5
8.51
23.4
12.5
1062
0.32
0.016
1.53
Table 1: LMBench measurements for LPM kernels. All