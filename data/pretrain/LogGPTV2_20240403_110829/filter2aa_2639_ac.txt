### 77-105: Zoom Lens and DC Motor Functions

**77. MoveZoomLensToTerminatePosition()**
- Moves the zoom lens to the terminate position.

**78. MoveZoomLensToMechaEdge()**
- Moves the zoom lens to the mechanical edge.

**78. SetZoomLensSpeedMode()**
- Sets the speed mode for the zoom lens.

**78. GetZoomLensCurrentPoint()**
- Retrieves the current point of the zoom lens.

**78. GetZoomLensCurrentPosition()**
- Retrieves the current position of the zoom lens.

**78. GetZoomLensTelePoint()**
- Retrieves the telephoto point of the zoom lens.

**78. GetZoomLensMechaEdgePosition()**
- Retrieves the mechanical edge position of the zoom lens.

**79. EnableZoomLensEncoderPowerControl()**
- Enables power control for the zoom lens encoder.

**79. DisableZoomLensEncoderPowerControl()**
- Disables power control for the zoom lens encoder.

**79. MoveDCMotorCW()**
- Moves the DC motor in a clockwise direction.

**79. MoveDCMotorCCW()**
- Moves the DC motor in a counterclockwise direction.

**79. SetPMByGpio()**
- Sets the PM (Power Management) by GPIO.

**79. ClearPMByGpio()**
- Clears the PM (Power Management) by GPIO.

**80. ClearPMByFs()**
- Clears the PM (Power Management) by file system.

**80. SetDCMotorWaitTime()**
- Sets the wait time for the DC motor.

### 80-106: Capture and Imager Functions

**80. Capture.Create()**
- Creates a capture object.

**80. ActivateImager()**
- Activates the imager.

**80. ActivateImagerXOne()**
- Activates the XOne imager.

**80. QuietImager()**
- Quiets the imager.

**81. CancelImager()**
- Cancels the imager.

**81. ChangeImagerToWholeParallel()**
- Changes the imager to whole parallel mode.

**81. ChangeImagerToWholeParallelBP()**
- Changes the imager to whole parallel BP mode.

**81. ChangeImagerToWideDraft()**
- Changes the imager to wide draft mode.

**81. ChangeImagerToFocusJet()**
- Changes the imager to focus jet mode.

**82. ChangeImagerToMangoPudding()**
- Changes the imager to mango pudding mode.

**82. ChangeImagerToSuperWideDraft()**
- Changes the imager to super wide draft mode.

**82. ChangeImagerToJetDraft()**
- Changes the imager to jet draft mode.

**82. ChangeImagerToJumboDraft()**
- Changes the imager to jumbo draft mode.

**82. ChangeImagerToHoneyFlash()**
- Changes the imager to honey flash mode.

**82. ChangeImagerToMillefeAdjust()**
- Changes the imager to millefe adjust mode.

**83. ChangeImagerToOITA XAVIER()**
- Changes the imager to OITA XAVIER mode.

**83. ChangeImagerToAlternateDraft()**
- Changes the imager to alternate draft mode.

**83. ChangeImagerToDigiconMode()**
- Changes the imager to digicon mode.

**83. ChangeImagerToUltraGhostQ()**
- Changes the imager to ultra ghost Q mode.

**83. ChangeImagerToMontblancWhole()**
- Changes the imager to Montblanc whole mode.

**83. ChangeImagerToMontblancMillefe()**
- Changes the imager to Montblanc millefe mode.

**84. ChangeGradeTable()**
- Changes the grade table.

**84. PointDefDetect()**
- Detects point defects.

**84. PointKizuCheck()**
- Checks for point kizu.

**84. GetDefectCount()**
- Retrieves the defect count.

**84. LineDefDetect()**
- Detects line defects.

**84. LineKizuCheck()**
- Checks for line kizu.

**85. SetMontblancVSize()**
- Sets the Montblanc vertical size.

**85. GetMontblancVSize()**
- Retrieves the Montblanc vertical size.

### 85-106: Electronic Flash (EF) and Exposure Control Functions

**85. EF.StartEFCharge()**
- Starts the electronic flash charge.

**85. EF.StopEFCharge()**
- Stops the electronic flash charge.

**85. EF.SetEFChargeTimeOut()**
- Sets the electronic flash charge timeout.

**85. EF.StartInternalPreFlash()**
- Starts the internal pre-flash.

**86. EF.StartInternalMainFlash()**
- Starts the internal main flash.

**86. EF.SetMainFlashTime()**
- Sets the main flash time.

**86. EF.IsChargeFull()**
- Checks if the charge is full.

**86. EF.AdjPreFlash()**
- Adjusts the pre-flash.

**86. EF.SetChargeMode()**
- Sets the charge mode.

**86. EF.SetFlashTime()**
- Sets the flash time.

**87. ExpCtrlTool.SetExpMode()**
- Sets the exposure mode.

**87. DevelopTool.DevelopTest()**
- Runs a development test.

**87. LiveImageTool.StartEVF()**
- Starts the EVF (Electronic Viewfinder).

**87. LiveImageTool.StartEVFFocusJet()**
- Starts the EVF in focus jet mode.

**87. LiveImageTool.StartEVFMF()**
- Starts the EVF in MF (Manual Focus) mode.

**87. LiveImageTool.StartEVFMovVGA()**
- Starts the EVF in VGA motion mode.

**88. LiveImageTool.StartEVFMovQVGA60()**
- Starts the EVF in QVGA 60fps motion mode.

**88. LiveImageTool.StartEVFMovQVGA()**
- Starts the EVF in QVGA motion mode.

**88. LiveImageTool.StartEVFMovQQVGA()**
- Starts the EVF in QQVGA motion mode.

**88. LiveImageTool.StartEVFMovXGA()**
- Starts the EVF in XGA motion mode.

**88. LiveImageTool.StartEVFMovHD()**
- Starts the EVF in HD motion mode.

**88. LiveImageTool.StopEVF()**
- Stops the EVF.

**89. LiveImageTool.StopMjpegMaking()**
- Stops MJPEG making.

**89. LiveImageTool.StartMjpegMaking()**
- Starts MJPEG making.

**89. LiveImageTool.DzoomTele()**
- Performs digital zoom to telephoto.

**89. LiveImageTool.DzoomWide()**
- Performs digital zoom to wide.

**89. LiveImageTool.StopDzoom()**
- Stops digital zoom.

**89. LiveImageTool.Pause()**
- Pauses the live image tool.

**90. LiveImageTool.Resume()**
- Resumes the live image tool.

**90. LiveImageTool.ChangeDzoom()**
- Changes the digital zoom.

**90. LiveImageTool.GetDzoomPosition()**
- Retrieves the digital zoom position.

**90. LiveImageTool.Jump()**
- Jumps to a specific position.

**90. AFTool.GetEVal()**
- Retrieves the E-value from the autofocus tool.

**90. E2LatOn()**
- Turns on the E2 latency.

### 91-106: Engine Driver and Display Device Functions

**91. EngineDriver.Create()**
- Creates an engine driver.

**91. EngDrvOut()**
- Outputs data from the engine driver.

**91. EngDrvIn()**
- Inputs data to the engine driver.

**91. EngDrvRead()**
- Reads data from the engine driver.

**91. EngDrvBits()**
- Reads bits from the engine driver.

**91. EngDrvReadDump()**
- Dumps read data from the engine driver.

**92. CreateLanguageMenu()**
- Creates a language menu.

**92. DeleteLanguageMenu()**
- Deletes a language menu.

**92. ShowLanguageNameList()**
- Shows the list of language names.

**92. SaveLanguageNameList()**
- Saves the list of language names.

**92. RegisterLanguageName()**
- Registers a new language name.

**93. DispDev.EnableEventProc()**
- Enables event processing for the display device.

**93. DispCon.ShowColorBar()**
- Shows a color bar on the display.

**93. DispCon.ShowFiveStep()**
- Shows a five-step pattern on the display.

**93. DispCon.ShowWhiteChart()**
- Shows a white chart on the display.

**93. DispCon.ShowBlackChart()**
- Shows a black chart on the display.

**93. DispCon.ShowBitmapColorBar()**
- Shows a bitmap color bar on the display.

**94. DispCon.ShowCustomColorBar()**
- Shows a custom color bar on the display.

**94. DispCon.SetDisplayType()**
- Sets the display type.

**94. DispCon.TurnOnDisplay()**
- Turns on the display.

**94. DispCon.TurnOffDisplay()**
- Turns off the display.

**94. DispCon.SetMaxBackLightBrightness()**
- Sets the maximum backlight brightness.

**94. DispCon.SetVideoAdjParameter()**
- Sets the video adjustment parameters.

**95. DispCon.GetVideoAdjParameter()**
- Retrieves the video adjustment parameters.

**95. DispCon.ShowVideoAdjParameter()**
- Shows the video adjustment parameters.

**95. DispCon.SaveVideoAdjParameter()**
- Saves the video adjustment parameters.

**95. DispCon.SetLcdGainAdjParameter()**
- Sets the LCD gain adjustment parameters.

**95. DispCon.GetLcdGainAdjParameter()**
- Retrieves the LCD gain adjustment parameters.

**95. DispCon.ShowLcdGainAdjParameter()**
- Shows the LCD gain adjustment parameters.

**95. DispCon.SaveLcdGainAdjParameter()**
- Saves the LCD gain adjustment parameters.

**96. LcdCon.SetLcdBackLightBrightness()**
- Sets the LCD backlight brightness.

**96. LcdCon.SetLcdBackLightParameter()**
- Sets the LCD backlight parameters.

**96. LcdCon.GetLcdBackLightParameter()**
- Retrieves the LCD backlight parameters.

**96. LcdCon.ShowLcdBackLightParameter()**
- Shows the LCD backlight parameters.

**96. LcdCon.SaveLcdBackLightParameter()**
- Saves the LCD backlight parameters.

**97. LcdCon.SetLcdDriver()**
- Sets the LCD driver.

**97. LcdCon.SetLcdAdjParameter()**
- Sets the LCD adjustment parameters.

**97. LcdCon.GetLcdAdjParameter()**
- Retrieves the LCD adjustment parameters.

**97. LcdCon.ShowLcdAdjParameter()**
- Shows the LCD adjustment parameters.

**97. LcdCon.SaveLcdAdjParameter()**
- Saves the LCD adjustment parameters.

**97. LcdCon.IsNewLcd()**
- Checks if the LCD is new.

**98. LcdCon.IsNewLcdType()**
- Checks if the LCD type is new.

**98. LcdCon.SetLcdParameter()**
- Sets the LCD parameters.

**98. LcdCon.GetLcdParameter()**
- Retrieves the LCD parameters.

**98. LcdCon.ShowLcdParameter()**
- Shows the LCD parameters.

**98. LcdCon.SaveLcdParameter()**
- Saves the LCD parameters.

**98. LcdCon.StartLcdPeriodicalSetting()**
- Starts periodic settings for the LCD.

**99. LcdCon.StopLcdPeriodicalSetting()**
- Stops periodic settings for the LCD.

### 99-110: Factory Adjustment (FA) Functions

**99. FA.Create()**
- Creates a factory adjustment object.

**99. InitializeAdjustmentSystem()**
- Initializes the adjustment system.

**99. InitializeAdjustmentFunction()**
- Initializes the adjustment function.

**99. TerminateAdjustmentSystem()**
- Terminates the adjustment system.

**99. InitializeTestRec()**
- Initializes the test record.

**100. TerminateTestRec()**
- Terminates the test record.

**100. ExecuteTestRec()**
- Executes the test record.

**100. ExecuteTestRecCF()**
- Executes the test record with CF (CompactFlash).

**100. InitializeDigicon()**
- Initializes the digicon.

**100. TerminateDigicon()**
- Terminates the digicon.

**100. ExecuteDigicon()**
- Executes the digicon.

**101. Initializedccd()**
- Initializes the CCD (Charge-Coupled Device).

**101. Terminatedccd()**
- Terminates the CCD.

**101. Executedccd()**
- Executes the CCD.

**101. GetdccdImage()**
- Retrieves the CCD image.

**101. GetdccdFilterValue()**
- Retrieves the CCD filter value.

**101. EnableDebugLogMode()**
- Enables debug log mode.

**102. DisableDebugLogMode()**
- Disables debug log mode.

**102. SetDefaultRecParameter()**
- Sets the default recording parameters.

**102. SetDefectRecParameter()**
- Sets the defect recording parameters.

**102. SetSensitiveRecParameter()**
- Sets the sensitive recording parameters.

**102. SetSensitiveDefectRecParameter()**
- Sets the sensitive defect recording parameters.

**102. InitializeSoundRec()**
- Initializes sound recording.

**103. TerminateSoundRec()**
- Terminates sound recording.

**103. StartSoundRecord()**
- Starts sound recording.

**103. FreeBufferForSoundRec()**
- Frees the buffer for sound recording.

**103. StartSoundPlay()**
- Starts sound playback.

**103. ShowTransparentMemory()**
- Shows the transparent memory.

**103. DumpTransparentMemoryItem()**
- Dumps a transparent memory item.

**104. AddTransparentMemory()**
- Adds a transparent memory item.

**104. AttachToTransparentMemory()**
- Attaches to the transparent memory.

**104. RemoveTransparentMemory()**
- Removes a transparent memory item.

**104. GetTransparentMemorySize()**
- Retrieves the size of the transparent memory.

**104. GetTransparentMemory()**
- Retrieves the transparent memory.

**104. GetTransparentMemoryPosition()**
- Retrieves the position of the transparent memory.

**105. StartFactoryModeController()**
- Starts the factory mode controller.

**105. IsFactoryMode()**
- Checks if the factory mode is active.

**105. SetFactoryMode()**
- Sets the factory mode.

**105. ClearFactoryMode()**
- Clears the factory mode.

**105. DisplayFactoryMode()**
- Displays the factory mode.

**105. UndisplayFactoryMode()**
- Hides the factory mode.

**106. IsDUIDFixFlag()**
- Checks if the DUID (Device Unique ID) fix flag is set.

**106. SetDUIDFixFlag()**
- Sets the DUID fix flag.

**106. ClearDUIDFixFlag()**
- Clears the DUID fix flag.

**106. CreateAdjustmentTableMirror()**
- Creates an adjustment table mirror.

**106. RefreshAdjustmentTableMirror()**
- Refreshes the adjustment table mirror.

**106. WRITEADJTABLETOFROM()**
- Writes the adjustment table to/from.

**107. LoadAdjustmentTable()**
- Loads the adjustment table.

**107. SaveAdjustmentTable()**
- Saves the adjustment table.

**107. SaveAdjustmentValue()**
- Saves the adjustment value.

**107. LoadAdjustmentValue()**
- Loads the adjustment value.

**107. ShowDefaultAdjTableVersion()**
- Shows the default adjustment table version.

**107. EraseAdjustmentArea()**
- Erases the adjustment area.

**108. DumpAdjMirror()**
- Dumps the adjustment mirror.

**108. GetAdjTableVersion()**
- Retrieves the adjustment table version.

**108. GetAdjTableMapVersion()**
- Retrieves the adjustment table map version.

**108. GetAdjTableValueVersion()**
- Retrieves the adjustment table value version.

**108. PrintAdjTableMap()**
- Prints the adjustment table map.

**108. AddAdjDataToFRom()**
- Adds adjustment data to FRom.

**109. DeviceUniqueIDCheckSum()**
- Checks the checksum of the device unique ID.

**109. LoadParamDataFromAdjTableBin()**
- Loads parameter data from the adjustment table binary.

**109. LoadDataFromAdjTableBin()**
- Loads data from the adjustment table binary.

**109. StartLogOut()**
- Starts logging out.

**109. StopLogOut()**
- Stops logging out.

**109. OutputLogToFile()**
- Outputs the log to a file.

**110. IsLogOutType()**
- Checks the log out type.

**110. FAPrintf()**
- Prints formatted text for factory adjustment.

**110. FADBGPrintf()**
- Prints debug formatted text for factory adjustment.

**110. CreateFADBGSingalID()**
- Creates a signal ID for factory adjustment debugging.

**110. FADBGSingal()**
- Sends a signal for factory adjustment debugging.

**110. PrintFirmVersion()**
- Prints the firmware version.

**111. PrintFaexeVersioin()**
- Prints the FA executable version.

**111. GetLogData()**
- Retrieves log data.

**111. GetLogDataOnlyAddMemory()**
- Retrieves log data only from added memory.

**111. ActivateAdjLog()**
- Activates the adjustment log.

**111. InactivateAdjLog()**
- Deactivates the adjustment log.

### 111-116: Examples and Firmware Dumping

**111. Examples**

**111. Print Skull**
- Example script to print a skull.

**112. Print Skull**
- Another example script to print a skull.

**114. Record Sound**
- Example script to record sound.

**115. Phantom Picture**
- Example script to create a phantom picture.

**116. Firmware Dumping**
- Information about dumping firmware.

### 0.1-0.1.4: Executing Scripts

**0.1.1 Format of the SD Card**
- The SD card must contain:
  1. The string "SCRIPT" at offset 0x1F0 of the first sector (Boot sector).
  2. The file "script.req" on the root directory, containing the string "for DC scriptdisk".
  3. The file "extend.m" on the root directory, containing the BASIC script to execute.

**0.1.2 Script extend.m**
- The script `extend.m` must contain the following subroutines:
  - `private sub Initialize ()`
    - Initialization code.
  - `private sub Terminate ()`
    - Ending code.

**0.1.3 Starting the Script**
- The script is called when the camera is in playback mode and the "set" key is pressed.

**0.1.4 Automatic Script**
- The following bash script enables powershot basic on an SD card and writes a test script to it.

```bash
#!/bin/bash
# Enable powershot-basic scripting on a memory card
if [ $# -ne 1 ]; then
  echo
  echo "Usage: ./makeScriptCard.sh [device]"
  echo
  echo "[device] is a fat32/fat16 partition on the memory card"
  echo "Example: ./makeScriptCard.sh /dev/sdb1"
  echo "NOTE: please run as root"
  exit 112
fi
```

This script checks if the correct number of arguments is provided and provides usage instructions.