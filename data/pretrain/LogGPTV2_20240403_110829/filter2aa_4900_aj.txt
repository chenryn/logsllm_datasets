.B fg
命令使它在前台继续运行，或
.B kill
命令将它杀死。\fB^Z\fP 会立即起作用，并且还有使等待中的 (pending) 输出和输入被忽略的附加副作用。
.PP
有很多方法来指代 shell 中的作业。字符
.B %
可以引入作业名。编号为
.I n
的作业可以用
.BR %n
的形式来指代。作业也可以用启动它的名称的前缀，或者命令行中的子字符串来指代。例如，
.B %ce
指代一个暂停的
.B ce
作业。如果前缀匹配多于一个作业，
.B bash
报错。另一方面，使用
.BR %?ce ,
可以指代任何命令行中包含字符串
.B ce
的作业。如果子字符串匹配多于一个作业，
.B bash
报错。符号
.B %%
和
.B %+
指代 shell 意义上的
.IR "current job"，当前作业，
也就是前台被暂停的最后一个作业，或者是在后台启动的作业。
.I "previous job"，前一作业
可以使用
.BR %\- 
来指代。在有关作业的输出信息中 (例如，命令
.B jobs
的输出)，当前作业总是被标记为
.BR + ,
前一作业标记为
.BR \- .
.PP
简单地给出作业名，可以用来把它放到前台：
.B %1
是
\fB``fg %1''\fP
的同义词，将作业 1 从后台放到前台。类似的，
.B ``%1 &''
在后台恢复作业 1，与
\fB``bg %1''\fP
等价。
.PP
当某个作业改变状态时，shell 立即可以得知。通常，
.B bash
等待直到要输出一个提示符时，才会报告作业的状态变化，从而不会打断其他输出。
如果启用了内建命令
.B set
的
.B \-b
选项，
.B bash
将立即报告这些变化。对
.SM
.B SIGCHLD
信号的陷阱将在每个子进程退出时执行。
.PP
如果在作业暂停时试图退出
.B bash，
shell 打印一条警告消息。命令
.B jobs
可能被用来检查作业的状态。如果再次试图退出，中间没有其他命令，shell 不会打印
其他警告，暂停的作业将终止。
.SH 提示符(PROMPTING)
在交互执行时，
.B bash
在准备好读入一条命令时显示主提示符
.SM
.B PS1，
在需要更多的输入来完成一条命令时显示
.SM
.B PS2。
.B Bash
允许通过插入一些反斜杠转义的特殊字符来定制这些提示字符串，这些字符被如下解释：
.RS
.PD 0
.TP
.B \ea
一个 ASCII 响铃字符 (07)
.TP
.B \ed
日期，格式是 "星期 月份 日" (例如，"Tue May 26")
.TP
.B \eD{\fIformat\fP}
\fIformat\fP 被传递给 \fIstrftime\fP(3)，结果被插入到提示字符串中；
空的 \fIformat\fP 将使用语言环境特定的时间格式。花括号是必需的
.TP
.B \ee
一个 ASCII 转义字符 (033)
.TP
.B \eh
主机名，第一个 `.' 之前的部分
.TP
.B \eH
主机名
.TP
.B \ej
shell 当前管理的作业数量
.TP
.B \el
shell 的终端设备名的基本部分
.TP
.B \en
新行符
.TP
.B \er
回车
.TP
.B \es
shell 的名称，
.B $0
的基本部分 (最后一个斜杠后面的部分)
.TP
.B \et
当前时间，采用 24小时制的 HH:MM:SS 格式
.TP
.B \eT
当前时间，采用 12小时制的 HH:MM:SS 格式
.TP
.B \e@
当前时间，采用 12小时制上午/下午 (am/pm) 格式
.TP
.B \eA
当前时间，采用 24小时制上午/下午格式
.TP
.B \eu
当前用户的用户名
the username of the current user
.TP
.B \ev
\fBbash\fP 的版本 (例如，2.00)
.TP
.B \eV
\fBbash\fP 的发行编号，版本号加补丁级别 (例如，2.00.0)
.TP
.B \ew
当前工作目录
.TP
.B \eW
当前工作目录的基本部分
.TP
.B \e!
此命令的历史编号
.TP
.B \e#
此命令的命令编号
.TP
.B \e$
如果有效 UID 是 0，就是
.BR # ,
其他情况下是
.B $
.TP
.B \e\fInnn\fP
对应八进制数 \fInnn\fP 的字符
.TP
.B \e\e
一个反斜杠
.TP
.B \e[
一个不可打印字符序列的开始，可以用于在提示符中嵌入终端控制序列
.TP
.B \e]
一个不可打印字符序列的结束
.PD
.RE
.PP
命令编号和历史编号通常是不同的：历史编号是命令在历史列表中的位置，可能
包含从历史文件中恢复的命令 (参见下面的
.SM
.B HISTORY 历史
章节)，而命令编号是当前 shell 会话中执行的命令序列中，命令的位置。
字符串被解码之后，它将进行扩展，要经过
parameter expansion, command substitution, arithmetic
expansion 和 quote removal, 最后要经过 shell 选项
.B promptvars
处理 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节中，对命令
.B shopt
的描述)。
.SH readline库(READLINE)
这是在交互 shell 中处理读取输入的库，除非在 shell 启动时给出了
.B \-\-noediting
选项。默认情况下，行编辑命令类似于 emacs 中的那些。也可以使用 vi 样式的行编辑界面。
要在 shell 运行之后关闭行编辑，使用内置命令
.B set
的
.B +o emacs
或
.B +o vi
选项 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。
.SS "Readline Notation"
.PP
在这个小节中，将使用 emacs 样式的记法来表述按键。Ctrl 键记为 C\-\fIkey\fR，
例如，C\-n 意思是 Ctrl\-N。类似的，
.I meta
键记为 M\-\fIkey\fR，因此 M\-x 意味着 Meta\-x。(在没有
.I meta
键的键盘上，M\-\fIx\fP 意思是 ESC\-\fIx\fP，也就是说，按下 Esc 键，然后按
.I x
键。这使得 Esc 成为 \fImeta prefix\fP。M\-C\-\fIx\fP 的组合意思是 Esc\-Ctrl\-\fIx\fP，
也就是按 Esc 键，然后按住 Ctrl 键，同时按
.I x
键。)
.PP
readline 命令可以有数字的
.IR 参数 (arguments)，
一般作为重复的计数。有些时候，它是重要参数的标记。给向前方进行的命令 
(例如，\fBkill\-line\fP) 传递负数参数，将使得命令向反方向进行。
下面的命令如果接受参数时的行为与此不同，将另行说明。
.PP
当命令被描述为剪切 (\fIkilling\fP) 文本时，被删除的文本被保存，等待将来使用
(粘贴，\fIyanking\fP)。被剪切的文本保存在 \fIkill ring\fP 中。连续的剪切使得
文本被依次加入到一个单元中，可以一次被粘贴。不剪切文本的命令将 kill ring 中的文本分离。
.SS "Readline Initialization 初始化"
.PP
readline 可以通过将命令放入初始化文件 (\fIinputrc\fP 文件) 来定制。
文件名从变量
.SM
.B INPUTRC
的值中获取。如果没有设置这个变量，默认是
.IR ~/.inputrc .
当使用 readline 库的程序启动时，将读取初始化文件，按键关联和变量将被设置。
readline 初始化文件中只允许有很少的基本构造。
空行被忽略。以 \fB#\fP 开始的行是注释。以 \fB$\fP 开始的行指示了有条件的构造。
其他行表示按键关联和变量设置。
.PP
默认的按键关联可以使用
.I inputrc 
文件改变。其他使用这个库的程序可以添加它们自己的命令和关联。
.PP
例如，将
.RS
.PP
M\-Control\-u: universal\-argument
.RE
或
.RS
C\-Meta\-u: universal\-argument
.RE
放入
.I inputrc
将使得 M\-C\-u 执行 readline 命令
.IR universal\-argument .
.PP
可以识别下列字符的符号名称：
.IR RUBOUT ,
.IR DEL ,
.IR ESC ,
.IR LFD ,
.IR NEWLINE ,
.IR RET ,
.IR RETURN ,
.IR SPC ,
.IR SPACE ,
和
.IR TAB .
.PP
在命令名之外，readline 允许将按键与一个字符串关联，当按下这个键时，将插入这个字符串 (一个宏，\fImacro\fP)。
.SS "Readline Key Bindings"
.PP
.I inputrc
文件中的控制按键关联的语法非常简单。需要的内容是命令名或宏，以及它应当关联到的按键序列。
名称可以以两种方式指定：一个按键的符号名称，可能带有 \fIMeta\-\fP 或 \fIControl\-\fP 前缀，或者是一个按键序列。
.PP
当使用 \fBkeyname\fP:\^\fIfunction\-name\fP 或 \fImacro\fP 形式时，
.I keyname
是按键以英文拼写的名称。例如：
.sp
.RS
Control-u: universal\-argument
.br
Meta-Rubout: backward-kill-word
.br
Control-o: "> output"
.RE
.LP
在上述例子中，
.I C\-u
被关联到函数
.BR universal\-argument ,
.I M\-DEL
被关联到函数
.BR backward\-kill\-word ,
而
.I C\-o
被关联为运行右边给出的宏 (意思是，将向行中插入
.if t \f(CW> output\fP
.if n ``> output''
)。
.PP
在第二种形式中，\fB"keyseq"\fP:\^\fIfunction\-name\fP 或 \fImacro\fP，
.B keyseq
不同于上面的
.B keyname，
表示整个按键序列的字符串可以通过将按键序列放在双引号引用中来指定。
可以使用一些 GNU Emacs 样式的按键序列，如下例所示，但是不会识别按键的符号名称。
.sp
.RS
"\eC\-u": universal\-argument
.br
"\eC\-x\eC\-r": re\-read\-init\-file
.br
"\ee[11~": "Function Key 1"
.RE
.PP
在上述例子中，
.I C\-u
被又一次关联到函数
.BR universal\-argument .
.I "C\-x C\-r"
被关联到函数
.BR re\-read\-init\-file ,
而
.I "ESC [ 1 1 ~"
被关联为插入文本
.if t \f(CWFunction Key 1\fP.
.if n ``Function Key 1''.
.PP
GNU Emacs 样式的转义序列的全集为：
.RS
.PD 0
.TP
.B \eC\-
Ctrl 前缀
.TP
.B \eM\-
Meta 前缀
.TP
.B \ee
一个 Esc 字符
.TP
.B \e\e
反斜杠
.TP
.B \e"