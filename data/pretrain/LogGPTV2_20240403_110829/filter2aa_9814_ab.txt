2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
```
从上面可以看出在 2、3、4、5 的运行级别中都将以 respawn 方式运行 mingetty 程序，mingetty 程序能打开终端、设置模式。
同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给 login 程序来验证用户的身份。
一般来说，用户的登录方式有三种：
- 命令行登录 : init 进程调用 getty 程序（意为get teletype），让用户输入用户名和密码。输入完成后，再调用 login 程序，核对密码（Debian 还会再多运行一个身份核对程序 `/etc/pam.d/login`）。如果密码正确，就从文件 `/etc/passwd` 读取该用户指定的 shell，然后启动这个 shell。
- ssh 登录 : 这时系统调用 sshd 程序（Debian 还会再运行 `/etc/pam.d/ssh`），取代 getty 和 login，然后启动 shell。
- 图形界面登录 : init 进程调用显示管理器，Gnome 图形界面对应的显示管理器为 gdm（GNOME Display Manager），然后用户输入用户名和密码。如果密码正确，就读取 `/etc/gdm3/Xsession`，启动用户的会话。
对于运行级别为 5 的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。
Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。
然后 login 会对用户名进行分析：如果用户名不是 root，且存在 `/etc/nologin` 文件，login 将输出 nologin 文件的内容，然后退出。
这通常用来系统维护时防止非 root 用户登录。只有 `/etc/securetty` 中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。
`/etc/usertty` 文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。
---
### 进入 login shell
所谓 shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的 shell，就叫做 login shell。
Debian 默认的 shell 是 Bash，它会读入一系列的配置文件。上一步的三种情况，在这一步的处理，也存在差异。
- 命令行登录：首先读入 `/etc/profile`，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当前用户的配置。
    ```bash
    ~/.bash_profile
    ~/.bash_login
    ~/.profile
    ```
    需要注意的是，这三个文件只要有一个存在，就不再读入后面的文件了。比如，要是 `~/.bash_profile` 存在，就不会再读入后面两个文件了。
- ssh 登录：与第一种情况完全相同。
- 图形界面登录：只加载 `/etc/profile` 和 `~/.profile`。也就是说，`~/.bash_profile` 不管有没有，都不会运行。
**non-login shell**
用户进入操作系统以后，常常会再手动开启一个 shell。这个 shell 就叫做 non-login shell，意思是它不同于登录时出现的那个 shell，不读取 /etc/profile 和 .profile 等配置文件。
non-login shell 的重要性，不仅在于它是用户最常接触的那个 shell，还在于它会读入用户自己的 bash 配置文件 `~/.bashrc`。大多数时候，我们对于 bash 的定制，都是写在这个文件里面的。
你也许会问，要是不进入 non-login shell，岂不是 `.bashrc` 就不会运行了，因此 bash 也就不能完成定制了？事实上，Debian 已经考虑到这个问题了，请打开文件 `~/.profile`，可以看到下面的代码：
```sh
if [ "$BASH" ]; then
  if [ -f ~/.bashrc ]; then
    . ~/.bashrc
  fi
fi
```
上面代码先判断变量 $BASH 是否有值，然后判断主目录下是否存在 `.bashrc` 文件，如果存在就运行该文件。第三行开头的那个点，是 source 命令的简写形式，表示运行某个文件，写成 "source ~/.bashrc" 也是可以的。
因此，只要运行 `～/.profile` 文件，`～/.bashrc` 文件就会连带运行。但是之前提到过，如果存在 `～/.bash_profile`文件，那么有可能不会运行 `～/.profile` 文件。解决这个问题很简单，把下面代码写入 `.bash_profile` 就行了。
```sh
if [ -f ~/.profile ]; then
  . ~/.profile
fi
```
Bash 的设置之所以如此繁琐，是由于历史原因造成的。早期的时候，计算机运行速度很慢，载入配置文件需要很长时间，Bash 的作者只好把配置文件分成了几个部分，阶段性载入。系统的通用设置放在 `/etc/profile`，用户个人的、需要被所有子进程继承的设置放在 `.profile`，不需要被继承的设置放在 `.bashrc`。
**图形模式与文字模式的切换方式**
Linux 预设提供了六个命令窗口终端机让我们来登录。
默认我们登录的就是第一个窗口，也就是 tty1，这个六个窗口分别为 tty1,tty2 … tty6，你可以按下 `Ctrl + Alt + F1 ~ F6` 来切换它们。
如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按 `Ctrl + Alt + F1 ~ F6` 来进入其中一个命令窗口界面。
当你进入命令窗口界面后再返回图形界面只要按下 `Ctrl + Alt + F7` 就回来了。
如果你用的 vmware 虚拟机，命令窗口切换的快捷键为 `Alt + Space + F1~F6`. 如果你在图形界面下请按 `Alt + Shift + Ctrl + F1~F6` 切换至命令窗口。
---
### Linux 关机
在 linux 领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。
正确的关机流程为：`sync > shutdown > reboot > halt`
关机指令为：`shutdown` ，你可以 `man shutdown` 来看一下帮助文档。
例如你可以运行如下命令关机：
```bash
sync                # 将数据由内存同步到硬盘中。
shutdown            # 关机指令
shutdown -h 10 'This server will shutdown after 10 mins'    # 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在当前登录用户的屏幕中。
shutdown -h now     # 立马关机
shutdown -h 20:25   # 系统会在今天20:25关机
shutdown -h +10     # 十分钟后关机
shutdown -r now     # 系统立马重启
shutdown -r +10     # 系统十分钟后重启
reboot              # 就是重启，等同于 shutdown -r now
halt                # 关闭系统，等同于 shutdown -h now 和 poweroff
```
最后总结一下，不管是重启系统还是关闭系统，首先要运行 `sync` 命令，把内存中的数据写到磁盘中。
关机的命令有 `shutdown -h now halt poweroff` 和 `init 0` , 重启系统的命令有 `shutdown -r now reboot init 6`
---
## Source & Reference
- [Linux 系统启动过程](https://www.runoob.com/linux/linux-system-boot.html)
- [Linux 启动过程分析](https://linux.cn/article-9437-1.html)
- [Linux 的启动流程](http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html)