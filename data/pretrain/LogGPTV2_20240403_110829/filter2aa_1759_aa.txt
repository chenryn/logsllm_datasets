1
Zoho ManageEngine ADSelfService Plus
偶然看到这篇⽂章勾起了好奇 
https://www.synacktiv.com/publications/how-to-exploit-cve-2021-40539-on-manageengine-
adselfservice-plus.html 
这⾥说⽂件上传和命令注⼊没修，我想着看他上⾯修复的权限绕过感觉有问题于是找了个最新版测试 
结果找错了版本⽩⼲了⼀天活，我在他中⽂官⽹下载的最新版为6115版本 
下⾯讲的都是6115才回出现的问题，实际上官⽅最新为6117版本，在6116版本的安全过滤器
范围直接变为* 
⼀、前⾔ 
2
导致很多都洞⽆法利⽤了，这个过滤器看了下基本没法绕，你访问的URI不在安全配置⾥定义
直接报错，参数名不⼀致，参数值不在限定范围直接报错，基本上exclude也利⽤不了 
这篇⽂章⾥提到 
⼆、权限绕过bypass 
3
官⽅写了个getNormalizedURI 来修复权限绕过，我当时看着就有问题，我们先跟⼀下这个过滤器 
在web.xml⾥定义了⼀个  filter  
Plain Text
复制代码
    ADSFilter
    com.manageengine.ads.fw.filter.ADSFilter
    ADSFilter
    /*
    FORWARD
    REQUEST
1
2
3
4
5
6
7
8
9
10
4
ADSFilter代码如下 
这⾥意味着我们必须是 doSubFilters ⽅法返回为正才能通过这个过滤器。 
在 doSubFilters ⽅法中存在这样⼀段 
跟⼊ RestAPIUtil.isRestAPIRequest  
Java
复制代码
    public void doFilter(ServletRequest servletRequest, ServletResponse 
servletResponse, FilterChain filterChain) throws IOException, 
ServletException {
        HttpServletRequest request = (HttpServletRequest)servletRequest;
        HttpServletResponse response = 
(HttpServletResponse)servletResponse;
        boolean haveSetCredential = 
RestAPI.setUserCredentialsForRestAPI(request, this.filterParams);
        if (this.doSubFilters(servletRequest, servletResponse, 
filterChain)) {
            filterChain.doFilter(request, response);
        }
        if (haveSetCredential) {
            AuthUtil.flushCredentials();
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
Java
复制代码
if (RestAPIUtil.isRestAPIRequest(request, this.filterParams) && 
!RestAPIFilter.doAction(servletRequest, servletResponse, 
this.filterParams, this.filterConfig)) {
                return false;
            }
1
2
3
5
此处直接使⽤ getRequestURI 来获取请求路径，使⽤ "/RestAPI/.*" 来匹配，所以就有了最开始的
/./RestAPI/xxx 来绕过，新版增加了⼀个安全⽅法 getNormalizedURI 来处理路径 
Java
复制代码
    public static boolean isRestAPIRequest(HttpServletRequest request, 
JSONObject filterParams) {
        String restApiUrlPattern = "/RestAPI/.*";
        try {
            restApiUrlPattern = filterParams.optString("API_URL_PATTERN", 
restApiUrlPattern);
        } catch (Exception var5) {
            out.log(Level.INFO, "Unable to get API_URL_PATTERN.", var5);
        }
        String reqURI = request.getRequestURI();
        String contextPath = request.getContextPath() != null ? 
request.getContextPath() : "";
        reqURI = reqURI.replace(contextPath, "");
        reqURI = reqURI.replace("//", "/");
        return Pattern.matches(restApiUrlPattern, reqURI);
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
6
Java
复制代码
public static String getNormalizedURI(String path) {
        if (path == null) {
            return null;
        } else {
            String normalized = path;
            if (path.indexOf(92) >= 0) {
                normalized = path.replace('\\', '/');
            }
            if (!normalized.startsWith("/")) {
                normalized = "/" + normalized;
            }
            boolean addedTrailingSlash = false;
            if (normalized.endsWith("/.") || normalized.endsWith("/..")) {
                normalized = normalized + "/";
                addedTrailingSlash = true;
            }
            while(true) {
                int index = normalized.indexOf("/./");
                if (index  1 && 
addedTrailingSlash) {
                                normalized = normalized.substring(0, 
normalized.length() - 1);
                            }
                            return normalized;
                        }
                        if (index == 0) {
                            return null;
                        }
                        int index2 = normalized.lastIndexOf(47, index - 
1);
                        normalized = normalized.substring(0, index2) + 
normalized.substring(index + 3);
                    }
                }
                normalized = normalized.substring(0, index) + 
normalized.substring(index + 2);
            }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
7
其实直接采⽤下⾯的⽅式就能继续绕。 
直接URL编码RestAPI也能绕 
看⽂章说的⽂件上传和命令注⼊没修复，想着这不是直接能RCE，然后发现是我想多了。 
先看  /RestAPI/* 的定义 
三、⽂件上传和命令参数注⼊ 
1、RestAPI 
        }
    }
44
45
8
2.⽂件上传 
XML
复制代码
  action
  /RestAPI/*
    action
    org.apache.struts.action.ActionServlet
      config
      /WEB-INF/struts-config.xml, /WEB-INF/accounts-struts-
config.xml, /adsf/struts-config.xml, /WEB-INF/api-struts-config.xml, /WEB-
INF/mobile/struts-config.xml
      validate
      true
      chainConfig
      org/apache/struts/tiles/chain-config.xml
    1
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
9
发现这个action已经不在xml⾥定义了，搜了下之前这个对应的class 
AdventNetADSMClient.jar!\com\adventnet\sym\adsm\common\webclient\admin\LogonCustomizat
ion.class  
10
跟⼊  FileActionHandler.getFileFromRequest 应该是其处理⽂件的⼀个通⽤⽅法 
对⽐6113版和最新版代码 
11
主要是这⼀段发⽣了变化，最新版⽣成的⽂件为临时⽂件，⽼版为上传⽂件名。 
我看了⼀下最新版他这地⽅，如果进⼊if⾥⾯⽣成的⽂件是个临时⽂件，else⾥也是⼀样，但是都保存了上
传的原始⽂件名放在json⾥⽤于后续判断。 
12
这⾥会判断你上传的⽂件名是否符合要求，看了⼀下绕不了。 
Connection也被从xml中去除，class⽂件还在。 
AdventNetADSMClient.jar!\com\adventnet\sym\adsm\common\webclient\admin\Connectio
nAction.class  
最后到  
com.adventnet.sym.adsm.common.webclient.util.SSLUtil#createCSR(org.json.JSO
NObject)  