is hard for this kind of design to add protection mechanisms
against memory access based side-channel attacks.
• Trusted computing primitives. SecTEE provides more com-
prehensive trusted computing primitives than Sanctuary, such
as the key hierarchy of platforms and secrets provisioning, and
illustrates all the details of these trusted computing primitives.
• TCB size. Sanctuary does not increase the TCB of TEE systems
because it executes enclaves in isolated compartments in the
normal world. Although SecTEE has an increase of TCB, the
increase is acceptable (evaluated in Section 6.1), and we give
suggestions on how to decrease TCB in Section 6.1.
In conclusion, SecTEE has a larger TCB than Sanctuary, but the
increase of TCB is acceptable, and SecTEE achieves the highest
CPUOCMEnclave ManagementTZ  InterfaceTEE OSNormal OSEnclaveNormal WorldSecure WorldUntrusted Datacmd_1(){      . . .} SoC-bound  Execution   Environment . . . InvokeCmd(cmd_x); . . .MonitorUntrusted codeHost APPTC Features. . .cmd_2(){      . . .}Sensitive DataSoCSystem CallsSide-channel ResistanceSession 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1727Table 1: SecTEE System Calls
System Calls
Description of SecTEE Operations
syscall_request_AK(void *pubAK, void *sigDRK)
syscall_seal_AK(bool flag, void *SealedAK)
syscall_import_AK(void *SealedAK, void *sigDRK)
syscall_remote_attestation(char *report_data,
void *attest_sig)
syscall_seal(char *data, char *ciphertext)
syscall_unseal(char *ciphertext, char *data)
syscall_provisioning(void *DH_A, void *DH_B,
void *sigAK, void *DH_shared)
Generate an attestation key AK and sign it with the device root key.
Receive a flag indicating whether the generated attestation key is approved by the
manufacturer, and if it is true, seal the attestation key.
Import a sealed attestation key SealedAK.
Perform attestation on report_data, and store the attestation result
in attest_sig.
Seal data and return the result to the invoking enclave.
Unseal the sealed data ciphertext and return the result to the invoking enclave.
Attest the trustworthiness of the invoking enclave to a remote party,
and establish a secure channel for data provisioning with the party.
security level of modern secure enclave architectures and provides
more comprehensive trusted computing primitives.
4.3 Lessons from Other Architectures
We analyze some popular secure enclave architectures in industrial
and academic areas: Intel SGX, Sanctum [17], and Komodo [22], and
describe lessons we have learned from these architectures, which
help us to design SecTEE.
Actually, all of these secure enclave architectures provide similar
trusted computing features and management functionality for
enclaves. The main difference among them is the way of managing
enclaves. Figure 2 shows the design overviews of SGX, Sanctum,
and Komodo.
Intel SGX (Figure 2 (a)) implements the management functional-
ity and trusted computing features in the processor and exposes
their interfaces as ISA (Instruction Set Architecture) extensions. In
SGX, enclaves are implemented as isolated execution environments
embedded in the address spaces of host applications. The OS is
responsible for managing enclaves, such as allocating memory for
enclaves, managing virtual-physical address mappings for enclaves,
loading initial data and code into enclaves, and scheduling enclaves.
However, the abilities of controlling memory management and
scheduling enclaves lead to memory access based side-channel
attacks against SGX. One type of side-channel attacks learns about
the memory page usage of an enclave by exploiting page faults
of the enclave [94, 114]. The other type of these attacks is cache
attacks [9, 32, 73, 91] which learn the memory access patterns of
an enclave.
Sanctum (Figure 2 (b)) is an SGX-like secure enclave architecture
for the RISC-V architecture. It achieves the same level of software
security as SGX, but does not offer protection against any physical
attacks due to the lacking of memory encryption engines. One
important contribution of Sanctum is that it adds full protection
against memory access based side-channel attacks such as page
fault monitoring attacks and cache attacks. It achieves this goal
by setting individual page table for each enclave and modifying
the cache hardware to ensure that each enclave uses distinct
cache sets. Compared to SGX, one advantage of Sanctum is that
it leverages the hardware-software co-design to achieve minimal
hardware modifications. Most of its trusted computing features are
implemented in a trusted software secure monitor and invoked
through monitor calls that mirror SGX ISA instructions.
Komodo (Figure 2 (c)) is a hardware-software co-design of secure
enclave architecture. It aims to disentangle the enclave management
(such as memory management) and trusted computing features
(such as measurement and remote attestation) from basic hardware
mechanisms (such as isolation and memory protection). Komodo
delegates the enclave management and trusted computing features
to a privileged software monitor, making it easy to update and patch
security flaws. Although Komodo isolates enclaves’ page tables from
the untrusted OS, it still relies on the untrusted OS to manage and
schedule enclaves. So it is vulnerable to cache attacks, and that’s
why memory access based side-channel attacks are excluded in its
threat model.
Lessons. From the above analysis, we obtain the following two
lessons. First, implementing the whole secure enclave architecture
in hardware is inflexible. For example, it is hard to fix up memory
side channels for CPUs that have been shipped. Software is much
more malleable than hardware, so it is better to combine necessary
hardware security mechanisms with software to implement the
architecture in a flexible and updatable way. Both Sanctum and
Komodo adopt this approach. Second, relying on the untrusted OS to
manage enclaves (especially memory management and scheduling)
enables attackers to launch software side-channel attacks, such as
side-channel attacks against SGX. To prevent this kind of attacks,
the above three secure enclave architectures have to modify their
CPU hardware, such as Sanctum’s cache partitioning scheme. The
lessons we learn from these architectures help us to present a
better design of SecTEE. First, SecTEE only requires basic hardware
security components, and most of its functionality is implemented
in software, which makes it flexible for manufacturers to fix up
security flaws and add new features. Second, SecTEE puts the
enclave management functionality inside the TEE OS, so the host
software is unable to control memory management of enclaves
or schedule enclaves. This design makes it possible for system
designers to enforce mechanisms of resisting memory access based
side-channel attacks. Another reason for us to put the enclave
management inside TEE OS is that, in the TrustZone software
architecture, the TEE OS is designed to manage TAs. So SecTEE
can be easily incorporated into the ARM TrustZone architecture.
5 SECTEE ARCHITECTURE
This section describes the details of the SecTEE architecture.
5.1 Memory Protection
To protect enclaves from physical attacks, SecTEE leverages the
SoC-bound execution environment technology, such as OP-TEE
Pager, to provide memory protection on the whole TEE system. The
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1728Figure 2: Design Overviews of SGX, Sanctum, and Komodo
SoC-bound execution environment is a demand paging system with
memory protection mechanism. It runs the whole TEE system on
the OCM, and uses the DRAM as a backing store for the TEE system.
It also guarantees the confidentiality and integrity properties for
the backing store: when a page in the OCM is going to be swapped
out of the OCM, the memory protection component encrypts and
hashes the page; when a page in the backing store is demanded
and swapped into the OCM, the memory protection component
decrypts the page and performs integrity check on it.
5.2 Side-channel Resistance
Since all page faults of enclaves are handled by the SecTEE
kernel, host software is unable to learn memory page usage by
manipulating page tables, thus page fault based side-channel attacks
are prevented directly. So we focus on how to prevent cache attacks.
5.2.1 Resisting attacks from the secure world. The basic require-
ment of launching cache attacks from the secure world is to load
an attack enclave to memory locations which share the same
cache sets with the victim enclave. Then the attacker can use
the attack methods – Evict+Time, Prime+Probe [80], Flush+Reload
[116], Evict+Reload [35], and Flush+Flush [34] – to learn the victim
enclave’s memory access patterns, and can even launch cross-core
attacks [40, 47, 49–51, 68, 69, 113, 116] by exploiting the LLC.
We prevent cache attacks from the secure world by a page
coloring mechanism: modifying the memory management service
of SecTEE kernel to make different enclaves never share cache sets.
Then no matter how the attacker manipulates the attack enclave
(including launching cross-core attacks), it will not affect the cache
of the victim enclave. As the working memory of enclaves is the
OCM, we only need to guarantee that all the OCM pages assigned
to an enclave do not have collisions in cache sets with OCM pages
of other enclaves.
We propose a separation scheme for OCM to achieve the above
goal (Figure 3). Suppose the cache is an N -way set associative cache,
the total size of the cache is ST , the size of each cache line is SCL,
the size of each cache way is SW = ST /N , and the size of one page
is SP . We divide each cache way into p (p = SW /SP ) page-sized
blocks, and blocks from all ways with the same index compose a
Figure 3: OCM Separation Scheme
page-sized cache set. Suppose the size of OCM is SOCM, and we call
all pages that map to the same page-sized cache set a page set. As
pages from different page sets do not map to the same page-sized
cache set, we load enclaves into different page sets to guarantee
the isolation of their cache sets:
(1) When an enclave is invoked, SecTEE assigns a free page set
for it, and pages of this enclave will be loaded into pages of
this page set. If there are no free page sets, SecTEE chooses a
page set that has been used least recently (LRU), swaps all the
pages of the page set into the DRAM, and finally uses cache
maintenance operations to clean and invalidate the page-sized
cache set of the page set. Figures 4 and 5 show the assembly
code of using the DCCISW operation to clean and invalidate
a range of cache sets on ARMv7 and ARMv8 architectures
respectively.
(2) When an enclave needs to load a page from DRAM to OCM
and it happens to run out of all pages of its page set, SecTEE
allocates a new page set for the enclave if there are free page
sets, and if no free page sets are left, SecTEE frees an OCM
page by swapping the enclave’s least recently used page from
the OCM to the backing store and loads the demanded page
into the just freed OCM page.
SGX ISA ExtensionsMemory ProtectionHost APPEnclaveCPUISAOSTCFeaturesEnclave ManagementELRANGEPage TablesUntrusted CodeTrusted CodeMapSide-channel ResistanceHost APPEnclaveCPUMonitorOSEnclave ManagementEVRANGEUntrusted CodeTrusted CodeTC FeaturesPage TablesMonitor CallsMapHost APPEnclaveCPUMonitorOSEnclave ManagementUntrusted CodeTrusted CodeTC FeaturesPage TablesMonitor CallsMap(a) SGX(b) Sanctum(c) KomodoCache wayCachelineOCMPage-sizedcache set...Page 0Page 1 Page Size.........01...N-1 Page Size Page SizePage set 0Page set 1Page set p-1...Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1729/* R0: the maximum way number;
* [R1, R2]: the set range of the enclave;
* R3: 32 - Log2(ASSOCIATIVITY);
* R4: Log2(LINELEN);
* R10: Cache number;
* ASSOCIATIVITY and LINELEN are parameters defined in CCSIDR
*/
SUB R10, #1
LSL R10, R10, #1
LOOP_WAY:
MOV R7, R2
LOOP_SET:
ORR R11, R10, R0, LSL R3 ;factor in the way number and cache
number into R11
ORR R11, R11, R7, LSL R4 ;factor in the set index number
MCR p15, 0, R11, c7, c14, 2 ;DCCISW operation
SUB R7, R7, #1 ;decrement the set number
SUBS R8, R7, R1
BGE LOOP_SET
SUBS R0, R0, #1 ;decrement the way number
BGE LOOP_WAY
Figure 4: Cache Clean and Invalidate for ARMv7
/* W0: the maximum way number;
* [W1, W2]: the set range of the enclave;
* W3: 32 - Log2(ASSOCIATIVITY);
* W4: Log2(LINELEN);
* W10: Cache number
*/
SUB W10, #1
LSL W10, W10, #1
LOOP_WAY:
MOV W7, W2
LOOP_SET:
ORR W11, W10, W0, LSL W3 ;factor in the way number and
cache number into W11
ORR W11, W11, W7, LSL W4 ;factor in the set index number
DC CISW, X11 ;DC CISW operation
SUB W7, W7, 1 ;decrement the set number
SUBS W7, W7, W1
B.GE LOOP_SET
SUBS X0, X0, 1 ;decrement the way number
B.GE LOOP_WAY
Figure 5: Cache Clean and Invalidate for ARMv8
Take the NXP i.MX6Q platform based on which we implement
our prototype as an example, it has a 16-way 1MB L2 unified cache
and 256KB OCM, and the page size is 4KB. We divide the OCM
into p = SW /SP = 1MB/16/4KB = 16 page sets, and the size of
each page set is 256KB/16 = 16KB. So we can run 16 enclaves
simultaneously at most, which is enough for the host OS.
5.2.2 Resisting attacks from the normal world. In ARM TrustZone,
cache maintenance operations only affect non-secure caches, so
attackers from the normal world cannot leverage cache mainte-
nance operations to manipulate caches of the secure world. So
the cache attacks relying on cache maintenance operations such
as Flush+Reload and Flush+Flush will not succeed in the normal
world. Thus, attackers from the normal world can only launch cache
attacks based on memory operations, such as Prime+Probe.
Unfortunately, the page coloring technique cannot protect ARM
TrustZone from cache attacks because in the context of ARM
TrustZone, it does not partition all the memory but only the secure
memory into separate page sets, and the normal world’s memory,
which shares all caches with the secure world, can be leveraged to
launch cache attacks.
To prevent cache attacks from the normal world, SecTEE cleans
and invalidates all the cache lines of the invoked enclave when the
CPU switches from the secure world to the normal world. As ARM
architecture does not use inclusive LLC, SecTEE needs to clean and
invalidate all cache levels.
Cleaning the caches of the invoked enclave when CPU returns
to the normal world only prevents a local attacker on the same
core from learning the access patterns of the enclave, but cannot
prevent cross-core cache attacks: the attacker can monitor the cache
usage of a victim enclave by manipulating a spy program which
shares the same cache sets with the victim enclave and runs on a
different core. Since the spy program performs its attack during
the execution of the victim enclave, the cache cleaning operations,