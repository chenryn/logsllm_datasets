简单来说，hook也就是我们常说的钩子，以替换的方式把改变程序中原有的函数功能，而注入，则更偏向于插入自定义函数/代码，代码注入一般是一次性的，而Hook劫持是比较稳定持久的
## 利用LD_PRELOAD自定义加载so
​ 正常情况下, Linux 动态加载器`ld-linux`(见 man 手册 ld-linux(8)) 会搜寻并装载程序所需的共享链接库文件,
而`LD_PRELOAD`是一个可选的环境变量, 包含一个或多个指向共享链接库文件的路径. 加载器会先于 C
语言运行库之前载入`LD_PRELOAD`指定的共享链接库，也就是所谓的预装载 `preload`
做个简单的演示
    #include 
    #include 
    int main(int argc, char const *argv[])
    {
        puts("welcome!");
        sleep(1);
        char *ptr = malloc(0x100);
        puts("what's your name:");
        read(0,ptr,0x20);
        printf("nice to meet you,%s\n", ptr);
        return 0;
    }
这个是我们的目标程序target，编译`gcc ./target.c -o target`
    #include 
    int sleep(int t)
    {
        puts("your sleep is hook by me!");
    }
这个是要用于制作so文件的hook1.c
编译生成so：`gcc -fPIC --shared hook1.c -o hook1.so`
然后进行hook
`LD_PRELOAD=./hook1.so ./target`
可以看到sleep函数已经被替换成功了，这就是简单的hook演示，但这种东西似乎并没有什么卵用，就跟给程序打个patch一样
因此这里演示一个稍微有点卵用的东西，如果我们想统计某个函数在整个程序运行过程中运行了几次，每次运行的相关数据情况等等，那么hook就能派上一点用场
修改一下我们的target程序
    #include 
    #include 
    void function()
    {
        for (int i = 0; i 
    #include 
    #include 
    typedef int(*SLEEP)(unsigned int t);
    static int sleep_times=0;
    int  sleep(unsigned int t)
    {
        static void *handle = NULL;
        static SLEEP true_sleep = NULL;
        sleep_times++;
        if( !handle )
        {
            handle = dlopen("libc.so.6", RTLD_LAZY);
            true_sleep = (SLEEP)dlsym(handle, "sleep");
        }
        printf("sleep has been called for %d times!\n", sleep_times);
        return true_sleep(t);
    }
这次的hook的作用是自定义sleep函数，每次调用sleep就计数一次，然后马上执行glibc中真正的sleep函数
编译的命令是`gcc -fPIC -shared -o hook2.so hook2.c -ldl`
最后一个参数`-ldl`是为了加载``所在的共享库dl
> **void *dlopen(const char **** filename ***, int** _flag**_ );**
而dlsym函数用于取函数的地址，存放在一个函数指针中
> **void *dlsym(void **** handle ***, const char **** symbol ***);**
上面的hook2.c中也就是用这两个函数实现先调用自定义sleep记录次数，然后再调用glibc中的sleep，从而既达到了我们的目的，又不影响程序的执行逻辑
运行效果如下，可以看到sleep被调用了11次
为了方便hook，可以定义以下宏
    #include   
    #include 
    #if defined(RTLD_NEXT)
    #  define REAL_LIBC RTLD_NEXT
    #else
    #  define REAL_LIBC ((void *) -1L)
    #endif
    #define FN(ptr,type,name,args)  ptr = (type (*)args)dlsym (REAL_LIBC, name)
当调用dlsym的时传入RTLD_NEXT参数，gcc的共享库加载器会按照装载顺序获取下一个共享库中的符号地址
因此通过上面的宏定义，REAL_LIBC代表当前调用链中紧接着下一个共享库，从调用方链接映射列表中的下一个关联目标文件获取符号
在使用的时候只需要在自定义hook函数中加入FN即可方便进行替换，如替换execve函数
    int execve(const char *filename, char *const argv[], char *const envp[])
    {
        static int (*func)(const char *, char **, char **);
        FN(func,int,"execve",(const char *, char **const, char **const)); 
        printf("execve has been called!");
        return (*func) (filename, (char**) argv, (char **) envp);
    }
## 利用ptrace进行hook
利用LD_PRELOAD方法进行hook，很多时候是限制比较多的，它要求在程序在执行前就把hook.so加入环境变量中，对于已经运行了的程序，则没有办法采用这种方法进行hook
这里就介绍另外一种hook的方法，利用ptrace进行hook
众所周知，ptrace是Linux提供的一种专门用于调试的系统调用，具体的用法可见man文档
这里直接介绍利用ptrace进行hook的原理和步骤
  1. 首先需要使得hook程序利用ptrace attach target程序，保护现场，保存原寄存器内容和内存数据
  2. 通过得到指向link_map链表的指针，通过一系列的遍历操作，根据函数名查找到各种函数的真实地址
  3. 通过修改target程序的寄存器和内存使其调用dlopen函数，从而将hook.so加入target内存空间
  4. 修改需要被hook的func函数地址的GOT表为hook.so中hook_func函数地址
  5. 完成hook，恢复现场，恢复原寄存器内容和内存数据，退出ptrace
这5步当中最麻烦的就是第二步，接下来通过代码逐步分析五个步骤的实现方式，最终的完整代码可见附件
### **第一步**
这里主要是涉及ptrace的基本运用，首先定义一系列有关ptrace的操作函数
    void ptrace_attach(pid_t pid)
    {
        if(ptrace(PTRACE_ATTACH, pid, NULL, NULL) `，因此我们这里选择找到`__libc_dlopen_mode`的地址，利用他来打开so，该函数的参数用法和dlopen完全一样
如何查找指定函数名的真实地址呢？
通过link_map链表的指针链，在各个so文件中寻找函数对应的地址
这里定义了两个函数
> map = get_linkmap(pid);  
>  sym_addr = find_symbol(pid, map, oldfunname);
**首先从get_linkmap开始讲解**
首先从程序头部IMAGE_ADDR（64为的一般为0x400000）开始读取信息找到头部表的地址
根据头部表再找.dynamic节
再遍历.dynamic节，找到.got.plt节，而这个就是我们平常说的got表了
GOT表中每一项都是64bit的`Elf64_Addr`地址
但其中GOT表前三项用于保存特殊的数据结构地址：
GOT[0]为段”.dynamic”的加载地址
GOT[1]为ELF所依赖的动态链接库链表头struct link_map结构体描述符地址
GOT[2]为`_dl_runtime_resolve`函数地址
于是这样就找到了link_map
    struct link_map* get_linkmap(int pid)
    {
        int i;
        Elf_Ehdr *ehdr = (Elf_Ehdr *) malloc(sizeof(Elf_Ehdr)); 
        Elf_Phdr *phdr = (Elf_Phdr *) malloc(sizeof(Elf_Phdr));
        Elf_Dyn  *dyn = (Elf_Dyn *) malloc(sizeof(Elf_Dyn));
        Elf_Addr *gotplt;
        // 读取文件头
        ptrace_getdata(pid, IMAGE_ADDR, ehdr, sizeof(Elf_Ehdr));
        // 获取program headers table的地址
        phdr_addr = IMAGE_ADDR + ehdr->e_phoff;
        // 遍历program headers table，找到.dynamic
        for (i = 0; i e_phnum; i++) 
        {
            ptrace_getdata(pid, phdr_addr + i * sizeof(Elf_Phdr), phdr, sizeof(Elf_Phdr));
            if (phdr->p_type == PT_DYNAMIC) 
            {
                dyn_addr = phdr->p_vaddr;
                break;
            }
        }
        if (0 == dyn_addr) 
        {
            error_msg("cannot find the address of .dynamin\n");
        } else 
        {
            printf("[+]the address of .dynamic is %p\n", (void *)dyn_addr);
        }
        // 遍历.dynamic，找到.got.plt 
        for (i = 0; i * sizeof(Elf_Dyn) p_memsz; i++ )
        {
            ptrace_getdata(pid, dyn_addr + i * sizeof(Elf_Dyn), dyn, sizeof(Elf_Dyn));
            if (dyn->d_tag == DT_PLTGOT) 
            {
                gotplt = (Elf_Addr *)(dyn->d_un.d_ptr);
                break;
            }
        }
        if (NULL == gotplt) 
        {
            error_msg("cannot find the address of .got.plt\n");
        }else 
        {
            printf("[+]the address of .got.plt is %p\n", gotplt);
        }
        // 获取link_map地址
        ptrace_getdata(pid, (Elf_Addr)(gotplt + 1), &lmap_addr, sizeof(Elf_Addr));
        printf("[+]the address of link_map is %p\n", (void *)lmap_addr);
        free(ehdr);
        free(phdr);
        free(dyn);
        return (struct link_map *)lmap_addr;
    }
找到后返回一个结构指针，link_map的结构体如下
    typedef struct link_map {
        caddr_t     l_addr;         /* Base Address of library */
    #ifdef __mips__
        caddr_t     l_offs;         /* Load Offset of library */
    #endif
        const char  *l_name;        /* Absolute Path to Library */
        const void  *l_ld;          /* Pointer to .dynamic in memory */
        struct link_map *l_next, *l_prev;   /* linked list of of mapped libs */
    } Link_map;
**接下来讲解find_symbol函数**
上面说到GOT[2]为`_dl_runtime_resolve`函数地址
该函数的作用是遍历GOT[1]指向的动态链接库链表直至找到某个符号的地址，然后将该符号地址保存至相应的GOT表项中，而find_symbol函数的作用正是模拟`_dl_runtime_resolve`函数，在动态链接库中找到我们想要的函数地址
    lf_Addr find_symbol(int pid, Elf_Addr lm_addr, char *sym_name)
    {
        char buf[STRLEN] = {0};
        struct link_map lmap;
        unsigned int nlen = 0;
        while (lm_addr) 
        {
            // 读取link_map结构内容
            ptrace_getdata(pid, lm_addr, &lmap, sizeof(struct link_map));
            lm_addr = (Elf_Addr)(lmap.l_next);//获取下一个link_map
            // 判断l_name是否有效
            if (0 == lmap.l_name) 
            {
                printf("[-]invalid address of l_name\n");
                continue;
            }
            nlen = ptrace_getstr(pid, (Elf_Addr)lmap.l_name, buf, 128);
            //读取so名称
            if (0 == nlen || 0 == strlen(buf)) 
            {
                printf("[-]invalud name of link_map at %p\n", (void *)lmap.l_name);
                continue;
            }
            printf(">> start search symbol in %s:\n", buf);
            Elf_Addr sym_addr = find_symbol_in_linkmap(pid, &lmap, sym_name);
            if (sym_addr) 
            {
                return sym_addr;
            }
        }
        return 0;
    }
最后执行了`Elf_Addr sym_addr = find_symbol_in_linkmap(pid, &lmap, sym_name);`
继续来看find_symbol_in_linkmap函数，这个函数的主要作用是根据handle_one_lmap返回的lmap_result结构体中的信息来判断
我们需要找的函数是否在这个so中
    Elf_Addr find_symbol_in_linkmap(int pid, struct link_map *lm, char *sym_name)
    {
        int i = 0;
        char buf[STRLEN] = {0};
        unsigned int nlen = 0;
        Elf_Addr ret;
        Elf_Sym *sym = (Elf_Sym *)malloc(sizeof(Elf_Sym)); 
        struct lmap_result *lmret = handle_one_lmap(pid, lm);
        //lmap_result结构体，包含了SYMTAB、STRTAB、RELPLT、REPLDYN等信息
        /*
        struct lmap_result 
        {
            Elf_Addr symtab;
            Elf_Addr strtab;
            Elf_Addr jmprel;
            Elf_Addr reldyn;
            uint64_t link_addr;
            uint64_t nsymbols;
            uint64_t nrelplts;
            uint64_t nreldyns;
        };
        */
        for(i = 0; i >= 0; i++) 
        {
            // 读取link_map的符号表
            ptrace_getdata(pid, lmret->symtab + i * sizeof(Elf_Sym) ,sym ,sizeof(Elf_Sym));
            // 如果全为0，是符号表的第一项
            if (!sym->st_name && !sym->st_size && !sym->st_value) 
            {
                continue;
            }
            nlen = ptrace_getstr(pid, lmret->strtab + sym->st_name, buf, 128);
            if (buf[0] && (32 > buf[0] || 127 == buf[0]) ) 
            {
                printf(">> nothing found in this so...\n\n");
                return 0;
            }
            if (strcmp(buf, sym_name) == 0) 
            {
                printf("[+]has find the symbol name: %s\n",buf);
                if(sym->st_value == 0) 
                {//如果sym->st_value值为0，代表这个符号本身就是重定向的内容  
                    continue;
                }
                else 
                {// 否则说明找到了符号
                    return (lmret->link_addr + sym->st_value);
                }