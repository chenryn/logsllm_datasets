answer += v / 2 * 2 
 answer++
，要求用这个字符串里面的字符组成一个回文串，问回文串最长可以组合成多长
---
## Page 497
代码
解题思路
数组长度 n 满足以下条件:
注意：
使得这㎡ 个子数组各自和的最大值最小。
给定一个非负整数数组和一个整数 m，你需要将这个数组分成m个非空的连续子数组。设计一个算法
题目大意
Examples:
Note:lf n is the length of array, assume the following constraints are satisfied:
these m subarrays.
into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among 
Given an array which consists of non-negative integers and an integer m, you can split the array 
·给出一个数组和分割的个数 M。要求把数组分成 M 个子数组，输出子数组和的最大值。
·１0００
●1≤m≤min(50, n)
package leetcode
●1 ≤m ≤ min(50, n)
m=
nums = [7,2,5,10,8] 
·１100０
where the largest sum among the two subarrays is only 18.
The best way is to split it into [7,2,5] and [10,8],
There are four ways to split nums into two subarrays.
Explanation:
Output:
Input:
小值，即为最终答案。
α。α 的搜索范围在 ［max，sum］ 中。逐步二分逼近 low 值，直到找到能满足条件的 low 的最
满足 S(i）×。这个条件保证了α是所有 S(i）中的最大值。要求的是满足该条件的最小的
最大最小值问题。题目可以转化为在次划分中，求一个×，使得α满足：对任意的S(i），都
这一题可以用动态规划 DP 解答，也可以用二分搜索来解答。这一题是二分搜索里面的 max-min 
2
---
## Page 498
five output "Buzz". For numbers which are multiples of both three and five output "FizzBuzz".
But for multiples of three it should output "Fizz" instead of the number and for the multiples of 
题目
412. Fizz Buzz
func calsum(mid, m int, nums []int) bool {
func splitArray(nums []int, m int) int {
return true
sum, count := O,0 
return low
for low  mid {
sum += v 
} else { 
if calsum(mid, m, nums) {
mid := low + (high-low)>>1
return sum
sum += num 
 high = mid 
low = mid + 1
wnu = wnNxew 
//分成 m 块，只需要插桩 m -1 个 
sum = v
-, num := range nums {
count++
 return false
---
## Page 499
代码
按照题意做即可。
解题思路
3的倍数输出"Fizz"，5的倍数输出"Buzz"，15的倍数输出"FizzBuzz"，其他时候都输出原本的数字。
题目大意
Example:
func fizzBuzz(n int) []string {
package leetcode
Return:
n = 15,
import "strconv"
一
ifｎc{
else ｉf b
 ifv>a{
return a 
b=v
3
a=v
C=b
-, v := range nums {
=b
返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复
---
## Page 502
代码
解题思路
给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相
题目大意
Example 2: 
Example 1: 
·给定一个非空的数组，其中所有的数字都是正整数。问是否可以将这个数组的元素分为两部分，使
1．每个数组中的元素不会超过100
Explanation: The array cannot be partitioned into equal sum subsets.
Input:[1, 2,3, 5] 
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Input:[1,5，11,5]
func canPartition(nums []int) bool {
package leetcode
Output: false
output: true
for -, v := range nums {
sum := 0 
3
* sum/2 ) = 0( n * sum)。
不能填满背包，加上第i个物品以后恰好可以填满这个背包，也可以满足题意。时间复杂度 （ n 
F(n,C）代表将n 个物品填满容量为 C的背包，状态转移方程为 F(i,C）= F(i－ 1,C）II
这一题是典型的完全背包的题型。在n 个物品中选出一定物品，完全填满 sum/2 的背包。
得每部分的数字和相等。
数组的大小不会超过200
sum += v
F(i－1，C－w[i]）。当i-1 个物品就可以填满C，这种情况满足题意。同时如果i-1个物品
---
## Page 503
解题思路
给定一个非空数组，数组中元素为 a0, a1,a2,….,an-1，其中 0≤ai= nums[i]; j-- {
dp[j] = dp[j] ll dp[j-nums[i]]
---
## Page 504
代码
is leftPartofNum
then a ^ c = b; 
candidate 
then we have
we're going to explore
at i = 2， it means 
func findMaximumxoR(nums []int) int {
//解法一
package leetcode
）还有更好的做法是利用 Trie 这个数据结构。构建一棵深度为 33 的二叉树。root 节点左孩子为 1
for i := 31; i >= 0; i-- {
maxResult, mask := O,0
AC，而且时间复杂度非常低，耗时巨少，时间打败100%。
组弱数据可以直接AC。我们的暴力解法卡在一组很多的数据上，我们欺骗掉它以后，可以直接
最后还有更"完美的做法"，利用leetcode 网站判题的特性，我们可以测出比较弱的数据，绕过这
么最终答案该位为 O，依次迭代得到最终结果。具体做法见：Java Q(n) solution using Irie -
为空，那么得到最终答案的两个数字肯定分别出自于左右子树且此位为1；如果任意一个为空，那
右孩子为〇代表着所有数字的最高位，其次根据次高位继续往下。如果某一个节点左右子树都不
最终 max 里面就是需要求的最大值。
前的 max 值要大，就更新。按照这样的方式遍历往 32位，每次也遍历完整个数组中的每个数
 before we reach the last two bits, llio0 is the biggest xOR we have, and
LeetCode Discuss
greedyTry := maxResult I (1  res { 
xor := nums[i] ^ nums[j] 
if m[anotherNum^greedyTry] == true {
// If we hope the formula a ^ b = c to be valid, then we need the b,
If unfortunately, we didn't get the greedyTry, we still have our max,
 res = xor 
break 
---
## Page 506
代码
的长度的最大值就可以了。
现频次最大的长度，如果差值比K大，就代表需要缩小左窗口了直到差值等于K。res 不断的取出窗口
最多的字母上，再改变其他字母得到的最长连续长度。窗口滑动的过程中，用窗口的长度减去窗口中出
该是，边滑动的过程中边统计出现频次最多的字母，因为最后求得的最长长度的解，一定是在出现频次
动。因为有可能存在 ABBBBBA 的情况，这种情况需要从两边方向同时判断。正确的滑动窗口的做法应
这道题笔者也提交了好几遍才通过。这一题是考察滑动窗口的题目，但是不能单纯的把左右窗口往右移
解题思路
给一个字符串和变换次数K，要求经过K次字符转换以后，输出相同字母能出现连续最长的长度。
题目大意
 Example 2:
func characterReplacement(s string, k int) int 
package leetcode
 1      1  b 
 e  ,     ,   
Explanation:
Output:
S = "AABABBA"，k = 1 
Input:
output:
S = "ABAB"， k = 2 
Explanation:
P
Input: 
---
## Page 507
 Example 2:
Example 1: 
Note:
the bank to make it a valid gene string.
mutation is defined as ONE single character changed in the gene string.
Suppose we need to investigate about a mutation (mutation from "start" to "end"), where ONE
mutations needed to mutate from "start" to "end". If there is no such a mutation, return -1. 
Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of 
Also, there is a given gene "bank", which records all the valid gene mutations. A gene must be in 
For example, "AACCGGTT" -> "AACCGGTA" is 1 mutation. 
"g", "t".
题目
433. Minimum Genetic Mutation
3. You may assume start and end string is not the same.
 2. If multiple mutations are needed, all mutations during in the sequence must be valid.
return: 1
bank: ["AACCGGTA"]
start:
1. Starting point is assumed to be valid, so it might not be included in the bank. 
end:
return res
for right = O; right  k {
counter = max(counter, 
left++ 
freq[s[left]-'A']--
"AACCGGTA"
"AACCGGTT'
freq[s[right]-'A']]
---
## Page 508
代码
解题思路
起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回-1。
题目大意
 Example 3:
注
·给出 start 和 end 两个字符串和一个 bank 字符串数组，问从 start 字符串经过多少次最少变换能
3．假定起始基因序列与目标基因序列是不一样的。
1．起始基因序列默认是合法的，但是它并不一定会出现在基因库中。
func minMutation(start string, end string, 