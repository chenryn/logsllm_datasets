title:LogicScope: automatic discovery of logic vulnerabilities within web
applications
author:Xiaowei Li and
Yuan Xue
LogicScope: Automatic Discovery of Logic Vulnerabilities
within Web Applications
Xiaowei Li
Yuan Xue
Department of Electrical Engineering and
Department of Electrical Engineering and
Computer Science
Vanderbilt University
Nashville, TN USA 37203
PI:EMAIL
Computer Science
Vanderbilt University
Nashville, TN USA 37203
PI:EMAIL
ABSTRACT
Logic ﬂaws are an important class of vulnerabilities within
web applications, which allow sensitive information and re-
strictive operations to be accessed at inappropriate appli-
cation states. In this paper, we take a ﬁrst step towards a
systematic black-box approach to identifying logic vulnera-
bilities within web applications. We ﬁrst construct a par-
tial FSM over the expected input domain by collecting and
analyzing the execution traces when users follow the navi-
gation paths within the web application. Then, we test the
application at each state by constructing unexpected input
vectors and evaluating corresponding web responses. We
implement a prototype system LogicScope and demonstrate
its eﬀectiveness using a set of real world web applications.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection—Unauthorized access
General Terms
Design, Experimentation, Security
Keywords
Logic Vulnerability; Web Application Security; Finite State
Machine
1.
INTRODUCTION
Web applications have become one of the most prevalent
technologies for information and service delivery over Inter-
net. As they get increasingly complex to support sophis-
ticated business functionalities, the vulnerabilities, as well
as the attacks that target on those vulnerabilities, are both
increasing. Vulnerabilities within web applications are com-
monly classiﬁed into two classes [3]. Input validation vul-
nerabilities are introduced by insuﬃcient or erroneous sani-
tization of user inputs, which allows injection attacks (e.g.,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$10.00.
Cross-site Scripting, SQL injections), where malicious code
is injected into web applications. The other class of vulner-
abilities, which are referred to as logic vulnerabilities, (a.k.a,
logic ﬂaws) are caused by insuﬃcient state checks, which
allows sensitive information and restrictive operations to be
accessed at inappropriate application states (i.e., state viola-
tion attacks). In contrast to input validation vulnerabilities,
there have been very limited works that address logic vul-
nerabilities. The major challenge comes from the fact that
application logic ﬂaws are speciﬁc to the intended function-
ality of a particular web application. A real attack example
is that in 2011, a huge amount of credit card information
was leaked due to a logic ﬂaw within the citigroup website
[2].
Identifying logic ﬂaws requires the knowledge of both the
intended behavior (i.e., speciﬁcation) of the application and
the actual behavior as implemented in the application. Ex-
isting works (e.g., Waler [4], Sun et al. [12]) apply program
analysis techniques over the application source code to iden-
tify the deviations of the implementation from the intended
behavior. These techniques all require application source
code for analysis or instrumentation, which makes them
closely coupled with the application language (e.g., PHP,
JSP), platform and implementation details. The correct-
ness and accuracy of their derived intended behaviors are
highly dependent on and thus limited by their capability of
dealing with language-level details (e.g., if they can handle
object-oriented code). Black-box analysis provides an ap-
pealing alternative that overcomes all the above limitations,
but faces signiﬁcant challenges, since it requires suﬃcient
knowledge about the application logic under test without
the application source code.
In this paper, we take a ﬁrst step towards a systematic
black-box approach to identifying a broad range of logic
ﬂaws within web applications. In particular, we model the
logic of a web application using a ﬁnite state machine (FSM)
and formalize logic vulnerabilities as the discrepancies be-
tween the intended FSM and the implementation FSM. The
intended behavior of a web application can usually be ob-
served when normal users follow the navigation paths within
the web application [4][12]. In this case, we say the inputs
(i.e., HTTP requests) from the users are expected. Over the
expected inputs, the behavior of the intended FSM and the
implementation FSM are consistent. The discrepancies are
manifested over the application behaviors when unexpected
inputs are fed into the application.
To identify such discrepancies, we ﬁrst construct the in-
481tended FSM as a partial FSM over the observed user inputs
(i.e., expected input domain). Then, based on the inferred
partial FSM, we test the application over unexpected inputs
at each state to identify logic ﬂaws. We present two meth-
ods for constructing test input vectors, corresponding to two
commonly seen state violation attack vectors, i.e., parame-
ter manipulation and forceful browsing attacks, and feed
them into the application. We give an evaluation rule to de-
termine whether the corresponding web response manifests
a potential logic vulnerability. The reported potential logic
vulnerabilities are evaluated manually are classiﬁed into real
attack vectors and false positives.
Our contributions can be summarized as follows.
• We propose a systematic black-box approach to identi-
fying logic ﬂaws within web applications. In particular,
we give a formalization of logic vulnerability based on
the FSM model and present two test input generation
methods. Our approach is independent of the applica-
tion language, source code and implementation, thus
can be scalable and general to handle a number of web
applications and platforms.
• We implement a prototype system LogicScope and eval-
uate it using a set of real world web applications to
demonstrate the eﬀectiveness of LogicScope. Logic-
Scope gives concrete attack vectors and evaluation evi-
dences, which would greatly facilitate the conﬁrmation
and analysis of reported logic ﬂaws.
The rest of paper is organized as follows. We present our
system model and problem formalization in Section 2. Our
approach and evaluation results are illustrated in Section 3
and 4, respectively. Section 5 discusses related works and
Section 6 concludes the paper.
2. PROBLEM DESCRIPTION
In Figure 1, we present a small and vulnerable web appli-
cation as the running example to illustrate how we formalize
and identify logic ﬂaws within web applications. This appli-
cation uses two explicit session variables $ SESSION[‘privilege’]
and $ SESSION[‘userid’] to remember the current user’s ac-
cess right and id. A user, who just logs in, will be redirected
to index.php page.
If the current user is an admin (i.e.,
$ SESSION[‘privilege’] is equal to “admin”), he/she is pre-
sented with links for adding new users, editing and deleting
any of the registered users. If the current user is a regular
user (i.e., $ SESSION[‘privilege’] is equal to “user”), he/she
can only see the link for editing his/her own information.
We model a web application using a ﬁnite state machine
(FSM) model (S, s0, Σ, Λ, T , G), where S is the set of
states, s0 ∈ S is the initial state, Σ is the set of input sym-
bols (i.e., input alphabet), Λ is the set of output symbols
(i.e., output alphabet), T : S × Σ → S is the set of tran-
sition functions and G : S × Σ → Λ is the set of output
functions. T and G determine the next state and the out-
put symbol, respectively, based on the current state and the
input symbol.
To understand the logic ﬂaws within a web application,
we need to consider two FSMs associated with it: (1) the
ideal FSM (denoted as Fideal) models the intended (or ex-
pected) behavior of the web application without any secu-
rity vulnerabilities; (2) the implementation FSM (denoted
as Fimpl) models the actual behavior of the web application
Add User ”;
$user_set = get_all_users();
foreach ($user_set as $user) {
echo “Edit User ”;
echo “Delete User ”;
}
} else if ($_SESSION[`privilege`] == “user”) {
echo “Edit 
User ”;
}
?>
add_user.php
edit_user.php
delete_user.php
Figure 1: Example Application
as being implemented by the developer. If Fimpl is equiva-
lent to Fideal, we say the implemented web application is se-
cure as intended. If there exist discrepancies between Fimpl
and Fideal and the discrepancies involve sensitive informa-
tion or operations, we say the implemented web application
has logic vulnerabilities.
As shown in Figure 2, the example application has three
states: the user is not logged in (s0), a regular user logs
in (s1) and an admin user logs in (s2). Each input sym-
bol I ∈ Σ is an abstract representation of a web request,
which consists of two parts: 1) the key (denoted by K) rep-
resents the syntax structure of the web request (e.g., K1 =
GET-edit user.php : userid); 2) the value (denoted by V )
represents the value domains of the parameters, which is re-
lated to the semantics of the web request (e.g., V1 = [userid
= vconstrained($ SESSION[‘userid’])] means that the userid
parameter in the web request is always equal to the value of
the session variable userid) (refer to Section 3.3 for details).
I1 = K1.V1 and I2 = K1.V2 are two diﬀerent input symbols
due to the diﬀerence in their parameter value domains, al-
though they have the same syntax structure. Similarly, each
output symbol in Λ is an abstract representation of the web
responses returned by the application to users.
The ideal FSM (Fideal) for the application works as fol-
lows. At state s1, since it is intended that the regular user
can only edit his/her own information, when the regular
user sends an input symbol I1 = K1.V1, where the userid
parameter is equal to the current user id, the application
will respond with the edit user page (output symbol O1).
When the regular user tries to edit other user’s informa-
tion (i.e., sending I2 = K1.V2), delete a user (i.e., sending
I3 = K2.V ) or add a new user (i.e., sending I4 = K3.V ),
the application should reject such input symbols with an
ACCESS DENIED page (output symbol O2).
However, the implemented application has two logic vul-
nerabilities, which are reﬂected as the discrepancies between
Fideal and Fimpl, shown using the dashed lines with arrows
in Figure 2. First, the edit user.php page doesn’t check if
the userid parameter is equal to the current user id. Sec-
ond, the add user.php page doesn’t check if the current user
has the admin privilege, as the delete user.php page does.
These vulnerabilities allow two types of attacks. 1) Param-
eter manipulation attack: when input symbol I2 is sent to
482the application at state s1, output symbol O1 is returned.
This allows a regular user to edit other users’ information.
2) Forceful browsing attack: when input symbol I4 is sent to
the application at state s1, O4 is returned, which allows a
regular user to add new users.
Fimpl as intended by Fideal. Thus, we say a web application
has a logic vulnerability at state s, if an input symbol, which
is not expected at state s (called a malicious input and de-
noted by Imal), is fed into the application, the application
generates an output symbol that falls beyond the dummy
output set (i.e., G(s, Imal) ∈ (Λ − Λdum(s))).
$_SESSION[‘userid’]=null
$_SESSION[‘privilege’]=null
S0
S1
S2
$_SESSION[‘userid’]=xx
$_SESSION[‘privilege’]=user
$_SESSION[‘userid’]=xx
$_SESSION[‘privilege’]=admin
Input symbols
I1= K1. V1:  [GET-edit_user.php : userid] . [userid = 
vconstrained($_SESSION[‘userid’])] 
I2= K1. V2:  [GET-edit_user.php : userid] . [userid = vunsatisfied] 
I3= K2. V:   [GET-delete_user.php : userid] . [userid = nonnull]
I4= K3. V:   [GET-add_user.php : userid] . [userid = nonnull]
Output symbols
O1:  edit_user_page
O2:  ACCESS_DENIED
O3:  delete_user_page
O4:  add_user_page
Fideal
Fimpl
S1: Σ  Λ
S1: Σ  Λ
Σ
exp(S1)
Λ
mea(S1)
Σ
exp(S1)
Λ
mea(S1)
I1
I2
I4
I3
O1
Λ
dum(S1)
O2
I1
I2
I4
I3
O1
O4
Λ
dum(S1)
O2
S2: Σ  Λ
S2: Σ  Λ
Σ
exp(S2)
I1