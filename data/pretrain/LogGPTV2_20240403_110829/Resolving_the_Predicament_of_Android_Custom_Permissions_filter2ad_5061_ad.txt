Having a formal model offers several advantages, such as enabling security researchers to verify various properties of the runtime permission model. Our model is based on the Alloy implementation from [20], as Alloy is a high-level specification language that is easy to interpret. However, we have made significant efforts to extend this model to align with the official specifications for the new runtime permissions [4]. We analyze the security of the model through automated analysis and demonstrate that, when augmented with Cusper's design, the fundamental security properties that were originally violated are now satisfied.

Our main contributions to the existing formal analysis of Android permissions can be summarized as follows:

- **Updated Permission-Related Data Abstractions:** We updated the definitions of permission-related data abstractions in the model to comply with the new definitions of the runtime permission model.
- **Enhanced Permission Granting Scheme:** We significantly updated the permission granting scheme to conform to the complex granting scheme of the runtime model specification (e.g., permissions can be granted either at install time or at runtime).
- **Implemented Permission Groups:** We implemented permission groups and permission granting on a group basis for dangerous permissions according to the runtime permission model.
- **Dynamic Manifest Declarations:** We enabled apps to dynamically change their manifest declarations and introduced an app update mechanism (which was not possible in the previous model).
- **Bug Fixes:** We identified and fixed bugs in the existing model.
- **Vulnerability Mitigation:** We demonstrated the existence of custom permission vulnerabilities in the model and implemented our defense, Cusper, to thwart these vulnerabilities, showing that Cusper satisfies the fundamental security properties (e.g., missing signature checks for permissions).

### Model Scope and Structure

We focus on modeling the parts of Android that concern permissions (e.g., permission-related data abstractions and operations) because modeling all of Android would be infeasible due to its large scope and complexity. Due to space limitations, we will present only the key parts of our model that are essential for understanding its general operation or that significantly differ from the previous model. The full Alloy implementation can be found in [17].

Our model can be divided into three main parts:
1. **Abstractions:** Related to permissions, device architecture, and applications on Android.
2. **System Operations:** Concerning permissions.
3. **Fundamental Security Properties:** To verify the correct behavior of the model.

### A. Abstractions

In this section, we present the abstractions in our model that correspond to the representations of permissions, applications, and devices on Android.

#### Permissions
Our `Permission` abstraction includes a name, a source package to indicate the defining package name, a protection level, and at most one permission group. Listing 2 presents the Alloy implementation for permissions, protection levels, and permission group abstractions.

```alloy
sig Permission {
    name : PermName,
    protectionLevel : ProtectionLevel,
    sourcePackage : PackageName,
    permGroup : lone PermGroupName // if perm belongs to group
}
abstract sig ProtectionLevel {}
one sig Normal, Dangerous, Signature extends ProtectionLevel {}
sig PermissionGroup {
    name : PermGroupName,
    perms : Permission -> Time // set of changing perms
}
```

#### Applications and Components
Each `Application` on Android has a unique package name, a signature used by the developer to sign the app, and a target SDK level. Additionally, each app can comprise several components, defined by the set `Component`, where a component can be one of the four Android components. Each component can be protected with a permission, which we call a guard. An application itself can also have a guard to protect all of its components. If both a component and an application guard exist, the component guard takes precedence. Each application can define a set of custom permissions and request a set of permissions.

To track the permissions granted to apps, each app is associated with a `permissionsState` field, which consists of a set of `PermissionData` objects carrying system flags and state information (e.g., whether a permission is granted at runtime or install time). This concept of "stateful" permissions is a major difference between the runtime and install-time models.

To implement an app update mechanism, we allow apps to dynamically change the declarations in their manifest file. We associate the mutable fields with an object from the totally-ordered set of `Time` to allow pairing of the fields with different values at different time steps. The package name and signature must remain immutable, as they are unique identifiers for apps and developers. The ability to dynamically change declarations is another important feature we introduce, as it allows us to update Android apps already installed on a device. Listing 3 demonstrates the application-related abstractions in Alloy.

```alloy
sig Application {
    packageName : PackageName,
    signature : AppSignature,
    declaredPerms : Permission -> Time, // custom permissions
    usesPerms : PermName -> Time, // requested permissions
    guard : lone PermName, // protects all components
    components : set Component,
    targetSDK : Int -> Time,
    // carries info regarding granted perms
    permissionsState : PermissionData -> Time
}
abstract sig Component { // definition shortened for brevity
    app : Application,
    guard : lone PermName, // protects only this component
}
sig PermissionData {
    perm : Permission,
    flags : Flags,
    isRuntime : Bool // runtime or install permission
}
```

#### Device
Each `Device` comes with a set of built-in system permissions and a set of custom permissions defined by third-party apps. We include a platform signature in our device representation to correctly perform signature checks when granting signature permissions defined by the system. Listing 4 illustrates the device abstraction in Alloy.

```alloy
one sig Device {
    apps : Application -> Time,
    builtinPerms : set Permission, // system permissions
    customPerms : Permission -> Time, // custom permissions
    platformPackageName : one PackageName,
    platformSignature : AppSignature,
    builtinPermGroups : set PermissionGroup // system groups
}
```

### B. System Behavior

In this section, we describe the main system operations (i.e., Alloy predicates) that deal with Android permissions. By carefully investigating the Android source code, we observed that most of these critical operations have either undergone significant changes or been recently introduced with the runtime permission model. Specifically, apart from the significant changes in abstractions, main operations such as install, uninstall, and update now require a scan over all other existing applications to properly adjust their permissions whenever there is a change in the set of permissions (e.g., removal of a permission). Additionally, Android's permission granting scheme changed drastically with the introduction of runtime permissions. We aim to reflect all of these changes in our formal model. It is important to note that the order of statements in the presented predicates does not affect their correct operation since Alloy is a declarative (rather than imperative) language.

#### Grant Permissions
In contrast to the install permission model where permissions can be granted only at installation, in the runtime permission model, depending on the protection level and the app’s target SDK level, permissions can be granted as either install or runtime permissions. Permissions with protection levels `Normal` and `Signature` are always granted as install permissions, whereas for `Dangerous` permissions, the behavior changes based on the target SDK level of the app being installed.

Table III shows the cases that can happen when granting permissions. Each case will add or remove "stateful" permission objects for the app. As explained in Section IV, we observed implementation flaws in this part of the Android source code, which make the aforementioned attacks possible, and we mirrored the same erroneous behavior in our Alloy predicate for granting permissions (`grantPermissions`).

For example, when denying "dangling" permissions to apps, we skip revoking runtime permissions and only revoke install permissions, as it is currently implemented in Android. Also, when a custom permission is updated from `Normal` to `Dangerous` protection level, we treat this as an app SDK update—just as Android mistakenly does—and automatically grant the dangerous permission without user consent. Note that our final formal model corrects these and other problematic issues according to Cusper's design. Listing 5 illustrates this operation; an example of how an individual case is handled can be found in Listing 10 in the Appendix.

```alloy
pred grantPermissions[app : Application, t, t’ : Time] {
    all pname : app.usesPerms.t’ |
        pname in (Device.builtinPerms + Device.customPerms.t’).name => 
        (let p = findPermissionByName[pname, t’] {
            p.protectionLevel = Normal // Case GRANT_INSTALL (normal)
                => grantInstallCase[p, app, t, t’]
            else // Case GRANT_INSTALL (signature)
                p.protectionLevel = Signature and 
                    (verifySignatureForCustomPermission[p, app, t’] or
                     verifySignatureForBuiltinPermission[p, app])
                => grantInstallCase[p, app, t, t’]
            // ... other cases (grant runtime etc.)
            else // Case GRANT_DENY (deny permission)
                no pd : PermissionData | pd.perm.name = pname and
                    pd in app.permissionsState.t’
        })
    else // permission doesn't exist, evoke (wrongfully only install perms)
        let pd = getPermissionData[pname, app, t]{
            hasPermissionData[pname, app, t] and
            pd.isRuntime = True and
            pd.perm.protectionLevel = Dangerous
                => pd in app.permissionsState.t’
            else
                no pd : PermissionData | pd.perm.name = pname and
                    pd in app.permissionsState.t’
        }
    // make sure app cannot be granted unrequested permission
    no pd : app.permissionsState.t’ | pd.perm.name not in app.usesPerms.t’
}
```

### Installation
As a precondition to the install operation, the app being installed should not exist on the device, and the list of apps after the operation is completed should consist strictly of all the apps before installation, augmented by the new app. As a result of installation, custom permissions of this app will be added to the device. Just as it is currently handled in Android, our Alloy predicate for installation does not allow an app to declare a custom permission that has the same name as an existing permission on the device. Custom permissions that are declared to be part of system permission groups also get added to the respective groups. Finally, the installation process ensures that the app's permissions are correctly initialized and managed.