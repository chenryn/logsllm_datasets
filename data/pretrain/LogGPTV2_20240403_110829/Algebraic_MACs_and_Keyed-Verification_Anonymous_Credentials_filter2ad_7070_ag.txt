⇐⇒g−rx
σw
n(cid:89)
n(cid:89)
1
xi
x0(cid:81)n
x0+(cid:80)n
1 (σw
Cσx
mihwi)xi
1 mixi(cid:81)n
1 hwixi
Cσx
(hxi)wi =
σw
x0+(cid:80)n
1 mixi
1
⇐⇒g−rx
⇐⇒Cσxg−rx = σw
y0(cid:81)n
yi
1 Cmi
y0+(cid:80)n
Cry σw
And similarly Vy =
honest veriﬁer makes guarantees that σz = σw
only if (σw, Cσxg−rx, Cσy g−ry , σz) would be accepted by VerifyDDH for message (m1, . . . , mn).
1 yimi. The ﬁnal check that the
z. Thus, the honest veriﬁer algorithm accepts if and
Cσy
if and only if Cσy g−ry = σw
Similarly, we can argue that B extracts a valid MAC from the ﬁnal show protocol whenever
ShowVerify would have output 1. Thus, if A can cause ShowVerify to accept for some statement φ
that is not satisﬁed by any of the attribute sets queried to Issue, then B extracts a new message
(m1, . . . , mn) and a valid tag for that message.
Anonymity. Suppose the user is trying to prove that he has a credential for attributes satisfying
some statement φ. Then we want to show that there exists an algorithm SimShow that for the adversary
is indistinguishable from Show, but that only takes as input the statement φ and the secret key sk .
Let φ ∈ Φ and (m1, . . . , mn) ∈ U be such that φ(m1, . . . , mn) = 1. Let (iparams, sk ) be in the range
of CredKeygen, and let cred be such that CredVerify(sk , cred , (m1, . . . , mn)) = 1.
Then SimShow(sk , φ) behaves as follows: It chooses random values σw, Cσx, Cσy , Cm1, . . . , Cmn
1 Cmi
$←−
G. It then uses {xi, yi}n
.
It runs A with these values as the ﬁrst message, simulates the proof of knowledge, and outputs whatever
A outputs at the end of the proof.
0 , z from sk to compute σz = σw
, and Vy = σw
z, Vx = σw
x0(cid:81)n
y0(cid:81)n
1 Cmi
Cσx
Cσy
xi
yi
First note that Cσx, Cσy , Cm1, . . . , Cmn are distributed identically to those produced by Show. Next,
note that for any cred such that CredVerify(sk , cred , (m1, . . . , mn)) = 1, randomizing the credential
1 ximi, σy =
produces the same distribution as choosing random σw and computing σx = σw
1 yimi, and σz = σw
0 in sk . Thus, σw, σz is also distributed identically
σw
to those produced by Show.
y0+(cid:80)n
Finally, note that if we deﬁne rx, ry,{wi}i to be the values such that Cσx = σw
1 ximigrx,
1 yimigry , and Cmi = umihwi for the random values Cσx, Cσy , Cm1, . . . , Cmn chosen by
Cσy = σw
SimShow, then the calculation above in the proof of correctness shows that the Vx, Vy that SimShow
computes is identical to those that the honest Show would have produced.
x0+(cid:80)n
x0+(cid:80)n
z for the values z,{xi, yi}n
y0+(cid:80)n
By the zero knowledge property of the proof of knowledge, we conclude that the resulting view is
indistinguishable from that produced by the adversary interacting with Show.
Blind issuance. First, we consider the setting where all of the attributes are known to the issuer and
we use the simpler algorithm. Consider the case where the user is corrupt. Then our 2PC simulator
on shared input (S, iparams) receives the user’s list of attributes (m1, . . . , mn) and forward it to the
functionality. The functionality returns “attribute error” if S (cid:54)= (m1, . . . , mn) and otherwise it returns
cred . If the error does not occur, the 2PC simulator then sends cred and runs the proof of knowledge
25
ZK simulator to simulate the proof of correctness for cred . By zero knowledge, this is indistinguishable
from the real world.
Next, we consider the case where the issuer is corrupt. In this case our 2PC simulator receives
cred = (σw, σx, σy, σz) from the issuer and runs the veriﬁer for the proof system. If the proof accepts, it
runs the proof of knowledge extractor to extract sk = ({xi}n
0 , ˜x, ˜y, ˜z) and r = σw. It sends (sk , r)
to the ideal functionality. By the proof of knowledge property, the credential sent in the real world is
z) which is exactly what would be produced by
σw, σw
the ideal functionality on input the (sk , r) described above.
x0(cid:81)n
y0(cid:81)n
mi)xi, σy = σw
mi)yi, σz = σw
0 ,{yi}n
1 (σw
1 (σw
x, E(cid:48)
1 (σw
mi)xi, σw
y0(cid:81)n
x0(cid:81)n
y of σy, sends (σw, σz, E(cid:48)
x of σx and an encryption E(cid:48)
mi)yi. Thus, these are identical to what the simulator produces.
Then, we consider the more complex algorithm which allows hidden attributes. Consider the case
where the user is corrupt. Then our 2PC simulator on shared input (S, iparams) receives the user’s list
of ciphertexts (E1, . . . , En), and runs the veriﬁcation for the proof of knowledge. If the proof accepts,
it then uses the proof of knowledge extractor to extract {mi}i∈H and send it along with the set S to the
functionality.5 The functionality returns cred = (σw, σx, σy, σz). The 2PC simulator then computes
an encryption E(cid:48)
y) to the user, and uses the ZK
simulator to simulate the correctness proof.6 Note that in the real BlindIssue protocol, if E1, . . . , En are
encryptions of gm1, . . . , gmn, then the resulting Ex, Ey is distributed identically to a fresh encryption
of σw
Next, we consider the case where the issuer is corrupt. In this case our 2PC simulator generates
encryptions Ei of 1 for all i ∈ H, sends them to A, and simulates the proof. It then receives cred =
(σw, σx, σy, σz) from A and runs the veriﬁcation of the proof of knowledge; if the proof is accepting,
it runs the proof of knowledge extractor to extract sk = ({xi}n
0 , ˜x, ˜y, ˜z) and r = gb. It sends
(sk , r) to the ideal functionality. To see that this is indistinguishable from the real game, consider
the following series of games. The ﬁrst game G1 is identical to the real game, except that instead of
computing σx, σy by decrypting the ciphertexts Ex, Ey, we run the proof of knowledge extractor to
extract sk , r and use those to form the credential by running Issue. By the proof of knowledge property
and correctness and homomorphic properties of the encryption scheme, the credential sent in the real
z) which is exactly what would be produced by
world is (σw, σw
the ideal functionality on input the (sk , r) described above. Next, in game G2 we replace the proof of
knowledge of the messages in Ei with a simulated proof - by zero knowledge this is indistinguishable.
Finally, we note that the only diﬀerence between this game and the simulated game is that Ei is
generated as an encryption of gmi rather than 1; thus the two games are indistinguishable by CPA-
security of Elgamal encryption (which follows from DDH [29]).
x0(cid:81)n
y0(cid:81)n
0 ,{yi}n
1 (σw
mi)yi, σw
1 (σw
1 (σw
mi)xi, σw
Key-parameter consistency. This follows under the discrete log assumption from the binding
property of the Pedersen commitment scheme. (Note that the discrete log assumption is implied by
DDH.)
D Instantiating Proofs of Knowledge
For our application we need a proof system that is zero knowledge and satisﬁes a strong proof of
knowledge property.
In our setting we propose two approaches to instantiating the proof system.
The ﬁrst is to use the Damg˚ard protocol [16], which converts any sigma protocol into a three-round
interactive zero-knowledge proof of knowledge secure under concurrent composition. This protocol
5This is another instance where we need the strong proof of knowledge property:
if we want to run this protocol
multiple times (sequentially), in each iteration we need to be able to extract sk , r, and continue the protocol.
6Note that, although our reduction needs to both simulate proofs and extract from proofs, in either of the alternatives
we discuss in Appendix D we do not need simulation soundness. Instead we can use two separate CRS’s or RO’s, one
for the issuer and one for the users.
26
requires trusted parameters but this restriction can be omitted in the random oracle model. The
second option is to make the assumption that the stronger extraction property holds for Fiat-Shamir
based proofs [18] in the random oracle model.
In particular, we need that the proof of knowledge property hold even when the adversary is given
some information about previously extracted values, which can be modeled as access to an extraction
oracle. (This comes up, for example, in the credential unforgeability proof, when we need to extract
in order to answer the user’s ShowVerify queries. For standard model proof protocols, when proofs
are executed sequentially, this follows directly from the standard proof of knowledge property [4]. In
the random oracle model, however, we don’t know of any such implication. (See [19, p. 152] for a
discussion of some of the issues in this setting.)
In our setting we propose two approaches to instantiating the proof system. The ﬁrst is to use
the Damg˚ard protocol [16], as described above. To see that trusted parameters can be avoided in the
random oracle model, consider the commitment scheme that chooses r and computes the commitment
as H(m; r). It is clear that in the random oracle model this is a trapdoor commitment, since control
of the random oracle can be used to open such a commitment to any message.
Implementing the
trapdoor commitment this way means we do not need any trusted setup besides the establishment of
a secure hash function that can be modeled as a random oracle.7
The second option is to make the assumption that the stronger extraction property holds for Fiat-
Shamir based proofs [18] in the random oracle model. While it is not obvious how to show that this
property holds in the random oracle model, it seems like a reasonable assumption in the combined
random oracle and generic group model, following along the lines of [27, 30]. Since our analysis for
the MACGGM scheme already uses this model, this may be a good choice for use with that scheme.
E Detailed Description of Show with MACGGM
We describe an instantiation of our presentation protocol and corresponding veriﬁcation when the ZK
proofs are implemented using non-interactive Schnorr proofs. This is the same proof system used in
U-Prove and Idemix. This protocol does not include proof of any additional predicates φ, but outputs
commitments which may be used as input to further proof protocols. H will denote a cryptographic
hash function.
E.1 Proof generation
Inputs: params, a credential u0, u(cid:48)
1. (Re-randomize) Choose a ∈R Fp, compute u = u0
0, and attribute values m1, . . . , mn.
a and u(cid:48) = u(cid:48)
a. Delete a.
0
2. (Form commitments)
(a) Choose r, z1, . . . zn ∈R Fp.
(b) Compute {Cmi := umihzi}n
i=1, Cu(cid:48) := u(cid:48)gr.
3. (Create proof π)
(a) Choose ˜z1, . . . , ˜zn, ˜r, ˜m1, . . . , ˜mn ∈R Fp.
(b) Compute { ˜Cmi := u ˜mih ˜zi}n
i=1, and ˜V = X ˜z1 ··· X ˜zng˜r.
7For alternative trapdoor commitment schemes that do not require a random oracle, see [16, Section 4]. These
alternatives require trusted setup of a common reference string,
27
(c) Form the challenge
i=1(cid:107) ˜V )
(d) Compute responses (all mod p), {smi = ˜mi − cmi, szi = ˜zi − czi}n
c = H(param(cid:107){Cmi}n
i=1(cid:107)Cu(cid:48)(cid:107){ ˜Cmi}n
i=1, and sr = ˜r + rc. Let
S denote the set of responses.
(e) Output π = (c, S).
4. (Output) Output the presentation proof P = (u,{Cmi}n
i=1, Cu(cid:48), π).
E.2 Proof veriﬁcation
Inputs: Presentation proof P , issuer and system parameters param, private key elements x0, x1, . . . , xn.
1. Parse P as (u, Cm1, . . . , Cmn, Cu(cid:48), π).
2. Compute
3. (Verify π)
V =
x1 ··· Cmn
Cm1
xnux0
Cu(cid:48)
,
(a) Parse π as (c, S) where S contains the responses computed in Step 3d of proof generation.
(b) Compute
c(cid:48) = H(param(cid:107){Cmi}n
i=1(cid:107)Cu(cid:48)(cid:107){Cmigsmi hszi}n
i=1(cid:107)V X sz1 ··· X szn gsr )
(c) Accept π as valid if c(cid:48) = c, otherwise reject.
4. (Output) If π is valid, output {Cmi}n
i=1
28