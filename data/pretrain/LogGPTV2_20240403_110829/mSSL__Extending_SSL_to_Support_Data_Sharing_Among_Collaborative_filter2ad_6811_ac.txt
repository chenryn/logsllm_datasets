### Accelerating the Proof-of-Service Protocol

The performance of the proof-of-service protocol can be further enhanced by introducing parallelism to handle multiple blocks concurrently. Specifically, we require every acknowledgment to include digests of the last \( m \) encrypted blocks. The server will then verify whether the recipient has correctly received and decrypted these \( m \) blocks, rather than just the most recent one.

Upon receiving block key \( b_{i+1} \) and the encrypted block \( b_{i+1} \), the recipient must first acknowledge the receipt of \( b_{i+1} \) before proceeding to the next step. This design allows the prompt acknowledgment process to be repeated for the next \( m-1 \) blocks, significantly improving performance.

If a block \( b_i \) is found to be corrupted, the provider cannot prove that it successfully delivered \( b_i \) because the proof must show correct digests for all the last \( m \) blocks. Therefore, \( m \) should be chosen to balance scalability and a high level of parallelism.

Throughout the design, the server's load is kept minimal. A provider can wait until the end of serving a recipient to present a single proof of service. The only type of query a recipient can issue is to verify or retrieve the block key of a block it receives from a provider, which occurs only once per recipient-provider pair.

### Discussion

#### 5.1 Combining Security Functionalities

mSSL is configurable to support different security needs. Here, we discuss how the four primary security functions—client authentication (A), confidentiality (C), integrity (I), and proof of service (P)—can be combined. Below are the six meaningful combinations:

- **A**: Some clients are allowed to access a data object \( O \) at a server \( S \), while others are not. Thus, client authentication is required.
- **I**: Every client can obtain \( O \), but must ensure its integrity. No confidentiality or client authentication is needed here.
- **C**: Confidentiality of \( O \) is required, implying that client authentication (A) must also be utilized to ensure that the encrypted \( O \) is delivered only to authorized clients. Hence, C implies AC.
- **P**: Proof of service is required. P must be combined with A because a recipient needs a certificate for its public key, necessitating self-authentication. Additionally, the server must authenticate a provider before verifying the proof of service. P also includes its own method of encryption, so C is not needed. Therefore, enforcing P implies A, I, and P together, i.e., AIP.

Considering two-function combinations:
- **AI**: Integrity and client authentication.
- **AC**: Confidentiality and client authentication (already covered by C).

For three-function combinations:
- **AIC**: Client authentication, integrity, and confidentiality.

We do not have a combination of all four (AICP) since P implies not using C.

Thus, the six scenarios are: A, I, C (i.e., AC), P (i.e., AIP), AI, and AIC.

#### 5.2 Preventing Attacks

mSSL's integrity solution ensures that every block of a data object is authentic, even without server-side authentication. Each client can obtain a signed root value of the Merkle hash tree and the authentication path for every block, making any modification detectable.

mSSL also supports data transmission in encrypted form for confidentiality. The most complex attack is against the proof-of-service scheme, which we will focus on.

**Types of Proof-of-Service Attacks:**
- **Individual Cheating:**
  1. A provider overstates its service to gain extra credit.
  2. A recipient refuses to acknowledge receipt of specific blocks, preventing the provider from proving service.

mSSL addresses these issues:
- For the first type, every proof is a signed acknowledgment from the recipient, which the provider cannot forge.
- For the second type, if a recipient denies receipt, they will not generate an acknowledgment and thus will not receive the secret block key, making decryption impossible.

- **Colluded Cheating:**
  1. A provider forges a proof of self-service.
  2. Multiple recipients collude to send duplicate acknowledgments, falsely claiming service.
  3. Two clients collude to forge a proof of service.

Countermeasures:
- The server can determine if a proof is about a specific client-to-client service. In case (1), the server detects self-service. In case (2), only the proof from the actual provider is trustworthy.
- Case (3) is more challenging, but an economic countermeasure can be designed where the colluding recipient is penalized for forged services.

#### 5.3 Limitations of mSSL

mSSL is designed for secure and efficient sharing of a server's data among peer clients, not for two-way data transfer. It does not conflict with SSL, and an mSSL application can use SSL for client-server interactions and mSSL for peer-to-peer data sharing.

mSSL does not address all traditional client-server security issues, such as preventing data leakage after receipt. Additional functionalities, like traffic analysis prevention, may be necessary and can be added in the future.

### Evaluation

#### 6.1 Overview—Goal, Metrics, and Methods

The goal is to measure the overhead of using mSSL in different scenarios to determine its acceptability and compare overheads. The metrics include:
- **Server Capacity**: Number of client requests processed per time unit.
- **File Downloading Time**: Latency from initiating a connection to receiving the whole file.
- **Storage Overhead**: Space required for mSSL-related information.
- **Control Traffic Volume**: Volume of control traffic.

We evaluate mSSL under seven scenarios: none, A, I, C (i.e., AC), P (i.e., AIP), AI, and AIC.

#### 6.2 Server Capacity

We measured server capacity by connecting a client and a server through a 100 Mbps link. The client flooded the server with file downloading requests, and we recorded the number of requests the server could handle. The results show that adding new security functionalities introduces acceptable overhead. For example, requiring client authentication reduces server capacity by approximately 22%, and adding proof of service decreases it by another 13%.

#### 6.3 File Downloading Time

We measured file downloading time using a similar setup. The startup latency is not related to file size but varies with the scenario. Requiring proof of service significantly increases startup latency. Data transferring time is proportional to file size, with negligible impact from adding client authentication or confidentiality. Adding integrity verification slightly decreases download speed, and proof of service has a more significant impact, increasing download time for a 32 MB file from 45 seconds to 63 seconds.