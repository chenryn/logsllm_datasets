---
## Page 204
200◆第三部分多机数据库的实现
修改，并导致主从服务器状态不再一致。
是一成不变的，每当主服务器执行客户端发送的写命令时，主服务器的数据库就有可能会被
15.1.2
举个例子，假设一个主服务器和一个从服务器刚刚完成同步操作，它们的数据库都保存
在同步操作执行完毕之后，主从服务器两者的数据库将达到一致状态，但这种一致并不
T12
T11
T10
时间
8
15
如
2
u
表15-1展示了一个主从服务器进行同步的例子。
图15-2展示了 SYNC 命令执行期间，主从服务器的通信过程。
命令传播
k1、k2、k3、k4和 k5
SET k5 v5
接下来执行的所有写命令
创建包含键k1、k2、k3 的 RDB 文件，并使用缓冲区记录
同步完成，现在主从服务器两者的数据库都包含了键
向从服务器发送缓冲区中保存的写命令 SETk4V4 和
BGSAVE命令执行完毕，向从服务器发送RDB文件
执行SETk5v5，并将这个命令记录到缓冲区里面
执行SETk4V4，并将这个命令记录到缓冲区里面
接收到从服务器发来的SYNC命令，执行BGSAVE命令，
执行 SET k3 v3
执行 SET k2 v2
执行 SET kl v1
服务器启动
图 15-2主从服务器在执行 SYNC 命令期间的通信过程
主服务器
表 15-1
主服务器
发送缓冲区保存
发送RDB文件
发送SYNC命令
主从服务器的同步过程
的所有写命令
从服务器
和k5
数据库都包含了键k1、k2、k3、k4
命令，得到 k4 和 k5 两个键 
件，获得k1、k2、k3三个键
同步完成，现在主从服务器两者的
接收并执行主服务器发来的两个SET
接收并载人主服务器发来的 RDB 文
向主服务器发送SYNC命令
服务器启动
从服务器
---
## Page 205
版复制功能虽然也能让主从服务器重新回到一致状态，但效率却非常低。
15.2
键k3了，如图15-5 所示。
致状态，现在主从服务器两者的数据库都不再包含
器执行完这个命令之后，主从服务器将再次回到一
将向从服务器发送相同的命令DELk3。当从服务
DELk3而导致主从服务器不一致，所以主服务器
服务器将再次回到一致状态。
行，当从服务器执行了相同的写命令之后，主从
服务器不一致的那条写命令，发送给从服务器执
服务器会将自己执行的写命令，也即是造成主从
个键却仍然包含在从服务器的数据库里面，如图15-4所示。
令之后，主从服务器的数据库将出现不一致：主服务器的数据库已经不再包含键k3，但这
了相同的五个键k1 至k5，如图15-3所示。
图15-3处于一致状态的主从服务器
如果这时，客户端向主服务器发送命令DELk3，那么主服务器在执行完这个DEL命
要理解这一情况，请看表15-2展示的断线后重复制例子。
对于初次复制来说，旧版复制功能能够很好地完成任务，但对于断线后重复制来说，旧
口断线后重复制：处于命令传播阶段的主从服务器因为网络原因而中断了复制，但从
口初次复制：从服务器以前没有复制过任何主服务器，或者从服务器当前要复制的主
在 Redis 中，从服务器对主服务器的复制可以分为以下两种情况：
在上面的例子中，主服务器因为执行了命令
为了让主从服务器再次回到一致状态，主服务器需要对从服务器执行命令传播操作：主
服务器通过自动重连接重新连上了主服务器，并继续复制主服务器。
服务器和上一次复制的主服务器不同。
旧版复制功能的缺陷
主服务器
数据库
2
从服务器
数据库
2
图15-4处于不一致状态的主从服务器
发送命令
DEL k3
图15-5主服务器向从服务器发送命令
主服务器
数据库
kl
数据库
主服务器
k1
发送命令
第 15 章 复
从服务器
数据库
k1 
数据库
从服务器
2
k1 
制·201
---
## Page 206
202
·第三部分多机数据库的实现
个断线重复制过程，就会发现传送 RDB 文件这一步实际上并不是非做不可的：
数据库更新至主服务器数据库当前所处的状态。
k10089 的 RDB文件发送给从服务器，从服务器通过接收和载人这个 RDB文件来将自己的
不再一致，所以从服务器将向主服务器发送SYNC命令，而主服务器会将包含键k1至键
T10097
T10096
T10095
T10094
T10093
T10092
T10091
T10090
T10089
T10088
T10087
T10086
T10085
虽然再次发送SYNC命令可以让主从服务器重新回到一致状态，但如果我们仔细研究这
**
L
口主从服务器在时间T0至时间T10086中一直处于一致状态，这两个服务器保存的数
在时间T10091，从服务器终于重新连接上主服务器，因为这时主从服务器的状态已经
时间
口
接中断期间，主服务器新添加的k10087、k10088、k10089三个键的数据。
从服务器想要将自己更新至主服务器当前所处的状态，真正需要的是主从服务器连
据大部分都是相同的。
任何写命令，所以跳过发送缓冲区包含的写命令这一步
用缓冲区记录接下来执行的所有写命令
令，创建包含键k1至键k10089的 RDB文件，并使
主从服务器再次完成同步
因为在BGSAVE命令执行期间，主服务器没有执行
BGSAVE命令执行完毕，向从服务器发送RDB文件
接收到从服务器发来的SYNC命令，执行BGSAVE
主从服务器重新连接
执行 SET k10089 v10089
执行 SET k10088 v10088
执行 SET k10087 v10087
主从服务器连接断开
执行并传播SETk10086v10086
执行并传播 SETk10085v10085
执行并传播 SET k2 v2
执行并传播 SETk1v1
主从服务器完成同步
表15-2
主服务器
从服务器在断线之后重新复制主服务器的例子
获得键k1至键k10089
v10086
执行主服务器传来的 SETk10086
v10085
主从服务器再次完成同步
接收并载人主服务器发来的 RDB 文件，
向主服务器发送 SYNC命令
主从服务器重新连接
断线中，尝试重新连接主服务器
断线中，尝试重新连接主服务器
断线中，尝试重新连接主服务器
主从服务器连接断开 
执行主服务器传来的 SETk10085
执行主服务器传来的 SETk2v2
执行主服务器传来的 SET k1v1.
主从服务器完成同步
从服务器
---
## Page 207
情况，表15-3展示了如何使用PSYNC命令高效地处理上一节展示的断线后复制情况。
两种模式：
使用PSYNC命令代替SYNC命令来执行复制时的同步操作。
15.3新版复制功能的实现
据，却要让主从服务器重新执行一次 SYNC命令，这种做法无疑是非常低效的。
比整个数据库的数据量要少得多，在这种情况下，为了让从服务器补足一小部分缺失的数
间越短，主服务器在断线期间执行的写命令就越少，而执行少量写命令所产生的数据量通常
令可能会有成百上千个之多，而不仅仅是两三个写命令。但总的来说，主从服务器断开的时
为了解决旧版复制功能在处理断线重复制情况时的低效问题，Redis 从 2.8版本开始，
时才执行SYNC命令。
期间，从服务器会因为阻塞而没办法处理命令请求。
从服务器大量的网络资源（带宽和流量），并对主服务器响应命令请求的时间产生影响。
器大量的 CPU、内存和磁盘 IVO 资源。
PSYNC命令的部分重同步模式解决了旧版复制功能在处理断线后重复制时出现的低效
口其中完整重同步用于处理初次复制情况：完整重同步的执行步骤和 SYNC 命令的执
口而部分重同步则用于处理断线后重复制情况：当从服务器在断线后重新连接主服务
2）主服务器需要将自己生成的 RDB文件发送给从服务器，这个发送操作会耗费主
因为 SYNC命令是一个如此耗费资源的操作，所以 Redis 有必要保证在真正有需要
3）接收到 RDB文件的从服务器需要载入主服务器发来的 RDB文件，并且在载入
上面给出的例子可能有一点理想化，因为在主从服务器断线期间，主服务器执行的写命
口可惜的是，旧版复制功能并没有利用以上列举的两点条件，而是继续让主服务器生
1）主服务器需要执行 BGSAVE 命令来生成 RDB 文件，这个生成操作会耗费主服务
器当前所处的状态。
每次执行SYNC命令，主从服务器需要执行以下动作：
行步骤基本一样，它们都是通过让主服务器创建并发送 RDB 文件，以及向从服务器
含的键k1 至键k10086 的数据对于从服务器来说都是不必要的。
成并向从服务器发送包含键k1 至键k10089 的 RDB 文件，但实际上 RDB 文件包
给从服务器，从服务器只要接收并执行这些写命令，就可以将数据库更新至主服务
器时，如果条件允许，主服务器可以将主从服务器连接断开期间执行的写命令发送
发送保存在缓冲区里面的写命令来进行同步。
 SYNC 命令是一个非常耗费资源的操作
第 15 章
复
制·203
---
## Page 208
204·第三部分多机教据库的实现
分重同步的实现细节了。
15.4
时的通信过程。
务器缺少的写命令发送给从服务器执行就可以了。
载人整个 RDB 文件，而部分重同步只需要将从服
速度也快得多。执行 SYNC 命令需要生成、传送和
执行SYNC命令所需的资源要少得多，完成同步的
回到一致状态，但执行部分重同步所需的资源比起
令和PSYNC命令都可以让断线的主从服务器重新
图15-6展示了主从服务器在执行部分重同步
T10097
T10096
T10094
T10093
T10092
160011
T10095
T10090
T10089
T10088
T10087
T10086
T10085
N
T1
TO
在了解了PSYNC命令的由来，以及部分重同步的工作方式之后，是时候来介绍一下部
对比一下 SYNC命令和PSYNC命令处理断线重复制的方法，不难看出，虽然 SYNC命
时间
部分重同步的实现
v10089三个命令
SET k10０８８ v10０８8、SEＴ k10089
行部分重同步
主从服务器再次完成同步
向从服务器发送SETk10087v10087、
向从服务器返回+CONTINUE回复，表示执
主从服务器重新连接
执行 SET k10089 v10089
执行 SET k10088 v10088
执行 SET k10087 v10087
主从服务器连接断开
执行并传播 SET k10086v10086
执行并传播SETk10085v10085
执行并传播 SETk2v2
执行并传播 SETk1v1
主从服务器完成同步
表 15-3
主服务器
 使用 PSYNC 命令来进行断线后重复制
图15-6主从服务器执行部分重同步的过程
主服务器
主从服务器再次完成同步
接收并执行主服务器传来的三个SET命令
接收+CONTINUE回复，准备执行部分重同步
向主服务器发送PSYNC命令
主从服务器重新连接
断线中，尝试重新连接主服务器
断线中，尝试重新连接主服务器
断线中，尝试重新连接主服务器
主从服务器连接断开
执行主服务器传来的SETk1.0086v10086
执行主服务器传来的SETk10085v10085
执行主服务器传来的 SET k2v2
执行主服务器传来的 SETk1v1
主从服务器完成同步
发送主从服务器断线期间
主服务器执行的写命令
+CONTINUE
PSYNC
从服务器
从服务器
---
## Page 209
务器 B 和从服务器C三个服务器的复制偏移量都将更新为 10119，而断线的从服务器 A 的
主服务器传播的数据将只有从服务器B和从服务器C能收到，在这之后，主服务器、从服
但是就在主服务器要向从服务器传播长度为33字节的数据之前，从服务器A断线了，那么
偏移量更新为10119，如图15-8所示。
在接收到主服务器传播的数据之后，也会将复制
将更新为10086+33=10119，而三个从服务器
为33字节的数据，那么主服务器的复制偏移量
偏移量的值都为10086。
15.4.1复制偏移量
如果这时主服务器向三个从服务器传播长度
考虑以下这个例子：假设如图15-7所示，主从服务器当前的复制偏移量都为10086,
口相反，如果主从服务器两者的偏移量并不相同，那么说明主从服务器并未处于一致
口如果主从服务器处于一致状态，那么主从服务器两者的偏移量总是相同的。
通过对比主从服务器的复制偏移量，程序可以很容易地知道主从服务器是否处于一致状态：
在图15-7所示的例子中，主从服务器的复制
口从服务器每次收到主服务器传播来的 N
口主服务器每次向从服务器传播N个字节的数据时，就将自己的复制偏移量的值加上 N。
执行复制的双方—主服务器和从服务器会分别维护一个复制偏移量：
以下三个小节将分别介绍这三个部分，
口服务器的运行 ID（run ID）。
口主服务器的复制积压缓冲区（replication backlog）。