word (TOTP) described in [15]; TOTP derives, from time
to time, an n-digit sequence from a secret key known to the
veriﬁed device and possibly to the veriﬁer. It is deﬁned as
T OT P = HOT P (K, T ) where T represents the number of
time steps between the initial counter time T0 and the cur-
rent Unix time. K is a key, and HT OP is the HMAC-based
One-Time Password Algorithm deﬁned (RFC 4226 [14]) as
HOT P (K, C) = T runc(HM AC − SHA − 1(K, C)). The
TOTV proposal binds the secret derivation key K to the
device’s cryptographic identity (CID), so that any attempt
to tamper with the device, by construction, should destroy
the CID and thus cease the TOTV sequence creation. In our
architecture, we maintain two TOTV keys (Kvote, Kdevel)
protected by DSKvote and DSKdevel keys.
In order to check the integrity of a speciﬁc DRE, a user
has to access a TOTV sequence produced by the electoral
authority. In other to avoid replay attacks, this access must
be either i) conﬁdential and prior to the DRE display of the
TOTV, or ii) real-time, on-demand, and signed.
In our proposal, we use the same construction as the
TOTV, but instead of having a single T representing the
number of time steps since Unix epoch, we use two T vari-
ables (Tvote, Tdevel). These represent the time steps accumu-
lated during every DRE usage when running in voting mode
and development mode, respectively. The time counters nec-
essary for this are made persistent and are protected by the
MSM from stalls or decrement. In order to avoid other types
of replay attacks, and after signed closeout records are pro-
duced by the DRE, it stalls the counter and includes it in the
certiﬁcate, pausing the timing increments. In the next DRE
usage (possibly on the next election), the electoral authority
sends the poll workers T OT V = HT OP (K, T ), with T =
max(Tcloseout, Tuser−access), which allows for DRE boot-up
and counter resumption. The modiﬁcation from the original
TOTV proposal is motivated by the cost of a high stability
secure real time clock. The usage of our proposals is further
illustrated in Section 5.
5. T-DRE IMPLEMENTATION & RESULTS
The practical realization of our proposals was done in two
phases, a prototyping and a mass production phase. In the
ﬁrst, the theoretical, technological, and procedural solutions
were tested and validated.
In the second, any necessary
modiﬁcations were implemented.
5.1 Hardware and Firmware Implementation
Prototype Due to the large number of DREs to be pro-
duced (165,000), our proposals were thoroughly tested in a
prototype prior to the delivery of ﬁnal speciﬁcations to the
chosen vendor for mass production. In the prototype (com-
posed by two connected boards: B1 and B2), we instantiated
all of the T-DRE main peripherals (Figure 1, namely: MSM,
BIOS memory, encrypted voter keyboard (in SHID), out-
put device (serial display), secure output (out SHID), main
CPU, among others. The B2 board is a commercial em-
bedded PC, with an AMD Geode LX800 CPU, with 256MB
RAM. The B1 is a custom board speciﬁcally built for the
prototype. It hosts the MSM and other devices, and con-
nects the security module to the bottom board by means of
an ISP connection (to BIOS delivery) and a USB connection
(for other, cryptographic, services).
Considerable eﬀort was spent on the correct choice of the
micro-controller (uC) employed for the MSM as it must con-
form to many requirements: a) have internal code and data
memory (both persistent and volatile); b) the entire memory
must be lockable (no read/write access); c) memories must
be large enough to handle cryptographic mechanisms (RSA,
ECDH, ECDSA, SHA-2, homomorphic DH) and store keys
and certiﬁcates; and d) reasonable performance, in order to
handle quick BIOS veriﬁcation and cryptographic services.
In our prototype, the MSM was implemented using a
NXP LCP2000 (ARM) family uC which meets these re-
quirements: a) up to 1MB internal FLASH memory with
code read protection, b) up to 40KB RAM, enough for the
implementation of asymmetric algorithms; c) 72MHz, 32-
bit core, with 64 DMIPS performance. The voter input
device (cryptographic, tamper-resistant physical keyboard)
was simulated using a MSP430 uC, connected to the main
uC by an SPI bus. The output secure HID is composed by
three light emitting diodes (LEDs) which are directly con-
nected to the MSM. In order to provide an onboard source
of entropy, we implemented two random number generators
using avalanche-eﬀect semiconductor noise.
For the asymmetric algorithms on the MSM and the cryp-
tographic keyboard we used the RELIC library [7]. For our
prototype, the implementation of the required MSM func-
tionalities, including DSK and ESK handling, binary code
veriﬁcation, CSR exportation, secure ﬁrmware update and
cryptographic keyboard handling required about 180Kbyte
FLASH (code) memory and 24Kbyte RAM. Employed func-
tions were:
signing and veriﬁcation, asymmetric encryp-
tion/decryption (RSA-2048 PKCS#1); hash (FIPS 180-3
SHA-512); block ciphers (FIPS 197 AES 256).
A prototype software stack was also implemented. The
bottom board BIOS was modiﬁed so that it uses the MSM
slave interface to check the bootloader’s authenticity. The
196bootloader was also modiﬁed (from GRUB) to test the boot
image, rather than ﬁles, using the MSM.
5.1.1 Attacks and Countermeasures
T-DRE, as PC-TPM, has no eﬀective runtime (after boot)
countermeasures against defective software nor buﬀer over-
ﬂow attacks (data execution). While the ﬁrst problem can
be traced (and later dealt with) due to the sole use of signed
code, the second demands more attention. In Brazil DREs
have no data links, so buﬀer overﬂow attacks from voters
or poll workers keypad is highly unlikely. For further pro-
tection, one may consider the “reboot prior to each vote”
approach.
Hardware systems are subject to many implementation
attacks, in special side-channel analysis (SCA) [12]. SCA use
information leaked through side-channels from real systems.
More information can be found in [12] and [22]. SCA-aware
cryptographic hardware usually resists, to a certain extent,
side-channel attacks. However, they typically suﬀer from
lack of transparency on the employed security mechanisms
(see Section 3). As we privilege transparency over oﬀ-the-
shelf solutions, our solution uses a standard uC and added
FIPS 140-2 level 3 equivalent physical protection and SCA
counter measures:
• The entire top board was immersed in tamper-resistant
and -evidencing resin;
• In order to weaken power attacks (SPA, DPA, CPA),
we adopted two countermeasures: a) we used decou-
pling elements in all external communication paths;
and b) we ﬁltered and stabilized the power input to
prevent energy consumption variation;
• Timing attacks are weakened by using constant-time
cryptographic operations.
5.1.2 Mass Production Versions
After validation, our architecture was realized in a mass
production version, and is set to be used on the 2010 Brazil-
ian national election, with more than 165,000 DREs. This
version diﬀers from our prototype in some implementation
decisions and functions: a) there is a single board contain-
ing all the components required in our architecture; b) the
CPU pool was implemented as a single x86 processor; c) the
MSM master interface was replaced by an assistive (super-
visor) interface; if the MSM perceives any BIOS change, it
resets the CPU pool (the main drawback being that BIOS
cannot be encrypted). A second mass production version
is expected to be manufactured in the fourth quarter of
2010, with more than 200,000 DREs. These will present
further side-channel countermeasures and incorporate im-
provements deemed necessary.
5.2 Usage Procedures
5.2.1 Pre-Election, Election, and Post-Election Pro-
cedures
Since valid (non-tampered) voting machines run only code
signed by the electoral authority, it is easy for a veriﬁer to
check whether the voting application is correct and that the
voting machines have not been tampered with:
• In the pre-election phase, a human veriﬁer must: a)
Check for any physical tamper evidences on the DRE;
if any are found, stop and report; b) switch on the
DRE and enter the “resume TOTV” provided by the
electoral authority (Section 4.3); if the DRE fails to
continue the boot process, stop (either it is not the
correct DRE or the device has been tampered with);
c) check for the next TOTV to be shown by the DRE;
if it is not the expected one, stop (the DRE has been
tampered with); d) perform other veriﬁcation proce-
dures (e.g. audit procedures).
• On election day, human veriﬁers can, at any time: a)
check for software stack integrity, by simply checking
a DRE’s status S-HID (indicative LED); if the S-HID
does not present a valid status, the use of that DRE
must be prevented (either it has been tampered with
or it is not running the correct voting software stack);
b) from time-to-time, electoral judges and voters can
check for device integrity by comparing the TOTV pro-
duced by the DRE with those from the electoral au-
thority; if any comparison fails, stop that DRE’s use
(it has been tampered with).
• In the post-election phase, a human veriﬁer must
check whether the ﬁnal TOTV present in the closeout
record is valid; if not, the device has been tampered
with and the produced closeout record is deemed in-
valid.
5.2.2 Other Procedures: Development, Testing, and
Maintenance
We chose a PKI model for key management, so that its
established practices and procedures can be used. The use
of the root CA’s and the VoteCA’ authorization keys is
only granted to the highest rank staﬀ of the EA (in Brazil,
Supreme Court judges preside the Supreme Electoral Court),
audited (cryptographically) by political parties, Congress
and society representatives.
6. CONCLUSION AND FUTURE WORK
In this paper we propose T-DRE, a trusted computing
base for direct recording electronic voting machines, which
is mostly independent of the voting application and largely
VVSG-compliant. T-DRE’s novel combination of technolo-
gies enable device veriﬁability by humans, deep PKI integra-
tion and simple auditing. Our architecture was prototyped
and then reengineered for large scale manufacturing, with
165,000 devices produced. These DREs will be used in the
Brazilian 2010 presidential election.
T-DRE’s main component, the Master Security Module
(MSM), uniﬁes the TPM and SM modules proposed in the
VVSG and adds key new features by: a) enforcing, over
the entire software stack, a policy of multi-level, certiﬁcate-
based access to peripherals and key material; and b) taking
control of human interface devices, thus amplifying vote pri-
vacy and user DRE tamper detection.
We also indicate how the new audit and control mecha-
nisms present in our architecture can be integrated into the
usual electoral cycle, the voting itself, election simulation,
device testing and servicing, and software development.
Currently, we are working on the design of a fully-auditable
secure processor to be used as a CPU-MSM for DREs.
7. REFERENCES
197[1] R. Anderson, M. Bond, J. Clulow, and
S. Skorobogatov. Cryptographic processors—a survey.
Proceedings of the IEEE, 94(2):357–369, 2006.
[2] Brazilian Superior Electoral Court (TSE). Election
statistics, April 2010.
[3] D. Chaum. Secret-ballot receipts: True voter-veriﬁable
elections. IEEE Security & Privacy, 2(1):38–47, 2004.
[4] B. Chen and R. Morris. Certifying program execution
with secure processors. In HOTOS’03: Proceedings of
the 9th conference on Hot Topics in Operating
Systems, pages 23–23, Berkeley, CA, USA, 2003.
USENIX Association.
Smaller, Stronger FPGA-based Voting Machine (Short
Paper). usenix.org, 2009.
[20] E. Rescorla. Understanding the security properties of
ballot-based veriﬁcation techniques. In Electronic
Voting Technology Workshop / Workshop on
Trustworthy Elections, August 2009.
[21] R. L. Rivest and J. P. Wack. On the notion of
“software independence” in voting systems. System,
2006.
[22] P. Rohatgi. Improved Techiniques for Side-Channel
Analysis, pages 381–406. Cryptographic Engineering.
Springer, 1 edition, 2009.
[5] M. Clarkson, S. Chong, and A. Myers. Civitas: A
[23] D. R. Sandler. VoteBox: A tamper-evident, veriﬁable
voting machine. PhD thesis, Rice University, April
2009.
[24] N. K. Sastry. Verifying security properties in electronic
voting machines. PhD thesis, University Of California,
Berkeley, 2007.
[25] K. Shimizu, H. P. Hofstee, and J. S. Liberty. Cell
broadband engine processor vault security
architecture. IBM J. Res. Dev., 51(5):521–528, 2007.
[26] G. E. Suh, C. W. O’Donnell, and S. Devadas. Aegis:
A single-chip secure processor. IEEE Design and Test
of Computers, 24(6):570–580, 2007.
[27] The Common Criteria Recognition Agreement.
Common criteria for information technology security
evaluation v3.1 revision 3, July 2009.
[28] USA Election Assistance Commission.
Recommendations to the EAC voluntary voting
system, guidelines recommendations, 2007.
secure voting system. 2007.
[6] V. Costan, L. F. Sarmenta, M. van Dijk, and
S. Devadas. The Trusted Execution Module:
Commodity General-Purpose Trusted Computing. In
CARDIS ’08: Proceedings of the 8th IFIP WG
8.8/11.2 International Conference on Smart Card
Research and Advanced Applications, pages 133–148,
Berlin, Heidelberg, 2008. Springer-Verlag.
[7] C. G. Diego Aranha. Relic is an eﬃcient library for
cryptography. http://code.google.com/p/relic-toolkit/,
April 2010.
[8] R. Gallo, H. Kawakami, and R. Dahab. On device
identity establishment and veriﬁcation. In Proc of
EuroPKI’09 Sixth European Workshop on Public Key
Services, Applications and Infrastructures, September
2009.
[9] R. Gennaro, A. Lysyanskaya, T. Malkin, S. Micali,
and T. Rabin. Algorithmic Tamper-Proof (ATP)
Security: Theoretical Foundations for Security against
Hardware Tampering, 2004.
[10] A. Huang. Keeping Secrets in Hardware: The
Microsoft XBox TM Case Study. Cryptographic
Hardware and Embedded Systems-CHES 2002, pages
355–430, 2002.
[11] International Organization for Standardization (ISO).
ISO/IEC 11889:2009 Information technology –
Trusted Platform Module. ISO/IEC, 2009.
[12] M. Joye. Basics of Side-Channel Analysis, pages
365–380. Cryptographic Engineering. Springer, 1
edition, 2009.
[13] Maxim Integrated Products Inc. Usip-pro component
datasheet, April 2010.
[14] D. M’Raihi, M. Bellare, F. Hoornaert, D. Naccache,
and O. Ranen. RFC 4226: HOTP: An HMAC-based
one-time password algorithm, December 2005.
[15] D. M’Raihi, S. Machani, M. Pei, and J. Rydell. RFC
draft: TOTP: Time-based one-time password
algorithm, January 2009.
[16] C. Neﬀ. A veriﬁable secret shuﬄe and its application
to e-voting. In Proceedings of the 8th ACM conference
on Computer and Communications Security, page 125.
ACM, 2001.
[17] C. A. Neﬀ. Practical high certainty intent veriﬁcation
for encrypted votes, October 2004.
[18] NIST. Security requirements for cryptographic
modules, Federal Information Processing Standards
Publication (FIPS PUB) 140-2, 2002.
[19] E. Oksuzoglu and D. Wallach. VoteBox Nano: A
198