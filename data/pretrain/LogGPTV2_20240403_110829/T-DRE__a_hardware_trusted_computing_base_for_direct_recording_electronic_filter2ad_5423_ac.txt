### Time-Based One-Time Password (TOTP) and TOTV

The Time-Based One-Time Password (TOTP) algorithm, as described in [15], generates an n-digit sequence from a secret key known to the verified device and potentially to the verifier. The TOTP is defined as:
\[ \text{TOTP} = \text{HOTP}(K, T) \]
where \( T \) represents the number of time steps between the initial counter time \( T_0 \) and the current Unix time. \( K \) is the secret key, and HOTP is the HMAC-based One-Time Password Algorithm (RFC 4226 [14]) defined as:
\[ \text{HOTP}(K, C) = \text{Trunc}(\text{HMAC-SHA-1}(K, C)) \]

The TOTV proposal binds the secret derivation key \( K \) to the device's cryptographic identity (CID). This ensures that any attempt to tamper with the device will destroy the CID and thus cease the TOTV sequence creation. In our architecture, we maintain two TOTV keys, \( K_{\text{vote}} \) and \( K_{\text{devel}} \), protected by \( DSK_{\text{vote}} \) and \( DSK_{\text{devel}} \) respectively.

### Integrity Check for Direct Recording Electronic (DRE) Voting Machines

To verify the integrity of a specific DRE, a user must access a TOTV sequence produced by the electoral authority. To prevent replay attacks, this access must be either:
1. Confidential and prior to the DRE displaying the TOTV.
2. Real-time, on-demand, and signed.

In our proposal, we use the same construction as TOTV but with two \( T \) variables, \( T_{\text{vote}} \) and \( T_{\text{devel}} \). These represent the time steps accumulated during every DRE usage in voting mode and development mode, respectively. The time counters are made persistent and protected by the Master Security Module (MSM) from stalls or decrement. After the DRE produces signed closeout records, it stalls the counter and includes it in the certificate, pausing the timing increments. For the next DRE usage, the electoral authority sends the poll workers:
\[ \text{TOTV} = \text{HOTP}(K, T) \]
with \( T = \max(T_{\text{closeout}}, T_{\text{user-access}}) \), allowing for DRE boot-up and counter resumption. This modification is motivated by the cost of a high-stability secure real-time clock.

### T-DRE Implementation and Results

The practical realization of our proposals was conducted in two phases: prototyping and mass production. During the prototyping phase, the theoretical, technological, and procedural solutions were tested and validated. In the mass production phase, necessary modifications were implemented.

#### Hardware and Firmware Implementation

Given the large number of DREs to be produced (165,000), our proposals were thoroughly tested in a prototype before final specifications were delivered to the chosen vendor. The prototype consisted of two connected boards, B1 and B2, which instantiated all the T-DRE main peripherals, including the MSM, BIOS memory, encrypted voter keyboard (in SHID), output device (serial display), secure output (out SHID), and main CPU. B2 is a commercial embedded PC with an AMD Geode LX800 CPU and 256MB RAM, while B1 is a custom board specifically built for the prototype, hosting the MSM and other devices.

Significant effort was spent on selecting the appropriate microcontroller (uC) for the MSM, which must meet several requirements:
- Internal code and data memory (both persistent and volatile).
- Entire memory must be lockable (no read/write access).
- Sufficient memory to handle cryptographic mechanisms (RSA, ECDH, ECDSA, SHA-2, homomorphic DH) and store keys and certificates.
- Reasonable performance for quick BIOS verification and cryptographic services.

In the prototype, the MSM was implemented using a NXP LCP2000 (ARM) family uC, which meets these requirements:
- Up to 1MB internal FLASH memory with code read protection.
- Up to 40KB RAM, sufficient for implementing asymmetric algorithms.
- 72MHz, 32-bit core with 64 DMIPS performance.

The voter input device (a cryptographic, tamper-resistant physical keyboard) was simulated using a MSP430 uC, connected to the main uC via an SPI bus. The output secure HID consists of three light-emitting diodes (LEDs) directly connected to the MSM. An onboard source of entropy was provided by two random number generators using avalanche-effect semiconductor noise.

For the asymmetric algorithms on the MSM and the cryptographic keyboard, we used the RELIC library [7]. The implementation required approximately 180Kbyte FLASH (code) memory and 24Kbyte RAM. Functions included:
- Signing and verification.
- Asymmetric encryption/decryption (RSA-2048 PKCS#1).
- Hash (FIPS 180-3 SHA-512).
- Block ciphers (FIPS 197 AES 256).

A prototype software stack was also implemented. The bottom board BIOS was modified to use the MSM slave interface to check the bootloader’s authenticity. The bootloader (modified from GRUB) tests the boot image rather than files using the MSM.

#### Attacks and Countermeasures

T-DRE, like PC-TPM, has no effective runtime (after boot) countermeasures against defective software or buffer overflow attacks. While the first problem can be traced and addressed due to the use of signed code, the second demands more attention. In Brazil, DREs have no data links, making buffer overflow attacks from voters or poll workers' keypads highly unlikely. For further protection, a "reboot prior to each vote" approach can be considered.

Hardware systems are vulnerable to various implementation attacks, particularly side-channel analysis (SCA) [12]. SCA uses information leaked through side-channels from real systems. SCA-aware cryptographic hardware typically resists side-channel attacks to a certain extent but often lacks transparency in security mechanisms. Our solution uses a standard uC with added FIPS 140-2 level 3 equivalent physical protection and SCA countermeasures:
- The entire top board was immersed in tamper-resistant and -evidencing resin.
- To weaken power attacks (SPA, DPA, CPA), we adopted two countermeasures: a) decoupling elements in all external communication paths; and b) filtering and stabilizing the power input to prevent energy consumption variation.
- Timing attacks are weakened by using constant-time cryptographic operations.

#### Mass Production Versions

After validation, our architecture was realized in a mass production version, set to be used in the 2010 Brazilian national election with over 165,000 DREs. This version differs from the prototype in some implementation decisions:
- A single board containing all components.
- A single x86 processor for the CPU pool.
- The MSM master interface was replaced by an assistive (supervisor) interface. If the MSM detects any BIOS change, it resets the CPU pool (the main drawback being that the BIOS cannot be encrypted).

A second mass production version, expected to be manufactured in the fourth quarter of 2010 with over 200,000 DREs, will include further side-channel countermeasures and incorporate necessary improvements.

### Usage Procedures

#### Pre-Election, Election, and Post-Election Procedures

Valid (non-tampered) voting machines run only code signed by the electoral authority, making it easy for a verifier to check the voting application and machine integrity:
- **Pre-election phase:**
  - Check for physical tamper evidence on the DRE. If found, stop and report.
  - Switch on the DRE and enter the "resume TOTV" provided by the electoral authority. If the DRE fails to continue the boot process, stop (either it is not the correct DRE or the device has been tampered with).
  - Check the next TOTV to be shown by the DRE. If it is not the expected one, stop (the DRE has been tampered with).
  - Perform other verification procedures (e.g., audit procedures).
- **Election day:**
  - Human verifiers can check software stack integrity by verifying the DRE's status S-HID (indicative LED). If the S-HID does not present a valid status, prevent the use of that DRE (it has been tampered with or is not running the correct voting software stack).
  - Electoral judges and voters can periodically check device integrity by comparing the TOTV produced by the DRE with those from the electoral authority. If any comparison fails, stop the DRE's use (it has been tampered with).
- **Post-election phase:**
  - Check whether the final TOTV in the closeout record is valid. If not, the device has been tampered with, and the closeout record is deemed invalid.

#### Other Procedures: Development, Testing, and Maintenance

We chose a Public Key Infrastructure (PKI) model for key management to leverage established practices and procedures. The use of root CA and VoteCA authorization keys is granted only to the highest-ranking staff of the Electoral Authority (EA), audited cryptographically by political parties, Congress, and society representatives.

### Conclusion and Future Work

In this paper, we propose T-DRE, a trusted computing base for direct recording electronic voting machines, which is mostly independent of the voting application and largely VVSG-compliant. T-DRE's novel combination of technologies enables device verifiability by humans, deep PKI integration, and simple auditing. Our architecture was prototyped and then reengineered for large-scale manufacturing, with 165,000 devices produced. These DREs will be used in the 2010 Brazilian presidential election.

T-DRE's main component, the Master Security Module (MSM), unifies the TPM and SM modules proposed in the VVSG and adds key new features by enforcing a policy of multi-level, certificate-based access to peripherals and key material, and taking control of human interface devices, enhancing vote privacy and user DRE tamper detection.

We also indicate how the new audit and control mechanisms in our architecture can be integrated into the usual electoral cycle, including voting, election simulation, device testing and servicing, and software development. Currently, we are working on the design of a fully-auditable secure processor to be used as a CPU-MSM for DREs.

### References

[1] R. Anderson, M. Bond, J. Clulow, and S. Skorobogatov. Cryptographic processors—a survey. Proceedings of the IEEE, 94(2):357–369, 2006.
[2] Brazilian Superior Electoral Court (TSE). Election statistics, April 2010.
[3] D. Chaum. Secret-ballot receipts: True voter-verifiable elections. IEEE Security & Privacy, 2(1):38–47, 2004.
[4] B. Chen and R. Morris. Certifying program execution with secure processors. In HOTOS’03: Proceedings of the 9th conference on Hot Topics in Operating Systems, pages 23–23, Berkeley, CA, USA, 2003. USENIX Association.
[5] M. Clarkson, S. Chong, and A. Myers. Civitas: A secure voting system. 2007.
[6] V. Costan, L. F. Sarmenta, M. van Dijk, and S. Devadas. The Trusted Execution Module: Commodity General-Purpose Trusted Computing. In CARDIS ’08: Proceedings of the 8th IFIP WG 8.8/11.2 International Conference on Smart Card Research and Advanced Applications, pages 133–148, Berlin, Heidelberg, 2008. Springer-Verlag.
[7] C. G. Diego Aranha. Relic is an efficient library for cryptography. http://code.google.com/p/relic-toolkit/, April 2010.
[8] R. Gallo, H. Kawakami, and R. Dahab. On device identity establishment and verification. In Proc of EuroPKI’09 Sixth European Workshop on Public Key Services, Applications and Infrastructures, September 2009.
[9] R. Gennaro, A. Lysyanskaya, T. Malkin, S. Micali, and T. Rabin. Algorithmic Tamper-Proof (ATP) Security: Theoretical Foundations for Security against Hardware Tampering, 2004.
[10] A. Huang. Keeping Secrets in Hardware: The Microsoft XBox TM Case Study. Cryptographic Hardware and Embedded Systems-CHES 2002, pages 355–430, 2002.
[11] International Organization for Standardization (ISO). ISO/IEC 11889:2009 Information technology – Trusted Platform Module. ISO/IEC, 2009.
[12] M. Joye. Basics of Side-Channel Analysis, pages 365–380. Cryptographic Engineering. Springer, 1 edition, 2009.
[13] Maxim Integrated Products Inc. Usip-pro component datasheet, April 2010.
[14] D. M’Raihi, M. Bellare, F. Hoornaert, D. Naccache, and O. Ranen. RFC 4226: HOTP: An HMAC-based one-time password algorithm, December 2005.
[15] D. M’Raihi, S. Machani, M. Pei, and J. Rydell. RFC draft: TOTP: Time-based one-time password algorithm, January 2009.
[16] C. Neff. A verifiable secret shuffle and its application to e-voting. In Proceedings of the 8th ACM conference on Computer and Communications Security, page 125. ACM, 2001.
[17] C. A. Neff. Practical high certainty intent verification for encrypted votes, October 2004.
[18] NIST. Security requirements for cryptographic modules, Federal Information Processing Standards Publication (FIPS PUB) 140-2, 2002.
[19] E. Oksuzoglu and D. Wallach. VoteBox Nano: A Smaller, Stronger FPGA-based Voting Machine (Short Paper). usenix.org, 2009.
[20] E. Rescorla. Understanding the security properties of ballot-based verification techniques. In Electronic Voting Technology Workshop / Workshop on Trustworthy Elections, August 2009.
[21] R. L. Rivest and J. P. Wack. On the notion of “software independence” in voting systems. System, 2006.
[22] P. Rohatgi. Improved Techniques for Side-Channel Analysis, pages 381–406. Cryptographic Engineering. Springer, 1 edition, 2009.
[23] D. R. Sandler. VoteBox: A tamper-evident, verifiable voting machine. PhD thesis, Rice University, April 2009.
[24] N. K. Sastry. Verifying security properties in electronic voting machines. PhD thesis, University Of California, Berkeley, 2007.
[25] K. Shimizu, H. P. Hofstee, and J. S. Liberty. Cell broadband engine processor vault security architecture. IBM J. Res. Dev., 51(5):521–528, 2007.
[26] G. E. Suh, C. W. O’Donnell, and S. Devadas. Aegis: A single-chip secure processor. IEEE Design and Test of Computers, 24(6):570–580, 2007.
[27] The Common Criteria Recognition Agreement. Common criteria for information technology security evaluation v3.1 revision 3, July 2009.
[28] USA Election Assistance Commission. Recommendations to the EAC voluntary voting system, guidelines recommendations, 2007.