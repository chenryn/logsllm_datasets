# The Matter of Heartbleed

## Authors
- Zakir Durumeric, University of Michigan
- James Kasten, University of Michigan
- David Adrian, University of Michigan
- J. Alex Halderman, University of Michigan
- Michael Bailey, University of Michigan and University of Illinois, Urbana Champaign
- Frank Li, EECS, University of California, Berkeley
- Nicholas Weaver, International Computer Science Institute
- Johanna Amann, International Computer Science Institute
- Jethro Beekman, EECS, University of California, Berkeley
- Mathias Payer, Purdue University
- Vern Paxson, International Computer Science Institute

## Abstract
In April 2014, the Heartbleed vulnerability shocked the Internet. This critical flaw in OpenSSL allowed attackers to remotely read protected memory from an estimated 24–55% of popular HTTPS sites. In this study, we provide a comprehensive, measurement-based analysis of the impact of the Heartbleed vulnerability, including:
1. Tracking the vulnerable population.
2. Monitoring patching behavior over time.
3. Assessing the impact on the HTTPS certificate ecosystem.
4. Exposing real attacks that attempted to exploit the bug.

We also conducted a large-scale notification experiment involving 150,000 hosts, which resulted in a nearly 50% increase in patching by notified hosts. Based on these analyses, we discuss both the successes and failures in the community's response, with the aim of improving future responses to such events.

## 1. Introduction
In March 2014, researchers discovered a catastrophic vulnerability in OpenSSL, a widely used cryptographic library for securing connections in popular server products like Apache and Nginx. While OpenSSL has had several security issues in its 16-year history, the Heartbleed vulnerability was one of the most impactful. It allowed attackers to read sensitive memory from vulnerable servers, potentially exposing cryptographic keys, login credentials, and other private data. The simplicity of the bug and its ease of exploitation further exacerbated its severity.

In this work, we analyze the impact of the Heartbleed vulnerability and track the responses of server operators. Using extensive active scanning, we assess the scope of the vulnerability across popular HTTPS websites and the full IPv4 address space. We estimate that 24–55% of HTTPS servers in the Alexa Top 1 Million were initially vulnerable, including 44 of the Alexa Top 100. Two days after disclosure, 11% of HTTPS sites in the Alexa Top 1 Million and 6% of all HTTPS servers in the public IPv4 address space remained vulnerable. Our scans also identified over 70 models of vulnerable embedded devices and software packages. Additionally, both SMTP+TLS and Tor were heavily affected, with more than half of all Tor nodes being vulnerable in the days following disclosure.

Our investigation into the operator community's response found that within the first 24 hours, all but five of the Alexa Top 100 sites were patched, and within 48 hours, all vulnerable hosts in the top 500 were patched. However, patching plateaued after about two weeks, with 3% of HTTPS sites in the Alexa Top 1 Million remaining vulnerable almost two months after disclosure.

In addition to patching, many sites replaced their TLS certificates due to the possibility of private key leaks. We analyzed certificate replacement and found that while many popular websites reacted quickly, less than a quarter of Alexa Top 1 Million sites replaced certificates in the week following disclosure. Even more concerning, only 10% of the sites that were vulnerable 48 hours after disclosure replaced their certificates within the next month, and 14% of those that did neglected to change the private key, gaining no protection from certificate replacement.

We also investigated widespread attempts to exploit Heartbleed, as seen in extensive bulk traffic traces recorded at four sites. We found no evidence of exploitation prior to the vulnerability's public disclosure, but detected subsequent exploit attempts from almost 700 sources, beginning less than 24 hours after disclosure. Despite the large number of sources and scans, only a few appeared to reflect exhaustive Internet-wide scans.

Finally, starting three weeks after disclosure, we undertook a large-scale notification effort, contacting the operators responsible for the remaining vulnerable servers. By contacting the operators in two waves, we could conduct a controlled experiment and measure the impact of notification on patching. We observed a surprisingly high 47% increase in patching by notified operators.

Based on these observations, we discuss both the successes and failures in the aftermath of Heartbleed. By better understanding the lessons from this security disaster, the technical community can respond more effectively to such events in the future.

## 2. Background
### 2.1 OpenSSL: A Brief History
OpenSSL is a popular open-source cryptographic library that implements the SSL and TLS protocols. It is widely used by server software to facilitate secure connections for web, email, VPN, and messaging services. The project started in 1998 and began tracking vulnerabilities in April 2001.

Over the last 13 years, OpenSSL has documented six code execution vulnerabilities that allowed attackers to compromise private server data (e.g., private cryptographic keys and messages in memory) and execute arbitrary code. The project has faced eight information leak vulnerabilities, four of which allowed attackers to retrieve plaintext, and two of which exposed private keys. Two of the vulnerabilities arose due to protocol weaknesses; the remainder came from implementation errors.

The Heartbleed bug reflects one of the most impactful vulnerabilities during OpenSSL’s history for several reasons: (1) it allowed attackers to retrieve private cryptographic keys and private user data, (2) it was easy to exploit, and (3) HTTPS and other TLS services have become increasingly popular, resulting in more affected services.

### 2.2 TLS Heartbeat Extension
The Heartbeat Extension allows either end-point of a TLS connection to detect whether its peer is still present, and was motivated by the need for session management in Datagram TLS (DTLS). Standard implementations of TLS do not require the extension as they can rely on TCP for equivalent session management.

Peers indicate support for the extension during the initial TLS handshake. Following negotiation, either end-point can send a HeartbeatRequest message to verify connectivity. The extension was introduced in February 2012 in RFC 6520, added to OpenSSL on December 31, 2011, and released in OpenSSL Version 1.0.1 on March 14, 2012.

HeartbeatRequest messages consist of a one-byte type field, a two-byte payload length field, a payload, and at least 16 bytes of random padding. Upon receipt of the request, the receiving endpoint responds with a similar HeartbeatResponse message, in which it echoes back the HeartbeatRequest payload and its own random padding.

### 2.3 Heartbleed Vulnerability
The OpenSSL implementation of the Heartbeat Extension contained a vulnerability that allowed either end-point to read data following the payload message in its peer’s memory by specifying a payload length larger than the amount of data in the HeartbeatRequest message. Because the payload length field is two bytes, the peer responds with up to 216 bytes (~64 KB) of memory. The bug itself is simple: the peer trusts the attacker-specified length of an attacker-controlled message.

The OpenSSL patch adds a bounds check that discards the HeartbeatRequest message if the payload length field exceeds the length of the payload. While the bug is easy to conceptualize and the fix is straightforward, the potential impact is severe: it allows an attacker to read private memory, potentially including information transferred over the secure channel and cryptographic secrets.

### 2.4 Heartbleed Timeline
The Heartbleed vulnerability was originally found by Neel Mehta, a Google computer security employee, in March 2014. Upon finding the bug and patching its servers, Google notified the core OpenSSL team on April 1. Independently, a security consulting firm, Codenomicon, found the vulnerability on April 2 and reported it to the National Cyber Security Centre Finland (NCSC-FI). After receiving notification that two groups independently discovered the vulnerability, the OpenSSL core team decided to release a patched version.

The public disclosure of Heartbleed started on April 7, 2014, at 17:49 UTC with the version 1.0.1g release announcement, followed by the public security advisory released at 20:37 UTC. Both announcements were sent to the OpenSSL mailing list. Several parties knew of the vulnerability in advance, including CloudFlare, Akamai, and Facebook. Red Hat, SuSE, Debian, FreeBSD, and ALT Linux were notified less than 24 hours before the public disclosure. Others, such as Ubuntu, Gentoo, Chromium, Cisco, and Juniper, were not aware of the bug prior to its public release. A timeline of events is presented in Table 1.

## 3. The Impact of Heartbleed
Heartbleed had the potential to affect any service that used OpenSSL to facilitate TLS connections, including popular web, mail, messaging, and database servers. To track its damage, we performed regular vulnerability scans against the Alexa Top 1 Million domains and against 1% samples of the public, non-reserved IPv4 address space. We generated these samples using random selection with removal, per ZMap’s existing randomization function. We excluded hosts and networks that previously requested removal from our daily HTTPS scans. In this section, we analyze the impact on these services, particularly HTTPS. All data used for this analysis is publicly available at https://scans.io/study/umich-heartbleed.

### 3.1 Scanning Methodology
We tested for the Heartbleed bug by modifying ZMap to send Heartbeat requests with no payload or padding, and the length field set to zero. Per the RFC, these requests should be rejected. However, vulnerable versions of OpenSSL send a response containing only padding, rather than simply dropping the request. The patched version of OpenSSL, as well as other popular libraries, correctly discard the request (or do not support the Heartbeat Extension).

This approach does not exploit the vulnerability or access any private memory—only random padding is sent back by the server. While it was later found that Heartbleed scanning caused HP Integrated Lights-Out (iLO) devices to crash, we received no reports of our scans disrupting these devices, likely because our approach did not exploit the vulnerability. Our scanner is publicly available at https://zmap.io.

### 3.2 False Negatives
Our Heartbleed scanner contained a bug that caused vulnerable sites to sometimes appear safe due to a timeout when probing individual hosts. The root cause was that the scanner labeled each host’s vulnerability as false by default, rather than null or unknown. If a Heartbleed test timed out, the scanner returned the host’s vulnerability status as the default false, providing no indication of a failed test. The result is a potential false negative, where the scan reports the system as immune. Note that our scanner does not err when reporting a system as vulnerable.

To assess whether some addresses were more prone to manifest false negatives than others, we compared three complete IPv4 scans and examined systems reported as vulnerable in one scan but immune in previous scans. Since the scanner does not err in reporting a host as vulnerable, any prior report of immunity reflects a false negative (assuming no one unpatches systems). We found the IP addresses associated with such false negatives spread evenly across the address space, without any apparent correlations. This observation leads us to believe the false negatives manifest in an address-independent manner.

Although our initial scanner did not fetch the web page itself, a subsequent change in the comprehensive scan (but not the incremental scans) attempted to fetch the server’s home page. As the home page fetch occurred after the Heartbleed check, any reported home page data implicitly indicates that the Heartbleed test successfully completed without a timeout.

To investigate the false negative rate, we used two full scans of the IPv4 address space, one with and one without home page fetching. The full scan conducted on April 24 did not grab server home pages, while the May 1 scan did, hence we know the validity of scan results from the May 1 scan. To soundly conduct this comparison, we removed servers that may have switched IP addresses between the two scans. We only considered servers that presented identical TLS certificates between the two scans. While this restriction potentially introduces a bias because some sites will have both patched and changed their TLS certificates, the address-independent nature of the false negatives should cause this effect to even out.

Our scanner failed to grab the server home page for 24% of the hosts in the May scan. Of these 24% of hosts, we observe 44% appear immune. False negatives could only have occurred when testing these hosts. The remaining 56% of hosts appeared vulnerable (and hence are correctly labeled). From this, we conclude that at most (0.24 · 0.44) = 0.105, or 10.5%, of hosts were incorrectly labeled in the May 1 scan.

For the April scan, the only observable signal of a false negative is if a host was reported immune and then reported vulnerable in the May scan. We find 6.5% of hosts exhibit this behavior. Assuming that people do not unpatch their systems, this provides an estimated lower bound of 6.5% for the April scan false negative rate. This estimate represents a lower bound because we cannot determine the vulnerability in April of a host that appears immune in both scans. In that case, a false negative is a host vulnerable in April but reported as immune and patched by May. However, we do observe that of hosts reported as vulnerable in the April scan and successfully tested in May (so the server page was retrieved), only 0.36% appeared immune in May, indicating a very modest overall patching rate between the two scans. Given that our false negatives are address-independent, we expect a similarly low patch rate for all vulnerable April hosts. Thus, while a 6.5% false negative rate is a lower bound for the April scan, the true rate should not be significantly higher.

Given the similarity of these two false negative estimates using two different scans, we conclude that the scanner exhibited a false negative rate between 6.5% and 10.5%, but that these manifest independently of the particular server scanned. Due to this address-independent behavior, we can assume a similar false negative rate for sampled scans. We attempt to account for this error whenever possible. In particular, the bias implies that any population-based survey based on a single scan underestimates the vulnerable population. Finally, for our assessment of the impact of notifications (Section 7), we only consider a given server as non-vulnerable when it consistently reports as immune in repeated scans, which would require multiple (presumably independent) false negatives to occur before introducing a bias.

### 3.3 Impact on Popular Websites
Determining which websites were initially vulnerable poses significant difficulties. Little attention was paid to the Heartbeat Extension prior to the vulnerability announcement, and many popular sites patched the vulnerability within hours of the disclosure. Codenomicon, one of the groups that discovered Heartbleed, speculated that 66% of HTTPS sites were vulnerable. However, this number represented the Apache and Nginx market share and may well reflect an overestimate, because some operators may have disabled the extension, deployed dedicated SSL endpoints, or used older, non-vulnerable versions of OpenSSL.

| Mail Servers | Web Servers |
|--------------|-------------|
| Sendmail [62] | Apache (mod_ssl) [45] Yes |
| Postfix [62] | Microsoft IIS [46] Yes |
| Qmail [62] | Nginx [14] Yes |
| Exim [35] | Lighttpd [62] Yes |
| Courier [37] | |

This table summarizes the impact on various mail and web servers. For a detailed breakdown, refer to the references provided.