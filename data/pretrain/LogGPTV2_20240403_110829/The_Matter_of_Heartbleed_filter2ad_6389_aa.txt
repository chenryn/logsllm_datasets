title:The Matter of Heartbleed
author:Zakir Durumeric and
James Kasten and
David Adrian and
J. Alex Halderman and
Michael Bailey and
Frank Li and
Nicholas Weaver and
Johanna Amann and
Jethro Beekman and
Mathias Payer and
Vern Paxson
The Matter of Heartbleed
*Zakir Durumeric1, James Kasten1,
David Adrian1, J. Alex Halderman1,
Michael Bailey1,2
1 University of Michigan
2 University of Illinois, Urbana Champaign
{zakir, jdkasten, davadria, jhalderm}@umich.edu,
PI:EMAIL
ABSTRACT
The Heartbleed vulnerability took the Internet by surprise in April
2014. The vulnerability, one of the most consequential since the ad-
vent of the commercial Internet, allowed attackers to remotely read
protected memory from an estimated 24–55% of popular HTTPS
sites. In this work, we perform a comprehensive, measurement-
based analysis of the vulnerability’s impact, including (1) tracking
the vulnerable population, (2) monitoring patching behavior over
time, (3) assessing the impact on the HTTPS certiﬁcate ecosys-
tem, and (4) exposing real attacks that attempted to exploit the bug.
Furthermore, we conduct a large-scale vulnerability notiﬁcation ex-
periment involving 150,000 hosts and observe a nearly 50% increase
in patching by notiﬁed hosts. Drawing upon these analyses, we dis-
cuss what went well and what went poorly, in an effort to understand
how the technical community can respond more effectively to such
events in the future.
1.
INTRODUCTION
In March 2014, researchers found a catastrophic vulnerability
in OpenSSL, the cryptographic library used to secure connections
in popular server products including Apache and Nginx. While
OpenSSL has had several notable security issues during its 16 year
history, this ﬂaw—the Heartbleed vulnerability—was one of the
most impactful. Heartbleed allows attackers to read sensitive mem-
ory from vulnerable servers, potentially including cryptographic
keys, login credentials, and other private data. Exacerbating its
severity, the bug is simple to understand and exploit.
In this work, we analyze the impact of the vulnerability and track
the server operator community’s responses. Using extensive ac-
tive scanning, we assess who was vulnerable, characterizing Heart-
bleed’s scope across popular HTTPS websites and the full IPv4
address space. We also survey the range of protocols and server
products affected. We estimate that 24–55% of HTTPS servers in
the Alexa Top 1 Million were initially vulnerable, including 44 of
*These authors contributed equally to this work.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
IMC’14, November 5–7, 2014, Vancouver, BC, Canada.
ACM 978-1-4503-3213-2/14/11.
http://dx.doi.org/10.1145/2663716.2663755 .
*Frank Li3, Nicholas Weaver3,4,
Johanna Amann4, Jethro Beekman3,
Mathias Payer3,5, Vern Paxson3,4
3 EECS, University of California, Berkeley
4 International Computer Science Institute
5 Purdue University
{frankli, nweaver, jbeekman, vern}@cs.berkeley.edu,
PI:EMAIL, PI:EMAIL
the Alexa Top 100. Two days after disclosure, we observed that 11%
of HTTPS sites in the Alexa Top 1 Million remained vulnerable, as
did 6% of all HTTPS servers in the public IPv4 address space. We
ﬁnd that vulnerable hosts were not randomly distributed, with more
than 50% located in only 10 ASes that do not reﬂect the ASes with
the most HTTPS hosts. In our scans of the IPv4 address space, we
identify over 70 models of vulnerable embedded devices and soft-
ware packages. We also observe that both SMTP+TLS and Tor were
heavily affected; more than half of all Tor nodes were vulnerable in
the days following disclosure.
Our investigation of the operator community’s response ﬁnds
that within the ﬁrst 24 hours, all but 5 of the Alexa Top 100 sites
were patched, and within 48 hours, all of the vulnerable hosts in the
top 500 were patched. While popular sites responded quickly, we
observe that patching plateaued after about two weeks, and 3% of
HTTPS sites in the Alexa Top 1 Million remained vulnerable almost
two months after disclosure.
In addition to patching, many sites replaced their TLS certiﬁcates
due to the possibility that the private keys could have been leaked.
We analyze certiﬁcate replacement and ﬁnd that while many of
the most popular websites reacted quickly, less than a quarter of
Alexa Top 1 Million sites replaced certiﬁcates in the week following
disclosure. Even more worryingly, only 10% of the sites that were
vulnerable 48 hours after disclosure replaced their certiﬁcates within
the next month, and of those that did, 14% neglected to change the
private key, gaining no protection from certiﬁcate replacement.
We also investigate widespread attempts to exploit Heartbleed, as
seen in extensive bulk trafﬁc traces recorded at four sites. We ﬁnd no
evidence of exploitation prior to the vulnerability’s public disclosure,
but we detect subsequent exploit attempts from almost 700 sources,
beginning less than 24 hours after disclosure. Comparing attack
attempts across sites, we observe that despite the large number
of sources and scans, only a handful appear to reﬂect exhaustive
Internet-wide scans.
Finally, starting three weeks after disclosure, we undertook a
large-scale notiﬁcation effort and contacted the operators responsible
for the remaining vulnerable servers. By contacting the operators in
two waves, we could conduct a controlled experiment and measure
the impact of notiﬁcation on patching. We report the effects of our
notiﬁcations, observing a surprisingly high 47% increase in patching
by notiﬁed operators.
We draw upon these observations to discuss both what went well
and what went poorly in the aftermath of Heartbleed. By better
understanding the lessons of this security disaster, the technical
community can respond more effectively to such events in the future.
475HeartbeatRequest
01 length
type length
02 length
«length» bytes
e7f0d31...
payload
random padding
«length» bytes
dc06848...
HeartbeatResponse
Figure 1: Heartbeat Protocol. Heartbeat requests include user
data and random padding. The receiving peer responds by echoing
back the data in the initial request along with its own padding.
2. BACKGROUND
On April 7, 2014, the OpenSSL project publicly disclosed the
Heartbleed vulnerability, a bug in their implementation of the TLS
Heartbeat Extension. The vulnerability allowed attackers to re-
motely dump protected memory—including data passed over the
secure channel and private cryptographic keys—from both clients
and servers. In this section, we provide a brief history of OpenSSL,
the Heartbeat Extension, and details of the vulnerability and its
disclosure.
2.1 OpenSSL: A Brief History
OpenSSL is a popular open-source cryptographic library that
implements the SSL and TLS protocols. It is widely used by server
software to facilitate secure connections for web, email, VPN, and
messaging services. The project started in 1998 and began tracking
vulnerabilities in April 2001.
Over the last 13 years, OpenSSL has documented six code ex-
ecution vulnerabilities that allowed attackers to compromise pri-
vate server data (e.g., private cryptographic keys and messages in
memory) and execute arbitrary code. The project has faced eight
information leak vulnerabilities, four of which allowed attackers to
retrieve plaintext, and two of which exposed private keys. Two of
the vulnerabilities arose due to protocol weaknesses; the remainder
came from implementation errors.
The Heartbleed bug reﬂects one of the most impactful vulnera-
bilities during OpenSSL’s history for several reasons: (1) it allowed
attackers to retrieve private cryptographic keys and private user
data, (2) it was easy to exploit, and (3) HTTPS and other TLS ser-
vices have become increasingly popular, resulting in more affected
services.
2.2 TLS Heartbeat Extension
The Heartbeat Extension allows either end-point of a TLS con-
nection to detect whether its peer is still present, and was motivated
by the need for session management in Datagram TLS (DTLS).
Standard implementations of TLS do not require the extension as
they can rely on TCP for equivalent session management.
Peers indicate support for the extension during the initial TLS
handshake. Following negotiation, either end-point can send a
HeartbeatRequest message to verify connectivity. The exten-
sion was introduced in February 2012 in RFC 6520 [66], added to
OpenSSL on December 31, 2011, and released in OpenSSL Version
1.0.1 on March 14, 2012.
HeartbeatRequest messages consist of a one-byte type ﬁeld, a
two-byte payload length ﬁeld, a payload, and at least 16 bytes of
random padding. Upon receipt of the request, the receiving end-
point responds with a similar HeartbeatResponse message, in
which it echoes back the HeartbeatRequest payload and its own
random padding, per Figure 1.
Event
Date
03/21 Neel Mehta of Google discovers Heartbleed
03/21 Google patches OpenSSL on their servers
03/31 CloudFlare is privately notiﬁed and patches
04/01 Google notiﬁes the OpenSSL core team
04/02 Codenomicon independently discovers Heartbleed
04/03 Codenomicon informs NCSC-FI
04/04 Akamai is privately notiﬁed and patches
04/05 Codenomicon purchases the heartbleed.com domain
04/06 OpenSSL notiﬁes several Linux distributions
04/07 NCSC-FI notiﬁes OpenSSL core team
04/07 OpenSSL releases version 1.0.1g and a security advisory
04/07 CloudFlare and Codenomicon disclose on Twitter
04/08 Al-Bassam scans the Alexa Top 10,000
04/09 University of Michigan begins scanning
Table 1: Timeline of Events in March and April 2014. The dis-
covery of Heartbleed was originally kept private by Google as part
of responsible disclosure efforts. News of the bug spread privately
among inner tech circles. However, after Codenomicon indepen-
dently discovered the bug and began separate disclosure processes,
the news rapidly became public [36, 53].
2.3 Heartbleed Vulnerability
The OpenSSL implementation of the Heartbeat Extension con-
tained a vulnerability that allowed either end-point to read data
following the payload message in its peer’s memory by spec-
ifying a payload length larger than the amount of data in the
HeartbeatRequest message. Because the payload length ﬁeld is
two bytes, the peer responds with up to 216 bytes (~64 KB) of mem-
ory. The bug itself is simple: the peer trusts the attacker-speciﬁed
length of an attacker-controlled message.
The OpenSSL patch adds a bounds check that discards the
HeartbeatRequest message if the payload length ﬁeld exceeds
the length of the payload. However, while the bug is easy to con-
ceptualize and the ﬁx is straight-forward, the potential impact of the
bug is severe: it allows an attacker to read private memory, poten-
tially including information transferred over the secure channel and
cryptographic secrets [31, 59, 67].
2.4 Heartbleed Timeline
The Heartbleed vulnerability was originally found by Neel Mehta,
a Google computer security employee, in March 2014 [36]. Upon
ﬁnding the bug and patching its servers, Google notiﬁed the core
OpenSSL team on April 1. Independently, a security consulting
ﬁrm, Codenomicon, found the vulnerability on April 2, and reported
it to National Cyber Security Centre Finland (NCSC-FI). After re-
ceiving notiﬁcation that two groups independently discovered the
vulnerability, the OpenSSL core team decided to release a patched
version.
The public disclosure of Heartbleed started on April 7, 2014 at
17:49 UTC with the version 1.0.1g release announcement [53], fol-
lowed by the public security advisory [52] released at 20:37 UTC;
both announcements were sent to the OpenSSL mailing list. Several
parties knew of the vulnerability in advance, including CloudFlare,
Akamai and Facebook. Red Hat, SuSE, Debian, FreeBSD and ALT
Linux were notiﬁed less than 24 hours before the public disclo-
sure [36]. Others, such as Ubuntu, Gentoo, Chromium, Cisco, and
Juniper were not aware of the bug prior to its public release. We
present a timeline of events in Table 1.
4763. THE IMPACT OF HEARTBLEED
Heartbleed had the potential to affect any service that used
OpenSSL to facilitate TLS connections, including popular web,
mail, messaging, and database servers (Table 2). To track its dam-
age, we performed regular vulnerability scans against the Alexa
Top 1 Million domains [1] and against 1% samples of the public,
non-reserved IPv4 address space. We generated these samples using
random selection with removal, per ZMap’s existing randomization
function [30]. We excluded hosts and networks that previously
requested removal from our daily HTTPS scans [29]. In this sec-
tion, we analyze the impact on those services—particularly HTTPS.
We have publicly released all of the data used for this analysis at
https://scans.io/study/umich-heartbleed.
3.1 Scanning Methodology
We tested for the Heartbleed bug by modifying ZMap [30] to
send Heartbeat requests with no payload nor padding, and the length
ﬁeld set to zero. Per the RFC [66], these requests should be re-
jected. However, vulnerable versions of OpenSSL send a response
containing only padding, rather than simply drop the request. The
patched version of OpenSSL—as well as other popular libraries,
including GnuTLS, NSS, Bouncy Castle, PolarSSL, CyaSSL and
MatrixSSL—correctly discard the request (or do not support the
Heartbeat Extension).
We emphasize that this approach does not exploit the vulnerability
or access any private memory—only random padding is sent back
by the server. While it was later found that Heartbleed scanning
caused HP Integrated Lights-Out (iLO) devices to crash [11], we
received no reports of our scans disrupting these devices—likely
because our approach did not exploit the vulnerability. We have
publicly released our scanner at https://zmap.io.
3.2 False Negatives
Our Heartbleed scanner contained a bug that caused vulnerable
sites to sometimes appear safe due to a timeout when probing in-
dividual hosts. The root cause was that the scanner labelled each
host’s vulnerability as false by default, rather than null or unknown.
If a Heartbleed test timed out, the scanner returned the host’s vul-
nerability status as the default false, providing no indication of a
failed test. The result is a potential false negative, where the scan
reports the system as immune. Note that our scanner does not how-
ever err when reporting a system as vulnerable. As we develop in
this section, the likelihood of a given scan exhibiting such as false
negative fortunately does not appear to depend on the particular ad-
dress being scanned, and this allows us to estimate the false negative
rate.
We ﬁrst assessed whether some addresses were more prone to
manifest false negatives than others. To do so, we compared three
complete IPv4 scans and examined systems reported as vulnerable
in one scan but immune in previous scans. Since the scanner does
not err in reporting a host as vulnerable, any prior report of immunity
reﬂects a false negative (assuming no one unpatches systems). We
found the IP addresses associated with such false negatives spread
evenly across the address space, without any apparent correlations.
This observation leads us to believe the false negatives manifest in
an address-independent manner.
Although our initial scanner did not fetch the web page itself, a
subsequent change in the comprehensive scan (but not the incremen-
tal scans) attempted to fetch the server’s home page. As the home
page fetch occurred after the Heartbleed check, any reported home
page data implicitly indicates that the Heartbleed test successfully
completed without a timeout.
To investigate the false negative rate, we use two full scans of the
IPv4 address space, one with and one without home page fetching.
The full scan conducted on April 24 did not grab server home pages,
while the May 1 scan did, hence we know the validity of scan
results from the May 1 scan. To soundly conduct this comparison
we need to remove servers that may have switched IP addresses
between the two scans. To do so, we only considered servers that
presented identical TLS certiﬁcates between the two scans. While
this restriction potentially introduces a bias because some sites will
have both patched and changed their TLS certiﬁcates, the address-
independent nature of the false negatives should cause this effect to
even out.
Our scanner failed to grab the server home page for 24% of the
hosts in the May scan. Of these 24% of hosts, we observe 44%
appear immune. False negatives could only have occurred when
testing these hosts. The remaining 56% of hosts appeared vulnerable
(and hence are correctly labelled). From this, we conclude that at
most (0.24 · 0.44) =0.105 , or 10.5%, of hosts were incorrectly
labelled in the May 1 scan.
For the April scan, the only observable signal of a false negative
is if a host was reported immune and then reported vulnerable in
the May scan. We ﬁnd 6.5% of hosts exhibit this behavior. As-
suming that people do not unpatch their systems, this provides an
estimated lower bound of 6.5% for the April scan false negative
rate. This estimate represents a lower bound because we cannot
determine the vulnerability in April of a host that appears immune
in both scans. In that case, a false negative is a host vulnerable
in April but reported as immune, and patched by May. However,
we do observe that of hosts reported as vulnerable in the April
scan and successfully tested in May (so the server page was re-
trieved), only 0.36% appeared immune in May, indicating a very
modest overall patching rate between the two scans (which accords
with Figure 3 below). Given that our false negatives are address-
independent, we expect a similarly low patch rate for all vulnera-
ble April hosts. Thus, while a 6.5% false negative rate is a lower
bound for the April scan, the true rate should not be signiﬁcantly
higher.
Given the similarity of these two false negative estimates using
two different scans, ultimately we conclude that the scanner exhib-
ited a false negative rate between 6.5% and 10.5%, but that these
manifest independently of the particular server scanned. Due to
this address-independent behavior, we can assume a similar false
negative rate for sampled scans. We attempt to account for this
error whenever possible. In particular, the bias implies that any
population-based survey based on a single scan underestimates the
vulnerable population. Finally, for our assessment of the impact
of notiﬁcations (Section 7), we only consider a given server as
non-vulnerable when it consistently reports as immune in repeated
scans, which would require multiple (presumably independent) false
negatives to occur before introducing a bias.
3.3
Impact on Popular Websites
Determining which websites were initially vulnerable poses sig-
niﬁcant difﬁculties. Little attention was paid to the Heartbeat Ex-
tension prior to the vulnerability announcement, and many popular
sites patched the vulnerability within hours of the disclosure. Code-
nomicon, one of the groups that discovered Heartbleed, speculated
that 66% of HTTPS sites were vulnerable [45]. However, this num-
ber represented the Apache and Nginx market share and may well
reﬂect an overestimate, because some operators may have disabled
the extension, deployed dedicated SSL endpoints, or used older,
non-vulnerable versions of OpenSSL.
477Mail Servers
Web Servers
Sendmail [62]
Apache (mod_ssl) [45] Yes
Postﬁx [62]
No
Microsoft IIS [46]
Yes Qmail [62]
Nginx [14]
Exim [35]
Yes
Lighttpd [62]
Courier [37]
Yes