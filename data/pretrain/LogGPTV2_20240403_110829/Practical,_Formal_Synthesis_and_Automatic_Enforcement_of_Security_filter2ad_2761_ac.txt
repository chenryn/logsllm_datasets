### Flow Path and ICC Mechanism

The Inter-Component Communication (ICC) mechanism enhances both the source and destination sets. To exclude private components from inter-app analysis, SEPAR considers the `exported` attribute of each component. A component is considered public, capable of receiving Intents from other applications, if its `exported` attribute is set or if it contains at least one Intent filter. This exclusion of private components contributes to the scalability of the approach by reducing the number of components that need to be analyzed.

### Intent Filters and Component Types

- **Fact IFandComponent**: Each Intent filter belongs to exactly one component.
- **Fact NoIFforProviders**: Among the four core component types, only three can define Intent filters. Content Provider components cannot define Intent filters.

An Intent is associated with a specific component that sends it and may have one recipient component. Each Intent can include an action, data (type and scheme), and a set of categories. These elements are used to determine the recipient component for an implicit Intent—one that does not specify a recipient. The Intent's elements must match those in the Intent filter, which can have more actions, data, and categories than the Intent but not fewer. The `extra` field indicates the types of resources carried by the Intent.

### Alloy Language Overview

Alloy is a declarative language used for modeling and analyzing systems. It includes:

- **Predicates (pred)**: Reusable constraints that evaluate to true or false.
- **Functions (fun)**: Parameterized expressions that return either a boolean or a relational value.
- **Assertions (assert)**: Formulas that must be proven, used to check model properties.

Alloy also provides logical and relational operators:
- **Dot (.)**: Relational join of two relations.
- **Tilde (∼)**: Transpose operation over a binary relation.
- **Transitive closure (ˆ)**: The smallest enclosing transitive relation.
- **Reflexive-transitive closure (*)**: The smallest enclosing relation that is both transitive and reflexive.

### Formal Model of Android Framework

Earlier work [17] formalized the Android framework. For self-containment, this section briefly reviews the model. Listing 3 shows part of the Alloy code describing the meta-model for Android application models. The complete version of all Alloy models is available at [10]. Our model is based on the official Android documentation [34].

#### Excerpts from the Meta-Model
```alloy
abstract sig Component {
    app: one Application,
    intentFilters: set IntentFilter,
    permissions: set Permission,
    paths: set DetailedPath
}

abstract sig IntentFilter {
    actions: some Action,
    dataType: set DataType,
    dataScheme: set DataScheme,
    categories: set Category
}

fact IFandComponent {
    all i: IntentFilter | one i.~intentFilters
}

fact NoIFforProviders {
    no i: IntentFilter | i.~intentFilters in Provider
}
```

### Formal Model of Apps

Listing 4 partially shows the Alloy specifications for the apps in Listings 1 and 2. These specifications are automatically extracted by the AME component from each Android application. Each app specification imports the `androidDeclaration` module. For example, the `LocationFinder` component includes a sensitive path (`pathLocationFinder1`) representing a data flow from where GPS data is retrieved to an Intent event message. The `extra` field of the Intent is set accordingly. The `path` field of `MessageSender` reflects another data flow path, starting from an Intent filter and reaching a node that uses the data in a text message. Note that this component does not enforce any access permission in the manifest file or code.

### Formal Model of Vulnerabilities

To analyze app bundles against inter-app vulnerabilities and generate possible scenarios of their occurrence, we designed specific Alloy signatures. Each vulnerability model captures a specific type of inter-component communication security threat, as identified by Chin et al. [24] and Bugiel et al. [21]. The security property check is formulated as finding a valid trace that satisfies the vulnerability signature specifications. If the Alloy Analyzer finds a solution, the property is violated, and the solution encodes the exact scenario leading to the violation.

#### Example: Service Launch Exploit
Listing 5 presents the `GeneratedServiceLaunch` signature and its fact, specifying the elements involved in a service launch exploit. A malicious component (`malCmp`) can launch a component by sending an Intent (`malIntent`) to an exported component (`launchedCmp`) that is not expecting Intents from that component. The `launchedCmp` has a path from the exported interface to a permission-required resource, potentially leaking information or performing unauthorized tasks.

```alloy
sig GeneratedServiceLaunch {
    launchedCmp, malCmp: one Component,
    malIntent: one Intent
} {
    malIntent.sender = malCmp
    launchedCmp in set ExplicitIntent[malIntent]
    no launchedCmp.app & malCmp.app
    launchedCmp.app in device.apps
    not (malCmp.app in device.apps)
    some launchedCmp.paths && launchedCmp.paths.source = ICC
    some malIntent.extra
    malCmp in Activity
}
```

### Generating Possible Exploit Scenarios

We run the defined modules to satisfy the vulnerability signature facts within a given scope, which specifies an upper bound for the number of instances per element signature. If an instance is found, SEPAR reports it along with information useful for finding the root cause of the violation, from which fine-grained security policies are derived.

For our running example, the analyzer generates the following scenario: A malicious component, `App0/Service0`, can send device location data captured from a vulnerable Intent, `Intent1`, to a desired phone number via an explicit Intent, `Service0/Intent0`, sent to the `App2/MessageSender` component. This scenario indicates that `App2/MessageSender` is vulnerable to service launch. SEPAR formulates a policy to prevent such Intent-based interactions, achieving proactive defense.

### Policy Example
```json
{
    "event": "ICC received",
    "condition": [
        { "Intent.extra": "LOCATION" },
        { "Intent.receiver": "MessageSender" }
    ],
    "action": "user prompt"
}
```
This policy states that every attempt to send device location data through the `MessageSender` component must be manually approved by the user.

### APE: Android Policy Enforcer

In implementing APE, we considered three alternatives:
1. Modify the Android OS to enforce policies.
2. Modify an app by injecting policy enforcement logic into the APK file.
3. Use dynamic memory instrumentation of the app’s process.

We chose the third approach, as it allows SEPAR to be used on an unmodified version of Android, making it widely applicable.

Our approach consists of:
- **Policy Decision Point (PDP)**: Evaluates access requests against a policy.
- **Policy Enforcement Point (PEP)**: Intercepts resource requests, consults the PDP, and acts on the decision.

We use the Xposed framework to modify the behavior of Android apps at runtime without changing the APK files. The PDP is an independent Android app storing synthesized policies, and the PEP is an Xposed module intercepting event messages. Each ICC method in an app’s APK (e.g., `startService(Intent)`) is hooked to assess whether the operation should proceed. If the operation is not allowed, the PDP prompts the user for consent, providing information to help make a decision. Preventing ICC calls forces the app to operate in a degraded mode without causing unexpected crashes.

### Evaluation

SEPAR’s static analysis capability is implemented on top of the Soot framework, using Flowdroid for intra-component taint analysis and extending it for precision in complex ICC methods. The prototype implementation requires only APK files, making it suitable for non-open-source apps. The translation of captured app models into Alloy is done using the FreeMarker template engine. The core components of the analysis and synthesis model are embedded in the Alloy language, and SEPAR relies on Aluminum [45] as the backend analysis engine.