## 沉浸式学习PostgreSQL|PolarDB 3: 营销场景, 根据用户画像的相似度进行目标人群圈选, 实现精准营销  
### 作者  
digoal  
### 日期  
2023-08-24  
### 标签  
PostgreSQL , PolarDB , 数据库 , 教学  
----  
## 背景  
非常欢迎数据库用户提出场景给我, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 一起来建设沉浸式数据库学习教学素材库, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.  
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/exp/f55dbfac77c0467a9d3cd95ff6697a31)来完成.  
如果你本地有docker环境也可以把镜像拉到本地来做实验:  
x86_64机器使用以下docker image:  
- [《amd64 , 使用Dockerfile+docker build制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习, 并推送到阿里云镜像服务》](../202307/20230710_03.md)  
Apple Chip机器使用以下docker image:  
- [《arm64 , 使用Dockerfile+docker build制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习, 并推送到阿里云镜像服务》](../202308/20230814_02.md)  
## 业务场景1 介绍: 营销场景, 根据用户画像的相似度进行目标人群圈选, 实现精准营销  
在营销场景中, 通常会对用户的属性、行为等数据进行统计分析, 生成用户的标签, 也就是常说的用户画像.  
标签举例: 男性、女性、年轻人、大学生、90后、司机、白领、健身达人、博士、技术达人、科技产品爱好者、2胎妈妈、老师、浙江省、15天内逛过手机电商店铺、... ...  
有了用户画像, 在营销场景中一个重要的营销手段是根据条件选中目标人群, 进行精准营销.  
例如圈选出包含这些标签的人群: 白领、科技产品爱好者、浙江省、技术达人、15天内逛过手机电商店铺 .  
这个实验的目的是在有画像的基础上, 如何快速根据标签组合进行人群圈选 .  
### 实现和对照  
设计1张标签元数据表, 后面的用户画像表从这张标签表随机抽取标签.  业务查询时也从这里搜索存在的标签并进行圈选条件的组合, 得到对应的标签ID组合.  
```  
drop table if exists tbl_tag;  
create table tbl_tag (  
  tid int primary key,  -- 标签id  
  tag text,  -- 标签名  
  info text  -- 标签描述  
);  
```  
假设有1万个标签, 写入标签元数据表.  
```  
insert into tbl_tag select id, md5(id::text), md5(random()::text) from generate_series(1, 10000) id;  
```  
创建2个函数, 产生若干的标签. 用来模拟产生每个用户对应的标签数据.  分别返回字符串和数组类型.  
第一个函数, 随机提取若干个标签, 始终包含1-100的热门标签8个, 返回用户标签字符串:  
```  
create or replace function get_tags_text(int) returns text as $$  
  with a as (select string_agg(tid::text, ',') s from tbl_tag where tid = any (array(select ceil(random()*100)::int from generate_series(1,8) group by 1)))  
  , b as (select string_agg(tid::text, ',') s from tbl_tag where tid = any (array(select ceil(100+random()*9900)::int from generate_series(1,$1) group by 1)))  
  select ','||a.s||','||b.s||',' from a,b;  
$$ language sql strict;  
```  
得到类似这样的结果:  
```  
postgres=# select get_tags_text(10);  
                            get_tags_text  
----------------------------------------------------------------------  
 ,11,12,39,44,45,59,272,1001,1322,1402,2514,6888,7404,8922,9200,9409,  
(1 row)  
postgres=# select get_tags_text(10);  
                             get_tags_text  
------------------------------------------------------------------------  
 ,12,34,52,55,71,79,88,302,582,1847,3056,5156,8231,8542,8572,8747,9727,  
(1 row)  
```  
第二个函数, 随机提取若干个标签, 始终包含1-100的热门标签8个, 返回用户标签数组:  
```  
create or replace function get_tags_arr(int) returns int[] as $$  
  with a as (select array_agg(tid) s from tbl_tag where tid = any (array(select ceil(random()*100)::int from generate_series(1,8) group by 1)))  
  , b as (select array_agg(tid) s from tbl_tag where tid = any (array(select ceil(100+random()*9900)::int from generate_series(1,$1) group by 1)))  
  select a.s||b.s from a,b;  
$$ language sql strict;  
```  
得到类似这样的结果:  
```  
postgres=# select * from get_tags_arr(10);  
                                get_tags_arr  
----------------------------------------------------------------------------  
 {13,35,42,61,67,69,76,78,396,2696,3906,4356,5064,5711,7363,9417,9444,9892}  
(1 row)  
postgres=# select * from get_tags_arr(10);  
                              get_tags_arr  
-------------------------------------------------------------------------  
 {2,10,20,80,84,85,89,3410,3515,4159,4182,5217,6549,6775,7289,9141,9431}  
(1 row)  
```  
#### 传统方法 设计和实验  
传统数据库没有数组类型, 所以需要用字符串存储标签.  
创建用户画像表  
```  
drop table if exists tbl_users;  
create unlogged table tbl_users (  -- 为便于加速生成测试数据, 使用unlogged table  
  uid int primary key,   -- 用户id  
  tags text   -- 该用户拥有的标签 , 使用字符串类型  
);  
```  
创建100万个用户, 用户被贴的标签数从32到256个, 随机产生, 其中8个为热门标签(例如性别、年龄段等都属于热门标签).  
```  
insert into tbl_users select id, get_tags_text(ceil(24+random()*224)::int) from generate_series(1,1000000) id;  
```  
测试如下, 分别搜索包含如下标签组合的用户:  
- 2  
- 2,8  
- 2,2696  
- 2,4356,5064,5711,7363,9417,9444  
- 4356,5064,5711,7363,9417,9444  
使用如下SQL:  
```  
select uid from tbl_users where tags like '%,2,%';  
select uid from tbl_users where tags like '%,2,%' or tags like '%,8,%';  
select uid from tbl_users where tags like '%,2,%' or tags like '%,2696,%';  
select uid from tbl_users where tags like '%,2,%' or tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;  
select uid from tbl_users where tags like '%,4356,%' or tags like '%,5064,%' or tags like '%,5711,%' or tags like '%,7363,%' or tags like '%,9417,%' or tags like '%,9444,%' ;  
```  