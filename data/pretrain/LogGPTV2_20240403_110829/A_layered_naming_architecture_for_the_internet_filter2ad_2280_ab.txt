tions between the client and service EIDs. Before invoking IP, the
transport layer resolves the EID to the current set of IP addresses to
which the EID is attached.
A crucial property of this layering is that the resolution of a SID
to the eventual set of IP addresses for the communication session
does not happen prematurely. More concretely, applications gener-
ally deal with SIDs (after perhaps resolving user-level descriptors),
transport protocols generally deal with (or bind to) EIDs, and only
IP itself deals with IP addresses. The resulting bindings are thus ac-
curate and appropriate even in the face of host mobility and service
migration. For instance, if the EID-to-IP mapping changes, then
the transport layer can re-initiate an EID lookup to rebind [35, 48].
If a service moves, or is copied, to another location, a new SID
lookup provides the current SID-to-EID bindings; if a service were
to move while a session were in progress, the application might
initiate such a lookup to continue the session.
2.2 Namespaces and Network Elements
Principle #1 concerned how names should relate to protocols.
Our second design principle discusses how names should relate to
their referents. When users care about the identity of an object
rather than its location, the object’s name should be persistent in
that it remains unchanged even when the object’s location changes.
Principle #2: Names,
if they are to be persistent,
should not impose arbitrary restrictions on the ele-
ments to which they refer.
The two current global namespaces, IP addresses and DNS
names, are each closely tied to an underlying structure. Achieving
scalable routing requires that IP addresses reﬂect network topology.
DNS names, though more ﬂexible, nonetheless reﬂect administra-
tive structure.
As has been noted in the URN literature [23, 50, 51] and by oth-
ers [4,37,59], DNS-based names for data are inherently ephemeral.
Data does not naturally conform to domain boundaries, so data is
likely to be replicated on, or moved to, hosts outside the originat-
ing domain. When this replication or movement happens, exist-
ing references to the data become invalid; e.g., if the ﬁle dog.jpg
moves to def.org from abc.org, existing Web links that reference
abc.org are now useless. (For a more complete discussion of the
problems of hostname/pathname URLs, see [50, 51, 59] and cita-
tions therein.) The same difﬁculty arises when services move and
there are pre-existing pointers to those services (e.g., when a pop-
ular FTP server encodes a DNS name that is no longer correct),
though one might argue that services are less peripatetic than data.
Thus, no namespace currently exists that can persistently name
data and services. Some of the URN literature proposes a new
namespace and resolution mechanism [11] for each genre (e.g.,
ISBN numbers would have their own canonical resolver). Parti-
tioning allows resolution to scale since different resolver types can
incorporate genre-speciﬁc knowledge, but then adherence to Prin-
ciple #2 depends on an accurate mapping of elements to genres
and on an element’s never changing genres. In contrast, the Globe
project [4], Semantic-Free Referencing [59], and Open Network
Handles [37] take an entirely different approach: they advocate a
single new ﬂat namespace that can serve all present and future net-
work elements. A ﬂat namespace has no inherent structure and so
does not impose any restrictions on referenced elements, ensuring
EID Resolution 
Service
E I D   e ,   I P   =   ?
E I D   e ,   I P   =   y
Intent:
“send to EID e’’ 
Source
(Querier) 
EID: e
IP: x
Dest
(Target)
IP: y
Delegate
Figure 1: EID-level delegation. A source queries on a given EID
and is given the IP address of a delegate. The source could also
be given the delegate’s EID or multiple EIDs (not shown).
universal compliance with Principle #2. In this paper, we adopt this
second approach, using a ﬂat namespace for SIDs and EIDs.
2.3 Resolution and Delegation
Our ﬁrst two design principles concerned the role of names. Our
third addresses how these names are resolved. The typical deﬁ-
nition of “resolving a name” is mapping a name to its underlying
“location”. In our case, an SID’s “location” would usually be an
(EID, transport, port) triple4 and an EID’s location would be an IP
address. However, we think this typical deﬁnition is too restrictive
and instead adopt the following more general notion of resolution.
Principle #3: A network entity should be able to direct
resolutions of its name not only to its own location, but
also to the locations or names of chosen delegates.
In any logical network connection, the initiator at any level (e.g.,
a human requesting a Web page or an endpoint initiating a trans-
port connection) intends to connect to a destination entity. In our
case, for example, transport protocol entities connect to destination
EIDs. However, the destination entity may not want to handle the
connection directly, preferring instead to direct the connection to
a chosen delegate, as shown in Figure 1. This kind of delegation
neither alters essential trust relationships (if you trust an entity, you
trust its delegates), nor interferes with established protocol seman-
tics, as will be seen when we describe the details of such delegation
in Section 3.2.5
While the recipient-controlled delegation in Principle #3 might
seem esoteric at ﬁrst, it is crucial to the overall architecture. As we
describe in Section 3, delegation allows the architecture to grace-
fully incorporate intermediaries, which we deﬁne as cleaner and
more ﬂexible versions of middleboxes. Delegation also yields some
4Resolving an SID can also return meta-data (such as a pathname
on a Web server) in addition to the “location”, thereby allowing
data (in this case a Web page) to be named by an SID.
5Recipient-controlled delegation could accommodate the kind of
distributed network element envisioned in [9]; that is, the destina-
tion and its delegate could be part of the same logical element even
if they are physically distinct.
protection against denial-of-service attacks, as discussed in Sec-
tion 3.2.
2.4 Sequences of Destinations
In traditional IP routing, the routing protocol is responsible for
choosing the packet’s path through the network. However, there
have been many source routing proposals in which sources are
given the power to specify the path or, in the case of loose source
routing, a few points along the path. We believe that this ability
should be available not just at the routing layer (which is not our
concern here) but also at the endpoint and service layers.
More speciﬁcally, the abstraction of sending to a destination
should be generalized to allow sources to indicate that their pack-
ets should traverse a series of endpoints (speciﬁed by a sequence
of EIDs) or that their communications, the granularity of which we
address later, traverse a series of services (speciﬁed by a sequence
of SIDs). Such abstractions would generalize the notion of a desti-
nation to a sequence of destinations. Note that since these various
destinations are not speciﬁed at the IP layer, but rather at the end-
point and service layers, these intermediate points do not merely
forward the packets but may act on them in non-trivial ways.
Combining this sentiment with Principle #3 suggests that end-
points and services should be able to have their names resolve not
just to a single location but more generally to a sequence of iden-
tiﬁers (either IP addresses or EIDs). In this way, both senders and
receivers could loosely dictate the paths of packets sent from them
or destined for them. This idea is captured in our fourth, and ﬁnal,
design principle.
Principle #4: Destinations, as speciﬁed by sources and
also by the resolution of SIDs and EIDs, should be
generalizable to sequences of destinations.
3. ARCHITECTURE
We should ﬁrst note that our belief in the general principles
above is deeper than our conviction about any of the architectural
details that follow. The description below is intended to illustrate
how to achieve the beneﬁts that ﬂow from these principles, but one
should view this architecture merely as an existence proof that the
general principles can be realized, not as their deﬁnitive embodi-
ment. In fact, many of the details here arose during an implemen-
tation effort, described in [60].
The four general principles led us to claim that (1) two additional
sets of names (SIDs and EIDs) should exist, (2) these names should
be ﬂat, (3) the architecture should support delegation as a basic
primitive, and (4) destinations, whether speciﬁed by the source or
receiver, can, in fact, be sequences of destinations. In this section,
we present an architecture that results from these claims, ﬁrst fo-
cusing on the consequences of SIDs and EIDs (Section 3.1), then on
delegation (Section 3.2). We defer discussing the consequences of
ﬂat names to Section 4, and we incorporate the notion of sequences
in our description of delegation. In the process of describing the
architecture, we note how it yields the three beneﬁts stated in Sec-
tion 1, namely making services and data ﬁrst-class objects, support
for mobility, and graceful incorporation of intermediaries.
3.1 EIDs and SIDs
We start by describing how this architecture works in the basic
case. The discussion of intermediaries in Section 3.2 will compli-
cate the story. Although we will refer to SIDs and EIDs throughout
Section 3, not every application will require both SIDs and EIDs.
The two mechanisms are logically distinct and need not be coupled.
user-level descriptor (ULD) lookup
(e.g., e-mail address, search string, etc.)
App obtains SIDs corresponding to ULD 
using a lookup or search service
SID resolution
App’s session protocol (e.g., HTTP) resolves 
SID to EIDs using SID resolution service
EID resolution
Transport protocol resolves EID to 
IP addresses using EID resolution service
IP address “resolution” (routing)
Figure 2: The naming layers.
Principle #1 led us to claim that applications should bind to SIDs
and transport protocols should bind to EIDs. Thus, applications
must use a layer between them and transport that resolves SIDs to
EIDs, and similarly, transport protocols must use a layer between
them and IP that translates between EIDs and IP addresses. We will
call the layers resolution layers, though they do more than simply
resolve identiﬁers. These layers could be separate libraries or soft-
ware that is part of the application or transport protocol. The reso-
lution layers result in the naming architecture depicted in Figure 2.
We now give more details on how these resolution layers are used,
focusing on how they ﬁt into the overall architecture. We defer the
mechanics of resolution to Section 4.
In what follows, we assume that humans and the applications
under their control have already used an auxiliary mapping service
(e.g., a search engine) to map a user-level descriptor (e.g., a search
query) to an SID. As a result, we will not discuss user-level
descriptors and will instead assume that applications have in hand
an SID representing a service or data.
SID resolution: Consider an SID-aware application, a, run-
ning on a given host, h, and say that a wishes to gain access
to a service or data represented by an SID s. The application
hands s to the SID resolution layer, which contacts the resolution
infrastructure (one realization of which is described in Section 4)
and is handed back one or more (EID,transport,port)6 triples,
where each triple represents an instance of the desired service.
Following the approach in [59], if the SID abstracts a data item, not
just a service, then the SID resolution layer would also receive, for
each triple, an application directive. For example, if s represented
a Web server, then the triple returned might be (EID of the Web
server, TCP, port 80). If s represented a Web page, not just a Web
server, then a pathname on the Web server might also be returned.
The functions we next describe might be abstracted by an
application-independent library. However, since the library would
be under a’s control, and since some applications might want
different behavior and thus elect not to use the library, we will
describe the actions as performed by a, not by the library. Given
6Since EIDs are not required, the triple could be (id,transport,port),
where id is another host identiﬁer, such as a DNS name or an IP
address. However, as we have noted, such usage would not cope
with host mobility.
a triple of the kind mentioned above, a would communicate with
the speciﬁed EID using the speciﬁed transport protocol and port
number (or other transport-speciﬁc information). The transport
protocols, now bound to EIDs (instead of IP addresses), would
use h’s EID as the source EID and the one from the triple as the
destination EID. Depending on the application semantics, a might
use multiple triples for simultaneous connections, or it might use
multiple triples as backups in case the current connection failed. If
all of the triples failed, a could re-invoke the SID resolution layer
to re-resolve s to check for new triples.
EID resolution: The transport protocol prepares one or more
packets to send, which it passes down to the EID resolution layer.
The EID resolution layer resolves the destination EID into one
or more IP addresses.
(Multiple IP addresses could arise for
multi-homed hosts and also when a logical endpoint represented
a collection of physical machines, each with its own IP address.)
When handing control to the IP layer, the EID resolution layer uses
one of the returned IP addresses as the destination IP address, and
the source IP address is that of the sending host. If the destination
host is unreachable, the EID layer can use another IP address if
it received more than one from the resolution step.7
If none of