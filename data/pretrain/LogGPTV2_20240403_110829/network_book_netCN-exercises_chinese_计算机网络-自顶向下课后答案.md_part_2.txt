链路层帧：封装有链路层头信息的网络层数据段
25、路由器处理网络、链路、物理层（第1到3层）。（实际上现代路由器有时担任防火墙、缓存组件和处理传输层）链路层交换机处理链路层和网络层（第1到2层）。主机处理所有的五层。
26、
a）病毒
需要以下人的交互来传播。比如邮件病毒。
b）蠕虫
不需要用户介入。受感染主机中的蠕虫会扫描IP地址和端口号来查找可感染的进程。
27、创建僵尸网络需要攻击者发现以下应用或系统的薄弱点（比如利用应用中可能存在的缓冲区溢出漏洞）。发现薄弱点后，黑客需要查找可攻击的主机。目标一般是已发现漏洞的一系列系统。僵尸网络中的任何系统都可以通过漏洞自动扫描它的环境和传播。这种僵尸网络的重要属性就是僵尸网络的起点可以远程控制和发送命令至僵尸网络中的所有结点的每一个节点（例如僵尸网络中的所有结点可以被黑客命令发送TCP SYN信息至目标，并将导致目标的TCP SYN溢出攻击）。
28、Trudy可以假装为Bob（反之亦然）并且部分或者完全修改Bob发送给Alice的信息。例如，她可以很容易的修改语句“Alice，我欠你1000美元”为“Alice，我欠你10000美元”。更进一步，Trudy甚至可以丢弃Bob发送给Alice的加密信息（反之亦然）。
[Back to Index](#目录)
## 问题1
P1. 这个问题不止一个答案。很多协议都可以解决这个问题。下面是一个简单的答案：
| Msg name | purpose |
|--------- |-------- |
|HELO  | Let server know that there is a card in the ATM machine . ATM card transmits user ID to Server |
|PASSWD  | User enters PIN, which is sent to server . BALANCE User requests balance |
|WITHDRAWL  | User asks to withdraw money . BYE user all done |
从服务器至ATM机器的信息（显示）
| Msg name | purpose |
|--------- |-------- |
|PASSWD | Ask user for PIN (password) |
|OK | last requested operation (PASSWD, WITHDRAWL) OK |
|ERR | last requested operation (PASSWD, WITHDRAWL) in ERROR |
|AMOUNT  | sent in response to BALANCE request |
|BYE | user done, display welcome screen at ATM |
正确回应：
|client | server |
|-------|--------|
|HELO (userid) | --------------> (check if valid userid) |
| |  | --------------> (check password) |
| |  
| |  |
|WITHDRAWL  | --------------> check if enough $ to cover withdrawl |
| |  |
| |  (check if valid userid) |
| | |--------------> (check password) |
||  |
||  |
|WITHDRAWL  |--------------> check if enough $ to cover |
withdrawl ||
| | |
| | <------------- BYE|
P2. N*(L/R)时，第一个包到达目的地，第二个包存储在最后一个路由器中，第三个包存储在倒数第二个路由器中，等等。N*(L/R)+L/R时，第二个包到达目的地，第三个包存储在最后一个路由器中，等等。按照这个逻辑继续，我们可以看到在N*(L/R)+(P-1)*(L/R)=(N+P-1)*(L/R)时所有数据包到达目的地。
P3.
a.电路交换网，因为应用将以稳定速率，持续长时间运行，因此可以为其保留带宽。
b.不需要，传输速率总和小于链路容量。
P4.
a.在左上角的开关和右上角的开关之间，我们可以有4个连接。类似地，我们可以在其他3对相邻开关之间各有四个连接。因此，这个网络可以支持多达16个连接。
比如：
A 到 B ：4 条
B 到 C ：4 条
C 到 D ：4 条
D 到 A ：4 条
这 16 条可以同时连接。
b.我们可以通过右上角的开关通过4个连接，在左下角有4个通过开关的连接，总共有8个连接。
A 到 B ：4 条
B 到 C ：4 条
最多 8 条。
c.可以。对于A和C之间的连接，我们路由两个连接通过B，两个连接通过D。对于B和D之间的连接，我们路由两个连接通过A，两个连接通过C。这样，最多有4个连接通过任何链接。
A 到 B ：2 条
B 到 A ：2 条
A 到 D ：2 条
B 到 C ：2 条
P5.收费亭相距75公里，车辆以每小时100公里的速度传播。收费亭每12秒为一辆汽车提供服务。
a.有十辆车。第一个收费站服务这10辆车需要120秒钟，也就是2分钟。每辆汽车在到达第二个收费站之前都有45分钟的传播延迟(行驶75公里)。因此，在47分钟后的第二个收费站前，所有的汽车都排好了队。整个过程重复在第二个和第三个收费亭之间旅行。第三个收费站还需要2分钟才能为10辆车提供服务。因此，总的延迟时间是96分钟。
收费站将整个车队推向公路的时间为 d1 = 2min；
两收费站之间距离 75 km，从一个收费站到另一个的时间 d2 = 0.75 h
总时间 d = 3d1 + 2d2 = 96min
b.收费亭之间的延误为8*12秒加上45分钟，即46分钟和36秒。总延迟是这一数额的两倍，加上8*12秒，即94分48秒。
d1’ = 8辆 / 5辆/min = 1.6min
d’ = 3d1’ + 2d2 = 94.8min
P6.
a.$d_{prop}=m/s seconds$
b.$d_{trans}=L/R seconds$
c.$d_{e2e}=d_{prop}+d_{trans}=m/s+L/R$
d.刚刚离开A
e.第一位在链路上并且还没有到达B
f.已经到达B
g.$d_{prop}$ = $d_{trans}$
m/s = L/R
$m = Ls/R = 120b * (2.5 *10^8)m/s / 56kbps = (5.36 * 10^5)m$
P7.考虑数据包中的第一位。在传输此位之前，必须生成数据包。
主机 A 产生 56 字节的分组需要 = 56 * 8b / 64kbps = 7ms
传输时延 = 56 * 8b / 2Mbps = 0.224ms
总时间 = 7ms + 10ms + 0.224ms = 17.224ms
P8.
a.3Mbps/150kbps = 20
b.p = 0.1
c.$\binom{120}{n}p^n(1-p)^{120-n}$
d.$1-\sum_{n=0}^{20}\binom{120}{n}p^n(1-p)^{120-n}$
根据中心极限定理：令$X_j$为独立随机变量P($X_j$​=1)=p ；
P(21或更多用户)=1−P($\sum_{j=1}^{120}X_j≤21$)
P($\sum_{j=1}^{120}X_j≤21$)=$P\left ( \frac{\sum_{j=1}^{120}X_j-12}{\sqrt{120\cdot 0.1\cdot0.9}}\leq \frac{9}{\sqrt{120\cdot 0.1\cdot0.9}} \right )$≈P(Z≤9/3.2869​)=P(Z≤2.74)=0.997
因此 P(21或更多用户)≈0.003
P9.
a.N=1Gbps×100kbps=$10^4$
b.$\sum_{n=N+1}^{M}\binom{M}{n}p^n(1-p)^{M-n}$
P10.第一终端系统要求$L/R_1$将分组发送到第一链路；分组在$d_1/s_1$中的第一链路上传播；分组交换机增加$d_{proc}$的处理延迟；在接收到整个分组后，连接第一和第二链路的分组交换机要求$L/R_2$将该分组发送到第二链路；该分组通过$d_2/s_2$中的第二链路传播。同样，我们可以找到第二个交换机和第三个链路：$L/R_3$、$d_{proc}$和$d_3/s_3$所造成的延迟。加上这五个延迟
$D_{trans}=L/R_1+L/R_2+L/R_3$
$D_{prop}=d_1/s_1+d_2/s_2+d_3/s_3$
$D_{prop}=2∗d_{proc}$
$D=D_{trans}+D_{prop}+D_{proc}$
D=6+6+6+20+16+4+3+3=64ms
P11.由于比特是立即发送的，所以分组交换机不引入任何延迟；特别是，它不引入传输延迟。因此，
$d_{end2end}=L/R+d_1/s_1+d_2/s_2+d_3/s_3$
对于问题10中的值，我们得到$D=D_{prop}+L/R=20+16+4+6=46ms$
P12.到达的数据包必须首先等待链路发送4.5×1500字节=6750字节或54000比特。由于这些比特是以2Mbps发送的，所以队列延迟为27毫秒。一般情况下，排队延迟为(nL(L-x))/R。
有一个完整分组的排队时延为1500×8b×2Mbps=0.6ms