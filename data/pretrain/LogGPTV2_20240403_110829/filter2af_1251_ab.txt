    # 实例化一个求解器对象
    s = Solver()
    s.add(And(45 * v5
         + 248 * v6
         + 20 * v7
         + 67 * v8
         + 90 * v9
         + 135 * v10
         + 106 * v11
         + 112 * v12
         + 40 * v13
         + 231 * v14
         + 153 * v15
         + 233 * v16
         + 19 * v17
         + 188 * v18
         + 232 * v19
         + 127 * v20
         + 15 * v21
         + 67 * v22
         + 50 * v23
         + 161 * v24
         + 103 * v25
         + 144 * v26
         + 81 * v27
         + 126 * v28
         + 240 * v29
         + 124 * v30
         + 194 * v31
         + 92 * v32
         + 108 * v33
         + 111 * v34
         + 174 * v35
         + 48 * v36 == 359512
         .....
             , 244 * v5
           + 196 * v6
           + 30 * v7
           + 100 * v8
           + 168 * v9
           + 7 * v10
           + 249 * v11
           + 84 * v12
           + 252 * v13
           + 171 * v14
           + 210 * v15
           + 206 * v16
           + 108 * v17
           + 153 * v18
           + 67 * v19
           + 189 * v20
           + 141 * v21
           + 239 * v22
           + 177 * v23
           + 10 * v24
           + 15 * v25
           + 164 * v26
           + 142 * v27
           + 97 * v28
           + 27 * v29
           + 173 * v30
           + 146 * v31
           + 133 * v33
           + 105 * v34
           + 75 * (v32 + v35)
           + 197 * v36 == 393331 ))
    s.add(185 * v5
              + 196 * v6
              + 135 * v7
              + 218 * (v24 + v9)
              + 241 * v8
              + 210 * v10
              + 127 * v11
              + 221 * v12
              + 47 * v13
              + 179 * v14
              + 61 * v15
              + 59 * v16
              + 197 * v17
              + 204 * v18
              + 198 * v19
              + 75 * v20
              + 146 * v21
              + 156 * v22
              + 235 * v23
              + 63 * v25
              + 220 * v26
              + 3 * v27
              + 167 * v28
              + 230 * v29
              + 69 * v30
              + 186 * v31
              + 57 * v32
              + 147 * v33
              + 221 * v34
              + 79 * v35
              + 53 * v36 == 430295)
    # sat表示计算出结果
    if s.check() == sat:
         t = []
         print "compute result: "
         m = s.model()
         t.append(str(m[v33]))
         t.append(str(m[v34]))
         t.append(str(m[v32]))
         t.append(str(m[v31]))
         t.append(str(m[v30]))
         t.append(str(m[v29]))
         t.append(str(m[v28]))
         t.append(str(m[v27]))
         t.append(str(m[v26]))
         t.append(str(m[v25]))
         t.append(str(m[v24]))
         t.append(str(m[v23]))
         t.append(str(m[v22]))
         t.append(str(m[v21]))
         t.append(str(m[v20]))
         t.append(str(m[v19]))
         t.append(str(m[v18]))
         t.append(str(m[v17]))
         t.append(str(m[v16]))
         t.append(str(m[v15]))
         t.append(str(m[v14]))
         t.append(str(m[v13]))
         t.append(str(m[v12]))
         t.append(str(m[v11]))
         t.append(str(m[v10]))
         t.append(str(m[v9]))
         t.append(str(m[v8]))
         t.append(str(m[v7]))
         t.append(str(m[v6]))
         t.append(str(m[v5]))
         t.append(str(m[v36]))
         t.append(str(m[v35]))
         t = map(int, t)
         t = map(chr, t)
         print "".join(t)
    else:
         print "failed"
### 二重解密
这里直接用的大佬的脚本，将上面解密的数据进行异或计算，即可返回最终我们需要输入的内容
    int main(int argc, char** argv) {
        unsigned char c[33] = "S0m3time_l1tt1e_c0de_1s_us3ful33";
        unsigned char in[33] = { 0 };
        unsigned int t1 =0,t2= 0,t3=0,t4=0;
        printf((const char *)c);
        printf("\n");
        in[0] = c[0] ^ 0x18;
        in[1] = c[1] ^ 0x9;
        in[2] = c[2] ^ 0x3;
        in[3] = c[3] ^ 0x6b;
        in[4] = c[4] ^ 0x1;
        in[5] = c[5] ^ 0x5A;
        in[6] = c[6] ^ 0x32;
        in[7] = c[7] ^ 0x57;
        in[8] = c[8] ^ 0x30;
        in[9] = c[9] ^ 0x5d;
        in[10] = c[10] ^ 0x40;
        in[11] = c[11] ^ 0x46;
        in[12] = c[12] ^ 0x2b;
        in[13] = c[13] ^ 0x46;
        in[14] = c[14] ^ 0x56;
        in[15] = c[15] ^ 0x3d;
        in[16] = c[16] ^ 0x02;
        in[17] = c[17] ^ 0x43;
        in[18] = c[18] ^ 0x17;
        in[19] = c[19];
        in[20] = c[20] ^ 0x32;
        in[21] = c[21] ^ 0x53;
        in[22] = c[22] ^ 0x1F;
        in[23] = c[23] ^ 0x26;
        in[24] = c[24] ^ 0x2a;
        in[25] = c[25] ^ 0x01;
        in[26] = c[26];
        in[27] = c[27] ^ 0x10;
        in[28] = c[28] ^ 0x10;
        in[29] = c[29] ^ 0x1E;
        in[30] = c[30] ^ 0x40;
        in[31] = c[31];
        printf((const char *)in);
        return 0;
    }
# 小结
【1】 多元线性方程式可以通过python的z3-solver库快速计算
# 反思
最开始做这道题我是卡在了最后一步，我用sage并未求出结果。
主要原因是：我甚至未能清除的理解这个算法的本质，当时并未意识到这是个多元方程求解的计算，只想着怎么求出这个结果，结果在网上找到一个相似题的解决方法，用sage计算，但在这里却并未算出
结论：解决问题时，不要求对所有细节了如执掌，但是题的主干脉络、根本思路是我们需要探索的
# 参考
【1】[原创]第五题：丛林的秘密
【2】Z3 API in Python 
【3】IDC脚本 - IDC脚本语言官方教程 
【4】线性方程组矩阵解法 