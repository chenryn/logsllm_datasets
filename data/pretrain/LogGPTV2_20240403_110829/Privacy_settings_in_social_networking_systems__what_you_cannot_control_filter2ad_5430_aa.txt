# Title: Privacy Settings in Social Networking Systems: What You Cannot Control

## Authors:
- Amirreza Masoumzadeh
- James Joshi

### Affiliations:
- School of Information Sciences, University of Pittsburgh, Pittsburgh, PA, USA

### Abstract:
In this paper, we propose a framework to formally analyze the protection of privacy-sensitive information in Social Networking Systems (SNSs) based on an expression of ideal protection policies for a user. Our ontology-based framework captures complex and fine-grained privacy-sensitive information in SNSs and identifies missing policies given a user’s ideal policies, the SNS's privacy settings, and described system policies. We introduce the concept of policy completeness for SNSs to facilitate such an analysis. A case study using Facebook demonstrates that our approach can effectively identify important missing policies.

### Categories and Subject Descriptors:
K.4.1 [COMPUTERS AND SOCIETY]: Public Policy Issues—Privacy

### Keywords:
Social Networking Systems, Privacy Settings, Privacy Control Policies

---

## 1. Introduction

In a typical Social Networking System (SNS), such as Facebook, users can configure several privacy settings to control others' access to their information. These settings are essentially access control policies for digital objects. However, these settings are not comprehensive; they do not cover all potentially privacy-sensitive information about a user. Even Facebook, which has one of the most extensive sets of privacy settings, does not provide complete control. Access to the remaining information is governed by fixed rules set by the SNS itself. We refer to these fixed rules as system-defined policies and the user-configurable settings as privacy control policies.

There is a significant issue with the current practice of privacy control policies in SNSs like Facebook. The existing privacy settings do not provide users with adequate power to protect their privacy-sensitive information. Additionally, the system-defined policies enforced by an SNS are often not clearly described to users, leading to uncertainty about what to expect from the system. Users must either navigate help pages or observe system behavior to understand these policies. This lack of transparency allows SNSs to modify system-defined policies without users noticing, putting them at risk of privacy violations.

To address these privacy risks, we propose an approach to formally reason about the completeness of privacy control policies in SNSs. Our notion of completeness ensures that privacy control policies apply to every piece of information related to a user, allowing users to clearly understand how their information is protected. Most recent literature on policy analysis focuses on XACML policies, which are not suitable for representing complex policies in SNSs. Other works have focused on modeling access control policies for SNSs, but these models cannot consider the protection of complex privacy-sensitive resources. Recent research using Semantic Web technologies shows promise in capturing the complex and fine-grained access control policy requirements in SNSs. We use an ontology-based approach to model the information in SNSs, providing a more rigorous method for analyzing data constraints.

In this work, we propose a framework to formally reason about the completeness of privacy control policies in SNSs. To our knowledge, this is the first approach that can theoretically reason about missing policies and controls in SNSs. This systematic approach helps SNS users understand if their expectations about privacy control are met and assists developers in resolving these issues.

Our contributions include:
- A fine-grained ontology-based approach to model information in SNSs, including data integrity constraints.
- An approach to specify permissions in an ontology-based knowledge base, enabling reasoning about the completeness of privacy control policies and detecting missing policies.
- A case study analyzing Facebook’s privacy control policies, presenting findings on its completeness.

The rest of the paper is organized as follows. In Sections 2 and 3, we propose a fine-grained model of information in SNSs and an approach to specify privacy-sensitive permissions. In Section 4, we formally define our notion of completeness and show how our framework can analyze policies in an SNS. In Section 5, we demonstrate the applicability of our approach through a case study, and we conclude the paper in Section 6.

---

## 2. Modeling SNS Information

In this section, we propose a model of SNS information using OWL as our modeling language. We first discuss a generic information model for SNSs and then detail an ontology for Facebook. Similar ontologies can be developed for other SNSs.

### 2.1 Basic Concepts

We model SNS information as a set of users, digital objects, and data values, related by various relationships. In OWL terminology, we model users and digital objects as classes. Relationships between objects are captured using object properties, such as friendships, comments, and ownership. Class objects can be related to data values using data properties, such as the content of a photo. We model annotations as a special class of digital objects, which annotate one object with another. For example, a photo tag annotates a photo with a user. These concepts and relationship types form the minimum structure for an SNS and can be extended as needed.

Figure 1 depicts our proposed ontology for Facebook. Entity is the root class, specialized by User and DigitalObject. There is a predefined individual, `me`, for whom policy analysis is performed. The `isFriendOf` property expresses friendship, and data properties like `hasFullname` associate data values with users. The `owns` property defines a user as the owner of a digital object. DigitalObject is the union of Content, Wall, Event, and Annotation. Content represents objects with data content, such as photos or text. Wall and Event correspond to profile walls and events. Annotation represents objects that annotate a DigitalObject with an Entity, using `annotates` and `annotatesWith` properties. Subclasses of Annotation include Comment, UserTag, and WallPost.

### 2.2 Restrictions

Accurate modeling of data constraints in an SNS knowledge base is crucial for meaningful policy analysis. We employ the following OWL features to model these constraints:

- **Disjoint Union of Subclasses**: Each class is defined as a disjoint union of its subclasses. For example, Annotation is equivalent to the disjoint union of Comment, UserTag, and WallPost.
- **Property Domain/Range**: The domain and range of a property can be restricted to specific classes. For instance, `owns` has User and DigitalObject as its domain and range, respectively.
- **Property Characteristics**: OWL supports functional, inverse functional, transitive, symmetric, asymmetric, reflexive, and irreflexive properties. For example, `isFriendOf` is defined as irreflexive, meaning no user can be a friend of themselves.
- **Class Property Restriction**: OWL supports existential, universal, cardinality, and value constraints for properties when applied to a class. For example, WallPost is defined as a class that annotates exactly one Wall.

---

## 3. Modeling Privacy-Sensitive Permissions

For our analysis, we focus on capturing the fine-granularity of protected objects in an SNS rather than the expressive power of the SNS privacy settings in terms of characterizing access subjects.

### 3.1 Properties as Protected Resources

The ontology modeling approach captures SNS information in the form of classes and properties. We argue that an individual of a class does not represent any privacy-sensitive information unless its properties are considered. The essential knowledge is captured by the triples that represent properties between two individuals (object properties) or between an individual and a data value (data properties). These triples are considered privacy-sensitive information that needs protection.

Using the example ontology in Figure 2, assume Alice has a photo, and Bob has been tagged by Carol. By considering the object and data properties in this example as protected resources, we can control access to privacy-sensitive information. We assume a simple and effective policy authority scheme: the owners of the endpoints of each property are eligible to define policy for that property. For example, visibility of the tag can be controlled using the relationships `PhotoUserTag1 annotates Photo1` (by Alice or Carol) and `PhotoUserTag1 annotatesWith Bob` (by Bob or Carol). Carol can control revealing the fact that she created the tag by controlling `Carol owns PhotoUserTag1`. Finally, Alice can control the association of the actual binary content of the photo using the relationship `Photo1 hasContent IMG-DATA`. Various permissions can be specified for selection, insertion, and deletion actions on these resources.

### 3.2 Reification of Properties

To specify permissions, we need to characterize classes of relationships in an ontology based on certain restrictions. OWL does not support such expressions, so we use the concept of reification. We reify each object and data property in our SNS ontology as a class in OWL. Figure 3 depicts the policy ontology corresponding to the ontology presented in Section 2. Class `ReifiedProperty` is the root, with subclasses `ReifiedObjectProperty` and `ReifiedDataProperty`, which are the disjoint union of the corresponding reified property classes. We define special object properties, `ropSbj` and `ropObj`, that relate a reified object property to its subject and object, respectively. Analogously, `rdpSbj` and `rdpData` relate a reified data property to its subject and data value.

The reified property classes replace the SNS ontology properties, conforming to the information domain constraints. For example, if an object property `p` is functional, this characteristic can be ensured for its reified class `RPp` by the restriction: `owl:Thing ⊑ inverse ropSbj max 1 RPp`.

### 3.3 Representing Permissions

A permission can be represented by a set of protected resources and corresponding actions. The set of possible actions on a resource includes viewing, creating, or removing. We use the reified properties to specify these permissions, ensuring that the policies are both fine-grained and comprehensive.

---

This revised version aims to make the text more clear, coherent, and professional, while maintaining the original content and intent.