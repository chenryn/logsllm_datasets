title:Privacy settings in social networking systems: what you cannot control
author:Amirreza Masoumzadeh and
James Joshi
Privacy Settings in Social Networking Systems: What You
Cannot Control
Amirreza Masoumzadeh
School of Information Sciences
University of Pittsburgh
Pittsburgh, PA, USA
PI:EMAIL
James Joshi
School of Information Sciences
University of Pittsburgh
Pittsburgh, PA, USA
PI:EMAIL
ABSTRACT
In this paper, we propose a framework to formally analyze
what privacy-sensitive information is protected by the stated
policies of a Social Networking System (SNS), based on an
expression of ideal protection policies for a user. Our ontol-
ogy-based framework can capture complex and ﬁne-grained
privacy-sensitive information in SNSs, and ﬁnd out missing
policies, given a user’s ideal policies, and SNS’s privacy set-
tings and described system policies. We propose notions of
policy completeness for SNSs to facilitate such an analysis.
Our case study of using this approach on Facebook shows
that we can eﬀectively identify important missing policies.
Categories and Subject Descriptors
K.4.1 [COMPUTERS AND SOCIETY]: Public Policy
Issues—Privacy
Keywords
Social Networking Systems, Privacy Settings, Privacy Con-
trol Policies
1.
INTRODUCTION
In a typical Social Networking System (SNS) such as Face-
book, there exist several privacy settings that can be con-
ﬁgured by a user in order to control others’ access to the
information related to her. These settings are in fact equiv-
alent to access control policies that are expressed by the
users for the respective digital objects. Such privacy set-
tings are by no means complete in the sense that they do
not control access to all the potentially privacy-sensitive in-
formation about a user. That is the case even for Facebook,
which has fairly the most extensive set of privacy settings
among SNSs. Access to the rest of the information related
to the user is governed by a set of ﬁxed rules set by the SNS
itself. We call these system deﬁned policies and the user-con-
ﬁgurable privacy settings together as privacy control policies
in an SNS.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
There is a major issue with the current practice of pri-
vacy control policies in SNSs such as Facebook. The cur-
rent privacy settings do not provide users with adequate
power to protect their privacy-sensitive information. More-
over, the system deﬁned policies enforced by an SNS are not
clearly described to the users. Therefore, users are unsure
about what to expect from the system. Users need to learn
about them either by harvesting help pages in the SNS or
by observing the system’s behavior. Worse is that, since the
system deﬁned policies are not well documented, SNSs can
modify them without users noticing it and put them at great
risk of privacy violations.
In order to identify the privacy risks users are dealing
with in such an abovementioned ecosystem, we propose an
approach to formally reason about completeness of privacy
control policies in SNSs. Our notion of completeness en-
sures that privacy control policies are applicable to every
piece of information related to a user. Therefore, the user
can clearly expect to know that how her information is pro-
tected. Most of the recent literature on policy analysis fo-
cuses on XACML policies [5, 6], which are not suitable for
representing complex policies in SNSs such as “Who can see
posts you’ve been tagged in on your timeline? ”. A separate
body of literature has focused on modeling access control
policies for SNSs. Most of those models formalize speciﬁ-
cation of access subjects based on the type and distance of
their relationships to an object’s owner [2, 3]. However, such
models cannot consider protection of complex privacy-sensi-
tive resources in SNSs as required for our analysis purpose.
A few recent works approach the access control modeling
problem in SNSs by using Semantic Web technologies [1,
7, 8], which shows great promise in capturing the complex
and ﬁne-grained access control policy requirements in these
systems. Like in [7, 8] we approach this issue by model-
ing the information contained in an SNS using an ontology.
However, we employ a more rigorous approach with regards
to modeling data constraints in SNSs, as they are vital to
provide sound analysis of privacy control policies.
In this work, we propose a framework to formally reason
about the completeness of privacy control policies in an SNS.
To the best of our knowledge, we provide the ﬁrst of its
kind policy analysis approach for SNSs that can theoretically
reason about the missing pieces of policies and controls in
SNSs. Such a systematic approach can tell the SNS users if
their expectations about privacy control (or system deﬁned
policies in place) is provided by an SNS, and ultimately help
the developers of such systems to resolve these issues.
In
summary, we make the following contributions:
• We propose a ﬁne-grained ontology-based approach to
model information in SNSs, including data integrity
constraints, that are necessary for the reasoning tasks
in our framework.
• We present an approach to specify permissions in such
an ontology-based knowledge base, using which we rea-
son about completeness of privacy control policies pro-
vided by an SNS, and detect missing policies.
• Using our framework, we analyze Facebook’s privacy
control policies as a case-study, and present our ﬁnd-
ings with regards to its completeness.
The rest of the paper is organized as follows. We propose a
ﬁne-grained model of information in SNSs, and an approach
to specify privacy-sensitive permissions in these systems in
Sections 2 and 3, respectively.
In Section 4, we formally
deﬁne our notion of completeness, and show how our frame-
work can analyze policies in an SNS based on that. In Sec-
tion 5, we demonstrate the applicability of our approach by
providing a case study, and conclude the paper in Section 6.
2. MODELING SNS INFORMATION
In this section, we propose a model of SNS information
using OWL [4] as our modeling language. We ﬁrst discuss
a generic information model for SNSs and then explain in
more detail an ontology for Facebook. Clearly, a similar
ontology can be developed for other SNSs.
2.1 Basic Concepts
We model SNS information as a set of users, digital ob-
jects, and data values, which are related to each other by
relationships. In OWL terminology, we model the ﬁrst two
concepts using classes as abstract objects. The relation-
ships between objects are captured using the following object
properties: between users to deﬁne the social network (e.g.,
friendship, following, etc.), between digital objects (e.g., a
comment that is related to a photo), or between users and
digital objects (e.g., a user may own a photo). Moreover,
class objects can be related to data values using data prop-
erties, e.g., the relationship between a photo and its binary
content. We model annotations as a special class of digital
objects. Annotations are objects that annotates one object
with another object. Comments and photo tags are two
common ways of annotation. For instance, a photo tag can
annotate a photo with a user. As another example, a check-
in in Foursquare is an annotation that annotates a venue
(place) with a user, which may also be associated with a
time stamp. These are the minimum concepts and relation-
ship types that we capture for an SNS; they can be easily
extended depending on the needs of an SNS.
Figure 1 depicts our proposed ontology for Facebook. Note
that many details, especially restrictions, are not captured
in the ﬁgure or in the following description. Entity is the
root class to our ontology (a subclass of owl:Thing, which is
OWL’s built-in most general class). It is specialized by User
and DigitalObject. There is a predeﬁned individual in class
User, i.e., me, for whom policy analysis is performed. The
isFriendOf object property expresses friendship relationship
between instances of User. Data properties such as has-
Fullname associate data values to a User. The owns object
property deﬁnes a User as the owner of a DigitalObject. Dig-
italObject is the union of four major subclasses: Content,
Wall, Event, and Annotation. Content represents an object
that has data content such as a photo or a text (speciﬁed us-
ing hasContent data property). Classes Wall and Event corre-
spond to proﬁle wall page and events that users can attend
in Facebook. Annotation, as mentioned before, represents
objects that instead of directly carrying content, annotate a
DigitalObject (e.g., a wall or a photo) with an Entity (e.g.,
a wallpost or a comment), using object properties annotates
and annotatesWith, respectively. Actual forms of annota-
tions are deﬁned as its subclasses: Comment, UserTag, and
WallPost. A Comment annotates a Commentable (a class
which is the union of Photo and WallPost) with a Text. A
UserTag annotates a UserTaggable (a class which is the union
of Photo and Text) with a User.
2.2 Restrictions
It is crucial to accurately model the data constraints in an
SNS knowledge base, in order to facilitate meaningful pol-
icy analysis. Any inaccuracy will result in false positives/
negatives in our analysis. We employ the following restric-
tion features in OWL to model such data constraints:
Disjoint Union of Subclasses: We ensure our class
hierarchy is captured completely by deﬁning each class as
disjoint union of its subclasses, i.e., union of subclasses which
are pair-wise disjoint. For instance, Annotation is equivalent
to the disjoint union of Comment, UserTag, and WallPost.
Property Domain/Range: The domain and range of a
property can be restricted to speciﬁc classes, e.g., owns has
User and DigitalObject as its domain and range, respectively.
Property Characteristics: OWL supports several re-
strictions to accurately model property constraints:
func-
tional, inverse functional (i.e., the inverse of the relation is a
function), transitive, symmetric, asymmetric, reﬂexive, and
irreﬂexive. For instance, isFriendOf is deﬁned as irreﬂexive;
hence, no user can be a friend of herself.
Class Property Restriction: OWL supports existen-
tial, universal, cardinality, and value constraints for proper-
ties when applied to a class. For instance, WallPost is deﬁned
equivalent to a class that annotates exactly one Wall.
3. MODELING PRIVACY-SENSITIVE PER-
MISSIONS
For our analysis purpose, we do not aim at analyzing
the expressive power of the SNS privacy settings in terms
of characterizing the access subjects. Instead, we focus on
capturing the ﬁne-granularity of the protected objects in an
SNS, as described in this section.
3.1 Properties as Protected Resources
The ontology modeling approach proposed in Section 2
captures SNS information in the forms of classes and prop-
erties. We argue that an individual of a class does not repre-
sent any privacy-sensitive information unless its properties
are considered. In other words, the essential knowledge is
captured by the triples that represent properties between
two individuals (object properties), or between an individ-
ual and a data value (data properties). Based on this ob-
servation, we consider such triples as privacy-sensitive infor-
mation that needs to be protected.
We elaborate on this further using the example ontology
in Figure 2. Assume Alice has a photo, in which Bob has
been tagged by Carol: Alice owns Photo1, and Carol owns
PhotoUserTag1 which annotates Photo1 with Bob. By con-
Binary 
Entity 
String 
hasFullname 
isFriendOf 
hasContent 
annotates 
DigitalObject 
owns 
User 
Annotation 
Wall 
Content 
Event 
Commentable 
UserTaggable 
Likable 
UserTag 
annotates 
annotates 
annotatesWith 
TextUserTag 
PhotoUserTag 
Comment 
WallPost 
Photo 
Text 
attends 
likes 
me 
subclass of 
Instance of 
Object Property 
Data Property 
Class 
Individual 
Datatype 
annotatesWith 
annotatesWith 
Figure 1: A Model of Concepts and Properties for Facebook
IMG DATA 
Alice 
Bob 
hasContent 
owns 
annotatesWith 
Carol 
Photo1 
annotates 
PhotoUserTag1 
owns 
Figure 2: A PhotoUserTag Example
sidering the object and data properties in this example as
protected resources, we can control the access to privacy-sen-
sitive information. We assume a simple and eﬀective policy
authority scheme: the owners of the endpoints of each prop-
erty are eligible to deﬁne policy for that property. There-
fore, for instance, visibility of the tag can be controlled using
relationships PhotoUserTag1 annotates Photo1 (by Alice or
Carol) and PhotoUserTag1 annotatesWith Bob (by Bob or
Carol). Carol can control revealing the fact that she has
created this tag by controlling Carol owns PhotoUserTag1.
Finally, Alice can control the association of the actual bi-
nary content of the photo using relationship Photo1 hasCon-
tent IMG-DATA. Various permissions can be speciﬁed with
respect to the three basic possible actions on these resources:
selection, insertion, and deletion. For example, the insertion
of a tag can be controlled in a similar fashion.
3.2 Reiﬁcation of Properties
In order to specify permissions, we need to characterize
classes of relationships in an ontology based on certain re-
strictions. However, OWL does not support such expres-
sions about relationships. We use the concept of reiﬁcation
to overcome this limitation. We reify each object/data prop-
erty in our SNS ontology as a class in OWL. Figure 3 depicts
the policy ontology corresponding to the ontology presented
in Section 2. Class ReiﬁedProperty is the root to all such
classes, with the two subclasses ReiﬁedObjectProperty and
ReiﬁedDataProperty, which are the disjoint union of the cor-
responding reiﬁed property classes. We deﬁne two special
object properties, ropSbj and ropObj, that relate a reiﬁed
object property to its subject and object, respectively. Anal-
ogously, the special object and data properties rdpSbj and
rdpData relate a reiﬁed data property to its subject and data
value, respectively.
The reiﬁed property classes will essentially replace SNS
ontology properties that were described in Section 2. There-
fore, they must conform to the information domain con-
straints that we considered in designing the ontology. We
demonstrate with an example how a property restriction pre-
sented in 2.2 can be translated for reiﬁed properties. Let p
be an object property in the SNS ontology, and RPp be its
corresponding reiﬁed class.
If p is a functional property,
such a characteristic can be ensured for RPp by the follow-
ing restriction: owl:Thing ⊑ inverse ropSbj max 1 RPp.
3.3 Representing Permissions
A permission can be represented by a set of protected
resources and corresponding action(s). The set of possible
actions on a resource include viewing, creating, or remov-