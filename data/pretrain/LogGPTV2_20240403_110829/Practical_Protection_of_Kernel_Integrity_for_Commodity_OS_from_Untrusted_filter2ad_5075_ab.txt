trusted extensions, and the user space, respectively. The
state transition events include inter-subject function calls,
various types of jump, interrupt handling, preemptions, sys-
tem calls and associated returns from these routines. Medi-
ating these events is essential to guarantee comprehensive
control ﬂow integrity, which we further discuss in Section
4.5. Tracking the state transition is mainly achieved by the
Subject Category / Protection State
Object Label
Trusted Entry Points
Other OS Code
OS Data
Trusted Extension
Untrusted Extension
Private Stack Frames
Other Stack Frames
Trusted DMA
Shared DMA
User Space Content
OS Kernel
Write
Execute
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
audit allow
audit allow
deny
deny
allow
allow
audit allow
Read
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
Trusted Extensions
Execute
Write
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
audit allow
audit allow
audit allow
allow
audit allow
deny
deny
audit allow
allow
audit allow
Read
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
Untrusted Extensions
Execute
Write
Read
allow
allow
allow
allow
allow
allow
allow
allow
allow
allow
deny
deny
deny
deny
allow
allow
deny
deny
allow
allow
audit allow
deny
deny
deny
allow
deny
deny
deny
allow
deny
Table 1. A sample MAC policy for preventing extensions from writing to kernel or executing unau-
thorized kernel code. The shaded cells indicate the corresponding events are mediated by the VMM
and involve privilege transitions. Other events do not cause privilege transitions in HUKO. The write
operation includes both normal write and DMA write. The not-listed “user" protection state is simply
conﬁgured to deny any write to the kernel space.
isolation mechanism in HUKO, which we describe in Sec-
tion 4.3.
Transparent Isolation. As we stated above, HUKO
should have the ability to (1) distinguish the current subject
in the guest context, (2) track all state transition events, (3)
support different access control policies for different subject
categories, and (4) mediate data modiﬁcation ﬂows and con-
trol ﬂows between subject categories. Achieving these is
non-trivial for commodity monolithic-kernel operating sys-
tems (e.g., Linux and Windows) since the OS kernel and its
extensions reside within the same address space, and it is
even more challenging especially considering our two de-
sign principles: external approach and good performance.
To tackle this challenge, we design an isolation compo-
nent in HUKO’s VMM to transparently isolate the exten-
sions from the OS kernel. The isolation mechanism lever-
ages hardware-assisted paging (HAP), which is a hardware-
based virtualization technique supported by many modern
processors.
In our scheme, the enhanced memory virtu-
alization component in HUKO’s VMM maintains separate
sets of HAP tables for each protection state in the system.
These sets of HAP tables are synchronized with each other
so that their corresponding entries are mapped to the same
machine frame. Moreover, regarding security-sensitive ob-
jects, different HAP tables are reﬂecting different access
rights according to the subject category and mandatory ac-
cess control policies. Switching between these HAP tables
is swift because it only involves a change to the HAP base
pointer. In addition, HUKO signiﬁcantly reduces the num-
ber of TLB ﬂushes involved in each HAP table switch by
utilizing Intel’s Virtual-Processor Identiﬁers (VPIDs) tech-
nology. The multiple HAP table design renders efﬁcient
and practical isolation between the OS kernel and exten-
sions, and it enforces separate access control policies for
each type of subject accessing various kernel objects such
as dynamic data structures, I/O buffers and kernel functions.
Regarding kernel stack integrity, HUKO leverages the mul-
tiple HAP tables to achieve a VMM-level private stack with
lazy synchronization mechanism to offer a transparent and
efﬁcient stack separation, which we discuss in Section 4.4.
Object Labeling.
In mandatory protection systems, ob-
jects are labeled indicating their security properties to fa-
cilitate mediation. HUKO does object labeling in order to
let the VMM identify security sensitive objects in the ker-
nel. The labeling procedure is at the page granularity in
the way that the labeling component assigns labels to the
speciﬁc physical pages that contain security sensitive ob-
jects. There are two reasons for this. First, according to
our design principles, HUKO is intended to rely on as little
semantic knowledge of operating system as possible. Sec-
ond, for a hypervisor-based approach, ﬁne-grained dynamic
object tracking in kernel often introduces too much recon-
struction and tracking overhead, which is not practical for
an online protection system. On the other hand, to ame-
liorate problems caused by the protection granularity gap,
HUKO has mixed page labeling mechanism for handling
pages that contain mixed code and data, as well as pages
that are shared by both kernel and extensions.
Another issue is about how to track dynamic data for
both kernel and extensions. To address this, HUKO inserts
a trusted driver (labeled as a trusted extension) into the op-
erating system to notify the hypervisor about the allocation
and reclamation of the kernel memory. The driver is also
aware of the owner subject of each page and reports updates
to the hypervisor during runtime. We further discuss mixed
page handling and dynamic content tracking in Section 4.2.
Protection Workﬂow. Table 1 shows a sample protection
policy that regulates the data accesses as well as code ex-
ecutions of untrusted extensions.
In this policy, the pol-
icy maker needs to specify a set of kernel functions as the
trusted entry points.
In practice, trusted entry points can
be exported functions in the kernel symbol table or picked
speciﬁcally by the system administrator. To preserve con-
trol ﬂow integrity, besides kernel function calls, kernel pre-
emption and return instructions should also be considered,
which we will discuss in Section 4.5. In addition, this policy
also prevents untrusted extensions from directly writing to
the OS kernel or any trusted extensions, no matter the write
is performed via memory instructions or DMA transfers.
HUKO enforces mandatory access control over the en-
tire life period of any untrusted extension. To achieve this,
HUKO tracks the lifetime of an extension by hooking the
extension allocation, loading and unlinking routine of the
kernel. These events will be trapped to the hypervisor and
the labeling component will manipulate the corresponding
page labels to perform dynamic tracking. Unless speci-
ﬁed by the administrator, HUKO labels all newly loaded
extensions as untrusted. During the protection process, if
any event that violates the access control policy happens,
HUKO will trigger a protection alarm from the hypervisor
and provide essential information (e.g., type of policy viola-
tion and the execution context) to the system administrator
for making proper security decisions.
4 Architecture Design and Implementation
Figure 2 provides the overview of the HUKO Architec-
ture. There are four major components corresponding to
principle functionalities in HUKO’s design: object label-
ing, transparent isolation, stack integrity protection, as well
as mediation and enforcement. In the following subsections
we ﬁrst provide a brief background on Hardware-Assisted
Paging (HAP) technology used in our prototype. Then we
discuss each major component in detail. In Section 4.6, we
brieﬂy describe the implementation of HUKO prototype on
the Xen hypervisor.
4.1 Hardware-Assisted Paging Overview
To achieve memory virtualization, a common design for
VMMs is to load shadow page tables (SPT) into the hard-
ware MMU, which translate from guest linear addresses
(GLA) to machine-physical addresses (MPA). However,
to maintain this indirect mapping,
the hypervisor must
intercept and do SPT synchronization upon guest CR3
switches and each update of the guest page table (GPT). The
hardware-assisted paging (HAP) technology is introduced
to avoid the software overhead incurred under shadow pag-
ing. One implementation of HAP is Intel’s Extended page
tables (EPT) technology [4]. When this feature is turned on,
the ordinary IA-32 page tables (referenced by control reg-
ister CR3) translate from GLA to guest-physical addresses
(GPA). In addition, the hardware MMU maintains a sepa-
rate set of page tables (the EPT tables) which translate from
guest-physical addresses (GPA) to the machine-physical ad-
dresses (MPA) that are used to access machine memory. As
a result, guest OS can be allowed to modify its own IA-32
page tables and directly handle page faults. This allows a
VMM to avoid the VMEXITs associated with shadow pag-
ing, which are a major source of virtualization overhead.
The reason why HUKO is built atop hardware assisted
paging rather than the software-based shadow paging mech-
anism is two fold. The ﬁrst reason is for better performance,
which we just stated. Secondly, in SPT, access rights in SPT
entries are synchronized with the corresponding GPT en-
tries. Hence, changing the access rights in SPT entries for
our protection purpose may potentially affect the correct-
ness of guest OS for handling its own access rights. By con-
trast, in HAP, access rights in HAP entries and access rights
in GPT entries are two completely different sets. Moreover,
the HAP violation handling is transparently separated from
the page fault handling mechanism of the guest OS, which
makes it more ﬂexible and easier to guarantee correctness.
4.2 Object Labeling
As shown in Table 1, in order to enforce the MAC policy,
HUKO assigns various kinds of security labels to different
kernel objects. The object labeling component is responsi-
ble for identifying kernel objects from the physical mem-
ory and managing security properties of these objects. As
stated in Section 3.2, based on our design principles, HUKO
directly associates object labels to the corresponding HAP
entries. In speciﬁc, the labeling component makes use of a
set of reserved bits in EPT entries. These reserved bits are
never utilized by default so that changing these bits does not
affect the hypervisor’s functionalities. By encoding labels
using these bits, HUKO currently can support 32 different
potential object labels, providing ﬂexibility and extendabil-
ity to the protection scheme. This mechanism also reduces
the time and memory space involved in every mediation and
authorization action.
Handling Mixed Pages.
In a commodity operating sys-
tem kernel such as Linux, memory regions for kernel code,
User Space
Kernel Space
Trusted
extensions
Labeling
helper
HUKO VMM
Labeling Component
saved
env. / 
regs
HAP
Violations
Mediation and 
Enforcement
Component
return 
addr.
stack
private
kernel
stack
MAC
Policies
Exceptions
Hardware
Figure 2. Overview of the HUKO Architecture.
kernel data and extensions are usually page aligned, which
facilitates the labeling procedure in HUKO. However, there
are still existences of mixed pages in which different objects
co-exist together. To ensure comprehensiveness and cor-
rectness of the protection, the labeling component must be
able to track objects within two categories of mixed pages:
(1) pages containing both kernel code and kernel data, and
(2) pages containing both the kernel and extensions.
A major type of mixed pages in the kernel is large sized
page (e.g., 2MB superpage). In most cases, different ob-
jects reside in the same superpage, yet their boundaries are
still aligned to the 4KB address regions. Based on this ob-
servation, given a large mixed page, HUKO splits the cor-
responding EPT superpage entry into multiple subpage en-
tries (e.g., 2MB page entry to 512 4KB sub-entries) and
assigns individual object labels to each subpage. Splitting
EPT superpage entries improves the granularity of labeling
and eliminates a majority of mixed page problems without
changing the guest page table (GPT) entries. On the other
hand, regarding mixed pages of 4KB size, HUKO assigns
each of them with a mixed label. For example, considering
a mixed page that has a mixed label of both kernel data and
extension code, the hypervisor would trap all events that
modify this page regardless of the current protection state.
Then HUKO examines the physical address to see if it is in
the range of extension text area and ﬁnally determines the
object identity.
Tracking Dynamic Contents. Associating kernel objects
to HAP page frames requires dynamically tracking of these
objects. For static objects such as kernel code, static kernel
data (including global variables), and trusted entry points,
HUKO tracks them by leveraging the kernel symbol table
(e.g., Systemmap ﬁle in Linux). On the other hand, for
dynamic contents such as dynamic kernel data, stack and
heap region, and loadable extensions, it is difﬁcult and time
consuming to track them at the hypervisor layer because of
the semantic gap. HUKO tackles this problem by loading a
trusted extension named labeling helper into the guest ker-
nel. The labeling helper is responsible for letting the hyper-
visor be aware of the allocation and deallocation of kernel
dynamic pages as well as the owner subject of each kernel
page. This component is the only OS-dependent part in our
system and we implemented a prototype in Linux. Speciﬁ-
cally, dynamic data owned by an extension come from two
major sources in Linux: (1) the page frame allocator for
allocating bulk of pages, and (2) the SLAB allocator for al-
locating ﬁxed sized of registered cache objects. For both
cases, the labeling helper hooks the allocation and deallo-
cation events and gathers information from the SLAB allo-
cator (i.e., kmem cache alloc), the free page allocator,
and the load module routine. This information includes
owner subject of the page (e.g., OS kernel or extension), the
content type (e.g., kernel data or extension code), the guest
page frame number, the virtual address range (for handling
mixed pages), and the timestamp of each event. Then the
labeling helper passes these information to HUKO via the
hypercall interface, and the labeling component labels the
corresponding EPT entries accordingly. To guarantee tam-
perproof, the labeling helper itself is labeled as a trusted
extension at the load time so that it is protected by HUKO.
Furthermore, HUKO prohibits read accesses to the labeling
helper to prevent the leakage of protection information.
4.3
Isolation Component
The isolation component in HUKO is responsible for
achieving complete mediation by establishing separate ad-
dress spaces for different categories of subjects (i.e., the OS
kernel, trusted extensions and untrusted extensions) to re-