I assumed `macroexpand` is supposed to produce the same code whether or not if
it expands all the macros at once or sequentially expands macros with
`recursive = false` option.
Here is a MRE where `macroexpand(m, ex; recursive = true)` produces valid code
while sequential application of `macroexpand(m, ex; recursive = false)` leads
to different code (and invalid code as a consequence).
    using Test
    ex = :(@test_warn "foo" println(stderr::IO, "foo"))
    fully_expanded = macroexpand(@__MODULE__, ex)
    Core.eval(@__MODULE__, fully_expanded) # runs w/o any problem
    partially_expanded = macroexpand(@__MODULE__, ex; recursive = false)                  # expand `@test_warn`
    partially_expanded2 = macroexpand(@__MODULE__, partially_expanded; recursive = false) # expand `@test`
    Core.eval(@__MODULE__, partially_expanded2) # leads to syntax error
    Core.eval(@__MODULE__, partially_expanded)  # this also leads to syntax error