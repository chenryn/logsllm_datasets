ets to calculate the credibility coefficient α. Therefore, adversaries
can bypass our detection algorithm by increasing the number of
packets to disguise the cryptomining flow as a high-frequency noise.
However, expanding packets also consumes more bandwidth of
the proxy server controlled by the adversary. We evaluate the im-
pact of packet amplification on the performance of the algorithm
(ti = 2h, threshold = 0.6), as shown in Fig. 15. When packet ampli-
fication is less than 10 times, precision of the algorithm does not
decline significantly, and recall of the algorithm gradually drops to
60%. This is because the credibility coefficient α of some interval
with a small length is rapidly reduced due to packets amplification,
Figure 16: Running time of
the algorithm
Figure 17: Similarities of dif-
ferent cryptocurrencies
which results in that these intervals cannot be effectively detected.
However, since cryptomining is a long-term communication be-
havior, it can still be covered by multiple detections in the time
dimension under the premise of high precision. Therefore, the al-
gorithm can effectively combat packet amplification by 10 times.
When the packet amplification exceeds 10 times, the performance
of our algorithm will be greatly reduced.
4.6 Efficiency Evaluation
In this section, we evaluate the operating efficiency of the algo-
rithm (Challenge 4). We implement the detection algorithm on an
ordinary server (CPU: 2.1 GHz Intel Xeon Silver 4110, Memory:
64GB DDR4) through java language. The running time evaluation
result of the algorithm is shown in Fig. 16. The running time of
the algorithm increases linearly with the increase of the number
of input packets, which means that the processing speed of the
algorithm is stable, about 350,000 pps. According to the average
packet length of 1000 bytes, the algorithm on an ordinary server
can afford a 2.8 Gbit/s link. Furthermore, because the algorithm
is based on the detection of each flow, the algorithm can realize
parallel processing by configuring the flow hash algorithm on the
collection switch.
4.7 Scalability
In this section, we evaluate the performance of MineHunter in the
scenarios of different cryptocurrencies and websites with embed-
ded cryptomining scripts to verify the scalability of the algorithm.
According to the latest measurement results [25], Monero is the
most discussed cryptocurrency in underground forums. Others
include Bitcoin, Zcash, Litecoin, and Ethereum. We select three
02468101214161820Delay (Second)01020304050Loss (Percent)02468101214161820Delay (Second)0.00.20.40.60.81.0PrecisionRecallF1-score02468101214161820Packet amplification times0.00.20.40.60.81.0PrecisionRecallF1-score020406080100120Number of packets (×107)06001200180024003000Time (Second)2101826344250Hour0.00.20.40.60.81.0SimilarityBitcoinLitecoinZcash1059ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Shize Zhang, Zhiliang Wang, Jiahai Yang, Xin Cheng, Xiaoqian Ma, Hui Zhang, Bo Wang, Zimu Li, and Jianping Wu
Table 3: The evaluation results of mining service.
Mining Service
CryptoLoot[6]
Crypto Webminer[7]
Monerominer.rock[22] Masari
Cryptocurrency Protocol Proxy IP
Uplexa
Sumokoin
TLSv1.2
TLSv1.2
TLSv1.2
45.79.218.212
185.163.119.151
157.230.173.68
Similarity
0.80
0.78
0.93
cryptocurrencies (Bitcoin, Zcash, and Litecoin) for evaluation ex-
cept for Ethereum. This is because Ethereum has high hardware
requirements for the mining host (it must have a graphics card
with more than 4GB of video memory). It is difficult to run on
ordinary hosts, which is not conducive to cryptojacking. We col-
lect Bitcoin traffic from ViaBTC mining pool [34]; Litecoin traffic
from f2pool mining pool [8]; Zcash traffic from coinMine.pl [5],
lasting about two days. Meanwhile, we separately join the p2p net-
work of three currencies to obtain the block creation time series.
We set the same parameters as the Monero detection algorithm,
ti = 2h, threshold = 0.6. We also divide multiple detection cases
according to the time dimension, which is the same as the Monero
detection evaluation. The detection results are shown in Fig. 17.
The minimum detection similarity of the three cryptocurrencies
is higher than 0.7 at different time, which shows that MineHunter
can be effectively applied to different types of cryptocurrencies.
Moreover, because the detection of each currency is independent
of each other, network administrators can configure the detection
of multiple currencies at the same time.
To evaluate whether MineHunter can detect websites with em-
bedded mining code from the perspective of network traffic, we
build a web server and respectively run the 3 popular mining ser-
vices found in the previous studies [2][18]. We use a client browser
to access these mining services to respectively capture the traffic
within 2 hours. We set the same parameters as the Monero detection
algorithm, ti = 2h, threshold = 0.6, and the detection results are
shown in Table 3. It can be seen that the similarities of different
cryptocurrencies are higher than the threshold, which shows that
all of these mining services can be effectively detected by Mine-
Hunter. Furthermore, these mining services all use the TLSv1.2
protocol for encrypted communication to avoid payload detection
algorithms. In addition, we query these proxy IPs in the AbuseIPDB
[1]. Only 45.79.218.212 was recorded in the database in May 2019.
However, the credibility of abuse is still 0%. 185.163.119.151 and
157.230.173.68 do not appear in the abuse database, and these IPs
are all used by third-party service providers, which can be eas-
ily changed. Therefore, it can be seen that the blacklist method is
difficult to effectively detect these proxy IPs.
5 LIMITATIONS AND DISCUSSIONS
It can be seen from the analysis in Section 4.3 that the input se-
quence requires a certain length of time. The evaluation result
shows that the detection time of 2 hours is a suitable parameter.
Therefore, MineHunter cannot detect immediately when the cryp-
tomining behavior occurs, and the input sequence needs to be
accumulated for a period of time. However, the profits of crypto-
mining are proportional to mining time, and cryptomining is a
long-term communication behavior. MineHunter can effectively
detect the mining sequence but with a little delay.
MineHunter requires that the packets in a flow are complete
without sampling. However, MineHunter does not require the pay-
load of packets and only needs the timestamp in packet header,
which means only 4 bytes need to be stored in memory per packet.
For example, storing 120 minutes of full packet just including the
timestamp of packet header for a 10 Gbit/s link only needs about
36 GB memory space, which is not a harsh restriction.
The evaluation in Section 4.5.1 and 4.5.2 shows that the algo-
rithm has considerable adversarial capabilities under "white box"
conditions. However, adversaries can still bypass our algorithm by
losing some profits. This is one of the limitations of our method.
We will take these two countermeasures as our future work.
6 RELATED WORK
The research on cryptojacking detection is divided into two types:
mining JavaScript detection in webpage and mining malware de-
tection on the host. At present, a large number of research works
focus on the detection of web mining scripts. Rüth et al. conducted
a large-scale measurement analysis of the mining tools on the web-
page [28]. The analysis showed that the most common mining tool,
coinhive, contributed nearly 1.18% of Monero.
Konoth et al. proposed a new detection tool Minesweeper, which
identifies whether a website contains mining code [18]. Minesweeper
analyzes the features of JavaScript code from common web mining
tools (like coinhive, crpytoNoter, NFWebMiner) and functions in
the wasm module containing cryptographic operations (as reflected
by XOR, shift, and rotate operations). Minesweeper can be deployed
as a plug-in in the browser. Similarly, Hong et al. proposed CM-
Tracker, a behavioral analysis-based detector used to detect mining
JavaScript and related domain names [15]. The CMTracker mainly
utilizes the mining behavior to require a large number of powers
to calculate the hash value and the characteristics of the periodic
execution of the mining script. However, the deployment of these
tools requires authorization from browser vendors or users.
Pastrana et al. focused on the development of cryptomining
malware on the host [25]. The analysis showed that these malware
generated millions of earning, and nearly 4.3% of Monero was
generated by malware-controlled hosts. Soviany S et al. proposed
a machine learning-based approach to detect Android malicious
mining software, which uses a layered detector to detect Android
malware including malicious mining software [32]. This detection
method can only be used for some known malware detection and
is also ineffective for some variants of known malware. Gangwal
et al. leveraged magnetic side-channel to detect cryptomining [10].
This approach is limited by the physical environment and difficult
to deploy on large enterprises.
Maurantonio C et al. first try to use machine learning-based
algorithms to detect mining traffic [4]. They use the interarrival
time and packet size as features to train a random forest model.
The algorithm has achieved good results on the balanced dataset.
However, in the actual large-scale unbalanced data scenario, the
algorithm has apparent limitations.
7 CONCLUSION
In this work, we associate the network flow sequence of crypto-
mining with the block creation sequence of the cryptocurrency
1060MineHunter: A Practical Cryptomining Traffic Detection Algorithm Based on Time Series Tracking
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
and propose MineHunter, a practical cryptomining traffic detection
algorithm, which can be deployed at the entrance of enterprise
or campus networks. Our algorithm has attempted to solve the
four core challenges faced in the actual network environment, in-
cluding extremely unbalanced datasets, controllable alarms, traffic
confusion, and efficiency.
ACKNOWLEDGMENTS
This work is supported by the National Key Research and Develop-
ment Program of China under Grant No.2018YFB1800204.
zec/index.php
REFERENCES
[1] AbuseIPDB. 2021. AbuseIPDB. https://www.abuseipdb.com/
[2] Hugo LJ Bijmans, Tim M Booij, and Christian Doerr. 2019. Inadvertently Making
Cyber Criminals Rich: A Comprehensive Study of Cryptojacking Campaigns at
Internet Scale. In 28th {USENIX} Security Symposium ({USENIX} Security 19).
1627–1644.
[3] Hugo LJ Bijmans, Tim M Booij, and Christian Doerr. 2019. Just the Tip of the
Iceberg: Internet-Scale Exploitation of Routers for Cryptojacking. In Proceedings
of the 2019 ACM SIGSAC Conference on Computer and Communications Security.
ACM, London United Kingdom, 449–464.
[4] Maurantonio Caprolu, Simone Raponi, Gabriele Oligeri, and Roberto Di Pietro.
2020. Cryptomining Makes Noise: a Machine Learning Approach for Cryptojack-
ing Detection. arXiv:1910.09272 [cs.CR]
[5] CoinMine.pl. 2016. Zcash ANONYMOUS MINING. https://www2.coinmine.pl/
[6] Crypto-loot.org. 2018. Cryptoloot. https://crypto-loot.org/
[7] Crypto-webminer.com. 2021. Crypto Webminer - Mining in your Browser with
Webmining technology. https://www.crypto-webminer.com/
[8] F2pool.com. 2021. F2pool mining pool. https://www.f2pool.com/
[9] JAKE FRANKENFIELD. 2020. Merkle Root(Cryptocurrency). https://www.inve
stopedia.com/terms/m/merkle-root-cryptocurrency.asp
[10] A. Gangwal and M. Conti. 2020. Cryptomining Cannot Change Its Spots:
IEEE Trans-
https:
Detecting Covert Cryptomining Using Magnetic Side-Channel.
actions on Information Forensics and Security 15 (2020), 1630–1639.
//doi.org/10.1109/TIFS.2019.2945171
[11] Moses Garuba, Chunmei Liu, and Alicia Washington. 2008. A Comparative Anal-
ysis of Anti-Malware Software, Patch Management, and Host-Based Firewalls