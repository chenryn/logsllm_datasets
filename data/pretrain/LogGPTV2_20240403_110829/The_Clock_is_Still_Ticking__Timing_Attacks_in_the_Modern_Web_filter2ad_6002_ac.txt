needs to be parsed, thus exposing a timing side-channel.
In comparison to parsing a resource as a video, the speed
by which scripts are parsed, is signiﬁcantly higher. As a re-
sult, it becomes impractical to measure this for smaller ﬁles,
even with the High Resolution Time API. However, most
modern browsers (with the exception of Firefox) use an op-
2The Cache API allows any resource to be stored, even if the
no-store directive is present in the Cache-Control header
3When the value of the X-Content-Type-Options header is
set to nosniff, Chrome and Internet Explorer will not parse
nor execute the ﬁle as a script
1386
window . onerror = f u n c t i o n () {
var d = p e r f o r m a n c e . now () - window . start ;
console . log ( ' parsing done ' , d )
}
var s = d o c u m e n t . c r e a t e E l e m e n t ( ' script ' ) ;
d o c u m e n t . body . a p p e n d C h i l d ( s );
s . onload = f u n c t i o n () {
console . log ( ' script downloaded ' ) ;
window . start = p e r f o r m a n c e . now ();

}
s . src = ' http :// example . com / resource ' ;


Listing 3: Script parsing example
timization that when the same resource is requested multiple
times within a short time interval, only a single request is
made. Consequently, this optimization can be used to force
the browser to parse a script multiple times requiring only a
single GET request. To obtain a measurement, we ﬁrst cre-
ate a number of script elements, register an event listener
for the load event on each element, and add them all to the
DOM. Next, we register for the error event on the window
object (which is where the SyntaxError event will be ﬁred),
and ﬁnally start parsing the remote resource by assigning
the src attribute on all script elements simultaneously. We
compute the total parsing time as the interval between the
ﬁrst load event and the last error event.
We applied the same performance evaluation as with the
other attacks, and calculated the distribution of the time
it took to parse each ﬁle 50 times. This number of itera-
tions was chosen to optimally suit the performance of the
tested device. The results of this experiment are depicted in
Figure 1 (f), and show that this attack performs reasonably
well, especially for smaller ﬁles. While the time required to
obtain a single measurement for this attack is relatively high,
it should be noted that the measurements are independent
of the victim’s network condition.
3.7 Performance evaluation
In the previous sections, we discussed four diﬀerent types
of web-based timing attacks that exploit side-channel infor-
mation exposed by browsers, and brieﬂy analyzed their per-
formance in comparison to a basic timing attack that relies
on the download time of a resource. To evaluate the poten-
tial of the newly presented timing attacks in more detail, we
performed an additional experiment using a similar setup as
the one discussed in Section 3.1. The goal of this experiment
was to evaluate, for each type of timing technique, the time
required by an attacker to successfully make a distinction
between two resources of diﬀerent sizes.
First, HTML ﬁles were created with a ﬁle size ranging
from 100kB to 200kB, in 5kB increments. We compared
timing measurements of each ﬁle to the 100kB ﬁle, which
was used as a baseline, by alternately extracting timing in-
formation from the baseline ﬁle, followed by a timing mea-
surement of the larger ﬁle. This process, which we limited
to 60 seconds, was then repeated for each timing technique.
In order to estimate the time required for an adversary
to perform a successful attack, we ﬁrst calculated the small-
est number (n) of timing measurements required to perform
a timing attack with an accuracy of 95%. The accuracy
was calculated as follows: for each group of n timing mea-
surements of the baseline, we compared the mean of those
measurements to the mean of the corresponding group of
the tested ﬁle. For example, for the basic timing attack
Figure 2: The average time required to perform a
cross-site timing attack with 95% accuracy, for each
type of web-based timing technique.
where the baseline ﬁle of 100kB was compared to a ﬁle of
155kB, we collected a total of 600 timing measurements dur-
ing one minute, namely 300 for each ﬁle. For a group size
of 13 measurements, we found that the mean of the mea-
surements for the baseline ﬁle was smaller than the mean of
the corresponding group of the 155kB measurements in 22
of the 23 groups, leading to an accuracy of 95.65%. For all
groups with a smaller value of n, we found the accuracy to
be less than 95%. Finally, we calculated the required time
to perform a successful timing attack as the average time
required to collect all measurements for the minimum group
size.
The results of this experiment are shown in Figure 2.
While the timing experiments were conducted in a controlled
environment, on a relatively stable network, the results show
that using a basic timing attack, an attacker would be un-
able to diﬀerentiate ﬁles with a diﬀerence in size of less than
15kB. Interestingly, for the 140kB ﬁle, the basic timing at-
tack failed as well, which was most likely caused by a brief
irregularity in the network. This again shows that perform-
ing a web-based timing attack by collecting timing measure-
ments based on the network download time, can be a very
unreliable process. Furthermore, the overall results indicate
that the four newly introduced timing attacks substantially
outperform basic web-based timing techniques. Especially
when the diﬀerence in ﬁle size is small, the newly introduced
timing techniques show a manifold increase in terms of per-
formance.
As was mentioned earlier, our individual timing techniques
can be combined to further improve the performance of a
timing attack.
In Figure 2, we also show the results of a
timing attack where we ﬁrst force the caching of the remote
resources and then apply our video parsing attack. This re-
sults in a signiﬁcant performance increase, where even the
smallest diﬀerence in ﬁle size could be detected in approx-
imately 200ms, including the initial download time. Com-
bined with the ability to collect timing measurements in
parallel without loss of accuracy, the use of our newly pro-
posed techniques makes timing attacks much more viable in
real-world situations.
Other devices.
In order to validate that our proposed attacks work on multi-
ple systems, we performed the same experiment on a variety
1387was followed using just a single request. In their research,
Lee et al. have shown how this information can be lever-
aged to uncover the login-status of users at a cross-origin
website [22].
The wide variety of the discovered timing side-channels,
all of which are resilient from network irregularities, serves
as a strong indicator that modern browsers are lacking struc-
tural defense mechanisms to adequately protect against the
exposure of timing information. As such, we expect that,
along with the exponential growth of browser functionalities
and accompanying APIs, new timing side-channels will arise.
For an adversary, it is suﬃcient to be able to measure the
time required to handle a remote resource, either by storing
or retrieving it from the cache, or parsing it. Consequently,
any browser feature that accommodates these requirements
may expose a new timing side-channel.
4. REAL-WORLD TIMING ATTACKS
In the previous section, we showed how timing attacks can
be used to estimate the size of an external resource. In this
section, we discuss how these techniques can be applied in
real-world scenarios, and how an adversary can use these at-
tacks to extract personal information from users. We focus
mainly on social networking websites and describe diﬀer-
ent attack scenarios which are based on the diﬀerent func-
tionalities oﬀered by these services. Previous research [42]
has shown that the information about group membership
of a user can lead to the unique identiﬁcation of that user.
We extend this work by analyzing other types of personally
identiﬁable information that can be exﬁltrated using tim-
ing attacks. This information could then be used to either
uniquely identify a user, or to create a proﬁle of the user’s
age, gender, location, and interests. The latter is particu-
larly useful for advertising companies who are always look-
ing for opportunities to improve targeted advertising, and,
as illustrated by previous research, often use questionable
techniques to reach this goal [2, 15, 29].
As web developers tend to tailor the response for certain
endpoints to the current state of a user, web-based timing
attacks can be performed on a large and varied set of web-
sites. To show some of the potential consequences of timing
attacks in the modern web, we present various real-world at-
tacks on several of the most popular social networks. While,
due to abundance of personal information that users share
on these services, we mainly focus on social networks in the
presented attack scenarios, the proposed timing attacks can
be applied to other types of online services as well. The list
of possible attack scenarios described below should be seen
as an indication of how widespread timing-related vulnera-
bilities are.
Ethical considerations.
To assess the presence of timing vulnerabilities in the wild,
and quantify the eﬀectiveness of our newly proposed attacks
when compared to the classic timing attack, we cannot avoid
searching for vulnerabilities in real world sites. Note that all
vulnerabilities discussed in the following sections were dis-
covered by manually interacting with a website and never
resorting to the use of, potentially intrusive, automated vul-
nerability scanners. All cross-site requests were performed
against our own accounts, thus real users where never ex-
posed to our attacks. It is also important to point out that
our attacks, as far as a server is concerned, are merely cross-
Figure 3: The average time required to perform an
AppCache-based timing attack with 95% accuracy,
for diﬀerent platforms.
of devices: a mid-level desktop computer running Ubuntu,
the Macbook Pro from previous experiments, once using
Chrome and once using Firefox, a Motorola Moto G smart-
phone, and a Samsung Galaxy Tab 3 tablet. Due to space
limitations, in Figure 3, we only show the results of the
AppCache-based timing attack. All other attacks behave in
a similar fashion.
In general, we found that the timing techniques demon-
strated only a minor variation in performance among the
diﬀerent browsers, operating systems, and devices. As a re-
sult, the timing attacks presented in this paper can be lever-
aged to obtain sensitive information across a wide range of
browsers and devices. Although the average time required
to diﬀerentiate between two ﬁles is comparable between dif-
ferent platforms, we found that the time required to obtain a
single measurement diﬀered considerably. For instance, the
average time required to load a 100kb resource ﬁve times
from the cache was almost twice as high on the smartphone
as it was on the laptop (27.76ms versus 15.84ms). While it
takes longer to obtain a single measurement, the measure-
ments from slower devices are generally more accurate, and
thus fewer are required for a successful attack.
3.8 Discussion
In our research, we analyzed various browser functions
that handle external resources for the presence of timing
side-channels and discovered several cases that could be ex-
ploited to leak timing information. Another example of this,
is the side-channel information exposed by the Navigation
Timing API [38]. This API provides timing information for
requested resources and, due to its design, can be used to
determine whether a redirection chain was followed. More
precisely, an attacker can compute the time between the ini-
tialization of the request, e.g., when he assigns the src at-
tribute to an Image object, and the fetchStart property of
the corresponding PerformanceResourceTiming entry. The
latter contains the time when the browser started fetching
the resource, which is usually a fraction of a millisecond af-
ter the request was triggered. However, when a redirection
chain is followed, the value is set to the time the fetch algo-
rithm for the last resource in the chain was initiated. As a
result, the time between the initialization of the request and
the fetchStart property will be considerably higher, allow-
ing the attacker to determine whether a redirection chain
1388site requests, thus the tested web applications are never ex-
posed to any kind of malicious input. Given the above, we
believe that our timing attacks did not have any adverse
eﬀects, neither on the tested services, nor on their users.
4.1 Facebook: Age, Gender, and Location
Facebook has approximately 1.4 billion active users [11]
making it one of the largest online web services. Next to
user proﬁles, Facebook also oﬀers the possibility to repre-
sent companies and brands by the means of so-called “pages”.
These pages are similar to a user’s proﬁle in the sense that,
just like a user, a page can update its status, and interact
with others. A page’s status update will be broadcasted
through the social network to everyone connected to the
page, i.e., to every user that “follows” the page. For brand-
ing purposes, status updates can be limited to a particular
target audience, for instance users between the age of 20 and
30, or only female users from a speciﬁc location. When vis-
iting the permanent link (also known as permalink) of the
status update, users who are not part of the target audience
are presented with a static page which states the content is
not available. As the size of the static page is diﬀerent from
the size of the page containing the actual status update,
this exposes side-channel information allowing an adversary
to determine whether a user belongs to a speciﬁc audience.
We found that the ﬁle size of a visible post (240kB) is suﬃ-
ciently diﬀerent from the size of a post when the user is not
part of the target audience (163kB), allowing an adversary
to perform a successful timing attack in a few milliseconds,
using our newly proposed timing attacks.
To verify this claim, we set up a Facebook page and made
six posts, each targeted to people who fall in a speciﬁc non-
overlapping age range. As a result, only a single post was
visible to the victim user. For both the basic timing attack
as well as our novel attack technique using Service Workers,
we collected timing measurements for each post during 15
seconds. The time interval was limited because generally,
an attacker only has a limited window of opportunity dur-
ing which he can perform a timing attack. Furthermore, the
attacker is likely to be interested in other private informa-
tion on the user as well, meaning he will have to perform
multiple attacks within this limited time frame. The timing
measurements, displayed in Figure 4, clearly indicate that
the measurements acquired using the basic timing attack