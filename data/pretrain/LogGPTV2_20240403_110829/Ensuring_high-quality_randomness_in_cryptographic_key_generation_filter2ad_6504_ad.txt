Step 4 of the protocol, the proof π convinces the EA that
n = (x + x′ + δx)(y + y′ + δy)
(mod Q)
for some (unknown) x and y, where Q is the group order used
for the Pedersen commitments. Recall that Q > 210022k.
Since the device must commit to x before seeing x′ we know
that x+x′ is sampled independently from a distribution over
ZQ with min-entropy at least k (in the worst case, x + x′ is
sampled uniformly from the integers in an interval of width
2k). Since the device controls δx and 0 ≤ δx < ∆ < c · k for
some absolute constant c, it follows that the min-entropy of
p0 ← x + x′ + δx is at least k − log ck. Similarly the min-
entropy of q0 ← y + y′ + δy conditioned on p0 is at least
k − log ck. Consequently, since n is a product of two primes,
it can be shown for the distributions in question here that
the min-entropy of n = p0q0 mod Q is at least 2k − d log k
for some constant d.
If n is the product of two primes n = pq each in the range
[2k+1, 2k+2) then each prime must be chosen from a distri-
bution with min-entropy at least k − 2 − d log k (otherwise n
cannot have min-entropy at least 2k − d log k). The theorem
now follows.
4.2 DSA Protocol
In this section, we prove that the DSA key generation pro-
tocol satisﬁes the security properties outlined in Section 2.
4.2.1 Protects Device from a Malicious EA
We ﬁrst prove that a device with a strong entropy source
leaks no information about its secret key to the entropy au-
thority during a run of the protocol.
Theorem 4.4. If the device has a strong entropy source
(i.e., the device can sample from the uniform distribution
over a set), then the entropy authority can simulate its in-
teraction with the device.
Proof. We construct a simulator S that, given a DSA
public key A = ga, outputs the transcript (Cx, x′, rx, A, σ)
of a protocol run between an honest device and a malicious
entropy authority A. The simulator S constructs the tran-
script as follows:
692S(A):
R←− Zq
choose random rx
set Cx ← Ahrx
generate x′ ← A(Cx)
run A on (A, rx) to get a signature σ
output the simulated transcript: (Cx, x′, rx, A, σ)
The simulator’s transcript is statistically indistinguishable
from the transcript of a real protocol run between an honest
device with a strong entropy source and the entropy author-
ity A. If the device has a strong entropy source, then the
randomness rx used in the commitment is sampled indepen-
dently from the uniform distribution. The values Cx, x′ and
σ are constructed exactly as they would be in a real run of
the protocol.
4.2.2 Protects Device from the CA and Client
Having established that a device with a strong entropy
source leaks no secret information to the entropy authority,
we now demonstrate that the key produced by the proto-
col is sampled from the uniform distribution over the set of
possible keys.
Theorem 4.5. If an honest entropy authority does not
abort the key generation protocol, and if either the device
or the entropy authority has a strong entropy source, then
the public keys produced by the protocol in Figure 3 will be
sampled independently from the uniform distribution over G.
Proof. If the entropy authority does not abort the key
generation protocol, then the equality Ahrx = Cxgx′
is sat-
isﬁed in the Step 4 of the protocol. Rearranging these terms
/hrx = gx+x′
to compute the public key A: A = Cxgx′
.
To demonstrate that the public key gx+x′
is uniformly dis-
tributed over the set of possible public keys, it suﬃces to
show that either x or x′ is selected uniformly at random
from Zq and that x and x′ are independent.
If the device has a strong entropy source, then the device’s
secret value x will be selected uniformly from Zq. To show
that x′ is independent of x, we rely on the “perfect hiding”
property of the Pedersen commitment scheme. The commit-
ment Cx that the entropy authority sees before selecting its
value x′ is simply a value gxhrx selected at random from G.
If x is independent of x′ and x is uniformly distributed over
Zq then gx+x′
is uniformly distributed over G.
If the entropy authority has a strong entropy source, then
the entropy authority’s value x′ will be selected uniformly
from Zq. Since the device must commit to x before it sees
x′, the only way that the device’s value x can depend on
x′ is if the device is able to open its commitment Cx to a
value x that depends on x′. The “computationally binding”
property of the Pedersen commitment scheme prevents the
device from opening Cx to a value that depends on x′. If the
device could open the commitment to a value of its choice,
the device would be able to compute discrete logarithms in
If x is independent of x′ and x′ is sampled from the
G.
uniform distribution over Zq then gx+x′
is sampled from the
uniform distribution over G.
4.2.3 Protects EA from a Malicious Device
Theorem 4.2.2 holds even if the device is malicious, so a
key produced from an interaction between a malicious device
and an honest entropy authority will be strong.
Find δx, δy
Generate Cp, Cq
Multiplication NIZK
Generate Cx, Cy
Generate PKCS#10 req.
0
10
20
30
40
CPU user time (seconds)
Figure 4: Operations taking longer than 0.05s dur-
ing a run of the RSA protocol on the home router.
5. EVALUATION
To demonstrate the practicality of our RSA and DSA key
generation protocols, we implemented the protocols in C us-
ing the OpenSSL cryptography library. We evaluated the
performance of the protocols on three diﬀerent devices: a
Linux workstation with two 3.2 GHz Intel W3656 proces-
sors, a MacBook Pro laptop with a single 2.5 GHz dual-
core processor, and a Linksys E2500-NP home router with
a 300 MHz Broadcom BCM5357r2 processor. The entropy
authority in all experiments was a modern Linux server and
the DSA protocol experiments use the NIST P-224 elliptic
curve as the elliptic curve DSA (EC-DSA) group [25].
Embedded devices, like the Linksys router we used in our
evaluations, lack the keyboard, mouse, hard drive, and other
peripherals used as entropy sources on full-ﬂedged machines.
As a result, these device are particularly susceptible to gen-
erating weak keys. By evaluating our key generation proto-
cols on a $70 Linksys router, we demonstrate that the pro-
tocols are practical even on low-power, low-cost (and often
low-entropy) embedded devices. For the purposes of eval-
uation, we installed the Linux-based dd-wrt [22] operating
system on the Linksys router and ran our key generation
protocol in a user-space Linux process.
Table 1 presents the wall-clock time required to generate
a 2048-bit RSA key and a 224-bit EC-DSA key on each ma-
chine, averaged over eight trial runs. When running on the
laptop and workstation, which have relatively fast CPUs, the
bulk of the protocol overhead (roughly 90%) comes from the
network latency in communicating with the entropy author-
ity. On the CPU-limited home router, the protocol causes a
near-2× slowdown, even without the network latency. Even
so, running the EC-DSA protocol takes fewer than two sec-
onds on all three of the devices.
The standard RSA keypair generation algorithm requires
much more computation than the EC-DSA algorithm, so the
cost of interacting with the entropy authority is amortized
over a longer total computation in the RSA protocol. As a
result, the slowdown factors on each of the three devices is
smaller for the RSA protocol than for the DSA variant. The
protocol incurs less than a 2× slowdown when running on
the home router—generating a standard 2048-bit RSA key-
pair takes nearly 60 seconds and generating a keypair with
the protocol takes just over 100 seconds. On the laptop and
workstation, around 50% of the slowdown is due to network
latency. On these faster devices, generating an RSA keypair
using the protocol takes less than three seconds.
Figure 4 presents a graphical break-down of the CPU user
time required to perform the most expensive operations in
the RSA key generation protocol on the home router. Nearly
half of the CPU time consumed during the protocol is spent
693EC-DSA (224-bit prime)
No proto Proto Proto+Net
RSA (2048-bit)
Slowdown No proto Proto Proto+Net
Slowdown
Linksys Router
Laptop
Workstation
0.45
0.03
0.004
0.84
0.08
0.05
1.61
0.72
0.68
3.6×
28×
160×
59.16
0.52
0.16
96.93
1.26
0.65
101.57
2.01
1.41
1.7×
3.9×
8.7×
Table 1: Time (in seconds) to generate a keypair without our protocol, with a local EA, and with an EA via
the Internet with ≈ 80 ms of round-trip latency. The Slowdown column indicates the slowdown factor of our
protocol running over the Internet relative to the standard key generation algorithm.
in ﬁnding the δx and δy oﬀset values to make the RSA fac-
tors p and q prime. Finding these oﬀsets requires running
the Miller-Rabin [38] primality test on a number of candi-
date primes. This expensive search for primes p and q is also
required to generate an RSA modulus without our key gen-
eration protocol, so this search does not constitute protocol
overhead.
The other expensive operations are computing the Peder-
sen commitments (each of which requires big-integer modu-
lar exponentiations) and generating the non-interactive zero-
knowledge proof that n is the product of the values contained
in the commitments Cp and Cq. The ﬁnal expensive oper-
ation is generating the PKCS#10 certiﬁcate request, which
the device signs with its newly generated RSA key.
Our implementation does not use fast multi-exponentiation
algorithms [34] (e.g., for computing Pedersen commitments
gahr quickly) or exploit parallelism to increase performance
on multi-core machines. An aggressively optimized production-
ready implementation could use these techniques to improve
the performance of the protocol.
As shown in Figure 5, our protocol imposes a near-uniform
4× computation overhead (measured in CPU user time) on
EC-DSA key generation. This slowdown arises because our
EC-DSA protocol requires three elliptic curve point multi-
plications and a single signature veriﬁcation, compared with
the single elliptic curve point multiplication required in tra-
ditional EC-DSA key generation. At the smallest usable
EC-DSA key size, 112 bits, the protocol set-up cost dom-
inates the overall running time, so the protocol imposes a
5.6× overhead.
The computational overhead of generating RSA keys using
our protocol decreases as the key size increases. The domi-
nant additional cost of our RSA protocol is the cost of the
modular exponentiations used in the commitment scheme
and zero-knowledge proof generation. As k increases, the
cost of ﬁnding the RSA primes grows faster than the addi-
tional cost of our protocol, so the computational overhead
of our protocol tends to 1.
6.
IMPLEMENTATION CONCERNS
This section discusses a handful of practical implementa-
tion issues that a real-world deployment of our key genera-
tion protocols would have to address.
Integration with the CA infrastructure.
Integrating
our key generation protocols with the existing CA infras-
tructure would require only modest modiﬁcations to today’s
infrastructure. In a deployment of our key generation pro-
tocol, the device could interact with the entropy authority
using an HTTP API. After the device obtains the entropy
authority’s signature on its public key, the device would em-
bed the EA signature in an extension ﬁeld in the PKCS#10
d
a
e
h
r
e
v
o
l
a
n
o
i
t
a
t
u
p
m
o
C
8×
6×
4×
2×
0
EC-DSA key size (bits)
112
192
256
384
521
EC-DSA
RSA
512 1,024 1,536 2,048
3,072
4,096
RSA key size (bits)
Figure 5: Computational overhead (in CPU user
time) imposed when a laptop uses our key gener-
ation protocols to generate keypairs of various sizes.
certiﬁcate signing request that the device sends to the cer-
tiﬁcate authority. Each certiﬁcate authority would maintain
a list of public keys of approved entropy authorities (in the
way that browsers and SSL libraries today maintain a list of
root CA public keys). When a certiﬁcate authority receives