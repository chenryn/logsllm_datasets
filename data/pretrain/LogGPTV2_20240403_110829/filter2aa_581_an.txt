122
The value of spring.security.oauth.jwt is set to false by default, and it has to be 
changed to true to issue JWTs. The other three properties are self-explanatory, and you 
need to set them appropriately based on the values you used in creating the keystore.
Let’s go through the notable changes in the source code to support JWTs. First, in the 
pom.xml, we need to add the following dependency, which takes care of building JWTs.
  org.springframework.security
  spring-security-jwt
In sample03/src/main/java/com/apress/ch05/sample03/config/
AuthorizationServerConfig.java class, we have added the following method, which 
takes care of injecting the details about how to retrieve the private key from the jwt.jks 
keystore, which we created earlier. This private key is used to sign the JWT.
@Bean
protected JwtAccessTokenConverter jwtConeverter() {
      String pwd = environment.getProperty("spring.security.oauth.jwt.
keystore.password");
      String alias = environment.getProperty("spring.security.oauth.jwt.
keystore.alias");
      String keystore = environment.getProperty("spring.security.oauth.jwt.
keystore.name");
     String path = System.getProperty("user.dir");
       KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(
              new FileSystemResource(new File(path + File.separator + 
keystore)), pwd.toCharArray());
     JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
     converter.setKeyPair(keyStoreKeyFactory.getKeyPair(alias));
     return converter;
}
In the same class file, we also set JwtTokenStore as the token store. The following 
function does it in a way, we only set the JwtTokenStore as the token store only if 
spring.security.oauth.jwt property is set to true in the application.properties file.
Chapter 5  edge SeCurity with an api gateway 
123
@Bean
public TokenStore tokenStore() {
   String useJwt = environment.getProperty("spring.security.oauth.jwt");
   if (useJwt != null && "true".equalsIgnoreCase(useJwt.trim())) {
       return new JwtTokenStore(jwtConeverter());
    } else {
       return new InMemoryTokenStore();
    }
}
Finally, we need to set the token store to AuthorizationServerEndpointsConfigurer,  
which is done in the following method, and once again, only if we want to use JWTs.
@Autowired
private AuthenticationManager authenticationManager;
@Override
public void configure(AuthorizationServerEndpointsConfigurer endpoints) 
throws Exception {
  String useJwt = environment.getProperty("spring.security.oauth.jwt");
  if (useJwt != null && "true".equalsIgnoreCase(useJwt.trim())) {
      endpoints.tokenStore(tokenStore()).tokenEnhancer(jwtConeverter())
                         .authenticationManager(authenticationManager);
  } else {
      endpoints.authenticationManager(authenticationManager);
  }
}
To start the authorization server, use the following command from ch05/sample03/ 
directory, which now issues self-contained access tokens (JWTs).
\> mvn spring-boot:run
To get an access token using the OAuth 2.0 client credentials grant type, use the 
following command. Make sure to replace the values of $CLIENTID and $CLIENTSECRET 
appropriately. The hard-coded values for client id and client secret used in our example 
are 10101010 and 11110000, respectively.
Chapter 5  edge SeCurity with an api gateway 
124
\> curl -v -X POST --basic -u $CLIENTID:$CLIENTSECRET -H "Content-Type: 
application/x-www-form-urlencoded;charset=UTF-8" -k -d "grant_type=client_
credentials&scope=foo" https://localhost:8443/oauth/token
The preceding command will return back a base64-url-encoded JWT, and the 
following shows the decoded version.
{ "alg": "RS256", "typ": "JWT" }
{ "scope": [ "foo" ], "exp": 1524793284, "jti": "6e55840e-886c-46b2-bef7-
1a14b813dd0a", "client_id": "10101010" }
Only the decoded header and the payload are shown in the output, skipping the 
signature (which is the third part of the JWT). Since we used client_credentials grant 
type, the JWT does not include a subject or username. It also includes the scope value(s) 
associated with the token.
 Protecting Zuul API Gateway with JWT
In this section, we’ll see how to enforce self-issued access token or JWT-based token 
validation at the Zuul API gateway. We only need to comment out security.oauth2.
resource.user-info-uri property and uncomment security.oauth2.resource.jwt.
keyUri property in sample02/src/main/resources/application.properties file. The 
updated application.properties file will look like the following.
#security.oauth2.resource.user-info-uri:https://localhost:8443/user
security.oauth2.resource.jwt.keyUri: https://localhost:8443/oauth/token_key
Here the value of security.oauth2.resource.jwt.keyUri points to the public key 
corresponding to the private key, which is used to sign the JWT by the authorization 
server. It’s an endpoint hosted under the authorization server. If you just type https://
localhost:8443/oauth/token_key on the browser, you will find the public key, as 
shown in the following. This is the key the API gateway uses to verify the signature of the 
JWT included in the request.
{
   "alg":"SHA256withRSA",
   "value":"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMI 
IBCgKCAQEA+WcBjPsrFvGOwqVJd8vpV+gNx5onTyLjYx864mtIvUxO8D4mwAaYpjXJgsre2dc 
XjQ03BOLJdcjY5Nc9Kclea09nhFIEJDG3obwxm9gQw5Op1TShCP30Xqf8b7I738EHDFT6 
Chapter 5  edge SeCurity with an api gateway 
125
qABul7itIxSrz+AqUvj9LSUKEw/cdXrJeu6b71qHd/YiElUIA0fjVwlFctbw7REbi3Sy3nWdm 
9yk7M3GIKka77jxw1MwIBg2klfDJgnE72fPkPi3FmaJTJA4+9sKgfniFqdMNfkyLVbOi9E3Dla 
oGxEit6fKTI9GR1SWX40FhhgLdTyWdu2z9RS2BOp+3d9WFMTddab8+fd4L2mYCQIDAQ 
AB\n-----END PUBLIC KEY-----"
}
Once the changes are made as highlighted earlier, let’s restart the Zuul gateway with 
the following command from the sample02 directory.
\> mvn spring-boot:run
Once we have a JWT access token obtained from the OAuth 2.0 authorization server, 
in the same way as we did before, with the following cURL command, we can access the 
protected resource. Make sure the value of $TOKEN is replaced appropriately with a valid 
JWT access token.
\> curl -k -H "Authorization: Bearer $TOKEN" https://localhost:9443/
order/11
{"customer_id":"101021","order_id":"11","payment_method":{"card_type":"VISA", 
"expiration":"01/22","name":"John Doe","billing_address":"201, 1st Street, 
San Jose, CA"},"items":[{"code":"101","qty":1},{"code":"103","qty":5}]," 
shipping_address":"201, 1st Street, San Jose, CA"}
 The Role of a Web Application Firewall (WAF)
As we discussed before, an API gateway is a policy enforcement point (PEP), which 
centrally enforces authentication, authorization, and throttling policies. In a public- 
facing API deployment, an API gateway is not just sufficient. We also need a web 
application firewall (WAF) sitting in front of the API gateway (see Figure 5-4). The 
primary role of a WAF is to protect your API deployment from distributed denial of 
service (DDoS) attacks—do threat detection and message validation against OpenAPI 
Specification (OAS) along with known threats identified by Open Web Application 
Security Project (OWASP). Gartner (one of the leading analyst firms) predicts that by 
2020, more than 50% of public-facing web applications will be protected by cloud-based 
WAF service platforms such Akamai, Imperva, Cloudflare, Amazon Web Services, and so 
on, up from less than 20% in December 2018.
Chapter 5  edge SeCurity with an api gateway 
126
 Summary
• 
OAuth 2.0 is the de facto standard for securing APIs.
• 
The API gateway is the most common pattern in securing APIs in a 
production deployment. In other words, it’s the entry point to your 
API deployment.
• 
There are many open source and proprietary products out there, 
which implement the API gateway pattern, which we commonly 
identify as API gateways.
• 
An OAuth 2.0 bearer token can be a reference token or self-contained 
token. A reference token is an arbitrary string. An attacker can carry 
out a brute-force attack to guess the token. The authorization server 
must pick the right length and use other possible measures to prevent 
brute forcing.
Figure 5-4. A web application firewall (WAF) intercepts all the traffic coming into 
an API deployment
Chapter 5  edge SeCurity with an api gateway 
127
• 
When the resource server gets an access token, which is a reference 
token, then to validate the token, it has to talk to the authorization 
server (or the token issuer). When the access token is a JWT, the 
resource server can validate the token by itself, by verifying the 
signature of the JWT.
• 
Zuul is an API gateway that provides dynamic routing, monitoring, 
resiliency, security, and more. It is acting as the front door to Netflix’s 
server infrastructure, handling traffic from all Netflix users around 
the world.
• 
In a public-facing API deployment, an API gateway is not just 
sufficient. We also need a web application firewall (WAF) sitting in 
front of the API gateway.
Chapter 5  edge SeCurity with an api gateway 
129
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_6
CHAPTER 6
OpenID Connect (OIDC)
OpenID Connect provides a lightweight framework for identity interactions in a RESTful 
manner and was ratified as a standard by its membership on February 26, 2014.1 It was 
developed under the OpenID Foundation and has its roots in OpenID, but was greatly 
affected by OAuth 2.0. OpenID Connect is the most popular Identity Federation protocol 
at the time of this writing. Most of the applications developed in the last few years 
are supporting OpenID Connect. Ninety-two percent of the 8 billion+ authentication 
requests Microsoft Azure AD handled in May 2018 were from OpenID Connect–enabled 
applications.
 From OpenID to OIDC
OpenID, which followed in the footsteps of Security Assertion Markup Language (SAML) 
in 2005, revolutionized web authentication. Brad Fitzpatrick, the founder of LiveJournal, 
came up with the initial idea of OpenID. The basic principle behind both OpenID and 
SAML (discussed in Chapter 12) is the same. Both can be used to facilitate web single 
sign-on (SSO) and cross- domain identity federation. OpenID is more community-
friendly, user centric, and decentralized. Yahoo! added OpenID support in January 2008, 
MySpace announced its support for OpenID in July of the same year, and Google joined 
the party in October. By December 2009, there were more than 1 billion OpenID-enabled 
accounts. It was a huge success as a web SSO protocol. 
OpenID and OAuth 1.0 address two different concerns. OpenID is about 
authentication, whereas OAuth 1.0 is about delegated authorization. As both of these 
standards were gaining popularity in their respective domains, there was an interest in 
1 The announcement by the OpenID Foundation regarding the launch of the OpenID Connect 
standard is available at http://bit.ly/31PowsS
130
combining them, so that it would be possible to authenticate a user and also get a token 
to access resources on his or her behalf in a single step.
The Google Step 2 project was the first serious effort in this direction. It introduced 
an OpenID extension for OAuth, which basically takes OAuth-related parameters in the 
OpenID request/response. The same people who initiated the Google Step 2 project later 
brought it into the OpenID Foundation.
OpenID has gone through three generations to date. OpenID 1.0/1.1/2.0 was the first 
generation, and the OpenID extension for OAuth is the second. OpenID Connect (OIDC) 
is the third generation of OpenID. Yahoo!, Google, and many other OpenID providers 
discontinued their support for OpenID around mid-2015 and migrated to OpenID 
Connect.
OPENID CONNECT IS NOT OPENID, THIS IS HOW OPENID WORKS!
How many profiles do you maintain today at different web sites? Perhaps you have one on 
Yahoo!, one on Facebook, one on Google, and so on. Each time you update your mobile number 
or home address, either you have to update all your profiles or you risk outdating most of your 
profiles. OpenID solves the problem of scattered profiles on different websites. With OpenID, 
you maintain your profile only at your OpenID provider, and all the other sites become OpenID 
relying parties. These relying parties communicate with your OpenID provider to obtain your 
information.
Each time you try to log in to a relying party website, you’re redirected to your OpenID  
provider. At the OpenID provider, you have to authenticate and approve the request from the 
relying party for your attributes. Upon approval, you’re redirected back to the relying party  
with the requested attributes. This goes beyond simple attribute sharing to facilitate 
decentralized SSO. 
With SSO, you only log in once at the OpenID provider. That is, when a relying party redirects 
you to the OpenID provider for the first time. After that, for the subsequent redirects by other 
relying parties, your OpenID provider doesn’t ask for credentials but uses the authenticated 
session you created before at the OpenID provider. This authenticated session is maintained 
either by a cookie until the browser is closed or with persistent cookies. Figure 6-1 illustrates 
how OpenID works.
CHAPTEr 6  OPEnID COnnECT (OIDC)
131
The end user initiates the OpenID flow by typing his or her OpenID on the relying party web 
site (step 1). An OpenID is a unique UrL or an XrI (Extensible resource Identifier). For example, 
http://prabath.myopenid.com is an OpenID. Once the user types his or her OpenID, 
the relying party has to do a discovery based on it to find out the corresponding OpenID 
provider (step 2). The relying party performs an HTTP GET on the OpenID (which is a UrL) to 
get back the HTML text behind it. For example, if you view the source that is behind http://
prabath.myopenid.com, you’ll see the following tag (MyOpenID was taken down some 
years back). This is exactly what the relying party sees during the discovery phase. This tag 
indicates which OpenID provider is behind the provided OpenID:
OpenID has another way of identifying the OpenID provider, other than asking for an OpenID 
from the end user. This is known as directed identity, and Yahoo!, Google, and many other 
OpenID providers used it. If a relying party uses directed identity, it already knows who the 
OpenID provider is, so a discovery phase isn’t needed. The relying party lists the set of OpenID 
providers it supports, and the user has to pick which one it wants to authenticate against. 
Once the OpenID provider is discovered, the next step depends on the type of the relying party. 
If it’s a smart relying party, then it executes step 3 in Figure 6-1 to create an association with 
Figure 6-1. OpenID protocol flow
CHAPTEr 6  OPEnID COnnECT (OIDC)
132
the OpenID provider. During the association, a shared secret key is established between the 
OpenID provider and the relying party. If a key is already established between the two parties, 
this step is skipped, even for a smart relying party. A dumb relying party always ignores step 3.
In step 5, the user is redirected to the discovered OpenID provider. In step 6, the user has to 
authenticate and approve the attribute request from the relying party (steps 6 and 7). Upon 
approval, the user is redirected back to the relying party (step 9). A key only known to the 
OpenID provider and the corresponding relying party signs this response from the OpenID 
provider. Once the relying party receives the response, if it’s a smart relying party, it validates 
the signature itself. The key shared during the association phase should sign the message. 
If it’s a dumb relying party, it directly talks to the OpenID provider in step 10 (not a browser 
redirect) and asks to validate the signature. The decision is passed back to the relying party in 
step 11, and that concludes the OpenID protocol flow.
 Amazon Still Uses OpenID 2.0
Few have noticed that Amazon still uses (at the time of this writing) OpenID for user 
authentication. Check it out yourself: go to www.amazon.com, and click the Sign In button. 
Then observe the browser address bar. You see something similar to the following, which 
is an OpenID authentication request: 
https://www.amazon.com/ap/signin?_encoding=UTF8
    &openid.assoc_handle=usflex
    &openid.claimed_id=
            http://specs.openid.net/auth/2.0/identifier_select
    &openid.identity=
            http://specs.openid.net/auth/2.0/identifier_select
    &openid.mode=checkid_setup
    &openid.ns=http://specs.openid.net/auth/2.0
    &openid.ns.pape=
            http://specs.openid.net/extensions/pape/1.0
    &openid.pape.max_auth_age=0
    &openid.return_to=https://www.amazon.com/gp/yourstore/home
CHAPTEr 6  OPEnID COnnECT (OIDC)
133
 Understanding OpenID Connect
OpenID Connect was built on top of OAuth 2.0. It introduces an identity layer on top of 
OAuth 2.0. This identity layer is abstracted into an ID token, which is JSON Web Token 
(JWT), and we talk about JWT in detail in Chapter 7. An OAuth 2.0 authorization server 
that supports OpenID Connect returns an ID token along with the access token.
OpenID Connect is a profile built on top of OAuth 2.0. OAuth talks about access 
delegation, while OpenID Connect talks about authentication. In other words, OpenID 
Connect builds an identity layer on top of OAuth 2.0.
Authentication is the act of confirming the truth of an attribute of a datum or 
entity. If I say I am Peter, I need to prove that. I can prove that with something I know, 
something I have, or with something I am. Once proven who I claim I am, then the 
system can trust me. Sometimes systems do not just want to identify end users just by 
the name. Name could help to identify uniquely—but how about other attributes? Before 
you get through the border control, you need to identify yourself—by name, by picture, 
and also by fingerprints and eye retina. Those are validated in real time against the data 
from the VISA office, which issued the VISA for you. That check will make sure it’s the 
same person who claimed to have the VISA that enters into the country.
That is proving your identity. Proving your identity is authentication. Authorization is 
about what you can do or your capabilities.
You could prove your identity at the border control by name, by picture, and also by 