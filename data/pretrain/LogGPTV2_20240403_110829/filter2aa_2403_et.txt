CODE:00518AFC   
    dd 10h 
CODE:00518B00 aPreparingRun__ db 'Preparing run...',0 
57.1.3  Unicode 编码 
多数人认为，所谓 Unicode 编码就是用两个字节/16 位数据来编码一个字符的字符封装格式。实际上这
是一种常见的术语理解错误。Unicode 实际上是一个标准，它规定的只是将一个数字写成字符的方法，但
是没有定义具体的编码方式。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 57 章  字  符  串 
627 
而目前比较流行的编码方式有 UTF-8 和 UTF-16LE。前者广泛被利用在互联网和*NIX 系统中，而后者
主要使用在 Windows 环境下。 
UTF-8 
UTF-8 是目前使用最广泛也最成功的字符编码方法之一。所有的拉丁字符都像 ASCII 码一样进行编码，
ASCII 码表以外的字符则采用多字节来编码。因为 0 的作用不变，所以所有的标准 C 字符串函数都能正确
处理包括 UTF-8 编码在内的所有字符串。 
下面我们通过一个对照表来看看不同语言下的 UTF-8 的对比显示情况，采用的工具是 FAR，代码页是 437。
如图 57.2 所示。 
图 57.2  FAR UTF-8 
从以上的对照，我们可以清楚地看到，只有英文的字符串看起来和 ASCII 表中的完全一样。匈牙利语
言使用一些拉丁字符以及音节分隔标记来表示。这些符号使用多个字节来编码，我们这里采用了红色的下
画线表示。从这个表，我们还可以看到爱尔兰语和波兰语也采用了同样的办法。而这个字符串对比的开始
处，我们采用了一个欧元符号，它是用三个字节表示的。其余的系统与拉丁文没有关系。至少在俄语、阿
拉伯语、希伯来语以及北印度语中，我们会发现其中一个字节是反复出现的，这也不奇怪：一个语言系统
中的字符往往是在 Unicode 表中的相同位置处，因此它们的代码总是以系统的数字打头。 
在最开始，也就是在第一个可见字符串“How much?”之前，我们会看到还有三个字节，实际上它们
是字节顺序标记（Byte order mark，BOM）。BOM 声明了字符串的编码系统。 
UTF-16LE 
很多 Windows 系统下的 win32 函数有-A 和-W 后缀。前面这种函数用于处理常规字符串，而后面这种
带有-w 的函数则是 UTF-16LE 字符串的专用函数（w 代表 wide）。 
在 UTF-16 字符串的拉丁符号中，我们用工具 Hiew 或者 FAR 可以看到，这些字符都被字节 0 间隔开
了，如图 57.3 所示。 
程序如下所示。 
int wmain() 
{ 
        wprintf (L"Hello, world!\n"); 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
628 
逆向工程权威指南（下册） 
而在 Windows NT 系统中，我们可以经常看到的显示如图 57.4 所示。 
                   图 57.3  Hiew                                          图 57.4  Hiew 
在 IDA 的提示信息中，严格采用双字节对单字符编码的编码方式称为 Unicode。 
例如： 
.data:0040E000 aHelloWorld: 
.data:0040E000   
unicode 0,  
.data:0040E000   
dw 0Ah, 0 
而图 57.5 所示的则是俄语的字符串，它采用的是
UTF-16LE 编码方式。 
我们比较容易分辨的是这些字符被星型的字符分
割，而这个星型字符的 ASCII 值是 4。实际上，西里尔
字母位于 Unicode 表的第 4 映射区，因此所有的西里尔
字母在 UTF-16LE 中的编码范围是 0x400～0x4ff。详情请
参考 https://en.wikipedia.org/wiki/Cyrillic_(Unicode_block) 
再回过头来看看我们上面列出的一个显示多语言字符
串的例子。图 57.6 所示的是其在 UTF-16LE 编码方式下的样子。 
图 57.6  采用工具软件 FAR，编码格式为 UTF-16LE 
从以上图中我们可以看到，字节分割符 BOM 位于文件的开头，而所有的拉丁字母都用字节零来分割。
一些带读音分割标志的字符（主要是匈牙利语和爱尔兰语）也采用红色的下划线标出来了。 
57.1.4  Base64 
Base64 编码十分流行，是把二进制数据转换为文本字符串的常用标准。本质上说，这种算法用 4 个可
显示字符封装 3 个二进制字节。它的字符集包括 26 个拉丁字母（含大小写）、0～9 共 10 个数字、加号“+”
图 57.5  Hiew 工具，编码方式 UTF-16LE 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 57 章  字  符  串 
629 
及反斜杠“/”，总共 64 个字符。  
Base64 编码的一个显著特征是它通常（但不一定）以 1 到 2 个等号“=”为结尾。 
比如说以下两个 Base64 编码： 
AVjbbVSVfcUMu1xvjaMgjNtueRwBbxnyJw8dpGnLW8ZW8aKG3v4Y0icuQT+qEJAp9lAOuWs= 
WVjbbVSVfcUMu1xvjaMgjNtueRwBbxnyJw8dpGnLW8ZW8aKG3v4Y0icuQT+qEJAp9lAOuQ== 
可以肯定的是，等号“=”绝不会出现在 Base64 编码字符串的中间。 
57.2  错误/调试信息 
对于逆向分析来说，程序中的调试信息都很重要。在某种程度上，调试信息能报告程序正在运行的状
态。调试信息通常会由 printf()一类的函数显示出来，或者被输出到日志文件中。但是在 release/发行版、而
非 debug/测试版的软件中，即使有关指令调用了相关调试函数、也不会有任何实质性的输出内容。如果调
试信息的转储数据中含有局部变量或者全局变量的信息，那么逆向工程人员就算赚到了—我们至少知道
了变量的名称。比如说，我们可以通过转储信息确定 Oracle RDBMS 有一个函数叫做 ksdwrt()。 
内容可自然解释的字符串通常是逆向分析的重点。IDA 反编译器可以显示出字符串的调用方函数和调
用指令。数量掌握这种分析之后，您可能会找到一些有趣的东西（可以参考 https://yurichev.com/blog/32/）。 
错误信息有时也很重要。Oracle  RDBMS 构造了一系列函数专门处理错误信息。有兴趣的读者可以访
问 https://yurichev.com/blog/43/了解详细信息。 
多数情况下，我们能够迅速判断出汇报错误的函数以及引发它们报错的具体条件。有意思的是，正因
如此，一些注重版权保护的程序会刻意在程序出错的时候临时调整错误信息或错误代码。毕竟，开发人员
不会希望别人马上就能摸清他的防盗版措施。 
本书的 78.2 节就演示了一个对错误信息加密的程序。 
57.3  可疑的魔数字符串 
一些经常被用在后门程序中的魔数字符串看起来就很可疑。比如说，我们注意到一个关于 TP-Link 
WR740 家用路由器存在后门的报道（参见 http://sekurak.pl/tp-link-httptftp-backdoor/）。只有当他人访问下述
URL 时，才会触发这个后门： 
http://192.168.0.1/userRpmNatDebugRpm26525557/start_art.html。 
事实上，字符串 userRpmNatDebugRpm26525557 必定存在于固件中的某个文件。然而在这个后门东窗
事发之前，Google 搜索不到任何信息，当然这个后门被曝光后的情况完全相反。像这种后门类的字符串，
查遍 RFC 资料你也找不到它。再怎么调整字节序，它也不会和科学算法沾边。它也绝不是错误信息或者调
试信息。因此，尽快地定位类似这个的可疑字符串是一个好主意。 
字符串通常采用 Base64 编码。因此把文件中的字符串全都进行解码处理，再扫一眼就知道哪个文件含
有这个字符串了。 
更准确来讲，这种隐藏后门的办法被称为“不公开即安全（security through obscurity）”，也就是见光死。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5588 章
章    调
调用
用宏
宏 aasssseerrtt(())（
（中
中文
文称
称为
为断
断言
言）
）  
一般来讲，assert()宏在可执行文件中保留了源代码的文件名、行数以及执行条件。 
最有价值的信息是 assert()宏的执行条件。我们可以通过它们来推断出变量名或者结构体的字段名称。
另外一个有用的信息是文件名，通过它我们可以推断出源代码是采用什么语言编写的。同时我们还可能通
过文件名来识别出其是否采用了知名的开放源代码库。 
指令清单 58.1  调用 assert()宏的例子 
. text:107D4B29  mov  dx, [ecx+42h] 
.text:107D4B2D  cmp  edx, 1 
.text:107D4B30  jz  short loc_107D4B4A 
.text:107D4B32  push 1ECh 
.text:107D4B37  push  offset aWrite_c ; "write.c" 
.text:107D4B3C  push  offset aTdTd_planarcon ; "td->td_planarconfig == PLANARCONFIG_CON"... 
.text:107D4B41  call  ds:_assert 
... 
.text:107D52CA  mov  edx, [ebp-4] 
.text:107D52CD  and  edx, 3 
.text:107D52D0  test edx, edx 
.text:107D52D2  jz  short loc_107D52E9 
.text:107D52D4  push  58h 
.text:107D52D6  push  offset aDumpmode_c ; "dumpmode.c" 
.text:107D52DB  push  offset aN30  
 ; "(n & 3) == 0" 
.text:107D52E0  call  ds:_assert 
... 
.text:107D6759  mov  cx, [eax+6] 
.text:107D675D  cmp  ecx, 0Ch 
.text:107D6760  jle  short loc_107D677A 
.text:107D6762  push  2D8h 
.text:107D6767  push  offset aLzw_c   ; "lzw.c" 
.text:107D676C  push  offset aSpLzw_nbitsBit ; "sp->lzw_nbits lzw_nbits  EXCEL.fdiv 
总共有 144 个匹配结果。 
然后，我们在 Excel 里输入计算公式“=(1/3)”，并检查每个指令的运行结果。 
在调试器（或 tracer）里逐一排查除法运算指令以后，我们幸运地发现在第 14 个 FDIV 指令就是我们
要找的指令： 
.text:3011E919 DC 33   
    fdiv qword ptr [ebx] 
PID=13944|TID=28744|(0) 0x2f64e919 (Excel.exe!BASE+0x11e919) 
EAX=0x02088006 EBX=0x02088018 ECX=0x00000001 EDX=0x00000001 
ESI=0x02088000 EDI=0x00544804 EBP=0x0274FA3C ESP=0x0274F9F8 
EIP=0x2F64E919 
FLAGS=PF IF 
FPU ControlWord=IC RC=NEAR PC=64bits PM UM OM ZM DM IM 
FPU StatusWord= 
FPU ST(0): 1.000000 
此时，第一个参数（被除数）被保存在 ST(0)中，而除数则保存在[EBX]中。 
FDIV 后面的 FSTP 指令，将结果写入内存： 
.text:3011E91B DD 1E   
    fstp qword ptr [esi] 
在 FSTP 指令处设置断点，我们能看到下述运算结果： 
PID=32852|TID=36488|(0) 0x2f40e91b (Excel.exe!BASE+0x11e91b) 
EAX=0x00598006 EBX=0x00598018 ECX=0x00000001 EDX=0x00000001 
ESI=0x00598000 EDI=0x00294804 EBP=0x026CF93C ESP=0x026CF8F8 
EIP=0x2F40E91B 
FLAGS=PF IF 
FPU ControlWord=IC RC=NEAR PC=64bits PM UM OM ZM DM IM 
FPU StatusWord=C1 P 
FPU ST(0): 0.333333 
为了验证我们的结果，我们做一个简单而有趣的试验：在内存中对具体的内存单元直接进行修改，以
便得到“直接运算可能不能生成的效果”。 
比如： 
tracer -l:excel.exe bpx=excel.exe!BASE+0x11E91B,set(st0,666) 
PID=36540|TID=24056|(0) 0x2f40e91b (Excel.exe!BASE+0x11e91b) 
EAX=0x00680006 EBX=0x00680018 ECX=0x00000001 EDX=0x00000001 
ESI=0x00680000 EDI=0x00395404 EBP=0x0290FD9C ESP=0x0290FD58 
EIP=0x2F40E91B 
FLAGS=PF IF 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
634 
逆向工程权威指南（下册） 
FPU ControlWord=IC RC=NEAR PC=64bits PM UM OM ZM DM IM 
FPU StatusWord=C1 P 
FPU ST(0): 0.333333 
Set ST0 register to 666.000000 
这样的话，我们在 Excel 的相关单元就会发现数字 666。从这一点可以看出，我们找到了正确的指令
位置。 
图 60.1  通过修改内存发现效果 
如果我们调试的是 64 位的同版本 Excel 程序，我们只会找到 12 条 FDIV 指令。而我们关注的运算指
令是第 3 个 FDIV 指令： 
tracer.exe -l:excel.exe bpx=excel.exe!BASE+0x1B7FCC,set(st0,666) 
大概是在编译 64 位的 Excel 程序时，编译器使用 SSE 指令替代了 float 和 double 型数据的除法运算指
令。其中，SSE 指令集的 DIVSD 指令就出现了 268 次。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 6611 章
章    可
可疑
疑的
的代
代码
码模
模型
型  
61.1  XOR 异或指令 
像 XOR op,op 或者 XOR EAX,EAX 这样的指令通常用来将某个寄存器清零。只有当 XOR 指令的两个
操作数不同的时候，它才进行真正的“异或”运算。这种实际意义上的异或运算，在常规应用程序很少见
到，反而在加密算法中比较常见，即使是业余人员编写的程序也是如此。而如果 XOR 的第二个操作数是
一个很大的数，那么这个程序就显得特别可疑。这种情况往往意味着它会进行加密或者解密、校验和等类
型的复杂计算。 
需要说明的是，18.3 节介绍的编译器采用的“百灵鸟”技术同样会生成大量的 XOR 指令。不过这些
XOR 指令和加/解密等科学运算无关。 
我们可以利用下述 AWK 脚本处理 IDA 生成的指令清单文件（.lst），检索其中的 xor 指令： 
gawk -e '$2=="xor" { tmp=substr($3, 0, length($3)-1); if (tmp!=$4) if($4!="esp") if ($4!="ebp")  
     { print $1, $2, tmp, ",", $4 } }' filename.lst 
值得注意的是，这种类型的脚本也适用于适配不正确的反汇编代码（可以参考本书第 49 章）。 