ODG
---
## Page 38
数，去掉其神秘面纱最好的办法。
函数没有什么神奇的，如果是第一次接触函数，练习交互式地编写多个函数是理解函
或IPython函数，你应该在IPthon窗口中多做一些函数的练习，然后再开始之后的学习。
繁琐。注意一下Bash的for循环与Python的for循环之间的差异。如果是第一次接触Bash
函数shfunc，然后调用它连续执行了5次，值得注意的是，与Python相比，Bash示例更为
在这个Bash示例中，正如之前在Python代码示例中所做的一样，我们创建了一个简单的
在Bash shell中也可以完成类似的工作。下面是其中的一种实现方式：
数的5次执行。如果之前没看到过这种用法，只需要明白它让函数执行了5次即可。
据需要还进行了多次调用。在第[4]行中，我们使用了一个编程习惯或技巧，实现了对函
24
在这个示例中，可以看到在函数中放了一个打印语句。之后不仅调用了该函数，而且根
In [3]: def addition():
Sick of me yet
In [2]: print_many()
In [1]: def print_many():
Hello function
Hello function
Hello function
Hello function
Hello function
>done
bash-3.2$ for ((i=0 ;i <5 ; i++))
bash-3.2$function shfunc()
...: sum = 1+1
Hi again function
do
Hello function
Hello
Hello function
Hello
Hello
....
Hello
·.：
：
第1童
shfunc
printf "Hello function\n"
function
function
ofunction
function
print
"Hello function"
，下面是一些函数的简单示例：
www.TopSage.com
DG
---
## Page 39
为了进行对比，我们将之前的Bash显示系统信息脚本也转化为函数，参见例1-5。
装指定的功能操作，然后通过main函数来执行整个脚本。
行的脚本非常适用，但是如果你计划创建一个可重复使用的工具，则应该创建函数，封
如果没有流程控制或main函数，所有代码在被加载时就会被立即执行。这对于一次性执
方法进行联合调用。关键取决于你加载模块之后的决定。
是如果你想在其他程序中再次使用这个脚本，可以独立地调用该函数，也可以使用main
在脚本中定义多个函数然后由一个main函数进行调用的方法十分普遍。主要原因之一就
中，然后使用main函数进行一次性调用。如果不太熟悉这种风格，你可能不知道，这种
鉴于我们对函数已有的经验，这个转换示例将我们之前脚本中的代码简单地放到函数
main()
#Main function that call other functions
def disk_func():
#Command2
import subprocess
#A System Information Gathering Script
#1/usr/bin/env python
例1-4：转换Python显示系统信息脚本:pysysinfo_func.py
在，我们回到显示系统信息的脚本，并将其转变成函数。见例1-4。
除了上面的几个示例外，这里还有一些简单示例，可以在你的机器上一起运行试试。现
#Command1
disk_func()
diskspace ="df"
subprocess.call([uname, uname_arg])
print
uname = "uname"
In [4]: addition()
...: print "1 + 1 = %s" % sum 
·.：
..：
www.TopSage.com
Python简介丨25
---
## Page 40
function main ()
function disk_func ()
#Command 2
function uname_func()
#Command 1
#A System Information Gathering Script
#!/usr/bin/env bash
例1-5：转换Bash显示系统信息脚本一
26
数，从而取代一行接一行的shell命令。我们也曾提到，模块实际上就是一段脚本，或者
了高中时期所学的数学知识。在之前的示例中，我们向你演示了如何在脚本中创建函
那么我们很难有正当的理由去留意它。恐怕你压根不会记得什么时候曾在便利店中使用
在学习新东西的过程中，总会有这样一个问题，那就是如果它十分抽象，类似微积分，
通过lmport语句实现代码复用
劳一下自己。
函数，并成功通过main函数实现了调用，那么应该说你干得已经相当不错了，可以好好
Python代码中的系统调用程序，将其变成自己的内容。如果可以在脚本中添加一些新的
员，编写程序的过程就是学习的过程。所以，此时我们强烈建议你修改这两个Bash和
学习到现在，你已经是一名能够使用Bash或Python编写简单函数的程序员了。作为程序
没有调用这两个函数。
后再运行一次。当再次运行时，你会发现输出结果彻底没有了，这是因为程序在执行时
和Python脚本中的main方法注释掉（在Bash或Python脚本的每一行行首加上一个#），然
数，然后通过main函数进行调用。如果这是你第一次使用函数，我们强烈建议你将Bash
看完Bash示例之后，你可能会觉得它与Python有相当多的相似之处。我们创建了两个函
Main
uname_func
$DISKSPACE
printf "Gathering diskspace information with the $DISKSPACE command: \n\n"
DISKSPACE="df -h"
$UNAME
" puo ws aa um unout wsis uiar, fud
UNAME="uname -a"
第1章
www.TopSage.com
bashsysinfo_func.sh
---
## Page 41
下面是IPython终端的输出结果：
明白我的意思。
要仅仅听我说，
代码以及执行脚本中哪个部分的代码进行控制，而不是一次将所有代码都执行一遍。不
以解决，这也正是我们使用函数的原因。如本例所示，函数允许我们对在什么时间执行
执行结果，应该怎么做呢？你的回答也许是这不可能。
码复用。那么问题就来了：如果只想执行一部份脚本，打印输出有关磁盘容量部分代码
本或程序的一部分从命令行来执行。使用“import”进行载人操作可以帮助我们实现代
好。但是，事实上这里面也存在一些问题。如果你计划执行Python代码，通常是作为脚
哇，结果非常棒，是吧？如果你加载了一个完全是Python代码的文件，看起来运行得很
操作：
如果这样做了，载人反倒不会成功。下面是我们在Noah的Macbook Pro笔记本上所做的
脚本文件载入到IPython中。记住你不需要特别指定载入文件的扩展名为.Py。.事实上，
文件，文件名为pysysinfo.py。在Python中，一个模块对应一个文件，反之亦然，我们将
函数对于代码复用如此重要。我们采用Python创建的第一个脚本是由一系列命令组成的
如果你已经关闭了IPython或Bash窗口，那么重新打开，我们会非常快地向你展示为什么
载人之前的显示系统信息的Bash和Python脚本，并且执行。
于将来在别的程序中进行复用。这也正是为什么你应该特别留意的原因。接下来，我们
说是文件中的一段代码。这没有什么特别，但是确实需要按特定的方式进行组织，以便
Tue Mar 4 21:17:34 PST 2008; r00t:xnu-1228.4.31~1/RELEASE_I386 i386
Darwin Macintosh-8.local 9.2.2 Darwin Kernel Version 9.2.2:
Gathering system information with uname command:
In [3]: import pysysinfo_func
/dev/diskis2
map -hosts
fdesc
devfs
/dev/diskos2
Filesystem
Darwin Macintosh-8.local 9.2.2 Darwin Kernel Version 9.2.2: /
In [1]: import pysysinfo
/dev/disk2s3
，自己也应亲自去试试。只要你加载一个包含多个命令的函数脚本，就会
466Gi
298Gi
1.0Ki
110Ki
93Gi
Size
240Gi
105Gi
1.0Ki
110Ki
88Gi
OBi
OBi
Used
www.TopSage.com
225Gi
193Gi
4.2Gi
Avail
OBi
Capacity
100%
100%
100%
100%
%96
。实际并非如此，这个问题完全可
/Volumes/EditingDrive
/Volumes/Backup
/net
/dev
/dev
Mounted on
/home
Python简介丨27
---
## Page 42
数的调用方式，如下所示：
Python中非常普遍。解决方法就是通过像下面这样修改脚本的最后几行从而改变main函
主目录下，打开另一个终端标签或窗口，查看脚本pysysinfo_func：
好现象。想知道为什么会获得相同的输出结果，只需要查看一下源码即可。如果你是在
现在我们使用不包含函数的脚本来获得相同的输出结果。你或许会有些迷惑，这是一个
功能吧，它会显示出所有可用的属所，如下所示：
首先，我们需要重新回顾一下之前已经介绍的技术。还记得可以使用Tab键的自动完成
我们提到的，仅调用打印磁盘容量的函数，而不用调用执行其他命令的函数的想法吗？
这时，修改之后的main方法没有被调用。因此，在代码中利用了这一技巧，我们就得到
现在，
可以看到这一应用的效果。
命令行执行。通过替换你脚本中相应位置的代码，或者载入脚本pysysinfo_func_2.py,
这是一个解决上述问题的比较常用的技巧。任何缩进在这个表达式之后的代码都可以从
可以作为一个脚本从命令行直接执行，也可以当成一个可复用的模块使用。这种需求在
结果，但是另一方面，在加载时，我们不希望一次获得所有的输出，而是希望模块既
了三个可以在其他程序中使用，或是可以在IPython shell中交互使用的函数。还记得之前
问题是之前创建的main函数再次出现。一方面我们希望在命令行运行脚本来获得输出
28
In [1]:import pysysinfo_func_2
#Main function that call other functions
/dev/disk2s3
map -hosts
fdesc
/dev/disk0s2
Filesystem
if
#Main function that call other functions
main()
def main():
/dev/disk1s2
devfs
def
，如果回到IPython解释器，并且载入这一新脚本，我们可以看到以下内容：
第1章
disk_func()
uname_func()
main():
disk_func()
uname_func()
466Gi
298Gi
1.0Ki
110Ki
Size
OBi
OBi
240Gi
105Gi
1.0Ki
110Ki
88Gi
Used
OBi
OBi
225Gi
193Gi
Avail
www.TopSage.com
4.1Gi
OBi
.
OBi
Capacity
100%
100%
100%
96%
Mounted on
/Volumes/EditingDrive
/Volumes/Backup
/home
/net
/dev
/dev
PDG
---
## Page 43
看一下：
们也运行了其他两个函数uname_func和main，这两个函数也是之前分别编写的。让我们
现了代码复用。我们可以载人以前写的代码，并且交互式地运行需要的部分。当然，我
在这个示例中，仅运行了文件中三个函数中的一个：调用的函数是disk_func。最终实
或许你现在已经意识到了，函数总是通过被调用，或是在函数名后加“()”来执行的。
字，我们就会看到pysysinfo_func_2.disk_func。让我们继续下一步，调用函数：
为扩展名的字节编译的（byte-compiled）Python文件。一且忽略了这些有双下划线的名
简介所涉及的内容。由于IPython也是一个常规的shell，所示它识别文件名，以及以.psc
在这个例子中，我们将忽略有双下划线的内容，因为这些是特殊方法，已经超出了本章
map -hosts
devfs
/dev/disk0s2
Filesystem
Darwin Macintosh-8.local 9.2.2 Darwin Kernel Version 9.2.2:
Gathering system information with uname command:
In [4]: pysysinfo_func_2.main()
Darwin Macintosh-8.local 9.2.2 Darwin Kernel Version 9.2.2:
In [3]: pysysinfo_func_2.uname_func()
/dev/disk2s3
/dev/disk1s2
mapauto_home
Filesystem
In [2]: pysysinfo_func_2.disk_func()
map-hosts
fdesc
/dev/disk0s2
pysysinfo
In [2]: pysysinfo_func_2.
Tue Mar 4 21:17:34 PST 2008; r00t:xnu-1228.4.31^1/RELEASE_I386 i386
lesc
1.0Ki