同时，上面还有一个循环，迭代次数为100,000次并调用AddrGetter函数。这样做是为了强制进行JIT优化。
AddrGetter函数中有一个for循环，虽然它什么也不做，但显然有一个特殊的用途。并且[saelo](https://github.com/saelo/cve-2018-4233/blob/master/pwn.js#L86
"saelo")在类似漏洞的利用代码的注释中也说过，“某些代码可以避免内联”，这意味着JIT编译器可以通过内联某些函数来实现优化，但是如果某些函数像这样复杂的话，JIT编译器就不会通过内联进行优化了。不过，即使移除这个循环，在这里也并无大碍——所以，这里只是为了确保这些函数不会内联。
这里还有一个名为AddrGetter的函数，这个函数的功能很简单——调用match方法并返回array[0]。通过Symbol，我们能够以不同的方式调用match方法，不过，我们也可以用"abc".match(reg)代替它，这看起来要更简洁一些。这个函数会因第4步的循环而被JIT化。也就是说，它会被编译成机器代码。我们知道，由于JIT编译器会进行优化，所以JIT自然会知道数组元素为双精度浮点型，所以，它可能会返回一个双精度浮点型数组，并且不再进行类型检查。
然而，这些应该不会引发安全问题，因为一旦某个东西在JIT化的代码中出现副作用的话，它就会被丢弃，对吗？结果到底如何，我们拭目以待。(副作用是可以将数组从双精度浮点型数组变成其他类型数组的东西)。
现在，我们创建一个名为regexLastIndex的对象，并覆盖toString方法。一旦该函数被执行，array[0]的值就会被改变，并且该函数将返回“0”。我们知道，该数组最初是一个双精度浮点型数组(ArrayWithDouble)，但是一旦我们将元素改为对象，数组就会变为一个占据连续内存空间的数组（ArrayWithContigous），这意味着第一个元素现在是指针，而不再是数字。(这就是所谓的副作用)。
最后，将reg.lastIndex分配给新创建的对象regexLastIndex。所以现在，这个函数已经基本就绪，它将数组的第一个元素设置为我们指定的值，只是它还没有被执行。不过，lastIndex一旦被访问，就会执行toString函数。
lastIndex是正则表达式实例的读/写整数属性，指定下次匹配时从哪一个索引开始。
如果RegEx是从lastIndex属性读取相关数据，以确定下次匹配时从哪里开始的话，那么，我们也许能欺骗经过优化的JIT型代码，使其将该数组视为双精度浮点型（ArrayWithDouble），并将其元素转换为指向对象的指针。
这就是再次执行AddrGetter的原因。此时，这个函数将被JIT化，经过优化的JIT型代码将执行一个功能与我们原来的正则表达式等价的正则表达式，但现在具体代码会有些不同。也就是说，该函数在JIT化之后，lastIndex属性也随之改变了。
大家还记得前面表示黏性的“y”吗？
    sticky属性反映搜索是否是黏性的（仅从该正则表达式的lastIndex属性指示的索引处开始搜索字符串）。对于某个正则表达式对象来说，属性sticky是只读属性。
现在，内部RegEx代码必须查看lastIndex属性，但它注意到——它并不是数字，而是一个对象，所以，它会试图通过调用toString将结果转换为数字，而这会触发对数组的赋值操作。
现在，该数组将会被更新，并且该数组的第一个元素被设置为我们的对象。匹配结束后，我们最终通过AddrGetter返回第一个元素。问题就出在这里。JIT化的函数仍然返回第一个元素，并且不进行任何类型检测。
这里的主要问题是，在相关函数JIT化后，Javascript引擎仍然认为数组没有发生变化，并仍然将返回的数组的第一个元素作为双精度浮点型看待，但事实上，它已经变为一个指向对象的指针，即我们泄漏的地址。
## Cleaning the Exploit Code
在WebKit官方网站的一篇讲解调试技术[文章](https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/
"文章")中，介绍了许多在调试过程中非常有用的环境变量，就这里来说，我们最感兴趣的一个环境变量就是JSC_reportDFGCompileTimes，它能告诉我们通过DFG或FTL进行优化的函数所用的编译时间。另外，我还在封装函数addrof中添加了一个print语句，以显示具体时间。
    function addrof(val) {
      for (var i = 0; i op()) {
        ...
        case RegExpTest:
            // Even if we've proven know input types as RegExpObject and String,
            // accessing lastIndex is effectful if it's a global regexp.
            clobberWorld();
            setNoneCellTypeForNode(node, SpecBoolean);
            break;
        case RegExpMatchFast:
            ...
        ...
    }
这是一个非常大的switch语句，其作用是从图中获取一个节点并检查它的操作码。其中，有一个case子句是用来检查regExpMatchFast的。有趣的是，在这个子句的上面，还对RegExpTest进行了检查，如果满足条件的话就会调用clobberWorld——我们知道，这意味着JIT不再信任对象的结构并且退出。需要注意的是，这里的注释也很有意思：
    Even if we've proven know input types as RegExpObject and String, accessing lastIndex is effectful if it's a global regexp.
所以我猜他们确实想到了访问lastIndex会执行导致副作用的Javascript代码，从而破坏所做的所有假设......但是regExpMatchFast被遗忘了。
这的确很酷，不是吗？
## Resources
  * [test.js](https://gist.github.com/LiveOverflow/ee5fb772334ec985094f77c91be60492 "test.js")
  * [JavaScriptCore CSI: A Crash Site Investigation Story](https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/ "JavaScriptCore CSI: A Crash Site Investigation Story")
  * [LinusHenze WebKit-RegEx-Exploit](https://github.com/LinusHenze/WebKit-RegEx-Exploit "LinusHenze WebKit-RegEx-Exploit")
  * [Saelo cve-2018-4233](https://github.com/saelo/cve-2018-4233/blob/master/pwn.js "Saelo cve-2018-4233")
  * [Vulnerability Patch](https://github.com/WebKit/webkit/commit/7cf9d2911af9f255e0301ea16604c9fa4af340e2?diff=split#diff-fb5fbac6e9d7542468cfeed930e241c0L66 "Vulnerability Patch")
  * [Video Explanation](https://www.youtube.com/watch?v=IjyDsVOIx8Y "Video Explanation")