The particular collection of attributes we chose allows
a wide range of possible policies. We designed the imple-
mentation to make it easy to add other attributes, should
that be required by the policies of applications that we
failed to anticipate. A partial list of KeyNote attributes for
IPsec is contained in Appendix 4. For the full list, consult
the OpenBSD manual pages.
3.3. Policies for Passphrase Authentication
If passphrases are used as the IKE authentication
method, KeyNote policy control may be used to directly
authorize the holders of the passphrases. Passphrases are
encoded as KeyNote principals by taking the ASCII string
corresponding to the passphrase preﬁxed with the string
“passphrase:” Thus, the following policy would allow
anyone knowing the passphrase “foobar” to establish an
SA with the ESP [14] protocol.
Authorizer: "POLICY"
Licensees: "passphrase:foobar"
Conditions:
app domain == "IPsec Policy"
&& esp present == "yes" ;
Using the passphrase: tag requires policies to
be kept private. To avoid this, a hashed version of
the passphrase may be used instead (using for exam-
ple the passphrase-sha1-hex: preﬁx).
In the
previous example, this would be passphrase-sha1-
hex:8843d7f92416211de9ebb963ff4ce2812-
5932878).
3.4. Policies for X.509-based Authentication
More interesting is the interaction between KeyNote
policy and X.509 public-key certiﬁcates for authentica-
tion. Most IKE implementations (including ours) allow
the use of X.509 certiﬁcates for authentication. Further-
more, there exist a number of commercial tools that let
administrators manage large collections of users using
X.509. Allowing for interoperability with these imple-
mentations is a good test of our architecture and can make
transition to a KeyNote-based infrastructure considerably
smoother.
Implementing this interoperability is straightforward:
KeyNote policies may be used to delegate directly to
X.509 certiﬁcates. The principals speciﬁed may be the
certiﬁcates themselves (in pseudo-MIME format, using
the x509-base64: preﬁx), the subject public key, or
the Subject Canonical Name. An example is given in Fig-
ure 3.4.
For each X.509 certiﬁcate received and veriﬁed as part
of an IKE exchange, an ad hoc KeyNote credential is gen-
erated. This credential maps the Issuer/Subject keys of
the X.509 certiﬁcate (from the respective ﬁelds) to Au-
thorizer/Licensees keys in KeyNote. Thus, as chains of
X.509 certiﬁcates are formed during regular operation,
corresponding chains of KeyNote credentials are formed.
This allows policies to delegate to a CA and have the same
restrictions apply to all users certiﬁed by that CA. Speciﬁc
users may be granted more privileges by direct authoriza-
tion in the host’s policy.
3.5. Policies for KeyNote Credentials
KeyNote credentials may be passed directly during the
IKE exchange, in the same manner as X.509 certiﬁcates.
This method offers the most ﬂexibility in policy speciﬁ-
cation, as it allows principals to further delegate authority
to others through arbitrarily complex graphs of authoriza-
tion. Any signed KeyNote credentials received during the
IKE exchange are passed to the KeyNote interpreter di-
rectly as part of the query.
KeyNote credentials are especially useful in the remote
administration case, where the policies of many IPsec end-
points are controlled by a central administrator. Here, the
policy of each host would delegate all authority to the
public key of the central administrator. The administra-
tor would then issue credentials that contain the details of
the policy under which they were issued. These credentail
are presented as part of each IKE exchange by any host re-
questing access. This eliminates the need to update large
numbers of machines as the details of organizational poli-
cies change. Adding a new host is accomplished by hav-
ing the administrator issue a new credential for that host;
that host may then use the newly-issued credential to com-
municate with any other host that obeys the above policy.
No policy changes are necessary to these hosts. Revok-
ing access to a host is implemented through short-lived
credentials. New credentials are made available periodi-
cally through a WWW or FTP server; clients can down-
load them from there, without any security implications
(since the credentials are signed, their integrity is guar-
anteed). If credential conﬁdentiality is an issue, these cre-
dentials could be encrypted with the public key of the user
before they are made available.
Regardless of
the authentication method in use,
isakmpd calls KeyNote to determine whether each pro-
posed SA should be established. After taking into consid-
eration policies, credentials, and the attributes pertinent
to the SA, KeyNote returns a positive or negative answer.
In the former case, the protocol exchange is allowed to
proceed as usual. In the latter, an informational message
is sent to the remote IKE daemon and the exchange is
dropped. Note that, if an administrator were to manually
establish SPD rules (by directly manipulating the SPD),
KeyNote and the SPD might disagree; in that case, no SA
would ever be established and no packets would be sent
out for that communication ﬂow (since the SPD would re-
quire an SA).
The basic data ﬂows for KeyNote-controlled IPsec in-
put and output processing are given in Figures 2 and 3,
respectively.
Input processing begins with a packet arriving at a net-
work interface (#1 in Figure 2). The Security Policy
Database is consulted (#2) and one of three actions is fol-
lowed. If the packet is an IPsec packet, it is sent (#3a)
to the IPsec processing code, which will consult the SA
Database (#11) to process the packet; the decapsulated
If
packet is then fed back to the IP input queue (#12).
Authorizer: "POLICY"
Licensees: "DN:/CN=Certification Authority Foo/Email=PI:EMAIL"
Conditions:
...
Figure 1. Sample credential with X.509 DN as Licensee
Kernel
User Mode
12: Feed back to input processing
IPSec Processing
11: consult SA db
SA Database
4: Query SA Database
9: update SA database
3a: Process
3b: Send to 
transport, route,
or discard.
3c: Trigger SA setup
2. Filters applied
IP Input routine
SA Setup
6: Initiate IKE
IKE Daemon
7: Do IKE exchange
8: consult policies/credentials
5: Consult policy
10: update filter rules
KeyNote Interpreter
8a: update policies/credentials
1: Packet arrives
SPD
(KeyNote Language)
Policies&credentials
Figure 2. KeyNote-Controlled IPsec Input Processing
the SPD says that the packet should just be accepted, it is
sent (#3b) to the corresponding higher-layer protocol, or
forwarded, as appropriate. If the SPD says that the packet
should be dropped, no further processing is done. Other-
wise (#3c), the Security Association setup process is trig-
gered. The SA Database is consulted (#4); if an SA is
found there, the packet is dropped because it should have
already been sent as an IPsec packet (and it was not, or
path #3a would have been followed). Next, the Policies
and Credentials database is consulted (#5); this is done by
calling the KeyNote interpreter, supplying it the relevant
details of the packet (addresses, protocol, ports, etc.). The
KeyNote interpreter, in turn, consults its database of poli-
cies and credentials, and determines whether the packet
should be just accepted, dropped, or needs IPsec protec-
tion. If the latter is the case, the IKE daemon is triggered
(#6). It establishes SAs with its peer (#7), during which
process it will also need to consult the policy and creden-
tials database (#8), and may also update it with additional
credentials acquired during the IKE exchange. The SA
and SPD Databases are then updated (#9, #10) as nec-
essary based on the information negotiated by IKE. The
unprotected packet that triggered the SA establishment is
dropped.
A host’s
local policy is given in a text ﬁle
(/etc/isakmpd.policy) that contains KeyNote pol-
icy assertions.
Output processing starts when a packet arrives (#1 in
Figure 2) at the IP output code from either a higher-level
protocol or from the forwarding code. The Security Pol-
icy Database is consulted (#2) to determine whether the
packet should be protected with IPsec or not; if no protec-
tion is needed, the packet is simply sent out (#3a). Oth-
erwise, it is sent to the IPsec processing code (#3b). A
lookup (#4) in the SA database determines whether an SA
for this packet already exists; if so, the appropriate trans-
forms are applied and the resulting packet is output (#5a).
If an SA did not exist, the SA setup process is invoked
(#5b). The system policy (as contained in the SPD) is con-
sulted (#6), and if policy relevant to this packet is found,
the IKE exchange is triggered (#7), otherwise the packet is
simply dropped. During the IKE exchange (#8), the local
Kernel
User Mode
1: Packet arrives
IP Output routine
3b: IPSec possible
IPSec Processing
4: consult SA db
5b: Trigger SA setup
5a: SA fully set up, 
process and output
3a: No IPSec processing needed
SA Database
11: update SA database
SA Setup
7: Initiate IKE
IKE Daemon
8: Do IKE exchange
9: consult policies/credentials
6: Consult policy
12: update filter rules
KeyNote Interpreter
10: update policies/credentials
2: Consult SPD
SPD
(KeyNote Language)
Policies&credentials
Figure 3. KeyNote-Controlled IPsec Output Processing
policy and credentials are consulted (#9), and any creden-
tials fetched from the peer during the exchanged are sub-
sequently stored (#10) in the local database. If the IKE
exchange results in SAs being created, these are stored
back in the SA database (#11). Finally, the SPD is up-
dated (#12) if necessary, and subsequent packets can be
processed (the original unprotected packet is dropped).
It should be obvious from the above that, in our archi-
tecture, the SPD has become a policy cache; the “real”
policy is expressed in terms of KeyNote assertions and
credentials. There are two ways of populating the cache.
The ﬁrst, described above, is to populate it on-demand.
If a ﬁlter rule does not exist in the SPD, KeyNote is in-
voked to determine what should be done with the packet;
based on the response from KeyNote, a rule is installed
in the SPD that makes further KeyNote queries unnec-
essary. The second approach is to analyze all policies
at startup time and populate the SPD accordingly. This
avoids the cost of a cross-domain call (from the kernel to
a userland policy daemon) per cache miss, but requires
re-initialization of the SPD every time the policy changes.
3.6. Policy Updates
Changing policy in the simple case is straightfor-
ward: the new policies are placed in isakmpd.conf.
When existing IPsec SAs expire and are subsequently re-
negotiated, or when new IPsec SAs are established, the
new policy will automatically be taken into consideration.
If we want to new policy to be applied to existing IPsec
SAs, we can simply examine the existing SAs in the con-
text of the new policy, pretending we are now establishing
them. If the updated policy permits the old SAs, no further
action is required; otherwise, they are deleted.
3.7. Performance
The overhead of KeyNote in the IKE exchanges is neg-
ligible compared to the cost of performing public-key
operations. Assertion evaluation (without any crypto-
graphic veriﬁcation) is approximately 120 microseconds
on a modern Pentium processor. Because evaluating the
base KeyNote policies themselves does not require the
veriﬁcation of digital signatures, the KeyNote compliance
check is generally very fast: with a small number of pol-
icy assertions, initialization and veriﬁcation overhead is
approximately 130 microseconds. This number increases
linearly with the size and the number of policy assertions
that are actually evaluated, each such assertion adding
approximately 20 microseconds. The generation of the
shadow delegation tree is also very low cost. When using
KeyNote credentials for both authentication and policy
speciﬁcation, the cost of public-key signature veriﬁcation
is incurred. This cost is identical to that of the standard
X.509 case (and indeed to that of any other public-key
authentication mechanism). Signatures in KeyNote cre-
dentials are veriﬁed as needed and only the ﬁrst time they
are used — the veriﬁcation result is cached and reused.
Credential expiration is handled by the general KeyNote
processing, as part of the Conditions ﬁeld; thus policies
and credentials that have expired do not contribute in au-
thorizing an SA and no special handling is needed. In all
cases, the cost of KeyNote policy processing is several or-
ders of magnitude lower than the cost of performing the
public-key operations that it is controlling.
KeyNote policy control contributed only a negligible
increase in the code size of the OpenBSD IPsec imple-
mentation. To add KeyNote support to isakmpd we had
to add about 1000 lines of “glue” code to isakmpd. Al-
most all of this code is related to data structure manage-