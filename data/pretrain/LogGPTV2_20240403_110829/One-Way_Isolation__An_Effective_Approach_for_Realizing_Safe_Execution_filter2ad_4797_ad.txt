not maintained in the logs, but simply applied to the object.
In effect, the state of the object captures the net effect of all
such operations, so there is no need to maintain them in a
log. Thus, only information about ﬁle or directory creation
and deletion, and those that concern addition or removal of
links are maintained in the log. In addition, to simplify the
implementation, we separate the effects of creating or delet-
ing ﬁle system objects from the effect of adding or deleting
links. This means that the creation of a ﬁle would be repre-
sented in our logs by two operations: one to create the ﬁle
object, and another to link it to the directory in which the
object is created. Similarly, a rename operation is split into
an operation to add a link, another to remove a link, and a
third (if applicable) to delete the ﬁle originally referenced
by the new name. As in previous sections, ﬁle objects in-
volved in these operations are identiﬁed by inode numbers
rather than path names.
Speciﬁcally, the log contains one of the following opera-
tions:
(cid:15) create and delete operations denote respectively the
creation of a ﬁle or a directory, and are associated with
the created ﬁle system object.
(cid:15) addlink and rmlink operations denote respectively the
addition and deletion of a link from a directory to a ﬁle
system object. These operations are associated with
the ﬁle system object that is the target of the link, and
have two operands. The ﬁrst is the inode number of the
parent directory and the second is the name associated
with the link.
The effect of some of these operations is superceded by
other operations, in which case only latter operations are
maintained. For instance, a delete operation supercedes a
In addition to removing redundant operations from the
logs, we also reorder operations that do not interfere with
each other in order to further simplify the log. In this con-
text, note that two valid addlink operations in the log associ-
ated with any ﬁle system object are independent. Similarly,
any addlink operation on the object is independent of an rm-
link operation. (Both these statements are true only when
we assume that operations that are superceded or canceled
by others have already been removed from the log.)
Based on this discussion, we can see that a condensed log
associated with a ﬁle system object can consist of operations
in the following order:
(cid:15) zero or one create operation. Since the ﬁle system ob-
ject does not exist before creation, this must be the ﬁrst
operation in the log, if it exists.
(cid:15) zero or more rmlink operations. Note that multiple rm-
link operations are possible if the ﬁle system object
was originally referenced by multiple links. Moreover,
the parent directories corresponding to these rmlink
operations must all have existed at the time of creation
of SEE, or otherwise an addlink operation (to link this
object to the parent directory) must have been executed
before the rmlink. In that case, the addlink and rm-
link operations would have cancelled each other out
and hence won’t be present in the condensed log.
(cid:15) zero or more addlink operations. Note that multiple
addlink operations are possible if the object is being
referenced by multiple links. Also, there must be at
least one addlink operation if the ﬁrst operation in the
log is a create operation.
(cid:15) zero or one delete operation. Note that when a delete
operation is present, there won’t be any addlink opera-
tions, but there may be one or more rmlink operations
in the log.
Given the condensed logs maintained with the objects in the
inode table, it seems straightforward to carry out the com-
mit operation. The only catch is that we only have the rel-
ative ordering of operations involving a single ﬁle system
object, but lost information about the global ordering of op-
erations across different objects. This raises the question as
to whether the meanings of these operations may change as
a result. In this context, we make the following observa-
tions:
(cid:15) Creation and deletion operations do not have any de-
pendencies across objects. Hence the loss of global
ordering regarding these operations does not affect the
semantics of these operations.
(cid:15) Rmlink operation depends upon the existence of parent
directory, but nothing else. This means that as long as
it is performed prior to the deletion of parent directory,
its meaning will be the same as is it was executed in
the global order in which it was executed originally.
(cid:15) Addlink operation depends on the creation of the par-
ent directory (i.e., the directory in which the link will
reside) and the target object. Moreover, an addlink
operation involving a given parent directory and link
name has a dependency on any other rmlink operation
involving the same parent directory and link names.
This is because the addlink operation cannot be per-
formed if a link with the same name is present in the
parent directory, and the execution of rmlink affects
whether such a link is present. Thus, the effect of ad-
dlink operations will be preserved as long as any par-
ent directory creation, as well as relevant rmlink oper-
ations are performed before.
Among operations that have dependency, one of the two
possible orders is allowable. For instance, an rmlink opera-
tion cannot precede the existence of either the parent direc-
tory or the target of the link. Similarly, an addlink operation
cannot precede an rmlink operation with the same parent
directory and name components. (Recall that we have de-
composed a rename operation into rmlink (if needed), ad-
dlink and an object delete (if needed) operations, so it can-
not happen that an addlink operation is invoked on a par-
ent directory when there is already another link with the
same name in that directory.) This means that even though
the global ordering on operations has been lost, it can be
reconstructed. Our approach is to traverse the ﬁle system
within the temporary storage, and combine the condensed
logs while respecting the above constraints, and then exe-
cute them in order to implement the commit step.
Atomic Commits. As mentioned before, the committing of
modiﬁcations should be done atomically in order to guaran-
tee ﬁle system consistency. The natural way to do atomic
operations is through ﬁle-locking: to prevent access to all
the ﬁle system objects that are to be modiﬁed by the com-
mitting process. We use Linux mandatory locks to achieve
this. Immediately before the committing phase, a lock is
applied to the list of to-be-committed ﬁles, so that other
processes do not gain access to these ﬁles. Only when the
committing is completely done, the locks on these ﬁles are
released.
5 Discussion
In the previous two sections, we discussed aspects of IFS,
our ﬁlesystem proxy. In this section, we discuss how the
other components of SEE ﬁt together, including the compo-
nents that support restriction, network level redirection, and
user interface.
Implementing Restriction at System Call Layer. The
actions of SEE processes are regulated by a kernel-resident
policy enforcement engine that operates using system call
interposition. This enforcement engine generally enforces
the following policies in order to realize SEEs:
(cid:15) File accesses. Ensure that SEE processes can access
only the ﬁles within the IFS. Access to device spe-
cial ﬁles are not allowed, except for “harmless” devices
like tty’s and /dev/null.
(cid:15) Network access. Network accesses for which an ex-
plicit (static) redirection has been set up are allowed.
The redirection may be to another process that exe-
cutes within a different SEE, or to an intelligent proxy
for a network service.
(Note that network ﬁle ac-
cess operations do not fall in this category — they are
treated as ﬁle operations.)
(cid:15) Interprocess communication (IPC). IPC operations are
allowed among the processes within the same SEE.
However, no IPC may take place between SEE and
non-SEE processes. An exception to this rule is cur-
rently made for X-server access.
(To be safe, we
should restrict X-server accesses made by SEE appli-
cations so that they don’t interfere with X-operations
made by non-SEE applications. However, our imple-
mentation does not currently have the ability to enforce
policies at the level of X-requests.)
(cid:15) Signals and process control. A number of operations
related to process control, such as sending of signals,
are restricted so that a process inside an SEE cannot
interfere with the operation of outside processes.
(cid:15) Miscellaneous “safe” operations. Most system calls
that query system state (timers and clocks, ﬁle system
statistics, memory usage, etc.) are permitted within
the SEE. In addition, operations that modify process-
speciﬁc resources such as timers are also permitted.
(cid:15) Privileged operations. A number of privileged opera-
tions, such as mounting ﬁle systems, changing process
scheduling algorithms, setting system time, and load-
ing/unloading modules are not permitted within SEE.
Note that the exact set of rules mentioned above may not
suit all applications. For instance, one may want to disallow
all network accesses for an untrusted application, but may
be willing to allow some accesses (e.g, DNS and WWW)
for applications that are more trusted. To support such cus-
tomization, we use a high-level, expressive policy speciﬁ-
cation language called BMSL [29, 34] in our implemen-
tation. This language enables convenient speciﬁcation of
policies that can be based on system call names as well
as arguments. The kinds of policies that can be expressed
include simple access control policies, as well as policies
that depend on history of past accesses and/or resource us-
age. In addition, the language allows response actions to
be launched when policies are violated. For instance, it can
be speciﬁed that if a process tries to open a ﬁle f, then it
should be redirected to open another ﬁle f 0. Efﬁcient en-
forcement engines are generated by a compiler from these
policy speciﬁcations. More details about this language and
its compiler can be found in [34].
In our experience, we have been able to specify and en-
force policies that allow a range of applications to function
without raising exceptions, and the experimentation section
describes some of our experiences in this regard.
Support for Network Operations. Support for network
access can be provided while ensuring one-way isolation
semantics in the following cases:
(cid:15) access to services that only provide query (and no up-
date) functionality, e.g., access to domain name service
and informational web sites, can be permitted by con-
ﬁguring the kernel enforcement engine so that it per-
mits access to certain network ports on certain hosts.
(cid:15) communication with processes running within other
SEEs can be supported by redirecting network ac-
cesses appropriately. This function is also provided by
the kernel enforcement engine.
(cid:15) accesses to any service can be allowed, if the access
is made through an intelligent proxy that can provide
isolation semantics.
Currently, our implementation supports the ﬁrst two cases.
Use of distributed SEEs provides an easy way to permit iso-
lated process to access any local server — one can simply
run the server in isolation, and redirect accesses by the iso-
lated process to this isolated server. However, for servers
that operate in a different administrative domain, or servers
that in turn access several other network functions, running
the server in isolation may not always be possible. In such
cases, use of an intelligent proxy that partially emulates the
server function may be appropriate.
Intelligent proxies may function in two ways. First, they
may utilize service-speciﬁc knowledge in ﬁltering requests
to ensure that only “read” operations are passed on to a
server. Second, they may provide some level of support
for “write” operations, while containing the effects within
themselves, and propagating the results to the real server
only at the point of commit. For instance, an email proxy
may be implemented which simply accepts email for deliv-
ery, but does not actually deliver them until commit time.
Naturally, such an approach won’t work in the case when a
response to an email is expected.
Another limitation of our current implementation is that
it does not provide support for atomic commits across dis-
tributed SEEs.
User Interface.
In this section, we describe the support
provided in our implementation for users to make decisions
regarding commits.
Typically, an SEE is created with an interactive shell run-
ning inside it. This shell is used by the user to carry out
the tasks that he/she wishes to do inside the SEE. At this
point, the user can use arbitrary helper applications to ana-
lyze, compare, or check the validity of the results of these
tasks. For instance, if the application modiﬁes just text ﬁles,
utilities like diff can point out the differences between the
old and new versions. If documents, images, video or audio
ﬁles are modiﬁed, then corresponding document or multi-
media viewers may be used. More generally, users can em-
ploy the full range of ﬁle and multimedia utilities or cus-
tomized applications that they use everyday to examine the
results of SEE execution and decide whether to commit.
Before the user makes a ﬁnal decision on committing, a
compact summary of ﬁles modiﬁed within the SEE is pro-
vided to the user. If the user does not accept the changes,
she can just roll them back at a click of button. If she ac-
cepts the changes, then the commit criteria is checked. If
it is satisﬁed, then the commit operation proceeds as de-
scribed earlier. If not, the user may still decide to proceed
to commit, but this is supported only in certain cases. For
instance, if the whole structure of the ﬁle system has been
changed outside the SEE during its operation, there won’t
be a meaningful way to commit. For this reason, overrid-
ing of commit criteria is permitted only when the conﬂict
involves a plain ﬁle.
Recall that SEEs may be used to run untrusted and/or ma-
licious software. In such cases, additional precautions need
to be taken to ensure that this software does not interfere
with the helper applications, subverting them into providing
a view of system state that looks acceptable to the user. In
particular, we need to ensure that untrusted processes can-
not interfere with the operation of helper application pro-
cesses, or modify the executables, libraries or conﬁgura-
tion ﬁles used by them. To ensure this, helper applications
can be run outside of the SEE, but having a read-only ac-
cess to the ﬁle system view within the IFS using a special
path name. This approach ensures that the helper applica-
tion gets its executable, libraries and conﬁg ﬁles from the
host ﬁle system. Another advantage of doing this is that
any modiﬁcations to the system state made by helper ap-
plications do not clutter the user interface that reports ﬁle
modiﬁcations that were carried out within the SEE. (While
it may seem that helper applications are unlikely to mod-
ify ﬁles, this is not true. For instance, running the bash
shell causes it to update the .bash history ﬁle; running a
browser updates its history and cache ﬁles; and so on.)
6. Evaluation
In this section, we present an evaluation of the function-
ality and performance of our SEE implementation.
6.1. Evaluation of Functionality
Untrusted applications. We describe two applications
here: a ﬁle renaming utility freeware called rta [33], which
traverses a directory tree and renames a large number of
ﬁles based on rules speciﬁed on the command line, and
a photo album organizer freeware called picturepages
[30]. These applications ran successfully within our SEE.
Our implementation includes a GUI that summarizes ﬁles
modiﬁed in the SEE so as to simplify user’s task of decid-
ing whether the changes made by the application are accept-
able. Using this GUI, we checked that the modiﬁcations
made by these applications were as intended: renaming of
many ﬁles, and creation of several ﬁles and/or directories.
We were then able to commit the results successfully.
To simulate the possibility that these programs could
be malicious, we inserted an attack into picturepages
that causes it to append a new public key to the ﬁle
.ssh/authorized keys. (This attack would enable the