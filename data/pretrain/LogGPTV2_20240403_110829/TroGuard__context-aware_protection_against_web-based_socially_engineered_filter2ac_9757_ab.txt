classes. The network attributes are the weakest for distinguishing
game samples as they do not make regular connections to network
very often.
Figure 6 also shows the precision results for the application type
learning and classiﬁcation component of TROGUARD. As can be
seen, using all of the attributes results in application marking with
a higher accuracy. Comparing the recall and precision results using
Interaction attributes for the browser class, the classiﬁer has been
selective in marking application samples as the browser function-
ality class resulting in high precision. Additionally, many of the
graphic editor, media player and IDE samples are marked falsely
as browsers resulting in a poor precision rates. Based on both re-
call and precision results, the user interactivity attribute contributes
the least to the overall accuracy. In addition to the use of different
GUI schemes in applications, this may be attributed to several ap-
plications executing in the background while they are not the active
window on screen, i.e., zero user interactivity.
Figure 7 shows the accuracy results from a different perspec-
tive, providing more details on how applications were classiﬁed
correctly or confused by mistake by the TROGUARD framework.
In particular, we present one 10x10 gray-scale confusion matrix for
each set of attributes, e.g., File. To further clarify, each (i, j) el-
ement in a confusion matrix represents how many of application
data points of the i-th functionality class was marked (classiﬁed) as
the j-th functionality class2. Therefore, the diagonal elements de-
note the samples that were classiﬁed correctly. Clearly, out of the
four sets of attributes, CPU–Mem attributes are the most discrim-
inative, while Network attributes do relatively well except for the
data points labeled as the calculator functionality class. Regarding
the least contributing attribute set (Interaction), as the Media Player
applications do not require high user interaction, most of their cor-
responding data points (column 6) have been classiﬁed wrongly.
2The functionality class numbering is as follows: Browser (0), Of-
ﬁce (1), Game (2), IDE (3), IM (4), Graphic Editor (5), Media
Player (6), Video Editor (7), Audio Editor (8), and Calculator (9).
(cid:4)(cid:19)(cid:11)(cid:25)(cid:25)(cid:18)(cid:15)(cid:18)(cid:14)(cid:13)(cid:1)(cid:2)(cid:25)
(cid:18)
(cid:11)
(cid:13)
(cid:14)
(cid:20)
(cid:21)
(cid:22)
(cid:18)
(cid:25)
(cid:25)
(cid:14)
(cid:24)
(cid:23)
(cid:20)
(cid:22)
(cid:4)
(cid:14)
(cid:20)
(cid:11)
(cid:7)
(cid:19)
(cid:18)
(cid:24)
(cid:22)
(cid:26)
(cid:18)
(cid:13)
(cid:6)
(cid:25)
(cid:12)
(cid:18)
(cid:17)
(cid:23)
(cid:11)
(cid:24)
(cid:7)
(cid:19)
(cid:13)
(cid:11)
(cid:22)
(cid:21)
(cid:28)
(cid:22)
(cid:5)
(cid:24)
(cid:14)
(cid:13)
(cid:11)
(cid:14)
(cid:9)
(cid:24)
(cid:14)
(cid:25)
(cid:28)
(cid:22)
(cid:24)
(cid:3)
(cid:14)
(cid:16)
(cid:11)
(cid:25)
(cid:25)
(cid:14)
(cid:8)
(cid:30)
(cid:30)
(cid:30) (cid:31)(cid:30)(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:3)(cid:24)(cid:22)(cid:28)(cid:25)(cid:14)(cid:24)
(cid:34)(cid:30)
(cid:30)
(cid:30)
(cid:7)(cid:11)(cid:20)(cid:14)
(cid:30) (cid:31)(cid:30)(cid:30)
(cid:30)
(cid:8)(cid:14)(cid:25)(cid:25)(cid:11)(cid:16)(cid:14)
(cid:30)
(cid:30)
(cid:6)(cid:13)(cid:18)(cid:26)(cid:22)(cid:24)
(cid:30)
(cid:30)
(cid:6)(cid:20)(cid:11)(cid:18)(cid:19)
(cid:32)(cid:30)
(cid:30)
(cid:7)(cid:24)(cid:11)(cid:23)(cid:17)(cid:18)(cid:12)(cid:25)
(cid:30)
(cid:30)
(cid:5)(cid:22)(cid:28)(cid:21)(cid:19)(cid:22)(cid:11)(cid:13)
(cid:30)
(cid:30)
(cid:9)(cid:14)(cid:11)(cid:13)(cid:14)(cid:24)
(cid:30)
(cid:30)
(cid:8)(cid:27)(cid:19)(cid:26)(cid:18)(cid:20)(cid:14)(cid:13)(cid:18)(cid:11)
(cid:30)
(cid:4)(cid:22)(cid:20)(cid:23)(cid:24)(cid:14)(cid:25)(cid:25)(cid:18)(cid:22)(cid:21) (cid:30)
(cid:30) (cid:31)(cid:30)(cid:30)
Figure 8: Classiﬁcation Using Intermediate Features
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30) (cid:31)(cid:30)(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30) (cid:31)(cid:30)(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30) (cid:31)(cid:30)(cid:30)
(cid:30)
(cid:30)
(cid:11)
(cid:20)
(cid:6)
(cid:30) (cid:31)(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30) (cid:31)(cid:30)(cid:30)
(cid:30)
(cid:30) (cid:33)(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:18)
(cid:26)
(cid:19)
(cid:27)
(cid:8)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30)
(cid:30) (cid:31)(cid:30)(cid:30)
(cid:30)
(cid:1)
(cid:25)
(cid:14)
(cid:23)
(cid:29)
(cid:10)
(cid:21)
(cid:22)
(cid:18)
(cid:26)
(cid:11)
(cid:12)
(cid:18)
(cid:19)
(cid:23)
(cid:23)
(cid:2)
Table 2: Training times (seconds)
#Attr.
Time
File Network CPU-Mem Inter.
44
0.49
20
0.14
9
0.4
0.19
8
All
81
0.82
(cid:23)
(cid:14)
(cid:22)
(cid:17)
(cid:21)
(cid:21)
(cid:20)
(cid:19)
(cid:18)
(cid:1)
(cid:17)
(cid:16)
(cid:15)
(cid:14)
(cid:13)
(cid:13)
(cid:12)
(cid:11)
(cid:1)
(cid:1)(cid:10)(cid:2)
(cid:1)(cid:9)(cid:2)
(cid:1)(cid:8)(cid:2)
(cid:1)(cid:7)(cid:2)
(cid:1)(cid:6)(cid:2)
(cid:1)(cid:5)(cid:2)
(cid:1)(cid:4)(cid:2)
(cid:1)(cid:3)(cid:2)
(cid:1)(cid:2)
(cid:24)(cid:15)(cid:25)(cid:26)(cid:27)(cid:28)(cid:29)(cid:20)(cid:25)(cid:16)(cid:1)(cid:17)(cid:25)(cid:15)(cid:27)(cid:30)(cid:17)(cid:26)
(cid:24)(cid:15)(cid:25)(cid:26)(cid:27)(cid:28)(cid:29)(cid:20)(cid:25)(cid:16)(cid:1)(cid:26)(cid:20)(cid:14)(cid:15)(cid:27)(cid:30)(cid:17)(cid:26)
(cid:1)(cid:2)
(cid:1)(cid:3)(cid:2)
(cid:1)(cid:4)(cid:2)
(cid:1)(cid:5)(cid:2)
(cid:1)(cid:6)(cid:2)
(cid:1)(cid:7)(cid:2)
(cid:1)(cid:8)(cid:2)
Figure 9: Sandboxing CPU Usage Overhead
On the other hand, we can see accurate classiﬁcation results for
IDE applications with high user interaction.
Finally, we measured how much the usage of intermediate-level
features improved the classiﬁcation accuracy (see Figure 8). For
intermediate-level feature-based functionality classiﬁcation, TRO-
GUARD uses Debtags [32] that is a large set of Debian packages,
approximately 39K packages, each labeled manually with many
facet features by developers to facilitate application package search
by high level application functionality tags. We grouped the pack-
ages into 10 functionality classes automatically using logical rules
on combination of facet features, and then veriﬁed the automati-
cally categorized packages one by one manually for correctness. As