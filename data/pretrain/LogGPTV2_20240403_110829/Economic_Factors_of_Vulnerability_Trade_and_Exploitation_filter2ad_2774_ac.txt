41
Sum
31
18
13
43
13
11
18
1
15
15
89
Figure 7: Occurrences of exploit publication by year
Adobe Acrobat. A Fisher Exact test rejects the null hypothesis of
count uniformity (p = 0.0012), suggesting that exploited software
varies by package type.
Figure 7 plots the occurrences of exploit publications by year
and by software vendor. We observe that during the first years of
RuMarket operation there is a spike in number of published ex-
ploits for all platforms. Oracle products result as the most affected
in that year, followed by Adobe and, closely, Microsoft products.
This observation matches the surge around 2010-2013 of ‘cyber-
crime as a service’, thoroughly reported in the scientific literature
and industry in that time-frame [35, 48, 70]. Interestingly, Oracle
exploits seem to plunge after 2013; this coincides with the intro-
duction in major web browsers of plugin-blocking features,7 and
a Java update (released in January 2013) that increases the default
security settings of the plugin8 (e.g. triggering certificate errors as
exploited by several exploit kits [48]). This also independently sup-
ports previous findings on exploitation of Java vulnerabilities [40].
7https://www.theregister.co.uk/2013/12/10/firefox_26_blocks_java/, last visit Aug 2017.
8http://bit.ly/2r8MLz1, last visit Aug 2017.
Figure 8: Number of repackaged exploits by year
Following 2013, Microsoft and Adobe exploits are publised at sim-
ilar, steady rates. Anecdotally, we observe that the shape of the
described curve resembles the Gartner Hype Cycle9 curve, whereby
after a first spike at the beginning of a new product cycle (the
‘Peak of Inflated Expectations’) the market experiences a relative
drop (‘Trough of Disillusionment’) followed by a ‘plateau’ where the
technology reaches maturity (‘Plateau of Productivity’) [8].
4.2.2 Exploit arrival. Figure 8 reports the number of newly re-
leased (yellow) and repackaged (black) exploits in each package
type by year. The introduction of new exploits in RuMarket is pri-
marily driven by STANDALONE and EKIT packages, with MALWARE
packages mainly re-introducing already published exploits. In par-
ticular, STANDALONE products seem to propose new exploits at a
yearly rate of approximately 80% for each package. EKIT products
introduced a significant number of exploits in 2011 (their ‘debut’
year on the markets [35, 70]), whereas newer exploit kits appear to
embed a lower number of exploits. This confirms previous figures
whereby exploit kits are specializing to use fewer, more reliable
exploits than at their original introduction [48]. Table 13 in the Ap-
pendix reports the evolution of repackaged exploits by PackType.
Most exploits first appear in STANDALONE and EKIT packages and
re-appear in a pack of the same type, with a few exceptions. Among
these, STANDALONE exploits seem to reappear in both MALWARE and
EKIT packs, whereas EKIT exploits are prevalently re-packed in
other kits. STANDALONE exploits seem therefore to play a role in
the ‘innovation’ process in RuMarket; this may indicate the pres-
ence of an ‘exploit chain’ whereby the most reliable and effective
STANDALONE exploits are selected for future inclusion in EKIT prod-
ucts for deployment at scale.
It is interesting to evaluate the rate at which exploit introduction
happens. A few recent studies suggest that the rate of appearance
of new exploits may be much lower than previously thought [10,
9http://gtnr.it/1g1Nnw0, last visit Aug 2017.
llllllllllllllllllllllll024681020102011201220132014201520162017OccurrencesllladobemicrosoftoracleEKITMALWARESTANDALONE20102011201220132014201520162017201020112012201320142015201620172010201120122013201420152016201705101520Count of exploitsRepackagedFirst appearanceFigure 9: Distribution of days between exploit introduction
Table 5: Exploit age (days) at time of first publication
Type Min
1
185
1
1
EKIT
MAL
STDL
All
0.025p Mean Med.
294
185
75
93
372.48
185
147.34
250.36
4
185
8
2.75
0.975p Max
1745
1659.8
185
185
549.7
934
1745
1368.85
sd
470.16
-
189.66
359.97
n
25
1
29
55
18], but no account of exploit timing in the cybercrime markets
currently exists. Figure 9 shows a breakdown by software vendor of
the distribution of days between the introduction of new exploits
(left) and re-packed exploits (right). We exclude from the analysis
six EKIT vulnerabilities that have been added to the respective
packages as updates, but whose date of addition is not reported
in the market. This leaves us with 83 exploits, of which n = 55
are introduced for the first time in the market. New exploits are
introduced at similar rates for all software vendors, with 50% of
exploits being introduced at approximately six months intervals
(175 days). The ‘fastest’ 25% is introduced two months (62 days)
after the appearance of an exploit for the same software platform,
whereas the ‘slowest’ 25% appears after more than a year (401 days).
These figures are in sharp contrast with current assumptions made
in the literature, whereby essentially all ‘severe’ vulnerabilities
are potentially exploited at scale by attackers [54, 66] (and must
therefore be fixed immediately [73]). On the contrary, these findings
support recent evidence pointing in the opposite direction: most
vulnerabilities are not of ‘economic’ interest for an attacker, as
the addition of a new vulnerability may not lead to a significant
increase in targeted systems [12, 55]; this results in significantly
skewed distributions of risk per vulnerability (as empirically shown
in [7, 56], and analytically modeled in [12]). Exploit re-packaging
(right plot in Fig. 9) happens at significantly faster rates: 75% of
exploits are re-introduced within 184 days from first publication,
indicating that their commercial interest is short-lived.
A different question is how ‘old’ are exploits when they first ap-
pear on the market. We compute exploit age as the difference in days
between exploit publication in the market and publication of the
corresponding CVE on the NVD, i.e. ExplAge = PubDate − CVEPub.
Table 5 reports the distribution of exploit age for newly introduced
exploits. The mean and median exploit age varies considerably
by product type. STANDALONE exploits are on average significantly
younger at time of publication than other exploits (p = 0.05 for a
Wilcox rank sum test). 50% of STANDALONE exploits are published in
Figure 10: Exploit age vs time of publication in RuMarket
the market within 2.5 months (75 days) from the public disclosure
date. The top 25% (not reported in Tab. 5) are published within 40
days, and the top 2.5% within approximately a week. The difference
in exploit age for the EKIT and MALWARE categories is not statisti-
cally significant. Whereas some exploits do appear quickly after
disclosure in RuMarket, most exploits take around four months
from disclosure date to be published. This may indicate that other
factors such as effectiveness of older exploits [10], or delays in
user system updates [55, 64], may affect timing of appearance of a
marketed exploit. To evaluate the rate of change in time of arrival
of new exploits, Figure 10 reports the exploit age distribution by
year of publication. We observe that the mean exploit age decreases
steadily for more recent publication dates (β = −0.32, p = 0.001),
indicating that exploit vendors are becoming faster in releasing
exploits for newly disclosed vulnerabilities. The coefficient of the
linear regression indicates that exploits appear at an approximately
30% faster rate every year.
4.2.3 Estimate of exploit prices. Conceptually, the lower bound
cost of a pack can be summarized as follows:
n
i =1
PackPricep∈PT
=
CExplpi + CDevp + CDeplp
(2)
where CExplpi is the cost of the ith exploit in package p, and
CDevp and CDeplp are the development and deployment (includ-
ing maintenance) costs of the pack. For example, on top of the
sole exploits EKITs provide a web interface to control infections,
as well as additional deployment services such as remote servers
where the kit is hosted, or the redirection of vulnerable traffic to
the kit [35, 48]. Similarly, MALWARE packages provide additional
malware functionalities on top of the sole exploit. Hence, we have
CDevp > 0, CDeplp > 0,∀p ∈ Pt , with t ∈ {EKIT, MALWARE}. Un-
fortunately, an estimation of these costs would require an analysis
of the source code of these packages [22], which is not publicly
available. On the other hand, STANDALONE exploits are provided
as-is, i.e. only the vulnerability exploit is traded, without further
embellishments or services. This sets CDevp ≈ CDeplp ≈ 0 for this
i =1 CExplpi which,
assuming a uniform distribution of exploit costs per package, (see
discussion in Sec. 3.4), yields CExplp∈PSTDL,i = 1/n· PackPricep. We
therefore only report STANDALONE exploit estimates.10
category. This leaves us with only the termn
Table 6 reports price estimates for exploits against different
10The estimation for all packages is reported in the Appendix, Table 14.
0.000.250.500.751.000300600900Days between introduction of new exploitFraction of exploitsadobemicrosoftoracle0.000.250.500.751.000200400600800Days between exploit re−packagingFraction of exploitsadobemicrosoftoraclelllllllllllllllllllllllllllllllllllllllllllllllllllllll2462011201220132014201520162017Log exploit ageTable 6: (Bootstrapped) descriptive statistics of STANDALONE exploit price estimates in USD
STANDALONE exploit prices are estimated on a uniform distribution by package. To approximate the true (unknown) distribution of exploits,
we perform a bootstrap of our data (N = 10000), reported in parenthesis. The column n reports number of exploits for that software. The
bootstrapped data does not deviate substantially from our observations on the average. Fatter distribution tails indicate that RuMarket
outliers tend to bias sample statistics. Exploits are priced between 150 and 8000USD with significant differences by software.
SwVendor
Adobe
Microsoft
Oracle
Software
flash
acrobat
office
int. expl.
windows
silverlight
java
Min
75
(75)
75
(75)
1500
(1500)
150
(150)
150
(150)
440
(440)
700
(700)
150
(150)
25
(25)
25
(25)
0.025p
75
(100)
75
(87.5)
1500
(1500)
150
(150)
362.5
(1605.1)
459.5
(440)
800
(1100)
150
(150)
25
(25)
25
(25)
Mean
879.17
(1000.06)
568.75
(562.05)
1500
(1500)
2801.82
(2442.13)
3195.45
(3407.31)
3035
(3051.89)
2366.67
(2349.27)
150
(150)
1020
(1847.02)
1020
(1847.02)
Median
1250
(1040)
150
(545.45)
1500
(1500)
2250
(2450)
4000
(3262.5)
1850
(3000)
2250
(2327.27)
150
(150)
25
(1020)
25
(1020)
0.975p
1500
(1500)
1500
(1300)
1500
(1500)
8000
(5600)
7250
(5750)
7625
(8000)
4687.5
(3750)
150
(150)
4502.5
(5000)
4502.5
(5000)
Max
1500
(1500)
1500
(1500)
1500
(1500)
8000
(8000)
8000
(8000)
8000
(8000)
5000
(5000)
150
(150)
5000
(5000)
5000
(5000)
sd
693.54
(521.91)
652.3
(316.52)
0
(0)
2393.09
(1601.69)
2504.04
(1112.54)
3504.22
(1727.18)
1458.31
(658.77)
(0)
2224.89
(1981.08)
2224.89
(1981.08)
n
12
8
4
22
11
4
6
1
5
5
software. In parenthesis we report the bootstrapped estimation of
exploit prices. We report mean, median, standard deviation and 95%
confidence intervals. Price estimates in the boostrapped sample ap-
pear to diverge at the tails of the distribution w.r.t the observed sam-
ple, suggesting that outliers in the sample may bias sample statistics.
Looking at exploits by software, we find that the most expensive
exploits in RuMarket are for Microsoft software, and are priced at
2500USD on the average. Among software from this vendor, Office
and Windows exploits appear to be the most expensive with 50% of
exploits above 2000 USD, and the top 2.5% quoted at about 7000 and
5000 USD respectively. As vulnerability patching and mitigation
hinder the effectiveness of an exploit in the wild [55], we further
evaluate whether exploit age affects exploit price estimates. We
find a negative correlation between ExplAge and ExplPrice (al-
beit not significant when looking only at the exploit), suggesting
that exploits lose value as they age (cor = −0.16, p = 0.3). We do
not find evidence of dependence between exploit price and CVSS
vulnerability severity.
4.2.4 Regression analysis of exploit price estimates. To evaluate
the factors driving exploit price, we employ a set of mixed effect
linear regression models over the response variable log(ExplPrice).
We report regression results for the following three nested models:
M1: log(ExplPricei) = β0 + β1 log(ExplAдei) + ϵi
M2: log(ExplPricei) = · · · + β2SwV eni + ϵi
M3: log(ExplPricei) = · · · + β3SwV eni × log(ExplAдei) + ϵi
Table 7 reports the regression results. Coefficient estimates are con-
sistent among models. A Variance Inflation Factors (VIF) analysis
does not indicate any significant collinearity between the model
Table 7: Regression on STANDALONE exploit pricing
Variables: Expl Price = price estimate of exploit; ExplAдe = age of exploit
when advertised; SwV en = software vendor. Exploit age is negatively corre-
lated with price. Depreciation rate depends on the software vendor.
log(Expl Price)
c
log(ExplAдe)
5.592∗∗∗
(1.458)
-0.268∗
(0.135)
1.993
(1.395)
2.662†
(1.375)
Model 1 Model 2 Model 3
10.943∗∗∗
8.080∗∗∗
(0.746)
(1.735)
-1.357∗∗∗
-0.330∗
(0.129)
(0.234)
-4.846∗
(2.068)
-3.483†
(1.891)
1.398∗∗∗
(0.322)
1.276∗∗∗
(0.272)
1.598
0.38
-51.8
39
2.209
0.05
-64.2
39
Adobe
Microsoft
log(ExplAдe)× AD
log(ExplAдe)× MS
V ar(c |ExplV en)
Pseudo-R2
Log-likelihood
N
1.520
0.28
-60.6
39
(†) p < 0.1; (∗) p < 0.05; (∗∗) p < 0.01; (∗ ∗ ∗) p < 0.001;
predictors. Log-log relationships can be interpreted as the elasticity
between dependent and independent variables. For example, in
M3 the coefficient for log(ExplAдe) (−1.357) indicates that for a 1%
increase in the variable ExplAдe we can expect an average 1.4%
decrease (1.01−1.357 = 0.986) in ExplPrice. A rough quantitative
approximation of the effect can generally be obtained by simply
Table 8: CVSS category vs SYM
CVSS Category
C
4
53
57
NC Sum
12
66
78
8
13
21
Not exploited
Exploited
Sum
Figure 11: Vulnerabilities exploited in the wild versus (left)
package price; (right) replies received on the market.
looking at the regression coefficients (e.g. β3 = −1.357 indicates
a decrease of approximately 1.4%). oefficients in M3 can only be
interpreted simultaneously with the coefficients of the interaction
effect log(ExplAдe) × SwV en. We find that baseline prices for ex-