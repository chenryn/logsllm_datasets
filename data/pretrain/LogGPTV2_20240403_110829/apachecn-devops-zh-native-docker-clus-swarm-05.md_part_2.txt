```
![Use Ansible](img/image_05_004.jpg)
# 集群管理
为了更好地说明集群操作，让我们看一个由三个经理和十个工人组成的例子。第一个基本操作是列出节点，用`docker node ls`命令:
![Cluster management](img/image_05_005.jpg)
您可以通过调用节点的主机名( **manager1** )或其标识(**CTV 03 NQ 6 cjmbkc 4v 1tc 644 FSI**)来引用节点。该 list 语句中的其他列描述了集群节点的属性。
*   **状态**是关于节点的物理可达性。如果节点是向上的，则它是就绪的，否则它是向下的。
*   **可用性**是节点可用性。节点状态可以是活动(参与群集操作)、暂停(处于待机、挂起、不接受任务)或耗尽(等待从其任务中撤出)。
*   **MANAGER STATUS** is the current status of manager. If a node is not the manager, this field will be empty. If a node is manager, this field can either be Reachable (one of the managers present to guarantee high availability) or Leader (the host leading all operations).
    ![Cluster management](img/image_05_006.jpg)
## 节点操作
`docker node`命令有几个可能的选项。
![Nodes operations](img/image_05_007.jpg)
如您所见，您拥有节点管理的所有可能命令，但是`create`。我们经常被问到`node`命令什么时候会增加一个创建选项，但是仍然没有答案。
到目前为止，创建新节点是手动操作，也是集群操作员的责任。
## 降级晋升
员工节点可以升级(将其转换为经理)，而经理节点可以降级(将其转换为员工)。
在管理大量经理和员工(奇数，大于或等于三)时，请始终记住该表以保证高可用性。
使用以下语法将`promote worker0`和`worker1`发送给经理:
```
docker node promote worker0
docker node promote worker1
```
窗帘后面没有什么神奇的东西。只是，Swarm 试图通过即时指令来改变节点角色。
![Demotion and promotion](img/image_05_008.jpg)
降级是一样的(docker 节点降级 **worker1** )。但是要注意避免不小心降级正在工作的节点，否则会被锁定。
最后，如果您试图降职领导经理会发生什么？在这种情况下，Raft 算法将开始选举，并从活跃的经理中选择新的领导者。
## 标记节点
您可能已经注意到，在前面的截图中，**工作 9** 在**耗尽**可用性。这意味着该节点正在撤离其任务(如果有)，这些任务将在集群中的其他地方重新安排。
您可以使用`docker node update`命令通过更新节点状态来更改节点可用性:
![Tagging nodes](img/image_05_009.jpg)
可用性选项可以是`active`、`pause`或`drain`。在这里，我们刚刚将**工人 9** 恢复到活动状态。
*   `active`状态表示节点正在运行并准备接受任务
*   `pause` 状态表示节点正在运行，但不接受任务
*   `drain`状态意味着该节点正在运行并且不接受任务，但是它当前正在耗尽它的任务，这些任务正在其他地方被重新调度
另一个强大的更新论点是关于标签。分别有`--label-add`和`--label-rm`允许我们给 Swarm 节点添加标签。
Docker Swarm 标签不会影响引擎标签。启动 Docker 引擎时可以指定标签(`dockerd [...] --label "staging" --label "dev" [...]`)。但是 Swarm 无权编辑或更改它们。我们在这里看到的标签只影响 Swarm 行为。
标签对于节点分类很有用。当您启动服务时，您可以使用标签过滤并决定容器的物理位置。例如，如果您想要将一堆带固态硬盘的节点专用于托管 MySQL，您实际上可以:
```
docker node update --label-add type=ssd --label-add type=mysql 
    worker1
docker node update --label-add type=ssd --label-add type=mysql 
    worker2
docker node update --label-add type=ssd --label-add type=mysql 
    worker3
```
稍后，当您将使用复制因子启动一个服务时，比如说三个，您将确保它将在 worker1、worker2 和 worker3 上准确地启动 MySQL 容器，如果您通过`node.type`进行过滤的话:
```
docker service create --replicas 3 --constraint 'node.type == 
    mysql' --name mysql-service mysql:5.5.
```
## 移除节点
切除淋巴结是一项精细的手术。这不仅仅是将一个节点排除在 Swarm 之外，还关系到它的角色和它正在运行的任务。
### 清除工人
如果一个工作进程的状态为“关闭”(例如，因为它实际上已关闭)，那么它当前没有运行任何东西，因此可以安全地删除它:
```
docker node rm worker9
```
相反，如果工作进程处于“就绪”状态，则前一个命令将引发错误，拒绝删除它。节点可用性(活动、暂停或耗尽)实际上并不重要，因为此时或恢复时，它仍可能在运行任务。
因此，在这种情况下，操作员必须手动排空节点。这意味着强制其释放将被重新安排并转移给其他员工的任务:
```
docker node update --availability drain worker9
```
一旦耗尽，节点可以关闭，然后在其状态为关闭时删除。
### 删除经理
不能删除经理。在删除管理器节点之前，必须将其适当降级为 worker，最终清空，然后关闭:
```
docker node demote manager3
docker node update --availability drain manager3
# Node shutdown
docker node rm manager3
```
当必须删除一个管理器时，应该将另一个工作节点标识为新的管理器，并在以后进行提升，以便保持奇数个管理器。
### 类型
**用**移除:`docker node rm --force`
无论如何，`--force`标志都会删除一个节点。必须非常小心地使用该选项，并且在出现停滞节点时，这通常是最后的手段。
# 蜂群健康
群健康本质上取决于集群中节点的可用性和管理器的可靠性(奇数，可用，向上)。
节点可以用通常的:
```
docker node ls
```
这可以使用`--filter`选项过滤输出。例如:
```
docker node ls --filter name=manager # prints nodes named *manager*
docker node ls --filter "type=mysql" # prints nodes with a label 
    type tagged "mysql"
```
要获取特定节点的详细信息，请使用 inspect，如下所示:
```
docker inspect worker1
```
此外，过滤选项可用于从输出 JSON 中提取特定数据:
```
docker node inspect --format '{{ .Description.Resources }}' worker2
{1000000000 1044140032}
```
输出内核数量(一个)和分配的内存数量(`1044140032`字节，或 995M)。
# 备份集群配置
管理者的重要数据存储在`/var/lib/docker/swarm`中。这里我们有:
*   `certificates/`中的证书
*   `raft/`中带有 Etcd 日志和快照的 Raft 状态
*   `worker/`中的任务数据库
*   其他不太重要的信息，如当前管理器状态、当前连接套接字等。
最好定期备份这些数据，以防需要恢复。
Raft 日志使用的空间取决于集群上产生的任务数量以及它们的状态变化频率。对于 200，000 个容器，Raft 日志每三个小时可以增长到 1GB 左右的磁盘空间。每个任务的日志条目大约占 5 KB。因此，Raft 日志目录`/var/lib/docker/swarm/raft`的日志循环策略应该或多或少地进行校准，这取决于可用的磁盘空间。
# 灾难恢复
如果某个管理器上的群目录内容丢失或损坏，需要使用`docker node remove nodeID`命令立即将该管理器从集群中移除(如果暂时卡住，则使用`--force`)。
集群管理员不应该启动管理器，也不应该使用过期的集群目录将其加入集群。使用过期的群目录加入集群会使集群处于不一致的状态，因为在此过程中，所有管理人员都会尝试同步错误的数据。
关闭目录损坏的管理器后，需要删除`/var/lib/docker/swarm/raft/wal`和`/var/lib/docker/swarm/raft/snap`目录。只有在此步骤之后，管理器才能安全地重新加入集群。
# 【Swarm 的图形界面
在撰写本文的时候，Swarm 模式是如此年轻，以至于现有的 Docker 图形用户界面支持尚未到来或正在进行中。
## 船厂
**船厂**([https://shipyard-project.com/](https://shipyard-project.com/))对 Swarm (v1)操作有很好的支持，现在更新为使用 Swarm 模式。在撰写本文时(2016 年 8 月)，在 Github 上有一个 1.12 分支，这使得它可行。
在这本书出版的时候，可能已经有一个稳定的版本可以用于自动化部署。你可以看看[https://shipyard-project.com/docs/deploy/automated/](https://shipyard-project.com/docs/deploy/automated/)的说明。
这类似于在 SSH 中进入 leader manager 主机并运行一个 liner，例如:
```
curl -sSL https://shipyard-project.com/deploy | bash -s
```
如果我们仍然需要安装一个特定的非稳定分支，可以从 Github 下载到 leader manager 主机，然后安装 Docker Compose。
```
curl -L 
    https://github.com/docker/compose/releases/download/1.8.0/docker-
    compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose && 
    chmod +x /usr/local/bin/docker-compose
```
最后从`compose`开始:
```
docker-compose up -d < docker-compose.yml
```
该命令将调出许多容器，最终，默认情况下，这些容器会暴露端口`8080`，这样您就可以连接到端口`8080`的公共管理器 IP 以进入造船厂用户界面。
![Shipyard](img/image_05_010.jpg)
从下面的截图中可以看到，Docker Swarm 特性已经在 UI 中得到支持(有**服务**、**节点**等等)。)，以及操作，如**提升**、 **D **表情**** 等，这些我们在本章中概述的操作，每个节点都有。
![Shipyard](img/image_05_011.jpg)
## 搬运工
支持群组模式的另一个用户界面，也是我们的首选，是**Portainer**([https://github.com/portainer/portainer/](https://github.com/portainer/portainer/))。
部署它就像在领导者管理器上启动一个容器一样简单:
```
docker run -d -p 9000:9000 -v /var/run/:/var/run 
    portainer/portainer
```
![Portainer](img/image_005_012.jpg)
用户界面有预期的选项，包括快速启动容器的模板列表，如 MySQL 或私有注册表，Portainer 支持 Swarm 服务，启动时有`-s`选项。
在撰写本文时，Portainer 即将推出 UI 认证功能，这是迈向基于角色的完全访问控制的第一步，预计将于 2017 年初推出。稍后，RBAC 将扩展到支持微软活动目录作为目录源。此外，到 2016 年底，Portainer 还将支持多集群(或多主机)管理。2017 年初增加的其他功能是 Docker Compose (YAML)支持和私有注册表管理。
# 总结
在本章中，我们将介绍典型的 Swarm 管理程序和选项。在展示了如何将管理人员和工作人员添加到集群之后，我们详细解释了如何更新集群和节点属性，如何检查 Swarm 运行状况，并且我们遇到了作为 ui 的船厂和 Portainer。在此之后，我们专注于基础设施，现在是时候使用我们的群集了。在下一章中，我们将通过创建真正的服务和任务来打开钥匙，启动一些真正的应用。