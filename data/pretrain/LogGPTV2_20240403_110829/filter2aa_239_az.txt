x。最后，在语句*pY = 20中，把值20赋予pY指向的地址包含的内容。实际上是把x的内
容改为20，因为pY指向x。注意在这里，变量pY和x之间没有任何关系。只是此时pY碰巧
指向存储x的存储单元而已。
要进一步理解这个过程，假定x存储在
栈的存储单元0x12F8C4～0x12F8C7中（十进
制就是1243332～1243335，即有4个存储单
元，因为一个int占用4个字节）。因为栈向
下分配内存，所以变量pX存储在0x12F8C0～
0x12F8C3的位置上，pY存储在0x12F8BC～
0x12F8BF的位置上。注意，pX和pY也分别
占用4个字节。这不是因为一个int占用4个字节，而是因为在32位处理器上，需要用4个字
节存储一个地址。利用这些地址，在执行完上述代码后，栈应如图5-6所示。
  注意： 这个示例使用int来说明该过程，其中int存储在32位处理器中栈的连续
空间上，但并不是所有的数据类型都会存储在连续的空间中。原因是32位处理器最擅
长于在4个字节的内存块中检索数据。这种计算机上的内存会分解为4个字节的块，在
Windows上，每个块有时称为DWORD，因为这是32位无符号int数在.NET出现之前的名
字。这是从内存中获取DWORD的最高效的方式——跨越DWORD边界存储数据通常会
降低硬件的性能。因此，.NET运行库通常会给某些数据类型填充一些空间，使它们占
用的内存是4的倍数。例如，short数据占用两个字节，但如果把一个short放在栈中，栈
指针仍会向下移动4个字节，而不是两个字节，这样，下一个存储在栈中的变量就仍从
DWORD的边界开始存储。
可以把指针声明为任意一种值类型——即任何预定义的类型uint、int和byte等，也可
以声明为一个结构。但是不能把指针声明为一个类或数组，因为这么做会使垃圾回收器出
现问题。为了正常工作，垃圾回收器需要知道在堆上创建了什么类的实例，它们在什么地
方。但如果代码开始使用指针处理类，就很容易破坏堆中.NET运行库为垃圾回收器维护
的与类相关的信息。在这里，垃圾回收器可以访问的任何数据类型称为托管类型，而指针
只能声明为非托管类型，因为垃圾回收器不能处理它们。
3．将指针强制转换为整数类型
由于指针实际上存储了一个表示地址的整数，因此任何指针中的地址都可以和任何整
数类型之间相互转换。指针到整数类型的转换必须是显式指定的，隐式的转换是不允许
的。例如，编写下面的代码是合法的：
    int x = 10;
    int＊ pX, pY;
    pX = &x;
    pY = pX;
    ＊pY = 20;
    ulong y = (ulong)pX;
    int＊ pD = (int＊)y;
把指针pX中包含的地址强制转换为一个uint，存储在变量y中。接着把y强制转换回一
个int*，存储在新变量pD中。因此pD也指向x的值。
把指针的值强制转换为整数类型的主要目的是显示它。虽然插入字符串和
Console.Write（）方法没有带指针的重载方法，但是必须把指针的值强制转换为整数类
型，这两个方法才能接受和显示它们：
    WriteLine($"Address is {pX}"); // wrong -- will give a compilation error
    WriteLine($"Address is {(ulong)pX}"); // OK
可以把一个指针强制转换为任何整数类型，但是，因为在32位系统上，一个地址占用
4个字节，把指针强制转换为除了uint、long或ulong之外的数据类型，肯定会导致溢出错
误（int也可能导致这个问题，因为它的取值范围是-20亿～20亿，而地址的取值范围是0～
40亿）。如果创建64位应用程序，就需要把指针强制转换为ulong类型。
还要注意，checked关键字不能用于涉及指针的转换。对于这种转换，即使在设置
checked的情况下，发生溢出时也不会抛出异常。.NET运行库假定，如果使用指针，就知
道自己要做什么，不必担心可能出现的溢出。
4．指针类型之间的强制转换
也可以在指向不同类型的指针之间进行显式的转换。例如：
    byte aByte = 8;
    byte＊ pByte= &aByte;
    double＊ pDouble = (double＊)pByte;
这是一段合法的代码，但如果要执行这段代码，就要小心了。在上面的示例中，如果
要查找指针pDouble指向的double值，就会查找包含1个byte（aByte）的内存，和一些其他
内存，并把它当作包含一个double值的内存区域来对待——这不会得到一个有意义的值。
但是，可以在类型之间转换，实现C union类型的等价形式，或者把指针强制转换为其他
类型，例如，把指针转换为sbyte，来检查内存的单个字节。
5. void指针
如果要维护一个指针，但不希望指定它指向的数据类型，就可以把指针声明为void：
    int＊ pointerToInt;
    void＊ pointerToVoid;
    pointerToVoid = (void＊)pointerToInt;
void指针的主要用途是调用需要void*参数的API函数。在C#语言中，使用void指针的
情况并不是很多。特殊情况下，如果试图使用*运算符取消引用void指针，编译器就会标
记一个错误。
6．指针算术的运算
可以给指针加减整数。但是，编译器很智能，知道如何执行这个操作。例如，假定有
一个int指针，要在其值上加1。编译器会假定我们要查找int后面的存储单元，因此会给该
值加上4个字节，即加上一个int占用的字节数。如果这是一个double指针，加1就表示在指
针的值上加8个字节，即一个double占用的字节数。只有指针指向byte或sbyte（都是1个字
节）时，才会给该指针的值加上1。
可以对指针使用运算符+、-、+=、-=、++和--，这些运算符右边的变量必须是long或
ulong类型。
  注意： 不允许对void指针执行算术运算。
例如，假定有如下定义：
    uint u = 3;
    byte b = 8;
    double d = 10.0;
    uint＊ pUint= &u;     // size of a uint is 4
    byte＊ pByte = &b;    // size of a byte is 1
    double＊ pDouble = &d; // size of a double is 8
下面假定这些指针指向的地址是：
● pUint: 1243332
● pByte: 1243328
● pDouble: 1243320
执行这段代码后：
    ++pUint;           // adds (1＊4) = 4 bytes to pUint
    pByte -= 3;         // subtracts (3＊1) = 3 bytes from pByte
    double＊ pDouble2 = pDouble + 4; // pDouble2 = pDouble + 32 bytes (4＊8 bytes
)
指针应包含的内容是：
● pUint: 1243336
● pByte: 1243325
● pDouble2: 1243352
  注意： 一般规则是，给类型为T的指针加上数值X，其中指针的值为P，则得
到的结果是P+ X*（sizeof（T））。使用这条规则时要小心。如果给定类型的连续值存
储在连续的存储单元中，指针加法就允许在存储单元之间移动指针。但如果类型是byte
或char，其总字节数不是4的倍数，连续值就不是默认地存储在连续的存储单元中。
如果两个指针都指向相同的数据类型，则也可以把一个指针从另一个指针中减去。此
时，结果是一个long，其值是指针值的差被该数据类型所占用的字节数整除的结果：
    double＊ pD1 = (double＊)1243324; // note that it is perfectly valid to
                                    // initialize a pointer like this.
    double＊ pD2 = (double＊)1243300;
    long L = pD1-pD2;            // gives the result 3 (=24/sizeof(double))
7. sizeof运算符
这一节将介绍如何确定各种数据类型的大小。如果需要在代码中使用某种类型的大
小，就可以使用sizeof运算符，它的参数是数据类型的名称，返回该类型占用的字节数。
例如：
    int x = sizeof(double);
这将设置x的值为8。
使用sizeof的优点是不必在代码中硬编码数据类型的大小，使代码的移植性更强。对
于预定义的数据类型，sizeof返回下面的值。
    sizeof(sbyte) = 1;  sizeof(byte) = 1;
    sizeof(short) = 2;  sizeof(ushort) = 2;
    sizeof(int) = 4;    sizeof(uint) = 4;
    sizeof(long) = 8;   sizeof(ulong) = 8;
    sizeof(char) = 2;   sizeof(float) = 4;
    sizeof(double) = 8; sizeof(bool) = 1;
也可以对自己定义的结构使用sizeof，但此时得到的结果取决于结构中的字段类型。
不能对类使用sizeof。
8．结构指针：指针成员访问运算符
结构指针的工作方式与预定义值类型的指针的工作方式完全相同。但是这有一个条
件：结构不能包含任何引用类型，这是因为前面介绍的一个限制——指针不能指向任何引
用类型。为了避免这种情况，如果创建一个指针，它指向包含任何引用类型的任何结构，
编译器就会标记一个错误。
假定定义了如下结构：
    struct MyStruct
    {
      public long X;
      public float F;
    }
就可以给它定义一个指针：
    MyStruct＊ pStruct;
然后对其进行初始化：
    var myStruct = new MyStruct();
    pStruct = &myStruct;
也可以通过指针访问结构的成员值：
    (＊pStruct).X = 4;
    (＊pStruct).F = 3.4f;
但是，这个语法有点复杂。因此，C#定义了另一个运算符，用一种比较简单的语
法，通过指针访问结构的成员，它称为指针成员访问运算符，其符号是一个短划线，后跟
一个大于号，它看起来像一个箭头：->。
  注意： C++开发人员能识别指针成员访问运算符。因为C++使用这个符号完
成相同的任务。
使用这个指针成员访问运算符，上述代码可以重写为：
    pStruct->X = 4;
    pStruct->F = 3.4f;
也可以直接把合适类型的指针设置为指向结构中的一个字段：
    long＊ pL = &(Struct.X);
    float＊ pF = &(Struct.F);
或者
    long＊ pL = &(pStruct->X);
    float＊ pF = &(pStruct->F);
9．类成员指针
前面说过，不能创建指向类的指针，这是因为垃圾回收器不维护关于指针的任何信
息，只维护关于引用的信息，因此创建指向类的指针会使垃圾回收器不能正常工作。
但是，大多数类都包含值类型的成员，可以为这些值类型成员创建指针，但这需要一
种特殊的语法。例如，假定把上面示例中的结构重写为类：
    class MyClass
    {
      public long X;
      public float F;
    }
然后就可以为它的字段X和F创建指针了，方法与前面一样。但这么做会产生一个编
译错误：
    var myObject = new MyClass();
    long＊ pL = &(myObject.X);   // wrong -- compilation error
    float＊ pF = &(myObject.F);  // wrong -- compilation error
尽管X和F都是非托管类型，但它们嵌入在一个对象中，这个对象存储在堆上。在垃
圾回收的过程中，垃圾回收器会把MyObject移动到内存的一个新单元上，这样，pL和pF
就会指向错误的存储地址。由于存在这个问题，因此编译器不允许以这种方式把托管类型
的成员的地址分配给指针。
解决这个问题的方法是使用fixed关键字，它会告诉垃圾回收器，可能有引用某些对
象的成员的指针，所以这些对象不能移动。如果要声明一个指针，则使用fixed的语法，
如下所示：
    var myObject = new MyClass();
    fixed (long＊ pObject = &(myObject.X))
    {
      // do something
    }
在关键字fixed后面的圆括号中，定义和初始化指针变量。这个指针变量（在本例中
是pObject）的作用域是花括号标识的fixed块。这样，垃圾回收器就知道，在执行fixed块
中的代码时，不能移动myObject对象。
如果要声明多个这样的指针，就可以在同一个代码块前放置多条fixed语句：
    var myObject = new MyClass();
    fixed (long＊ pX = &(myObject.X))
    fixed (float＊ pF = &(myObject.F))
    {
      // do something
    }
如果要在不同的阶段固定几个指针，就可以嵌套整个fixed块：
    var myObject = new MyClass();
    fixed (long＊ pX = &(myObject.X))
    {
      // do something with pX
      fixed (float＊ pF = &(myObject.F))
      {
        // do something else with pF
      }
    }
如果这些变量的类型相同，就可以在同一个fixed块中初始化多个变量：
    var myObject = new MyClass();
    var myObject2 = new MyClass();
    fixed (long＊ pX = &(myObject.X), pX2 = &(myObject2.X))
    {
      // etc.
    }
在上述情况中，是否声明不同的指针，让它们指向相同或不同对象中的字段，或者指
向与类实例无关的静态字段，这一点并不重要。
5.5.2 指针示例：PointerPlayground
为了理解指针，最好编写一个使用指针的程序，再使用调试器。下面给出一个使用指
针的示例：PointerPlayground。它执行一些简单的指针操作，显示结果，还允许查看内存
中发生的情况，并确定变量存储在什么地方（代码文件PointerPlayground/Program.cs）：
    using System;
    using static System.Console;
    namespace PointerPlayground
    {
      public class Program
      {
        unsafe public static void Main()
        {
          int x=10;
          short y = -1;
          byte y2 = 4;
          double z = 1.5;
          int＊ pX = &x;
          short＊ pY = &y;
          double＊ pZ = &z;
          WriteLine($"Address of x is 0x{(ulong)&x:X}, " +
            $"size is {sizeof(int)}, value is {x}");
          WriteLine($"Address of y is 0x{(ulong)&y2:X}, " +
            $"size is {sizeof(short)}, value is {y}");
          WriteLine($"Address of y2 is 0x{(ulong)&y2:X}, " +
            $"size is {sizeof(byte)}, value is {y2}");
          WriteLine($"Address of z is 0x{(ulong)&z:X}, " +
            $"size is {sizeof(double)}, value is {z}");
          WriteLine($"Address of pX=&x is 0x{(ulong)&pX:X}, " +
            $"size is {sizeof(int＊)}, value is 0x{(ulong)pX:X}");
          WriteLine($"Address of pY=&y is 0x{(ulong)&pY:X}, " +
            $"size is {sizeof(short＊)}, value is 0x{(ulong)pY:X}");
          WriteLine($"Address of pZ=&z is 0x{(ulong)&pZ:X}, " +
            $"size is {sizeof(double＊)}, value is 0x{(ulong)pZ:X}");
          ＊pX = 20;
          WriteLine($"After setting ＊pX, x = {x}");
          WriteLine($"＊pX = {＊pX}");
          pZ = (double＊)pX;
          WriteLine($"x treated as a double = {＊pZ}");
          ReadLine();
        }
      }
    }
这段代码声明了4个值变量：
● int x
● short y
● byte y2
● double z
它还声明了指向其中3个值的指针：pX、pY和pZ。
然后显示这3个变量的值，以及它们的大小和地址。注意在获取pX、pY和pZ的地址
时，我们查看的是指针的指针，即值的地址的地址！还要注意，与显示地址的常见方式一
致，在WriteLine（）命令中使用{0:X}格式说明符，确保该内存地址以十六进制格式显
示。
最后，使用指针pX把x的值改为20，执行一些指针类型强制转换，如果把x的内容当
作double类型，就会得到无意义的结果。
编译并运行这段代码，得到下面的结果：
    Address of x is 0x376943D5A8, size is 4, value is 10
    Address of y is 0x376943D5A0, size is 2, value is -1
    Address of y2 is 0x376943D598, size is 1, value is 4
    Address of z is 0x376943D590, size is 8, value is 1.5
    Address of pX=&x is 0x376943D588, size is 8, value is 0x376943D5A8
    Address of pY=&y is 0x376943D580, size is 8, value is 0x376943D5A0
    Address of pZ=&z is 0x376943D578, size is 8, value is 0x376943D590
    After setting ＊pX, x = 20
    ＊pX = 20
    x treated as a double = 9.88131291682493E-323
  注意： 用CoreCLR运行应用程序时，每次运行应用程序都会显示不同的地
址。
检查这些结果，可以证实“后台内存管理”一节描述的栈操作，即栈向下给变量分配内
存。注意，这还证实了栈中的内存块总是按照4个字节的倍数进行分配。例如，y是一个
short数（其大小为2字节），其地址是0xD4E710（十六进制），表示为该变量分配的存储
单元是0xD4E710～0xD4E713。如果.NET运行库严格地逐个排列变量，则y应只占用两个
存储单元，即0xD4E712和0xD4E713。
下一个示例PointerPlayground2介绍指针的算术，以及结构指针和类成员。开始时，定