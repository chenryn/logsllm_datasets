仪表板是快速访问集群信息和进行快速更新的强大方式。正确部署后，仪表板不会产生任何安全问题。部署仪表板的正确方式是没有权限，而是依赖用户自己的凭证。我们将使用反向代理来实现这一点，该代理在每个请求中注入用户的 OIDC 令牌，然后仪表板将在调用 API 服务器时使用该令牌。使用这种方法，我们将能够像对任何其他 web 应用一样限制对仪表板的访问。
使用`kubectl`内置代理和端口转发不是访问仪表板的好策略，原因有几个。许多企业不会在本地安装 CLI 实用程序，这迫使您使用跳转框来访问 Kubernetes 等特权系统，这意味着端口转发将不起作用。即使你可以在本地运行`kubectl`，在 loopback (127.0.0.1)上打开一个端口也意味着你系统上的任何东西都可以使用它，而不仅仅是你从你的浏览器。虽然浏览器有适当的控制来阻止您使用恶意脚本访问 loopback 上的端口，但这不会阻止您工作站上的任何其他操作。最后，这并不是一个很好的用户体验。
我们将在 [*第 9 章*](09.html#_idTextAnchor246) *中深入了解这是如何以及为什么起作用的细节，部署一个安全的 Kubernetes 仪表板。*
### 不间断的 CLI 访问
大多数开发人员希望能够访问`kubectl`和其他依赖于`kubectl`配置的工具。例如，Visual Studio Code Kubernetes 插件不需要任何特殊的配置。它只是采用了`kubectl`的内置配置。大多数企业严格限制您可以安装哪些二进制文件，因此我们希望尽量减少我们想要安装的任何附加工具和插件。
### 企业合规要求
云原生并不意味着您可以忽略企业的法规遵从性要求。大多数企业都有要求，比如有 20 分钟的空闲超时，特权访问可能需要多因素认证等等。我们实现的任何解决方案都必须通过上线所需的控制电子表格。还有，这个不用说，但是所有东西都需要加密(我指的是所有东西)。
### 把这一切都拉在一起
为了满足这些要求，我们将使用 OpenUnison。它具有预构建的配置，可与 Kubernetes、仪表板、CLI 和 SAML2 身份提供者(如 ADFS)一起工作。它的部署速度也非常快，因此我们不需要专注于特定于提供商的实现细节，而是专注于 Kubernetes 的配置选项。我们的架构如下所示:
![Figure 7.2 – Authentication architecture ](img/Fig_7.2_B15514.jpg)
图 7.2–认证架构
对于我们的实现，我们将使用两个主机名:
*   **k8s . apps . X-X-X . nip . io**:访问 OpenUnison 门户，我们将在这里启动登录并获取令牌
*   **k8sdb.apps.X-X-X-X.nip.io**: Access to the Kubernetes dashboard
    重要说明
    作为一个快速复习，`nip.io`是一个公共 DNS 服务，它将从您的主机名中嵌入的那个返回一个 IP 地址。这在实验室环境中非常有用，在实验室环境中设置域名系统可能会很痛苦。在我们的示例中，X-X-X-X 是您的 Docker 主机的 IP。
当用户试图访问`https://k8s.apps.X-X-X-X.nip.io/`时，他们将被重定向到 ADFS，那里将收集他们的用户名和密码(甚至可能是一个多因素认证令牌)。ADFS 将生成一个断言，该断言将被数字签名，并包含我们用户的唯一标识以及他们的组分配。这个断言类似于`id_token`，我们之前已经检查过了，但是它不是 JSON，而是 XML。断言在一个特殊的网页中被发送到用户的浏览器，该网页包含一个表单，该表单会自动将断言提交回 OpenUnison。此时，OpenUnison 将在 OpenUnison 命名空间中创建用户对象，以存储用户信息并创建 OIDC 会话。
前面，我们描述了 Kubernetes 如何没有用户对象。Kubernetes 允许您使用**自定义资源定义** ( **CRDs** )扩展基础 API。OpenUnison 定义了一个用户 CRD 来帮助实现高可用性，并避免需要数据库来存储状态。这些用户对象不能用于 RBAC。
一旦用户登录到 OpenUnison，他们就可以获得他们的`kubectl`配置来使用命令行界面或使用 Kubernetes 仪表板，[https://Kubernetes . io/docs/tasks/access-application-cluster/web-ui-dashboard/](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)，从他们的浏览器访问集群。一旦用户准备好了，他们可以注销 OpenUnison，这将结束他们的会话并使他们的`refresh_token`无效，使得他们在再次登录之前无法使用`kubectl`或仪表板。如果他们离开办公桌去吃午饭而没有注销，当他们回来时，他们的`refresh_token`将已经过期，因此他们将不再能够在没有重新登录的情况下与 Kubernetes 进行交互。
现在我们已经了解了用户将如何登录并与 Kubernetes 交互，我们将部署 OpenUnison 并将其集成到集群中进行认证。
## 部署 OIDC
我们包含了两个安装脚本来自动化部署步骤。这些脚本`install-oidc-step1.sh`和 `install-oidc-step2.sh`位于本书的 GitHub 存储库中的`chapter7`目录中。
本节将解释脚本自动执行的所有手动步骤。
重要说明
如果您使用脚本安装 OIDC，您**必须**遵循以下流程才能成功部署:
第一步:运行`./install-oidc-step1.sh`脚本。
步骤 2:按照*注册 SAML2 测试实验室*部分中的程序注册 SAML2 测试实验室。
第三步:运行`./install-oidc-step2.sh`脚本完成 OIDC 部署。
使用 OpenUnison 将 OIDC 部署到 Kubernetes 集群需要五个步骤:
1.  部署仪表板。
2.  部署 OpenUnison 操作符。
3.  创造一个机密。
4.  创建`values.yaml`文件。
5.  展开图表。
让我们一个接一个地执行这些步骤。
### 部署 OpenUnison
仪表板是许多用户喜欢的功能。它提供了对资源的快速查看，而我们不需要使用 kubectl 命令行界面。多年来，它因为不安全而受到了一些不好的压力，但是如果部署正确，它是非常安全的。您可能读过或听说过的大多数故事都来自未正确设置的仪表板部署。我们将在 [*第 9 章*](09.html#_idTextAnchor246) *【保护 Kubernetes 斯仪表板】*中讨论此主题:
1.  首先，我们将从 https://github.com/kubernetes/dashboard:
    ```
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
    namespace/kubernetes-dashboard created
    serviceaccount/kubernetes-dashboard created
    service/kubernetes-dashboard created
    secret/kubernetes-dashboard-certs created
    secret/kubernetes-dashboard-csrf created
    secret/kubernetes-dashboard-key-holder created
    configmap/kubernetes-dashboard-settings created
    role.rbac.authorization.k8s.io/kubernetes-dashboard created
    clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created
    rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
    clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
    deployment.apps/kubernetes-dashboard created
    service/dashboard-metrics-scraper created
    deployment.apps/dashboard-metrics-scraper created
    ```
    部署仪表板
2.  Next, we need to add the repository that contains OpenUnison to our Helm list. To add the Tremolo chart repository, use the `Helm repo add` command:
    ```
    Helm repo add tremolo https://nexus.tremolo.io/repository/Helm/
    https://nexus.tremolo.io/repository/Helm/"tremolo" has been added to your repositories
    ```
    重要说明
    Helm 是 Kubernetes 的包装经理。Helm 提供了一个工具，可以将“图表”部署到集群中，并帮助您管理部署状态。我们使用的是 Helm v3，它不需要您将任何组件(如 Tiller)部署到集群中就可以工作。
3.  Once added, you need to update the repository using the `Helm repo update` command:
    ```
    helm repo update
    Hang tight while we grab the latest from your chart repositories...
    ...Successfully got an update from the "tremolo" chart repository
    Update Complete. Happy Helming!
    ```
    您现在准备使用 Helm 图表部署 OpenUnison 操作器。
4.  首先，我们希望在名为`openunison`的新命名空间中部署 OpenUnison。我们需要在部署 Helm 图表之前创建名称空间:
    ```
    kubectl create ns openunison
    namespace/openunison created
    ```
5.  With the namespace created, you can deploy the chart into the namespace using Helm. To install a chart using Helm, use `Helm install   `:
    ```
    helm install openunison tremolo/openunison-operator --namespace openunison
    NAME: openunison
    LAST DEPLOYED: Fri Apr 17 15:04:50 2020
    NAMESPACE: openunison
    STATUS: deployed
    REVISION: 1
    TEST SUITE: None
    ```
    操作员需要几分钟才能完成部署。
    重要说明
    操作员是 CoreOS 首创的概念，其目标是封装管理员可以执行的许多自动化任务。操作员通过观察特定 CRD 的变化并采取相应的行动来实现。OpenUnison 操作符寻找 OpenUnison 类型的对象，并将创建任何需要的对象。用 PKCS12 文件创建了一个机密；部署、服务和入口对象也都已创建。当您对 OpenUnison 对象进行更改时，操作者会根据需要对 Kubernetes 对象进行更新。例如，如果您更改了 OpenUnison 对象中的映像，操作者将更新部署，这将触发 Kubernetes 部署新的 pod。对于 SAML，操作员还会观察元数据，以便在元数据发生变化时，导入更新的证书。
6.  Once the operator has been deployed, we need to create a secret that will store passwords used internally by OpenUnison. Make sure to use your own values for the keys in this secret (remember to base64 encode them):
    ```
    kubectl create -f - <<EOF
     apiVersion: v1
     type: Opaque
     metadata:
     name: orchestra-secrets-source
     namespace: openunison
     data:
     K8S_DB_SECRET: cGFzc3dvcmQK
     unisonKeystorePassword: cGFzc3dvcmQK
     kind: Secret
    EOF
    secret/orchestra-secrets-source created
    ```
    重要说明
    从现在开始，我们将假设您使用的是抖音安全的测试身份提供商。该工具将允许您自定义用户的登录信息，而无需建立目录和身份提供商。前往 https://portal.apps.tremolo.io/**点击**注册**即可注册。**
    **为了提供 OIDC 环境的帐户，我们将使用一个 SAML2 测试实验室，所以在继续之前一定要注册。**
***   First, we need to need to log into the testing identity provider by going to [https://portal.apps.tremolo.io/](https://portal.apps.tremolo.io/) and clicking on the **SAML2 Test Lab** badge:
    ![Figure 7.3 – SAML2 Test Lab badge ](img/Fig_7.3_B15514.jpg)
    图 7.3–SAML 2 测试实验室徽章
    *   Once you've clicked on the badge, you'll be presented with a screen that shows your test IdP metadata URL:
    ![Figure 7.4 – Testing identity provider's page, highlighting the SAML2 metadata URL ](img/Fig_7.4_B15514.jpg)
    图 7.4–测试身份提供者页面，突出显示 SAML2 元数据 URL
    复制此值并将其存储在安全的地方。