instruction sequences. Hence, where the success of Spectre-
PHT critically relies on unintended leakage along the mis-
predicted code path, ROP-style gadget abuse in Spectre-BTB
allows to more directly construct covert channels that expose
secrets from the transient domain (cf. Figure 2). We discuss
gadget types in more detail in Section 5.
Overlooked Mistraining Strategies. Spectre-BTB was ini-
tially demonstrated on Intel, AMD, and ARM CPUs using a
cross-address-space in-place mistraining strategy [50]. With
SGXPectre [13], Chen et al. extracted secrets from Intel SGX
enclaves using either a cross-address-space in-place or same-
address-space out-of-place BTB poisoning strategy. We ex-
perimentally reproduced these mistraining strategies through
a systematic evaluation presented in Table 2. On AMD and
ARM, we could not demonstrate out-of-place BTB poison-
ing. Possibly, these CPUs use an unknown (sub)set of virtual
address bits or a function of bits which we were not able to
reverse engineer. We encourage others to investigate whether
a different (sub)set of virtual address bits is required to enable
the attack.
To the best of our knowledge, we are the ﬁrst to recognize
that Spectre-BTB mistraining can also proceed by repeatedly
executing the vulnerable indirect branch with valid inputs.
Much like Spectre-PHT, such same-address-space in-place
BTB (Spectre-BTB-SA-IP) poisoning abuses the victim’s
own execution to mistrain the underlying branch target pre-
dictor. Hence, as an important contribution to understanding
attack surface and defenses, in-place mistraining within the
victim domain may allow bypassing widely deployed mit-
igations [4, 40] that ﬂush and/or partition the BTB before
entering the victim. Since the branch destination address is
now determined by the victim code and not under the direct
control of the attacker, however, Spectre-BTB-SA-IP cannot
offer the full power of arbitrary transient control ﬂow redirec-
tion. Yet, in higher-level languages like C++ that commonly
rely on indirect branches to implement polymorph abstrac-
tions, Spectre-BTB-SA-IP may lead to subtle “speculative
type confusion” vulnerabilities. For example, a victim that
repeatedly executes a virtual function call with an object of
TypeA may inadvertently mistrain the branch target predictor
to cause misspeculation when ﬁnally executing the virtual
function call with an object of another TypeB.
3.3 Spectre-RSB (Return Address Injection)
Microarchitectural Element. Maisuradze and Rossow [59]
and Koruyeh et al. [52] introduced a Spectre variant that ex-
ploits the Return Stack Buffer (RSB). The RSB is a small
per-core microarchitectural buffer that stores the virtual ad-
dresses following the N most recent call instructions. When
encountering a ret instruction, the CPU pops the topmost
element from the RSB to predict the return ﬂow.
Hijacking Return Flow. Misspeculation arises whenever the
RSB layout diverges from the actual return addresses on the
software stack. Such disparity for instance naturally occurs
when restoring kernel/enclave/user stack pointers upon pro-
tection domain switches. Furthermore, same-address-space
adversaries may explicitly overwrite return addresses on the
software stack, or transiently execute call instructions which
update the RSB without committing architectural effects [52].
This may allow untrusted code executing in a sandbox to tran-
siently divert return control ﬂow to interesting code gadgets
outside of the sandboxed environment.
Due to the ﬁxed-size nature of the RSB, a special case of
misspeculation occurs for deeply nested function calls [52,59].
Since the RSB can only store return addresses for the N most
recent calls, an underﬁll occurs when the software stack is
unrolled. In this case, the RSB can no longer provide accurate
predictions. Starting from Skylake, Intel CPUs use the BTB
as a fallback [19,52], thus allowing Spectre-BTB-style attacks
triggered by ret instructions.
Overlooked Mistraining Strategies. Spectre-RSB has been
demonstrated with all four mistraining strategies, but only on
Intel [52, 59]. Our experimental results presented in Table 2
generalize these strategies to AMD CPUs. Furthermore, in
line with ARM’s own analysis [6], we successfully poisoned
RSB entries within the same-address-space but did not ob-
serve any cross-address-space leakage on ARM CPUs. We
expect this may be a limitation of our current proof-of-concept
code and encourage others to investigate this further.
3.4 Spectre-STL (Speculative Store Bypass)
Microarchitectural Element. Speculation in modern CPUs
is not restricted to control ﬂow but also includes predicting
dependencies in the data ﬂow. A common type of Store To
254    28th USENIX Security Symposium
USENIX Association
U/S
P
R/W
#BR
#PF
#GP
#N M
Table 3: Demonstrated Meltdown-type (MD) attacks.
RSV D
Attack
MD-GP (Variant 3a) [8]
MD-NM (Lazy FP) [78]
MD-BR
MD-US (Meltdown) [56]
MD-P (Foreshadow) [85, 90]
MD-RW (Variant 1.2) [48]
MD-PK
Symbols (
) indicate whether an exception type (left) or permission
bit (right) is exploited. Systematic names are derived from what is exploited.
X D PK
or
Table 4: Secrets recoverable via Meltdown-type attacks and
whether they cross the current privilege level (CPL).
L
P
M e m
Leaks
Attack
Meltdown-US (Meltdown) [56]
Meltdown-P (Foreshadow-NG) [90]
Meltdown-P (Foreshadow-SGX) [85]
Meltdown-GP (Variant 3a) [8]
Meltdown-NM (Lazy FP) [78]
Meltdown-RW (Variant 1.2) [48]
Meltdown-PK
Meltdown-BR
ory
C a c h e
R e gister
C ro ss- C








Load (STL) dependencies require that a memory load shall
not be executed before all preceding stores that write to the
same location have completed. However, even before the
addresses of all prior stores in the pipeline are known, the
CPUs’ memory disambiguator [3, 33, 44] may predict which
loads can already be executed speculatively.
When the disambiguator predicts that a load does not have
a dependency on a prior store, the load reads data from the L1
data cache. When the addresses of all prior stores are known,
the prediction is veriﬁed. If any overlap is found, the load and
all following instructions are re-executed.
Reading Stale Values. Horn [29] showed how mispredic-
tions by the memory disambiguator could be abused to spec-
ulatively bypass store instructions. Like previous attacks,
Spectre-STL adversaries rely on an appropriate transient in-
struction sequence to leak unsanitized stale values via a mi-
croarchitectural covert channel. Furthermore, operating on
stale pointer values may speculatively break type and memory
safety guarantees in the transient execution domain [29].
4 Meltdown-type Attacks
This section overviews Meltdown-type attacks, and presents
a classiﬁcation scheme that led to the discovery of two pre-
viously overlooked Meltdown variants (cf. Figure 1). Impor-
tantly, where Spectre-type attacks exploit (branch) mispre-
diction events to trigger transient execution, Meltdown-type
attacks rely on transient instructions following a CPU ex-
ception. Essentially, Meltdown exploits that exceptions are
only raised (i.e., become architecturally visible) upon the
retirement of the faulting instruction. In some microarchitec-
tures, this property allows transient instructions ahead in the
pipeline to compute on unauthorized results of the instruction
that is about to suffer a fault. The CPU’s in-order instruction
retirement mechanism takes care to discard any architectural
effects of such computations, but as with the Spectre-type
attacks above, secrets may leak through microarchitectural
covert channels.
Systematization of Meltdown Variants. We introduce a
classiﬁcation for Meltdown-type attacks in two dimensions.
In the ﬁrst level, we categorize attacks based on the exception
), or not at all (
). Respectively ( vs.
Symbols indicate whether an attack crosses a processor privilege level () or
not (), whether it can leak secrets from a buffer (
), only with additional
steps (
) if ﬁrst shown in this work.
that causes transient execution. Following Intel’s [31] classiﬁ-
cation of exceptions as faults, traps, or aborts, we observed
that Meltdown-type attacks so far have exploited faults, but
not traps or aborts. The CPU generates faults if a correctable
error has occurred, i.e., they allow the program to continue
after it has been resolved. Traps are reported immediately
after the execution of the instruction, i.e., when the instruc-
tion retires and becomes architecturally visible. Aborts report
some unrecoverable error and do not allow a restart of the
task that caused the abort.
In the second level, for page faults (#PF), we further cate-
gorize based on page-table entry protection bits (cf. Table 3).
We also categorize attacks based on which storage locations
can be reached, and whether it crosses a privilege boundary
(cf. Table 4). Through this systematization, we discovered
several previously unknown Meltdown variants that exploit
different exception types as well as page-table protection bits,
including two exploitable ones. Our systematic analysis fur-
thermore resulted in the ﬁrst demonstration of exploitable
Meltdown-type delayed exception handling effects on AMD
CPUs.
4.1 Meltdown-US (Supervisor-only Bypass)
Modern CPUs commonly feature a “user/supervisor” page-
table attribute to denote a virtual memory page as belonging
to the OS kernel. The original Meltdown attack [56] reads
kernel memory from user space on CPUs that do not tran-
siently enforce the user/supervisor ﬂag. In the trigger phase
(cf. Figure 2) an unauthorized kernel address is dereferenced,
which eventually causes a page fault. Before the fault be-
comes architecturally visible, however, the attacker executes
a transient instruction sequence that for instance accesses a
cache line based on the privileged data read by the trigger
instruction. In the ﬁnal phase, after the exception has been
raised, the privileged data is reconstructed at the receiving
end of the covert channel (e.g., Flush+Reload).
The attacks bandwidth can be improved by suppressing
exceptions through transaction memory CPU features such as
USENIX Association
28th USENIX Security Symposium    255
Intel TSX [31], exception handling [56], or hiding it in another
transient execution [28, 56]. By iterating byte-by-byte over
the kernel space and suppressing or handling exceptions, an
attacker can dump the entire kernel. This includes the entire
physical memory if the operating system has a direct physical
map in the kernel. While extraction rates are signiﬁcantly
higher when the kernel data resides in the CPU cache, Melt-
down has even been shown to successfully extract uncached
data from memory [56].
4.2 Meltdown-P (Virtual Translation Bypass)
Foreshadow. Van Bulck et al. [85] presented Foreshadow, a
Meltdown-type attack targeting Intel SGX technology [30].
Unauthorized accesses to enclave memory usually do not
raise a #PF exception but are instead silently replaced with
abort page dummy values (cf. Section 6.2). In the absence
of a fault, plain Meltdown cannot be mounted against SGX
enclaves. To overcome this limitation, a Foreshadow attacker
clears the “present” bit in the page-table entry mapping the
enclave secret, ensuring that a #PF will be raised for subse-
quent accesses. Analogous to Meltdown-US, the adversary
now proceeds with a transient instruction sequence to leak
the secret (e.g., through a Flush+Reload covert channel).
Intel [34] named L1 Terminal Fault (L1TF) as the root
cause behind Foreshadow. A terminal fault occurs when ac-
cessing a page-table entry with either the present bit cleared
or a “reserved” bit set. In such cases, the CPU immediately
aborts address translation. However, since the L1 data cache
is indexed in parallel to address translation, the page table
entry’s physical address ﬁeld (i.e., frame number) may still
be passed to the L1 cache. Any data present in L1 and tagged
with that physical address will now be forwarded to the tran-
sient execution, regardless of access permissions.
Although Meltdown-P-type leakage is restricted to the
L1 data cache, the original Foreshadow [85] attack showed
how SGX’s secure page swapping mechanism might ﬁrst be
abused to prefetch arbitrary enclave pages into the L1 cache,
including even CPU registers stored on interrupt. This high-
lights that SGX’s privileged adversary model considerably
ampliﬁes the transient execution attack surface.
Foreshadow-NG. Foreshadow-NG [90] generalizes Fore-
shadow from the attack on SGX enclaves to bypass operating
system or hypervisor isolation. The generalization builds on
the observation that the physical frame number in a page-table
entry is sometimes under direct or indirect control of an adver-
sary. For instance, when swapping pages to disk, the kernel is
free to use all but the present bit to store metadata (e.g., the
offset on the swap partition). However, if this offset is a valid
physical address, any cached memory at that location leaks to
an unprivileged Foreshadow-OS attacker.
Even worse is the Foreshadow-VMM variant, which allows
an untrusted virtual machine, controlling guest-physical ad-
dresses, to extract the host machine’s entire L1 data cache
(including data belonging to the hypervisor or other virtual
machines). The underlying problem is that a terminal fault
in the guest page-tables early-outs the address translation
process, such that guest-physical addresses are erroneously
passed to the L1 data cache, without ﬁrst being translated into
a proper host physical address [34].
4.3 Meltdown-GP (System Register Bypass)
Meltdown-GP (named initially Variant 3a) [37] allows an
attacker to read privileged system registers. It was ﬁrst discov-
ered and published by ARM [8] and subsequently Intel [35]
determined that their CPUs are also susceptible to the attack.
Unauthorized access to privileged system registers (e.g., via
rdmsr) raises a general protection fault (#GP). Similar to pre-
vious Meltdown-type attacks, however, the attack exploits that
the transient execution following the faulting instruction can
still compute on the unauthorized data, and leak the system
register contents through a microarchitectural covert channel
(e.g., Flush+Reload).
4.4 Meltdown-NM (FPU Register Bypass)
During a context switch, the OS has to save all the registers,
including the ﬂoating point unit (FPU) and SIMD registers.
These latter registers are large and saving them would slow
down context switches. Therefore, CPUs allow for a lazy state
switch, meaning that instead of saving the registers, the FPU
is simply marked as “not available”. The ﬁrst FPU instruction
issued after the FPU was marked as “not available” causes a
device-not-available (#NM) exception, allowing the OS to save
the FPU state of previous execution context before marking
the FPU as available again.
Stecklina and Prescher [78] propose an attack on the above
lazy state switch mechanism. The attack consists of three
steps. In the ﬁrst step, a victim performs operations loading
data into the FPU registers. Then, in the second step, the CPU
switches to the attacker and marks the FPU as “not available”.
The attacker now issues an instruction that uses the FPU,
which generates an #NM fault. Before the faulting instruction
retires, however, the CPU has already transiently executed the
following instructions using data from the previous context.
As such, analogous to previous Meltdown-type attacks, a ma-
licious transient instruction sequence following the faulting
instruction can encode the unauthorized FPU register con-
tents through a microarchitectural covert channel (e.g., Flush+
Reload).
4.5 Meltdown-RW (Read-only Bypass)
Where the above attacks [8, 56, 78, 85] focussed on steal-
ing information across privilege levels, Kiriansky and Wald-
spurger [48] presented the ﬁrst Meltdown-type attack that
bypasses page-table based access rights within the current
256    28th USENIX Security Symposium
USENIX Association
privilege level. Speciﬁcally, they showed that transient exe-
cution does not respect the “read/write” page-table attribute.
The ability to transiently overwrite read-only data within the
current privilege level can bypass software-based sandboxes
which rely on hardware enforcement of read-only memory.
Confusingly, the above Meltdown-RW attack was origi-
nally named “Spectre Variant 1.2” [48] as the authors fol-
lowed a Spectre-centric naming scheme. Our systematization
revealed, however, that the transient cause exploited above is
a #PF exception. Hence, this attack is of Meltdown-type, but
not a variant of Spectre.
4.6 Meltdown-PK (Protection Key Bypass)
Intel Skylake-SP server CPUs support memory-protection
keys for user space (PKU) [32]. This feature allows processes
to change the access permissions of a page directly from
user space, i.e., without requiring a syscall/hypercall. Thus,
with PKU, user-space applications can implement efﬁcient
hardware-enforced isolation of trusted parts [27, 84].
We present a novel Meltdown-PK attack to bypass both