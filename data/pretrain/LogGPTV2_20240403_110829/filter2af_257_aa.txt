原文：
在本文的上篇中，我们为读者介绍了由于图形渲染库精度问题而引发的安全漏洞。其中，我们讲解了SwiftShader图形库和Skia图像库中的精度误差问题，同时，还解释了整数转换为浮点数，以及分数相乘时出现的误差问题。在本文中，我们将为读者进一步深入讲解其他方面的精度误差问题，以及它们所带来的安全隐患。
**将样条线转换为线段时出现的浮点精度误差**
* * *
在绘制路径时，Skia会将所有非线性曲线（圆锥曲线、二次和三次样条）转换为线段。不足为奇的是，这些转换也会受到精度误差的影响。
样条线到线段的转换在很多地方都会发生，但最容易出现浮点精度误差的是[hair_quad](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Hairline.cpp?g=0&l=233&rcl=f08d1d0ce19c72bb911f059dcf916cf99a0a2467
"hair_quad")(用于绘制二次曲线)函数和[hair_cubic](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Hairline.cpp?g=0&rcl=f08d1d0ce19c72bb911f059dcf916cf99a0a2467&l=359
"hair_cubic")(用于绘制三次曲线)函数。这两个函数都是从[hair_path](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Hairline.cpp?g=0&l=501&rcl=f08d1d0ce19c72bb911f059dcf916cf99a0a2467
"hair_path")调用的，这一点已经在上面提到过了。由于在处理三次样条时，会出现更大的精度误差，所以，在这里只考察三次曲线的情形。
在逼近该样条曲线时，首先会利用[SkCubicCoeff](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkGeometry.h?g=0&l=375&rcl=b9bfb7b275d11eb6ba90dc2dfa9cfa9f73cc613e
"SkCubicCoeff")计算三次曲线的各个系数。其中，我们最感兴趣的部分如下所示：
    fA = P3 + three * (P1 - P2) - P0;
    fB = three * (P2 - times_2(P1) + P0);
    fC = three * (P1 - P0);
    fD = P0;
其中P1、P2和P3是输入点，fA、fB、fC和fD是输出系数。然后，使用[hair_cubic](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkScan_Hairline.cpp?g=0&rcl=f08d1d0ce19c72bb911f059dcf916cf99a0a2467&l=359
"hair_cubic")计算线段点，具体代码如下所示：
    const Sk2s dt(SK_Scalar1 / lines);
    Sk2s t(0);
    ...
    Sk2s A = coeff.fA;
    Sk2s B = coeff.fB;
    Sk2s C = coeff.fC;
    Sk2s D = coeff.fD;
    for (int i = 1; i < lines; ++i) {
       t = t + dt;
       Sk2s p = ((A * t + B) * t + C) * t + D;
       p.store(&tmp[i]);
    }
其中，p是输出点，而lines则是我们用来逼近曲线的线段数。根据样条曲线的长度的不同，一根三次样条曲线最多可以用512条线段进行逼近。
很明显，这里的计算并不十分精确。在本文的后面部分，当x和y坐标进行相同的计算时，我们只考察x坐标部分的相关计算。
我们假设绘图区域的宽度是1000像素。因为hair_path用于支持抗锯齿的绘制路径，所以，我们需要确保路径的所有点都介于1到999之间，实际上，这些工作都是在最初的路径级剪辑检查中完成的。下面让我们考虑以下坐标，这些坐标都通过了该项检查:
    p0 = 1.501923
    p1 = 998.468811
    p2 = 998.998779
    p3 = 999.000000
对于这些点来说，相应的系数如下所示：
    a = 995.908203
    b = -2989.310547
    c = 2990.900879
    d = 1.501923
如果使用更大的精度完成相同的计算，你就会发现这里的数字并不太精确。接下来，让我们看看如果用512个线段逼近样条曲线会是什么结果。实际上，这会得到513个x坐标：
    0: 1.501923
    1: 7.332130
    2: 13.139574
    3: 18.924301
    4: 24.686356
    5: 30.425781
    ...
    500: 998.986389
    501: 998.989563
    502: 998.992126
    503: 998.994141
    504: 998.995972
    505: 998.997314
    506: 998.998291
    507: 998.999084
    508: 998.999695
    509: 998.999878
    510: 999.000000
    511: 999.000244
    512: 999.000000
我们可以看到，x坐标在不断增加，并且在点511处，已经明显超出了“安全”区域，其值也超过了999。
实际上，这还不足以触发越界写漏洞，为何？这主要归功于Skia绘制抗锯齿线的工作方式，实际上，我们至少需要在剪辑区域之外画1/64像素，这样它才会触发安全漏洞。然而，在这种情况下，关于精度误差的一个有趣的事情是：绘图区域越大，可能出现的误差就越大。
因此，让我们考虑一个32767像素的绘图区域（Chrome中的最大画布尺寸）。然后，首先进行剪辑检查，看看所有路径点是否全部位于区间[1,32766]内。现在，让我们考察以下各点：
    p0 = 1.7490234375
    p1 = 32765.9902343750
    p2 = 32766.000000
    p3 = 32766.000000
相应的系数为：
    a = 32764.222656
    b = -98292.687500
    c = 98292.726562
    d = 1.749023
相应的线性逼近值为：
    0: 1.74902343
    1: 193.352295
    2: 384.207123
    3: 574.314941
    4: 763.677246
    5: 952.295532
    …
    505: 32765.925781
    506: 32765.957031
    507: 32765.976562
    508: 32765.992188
    509: 32766.003906
    510: 32766.003906
    511: 32766.015625
    512: 32766.000000
如您所见，我们在索引511处就明显越出了边界。
然而，这个bug并不能用于触发内存损坏，至少在最新版本的skia中不会触发这个问题——对于Skia来说，这是非常幸运的；但是，对于野心勃勃的攻击者来说，这又是非常遗憾的。究其原因，还是在于[SkDrawTiler](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkBitmapDevice.cpp?l=42&rcl=41f4f31cd7dadd1123600c38faa8fef6bd7fb29c
"SkDrawTiler")。每当Skia使用SkBitmapDevice（而非使用GPU设备）进行渲染、绘图区域在所有维度上都大于8191像素、并且不是一次绘制整个图像的时候，Skia就会将其拆分为大小（最大）为8191x8191像素的多个图块
。[这种做法](https://skia.googlesource.com/skia.git/+/b5e1f7558052cc60deaf23ccc2c898d1c6c94c09
"这种做法")是在今年3月份引进的，之所以这样做，并非出于安全考虑，而是为了支持更大的绘图表面。不过，它仍然有效地阻止了针对这个漏洞的利用，同时，也阻止了针对表面大于8191而致使精度误差足够大的其他情况下的漏洞利用。
尽管如此，这个漏洞在3月之前却是可利用的，我们认为，这个例子能够帮助我们很好地阐释精度误差的概念。
**将样条线转换为线段时的整数精度误差**
* * *
在绘制(就这里来说，是填充)路径时，需要使用线段来逼近样条线，这时候就会受到精度误差的影响，并且在这种情况下，精度误差漏洞是可以利用的。有趣的是，这里的精度误差并不是出现在浮点运算中，而是出现在定点运算中。
该问题发生在[SkQuadraticEdge::setQuadraticWithoutUpdate](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?rcl=5eb8fc585e9b3c9ccc82b0921986e1020ddaff23&l=181
"SkQuadraticEdge::setQuadraticWithoutUpdate")和SkCubicEdge::setCubicWithoutUpdate中。为了简单起见，这里还是只关注三次样条曲线，并且仅考察曲线的x坐标。
在[SkCubicEdge::setCubicWithoutUpdate](https://cs.chromium.org/chromium/src/third_party/skia/src/core/SkEdge.cpp?rcl=5eb8fc585e9b3c9ccc82b0921986e1020ddaff23&l=350