wrong!"
.text:00000000000037A9                 call    sub_11A0
.text:00000000000037AE                 mov     edi, 0
.text:00000000000037B3                 call    exit_0
.text:00000000000037B8 ; -------------------------------------------------------
--------------------
.text:00000000000037B8
.text:00000000000037B8 loc_37B8:                               ; CODE XREF: 
sub_31CF+5D1↑j
.text:00000000000037B8                 mov     cs:c, 123h
.text:00000000000037C2                 jmp     switch1
.text:00000000000037C7                 mov     eax, cs:b
.text:00000000000037CD                 cmp     eax, 0AABBh
.text:00000000000037D2                 jnz     short loc_37F8
.text:00000000000037D4                 mov     eax, cs:c
.text:00000000000037DA                 cmp     eax, 123h
.text:00000000000037DF                 jnz     short loc_37F8
.text:00000000000037E1                 mov     eax, cs:d
.text:00000000000037E7                 cmp     eax, 0CCDDh
.text:00000000000037EC                 jnz     short loc_37F8
.text:00000000000037EE                 mov     eax, cs:e
.text:00000000000037F4                 test    eax, eax
.text:00000000000037F6                 jz      short loc_380E
.text:00000000000037F8
.text:00000000000037F8 loc_37F8:                               ; CODE XREF: 
sub_31CF+603↑j
.text:00000000000037F8                                         ; sub_31CF+610↑j 
...
.text:00000000000037F8                 lea     rdi, aYouAreWrong ; "you are 
wrong!"
.text:00000000000037FF                 call    sub_11A0
.text:0000000000003804                 mov     edi, 0
.text:0000000000003809                 call    exit_0
.text:000000000000380E ; -------------------------------------------------------
--------------------
.text:000000000000380E
.text:000000000000380E loc_380E:                               ; CODE XREF: 
sub_31CF+627↑j
.text:000000000000380E                 mov     cs:e, 456h
.text:0000000000003818                 mov     eax, cs:e
.text:000000000000381E                 mov     cs:a, eax
.text:0000000000003824                 jmp     switch1
require:
b == 0xAABB
c == 0x123
d == 0xCCDD
e == 0
set: e = 0x456
rule:*
require:b * a == 0x3F9D72D4
set a = a*b
rule:+
require:a+d == 0x16DD3C
set a=a+b
rule:-
.text:0000000000003829                 mov     edx, cs:a
.text:000000000000382F                 mov     eax, cs:b
.text:0000000000003835                 imul    eax, edx
.text:0000000000003838                 mov     cs:a, eax
.text:000000000000383E                 mov     eax, cs:a
.text:0000000000003844                 cmp     eax, 3F9D72D4h
.text:0000000000003849                 jz      switch2
.text:000000000000384F                 lea     rdi, aYouAreWrong ; "you are 
wrong!"
.text:0000000000003856                 call    sub_11A0
.text:000000000000385B                 mov     edi, 0
.text:0000000000003860                 call    exit_0
.text:0000000000003865                 mov     edx, cs:a
.text:000000000000386B                 mov     eax, cs:d
.text:0000000000003871                 add     eax, edx
.text:0000000000003873                 mov     cs:a, eax
.text:0000000000003879                 mov     eax, cs:a
.text:000000000000387F                 cmp     eax, 16DD3Ch
.text:0000000000003884                 jz      loc_3916
.text:000000000000388A                 lea     rdi, aYouAreWrong ; "you are 
wrong!"
.text:0000000000003891                 call    sub_11A0
.text:0000000000003896                 mov     edi, 0
.text:000000000000389B                 call    exit_0
require:a - c == 0x16105F
set: a = a - c
rule: ^
require: a ^ dword_70E0 == 0x161182
set: a ^= dword_70E0
dword_70E0(yylval) is a number from input parsed by lex.
The yacc parse tokens from left to right one by one , and then parse symbols(+,-,*,^) from right to 
left one by one.
We can easily conclude right token sequence by 'require' and 'set'
n1ctf{YACC*LEX+CTF-FUN^1447380}
BabyOS
In the ﬁrst, please allow me introduce you a open source OS called xbook, which developed by a 
Chinese college student.  If you use command 'strings' collect information from images, you can 
ﬁnd it's name and git address.
You can get a copy from GitHub:
https://github.com/hzcx998/xbook2
The xbookOS has two images, the kernel and data.
The kernel is stored in a.img, and the data is stored in the other img which ﬁle system is FAT32.
.text:00000000000038A0                 mov     edx, cs:a
.text:00000000000038A6                 mov     eax, cs:c
.text:00000000000038AC                 sub     edx, eax
.text:00000000000038AE                 mov     eax, edx
.text:00000000000038B0                 mov     cs:a, eax
.text:00000000000038B6                 mov     eax, cs:a
.text:00000000000038BC                 cmp     eax, 16105Fh
.text:00000000000038C1                 jz      short loc_3919
.text:00000000000038C3                 lea     rdi, aYouAreWrong ; "you are 
wrong!"
.text:00000000000038CA                 call    sub_11A0
.text:00000000000038CF                 mov     edi, 0
.text:00000000000038D4                 call    exit_0
.text:00000000000038D9                 mov     eax, cs:a
.text:00000000000038DF                 mov     edx, cs:dword_70E0
.text:00000000000038E5                 xor     eax, edx
.text:00000000000038E7                 mov     cs:a, eax
.text:00000000000038ED                 mov     eax, cs:a
.text:00000000000038F3                 cmp     eax, 161182h
.text:00000000000038F8                 jz      short loc_391C
.text:00000000000038FA                 lea     rdi, aYouAreWrong ; "you are 
wrong!"
.text:0000000000003901                 call    sub_11A0
.text:0000000000003906                 mov     edi, 0
.text:000000000000390B                 call    exit_0
The n1ctf program is stored in data image, and it can easily exports by mounting the image to vm 
which runs a Windows.
Unfortunately, the n1ctf program's ﬁle in the image is encrypted, and the decryption code may in 
the kernel.
The a.img is a Floppy Image contains the loader and 3 ELF ﬁles, using binwalk to detect ELF ﬁles 
as blows:
Extracting ELFs and loading them to IDA.
You can ﬁnd a function called 'do_execute'. 'do_execute' is used to execute a program, like 
'CreateProcess' in windows.
You can ﬁnd decryption code in 'do_execute'. The kernel load the original ﬁle to memory and then 
decrypt it and then write to '/tmp/decrypt'.
so you can just exports /tmp/decrypt from data image.
 After we successfully extract the n1ctf ﬁle and decrypt it, we can drag it into IDA for analysis. 
Locate the main function. 
binwalk a.img
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
7271          0x1C67          ELF, 32-bit LSB processor-specific, (SYSV)
51200         0xC800          ELF, 32-bit LSB executable, Intel 80386, version 1 
(SYSV)
409831        0x640E7         ELF, 32-bit LSB processor-specific, (SYSV)
422240        0x67160         HTML document header
422457        0x67239         HTML document footer
The program's logic is that the user ﬁrst input the key and uses the DES encryption algorithm to 
encrypt the speciﬁc plaintext, and the ciphertext is written into the out ﬁle. Then the user's ﬁrst 
input is used as the rc4 key, and the user's second input is encrypted and compared with the 
speciﬁc ciphertext.
The number of des encryption rounds is only three rounds, and the key can be obtained by using 
a Diﬀerential Cryptanalysis. Then you can use the key to decrypt the ciphertext to get the ﬂag.
#include
#define NUM 3
char 
final[32]="\x85\x3c\xb1\x81\x3d\x85\x95\x7a\xf6\x68\xd8\xfd\x9f\xdc\xcd\xd7\x73\
x18\x97\x32\xf1\x50\xe3\xd8\x07\x79\x01\x4a\x45\xea\x6e\x42";
void rc4_init(unsigned char *s, unsigned char *key, unsigned long Len) 
{
    int i =0, j = 0;
    char k[256] = {0};
    unsigned char tmp = 0;
    for (i=0;i<256;i++) {
        s[i] = i;
        k[i] = key[i%Len];
    }
    for (i=0; i<256; i++) {
        j=(j+s[i]+k[i])%256;
        tmp = s[i];
        s[i] = s[j]; 
        s[j] = tmp;
    }
}
void rc4_crypt(unsigned char *s, unsigned char *Data, unsigned long Len)
{
    int i = 0, j = 0, t = 0;
    unsigned long k = 0;
    unsigned char tmp;
    for(k=0;k<Len;k++) {
        i=(i+1)%256;
        j=(j+s[i])%256;
        tmp = s[i];
        s[i] = s[j]; 
        s[j] = tmp;
        t=(s[i]+s[j])%256;
        Data[k] ^= s[t];
    }
} 
int PC1[56] = {
    57,49,41,33,25,17,9,1,
    58,50,42,34,26,18,10,2,
    59,51,43,35,27,19,11,3,
    60,52,44,36,63,55,47,39,
    31,23,15,7,62,54,46,38,
    30,22,14,6,61,53,45,37,
    29,21,13,5,28,20,12,4 };
int PC2[48] = { 
    14,17,11,24,1,5,3,28,
    15,6,21,10,23,19,12,4,
    26,8,16,7,27,20,13,2,41,
    52,31,37,47,55,30,40,51,
    45,33,48,44,49,39,56,34,
    53,46,42,50,36,29,32 };
int S[8][4][16] = {
    14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,
    0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,
    4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,
    15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,
    15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,
    3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,
    0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,
    13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,
    10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,
    13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,
    13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,
    1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,
    7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,
    13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,
    10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,
    3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14,
    2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,
    14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,
    4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,
    11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3,
    12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,
    10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,
    9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,
    4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,
    4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,
    13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,
    1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,
    6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12,
    13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,
    1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,
    7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,
    2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11 }
;
int P[32] = {
    16,7,20,21,29,12,28,17,
    1,15,23,26,5,18,31,10,
    2,8,24,14,32,27,3,9,
    19,13,30,6,22,11,4,25 };
int E[48] = {
    32,1,2,3,4,5,4,5,6,7,8,9,
    8,9,10,11,12,13,12,13,14,15,16,17,
    16,17,18,19,20,21,20,21,22,23,24,25,
    24,25,26,27,28,29,28,29,30,31,32,1
};
unsigned long long int plaintext[2*NUM] = {
    0x48656c6c6f5f307e ,0x63344e796f5f307e ,
    0x6733746d79797979, 0x4b45596b79797979,
    0x7472795f31745e5e ,0x6733742131745e5e
};
unsigned long long int ciphertext[2*NUM] = {
    0x6d1d8448d2f9d2ef,0x72608ea7ca520b1d,
    0x4602f4a480ec6ee4,0x9129d1181bd8b4a9,
    0x40926f30eb7a8850,0xb41dd3d5dfc16fa3
};
int move_bit[3] = {1,2,4};
int loss_bit[8] = { 0, 12, 21, 25, 38, 41, 46, 29 };
int plaintext_2[2 * NUM][2][32];
int ciphertext_2[2 * NUM][2][32];
int choice[64][6] = {0}; 
int key_count[8][64] = {0 };
int key_8[8];
int key_48[48];
int key_56[56] = { 0 };
int f_key_56[56];
int s_out[NUM][32], s_in[NUM][48];
int KEY[64] = {0};
int KEY_8[8] = { 0 };
void change_2();
void xor_operation(int result[], int a[], int b[], int num);
void E_operation(int E_R2[2 * NUM][48]);
void Find_8_key(int k, int E_R2[2 * NUM][48]);