## 数据库选型之 - 大象十八摸 - 致 架构师、开发者    
##### [TAG 22](../class/22.md)
### 作者                                     
digoal                                      
### 日期                                      
2017-02-09                                                              
### 标签                                                                                                                                                      
PostgreSQL , 数据库特性 , 数据库应用场景分析 , 数据库选型            
----                                      
## 背景         
数据库对于一家企业来说，相比其他基础组件占据比较核心的位置。    
有很多企业由于最初数据库选型问题，导致一错再错，甚至还有为此付出沉痛代价的。    
数据库的选型一定要慎重，但是这么多数据库，该如何选择呢？    
我前段时间写过一篇关于数据库选型的文章，可以参考如下    
[《数据库选型思考》](../201702/20170208_03.md)     
另外，PostgreSQL这个数据库这些年的发展非常的迅猛，虽然国内还跟不上国外的节奏，但是相信国人逐渐会融合进去。    
![postgresql ranking](20170209_01_pic_003.jpg)      
所以我专门针对PostgreSQL提炼了它的一些应用场景（普通的应用场景就不举例了），希望对你的选型可以起到一定的参考作用。    
## 1 任意字段组合查询 - ERP、电商、网站、手机APP 等业务场景    
在一些前端的人机交互页面中，经常会有很多选择框，让用户进行选择，这些选择框可能对应的是数据库表中的不同字段。    
这种画面经常出现在ERP，电商，网站，手机APP等场景中。    
对于开发人员来说是一件很头疼的事情，因为不知道该对哪些字段创建索引，或者干脆对所有字段都建立索引，给数据库带来较大的性能和维护的问题。    
PostgreSQL中有两个技术(gin, bloom索引)，可以完美的解决这类业务场景的问题。    
![pic](../201605/20160523_01_pic_001.png)    
[《宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树》](../201702/20170205_01.md)    
[《PostgreSQL 9.6 黑科技 bloom 算法索引，一个索引支撑任意列组合查询》](../201605/20160523_01.md)      
## 2 高并发、高效率范围查询 - 金融、物联网、智能DNS 等业务场景    
有些场景，经常要对值进行范围的比对。比如    
物联网，对传感器上传的值，进行范围比对。    
智能DNS，需要对来源IP进行判断，并找出其落在哪个IP地址段内。    
金融行业，经常要设置一些指标范围，时刻判断指数是否落在某个区间，当一些指数落在某个范围区间时，触发下一步的操作（比如买入或卖出）。    
传统的两个字段+复合B树的索引，效率低下，通常8核的机器只能达到3000多的QPS。    
PostgreSQL通过(range类型和gist,sp-gist索引)，可以将效率提升20多备，8核的机器可以达到8万的QPS。    
![pic](../201612/20161231_01_pic_013.jpg)    
[《聊聊between and的坑 和 神奇的解法》](../201701/20170126_02.md)    
[《PostgreSQL 黑科技 range 类型及 gist index 20x+ speedup than Mysql index combine query》](../201206/20120607_01.md)     
[《PostgreSQL 黑科技 range 类型及 gist index 助力物联网(IoT)》](../201205/20120517_01.md)     
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
## 3 网格化、矢量化地图 - 地理类应用、LBS社交、导航 等业务场景    
人们为了更好的描述一个东西，有一种将大化小的思路，比如时钟被分为了12个区域，每个区域表示一个小时，然后每个小的区域又被划分为更小的区域表示分钟。      
![pic](../201701/20170124_01_pic_007.png)      
在GIS系统中，也有类似的思想，比如将地图划分成网格。通过编码来简化地理位置的判断（比如相交，包含，距离计算等），但是请注意使用网格带来的问题，比如精度的问题，网格的大小决定了精度，又比如相对坐标的问题，可能无法描述清楚边界的归属。      
PostgreSQL可以提供给你更好的选择，矢量化的运算。    
![pic](../201609/20160929_02/0006.jpg)    
![pic](../201609/20160929_02/0048.jpg)    
1\. 在PostGIS中虽然也支持网格对象的描述方式，但是并不是使用这种方法来进行几何运算（比如相交，包含，距离计算等），所以不存在类似的精度问题，个人建议没有强需求的话，不必做这样的网格转换。      
2\. 如果是多种精度地图的切换（比如多个图层，每个图层代表一种地图精度），建议使用辐射的方式逐渐展开更精细的图层，以点为中心，逐渐辐射。（很多专业的地图软件是这样做的）        
[《蜂巢的艺术与技术价值 - PostgreSQL PostGIS's hex-grid》](../201701/20170124_01.md)    
[《PostGIS 地理信息数据 多核并行处理》](../201703/20170307_03.md)      
## 4 异步消息 - 物联网、WEB、金融 等业务场景    
电波表是一个非常典型的广播应用，类似的还有组播（注意不是主播哦），类似的应用也很多，比如广播电视，电台等。      
在数据库中，其实也有类似的应用，比如利用PostgreSQL数据库的异步消息机制，往数据库的消息通道发送数据，应用程序可以监听对应的消息通道，获取异步消息数据。      
通过异步消息在数据库中实现了一对多的广播效果。      
在物联网中，也可以有类似的应用，例如结合PostgreSQL的流式计算，当传感器上报的数据达到触发事件的条件时，往异步消息通道发送一则消息，应用程序实时的接收异步消息，发现异常。    
这样做的好处很多，即节省了空间（结合流式处理，完全可以轻量化部署），又能提高传播的效率（一对多的传播），程序设计也可以简单化。     
在金融行业，也可以有类似的实现，比如对数据的实时流式监测，数据流经一系列的规则，触发异步消息。    
![pic](../201701/20170116_01_pic_001.jpg)    
[《从电波表到数据库小程序之 - 数据库异步广播(notify/listen)》](../201701/20170116_01.md)     
[《从微信小程序 到 数据库"小程序" , 鬼知道我经历了什么》](../201701/20170113_03.md)    
一个例子    
这个例子使用PostgreSQL的异步消息通知机制（notify/listen），以及数据库的触发器，PostGIS地理库插件，结合nodejs, socket.io实现了一个实时的客户端GPS坐标更新的小业务。    
1\. 在数据库中新增GPS坐标，数据库端编写的"小程序"会自动发送异步消息给客户端，客户端马上就展示了当前新增的坐标    
![pic](../201701/20170113_02_pic_004.png)      
2\. 修改GPS坐标，数据库端编写的"小程序"会自动发送异步消息给客户端，客户端刷新了当前坐标    
![pic](../201701/20170113_02_pic_006.png)      
3\. 删除GPS坐标，数据库端编写的"小程序"会自动发送异步消息给客户端，客户端刷新了当前坐标    
![pic](../201701/20170113_02_pic_008.png)     
详见     
[《[转载] postgres + socket.io + nodejs 实时地图应用实践》](../201701/20170113_02.md)     
## 5 流式实时数据处理 - 物联网、金融 等业务场景    
在物联网、金融行业中，有大量的数据产生，同时需要实时的对数据进行处理。    
pipelinedb是基于PostgreSQL的一个流式计算数据库，纯C代码，效率极高(**32c机器,单机日处理流水达到了250.56亿条**)。同时它具备了PostgreSQL强大的功能基础，正在掀起一场流计算数据库制霸的腥风血雨。          
在物联网(IoT)有非常广泛的应用场景，越来越多的用户开始从其他的流计算平台迁移到pipelineDB。            
pipelinedb的用法非常简单，首先定义stream(流)，然后基于stream定义对应的transform(事件触发模块)，以及Continuous Views(实时统计模块)            
数据往流里面插入，transform和Continuous Views就在后面实时的对流里的数据进行处理，对开发人员来说很友好，很高效。        
值得庆祝的还有，所有的接口都是SQL操作，非常的方便，大大降低了开发难度。        
![pic](../201612/20161220_01_pic_005.png)    
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](../201612/20161220_01.md)      
除此之外，PostgreSQL的undo table，batch调度, 异步消息结合，也能达到与pipeline一样的效果。    
[《PostgreSQL 流式数据处理(聚合、过滤、转换...)系列 - 9》](../201701/20170105_09.md)    
[《基于PostgreSQL的流式PipelineDB, 1000万/s实时统计不是梦》](../201510/20151015_01.md)      
[《"物联网"流式处理应用 - 用PostgreSQL实时处理(万亿每天)》](../201512/20151215_01.md)      
## 6 GIS、图像近似度运算 - 互联网、AR红包、虚拟现实与GIS结合、广告营销 等业务场景    
AR红包是GIS与图像、社交、广告等业务碰撞产生的一个全新业务场景。    
需要做广告投放的公司，可以对着广告牌，或者店铺中的某个商品拍照，然后藏AR红包。    
要找红包的人，需要找到这家店，并且也对准藏红包的物体拍摄，比较藏红包和找红包的两张图片，就可以实现抢红包的流程。    
可以想象的空间很多。    
使用的核心技术是GIS（地理位置）与图像近似度比较。    
PostgreSQL对于这两项技术都可以很好的支持。    
![pic](../201701/20170113_01_pic_003.jpg)    
![pic](../201701/20170113_01_pic_004.jpg)    
[《(AR虚拟现实)红包 技术思考 - GIS与图像识别的完美结合》](../201701/20170113_01.md)      
## 7 相似内容搜索、去重 - 互联网、数据公司、搜索引擎 等业务场景    
在搜索引擎、数据公司、互联网中都会有网络爬虫的产品，或者有人机交互的产品。    
有人的地方就有江湖，盗文、盗图的现象屡见不鲜，而更惨的是，盗图和盗文还会加一些水印。    
也就是说，你在判断盗图、盗文的时候，不能光看完全一致，可能要看的是相似度。    
这给内容去重带来了很大的麻烦，不过还好，PostgreSQL数据库整合了相似度去重的算法和索引接口，可以方便的处理相似数据。    
比如相似的数组、相似的文本、相似的分词、相似的图像的搜索和去重等等。    
又比如鉴黄。      
![pic](../201612/20161222_02_pic_010.png)    
![pic](../201611/20161126_01_pic_003.png)    
[《电商内容去重\内容筛选应用(如何高效识别转载\盗图\侵权?) - 文本相似、图片集相似、数组相似的优化和索引技术》](../201701/20170112_02.md)    
[《PostgreSQL 在视频、图片去重，图像搜索业务中的应用》](../201611/20161126_01.md)    
[《从相似度算法谈起 - Effective similarity search in PostgreSQL》](../201612/20161222_02.md)     
## 8 任意字段模糊查询 - 互联网、前端页面、搜索引擎 等业务场景    
在一些应用程序中，可能需要对表的所有字段进行检索，有些字段可能需要精准查询，有些字段可能需要模糊查询或全文检索。          
比如一些前端页面下拉框的勾选和选择。        
比如一些域名的模糊查询。    
这种需求对于应用开发人员来说，会很蛋疼，因为写SQL很麻烦，例子：          
之前写过一篇文章来解决这个问题      
[《PostgreSQL 行级 全文检索》](../201604/20160419_01.md)        
使用的是全文检索，而当用户的需求为模糊查询时？ 如何来解决呢？       
PostgreSQL中可以很好的解决这个问题，适用于任意字符（包括英文、中文、等等）。    
[《PostgreSQL 全表 全字段 模糊查询的毫秒级高效实现 - 搜索引擎颤抖了》](../201701/20170106_04.md)     