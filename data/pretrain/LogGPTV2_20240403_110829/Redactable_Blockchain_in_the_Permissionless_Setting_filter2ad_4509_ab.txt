lying blockchain system that is required for our protocol.
We consider time to be divided into standard discrete
units, such as minutes. A well deﬁned continuous amount
of these units is called a slot. Each slot sl l is indexed for
l ∈ {1, 2, 3, . . .}. We assume that users have a synchronised
clock that indicates the current time down to the smallest dis-
crete unit. The users execute a distributed protocol to generate
a new block in each slot, where a block contains some data.
We assume the slots’ real time window properties as in [28].
In [21], [39], [28] it is shown that a “healthy” blockchain
must satisfy the properties of persistence and liveness, which
intuitively guarantee that after some time period, all honest
users of the system will have a consistent view of the chain,
and transactions posted by honest users will eventually be
included. We informally discuss the two properties next.
Persistence: Once a user in the system announces a particular
transaction as stable, all of the remaining users when queried
will either report the transaction in the same position in the
ledger or will not report any other conﬂicting transaction as
stable. A system parameter k determines the number of blocks
that stabilise a transaction. That is, a transaction is stable if
the block containing it has at least k blocks following it in the
blockchain. We only consider a transaction to be in the chain
after it becomes stable.
Liveness: If all the honest users in the system attempt to
include a certain transaction into their ledger, then after the
passing of time corresponding to u slots which represents
the transaction conﬁrmation time, all users, when queried and
responding honestly, will report the transaction as being stable.
Throughout the paper we refer to the user as both a user
and a miner interchangeably.
C. Execution Model.
3A similar technique is used in [10] to “scar” a block that was previously
redacted.
In the following we deﬁne the notation for our protocol
executions. Our deﬁnitions follow along the same lines of [41].
(cid:18)(cid:19)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
R
B(cid:3)
n
B(cid:3)
k
B(cid:3)
l
B(cid:3)
j
B(cid:3)
x
R
B(cid:3)
z
B(cid:3)
y
propose B(cid:3)
j
Voting period ((cid:2))
P(C, B(cid:3)
j ) = accept
Bj
H(B(cid:4)
j )
H(B(cid:4)
j )
H(B(cid:4)
j )
H(B(cid:4)
j )
B(cid:3)
j
H(B(cid:4)
j )
H(B(cid:4)
j )
H(B(cid:4)
j )
H(B(cid:4)
j )
(a) Proposing a redaction B(cid:2)
j for the block Bj
j replaces Bj in the chain
Figure 1: The candidate block pool R stores the candidate blocks that are proposed and that can be endorsed in the voting
phase. A block is linked to its predecessor by two links, the old link (solid arrow) and the new link (dashed arrow). In (a), a
redact request B(cid:3)
j is included in the chain to denote
a new candidate redaction; its voting phase starts just after its proposal. In (b), the candidate block B(cid:3)
j has gathered enough
votes and was approved by the redaction policy P of the chain; B(cid:3)
j replaces Bj and the redacted chain is propagated. Note
that new link from the block to the right of B(cid:3)
j still holds. For
simplicity, we consider the parameters k = 0 (persistence), (cid:5) = 4 (voting period) and ρ ≥ 3/4 (threshold for policy approval).
j is proposed as a redaction for Bj and added to R, then the hash of B(cid:3)
j is broken (marked by a cross), however the old link to B(cid:3)
(b) After a successful voting phase, B(cid:2)
A protocol refers to an algorithm for a set of interactive
Turing Machines (also called nodes) to interact with each
other. The execution of a protocol Π that is directed by an
environment/outer game Z(1κ), which activates a number
of parties U = {p1, . . . , pn} as either honest or corrupted
parties. Honest parties would faithfully follow the protocol’s
prescription, whereas corrupt parties are controlled by an
adversary A, which reads all their inputs/messages and sets
their outputs/messages to be sent.
• A protocol’s execution proceeds in rounds that model
the beginning of every round,
atomic time steps. At
honest parties receive inputs from an environment Z; at
the end of every round, honest parties send outputs to the
environment Z.
• A is responsible for delivering all messages sent by
parties (honest or corrupted) to all other parties. A cannot
modify the content of messages broadcast by honest
parties.
• At any point Z can corrupt an honest party j, which
means that A gets access to its local state and subse-
quently controls party j.
• At any point of the execution, Z can uncorrupt a cor-
rupted party j, which means that A no longer controls
j. A party that becomes uncorrupt is treated in the same
way as a newly spawning party, i.e., the party’s internal
state is re-initialised and then the party starts executing
the honest protocol no longer controlled by A.
Note that a protocol execution can be randomised, where the
randomness comes from honest parties as well as from A
and Z. We denote by view ← EXECΠ(A,Z, κ) the randomly
sampled execution trace. More formally, view denotes the joint
view of all parties (i.e., all their inputs, random coins and
messages received, including those from the random oracle) in
the above execution; note that this joint view fully determines
the execution.
III. EDITING THE BLOCKCHAIN
In this section we introduce an abstraction Γ of a blockchain
protocol, and we describe how to extend Γ into an editable
blockchain protocol Γ(cid:3).
A. Blockchain Protocol
We consider an immutable blockchain protocol (for in-
stance [21]), denoted by Γ, where nodes receive inputs from
the environment Z, and interact among each other to agree
on an ordered ledger that achieves persistence and liveness.
The blockchain protocol Γ is characterised by a set of global
parameters and by a public set of rules for validation. The
protocol Γ provides the nodes with the following set of
interfaces which are assumed to have complete access to the
network and its users.
• {C(cid:3),⊥} ← Γ.updateChain: returns a longer and valid
chain C in the network (if it exists), otherwise returns ⊥.
• {0, 1} ← Γ.validateChain(C): The chain validity check
takes as input a chain C and returns 1 iff the chain is
valid according to a public set of rules.
• {0, 1} ← Γ.validateBlock(B): The block validity check
takes as input a block B and returns 1 iff the block is
valid according to a public set of rules.
casts it to all the nodes of the system.
• Γ.broadcast(x ): takes as input some data x and broad-
The nodes in the Γ protocol have their own local chain C which
is initialised with a common genesis block. The consensus in Γ
guarantees the properties of persistence and liveness discussed
in Section II-B.
B. Editable Blockchain
We build our editable blockchain protocol Γ(cid:3) by modifying
and extending the aforementioned protocol Γ. The protocol Γ(cid:3)
has copies of all the basic blockchain functionalities exposed
by Γ through the interfaces described above, and modiﬁes
(cid:18)(cid:19)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
the validateChain and validateBlock algorithms in order to
accommodate for edits in C. In addition,
the protocol Γ(cid:3)
provides the following interfaces:
j ← Γ(cid:3).proposeEdit(C, j, x (cid:3)): takes as input the chain
• B(cid:3)
C, an index j of a block to edit and some data x (cid:3). It then
returns a candidate block for Bj.
• {0, 1} ← Γ(cid:3).validateCand(B(cid:3)
j ,C): takes as input a can-
j and the chain C and returns 1 iff the
didate block B(cid:3)
candidate block B(cid:3)
j is valid.
The modiﬁed chain validation and block validation algo-
rithms are presented in Algorithm 1 and Algorithm 2, respec-
tively, while the new algorithms to propose an edit to a block
and to validate candidate blocks are presented in Algorithm 3
and Algorithm 4, respectively. In Fig. 2 we formally describe
the protocol Γ(cid:3).
Intuitively, we need modiﬁcations for chain validation and
block validation algorithms to account for an edited block in
the chain. A block that has been edited possesses a different
state, that does not immediately correlate with its neighbouring
blocks. Therefore, for such an edited block we need to ensure
that the old state of the block (the state before the edit) is
still accessible for veriﬁcation.4 We do this by storing the old
state information in the block itself. This therefore requires
a modiﬁed block validation algorithm and a modiﬁed chain
validation algorithm overall.
We note that for simplicity our protocol is restricted to
perform a single edit operation per block throughout the run of
the protocol. In Appendix A we describe an extension of the
protocol to accommodate for an arbitrary number of redactions
per block.
Blockchain Policy. We introduce the notion of a blockchain
policy P, that determines if an edit to the chain C should
be approved or not. The protocol Γ(cid:3) is parameterised by a
policy P that is a function that takes as input a chain C and a
candidate block B(cid:3) (that proposes a modiﬁcation to the chain
C) and it returns accept if the candidate block B(cid:3) complies
with the policy P, otherwise it outputs reject; in case the
modiﬁcation proposed by B(cid:3) is still being deliberated in the
chain C, then P returns voting.
In its most basic form, a policy P requires that a candidate
block B(cid:3) should only be accepted if B(cid:3) was voted by the
majority of the network within some predeﬁned interval of
blocks (or voting period (cid:5)). A formal deﬁnition follows.
Deﬁnition 1 (Policy). A candidate block B(cid:3) generated in
round r is said to satisfy the policy P of chain C :=
(B1, . . . , Bn),
it holds that
Br+(cid:4) ∈ C(cid:4)k and the ratio of blocks between Br and Br+(cid:4)
containing H(B(cid:3)) (a vote for B(cid:3)) is at least ρ, for k, (cid:5) ∈ N,
and 0 < ρ ≤ 1, where k is the persistence parameter, (cid:5) is the
voting period, and ρ is the ratio of votes necessary within the
voting period (cid:5).
i.e., P(C, B(cid:3)) = accept,
if
4Note that the protocol does not need to maintain the redacted data for
veriﬁcation, and therefore all redacted data is completely removed from the
chain.
j and remove B(cid:3)
C. Protocol Description
We denote a block to be of the form B := (cid:4)s, x, ctr , y(cid:5),
where s ∈ {0, 1}κ is the hash of the previous block, x ∈
{0, 1}∗ is the block data, and y ∈ {0, 1}κ is the old state of the
block data. To extend an editable chain C to a new longer chain
C(cid:3) := C||B(cid:3), the newly created block B(cid:3) := (cid:4)s(cid:3), x(cid:3), ctr(cid:3), y(cid:3)(cid:5)
sets s(cid:3) := H(ctr , G(s, x), y), where Head(C) := (cid:4)s, x, ctr , y(cid:5).
Note that upon the creation of block B(cid:3), the component y(cid:3)
takes the value G(s(cid:3), x(cid:3)), that represents the initial state of
block B(cid:3).
During the setup of the system, the chain C is initialised
as C := genesis, and all the users in the system maintain a
local copy of the chain C and a pool R consisting candidate
blocks for edits, that is initially empty. The protocol runs in a
sequence of rounds r (starting with r := 1).
In the beginning of each round r, the users try to extend
their local chain using the interface Γ(cid:3).updateChain, that tries
to retrieve new valid blocks from the network and append them
to the local chain. Next, the users collect all the candidate
blocks B(cid:3)
from the network and validate them by using
j
Γ(cid:3).validateCand (Algorithm 4); then, the users add all the valid
candidate blocks to the pool R. For each candidate block B(cid:3)
in R, the users compute P(C, B(cid:3)
j
j ) to verify if the candidate
block B(cid:3)
j should be adopted by the chain or not; if the output
is accept they replace the original block Bj in the chain
j from R. If the
by the candidate block B(cid:3)
output is reject, the users remove the candidate block B(cid:3)
from R, otherwise if the output is voting they do nothing.
j
To create a new block B the users collect transactions from
the network and store them in x; if a user wishes to endorse
j ∈ R that is still
the edit proposed by a candidate block B(cid:3)
in voting stage, the user can vote for the candidate block
B(cid:3)
j by simply adding H(B(cid:3)
j ) to the data x. After the block is
created and the new extended chain C(cid:3) := C||B is built, the
users broadcast the new chain C(cid:3) iff Γ(cid:3).validateChain(C(cid:3)) = 1
(Algorithm 1). Finally, if a user wishes to propose an edit to
block Bj in the chain C, she ﬁrst creates the new data x(cid:3)
j ,
that represents the modiﬁcations that she proposes to make
to the data xj, and calls proposeEdit (Algorithm 3) using the
interface Γ(cid:3).proposeEdit with the chain C, index j of the block
in C and the new data x(cid:3)
j . The algorithm returns a candidate
block B(cid:3)
Chain Validation. Given a chain C, the user needs to validate
C according to some set of validation rules. To do this,
she uses the Γ(cid:3).validateChain interface, that is implemented
by Algorithm 1. The algorithm takes as input a chain C and
starts validating from the head of C. In Line 5, the validity of
the block Bj is checked. If the assertion in Line 6 is false and
if the check in Line 7 is successful, then the block Bj−1 is a
valid edited block. In Line 7, the validity of Bj−1 is checked
in the context of a candidate block and whether the block is
accepted according to the voting policy P of the chain.
Block Validation. To validate a block, the validateBlock
algorithm (described in Algorithm 2) takes as input a block
B and ﬁrst validates the data included in the block according
j that is broadcasted to the network.
(cid:18)(cid:19)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
The protocol Γ(cid:3) consists of a sequence of rounds r, and is parameterised by the liveness and persistence parameters, denoted by
u, k, respectively, and by a policy P that among other rules and constraints, determines the parameter (cid:5) (that is the duration of
the voting period) and ρ (that is the threshold of votes within the period (cid:5) for a candidate block to be accepted and incorporated
into the chain). A pictorial representation of the protocol can be found in Fig. 1.