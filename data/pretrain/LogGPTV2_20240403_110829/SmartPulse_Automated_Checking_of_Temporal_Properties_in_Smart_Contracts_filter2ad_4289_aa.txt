title:SmartPulse: Automated Checking of Temporal Properties in Smart Contracts
author:Jon Stephens and
Kostas Ferles and
Benjamin Mariano and
Shuvendu K. Lahiri and
Isil Dillig
5
8
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
SmartPulse: Automated Checking of Temporal
Properties in Smart Contracts
Jon Stephens∗, Kostas Ferles∗, Benjamin Mariano∗, Shuvendu Lahiri†, Isil Dillig∗
∗The University of Texas at Austin. {jon, kferles, bmariano, isil}@cs.utexas.edu
†Microsoft Research. PI:EMAIL
Abstract—Smart contracts are programs that run on the
blockchain and digitally enforce the execution of contracts
between parties. Because bugs in smart contracts can have
serious monetary consequences, ensuring the correctness of such
software is of utmost importance. In this paper, we present
a novel
technique, and its implementation in a tool called
SMARTPULSE, for automatically verifying temporal properties
in smart contracts. SMARTPULSE is the ﬁrst smart contract
veriﬁcation tool that is capable of checking liveness properties,
which ensure that “something good” will eventually happen
(e.g., “I will eventually receive my refund”). We experimentally
evaluate SMARTPULSE on a broad class of smart contracts and
properties and show that (a) SMARTPULSE allows automatically
verifying important liveness properties, (b) it is competitive with
or better than state-of-the-art tools for safety veriﬁcation, and (c)
it can automatically generate attacks for vulnerable contracts.
I. INTRODUCTION
Smart contracts are programs that run on the blockchain
and facilitate multi-party transactions involving monetary ex-
change. Because bugs in smart contracts can allow attackers
to steal money from other users, programming errors in this
context have dire security implications [18], [32]. Furthermore,
because smart contracts are immutable once deployed on the
blockchain, bugs cannot be ﬁxed after deployment. Therefore,
it is critical to ensure the correctness of smart contracts before
they are deployed on the Blockchain.
interest
Due to the severe consequences of programming errors in
this context, recent years have seen signiﬁcant
in
developing program analysis tools to improve reliability of
smart contracts. Generally speaking, efforts in this space fall
under two categories: bug ﬁnding and veriﬁcation. Most bug
ﬁnding techniques look for certain patterns like reentrancy
that are often highly correlated with security vulnerabilities.
On the other hand, veriﬁcation techniques aim to construct a
proof that the contract satisﬁes a given formal speciﬁcation.
In this paper, we describe the design and implementation of
a new automated veriﬁcation framework called SMARTPULSE
for checking the correctness of smart contracts. In contrast
to prior efforts, our approach is not limited to safety and
can also check for liveness properties, which require that
something good eventually happens. In fact, liveness prop-
erties are particularly important in this context because smart
contract properties often have the ﬂavor “If a condition is met,
then I will eventually get my money”. For example, for a
smart contract implementing an on-line auction, an important
correctness property is that everyone except the highest bidder
should get their money back. Intuitively, this is a liveness
property because it stipulates that a desirable event, namely
the transfer of funds, will eventually happen.
SMARTPULSE is based on three key design principles:
1) User-friendly and expressive speciﬁcation language:
SMARTPULSE allows users to specify their properties in
Fig. 1: Schematic workﬂow of our approach
a language called SMARTLTL. At its core, SMARTLTL
is based on linear temporal logic (LTL), an intuitive and
well-established formalism for expressing properties of
traces over time. However, SMARTLTL extends standard
LTL with additional constructs that make it easier to
express correctness properties of smart contracts.
2) Ability to customize attack models: SMARTPULSE
is parametrized by an environment model that makes
it possible to experiment with different attack models.
For example, our approach allows users to customize
assumptions about how the attacker can interact with a
contract through external calls.
3) Automation and precision: SMARTPULSE is a fully
automated tool based on the counterexample-guided ab-
straction reﬁnement (CEGAR) paradigm and provides a
uniﬁed approach for simultaneously searching for proofs
and violations. Furthermore,
in cases where SMART-
PULSE reports an error, it can generate a concrete attack
under which the property will be violated.
As shown schematically in Figure 1, SMARTPULSE takes
as input a contract P , a SMARTLTL speciﬁcation ϕ, and an
environment model M (which includes the attack model),
and it checks whether P satisﬁes ϕ under M. Internally,
SMARTPULSE consists of two conceptual phases, namely
program instrumentation and software model checking.
In the ﬁrst phase, SMARTPULSE instruments the input
Solidity program P and generates a new program P (cid:48) (along
with a new property ϕ(cid:48)) to be fed to the veriﬁer. Our program
instrumentation serves three main purposes. First, because the
Blockchain can revert the execution of a transaction under
certain conditions (e.g., when the contract runs out of “gas”),
our instrumentation allows the veriﬁer to be failure-aware.
Second, it incorporates the environment model M into the
input program. Finally, it generates a pure LTL formula ϕ(cid:48)
such that P satisﬁes SMARTLTL speciﬁcation ϕ if and only
if P (cid:48) satisﬁes LTL formula ϕ(cid:48).
Once SMARTPULSE instruments the original contract, it
uses software model checking to verify the instrumented
program against the LTL speciﬁcation. Our method builds
on prior techniques for LTL property veriﬁcation [8] and
constructs a B¨uchi contract whose feasible, non-terminating
paths correspond to LTL property violations. However,
in
addition, SMARTPULSE leverages domain knowledge about
© 2021, Jon Stephens. Under license to IEEE.
DOI 10.1109/SP40001.2021.00085
555
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
Solidity  sourceSmartLTL spec□◊ Model of environment InstrumentSoftwarE  Model  Checker SmartPulsesmart contracts to make veriﬁcation more practical. In partic-
ular, SMARTPULSE exploits the semantics of SMARTLTL to
reduce the number of program paths that it needs to consider,
while also utilizing Solidity semantics to simplify its feasibility
checking procedure.
We evaluated SMARTPULSE on 191 smart contracts by
checking a total of 1947 temporal properties, including both
liveness and safety. Our evaluation shows that SMARTPULSE
can successfully verify important liveness properties of smart
contracts deployed on the Blockchain. We also evaluate
SMARTPULSE on safety properties and show that it com-
pares favorably against VERX and KEVM-VER, two state-
of-the-art
tools for smart contract veriﬁcation. Finally, we
demonstrate that SMARTPULSE can not only detect known
vulnerabilities but that it can also generate attacks to exploit
those vulnerabilities.
To summarize, this paper makes the following contributions:
• We propose the ﬁrst toolchain for proving a general class
of temporal properties of smart contracts. Notably, our
approach can check liveness in addition to safety.
• We propose a language called SMARTLTL for conveniently
specifying temporal properties of smart contracts.
• We present a program instrumentation technique that sim-
pliﬁes the subsequent veriﬁcation problem.
• We show how to incorporate domain knowledge about smart
contracts into a software model checker to make veriﬁcation
of temporal properties more tractable.
• We use SMARTPULSE to check 1947 properties across 191
smart contracts and show that SMARTPULSE is effective at
verifying/falsifying these properties, while also having the
ability to generate attacks.
II. OVERVIEW
Figure 2 shows a Solidity program implementing an auction.
This contract has three methods, bid, close, and refund.
Users can participate in the auction by calling the bid method,
which allows each user to place a bid at most once. The close
method is called by the contract owner when the auction ends,
and the refund method is also called by the contract owner
to refund all losing bids once the auction has closed.
Here, an important correctness property is “all non-winning
bidders should be eventually refunded their bid amount”. At
ﬁrst glance, this contract seems to satisfy this property because
(a) the bid function places the refund amount in a mapping
called refunds every time a participant is outbid, and (b)
the refund function iterates over this mapping and calls the
transfer function to send each non-winning bidder their bid
amount. However, in reality, this contract does not satisfy this
property for two reasons. First, the call to transfer implicitly
invokes the receiver’s so-called fallback function which can
throw an exception to abort the refund transaction. Thus, a
malicious user can prevent bidders from receiving their refund.
Second, even if there are no malicious users, this contract is
still vulnerable because the refund method may run of out
of gas before all bidders are refunded.
A. Usage scenario
The techniques proposed in this paper can uncover such
vulnerabilities. To use SMARTPULSE, the user ﬁrst needs to
specify the correctness property as a SMARTLTL formula.
For our example, the correctness speciﬁcation is a liveness
property and can be expressed as follows in SMARTLTL:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
contract Auction {
...
address payable winner = address(0x0);
uint currBid = 0; bool closed = false;
address payable [] bidders;
mapping (address => uint) refunds;
function bid() payable public {
address payable sender = msg.sender;
require(!closed && msg.value > currBid));
require(refunds[sender] == 0 &&
sender != winner);
// Store refund of previous winner.
refunds[winner] = currBid;
// Update winner and currBid.
bidders.push(sender);
winner = sender;currBid = msg.value;
}
function close() public onlyOwner {
closed = true;
}
function refund() public onlyOwner {
require(closed);
for(uint i = 0; i < bidders.length; i++) {
uint refAmt = refunds[bidders[i]];
refunds[bidders[i]] = 0;
bidders[i].transfer(refAmt);
}
}
}
Fig. 2: Auction contract. The onlyOwner modiﬁer indicates
that refund/close can only be called by the auction owner.
(cid:3) ((ﬁnish(bid, msg.value = X ∧ msg.sender = L) ∧
♦ﬁnish(close, L (cid:54)= winner)) → ♦send(to = L ∧ amt = X))
This property states that if (1) a user L places a bid of
amount X (i.e., the ﬁrst conjunct on the left-hand side of
the implication) and (2) L eventually is outbid (the second
conjunct), then (3) L will eventually be transferred X amount
of ether (the right-hand side of implication). In addition to the
property, the user also needs to specify a fairness constraint
that constrains valid execution traces of the contract. In this
case, our fairness constraint states that the auction owner will
eventually call the refund method:
♦start(refund, closed ∧ sender = owner)
If we invoke SMARTPULSE with this speciﬁcation, it fails
to verify the contract and returns a counterexample trace with
contract owner A and three participants B, C, and D. In this
trace, user B bids 15 Ether, followed by a bid of 16 Ether
from C and 17 Ether from D. Then, A calls the close and
refund methods, where refund attempts to transfer 15 Ether
back to B, but B’s fallback method throws an exception. As
a result, A never ends up transferring C her refund.
One way to ﬁx this vulnerability is to change the contract’s
interface. Speciﬁcally, rather than implementing a refund
method called by the contract owner, the new interface now
has a withdraw method (shown in Figure 3) to be called