CPU. Note that there are conﬁguration options for the
slew rate i.e., the time taken for a speciﬁc voltage change
to occur (fastest rate in [30] is given as 80 mV/μs), as well
as limits on overshoot and undershoot.
C. Conﬁguring Voltage and Frequency
In order to reliably ﬁnd a faulty frequency/voltage pair, we
conﬁgured the CPU to run at a ﬁxed frequency. This step can
be easily executed using documented Intel frequency scaling
interfaces, e.g., through the script given in Appendix A.
The undervolting is applied by writing to the concealed
MSR 0x150 (e.g., using the msr Linux kernel module) just
before entering the victim enclave through an ECALL in the
untrusted host program. After returning from the enclave, the
host program immediately reverts to a stable operating voltage.
Note that, apart from the msr kernel module, attackers can also
rely on more precise methods to control undervolting, e.g.,
if conﬁguration latency should be minimized. For this, we
have extended the SGX-Step [71] enclave execution control
framework with x86 interrupt and call gate functionality so
as to be able to execute the privileged rdmsr and wrmsr
instructions directly before entering a victim enclave.
One challenge for a successful Plundervolt attack is to
establish the correct undervolting parameter such that
the
processor produces incorrect results for certain instructions,
while still allowing the remaining code base to function
normally. That is, undervolting too far leads to system crashes
and freezes, while undervolting too little does not produce any
faults. Finding the right undervolting value therefore requires
some experimentation by carefully reducing the core voltage
in small decrements (e.g., by 1 mV per step) until a fault
occurs, but before the system crashes. In practice, we found
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1468
that it sufﬁces to undervolt for short periods of time by -100
to -260 mV, depending on the speciﬁc CPU, frequency and
temperature (see Section III-A for a more precise analysis).
D. Undervolting Decline Micro-benchmark
To study how quickly writes to MSR 0x150 manifest in
actual changes to the core voltage, we performed a micro-
benchmark where we continuously read the reported current
CPU voltage from MSR 0x198 (IA32_PERF_STATUS). We
executed the micro-benchmark code by means of a privileged
x86 interrupt gate that ﬁrst applies -100 mV undervolting and
then immediately executes a tight loop of 300 iterations to
collect pairs of measurements of the current processor voltage
and the associated Time Stamp Counter (TSC) value.
Fig. 2. Voltage decline over time for Intel i3-7100U-C, repeating a -100 mV
undervolting seven times and measuring actual voltage in MSR 0x198.
Figure 2 displays the measurement results for seven rep-
etitions of a -100 mV drop. It is immediately evident that
there is a substantial delay (between 500k and 1M TSC
ticks) between the MSR change and the actual undervolting
being applied. While some of this delay might be due to the
software-based measurement via MSR 0x198, our benchmark
primarily reveals that voltage changes incur a non-negligible
overhead. We will come back to this point in Section VII
when devising countermeasures because this delay means
returning to normal voltage when entering enclave mode may
incur substantial overhead. Furthermore, when comparing the
repetitions, it becomes apparent that voltage scaling behaves
non-deterministically, i.e., the actual voltage drop occurs at
different times after writing to MSR 0x150. However, from
an attacker’s perspective, our micro-benchmark also shows that
it is possible to precisely delay entry into a victim enclave
by continuously measuring current operating voltage until the
desired threshold is reached.
E. Tested Processors
For our experiments, we used different SGX-enabled pro-
cessors from Skylake onwards, cf. Table I. We also had access
to multiple CPUs with the same model numbers in some
cases. Because we found that different chips with the same
model number can behave differently when undervolted (cf.
Section III-A), we list those separately and refer to them with
a letter appended to the model number, e.g., i3-7100U-A, i3-
7100U-B, etc. We carried out all experiments using Ubuntu
16.04 or 18.04 with stock Linux v4.15 and v4.18 kernels.
We attempted to undervolt a Xeon processor (Broadwell-EP
E5-1630V4), however, found that in this case the MSR 0x150
does not seem to affect the core voltage.
PROCESSORS USED FOR THE EXPERIMENTS IN THIS PAPER. WHEN
MULTIPLE CPUS WITH THE SAME MODEL NUMBER WERE TESTED, WE
TABLE I
APPEND UPPERCASE LETTERS (-A, -B ETC).
Code name
Broadwell
Skylake
Kaby Lake
Kaby Lake-R
Coffee Lake-R
Model no.
E5-1630V4
i7-6700K
i7-7700HQ
i3-7100U-A
i3-7100U-B
i3-7100U-C
i7-8650U-A
i7-8650U-B
i7-8550U
i9-9900U
Microcode
0xb000036
0xcc
0x48
0xb4
0xb4
0xb4
0xb4
0xb4
0x96
0xa0
Frequency
N/A
2 GHz
2.0 GHz
1.0 GHz
2.0 GHz
2.0 GHz
1.9 GHz
1.9 GHz
2.6 GHz
3.6 GHz
Vulnerable
SGX




















F. Implications for Older Processors
We veriﬁed that software-controlled undervolting is possible
on older CPUs, e.g., on the Haswell i5-4590, Haswell i7-4790
and the Core 2 Duo T9550. In fact, it has been possible
for system software to undervolt
the processor from the
ﬁrst generation of Intel Core processors [51]. However, to
the best of our understanding, this has no direct impact on
security because SGX is not available and the attacker requires
root permissions to write to the MSRs. The attack might
nevertheless be relevant in a hypervisor or cloud setting, where
an untrusted virtual machine can undervolt the CPU just before
a hypercall and/or context switch to another VM. This attack
scenario would require the hypervisor to be conﬁgured to allow
the untrusted virtual machine to directly access undocumented
MSRs (e.g., 0x150) and we did not ﬁnd this in any real-world
conﬁgurations. Consequently, for the lack of plausible attack
targets, we did not extensively study the possibility of fault
induction on these processors. Our initial undervolting testing
yielded a voltage-dependent segmentation fault on the Haswell
i5-4590 and Haswell i7-4790 for the simple test program
described in Section III.
III. FAULTING IN-ENCLAVE MULTIPLICATIONS
As a ﬁrst step towards practical fault injection into SGX
enclaves, we analyzed a number of x86 assembly instructions
in isolation. While we could not fault simple arithmetic (like
addition and subtraction) or bit-wise instructions (like shifts
and OR/XOR/AND), we found that multiplications can be
faulted. This might be explained by the fact
that, on the
one hand, multipliers typically have a longer critical path
compared to adders or other simple operations, and, on the
other hand,
that multiplications are likely to be most ag-
gressively optimized due to their prevalence in real-world
code. This conjecture is supported by the fact that we also
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1469
observed faults for other instructions with presumably complex
circuitry behind them, in particular the AES-NI extensions (cf.
Section IV-C).
Consider the following proof-of-concept implementation,
which runs a simple multiplication (the given code compiles to
assembly with imul instructions) in a loop inside an ECALL
handler:
uint64_t multiplier = 0x1122334455667788;
uint64_t var = 0xdeadbeef * multiplier;
while (var == 0xdeadbeef * multiplier)
{
var = 0xdeadbeef;
var *= multiplier;
}
var ˆ= 0xdeadbeef * multiplier;
Clearly, this program should not terminate. However, our
experiments show that undervolting the CPU just before
switching to the enclave leads to a bit-ﬂip in var, typically
in byte 3 (counting from the least-signiﬁcant byte as byte 0).
This allows the enclave program to terminate. The output is
the XOR with the desired value, to highlight only the faulty
bit(s). We observe that in this speciﬁc conﬁguration the output
is always 0x04 00 00 00.
A. Analysis of Undervolting Effects on Multiplications
Using MSR 0x198 (IA32_PERF_STATUS), we were able
to read the voltage in normal operating mode and also record
the voltage when a faulty result was computed. While we
are aware that the measurements in this register might not be
precise in absolute terms, they reﬂect the relative undervolting
precisely. Figure 3 and Figure 4 show the measured relation
between frequency, normal voltage (blue), and the necessary
undervolting to trigger a faulty multiplication inside an SGX
enclave (orange) for the i3-7100U-A and an i7-8650U-A,
respectively.
Fig. 4. Base voltage (blue) and voltage for ﬁrst fault (orange) vs. CPU
frequency for the i7-8650U-A
/* drop voltage */
do {
i++;
var = start_value * multiplier;
} while (var == correct && i < iterations);
/* return voltage */
We then performed a search over different values for both
operands. The faulty results (see Table II for selected exam-
ples) generally fell into the following categories:
• One to ﬁve (contiguous) bits ﬂip, or
• all most-signiﬁcant bits ﬂip.
Additionally, we also rarely observed faulty states in be-
tween, cf. the last entry in Table II and the fault used in
Section V-A. From those results, we noted:
• The smallest ﬁrst operand to fault was 0x89af;
• the smallest second operand to fault was 0x1;
• the smallest faulted product was 0x80000 * 0x4, result-
ing in 0x200000; and
• the order of the operands is important when attempting
to produce a fault: For example, 0x4 * 0x80000 never
faulted in our experiments.
EXAMPLES OF FAULTED MULTIPLICATIONS ON I3-7100U-B AT 2 GHZ
TABLE II
Start value Multiplier
Faulty result
Flipped bits
0x080004
0xa7fccc
0x9fff4f
0xacff13
0x2bffc0
0x2bffc0
0x2bffc0
0x0008
0x0335
0x00b2
0x00ee
0x0008
0x0008
0x0008
0xfffffffff0400020
0x000000020abdba3c
0x000000004f3f84ee
0x000000009ed523aa
0x00000000005ffe00
0xfffffffff15ffe00
0x00000100115ffe00
0xfffffffff0000000
0x0000000010000000
0x0000000020000000
0x000000003e000000
0x0000000001000000
0xfffffffff0000000
0x0000010010000000
We also investigated the iterations and undervolting required
to produce faults (cf. Table III) on the i3-7100U-B at 2 GHz.
A higher number of iterations will fault with less undervolting,
i.e., the probability of a fault is lower with less undervolting.
For a small number of iterations, it is very difﬁcult to induce
a fault, as the undervolting required caused the CPU to freeze
Fig. 3. Base voltage (blue) and voltage for ﬁrst fault (orange) vs. CPU
frequency for the i3-7100U-A
We conducted further investigations from normal (non-
SGX) code, as we found that these faults were identical to
those inside the SGX enclave. We wrote the following code
to enable the ﬁrst operand (start_value) and the second
operand (multiplier) to be tested:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1470
before a fault was observed. For the experiments in Fig. 3 and
Fig. 4, we used a large number of 100,000,000 iterations, so
faults occur with relatively low undervolting already.
To this end, we showcase practical fault attacks on mini-
malist benchmark enclaves using off-the-shelf cryptographic
libraries.
TABLE III
NUMBER OF ITERATIONS UNTIL A FAULT OCCURS FOR THE
MULTIPLICATION (0X A E0000 * 0X18) VS. NECESSARY
UNDERVOLTING ON I3-7100U-B AT 2 GHZ.
Iterations
1,000,000,000
100,000,000
10,000,000
1,000,000
500,000
100,000
Undervolting
-130mV