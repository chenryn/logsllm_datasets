5.3.6
A per-page permission model has a problem: this model can
pop up too many permission dialogs when our web browser visits
a web site that has many web pages using the Geolocation API.
To suppress the overﬂow of permission dialogs, our web browser
automatically applies a per-domain permission model to a web site
that pops up per-page permission dialogs too frequently.
5.4 Evaluation
We evaluate our scheme in terms of (1) accuracy, (2) time over-
head of the location sensitivity estimation, and (3) overall storage
overhead. For the evaluation, we use Galaxy S III and choose 200
web pages among the collected 1196 web pages that are in English
and access the geolocation without user interaction.
5.4.1 Accuracy
We verify how accurately our scheme estimates location sensitiv-
ity of the selected web pages by comparing the results with manual
inspection. The proposed scheme correctly estimates the location
sensitivity of 93.5% of the web pages. We further analyze the failed
estimations and conﬁrm that the failures are due to web pages that
(1) store the obtained geolocation in cookies and retrieve them in
future (4.5%), (2) change their content according to both time and
geolocation (1.5%), and (3) use IP addresses to inspect locations
while ignoring the geolocation that our web browser provides (0.5%).
To access the geolocation information stored on such web pages,
the proposed scheme may need to manipulate cookies, analyze web
page semantics, or cloak IP addresses, respectively.
5.4.2 Time overhead
We measure how much time our scheme spends to inspect location
(a) Per-page, position, and in-
spected.
(b) Per-domain, tracking, and
not yet inspected.
Figure 8: Examples of the proposed permission dialogs.
web page lastly to reduce the number of repeated veriﬁcations of
web page changes.
The per-domain DB is similar to the per-page DB except that it
maintains neither fuzzy hash values nor the timestamp of the last
visit because we cannot verify changes of all web pages under a
domain. To verify whether a domain’s content changes, we must
compute the fuzzy hash values of all web pages in it. However, this
computation has two problems: (1) we cannot enumerate all the web
pages under the domain and (2) some of the web pages may change
frequently. Moreover, granting permissions to a domain implies that
a user trusts all web pages of the domain. Consequently, verifying
all web pages under a domain is less meaningful.
Lastly, we must solve a synchronization problem between the DBs
that occurs when users grant a geolocation permission to a domain
whose web pages have already obtained geolocation permissions.
To solve this problem, we remove permissions granted to web pages
from the per-page DB when their domain obtains a permission.
5.3.5 Decreasing geolocation accuracy
According to a user’s choices, our web browser decreases the
accuracy of geolocation retrieved from an Android platform. A
naïve method to decrease the geolocation accuracy is to adjust GPS
coordinates [15], but this approach may lead to address information
being wrong. For example, the adjustment can virtually locate a
user in a different city, so if the web page that the user is on relies on
city-level geolocation, the user receives meaningless information.
Address-aware geolocation manipulation. We propose an add-
ress-aware method that cleverly decreases geolocation accuracy, by
altering postal address information instead of GPS coordinates. We
use the Google Geocoding API [12] that translates GPS coordinates
into the corresponding address information and vice versa.
We explain the procedures of the address-aware method with the
following conditions: (1) the current GPS coordinates of a device
are latitude 40.71751 and longitude -74.00348; and (2) our web
browser wants to provide city-level geolocation to a web page. First,
the web browser attempts to translate the GPS coordinates into the
corresponding address information by requesting http://maps.
googleapis.com/maps/api/geocode/json?latlng=
40.71751,-74.00348&sensor=true. When the Google
Geocoding API succeeds to process the request, the browser receives
a JSON ﬁle with estimated geolocation, and extracts detailed address
(cid:140)(cid:141)(cid:142)(cid:143)(cid:144)6. DISCUSSION
6.1 Limitations
We discuss some limitations of the proposed scheme. First, our
web browser cannot estimate the location sensitivity of web pages
that demand high user interaction (e.g., button clicks or search key-
words typings). However, this limitation is less important because
such explicit user interaction reminds users that the web sites try
to access their geolocation. Users who value their privacy may
re-determine whether to grant their geolocation to the web sites.
Second, we cannot apply the proposed scheme to web browsers
that disallow JavaScript overriding for security reasons because the
proposed scheme should replace the getCurrentPosition()
and watchPosition() methods. If web browser developers
accept the proposed scheme and directly modify their web browsers,
we can eliminate this limitation.
Third, web sites that recognize geolocation inspection may pro-
vide fake web pages to deceive our web browser. Our browser visits
a web page several times with various geolocations, so web sites can
identify whether the browser inspects their web pages when they
compare consecutive HTTP requests. However, this identiﬁcation
can be a huge burden on the web sites, especially when they have a
large number of concurrent users. Therefore, we presume that web
sites are unwilling to identify our web browser.
Lastly, web sites that only use IP-based geolocation can ignore
our scheme. However, a recent study [4] has identiﬁed that IP-based
geolocation fails when an IP address belongs to cellular networks.
For example, the study found that mobile devices hundreds of miles
apart can share the same IP address space. Therefore, we anticipate
that web sites would use the Geolocation API to obtain correct
geolocation instead of using IP-based geolocation.
6.2 Suggestions
We summarize our suggestions to mitigate the privacy problems
of the Geolocation API. First, we suggest that the Geolocation API
has to allow web sites to control the accuracy of the geolocation
that they demand. If the Geolocation API provides accuracy options
(e.g., pinpoint, city, state, and country) and returns postal address
instead of GPS coordinates, web sites can choose one of the op-
tions according to their requirements while eliminating geocoding
costs. This improvement mitigates privacy threats while reducing
computational and communication overhead of the web sites (§3.4).
Next, we recommend that the Geolocation API needs to employ
per-method permission models for separating positioning and track-
ing because tracking may cause more serious privacy problems than
positioning.
Lastly, we propose that the Geolocation API needs to allow web
sites to request permissions for either domains or pages. Some web
sites serving maps (e.g., Google Maps or Bing Maps) surely demand
per-domain permissions because most of their web pages use the
Geolocation API. However, other web sites such as shopping mall
sites may demand per-page permissions because most of their web
pages do not use the Geolocation API.
7. RELATED WORK
Location privacy. Several researchers have proposed various
methods to preserve location privacy, which can be used to enhance
the location privacy of our scheme. Gruteser and Grunwald [13]
establish the concepts of k-anonymity and a trusted-anonymization
server in LBSs. Instead of each user’s exact GPS coordinates, the
server computes a cloaking area including k different users and de-
mands LBSs for the area. Other researchers [7, 23, 31] also consider
personalized cloaking areas while assuring k-anonymity.
Figure 9: Inspection time to estimate location sensitivity normalized
to page loading time.
Figure 10: Portion of inspection time.
sensitivity of the selected web pages, which is performed when a
user touches an “Inspect web page” button (§5.3.3). Measuring the
time overhead, however, demands much time so that we choose
20 web pages out of the selected 200 web pages highly ranked in
Alexa Top Sites. Figure 9 shows inspection time to estimate location
sensitivity of the 20 web pages normalized to page loading time that
consists of fetching and rendering time. On average, the inspection
time is 1.8 times longer than the page loading time. Although the
time overhead is high, it is tolerable because location-sensitivity
inspection would not be frequently performed.
We also measure the processing time that our algorithm spends
to estimate location sensitivity (§5.2.3). On average, the processing
time only takes ∼27% of the overall inspection time (Figure 10), so
the computational overhead of our scheme is acceptable.
Storage overhead
5.4.3
Lastly, we estimate the storage overhead of our scheme. We
ﬁrst check how much storage is necessary to store the per-page
information of the 200 web pages in the per-page permission DB:
the average size of each record is ∼126 B. Next, we check how much
storage is necessary to store address caching information consisting
of pinpoint-, city-, state-, and country-level GPS coordinates in a
DB. We deﬁne an eight-byte ﬁeld for storing a pair of latitude and
longitude values, so the size of each record is 32 B. For example, if
our web browser manages 10,000 per-page records and caches up to
10,000 address caching records, storage overhead is only ∼1.5 MB.
Therefore, we conclude that our scheme’s storage overhead is low.
0.00.51.01.52.02.5manta.comtoysrus.comredbox.comstarbucks.comm.sephora.comgnc.comjoann.comartofmanliness.comamctheatres.comutah.govacehardware.comticketfly.comm.academy.comculturemap.comsonicdrivein.comm.tumi.com7-eleven.comtgifridays.compakadtrader.comatb.comNormalized inspection time0.00.20.40.60.81.0manta.comtoysrus.comredbox.comstarbucks.comm.sephora.comgnc.comjoann.comartofmanliness.comamctheatres.comutah.govacehardware.comticketfly.comm.academy.comculturemap.comsonicdrivein.comm.tumi.com7-eleven.comtgifridays.compakadtrader.comatb.comPortion of inspection timeFetchingRenderingProcessingThe k-anonymity-based methods have an important limitation:
their cloaking area may contain meaningful locations (e.g., a com-
pany, a hospital, and a school), which implies that users are at the
locations with a high probability. To solve this problem, Bamba
et al. [5] propose an l-diversity-based method which enlarges a
cloaking area until the area includes l different locations, and Lee et
al. [20] propose a location-semantics-based method.
Lastly, researchers propose a client-based method to preserve
location privacy without a trusted server. Yiu et al. [32] allow
users to utilize fake locations instead of their precise locations when
computing cloaking areas. Ghinita et al. [8] use a private information
retrieval (PIR) protocol that allows users to retrieve records from a
DB without revealing what records they request. Peer-to-peer-based
methods [9, 16] also exist.
Geolocation inference attack. Jia et al. [17] propose an attack
revealing the geolocation of a web browser without a user permis-
sion. They exploit a cache-timing attack [6] to recognize what
geolocation-dependent resources are stored in the browser cache.
8. CONCLUSION
In this paper, we considered the privacy problems of the HTML5
Geolocation API due to its lack of ﬁne-grained permission and
location models. We detected vulnerable web browsers and over-
privileged web sites that violate the location privacy of users by con-
ducing case studies. We also proposed a novel scheme to enhance
the privacy of using the Geolocation API by supporting ﬁne-grained
permission and location models, and by inspecting the location
sensitivity of each web page.
In future, we will develop a cloud service to effectively solve
the explored problems. We anticipate that the cloud service can
minimize inspection overhead by reducing the number of redundant
page inspections and can maximize the quality of location sensitivity
estimations by using crowdsourcing.
9. REFERENCES
[1] Android Developers. WebChromeClient.
http://developer.android.com/reference/
android/webkit/WebChromeClient.html.
[2] Android Developers. WebView.
http://developer.android.com/reference/
android/webkit/WebView.html.
[3] Apple. UIWebView class reference.
https://developer.apple.com/library/ios/
documentation/uikit/reference/UIWebView_
Class/Reference/Reference.html.
[4] M. Balakrishnan, I. Mohomed, and V. Ramasubramanian.
Where’s that phone?: geolocating IP addresses on 3G
networks. In IMC, 2009.
[5] B. Bamba, L. Liu, P. Pesti, and T. Wang. Supporting
anonymous location queries in mobile environments with
PrivacyGrid. In WWW, 2008.
[6] E. W. Felten and M. A. Schneider. Timing attacks on web
privacy. In CCS, 2000.
[7] B. Gedik and L. Liu. Location privacy in mobile systems: A
personalized anonymization model. In ICDCS, 2005.
[8] G. Ghinita, P. Kalnis, A. Khoshgozaran, C. Shahabi, and K.-L.
Tan. Private queries in location based services: Anonymizers
are not necessary. In SIGMOD, 2008.
[9] G. Ghinita, P. Kalnis, and S. Skiadopoulos. PRIVE:
Anonymous location-based queries in distributed mobile
systems. In WWW, 2007.
[10] globalogiq.com. HTML code search engine - search within
HTML source and HTTP headers.
http://globalogiq.com/htmlcodesearch.htm.
[11] Google. Improve your location’s accuracy - maps for mobile
help. https://support.google.com/gmm/
answer/3144282?hl=en&ref_topic=3137371.
[12] Google Developers. Google Geocoding API - Google Maps
API web services. https://developers.google.
com/maps/documentation/geocoding.
[13] M. Gruteser and D. Grunwald. Anonymous usage of
location-based services through spatial and temporal cloaking.
In MobiSys, 2003.
[14] A. T. Holdener. HTML5 Geolocation. O’Reilly Media, Inc.,
2011.
[15] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall.
“these aren’t the droids you’re looking for”: Retroﬁtting
Android to protect data from imperious applications. In CCS,
2011.
[16] H. Hu and J. Xu. Non-exposure location anonymity. In ICDE,
2009.
[17] Y. Jia, X. Dong, Z. Liang, and P. Saxena. I know where you’ve
been: Geo-inference attacks via the browser cache. In W2SP,
2014.
[18] J. Jung, A. Sheth, B. Greenstein, D. Wetherall, G. Maganis,
and T. Kohno. Privacy oracle: a system for ﬁnding application
leaks with black box differential testing. In CCS, 2008.
[19] J. Kornblum. Identifying almost identical ﬁles using context
triggered piecewise hashing. Digital Investigation, 3:91–97,
2006.
[20] B. Lee, J. Oh, H. Yu, and J. Kim. Protecting location privacy
using location semantics. In KDD, 2011.
[21] H. Liu, H. Darabi, P. Banerjee, and J. Liu. Survey of wireless
indoor positioning techniques and systems. Systems, Man, and
Cybernetics, Part C: Applications and Reviews, IEEE
Transactions on, 37(6):1067–1080, 2007.
[22] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on
WebView in the Android system. In ACSAC, 2011.
[23] M. F. Mokbel, C.-Y. Chow, and W. G. Aref. The new Casper:
Query processing for location services without compromising
privacy. In VLDB, 2006.
[24] M. Neugschwandtner, M. Lindorfer, and C. Platzer. A view to
a kill: WebView exploitation. In LEET, 2013.
[25] A. Restaino. Lightning browser. https:
//github.com/anthonycr/Lightning-Browser.
[26] O. Riva, C. Qin, K. Strauss, and D. Lymberopoulos.
Progressive authentication: deciding when to authenticate on
mobile phones. In USENIX Security, 2012.
[27] U. Shankar and C. Karlof. Doppelganger: Better browser
privacy without the bother. In CCS, 2006.
[28] E. Shi, Y. Niu, M. Jakobsson, and R. Chow. Implicit
authentication through learning user behavior. In ISC, 2010.
[29] W3C. Geolocation API speciﬁcation.
http://www.w3.org/TR/geolocation-API.
[30] W3Schools. HTML5 geolocation. http://www.
w3schools.com/html/html5_geolocation.asp.
[31] T. Xu and Y. Cai. Feeling-based location privacy protection
for location-based services. In CCS, 2009.
[32] M. L. Yiu, C. S. Jensen, X. Huang, and H. Lu. SpaceTwist:
Managing the trade-offs among location privacy, query
performance, and query accuracy in mobile services. In ICDE,
2008.