### Experiment

#### Factors Determining Circuit Throughput
Three key factors determine the throughput of a circuit:
1. **Bottleneck Relay Capacity**: The capacity of the relay with the lowest bandwidth.
2. **Active TCP Flows**: The number of active TCP flows between the bottleneck relay and the next hops.
3. **Multiplexed Circuits**: The number of other active circuits multiplexed over the TCP connection that carries the circuit in question.

The throughput of a circuit \( i \) can be approximated by the following formula:
\[
\text{Throughput of circuit } i = \frac{\text{Bottleneck relay bandwidth}}{\text{Number of TCP flows} \times \text{Number of circuits in } i\text{'s TCP flow}}
\]
This formula assumes fair sharing of bandwidth between flows, although in reality, TCP is only RTT-fair [41]. This difference, however, has minimal impact on our analysis.

#### Load Balancing in the Tor Network
Several reasons contribute to the lack of perfect load balancing in the Tor network:
1. **Guard Relays**: The first hop relay is chosen from a fixed set of three guard relays.
2. **Exit Relays**: The last hop is chosen from the set of relays whose exit policy meets the client’s requirements.
3. **Capped Capacity**: The peak capacity advertised by a relay is capped to an arbitrary threshold.
4. **Decentralized Selection**: Clients are not privy to current levels of traffic in the network and select relays in a fully decentralized fashion.
5. **Unpredictable Stream Characteristics**: Clients cannot predict stream characteristics in advance when selecting circuits for anonymous communication.

Most of these reasons are fundamental limitations for any secure low-latency anonymity system.

### Circuit-Based Bandwidth Fingerprinting

In this section, we describe an attack that determines whether two circuits share a common sub-path by "fingerprinting" their communication. We do this by monitoring their throughput and using a simple statistical test to determine if their throughput is correlated. We consider three representative experimental scenarios:

1. **All-Common (Figure 2(a))**: Two circuits sharing all three Tor relays have similar throughput characteristics.
2. **None-Common (Figure 2(b))**: Two circuits without any common Tor relays do not have any similarity in their throughput characteristics.
3. **One-Common (Figure 2(c))**: Two circuits with one or two common Tor relays will have similar throughput characteristics but only for the duration of time in which the common Tor relays are the bottleneck relays in the circuit.

#### Experimental Scenarios

**All-Common (Figure 2(a))**
- If two Tor circuits have all relays in common, then the circuit throughput will be highly correlated. Any variation in the number of TCP flows or forwarding capacity at a relay will affect the throughput of both circuits in a similar fashion.

**None-Common (Figure 2(b))**
- If two Tor circuits do not have any common relays, then the circuit throughput will not be correlated.

**One-Common (Figure 2(c))**
- If two Tor circuits have at least one relay in common, but do not have all relays in common, there are two cases:
  - **One-Common-a**: If the shared relay is the bottleneck in both circuits, then the circuit throughput will be highly correlated.
  - **One-Common-b**: If the shared relay is not the bottleneck in both circuits, then changes in its number of TCP flows or forwarding capacity will not affect the throughput of the two circuits, and thus their throughput will depend on their respective bottleneck relays.

#### Experimental Setup and Results

We performed experiments on the live Tor network to verify these observations. We used two client nodes and two server nodes, located in four separate geographical regions. On the client machines, we ran the stable version of Tor as of November 2010 (Version 0.2.1.26). We used the default path selection in the Tor clients but turned off the use of entry guards (by setting `UseEntryGuards=0`), so that our clients sample circuits from the space of all possible circuits.

For our experiments with all three common relays, we disabled preemptive circuit setup on the Tor client at the attacker’s machine (using `__DisablePredictedCircuits=1`). We used two custom-built TCP programs to work as the client and server in all of our experiments. The TCP client is a C program that connects with the TCP server, reads data sent by the server, and computes the throughput of the flow periodically after a specific measurement interval. It uses the Tor SOCKS [31] interface to perform downloads via Tor. The TCP server is a multithreaded server written in C that waits for connection requests from clients and, once connected, sends random bytes to the client as fast as possible. The sending rate of the server is limited only by the TCP congestion control algorithm.

For each experiment, we set up a stream at the honest client, recorded the circuit that the Tor client assigned to that stream, and built the same circuit at the attacker’s client. We used an upper bound of 30 seconds as the synchronization delay, and after this delay, we set up a new stream at the attacker’s client.

**Results for All-Common (Figures 3(a) and 4(a))**
- We performed 700 runs of this experiment between November and December 2010. We found that the throughput values for the two circuits were highly correlated, measured using the Pearson product-moment correlation coefficient. Figure 3(a) illustrates an instance of this scenario, where correlation is depicted as a function of time. We also compute the 95% confidence interval for correlation using Fisher’s Z transform [21]. After a time duration of 300 seconds, even the lower bound for the confidence interval was higher than 0.7. Figure 4(a) depicts the fraction of experiments where the correlation value is greater than a threshold as a function of time. In about 92% of the cases, the correlation was greater than a threshold value of 0.5 after a time duration of 300 seconds. Moreover, we can see that the correlation remains steady over time.

**Results for None-Common (Figures 3(a) and 4(b))**
- We performed 532 runs of this experiment in January 2011. In Figure 3(a), we can see that the correlation quickly approaches zero when the two circuits are comprised of disjoint relays. Figure 4(b) shows the full results for this scenario; in an overwhelming fraction of cases, the correlation quickly drops to zero—only 12 instances out of 532 had a correlation value greater than 0.5 for a time interval of 300 seconds (false positive percentage of only 2.2%). In our investigation of false positives, we found that many of the false positive instances occurred due to the geographic co-location of relays in the two circuits. For example, in four instances, the two circuits shared a relay that was part of the same subnet, like the blutmagie and blutmagie4 relays. In one instance, the first 16 bits of the IPv4 address of two relays were the same (ctor and cptnemo, both located in Berlin), while in two other instances, IP geolocation databases indicated geographic closeness within tens of miles. However, geographic colocation could not explain the remaining five instances.

**Results for One-Common-a (Figures 3(b) and 4(c))**
- Finally, we consider the scenario where two circuits have only a single common Tor relay. We built one-hop circuits through each of the relays in a client circuit. We performed 190 runs of this experiment for this scenario between November 2010 and February 2011. Figure 3(b) depicts the correlation as a function of time for two instances in this scenario. In scenario One-Common-a, the common relay was the bottleneck relay for the full duration of 10 minutes, and we can see that the correlation value is similar to that of scenario All-Common. On the other hand, in scenario One-Common-b, the common relay was not the bottleneck relay, and we can see that the correlation is not statistically significant. When only a single relay is common between two circuits, we found that in many instances, correlation degrades over time, since the common relay may be a bottleneck only temporarily (not shown in Figure 3(b)). To address this issue, we modified the correlation analysis to consider windows (intervals) of time; for a particular size of the window, we compute the maximum correlation in the data over all time intervals greater than the window size (if the communication duration is smaller than the window size, we compute correlation as before). We probed all three relays for a client circuit in this experiment, but since only one of them may be the bottleneck at a time, we computed the maximum correlation amongst the three probes for different communication duration values. Figure 4(c) depicts the fraction of experiments that have correlation greater than a threshold value for different communication durations using a window size of 200 seconds. We can see that while correlation is not as high as the scenario where all three relays were common between two circuits, over 90% and 80% of the experiments still have correlation greater than 0.3 and 0.4 respectively after 300 seconds of communication.

Based on these experiments, we conclude that high correlation between circuit throughput indicates the presence of common Tor relay(s) in the two circuits. Note that the converse is not necessarily true.

### Identifying Tor Relays

#### Threat Model
Next, we present an attack where we try to identify one or more Tor relays being used by a particular flow. We call this flow the target flow. This flow can be any flow initiated by a Tor client over the Tor network to access a resource present at a particular server. We assume that the attacker can observe the throughput of the target flow. The attacker could have compromised the exit relay, the target web server, or the ISP forwarding the data; note that the attacker does not need to perform any modifications to the flow. The attacker tries to achieve its goal by probing different Tor relays; importantly, these probes can be launched from different vantage points than the target server. It builds one-hop circuits through these relays (Figure 5) and computes correlations between the throughput of the target flow and the probe flows. If the throughput of a probe flow is highly correlated with that of the target flow, then the server can assume that both the flows are actually traversing a common Tor relay. In this section, we show the success of the attacker at identifying Tor relays by running experiments over the live Tor network.

#### Experimental Setup
In an ideal setting, the attacker will try to probe every relay in the Tor network and find the correlation between the probe flows and the target flow. However, to reduce the amount of resources required to perform this attack, we used a smaller set of 25 Tor relays for constructing circuits. To pick relays that are representative of the current Tor network, we selected relays with a probability proportional to their bandwidth using the Tor client. We performed our experiments during two different time periods and used a different set of 25 relays in each period; we will refer to them as RELAY-SET-1 and RELAY-SET-2 (the list of Tor relays is available in the full version of this paper [34]).

**Probe Locations**
- We used 25 different Emulab [18] machines at the University of Utah to run the probe flows. They were used to probe all the 25 Tor relays simultaneously. All of the probe flows originated from a single physical location, but we expect that their throughput was shaped by the Tor overlay rather than the access link: in a separate test, we were able to achieve 70 Mbps across the access link, far above the throughput of flows in the Tor network.

**Single Circuit Experiments**
- In our first experiment, we set up a target flow between a client and a malicious server.