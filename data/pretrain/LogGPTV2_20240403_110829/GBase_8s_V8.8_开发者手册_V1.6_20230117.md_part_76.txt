 expr_sublink：对应(SELECTwithsingletargetlistitem …)语句
 array_sublink：对应ARRAY(select…)语句
 cte_sublink：对应withquery(…)语句
其中OLAP、HTAP场景中常用的sublink为exist_sublink、any_sublink，在GBase8s的
优化引擎中对其应用场景做了优化（子链接提升），由于SQL语句中子查询的使用的灵活
性，会带来SQL子查询过于复杂造成性能问题。子查询从大类上来看，分为非相关子查询
和相关子查询：
 非相关子查询None-CorrelatedSubQuery
子查询的执行不依赖于外层父查询的任何属性值。这样子查询具有独立性，可独自求解，
形成一个子查询计划先于外层的查询求解。
例如：
selectt1.c1,t1.c2
fromt1
南大通用数据技术股份有限公司
555
GBase 8s V8.8开发者手册
wheret1.c1in(
selectc2
fromt2
wheret2.c2IN(2,3,4)
);
QUERYPLAN
----------------------------------------------------------------
HashJoin
HashCond:(t1.c1=t2.c2)
-> SeqScanont1
Filter:(c1=ANY('{2,3,4}'::integer[]))
-> Hash
-> HashAggregate
GroupByKey:t2.c2
-> SeqScanont2
Filter:(c2=ANY('{2,3,4}'::integer[]))
(9rows)
 相关子查询Correlated-SubQuery
子查询的执行依赖于外层父查询的一些属性值（如下列示例t2.c1=t1.c1条件中的t1.c1）
作为内层查询的一个AND-ed条件。这样的子查询不具备独立性，需要和外层查询按分组进
行求解。
例如：
selectt1.c1,t1.c2
fromt1
wheret1.c1in(
selectc2
fromt2
wheret2.c1=t1.c1ANDt2.c2in(2,3,4)
);
QUERYPLAN
------------------------------------------------------------------------
SeqScanont1
Filter:(SubPlan1)
SubPlan1
-> SeqScanont2
Filter:((c1=t1.c1)AND(c2=ANY('{2,3,4}'::integer[])))
(5rows)
南大通用数据技术股份有限公司
556
GBase 8s V8.8开发者手册
对SubLink的优化
针对SubLink的优化策略主要是让内层的子查询提升（pullup），能够和外表直接做关
联查询，从而避免生成SubPlan+Broadcast内表的执行计划。判断子查询是否存在性能风险，
可以通过explain查询语句查看Sublink的部分是否被转换成SubPlan的执行计划。
例如：
箭头右侧执行计划应替换成下面的执行计划：
QUERYPLAN
--------------------------------
SeqScanont1
Filter:(SubPlan1)
SubPlan1
-> SeqScanont2
Filter:(c1=t1.c1)
(5rows)
 目前GBase8s支持的Sublink-Release场景
 IN-Sublink无相关条件
 不能包含上一层查询的表中的列（可以包含更高层查询表中的列）。
 不能包含易变函数。
箭头右侧执行计划应替换成下面的执行计划：
南大通用数据技术股份有限公司
557
GBase 8s V8.8开发者手册
QUERYPLAN
--------------------------------------
HashJoin
HashCond:(t1.c1=t2.c2)
-> SeqScanont1
-> Hash
-> HashAggregate
GroupByKey:t2.c2
-> SeqScanont2
Filter:(c1=1)
(8rows)
 Exist-Sublink包含相关条件
Where子句中必须包含上一层查询的表中的列，子查询的其它部分不能含有上层查询的
表中的列。其它限制如下。
 子查询必须有from子句。
 子查询不能含有with子句。
 子查询不能含有聚集函数。
 子查询里不能包含集合操作、排序、limit、windowagg、having操作。
 不能包含易变函数。
箭头右侧执行计划应替换成下面的执行计划：
QUERYPLAN
HashJoin
HashCond:(t1.c1=t2.c1)
->SeqScanont1
->Hash
->HashAggregate
GroupByKey:t2.c1
->SeqScanont2
(7rows)
南大通用数据技术股份有限公司
558
GBase 8s V8.8开发者手册
 包含聚集函数的等值相关子查询的提升
子查询的where条件中必须含有来自上一层的列，而且此列必须和子查询本层涉及表中
的列做相等判断，且这些条件必须用and连接。其它地方不能包含上层的列。其它限制条件
如下。
 子查询中where条件包含的表达式（列名）必须是表中的列。
 子查询的Select关键字后，必须有且仅有一个输出列，此输出列必须
是聚集函数（如max），并且聚集函数的参数（t2.c2）不能是来自外层表（t1）
中的列。聚集函数不能是count。
例如，下列示例可以提升。
select*fromt1wherec1>(
selectmax(t2.c1)fromt2wheret2.c1=t1.c1
);
下列示例不能提升，因为子查询没有聚集函数。
select*fromt1wherec1>(
select t2.c1fromt2wheret2.c1=t1.c1
);
下列示例不能提升，因为子查询有两个输出列。
select*fromt1where(c1,c2)>(
select max(t2.c1),min(t2.c2)fromt2wheret2.c1=t1.c1
);
 子查询必须是from子句。
 子查询中不能有groupby、having、集合操作。
 子查询只能是innerjoin。
例如：下列示例不能提升。
select*fromt1wherec1>(
selectmax(t2.c1)fromt2fulljoint3on(t2.c2=t3.c2)wheret2.c1=t1.c1
);
 子查询的targetlist中不能包含返回set的函数。
 子查询的where条件中必须含有来自上一层的列，而且此列必须和子
查询层涉及表中的列做相等判断，且这些条件必须用and连接。其它地方不能
包含上层的上层中的列。例如：下列示例中的最内层子链接可以提升。
南大通用数据技术股份有限公司
559
GBase 8s V8.8开发者手册
select*fromt3wheret3.c1=(
selectt1.c1
fromt1wherec1>(
selectmax(t2.c1)fromt2wheret2.c1=t1.c1
));
基于上面的示例，再加一个条件，则不能提升，因为最内侧子查询引用了上层中的列。
示例如下：
select*fromt3wheret3.c1=(
selectt1.c1
fromt1wherec1>(
selectmax(t2.c1)fromt2wheret2.c1=t1.c1andt3.c1>t2.c2
));
 提升OR子句中的SubLink
当WHERE过滤条件中有OR连接的EXIST相关SubLink，
例如：
selecta,cfromt1
wheret1.a=(selectavg(a)fromt3wheret1.b=t3.b)or
exists(select*fromt4wheret1.c=t4.c);
将OR-ed连接的EXIST相关子查询OR字句的提升过程：
(1) 提取where条件中，or子句中的opExpr。为：t1.a=(selectavg(a)fromt3wheret1.b
=t3.b)
(2) 这个op操作中包含subquery，判断是否可以提升，如果可以提升，重写subquery
为：selectavg(a)、 t3.bfromt3groupbyt3.b，生成notnull条件t3.bisnotnull，并
将这个opexpr用这个notnull条件替换。此时SQL变为：
selecta,c
fromt1leftjoin(selectavg(a)avg,t3.bfromt3groupbyt3.b) ast3on(t1.a=avgandt1.b=
t3.b)
wheret3.bisnotnullorexists(select*fromt4wheret1.c=t4.c);
(3) 再次提取or子句中的existssublink、exists(select*fromt4wheret1.c=t4.c)，判断
是否可以提升，如果可以提升，转换subquery为：selectt4.cfromt4groupbyt4.c
生成NotNull条件t4.cisnotnull提升查询，SQL变为：
selecta,c
南大通用数据技术股份有限公司
560
GBase 8s V8.8开发者手册
fromt1leftjoin(selectavg(a)avg,t3.bfromt3groupbyt3.b) ast3on(t1.a=avgandt1.b=
t3.b)
leftjoin(selectt4.cfromt4groupbyt4.c)wheret3.bisnotnullort4.cisnotnull;
 目前GBase8s不支持的Sublink-Release场景
除了以上场景之外都不支持 Sublink 提升，因此关联子查询会被计划成
SubPlan+Broadcast的执行计划，当inner表的数据量较大时则会产生性能风险。
如果相关子查询中跟外层的两张表做join，那么无法提升该子查询，需要通过将父SQL
创建成with子句，然后再跟子查询中的表做相关子查询查询。
例如：
selectdistinctt1.a,t2.a
fromt1leftjoint2ont1.a=t2.aandnotexists(selecta,bfromtest1wheretest1.a=t1.aand
test1.b=t2.a);
改写为
withtempas
(
select*from(selectt1.aasa,t2.aasbfromt1leftjoint2ont1.a=t2.a)
)
selectdistincta,b
fromtemp
wherenotexists(selecta,bfromtest1wheretemp.a=test1.aandtemp.b=test1.b);
 出现在targetlist里的相关子查询无法提升（不含count）
例如：
explain(costsoff)
select(selectc2fromt2wheret1.c1=t2.c1)ssq,t1.c2
fromt1
wheret1.c2>10;
执行计划为：
explain(costsoff)
select(selectc2fromt2wheret1.c1=t2.c1)ssq,t1.c2
fromt1
wheret1.c2>10;
QUERYPLAN
--------------------------------
SeqScanont1
南大通用数据技术股份有限公司
561
GBase 8s V8.8开发者手册
Filter:(c2>10)
SubPlan1
-> SeqScanont2
Filter:(t1.c1=c1)
(5rows)
由于相关子查询出现在targetlist（查询返回列表）里，对于t1.c1=t2.c1不匹配的场景仍
然需要输出值，因此使用left-outerjoin关联T1&T2确保t1.c1=t2.c1在不匹配时，子SSQ能
够返回不匹配的补空值。
SSQ和CSSQ的解释如下：
 SSQ：ScalarSubQuery一般指返回1行1列scalar值的sublink，简称SSQ。
 CSSQ：Correlated-ScalarSubQuery和SSQ相同不过是指包含相关条件的SSQ。
上述SQL语句可以改写为：
withssqas
(
selectt2.c2fromt2
)
selectssq.c2,t1.c2
fromt1leftjoinssqont1.c1=ssq.c2
wheret1.c2>10;
改写后的执行计划为：
​ QUERYPLAN
---------------------------------
​ HashRightJoin
​ HashCond:(ssq.c2=t1.c1)
​ CTEssq
​ -> SeqScanont2
​ -> CTEScanonssq
​ -> Hash
​ -> SeqScanont1
​ Filter:(c2>10)
(8rows)
可以看到出现在SSQ返回列表里的相关子查询SSQ，已经被提升成RightJoin，从而避
免当内表T2较大时出现SubPlan计划导致性能变差。
南大通用数据技术股份有限公司
562
GBase 8s V8.8开发者手册
 出现在targetlist里的相关子查询无法提升（带count）
例如：
select(selectcount(*)fromt2wheret2.c1=t1.c1)cnt,t1.c1,t3.c1
fromt1,t3
wheret1.c1=t3.c1orderbycnt,t1.c1;
执行计划为
​ QUERYPLAN
--------------------------------------------
​ Sort
​ SortKey:((SubPlan1)),t1.c1
​ -> HashJoin
​ HashCond:(t1.c1=t3.c1)
​ -> SeqScanont1
​ -> Hash
​ -> SeqScanont3
​ SubPlan1
​ -> Aggregate
​ -> SeqScanont2
​ Filter:(c1=t1.c1)