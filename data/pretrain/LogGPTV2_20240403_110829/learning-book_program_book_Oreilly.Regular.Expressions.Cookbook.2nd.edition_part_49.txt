need to be corrected, Recipe 3.7 shows the code you need. A text editor or grep-like
tool, such as those mentioned in "Tools for Working with Regular Expressions? in
Chapter 1, can help you find repeated words while providing the context needed to
determine whether the words in question are in fact used correctly.
Discussion
There are two things needed to match something that was previously matched: a cap-
turing group and a backreference. Place the thing you want to match more than once
inside a capturing group, and then match it again using a backreference. This works
differently from simply repeating a token or group using a quantifier. Consider the
difference berween the simplified regular expressions . The first
regex uses a capruring group and backreference to match the same word character
rwice, whereas the latter uses a quantifier to match any two word characters.
Recipe 2.10 discusses the magic of backreferences in greater depth.
5.8 Find Repeated Werds | 355
---
## Page 372
Back to the problem at hand. This recipe only finds repeated words that are composed
of letters from A to Z and a to z (since the case insensitive option is enabled). To also
allow accented letters and letters from other scripts, you can use the Unicode Letter
category  in the character class matches a no-break space, which is some-
times found in text copied and pasted from the Web most web developers are familiar
with using &nbsp; to insert a no-break space in their content). PCRE 7.2 and Perl 5.10
include the shorthand character class ^h that you might prefer to use here since it is
specifically designed to match horizontal whitespace, and matches some additional
esoteric horizontal whitespace characters.
Finally,the word boundaries at the beginning and end of the regular expression ensure
that it doesn’t match within other words ( e.g, with *this thistle°).
Note that the use of repeated words is not always incorrect, so simply removing them
without examination is potentially dangerous. For example, the constructions “that
that”" and *had had* are generally accepted in colloquial English. Homonyms, names,
onomatopoeic words (such as “oink oink* or “ha ha"), and some other constructions
also occasionally result in intentionally repeated words. In most cases you should vis-
ually examine each match.
Variations
The solution shown earlier was intentionally kept simple. That simplicity came at the
cost of not accounting for a variety of special cases:
• Repeated words that use letters with accents or other diacritical marks, such as
“cafe cafe” or °naive naive.*
• Repeated words that include hyphens, single quotes, or right single quotes, such
ou uou, o °uop 1uop,。aeqo-oo aeqo-oo, st
+1
Repeated words written in a non-English alphabet, such as the Russian words
“Apy3b8 Apy3bA."
Dealing with these issues prevents us from relying on the \b) word boundary token,
which we previously used to ensure that complete words only are matched. There are
rwo reasons , we'll therefore need to use lookahead and lookbehind (see
Unicode categories (see Recipe 2.7) to match letters (p(L}) and diacritical marks
Recipe 2.16) to make sure that we still match complete words only. We'll also use
(p(M)) in any alphabet or script:
（? tokens in the regular expression match a right single quote mark (*). Perl
and PCRE use a different syntax for matching individual Unicode code points, so we
need to change the regex slightly for them:
（? at the front of the regular expression matches the start of a line. Normally
it would only match at the beginning of the subject string, so you need to make sure
that the option to let ^ and $ match at line breaks is enabled (Recipe 3.4 shows you
how to set regex options in code). Next, the (,*) within the capturing parentheses
matches the entire contents of a line (even if it’s blank), and the value is stored as
backreference 1. For this to work correctly, the “dot matches line breaks" option must
not be set; otherwise, the dot-asterisk combination would match until the end of the
string.
Within an outer, noncapturing group, we’ve used (?:\r?`\n x)> to match a line sep-
arator used in Windows/MS-DOS (\r\n>), Unix/Linux/BSD/OS X (\n>), or legacy
Mac OS (\r>) text files. The backreference (\1) then tries to match the line we just
finished matching. If the same line isn’t found at that position, the match attempt fails
and the regex engine moves on. Ifit matches, we repeat the group (composed of a line
break sequence and backreference 1) using the  quantifier to match any immediately
following duplicate lines.
Finally, we use the dollar sign at the end of the regex to assert position at the end of
the line. This ensures that we only match identical lines, and not lines that merely start
with the same characters as a previous line.
360 | Chapter5: Words, Lines, and Special Character
---
## Page 377
Because we're doing a search-and-replace, each entire match (including the original
line and line breaks) is removed from the string. We replace this with backreference 1
to put the original line back in.
Option 2: Keep the last occurrence of each duplicate line in an unsorted file
There are several changes here compared to the Option 1 regex that finds duplicate
lines only when they appear next to each other. First, in the non-JavaScript version of
the Option 2 regex, the dot within the capturing group has been replaced with [^\r
been enabled. That's because a dot is used later in the regex to match any character,
n] (any character except a line break), and the *dot matches line breaks*° option has
including line breaks. Second, a lookahead has been added to scan for duplicate lines
at any position further along in the string. Since the lookahead does not consume any
characters, the text matched by the regex is always a single line (along with its following
ym saqpeu e uoeday fus au e uee eadde on uaou s!eq xeauq aul
the empty sring removes the duplicate lines, leaving behind only the last occurrence
of each.
Option 3: Keep the first occurrence of each duplicate line in an unsorted file
Lookbehind is not as widely supported as lookahead, and where it is supported, you
still may not be able to lok as far backward as you need to. Thus, the Option 3 regex
is conceptually different from Option 2. Instead of matching lines that are known to
be repeated earlier in the string (which would be comparable to Option 2’s tactic),this
regex matches a line, the first duplicate of that line that occurs later in the string, and
all the lines in berween. The original line is stored as backreference 1, and the lines in
berween (if any) as backreference 2. By replacing each match with both backreference
1 and 2, you put back the parts you want to keep, leaving out the trailing, duplicate
line and its preceding line break.
This altemative approach presents a couple of issues. First, because each match of a
set of duplicate lines may include other lines in between, it’s possible that there are
duplicates of a different value within your matched text, and those will be skipped over
during a *replace all operation. Second if aline is repeated more than wice, the regex
will first match duplicates one and rwo, but after that, it will take another set of dupli-
aus t *snu1 gus aq q8noui saoueape 1 se ue?t qpieu oi xatau aqi at o1 sanes
*replace all° action will at best remove only every other duplicate of any specific line.
To solve both of these problems and make sure that all duplicates are removed, you'll
need to continually apply the search-and-replace operation to your entire subject string
until the regex no longer matches within it. Consider how this regex will work when
applied to the following text:
value1
value2
value2
value3
5.9 Remove Duplicate Lines | 361
---
## Page 378
value3
value1
value2
Removing all duplicate lines from this string will take three passes. Table 5-1 shows
the result of each pass.
Tabile 5-1. Replacement passes
Passone
Passto
Pas three
Final string
yalue1
value1
value1
value1
yalue2
yalue2
yalue2
value2
yalue2
ralue2
yalue3
value3
yalue3
yalue3
yalte2
yaluey
yalue3
valuel-
value2
value2
One matcth/replacement
Two matches/replacements
Onematch/replacement
No duplicates remain
See Also
Recipe 5.8 shows how to match repeated words.
Recipe 3.19 has code listings for splitting a string using a regular expression, which
provides an alternative, (mostly) non-regex-based means to remove duplicate lines
when programming. If you use a regex that matches line breaks (such as ^r?\n| r>) as
the separator for your split operation, you'll be left with a list of all lines in the string.
You can then loop over this list and keep track of unique lines using a hash object,
discarding any lines you've previously encountered.
Techniques used in the regular expressions and replacement text in this recipe are
discussed in Chapter 2. Recipe 2.2 explains how to match nonprinting characters.
Recipe 2.3 explains character classes. Recipe 2.4 explains that the dot matches any
character. Recipe 2.5 explains anchors. Recipe 2.8 explains altermation. Recipe 2.9 ex-
plains grouping. Recipe 2.10 explains backreferences. Recipe 2.12 explains repetition.
Recipe 2.21 explains how to insert text matched by capruring groups into the replace-
ment text.
5.10MatchCompleteLinesThatContainaWord