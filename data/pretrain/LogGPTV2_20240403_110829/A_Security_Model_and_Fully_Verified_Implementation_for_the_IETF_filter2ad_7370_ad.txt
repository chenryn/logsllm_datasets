model nonce conﬁdentiality as a composed IND-CCA2 game
on top of NHSE where the adversary must decide which of
two nonces is associated with a challenge encrypted packet,
but without the ability to ask for its decryption.
Generalizing AE5 and NHSE Because of the constraints of
our veriﬁcation methodology (which aims to apply our game-
based deﬁnitions to the exact formal speciﬁcation of the pro-
tocols, avoiding gaps between the model and implementation),
our security deﬁnitions are somewhat tailored for QUIC, and
can be generalized to a broader class of encryption schemes.
In parallel to this work, Bellare, Günther and Tackmann [9]
have presented (at the QUIC Privacy and Security workshop)
a two-tier authenticated encryption scheme, which generalizes
AE5 to cover other parts of the header H used as additional
authenticated data. Fischlin, Günther and Janson [31] also
present a new security deﬁnition for channel robustness, which
is parametric over a support predicate that speciﬁes, given the
sequences of packets that have been sent and accepted, whether
a given packet is considered valid to receive. This generalizes
our AE5 and NHSE deﬁnitions to different sliding window
and replay protection schemes (e.g. DTLS 1.3), but only offers
pen-and-paper models and proofs.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
C. From Theorem 1 to Code Veriﬁed in F(cid:2)
We describe the ﬁrst steps of the proof of Theorem 1,
from its statement above to the code actually veriﬁed in F(cid:2).
To simplify our presentation, we count packet numbers from
zero (instead of NS) and pretend the ﬂags (F ) in the QPE
construction consist only of LN : the number of explicit least
signiﬁcant bits of the packet number. Our veriﬁed implemen-
tation, in contrast, makes no such simpliﬁcations. Recall that
LN appears in plain in the additional data of QUIC payload
encryption but is part of the indistinguishable-from-random
packet ciphertext.
(1) We start by inlining the QPE construction into the AE5
deﬁnition, using the auxiliary functions deﬁned in Figure 5
for the real case (b = 0).
Game AE5b1,b2 (QPE)
k1, k2
$← E.gen()
Oracle Decrypt(Ni, C, H)
if b2 = 1 then
S ← csample(C)
CS ← PRFb2 .Compute(S)
LN(cid:5)Ne(cid:5)C(cid:2) ← CS ⊕ C
N ← decode(Ni, Ne, LN )
H(cid:2) ← H(cid:5)LN(cid:5)Ne
M ← AE1b1 .Dec(N, C(cid:2), H(cid:2))
LN , Ne, H(cid:2), C(cid:2)
N ← decode(Ni, Ne, LN )
M ← AE.dec(k1, N, C(cid:2), H(cid:2))
← PNdec(k2, H(cid:5)C)
else
return N, LN , M
Oracle Encrypt(N, LN , M, H)
assert AEAD.T [N, _, _] = ⊥
Ne ← encode(N, LN )
H(cid:2) ← H(cid:5)LN(cid:5)Ne
if b1 = 1then
C(cid:2) ← AE1b1 .Enc(N, M, H(cid:2))
T [N, C(cid:2), H] ← M
S ← psample(C(cid:2))
if PRF.T [S] (cid:10)= ⊥ then throw
CS ← PRFb2 .Compute(S)
C(cid:2)(cid:2) ← lsb(cid:3)LN
C(cid:2) ← AE.enc(k1, N, M, H(cid:2))
S ← psample(C(cid:2))
C(cid:2)(cid:2) ← PNenc(k2, LN , Ne, S)
+LN
else
return C(cid:2)(cid:2)(cid:5)C(cid:2)
(CS ⊕ LN(cid:5)Ne)
Game AE5b(QPE[AE, F])
T, T (cid:2) ← ∅; k1, k2
$← Keygen()
Oracle Decrypt(Ni, C, H)
if b = 1 then
LN , M ← T [N, C, H] for N
s.t. in_win(N, Ni, LN )
else
← PNdec(k2, H(cid:5)C)
LN , Ne, H(cid:2), C(cid:2)
N ← decode(Ni, Ne, LN )
M ← AE.dec(k1, N, C(cid:2), H(cid:2))
return N, LN , M
+|M|+E.(cid:3)tag
Oracle Encrypt(N, LN , M, H)
assert T [N, _, _] = ⊥
if b = 1then
C $← {0, 1}LN +E.(cid:3)LN
T [N, C, H] ← LN , M
Ne ← encode(N, LN )
H(cid:2) ← H(cid:5)LN(cid:5)Ne
C(cid:2) ← AE.enc(k1, N, M, H(cid:2))
S ← psample(C(cid:2), LN )
C(cid:2)(cid:2) ← PNenc(k2, LN(cid:5)Ne, S)
else
return C(cid:2)(cid:2)(cid:5)C(cid:2)
(4) We rewrite it more simply as
Game AE5b1,b2 (QPE)
k1 ← AE1b1 (AEAD)
k2 ← PNEb2 ()
Oracle Decrypt(Ni, C, H)
LN , Ne, C(cid:2) ← PNEb2 .Dec(H, C)
N ← decode(Ni, Ne, LN )
H(cid:2) ← LN(cid:5)Ne(cid:5)H
M ← AE1b1 .Dec(N, C(cid:2), H(cid:2))
return N, LN , M
Oracle Encrypt(N, LN , M, H)
Ne ← encode(N, LN )
H(cid:2) ← LN(cid:5)Ne(cid:5)H
C(cid:2) ← AE1b1 .Enc(N, M, H(cid:2))
S ← psample(C(cid:2))
C(cid:2)(cid:2) ← PNEb2 .Enc(LN , Ne, S)
return C(cid:2)(cid:2)(cid:5)C(cid:2)
(2) We separate the encryption of LN and Ne from the
encryption of the payload in the ideal case.
Game AE5b(QPE)
T, T (cid:2) ← ∅; k1, k2
$← E.gen()
Oracle Decrypt(Ni, C, H)
if b = 1 then
T (cid:2)[S] $← {0, 1}(cid:3)max
S ← csample(C)
if T (cid:2)[S] = ⊥ then
LN(cid:5)Ne(cid:5)C(cid:2) ← T (cid:2)[S] ⊕ C
M ← T [N, C(cid:2), H] for N
s.t. valid(N, Ni, LN )
else
← PNdec(k2, H(cid:5)C)
LN , Ne, H(cid:2), C(cid:2)
N ← decode(Ni, Ne, LN )
M ← AE.dec(k1, N, C, H(cid:2))
return N, LN , M
Oracle Encrypt(N, LN , M, H)
assert T [N, _, _] = ⊥
Ne ← encode(N, LN )
H(cid:2) ← H(cid:5)LN(cid:5)Ne
if b = 1then
C(cid:2) $← {0, 1}|M|+E.(cid:3)tag
T [N, C(cid:2), H(cid:2)] ← M
S ← psample(C(cid:2))
if T (cid:2)[S] (cid:10)= ⊥ then throw
$← {0, 1}(cid:3)max
CS
T (cid:2)[S] ← CS
C(cid:2)(cid:2) ← lsb(cid:3)LN
C(cid:2) ← AE.enc(k1, N, M, H(cid:2))
S ← psample(C(cid:2))
C(cid:2)(cid:2) ← PNenc(k2, LN(cid:5)Ne, S)
+LN
else
return C(cid:2)(cid:2)(cid:5)C(cid:2)
(CS ⊕ LN(cid:5)Ne)
where we denote by C(cid:2)
the ciphertext from the payload
encryption and by C(cid:2)(cid:2) the ciphertext for the nonce encryption.
We introduce an auxiliary encryption table T (cid:2)
that maps
samples S (stolen from C(cid:2)) to one-time pads CS.
Note that
there is no integrity protection over header
encryption, which determines the number of bits to encrypt,
so CS must be of the maximum size (cid:3)max. QUIC supports 32
bits of explicit nonce and 8 other bits, of which 2 are used for
LN , hence (cid:3)max = 40.
(3) We introduce intermediate idealization ﬂags: b1 for the ide-
alization of payload encryption; and b2 for header encryption,
such that b2 ⇒ b1. This yields the following modular game:
1168
by factoring out the oracles of game AE1 and those of an
intermediate PNE game for header encryption, deﬁned below
as a wrapper around the PRF functionality.
Game PNEb2 (F)
k ← F.keygen()
Oracle Dec(H, C)
S ← csample(C)
CS ← PRFb2 (F ).Compute(S)
LN ← CS [0] ⊕ (C[0]&15)
H(cid:2), C(cid:2) ← split(C, (cid:2)LN
LN(cid:5)Ne ← CS [0..(cid:2)LN
return LN , Ne, C(cid:2)
+ LN )
+ LN ] ⊕ H(cid:2)
Oracle Enc(LN , Ne, S)
if PRF.T [S] (cid:10)= ⊥ then throw
CS ← PRFb2 (F ).Compute(S)
C ← lsb(cid:3)LN
(CS ⊕ LN(cid:5)Ne)
+LN
return C
The games AE1b1 and PNEb2 correspond exactly to
the idealized interfaces
in our veriﬁed implementation:
Model.AEAD.fsti for AE1 and Model.PNE.fsti for
PNE. We used these code-based assumptions to implement
the NHSEb1,b2 (QP E) interface (inlining AE5 and adding the
management of the stream state).
We require a ﬁnal step “on paper” to reduce PNEb2
security to PRFb2 security. Critically, we must satisfy the
freshness condition for PN encryption (PRF.T [S] =⊥ ) for
all S extracted from the AEAD ciphertext. We bound these
collisions by applying the PRP/PRF switching lemma, and then
exclude these collisions in the code (with a proof assumption).
D. History and Improvements to QPE
Implicit-Nonce Length Malleability While the table T in
AE5 is not indexed by LN , the deﬁnition still implies that
decryption must authenticate the implicit nonce length LN
chosen by the sender. To illustrate this point, we consider the
construction QPE’[AE,PRF] used in draft 16 of IETF’s QUIC,
where LN is encoded in the most-signiﬁcant 2 bits of the
packet number ﬁeld of the QUIC headers (instead of in the 2
least-signiﬁcant bits of the ﬂags as done in QPE[AE,PRF] in
more recent drafts).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
Recall that in short headers, the destination connection
ID (CID) is concatenated with the packet number, and that
the length of the CID is implicit. Since LN is variable, an
adversary may try to cause the sender and recipient of a packet
to disagree on the position where the CID ends and the packet
number begins, as depicted below:
(cid:9)(cid:11)
(cid:15)(cid:27)(cid:30)(cid:25)(cid:19)
(cid:10)(cid:1)
(cid:11)(cid:1)
(cid:14)(cid:7)(cid:16)
(cid:6)
(cid:2)(cid:4)(cid:31)(cid:4)(cid:25)(cid:19)
(cid:8)(cid:33)
F 
F 
CID 
=
CID’ 
LN
PN 
LN‘
PN’
C 
C 
(cid:5)(cid:24)(cid:17)(cid:22)(cid:28)
(cid:6)(cid:21)(cid:17)(cid:20)(cid:21)(cid:27)(cid:28)(cid:1)
(cid:11)(cid:24)(cid:28)(cid:18)
(cid:3)(cid:1)
(cid:8)(cid:34)
(cid:12)(cid:13)(cid:12)
(cid:12)(cid:27)(cid:26)(cid:29)(cid:21)(cid:19)(cid:29)(cid:21)(cid:20)(cid:1)(cid:12)(cid:17)(cid:19)(cid:23)(cid:21)(cid:29)
Conveniently for the attacker, the XOR between the mask and
the packet number is easily malleable: by ﬂipping the ﬁrst two
encrypted bits, the attacker can force the receiver to interpret
the length differently. This yields an easy way to win the
AE5 game: the attacker ﬁrst calls Enc(N, 2, M, F||CID) then
Dec(N(cid:2), C(cid:2), F||CID||X) for each of the 256 possible values
of the byte X, where N(cid:2) = N [0..11] and C(cid:2) = C[1..|C|]. One
of the values of X will result in the correct AAD; hence A
can return 0 if any of the decryptions succeeds (because of the
mismatched N’ length, the nonce of the decryption can work
in the ideal variant).
Although this attack may be hard to exploit in practice,
it raises the question of whether QUIC expects the peer
connection ID to be authenticated by the TLS handshake. The
speciﬁcation does not state it as an explicit goal; however,
some working group members argue that the authenticity of
the connection IDs follows from their inclusion in headers
authenticated through AAD. This claim is disputable: the CIDs
are negotiated in the initial messages, whose keys are derived
from public values. In draft 16, an active adversary can inject a
retry message to force a client to change its destination CID. If
the attacker tampers with one byte of CID, the attack succeeds
with 2−8 probability, which is practical on every packet.
We submitted these observations to the IETF, and proposed
to concatenate the 2 bits of LN with the 62-bit packet number
when constructing the AEAD nonce. The goal of the change
was to ensure that LN is authenticated regardless of potential
malleability issues in the formatting of the AAD headers.
However, in draft 17, the implemented change was to move
LN to the least signiﬁcant bits of the ﬂags, which is sufﬁcient
to prove the security of the construction but requires the
processing of the mask to depend on LN .
The other weakness exploited by the attack is the ability for
active adversaries to alter connection IDs. We argued [42] that
the TLS handshake should guarantee agreement over the peer’s
connection IDs. In draft 14, a transport parameter was added
to authenticate the client’s initial destination CID. However,
this fails to enforce agreement, as CIDs can change after a
retry. After much pushback (related to the ability of network
middleboxes to perform a retry on behalf of servers), the IETF
eventually agreed [53] to authenticate all CIDs through TLS
from draft 27, citing a previous draft of this paper.
Improving the QUIC Construction Although Theorem 1
provides useful guarantees, we are still concerned about weak-
nesses in the QPE construction:
•
The authentication of LN depends on the AAD se-
curity of the payload, which in turns depends on the
1169
(cid:5)(cid:24)(cid:17)(cid:22)(cid:28)
(cid:6)(cid:21)(cid:17)(cid:20)(cid:21)(cid:27)(cid:28)(cid:1)
(cid:3)(cid:32)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:3)(cid:32)(cid:32)(cid:1)
Fig. 6: Our proposed HN2-based construction for QPE
non-malleability of the formatting of QUIC headers.
This is brittle in short headers, especially as some
implementations may use unsafe representations of
their CIDs, such as null-terminated strings.
The construction collapses if the receiver uses the
decrypted packet number before the successful de-
cryption of the whole payload. While the QUIC speci-
ﬁcation explicitly forbids this behavior, we observe in
practice that many implementations do not bother de-
crypting the payload if they know in advance that the
decryption will fail. This shortcut provides a timing
oracle to abuse the malleability of the XOR encryption
of the packet number—allowing an attacker to do
efﬁcient range checks by ﬂipping the last 2 bits of
the ﬂags.
The construction is difﬁcult to implement in constant