26th USENIX Security Symposium    133
perform an indirect call to a function whose address was
taken during an earlier program operation. In particular, if
dispatch were rewritten to enforce π-CFI, then it would
block the attack described above: in the execution of π-
CFI described, the only instruction that takes the address
of handler (line L14) is never executed, but the indirect
call at L22 uses priv as the target of an indirect call.
However, in order for π-CFI to enforce per-input CFI
efficiently, it updates valid points-to targets dynamically
using simple, approximate heuristics, rather than a precise
program analysis that accurately models the semantics of
instructions executed. For example, if a function f ap-
pears in the static points-to set of a given control location
L and has its address taken at any point in an execution,
then f remains in the points-to set of L for the rest of
the execution, even if f is no longer a valid target as the
result of program operations executed later. In the case of
dispatch, once dispatch takes the address of priv, priv
remains in the points-to set of control location L22 for the
remainder of the execution.
An attacker can thus subvert the control flow of
dispatch rewritten to enforce π-CFI by performing the
following steps. (1) An administrator sends a request,
which causes dispatch to store priv in handler, call it,
and complete an iteration of its loop. (2) The attacker
sends an anonymous request, which causes dispatch to
set unpriv in handler. (3) The attacker provides argu-
ments that, when handled by strip_args, overwrite the
address in handler to be priv, which causes dispatch to
call priv with arguments provided by the attacker.
Because priv will be enabled as a control target as
a result of the operations performed in step (1), priv
will be a valid transfer target at line L22 in step (3).
Thus, the attacker will successfully subvert control flow.
Let the key control locations in the control path along
which the above attack is performed be denoted p1 =
[L7, L14, L22, L16, L22].
2.3 Path-sensitive CFI
In this paper, we introduce a path-sensitive version of
CFI that addresses the limitations of conventional CFI
illustrated in §2.2. A program satisfies path-sensitive
CFI if at each indirect control transfer, the program only
transfers control to an instruction address that is in the
points-to set of the target register according to a points-to
analysis of the whole executed control path.
dispatch rewritten to satisfy path-sensitive CFI would
successfully detect the attacks given in §2.2 on existing
CFI. One collection of valid points-to sets for handler
for each control location in subpath p0 (§2.2) are the
following:
(L7,{0}), (16,{unpriv}), (L22,{unpriv})
Figure 2: The architecture of PITTYPAT. P denotes a
target program. The analyzer and driver modules of
PITTYPAT are described in §2.4.
When execution reaches L22, priv is not in the points-to
set of handler, and the program halts.
Furthermore, dispatch rewritten to satisfy path-
sensitive CFI would block the attack given in §2.2 on
π-CFI. One collection of valid points-to sets for handler
for each control location in subpath p1 are the following:
(L7,{0})
(L16,{unpriv})
(L14,{priv})
(L22,{unpriv})
(L22,{priv})
When execution reaches L22 in the second iteration of
the loop in dispatch, priv is not in the points-to set of
handler, and the program determines that the control-
flow has been subverted.
2.4 Enforcing path-sensitive CFI efficiently
The points-to sets for control paths considered in §2.3
illustrate that if a program can be rewritten to satisfy path-
sensitive CFI, it can potentially satisfy a strong security
guarantee. However, ensuring that a program satisfies
path-sensitive CFI is non-trivial, because the program
must be extended to dynamically compute the results
of sophisticated semantic constraints [2] over the exact
control path that it has executed.
A key contribution of our work is the design of a run-
time environment, PITTYPAT, that enforces path-sensitive
CFI efficiently. PITTYPAT’s architecture is depicted in
Figure 2. For program P, the state and code of PITTYPAT
consist of the following modules, which execute concur-
rently: (1) a user-space process in which P executes, (2)
a user-space analysis module that maintains points-to in-
formation for the control-path executed by P, and (3) a
kernel-space driver that sends control branches taken by
P to the analyzer and validates system calls invoked by P
using the analyzer’s results.
Before a program P is monitored, the analysis mod-
ule is given (1) an intermediate representation of P and
(2) meta data including a map from each instruction ad-
dress in the binary representation of P to the instruction
in the intermediate representation of P. We believe that it
would also be feasible to implement PITTYPAT to protect
134    26th USENIX Security Symposium
USENIX Association
RingBufferAnalyzerMeta DataLLVM IRfp1f1fp2f2……PPoint-ToTablereadupdatequeryDriverOSPTCPUdump tracewriteinterceptrestorewaitnotify2134012345……a program given only as a binary, given that the analyzer
module only must perform points-to analysis on the se-
quence of executed instructions, as opposed to inferring
the program’s complete control-flow graph.
As P executes a sequence of binary instructions, the
driver module copies the targets of control branches taken
by P from PT’s storage to a ring buffer shared with the
analyzer. PT’s storage is privileged: it can only be written
by hardware and flushed by privileged code, and cannot
be tampered with by P or any other malicious user-space
process. The analyzer module reads taken branches from
the ring buffer, uses them to reconstruct the sequence
of IR instructions executed by P since the last branch
received, and updates the points-to information in a table
that it maintains for P’s current state by running a points-
to analysis on the reconstructed sequence.
When P invokes a system call, the driver first intercepts
P (➊), while waiting for the analyzer module to determine
in parallel if P has taken a valid sequence of control targets
over the entire execution up to the current invocation (➋
and ➌). The analyzer validates the invocation only if P has
taken a valid sequence, and the driver allows execution of
P to continue only if the invocation is validated (➍).
There are two key challenges we must address to make
PITTYPAT efficient. First, trace information generated
by PT is highly compressed; e.g., for each conditional
branch that a program executes, PT provides only a sin-
gle bit denoting the value of the condition tested in the
branch. Therefore additional post-processing is necessary
to recover transfer targets from such information. The ap-
proach used by the perf tool of Linux is to parse the next
branch instruction, extract the offset information, then
calculate the target by adding the offset (if the branch is
taken) or the length of instruction (if branch is not taken).
However, because parsing x86 instructions is non-trivial,
such an approach is too slow to reconstruct a path online.
Our insight to solve this problem is that, to reconstruct
the executed path, an analysis only needs to know the
basic blocks executed. We have applied this insight by
designing the analysis to maintain the current basic block
executed by the program. The analysis can maintain such
information using the compressed information that PT
provides. E.g., if PT provides only a bit denoting the value
of a condition tested in a branch, then the analysis inspects
the conditional branch at the end of the maintained block,
and from the branch, updates its information about the
current block executed.
The second key challenge in designing PITTYPAT is to
design a points-to analysis that can compute accurate
points-to information while imposing sufficiently low
overhead. Precise points-to analyses solve a system of
constraints over all pairs of pointer variables in the pro-
gram [2, 15]; solving such constraints uses a significant
amount of time that is often acceptable in the context of
Packet
TIP.PGE
TIP.PGD
TNT
TIP
FUP
Description
IP at which the tracing begin
Marks the ending of tracing
Taken/non-taken decisions of conditional branches
Target addresses of indirect branches
The source addresses of asynchronous events
Table 1: Control-relevant trace packets from Intel PT.
an offline static analysis, but would impose unacceptable
overhead if used by PITTYPAT’s online analysis process.
Other analyses bound analysis time to be nearly linear
with increasing number of pointer variables, but gener-
ate results that are often too imprecise to provide strong
security guarantees if used to enforce CFI [34].
To address the limitations of conventional points-to
analysis, we have designed an online points-to analysis
that achieves the precision of precise analysis at high per-
formance. The analysis eagerly evaluates control relevant
points-to constraints as they are generated, while updating
the points-to relations table used for future control trans-
fer validation. The analysis enables PITTYPAT, when
analyzing runs of dispatch that execute paths p0 and p1,
to compute the accurate points-to information given in
§2.3. On practical benchmarks, it allows significantly
smaller sets of control targets to be taken at each control
branch, and detects attacks on control flow not detected
by state-of-the-art defenses. Combined with our efficient
path-reconstruction process, it also enables PITTYPAT to
execute with an average of 12.73% overhead (geometric
mean) on even compute-intensive benchmarks, such as
SPEC CPU2006 (see §6).
3 Background
Intel Processor Trace
3.1
Intel PT is a commodity, low-overhead hardware designed
for debugging by collecting complete execution traces of
monitored programs. PT captures information about pro-
gram execution on each hardware thread using dedicated
hardware facilities so that after execution completes, the
captured trace data can be reconstructed to represent the
exact program flow.
The captured control flow information from PT is pre-
sented in encoded data packets. The control relevant
packet types are shown in Table 1. PT records the begin-
ning and the end of tracing through TIP.PGE and TIP.PGD
packets, respectively. Because the recorded control flow
needs to be highly compressed in order to achieve the
efficiency, PT employs several techniques to achieve this
goal. In particular, PT only records the taken/non-taken
decision of each conditional branches through TNT, along
with the target of each indirect branches through TIP. A
direct branch does not trigger a PT packet because the
USENIX Association
26th USENIX Security Symposium    135
control target of a direct branch is fixed.
Besides the limited packet types necessary for recov-
ering complete execution traces, PT also adopts compact
packet format to reduce the data throughput aggressively.
For instance, TNT packets use one bit to indicate the di-
rection of each conditional branches. TIP packets, on the
other hand, contain compressed target address if the upper
address bytes match the previous address logged. Thus
on average, PT tracing incurs less than 5% overhead [13].
When configured appropriately, PT monitors a single
program as well as its descendants based on CR3 filter-
ing, and outputs all collected packets to physical memory
allocated by its kernel driver. In the current implemen-
tation of PITTYPAT, a ring buffer is allocated so that it
can be reused throughout execution. The details of its
implementation are described in §5.1.
3.2 Conventional CFI
A control analysis, given program P, computes a sound
over-approximation of the instruction pointers that may
be stored in each pointer when P executes each instruc-
tion. An abstract domain D [8] consists of a set of abstract
states, a concretization relation from abstract states to the
program states that they represent, and for each program
instruction i, an abstract transformer τD[i] : D → D that
describes how each abstract state is updated by a program.
Each abstract domain defines a transition relation ρD of
steps valid according to D. In particular, for each instruc-
tion i, domain element D, and all states σ and σ′, if σ
represented by D and σ′ is represented by τD[i](D), then
(σ , i,σ′) ∈ ρD. A control-analysis domain D is an ab-
stract domain extended with a relation from each abstract
domain element and instruction pointer to code pointers
in states represented by D.
A valid flow-sensitive description in D of a program
P is a map from each program point in P to an element
in D that is consistent with the semantics of program
instructions. There is always a most-precise valid flow-
sensitive description in D, denoted µ[D].
Definition 1 For control domain D, program P satisfies
(conventional) CFI modulo D if, in each run of P, at each
indirect branch point L, P transfers control to a control
target in µ[D](L).
We provide a complete formal definition of conventional
CFI in §C.1.
An analysis that computes such a description is a con-
trol analysis. Control analyses conventionally are imple-
mented as points-to analyses, such as Andersen’s analy-
sis [2] or Steensgard’s analysis [34].
4 Design
A program P satisfies path-sensitive CFI under control
domain D if each step of P is valid according to D (as
described in §3.2).
Definition 2 For control domain D, program P satisfies
path-sensitive CFI modulo D if, in each run of P consist-
ing of states σ0, . . . ,σn, for each 0 ≤ j < n where σ j steps
to σ j+1 on instruction i, (σ j, i,σ j+1) ∈ ρD.
A formal definition of path-sensitive CFI, along with
results establishing that path-sensitive CFI is strictly
stronger than conventional CFI, are given in §C.2.
PITTYPAT enforces path-sensitive CFI by maintaining
a shadow execution/analysis that only examines control
relevant data, while running concurrently with the mon-
itored process. Using the complete traces reconstructed
from Intel PT, only control-relevant data are computed
and maintained as points-to relations throughout the exe-
cution, using an online points-to analysis. Analyzing only
control-relevant data satisfies the need to validate control-
transfer targets but significantly optimizes the analysis,
because only parts of the program will be examined in the
shadow execution/analysis. Such an analysis, along with
the low overhead incurred by commodity hardware, allow
PITTYPAT to achieve path-sensitive CFI with practical
runtime overhead.
The architecture of PITTYPAT is depicted in §2.4, Fig-
ure 2. PITTYPAT consists of two modules. The first
module executes a given program P in a designated mon-
itor process and collects the targets of control transfers
taken by P. We describe the operation of this module in
§4.1 and give the details of its implementation in §5.1.
The second module receives control-branch targets taken
by P from the first module, reconstructs the control path
executed by P from the received targets, and performs a
points-to analysis along the reconstructed control path of
P. We describe the operation of the analysis module in
§4.2 and describe details of its implementation in §5.2.
4.1 Sharing taken branches efficiently
PITTYPAT uses the PT extension for Intel processors [31]
to collect the control branches taken by P. A naive im-
plementation of PITTYPAT would receive from the moni-
toring module the complete target address of each branch
taken by P in encoded packets and decode the traces of-
fline for analysis. PITTYPAT, given only Boolean flags
from PT, decodes complete branch targets on the fly.
To do so, PITTYPAT maintains a copy of the current
control location of P. For example, in Figure 1, when
dispatch steps through the path [L10, L16, L22], the rele-
vant PT trace contains only two TNT packets and one TIP
packet. A TNT packet is a two-bit stream: 10. The first
136    26th USENIX Security Symposium
USENIX Association
bit, 1, represents the conditional branch at L10 is taken
(i.e., the execution enters into the loop). The second bit, 0,
indicates the conditional branch at L13 is not taken, and
the executed location is now in the else branch. The TIP
packet contains the address of function unpriv, which
shows an indirect jump to unpriv.
PITTYPAT uses the Linux perf infrastructure to extract
the execution trace of P. In particular, PITTYPAT uses the
perf kernel driver to (1) allocate a ring buffer shared by
the hardware and itself and (2) mark the process in which
the target program executes (and any descendant process
and thread) as traced so as to enable tracing when context
switching into a descendant and disable tracing when
context switching out of a descendant. The driver then
transfers the recorded PT packets, together with thread ID
and process ID, to the analyzer module through the shared
buffer. This sharing mechanism has proved to be efficient
on all performance benchmarks on which we evaluated
PITTYPAT, typically incurring less than 5% overhead.
PITTYPAT intercepts the execution of a program at
security-sensitive system calls in the kernel and does not
allow the program to proceed until the analyzer validates
all control branches taken by the program. The list of inter-
cepted system calls can be easily configured; the current
implementation checks write, mmap, mprotect, mremap,
sendmsg, sendto, execve, remap_file_pages, sendmmsg,
and execveat. The above system calls are intercepted be-
cause they can either disable DEP/W⊕X, directly execute
an unintended command, write to files on the local host,