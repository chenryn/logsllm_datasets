What does this do in practice? It basically disables the same-origin policy
(http://en.wikipedia.org/wiki/Same-origin_policy), which is one of the core foundations of web security.
This is very dangerous and should be avoided if at all possible.
You can find further reading on this topic at
http://developer.blackberry.com/html5/documentation/v2_1/ preference_element.html
http://devblog.blackberry.com/2013/08/accessing-external-resources-in-a-blackberry-10-webworks-
app-enterprise-dev-2/
Content Injection Mitigations
Suffice it to say, with WebWorks apps the biggest risk is content injection attacks such as cross-site scripting or
content-manipulation or interception due to the lack of SSL.
So going above and beyond application innovation and the access and web security configuration options, the
primary method of defense will be to not use .innerHTML when constructing content within the DOM. Instead
all HTML DOM objects should be built using CreateElement and the properties set with input validation where
appropriate. Although taking this approach is more expensive in terms of development effort, it greatly reduces
the likelihood of content injection being possible in your app.
Securing Android Applications on BlackBerry 10
Refer to the “Securing Android Applications” in Chapter 9 of this book.
Chapter 9 covers all the considerations one would expect. In terms of BlackBerry 10’s Android run time it’s
important to recognize that the port is extensive. BlackBerry ported the binder Linux kernel driver used on
traditional Android devices to a QNX Resource Manager. The Dalvik VM and Zygote concept were also ported
across. As a result the ability to run native Android apps is indeed that native. A vast majority of the Android
runtime is present allowing near seamless compatibility with a wide variety of apps.
As a result of this porting activity it is important to understand that the same inter-app attack paths (i.e., those
that go via Android IPC mechanisms) translate due to the wholesale porting of the runtime and framework.
Summary
The security engineering that went into BlackBerry OS 7 and earlier was comprehensive, providing a rich and
sophisticated functionality. However, it was also quite complicated to leverage all the built-in features to gain
the maximum level of security. This statement is especially true when you compare it against securing
BlackBerry 10 applications where a lot is taken care of by the operating system by default.
BlackBerry native applications bring with them a range of generic risks due to the use of C and C++. However,
compared to other operating systems such as Android and their relatively rich and complex intents, services,
binder and message interfaces, and broadcast receivers, BlackBerry is on the whole relatively simple to secure.
This is especially true if you stick to the higher-level IPC constructs and be careful where you store files.
With Cascades applications, from a security perspective you need to concern yourself with the
recommendations for native applications coupled with the risk of content injection attacks by virtue of the
underlying functionality provided by the Cascades/QT framework and the reliance on JavaScript.
CHAPTER 18
Cross-Platform Mobile Applications
This book has focused on the four mainstream mobile platforms: iOS, Android, Windows Phone, and
BlackBerry. There is however a growing demand for mobile applications that can operate across multiple
platforms. This topic is now explored in this chapter.
This chapter introduces the subject of cross-platform mobile applications, exploring why they are a growing
trend and the benefits they bring to an organization. It also documents how cross-platform applications typically
operate and expose native functionality, and how in some cases this can lead to serious vulnerabilities. The
typical security considerations for cross-platform applications are then illustrated using one of the most
common frameworks, PhoneGap.
Introduction to Cross-Platform Mobile Applications
Cross-platform mobile applications, or hybrid applications as they are also sometimes referred to, are apps that
combine both web and mobile technologies to operate across multiple mobile platforms. This is typically
achieved using platform-agnostic web programming languages such as HTML, JavaScript, and CSS that live in a
platform-specific native container.
The individual cross-platform applications are developed using a framework that provides the native container
and execution environment for the application; this is typically nothing more than an embedded, platform-
specific web browser. For example, on iOS the embedded web browser is often just a UIWebView. However, the
purpose of the framework doesn’t end there; it is also used to extend the functionality offered by HTML,
JavaScript, and the like to allow access to the device’s native features, such as the camera, microphone, or other
local resources.
The development of cross-platform mobile applications is a growing trend and one that we expect to continue to
gain popularity in the future. There are a number of reasons why cross-platform mobile application
development is becoming more prevalent, including but not limited to the following benefits:
Use of mature and widely adopted programming languages—As previously noted, cross-platform
applications are typically developed using HTML, JavaScript, and CSS. These are all widely adopted
languages familiar to web developers, meaning that the learning curve for developing a cross-platform
application is relatively small. Furthermore, many organizations have existing web development teams,
meaning that it is not necessary to hire new people with specialized skills.
Reduced development costs—Developing a mobile application has often meant that you need one
development team per platform due to the specialized skills required and the diversification of programming
languages. One of the biggest advantages of a cross-platform application is that almost all the code is
reusable across different platforms, and rather than having to independently develop a solution for each
platform, a single solution can be used. In most cases this can also be achieved using a single development
team. This reduction in effort allows organizations to minimize overheads and keep project costs down.
Smoother release and update processes—One significant advantage that a cross-platform mobile
application has over native applications is that they do not need to abide by the traditional release and
update processes. For example, if you wanted to release an update for your application you may simply be
able to push down a new version of the HTML/JavaScript code without the user having to reinstall or update
the native application container.
However, there are some downsides to using cross-platform mobile applications and they may not be a suitable
for all environments. For example, you may want to consider the following implications of using or developing a
cross- platform app:
Speed—It stands to reason that as cross-platform applications are running in a web browser, they will be
much slower than native applications because the code needs to be first interpreted and rendered before it is
displayed in the browser, with the exception of platforms that use a native just-in-time (JIT) JavaScript
engine.
Source code—One disadvantage of using a cross-platform mobile application is that since it is developed
using client-side web languages, you give every user the source code to your app. If you want to develop an
application that uses some proprietary implementation and theft of intellectual property is a concern for you,
then a cross-platform mobile application is not a suitable method for your use case.
The market for cross-platform mobile application frameworks is relatively substantial and a number of different
options are available. The one that best fits your needs will depend entirely on the use case for your application
and the platforms that you want to support. Some of the popular frameworks include:
PhoneGap (http://phonegap.com/)
Appcelerator (http://www.appcelerator.com/)
Corona SDK (http://coronalabs.com/)
Xamarin (http://xamarin.com/)
While many of the security considerations detailed in this chapter apply to all cross-platform mobile app
frameworks, we will illustrate them using PhoneGap as an example.
The field of cross-platform mobile app security is an evolving one and, to date, significant investment in
researching the subject is lacking. There is however one notable academic paper
(http://www.cs.utexas.edu/~shmat/shmat_ndss14nofrak.pdf) that documents this area and is recommended
background reading.
Bridging Native Functionality
One of the primary purposes of the native container is to provide a bridge from the web-based application code
to the native resources on the device. Without the native bridge, the functionality the application can offer
would be relatively limited. Cross-platform mobile app frameworks will typically expose APIs to JavaScript to
facilitate access to local resources, such as the following:
The camera
The microphone
Contact lists
Media (e.g., photos and videos)
Geo-location information
Device orientation from the accelerometer
It is important to understand that the cross-platform application does not directly invoke the bridge. Instead, a
platform-independent API is presented by the framework. This API acts as a bridge between the web layer and
the local resource and provides a layer of abstraction so the application does not need to be aware of any specific
platform dependencies. It is also worth bearing in mind that the bridge is two-way; the native container needs to
be able to send results back to the web layer.
As you may have already guessed, a bridge between the web and local resources can have quite serious security
implications. In particular, exploitation of cross-site scripting or man-in-the-middle vulnerabilities become
quite devastating for an application as they can be used to access device resources.
This section will briefly introduce how cross-platform frameworks implement native bridges across the different
platforms. This knowledge will be useful to you not only when assessing a cross-platform mobile application,
but also when reviewing any native applications that implement their own custom bridges.
Exposing Native Functionality on Android
The subject of native bridges on Android was briefly introduced in Chapter 7. However, for completeness, an
illustration of how cross-platform frameworks implement a two-way native bridge is described in this section.
The WebView class provides the native container for cross-platform applications on Android. Java objects can be
injected in to the WebView and exposed to JavaScript using the addJavascriptInterface method. A simple
example illustrating how this can be implemented follows:
webView = (WebView) findViewById(R.id.webView1);
webView.addJavascriptInterface(new JavaScriptBridge(), "bridge");
webView.getSettings().setJavaScriptEnabled(true);
webView.setWebChromeClient(new WebChromeClient());
webView.loadUrl("file:///android_asset/main.html");
public class JavaScriptBridge {
@JavascriptInterface
public String helloWorld()
{
return "Hello World!";
}
}
In this example the helloWorld() method can be invoked from JavaScript, using the following code:
var HelloWorld = window.bridge.helloWorld();
Since API version 17 only methods with the @JavascriptInterface annotation are available to JavaScript code.
Prior to API version 17, reflection could be used to execute arbitrary code on the device (CVE-2012-6636), as
documented in Chapter 7.
The addJavascriptInterface technique is not the only technique used to implement a native bridge. Another
common strategy implemented by some cross-platform frameworks is to overwrite event handlers. This works
from the native container, by overwriting the definition of what happens when the JavaScript alert prompt and
confirm events are invoked, allowing a custom callback to be defined from the Java container. For example, to
define what happens any time the JavaScript alert() function is invoked, you might use the following code:
@Override
public boolean onJsAlert(WebView view, String url, String message,
final JsResult result)
{
//do something
return true;
}
It is common to see other event handlers such as onJsConfirm() or onJsPrompt() also overridden in a similar
way.
Exposing Native Functionality on iOS
Implementing a native bridge on iOS is slightly more complex than it is for Android because no API methods are
explicitly defined for this purpose. There is however a common hack to use when a native bridge is required.
This technique works by overloading the URL loading system so that arbitrary messages can be passed from
JavaScript to a callback in the native UIWebView. Any time a URL is loaded within the Webview it invokes the
shouldStartLoadWithRequest delegate method, which intercepts the full URL, including any parameters. The
format of the URL is typically used to pass messages from JavaScript to the native container. For example, the
following may be used to find a contact in the address book:
window.location = mybridge://addressbook/search/contact?firstname=peter
The native container then implements the shouldStartLoadWithRequest delegate of the Webview using code
similar to the following:
- (BOOL)webView:(UIWebView*)webView
shouldStartLoadWithRequest:(NSURLRequest*)request
navigationType:(UIWebViewNavigationType)navigationType {
NSURL *URL = [request URL];
if ([[URL scheme] isEqualToString:@"mybridge"]) {
// parse URL, extract host and parameters to define actions
}
}
The shouldStartLoadWithRequest method would typically read in the URL, then separate and interpret each of
the URL components to determine what actions it should take.
The URL loading technique, however, provides only a one-way bridge from the web layer to the native container.
It is possible to create a bi-directional communication channel using a JavaScript callback and the
stringByEvaluatingJavaScriptFromString method of the UIWebview class. For example, to execute a JavaScript
method from the native container you might find code similar to the following:
[webView stringByEvaluatingJavaScriptFromString: \
@"receiveContact('%@','%@')",firstname,surname];
This simple example would cause the receiveContact() JavaScript function to be executed, passing the
NSString objects "firstname" and "surname" to JavaScript. When used in conjunction with
shouldStartLoadWithRequest, this technique is capable of providing a rudimentary bridge between the native
and web layers.
Exposing Native Functionality on Windows Phone
Native bridges in Windows Phone are implemented using an event-driven system. Whilst disabled by default, a
callback from the web layer to the native Silverlight container can be enabled. This is done by first enabling the
IsScriptEnabled property in the project, then handling the ScriptNotify event. A simple example of how you
would handle messages from JavaScript in your Silverlight WebBrowser control may look as follows:
private void WebBrowser_ScriptNotify (object sender, NotifyEventArgs e)
{
// e.get_Value() object contains the message, parse and do actions
}
The type of messages passed to the ScriptNotify event is entirely specific to the cross-platform framework.
However, it is common to see the messages encapsulated in XML or JSON. The JavaScript code triggers the
ScriptNotify callback by invoking the notify() function:
window.external.notify(jsonMessage);
For the web layer to receive the results of any operations, the native Silverlight application needs a means to
pass data to the JavaScript code. JavaScript can be executed directly in the DOM of the WebBrowser control using
the InvokeScript method:
MyWebBrowser.InvokeScript("receiveContact", firstname, surname);
This example would execute the receiveContact() JavaScript function with the "firstname" and "surname"
variables as arguments.
Exposing Native Functionality on BlackBerry
BlackBerry is slightly different than the other platforms in that it already provides a native to web-layer bridge
for WebWorks applications. As detailed in Chapter 14, WebWorks are built upon the Apache Cordova framework
and a set of standard Cordova APIs are provided (https://developer.blackberry.com/html5/apis/v2_2/). It is,
however, possible to also build custom WebWorks extensions that bridge C/C++ and/or Qt code with the
JavaScript and HTML5 web layer using JNEXT. This topic was detailed in Chapter 14 so will not be covered in
this section.
Beyond WebWorks applications, it is also possible to create a native bridge in BlackBerry Cascades apps. Native
bridges in Cascades applications can be implemented using the WebView class and the message passing handlers.
JavaScript executing on the web-layer can first invoke the navigator.cascades.postMessage() method and store
a message handler in the navigator.cascades.onmessage property. A simple example of this may look as
follows:
navigator.cascades.postMessage("Message from javascript");
The native container must then define the messageReceived() signal handler with an appropriate slot in the C++
or QML code:
connectResult = connect(webView, SIGNAL(messageReceived(const \
QVariantMap&)), this, SLOT(onMessageReceived(const \
QVariantMap&)));
[...]
void WebViewBridge::onMessageReceived(const QVariantMap& message)
{
qDebug() evaluateJavaScript("addContact(" + firstname + "," \
+ surname + ")");
This example illustrates how evaluateJavaScript() can be used to directly execute arbitrary JavaScript in a
Webview. In this instance the addContact() JavaScript function is executed with the firstname and surname
parameters passed as arguments. Combining this technique with a messageReceived() signal handler provides
an effective means of creating a native bridge.
Exploring PhoneGap and Apache Cordova
Apache Cordova is an open-source framework for creating mobile applications. It originated from the PhoneGap
application whose developers donated the PhoneGap source code to the Apache Software Foundation in 2011.
PhoneGap is perhaps the most popular framework for creating cross-platform mobile applications with over
400,000 developers and one million downloads (http://phonegap.com/about/). PhoneGap currently supports a
large number of mobile and desktop platforms, including Android, iOS, Windows Phone (7/8), BlackBerry,
Windows 8, Tizen, Firefox OS, Ubuntu, and Amazon FireOS. PhoneGap applications are developed using
HTML5, CSS3, and JavaScript.
This section will illustrate a number of security considerations for cross- platform mobile applications using
Cordova and PhoneGap as practical examples.
Standard Features of PhoneGap
The PhoneGap API is relatively feature rich and provides access to many of the device’s native features,
including the following:
Accelerometer—Accesses the device’s motion sensor
Camera—Captures a photo using the device’s camera
Compass—Obtains the direction the device is pointing
Contacts—Works with the device’s contact database
Filesystem—Hooks into the device’s filesystem
Geolocation—Accesses the device’s GPS location
Media—Accesses or records videos, audio, or images
Network—Accesses network information or performs network requests
Notifications—Accesses or issues visual device notifications
These features will be of interest to you when assessing a PhoneGap application as it gives you an idea of what
features an attacker exploiting the app might be able to access. Any vulnerability that can be exploited to execute
arbitrary script may allow the attacker to invoke the APIs for malicious purposes.
Here is a simple example of how you can use the PhoneGap API to take a photo using the device’s camera using
the getPicture() API call (https://github.com/apache/cordova-plugin-camera/blob/master/doc/index.md):
navigator.camera.getPicture(this.onPhotoDataSuccess, this.onFail, {