能的话，你该如何卸载它们。你也许会想：从哪儿可以获取RabbitMQ的插件呢？
别担心，我们会告诉你的。已经有许多非常棒的插件，你将看到如何获取它们。
当然，仅仅学习现存的插件还远远不够。在12.2节中，你将制作自己的插件。
---
## Page 264
242
第12章聪明的Rabbit：扩展RabbitMQ
是的，你没听错。你将动手使用Erlang来编程并创建你自己的插件。如果你不懂
Erlang也别担心；我们会介绍足够的内容，以便让你开始编程。但是如果你了解
Erlang的话，那写起来就舒心多了。那么就让我们进入下一节，给我们的Rabbit加
把油吧！
12.1RabbitMQ插件
如果你观察过像RabbitMQ这样的系统，就会发现随系统一同发布的功能对大
多数用户来说都很有用。对于服务器默认配置或者是服务器新版本发布时的新特性
来说，也是一样的。但是当你需要某些功能而服务器没有的时候，该怎么办呢？针
对这种情况，RabbitMQ可以通过添加插件的方式来进行增强。你可以从网络上找
到插件，或者也可以自行编写。首先让我们看看什么情况下你会需要插件，然后我
们来看看你该从哪里来获取服务器插件。
12.1.1你可以用插件做什么
那么，哪些使用场景下，RabbitMQ提供的开箱即用功能无法实现呢？以下是
一些可能的场景或者需求列表，我们可以通过安装插件的方式来解决：
■支持AMQP以外的协议
■不同的认证机制（LDAP，自定义数据库）
■消息复制
■新的交换器和路由算法
■消息日志和审计
让我们来看一些例子吧。
不同的协议一STOMP
人们进行着大量实验来为RabbitMQ添加更多协议的支持。众所周知，AMQP
是RabbitMQ支持的默认协议，但这并不能满足所有人的需要，于是就有了STOMP
协议插件。STOMP是一个简单的基于文本的协议，用于在应用之间传输数据。
STOMP的一个优势是，它能与其他服务器一起工作，如ActiveMQ。如果你的代码
基于ActiveMQ和STOMP，并且你想只使用RabbitMQ的话，那么可以通过使用
---
## Page 265
12.1RabbitMQ插件
243
STOMP插件来开始一步步的迁移。或者你使用的编程语言没有AMQP客户端，但
是却支持STOMP的话，那么你可以通过安装该插件来开始使用RabbitMQ。如果你
想要学习更多有关STOMP的知识的话，则可以访问：http://stomp.github.com/。
LDAP认证
另一个RabbitMQ插件的使用场景是，针对不同于简单AMQP来进行对连接到
服务器的认证需求。假设你的系统中所有的用户管理均通过LDAP，并且你也想在
连接到RabbitMQ时继续使用它。多亏了LDPA认证后端，使得这成为可能：http://
www.rabbitmq.com/plugins.html#rabbitmq-auth-backend-ldap。安装该插件，添加合适
的配置，你就能畅通无阻地使用LDAP认证了。
自定义交换器类型
新的协议和不同的认证机制这两者并不是你唯一可以添加到RabbitMQ之上
的东西。你可以步入AMQP底层来实现自定义路由规则的交换器。一个有趣的
自定义交换器例子是由JonBrisbin实现的Riak交换器（https://github.com/jbrisbin
riakexchange）。Riak是一个受Dynamo启发的键值存储，提供开箱即用的容错能力。
如果为了审计的目的，你需要记录经过RabbitMQ交换器的每一条消息的话该怎么
做呢？一种方法是使用fanout交换器，并绑定一个额外的队列，然后使用一个普通
的AMQP消费者来实现日志；或者你可以使用Riak交换器来让服务器为你处理所
有这些：将每一条消息都放入一个Riak桶（bucket）
如果你需要将消息从一台服务器复制到距离数据中心儿英里之外的另一台服务
器上的话，你该怎么做呢？针对这种情况，我们可以使用RabbitMQShovel插件。
在该插件的配置文件里提供一个队列名称和远程服务器上的目的交换器，Shovel会
负责将消息传输到远程交换器上的。
能用插件做的不止这些。你不必将自己局限于添加新的交换器类型或者认证方
式。你可以使用插件来做任何Erlang允许你做的事情；你需要的是发挥自已的想象
力和判断能力。毕竟，你不会想让服务器因为你的异想天开的实现而崩溃。现在你
1Riak中的bucket是一种组织数据的方式，类似于SQL数据库中的表。
---
## Page 266
244
第12章聪明的Rabbit：扩展RabbitMQ
12.1.2在哪里可以找到插件
第一处是网站上专门为RabbitMQ插件开辟的页面：www.rabbitmq.com/plugins
html。在这里你可以找到维护插件（maintained plugins）列表和另一个实验插件
（experimentalplugins）列表。前者是由RabbitMQ团队维护并且与新版服务器保
持更新的。同时你可以通过RabbitMQ邮件列表在http://lists.rabbitmq.com/cgi-bin/
mailman/listinfo/rabbitmq-discuss提交bug和需求。虽然针对实验插件你也可以这样
做，不过你提的问题可能没人来回答。
12.1.3安装插件
你已经看到自从RabbitMQ2.0.7版以来，安装插件变得相当简单了：只需运行
诸如./rabbitmq-pluginsenablerabbitmq_management之类命令，重启服
务器，这样就行了。插件就可以使用了！现在的问题是，如果你想启用的插件不是
服务器发行中的一部分该怎么办呢？首先，你得下载插件的.ez文件到RabbitMQ
安装目录的plugins文件夹下²，之后像往常一样运行./rabbitmq-plugins
enableplugin_name命令即可。
让我们通过启用STOMP插件来试试这些指令吧。进人RabbitMQ安装目录下
的 sbin 文件夹，并输入以下指令：
$ ./rabbitmq-plugins enable rabbitmq_stomp
The following plugins have been enabled:
rabbitmq_stomp
Plugin configuration has changed.Restart RabbitMQ
for changes to take effect.
现在，如果你已经启动服务器的话，就将它停止：
$./rabbitmqctl stop
Stoppingand haltingnode rabbit@mrhyde...
...done.
然后重新启动服务器来加载新的插件：
$./rabbitmq-server -detached
2如果没有plugins文件夹的话，那就在RabbitMQ安装目录下创建一个。之后如果你不再需要使用插
件的话，也可以安全地删除。
---
## Page 267
12.1RabbitMQ插件
245
Activating RabbitMQ plugins...
7plugins activated:
* amqp_client-2.7.0
*mochiweb-1.3-rmq2.7.0-git
* rabbitmq_management-2.7.0
* rabbitmq_management_agent-2.7.0
* rabbitmq_mochiweb-2.7.0
* rabbitmq_stomp-2.7.0
* webmachine-1.7.0-rmq2.7.0-hg
如你所见，在那些已经安装的插件之中，服务器将rabbitmq_stomp-2.7.0
插件和其他已激活的插件一起列了出来。STOMP插件会使用默认配置运行。为了测
试它是否如期工作，让我们使用默认的用户凭证和STOMP协议，连接RabbitMQ。
让我们使用nc（netcat命令行工具）命令来完成之前提到的任务吧：
$ nc localhost 61613
之前的命令会开启到服务器的连接。现在你输入的所有内容都会被发往STOMP
适配器，它会尝试解析帧。现在输入以下内容来启动会话：
CONNECT
login:guest
passcode:guest
@
在输入凭证之后，你需要添加一行额外的空百行，代表一个空的内容，然后输
人~@（按下Control键和@符号），这代表了帧的末尾。如果一切正常的话，你应
该会得到如下应答：
CONNECTED
session:session-ds/mGfvEV6TkPXPVcUv8YA==
heart-beat:0,0
version:1.0
通过这个简单的例子，我们结束了STOMP插件的测试。我们的目的是安装插
件并在零配置下将其启动并运行。你可以通过输入^c（Ctr+C组合键）来退出会
话。如果你想要学习更多有关RabbitMQ下的STOMP如何使用，则可以参考该文档：
http://www.rabbitmq.com/stomp.html
12.1.4移除插件
现在，假设你不再需要STOMP插件了，想要移除它。通过一直使用的
---
## Page 268
246
第12章聪明的Rabbit：扩展RabbitMQ
rabbitmq-plugins 命令就可以轻松完成任务。首先在 sbin文件夹下运行下列命
令来禁用该插件：
$./rabbitmq-plugins disable rabbitmq_stomp
The following plugins have been disabled:
rabbitmq_stomp
Plugin configuration has changed.Restart RabbitMQ
for changes to take effect.
然后需要停止服务器：
$./rabbitmqctl stop
...done.
之后再次重启服务器：
$./rabbitmq-server-detached
ActivatingRabbitMQplugins...
6 plugins activated:
* amqp_client-2.7.0
*mochiweb-1.3-rmq2.7.0-git
* rabbitmq_management-2.7.0
*rabbitmq_management_agent-2.7.0
* rabbitmq_mochiweb-2.7.0
* webmachine-1.7.0-rmq2.7.0-hg
你可以列出启用的插件，以确保STOMP插件禁用成功了：
$./rabbitmq-plugins list-e
[e]amqp_client
2.7.0
[e]mochiweb
1.3-rmq2.7.0-git
[E]rabbitmq_management
2.7.0
[e]rabbitmq_management_agent
2.7.0
[e]rabbitmq_mochiweb
2.7.0
[e]webmachine
1.7.0-rmq2.7.0-hg
你可以看到1ist选项展示了启用的插件及其版本号，而STOMP插件并没有
出现在列表中。如果你想学习更多有关rabbitmq-plugins 命令的话，则可以查
阅它的手册：http://www.rabbitmq.com/man/rabbitmq-plugins.1.man.html
你已经见识到了插件的强大之处，现在该来创建你自己的插件了。准备好了吗？
因为在下一节我们就将要使用Erlang来编码了。
---
## Page 269
12.2制作你自己的插件
247
12.2制作你自己的插件
到自前为止，我们讨论了插件可以用来做些什么；现在该讨论如何创建你自己
的插件了。我们的自标是将自定义交换器添加到RabbitMQ中。什么情况下你会需
要一个新的交换器类型呢？想象一下，你需要使用RabbitMQ来为聊天应用建模，
该模型中有一个全局聊天室，所有的用户都连接到这里。每位用户拥有自己的队列，
绑定到全局fanout交换器上。每次新消息发送到该交换器上时，该消息会群发给所
有绑定到此的队列上。现在，如果有一个新的客户端连接到这个聊天室的话，会怎
样呢？虽然他们会得到发送给聊天室的所有新消息，但是他们无法了解在加入之前
会话的上下文。如果你能将最近20条消息发给客户，好让他们能清楚聊天室的情
况的话，用户体验就会更好。使用默认的AMQP组件是无法做到这一点的。在消息
被队列消费之后，我们就再也无法在服务器上看到它了。可以通过创建能够缓存最
近路由的20条消息的交换器来做到这一点。那样的话，当有新用户连接上聊天室
的时候（这意味着新队列绑定到了该交换器上），你的交换器就会将最近的20条消
息投递过去。图12.1描述了这个想法：用虚线隔离出来的那块区域就是交换区需要
添加到应用程序中的功能。虽然你并不需要用RabbitMQ来实现聊天室，但总有那
么一天你的消费者需要知道交换器上最近发生过的事情。实现该功能的简单方式就
是这类交换器。
user_x
使用RecentHistoryExchange
新的
消息
最近N条消息
消息
新的
聊天室交换器
缓存
消息
缓存了
的消息
新的
新的
新的
消息
消意
消息
user_a
user_b
user_c
new_user
图12.1聊天室：使用默认路由并使用自定义交换器
---
## Page 270
248
第12章聪明的Rabbit：扩展RabbitMQ
在本节中你将实现该交换器，我们称它为RabbitMQRecentHistoryExchange
（RabbitMQ最近历史交换器）。读者可以参阅该项目的完整源代码，文件夹的名字
是rabbitmq-recent-history-exchange。在下一节中，你将设置开发环境，
准备开始创建插件。记住：你将使用Erlang来编写。
12.2.1获取RabbitMQPublicUmbrella
为了编写自己的插件，你需要先设置基础开发环境。RabbitMQ开发者已经为你
制定了开发环境，即RabbitMQPublicUmbrella（Rabbit公伞，以下简称umbrella）。
通过把它从代码库中签出，然后把自己的插件添加到项自结构中就算安装好了。为
了获取umbrella源代码，你需要先设置Mercurial。它是一个分布式版本控制系统，
和Git相似。RabbitMQ开发人员使用Mercurial系统来发布和管理源代码。如果你
已经安装了的话，那就直接使用即可。Mercurial是一个多平台的系统，因此你应该
可以在自己的平台上进行安装。整个安装过程很简单；请到Mercurial网站上（http://
mercurial.selenic.com/）下载适合你电脑的版本。如果之前没有使用过Mercurial的
话也别担心；你只需其中的一些命令来下载umbrella源代码。
如果你是一直按照本书代码示例来的话，那么你应该已经安装好了Python；否
则的话，你也应该安装它，因为umbrella下的一些工具需要Python的支持（包括
Mercurial本身）。参阅Python网站的安装说明：http://www.python.org/。最后需要
的是在本机安装Erlang；如果你能运行RabbitMQ的话，那么你一定已经安装好了。
和Python一样，请参阅Erlang网站来获取安装说明：http://www.erlang.org/。
现在让我们来获取umbrella的源代码。假设你安装好了Mercurial，你可以使用