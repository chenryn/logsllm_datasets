bundle . remove ( " Surname " ) ;
return bundle ; }
Intent intent = new Intent () ;
intent . s e t C o m p o n t e n t ( m a k e C o m p o n e n t N a m e () ) ;
Bundle b = new Bundle () ;
b . p u t S t r i n g ( " Surname " , this . m S u r n a m e ) ;
intent . p u t E x t r a s ( m a k e B u n d l e ( b ) ) ;
r e g i s t e r M y R e c e i v e r () ;
s t a r t A c t i v i t y ( intent ) ; }
13
14
15
16
17 public void onClick ( View v ) {
18
19
20
21
22
23
24
25
26 public void r e g i s t e r M y R e c e i v e r () {
27
28
29
30
31
I n t e n t F i l t e r f = new I n t e n t F i l t e r () ;
f . a d d A c t i o n ( " a . b . ACTION " ) ;
f . a d d C a t e g o r y ( " a . b . C A T E G O R Y " ) ;
r e g i s t e r R e c e i v e r ( new M y R e c e i v e r () ,
f , " a . b . P E R M I S S I O N " , null ) ; }
Figure 7: ICC objects example
Under certain conditions on the representation of
micro-functions, an IDE problem can be solved in time
O(ED3) [32]. For example, micro-functions should be
applied in constant time. In the model we present in Sec-
tion 5, we relax some of these constraints but ﬁnd that
the problem can still be solved efﬁciently in the average
case. When the problem is solved, we know the value as-
sociated with each symbol at important program points.
5 Reducing Intent ICC to an IDE problem
To solve the Intent ICC problem, we need to model
four different kinds of objects. First, ComponentName
objects contain a package name and a class name.
They can be used by explicit Intents. For example, in
method makeComponentName() of Figure 7, a Com-
ponentName object can take two different values de-
pending on which branch is executed.
In the ﬁrst
branch, it refers to class a.b.MyClass from applica-
tion package c.d. In the second one, it refers to class
a.b.MySecondClass. We want to know the possible
return values of makeComponentName().
Second, Bundle objects store data as key-value map-
pings. Method makeBundle() of Figure 7 creates a Bun-
dle and modiﬁes its value. We need to ﬁnd the possible
return values of makeBundle().
Third, Intent objects are the main ICC communica-
548  22nd USENIX Security Symposium 
USENIX Association
the target class of intent
tion objects. They contain all the data that is used to
In method onClick() of Fig-
start other components.
is set using the re-
ure 7,
turn value of makeComponentName().
Its extra data
is set to the return value of makeBundle(). Finally,
a new Activity is started using the newly created In-
tent. We need to determine the value of intent at the
startActivity(intent) instruction.
Fourth,
IntentFilter objects are used for dynamic
Broadcast Receivers.
In registerMyReceiver() on Fig-
ure 7, an action and a category are added to IntentFil-
ter f . Then a Broadcast Receiver of type MyReceiver
(which we assume to be deﬁned) is registered us-
ing method registerReceiver().
It receives Intents that
have action a.b.ACTION and category a.b.CATEGORY
and that originate from applications with permission
a.b.PERMISSION. We want to determine the arguments
to the registerReceiver() call. That is, we want to
know that f contains action a.b.ACTION and category
a.b.CATEGORY. We also want to know that the type of
the Broadcast Receiver is MyReceiver.
In this section, we use the notations from Sagiv et
al. [32] summarized in Section 4. We assume that string
method arguments are available. We describe the string
analysis used in our implementation in Section 6.
5.1 ComponentName Model
In this section, we introduce the model we use for Com-
ponentName objects. We introduce the notion of a
branch ComponentName value. It represents the value
that a ComponentName object can take on a single
branch, given a single possible string argument value for
each method setting the ComponentName’s package and
class names, and in the absence of aliasing.
Deﬁnition 1. A branch ComponentName value is a tuple
c = (p,k), where p is a package name and k is a class
name.
In method makeComponentName() of Figure 7, two
branch ComponentName values are constructed:
(c.d, a.b.MyClass)
(1)
and
(c.d, a.b.MySecondClass)
(2)
The next deﬁnition introduces ComponentName val-
ues, which represent the possibly multiple values that a
ComponentName can have at a program point. A Com-
ponentName can take several values in different cases:
• After traversing different branches, as in method
• When a string argument can have several values at a
• When an object reference is a possible alias of an-
makeComponentName() of Figure 7.
other local reference or an object ﬁeld.
method call.
• When an object reference is a possible array element.
In the last two cases, in order to account for the possi-
bility of a false positive in the alias analysis, we keep
track of two branch ComponentName values. One con-
siders the inﬂuence of the call on the possible alias and
the other one does not.
Deﬁnition 2. A ComponentName value C is a set of
branch ComponentName values: C = {c1,c2,··· ,cm}.
The set of ComponentName values is denoted as Vc. We
deﬁne ⊥ = ∅ and (cid:26) as the ComponentName value that
is the set of all possible branch ComponentName val-
ues in the program. The operators ∪ and ⊆ are deﬁned
as traditional set union and comparison operators: for
C1,C2 ∈ Vc, C1 ⊆ C2 iff C1 ∪C2 = C2. Lc = (Vc,∪) is a
join semilattice.
Note that given the deﬁnitions of ⊥ and (cid:26) as speciﬁc
sets, ∪ and ⊆ naturally apply to them. For example, for
all C ∈ Vc, (cid:26)∪C = (cid:26).
In method makeComponentName() from Figure 7, the
value of c at the return statement is
{(c.d, a.b.MyClass) ,
(3)
It simply combines the values of c created in the two
branches, given by Equations (1) and (2).
(c.d, a.b.MySecondClass)} .
We deﬁne transformers from Vc to Vc that represent
the inﬂuence of a statement or a sequence of statements
on a ComponentName value. A pointwise branch Com-
ponentName transformer represents the inﬂuence of a
single branch, whereas a pointwise ComponentName
transformer represents the inﬂuence of possibly multiple
branches.
Deﬁnition 3. A pointwise branch ComponentName
transformer is a function δ c
(π,χ) : Vc → Vc, where π is a
package name and χ is a class name. It is such that, for
each C ∈ Vc,
δ c
(π,χ)(C) ={(π , χ)}
(4)
Note that δ c
(π,χ)(C) is independent of C, because API
methods for ComponentName objects systematically re-
place existing values for package and class names. In the
example from Figure 7, the pointwise branch Compo-
nentName transformer corresponding to the ﬁrst branch
is
δ c
(c.d,a.b.MyClass),
and the one for the second branch is
δ c
(c.d,a.b.MySecondClass).
(5)
Deﬁnition 4. A pointwise ComponentName transformer
is a function δ c
: Vc → Vc such that, for
each C ∈ Vc,
δ c
{(π1,χ1),··· ,(πn,χn)}(C) ={(π 1, χ1),··· , (πn, χn)}
{(π1,χ1),··· ,(πn,χn)}
A pointwise ComponentName transformer summa-
USENIX Association  
22nd USENIX Security Symposium  549
rizes the effect of multiple branches (or a single branch
with multiple possible string arguments, or with possi-
ble aliasing) on a ComponentName value. That is, given
the value C of a ComponentName right after statement
si and given transformer δ c
that sum-
marizes the inﬂuence of statements si+1,··· ,sk on C,
δ c
(C) represents all the possible values
{(π1,χ1),··· ,(πn,χn)}
of C right after sk. In method makeComponentName()
of Figure 7, the pointwise ComponentName transformer
that models the two branches is
{(π1,χ1),··· ,(πn,χn)}
δ c
{(c.d,a.b.MyClass),(c.d,a.b.MySecondClass)}.
(6)
It combines the transformers given by Equations (4)
and (5). In order to understand how this transformer is
applied in practice, we should mention that the algorithm
to solve IDE problems initially sets values to ⊥ [32].
Therefore, in method makeComponentName(), the value
associated with c is initially ⊥ = ∅. Using Deﬁnition 4,
we can easily see that if we apply the transformer given
by Equation (6), we get the value given by Equation (3).
This conﬁrms that the transformer models the inﬂuence
of the two branches:
δ c
{(c.d,a.b.MyClass),(c.d,a.b.MySecondClass)}(⊥)
= {(c.d, a.b.MyClass) ,
(c.d, a.b.MySecondClass)}
5.2 Bundle Model
The model of Bundle objects is deﬁned similarly to the
model of ComponentName objects. An additional difﬁ-
culty is introduced. The data in a Bundle can be modiﬁed
by adding the data in another Bundle to it, as shown in
method makeBundle() of Figure 7. In this example, the
data in Bundle b is added to the data in Bundle bundle.
Bundle bundle is later modiﬁed by removing the key-
value pair with key Surname. The issue is that when
the data ﬂow problem is being tackled, the value of b
is not known. Therefore, the inﬂuence of the call to
remove("Surname") is not known: if a key-value pair
with key Surname is part of b, then the call removes it
from bundle. Otherwise, it has no inﬂuence.
Our approach to deal with this object composition
problem is to perform two successive analyses. In Anal-
ysis I, we use placeholders for Bundles such as b in in-
struction bundle.putAll(b). We also record all subse-
quent method calls affecting bundle. After the problem
is solved, b’s key-value pairs at the putAll(b) method
call are known, as well as the subsequent method calls.
We then perform Analysis II, in which b’s key-value
pairs are added to bundle’s. The inﬂuence of the sub-
sequent method call is precisely evaluated and ﬁnally the
value of bundle at the return statement can be known.
b to V i
b, where V i
5.2.1 Analysis I
In the ﬁrst analysis, we consider intermediate values that
contain “placeholders” for Bundle values that are not
known when the problem is being solved.
Deﬁnition 5. An intermediate branch Bundle value is a
tuple bi = (E,O), where:
• E is a set of keys describing extra data.
• O is a tuple of two types of elements. O contains ref-
erences to particular Bundle symbols at instructions
where putAll() calls occur. O also contains functions
from V i
b is the set of intermediate Bun-
dle values deﬁned below. These functions represent a
sequence of method calls affecting a Bundle.
The difference with previous deﬁnitions is the intro-
duction of O, which models calls to putAll() as well as
subsequent calls affecting the same Bundle. In method
makeBundle() of Figure 7, at the return statement, the in-
termediate branch Bundle value associated with bundle
is (E,O), where
E ={FirstName}
O =((b, bundle.putAll(b)),β b
(7)
(8)
In O, (b, bundle.putAll(b)) is a reference to variable
b at instruction bundle.putAll(b). β b
(∅,Surname,0,())
models the remove() method call. It is deﬁned below.
(∅,{Surname},0,()))
b = (V i
b, Bi1 ⊆ Bi2 iff Bi1 ∪ Bi2 = Bi2. Li
We just deﬁned intermediate branch Bundle values.
As we did before, we need to consider multiple branches
and related issues (e.g., several possible string values):
Deﬁnition 6. An intermediate Bundle value Bi is a set of
intermediate branch Bundle values: Bi = {bi1,··· ,bim}.
The set of intermediate Bundle values is V i
b. We deﬁne
⊥ = ∅ and (cid:26) as the intermediate Bundle value that is
the set of all possible intermediate branch Bundle val-
ues in the program. We deﬁne ⊆ and ∪ as natural set
comparison and union operators. They are such that, for
Bi1,Bi2 ∈ V i
b,∪) is
a join semilattice.
In method makeBundle() from Figure 7, since there is
only a single branch, the intermediate Bundle value as-
sociated with bundle at the return statement is {(E,O)},
where E and O are given by Equations (7) and (8).
b to V i
b.
Similarly to the ComponentName model, we ﬁrst in-
troduce pointwise branch Bundle transformers before
deﬁning pointwise Bundle transformers.
In the def-
initions below, we use the \ notation for set differ-
ence, and ∪ is naturally extended to tuples such that
(a1,··· ,ak)∪ (ak+1,··· ,al) = (a1,··· ,ak,ak+1,··· ,al).
Deﬁnition 7. A pointwise branch Bundle transformer is
a function β b
• η + is a set of string keys describing extra data. It
Pointwise transformers are deﬁned from V i
(η +,η−,cl,Θ) : V i
models calls to putExtra() methods.
b → V i
b, where:
550  22nd USENIX Security Symposium 
USENIX Association
• η− is a set of string keys describing removed ex-
It represents the inﬂuence of calls to the
tra data.
removeExtra() method.
with the clear() method and 0 otherwise.
• cl takes value 1 if the Bundle data has been cleared
• Θ is a tuple of two types of elements. It contains ref-
erences to particular Bundle symbols at instructions
where putAll() calls occur. It also contains functions
from V i
b. These functions represent a sequence
of method calls affecting a Bundle.
b to V i
It is such that
β b
(η +,η−,cl,Θ)(⊥) =(cid:31)(cid:30)η +\η−,Θ(cid:29)(cid:28)
and, for Bi = {(E1,O1),··· , (Em,Om)} (Bi (cid:24)= ⊥),
β b
(η +,η−,cl,Θ)(Bi) ={(E (cid:23)1,O(cid:23)1),··· , (E(cid:23)m,O(cid:23)m)}
where, for each j from 1 to m:
E(cid:23)j =
O(cid:23)j =
η +\η−
(E j ∪ η +)\η−
E j
Θ
O j ∪(cid:23)β b
if cl = 1
if cl = 0 and O j = ∅
otherwise
(η +,η−,0,Θ)(cid:22)
if cl = 1 or O j = ∅
otherwise
The deﬁnition of E(cid:23)j accounts for several possible
cases:
• If the Bundle data has been cleared (i.e., cl = 1), then
we discard any data contained in E j. This leads to
value η +\η− for E(cid:23)j: we only keep the values η +
that were added to the Bundle data and remove the