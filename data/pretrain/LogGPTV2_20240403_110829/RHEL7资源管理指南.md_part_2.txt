路径中。例如，[*ex.service*]{.emphasis} 属于
[*test-waldo.slice*]{.emphasis}，会直接映射到 cgroup
`test.slice/test-waldo.slice/ex.service/`{.filename} 中。
:::
::: para
service、scope 和 slice
是由系统管理员手动创建或者由程序动态创建的。默认情况下，
操作系统会定义一些运行系统必要的内置
service。另外，默认情况下，系统会创建四种 slice：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [**-.slice**]{.bold .bold} ------ 根 slice；
    :::
-   ::: para
    [**system.slice**]{.bold .bold} ------ 所有系统 service 的默认位置；
    :::
-   ::: para
    [**user.slice**]{.bold .bold} ------ 所有用户会话的默认位置；
    :::
-   ::: para
    [**machine.slice**]{.bold .bold} ------ 所有虚拟机和 Linux
    容器的默认位置。
    :::
:::
::: para
请注意，所有的用户会话、虚拟机和容器进程会被自动放置在一个单独的 scope
单元中。而且，所有的用户会分得一个隐含子 slice（implicit
subslice）。除了上述的默认配置，系统管理员可能会定义新的 slice，并将
service 和 scope 置于其中。
:::
::: para
以下是一个 cgroup 树的简化例子。使用〈[第 2.4 节
"获得关于控制群组的信息"](#chap-Using_Control_Groups.html#sec-Obtaining_Information_About_Control_Groups){.xref}〉中记述的
`systemd-cgls`{.command} 指令，这一输出就会出现：
:::
``` screen
├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 20  
├─user.slice
│ └─user-1000.slice
│   └─session-1.scope
│     ├─11459 gdm-session-worker [pam/gdm-password]
│     ├─11471 gnome-session --session gnome-classic
│     ├─11479 dbus-launch --sh-syntax --exit-with-session
│     ├─11480 /bin/dbus-daemon --fork --print-pid 4 --print-address 6 --session
│     ...
│     
└─system.slice
  ├─systemd-journald.service
  │ └─422 /usr/lib/systemd/systemd-journald
  ├─bluetooth.service
  │ └─11691 /usr/sbin/bluetoothd -n
  ├─systemd-localed.service
  │ └─5328 /usr/lib/systemd/systemd-localed
  ├─colord.service
  │ └─5001 /usr/libexec/colord
  ├─sshd.service
  │ └─1191 /usr/sbin/sshd -D
  │ 
  ...
```
::: para
如您所见，service 和 scope 包含进程，但被放置在不包含它们自身进程的
slice 里。唯一例外是位于特殊 systemd.slice 中的 PID
1。请注意，[**-.slice**]{.bold .bold}
未被显示，因为它被整体树的根隐性识别。
:::
::: para
service 和 slice 单位可通过〈[第 2.3.2 节
"修改单位文件"](#chap-Using_Control_Groups.html#sec-Modifying_Unit_Files){.xref}〉中的永久单位文件来配置；或者对
PID 1 进行 API 调用（如需要 API 的详细信息，请参阅〈["在线文档
"一节](#chap-Introduction_to_Control_Groups.html#Introduction_to_Control_Groups-Online_Documentation){.xref}〉），在运行时动态创建。scope
单位只能以第一种方式创建。API
调用动态创建的单位是临时的，并且仅在运行时存在。一旦结束、被关闭或者系统重启，临时单位会被自动释放。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Introduction_to_Control_Groups.html#br-Resource_Controllers_in_Linux_Kernel}1.3. Linux Kernel 的资源管控器 {.title}
:::
::: para
资源管控器（也称为 cgroup 子系统）代表一种单一资源：如 CPU
时间或者内存。Linux kernel 提供一系列资源管控器，由
[**systemd**]{.application}
自动挂载。如需参考目前已挂载的资源管控器列表，请参见
`/proc/cgroups`{.filename}，或使用 [**lssubsys**]{.application}
监控工具。在 Red Hat Enterprise Linux 7 中，[**systemd**]{.application}
默认挂载以下管控器:
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#chap-Introduction_to_Control_Groups.html#itemlist-Available_Controllers_in_Red_Hat_Enterprise_Linux_7}
**Red Hat Enterprise Linux 7 中可用的管控器**
-   ::: para
    `blkio`{.systemitem} ------ 对输入 ∕ 输出访问存取块设备设定权限；
    :::
-   ::: para
    `cpu`{.systemitem} ------ 使用 CPU 调度程序让 cgroup 的任务可以存取
    CPU。它与 `cpuacct`{.systemitem} 管控器一起挂载在同一 mount 上；
    :::
-   ::: para
    `cpuacct`{.systemitem} ------ 自动生成 cgroup 中任务占用 CPU
    资源的报告。它与 `cpu`{.systemitem} 管控器一起挂载在同一 mount 上；
    :::
-   ::: para
    `cpuset`{.systemitem} ------ 给 cgroup 中的任务分配独立
    CPU（在多芯系统中）和内存节点；
    :::
-   ::: para
    `devices`{.systemitem} ------ 允许或禁止 cgroup 中的任务存取设备；
    :::
-   ::: para
    `freezer`{.systemitem} ------ 暂停或恢复 cgroup 中的任务；
    :::
-   ::: para
    `memory`{.systemitem} ------ 对 cgroup
    中的任务可用内存做出限制，并且自动生成任务占用内存资源报告；
    :::
-   ::: para
    `net_cls`{.systemitem} ------
    使用等级识别符（classid）标记网络数据包，这让 Linux
    流量控制器（`tc`{.command} 指令）可以识别来自特定 cgroup
    任务的数据包；
    :::
-   ::: para
    `perf_event`{.systemitem} ------ 允许使用 [**perf**]{.application}
    工具来监控 cgroup；
    :::
-   ::: para
    `hugetlb`{.systemitem} ------
    允许使用大篇幅的虚拟内存页，并且给这些内存页强制设定可用资源量。
    :::
:::
::: para
Linux Kernel 展示了一系列可用 [**systemd**]{.application}
配置的资源管控器可调参数。参数的详细描述请参阅 kernel 文档（[kernel
管控器专项介绍](#chap-Introduction_to_Control_Groups.html#itemlist-Controller-Specific_Kernel_Documentation){.xref}
的参考列表）。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Introduction_to_Control_Groups.html#sec-Introduction_to_Control_Groups-Additional_Resources}1.4. 附加资源 {.title}
:::
::: para
关于单位层级、kernel 资源管控器和 [**systemd**]{.application}
中的资源管控器的更多信息，请参阅以下所列材料：
:::
### [⁠]{#chap-Introduction_to_Control_Groups.html#Introduction_to_Control_Groups-Installed_Documentation}已安装的文档
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#chap-Introduction_to_Control_Groups.html#itemlist-Systemd_documentation}
**与 cgroup 相关的 systemd 文档**
::: para
以下的 manual page 包含 [**systemd**]{.application} 中统一的 cgroup
层级基本信息：
:::
-   ::: para
    `systemd.resource-control`{.systemitem}(5) ------
    描述系统单位共享的资源控制配置选项。
    :::
-   ::: para
    `systemd.unit`{.systemitem}(5) ------
    描述所有单位配置文件的共同选项。
    :::
-   ::: para
    `systemd.slice`{.systemitem}(5) ------ 提供 [*.slice*]{.emphasis}
    单位的基本信息。
    :::
-   ::: para
    `systemd.scope`{.systemitem}(5) ------ 提供 [*.scope*]{.emphasis}
    单位的基本信息。
    :::
-   ::: para
    `systemd.service`{.systemitem}(5) ------ 提供
    [*.service*]{.emphasis} 单位的基本信息。
    :::
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#chap-Introduction_to_Control_Groups.html#itemlist-Controller-Specific_Kernel_Documentation}
**kernel 管控器专项介绍**
::: para
[kernel-doc]{.package}
数据包给所有资源管控器提供了详细文档。此数据包包含在
"可选"（Optional）订阅频道中。订阅 "可选" 频道前，请参阅 [Scope of
Coverage
Details](https://access.redhat.com/support/offerings/production/scope_moredetail/)
频道，然后按照 Red Hat 客户门户中《[如何使用 Red Hat
订阅管理器（RHSM）获取 "可选" 、 "补充" 频道以及 " -devel"
数据包？](https://access.redhat.com/solutions/392003)》所述步骤完成。如需从
"可选" 频道中安装 [kernel-doc]{.package}，请以 `root`{.systemitem}
身份输入：
:::
``` synopsis
yum install kernel-doc
```
::: para
安装完成后，下列文件会出现在
`/usr/share/doc/kernel-doc-/Documentation/cgroups/`{.filename}
目录中：
:::
-   ::: para
    `blkio`{.systemitem} 子系统 ------ `blkio-controller.txt`{.filename}
    :::
-   ::: para
    `cpuacct`{.systemitem} 子系统 ------ `cpuacct.txt`{.filename}
    :::
-   ::: para
    `cpuset`{.systemitem} 子系统 ------`cpusets.txt`{.filename}
    :::
-   ::: para
    `devices`{.systemitem} 子系统 ------ `devices.txt`{.filename}
    :::
-   ::: para
    `freezer`{.systemitem} 子系统 ------
    `freezer-subsystem.txt`{.filename}
    :::
-   ::: para
    `memory`{.systemitem} 子系统 ------ `memory.txt`{.filename}
    :::
-   ::: para
    `net_cls`{.systemitem} 子系统 --- `net_cls.txt`{.filename}
    :::
:::
::: para
另外，关于 `cpu`{.systemitem} 子系统的更多信息，请参阅下列信息：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    实时调度 ---
    `/usr/share/doc/kernel-doc-/Documentation/scheduler/sched-rt-group.txt`{.filename}
    :::
-   ::: para
    CFS 调度 ---
    `/usr/share/doc/kernel-doc-/Documentation/scheduler/sched-bwc.txt`{.filename}
    :::
:::
### [⁠]{#chap-Introduction_to_Control_Groups.html#Introduction_to_Control_Groups-Online_Documentation}在线文档
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    《[Red Hat Enterprise Linux 7
    系统管理员指南](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide)》------《[*系统管理员指南*]{.emphasis}》记录了关于部署、配置和管理
    Red Hat Enterprise Linux 7 的相关信息。本指南包含了 systemd
    概念的详细释义和使用 systemd 进行服务管理的详尽说明。
    :::
-   ::: para
    [systemd 的 D-Bus
    API](http://www.freedesktop.org/wiki/Software/systemd/dbus/) ------
    D-Bus API 指令的参考资料用于与 [**systemd**]{.application} 互动。
    :::
:::
:::
:::
[]{#chap-Using_Control_Groups.html}
::: chapter
::: titlepage
# [⁠]{#chap-Using_Control_Groups.html#chap-Using_Control_Groups}第 2 章 使用控制群组 {.title}
:::
::: para
以下部分将概述与创建、管理控制群组相关的任务。[**systemd**]{.application}
是管理 cgroup
的推荐方式并会在将来版本中被支持，此指南会着重介绍其提供的实用工具。Red
Hat Enterprise Linux 的之前版本使用 [libcgroup]{.package}
数据包来达到相同目的。此数据包目前仍然可用，以确保后向兼容性（请参阅[警告](#chap-Introduction_to_Control_Groups.html#war-libcgroup){.xref}），但
Red Hat Enterprise Linux 之后的版本将不再支持其运行。
:::
::: section
::: titlepage
# [⁠]{#chap-Using_Control_Groups.html#sec-Creating_Cgroups}2.1. 创建控制群组 {.title}
:::
::: para
从 [**systemd**]{.application} 的角度来看，cgroup
会连接到一个系统单位，此单位可用单位文件进行配置、用 systemd
命令列实用工具进行管理。根据应用的类型，您的资源管理设定可以是
[*transient（临时的）*]{.emphasis} 或者
[*persistent（永久的）*]{.emphasis}。
:::
::: para
要为服务创建 [**transient cgroup（临时 cgroup）**]{.bold .bold}，请使用
`systemd-run`{.command}
指令启动此服务。如此，可以限制此服务在运行时所用资源。对
[**systemd**]{.application} 进行 API 调用，应用程序可以动态创建临时
cgroup。关于如何使用
API，请参阅〈["在线文档"一节](#chap-Using_Control_Groups.html#br-Using_Control_Groups-Online_Documentation){.xref}〉。服务一旦停止，临时单位就会被自动移除。
:::
::: para
要给服务分配 [**persistent cgroup（永久 cgroup）**]{.bold
.bold}，请对其单位配置文件进行编写。系统重启后，此项配置会被保留，所以它可以用于管理自动启动的服务。请注意，scope
单位不能以此方式创建。
:::
::: section
::: titlepage
## [⁠]{#chap-Using_Control_Groups.html#sec-Creating_Transient_Cgroups_with_systemd-run}2.1.1. 用 systemd-run 创建临时 cgroup {.title}