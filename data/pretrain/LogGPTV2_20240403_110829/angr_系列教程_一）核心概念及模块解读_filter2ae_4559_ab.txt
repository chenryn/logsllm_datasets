注：IDA backend 在 angr 8.18.10.25 中已被移除。
## 符号函数摘要集(symbolic funcion summaries)
默认情况下，angr 会使用 `SimProcedures` 中的符号摘要替换库函数，即设置 Hooking，这些 python
函数摘要高效地模拟库函数对状态的影响。可以通过 `angr.procedures`或 `angr.SimProcedures` 查看列表。
`SimProcedures` 是一个两层的字典，第一层表示包名，第二层表示函数名。
    >>> angr.procedures.
    angr.procedures.SIM_PROCEDURES  angr.procedures.java_lang       angr.procedures.stubs
    angr.procedures.SimProcedures   angr.procedures.java_util       angr.procedures.testing
    angr.procedures.advapi32        angr.procedures.libc            angr.procedures.tracer
    angr.procedures.cgc             angr.procedures.linux_kernel    angr.procedures.uclibc
    angr.procedures.definitions     angr.procedures.linux_loader    angr.procedures.win32
    angr.procedures.glibc           angr.procedures.msvcr           .......
    >>> angr.procedures.libc.malloc
    >>> angr.SIM_PROCEDURES['libc']['malloc']
可以设置参数 `exclude_sim_procedures_list` 和 `exclude_sim_procedures_func` 指定不想被
`SimProcedure` 替代的符号。
此外，关于 SimProcedure 的不准确性[文档](https://docs.angr.io/advanced-topics/gotchas)
有提到。
#### Hooking
`SimProcedure` 其实就是 Hook 机制，可以通过 `proj.hook(addr,hook)` 设置，其中 hook 是一个
`SimProcedure` 实例。 通过 `.is_hooked / .unhook / .hook_by` 进行管理。
将 `proj.hook(addr)` 作为函数装饰器，可以编写自己的 hook 函数。。
还可以通过 `proj.hook_symbol(name,hook)` hook 函数。
    >>> stub_func = angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'] # this is a CLASS
    >>> proj.hook(0x10000, stub_func())  # hook with an instance of the class
    >>> proj.is_hooked(0x10000)            # these functions should be pretty self-explanitory
    True
    >>> proj.hooked_by(0x10000)
    >>> proj.unhook(0x10000)
    >>> @proj.hook(0x20000, length=5)
    ... def my_hook(state):
    ...     state.regs.rax = 1
    >>> proj.is_hooked(0x20000)
    True
## states
state 代表程序的一个实例镜像，模拟执行某个时刻的状态。保存运行状态的上下文信息，如内存/寄存器等。
在执行开始之前，我们通过设置 state 对象初始化寄存器/内存/栈帧等信息。在结束执行后，会返回 state 对象，可以提取需要的值进行求解。
#### 基础执行
使用 `state.step()`接口进行简单的执行，该方法会返回一个 `SimSuccessors` 对象，该对象有个 `.successors` 属性
, 是后继状态的列表。
关于执行，在 SM 中同样涉及，通常使用 SM 管理 state 的执行。
#### 状态预设
除了使用`.entry_state()` 创建 state 对象, 我们还可以根据需要使用其他构造函数创建 state:
名称 | 描述  
---|---  
`.entry_state()` | constructs a state ready to execute at the main binary's
entry point.  
`.blank_state` | constructs a "blank slate" blank state, with most of its data
left uninitialized.  
`.call_state` | When accessing uninitialized data, an unconstrained symbolic
value will be returned.constructs a state ready to execute a given function.  
`.full_init_state` | constructs a state that is ready to execute through any
initializers that need to be run before the main binary's entry point  
#### 访问寄存器
通过 `state.regs` 对象的属性访问以及修改寄存器的数据
    >>> state.regs.r  
    state.regs.r10                state.regs.r13w               state.regs.r9d
    state.regs.r10b               state.regs.r14                state.regs.r9w
    state.regs.r10d               state.regs.r14b               state.regs.rax
    state.regs.r10w               state.regs.r14d               state.regs.rbp
    >>> state.regs.rip
#### 访问内存
前面提到可以通过 `state.mem[index]` 访问内存，但对于一段连续内存的操作十分不方便。
因此我们也可以使用 `state.memory` 的 `.load(addr, size) / .store(addr, val)` 接口读写内存,
size 以 bytes 为单位。
以下 load 和 store 的函数声明和一些参数解释：
    def load(self, addr, size=None, condition=None, fallback=None, add_constraints=None, action=None, endness=None,
                 inspect=True, disable_actions=False, ret_on_segv=False):
            """
            Loads size bytes from dst.
            :param addr:             The address to load from. #读取的地址
            :param size:            The size (in bytes) of the load. #大小
            :param condition:       A claripy expression representing a condition for a conditional load.
            :param fallback:        A fallback value if the condition ends up being False. 
            :param add_constraints: Add constraints resulting from the merge (default: True).
            :param action:          A SimActionData to fill out with the constraints.
            :param endness:         The endness to load with. #端序
           ....
    def store(self, addr, data, size=None, condition=None, add_constraints=None, endness=None, action=None,
                  inspect=True, priv=None, disable_actions=False):
            """
            Stores content into memory.
            :param addr:        A claripy expression representing the address to store at. #内存地址
            :param data:        The data to store (claripy expression or something convertable to a claripy expression).#写入的数据
            :param size:        A claripy expression representing the size of the data to store. #大小
            ...
    >>> s = proj.factory.blank_state()
    >>> s.memory.store(0x4000, s.solver.BVV(0x0123456789abcdef0123456789abcdef, 128))
    >>> s.memory.load(0x4004, 6) # load-size is in bytes
参数 `endness` 用于设置端序。
可选的值如下
    LE – 小端序(little endian, least significant byte is stored at lowest address)
    BE – 大端序(big endian, most significant byte is stored at lowest address)
    ME – 中间序(Middle-endian. Yep.)
    >>> import archinfo
    >>> s.memory.load(0x4000, 4, endness=archinfo.Endness.LE)
#### 状态选项
`SimState` 包含 `.options` 属性，它是所有开启的状态选项的集合。
状态通过 `angr.options.`获得，具体的选项可以查看
[列表](https://docs.angr.io/appendix/options) 。
    >>> angr.options.
    Display all 143 possibilities? (y or n)
    angr.options.ABSTRACT_MEMORY
    angr.options.ABSTRACT_SOLVER
    angr.options.ACTION_DEPS
    angr.options.ALLOW_SEND_FAILURES
    angr.options.ALL_FILES_EXIST
    angr.options.APPROXIMATE_FIRST
    angr.options.APPROXIMATE_GUARDS
    ....
可以直接对 `.options`集合进行操作，添加选项。
在创建 `SimState` 对象时，可以通过关键字参数 `add_options` 和 `remove_options` 设置选项。
    >>> s.options.add(angr.options.LAZY_SOLVES)
    # Create a new state with lazy solves enabled
    >>> s = proj.factory.entry_state(add_options={angr.options.LAZY_SOLVES})
    # Create a new state without simplification options enabled
    >>> s = proj.factory.entry_state(remove_options=angr.options.simplification)
#### 状态插件（state plugin)
除了前面提到的 options， `SimState` 中的内容都是以插件的方式进行存储，这种设计可以模块化，方便维护和拓展。
这些插件称为状态插件（state plugin)，angr 内部实现了多种插件。如 memory / history / globals /
callstack 等。
`memory` 插件前面已经提到(内存访问章节)，下面简单介绍 history 和 callstack 插件。
##### history 插件
该插件记录状态的执行路径，实际上是 `history` 结点的链表，可以通过 `.parent` 来遍历列表。
history 存储的一些值以 `history.recent_NAME` 格式命名，对应的迭代器为 `history.NAME` 。
如以下代码会按顺序输出基本块的地址。
    for addr in state.history.bbl_addrs: 
        print hex(addr)
如果想快速查看链表的所有结点，可以使用 `.hardcopy` 方法，例`state.history.bbl_addrs.hardcopy`
以下是 `history` 存储的部分值：
名称 | 描述  
---|---  
`history.descriptions` | a listing of string descriptions of each of the
rounds of execution performed on the state.  
`history.bbl_addrs` | a listing of the basic block addresses executed by the
state.  
`history.jumpkinds` | a listing of the disposition of each of the control flow
transitions in the state's history, as VEX enum strings.  
`history.events` | a semantic listing of "interesting events" which happened
during execution, such as the presence of a symbolic jump condition, the
program popping up a message box, or execution terminating with an exit code.  
`history.actions` | usually empty, but if you add the `angr.options.refs`
options to the state, it will be populated with a log of all the memory,
register, and temporary value accesses performed by the program.  
##### 调用栈（callstack）插件
该插件记录执行时栈帧的信息，也是链表格式。可以直接对 `state.callstack` 进行迭代获得每次执行的栈帧信息。直接访问
`state.callstack` 可以获得当前状态的调用栈。
以下是 `callstack` 记录的部分信息：
  * `callstack.func_addr` ： the address of the function currently being executed 
  * `callstack.call_site_addr`： the address of the basic block which called the current function 
  * `callstack.stack_ptr` : he value of the stack pointer from the beginning of the current function 
  * `callstack.ret_addr` : the location that the current function will return to if it returns 
此外，angr 还内置了许多其他的状态插件，比如 heap、gdb、libc、 filesystem等等，位于 `angr/state_plugin`
目录。
除了使用内置状态插件外，我们也可以编写自己的插件，具体查看[文档说明](https://docs.angr.io/extending-angr/state_plugins)
## 模拟管理器（Simulation Managers)
前面已经介绍过 SM，通过它我们可以同时控制一组 state 的符号执行。我们可以通过 stash 对一组 state 进行执行、筛选、合并和移动等操作。
    >>> simgr = proj.factory.simulation_manager(state)
出于方便，我们也可以使用 `.simulation_manager`的简写 `.simgr`，如果不传入 `state`, angr 会使用
`entry_state` 进行初始化。
    >>> simgr = proj.factory.simgr()
    >>> simgr.active
    []
SM 包含多个 stash（`active/deadended/pruned` 等），大部分操作默认的 stash 为 active 。可以设定参数指定
stash。
SM 三个重要的接口： `step`, `explore`, and `use_technique`
### 执行
SM 提供两种基本的执行方法：
  * step() : 让 stash 中的所有状态都执行一个基本块，默认的 stash 为 active
  * run() : 一直执行到结束
### stash 管理
SM 中使用 stash 管理 state。一个 stash 包含多个 state。可以以 SM 属性的格式访问这些 stash, 如
.active。我们也可以根据需要创建新的 stash。
使用 .move 可以进行 stash 间的移动。每一个 stash 都是一个列表，可以通过索引或者迭代访问里面的数据。
    >>> simgr.move(from_stash='deadended', to_stash='authenticated', filter_func=lambda s: b'Welcome' in s.posix.dumps(1))
    >>> simgr
angr 会对 state 进行分类，归到不同的 stash，以下是部分特殊 stash 列表
名称 | 描述  
---|---  
active | This stash contains the states that will be stepped by default,
unless an alternate stash is specified.  
deadend | A state goes to the deadended stash when it cannot continue the
execution for some reason, including no more valid instructions, unsat state
of all of its successors, or an invalid instruction pointer.  
pruned | When using `LAZY_SOLVES`, states are not checked for satisfiability
unless absolutely necessary. When a state is found to be unsat in the presence
of `LAZY_SOLVES`, the state hierarchy is traversed to identify when, in its
history, it initially became unsat. All states that are descendants of that
point (which will also be unsat, since a state cannot become un-unsat) are
pruned and put in this stash.  
unconstrained | If the `save_unconstrained` option is provided to the
SimulationManager constructor, states that are determined to be unconstrained
(i.e., with the instruction pointer controlled by user data or some other
source of symbolic data) are placed here.  
unsat | If the `save_unsat` option is provided to the SimulationManager
constructor, states that are determined to be unsatisfiable (i.e., they have
constraints that are contradictory, like the input having to be both "AAAA"
and "BBBB" at the same time) are placed here.  
### explore
通过调用 explore 方法，我们可以探索执行路径，在进行 explore 时，可以设置 find 和 avoid 参数，以便找到符合我们预期的路径。
函数接口如下：
    def explore(self, stash='active', n=None, find=None, avoid=None, find_stash='found', avoid_stash='avoid', cfg=None,
                    num_find=1, **kwargs):
    >>>  proj = angr.Project('examples/CSCI-4968-MBE/challenges/crackme0x00a/crackme0x00a')