- 主要边界
- 性能基线
- 异常
### 执行
- 找QA要测试case 在此基础上剪枝 测试主干
- 自测数据需要贴合真是场景
- 发现问题马上修复验证
- 最后回归 保障没有破坏
- 按计划完成 确保准时正式测试
## 系统测试
### 功能测试
### 压力测试
逐步增加流量 直至系统崩掉 得到流量的最佳状态及性能拐点
- 线下压测 小规模测试接口、组件级别的接口
- 线上压测（真实生产环境）
  - 模拟流量 mock 这种方式可能数据过于平均 不太能够接近真实
  - 线上导流 将线上的流量复制给测试
  - 集群/[全链路压测](/软件工程/软件设计/代码质量/软件测试/全链路压测.md)
  - 测试数据打标 测试标会在整个链路透传 把测试数据与真实数据隔离
    - 业务方对于测试流量需要做特殊处理
    - 安全方面需要放行测试流量 避免拦截
    - 根据测试标进行流量分发 将数据最终落在测试库
  - 测试场景读写混合 提前暴露问题
  - 数据准备时冷热数据都要考虑到
### 负载测试
得到某些指标在资源达到临界值时系统的最大负载量
### 稳定性测试
在主链路或者特定场景在一定负载条件下长时间运行 发现不稳定的因素或系统瓶颈
### 兼容测试
- 载体兼容
  - 设备 浏览器...
- 功能兼容
  - 历史功能兼容 使用习惯兼容 多端兼容
- 标准兼容
### 安全测试
- 漏洞扫描
- 权限安全
- 数据脱敏保护
- [渗透测试](/计算机网络/网络安全/渗透测试.md)
### 探索测试
### 回归测试
- 避免代码变更导致出现的问题
变更后验证的内容：
- 变更影响的范围
- 核心链路
- 红线
- 历史故障场景
回归的时机：功能冻结、Bug冻结、环境稳定与线上一致
### 众测
- 交给最终用户的补充性测试
## 移动端测试
- 安装卸载升级测试
- 耗电量与发热测试
- 流量测试：是要想办法减少 App 产生的流量
- 兼容性测试：有第三方的移动设备云测平台
- 弱网测试
- 中断测试
- 手势测试
- 权限测试
- 客户端性能
- 极限测试：在一些临界状态下的行为功能的验证测试，基本思路是需要找出各种潜在的临界场景，并对每一类临界场景做验证和测试
- 用户体验
- 交叉事件测试：App 执行过程中，有其他事件或者应用中断当前应用执行的测试，一般都是在真机手工测试
## 测试平台
- 无代码，直接上手
- 可以完成更多类型的测试
- 效率
- 节省硬件资源
## 测试数据
- On-the-fly：测试用例执行过程中，实时创建测试数据
  - 会导致试的执行时间比较长
  - 业务数据的连带，需要准备一连串的数据
  - 对测试环境的依赖性很强
- Out-of-box：测试用例执行前，事先创建好“开箱即用”的测试数据
  - 测试用例里要硬编码（hardcode）测试数据
  - 只能被一次性使用的测试数据不适合这种方式
  - 预埋”的测试数据的可靠性远不如实时创建的数据，很容易被修改
对于相对稳定的测试数据，往往采用 Out-of-box 的方式以提高效率。而对于那些只能一次性使用的测试数据，往往采用 On-the-fly 的方式以保证不存在脏数据问题
### 自动测试数据生成
- 根据输入数据类型，以及对应的自定义规则库自动生成测试输入数据，比如针对字符串就可以自动生成诸如 Null、SQL 注入、超长字符串、非英语字符等测试数据
- 对于需要组合多个测试输入数据的场景，测试数据自动生成可以自动完成多个测试数据的笛卡尔积组合，然后再以人工的方式剔除掉非法的数据组合，可以通过前置对非法数据的剔除步骤来避免参数组合爆炸
### 平台
将测试数据的准备服务化、平台化、标准化：
![2023117154121](/assets/2023117154121.webp)
## 代码测试
### 常见代码错误
1. 语法特征错误
2. 边界行为特征错误：在执行过程中发生异常，崩溃或者超时
3. 经验特征错误：==写成=...
4. 算法错误
5. 部分算法错误：在一些特定的条件或者输入情况下，算法不能准确完成业务要求实现的功能
### 静态测试方法
- 人工静态：代码评审
- 自动静态：代码静态扫描
### 动态测试方法
- 人工动态：单元测试
- 自动动态：基于代码自动生成边界测试用例并执行，以捕捉潜在的异常、崩溃和超时
## 测试基础架构
- 简化测试执行流程
- 最大化机器利用率
- 测试执行并发能力
- 测试用例版本控制
- 简单的测试操作界面
- 与CI/CD集成
![最基础的](/assets/2023117155324.webp)
![考虑多执行节点、大量测试用例执行、用例版本控制、动态扩缩容等](/assets/2023117155747.webp)
![服务化](/assets/202311716947.webp)
## 探索式测试
> 一种软件测试风格，强调独立测试工程师的个人自由和责任，其目的是为了持续优化其工作的价值，在整个项目过程中，将测试相关学习、测试设计、测试执行和测试结果解读作为相互支持的活动，并行执行
- 首先对软件的单一功能进行比较细致的探索式测试
- 往往会开展系统交互的探索式测试，这个过程通常会采用基于反馈的探索式测试方法：用所有可用的测试技术，以及基于对产品深入理解后的技术直觉，并结合上一次测试结果的反馈与分析结果，指导下一步的测试行动
## 精准测试
- 对传统测试的补充
- 通过可视化或者智能算法识别出测试未覆盖的点
- 数据可信度高：数据都是由系统自动录入和管理的
- 不直接面对产品代码：通过算法和软件实现对测试数据和过程的采集
- 是一种通用的测试分析系统，独立于任何测试平台
![测试与覆盖行的双向映射](/assets/2023117175517.webp)
- 智能回归：算法只执行需要重新执行的回归测试
- 聚类分析：聚类数据可以很容易地发现测试用例的执行错误，同时能够展示测试用例的分布情况
## 基于模型的测试
- Model-Based-Testing
将测试用例的设计依托于被测系统的模型，并基于该模型自动生成测试用例的技术
```mermaid
stateDiagram-v2
  需求 --> 模型: 开发者
  模型 --> 测试对象
  测试对象 --> 测试报告: 生成
  测试对象 --> 测试用例: 生成
  测试对象 --> 测试用例: 执行
```