看到GPZ很久之前披露的一个在野cng.sys驱动漏洞，本文对其进行简单分析，希望能从中学习到一些知识
# 漏洞描述
概述：
内核驱动模块`cng.sys`中存在整数溢出漏洞，利用此漏洞进行越界读写，最终可实现本地提取，此漏洞被黑客用于Chrome sandbox
escape(CVE-2020-15999)
影响的windows版本:
Windows 10 2004以及之前的版本
# 漏洞分析
Windows版本：win10 1903 10.0.18362.836
根据GPZ给出的Poc，可以定位到漏洞函数`cng!CfgAdtpFormatPropertyBlock`，`size`可以被用户控制，`6 *
size`的结果强行转换为有符号的16位整数，`0x10000 // 0x6`的结果为0x2aa，`0x10000 /
6`的结果为10922.666666666666，假设控制size的大小为0x2ab，将其乘上6就溢出为2，`BCryptAlloc`函数内部会调用ExAllocatePoolWithTag或者SkAllocatePool在类型为NonPagedPoolNx池动态申请池空间，此时`NumberOfBytes`为2，申请的空间就十分小，然而do-while循环的次数为size(即0x2ab)，每次向池空间写入6字节，最终导致越界写入，触发BSOD
    __int64 __fastcall CfgAdtpFormatPropertyBlock(char *a1, unsigned __int16 size, __int64 a3)
    {
      unsigned int v3; // ebx
      char *v6; // r14
      __int16 v7; // di
      _WORD *pool_ptr; // rax
      _WORD *v9; // rdx
      _WORD *pool_ptr_w; // rcx
      __int64 count; // r8
      _WORD *v12; // rcx
      char v13; // al
      v3 = 0;
      v6 = a1;
      if ( a1 && size && a3 )
      {
        v7 = 6 * size;
        pool_ptr = BCryptAlloc((unsigned __int16)(6 * size));// 6 * 0x2aab = 2
        v9 = pool_ptr;
        if ( pool_ptr )
        {
          pool_ptr_w = pool_ptr;
          if ( size )
          {
            count = size;
            do
            {
              // store 6 bytes every time
              *pool_ptr_w = (unsigned __int8)a0123456789abcd[(unsigned __int64)(unsigned __int8)*v6 >> 4];
              v12 = pool_ptr_w + 1;
              v13 = *v6++;
              *v12++ = (unsigned __int8)a0123456789abcd[v13 & 0xF];
              *v12 = 0x20;
              pool_ptr_w = v12 + 1;
              --count;
            }
            while ( count );
          }
          *(_QWORD *)(a3 + 8) = v9;
          *(_WORD *)(a3 + 2) = v7;
          *(_WORD *)a3 = v7 - 2;
        }
        else
        {
          return 0xC000009A;
        }
      }
      else
      {
        return 0xC000000D;
      }
      return v3;
    }
    PVOID __fastcall BCryptAlloc(SIZE_T NumberOfBytes)
    {
      char DeviceContext; // al
      DeviceContext = (char)WPP_MAIN_CB.Queue.Wcb.DeviceContext;
      if ( !LODWORD(WPP_MAIN_CB.Queue.Wcb.DeviceContext) )
        DeviceContext = GetTrustedEnvironment();
      if ( (DeviceContext & 2) != 0 )
        return (PVOID)SkAllocatePool(0x200i64, NumberOfBytes, 'bgnC');// NonPagedPoolNx
      else
        return ExAllocatePoolWithTag((POOL_TYPE)0x200, NumberOfBytes, 'bgnC');// NonPagedPoolNx
    }
# 漏洞调试
## cng!CngDispatch
从驱动的cng!DriverEntry入口函数入手，发现好几个MajorFunction都设置为cng!CngDispatch
    DriverObject->MajorFunction[0] = (PDRIVER_DISPATCH)CngDispatch;
    DriverObject->MajorFunction[2] = (PDRIVER_DISPATCH)CngDispatch;
    DriverObject->MajorFunction[3] = (PDRIVER_DISPATCH)CngDispatch;
    DriverObject->MajorFunction[4] = (PDRIVER_DISPATCH)CngDispatch;
    DriverObject->MajorFunction[5] = (PDRIVER_DISPATCH)CngDispatch;
    DriverObject->MajorFunction[0xA] = (PDRIVER_DISPATCH)CngDispatch;
    DriverObject->MajorFunction[0xE] = (PDRIVER_DISPATCH)CngDispatch;
跟进cng!CngDispatch函数，可以看到switch中以Major Function Code作为条件，当前案例中关注的是case
0xe，宏IRP_MJ_DEVICE_CONTROL的值为0xe，用户态调用DeviceIoControl这个API最终执行到内核驱动模块中的DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL]
IoCode即为IO控制码，从崩溃的栈帧回溯的执行路径获悉IoCode为0x390400，但是很遗憾，我的分析属于一种根据结果来推断过程(根据崩溃的栈帧)，这也是四哥痛骂的那波人之一(我太菜了)，代码审计的逻辑是从cng!CngDispatch函数开始，进入到cng!CngDeviceControl函数中根据不同IoCode进行递归，然后进行代码审计。本身来说这个漏洞成因相对简单，需要学习的是寻找触发漏洞路径
    switch ( CurrentStackLocation->MajorFunction )
    {
        ...
        case 0xEu:
            IoCode = CurrentStackLocation->Parameters.Read.ByteOffset.LowPart;
            if ( (IoCode & 3) == 2 && CurrentStackLocation->Parameters.Read.Length )
            {
                ...
            }
            else
            {
                OutputBuffer = irp->AssociatedIrp.MasterIrp;
                InputBuffer = OutputBuffer;
                OutputLen = CurrentStackLocation->Parameters.Read.Length;
            }
            irp->IoStatus.Status = CngDeviceControl(
                InputBuffer,
                CurrentStackLocation->Parameters.Create.Options,// InputLen
                OutputBuffer,
                &OutputLen,
                IoCode,
                irp->RequestorMode);
            irp->IoStatus.Information = OutputLen;
            break;
    }
## cng!CngDeviceControl
在cng!CngDispatch函数中下断点，然后查看一下cng!CngDeviceControl函数的6个参数，分别为输入缓冲区、输入缓冲区长度、输出缓冲区、输出缓冲区长度的指针、IO控制码、请求模式
    1: kd> ba e1 /w "@$curprocess.Name == \"poc.exe\"" cng!CngDispatch+85
从上图的第5个参数可以看到传入的IoCode为0x390400，因为抵达漏洞函数需要执行过函数cng!ConfigIoHandler_Safeguarded，cng!CngDeviceControl函数中存在这样的判断
    if ( IoCode == 0x390400 )
          return ConfigIoHandler_Safeguarded(InputBuffer, NumberOfBytes, (IRP *)OutputBuffer, OutputLen);
## cng!ConfigIoHandler_Safeguarded
cng!ConfigIoHandler_Safeguarded使用的参数为cng!CngDeviceControl前四个参数：rcx，rdx，r8，r9
跟进cng!ConfigIoHandler_Safeguarded函数，可以看到函数根据输入缓冲区的长度申请了两个大小相同的池块，姑且称为pool1、pool2，将输入缓冲区的内容拷贝至pool1，pool2初始化为0，
**在后续的分析过程，将pool1的首地址称为pool_ptr1，pool2的首地址称为pool_ptr2**
    __int64 __fastcall ConfigIoHandler_Safeguarded(
            PVOID InputBuffer,
            SIZE_T InputLen,
            PVOID OutputBuffer,
            ULONG *OutputLen)
    {
     ...
      size = InputLen;
      if ( OutputBuffer )
        v7 = *OutputLen; // v7 = 8
      else
        v7 = 0;
      *OutputLen = 0;
      v8 = 8;
      len = v7; // len = 8
      if ( v7 < 8 )
      {
        if ( v7 )
          memset(OutputBuffer, 0, v7);
        return 0xC0000023;
      }
      else
      {
        v9 = (unsigned int)InputLen;
        pool_ptr1 = BCryptAlloc((unsigned int)InputLen); // allocate pool1
        v11 = BCryptAlloc(v9); // allocate pool2
        pool_ptr2 = v11;
        if ( pool_ptr1 && v11 )
        {
          memmove(pool_ptr1, InputBuffer, v9); // copy InputBuffer to pool1
          memset(pool_ptr2, 0, v9); // clear pool2
          v13 = IoUnpack_SG_ParamBlock_Header(pool_ptr1, size, &v19, pool_ptr2);
          if ( v13 )
          {
            v15 = WinErrorToNtStatus(v13);
          }
          else
          {
            v14 = ConfigFunctionIoHandler(
                    v19,
                    (int)pool_ptr1,
                    size,
                    (struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS *)OutputBuffer,
                    &len,
                    (__int64)pool_ptr2);
            ...
          }
          ...
        }
        ...