33
34 return &Pool{
35 factory: fn,
36 resources: make(chan io.Closer, size),
37 }, nil
38 }
代码清单 7-17 中的 New 函数接受两个参数，并返回两个值。第一个参数 fn 声明为一个函
数类型，这个函数不接受任何参数，返回一个 io.Closer 和一个 error 接口值。这个作为参
数的函数是一个工厂函数，用来创建由池管理的资源的值。第二个参数size表示为了保存资源
而创建的有缓冲的通道的缓冲区大小。
第 30 行检查了 size 的值，保证这个值不小于等于 0。如果这个值小于等于 0，就会使用
nil 值作为返回的pool 指针值，然后为该错误创建一个error 接口值。因为这是这个函数唯
一可能返回的错误值，所以不需要为这个错误单独创建和使用一个 error 接口变量。如果能够
接受传入的 size，就会创建并初始化一个新的 Pool 值。在第 35 行，函数参数 fn 被赋值给
factory字段，并且在第36行，使用size值创建有缓冲的通道。在return语句里，可以构
造并初始化任何值。因此，第34行的return语句用指向新创建的Pool类型值的指针和nil
值作为error接口值，返回给函数的调用者。
在创建并初始化Pool类型的值之后，接下来让我们来看一下Acquire方法，如代码清单
7-18所示。这个方法可以让调用者从池里获得资源。
代码清单7-18 pool/pool.go：第40行到第56行
40 // Acquire从池中获取一个资源
41 func (p *Pool) Acquire() (io.Closer, error) {
42 select {
43 // 检查是否有空闲的资源
44 case r, ok := <-p.resources:
45 log.Println("Acquire:", "Shared Resource")
46 if !ok {
47 return nil, ErrPoolClosed
48 }
49 return r, nil
50
51 // 因为没有空闲资源可用，所以提供一个新资源
52 default:
53 log.Println("Acquire:", "New Resource")
54 return p.factory()
55 }
56 }
代码清单7-18包含了Acquire方法的代码。这个方法在还有可用资源时会从资源池里返回
一个资源，否则会为该调用创建并返回一个新的资源。这个实现是通过select/case语句来检
查有缓冲的通道里是否还有资源来完成的。如果通道里还有资源，如第44行到第49行所写，就
取出这个资源，并返回给调用者。如果该通道里没有资源可取，就会执行default分支。在这
个示例中，在第54行执行用户提供的工厂函数，并且创建并返回一个新资源。
如果不再需要已经获得的资源，必须将这个资源释放回资源池里。这是Release方法的任
务。不过在理解 Release 方法的代码背后的机制之前，我们需要先看一下 Close 方法，如代
码清单7-19所示。
代码清单7-19 pool/pool.go：第82行到第104行
82 // Close会让资源池停止工作，并关闭所有现有的资源
83 func (p *Pool) Close() {
84 // 保证本操作与Release操作的安全
85 p.m.Lock()
86 defer p.m.Unlock()
87
88 // 如果pool已经被关闭，什么也不做
89 if p.closed {
90 return
91 }
92
93 // 将池关闭
94 p.closed = true
95
96 // 在清空通道里的资源之前，将通道关闭
97 // 如果不这样做，会发生死锁
98 close(p.resources)
99
100 // 关闭资源
101 for r := range p.resources {
102 r.Close()
103 }
104 }
一旦程序不再使用资源池，需要调用这个资源池的 Close 方法。代码清单 7-19 中展示了
Close方法的代码。在第98行到第101行，这个方法关闭并清空了有缓冲的通道，并将缓冲的
空闲资源关闭。需要注意的是，在同一时刻只能有一个 goroutine 执行这段代码。事实上，当这
段代码被执行时，必须保证其他goroutine中没有同时执行Release方法。你一会儿就会理解为
什么这很重要。
在第85行到第86行，互斥量被加锁，并在函数返回时解锁。在第89行，检查closed标
志，判断池是不是已经关闭。如果已经关闭，该方法会直接返回，并释放锁。如果这个方法第一
次被调用，就会将这个标志设置为 true，并关闭且清空resources通道。
现在我们可以看一下 Release 方法，看看这个方法是如何和 Close 方法配合的，如代码
清单7-20所示。
代码清单7-20 pool/pool.go：第58行到第80行
58 // Release将一个使用后的资源放回池里
59 func (p *Pool) Release(r io.Closer) {
60 // 保证本操作和Close操作的安全
61 p.m.Lock()
62 defer p.m.Unlock()
63
64 // 如果池已经被关闭，销毁这个资源
65 if p.closed {
66 r.Close()
67 return
68 }
69
70 select {
71 // 试图将这个资源放入队列
72 case p.resources <- r:
73 log.Println("Release:", "In Queue")
74
75 // 如果队列已满，则关闭这个资源
76 default:
77 log.Println("Release:", "Closing")
78 r.Close()
79 }
80 }
在代码清单7-20中可以找到Release方法的实现。该方法一开始在第61行和第62行对互
斥量进行加锁和解锁。这和 Close 方法中的互斥量是同一个互斥量。这样可以阻止这两个方法
在不同goroutine里同时运行。使用互斥量有两个目的。第一，可以保护第65行中读取closed
标志的行为，保证同一时刻不会有其他goroutine调用Close方法写同一个标志。第二，我们不
想往一个已经关闭的通道里发送数据，因为那样会引起崩溃。如果closed标志是true，我们
就知道resources通道已经被关闭。
在第66行，如果池已经被关闭，会直接调用资源值r的Close方法。因为这时已经清空并
关闭了池，所以无法将资源重新放回到该资源池里。对closed标志的读写必须进行同步，否则
可能误导其他goroutine，让其认为该资源池依旧是打开的，并试图对通道进行无效的操作。
现在看过了池的代码，了解了池是如何工作的，让我们看一下main.go代码文件里的测试程
序，如代码清单7-21所示。
代码清单7-21 pool/main/main.go
01 // 这个示例程序展示如何使用pool包
02 // 来共享一组模拟的数据库连接
03 package main
04
05 import (
06 "log"
07 "io"
08 "math/rand"
09 "sync"
10 "sync/atomic"
11 "time"
12
13 "github.com/goinaction/code/chapter7/patterns/pool"
14 )
15
16 const (
17 maxGoroutines = 25 // 要使用的goroutine的数量
18 pooledResources = 2 // 池中的资源的数量
19 )
20
21 // dbConnection模拟要共享的资源
22 type dbConnection struct {
23 ID int32
24 }
25
26 // Close实现了io.Closer接口，以便dbConnection
27 // 可以被池管理。Close用来完成任意资源的
28 // 释放管理
29 func (dbConn *dbConnection) Close() error {
30 log.Println("Close: Connection", dbConn.ID)
31 return nil
32 }
33
34 // idCounter用来给每个连接分配一个独一无二的id
35 var idCounter int32
36
37 // createConnection是一个工厂函数，
38 // 当需要一个新连接时，资源池会调用这个函数
39 func createConnection() (io.Closer, error) {
40 id := atomic.AddInt32(&idCounter, 1)
41 log.Println("Create: New Connection", id)
42
43 return &dbConnection{id}, nil
44 }
45
46 // main是所有Go程序的入口
47 func main() {
48 var wg sync.WaitGroup
49 wg.Add(maxGoroutines)
50
51 // 创建用来管理连接的池
52 p, err := pool.New(createConnection, pooledResources)
53 if err != nil {
54 log.Println(err)
55 }
56
57 // 使用池里的连接来完成查询
58 for query := 0; query < maxGoroutines; query++ {
59 // 每个goroutine需要自己复制一份要
60 // 查询值的副本，不然所有的查询会共享
61 // 同一个查询变量
62 go func(q int) {
63 performQueries(q, p)
64 wg.Done()
65 }(query)
66 }
67
68 // 等待goroutine结束
69 wg.Wait()
70
71 // 关闭池
72 log.Println("Shutdown Program.")
73 p.Close()
74 }
75
76 // performQueries用来测试连接的资源池
77 func performQueries(query int, p *pool.Pool) {
78 // 从池里请求一个连接
79 conn, err := p.Acquire()
80 if err != nil {
81 log.Println(err)
82 return
83 }
84
85 // 将该连接释放回池里
86 defer p.Release(conn)
87
88 // 用等待来模拟查询响应
89 time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
90 log.Printf("QID[%d] CID[%d]\n", query, conn.(*dbConnection).ID)
91 }
代码清单 7-21 展示的 main.go 中的代码使用 pool包来管理一组模拟数据库连接的连接
池。代码一开始声明了两个常量 maxGoroutines 和 pooledResource，用来设置 goroutine
的数量以及程序将要使用资源的数量。资源的声明以及io.Closer接口的实现如代码清单7-22
所示。
代码清单7-22 pool/main/main.go：第21行到第32行
21 // dbConnection模拟要共享的资源
22 type dbConnection struct {
23 ID int32
24 }
25
26 // Close实现了io.Closer接口，以便dbConnection
27 // 可以被池管理。Close用来完成任意资源的
28 // 释放管理
29 func (dbConn *dbConnection) Close() error {
30 log.Println("Close: Connection", dbConn.ID)
31 return nil
32 }
代码清单 7-22 展示了 dbConnection 结构的声明以及 io.Closer 接口的实现。
dbConnection类型模拟了管理数据库连接的结构，当前版本只包含一个字段ID，用来保存每
个连接的唯一标识。Close方法只是报告了连接正在被关闭，并显示出要关闭连接的标识。
接下来我们来看一下创建dbConnection值的工厂函数，如代码清单7-23所示。
代码清单7-23 pool/main/main.go：第34行到第44行
34 // idCounter用来给每个连接分配一个独一无二的id
35 var idCounter int32
36
37 // createConnection是一个工厂函数，
38 // 当需要一个新连接时，资源池会调用这个函数
39 func createConnection() (io.Closer, error) {
40 id := atomic.AddInt32(&idCounter, 1)
41 log.Println("Create: New Connection", id)
42
43 return &dbConnection{id}, nil
44 }
代码清单 7-23 展示了 createConnection 函数的实现。这个函数给连接生成了一个唯一