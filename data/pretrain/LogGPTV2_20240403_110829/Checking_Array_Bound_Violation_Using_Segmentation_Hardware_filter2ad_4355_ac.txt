isters for array bound checking. Our experiments indicate
that three segment registers are sufﬁcient for most network
applications. Cash allocates segment registers on a ﬁrst-
come-ﬁrst-serve basis. The ﬁrst three arrays the Cash com-
piler encounters during the parsing phase inside a (possibly
nested) loop are assigned one of the three segment registers.
If more than three arrays are involved within a loop, Cash
falls back to software array bound checking for references
associated with those arrays beyond the ﬁrst three.
If a segment register is used for array bound checking in
a function, the current value of that segment register must
be saved at the function entry and then restored before the
function returns. For example, ES is used by string instruc-
tions, which currently only hand-crafted assembly code use.
Therefore, to free ES, all GLIBC string functions, which are
written in assembly code, are manually modiﬁed so that the
current ES value is saved at the function entry, ES is loaded
with the same value as DS, and the saved value is restored at
the function exit. Similarly if a function uses a segment reg-
ister, Cash inserts code in the function prologue to save the
current value, and restore it back at the function epilogue.
With more segment registers, it is less likely that Cash
invokes software bound checking, and the performance
overhead can be reduced further. We have successfully used
4 segment registers (ES, FS, GS, and SS) on a set of simple
numerical kernel programs, and the resulting performance,
which is reported in Section 4.2, is indeed better. Linux ini-
tializes the SS segment register with the same value as the
DS register. It is therefore tempting to consolidate them into
one segment register. However, the DS register is used in
data reference and therefore cannot be used for other pur-
poses. The SS register, on the other hand, is used only in
PUSH/POP instructions, and it is the default segment reg-
ister for EBP and ESP registers. To use SS in array bound
checking, Cash replaces PUSH/POP instructions with nor-
mal MOVE and SUB/ADD instructions, and substitutes the
DS segment register for the SS register in each instruction
involving the EBP/ESP register. From our experiments, re-
placing PUSH/POP with MOVE and SUB/ADD does not
seem to incur any performance penalty. As an example, for
the following C function,
void foo(int a, int b)
{
int c = a+b;
printf("%d\n",c);
}
we can generate a code sequence that does away with
PUSH/POP instructions, and forces all instructions involv-
ing EBP/ESP to use DS rather than SS, as follows:
ORIGINAL
MODIFIED
foo:
1 pushl
2 movl
3 subl
4 movl
5 addl
6 movl
7 subl
8 pushl
%ebp
%esp, %ebp
$8, %esp
12(%ebp), %eax
8(%ebp), %eax
%eax, -4(%ebp)
$8, %esp
-4(%ebp)
1a subl
1b movl
2a movl
3a subl
4a movl
5a addl
6a movl
7a subl
8a subl
8b movl
8c movl
$4, %esp
%ebp, %ds:(%esp)
%esp, %ebp
$8, %esp
%ds:12(%ebp), %eax
%ds:8(%ebp), %eax
%eax, %ds:-4(%ebp)
$8, %esp
$4, %esp
%ds:-4(%ebp), %ecx
%ecx,%ds:(%esp)
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
9 pushl
$.LC0
10 call
11 addl
12 leave
13 ret
printf
$16, %esp
9a subl
9b movl
10a call
11a addl
12a leave
13a ret
$4, %esp
$.LC0,%ds:(%esp)
printf
$16, %esp
While it is possible to free SS as described above, it in-
volves signiﬁcant change to the compiler’s code generator.
Therefore the current Cash prototype still uses three seg-
ment registers by default.
3.8 Security Consideration
Applications compiled by BCC are more secure than
Cash applications since BCC bound-checks all pointers.
However, the high performance overhead associated with
BCC applications prevents them being used in production
mode. The weakness of Cash is that Cash does not check
pointers and array references outside loops. However, al-
most all known attacks that exploit bound violation vulnera-
bility involve array references inside loops. Further, the low
overhead of Cash makes it more likely to be used in real
world. Currently Cash bound-checks both read and write
operations since it is designed for the purposes of both secu-
rity and debugging. If Cash is used for security only, Cash
does not need to bound-check read operations and thus can
further decrease the performance overhead by reducing the
number of segment register required and and the number of
software bound checks.
In Cash, the free ldt entry list could be corrupted
due to a program bug because it is in user space. However,
the worst damage as a result of this corruption is to crash
the application itself, but will not affect other processes or
the OS because the LDT table is not shared among pro-
cesses. The descriptors of the per-process code, data, stack
segments are stored in the GDT, and therefore will not be
affected by LDT modiﬁcation. Our own experiences con-
ﬁrmed that the LDT entries never get modiﬁed under Linux
by any code other than Cash. Finally, the kernel function
cash modify ldt guarantees that no call gate and privi-
lege segment can be created in the LDT.
4 Performance Evaluation
4.1 Prototype Implementation
The current Cash compiler prototype is derived from the
Bounds Checking GCC [4], which is derived from GCC
2.96 version, and runs on Red Hat Linux 7.2. We chose
BCC as the base case for the two reasons. BCC is one of
the most advanced array bound checking compilers avail-
able to us, boasting a consistent performance penalty of
around 100%. It has been heavily optimized. The more re-
cent bound checking performance study from University of
Georgia [2] also reports that the average performance over-
head of BCC for a set of numerical kernels is around 117%
Program
Name
SVDPACKC
Vol. Render.
2D FFT
Gaus. Elim.
Matrix Multi.
Edge Detect
HW/SW
Checks
403/0
45/0
13/0
45/0
14/0
137/0
GCC
Cash
BCC
5291993K 1.8% 120.0%
3.3% 126.4%
425029K
72.2%
3.9%
25870K
46961K
1.6%
92.4%
1.5% 143.8%
62861K
806514K
2.2%
83.8%
Table 1. TheperformancecomparisonamongGCC,
BCC,and Cash basedonaset ofkernelsthatusear-
rayreferences extensively. ThematrixusedinSVD-
PACKC (singular value decomposition) is 374x82,
the data set used in the Vol. Render. (Volume Ren-
derer) is 128x128x128 and the image plane’s reso-
lution is 256x256, the resolution of the 2D images
used in the 2D FFT run is 64x64, the matrix used
in Gaus. Elim. (Gaussian Elimination) and Matrix
Multi. (MatrixMultiplication)is128x128, the reso-
lutionof the 2D image used in Edge Detect (Image
EdgeDetection)is1024x768. Allperformance mea-
surements are in terms of thousands of CPU cycles.
The numbers inside the parentheses represent addi-
tionalexecutiontimeduetoarrayboundcheckingin
percentagewithrespecttoGCC.
on Pentium III. In contrast, all the research results published
in the literature on C-based array bound checking always
did far worse than BCC. Moreover, the fact that BCC and
Cash are based on the same GCC code basis makes the
comparison more meaningful. Existing commercial prod-
ucts such as Purify are not very competitive. Purify is a
factor of 5-7 slower than the unchecked version because it
needs to perform check on every read and write. The VMS
compiler and Alpha compiler also supported array bound
checking, but both are at least twice as slow compared with
the unchecked case on the average. In all the following mea-
surements, the compiler optimization level of both BCC and
Cash is set to the highest level. All test programs are stat-
ically linked with all required libraries, which are also re-
compiled with Cash.
Instead of a 3-word pointer representation in BCC, Cash
uses a 2-word pointer representation, with an additional 3-
word shadow information structure. This change is moti-
vated by the observation that pointer variable manipulation
may result in substantial memory copying overhead when
pointer size is increased by a factor of three. Moreover,
rather than checking bound violation for every array ref-
erence via software, Cash performs these checks mostly
through the segment limit checking hardware supported on
the X86 architecture. To move the per-process LDT from
the kernel address space to the user address space, Cash in-
troduces a new system call to the Linux operating system,
which is called in the beginning of a bound-checked pro-
gram to modify the LDTR to point to a table allocated in
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
the user address space.
To understand the quantitatively results of the experi-
ments run on the Cash prototype presented in the next sub-
section, let’s ﬁrst analyze qualitatively the performance sav-
ings and overheads associated with the Cash approach.
Compared with BCC, Cash’s bound checking mecha-
nism does not incur any software overhead, because it ex-
ploits segment limit check hardware to perform array bound
checks for free. However, there are other overheads that
exist only in Cash but not in BCC. First, there is a per-
program overhead, which results from the set-up of the call
gate and the segment free list. Then there is a per-array
overhead, which is related to segment allocation and deal-
location. Finally there is a per-array-use overhead, which
is due to segment register loading whenever an array is to
be used. Because an array may be used at different points
of program execution, each use may incur a segment regis-
ter loading overhead if its corresponding segment selector
is not loaded into any of the available segment registers. On
a Pentium-III 1.1-GHz machine running Red Hat Linux 7.2,
the measured per-program overhead is 543 cycles, the per-
array overhead is 263 cycles, and the per-array-use over-
head is 4 cycles.
4.2 Micro-Benchmark Results
To study the array bound checking overhead associated
with Cash, we ﬁrst choose a set of six numerical kernels
that use array references extensively, and the performance
results in thousands of CPU cycles are shown in Table 1.
We compare Cash against the vanilla GCC without bound
checking and the bound-checking version of GCC (BCC).
The former sets the baseline performance, whereas the latter
represents a state-of-the-art fully operational software-only
bound checking compiler. SVDPACKC is a C-based singu-
lar value decomposition package that implements Lanczos
and subspace iteration-based methods for determining sev-
eral of the largest singular triplets (singular values and cor-
responding left- and right-singular vectors) for large sparse
matrices. The Volume Rendering program implements a
ray casting algorithm for 3D volumetric data sets. The 2D
FFT, Gaussian Elimination, Matrix Multiplication, and Im-
age Edge Detection programs are based on standard algo-
rithms. These programs represent the best case for BCC be-
cause they use pointers rarely, and they are more amenable
to advanced compiler optimizations.
We instrumented the Cash compiler to measure the num-
ber of bound checks statically inserted into the applications
when BCC is in use, and how may of them are eliminated by
the Cash compiler and replaced with hardware checks. The
second column of Table 1 shows the number of hardware
bound checks and software bound checks of each program.
In this experiment, Cash is able to use four segment regis-
ters. As a result, all software bound checks are eliminated
in each of the six test programs. In terms of execution time,
the performance overhead of the Cash compiler is always
within 4% of that of GCC, for all six test programs. In con-
trast, BCC is between 1.7 to 2.4 times slower than GCC. Al-
though BCC’s performance is already quite good compared
with results reported in the literature, it is still signiﬁcantly
slower than Cash.
However, if there are only 2 segment registers avail-
able, only in Volume Rendering, 2D FFT, and Gaussian
Elimination can all software bound checks be eliminated.
For SVDPACKC, Matrix Multiplication, and Image Edge
Detection, the percentages of software bound checks that
can be eliminated are 50.1% (202/201), 85.7% (12/2), and
19.7% (27/110), respectively. Accordingly, their overall
performance overheads become 35.7%, 1.5%, and 44.2%,
respectively. The reason why software bound checks are
needed in these programs is that the programs access more
than two arrays at a time and references to those arrays
for which no segment register can be assigned have to be
bound-checked through software. As expected, the higher
the percentage of array references that are bound-checked
through software, the larger Cash’s performance overhead.
Program Name
SVDPACKC
Volume Rendering
2D FFT
Gaussian
Matrix
Image Edge
GCC
421,076
379,316
393,332
364,788