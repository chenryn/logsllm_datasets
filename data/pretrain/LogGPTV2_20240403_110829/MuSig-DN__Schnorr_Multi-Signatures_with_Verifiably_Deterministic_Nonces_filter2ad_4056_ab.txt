It can easily be proved that the “core” construction (u, z) 7→ uHnon(z) is pseudorandom under
the decisional Diﬃe-Hellman (DDH) assumption in group E (in the random oracle model
for Hnon), even when U = uP is known. This PRF has been considered before in various
contexts [DDP06, FZ13, PWH+17]. By regularity of f, F is also pseudorandom, and U can
be used as host key “committing” to u.
Given a host key U, an input z ∈ {0, 1}∗ (which in the protocol will consist of an encoding
of the list of all participants’ veriﬁcation and host keys and the message m to be signed), and
a nonce R = rG, proving that R has been computed correctly means proving (using witness
u) that U = uP and R = f(uV )G, where V = Hnon(z). In particular, note that Hnon is “out
of scope” of the statement being proved.
Obtaining a 2-Round Protocol. Switching to such an algebraic, ROM-based PRF has
an interesting beneﬁt: it allows us to obtain a 2-round protocol. Recall that in the ﬁrst of
the three communication rounds of MuSig, signers “commit” to their public nonce Ri by
nonce eR =P Ri, and from a provable security point of view, allows the reduction to simulate
sending ti ··= Hcom(Ri). This step prevents any participant from controlling the aggregate
the signing oracle, as we explain brieﬂy now (see [BN06, BDN18, MPSW19] for details). The
reduction algorithm, whose goal is to compute the discrete logarithm of some challenge X1 ∈ G,
runs the adversary A on input X1 as the honest user’s public key, meaning that the goal of A
is to return a forged multi-signature involving X1. The adversary can execute the signature
protocol with the honest user by providing a message m and a multiset X = {X1, X2, . . . , Xn}
where X2, . . . , Xn are arbitrary public keys of purported cosigners. The reduction must simulate
the honest signer without knowing the secret key corresponding to X1. The standard strategy
for this, assuming Hsig is modeled as a random oracle, is to draw the partial signature s1
Hsig(eX, eR, m) ··= c, where eX and eR are respectively the aggregate public key and the aggregate
and the “challenge” c uniformly at random, to let R1 ··= s1G − cµ1X1, and to program
eR and program Hsig before sending the honest user’s nonce R1. This is where the commitment
nonce for the instance of the protocol at hand. However, the reduction must be able to compute
round comes into play. For BN [BN06] and MuSig [BDN18, MPSW19], assuming Hcom is
modeled as a random oracle, the reduction can retrieve the nonces that will be sent by the
6
When moving to deterministic nonces computed with the function F deﬁned in Eq. (1),
adversary in the second communication round immediately after the ﬁrst round (simply by
looking at the queries made by the adversary to Hcom that were answered with values ti),
hence before sending R1.
we can forgo the commitment round and rely on a diﬀerent strategy for computing eR “in
advance” using a trapdoor property of F. Namely, when the adversary starts the protocol with
the honest signer, it must specify the host keys U2 = u2P, . . . , Un = unP for the purported
cosigners. In the random oracle model for Hnon, the reduction can draw v uniformly at random
and program Hnon(z) ··= vP, where z consists of the list of all participants’ veriﬁcation keys
compute the nonces R2, . . . , Rn that will be sent by the adversary (and hence eR) without
and host keys and the message. Since uiHnon(z) = uivP = vUi, this allows the reduction to
knowing the secret nonce keys associated with U2, . . . , Un as Ri = f(vUi).
Note that the number of rounds of the protocol depends in fact on the initial knowledge of
signers regarding public keys of their cosigners. If cosigners’ veriﬁcation keys Xi or host keys
Ui are not known, then the protocol has three rounds as all Xi’s and Ui’s must be sent before
the nonces can be computed by the signers.
Purify: An Efficient Instantiation. It remains to ﬁnd a suitable group E and a NIZK
proof system in which the two relations U = uP (in E) and R = f(uV )G (in G) can be
proven eﬃciently. Our choice for E relies on quadratic twists of elliptic curves, which are
known to be useful for generating random bits from random curve points [Kal87]. Given the
group order p of G, let E1 and E2 be elliptic curves over Fp and quadratic twists of each other
with twisting factor d 6= 0, where d is a quadratic non-residue in Fp. Then there is an elliptic
curve E ∼= E1 × E2 over the quadratic extension ﬁeld Fp2 ∼= Fp(√
d) that admits a suitable
regular function f given by f(W) = x0 for a non-zero point W = (x0 + x1
d) on
E [Gür05, FP07].
Since E ∼= E1 × E2, we can perform the group arithmetic of E in E1 and E2, which in turn
can be eﬃciently done in an arithmetic circuit over Fp. By using a NIZK proof framework
that natively supports secret input scalars s ∈ Fp given in public “commitments” sG ∈ G
as inputs to the arithmetic circuit, e.g. Bulletproofs [BBB+18], we can avoid the very costly
scalar multiplication f(uV ) · G in G.
d, y0 + y1
√
√
Since f is easy to compute, our main challenge in the implementation of F is to construct
an arithmetic circuit for the two scalar multiplications uP and uV in E. As P and V = Hnon(z)
are public, we can precompute values that only depend on P and V outside the circuit. By
performing the scalar multiplications using a wNAF (windowed Non Adjacent Form) algorithm
and further exploiting that the scalar is the same for both, we are able to obtain a circuit with
just below 8d log2(p)e multiplication gates.
With a concrete circuit of 2030 gates built for G being the secp256k1 elliptic curve as used
in Bitcoin, creating a NIZK proof takes 943 ms and verifying it takes 61 ms using Bulletproofs
(see Section 6.2).
We stress that NIZK proofs are only used during the signing protocol of MuSig-DN. In
particular, since MuSig-DN outputs a normal Schnorr signature, veriﬁcation of the signature
including its performance is unaﬀected. In fact, signature veriﬁers cannot even tell that an
interactive protocol was used to produce the signature.
7
1.3 Purify Compared to Other PRFs
Our construction for F aims to strike a balance between security assumptions and proof
eﬃciency. Since we would like to use NIZK proof frameworks that can natively handle
computations in Fp, the performance of the NIZK proof (for proving, and sometimes for
verifying) is typically primarily a function of the number of multiplication gates necessary to
represent the statement as an arithmetic circuit over Fp.
If one does not care about the complexity of the statement, traditional symmetric-key
constructions such as HMAC [BCK96] (as used in RFC 6979) or AES may be feasible
instead. For example, if we assume that HMAC-SHA256 with key u is indistinguishable from
random to an attacker who knows uP, it can be used as F directly. Unfortunately, these
constructions are generally expensive to implement in arithmetic circuits. A circuit to verify
HMAC-SHA256 requires 91 559 multiplication gates,5 and even using unpadded SHA256
directly (one compression function invocation) takes 22 493 gates. These numbers are per
iteration: if p is close to a power of two, one iteration may be enough, but otherwise the circuit
may need multiple iterations to get unbiased results.
Much better complexity can be achieved using symmetric-key PRFs that are speciﬁcally
designed for eﬃciency in arithmetic circuits. Possible candidates include LowMC [ARS+15],
MiMC [AGR+16, AGP+19] and the Marvellous family [AAB+19]. The latter includes the
Rescue cipher, which would permit an F with a 288-gate veriﬁcation circuit.6 However, these
PRFs are relatively young and none of them have received a suﬃcient amount of scrutiny
and cryptanalysis. Albrecht et al. [ACG+19] conclude that these “block cipher designs for
‘algebraic platforms’ (...) may be particularly vulnerable to algebraic attacks”, and call for
further research from the cryptographic community.
Our approach is less eﬃcient than the constructions from this class, as it needs 2030 gates
at the 128-bit security level, but retains provable security under the well-understood DDH
assumption in the random oracle model.
2 Preliminaries
We let Fp denote the ﬁeld with p elements. The security parameter will be denoted λ. All
algorithms are probabilistic unless stated otherwise. Given an algorithm A, y ··= A(x1, . . . , xn; ρ)
means that y is the output of A when run on input x1, . . . , xn and randomness ρ. We let
y ← A(x1, . . . , xn) denote the operation of sampling a random ρ and letting y ··= A(x1, . . . , xn; ρ)
and we let [A(x1, . . . , xn)] denote the set of outputs returned with non-zero probability
by A on inputs x1, . . . , xn. When A has oracle access to some function Oracle, we write
y ← AOracle(x1, . . . , xn).
Probabilities. The statistical distance (or total variation distance) ∆(X, Y ) between two
random variables X and Y with range S is deﬁned as
∆(X, Y ) ··=X
s∈S
1
2 |Pr [X = s] − Pr [Y = s]| .
5 This assumes optimized circuits generated by jsnark [Kos15], which take advantage of the message being
known to the veriﬁer.
6 This assumes Rescue in sponge mode with parameters m = 2, α = 5, N = 24, and p equal to the secp256k1
order, as suggested by the Rescue designers in private communication for a 128-bit security level.
8
It is well-known that
∆(X, Y ) = max
A |Pr [1 ← A(X)] − Pr [1 ← A(Y )]| ,
where the maximum is taken over all (deterministic or probabilistic) algorithms (even compu-
tationally unbounded) taking some input in S and returning a bit b, where the probabilities
are taken over the randomness of X or Y and A’s randomness.
Given a random variable X and an integer n ≥ 1, let X(n) ··= (X1, . . . , Xn) denote the
product distribution where the Xi’s are fully independent and distributed as X. We rely on
the following well-known fact.
Lemma 1. Let X and Y be two random variables with range S and n ≥ 1. Then
∆(X(n), Y (n)) ≤ n · ∆(X, Y ).
We refer the reader to Appendix A for a proof.
Let A and B be two ﬁnite non-empty sets. A function f : A → B is said to be regular if
any b ∈ B has the same number of pre-images by f; it is ε-regular if
∆(f(UA), UB) ≤ ε,
where UA, resp. UB follows the uniform distribution on A, resp. B.
Security Games. A security game GAMEpar(λ) indexed by a set of parameters par consists
of a main procedure and a collection of oracle procedures. The main procedure, on input the
security parameter λ, initializes variables and generates input on which an adversary A is run.
The adversary interacts with the game by calling oracles provided by the game and returns
some output, based on which the game computes its own output b (usually a single bit), which
we write b ← GAMEA
par(λ). When the game outputs the truth value of a predicate, we identify
false with 0 and true with 1.
Let S be some set, which may depend on the security parameter λ. The random oracle
model (ROM) [BR93] replaces a cryptographic hash function H:{0, 1}∗ → S by a truly random
function. In security games, the adversary is given access to an oracle RO which is implemented
by lazy sampling: a lookup table T is initialized empty and queries x are answered as follows:
if T(x) is not yet deﬁned, a random y ←$ S is sampled and stored as T(x) ··= y; then the oracle
returns T(x).
PRNGs and PRFs. Let G = (Gλ : {0, 1}λ → Yλ) for some set Yλ be a family of functions. G
is a secure pseudorandom number generator (PRNG) if for any p.p.t. adversary A,
Advprng
Let G = (Gλ : {0, 1}λ × {0, 1}∗ → Yλ) for some set Yλ be a family of functions. G is a
G,A (λ) ··=(cid:12)(cid:12)(cid:12)Pr[x ←${0, 1}λ : 1 ← A(G(x))] − Pr[y ←$ Yλ : 1 ← A(y)](cid:12)(cid:12)(cid:12) = negl(λ) .
G,A(λ) ··=(cid:12)(cid:12)(cid:12)Pr[k ←${0, 1}λ : 1 ← AG(k,·)(1λ)] − Pr[1 ← ARO(1λ)](cid:12)(cid:12)(cid:12) = negl(λ) ,
secure pseudorandom function (PRF) if for any p.p.t. adversary A,
where RO is deﬁned as in the previous paragraph with S = Yλ.
We note that even though we describe our construction Purify as a PRF, we will not rely
on the above PRF deﬁnition to formalize its security. While the function F in Purify is indeed
a PRF, we will work at a lower level of abstraction in our security proofs. The above PRF
deﬁnition will instead be necessary to capture the pseudorandomness of a helper function
RandDer, which we use to derandomize NIZK proofs (see Section 4).
Advprf
9
GrGen(λ)
Game DLA
(p, G, G) ← GrGen(1λ)
x ←$ Fp ; X ··= xG
0 ← A(p, G, G, X)
x
return (x
0 = x)
// b ∈ {0, 1}
GrGen,GrGen0(λ)
Game DDH-bA
(p, G, G) ← GrGen(1λ) ; (q, E, P, f) ← GrGen0(p)
x, y, z ←$ Zq
X ··= xP ; Y ··= yP ; Z0 ··= xyP ; Z1 ··= zP
0 ← A(q, E, P, X, Y, Zb)
b
return b
0
Fig. 1. The DL and DDH problems.
Groups. A group description is a triple Γ = (p, G, G) where G is an (additively denoted)
cyclic group of order p and G is a generator of G. A (prime-order) group generation algorithm
is an algorithm GrGen which on input 1λ returns a group description (p, G, G) where p is a
λ-bit prime. Fix t ∈ poly(λ) and ε = negl(λ). A (t, ε)-companion group generation algorithm
is an algorithm GrGen0 which on input a λ-bit prime p returns (q, E, P, f) where (q, E, P) is a
group description (with q not necessarily prime) and f : E → Fp is an ε(λ)-regular function
computable in time at most t(λ). We will require that the discrete logarithm (DL) problem is
hard in G and the decisional Diﬃe-Hellman (DDH) problem is hard in E, as formalized below.
Deﬁnition 1. Let game DL be as deﬁned in Fig. 1. The discrete logarithm problem is said
hard w.r.t. GrGen if for any p.p.t. adversary A,
GrGen,A(λ) ··= Prh1 ← DLA
GrGen(λ)i = negl(λ) .
Advdl
Let games DDH-0 and DDH-1 be as deﬁned in Fig. 1. The decisional Diﬃe-Hellman
problem is said hard w.r.t. (GrGen, GrGen0) if for any p.p.t. adversary A,
GrGen,GrGen0,A(λ) ··=(cid:12)(cid:12)(cid:12)Prh1 ← DDH-0A
GrGen,GrGen0(λ)i − Prh1 ← DDH-1A
GrGen,GrGen0(λ)i(cid:12)(cid:12)(cid:12)
Advddh
= negl(λ) .
NIZK Proof Systems. Let R be an NP-relation. For (s, w) ∈ R we call s the statement and
w the witness. Let LR denote the language associated with R, i.e., LR ··= {s : ∃w, (s, w) ∈ R}.
A non-interactive zero-knowledge (NIZK) proof system Π for R consists of the following three
algorithms:
– crs ← Π.Setup(1λ): the setup algorithm takes the security parameter and returns a common
reference string (CRS) crs;
– π ··= Π.Prv(crs, s, w; ρ): the prover algorithm takes as input a CRS crs, a pair (s, w) ∈ R,
and an explicit randomness argument ρ and returns a proof π; it returns ⊥ if (s, w) /∈ R
– b ··= Π.Ver(crs, s, π): the (deterministic) veriﬁer algorithm takes as input a CRS crs, a
statement s, and a proof π and returns a bit b ∈ {0, 1}.
Proof system Π is complete if for every λ and every adversary A,
"crs ← Π.Setup(1λ) ; (s, w) ← A(crs) ; π ← Π.Prv(crs, s, w; ρ) :
Pr
(s, w) ∈ R ∧ Π.Ver(crs, s, π) = 0
#
= 0.
10
Game ZK-bA
Π,R(λ)
crs0 ← Π.Setup(1λ)
(crs1, τ) ← Π.SimSetup(1λ)
0 ← AProve(crsb)
b
return b
0
Oracle Prove(s, w)
ρ ←${0, 1}λ
π0 ··= Π.Prv(crs0, s, w; ρ)
π1 ← Π.SimPrv(crs1, τ, s)
return πb
Fig. 2. The zero-knowledge game for a proof system Π.
A proof system Π is zero-knowledge if proofs leak no information about the witness. We
deﬁne a simulator for a proof system Π as a pair of algorithms:
– (crs, τ) ← Π.SimSetup(1λ): the simulated setup algorithm takes the security parameter and