# XMPP Stanza Smuggling: How I Hacked Zoom
### Ivan Fratric, Google Project Zero
### BlackHat USA 2022

## About the Speaker
**Ivan Fratric**
- Member of Google Project Zero since 2016
- Previously with the Google Security Team and academia (University of Zagreb)
- Publishing security research for over 10 years
- Author of tools such as WinAFL, Domato, TinyInst, Jackalope, etc.
- Twitter: @ifsecure

## Introduction to XMPP
XMPP (Extensible Messaging and Presence Protocol) is a communication protocol that allows for the inclusion of custom, user-controlled XML as part of stanzas. The XML code included in this way must be well-formed; otherwise, the server will discard it.

### Example of XMPP Stanzas
**Sent:**
```
hello
gloox{...}
0true
4
```

**Received:**
```
hello
gloox{...}
0true4
```

**Sent:**
```
hellobargloox{...}0true
4
```

**Received:**
```
hellobar gloox{...}0
true4
```

## What's Wrong with This Picture?
In the XMPP XML pipeline, custom XML gets sent all the way through the pipeline. However, XML parsers have quirks that can lead to inconsistencies in how the data is interpreted.

### Client-Server Communication
**Client:**
- XML Parser
- XML Serializer

**Server:**
- XML Parser

**Issues:**
1. Custom XML gets sent all the way through the pipeline.
2. XML parsers have quirks.

## What is XMPP Stanza Smuggling?
XMPP stanza smuggling occurs when a client sends custom XML, and the server sees a single stanza, but the client sees multiple stanzas. This is not a single bug type but can result from various vulnerabilities.

### Vulnerabilities
- **CVE-2022-25235**
- **CVE-2022-25236**
- **P0-2275**
- **P0-2284**

### XMPP XML Pipeline (Zoom)
- **Client:**
  - Gloox
- **Server:**
  - Ejabberd / fast_xml
  - Expat

### How Do I Know What Zoom Is Running on Their Servers?
Source: [Built In SF Job Posting](https://www.builtinsf.com/job/engineer/senior-xmpp-engineer/49922)

## Example Bug #1: UTF-8 Encoding
UTF-8 encoding supports 1-byte, 2-byte, 3-byte, and 4-byte character sequences. For example, `0xEB` (11101011b) is the start of a 3-byte character sequence.

### Invalid Sequence
- `0xEB 0x3C 0x3E` is an invalid sequence because the second and third bytes must have the high bit set.
- **Expat parser:** Interprets `0xEB 0x3C 0x3E` as a single 3-byte character.
- **Gloox parser:** Interprets `0xEB 0x3C 0x3D` as three characters.

### Full Exploit
- **Expat:** Sees a single tag "foo >".
- **Gloox:** Abuses the fact that `<` or `>` reset the parser state.

## Example Bug #2: Expat Namespace Separator
Ejabberd / fast_xml uses Expat with the following configuration:
```cpp
state->parser = XML_ParserCreate_MM("UTF-8", &ms, "\n");
XML_SetReturnNSTriplet(state->parser, 1);
```

### Issue
- User receives: `namespace\ntag`.
- With prefixes: `namespace\ntag\nprefix`.
- If: `Result: bar\nbaz\nfoo`.
- **Namespace, Tag name, Prefix:** User has no way to differentiate a triplet from a namespace containing a separator.
- Can inject arbitrary characters in the tag name. Malformed names get output when an element is serialized.

## Finding Stanza Smuggling Issues
- **Black box testing**
- **Code review**
- **Fuzzing**

### Fuzzing Harness for the Zoom Pipeline
```cpp
void ProcessSample(const char *data, size_t size) {
  string message(data, size);
  message = string("") + message + string("");
  std::string reparsed;
  if(!fastxml_reparse(message.data(), message.size(), &reparsed))
    return;
  gloox::TagHandler th;
  gloox::Parser gloox_parser(&th);
  int gloox_ret = gloox_parser.feed(reparsed);
  if(gloox_ret >= 0) {
    crash[0] = 1;
  }
}
```

### Fuzzing
- **Tool:** Jackalope (https://github.com/googleprojectzero/Jackalope)
- **Coverage feedback is important.**
- Initial corpus didn't contain sequences like `&#xA;` or property names like `xmlns`.

## Exploiting Stanza Smuggling
- **Message spoofing**
- **Redirect the connection to another server**
  - Custom implementations (e.g., Zoom, Kik Messenger)
- **Custom XMPP extensions**
  - Zoom defines over 50 custom extensions
- **Otherwise unreachable memory corruption issues**
  - From pwn2own 2021 Zoom writeup: “While a client only expects this stanza from the server, it is possible to send it from a different user account.”
  - Source: [Sector7 Computest](https://sector7.computest.nl/post/2021-08-zoom/)

### Exploiting Zoom
- **Custom change in Gloox stanza processing**
  - Q: What if we put a domain we control here?
  - A: We get an HTTP POST request for `/clusterswitch`.
  - Let’s proxy it! (mitmproxy in reverse proxy mode)

### Attacker Workflow
- **Attacker client** -> **Victim client** -> **Attacker proxy** -> **Zoom servers**
- Replace `/clusterswitch` and `/releasenotes` URLs.
- Downloads:
  1. Checks signature of the file.
  2. Runs the file.
  3. Checks hash of the file.
  4. Unpacks the file (version 4.4, signed properly by Zoom).

### Demo
[Demo of the exploit]

## How to Prevent XMPP Stanza Smuggling Issues
- **Code review and fuzzing**
- **Using the same XML parser on the client and the server can prevent some issues, but not all.**
- **XML validation (potentially)**

## Conclusion
- **XML parsers in XMPP implementations are an underexplored attack surface.**
- **The design of the XMPP protocol makes it vulnerable to parser quirks.**
- **Potential impact includes disclosing private communication and 0-click RCE.**
- **Fuzzing is a practical way of uncovering not just memory corruption bugs but also logic bugs in parsers.**

## Special Thanks
- **Sebastian Pipping of Expat**
- **Zoom security team**
- **Project Zero team members**