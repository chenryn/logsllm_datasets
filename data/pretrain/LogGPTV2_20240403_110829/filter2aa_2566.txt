XMPP Stanza Smuggling or How I Hacked Zoom
Ivan Fratric, Google Project Zero
BlackHat USA 2022
About the speaker
Ivan Fratric
‚óè
Google Project Zero since 2016
‚óè
Previously: Google Security Team, academia (Uni ZG)
‚óè
Publishing security research for >>10 years
‚óè
Author: WinAFL, Domato, TinyInst, Jackalope, ‚Ä¶
‚óè
Twitter: @ifsecure
XMPP
test 
messagegloox{F096A899-64D6-4B36-9D65-11BAD59E3D7D}0true4
Stanza
Stanza
XMPP
Sent:
hello
gloox{...}
0true
4
Received:
hello
gloox{...}
0true4
XMPP
Sent:
hellobargloox{...}0true
4
Received:
hellobar gloox{...}0
true4
XMPP
Sent:
hellobargloox{...}0true
4
Received:
hellobar gloox{...}0
true4
XMPP
‚óè
Allows including custom, user-controlled XML as part of stanzas
‚óè
XML code included in this way must be well-formed*
*Server will discard XML which it doesn‚Äôt consider well-formed
XMPP XML pipeline
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
What is wrong with this picture?
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
What is wrong with this picture?
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
a) Custom XML gets sent all the way through the pipeline
What is wrong with this picture?
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
a) Custom XML gets sent all the way through the pipeline
b) XML parsers have quirks
What is XMPP stanza smuggling?
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
Client sends 
custom XML
Server sees a single 
stanza, e.g.
...
Client sees multiple 
stanzas, e.g.
...
...
Not really a single bug type
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
Bugs here:
üêûCVE-2022-25235
Bugs here:
üêûCVE-2022-25236
üêûP0-2275
Bugs here:
üêûP0-2284
XMPP XML pipeline (Zoom)
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
Gloox
ejabberd / fast_xml
Expat
How do I know what Zoom is running on their servers?
Source: https://www.builtinsf.com/job/engineer/senior-xmpp-engineer/49922
Example bug #1: UTF-8 encoding
‚óè
1-byte, 2-byte, 3-byte and 4-byte character sequences
Image source: https://en.wikipedia.org/wiki/UTF-8
Example bug #1: UTF-8 encoding
‚óè
1-byte, 2-byte, 3-byte and 4-byte character sequences
‚óè
E.g. 0xEB = 11101011b is a start of a 3-byte character sequence
Image source: https://en.wikipedia.org/wiki/UTF-8
Example bug #1: UTF-8 encoding
‚óè
0xEB 0x3C 0x3E is an invalid sequence (2nd and 3rd byte must have the high bit set)
    11101011 00111100 00111110
Image source: https://en.wikipedia.org/wiki/UTF-8
Example bug #1: UTF-8 encoding
‚óè
Expat parser: 0xEB 0x3C 0x3E is a single 3-byte character
‚óè
Gloox parser:  0xEB 0x3C 0x3D are 3 characters
üí£
‚óè
What about
‚óè
Expat: I see a single tag "foo  >
Example bug #1: UTF-8 encoding
Full exploit:   ...
Expat:   ...
Gloox:   ...
Abuses the fact that  or  reset Gloox parser state
Example bug #2: Expat namespace separator
Ejabberd / fast_xml uses Expat like so:
state->parser = XML_ParserCreate_MM("UTF-8", &ms, "\n");
XML_SetReturnNSTriplet(state->parser, 1);
Ejabberd / fast_xml uses Expat like so:
state->parser = XML_ParserCreate_MM("UTF-8", &ms, "\n");
XML_SetReturnNSTriplet(state->parser, 1);
Example bug #2: Expat namespace separator
What‚Äôs this?
Example bug #2: Expat namespace separator
Example:
User receives: namespace\ntag
With preÔ¨Åxes:
User receives: namespace\ntag\nprefix
Example bug #2: Expat namespace separator
What if:
Result: bar\nbaz\nfoo
Example bug #2: Expat namespace separator
What if:
Result: bar\nbaz\nfoo
Namespace
Tag name
Prefix
User has no way of differentiating a triplet from namespace containing a separator
Example bug #2: Expat namespace separator
What if:
Result: bar\nbaz\nfoo
Namespace
Tag name
Prefix
Can inject arbitrary characters in tag name. Malformed name gets output when an 
element is serialized
Finding stanza smuggling issues
‚óè
Black box testing
‚óè
Code review
Finding stanza smuggling issues
‚óè
Black box testing
‚óè
Code review
‚óè
Fuzzing
How to fuzz this?
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
How to fuzz this?
Client
Server
Client
XML
Parser
XML
Serializer
XML
Parser
Detect parsing 
errors here
Fuzzing harness for the Zoom pipeline
void ProcessSample(const char *data, size_t size) {
  string message(data, size);
  message = string("") + message + string("");
  std::string reparsed;
  if(!fastxml_reparse(message.data(), message.size(), &reparsed))
    return;
  gloox::TagHandler th;
  gloox::Parser gloox_parser(&th);
  int gloox_ret = gloox_parser.feed(reparsed);
  if(gloox_ret >= 0) {
    crash[0] = 1;
  }
}
Fuzzing
‚óè
I used Jackalope (https://github.com/googleprojectzero/Jackalope)
‚óè
Coverage feedback is important
Fuzzing
‚óè
I used Jackalope (https://github.com/googleprojectzero/Jackalope)
‚óè
Coverage feedback is important
‚óã
My initial corpus didn‚Äôt contain sequences like &#xA;
‚óã
Neither contained property names like xmlns
Exploiting stanza smuggling
Exploiting stanza smuggling
‚óè
Message spooÔ¨Ång
Exploiting stanza smuggling
‚óè
Message spooÔ¨Ång
‚óè
Redirect the connection to another server
From XMPP core spec:
Exploiting stanza smuggling
‚óè
Message spooÔ¨Ång
‚óè
Redirect the connection to another server
‚óã
Custom implementations
‚ñ†
Custom  stanza (Zoom)
‚ñ†
Other custom stanzas, e.g.  (Kik Messenger)
Exploiting stanza smuggling
‚óè
Message spooÔ¨Ång
‚óè
Redirect the connection to another server
‚óè
Custom XMPP extensions
‚óã
Zoom deÔ¨Ånes >50 custom extensions
Exploiting stanza smuggling
‚óè
Message spooÔ¨Ång
‚óè
Redirect the connection to another server
‚óè
Custom XMPP extensions
‚óè
Otherwise unreachable memory corruption issues
‚óã
From pwn2own 2021 Zoom writeup: ‚ÄúWhile a client only expects this stanza from the server, it is 
possible to send it from a different user account.‚Äù
Source: https://sector7.computest.nl/post/2021-08-zoom/
Exploiting Zoom
A custom change in Gloox  stanza processing
Exploiting Zoom
A custom change in Gloox  stanza processing
Q: What if we put a 
domain we control here?
Exploiting Zoom
A custom change in Gloox  stanza processing
Q: What if we put a 
domain we control here?
A: We get a HTTP POST request for /clusterswitch  ü§î
Exploiting Zoom
A custom change in Gloox  stanza processing
Q: What if we put a 
domain we control here?
A: We get a HTTP POST request for /clusterswitch  ü§î
Let‚Äôs proxy it! (mitmproxy in reverse proxy mode)
Exploiting Zoom
27 {
 1: us04xmpp1.zoom.us
 2: us04gateway.zoom.us
 3: us04gateway-s.zoom.us
 4: us04file.zoom.us
 5: us04xmpp1.zoom.us
 6: us04xmpp1.zoom.us
 7: us05polling.zoom.us
 8: us05log.zoom.us
 10: us04file-ia.zoom.us
 11: us04as.zoom.us
 12: us05web.zoom.us
 ‚Ä¶
 23: zmail.asynccomm.zoom.us
}
Exploiting Zoom
27 {
 1: us04xmpp1.zoom.us
 2: us04gateway.zoom.us
 3: us04gateway-s.zoom.us
 4: us04file.zoom.us
 5: us04xmpp1.zoom.us
 6: us04xmpp1.zoom.us
 7: us05polling.zoom.us
 8: us05log.zoom.us
 10: us04file-ia.zoom.us
 11: us04as.zoom.us
 12: us05web.zoom.us
 ‚Ä¶
 23: zmail.asynccomm.zoom.us
}
Let‚Äôs replace this
Attacker 
client
Victim 
client
Attacker 
proxy
Zoom 
servers
‚Ä¶‚Ä¶
‚Ä¶‚Ä¶
Attacker 
client
Victim 
client
Attacker 
proxy
Zoom 
servers
‚Ä¶‚Ä¶
‚Ä¶‚Ä¶
/clusterswitch
/clusterswitch
(web domain replaced)
Attacker 
client
Victim 
client
Attacker 
proxy
Zoom 
servers
‚Ä¶‚Ä¶
‚Ä¶‚Ä¶
/clusterswitch
/clusterswitch
(web domain replaced)
/releasenotes
/releasenotes
(update download URLs 
replaced)
Exploiting Zoom
Downloads
Downloads
Exploiting Zoom
1.Checks signature of
2. Runs
3.Checks hash of
4. Unpacks
Exploiting Zoom
1.Checks signature of
2. Runs
3.Checks hash of
3. Unpacks
(version 4.4)
(signed properly by Zoom)
DEMO
How to prevent XMPP stanza smuggling issues
‚óè
Code review, fuzzing
‚óè
Using the same XML parser on the client and the server can prevent 
some issues, but not all of them
‚óè
XML validation (?)
Conclusion
‚óè
XML parsers in XMPP implementations are an underexplored attack surface
‚óè
The design of the XMPP protocol makes it vulnerable to parser quirks
‚óè
Potential impact includes disclosing private communication and 0-click RCE
‚óè
Fuzzing is a practical way of uncovering not just memory corruption bugs, but 
also logic bugs in parsers
Special thanks
‚óè
Sebastian Pipping of Expat 
‚óè
Zoom security team
‚óè
Project Zero team members