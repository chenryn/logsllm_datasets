RMI将所有这些网络流量多路复用到客户端和服务器之间的单个套接字连接上（这里指的就是T3协议吧）。相同的套接字连接也可重用于其他类型的J2EE交互，例如JDBC请求和JMS连接。通过最小化客户端和WebLogic之间的网络连接，RMI实现可以在负载下很好地扩展，并同时支持大量RMI客户端，它还依赖于高性能的
**序列化** 逻辑。
此外，当客户端在与RMI对象相同的VM中运行时，WebLogic会自动优化客户端与服务器之间的交互。它确保您不会因调用远程方法期间对参数进行编组或取消编组而导致任何性能损失。相反，当客户端和服务器对象并置时，并且在类加载器层次结构允许时，WebLogic使用Java的按引用传递语义。
2.客户端之间的沟通
WebLogic的RMI提供了客户端和服务器之间的异步双向套接字连接。 RMI客户端可以调用由服务器端提供的RMI对象以及通过WebLogic的RMI
Registry注册了远程接口的其他客户端的RMI对象公开的方法。因此，
**客户端应用程序可以通过服务器注册表发布RMI对象，而其他客户端或服务器可以使用这些客户端驻留的对象，就像它们将使用任何服务器驻留的对象一样**
。这样，您可以创建涉及RMI客户端之间对等双向通信的应用程序。
3.RMI注册中心
只要启动WebLogic，RMI注册表就会自动运行。WebLogic会忽略创建RMI注册表的多个实例的尝试，仅返回对现有注册表的引用。
WebLogic的RMI注册表与JNDI框架完全集成。可以使用 **JNDI或RMI注册表** （可以看到上面Java
RMI我使用了Registry，后面Weblogic
RMI中我使用的是JNDI方式，两种方式对RMI服务都是可以的）来绑定或查找服务器端RMI对象。实际上，RMI注册中心只是WebLogic的JNDI树之上的一小部分。我们建议您直接使用JNDI
API来注册和命名RMI对象，而完全绕过对RMI注册表的调用。JNDI提供了通过其他企业命名和目录服务（例如LDAP）发布RMI对象的前景。
4.隧道式
RMI客户端可以使用基于多种方案的URL：标准 rmi://方案，或分别通过HTTP和IIOP隧道传输RMI请求的
http://和iiop://方案。这使来自客户端的RMI调用可以穿透大多数防火墙。
5.动态生成存根和骨架
WebLogic支持动态生成客户端存根和服务器端框架，从而无需为RMI对象生成客户端存根和服务器端框架。将对象部署到RMI注册表或JNDI时，WebLogic将自动生成必要的存根和框架。唯一需要显式创建存根的时间是可集群客户端或IIOP客户端需要访问服务器端RMI对象时。
T3传输协议是WebLogic的自有协议，Weblogic RMI就是通过T3协议传输的（可以理解为序列化的数据载体是T3），它有如下特点：
  1. 服务端可以持续追踪监控客户端是否存活（心跳机制），通常心跳的间隔为60秒，服务端在超过240秒未收到心跳即判定与客户端的连接丢失。
  2. 通过建立一次连接可以将全部数据包传输完成，优化了数据包大小和网络消耗。
Weblogic T3协议和http以及其他几个协议的端口是共用的：
Weblogic会检测请求为哪种协议，然后路由到正确的位置。
##### 查看Weblogic默认注册的远程对象
Weblogic服务已经注册了一些远程对象，写一个测试下(参考了[这篇文章](https://www.oreilly.com/library/view/weblogic-the-definitive/059600432X/ch04s03.html)[5]中的部分代码，代码放到[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)了，运行`weblogic-rmi-client/src/main/java/com/longofo/weblogicrmi/Client`即可，注意修改其中IP和Port)，在JDK
1.6.0_29测试通过：
    //Client.java
    package com.longofo.weblogicrmi;
    import com.alibaba.fastjson.JSON;
    import weblogic.rmi.extensions.server.RemoteWrapper;
    import javax.naming.*;
    import java.io.IOException;
    import java.util.HashMap;
    import java.util.Hashtable;
    import java.util.Map;
    public class Client {
        /**
         * 列出Weblogic有哪些可以远程调用的对象
         */
        public final static String JNDI_FACTORY = "weblogic.jndi.WLInitialContextFactory";
        public static void main(String[] args) throws NamingException, IOException, ClassNotFoundException {
            //Weblogic RMI和Web服务共用7001端口
            //可直接传入t3://或者rmi://或者ldap://等，JNDI会自动根据协议创建上下文环境
            InitialContext initialContext = getInitialContext("t3://192.168.192.135:7001");
            System.out.println(JSON.toJSONString(listAllEntries(initialContext), true));
            //尝试调用ejb上绑定的对象的方法getRemoteDelegate
            //weblogic.jndi.internal.WLContextImpl类继承的远程接口为RemoteWrapper，可以自己在jar包中看下，我们客户端只需要写一个包名和类名与服务器上的一样即可
            RemoteWrapper remoteWrapper = (RemoteWrapper) initialContext.lookup("ejb");
            System.out.println(remoteWrapper.getRemoteDelegate());
        }
        private static Map listAllEntries(Context initialContext) throws NamingException {
            String namespace = initialContext instanceof InitialContext ? initialContext.getNameInNamespace() : "";
            HashMap map = new HashMap();
            System.out.println("> Listing namespace: " + namespace);
            NamingEnumeration list = initialContext.list(namespace);
            while (list.hasMoreElements()) {
                NameClassPair next = list.next();
                String name = next.getName();
                String jndiPath = namespace + name;
                HashMap lookup = new HashMap();
                try {
                    System.out.println("> Looking up name: " + jndiPath);
                    Object tmp = initialContext.lookup(jndiPath);
                    if (tmp instanceof Context) {
                        lookup.put("class", tmp.getClass());
                        lookup.put("interfaces", tmp.getClass().getInterfaces());
                        Map entries = listAllEntries((Context) tmp);
                        for (Map.Entry entry : entries.entrySet()) {
                            String key = entry.getKey();
                            if (key != null) {
                                lookup.put(key, entries.get(key));
                                break;
                            }
                        }
                    } else {
                        lookup.put("class", tmp.getClass());
                        lookup.put("interfaces", tmp.getClass().getInterfaces());
                    }
                } catch (Throwable t) {
                    lookup.put("error msg", t.getMessage());
                    Object tmp = initialContext.lookup(jndiPath);
                    lookup.put("class", tmp.getClass());
                    lookup.put("interfaces", tmp.getClass().getInterfaces());
                }
                map.put(name, lookup);
            }
            return map;
        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
结果如下：
    > Listing namespace: 
    > Looking up name: weblogic
    > Listing namespace: 
    > Looking up name: HelloServer
    > Looking up name: ejb
    > Listing namespace: 
    > Looking up name: mgmt
    > Listing namespace: 
    > Looking up name: MEJB
    > Looking up name: javax
    > Listing namespace: 
    > Looking up name: mejbmejb_jarMejb_EO
    {
        "ejb":{
            "mgmt":{
                "MEJB":{
                    "interfaces":["weblogic.rmi.internal.StubInfoIntf","javax.ejb.EJBHome","weblogic.ejb20.interfaces.RemoteHome"],
                    "class":"weblogic.management.j2ee.mejb.Mejb_dj5nps_HomeImpl_1036_WLStub"
                },
                "interfaces":["weblogic.jndi.internal.WLInternalContext","weblogic.rmi.extensions.server.RemoteWrapper","java.io.Externalizable"],
                "class":"weblogic.jndi.internal.WLContextImpl"
            },
            "interfaces":["weblogic.jndi.internal.WLInternalContext","weblogic.rmi.extensions.server.RemoteWrapper","java.io.Externalizable"],
            "class":"weblogic.jndi.internal.WLContextImpl"
        },
        "javax":{
            "error msg":"User  does not have permission on javax to perform list operation.",
            "interfaces":["weblogic.jndi.internal.WLInternalContext","weblogic.rmi.extensions.server.RemoteWrapper","java.io.Externalizable"],
            "class":"weblogic.jndi.internal.WLContextImpl"
        },
        "mejbmejb_jarMejb_EO":{
            "interfaces":["weblogic.rmi.internal.StubInfoIntf","javax.ejb.EJBObject"],
            "class":"weblogic.management.j2ee.mejb.Mejb_dj5nps_EOImpl_1036_WLStub"
        },
        "HelloServer":{
            "interfaces":["weblogic.rmi.internal.StubInfoIntf","com.longofo.weblogicrmi.IHello"],
            "class":"com.longofo.weblogicrmi.HelloImpl_1036_WLStub"
        },
        "weblogic":{
            "error msg":"User  does not have permission on weblogic to perform list operation.",
            "interfaces":["weblogic.jndi.internal.WLInternalContext","weblogic.rmi.extensions.server.RemoteWrapper","java.io.Externalizable"],
            "class":"weblogic.jndi.internal.WLContextImpl"
        }
    }
    ClusterableRemoteRef(-657761404297506818S:192.168.192.135:[7001,7001,-1,-1,-1,-1,-1]:base_domain:AdminServer NamingNodeReplicaHandler (for ejb))/292
在Weblogic控制台，我们可以通过JNDI树看到上面这些远程对象：
**注：下面这一段可能省略了一些过程，我也不知道具体该怎么描述，所以会不知道我说的啥，可以跳过，只是一个失败的测试**
在客户端的RemoteWrapper中，我还写了一个readExternal接口方法，远程对象的RemoteWrapper接口类是没有这个方法的。但是`weblogic.jndi.internal.WLContextImpl`这个实现类中有，那么如果在本地接口类中加上readExternal方法去调用会怎么样呢？由于过程有点繁杂，很多坑，做了很多代码替换与测试，我也不知道该怎么具体描述，只简单说下：
1.直接用T3脚本测试
使用JtaTransactionManager这条利用链，用T3协议攻击方式在未打补丁的Weblogic测试成功，打上补丁的Weblogic测试失败，在打了补丁的Weblogic上JtaTransactionManager的父类AbstractPlatformTransactionManager在黑名单中，Weblogic黑名单在`weblogic.utils.io.oif.WebLogicFilterConfig`中。
2.那么根据前面Java RMI那种恶意利用方式能行吗，两者只是传输协议不一样，利用过程应该是类似的，试下正常调用readExternal方式去利用行不行？
这个测试过程实在不知道该怎么描述，测试结果也失败了，如果调用的方法在远程对象的接口上也有，例如上面代码中的`remoteWrapper.getRemoteDelegate()`，经过抓包搜索"getRemoteDelegate"发现了有bind关键字，调用结果也是在服务端执行的。但是如果调用了远程接口不存在的方法，比如`remoteWrapper.readExternal()`，在流量中会看到"readExternal"有unbind关键字，这时就不是服务端去处理结果了，而是在本地对应类的方法进行调用（比如你本地存在`weblogic.jndi.internal.WLContextImpl`类，会调用这个类的readExternal方法去处理），如果本地没有相应的类就会报错。当时我是用的JtaTransactionManager这条利用链，我本地也有这个类...所以我在我本地看到了计算器弹出来了，要不是使用的虚拟机上的Weblogic进行测试，我自己都信了，自己造了个洞。（
**说明**
：readExternal的参数ObjectOutput类也是不可序列化的，当时自己也没想那么多...后面在Weblogic上部署了一个远程对象，参数我设置的是ObjectInputStream类，调用时才发现不可序列化错误，虽然之前也说过RMI传输是基于序列化的，那么传输的对象必须可序列化，但是写着就忘记了）
想想自己真的很天真，要是远程对象的接口没有提供的方法都能被你调用了，那不成了RMI本身的漏洞吗。并且这个过程和直接用T3脚本是类似的，都会经过Weblogic的ObjectInputFilter过滤黑名单中的类，就算能成功调用readExternal，JtaTransactionManager这条利用链也会被拦截到。
上面说到的Weblogic部署的远程对象的例子根据[这篇文章](https://paper.seebug.org/1012/#weblogic-rmi)[2]做了一些修改，代码在[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上了，将`weblogic-rmi-server/src/main/java/com/longofo/weblogicrmi/HelloImpl`打包为Jar包部署到Weblogic，然后运行`weblogic-rmi-client/src/main/java/com/longofo/weblogicrmi/Client1`即可，注意修改其中的IP和Port，在JDK
1.6.0_29测试通过。
##### 正常Weblogic RMI调用与模拟T3协议进行恶意利用
之前都是模拟T3协议的方式进行恶意利用，来看下不使用T3脚本攻击的方式（找一个远程对象的有参数的方法，我使用的是`weblogic.management.j2ee.mejb.Mejb_dj5nps_HomeImpl_1036_WLStub#remove(Object
obj)`方法），它对应的命名为`ejb/mgmt/MEJB`，其中一个远程接口为`javax.ejb.EJBHome`，测试代码放到[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上了，先使用`ldap/src/main/java/LDAPRefServer`启动一个ldap服务，然后运行`weblogic-rmi-client/src/main/java/com/longofo/weblogicrmi/Payload1`即可复现，注意修改Ip和Port。
在没有过滤AbstractPlatformTransactionManager类的版本上，使用JtaTransactionManager这条利用链测试，
在过滤了AbstractPlatformTransactionManager类的版本上使用JtaTransactionManager这条利用链测试，
可以看到通过正常的调用RMI方式也能触发，不过相比直接用T3替换传输过程中的反序列化数据，这种方式利用起来就复杂一些了，关于T3模拟的过程，可以看下[这篇文章](https://paper.seebug.org/1012/#weblogic-rmi)[2]。Java RMI默认使用的JRMP传输，那么JRMP也应该和T3协议一样可以模拟来简化利用过程吧。
#### 小结
从上面我们可以了解到以下几点：
  1. RMI标准实现是Java RMI，其他实现还有Weblogic RMI、Spring RMI等。
  2. RMI的调用是基于序列化的，一个对象远程传输需要序列化，需要使用到这个对象就需要从序列化的数据中恢复这个对象，恢复这个对象时对应的readObject、readExternal等方法会被自动调用。
  3. RMI可以利用服务器本地反序列化利用链进行攻击。
  4. RMI具有动态加载类的能力以及能利用这种能力进行恶意利用。这种利用方式是在本地不存在可用的利用链或者可用的利用链中某些类被过滤了导致无法利用时可以使用，不过利用条件有些苛刻。
  5. 讲了Weblogic RMI和Java RMI的区别，以及Java RMI默认使用的专有传输协议（或者也可以叫做默认协议）是JRMP，Weblogic RMI默认使用的传输协议是T3。