0.8
0.6
0.4
0.2
0
1
3
5
7
Distance Between Victim and Malicious Node
Figure 2: Damage vs. Distance from Malicious
Node in a Cycle Topology
In summary, there are two types of damage that are
caused by the malicious node. Structural damage is
caused because a malicious node does not process or
forward queries itself. When the malicious node is one
hop away from the victim, the structural damage is 0.5
one hop away since the malicious node does not process
any of the victim’s queries. A second type of damage,
ﬂood damage, is caused by the traﬃc that the malicious
node creates. When the malicious node is one hop away,
and we are using a Proportional DS, there is ﬂood dam-
age that occurs at the good node that is one hop away.
Due to the malicious query traﬃc that is forwarded to
the good node, the good node cannot process all of the
victim’s queries. The ﬂood damage in this case is 0.11.
190e
g
a
m
a
D
l
i
a
d
a
R
e
v
i
t
l
a
u
m
u
C
1
0.8
0.6
0.4
0.2
0
0
1
d = 1
d = 3
d = 5
d = 7
2
3
4
5
6
7
Number of hops from victim node (h)
Figure 3: Damage Distribution for a Cycle with
Weighted/Proportional IAS/DS
e
g
a
m
a
D
i
l
a
d
a
R
e
v
i
t
a
u
m
u
C
l
1
0.8
0.6
0.4
0.2
0
0
1
d = 1
d = 3
d = 5
d = 7
2
3
4
5
6
7
Number of hops from victim node (h)
Figure 4: Damage Distribution for a Cycle with
Fractional/Equal IAS/DS
Looking at Figure 4, we can see that by switching from
a Weighted/Proportional IAS/DS to a Fractional/Equal
IAS/DS, we are able to avoid ﬂood damage, and we are
only left with structural damage. In particular, when the
Equal DS policy is used, the good node that is one hop
away processes one of the victim’s queries for each of the
malicious node’s queries before it uses all its remaining
query bandwidth to service additional queries from the
malicious node. Therefore, all of the victim’s queries are
processed at the good node, and the only damage that
the victim suﬀers one hop away is structural.
By analyzing damage distribution, we are able to see
that good policies (in particular, the Fractional/Equal
IAS/DS) are able to contain ﬂood damage. However,
other mechanisms need to be developed to contain struc-
tural damage. Malicious nodes need to be detected and
disconnected to deal with structural damage.
6. RELATED WORK
Most denial-of-service research to date has focused on
network-layer attacks [16, 33, 34, 22, 32, 7, 29, 8, 1, 19,
9, 18, 2, 38, 20]. There have been mutliple proposals
to build IP Traceback mechanisms to manage network-
layer DoS attacks including [33] and [31].
Osokine [21] proposes a Q-algorithm intended for solv-
ing traﬃc management problems in Gnutella, but the
algorithm could also be used to address DoS attacks.
Rohrs [27] proposes a simpliﬁed version of Osokine’s
work that has been implemented in the LimeWire Gnutella
client. No evaluation has been published on either pro-
posal.
Some of the policies we propose to use to manage
query ﬂoods are similar to those that have been used
in link scheduling for years [40]. Algorithms such as
weighted fair queuing (WFQ) have been shown to opti-
mally allocate a fair share of link bandwidth with respect
to weights. We could use WFQ to manage query ﬂow in
Gnutella nodes, but we would still need to decide on how
to choose weights to minimize the damage from DoS at-
tacks. The IASs that we use in our work can be viewed
as choosing diﬀerent weights for incoming query ﬂows.
A lot of security-related research that has taken place
in the P2P area has focused on providing anonymity to
users
[26, 6, 14] and ensuring fair resource allocation
via micropayments or reputation schemes [15, 12, 25].
Other research in the area of P2P systems has focused
on eﬃcient search, routing, and indexing [35, 24, 28,
39, 5, 4, 36, 37].
7. CONCLUSION
Gnutella networks are highly susceptible to application-
layer, ﬂooding-based DoS attacks if good load balancing
policies are not employed by nodes on the network. In
this paper, we have taken a ﬁrst step towards deﬁning
a model and metrics to measure the damage that a ma-
licious node can cause with query ﬂooding. Through
simulations on small representative networks, we deter-
mined how damage can be minimized with load balanc-
ing policies, how damage varies as a function of network
topology, and how damage is distributed.
8. REFERENCES
[1] Cert advisory ca-2000-01 denial-of-service
developments. http://www.cert.org/ advisories/
CA-2000-01.html, January 2000.
[2] Edward Amoroso. A policy model for denial of service.
In Proc. Computer Security Foundations Workshop
III, pages 110–114, Franconia, NH USA, June 1990.
IEEE Computer Society Press.
[3] Icmp traceback messages. http://www. silicondefense.
com/ research/ itrex/ archive/ tracing-papers/
draft-bellovin-itrace-00.txt.
[4] Arturo Crespo and Hector Garcia-Molina. Routing
indexes for peer-to-peer systems. Technical report,
Stanford Univ., CS Dept., 2001.
[5] David Ratajczak, Dahlia Malkhi, Moni Naor. Viceroy:
A scalable and dynamic lookup network. Proc. ACM
PODC ’02, August 2002.
[6] R. Dingledine, M. Freedman, and D. Molnar. The free
haven project: distributed anonymous storage service.
191Proc. of the Workshop on Design Issues in Anonymity
and Unobservability, Berkeley, CA, USA. Springer:
New York (2001)., 2001.
[7] P. Ferguson and D. Senie. Network ingress ﬁltering:
Defeating denial of service attacks which employ ip
source address spooﬁng. In IETF RFC 2267, 1998.
[8] Lee Garber. Denial-of-service attacks rip the internet.
Computer, pages 12-17, April 2000.
[9] E.A. Hyden. Operating system support for quality of
service. Ph.D. Thesis, University of Cambridge, 1994.
[10] Kazaa home page. http://www.kazaa.com/.
[11] Angelos D. Keromytis, Vishal Misra, and Dan
Rubenstein. Secure overlay services. In Proc. of the
ACM SIGCOMM Conference, August 2002.
[12] R. Lethin. Reputation. In Peer-to-peer: Harnessing the
power of disruptive technologies. ed. Andy Oram,
O’Reilly and Associates, March 2001.
[13] Limewire home page. http://www.limewire.com/.
[14] Aviel D. Rubin, Marc Waldman, and Lorrie Faith
Cranor. Publius: A robust, tamper-evident,
censorship-resistant, web publishing system. In Proc.
9th USENIX Security, August 2000.
[15] Mojo nation technical overview home page.
http://www.mojonation.net/ docs/
technical overview.shtml.
[16] D. Moore, G. Voelker, and S. Savage. Inferring internet
denial of service activity. In Proc. 2001 USENIX
Security, Washington D.C., August 2001.
[17] Morpheus home page. http://www.musiccity.com.
[18] R. M. Needham. Denial of service. In Proc. 1st ACM
CCS, pg 151–153, Fairfax, Virginia, November 1993.
[19] Roger M. Needham. Denial of service: an example.
Comm. of the ACM, 37(11):42–46, 1994.
[20] Peter G. Neumann. Inside risks: denial-of-service
attacks. Comm. of the ACM, 43(4):136–136, 2000.
[21] Flow control algorithm for distributed
’broadcast-route’ networks with reliable transport
links. http://www.grouter.net/ gnutella/ ﬂowcntl.htm.
[22] T. Ptacek and T. Newsham. Insertion, evasion, and
denial of service: Eluding network intrusion detection.
Technical report, Secure Networks, Inc., January 1998.
[23] N. Daswani and H. Garcia-Molina. Query-ﬂood DoS
Attacks in Gnutella Networks (Extended Version).
Technical Report, Stanford Univ. CS Dept.
[24] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and
S. Shenker. A scalable content-addressable network.
ACM SIGCOMM, 2001.
[25] Reputation technologies home page.
http://reputation.com.
[26] R. Dingledine. The free haven project: Design and
deployment of an anonymous secure data haven. MIT
Masters Thesis May 2000.
[27] Sachrifc: Simple ﬂow control for gnutella.
http://www.limewire.com/ developer/ sachrifc.html.
[28] A. Rowstron, P. Druschel. Pastry: Scalable distributed
object location and routing for largescale peer-to-peer
systems. In Proc. IFIP/ACM Middleware, Heidelberg,
Germany, November 2001.
[29] C. L. Schuba, I. V. Krsul, M. G. Kuhn, E. H. Spaﬀord,
A. Sundaram, and D. Zamboni. Analysis of a denial of
service attack on TCP. In Proc. 1997 IEEE
Symposium on Security and Privacy, pages 208–223.
IEEE Computer Society Press, May 1997.
[30] Ultrapeers: Another step towards gnutella scalability.
http://groups.yahoo.com/ group/ the gdf/ ﬁles/
Proposals/ Ultrapeer/ Ultrapeers.html.
[31] A. C. Snoeren, C. Partridge, L. A. Sanchez, C. E.
Jones, F. Tchakountio, S. T. Kent, and W. T. Strayer.
Hash-based ip traceback. In Proc. of the ACM
SIGCOMM 2001 Conference on Applications,
Technologies, Architectures, and Protocols for
Computer Communication, August 2001., 2001.
[32] O. Spatscheck and L. L. Peterson. Defending against
denial of service attacks in scout. In Operating Systems
Design and Implementation, pages 59–72, 1999.
[33] A. Karlin, S. Savage, D. Wetherall, and T. Anderson.
Network support for ip traceback. In ACM/IEEE
Transactions on Networking, 9(3), June 2001.
[34] A. Karlin, S. Savage, D. Wetherall and T. Anderson.
Practical network support for ip traceback. In Proc.
2000 ACM SIGCOMM Conference, Stockholm,
Sweden, August 2000.
[35] I. Stoica, R. Morris, D. Karger, M. Kaashoek, and
H. Balakrishnan. Chord: A scalable peer-to-peer
lookup service for internet applications. Technical
Report TR-819, MIT, March 2001.
[36] B. Yang and H. Garcia-Molina. Designing a super-peer
network. Submitted for publication.
[37] Beverly Yang and Hector Garcia-Molina. Eﬃcient
search in peer-to-peer networks. Technical report,
Stanford Univ., CS Dept., 2001.
[38] C. Yu and V. Gligor. A formal speciﬁcation and
veriﬁcation method for the prevention of denial of
service. In Proc. 1988 IEEE Symposium on Security
and Privacy, pages 187–202, Oakland, CA. IEEE
Computer Society Press. 117, 1988.
[39] B. Zhao, J. Kubiatowicz, and A. Joseph. Tapestry: An
infrastructure for fault-resilient wide-area location and
routing. Technical Report UCB//CSD-01-1141, U. C.
Berkeley, April 2001.
[40] L. Peterson and B. Davie. Computer Networks: A
Systems Approach. Morgan Kaufman: SF (2000).
APPENDIX
A. OPTIMAL RHO PROOF
Theorem A.1. Optimal Rho (ˆρ) for Symmetric Net-
works. Suppose that for all nodes j ∈ V have cj = C for
some constant C > 0, |D(j, τ )| = D for some constant
D > 0, and all nodes have ρ set to the same value, then
ˆρ = 1/(D + 1).
Proof. Let ˆρ be the setting of ρ that maximizes the
total remote work. We assume that the local work pro-
cessed at a node is exactly (and no less than) ρC. The
maximum possible amount of remote work that can be
processed at that node is (1 − ρ)C. In the steady state,
each node j is sent at most |δ(j, i)|ρC queries that were
generated i time steps ago at a node that is i hops
away, 1 ≤ i ≤ τ . Hence, the maximum total amount
of work that may arrive at a node is Στ
i=1|δ(j, i)|ρC =
|D(j, τ )|ρC = DρC.
We say that a node is saturated if the amount of re-
mote work it receives exceeds (1 − ρ)C. A node receives
less than DρC remote work if some of the nodes that it
receives work from are saturated.
No node can be saturated until the point when the
maximum possible load DρC is greater than (1 − ρ)C,
i.e. until ρ > 1/(D+1). Thus, if ρ  1/(D + 1),
the remote work is limited by (1 − ρ)C, so ρ = 1/(D + 1)
is the optimal value.
192