    eax=0018fd78 ebx=00000000 ecx=00291280 edx=00000001 esi=00425770 edi=00000000
    eip=718fba06 esp=0018fd54 ebp=0018fdbc iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    EPSIMP32!RegisterPercentCallback+0x4604:
    718fba06 e8d8abffff      call    deferred_exec (718f65e3)
    0:000> dd eax L4        //查看传入的参数为数组
    0018fd78  00030000 00000000 0049ea98 0048f40c
    0:000> dd poi(poi(poi(poi(poi( 0018fd78 +c))+24))+28)   //查看数组中存储的内容
    0049e2c0  00000500 00000100 00495408 0048ee98           //数组中存放着字符串对象
    0049e2d0  12d85688 8000f194 00000020 00000100
    0049e2e0  0049dc40 0048f198 12d8568f 80000000
    0049e2f0  00490023 000007c8 00000300 00000100
    0049e300  12d856b2 8000f19c 00000026 00000100
    0049e310  0049dc60 0048f1a0 12d856b1 80000100
    0049e320  00420029 0048f1a4 00000003 00000000
    0049e330  12d856b4 80000080 0000002c 00000100
    0:000> db poi(poi(poi(poi(poi( 0049e2c0 +c))+24))+20) L10   //查看字符串的内容为l56 cvx exec
    00495940  20 6c 35 36 20 63 76 78-20 65 78 65 63 20 00 00   l56 cvx exec ..
    0:000> g        //第二次执行deferred_exec
    (5c8.144): C++ EH exception - code e06d7363 (first chance)
    (5c8.144): C++ EH exception - code e06d7363 (first chance)
    Breakpoint 1 hit
    eax=0018fd78 ebx=00000000 ecx=00291280 edx=00000003 esi=00425770 edi=00000001
    eip=718fba06 esp=0018fd54 ebp=0018fdbc iopl=0         nv up ei pl nz na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    EPSIMP32!RegisterPercentCallback+0x4604:
    718fba06 e8d8abffff      call    EPSIMP32+0x265e3 (718f65e3)
    0:000> dd poi(poi(poi(poi(poi( 0018fd78 +c))+24))+28)   //查看数组的内容
    0049e2c0  00000500 00000100 00495438 0048eeac           //数组中存放着字符串对象
    0049e2d0  12d85688 8000f194 00000020 00000100
    0049e2e0  0049dc40 0048f198 12d8568f 80000000
    0049e2f0  00490023 000007c8 00000300 00000100
    0049e300  12d856b2 8000f19c 00000026 00000100
    0049e310  0049dc60 0048f1a0 12d856b1 80000100
    0049e320  00420029 0048f1a4 00000003 00000000
    0049e330  12d856b4 80000080 0000002c 00000100
    0:000> db poi(poi(poi(poi(poi( 0049e2c0 +c))+24))+20) L10   //查看字符串的内容为l53 cvx exec
    00495958  20 6c 35 33 20 63 76 78-20 65 78 65 63 20 00 00   l53 cvx exec ..
从调试的结果可以得知，该函数执行的正是forall。在第一次执行时，l61中待执行的命令是`l56 cvx
exec`，在第二次执行时，l61中的内容已经被换成了`l53 cvx exec`与调试结果相符。
接着深入函数分析，发现函数内部嵌套了deferred_exec：
于是重新调试，下断在此，分析参数：
虽然type为0x10的操作符对象存储在Systemdict中无法查看，但是通过其他字符和数字还是能够确定该语句就是l50。当执行该语句后，原本l63指向的string结构将被替换成存放l52内容的string结构：
可以看到此时原本存放l63的string结构已经变成了l52。
在get函数下断，跳转到forall下的`/l64 l57 56 get def`语句查看l57的值：
可以证实l57中存放的就是从l63中获取到的字符，该forall的作用就是泄露被释放的string结构指向的字符串。
接着获取l57中的值，并进行一些处理，通过ifelse判断系统位数，若l77等于l52的长度+1，那么l99的值为1代表系统为64位，否则l99为0，代表系统为32位：
可以看到在32位的调试环境下，l77的值为0，因此会将5个0压入操作栈中，并赋值给l95到l99：
至此，漏洞原理部分分析完毕，接下来分析漏洞利用部分。
## 漏洞利用
第二次执行forall代码如下：
和第一次执行十分类似，因此就不深入分析。查看执行完forall后stringl63的变化：
查看l63中的值，发现是一个string结构，于是查看字符串，内容正是l102中存储的l36的字符串
接着通过`l90 0 l92 putinterval`将l63中指向的第一个4字节的内容改为0x02b14ad4，该值指向l36中四字节之后的内容
经过多次修改，字符串修改为如下状态，修改的值会在第三次漏洞触发时使用到：
接着查看l137获取的是l63中0x4处的值，l138获取的是l63中0x20处的值，l103的值为1
第二次漏洞触发部分分析完毕，接下分析第三次漏洞触发构造读写原语的部分。
### 构造读写原语
l142中存储的是将l138放入到l193的0x24位置的后的字符串：
接着使用forall操作符遍历l63数组，当遍历到第54个元素时，恢复快照。此时array l63被释放，接着复制 l142字符串，使得array
l63对象被l142字符串对象覆盖：
此时查看被覆盖后的l63中最后一次会被获取的值：
说明最后一次会获取一个array对象，继续深入查看该对象发现存储了一个字符串，该字符串起始地址为0x00000000，大小为0x7fffffff：
通过该字符串，可读写内存中0x00000000-0x7fffffff的任意地址，实现了读写原语的构造，最终将字符串对象存储在l201中。
### 构建ROP链
通过字符串l201获取EPSIMP32的基地址为：0x74750000，并存入l314中：
接着通过EPSIMP32的导入表获取kernel32.dll的基地址并存放于l315中：
随后开始利用读写原语搜索内存中的gadget用于构造ROP链：
将构造好的ROP链放入伪造的文件对象中，并将对象放置在l159的2号元素中，将恶意pe文件和shellcode组成的字符串放置在l159的3号元素中：
最终调用closefile操作符关闭伪造的文件对象，在关闭过程中会执行`call [eax+8]`使得跳转到构造好的ROP链中：
至此，整个漏洞的原理和利用分析完毕，剩下的行为部分不再分析。
## 总结
该样本漏洞利用的十分巧妙，通过UAF将原本正常的数组对象替换为指向构造好的能够读写任意内存的字符串对象。通过字符串对象实现了读写任意内存并构造ROP链的目的，并最终将构造好的ROP字符串对象修改为文件对象，利用cloasefile操作符跳转到ROP链中。
尽管微软已经关闭了Office对于EPS文件的支持，但该格式文件仍然能被Adobe
Illustrator打开，如果深入研究该类型文件可能仍有出现漏洞的可能。
## 参考链接
[1] [PostScript LANGUAGE
REFERENCE](https://www.adobe.com/content/dam/acom/en/devnet/actionscript/articles/PLRM.pdf)
[2] [eps-CVE-2017-0261](https://github.com/kcufId/eps-CVE-2017-0261)
[3] [CVE-2017-0261及利用样本分析](https://bbs.pediy.com/thread-261442.htm)
[4] [EPS Processing Zero-Days Exploited by Multiple Threat
Actors](https://www.fireeye.com/blog/threat-research/2017/05/eps-processing-zero-days.html)
* * *