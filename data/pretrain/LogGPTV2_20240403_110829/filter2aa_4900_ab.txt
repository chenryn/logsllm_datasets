.I posix
模式.
.PP
当
.B bash
以
.I posix
模式启动时,(和使用
.B \-\-posix
命令行参数效果相同),它遵循 POSIX 标准.
这种模式下,交互式 shell 扩展
.SM
.B ENV
环境变量的值,读取并执行以扩展后值为文件名的配置文件.
不会读取其他文件.
.PP
.B Bash
试着检测它是不是由远程 shell 守护程序,通常为 \fIrshd\fP 启动的.如果
.B bash
发现它是由 \fIrshd\fP 启动的,它将读取并执行 \fI~/.bashrc\fP 文件中的命令,
只要这个文件存在并且可读.如果以 \fBsh\fP 命令启动,它不会这样做.
选项
.B \-\-norc
可以用来阻止这种行为,选项
.B \-\-rcfile
用来强制读取另一个文件,但是通常 \fIrshd\fP 不会允许它们,
或者用它们来启动 shell.
.PP
如果 shell 是以与真实用户(组) id 不同的有效用户(组) id 来启动的,
并且没有 \fB\-\fP 选项,那么它不会读取启动文件, 
也不会从环境中继承 shell 函数. 环境变量中如果出现
.SM
.B SHELLOPTS，
它将被忽略.有效用户 id 将设置为真实用户 id.
如果启动时给出了 \fB\-\p\fP 选项,那么启动时的行为是类似的,
但是不会重置有效用户 id.
.SH "定义(DEFINITIONS)"
.PP
下列定义在文档余下部分中通用.
.PD 0
.TP
.B blank 空白
一个空格或是 tab .
.TP
.B word 词
一个字符序列, shell 将它们视为一个结构单元. 也称为一个 
.BR token 片段。
.TP
.B name 名称
一个只由字母,数字和下划线构成的词,并且以字符或下划线起始. 也称为一个
.I word 
.BR identifier 标识符.
.TP
.B metacharacter 元字符
一个字符, 如果不是引用的话, 将成为词的分隔符. 它是如下字符之一:
.br
.RS
.PP
.if t \fB|  &  ;  (  )    space  tab\fP
.if n \fB|  & ; ( )  space tab\fP
.RE
.PP
.TP
.B control operator 控制操作符
一个 \fItoken\fP(标识), 拥有控制功能. 它是如下符号之一:
.RS
.PP
.if t \fB\(bv\(bv  &  &&  ;  ;;  (  )  |  \fP
.if n \fB|| & && ; ;; ( ) | \fP
.RE
.PD
.SH 保留字("RESERVED WORDS")
\fIReserved words\fP(保留字) 是对 shell 有特殊意义的词.
下列词被识别为保留的, 如果不是引用, 并且不是一个简单命令的起始词 (参见下面的
.SM
.B shell语法("SHELL GRAMMAR")
), 也不是
.B case 
或者
.B for
命令的第三个词:
.if t .RS
.PP
.B
.if n ! case  do done elif else esac fi for function if in select then until while { } time [[ ]]
.if t !    case    do    done    elif    else    esac    fi    for    function    if    in    select    then    until    while    {    }    time    [[    ]]
.if t .RE
.RE
.SH shell语法("SHELL GRAMMAR")
.SS Simple Commands 简单命令
.PP
\fIsimple command\fP(简单命令) 是(可选的)一系列变量赋值, 紧接着是
\fBblank\fP(空格) 分隔的词和重定向, 然后以一个 \fIcontrol operator\fP 结束.
第一个词指明了要执行的命令, 它被作为第 0 个参数. 其余词被作为这个命令的参数.
.PP
\fIsimple command\fP 简单命令的返回值是它的退出状态, 或是 128+\fIn\^\fP, 如果命令被 signal(信号) 
.IR n
结束的话.
.SS Pipelines 管道
.PP
\fIpipeline\fP(管道) 是一个或多个命令的序列，用字符
.BR | 
分隔。管道的格式是这样:
.RS
.PP
[\fBtime\fP [\fB\-p\fP]] [ ! ] \fIcommand\fP [ \fB|\fP \fIcommand2\fP ... ]
.RE
.PP
命令
.I command
的标准输出通过管道连接到命令
.IR command2
的标准输入。连接是在命令指定的任何重定向之前进行的(参见下面的
.SM
.B REDIRECTION 重定向)。
.PP
如果保留字
.B !
作为管道前缀，管道的退出状态将是最后一个命令的退出状态的逻辑非值。
否则，管道的退出状态就是最后一个命令的。
shell 在返回退出状态值之前，等待管道中的所有命令返回。
.PP
如果保留字
.B time
作为管道前缀，管道中止后将给出执行管道耗费的用户和系统时间。
选项 \fB\-p\fP 将使输出符合 POSIX 指定的格式。
环境变量
.SM
.B TIMEFORMAT
可以设置为一个格式字符串，指定时间信息应当如何显示；参见下面的
.B "Shell Variables" 环境变量
中
.SM
.B TIMEFORMAT
的讲述。
.PP
管道中的每个命令都作为单独的进程来执行(即，在一个子 shell 中启动)。
.SS Lists 序列
.PP
\fIlist\fP(序列)是一个或多个管道，用操作符
.BR ; ,
.BR & ,
.BR && ,
或
.BR \(bv\(bv 
分隔的序列, 并且可以选择用
.BR ; ,
.BR & ,
或
.BR  新行符结束.
.PP
这些序列操作符中，
.B &&
和
.B \(bv\(bv
优先级相同，其次是
.B ;
和
.BR &,
它们的优先级是相同的。
.PP
序列中可以有一个或多个新行符来分隔命令，而不是使用分号分隔。
.PP
如果一个命令是由控制操作符
.BR & 
结束的, shell 将在后台的子 shell 中执行这个命令。
shell 不会等待命令执行结束，返回状态总是 0。以分号
.B ;
分隔的命令会被顺序执行；shell 会等待每个命令依次结束。返回状态是最后执行的命令的返回状态。
.PP
控制操作符
.B &&
和
.B \(bv\(bv
分别代表 AND 和 OR 序列。一个 AND 序列的形式是
.RS
.PP
\fIcommand1\fP \fB&&\fP \fIcommand2\fP
.RE
.PP
.I command2
只有在
.I command1
返回 0 时才被执行。
.PP
一个 OR 序列的形式是
.RS
.PP
\fIcommand1\fP \fB\(bv\(bv\fP \fIcommand2\fP
.PP
.RE
.PP
.I command2
只有在
.I command1
返回非 0 状态时才被执行。AND 和 OR 序列的返回状态是序列中最后执行的命令的返回状态。
.SS Compound Commands 复合命令
.PP
\fIcompound command\fP(复合命令) 是如下情况之一：
.TP
(\fIlist\fP)
\fIlist\fP 序列将在一个子 shell 中执行。变量赋值和影响 shell 环境变量的内建命令在命令结束后不会再起作用。
返回值是序列的返回值。
.TP
{ \fIlist\fP; }
\fIlist\fP 序列将在当前 shell 环境中执行。序列必须以一个新行符或分号结束。
这种做法也称为 \fIgroup command\fP(命令组)。返回值是序列的返回值。注意与元字符 \fB(\fP 和 \fB\)\fP 不同，
\fB{\fP 和 \fB}\fP 是 \fIreserved words\fP(保留字)，必须出现在能够识别保留字的场合。
由于它们不会产生断词(cause a word break)，它们和序列之间必须用空格分开。
.TP
((\fIexpression\fP))
表达式 \fIexpression\fP 将被求值。求值规则在下面的
.SM
.BR "算术求值 (ARITHMETIC EVALUATION)" 
章节中描述。如果表达式的值非零，返回值就是 0；否则返回值是 1。这种做法和
\fBlet "\fIexpression\fP"\fR
等价。
.TP
\fB[[\fP \fIexpression\fP \fB]]\fP
返回 0 或 1，取决于条件表达式 \fIexpression\fP 求值的情况。
表达式是由下面
.SM
.BR "CONDITIONAL EXPRESSIONS 条件表达式"
章节中描述的原语(primaries) 组成。
\fB[[\fP 和 \fB]]\fP 中的词不会进行词的拆分和路径的扩展处理；
而tilde 扩展，参数和变量扩展，算术扩展，命令替换，函数替换和引用的去除则都将进行。
.if t .sp 0.5
.if n .sp 1
当使用 \fB==\fP 和 \fB!=\fP 操作符时，操作符右边的字符串被认为是一个模式，根据下面
\fBPattern Matching\fP(模式匹配) 章节中的规则进行匹配。
如果匹配则返回值是 0，否则返回 1。模式的任何部分可以被引用，强制使它作为一个字符串而被匹配。
.if t .sp 0.5
.if n .sp 1
表达式可以用下列操作符结合起来。根据优先级的降序列出如下：
.if t .sp 0.5
.if n .sp 1
.RS
.PD 0
.TP
.B ( \fIexpression\fP )
返回表达式 \fIexpression\fP 的值。括号可以用来提升操作符的优先级。
.TP
.B ! \fIexpression\fP
返回真，如果表达式
.I expression
返回假。
.TP
\fIexpression1\fP \fB&&\fP \fIexpression2\fP
返回真，如果表达式
.I expression1
和
.I expression2
都返回真。
.TP
.if t \fIexpression1\fP \fB\(bv\(bv\fP \fIexpression2\fP
.if n \fIexpression1\fP \fB||\fP \fIexpression2\fP
返回真，如果表达式
.I expression1
或者
.I expression2
二者之一返回真。
.PD
.LP
\fB&&\fP(与) 和
.if t \fB\(bv\(bv\fP
.if n \fB||\fP
操作符不会对表达式 \fIexpression2\fP 求值，如果 \fIexpression1\fP 可以决定整个条件表达式的返回值的话。
.RE
.TP
\fBfor\fP \fIname\fP [ \fBin\fP \fIword\fP ] ; \fBdo\fP \fIlist\fP ; \fBdone\fP
\fBin\fP 之后的一系列词会被扩展，产生一个项目列表。变量 \fIname\fP 被依次赋以这个列表中的每个元素，
序列 \fIlist\fP 每次都被执行。如果 \fBin\fP \fIword\fP 被忽略，那么 \fBfor\fP 命令遍历
已设置的位置参数(positional parameter，参见下面的
.SM
.B PARAMETERS 参数)，
为每一个执行一次序列 \fIlist\fP。
返回值是最后一个命令的返回值。如果 \fBin\fP 之后的词扩展的结果是空列表，就不会执行任何命令，返回值是 0。
.TP
\fBfor\fP (( \fIexpr1\fP ; \fIexpr2\fP ; \fIexpr3\fP )) ; \fBdo\fP \fIlist\fP ; \fBdone\fP
首先，算术表达式 \fIexpr1\fP 被根据下面
.SM
.BR "算术求值 (ARITHMETIC EVALUATION)"
中的规则进行求值。
然后算术表达式 \fIexpr2\fP 被循环求值，直到它等于 0。每次 \fIexpr2\fP 结果非零时，序列 \fIlist\fP 都被执行，
算术表达式 \fIexpr3\fP 被求值。如果任何表达式被忽略，将被视为执行结果是 1。
返回值是序列 \fIlist\fP 中被执行的最后一个命令的返回值；或者是 false，如果任何表达式非法的话。
.TP
\fBselect\fP \fIname\fP [ \fBin\fP \fIword\fP ] ; \fBdo\fP \fIlist\fP ; \fBdone\fP
\fBin\fP 之后的一系列词会被扩展，产生一个项目列表。这个扩展后的词集合被输出到标准错误上，每个前面
加上一个数字。如果 \fBin\fP \fIword\fP 被忽略，将输出位置参数 (参见下面的
.SM
.B PARAMETERS 参数
章节)。
.B PS3
提示符将被显示出来，等待从标准输入得到一行输入。如果
输入是一个数字且显示中有对应的词，那么变量
.I name
的值将设置为这个词。如果输入一个空行，那么词和提示符将再次显示出来。如果读入了一个 EOF，命令就结束。
任何其他值将设置变量
.I name
为空。读入的行保存为变量
.BR REPLY .
序列
.I list
在每次选择之后都会执行，直到执行了一个
.B break
命令。
.B select
的退出状态是序列
.IR list 
中执行的最后一个命令的退出状态，如果没有执行命令就是 0。
.TP
\fBcase\fP \fIword\fP \fBin\fP [ [(] \fIpattern\fP [ \fB|\fP \fIpattern\fP ] ... ) \fIlist\fP ;; ] ... \fBesac\fP
\fBcase\fP 命令首先扩展 \fIword\fP, 然后依次试着用每个 \fIpattern\fP 来匹配它，
使用与路径扩展相同的匹配规则(参见下面的
.B Pathname Expansion 路径扩展
章节)。如果找到一个匹配，相应的序列将被执行。找到一个匹配之后，不会再尝试其后的匹配。
如果没有模式可以匹配，返回值是 0。否则，返回序列中最后执行的命令的返回值。
.TP
\fBif\fP \fIlist\fP; \fBthen\fP \fIlist;\fP \
[ \fBelif\fP \fIlist\fP; \fBthen\fP \fIlist\fP; ] ... \
[ \fBelse\fP \fIlist\fP; ] \fBfi\fP
序列
.B if 
.I list
被执行。如果退出状态是 0，\fBthen\fP \fIlist\fP 将被执行。否则，每个 \fBelif\fP
将被一次执行，如果退出状态是 0，相应的 \fBthen\fP \fIlist\fP 将被执行，命令结束。
否则，\fBelse\fP \fIlist\fP 将被执行，如果存在的话。
退出状态是最后执行的命令的退出状态，或者是 0，如果所有条件都不满足。
.TP
\fBwhile\fP \fIlist\fP; \fBdo\fP \fIlist\fP; \fBdone\fP
.PD 0
.TP
\fBuntil\fP \fIlist\fP; \fBdo\fP \fIlist\fP; \fBdone\fP
.PD
\fBwhile\fP 命令不断地执行序列 \fBdo\fP \fIlist\fP，直到序列中最后一个命令返回 0。
\fBuntil\fP 命令和 \fBwhile\fP 命令等价，除了对条件的测试恰好相反；序列
.B do
.I list
执行直到序列中最后一个命令返回非零状态值。
\fBwhile\fP 和 \fBuntil\fP 命令的退出状态是序列 \fBdo\fP \fIlist\fP 中最后一个命令的退出状态，
或者是 0，如果没有执行任何命令。
.TP
[ \fBfunction\fP ] \fIname\fP () { \fIlist\fP; }
这样可以定义一个名为 \fIname\fP 的函数。函数体 \fIbody\fP 是包含在 { 和 } 之间的命令序列 \fIlist\fP。
在指定将 \fIname\fP 作为一个命令运行的场合，这个序列将被执行。
函数的退出状态是函数体最后执行的命令的退出状态(参见下面的
.SM