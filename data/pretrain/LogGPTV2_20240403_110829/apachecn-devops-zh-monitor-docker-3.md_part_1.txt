# 三、高级容器资源分析
在最后一章中，我们研究了如何使用 Docker 内置的 API 来深入了解您的容器正在运行哪些资源。现在，我们来看看如何通过使用谷歌的 cAdvisor 将它提升到一个新的水平。在本章中，您将涵盖以下主题:
*   如何安装 cAdvisor 并开始收集指标
*   了解所有关于网络界面和实时监控的信息
*   您有哪些选项可以将指标发送到远程 Prometheus 数据库进行长期存储和趋势分析
# 什么是 cAdvisor？
谷歌对 cAdvisor 的描述如下:
> *“cAdvisor(Container Advisor)让容器用户了解他们运行的容器的资源使用和性能特征。它是一个正在运行的守护进程，收集、聚合、处理和导出关于正在运行的容器的信息。具体来说，对于每个容器，它保存资源隔离参数、历史资源使用情况、完整的历史资源使用情况直方图和网络统计数据。这些数据由一个容器导出，并且是机器范围的。”*
该项目一开始是作为谷歌的一个内部工具，用于深入了解使用自己的容器栈推出的容器。
### 注
谷歌自己的容器栈被称为“让我为你包含它”或简称 lmctfy。lmctfy 上的工作已经作为谷歌端口功能安装到 libcontainer 上，lib Container 是开放容器计划的一部分。lmctfy 上的更多详情可在[https://github.com/google/lmctfy/](https://github.com/google/lmctfy/)找到。
cAdvisor 是用 Go([https://golang.org](https://golang.org))写的；您可以编译自己的二进制文件，也可以使用通过容器提供的预编译二进制文件，该容器可从谷歌自己的 Docker Hub 帐户获得。你可以在[http://hub.docker.com/u/google/](http://hub.docker.com/u/google/)找到这个。
安装后，cAdvisor 将位于后台并捕获类似于`docker stats`命令的指标。我们将在本章后面的内容中浏览这些统计数据并理解它们的含义。
cAdvisor 将这些指标与主机的指标结合在一起，并通过简单易用的内置 web 界面公开它们。
# 使用容器运行 cAdvisor
有许多方法可以安装 cAdvisor 最简单的入门方法是下载并运行包含预编译 cAdvisor 二进制文件的副本的容器映像。
在运行 cAdvisor 之前，让我们启动一个新的流浪主机:
```
[russ@mac ~]$ cd ~/Documents/Projects/monitoring-docker/vagrant-centos/
[russ@mac ~]$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==>default: Importing base box 'russmckendrick/centos71'...
==>default: Matching MAC address for NAT networking...
==>default: Checking if box 'russmckendrick/centos71' is up to date...
.....
==>default: => Installing docker-engine ...
==>default: => Configuring vagrant user ...
==>default: => Starting docker-engine ...
==>default: => Installing docker-compose ...
==>default: => Finished installation of Docker
[russ@mac ~]$ vagrantssh
```
### 类型
**使用反斜杠**
因为我们有很多选项可以传递给`docker run`命令，所以我们使用`\`将命令拆分成多行，这样更容易跟踪正在发生的事情。
访问主机后，运行以下命令:
```
docker run \
 --detach=true \
 --volume=/:/rootfs:ro \
 --volume=/var/run:/var/run:rw \
 --volume=/sys:/sys:ro \
 --volume=/var/lib/docker/:/var/lib/docker:ro \
 --publish=8080:8080 \
 --privileged=true \
 --name=cadvisor \
google/cadvisor:latest
```
您现在应该有一个 cAdvisor 容器并在您的主机上运行。在开始之前，让我们通过讨论为什么我们将所有选项传递给容器来更详细地了解 cAdvisor。
cAdvisor 二进制文件被设计为与 Docker 二进制文件一起在主机上运行，因此通过在容器中启动 cAdvisor，我们实际上是将二进制文件隔离在其关闭的环境中。为了让 cAdvisor 访问它在主机上需要的资源，我们必须挂载几个分区，并且给容器特权访问，让 cAdvisor 二进制文件认为它正在主机上执行。
### 注
当使用`--privileged`启动容器时，Docker 将允许完全访问主机上的设备；此外，Docker 将配置 AppArmor 或 SELinux，以允许您的容器像在容器外运行的进程一样访问主机。有关`--privileged`标志的信息，请参见[Docker 博客上的这篇文章。](http://blog.docker.com/2013/09/docker-can-now-run-within-docker/)
# 从源代码编译 cAdvisor
如前一节所述，cAdvisor 确实应该在主机上执行；这意味着，您可能必须使用 case 来编译自己的 cAdvisor 二进制文件，并直接在主机上运行它。
要编译 cAdvisor，您需要执行以下步骤:
1.  在主机上安装 Go 和 Mercurial 需要 1.3 或更高版本的 Go 来编译 cAdvisor。
2.  设定上班的路线。
3.  抓取 cAdvisor 和 godep 的源代码。
4.  为您的围棋二进制文件设置路径。
5.  使用 godep 构建 cAdvisor 二进制文件，为我们获取依赖关系。
6.  将二进制文件复制到/ `usr/local/bin/`。
7.  下载`Upstart`或`Systemd`脚本并启动该过程。
如果您遵循了上一节中的说明，您将已经运行了一个 cAdvisor 进程。在从源代码编译之前，您应该从一个干净的宿主开始；让我们注销主机并启动一个新副本:
```
[vagrant@centos7 ~]$ exit
logout
Connection to 127.0.0.1 closed.
[russ@mac ~]$ vagrant destroy
default: Are you sure you want to destroy the 'default' VM? [y/N] y
==>default: Forcing shutdown of VM...
==>default: Destroying VM and associated drives...
==>default: Running cleanup tasks for 'shell' provisioner...
[russ@mac ~]$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==>default: Importing base box 'russmckendrick/centos71'...
==>default: Matching MAC address for NAT networking...
==>default: Checking if box 'russmckendrick/centos71' is up to date...
.....
==>default: => Installing docker-engine ...
==>default: => Configuring vagrant user ...
==>default: => Starting docker-engine ...
==>default: => Installing docker-compose ...
==>default: => Finished installation of Docker
[russ@mac ~]$ vagrantssh
```
要在 CentOS 7 主机上构建 cAdvisor，请运行以下命令:
```
sudo yum install -y golanggit mercurial
export GOPATH=$HOME/go
go get -d github.com/google/cadvisor
go get github.com/tools/godep
export PATH=$PATH:$GOPATH/bin
cd $GOPATH/src/github.com/google/cadvisor
godep go build .
sudocpcadvisor /usr/local/bin/
sudowgethttps://gist.githubusercontent.com/russmckendrick/f647b2faad5d92c96771/raw/86b01a044006f85eebbe395d3857de1185ce4701/cadvisor.service -O /lib/systemd/system/cadvisor.service
sudosystemctl enable cadvisor.service
sudosystemctl start cadvisor
```
在 Ubuntu 14.04 LTS 主机上，运行以下命令:
```
sudo apt-get -y install software-properties-common
sudo add-apt-repository ppa:evarlast/golang1.4
sudo apt-get update
sudo apt-get -y install golang mercurial
export GOPATH=$HOME/go
go get -d github.com/google/cadvisor
go get github.com/tools/godep
export PATH=$PATH:$GOPATH/bin
cd $GOPATH/src/github.com/google/cadvisor
godep go build .
sudocpcadvisor /usr/local/bin/
sudowgethttps://gist.githubusercontent.com/russmckendrick/f647b2faad5d92c96771/raw/e12c100d220d30c1637bedd0ce1c18fb84beff77/cadvisor.conf -O /etc/init/cadvisor.conf
sudo start cadvisor
```
您现在应该有一个正在运行的 cAdvisor 进程。您可以通过运行`ps aux | grep cadvisor`来检查这一点，您应该会看到一个路径为`/usr/local/bin/cadvisor`的进程正在运行。
# 收集指标
现在，您已经运行了 cAdvisor；为了开始收集指标，您需要做什么来配置服务？简而言之，什么都没有。当您启动 cAdvisor 进程时，它会立即开始轮询您的主机，以找出正在运行的容器，并收集正在运行的容器和您的主机上的信息。
# 网页界面
cAdvisor 应该是在`8080`端口上运行的；如果您打开`http://192.168.33.10:8080/`，您应该会看到 cAdvisor 标志和主机概述:
![The Web interface](img/00015.jpeg)
这个初始页面流式传输关于主机的实时统计数据，尽管当您开始深入查看容器时，每个部分都是重复的。首先，让我们使用主机信息来查看每个部分。
## 概述
这个概述部分让你鸟瞰你的系统；它使用量规，因此您可以快速了解哪些资源达到了极限。在下面的截图中，CPU 利用率的方式很少，文件系统使用率相对较低；但是，我们使用了 64%的可用内存:
![Overview](img/00016.jpeg)
## 流程
下面的截图显示了我们在上一章中使用的`ps aux`、`dockerps`和`top`命令输出的组合视图:
![Processes](img/00017.jpeg)
以下是每个列标题的含义:
*   **用户**:显示哪个用户在运行流程
*   **PID** :这是唯一的流程 ID
*   **PPID** :这是母流程的 **PID**
*   **开始时间**:显示流程开始的时间
*   **CPU %** :这是进程当前消耗的 CPU 的百分比
*   **MEM %** :这是进程当前消耗的内存的百分比
*   **RSS** :这个显示进程使用了多少主内存
*   **虚拟大小**:显示进程使用了多少虚拟内存
*   **状态**:显示流程的当前状态；这是标准的 Linux 进程状态代码
*   **运行时间**:显示进程运行了多长时间
*   **命令**:显示进程正在运行哪个命令
*   **容器**:显示流程附着在哪个容器上；列为`/`的容器是主机
由于可能有几百个进程处于活动状态，所以这个部分被分成几页；您可以通过左下角的按钮导航到这些。此外，您可以通过单击任何标题对流程进行排序。
## CPU
下面的图显示了最后一分钟的 CPU 利用率:
![CPU](img/00018.jpeg)
以下是每个术语的含义:
*   **总使用量**:这显示了所有内核的总使用量
*   **每个内核的使用量**:此图分解了每个内核的使用量
*   **使用情况细分**(上一张截图中未显示):这显示了所有内核的总使用情况，但将其细分为内核正在使用的内容和用户拥有的进程正在使用的内容
## 记忆
**记忆**部分被分成两部分。该图告诉您主机或容器的所有进程使用的内存总量；这是冷热记忆的总和。**热**内存是当前的工作集:最近被内核触碰的页面。**冷**内存是有一段时间没碰过的页面，需要的话可以回收。
**使用细分**给出了主机内存总量或容器中的容差的可视化表示，以及总使用量和热使用量:
![Memory](img/00019.jpeg)
## 网络
此部分显示最后一分钟的进出流量。您可以使用左上角的下拉框更改界面。还有一个图表显示任何网络错误。通常，该图应该是平坦的。如果不是，那么您将看到主机或容器的性能问题:
![Network](img/00020.jpeg)