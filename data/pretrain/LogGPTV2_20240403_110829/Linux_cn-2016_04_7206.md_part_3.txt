稳定的新版本通常比旧版本具有更好的兼容性和更高的性能。一直进行软件更新，可以非常简单的保持软件保持最佳的优化，解决掉 bug，以及提高安全性。
一直使用旧版软件也会阻止你利用新的特性。比如上面说到的 HTTP/2，目前要求 OpenSSL 1.0.1。在2016 年中期开始将会要求1.0.2 ，而它是在2015年1月才发布的。
NGINX 用户可以开始迁移到 [NGINX 最新的开源软件](http://nginx.org/en/download.html) 或者 [NGINX Plus](https://www.nginx.com/products/)；它们都包含了最新的能力，如 socket 分割和线程池（见下文），这些都已经为性能优化过了。然后好好看看的你软件栈，把它们升级到你能升级到的最新版本吧。
### Tip #8: Linux 系统性能调优
Linux 是大多数 web 服务器使用的操作系统，而且作为你的架构的基础，Linux 显然有不少提高性能的可能。默认情况下，很多 Linux 系统都被设置为使用很少的资源，以符合典型的桌面应用使用。这就意味着 web 应用需要一些微调才能达到最大效能。
这里的 Linux 优化是专门针对 web 服务器方面的。以 NGINX 为例，这里有一些在加速 Linux 时需要强调的变化：
* **缓冲队列**。如果你有挂起的连接，那么你应该考虑增加 net.core.somaxconn 的值，它代表了可以缓存的连接的最大数量。如果连接限制太小，那么你将会看到错误信息，而你可以逐渐的增加这个参数直到错误信息停止出现。
* **文件描述符**。NGINX 对一个连接使用最多2个文件描述符。如果你的系统有很多连接请求，你可能就需要提高sys.fs.file\_max ，以增加系统对文件描述符数量整体的限制，这样才能支持不断增加的负载需求。
* **临时端口**。当使用代理时，NGINX 会为每个上游服务器创建临时端口。你可以设置net.ipv4.ip\_local\_port\_range 来提高这些端口的范围，增加可用的端口号。你也可以减少非活动的端口的超时判断来重复使用端口，这可以通过 net.ipv4.tcp\_fin\_timeout 来设置，这可以快速的提高流量。
对于 NGINX 来说，可以查阅 《[NGINX 性能调优指南](https://www.nginx.com/blog/tuning-nginx/)》来学习如果优化你的 Linux 系统，这样它就可以很好的适应大规模网络流量而不会超过工作极限。
### Tip #9: web 服务器性能调优
无论你是用哪种 web 服务器，你都需要对它进行优化来提高性能。下面的推荐手段可以用于任何 web 服务器，但是一些设置是针对 NGINX 的。关键的优化手段包括：
* **访问日志**。不要把每个请求的日志都直接写回磁盘，你可以在内存将日志缓存起来然后批量写回磁盘。对于NGINX 来说，给指令 **access\_log** 添加参数 **buffer=size** 可以让系统在缓存满了的情况下才把日志写到磁盘。如果你添加了参数 **flush=time** ，那么缓存内容会每隔一段时间再写回磁盘。
* **缓存**。缓存会在内存中存放部分响应，直到满了为止，这可以让与客户端的通信更加高效。内存放不下的响应会写回磁盘，而这就会降低效能。当 NGINX [启用](http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffering)了缓存机制后，你可以使用指令 **proxy\_buffer\_size** 和 **proxy\_buffers** 来管理缓存。
* **客户端保活**。保活连接可以减少开销，特别是使用 SSL/TLS 时。对于 NGINX 来说，你可以从 **keepalive\_requests** 的默认值 100 开始增加最大连接数，这样一个客户端就可以在一个指定的连接上请求多次，而且你也可以通过增加 **keepalive\_timeout** 的值来允许保活连接存活更长时间，这样就可以让后来的请求处理的更快速。
* **上游保活**。上游的连接——即连接到应用服务器、数据库服务器等机器的连接——同样也会受益于连接保活。对于上游连接来说，你可以增加 **keepalive**，即每个工人进程的空闲保活连接个数。这就可以提高连接的复用次数，减少需要重新打开全新连接的次数。更多关于保活连接的信息可以参见[这篇“ HTTP 保活连接和性能”](https://www.nginx.com/blog/http-keepalives-and-web-performance/)。
* **限制**。限制客户端使用的资源可以提高性能和安全性。对于 NGINX 来说，指令 **limit\_conn** 和 **limit\_conn\_zone** 限制了给定来源的连接数量，而 **limit\_rate** 限制了带宽。这些限制都可以阻止合法用户*扒取*资源，同时也避免了攻击。指令 **limit\_req** 和 **limit\_req\_zone** 限制了客户端请求。对于上游服务器来说，可以在 **upstream** 的配置块里的 **server** 指令使用 **max\_conns** 参数来限制连接到上游服务器的连接数。 这样可以避免服务器过载。关联的 **queue** 指令会创建一个队列来在连接数抵达 **max\_connS** 限制时在指定长度的时间内保存特定数量的请求。
* **工人进程**。工人进程负责处理请求。NGINX 采用事件驱动模型和操作系统特定的机制来有效的将请求分发给不同的工人进程。这条建议推荐设置 **worker\_processes** 为每个 CPU 一个 。**worker\_connections** 的最大数（默认512）可以在大部分系统上根据需要增加，实验性地找到最适合你的系统的值。
* **套接字分割**。通常一个套接字监听器会把新连接分配给所有工人进程。套接字分割会为每个工人进程创建一个套接字监听器，这样一来以当套接字监听器可用时，内核就会将连接分配给它。这可以减少锁竞争，并且提高多核系统的性能，要启用[套接字分隔](https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/)需要在 **listen** 指令里面加上 **reuseport** 参数。
* **线程池**。计算机进程可能被一个单一的缓慢的操作所占用。对于 web 服务器软件来说，磁盘访问会影响很多更快的操作，比如计算或者在内存中拷贝。使用了线程池之后慢操作可以分配到不同的任务集，而主进程可以一直运行快速操作。当磁盘操作完成后结果会返回给主进程的循环。在 NGINX 里有两个操作——read() 系统调用和 sendfile() ——被分配到了[线程池](https://www.nginx.com/blog/thread-pools-boost-performance-9x/)
![Thread pools help increase application performance by assigning a slow operation to a separate set of tasks](/data/attachment/album/201604/11/132628mfvs63f6fojajfoa.jpg)
**技巧**。当改变任何操作系统或支持服务的设置时，一次只改变一个参数然后测试性能。如果修改引起问题了，或者不能让你的系统更快，那么就改回去。
在《[调优 NGINX 性能](https://www.nginx.com/blog/tuning-nginx/)》里可以看到更详细的 NGINX 调优方法。
### Tip #10: 监视系统活动来解决问题和瓶颈
在应用开发中要使得系统变得非常高效的关键是监视你的系统在现实世界运行的性能。你必须能通过特定的设备和你的 web 基础设施上监控程序活动。
监视活动是最积极的——它会告诉你发生了什么，把问题留给你发现和最终解决掉。
监视可以发现几种不同的问题。它们包括：
* 服务器宕机。
* 服务器出问题一直在丢失连接。
* 服务器出现大量的缓存未命中。
* 服务器没有发送正确的内容。
应用的总体性能监控工具，比如 New Relic 和 Dynatrace，可以帮助你监控到从远程加载网页的时间，而 NGINX 可以帮助你监控到应用交付端。当你需要考虑为基础设施添加容量以满足流量需求时，应用性能数据可以告诉你你的优化措施的确起作用了。
为了帮助开发者快速的发现、解决问题，NGINX Plus 增加了[应用感知健康度检查](https://www.nginx.com/products/application-health-checks/) ——对重复出现的常规事件进行综合分析并在问题出现时向你发出警告。NGINX Plus 同时提供[会话过滤](https://www.nginx.com/products/session-persistence/#session-draining)功能，这可以阻止当前任务完成之前接受新的连接，另一个功能是慢启动，允许一个从错误恢复过来的服务器追赶上负载均衡服务器群的进度。当使用得当时，健康度检查可以让你在问题变得严重到影响用户体验前就发现它，而会话过滤和慢启动可以让你替换服务器，并且这个过程不会对性能和正常运行时间产生负面影响。下图就展示了内建的 NGINX Plus 模块[实时活动监视](https://www.nginx.com/products/live-activity-monitoring/)的仪表盘，包括了服务器群，TCP 连接和缓存信息等 Web 架构信息。
![Use real-time application performance monitoring tools to identify and resolve issues quickly](/data/attachment/album/201604/09/232221mdz6hwpobmudz2r7.png)
### 总结: 看看10倍性能提升的效果
这些性能提升方案对任何一个 web 应用都可用并且效果都很好，而实际效果取决于你的预算、你能花费的时间、目前实现方案的差距。所以你该如何对你自己的应用实现10倍性能提升？
为了指导你了解每种优化手段的潜在影响，这里是上面详述的每个优化方法的关键点，虽然你的情况肯定大不相同：
* **反向代理服务器和负载均衡**。没有负载均衡或者负载均衡很差都会造成间歇的性能低谷。增加一个反向代理，比如 NGINX ，可以避免 web 应用程序在内存和磁盘之间波动。负载均衡可以将过载服务器的任务转移到空闲的服务器，还可以轻松的进行扩容。这些改变都可以产生巨大的性能提升，很容易就可以比你现在的实现方案的最差性能提高10倍，对于总体性能来说可能提高的不多，但是也是有实质性的提升。
* **缓存动态和静态数据**。如果你有一个负担过重的 web 服务器，那么毫无疑问肯定是你的应用服务器，只通过缓存动态数据就可以在峰值时间提高10倍的性能。缓存静态文件可以提高几倍的性能。
* **压缩数据**。使用媒体文件压缩格式，比如图像格式 JPEG，图形格式 PNG，视频格式 MPEG-4，音乐文件格式 MP3 可以极大的提高性能。一旦这些都用上了，然后压缩文件数据可以将初始页面加载速度提高两倍。
* **优化 SSL/TLS**。安全握手会对性能产生巨大的影响，对它们的优化可能会对初始响应产生2倍的提升，特别是对于大量文本的站点。优化 SSL/TLS 下媒体文件只会产生很小的性能提升。
* **使用 HTTP/2 和 SPDY**。当你使用了 SSL/TLS，这些协议就可以提高整个站点的性能。
* **对 Linux 和 web 服务器软件进行调优**。比如优化缓存机制，使用保活连接，分配时间敏感型任务到不同的线程池可以明显的提高性能；举个例子，线程池可以加速对磁盘敏感的任务[近一个数量级](https://www.nginx.com/blog/thread-pools-boost-performance-9x/)。
我们希望你亲自尝试这些技术。我们希望知道你说取得的各种性能提升案例。请在下面评论栏分享你的结果或者在标签 #NGINX 和 #webperf 下 tweet 你的故事。
### 网上资源
* [Statista.com – Share of the internet economy in the gross domestic product in G-20 countries in 2016](http://www.statista.com/statistics/250703/forecast-of-internet-economy-as-percentage-of-gdp-in-g-20-countries/)
* [Load Impact – How Bad Performance Impacts Ecommerce Sales](http://blog.loadimpact.com/blog/how-bad-performance-impacts-ecommerce-sales-part-i/)
* [Kissmetrics – How Loading Time Affects Your Bottom Line (infographic)](https://blog.kissmetrics.com/loading-time/?wide=1)
* [Econsultancy – Site speed: case studies, tips and tools for improving your conversion rate](https://econsultancy.com/blog/10936-site-speed-case-studies-tips-and-tools-for-improving-your-conversion-rate/)
---
via: 
作者：[Floyd Smith](https://www.nginx.com/blog/author/floyd/) 译者：[Ezio](https://github.com/oska874) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出