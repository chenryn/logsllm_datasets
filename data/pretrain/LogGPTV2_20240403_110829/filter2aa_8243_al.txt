פונקציית M מייצרת ייצוג אחר של הדגל:
```python
def M(s):
    l = list(set(s.upper()))
    shuffle(l)
    d = ''.join(l)
    assert len(d) &nbsp;
הדגל מיוצג בתור set של האותיות בדגל,
יחד עם מערך של זוגות שמכילים שני נתונים אודות כל אות בדגל: מהו מיקומה של האות
ב-set, והאם זו אות גדולה
או קטנה.
את ה-set והמערך יחביאו
במקומות שונים בתוך התמונה.
את ה-set (שנקרא mp) קל למצוא:
```python
    o.write('\x21\xFE')
    o.write(WB('RDBNB'+mp))
    o.flush()
```
&nbsp;
ובתוכן התמונה:
כלומר, ה-set שלנו הוא:
{UFKRAYWS}TLMGI!EO_H
כעת נשאר לפצח את
מיקום המערך.
המערך (ks) מתחיל את תהליך
ההצפנה בקוד הבא:
```python
if ks:
   mpindx, isup = ks.pop(0)
   obuf += h(mpindx, isup, ww, hh, len(global_colors)-1)
```
&nbsp;
הוא מפורק לשני
הגורמים שלו (mpindex, isup) ונשלח
לפונקציית h.
```python
def h(b6, b1, mw, mh, mci, d=3):
    idx = randint(0, (mci-1)/2)*2 + b1
    x, xx, xxx, xxxx = m(b6, mw, mh)
    f = Q(d, xxx, xxxx, x, xx, idx)
    return f
```
isup, שהוא בוליאני,
מוסתר בתוך הזוגיות של idx (זוגי
-&gt; אות קטנה, אי-זוגי -&gt; אות גדולה).
mpindex נשלח ל-m והתוצאה נשלחת ל-Q.
פונקציית m מסתירה את הערך באמצעות מספר
מניפולציות, ואז פונקציית Q כותבת את התוצאה
אל תוך התמונה מיד אחרי magic number:
```python
buf.write('\x21\xF9\x04\x05')
```
לכן, כדי למצוא את
הערכים המקוריים, פשוט נפעיל לוגיקה הפוכה לזאת שהפעילה m:
```python
import struct, sys
s = "{UFKRAYWS}TLMGI!EO_H"
with open(r"secret.gif", "rb") as f:
    content = f.read()
    location = 0
    indices = []
    while True:
        location = content.find(b'\x21\xF9\x04\x05', location+1)
        if location == -1:
            break
        (header, delay, tidx, zero, h2c, x, y, w, h, zero2) = struct.unpack_from(b'> 2
        elif x == 1:
            mpindx = y >> 1
        else:
            print ("!!!!")
        print (mpindx)
        indices.append((mpindx, tidx % 2 == 0))
        print ("\n")
    for mpindx, isup in indices:
        c = s[mpindx] if not isup else s[mpindx].lower()
        sys.stdout.write(c)
```
נריץ ונקבל:
flag{thIs_mushRooM_w!lL_maKe_you_tAlLer}
&nbsp;
&nbsp;
&nbsp;
אתגר 12 – Trace
me if you Can (קטגוריית Surprise, 150 נקודות)
&nbsp;
תיאור האתגר:
```
Hi There,
We've been working on this one for a while now.
This machine spits out the flag when given the right input.
We're not sure what the input should be but we managed to get this weird looking trace.
Our best minds spent days, but we still can't figure it out!
35.194.63.219:2005
Please help us
```
&nbsp;
הקישור לקובץ הכיל Trace בייצוג ביניים מסוג
SSA (Static single assignment form). מיד
נסביר מה זה אומר, אבל לפני הכל – באתגר הזה התשובה שלי לא התקבלה. לכן, אני אסביר
את השלבים שעברתי, אבל עדיין יהיה חסר פה גרוש לשקל. עוד אודה שבמהלך האתגר
התייעצתי עם
 YaakovCohen88 מ-JCTF.
&nbsp;
כאשר מקמפלים תוכנה,
הקומפיילר יכול לעבור דרך מספר שלבי ביניים עד שהוא מגיע אל התוצאה הסופית שלו
(למשל: קוד מכונה). SSA הוא
שלב-ביניים כזה, שמתאפיין בכך שכל משתנה מקבל השמה פעם אחת בלבד, וכל משתנה מוגדר
לפני שמשתמשים בו. 
חשוב לשים לב שהקובץ
הכיל Trace של ריצה
בפורמט הזה, ולא ייצוג של קומפילציה של תוכנה ב-SSA. כלומר, לא קיבלנו תוכנה מלאה, אלא ריצה מסויימת של תוכנה על קלט
מסויים, כשבפועל אנחנו נחשפים אך ורק לפקודות שאכן רצו בריצה המסויימת הזו. איננו
נחשפים לפונקציות שלא נקראו, תנאים שלא התקיימו וכו'.
הקובץ הכיל
כ-190,000 שורות, אך לשם הדוגמא נצרף קטע קצר (ההערות במקור):
```
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version1/ssa.go:238:6.
.0:
        t0 = len(a)
        jump 1
.1:
        t1 = phi [0: 0:int, 2: t7] #damn
        t2 = phi [0: -1:int, 2: t3]
        t3 = t2 + 1:int
        t4 = t3 < t0