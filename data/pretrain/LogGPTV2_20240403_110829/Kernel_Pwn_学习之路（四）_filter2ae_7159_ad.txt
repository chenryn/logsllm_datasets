        movq    %rax, %cr0
        /* Setup a boot time stack */
        movq initial_stack(%rip), %rsp
        /* zero EFLAGS after setting rsp */
        pushq $0
        popfq
        /*
         * We must switch to a new descriptor in kernel space for the GDT
         * because soon the kernel won't have access anymore to the userspace
         * addresses where we're currently running on. We have to do that here
         * because in 32bit we couldn't load a 64bit linear address.
         */
        lgdt    early_gdt_descr(%rip)
        /* set up data segments */
        xorl %eax,%eax
        movl %eax,%ds
        movl %eax,%ss
        movl %eax,%es
        /*
         * We don't really need to load %fs or %gs, but load them anyway
         * to kill any stale realmode selectors.  This allows execution
         * under VT hardware.
         */
        movl %eax,%fs
        movl %eax,%gs
        /* Set up %gs.
         *
         * The base of %gs always points to fixed_percpu_data. If the
         * stack protector canary is enabled, it is located at %gs:40.
         * Note that, on SMP, the boot cpu uses init data section until
         * the per cpu areas are set up.
         */
        movl    $MSR_GS_BASE,%ecx
        movl    initial_gs(%rip),%eax
        movl    initial_gs+4(%rip),%edx
        wrmsr
        /* rsi is pointer to real mode structure with interesting info.
           pass it to C */
        movq    %rsi, %rdi
    .Ljump_to_C_code:
        /*
         * Jump to run C code and to be on a real kernel address.
         * Since we are running on identity-mapped space we have to jump
         * to the full 64bit address, this is only possible as indirect
         * jump.  In addition we need to ensure %cs is set so we make this
         * a far return.
         *
         * Note: do not change to far jump indirect with 64bit offset.
         *
         * AMD does not support far jump indirect with 64bit offset.
         * AMD64 Architecture Programmer's Manual, Volume 3: states only
         *    JMP FAR mem16:16 FF /5 Far jump indirect,
         *        with the target specified by a far pointer in memory.
         *    JMP FAR mem16:32 FF /5 Far jump indirect,
         *        with the target specified by a far pointer in memory.
         *
         * Intel64 does support 64bit offset.
         * Software Developer Manual Vol 2: states:
         *    FF /5 JMP m16:16 Jump far, absolute indirect,
         *        address given in m16:16
         *    FF /5 JMP m16:32 Jump far, absolute indirect,
         *        address given in m16:32.
         *    REX.W + FF /5 JMP m16:64 Jump far, absolute indirect,
         *        address given in m16:64.
         */
        pushq    $.Lafter_lret    # put return address on stack for unwinder
        xorl    %ebp, %ebp    # clear frame pointer
        movq    initial_code(%rip), %rax
        pushq    $__KERNEL_CS    # set correct cs
        pushq    %rax        # target address in negative space
        lretq
    .Lafter_lret:
    SYM_CODE_END(secondary_startup_64)
这里我们着重关心设置 `gs`寄存器的代码:
    /* Set up %gs.
    *
    * The base of %gs always points to fixed_percpu_data. If the
    * stack protector canary is enabled, it is located at %gs:40.
    * Note that, on SMP, the boot cpu uses init data section until
    * the per cpu areas are set up.
    */
    movl    $MSR_GS_BASE,%ecx
    movl    initial_gs(%rip),%eax
    movl    initial_gs+4(%rip),%edx
    wrmsr
`wrmsr`指令将`edx:eax`寄存器指定的地址中的数据写入到由`ecx`寄存器指定的`model specific
register`中。由代码可以看到，`ecx`中的值是`$MSR_GS_BASE`，该值在`/source/arch/x86/include/uapi/asm/msr-index.h`中定义:
    #define MSR_GS_BASE 0xc0000101
由此可见，`MSR_GS_BASE`定义了 `model specific register`的编号。由于 `cs`, `ds`, `es`,和
`ss`在64-bit模式中不再使用，这些寄存器中的值将会被忽略，但我们可以通过 `fs`和 `gs`寄存器来访问内存空间。`model specific
register`提供了一种后门 `back door`来访问这些段寄存器，也让我们可以通过段寄存器 `fs`和
`gs`来访问64-bit的基地址。看起来这部分代码映射在 `GS.base`域中。再看到 `initial_gs`函数的定义:
    // In /source/arch/x86/kernel/head_64.S#L265
    SYM_DATA(initial_gs,    .quad INIT_PER_CPU_VAR(fixed_percpu_data))
可以发现，`initial_gs` 指向 `fixed_percpu_data`，这段代码将 `fixed_percpu_data`传递给
`INIT_PER_CPU_VAR`宏，后者只是给输入参数添加了 `init_per_cpu__`前缀而已。在此得出了符号
`init_per_cpu__fixed_percpu_data`。再看到`/source/arch/x86/kernel/vmlinux.lds.S`中有如下定义:
    /*
     * Per-cpu symbols which need to be offset from __per_cpu_load
     * for the boot processor.
     */
    #define INIT_PER_CPU(x) init_per_cpu__##x = ABSOLUTE(x) + __per_cpu_load
    INIT_PER_CPU(gdt_page);
    INIT_PER_CPU(fixed_percpu_data);
    INIT_PER_CPU(irq_stack_backing_store);
这段代码告诉我们符号 `init_per_cpu__fixed_percpu_data`的地址将会是 `fixed_percpu_data +
__per_cpu_load`。
`fixed_percpu_data`的定义出现在`/source/arch/x86/include/asm/processor.h#L437`中，其中的
`DECLARE_INIT_PER_CPU`宏展开后又调用了 `init_per_cpu_var`宏:
    #ifdef CONFIG_X86_64
    struct fixed_percpu_data {
        /*
         * GCC hardcodes the stack canary as %gs:40.  Since the
         * irq_stack is the object at %gs:0, we reserve the bottom
         * 48 bytes of the irq stack for the canary.
         */
        char        gs_base[40];
        // stack_canary 对于中断栈来说是一个用来验证栈是否已经被修改的栈保护者(stack protector)。
        // gs_base 是一个 40 字节的数组，GCC 要求 stack canary在被修正过的偏移量上
        // gs 的值在 x86_64 架构上必须是 40，在 x86 架构上必须是 20。
        unsigned long    stack_canary;
    };
    DECLARE_PER_CPU_FIRST(struct fixed_percpu_data, fixed_percpu_data) __visible;
    DECLARE_INIT_PER_CPU(fixed_percpu_data);
    // In /source/arch/x86/include/asm/percpu.h#L77
    #define DECLARE_INIT_PER_CPU(var) 
           extern typeof(var) init_per_cpu_var(var)
    // In /source/arch/x86/include/asm/percpu.h#L81
    #ifdef CONFIG_X86_64_SMP
    #define init_per_cpu_var(var)  init_per_cpu__##var
    #else
    #define init_per_cpu_var(var)  var
    #endif
将所有的宏展开之后我们可以得到与之前相同的名称
`init_per_cpu__fixed_percpu_data`，但此时它不再只是一个符号，而成了一个变量。请注意表达式
`typeof(var)`,在此时 `var`是 `fixed_percpu_data`。
到此为止，我们定义了`ABSOLUTE(x) + __per_cpu_load`的第一个变量并且知道了它的地址。再看到第二个符号
`__per_cpu_load`，该符号定义在`/source/include/asm-generic/sections.h#L42`，这个符号定义了一系列
`per-cpu`变量:
    extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
这些符号代表了这一系列变量的数据区域的基地址，回到之前的代码中：
    movl    $MSR_GS_BASE,%ecx
    movl    initial_gs(%rip),%eax
    movl    initial_gs+4(%rip),%edx
    wrmsr
这里通过 `MSR_GS_BASE`指定了一个平台相关寄存器，然后将 `initial_gs`的64-bit地址放到了
`edx:eax`段寄存器中，然后执行 `wrmsr`指令，将 `init_per_cpu__fixed_percpu_data`的基地址放入了
`gs`寄存器，而这个地址将是中断栈的栈底地址。
在此之后我们将进入
`x86_64_start_kernel`函数中，此函数定义在`/source/arch/x86/kernel/head64.c`。在这个函数中，将完成最后的准备工作，之后就要进入到与平台无关的通用内核代码，在这个过程中，会将中断服务程序入口地址填写到早期
`Interrupt Descriptor Table`中。
### 中断服务程序入口地址关联( `x86_64_start_kernel`函数分析)
    asmlinkage __visible void __init x86_64_start_kernel(char * real_mode_data)
    {
        /*
         * Build-time sanity checks on the kernel image and module
         * area mappings. (these are purely build-time and produce no code)
         */
        BUILD_BUG_ON(MODULES_VADDR  2*PUD_SIZE);
        BUILD_BUG_ON((__START_KERNEL_map & ~PMD_MASK) != 0);
        BUILD_BUG_ON((MODULES_VADDR & ~PMD_MASK) != 0);
        BUILD_BUG_ON(!(MODULES_VADDR > __START_KERNEL));
        MAYBE_BUILD_BUG_ON(!(((MODULES_END - 1) & PGDIR_MASK) ==
                    (__START_KERNEL & PGDIR_MASK)));
        BUILD_BUG_ON(__fix_to_virt(__end_of_fixed_addresses) > i) & 1) == 0
            UNWIND_HINT_IRET_REGS
            pushq $0    # Dummy error code, to make stack frame uniform
        .else
            UNWIND_HINT_IRET_REGS offset=8
        .endif
        pushq $i        # 72(%rsp) Vector number
        jmp early_idt_handler_common
        UNWIND_HINT_IRET_REGS
        i = i + 1
        .fill early_idt_handler_array + i*EARLY_IDT_HANDLER_SIZE - ., 1, 0xcc
        .endr
        UNWIND_HINT_IRET_REGS offset=16
    SYM_CODE_END(early_idt_handler_array)
这里使用 `.rept NUM_EXCEPTION_VECTORS` 填充了 `early_idt_handler_array` ，其中也包含了
`early_make_pgtable`
的中断服务函数入口。现在我们已经分析完了所有`x86-64`平台相关的代码，即将进入通用内核代码中。当然，我们之后还会在 `setup_arch`
函数中重新回到平台相关代码，但这已经是 `x86_64` 平台早期代码的最后部分。
## 0x04 参考链接
[【原】Linux内核中断系统处理机制-详细分析 –
Bystander_J](https://blog.csdn.net/weixin_42092278/article/details/819894497)
[【原】GitBook – Linux Inside – 0xax](https://legacy.gitbook.com/book/0xax/linux-insides/details)
[【疑】中断解析](http://www.kerneltravel.net/journal/viii/01.htm)
(自本篇文章起，将会对所有的引用链接标注‘【原】’、‘【转/译】’、‘【疑】’三种标识，以表示引用的文章是否标明了原创或转载，若引用了其他作者转载的文章，将不再追溯至其原创作者，请注意，并非标明【疑】的均为非原创文章，仅表示文章出处未显示原创性，凡引用个人博客文章，除非文章标明转载或翻译，一律视为博主原创。)