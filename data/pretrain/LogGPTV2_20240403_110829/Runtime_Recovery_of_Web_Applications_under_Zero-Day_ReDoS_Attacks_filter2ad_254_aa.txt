title:Runtime Recovery of Web Applications under Zero-Day ReDoS Attacks
author:Zhihao Bai and
Ke Wang and
Hang Zhu and
Yinzhi Cao and
Xin Jin
2021 IEEE Symposium on Security and Privacy (SP)
Runtime Recovery of Web Applications under
Zero-Day ReDoS Attacks
Zhihao Bai∗, Ke Wang†, Hang Zhu∗, Yinzhi Cao∗, Xin Jin†
∗Johns Hopkins University, †Peking University
7
7
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—Regular expression denial of service (ReDoS)—
which exploits the super-linear running time of matching regular
expressions against carefully crafted inputs—is an emerging class
of DoS attacks to web services. One challenging question for a
victim web service under ReDoS attacks is how to quickly recover
its normal operation after ReDoS attacks, especially these zero-
day ones exploiting previously unknown vulnerabilities.
In this paper, we present REGEXNET, the ﬁrst payload-based,
automated, reactive ReDoS recovery system for web services.
REGEXNET adopts a learning model, which is updated constantly
in a feedback loop during runtime, to classify payloads of
upcoming requests including the request contents and database
query responses. If detected as a cause leading to ReDoS,
REGEXNET migrates those requests to a sandbox and isolates
their execution for a fast, ﬁrst-measure recovery.
We have implemented a REGEXNET prototype and integrated
it with HAProxy and Node.js. Evaluation results show that
REGEXNET is effective in recovering the performance of web
services against zero-day ReDoS attacks, responsive on reacting
to attacks in sub-minute, and resilient
to different ReDoS
attack types including adaptive ones that are designed to evade
REGEXNET on purpose.
Index Terms—Regular expression Denial of Service (ReDoS);
Deep Neural Networks; Adversarial Machine Learning; Online
Feedback Loop
I. INTRODUCTION
Regular expressions, a fundamental tool in computer soft-
ware, are widely used in web services to manipulate, validate,
and scrape user data [1], [2]. Although widely adopted, the
matching process of regular expressions, especially against
carefully crafted inputs, can take super-linear, i.e., polynomial
or even exponential, time with respect to the input length,
leading to a so-called regular expression denial of service
(ReDoS) [3], [4], [5] and posting a critical threat to web
services today [4], [6]. For example, one study has shown that
thousands of regular expressions in over 10,000 JavaScript or
Python modules are vulnerable to ReDoS [4]. Another study
has shown that 339 out of 2,846 popular websites suffer from
at least one ReDoS vulnerability, which can be easily exploited
to take down the websites [5].
Because of the severe situation of ReDoS attacks, re-
searchers have proposed various defenses [7], [8], [3], [5],
[9], [10], [11], which can be roughly categorized into two
general types: proactive and reactive. On one hand, proactive
defenses mitigate ReDoS attacks by speeding up regular
expression matching. For example, several libraries, such as
safe-regex [7] and rxxr2 [8], are proposed to check the safety
of regular expressions for Node.js applications via an e-NFA
structure. W¨ustholz et al. [3] also present an algorithm to check
the vulnerabilities of regular expressions via an NFA-alike
structure. The state of the art from Davis et al. [12] proposes a
sound ReDoS defense using selective memoization schemes.
While proactive approaches are effective in defeating Re-
DoS attacks, there are some tradeoffs in preventing them being
deployed in practice. For example, many existing ReDoS de-
fenses [7], [8], [3], [5], [9], [10] are not sound [13], [14], [15],
[16], leaving some regular expressions still vulnerable; some
defenses, particularly Davis et al. [12], are sound in ensuring
linear matching time but take signiﬁcantly more space, possi-
bly leading to a space-related DoS. In addition, many existing
approaches [7], [8], [17], [12] need modiﬁcations to either the
web application itself or the web framework supporting the
application, thus facing obstacles in deployment.
On the other hand, a reactive approach, as opposed to
proactive, is to recover web services from ReDoS attacks,
especially zero-day ones, during runtime after being taken
down. This is also important because a proactive approach may
fail or is not in place due to deployment concerns. The most
na¨ıve yet still common reactive approach is probably manual
inspection, which leads to a gap for a website between being
unavailable and going back online. As a concrete example, it
took StackOverﬂow about 34 minutes to recover from an un-
known ReDoS vulnerability in its source code, which included
10 minutes to analyze suspicious web requests and identify the
cause, 14 minutes to ﬁx problematic code segments, and 10
minutes to roll out the software update [18].
Reactive approaches can be automated. Particularly, Ram-
part [11]—the state-of-the-art reactive approach—adopts a
behavior-based, statistical approach to differentiate normal and
malicious requests based on consumed CPU resources. If
malicious, Rampart blocks future requests from the same IP
address or with exactly the same content to defend against
so-called CPU-exhaustion Denial-of-Service (DoS) attacks.
However, there is a major drawback of Rampart. Adversaries
can bypass Rampart by launching distributed attacks from
different IPs using, e.g., a botnet, and more importantly adopt
polymorphic attack payloads after content manipulation.
In this paper, we present REGEXNET, the ﬁrst payload-
based, runtime, reactive ReDoS recovery system for web
services. Speciﬁcally, REGEXNET inspects payloads including
those embedded directly in the request itself and those trig-
gered indirectly, e.g., from database queries, as they may also
come from previous requests and are stored in the server. One
advantage of such a payload-based recovery system is that it
disregards the request source, e.g., IP addresses, and is robust
© 2021, Zhihao Bai. Under license to IEEE.
DOI 10.1109/SP40001.2021.00077
1575
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
to content manipulations. More importantly, a payload-based
recovery system can be combined with existing behavior-based
ones to together protect and recover web services.
Our key insight is that malicious payloads triggering ReDoS
attacks have to obey certain underlying patterns, which stay
invariant during content manipulation across different attacks
targeting the same vulnerable regular expression. For example,
if a vulnerable regular expression takes super-linear time in
matching a series of spaces, the malicious payload has to
include such a pattern. REGEXNET relies on recent advance-
ments in deep learning to efﬁciently learn such an underlying,
invariant pattern and detect inputs with the pattern quickly,
i.e., in linear time, without human intervention. If a request
is detected as a trigger to ReDoS vulnerabilities, REGEXNET
will migrate it from corresponding web servers to sandboxes
for isolated, controlled execution.
While intuitively simple, deep learning is not a silver bullet.
Although it can efﬁciently learn the underlying pattern and
make fairly accurate predictions for unseen payloads, state-of-
the-art deep learning makes mistakes, especially under adver-
sarial environments. Here are two scenarios: (i) the learning
model itself has some false positives and negatives, and (ii) an
adversary can launch an adaptive attack, just as what people
did in the vision ﬁeld [19], [20], against the learning system.
REGEXNET tackles the imperfection of the learning model
via an online feedback loop, which collects all the client-side
inputs related to a web request, such as the request itself
and database query responses, and the processing time of the
request to update the learning model. The idea—being inspired
by adversarial training proposed by Goodfellow et al. [20] and
further improved by Madry et al. [21]—keeps improving the
model, thus making it stronger over time.
We have implemented a system prototype of REGEXNET,
and integrated it with HAProxy [22], a widely-used software
load balancer, and Node.js [23], a popular web application
framework. We believe that REGEXNET can be deployed as a
fast, ﬁrst measure for ReDoS recovery, in addition to the slow
process of ﬁxing and rolling out the source code update with
human engineers. We have evaluated REGEXNET in a real-
world Node.js web application testbed and measured the sys-
tem performance under a wide variety of real ReDoS attacks
including zero-day and adaptive ones. The evaluation results
show that the throughput and latency of a web application
under ReDoS attacks can quickly recover to the normal level
within sub-minute, which is several orders of magnitude faster
than a manual recovery. We also compare REGEXNET with the
state-of-the-art reactive ReDoS defense, Rampart, and show
that REGEXNET signiﬁcantly outperforms Rampart in terms
of normalized throughput.
In summary, we make the following contributions.
• We propose REGEXNET, the ﬁrst payload-based, automated
ReDoS recovery system for web services that leverages a