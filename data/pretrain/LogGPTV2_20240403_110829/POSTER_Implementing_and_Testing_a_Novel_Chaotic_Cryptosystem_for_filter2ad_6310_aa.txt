title:POSTER: Implementing and Testing a Novel Chaotic Cryptosystem for
Use in Small Satellites
author:Samuel Jackson and
Scott Kerlin and
Jeremy Straub
Implementing and Testing a Novel Chaotic Cryptosystem 
for Use in Small Satellites 
Samuel Jackson 
Oklahoma State University 
Stillwater, OK 
PI:EMAIL 
Scott Kerlin 
Grand Forks, ND 
University of North Dakota 
PI:EMAIL 
University of North Dakota 
Jeremy Straub 
Grand Forks, ND 
PI:EMAIL 
schemes  used 
ABSTRACT 
Cryptography in the domain of small satellites is a relatively new 
area  of  research.  Compared  to  typical  desktop  computers,  small 
satellites  have  limited  bandwidth,  processing  power,  and  battery 
power. Many of the current encryption schemes were developed 
for desktop computers and servers, and as such may be unsuitable 
for small satellites. In addition, most cryptographic research in the 
domain  of  small  satellites  focuses  on  hardware  solutions,  which 
can be problematic given the limited space requirements of small 
satellites. 
This paper investigates potential software solutions that could be 
used  to  encrypt  and  decrypt  data  on  small  satellites  and  other 
devices  with  similarly  limited  resources.  Specifically,  this  paper 
presents an implementation of an encryption algorithm based on 
chaos  theory  and  compares  and  contrasts  it  with  existing 
cryptographic 
in  desktop  computing  and 
lightweight applications. 
Categories and Subject Descriptors 
E.3 [Data]: Data Encryption 
General Terms 
Algorithms, Performance, Security 
Keywords 
Chaotic  cryptosystem,  small  satellite,  CubeSat,  encryption, 
decryption, security, cryptography 
1.  INTRODUCTION 
Small  satellites  are  growing  in  popularity  [9].  Programs  such  as 
the  CubeSat  Launch  Initiative  [7]  in  the  United  States  and  the 
European  Space  Agency’s  Fly  Your  Satellite  [4]  program 
encourage  students  and  researchers  to  build  and  launch  small 
satellites. However, encryption is seldom used on small satellites. 
One  reason  for  this  is  that  FCC  regulations  on  amateur  radio 
bands ban any form of encryption [12]. However, as government, 
military,  and  commercial  interest  in  small  satellites  grows,  data 
confidentiality 
important.  Many 
potential solutions are  hardware-based  and, while in many cases 
hardware-based cryptosystems give better performance, the mass 
and  volume  constraints  of  small  satellites  limit  their  usefulness 
and can preclude their use on these systems. There is a need for a 
reliable, software-based cryptosystem that is not computationally 
Permission to make digital or hard copies of part or all of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for  profit  or  commercial  advantage  and  that  copies  bear  this  notice  and  the  full 
citation on the first page. Copyrights for third-party components of this work must be 
honored.  For  all  other  uses,  contact  the  Owner/Author.    Copyright  is  held  by  the 
owner/author(s). 
CCS'15, October 12–16, 2015, Denver, Colorado, USA.  
ACM 978-1-4503-3832-5/15/10. 
DOI: http://dx.doi.org/10.1145/2810103.2810114 
is  becoming 
increasingly 
investigate  performance 
intensive, does not significantly increase bandwidth, and is energy 
efficient. 
2.  BACKGROUND 
This section provides a brief overview of cryptographic research 
in the domain of small satellites, as well as in similar domains. 
In  2012,  Challa,  Bhat,  and  Mcnair  [2]  proposed  CubeSec  and 
GndSec  as  a  light-weight  security  solution  for  CubeSats,  a 
specific  type  of  small  satellite.  They  proposed  to  use  AES  and 
DES encryption in Galois/Counter Mode on AES/DES supported 
hardware,  specifically  an  ATXMega128  microcontroller.  They 
achieved throughput of between 43KBps and 256Kbps depending 
on  the  electrical  power  available,  however  this  work  failed  to 
investigate encryption techniques that rely solely on software. 
In addition, there is a large body of work in the realm of wireless 
sensor  networks,  which  have  similar  needs  in  regards  to 
encrypting  data  with  limited  resources.  There  are  many  papers 
that 
trade-offs  between  common 
algorithms  such  as  AES  and  versions  of  RC4,  RC5,  or  RC6  [6, 
11].  Szczechowiak,  et  al.  [10]  tested  whether  Elliptic  Curve 
Cryptography could be used to efficiently encrypt data between a 
network  of  sensor  nodes  and  found  it  to  be  a  viable  solution. 
However,  while  public  key  cryptography  lends  itself  well  to  a 
network  made  up  of  several  sensors,  a  satellite  needs  only  to 
communicate  between  itself  and  one  (of  a  limited  number  of)  
ground stations at a time. 
Lightweight  cryptography  is  another  burgeoning  sub-field  of 
cryptography,  also  focused  in  securing  data  confidentiality 
between  devices  with  limited  resources.  In  2013,  the  National 
Security  Agency  published  a  paper  recommending  two  new 
families  of  encryption  algorithms:  SIMON  and  SPECK  [1].  The 
SIMON  family  of  algorithms 
is  optimized  for  hardware 
implementation, and the SPECK family is designed for software 
implementation,  although  both  ciphers  were  designed  for 
environments  with  limited  hardware  and  software  capabilities. 
Both  of  these  algorithms  perform  better  than  many  previous 
lightweight ciphers and are among the most optimized lightweight 
ciphers available. 
3.  A CHAOTIC BLOCK-BASED CIPHER 
This paper proposes using a relatively new area of cryptography, 
chaos-based image encryption [3], to create a block-based cipher 
to  provide  the  data  confidentiality  needed  in  small  satellites. 
While this algorithm has not been as thoroughly tested as other, 
more common algorithms such as AES, it has the potential to be 
less  computationally  taxing  on  a  system  with  limited  resources. 
The  algorithm,  which  is  described  below,  is  based  on  work  by 
Huang, Ye, and Wong [5].  
16383.1  General Information 
The chaotic cryptosystem presented in [5] was created specifically 
with the goal of encrypting images. An image is read into a two-
dimensional array of size n x n, where each index holds one pixel. 
For each diagonal and anti-diagonal row in the array, the position 
of each pixel in that diagonal or anti-diagonal is permuted. This 
disguises  which  pixels  were  originally  next  to  each  other  (see 
Section  3.4).  Finally,  block-based  diffusion  is  performed  on  the 
image,  such  that  that  a  small  change  in  the  original  image  will 
result in a large change in the final image (see Section 3.5). 
3.2  Initial Values and the Lorenz System 
The set of values used throughout the algorithm is generated using 
the  system  of  equations  presented  below.    These  are  generally 
known as the Lorenz system.  
𝑥=𝑚(𝑦−𝑥)
𝑦=𝑟𝑥−𝑦−𝑥𝑧
𝑧=𝑥𝑦−𝑏𝑧  
(1) 
For initial values m = 10, r = 28, and b = 8/3, the system exhibits 
chaotic  behavior.  Hence,  given  initial  values  x0,  y0,  and  z0,  will 
soon diverge and start generating values that differ vastly from a 
system  with  similar  initial  values  x1,  y1,  and  z1.  Given  this,  the 
Lorenz system can be used to generate secret values used in both 
the diagonal / anti-diagonal permutations step and the block-based 
diffusion step. Given initial secret values x0, y0, and z0, the system 
of equation can be iterated. The system is first iterated p times, so 
that  it  is  given  sufficient  time  to  diverge  from  systems  with 
similar starting values. For this work, p = 30. The system is then 
iterated an additional n times, where n is the size of one side of 
the  array.  Each  x  value  returned  is  placed  in  order  into  a  one-
dimensional array of size n. Similarly, the y and z values returned 
are  placed  into  their  own  arrays.  There  are  now  three  one-
dimensional arrays of length n that hold the values iterated by the 
Lorenz  system.  As  the  values  of  x,  y,  and  z  are  generally 
increasing or decreasing along a given set of consecutive values, 
the terms are modified by the equation: 
𝑚=𝑎𝑏𝑠𝑚∗10! −𝑓𝑙𝑜𝑜𝑟𝑎𝑏𝑠𝑚∗10!  
𝑚=𝑎𝑏𝑠𝑚∗10!" −𝑓𝑙𝑜𝑜𝑟𝑎𝑏𝑠𝑚∗10!"  
(2) 
where  m={x,y,z},  abs(m)  returns  the  absolute  value  of  m,  and 
floor(m)  returns  the  nearest  integer  less  than  or  equal  to  m.  we 
have now obtained three, one-dimensional arrays of length n, each 
with a seemingly random set of values. Note that this differs from 
the suggested equation in [3], which is: 
(3) 
3.3  Circulant Matrices 
Previously, it was stated that the matrix must be permuted along 
the diagonal and anti-diagonal lines. However, if a square matrix 
(such as the one shown in Figure 1) is considered, it is apparent 
that  the  length  of  the  diagonal  lines  differ.  For  example,  the 
diagonal  that  runs  from  the  top  left  vertex  to  the  bottom  right 
vertex has n values, where n is the length of a side of the array. 
The diagonal to the right has n – 1 values. To solve this problem, 
the  diagonals  can  be  ‘wrapped’  to  a  corresponding  diagonal  so 
that the total diagonal has n values, as shown in Figure 1. 
1 
3 
2 
2 
1 