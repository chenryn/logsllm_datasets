suggesting that a project developing software used by general and
public users tends to conduct more security efforts than that devel-
oping software used by limited and specific users. Also, analyzing
the answers regarding the contractual relationships of a project in
Japan, significant differences were observed for the factors about
security constraints (Lack of resources: U =14138.0, p<.05, r=0.11, No
authority/Conservative: U =14650.0, p<.05, r=0.11), suggesting that
projects with contracted development feel strongly constrained
about security. Although the number of factors with significant
differences was slightly different, we determined that the user scope
of software and the project’s contractual relationships impact the
security of products, both in the US and Japan.
Analyzing the answers regarding the development method in
Japan, we observed a significant difference in answers to R1 (re-
sources spent for security: H(3)=6.2, p<.05). However, follow-up
multiple comparisons were not significant. These results differ from
those for the US, but we could not clarify the cause of these differ-
ences. As mentioned in Section 4.3.3, detailed analysis of the impact
of development methods on project security is a future work.
4.5.3 Developers and managers. We analyzed in the same way as
Sections 4.4.1 and 4.4.2 for participants in Japan and compared the
results with those for participants in the US. As a result of the com-
parison of security constraints between developers and managers
in Japan, we found significant differences in Unconcerned about
security (U =18029.0, p<.05, r=0.12) and No authority/Conservative
(U =21751.0, p<.01, r=0.32). Also, the same for the result of the US,
a large difference was observed in No authority/Conservative, sug-
gesting developers feel more constrained than managers. We found
Figure 7: Comparison of security efforts and constraints be-
tween the US and Japan **w/sig diff (p<.01)
that C8 (decision-making is difficult) ranked 2nd and 5th for man-
agers and developers, respectively, suggesting that this is a strong
constraint common for both positions, similar to in the US. In ad-
dition, C10 (no decision-making authority) was the constraint felt
most strongly by developers in Japan, where 57% selected “Strongly
agree” or “Agree.”
We analyzed the answers of participants in Japan to see how well
they understood the overall security efforts made in their projects.
Similar to the US, developers in Japan tended to answer “Not sure” in
E1–E15 more than managers. In Japan, 9.7% of participants selected
“Not sure” in E1–E15, which was much higher than 3.5% in the US,
suggesting that developers in Japan tended to understand less about
the overall security efforts made in their projects.
Summarizing the above, the following points are found to be
common between the US and Japan: developers and managers
both feel strongly constrained about difficulties in decision-making;
developers feel strongly constrained about their lack of decision-
making authority; and developers tend to understand less about
the overall security efforts made in their project than managers.
5 DISCUSSIONS
On the basis of the findings of our user study, we make suggestions
for secure software development in projects and for research studies
targeting software development. Lastly, we describe the limitations
of our survey.
5.1 Implications
Improving software security equally regardless of the user
scope. In Section 4.3.1, we revealed that software development
professionals developing software limited to specific users tend
to apply fewer security measures than those developing software
used by the general public. As mentioned by Assel et al. [5], since
security measures are a trade-off between their realistic cost and
21012Vuln. assessment **Implementation **Plan/Design **21012Mean Likert-scale scoreDifficulty of introducing sec. **No authority/Conservative **Unconcerned about sec. **Lack of resources **USJapan357ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Fumihiro Kanei, Ayako Akiyama Hasegawa, Eitaro Shioji, and Mitsuaki Akiyama
expected benefits, it is intuitive that software limited to specific
users, i.e., software considered to have a low risk of attack, tends to
have fewer security measures. On the other hand, recent software
development processes should avoid applying insufficient security
measures due to assuming that the system is closed and trusting
the users, because Zero Trust [27] is pervasive across industries
today. Zero Trust is a concept that changes security from traditional
perimeter-based security to eliminating the default trust of both
internal and external parties. In fact, there have been numerous
reports of systems developed for specific users being attacked by
outsiders. For instance, internal systems not intended to be accessed
from the outside have often been exploited by advanced persistent
threats (APTs) that use various strategies to move laterally within
an enterprise environment. Therefore, software must be developed
on the basis of today’s pervasive concept of zero-trust security.
Supporting security-related decision-makings in software
development. According to the results in Sections 4.4.1 and 4.4.2,
the developers tend not to know the overall security measures of the
project or have the decision-making authority to implement them.
Therefore, when considering security of software development,
it is important to approach managers who have decision-making
authority. Moreover, since the difficulty of decision-making tends
to hinder secure software development, managers will need to be
assisted in the decision-making process. One possible approach to
support the decision-making process is to design metrics that can
be used as indicators for security-related decision-making, such as
metrics for potential vulnerability risk calculated by the degree of
dependency on third-party components [24]. If these metrics can
be calculated easily and notified to managers accurately and effec-
tively, they may be able to reduce the difficulties in security-related
decision-making.
In addition, the results in Section 4.4.1 indicate that managers
tend to feel less constrained about security than developers. This
discrepancy in perceptions within the development team may hin-
der the smooth implementation of security measures. If a manager
does not correctly recognize the importance of security measures
or the actual impediment of adopting them, proper security mea-
sures may not be taken. In fact, one developer wrote the following
open-ended response: “Getting the client, managers and development
team to be on the same page has always been a difficult task.” To
resolve this discrepancy in developers’ and managers’ awareness,
interventions can be conducted to share the security issues that
developers are concerned about with managers.
In supporting decision-making, it is necessary to consider not
only the roles of people involved in the development project but also
the stakeholders. From the results in Section 4.3.2, we found that
it is important to approach the organization that has the decision-
making authority to implement the security measures (i.e., customer
or prime contractor organization), because subcontractors carry
out the development projects in accordance with pre-determined
deadlines, budgets, and functional requirements but tend not to have
the discretion to implement the security measures. In particular,
reaching out to higher-level stakeholders in the contract hierarchy
is more effective in Japan, where a lot of contract developments are
conducted.
Suggestion about design of user study for software develop-
ment professionals. Two points found in this study should be
considered in future research on software developers: (i) develop-
ers tend not to fully understand the implementation of security
measures in their projects, and (ii) developers often do not have the
authority to make decisions about implementing security measures.
Much usable security research that has investigated people involved
in software development has pointed out the ecological validity of
findings, i.e., the extent to which research findings generalize to
real-world settings [2, 26, 38]. To improve the ecological validity,
two factors have been discussed: participant demographics [2, 26]
and experimental context [2, 38]. While computer science students,
freelancers, and company developers have been investigated in
previous research for the former factor, we shed new light on man-
agers in this study. Although much research has investigated people
involved in software development in the context of usable secu-
rity, to the best of our knowledge, few studies [30, 32, 36] have
distinguished between managers and developers as different par-
ticipant demographics or analyzed differences in manager’s and
developer’s awareness and behaviors. When designing surveys tar-
geting software development professionals, one must first consider
the characteristics of developers and managers and select and re-
cruit appropriate participants who suit the purpose and content of
a survey.
5.2 Limitations
Social desirability bias. The results in our work are based on
the participants’ self-reported data. Especially, security questions
may be subject to social desirability bias (SDB), where participants
are likely to give socially preferred answers depending on their
affiliation and position. To reduce the impact of SDB, we explained
at the beginning of the questionnaire that the survey would be
conducted anonymously and that all questions were voluntary
(i.e., participants could choose not to answer questions if they are
difficult to answer). In fact, there was a small number of empty
responses in our survey. Specifically, A2, E2, and C4 had relatively
high percentages (1.5–1.95%) of empty responses. These questions
may have been perceived by some participants as indirectly asking
about the security weaknesses in their project.
Limited countries we investigated. In this work, we attempted
to understand the characteristics of software development more
generally by investigating two countries rather than a single coun-
try (i.e., US). We selected Japan as a representative country that
differs greatly from the US in its development style. Future work
needs to comparatively study more countries (such as European
ones), which may yield more generic results.
Various roles of managers. In this work, we targeted managers
who have security-related decision-making authority. In general,
the positions of managers in an organization are hierarchical and
diverse, so there are various managers with different privileges.
Therefore, by disaggregating the types of managers surveyed, the
ways that people in different roles and positions within a project
impact security can be understood in more detail.
6 CONCLUSION
In this study, we conducted an online survey of people involved in
software development projects. Our analysis of survey results re-
vealed that characteristics of development or software development
358A Cross-role and Bi-national Analysis on Security Efforts and Constraints of Software Development Projects
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
professionals’ positions impact the security of software. Among
those characteristics, the lack of security-related decision-making
authority or the difficulty in making decisions strongly impacts
software security; therefore, when considering security measures
for software development professionals in the future, it is impor-
tant to approach the people or organizations with decision-making
authority (e.g., managers, project’s client). In addition, since there
is a gap in security awareness between developers and managers
in a project, one must appropriately design a survey considering
this fact when conducting a survey study targeting software devel-
opment professionals.
REFERENCES
[1] Yasemin Acar, Michael Backes, Sascha Fahl, Doowon Kim, Michelle L Mazurek,
and Christian Stransky. 2018. You get where you’re looking for: The impact of
information sources on code security. In Proceedings of the 2016 IEEE Symposium
on Security and Privacy (SP ’16). IEEE.
[2] Yasemin Acar, Sascha Fahl, and Michelle L. Mazurek. 2016. You are not your
developer, either: A research agenda for usable security and privacy research
beyond end users. In Proceedings of the 2016 IEEE Cybersecurity Development
(SecDev ’16). IEEE, 3–8.
[3] Yasemin Acar, Christian Stransky, Dominik Wermke, Charles Weir, Michelle L.
Mazurek, and Sascha Fahl. 2017. Developers Need Support, Too: A Survey
of Security Advice for Software Developers. In Proceedings of the 2017 IEEE
Cybersecurity Development (SecDev ’17). IEEE.
[4] Noura Alomar, Primal Wijesekera, Edward Qiu, and Serge Egelman. 2020. “You’ve
Got Your Nice List of Bugs, Now What?” Vulnerability Discovery and Manage-
ment Processes in the Wild. In Proceedings of the 16th Symposium on Usable
Privacy and Security (SOUPS ’20). USENIX Association, 319–339.
[5] Hala Assal and Sonia Chiasson. 2018. Security in the Software Development
Lifecycle. In Proceedings of the 14th Symposium on Usable Privacy and Security
(SOUPS ’18). USENIX Association.
[6] Hala Assal and Sonia Chiasson. 2019. “Think Secure from the Beginning”: A
Survey with Software Developers. In Proceedings of the 2019 CHI Conference on
Human Factors in Computing Systems (CHI ’19). ACM.
[7] Dejan Baca, Martin Boldt, Bengt Carlsson, and Andreas Jacobsson. 2015. A Novel
Security-Enhanced Agile Software Development Process Applied in an Indus-
trial Setting. In Proceedings of the 10th International Conference on Availability,
Reliability and Security (ARES ’15). 11–19.
[8] Steffen Bartsch. 2011. Practitioners’ Perspectives on Security in Agile Develop-
ment. In Proceedings of the 6th International Conference on Availability, Reliability
and Security (ARES ’11). IEEE, 479–484.
[9] Jens Dibbern, Tim Goles, Rudy Hirschheim, and Bandula Jayatilaka. 2004. Infor-
mation Systems Outsourcing: A Survey and Analysis of the Literature. SIGMIS
Database 35, 4 (2004), 6–102.
[10] Leandre R Fabrigar, Duane T Wegener, Robert C MacCallum, and Erin J Strahan.
1999. Evaluating the use of exploratory factor analysis in psychological research.
Psychological methods 4, 3 (1999), 272.
[11] Viktoria Felmetsger, Ludovico Cavedon, Christopher Kruegel, and Giovanni
Vigna. 2010. Toward automated detection of logic vulnerabilities in web applica-
tions. In Proceedings of the 19th USENIX Conference on Security Symposium (SEC
’10). USENIX Association, 143–160.
[12] Felix Fischer, Konstantin Böttinger, Huang Xiao, Christian Stransky, Yasemin
Acar, Michael Backes, and Sascha Fahl. 2017. Stack Overflow Considered Harmful?
The Impact of Copy&Paste on Android Application Security.. In Proceedings of
the 2017 IEEE Symposium on Security and Privacy (SP ’17). IEEE, 121–136.
[13] Felix Fischer, Huang Xiao, Ching-Yu Kao, Yannick Stachelscheid, Benjamin John-
son, Danial Razar, Paul Fawkesley, Nat Buckley, Konstantin Böttinger, Paul
Muntean, and Jens Grossklags. 2019. Stack Overflow Considered Helpful! Deep
Learning Security Nudges Towards Stronger Cryptography. In Proceedings of the
28th USENIX Conference on Security Symposium (SEC ’19). USENIX Association,
339–356.
[14] Gartner.
Newsroom (In
Japanese).
www.gartner.com/jp/newsroom/press-releases/pr-20190221.
in
Enterprise.
https://circle.gartner.com/Portals/2/Resources/pdf/Agile in the Enterprise
2019 - Results Summary (updated).pdf.
Summary: Agile
[16] Sonja Glumich, Juanita Riley, Paul Ratazzi, and Amanda Ozanam. 2018. BP: Inte-
grating Cyber Vulnerability Assessments Earlier into the Systems Development
Lifecycle: A Methodology to Conduct Early-Cycle Cyber Vulnerability Assess-
ments. In Proceedings of the 2018 IEEE Cybersecurity Development (SecDev ’18).
IEEE.
[15] Gartner.
https://
Results
2019.
2019.
the
[17] Peter Leo Gorski, Luigi Lo Iacono, Dominik Wermke, Christian Stransky, Sebas-
tian Moeller, Yasemin Acar, and Sascha Fahl. 2018. Developers Deserve Security
Warnings, Too: On the Effect of Integrated Security Advice on Cryptographic
API Misuse. In Proceedings of the 14th Symposium on Usable Privacy and Security
(SOUPS ’18). USENIX Association.
[18] Brent Dale Hill. 2011. Sequential Kaiser-meyer-olkin Procedure as an Alternative
for Determining the Number of Factors in Common-factor Analysis: a Monte Carlo
Simulation. Ph. D. Dissertation. Oklahoma State University.
[19] Luigi Lo Iacono and Peter Leo Gorski. 2017. I Do and I Understand. Not Yet True
for Security APIs. So Sad. In Proceedings of the 2nd European Workshop on Usable
Security (EuroUSEC ’17).
[20] Faris Bugra Kokulu, Ananta Soneji, Tiffany Bao, Yan Shoshitaishvili, Ziming
Zhao, Adam Doupé, and Gail-Joon Ahn. 2019. Matched and Mismatched SOCs:
A Qualitative Study on Security Operations Center Issues. In Proceedings of the
2019 ACM SIGSAC Conference on Computer and Communications Security (CCS
’19). ACM.
[21] V. Benjamin Livshits and Monica S. Lam. 2005. Finding Security Vulnerabilities
in Java Applications with Static Analysis. In Proceedings of the 14th Conference
on USENIX Security Symposium (SSYM ’05). USENIX Association, 18.
[22] Siqi Ma, David Lo, Teng Li, and Robert H. Deng. 2016. CDRep: Automatic Repair
of Cryptographic Misuses in Android Applications. In Proceedings of the 11th
ACM on Asia Conference on Computer and Communications Security (ASIA CCS
’16). ACM.
[23] Macromill Group. 2020. https://group.macromill.com/.
[24] Fabio Massacci and Ivan Pashchenko. 2021. Technical Leverage in a Software
Ecosystem: Development Opportunities and Security Risks. In Proceedings of the
43rd International Conference on Software Engineering (ICSE ’21). IEEE.
Communications.
[25] Ministry
2019.
https://www.soumu.go.jp/johotsusintokei/
Internal
Affairs
and
of
Japanese).
(In
whitepaper/ja/r01/html/nd112210.html.
[26] Alena Naiakshina, Anastasia Danilova, Eva Gerlitz, and Matthew Smith. 2020. On
Conducting Security Developer Studies with CS Students: Examining a Password-
Storage Study with CS Students, Freelancers, and Company Developers. In Pro-
ceedings of the 2020 CHI Conference on Human Factors in Computing Systems (CHI
’20). ACM, 1–13.
[27] National Institute of Standards and Technology. 2020. Zero Trust Architecture.
https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207.pdf.
[28] Duc Cuong Nguyen, Dominik Wermke, Yasemin Acar, Michael Backes, Charles