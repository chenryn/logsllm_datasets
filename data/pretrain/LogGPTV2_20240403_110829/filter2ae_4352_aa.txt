# 概述
和 `codeql`，`Fortify` 相比 `Joern`不需要编译源码即可进行扫描，适用场景和环境搭建方面更加简单。
# 环境搭建
首先安装 `jdk` ，然后从`github`下载压缩包解压即可
    https://github.com/ShiftLeftSecurity/joern/releases/
解压之后执行 `joern` 即可
然后我们 进入`sca-workshop/joern-example` 通过 `importCode` 分析我们的示例代码
    joern-example$ ~/sca/joern-cli/joern
    Compiling /home/hac425/sca-workshop/joern-example/(console)
    creating workspace directory: /home/hac425/sca-workshop/joern-example/workspace
         ██╗ ██████╗ ███████╗██████╗ ███╗   ██╗
         ██║██╔═══██╗██╔════╝██╔══██╗████╗  ██║
         ██║██║   ██║█████╗  ██████╔╝██╔██╗ ██║
    ██   ██║██║   ██║██╔══╝  ██╔══██╗██║╚██╗██║
    ╚█████╔╝╚██████╔╝███████╗██║  ██║██║ ╚████║
     ╚════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝
    Type `help` or `browse(help)` to begin
    joern> importCode(inputPath="./", projectName="example")
然后使用 `cpg.method.name(".*get.*").toList` 可以打印出所有函数名中包含 `get` 的函数
    joern> cpg.method.name(".*get.*").toList
    res15: List[Method] = List(
      Method(
        id -> 1000114L,
        code -> "char * get_user_input_str ()",
        name -> "get_user_input_str",
        fullName -> "get_user_input_str",
        isExternal -> false,
        signature -> "char * get_user_input_str ()",
        ...........
除了使用 `importCode` 解析代码外，还可以通过 `joern-parse` 工具解析代码
    joern-example$ ~/sca/joern-cli/joern-parse ./
    joern-example$ ls
    cpg.bin  example.c  Makefile  system_query  test.sc  workspace
解析完成后默认会将解析结果保存到 `cpg.bin` 中，可以通过 `--out` 参数指定保存的文件名。
    $ ~/sca/joern-cli/joern-parse --help
    Usage: joern-parse [options] input-files
      input-files              directories containing: C/C++ source | Java classes | a Java archive (JAR/WAR)
      --language        source language: [c|java]. Default: c
      --out             output filename
然后进入 `joern` 的命令行使用 `importCpg` 函数即可导入之前的解析结果。
    joern> importCpg("cpg.bin")
    Creating project `cpg.bin8` for CPG at `cpg.bin`
    Creating working copy of CPG to be safe
    Loading base CPG from: /home/hac425/sca-workshop/joern-example/workspace/cpg.bin8/cpg.bin.tmp
    res0: Option[Cpg] = Some(value = io.shiftleft.codepropertygraph.Cpg@5b2ac349)
然后就可以开始对代码进行检索了。
# Joern语法简介
Joern 的规则脚本的开发语言是 `scala`
，其在代码分析阶段会将代码转换成抽象语法树、控制流图、数据流图等结构，然后在规则解析阶段会将这些图的属性、节点都封装成 Java对象，我们开发的 scala
规则脚本主要就是通过 **访问这些对象以及 Joern提供的API** 来完成查询。
Joern 使用 `cpg` 这个全局对象表示目标源码中所有信息，通过这个对象可以遍历源码中的所有函数调用、类型定义等，比如使用 `cpg.call`
获取代码中的所有函数调用
    joern> cpg.call
    res4: Traversal[Call] = Traversal
`joern` 很多方法的返回值都是 `Traversal` 类型，可以使用 `toList` 方法（ `l` 方法是这个的缩写）转成
`List`方便查看.
    joern> cpg.call.toList
或者
    joern> cpg.call.l
这里有一点需要注意，Joern会把 `=, +, &&` 等逻辑、数学运算都转换为函数调用（形式为 `.xxx`）保存到语法树中
    Call(
        id -> 1000529L,
        code -> "*xx = user",
        name -> ".assignment",
        order -> 4,
        methodFullName -> ".assignment",
        argumentIndex -> 4,
        signature -> "TODO",
        lineNumber -> Some(value = 259),
        columnNumber -> Some(value = 9),
        methodInstFullName -> None,
        typeFullName -> "",
        depthFirstOrder -> None,
        internalFlags -> None,
        dispatchType -> "STATIC_DISPATCH",
        dynamicTypeHintFullName -> List()
      )
上面可以看到 `=` 赋值符号使用 `.assignment` 表示。
将 `Joern` 的查询结果转成 `List` 后（使用 `Traversal` 也可以进行过滤），我们就可以使用 `Scala`
的语法来对结果进行过滤，比如 `filter` 方法
    joern> cpg.call.l.filter(c => c.name == "system")
    res7: List[Call] = List(
      Call(
        id -> 1000419L,
        code -> "system(cmd)",
        name -> "system",
        order -> 1,
        methodFullName -> "system",
        argumentIndex -> 1,
        ................................
        ................................
这里就是对 `call` 的结果进行过滤，返回调用 `system` 函数的位置。
在开发规则的时候可以查看代码的`ast`, `cpg`, `ddg`等图形来帮助调试
    joern> var m = cpg.method.name("call_system_safe_example").l.head
    joern> m.dotAst.l
    res19: List[String] = List(
      """digraph call_system_safe_example {
    "1000522" [label = "(METHOD,call_system_safe_example)" ]
    "1000523" [label = "(BLOCK,,)" ]
    "1000524" [label = "(LOCAL,user: char *)" ]
    "1000525" [label = "(.assignment,*user = get_user_input_str())" ]
    "1000526" [label = "(IDENTIFIER,user,*user = get_user_input_str())" ]
    "1000527" [label = "(get_user_input_str,get_user_input_str())" ]
    "1000528" [label = "(LOCAL,xx: char *)" ]
    "1000529" [label = "(.assignment,*xx = user)" ]
    "1000530" [label = "(IDENTIFIER,xx,*xx = user)" ]
    "1000531" [label = "(IDENTIFIER,user,*xx = user)" ]
    "1000532" [label = "(CONTROL_STRUCTURE,if (!clean_data(xx)),if (!clean_data(xx)))" ]
    "1000533" [label = "(.logicalNot,!clean_data(xx))" ]
    "1000534" [label = "(clean_data,clean_data(xx))" ]
    "1000535" [label = "(IDENTIFIER,xx,clean_data(xx))" ]
    "1000536" [label = "(RETURN,return 1;,return 1;)" ]
    "1000537" [label = "(LITERAL,1,return 1;)" ]
    "1000538" [label = "(system,system(xx))" ]
    "1000539" [label = "(IDENTIFIER,xx,system(xx))" ]
    "1000540" [label = "(RETURN,return 1;,return 1;)" ]
    "1000541" [label = "(LITERAL,1,return 1;)" ]
    "1000542" [label = "(METHOD_RETURN,int)" ]
      "1000522" -> "1000523"
      "1000522" -> "1000542"
      "1000523" -> "1000524"
      "1000523" -> "1000525"
      "1000523" -> "1000528"
      "1000523" -> "1000529"
      "1000523" -> "1000532"
      "1000523" -> "1000538"
      "1000523" -> "1000540"
      "1000525" -> "1000526"
      "1000525" -> "1000527"
      "1000529" -> "1000530"
      "1000529" -> "1000531"
      "1000532" -> "1000533"
      "1000532" -> "1000536"
      "1000533" -> "1000534"
      "1000534" -> "1000535"
      "1000536" -> "1000537"
      "1000538" -> "1000539"
      "1000540" -> "1000541"
    }
    """
    )
然后找个[在线Graphviz绘图网站](https://dreampuf.github.io/GraphvizOnline/)绘制一下即可
除了`Ast`，`Joern` 还对代码构建一下几种结构
    joern> m.dot
    dotAst    dotCdg    dotCfg    dotCpg14  dotDdg    dotPdg
本节只对基础语法进行介绍，其他的语法请看下文或者官方文档。
# system命令执行检测
本节涉及代码
    https://github.com/hac425xxx/sca-workshop/tree/master/joern-example/system_query
漏洞代码如下