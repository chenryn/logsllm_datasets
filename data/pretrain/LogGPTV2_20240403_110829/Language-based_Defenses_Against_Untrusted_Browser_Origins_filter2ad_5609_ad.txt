8
tect against this kind of stack-walking, but they rely on
non-standard browser features and are not very reliable
(e.g. we discovered a ﬂaw against the countermeasure
in [21]: trying to set the caller property of a function
to null fails, an issue immediately ﬁxed by the authors
in their online version). Future versions of JavaScript
may prohibit stack-walking, but in current browsers our
restriction is the prudent choice.
To enforce this restriction, the type system requires
all variables used in a DJS program to be lexically
scoped, within a function or scope object. For example,
var s = {x:42}; with (s){x = 4;} is valid DJS code, but
x = 4 is not.
Preventing Implicit Function Calls.
In JavaScript,
non-local access can arise for example from its non-
standard scoping rules, from the prototype-based inher-
itance mechanism, from automated type conversion and
from triggering getters and setters on object properties.
Hence, to prevent defensive code from accidentally
calling malicious external functions, DJS requires all ex-
pressions to be statically typed. This means that vari-
ables can only be assigned values of a single type; arrays
have a ﬁxed non-extensible number of (same-typed) val-
ues; objects have a non-extensible set of (typed) proper-
ties. Typing ensures that values are only accessed at the
right type and that objects and arrays are never accessed
beyond their boundaries (preventing accidental accesses
to prototypes and getters/setters). To prevent automatic
type conversion, overloaded operators (e.g. +) must only
be used with arguments of the same type.
Due to these restrictions, there is no general computed
property access e[e] in the syntax. Instead, we include a
variety of dynamic accessors to enable numeric, within-
bound property access to arrays and strings using built-in
dynamic checks, such as x[(e>>>0)%x.length].
DJS also forbids property enumeration for(i in o),
constructors and prototype inheritance.
Preventing Source Code Leakage. The source code
of a DJS program is considered secret, and should not
be available to untrusted code. We identify four attack
vectors that a trusted script can use to read (at least part
of) the source code of another script in the same origin:
using the toSource property of a function, using the stack
property of an exception, reading the code of an inline
script from the DOM, or re-loading a remote script as
data using AJAX or Flash.
To avoid the ﬁrst attack, DJS programs only export
stub functions that internally call the functions whose
source code is sensitive. Calling toSource on the former
only shows the stub code and does not reveal the source
code of the latter. As discussed at the end of Section 3.1,
we can avoid the second attack by running wrapped DJS
code within a try block. To avoid the third and fourth
Types and Environments.
(cid:31)τ(cid:30) ::= number | boolean | string | undeﬁned
˜τ → τ
˜τ[ρ] → τ
δ
|
|
|
Base types
Function
Method operating on properties ρ
Objects and arrays
(cid:31)δ(cid:30) ::= σ | σ∗
(cid:31)σ(cid:30) ::= ρ | [τ]n,n ∈ N
(cid:31)ρ(cid:30) ::= {x1 : τ1, . . . ,x n : τn}
(cid:31)κ(cid:30) ::= s | o
(cid:31)Φ(cid:30) ::= ε | Φ,x:τ
(cid:31)Γ(cid:30) ::= ε | Γ,[Φ]κ
[σ∗ and σ are same thing sometimes]
Subtyping.
Extensible or Fixed types
Array of length n
Object with ﬁelds x1 ···x n
Scope kind
Scope frame
Typing environment
τ  0
Scope
Assign
Φ(x) =τ
Γ,[Φ]κ (cid:31) x : τ
Γ (cid:31) e1 : τ
Γ,[ ˜x : ˜α,(yi : µi)i,
line 1:38 to 1:46: x("a,b")
type  ’a}> was expected but got .
# ./djst --pv >model.pv && proverif -lib djcl model.pv
(function(){ var mackey = _lib.secret("xxx")+"";
var _ = function(s){return _lib.hmac(s,mackey)};
return function(s){if(typeof s=="string") return _(s)}})
Typing successful, CPU time: 4ms.
--- Free variables ---
_lib:{"hmac":(string,string)->string,"secret":string->string}
Process:
{1}new fun_9: channel;
(
{2}!
{3}in(fun_9, ret_10: channel);
{4}new var_mackey: Memloc;
{5}let s_11: String = str_1 in
Figure 6: Screenshot of the DJS tool: ﬁrst a type-
checking error, then a (cut off) ProVerif translation.
4.1 Conformance Checker
We implement fully automatic type inference for the DJS
type system. Our tool can check if an input script is valid
DJS and provides informative error messages if it fails to
typecheck. Figure 6 shows a screenshot with a type error
and then the correct inferred type.
In our type system, an object such as {a:0, b:1}
can be assigned multiple types: {a:number,b:number},
{a:number}, {b:number} or {}. Subtyping induces a partial
order relation on the admissible types of an expression;
the goal of type inference is to compute the maximal ad-
missible type of a given expression.
inference that
type
To compute this type, we implement a restricted
variant of Hindley–Milner
incorpo-
rates width subtyping and infers
schemes.
For example,
the generalized type for the function
function f(x){return x[0]} is ∃τ. [τ]1 → τ. Note the ex-
istential quantiﬁer in front of τ: function types are not
generalized, which would be unsound because of muta-
ble variables. Thus, if the type inference processes the
term f([1]), uniﬁcation will force τ = number, and any
later attempt to use f(["a"]) will fail, while f([1,2]) will
be accepted.
The uniﬁcation of object type schemes yields the
union of the two sets of properties: starting from x : τ, af-
ter processing x.a + x.b, uniﬁcation yields τ = {a : τ1,b :
τ2} and τ1 = τ2. Literal constructors are assigned their
maximal, ﬁxed object type {xi : Ti}∗i∈[1..n]. Uniﬁcation of
an object type {X} with the ﬁxed {xi : Ti}∗i∈[1..n] ensures
X ⊆ {xi : Ti}i∈[1..n].
Our tool uses type inference as a heuristic, and re-
lies on the soundness of the type checking rules of Sec-
tion 3.3 for its correctness. Our inference and uniﬁcation