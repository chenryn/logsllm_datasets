### 优化后的文本

#### SQL查询及结果解释

以下SQL查询用于分析PostgreSQL数据库中表的`FREEZE`操作可能产生的I/O影响、容量占比以及相关统计信息。通过这些数据，可以更好地理解垃圾回收机制，并调整参数以避免`FREEZE`风暴。

```sql
SELECT
  pg_size_pretty(t.ssz) AS ssz2,     -- 这个batch FREEZE 会导致多少读IO (表+TOAST+索引)
  pg_size_pretty(t.ssz * 3) AS ssz3, -- 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)
  pg_size_pretty(t.ssz_sum) AS ssz4, -- 所有batch 所有表的总大小  (表+TOAST+索引)
  round(100 * (t.ssz / t.ssz_sum), 2) || ' %' AS ratio_batch, -- 这个BATCH的容量占比，目标是让所有BATCH占比尽量一致
  round(100 * (pg_total_relation_size(t.reloid) / t.ssz), 2) || ' %' AS ratio_table, -- 这个表占整个batch的容量占比，大表尽量错开freeze
  t.*
FROM
  (
    SELECT a.*, b.*
    FROM
      (
        SELECT
          min(least(remain_ages_xid, remain_ages_mxid)) AS v_min,   -- 整个数据库中离自动FREEZE的最小剩余事务ID数
          max(least(remain_ages_xid, remain_ages_mxid)) AS v_max    -- 整个数据库中离自动FREEZE的最大剩余事务ID数
        FROM v_freeze
      ) AS a,
      LATERAL (
        SELECT
          count(*) OVER w AS cnt,                                                -- 这个batch 有多少表
          sum(pg_total_relation_size(reloid)) OVER () AS ssz_sum,                -- 所有batch 所有表的总大小  (表+TOAST+索引)
          sum(pg_total_relation_size(reloid)) OVER w AS ssz,                     -- 这个batch 的表大小总和 (表+TOAST+索引)
          pg_size_pretty(min(pg_total_relation_size(reloid)) OVER w) AS min_sz,  -- 这个batch 最小的表多大
          pg_size_pretty(max(pg_total_relation_size(reloid)) OVER w) AS max_sz,  -- 这个batch 最大的表多大
          pg_size_pretty(avg(pg_total_relation_size(reloid)) OVER w) AS avg_sz,  -- 这个batch 平均表多大
          pg_size_pretty(stddev_samp(pg_total_relation_size(reloid)) OVER w) AS stddev_sz,  -- 这个batch 表大小的方差, 越大, 说明表大小差异化明显
          min(least(remain_ages_xid, remain_ages_mxid)) OVER w AS min_rest_age,             -- 这个batch 距离自动FREEZE最低剩余事务数
          max(least(remain_ages_xid, remain_ages_mxid)) OVER w AS max_rest_age,             -- 这个batch 距离自动FREEZE最高剩余事务数
          stddev_samp(least(remain_ages_xid, remain_ages_mxid)) OVER w AS stddev_rest_age,  -- 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)
          corr(least(remain_ages_xid, remain_ages_mxid), pg_total_relation_size(reloid)) OVER w AS corr_rest_age_sz,  -- 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 stddev_sz 说明的问题越有价值
          t1.*
        FROM
          (
            SELECT
              width_bucket(
                least(tt.remain_ages_xid, tt.remain_ages_mxid),
                a.v_min,
                a.v_max,
                greatest((a.v_max - a.v_min) / 1000000, 1)         -- 100万个事务, 如果要更改统计例如，修改这个值即可
              ) AS wb,                                           -- 第几个BATCH, 每个batch代表流逝100万个事务
              *
            FROM v_freeze tt
          ) AS t1
        WINDOW w AS (PARTITION BY t1.wb)
      ) AS b
  ) t
ORDER BY
  t.wb,
  least(t.remain_ages_xid, t.remain_ages_mxid),
  pg_total_relation_size(t.reloid) DESC;
```

#### 返回结果解释

- `ssz2`: 这个batch FREEZE 会导致多少读IO (表+TOAST+索引)
- `ssz3`: 这个batch FREEZE 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)
- `ssz4`: 所有batch 所有表的总大小 (表+TOAST+索引)
- `ratio_batch`: 这个BATCH的容量占比，目标是让所有BATCH占比尽量一致
- `ratio_table`: 这个表占整个batch的容量占比，大表尽量错开freeze
- `v_min`: 整个数据库中离自动FREEZE的最小剩余事务ID数
- `v_max`: 整个数据库中离自动FREEZE的最大剩余事务ID数
- `cnt`: 这个batch 有多少表
- `ssz_sum`: 所有batch 所有表的总大小 (表+TOAST+索引)
- `ssz`: 这个batch 的表大小总和 (表+TOAST+索引)
- `min_sz`: 这个batch 最小的表多大
- `max_sz`: 这个batch 最大的表多大
- `avg_sz`: 这个batch 平均表多大
- `stddev_sz`: 这个batch 表大小的方差, 越大, 说明表大小差异化明显
- `min_rest_age`: 这个batch 距离自动FREEZE最低剩余事务数
- `max_rest_age`: 这个batch 距离自动FREEZE最高剩余事务数
- `stddev_rest_age`: 这个batch 距离自动FREEZE剩余事务数的方差, 越小，说明这个batch触发freeze将越平缓, 越大, 说明这个batch将有可能在某些点集中触发freeze (但是可能集中触发的都是小表)
- `corr_rest_age_sz`: 表大小与距离自动freeze剩余事务数的相关性，相关性越强(值趋向1或-1) stddev_rest_age 与 stddev_sz 说明的问题越有价值
- `wb`: 第几个BATCH, 每个batch代表流逝100万个事务
- `sz`: 表的大小(含TOAST, 索引)
- `reloid`: 表名(物化视图)
- `relkind`: r=表, m=物化视图
- `remain_ages_xid`: 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为事务ID
- `remain_ages_mxid`: 再产生多少个事务后, 自动垃圾回收会触发FREEZE, 起因为并发事务ID
- `xid_lower_to_minage`: 如果触发FREEZE, 该表的事务ID年龄会降到多少
- `mxid_lower_to_minage`: 如果触发FREEZE, 该表的并行事务ID年龄会降到多少
- `vacuum_trigger_freeze1`: 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(事务ID年龄达到阈值)
- `vacuum_trigger_freeze2`: 如果手工执行VACUUM, 是否会触发FREEZE, 触发起因(并行事务ID年龄达到阈值)
- `reloptions`: 表级参数, 优先. 例如是否开启自动垃圾回收, autovacuum_freeze_max_age, autovacuum_freeze_table_age, autovacuum_multixact_freeze_max_age, autovacuum_multixact_freeze_table_age
- `v1`: 如果表的事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures
- `v2`: 如果表的并行事务ID年龄大于该值, 即使未开启autovacuum也会强制触发FREEZE, 并告警Preventing Transaction ID Wraparound Failures
- `v3`: 手动或自动垃圾回收时, 如果记录的事务ID年龄大于该值, 将被FREEZE
- `v4`: 手动或自动垃圾回收时, 如果记录的并行事务ID年龄大于该值, 将被FREEZE
- `v5`: 手动垃圾回收时, 如果表的事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_freeze_max_age
- `v6`: 手动垃圾回收时, 如果表的并行事务ID年龄大于该值, 将触发FREEZE. 该参数的上限值为 %95 autovacuum_multixact_freeze_max_age
- `v7`: 自动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源. -1 表示沿用vacuum_cost_delay的设置
- `v8`: 自动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit, vacuum_cost_page_miss, vacuum_cost_page_dirty参数以及周期内的操作决定. -1 表示沿用vacuum_cost_limit的设置
- `v9`: 手动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源.
- `v10`: 手动垃圾回收时, 每轮回收周期设多大限制, 限制由vacuum_cost_page_hit, vacuum_cost_page_miss, vacuum_cost_page_dirty参数以及周期内的操作决定.
- `autovacuum`: 是否开启自动垃圾回收

### 小结

通过本文提供的三个视图，我们可以了解每个表在何时会触发自动`FREEZE`，以及可能产生的I/O量。同时，还可以查看`FREEZE`的后台进程调度参数，哪些表在手动执行`VACUUM`时会触发`FREEZE`。本文内容涵盖了垃圾回收知识、统计学和高级SQL等知识点。使用本文提到的SQL，你可以预测并规避`FREEZE`风暴，掌握PostgreSQL的垃圾回收机制，实现平滑的垃圾回收策略。

### 视图1 (v_freeze)

按`FREEZE`来临的时间顺序排序，返回每个表在多少个事务后会触发自动`FREEZE`，详细信息如下：

- 表的大小(含TOAST, 索引)
- 表名(物化视图)
- `r=表, m=物化视图`
- 再产生多少个事务后, 自动垃圾回收会触发`FREEZE`, 起因为事务ID
- 再产生多少个事务后, 自动垃圾回收会触发`FREEZE`, 起因为并发事务ID
- 如果触发`FREEZE`, 该表的事务ID年龄会降到多少
- 如果触发`FREEZE`, 该表的并行事务ID年龄会降到多少
- 如果手工执行`VACUUM`, 是否会触发`FREEZE`, 触发起因(事务ID年龄达到阈值)
- 如果手工执行`VACUUM`, 是否会触发`FREEZE`, 触发起因(并行事务ID年龄达到阈值)
- 表级参数, 优先. 例如是否开启自动垃圾回收, `autovacuum_freeze_max_age`, `autovacuum_freeze_table_age`, `autovacuum_multixact_freeze_max_age`, `autovacuum_multixact_freeze_table_age`
- 如果表的事务ID年龄大于该值, 即使未开启`autovacuum`也会强制触发`FREEZE`, 并告警`Preventing Transaction ID Wraparound Failures`
- 如果表的并行事务ID年龄大于该值, 即使未开启`autovacuum`也会强制触发`FREEZE`, 并告警`Preventing Transaction ID Wraparound Failures`
- 手动或自动垃圾回收时, 如果记录的事务ID年龄大于该值, 将被`FREEZE`
- 手动或自动垃圾回收时, 如果记录的并行事务ID年龄大于该值, 将被`FREEZE`
- 手动垃圾回收时, 如果表的事务ID年龄大于该值, 将触发`FREEZE`. 该参数的上限值为 %95 `autovacuum_freeze_max_age`
- 手动垃圾回收时, 如果表的并行事务ID年龄大于该值, 将触发`FREEZE`. 该参数的上限值为 %95 `autovacuum_multixact_freeze_max_age`
- 自动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源. `-1` 表示沿用`vacuum_cost_delay`的设置
- 自动垃圾回收时, 每轮回收周期设多大限制, 限制由`vacuum_cost_page_hit`, `vacuum_cost_page_miss`, `vacuum_cost_page_dirty`参数以及周期内的操作决定. `-1` 表示沿用`vacuum_cost_limit`的设置
- 手动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源.
- 手动垃圾回收时, 每轮回收周期设多大限制, 限制由`vacuum_cost_page_hit`, `vacuum_cost_page_miss`, `vacuum_cost_page_dirty`参数以及周期内的操作决定.
- 是否开启自动垃圾回收

### 视图2 (v_freeze_stat)

统计视图，返回每N个事务为间隔，每个间隔中，有多少表需要`FREEZE`，表的总容量多少大。

- 第几个BATCH, 每个batch代表流逝100万个事务
- 这个batch 有多少表
- 这个batch 这些 表+TOAST+索引 有多少容量
- 这个batch `FREEZE` 会导致多少读IO
- 这个batch `FREEZE` 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)
- 这个batch 最小的表多大
- 这个batch 最大的表多大
- 这个batch 平均表多大
- 这个batch 表大小的方差, 越大, 说明表大小差异化明显
- 这个batch 距离自动`FREEZE`最低 剩余事务数
- 这个batch 距离自动`FREEZE`最高 剩余事务数
- 这个batch 距离自动`FREEZE`剩余事务数的方差, 越小，说明这个batch触发`freeze`将越平缓, 越大, 说明这个batch将有可能在某些点集中触发`freeze` (但是可能集中触发的都是小表)
- 表大小与距离自动`freeze`剩余事务数的相关性，相关性越强(值趋向1或-1) `stddev_rest_age` 与 `sz7` 说明的问题越有价值
- 这个BATCH的容量占比，占比如果非常不均匀，说明有必要调整表级`FREEZE`参数，让占比均匀化

### 视图3 (v_freeze_stat_detail)

结合视图1和视图2的明细视图，可以用于巡视哪些表的`FREEZE`参数需要被调整。

- 这个batch `FREEZE` 会导致多少读IO
- 这个batch `FREEZE` 最多可能会导致多少写IO (通常三份 : 数据文件, WAL FULL PAGE, WAL)
- 所有batch 所有表的总大小 (表+TOAST+索引)
- 这个BATCH的容量占比，目标是让所有BATCH占比尽量一致
- 这个表占整个batch的容量占比，大表尽量错开`freeze`
- 整个数据库中离自动`FREEZE`的最小剩余事务ID数
- 整个数据库中离自动`FREEZE`的最大剩余事务ID数
- 这个batch 有多少表
- 所有batch 所有表的总大小 (表+TOAST+索引)
- 这个batch 的表大小总和 (表+TOAST+索引)
- 这个batch 最小的表多大
- 这个batch 最大的表多大
- 这个batch 平均表多大
- 这个batch 表大小的方差, 越大, 说明表大小差异化明显
- 这个batch 距离自动`FREEZE`最低剩余事务数
- 这个batch 距离自动`FREEZE`最高剩余事务数
- 这个batch 距离自动`FREEZE`剩余事务数的方差, 越小，说明这个batch触发`freeze`将越平缓, 越大, 说明这个batch将有可能在某些点集中触发`freeze` (但是可能集中触发的都是小表)
- 表大小与距离自动`freeze`剩余事务数的相关性，相关性越强(值趋向1或-1) `stddev_rest_age` 与 `stddev_sz` 说明的问题越有价值
- 第几个BATCH, 每个batch代表流逝100万个事务
- 表的大小(含TOAST, 索引)
- 表名(物化视图)
- `r=表, m=物化视图`
- 再产生多少个事务后, 自动垃圾回收会触发`FREEZE`, 起因为事务ID
- 再产生多少个事务后, 自动垃圾回收会触发`FREEZE`, 起因为并发事务ID
- 如果触发`FREEZE`, 该表的事务ID年龄会降到多少
- 如果触发`FREEZE`, 该表的并行事务ID年龄会降到多少
- 如果手工执行`VACUUM`, 是否会触发`FREEZE`, 触发起因(事务ID年龄达到阈值)
- 如果手工执行`VACUUM`, 是否会触发`FREEZE`, 触发起因(并行事务ID年龄达到阈值)
- 表级参数, 优先. 例如是否开启自动垃圾回收, `autovacuum_freeze_max_age`, `autovacuum_freeze_table_age`, `autovacuum_multixact_freeze_max_age`, `autovacuum_multixact_freeze_table_age`
- 如果表的事务ID年龄大于该值, 即使未开启`autovacuum`也会强制触发`FREEZE`, 并告警`Preventing Transaction ID Wraparound Failures`
- 如果表的并行事务ID年龄大于该值, 即使未开启`autovacuum`也会强制触发`FREEZE`, 并告警`Preventing Transaction ID Wraparound Failures`
- 手动或自动垃圾回收时, 如果记录的事务ID年龄大于该值, 将被`FREEZE`
- 手动或自动垃圾回收时, 如果记录的并行事务ID年龄大于该值, 将被`FREEZE`
- 手动垃圾回收时, 如果表的事务ID年龄大于该值, 将触发`FREEZE`. 该参数的上限值为 %95 `autovacuum_freeze_max_age`
- 手动垃圾回收时, 如果表的并行事务ID年龄大于该值, 将触发`FREEZE`. 该参数的上限值为 %95 `autovacuum_multixact_freeze_max_age`
- 自动垃圾回收时, 每轮回收周期后的一个休息时间, 主要防止垃圾回收太耗资源. `-1` 表示沿用`vacuum_cost_delay`的设置
- 自动垃圾回收时, 每轮回收周期设多大限制, 限制由`vacuum_cost_page_hit`, `vacuum_cost_page_miss`, `vacuum_cost_page_dirty`参数以及周期内的操作决定. `-1` 表示沿用`vacuum_cost_limit`的设置