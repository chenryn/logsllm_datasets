### 4. Registry Repair Tools
- **RegHeal**: <http://www.fixregistry.com/regheal>
- **Registry Medic**: <http://www.iomatic.com/products/product.asp?ProductID=registrymedic>

These tools do not passively and continuously monitor the system in the background. Additionally, they do not distinguish between known bad and potentially bad entries; instead, they allow users to decide whether to fix or ignore each detected dubious entry. Furthermore, these tools lack a dynamic rule update mechanism similar to antivirus signature updates and a user interface for specifying symptoms.

### 5.2. Fault Injection Approach
Fault injection is a valuable technique for testing a program's fault-handling capabilities. For applications or OS components running on platforms with known fragility issues, we can test robustness by injecting known problems during development. This approach can also be used to test the Registry-monitoring tool.

To perform this task, we collect information about Registry keys and items that, when present or missing, cause specific problems. For example:
- When the Registry sub-key `{5b4dae26-b807-11d0-9815-00c04fd91972}` is present under `HKEY_CLASSES_ROOT\clsid`, the Internet Explorer menu bar (which contains File, Edit, View, etc., options) is missing.
- When the CLSID Registry item under `HKEY_CLASSES_ROOT\MIME\Database\ContentType\text/x-component` is missing in Windows XP, the System Restore program fails to display dates of previous restore points.
- In Microsoft Money Deluxe 2003, if corrupted binary data is injected into `HKEY_CURRENT_USER\software\microsoft\money\11.0\mainwindow`, a maximized window will display properly, but a "restore down" regular window will be invisible on the screen.

Figure 4 shows that over half of the problems are related to bad data in a Registry entry (the first two rows combined). Settings recorded in the data field are read/written more often than a key or item is created or deleted. Therefore, injecting known bad and random data values for Registry items is a fruitful fault-injection technique. The large number of occurrences in the “Key exists” category were contributed by the top PSS problem. Perhaps popularity ranking of problems can be used to generate realistic fault loads.

We have successfully injected Registry faults using the Windows command line Reg operation. We generate batch files containing Registry modifications based on fault predicates from our problem database. A challenge in performing fault injection is that some Registry changes require an application restart, Explorer restart, re-login, or system reboot to take effect. Such information must be encoded in the rule-generating database to ensure the correctness of injection tests.

### 5.3. Access Protection Mechanisms
Ultimately, we would like to have an OS that can protect the Registry from bad changes and eliminate the fragility problem. The OS can provide the highest level of protection by locking certain entries. Only the OS can modify such entries; permissions for users and applications are read-only. Many configurations critical to the system must never be modified and thus should be locked. For example, the `.mp3` key must have a `PerceivedType` of "audio," the `.jpg` key must have a `PerceivedType` of "image," and the `.htc` key must always exist to allow dynamic HTML to work correctly. There is an additional category in which the entries cannot even be modified by regular OS components. For example, some EXE/DLL files and Registry entries can only be modified by patch installation programs. However, we lacked information to make this distinction among OS-level permissions.

The next level of protection involves rule-checks upon Registry entry modification. It is important to note the difference between such protection predicates and monitoring predicates described previously: protection predicates must be supplied either by OS developers to detect universally known bad conditions or by application developers to enforce application-specific must-satisfy conditions. In contrast, monitoring predicates can be supplied by anyone to detect known bad conditions associated with known problems.

For example, when the `Default` Registry item under `HKEY_CLASSES_ROOT\HTTP\DefaultIcon\` is changed from `"%SystemRoot%\System32\Url.dll,0"` to the path of a non-existent .dll file, Internet Explorer’s Favorites link and address bar link icons are missing and are instead replaced by the “unknown file type” icon. It would be beneficial if the OS can perform an existential verification of the path/file indicated every time an item’s data is modified under that key. Another essential rule variety would verify acceptable ranges of values for certain Registry entries. For instance, the `ScheduledInstallDay` under `HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\WindowsUpdate\AU` (for configuring automatic updates) denotes a day of the week and must fall within the range of 0 and 7 (inclusive), where 0 denotes all days and 1-7 denote the day of the week. Thus, upon modification, we must ensure that the new data does not exceed these bounds.

As another example, the entries under `HKEY_CURRENT_USER\ControlPanel\International` denote what postfix to display (AM or PM) for the time and can be customized by the user. If either Registry entry’s data value exceeds 9 characters, dates (both the calendar and e-mail send/receive) in Outlook disappear. So it is useful to check if the newly updated values for such string-type Registry items meet specific character limits, if any exist. Finally, we have observed several problems due to lack of robustness in handling Registry items with empty data, necessitating the OS to enforce non-empty data-field rules. For example, when the `HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer\View Source Editor\Editor Name\(Default)` Registry item’s data is empty, right-clicking an Internet Explorer window and selecting view source opens the user’s Desktop folder. This item’s data should be set to any desired default view source editor (e.g., Notepad.exe or Winword.exe) but should never be empty. Since the user has the flexibility to choose any editor, the entry cannot be locked by the OS, rather a non-empty data rule must be enforced.

The third level of protection considers copy-on-write. Systems, as well as various applications, maintain their own copies of a Registry entry so that their customizations do not interfere. For example, some third-party software depends on the `HKEY_LOCAL_MACHINE\SYSTEM\currentcontrolset\control\print\monitors\` Registry key to exist for proper printer functionality. However, the existence of one such third party’s keys may cause problems for other third-party printer monitors, such as being unable to identify the printer monitor and consequently being unable to print. In this scenario, it would be beneficial for each third-party printer monitor to have its own set of keys that do not interfere with the functionality of others, and copy-on-write helps isolate each printer monitor’s view of this Registry entry. However, there are limitations to this protection option. Registry entries that provide a logical notion of some configuration can employ this method, whereas other entries that reflect physical conditions (e.g., existence of hardware) cannot.

Finally, many Registry settings are legal but may cause behaviors that are perceived as failures by a user in certain environments. Figure 4 shows that more than half of these problems cannot be prevented through the above-mentioned access protection mechanisms (see the last three rows). At best, we can log Registry entry changes to facilitate troubleshooting. This mechanism provides the ability to analyze phases of change or instability of a Registry entry and incorporate this information into Strider’s root cause analysis. For example, when Firewall Client is disabled, the user may experience good network performance for all applications except Instant Messenger. While the performance degradation is inconvenient to the user, disabling the Firewall Client (by modifying the `HKLM\Software\Microsoft\Firewall Client\Disable` Registry entry) is a perfectly valid configuration decision that must be allowed by the system. Predicate construction is complicated by the fact that `Disable=1` and `Disable=0` are both valid configurations. Thus, we must resort to logging any changes to this Registry entry.

Many problems could not be helped as they were untraceable to a Registry entry modification operation; they were caused by leftover Registry entries from software uninstallation or system rollback. A few problems, categorized as “Ignore,” were either too application-specific or too expensive to protect.

### 6. Conclusions
We have attempted to answer the question “Why Are PCs Fragile and What Can We Do About It?” by providing a categorization framework based on 200 Windows Registry problems. While Registry-related problems are not the dominant cause of system failures, they are a source of major frustration. By classifying problem manifestation, we exposed a wide variety of effects that create the image of PC fragility. These manifestation effects range from instability of an entire system to lost functionality, including simple user interface issues. For a majority of these cases, monitoring techniques based on known-bad predicates are useful for detecting potential problems. However, we must be careful not to overburden users with too many false positives. In many cases, waiting for a user complaint with a matching symptom before pinpointing a problem is more appropriate. Similarly, a majority of problems cannot be prevented through any of the access protection mechanisms proposed because their root-cause Registry entries had legal data that cause fragility problems only under specific circumstances. This result demonstrates the importance of developing effective Registry troubleshooters and maintaining a comprehensive knowledge base of problems, reducing the impact of PC fragility on total cost of ownership and user satisfaction.

### References
1. A. Ganapathi, Y. M. Wang, N. Lao, J. R. Wen, “Why PCs Are Fragile and What We Can Do About It: A Study of Windows Registry Problems,” MSR-TR-2004-25, March 2004.
2. W. Li, "Random texts exhibit Zipf's-law-like word frequency distribution", IEEE Transactions on Information Theory, 38(6), pp.1842-1845, 1992.
3. Y. M. Wang, C. Verbowski, J. Dunagan, Y. Chen, H. J. Wang, C. Yuan, and Z. Zhang, “STRIDER: A Black-box, State-based Approach to Change and Configuration Management and Support,” Proc. Usenix Large Installation Systems Administration (LISA) Conference, pp. 159-171, October 2003.
4. Y. M. Wang, C. Verbowski, and D. R. Simon, “Persistent-state Checkpoint Comparison for Troubleshooting Configuration Failures,” Proc. Int. Conf. Dependable Systems and Networks (DSN), June 2003.

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)**
0-7695-2052-9/04 $ 20.00 © 2004 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 10:05:36 UTC from IEEE Xplore. Restrictions apply.