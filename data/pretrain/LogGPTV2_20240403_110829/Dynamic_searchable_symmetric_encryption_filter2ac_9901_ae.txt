### 6.2.1 Performance Analysis of Individual Operations

The cost of the operations does not depend on the number of file/word pairs in the index. Additionally, the cost per unique word is essentially independent (except for a very small constant cost) of the total number of unique words or files involved in each operation. Therefore, we present only the per-word or per-file time for these operations.

Table 2 shows the costs for each operation. For clarity, we provide data only for the SSE algorithm executions on the document dataset; the results for the email and synthetic datasets are similar. The generation of search tokens takes a constant amount of time (an average of 35 microseconds), regardless of the number of files that will be returned from the search. The results indicate that search, file addition, and deletion on the client side are efficient and practical, even for common words or files containing many unique words.

### 6.2.2 Full Performance Evaluation

To evaluate the overall performance of SSE, we ran the SSE algorithms specified in §4 on the email, document, and media datasets. Note that all algorithms have non-zero costs, but in some cases, the cost is so small compared to other parts of the operation that it is not visible on the graph.

**Figure 5: Execution Time for SSE.Enc and SKE.Enc**

- **SSE.Enc:**
  - Emails: 52 ms
  - Documents: 34 ms
  - Media: 17 ms

- **SKE.Enc:**
  - Emails: 53 ms
  - Documents: 34 ms
  - Media: 17 ms

**File Collections (with size in MB):**
- Emails: 4, 11, 16
- Documents: 8, 100, 250, 500
- Media: 8, 100, 250, 500

Figure 5 highlights the difference between the email and document data. The Enron emails are primarily plain text files, including email headers, so almost every byte is part of an indexed word. Consequently, each small file contains many words, resulting in a high ratio of file/word pairs to the size of the dataset. In contrast, Microsoft Office documents may contain significant formatting and visual components (like images) that are not indexed, leading to a much lower ratio of file/word pairs to file size. Both datasets represent common office use cases. Our results show that SSE index generation requires significantly more time for large text collections than for typical office document formats. For media files, the ratio of indexable words to file size is almost zero.

The micro-benchmark results in Figure 4 demonstrate that SSE index generation performance is linear with the number of file/word pairs for large datasets. For an email dataset of 16 GB (consisting entirely of text-based emails with no attachments), the initial indexing would take approximately 15 hours, which can be performed during the computer's idle time. After this initial indexing, adding and removing emails would be fast.

To evaluate the costs of the remaining SSE algorithms, we performed experiments to determine upper bounds on the cost of any operation. An upper bound for SSE.Search is a search for the word contained in the most files. Our update operations use the file with the most bytes on disk.

Since the search was performed for the word indexed in the most files, the total time needed for the search depended on the prevalence of words in files: media files had few words, even in 500 MB of content, whereas some words occur in every email. Figure 6 shows the time required for the server to perform a search given a search token (the cost of generating a search token, which is a small constant in microseconds, is neglected). The SSE search costs were small, even for the email index. The longest searches took only about 50 ms to complete, and for large media collections, the search time was negligible.

**Figure 6: Execution Time for SSE.Search**

- **Emails:**
  - 4 MB: 500 ms
  - 11 MB: 250 ms
  - 16 MB: 130 ms

- **Documents:**
  - 8 MB: 100 ms
  - 100 MB: 75 ms
  - 250 MB: 50 ms
  - 500 MB: 25 ms

- **Media:**
  - 8 MB: 100 ms
  - 100 MB: 75 ms
  - 250 MB: 50 ms
  - 500 MB: 25 ms

**File Collections (with size in MB):**
- Emails: 4, 11, 16
- Documents: 8, 100, 250, 500
- Media: 8, 100, 250, 500

**Figure 7: Execution Time for Adding a File**

- **Enc:**
  - Emails: 500 ms
  - Documents: 250 ms
  - Media: 100 ms

- **SSE.AddToken:**
  - Emails: 500 ms
  - Documents: 250 ms
  - Media: 100 ms

- **SSE.Add:**
  - Emails: 500 ms
  - Documents: 250 ms
  - Media: 100 ms

**File Collections (with size in MB):**
- Emails: 4, 11, 16
- Documents: 8, 100, 250, 500
- Media: 8, 100, 250, 500

The cost of adding a file is divided into several components:
- "Enc" refers to the time needed to encrypt the new file.
- "SSE.AddToken" refers to the client's generation of the add token for the words being indexed in the file.
- "SSE.Add" refers to the server using the add token to update the index.

The costs of adding a file fall mostly on the client, with the dominant costs being SSE add token generation and file encryption, both performed on the client. In a use case where add operations dominate (such as indexing encrypted emails), this allows the server to support many clients easily, as the client that performs the add also performs most of the computations.

**Figure 8: Execution Time for Deleting a File**

- **SSE.DelToken:**
  - Emails: 130 ms
  - Documents: 100 ms
  - Media: 75 ms

- **SSE.Del:**
  - Emails: 130 ms
  - Documents: 100 ms
  - Media: 75 ms

**File Collections (with size in MB):**
- Emails: 4, 11, 16
- Documents: 8, 100, 250, 500
- Media: 8, 100, 250, 500

A similar situation occurs for deleting a file. The label "SSE.DelToken" refers to the client's generation of the delete token, and "SSE.Del" refers to the server using the delete token to update the index. As with adding, the delete operation is efficient and practical; each operation on the largest files took approximately half a second.

### 7. Conclusion

Searchable encryption is a crucial cryptographic primitive, motivated by the popularity of cloud storage services such as Dropbox, Microsoft SkyDrive, and Apple iCloud, as well as public cloud storage infrastructures like Amazon S3 and Microsoft Azure Storage. Any practical SSE scheme should satisfy properties such as sublinear (and preferably optimal) search, adaptive security, compactness, and the ability to support file addition and deletion.

In this work, we presented the first SSE construction to achieve all these properties. We also implemented our scheme and evaluated its performance. Our experiments show that our construction is highly efficient and ready for deployment.

### Acknowledgements

The authors are grateful to Jason Mackay for writing the indexer used in the experiments. The second author was partially supported by the Kanellakis fellowship at Brown University and by Intel’s STC for Secure Computing.

### 8. References

[1] G. Amanatidis, A. Boldyreva, and A. O’Neill. Provably-secure schemes for basic query support in outsourced databases. In Proc. Working Conference on Data and Applications Security (DBSEC), pages 14–30, 2007.

[2] M. Bellare, A. Boldyreva, and A. O’Neill. Deterministic and efficiently searchable encryption. Proc. Int. Cryptology Conference (CRYPTO), pages 535–552, 2007.

[3] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash functions for message authentication. Proc. Int. Cryptology Conference (CRYPTO), pages 1–15, 1996.

[4] D. Boneh, G. Di Crescenzo, R. Ostrovsky, G. Persiano. Public key encryption with keyword search. Proc. Int. Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT), pages 506–522, 2004.

[5] Y. Chang and M. Mitzenmacher. Privacy preserving keyword searches on remote encrypted data. Proc. Applied Cryptography and Network Security (ACNS), pages 442–455, 2005.

[6] M. Chase and S. Kamara. Structured encryption and controlled disclosure. In Proc. Int. Conference on the Theory and Application of Cryptology and Information Security (ASIACRYPT), pages 577–594, 2010.

[7] Cryptography API: Next generation (Windows). http://msdn.microsoft.com/library/aa376210.aspx.

[8] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: Improved definitions and efficient constructions. In Proc. ACM Conference on Computer and Communications Security (CCS), pages 79–88, 2006.

[9] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: Improved definitions and efficient constructions. Journal of Computer Security, 19(5):895–934, 2011.

[10] Y. Dodis, T. Ristenpart, J. Steinberger, and S. Tessaro. To hash or not to hash again? (in)differentiability results for H2 and HMAC. Proc. Int. Cryptology Conference (CRYPTO), 2012.

[11] Enron email dataset. http://www.cs.cmu.edu/~enron/, 2009.

[12] FIPS 180-3. Secure Hash Standard (SHS). Federal Information Processing Standard (FIPS), Publication 180-3, National Institute of Standards and Technology, Washington, DC, October 2008.

[13] FIPS 197. Advanced Encryption Standard (AES). Federal Information Processing Standard (FIPS), Publication 197, National Institute of Standards and Technology, Washington, DC, November 2001.

[14] M. Fredman, J. Komlos, and E. Szemeredi. Storing a sparse table with O(1) worst case access time. Journal of the ACM, 31(3):538–544, 1984.

[15] E.-J. Goh. Secure indexes. Technical Report 2003/216, IACR ePrint Cryptography Archive, 2003. http://eprint.iacr.org/2003/216.

[16] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. Journal of the ACM, 43(3):431–473, 1996.

[17] W. Hörmann and G. Derflinger. Rejection-inversion to generate variates from monotone discrete distributions. ACM Transactions on Modeling and Computer Simulation, 6(3):169–184, 1996.

[18] M. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on searchable encryption: Ramification, attack, and mitigation. Network and Distributed System Security Symposium (NDSS '12), 2012.

[19] S. Kamara and K. Lauter. Cryptographic cloud storage. In Proc. Workshop Real-Life Cryptographic Protocols and Standardization (RLCPS), pages 136–149, 2010.

[20] J. Katz and Y. Lindell. Introduction to Modern Cryptography. Chapman & Hall/CRC, Boca Raton, FL, 2008.

[21] K. Kurosawa and Y. Ohtaki. UC-secure searchable symmetric encryption. In Proc. Financial Cryptography and Data Security (FC), 2012.

[22] D. Song, D. Wagner, and A. Perrig. Practical techniques for searching on encrypted data. In Proc. Symposium on Research in Security and Privacy (SSP), pages 44–55, 2000.

[23] P. van Liesdonk, S. Sedghi, J. Doumen, P. H. Hartel, and W. Jonker. Computationally efficient searchable symmetric encryption. In Proc. Workshop on Secure Data Management (SDM), pages 87–100, 2010.

[24] G. K. Zipf. Psycho-Biology of Languages. Houghton-Mifflin, Boston, 1935.