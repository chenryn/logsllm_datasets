    ```
    $ git add Dockerfile
    $ git commit -m "editing the Dockerfile"
    $ git push -u destination master
    ```
15.  向下滚动并向 GitHub 提交您的更改。
16.  回到詹金斯。移除`hit_counter`和`python:3.7-alpine`映像，确保詹金斯没有使用之前的本地映像:
    ```
    $ docker rmi hit_counter python:3.7-alpine
    ```
17.  Click `Build Now` again to start building the job instantly. Refresh the `Recent Changes` page. It will display a message stating that a change has occurred.
    如果您点击已经发生的更改，它会将您转发到 GitHub，向您显示旧代码和新代码之间的差异。
18.  Click back into the browser to return to Jenkins. Check `Console Output` again to see the base image that Jenkins has used:
    在底部，你会发现詹金斯成功地建立了形象。
19.  Go to the terminal and check the images again:
    ```
    $ docker images
    ```
    你会发现`hit_counter`和`python:alpine`都在名单上:
    ```
    REPOSITORY             TAG           IMAGE ID
      CREATED                      SIZE
    jenkinsci/blueocean    latest        e287a467e019
      Less than a second ago       562MB
    hit_counter            latest        6288f76c1f15
      3 minutes ago                234MB
                             786bdbef6ea2
      10 minutes ago               934MB
    python                 alpine        8ecf5a48c789
      2 weeks ago                  78.9MB
    ```
20.  通过移除除`jenkinsci/blueocean` :
    ```
    $ docker image rm hit_counter python:alpine 786
    ```
    之外的所有列出的映像，为下一个练习清洁您的实验室
在本练习中，您学习了如何将 Jenkins 与 GitHub 集成。詹金斯能够自动从 GitHub 中提取代码并构建映像。
在下一节中，您将学习如何在没有手动干预的情况下将此映像推送到注册表，以完成您的 CI/CD 管道。
# 整合詹金斯和多克枢纽
在本节中，与*图 8.31* 中一样，我们将重点关注 CI/CD 管道的最后一步，即将 Jenkins 与 Docker Hub 集成。正如我们之前提到的，有很多注册中心。我们将使用 Docker Hub，因为它免费且易于使用。在你的工作场所，你的公司可能会有一个私人的本地注册。您需要要求运营或信息技术管理员为您创建一个帐户，并授予您一些权限，以便您能够访问注册表并将您的映像推送到其中。
![ Figure 8.24: Integrating Jenkins and Docker Hub ](img/B15021_08_24.jpg)
图 8.24:集成詹金斯和多克枢纽
在下面的练习中，您将学习如何将 Jenkins 与 Docker Hub 集成，以及如何推送 Jenkins 在上一个练习中构建的映像。
## 练习 8.04:整合詹金斯和多克枢纽
在本练习中，您将把 Jenkins 与 Docker Hub 集成，并将该映像推送到您的存储库中。首先，您将安装`Docker`、`docker-build-step`和`Cloudbees Docker Build and Publish`插件，以便詹金斯可以连接到 Docker Hub。然后，您将学习如何在 Jenkins 中输入您的 Docker Hub 凭据，以便 Jenkins 可以自动访问您的 Docker Hub 帐户并将您的映像推送到该帐户。最后，您将在 Docker Hub 中检查您的映像，以验证管道是否正确执行。在本练习结束时，您将通过检查您的 Docker Hub 帐户来验证映像是否已成功推送到存储库:
1.  Click on `Manage Jenkins` in the left-hand menu to install the plugins:
    ![Figure 8.25: Clicking on Manage Jenkins  ](img/B15021_08_25.jpg)
    图 8.25:点击管理詹金斯
2.  Click on `Plugin Manager`. Four tabs will appear. Click on the `Available` tab and select the `Docker`, `docker-build-step`, and `Cloudbees Docker Build and Publish` plugins:
    ![Figure 8.26: Installing the Docker, docker-build-step, and Cloudbees  Docker Build and Publish plugins ](img/B15021_08_26.jpg)
    图 8.26:安装 docker、Docker 构建步骤和 Cloudbees Docker 构建和发布插件
3.  点击`Install without restart`。安装后，检查`Restart Jenkins when installation is complete and no jobs are running`。
4.  Jenkins will take an extended period of time to restart, depending upon your disk space, memory, and internet connectivity speed. Wait until it is done, and the dashboard is shown. Click on the project's name, that is, `hit_count`:
    ![Figure 8.27: Jenkins Dashboard showing the hit_count project ](img/B15021_08_27.jpg)
    图 8.27:显示命中数项目的詹金斯仪表板
5.  Click `Configure` in the left-hand menu to modify the project configurations:
    ![Figure 8.28: The Configure option in the left-hand menu ](img/B15021_08_28.jpg)
    图 8.28:左侧菜单中的配置选项
6.  Modify the details in the `Build` tab only. Click on it and select `Add build step`. A larger menu than the one you saw before will show up. If you see `Docker Build and Publish` in that menu, it verifies that your plugins were installed successfully. Click `Docker Build and Publish`:
    ![Figure 8.29: Selecting Docker Build and Publish from the menu  ](img/B15021_08_29.jpg)
    图 8.29:从菜单中选择 Docker 构建和发布
7.  在`Registry Credentials`中，点击`Add`。然后从下拉菜单中选择`Jenkins`。
8.  A pop-up box will appear. Enter your Docker Hub username and password. Then, click `Add`:
    ![Figure 8.30: Adding Jenkins credentials ](img/B15021_08_30.jpg)
    图 8.30:添加詹金斯凭据
9.  Now, in `Registry Credentials`, click the first drop-down menu and select the credentials that you entered in the previous step. Then, enter `/` in the `Repository Name` field. Remove the `Execute Shell` option that you entered in *Exercise 8.02*, *Uploading the Code to GitHub*, by clicking the Red `X` at the top right. Now, you will have only one build step, which is the `Docker Build and Publish` step. Click `Save` to save the new configuration:
    ![Figure 8.31: The Docker Build and Publish step ](img/B15021_08_31.jpg)
    图 8.31:Docker 构建和发布步骤
10.  在左侧菜单中再次点击`Build Now`，在`Build History`选项中，跟随映像构建的进度。它将与您在上一步中在`Repository Name`中指定的名称相同。詹金斯会自动添加`docker build`步骤，因为你是从插件中选择的。如果映像成功通过构建，Jenkins 将使用您的 Docker 凭据并自动连接到 Docker Hub 或您在`Repository Name`中指定的任何注册表。最后，Jenkins 会将新映像自动推送到您的注册表中，在本练习中，它是您的 Docker Hub 注册表。
11.  As a further check, while the image is being built and before it is done, go to the terminal and list the images you have using the `docker images` command:
    ```
    $ docker images
    ```
    因为你在上一次练习结束时清理了实验室，你应该只找到`jenkinsci/blueocean`映像:
    ```
    REPOSITORY              TAG        IMAGE ID
      CREATED                       SIZE
    jenkinsci/blueocean     latest     e287a467e019
      Less than a second ago        562MB
    ```
    此外，检查您的 Docker Hub 帐户以验证是否构建了`hit_counter`映像。您将找不到`hit_counter`映像:
    ![Figure 8.32: Checking your Docker Hub ](img/B15021_08_32.jpg)
    图 8.32:检查你的 Docker 中心
12.  If the job is successfully built, you will find a blue ball beside the image name. If it is a red ball, this means that there was an error. Now, click on the arrow beside the image name and select `Console Output`:
    ![Figure 8.33: Selecting Console Output ](img/B15021_08_33.jpg)
    图 8.33:选择控制台输出
    如下图所示，您会发现 Jenkins 成功地构建了映像，并将其推送到您的 Docker Hub:
    ![Figure 8.34: In Console Output, verify that Jenkins has built and pushed the image ](img/B15021_08_34.jpg)
    图 8.34:在控制台输出中，验证 Jenkins 已经构建并推送了映像
13.  Go back to the terminal and rerun the `docker images` command to list the images:
    ```
    $ docker images
    ```
    你会发现一个带有`/hit_count`的映像:
    ```
    REPOSITORY             TAG             IMAGE ID
      CREATED                      SIZE
    jenkinsci/blueocean    latest          e287a467e019
      Less than a second ago       562MB
    engyfouda/hit_count    latest          65e2179392ca
      5 minutes ago                227MB
                               cf4adcf1ac88
      10 minutes ago               1.22MB
    python                 3.7alpine       6a5ca85ed89b
      2 weeks ago                  72.5MB
    ```
14.  In the browser, refresh the Docker Hub page. You will find your image at the top; Jenkins pushed it for you automatically:
    ![Figure 8.35: Verifying that Jenkins has pushed the image to your Docker Hub automatically ](img/B15021_08_35.jpg)
图 8.35:验证 Jenkins 已自动将映像推送到您的 Docker Hub
在本练习中，我们完成了 CI/CD 管道的最后一个阶段，并将 Jenkins 与 Docker Hub 集成在一起。詹金斯把它建立的形象推给了 Docker Hub。您还通过检查 Docker Hub 帐户验证了映像是否被正确推送。
在下一个活动中，我们将应用安装额外插件的相同方法来将 Jenkins 与 SonarQube 集成在一起。SonarQube 是另一个强大的工具，可以分析代码并生成关于其质量的报告，并检测大量编程语言中的 bug、代码气味和安全漏洞。
## 活动 8.01:利用詹金斯和索纳库
通常，在将代码提交给测试人员之前，会要求您评估代码的质量。您可以通过添加 SonarQube 插件生成关于调试错误、代码气味和安全漏洞的报告，从而利用 Jenkins 进行进一步的代码检查。
在本活动中，我们将利用詹金斯和索纳库插件作为我们的`hit_count` Python 示例。
**步骤**:
1.  在容器中安装并运行 SonarQube，就像您在*练习 8.01* 、*将 Jenkins 安装为容器*中所做的那样。使用默认端口`9000`。
2.  在詹金斯安装 SonarQube 插件。使用`admin/admin`登录 SonarQube，生成认证令牌。不要忘记复制令牌并将其保存在文本文件中。在此步骤后，您无法检索令牌。如果您丢失了令牌，请移除 SonarQube 容器，按照*步骤 1* 中的步骤，从 SonarQube 映像中重新制作它，然后再次重复这些步骤。
3.  重启詹金斯。
4.  在 Jenkins 中，将 SonarQube 的认证令牌作为机密文本添加到`Global Credentials`域。
5.  通过调整`Global System Configuration`和`Configure System`选项，将詹金斯和索纳库整合在一起。
6.  通过启用`Prepare SonarQube scanner`环境修改`Build Environment`选项卡中的字段。
7.  修改`Build`步骤，增加`Analysis Properties`。
8.  在浏览器中，转到 SonarQube 窗口，并检查其报告。
输出应该如下所示:
![Figure 8.36: The expected SonarQube output ](img/B15021_08_36.jpg)
图 8.36:预期的声纳管输出
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor339)找到。
在下一个活动中，您将把 Jenkins 和 SonarQube 与我们的全景徒步应用集成在一起。
## 活动 8.02:在全景徒步应用中利用詹金斯和索纳库
全景徒步应用也有前端和后端，就像`hit_counter`应用一样。在本活动中，您将在詹金斯创建一个新项目，该项目链接到 GitHub 上的全景徒步应用。然后，您将运行 SonarQube 来获得关于其 bug 和安全漏洞的详细报告，如果徒步旅行应用有任何漏洞的话。
按照以下步骤完成活动:
1.  在詹金斯中创建一个名为`trekking`的新项目。
2.  选择它作为`FREESTYLE`项目。
3.  在`General`选项卡中，选择`Discard Old Builds`。
4.  在`Source Code Management`中，选择`GIT`。然后输入网址`http://github.com/efoda/trekking_app`。
5.  在`Build Triggers`中，选择`Poll SCM`，设置为每 15 分钟分析测试一次。
6.  在`Build`选项卡中，输入`Analysis properties`代码。
7.  保存并点击`Build Now`。
8.  在浏览器的`SonarQube`选项卡中查看报告。
SonarQube 的输出应该如下所示:
![Figure 8.37: Expected output of Activity 8.02 ](img/B15021_08_37.jpg)
图 8.37:活动 8.02 的预期产出
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor340)找到。
# 总结
本章提供了使用 CI/CD 管道集成代码的实践经验。CI 帮助开发人员将代码集成到一个共享且易于访问的存储库中。光盘帮助开发人员将存储在存储库中的代码交付给产品。CI/CD 方法还有助于保持产品与最新技术同步，并为客户提供最新版本，从而快速获得新功能和错误修复。
一旦本章定义的 CI/CD 管道的三个阶段成功完成，您将只需要专注于在 GitHub 上编辑您的代码。詹金斯将成为你的自动化助手，它将自动为你处理剩余的阶段，并使映像可用于生产。
在下一章中，您将了解 Docker 集群模式以及如何执行服务发现、集群、扩展和滚动更新。