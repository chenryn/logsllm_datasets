title:PIR-Tor: Scalable Anonymous Communication Using Private Information
Retrieval
author:Prateek Mittal and
Femi G. Olumofin and
Carmela Troncoso and
Nikita Borisov and
Ian Goldberg
PIR-Tor: Scalable Anonymous Communication
Using Private Information Retrieval ∗
Femi Olumoﬁn2
Prateek Mittal1
1University of Illinois at Urbana-Champaign
1308 West Main Street
Urbana, IL, USA
{mittal2,nikita}@illinois.edu
Carmela Troncoso3
2University of Waterloo
200 University Ave W
Waterloo, ON, Canada
{fgolumof,iang}@cs.uwaterloo.ca
Nikita Borisov1
Ian Goldberg2
3K.U.Leuven/IBBT
Kasteelpark Arenberg 10
3001 Leuven Belgium
PI:EMAIL
Abstract
Existing anonymous communication systems like Tor do
not scale well as they require all users to maintain up-to-
date information about all available Tor relays in the sys-
tem. Current proposals for scaling anonymous commu-
nication advocate a peer-to-peer (P2P) approach. While
the P2P paradigm scales to millions of nodes, it pro-
vides new opportunities to compromise anonymity.
In
this paper, we step away from the P2P paradigm and ad-
vocate a client-server approach to scalable anonymity.
We propose PIR-Tor, an architecture for the Tor net-
work in which users obtain information about only a few
onion routers using private information retrieval tech-
niques. Obtaining information about only a few onion
routers is the key to the scalability of our approach, while
the use of private retrieval information techniques helps
preserve client anonymity. The security of our architec-
ture depends on the security of PIR schemes which are
well understood and relatively easy to analyze, as op-
posed to peer-to-peer designs that require analyzing ex-
tremely complex and dynamic systems. In particular, we
demonstrate that reasonable parameters of our architec-
ture provide equivalent security to that of the Tor net-
work. Moreover, our experimental results show that the
overhead of PIR-Tor is manageable even when the Tor
network scales by two orders of magnitude.
1
Introduction
As more of our daily activities shift online, the issue of
user privacy comes to the forefront. Anonymous com-
munication is a privacy enhancing technology that en-
ables a user to communicate with a recipient without re-
vealing her identity (IP address) to the recipient or a third
party (for example, Internet routers). Tor [10] is a de-
ployed network for anonymous communication, which
∗An extended version of this paper is available [26].
consists of about 2 000 relays and currently serves hun-
dreds of thousands of users a day [45]. Tor is widely used
by whistleblowers, journalists, businesses, law enforce-
ment and government organizations, and regular citizens
concerned about their privacy [46].
Tor requires each user to maintain up-to-date infor-
mation about all available relays in the network (global
view). As the number of relays and clients increases,
the cost of maintaining this global view becomes pro-
hibitively expensive.
In fact, McLachlan et al. [22]
showed that in the near future the Tor network could be
spending more bandwidth for maintaining a global view
of the system than for anonymous communication itself.
Existing approaches to improving Tor’s scalability ad-
vocate a peer-to-peer approach. While the peer-to-peer
paradigm scales to millions of relays, it also provides
new opportunities for attack. The complexity of the de-
signs makes it difﬁcult for the authors to provide rigorous
proofs of security. The result is that the security commu-
nity has been very successful at breaking the state-of-art
peer-to-peer anonymity designs [4, 6, 7, 23, 47, 48].
In this paper, we step away from the peer-to-peer
paradigm and propose PIR-Tor, a scalable client-server
approach to anonymous communication. The key obser-
vation motivating our architecture is that clients require
information about only a few relays (3 in the current
Tor network) to build a circuit for anonymous commu-
nication. Currently, clients download the entire database
of relays to protect their anonymity from compromised
directory servers.
In our proposal, on the other hand,
clients use private information retrieval (PIR) techniques
to download information about only a few relays. PIR
prevents untrusted directory servers from learning any
information about the clients’ choices of relays, and thus
mitigates route ﬁngerprinting attacks [6, 7].
We consider two architectures for PIR-Tor, based on
the use of computational PIR and information-theoretic
PIR, and evaluate their performance and security. We
ﬁnd that for the creation of a single circuit, the archi-
tecture based on computational PIR provides an order
of magnitude improvement over a full download of all
descriptors, while the information-theoretic architecture
provides two orders of magnitude improvement over a
full download. However, in the scenario where clients
wish to build multiple circuits, several PIR queries must
be performed and the communication overhead of the
computational PIR architecture quickly approaches that
of a full download. In this case, we propose to perform
only a few PIR queries and reuse their results for cre-
ating multiple circuits, and discuss the security implica-
tions of the same. On the other hand, for the information-
theoretic architecture, we ﬁnd that even with multiple cir-
cuits, the communication overhead is at least an order of
magnitude smaller than a full download. It is therefore
feasible for clients to perform a PIR query for each de-
sired circuit. In particular, we show that, subject to cer-
tain constraints, this results in security equivalent to the
current Tor network. With our improvements, the Tor
network can easily sustain a 10-fold increase in both re-
lays and clients. PIR-Tor also enables a scenario where
all clients convert to middle-only relays, improving the
security and the performance of the Tor network [9].
The remainder of this paper is organized as follows.
We discuss related work in Section 2. We present a brief
overview of Tor and private information retrieval in Sec-
tion 3. In Section 4, we give an overview of our system
architecture, and present the full protocol in Section 5.
We discuss the trafﬁc analysis implications of our archi-
tecture in Section 6. Sections 7 and 8 contain our perfor-
mance evaluation for the computational and information-
theoretic PIR proposals respectively. We discuss the
ramiﬁcations of our design in Section 9, and ﬁnally con-
clude in Section 10.
2 Related Work
In contrast to our client-server approach, prior work
mostly advocates a peer-to-peer approach for scalable
anonymous communication. We can categorize existing
work on peer-to-peer anonymity into architectures that
are based on random walks on unstructured or structured
topologies, and architectures that use a lookup operation
in a distributed hash table.
Besides these peer-to-peer approaches Mittal et
al. [25] brieﬂy considered the idea of using PIR queries
to scale anonymous communication. However, their de-
scription was not complete, and their evaluation was very
preliminary. In this paper, we build upon their work and
present a complete system architecture based on PIR.
In contrast to prior work, we also consider the use of
information-theoretic PIR, and show that it outperforms
computational PIR based Tor architecture in many scal-
ing scenarios. We also provide an analysis of the im-
plications of clients not having the global system view,
and show that reasonable parameters of PIR-Tor provide
equivalent security to Tor.
2.1 Distributed hash table based architec-
tures
Distributed hash tables (DHTs), also known as struc-
tured peer-to-peer topologies, assign neighbor relation-
ships using a pseudorandom but deterministic mathemat-
ical formula based on IP addresses or public keys of
nodes.
Salsa [29] is built on top of a DHT, and uses a spe-
cially designed secure lookup operation to select random
relays in the network. The secure lookups use redundant
checks to mitigate attacks that try to bias the result of the
lookup. However, Mittal and Borisov [23] showed that
Salsa is vulnerable to information leak attacks: as the at-
tackers can observe a large fraction of the lookups in the
system, a node’s selection of relays is no longer anony-
mous and this observation can be used to compromise
user anonymity [6,7]. Salsa is also vulnerable to a selec-
tive denial-of-service attack, where nodes break circuits
that they cannot compromise [4, 47].
Panchenko et al. proposed NISAN [35] in which
information-leak attacks are mitigated by a secure iter-
ative lookup operation with built-in anonymity. The se-
cure lookup operation uses redundancy to mitigate active
attacks, but hides the identity of the lookup destination
from the intermediate nodes by downloading the entire
routing table of the intermediate nodes and processing
the lookup operation locally. However, Wang et al. [48]
were able to drastically reduce the lookup anonymity by
taking into account the structure of the topology and the
deterministic nature of the paths traversed by the lookup
mechanism.
Torsk, introduced by McLachlan et al. [22], uses secret
buddy nodes to mitigate information leak attacks. Instead
of performing a lookup operation themselves, nodes can
instruct their secret buddy nodes to perform the lookup
on their behalf. Thus, even if the lookup process is not
anonymous, the adversary will not be able to link the
node with the lookup destination (since the relationship
between a node and its buddy is a secret). However, the
aforementioned work of Wang et al. [48] also showed
some vulnerabilities in the mechanism for obtaining se-
cret buddy nodes.
2.2 Random walk based architectures
In MorphMix [38] the scalability problem in Tor is al-
leviated by organizing relays in an unstructured peer-to-
peer overlay, where each relay has knowledge of only a
few other relays in the system. For building circuits, an
initiator performs a random walk by ﬁrst selecting a ran-
dom neighbor and building an onion routing circuit to
it. The initiator can then query the neighbor for its list
of neighbors, select a random peer, and then extend the
onion routing circuit to it. This process can be iterated a
number of times to build a random walk of any desired
length.
MorphMix is vulnerable to a route capture attack,
where a malicious relay returns a list of only other col-
luding nodes during a random walk. This attack ensures
that once the random walk hits a compromised relay, all
subsequent relays in the random walk are also compro-
mised. In particular, when the ﬁrst relay in the random
walk is compromised, user anonymity is trivially broken.
While MorphMix proposed a collusion detection mech-
anism to mitigate the route capture attack, it was later
shown that the mechanism can be broken by a collud-
ing set of attackers that models the internal state of each
relay [44].
ShadowWalker [24] also uses a random walk to locate
relays, but instead of organizing relays into an unstruc-
tured overlay, it uses a distributed hash table. Neighbor
relationships in the DHT are deterministic, and can be
veriﬁed by the initiator to mitigate route capture attacks.
To prevent any information leakage during veriﬁcation of
neighbor information, some redundancy is incorporated
into the topology itself. Recently, Schuchard et al. [39]
analyzed an attack on ShadowWalker, and also studied a
ﬁx for the attack.
We note that all of the peer-to-peer designs provide
only heuristic security, and the security community has
been very successful at breaking the state-of-art designs.
This is partly because of the complexity of the designs,
which make it difﬁcult for the system designers to rigor-
ously analyze the security of the system. We also note
that all secure peer-to-peer systems are built on top of
assumptions that are difﬁcult to realize in practice. For
example, security of these designs depends on the frac-
tion of compromised relays in the system being less than
20–25%. Modern botnets can comprise of tens to hun-
dreds of thousands of bots [19], which is likely sufﬁcient
to overwhelm the security of the system. In PIR-Tor, we
target a design where it is feasible to rigorously argue
about the anonymity properties of the design, and where
the ability to obtain random relays both securely and
anonymously does not depend on the fraction of com-
promised relays in the system.
3 Background
3.1 Tor
Tor [10] is a deployed network for low-latency anony-
mous communication. Tor serves hundreds of thousands
of clients, and carries terabytes of trafﬁc per day [45].
The network is comprised of approximately 2 000 relays
as of February 2011 [20]. Tor clients ﬁrst download a
complete list of relays (called the network consensus)
from directory servers, and then further download de-
tailed information about each of the relays (called the
relay descriptors). The network consensus is signed by
trusted directory authorities to prevent directory servers
from manipulating its contents. Clients select three re-
lays to build circuits for anonymous communication. A
fresh network consensus must be downloaded at least as
often as every 3 hours, while fresh relay descriptors are
downloaded every 18 hours.
To protect against certain long-term attacks [33] on
anonymous communication, each client, when it starts
Tor for the ﬁrst time, selects a set of three guard re-
lays from among fast and stable nodes. As long as the
selected guards remain available, new ones will not be
chosen. The ﬁrst relay in any circuit constructed by the
client will be one of its three guards. Also, clients select
the ﬁnal relay from the subset of the Tor relays which
allow trafﬁc to exit to the Internet, called the exit relays;
each exit relay has an exit policy, which lists the ports
to which the relay is willing to forward trafﬁc, and the
client’s choice of exit relay must of course be compatible
with its intended use of the circuit. Any relay is eligible
to be the middle relay of a circuit. Clients can multiplex
multiple TCP connections (called streams) over a single
Tor circuit; the lifetime of a circuit is generally 10 min-
utes. Finally, Tor relays have heterogeneous bandwidths,
and subject to the above constraints, clients select a Tor
relay with a probability that is proportional to a relay’s
bandwidth.1
3.2 PIR
Private information retrieval [5] provides a means of re-
trieving a block of data out of a database of r blocks,
without the database server learning any information
about which block was retrieved. A trivial solution to
the PIR problem — the one used currently by Tor —
is to transfer the entire database from the server to the
client, and then retrieve the block of interest from the
downloaded database. Although the trivial solution of-
fers perfect privacy protection, the communication over-
head is impractical for large databases or for a system
like Tor where minimizing bandwidth usage remains a
high priority. PIR schemes are therefore designed to pro-
vide sublinear communication complexity.
We can classify PIR schemes in terms of their pri-
vacy guarantees and the number of servers required for
1Since not all relays are eligible for every position, some additional
load-balancing logic is used to underweight relays eligible to be guards
or exits when choosing middle relays.
Information-theoretic PIR
the protection they provide.
schemes (ITPIR) are multi-server schemes that guaran-
tee query privacy irrespective of the computational capa-
bilities of the servers answering the user’s query. ITPIR
schemes assume the database servers are not colluding
to determine the user’s query. Single-server computa-
tional PIR schemes (CPIR), on the other hand, assume
a computationally limited database server that is unable
to break a hard computational problem, such as the dif-
ﬁculty of factoring large integers. The noncollusion re-
quirement is then removed, at some cost to efﬁciency.
We choose the single-server lattice-based scheme by