，失败返回错误号。
一个Condition Variable上阻塞等待，这个函数做以下三步操作：
mutex
_wait(pthread_cond_
init(pthread_cond_t
七
PTHREAD_COND_INITIALIZER;
*restrict cond,
≠cond);
attr)；
一个线程可以调
一个线程可以调
一个线程，
，如果到达了abstime所指定的
也可以调
attr参数
8
---
## Page 667
习题请点评
执行结果如下：
成FIFO。
1、在本节的例子中，
Consume
Consume
Consume
Consume
Produce
Produce
Consume
int main(int argc, char *argv[])
void *producer(void *p)
(dx PToA)xaunsuOo* PTOA
Produce
Produce
S
./a.out
881
pthread
pthread_create(&cid,
pthread_t pid, cid;
for （;;)
9
911
struct msg *mp;
for（;）{
struct msg *mp;
，生产者和消费者访问链表的顺序是LIFO的，
88
join(cid,
join(pid,
sleep(rand()
pthread_cond_signal(&has_product);
head
mp->next 
pthread 
mp->num
mp
sleep(rand() % 5);
= head;
mp;
(head
mp-
_mutex_
_mutex_
pthread_cond_wait(&has_product, &lock);
= head;
rand(
->next;
NULL,
 5);
%d\n"
consumer，
(unu
#include
#include
#include
int 
#include 
+
 sem_post(sem_t
，也可用于不同进程间的同步。
，将Mutex减到O，表示不再有可用资源，解锁时释放该资源，将Mutex重新加
：(1)
sem_wait(&product_number);
sleep(rand()%5);
d
sem_post(&product_number);
 product_number;
使semaphore的值减1,
*sem)
 sem);
ksem);
%NUM;
 sem);
 int pshared, unsigned int value);
，详见sem_overview(7)，这种信号量不仅可用于同一进程
，其空间可以动态分配，
d\n"
初始化时Mutex是1，
，本节只介绍这种情况。在用
，现在基于固定大小的环形队列
，表示有一个可用资源
---
## Page 669
关于这些同步机制的细节，有兴趣的读者可以参考[APUE2e]和[ULK]
2.线程控制
copy-update）等机制。
情况下解决访问冲突的问题可以尽量避免挂起某个线程，
用挂起等待的方式解决访问冲突不见得是最好的办法，
的并发性。
在Writer修改数据时其它Reader或Writer不能访问数据，可见Reader-Writer Lock比Mutex具有更好
Lock）的概念，
线程可以改写数据，就必须考虑线程间同步的问题。由此引出了读者写者锁（Reader-Writer 
如果共享数据是只读的，那么各线程读到的数据应该总是一致的，不会出现访问冲突。只要有一个
3.4.其它线程间同步机制 请点评
用ConditionVariable实现Semaphore，然后用自己实现的Semaphore重写本节的程序。
习题请点评
1、本节和上一
int main(int argc, char *argv[l)
一节的例子给出一个重要的提示：用Condition Variable可以实现Semaphore。请
，Reader之间并不互斥，可以同时读共享数据，而Writer是独占的（exclusive）
return 0;
pthread
pthread
 sem_init(&blank_ number,
pthread
pthread_t pid, cid;
sem
pthread
sleep(rand()%5);
queue[c]
printf("Consume %d\n", queue[c]);
(c+1)%NUM;
全国嵌入式人才培训基地
NULL)
NULL,
0，NUM);
起始页
上一级
，因为这样毕竟会影响系统的并发性，在某些
：例如Linux内核的Seqlock、RCU（read-
NULL)
NULL)
4.编程练习
669
下一页
---
## Page 670
编写程序仿真哲学家就餐的场景：
拿到就吃饭rand()%10秒，然后放下筷子。
的筷子再拿右手边的筷子（筷子这种资源可以用mutex表示），有任何一边拿不到就一直等着，全
假设哲学家的编号是A、B、C、D、E
现在引入问题的关键：这些哲学家很穷，
4.编程练习请点评
每个哲学家都是一个单独的线程，
图所示：
子，那他只有等着。
筷子。
然把叉子换成筷子会更合理，
餐具是有限的，
思考和吃饭，
原版的故事里有五个哲学家(不过我们写的程序可以有N个哲学家),
哲学家就餐问题。这是由计算机科学家Dijkstra提出的经典死锁场景。
。哲学家吃饭的时候必须同时得到左手边和右手边的筷子。如果他身边的任何一位正在使用筷
图35.2.哲学家问题
Philosopher
Philosopher
Philosopher
Philosopher
Philosopher
Philosopher
Philosopher
Philosopher 
D
，他们思考的时候不需要任何共享资源，
原版的故事里，
ＣA
B
D
 fetches chopstick
C
releases 
fetches
fetches chopstick
fetches chopstick.
fetches
所以：-
餐具是叉子，
，每个线程循环做以下动作：思考rand()%10秒，
 chopstick
chopstick
 chopsticks
E，筷子编号是1、2、3、4、5，哲学家和筷子围成一圈如下
一个哲学家需要两根筷子才能吃饭。
全国嵌入式人才培训基地
，只买得起五根筷子。他们坐成一圈，
第35章线程
4.编程练习
5
5
 1
1
2
，但是吃饭的时候就必须使用餐具，
这些哲学家们只做两件事－－
 两个人的中间放一根
，然后先拿左手边
而餐桌上的
---
## Page 671
3.线程间同步
用usleep(3)加快仿真的速度，
分析一下，
，这个过程有没有可能产生死锁？调用usleep(3)函数可以实现微秒级的延时，试着
，看能不能观察到死锁现象。
全国嵌入式人才培训基地
起始页
级
。然后修改上述算法避免产生死锁。
第36章TCP/IP协议基础
9
---
## Page 672
6. UDP段格式
4.编程练习
5.IP地址与路
4.IP数据报格式
3.ARP数据报格式
2.以太网(RFC 894)帧格式
目录
第 36 章TCP/IP协议基础 请点评
7.TCP协议
1.TCP/IP协议栈与数据包封装
一页
7.3.流量控制
7.2.通讯时序
7.1.段格式
由
第36章TCP/IP协议基础
部分IIl. Linux系统编程
全国嵌入式人才培训基地
全国嵌入式人才培训基地
起始页
上一级
1.TCP/IP协议栈与数据包封装
---
## Page 673
两台计算机通过TCP/IP协议通讯的过程如下所示(该图出自[ICPIP1)
层（Link）四层。如下图所示（该图出自[TCPIP1）。
TCP/IP网络协议栈分为应用层（Application）、传输层（Transport）、网络层（Network）和链路
1.TCP/IP协议栈与数据包封装 请点评
上一页
图36.2.TCP/IP通讯过程
图 36.1.TCP/IP协议栈
链路层
网络层
传输层
应用层
设备驱动程序及接口卡
IP、ICMP和IGMP
TCP和UDP
Telnet、FTP和e-mail等
1.TCP/IP协议栈与数据包封装
第36章TCP/IP协议基础
全国嵌入式人才培训基地
下一页
---
## Page 674
自[ICPIP])
一台计算机通过一定的路径发送到另一
应用程序)
传输层及其以下的机制由内核提供，
图 36.3.TCP/IP数据包的封装
链路层
网络层
传输层
应用层
 应用程序对通讯数据的含义进行解释，
以太网驱
动程序
TCP
客户
FTP
日
→
+
4
 应用层由用户进程提供（后面将介绍如何使用socket APl编写
以太网协议
TCP协议
FTP协议
一台计算机。应用层数据通过协议栈发到网络上时，
以太网
1
一
→
，而传输层及其以下处理通讯的细节，
动程序
以太网驱
服务器
IP
TCP
FTP
用户进程
核
处理通信细节
程序细节
处理应用
每层协议
将数据从
---
## Page 675
机到另一台计算机传输过程中要经过一
上图对应两台计算机在同一网段中的情况，
(datagram) 
不同的协议层对数据包有不同的称谓，
协议再剥掉相应的首部，最后将应用层数据交给应用程序处理。
图 36.4.跨路由器通讯过程
，在链路层叫做帧（frame）。数据封装成帧后发到传输介质上，
IP首部
IP首部
20
TCP首部
TCP首部
TCP首部
46~1500字节
以太网帧
一个或多个路由器，
，在传输层叫做段（segment）
IP数据报
，如果两台计算机在不同的网段中，
TCP段
应用数据
应用数据
应用数据
用户数据
用户数据
，如下图所示（该图出自[TCPIP1)
尾部
以太网
在网络层叫做数据报
那么数据从一台计算
，到达目的主机后每
驱动程序
以太网
以太网
应用程序
品
TCP
9
---
## Page 676
息排序等工作。
连接，也不保证可靠性
的数据包自动重发,
议
网络层负责点到点
包拆掉链路层首部重新封装之后再转发。
兆以太网之间、以太网和令牌环网之间）
换机是工作在链路层的网络设备，
链路层有以太网、令牌环网等标准,
其实在链路层之下还有物理层,
(end-to-end)
装
过
器
设
接。也就是说TCP传输的双方需要首先建立连接，
中提供支持。
。IP协议不保证传输的可靠性，
接口之间转发数据包
十多个路由器。路由器是工作在第三层的网络设备，
负责根据IP地址选择合适的路径转发数据包，
络层的IP协议是构成Internet的基础。Internet上的主机通过IP地址来标识，
么信号算作新帧的开始）、冲突检测（如果检测到冲突就自动重发）
里层的能力决定了最大传输速率、传输距离、抗干扰性等。集线器（Hub）是工作在物理层的网络
然后
TCP是
、早期以太网采用的的同轴电缆（现在主要用于有线电视）、光纤等都属于物理层的概念。
说话就行了
种面向连接的、可靠的协议，
以太网驱
的传辅
动程序
TCP
客户