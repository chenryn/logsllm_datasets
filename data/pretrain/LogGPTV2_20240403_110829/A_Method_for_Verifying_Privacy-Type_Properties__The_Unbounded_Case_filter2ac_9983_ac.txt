output action. These labels have no effect on the semantics.
Deﬁnition 4: An initiator role is a ground process obtained
using the following grammar:
PI ∶∶= 0 ∣ (cid:10)∶ out(c, u).PR
where c ∈ C, u ∈ T (Σc,N ∪X), (cid:10) ∈ L, and PR is obtained
PR ∶∶= 0
from the grammar of responder roles:
∣
∣
in(c, y).let x= v in PI else 0
in(c, y).let x= v in PI else (cid:10)∶ out(c′, u′)
where c, c′ ∈ C, y ∈ X , x (resp. v) is a (possibly empty)
sequence of variables in X (resp. terms in T (Σ,N ∪ X)),
u′ ∈T (Σc,N ∪X), and (cid:10)∈L.
Intuitively, a role describes the actions performed by an
agent. A responder role consists of waiting for an input
and, depending on the outcome of a number of tests, the
process will continue by sending a message, or stop possibly
outputting an error message. An initiator behaves similarly but
begins with an output. The grammar forces to add a conditional
after each input. This is not a real restriction as it is always
possible to add trivial conditionals with empty x, and v.
Example 8: Continuing our running example, PI (resp. PR)
as deﬁned in Example 4 is an initiator (resp. responder) role,
up to the addition of trivial conditionals and distinct labels (cid:10)1,
(cid:10)2, and (cid:10)3 to decorate output actions.
568568
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
Then, a protocol consists of an initiator role and a responder
role that can interact together. This is formally stated through
the notion of honest trace.
Deﬁnition 5: A trace tr (i.e. a sequence of actions) is honest
for a frame φ if τelse ∉ tr and obs(tr) is of the form
out( , w0).in( , R0).out( , w1).in( , R1). . . .
for arbitrary channel names, and such that Riφ⇓=E wiφ⇓ for
any action in( , Ri) occurring in tr.
An honest trace is a trace in which the attacker does not
really interfere, and that allows the execution to progress
without going into an else branch that intuitively correspond
to a way to abort the protocol.
Now, among the names that occur in the roles, we need to
distinguish those that correspond to long-term data e.g. keys
(called identity names) from others that are freshly generated at
each session (called session names). We also need to introduce
if it is equal modulo E to a term that is built using public
symbols only.
the notion of public messages. A message u is public if u=E v
for some v ∈T (Σc∩ Σpub,∅). Intuitively, a message is public
Deﬁnition 6: A protocol Π is a tuple (k, nI , nR,I,R)
where k, nI, nR are three disjoint sets of names, I (resp. R)
is an initiator (resp. responder) role such that fn(I) ⊆ k⊔ nI
(resp. fn(R)⊆ k⊔ nR). Labels of I and R must be pairwise
distinct. Names k (resp. nI ⊔ nR) are called identity names
Let PΠ = νk.(νnI .I ∣ νnR.R). We assume that PΠ
trh(cid:18)→
(∅; φh) for some frame φh that does not contain any public
Example 9: Let Π = (k, nI , nR, PI , PR) with PI and PR
PΠ = ν k.(ν nI .PI ∣ ν nR.PR). Let trh = tr, and φh = φ0
as deﬁned in Example 4. We have already seen that PI
is an initiator role whereas PR is a responder role. Let
message, and some trace trh that is honest for φh.
(resp. session names).
as deﬁned in Example 5. They satisfy the requirements stated
in Deﬁnition 6, and therefore Π is a protocol according to our
deﬁnition.
B. Security properties under study
We consider both anonymity and unlinkability as deﬁned
in [8]. Before recalling the formal deﬁnition of these two
notions, we ﬁrst introduce some useful notation.
Given a protocol Π, as deﬁned above, we denote MΠ the
possibly execute an arbitrary number of sessions, whereas SΠ
process that represents an arbitrary number of agents that may
represents an arbitrary number of agents that can at most
execute one session each. Formally, we deﬁne:
MΠ ∶= !νk.(!νnI .I ∣ !νnR.R); and
SΠ ∶= !νk.(νnI .I ∣ νnR.R).
a) Unlinkability: Informally, a protocol preserves unlink-
ability w.r.t. the roles I and R if each session of these roles
the protocol with respect to unlinkability, allows the roles I
looks to an outside observer as if it has been executed with
different identity names. In other words, an ideal version of
andR to be executed at most once for each identity names. An
outside observer should then not be able to tell the difference
between the original protocol and the ideal version of this
protocol as formally stated below.
Deﬁnition 7: Let Π = (k, nI , nR,I,R) be a protocol. We
say that Π preserves unlinkability if MΠ ≈SΠ.
Although unlinkability of only one role (e.g. the tag for
RFID protocols) is often considered in the literature, we
consider a stronger notion where both roles are treated sym-
metrically. We believe this is needed to not miss practical
attacks (see Sections VII-C,VII-E for a discussion).
b) Anonymity: In order to express anonymity w.r.t. some
addition to the arbitrary number of agents that may execute an
identities id⊆ k, we introduce the following process:
Π ∶= MΠ ∣ νk.(!νnI .I0 ∣ !νnR.R0)
Mid
where I0 =I{id↦ id0}, R0 =R{id↦ id0}, and id0 are fresh
constants from Σc∩Σpub (i.e. not used in Π). In this process, in
arbitrary number of sessions, there are two agents I0 and R0
Deﬁnition 8: Let Π=(k, nI , nR,I,R) be a protocol, id⊆ k.
We say that Π preserves anonymity w.r.t. id if MΠ ≈Mid
does not see the difference between the system Mid
id0 is present) and the original system MΠ (in which id0 is
not present). Since id0 is not present in the system MΠ, his
that have disclosed (part of) their identity id0 to the attacker,
and that may also execute an arbitrary number of sessions.
Deﬁned in this way, anonymity ensures that an attacker
Π (in which
Π.
anonymity is trivially preserved.
c) Discussion: A ﬂurry of alternative deﬁnitions of un-
linkability have been proposed in the literature (see, e.g. [26],
[27] for a comparison). Among the strongest ones, various
game-based formulations have been considered, both in the
computational and symbolic models. Some of these deﬁni-
tions, unlike strong unlinkability, can be veriﬁed directly in
ProVerif using diff-equivalence [28]. However, such game-
based deﬁnitions do not imply strong unlinkability (see Ap-
pendix C for a counter-example) which leaves open the
problem of automatically verifying it.
IV. OUR APPROACH
We now deﬁne our two conditions, namely frame opacity
and well-authentication, and our result which states that these
conditions are sufﬁcient to ensure unlinkability and anonymity.
Before doing that, we shall
introduce annotations in the
semantics of our processes, in order to ease their analysis.
After having stated our conditions and result, we will illustrate
that our conditions are realistic on various case studies.
A. Annotations
We shall now deﬁne an annotated semantics whose transi-
tions are equipped with more informative actions. The anno-
tated actions will feature labels identifying which concurrent
process has performed the action. This will allow us to identify
which speciﬁc agent (with some speciﬁc identity and session
names) performed some action.
569569
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
an action other than τ (possibly τthen or τelse) and a is an
Formally, an annotation is of the form A(k, n) where A ∈
{I, R}. An annotated action is either τ or α[a] where α is
annotation. Finally, an annotated process is of the form P[a]
Given a protocol Π = (k, nI , nR,I,R), consider any exe-
Π, MΠ or SΠ. In such an execution, τ actions
cution of Mid
where P is a role process and a is an annotation.
are solely used to instantiate new agents, by unfolding a
replication, breaking a parallel and choosing fresh names.
Performing these actions results in the creation of agents, that
is, instances of I and R with fresh names. Actions other
than τ (that is, input, output and conditionals) are then only
performed by those agents.
This allows us to deﬁne an annotated semantics for our
processes of interest. In that semantics, agents in the multiset
of processes are annotated by their identity (i.e. identity and
session names that have been created for them), and actions
other than τ are annotated with the identity of the agent
responsible for that action. Traces of the annotated semantics
will be denoted by ta. We also assume that labels used to
decorate output actions are added into the frame together with
the outputted term so that we can refer to them when needed.
Example 10: Considering the protocol of Example 9,
Example 5. The annotated execution has the trace ta given
below, where k′, n′
process SΠ can essentially perform the execution seen in
R are fresh names, aI = I(k′, n′
I)
and aR = R(k′, n′
R):
ta = τ.τ.τ.τ.τ.out(cI , w1)[aI].in(cR, w1)[aR].
out(cR, w2)[aR].in(cI , w2)[aI].τthen[aI].
out(cI , w3)[aI].in(cR, w3)[aR].τthen[aR]
({IσI[aI], RσR[aR], SΠ)}; φ0).
After the initial τ actions, the annotated conﬁguration is
I and n′
where σI ={k ↦ k′, nI ↦ n′
I}, and σR ={k ↦ k′, nR ↦ n′
R}.
The structure is preserved for the rest of the execution of ta,
with three processes in the multiset (until they become null),
two of which remaining annotated with aI and aR. The three
terms in φ0 are decorated with (cid:10)1, (cid:10)2 and (cid:10)3 respectively.
Note that annotations of the speciﬁc agents whose identity
contains constants id0 will contain those constants (i.e. they
are of the form A(k, n) with id0 ⊆ k).
B. Frame opacity
In light of attacks based on leakage from messages where
relations between outputted messages are exploited by the
attacker to trace an agent, our ﬁrst condition will basically
require that, in any execution, outputs are indistinguishable
from pure randomness and therefore do not reveal anything to
the attacker. Formally, we deﬁne this notion by comparing a
frame with an ideal version of it, which is essentially obtained
by replacing each message of a frame by a fresh name.
However, in order to obtain a reasonable condition, we must
make an exception there for constructors which can be inverted
(e.g. pairs, lists, XML data) which we call transparent and are
often used in protocols without any inherent risk.
570570
to be transparent if it satisﬁes the following conditions:
Deﬁnition 9: A set of constructors Σt ⊆ Σc ∩ Σpub is said
● for all f ∈ Σt of arity n, and for all 1≤ i≤ n, there exists
a recipe Ri ∈ T (Σpub,{w}) such that for any message
u = f(u1, . . . , un) ∈ T (Σc,N), one has Ri{w ↦ u} ⇓ vi
for some vi such that vi =E ui;
● symbols of Σt do not occur in the equations of E.
In the rest of our theoretical development, we assume an
arbitrary transparent set Σt. Note that our results hold even if
some constructors satisfying the previous two conditions are
not part of the chosen Σt.
Example 11: In the signature of Example 1, the largest set
of transparent constructors is {⟨⟩, 0, ok}.
terms by holes (denoted by ◻), and then ﬁll-in these holes
We now deﬁne the idealization of (the observable parts of)
messages and frames: we ﬁrst replace non-transparent sub-
using distinct fresh names. The technical details of the ﬁrst
step may be found in Appendix A.
Proposition 1: There exists a function
[⋅]ideal ∶ T (Σc,N)→T (Σt,{◻})
such that [u]ideal = f([u1]ideal, . . . ,[un]ideal) whenever u =E
f(u1, . . . , un) for f ∈ Σt, and [u]ideal = ◻ otherwise. Further-
more, we have that [u]ideal =[v]ideal whenever u=E v.
Deﬁnition 10: A concretization of ut ∈ T (Σt,{◻}) is any
We denote by inst(ut) the set of all concretizations of ut, and
by [u]nonce the set inst([u]ideal).
Example 12: Let u be ⟨nP , enc(⟨ok, nP⟩, k)⟩. We have that
[u]ideal =⟨◻,◻⟩ and [u]nonce ={⟨n1, n2⟩ ∣ n1 ≠ n2 ∈N}.
term obtained by replacing each hole of ut by a fresh nonce.
Those deﬁnitions are extended to frames in a natural way,
with the freshness condition on nonces being understood at
the level of frame and not of individual messages. As a result,
we immediately have that, for any u′ ∈ [u]nonce (resp. φ′ ∈
[φ]nonce), no nonce appears twice in u′ (resp. φ′), and therefore
for all frames ψ and φ1, φ2 ∈[ψ]nonce, one has φ1 ∼ φ2.
We are now ready to state our ﬁrst condition:
Deﬁnition 11: The protocol Π ensures frame-opacity if, for
any execution (Mid
1) φ∼ ψ for some ψ ∈[φ]nonce, and
2) for any wi, wj in dom(φ) that carry the same label
Π;∅) ta(cid:18)→(Q; φ), we have that:
(cid:10)∈L, we have that [wiφ]ideal =[wjφ]ideal.
Example 13: Consider the frame φ0 as deﬁned in Exam-
ple 5. We have that
[φ0]ideal ={w1 ↦◻, w2 ↦◻, w3 ↦◻}.
We have that φ0 ∼ φ for any φ∈[φ0]nonce.
and its idealized version [φ0]nonce does not hold, and therefore
I, static equivalence between φ0
However, in case, n′
R = n′
any protocol that generates such a frame is not frame opaque.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
C. Well-authentication
Our second condition will prevent the attacker to obtain
some information about agents through the outcome of condi-
tionals. To do so, we will essentially require that conditionals
of I and R can only be executed successfully in honest,
intended interactions. It
is unnecessary to impose such a
condition on conditionals that never leak any information,
which are found in several security protocols. We characterize
below a simple class of such conditionals, for which the
attacker will always know the outcome of the conditional
based on the past interaction.
Deﬁnition 12: A conditional let x = v in P else Q
occurring in A∈{I,R} is safe if v ∈T (Σpub,{x1, . . . , xn}∪
{u1, . . . , un}), where the xi are the variables bound by the
previous inputs of that role, and ui are the messages used in
the previous outputs of that role.
Example 14: Consider the process given below:
out(c, u).in(c, x).let z = neq(x, u) in P else Q
The conditional is used to ensure that the agent will not accept
as input the message he sent at the previous step. Such a