          ISBN = "1234567890"
        }
        }
      };
方法ConvertObject使用JsonConvert.SerializeObject检索Inventory对象，并将其转换为
JSON。SerializeObject的第二个参数允许把格式定义为None或Indented。None最适合将空
白降到最低；Indented提供了更好的可读性。JSON字符串写入控制台，之后使用
JsonConvert.DeserializeObject转换回对象树。DeserializeObject有几个重载版本，泛型变体
返回泛型类型，而不是一个对象，所以没有必要进行类型转换：
    public static void ConvertObject()
    {
      Inventory inventory = GetInventoryObject();
      string json = JsonConvert.SerializeObject(inventory, Formatting.Indented);
      WriteLine(json);
      WriteLine();
      Inventory newInventory = JsonConvert.DeserializeObject(json);
      foreach (var product in newInventory.InventoryItems)
      {
        WriteLine(product.ProductName);
      }
    }
运行应用程序，在控制台显示JSON生成的Inventory类型：
    {
      "InventoryItems": [
        {
        "Discount": 0,
        "ProductID": 100,
        "ProductName": "Product Thing",
        "SupplierID": 10,
        "CategoryID": 0,
        "QuantityPerUnit": null,
        "UnitPrice": 0.0,
        "UnitsInStock": 0,
        "UnitsOnOrder": 0,
        "ReorderLevel": 0,
        "Discontinued": false
        },
        {
        "ISBN": "1234567890",
        "Discount": 0,
        "ProductID": 101,
        "ProductName": "How To Use Your New Product Thing",
        "SupplierID": 10,
        "CategoryID": 0,
        "QuantityPerUnit": null,
        "UnitPrice": 0.0,
        "UnitsInStock": 0,
        "UnitsOnOrder": 0,
        "ReorderLevel": 0,
        "Discontinued": false
        }
      ]
    }
转换回JSON对象，显示产品名称：
    Product Thing
    How To Use Your New Product Thing
27.7.3 序列化对象
类似于XmlSerializer，还可以直接把JSON字符串写入文件。下面的代码片段检索
Inventory对象，并使用JsonSerializer将它写到一个文件流中（代码文件JsonSample 
/
Program.cs）：
    public static void SerializeJson()
    {
      using (StreamWriter writer = File.CreateText(InventoryFileName))
      {
        JsonSerializer serializer = JsonSerializer.Create(
        new JsonSerializerSettings { Formatting = Formatting.Indented });
        serializer.Serialize(writer, GetInventoryObject());
      }
    }
可以通过调用JsonSerializer的Deserialize方法，从流中转换JSON：
    public static void DeserializeJson()
    {
      using (StreamReader reader = File.OpenText(InventoryFileName))
      {
        JsonSerializer serializer = JsonSerializer.Create();
        var inventory = serializer.Deserialize(reader, typeof(Inventory))
        as Inventory;
        foreach (var item in inventory.InventoryItems)
        {
        WriteLine(item.ProductName);
        }
      }
    }
27.8 小结
本章探讨了.NET 
Framework的System.Xml名称空间中的许多内容，其中包括如何使
用基于XMLReader和XmlWriter的类快速读写XML文档，如何使用XmlDocument类在.NET
中实现DOM，如何使用DOM的强大功能。另外，我们还介绍了XPath，可以把对象序列
化到XML中，还可以通过两个方法调用对其进行反序列化。
本章介绍了如何使用LINQ to XML创建XML文档和片段，使用XML数据创建查询。
除了XML之外，本章还介绍了如何使用JSON和Json.NET序列化对象，解析JSON字符
串，来建立.NET对象。
下一章讨论如何使用基于XML的资源文件本地化.NET应用程序。
第28章
本地化
本章要点
● 数字和日期的格式化
● 为本地化内容使用资源
● 本地化WPF桌面应用程序
● 本地化ASP.NET Core Web应用程序
● 本地化通用Windows应用程序
● 创建自定义资源读取器
● 创建自定义区域性
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● NumberAndDateFormatting
● SortingDemo
● CreateResource
● WPFCultureDemo
● ResourcesDemo
● WPFApplication
● WebApplication
● UWPLocalization
● DatabaseResourceReader
● CustomCultures
28.1 全球市场
价值1.25亿美元的NASA的火星气象卫星在1999年9月23日失踪了，其原因是一个工程
组为一个关键的太空操作使用了米制单位，而另一个工程组以英寸为单位。当编写的应用
程序要在世界各国发布时，必须考虑不同的区域性和区域。
不同的区域性在日历、数字和日期格式上各不相同。按照字母A～Z给字符串排序也
会导致不同的结果，因为存在不同的文化差异。为了使应用程序可应用于全球市场，就必
须对应用程序进行全球化和本地化。
本章将介绍.NET应用程序的全球化和本地化。全球化（globalization）用于国际化的
应用程序：使应用程序可以在国际市场上销售。采用全球化策略，应用程序应根据区域
性、不同的日历等支持不同的数字和日期格式。本地化（localization）用于为特定的区域
性翻译应用程序。而字符串的翻译可以使用资源，如.NET资源或WPF资源字典。
.NET支持Windows和Web应用程序的全球化和本地化。要使应用程序全球化，可以使
用System.Globalization名称空间中的类；要使应用程序本地化，可以使用System.Resources
名称空间支持的资源。
图28-1
28.2 System.Globalization名称空间
System.Globalization名称空间包含了所有的区域性和区域类，以支持不同的日期格
式、不同的数字格式，甚至由GregorianCalendar类、HebrewCalendar类和JapaneseCalendar
类等表示的不同日历。使用这些类可以根据不同的地区显示不同的表示法。
本节讨论使用System.Globalization名称空间时要考虑的如下问题：
● Unicode问题
● 区域性和区域
● 显示所有区域性及其特征的例子
● 排序
28.2.1 Unicode问题
因为一个Unicode字符有16位，所以共有65 536个Unicode字符。这对于当前在信息技
术中使用的所有语言够用吗？例如，汉语就需要80 
000多个字符。但是，Unicode可以解
决这个问题。使用Unicode必须区分基本字符和组合字符。可以给一个基本字符添加若干
个组合字符，组成一个可显示的字符或一个文本元素。
例如，冰岛的字符Ogonek就可以使用基
本字符0x006F（拉丁小写字母o）、组合字
符0x0328（组合Ogonek）和0x0304（组合
Macron）组合而成，如图28-1所示。组合字
符在0x0300～0x0345之间定义，对于美国和欧洲市场，预定义字符有助于处理特殊的字
符。字符Ogonek也可以用预定义字符0x01ED来定义。
对于亚洲市场，只有汉语需要80 000多个字符，但没有这么多的预定义字符。在亚洲
语言中，总是要处理组合字符。其问题在于获取显示字符或文本元素的正确数字，得到基
本字符而不是组合字符。System.Globalization名称空间提供的StringInfo类可以用于处理这
个问题。
表28-1列出了StringInfo类的静态方法，这些方法有助于处理组合字符。
表28-1
方法
说明
GetNextTextElement（ ）
返回指定字符串的第一个文本元素（基本
字符和所有的组合字符）
GetTextElementEnumerator（ ）
返回一个允许迭代字符串中所有文本元素
的TextElementEnumerator对象
ParseCombiningCharacters（ ）
返回一个引用字符串中所有基本字符的整
型数组
  注意： 一个显示字符可以包含多个Unicode字符。要解决这个问题，如果编
写的应用程序要在国际市场销售，就不应使用数据类型char，而应使用string。string可
以包含由基本字符和组合字符组成的文本元素，而char不具备该作用。
28.2.2 区域性和区域
世界分为多个区域性和区域，应用程序必须知道这些区域性和区域的差异。区域性是
基于用户的语言和文化习惯的一组首选项。RFC 4646（www.ietf.org/rfc/rfc4646.txt）定义
了区域性的名称，这些名称根据语言和国家或区域的不同在世界各地使用。例如，en-
AU、en-CA、en-GB和en-US分别用于表示澳大利亚、加拿大、英国和美国的英语。
在System.Globalization名称空间中，最重要的类是CultureInfo。这个类表示区域性，
定义了日历、数字和日期的格式，以及和区域性一起使用的排序字符串。
RegionInfo类表示区域设置（如货币），说明该区域是否使用米制系统。在某些区域
中，可以使用多种语言。例如，西班牙区域就有Basque（eu-ES）、Catalan（ca-ES）、
Spanish（es-ES）和Galician（gl-ES）区域性。一个区域可以有多种语言，同样，一种语
言也可以在多个区域使用；例如，墨西哥、西班牙、危地马拉、阿根廷和秘鲁等都使用西
班牙语。
本章的后面将介绍一个示例应用程序，以说明区域性和区域的这些特征。
1．特定、中立和不变的区域性
在.NET Framework中使用区域性，必须区分3种类型：特定、中立和不变的区域性。
特定的区域性与真正存在的区域性相关，这种区域性用上一节介绍的RFC 
4646定义。特
定的区域性可以映射到中立的区域性。例如，de是特定区域性de-AT、de-DE、de-CH等的
中立区域性。de是德语（German）的简写，AT、DE和CH分别是奥地利（Austria）、德
国（Germany）和瑞士（Switzerland）等国家的简写。
在翻译应用程序时，通常不需要为每个区域进行翻译，因为奥地利和瑞士等国使用的
德语没有太大的区别。所以可以使用中立的区域性来本地化应用程序，而不需要使用特定
的区域性。
不变的区域性独立于真正的区域性。在文件中存储格式化的数字或日期，或通过网络
把它们发送到服务器上时，最好使用独立于任何用户设置的区域性。
图28-2显示了区域性类型的相互关系。
图28-2
2. CurrentCulture和CurrentUICulture
设置区域性时，必须区分用户界面的区域性和数字及日期格式的区域性。区域性与线
程相关，通过这两种区域性类型，就可以把两种区域性设置应用于线程。Culture Info类提
供了静态属性CurrentCulture和CurrentUICulture。CurrentCulture属性用于设置与格式化和
排序选项一起使用的区域性，而CurrentUICulture属性用于设置用户界面的语言。
使用Windows设置中的REGION & LANGUAGE选项，用户就可以在Windows操作系
统中安装其他语言，如图28-3所示。配置为默认的语言是当前的UI区域性。
图28-3
要改变当前的区域性，可以使用对话框中的Additional date, time, & regional settings链
接，如图28-3所示。其中，单击Change Date, Time, or Number Formats选项，查看如图28-4
所示的对话框。格式的语言设置会影响当前的区域性。也可以改变独立于区域性的数字格
式、时间格式、日期格式的默认设置。
图28-4
这些设置都提供默认值，在许多情况下，不需要改变默认行为。如果需要改变区域
性，只需要把线程的两个区域性改为Spanish区域性，如下面的代码片段所示（使用名称
空间System.Globalization）：
    var ci = new CultureInfo("es-ES");
    CultureInfo.CurrentCulture = ci;
    CultureInfo.CurrentUICulture = ci;
前面已学习了区域性的设置，下面讨论CurrentCulture设置对数字和日期格式化的影
响。
3．数字格式化
System名称空间中的数字结构Int16、Int32和Int64等都有一个重载的ToString（）方
法。这个方法可以根据区域设置创建不同的数字表示法。对于Int32结构，ToString（）方
法有下述4个重载版本：
    public string ToString();
    public string ToString(IFormatProvider);
    public string ToString(string);
    public string ToString(string, IFormatProvider);
不带参数的ToString（）方法返回一个没有格式化选项的字符串，也可以给
ToString（）方法传递一个字符串和一个实现IFormatProvider接口的类。
该字符串指定表示法的格式，而这个格式可以是标准数字格式化字符串或者图形数字
格式化字符串。对于标准数字格式化，字符串是预定义的，其中C表示货币符号，D表示
输出为小数，E表示输出用科学计数法表示，F表示定点输出，G表示一般输出，N表示输
出为数字，X表示输出为十六进制数。对于图形数字格式化字符串，可以指定位数、节和
组分隔符、百分号等。图形数字格式字符串###, ###表示：两个3位数块被一个组分隔符分
开。
IFormatProvider接口由NumberFormatInfo、DateTimeFormatInfo和CultureInfo类实现。
这个接口定义了GetFormat（）方法，它返回一个格式对象。
NumberFormatInfo类可以为数字定义自定义格式。使用NumberFormatInfo类的默认构
造函数，可以创建独立于区域性的对象或不变的对象。使用这个类的属性，可以改变所有
格式化选项，如正号、百分号、数字组分隔符和货币符号等。从静态属性InvariantInfo返
回一个与区域性无关的只读NumberFormatInfo对象。NumberFormatInfo对象的格式化值取
决于当前线程的CultureInfo类，该线程从静态属性CurrentInfo返回。
示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Globalization
    static System.Console
下一个示例使用一个简单的控制台应用程序（包）项目。在这段代码中，第一个示例
显示了在当前线程的区域性格式中所显示的数字（这里是English-US，是操作系统的设
置）。第二个示例使用了带有IFormatProvider参数的ToString（）方法。CultureInfo类实现
IFormatProvider接口，所以创建一个使用法国区域性的CultureInfo对象。第3个示例改变了
当前线程的区域性。使用CultureInfo实例的CurrentCulture属性，把区域性改为德国（代码
文件NumberAndDateFormatting/Program.cs）：
    public static void NumberFormatDemo()
    {
      int val = 1234567890;
      // culture of the current thread
      WriteLine(val.ToString("N"));
      // use IFormatProvider
      WriteLine(val.ToString("N", new CultureInfo("fr-FR")));
      // change the current culture
      CultureInfo.CurrentCulture = new CultureInfo("de-DE");
      WriteLine(val.ToString("N"));
    }
  注意： 在.NET 4.6之前，CultureInfo的CurrentCulture属性是只读的。在.NET
先前的版本中，可以使用Thread.CurrentThread.CurrentCulture设置区域性。
结果如下所示。可以把这个结果与前面列举的美国、英国、法国和德国区域性的结果
进行比较。
    1,234,567,890.00
    1 234 567 890,00
    1.234.567.890,00
4．日期格式化
对于日期，Visual Studio也提供了与数字相同的支持。DateTime结构有一些把日期转
换为字符串的ToString方法的重载。可以传送字符串格式并指定另一种区域性：
    public string ToString();
    public string ToString(IFormatProvider);
    public string ToString(string);
    public string ToString(string, IFormatProvider);
使用ToString（）方法的字符串参数，可以指定预定义格式字符或自定义格式字符
串，把日期转换为字符串。DateTimeFormatInfo类指定了可能的值。DateTimeFormatInfo
类指定的格式字符串有不同的含义。例如，D表示长日期格式，d表示短日期格式，ddd表
示一星期中某一天的缩写，dddd表示一星期中某一天的全称，yyyy表示年份，T表示长时
间格式，t表示短时间格式。使用IFormatProvider参数可以指定区域性。使用不带