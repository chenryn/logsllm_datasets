题目大意
 Example 2: 
Example 1: 
Note:
 2．转换过程中的中间单词必须是字典中的单词。
1．每次转换只能改变一个字母。
Output: 0
wordList = ["hot","dot","dog","lot","log"]
beginword = "hit"
return its length 5.
 "cog", 
 All words have the same length.
 Return O if there is no such transformation sequence.
word.
所有单词具有相同的长度。
You may assume no duplicates in the word list.
All words contain only lowercase alphabetic characters.
---
## Page 258
代码
解题思路
·这一题题目中虽然说了要求找到一条最短的路径，
·这一题要求输出从 beginword 变换到 endword 最短变换次数。可以用 BFS，从 beginword 开
·你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
func getwordMap(wordList []string, beginword string) map[string]int -
func ladderLength(beginword string, endword string, wordList []string) int {
package leetcode
·字典中不存在重复的单词。
O
 wordMap, que, depth := getwordMap(wordList, beginword), []string{beginword},
for i, word := range wordlist {
wordMap := make(map[string]int)
return 0
for len(que) > 0 {
当所有单词都 len(queue) 0 {
}else{
res = max(res, sum)
// sum: length of the sequence n is in
if numMap[num-1] >0 {
left = numMap[num-1]
left, right, sum := O,O,0 
right = 0 
 right = numMap[num+1]
left =
---
## Page 261
func longestconsecutive2(nums []int) int {
//解法三暴力解法，时间复杂度O(n^2）
template.UnionFind{}
func longestConsecutivel(nums []int) int {
//解法二并查集
numMap,length, tmp,lcs := map[int]bool{},O,O,0 
if len(nums) == 0 {
return lcs
for i := O; i lcs {
parent := uf.Find(key)
if
numMap[nums[i]]  = i 
 countMap[parent]++
uf.union(i, numMap[nums[i]-1]) 
uf.Union(i, numMap[nums[i]+1]] 
continue
lcs = countMap[parent]
-, ok := numMap[nums[i]+1]; ok {
---
## Page 262
Example 2: 
Example:
Note: A leaf is a node with no children.
Find the total sum of all root-to-leaf numbers.
An example is the root-to-leaf path 1->2->3 which represents the number 123 .
number.
Pasada pino yd geal-o-o yea uo -o so s uuo an eu e ua
题目
129. Sum Root to Leaf Numbers
Therefore, sum = 12 + 13 = 25.
The root-to-leaf path 1->2 represents the number 12.
Explanation:
Output: 25
Input: [1,2,3]
return max(lcs, length)
for key := range numMap {
if len(numMap) == 0 {
1
if !numMap[key-1] && numMap[key+1]{ 
 return 1 
lcs = max(lcs, length)
length, tmp = 1, key+l 
delete(numMap, key)
for numMap[tmp]{
tmp++
length++ 
---
## Page 263
代码
解题思路
叶子节点是指没有子节点的节点。
例如，从根到叶子节点路径 1->2->3 代表数字 123。计算从根到叶子节点生成的所有数字之和。说明：
给定一个二叉树，
题目大意
·这一题是第 257题的变形题，第257题要求输出每条从根节点到叶子节点的路径，这一题变成了
func sumNumbers(root *TreeNode) int {
package leetcode
Therefore, sum = 495 + 491 + 40 = 1026.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->9->5 represents the number 495.
Explanation: 
Output: 1026
Input: [4,9,0,5,1]
import（
The root-to-leaf path 4->0 represents the number 40.
5
res, nums := O, binaryTreeNums(root)
*
"strconv"
for -, n := range nums { 
 Definition for a binary tree node.
路基本没变
把每一个从根节点到叶子节点的数字都串联起来，再累加每条路径，求出最后的总和。实际做题思
 type TreeNode struct {
1
Y
res += num
Right *TreeNode
Left *TreeNode
Val int 
 := strconv.Atoi(n)
它的每个结点都存放一个0-9 的数字，每条从根到叶子节点的路径都代表一个数字。
---
## Page 264
Example:
A region is captured by flipping all 'o' s into 'x's in that surrounded region.
Given a 2D board containing 'x' and 'o' (the letter O), capture all regions surrounded by 
题目
130. Surrounded Regions
'x'.
x0xx
xxx x
×
xxxx
xOXX
×
×
xxx x
func binaryTreeNums(root *TreeNode) []string {
X X 
×o
oo
if root == nil { 
return res
for i := O; i len(board)-1 ll jlen(board[i])-1 {
for i := range board { 
3
for i := range board { 
for i := O; i < n; i++ {
for j := range board[i]
for j := range board[i] {
for j := O; j< m; j++ {
} else if board[i][j] =='o′ {
if uf.Find(i*m+j) != uf.Find(n*m)
board[i][j] ='x'
board[i][j] = 'o'
if board[i][j] == 'o' { 
board[i][j] ='x'
Y
if board[i][j+l] == 'o' {
if board[i][j-1] == 'o' {
 dfs130(i，j，board) 
uf.Union(i*m+j, i*m+j+1)
uf.Union(i*m+j，i*m+j-1)
uf.Union(i*m+j，(i+1)*m+j)
uf.union(i*m+j，(i-1)*m+j)
==
:0j
== len(board[i])-1 {
---
## Page 267
代码
解题思路
给定一个字符串 s，将s 分割成一些子串，使每个子串都是回文串。返回 s 所有可能的分割方案。
题目大意
Return all possible palindrome partitioning of s. 
 Given a string s, partition s such that every substring of the partition is a palindrome.
题目
131. Palindrome Partitioning
Example:
package leetcode
·要求输出一个字符串可以被拆成回文串的所有解，DFS 递归求解即可。
func partition131(s string) [][]string {
//解法一
Output:
Input: "aab"
findpalindrome(s, O, "", true, pal, &res)
res, pal := [][]string{},
["a","a","b"] 
["aa","b"] ,
if board[i][j]:
 return [][]string{} 
for k := 0; k < 4; k++ {
return
 dfs130(i+dir[k][0], j+dir[k][1], board)
[]string{}
---
## Page 268
func partition131_1(s string) [][]string {
//解法二
func isPalindrome131(s string) bool {
res)
res *[][]string){ 
func findpalindrome(str string, index int, S string, isPal bool, pal []string,
if size == 0 {
size := len(s)