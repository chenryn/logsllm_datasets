title:GCM-SIV: Full Nonce Misuse-Resistant Authenticated Encryption at
Under One Cycle per Byte
author:Shay Gueron and
Yehuda Lindell
Internet Research Task Force (IRTF)                            S. Gueron
Request for Comments: 8452                University of Haifa and Amazon
Category: Informational                                       A. Langley
ISSN: 2070-1721                                               Google LLC
                                                              Y. Lindell
                                    Bar-Ilan University and Unbound Tech
                                                              April 2019
      AES-GCM-SIV: Nonce Misuse-Resistant Authenticated Encryption
Abstract
   This memo specifies two authenticated encryption algorithms that are
   nonce misuse resistant -- that is, they do not fail catastrophically
   if a nonce is repeated.
   This document is the product of the Crypto Forum Research Group.
Status of This Memo
   This document is not an Internet Standards Track specification; it is
   published for informational purposes.
   This document is a product of the Internet Research Task Force
   (IRTF).  The IRTF publishes the results of Internet-related research
   and development activities.  These results might not be suitable for
   deployment.  This RFC represents the consensus of the Crypto Forum
   Research Group of the Internet Research Task Force (IRTF).  Documents
   approved for publication by the IRSG are not candidates for any level
   of Internet Standard; see Section 2 of RFC 7841.
   Information about the current status of this document, any errata,
   and how to provide feedback on it may be obtained at
   https://www.rfc-editor.org/info/rfc8452.
Copyright Notice
   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.
   This document is subject to BCP 78 and the IETF Trust’s Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.
Gueron, et al.                Informational                     [Page 1]
RFC 8452                       AES-GCM-SIV                    April 2019
Table of Contents
   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   3
   3.  POLYVAL . . . . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Encryption  . . . . . . . . . . . . . . . . . . . . . . . . .   4
   5.  Decryption  . . . . . . . . . . . . . . . . . . . . . . . . .   7
   6.  AEADs . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10
   7.  Field Operation Examples  . . . . . . . . . . . . . . . . . .  10
   8.  Worked Example  . . . . . . . . . . . . . . . . . . . . . . .  10
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  14
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  14
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  14
     11.2.  Informative References . . . . . . . . . . . . . . . . .  15
   Appendix A.  The Relationship between POLYVAL and GHASH . . . . .  17
   Appendix B.  Additional Comparisons with AES-GCM  . . . . . . . .  19
   Appendix C.  Test Vectors . . . . . . . . . . . . . . . . . . . .  20
     C.1.  AEAD_AES_128_GCM_SIV  . . . . . . . . . . . . . . . . . .  20
     C.2.  AEAD_AES_256_GCM_SIV  . . . . . . . . . . . . . . . . . .  30
     C.3.  Counter Wrap Tests  . . . . . . . . . . . . . . . . . . .  41
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  42
   Authors’ Addresses  . . . . . . . . . . . . . . . . . . . . . . .  42
1.  Introduction
   The concept of Authenticated Encryption with Additional Data (AEAD)
   [RFC5116] couples confidentiality and integrity in a single
   operation, avoiding the risks of the previously common practice of
   using ad hoc constructions of block-cipher and hash primitives.  The
   most popular AEAD, AES-GCM [GCM], is seeing widespread use due to its
   attractive performance.
   However, some AEADs (including AES-GCM) suffer catastrophic failures
   of confidentiality and/or integrity when two distinct messages are
   encrypted with the same key and nonce.  While the requirements for
   AEADs specify that the pair of (key, nonce) shall only ever be used
   once, and thus prohibit this, this is a worry in practice.
   Nonce misuse-resistant AEADs do not suffer from this problem.  For
   this class of AEADs, encrypting two messages with the same nonce only
   discloses whether the messages were equal or not.  This is the
   minimum amount of information that a deterministic algorithm can leak
   in this situation.
   This memo specifies two nonce misuse-resistant AEADs:
   AEAD_AES_128_GCM_SIV and AEAD_AES_256_GCM_SIV.  These AEADs are
   designed to be able to take advantage of existing hardware support
Gueron, et al.                Informational                     [Page 2]
RFC 8452                       AES-GCM-SIV                    April 2019
   for AES-GCM and can decrypt within 5% of the speed of AES-GCM (for
   multikilobyte messages).  Encryption is, perforce, slower than
   AES-GCM, because two passes are required in order to achieve that
   nonce misuse-resistance property.  However, measurements suggest that
   it can still run at two-thirds of the speed of AES-GCM.
   We suggest that these AEADs be considered in any situation where
   nonce uniqueness cannot be guaranteed.  This includes situations
   where there is no stateful counter or where such state cannot be
   guaranteed, as when multiple encryptors use the same key.  As
   discussed in Section 9, it is RECOMMENDED to use this scheme with
   randomly chosen nonces.
   This document represents the consensus of the Crypto Forum Research
   Group (CFRG).
2.  Requirements Language
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.
3.  POLYVAL
   The GCM-SIV construction is similar to GCM: the block cipher is used
   in counter mode to encrypt the plaintext, and a polynomial
   authenticator is used to provide integrity.  The authenticator in
   GCM-SIV is called POLYVAL.
   POLYVAL, like GHASH (the authenticator in AES-GCM; see [GCM],
   Section 6.4), operates in a binary field of size 2^128.  The field is
   defined by the irreducible polynomial x^128 + x^127 + x^126 + x^121 +
   1.  The sum of any two elements in the field is the result of XORing
   them.  The product of any two elements is calculated using standard
   (binary) polynomial multiplication followed by reduction modulo the
   irreducible polynomial.
   We define another binary operation on elements of the field:
   dot(a, b), where dot(a, b) = a * b * x^-128.  The value of the field
   element x^-128 is equal to x^127 + x^124 + x^121 + x^114 + 1.  The
   result of this multiplication, dot(a, b), is another field element.
Gueron, et al.                Informational                     [Page 3]
RFC 8452                       AES-GCM-SIV                    April 2019
   Polynomials in this field are converted to and from 128-bit strings
   by taking the least significant bit of the first byte to be the
   coefficient of x^0, the most significant bit of the first byte to be
   the coefficient of x^7, and so on, until the most significant bit of
   the last byte is the coefficient of x^127.
   POLYVAL takes a field element, H, and a series of field elements
   X_1, ..., X_s.  Its result is S_s, where S is defined by the
   iteration S_0 = 0; S_j = dot(S_{j-1} + X_j, H), for j = 1..s.
   We note that POLYVAL(H, X_1, X_2, ...) is equal to
   ByteReverse(GHASH(ByteReverse(H) * x, ByteReverse(X_1),
   ByteReverse(X_2), ...)), where ByteReverse is a function that
   reverses the order of 16 bytes.  See Appendix A for a more detailed
   explanation.
4.  Encryption
   AES-GCM-SIV encryption takes a 16- or 32-byte key-generating key, a
   96-bit nonce, and plaintext and additional data byte strings of
   variable length.  It outputs an authenticated ciphertext that will be
   16 bytes longer than the plaintext.  Both encryption and decryption
   are only defined on inputs that are a whole number of bytes.
   If the key-generating key is 16 bytes long, then AES-128 is used
   throughout.  Otherwise, AES-256 is used throughout.
   The first step of encryption is to generate per-nonce, message-
   authentication and message-encryption keys.  The message-
   authentication key is 128 bit, and the message-encryption key is
   either 128 (for AES-128) or 256 bit (for AES-256).
   These keys are generated by encrypting a series of plaintext blocks
   that contain a 32-bit, little-endian counter followed by the nonce,
   and then discarding the second half of the resulting ciphertext.  In
   the AES-128 case, 128 + 128 = 256 bits of key material need to be
   generated, and, since encrypting each block yields 64 bits after
   discarding half, four blocks need to be encrypted.  The counter
   values for these blocks are 0, 1, 2, and 3.  For AES-256, six blocks
   are needed in total, with counter values 0 through 5 (inclusive).
Gueron, et al.                Informational                     [Page 4]
RFC 8452                       AES-GCM-SIV                    April 2019
   In pseudocode form, where "++" indicates concatenation and "x[:8]"
   indicates taking only the first eight bytes from x:
   func derive_keys(key_generating_key, nonce) {
     message_authentication_key =
         AES(key = key_generating_key,
             block = little_endian_uint32(0) ++ nonce)[:8] ++
         AES(key = key_generating_key,
             block = little_endian_uint32(1) ++ nonce)[:8]
     message_encryption_key =
         AES(key = key_generating_key,
             block = little_endian_uint32(2) ++ nonce)[:8] ++
         AES(key = key_generating_key,
             block = little_endian_uint32(3) ++ nonce)[:8]
     if bytelen(key_generating_key) == 32 {
       message_encryption_key ++=
           AES(key = key_generating_key,
               block = little_endian_uint32(4) ++ nonce)[:8] ++
           AES(key = key_generating_key,
               block = little_endian_uint32(5) ++ nonce)[:8]
     }
     return message_authentication_key, message_encryption_key
   }
   Define the "length block" as a 16-byte value that is the
   concatenation of the 64-bit, little-endian encodings of
   bytelen(additional_data) * 8 and bytelen(plaintext) * 8.  Pad the
   plaintext and additional data with zeros until they are each a
   multiple of 16 bytes, the AES block size.  Then X_1, X_2, ... (the
   series of field elements that are inputs to POLYVAL) are the
   concatenation of the padded additional data, the padded plaintext,
   and the length block.
   Calculate S_s = POLYVAL(message-authentication-key, X_1, X_2, ...).
   XOR the first twelve bytes of S_s with the nonce and clear the most
   significant bit of the last byte.  Encrypt the result with AES using
   the message-encryption key to produce the tag.
   (It’s worth highlighting a contrast with AES-GCM here: AES-GCM
   authenticates the encoded additional data and ciphertext, while
   AES-GCM-SIV authenticates the encoded additional data and plaintext.)
   The encrypted plaintext is produced by using AES, with the message-
   encryption key, in counter mode (see [SP800-38A], Section 6.5) on the
   unpadded plaintext.  The initial counter block is the tag with the
   most significant bit of the last byte set to one.  The counter
Gueron, et al.                Informational                     [Page 5]
RFC 8452                       AES-GCM-SIV                    April 2019
   advances by incrementing the first 32 bits interpreted as an
   unsigned, little-endian integer, wrapping at 2^32.  The result of the
   encryption is the encrypted plaintext (truncated to the length of the
   plaintext), followed by the tag.
   In pseudocode form, the encryption process can be expressed as:
   func right_pad_to_multiple_of_16_bytes(input) {
     while (bytelen(input) % 16 != 0) {
       input = input ++ "\x00"
     }
     return input
   }
   func AES_CTR(key, initial_counter_block, in) {
     block = initial_counter_block
     output = ""
     while bytelen(in) > 0 {