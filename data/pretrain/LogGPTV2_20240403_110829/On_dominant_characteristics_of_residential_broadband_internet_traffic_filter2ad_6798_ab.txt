We analyzed the DSL session duration of the Radius logs, ex-
cluding sessions lasting under 5 minutes. Surprisingly, we ﬁnd that
sessions are quite short, with a median duration of only 20–30 min-
utes. Figure 1 shows the distribution of DSL session durations for
Figure 4: Bandwidth usage of all DSL lines across time (1 min
bins).
those longer than 5 minutes, computed over all sessions, along with
the distribution of the median session duration computed per DSL
line. The data exhibits two strong modes around 20–30 minutes
and 24 hr (the maximum duration given the Radius setup), parti-
tioning the DSL lines in two large groups: always-connected lines,
and lines that only connect on demand and disconnect shortly af-
ter. We do not ﬁnd much in between (lines connected for several
hours). While previous work found short sessions (70% lasting at
most 1 hour) in the context of wireless university networks [30], we
found it striking to discover such short DSL sessions in residential
networks, in violation of our mental model that sessions would be
signiﬁcantly longer-lived.
To check if there is a signiﬁcant difference in DSL session du-
rations for P2P users vs. non-P2P users (see Section 4), we parti-
tioned the DSL-lines into two groups. Overall, the characteristics
of the distribution are similar, with two prevalent modes. However,
we ﬁnd that P2P users tend to have longer session durations and
that a larger fraction of P2P users always remain connected.
To better understand the high prevalence of short sessions, we
examined the Radius termination status in the logs. Radius differ-
entiates between 18 termination causes. Figure 2 shows the distri-
bution of causes for sessions longer than 5 minutes. We observe
that more than 80% of sessions are terminated by user request (this
rises to 95% for sessions under 5 minutes). Most likely these are
caused by idle timeouts in the DSL modem on the client side.
While most current broadband contracts are ﬂat-rate, in the past
time-based contracts were popular in Europe. Indeed, these latter
are still offered by most European ISPs. Therefore, it is likely that
consumer DSL routers come with a small idle timeout as a fac-
tory default in an effort to aid users in keeping down costs, and we
veriﬁed this for several popular home routers. The second most
common termination cause is PortError, which likely results when
users power off their DSL modem as part of powering down their
entire computing setup.
Since many DSL sessions are short and Radius does not preserve
IP address assignments across sessions, we therefore expect (and
ﬁnd) IP addresses used for multiple DSL lines across each dataset.
During a 24 hr period we ﬁnd 50% of the IP addresses assigned to
at least 2 distinct DSL lines, and 1–5% to more than 10 DSL lines.
These results underscore the peril involved in using an IP address
as a long-term reliable host identiﬁer.
92Previous work found that for consumers diurnal patterns start
with activity in the morning, steadily increasing throughout the
course of the day, with the height of activity starting in the early
evening and lasting till midnight [19, 17]. We see this same overall
pattern in terms of the number of active DSL sessions, as shown
in Figure 3. However, we note that the variation is in fact modest,
with 40% of the lines permanently connected. We also observe a
slight day-of-week effect, with Sundays having larger numbers of
concurrent sessions, and Friday/Saturday having lower daily max-
ima than other weekdays.
We also observe a diurnal pattern in bandwidth usage, per Fig-
ure 4, with the relative differences now being much more pro-
nounced. After all, keeping a session alive does not imply any
bandwidth usage per se.
Our data also offers us an opportunity to analyze the potential
resource requirements of an ISP wide NAT deployment. In partic-
ular, we study how many public IP addresses are needed to support
the trafﬁc on the monitored lines. For this purpose we count the
number of concurrently active TCP/UDP connections and add a 5-
min or 10-min timeout to the duration of each 5-tuple. Doing so
implies that we do not allow the immediate reuse of each 5-tuple.
Under the assumption that a single public IP address can support
65,536 concurrent connections (due to available port space) we ﬁnd
that a single public IP address sufﬁces to support 1,300–2,000 ac-
tive lines with a 10-min timeout, and roughly twice that when using
a 5-min timeout.
Given the maximum number of concurrently connected lines, 5–
10 public addresses would in principle sufﬁce to accommodate the
monitored DSL-lines—a huge reduction of the required public IP
address space.
So far we only considered outgoing connections, yet a NAT must
also accommodate incoming connections. We ﬁnd that very few
lines utilize incoming connections for traditional services such as
HTTP. Most successful incoming connections are to ports com-
monly used for VoIP (SIP and RTP), default P2P ports, IPSec key
management, and traceroute destination ports. It is plausible that
P2P applications can use Universal Plug-and-Play to dynamically
negotiate ports with the NAT devices. SIP and RTP include NAT
traversal solutions and proxy services. In addition, we ﬁnd that al-
most all SIP connections are to/from the ISP’s SIP server, since SIP
is used as a transparent VoIP replacement for end-customers. More-
over, one does not have to support traceroute. As such it appears
that one would not need too many additional public IP addresses
for incoming connections.
While we acknowledge that more in-depth study is needed, it
appears that such NAT deployment would indeed conserve a very
large number of public IP addresses. Whether it proves manage-
able, and/or impedes innovation, remains a separate question.
4. APPLICATION USAGE
To understand the popular applications among our user popu-
lation, we examine our application classiﬁcations (made at data-
collection time) and anonymized application-layer header traces.
We in addition assess how well purely port-based classiﬁcation
would perform for correctly identifying residential trafﬁc patterns,
and characterize trafﬁc asymmetries.
Previous studies of Internet application mix found HTTP to pre-
dominate around the turn of the century. Fraleigh et al. [18] an-
alyzed packet level traces recorded from the Sprint backbone in
2001, ﬁnding that in most traces HTTP contributed > 40% of all
bytes, though several traces had P2P contributing 80%.
Subsequent studies found that P2P became the dominant appli-
cation. Ipoque and Cachelogic both used data from their deployed
unlcassified
10.6%
otherDPD 10%
BitTorrent 8.5%
eDonkey 5%
NNTP 4.8%
well−known 3.6%
HTTP
57.6%
Figure 5: Application Mix for trace SEP.
deep packet inspection and trafﬁc management systems at selected
customers sites to assess the application usage [45, 46, 40]. Cache-
logic claimed that by 2006 P2P accounted for more than 70% of
the trafﬁc, with Ipoque supporting this claim for 2007. For 2008
Ipoque found that P2P in Europe accounted for more than 50% of
trafﬁc (with Web contributing another 25%).
On the other hand, Hyun-chul et al. reported that payload-based
analysis conducted in 2004 from within the PAIX backbone found
almost no P2P trafﬁc, but more than 45% HTTP [23]. On the other
hand, the same study developed how at various university networks
the trafﬁc differs; for example, at KAIST in 2006 they found un-
der 10% HTTP, and 40–50% P2P.
Cho et al. [9, 10] also found in 2008 that TCP port 80 contributed
only 14% of all bytes in Japanese ISP backbones (9% in 2005),
with the bulk of trafﬁc being on unassigned ports. None of the
default P2P ports contributed more 1% of the trafﬁc volume. (The
authors point out that WINNY, the most prelevant P2P application
in Japan, uses unassigned ports.) They found that residential trafﬁc
exhibited a shift to more streaming and video content, which agrees
with recent blog and news reports that claim that P2P trafﬁc has
somewhat declined, with streaming media increasing [50, 3]. With
an assumption that the unassigned ports indeed reﬂected P2P, their
datasets indicated that P2P dominated the total trafﬁc volume.
From a somewhat different perspective, Kotz and Essien [29,
30] reported that 50% of wireless trafﬁc in 2001 on a university
campus, which included residential buildings, used HTTP’s well-
known ports, with 40% of this trafﬁc incoming to local servers.
Henderson et al. [22] compared these results with newer traces
from 2003/2004 of the same network, ﬁnding major shifts in the
application mix (HTTP 63%→27%, File systems 5%→19%, P2P
5%→22%), and that more trafﬁc stayed on-campus than in 2001
(70%, up from 34%). Of the P2P trafﬁc, 73% remained internal.
Therefore, we cannot easily compare these results to residential
broadband use. Finally, Fraleigh et al. [18] also used a port-based
approach on 2001 data, ﬁnding that on some links 60% of the bytes
come from P2P and only 30% from HTTP, although most of their
traces have more than 40% HTTP.
Given this context, we now turn to an analysis of application
usage in our 2008/2009 residential traces.
4.1 Application usage analysis
To robustly identify application protocols, we employ the Bro
system’s Dynamic Protocol Detection (DPD) [13]. DPD essen-
tially tries to parse each byte stream with parsers for numerous
protocols, deferring determination of the corresponding applica-
tion until only that application’s parser recognizes the trafﬁc. DPD
93also uses regular expression signatures to winnow down the initial
set of candidate parsers. The Bro distribution includes full DPD
parsers/recognizers for BitTorrent, FTP, HTTP, IRC, POP3, SMTP,
SSH, and SSL. We extended the set of detectors with partial rec-
ognizers for eDonkey and Gnutella (both based on L7-ﬁlter signa-
tures [32]), NNTP, RTP, RTSP, SHOUTcast, SOCKS, and Skype.
In the SEP trace we can classify more than 85% of all bytes,
with another 3.6% using well-known ports, as reﬂected in Figure 5.
We ﬁnd that HTTP, not P2P, is the most signiﬁcant protocol, ac-
counting for 57% of residential bytes. We also ﬁnd that NNTP
contributes a signiﬁcant amount of volume, nearly 5%. Almost all
of the NNTP bytes arise due to transfers of binary ﬁles, with RAR-
archives (application/rar) being among the most common ﬁle types,
suggesting that the trafﬁc reﬂects the equivalent of ﬁle-sharing.
We ﬁnd that P2P applications—BitTorrent, Gnutella, and
eDonkey—contribute < 14% of all bytes, with BitTorrent the most
prevalent, and Gnutella almost non-existent. However, the L7-ﬁlter
signatures for eDonkey may be incomplete. We observe a signif-
icant amount of trafﬁc (1.2%) on well-known eDonkey ports that
the classiﬁer fails to detect as eDonkey. The distribution of connec-
tion sizes for this trafﬁc closely matches that for trafﬁc positively
identiﬁed as eDonkey (and differs from other applications). If we
presume that this indeed reﬂects eDonkey trafﬁc, then the overall
share of P2P trafﬁc increases to 17–19%, with eDonkey’s popular-
ity roughly the same as BitTorrent’s. But even if we assume that all
unclassiﬁed trafﬁc is P2P, the total P2P share still runs below 25%.
P2P applications could also in principle use HTTP for data
download, thus “hiding” among the bulk of HTTP trafﬁc and in-
creasing the signiﬁcance of P2P trafﬁc volume. However, our in-
depth analysis of HTTP trafﬁc (Section 5) ﬁnds that this is not the
case.
Streaming protocols1 (RTSP, RTMP, SHOUTcast) account for
5% of the trafﬁc in terms of bytes. We identify RTSP and SHOUT-
cast using partial DPD parsers, while we identify RTMP’s based
only on its well-known port. We also ﬁnd noticeable Voice-over-IP
trafﬁc (Skype [7], RTP), about 1.3% of the total bytes.
In order to increase our conﬁdence in the representativeness of
our application mix results, we analyzed sampled NetFlow data ex-
ported by 10 of the ISP’s routers. This data shows that 50% of
the trafﬁc comes from TCP port 80. We further compared our re-
sults with those from a commercial deep-packet-inspection system
deployed at a different network location, ﬁnding a close match.
Our analysis of the other traces conﬁrms the ﬁndings outlined
above. In particular the other traces conﬁrm that our results are not
biased by the day-of-week we choose. However, while the HTTP
trafﬁc share in the APR trace is about the same, we ﬁnd slightly
more unclassiﬁed trafﬁc. We note that the overall P2P trafﬁc de-
creases somewhat, and shifts from eDonkey to BitTorrent (now
9.3%). Also the fraction of NNTP trafﬁc decreases. On this day
it only accounted for 2.2% of the trafﬁc. Our hypothesis is that es-
pecially the latter observations reﬂect day-to-day variations rather
than indications of trends, but we will require longer-time measure-
ments to determine this deﬁnitively.
We might expect that application usage differs widely between
users with different access speeds. Figure 6 shows the application
mix seen for different downstream bandwidth rates. Although the
mix does vary, the changes are modest, other than for more P2P
trafﬁc with higher bandwidths, and much higher NNTP prevalence
for the 17000 Kbps class. However, only a small percentage of lines
use NNTP, so its contribution to trafﬁc mix can see more variation
across different types of lines.
1We do not consider video delivery via HTTP as streaming. We
refer to those as progressive HTTP downloads.
0
0
1
0
8
0
6
0
4
0
2
0
t
n
e
c
r
e
p
1200
2300
3500
access bandwidth [Kbps]
6500
17000
HTTP
BitTorrent
eDonkey
NNTP
otherDPD
well−known
unclassified
Figure 6: Relative application mix per access bandwidth. Bot-
tom bar is HTTP, top bar unclassiﬁed.
However, we do ﬁnd that lines with higher access bandwidth
have a higher utilization in terms of average volume per line.
Lines in the 3500 and 6500 Kbps categories contribute about twice
as many bytes per line than lines in the 1200 Kbps class, and
17,000 Kbps lines three times more. We also ﬁnd that general traf-
ﬁc per line is consistent with a heavy-tailed distribution, and the
top 2.5% of lines account for 50% of the trafﬁc.
To see if time-of-day effects inﬂuence the application mix, we
examine the application mix per hour, see Figure 7. We would ex-
pect to to observe more bulk downloads and less interactive trafﬁc
during off-hour period, which our data conﬁrms. Night-time traf-
ﬁc includes a larger fraction of P2P trafﬁc, though HTTP remains
dominant during every time slot. Also, we again note high variabil-
ity in NNTP due to the small number of lines using it.
In contemporaneous work Erman et al. [15] studied the applica-
tion mix and HTTP content type of a major US broadband provider
in the context of understanding the potential for forward caching.
They ﬁnd that HTTP contributes 61% on average and 68% dur-
ing the busy-hour to the trafﬁc volume in the downstream direc-
tion while P2P only contributes 12%. As such, their results are
strikingly similar to our results, strengthening the observation that
HTTP is again on the rise and P2P on the decline.
4.2 Application mix of P2P VS. Non-P2P lines
Next we study if the application usage of those lines that fre-
quently use P2P differs from those that do not. We ﬁnd that roughly
3% of DSL-lines use P2P protocols and that their trafﬁc contribu-
tion accounts for 30% of overall volume. If a line uses P2P proto-
cols, they usually also account for most of the line’s trafﬁc: 29%
BitTorrent and 17% eDonkey. However, HTTP is still popular and
is responsible for 23% of transferred bytes. We also note that the
fraction of unclassiﬁed trafﬁc is higher at 23%, corresponding to
roughly 64% of all unclassiﬁed trafﬁc. There is hardly any NNTP
usage, only 0.6% of bytes.
940
0
1
0
8
0
6
0
4
0
2
0
t
n
e
c
r
e
p
h
4
h
5
h
6
h
7
h
8
h
9
h
0
1
h
1
1
h
2
1
h
3
1
h
4
1
h
5
1
h
6
1
h
7
1
h
8
1
h
9
1
h
0
2
h
1
2
h
2
2