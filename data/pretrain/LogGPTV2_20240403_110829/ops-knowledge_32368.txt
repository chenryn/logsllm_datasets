User: How to use Python scripts to automate log analysis? Please provide a script that can realize real-time monitoring of specified log files, and perform content extraction and alarm according to specific rules.
Assistant: The following is a simple Python script that can be used to monitor specified log files in real time, and extract content and alert according to specific rules. The script uses the "tail -f" method in Python's standard library to monitor the changes in the log file. Once the modification of the log file is detected, it will read the latest log and process it. The script also uses regular expressions to match common error messages, and when an error message is matched, an alert email is sent to the specified email address. Note that this script assumes that the format of the log file is known, and that the format of the error message is also known. If you are going to use this script, please make sure that the relevant configuration is set up correctly. ``` import re import time import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.mime.base import MIMEBase from email import encoders from pathlib import Path # Set the log files and alerts that need to be monitored Email address LOG_FILE = "/var/log/nginx/access.log" ALERT_EMAIL = "alert@example.com" # Define a regular expression for matching error messages ERROR_REGEX = re.compile(r"(?P<ip> \d+\.\d+\.\d+\.\d+) - - \[(?P<timestamp>.+?)\] \"(?P<method>[AZ]+) (?P<url> .+?) HTTP/\d\.\d\" (?P<status>\d+) (?P<size>\d+) \"(?P<referer>.+?)\" \"(? P<useragent>.+?)\"") # Define function for sending alert email def send_alert_email(subject, body): msg = MIMEMultipart() msg['From'] = ALERT_EMAIL msg['To'] = ALERT_EMAIL msg['Subject'] = subject msg.attach(MIMEText(body, 'plain')) # Add attachment (optional) # attach_file_name = 'log.txt' # attach_file_path = '/path/to/log.txt' # attach_file = open(attach_file_path, 'rb') # payload = MIMEBase('application', 'octate-stream') # payload. set_payload((attach_file). read()) # encoders. encode_base64(payload) # payload. add_header( 'Content-Disposition', 'attachment', filename=attach_file_name) # msg.attach(payload) # send mail server = smtplib.SMTP('smtp.gmail.com', 587) server.starttls() server.login(ALERT_EMAIL , "yourpassword") text = msg.as_string() server.sendmail(ALERT_EMAIL, ALERT_EMAIL, text) server.quit() # Open log file logfile = Path(LOG_FILE) if not logfile.is_file(): print(f"Log file not found: {LOG_FILE}") exit(1) # Use tail -f to monitor the log file print(f"Monitoring {LOG_FILE}...") with open(LOG_FILE, "r") as f: while True: # Read the latest log new_log = f.readline() # Wait for new content in the log file if not new_log: time.sleep(1) continue # Match error message match = ERROR_REGEX.search(new_log) if match: # Send an alert Email send_alert_email("Log error alert", match.group()) # Print log content print(new_log.strip())