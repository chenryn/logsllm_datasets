37
Intra-comm.
edges (density)
423 (10%)
603 (6%)
548 (9.7%)
391 (11%)
379 (14%)
127 (10%)
121 (18%)
Table 5: Detected communities in Ropsten testnet
Inter-comm.
edges
1547
1612
1827
1505
1704
773
840
Community in-
dex
1
2
3
4
5
6
7
We first conducted a measurement study on Ropsten testnet.
We use parallel measurement method with parameter K = 60.
In particular, the testnet is under loaded and there are not suffi-
cient “background” transactions in mempools. We tried to apply
TopoShot, as is, to measure Ropsten and found that however low
Gas price we set for txC (recall Step 1 in TopoShot), the trans-
action will always be included in the next block, leaving no time
for accurate measurement. To overcome this problem, we launch
another node that sends a number of “background” transactions
(from a different account than txC). This effectively populate an op-
erating mempool and helped txC stay in a mempool for long enough
during the measurement period. We encounter the same situation
when measuring Goerli and use the same trick here. Note that more
than 95% of peer nodes our supernodes initially connect to stay
connected throughout the measurement period.
In the testnet, a target node may run a non-default setting in
which they forward future transactions, invalidating the assump-
tion made in TopoShot. Such a custom node is avoided in our mea-
surement study as follows: In the pre-processing, one can launch
an additional monitor node (to the measurement node) to connect
312
0102030405060708090Node degree0510152025Number of nodesIMC ’21, November 2–4, 2021, Virtual Event, USA
Kai Li et al., Kai Li, Yuzhe Tang, Jiaqi Chen, Yibo Wang, and Xianghong Liu
We also detect the communities in the Ropsten testnet, using the
NetworkX tool [3] implementing the Louvain method described
in [21]. The results are in Table 5. There are seven communities
detected. The biggest community is community number two with
22% of the nodes of the network. The average degree in the commu-
nity is 19, and 9% of the nodes (i.e., 13 out of 142 nodes) only have
a degree of 1. By comparison, community number five contains
12.7% of the nodes with the largest average degree 32.8.
Summary of Rinkeby & Goerli Results. We conduct similar
6.2.2
measurements on two other major Ethereum testnets, Rinkeby and
Goerli. Here, we summarize what’s noteworthy in the results while
deferring the full presentation to Appendix D. From our measure-
ment results, Rinkeby has smaller node degrees than Ropsten. Many
Geth nodes in Rinkeby are with degrees smaller than 15, and be-
tween degrees 15 and 180 the nodes are evenly distributed. In terms
of graph statistics, Rinkeby’s modularity (0.0106) is much lower
than Goerli’s (0.048) which is comparable with Ropsten’s modu-
larity (0.0605); this result implies that Rinkeby’s the most resilient
against network partitioning.
Explaining the results: In the measurement results, we consis-
tently observe smaller modularity in testnets than that in random
graphs. Full explainability of the measurement result is challenging
and out of the scope of this paper. We take preliminary efforts to
explain the measured results as follows.
We suspect the measurement results, particularly the discrepancy
to the properties of random graphs and the much lower modularity,
are due to the way Ethereum nodes choose/promote active links
and the scale of the networks measured. Briefly, in the Ethereum
protocol, a node maintains a “buffer” of inactive neighbors from
which 50 active neighbors are selected in the case of existing active
neighbors go offline. At the first glimpse, the presence of this buffer
localizes the selection of active neighbors in a smaller candidate set
than all the nodes as in the random graph, and it should facilitate
forming the network of higher modularity. However, by looking
more closely at the Ethereum protocol, a node N ’s candidate buffer
consists of node N ’s inactive neighbors and node N ’s inactive
neighbors’ inactive neighbors. For instance, with each node of 272
inactive neighbors by default, the buffer size is 272 ∗ 272 = 73984
which is larger than the size of the testnets we measured. Thus, the
effect of localization is not reflected in the testnet results. In fact,
the deduplication of active neighbors (i.e., Ethereum clients, such
as Geth, check if a recently promoted neighbor is already an active
neighbor) may contribute to the much lower modularity in the mea-
sured testnets. While here we explain the measurement results by
qualitative analysis, we leave it to the future work the quantitative
modeling and analysis of Ethereum network-connection protocols.
(about 8, 000 nodes and(cid:0)8,000
2 (cid:1) = 1
6.3 Mainnet Measurement Results
Measuring the mainnet’s topology raises new challenges: 1) Due to
ethical concerns, the measurement should not interfere the normal
operation of live mainnet nodes. 2) Due to mainnet’s large scale
2 · 8, 000 · (8, 000 − 1) possible
links) and the high price of Ether, measuring the entire network
of mainnet incurs high cost, estimated to be more than 60 million
USD as will be analyzed.
313
To tackle the ethical challenge, we propose a TopoShot ex-
tension to additionally verify certain conditions and ensure the
non-interference to the service of target mainnet nodes. To bypass
the high-cost challenge, in this work, we focus on measuring the
topology of a small but critical subnetwork, instead of the entire
mainnet. We conduct the measurement study on the mainnet on
May 11th, 2021 and have spent 0.05858 Ether (amount to 197.94
USD at the price as of Aug 2021).
Non-interference extension of TopoShot: Consider a mea-
surement node M runs TopoShot against a target node S in the
Ethereum network C (S can be either A or B in our measurement
primitive as in Figure 2b). Suppose the measurement starts at time
t1 and ends at t2. Node M sets txC’s Gas price at Y = Y0 and moni-
tors the following two conditions. Only when both conditions are
met, the measurement proceeds.
V1) All blocks produced in [t1, t2 + e] are full in the sense that
the Gas limit of each block is filled. e denotes the expiration
time of an unconfirmed transaction buffered in an Ethereum
node. For instance, a Geth node would drop an unconfirmed
transaction e = 3 hours after it is submitted to the node, if it
is not mined.
V2) In the blocks produced during [t1, t2 + e], the included trans-
actions have Gas prices higher than Y0.
Step 1: Discovering critical nodes: We discover the mainnet
nodes on the backend of critical services. We use the approach
described in the existing work [35]. Briefly, the approach is to
obtain the client version of the backend nodes by submitting the
standard Ethereum RPC query (i.e., web3_clientVersion) through
4We anonymize the names of critical services tested to protect their service.
This extended TopoShot achieves
the following non-
interference property: The Ethereum blocks produced with the
measurement turned on include the same set of transactions with the
blocks produced with the measurement turned off. We formally state
the property and prove it in Appendix C.
Goal: mainnet’s critical subnetwork: With the above pricing
strategy, measuring a pair of nodes on the mainnet costs 7.1 · 10−4
Ether or 1.91 USD (at the Ether price as of May, 2021). Thus, for
the mainnet that consists of more than 8, 000 nodes, measuring all
2 · 8, 000·(8, 000 − 1) possible links would cost 22.845· 103 Ether or
1
more than 60 million USD. We thus refrain from directly measuring
the entire mainnet in this work.
Instead, we choose a smaller but critical subnetwork of the main-
net to measure. Our observation is that in today’s blockchain net-
works, essential transaction activities are centralized to few popular
“services” that account for a small portion of the nodes in the net-
work, such as popular transaction relay service (e.g., SrvR14 that
relays 63% of Ethereum transactions on the mainnet) and mining
pools.
We aim to answer the following research question: RQ: Do
Ethereum mainnet nodes prioritize the critical service nodes as their
active neighbors?
To address the research, we design a measurement study on
the mainnet that 1) discovers Ethereum nodes running behind the
known popular services (including transaction relay and mining
pools) and then 2) uses TopoShot to measure the pair-wise con-
nections among the discovered service-backend nodes.
TopoShot: Uncovering Ethereum’s Network Topology Leveraging Replacement Transactions
IMC ’21, November 2–4, 2021, Virtual Event, USA
the service frontend and to match the version against the ones in
the Ethereum handshake messages received on a local “supernode”
joining the mainnet, which is similar to the existing measurement
work [32].
Using the above method, we discover the following mining-pool
nodes on the mainnet: 59 SrvM1 nodes, 8 SrvM2 nodes, 6 SrvM3
nodes, 2 SrvM4 nodes, 2 SrvM5 nodes, and 1 SrvM6 node. We also
discover the following transaction-relay nodes on the mainnet: 48
SrvR1 nodes and 1 SrvR2 node. When discovering the nodes, we use
the codename revealed through the web3_clientVersion query.
The measurement result is consistent with [35].
Conn.
Table 6: Connections among critical nodes
Type
SrvR1- SrvM1 ✓
SrvR1- SrvM2 ✓
SrvR1- SrvM3 ✓
SrvR1- SrvM4 ✓
SrvR2- SrvM1
✗
SrvR2- SrvM2
✗
SrvR2- SrvM3
✗
SrvR2- SrvM4
✗
SrvR2- SrvR1
✗
Type
Conn.
SrvM1- SrvM1
✗
SrvM1- SrvM2 ✓
SrvM1- SrvM4 ✓
SrvM1- SrvM3 ✓
SrvM2- SrvM2 ✓
SrvM2- SrvM3 ✓
SrvM2- SrvM4 ✓
SrvM3- SrvM4 ✓
SrvR1- SrvR1
✓
Step 2: Measuring topology among critical nodes: We run
the extended TopoShot to detect whether critical nodes discovered
as above are connected with each other. We consider three possible
connection types: the inter-connection between a mining-pool node
and a relay-service node, the connection between two mining-pool
nodes and the connection between two relay-service node. For
each case, we select random nodes from each service and measure
all possible links. For measuring the connection between “SrvR1-
SrvM1”, for instance, we select two random SrvR1 nodes and two
random SrvM1 nodes, and measure the four combinations of links.
In addition, we select two nodes for SrvM2 and select one node for
each of the services: SrvR2, SrvM3, SrvM4. In total, we choose 9
mainnet nodes.
We report the result in Table 6. We make the following obser-
vation: 1) A node behind relay service SrvR1 connects to all tested
mining pools and other SrvR1 nodes. It does not connect to other
relay services such as SrvR2. 2) The single node behind relay ser-
vice SrvR2 does not connect to any mining pools or other relay
service. Here, SrvR2’s node may randomly choose neighbors as
vanilla Ethereum clients do. 3) Nodes behind all mining pools con-
nect to nodes of the same pool and other pools. They also connect
to SrvR1. The only exception is that SrvM1 nodes do not connect
to other SrvM1 node.
Explaining the results: There are two possible explanations of
the results: a) SrvR1 and all mining pools run supernodes internally,
which connect to all other nodes. SrvR2 runs a regular node that
declines incoming connection requests once its active neighbors
are full. b) An SrvR1 node prioritizes the connections to other SrvR1
nodes and mining-pool nodes. It does not prioritize connecting to
other RPC-service nodes like SrvR2. So are the mining pool nodes.
6.4 Summary of Measurement Costs/Time
We summarize the measurement costs/time in Table 7, which re-
ports the actual Ether cost spent for measuring the testnets and the
estimated cost of measuring the full topology of mainnet. The main-
net cost is estimated by multiplying the pairwise-measurement
cost by the number of possible edges in the network (as mentioned
before). Note that in the mainnet, the measurement transactions’
Gas prices are set to be higher than at least 10% of the pending
transactions in the mempool (for estimation purposes, we assume
the target node’s mempool has the same content as the measurement
node’s mempool).
Table 7: Summary of measurement studies on the testnets/-
mainnet. # refers to “number”.
Network
Cost (Ether)
Date
Size (# of
nodes)
588
446
1025
9
Ropsten
Rinkeby
Goerli
mainnet
0.067
2.10
0.62
0.05858
Oct. 30, 2020
Nov. 15, 2020
Oct. 20, 2020
May. 15, 2021
Duration
(hours)
12
10
20
0.5
7 ETHICAL DISCUSSION
In this work, we use TopoShot to measure testnets. While the
approach is active measurement (to refill underwhelmed mempool
in the testnet), the testnets do not run business, and the possible
service interruption to the testnets will have limited impacts. We
also measure a limited sub-network on the Ethereum mainnet. As
analyzed before in § 6.3, the presence of measurement using the
TopoShot extension does not affect what set of transactions are
included in the blockchain. A more formal statement is in Theo-
rem C.2 which is proven in Appendix C.2. We believe TopoShot’s
impact to normal transactions when measuring the mainnet is
small.
8 CONCLUSION
This work presents TopoShot, a measurement study that uncovers
Ethereum’s network topology by exploiting transaction replace-
ment and eviction policies. TopoShot achieves the perfect precision
and high recall. A parallel schedule is proposed to apply the pair-
wise measurement to large-scale networks. TopoShot uncovers the
topology of three major Ethereum testnets, which show their differ-
ence to random graphs and high resilience to network partitioning.
We also use TopoShot to measure critical service interconnection
in the mainnet which reveals biased neighbor selection strategies
by top mining pools and relay service nodes.
ACKNOWLEDGMENTS
The authors thank the anonymous reviewers in ACM IMC’21,
SIGCOMM’21, and SIGMETRICS’21. The authors are partially
supported by the National Science Foundation under Grants
CNS1815814 and DGE2104532.
314
[2] Retrieved May, 2021. Bug disclosure and authors’ conversations. Privately shared
//github.com/ethereum/aleth.
link: https://shorturl.at/kuET6.