题目
69. Sqrt(x)
Output:2
Input: 4 
return strings.Join(res, "")
ifc>o{
for i >= O { 
for i >= 0 && j >= 0 { 
i，j，k,C := len(a)-1，len(b)-1,len(a)，0 
res := make([]string, len(a)+1) 
 res[k] = strconv.Itoa(c)
k--
c =(ai+ c) / 2
res[k] = strconv.Itoa((ai + c) % 2)
ai,
T
c = (ai + bj + c) / 2 
res[k] = strconv.Itoa((ai + bj + c) % 2)
ai,- := strconv.Atoi(string(a[i]))
- := strconv.Atoi(string(a[i]))
- := strconv.Atoi(string(b[j]))
---
## Page 172
解题思路
保留整数的部分，小数部分将被舍去。
实现 int sqrt(int x)函数。计算并返回×的平方根，其中×是非负整数。由于返回类型是整数，结果只
题目大意
·解题思路二，牛顿迭代法。求根号×，即求满足 ×^2－ n = 〇 方程的所有解。
·根据题意，根号×的取值范围一定在［0,x］之间，这个区间内的值是递增有序的，有边界的，可
·题目要求求出根号
Explanation: The square root of 8 is 2.82842..
Output:2 
Input: 8 
索。
以用下标访问的，满足这三点正好也就满足了二分搜索的3大条件。所以解题思路一，二分搜
 the decimal part is truncated, 2 is returned.
x
andsince
---
## Page 173
代码
func mysqrt(x int) int {
//解法一二分
package leetcode
left, right, res := 1, x, 0
if x == 0 {
for left > 1)
 return 0
那么切线方程与×轴的交点xn+1=(x,+N/xn)/ 2
所以切线方程为：f(x)-(x,²-N)=2xn(x-xn)，即：f(x)=2xnx-xn²-Ne
那么 f(x)函数的曲线在（xn,x²-N）点处切线的斜率为：2xn
函数 f(x)的导函数是：f(x)= 2x
那么其实就是求方程f(x)=x²-N，当 f(x)=0 时方程的解。
而这里讨论的是求平方根，所以曲线方程更简单。比如，我们要求N的平方根。
理想值无限靠近的解。
过程中，可以发现交点xn+m会无限逼近方程 f(x)=0 的解，最终可以得到一个与
如图，一个曲线方程 f(x)，在它的 f(xn)处画一条切线与×轴相交，交点为xn+1'
我们可以将得到的交点值的平方与N比较，循环以上过程直到得到满意的值。
Cn+1
Q
---
## Page 174
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
You are climbing a stair case. It takes n steps to reach to the top.
题目
70. Climbing Stairs
二
ue su‘uoea puz //（（x）－seyau ）= // //
//
二
level hacking 
二
三
//
// float Q-rsqrt( float number )
https://en.wikipedia.org/wiki/Fast_inverse_square_root
//解法三Quake III 游戏引擎中有一种比 STL 的 sqrt快 4 倍的实现
func mysqrtl(x int) int {
// 解法二 牛顿迭代法 https://en.wikipedia.org/wiki/Integer_square_root
oe removed
二
return r 
r:=x 
return res
 return y;
y= number; 
long i;
 r = (r + x/r) / 2
i
x2 = number * 0.5F;
const float threehalfs = 1.5F;
float x2,y;
} else if mid == x/mid {
=＊（long *） &y;
right = mid - 1
else { 
return mid 
res = mid 
left = mid + 1 
=
＊（float*）＆i;
 // lst iteration
// what the fuck?
// evil floating point bit
---
## Page 175
题目
71. Simplify Path
代码
解题思路
以爬到楼顶呢？注意：给定n是一个正整数
假设你正在爬楼梯。需要n阶你才能到达楼顶。每次你可以爬1或2 个台阶。你有多少种不同的方法可
题目大意
 Example 2:
Example 1: 
Note: Given n will be a positive integer.
·这一题求解的值就是斐波那契数列。
·简单的 DP，经典的爬楼梯问题。一个楼梯可以由 n-1 和 n-2 的楼梯爬上来。
func climbstairs(n int) int {
package leetcode
3. 2 steps + 1 step
1. 1 step + 1 step + 1 step
Explanation: There are three ways to climb to the top.
Output: 3 
Input:3
2.2 steps
1.1 step + 1 step 
Explanation: There are two ways to climb to the top.
Output:2
Input: 2
return dp[n]
for i := 2; i /.·/q/../../e/. :anduI
import （
if len(stack) == 0 {
for i := O; i  0 { 
stack = stack[:len(stack)-1]
"/a/b/c"
---
## Page 178
编写一个高效的算法来判断 m ×n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：
题目大意
Example 2:
 Example 1: 
following properties:
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the
题目
74. Search a 2D Matrix
Output: false
● The first integer of each row is greater than the last integer of the previous row.
target = 13 
matrix = [
Input:
output: true
target = 3
matrix 
Input:
func simplifyPath1(path string) string 
// 解法二golang的官方库API
return filepath.Clean(path)
[1,
return "/" + res 
res = strings.Join(stack, "/")
[23,
[10,
[1,
[10,
return "/"
 30，34,
11,
3，
3，
]=
16，
16,
5，
50]
20],
20],
7]，
7]，
---
## Page 179
Example 1: 
Note: You are not suppose to use the library's sort function for this problem.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
 same color are adjacent, with the colors in the order red, white and blue. 
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the
题目
75. Sort Colors
代码
解题思路
●给出一个二维矩阵，
·每行的第一个整数大于前一行的最后一个整数。
func searchMatrix(matrix [][]int, target int) boo]
·每行中的整数从左到右按升序排列。
package leetcode
return false
if len(matrix) == 0 {
只不过需要行列坐标转换。最后利用二分搜索直接搜索即可。
虽然是一个二维矩阵，但是由于它特殊的有序性，所以完全可以按照下标把它看成一个一维矩阵，
for low  target {
 return true 
 矩阵的特点是随着矩阵的下标增大而增大。要求设计一个算法能在这个矩阵中
---
## Page 180
代码
这道题也可以用一次三路快排。数组分为3部分，第一个部分都是0，中间部分都是1，最后部分都是
出现的个数。然后再根据个数排列 0，1，2 即可。时间复杂度 O(n)，空间复杂度 O(K)。这一题K=3。
这道题可以用计数排序，适合待排序数字很少的题目。用一个3个容量的数组分别计数，记录0，1，2
移动游标即可。
加一个 0，就需要放置1 和 2。1 排在 2 前面，所以添加1 的时候也需要放置2。至于最后的 2，只用
题目末尾的Follow up 提出了一个更高的要求，能否用一次循环解决问题？这题由于数字只会出现O,
解题思路
抽象题意其实就是排序。这题可以用快排一次通过。
题目大意
Follow up:
1，2这三个数字，所以用游标移动来控制顺序也是可以的。具体做法：0是排在最前面的，所以只要添
● Could you come up with a one-pass algorithm using only constant space?
● A rather straight forward solution is a two-pass algorithm using counting sort.
func sortcolors(nums []int) {
package leetcode
Output: [0,0,1,1,2,2]
Input: [2,0,2,1,1,0]
b := O // label the end of different colors;
w:=
if len(nums) == 0 {
for.
 number of O's, then 1's and followed by 2's.
if num == 0 {
=
 return
nums[r] = 0 
nums[w]  = 1 
nums[b] 
++N
b++
-, num := range nums {
0
0
=
---
## Page 181
输出结果即可。
后，记下左右窗口的位置和窗口大小。每次都不断更新这个符合条件的窗口和窗口大小的最小值。最后
解题思路
找不到这样的窗口，输出空字符串。
题目大意
Note:
Example:
in T in complexity O(n). 
 Given a string S and a string T, find the minimum window in S which will contain allthe characters 
76. Minimum Window Substring
代码
这一题是滑动窗口的题目，在窗口滑动的过程中不断的包含字符串T，直到完全包含字符串“的字符以
种排列组合组成的，窗口中可以包含“中没有的字符，如果存在多个，在结果中输出最小的窗口，如果
给定一个源字符串s，再给一个字符串T，要求在源字符串中找到一个窗口，这个窗口包含由字符串各
题
● If there is such window, you are guaranteed that there will always be only one unique
● If there is no such window in S that covers all characters in T, return the empty string "".
Output: "BANC"
Input: S = "ADOBECODEBANC", T = "ABC"
血
 minimum window in S. 
了
} else if num == 2 {
} else if num == l { 
++q
++M
nums[b] = 2
r++ 
nums [w]
b++
=1
---
## Page 182
题目
77. Combinations
-l, len(s)+l,0 
func minwindow(s string, t string) string {
package leetcode
return result
if finalLeft != -l {
for left < len(s) {
for i := O; i < len(t); i++ {
var tFreq, sFreq [256]int 
if right+l<len(s)&& count<len(t){
tFreq[t[i]-'a']++ 
for i := finalLeft; i < finalRight+l; i++ 
result += string(s[i])
left++
sFreq[s[left]-'a']--
if sFreq[s[left]-'a'] == tFreq[s[left]-'a'] {
if right-left+l < minw && count == len(t) {
else {
right++
if sFreq[s[right+l]-'a'] <= tFreq[s[right+l]-'a'] {
sFreq[s[right+l]-'a']++ 
 count--
finalRight = right 
finalLeft = left 
minw = right - left + 1 
count++
~