It often happens that while working on one project, you need to use another
project from within it. Perhaps it’s a library that a third party developed or
that you’re developing separately and using in multiple parent projects. A
common issue arises in these scenarios: you want to be able to treat the two
projects as separate yet still be able to use one from within the other.
Here’s an example. Suppose you’re developing a website and creating Atom feeds.
Instead of writing your own Atom-generating code, you decide to use a library.
You’re likely to have to either include this code from a shared library like a
CPAN install or Ruby gem, or copy the source code into your own project tree.
The issue with including the library is that it’s difficult to customize the
library in any way and often more difficult to deploy it, because you need to
make sure every client has that library available. The issue with copying the
code into your own project is that any custom changes you make are difficult to
merge when upstream changes become available.
Git addresses this issue using submodules. Submodules allow you to keep a Git
repository as a subdirectory of another Git repository. This lets you clone
another repository into your project and keep your commits separate.
## Submodule tips
### Submodule Foreach
There is a foreach submodule command to run some arbitrary command in each
submodule. This can be really helpful if you have a number of submodules in the
same project.
For example, let’s say we want to start a new feature or do a bugfix and we have
work going on in several submodules. We can easily stash all the work in all our
submodules.
```bash
git submodule foreach 'git stash'
```
Then we can create a new branch and switch to it in all our submodules.
```bash
git submodule foreach 'git checkout -b featureA'
```
You get the idea. One really useful thing you can do is produce a nice unified
diff of what is changed in your main project and all your subprojects as well.
```bash
git diff; git submodule foreach 'git diff'
```
### Useful Aliases
You may want to set up some aliases for some of these commands as they can be
quite long and you can’t set configuration options for most of them to make them
defaults. We covered setting up Git aliases in Git Aliases, but here is an
example of what you may want to set up if you plan on working with submodules in
Git a lot.
```bash
git config alias.sdiff '!'"git diff && git submodule foreach 'git diff'"
git config alias.spush 'push --recurse-submodules=on-demand'
git config alias.supdate 'submodule update --remote --merge'
```
This way you can simply run git supdate when you want to update your submodules,
or git spush to push with submodule dependency checking.
# Encrypt sensitive information
Use [git-crypt](https://github.com/AGWA/git-crypt).
# Use different git configs
Include in your `~/.gitconfig`
```
[includeIf "gitdir:~/company_A/"]
  path = ~/.config/git/company_A.config
```
Every repository you create under that directory it will append the other
configuration
# [Renaming from master to main](https://sfconservancy.org/news/2020/jun/23/gitbranchname/)
There's been a movement to migrate from `master` to `main`, the reason behind it
is that the initial branch name, `master`, is offensive to some people and we
empathize with those hurt by the use of that term.
Existing versions of Git are capable of working with any branch name; there's
nothing special about `master` except that it has historically been the name
used for the first branch when creating a new repository from scratch (with the
`git init` command). Thus many projects use it to represent the primary line of
development. We support and encourage projects to switch to branch names that
are meaningful and inclusive.
To
[configure `git` to use `main` by default](https://stackoverflow.com/questions/42871542/how-can-i-create-a-git-repository-with-the-default-branch-name-other-than-maste)
run:
```bash
git config --global init.defaultBranch main
```
It only works on since git version 2.28.0, so you're stuck with manually
changing it if you have an earlier version.
## Change's Controversy
The change is not free of controversy, for example in the
[PDM project](https://github.com/pdm-project/pdm/pull/1064) some people are not
sure that it's needed for many reasons. Let's see each of them:
- *The reason people are implementing the change is because other people are
  doing it*: After a quick search I found that the first one to do the change
  was
  [the software freedom conservancy with the Git project](https://sfconservancy.org/news/2020/jun/23/gitbranchname/).
  You can also see [Python](https://github.com/python/cpython/issues/78786),
  [Django](https://github.com/django/django/pull/2692),
  [Redis](https://github.com/redis/redis/issues/3185),
  [Drupal](https://www.drupal.org/node/2275877),
  [CouchDB](https://issues.apache.org/jira/browse/COUCHDB-2248) and
  [Github](https://www.theserverside.com/feature/Why-GitHub-renamed-its-master-branch-to-main)'s
  statements.
  As we're not part of the deciding organisms of the collectives doing the
  changes, all we can use are their statements and discussions to guess what are
  the reasons behind their support of the change. Despite that some of them do
  use the argument that other communities do support the change to emphasize the
  need of the change, all of them mention that the main reason is that the term
  is offensive to some people.
- *I don't see an issue using the term master*: If you relate to this statement
  it can be because you're not part of the communities that suffer the
  oppression tied to the term, and that makes you blind to the issue. It's a
  lesson I learned on my own skin throughout the years. There are thousand of
  situations, gestures, double meaning words and sentences that went unnoticed
  by me until I started discussing it with the people that are suffering them
  (women, racialized people, LGTBQI+, ...). Throughout my experience I've seen
  that the more privileged you are, the blinder you become. You can read more on
  privileged blindness
  [here](https://iveybusinessjournal.com/fighting-privilege-blindness/),
  [here](https://dojustice.crcna.org/article/becoming-aware-my-privilege) or
  [here](https://www.mindful.org/the-research-on-white-privilege-blindness/)
  (I've skimmed through the articles, and are the first articles I've found,
  there are probably better references).
  I'm not saying that privileged people are not aware of the issues or that they
  can even raise them. We can do so and more we read, discuss and train
  ourselves, the better we'll detect them. All I'm saying is that a non
  privileged person will always detect more because they suffer them daily.
  I understand that for you there is no issue using the word *master*, there
  wasn't an issue for me either until I saw these projects doing the change,
  again I was blinded to the issue as I'm not suffering it. That's because
  change is not meant for us, as we're not triggered by it. The change is
  targeted to the people that do perceive that `master` is an offensive term.
  What we can do is empathize with them and follow this tiny tiny tiny gesture.
  It's the least we can do.
  Think of a term that triggers you, such as *heil hitler*, imagine that those
  words were being used to define the main branch of your code, and that
  everyday you sit in front of your computer you see them. You'll probably be
  reminded of the historic events, concepts, feelings that are tied to that term
  each time you see it, and being them quite negative it can slowly mine you.
  Therefore it's legit that you wouldn't want to be exposed to that negative
  effects.
- *I don't see who will benefit from this change*: Probably the people that
  belongs to communities that are and have been under constant oppression for a
  very long time, in this case, specially the racialized ones which have
  suffered slavery.
  Sadly you will probably won't see many the affected people speak in these
  discussions, first because there are not that many, sadly the IT world is
  dominated by middle aged, economically comfortable, white, cis, hetero, males.
  Small changes like this are meant to foster diversity in the community by
  allowing them being more comfortable. Secondly because when they see these
  debates they move on as they are so fed up on teaching privileged people of
  their privileges. They not only have to suffer the oppression, we also put the
  burden on their shoulders to teach us.
As and ending thought, if you see yourself being specially troubled by the
change, having a discomfort feeling and strong reactions. In my experience these
signs are characteristic of privileged people that feel that their privileges
are being threatened, I've felt them myself countless times. When I feel it, I
usually do two things, fight them as strong as I can, or embrace them, analyze
them, and go to the root of them. Depending on how much energy I have I go with
the easy or the hard one. I'm not saying that it's you're case, but it could be.
# Configuration
## [Set the upstream remote by default](https://pawelgrzybek.com/auto-setup-remote-branch-and-never-again-see-an-error-about-the-missing-upstream/)
```bash
git config --global --add push.default current
git config --global --add push.autoSetupRemote true
```
# Snippets
## Remove tags
To delete a tag you can run:
```bash
git tag -d {{tag_name}}
```
To remove them remotely do
```bash
git push --delete origin {{ tag_name }}
```
## Revert a commit
```bash
git revert commit_id
```
## Get interesting stats of the repo
[Number of commits of the last year per user](https://stackoverflow.com/questions/31190474/how-to-count-git-commits-per-user-in-a-date-range):
```bash
git shortlog -sne --since="31 Dec 2020" --before="31 Dec 2021"
```
You can also use [`git-fame`](https://github.com/casperdcl/git-fame#usage) to
extract a more detailed report:
```bash
$: git-fame --since 1.year --cost hour --loc ins -w -M -C
| Author          |   hrs |   loc |   coms |   fils |  distribution   |
|:----------------|------:|------:|-------:|-------:|:----------------|
| Lyz             |    10 | 28933 |    112 |    238 | 64.1/33.3/75.8  |
| GitHub Action   |     2 | 16194 |    220 |     73 | 35.9/65.5/23.2  |
| Alexander Gil   |     2 |     9 |      1 |      1 | 0.0/ 0.3/ 0.3   |
| n0rt3y5ur       |     2 |     1 |      1 |      1 | 0.0/ 0.3/ 0.3   |
| Guilherme Danno |     2 |     1 |      1 |      1 | 0.0/ 0.3/ 0.3   |
| lyz-code        |     2 |     0 |      1 |      0 | 0.0/ 0.3/ 0.0   |
```
You can use `pipx install git-fame` to install it.
# References
- [FAQ](https://github.com/k88hudson/git-flight-rules)
- [Funny FAQ](http://ohshitgit.com/)
- [Nvie post on branching model](http://nvie.com/posts/a-successful-git-branching-model/)
## Courses
- [W3 git course](https://www.w3schools.com/git/default.asp)
- [Learngitbranching interactive tutorial](https://learngitbranching.js.org/)
- [katakoda](https://www.katacoda.com/courses/git)
- [Code academy](https://www.codecademy.com/learn/learn-git)
- [Udemy](https://www.udemy.com/course/learngit/)
- [Freecode camp article](https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/)
## Tools
- [git-extras](https://github.com/tj/git-extras/blob/master/Commands.md)
- [archaeologit](https://github.com/peterjaric/archaeologit): Tool to search
  strings in the history of a github user