# Design of Event-Based Intrusion Detection System on OpenFlow Network

**Authors:**
- Yung-Li Hu<sup>1,2</sup>
- Wei-Bing Su<sup>1</sup>
- Li-Ying Wu<sup>1</sup>
- Yennun Huang<sup>2</sup>
- Sy-Yen Kuo<sup>1</sup>

**Affiliations:**
- Department of Electrical Engineering, National Taiwan University, Taipei, Taiwan<sup>1</sup>
- Research Center for Information Technology Innovation, Academia Sinica, Taipei, Taiwan<sup>2</sup>

**Contact:**
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL

## Abstract
OpenFlow (OF) Network is a novel network architecture that many prominent cloud service providers, such as Google, Facebook, and Microsoft, have adopted to build their data center networks. The key difference between an OF Network and traditional network architectures is the decoupling of the control and data planes for network management. Intrusion detection is crucial in cloud computing to enhance system security. Given that OF networks can improve alert response times by efficiently configuring network flows, we propose an event-based Intrusion Detection System (IDS) architecture for OF networks.

**Keywords:** OpenFlow Network, Intrusion Detection Systems

## I. Introduction
OpenFlow (OF) Network, proposed by the Open Network Foundation (ONF), has been adopted by major cloud service providers like Google, Facebook, and Microsoft to build their data center networks. The primary distinction between an OF Network and a traditional network is the separation of the control and data planes, which enhances network management [1, 2]. Figure 1 illustrates the typical scenario of an OF network.

![Figure 1: Scenario of OpenFlow Network](fig1.png)

In an OF network, switches are controlled by a logically centralized controller, enabling more scalable and flexible resource allocation and service configuration. The flow table in an OF switch maintains multiple flow entries, each recording the features of packets received. Each flow entry includes three fields: header, counter, and action, as detailed in Table 1.

| Field Name | Illustration |
|------------|--------------|
| Header     | Represents the unique ID for the type of packets received by the OF switch. |
| Counter    | Records the number of packets received by the OF switch within a specific time interval. |
| Action     | Defines the associated actions when a packet is received during a specific time interval. |

When a new packet arrives at an OF switch, it is compared against all flow entries in the flow table. If the packet matches an existing flow entry, the counter is updated, and the associated actions are triggered. If no match is found, the packet is sent to the OF controller through a secure channel. The controller then decides whether to add a new flow entry to the flow table. The operation records in the flow table can be used to analyze anomalous traffic and detect intrusions [3].

Monitoring variations in flow entries for intrusion detection is a lightweight approach, as it does not require extensive computational resources for packet parsing. Network attacks, such as a high volume of requests to a network service in a short time or frequent unauthorized access, can cause significant disruptions in cloud computing. Detecting network anomalies is essential for maintaining the security of a cloud system. Therefore, IDSs in cloud systems must process anomaly events immediately and alert administrators.

The programmable nature of the OF controller allows for dynamic adjustments to network configurations, such as topology and routing paths. Flow entries in the flow table can be considered as events reflecting the state of network flows. This enables the OF network to efficiently configure the amount of network traffic to an IDS, thereby improving alert response times.

## II. Architecture Design of Intrusion Detection System
Figure 2 shows the design of our event-based IDS architecture for OpenFlow Networks. The architecture is distributed, event-based, and hierarchical, allowing for immediate detection and reporting of intrusion alerts.

### Components of the Architecture:
- **Sub-Controller**: An OpenFlow controller that connects to one or more OF switches. It collects traffic flows and flow entries from the switches and forwards the data to the Event Bus via a publish/subscribe mechanism.
- **Event Bus**: A gateway that routes data to the Event Processing Engine or Event Channel using the publish/subscribe mechanism.
- **Event Channel**: A buffer for events ready to be processed by the Event Processing Agent (EPA). It supports complex computations for anomaly detection and alert correlations.
- **Event Processing Engine**: Composed of a set of EPAs. Each EPA is a software component responsible for detecting network attacks and coordinating tasks with the Sub-Controller.

### Rule Patterns:
EPAs use Event Processing Language (EPL), such as Esper [4], to define rule patterns stored in the Event Pattern repository. Network administrators can use EPL to create policy-based intrusion detection rules. A set of EPAs can collaborate to analyze and correlate alert events from multiple attack detection results, improving the ability of isolated intrusion detection components.

![Figure 2: Event-Based IDS Architecture](fig2.png)

## III. Conclusion
Our research contributes to the design of an event-based IDS architecture for OF networks, enhancing network security. Future work will focus on extending this architecture to support collaborative intrusion detection, which can reduce false positive alerts and decrease the response time for attack detections.

## References
[1] N. McKeown, T. Anderson, H. Balakrishnan, G. Peterson, J. Rexford, S. Shenker, and J. Turner, “OpenFlow: Enabling Innovation in Campus Networks,” ACM SIGCOMM Computer Communication Review, vol. 38, no. 2, pp. 69-74, April 2008.

[2] A. Tootoonchian and Y. Ganjali, “HyperFlow: A Distributed Control Plane for OpenFlow,” in Proceedings of 2010 Internet Network Management Conference on Research on Enterprise Networking (INM/WREN), 2010.

[3] R. Braga, E. Mota, and A. Passito, “Lightweight DDoS Flooding Attack Detection Using NOX/OpenFlow,” in Proceedings of 35th IEEE International Conference on Local Computer Network (LCN), pp. 408-415, 2010.

[4] “EsperTech,” 2013. [Online] Available: http://esper.codehaus.org/

[5] A. Hofmann and B. Sick, “Online Intrusion Alert Aggregation with Generative Data Stream Modeling,” IEEE Transactions on Dependable and Secure Computing, vol. 8, no. 2, pp. 282-294, 2011.

[6] M. Sifalakis, M. Fry, and D. Hutchison, “Event Detection and Correlation for Network Environments,” IEEE Journal on Selected Areas in Communications, vol. 28, no. 1, January 2010.

[7] G. Wang, T.S.E. Ng, and A. Shaikh, “Programming Your Network at Run-Time for Big Data Applications,” in Proceedings of First Workshop on Hot Topics in Software Defined Networks (HotSDN), 2012.

---

**Note:** Figures 1 and 2 should be included in the document as appropriate.