title:Talking with Familiar Strangers: An Empirical Study on HTTPS Context
Confusion Attacks
author:Mingming Zhang and
Xiaofeng Zheng and
Kaiwen Shen and
Ziqiao Kong and
Chaoyi Lu and
Yu Wang and
Haixin Duan and
Shuang Hao and
Baojun Liu and
Min Yang
Talking with Familiar Strangers: An Empirical Study on HTTPS
Mingming Zhang1,Φ, Xiaofeng Zheng1,2,Φ,∗, Kaiwen Shen1, Ziqiao Kong2, Chaoyi Lu1, Yu Wang1,
Context Confusion Attacks
Haixin Duan1,2,∗, Shuang Hao3, Baojun Liu 4 and Min Yang5
1Institute for Network Sciences and Cyberspace, Tsinghua University 2QI-ANXIN Group 3University of Texas at Dallas
4Department of Computer Science and Technology, Tsinghua University 5Fudan University
ABSTRACT
HTTPS is principally designed for secure end-to-end communi-
cation, which adds confidentiality and integrity to sensitive data
transmission. While several man-in-the-middle attacks (e.g., SSL
Stripping) are available to break the secured connections, state-of-
the-art security policies (e.g., HSTS) have significantly increased
the cost of successful attacks. However, the TLS certificates shared
by multiple domains make HTTPS hijacking attacks possible again.
In this paper, we term the HTTPS MITM attacks based on the
shared TLS certificates as HTTPS Context Confusion Attack (SCC At-
tack). Despite a known threat, it has not yet been studied thoroughly.
We aim to fill this gap with an in-depth empirical assessment of
SCC Attack. We find the attack can succeed even for servers that
have deployed current best practice of security policies. By rerout-
ing encrypted traffic to another flawed server that shares the TLS
certificate, attackers can bypass the security practices, hijack the
ongoing HTTPS connections, and subsequently launch additional
attacks including phishing and payment hijacking. Particularly,
vulnerable HTTP headers from a third-party server are exploitable
for this attack, and it is possible to hijack an already-established
secure connection.
Through tests on popular websites, we find vulnerable subdo-
mains under 126 apex domains in Alexa top 500 sites, including
large vendors like Alibaba, JD, and Microsoft. Meanwhile, through
a large-scale measurement, we find that TLS certificate sharing is
prominent, which uncovers the high potential of such attacks, and
we summarize the security dependencies among different parties.
For responsible disclosure, we have reported the issues to affected
vendors and received positive feedback. Our study sheds light on
an influential attack surface of the HTTPS ecosystem and calls for
proper mitigation against MITM attacks.
CCS CONCEPTS
• Security and privacy→ Security services; Network security.
∗ To whom correspondence may be addressed at PI:EMAIL and
Φ Both authors contributed equally to this research.
duanhx@tsinghua.edu.cn.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417252
KEYWORDS
HTTPS Hijacking Attack; TLS Certificate Sharing
ACM Reference Format:
Mingming Zhang1,Φ, Xiaofeng Zheng1,2,Φ,∗, Kaiwen Shen1, Ziqiao Kong2,
Chaoyi Lu1, Yu Wang1, Haixin Duan1,2,∗, Shuang Hao3, Baojun Liu 4 and
Min Yang5 . 2020. Talking with Familiar Strangers: An Empirical Study
on HTTPS Context Confusion Attacks. In Proceedings of the 2020 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’20),
November 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3372297.3417252
1 INTRODUCTION
HTTPS, based on TLS and PKI, is designed for channel-oriented
security[56], and provides authentication,confidentiality and in-
tegrity for web visits. Recent data has shown that HTTPS has been
widely adopted on the Internet [6], and mandated for high-profile
websites. For example, Google reports that over 94% of its traffic is
now using HTTPS [5].
Given the wide usage of HTTPS, network adversaries are aiming
at breaking its end-to-end protection. Specifically, several man-in-
the-middle (MITM) attacks have been proposed to intercept secure
connections, such as SSL Stripping [51] and SSL Sniffing [49]. To
mitigate such threats, websites can deploy security practices, such
as HTTP Strict Transport Security (HSTS) [37]. Moreover, web
browsers have improved their UI to show secure connections (e.g.,
a “lock” sign or “insecure” alarm), and report authentication errors
for users to notice interception behaviors. These countermeasures
have made HTTPS traffic hijacking difficult.
Recent studies have shown that shared TLS certificates (Certifi-
cate Sharing) make HTTPS hijacking attacks possible again. Delig-
nat et al. studied an origin confusion attack on virtual hosts [31]
exploiting the wildcard or multi-domain TLS certificates. Based on
the idea, another work [14] further provided more examples where
attackers can load malicious content using compromised webpages.
However, prior work only exhibited several attack cases, and there
has been no systematic empirical research, neither examining the
client-side (e.g., browsers’ behavior) nor considering the complex
network environment.
In the remainder of the paper, we call the HTTPS MITM attacks
leveraging shared TLS certificates as HTTPS Context Confusion
Attack (SCC Attack) based on their consequences. The research
questions we seek to answer include: (1) Under what circumstances
do the shared TLS certificates bring threats? (2) How to discover
potential websites at a scale that are vulnerable to SCC attacks? (3)
How severe is the impact in the real world, and how many popular
sites are SCC-attack-vulnerable? To answer these questions, we
conduct a large-scale empirical study on SCC attacks. We demon-
strate that TLS certificate sharing imposes a risk of intercepting
HTTPS traffic, even when strict security practices are deployed by
websites.
In more detail, we delve into the real-world influences of SCC
attacks. First, we show attackers can launch such attacks to bypass
state-of-the-art HTTPS security policies, such as HSTS, by using the
inconsistency of HTTP headers (Section 4.1). Second, we show how
attackers can disrupt HTTPS-protected user actions, such as online
payments and file downloads, in complicated connection status.
We find that even with a secure connection established between
a client and server, HTTPS hijacking is still possible (Section 4.2).
Third, we test on browsers notifications and behaviors during SCC
attacks (Section 4.3). Then, to evaluate the real-world impact of the
attack, we propose methods on discovering SCC-attack-vulnerable
servers in the wild based on active scanning (Section 5.1). Last, we
perform a measurement study on popular web servers (Section 5.2)
to show the threat scale.
Our results show that certificate sharing is prevalent (over 86.82%
of certificates we probed from Internet are multi-domain or wild-
card ones), and that 126 apex domains (e.g., live.com, alipay.com,
jd.com) of Alexa Top 500 have vulnerable subdomains. Among
these, the apex domains under Alexa Top 100 have the most se-
vere impact due to a large number of shared certificates (52% of
all fetched multi-domain certificates). Moreover, we have analyzed
the security dependencies among multiple parties and found the
flawed implementations on one server can affect the security of a
great many parties.
For mitigation, we provide feasible recommendations for modern
browsers, such as warning users of the changes in the secure context.
We have been reporting the issue to affected vendors and CNNVD1,
and have received responses from five of them: CNNVD, Alibaba,
and JD have confirmed our issues, and we are still discussing with
Microsoft and Netease for more technical details.
Contributions. In this paper, we make the following contributions:
● We conduct an empirical analysis of SCC attacks that leverage
shared TLS certificates. Through this attack, we find an adver-
sary can downgrade established secure connections to plaintext,
bypass HTTPS security policies, and disrupt HTTPS-protected
services. The typical attack scenarios include payment hijacking,
downloading hijacking, and website phishing.
● We evaluate SCC attacks from the client side, and analyze pop-
● We propose methods to discover SCC-attack-vulnerable web-
ular browsers’ behaviors to attacks in different scenarios. We
show the weakness of tested browsers against the SCC attack
and propose enhancements to mitigate the issues.
sites at scale, and perform a large-scale measurement study on
its real-world impact. Our results show that 25.2% subdomains
under Alexa Top 500 sites are vulnerable to the SCC attack,
which span 126 apex domains. Moreover, we uncover the secu-
rity dependencies among business parties.
1China National Vulnerability Database of Information Security
Figure 1: Example of the Shared TLS Certificate
2 BACKGROUND
2.1 HTTPS and Connection Security
On top of TLS, HTTPS provides communication security for web
visits, which has been widely adopted by high-profile websites [56].
Besides encryption and integrity, it also provides authentication to
protect against man-in-the-middle attacks, which rely on TLS cer-
tificate validation. For the convenience of issuing, managing, and re-
voking, TLS certificates can be shared by multiple subjects [29, 58].
As shown in Figure 1, a shared TLS certificate uses the Subject
Alternative Name (SAN) extension to include multiple names or
addresses. If none of the names are matched, or other invalid rea-
sons(e.g., expired, self-signed, or malformed) occur, user agents will
show authentication warnings to users. In contrast, once a certifi-
cate is validated, a trusted relationship can be established between
the client and the server. Then all subsequent data are exchanged
using the encrypted connection.
For enhancing HTTPS security, several mechanisms are adopted
by modern browsers and popular websites and implemented through
HTTP security headers [11, 52]. The headers are typically the in-
structions declared by servers to enforce the security policies in
browsers [11, 37]. For instance, Strict-Transport-Security header
forces browsers to interact with the server using only HTTPS con-
nections during a period (max-age), which is a core of the HSTS
policy. However, these headers can not fully guarantee security
due to the implementation issues both on the client-side and the
server-side.
2.2 SSL-Stripping-Based Attacks
Over the past few years, MITM attackers have become the main
adversaries to SSL/TLS [39]. One of the most representative attacks
is SSL Stripping Attack, which is introduced by Moxie Marlinspike,
and attempts to bypass SSL/TLS [51]. In this attack, the adversary
needs to intercept the initial HTTP connection when the user ac-
cesses the website for the first time, then delivers the request to the
remote server. When he receives a 301/302 redirect to an HTTPS
URL, he can replace the secure links returned by the server with
plaintext ones, and keep the mapping of the changes. In this way,
he can control the specific secure page and downgrade HTTPS to
HTTP. As a consequence, the attacker can observe the sensitive
data of users from the middle [57].
Further, Leonardo developed a tool combining SSL Stripping and
a malicious DNS tool [33], and the work is called SSLStrip+ [15, 34].
By doing this, attackers can partially bypass the HSTS policy. Af-
ter measuring on the deployment of HSTS, Li et al. introduced an
Enhanced SSL Stripping Attack while clicking or submitting [46].
security practices (e.g., HSTS), which the user attempts to visit; And
(4) another webserver (ServerB) with flawed security policies (e.g.,
misconfigured HTTP security headers). In particular, domains of
ServerA and ServerB share one valid TLS certificate.
An adversary first terminates a TLS connection (e.g., by con-
nection reset) between the client and ServerA, and maliciously
reroutes the HTTPS request ( 1○), which is originally from the vic-
tim to ServerA, to ServerB to re-establish a TLS connection ( 2○).
At this time, the browser still regards the context as under the con-
nection with ServerA. The authentication of ServerB can be passed
since the servers share one valid certificate. So, after receiving the
flawed security configurations from ServerB ( 3○), the browser will
enforce the weak policies for ServerA ( 4○). In short, the client ini-
tially visits ServerA but establishes a TLS connection with ServerB
without authentication errors.
Differences with SSL-Stripping-based Attacks. Compared with
previous SSL-Stripping-based attacks, there are several features spe-
cial for SCC attacks because of certificate sharing. First, an SCC
attack can succeed even when strict security policies have been
deployed on the accessed websites. It is the third-party servers
with shared certificates that communicate with clients. Second,
it does not exploit initial plaintext requests. Hence, none of the
strict HTTPS policies, such as the directives in HSTS mechanism
or upgrade-insecure-requests in CSP, can prevent users from
SCC attacks. In particular, SCC Attack applies to established secure
connections. Third, it does not require installing root certificates to
clients, since the connection is protected by a trusted and valid cer-
tificate. As a result, SCC attacks are undetectable to web browsers
or applications. Last, web browsers do not display authentication
errors during the traffic rerouting, so victim users can hardly notice
SCC attacks.
4 SCC ATTACK IN THE REAL WORLD
In this section, we introduce the scenarios of bypassing HTTPS
Security Policies in SCC attacks (4.1) and demonstrate the technical
methods for attacking in the complex network environment (4.2).
For each attack , the attacker needs to maliciously reroute the target
HTTPS request to the certificate-sharing server, as mentioned in
our model, which is possible through DNS spoofing [64, 65], IP/Port
redirection[2] and ARP spoofing[36].
4.1 Bypassing HTTPS Security Policies
Based on the threat model, SCC attackers can exploit the header
inconsistencies among servers that share TLS certificates. After
systematic analysis, we find the following HTTP response headers
are exploitable and can bring disturbing threats, which can directly
downgrade secure connections and expose users to risk.
Scenario 1: Downgrading HTTPS to HTTP by Insecure Loca-
tion Headers. In practice, web servers can upgrade HTTP connec-
tions via a 3xx redirect to an HTTPS URL by default to achieve
maximum security. However, 3xx redirects can expose the com-
munication to threats if the Location field is set with an insecure
value (e.g., HTTP URL). Hence, adversaries can use the insecure
3xx redirects from servers to downgrade HTTPS traffic to plaintext,
which we term as HTTPS downgrading attacks. This idea applies to
SCC attacks in the certificate sharing scenarios.
Figure 2: Threat Model
The basic idea is to use the XSS script at the front-end and replace
HTTPS with HTTP. Similarly, Chen et al. demonstrated the possi-
bility of stripping HTTPS by malicious proxies without breaking
any cryptographic scheme [27]. They described that proxy could