本章解释 IS NULL 和 IS NOT NULL 操作符。
19.1 NULL 值
如果表中的列是可选的，那么我们可以插入一个新记录或更新一个现有记录，而无
需向列添加一个值。这意味着该字段将存储为 NULL 。
NULL 值的处理与其他值不同。
NULL 为未知或不适当值的占位符。
注释：无法比较 NULL 和 0；它们是不等价的。
NULL 值处理
请看下面的 "Customers" 表：
如果 "Customers" 表 "地址" 一栏是可选的。这意味着，如果在 "地址" 列中插入一
个没有值的记录，则 "地址" 列将用 NULL 值保存。
那么如何测试null的值呢？
不能使用比较操作符测试 NULL 值，例如=、。
我们必须使用 IS NULL 和 IS NOT NULL 操作符。
19.2 IS NULL
我们如何才能选择 "地址" 列中有 NULL 值的记录？
我们必须使用 IS NULL 操作符：
SELECT * FROM Customers
WHERE 地址 IS NULL
结果集如下所示：
提示：总是使用 IS NULL 来查找 NULL 值。
19.3 IS NOT NULL
我们如何才能选择 "地址" 列中没有 NULL 值的记录？
我们必须使用 IS NOT NULL 操作符：
SELECT * FROM Customers
WHERE 地址 IS NOT NULL
结果集如下所示：
19.4 批注
NULL 值在建表的时候就可以默认分配，在查询过程中不能使用比较操作符来进行
筛选或查找，只能使用IS NULL和IS NOT NULL，否则就会报语法错误。
第二十章 AS 的用法
通过使用 SQL，可以为表名称或列名称指定别名（Alias）。
20.1 别名的作用
• SQL 别名用于为表或表中的列提供临时名称。
• SQL 别名通常用于使列名更具可读性。
• SQL 一个别名只存在于查询期间。
20.2 使用别名的场景
在下列情况下使用别名是有用的：
• 查询涉及多个表
• 用于查询函数
• 需要把两个或更多的列放在一起
• 列名长或可读性差
20.3 列的别名语法
SELECT column_name AS alias_name
FROM table_name;
20.4 表的别名语法
SELECT column_name(s)
FROM table_name AS alias_name;
示例数据库
以下是"Customers" 表中的数据：
下面是选自 "Orders" 表的数据：
20.5 列的别名实例
以下SQL语句创建两个别名，一个用于客户ID列，另一个用于姓名列：
SELECT 客户ID AS CustomerID,
姓名 AS Customer FROM Customers;
结果如下：
注：查询出来的列名会以别名的形式显示，不再显示原来的列名，但是物理表的列
名还是没变，这样在不影响表结构的前提下，可以根据实际需要重命成自己想要的
名称。
以下SQL语句创建两个别名，一个用于姓名列，一个用于城市列。
注：如果别名包含空格，则需要双引号或方括号：
SELECT 姓名 AS Customer,城市 AS [City Name] FROM Customers;
结果如下：
以下SQL语句创建一个名为“地址”的别名，它包含四列（姓名，省份，城市，地址
和邮编）：
SELECT 姓名,省份 +城市 +地址 + ',邮编：' + 邮编 AS 地址 FROM Customers;
结果如下：
注：如果我们不使用AS，上面的地址列就会显示 (无列名)
注意：要使上面的SQL语句在MySQL中工作，请使用以下命令：
SELECT 姓名,CONCAT(地址,省份,城市,',邮编：',邮编) AS 地址FROM Customers;
注：Mysql中的字符拼接需要使用CONCAT函数，不能直接使用+
20.6 表别名实例
以下SQL语句创建两个列别名，一个用于姓名列，一个用于订单日期列，同时创建
两个表列名，分别用于Customers表和Orders表
SELECT
c.姓名 AS Customer,
o.订单日期 AS Orderdate
FROM Customers AS c
JOIN Orders AS o
ON c.客户ID=o.客户ID
结果如下：
注：上面我们分别对表名和列名进行了重命名，需要注意的是ON和WHERE以
及其他涉及条件筛选的地方，不能使用重命名后的名称，GROUP BY 也不行。此
外在进行重命名时AS是可以省略的。
20.7 批注
AS别名在多表进行关联时可以很好的处理表名相同的情况，比如两个表都存在姓
名列，可以将A表的姓名命名成A_NAME，B表的姓名命名成B_NAME，这样在
阅读代码时候可以一目了然。此外AS一般只对查询的列和表以及ORDER BY重
命名后的别名才有效，其他地方还是需要使用原始列名。
第二十一章 约束的语法
21.1 约束的作用
约束是作用于数据表中列上的规则，用于限制表中数据的类型。约束的存在保证了
数据库中数据的精确性和可靠性。
约束有列级和表级之分，列级约束作用于单一的列，而表级约束作用于整张数据表。
下面是 SQL 中常用的约束，这些约束虽然已经在关系型数据库管理系统一章中讨
论过了，但是仍然值得在这里回顾一遍。
• NOT NULL 约束：保证列中数据不能有 NULL 值
• DEFAULT 约束：提供该列数据未指定时所采用的默认值
• UNIQUE 约束：保证列中的所有数据各不相同
• 主键约束：唯一标识数据表中的行/记录
• 外键约束：唯一标识其他表中的一条行/记录
• CHECK 约束：此约束保证列中的所有值满足某一条件
• 索引：用于在数据库中快速创建或检索数据
约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定
（通过 ALTER TABLE 语句）。
21.2 创建约束
当使用CREATE TABLE语句创建表时，或者在使用ALTER TABLE语句创建表之后，
可以指定约束。
语法
CREATE TABLE table_name
(
column_name1 data_type(size) constraint_name,
column_name2 data_type(size) constraint_name,
column_name3 data_type(size) constraint_name,
....
)
21.3 删除约束
任何现有约束都可以通过在 ALTER TABLE 命令中指定 DROP CONSTRAINT 选
项的方法删除掉。
例如，要去除 EMPLOYEES 表中的主键约束，可以使用下述命令：
ALTER TABLE EMPLOYEES DROP CONSTRAINT EMPLOYEES_PK;
一些数据库实现可能提供了删除特定约束的快捷方法。例如，要在 Oracle 中删除
一张表的主键约束，可以使用如下命令：
ALTER TABLE EMPLOYEES DROP PRIMARY KEY;
某些数据库实现允许禁用约束。这样与其从数据库中永久删除约束，你可以只是临
时禁用掉它，过一段时间后再重新启用。
21.4 完整性约束
完整性约束用于保证关系型数据库中数据的精确性和一致性。对于关系型数据库来
说，数据完整性由参照完整性（referential integrity，RI）来保证。
有很多种约束可以起到参照完整性的作用，这些约束包括主键约束（Primary Key）、
外键约束（Foreign Key）、唯一性约束（Unique Constraint）以及上面提到的其
他约束。
21.5 批注
约束的种类有很多，通过约束我们可以让进入数据库的数据更加规范，虽然这样做
会很麻烦，有时候甚至还可能影响用户体验，但是还是建议尽量让你的数据库设计
的更加规范，只有数据规范了，在之后的数据处理过程中或数据查询分析过程中才
会更加高效。本节主要介绍语法部分，下一节会着重介绍各个约束的使用方法。
第二十二章 约束的实例
22.1 NOT NULL约束
NOT NULL 约束强制列不接受 NULL 值。
NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插
入新记录或者更新记录。
下面的 SQL 强制表"Customers" 的"客户 ID" 列和 "姓名" 列不接受 NULL 值：
CREATE TABLE Customers(
客户ID INT NOT NULL,
姓名 VARCHAR(10) NOT NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL
) ;
一旦这两列有空值NULL被插入，系统就会报错提示，例如我们插入如下信息：
INSERT INTO dbo.Customers ( 姓名, 地址, 城市, 邮编, 省份 )
VALUES (NULL,'花城大道1号','广州市','51000',NULL)
结果：
22.2 UNIQUE约束
UNIQUE 约束唯一标识数据库表中的每条记录。
UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。
PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。
请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY
约束。
CREATE TABLE 时的 SQL UNIQUE 约束
下面的 SQL 在 "Orders" 表创建时在 "订单ID" 列上创建 UNIQUE 约束：
MySQL：
CREATE TABLE dbo.Orders(
订单ID INT NOT NULL,
客户ID INT NULL,
员工ID INT NULL,
订单日期 DATETIME NULL,
发货ID INT NULL,
UNIQUE (订单ID)
) ;
SQL Server / Oracle / MS Access：
CREATE TABLE dbo.Orders(
订单ID INT NOT NULL UNIQUE,
客户ID INT NULL,
员工ID INT NULL,
订单日期 DATETIME NULL,
发货ID INT NULL
) ;
唯一约束是被约束的列在插入新数据时，如果和已经存在的列有相同的值，则会报
错。
INSERT INTO dbo.Orders( 订单ID, 客户ID, 员工ID, 订单日期, 发货ID )
VALUES ( 1001,1,2,'2018-11-21 19:21:32',1),
( 1001,2,3,'2018-11-22 11:22:32',5)
结果：
如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语
法：
MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE dbo.Orders(
订单ID INT NOT NULL ,
客户ID INT NULL,
员工ID INT NULL,
订单日期 DATETIME NULL,
发货ID INT NULL,
CONSTRAINT uc_OrderID UNIQUE (订单ID,发货ID)
) ;
ALTER TABLE 时的 UNIQUE 约束
当表已被创建时，如需在 "订单 ID" 列创建 UNIQUE 约束，请使用下面的 SQL：
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Orders ADD UNIQUE (订单ID)
如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语
法：
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Customers ADD CONSTRAINT uc_CustomerID UNIQUE (客户ID,姓名)
删除UNIQUE 约束
如需删除UNIQUE 约束，请使用下面的 SQL：
MySQL：
ALTER TABLE Orders DROP INDEX uc_OrderID
SQL Server / Oracle / MS Access：
ALTER TABLE Customers DROP CONSTRAINT uc_CustomerID
22.3 PRIMARY KEY约束
PRIMARY KEY 约束唯一标识数据库表中的每条记录。
主键必须包含唯一的值。
主键列不能包含 NULL 值。
每个表都应该有一个主键，并且每个表只能有一个主键。
CREATE TABLE 时的 PRIMARY KEY 约束
下面的 SQL 在 "Customers" 表创建时在 "客户 ID" 列上创建 PRIMARY KEY
约束：
MySQL：
CREATE TABLE dbo.Customers(
客户ID INT NOT NULL,
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL,
PRIMARY KEY (客户ID)
) ;
SQL Server / Oracle / MS Access：
CREATE TABLE dbo.Customers(
客户ID INT NOT NULL PRIMARY KEY,
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL
) ;
如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下
面的 SQL 语法：
MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE dbo.Customers(
客户ID INT NOT NULL PRIMARY KEY,
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL,
CONSTRAINT pk_CustomerID PRIMARY KEY (客户ID,姓名)
) ;
注释：在上面的实例中，只有一个主键 PRIMARY KEY（pk_CustomerID）。然而，
pk_CustomerID 的值是由两个列（客户ID和姓名）组成的。
ALTER TABLE 时的 PRIMARY KEY 约束
当表已被创建时，如需在 "客户 ID" 列创建 PRIMARY KEY 约束，请使用下面的
SQL：
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Customers ADD PRIMARY KEY (客户ID)
如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下
面的 SQL 语法：
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Customers ADD CONSTRAINT pk_CustomerID PRIMARY KEY (客户ID,姓名)
注释：如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含
NULL 值（在表首次创建时）。
删除 PRIMARY KEY 约束
如需删除 PRIMARY KEY 约束，请使用下面的 SQL：
MySQL：
ALTER TABLE Customers DROP PRIMARY KEY
SQL Server / Oracle / MS Access：
ALTER TABLE Customers DROP CONSTRAINT pk_CustomerID
22.4 FOREIGN KEY约束
一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。
让我们通过一个实例来解释外键。请看下面两个表：
"Customers" 表：
"Orders" 表：
请注意，"Orders" 表中的 "客户ID" 列指向 "Customers" 表中的 "客户ID" 列。
"Customers" 表中的 "客户ID" 列是 "Customers" 表中的 PRIMARY KEY。
"Orders" 表中的 "客户ID" 列是 "Orders" 表中的 FOREIGN KEY。
FOREIGN KEY 约束用于预防破坏表之间连接的行为。
FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表
中的值之一。
CREATE TABLE 时的FOREIGN KEY 约束
下面的 SQL 在 "Orders" 表创建时在 "客户ID" 列上创建 FOREIGN KEY 约束：
MySQL：
CREATE TABLE Orders
(
订单ID INT NOT NULL,
客户ID INT NULL,
员工ID INT NULL,
订单日期 DATETIME NULL,
发货ID INT NULL,
PRIMARY KEY (订单ID),
FOREIGN KEY (客户ID) REFERENCES Customers(客户ID)
)
SQL Server / Oracle / MS Access：
CREATE TABLE Orders
(
订单ID INT NOT NULL PRIMARY KEY,
客户ID INT NULL,
员工ID INT NULL,
订单日期 DATETIME NULL,
发货ID INT NULL,
FOREIGN KEY (客户ID) REFERENCES Customers(客户ID)
)
如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下
面的 SQL 语法：
MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE Orders
(
订单ID INT NOT NULL,
客户ID INT NULL,
员工ID INT NULL,
订单日期 DATETIME NULL,
发货ID INT NULL,
PRIMARY KEY (订单ID),
CONSTRAINT fk_CusOrders FOREIGN KEY (客户ID)
REFERENCES Customers(客户ID)
)
ALTER TABLE 时的FOREIGN KEY 约束
当 "Orders" 表已被创建时，如需在 "客户 ID" 列创建 FOREIGN KEY 约束，请
使用下面的 SQL：
MySQL / SQL Server / Oracle / MS Access：