{0x89547ECE,0x36F1,0x11D2,{0x85,0xDA,0xD7,0x43,0xB2,0x
32,0x69,0x28}}; 
int main(int argc, char* argv[])
{
HRESULT hr;       // COM error code
IBeepObj *IBeep; // pointer to interface
hr = CoInitialize(0); // initialize COM
Four Steps to Client Connectivity
21
Additonal Information and Updates: http://www.iftech.com/dcom
if (SUCCEEDED(hr)) // macro to check for success
{
hr = CoCreateInstance( 
CLSID_BeepObj,     // COM class id 
NULL,                // outer unknown
CLSCTX_INPROC_SERVER, // server INFO
IID_IBeepObj,      // interface id
(void**)&IBeep ); // pointer to interface
if (SUCCEEDED(hr))
{
hr = IBeep->Beep(800); // call the method
hr = IBeep->Release(); // release interface
} 
} 
CoUninitialize(); // close COM 
return 0;
}
The header "BeepServer.h" is created when we compile the
server. BeepServer is the in-process COM server we are going to
write in the next chapter. Several header files are generated auto-
matically by the compiler when compiling the server. This partic-
ular header file defines the interface IBeepObj. Compilation of
the server code also generates the GUIDs seen at the top of this
program. We've just pasted them in here from the server project.
Let's look at each of the 4 steps in detail.
Initializing the COM Subsystem:
This is the easy step. The COM method we need is CoInitialize().
CoInitialize(0);
This function takes one parameter and that parameter is
always a zero - a legacy from its origins in OLE. The CoInitialize
function initializes the COM library. You need to call this func-
tion before you do anything else. When we get into more
sophisticated applications, we will be using the extended ver-
sion, CoInitializeEx.
22    Chapter 2 •
Understanding the Simplest COM Client 
Call CoUninitialize() when you're completely finished with
COM. This function de-allocates the COM library. I often include
these calls in the InitInstance() and ExitInstance() functions of
my MFC applications.
Most COM functions return an error code called an
HRESULT. This error value contains several fields which define
the severity, facility, and type of error. We use the SUCCEEDED
macro because there are several different success codes that
COM can return. It's not safe to just check for the normal success
code (S_OK). We will discuss HRESULT's later in some detail.
Query COM for a Specific Interface
What a COM client is looking for are useful functions that it can
call to accomplish its goals. In COM you access a set of useful
functions through an interface. An interface, in its simplest form,
is nothing but a collection of one or more related functions.
When we “get” an interface from a COM server, we're really get-
ting a pointer to a set of functions.
You can obtain an interface pointer by using the CoCre-
ateInstance() function. This is an extremely powerful function
that interacts with the COM subsystem to do the following:
• Locate the server. 
• Start, load, or connect to the server. 
• Create a COM object on the server. 
• Return a pointer to an interface to the COM object. 
There are two data types important to finding and accessing
interfaces: CLSID and IID. Both of these types are Globally
Unique ID's (GUID's). GUID's are used to uniquely identify all
COM classes and interfaces.
In order to get a specific class and interface you need its
GUID. There are many ways to get a GUID. Commonly we'll get
the CLSID and IID from the header files in the server. In our
example, we've defined the GUIDs with #define statements at
the beginning of the source code simply to make them explicit
and obvious. There are also facilities to look up GUIDs using the
common name of the interface.
Four Steps to Client Connectivity
23
Additonal Information and Updates: http://www.iftech.com/dcom
The function that gives us an interface pointer is CoCre-
ateInstance.
hr = CoCreateInstance( 
CLSID_BeepObj,        // COM class id
NULL,                 // outer unknown
CLSCTX_INPROC_SERVER, // server INFO
IID_IBeepObj,         // interface id
(void**)&IBeep );     // pointer to interface
The first parameter is a GUID that uniquely specifies a COM
class that the client wants to use. This GUID is the COM class
identifier, or CLSID. Every COM class on the planet has its own
unique CLSID. COM will use this ID to automatically locate a
server that can create the requested COM object. Once the server
is connected, it will create the object.
The second parameter is a pointer to what's called the
“outer unknown”. We're not using this parameter, so we pass in
a NULL. The outer unknown will be important when we explore
the concept known as "aggregation". Aggregation allows one
interface to directly call another COM interface without the client
knowing it's happening. Aggregation and containment are two
methods used by interfaces to call other interfaces.
The third parameter defines the COM Class Context, or
CLSCTX. This parameter controls the scope of the server.
Depending on the value here, we control whether the server will
be an In-Process Server, an EXE, or on a remote computer. The
CLSCTX is a bit-mask, so you can combine several values. We're
using CLSCTX_INPROC_SERVER - the server will run on our
local computer and connect to the client as a DLL. We've chosen
an In-Process server in this example because it is the easiest to
implement.
Normally the client wouldn’t care about how the server was
implemented. 
In 
this 
case 
it 
would 
use 
the 
value
CLSCTX_SERVER, which will use either a local or in-process
server, whichever is available.
Next is the interface identifier, or IID. This is another GUID
- this time identifying the interface we're requesting. The IID we
24    Chapter 2 •
Understanding the Simplest COM Client 
request must be one supported by the COM class specified with
the CLSID. Again, the value of the IID is usually provided either
by a header file, or by looking it up using the interface name. In
our code it is defined explicitly to make it obvious.
The last parameter is a pointer to an interface. CoCreateIn-
stance() will create the requested class object and interface, and
return a pointer to the interface. This parameter is the whole rea-
son for the CoCreateInstance call. We can then use the interface
pointer to call methods on the server.
Execute a Method on the Interface.
CoCreateInstance() uses COM to create a pointer to the IBeep
interface. We can pretend the interface is a pointer to a normal
C++ class, but in reality it isn’t. Actually, the interface pointer
points to a structure called a VTABLE, which is a table of func-
tion addresses. We can use the -> operator to access the interface
pointer.
Because our example uses an In-Process server, it will load
into our process as a DLL. Regardless of the details of the inter-
face object, the whole purpose of getting this interface was to
call a method on the server.
hr = IBeep->Beep(800);
Beep() executes on the server - it will cause the computer to
beep. If we had a remote server, one which is running on
another computer, that computer would beep.
Methods of an interface usually have parameters. These
parameters must be of one of the types allowed by COM. There
are many rules that control the parameters allowed for an inter-
face. We will discuss these in detail in the section on MIDL,
which is COM’s interface definition tool.
Release the Interface
It’s an axiom of C++ programming that everything that gets allo-
cated should be de-allocated. Because we didn't create the inter-
face with new, we can’t remove it with delete. All COM
Summary
25
Additonal Information and Updates: http://www.iftech.com/dcom
interfaces have a method called Release() which disconnects the
object and deletes it. Releasing an interface is important because
it allows the server to clean up. If you create an interface with
CoCreateInstance, you'll need to call Release().
Summary
In this chapter we've looked at the simplest COM client. COM is
a client driven system. Everything is oriented to making compo-
nent objects easily available to the client. You should be
impressed at the simplicity of the client program. The four steps
defined here allow you to use a huge number of components, in
a wide range of applications.
Some of the steps, such as CoInitialize() and CoUninitial-
ize() are elementary. Some of the other steps don't make a lot of
sense at first glance. It is only important for you to understand, at
a high level, all of the things that are going on in this code. The
details will clarify themselves as we go through further exam-
ples.
Visual C++ Version 5 and 6 simplify the client program fur-
ther by using “smart pointers” and the #import directive. We’ve
presented this example in a low level C++ format to better illus-
trate the concepts. We'll discuss smart pointers and imports in
chapter 15.
In the next chapter, we'll build a simple in-process server to
manage the IBeep interface. We’ll get into the interesting details
of interfaces and activation in later chapters. See also Chapter 4
for an expansion on this example.
26    Chapter 2 •
Understanding the Simplest COM Client 
T
H
R
E
E
3
Understanding a 
Simple COM 
Server 
So far we've looked at how to use COM through a client applica-
tion. To the client, the mechanics of COM programming are
pretty simple. The client application asks the COM subsystem for
a particular component, and it is magically delivered.
There’s a lot of code required to make all this behind-the-
scenes component management work. The actual implementa-
tion of the object requires a complex choreography of system
components and standardized application modules. Even using
MFC the task is complex. Most professional developers don't
have the time to slog through this process. As soon as the COM
standard was published, it was quickly clear that it wasn't practi-
cal for developers to write this code themselves.
When you look at the actual code required to implement
COM, you realize that most of it is repetitive boilerplate. The tra-
ditional C++ approach to this type of complexity problem would
be to create a COM class library. And in fact, the MFC OLE
classes provide most of COMs features.
There are however, several reasons why MFC and OLE were
not a good choice for COM components. With the introduction
of ActiveX and Microsoft's Internet strategy, it was important for
COM objects to be very compact and fast. ActiveX requires that
COM objects be copied across the network fairly quickly. If
28    Chapter 3 •
Understanding a Simple COM Server 
you’ve worked much with MFC you'll know it is anything but
compact (especially when statically linked). It just isn’t practical
to transmit huge MFC objects across a network.
Perhaps the biggest problem with the MFC/OLE approach to
COM components is the complexity. OLE programming is diffi-
cult, and most programmers never get very far with it. The huge
number of books about OLE is a testament to the fact that it is
hard to use.
Because of the pain associated with OLE development,
Microsoft created a new tool called ATL (Active Template
Library). For COM programming, ATL is definitely the most prac-
tical tool to use at the present time. In fact, using the ATL wizard
makes writing COM servers quite easy if you don't have any
interest in looking under the hood.
The examples here are built around ATL and the ATL Appli-
cation Wizard. This chapter describes how to build an ATL-based
server and gives a summary of the code that the wizard gener-
ates.
Where's the Code?
One of the things that takes some getting used to when writing
ATL servers is that they don't look like traditional programs. A
COM server written by ATL is really a collaboration between sev-
eral disparate components:
• Your application 
• The COM subsystem 
• ATL template classes 
• “IDL” code and MIDL Generated “C” headers and pro-
grams 
• The system registry 
It can be difficult to look at an ATL-based COM application
and see it as a unified whole. Even when you know what it’s
doing, there are still big chunks of the application that you can’t
see. Most of the real server logic is hidden deep within the ATL
header files. You won’t find a single main() function that man-
Building a DLL-Based (In-Process) COM Server
29
Additonal Information and Updates: http://www.iftech.com/dcom
ages and controls the server. What you will find is a thin shell
that makes calls to standard ATL objects.
In the following section we’re going to put together all the
pieces required to get the server running. First we will create the
server using the ATL COM AppWizard. The second step will be
to add a COM object and a Method. We’ll write an In-Process
server because it’s one of the simpler COM servers to implement.
Our apartment-threaded in-process server also avoids having to
build a proxy and stub object.
Building a DLL-Based (In-Process) COM Server
An In-Process server is a COM library that gets loaded into your
program at run-time. In other words, it’s a COM object in a
Dynamic Link Library (DLL). A DLL isn't really a server in the tra-
ditional sense, because it loads directly into the client's address
space. If you're familiar with DLLs, you already know a lot about
how the COM object gets loaded and mapped into the calling
program.
Normally a DLL is loaded when LoadLibrary() is called. In
COM, you never explicitly call LoadLibrary(). Everything starts
automatically when the client program calls CoCreateInstance().
One of the parameters to CoCreateInstance is the GUID of the
COM class you want. When the server gets created at compile
time, it registers all the COM objects it supports. When the client
needs the object, COM locates the server DLL and automatically
loads it. Once loaded, the DLL has a class factory to create the
COM object.
CoCreateInstance() returns a pointer to the COM object,
which is in turn used to call a method (in the example described
here, the method is called Beep().) A nice feature of COM is that
the DLL can be automatically unloaded when it's not needed.
After the object is released and CoUninitialize() is called, FreeLi-
brary() will be called to unload the server DLL.
If you didn't follow all that, it's easier than it sounds. You
don't have to know anything about DLL's to use COM. All you
have to do is call CoCreateInstance(). One of the advatages of
30    Chapter 3 •
Understanding a Simple COM Server 
COM is that it hides these details so you don't have to worry
about this type of issue.
There are advantages and disadvantages to In-process COM
servers. If dynamic linking is an important part of your system
design, you'll find that COM offers an excellent way to manage
DLL's. Some experienced programmers write all their DLL's as In-
process COM servers. COM handles all the chores involved with
the loading, unloading, and exporting DLL functions and COM
function calls have very little additional overhead.
Our main reason for selecting an In-process server is some-
what more prosaic: It makes the example simpler. We won't have
to worry about starting remote servers (EXE or service) because
our server is automatically loaded when needed. We also avoid
building a proxy/stub DLL to do the marshaling.
Unfortunately, because the In-Process server is so tightly
bound to our client, a number of the important "distributed"
aspects of COM are not going to be exposed. A DLL server
shares memory with it's client, whereas a distributed server
would be much more removed from the client. The process of
passing data between a distributed client and server is called
marshaling. Marshaling imposes important limitations on COM's
capabilities that we won't have to worry about with an apart-
ment-threaded in-proc server. We will expose and study these
details in later chapters.
Creating the Server Using the ATL Wizard
We're going to create a very simple COM server in this example
in order to eliminate clutter and help you to understand the fun-
damental principles behind COM very quickly. The server will
only have one method - Beep(). All that this method will do is
sound a single beep; not a very useful method. What we're really
going to accomplish is to set up all the parts of a working server.
Once the infrastructure is in place, adding methods to do some-
thing useful will be extremely straightforward.
The ATL AppWizard is an easy way to quickly generate a
working COM server. The Wizard will allow us to select all the
Creating the Server Using the ATL Wizard
31
Additonal Information and Updates: http://www.iftech.com/dcom
basic options, and will generate most of the code we need.
Below is the step-by step process for creating the server. In this
process we will call the server BeepServer. All COM servers must
have at least one interface, and our interface will be called IBee-
pObj. You can name your COM interfaces almost anything you
want, but you should always prefix them with an 'I' if you want
to follow standard naming conventions.
NOTE: If you find the difference between a COM "Object" ,
"Class", and "Interface" confusing at this point, you're not alone.
The terminology can be uncomfortable initially, especially for
C++ programmers. The feelings of confusion will subside as you
work through examples. The word "coclass" for COM class is
used in most Microsoft documentation to distinguish a COM
class from a normal C++ class.
Here are the steps for creating a new COM server with the
ATL Wizard using Visual C++ version 6 (it looks nearly identical
in version 5 as well):
1. First, create a new "ATL COM AppWizard" project. Select
File/New from the main menu. 
2. Select the "Projects" tab of the "New" dialog. Choose "ATL
COM AppWizard" from the list of project types. Select the
following options and press OK. 
a. Project Name: BeepServer 
b. Create New Workspace 
c. Location: Your working directory.
3. At the first AppWizard dialog we'll create a DLL based (In-
process) server. Enter the following settings : 
a. Dynamic Link Library 
b. Don't allow merging proxy/stub code 
c. Don't support MFC 
4. Press Finish. 
32    Chapter 3 •
Understanding a Simple COM Server 
Figure 3–1
Accessing the ATL Wizard
Figure 3–2
Creating a DLL server
Adding a COM Object
33
Additonal Information and Updates: http://www.iftech.com/dcom
The AppWizard creates a project with all the necessary files
for a DLL-based COM server. Although this server will compile
and run, it's just an empty shell. For it to be useful it will need a
COM interface and the class to support the interface. We'll also
have to write the methods in the interface.
Adding a COM Object
Now we'll proceed with the definition of the COM object, the
interface, and the methods. This class is named BeepObj and has
an interface called IBeepObj:
1. Look at the "Class View" tab. Initially it only has a single
item in the list. Right click on "BeepServer Classes" item. 
2. Select "New ATL ObjectÖ". This step can also be done from
the main menu. Select the "New ATL Object" on the Insert
menu item. 
3. At the Object Wizard dialog select "Objects". Choose "Simple
Object" and press Next. 
4. Choose the Names tab. Enter short name for the object: Bee-
pObj. All the other selections are filled in automatically with
standard names.
5. Press the "Attributes" tab and select: Apartment Threading,
Custom Interface, No Aggregation. 
6. Press OK. This will create the COM Object. 
34    Chapter 3 •
Understanding a Simple COM Server 
Figure 3–3
Adding a new object to the server
Figure 3–4
Adding a new object
Adding a COM Object
35
Additonal Information and Updates: http://www.iftech.com/dcom
Figure 3–5
Specifying the object naming
Figure 3–6
Specifying the threading model and other parameters
36    Chapter 3 •
Understanding a Simple COM Server 
Adding a Method to the Server