    Service simplequeue (anchore-quickstart, http://engine-simpleq:
    8228): up
    Service policy_engine (anchore-quickstart, http://engine-policy-engine:8228): up
    Service catalog (anchore-quickstart, http://engine-catalog:
    8228): up
    Service apiext (anchore-quickstart, http://engine-api:8228): 
    up
    Engine DB Version: 0.0.11
    Engine Code Version: 0.5.1
    ```
    注意
    `Engine DB Version`和`Engine Code Version`可能因系统而异。
11.  Use the `anchore-cli system feeds list` command to see all of the vulnerabilities in your database:
    ```
    anchore-cli system feeds list
    ```
    可以想象，由于向数据库提供了大量漏洞，以下输出已经减少:
    ```
    Feed                Group          LastSync
        RecordCount
    nvdv2               nvdv2:cves     None
        0
    vulnerabilities     alpine:3\.      2019-10-24T03:47:28.504381
        1485
    vulnerabilities     alpine:3.3     2019-10-24T03:47:36.658242
        457
    vulnerabilities     alpine:3.4     2019-10-24T03:47:51.594635
        681
    vulnerabilities     alpine:3.5     2019-10-24T03:48:03.442695
        875
    vulnerabilities     alpine:3.6     2019-10-24T03:48:19.384824
        1051
    vulnerabilities     alpine:3.7     2019-10-24T03:48:36.626534
        1253
    vulnerabilities     alpine:3.8     None
        0
    vulnerabilities     alpine:3.9     None
        0
    vulnerabilities     amzn:2         None
        0
    ```
    在前面的输出中，您会注意到一些漏洞提要显示`None`。这是因为数据库是最近才建立的，还没有更新所有的漏洞。继续显示提要列表，就像您在上一步中所做的那样，一旦所有条目都在`LastSync`列中显示了日期，您就可以开始扫描映像了。
12.  Once the feed has fully updated, add an image with the `anchore-cli image add` command. Remember to use the full path, including the image repository tags, as Anchore will use the image located on Docker Hub:
    ```
    anchore-cli image add vincesestodocker/security-app:scan1
    ```
    该命令将映像添加到 Anchore 数据库中，准备对其进行扫描:
    ```
    Image Digest: sha256:7fab55c47c91d7e56f093314ff463b7f97968ee0
    f80f5ee927430
    fc39f525f66
    Parent Digest: sha256:7fab55c47c91d7e56f093314ff463b7f97968ee
    0f80f5ee927430fc39f525f66
    Analysis Status: not_analyzed
    Image Type: docker
    Analyzed At: None
    Image ID: 8718859775e5d5057dd7a15d8236a1e983a9748b16443c99f8a
    40a39a1e7e7e5
    Dockerfile Mode: None
    Distro: None
    Distro Version: None
    Size: None
    Architecture: None
    Layer Count: None
    Full Tag: docker.io/vincesestodocker/security-app:scan1
    Tag Detected At: 2019-10-24T03:51:18Z 
    ```
    当您添加映像时，您会注意到我们已经突出显示输出正在显示`not_analyzed`。这将排队进行分析和较小的映像，这将是一个快速的过程。
13.  Monitor your image to see whether it has been analyzed using the `anchore-cli image list` command:
    ```
    anchore-cli image list
    ```
    这将提供我们当前添加的所有映像的列表，并向您提供它们是否已被分析的状态:
    ```
    Full Tag               Image Digest            Analysis Status
    security-app:scan1     sha256:a1bd1f6fec31…    analyzed
    ```
14.  Now that the image is added and analyzed, you can start to look through the image and see what is included as part of the base image and what applications are installed, including the version and license number. Use the `image content os` command for `anchore-cli`. You can also use other content types, including `file` for all the files on the image, `npm` for all the Node.js modules, `gem` for the Ruby gems, `java` for the Java archives, and `python` for the Python artifacts:
    ```
    anchore-cli image content vincesestodocker/security-app:scan1 os
    ```
    该命令将返回如下输出:
    ```
    Package                   Version        License
    alpine-baselayout         3.1.2          GPL-2.0-only
    alpine-keys               2.1            MIT
    apk-tools                 2.10.4         GPL2 
    busybox                   1.30.1         GPL-2.0
    ca-certificates           20190108       MPL-2.0 GPL-2.0-or-later
    ca-certificates-cacert    20190108       MPL-2.0 GPL-2.0-or-later
    curl                      7.66.0         MIT
    libc-utils                0.7.1          BSD
    libcrypto1.1              1.1.1c         OpenSSL
    libcurl                   7.66.0         MIT
    libssl1.1                 1.1.1c         OpenSSL
    libtls-standalone         2.9.1          ISC
    musl                      1.1.22         MIT
    musl-utils                1.1.22         MIT BSD GPL2+
    nghttp2-libs              1.39.2         MIT
    scanelf                   1.2.3          GPL-2.0
    ssl_client                1.30.1         GPL-2.0
    wget                      1.20.3         GPL-3.0-or-later
    zlib                      1.2.11         zlib
    ```
15.  使用`anchore-cli image vuln`命令，并包含您想要扫描的映像，以检查漏洞。如果不存在漏洞，您应该看不到任何输出。我们在下面的命令行中使用了`all`来提供关于操作系统和非操作系统漏洞的报告。我们也可以将`os`用于操作系统特定的漏洞，将`non-os`用于语言相关的漏洞:
    ```
    anchore-cli image vuln vincesestodocker/security-app:scan1 all
    ```
16.  对映像进行评估检查，为我们的映像扫描提供`pass`或`fail`结果。使用`anchore-cli evaluate check`命令查看映像是否可以安全使用:
    ```
    anchore-cli evaluate check vincesestodocker/security-app:scan1
    From the output of the above command, it looks like our image 
    is safe with a pass result.Image Digest: sha256:7fab55c47c91d7e56f093314ff463b7f97968ee0f80f5ee927430fc
    39f525f66
    Full Tag: docker.io/vincesestodocker/security-app:scan1
    Status: pass
    Last Eval: 2019-10-24T03:54:40Z
    Policy ID: 2c53a13c-1765-11e8-82ef-23527761d060
    ```
前面的所有练习都在很大程度上确定了我们的映像是否有任何漏洞以及是否可以安全使用。下一节将向您展示 Anchore 的替代产品，尽管它有付费组件，但通过仅访问免费版本，它仍然提供大量功能。
# 利用 Snyk 进行 SaaS 安全扫描
Snyk 是一个在线 SaaS 应用，提供了一个易于使用的界面，允许您扫描您的 Docker 映像的漏洞。尽管 Snyk 是一个付费应用，但它确实为用户提供了一个具有大量功能的免费层。它为开源项目提供了无限的测试，并允许 GitHub 和 GitLab 集成，对开源项目进行补救和持续监控。您只能进行允许的容器漏洞测试。
下面的练习将使用 web 界面进行，该界面提供了如何注册帐户的指南，然后添加要扫描安全漏洞的容器。
## 练习 11.04:设置 Snyk 安全扫描
在本练习中，您将使用网络浏览器与 Snyk 合作，开始对我们的`security-app`映像实现安全扫描:
1.  如果您以前没有使用过 Snyk 或没有帐户，请使用 Snyk 创建帐户。除非您想将您的帐户升级到付费版本，否则您不需要提供任何信用卡详细信息，但是在本练习中，您将只需要免费选项。所以，登录 Snyk 或者在[https://app.snyk.io/signup](https://app.snyk.io/signup)创建账户。
2.  You will be presented with a web page as in the following screenshot. Choose the method by which you wish to create your account and follow the prompts to continue:
    ![Figure 11.1: Creating an account with Snyk ](img/B15021_11_01.jpg)
    图 11.1:使用 Snyk 创建帐户
3.  Once logged in, you will be presented with a page similar to the one in *Figure 11.2*, asking `Where is the code you want to test?`. Snyk not only scans Docker images but also scans your code for vulnerabilities. You already have your `security-app` image in Docker Hub, so click on the `Docker Hub` button to start the process:
    ![Figure 11.2: Starting security scans with Snyk ](img/B15021_11_02.jpg)
    图 11.2:使用 Snyk 启动安全扫描
    注意
    如果您没有看到前面的网页，您可以转到下面的网址添加一个新的存储库。请记住将以下网址中的``更改为您创建 Snyk 帐户时分配给您的帐户:
    `https://app.snyk.io/org//add`。
4.  Authenticate with Docker Hub to allow it to view your available repositories. When presented with the following page, enter your Docker Hub details and click on `Continue`:
    ![Figure 11.3: Authenticating with Docker Hub in Snyk ](img/B15021_11_03.jpg)
    图 11.3:使用 Snyk 中的 Docker 集线器进行认证
5.  Once authenticated, you will then be presented with a list of all your repositories on Docker Hub, including the tags that are stored for each repository. In this exercise, you only need to select one of your images and use the `scan1` tag created in this section. Select the `security-app` image with the `scan1` tag. Once you are happy with your selection, click on the `Add selected repositories` button in the top-right corner of the screen:
    ![Figure 11.4: Selecting your Docker Hub repositories for Snyk to scan ](img/B15021_11_04.jpg)
    图 11.4:为 Snyk 选择要扫描的 Docker Hub 存储库
6.  Snyk will run a scan over your image as soon as you have added it, and depending on the size of the image, this should complete in a matter of seconds. Click on the `Projects` tab at the top of the screen to see the results of your scan, and click and select the repository and tag you would like to view:
    ![Figure 11.5: Viewing your project reports in Snyk ](img/B15021_11_05.jpg)
图 11.5:在 Snyk 中查看项目报告
单击存储库名称后，您将看到一份映像扫描报告，其中概述了映像的详细信息、正在使用的基本映像以及扫描过程中是否发现任何高、中或低问题:
![Figure 11.6: Image scan report page in Snyk ](img/B15021_11_06.jpg)
图 11.6:Snyk 中的映像扫描报告页面
Snyk 会每天扫描你的图片，如果发现问题会提醒你。除非发现任何漏洞，否则将通过电子邮件向您发送每周报告。如果有，我们会尽快通知你。
有了 Snyk，你可以用一个简单易用的界面扫描你的映像中的漏洞。作为一个基于 SaaS 网络的应用，这也意味着不需要管理您的应用和服务器进行安全扫描。安全扫描我们的映像一节到此结束，我们现在将继续使用映像的安全配置文件来帮助阻止攻击者利用他们可能访问的任何映像。
# 使用容器安全配置文件
安全配置文件允许您利用 Linux 中现有的安全工具，并在 Docker 映像中实现它们。在接下来的章节中，我们将同时介绍 AppArmor 和`seccomp`。这些方法可以减少进程在 Docker 环境中运行时获得的访问量。它们都很容易使用，你会发现你很可能已经在你的映像中使用它们了。我们将分别研究它们，但是请注意，面向 Linux 的 AppArmor 和 Security Computing 确实与其功能重叠。目前，您需要记住的是，AppArmor 阻止应用访问它们不应该访问的文件，而 Linux 的安全计算将有助于阻止任何 Linux 内核漏洞被利用。
默认情况下，尤其是如果您运行的是 Docker 的最新版本，您可能已经同时运行了这两个版本。您可以通过运行`docker info`命令并查找`Security Options`来验证这一点。以下是显示这两个功能均可用的系统输出:
```
docker info
Security Options:
  apparmor
  seccomp
   Profile: default
```
以下部分将涵盖面向 Linux 的 AppArmor 和安全计算，并让您清楚地了解如何在您的系统上实现和使用这两者。
## 在您的映像上实现设备安全配置文件
AppArmor 代表应用装甲，是一个 Linux 安全模块。AppArmor 的目标是保护操作系统免受安全威胁，它是作为 Docker 1 . 13 . 0 版本的一部分实现的。它允许用户将一个安全概要文件加载到他们正在运行的容器中，并且可以被创建来锁定容器上服务可用的进程。Docker 包含的默认值提供了适度的保护，同时仍然允许访问大量应用。
为了帮助用户编写安全配置文件，AppArmor 提供了一个**投诉模式**，它允许几乎任何任务在不受限制的情况下运行，但是任何违规都将作为事件记录到审核日志中。它还有一个**无约束模式**，与投诉模式相同，但不会记录任何事件。
注意
有关 apparemor 的更多详细信息，包括文档，请使用以下链接，该链接将带您进入 GitLab 上的 apparemor 主页:
https://gitlab . com/apparmor/apparmor/wikis/home。
AppArmor 还附带了一组命令来帮助用户管理应用，包括编译策略和将策略加载到内核中。默认配置文件对新用户来说可能有点混乱。您需要记住的主要规则是，拒绝规则优先于允许和所有者规则，这意味着如果允许规则和所有者规则都在同一个应用上，它们将被后续的拒绝规则覆盖。文件操作更加清晰，其中`'r'`为读取，`'w'`为写入，`'k'`为锁定，`'l'`为链接，`'x'`为执行。