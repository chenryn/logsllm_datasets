# Fuzzingbook学习指南Lv2
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在上篇文章中我们实现了最简单的Fuzzing工具，这次我们就在之前的基础上，实现第一次“升级”，同时也给大家分享一些我个人的经验，让大家能够定制自己的fuzzing工具。
文中有一些概念是笔者自己提出的，都给出了大家能理解的解释，但是不够正式，大家使用的时候要注意一下，采取更正式的用词。
## 代码覆盖率
相信看这个系列文章的朋友们大多都应该有使用fuzzing工具的经验，fuzzing中最有名的工具之一 American Fuzzy Lop
fuzzing（也就是我们常说的AFl
fuzzing），其核心思想就是尽可能提高代码覆盖率。所谓代码覆盖率就是你走过的代码和所有代码的比值。比如下面的例子：
    if a == 10:
        print(a)
    else : 
        print(b)
假设a是我们的输入，当我们的fuzzing输入了11时，那么我们走过的代码就是第一行、第三行、第四行，代码覆盖率是3/4，如果fuzzing进行了11、10两次输入，那么我们的覆盖率就到了100%。我们的代码覆盖率越高，就说明我们对程序的测试越全面。
当然，我们上面举的例子是在已知源代码的情况下进行，我们一般叫这样的测试为white
box，这种测试往往聚焦于对程序进行全面完整的测试，比如我们上一篇文章中替同学修改代码，就是完整甚至带有大量冗余的去思考代码的问题；除了white
box，实际上还有black
box，也就是没有源代码，直接扔给你一个程序去进行测试，这样的难度一下子就高了，目前对于黑盒的fuzzing一般有两种思路：一种还是去想办法提高代码覆盖率；另外一种是通过各种手段去进行边缘化测试。
实际上AFL
fuzzing对白盒、黑盒测试都是采取提高代码覆盖率的方式来进行fuzzing，但是两种实现方式大相径庭，前者我们可以直接在源代码使用插桩技术，简单说就是在编译过程中给源代码打个标，只要检查这个标有没有动过，即可知道程序是否运行了该段代码；而对于黑盒测试，AFL只能使用qemu模块对二进制程序进行插桩，这种插桩不再是源代码级别的，粒度更小，而且由于是“虚拟化”技术，开销和技术难度要比前者高得多。
考虑到难度因素，我们就先来看看white box的情况，后者先按下不表。
## 追踪代码
我们先来看一段fuzzingbook给的例子，这次我们继续邀请舍友Z当作嘉宾，假设这是他的面试程序，我们的任务还是对他的程序进行fuzzing测试
    def cgi_decode(s):
        hex_values = {
            '0': 0, '1': 1, '2': 2, '3': 3, '4': 4,
            '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
            'a': 10, 'b': 11, 'c': 12, 'd': 13, 'e': 14, 'f': 15,
            'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15,
        }
        t = ""
        i = 0
        while i < len(s):
            c = s[i]
            if c == '+':
                t += ' '
            elif c == '%':
                digit_high, digit_low = s[i + 1], s[i + 2]
                i += 2
                if digit_high in hex_values and digit_low in hex_values:
                    v = hex_values[digit_high] * 16 + hex_values[digit_low]
                    t += chr(v)
                else:
                    raise ValueError("Invalid encoding")
            else:
                t += c
            i += 1
        return t
CGI其实是web相关的知识，程序功能是模拟对url的解码功能，主要流程是：
  * 循环检查输入的字符串的每一个字符 
    * 如果是+号，就替换成空格
    * 如果是%号，就将其和后两位视为url code，也就是我们在地址栏常见的%xx格式，并转变为对应的字符
    * 如果不是上面两种情况，就直接保持原样
  * 最终返回新的字符串
接下来我们需要编写我们追踪代码的函数了，我们需要python的sys.settrace()函数来实现，这是python的插桩常用技术。
    import sys
    coverage = []
    func = set()
    def traceit(frame, event, arg):
        if event == "line":
            global coverage
            function_name = frame.f_code.co_name
            lineno = frame.f_lineno
            coverage.append(lineno)
            func.add(function_name)
        return traceit
我们需要自己编写一个traceit函数作为参数传入sys.settrace()，它就会在执行的过程中，以行为单位调用我们的traceit函数，它要指定三个参数，三个参数会分别保存着当前执行代码的关键信息。
  * 其中frame是我们要用到的最关键的变量，它保存着对应的代码行号、对应代码所在的函数名、函数当前的局部变量、参数等等
  * event即事件变量，表明当前所进行的操作，如果是普通的代码就是line，如果是函数调用就是call
  * arg表明参数
    sys.settrace(traceit) 
    cgi_decode(s)
    sys.settrace(None)  
    print(coverage)
调用过程如上，我们打印出对应的coverage来看看
    [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 21, 30, 31, 17, 18, 19, 20, 31, 17, 18, 19, 21, 30, 31, 17, 32]
可以看到我们确实是拿到了调用的代码行，我们只需要拿它去除以我们总的代码数，即可得到代码覆盖率，但因为实际上还要进行一步除法，有些麻烦，我们也经常用代码覆盖量的概念，实际上就是我们输出的东西，即执行过的代码的数量，同样是越高越好，之后文章中我们会使用代码覆盖量的概念。
当然，我们还可以包装一下这个函数，让他更好用一些。相信大家都知道python的魔法函数，我们先将上述的代码包装为class，当我们去调用如下的代码时：
    with Coverage() as cov_plus:
        cgi_decode("a+b")
在对象在被创建时，会调用`__init__`函数来初始化对象的一些设置，而执行的最开始会调用`__enter__`函数作为入口，结束时则会调用`__exit__`函数进退出的收尾工作。所以我们可以在class中定义如下函数来实现简单的追踪代码：
        def __init__(self):
            self._trace = []
        def __enter__(self):
            sys.settrace(self.traceit)
            return self
        def __exit__(self, exc_type, exc_value, tb):
            sys.settrace(None)
        def coverage(self):
            return set(self.trace())
好了，准备工作都完成了，让我们来测试一下我们的fuzzer生成的字符串能达到怎么样的代码覆盖情况吧
    population = []