# Paranoid File System: An Encrypted Global File System

## 4. Implementation
### 4.1 Bypass System
We use the Bypass system [20] to implement the Paranoid global encrypted file system. The Bypass system allows us to modify the behavior of a selected set of system calls by replacing each selected system call with custom code. This system traps system calls and executes the supplied code in user space, enabling modifications or enhancements to the operating system without altering the kernel or system libraries.

### 4.2 Client Agent and I/O Library
A modified version of the C input/output (I/O) library, implemented in the client agent, insulates applications from the underlying details of the Paranoid file system. The modified I/O library supports transparent access to remote cryptographic files. Relevant I/O system calls, such as `open` and `close`, are intercepted. The client agent then executes code to fetch remote files, communicate with the PSP (Paranoid Server Process), and perform cryptographic operations on the files. For example, when an application issues the `open` system call, the remote Paranoid file is fetched and its content is decrypted. Once the file's integrity is verified, control is returned to the running application, and a local decrypted copy of the file is created. The descriptor of this local copy is passed to the application instead of the encrypted file’s descriptor.

## 4.3 Global Files
Paranoid makes it as easy to use a remote encrypted file as it is to use a local unencrypted file. Paranoid file names extend the usual UNIX file naming convention. A Paranoid file name is a string with substring fields separated by `/`. The first substring is the keyword `/paranoid`, and the second is `[userID@]host[:port]`, where `userID` is an optional user identity specifying the owner of the file, `host` is the hostname or IP address, and `port` is an optional port number where the Paranoid server agent is running. The default user identity and port number are specified in a configuration file `.paranoidrc` in the user’s home directory. For example, to edit a Paranoid file with `vi`, a user could type (in an interactive shell): `vi /paranoid/abc.cs.xyz.edu/file.txt`.

The client agent opens a TCP socket connection to the file server process running on the group owner’s machine. If no user identity or port is specified, the defaults are read from the configuration file. A simple handshake protocol is used to send the remote user credentials, request the file, and transfer the file to the client machine. Note that requests and files are sent in the clear since the file contents are already encrypted, users are implicitly authenticated, and responses are signed.

## 5. Performance
The overhead of trapping a system call using Bypass is between 9 to 28 microseconds [20]. Paranoid incurs a significant cost for encrypting, decrypting, signing, and verifying files. The use of cryptographic operations in the critical path of file operations can create a significant adverse impact on overall performance. However, this overhead is acceptable in the context in which Paranoid is used, as file operations are dominated by the latency introduced by network transfers. Below, we provide measurements of the time it takes to open and close Paranoid files to illustrate the effect on performance.

Measurements were made using two 300 MHz Intel Pentium II machines connected through the network. The benchmark program invokes the `open` and `close` system calls multiple times over a range of file sizes. The tables show the mean results over 10 runs each for five file sizes between 1MB and 64MB.

### Table 3: Latency Observed (in seconds) to Open and Close a Paranoid File on a Local Host

| File Size | Verification | Decryption | Encryption | Transfer |
|----------|--------------|------------|------------|----------|
| 1MB      | 0.41         | 0.65       | 2.56       | 0.26     |
| 4MB      | 1.2          | 2.47       | 4.32       | 0.8      |
| 8MB      | 2.09         | 4.95       | 6.69       | 1.51     |
| 16MB     | 3.97         | 10.08      | 11.41      | 2.97     |
| 64MB     | 16.09        | 41.42      | 43.33      | 12.93    |

### Table 4: Latency Observed (in seconds) to Open and Close a Paranoid File on a Remote Host

| File Size | Transfer (S→C) | Verification | Decryption | Encryption | Transfer (C→S) |
|----------|-----------------|--------------|------------|------------|-----------------|
| 1MB      | 1.64            | 0.24         | 0.6        | 2.56       | 0.4             |
| 4MB      | 5.59            | 0.94         | 2.38       | 4.33       | 1.54            |
| 8MB      | 11.34           | 1.77         | 4.78       | 6.74       | 3.09            |
| 16MB     | 21.95           | 3.55         | 9.7        | 11.53      | 6.28            |
| 64MB     | 89.86           | 15.34        | 42.25      | 44.97      | 25.42           |

The first transfer time includes the time to effect the transform key on the server, making it much greater than the second transfer time, which occurs when the file is returned to the server after being closed.

## 6. Related Work
Several previous projects have proposed the use of encryption to secure data stored in files. The Cryptographic File System (CFS) [1, 2], created at AT&T Bell Laboratories, was one of the early realizations of such a scheme. However, CFS was designed as a local file system, and the only way a file could be shared was by explicitly distributing file keys to other users. CFS used symmetric keys for all protection, leaving them unprotected in memory while in use, making the system vulnerable if an attacker gains access to the system. The use of a public key scheme like Paranoid reduces this exposure. Additionally, the granularity for file accesses in CFS is per directory, whereas Paranoid can provide per-file read or write access and per-directory create permissions.

The Transparent Cryptographic File System [3] and Cryptfs [21] are similar to CFS but move the functionality to kernel space for performance and ease of use. These systems, along with TCFS and [8], share the same weakness as CFS, with symmetric keys left unprotected. This can only be resolved through the use of a public key cipher in the protocol.

Network of Attached Secure Disks (NASD) [7] and Secure Network Attached Disks (SNAD) [4] store data remotely and operate at the block level. Data is unprotected on the server in NASD, with data servers cooperating with a single group server for access control, making it a central point of failure. SNAD uses certificates for authentication but cannot provide end-to-end security semantics like Paranoid.

The Self-certifying File System (SFS) [11] from MIT addressed the problem of mutually authenticating servers and users to prevent server spoofing. SFS-Read Only [6] extended SFS to securely share read-only data across the Internet.

Cepheus [5] focuses on the separation of storage and group server functionality, using session keys to protect communication. The storage server does not need to be aware of access control operations, which are handled by the group server. A shortcoming of Cepheus is that group members are given the private key of the group, allowing them to add new users without revealing who effected the delegation. In contrast, Paranoid’s transform keys prevent a group member from granting their group access privileges to an outsider without revealing their own private key.

Plutus [10] uses a client-based key distribution scheme, focusing on using file groups to reduce the number of keys exchanged between users. Plutus, from HP Labs, provides group sharing by explicitly sharing the secret with all group users, suffering from the same problems as Cepheus.

[16] compares several related cryptographic file systems.

The Encrypting File System of Windows 2000 [12] uses symmetric keys to encrypt files, which are then encrypted with a public key cipher for rights management. Since they are stored on the host rather than with a PSP, they are exposed in the event of a system compromise. Paranoid’s transform keys extend the scheme to enable cryptographic group access control.

The Secure File System, developed at the University of Minnesota [9], uses a protocol similar to Paranoid. However, access control is arbitrated by a group server rather than the end user, lacking the end-to-end security guarantees of Paranoid. In the event of a security compromise, only the currently active files are at risk in Paranoid, whereas the Secure File System scheme cannot prevent the attacker from accessing all remaining files managed by the group server.

The Trusted Computing Platform Alliance [19] aims to build a trusted computing environment on top of trusted hardware. The IBM 4758 Cryptographic Co-processor [18] is a high-security, programmable PCI board that can provide data and cryptographic processing to implement TCPA functionality. It contains tamper detection sensors, circuitry for cryptographic operations, a microprocessor, memory, and a random number generator. Its high cost and weak processing power have hampered widespread adoption. Palladium [13] provides lower assurance security but is commercially feasible for commodity desktop systems. Paranoid performs privileged tasks on the PSP, with data decrypted into the client’s volatile memory and assumed to be secure if stored there temporarily. The PSP’s functionality could be implemented using the IBM 4758 or Palladium.

## 7. Conclusions
This paper presents the Paranoid file system, an encrypted global file system that implements peer-to-peer transparent file sharing with UNIX-like access controls. Each user can define access groups and grant group access rights to peers outside their protection domains without administrative intervention. A novel public key transformation scheme facilitates low-cost revocation of access rights. Performance measurements show that the implementation overhead for the encrypted global file system is low enough to make it practical. While the implementation described is Linux-specific, the Paranoid system could easily be ported to other operating systems by using dynamically loaded libraries that redefine file I/O. All applications that use dynamic linking would then be able to use the Paranoid file system. Implementing Paranoid using the Trusted Computing Platform (for secure management of cryptographic keys) can further reduce system vulnerability.

## References
[1] M. Blaze. A cryptographic file system for Unix. Proceedings of the First ACM Conference on Computer and Communications Security, 1993.
[2] M. Blaze. Key management in an encrypting file system. Proceedings of the USENIX Summer Technical Conference, 1994.
[3] G. Cattaneo, L. Catuogno, A. D. Sorbo, and P. Persiano. The design and implementation of a transparent cryptographic file system for Unix. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference, 2001.
[4] W. Freeman and E. Miller. Design for a decentralized security system for network-attached storage. Proceedings of the 17th IEEE Symposium on Mass Storage Systems and Technologies, 2001.
[5] K. Fu. Group sharing and random access in cryptographic storage file systems. Master’s thesis, MIT, 1999.
[6] K. Fu, F. Kaashoek, and D. Mazieres. Fast and secure distributed read-only file system. Proceedings of the 4th USENIX Symposium on Operating Systems Design and Implementation, 2000.
[7] G. A. Gibson, D. F. Nagle, W. C. II, N. Lanza, P. Mazaitis, M. Unangst, and J. Zelenka. NASD scalable storage systems. Proceedings of USENIX Extreme Linux Workshop, 1999.
[8] P. Gutmann. Secure file system, 1996.
[9] J. Hughes and C. Feist. Architecture of the secure file system. Proceedings of the Eighteenth IEEE Symposium on Mass Storage Systems, 2001.
[10] M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu. Plutus: Scalable secure file sharing on untrusted storage, 2003.
[11] D. Mazieres. A Self Certifying File System. PhD thesis, MIT, 2000.
[12] Microsoft Corporation. Encrypting File system in Windows 2000, 1999.
[13] Microsoft Windows Trusted Platform Technologies. Microsoft Palladium: A Business Overview, 2002.
[14] National Bureau of Standards, U.S. Department of Commerce. Data Encryption Standard, number 46-1 in FIPS, 1988.
[15] National Institute of Standards and Technology. AES Proposal: Rijndael, 2000.
[16] E. Riedel, M. Kallahalla, and R. Swaminathan. A framework for evaluating storage system security. Proceedings of the 1st Annual Conference on File and Storage Technologies, 2002.
[17] R. Rivest, A. Shamir, and L. Adleman. A method for obtaining digital signatures and public-key cryptosystems. Communications of ACM, 21, 1978.
[18] S. W. Smith and S. Weingart. Building a high-performance, programmable secure coprocessor. Computer Networks, 31(9), 1999.
[19] http://www.trustedcomputing.org/.
[20] D. Thain and M. Livny. Multiple bypass: Interposition agents for distributed computing. Journal of Cluster Computing, 2001.
[21] E. Zadok, I. Badulescu, and A. Shender. Cryptfs: A stackable vnode level encryption file system. Technical Report CUCS-021-98, Computer Science Department, Columbia University, 1998.