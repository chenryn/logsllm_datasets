N

$
X
*
X
G

6
7
+
X
N

G


+
X
$
"

6
7
?
7

Figure 4. Paranoid Group Files
We use the Bypass system [20] to implement the Para-
noid global encrypted (cid:2)le system. The Bypass system al-
lows us to modify the behavior of a selected set of system
calls by replacing each selected system call with code that
we supply. The Bypass system traps system calls and exe-
cutes the supplied code in user space. Thus one can modify
or enhance the operating system without having to modify
the kernel or system libraries themselves.
A modi(cid:2)ed version of the C input/output (I/O) library,
implemented in the client agent, insulates applications from
Paranoid (cid:2)le system’s underlying details. The modi(cid:2)ed I/O
library supports transparent access to remote cryptographic
(cid:2)les. Relevant I/O system calls, such as open and close, are
intercepted. Then the client agent executes code to fetch re-
mote (cid:2)les, communicate with the PSP, and perform crypto-
graphic operations on the (cid:2)les. For example, when the open
system call is issued by an application, the remote Paranoid
(cid:2)le is fetched and its content is decrypted. Control is then
returned to the running application once the (cid:2)le’s integrity
is veri(cid:2)ed. A local decrypted copy of the (cid:2)le is created its
descriptor is passed to the application in lieu of encrypted
(cid:2)le’s descriptor.
4.4. Global Files
Paranoid makes it as easy to use a remote encrypted (cid:2)le
as it is to use a local unencrypted (cid:2)le. Paranoid (cid:2)le names
extend the usual UNIX (cid:2)le naming convention. Like in
UNIX, a (cid:2)le name is a string with substring (cid:2)elds separated
by /. The (cid:2)rst substring is the keyword /paranoid and the
second is [userID@]host[:port] where userID is an op-
tional user identity specifying the owner of the (cid:2)le, host
is the hostname or IP address and port is an optional port
number where the Paranoid server agent is running. The
default user identity and port number are speci(cid:2)ed in a con-
(cid:2)guration (cid:2)le .paranoidrc in the user’s home directory. For
example, to edit a Paranoid (cid:2)le with vi, a user could type (in
an interactive shell): vi /paranoid/abc.cs.xyz.edu/(cid:2)le.txt.
The client agent opens a TCP socket connection to a (cid:2)le
File Size
Veri(cid:2)cation
Decryption
Encryption
Transfer
1Mb
0.41
0.65
2.56
0.26
4Mb
1.2
2.47
4.32
0.8
8Mb
2.09
4.95
6.69
1.51
16Mb
3.97
10.08
11.41
2.97
64Mb
16.09
41.42
43.33
12.93
Table 3. Latency observed (in seconds) to
open and then close a Paranoid (cid:2)le on a local
host.
File Size
Transfer (S
C)
Veri(cid:2)cation
Decryption
Encryption
Transfer (C
S)
[]\_^
1.64
0.24
0.6
2.56
0.4
`8\_^
5.59
0.94
2.38
4.33
1.54
a9\_^
11.34
1.77
4.78
6.74
3.09
[cb(\d^
21.95
3.55
9.7
11.53
6.28
b3`8\_^
89.86
15.34
42.25
44.97
25.42
Table 4. Latency observed (in seconds) to
open and then close a Paranoid (cid:2)le on a remote
host.
fJg]h
h3i
jlk!m
2
server process running on the group owner’s machine which
in this case is
. Since no user identity or port
were speci(cid:2)ed, the defaults are read from the con(cid:2)guration
(cid:2)le. A simple handshake protocol is used to send the remote
user credentials, request the (cid:2)le, and transfer the (cid:2)le to the
client machine. Note that requests and (cid:2)les are sent in the
clear since (cid:2)les’ contents are already encrypted, users are
implicitly authenticated, and responses are signed.
69n,o
5. Performance
The overhead of trapping a system call using Bypass is
between 9 to 28
s [20]. Paranoid incurs a large cost for
encrypting, decrypting, signing and verifying (cid:2)les. The use
of cryptographic operations in the critical path of (cid:2)le oper-
ations has the potential to create a signi(cid:2)cant adverse im-
pact on overall performance. However, we argue that this
overhead is acceptable in the context in which Paranoid is
to be used since the (cid:2)le operations are dominated by the
latency introduced by the network transfers. Below we pro-
vide measurements of the time it takes to open and close
Paranoid (cid:2)les to illustrate the effect it has on performance.
The measurements were made using two 300 MHz In-
tel Pentium II machines connected through the network.
The benchmark program invokes the open and close sys-
tem calls a number of times over a range of (cid:2)les of different
sizes. The tables shows the mean results over 10 runs each
for 5 (cid:2)le sizes between 1MB and 64MB. Table 5 shows
a client and server located on the same machine with the
client opening and closing a Paranoid (cid:2)le. Table 5 displays
times for a client and server located on different machines.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:35 UTC from IEEE Xplore.  Restrictions apply. 
e
e
2
2
p
The (cid:2)rst transfer time is the measurement when the (cid:2)le is
retrieved from the server by the client. This includes the
time to effect the transform key on the server. Thus this
time is much greater than the second transfer time which
occurs when the (cid:2)le is returned to the server after it has
been closed.
6. Related Work
Several previous projects have proposed the use of en-
cryption to lock data stored in (cid:2)les. The Cryptographic File
System (CFS) [1, 2], created at AT&T Bell Laboratories,
was one of the early realizations of such a scheme. How-
ever, CFS was designed as a local (cid:2)le system. Therefore,
the only way a (cid:2)le could be shared was by explicitly dis-
tributing (cid:2)le keys to other users. CFS used symmetric keys
for all protection. This meant that the keys were left unpro-
tected in memory while in use. Such a scheme is vulnerable
when an attacker gains access to the system since they then
have access to the keys as well. The use of a public key
scheme like that of Paranoid reduces this exposure. Fur-
ther, the granularity for (cid:2)le accesses in CFS is per directory.
Paranoid can be used to provide per (cid:2)le read or write access
and per directory create permissions.
The Transparent Cryptographic File System [3] is sim-
ilar to CFS but it moves the functionality from user space
to kernel space for performance and ease of use. Cryptfs
[21] uses a stackable (cid:2)le system infrastructure to provide
similar functionality. TCFS, Cryptfs and [8] have the same
weakness as CFS, which is that the symmetric keys are un-
protected. This can only be resolved through the use of a
public key cipher in the protocol.
Network of Attached Secure Disks [7] and Secure Net-
work Attached Disks (SNAD) [4] store data remotely and
operate at block level. Data is unprotected on the server in
the former with data servers cooperating with a single group
server for access control, making it a central point of fail-
ure. SNAD uses certi(cid:2)cates for authentication. However,
since access is at the block, neither system can provide the
end-to-end security semantics that Paranoid can.
The Self-certifying File System (SFS) [11], from MIT,
addressed the problem of mutually authenticating servers
users. This was done in order to prevent an adversary from
spoo(cid:2)ng the server. SFS achieves this through path names
which embed the public key. SFS-Read Only [6] extended
SFS to address the problem of securely sharing read only
data across the Internet.
Cepheus [5] focuses on the separation of storage and
group server functionality. It uses session keys to protect
communication between the server and clients. The storage
server does not need to be aware of the access control opera-
tions which are handled by the group server. A shortcoming
of the system is the fact that group members are given the
private key of the group. Paranoid’s transform keys prevent
a group member from granting his group access privileges
to an outsider without revealing his own private key. In con-
trast, possession of Cepheus’ group private key effectively
allows a user to add new users to the group without reveal-
ing who effected the delegation. By restricting access to the
group key to only the group owner, such direct leakage of
rights is not possible with Paranoid. The transform keys of
Paranoid force a user to divulge their personal private key
allowing the source of such leakage of rights to be uniquely
identi(cid:2)ed.
Plutus [10] uses a client based key distribution scheme.
It focuses on using (cid:2)le groups to reduce the number of
keys exchanged between users. Plutus, from HP Labs, pro-
vides group sharing by explicitly sharing the secret with all
the group users. This suffers from the same problems as
Cepheus described above.
[16] compares several related
cryptographic (cid:2)lesystems.
The Encrypting File System of Windows 2000 [12] uses
symmetric keys to encrypt (cid:2)les. These are then encrypted
with a public key cipher for rights management. Since they
are stored on the host, rather than with a PSP, they are ex-
posed in the event of a system compromise. Further, Para-
noid’s transform keys extend the scheme to enable crypto-
graphic group access control.
The Secure File system, developed at the University of
Minnesota [9] uses a protocol similar to Paranoid. How-
ever, a key difference is that access control is arbitrated by
a group server rather than the end user. This does not have
the end-to-end security semantics guarantees of Paranoid.
In the event that a security compromise is detected in Para-
noid, only the currently active (cid:2)les are at risk. In the Secure
File System scheme, there is no way to prevent the attacker
from accessing all the remaining (cid:2)les that the group server
is responsible for but are not currently being used, if the
system is compromised.
The Trusted Computing Platform Alliance [19] is an al-
liance of industry leaders in hardware and software. It aims
to build a trusted computing environment on top of trusted
hardware. The IBM 4758 Cryptographic Co-processor [18]
is a high security, programmable PCI board which can be
used to provide data and cryptographic processing to im-
plement TCPA functionality. It contains tamper detection
sensors, circuitry of cryptographic operations, a micropro-
cessor, memory, and a random number generator. It aims to
provide security even in the face of a physical attack on the
device. Its high cost and weak processing power has ham-
pered widespread adoption. Palladium [13] provides lower
assurance security than such a trusted co-processor but is
cheap enough to be commercially feasible for commodity
desktop systems. Paranoid performs privileged tasks on the
PSP. Data is decrypted into the client’s volatile memory and
assumed to be secure if stored there temporarily. The PSP’s
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:35 UTC from IEEE Xplore.  Restrictions apply. 
[11] D. Mazieres. A Self Certifying File System. PhD thesis, MIT,
2000.
[12] Microsoft Corporation. Encrypting File system in Windows
2000, 1999.
[13] Microsoft Windows Trusted Platform Technologies. Mi-
crosoft Palladium: A Business Overview, 2002.
[14] National Bureau of Standards, U.S. Department of Com-
merce. Data Encryption Standard, number 46-1 in FIPS,
1988.
[15] National Institute of Standards and Technology. AES Pro-
posal: Rijndael, 2000.
[16] E. Riedel, M. Kallahalla, and R. Swaminathan. A framework
for evaluating storage system security. Proceedings of the
1st Annual Conference on File and Storage Technologies,
2002.
[17] R. Rivest, A. Shamir, and L. Adleman. A method for obtain-
ing digital signature and public-key cryptosystems. Commu-
nications of ACM, 21, 1978.
[18] S. W. Smith and S. Weingart. Building a high-performance,
programmable secure coprocessor. Computer Networks,
31(9), 1999.
[19] http://www.trustedcomputing.org/.
[20] D. Thain and M. Livny. Multiple bypass:
Interposition
agents for distributed computing. Journal of Cluster Com-
puting, 2001.
[21] E. Zadok, I. Badulescu, and A. Shender. Cryptfs: A stack-
able vnode level encryption (cid:2)le system. Technical Report
CUCS-021-98, Computer Science Department, Columbia
University, 1998.
functionality could instead be implemented using the IBM
4758 or Palladium.
7. Conclusions
This paper presents the Paranoid (cid:2)le system, an en-
crypted global (cid:2)le system that implements peer-to-peer
transparent (cid:2)le sharing with UNIX-like access controls.
Each user can de(cid:2)ne access groups and grant group ac-
cess rights to peers outside their protection domains with-
out the need for any intervention by an administrator. A
novel public key transformation scheme is used to facili-
tate low cost revocation of access rights. Performance mea-
surements show that the implementation overhead for the
encrypted global (cid:2)le system is low enough to make it prac-
tical. While the implementation described is Linux speci(cid:2)c,
the Paranoid system could easily be ported to other operat-
ing systems by using dynamically loaded libraries that re-
de(cid:2)ne (cid:2)le I/O. All applications that use dynamic linking
would then be able to use the Paranoid (cid:2)le system.
Im-
plementing Paranoid using the Trusted Computing Platform
(for secure management of cryptographic keys) can further
reduce system vulnerability.
References
[1] M. Blaze. A cryptographic (cid:2)le system for unix. Procedings
of First ACM Conference on Computer and Communications
Security, 1993.
[2] M. Blaze. Key management in an encrypting (cid:2)le system.
Proceedings of the USENIX Summer Technical Conference,
1994.
[3] G. Cattaneo, L. Catuogno, A. D. Sorbo, and P. Persiano. The
design and implementation of a transparent cryptographic
(cid:2)le system for unix. In Proceedings of the FREENIX Track:
2001 USENIX Annual Technical Conference, 2001.
[4] W. Freeman and E. Miller. Design for a decentralized secu-
rity system for network-attached storage. Proceedings of the
17th IEEE Symposium on Mass Storage Systems and Tech-
nologies, 2001.
[5] K. Fu. Group sharing and random access in cryptographic
storage (cid:2)le systems. Master’s thesis, MIT, 1999.
[6] K. Fu, F. Kaashoek, and D. Mazieres. Fast and secure
distributed read-only (cid:2)le system. Proceedings of the 4th
USENIX Symposium on Operating Systems Design and Im-
plementation, 2000.
[7] G. A. Gibson, D. F. Nagle, W. C. II, N. Lanza, P. Mazaitis,
M. Unangst, and J. Zelenka. Nasd scalable storage systems.
Proceedings of USENIX Extreme Linux Workshop, 1999.
[8] P. Gutmann. Secure (cid:2)le system, 1996.
[9] J. Hughes and C. Feist. Architecture of the secure (cid:2)le sys-
tem. Proceedings of the Eighteenth IEEE Symposium on
Mass Storage Systems, 2001.
[10] M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and
K. Fu. Plutus: Scalable secure (cid:2)le sharing on untrusted stor-
age, 2003.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:35 UTC from IEEE Xplore.  Restrictions apply.