title:CMV: automatic verification of complete mediation for java virtual
machines
author:A. Prasad Sistla and
V. N. Venkatakrishnan and
Michelle Zhou and
Hilary Branske
CMV: Automatic Veriﬁcation of Complete Mediation
for Java Virtual Machines∗
A. Prasad Sistla V.N.Venkatakrishnan Michelle Zhou
Hilary Branske
Department of Computer Science
University of Illinois at Chicago
sistla, venkat, yzhou, PI:EMAIL
ABSTRACT
Runtime monitoring systems play an important role in
system security, and veriﬁcation eﬀorts that ensure that
these systems satisfy certain desirable security properties are
growing in importance. One such security property is com-
plete mediation, which requires that sensitive operations are
performed by a piece of code only after the monitoring sys-
tem authorizes these actions. In this paper, we describe a
veriﬁcation technique that is designed to check for the satis-
faction of this property directly on code from Java standard
libraries. We describe a tool CMV that implements this
technique and automatically checks shrink-wrapped Java
bytecode for the complete mediation property. Experimen-
tal results on running our tool over several thousands of
lines of bytecode from the Java libraries suggest that our
approach is scalable, and leads to a very signiﬁcant reduc-
tion in human eﬀorts required for system veriﬁcation.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Ac-
cess Controls Veriﬁcation
General Terms
Security, Veriﬁcation
Keywords
Runtime Monitoring, Complete Mediation
1.
INTRODUCTION
Systems that perform runtime monitoring for enforcing
security properties play an important role in securing com-
puting infrastructures. A wide variety of computing systems
employ runtime monitoring mechanisms: operating systems,
authorization systems, language interpreters are some key
∗This research is supported in part by NSF grants (CNS-
0716584), (CNS-0551660) and (CCF-0742686).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’08, March 18-20, Tokyo, Japan
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00.
examples. Research eﬀorts to verify the correctness of the
implementation of these systems are of paramount impor-
tance, as these eﬀorts ensure that these systems are trust-
worthy, and are therefore of signiﬁcant research interest.
The Java programming platform is an instance of a sys-
tem that employs runtime monitoring. Designed to run un-
trusted mobile programs, the Java environment has achieved
widespread acceptance due to reasons of platform indepen-
dence and security. Platform-independence was achieved by
proposing a platform independent bytecode format executed
by a platform-speciﬁc Java virtual machine (JVM). Security
was achieved providing a customizable security architecture
for executing these applications. The implementation of the
security mechanism was achieved through runtime monitor-
ing of accesses [16] to system resources such as the ﬁlesystem
and networking.
Security in the JVM is designed to handle code that may
come from diﬀerent code sources, and a customizable policy
assigns each of these code sources with a set of permissions.
The mapping of code sources to diﬀerent permission sets
allows the JVM to mediate accesses based on this policy.
The enforcement of this authorization policy cannot be left
to the underlying operating system, which has no context to
distinguish between operations done by the JVM from the
operations done by the applications running above it.
The JVM thus is responsible for mediating access to oper-
ations to various underlying resources. The operations that
implement this mediation are implemented in the Java sys-
tem libraries. Although speciﬁcs vary for each virtual ma-
chine implementation, typical virtual machines implement
the security sensitive operations that access resources as na-
tive methods (i.e., those implemented in platform dependent
code) in the corresponding library class. Mediation to such
resources is done through calls to the JVM security subsys-
tem, by calling the SecurityManager class. 1
A typical piece of code that calls the SecurityManager is:
public FileInputStream(FileDescriptor fdObj) {
SecurityManager security =
System.getSecurityManager();
if (security != null) {
security.checkRead(fdObj); }
... /* sensitive native operation */
}
1In recent versions of the JVM, the SecurityManager is a
wrapper class for another class called the AccessController,
which implements the stack inspection procedure. We do
not distinguish between the SecurityManager and the Ac-
cessController in this paper.
100
This code sequence from the FileInputStream class looks
for an instantiated SecurityManager object. If one exists, it
calls the SecurityManager, which then checks whether the
current calling sequence has privileges to perform the ﬁle
read operation.
It is worth noting that a JVM that runs on a browser al-
ways has an instantiated SecurityManager (for applets), and
therefore security checks are enabled by default. In contrast,
for a stand-alone VM, only the security subsystem is invoked
(typically through a command-line switch to the Java inter-
preter), the JVM mediates policy based access to sensitive
resources.
Whenever a native operation is invoked, the code performs
a call to the SecurityManager that employs a procedure called
stack inspection which checks whether the current code con-
text (i.e., the diﬀerent code sources in the calling sequence)
has the permission to perform the given operation.
The trustworthiness of the implementation of the stack
inspection mechanism depends on the validity of two key
properties of the implementation:
• Complete mediation The security manager is consulted
in any request from the application code that leads to
execution of a security sensitive operation.
• Stack inspection implementation correctness At run-
time, the security manager correctly implements the
stack inspection procedure by checking whether each
of the code sources in the calling sequence has the re-
quested permission.
Assurance about the latter property requires verifying the
correctness properties of the implementation of the stack
inspection. While this is theoretically feasible, fully auto-
mated veriﬁcation of this piece of stock code is limited by
challenges in current formal veriﬁcation technology. A more
practical approach is to verify models (obtained by abstrac-
tion of system behavior) of the stack inspection procedure
which are more amenable to veriﬁcation. One such eﬀort
was carried out by using a belief-logic based approach by
Wallach and Felten [30]. Since the code that implements
stack inspection is localized in a set of methods, one can
employ human assisted methods for veriﬁcation that involve
some automated components such as theorem provers (such
as [23]).
The former property, known as complete mediation [25], is
equally important in the context of assuring trustworthiness
of JVM security. More speciﬁcally, we can state the property
as follows:
Property 1.
SecurityManager
operation is never performed without
SecurityManager.
(Complete Mediation) When the
sensitive
the
consulting
is
instantiated,
a
security
The focus of this paper is on automated veriﬁcation meth-
ods that provide assurance about the satisfaction of the com-
plete mediation property by (an implementation of) a Java
virtual machine.
Although the system call interface in an operating system
presents a view that the JVM presents to Java application
programs, veriﬁcation of the complete mediation property
for the system call interface is a relatively easier task. This is
because the system call interface localizes the authorization
checks on the system call at the system call boundary, and
hardware-based support guarantees that the application can
101
transfer to the kernel only through this boundary. Since the
checks are localized (in the code at the boundary), manual
veriﬁcation eﬀorts are a possibility. In contrast, in a JVM
like implementation, each of the individual library classes
performs sensitive native operations, and guards these na-
tive operations through security checks. In a JVM, several
hundreds of methods perform these operations, and enforce-
ment is done purely at the software layers. Any manual
eﬀorts that require veriﬁcation of several thousands of lines
of code (across hundreds of methods) spanned by these op-
erations would be tedious if not impossible, and their cor-
rectness would be unreliable. Automatically guaranteeing
that the authorization operations cannot be bypassed (due
to the absence of checks) is therefore a critical problem.
There have been a number of eﬀorts to verify similar secu-
rity properties in the security community [4, 6, 27, 2]. This
is, to the best of our knowledge, the ﬁrst eﬀort in providing
large-scale veriﬁcation assurance about complete mediation
for Java library classes. In this paper, we discuss and evalu-
ate JVM implementations for UNIX-like operating systems
(such as Solaris, Linux, FreeBSD), where resource access
operations are implemented in the JVM as native methods
using POSIX-style system calls or library functions.
Verifying the complete mediation property for the JVM
is actually a problem in open system veriﬁcation. An open
system is one which exports a set of methods that is called
by the environment (i.e., client application code). The code
for the environment itself is not available, unlike a closed
system where the entire system code (i.e., libraries plus the
application code) is available. Therefore techniques that ad-
dress such a problem must assume an all powerful adversary
capable of making any sequence of calls to security sensitive
operations in the library. Speciﬁcally in case of the JVM,
the problem is about designing an adversary that is capable
of making accesses to security sensitive operations without
being mediated by a SecurityManager.
In this paper, we describe the following contributions:
• We present a scalable model checking technique for this
open system veriﬁcation problem. This technique au-
tomatically checks whether there are paths in a VM
implementation that will allow an application class
to access a sensitive resource bypassing the security
checks. The heart of our approach is based on a com-
positional checking procedure that computes method
summaries.
• We implemented our algorithm in a tool that we call
CMV (Complete Mediation Veriﬁer) to directly ana-
lyze bytecode implementation of classes.
• We present an experimental evaluation of our tool with
two highly used JVMs, the HotSpot VM (from SUN
Microsystems) and the Harmony VM (from Apache
Foundation).
This paper is organized as follows: We survey related work
in Section 2. Section 3 presents our main technical contri-
butions including illustrations of the key aspects of the prob-
lem and the formalism behind approach. Section 4 discusses
the details of the implementation of this approach. Exper-
imental results are discussed in Section 5. We conclude in
Section 6.
2. RELATED WORK
Java was built as a platform for secure execution of mobile
code, and it employs runtime monitoring [16] for authorizing
access to resources. It is to be noted that there is extensive
work on frameworks for ensuring mobile code security such
as proof-carrying code [22], model-carrying code [26] and
proof-linking [12].
Model Checking The problem of verifying complete me-
diation in a runtime monitoring system such as Java can be
expressed as a problem in model checking [7]. By express-
ing the complete mediation problem in temporal logic, one
can indeed use general purpose model checkers [4, 17, 18, 8,
5, 6] for checking this property. The advantage of general
purpose model checking tools is that they handle veriﬁca-
tion of arbitrary user-speciﬁed properties that are express-
ible in temporal logic like formalisms.
In this paper, the
techniques we have developed have been specialized to the
complete mediation property. Property speciﬁc customiza-
tion enables the technique to be scalable to a large code base
such as the Java system libraries.
The research eﬀort closest to our work is by Jensen et
[19]. Their work also gives model checking based meth-
al.
ods for checking security properties in Java code.
In this
approach, the property to be veriﬁed is speciﬁed in a tem-
poral logic interpreted over the calling stack sequence. In
their system, we can express the authorization property by
asserting that every caller on the called stack has the per-
mission to execute the current sensitive operation, thus en-
abling static veriﬁcation of permission checking for the given
set of classes. However, using their approach one cannot as-
sert that every sensitive operation is preceded by a security
check, because the security check operation returns (and is
no longer in the call stack) when the sensitive operation is
performed. Since their work requires the complete calling se-
quence for veriﬁcation of the property, they can only check
closed systems (i.e., including all application code). In con-
trast, our approach is intended for verifying open systems,
which further implies that every closed system that employs
this veriﬁed library will satisfy the complete mediation prop-
erty.
[31] and by Fraser et al. [13].
Static Analysis Several static analysis techniques have
been used in the past in large scale bug ﬁnding [9, 27, 21] and
for access rights analysis [20]. Closely related to our work are
works by Zhang et al.
[31, 13]
both use type qualiﬁers to check the authorization proper-
ties in C programs. This involves introducing type qualiﬁers
for arguments to sensitive operations, and the system checks
these properties using type qualiﬁer inference. They demon-
strated their work over similar large code bases such as the
SE-Linux and MINIX kernels. However, their approach as-
sumes that there are variables that are common to sensitive
operations and security checks, and in several instances in
Java code base this assumption does not hold. Although one
can modify the programs by introducing additional variables
(as was done in [31] to avoid limitations with ﬂow insen-
sitive type qualiﬁers), this may introduce large changes to
programs. For instance, if the security checks and sensi-
tive operations are present in diﬀerent methods, this may
require changes to the type signatures of all the methods in
the called sequence and /or duplication of code of methods.
Retroﬁtting code for authorization There have been
eﬀorts for retroﬁtting code for enforcing authorization prop-
erties, for Java [11, 10, 29] as well as for servers written in C
that perform authorization [14]. Naccio [11] is a system for
Java code that takes an abstract description of resources and
permissions and generates code that enforces this property.
Retroﬁtting code is a complimentary eﬀort, that enables the
end user to enforce authorization properties on source code.
In contrast, ours is a veriﬁcation eﬀort that checks shrink-
wrapped software code distributed by software vendors. In
fact, retroﬁtting needs to be employed only in the situations
when veriﬁcation eﬀorts like ours identify possible unsafe
methods.
3. OUR APPROACH
3.1 An illustrative example
In this section, we present a running example that we will
use to illustrate the main ideas. This example shown in Fig-
ure 1 involves three illustrative example methods M eth X,
M eth Y and M eth Z (or simply X, Y and Z) whose code
was modeled based on methods in the Java standard library.
These methods perform the (native) call openFileOrDir,
which is a sensitive operation, and another two sensitive op-
erations fsStatFile, fsStatDirectory. All the three sensitive
operations require FilePermission to read the ﬁle associated
with the pathname parameter.
The idiom for consulting the security manager is given
in the code for Y and Z. After getting the current
SecurityManager object, the code checks if
it is initial-
ized (non-null). The checkPermission method proceeds to
check whether all the callers in the calling sequence have
FilePermission to read the ﬁle associated with the path-
name, required for executing any of the sensitive operations:
openFileOrDir, fsStatFile, fsStatDirectory.
Notice that X is the only public method in the li-
brary. Since X calls Y or Z, and subsequently performs
openFileOrDir, it is important to ensure that the security
manager is consulted in every path that leads to this opera-
tion. This property holds in the path that contains the call
to Y . However, the SecurityManager is not consulted in one
of the paths after Z is called, as the else branch in Z does
not consult the security manager.
In this paper, we focus on the design and implementation
of an automated analysis technique to identify such paths by
statically analyzing Java code. We want to design a proce-
dure that will, when given a method M, analyze the method
(and all the methods called by M in its transitive closure)
and ask if such paths exist. Since we propose using a sound
analysis for this problem, when the analysis procedure gives
a “no” answer then this deﬁnitely implies that there are no
such bad behaviors. If the analysis procedure gives a “yes”
answer then there may or may not be such a computation.
In this case, the analysis can output a sequence of state-
ments, a possible witness (sometimes called a counter ex-
ample), whose execution may create such a computation. A
more detailed, possibly manual or semi-automatic, exami-
nation of the witness can be done to check if the path is
feasible in practice (in this case a false alarm), or ascertain
if this is a security vulnerability.
We point out that use of automatic program analysis to
identify potentially unsafe methods, and using human as-
sisted methods with the help of the witness generated can
result in considerable savings of human eﬀorts. In addition,
102
public void M eth X(
M eth Y (pathname);
String pathname, int x) {
if ( x == 0){
}
else {
}
//sensitive-op
M eth Z(pathname);
0: