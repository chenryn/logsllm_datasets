Clobbering是一种对DOM节点属性进行劫持的技术。比如下面这段HTML代码，当el是form这个元素的时候，`el.attributes`的值不再是form的属性，而是``这个元素：
这里使用一个id为attributes的input元素劫持了原本form的attributes，`el.attributes`不再等于属性列表，自然关于移除白名单外属性的逻辑也就无从说起了。这就是Dom
Clobbering在这个小挑战里的原理。
最终@Zedd 使用下面这段代码实现了无需用户交互的Dom Clobbering XSS完成这个挑战：
回到Tui Editor的案例。Tui
Editor的sanitizer与星球小挑战的代码有一点本质的不同就是，它在移除白名单外属性之前，还移除了一些黑名单的DOM元素，其中就包含``。
在Dom
Clobbering中，``是唯一可以用其子标签来劫持他本身属性的DOM元素（HTMLElement），但是它被黑名单删掉了。来看看删除时使用的`removeUnnecessaryTags`函数：
    function findNodes(element: Element, selector: string) {
        const nodeList = toArray(element.querySelectorAll(selector));
        if (nodeList.length) {
            return nodeList;
        }
        return [];
    }
    function removeNode(node: Node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function removeUnnecessaryTags(html: HTMLElement) {
        const removedTags = findNodes(html, tagBlacklist.join(','));
        removedTags.forEach((node) => {
            removeNode(node);
        });
    }
我思考了比较久这三个函数是否可以用Dom Clobbering利用。其中最可能被利用的点是删除的那个操作：
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
我尝试用下面这个代码劫持了`node.parentNode`，看看效果：
经过调试发现，这样的确可以劫持到`node.parentNode`，让`node.parentNode`不再是`node`的父节点，而变成他的子节点——``。
但是劫持后，执行removeChild操作时，因为这个函数内部有检查，所以会爆出`Failed to execute 'removeChild' on
'Node': The node to be removed is not a child of this node.`的错误：
另外，Dom Clobbering也无法用来劫持函数，所以这个思路也无疾而终了。
最终我还是没找到利用Dom Clobbering来绕过Tui Editor的XSS sanitizer的方法，如果大家有好的想法，可以下来和我交流。
## 0x04 基于条件竞争的绕过方式
到现在，我仍然没有找到一个在Tui Editor中执行无交互XSS的方法。
这个时候我开始翻history，我发现就在不到一个月前，Tui Editor曾对HTML sanitizer进行了修复，备注是修复XSS漏洞，代码改动如下：
在将字符串html赋值给`root.innerHTML`前，对这个字符串进行了正则替换，移除其中的`onload=`关键字。
我最开始不是很明白这样做的用意，因为onload这个属性在后面白名单移除的时候会被删掉，在这里又做一次删除到底意义何在。后来看到了单元测试的case并进行调试以后，我才明白了原因。
在Tui Editor的单元测试中增加了这样一个case：
平平无奇，但我将其放到未修复的HTML
sanitizer中竟然绕过了属性白名单，成功执行。这也是我在知识星球的XSS小挑战中讲到的那个小trick，条件竞争。
这里所谓的“条件竞争”，竞争的其实就是这个onload属性在被放进DOM树中开始，到在后续移除函数将其移除的中间这段时间——只要这段代码被放进innerHTML后立即触发onload，这样即使后面它被移除了，代码也已经触发执行了。
那么想要找到这样一个Payload，它需要满足下面两个条件：
  * 在代码被放进innerHTML的时候会被触发
  * 事件触发的时间需要在被移除以前
第一个条件很好满足，比如最常用的XSS Payload ``，它被插入进innerHTML的时候就可以触发，而无需等待这个root节点被写入页面：
    const root = document.createElement('div');
    root.innerHTML = ``
相比起来，``、``这两个Payload就无法满足这一点。具体原因我在星球里也说到过，可以翻翻帖子。
第二个条件更加玄学，以至于我虽然知道一些可以利用的Payload，但并不知道它为什么可以利用。
的Payload是无法满足第二个条件的，因为onerror是在src加载失败的时候触发，中间存在IO操作时间比较久，所以肯定无法在onerror被移除前完成。相对的，下面这两个Payload可以满足条件：
第一个是我前面说过的方法，第二个是后面测试的时候发现的一种方法。
## 0x05 Tui Editor补丁绕过
那么很幸运，``这个Payload满足了两个条件，成为可以竞争过remove的一个Payload。而Tui
Editor因为只考虑了双svg的Payload，所以可以使用它轻松绕过最新的补丁，构造一个无交互XSS。
那么我是否还能再找到一种绕过方式呢？
回看Tui Editor针对``这个Payload的修复方式：
    export const TAG_NAME = '[A-Za-z][A-Za-z0-9-]*';
    const reXSSOnload = new RegExp(`(]*)(onload\\s*=)`, 'ig');
    export function sanitizeHTML(html: string) {
        const root = document.createElement('div');
        if (isString(html)) {
            html = html.replace(reComment, '').replace(reXSSOnload, '$1');
            root.innerHTML = html;
        }
        // ...
    }
增加了一个针对onload的正则`(]*)(onload\\s*=)`，将匹配上这个正则的字符串中的`onload=`移除。
这个正则是有问题的，主要问题有3个，我根据这两个问题构造了3种绕过方法。
### 贪婪模式导致的绕过
我发现这个正则在标签名`[A-Za-z][A-Za-z0-9-]*`的后面，使用了`[^>]*`来匹配非`>`的所有字符。我大概明白他的意思，他就是想忽略掉所有不是onload的字符，找到下一个onload。
但是还记得正则里的贪婪模式吧，默认情况下，正则引擎会尽可能地多匹配满足当前模式的字符，所以，如果此时有两个`onload=`，那么这个`[^>]*`将会匹配到第二个，而将它删除掉，而第一个`onload=`将被保留。
所以，构造如下Payload将可以绕过补丁：
### 替换为空导致的问题
那么如果将贪婪模式改成非贪婪模式，是否能解决问题呢？
    (]*?)(onload\\s*=)
看看这个正则，会发现它分为两个group，`(]*?)`和`(onload\\s*=)`，在用户的输入匹配上时，第二个group将会被删除，保留第一个group，也就是`$1`。
所以，即使改成非贪婪模式，删除掉的是第一个`onload=`，第二个`onload=`仍然会保留，所以无法解决问题，构造的Payload如下：
### 字符匹配导致的问题
回看这个`[^>]*`，作者的意思是一直往后找`onload=`直到标签闭合的位置为止，但是实际上这里有个Bug，一个HTML属性中，也可能存在字符`>`，它不仅仅是标签的定界符。
那么，如果这个正则匹配上HTML属性中的一个`>`，则会停止向后匹配，这样`onload=`也能保留下来。Payload如下：
    " onload=alert(1)>
三种Payload都可以用于绕过最新版的Tui Editor XSS过滤器，再加上前面的``，总共已经有4个无需用户交互的POC了。
## 0x06 总结
总结一下，Tui Editor的Viewer使用自己编写的HTML
sanitizer来过滤Markdown渲染后的HTML，而这个sanitizer使用了很经典的先设置DOM的innerHTML，再过滤再写入页面的操作。
我先通过找到白名单中的恶意方法构造了需要点击触发的XSS Payload，又通过条件竞争构造了4个无需用户交互的XSS
Payload。其中，后者能够成功的关键在于，一些恶意的事件在设置innerHTML的时候就瞬间触发了，即使后面对其进行了删除操作也无济于事。
虽然作者已经注意到了这一类绕过方法，并进行了修复，但我通过审计它的修复正则，对其进行了绕过。
这里要说的一点是，我最初只想到了使用`x=">"`这种方法绕过正则，但在写文章的时候又想到了贪婪模式相关的方法。可以看出，写文章其实对于思考问题来说很有帮助，我在写一篇文章的时候会考虑的更加全面，这个经验也推荐给大家。
* * *