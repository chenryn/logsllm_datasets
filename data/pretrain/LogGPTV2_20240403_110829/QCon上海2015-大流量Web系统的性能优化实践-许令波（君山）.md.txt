大流量 系统性能优化实践
Web
君山
2015.10.15
2015-6-3
2015-6-3
关于我
• 许令波 (君山 )
• 在阿里 6年，做了 4件还不错的事情
• 商品详情、店铺、图片空间 TL
• 关注大流量 web系统的架构和性能优化工作。
目录
• 这些年的挑战
• 我们走过的路
• 我们的经验
5
流量爆发增长
•
图片来自网上
系统还比较脆弱
•
图片来自网上
环境造就了技术
图片来自网上
搞不好就淹死了
图片来自网上
业务爆发增长
图片来自网上
只有在这里才能遇到
图片来自网上
遇到的挑战
• 流量爆发增长带来机器的成倍增加，系统必
须要能水平扩展
• 流量的峰值（秒杀），单商品或者用户维度
会出现热点，给 带来瓶颈
cache
• 大面积的攻击，如何区分正常流量防止误杀
• 复杂的业务逻辑给系统系统的耦合度和数据
的分类更加困难
我们走过的路
• 系统代码层面的优化
• 架构优化
• 链路优化
代码级优化
代码优化实践：模板引擎的热点
• Velocity是动态解释性语言 ,执行效率较 差
• 页面复杂 ,反射调用非常多
• 发现模板渲染占用了 60%以上的 CPU时间。
• 整个页面输出比较大 ,平均在 100KB左右。
代码优化实践： 模板引擎
sketch
• 将 Velocity模板直接转成 Java类去执行 , 将
语法转成 语法
Velocity Java
• 将方法的反射调用转成直接 Java原生方 法
调用
• 减少页面大小 ,删除空行等无效字符输 出
• 将页面中的字符转成字节输出减少编码 转
换
代码优化实践： 热点
class.forname
• Class.forname会导致线程block
代码优化实践：增加
cache
• 性能提升5%
more..
• 对象作为 HashMap的 key
• web.xml配置版本信息可以减少启动时
的扫描时间
annotation
• Logger创建没有使用 static修饰符导致线程
阻塞
• 少用 Thread.getStackTrace()
• 正则运算尽量 cache
架构优化
• 数据的动静分离
• 读写的分层校验
数据动静分离
• 系统的静态化是读系统性能优化的终极必
杀器
• 让用户的请求尽量不要经过 Java系统
• 让静态数据放在离用户最近的地方
• 让动态数据尽可能的小
架构优化实践：读系统的静态化
架构优化实践 商品详情的静态化
:
• 每天支持 30+亿的 PV
• 可以支持峰值 100w的 QPS
• 静态请求单机 10000+（物理机）
• 动态请求单机 1500+（ 16核）
读写数据的分层校验
看一下全球最大的秒杀系统如何实现
读写数据的分层校验
• 从一个普通的详情页面跳转过来
读写数据的分层校验
• 整个页面是 cache在用户浏览器
• 如果强制刷新整个页面，也会请求到 CDN
• 实际有效请求只是 “刷新抢宝 ”按钮
读写数据的分层校验
• 防止被秒杀器刷掉
• 通过答题分散用户的写请求，控制并发数
秒杀系统的执行逻辑
读写数据的分层校验总计
• 先做数据的动静分离
• 将 99%的数据缓存在客户端浏览器
• 将动态请求的读数据 cache在 web端
• 对读数据不做强一致性校验
• 对写数据进行基于时间的合理分片
• 对写请求做限流保护
• 对写数据进行强一致性校验
链路优化
• 链路优化的目标是整体提升用户访问体验
（低延时）
• 从用户的浏览器 /APP
• 网关 /CDN
• 服务端 (web系统 /服务层 /数据层 )
用户访问链路
• http://www.webpagetest.org/video/compar
e.php?tests=140318_M5_7GV%2C140318_Z2
_7CJ&thumbSize=200&ival=100&end=full
用户访问链路
• http://www.webpagetest.org/video/compar
e.php?tests=140318_M5_7GV%2C140318_Z2
_7CJ&thumbSize=200&ival=100&end=full
• 服务端响应时间只占整个请求路径上的很
小一部分
• PC上更重要的是优化首屏的加载
• 无线端更多的是优化中间的管道
无线端请求合并
• 无线环境下做请求合并的收益是比较大的，所以会将当前的两次请求
再服务端做ESI合并为一个请求。
数据量大小
• 无线环境下数据大小对性能影响比PC更加明显，PC从20k到80k增加了
100ms，而无线从20k到80k增加了700ms。所以无线控制页面大小对
性能影响很大
到 上
cache CDN
•直接从CDN上获取Cache后的数据性能很好，40k以下的页面只要600ms
左右。相当是直接回源一倍的性能
一些结论
•无线环境下一次网络请求要明显好于2次以上，减少网络请求次数对首
屏加载性能影响比较明显
•无线环境文件大小与PC环境下文件大小对性能影响的差异不同，无线环
境下数据大小对性能影响比PC更加明显，PC从20k到80k增加了100ms，
而无线从20k到80k增加了700ms。所以无线控制页面大小对性能影响很大
•CDN直接Cache性能提升很大，所以尽量数据Cache到CDN同样对无线是
有效的
•小数据情况下动态加速和直接回主站比较没有明显优势，加上当前动态
加速链路还在调优，所以当前无线数据直接回统一cache比较理想。待动
态加速更加成熟后再走CDN，当前统一Cache和CDN已经做到了动态切换，
所以往CDN也没有成本
more…
• 域名的收敛
• DNS本地 cache
• SPDY长连
• 图片本地 cache
• 合理的预加载机制
我们的经验
• 知道短板
• 减少数据大小
• 数据分级
• 减少中间环节、增加预处理
发现短板
• 光速
• 网速
• 网络结构（交换机 /网卡）
• TCP/IP
• 虚拟机（内存 /cpu/io…）
• 应用
减少数据大小
•HTML
•图片
•JSON
•Java对象
•请求数
40
数据分级
41
数据分级
• 首屏为先
• 重要信息为先
• 次要信息异步加载
减少中间环节
减少中间环节
• 减少中间代理
• 减少字符到字节的
转换
• 将变的转换为不变
的，增加预处理
回顾
1. 面临的挑战
– 流量挑战
– 业务复杂度挑战
2. 我们走过的路
 代码优化
 架构优化
 链路优化
3. 我们的经验
– 知道短板
– 减少数据大小
– 数据分级
– 减少翻译、增加预处理
总结
一定要做应用基线
1.
– 性能基线（何时性能突然下降了？）
– 成本基线（去年双11用了多少台机器？）
– 链路基线（我们的系统发生了那些变化？）
必须持续有人关注系统的性能
2.
– 代码级（提升编码质量）
– 业务（改掉不合理的调用）
– 架构和链路级（改进架构）
更通用和批量的解决问题
3.
– 整合系统之间的调研链路（合并部署）
– 提升整体机器使用率（弹性部署）
 微博:@淘宝君山
 webchat:xulingbo0201
 邮箱:PI:EMAIL
 http://xulingbo.net