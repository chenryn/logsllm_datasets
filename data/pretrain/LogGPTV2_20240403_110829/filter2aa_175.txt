# One Token to Rule Them All: Post-Exploitation in Windows Environments
**Date:** 06 July 2007

## Introduction
### The Increasing Importance of Post-Exploitation
- **Pervasiveness of Microsoft Technology:** Microsoft technologies are widely used, making them a prime target for attackers.
- **Improved Security:** Since the launch of the Trustworthy Computing Initiative, security measures have significantly improved.
- **Rising Importance of Post-Exploitation:** As a result, post-exploitation techniques have become increasingly crucial.

### The Potential for Token Abuse in Post-Exploitation
- **Current Addressed Issues:** Tools like Metasploit have addressed some aspects of token abuse.
- **Penetration Tester's Perspective:** There is still much to be explored regarding the use of Windows access tokens.
- **Single Sign-On Concept:** Access tokens are central to Microsoft's single sign-on (SSO) within an Active Directory environment.
- **Client Awareness:** It is challenging to convince clients of the importance of securing administrators' desktops as rigorously as servers.

## Windows Access Tokens: An Overview
- **Understanding Tokens:** Access tokens are not well understood but are essential for defining process privileges.
- **Primary and Impersonation Tokens:**
  - **Primary Token:** Each process has a primary token that dictates its privileges.
  - **Impersonation Tokens:** Threads can temporarily impersonate other users through impersonation tokens.
- **Security Levels:**
  - **Anonymous:** No user identity.
  - **Identification:** User identity only.
  - **Impersonation:** Limited impersonation.
  - **Delegation:** Full impersonation, including network resources.
- **Token Creation:**
  - **Interactive Logons:** Result in delegation-level tokens.
  - **Non-Interactive Logons:** Typically produce impersonation-level tokens, but trusted services can generate delegation tokens (e.g., EFS file server).

## Token Abuse
- **Privilege Escalation:**
  - **Domain Privilege Escalation:**
    - **Scenario:** If domain user tokens are available, they can be used to access other systems.
    - **Example:** Compromising a DBA's workstation might allow the use of their token to access sensitive database servers.
  - **Local Privilege Escalation:**
    - **Scenario:** Impersonation-level tokens can sometimes enable local privilege escalation.
    - **Example:** An unprivileged SQL Server instance running under a service account. If an administrator connects using Windows authentication, their token can be used to escalate privileges to local Administrator.

## Requirements from a Penetration Tester's Perspective
- **Token Enumeration:** Identify available tokens on a compromised system.
- **Post-Exploitation Tasks:**
  - **Execute Processes:** Use specific tokens to run processes.
  - **Capture Hashes:** Force remote connections to capture LANMAN/NTLM hashes.
  - **User Management:** Add users to hosts, groups, etc.

## Introducing Incognito
### Overview
- **Name Origin:** "Incognito" because it allows you to assume another's identity.
- **Functionality:**
  - **List Tokens:** By unique username or group.
  - **Create Processes:** Using specified tokens (e.g., `cmd.exe`).
  - **Snarf Hashes:** Capture challenge/response hashes of all tokens.
  - **Add Users:** Attempt to add a user to a host or group with all tokens.
  - **Remote Usage:** Can be used remotely via named pipes (similar to pwdump).

### Enumerating Tokens
- **API Calls:**
  - **NtQuerySystemInformation:** Enumerate all handles on the system.
  - **NtQueryObject:** Determine which handles are access tokens.
  - **GetTokenInformation and LookupAccountSid:** Gather information about the tokens, such as usernames, groups, and security levels.

### Creating Processes
- **API Call:** `CreateProcessAsUser` allows creating processes with a specified token handle.
- **Example:** Create a new `cmd.exe` instance to gain a command shell under the context of the specified token.

### Snarfing Hashes
- **API Call:** `WNetAddConnection2` forces connections to remote servers with delegation-level tokens, capturing LANMAN/NTLM challenge response hashes.

### Adding Users to Hosts
- **API Calls:**
  - **NetUserAdd:** Add users to hosts.
  - **NetGroupAddUser:** Add users to global groups on hosts.
  - **NetLocalGroupAddMembers:** Add users to local groups on hosts.

## Incognito Demo
- **Live Demonstration:** Showcasing the capabilities of Incognito.

## Unsuspected 0wnage
- **Logged Off Accounts:**
  - **Assumption:** Tokens should be cleaned up when a session ends.
  - **Discovery:** On unpatched systems, tokens for interactive logins persist after logoff.
  - **Persistence:** These tokens can access network resources until a reboot.
  - **Risk:** If a Domain Admin logged into an unsecured system, the entire Windows domain could be compromised.

### Unsuspected 0wnage Demo
- **Live Demonstration:** Illustrating the persistence of tokens and the associated risks.

## Metasploit Integration
- **Integration Benefits:**
  - **Meterpreter Module:** Incognito's functionality can be utilized directly through a Meterpreter module.
  - **Thread Impersonation:** The Meterpreter runs as a thread, allowing it to impersonate other tokens.
  - **Automated Exploitation:** Metasploit's automated exploitation can perform actions across a large network.
  - **Example:** Automatically compromise Windows systems, snarf hashes, and add a new domain administrator.

### Incognito Meterpreter Module Demo
- **Live Demonstration:** Showcasing the integration with Metasploit.

## Precision Strikes
- **Targeted Attacks:**
  - **General Tool:** Incognito is useful for domain privilege escalation.
  - **Highly Targeted Tests:** Attacking specific systems like financial SQL Server databases.
  - **Indirect Access:** Compromise less secure systems (e.g., DBA's desktop) to gain access to highly protected systems.

### Locating Tokens
- **Supplementary Tool:**
  - **find_token:** Enumerate tokens present on a system before compromising it.
  - **API Call:** `NetWkstaUserEnum` to list currently logged-on users.
  - **Network Sweep:** Requires a standard domain user account.
  - **Limitations:** Lists previously logged-on users, leading to false positives. Useful for unpatched hosts.

### Targeted Penetration Testing with Incognito
- **Basic Methodology:**
  1. **Determine Targets:** Identify critical systems (e.g., database servers).
  2. **Conventional Penetration Testing:** Attempt standard penetration methods.
  3. **Enumerate Access:** If direct penetration fails, identify who has access to the system.
  4. **Locate Relevant Systems:** Use `find_token` to locate systems housing relevant tokens.
  5. **Compromise Systems:** Attempt to penetrate these identified systems.
  6. **Use Tokens:** Utilize tokens from compromised hosts to access main targets.

## Defense
- **Best Practices:**
  - **Limit Privileged Accounts:** Reduce exposure by limiting the use of privileged accounts.
  - **Sensitive Accounts:** Use the "Account is sensitive and cannot be delegated" option in Active Directory for highly privileged accounts.
  - **Secure Old Systems:** Ensure old and insecure systems are properly secured, especially administrators' desktops.
  - **Strong Policies:** Implement strong security policies for systems accessed by sensitive accounts.
  - **Separate Administrative Accounts:** Use separate accounts for development/test systems to minimize risk.

By following these guidelines and understanding the potential for token abuse, organizations can better protect their environments from post-exploitation attacks.