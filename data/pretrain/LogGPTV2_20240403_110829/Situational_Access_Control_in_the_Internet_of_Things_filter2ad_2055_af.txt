for the Home Internet of Things (IoT). In USENIX Security Symposium 2018.
[36] Peter Hornyack, Seungyeop Han, Jaeyeon Jung, Stuart Schechter, and David
Wetherall. These Aren’t the Droids You’re Looking for: Retrofitting Android to
Protect Data from Imperious Applications. In ACM Conference on Computer and
Communications Security (CCS) 2011.
[37] Vincent C Hu, David Ferraiolo, Rick Kuhn, Adam Schnitzer, Kenneth Sandlin,
Robert Miller, and Karen Scarfone. 2013. Guide to Attribute Based Access Control
(ABAC) Definition and Considerations (Draft). NIST Special Publication 800, 162
(2013).
[38] Xiping Hu, Junqi Deng, Jidi Zhao, Wenyan Hu, Edith C-H Ngai, Renfei Wang,
Johnny Shen, Min Liang, Xitong Li, Victor Leung, and Yu-Kwong Kwok. SAfeDJ: A
Crowd-Cloud Codesign Approach to Situation-Aware Music Delivery for Drivers.
ACM Transactions on Multimedia Computing, Communications, and Applications
(TOMM) 2015.
[39] IETF. 2018. The OAuth 2.0 Authorization Framework. https://tools.ietf.org/html/
rfc6749. (2018). Accessed: Jan 2018.
[40] Limin Jia, Jassim Aljuraidan, Elli Fragkaki, Lujo Bauer, Michael Stroucken,
Kazuhide Fukushima, Shinsaku Kiyomoto, and Yutaka Miyake. Run-time En-
forcement of Information-flow Properties on Android. In European Symposium
on Research in Computer Security (ESORICS) 2013.
[41] Yunhan Jack Jia, Qi Alfred Chen, Shiqi Wang, Amir Rahmati, Earlence Fernandes,
Z Morley Mao, and Atul Prakash. ContexIoT: Towards Providing Contextual
Integrity to Appified IoT Platforms. In Network and Distributed System Security
Symposium (NDSS) 2017.
[42] Jinyung Kim, Yongho Yoon, and Kwangkeun Yi. ScanDal: Static Analyzer for
Detecting Privacy Leaks in Android Applications. Mobile Security Technologies
(MoST) 2012.
[43] Thomas Kubitza, Alexandra Voit, Dominik Weber, and Albrecht Schmidt. An IoT
Infrastructure for Ubiquitous Notifications in Intelligent Living Environments.
In ACM International Joint Conference on Pervasive and Ubiquitous Computing
(UbiComp): Adjunct 2016.
[44] Devdatta Kulkarni and Anand Tripathi. Context-Aware Role-Based Access Con-
trol in Pervasive Computing Systems. In ACM Symposium on Access Control
Models and Technologies (SACMAT) 2008.
[45] Sanghak Lee, Jiwon Choi, Jihun Kim, Beumjin Cho, Sangho Lee, Hanjun Kim, and
Jong Kim. FACT: Functionality-centric Access Control System for IoT Program-
ming Frameworks. In ACM Symposium on Access Control Models and Technologies
(SACMAT) 2017.
[46] Mohammad Nauman, Sohail Khan, and Xinwen Zhang. Apex: Extending Android
Permission Model and Enforcement with User-defined Runtime Constraints. In
ACM Conference on Computer and Communications Security (CCS) 2010.
[47] Nest. 2018. Works with Nest. https://workswith.nest.com/. (2018). Accessed: Jan
2018.
[48] Helen Nissenbaum. 2009. Privacy in Context: Technology, Policy, and the Integrity
of Social Life. Stanford University Press.
[49] OASIS. 2018. XACML Specification. http://docs.oasis-open.org/xacml/. (2018).
Accessed: March 2018.
[50] Rahul Pandita, Xusheng Xiao, Wei Yang, William Enck, and Tao Xie. WHYPER:
Towards Automating Risk Assessment of Mobile Applications. In USENIX Security
Symposium 2013.
[51] Mor Peleg, Dizza Beimel, Dov Dori, and Yaron Denekamp. 2008. Situation-
based Access Control: Privacy Management via Modeling of Patient Data Access
Scenarios. Journal of Biomedical Informatics 41, 6 (2008), 1028–1040.
[52] Vaibhav Rastogi, Yan Chen, and William Enck. AppsPlayground: Automatic
Security Analysis of Smartphone Applications. In ACM Conference on Data and
Application Security and Privacy (CODASPY) 2013.
[53] David Recordon and Drummond Reed. OpenID 2.0: A Platform for User-centric
Identity Management. In ACM Workshop on Digital Identity Management (DIM)
2016.
[54] Reddit. 2017.
Galaxy S8 reddit: Problems with IFTTT Location Trig-
gers. https://www.reddit.com/r/GalaxyS8/comments/69tw7q/problems_with_ift
tt_location_triggers/. (2017). Accessed: Jan 2018.
[55] Jon Ronson. 2018.
How One Stupid Tweet Blew Up Justine Sacco’s
Life. https://www.nytimes.com/2015/02/15/magazine/how-one-stupid-tweet
-ruined-justine-saccos-life.html. (2018). Accessed: March 2018.
[56] Giovanni Russello, Mauro Conti, Bruno Crispo, and Earlence Fernandes. MOSES:
Supporting Operation Modes on Smartphones. In ACM Symposium on Access
Control Models and Technologies (SACMAT) 2012.
[57] Bilal Shebaro, Oyindamola Oluwatimi, and Elisa Bertino. Context-based Access
Control Systems for Mobile Devices. IEEE Transactions on Dependable and Secure
Computing (TDSC) 2015.
[58] Anna Kornfeld Simpson, Franziska Roesner, and Tadayoshi Kohno. Securing Vul-
nerable Home IoT Devices with an In-hub Security Manager. In IEEE International
Conference on Pervasive Computing and Communications Workshops (PerCom)
Workshops 2017.
[59] Slashdot. 2017. Amazon Keys Puts Deliveries — and Delivery People — In Your
Home. https://news.slashdot.org/story/17/10/25/1813258/amazon-key-puts-del
iveries----and-delivery-people----in-your-home. (2017). Accessed: 2017-07-18.
[60] Stephen Smalley and Robert Craig. Security Enhanced (SE) Android: Bringing
Flexible MAC to Android. In Network and Distributed System Security Symposium
(NDSS) 2013.
[61] Statista. 2018. Smart Home Market Penetration in US. https://www.statista.com
/outlook/279/109/smart-home/united-states. (2018). Accessed: 2018-08.
[62] Apple Support. 2017. iOS: Allow Location Access Only While Using App. https:
//support.apple.com/en-gb/HT203033. (2017). Accessed: 2017-07-18.
[63] Google Support. 2017. Android Work Mode. https://support.google.com/work/
android/answer/7029561?hl=en. (2017). Accessed: 2017-07-18.
[64] SmartThings Support. 2018. Known Mobile Presence Issues. https://support.sm
artthings.com/hc/en-us/articles/204744424. (2018). Accessed: Jan 2018.
[65] SmartThings Support. 2018. SmartThings: Local Processing. https://support.sm
artthings.com/hc/en-us/articles/209979766-Local-processing. (2018). Accessed:
March 2018.
[66] Milijana Surbatovich, Jassim Aljuraidan, Lujo Bauer, Anupam Das, and Limin Jia.
Some Recipes Can Do More Than Spoil Your Appetite: Analyzing the Security
and Privacy Risks of IFTTT Recipes. In International Conference on World Wide
Web (WWW) 2017.
[67] Eric A. Taub. 2018. New York Times: Sleepy Behind the Wheel? Some Cars Can
Tell. https://www.nytimes.com/2017/03/16/automobiles/wheels/drowsy-driving
-technology.html. (2018). Accessed: May 2018.
[68] Yuan Tian, Nan Zhang, Yueh-Hsun Lin, Xiaofeng Wang, Blase Ur, Xianzheng Guo,
and Patrick Tague. SmartAuth: User-Centered Authorization for the Internet of
Things. In USENIX Security Symposium 2017.
[69] Eran Tromer and Roei Schuster. DroidDisintegrator: Intra-application Informa-
tion Flow Control in Android Apps. In ACM Symposium on Information, Computer
and Communications Security (ASIACCS) 2012.
[70] Blase Ur, Melwyn Pak Yong Ho, Stephen Brawner, Jiyun Lee, Sarah Mennicken,
Noah Picard, Diane Schulze, and Michael L Littman. Trigger-action Programming
in the Wild: An Analysis of 200,000 IFTTT Recipes. In ACM CHI Conference on
Human Factors in Computing Systems 2016.
[71] Qi Wang, Wajih Ul Hassan, Adam Bates, and Carl Gunter. Fear and Logging in
the Internet of Things. In Network and Distributed System Security Symposium
(NDSS) 2018.
[72] Primal Wijesekera, Arjun Baokar, Ashkan Hosseini, Serge Egelman, David Wag-
ner, and Konstantin Beznosov. Android Permissions Remystified: A Field Study
on Contextual Integrity. In USENIX Security Symposium 2012.
[73] Primal Wijesekera, Arjun Baokar, Lynn Tsai, Joel Reardon, Serge Egelman, David
Wagner, and Konstantin Beznosov. The Feasibility of Dynamically Granted
Permissions: Aligning Mobile Privacy with User Preferences. In IEEE Symposium
on Security and Privacy 2017.
[74] Tianlong Yu, Vyas Sekar, Srinivasan Seshan, Yuvraj Agarwal, and Chenren Xu.
Handling a Trillion (Unfixable) Flaws on a Billion Devices: Rethinking Network
Security for the Internet-of-things. In ACM Workshop on Hot Topics in Networks
(HotNets) 2015.
[75] Guangsen Zhang and Manish Parashar. Dynamic Context-Aware Access Con-
trol for Grid Applications. In IEEE International Workshop on Grid Computing
(CCGRID) 2003.
[76] Hong Zhang, Yeping He, and Zhiguo Shi. Spatial Context in Role-based Ac-
cess Control. In Springer International Conference on Information Security and
Cryptology (ICISC) 2006.
A ACCESS CONTROL IN IOT
A.1 Direct resource access
As an illustrative example for a resource layer protocol, we focus on
the Open Connectivity Foundation (OCF) standard (see Section 5).
It defines the functionality of an IoT resource layer.
Subjects. In the OCF environment, subjects are clients and servers,
which are processes running on top of physical devices. A client
can be, for example, a hub or a smartphone terminal that controls
sensors and actuators using requests. Sensors and actuators (light-
bulbs, smoke detectors, motion sensors, etc.) are typically servers.
A server can issue requests and is therefore a subject, too. For ex-
ample, after detecting movement, a motion sensor can send a “turn
on” request to a smart lightbulb.
Objects. In OCF, objects are resources exported by servers. Clients
issue requests to servers, and servers to other servers, to access
resources. Locally, a resource is uniquely identified by its URI (e.g.,
/home/living_room/light). Globally, a resource is addressed us-
ing a device identity (see below) and a URI.
If a resource is discoverable, its global address can be found by
any client or server via broadcast “discover” messages. A parent-
child relationship is defined for some resources, forming a hierarchy
reflected in their URIs, e.g., a /home/living_room/light resource
can represent two devices: /home/living_room/light/led1, and
/home/living_room/light/led2.
There are two types of resources. Configuration resources store
and expose client or server configuration values, identities, crypto-
graphic credentials, and other metadata. They are created automat-
ically by the app framework and have a resource owner identity.
Device resources implement arbitrary server functionality and
are registered using the app-framework APIs. A device resource ex-
poses five operations: read, write, update, delete, and observe.
Typically, device resources call device-specific APIs when accessed
by a client (e.g., /home/living_room/light_off invokes a system
call on the device that turns off the light).
Requests to remote servers have an associated client identity: the
owner identity of the ‘‘/doxm’’ configuration resource. The server
identity (or device identity in the OCF standard’s terminology), also
stored in the ‘‘/doxm’’ resource, is used when handling incoming
requests. Identities are represented as GUIDs. A designated configu-
ration resource in every client and server, /creds, contains remote
identities and their associated TLS credentials.
Access-control policies. The configuration resource /acl of a
server contains the access-control list (ACL) for the resources man-
aged by the server process. The ACL is a list of ACEs, with each
ACE specifying a subject (an identity), an object (the URI of a re-
source), and permissions. Permissions are specified using a mask of
5 bits corresponding to create, read, update, delete, notify (CRUDN)
operations. Resource discovery, as well as read and observe op-
erations, require read permission; write and update operations
require write permission; delete, notify, and create operations
require delete, notify, and create permissions, respectively.6 Any
access to a resource by its owner (if it is a configuration resource),
or by the device owner (another identity stored in the ‘‘/doxm’’
resource), is automatically permitted.
Policy creation. The device owner and the resource owner of /acl
(who may have the same identity) set the policy. When installed
into a home network, devices follow a provisioning procedure
to determine the initial owner identities. For example, the owner
identity can be the client identity of a terminal or a hub device
operated by a service (e.g., SmartThings). This way, the service can
configure and control resource-layer policies and offer a user-facing
interface that abstracts away some of their low-level details.
Access-control enforcement. When a server or a client invokes
one of the server resources, the caller’s identity is first verified using
/cred information. The server then checks in /acl if the caller is
allowed to perform the requested operation. If so, the requested
operation handler is invoked by the reference monitor.
Situational constraints. There is no support for situational con-
straints in the OCF standard.
6In IoTivity v1.3, there is no use and no implementation for notify and delete operations.
A.2 Service-service interaction
Subjects and objects. Users often have accounts with multiple
Web services. Typically, subject services issue HTTP requests to
object services to access APIs associated with a specific user. For
example, Nest Web APIs enable third-party services to access Nest
devices; these APIs are currently used by over 50 services [47].
Third-party services control Nest devices by issuing requests to
URLs of the form https://developer-api.nest.com/devices/DEVICE
_TYPE/DEVICE_ID/API_ID.
Access-control policies. Object services typically protect their
APIs via OAuth 2 [39] bearer tokens. This is a capability-based
permissioning system, where capabilities (tokens) give the bearer
certain access rights. Bearer tokens have associated user accounts
and scopes. A scope specifies the token’s access rights, encoded as
a list of permission strings. For example, in Nest, the “camera read”
permission string gives access rights to APIs such as is_online, but
accessing images requires the “camera read + images” permission.
Policy creation. In OAuth 2, policy creation is an access delegation
process where users allow access “on their behalf.” This involves
the object service securely sharing an access token with a subject
service, using a Web flow that includes both services, as well as the
user who approves the delegation of access rights [12, 39]. See also
Appendix D.
Access-control enforcement. To invoke an API, the subject service
passes a token as part of the HTTP request. The request is allowed
if the token maps to a user identity, has not expired, and its scope
contains an access right string for the requested API call.
Situational constraints. Services can implement additional pro-
tections beyond bearer token authorizations, including situational
constraints. The Nest framework tracks the “user is home” situa-
tion using the phone GPS sensor available to the Nest mobile app.
The Nest camera can be configured to turn on or off automatically
depending on the detected situation. Moreover, services can turn
the camera on only with explicit user consent (involving a prompt
from the Nest mobile app). This means that if the camera auto-
matically turns off when the user enters, access to the camera is
indiscriminately blocked when the user is at home—unless the user
turns the camera on, in which case it is indiscriminately allowed.
Another example of a situational constraint is that even when
the camera is on, the user has to opt-in via Nest’s configuration to
enable live-feed access by any third-party services (short GIF ani-
mations and images, however, are not protected by this constraint).
In effect, this is a situation (“user allows third-party access”) that is
explicitly activated and de-activated by the user.
Issues in service-service access control. As demonstrated in Sec-
tion 2, tracking of situational constraints by Nest and other services
is often inadequate. In general, access control in Web services is
plagued by many other problems. We do not address them in this
paper but mention them here for completeness.
First, with the bulk of IoT-device and Web-account function-
ality packaged into multiple different services, the user does not
have a central interface for viewing, granting, and revoking inter-
service permissions. Moreover, granting permissions is easier than
revoking them because users are prompted to grant a permission
when configuring the service that requires the permission but never
prompted to revoke this permission afterwards.
Second, permissive interfaces and overprivileging are ubiqui-
tous. For example, IFTTT requires services to issue OAuth 2 bearer
tokens (or refresh tokens) that never expire, presumably because
expiring tokens can make recipes fail. Services often allow any
other (known, authenticated) service to request access tokens, not
just IFTTT. Moreover, it is natural to implement OAuth 2 delega-
tion in a subject-agnostic manner, and therefore IFTTT-compliant
services may issue non-expiring tokens indiscriminately, not just
to IFTTT. This problem is outside the scope of this paper and we
did not measure its prevalence.
Third, user-facing permission descriptions are not standardized.
Different services use very different description styles, permission
semantics, and permission granularities. If it is hard for users to
comprehend Android user prompts [25], it is virtually impossible
for them to reason about permissions for Web services, even though