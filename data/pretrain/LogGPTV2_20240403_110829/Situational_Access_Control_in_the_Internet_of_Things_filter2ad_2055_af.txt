### Access Control in IoT

#### A.1 Direct Resource Access

As an illustrative example of a resource layer protocol, we focus on the Open Connectivity Foundation (OCF) standard (see Section 5). The OCF standard defines the functionality of an IoT resource layer.

**Subjects:**
In the OCF environment, subjects are clients and servers, which are processes running on physical devices. Clients can be, for example, a hub or a smartphone terminal that controls sensors and actuators using requests. Sensors and actuators (e.g., light bulbs, smoke detectors, motion sensors) are typically servers. Servers can also issue requests and are therefore considered subjects. For instance, after detecting movement, a motion sensor can send a "turn on" request to a smart lightbulb.

**Objects:**
In OCF, objects are resources exported by servers. Clients and servers issue requests to access these resources. Locally, a resource is uniquely identified by its URI (e.g., `/home/living_room/light`). Globally, a resource is addressed using a device identity and a URI. If a resource is discoverable, its global address can be found by any client or server via broadcast "discover" messages. A parent-child relationship can be defined for some resources, forming a hierarchy reflected in their URIs. For example, a `/home/living_room/light` resource can represent two devices: `/home/living_room/light/led1` and `/home/living_room/light/led2`.

There are two types of resources:
- **Configuration Resources:** These store and expose client or server configuration values, identities, cryptographic credentials, and other metadata. They are created automatically by the app framework and have a resource owner identity.
- **Device Resources:** These implement arbitrary server functionality and are registered using the app-framework APIs. A device resource exposes five operations: read, write, update, delete, and observe. Typically, device resources call device-specific APIs when accessed by a client (e.g., `/home/living_room/light_off` invokes a system call on the device that turns off the light).

Requests to remote servers have an associated client identity, which is the owner identity of the `/doxm` configuration resource. The server identity (or device identity in OCF terminology), also stored in the `/doxm` resource, is used when handling incoming requests. Identities are represented as GUIDs. A designated configuration resource in every client and server, `/creds`, contains remote identities and their associated TLS credentials.

**Access-Control Policies:**
The configuration resource `/acl` of a server contains the access-control list (ACL) for the resources managed by the server process. The ACL is a list of Access Control Entries (ACEs), with each ACE specifying a subject (an identity), an object (the URI of a resource), and permissions. Permissions are specified using a mask of 5 bits corresponding to create, read, update, delete, and notify (CRUDN) operations. Resource discovery, as well as read and observe operations, require read permission; write and update operations require write permission; delete, notify, and create operations require delete, notify, and create permissions, respectively. Any access to a resource by its owner (if it is a configuration resource) or by the device owner (another identity stored in the `/doxm` resource) is automatically permitted.

**Policy Creation:**
The device owner and the resource owner of `/acl` (who may have the same identity) set the policy. When installed into a home network, devices follow a provisioning procedure to determine the initial owner identities. For example, the owner identity can be the client identity of a terminal or a hub device operated by a service (e.g., SmartThings). This way, the service can configure and control resource-layer policies and offer a user-facing interface that abstracts away some of the low-level details.

**Access-Control Enforcement:**
When a server or a client invokes one of the server resources, the caller’s identity is first verified using `/creds` information. The server then checks in `/acl` if the caller is allowed to perform the requested operation. If so, the requested operation handler is invoked by the reference monitor.

**Situational Constraints:**
The OCF standard does not support situational constraints.

#### A.2 Service-Service Interaction

**Subjects and Objects:**
Users often have accounts with multiple web services. Typically, subject services issue HTTP requests to object services to access APIs associated with a specific user. For example, Nest Web APIs enable third-party services to access Nest devices; these APIs are currently used by over 50 services [47]. Third-party services control Nest devices by issuing requests to URLs of the form `https://developer-api.nest.com/devices/DEVICE_TYPE/DEVICE_ID/API_ID`.

**Access-Control Policies:**
Object services typically protect their APIs via OAuth 2 [39] bearer tokens. This is a capability-based permissioning system, where capabilities (tokens) give the bearer certain access rights. Bearer tokens have associated user accounts and scopes. A scope specifies the token’s access rights, encoded as a list of permission strings. For example, in Nest, the "camera read" permission string gives access rights to APIs such as `is_online`, but accessing images requires the "camera read + images" permission.

**Policy Creation:**
In OAuth 2, policy creation is an access delegation process where users allow access "on their behalf." This involves the object service securely sharing an access token with a subject service, using a web flow that includes both services, as well as the user who approves the delegation of access rights [12, 39]. See also Appendix D.

**Access-Control Enforcement:**
To invoke an API, the subject service passes a token as part of the HTTP request. The request is allowed if the token maps to a user identity, has not expired, and its scope contains an access right string for the requested API call.

**Situational Constraints:**
Services can implement additional protections beyond bearer token authorizations, including situational constraints. The Nest framework tracks the "user is home" situation using the phone GPS sensor available to the Nest mobile app. The Nest camera can be configured to turn on or off automatically depending on the detected situation. Moreover, services can turn the camera on only with explicit user consent (involving a prompt from the Nest mobile app). This means that if the camera automatically turns off when the user enters, access to the camera is indiscriminately blocked when the user is at home—unless the user turns the camera on, in which case it is indiscriminately allowed.

Another example of a situational constraint is that even when the camera is on, the user has to opt-in via Nest’s configuration to enable live-feed access by any third-party services (short GIF animations and images, however, are not protected by this constraint). In effect, this is a situation ("user allows third-party access") that is explicitly activated and de-activated by the user.

**Issues in Service-Service Access Control:**
As demonstrated in Section 2, tracking of situational constraints by Nest and other services is often inadequate. In general, access control in web services is plagued by many other problems. We do not address them in this paper but mention them here for completeness.

First, with the bulk of IoT-device and web-account functionality packaged into multiple different services, the user does not have a central interface for viewing, granting, and revoking inter-service permissions. Moreover, granting permissions is easier than revoking them because users are prompted to grant a permission when configuring the service that requires the permission but are never prompted to revoke this permission afterward.

Second, permissive interfaces and over-privileging are ubiquitous. For example, IFTTT requires services to issue OAuth 2 bearer tokens (or refresh tokens) that never expire, presumably because expiring tokens can make recipes fail. Services often allow any other (known, authenticated) service to request access tokens, not just IFTTT. Moreover, it is natural to implement OAuth 2 delegation in a subject-agnostic manner, and therefore IFTTT-compliant services may issue non-expiring tokens indiscriminately, not just to IFTTT. This problem is outside the scope of this paper, and we did not measure its prevalence.

Third, user-facing permission descriptions are not standardized. Different services use very different description styles, permission semantics, and permission granularities. If it is hard for users to comprehend Android user prompts [25], it is virtually impossible for them to reason about permissions for web services, even though they are crucial for security and privacy.