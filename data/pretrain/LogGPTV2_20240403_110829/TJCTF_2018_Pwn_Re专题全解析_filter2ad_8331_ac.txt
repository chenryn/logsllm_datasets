      __gid_t rgid; // ST04_4
      char *v4; // rbx
      char *dest; // ST08_8
      __int64 v7[8]; // [rsp+10h] [rbp-70h]
      char *v8; // [rsp+50h] [rbp-30h]
      int v9; // [rsp+58h] [rbp-28h]
      unsigned __int64 v10; // [rsp+68h] [rbp-18h]
      v10 = __readfsqword(0x28u);
      rgid = getegid();
      setresgid(rgid, rgid, rgid);
      setbuf(stdout, 0LL);
      v9 = 0;
      v8 = (char *)malloc(0x20uLL);
      puts("Commands:n A  - Add a team membern F - Fight the monstern Q - Quit");
      while ( 1 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            gets(&input, 255LL, stdin);
            if ( input != 65 )
              break;
            if ( v9 
    #include
    #include
    int main(){
    int a=time(0);
    printf("%dn",a);
    a=1533965040;
    srand(a);
    printf("%dn",a);
    for(int i=0;i>2)
       e+=u(a)
      s[i]=e
     return x(h((1>2)
       e+=chr(a)
      s[i]=e
     return "".join(hex(ord(f))[2:]for f in "".join("".join(y)for y in zip(*s)))
可以看到  
类似AES加密中间一步的操作  
根据hint：
    I don't know the key length, but I do know that the only thing in the plaintext is a flag. Can you break his cipher for me?
密钥长度未知，但是原文只有flag  
说明:
    len(flag)%len(key)=0
否则原文最终会丢弃取模后的余数，导致最终密文不完整，也就无法反解出flag  
根据密文：
    473c23192d4737025b3b2d34175f66421631250711461a7905342a3e365d08190215152f1f1e3d5c550c12521f55217e500a3714787b6554
len(flag)=56  
猜测len(key)=7或者8  
 **根据算法解密,并根据flag开头为”tjctf{“按位爆破key前6位，再随机组合爆破后几位(猜测1或2)** ：
    m="473c23192d4737025b3b2d34175f66421631250711461a7905342a3e365d08190215152f1f1e3d5c550c12521f55217e500a3714787b6554".decode("hex")
    ans2="tjctf{"
    for qw in range(32,127):
        for er in range(32,127):
    #        for ty in range(32,127):
                k="3V@mK>2))
                   a=c
                  s[i]=t+e
                ans="".join(f for f in "".join("".join(y)for y in zip(*s)))
                if ans[len(ans)-1:len(ans)]=="}":
                    print k,ans
(其实这里可以对ans进行过滤，使其只print全为可见字符的一组，不过直接跑出来锁定的数据也比较少，可以直接找到flag)