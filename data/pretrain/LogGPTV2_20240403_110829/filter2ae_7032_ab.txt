但是需要注意到如下的操作:
这里把 `path_info` 执行的内存地址的第一个字节，先修改成为 `\x0`，然后再修改回原来的值。其实这就是一个任意地址写漏洞，不过限制有两个：
  1. 只能在`env_path_info`之前的某个位置改一个字节，并且只能把这个字节修改为`\x0`
  2. 因为后面还有把这个字节改回来的操作，所以改这一个字节产生的影响的必须在改回来之前就已经被触发了。也就是函数调用 `FCGI_PUTENV(request, "ORIG_SCRIPT_NAME", orig_script_name);` 或者 `SG(request_info).request_uri = FCGI_PUTENV(request, "SCRIPT_NAME", env_path_info);` 会用到这个被修改的这一个字节，造成漏洞。
这里面有一个函数调用 `FCGI_PUTENV`, 为了搞清楚这个函数，需要先看几个结构体:
    struct _fcgi_request {
        int            listen_socket;
        int            tcp;
        int            fd;
        int            id;
        int            keep;
    #ifdef TCP_NODELAY
        int            nodelay;
    #endif
        int            ended;
        int            in_len;
        int            in_pad;
        fcgi_header   *out_hdr;
        unsigned char *out_pos;
        unsigned char  out_buf[1024*8];
        unsigned char  reserved[sizeof(fcgi_end_request_rec)];
        fcgi_req_hook  hook;
        int            has_env;
        fcgi_hash      env;
    };
    typedef struct _fcgi_hash {
        fcgi_hash_bucket  *hash_table[FCGI_HASH_TABLE_SIZE];
        fcgi_hash_bucket  *list;
        fcgi_hash_buckets *buckets;
        fcgi_data_seg     *data;
    } fcgi_hash;
    typedef struct _fcgi_hash_buckets {
        unsigned int               idx;
        struct _fcgi_hash_buckets *next;
        struct _fcgi_hash_bucket   data[FCGI_HASH_TABLE_SIZE];
    } fcgi_hash_buckets;
    typedef struct _fcgi_data_seg {
        char                  *pos;
        char                  *end;
        struct _fcgi_data_seg *next;
        char                   data[1];
    } fcgi_data_seg;
    typedef struct _fcgi_hash_bucket {
        unsigned int              hash_value;
        unsigned int              var_len;
        char                     *var;
        unsigned int              val_len;
        char                     *val;
        struct _fcgi_hash_bucket *next;
        struct _fcgi_hash_bucket *list_next;
    } fcgi_hash_bucket;
结合如上的结构，就对如下代码进行一个简单的分析。  
对于每一个 fastcgi 的全局变量，都会先对变量名进行一个 `FCGI_HASH_FUNC` 计算，计算一个 idx
索引。`request.env.hash_table`其实是一个hashmap，在里面对应的 idx 位置存储着全局变量对应的
`fcgi_hash_bucket` 结构的地址。
打印一下来调试一下验证这一点：
    #define FCGI_PUTENV(request, name, value) \
        fcgi_quick_putenv(request, name, sizeof(name)-1, FCGI_HASH_FUNC(name, sizeof(name)-1), value)
    #define FCGI_HASH_FUNC(var, var_len) \
        (UNEXPECTED(var_len env, hash_value, var, var_len);
            return NULL;
        } else {
            return fcgi_hash_set(&req->env, hash_value, var, var_len, val, (unsigned int)strlen(val));
        }
    }
    static char* fcgi_hash_set(fcgi_hash *h, unsigned int hash_value, char *var, unsigned int var_len, char *val, unsigned int val_len)
    {
        unsigned int      idx = hash_value & FCGI_HASH_TABLE_MASK; // 127
        fcgi_hash_bucket *p = h->hash_table[idx];
        while (UNEXPECTED(p != NULL)) {
            if (UNEXPECTED(p->hash_value == hash_value) &&
                p->var_len == var_len &&
                memcmp(p->var, var, var_len) == 0) {
                p->val_len = val_len;
                p->val = fcgi_hash_strndup(h, val, val_len);
                return p->val;
            }
            p = p->next;
        }
        if (UNEXPECTED(h->buckets->idx >= FCGI_HASH_TABLE_SIZE)) {
            fcgi_hash_buckets *b = (fcgi_hash_buckets*)malloc(sizeof(fcgi_hash_buckets));
            b->idx = 0;
            b->next = h->buckets;
            h->buckets = b;
        }
        p = h->buckets->data + h->buckets->idx; // 找一个存储全局变量的空闲位置 
        h->buckets->idx++;
        p->next = h->hash_table[idx];
        h->hash_table[idx] = p;
        p->list_next = h->list;
        h->list = p;
        p->hash_value = hash_value;
        p->var_len = var_len;
        p->var = fcgi_hash_strndup(h, var, var_len); // 保存 key 
        p->val_len = val_len;
        p->val = fcgi_hash_strndup(h, val, val_len); // 保存 val 
        return p->val;
    }
    static inline char* fcgi_hash_strndup(fcgi_hash *h, char *str, unsigned int str_len)
    {
        char *ret;
        if (UNEXPECTED(h->data->pos + str_len + 1 >= h->data->end)) { //FCGI_HASH_SEG_SIZE =  4096 
            unsigned int seg_size = (str_len + 1 > FCGI_HASH_SEG_SIZE) ? str_len + 1 : FCGI_HASH_SEG_SIZE;
            fcgi_data_seg *p = (fcgi_data_seg*)malloc(sizeof(fcgi_data_seg) - 1 + seg_size);
            p->pos = p->data;
            p->end = p->pos + seg_size;
            p->next = h->data;
            h->data = p;
        }
        ret = h->data->pos; // 获取起始位置
        memcpy(ret, str, str_len);
        ret[str_len] = 0;
        h->data->pos += str_len + 1; 
        return ret;
    }
注意 `request.env.hash_table` 里面存储的是一系列的地址
2019-10-29-00-09-30.png  
但是这个地址分配在哪里呢？注意看如下结构体和代码:
    typedef struct _fcgi_hash {
        fcgi_hash_bucket  *hash_table[FCGI_HASH_TABLE_SIZE];
        fcgi_hash_bucket  *list;
        fcgi_hash_buckets *buckets;
        fcgi_data_seg     *data;
    } fcgi_hash;
    typedef struct _fcgi_hash_buckets {
        unsigned int               idx;
        struct _fcgi_hash_buckets *next;
        struct _fcgi_hash_bucket   data[FCGI_HASH_TABLE_SIZE];
    } fcgi_hash_buckets;
    static char* fcgi_hash_set(fcgi_hash *h, unsigned int hash_value, char *var, unsigned int var_len, char *val, unsigned int val_len)
    {
        unsigned int      idx = hash_value & FCGI_HASH_TABLE_MASK; // 127
        fcgi_hash_bucket *p = h->hash_table[idx];
      .....
        p = h->buckets->data + h->buckets->idx; // 找一个存储全局变量的空闲位置 
        h->buckets->idx++;
        p->next = h->hash_table[idx];
        h->hash_table[idx] = p;
        p->list_next = h->list;
        h->list = p;
        p->hash_value = hash_value;
        p->var_len = var_len;
        p->var = fcgi_hash_strndup(h, var, var_len); // 保存 key 
        p->val_len = val_len;
        p->val = fcgi_hash_strndup(h, val, val_len); // 保存 val 
        return p->val;
    }
从这些代码中可以看出 `request.env.buckets.data` 这个数组里面就保存了每个全局变量的对应的 `fcgi_hash_bucket`
结构。
接下来继续分析，发现 `request.env.buckets.data[n].var` 和
`request.env.buckets.data[n].val` 里面分别存贮这全局变量名的地址，和全局变量值的地址，这个地址是由
`fcgi_hash_strndup` 函数分配得来的。
    static inline char* fcgi_hash_strndup(fcgi_hash *h, char *str, unsigned int str_len)
    {
        char *ret;
        if (UNEXPECTED(h->data->pos + str_len + 1 >= h->data->end)) { //FCGI_HASH_SEG_SIZE =  4096 
            unsigned int seg_size = (str_len + 1 > FCGI_HASH_SEG_SIZE) ? str_len + 1 : FCGI_HASH_SEG_SIZE;
            fcgi_data_seg *p = (fcgi_data_seg*)malloc(sizeof(fcgi_data_seg) - 1 + seg_size);
            p->pos = p->data;
            p->end = p->pos + seg_size;
            p->next = h->data;
            h->data = p;
        }
        ret = h->data->pos; // 获取起始位置