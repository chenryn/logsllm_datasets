title:Fuzzing Error Handling Code using Context-Sensitive Software Fault
Injection
author:Zu-Ming Jiang and
Jia-Ju Bai and
Kangjie Lu and
Shi-Min Hu
Fuzzing Error Handling Code using 
Context-Sensitive Software Fault Injection
Zu-Ming Jiang and Jia-Ju Bai, Tsinghua University; Kangjie Lu, 
University of Minnesota; Shi-Min Hu, Tsinghua University
https://www.usenix.org/conference/usenixsecurity20/presentation/jiang
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Fuzzing Error Handling Code using Context-Sensitive Software Fault Injection
Zu-Ming Jiang, Jia-Ju Bai
Tsinghua University
Kangjie Lu
University of Minnesota
Shi-Min Hu
Tsinghua University
Abstract
Error handling code is often critical but difﬁcult to test
in reality. As a result, many hard-to-ﬁnd bugs exist in error
handling code and may cause serious security problems once
triggered. Fuzzing has become a widely used technique for
ﬁnding software bugs nowadays. Fuzzing approaches mutate
and/or generate various inputs to cover infrequently-executed
code. However, existing fuzzing approaches are very limited
in testing error handling code, because some of this code can
be only triggered by occasional errors (such as insufﬁcient
memory and network-connection failures), but not speciﬁc in-
puts. Therefore, existing fuzzing approaches in general cannot
effectively test such error handling code.
In this paper, we propose a new fuzzing framework named
FIFUZZ, to effectively test error handling code and detect
bugs. The core of FIFUZZ is a context-sensitive software
fault injection (SFI) approach, which can effectively cover
error handling code in different calling contexts to ﬁnd deep
bugs hidden in error handling code with complicated contexts.
We have implemented FIFUZZ and evaluated it on 9 widely-
used C programs. It reports 317 alerts which are caused by
50 unique bugs in terms of the root causes. 32 of these bugs
have been conﬁrmed by related developers. We also compare
FIFUZZ to existing fuzzing tools (including AFL, AFLFast,
AFLSmart and FairFuzz), and ﬁnd that FIFUZZ ﬁnds many
bugs missed by these tools. We believe that FIFUZZ can
effectively augment existing fuzzing approaches to ﬁnd many
real bugs that have been otherwise missed.
1
Introduction
A program may encounter various errors and needs to handle
these errors at runtime. Otherwise, the program may suffer
from security or reliability issues. While error handing is
critical, itself is error-prone. Firstly, error handling code is
difﬁcult to correctly implement [14, 23, 34, 54] because it
often involves special and complicated semantics. Secondly,
error handling code is also challenging to test [25, 28, 53, 61],
because such code is infrequently executed and often receives
insufﬁcient attention. For these reasons, many bugs may exist
in error handling code, and they are often difﬁcult to ﬁnd in
real execution. Some recent works [8, 32, 37, 68] have shown
that many bugs in error handling code can cause serious secu-
rity problems, such as denial of service (DoS) and information
disclosure. In fact, many CVE-assigned vulnerabilities (such
as CVE-2019-7846 [19], CVE-2019-2240 [20], CVE-2019-
1750 [21] and CVE-2019-1785 [22]) stem from bugs in error
handling code.
Considering that error handling code is critical but buggy,
various tools have been proposed to detect bugs in error han-
dling code. Some approaches [28, 32, 33, 37, 53] use static
analysis, but they often introduce many false positives, due to
the lack of runtime information and inherent limitations with
static analysis. To reduce false positives, recent approaches [1,
6,7,13,15,26,27,29,30,38,45,50,50,51,59,60,64,65] instead
use fuzzing to test infrequently executed code. They gener-
ate effective program inputs to cover infrequently executed
code, according to the input speciﬁcation or the feedback of
program execution. However, the input-driven fuzzing cannot
effectively cover error handling code, as some of this code
can be only triggered by non-input occasional errors, such
as insufﬁcient memory and network-connection failures. As
a result, existing fuzzing approaches cannot effectively test
error handling code.
Testing error handing code is challenging by nature, as er-
rors are often hard to deterministically produce. An intuitive
solution to triggering error handling code is to use software
fault injection (SFI) [52]. SFI intentionally injects faults or
errors into the code of the tested program, and then executes
the program to test whether it can correctly handle the in-
jected faults or errors at runtime. Speciﬁcally, the faults are
injected into the sites that can fail and trigger error handling
code, and we call each such site an error site. In this way,
SFI can intentionally cover error handling code at runtime.
Existing SFI-based approaches [9–11, 18, 25, 39, 40, 55, 67]
have shown encouraging results in testing error handling code
and detecting hard-to-ﬁnd bugs.
USENIX Association
29th USENIX Security Symposium    2595
However, existing SFI-based approaches suffer from a crit-
ical limitation: to our knowledge, they perform only context-
insensitive fault injection, which often stops testing from go-
ing deep. Speciﬁcally, they inject faults according to the lo-
cations of error sites in source code, without considering the
execution contexts of these error sites, i.e., the execution paths
reaching to the error sites. Thus, if a fault is constantly in-
jected into an error site, this error site will always fail when
being executed at runtime. However, an error site is typically
executed in different calling contexts, and real bugs can be
only triggered when this error site fails in a speciﬁc calling
context but succeeds in other calling contexts. In this case,
existing SFI-based approaches may miss these real bugs.
Figure 1 shows a simple example of this case. In the func-
tion main, the objects x and y are allocated, and then the func-
tions FuncA and FuncB are called. FuncA and FuncB both call
FuncP, but FuncB frees the argument object before calling
FuncP. In FuncP, the object z is allocated by calling malloc;
if this function call fails, the argument object is freed, and
the program exits abnormally by calling exit. If we perform
context-insensitive fault injection by just statically injecting
a fault into malloc in FuncP, the program will always exit
when FuncA is executed, without ﬁnding any bug. If we con-
sider calling context, and inject a fault into malloc in FuncP
only when FuncB calls FuncP, a double-free bug of the ob-
ject y can be triggered at runtime. Since such a case is fairly
common, it may incur a signiﬁcant impact on detecting bugs
in error handling code.
Figure 1: Examples of function calls that can fail.
In this paper, to effectively detect bugs in error handling
code, we design a novel context-sensitive SFI-based fuzzing
approach. The approach takes execution contexts into ac-
count to effectively guide SFI to maximize bug ﬁnding. It
consists of six steps: 1) statically identifying the error sites in
the source code of the tested program; 2) running the tested
program and collecting runtime information about calling
contexts of each executed error site and code coverage; 3)
creating error sequences about executed error sites according
to runtime information, and each element of such a sequence
is differentiated by the location of the executed error site and
the information about its calling context; 4) after running the
program, mutating each created error sequence to generate
new sequences; 5) running the tested program and injecting
faults according to the mutated error sequences; 6) collect-
ing runtime information, creating new error sequences and
performing mutation of these error sequences again, which
constructs a fuzzing loop.
Based on our approach, we propose a new fuzzing frame-
work named FIFUZZ. At compile time, to reduce manual
work of identifying error sites, FIFUZZ performs a static anal-
ysis of the source code of tested programs, to identify possible
error sites. The user can select realistic error sites that can ac-
tually fail and trigger error handling code. Then, FIFUZZ uses
our context-sensitive SFI-based fuzzing approach in runtime
testing. To be compatible with traditional fuzzing process
for program inputs, FIFUZZ mutates the error sequences and
program inputs together by analyzing runtime information of
the tested program.
Overall, we make the following technical contributions:
• We perform two studies of error handling code in widely-
used applications and vulnerabilities found by existing
fuzzing tools, and ﬁnd that: nearly 42% of sites that
can trigger error handling code are related to occasional
errors, but only few vulnerabilities found by existing
fuzzing tools are related to error handling code triggered
by occasional errors. Thus, it is important to improve
fuzzing to support the testing of error handling code.
• We propose a novel context-sensitive SFI-based fuzzing
approach, which can dynamically inject faults based on
both locations of error sites and their calling contexts, to
cover hard-to-trigger error handling code.
• Based on this approach, we develop a new fuzzing frame-
work named FIFUZZ, to effectively test error handling
code. To our knowledge, FIFUZZ is the ﬁrst systematic
fuzzing framework that can test error handling code in
different calling contexts.
• We evaluate FIFUZZ on 9 well-tested and widely-used
C applications of the latest versions as of our evalua-
tion. It reports 317 alerts which are caused by 50 unique
bugs in terms of the root causes. 32 of these bugs have
been conﬁrmed by related developers. We also com-
pare FIFUZZ to existing fuzzing tools (including AFL,
AFLFast, AFLSmart and FairFuzz) on 5 common pro-
grams in the Binutils toolset, and ﬁnd that FIFUZZ
ﬁnds many bugs missed by these tools.
The rest of this paper is organized as follows. Section 2
introduces background and our two studies. Section 3 intro-
duces basic idea and our context-sensitive SFI-based fuzzing
approach. Section 4 introduces FIFUZZ in detail. Section 5
shows our evaluation. Section 6 makes a discussion about
FIFUZZ and its found bugs. Section 7 presents related work,
and Section 8 concludes this paper.
2596    29th USENIX Security Symposium
USENIX Association
int main() {  x = malloc(...);  y = malloc(...);  ......  FuncA(x);  FuncB(y);  ......}void FuncA(x) {  FuncP(x);  ......}void FuncB(y) {  free(y);  FuncP(y);  ......}void FuncP(arg) {  z = malloc(...)  if (!z) {  free(arg);  exit(-1);  }  ......}Fault 1: main -> FuncA -> FuncP -> malloc   exit abnormally...Fault 2: main -> FuncB -> FuncP -> malloc   double free!2 Background
In this section, we ﬁrst introduce error handling code with
related bug examples, and then show our studies of error
handling code in widely-used applications and CVEs found
by existing fuzzing tools.
2.1 Error Handling Code
A program may encounter exceptional situations at runtime,
due to special execution conditions such as invalid inputs from
users, insufﬁcient memory and network-connection failures.
We refer to such exceptional situations as errors, and the code
used to handle an error is called error handling code.
In fact, errors can be classiﬁed into two categories: input-
related errors and occasional errors. An input-related error
is caused by invalid inputs, such as abnormal commands and
bad data. Such an error can be triggered by providing spe-
ciﬁc inputs. An occasional error is caused by an exceptional
event that occasionally occurs, such as insufﬁcient memory
or network-connection failure. Such an error is related to the
state of execution environment and system resources (such
as memory and network connection), but unrelated to inputs,
so it typically cannot be triggered by existing fuzzing that fo-
cuses on inputs. While this error occurs occasionally, they can
be reliably triggered in an adversarial setting. For example,
by exhaustively consuming memory, an attacker can reliably
result a function call to malloc() in returning a null pointer.
As such, bugs in error handing code can be as critical as the
ones in normal code.
2.2 Bug Examples in Error Handling Code
Figures 2 and 3 show two patches ﬁxing bugs in error handling
code of the libav library in ffmpeg [24]. In Figure 2, the vari-
able sbr->sample_rate could be zero, but it is divided in the
code, causing a divide-by-zero bug. This bug is also reported
as CVE-2016-7499 [48]. To ﬁx this bug, Patch A [46] checks
whether sbr->sample_rate is zero before this variable is di-
vided, and returns abnormally if so. The report of this bug [47]
mentions that this bug was found by AFL. On the other
hand, in Figure 3, the function av_frame_new_side_data
is used to allocate memory for new data, and it can fail
and return a null pointer when memory is insufﬁcient. In
this case, the variable dst->side_data[i]->metadata is
freed after dst->side_data[i] is freed, which causes a
use-after-free bug. To ﬁx this bug, PatchB [49] frees the
variable dst->side_data[i]->metadata before freeing
dst->side_data[i]. Because the report of this bug or the
patch does not mention any tool, the bug might be found by
manual inspection or real execution.
The bug in Figure 2 is caused by missing handling of an
input-related error, because the variable sbr->sample_rate
is related to the function argument sbr affected by inputs.
--- a/libavcodec/aacsbr.c
+++ b/libavcodec/aacsbr.c
@@ -334,6 +334,9
static int sbr_make_f_master(AACContext *ac,
SpectralBandReplication *sbr, ...) {
...
if (!sbr->sample_rate)
return -1;
// BUG: sbr->sample_rate may be zero
start_min = ... / sbr->sample_rate;
...
+
+
}
Figure 2: Patch A: ﬁxing a divide-by-zero bug.
--- a/libavutil/frame.c
+++ b/libavutil/frame.c
@@ -383,8 +383,8
int av_frame_copy_props(...) {
...
AVFrameSideData *sd_dst = av_frame_new_side_data(...);
if (!sd_dst) {
for (i = 0; i nb_side_data; i++) {
av_freep(&dst->side_data[i]->data);
av_freep(&dst->side_data[i]);
av_dict_free(&dst->side_data[i]->metadata);
av_freep(&dst->side_data[i]);
-
+
}
}
}
Figure 3: Patch B: ﬁxing a use-after-free bug.
The bug in Figure 3 is instead caused by incorrect handling of
an occasional error, because av_frame_new_side_data fails
only when memory is insufﬁcient, which occasionally occurs
at runtime.
2.3 Study of Error Handling Code
To understand the proportion of input-related errors and occa-
sional errors that can trigger error handling code in software,
we perform a manual study of the source ﬁles (.c and .h) of 9
widely-used applications (vim, bison, ffmpeg, nasm, catdoc,
clamav, cﬂow, gif2png+libpng, and openssl). Due to time con-
straints, if an application contains over 100 source ﬁles, we
randomly select 100 source ﬁles of this application to study.
Otherwise, we study all the source ﬁles of this application.
Speciﬁcally, we ﬁrst manually identify the sites that can fail
and trigger error handling code by looking for if or goto state-
ments, which are often used as entries of error handling code
in C applications [33]. Then, we manually check whether the