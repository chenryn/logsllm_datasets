ized database but, instead, might be distributed over multi-
ple databases that are managed by different units of the Uni-
versity. Our ABM system makes use of this information,
present in an enterprise’s collective databases, abstracted
as user attributes to dynamically create recipient lists. To
have this attribute information available to the ABM system
we envision the use of a data services layer (dubbed infor-
mation fabric by Forrester Research [20]) that exempliﬁes
the Service Oriented Architecture (SOA) approach [4] and
presents a view of the attribute data after extracting it from
the disparate databases.
To send an attribute based message to a group of recipi-
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006ents a user needs to specify the attributes in a logical expres-
sion. For example the expression ((position=faculty) and
(salary>$150000)) deﬁnes a group that constitute faculty
who make a salary of more than $150, 000. This expres-
sion is referred to as an ABM address and, in practice, can
be speciﬁed using the language of the database (e.g. SQL)
or via a commonly used query language that can be exe-
cuted on a variety of database technologies (e.g. XQuery
(www.w3.org/XML/Query/)).
A user is permitted to send a message to a given ABM
address based on his/her attributes. For example, only
a user who has the (cid:1)attribute, value(cid:2) pair (cid:1)position =
faculty(cid:2) or the pairs (cid:1)position = staff(cid:2) and (cid:1)designation =
coordinator(cid:2) (i.e., only faculty or coordinators), might be
allowed to send messages to the ABM address (position
= faculty) (i.e., all faculty). We specify access policies as
well as ABM addresses in disjunctive normal form to make
them ﬂexible and intuitive. Speciﬁcally, access policies
take the following form:
cond ⇒ (cid:2)attribute,(value)(cid:3);
satisﬁed then “access” is granted to (cid:2)attribute, (value)(cid:3)
where:
(value) is a set of discrete or enumerated values
(valuei, . . . , valuen),
cond = (T erm1) or (T erm2) or . . . (T ermn),
T ermi = (literal1) and (literal2) and . . . (literalm),
literalj = (attribute  value), and
arg is one of =, , ≤ or ≥.
the condition cond is
i.e.,
if
Therefore, we argue that the access rules can express a
variety of policies and, similarly, an ABM address can spec-
ify almost any arbitrary group based on attributes. ABAC
policies in ABM have similarities and differences with
those of more traditional enterprise services; e.g., ﬁle ac-
cess or web services [19]. They are similar in that just like
attributes may be mapped to ﬁle access permissions in ﬁle
systems, they would be mapped to the routable attribute. So,
the ABAC policy for the above example would grant “ac-
cess” to the (cid:1)attribute, value (cid:2) pair (cid:1)position = faculty(cid:2) if the
following expression of (cid:1)attribute, value(cid:2) pairs is satisﬁed:
(cid:1)position = faculty(cid:2) or (cid:1)position = staff(cid:2) and (cid:1)designation
= coordinator(cid:2).
They are different because unlike ﬁles one can envision
granting access to an ABM addresses that combine various
attributes in a logical expression. The equivalent notion in
ﬁle systems would be to have a policy that grants access
speciﬁcally to text that is common to two given ﬁles, which
is a level of granularity not seen in practice. Clearly, even in
ABM specifying a unique access policy for every possible
ABM address is not practical. To address this issue, we take
a simplifying, pragmatic approach: a user is allowed to send
messages to any combination (using logical and and logi-
cal or operands) of (cid:1)attribute,value(cid:2) pairs if she can send
messages to those pairs individually. This turns out to be
a reasonable approach because instead of choosing the or
operand the sender can easily send out multiple e-mails to
achieve the same effect and when the sender chooses the
and operand she only ends up targeting his e-mail to a nar-
rower set of recipients than she is allowed to. Therefore, at
most one access policy is required for each (cid:1)attribute,value(cid:2)
pair. In practice, there are various ways to reduce the num-
ber of policies, some of which are explored in Section 6.
4. Architecture
Figure 1 illustrates the architecture of our ABM system
and its associated access control system, which strongly in-
ﬂuences the overall structure. The ABM system comprises
a web server to help users compose policy compliant ABM
addresses, a PDP along with the access policy, an attribute
database, and an ABM server associated with an enterprise
MTA that resolves ABM addresses to recipient lists and me-
diates other components. The message ﬂows in our system
can be classiﬁed into three functional classes, viz., Policy
Specialization Path, Messaging Path and Address Resolu-
tion Path. We now describe these ﬂows in detail.
Policy Specialization (PS) Path. This path refers to the
message ﬂow in the system when a user logs into the web
server to compose policy compliant ABM addresses. These
messages are represented by dashed lines in Figure 1. In
step one the user authenticates herself to the web server.
In step two the web server sends the user’s information to
the ABM server and requests for a specialized policy for the
user. In steps three and four the ABM server retrieves user’s
attributes from the attribute database. In step ﬁve the ABM
server sends the user’s attributes to the PDP and requests
a specialized policy. The PDP then evaluates all the poli-
cies in a policy ﬁle against the user’s attributes and returns
the specialized policy, viz., a list of (cid:1)attribute, value(cid:2) pairs
that the user can route on. The ABM server then returns
the specialized policy to the web server in step seven. The
user then composes an ABM address and downloads it in
step eight. ABM addresses created using the web interface
include user’s e-mail id, are time-stamped, and are integrity
protected using SHA-1 Hash MAC. Messages using freshly
composed ABM addresses aren’t subject to an access policy
check at the ABM Server, in order to reduce the burden on
the PDP (e.g., within 24 hours; note that extent of freshness
is a system parameter and should be based on the dynamic
nature of policy and user attributes).
Messaging (MS) Path. This path is represented by solid
lines in Figure 1. Users send ABM messages using any
standard MUA 2 to a pre-speciﬁed e-mail address such
2ABM system can easily be integrated with web-based e-mail in en-
terpsises that use web-based e-mail system but for generality we assume
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Legend
Authenticate User
Policy Specialization
(PS) Path:
1.
2. User Info.(ID)
3. User Info.(ID)
4. User Attributes
5. User ID and 
Attributes
6. Routable Attributes
7. Routable Attributes
8.
ABM address
Messaging (MS) Path:
Web Server
PS2
PS7
PDP
Policy
xml
AR1
AR2
Attribute
DB
6
S
P
5
S
P
4
S
P
3
S
P
4
R
A
3
R
A
1.
Send and receive 
(ABM) messages
(SMTP)
2. Notify ABM Host 
and Send resolved 
messages
Address Resolution
(AR) Path:
1. User ID, Attributes 
and ABM Address
Authorization
decision
ABM Address
3.
4. Resolved list of 
2.
Addresses
1
S
P
8
S
P
Client
MS1
Figure 1. ABM Architecture
ABM Server
2
S
M
MTA
as PI:EMAIL, with the ABM address in-
cluded in the message as an attachment. The enterprise
MTA is conﬁgured to notify the ABM Server when it re-
ceives a message for the pre-speciﬁed address. The ABM
server after processing the message invokes the enterprise
MTA to deliver the message to a list of recipients as speci-
ﬁed by the ABM address.
Address Resolution (AR) Path. This path refers to the
message processing by the ABM server and is represented
by dotted lines in Figure 1. The ABM Server, on receiving
the (e-mail) message, verifes the Hash MAC on the ABM
address, verﬁes that the from address in the message is same
as the e-mail id included in the ABM address, and queries
the attribute database for the sender’s attributes. In step one,
the ABM server checks with the PDP that the sender is au-
thorized to send the message to the ABM address included
in the message. In step two, the PDP evaluates the policies
for accessing the attributes contained in the ABM address
against the sender’s attributes and responds in the afﬁrma-
tive only if the user is allowed access to all attributes in the
ABM address. The ABM Server then resolves the ABM ad-
dress to a list of e-mail addresses by querying the attribute
database in steps three and four. It then forwards the mes-
sage to each member in the list via the enterprise MTA.
the presence of an e-mail client like Outlook.
Security Analysis. Analyzing the proposed architecture,
one can see that the ABM system as described above is open
to replay attacks. A malicious user can steal an ABM ad-
dress, composed by a legitimate user in step PS8, either on
the network or from the user’s machine and use it to route
messages. This attack would be successful, even though
ABM addresses are integrity protected with a Hash MAC,
because the adversary can spoof the legitimate user’s e-mail
id. So when the ABM server receives the adversary’s e-
mail message it believes that the sender of the message is
the legitimate user (who composed the ABM address used
by the adversary). Hence, there is a need for the underly-
ing messaging system to provide the ABM server with an
authenticated e-mail id of the sender. Toward that end we
need to do the following: (1) have the enterprise MTA in-
voke the ABM server only for messages originating inside
the enterprise, (2) require SMTP authentication at the enter-
prise MTA, and (3) ensure that the user id used in SMTP
authentication and from address of the message being sent
are the same. Step one ensures that only enterprise users
can use the ABM system and can be achieved using mail
ﬁlters. Steps two and three ensure that the from address in
the received e-mail message is authentic. Popular MTAs
like SendMail support SMTP authentication and step three
can be achieved using mail ﬁlters.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20065. Implementation and Experimental Results
To test that the architectural framework presented in Sec-
tion 4 satisﬁes the manageability, deployability, and efﬁ-
ciency requirements for ABM, we implemented a prototype
ABM system. We used this prototype implementation as
a test bed for experimental evaluation. This section pro-
vides details on the prototype implementation, experimen-
tal setup, and performance results with the aim to show that
ABM can satisfy the above-mentioned requirements.
5.1. Implementation
We had to make a number of decisions on the technolo-
gies and programming languages to use for the major com-
ponents of our proposed architecture. These decisions, and
the reasoning behind them are brieﬂy discussed in this sec-
tion.
PDP. As it was described Section 2, we chose to use
XACML and Sun’s standards-compliant implementation of
its policy engine for our implementation. An XACML pol-
icy ﬁle is stored in conjunction with the PDP. This policy ﬁle
contains the policies for sending messages based on each
(cid:1)attribute, value(cid:2) pair. Our current implementation supports
numeric and enumerated attributes.
Database. Our system has been implemented using
two different database representations, relational and na-
tive XML. We included an XML database representation
in our evaluation as we envision data abstracted from het-
erogeneous enterprise databases to be in XML format. The
queries submitted to the XML database are XQueries, and
the queries for the relational database are expressed in SQL.
We had to chose a database management system with sup-
port for XML and XQuery as well as SQL. We used the
recently released community technology preview release of
Microsoft SQL Server 2005 (Standard Edition), which pro-
vides support for all the above mentioned data models and
query languages.
ABM Server. The ABM server is associated with an en-
terprise MTA. The ABM Server gets automatically invoked
when the MTA receives an ABM message targeted for the
inbox associated with the ABM Server. This enabled us to
use our domain MTA without any modiﬁcation. We used
C# to implement the ABM Server, and used the University