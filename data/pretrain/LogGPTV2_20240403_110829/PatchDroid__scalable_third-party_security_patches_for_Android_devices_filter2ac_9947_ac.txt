patch from injection to execution of the ﬁxed function.
Patch constraints.
Before a patch is injected into a process, several checks
are performed to ensure system stability. First, the Android
version running on the device is compared with the target
Android version in the patch metadata. The version check
is coarse-grained and is generally restricted to the major
Android version. The minor version is only compared in
rare cases where it is clearly known that a certain version
is not vulnerable to a speciﬁc bug. The issue of version
uncertainty was discussed in detail in Section 2.
A second check that is performed considers the impact of
failed patches. If a particular patch was injected before but
was observed to cause crashes, it will not be loaded again.
This feature is intended to ensure device stability, and is
essential for our ability to test patches in the ﬁeld.
Finally, target mismatches encompass failures to initialize
and load a patch correctly. For instance, a missing symbol
could cause this check to fail.
Once it has been determined that a speciﬁc patch should
be deployed in a target process, patchd will inject the shared
library implementing the patch into the target process.
Patch injection.
Patch injection is based on library injection via the ptrace
API. Injection proceeds in three steps. First, patchd writes
a loader stub to the stack of the target process consisting
of code along with data such as the full path to the shared
library that should be loaded. In the second step, the loader
stub is executed, which invokes mprotect to mark the stack
as executable.4 The loader stub loads the patch shared
library using dlopen and restores the register state after
dlopen returns. In the ﬁnal step, the dynamic linker trans-
4The patch library will later revert the memory protection
to its previous state.
fers execution to the injected library by calling the library’s
init function.
Performing reliable library injection entailed overcoming
several non-trivial challenges.
Process blocked on syscall. If a process (e.g., zygote) is
blocked on a system call, the library injection has to be post-
poned until the syscall is completed. Some syscalls cannot
be restarted, and some processes simply crash due to internal
state corruption shortly after library injection. In our tests,
we determined that most of the time, processes are blocked
on I/O polling functions such as select or poll. Also com-
mon, however, are sleep operations such as nanosleep.
There are two solutions for this problem. One approach
is to wait until the process completes the syscall by itself.
However, this is rather inconvenient as it is undesirable to
monitor and track blocked processes.
Instead, a better solution is to stimulate the process to
coerce it to return from the syscall. For zygote, this can be
done by forcing the creation of a new DVM instance, for
instance, by launching an application or service. In Patch-
Droid, this feature is implemented by part of the PatchDroid
user-level application that is presented later in this section.
Patching newly started processes. The ptrace API
allows patchd to reliably track and interpose on process cre-
ation. However, new processes need to execute until a cer-
tain point before the patch library can be injected into the
process without crashing it. There are multiple reasons for
this restriction. For instance, the dynamic linker must be
given the chance to load the executable and any necessary
libraries, and during this time, it is not safe to inject the
patch library. Additionally, patchd cannot inject the library
while the process is executing a syscall, since some syscalls
cannot be not restarted. Therefore, ﬁnding the proper point
to inject the patch library is not straightforward.
patchd uses a set of heuristics to determine when it is
safe to inject the patch library. For instance, in the case
of zygote, we determined that the process is safe to patch
when it changes its name to zygote from its parent process
(app process). patchd covers this scenario by tracing the
process until it changes its name. The tracing is performed
using TRACE_SYSCALL to check for the process name change
after it returns from syscall invocations. We note that even
though this operation seems expensive, our evaluation shows
that it is not. The actual monitoring is carried out through
our general patch deployment subsystem that constantly
checks the process name against the list of patch targets.
Once a process name matches a patch target, the process is
patched after which the heavyweight TRACE_SYSCALL trac-
ing is stopped. Since Dalvik processes are created by zygote
forking oﬀ a new process, PatchDroid is able to handle every
Dalvik process in this way.
For native processes, patchd waits until a speciﬁc syscall
such as select is executed that indicates that the process
has reached a stable phase of execution. After the syscall
returns, patchd pauses the process and injects the patch li-
brary.
Handling statically-linked code.
Patching statically linked code cannot be accomplished
using library injection. To handle this case, patchd imple-
ments a feature we term trace patching. The trace patcher
extends the process creation monitor and the patch injec-
tion code. Trace patching uses TRACE_SYSCALL tracing to
264
interpose on syscall invocations in order to monitor for ex-
ploitation attempts.
If an attempt is detected, the trace
patcher simply kills the process.
While this is a relatively intrusive technique, virtually no
processes on Android devices are statically-linked (i.e., to
save space on the ﬁlesystem). To date, only one vulnerability
aﬀecting adbd has required the use of this technique, and in
this case, tracing is only required for a short period during its
initialization; afterwards, adbd is not known to be vulnerable
and so tracing is discontinued.
6.3 Patch Monitoring and Attack Detection
The patch monitor is the subsystem responsible for mon-
itoring patches running inside of a patched process. Com-
municating with the patch code is required for multiple pur-
poses, most importantly for stability monitoring and attack
detection.
Patch monitoring is implemented in our prototype using
shared memory between the patched process and patchd.
The shared memory region is created by patchd just before
injecting the patch library into the target process. Once the
patch’s init function is executed, the patch code maps the
shared memory region and has access to its content.
We elected to use shared memory as the IPC mechanism
between the patched process and patchd for multiple rea-
sons. Shared memory has very low overhead, and therefore,
incurs a minimal performance impact. Using sockets would
potentially require additional permissions due to the An-
droid permission system. Since not all processes request
this permission, sockets are unsuitable in this context.
On Linux, multiple possibilities exist for sharing memory
between processes. Since the shm API is not supported on
all Android devices, we use mmap-based shared memory.
The details of the main use cases for patch monitoring are
discussed below. In addition, the shared memory segment is
used by patchd to conﬁgure runtime parameters of a patch
if necessary.
6.3.1 Patch Reliability
Reliability is one of the main goals of PatchDroid.
In
order to enforce reliability, we added the requirement for
entry end exit counters in each patch. These counters are
incremented every time the patch code is entered and exited.
This allows patchd to ensure that the patch code is actually
executed and to detect if the patch code caused a crash of the
process. A crash inside the patch is indicated if enter > exit.
The counters are inspected every time a patched process dies
and is restarted.
In addition, the patch can store a failure code to indicate
failures such as a missing symbol. Missing symbols indicate
that the patch and the process are not compatible. This
information is recorded so that the patch will not be injected
into the target process. This event is also forwarded to the
backend reporting system.
6.3.2 Attack Detection
Attack detection is implemented via a trigger condition
for each patch. The trigger condition evaluates to true in
the case that an exploit attempt is performed against the
patched vulnerability. The patch support code implements
a reporting function that communicates with patchd using
the shared memory channel. The attack attempt reporting
incorporates a counter that is increased every time the trig-
Figure 4: PatchDroid, running on a HTC WildFire,
notiﬁes the user about a detected exploitation at-
tempt.
ger condition is satisﬁed and a timestamp of the last counter
increment. In addition, the PID of the attacking process can
be reported if it can be determined, for example through the
metadata of a netlink socket.
6.3.3 Log Facility
The log facility simply provides the ability for the patch
code to log arbitrary information using the shared memory
region. The log information is collected by patchd. The log
facility is also used by the attack detection code to provide
additional information about attack attempts.
6.4 The PatchDroid App
The PatchDroid application implements multiple features
of PatchDroid that are required outside of patchd. For in-
stance, the app is responsible for installing patchd and the
patch libraries.
It also supplies the following features of PatchDroid: the
HelperService, the Attack Notiﬁcation UI, and the log ﬁle
uploader. The log ﬁle uploader uploads the patchd log ﬁle
to our web service for analysis.
6.4.1 HelperService
The HelperService is used during patch deployment. The
HelperService is a Android service whose sole purpose is to
wake up zygote by forcing it to start the HelperService by
sending it a broadcast intent. In response, the service starts
up and terminates immediately.
6.4.2 Attack Notiﬁcation UI
When PatchDroid detects an exploitation attempt, it no-
tiﬁes the user through a broadcast receiver contained in the
PatchDroid app. The patch daemon creates an intent that
contains a message to be displayed to the user. The app
receives the intent and displays the message to the user as
shown in Figure 4.
6.5 Patches
We implemented proof-of-concept patches for four vulner-
abilities: Zimperlich, GingerBreak, zergRush, and local SMS
spooﬁng. Each patch is implemented as a self-contained
shared library, this provides the capability to load the li-
brary from outside the /system/lib directory. Common
code such as to lookup and hook functions and to access
the shared memory segment to communicate with patchd is
statically-linked into each patch.
As an example, we discuss the patch we developed to
ﬁx the setuid() vulnerability in zygote (the Zimperlich ex-
ploit). This patch consists of only the init and the ﬁxed set-
uid() functions. The init function maps the shared memory
and inserts our ﬁxed function to be called in place of se-
tuid(). Figure 5 shows the code for our implementation of
265
ﬁxed setuid(). It contains the stability tracking counters as
well as the attack detection trigger.
1
2
3
4
5
6
7
8
9
10
11
12
int fixed_setuid(uid_t uid)
{
track->c_enter++;
int res = orig_setuid(uid);
if (res == -1) { // possible attack
pd_signal_attack(track);
track->c_exit++;
exit(0);
}
track->c_exit++;
return res;
}
Figure 5: Fix for the setuid() vulnerability in zygote.
The entry and exit counters are handled in Lines 3,
7, and 10. The original function is called on Line
4. Line 5 implements the check of the return value.
Lines 6 and 8 handle the attack condition.
7. EVALUATION
In this section, we present an evaluation of our Patch-
Droid prototype. The goal of the evaluation is threefold:
(a) to demonstrate that known vulnerabilities are eﬀectively
blocked, (b) to measure the performance overhead incurred
by PatchDroid, and (c) to demonstrate that PatchDroid is
stable and usable for end users.
7.1 Functional Evaluation
For the functional evaluation, we acquired multiple An-
droid devices running diﬀerent Android versions that con-
tain a number of known vulnerabilities. The test devices and
exploits we used for this evaluation were the HTC Wildﬁre
S Android 2.3.3, vulnerable to GingerBreak and ZergRush;
Motorola FlipOut Android 2.1, vulnerable to GingerBreak,
ZergRush, and Zimperlich; (a) and, HTC One V Android
4.0.1, vulnerable to Dalvik-based SMS spooﬁng.
Our methodology for this evaluation was to:
(a) exploit
a vulnerability on a device without PatchDroid installed to
demonstrate that the device is indeed vulnerable to a spe-
ciﬁc vulnerability; (b) install PatchDroid; (c) and, run the
exploit to determine whether PatchDroid prevents success-
ful exploitation. Some exploits determine and output if the
target device is vulnerable or not.
Most of the privilege escalation exploits [25, 26] are pack-
aged as a single binary that is copied to the device and is
executed from an ADB shell. Other exploits, such as Zim-
perlich [16] come in the form of an Android (APK) that
must be installed and run from the application launcher.
For the local SMS spooﬁng vulnerability, we used an open
source proof-of-concept [6] to trigger the vulnerability and
to evaluate our patch.
For all device and exploit combinations, PatchDroid suc-
cessfully patched the vulnerability, stopped the exploit, and
notiﬁed the user of the attack attempt.
7.2 Performance Overhead
The goal of our performance evaluation was to determine
the overhead that is imposed by running PatchDroid on an
Android device. Benchmarking PatchDroid is not straight-
forward since it does not modify the system signiﬁcantly.
s
d
n
o
c
e
s
i
l
l
i
M
 220
 200
 180
 160
 140
 120
 100
 80
 60
 40
Zygote Spawn Benchmarks
PatchDroid
Plain
Motorola FlipOut
HTC Wildfire S
Galaxy Nexus
Figure 6: Overhead for starting new processes added
through PatchDroid.
patchd traces init and zygote using ptrace, but only exe-
cutes expensive operations during and shortly after process
creation. The patches themselves incur a slight overhead