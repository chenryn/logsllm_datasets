title:They Would do Better if They Worked Together: The Case of Interaction
Problems Between Password Managers and Websites
author:Nicolas Huaman and
Sabrina Amft and
Marten Oltrogge and
Yasemin Acar and
Sascha Fahl
2021 IEEE Symposium on Security and Privacy (SP)
They Would do Better if They Worked Together:
The Case of Interaction Problems Between Password Managers and Websites
Nicolas HuamanC ∗
Sabrina Amft∗
Marten OltroggeC
Yasemin Acar† ∗
Sascha FahlC ∗
CCISPA Helmholtz Center for Information Security
∗Leibniz University Hannover
†Max Planck Institute for Security and Privacy
4
9
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—Password managers are tools to support users with
the secure generation and storage of credentials and logins
used in online accounts. Previous work illustrated that building
password managers means facing various security and usability
challenges. For strong security and good usability, the interaction
between password managers and websites needs to be smooth and
effortless. However, user reviews for popular password managers
suggest interaction problems for some websites. Therefore, to the
best of our knowledge, this work is the ﬁrst to systematically iden-
tify these interaction problems and investigate how 15 desktop
password managers, including the ten most popular ones, are
affected. We use a qualitative analysis approach to identify 39
interaction problems from 2,947 user reviews and 372 GitHub
issues for 30 password managers. Next, we implement minimal
working examples (MWEs) for all interaction problems we found
and evaluate them for all password managers in 585 test cases.
Our results illustrate that a) password managers struggle to
correctly implement authentication features such as HTTP Basic
Authentication and modern standards such as the autocomplete-
attribute and b) websites fail to implement clean and well-
structured authentication forms. We conclude that some of our
ﬁndings can be addressed by either PWM providers or web-
developers by adhering to already existing standards, recommen-
dations and best practices, while other cases are currently almost
impossible to implement securely and require further research.
I. INTRODUCTION
Username and password combinations remain the dominant
authentication mechanism on the web. Although signiﬁcant
effort has been invested into developing alternative authen-
tication solutions [36], [41], [52], [65] and helping users to
use more secure passwords [34], [69], many users still rely
on passwords that are easy to guess [35], [48], [71] and re-
use the same password for multiple accounts [46], [58], [72],
[73]. Alternative methods like FaceID or ﬁngerprint sensors
for authentication also resort to passwords chosen during their
setup [38].
Online services are encouraged to deploy multi-factor
authentication (MFA) such as timed one-time-passwords
(TOTP) [40], [61]–[63] to address the password security
problems and strengthen account security, which still rely
on passwords as the ﬁrst factor. To address the need for
passwords, the use of password managers (PWMs) is often
recommended for end-users. In a nutshell, PWMs are tools
to help users deal with credentials and reduce their mental
load for password creation, account
login and credential
updates [1], [8], [12], [14], [15], [20], [22]. PWMs have
been researched extensively [47], [51], [56], [59], [60], [64];
previous research on PWMs mostly focuses on PWM security
issues and usability and adoption challenges. Multiple studies
researched the security of different PWM types, ﬁnding that
both browser-based and locally installed PWMs are vulner-
able to problems such as key theft or secret recovery from
temporary ﬁles, as well as weaknesses within typical features
such as autoﬁll [64]. Other research focused on the usability
of PWMs and were able to show that user adoption of PWMs
is motivated by convenience of usage and usability [59].
While security beneﬁts can also be a driving factor for PWM
adoption, in the majority of cases these where only mentioned
for accounts that users perceive as especially important.
Overall, previous work identiﬁed signiﬁcant security and
usability challenges PWM providers should address to improve
overall password security [39]. However, in addition to the
previously identiﬁed challenges, PWM usability and adoption
also depend on how well PWMs and websites can interact
with each other [2], [17], [42]. Websites that do not accept
auto-generated passwords, prevent autoﬁll and autologin of
stored credentials or make credential storage for accounts
complicated contribute to bad PWM usability and thwart
their adoption. Examples of poor PWM support in websites
are sites that manipulate forms using JavaScript or fail to
deﬁne input ﬁeld attributes, making these interactions harder.
While these issues are discussed in online forums [2], [17]
and blog posts [42] and providers of web browsers suggest
novel mechanisms to better support PWMs (e. g. Apple’s
passwordrules [57]), a systematic analysis of poor interactions
between websites and PWMs that make their use unnecessarily
complicated or even impossible is missing so far. To the best
of our knowledge, our work is the ﬁrst to investigate those
poor interactions reported by real PWM users, to analyze how
15 popular desktop PWMs deal with these circumstances and
to propose ideas based on our results for future PWMs and
websites for better PWM usability and password security on
the web.
In the course of the following work, we address the follow-
ing research questions:
RQ1: Which interaction patterns on the web are problematic
for password managers?
RQ2: How do PWM browser extensions handle these interac-
RQ3: What can be done to improve the interaction between
tions?
PWMs and websites?
© 2021, Nicolas Huaman. Under license to IEEE.
DOI 10.1109/SP40001.2021.00094
1367
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
To the best of our knowledge, this work is the ﬁrst to in-
vestigate interaction challenges between browser-based PWMs
and websites that impact both password security and usability
and end-user PWM adoption. Based on the above research
questions, we make the following contributions.
Systematic Problem Survey — We perform a systematic
analysis of 3,319 reviews and issues users of 30 browser-based
PWMs report in the Chrome Web Store, and on GitHub. Based
on this analysis, we identify 39 interactions that demonstrably
hindered end-users using PWMs in real-world settings.
Minimal Working Examples (MWEs)1 — We build a
simple website including minimal implementations of the pre-
viously identiﬁed interactions PWMs struggle with, based on
the results of our systematic problem survey. With this website,
we can extensively test PWMs regarding their performance
and supported features.
PWM Problem Evaluation — We test 15 popular browser-
based PWMs on the 39 MWEs we implemented. Our analysis
shows that in many cases, PWMs have issues working with
websites that include complex or non-standard implementa-
tions, but also with standards like ”basic” HTTP Authentica-
tion.
Recommendations — We investigate existing web stan-
dards [3], [7], [10], [18], [44] in regards to the problems
we found to be most prevalent in our PWM evaluation, and
propose how existing standards and approaches can already be
used to solve most of the problems we discover. Furthermore,
we propose potential vectors for extensions of standards that
solve the remaining issues.
Detailed Replication Information — We provide an ex-
tensive replication package including the set of collected user-
complaints, the resulting code book, and the 39 MWEs derived
from the code book (cf. Section V-D. In addition, we provide
the implementations of the MWEs and demo screen captures
to replicate our approach (cf. Section V-D) along with our
results.
This work focuses on desktop PWMs and their browser
extensions. While we considered adding mobile PWMs, these
have very different requirements, as they can e. g. use APIs
provided by Android [4] and iOS [3] and are focused on user
installed apps.
The rest of the paper is organized as follows: We discuss
related work and the relevant background in Section II and
Section III. In Section IV we describe our systematic problem
survey based on real-world end-user feedback. Section V
details the analysis of 15 popular PWMs using our set of 39
MWEs. Finally, we discuss our ﬁndings and propose strategies
to mitigate the problems PWMs struggle with in Section VI.
II. RELATED WORK
While there have been many different attempts to replace
passwords as the main authentication method on the web,
none of the proposed alternatives were able to supersede them.
1In software development, MWEs are used to illustrate problems or bugs
within code while only consisting of the most relevant features [27].
Moreover, most attempts that improve authentication security
come with high costs in terms of decreased usability [37].
PWMs yield a solution to this problem by removing the need
to memorize passwords and storing them in a secure man-
ner, which enables users to choose stronger passwords [51].
Previous research already paid attention to several aspects of
PWMs. In the following section, we present an overview of
these works, focusing on PWM security and vulnerabilities as
well as usability and adoption.
PWM Security. Overall, different studies were able to show
that many popular PWM solutions are vulnerable to different
forms of attacks. In 2013, Zhao et al. [74] analyzed the
PWMs included in ﬁve different browsers and ﬁnd severe
vulnerabilities as attackers can e. g. steal the ﬁles in which keys
are stored to decrypt them. As an alternative, they propose a
cloud-based approach. Similar to this, Li et al. [50] conducted
an analysis of ﬁve browser-based PWMs and identify 4 key
security concerns within bookmarklets, the UI, and classic
web or authorization vulnerabilities. While these studies were
focused on browser-based PWMs, in 2016 Gray et al. [47]
evaluated the security of KeePass, RoboForm and Password
Safe, three locally installed PWM applications. They reveal
security problems with e. g. secret information such as the
master password or database content recoverable from tem-
porary ﬁles, in some cases even after the applications were
terminated.
Although most of the research concerning PWM security
was conducted more than ﬁve years ago, recent work shows
that the problems are still persisting. In 2020, Oesch et al. [56]
were able to replicate previous studies and evaluate the secu-
rity of 13 PWMs. While they found improvements for several
features such as password storage or autoﬁll security, they
were also able to reproduce severe vulnerabilities especially
within the password generation.
In 2014, Silver et al. [64] were able to show that especially
the autoﬁll functionalities of PWMs are often vulnerable. They
review different types of PWMs and their various policies to
recognize relevant form ﬁelds, ﬁnding them susceptible to at-
tacks via e. g. modiﬁed web forms or unencrypted connections.
Furthermore, Zhao et al. [68] evaluated the top 4,000 Alexa
pages and found 86.3% of websites offering login ﬁelds
vulnerable to XSS-based attacks. As a solution, they proposed
an alternative approach in which only dummy input is entered
into the web form and the real password directly transmitted
in the respective HTTP request.
While previous work focuses on the security within PWM
applications, our research concentrates on the usability of
PWMs and their ability to adapt to frequent problems or edge
cases.
PWM Usability and Adoption. Several previous works focus
on the usability and adoption motivations for PWM usage. In
2006, Chiasson et al. evaluated the usability of two PWMs that
previous research proposed. Both showed signiﬁcant problems
that did not only limit the usability, but in some cases lead
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1368
to security issues that lead to e. g. user misconceptions on
whether or not their passwords were protected [39].
Another usability study was conducted in 2010 by Karole
et al., who examined three different types of PWMs. They
chose a locally installed LastPass, a mobile KeePass version as
well as an USB-based RoboForm approach, ﬁnding that users