(whyl=
7/尝试捕提异常
（）（
tb->tb_lineno =PyCode_Addr2Line(frame->Ecode,
EbLNULL)
if
Pyobjeot_Gc_Track(tb);
//建立链表
(Why1=WHY_NOT）//[1]
PyEval_EvalFraneEx(PyFrameobjeet
break;
创建对象
WHY RETURN)
snext,
newtracebackobfect
：利用retva通知前一个栈顿有异常出现
PyFrameobject *frame)
10.4
Python源码剖析
Python虚拟机中的异常控制流
深度探索动态语言核心技术
frame->f_lasti):
205
---
## Page 236
Python源码剖析
206
回到PyRun_SimpleFileExFlags中至于为什么会是这个PyRun_SimpleFileExF1ags，
给出了最终所建立的traceback对象链表：
Python虚拟机不断创建与各个栈帧对应的traceback对象，并将其链接成链表。图10-14
traceback对象，同样是寻找程序员指定的except，如果没有指定异常捕捉动作，那么同
EvalFrameEx中后再次意识到有异常产生。接下来的动作就顺利成章了。同样是创建
中。由于在返回时，设置的retval为NULL，所以Pyhon虚拟机在回到与g对应的PyEval
导致pyEval_EvalFrameEx结束时，自然要返回到与函数g对应的pyEval_EvalFrameEx
中执行与h对应的pyFrameobject对象中的字节码指令序列了。所以当在h中发生异常
h创建新的PyFrameObject对象，同时递归调用PyEval_EvalFrameEx，不过这回是在其
对应的pyFrameobject对象中的字节码指令序列。当在g中调用h时，Python虚拟机为
对象有一个链表，那么PyEval_EvalFrameEx也就只能通过递归与链表结构对应了。
些端倪，这是一个与某个PyFrameObject对象的执行有关的函数，既然pyrrameObject
Pyhon虚拟机运行时，这个函数是会被递归调用的。从这个函数的函数名上也可以看出一
里去了。
EvalErameEx返回到什么地方去了？嗯，答案肯定会让你迷惑，返回到eyEval_EvalFrarneEx
帧回退的动作。
10-3的[2]处被设置为NULL。同时，通过重新设置当前线程状态对象中活动栈帧，完成栈
个For循环。最后，由于异常没有被捕捉到，PyEval_EvalFrame的返回值将在代码清单
why的值仍然是wHY_EXcEPTION，那么将会通过break动作跳出Pyhon执行字节码的那
10-3的[1]处，这里也是Pyhon虚拟机的主for循环的结尾处，由于异常没有被捕提到，
由于我们没有设置任何的异常捕捉代码，所以最后Pyhon虚拟机的执行流程会一直返
这个沿着栈帧链不断回退的过程我们称之为栈帧展开。在这个栈帧展开的过程中，
举个例子，当Python虚拟机执行函数g时，它是在PyEval_EvalFrameEx中执行与
前面我们说了，PyEval_EvalFrameEx是Python虚拟机的主要实现代码实际上，当
PyBval_EvalFrameEx到这里就结束了，但是一个重要的问题随之而生，PyEval
第10章Python虚拟机中的控制流
可以看到，如果开发人员没有提供任何捕捉异常的动作，那么程序将执行到代码清单
深度探索动态语言核心技术
图10-14traceback对象链表与PyFrameObject对象链表
Py文件
追行时程
进行时
遥行时线
g(
back
运行时栈
ho
tb_frame
frame对象链表
traceback对象链表
---
## Page 237
10.4.2.1
10.4.2
excepion_control.py的剖析研究Pyhon语言所提供的异常控制结构如何影响Python虚拟
最终我们也就看到了图10-13所展示的异常信息。
息中取出其维护的traceback对象，并遍历traceback对象链表，逐个输出其中的信息，
下来，会调用PyErr_Print。正是在这个PyEr_Print中，Python虚拟机从线程状态信
和作用了。
我们先可以放下不管。以后在分析Pyton运行时初始化时，就可以看到这个函数的地位
机的异常处理流程。
常的动作，并没有使用Python语言中提供的异常控制结构。在本节中，我们将通过对
时的栈帧展开行为。但遗憾的是，在前面我们只是考察了Python虚拟机中内建的处理异
这个动作在虚拟机的级别上对应的是什么行为：最后，我们还剖析了Pyhon在处理异常
[pythonrun.c]
22DUP_TOP
[exception_control.py]
一
caise Exception(iam an
2
SETUP_EINALLY
SETUP
在前面，我们细致地考察了Pyhon的异常在虚拟机的级别上是什么东西，抛出异常
return 0;
JUMP_FORWARD
POP_BLOCK
LOADLNAME
RAISE
LOADLCONST
研究对象
Python中的异常控制语义结构
return -1;
PyErr_Print(）;
PyRun
VARARGS
PyCompilerrlags *flags)
ileExFlags(fp,filename, Py_file_input,@,d,closeit,flags）
e:
-exception_control.py
26(to 48)
exception)
(Exception)
(to
22
10.4Python虚拟机中的异常控制流
Python源码剖析
一深度探索动态语言核心技术
207
---
## Page 238
Python源码剖析
208
typedef struct
为了方便，
typedef struct_frame
void PyFrame_Blocksetup（ByFrameobject *f,int tYpe, int handler,int level)
[frameobject.c]
48
[frameobject.h]
[frameobject.h]
N
Pyrrameobject;:
PyTryBlock:
第10章
事到如今，想必聪明的你一定看出来了，SETUP_FINALLY和SETUP_EXCEPT两条指令
开始的两条字节码指令似曾相识，其实在前面剖析Python的循环结构的时候，我们
int
int
int
b->b_handler
B->bLeve1
PyTryBlock
RETURN VALUE
LOAD_CONST
END_FINALLY
PRINT_NEWLINE
PRINT_ITEM
LOAD_CONST
print
LOAD_CONST
POPBLOCK
END_FINALLY
PRINT NEWLINE
PRINTITEM
LOAD_NAME
POP_TOP
STORE_NAME
POP_TOP
POPTOP
JUMP_IF_FALSE
COMPARE_OP
LOAD_NAME
=&f->f_blockstack[f->f_iblock++];
POP
TUMP
b_level;
b_type:
_iblock;
这里再次给出PyFrame_BlockSetup的相关代码：
mop
FORWARD
一深度探索动态语言核心技术
iche
Python虚拟机中的控制流
=type;
finally code
=handler;
what kind of block this is */
value
2(the
一
14（046)
10
(None)
(None)
（七o48）
(e)
(Exception)
(exception
finally code
match)
---
## Page 239
指令的工作就从把这个异常对象从运行时栈取出开始。
此处只需知道一个异常对象已被创建），并将此异常对象压入运行时栈中。RAISE_VARARGS
的剖析和对象的构造、创建并非本章关注重点，所以这里不详述，以后自有独立章节剖析，
回到抛出异常的地方：“15RAISE_VARARGS1”。在RAISE_VARARGS指令之前，通过
不过是从f_blockstack中分走两块出去，图10-15展示了当前_blockstack的情景：
异常的代码（见代码清单10-4）
象），Python虚拟机将携带着（why=WHY_ExCEPTION，_ib1ock=2）的信息抵达真正捕捉
条不紊地展开了。在经过了一系列繁复的动作之后（其中包括创建并设置traceback对
码指令的那个巨大的switch语句。一旦结束了字节码指令的分发，异常的捕捉动作就有
这就是why变量的最终状态。在此之后，Pyhon虚拟机通过一个break跳出了分发字节
异常对象存储到当前线程的状态对象中。在do_raise的最后，返回了一个WHY_EXCEPTION，
用do_raise函数。在do_raise中，最终将调用之前剖析过的PyErr_Restore函数，将
[RAISE_VARARGS]
LOAD_NAME O、LOAD_CONSTO、CALL_FUNCTION1构造出了一个异常对象（CALL_FUNCTION
这里RAISE_VARARGS后的指令参数是1，所以直接将异常对象取出赋给W，然后就调
在这里分出两块PyTryB1ock，肯定是要在捕捉异常时使用。不过别着急，让我们先
图10-15SETUP_FINALLY和SETUP_EXCEPT完成后的f_blockstack
break:
default:
case0:
case
case 2:
case 3:
switch
fiblock=2
fblockstack-
PyErr_SetStrIng(PyExc_SystemError
Why=WHY_EXCEPTTON:
breaky
onoutte
(oparg)
POP(:
W=NU
bad
Fallthrough
RATSE
/*traceback*
VARARCS Oparg");
10.4
Python源码剖析
bhandler=22
Python虚拟机中的异常控制流
一深度探索动态语言核心技术
209
---
## Page 240
Python源码剖析
210
traceback对象：
Python虚拟机通过PyErr_Fetch得到了当前线程状态对象中存储的最新的异常对象和
SETUP_ExCEPT、b_handler=22）的PyTryBlock。另一方面，在代码清单10-4的[2]处，
f_blockstack中弹出一个pyTryBlock来，从图10-15中可以看到，弹出的这个是（b_type=
void PyErr_Fetch（PyObjec **p_type,
[errors.c]
代码清单10-4
tetate->curexc_type= NuLl;
*p_traceback)
PyThreadState *tstate=PyThreadstate_GE()；
在代码清单10-4的[]处，Python虚拟机首先从当前的PyFrameobject对象中的
*p_traceback =tstate->curexc_traceback:
*p_yalue =tstate->curexc_valuef
*p_type =itstate->ourexe_type;
第10章
if
一深度探索动态语言核心技术
break:
（why1=WHY_NOT)//[31：不存在异常处理代码，展开堆栈
Python虚拟机中的控制流
PyTryBlock*b=
break;
JUMPro(b->b_handler))
why= WHY_NOT;
elser
PUSH(exc);
PUSH(tb)
1/[2]：获得线程状态对象中的异常信息
WHY_NOT&&f->f1blOek>O）（
Fetch（&exc,&val,&tb）;
AHM
PyFrame_BlockPop(t);
EXCEPTTON)
vall
Pyobject **p_value,
&& Why==WHY_EXCEPTTON)）
Pyobjeet
---
## Page 241
现异常不匹配，那么JUMP_IF_FLASE将跳跃到偏移量为46的字节码指令：POP_TOP
指令跳跃。如果COMPARE_OP的操作结果发现异常匹配，那么JUMP_IF_FALSE就不会进行
运行栈中存在的那个被捕捉到的异常是否跟except表达式中指定的异常匹配。随后通过
control.py的编译结果来看，正好就是“22DUP_POP”，异常处理代码对应的第一条字节码
22.这时Python虚拟机将要执行的下一条指令就是偏移量为22的那条指令，从excepion
代码编译后所得到的第一条字节码指令。
仅仅是进行了一下指令的跳跃，将Pyuon虚拟机将要执行的下一条指令设置为异常处理
程序员指定的代码来解决，这个动作通过JUMPTO（b->b_handler）来完成。JUMPTo其实
常状态”转为WHY_NOT代表的“正常状态”了。而接下来的处理异常的工作，则需要交给
好了准备，那么Python虚拟机认为自己的状态可以从WHY_EXCEPTION所代表的“发现异
型为SETUP_EXCEPT的pyTryB1ock对象，已经意识到程序员在代码中已经为捕提异常做
拟机的执行路径沿着代码清单10-4的[1]、[2]一路向下之后，Pyton虚拟机发现了一个类
怎么会是WHY_NOT呢？不是有异常发生了吗？没错，确实应该是WHY_NOT，在Pyhon虚
10-16清晰地展示了处理异常时所发生的不同的指令跳跃：
指令跳跃，而是接着执行“printe”表达式对应的字节码指令：而如果coMPARE_op发
一条进行指令跳跃的字节码指令“29JUMP_IF_FALSE14（to46）”来判断是否需要进行
指令。
随后，Python虚拟机将tb、valexc分别压入到运行时栈中，并将why设置为wHy_NOT。
tstate->curexc_traceback=NULli;
tstate->curexc_valne =NuLL:
异常不匹配