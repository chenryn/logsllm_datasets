### System Call Monitoring with Authenticated System Calls

#### 1. Introduction
This paper introduces a novel approach to system call monitoring using authenticated system calls. This method involves minor modifications to the kernel and the use of cryptographic techniques to ensure the integrity of policy enforcement. The approach is designed to be efficient and secure, with minimal impact on system performance.

#### 2. Kernel and Application Modifications
To implement authenticated system calls, the following steps are taken:

1. **Kernel Modification**:
   - A single counter variable is maintained for each process, initialized to 0 and stored in kernel space.
   
2. **Installer Modification**:
   - Two variables are added to the data segment of each application:
     - A variable to hold the policy state (a byte string).
     - A variable to hold a Message Authentication Code (MAC) for the state.
   - The policy state is initialized according to the policy, and the state MAC is calculated over the initial state and the initial application counter value (0).
   - Pointers to the policy state and state MAC are passed as additional arguments in each authenticated system call.

3. **System Call Verification**:
   - During system call checking, if the policy for the system call depends on the policy state, the kernel recomputes the state MAC using the application counter and the policy state passed in the call.
   - If the recomputed MAC matches the state MAC passed by the application, the call is allowed to proceed; otherwise, the application is terminated.
   - If the policy requires changing the policy state, the kernel increments the application’s state counter and calculates a new state MAC over the new counter value and policy state. The new state MAC is then stored in application space.

4. **Cryptographic Assumptions**:
   - It is computationally infeasible for an adversary to compute a valid MAC for a desired policy state and state counter.
   - The kernel-space state counter prevents the reuse of state MACs computed by the kernel for previous states.

#### 3. Policy Examples

##### 3.1. Call Graph Policy
A useful example of a state-based policy is one based on the application's call graph. Such a policy can require that the application's system call trace follows a path in the call graph, providing further protection against compromised applications.

- **Implementation**:
  - The installer computes the call graph of the system calls of an application.
  - Each node in the call graph is labeled by its call site.
  - The policy state becomes the call site of the last node executed by the application.
  - The policy of each system call is extended to ensure that the policy state is one of the predecessors of the system call in the static call graph.
  - The kernel verifies that the previous call site is in the list of predecessors given in the policy and updates the policy state to the new call site.

##### 3.2. Capability Tracking Policy
Another useful feature for policies is the ability to specify that an argument to a system call be based on arguments or return values of previous system calls. For example, a policy for a read system call might require that the file descriptor argument be a value returned by a previous open system call.

- **Implementation**:
  - A naive implementation would store the last file descriptor returned by each call to open. However, this approach does not account for multiple open calls, active file descriptors, and reused file descriptors.
  - A better approach is to store, for each open system call, a set of currently active file descriptors. The policy for each open adds a file descriptor to the set, while the policy for close removes a file descriptor.
  - This involves more complex data structures, such as authenticated dictionaries, to manage the set efficiently.

#### 4. Discussion

##### 4.1. File Name Normalization
A recurring problem for system call monitors is dealing with race conditions caused by features like symbolic links and relative file names. To address this, system call monitors often use the convention that a file name in a policy must refer to the normalized file name, i.e., the name of the file after all symbolic links have been followed.

- **Normalization**:
  - Strategies developed for performing normalization in the kernel during syscall checking can be applied.
  - Some processing can be moved into the untrusted application, similar to the techniques used for state-dependent policies.

##### 4.2. Frankenstein Attacks
An application protected by our approach can become compromised, e.g., through a buffer overflow, giving an attacker control of the application process. The process cannot execute arbitrary system calls but can execute any authenticated system calls in the application, provided it does not change the call site and parameters covered by the policy.

- **Defense**:
  - Call graph policies can defend against Frankenstein attacks by requiring an application to execute system calls in an order consistent with its static call graph.
  - The call graph of an application is self-contained, so a Frankenstein program would be forced to execute only the system calls of a single application.
  - String literals in policies should be protected by a MAC rather than, or in addition to, their addresses to prevent alterations.

#### 5. Related Work
System call monitoring falls into the broader area of intrusion detection systems, which can detect misuse (known attacks) or anomalies (deviation from normal behavior). Our system is an anomaly detector that avoids false alarms due to conservative static analysis.

- **Implementations**:
  - User-space implementations are not secure against attacks like buffer overflows.
  - Kernel-based implementations are more secure but can be complex and resource-intensive.
  - Our approach uses a combination of kernel modifications and binary modifications to the untrusted user application, without relying on a separate policy daemon.

#### 6. Conclusions
Monitoring system calls and disallowing those that do not conform to a program’s security policy is an effective mechanism for stopping many types of attacks. Our approach, authenticated system calls, has been implemented with minor kernel modifications and automated policy generation based on static analysis. We evaluated the approach on Linux and OpenBSD, demonstrating its effectiveness and modest runtime impact.

#### Acknowledgments
We thank S. Debray for valuable insights on the technical issues. This work was supported in part by NSF under grants EIA-0080123, CCR-0113633, and CNS-0410918.

#### References
[References listed as in the original text]