update to propagate out of the enclave, assuming it does not
violate any taint-tracking rules.
4.3 Security Discussion
Civet measures the integrity of the code included in enclaves
(Property I–Code Integrity and Remote Attestation). For each
partition/trusted domain, Civet generates a trusted JAR con-
taining signed classes and binaries. Each entry (a ﬁle or a
directory) in the JAR is securely hashed, with the list of en-
tries and hashes signed by the developer’s private key. This
prevents subsequent modiﬁcations of the JAR by anyone else.
The signature of each class is checked by the in-enclave Java
runtime, whereas the signature of each binary is checked by
the Graphene-SGX library OS. The trusted Java runtime will
only load classes and binaries from the trusted JAR.
5 Shielding Polymorphic Interfaces
This section explains how exposing a polymorphic, object-
oriented interface can lead to a type-confusion attack, and an
efﬁcient type-checking scheme for reducing the risk.
5.1 Type Confusion Attack
Partitioning an application exposes a new attack surface at
the interface between the trusted and untrusted code. In the
case of OS-level interfaces, such as system calls, this led to an
initially surprising and, subsequently, widely explored topic
of Iago attacks [13, 14, 21, 26]. In a partitioned Java appli-
cation, where objects are passed into the enclave as inputs,
the complex behavior of polymorphic object-orientation is
ripe for Iago-style attacks. Speciﬁcally, attackers may pass a
polymorphic object as part of the input to the enclave code.
This can take the form of creating an object that violates class
invariants, or generating control ﬂow that is not possible in
the original application.
Attack example: Tomcat. Figure 5 shows an example of
how a partitioning choice in an application can leave the
enclave open to attack, in this case in a partitioned Tom-
cat servlet [63]. This example is hypothetical, and selected
for clarity, as real-world examples may be more complex
and obscure. A Tomcat servlet typically receives a Request
object that stores the parameters of an HTTP request. For
convenience, Tomcat stores the POST message body in a
CoyoteInputStream object, i.e., a buffered stream, for the
servlet to read. A developer might decide to use a generic
class at the enclave interface, say changing the requirement
from a CoyoteInputStream to a generic inputStream
class. The code behavior is equivalent, and the interface
is arguably more ﬂexible. However, an attacker can replace
the CoyoteInputStream with a subclass of InputStream,
class HttpResponder extends HttpServlet {
public void doPost(HttpServletRequest req,
HttpServletResponse resp) {
InputStream inputStream = req.getStream();
byte[] body = new byte[inputStream.available()];
inputStream.read(body); // Read POST body
resp.getWriter().write(body);
}}
class Request extends HttpServletRequest {
InputStream inputStream // This line is changed
= new CoyoteInputStream(new InputBuffer());
public InputStream getStream() { return inputStream; }
}
Figure 5: An example in which a servlet (HttpResponder)
is partitioned into an enclave. An attacker can exploit the
polymorphic input of HttpResonder to force the class to
read from a shielded in-enclave ﬁle descriptor.
as long as this subclass is in the trusted domain. For example,
this request may be directed to a FileInputStream object
that is connected to a ﬁle that include sensitive data, and could
be exﬁltrated by serving the request.
In general, this type of vulnerabilities is caused by partition-
ing the code such that a precondition or invariant is established
by code that ends up outside of the enclave. For instance, in a
monolithic application, one might have the invariant that one
only adds a stream to the Request class with one of a few
speciﬁc subtypes by auditing the instances of new, rather than
putting redundant assertions at every single method boundary.
When selecting a partition interface, it is easy to place these
invariant checks in the untrusted code. To the extent that we
can statically extract these invariants, Civet can automatically
harden the enclave interface.
5.2 Deep Type Checks on Enclave Inputs
In order to harden the enclave interface, Civet automatically
generates deep type checks on input objects. Civet uses mar-
shalling, or serialization, to pass input objects into enclaves,
and the enclave runs memory bounds checks on these input
buffers. In order to prevent possible type-confusion attacks,
Civet also implements a deep type check at the enclave bound-
ary. In the case of a complex object with other objects nested
underneath it, the enclave checks not just the type of the “root”
object, but also the type of every ﬁeld or array element in
the object. A simple cast check (i.e., checking whether an
USENIX Association
29th USENIX Security Symposium    511
EnclaveHttpResponderRequestFileInputStreamgetStream()read(buf)JNI Methodto readin-enclave FDTomcat server(untrusted)RPCdoPost(req, resp)RequestdoPost(req, resp)InputCoyoteInputStreamFileInputStreamReplaced by AttackerRPCMethod callMemberobject is castable to a type) or a type comparison (e.g., “if
(o.getClass() != String.class) ...”) is insufﬁcient
for preventing this type of attacks.
We assume that, if the user is partitioning an application,
the untrusted code is initially benign but may be compromised.
Thus, to generate type checks at the enclave boundary, Civet
currently uses the source code or byte code of the untrusted
portion to infer the set of subtypes that could be passed to
a given enclave API function could in the original, unparti-
tioned code. We call this set of types (and ﬁeld subtypes) for
a given object a proﬁle. We use this information to generate
the type checking code; it would be possible for an expert
developer to manually create this information if they did not
wish to mine it from application code.
One challenge is that this naïve representation of a proﬁle
can grow exponentially large when an object contains a deep
hierarchy and many ﬁelds at each level. Worse, if a class
contains references to itself, or forms cyclic references among
multiple classes, the proﬁle can grow indeﬁnitely large. Self
and cyclic class references are common in practice.
Path-based type-checks.
Instead of deﬁning which types
can be part of an input, Civet deﬁnes which parts of an input
(permission object) that a type (permission subject) can be
instantiated and assigned to. For each type that can be instan-
tiated during input deserialization, Civet lists all the ﬁelds
and array elements that can be instantiated as the type. These
ﬁelds are represented as paths, as traversed from the root
object. The strategy is similar to a mandatory access control
(MAC) system, such as AppArmor [64] which has a default
deny policy, and the administrator can give a program explicit
access to ﬁles with certain path patterns. This strategy makes
it easy to make permission decisions sooner if the preﬁx of
the path does not match the policy.
We explain the type checks with the example in Figure 5.
Assume the static analysis determines that the original ap-
plication only assigns the CoyoteInputStream class to the
inputStream ﬁeld of the input, of class Response. Civet
will generate the rules for instantiating this input:
• For CoyoteInputStream:
– ((Response)req).inputStream
• For Response:
– req (root object)
Based on these rules, any instantiation of a class that does
not match its rule will be rejected by Civet. For example, if
a FileInputStream object is assigned to inputStream of
req, the instantiation will be rejected because the class is not
permitted with the given path.
This scheme is efﬁcient for objects with a complex struc-
ture. For example, in Hadoop, a TupleWritable object con-
tains an array of other Writable objects, including another
TupleWritable object. If we want to reject nested tuples
but allow tuples of LongWritable and Text, the following
rules will enforce such a policy:
• For LongWrtiable and Text:
– value (root object)
– ((TupleWritable)value).values[*]
(array elements if root object is a tuple)
• For TupleWritable:
– value (root object)
Array sizes and indices are indistinguishable in this
scheme, hence the wildcard ([*]) in the second rule for
LongWrtiable and Text. Extending or re-ordering the ele-
ments of an array does not increase the number of rules.
Complexity. We show that the path-based representation
simpliﬁes type-checking. Assume that a class contains N
ﬁelds, and each ﬁeld can be assigned to one of M subtypes.
The number of rules at the ﬁrst level is O(MN), which is
signiﬁcantly fewer than O(MN) in the simpler representation.
If we consider an object of D levels, the complexity of our
scheme is O(MND), also much simpler than O(MND).
Implementation. At build time, we assign a unique identi-
ﬁer to each ﬁeld of a class that is both: (1) a trusted class, and
(2) instantiated and assigned as part of an input to a method.
Our prototype uses a 32-bit identiﬁer on the assumption that
a partitioned application will not have more than 232 ﬁelds
among all trusted classes, and could increase this limit if
needed. To compare the conditions, we generate a hash of all
the ﬁelds that have been visited from the root object. Note that
the hash must be collision-resistant, otherwise the attacker
may submit a malicious structure that collides with a permit-
ted hash. Ideally, we need to use a strong hash function, such
as SHA256; however, we observe that most objects in our use
cases never go deeper than 8 levels. Therefore, we just push
the ﬁeld identiﬁers into a 32-byte buffer, and only hash the
buffer when the depth is larger than 8.
Compatibility. False negatives in the static analysis may
cause compatibility issues if a benign input is rejected by type-
checking. Our static analysis only excludes inputs that were
impossible in the original application. Among our application
examples (§9), no benign input from the original partitioned
code was rejected.
5.3 Security Discussion
The deep type checking described in this section ensures
Property II—Type integrity for enclave interfaces. Speciﬁcally,
Civet uses static analysis to generate a set of polymorphic
types that could happen in the original program, and checks
that only objects (or object hierarchies) within that set are
accepted as enclave inputs.
A limitation of the type checks is that we need to conserva-
tively approve input types based on the points-to analysis, as
well as overestimate classes loaded via reﬂection or loaded
internally by the JVM. This limitation leads to false positives,
in which Civet may permit an unexpected input type to an
entry method, which may be exploited for type confusion
512    29th USENIX Security Symposium
USENIX Association
attacks. We did not observe this issue in our case studies.
6 Declassifying Enclave Outputs
In this section we discuss the security challenges of explicitly
declassifying all outputs that can be potentially tainted by
sensitive data (Property III—Explicit data declassiﬁcation).
6.1 Data Leakage
Preventing data leakage is a critical challenge for partitioning.
When data is decrypted and processed inside an enclave, it is
important that the data does not inadvertently make its way
back to the untrusted classes, except via explicit declassiﬁca-
tion. For instance, a privacy-preserving function inside the
enclave may report safe results with differential privacy [65].
Developers of partitioned enclave applications have an addi-
tional burden of auditing the code for any paths that might
leak sensitive data outside of the enclave.
Polymorphism makes it difﬁcult to simply inspect the code
statically or an object dynamically, and know whether it was
derived from sensitive bits. Developers do not necessarily
know whether invoking a method on an ObjectType calls the
method of its Class or the Subclass, which in turn may or
may not update a ﬁeld in the object. A further challenge for
determining the data ﬂow is the detection of the implicit data
ﬂow under the effect of the control ﬂow. Since polymorphism
and reﬂection also complicate the control ﬂow, it becomes
even harder to predict the data ﬂow of a Java application
without a dynamic taint-tracker [24, 66–73]. Therefore, we
argue that it is important to track both explicit and implicit
data ﬂow within the enclaves that operate on sensitive data.
6.2 Dynamic Taint-Tracking
To ensure data conﬁdentiality, Civet tracks data ﬂows using
Phosphor [74], a dynamic taint-tracking framework. In Civet,
all the entry class objects and methods of shield classes are
marked as taint sources. Thus, all the objects which are de-
rived from instantiation of the entry classes or from shielding,
such as decrypted data or data provisioned from a secure chan-
nel, will be tainted. Phosphor propagates the taints through
explicit data ﬂow, and optionally through implicit data ﬂow
based on control ﬂow. We added Phosphor as a phase of
the partition tool to instrument the classes in enclave.jar
(§4.1) after shredding. We run the Phosphor instrumenter
with the multiTaint option, and the controlTrack option
if the users choose to track the implicit ﬂow.
Dynamic taint-tracking prevents developers from introduc-
ing vulnerabilities via buggy code that inadvertently leaks sen-
sitive data through data ﬂows. The sink of the taint-tracking is
the function for marshaling returned objects, in order to block
any tainted object from being ﬂowed out of the enclave, At
the boundary of the enclave, any tainted object unless the ob-
ject is explicitly declassiﬁed. We modify Phosphor such that
developers can specify a Declassify rule that can remove
taints on objects that are conﬁrmed to contain no sensitive
data. In practice, we expect the developers to declassify an
object after sanitizing the object or encrypting the data.
We note that tracking implicit data ﬂow is considerably
more expensive than tracking explicit ﬂow; thus, we give the
user an option to disable this in a deployment run. Because
this is a tool primarily for understanding code behavior, there
are scenarios where this trade-off is sensible; there are also
scenarios where users will prefer more exhaustive checks.
6.3 Security Discussion
Dynamic taint-tracking complements the language safety of
Java by requiring any sensitive data that leaves the enclave
to be explicitly checked (Property III–Explicit data declas-
siﬁcation). The JVM ensures that sensitive code and data
inside the enclave remain in a hardware-protected memory
region. Taint tracking can catch cases where an output de-
rives from sensitive information, but the results were not
encrypted or checked against a different policy. We assume
the developer writes a declassiﬁer that enforces appropriate
application-level policies.
7 Garbage Collection Optimization
Garbage collection (GC) is an essential feature of Java and
many managed languages. GC unburdens the programmer
from writing error-prone memory management code. GC
design and implementation of has a ﬁrst-order impact on ap-
plication performance, yet off-the-shelf GC does not perform
well in enclaves. Civet contributes an optimized GC design
for the constraints of enclaves.
7.1 GC Design Challenges
The Civet JVM prototype is based on the OpenJDK 8 HotSpot
JVM, which uses a generational GC [75]. The HotSpot JVM
contains multiple GC implementations, each with different
advantages and resource requirements. In initial attempts
to run Java in an enclave, we found that no garbage collec-
tion strategy performed well within the constraints of SGX
enclaves. Thus, we started with a relatively straightforward
GC that we could understand and tune to work within an en-
clave. Speciﬁcally, we studied and tuned the Serial GC from
HotSpot—a "textbook" generational GC.
In Serial GC, the JVM typically divides the heap into two
generations: the young (defNew) and old (tenured) genera-
tions. The GC strategy is different for each generation, il-
lustrated in Figure 6. The young GC happens frequently
to recover memory from short-lived objects. Objects that
have survived several GC rounds in the young generation are
promoted to the old generation. Speciﬁcally, the young gener-
USENIX Association
29th USENIX Security Symposium    513
Figure 6: Two garbage collection approaches used in Se-
rial GC. A Copying approach evacuates living objects to a
reserved space, whereas a Mark-Sweep-Compact (MSC) ap-
proach separates the phases of discovering live objects from
heap compaction.
Figure 8: Civet proposes a GC strategy, with a middle gen-
eration as a middle ground before promoting object to old
generation. The middle GC follows a partial promotion strat-