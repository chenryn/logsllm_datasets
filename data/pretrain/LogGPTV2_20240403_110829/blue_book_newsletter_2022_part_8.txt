* New: [Searching documents.](elasticsearch.md#searching-documents)
    We use HTTP requests to talk to ElasticSearch. A HTTP request is made up of
    several components such as the URL to make the request to, HTTP verbs (GET, POST
    etc) and headers. In order to succinctly and consistently describe HTTP requests
    the ElasticSearch documentation uses cURL command line syntax. This is also the
    standard practice to describe requests made to ElasticSearch within the user
    community.
    An example HTTP request using CURL syntax looks like this:
    ```bash
    curl -XPOST "https://localhost:9200/_search" -d' { "query": { "match_all": {} }
    }'
    ```
* New: [Get documents that match a string.](elasticsearch.md#get-documents-that-match-a-string)
    ```bash
    curl \
        -H 'Content-Type: application/json' \
        -XPOST "https://localhost:9200/_search" \
        -d' { "query": { "query_string": {"query": "test company"} }}'
    ```
* New: Introduce python elasticsearch library.
    [Python elasticsearch](https://elasticsearch-py.readthedocs.io/en/latest/) is
    the Official low-level client for Elasticsearch. Its goal is to provide common
    ground for all Elasticsearch-related code in Python; because of this it tries to
    be opinion-free and very extendable.
    [Installation](https://elasticsearch-py.readthedocs.io/en/latest/#installation):
    ```bash
    pip install elasticsearch
    ```
    Usage:
    ```python
    from elasticsearch import Elasticsearch
    client = Elasticsearch("http://localhost:9200")
    +client.indices.get(index="*")
    resp = client.search(index="test-index", query={"match_all": {}})
    documents = resp.body["hits"]["hits"]
    doc = {"partial_document": "value"}
    resp = client.update(index=INDEX, id=id_, doc=doc)
    ```
### [Python Mysql](sql.md)
* New: [List all tables using different databases.](sql.md#list-all-tables)
    Mysql:
    ```sql
    show tables;
    ```
    Postgresql:
    ```sql
    \dt
    ```
    Sqlite:
    ```sql
    .tables
    ```
### [pythonping](pythonping.md)
* New: Introduce pythonping.
    [pythonping](https://github.com/alessandromaggio/pythonping) is simple way to
    ping in Python. With it, you can send ICMP Probes to remote devices like you
    would do from the terminal.
    Warning: Since using `pythonping` requires root permissions or granting
    `cap_net_raw` capability to the python interpreter, try to measure the latency
    to a server by other means such as using `requests`.
### [Python VLC](python_vlc.md)
* New: Introduce python's vlc library.
    [Python VLC](https://wiki.videolan.org/Python_bindings/) is a library to control
    `vlc` from python.
    There is not usable online documentation, you'll have to go through the
    `help()` inside the python console.
### [questionary](questionary.md)
* New: [Exit when using control + c.](questionary.md#exit-when-using-control-+-c)
    If you want the question to exit when it receives a `KeyboardInterrupt` event,
    use `unsafe_ask` instead of `ask`.
### [rich](rich.md)
* New: [Live display text.](rich.md#live-display-text)
    ```python
    import time
    from rich.live import Live
    with Live("Test") as live:
        for row in range(12):
            live.update(f"Test {row}")
            time.sleep(0.4)
    ```
    If you don't want the text to have the default colors, you can embed it all in
    a `Text` object.
### [Selenium](selenium.md)
* New: [Click on element.](selenium.md#click-on-element)
    Once you've opened the page you want to interact with `driver.get()`, you need
    to get the Xpath of the element to click on. You can do that by using your
    browser inspector, to select the element, and once on the code if you right
    click there is a "Copy XPath"
    Once that is done you should have something like this when you paste it down.
    ```python
    //*[@id=”react-root”]/section/main/article/div[2]/div[2]/p/a
    ```
    Similarly it is the same process for the input fields for username, password,
    and login button.
    We can go ahead and do that on the current page. We can store these xpaths as
    strings in our code to make it readable.
    We should have three xpaths from this page and one from the initial login.
    ```python
    first_login = '//*[@id=”react-root”]/section/main/article/div[2]/div[2]/p/a'
    username_input = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[2]/div/label/input'
    password_input = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[3]/div/label/input'
    login_submit = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[4]/button/div'
    ```
    Now that we have the xpaths defined we can now tell Selenium webdriver to click
    and send some keys over for the input fields.
    ```python
    from selenium.webdriver.common.by import By
    driver.find_element(By.XPATH, first_login).click()
    driver.find_element(By.XPATH, username_input).send_keys("username")
    driver.find_element(By.XPATH, password_input).send_keys("password")
    driver.find_element(By.XPATH, login_submit).click()
    ```
* New: [Bypass Selenium detectors.](selenium.md#bypass-selenium-detectors)
    Sometimes web servers react differently if they notice that you're using
    selenium. Browsers can be detected through different ways and some commonly used
    mechanisms are as follows:
    * Implementing captcha / recaptcha to detect the automatic bots.
    * Non-human behaviour (browsing too fast, not scrolling to the visible elements,
        ...)
    * Using an IP that's flagged as suspicious (VPN, VPS, Tor...)
    * Detecting the term HeadlessChrome within headless Chrome UserAgent
    * Using Bot Management service from [Distil
        Networks](http://www.distilnetworks.com/),
        [Akamai](https://www.akamai.com/us/en/products/security/bot-manager.jsp),
        [Datadome](https://datadome.co/product/).
    They do it through different mechanisms:
    * [Use undetected-chromedriver](selenium.md#use-undetected-chromedriver)
    * [Use Selenium stealth](selenium.md#use-selenium-stealth)
    * [Rotate the user agent](selenium.md#rotate-the-user-agent)
    * [Changing browser properties](selenium.md#changing-browser-properties)
    * [Predefined Javascript variables](selenium.md#predefined-javascript-variables)
    * [Don't use selenium](selenium.md#dont-use-selenium)
    If you've already been detected, you might get blocked for a plethora of other
    reasons even after using these methods. So you may have to try accessing the site
    that was detecting you using a VPN, different user-agent, etc.
* New: [Basic Selenium commands.](selenium.md#open-a-url)
    Open a URL:
    ```python
    driver.get("https://duckduckgo.com/")
    ```
    Get page source:
    ```python
    driver.page_source
    ```
    Get current url:
    ```python
    driver.current_url
    ```
* New: [Disable loading of images.](selenium.md#disable-loading-of-images)
    You can pass `options` to the initialization of the chromedriver to tweak how
    does the browser behave. To get a list of the actual `prefs` you can go to
    `chrome://prefs-internals`, there you can get the code you need to tweak.
    ```python
    options = ChromeOptions()
    options.add_experimental_option(
        "prefs",
        {
            "profile.default_content_setting_values.images": 2,
        },
    )
    ```
### [sqlite3](sqlite3.md)
* New: [Get a list of the tables.](sqlite3.md#get-a-list-of-the-tables)
    ```python
    sql_query = """SELECT name FROM sqlite_master
      WHERE type='table';"""
    cursor = sqliteConnection.cursor()
    cursor.execute(sql_query)
    print(cursor.fetchall())
    ```
### [sh](python_sh.md)
* New: [Avoid exception logging when killing a background process.](python_sh.md#avoid-exception-logging-when-killing-a-background-process)
    In order to catch this exception execute your process with `_bg_exec=False` and
    execute `p.wait()` if you want to handle the exception. Otherwise don't use the
    `p.wait()`.
    ```python
    p = sh.sleep(100, _bg=True, _bg_exc=False)
    try:
        p.kill()
        p.wait()
    except sh.SignalException_SIGKILL as err:
        print("foo")
    foo
    ```
### [Typer](typer.md)
* New: Introduce Typer.
    [Typer](https://typer.tiangolo.com/) is a library for building CLI applications
    that users will love using and developers will love creating. Based on Python
    3.6+ type hints.
    The key features are:
    * *Intuitive to write*: Great editor support. Completion everywhere. Less time
        debugging. Designed to be easy to use and learn. Less time reading docs.
    * *Easy to use*: It's easy to use for the final users. Automatic help, and
        automatic completion for all shells.
    * *Short*: Minimize code duplication. Multiple features from each parameter
        declaration. Fewer bugs.
    * *Start simple*: The simplest example adds only 2 lines of code to your app:
        1 import, 1 function call.
    * *Grow large*: Grow in complexity as much as you want, create arbitrarily
        complex trees of commands and groups of subcommands, with options and
        arguments.
* New: [Get the command line application directory.](typer.md#get-the-command-line-application-directory)
    You can get the application directory where you can, for example, save
    configuration files with `typer.get_app_dir()`:
    ```python
    from pathlib import Path
    import typer
    APP_NAME = "my-super-cli-app"
    def main() -> None:
        """Define the main command line interface."""
        app_dir = typer.get_app_dir(APP_NAME)
        config_path: Path = Path(app_dir) / "config.json"
        if not config_path.is_file():
            print("Config file doesn't exist yet")
    if __name__ == "__main__":
        typer.run(main)
    ```
    It will give you a directory for storing configurations appropriate for your CLI
    program for the current user in each operating system.
* New: [Exiting with an error code.](typer.md#exiting-with-an-error-code)
    `typer.Exit()` takes an optional code parameter. By default, code is `0`, meaning
    there was no error.
    You can pass a code with a number other than `0` to tell the terminal that there
    was an error in the execution of the program:
    ```python
    import typer
    def main(username: str):
        if username == "root":
            print("The root user is reserved")
            raise typer.Exit(code=1)
        print(f"New user created: {username}")
    if __name__ == "__main__":
        typer.run(main)
    ```
* New: [Create a `--version` command.](typer.md#create-a---version-command-)
    You could use a callback to implement a `--version` CLI option.
    It would show the version of your CLI program and then it would terminate it.
    Even before any other CLI parameter is processed.
    ```python
    from typing import Optional
    import typer
    __version__ = "0.1.0"
    def version_callback(value: bool) -> None:
        """Print the version of the program."""
        if value:
            print(f"Awesome CLI Version: {__version__}")
            raise typer.Exit()
    def main(
        version: Optional[bool] = typer.Option(
            None, "--version", callback=version_callback, is_eager=True
        ),
    ) -> None:
        ...
    if __name__ == "__main__":
        typer.run(main)
    ```
* New: [Testing.](typer.md#testing)
    Testing is similar to [`click` testing](click.md#testing-click-applications),
    but you import the `CliRunner` directly from `typer`:
    ```python
    from typer.testing import CliRunner
    ```
## Generic Coding Practices
### [Use warnings to evolve your code](use_warnings.md)
* New: Using warnings to evolve your package.
    Regardless of the [versioning system](versioning.md) you're using, once you
    reach your first stable version, the commitment to your end users must be that
    you give them time to adapt to the changes in your program. So whenever you want
    to introduce a breaking change release it under a new interface, and in
    parallel, start emitting `DeprecationWarning` or `UserWarning` messages whenever
    someone invokes the old one. Maintain this state for a defined period (for
    example six months), and communicate explicitly in the warning message the timeline for when users have
    to migrate.
    This gives everyone time to move to the new interface without breaking their
    system, and then the library may remove the change and get rid of the old design
    chains forever. As an added benefit, only people using the old interface will
    ever see the warning, as opposed to affecting everyone (as seen with the
    semantic versioning major version bump).
* New: Change signature of method if you can.
    You can take the chance of the deprecation to change the signature of
    the function, so that if the user is using the old argument, it uses the
    old behaviour and gets the warning, and if it's using the new argument,
    it uses the new. The advantage of changing the signature is that you
    don't need to do another deprecation for the temporal argument flag.