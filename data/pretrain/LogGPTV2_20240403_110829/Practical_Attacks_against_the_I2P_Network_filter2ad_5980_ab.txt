service. It asks the router for the service information. The router may have
this service information stored locally (e.g., if it runs a floodfill node or the
same information was already requested recently) and be able to return it to the
application immediately. If the information is not available locally, the router
sends a lookupMessage through one of the exploratory tunnels and returns
the service information to the application, if it could be found on the netDB, or
an error otherwise. The service lookup is thereby anonymized by the use of an
exploratory tunnel. Otherwise, floodfill nodes would be able to link users to
services, and avoiding such links is the main goal of anonymity networks. The
application can then hand packets to the router and request them to be sent
to the service through one of the client tunnels allocated to the application. If
the router receives any packets through one of the client tunnels allocated to
an application, it forwards them appropriately.
2.6 Threat Model
The I2P project has no explicit threat model speciﬁed but rather talks about
common attacks and existing defenses against them3. Overall, the design of
I2P is motivated by threats similar to those addressed by Tor: The attacker can
observe trafﬁc locally but not all trafﬁc ﬂowing through the network and in-
tegrity of all cryptographic primitives is assumed. Furthermore, an attacker is
only allowed to control a limited amount of peers in the network (the web-
site talks about not more than 20 % of nodes participating in the netDB and a
similar fraction of total amount of nodes controlled by the malicious entity). In
this paper, we present an attack that requires fewer malicious nodes while still
deanonymization users. This threat model is also used by Hermann et al. [5],
putting our result in some context.
2.7 Sybil Attacks
One well-known attack on anonymity systems is the so-called Sybil attack [6],
where a malicious user creates multiple identities to increase control over the
system. However, I2P has some defense mechanisms aimed at minimizing the
risk of Sybil attacks.
It is possible to control more identities in the network by running multiple
I2P instances on the same hardware. However, participants evaluate the perfor-
mance of peers they know of and weight them when selecting peers to interact
with instead of using a random sample. As running multiple identities on the
same host decreases the performance of each of those instances, the number
of additional identities running in parallel is effectively limited by the need to
provide each of them with enough resources for being considered as peers.
3 http://i2p2.de/how_threatmodel.html
Additionally, the mapping from leaseSets and routerInfos to netDB keys,
which determines the floodfill nodes responsible for storing the data, in-
cludes the current date so the keyspace changes every day at midnight UTC.
Nodes clustered at a certain point in the keyspace on one day will, therefore, be
distributed randomly on any other day. However, this change does not include
any random inputs, and is thus completely predictable.
2.8 Eclipse Attacks
With a vanilla Kademlia DHT, all requests would be answered by the node
nearest to the searched key. If this node is malicious and claims not to know the
key and not to know any other database server nearer to the key, the lookup will
fail [8]. To circumvent this attack, I2P stores the key on the eight nodes closest
to the key and a requesting node will continue asking nodes further away from
the key if they no longer know any candidate nearer to the searched key.
3 The Attacks
The ﬁnal goal of our attacks is to identify peers using a particular service on
I2P and their individual usage patterns, including when and for how long they
use this service. We describe different ways to gain the necessary control on the
netDB and include a brief discussion of how to perform a classical Eclipse attack
where access to a service inside the I2P network is blocked by the attacker.
Our attack uses a group of 20 conspiring nodes (fully controlled by us) that
are actively participating in the network and that act as floodfill peers. The
description of our attacks is structured as follows:
a) We take control over the ﬂoodﬁll database. We either forcible remove all
other nodes and take full control (Section 3.1), or use a Sybil attack (Section
3.2) to take control over a region of the database
b) Leveraging this control of the database, we implement an Eclipse attack
(Section 3.3)
c) Alternatively, we exploit our control to link store and veriﬁcation connec-
tions that done by peers who update their routerInfos, hence deanonymiz-
ing these peers (Section 3.4)
3.1 Floodﬁll Takeover
In this section, we describe an attack that can be used to control the majority
of database nodes in the I2P network. By taking control of the netDB, one can
log database actions for the full keyspace. The attack is possible with relatively
few resources (only 2 % of total nodes in the network are needed). Note that the
threat model limits an attacker to 20 % of floodfill nodes. This assumption
is violated by this attack. Nonetheless, the I2P developers still consider this a
serious and valid attack.
The attacker can conﬁgure his nodes as manual floodfill nodes to make
sure his nodes participate in the database. In the remaining part of this section,
we discuss how the number of legitimate floodfill nodes can be decreased,
facilitating takeover of the network database.
Around 95 % of the floodfill nodes are automatic, that is, they participate
due to the need for more database nodes and the availability of resources on
their side. While there will not be the need for more participants once the
attacker has set up his nodes, all current participants continue to serve as
floodfill nodes as long as they do not get restarted and continue to have
enough resources.
Available resources are both measured in terms of available data rate, which
is statically conﬁgured for each node by the admin, and job lag, which is mea-
sured during operation taking the average delay between the scheduled time
where each task (e.g., tunnel building, database lookups) is supposed to run
and the actual point in time when it is started. As this delay largely depends
on the number of open tasks, and an attacker can cause additional tasks to be
scheduled, this job lag is a good target for attack.
As load varies and routers tend to be rebooted from time to time, the least
noisy and easy-to-deploy possibility is waiting for the number of legitimate
floodfill participants to decrease while the attacker adds malicious nodes to
the network. This is especially effective every time an update to the I2P software
is distributed, as updating I2P includes a restart of the router.
However, to speed up churn in the floodfill set, an attacker can inﬂuence
the job lag using a denial-of-service (DoS) attack against a legitimate floodfill
participant. The attacker creates many new tunnels through the attacked node
adding a tunnel build job for each. When specifying a non-existing identity for
the node after the victim in the tunnel, it also adds a total of eight search jobs
looking for the peer information to the victim’s job queue. If the attacker is
able to create more open jobs than the node can handle, these jobs get started
late, building up a job lag. The attacker needs to be careful to not actually send
large amounts of data through the attacked node as this would trigger the data
rate limiting functionality and make the victim drop tunnel requests instead of
adding them to the job queue. As soon as the attacked node drops its floodfill
ﬂag, the attacker continues with the next active floodfill node. It is important
to note that an attacker only needs capacity to launch a DoS attack on a single
legitimate floodfill node at a time. Nodes will only regain floodfill status
if there are too few active floodfill nodes in the network. In the attack sce-
nario, however, the attacker inserted his own nodes in the network, replacing
the failing, legitimate ones.
3.2 Sybil Attack
Under certain conditions, the floodfill takeover described in the previous
section is not optimal. The Eclipse attack described in the next section requires
several floodfill nodes closest to a keyspace location, while there are still
legitimate floodfill nodes at random places in the keyspace after a successful
floodfill takeover. Additionally, the takeover attack requires over 300 active
malicious nodes in the network.
A Sybil attack will allow the attacker to get close control over a limited part
of the keyspace, and it requires fewer resources than the complete takeover.
While an attacker cannot run (too many) I2P nodes in parallel due to the peer
proﬁling that is in place, it is possible to compute huge quantities of identities
ofﬂine and then use the best placed ones (the ones closest to the victim in the
keyspace). To exhaust the query limit with negative responses, a total of eight
nodes near the target key are necessary (near means closer than any legitimate
participant in this region of the netDB). To log lookups, a single attacker would
sufﬁce. As there are currently only 320 floodfill nodes active, a set of 10,000
identities, which can be computed in few minutes, already gives the attacker
many possible identities to completely control any position in the keyspace.
Introducing a new node into the network requires a setup time of about an
hour, during which the node gets known by more and more of its peers and
actively used by them for lookup. Hence, it takes some time until the Sybil
attack reaches the maximal impact. In addition, as mentioned previously, the
storage location of the keys that the attacker is interested in (e.g., the key at
which the service information, that should be eclipsed, is stored) changes every
day at midnight. This requires attacking nodes to change their location in the
keyspace, opening a window during which legitimate nodes control the posi-
tion in question. However, as the rotation is known in advance, a second set of
attack nodes can be placed at the right spot before midnight, so they are already
integrated once the keyspace shifts. As a result, this keyspace rotation does not
prevent our attack but only requires few additional resources.
3.3 Eclipse Attack
Our Eclipse attack allows an attacker to make any database record unavail-
able to network participants. It is an example of how Sybil attacks can be used
against the network, independent from the deanonymization described in the
next section. As clients use up to eight floodfill nodes to locate a key in the
network database, the attacker needs to control at least the eight nodes clos-
est to the key. The list of other close servers piggybacked on a negative lookup
answer is used to increase the probability of the client knowing all floodfill
participants controlled by the attacker.
Once control over a region in the keyspace is established, the attacker can
block access to items in this region by sending a reply claiming to not know the
resource. If the blocked resource contains service information, this effectively
prevents anyone from accessing the service. Similarly, if peer information is
blocked, network participants are unable to interact with it.
3.4 Deanonymization of Users
Finally, we show an attack allowing an attacker to link any user with his IP
address to the services he uses. For this attack, we use the Sybil attack described
earlier to place malicious nodes in the netDB so they can observe events in the
network related to each other. We later use information from these events to
deanonymize users.
Nodes store their database records on the closest floodfill node that they
are aware of. To verify proper storage of a database record, a node subsequently
sends a lookup to another floodfill node nearby. This is done after waiting for
20 seconds. If both nodes, the one stored on and the one handling the verifying
lookup, are controlled by the same (malicious) entity, the attacker can observe
both interactions and connect them (with some probability).
Storage of peer information is done without a tunnel. That is, it is done
in the clear, as the client is exposed by the content of the database entry any-
ways. Storage veriﬁcation, on the other hand, is done through an exploratory
tunnels to make it more difﬁcult to distinguish storage veriﬁcation from nor-
mal lookup (if floodfill nodes could distinguish veriﬁcations from normal
lookups, they could allow veriﬁcation and still hide the stored information from
normal lookups). As a result, the ﬁrst part of this interaction exposes the client
node, while the second part exposes an exploratory tunnel endpoint. This com-
bination allows us to create a probabilistic mapping between exploratory tunnel
endpoints and the peers owning the tunnel.
If an attacker can later link actions to an exploratory tunnel endpoint, she
can use this probabilistic mapping to identify the client initiating this action,
effectively deanonymizing this client. Exploratory tunnels are used for all reg-
ular database lookups, including those for service information. A floodfill
node controlled by the attacker will therefore see the exploratory tunnel end-
points for all lookups for services that this node handles. Thus, if the attacker
places malicious floodfill nodes at the right positions to observe the lookups
for interesting services, he can combine the probabilistic mapping with the ser-
vice lookups.
The attack process is shown in Figure 1: The client (victim) stores its peer
information on Node 7 in the netDB. This node then pushes the peer informa-
tion to other floodfill nodes that are close in the netDB. In this case, these
close nodes are Node 6, Node 8 and Node 9. After 20 seconds, the client starts
the veriﬁcation process and requests its own peer information from Node 6, us-
ing one of its exploratory tunnel pairs. Later, it requests the service information
for an eepsite from Node 4, using the same exploratory tunnel! If the attacker
controls Nodes 4, 6 and 7, he can (i) leverage the store and veriﬁcation opera-
tion (on Node 6 and 7) to map the victim’s tunnel identiﬁer to the actual victim
node, and (ii) see the victim requesting the service (on Node 4).
As service information expires after ten minutes, each client needs to fetch it
before starting an interaction with a service and update it regularly during the
interaction. This allows the attacker to identify which of the observed clients
interact with each of the monitored resources and when she does so. The regu-
lar update of service information additionally reveals how long the service has
been used. As a result, the attacker is able to deanonymize users with respect
to their usage of certain services.
Client
store
verify
lookup
6
5
exploratory tunnel pair
7
4
8
replication