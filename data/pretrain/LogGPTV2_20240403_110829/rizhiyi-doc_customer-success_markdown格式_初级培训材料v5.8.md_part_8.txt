### 其他类型日志接入及更多设置
请参考《日志易数据接入手册》第2.6章节获取详细信息。

#### 本章习题：
1. 接入Nginx的access.log文件。
2. 接入历史messages日志文件。

#### 思考题：
在进行日志分析之前，首先需要采集日志。那么，在完成日志采集之后，我们还需要进行哪些步骤？请结合第二章中介绍的日志易产品架构和第四章中的基础用法，尝试向一个对日志完全不了解的朋友解释整个日志分析流程。

---

### 字段提取
字段提取，也被称为数据结构化、数据正规化、数据清洗或字段解析。在日志易中，这一过程主要通过正则表达式来实现。

字段解析的过程就是将原始日志（例如JSON格式）转换为更易于处理的结构化数据。以以下JSON日志为例：

```json
{
    "json.disk.used": 60614467584,
    "agent_send_timestamp": 1566891035681,
    "json.disk.inodes_used": 161262,
    "collector_recv_timestamp": 1566891035875,
    "raw_message": "{\"timestamp\":\"2019-08-27T15:30:35+08:00\",\"disk\":{\"path\":\"/\",\"fstype\":\"ext2/ext3\",\"total\":205578670080,\"free\":134542741504,\"used\":60614467584,\"used_percent\":29.484804,\"inodes_total\":12730032,\"inodes_used\":161262,\"inodes_free\":12568770,\"inodes_used_percent\":1.266784}}",
    "ip": "192.168.1.100",
    "json.disk.total": 205578670080,
    "source": null,
    "json.disk.used_percent": 29.484804,
    "json.disk.inodes_total": 12730032,
    "json.disk.fstype": "ext2/ext3",
    "logtype": "json",
    "hostname": "zookeeper10",
    "appname": "top_info_disk_stats",
    "json.disk.path": "/",
    "json.disk.free": 134542741504,
    "json.disk.inodes_used_percent": 1.266784,
    "context_id": 1566891035682464687,
    "json.disk.inodes_free": 12568770,
    "tag": ["top_info"],
    "_id": "AWzR-8whZZGRsC-NaboT",
    "timestamp": 1566891035000
}
```

日志易内置了针对JSON格式日志的解析规则，因此上传的JSON日志可以自动被解析成结构化的数据。对于其他格式的日志，您可以在日志易的“字段提取”功能中自定义解析规则。

日志易支持多种解析规则来进行字段的结构化处理，其中最基础且常用的两种是正则解析和时间戳识别。接下来我们将详细介绍这两种方法。

#### 7.1 正则解析

##### 7.1.1 常见正则字符
正则解析通常依赖于正则表达式来拆分字段。以下是常见的正则表达式字符及其含义：

| 字符 | 描述 |
| --- | --- |
| `\` | 将下一个字符标记为特殊字符、原义字符、向后引用或八进制转义符。例如，`'n'` 匹配字符 "n"，而 `'\n'` 匹配换行符。 |
| `^` | 匹配输入字符串的开始位置。如果设置了多行模式，则也匹配每行的开始位置。 |
| `$` | 匹配输入字符串的结束位置。如果设置了多行模式，则也匹配每行的结束位置。 |
| `*` | 匹配前面的子表达式零次或多次。例如，`zo*` 可以匹配 "z" 或 "zoo"。等价于 `{0,}`。 |
| `+` | 匹配前面的子表达式一次或多次。例如，`zo+` 可以匹配 "zo" 或 "zoo"，但不能匹配 "z"。等价于 `{1,}`。 |
| `?` | 匹配前面的子表达式零次或一次。例如，`do(es)?` 可以匹配 "do" 或 "does"。等价于 `{0,1}`。 |
| `{n}` | 匹配前面的子表达式恰好 n 次。例如，`o{2}` 可以匹配 "food" 中的两个 o，但不能匹配 "Bob" 中的 o。 |
| `{n,}` | 至少匹配前面的子表达式 n 次。例如，`o{2,}` 可以匹配 "foooood" 中的所有 o。`o{1,}` 等价于 `o+`，`o{0,}` 等价于 `o*`。 |
| `{n,m}` | 匹配前面的子表达式至少 n 次，但不超过 m 次。 |

##### 7.1.2 示例
假设有一条日志如下：
```
<2014-05-14 23:24:47> <15752> <Note> InnoDB: 128 rollback segment(s) are active
```

使用正则表达式 `(<?\S+\s\S+)\s+(?\S+)\s+(?\S+)\s+(?.*)` 进行解析，可以提取出以下字段：
- `timestamp`: 2014-05-14 23:24:47
- `pid`: 15752
- `loglevel`: Note
- `message`: InnoDB: 128 rollback segment(s) are active

#### 7.2 时间戳识别
正确解析时间戳对后续的数据处理和查询至关重要。日志易建议所有进入系统的数据都应进行时间戳解析。

##### 7.2.1 时间戳识别
用户通常关心日志发生的时间，以便检索特定时间段内的日志。这需要在字段提取时正确解析 `timestamp` 字段。例如：

- **原始时间戳**：`150120 16:00:30`
- **解析规则**：`yyMMdd HH:mm:ss`

##### 7.2.2 时间戳解析示例
以下是一些常见的时间戳格式及其对应的解析规则：

| 原始时间戳 | 解析规则 |
| --- | --- |
| 2017-07-18 16:35:41:270 | `yyyy-MM-dd HH:mm:ss:SSS` |
| 07-Jul-2017 15:45:30.179 | `dd-MMM-yyyy HH:mm:ss.SSS` |
| 150120 16:00:30 | `yyMMdd HH:mm:ss` |
| Jul 11, 2017 3:08:01 AM CST | `MMM dd, yyyy HH:mm:ss a 'CST'` |
| Jul 11, 2017 3:08:01 AM | `MMM dd, yyyy HH:mm:ss a` |
| 20170712T022645Z | `yyyyMMdd'T'HHmmss'Z'` |
| 1508811046 | `UNIX` |
| Wed Nov 01 22:00:01 2017 | `E MMM dd HH:mm:ss yyyy` |

##### 7.2.3 中文日期
中文日期的解析规则如下：

- **原始时间戳**：`2017-7-5 下午02时35分10秒 CST`
- **解析规则**：`yyyy-M-d aHH'时'mm'分'ss'秒' 'CST' zh` 或 `yyyy-M-d aKK'时'mm'分'ss'秒' 'CST' zh`

##### 7.2.4 多种日期出现在同一日志
如果一条日志中包含多种日期格式，可以按以下步骤进行解析：

1. 从 `raw_message` 中提取时间戳字段：`(?\d+\s+\d+\s+\d+\s+\d+:\d+:\d+)`
2. 对 `timestamp` 识别四次，分别使用以下规则：
   - `yyyy M d HH:mm:ss`
   - `yyyy MM dd HH:mm:ss`
   - `yyyy M dd HH:mm:ss`
   - `yyyy MM d HH:mm:ss`

##### 7.2.5 日志内容没有年月日
如果日志内容中没有年月日，可以从日志路径 `source` 中提取。例如：

- **日志路径**：`/data/rizhiyi/20180710/esb.log`
- **日志原文**：`22:36:00.946 ...`
- **提取方式**：
  1. 从 `raw_message` 中提取小时部分：`(?\d{2}:\d{2}:\d{2}\.\d{3})`
  2. 从 `source` 中提取日期部分：`[^\d]+(?\d{8})`
  3. 格式化处理：选择 `day hour`，生成目标字段 `timestamp`
  4. 时间戳识别：`yyyyMMdd HH:mm:ss.SSS`
  5. 删除字段 `day hour`

##### 7.2.6 常用时间格式
以下是常用的时间戳解析规则表：

| 符号 | 含义 | 格式 | 举例 |
| --- | --- | --- | --- |
| `yyyy` | 年份（四位数） | 2017 |  |
| `MM` | 月份（两位数） | 07 |  |
| `dd` | 日期（两位数） | 18 |  |
| `HH` | 小时（24小时制，两位数） | 16 |  |
| `mm` | 分钟（两位数） | 35 |  |
| `ss` | 秒（两位数） | 41 |  |
| `SSS` | 毫秒（三位数） | 270 |  |
| `a` | 上午/下午标识 | AM/PM |  |
| `MMM` | 月份缩写 | Jul |  |
| `E` | 星期几缩写 | Wed |  |
| `d` | 日期（一位数或两位数） | 5 |  |

通过这些步骤和规则，您可以有效地解析和结构化日志数据，从而更好地进行日志分析。