1、 其他类型日志接入及日志接入更多设置：《日志易数据接入手册》2.6章节
本章习题：
1、接入Nginx access.log日志文件。
2、接入历史messages日志。
思考：
要对日志做分析，首先要采集日志，采集完日志之后呢？还需要做些什么？结合第二章的
日志易产品架构，以及第四章的产品基础用法，你能向一个完全不了解日志的朋友说清楚
实现日志分析的流程吗？
78
日志学院
七、字段提取
字段提取，也可以称作数据结构化、数据正规化、数据清洗、字段解析。日志易是通过正
则的方式来进行字段解析的。
字段解析的过程，就是将原始日志
{"json.disk.used":60614467584,"agent_send_timestamp":1566891035681,"json.disk.inodes_us
ed":161262,"collector_recv_timestamp":1566891035875,"raw_message":"{\"timestamp\":\"20
19-08-
27T15:30:35+08:00\",\"disk\":{\"path\":\"/\",\"fstype\":\"ext2/ext3\",\"total\":205578670080,\"
free\":134542741504,\"used\":60614467584,\"used_percent\":29.484804,\"inodes_total\":127
30032,\"inodes_used\":161262,\"inodes_free\":12568770,\"inodes_used_percent\":1.266784}}
","ip":"192.168.1.100","json.disk.total":205578670080,"source":null,"json.disk.used_percent":2
9.484804,"json.disk.inodes_total":12730032,"json.disk.fstype":"ext2/ext3","logtype":"json","ho
stname":"zookeeper10","appname":"top_info_disk_stats","json.disk.path":"/","json.disk.free":1
34542741504,"json.disk.inodes_used_percent":1.266784,"context_id":1566891035682464687,
"json.disk.inodes_free":12568770,"tag":["top_info"],"_id":"AWzR-8whZZGRsC-
NaboT","timestamp":1566891035000}
变成下面格式的过程：
由于日志易内置了json格式的日志解析规则，我们上传的json日志就被自动解析成了格式
化的结构。
除内置解析规则外，其他格式的日志的解析需要在日志易“字段提取”处自定义解析规
则。
79
日志学院
日志易字段提取可使用多种解析规则对字段进行结构化处理，其中，正则解析及时间戳识
别是最基础、最常用的解析规则。
在正式开始字段提取之前，就让我们分别看看这两点。
7.1 正则解析
7.1.1 常见正则字符
因为日志易字段解析常会用到正则表达式进行字段拆分，这就要求使用者对正则表达式有
一定了解，常见的正则表达式字符如下（红色为重点关注项）：
字符 描述
将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个
\ 八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配
"\" 而 "\(" 则匹配 "("。
匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也
^
匹配 '\n' 或 '\r' 之后的位置。
匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也
$
匹配 '\n' 或 '\r' 之前的位置。
匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于
*
{0,}。
匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能
+
匹配 "z"。+ 等价于 {1,}。
匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或
?
"does" 。? 等价于 {0,1}。
n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的
{n}
'o'，但是能匹配 "food" 中的两个 o。
n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，
{n,}
但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
m 和 n 均为非负整数，其中n \S+\s\S+)\s+(?\S+)\s+\[(?\S+)\]\s+(?.*)
该表达式使用了正则表达式中分组的概念，尖括号<>内的是组名，小括号()内除？<>是组
名的固定格式外，右尖括号>到右小括号)之间的内容是该分组所匹配的内容。
其中\S 表示匹配非空格字符，\S+ 表示匹配连续的非空格字符，\s表示匹配空格字符，
(?\S+\s\S+)表示提取组名为timestamp的一段字符，匹配模式为\S+\s\S+。
通过这个正则表达式，会解析出如下字段：
l timestamp：2014-05-14 23:24:47
l pid：15752
l loglevel：Note
l message：InnoDB: 128 rollback segment(s) are active
7.2 时间戳识别
时间戳与索引存储以及查询关系非常密切，是否正确解析时间戳对后续使用有非常大的影
响。日志易建议所有进入系统的数据都做时间戳解析识别。
日志实时处理是日志易系统的一大特点，进入系统的数据，日志易系统默认为数据为实时
实时更新数据，通过日志发送时间来标识日志的时间。从上述 日志发送时间 的感念中可
以知道，该时间并非和实际日志产生时间非常吻合，这样就会造成一定的偏差，导致在搜
索时时间范围选择有误导致结果不准确。
7.2.1 时间戳识别
使用者通常关心日志发生的时间，比如检索最近几天的日志，需要转换日志中的
timestamp 字段的内容，日志易系统就可以识别这条日志的时间戳。这就需要您在之前抽
取字段时就提取出 timestamp 字段。
例如：
82
日志学院
timestamp: "150120 16:00:30"
需要配置解析规则为
yyMMdd HH:mm:ss
7.2.2 时间戳解析示例
2017-07-18 16:35:41:270
yyyy-MM-dd HH:mm:ss:SSS
07-Jul-2017 15:45:30.179
dd-MMM-yyyy HH:mm:ss.SSS
150120 16:00:30
yyMMdd HH:mm:ss
Jul 11, 2017 3:08:01 AM CST
MMM dd, yyyy HH:mm:ss a 'CST'
Jul 11, 2017 3:08:01 AM
MMM dd, yyyy HH:mm:ss a
20170712T022645Z
yyyyMMdd'T'HHmmss'Z'
1508811046
UNIX
Wed Nov 01 22:00:01 2017
E MMM dd HH:mm:ss yyyy
7.2.3 中文日期
2017-7-5 下午02时35分10秒 CST
yyyy-M-d aHH'时'mm'分'ss'秒' 'CST' zh
或
yyyy-M-d aKK'时'mm'分'ss'秒' 'CST' zh
83
日志学院
7.2.4 多种日期出现在同一日志
日志原文中的时间戳：
2017 7 5 10:10:10
2017 11 15 10:10:10
2017 7 15 10:10:10
2017 11 5 10:10:10
1、从raw_message中提取时间戳字段
(?\d+\s+\d+\s+\d+\s+\d+:\d+:\d+)
2、对 timestamp 识别4次
yyyy M d HH:mm:ss
yyyy MM dd HH:mm:ss
yyyy M dd HH:mm:ss
yyyy MM d HH:mm:ssy
7.2.5 日志内容没有年月日
日志内容中没有年月日的，通过可从该日志路径source中提取。
如某日志source为/data/rizhiyi/20180710/esb.log
日志原文为 22:36:00.946 ……
则提取时间戳方式如下：
1.正则提取小时部分：从 raw_message 中提取 (?\d{2}:\d{2+:\d{2}\.\d{3})
2.正则提取日期部分：从 source 中提取 [^\d]+(?\d{8})
3.格式化处理：选择 day hour，生成目标字段timestamp
4.时间戳识别：yyyyMMdd HH:mm:ss.SSS
5.删除字段 day hour
7.2.6 常用时间格式
常见时间戳解析可参考下表。
符号 含义 格式 举例