## Steps to Reproduce
I am back again with the issue related to the question already posted by me on
stack overflow and google Fluuter-Dev Groups
https://groups.google.com/forum/#!searchin/flutter-
dev/$20Error$3A$20$27_elements.contains(element)$27$3A$20is$20not$20true%7Csort:date/flutter-
dev/T1X7P9SmsG0/MVt7j7RFBAAJ
this issue has been plaguing me but i was unable to reproduce the same issue
and now i have somehow tried to repro again and I have posted the code for
everyone to figure out what is it that i am doing wrong that's throwing up
this assertion error and crashing the app.
I am new to programming and any help would be greatly appreciated. I have
trimmed down the code and I am aware of the some of the bugs. But, the only
main concern is the `Failed assertion: line 3927 pos 14:
'_dependents.isEmpty': is not true.` and `Failed assertion: line 1766 pos 12:
'_elements.contains(element)': is not true.`
## Steps to Reproduce
main.dart
    import 'dart:async';
    import 'package:flutter/material.dart';
    import 'package:flutter/rendering.dart';
    import 'package:flutter/widgets.dart';
    import 'package:firebase_auth/firebase_auth.dart';
    import 'package:firebase_database/firebase_database.dart';
    import 'package:untitled1/addnewbranch.dart';
    void main() {
      runApp(
        new MaterialApp(
          home: new Branches(),
        ),
      );
    }
    class ProjectModel {
      BranchSetUpModelData branchesModel;
      ProjectModel(this.branchesModel);
    }
    class BranchSetUpModelData {
      String branchName;
      String hostelType;
      String area;
      String city;
      BranchSetUpModelData(this.branchName, this.hostelType, this.area, this.city);
    }
    DatabaseReference _branchesRef;
    List projectModel = new List();
    Map data = {};
    List mapKeys = new List();
    DataSnapshot dataSnapshot;
    class Branches extends StatefulWidget {
      //const BranchView({ Key key }) : super(key: key);
      const Branches({Key key}) : super(key: key);
      @override
      _BranchesState createState() => new _BranchesState();
    }
    class _BranchesState extends State {
      String userUid = '';
      String text;
      int noOfBranches = 0;
      int itemCount;
      Future getUserUid() async {
        try {
          //FirebaseUser user = await FirebaseAuth.instance.currentUser();
          //userUid = user.uid;
          //print(userUid);
          _branchesRef =
              FirebaseDatabase.instance.reference().child('data').child('branches');
          print('branchesref = $_branchesRef');
          if (_branchesRef != null) {
            try {
              _branchesRef.once().then((DataSnapshot snapShot) {
                dataSnapshot = snapShot;
                print(snapShot is Map);
                print(dataSnapshot.value);
                data = dataSnapshot.value;
                print(data is Map);
                print(data);
                data.forEach((key, value) {
                  mapKeys.add(key);
                });
                print('no of branches = $noOfBranches');
                projectModel.clear();
                mapKeys.forEach((value) {
                  _branchesRef.child(value).once().then((DataSnapshot b) {
                    data = b.value;
                    data.keys.forEach((k) {
                      BranchSetUpModelData x = new BranchSetUpModelData(
                        b.value['branchDetails']['branchName'],
                        b.value['branchDetails']['hostelType'],
                        b.value['branchDetails']['area'],
                        b.value['branchDetails']['city'],
                      );
                      print('details from for each loop');
                      ProjectModel projectModelData = new ProjectModel(x);
                      projectModel.add(projectModelData);
                    });
                    print('projectmodel length = ${projectModel.length}');
                  });
                });
                setState(() {
                  noOfBranches = mapKeys.length;
                  itemCount = noOfBranches;
                });
                print('no of branches = $noOfBranches');
                data.keys.forEach((k) {
                  print('inside this foreach loop');
                  print(k);
                });
              });
            } catch (Exception) {
              showDialog(
                  context: context,
                  child: new AlertDialog(
                      content: new Text(Exception.message.toString())));
            }
          } else {
            print('user does not exist');
          }
        } catch (Exception) {
          print(Exception.toString());
          showDialog(
              context: context,
              child: new AlertDialog(
                content: new Text(Exception.toString()),
              ));
        }
      }
      @override
      void initState() {
        super.initState();
        mapKeys.clear();
        FirebaseDatabase.instance.setPersistenceEnabled(true);
        FirebaseDatabase.instance.setPersistenceCacheSizeBytes(10000000);
        getUserUid();
        /*setState((){
          noOfBranches = mapKeys.length;
        });*/
        print('noOfBranches in init state= $noOfBranches');
      }
      @override
      Widget build(BuildContext context) {
        print('noof branches inside widget build = $noOfBranches');
        //if(noOfBranches!=0) {
        return new MaterialApp(
          title: 'Branches',
          theme: new ThemeData(
            primaryColor: const Color(0xFF229E9C),
          ),
          home: new Scaffold(
            appBar: new AppBar(
              title: const Text('Branches'),
              backgroundColor: Colors.teal[300],
            ),
            floatingActionButton: new FloatingActionButton(
              heroTag: 'branchesHeroTag',
              child: new Icon(Icons.add),
              backgroundColor: Colors.teal[300],
              onPressed: (() {
                Navigator.push(
                  context,
                  new MaterialPageRoute(
                    builder: (_) => new AddNewBranch(),
                  ),
                );
              }),
              tooltip: 'Add Branch',
            ),
            body: new Container(
              child: new ListView.builder(
                padding: const EdgeInsets.only(
                  left: 4.0,
                  right: 4.0,
                ),
                itemCount: itemCount,
                itemBuilder: (BuildContext context, int index) {
                  if (noOfBranches != 0) {
                    // children: [
                    return new InkWell(
                      onTap: (() {
                        /*Navigate here to a different page*/
                      }),
                      child: new Card(
                        child: new Column(
                          children: [
                            new Container(
                              //margin: const EdgeInsets.only(top:16.0),
                              padding: const EdgeInsets.only(top: 16.0),
                              child: new Row(
                                children: [
                                  new Expanded(
                                    child: new Row(
                                      children: [
                                        new Container(
                                            margin: const EdgeInsets.only(
                                                left: 16.0,
                                                right: 8.0,
                                                top: 4.0,
                                                bottom: 4.0),
                                            child: new IconButton(
                                                icon: new Icon(Icons.call),
                                                onPressed: (() {}))),
                                        new Container(
                                          child: new Text(
                                            '80/125',
                                            style: new TextStyle(
                                              fontSize: 18.0,
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  new Expanded(
                                    child: new Row(
                                      textDirection: TextDirection.rtl,
                                      children: [
                                        new Container(
                                          margin:
                                              const EdgeInsets.only(right: 16.0),
                                          child: new Text(
                                            projectModel[index]
                                                .branchesModel
                                                .hostelType,
                                            style: new TextStyle(
                                              fontSize: 18.0,
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            new Container(
                              margin:
                                  const EdgeInsets.fromLTRB(16.0, 8.0, 16.0, 4.0),
                              child: new Row(children: [
                                new Text(
                                  projectModel[index].branchesModel.branchName,
                                  style: new TextStyle(
                                    fontSize: 24.0,
                                  ),
                                ),
                              ]),
                            ),
                            new Container(