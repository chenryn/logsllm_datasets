kprobe:finish_task_svitch
 / / record previous thread sleep tine
Spzev = [struct task_struct *]axg0;
if ($1 =- 0 11 $prev=>tgid == $1) [
fsossg = [prd 51) ↑
printf (*g10u 6d %6d %sn*, elapsed / 1000000,
pld, Sdur, equezy[tid]];
delete (fquery[tid]) 
delete(estart(tid)) 
---
## Page 653
616
6 Chapter 13 Applications
This program uses a positional parameter, $1, for the millisecond latency threshold. If it is not
provided, the tool defaults to zero, so all queries are printed.
Since MySQL server uses a service thread pool, and the same thread will process the entire
request, so I can use the thread ID as a unique ID for the request. This is used with the @query and
@start maps, so that I can save the query string pointer and start timestamp for each request, and
then fetch them when the request completes.
Some example output:
 nysqld_qslower.bt -p $ (pgrep mysqld)
Attaching 4 probes..
Tracing mysqld queries sloxer than 0 ms. Ctrl-C to end.
TIME (ns)
PID
MS QUERY
984
B066
sgxed, exTt prox szegn spaox uoxg . 1oetes L8
... 
A p must be used during execution to enable the USDT probes, just as a PID was required with
the BCC version. This makes the command line usage:
[suurw] αId d-q*xaxoebptbsu
bpftrace: uprobes
If your mysqld does not have USDT probes compiled in, it is possible to implement a similar tool
using uprobes of internal functions. The stack traces seen by previous commands show several
possible functions to instrument; for example, from the earlier profile(8) output:
handle_quexy (THD*, LEX*, Quezy_zesult*, unsigned long long, unslgned long long)
execute_sqlcon_select (THD*, TABLE_LIST*)
mysql_execute_cornand(7HD*, boo1)
Prepared_statenent11execute (String*, bcol)
Prepared_statenent::execute_loop (Stxing*, boo1, unslgned chax*, unslgned chax*)
mysqld_stmt_execute (THD*, unsigned long, unsigned long, unsigned char*, unsign.-
d1spatch_conmand (THD*, Cou_DATA const*, enun_server_cormand)
(xGH)poeauoo"op
The following tool, mysqld_qslower-uprobes.bt, has traced dispatch_command():
1/usr/local/bin/bpftrace
BEGIN
printf(*Tracing mysgld queries slover than id ms. Ctel-C to end. n*,
$1) ;
printf(*10s fs 6s sn”, "TIME(ns)*, *PID”, "Ms”, "gOERY*)
---
## Page 654
13.2 BPF Tools
617
uprobe 1/usr/sbin/mysqId: *dispatch_connand*
$COM_QUERY = 3
// see include/my_conmand.h
1f (axg2 == $COx_QUERY) (
equery [tid] = ste(*arg1)
estaxt[tid] = nsecs,
uzetpxobe:/usz/sbin/nysqld: *dispatch_connan.d*
/ [pT]re=8/
$dur = (nsecs - Bstart[tid]) / 1000000;
1f (sdur > $1) 1
printf (*g10u s6d 6d s^n*, elapsed / 1000000,
pld, Sdur, pquery[tid]]:
delete (fquery[tid]) 
delete (estart[tid]) 
Since dispatch_command( traces more than just queries, this tool ensures that the command
type is COM_QUERY. The query string is fetched from the COM_DATA argument, where the
string is the first struct member for queries.
As is the case with uprobes, the traced function names, the arguments, and the logic, are all
dependent on the version of MySQL (this is tracing 5.7), and this tool may not work on other
versions if any of these details change. This is why USDT probes are preferred.
13.2.11 mysqld_clat
mysqld_clat(8)? is a bpftrace tool I developed for this book. It traces MySQL command latency
and shows histograms for each command type. For example:
+ mysqld_clat.bt
Attaching 4 pzobes...
Tracing mysqld cormand latencies, Ctrl-C to end.
7 0rigin: I crested it for this book on 15-fFeb-2019. It's similar to my mysqld_command.d that I wrote on 25-Jun-2013,
although this tool is improved: it uses system-wide summaries and command names.
---
## Page 655
618
Chapter 13 Applications
eus [coe_001r] :
[4, B]
1 1eee8ee88ee8e 88ee8eeeee8ee8ee8eee8ee8e e8eeeee8ee8ee8e1
pus [CON_STKT_CLOSE] :
[4, B]
11889889
[B, 16} 
Bleeeeeeeeeeee e8eeeeeeeeeeeeeeeeeeeeeeee8eeeeeeeeeeeee 
[16, 32)
11869889
[32, 64)
6 188e88e88e88e 88ee88e88e8e
[64, 128]
13 1869889889886 8869869869869869889889886 886986986986986 1
[128, 256)
3 18ee88e88e88e
Pus [COH_QUERY] :
[8, 16}
3318