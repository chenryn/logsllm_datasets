ES对审计日志的字段进行全文检索，由于数据是追加写入（没有更新），可以使用行号和审计日志进行关联。在ES中建立 审计日志+行号（全文索引）。   
注意，ES建的索引必须能区分出PG中对应的表名，否则不同的表，行号是会重复的。  
如果ES中不能区分表名，那么建议使用 审计日志+全局唯一ID的全文索引，这样才能和数据关联起来。   
### 按行号拖数据，BUILD ES全文索引
从PG将数据拖到ES，使用行号拖，可以省掉一个PK字段以及索引，极大的提升PG的数据写入性能。   
使用行号拖数据，需要支持按数据块查询。  
```  
-- 一次拖一万条
create or replace function gen_tids(blkid int) returns tid[] as $$  
declare
  res tid[] := '{}'::tid[];  
begin
  for x in blkid..(blkid+199) loop  
    select array_cat(res, array(  
      SELECT ('('||x||',' || s.i || ')')::tid  
      FROM generate_series(0, 50) AS s(i)  
    )
    ) into res;  
  end loop;  
return res;  
end;
$$ language plpgsql strict immutable;  
```
同时需要注意空洞（漏建索引）的问题，比如   
不要查最后一个数据块，除非这个表不再写入，否则可能导致查询空洞。  
并行写入PG时，可能导致某个数据块的部分数据还没有提交，而拖数据的程序如果读到这个数据块的时候，下一次跳过这个数据块，会导致空洞。            
拖数据测试脚本  
```
一次请求拖1万条
#!/bin/bash
for ((i=1;i/dev/null
  echo "end:   `date` "
  done
done
```
为了提高拖数据的性能，拖数据和写数据尽量保持一个速度水平，这样写入的数据还没有被刷到磁盘，可以在缓存中命中，拖数据的效率更高。  
原理详见  
[《块级扫描在IoT(物联网)极限写和消费读并存场景的应用》](../201706/20170607_01.md)  
## 小结   
### 性能指标  
1\. 数据量：  
单个UID，单节点，一天2100万记录(12GB, 索引600MB)。（100个节点/分片，单个用户一天约21亿数据量）  
2\.1 写入性能（gen_rand_str）  
使用brin索引时 9.47万/s  
使用btree索引时 7.9万/s  
2\.2 写入性能（random()）  
使用btree索引时 24万/s  
3\. 范围查询，排序输出  
返回462万记录，2.5秒。  
4\. 范围+全文检索查询，排序输出  
返回294万记录，8.5秒。  
5\. 分页数评估  
精确度：+- 5% 左右  
响应速度：1毫秒左右。  
6\. 精确分页数  
与实际数据量、条件有关。1秒以上  
7\. 分页查询  
范围+全文检索查询，排序输出： 每获取1000条记录约11毫秒。  
（与命中率有关），极端情况为处理所有记录，只有最后一条记录满足条件。  
### 随机分布与可用性、数据倾斜问题  
使用jdbc或libpq时，一个连接可以设置多个实例，将从先到后，自动选择一个可读写的实例。（相当于客户端自动failover）。  
配置示例，假设有4个数据库实例，可以配置4个数据源如下：  
```  
db1: host1:port1,host2:port2,host3:port3,host4:port4  
db2: host2,port2,host3:port3,host4:port4,host1:port1  
db3: host3:port3,host4:port4,host1:port1,host2,port2  
db4: host4:port4,host1:port1,host2:port2,host3:port3  
```  
当任意一个实例出现问题时，每个数据源还是能获取到下一个可用的连接，不会堵塞写入。  
当实例修复后，依旧使用首选实例。  
使用这种方法，可以最大化的提高可用性，无需备库。  
另外异常的实例活了之后，就会继续被首选，无需担心倾斜问题，因为不保留历史。时间会抹平倾斜问题。  
## 参考    
[《行为、审计日志 (实时索引/实时搜索)建模 - 最佳实践》](../201705/20170516_01.md)    
[《PostgreSQL schemaless 的实现(类mongodb collection)》](../201705/20170511_01.md)     
[《PostgreSQL 最佳实践 - 水平分库(基于plproxy)》](../201608/20160824_02.md)    
[《阿里云ApsaraDB RDS for PostgreSQL 最佳实践 - 2 教你RDS PG的水平分库》](../201512/20151220_02.md)    
[《PostgreSQL 10.0 preview 性能增强 - mergesort(Gather merge)》](../201703/20170313_09.md)    
[《PostgreSQL 10.0 preview sharding增强 - 支持Append节点并行》](../201703/20170312_11.md)    
[《PostgreSQL 10.0 preview sharding增强 - pushdown 增强》](../201703/20170312_20.md)    
[《PostgreSQL 10.0 preview sharding增强 - postgres_fdw 多节点异步并行执行》](../201703/20170312_07.md)    
[《PostgreSQL 9.6 sharding based on FDW & pg_pathman》](../201610/20161027_01.md)    
[《PostgreSQL 9.6 单元化,sharding (based on postgres_fdw) - 内核层支持前传》](../201610/20161004_01.md)    
[《PostgreSQL 9.6 sharding + 单元化 (based on postgres_fdw) 最佳实践 - 通用水平分库场景设计与实践》](../201610/20161005_01.md)    
[《PostgreSQL 物联网黑科技 - 瘦身几百倍的索引(BRIN index)》](../201604/20160414_01.md)    
[《论count与offset使用不当的罪名 和 分页的优化》](../201605/20160506_01.md)    
[《RDS PostgreSQL : 使用 oss_fdw 读写OSS对象存储》](https://help.aliyun.com/document_detail/44461.html)    
[《HybridDB PostgreSQL : 使用 oss_fdw 读写OSS对象存储》](https://help.aliyun.com/document_detail/35457.html)    
[《PostgreSQL 10.0 preview 功能增强 - libpq支持多主机连接(failover,LB)让数据库HA和应用配合更紧密》](../201704/20170420_01.md)   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")