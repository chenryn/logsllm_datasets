## Systemtap EXP: trace PostgreSQL netflow per session or per sql  
### 作者                                                             
digoal                                                               
### 日期                                                                              
2013-10-15                                                          
### 标签                                                           
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                                            
----                                                                     
## 背景        
```  
前面几篇blog介绍了使用systemtap统计PostgreSQL单挑SQL以及整个会话的io操作.  
本文将要介绍一下对数据库单条SQL的网络传输包, 传输字节数的统计. 以及整个会话的统计.  
需要用到的探针如下 :   
tapset/tcp.stp  
/**  
 * probe tcp.recvmsg.return - Receiving TCP message complete  
 * @name: Name of this probe  
 * @size: Number of bytes received or error code if an error occurred.  
 * @family: IP address family  
 * @saddr: A string representing the source IP address  
 * @daddr: A string representing the destination IP address  
 * @sport: TCP source port   
 * @dport: TCP destination port  
 *  
 * Context:  
 *  The process which receives a tcp message  
 */  
probe tcp.recvmsg.return = kernel.function("tcp_recvmsg").return {  
        name = "tcp.recvmsg"  
        size = $return  
        family  = __ip_sock_family($sk)  
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))  
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))  
        sport = __tcp_sock_sport($sk)  
        dport = __tcp_sock_dport($sk)  
}  
/**  
 * probe tcp.sendmsg.return -  Sending TCP message is done  
 * @name: Name of this probe  
 * @size: Number of bytes sent or error code if an error occurred.   
 *  
 * Context:  
 *  The process which sends a tcp message  
 */  
probe tcp.sendmsg.return = kernel.function("tcp_sendmsg").return {  
        name = "tcp.sendmsg"  
        size = $return   
}  
以上探针对应的linux 源码 :   
[root@db-172-16-3-150 tapset]# stap -l 'kernel.function("tcp_sendmsg")'  
kernel.function("tcp_sendmsg@net/ipv4/tcp.c:902")  
[root@db-172-16-3-150 tapset]# less /usr/src/debug/kernel-2.6.32-358.el6/linux-2.6.32-358.el6.x86_64/net/ipv4/tcp.c   
int tcp_sendmsg(struct kiocb *iocb, struct socket *sock, struct msghdr *msg,  
                size_t size)  
{  
        struct sock *sk = sock->sk;  
        struct iovec *iov;  
        struct tcp_sock *tp = tcp_sk(sk);  
        struct sk_buff *skb;  
        int iovlen, flags;  
        int mss_now, size_goal;  
        int err, copied;  
        long timeo;  
接下来写stp脚本, tcp.sendmsg.return没有源和目的ip信息, 所以需要自己写 :   
[root@db-172-16-3-150 ~]# cat t.stp  
global var1%[60000]  // 记录每SQL网络传输流量统计信息  
global var11%[60000]  // 记录每SQL网络传输时间统计信息  
global var2%[60000]  // 记录所有会话网络传输流量统计信息  
global var22%[60000]  // 记录所有会话网络传输时间统计信息  
global del%[120000] // 因为foreach中不允许修改本数组, 所以需要使用另一个数组来存储索引, 方便删除  
probe tcp.sendmsg.return {  
  if ($return>0 && execname()=="postgres") {  
    v_us = gettimeofday_us() - @entry(gettimeofday_us())  
    saddr = format_ipaddr(__ip_sock_saddr($sock->sk), __ip_sock_family($sock->sk))  
    daddr = format_ipaddr(__ip_sock_daddr($sock->sk), __ip_sock_family($sock->sk))  
    sport = __tcp_sock_sport($sock->sk)  
    dport = __tcp_sock_dport($sock->sk)  
    var1[pid(),execname(),saddr,sport,daddr,dport,"S"] 0 && execname()=="postgres") {  
    v_us = gettimeofday_us() - @entry(gettimeofday_us())  
    var1[pid(),execname(),saddr,sport,daddr,dport,"R"] <<< $return  
    var11[pid(),execname(),saddr,sport,daddr,dport,"R"] <<< v_us  
    var2[saddr,sport,daddr,dport,"R"] <<< $return  
    var22[saddr,sport,daddr,dport,"R"] <<< v_us  
  }  
}  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {  
  foreach([a,b,c,d,e,f,g] in var1) {  
    if (a==pid() && b==execname()) {  
      del[a,b,c,d,e,f,g]=1  
    }  
  }  
  foreach([a,b,c,d,e,f,g] in del) {  
    delete var1[a,b,c,d,e,f,g]  
    delete var11[a,b,c,d,e,f,g]  
  }  
  delete del  
}  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__done") {  
  // 输出SQL语句  
  printf("query: %s\n", user_string($arg1))  
  foreach([a,b,c,d,e,f,g] in var1 @sum -) {  
    if (g=="S" && a==pid() && b==execname()) {  
      v1 = @count(var1[a,b,c,d,e,f,g])  // 发送包数  
      v2 = @sum(var1[a,b,c,d,e,f,g]) / 1024  // 发送K字节数  
      v3 = @sum(var11[a,b,c,d,e,f,g])  // 发送时间  
      spv1 = ((v3!=0) ? ((1000000*v1)/v3) : 0)  // 发送包每秒  
      spv2 = ((v3!=0) ? ((1000000*v2)/v3) : 0)  // 发送K字节数每秒  
      printf("-%s-from:%s:%d-to:%s:%d, pkgs:%d, Kbytes:%d, pkgs/s:%d, Kbytes/s:%d\n", g,c,d,e,f, v1, v2, spv1, spv2)  
    }  
    if (g=="R" && a==pid() && b==execname()) {  
      v4 = @count(var1[a,b,c,d,e,f,g])  // 接收包数  
      v5 = @sum(var1[a,b,c,d,e,f,g]) / 1024  // 接收K字节数  
      v6 = @sum(var11[a,b,c,d,e,f,g])  // 接收时间  
      spv3 = ((v6!=0) ? ((1000000*v4)/v6) : 0)  // 接收包每秒  
      spv4 = ((v6!=0) ? ((1000000*v5)/v6) : 0)  // 接收K字节数每秒  
      printf("-%s-from:%s:%d-to:%s:%d, pkgs:%d, Kbytes:%d, pkgs/s:%d, Kbytes/s:%d\n", g,e,f,c,d, v4, v5, spv3, spv4)  
    }  
    del[a,b,c,d,e,f,g]=1  
  }  
  foreach([a,b,c,d,e,f,g] in del) {  
    delete var1[a,b,c,d,e,f,g]  
    delete var11[a,b,c,d,e,f,g]  
  }  
  delete del  
}  
probe end {  
  println("----------END----------")  
  foreach([a,b,c,d,e] in var2 @sum -) {  
    if (e == "S") {  
      v1 = @count(var2[a,b,c,d,e])  // 发送包数  
      v2 = @sum(var2[a,b,c,d,e]) / 1024  // 发送K字节数  
      v3 = @sum(var22[a,b,c,d,e])  // 发送时间  
      spv1 = ((v3!=0) ? ((1000000*v1)/v3) : 0)  // 发送包每秒  
      spv2 = ((v3!=0) ? ((1000000*v2)/v3) : 0)  // 发送K字节数每秒  
      printf("-%s-from:%s:%d-to:%s:%d, pkgs:%d, Kbytes:%d, pkgs/s:%d, Kbytes/s:%d\n", e,a,b,c,d, v1, v2, spv1, spv2)  
    }  
    if (e == "R") {  
      v4 = @count(var2[a,b,c,d,e])  // 接收包数  
      v5 = @sum(var2[a,b,c,d,e]) / 1024  // 接收K字节数  
      v6 = @sum(var22[a,b,c,d,e])  // 接收时间  
      spv3 = ((v6!=0) ? ((1000000*v4)/v6) : 0)  // 接收包每秒  
      spv4 = ((v6!=0) ? ((1000000*v5)/v6) : 0)  // 接收K字节数每秒  
      printf("-%s-from:%s:%d-to:%s:%d, pkgs:%d, Kbytes:%d, pkgs/s:%d, Kbytes/s:%d\n", e,c,d,a,b, v4, v5, spv3, spv4)  
    }  
  }  
  delete var1  
  delete var11  
  delete var2  
  delete var22  
  delete del  
}  
测试 :   