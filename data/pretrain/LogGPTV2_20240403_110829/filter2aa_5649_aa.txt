---
title: Bash
date: 2020-11-25 18:28:43
background: bg-[#3e4548]
tags:
    - shell
    - sh
    - echo
    - script
    - linux
categories:
    - Programming
intro: This is a quick reference cheat sheet to getting started with linux bash shell scripting.
plugins:
    - copyCode
---
Getting Started
---------------
### hello.sh
```bash
#!/bin/bash
VAR="world"
echo "Hello $VAR!" # => Hello world!
```
Execute the script
```shell script
$ bash hello.sh
```
### Variables
```bash
NAME="John"
echo ${NAME}    # => John (Variables)
echo $NAME      # => John (Variables)
echo "$NAME"    # => John (Variables)
echo '$NAME'    # => $NAME (Exact string)
echo "${NAME}!" # => John! (Variables)
NAME = "John"   # => Error (about space)
```
### Comments
```bash
# This is an inline Bash comment.
```
```bash
: '
This is a
very neat comment
in bash
'
```
Multi-line comments use `:'` to open and `'` to close
### Arguments {.row-span-2}
| Expression  | Description                           |
|-------------|---------------------------------------|
| `$1` â€¦ `$9` | Parameter 1 ... 9                     |
| `$0`        | Name of the script itself             |
| `$1`        | First argument                        |
| `${10}`     | Positional parameter 10               |
| `$#`        | Number of arguments                   |
| `$$`        | Process id of the shell               |
| `$*`        | All arguments                         |
| `$@`        | All arguments, starting from first    |
| `$-`        | Current options                       |
| `$_`        | Last argument of the previous command |
See: [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables)
### Functions
```bash
get_name() {
    echo "John"
}
echo "You are $(get_name)"
```
See: [Functions](#bash-functions)
### Conditionals {#conditionals-example}
```bash
if [[ -z "$string" ]]; then
    echo "String is empty"
elif [[ -n "$string" ]]; then
    echo "String is not empty"
fi
```
See: [Conditionals](#bash-conditionals)
### Brace expansion
```bash
echo {A,B}.js
```
---
| Expression | Description         |
|------------|---------------------|
| `{A,B}`    | Same as `A B`       |
| `{A,B}.js` | Same as `A.js B.js` |
| `{1..5}`   | Same as `1 2 3 4 5` |
See: [Brace expansion](http://wiki.bash-hackers.org/syntax/expansion/brace)
### Shell execution
```bash
# => I'm in /path/of/current
echo "I'm in $(PWD)"
# Same as:
echo "I'm in `pwd`"
```
See: [Command substitution](http://wiki.bash-hackers.org/syntax/expansion/cmdsubst)
Bash Parameter expansions
--------------------
### Syntax {.row-span-2}
| Code              | Description         |
|-------------------|---------------------|
| `${FOO%suffix}`   | Remove suffix       |
| `${FOO#prefix}`   | Remove prefix       |
| `${FOO%%suffix}`  | Remove long suffix  |
| `${FOO##prefix}`  | Remove long prefix  |
| `${FOO/from/to}`  | Replace first match |
| `${FOO//from/to}` | Replace all         |
| `${FOO/%from/to}` | Replace suffix      |
| `${FOO/#from/to}` | Replace prefix      |
#### Substrings
| Expression      | Description                    |
|-----------------|--------------------------------|
| `${FOO:0:3}`    | Substring _(position, length)_ |
| `${FOO:(-3):3}` | Substring from the right       |
#### Length
| Expression | Description      |
|------------|------------------|
| `${#FOO}`  | Length of `$FOO` |
#### Default values
| Expression        | Description                              |
|-------------------|------------------------------------------|
| `${FOO:-val}`     | `$FOO`, or `val` if unset                |
| `${FOO:=val}`     | Set `$FOO` to `val` if unset             |
| `${FOO:+val}`     | `val` if `$FOO` is set                   |
| `${FOO:?message}` | Show message and exit if `$FOO` is unset |
### Substitution
```bash
echo ${food:-Cake}  #=> $food or "Cake"
```
```bash
STR="/path/to/foo.cpp"
echo ${STR%.cpp}    # /path/to/foo
echo ${STR%.cpp}.o  # /path/to/foo.o
echo ${STR%/*}      # /path/to
echo ${STR##*.}     # cpp (extension)
echo ${STR##*/}     # foo.cpp (basepath)
echo ${STR#*/}      # path/to/foo.cpp
echo ${STR##*/}     # foo.cpp
echo ${STR/foo/bar} # /path/to/bar.cpp
```
### Slicing
```bash
name="John"
echo ${name}           # => John
echo ${name:0:2}       # => Jo
echo ${name::2}        # => Jo
echo ${name::-1}       # => Joh
echo ${name:(-1)}      # => n
echo ${name:(-2)}      # => hn
echo ${name:(-2):2}    # => hn
length=2
echo ${name:0:length}  # => Jo
```
See: [Parameter expansion](http://wiki.bash-hackers.org/syntax/pe)
### basepath & dirpath
```bash
SRC="/path/to/foo.cpp"
```
```bash
BASEPATH=${SRC##*/}   
echo $BASEPATH  # => "foo.cpp"
DIRPATH=${SRC%$BASEPATH}
echo $DIRPATH   # => "/path/to/"
```
### Transform 
```bash
STR="HELLO WORLD!"
echo ${STR,}   # => hELLO WORLD!
echo ${STR,,}  # => hello world!
STR="hello world!"
echo ${STR^}   # => Hello world!
echo ${STR^^}  # => HELLO WORLD!
ARR=(hello World)
echo "${ARR[@],}" # => hello world
echo "${ARR[@]^}" # => Hello World
```
Bash Arrays 
------
### Defining arrays
```bash
Fruits=('Apple' 'Banana' 'Orange')
Fruits[0]="Apple"
Fruits[1]="Banana"
Fruits[2]="Orange"
ARRAY1=(foo{1..2}) # => foo1 foo2
ARRAY2=({A..D})    # => A B C D
# Merge => foo1 foo2 A B C D
ARRAY3=(${ARRAY1[@]} ${ARRAY2[@]})
# declare construct
declare -a Numbers=(1 2 3)
Numbers+=(4 5) # Append => 1 2 3 4 5
```
### Indexing
| -                  | -             |
|--------------------|---------------|
| `${Fruits[0]}`     | First element |
| `${Fruits[-1]}`    | Last element  |
| `${Fruits[*]}`     | All elements  |
| `${Fruits[@]}`     | All elements  |
| `${#Fruits[@]}`    | Number of all |
| `${#Fruits}`       | Length of 1st |
| `${#Fruits[3]}`    | Length of nth |
| `${Fruits[@]:3:2}` | Range         |
| `${!Fruits[@]}`    | Keys of all   |
### Iteration
```bash
Fruits=('Apple' 'Banana' 'Orange')
for e in "${Fruits[@]}"; do
    echo $e
done
```
#### With index
```bash
for i in "${!Fruits[@]}"; do
  printf "%s\t%s\n" "$i" "${Fruits[$i]}"
done
```
### Operations {.col-span-2}
```bash
Fruits=("${Fruits[@]}" "Watermelon")     # Push
Fruits+=('Watermelon')                   # Also Push
Fruits=( ${Fruits[@]/Ap*/} )             # Remove by regex match
unset Fruits[2]                          # Remove one item
Fruits=("${Fruits[@]}")                  # Duplicate
Fruits=("${Fruits[@]}" "${Veggies[@]}")  # Concatenate
lines=(`cat "logfile"`)                  # Read from file
```
### Arrays as arguments
```bash
function extract()
{
    local -n myarray=$1
    local idx=$2
    echo "${myarray[$idx]}"
}
Fruits=('Apple' 'Banana' 'Orange')
extract Fruits 2     # => Orangle
```
Bash Dictionaries
------------
### Defining
```bash
declare -A sounds
```
```bash
sounds[dog]="bark"
sounds[cow]="moo"
sounds[bird]="tweet"
sounds[wolf]="howl"
```
### Working with dictionaries
```bash
echo ${sounds[dog]} # Dog's sound
echo ${sounds[@]}   # All values
echo ${!sounds[@]}  # All keys
echo ${#sounds[@]}  # Number of elements
unset sounds[dog]   # Delete dog
```
### Iteration
```bash
for val in "${sounds[@]}"; do
    echo $val
done
```
---
```bash
for key in "${!sounds[@]}"; do
    echo $key
done
```
Bash Conditionals
------------
### Integer conditions
| Condition           | Description                                 |
|---------------------|---------------------------------------------|
| `[[ NUM -eq NUM ]]` | Equal                            |
| `[[ NUM -ne NUM ]]` | Not equal             |
| `[[ NUM -lt NUM ]]` | Less than             |
| `[[ NUM -le NUM ]]` | Less than or equal    |
| `[[ NUM -gt NUM ]]` | Greater than          |
| `[[ NUM -ge NUM ]]` | Greater than or equal |
| `(( NUM  NUM ))`   | Greater than                                |
| `(( NUM >= NUM ))`  | Greater than or equal                       |
### String conditions
| Condition          | Description                 |
|--------------------|-----------------------------|
| `[[ -z STR ]]`     | Empty string                |
| `[[ -n STR ]]`     | Not empty string |
| `[[ STR == STR ]]` | Equal                       |
| `[[ STR = STR ]]`  | Equal (Same above)          |
| `[[ STR  STR ]]`  | Greater than _(ASCII)_      |
| `[[ STR != STR ]]` | Not Equal                   |
| `[[ STR =~ STR ]]` | Regexp                      |
### Example {.row-span-3}
#### String
```bash
if [[ -z "$string" ]]; then
    echo "String is empty"
elif [[ -n "$string" ]]; then
    echo "String is not empty"
else
    echo "This never happens"
fi
```
#### Combinations
```bash
if [[ X && Y ]]; then
    ...
fi
```
#### Equal
```bash
if [[ "$A" == "$B" ]]; then
    ...
fi
```
#### Regex
```bash
if [[ '1. abc' =~ ([a-z]+) ]]; then
    echo ${BASH_REMATCH[1]}
fi
```
#### Smaller
```bash
if (( $a Exists                      |
| `[[ -d FILE ]]`   | Directory                   |
| `[[ -f FILE ]]`   | File                        |
| `[[ -h FILE ]]`   | Symlink                                |
| `[[ -s FILE ]]`   | Size is > 0 bytes                      |
| `[[ -r FILE ]]`   | Readable                    |
| `[[ -w FILE ]]`   | Writable                    |
| `[[ -x FILE ]]`   | Executable                             |
| `[[ f1 -nt f2 ]]` | f1 newer than f2 |
| `[[ f1 -ot f2 ]]` | f2 older than f1 |
| `[[ f1 -ef f2 ]]` | Same files                             |
### More conditions
| Condition            | Description          |
|----------------------|----------------------|
| `[[ -o noclobber ]]` | If OPTION is enabled |
| `[[ ! EXPR ]]`       | Not                  |
| `[[ X && Y ]]`       | And                  |
| `[[ X || Y ]]`       | Or                   |
### logical and, or
```bash
if [ "$1" = 'y' -a $2 -gt 0 ]; then
    echo "yes"
fi
if [ "$1" = 'n' -o $2 -lt 0 ]; then
    echo "no"
fi
```
Bash Loops
-----
### Basic for loop