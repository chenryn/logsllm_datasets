Elimination阶段通过DetermineLoopCount收集的loopCount信息调用GenerateLoopCount生成：
生成了loopCount后就可以通过loopCount计算索引归纳变量的上界，相关函数为：GenerateSecondaryInductionVariableBound：
综上分析，索引归纳变量的上界检查的具体计算公式如下：
公式1：loopCount非常量（通过GenerateLoopCount计算得到）：
index + indexOffset + loopCountMinusOne * maxMagnitudeChange ≤
headSegmentLength – 1
loopCountMinusOne = (left – right + offset)/ minMagnitudeChange
公式2：loopCount为常量（通过DetermineLoopCount计算得到）：
index + indexOffset + loopCountMinusOneConstantValue * maxMagnitudeChange ≤
headSegmentLength – 1
loopCountMinusOneConstantValue = offset / minMagnitudeChange
其中：
minMagnitudeChange = inductionVariable.ChangeBounds().LowerBound()
maxMagnitudeChange = indexInductionVariable.ChangeBounds().UpperBound()
关于公式1，看这样一个例子：
这里loopCount由GenerateLoopCount决定：
loopCountMinusOne = (left – right + offset)/ minMagnitudeChange = (end – start
– 1) / 1
由公式1得到：index + 2+ (end – start – 1) * 2 ≤ headSegmentLength – 1
简化得到：index + (end – start – 1) * 2 ≤ headSegmentLength – 3
Globopt后的部分dump如下：
关于公式2，看这样一个例子：
这里loopCount可以由DetermineLoopCount直接决定：
loopCountMinusOneConstantValue = (leftOffset – rightOffset) /
minMagnitudeChange = (4-3) / 1 = 1
由公式2得到：index + 2 + 1*2 ≤ headSegmentLength – 1
简化得到：index ≤ headSegmentLength – 5
Globopt后的部分dump如下：
根据上面的分析，Bound Check Optimize主要分为Bound Check Elimination和Bound Check
Hoist两部分。错误的Elimination或者Hoist都会引发Array Out-Of-Boundary
(OOB)漏洞，下面将分别介绍这两种优化引发的漏洞。
## 0x1 Attack Surface 1: Bound Check Elimination
Case Study: CVE-2018-0777
首先观察Globopt后的部分dump：
这里可以看到在StElemI_A前只有一个Lower Bound Check: 0 ≤ i，而Upper Bound
Check被消除了，从而造成了OOB。这里的PoC和之前介绍的条件4中的示例程序不太一样的是这里增加了一个基本块：
if (i === 10) { i += 0; }
如果没有这个基本块则可以采用条件4进行Bound Check Hoist。因此需要重点关注这个增加的基本块会对数据流分析造成什么影响：
1）Loop PrePass
根据之前的介绍，Loop PrePass阶段会确定循环中的归纳变量，这里新增的基本块中因为存在 i+= 0; 符合归纳变量的条件，因此被加入归纳变量。
2）DetermineLoopCount
根据1）的归纳变量i，计算loopCount，因为不满足loopCount生成条件，只保留相关信息：
3）OptConstFoldBinary
在actual optimization phase阶段，当分析到基本块：if (i === 10) { i += 0; } 会发生常量合并：
CFG的Add_A操作被优化成Ld_I4操作:
因此，Loop
PrePass被认为是归纳变量的i在常量合并后在循环体内被重新定值，显然不再符合归纳变量的条件。MergePredBlocksValueMaps后indexValue从IntBoundedValueInfo转换成IntRangeValueInfo，从而丢失了相对边界。
4）Bound Check Hoist
Bound Check Hoist阶段，由于条件1~5均不满足，尝试采用条件6。因为索引i丢失相对边界，indexOffset =
-0x80000000，继续计算offset：
offset = -1 – (-0x80000000) = 0x7ffffffff，这里offset已经是最大的有符号整数了，后面计算边界肯定会出问题。
5）Upper Bound Check Elimination
这里 index ≤ headSegmentLength + offset = headSegmentLength + 0x7fffffff
恒成立，不会进入if成立分支生成Upper Bound Check并Hoist，因此Upper Bound Check被消除，最终导致OOB。
Patch Analysis: CVE-2018-0777
通过上面的分析可以知道，在actual optimization phase阶段，常量合并导致归纳变量i丢失相对边界，但是Bound Check
Hoist仍然使用条件6进行边界检查从而导致边界计算错误，最终消除了Hoist到Landing
Pad的上界检查。因此这个漏洞的根本原因是没有考虑到常量合并中存在归纳变量的情况，补丁如下：
补丁后，如果常量合并的变量是归纳变量，则设置该归纳变量是不确定的，最终在Upper Bound Check
Hoist阶段直接return，不再生成upperBoundCheckHoistInfo：
Patch Bypass
针对这个补丁，zenhumany师傅提出了触发这种Upper Bound Check Hoist Elimination的条件：
并根据这种条件找到两种新的bypass方法：
1）CVE-2018-8137：绕过else if (src1IntConstantBounds.IsConstant() &&
src2IntConstantBounds.IsConstant())分支
2）a killed 0day: 通过OptConstFoldBr 删除 DeadBlock
因为篇幅原因，两个漏洞的细节不再详述，可以参考PPT。最后微软为了解决这种Upper Bound Check Hoist
Elimination的问题，直接删除了相关条件检测：
## 0x2 Attack Surface 2: Bound Check Hoist
回顾在介绍Bound Check Hoist的条件6：induction variable(index) + loopCount时，引入的两个公式：
公式1：loopCount非常量（通过GenerateLoopCount计算得到）：
index + indexOffset + loopCountMinusOne * maxMagnitudeChange ≤
headSegmentLength – 1
loopCountMinusOne = (left – right + offset)/ minMagnitudeChange
公式2：loopCount为常量（通过DetermineLoopCount计算得到）：
index + indexOffset + loopCountMinusOneConstantValue * maxMagnitudeChange ≤
headSegmentLength – 1
loopCountMinusOneConstantValue = offset / minMagnitudeChange
其中：
minMagnitudeChange = inductionVariable.ChangeBounds().LowerBound()
maxMagnitudeChange = indexInductionVariable.ChangeBounds().UpperBound()
如果满足条件6就可以通过这个这两个公式做Bound Check Hoist，那么这两个公式本身是否存在问题呢？
问题1：如果indexOffset  0x75已经越界。
因此，在indexOffset 
  2. 
  3. 