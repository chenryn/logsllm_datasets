recognize a shellcode, we can’t emulate it for futher
downloads.
3. Limitation of the shellcode emulation module:
After recognizing shellcode in some strings, the ana-
lyzer will trying to emulate the execution of the shell-
code. The default conﬁguration of the emulation don’t
really call the system APIs for security reasons, thus
the emulation may fail and can’t get to the end of the
shellcode.
4. Diﬀerent implementations of the parser and the
script engine: The SGMLlib and SpiderMonkey be-
haves diﬀerently from a real IE or Firefox browser
when parsing the HTML ﬁles and interpret the JS
codes. This may cause the execution of the malicious
code fail. This limitation can be overcame by multiple
runs of the analyzer with modifying the source code
of SGMLlib and SpiderMonkey to make them behaves
exactly like a real IE or Firefox browser.
From Table 4, we can see that the most diﬃcult part of
the analyzer is the detection and emulation of the shellcode,
while the other two causes can be eliminated by some en-
gineering improvements. As a result, most of the missing
nodes by WebPatrol are the malicious binaries downloaded
after a successful compromise. We note that these missing
nodes (binaries) have relatively little eﬀect on the analysis
of the malicious web logic and contents. We will discuss our
future work to improve WebPatrol in Section 7.
6.4 Case Study on Vulnerability Life Cycle
Using collected WMS repository, we studied how vulner-
ability exploits evolve with the time.
The ﬁrst vulnerability we want to introduce is MS10-002
“Aurora”. This vulnerability got its fame by a large-scale
and complex attack on some global corporations, including
Google, in which this vulnerability was ﬁrstly used. Soon
after this attack, Microsoft’s Security Advisory 979352 was
published(Jan. 14, 2010), and our web-based malware col-
lection system recorded several sites containing this exploit
code. The malicious sites soon became inaccessible, but for-
tunately our collection system stored snapshots of that sce-
nario, so we can replay it multiple times and analyze it using
diﬀerent tools.
Recently, Microsoft Internet Explorer ’iepeers.dll’ Remote
Code Execution Vulnerability (CVE-2010-0806, MS10-018)
is widely exploited in WMSs. Soon after the exploit code
was published (Around March 9, 2010), we re-analyzed our
WMS depository and found a lot of scenarios containing
such exploit snippets.
Vulnerability Life Cycle: Using these two vulnerabili-
ties as examples, we can show the life-cycle of a vulnerability
from the exploit’s ﬁrst disclosure to a large-scale in-the-wild
deployment (according to our collection) as in Figure 7. This
ﬁgure shows the amount of the newly discovered WMSs con-
taining exploits using these two vulnerabilities. every 10
days. From the ﬁgure we can see that, usually it takes only
several days between the disclosure of the sample exploit
codes and a large scale deployment of the exploit pages, and
soon the exploit code become popular in diﬀerent scenarios.
And then, after the release of the patches for the vulnerabil-
ities, the number of such exploits in the wild decreases and
another 0-day vulnerability replaces it. However, the exploit
code will not disappear completely, though not as popular
as before, the number of exploit code will remain in a low
level for quite a long time. Also we can see that MS10-002
exploits are not as popular as MS10-018 exploit, maybe this
is because that the “Aurora” exploits is too famous and it
draws too much attention of the security vendors, thus it’s
no longer a proﬁtable choice for the underground web-based
malware adversaries.
Figure 7: Number of new WMSs that contain MS10-
002 and MS10-018 Exploits in edu.cn Domains
Exploit Evolution: Additionally, we also collected sev-
eral variants of the exploit and put them together to study
the evolution progress of the exploits. Through this analysis
and several debugging runs in a HI client honeypot, we were
able to dissect the details of the vulnerability before the re-
lease of vendor’s security bulletin. Also, we compare the
diﬀerence of their obfuscation techniques and coding styles,
and identiﬁed several diﬀerent adversaries and exploit kits.
...
var sss = Array(472,388,456,128,...,164,236);
var arr = new Array;
for (var i = 0; i < sss.length; i ++ ){
arr[i] = String.fromCharCode(sss[i]/4); }
...
Figure 8: Obfuscated Codes in Variant I of the
MS10-018 Exploit
Take the MS10-018 vulnerability as an example, the ﬁrst
Date
Hop Pages
03.11
04.25
05.04
First Hop Pages:
1.http://hm*.xorg.pl/c.js?google ad=... → 2
Following Hop Pages:
2.http://afb.bij.pl/44/953sd.htm → 3,4
3.http://afb.bij.pl/44/ﬂa.htm → 8
Dispatching Page:
4.http://afb.bij.pl/44/av.htm → 5,6,7
First Hop Pages:
1.http://hm*.xorg.pl/c.js?google ad=... → 2
Following Hop Pages:
2.http://aaw.8866.org/55/167ay.htm → 4
Dispatching Page:
4.http://aaw.8866.org/55/av.htm → 5,6,7
First Hop Pages:
1.http://hm*.xorg.pl/c.js?google ad=... → 2,3
Following Hop Pages:
2.http://abz.7766.org/11/184ay.htm → 4
3.http://hero2.8800.org:97/xo/dk.html → 8
Dispatching Page:
4.http://abz.7766.org/11/av.htm → 5,6,7
8.http://hero2.8800.org:97/xo/0.htm
Exploit Pages
5.http://afb.bij.pl/44/rising.htm → .
6.http://afb.bij.pl/44/nod.htm → .
7.http://afb.bij.pl/44/mp.htm → .
...
8.http://afb.bij.pl/44/ie.html → 9
9.http://afb.bij.pl/44/if.swf
5.http://aaw.8866.org/55/rising.htm → .
6.http://aaw.8866.org/55/nod.htm → .
7.http://aaw.8866.org/55/6.htm → .
...
Evolution
* stands for any single letter.
The landing page is injected by
many SCRIPT tags whose src
value’s domain name are like
hmd.xorg.pl, hmg.xorg.pl, and so
on. Some of them contains ma-
licious hops while some of them
are temporarily invalid .
First Hop Pages
remain un-
changed, but the Dispatching
Page and Exploit Pages are
moved from a .pl domaina to
a dynamic domain registered
at 8866.org ,
and some of
the Hop/Exploit Pages are gone
while some new adds in.
5.http://abz.7766.org/11/rising.htm → .
6.http://abz.7766.org/11/nod.htm → .
7.http://aaw.8866.org/55/6.htm → .
9.http://hero2.8800.org:97/0.htm
...
First Hop Pages still remain un-
changed, but a series of new
Hop/Exploit pages (dk.html and
0.htm) add in. They are also
widely found in other scenarios.
Table 5: Scenario Evolution on http://cc.njarti.edu.cn/
version of the exploit codes was found on March 11, 2010. It
was very naive and straight with no obfuscation at all. How-
ever, after several days, various obfuscation techniques were
introduced in diﬀerent scenarios, and the statements in the
exploit page and hop pages were diverse, too. For example,
on March 22 we found its ﬁrst variant. This variant only
used obfuscation on the setup of the heapspray sledge, and
hided its shellcode into another ﬁle through the SCRIPT
tag(Figure 8). After that, we found ﬁve more variants ex-
ploiting this vulnerability. The codes were improved from
the following two aspects:
• Heavier Obfuscation: Exploit codes were introducing
more and more obfuscation techniques to avoid the
detection and analysis. The obfuscation techniques
range from simple escape using string.fromCharCode
and unescape, to sophisticated encryption using au-
tomatic encrypting tools. For example, we found a
comment of “Encrypt By Dadong’s JSXX 0.31 VIP”
in the latest variant of the exploit codes.
• Optimization: The optimization for exploit codes are
mainly for better successful rate. Some variants we
collection tried to exploit the vulnerability multiple
times or ran diﬀerent code according to the version
of the client.
6.5 Case Study on Scenario Evolution Analy-
sis
As the investigation on vulnerability evolution can help to
identify the variants of a vulnerability exploit and diﬀerent
exploit kit writers, the investigation on the scenario with
the same URL but diﬀerent timestamps can reveal many
interesting information about the malware deployer.
We chose a landing site and made a snapshot of the sce-
nario starting from the landing URL every few days. After
a monitoring period, we were able to discover the evolution
of the web-based malware injected to this site, as shown in
Table 5. From this table we can see: The ﬁrst hop page
directly linked out by the landing site did not change dur-
ing this period, while there is a signiﬁcant evolution of the
following pages. First, the domain names of the following
hop pages and exploit pages change frequently throughout
the whole month, probably to evade blacklist-based URL ﬁl-
tering or to avoid the disable of their DNS resolution. Also
we can see that some new exploits are added to the exploit
kit and some are gone. This is related to the discovery of
new vulnerabilities and the abandonment of the out-of-date
vulnerabilities.
7. DISCUSSION AND FUTURE WORK
In this section we discuss some limitations of our current
implementation, including some possible attacks against Web-
Patrol. Then we discuss our future work.
The current implementation of WebPatrol pays no special
attention to hide itself. Thus it could be detected by a mal-
ware in a few ways. For example, there are plugins that can
not be installed within the same browser in reality. This may
because one plugin is only available on Windows and another
on Linux, this is also because some plugins are not compat-
ible with other plugins, or it is not possible for a browser
having two versions of a plugin at the same time. Currently,
all these situations could happen in WebPatrol due to its
intent to achieve better coverage of diﬀerent run-time envi-
ronments. Also, as the speciﬁcations of diﬀerent browsers
have too many diﬀerences and details to be fully emulated.
There are always some implementation details that WebPa-
trol have not considered (e.g. the creation and manipulation
of customized DOM Event objects). Thus, intended mali-
cious codes could detect the existence of WebPatrol. We are
in the process of investigating this problem and we believe
some of the evasions could be carefully avoided. We note
that these evasion attacks are not unique to WebPatrol but
to any browser emulator. With the simplicity and ﬂexibility
design of WebPatrol design, implementing new browser fea-
tures is fast and easy (adding some Python module). Thus
we can always learn from failed analysis cases and implement
the missing functionality quickly.
In addition to evasion, other attacks against WebPatrol
could be divided into two categories: DoS attacks and vul-
nerability attacks. DoS attackers may consume all the re-
sources in the analysis environment by allocating large amounts
of memories and do CPU-consuming operations continu-
ously. Currently WebPatrol can prevent such attacks by
kill the processes that takes too much resources (with the
tradeoﬀ that this would aﬀect the analysis of the scenarios).
As for the vulnerability attack, all the malicious codes are
executed in the Spidermonkey JS engine and the Python
SGML parser. Thus, if there is any critical vulnerability
within those components, our analysis system could also be
vulnerable. In the future, we may consider using multiple
diﬀerent JS engines and parsers.
Finally, we will further improve the collection complete-
ness of infection trails (as we are aware of the problems
discussed in 6.3). We will run the analyzer multiple times
with diﬀerent conﬁgurations, to emulate diﬀerent browsers
and improve the coverage. We plan to add more system
API support to libemu to improve its emulation capability.
We also plan to improve the coverage by integrating some
static analysis techniques.
In the future, we will provide
much more and deeper analysis on a larger scale of collected
WMSs on the Internet.
8. CONCLUSION
In this paper we introduced the concept of a web-based
malware scenario and its importance for web-based malware
research. We designed and implemented a prototype sys-
tem for automated collection and live replay of web-based
malware scenarios. Our system can collect a relatively com-
plete set of web infection trails and take snapshots of the
scenario for future analysis. In addition, we provide the live
replay capability to enable an analyst to access the original
web-based malware at any time. We evaluated the system’s
eﬀectiveness and showed several case studies to demonstrate
the utilities of our system.
9. ACKNOWLEDGMENT
This work is partially supported by the Research Fund for
the Doctoral Program of Higher Education of China under
Grant No.200800011019, the project 61003127 supported by
NSFC, and the project “A monitoring platform for web safe
browsing”(2009-1717) supported by the National Develop-
ment and Reform Commission.
We would like to thank all the anonymous reviewers for
their insightful comments and feedback. We would like to
thank Tao Wei, Xiaorui Gong, Chengyu Song, Huilin Zhang
and Ruifei Yu for their comments on our research.
10. REFERENCES
[1] Capture-HPC.
https://projects.honeynet.org/capture-hpc.
[2] libemu:x86 shellcode detection and emulation.
http://libemu.carnivore.it/.
[3] Malzilla: Malware hunting tool.
http://malzilla.sourceforge.net/.
http://www.pps.jussieu.fr/∼jch/software/polipo/.
[5] P. Baecher, M. Koetter, T. Holz, M. Dornseif, and
[4] Polipo:a caching web proxy.
F. Freiling. The nepenthes platform: An eﬃcient
approach to collect malware. Lecture Notes in
Computer Science, vol. 4219:165, 2006.
[6] M. Cova, C. Kruegel, and G. Vigna. Detection and
analysis of drive-by-download attacks and malicious
javascript code. In Proceedings of the 19th
International World Wide Web Conference, 2010.
[7] CVE-2007-4105. Baidu soba remote code execute
vulnerability. http://cve.mitre.org/cgi-
bin/cvename.cgi?name=2007-4105.
[8] B. Feinstein, D. Peck, and I. SecureWorks. Caﬀeine
monkey: Automated collection, detection and analysis
of malicious javascript. Black Hat USA, 2007.
[9] S. Ford, M. Cova, C. Kruegel, and G. Vigna.
Analyzing and detecting malicious ﬂash
advertisements. In 2009 Annual Computer Security
Applications Conference, pages 363–372, 2009.
[10] J. Mieres. Fragus. new botnet framework in-the-wild,
2009. http://evilﬁngers.blogspot.com/2009/08/fragus-
new-botnet-framework-in-wild.html.
[11] J. Nazario. PhoneyC: a virtual client honeypot. In
Proceedings of the 2nd USENIX Workshop on
Large-Scale Exploits and Emergent Threat, 2009.
[12] M. Polychronakis, P. Mavrommatis, and N. Provos.
Ghost turns zombie: exploring the life cycle of
web-based malware. In Proceedings of the 1st USENIX
Workshop on Large-scale Exploits and Emergent
Threats, 2008.
[13] N. Provos, P. Mavrommatis, M. A. Rajab, and
F. Monrose. All your iFRAMEs point to us. In
Proceedings of the 17th USENIX Security Symposium,
pages 1–15, 2008.
[14] N. Provos, D. McNamee, P. Mavrommatis, K. Wang,
and N. Modadugu. The Ghost In The Browser. In
First Workshop on Hot Topics in Understanding
Botnets, 2007.
[15] C. Seifert, V. Delwadia, P. Komisarczuk, D. Stirling,
and I. Welch. Measurement Study on Malicious Web
Servers in the. nz Domain. In Proceedings of the 14th
Australasian Conference on Information Security and
Privacy, page 25, 2009.
[16] C. Song, J. Zhuge, X. Han, and Z. Ye. Preventing
drive-by download via inter-module communication
monitoring. In Proceedings of the 5th ACM
Symposium on Information, Computer and
Communications Security, pages 124–134, 2010.
[17] W3C. XMLHttpRequest.
http://www.w3.org/TR/XMLHttpRequest/.
[18] Y. M. Wang. Strider HoneyMonkeys: active
Client-Side honeypots for ﬁnding web sites that exploit
browser vulnerabilities. In Part of Works in Progress
at the 14th USENIX Security Symposium, 2007.
[19] J. Zhuge, T. Holz, X. Han, C. Song, and W. Zou.
Collecting autonomous spreading malware using
high-interaction honeypots. Lecture Notes In
Computer Science, vol. 4861:438, 2007.
[20] J. Zhuge, T. Holz, C. Song, J. Guo, X. Han, and
W. Zou. Studying malicious websites and the
underground economy on the chinese web. In
Proceedings of the 7th Workshop on the Economics of
Information Security, 2007.