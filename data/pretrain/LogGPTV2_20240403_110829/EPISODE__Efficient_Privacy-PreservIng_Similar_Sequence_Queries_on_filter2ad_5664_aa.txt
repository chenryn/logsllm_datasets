title:EPISODE: Efficient Privacy-PreservIng Similar Sequence Queries on
Outsourced Genomic DatabasEs
author:Thomas Schneider and
Oleksandr Tkachenko
EPISODE: Efficient Privacy-PreservIng Similar Sequence
Queries on Outsourced Genomic DatabasEs∗
Thomas Schneider
TU Darmstadt
PI:EMAIL
Oleksandr Tkachenko
TU Darmstadt
PI:EMAIL
ABSTRACT
Nowadays, genomic sequencing has become much more affordable
for many people and, thus, many people own their genomic data in
a digital format. Having paid for genomic sequencing, they want to
make use of their data for different tasks that are possible only using
genomics, and they share their data with third parties to achieve
these tasks, e.g., to find their relatives in a genomic database. As
a consequence, more genomic data get collected worldwide. The
upside of the data collection is that unique analyses on these data
become possible. However, this raises privacy concerns because the
genomic data uniquely identify their owner, contain sensitive data
about his/her risk for getting particular diseases, and even sensitive
information about his/her family members.
In this paper, we introduce EPISODE — a highly efficient privacy-
preserving protocol for Similar Sequence Queries (SSQs), which can
be used for finding genetically similar individuals in an outsourced
genomic database, i.e., securely aggregated from data of multiple
institutions. Our SSQ protocol is based on the edit distance approx-
imation by Asharov et al. (PETS’18), which we further optimize
and extend to the outsourcing scenario. We improve their protocol
by using more efficient building blocks and achieve a 5–6× run-
time improvement compared to their work in the same two-party
scenario.
Recently, Cheng et al. (ASIACCS’18) introduced protocols for
outsourced SSQs that rely on homomorphic encryption. Our new
protocol outperforms theirs by more than factor 24 000× in terms
of run-time in the same setting and guarantees the same level
of security. In addition, we show that our algorithm scales for
practical database sizes by querying a database that contains up
to a million short sequences within a few minutes, and a database
with hundreds of whole-genome sequences containing 75 million
alleles each within a few hours.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols; Man-
agement and querying of encrypted data; Privacy protections;
∗A summary of preliminary results of this paper has been published as short paper
at WPES’18 [38]. This is the full version.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329800
KEYWORDS
medical privacy, privacy-enhancing technologies, genomic research,
edit distance, secure computation, outsourcing
ACM Reference Format:
Thomas Schneider and Oleksandr Tkachenko. 2019. EPISODE: Efficient
Privacy-PreservIng Similar Sequence Queries on Outsourced Genomic
DatabasEs. In ACM Asia Conference on Computer and Communications Se-
curity (AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand. ACM, New
York, NY, USA, 13 pages. https://doi.org/10.1145/3321705.3329800
1 INTRODUCTION
Numerous efforts by the research community, industries, and gov-
ernments of different countries substantially reduced the costs of
genome sequencing: the costs for sequencing a whole genome have
fallen from 10 million USD to less than 1 000 USD in the last ten
years [45]. This leads to more genome data being collected, and
services that use genome data are becoming increasingly popular,
e.g., 23andMe1, MyHeritage2, and ancestry3. Common use cases for
genome data are: (i) Similar Sequence Queries (SSQs) for finding
genome sequences that are similar to the sequence of the analyzed
person, (ii) Genome-Wide Association Studies (GWAS) for finding
associations between diseases and genetic variants, and (iii) ge-
nealogical tests for determining ancestral ethnicity of the person.
In this work, we focus on SSQs. They can be used for finding (up
to that time unknown) relatives, and for making better diagnoses
and prescribing the most promising treatments using the medical
history of people that are genetically similar to the patient [21].
However, a data provider (e.g., a medical institution) commonly
has a limited number of collected genome sequences which pre-
vents a high-quality similar patient analysis, since the diversity and
completeness of the database is crucial in genome analyses [37].
A further use case for SSQs is crime solving where only the
DNA of the suspect is known. It has been shown in the past that
some very complex criminal investigations can be solved using
solely the DNA information [27], also even if only the suspect’s
second-degree relatives are contained in the database, e.g., by recon-
structing the family tree [16]. However, no global DNA databases
exist at the moment that would facilitate such investigations, since
this would raise concerns about the privacy of the DNA donors. As
a solution, we consider privacy-preserving aggregation of the DNA
databases of multiple parties and privacy-preserving queries on the
aggregated database for ensuring privacy of the DNA donors.
1https://www.23andme.com
2https://myheritage.com
3https://www.ancestry.com
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand315Despite the good uses of genomic data, their leakage causes se-
vere privacy violations for the genomic data donors. This is due to
the fact that genome data are unique for each individual and contain
sensitive information about him/her and his/her relatives [7, 23],
e.g., ethnicity information and predispositions to particular diseases.
The possession of this information by third parties can give rise to
genetic discrimination, e.g., if a health insurance company would
increase the client’s fee based on his/her predispositions to diseases,
or if an employer would reject the candidate’s application based
on the aforementioned reasons. To address this, we employ Se-
cure Multi-Party Computation (SMPC) techniques for constructing
highly efficient privacy-preserving protocols for distributed SSQs.
Although there already exist solutions for privacy-preserving SSQs,
the solutions are either inefficient or custom-tailored, i.e., it is far
from trivial to extend these protocols to privacy-preserving aggre-
gation of databases or thresholding distances to similar sequences.
1.1 Our Contributions
We design EPISODE, an efficient SSQ protocol that is by orders of
magnitude more efficient than previous related works. EPISODE
is designed for outsourcing but can be used for the two-party
client/server model as well, e.g., for the same setting as in [3]
where one party has a database and the other party has a query, or
when each party possesses one or more databases (e.g., for crowd-
sourced SSQs). We also show how multiple databases can be ag-
gregated in the outsourcing scenario and describe related costs for
each scenario. In addition, we describe a thresholding protocol for
finding relatives using EPISODE.
Large-Scale Experiments. We conduct large-scale experiments on
an outsourced database with up to one million genome sequences
of small and medium lengths, and we show that our implementa-
tion has practical run-times on commodity hardware, e.g., secure
evaluation of an SSQ protocol on one million sequences of length
one thousand took only 8.3 minutes.
Whole-Genome Experiments. To the best of our knowledge, we
are the first to conduct experiments on whole-genome sequences
(sequence length n=75 million alleles) using the Edit Distance (ED)
approximation of [3] that, unlike [44], can handle high-divergence
data and show practical run-times of just a few hours.
1.2 Outline
Section 2 describes related work in the field of privacy-preserving
SSQs. In Section 3, we explain the necessary basics of genetics,
SMPC, and the SMPC framework used in this work. Afterwards,
Section 4 gives the system model and details the designed algo-
rithms. Finally, we show the benchmarking results of our algorithms
in different scenarios in Section 5 and conclude in Section 6.
2 RELATED WORK
In this section, we compare our Edit Distance (ED) and Similar
Sequence Query (SSQ) algorithm with that in previous related work.
Our SSQ protocol is benchmarked in the same system model of the
papers we compare to unless stated otherwise.
Asharov et al. [3] introduced an approximation technique for ED
that can handle high divergence data. Their contribution is twofold:
(i) they construct an efficient and precise approximation for ED, and
(ii) they use Look-Up Tables (LUTs) instead of direct computation
of the ED, thus precomputing the most expensive parts of the
computation in the clear.
The first contribution works as follows: the genome sequences in
the database and query are split into blocks of small size (e.g., b=5)
and padded to a somewhat greater size (e.g., b′=16). Because of
the much smaller size of the blocks compared to a full sequence,
the overhead for computing ED is also much smaller (ED requires
O(cid:0)n2(cid:1) computation in the sequence length n).
For their second contribution, they utilize the fact that genes
in the blocks are naturally distributed highly non-uniformly. For
all sequences available in the clear, this allows to compute cross-
sequence LUTs block-wise for all observed block values. Using this
approach, the value of the block is compared with each element
of the corresponding LUT instead of computing the ED directly. If
the value is equal to one of the values in the LUT, the correspond-
ing distance is selected. Asharov et al. empirically show that the
probability of an element not being in the LUT is small, and the
absence of a single element influences the overall distance only
slightly. Moreover, the authors design a custom protocol for com-
puting the k nearest edit distances between a client’s query and a
server’s database containing parts of genome sequences. However,
their protocol has the drawback that it is custom which makes it
non-trivial to extend to other functionalities such as aggregation of
databases. Their protocol works in a setting with two semi-honest
parties, where the client inputs the query and the server inputs a
database into a Secure Two-Party Computation (STPC) protocol.
EPISODE runs by factor 5–6× faster than their protocol in the same
two-party setting (see Section 5.2 for details).
Atallah et al. [5] developed protocols for secure sequence com-
parison, and Atallah and Li [6] moved these protocols to the out-
sourcing scenario. In both works, the authors compute the ED,
i.e., the number of additions, deletions, and substitutions needed
to transform one string into another, with quadratic computation
and communication overhead in the sequence length n, i.e., O(cid:0)n2(cid:1),
which is a much larger overhead than ours of O(cid:0)nω(cid:1), where ω is
the LUT width, usually 20 or 30.
Jha et al. [26] designed algorithms for privacy-preserving ED
using Garbled Circuits (GCs). Their construction scales much worse
than the recent solutions including ours, e.g., their algorithm runs
in 658 s and requires 364 MB communication, whereas ours requires
only 5.7 ms run-time (more than 100 000× faster) and 397 kB com-
munication (more than 900× less) for the same sequence length
n=200, and we set the width of the Look-Up Table (LUT) to ω=20.
Wang et al. [44] propose an extremely efficient approach for
approximating the ED using a set size difference metric. Their ap-
proach can process a genome-wide query over one million patients
in about 3 hours, but, unfortunately, it works only for data with very
small divergence (less than 0.5 % variability between individuals),
which is not always true for genome data.
The authors of [1] designed two approximations for ED: a set
intersection method based on [36] and a banded alignment-based
algorithm that relies on GCs. The drawbacks of these methods are:
(i) neither algorithm achieves good accuracy on long genome se-
quences, and (ii) the authors do not show which security parameters
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand316are used and do not detail communication requirements of their
algorithms.
Zhu and Huang [48] design efficient algorithms for ED, which
are, however, much slower than the approximations of ED. Their
benchmarks of ED on two sequences of 4 000 nucleotides with a
security parameter of 127 bits took 7.08 s run-time and 2.04 GB
communication. In contrast, our algorithm requires only 65 ms run-
time (108× faster) and 8 MB communication (261× less) for the same
setting and the width of the LUT ω=20.
Mahdi et al. [31] securely computed the Hamming distance for
SSQ, which is an error-prone metric for measuring the distance
between genome sequences, because the sequences are compared
bit-wise and, thus, any deletions and additions, which cause shifts
in the genome sequence, result in severe errors.
The authors of [13] design a protocol for privacy-preserving
SSQs based on [3] using homomorphic encryption in an outsourc-
ing scenario with two non-colluding, semi-honest parties, which
provides the same security guarantees as our model. As we show
in Section 5.1, our protocol outperforms theirs by more than factor
24 000× in terms of run-time and by at least factor 16× in terms of
communication in the same setting.
The privacy of other applications of genomics were also ad-
dressed in the literature, e.g., outsourcing of genome data stor-
ing [41], pattern matching [43], genome sequence queries [17], and
Genome-Wide Association Studies (GWAS) [10, 11, 15, 42], see [33]
for a good survey on genomic privacy.
Table 1: Notation used in our paper.
Parameters
ω Look-up table width
N Number of sequences
Sequence length
n
Block size
b
b′
Padded block size
t Number of blocks
Block bit-length
ℓ
ψ Number of data providers
β
Bit-length for the distance values s.t. no overflow occurs
A, C, G, T Nucleotides: Adenine, Cytosine, Guanine, Thymine
K, M, G, T Powers of 10: kilo (103), mega (106), giga (109), tera (1012)
Notation from [18]
l[i] Operator for referencing element #i in list l
l .e Operator for accessing element e in list l
x ∧ y and x ⊕ y
Bit-wise AND and XOR operation
Sharing types: Arithmetic, Boolean, Yao
A, B, Y
⟨x⟩t
Share of value x in sharing type t held by party i
i
i(x)
Sharing function for value x by party i in sharing type t
Shrt
0, ⟨x⟩t
1) Reconstruction function for value x from both shares
Rec(⟨x⟩t
⟨z⟩t = ⟨x⟩t ⊙ ⟨y⟩t Operations on shares, ⊙ : ⟨x⟩t × ⟨y⟩t (cid:55)→ ⟨z⟩t
⟨x⟩t = s2t(⟨x⟩s) Conversion from sharing type s to sharing type t
⟨0⟩t , ⟨1⟩t , ⟨n⟩t
Secret-shared constant 0, 1, and n, respectively
⟨F(·)⟩t
Secret-shared constant of locally computed function F
System Model
T0,T1
Semi-trusted third parties that perform SMPC
P1, . . . , Pψ Data providers that contribute genomic data
C Client
3 PRELIMINARIES
In this section, we explain the basics underlying our constructions.
Our notation is summarized in Table 1.
3.1 Genomic Primer