# terraform
---
**Error: Error acquiring the state lock**
```
terraform force-unlock -force xxxxx-xxxx-xxx-xxxxx
```
```
ps aux | grep terraform
sudo kill -9 
```
---
## vultr providers
### vps
- https://registry.terraform.io/providers/vultr/vultr/latest/docs/resources/instance
**main.tf**
```conf
resource "vultr_instance" "f0x" {
    plan = "vc2-2c-4gb"
    region = "sgp"
    os_id = 477
    label = "f0x"
    tags = ["f0x"]
    hostname = "f0x"
    enable_ipv6 = false
    backups = "disabled"
    ddos_protection = false
    activation_email = false
}
```
**outputs.tf**
```conf
output "vps_ip" {
  value       = "${vultr_instance.f0x.main_ip}"
  description = "vps ip."
}
output "vps_os" {
  value       = "${vultr_instance.f0x.os}"
  description = "vps os."
}
output "vps_ram" {
  value       = "${vultr_instance.f0x.ram}"
  description = "vps ram."
}
output "vps_disk" {
  value       = "${vultr_instance.f0x.disk}"
  description = "vps disk."
}
output "vps_allowed_bandwidth" {
  value       = "${vultr_instance.f0x.allowed_bandwidth}"
  description = "vps allowed_bandwidth."
}
output "vps_hostname" {
  value       = "${vultr_instance.f0x.hostname}"
  description = "vps hostname."
}
output "vps_password" {
  value       = nonsensitive(vultr_instance.f0x.default_password)
  description = "vps password."
}
```
**version.tf**
```conf
terraform {
  required_providers {
    vultr = {
      source = "vultr/vultr"
      version = "2.11.3"
    }
  }
}
provider "vultr" {
  # Configuration options
}
```
创建
```
terraform init
terraform apply
```
销毁
```
terraform destroy
```
---
## aliyun providers
### ecs
- https://registry.terraform.io/providers/aliyun/alicloud/latest/docs/resources/instance
**main.tf**
```conf
resource "alicloud_instance" "instance" {
  security_groups            = alicloud_security_group.group.*.id
  instance_type              = data.alicloud_instance_types.types_ds.instance_types.0.id
  image_id                   = "ubuntu_18_04_64_20G_alibase_20190624.vhd"
  instance_name              = "test_instance"
  vswitch_id                 = alicloud_vswitch.vswitch.id
  system_disk_size           = 20
  internet_max_bandwidth_out = 100
  depends_on = [
    alicloud_security_group.group,
    alicloud_vswitch.vswitch,
  ]
}
resource "alicloud_security_group" "group" {
  name   = "test_security_group"
  vpc_id = alicloud_vpc.vpc.id
  depends_on = [
    alicloud_vpc.vpc
  ]
}
resource "alicloud_security_group_rule" "allow_all_tcp" {
  type              = "ingress"
  ip_protocol       = "tcp"
  nic_type          = "intranet"
  policy            = "accept"
  port_range        = "8080/8080"
  priority          = 1
  security_group_id = alicloud_security_group.group.id
  cidr_ip           = "0.0.0.0/0"
  depends_on = [
    alicloud_security_group.group
  ]
}
resource "alicloud_vpc" "vpc" {
  vpc_name   = "test_vpc"
  cidr_block = "172.16.0.0/16"
}
resource "alicloud_vswitch" "vswitch" {
  vpc_id       = alicloud_vpc.vpc.id
  cidr_block   = "172.16.0.0/24"
  zone_id      = "cn-beijing-h"
  vswitch_name = "test_vswitch"
  depends_on = [
    alicloud_vpc.vpc
  ]
}
resource "alicloud_ram_role" "role" {
  name     = "test-role"
  force    = true
  document =  /tmp/ip.txt
....
EOF
  .....
}
```
```bash
terraform apply -var="test_ip=1.14.5.14"
```
## 插件缓存
- linux
  ```
  echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > $HOME/.terraformrc
  ```
- windows
  %APPDATA% 目录下 `terraform.rc` 文件
  ```
  plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"
  ```
## providers 镜像
- https://juejin.cn/post/7103449491524550664
terraform v0.13 或者更高的版本中提供了一个 providers mirror 命令，可以下载当前配置的 provider 到本地的目录中。然后可以通过下载的目录配置 network mirror 等。
在命令行配置文件可以定义 provider_installation 块配置来修改 terraform 默认的插件安装行为。所以可以指定为从本地/network mirror 安装初始化 provider。
在模版的目录下执行下载命令
```
terraform.exe providers mirror "."
```
下载完成后会生成类似一个如下结构的目录，这个目录结构可以直接当作本地filesystem mirror使用。如果要配置network mirror,使用此目录结构为站点目录。
```
└─registry.terraform.io
    ├─hashicorp
    │  └─local
    └─tencentcloudstack
        └─tencentcloud
```
将下载的目录移动到 /tmp
编辑 ~/.terraformrc
```
provider_installation {
    filesystem_mirror {
        path = "/tmp/terraform/mirror"
    }
}
```
此时再次 init,就会从 /tmp 去加载 providers
对于不同的 providers ,需要手动去一个个下载,然后移动到指定目录下,虽然麻烦,但是可以有效提高init的速度.