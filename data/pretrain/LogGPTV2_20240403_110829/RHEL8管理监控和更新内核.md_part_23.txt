:::
要查看 `execsnoop`{.literal} 的详情、示例和选项，请参阅
`/usr/share/bcc/tools/doc/execsnoop_example.txt`{.literal} 文件。
有关 `exec()`{.literal} 的详情，请查看 `exec(3)`{.literal} 手册页。
### []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#_using_opensnoop_to_track_what_files_a_command_opens}使用 opensnoop 跟踪命令打开的文件
::: orderedlist
1.  在一个终端中执行 `opensnoop`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/opensnoop -n uname
    ```
    以上列出了文件的输出，这些文件仅由 `uname`{.literal}
    命令的进程打开。
2.  在另一个终端中执行：
    ``` screen
    $ uname
    ```
    以上命令会打开某些在下一步中捕获的文件。
3.  运行 `opensnoop`{.literal} 的终端显示类似如下的输出：
    ``` screen
    PID    COMM 	FD ERR PATH
    8596   uname 	3  0   /etc/ld.so.cache
    8596   uname 	3  0   /lib64/libc.so.6
    8596   uname 	3  0   /usr/lib/locale/locale-archive
    ...
    ```
    `opensnoop`{.literal} 程序在整个系统中监视 `open()`{.literal}
    系统调用，并为 `uname`{.literal} 尝试打开的每个文件打印一行输出。
    `opensnoop`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**PID**]{.strong} - 进程 ID。(`8596`{.literal})
    -   [**COMM**]{.strong} - 进程名称。(`uname`{.literal})
    -   [**FD**]{.strong} - 文件描述符 - `open()`{.literal}
        返回的值以引用打开的文件。(`3`{.literal})
    -   [**ERR**]{.strong} - 任何错误。
    -   [**PATH**]{.strong} - `open()`{.literal} 试图打开的文件位置。
        如果命令尝试读取不存在的文件，则 `FD`{.literal} 列返回
        `-1`{.literal}，`ERR`{.literal}
        列将打印与相关错误对应的值。因此，`Opennoop`{.literal}
        可以帮助您识别行为不正确的应用程序。
    :::
:::
要查看 `opensnoop`{.literal} 的更多详细信息、示例和选项，请参阅
`/usr/share/bcc/tools/doc/opensnoop_example.txt`{.literal} 文件。
有关 `open()`{.literal} 的更多信息，请参阅 `open(2)`{.literal} 手册页。
### []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#_using_biotop_to_examine_the_io_operations_on_the_disk}使用技术检查磁盘上的 I/O 操作
::: orderedlist
1.  在一个终端中执行 `biotop`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/biotop 30
    ```
    该命令可让您监控在磁盘中执行 I/O 操作的主要进程。参数确保命令生成 30
    秒概述。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果未提供任何参数，则默认情况下输出屏幕会每 1 秒刷新一次。
    :::
2.  在另一个终端中执行，例如：
    ``` screen
    # dd if=/dev/vda of=/dev/zero
    ```
    以上命令从本地硬盘设备读取内容，并将输出写入 `/dev/zero`{.literal}
    文件。此步骤会生成特定的 I/O 流量来演示 `biotop`{.literal}。
3.  运行 `biotop`{.literal} 的终端显示类似如下的输出：
    ``` screen
    PID    COMM             D MAJ MIN DISK       I/O  Kbytes     AVGms
    9568   dd               R 252 0   vda      16294 14440636.0  3.69
    48     kswapd0          W 252 0   vda       1763 120696.0    1.65
    7571   gnome-shell      R 252 0   vda        834 83612.0     0.33
    1891   gnome-shell      R 252 0   vda       1379 19792.0     0.15
    7515   Xorg             R 252 0   vda        280  9940.0     0.28
    7579   llvmpipe-1       R 252 0   vda        228  6928.0     0.19
    9515   gnome-control-c  R 252 0   vda         62  6444.0     0.43
    8112   gnome-terminal-  R 252 0   vda         67  2572.0     1.54
    7807   gnome-software   R 252 0   vda         31  2336.0     0.73
    9578   awk              R 252 0   vda         17  2228.0     0.66
    7578   llvmpipe-0       R 252 0   vda        156  2204.0     0.07
    9581   pgrep            R 252 0   vda         58  1748.0     0.42
    7531   InputThread      R 252 0   vda         30  1200.0     0.48
    7504   gdbus            R 252 0   vda          3  1164.0     0.30
    1983   llvmpipe-1       R 252 0   vda         39   724.0     0.08
    1982   llvmpipe-0       R 252 0   vda         36   652.0     0.06
    ...
    ```
    `biotop`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**PID**]{.strong} - 进程 ID。(`9568`{.literal})
    -   [**COMM**]{.strong} - 进程名称。(`dd`{.literal})
    -   [**DISK**]{.strong} - 执行读取操作的磁盘。(`vda`{.literal})
    -   [**I/O**]{.strong} - 执行读取操作的数量。(16294)
    -   [**Kbytes**]{.strong} - 读操作达到的 K 字节。(14,440,636)
    -   [**AVGms**]{.strong} - 读操作的平均 I/O 时间。(3.69)
    :::
:::
要查看 `biotop`{.literal} 的详情、示例和选项，请参阅
`/usr/share/bcc/tools/doc/biotop_example.txt`{.literal} 文件。
有关 `dd`{.literal} 的更多信息，请参阅 `dd(1)`{.literal} 手册页。
### []{#analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel.html#_using_xfsslower_to_expose_unexpectedly_slow_file_system_operations}使用 xfsslower 来公开意料外的慢文件系统操作
::: orderedlist
1.  在一个终端中执行 `xfsslower`{.literal} 程序：
    ``` screen
    # /usr/share/bcc/tools/xfsslower 1
    ```
    以上命令测量 XFS 文件系统执行读取、写入、打开或同步
    (`fsync`{.literal}) 操作的时间。`1`{.literal} 参数可确保程序仅显示比
    1 ms 较慢的操作。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果未提供任何参数，`xfsslower`{.literal} 默认会显示比 10 ms
    慢的操作。
    :::
2.  在另一个终端中执行，例如：
    ``` screen
    $ vim text
    ```
    以上命令在 `vim`{.literal} 编辑器中创建了一个文本文件，用于启动与
    XFS 文件系统的某些互动。
3.  运行 `xfsslower`{.literal} 的终端显示在保存上一步中的文件时：
    ``` screen
    TIME     COMM           PID    T BYTES   OFF_KB   LAT(ms) FILENAME
    13:07:14 b'bash'        4754   R 256     0           7.11 b'vim'
    13:07:14 b'vim'         4754   R 832     0           4.03 b'libgpm.so.2.1.0'
    13:07:14 b'vim'         4754   R 32      20          1.04 b'libgpm.so.2.1.0'
    13:07:14 b'vim'         4754   R 1982    0           2.30 b'vimrc'
    13:07:14 b'vim'         4754   R 1393    0           2.52 b'getscriptPlugin.vim'
    13:07:45 b'vim'         4754   S 0       0           6.71 b'text'
    13:07:45 b'pool'        2588   R 16      0           5.58 b'text'
    ...
    ```
    上面的每一行代表文件系统中的一个操作，其用时超过特定阈值。`xfsslower`{.literal}
    非常适合公开可能的文件系统问题，这可能会导致意外的慢速操作。
    `xfsslower`{.literal} 输出显示以下字段：
    ::: itemizedlist
    -   [**COMM**]{.strong} - 进程名称。(`b'bash'`{.literal})
    -   [**t**]{.strong} - 操作类型。(`R`{.literal})
        ::: itemizedlist
        -   [**R**]{.strong}ead
        -   [**W**]{.strong}rite
        -   [**S**]{.strong}ync
        :::
    -   [**OFF_KB - KB**]{.strong} 中的文件偏移。(0)
    -   [**FILENAME**]{.strong} - 被读取、写入或者同步的文件。
    :::
:::
要查看 `xfsslower`{.literal} 的详情、示例和选项，请参阅
`/usr/share/bcc/tools/doc/xfsslower_example.txt`{.literal} 文件。
有关 `fsync`{.literal} 的详情请参考 `fsync(2)`{.literal} 手册页。
:::
:::
[]{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel}第 23 章 使用内核完整性子系统提高安全性 {.title}
:::
您可以使用内核完整性（kernel
integrity）子系统组件来提高系统保护。以下小节介绍了相关组件，并提供了有关其配置的指导。
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#the-kernel-integrity-subsystem_enhancing-security-with-the-kernel-integrity-subsystem}内核完整性子系统 {.title}
:::
完整性子系统是内核的一部分，负责维护整个系统的数据完整性。此子系统有助于使特定系统的状态与构建时相同，从而防止用户对特定系统文件进行不必要的修改。
内核完整性子系统由两个主要组件组成：
::: variablelist
[完整性测量架构 (IMA)]{.term}
:   ::: itemizedlist
    -   在文件被执行或打开时，会测量文件的内容。用户可以通过应用自定义策略来更改此行为。
    -   将测量的值放置在内核的内存空间内，从而防止系统用户进行任何修改。
    -   允许本地和远程用户验证测量值。
    :::
[扩展验证模块 (EVM)]{.term}
:   ::: itemizedlist
    -   通过加密其对应的值，保护与系统安全性（如 IMA 测量和 SELinux
        属性）相关的文件的扩展属性（也称为 [*xattr*]{.emphasis}）。
    :::
:::
IMA 和 EVM 还包含大量额外功能扩展。例如：
::: variablelist
[IMA-Appraisal]{.term}
:   ::: itemizedlist
    -   根据以前存储在内核内存中的测量文件中的值提供当前文件内容的本地验证。此扩展禁止通过特定文件执行任何操作，以防当前和上一个测量结果不匹配。
    :::
[EVM 数字签名]{.term}
:   ::: itemizedlist
    -   允许通过存储在内核密钥环中的加密密钥使用数字签名。
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
功能扩展相互补充，但您可以独立配置和使用它们。
:::
内核完整性子系统可以利用受信任的平台模块 (TPM) 来更加强化系统安全性。TPM
是受信任的计算组 (TCG) 中有关重要加密功能的规范。TPMS
通常作为专用硬件构建，附加到平台的主板，并通过为硬件芯片受保护且受篡改区域提供加密功能来防止基于软件的攻击。其中一些
TPM 特性包括：
::: itemizedlist
-   随机数生成器
-   用于加密密钥的生成器和安全存储
-   哈希生成器
-   远程测试
:::
::: itemizedlist
**其它资源**
-   [*[[完整性测量架构
    (IMA)](https://sourceforge.net/p/linux-ima/wiki/Home/){.link}]{.citetitle}*]{.emphasis}
-   [*[[可信计算组资源](https://trustedcomputinggroup.org/resource/tpm-library-specification/){.link}]{.citetitle}*]{.emphasis}
:::
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#integrity-measurement-architecture_enhancing-security-with-the-kernel-integrity-subsystem}完整性测量架构 {.title}
:::
完整性测量架构 (IMA) 是内核完整性子系统的一个组件。IMA
旨在维护本地文件的内容。具体来说，IMA
在文件访问前测量、存储和应用文件哈希，这可以防止读取和执行不可靠的数据。因此，IMA
增强了系统的安全性。
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem}扩展的验证模块 {.title}
:::
扩展验证模块 (EVM) 是内核完整性子系统的一个组件，可监控文件的扩展属性
(xattr) 中的更改。许多面向安全的技术，包括完整性测量架构
(IMA)，将敏感文件信息（如内容散列）存储在扩展属性中。EVM
从这些扩展属性和特殊密钥创建另一个哈希值，该密钥在引导时加载。每次使用扩展属性时，生成的哈希都会被验证。例如，当
IMA 评估文件时。
RHEL 8 接受 `evm-key`{.literal}
密钥环下的特殊加密密钥。密钥由内核密钥环中拥有的 [*master
key*]{.emphasis} 创建。
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_managing-monitoring-and-updating-the-kernel.html#trusted-and-encrypted-keys_enhancing-security-with-the-kernel-integrity-subsystem}可信和加密的密钥 {.title}
:::
下面的部分介绍了可信和加密的密钥，作为增强系统安全性的重要部分。
[*可信的*]{.emphasis}和[*加密的*]{.emphasis}密钥是利用内核密钥环服务的内核生成的可变长度对称密钥。这种类型的密钥从未以未加密的形式显示在用户空间中，这意味着可以验证其完整性，这意味着扩展验证模块
(EVM)
可以使用它们来验证并确认运行中系统的完整性。用户级别程序只能访问加密的