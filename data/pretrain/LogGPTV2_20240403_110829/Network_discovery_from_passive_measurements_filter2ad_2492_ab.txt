less, this left us with over 22,000 unique IP addresses from
which we conducted our analysis. Details of the instances
of multiple occurrences of unique IP addresses are listed in
Table 2 (note that there were virtually no addresses were
seen in more than 10 monitors).
Our analysis assumes that the only data that will be used
to infer network structure is the source IP address (used only
to uniquely identify a host and as an active probe target)
and TTL extracted from the header of each packet. In the
case of the Orbis and Skitter data sets, we synthesize these
values. In the case of the honeynet data we use the clever
technique described in [18] to infer the number of hops be-
tween the honeypot monitor and the host. This inference
is made based on the fact that (i) there are only a few ini-
tial TTL values used in popular operating systems (e.g., 64
for most UNIX variants, 128 for most Microsoft variants
and 255 for several others), and (ii) typical hop counts for
end-to-end paths are far less than the diﬀerences between
the standard TTL values. Thus, hop count is inferred by
rounding the TTL up to the next highest initial TTL value
and then subtracting the initial TTL.
3.1 Passive Measurement Infrastructure
We assumed that the ground truth router-level topology
of the Internet will resemble the network in Figure 1-
(left) [4]. In this diagram, packets sent from sources Si will
depart from the edge of the network and eventually enter
the densely-connected core component through a border
router. The packets will traverse the core, exit through
another border router and eventually be intercepted by a
passive monitor Mj. This conﬁguration enables edge and
core mapping, and assumes monitors such as honeynets or
passive collection near e.g., busy web servers.
Table 1: Details of honeypot data sets used in our study. All data was collected over a one day period on
December 22, 2006.
Node Total Pkts. Uniq. IPs Mean Hops Hop Std. Dev.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
22,586,386
10,533,700
100,689
4,446
25,062
128,158
110,621
49,253
42,226
45,334
75,522
523,907
1,955,100
332,986
917,894
217,505
9,554
8,431
738
474
6,423
11,942
6,456
6,534
6,223
8,645
8,714
6,195
5,364
107,632
13.16
7.95
12.11
11.45
12.07
6.87
17.23
15.49
14.31
13.93
12.45
9.82
19.24
8.16
12.79
9.35
7.34
7.72
15.34
7.32
7.67
9.00
10.26
10.72
9.73
11.14
9.82
8.46
8.68
6.42
Assuming this structure of the network, one can partition
the total layer 3 hop count distance values into the distance
(or number of router hops) from the IP source Si to the
ﬁrst core border router b, and the distance from b to the
measurement node Mj. We deﬁne the variables {xi = the
number of layer 3 hops along the path from source Si and
the ﬁrst core border router b}, and {wi,j = the number of
layer 3 hops between the ﬁrst core border router b of source
Si and measurement node Mj}. This allows us to partition
the hop count distance values into the two separate paths,
hi,j = xi +wi,j = the number of layer 3 hops between source
Si and measurement node Mj.
Figure 1: (Left) Example Network Topology with
sources Si sending packets through a core com-
ponent to monitors Mj, (Right) Example network
where S1 and S2 share a border router.
Now consider the situation where two sources (Si, Sj) are
connected at the same border router (see Figure 1-(right)).
Given that these two IP sources will share a path through
the core to each measurement node, we can state:
Theorem 1. Given two sources (Si, Sj) sharing a common
core ingress border router, then hi,k − hj,k = C for all mea-
surement nodes Mk with paths through the core (for some
integer constant C).
Proof. Given hop count distance values hi,k = xi + wi,k
and hj,k = xj + wj,k. For any measurement node Mk,
with both Si and Sj having paths through the core to
the measurement node, there will be a common path for
both IP sources from the border router to the measure-
ment, such that wi,k = wj,k. Therefore, hi,k − hj,k =
xi − xj + (wi,k − wj,k) = xi − xj = C : ∀k.
3.2 Hop Count Distance Vectors and Network
Topology
In [8], it was shown that hop count distance vectors that
are similar/close in a Euclidean sense, do not necessarily
translate to IP sources that are close in the actual network
topology. Thus, the exclusive use of raw hop count distance
vectors for clustering could place IP sources that are actu-
ally far apart in the same group. One reasons for this is
that clustering the raw hop count distance data ignores the
network-centric knowledge embedded in the distance vec-
tors. To exploit the integer distance oﬀset property of the
clusters of IP sources that shared border routers, we perform
preprocessing on the hop count distance vectors such that
if hi and hj share a common border router, then after some
transformation, the two vectors are equivalent. The pre-
processing here takes the form of converting the hop count
distance vectors (hi = [hi,1, hi,2, ..., hi,M]) to hop count con-
trast vectors (h(cid:48)
i), where the mean value of each vector is
subtracted from each element of the hop count distance vec-
tor.
(cid:80)M
(cid:48)
h
i = hi − µi1
Where µi = 1
k=1 hi,k and 1 = [1, 1, ..., 1]. Using Theo-
rem 1, we can state with certainty that if hi,k−hj,k = C : ∀k,
M
then h(cid:48)
i,k = h(cid:48)
j,k : ∀k.
4. CLUSTERING IP SOURCES
The ﬁrst goal of our work is to develop a method for gen-
erating clusters of IP sources that are topologically close to
each other from a layer 3 hop count perspective. The obser-
vation that is key to our algorithms is that the location of a
given source Si is deﬁned by it’s relative distance to multiple
monitors Mj . . . Mk, and that sources with similar relative
distances will be topologically close to each other (assuming
S1S2S3M1M2M3M4S1S2S3M1M2M3M4that packets from the sources are observed in a suﬃcient
number of monitors). In this section we describe our clus-
tering methodologies and demonstrate their capability using
synthetically generated network maps.
4.1 Client Clustering
We can generate clusters of IP sources using unique hop
count contrast vectors and the simple K-Means algorithm.
Experiments with synthetic topologies showed that clusters
of various sizes could be generated (K-Means requires that
the number of clusters be speciﬁed a priori) with a clear
trade oﬀ between the number of clusters and the number of
sources included in each cluster. A larger number of small
clusters with minimal diﬀerences between contrast vectors
might be considered a “good” choice with this approach.
Unfortunately, these small clusters miss the case where
sources located in the same area (which we will refer to as a
“subnet” although this is not related to IP address structure)
of the network have diﬀering hop count contrast vectors.
This situation occurs when one or more monitor nodes are
located in the same subnet as the cluster, or when the sub-
net has multiple egress points. This sort of subnet topology
produces variability in the contrast vectors. This observa-
tion suggests that rather than clustering sources according
to unique contrast vectors, clusters that allow for a bit of
variation about a nominal value may better capture subnets
of sources.
nodes, and h2 is the j-length vector with the distances from
the border node to the last j measurement nodes.
(cid:163)
h =
h1 h2
We can state the hop count distance vector for each source
in the subnet as the addition of the intra-subnet paths x, y
and the nominal distance vector, where 1k is the k-length
all ones vector:
(cid:163)
(cid:164)
hi =
x · 1k
y · 1j
+
(cid:164)
(cid:163)
(cid:164)
(cid:163)
h1 h2
(cid:164) − µh
(cid:181)
(cid:164) −
k
M
We deﬁne the nominal contrast vector as:
(cid:48)
h
= h − µh =
h1 h2
(cid:163)
(cid:163)
Therefore, each IP source located in the subnet will have
contrast vector:
(cid:48)
(cid:48)
x +
y
1
h
i = h
+
(cid:48)
h
i = h
(cid:48)
+
x · 1k
y · 1j
M (x − y) 1k
j
Setting r = x − y, the diﬀerence between the IP source hop
contrast vector and the nominal contrast vector is:
k
M (y − x) 1j
(cid:164)
(cid:163) j·r
(cid:48)
h
i − h
(cid:48)
=
M 1k − k·r
M 1j
(cid:182)
j
M
(cid:164)
Therefore, all IP sources sharing the same egress routers will
have collinear contrast vectors.
From Theorem 2, we see that sources in subnets with mul-
tiple egress points may have slight variations in the hop
count vectors. The precise nature of these variations de-
pends on several uncertain factors, including the number of
egress points and the nature of the paths to the egress points.
Thus, we will account for this uncertainty with a probabilis-
tic model for the variability in hop count contrasts of sources
within a subnet.
4.2 Gaussians Mixture Model
for Subnet
Clusters
Figure 2: Example of a subnet having multiple
egress points.
Consider the subnet topology in Figure 2, where there are
two egress points to the set of measurement nodes for each
IP source located in the subnet. The ﬁrst egress router will
send paths from subnet sources to k measurement nodes M1
to Mk, and the second egress router will route paths from
subnet sources to j measurement nodes Mk+1 to MM (where
M = j + k). Every source will have a (potentially unique)
path of length x to the ﬁrst egress router, and (potentially
unique) path of length y to the second egress router. For the
paths from the egress router to the measurement nodes, the
paths will be common for all sources in the subnet. Using
this setup, we can state Theorem 2.
Theorem 2. Given a subnet with two egress points (as
in Figure 2), all sources contained in the subnet will have
collinear hop count contrast vectors.
Proof. We ﬁrst deﬁne the nominal distance vector (h)
as the distances from the egress routers to the measure-
ment nodes, where h1 is the k-length vector containing the
distances from the border node to the ﬁrst k measurement
While the exact nature of the distribution hop count con-
trast vectors for sources in a given subnet is unknown, a
multivariate Gaussian model is perhaps the simplest way
to capture the variability of the data. The covariance ma-
trix can account for structure in the distribution, such as
the collinearity discussed in Theorem 2, as well as other
correlations arising the idiosyncracies of routing internal to
the subnet. Since the hop count data includes sources from
many diﬀerent subnets, the overall distribution of hop count
contrast vectors can be modeled with a mixture of Gaussian
models, in which each Gaussian component represents the
distribution within one subnet. An example of these Gaus-
sian clusters can be seen in Figure 3, where a two dimen-
sional histogram of hop count contrast vectors are shown
with possible clusters shown by the drawn ellipses.