title:Locally Differentially Private Analysis of Graph Statistics
author:Jacob Imola and
Takao Murakami and
Kamalika Chaudhuri
Locally Differentially Private Analysis of 
Graph Statistics
Jacob Imola, UC San Diego; Takao Murakami, AIST; 
Kamalika Chaudhuri, UC San Diego
https://www.usenix.org/conference/usenixsecurity21/presentation/imola
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Locally Differentially Private Analysis of Graph Statistics
Jacob Imola∗
UC San Diego
Takao Murakami∗
AIST
Kamalika Chaudhuri
UC San Diego
Abstract
Differentially private analysis of graphs is widely used for
releasing statistics from sensitive graphs while still preserv-
ing user privacy. Most existing algorithms however are in a
centralized privacy model, where a trusted data curator holds
the entire graph. As this model raises a number of privacy and
security issues – such as, the trustworthiness of the curator
and the possibility of data breaches, it is desirable to consider
algorithms in a more decentralized local model where no
server holds the entire graph.
In this work, we consider a local model, and present al-
gorithms for counting subgraphs – a fundamental task for
analyzing the connection patterns in a graph – with LDP
(Local Differential Privacy). For triangle counts, we present
algorithms that use one and two rounds of interaction, and
show that an additional round can signiﬁcantly improve the
utility. For k-star counts, we present an algorithm that achieves
an order optimal estimation error in the non-interactive lo-
cal model. We provide new lower-bounds on the estimation
error for general graph statistics including triangle counts
and k-star counts. Finally, we perform extensive experiments
on two real datasets, and show that it is indeed possible to
accurately estimate subgraph counts in the local differential
privacy model.
1 Introduction
Analysis of network statistics is a useful tool for ﬁnding mean-
ingful patterns in graph data, such as social, e-mail, citation
and epidemiological networks. For example, the average de-
gree (i.e., number of edges connected to a node) in a social
graph can reveal the average connectivity. Subgraph counts
(e.g., the number of triangles, stars, or cliques) can be used
to measure centrality properties such as the clustering coef-
ﬁcient, which represents the probability that two friends of
an individual will also be friends of one another [41]. How-
ever, the vast majority of graph analytics is carried out on
∗The ﬁrst and second authors made equal contributions.
sensitive data, which could be leaked through the results of
graph analysis. Thus, there is a need to develop solutions that
can analyze these graph properties while still preserving the
privacy of individuals in the network.
The standard way to analyze graphs with privacy is through
differentially private graph analysis [22, 23, 49]. Differential
privacy provides individual privacy against adversaries with
arbitrary background knowledge, and has currently emerged
as the gold standard for private analytics. However, a vast
majority of differentially private graph analysis algorithms
are in the centralized (or global) model [13, 15, 16, 27, 34, 36,
42,48,49,52,58,59], where a single trusted data curator holds
the entire graph and releases sanitized versions of the statistics.
By assuming a trusted party that can access the entire graph, it
is possible to release accurate graph statistics (e.g., subgraph
counts [34, 36, 52], degree distribution [16, 27, 48], spectra
[59]) and synthetic graphs [15, 58].
In many applications however, a single trusted curator may
not be practicable due to security or logistical reasons. A
centralized data holder is amenable to security issues such
as data breaches and leaks – a growing threat in recent years
[39, 51]. Additionally, decentralized social networks [43, 50]
(e.g., Diaspora [5]) have no central server that contains an
entire social graph, and use instead many servers all over the
world, each containing the data of users who have chosen
to register there. Finally, a centralized solution is also not
applicable to fully decentralized applications, where the server
does not automatically hold information connecting users. An
example of this is a mobile application that asks each user how
many of her friends she has seen today, and sends noisy counts
to a central server. In this application, the server does not hold
any individual edge, but can still aggregate the responses to
determine the average mobility in an area.
The standard privacy solution that does not assume a trusted
third party is LDP (Local Differential Privacy) [20, 35]. This
is a special case of DP (Differential Privacy) in the local
model, where each user obfuscates her personal data by herself
and sends the obfuscated data to a (possibly malicious) data
collector. Since the data collector does not hold the original
USENIX Association
30th USENIX Security Symposium    983
Figure 1: Example of subgraph counts.
personal data, it does not suffer from data leakage issues.
Therefore, LDP has recently attracted attention from both
academia [8,10,11,24,32,33,40,45,57,62] as well as industry
[17, 55, 56]. However, the use of LDP has mostly been in the
context of tabular data where each row corresponds to an
individual, and little attention has been paid to LDP for more
complex data such as graphs (see Section 2 for details).
(in Figure 1, 3×5
20 = 0.75).
In this paper, we consider LDP for graph data, and pro-
vide algorithms and theoretical performance guarantees for
calculating graph statistics in this model. In particular, we
focus on counting triangles and k-stars – the most basic and
useful subgraphs. A triangle is a set of three nodes with three
edges (we exclude automorphisms; i.e., #closed triplets = 3×
#triangles). A k-star consists of a central node connected to
k other nodes. Figure 1 shows an example of triangles and
k-stars. Counting them is a fundamental task of analyzing
the connection patterns in a graph, as the clustering coefﬁ-
cient can be calculated from triangle and 2-star counts as:
3×#triangles
#2-stars
When we look to protect privacy of relationship informa-
tion modeled by edges in a graph, we need to pay attention to
the fact that some relationship information could be leaked
from subgraph counts. For example, suppose that user (node)
v2 in Figure 1 knows all edges connected to v2 and all edges
between v3, . . . ,v7 as background knowledge, and that v2
wants to know who are friends with v1. Then “#2-stars =
20” reveals the fact that v1 has three friends, and “#triangles
= 5” reveals the fact that the three friends of v1 are v3, v4, and
v6. Moreover, a central server that holds all friendship infor-
mation (i.e., all edges) may face data breaches, as explained
above. Therefore, a private algorithm for counting subgraphs
in the local model is highly beneﬁcial to individual privacy.
The main challenge in counting subgraphs in the local
model is that existing techniques and their analysis do not
directly apply. The existing work on LDP for tabular data as-
sumes that each person’s data is independently and identically
drawn from an underlying distribution. In graphs, this is no
longer the case; e.g., each triangle is not independent, because
multiple triangles can involve the same edge; each k-star
is not independent for the same reason. Moreover, complex
inter-dependencies involving multiple people are possible in
graphs. For example, each user cannot count triangles involv-
ing herself, because she cannot see edges between other users;
e.g., user v1 cannot see an edge between v3 and v4 in Figure 1.
We show that although these complex dependency among
users introduces challenges, it also presents opportunities.
Speciﬁcally, this kind of interdependency also implies that
extra interaction between users and a data collector may be
helpful depending on the prior responses. In this work, we
investigate this issue and provide algorithms for accurately
calculating subgraph counts under LDP.
Our contributions. In this paper, we provide algorithms and
corresponding performance guarantees for counting triangles
and k-stars in graphs under edge Local Differential Privacy.
Speciﬁcally, our contributions are as follows:
• For triangles, we present two algorithms. The ﬁrst is
based on Warner’s RR (Randomized Response) [60]
and empirical estimation [32, 40, 57]. We then present
a more sophisticated algorithm that uses an additional
round of interaction between users and data collector.
We provide upper-bounds on the estimation error for
each algorithm, and show that the latter can signiﬁcantly
reduce the estimation error.
• For k-stars, we present a simple algorithm using the
Laplacian mechanism. We analyze the upper-bound on
the estimation error for this algorithm, and show that it is
order optimal in terms of the number of users among all
LDP mechanisms that do not use additional interaction.
• We provide lower-bounds on the estimation error for gen-
eral graph functions including triangle counts and k-star
counts in the local model. These are stronger than known
upper bounds in the centralized model, and illustrate the
limitations of the local model over the central.
• Finally, we evaluate our algorithms on two real datasets,
and show that it is indeed possible to accurately estimate
subgraph counts in the local model. In particular, we
show that the interactive algorithm for triangle counts
and the Laplacian algorithm for the k-stars provide small
estimation errors when the number of users is large.
We implemented our algorithms with C/C++, and published
them as open-source software [1].
2 Related Work
Graph DP. DP on graphs has been widely studied, with most
prior work being in the centralized model [13, 15, 16, 27, 34,
36,42,48,49,52,58,59]. In this model, a number of algorithms
have been proposed for releasing subgraph counts [34,36,52],
degree distributions [16,27,48], eigenvalues and eigenvectors
[59], and synthetic graphs [15, 58].
There has also been a handful of work on graph algorithms
in the local DP model [46, 53, 63–65]. For example, Qin et
al. [46] propose an algorithm for generating synthetic graphs.
Zhang et al. [65] propose an algorithm for software usage
analysis under LDP, where a node represents a software com-
ponent (e.g., function in a code) and an edge represents a
984    30th USENIX Security Symposium
USENIX Association
ݒଵ7ULDQJOHVWDUVWDU6KDSH1DPH&RXQWݒଶݒଷݒସݒ଺ݒ଻ݒହ*UDSKܩൌሺܸ,ܧሻcontrol-ﬂow between components. Neither of these works
focus on subgraph counts.
Sun et al. [53] propose an algorithm for counting sub-
graphs in the local model under the assumption that each user
allows her friends to see all her connections. However, this
assumption does not hold in many practical scenarios; e.g.,
a Facebook user can change her setting so that friends can-
not see her connections. Therefore, we assume that each user
knows only her friends rather than all of her friends’ friends.
The algorithms in [53] cannot be applied to this setting.
Ye et al. [63] propose a one-round algorithm for estimating
graph metrics including the clustering coefﬁcient. Here they
apply Warner’s RR (Randomized Response) to an adjacency
matrix. However, it introduces a very large bias for triangle
counts. In [64], they propose a method for reducing the bias in
the estimate of triangle counts. However, the method in [64]
introduces some approximation, and it is unclear whether their
estimate is unbiased. In this paper, we propose a one-round
algorithm for triangles that uses empirical estimation as a
post-processing step, and prove that our estimate is unbiased.
We also show in Appendix A that our one-round algorithm
signiﬁcantly outperforms the one-round algorithm in [63].
Moreover, we show in Section 5 that our two-rounds algo-
rithm signiﬁcantly outperforms our one-round algorithm.
Our work also differs from [53, 63, 64] in that we provide
lower-bounds on the estimation error.
LDP. Apart from graphs, a number of works have looked
at analyzing statistics (e.g., discrete distribution estimation
[8,24,32,33,40,57,62], heavy hitters [10,11,45]) under LDP.
However, they use LDP in the context of tabular data, and
do not consider the kind of complex interdependency in graph
data (as described in Section 1). For example, the RR with
empirical estimation is optimal in the low privacy regimes for
estimating a distribution for tabular data [32, 33]. We apply
the RR and empirical estimation to counting triangles, and
show that it is suboptimal and signiﬁcantly outperformed by
a more sophisticated two-rounds algorithm.
Upper/lower-bounds. Finally, we note that existing work
on upper-bounds and lower-bounds cannot be directly ap-
plied to our setting. For example, there are upper-bounds
[8, 29, 30, 32, 33, 62] and lower-bounds [7, 18, 19, 21, 29–31]