以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 数据库表定义

#### 建筑物点几何
```sql
CREATE TABLE building_pt_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    CONSTRAINT bp_gid_pk PRIMARY KEY (gid, eseq, seq)
);
```

#### 建筑物区域几何
```sql
CREATE TABLE building_area_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    x4 INTEGER,
    y4 INTEGER,
    x5 INTEGER,
    y5 INTEGER,
    CONSTRAINT ba_gid_pk PRIMARY KEY (gid, eseq, seq)
);
```

#### 池塘几何
```sql
CREATE TABLE pond_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    x4 INTEGER,
    y4 INTEGER,
    CONSTRAINT p_gid_pk PRIMARY KEY (gid, eseq, seq)
);
```

#### 命名地点几何
```sql
CREATE TABLE named_place_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    x4 INTEGER,
    y4 INTEGER,
    CONSTRAINT np_gid_pk PRIMARY KEY (gid, eseq, seq)
);
```

#### 地图整饰线几何
```sql
CREATE TABLE map_neatline_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    x4 INTEGER,
    y4 INTEGER,
    x5 INTEGER,
    y5 INTEGER,
    CONSTRAINT mn_gid_pk PRIMARY KEY (gid, eseq, seq)
);
```

### 实体表定义

#### 湖泊
```sql
CREATE TABLE lakes (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    shore_gid INTEGER
);
```

#### 道路段
```sql
CREATE TABLE road_segments (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    aliases CHARACTER VARYING(64),
    num_lanes INTEGER,
    centerline_gid INTEGER
);
```

#### 分割路线
```sql
CREATE TABLE divided_routes (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    num_lanes INTEGER,
    centerlines_gid INTEGER
);
```

#### 森林
```sql
CREATE TABLE forests (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    boundary_gid INTEGER
);
```

#### 桥梁
```sql
CREATE TABLE bridges (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    position_gid INTEGER
);
```

#### 溪流
```sql
CREATE TABLE streams (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    centerline_gid INTEGER
);
```

#### 建筑物
```sql
CREATE TABLE buildings (
    fid INTEGER NOT NULL PRIMARY KEY,
    address CHARACTER VARYING(64),
    position_gid INTEGER,
    footprint_gid INTEGER
);
```

#### 池塘
```sql
CREATE TABLE ponds (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    type CHARACTER VARYING(64),
    shores_gid INTEGER
);
```

#### 命名地点
```sql
CREATE TABLE named_places (
    fid INTEGER NOT NULL PRIMARY KEY,
    name CHARACTER VARYING(64),
    boundary_gid INTEGER
);
```

#### 地图整饰线
```sql
CREATE TABLE map_neatlines (
    fid INTEGER NOT NULL PRIMARY KEY,
    neatline_gid INTEGER
);
```

### 空间参考系统插入
```sql
INSERT INTO spatial_ref_sys VALUES(
    101, 'POSC', 32214,
    'PROJCS["UTM_ZONE_14N", GEOGCS["World Geodetic System 72",DATUM["WGS_72", ELLIPSOID["NWL_10D", 6378135, 298.26]],PRIMEM["Greenwich", 0],UNIT["Meter",1.0]],PROJECTION["Transverse_Mercator"],PARAMETER["False_Easting", 500000.0],PARAMETER["False_Northing", 0.0],PARAMETER["Central_Meridian", -99.0],PARAMETER["Scale_Factor", 0.9996],PARAMETER["Latitude_of_origin", 0.0],UNIT["Meter", 1.0]]'
);
```

### 示例数据插入

#### 湖泊
```sql
INSERT INTO lake_geom VALUES(101, 1, 5, 1, 52, 18, 66, 23, 73, 9, 48, 6, 52, 18);
INSERT INTO lake_geom VALUES(101, 2, 5, 1, 59, 18, 67, 18, 67, 13, 59, 13, 59, 18);
INSERT INTO lakes VALUES(101, 'BLUE LAKE', 101);
```

#### 道路段
```sql
INSERT INTO road_segment_geom VALUES(101, 1, 3, 1, 0, 18, 10, 21, 16, 23);
INSERT INTO road_segment_geom VALUES(101, 1, 3, 2, 28, 26, 44, 31, NULL, NULL);
INSERT INTO road_segment_geom VALUES(102, 1, 3, 1, 44, 31, 56, 34, 70, 38);
INSERT INTO road_segment_geom VALUES(103, 1, 3, 1, 70, 38, 72, 48, NULL, NULL);
INSERT INTO road_segment_geom VALUES(104, 1, 3, 1, 70, 38, 84, 42, NULL, NULL);
INSERT INTO road_segment_geom VALUES(105, 1, 3, 1, 28, 26, 28, 0, NULL, NULL);

INSERT INTO road_segments VALUES(102, 'Route 5', NULL, 2, 101);
INSERT INTO road_segments VALUES(103, 'Route 5', 'Main Street', 4, 102);
INSERT INTO road_segments VALUES(104, 'Route 5', NULL, 2, 103);
INSERT INTO road_segments VALUES(105, 'Main Street', NULL, 4, 104);
INSERT INTO road_segments VALUES(106, 'Dirt Road by Green Forest', NULL, 1, 105);
```

#### 分割路线
```sql
INSERT INTO divided_route_geom VALUES(101, 1, 9, 1, 10, 48, 10, 21, 10, 0);
INSERT INTO divided_route_geom VALUES(101, 2, 9, 1, 16, 0, 10, 23, 16, 48);
INSERT INTO divided_routes VALUES(119, 'Route 75', 4, 101);
```

#### 森林
```sql
INSERT INTO forest_geom VALUES(101, 1, 11, 1, 28, 26, 28, 0, 84, 0, 84, 42, 28, 26);
INSERT INTO forest_geom VALUES(101, 1, 11, 2, 52, 18, 66, 23, 73, 9, 48, 6, 52, 18);
INSERT INTO forest_geom VALUES(101, 2, 11, 1, 59, 18, 67, 18, 67, 13, 59, 13, 59, 18);
INSERT INTO forests VALUES(109, 'Green Forest', 101);
```

#### 桥梁
```sql
INSERT INTO bridge_geom VALUES(101, 1, 1, 1, 44, 31);
INSERT INTO bridges VALUES(110, 'Cam Bridge', 101);
```

#### 溪流
```sql
INSERT INTO stream_geom VALUES(101, 1, 3, 1, 38, 48, 44, 41, 41, 36);
INSERT INTO stream_geom VALUES(101, 1, 3, 2, 44, 31, 52, 18, NULL, NULL);
INSERT INTO stream_geom VALUES(102, 1, 3, 1, 76, 0, 78, 4, 73, 9);

INSERT INTO streams VALUES(111, 'Cam Stream', 101);
INSERT INTO streams VALUES(112, 'Cam Stream', 102);
```

#### 建筑物
```sql
INSERT INTO building_pt_geom VALUES(101, 1, 1, 1, 52, 30);
INSERT INTO building_pt_geom VALUES(102, 1, 1, 1, 64, 33);

INSERT INTO building_area_geom VALUES(101, 1, 5, 1, 50, 31, 54, 31, 54, 29, 50, 29, 50, 31);
INSERT INTO building_area_geom VALUES(102, 1, 5, 1, 66, 34, 62, 34, 62, 32, 66, 32, 66, 34);

INSERT INTO buildings VALUES(113, '123 Main Street', 101, 101);
INSERT INTO buildings VALUES(114, '215 Main Street', 102, 102);
```

#### 池塘
```sql
INSERT INTO pond_geom VALUES(101, 1, 11, 1, 24, 44, 22, 42, 24, 40, 24, 44);
INSERT INTO pond_geom VALUES(101, 2, 11, 1, 26, 44, 26, 40, 28, 42, 26, 44);
INSERT INTO ponds VALUES(120, NULL, 'Stock Pond', 101);
```

#### 命名地点
```sql
INSERT INTO named_place_geom VALUES(101, 1, 5, 1, 62, 48, 84, 48, 84, 30, 56, 30);
INSERT INTO named_place_geom VALUES(101, 1, 5, 2, 56, 30, 56, 34, 62, 48, NULL, NULL);
INSERT INTO named_place_geom VALUES(102, 1, 5, 1, 67, 13, 67, 18, 59, 18, 59, 13);
INSERT INTO named_place_geom VALUES(102, 1, 5, 2, 59, 13, 67, 13, NULL, NULL, NULL, NULL);

INSERT INTO named_places VALUES(117, 'Ashton', 101);
INSERT INTO named_places VALUES(118, 'Goose Island', 102);
```

#### 地图整饰线
```sql
INSERT INTO map_neatline_geom VALUES(101, 1, 5, 1, 0, 0, 0, 48, 84, 48, 84, 0, 0, 0);
INSERT INTO map_neatlines VALUES(115, 101);
```

### 几何列插入
```sql
INSERT INTO geometry_columns VALUES('lakes', 'shore_gid', 'lake_geom', 0, 5, 2, 5, 101);
INSERT INTO geometry_columns VALUES('road_segments', 'centerline_gid', 'road_segment_geom', 0, 3, 2, 3, 101);
INSERT INTO geometry_columns VALUES('divided_routes', 'centerlines_gid', 'divided_route_geom', 0, 9, 2, 3, 101);
INSERT INTO geometry_columns VALUES('forests', 'boundary_gid', 'forest_geom', 0, 11, 2, 5, 101);
INSERT INTO geometry_columns VALUES('bridges', 'position_gid', 'bridge_geom', 0, 1, 2, 1, 101);
INSERT INTO geometry_columns VALUES('streams', 'centerline_gid', 'stream_geom', 0, 3, 2, 3, 101);
INSERT INTO geometry_columns VALUES('buildings', 'position_gid', 'building_pt_geom', 0, 1, 2, 1, 101);
INSERT INTO geometry_columns VALUES('buildings', 'footprint_gid', 'building_area_geom', 0, 5, 2, 5, 101);
INSERT INTO geometry_columns VALUES('ponds', 'shores_gid', 'pond_geom', 0, 11, 2, 4, 101);
INSERT INTO geometry_columns VALUES('named_places', 'boundary_gid', 'named_place_geom', 0, 5, 2, 4, 101);
INSERT INTO geometry_columns VALUES('map_neatlines', 'neatline_gid', 'map_neatline_geom', 0, 5, 2, 5, 101);
```

### 测试查询

#### 一致性项 N1
```sql
SELECT f_table_name FROM geometry_columns;
```

#### 一致性项 N2
```sql
SELECT g_table_name FROM geometry_columns;
```

#### 一致性项 N3
```sql
SELECT storage_type FROM geometry_columns WHERE f_table_name = 'streams';
```

#### 一致性项 N4
```sql
SELECT geometry_type FROM geometry_columns WHERE f_table_name = 'streams';
```

#### 一致性项 N5
```sql
SELECT coord_dimension FROM geometry_columns WHERE f_table_name = 'streams';
```

#### 一致性项 N6
```sql
SELECT max_ppr FROM geometry_columns WHERE f_table_name = 'streams';
```

#### 一致性项 N7
```sql
SELECT srid FROM geometry_columns WHERE f_table_name = 'streams';
```

#### 一致性项 N8
```sql
SELECT srtext FROM SPATIAL_REF_SYS WHERE SRID = 101;
```

### 二进制几何模式

#### 测试概述
本测试的目的是确定测试数据（一旦插入）可以通过标准中定义的模式访问。表 C.3 显示了完成此测试的查询。

#### 查询表
| ID | 功能性测试 | 查询描述 | 答案 |
|----|------------|-----------|------|
| B1 | 表 B.1 — 我们将检查所有要素表是否在 GEOMETRY_COLUMNS 表/视图中有条目 | 湖泊、道路段、分割路线、建筑物、森林、桥梁、命名地点、溪流、池塘、地图整饰线 | 是 |
| B2 | GEOMETRY_COLUMNS 表/视图是否正确创建/更新 | 我们将检查所有几何表是否在 GEOMETRY_COLUMNS 表/视图中有条目 | 湖泊几何、道路段几何、分割路线几何、森林几何、桥梁几何、溪流几何、建筑物点几何、建筑物区域几何、池塘几何、命名地点几何、地图整饰线几何 | 是 |
| B3 | GEOMETRY_COLUMNS 表/视图是否正确创建/更新 | 我们将检查溪流表的存储类型是否在 GEOMETRY_COLUMNS 表/视图中正确表示 | 1 |
| B4 | GEOMETRY_COLUMNS 表/视图是否正确创建/更新 | 我们将检查溪流表的几何类型是否在 GEOMETRY_COLUMNS 表/视图中正确表示 | 3 (对应于 'LINESTRING') |
| B5 | GEOMETRY_COLUMNS 表/视图是否正确创建/更新 | 我们将检查溪流表的坐标维度是否在 GEOMETRY_COLUMNS 表/视图中正确表示 | 2 |
| B6 | GEOMETRY_COLUMNS 表/视图是否正确创建/更新 | 我们将检查溪流表的 srid 值是否在 GEOMETRY_COLUMNS 表/视图中正确表示 | 101 |
| B7 | SPATIAL_REF_SYS 表/视图是否正确创建/更新 | 我们将检查 srtext 的值是否在 SPATIAL_REF_SYS 表/视图中正确表示 | 'PROJCS["UTM_ZONE_14N", GEOGCS["World Geodetic System 72", DATUM["WGS_72", ELLIPSOID["NWL_10D", 6378135, 298.26]], PRIMEM["Greenwich", 0], UNIT["Meter", 1.0]], PROJECTION["Transverse_Mercator"], PARAMETER["False_Easting", 500000.0], PARAMETER["False_Northing", 0.0], PARAMETER["Central_Meridian", -99.0], PARAMETER["Scale_Factor", 0.9996], PARAMETER["Latitude_of_origin", 0.0], UNIT["Meter", 1.0]]' |

版权所有 © 2007 Open Geospatial Consortium, Inc. 保留所有权利。
OGC 06-104r4 版权所有 © 2007 Open Geospatial Consortium, Inc. 保留所有权利。

---