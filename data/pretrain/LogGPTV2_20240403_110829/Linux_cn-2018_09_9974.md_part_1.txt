---
author: Shikhar Chauhan
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 11046
date: '2018-09-02 21:58:40'
editorchoice: false
excerpt: 如果你正在阅读本文，那么你已经意识到了 Python 3.7 以及它所包含的新特性。就我个人而言，我对 Dataclasses 感到非常兴奋，因为我等了它一段时间了。
fromurl: https://medium.com/mindorks/understanding-python-dataclasses-part-1-c3ccd4355c34
id: 9974
islctt: true
largepic: /data/attachment/album/201809/02/215843ybbbu9wemwrzazwm.png
permalink: /article-9974-1.html
pic: /data/attachment/album/201809/02/215843ybbbu9wemwrzazwm.png.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 如果你正在阅读本文，那么你已经意识到了 Python 3.7 以及它所包含的新特性。就我个人而言，我对 Dataclasses 感到非常兴奋，因为我等了它一段时间了。
tags:
- Python
thumb: false
title: 理解 Python 的 Dataclasses（一）
titlepic: true
translator: MjSeven
updated: '2018-09-02 21:58:40'
---
![](/data/attachment/album/201809/02/215843ybbbu9wemwrzazwm.png)
如果你正在阅读本文，那么你已经意识到了 Python 3.7 以及它所包含的新特性。就我个人而言，我对 `Dataclasses` 感到非常兴奋，因为我等了它一段时间了。
本系列包含两部分：
1. Dataclass 特点概述
2. 在下一篇文章概述 Dataclass 的 `fields`
### 介绍
`Dataclasses` 是 Python 的类（LCTT 译注：更准确的说，它是一个模块），适用于存储数据对象。你可能会问什么是数据对象？下面是定义数据对象的一个不太详细的特性列表：
* 它们存储数据并代表某种数据类型。例如：一个数字。对于熟悉 ORM 的人来说，模型实例就是一个数据对象。它代表一种特定的实体。它包含那些定义或表示实体的属性。
* 它们可以与同一类型的其他对象进行比较。例如：一个数字可以是 `greater than`（大于）、`less than`（小于） 或 `equal`（等于） 另一个数字。
当然还有更多的特性，但是这个列表足以帮助你理解问题的关键。
为了理解 `Dataclasses`，我们将实现一个包含数字的简单类，并允许我们执行上面提到的操作。
首先，我们将使用普通类，然后我们再使用 `Dataclasses` 来实现相同的结果。
但在我们开始之前，先来谈谈 `Dataclasses` 的用法。
Python 3.7 提供了一个装饰器 [dataclass](https://docs.python.org/3.7/library/dataclasses.html#dataclasses.dataclass)，用于将类转换为 `dataclass`。
你所要做的就是将类包在装饰器中：
```
from dataclasses import dataclass
@dataclass
class A:
 ...
```
现在，让我们深入了解一下 `dataclass` 带给我们的变化和用途。
### 初始化
通常是这样：
```
class Number:
    def __init__(self, val):
        self.val = val
>>> one = Number(1)
>>> one.val
>>> 1
```
用 `dataclass` 是这样：
```
@dataclass
class Number:
    val:int 
>>> one = Number(1)
>>> one.val
>>> 1
```
以下是 `dataclass` 装饰器带来的变化：
1. 无需定义 `__init__`，然后将值赋给 `self`，`dataclass` 负责处理它（LCTT 译注：此处原文可能有误，提及一个不存在的 `d`）
2. 我们以更加易读的方式预先定义了成员属性，以及[类型提示](https://stackoverflow.com/q/32557920/4333721)。我们现在立即能知道 `val` 是 `int` 类型。这无疑比一般定义类成员的方式更具可读性。
> 
> Python 之禅: 可读性很重要
> 
> 
> 
它也可以定义默认值：
```
@dataclass
class Number:
    val:int = 0
```
### 表示
对象表示指的是对象的一个有意义的字符串表示，它在调试时非常有用。
默认的 Python 对象表示不是很直观：
```
class Number:
    def __init__(self, val = 0):
    self.val = val
>>> a = Number(1)
>>> a
>>> 
```
这让我们无法知悉对象的作用，并且会导致糟糕的调试体验。
一个有意义的表示可以通过在类中定义一个 `__repr__` 方法来实现。
```
def __repr__(self):
    return self.val
```
现在我们得到这个对象有意义的表示：
```
>>> a = Number(1)
>>> a
>>> 1
```
`dataclass` 会自动添加一个 `__repr__`  函数，这样我们就不必手动实现它了。
```
@dataclass
class Number:
    val: int = 0
```
```
>>> a = Number(1)
>>> a
>>> Number(val = 1)
```
### 数据比较
通常，数据对象之间需要相互比较。
两个对象 `a` 和 `b` 之间的比较通常包括以下操作：
* `a  b`
* `a == b`
* `a >= b`
* `a >> import random
>>> a = [Number(random.randint(1,10)) for _ in range(10)] #generate list of random numbers
>>> a
>>> [Number(val=2), Number(val=7), Number(val=6), Number(val=5), Number(val=10), Number(val=9), Number(val=1), Number(val=10), Number(val=1), Number(val=7)]
>>> sorted_a = sorted(a) #Sort Numbers in ascending order
>>> [Number(val=1), Number(val=1), Number(val=2), Number(val=5), Number(val=6), Number(val=7), Number(val=7), Number(val=9), Number(val=10), Number(val=10)]
>>> reverse_sorted_a = sorted(a, reverse = True) #Sort Numbers in descending order 