otherwise storing information in preparation for changing
I/O behavior if activated.
Since the additional computation performed by a Trojan
IC on the test data has to be simple to avoid simple side-
channel tests, one may expect that distinguishing power/EM
signatures for such Trojan ICs could be hidden within the
signal measurement noise. However, signal measurement
noise can be easily eliminated by averaging over many sig-
nals obtained with the same input. Using averages over
many power/EM traces, even small power/EM contribu-
tions from the Trojan circuit relative to the main circuit can
be picked up. Figure 2 shows a simulation of how an av-
erage power signal would look like for the Trojan and gen-
uine AES circuits running at 100MHz. The signal from the
genuine AES circuit is shown in green (or grey) and the ad-
ditional signal introduced by the Trojan circuit is shown in
black. This additional signal riding on top of the expected
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007non-Trojan signal is so large that it will easily stand out,
once signal measurement noise is reduced.
x 10−3
6
5
4
3
2
)
1
W
(
r
e
0
w
o
P
−1
0
500
1000
1500
Time
2000
2500
3000
Figure 2. Genuine AES signal in green/grey
overlayed with Trojan contribution in black.
The effectiveness of the averaging based detection tech-
nique above is only limited by the effect of process noise
on side-channel signals: No two ICs are exactly identical,
and process variations between different ICs manufactured
from the same speciﬁcation manifest as slight differences
in the average side-channel signals for the same computa-
tion. The process noise is likely to be much smaller than the
measurement noise and the Trojan ICs that have a minimal
Power/EM footprint on the test data may escape detection
using signal averaging tests. However, as we will show in
the next section, just having a Trojan IC with a power/EM
proﬁle during testing that is comparable to or less than the
process noise will not sufﬁce to protect a Trojan IC against
more sophisticated testing and side channel analysis.
3. Trojan Detection Theory
Consider an IC I, that executes a calculation C. Also,
consider a power measurement M done on I when it is ex-
ecuting the computation C. The power trace obtained in
this measurement, r(t; I; C; M), can be modeled as con-
sisting of four components: (a) the mean power consump-
tion p(t; C) (the mean is computed over several measure-
ments done on several ICs from the same family during
multiple executions of the calculation C), (b) process noise
np(t; I; C), (c) measurement noise nm(t; M), and (d) pos-
sibly an extra power leakage τ(t; I; C) due to a Trojan
circuit in I. Note that in our model, the process noise
np(t; I; C) and the extra signal injected by the Trojan cir-
cuit τ(t; I; C) may depend on the particular IC I, and the
executed calculation C. Thus in our model the power trace
of a genuine IC is given by
rG(t; I; C; M) = p(t; C) + np(t; I; C) + nm(t; M) ,
and the Trojan IC adds an additional component to give
rT (t; I; C; M) = p(t; C) + np(t; I; C) + nm(t; M)
+ τ(t; I; C) .
Typically, the measurement noise nm(t; M) is a random
noise that varies on each measurement. Since none of the
other components of the power signal depends on the mea-
surement M, the random noise nm(t; M) can be eliminated
by averaging over a large number of measurements taken
from the same IC. Therefore, in the rest of this paper, we
will ignore the measurement noise, and work with the fol-
lowing models of the power traces for genuine and Trojan
ICs, respectively:
rG(t; I; C) = p(t; C) + np(t; I; C),
rT (t; I; C) = p(t; C) + np(t; I; C) + τ(t; I; C) .
If we assume that we have access to multiple genuine ICs,
then we can compute the mean of rG(t; I; C) over several
genuine ICs to eliminate the process noise np(t; I; C) and
calculate the mean power consumption p(t; C) that occurs
during the calculation C. Since the mean power consump-
tion p(t; C) is common among the power traces obtained
from both the genuine and the Trojan ICs, it can also be
subtracted out from all the power traces, and hence for our
analysis, we can assume that,
rG(t; I; C) = np(t; I; C),
rT (t; I; C) = np(t; I; C) + τ(t; I; C) .
We model the Trojan detection problem as follows.
Deﬁnition 1 Trojan Detection Problem. Given K gen-
uine ICs I1, I2, . . . , IK and the process noise signals
np(t; I1; C), np(t; I2; C), . . . , np(t; IK; C) generated by
the ICs I1, I2, . . . , IK, respectively, during the execution
of the calculation C, and given an IC IK+1 with a mean
power trace r(t; IK+1; C) (mean taken over multiple
executions of calculation C with the average p(t; C)
subtracted), how can we determine if the IC IK+1 contains
a Trojan circuit?
In other words, we have the following two hypothesis
for genuine and Trojan ICs, respectively, and our goal is to
detect the correct hypothesis.
1. HG : r(t; IK+1; C) = np(t; IK+1; C)
2. HT : r(t; IK+1; C) =n p(t; IK+1; C)+τ (t; IK+1; C)
The Trojan detection problem above can be viewed as
a signal characterization problem. We need to character-
ize the process noise np(t; I; C) and check if the signal un-
der hypothesis testing differs from the process noise. One
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007powerful technique to ﬁnd such characteristics is subspace
projection, where the signal r(t; IK+1; C) and the process
noise signals np(t; I1; C), np(t; I2; C), . . . , np(t; IK; C)
from known genuine ICs are projected in a signal subspace
where signals from Trojan and genuine ICs are likely to
have different characteristics. The main obstacle in this
analysis is that we do not know the Trojan circuit or what
precisely it may be trying to accomplish. The Trojan IC may
be monitoring the clock, contents of a register, or transitions
on a bus. The power consumed by the Trojan may be cor-
related with the clock, input or output data, result of some
intermediate calculation, etc. In absence of this knowledge
apriori, it may seem that nothing short of a full characteri-
zation of the process noise would work.
However, in our initial experiments with simulated Tro-
jan ICs, we could easily ﬁnd signal subspaces where charac-
teristics of the genuine and Trojan ICs differed considerably
without having to perform a full characterization of the pro-
cess noise. For example, consider an otherwise small Trojan
whose power consumption does not fall when the genuine
IC’s power consumption falls. This may be the case be-
cause the process noise within a signal trace is correlated
to the signal amplitude and thus drops off when the IC is
not consuming much power. An analysis performed on the
power traces at such points in time will easily pick up the
Trojan.
As an illustration, Figure 3 shows an RSA computation
(in green or gray) with the process noise (in red or dark
grey) and the Trojan signal (in black) simulated via a ±5%
random variation in cell libraries across processes. The
RSA signal shows periods of high power consumption cor-
responding to each modular multiplication operation, sep-
arated by a short time-interval of low power consumption
in between these multiplications. The Trojan power signa-
ture in this case is much smaller than the process noise in
general. However, in contrast, note that the process noise is
much smaller than the Trojan power signature and is largely
zero in between the modular multiplications, while the Tro-
jan signal displays a regular structure both during and in
between the modular multiplications since it is counting
clocks. Figure 4 shows the Trojan power signature and pro-
cess noise in one such region of low activity in between
two modular multiplications— in such regions, with its rel-
atively much larger magnitude the Trojan contribution to
the signal (black) stands out compared to the process noise
(green or grey).
Even when the IC’s power consumption, and therefore
the correlated process noise, does not fall relative to the Tro-
jan at any point in the computation, the Trojan ICs can be
detected by using advanced signal processing techniques.
In the rest of this paper, we will demonstrate the use of
Karhunen-Lo`eve (KL) expansion [28, 10, 21] to detect Tro-
jan ICs. Using this technique we were able to determine
RSA Signal, Process Nose (offset) and Trojan Signal (offset)
)
W
(
r
e
w
o
P
0.04
0.035
0.03
0.025
0.02
0.015
0.01
0.005
0
−0.005
−0.01
1000
2000
3000
Time
4000
5000
Figure 3. Genuine RSA signal (top: green
or grey), process noise(middle:
red or
dark grey) and Trojan contribution (bottom:
black).
x 10−4Trojan Signal and Process Noise in Low Noise region
8
6
4
2
0
)
W
(
r
e
w
o
P
3440 3450 3460 3470 3480 3490 3500 3510
Time
Figure 4. Trojan (black) vs. process noise
(green or grey) in between two modular mul-
tiplications.
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007all Trojans introduced into our RSA circuit under many dif-
ferent process-noise assumptions. Before we go into the
results obtained by using the KL expansion, we will brieﬂy
describe its mathematical foundation.
Theorem 1 Suppose that {Yt, t ∈ [0, T ]} is a zero-mean
second-order random process with autocovariance function
CY (t, u) that is continuous on [0, T ]2, then CY can be ex-
panded in the uniformly and absolutely convergent series
∞(cid:5)
CY (t, u) =
λkψk(t)ψk(u),
(t, u) ∈ [0, T ]2,
(1)
k=1
where λk and ψk, for k = 1, . . . ,∞ are eigenvalues and
corresponding orthonormal eigenfunctions of CY . Further-
more, {Yt, t ∈ [0, T ]} can be represented by the following
mean-square convergent series:
Yt =
∞(cid:5)
k=1
Zkψk(t), 0 ≥ t ≥ T.
(2)
where {Zk}∞
sample Yt.
k=1 is referred to as the KL coefﬁcients of the
While a discussion of the mathematical technicalities in
the above theorem is clearly outside the scope of this paper;
we note that the conditions under which the above theorem
holds are very mild and easy to satisfy [21].
The KL expansion essentially provides a separation of
the randomness and the time-variation of a random process:
the sequence {Zk}∞
k=1, loosely referred to as the eigen-
value spectrum of a sample, varies from sample to sample,
and has no time dependency, while ψk(t), eigenvectors of
the random process, are ﬁxed from sample to sample, but
vary with time. Since we are interested in a characteriza-
tion of the randomness of the signals, we can just focus on
{Zk}∞
k=1.
The variance of the random variable Zk is given by
λk. Thus, if for a random process Yt, eigenvectors ψk
are arranged such that their corresponding eigenvalues λk
are monotonically decreasing in k, then for a sufﬁciently
large positive integer K, the sequence, Z1, . . . , ZK, cap-
tures most of the randomness contained in the process. Fur-
thermore, for k > K, Zk is close to zero (and has close to
zero variance) for any sample from the random process Yt.
In other words, the random signal Yt “lives” in a signal sub-
space spanned by ψ1(t), . . . , ψK(t), and it is absent from
the signal subspaces spanned by ψK+1(t), ψK+2(t), . . . .
We can exploit this fact to ﬁnd Trojan ICs. By using the
KL expansion, we can ﬁnd a signal subspace from which
the process noise is absent. Unless the Trojan signals com-
pletely live in the same subspace as the process noise, the
projection from the samples of Trojan signals in this sub-
space (say given by ZK+1, ZK+2, . . . ) would be non-zero
and show large variability in contrast to similar projection
from the samples of process noise which will be close to
zero and show close to zero variance (see Sections 5.1, 5.2,
and 5.3).
If the Trojan signal was very small, there is a possibil-
ity that the Trojan signal may completely live in the same
subspace as the the process noise. However, it is unlikely
that its spectrum characteristics would be exactly the same
as the process noise, e.g. in terms of mean and variance of
the eigenvalue spectrum. Such differences can be captured
by a statistical analysis of the spectrum (see Section 5.4).
Here we note a strong analogy of our technique to the emis-
sions spectroscopy technique used to detect trace amounts
of metals in a material. Each metal has a unique emis-
sion spectrum, and by comparing these spectrums emissions
spectroscopy can be used to detect minutes amounts of trace
metals (as small as 10 ppb) in a material.
We will now describe our experimental setup in Sec-
tion 4, followed by a discussion of results for different Tro-
jan circuits and process noises in Section 5.
4. Experimental Setup
4.1. ICs Used in Our Analysis
We used synthesized RSA circuits [24] for the analysis
presented in the rest of this paper. RSA circuits are used in
many systems and they are of high value to the attackers.
The Trojan added to these circuits was a simple counter or
comparator. In a counter based Trojan, the Trojan circuit
counts clock cycles and disables the IC after a threshold
is reached. In the case of a comparator based Trojan, the
Trojan circuit compares the data in a bus or a register against
a ﬁxed value and alters the computation if there is a match.
4.1.1 RSA Circuits
Our RSA design employs the left-to-right binary square and
multiply exponentiation algorithm. We employ a scalable,
pipelined and high radix Montgomery Multiplier (MM) ar-
chitecture to realize square or multiply operations. The
operand length, word size, and pipeline depth in the MM
circuit are parameterized. All simulation results in this pa-
per were obtained for a pipeline depth of 8 and word size
of 8 bits. We chose these values of pipeline depth and word
size to have reasonable circuit area and speed that are in ap-
propriate ranges for real life applications. The memories to
hold operands, exponent and modulus, and the FIFO mem-
ory necessary for the pipeline structure are omitted from the
synthesized RSA circuit. Our RSA circuit design is shown
in the Appendix.
In order to generate a power trace, the circuit was re-
synthesized, ﬂattened, power optimized, mapped, and then
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007ﬁnally analyzed for power. Moreover, each step requires
simulation for back-annotation. The execution time of the
square and multiply algorithm is O(n), and the execution
time of MM algorithm is O(n2). This leads to an overall
execution time of O(n3). Therefore, the simulation time
as well as the size of the intermediate ﬁles used to capture
the switching activity grows very quickly. For instance, for
512-bit operands and a 16-bit short exponent, the generation
of a single power trace takes about 4 hours on a high-end
workstation. Due to these constraints, in our simulations
we used RSA circuits for only 256-bit or 512-bit operands
rather than the typical sizes of 1024-bit or more. The 256-
bit RSA circuit we used has an equivalent area of 27909
2-input NAND gates and average power consumption of
2.239 mW, whereas the 512-bit RSA circuit has an equiv-
alent area of 27914 2-input NAND gates and average power
consumption of 3.001 mW. Both the 256-bit and 512-bit
RSA circuits had a maximum clock frequency of 617 MHz.
4.1.2 Trojan Circuits
In our experiments, we used three different Trojan cir-
cuits. The ﬁrst Trojan circuit was a 16-bit counter with an
equivalent area of 406 2-input NAND gates which occupies
roughly 1.4% of the total circuit area of the RSA circuits
described earlier. The second Trojan circuit was a simple
8-bit sequential comparator with an equivalent area of 33
2-input NAND gates. As a ﬁnal attempt, in order to test
the limits of our technique, we used an even simpler 3-bit
combinational comparator with an equivalent area of only 3
2-input NAND gates. Figures 5 and 6 show the VHDL code
for the simple 8-bit sequential and 3-bit combinational Tro-
jan comparator circuits. Note that the area of Trojan circuits
used in our experiments goes from 406 gates to 33 gates to 3
gates, roughly an order of magnitude decrease at each step.
4.2. Testbed Used for Circuit Simulation
and Power Trace Generation
We used Synopsys Core Synthesis Tools [25] with the
0.13 µm, 1.0 V technology library tcb0131vhptc of Taiwan
Semiconductor Manufacturing Company (TSMC) for the
synthesis of the RSA circuits with and without the Trojan.
We also used ModelSim SE/PE 5.7g [20] for simulation and
switching activity analysis and Synopsys PrimePower Stan-
dAlone [26] for power analysis. Then we conducted sim-
ulations and obtained power traces for different scenarios.
We ran our simulations at 50 MHz clock frequency.
4.3. Modeling Ambient Noise and Process
Variations
Since no two ICs are identical even if they use the same
masks and go through the same fabrication process, their
side-channel signals differ even for the same input. We call
this variation process noise. In our experiments, we mod-
eled the process noise by randomly altering the parameters
of the TSMC technology library in the range of ±2%, ±5%
or ±7.5%. Each different variation of parameter values rep-
resents a different physical circuit manufactured through the
same process.
5. Experimental Results
5.1. Experiment 1:
512-Bit RSA Circuit
with a 16-Bit Counter Based Trojan
and with ±2% Parameter Variations
For this experiment, we used the 512-bit RSA circuit
with the 16-bit counter based Trojan. Recall that the 16-bit
counter based Trojan has an equivalent area of 407 2-input
NAND gates, and it occupies roughly 1.4% of the total cir-
cuit area.
To emulate the process noise, we introduced ±2% ran-
dom variations in the library parameters to obtain 15 new
libraries and compiled them using the Synopsys Library
Compiler [27]. We then used each compiled library (typical
library as well as 15 new libraries) to synthesize 16 genuine
ICs and 16 ICs with Trojan. We then conducted power sim-
ulations and obtained 16 traces for RSA and 16 traces for
the Trojaned RSA.
Figure 7 shows the eigenvalue spectrum of the signals
(40 contiguous sample points) taken in the middle of a mod-
ular multiplication operation where the process noise is the
highest in amplitude. The spectrum for ICs with Trojans are
plotted in blue (or black) and the spectrum for the genuine
ICs are plotted in green (or grey). As we can see in Fig-
ure 7, even though we analyzed a very short trace segment,
the eigenvalue spectrums of the genuine ICs and ICs with
Trojans stand apart on the eigenvectors 12 and 14, yielding
a simple test to detect Trojan ICs.
Note that the power-traces used to derive the results
given above were obtained by using a single key value. We
have veriﬁed that the value of the used key does not change
our results.
5.2. Experiment 2:
256-Bit RSA Circuit
with the 16-Bit Counter Based Trojan
and with ±5% Parameter Variations