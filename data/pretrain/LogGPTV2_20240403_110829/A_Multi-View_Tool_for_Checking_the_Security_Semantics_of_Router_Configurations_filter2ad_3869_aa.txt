title:A Multi-View Tool for Checking the Security Semantics of Router Configurations
author:Holger Peine and
Reinhard Schwarz
A Multi-View Tool for Checking the Security Semantics of Router Configurations
Dr. Holger Peine, Dr. Reinhard Schwarz
Fraunhofer Institute for Experimental Software Engineering, Germany
{peine, schwarz}@iese.fraunhofer.de
Abstract
Routers  are  critical  components  of  IP  networks,  but
hardly any tool support for analyzing their security exists to
date. We have developed such a tool, named CROCODILE,
that tracks the security implications of related configuration
directives that may be scattered all over the router’s config-
uration,  instead  of  analyzing  only  isolated  configuration
clauses like other tools do. Our tool offers several novel eval-
uation capabilities and presents its findings as a collection
of multi-view displays, enabling the user to focus on selected
aspects,  and  to  navigate  deeper  and  deeper  into  specific
details. We demonstrate the practical use of CROCODILE,
and a comparison with the well-known RAT tool illustrates
CROCODILE’s remarkable capabilities.
1. Router configuration and security checking
Today, all but the smallest enterprises are connected to
the Internet and use IP networks internally, too. Routers play
a fundamental role in such networks as they relay (or delib-
erately do not relay) IP packets between source and destina-
tion  hosts.  Modern  routers  do  not  only  perform  relaying
functions, but also filtering, separation, encryption and mon-
itoring of data streams. Furthermore, they provide various
management interfaces for configuration, (remote) mainte-
nance, and monitoring. All these functions potentially affect
the availability, integrity, and confidentiality of data connec-
tions, thus making routers highly security-critical network
components.
However,  configuring  a  router  is  a  difficult  and  error-
prone task. The available configuration languages are com-
plex and often badly documented, and errors are hard to spot.
Therefore, tool support to uncover hidden vulnerabilities in
router configurations is highly welcome, as tools improve
efficiency and effectiveness as well as objectivity and repeat-
ability of router security checks. However, few such tools
exist to date, and the existing ones work at a rather low level
of abstraction and with very limited evaluation capabilities.
1.1. A tool for analyzing router security
CROCODILE1 is a router security checker we have devel-
oped with support by Deutsche Telekom [1]. It parses a router
configuration file (i.e., a text file with a sequence of config-
uration  clauses),  checks  for  potential  vulnerabilities,  and
generates rich HTML evaluation reports. Many trivial errors
and inconsistencies that would easily escape the human eye
are uncovered, none of which would be flagged by the router
itself;  however,  CROCODILE’s  capabilities  go  far  beyond
such purely syntactic analysis:
• CROCODILE performs a semantic analysis of the con-
figuration including, for example, the order or the
omission of clauses, and their meaning in context. This
is only possible because the tool analyzes the configu-
ration as a whole, instead of each line in isolation.
• The often confusing wealth of evaluation results is pre-
sented using various task-specific displays. For exam-
ple, the tool offers an annotated overview, a differential
display relative to an earlier version of the configura-
tion (see Section 3.3), detailed analyses, statistical data,
and convenient hyperlinks to vendor documentation. A
particularly useful and innovative detail analysis is the
computation of the sets of packets effectively accepted
("whiteset") or rejected ("blackset") by the access con-
trol list protecting a router interface (see Section 3.5). 
• Findings  are  logically  grouped  to  various  analysis
views, with a view gathering all findings conceptually
relating to a certain configuration aspect as defined by
the user (e.g., authentication or logging). The clauses
1.
"Cisco ROuter COnfiguration DILigent Evaluator"
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
Checker Module
Checker Module
Checker Module
Checker Module
Checker Module
Checker Module
Pattern
Pattern
Pattern
Pattern
Pattern
Pattern
Handler
Handler
Handler
Handler
Handler
Handler
find
find
call
call
Parser
Parser
XML
XML
Results Database
Results Database
Output Generation
Output Generation
Results
Results
Results
Results
Results
Results
Results
Results
Results
(HTML)
(HTML)
(HTML)
(HTML)
(HTML)
(HTML)
(HTML)
(HTML)
(HTML)
Router
Router
Config
Config
(ASCII)
(ASCII)
Figure 1.  Structure and operation of CROCODILE
covered by a view may be scattered across the configu-
ration, and one clause may contribute to several views.
Findings may also be attached to a view as a whole.
During inspection, the user may focus on any particular
view. The view-based presentation makes the reasoning
behind the router configuration easier to conceive, and
consequently makes errors and vulnerabilities more
transparent.
CROCODILE thus relieves the user from cumbersome low-
level work and raises router configuration to a semantic level
where the human expert is more adequately supported. None
of the router security tools known to us has comparable capa-
bilities.
1.2. Cisco Routers and IOS
CROCODILE  is  currently  geared  towards  routers  from
Cisco Systems, the market leader, running the IOS operating
system [2]. However, thanks to the modular design of the
tool  framework,  vendor-specific  modules  could  easily  be
replaced in order to support any text-based configuration for-
mat, even including types of devices other than routers.
Correct use of IOS poses a difficult task to the network
administrator. The options provided by this operating system
are numerous and complicated, and new IOS versions appear
frequently.  Furthermore,  the  syntax  of  IOS  clauses  is  not
very expressive, hardly intuitive, occasionally ambiguous,
and often poorly documented. Finally, IOS further increases
the  administrator’s  burden  by  silently  ignoring  erroneous
clauses instead of printing an error message. These adversi-
ties have greatly complicated the development of CROCO-
DILE, but the user can now profit from the effort expended
in developing the tool, and the knowledge embodied therein.
2. CROCODILE architecture and operation
Besides  the  run-time  functionality  of  the  logical  views
and the task-specific displays, CROCODILE is an extensible
framework  providing  all  functionality  useful  for  general
text-based security checking, while encapsulating specific
areas of security evaluation in independent checker modules.
Further  design  goals  include  the  configurability  of  the
checker modules in order to adapt to local policies, and port-
ability, realized by implementing CROCODILE in Perl1 with-
out using any additional libraries.
2.1. Components
The tool is basically composed of three types of compo-
nents: A pattern matching module (parser), an arbitrary num-
ber of checker modules, and a database and display module.
Each checker  module  covers  one  logical  aspect  of  router
security with all the required checking logic. The parser pro-
vides the checker modules with input data relevant for the
module’s analyses. The display module generates complex
but  convenient  hypertext  documents  from  the  findings.
Figure 1 shows the interplay of these components.
2.2. Operation
The tool’s basic operation is as follows: The parser ini-
tially polls all configured checker modules, retrieving from
each module a set of text patterns this module is interested
in. These patterns are described in Backus-Naur-Form, com-
parable to the format that appears in the Cisco documentation
[2], providing the usual operators of sequence, alternative,
repetition, and negation. Pattern macros may be defined for
1.
Perl is freely available for all common operating systems (see, e.g.,
http://www.perl.org).
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
convenience. (An example of such pattern and macro spec-
ifications is shown in Figure 3 in Section 3.4.1).
The parser then proceeds to read an IOS router configu-
ration file in text format, parses it line by line, and tries to
find lines matching one of the patterns registered by the mod-
ules. Whenever a matching pattern is found in the configu-
ration, the parser notifies all checker modules that had reg-
istered this pattern, and supplies the matching line in various
formats to each module.
When a module receives such a notification, it executes
a pattern handler associated with this pattern. Such a handler
is a method of the checker module that contains all checking
and evaluation steps to be performed on each occurrence of
this pattern. This may include using information gained from
previous handler invocations (even handlers in other mod-
ules), thus building a comprehensive view spanning more
than one line.
The invocation of each handler returns a checking result,
and  possibly  additional  comments.  All  such  findings  are
stored in structured format in an internal database.
After all lines of the input file have been processed in this
way, the parser polls each module once more for its overall
conclusions. The polling enables the modules to construct
an integrated view of the aspects interesting to them from
the sum of all previous parser notifications.
After the parser run is finished, the complete result data-
base is stored as a file in XML format. These raw data are
then used  to generate various  integrated HTML hypertext
reports viewable with any conventional web browser.
CROCODILE is currently delivered with a collection of
standard checker modules that cover fundamental security
aspects  of  router  configurations.  These  modules  will  be
described in Section 3.4.
2.3. Construction of custom checker modules
Users do not normally come into contact with the interface
between the parser and the checker modules, even when they
construct their own checker modules. The interplay results
automatically,  as  all  checker  modules  are  derived  from  a
common base class Module which provides all the machinery
to interface with the rest of the system. Constructing a cus-
tomized checker module thus more or less reduces to only
three tasks:
1.
Specify  the  patterns  to  be  analyzed  in  Backus-Naur
format.
2. Write  one  handler  per  pattern  to  analyze  the  text
fragments found and reported by the parser.
3.
[optional] Write a postprocessing handler to draw the
overall conclusions from all findings of this module.
2.4. Result database
All checker modules store their results in structured for-
mat in an internal result database. The most important con-
cepts in this respect are annotations and views.
Annotations are comments about a certain property of the
router configuration. Every annotation bears a severity tag,
with  tag  values  ranging  from  OKAY, INFO, CHECK, WARN  to
ALERT. This tag indicates whether the annotation refers to a
positive, neutral, unclear, negative, or even critical finding.
The severity of a finding is indicated in the hypertext output
by a corresponding color.
Views gather all findings referring to a common aspect of
the  configuration.  The  handler  programmer  may  freely
define  the  name  and  meaning  of  a  view  and  assign  every
finding to one or more views. Views help to focus subsequent
result  display  on  selected  aspects.  Examples  for  common
views include 'User Authentication', 'Logging', or 'Account-
ing'.
Besides annotations and views, suggestions (e.g., fixes),
references to other findings or external resources, and data
dumps may be stored in the database. A simple programming
interface for all these result types is available to the handler
programmer. Each such result item may pertain either to a
line, an IOS configuration mode1, a logical view, or to the
configuration as a whole.
3. Practical Use
CROCODILE is very easy to install: The software archive
file is unpacked to an arbitrary directory, and may be directly
started from there, provided that a Perl run-time environment
is  present.  All  output  generated  by  CROCODILE  is  stored
below the installation directory, and the tool can be removed
simply by deleting the installation directory. CROCODILE is
invoked by supplying the name of an IOS router configura-
tion file, and produces its output without further user inter-
action as a subdirectory of HTML files ready for viewing.
3.1. Task-specific displays
CROCODILE provides different displays of the evaluation
results  including  overviews,  statistics,  and  topic-oriented
perspectives in the form of the views described above. The
displays are enriched by hyperlinks to related displays and
supplementary information such as automatically generated
Internet links to corresponding entries of the Cisco IOS Com-
1. A  configuration  mode  is  a  scoping  concept  of  the  IOS  command
shell,  gathering  a  number  of  IOS  commands  all  pertaining  to,  for
example, a specific router interface ("interface mode") or serial line
("line mode").
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:22 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2.  Two CROCODILE displays at different levels of detail
mand Reference. Starting from an overview display, the user
can navigate deeper and deeper into specific aspects, with
the displayed scope shrinking and the level of detail increas-
ing. The user may focus on a particular topic by selecting
the  corresponding  view.  Coloring  is  used  to  indicate  the
severity assigned to each finding. Figure 2 shows two typical
examples of such displays, with the one in the background
pertaining to the configuration as a whole, and the upper one
focussing  on  a  specific  configuration  line  (line  19  in  this
case).
3.2. Typical defects uncovered
Feeding the tool with the router configuration file that is
available for an online demonstration on the CROCODILE
homepage, our checker found, among others, the following
exemplary problems:
•
•
•