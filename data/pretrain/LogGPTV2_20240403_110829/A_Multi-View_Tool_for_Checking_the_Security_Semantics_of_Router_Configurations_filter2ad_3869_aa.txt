# A Multi-View Tool for Checking the Security Semantics of Router Configurations

**Authors:**
- Dr. Holger Peine
- Dr. Reinhard Schwarz

**Affiliation:**
Fraunhofer Institute for Experimental Software Engineering, Germany

**Contact:**
{peine, schwarz}@iese.fraunhofer.de

## Abstract
Routers are critical components of IP networks, but there is a lack of tool support for analyzing their security. We have developed CROCODILE, a tool that tracks the security implications of related configuration directives scattered throughout the router’s configuration, rather than analyzing only isolated clauses. CROCODILE offers several novel evaluation capabilities and presents its findings through a collection of multi-view displays, enabling users to focus on specific aspects and navigate deeper into details. We demonstrate the practical use of CROCODILE and compare it with the well-known RAT tool, highlighting its superior capabilities.

## 1. Router Configuration and Security Checking
Today, most enterprises, except the smallest, are connected to the Internet and use IP networks internally. Routers play a fundamental role in these networks by relaying or deliberately not relaying IP packets between source and destination hosts. Modern routers perform additional functions such as filtering, separation, encryption, and monitoring of data streams, and provide various management interfaces for configuration, (remote) maintenance, and monitoring. These functions can affect the availability, integrity, and confidentiality of data connections, making routers highly security-critical network components.

However, configuring a router is a difficult and error-prone task. The available configuration languages are complex and often poorly documented, making errors hard to spot. Therefore, tool support to uncover hidden vulnerabilities in router configurations is highly valuable, as it improves efficiency, effectiveness, objectivity, and repeatability of router security checks. However, few such tools exist, and the existing ones operate at a low level of abstraction with limited evaluation capabilities.

### 1.1. A Tool for Analyzing Router Security
CROCODILE, which stands for "Cisco ROuter COnfiguration DILigent Evaluator," is a router security checker we developed with support from Deutsche Telekom [1]. It parses a router configuration file, checks for potential vulnerabilities, and generates detailed HTML evaluation reports. Many trivial errors and inconsistencies that would easily escape human notice are uncovered, none of which would be flagged by the router itself. CROCODILE's capabilities go beyond purely syntactic analysis:

- **Semantic Analysis:** CROCODILE performs a semantic analysis of the configuration, including the order or omission of clauses and their context. This is possible because the tool analyzes the configuration as a whole, rather than each line in isolation.
- **Task-Specific Displays:** The wealth of evaluation results is presented using various task-specific displays, such as an annotated overview, a differential display relative to an earlier version of the configuration, detailed analyses, statistical data, and hyperlinks to vendor documentation. A particularly useful feature is the computation of the sets of packets effectively accepted ("whiteset") or rejected ("blackset") by the access control list protecting a router interface.
- **Analysis Views:** Findings are logically grouped into different analysis views, allowing users to focus on specific configuration aspects such as authentication or logging. Clauses covered by a view may be scattered across the configuration, and one clause may contribute to several views. During inspection, the user can focus on any particular view, making the reasoning behind the router configuration more transparent.

CROCODILE thus relieves the user from cumbersome low-level work and raises router configuration to a semantic level where the human expert is more adequately supported. None of the router security tools known to us has comparable capabilities.

### 1.2. Cisco Routers and IOS
CROCODILE is currently designed for routers from Cisco Systems, the market leader, running the IOS operating system [2]. However, thanks to the modular design of the tool framework, vendor-specific modules could be replaced to support any text-based configuration format, even for devices other than routers.

Correct use of IOS is a challenging task for network administrators. The options provided by this operating system are numerous and complex, and new IOS versions appear frequently. The syntax of IOS clauses is not very expressive, hardly intuitive, occasionally ambiguous, and often poorly documented. Furthermore, IOS silently ignores erroneous clauses instead of printing an error message. These challenges have made the development of CROCODILE difficult, but the user can now benefit from the effort expended in developing the tool and the knowledge embodied within it.

## 2. CROCODILE Architecture and Operation
In addition to the run-time functionality of logical views and task-specific displays, CROCODILE is an extensible framework providing all the functionality needed for general text-based security checking, while encapsulating specific areas of security evaluation in independent checker modules. Design goals include the configurability of checker modules to adapt to local policies and portability, achieved by implementing CROCODILE in Perl without using any additional libraries.

### 2.1. Components
The tool is composed of three main types of components:
- **Pattern Matching Module (Parser):** Provides input data relevant for the module’s analyses.
- **Checker Modules:** Each covers one logical aspect of router security with all the required checking logic.
- **Database and Display Module:** Generates complex but convenient hypertext documents from the findings.

### 2.2. Operation
The basic operation of the tool is as follows:
- **Pattern Registration:** The parser initially polls all configured checker modules, retrieving a set of text patterns each module is interested in. These patterns are described in Backus-Naur Form, similar to the format in Cisco documentation [2].
- **Configuration Parsing:** The parser reads an IOS router configuration file, parses it line by line, and finds lines matching registered patterns. When a match is found, the parser notifies the relevant checker modules and supplies the matching line in various formats.
- **Handler Execution:** When a module receives a notification, it executes a pattern handler associated with the pattern. The handler contains all checking and evaluation steps to be performed on each occurrence of the pattern, building a comprehensive view spanning multiple lines.
- **Result Storage:** The invocation of each handler returns a checking result and possibly additional comments, which are stored in structured format in an internal database.
- **Overall Conclusions:** After processing all lines, the parser polls each module for its overall conclusions, enabling the construction of an integrated view of the aspects interesting to them.
- **Report Generation:** The complete result database is stored in XML format and used to generate integrated HTML hypertext reports viewable with any conventional web browser.

CROCODILE comes with a collection of standard checker modules that cover fundamental security aspects of router configurations, which will be described in Section 3.4.

### 2.3. Construction of Custom Checker Modules
Users do not typically interact with the interface between the parser and the checker modules, even when constructing their own modules. The interplay is automatic, as all checker modules are derived from a common base class `Module`, which provides the necessary machinery to interface with the rest of the system. Constructing a customized checker module involves:
1. Specifying the patterns to be analyzed in Backus-Naur format.
2. Writing one handler per pattern to analyze the text fragments reported by the parser.
3. [Optional] Writing a postprocessing handler to draw overall conclusions from the module's findings.

### 2.4. Result Database
All checker modules store their results in structured format in an internal result database. Key concepts include annotations and views:
- **Annotations:** Comments about a certain property of the router configuration, each bearing a severity tag (OKAY, INFO, CHECK, WARN, ALERT).
- **Views:** Gather all findings referring to a common aspect of the configuration, helping to focus subsequent result display on selected aspects. Examples include 'User Authentication', 'Logging', or 'Accounting'.

Besides annotations and views, the database can store suggestions, references to other findings or external resources, and data dumps. A simple programming interface is available for all these result types.

## 3. Practical Use
CROCODILE is easy to install: unpack the software archive to any directory, and start it directly from there, provided a Perl runtime environment is present. All output is stored below the installation directory, and the tool can be removed by deleting the directory. CROCODILE is invoked by supplying the name of an IOS router configuration file and produces its output as a subdirectory of HTML files ready for viewing.

### 3.1. Task-Specific Displays
CROCODILE provides different displays of the evaluation results, including overviews, statistics, and topic-oriented perspectives in the form of views. The displays are enriched with hyperlinks to related displays and supplementary information, such as automatically generated links to corresponding entries in the Cisco IOS Command Reference. Users can navigate deeper into specific aspects, with the displayed scope shrinking and the level of detail increasing. Figure 2 shows two typical examples of such displays, with the background display pertaining to the entire configuration and the upper one focusing on a specific configuration line (line 19 in this case).

### 3.2. Typical Defects Uncovered
Using the router configuration file available for an online demonstration on the CROCODILE homepage, our checker found, among others, the following exemplary problems:
- [List of specific problems and examples here]

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.