We are “into” helping others 
reach the security summit…
Andrew Gavin : Verizon Business
Michael Baucom : N2 Net Security, Inc
Charles Smith : N2 Net Security, Inc
 Brief recap of OpenDLP
 Goals of new Meterpreter feature
 Decisions behind using OpenDLP and 
Metasploit
 Architecture and changes
 Architecture and changes
 Live demos
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
2
 OpenDLP is a data discovery tool for 
filesystems and databases
 Free and open source (GPLv3)
 It has support for agent scanning (Windows) 
or agentless scanning (Windows/UNIX/DBs)
or agentless scanning (Windows/UNIX/DBs)
 Uses profiles to scan systems/DBs:
◦ Administrative credentials
◦ Whitelist/blacklist files/directories
◦ Regular expressions to use when searching for data
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
3
 Today will concentrate on agent scanning
 Old method:
◦ User configures profile and enters list of IPs to scan
◦ OpenDLP webapp pushes agent to Windows boxes 
over SMB
over SMB
◦ Agent starts as a Windows service at low priority
◦ Agent scans directories/files based on profile
◦ Agent phones home every X seconds with results
◦ When agent is done, webapp uninstalls it
◦ Can view results, mark false positives, export XML
 Live demo of agent scanning
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
4
 In order to deploy to multiple systems with a 
single profile, you must have domain admin 
credentials or the hash
 If you don’t have domain admin credentials, 
you need to create a profile for each system 
you need to create a profile for each system 
with different passwords or hashes (must be 
a system account due to service interactions)
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
5
 Need to have the ability to search 
compromised machines for PII with or without 
having credentials
 The tool must have minimal impact on the 
users of the machines compromised
users of the machines compromised
 The tool must cleanup deployed files after it 
has finished searching
 The tool must minimize the risks associated 
with leaking the data
 The tool must use freely available software
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
6
 What better tools to use than we ones we’ve
been using already
 OpenDLP for scanning and viewing the results
 Metasploit for compromising the systems
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
7
 Since we are performing a Pentest and using 
Metasploit to gain access to machines, can we 
leverage Metasploit to deploy OpenDLP?
◦ Not as OpenDLP exists, we must have credentials or 
hashes
hashes
◦ Even with hashdump, we cannot guarantee that we 
get a domain admin account
◦ While we can use system accounts, it is too 
cumbersome to create a profile per machine
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
8
 Rather than using Metasploit to get the 
credentials (and copying them manually into 
a profile) why not simply use Metasploit for 
deployment?
 Metasploit meterpreter sessions provide the 
ability to:
ability to:
◦ Upload/download files
◦ Execute programs on the target
◦ Manage Services
 Metasploit RPC provides a mechanism to 
drive from remote
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
9
 Openly available Exploit Framework that 
many Pentesters use, including us
 Has an RPC interface that allows another tool 
to list compromised systems and interact 
with them
with them
 Many routines that allow you to deploy 
services, elevate privileges, download/upload 
files, and execute applications on the target
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
10
 The OpenDLP Metasploit Bridge gives 
OpenDLP the ability to use Metasploit 
sessions to deploy the agent scanner
 Allows the user to create a single profile for 
windows Metasploit sessions regardless of 
windows Metasploit sessions regardless of 
the credentials necessary for the machines
 All features of the current OpenDLP 
deployment are available via Metasploit 
Sessions
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
11
Metasploit RPC Server
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
12
Pentester
Target
RPC
RPC
RPC
RPC
 Modifications to the OpenDLP web pages to 
include Metasploit Integration
 Creation of a Metasploiter perl module to 
handle interacting with Metasploit RPC to 
include console interaction
include console interaction
 Metasploit Post Module that handles
deployment of the OpenDLP agent, including 
uploading files, service management, 
configuration passing, and downloading files.
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
13
 Since OpenDLP is written in perl, I needed a perl
module to communicate with Metasploit 
 Stand-alone perl module to interact with 
meterpreter sessions from any perl program
 Parses RPC responses so you don’t have to
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
14
 Login and acquire persistent credentials
 Get Metasploit version
 Get list of sessions (and details about each session)
 Interact with sessions via meterpreter read and 
writes (Synchronous writes too)
 Upload/download files between Metasploit and 
 Upload/download files between Metasploit and 
target session
 Create and change remote path (on target system)
 Change local (to Metasploit) path
 Remotely execute apps on the target (opens a 
channel and wait for the results)
 Check if connected to Armitage console
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
15
 Logon to Metasploit and acquire persistent auth
token
use Strict;
use MetaSploiter;
my $ret_code = 0;
my $metaSploiter = MetaSploiter->new();
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
16
if ($ret_code = $metaSploiter->MetaLogin(“192.168.1.100”, # host
55552, 
# port
“msf”, 
# user
“f00bar”, 
# password
1) )             # 0=plaintext 1=SSL
{
die($metaSploiter->GetLastError());
}
print "Logged in (Temporary token: " . $metaSploiter->GetAuthToken() . ").\n";
if ($ret_code = $metaSploiter->AcquirePersistentToken()) { 
die($metaSploiter->GetLastError());
}
print "Acquired persistent token: ". $metaSploiter->GetAuthToken() . ".\n";
 Retrieve the session list
if ($ret_code = $metaSploiter->ListSessions()) { 
die($metaSploiter->GetLastError());
}
my @sessionList = $metaSploiter->GetSessionList(); 
my $countTo = scalar(@sessionList);
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
17
my $countTo = scalar(@sessionList);
print "Current active sessions: $countTo\n";
if ($countTo > 0) {
print "Displaying sessions...\n";    
for (my $i = 0; $i sessionName .": ";
print $sessionList[$i]->target_host
. " - " . $sessionList[$i]->info . "\n";    
}
} 
◦ Print the Metasploit version
◦ Change the remote path in a session and print it
◦ Release the persistent token to finish
print "Current Metasploit Version: " . $metaSploiter->GetMetasploitVersion() . "\n";
my $sessionId = 5;  #Assuming for this demo that session 5 exists.
if ($ret_code = $metaSploiter->ChangeRemotePath($sessionId, "c:/program files") ) {
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
18
if ($ret_code = $metaSploiter->ChangeRemotePath($sessionId, "c:/program files") ) {
die($metaSploiter->GetLastError());
}
if ($ret_code = $metaSploiter->SendAndWait($sessionId, "pwd")) {
die($metaSploiter->GetLastError());
}
print "Current path on session $sessionId: " . $metaSploiter->GetCommandResponse();
if ($ret_code = $metaSploiter->ReleasePersistentToken()) { 
die($metaSploiter->GetLastError());
}
print "Released persistent token.\n";   
print "Done.\n\n";
◦ Output from this small application looks like this:
Logged in (Temporary token: TEMPOTr5B1HpCzCJpTfIgYAH2uQBROoT).
Acquired persistent token: SjyBUZYLxvDRRfoyp3DdDsomEwWdMJaC.
Current active sessions: 3
Displaying sessions...
Session 6: 192.168.1.109 - NT AUTHORITY\SYSTEM @ GAETA
Session 5: 192.168.1.102 - NT AUTHORITY\SYSTEM @ ADAMA
Session 3: 192.168.1.105 - NT AUTHORITY\SYSTEM @ DUALLA
Current Metasploit Version: 4.3.0-dev
Note: The above demo code above showcases just a subset of the 
functionality available inside the MetaSploiter package. 
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
19
Current Metasploit Version: 4.3.0-dev
Current path on session 5: c:\program files
Released persistent token.
Done.
 Uses the Meterpreter RPC commands 
◦ Access to Meterpreter sessions is not synchronized
◦ Unable to match a response to a particular command, or to 
a particular user
 one user sends a “pwd” and another attempts to cat a file at the 
same time, whoever reads first will get the data, and it will likely 
same time, whoever reads first will get the data, and it will likely 
not be the expected response
◦ Therefore, more than one application cannot access the 
same meterpreter session at the same time. This means 
applications using the MetaSploiter module, or even using 
meterpreter from a Metasploit console.
◦ Files must be downloaded to the Metasploit box and 
retrieved manually (no direct download through RPC)
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
20
4
C.E.S.1
Slide 20
4 
Is this correct?  You will have a difficult audience.  Make sure that the console has issues also.
Michael, 5/1/2012
C.E.S.1 
Reworded that paragraph to be less confusing
Charles Smith, 5/22/2012
 Previous weaknesses mean that MetaSploiter and 
Armitage do not play nicely
 Armitage’s mutiplexing of commands and sharing 
sessions does not work for non-Armitage clients
◦ Armitage command responses may be unintentionally 
intercepted by MetaSploiter, and MetaSploiter commands 
intercepted by MetaSploiter, and MetaSploiter commands 
will cause Armitage to miss (or misinterpret) expected 
responses
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
21
2
C.E.S.2
Slide 21
2 
Make sure this statement is correct.  I believe it is correct, but did you actually experience this?
Michael, 5/1/2012
C.E.S.2 
Yes, I tested this. If I'm running armitage and I connect to meterpreter and start sending commands, armitage will get confused. If I create a simple
app that constantly reads from meterpreter and does nothing but consume, then armitage will timeout or not display complete results because 