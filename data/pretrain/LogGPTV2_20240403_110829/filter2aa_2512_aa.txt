# Post-Exploitation Nirvana: Launching OpenDLP Agents over Meterpreter Sessions

## Introduction
We are dedicated to helping others reach the pinnacle of security. This presentation will cover the integration of OpenDLP with Metasploit's Meterpreter for efficient and effective post-exploitation data discovery.

**Presenters:**
- Andrew Gavin, Verizon Business
- Michael Baucom, N2 Net Security, Inc.
- Charles Smith, N2 Net Security, Inc.

### Agenda
1. Brief recap of OpenDLP
2. Goals of the new Meterpreter feature
3. Decisions behind using OpenDLP and Metasploit
4. Architecture and changes
5. Live demos

## Overview of OpenDLP
OpenDLP is a free and open-source (GPLv3) data discovery tool designed for filesystems and databases. It supports both agent-based scanning (Windows) and agentless scanning (Windows, UNIX, and databases). The tool uses profiles to scan systems and databases, which include:
- Administrative credentials
- Whitelist/blacklist files and directories
- Regular expressions for data search

## Focus on Agent Scanning
Today, we will concentrate on agent-based scanning. Traditionally, this process involves:
1. Configuring a profile and listing IPs to scan.
2. Pushing the agent to Windows machines via SMB.
3. Starting the agent as a low-priority Windows service.
4. Scanning directories and files based on the profile.
5. Sending results back every X seconds.
6. Uninstalling the agent upon completion.
7. Viewing results, marking false positives, and exporting XML.

### Live Demo of Agent Scanning

## Deployment Challenges
To deploy to multiple systems with a single profile, domain admin credentials or their hashes are required. Without these, a separate profile must be created for each system with different passwords or hashes, necessitating a system account due to service interactions.

## Requirements for Post-Exploitation
1. Ability to search compromised machines for PII with or without credentials.
2. Minimal impact on users of the compromised machines.
3. Cleanup of deployed files after scanning.
4. Minimization of risks associated with data leakage.
5. Use of freely available software.

## Leveraging Existing Tools
Given our familiarity with OpenDLP and Metasploit, it makes sense to integrate them. OpenDLP handles scanning and result viewing, while Metasploit facilitates system compromise.

### Metasploit Integration
- **Current Limitations:**
  - OpenDLP requires credentials or hashes.
  - Hashdump does not guarantee domain admin access.
  - Creating a profile per machine is cumbersome.

- **Proposed Solution:**
  - Use Metasploit's Meterpreter sessions to deploy OpenDLP.
  - Metasploit provides capabilities such as file upload/download, program execution, and service management.

### Metasploit RPC Interface
Metasploit's RPC interface allows:
- Listing compromised systems.
- Interacting with targets.
- Deploying services, elevating privileges, and executing applications.

### OpenDLP Metasploit Bridge
The OpenDLP Metasploit Bridge enables:
- Deployment of the agent scanner using Meterpreter sessions.
- Creation of a single profile for Windows Meterpreter sessions, regardless of necessary credentials.
- Full functionality of OpenDLP through Metasploit sessions.

### Metasploit RPC Server
- **Pentester:**
  - Log in and acquire persistent credentials.
  - Get Metasploit version.
  - List and interact with sessions.
  - Upload/download files.
  - Execute remote applications.
  - Check Armitage console connection.

- **Target:**
  - Communicate with the Metasploit RPC server.

### Perl Module for Metasploit Interaction
A standalone Perl module, `MetaSploiter`, was developed to:
- Interact with Meterpreter sessions from any Perl program.
- Parse RPC responses.

### Example Code
```perl
use strict;
use MetaSploiter;

my $ret_code = 0;
my $metaSploiter = MetaSploiter->new();

if ($ret_code = $metaSploiter->MetaLogin("192.168.1.100", 55552, "msf", "f00bar", 1)) {
    die($metaSploiter->GetLastError());
}

print "Logged in (Temporary token: " . $metaSploiter->GetAuthToken() . ").\n";
if ($ret_code = $metaSploiter->AcquirePersistentToken()) { 
    die($metaSploiter->GetLastError());
}

print "Acquired persistent token: " . $metaSploiter->GetAuthToken() . ".\n";

if ($ret_code = $metaSploiter->ListSessions()) { 
    die($metaSploiter->GetLastError());
}

my @sessionList = $metaSploiter->GetSessionList(); 
my $countTo = scalar(@sessionList);
print "Current active sessions: $countTo\n";

if ($countTo > 0) {
    print "Displaying sessions...\n";    
    for (my $i = 0; $i < $countTo; $i++) {
        print "Session " . $sessionList[$i]->sessionName . ": ";
        print $sessionList[$i]->target_host . " - " . $sessionList[$i]->info . "\n";    
    }
}

print "Current Metasploit Version: " . $metaSploiter->GetMetasploitVersion() . "\n";

my $sessionId = 5;  # Assuming for this demo that session 5 exists.
if ($ret_code = $metaSploiter->ChangeRemotePath($sessionId, "c:/program files")) {
    die($metaSploiter->GetLastError());
}

if ($ret_code = $metaSploiter->SendAndWait($sessionId, "pwd")) {
    die($metaSploiter->GetLastError());
}

print "Current path on session $sessionId: " . $metaSploiter->GetCommandResponse();

if ($ret_code = $metaSploiter->ReleasePersistentToken()) { 
    die($metaSploiter->GetLastError());
}

print "Released persistent token.\n";   
print "Done.\n\n";
```

### Output
```
Logged in (Temporary token: TEMPOTr5B1HpCzCJpTfIgYAH2uQBROoT).
Acquired persistent token: SjyBUZYLxvDRRfoyp3DdDsomEwWdMJaC.
Current active sessions: 3
Displaying sessions...
Session 6: 192.168.1.109 - NT AUTHORITY\SYSTEM @ GAETA
Session 5: 192.168.1.102 - NT AUTHORITY\SYSTEM @ ADAMA
Session 3: 192.168.1.105 - NT AUTHORITY\SYSTEM @ DUALLA
Current Metasploit Version: 4.3.0-dev
Current path on session 5: c:\program files
Released persistent token.
Done.
```

### Known Issues
- **RPC Command Synchronization:**
  - Access to Meterpreter sessions is not synchronized.
  - Responses may be mismatched if multiple commands are sent simultaneously.
  - Only one application can access a Meterpreter session at a time.
  - Files must be downloaded to the Metasploit box and retrieved manually.

- **Armitage Compatibility:**
  - Armitage's multiplexing and session sharing do not work well with non-Armitage clients.
  - Commands may be unintentionally intercepted, leading to confusion and incomplete results.

### Conclusion
By integrating OpenDLP with Metasploit's Meterpreter, we can efficiently and effectively perform post-exploitation data discovery. This approach leverages the strengths of both tools to meet the requirements of minimal impact, secure cleanup, and reliable data handling.