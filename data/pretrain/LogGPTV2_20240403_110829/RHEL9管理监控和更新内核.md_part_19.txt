9.  确定您要控制同一 CPU 中 CPU 时间竞争的进程：
    ``` literallayout
    # echo "1" > /sys/fs/cgroup/Example/tasks/cpuset.cpus
    ```
    前一个命令可确保您将放入 `Example/tasks`{.literal}
    子控制组中的进程，在同一 CPU 上竞争。此设置对于 `cpu`{.literal}
    控制器激活很重要。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    只有相关的子组至少有 2 个进程在单个 CPU 上竞争时，才会激活
    `cpu`{.literal} 控制器。
    :::
:::
::: orderedlist
**验证步骤**
1.  可选：确保为直接子 cgroup 启用与 CPU 相关的控制器：
    ``` literallayout
    # cat /sys/fs/cgroup/cgroup.subtree_control /sys/fs/cgroup/Example/cgroup.subtree_control
    cpuset cpu memory pids
    cpuset cpu
    ```
2.  可选：确保您控制在同一 CPU 上 CPU 时间竞争的进程：
    ``` literallayout
    # cat /sys/fs/cgroup/Example/tasks/cpuset.cpus
    1
    ```
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   [挂载
    cgroups-v2](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#mounting-cgroups-v2_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "挂载 cgroups-v2"){.link}
-   `cgroups(7)`{.literal}、`sysfs(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#proc_controlling-distribution-of-cpu-time-for-applications-by-adjusting-cpu-bandwidth_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications}通过调整 CPU 带宽来控制应用程序的 CPU 时间 {.title}
:::
您需要为 `cpu`{.literal} 控制器的相关文件分配值，以规范特定 cgroup
树下的应用程序分布 CPU 时间。
::: itemizedlist
**先决条件**
-   有 root 权限。
-   您至少有两个应用程序要控制 CPU 时间分布。
-   请确定相关的应用程序在相同的 CPU 上竞争 CPU 时间，如[准备 cgroup
    以分配 CPU
    时间](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#preparing-the-cgroup-for-distribution-of-cpu-time_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "为 CPU 时间的发布准备 cgroup"){.link}
    所述。
-   您可以挂载 `cgroups-v2`{.literal} 文件系统，如 [挂载
    cgroups-v2](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#mounting-cgroups-v2_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "挂载 cgroups-v2"){.link}
    所述。
-   您在父控制组和子控制组中启用了 `cpu`{.literal} 和 `cpuset`{.literal}
    控制器，如[准备 cgroup 以分配 CPU
    时间](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#preparing-the-cgroup-for-distribution-of-cpu-time_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "为 CPU 时间的发布准备 cgroup"){.link}中所述。
-   您在 `/sys/fs/cgroup/`{.literal} [*root
    控制组群*]{.emphasis}中创建了两个级别的[*子组*]{.emphasis}，如下例所示：
    ``` literallayout
    …​
      ├── Example
      │   ├── tasks
    …​
    ```
:::
::: orderedlist
**步骤**
1.  配置 CPU 带宽，以在控制组群内实现资源限值：
    ``` literallayout
    # echo "200000 1000000" > /sys/fs/cgroup/Example/tasks/cpu.max
    ```
    第一个值是允许以微秒表示的所有进程的允许时间配额，所有进程在一个期间内均可运行。第二个值指定周期的长度。
    在单个时间段内，当控制组中的进程一起耗尽这个配额指定的时间时，它们将在剩余周期内进行限速，在下一个周期内不允许运行。
    此命令设置 CPU 时间分配控制，以便集中在
    `/sys/fs/cgroup/Example/tasks`{.literal} 子组中的所有进程，每 1
    秒只有 0.2 秒的 CPU 运行时间。也就是说，每秒的五分之一。
2.  另外，还可验证时间配额：
    ``` literallayout
    # cat /sys/fs/cgroup/Example/tasks/cpu.max
    200000 1000000
    ```
3.  将应用程序的 PID 添加到 `Example/tasks`{.literal} 子组中：
    ``` literallayout
    # echo "34578" > /sys/fs/cgroup/Example/tasks/cgroup.procs
    # echo "34579" > /sys/fs/cgroup/Example/tasks/cgroup.procs
    ```
    示例命令可确保，相关应用成为 `Example/tasks`{.literal}
    子组的成员，它不会超过为此子组配置的 CPU 时间分配。
:::
::: orderedlist
**验证步骤**
1.  验证应用程序是否在指定的控制组群中运行：
    ``` literallayout
    # cat /proc/34578/cgroup /proc/34579/cgroup
    0::/Example/tasks
    0::/Example/tasks
    ```
    上面的输出显示在 `Example/tasks`{.literal}
    子组中运行的指定应用程序的进程。
2.  检查节流应用程序的当前 CPU 消耗：
    ``` literallayout
    # top
    top - 11:13:53 up 23:10,  1 user,  load average: 0.26, 1.33, 1.66
    Tasks: 104 total,   3 running, 101 sleeping,   0 stopped,   0 zombie
    %Cpu(s):  3.0 us,  7.0 sy,  0.0 ni, 89.5 id,  0.0 wa,  0.2 hi,  0.2 si,  0.2 st
    MiB Mem :   3737.4 total,   3312.6 free,    133.4 used,    291.4 buff/cache
    MiB Swap:   4060.0 total,   4060.0 free,      0.0 used.   3376.0 avail Mem
        PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
      34578 root      20   0   18720   1756   1468 R  10.0   0.0  37:36.13 sha1sum
      34579 root      20   0   18720   1772   1480 R  10.0   0.0  37:41.22 sha1sum
          1 root      20   0  186192  13940   9500 S   0.0   0.4   0:01.60 systemd
          2 root      20   0       0      0      0 S   0.0   0.0   0:00.01 kthreadd
          3 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_gp
          4 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_par_gp
    ...
    ```
    请注意，`PID 34578`{.literal} 和 `PID 34579`{.literal} 的 CPU
    消耗减少了 10%。`Example/tasks`{.literal} 子组限制了它的进程具有 CPU
    时间的 20%。由于控制组中有 2 个进程，因此每个进程都可以使用 CPU
    时间的 10%。
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   [挂载
    cgroups-v2](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#mounting-cgroups-v2_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "挂载 cgroups-v2"){.link}
-   [为 CPU 时间的发布准备
    cgroup](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#preparing-the-cgroup-for-distribution-of-cpu-time_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "为 CPU 时间的发布准备 cgroup"){.link}
-   `cgroups(7)`{.literal}、`sysfs(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#proc_controlling-distribution-of-cpu-time-for-applications-by-adjusting-cpu-weight_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications}通过调整 CPU 权重来控制应用程序的 CPU 时间 {.title}
:::
您需要为 `cpu`{.literal} 控制器的相关文件分配值，以规范特定 cgroup
树下的应用程序分布 CPU 时间。
::: itemizedlist
**先决条件**
-   有 root 权限。
-   您有要控制 CPU 时间分布的应用程序。
-   请确定相关的应用程序在相同的 CPU 上竞争 CPU 时间，如[准备 cgroup
    以分配 CPU
    时间](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#preparing-the-cgroup-for-distribution-of-cpu-time_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "为 CPU 时间的发布准备 cgroup"){.link}
    所述。
-   您可以挂载 `cgroups-v2`{.literal} 文件系统，如 [挂载
    cgroups-v2](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#mounting-cgroups-v2_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "挂载 cgroups-v2"){.link}
    所述。
-   您在 `/sys/fs/cgroup/`{.literal} [*root
    控制组群*]{.emphasis}中创建两个级别的[*子控制组群*]{.emphasis}，如下例所示：
    ``` literallayout
    …​
      ├── Example
      │   ├── g1
      │   ├── g2
      │   └── g3
    …​
    ```
-   您在父控制组和子控制组中启用了 `cpu`{.literal} 和 `cpuset`{.literal}
    控制器，类似于[准备 cgroup 以分配 CPU
    时间](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#preparing-the-cgroup-for-distribution-of-cpu-time_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "为 CPU 时间的发布准备 cgroup"){.link}中所述。
:::
::: orderedlist
**步骤**
1.  配置 CPU 权重以在控制组群内实现资源限制：
    ``` literallayout
    # echo "150" > /sys/fs/cgroup/Example/g1/cpu.weight
    # echo "100" > /sys/fs/cgroup/Example/g2/cpu.weight
    # echo "50" > /sys/fs/cgroup/Example/g3/cpu.weight
    ```
2.  将应用程序的 PID 添加到 `g1`{.literal}、`g2`{.literal} 和
    `g3`{.literal} 子组中：
    ``` literallayout
    # echo "33373" > /sys/fs/cgroup/Example/g1/cgroup.procs
    # echo "33374" > /sys/fs/cgroup/Example/g2/cgroup.procs
    # echo "33377" > /sys/fs/cgroup/Example/g3/cgroup.procs
    ```
    示例命令可确保所需的应用程序成为 `Example/g*/`{.literal} 子 cgroups
    的成员，且不超过为这些子 cgroups 配置的分配控制。
    已在运行的子 cgroups (`g1`{.literal}, `g2`{.literal},
    `g3`{.literal}) 的权重在父 cgroup (`Example`{.literal})
    一级计算其总和。然后，CPU 资源会根据对应的权重按比例分发。
    因此，当所有进程都同时运行时，内核会根据相应 cgroup 的
    `cpu.weight`{.literal} 文件为每个进程分配相应比例的 CPU 时间：
    ::: informaltable
      子 cgroup   `cpu.weight`{.literal} 文件   CPU 时间分配
      ----------- ----------------------------- -----------------
      g1          150                           \~50% (150/300)
      g2          100                           \~33% (100/300)
      g3          50                            \~16% (50/300)
    :::
    `cpu.weight`{.literal} 控制器文件的值不是一个百分比。
    如果一个进程停止运行，造成 cgroup `g2`{.literal}
    中没有运行的进程，则计算将省略 cgroup `g2`{.literal}，仅根据 cgroup
    `g1`{.literal} 和 `g3`{.literal} 进行计算：
    ::: informaltable
      子 cgroup   `cpu.weight`{.literal} 文件   CPU 时间分配
      ----------- ----------------------------- -----------------
      g1          150                           \~75% (150/200)
      g3          50                            \~25% (50/200)
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    如果子 cgroup 有多个正在运行的进程，分配给相应 cgroup 的 CPU
    时间将平均分配到该 cgroup 的成员进程。
    :::
:::
::: orderedlist
**验证**
1.  验证应用程序是否在指定的控制组群中运行：
    ``` literallayout
    # cat /proc/33373/cgroup /proc/33374/cgroup /proc/33377/cgroup
    0::/Example/g1
    0::/Example/g2
    0::/Example/g3
    ```
    命令输出显示了在 `Example/g*/`{.literal} 子 cgroups
    中运行的特定应用程序的进程。
2.  检查节流应用程序的当前 CPU 消耗：
    ``` literallayout
    # top
    top - 05:17:18 up 1 day, 18:25,  1 user,  load average: 3.03, 3.03, 3.00
    Tasks:  95 total,   4 running,  91 sleeping,   0 stopped,   0 zombie
    %Cpu(s): 18.1 us, 81.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.3 hi,  0.0 si,  0.0 st
    MiB Mem :   3737.0 total,   3233.7 free,    132.8 used,    370.5 buff/cache
    MiB Swap:   4060.0 total,   4060.0 free,      0.0 used.   3373.1 avail Mem
        PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
      33373 root      20   0   18720   1748   1460 R  49.5   0.0 415:05.87 sha1sum
      33374 root      20   0   18720   1756   1464 R  32.9   0.0 412:58.33 sha1sum
      33377 root      20   0   18720   1860   1568 R  16.3   0.0 411:03.12 sha1sum
        760 root      20   0  416620  28540  15296 S   0.3   0.7   0:10.23 tuned
          1 root      20   0  186328  14108   9484 S   0.0   0.4   0:02.00 systemd
          2 root      20   0       0      0      0 S   0.0   0.0   0:00.01 kthread
    ...
    ```
    请注意，`PID 33373`{.literal}、`PID 33374`{.literal} 和
    `PID 33377`{.literal} 的 CPU 资源根据权重 150、100、50
    分配的。权重对应于每个应用程序的 50%、33% 和 16% 的 CPU 时间。
:::
::: itemizedlist
**其他资源**
-   [了解控制组群](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#understanding-control-groups_setting-limits-for-applications "了解控制组群"){.link}
-   [内核资源控制器](#setting-limits-for-applications_managing-monitoring-and-updating-the-kernel.html#what-kernel-resource-controllers-are_setting-limits-for-applications "内核资源控制器"){.link}
-   [挂载
    cgroups-v2](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#mounting-cgroups-v2_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "挂载 cgroups-v2"){.link}
-   [为 CPU 时间的发布准备
    cgroup](#using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel.html#preparing-the-cgroup-for-distribution-of-cpu-time_using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications "为 CPU 时间的发布准备 cgroup"){.link}
-   [资源分配模型](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html#resource-distribution-models){.link}
-   `cgroups(7)`{.literal}、`sysfs(5)`{.literal} 手册页
:::
:::
:::
[]{#using-control-groups-version-1-with-systemd_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage