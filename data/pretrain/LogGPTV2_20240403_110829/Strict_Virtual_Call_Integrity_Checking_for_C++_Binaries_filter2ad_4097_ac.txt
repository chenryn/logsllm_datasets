object’s vtable, where both vtables are valid for the vcall
site. The layout checks validate the information extracted
in Section 4.3, i.e., the contents of all involved vtables and
oﬀsets of subobjects from each this pointer.
In our prototype implementation, the deﬁnitions of the
policy enforcement procedures are exported in a dynamic
library (libvci) that VCI injects into the binary. At run-
time, libvci linearly checks the policy conditions on the valid
classes set of v, i.e., {C [Lv[i]] | i ∈ 1 . . .|Lv|}, where |Lv| ≤
|C|. A potential performance improvement is to add a sublin-
ear index, such as using binary search over vtable addresses
whenever lg |C| < |Lv|, or a read-only hash table that maps
vtable addresses to classes. We decided to go with linear
constant arrays for simplicity and to avoid unintentionally
introducing writable memory or more attack points.
5. EVALUATION
In our evaluation of VCI, we answer the following:
1) How accurately can VCI identify vtables and vcalls? Sec-
tion 5.1.
2) How precise and eﬀective is the policy enforced by VCI,
compared to both binary and source-based state-of-
the-art C++ defenses? Section 5.2.
3) How much runtime overhead do binaries protected by
VCI incur? Section 5.3.
All experiments were conducted with GCC 4.8.2 on Ubuntu
14.04.1, running on 2.5GHz Intel Core i7 with 16GB RAM.
The results are reported for -m32 and -O2 optimization, but
we observed similar results at other optimization levels.
5.1 Identiﬁcation Accuracy
We compiled the C++ SPEC CPU2006 benchmarks and
the C++ Firefox modules3 with debug and symbol infor-
mation, then counted the number of nonempty vtables by
parsing the output of the `objdump -Ct` command, which
demangles and dumps the symbol table entries of a binary.
That count is used as the ground truth. We then compiled
the same programs without debug and symbol information,
processed them by VCI, counted the number of extracted
vtables and compared to the ground truth. Here, FNs (miss-
ing a vtable) are not desired, while FPs are acceptable since
the policy is enforced at vcall sites rather than the vtables
themselves.
In other words, falsely identiﬁed vtables will
not result in FPs at runtime, but in lower precision during
the identiﬁcation of vcall targets.
We also report the count of vcalls in each binary, and
compare that to the ground truth from GCC VTV. VTV
inserts checks at each vcall site in the binary to validate its
vtable. We compiled each of the test programs with and
without VTV, and matched the call sites that contained
VTV checks against the vcall sites identiﬁed by VCI. Note
that, unlike vtables, falsely identiﬁed vcalls may result in
runtime crashes. Thus, FPs in terms of vcalls are undesired,
or else the enforced policy would be unsound. On the other
hand, FNs (missed vcalls) do not sway the soundness of the
policy, rather they reduce its precision.
Table 1 shows the breakdown of our analysis. VCI did
not miss any legitimate vtable in the binaries, achieving zero
FNs. It incorrectly identiﬁed some memory blocks as vtables
in ﬁve out of the 13 binaries, resulting in FPs between 0.04%
and 3.33%. In terms of vcalls, VCI did not report any FPs,
but it had some FNs (missed vcalls) between 0.32% and
2.18%. These results indicate that VCI shall be sound, but
not perfectly precise (not complete) due to the missed vcalls
and the overestimated vtables. We quantify the precision of
VCI in the following section.
5.2 Security Effectiveness
5.2.1 Policy Precision
Quantifying the eﬀectiveness of a defense system is a dif-
ﬁcult task. Recent work by Zhang et al. [45] introduced the
Average Indirect-Target Reduction (AIR) metric as a quan-
titative measure of the security introduced by a defense.
We understand that the AIR metric has been questioned
by the community [8], primarily since it does not quantify
the usefulness of the remaining targets from the attacker’s
perspective. However, for the sake of comparison with sim-
ilar defenses, we use an AIR-based metric to evaluate VCI.
We concede that a better evaluation metric is needed, al-
beit outside the scope of this work. Developing a conclusive
security metric is a very challenging task, especially when
dealing with whole functions as in the case of VCI. To give
conclusive results, we also compare the precision of VCI to
that of GCC VTV, the state-of-the-art source-based vtable
defense.
In the context of VCI, we are only interested in defending
vcalls, which are forward-edge control transfers. Therefore,
we only compute the average number of vcall targets over all
vcalls. We protected the C++ SPEC CPU2006 benchmarks
and the C++ Firefox modules, and computed the average
3For the non-C++ FireFox modules, VCI did not identify
any vtables in the binaries and aborted the analysis without
modiﬁcation to the binaries.
146Table 1: Analysis result of the C++ SPEC CPU2006 benchmarks (top) and the C++ Firefox modules (bottom),
including the analysis time in seconds, number of identiﬁed vtables and vcalls, and the identiﬁcation accuracy.
Program
#Insns
444.namd
447.dealII
450.soplex
453.povray
471.omnetpp
473.astar*
483.xalancbmk
91k
789k
110k
256k
166k
12k
1m
Analysis
Time
(sec.)
22.8
193.2
128.4
143.4
207.5
0.2
329.6
Ground
Truth
4
732
30
30
114
1
962
Identiﬁed Vtables
Identiﬁed Vcalls
VCI
4
736
30
31
114
1
971
%FP %FN Ground
Truth
2
936
522
129
710
0
9201
0.00%
0.55%
0.00%
3.33%
0.00%
0.00%
0.94%
0
0
0
0
0
0
0
VCI %FP %FN
2
916
511
127
706
0
9134
0
0
0
0
0
-
0
0.00%
2.18%
2.15%
1.57%
0.57%
-
0.73%
0.00%
liblgbllibs.so
1.46%
libmozgnome.so
0.32%
libmozjs.so
0.49%
libxul.so
1.50%
libzmq.so
0.00%
updater
* We manually inspected 473.astar and found that it contained 4 indirect calls, none of which were vcalls.
12.3
134.7
510.4
2973.6
108.2
15.3
0.00%
0.00%
1.14%
0.04%
0.00%
0.00%
63
209
3796
79703
135
8
8
24
1230
14465
67
8
8
24
1244
14471
67
8
9k
53k
2m
27m
122k
31k
0
0
0
0
0
0
63
206
3784
79315
133
8
0
0
0
0
0
0
number of targets per vcall. Then, we computed the pre-
cision of the policy as the percent reduction in the average
number of vcall targets, compared to the source-based de-
fense GCC VTV (perceived as the ground truth) as well as
the two policies that appeared in prior studies:
1) “AnyV,” permit the vcall target to be any function in
any vtable (e.g., [27, 43]); and
2) “SameOﬀ,” permit only functions at the same vtable
oﬀset as the vcall site, in any vtable (e.g., [17, 30]).
The higher the reduction the more precise the enforced
policy. We further assumed that the solutions that enforced
any of those two policies had perfect knowledge of the vta-
bles in the binaries. Since exploits do not only target vcalls,
and for the sake of completeness, we also report the reduc-
tion in attack surface on indirect calls (icalls). This is com-
puted as the percentage of vcalls (protected by VCI) to the
total number of icalls in the analyzed binaries.
Table 2 shows the breakdown of the results per program.
The results show that VCI achieved signiﬁcantly higher pre-
cision that prior solutions. For some programs, it limited
the vcall target to one or two functions on average (e.g.,
444.namd, Firefox liblgllibs.so and updater). In comparison
to the source-based VTV, VCI achieved the highest precision
amongst other policies, with 100% precision in some cases,
and greater than 60% precision for the majority of the pro-
grams. Compared to solutions that apply the AnyV policy,
VCI achieved 87% to 99% reduction in the vcall targets.
This is more pronounced in programs with large numbers of
vcalls. For example, in Firefox libxul.so, VCI limited each
vcall to only 1035 targets on average, while AnyV allowed
71069 targets per vcall. Compared to SameOﬀ policies, VCI
achieved 48% to 89% reduction. For the same libxul.so, a
SameOﬀ policy would permit 9692 targets per vcall, while
VCI reduced that by more than 89%.
5.2.2 Real-World Exploits
We experimented with three publicly-available use-after-
free vtable exploits for Mozilla Firefox: CVE-2011-0065,
CVE-2013-0753, and CVE-2013-1690. All three vulnerabili-
ties reside in libxul. CVE-2011-0065 exploits a use-after-free
vulnerability in Firefox 3.6.16 where the mChannel pointer
associated with an Element object can be used after being
freed, via the OnChannelRedirect function of the nsIChan-
nelEventSink class. CVE-2013-0753 exploits a vulnerability
in Firefox verions prior to 17.0.2, where an object of type
Element is used after being freed inside the the serialize-
ToStream function of the nsDocumentEncoder class. CVE-
2013-1690 exploits a vulnerability in Firefox 17.0.6 where a
DocumentViewerImpl object is used after being freed, when
triggered via a specially crafted web page using the on-
ReadyStateChange event and the Window.stop API. This
was the vulnerability exploited in the wild in 2013 to target
Tor Browser users.
We downloaded vulnerable Firefox versions, protected the
relevant C++ modules with VCI and tested the protected
browser against exploits from Metasploit. Though some
Metasploit modules for the aforementioned vulnerabilities
supported only Windows, the HTML payloads that trigger
the vulnerabilities are cross-platform. The only platform-
speciﬁc part is the actual payload (ROP in all 3 exploits)
that is executed after the vulnerability is exploited.
VCI identiﬁed and protected the vcalls targetted by the
exploits, rendering the three exploits inoperable. All three
exploits resembled a vtable injection attack. We could not
ﬁnd any publicly-available vtable reuse attacks. In the fol-
lowing, we discuss how VCI mitigates and hardens binaries
against COOP attacks.
Impact of VCI on COOP
5.2.3
Schuster et al. [11, 34] introduced Counterfeit Object-
Oriented Programming (COOP), a novel vtable reuse attack
against C++ programs. In a COOP attack, the attacker in-
jects a counterfeit (attacker controlled) object that repur-
poses existing virtual functions in the binary. The coun-
terfeit object is specially crafted such that benign vulnera-
ble constructs in the binary execute attacker picked virtual
functions. The gadgets in a COOP attack are calls to vir-
tual functions (vfgadgets). By chaining multiple vfgadgets
via counterfeit objects, the attacker can achieve arbitrary
code execution.
A COOP attack requires a memory corruption bug that
enables injection of attacker-controlled objects. Besides that,
it has two key requirements for a successful exploit: 1) the
ability to target unrelated virtual functions from the same
vcall site; and 2) the ability to ﬂow data between the vfgad-
gets. The vfgadgets are dispatched via two types of initial
vfgadgets: the main-loop gadget (ML-G), and the recursive
147Table 2: VCI policy coverage and average target reduction in the analyzed programs. AnyV refers to solutions
that allow any target as long as it is in a valid (read-only) vtable. SameOﬀ refers to solutions that allow
targets that are in a valid vtable and at the same oﬀset of the vcall site. VTV represents the source-based
ground truth.
Avg. #targets per vcall
%Precision w.r.t VTV
%Reduction
AnyV SameOﬀ
Program
444.namd
447.dealII
450.soplex
453.povray
471.omnetpp
483.xalancbmk
liblgbllibs.so
libmozgnome.so
libmozjs.so
libxul.so
libzmq.so
updater
AnyV SameOﬀ
4
289
17
41
72
515
8
3775
725
384
2361
11345
61
149
23840
71069
979
44
5
20
657
9692
42
7
VCI VTV
1
18
7
8
21
33
1
49
8
13
37
85
2
9