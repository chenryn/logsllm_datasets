# 针对 Windows 事件跟踪日志篡改的攻防研究

##### 译文声明
本文为翻译文章，原文作者为 Palantir，发布于 Medium.com。具体内容及含义以原文为准。

## 前言
Windows 事件跟踪 (Event Tracing for Windows, ETW) 是一种用于记录和追踪系统事件的机制。攻击者常常通过删除事件日志来掩盖其行踪。尽管清除事件日志会产生新的日志条目，但熟悉ETW的攻击者可能会利用篡改技术暂停或永久停止日志记录而不留下痕迹。
鉴于Windows事件日志是Palantir应急响应小组警报与检测策略的重要数据来源，了解事件日志篡改方法对我们至关重要。我们持续评估关于事件数据源完整性的假设，识别盲点，并调整相应措施。本文旨在分享ETW的基础知识、事件日志篡改技术和检测策略。

## ETW 和事件日志
ETW 结构由三部分组成：事件提供者（providers）、事件消费者（consumers）以及事件跟踪会话（tracing sessions）。跟踪会话负责从提供者收集事件，并将其传递给日志文件和消费者。这些会话可以通过控制器如内置的 logman.exe 命令行工具创建和配置。以下是一些常用的命令，用于查询现有跟踪会话及其对应的ETW提供者；请注意，执行这些命令通常需要足够的权限。

### 列出所有正在运行的跟踪会话
```bash
> logman query -ets
```
输出示例：
```
Data Collector Set                Type    Status
-------------------------------------------------    
Circular Kernel Context Logger    Trace   Running
AppModel                          Trace   Running
...
```

### 列出特定跟踪会话的所有订阅提供者
```bash
> logman query "EventLog-Application" -ets
```
输出示例：
```
Name:                 EventLog-Application
Status:               Running
Root Path:            %systemdrive%\PerfLogs\Admin
...
Provider:
Name:                 Microsoft-Windows-SenseIR
Provider Guid:        {B6D775EF-1436-4FE6-BAD3-9E436319E218}
Level:                255
KeywordsAll:          0x0
KeywordsAny:          0x8000000000000000 (Microsoft-Windows-SenseIR/Operational)
Properties:           65
Filter Type:          0
...
```

#### 提供者配置参数解释
- **Name**: 提供者的名称。只有当提供者注册了manifest时才会有名称，但它始终具有唯一的GUID。
- **Provider GUID**: 提供者的唯一标识符。在分析或操作特定提供者时非常有用。
- **Level**: 日志级别，范围从0到255。其中0表示总是记录，而255则表示记录所有级别。
- **KeywordsAll** 和 **KeywordsAny**: 关键字用于根据类别筛选事件。`KeywordsAny` 类似于逻辑“或”，而 `KeywordsAll` 则类似于逻辑“与”。
- **Properties**: 可选的ETW属性，在写入事件时指定。例如，`EVENT_ENABLE_PROPERTY_PROCESS_START_KEY` 可生成唯一标识进程的值。
- **Filter Type**: 提供者可以应用其他类型的过滤器。预定义的过滤器类型包括但不限于 `EVENT_FILTER_TYPE_PID` 和 `EVENT_FILTER_TYPE_EXECUTABLE_NAME` 等。

从安全监测的角度来看，某些属性如 `EVENT_ENABLE_PROPERTY_SID`, `EVENT_ENABLE_PROPERTY_TS_ID`, 以及 `EVENT_ENABLE_PROPERTY_PROCESS_START_KEY` 对于收集信息尤其有价值。例如，`EVENT_ENABLE_PROPERTY_PROCESS_START_KEY` 能够生成一个唯一标识每个进程实例的值，这比仅使用进程ID更加准确可靠。