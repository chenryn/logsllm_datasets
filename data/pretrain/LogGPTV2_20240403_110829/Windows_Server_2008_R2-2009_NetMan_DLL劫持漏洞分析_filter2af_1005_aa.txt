# Windows Server 2008 R2-2009 NetMan DLL劫持漏洞分析

#### 译文声明
本文是翻译文章，原文作者为GitHub用户itm4n，原文链接：[itm4n.github.io](https://itm4n.github.io)。译文仅供参考，具体内容以原文为准。

## 1. 引言
在Windows Server 2008 R2到2009的所有版本中，存在一个`%PATH%`目录DLL劫持问题。受影响的服务以`NT AUTHORITY\SYSTEM`权限运行，普通用户可以根据需要触发DLL加载操作，而无需重启主机。由于某些`%PATH%`目录的权限设置较为脆弱，这可能是实现权限提升的一种直接方法。目前似乎没有公开资料介绍过这一点，本文将分享我的发现。

需要注意的是，微软并未将这种DLL劫持行为视为漏洞。虽然默认情况下，高权限进程从`%PATH%`目录加载DLL的行为无法被普通用户利用，但在实际环境中（尤其是企业环境），第三方应用可能会使用较弱的文件夹权限，并将其添加到系统`%PATH%`中，从而引入安全风险。因此，建议微软尽可能阻止这种不可控的DLL加载行为，以避免因单个应用的小配置错误导致整个系统的权限提升问题。

## 2. 使用Procmon搜索DLL劫持
我在研究Windows Server 2008 R2系统时发现了这种行为。尽管该系统已不再受官方支持，但在企业网络中仍广泛使用。我试图找到一种最简单的方法来利用之前发现的[CVE-2020-0668](https://itm4n.github.io/cve-2020-0668-windows-service-tracing-eop/)漏洞。然而，回到Windows 7/2008 R2后，我发现之前的很多知识已经生疏了，必须重新开始。

最初，我想通过`IKEEXT`服务入手。在默认安装的Windows Server 2008 R2系统上，这个服务处于停止状态，并且启动时会尝试加载不存在的`wlbsctrl.dll`库。普通用户可以通过发起虚拟VPN连接轻松触发该服务。但启动该服务只会对其启动模式造成一次影响，随后启动模式会从`DEMAND_START`变为`AUTOMATIC`。在这种情况下，利用该服务需要重启主机，因此不太实用。此外，研究员Frédéric Bourla在其文章中提到的其他DLL劫持方法要么难以触发，要么具有随机性。

于是，我决定使用Process Monitor (Procmon) 进行研究，检查返回`NAME NOT FOUND`错误的DLL加载事件。为了进一步研究，我添加了一个过滤条件，排除从`C:\Windows\System32\`目录加载不存在的DLL的进程，以避免拒绝服务现象。

我考虑了以下三种DLL劫持场景：
1. 程序尝试从`C:\Windows\System32\`加载不存在的DLL，但该DLL存在于另一个Windows目录中（如`C:\Windows\System\`）。由于`C:\Windows\System32\`目录的权限较高，这是一个潜在目标。
2. 程序尝试加载不存在的DLL，但使用了安全的DLL搜索顺序。例如，程序只尝试从`C:\Windows\System32\`目录加载DLL。
3. 程序尝试加载不存在的DLL，并且使用了不受限制的DLL搜索顺序。

第一种场景可能导致拒绝服务，暂时不考虑。第二种场景虽然有趣，但在Procmon的大量结果中准确梳理有一定难度。第三种场景无疑是最有趣的。一旦DLL不存在，劫持DLL时不太可能发生拒绝服务，并且在Procmon中很容易发现。

为了完成任务，我没有在Process Monitor中添加新的过滤器，而是添加了一条规则，高亮包含`WindowsPowerShell`的所有路径。因为在所有版本的（现代）Windows系统中，`C:\Windows\System32\WindowsPowerShell\v1.0\`目录默认位于`%PATH%`中。当看到有程序尝试从该目录加载DLL时，可能意味着该程序存在DLL劫持风险。

经过几个小时的观察和测试，我发现了一个以`NT AUTHORITY\SYSTEM`权限运行的服务尝试加载不存在的`wlanhlp.dll`。我怀疑是否是因为安装了某些第三方应用导致这种情况，但我使用的是全新安装的Windows Server 2008 R2系统，唯一安装的第三方应用是“VMware Tools”。为了确认，我还检查了Windows 7虚拟机，发现该DLL确实存在于工作站系统中。

`wlanhlp.dll`与WLAN功能相关。WLAN API默认在工作站版本上可用，在服务器版本上必须作为附加组件安装。无论如何，我决定继续研究。

## 3. NetMan及WLAN API
首先，我们查看Procmon中的事件属性，了解关于该服务的更多细节。该进程以`NT AUTHORITY\SYSTEM`权限运行，PID为`972`。我们在任务管理器中检查对应的服务，发现该进程中运行着三个服务。通过查看调用栈信息，可以确定尝试加载DLL的对象。

可以看到`netman.dll`的身影，对应的服务是`NetMan`（即Network Connections）。调用栈中多次引用了`RPCRT4.dll`或`ole32.dll`，这意味着该事件可能通过RPC/COM触发。如果确实是这样，我们有机会通过几行代码以普通用户身份触发该事件。

之所以出现DLL劫持，是因为WLAN API默认未安装在Server版的Windows 6.1上（即Windows 7/2008 R2）。那么，这种情况是否适用于其他版本的Windows呢？

我手头上有多个虚拟机，包括Server 2012 R2和2019，便于进行测试。在Windows Server 2012 R2上，Procmon中没有发现`wlanhlp.dll`，但出现了`wlanapi.dll`。情况完全一致，这意味着Windows 6.3（8.1/2012 R2）也存在这种现象。

在Windows Server 2019上，同样能看到这种行为。最后，我测试了2008到2019之间的所有版本的Windows Server系统，结论是所有版本都存在这种DLL劫持问题，唯一的例外是Server 2008。

## 4. 如何触发DLL劫持事件
总结一下现有信息：在所有版本的Windows Server上，`NetMan`服务运行在`NT AUTHORITY\SYSTEM`上下文中，并尝试加载不存在的`wlanhlp.dll`或`wlanapi.dll`，且不使用安全的DLL搜索顺序。因此，该服务最终会从系统的`%PATH%`环境变量指向的目录中加载DLL。

接下来，我们需要确认是否能以普通用户身份触发该事件。虽然这种行为是由于某些RPC/COM事件引起的，但并不意味着我们可以触发它。也有可能是因为两个服务之间通过RPC通信才触发该事件。

无论如何，我们总要怀抱希望，再次检查调用栈。这一次，我们在使用Procmon时配合使用微软提供的公共符号。切换到日常用于安全研究的Windows 10虚拟机。

可以看到调用了`CLanConnection::GetProperties()`，而在其他事件中调用的是`CLanConnection::GetPropertiesEx()`。我们使用[OleViewDotNet](https://github.com/tyranid/oleviewdotnet)检查`NetMan`公开的COM对象，看能否找到这些方法。

根据类名，`LAN Connection Class`似乎是不错的研究目标。创建该类的一个实例并详细检查`INetConnection`接口，找到了`CLanConnection::GetProperties()`方法。

此时，我认为进展非常顺利。首先，我发现了之前未见过的DLL劫持行为；然后，发现该行为可以通过RPC/COM事件触发；最后，发现使用OleViewDotNet可以轻松找到相关方法。我们必须抓住这个机会，但现在可能会遇到一个问题：COM对象上的限制性权限。

COM对象也有安全概念，并包含ACL，定义了谁可以使用这些对象。因此，在继续研究前，我们需要检查这些信息。

首先，我看到了`Administrators`和`NT AUTHORITY\...`，这是正常的，因为只有高权限账户才能触发该行为。然后，我看到了`NT AUTHORITY\INTERACTIVE`。

这意味着只有当普通用户通过交互式会话进行身份验证时，才可以使用这个COM对象。更具体地说，我们需要本地登录到系统。虽然听起来有些鸡肋，但实际上，当我们通过RDP（包括VDI）进行连接时，也可以获得交互式会话。因此，在这种情况下，普通用户可以使用这个COM对象。如果不满足这些条件（例如在WinRM会话中使用该对象），则会看到“访问被拒绝”的错误。虽然这不是我最初的预期，但仍然是一个不错的触发条件。

我们可以在Windows Server 2019的RDP会话中打开命令提示符，如下图所示：

现在，研究内容已经结束，可以开始编写代码。幸运的是，官方公开了`INetConnection`接口，这大大减轻了我们的工作量。其次，在搜索如何使用`INetConnection->EnumConnections()`枚举网络接口时，我偶然发现了[Simon Mourier](https://stackoverflow.com/users/403671/simon-mourier)在[StackOverflow](https://stackoverflow.com/questions/5917304/how-do-i-detect-a-disabled-network-interface-connection-from-a-windows-applicati/5942359#5942359)上提供的一个有趣的解决方案，因此我从StackOverflow上复制了一些代码。

最终的PoC代码如下：
```cpp
// https://stackoverflow.com/questions/5917304/how-do-i-detect-a-disabled-network-interface-connection-from-a-windows-applicati/5942359#5942359
#include <windows.h>
#include <netcon.h>
```

这段代码只是一个示例，具体的实现细节需要进一步开发和完善。