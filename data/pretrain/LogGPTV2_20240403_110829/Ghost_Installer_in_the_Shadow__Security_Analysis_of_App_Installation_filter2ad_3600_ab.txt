### Internal Storage Space and SD-Card Usage in App Installation

When installing an app, the internal storage space is used for two primary purposes:
1. **App Installation**: Space required to install the app.
2. **Temporary Storage**: Space needed to store the APK file temporarily until the installation is complete.

Due to these space requirements, app installations can fail if the device has insufficient internal storage. This issue is particularly prevalent on low-end devices with limited internal storage (e.g., 4GB or 8GB). For example, attempting to install the Amazon appstore's "Gabriel Knight: Sins of the Fathers - Anniversary Edition" (1.6GB) on a Galaxy J5 (8GB model with only 2.5GB available for third-party apps) would likely fail.

Low-end devices with small internal memory are popular. In the first half of 2016, 13 million Galaxy J2 (8GB) and 11.8 million Galaxy S7 (a flagship device from Samsung) were sold [19]. Gartner also reported that basic and lower-end devices will account for two-thirds of smartphone sales by 2019 [7]. Users of low-end devices often have only a fraction of their internal storage available due to system files and pre-installed apps.

### Importance of Compatibility with Low-End Devices

For app stores, compatibility with low-end devices is crucial, especially in competitive markets. Google Play, which dominates the app market and is pre-installed on most devices, is an exception. During our study, we found that APKPure, an app store, gained popularity (Alexa Ranking as of August 14, 2016: Global:2,674, India:895 [1]) by allowing users to install Google Play apps via the SD-Card. This suggests that third-party app stores and users may prefer using the SD-Card to increase the chances of successful installations, despite known security risks.

### SD-Card Usage by Developers

Interestingly, many (83.7%, see Section IV) apps from Google Play use the SD-Card for app installation. While app store owners have some protections in place for SD-Card-based installations, ordinary developers may opt for the SD-Card due to its simplicity and a lack of secure programming training. To install an APK using internal storage, the APK file's access control permission must be set to globally readable. Otherwise, the PackageManager cannot read it. When this read failure occurs, suggestions on websites like Stack Overflow often recommend storing the APK on the SD-Card. However, this approach allows any app with the `WRITE_EXTERNAL_STORAGE` permission to tamper with the file. The tendency of developers to follow such suggestions without understanding the potential risks has led to severe security issues [33].

### Ghost Installer Attacks

In this section, we analyze real-world implementations of the App Installation Trigger (AIT) process, which has revealed unexpected, security-critical vulnerabilities across different AIT steps. These vulnerabilities can be exploited by a malicious app with limited privileges to install any app, gain dangerous permissions without user consent, and even access system resources. This problem affects hundreds of device models and millions of Android users worldwide (Section IV).

#### Overview

Every AIT step is vulnerable:
- **AIT Invocation (Step 1)**: Subject to code injection and redirect Intent attacks (Section III-D).
- **APK Download (Step 2)**: Threatened by a subtle weakness within the AOSP download manager (Section III-C).
- **Installation Trigger (Step 3)**: Exposed to a Time-of-Check to Time-of-Use (TOCTOU) attack that swaps the packages to be installed (Section III-B).
- **APK Install (Step 4)**: Vulnerable due to how the Package Manager Service (PMS) and Package Installer (PIA) verify the target APK.

The rest of the section is organized by the complexity of the problems: Step 3, 4, 2, and 1 (see Table I).

#### Adversary Model

We consider an adversary who places a malicious app on a user’s device, a common requirement for Android-based attacks [27, 22, 37, 42]. For some targets, the malicious app requires the `WRITE_EXTERNAL_STORAGE` permission, which is common among many apps (see Section IV). From Android 4.4, private storage directories on `/sdcard` are supported, but they are not actually private and are writable by any app with the `WRITE_EXTERNAL_STORAGE` permission [5]. Even with the runtime permission request model introduced in Android 6.0, granting this permission can be made unnoticeable to the user. The `WRITE_EXTERNAL_STORAGE` and `READ_EXTERNAL_STORAGE` permissions belong to the same group, so if an app requests a permission in the group with an already granted permission, the new permission will be given silently by the system [13].

#### Hijacking Installation (AIT Step 3 and 4)

Most app installers today use external storage to install apps. Specifically, the installer downloads the target APK and metadata (e.g., the hash of the APK) from its server and stores it on the SD-Card. After verifying the hash, the installer calls APIs or sends Intents to invoke the PMS or PIA to install the APK. The use of the SD-Card is considered necessary for most apps, including major app store apps (e.g., Amazon, Baidu), except for manufacturers like Google and Samsung, who can pre-install their apps.

**TOCTOU Exploit:** External storage is insecure and readable/writable by apps with the `READ_EXTERNAL_STORAGE` and `WRITE_EXTERNAL_STORAGE` permissions. System app developers and app store owners perform integrity checks to ensure packages are not improperly modified before installation. A direct attempt to replace the downloaded files will fail if it does not occur within the right time window (right after the integrity check and before installation). Some installers, like Amazon and Xiaomi, call the `PackageManager.installPackage` API immediately after hash verification. Amazon also randomizes the names of the packages to avoid identification by attackers.

Despite these protections, our research shows that a TOCTOU attack replacing a target APK with a malicious one can still be reliably executed. Any app with the SD-Card permission can use the `FileObserver` class to monitor file access events under a given directory. Even though some app stores randomize package names, the directory path is less convenient to change. Our attack app waits until the target APK is created and its integrity check is done, then substitutes a malicious APK. Completion of the file download can be detected by observing the `CLOSE_WRITE` event. Detecting the integrity check involves analyzing the app store's access pattern. For example, for the Amazon app, 7 `CLOSE_NOWRITE` events indicate the check is done. For Qihoo360, 3 `CLOSE_NOWRITE` events are needed.

**Note:** `FileObserver` is not the only way to capture the attack window. Other methods, such as looking for the end of the central directory record, can also determine the timing for the attack. If the window is missed and the corrupted file is detected, many app stores and apps re-download the target APK, allowing the attacker to try again.

Once the target APK is replaced, the remaining protection is the manifest verification done by the PMS during installation. This defense can be circumvented by a malicious app using the original app's manifest, which is common in app repackaging. We present several attacks on popular app stores and apps:

- **Attack on DTIgnite (Step 3):** DTIgnite is a pre-installed system app used by major carriers to push bloatware. It stores APKs on external storage and verifies them against their hash values before installation. We successfully attacked DTIgnite using our attack app (with only SD-Card permission) through both `FileObserver` monitoring and a "wait-and-see" strategy on a Galaxy S6 Edge (Verizon). Given that DTIgnite is used by over 20 carriers, the attack affects hundreds of millions of Android users.

- **Attacks on App Store Apps (Step 3):** Popular app stores like Amazon, Xiaomi, and Baidu use the same approach as DTIgnite. However, the protection does not work in the presence of `FileObserver` monitoring. Our attacker successfully caught the attack window after observing 7 `CLOSE_NOWRITE` events for Amazon, 1 for Xiaomi, and 2 for Baidu. Alternatively, Amazon and Baidu can be attacked by replacing the APK 500ms after the download is completed. For Xiaomi, the download completion can be identified by the installer changing the temporary name of the target APK to its official name.

- **Attack on New Amazon App Store (Step 4):** The upgraded Amazon app store (version−17.0000.893.3C 64 7000010) includes protection under the `installPackageWithVerification` API, which verifies the checksum of the target APK's manifest. All such protection was defeated in our research through repackaging an Amazon app with attack code, removing its DRM code but keeping its manifest. This version has two hash verifications in place, but both were bypassed.