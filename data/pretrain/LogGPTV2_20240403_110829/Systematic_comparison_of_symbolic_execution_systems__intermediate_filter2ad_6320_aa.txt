title:Systematic comparison of symbolic execution systems: intermediate
representation and its generation
author:Sebastian Poeplau and
Aur&apos;elien Francillon
Systematic Comparison of Symbolic Execution Systems:
Intermediate Representation and its Generation
Sebastian Poeplau
Aurélien Francillon
PI:EMAIL
PI:EMAIL
EURECOM
Sophia Antipolis, France
ABSTRACT
Symbolic execution has become a popular technique for software
testing and vulnerability detection. Most implementations trans-
form the program under analysis to some intermediate represen-
tation (IR), which is then used as a basis for symbolic execution.
There is a multitude of available IRs, and even more approaches to
transform target programs into a respective IR.
When developing a symbolic execution engine, one needs to
choose an IR, but it is not clear which influence the IR generation
process has on the resulting system. What are the respective bene-
fits for symbolic execution of generating IR from source code versus
lifting machine code? Does the distinction even matter? What is the
impact of not using an IR, executing machine code directly? We feel
that there is little scientific evidence backing the answers to those
questions. Therefore, we first develop a methodology for systematic
comparison of different approaches to symbolic execution; we then
use it to evaluate the impact of the choice of IR and IR generation.
We make our comparison framework available to the community
for future research.
CCS CONCEPTS
• Security and privacy → Software security engineering; • Soft-
ware and its engineering → Software testing and debugging.
KEYWORDS
symbolic execution, intermediate representation
ACM Reference Format:
Sebastian Poeplau and Aurélien Francillon. 2019. Systematic Comparison of
Symbolic Execution Systems: Intermediate Representation and its Gener-
ation. In 2019 Annual Computer Security Applications Conference (ACSAC
’19), December 9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA,
14 pages. https://doi.org/10.1145/3359789.3359796
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359796
1 INTRODUCTION
Symbolic execution has gained popularity as a means of exploring
software states without predefined inputs, leading to an increase of
the coverage of the tested program, which is, e.g., very attractive
for bug finding. Conceptually, a symbolic execution engine keeps
track of how each intermediate value is computed while executing
a program. Whenever the program hits a conditional statement, the
symbolic execution engine can pass the collected information to a
solver in order to generate program inputs that yield the desired
outcome at the branch point. In other words, symbolic execution can
ideally generate exactly one input for each possible path through
the program under test.
Recent years have seen the development of several symbolic
execution engines, both in academic environments and by com-
mercial actors [1]. However, the performance of symbolic execu-
tion remains a major challenge, especially when the technique is
applied to larger software systems. Recent work has shown that
combining symbolic execution with fuzz testing has the potential
of handling the weaknesses of either approach and combining their
strengths [39, 43]. In this context, the speed of symbolic execution
is of the essence: exploration is driven by the fuzzer, which also
takes care of vulnerability checks, and the only task of the symbolic
execution engine is to generate relevant new test inputs as quickly
as possible. It is therefore of utmost importance to obtain a better
understanding of how the various design decisions in symbolic
execution affect its performance.
Typically, symbolic execution engines translate the program
under test to an intermediate representation (IR) which they can
subsequently execute symbolically. Generating the IR from binary
may be the only solution when source code is not available. Testing
the binary directly also has the advantage of testing the “shipped”
product, independently of source language and compiler [4]. How-
ever, when source is available, both approaches are possible and
the choice of how to generate IR is a distinguishing factor between
the various approaches. There is quite some conventional wisdom
surrounding it: one intuition is that high level source code seman-
tics (e.g., buffer boundaries, types) can be preserved and will make
symbolic execution, and bug finding, more efficient [14]. However,
to the best of our knowledge, there is no systematic study backing
such claims. The goal of our work is therefore to systematically as-
sess how the choice of IR, and the process of generating it, influence
various aspects of symbolic execution.
We select several popular implementations, each with their own
mechanism for IR generation, and compare them to discern the
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Sebastian Poeplau and Aurélien Francillon
effect on their relative performance. In particular, we aim at an-
swering the following research questions:
(1) Is there a benefit in generating IR from source code as com-
pared to IR generation from binaries?
(2) Are there significant differences between symbolic execution
of different IRs generated from the same programs? What
about the special case of symbolically executing machine
code directly?
Along the way, we discovered that the presumably simple engi-
neering task of setting up a number of symbolic execution engines
in a stable environment and running a fair comparison on them is
actually quite a challenge in itself. We therefore make our environ-
ment and dataset publicly available.
ent implementations of symbolic execution.
In summary, our contributions are the following:
• We devise a framework for systematic comparison of differ-
• We provide an assessment of the impact that the choice
of IR generation mechanism has on the performance of a
symbolic execution engine and derive recommendations for
future work in symbolic execution.
• We publish our setup and data as a common basis for future
evaluations.
2 BACKGROUND
This section gives the reader required background information.
We focus on the general idea of symbolic execution as well as
intermediate representations and SMT solving, before the next
section puts the subject of our research in the more general context
of designing a symbolic execution engine.
2.1 Symbolic Execution
Symbolic execution was originally proposed by King in 1975 [22]. It
was envisioned as a technique for software testing that is more rig-
orous than manual tests and more practical than formal verification.
The early 2000s have finally seen the development of several more
or less practical symbolic execution engines (e.g., [9]), fueled by
significant improvements in Boolean satisfiability (SAT) and satisfi-
ability modulo theories (SMT) solving [44], and the field continues
to be very active to this day.
At the core of most modern symbolic execution engines, an in-
terpreter runs the program under test while keeping a record of
how each intermediate value in the program is computed. Those
computations are typically expressed in the logic of bit vectors and
arrays. A noteworthy exception is Qsym [43], to be discussed in
more detail later, which executes x86 machine code directly. When-
ever the target program encounters a conditional whose outcome
depends on intermediate values, the symbolic execution engine
can express the condition in terms of the original input values of
the program, using the knowledge of how the intermediate values
were derived from the inputs in the course of execution. An SMT
solver can in many cases solve the expression corresponding to the
desired result of the conditional (the so-called path constraints) for
the input values; in other words, the solver generates inputs that
cause the program to run up to the conditional and then take the
desired path out of it.
When symbolic execution is used with the goal of testing an en-
tire program, the execution engine typically tries to follow each path
out of any conditional statement, i.e., it forks and tries to generate
inputs for each possible outcome. A common problem arising from
forking at each conditional is path explosion: the number of paths
to explore grows exponentially over time. More recent approaches
combine symbolic execution with fast random testing [39, 43]. In
this latter scenario, a fuzzer selects interesting inputs and symbolic
execution merely follows a fixed path dictated by a given concrete
program input; the symbolic execution engine thus does not have
to cope with path explosion. It just uses the solver to compute
inputs that diverge from the predetermined path at any desired
point, possibly even trading precision for speed [43]. Especially
in this hybrid setting, faster symbolic execution amounts to more
tested code and—all else being equal—a higher chance of detecting
vulnerabilities.
2.2 Intermediate Representation
When emulating the execution of a program, symbolic execution
faces the challenge that the instruction sets of modern CPUs are
large and complex; writing a symbolic emulator for them is not
trivial. Therefore, it is common to lift the program under test to
some intermediate representation, which is then emulated. Sym-
bolic execution at the IR level also increases portability: in order to
support a new architecture, one “only” needs to reimplement the
IR generator, while the rest of the system can remain unchanged.
Symbolic execution engines differ in the choice of IR and in their
approach to generating IR from either a binary or from source code.
We refer to the process as IR generation, no matter whether the
initial artifact is a machine-code binary or source-code files, because
the term lifting is only appropriate for IR generation that starts
from machine code. The choice of IR-generation mechanism has
a considerable influence on several aspects of symbolic execution,
which is the motivation for this study.
2.3 SMT solving
Symbolic execution engines need to solve path constraints for input
values; in other words, they need to solve formulas in the logic of
bitvectors and arrays (see Section 5.5 for examples). The field of SMT
solving provides tools to address this (generally hard [23]) problem:
in many cases, modern SMT solvers can solve such difficult queries
in acceptable time, using various heuristics that are themselves
an active area of research. It is, however, in the best interest of
any symbolic execution engine to generate queries in a form that
SMT solvers can solve quickly. We conjecture that the way IR is
generated has a profound impact on the complexity of the resulting
SMT queries.
3 DESIGN SPACE
While this study focuses on the generation of intermediate repre-
sentations and the impact of that choice on the overall performance
of symbolic execution, the design of a symbolic execution engine
involves many other decisions. In this section, we give an overview
of important dimensions in the design space and frame our par-
ticular object of study, namely the IR generation process, in the
larger context. We refer interested readers to the recent survey by
Symbolic Execution: IR and its Generation
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Baldoni et al. [1] for a more comprehensive discussion of symbolic
execution techniques in general.
Figure 1 gives an overview of the components in a typical sym-
bolic execution engine. We focus on IR and its execution, which is
the core part that is present in every such system. There may be
additional components, such as security checks and a machinery
for state forking and scheduling. However, they are dropped in
more recent symbolic execution engines, where symbolic execu-
tion functions in concert with a fuzzer which takes care of crash
detection and input prioritization [39, 43].
3.1 Path Selection
At each branching point in the program under analysis, a symbolic
execution engine faces the decision which path to follow. In King’s
original proposal, the user was prompted every time [22]. Mod-
ern systems typically employ heuristics that do not rely on user
interaction. There are two major approaches:
(1) Concolic execution follows the path dictated by a given con-
crete input, typically generating new inputs along the way
that leave the predetermined path. In this case, the question
of path selection is addressed externally; it mostly revolves
around choosing a concrete input to process in each itera-
tion of the system. Examples of symbolic execution engines
that follow this approach are SAGE [20] and the symbolic
components of Driller [39] and Qsym [43].
(2) Some symbolic execution engines choose to pursue all fea-
sible code paths simultaneously, conceptually forking the
executor at each branching point. The scheduling of the re-
sulting execution states is a crucial element of those systems’
design because a good selection strategy may quickly guide
execution toward unexplored code, while less sophisticated
strategies risk getting stuck (e.g., in loops). KLEE [8] and
Mayhem [10] are examples of symbolic execution engines
that conceptually follow all code paths at once.
While the path selection strategy is crucial for the effectiveness
of conventional symbolic execution, it is irrelevant for the more
recent systems running symbolic execution in concolic mode along
with a fuzzer. Therefore, we use concolic mode for all systems,
implementing it where necessary. Concolic execution allows us to
pass the same fixed input to all engines and trust that they follow
the same code path.
3.2 Incremental Solving
As symbolic execution follows a path through the code under anal-
ysis, it collects the constraints imposed on symbolic data at each
branching point. The resulting path constraints are used whenever
a branching point is encountered: execution may proceed down a
path if and only if there exists a concrete value for the symbolic
data that fulfills (1) all path constraints conjoined with (2) the de-
sired outcome of the branching condition; the latter is subsequently
added to the path constraints. Intuitively, the consequence is that
path constraints are large conjunctions that build up incrementally,
one conjunct per branching point in the program. Modern SMT
solvers can take advantage of the incremental nature of resulting
SMT queries, conceptually reusing knowledge gained in answering
previous queries when processing the next increment. Liu et al.
showed that incremental solving indeed leads to significant perfor-
mance improvements in practice [27].
For reasons unknown to us, there are symbolic execution en-
gines that do not use incremental solving. When evaluating query
complexity in our study, we therefore reset the SMT solver before
each query, essentially preventing it from exploiting any incremen-
tal nature in the queries. This eliminates differences unrelated to
our subject of study, which would otherwise skew the results.
3.3 Interleaved Execution
Symbolic execution is only necessary when the executed code
works with symbolic data—when everything is concrete, the code
can as well be executed natively, which is usually significantly
faster. Therefore, many symbolic execution engines have support
for alternating back and forth between symbolic execution and
some form of direct execution for code that does not work with
symbolic data. For instance, Qsym distinguishes at the instruction
level whether the code to be executed has symbolic inputs. It then
only instruments instructions that need to handle symbolic data
by adding complementary symbolic computations [43]. The ap-
proaches taken by the different symbolic execution engines vary
in granularity and concrete execution mechanism, but they share
the common goal of using fast execution techniques as often as
possible and only falling back to slow symbolic execution when
necessary. Therefore, even slow symbolic executors may achieve a
high overall performance in terms of test coverage per time if they
manage to execute a large portion of the code under test natively.
Among the systems in our study, some allow the user to configure
whether or not code with only concrete data is executed natively,
whereas others do not work without interleaved concrete execution
or do not support it at all. We take great care to compare only results
obtained using similar strategies when measurements are affected
by this aspect of symbolic execution. We discuss this problem in
more detail in Section 5.4.
There are many more degrees of freedom in the design of a
symbolic execution system, such as the approach to state forking,
query caching techniques, and vulnerability detection mechanisms.
However, since we focus on concolic execution (e.g., in concert
with a fuzzer) those factors do not impact our experimental setup.
Therefore, we do not discuss them here and refer to the literature
for details [1].
4 APPROACHES UNDER ANALYSIS
In this study, we compare common IR generation approaches, each
represented by a tool that implements the approach. Our test set
includes KLEE [8] for source-based IR generation, S2E [11] for
binary-based generation, angr [38] as a binary-based approach
with a different IR, and Qsym [43] as representative for systems
that do not use IR at all. This section presents each of the tools,
before the next section details the actual analysis. Unless otherwise
noted, when talking about machine code we refer to the x86 and
AMD64 instruction sets.
KLEE. Published in 2008, KLEE [8] is a well-known symbolic
execution engine that is commonly used as a basis for further re-
search [7, 11, 13, 14, 24, 33]. KLEE interprets LLVM bitcode, the
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Sebastian Poeplau and Aurélien Francillon
Figure 1: Overview of symbolic execution, showing our focus on IR, IR execution, and SMT queries. Numbers indicate orthog-
onal studies by (1) Kim et al. [21] and (2) Palikareva and Cadar [29] as well as Liu et al. [27]. Dashed elements are not always
present. IR and machine code may be identical (e.g., in Qsym [43]).
Name
KLEE
S2E
angr
Qsym
Version
4efd7f6
2018-09-24
7.8.8.1
6f00c3d
IR
LLVM
LLVM
VEX
x86 machine code
IR generator
Clang (from source)
QEMU + lifter
libvex
n/a
Solver(s)
Z3 (4.4.1), others C++
Z3 (4.7.1)
Z3 (4.5.1)
Z3 (4.5.0)
C, C++ (mostly)
Python
C++ (mostly)