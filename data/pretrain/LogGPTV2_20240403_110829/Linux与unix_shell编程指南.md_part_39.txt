### 在 `main.html` 文件中创建指向 CGI 脚本的链接

在 `main.html` 文件中，我们创建一个链接指向相应的 CGI 脚本，该脚本能够显示环境变量。以下是使用的链接示例：

```html
<a href="printenv.cgi">Environment</a>
```

- `<a href="...">` 是链接标记的开始。
- `printenv.cgi` 是 CGI 脚本的地址。
- `Environment` 是用户点击的文本。
- `</a>` 是链接标记的结束。

### `main.html` 文件内容

```html
<!DOCTYPE html>
<html>
<head>
    <title>CGI Script Example</title>
</head>
<body>
    <h1>CGI Script Example</h1>
    <p>Click the following link to see the environment variables:</p>
    <a href="printenv.cgi">Environment</a>
</body>
</.html>
```

### 被调用的脚本 `printenv.cgi`

`printenv.cgi` 脚本使用 `env` 命令来显示环境变量。为了保持输出中的空格和制表符不变，我们使用 `<pre>` 标签。

```sh
#!/bin/sh
echo "Content-type: text/html"
echo ""
echo "<pre>"
env
echo "</pre>"
```

### 显示当前环境设置

当用户点击链接时，会显示当前的环境设置（见图 29-6）。你看到的环境设置可能与示例不同，因为不同的脚本运行时环境变量的值可能会有所变化。

### 常用的 CGI 环境变量

表 29-2 列出了最常用的 CGI 环境变量。其中一些变量可以通过 `env` 或 `set` 命令显示出来。

| 变量名 | 描述 |
| --- | --- |
| DOCUMENT_ROOT | Web 服务器的主目录，放置 HTML 文档的地方 |
| GATEWAY_INTERFACE | CGI 的版本 |
| HTTP_ACCEPT | 可接受的各种 MIME 类型 |
| HTTP_CONNECTION | 默认的 HTTP 连接 |
| HTTP_HOST | 本地主机名 |
| HTTP_USER_AGENT | 客户端浏览器 |
| REMOTE_HOST | 远程主机 |
| REMOTE_ADDR | 远程主机的 IP 地址 |
| REQUEST_METHOD | 传递信息的方法 |
| SCRIPT_FILENAME | CGI 脚本的绝对路径 |
| SCRIPT_NAME | CGI 脚本的相对路径 |
| SERVER_ADMIN | Web 服务器管理员的邮件地址 |
| SERVER_NAME | 服务器的主机名、DNS 或 IP 地址 |
| SERVER_PROTOCOL | 连接所使用的协议 |
| SERVER_SOFTWARE | Web 服务器软件名 |
| QUERY_STRING | GET 方法传递的数据 |
| CONTENT_TYPE | MIME 类型 |
| CONTENT_LENGTH | POST 方法传递的字节数 |

### GET 和 POST 方法简介

#### GET 方法

GET 方法是表单的默认操作方法。当用户点击“提交”按钮时，用户选择的信息将以编码字符串的形式附加在服务器 URL 的后面。服务器环境变量 `QUERY_STRING` 保存了编码字符串，变量 `REQUEST_METHOD` 保存了该表单所使用的方法。

##### 创建一个简单的表单

在 `main.html` 文件中添加以下代码，创建一个指向 `booka.cgi` 脚本的链接：

```html
<form action="booka_result.cgi" method="get">
    <label for="contact">姓名:</label>
    <input type="text" id="contact" name="contact" size="30"><br><br>

    <label for="film">最喜爱的电影:</label>
    <select id="film" name="film">
        <option value="The Sound Of Music">The Sound Of Music</option>
        <option value="Forrest Gump">Forrest Gump</option>
        <option value="Pulp Fiction">Pulp Fiction</option>
    </select><br><br>

    <label for="actor">最喜爱的演员:</label>
    <select id="actor" name="actor">
        <option value="Bruce Willis">Bruce Willis</option>
        <option value="Tom Hanks">Tom Hanks</option>
        <option value="Quentin Tarantino">Quentin Tarantino</option>
    </select><br><br>

    <label for="view_cine">喜欢看电影:</label>
    <input type="checkbox" id="view_cine" name="view_cine" value="on"><br><br>

    <label for="view_vid">喜欢看录像:</label>
    <input type="checkbox" id="view_vid" name="view_vid" value="on"><br><br>

    <label for="textarea">备注:</label><br>
    <textarea id="textarea" name="textarea" rows="4" cols="30"></textarea><br><br>

    <input type="submit" value="发送">
    <input type="reset" value="清除">
</form>
```

##### 处理 GET 请求的 CGI 脚本 `booka_result.cgi`

```sh
#!/bin/sh
echo "Content-type: text/html"
echo ""
echo "<pre>"
echo "QUERY_STRING: $QUERY_STRING"
echo "REQUEST_METHOD: $REQUEST_METHOD"
echo "</pre>"
```

#### 对编码字符串解码

当用户点击提交按钮时，相应的信息被赋给了变量 `QUERY_STRING`，这些信息是以下面的格式编码的：
- 所有的空格用 `+` 替代。
- 所有的值域用 `&` 隔开。
- 所有的值和相应域用 `=` 隔开。
- 所有的符号和一些特殊字符用 `%xy` 的形式表示，其中 `xy` 是该字符的 16 进制 ASCII 码。

为了解码相应字符串，我们可以编写一个通用的解码脚本 `conv.cgi`：

```sh
#!/bin/sh
echo "Content-type: text/html"
echo ""
echo "<pre>"

# 解码 QUERY_STRING
decoded=$(echo "$QUERY_STRING" | sed 's/+/ /g' | sed 's/%\([0-9A-Fa-f][0-9A-Fa-f]\)/\\x\1/g')

# 输出解码后的结果
echo "Decoded Query String:"
echo "$decoded"

# 访问各个变量
eval "declare -A params=($decoded)"
for key in "${!params[@]}"; do
    echo "$key: ${params[$key]}"
done

echo "</pre>"
```

#### POST 方法

POST 方法的字符串编码方式与 GET 方法相同，但获取数据的方法是从标准输入读取。如果想用 POST 方法来发送数据，只需将表单操作语句中的 `method="get"` 改为 `method="post"` 即可。

##### 修改 `booka.cgi` 表单以使用 POST 方法

```html
<form action="booka_result.cgi" method="post">
    <!-- 表单内容同上 -->
</form>
```

##### 修改 `conv.cgi` 脚本来处理 POST 请求

```sh
#!/bin/sh
echo "Content-type: text/html"
echo ""
echo "<pre>"

if [ "$REQUEST_METHOD" = "POST" ]; then
    # 从标准输入读取数据
    decoded=$(cat - | sed 's/+/ /g' | sed 's/%\([0-9A-Fa-f][0-9A-Fa-f]\)/\\x\1/g')
else
    # 从 QUERY_STRING 读取数据
    decoded=$(echo "$QUERY_STRING" | sed 's/+/ /g' | sed 's/%\([0-9A-Fa-f][0-9A-Fa-f]\)/\\x\1/g')
fi

# 输出解码后的结果
echo "Decoded Query String:"
echo "$decoded"

# 访问各个变量
eval "declare -A params=($decoded)"
for key in "${!params[@]}"; do
    echo "$key: ${params[$key]}"
done

echo "</pre>"
```

这样，`conv.cgi` 脚本就可以同时处理 GET 和 POST 请求了。