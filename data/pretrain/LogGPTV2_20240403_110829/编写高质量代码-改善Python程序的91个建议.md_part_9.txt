lowerO方法，还是Python 标准库中 string里面的lowerO方法呢？
mod1.py中import string之后再使用string.lowerO方法时，到底引用的是sub1/string.py中的
建议20：优先使用absoluteimport来导入模块
题的一个方法是直接使用import语句。读者可以自行验证。
不存在g对象，此时便抛出ImportError:cannot import name g异常。而解决循环嵌套导入问
的字典中查找g，但cl模块对象虽然创建但初始化的过程并未完成，因此其对应的字典中并
对应的字节码。当遇到c2中的语句fromclimportx时，由于c1已经存在，于是便去其对应
import g，而c2在sys.modules也不存在，故此时创建与c2对应的模块对象并执行c2.py所
程中，需要创建新的模块对象c1然后执行cl.py所对应的字节码。此时遇到语句fromc2
importio.drivers.zip更方便。
且使用from...import形式能够更为简单和便利时。如使用from io.rivers import zip要比使用
于烦琐时。
假设有如下文件结构，其中app/sub1/string.py中定义了一个lowerO方法，那么当在
3）模块的文档明确说明需要使用from...import形式，导人的是一个包下面的子模块，
从程序的输出会发现，它引用的是app/sub1/string.py中的lowerO方法。显然解释器
app/
无论运行上面哪一个文件都会抛出ImportError异常。这是因为在执行cl.py的加载过
（2）循环嵌套导入的问题
2）模块中的这些属性和方法访问频率较高导致使用“模块名·名称”的形式进行访问过
fromclimport x
c2.py:
def x():
from c2import g
cl.py:
先来看下面的例子：
sub1/
sub2/
_init_·Py
Pass
Pass
mod2.py
string.py
mod1.py
init_·py
---
## Page 62
用absolute import。absolute import可读性和出现问题后的可跟踪性都更好。当项目的包层次
将 mod1.py修改为以下形式便不会出现在包结构内运行模块对应的脚本时出错的情况了。
这个问题的方法是利用Python2.6在模块中引人的_package_属性，设置_package_之
运行脚本 mod1.py可以在app所在的目录的位置输人Python-m app.sub1.mod1。另一个解决
脚本一样运行，解决方法之一是在包的顶层目录中加入参数-m运行该脚本，上例中如果要
无论以何种方式加载，当在包的内部运行脚本的时候，包相关的结构信息都会丢失，默认当
modl.py，会发现_name_变为modl。其中-m的作用是使得一个模块像脚本一样运行。而
前脚本所在的位置为模块在包中的顶层位置，因此便会抛出异常。如果确实需要将模块当作
modl.py，会发现模块的_name_为_main_
模块在包的顶层位置，而不管模块在文件系统中的实际位置。而在relativeimport的情形下，
模块在包层次结构中的位置，如果当前的模块名称中不包含任何包的信息，那么它将默认为
么原因呢？这个问题产生的原因在于relative import使用模块的_name_属性来决定当前
sub1；如果想导人 sub2/mo2.py可以使用from..sub2 import mod2，“.”代表的是app。
“.”表示当前目录，“”表示当前目录的上一层目录。例如想在modl.py中导人 string.py，
语句进行说明后再进行导人。同时它还通过点号提供了一种显式进行relative import的方法。
absolute import提供了一种新的机制，在模块中使用from_future_import absolute_import
这并不是一种非常友好的做法。Python2.5中后虽然默认的仍然是relative import，但它为
围的模块。如果要使用标注库中同名的模块，你不得不去深人考察sys.modules一番，显然
import和relativeimport相关的话题了。
那么，如果要使用Python自带的 string模块中的方法，该怎么实现呢？这就涉及absolute
默认先从当前目录下搜索对应的模块，当搜到string.py的时候便停止搜索进行动态加载。
但事情是不是就此结束了呢？远不止，使用显式relativeimport之后再运行程序一不小
相比于absolute import，relativeimport在实际应用中反馈的问题较多，因此推荐优先使
在Python2.4以前默认为隐式的relativeimport，局部范围的模块将覆盖同名的全局范
sys.path[0]=os.path.abspath("./../../")
importapp.sub1
import os.path
import sys
package
str('app.subl')
第3章基础语法49
---
## Page 63
50
有什么情况发生呢？
建议22：使用with自动关闭资源
增操作。
其中+表示正数符号。对于--i操作也是类似。
误，却会无限循环地输出1。原因是什么呢？因为Python解释器会将++i操作解释为+(+i),，
道Python中是不支持++i操作的。但输出果真如此吗？非也，这段程序不会抛出任何语法错
人员，很有可能写出如下类似的代码：
建议21：i+=1不等于++i
模糊等原因，不推荐使用隐式的relative import，并且它在Python3中已经被移除。
结构较为复杂的时候，显式relative import也是可以接受的，由于命名冲突的原因以及语义
来做个简单的试验，观察一下发生的现象。在Python 解释器中输人下面两行代码，会
对于对Python语言的每个细节了解得不是那么清楚，而恰好又有其他语言背景的开发
因此你需要明白++i在Python 中语法上是合法的，但并不是我们理解的通常意义上的自
运行这段代码会有什么问题？也许你会说：抛出语法错误。能说出这个答案的至少知
>>>f.write("test")
>>>f=open('test.txt'，'w')
>>> ++++1
>>> ++1
while i>
N
>>
>>
-2
>>>
>>>+1
--2#负负得正
-2
--=--2
print mylist[i]
---
## Page 64
false，则异常会被重新抛出；如果其返回值为true，异常被挂起，程序继续执行。
并将异常类型、值及traceback 信息作为参数传递给_exit_O方法。如果_exit_O返回值为
接忽略。
码块的执行过程如下：
后自动关闭文件。
expr2ase2”与下面的嵌套形式等价：
决方案：with语句。with语句的语法为：
说，还有try..finally块。对！这是一种比较古老的方法，但 Python提供了一种更为简单的解
闭文件，但结果程序执行过程中发生了异常导致关闭文件的代码没有被执行到。也许你会
多的精力和注意力放在对具体文件内容的操作和处理上；或者设计的正常流程是处理完毕关
是：即使我们心中记得这个原则，但仍然可能会忘记关闭它。为什么？因为编程人员会把更
程序或者进程的操作，甚至会导致用户期望与实际操作结果不一致。但实际应用中真相往往
多编程语言中都会强调这个问题，因为打开的文件不仅会占用系统资源，而且可能影响其他
个简单得不能再简单的问题，相信不用多说你已经知道症结所在了。
对吗？事实真相是：的确生成了一个文件，但其内容为空，并没有写人任何字符串。这个一
7）如果步骤5中代码执行过程中发生异常，调用上下文管理器对象的_exit_O方法，
对文件操作完成后应该立即关闭它们，这是一个常识。我们都知道需要这么做，在很
6）如果步骤5中代码正常结束，调用上下文管理器对象的_exit_O方法，其返回值直
2）加载上下文管理器对象的_exit_O方法以备后用。
with 语句可以在代码块执行完毕后还原进人该代码块时的现场。包含有with语句的代
with语句的使用非常简单，本节开头的例子改用with语句能够保证当写操作执行完毕
with 语句支持嵌套，支持多个 with子句，它们两者可以相互转换。“with exprl as el，
5）执行with中的代码块。
4）如果with语句中设置了目标对象，则将_enter_O方法的返回值赋值给目标对象。
3）调用上下文管理器对象的_enter_O方法。
1）计算表达式的值，返回一个上下文管理器对象。
>>>with open('test.txt','w')asf:
with
with表达式【as目标]：
答案是：在解释器所在的目录下生成了一个文件test.txt，并且在里面写入了字符串 test,
with expr2 as e2:
代码块
exprlasel:
f.write("test")
第3章基础语法51
---
## Page 65
和with语句一起使用。
性如下：
它定义程序运行时需要建立的上下文，处理程序的进人和退出，实现了上下文管理协议，即
（contextmanager）的东西，它用来创建一个运行时的环境。上下文管理器是这样一个对象：
与还原，如多线程编程中的锁对象的管理。with的神奇实际得益于一个称为上下文管理器
正确关闭。实际上它不仅仅针对文件处理，针对其他情景同样可以实现运行时环境的清理
用户也可以定义自己的上下文管理器来控制程序的运行，只需要实现上下文协议便能够
实际上任何实现了上下文协议的对象都可以称为一个上下文管理器，文件也是实现了这
entering...
口_exit_(exception_type,exception_value,traceback)：退出运行时的上下文，定义在块
口_enter_O：进入运行时的上下文，返回运行时上下文相关的对象，with语句中会将
>>>classMyContextManager(object):
>>>f.
在文件处理时使用with的好处在于无论程序以何种方式跳出with块，总能保证文件被
>>
V
>>>f.exit
这个返回值绑定到目标对象。如上面的例子中会将文件对象本身返回并绑定到目标f。
with块中语句执行完成之后需要处理的动作。
with MyContextManager():
执行（或终止）之后上下文管理器应该做什么。它可以处理异常、清理现场或者处理
raise(ValueError)
enter
def_exit_
else:
elif
if exception_typeis None:
(self,exception_type,exception_value,traceback):
(self):#实现
return True
print "other error"
return True
print
ception_typeisValueError:
return False
print "no exceptions!"
"value error!!!"
_enter_方法
---
## Page 66
没有应用else子句的例子：
起，因为else子句提供了隐含的对循环是否由break语句引发循环结束的判断。先来看一个
言并无二致。要谈else子句，必须先从 Python从其他语言中借鉴的语义相同的 break 语句说
首先来看看循环语句中的else，看看它们的语法。
惊讶。在Python 中，不仅分支语句有else子句，而且循环语句也有，甚至连异常处理也有。
建议23：使用else子句简化循环（异常处理）
体实现。关于contextlib更多内容读者可以参考网页http://docs.python.org/2/library/contextlib.
html。
下文管理机制，可以直接作用于函数／对象而不用去关心_enterO_和_exit)_方法的具
Generator实现的，contextlib 中的contextmanager作为装饰器来提供一种针对函数级别的上
锁分配等。为了更好地辅助上下文管理，Python还提供了contextlib模块，该模块是通过
法基本用于资源分配以及释放相关的工作，如打开/关闭文件、异常处理、断开流的连接、
有其他编程语言经验的程序员接触到 Python 时，对于它无所不在的else往往感到非常
从语法定义中可以看到如果没有["else""” suite]这一块，Python的循环语句跟大多数语
while_stmt::="while"expression ":"suite
def print_prime(n):
for_stmt ::=
因为上下文管理器主要作用于资源共享，因此在实际应用中_enterO_
no exceptions!
Testing...
entering...
>>>withMyContextManager():
>
leaving.
fori
for
found =True
in xrange(2,n):
jin xrange（2,i）:
["else"":"suite]
found = False
break
和_exitO_方
第3章基础语法53
---
## Page 67
54
下面的例子是把数据写人文件中。
法定义：
句中的 else 是相似的：try块没有抛出任何异常时，执行else块。按惯例先看一下如下语
到了提高，所以建议大家多使用else，让程序变得更加Pythonic。
的：else块在循环正常结束和循环条件不成立时被执行。
语句中断时，else子句就不被执行。与for语句相似，while语句中的else子句的语意是一样
束是不是由 break 语句引起的。如果对else 善加利用，代码可以简洁得多。来看下面的具体
实现：
在Python的异常处理中，也提供了else子句语法，这颗“语法糖”的意义跟循环语
从 try1_stmt的定义中可以看到，Python的异常处理中有一种 try-except-else-finally形式。
def save（db，obj）:
与C/C++等较为“老土”的语言相比，else子句使程序员的生产力和代码的可读性都得
当循环“自然”终结（循环条件为假）时else从句会被执行一次，而当循环是由break
try2_stmt::=
tryl_stmt ::=
def print_prime2(n):
这是一个查找素数的简单实现，可以看到我们借助了一个标志量found 来判断是循环结
try_stmt
else:
except DBError:
try:
for i in xrange（2， n):
db.ro1lback()
db.commit()
db.execute('another sql stmt'，obj.attr2)
db.execute('a sql stmt'，obj.attrl)
#save attrl
for j in xrange(2，i):
else:
if found:
：：=
print'&disaprimenumber'%i
print'%d is a prime number'%i
ifi%j==0:
"finally"":" suite
"try"":" suite
tryl_stmt1try2_stmt
["finally" ":"suite]
["else"":" suite]
("except"[expression [("as"|",") target]] ":" suite)+
"try"":"suite
break
---
## Page 68
-except-else；try-finally 以及 try-except-else-finally 等。语法形式如下：
理语法是try、except、else、finally，它们可以有多种组合，如try-except（一个或多个），try
情况。跟其他很多编程语言一样，Python也提供了异常处理机制。Python中常用的异常处
下产生异常或者错误。为了提高系统的健壮性和用户的友好性，需要一定的机制来处理这种
偏离正常轨道，软件世界也是如此。或因为外部原因，或因为内部原因，程序会在某些条件
建议24：遵循异常处理的几点基本原则
也证明充分地学习手册中的LanguageReference非常有必要。
简明、更接近自然语言语义的代码，比如in和with语句（将在其他章中讲述相关用法），这
最为全面的组合try-except-else-finally异常处理的流程如图3-1所示。
现实世界是不完美的，意外和异常会在不经意间发生，从而使我们的生活不得不暂时
finally:
try:
这样代码就变得复杂了。在Python 中还有不少语法都是致力于让程序员可以编写更加
else:
except:
exceptas:
except（name2,name3):
except:
def save（db，obj）:
如果没有else子句，