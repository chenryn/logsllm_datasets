# A-Journey-into-Synology-NAS-系列四-HTTP处理流程分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
前面两篇文章从局域网的角度出发，对群晖`NAS`设备上开放的部分服务进行了分析。而在大部分情况下，群晖`NAS`设备是用于远程访问的场景中，即唯一的入口是通过`5000/http(5001/https)`进行访问(暂不考虑使用`QuickConnect`或其他代理的情形)。因此，本篇文章将主要对`HTTP`请求流程和处理机制进行分析，并分享在部分套件中发现的几个安全问题。
## HTTP请求处理流程
在正常登录过程中抓取的部分请求如下，可以看到请求`url`包含`query.cgi`、`login.cgi`和`entry.cgi`等。根据群晖的开发者手册可知，与设备进行交互的大概流程如下：
  1. 通过`query.cgi`获取`API`相关的信息；
  2. 通过`login.cgi`和`encryption.cgi`进行认证，获取`session id`；
  3. 通过`entry.cgi`发送请求、解析响应；
  4. 完成交互后登出。
某个具体的请求示例如下，可以看到有点类似于`JSON-RPC`。对于大部分请求，其`url`均为`"/webapi/entry.cgi"`。在`POST`
`data`部分，`api`参数表示要请求的`API`名称，`method`表示要请求的`API`中的方法，`version`表示要请求的`API`版本。
针对`API`请求，群晖在后端采用`json`元数据文件`SYNO.***.***.lib`来定义与`API`相关的信息，示例如下。
    {
        "SYNO.Core.PersonalNotification.Event": {            // API名称
            "allowUser": [ "admin.local"],                    // 哪个组可以访问该API
            "appPriv": "",            
            "authLevel": 1,                                    // 是否需要认证 (0表示无需认证)
            "disableSocket": false,
            "lib": "lib/SYNO.Core.PersonalNotification.so",    // 处理具体请求的文件
            "maxVersion": 1,
            "methods": {                                    // API中支持的方法以及对应的版本
                "1": [{
                        "fire": {
                            "allowUser": [ "admin.local","normal.local" ],    // 覆盖上面的定义
                            "grantByUser": false,
                            "grantable": true }
                    }]
            },
            "minVersion": 1,
            "priority": 0,
            "socket": ""
        }
    }
根据上述信息，可以知道如何构造一个具体的请求来触发后端的某个处理程序。
整体的`HTTP`请求处理流程大概如下。首先，请求通过`5000`端口发送给设备，基于请求的`url`，`nginx`服务会将该请求分发给不同的`cgi`，如`query.cgi`、`login.cgi`和`entry.cgi`，其中，`entry.cgi`是大部分`POST`请求的端点。这些`cgi`会与另外两个服务`synocgid`和`synoscgi`进行通信，其中`synocgid`负责处理与`session`相关的事务，而`synoscgi`则负责分发具体的请求到最终的处理程序。
## 安全问题
在理解了`HTTP`请求流程和处理机制后，便可以对群晖`NAS`设备的功能模块进行分析。在群晖`NAS`设备上，主要包含两大攻击面：`DSM`操作系统本身和群晖提供的大量套件。下面结合具体的实例进行分析。
###  Diagnosis Tool
前面提到过，`Diagnosis Tool`是群晖提供的一个工具套件，支持抓包、调试等功能。该工具的界面和具体的抓包请求示例如下。
该请求由`packet_capture.cgi`程序进行处理，部分示例代码如下。在`handle_action_start()`中，获取请求中的参数后将其以`json`字符串的形式传给`tcpdump_wrapper`程序。
    __int64 __fastcall handle_action_start(__int64 a1, __int64 a2, const char *a3, const char *a4)
    {
      // ...
      Json::Value::Value((Json::Value *)&v39, (const std::string *)&v28);
      v17 = Json::Value::operator[](&v35, "output_dir");
      Json::Value::operator=(v17, &v39);
      Json::Value::~Value((Json::Value *)&v39);
      Json::Value::Value((Json::Value *)&v40, v4);
      v18 = Json::Value::operator[](&v35, "expression");
      Json::Value::operator=(v18, &v40);
      Json::Value::~Value((Json::Value *)&v40);
      Json::Value::Value((Json::Value *)&v41, v6);
      v19 = Json::Value::operator[](&v35, "interface");
      Json::Value::operator=(v19, &v41);
      Json::Value::~Value((Json::Value *)&v41);
      Json::FastWriter::write((Json::FastWriter *)&v33, (const Json::Value *)&v37);
      std::string::assign((std::string *)&v29, (const std::string *)&v33);
      // ...
      if (SLIBCExec("/var/packages/DiagnosisTool/target/bin/tcpdump_wrapper", "--params", v29, 0LL, 0LL) == -1 )
        // ...
在`tcpdump_wrapper`中，调用`sub_401F10()`解析得到`output_dir`、`expression`和`interface`参数，并传入`RunTcpDump()`，其最终调用`execve()`执行命令`tcpdump
-i  -w  -C 10 -s 0 filter_expression`。
    __int64 __fastcall main(signed int a1, char **a2, char **a3)
    {
      if ( a1 > 1 )
      {
        // ...
        if ( v3 != 2 && !strcmp(v4[1], "--params") )
        {
          std::string::string(&v11, v4[2], &v6);
          // resolve parameters from json string
          sub_401F10(&v11, &output_dir, &expression,&interface);
          // ...
        }
      }
      if (sub_4019D0(&output_dir) )
      {
        if (sub_401900() && !RunTcpdump(&output_dir, &expression, &interface) )
        {
         // ...
调用`execve()`来执行命令，相对比较安全，避免了命令注入的问题，但其中的`filter_expression`参数是可控的。通过查看`tcpdump`命令的帮助文档，发现`-z`选项与`-C`或`-G`选项组合也可达到命令执行的目的。
针对`tcpdump -i  -w  -C 10 -s 0
filter_expression`，其中已包含`-C`选项，因此通过伪造`filter_expression`参数为`-z`，即通过注入命令选项，可实现命令执行的效果。
###  DS File
`DS
File`是群晖提供的一个移动应用程序，便于从移动设备上访问和管理`DiskStation`上的文件，使用该应用访问`DiskStation`的流程与通过`web`的流程类似。当尝试登录到`DiskStation`时，认证过程采用基于`PKI`的加密机制。而在某些情形下如目标`IP`输入错误，或者网络临时不可用，正常的请求会失败，`DS
File`会发送额外的请求。
通过查看对应的第`3`个请求发现，在请求头中包含经过`Base64`编码后的`Authorization`信息，相当于明文。
因此，在一个不安全的网络环境中，当尝试通过`DS
File`应用访问`DiskStation`时，通过简单地丢弃或重定向对应的请求，”中间人’’可窃取用户的明文账号信息。
###  Synology Calendar
该套件是一个基于`Web`的应用程序，用于管理日常的事件和任务，其支持在事件中添加附件和分享日程等功能。其中，添加附件的功能支持从本地上传和从
`NAS`中上传两种方式。普通用户创建事件并添加附件的示例如下，同时给出了与附件链接相关的部分前端代码。
可以看到，上传文件的名称被拼接到`href`链接中。如果伪造一个文件名，能否控制对应的`href`链接呢？经过测试发现，由于未对文件名进行校验，通过伪造一个合适的文件名，可以更改对应的`href`链接，同时让显示的文件名称看起来正常。
此外，借助日程分享功能，还可以将该事件分享到管理员组中。当管理员组中的某个人查看该事件并点击对应的附件之后，该请求就会被执行。因此，利用该漏洞，一个普通权限的用户可以以”管理员”的权限执行”任意”请求，比如将其添加到管理员组中。
###  Media Server
`Media
Server`套件提供与多媒体相关的服务，允许在`NAS`上通过`DLNA/UPnP`播放多媒体内容。在安装该套件后，会启动一些自定义的服务，如下。
通过简单的分析，发现`dms`中存在一些可供访问的`url`，且无需认证。