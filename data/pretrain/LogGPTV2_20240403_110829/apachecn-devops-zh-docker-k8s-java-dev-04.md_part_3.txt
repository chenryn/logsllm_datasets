 web 
            org.springframework.boot 
            spring-boot-starter-data-
 jpa 
            org.hibernate 
            hibernate-validator 
            org.hsqldb 
            hsqldb 
            runtime 
            org.springframework.boot 
            spring-boot-starter-test 
            test 
            com.jayway.jsonpath 
            json-path 
            test 
        1.8 
                org.springframework.boot 
                spring-boot-maven-plugin 
            spring-releases 
            https://repo.spring.io/libs-release 
            spring-releases 
            https://repo.spring.io/libs-release 
```
首先，在`pom.xml`文件中，我们定义了父 Maven 工件。由于我们的应用是 Spring Boot 应用，我们从`spring-boot-starter-parent`神器继承了我们的`pom.xml`。这给了我们所有开箱即用的 Spring Boot 好东西，比如启动机制、依赖注入等等。通过添加`spring-boot-starter-data-jpa`作为依赖项，我们将能够使用所有与数据库相关的特性，例如 JDBC 事务管理、实体类的 JPA 注释等等。准备好`pom.xml`后，让我们继续定义微服务的入口点。
# 应用入口点
我们的应用入口点将被命名为`BookStoreApplication`和`BookstoreApplication.java`:
```
package pl.finsys.example; 
import org.springframework.boot.SpringApplication; 
import org.springframework.boot.autoconfigure.SpringBootApplication; 
@SpringBootApplication 
public class BookstoreApplication { 
    public static void main(final String[] args) { 
        SpringApplication.run(BookstoreApplication.class, args); 
    } 
} 
```
就这样。整整九行代码，不算空行。再简洁不过了。`@SpringBootApplication`是一种快捷标注，非常方便。它将替换以下所有注释:
*   `@Configuration`:用该注释标记的类成为应用上下文的 bean 定义的来源
*   `@EnableAutoConfiguration`:这个注释让 Spring Boot 根据类路径设置、其他 bean 以及各种属性设置来添加 bean
*   `@EnableWebMvc`:通常您会为 Spring MVC 应用添加`this one`，但是 Spring Boot 在类路径中看到`spring-webmvc`时会自动添加它。这将应用标记为网络应用，进而激活关键行为，如设置`DispatcherServlet`
*   `@ComponentScan`:告诉 Spring 寻找其他组件、配置和服务，让它找到控制器
目前为止一切顺利。我们需要一些模型来服务。我们将在数据库中保存一些实体；这就是`spring-boot-starter-data-jpa`启动器派上用场的地方。我们将能够使用 JPA(用 Hibernate 实现)和`javax.transaction-api`，甚至不用显式声明。我们的书店需要一个实体模型。
# 领域模型和存储库
我们服务中的域模型将是一个`Book`类，在`Book.java`文件中定义:
```
package pl.finsys.example.domain; 
import javax.persistence.Column; 
import javax.persistence.Entity; 
import javax.persistence.Id; 
import javax.validation.constraints.NotNull; 
import javax.validation.constraints.Size; 
@Entity 
public class Book { 
    @Id 
    @NotNull 
    @Column(name = "id", nullable = false, updatable = false) 
    private Long id; 
    @NotNull 
    @Size(max = 64) 
    @Column(name = "author", nullable = false) 
    private String author; 
    @NotNull 
    @Size(max = 64) 
    @Column(name = "title", nullable = false) 
    private String title; 
    public Book() { 
    } 
    public Book(final Long id, final String author, final String title) { 
        this.id = id; 
        this.title = title; 
        this.author = author; 
    } 
    public Long getId() { 
        return id; 
    } 
    public String getAuthor() { 
        return author; 
    } 
    public String getTitle() { 
        return title; 
    } 
    public void setTitle(String title) { 
        this.title = title; 
    } 
    @Override 
    public String toString() { 
        return "Book{" + 
                "id=" + id + 
                ", author='" + author + '\'' + 
                ", title='" + title + '\'' + 
                '}'; 
    } 
} 
```
正如您在前面的清单中看到的那样，`Book`类是一个简单的 POJO，带有一些注释、属性以及 getters 和 setters。`@Entity`注释来自`javax.persistence`包，并将 POJO 标记为数据库实体，使 JPA 能够从 H2 数据库中存储或检索它。`@Column`标注指定数据库列的名称，对应的图书属性将存储在这些列中。在进入数据库之前，`@NotNull`和`@Size`注释将确保我们的实体填写了正确的值。
我们定义了我们的实体；现在是时候有一个机制来读取它并将其存储在数据库中了。为此，我们将使用 Spring 的`JpaRepository`。我们存储库的名称将是`BookRepository.java`文件中的`BookRepository`:
```
package pl.finsys.example.repository; 
import pl.finsys.example.domain.Book; 
import org.springframework.data.jpa.repository.JpaRepository; 
public interface BookRepository extends JpaRepository { 
} 
```
Spring Data JPA 提供了一个存储库编程模型，它从每个托管域对象的一个接口开始。定义这个接口有两个目的。首先，通过扩展`JPARepository`接口，我们得到了一堆通用的 CRUD 方法到我们的类型中，允许保存我们的实体，删除它们，等等。例如，以下方法可用(在我们正在扩展的`JPARepository`接口中声明):