title:OAT: Attesting Operation Integrity of Embedded Devices
author:Zhichuang Sun and
Bo Feng and
Long Lu and
Somesh Jha
OAT: Attesting Operation Integrity of
Embedded Devices
Zhichuang Sun
Bo Feng
Long Lu
Somesh Jha
Northeastern University
Northeastern University
Northeastern University
University of Wisconsin
9
1
0
2
t
c
O
1
]
R
C
.
s
c
[
3
v
2
6
4
3
0
.
2
0
8
1
:
v
i
X
r
a
Abstract—Due to the wide adoption of IoT/CPS systems,
embedded devices (IoT frontends) become increasingly connected
and mission-critical, which in turn has attracted advanced attacks
(e.g., control-ﬂow hijacks and data-only attacks). Unfortunately,
IoT backends (e.g., remote controllers or in-cloud services) are
unable to detect if such attacks have happened while receiving
data, service requests, or operation status from IoT devices
(remotely deployed embedded devices). As a result, currently,
IoT backends are forced to blindly trust the IoT devices that
they interact with.
To ﬁll this void, we ﬁrst formulate a new security property
for embedded devices, called “Operation Execution Integrity” or
OEI. We then design and build a system, OAT, that enables
remote OEI attestation for ARM-based bare-metal embedded
devices. Our formulation of OEI captures the integrity of both
control ﬂow and critical data involved in an operation execution.
Therefore, satisfying OEI entails that an operation execution is
free of unexpected control and data manipulations, which existing
attestation methods cannot check. Our design of OAT strikes a
balance between prover’s constraints (embedded devices’ lim-
ited computing power and storage) and veriﬁer’s requirements
(complete veriﬁability and forensic assistance). OAT uses a new
control-ﬂow measurement scheme, which enables lightweight and
space-efﬁcient collection of measurements (97% space reduction
from the trace-based approach). OAT performs the remote
control-ﬂow veriﬁcation through abstract execution, which is
fast and deterministic. OAT also features lightweight integrity
checking for critical data (74% less instrumentation needed
than previous work). Our security analysis shows that OAT
allows remote veriﬁers or IoT backends to detect both control-
ﬂow hijacks and data-only attacks that affect the execution of
operations on IoT devices. In our evaluation using real embedded
programs, OAT incurs a runtime overhead of 2.7%.
I. INTRODUCTION
Internet-of-Things (IoT) and Cyber-Physical Systems (CPS)
are being rapidly deployed in smart homes, automated fac-
tories, intelligent cities, and more. As a result, embedded
devices, playing the central roles as sensors, actuators, or
edge-computing nodes in IoT systems, are becoming attrac-
tive targets for cyber attacks. Unlike computers, attacks on
embedded devices can cause not only software failures or data
breaches but also physical damage. Moreover, a compromised
device can trick or manipulate the IoT backend (e.g., remote
controllers or in-cloud services): hijacking operations and
forging data.
To appear in the IEEE Symposium on Security & Privacy, May 2020.
This work was supported by the National Science Foundation (Grant#: CNS-
1748334), the Ofﬁce of Naval Research (Grant#: N00014-17-1-2227), and the
Army Research Ofﬁce (Grant#: W911NF-17-1-0039).
Unfortunately, today’s IoT backends cannot protect them-
selves from manipulations by compromised IoT devices. This
is due to the lack of a technique for remotely verifying if an
operation performed by an IoT device has been disrupted, or
any critical data has been corrupted while being processed on
the device. As a result, IoT backends are forced to blindly trust
remote devices for faithfully performing assigned operations
and providing genuine data. Our work aims to make this trust
veriﬁable, and therefore, prevent compromised IoT devices
from deceiving or manipulating the IoT backend.
We take the general approach of remote attestation, which
allows a device to prove its integrity (with regard to certain
security properties) to a remote veriﬁer. Although a large body
of works on remote attestation exists [54], [60], [61], [55],
[12], [36], they have different goals from ours. Moreover, most
of them are focused on verifying basic security properties,
such as static code text integrity, and therefore cannot capture
the advanced attacks that are becoming mainstream recently.
For example, return-oriented programming (ROP) and data-
only attacks are easy to launch on embedded devices, as
demonstrated on vulnerable industrial robot controllers [51].
C-FLAT [2] took the ﬁrst step towards control-ﬂow integrity
(CFI) attestation. But a major limitation of C-FLAT is the
non-deterministic veriﬁability of its control-ﬂow hashes (i.e.,
a given hash may not be veriﬁable due to the program path
explosion issue). Moreover, C-FLAT does not check data
integrity (i.e., data-only attacks are not covered).
In this paper, we introduce the ﬁrst attestation method that
captures both control-ﬂow and data-only attacks on embedded
devices. Using this method, IoT backends can now verify if a
remote device is trustworthy when it claims it has performed
an operation, sent in a service request, or transported back
data from the ﬁeld. In addition, unlike traditional attestation
methods, which only output a binary result, our method allows
veriﬁers to reconstruct attack execution traces for postmortem
analysis.
Our attestation is based on a new security property that
we formulated, called Operation Execution Integrity (OEI),
which combines both the control-ﬂow integrity and critical
data integrity of an “operation” (i.e., a self-contained task or
logic). An operation satisﬁes OEI if and only if the operation
was performed without its control ﬂow altered or its critical
data corrupted during the execution. For an operation to be
attested, the IoT device (i.e., prover) sends an unforgeable
OEI measurement to the IoT backend (i.e., veriﬁer), along
with any output from the operation. The backend then checks
the measurement to determine if OEI was satisﬁed during
the operation. The backend accepts the operation output from
the device only if the check passes (i.e., the received data or
request is trustworthy).
OEI takes advantage of the “operation-oriented” design of
embedded programs: code is typically organized in logically
independent operations, such as moving a robotic arm, inject-
ing a dose of medicine, sensing temperature, etc. Rather than
covering an entire program, OEI is focused on the execution
of individual operations (hence the name). This per-operation
property allows for on-demand and efﬁcient attestation on
embedded devices without sacriﬁcing security (§III-B).
We design and implement OAT (OEI ATtester), a system
that enables OEI attestation on ARM-based embedded devices.
It consists of a customized compiler for building attestation-
enabled binaries, a runtime measurement engine running on
IoT devices, and a veriﬁcation engine for IoT backends. OAT
addresses two key challenges associated with OEI attestation,
or any remote attestation of control-ﬂow and data integrity:
(1) Incomplete veriﬁcation of control-ﬂow integrity: Con-
ventional hash-based attestation [2] can only verify a (small)
subset of program executions (i.e.,
incomplete veriﬁcation
of control-ﬂow). It is because this approach checks a given
control-ﬂow hash against a limited set of hashes pre-computed
from known-legitimate program runs. This static hash pre-
computation can never cover all possibilities due to program
path explosions, even for small programs. As a result, this
attestation cannot verify control-ﬂow hashes, legitimate or not,
outside of the pre-computed set.
We design a hybrid control-ﬂow attestation scheme for
OAT, which combines hashes and compact execution traces.
This scheme enables complete control-ﬂow veriﬁcation as
well as attack ﬂow reconstruction, at the cost of a mildly
increased measurement size. Our attestation scheme is partly
inspired by the tracing-based CFI enforcement [24], [59]. But
unlike previous work, which requires hardware tracing mod-
ules unavailable on deployed or debugging-disabled embedded
devices,
our scheme uses its own software-based tracing technique.
Moreover, thanks to the combined use of hash and traces,
OAT’s space overhead is only a tiny fraction (2.24%) of
tracing-based CFI’s overhead. In addition, OAT checks both
forward- and backward-edges. We discuss the details in §IV.
(2) Heavy data integrity checking: The existing data integrity
checkers [13], [3], [11] have to instrument every memory-
write instruction and sometimes memory-read instructions
in a program. The heavy and extensive instrumentation is
needed because these checkers have to decide during runtime,
for every instrumented instruction, whether the instruction
is allowed to store/load data to/from the referenced address.
We call this address-based checking, which is too heavy for
embedded devices.
OAT uses a novel data integrity checking technique. First,
it only covers critical variables because not all program data
is relevant to an operation to be attested. Critical variables are
those that may affect the outcome of an operation. They are
automatically detected by OAT or annotated by developers.
Second, instead of address-based checking, our technique
performs value-based checking. It checks if the value of a
critical variable at an instrumented load instruction (i.e., use)
remains the same as the value recorded at the previous instru-
mented store instruction (i.e., deﬁne). It only instruments the
instructions that are supposed to access the critical variables,
rather than instrumenting all memory-accessing instructions as
address-based checkers would, even when only selected vari-
ables need checking. Our technique on average requires 74%
fewer instrumentation than address-based checking does. We
call this “Value-based Deﬁne-Use Check”, which is discussed
in §V.
Using OAT, IoT backends can now for the ﬁrst time remotely
verify operations performed by IoT devices. Our security
analysis (§VIII-C) shows that OAT detects both control and
data manipulations that are undetectable by existing attestation
methods for embedded devices. Our performance evaluation
(§VIII), based on real embedded programs, shows that OAT,
on average, slows down program execution by 2.73% and
increases the binary size by 13%.
In summary, our work makes the following contributions:
• We formulate a new security property, OEI, for IoT
backends to attest the integrity of operations executed on
remote IoT/embedded devices. It covers both control-ﬂow
and critical data integrity.
• We design a hybrid attestation scheme, which uses both
hashes and execution traces to achieve complete control-
ﬂow veriﬁcation while keeping the size of control-ﬂow
measurements acceptable for embedded devices.
• We present a light-weight variable integrity checking
mechanism, which uses selective and value-based check-
ing to keep the overhead low without sacriﬁcing security.
• We design and build OAT to realize OEI attestation
on both the prover- and veriﬁer-side. OAT contains
the compile-time, run-time, and veriﬁcation-time compo-
nents.
• We evaluate OAT on ﬁve real-world embedded programs
that cover broad use scenarios of IoT devices, demon-
strating the practicality of OAT in real-world cases.
II. BACKGROUND
A. Attacks on IoT Devices and Backends
Embedded devices, essential for IoT, have been increas-
ingly targeted by powerful attacks. For instance, hackers have
managed to subvert different kinds of smart home gadgets,
including connected lights [53], locks [31], etc. In industrial
systems, robot controllers [51] and PLCs (Programmable
Logic Controller) [22] were exploited to perform unintended
or harmful operations. The same goes for connected cars [42],
[34], drones [30], and medical devices [23], [52]. In addition,
2
large-scale IoT deployments were compromised to form bot-
nets via password cracking [56], and recently, vulnerability
exploits [40].
Meanwhile, advanced attacks quickly emerged. Return-
oriented Programming (ROP) was demonstrated to be real-
istic on RISC [8], and particularly ARM [39], which is the
common architecture for today’s embedded devices. Data-only
attacks [15], [33] are not just applicable but well-suited for
embedded devices [62], due to the data-intensive or data-
driven nature of IoT.
Due to the poor security of today’s embedded devices, IoT
backends (e.g., remote IoT controllers and in-cloud services)
are recommended to operate under the assumption that IoT
devices in the ﬁeld can be compromised and should not be
fully trusted
[57]. However, in reality, IoT backends are
often helpless when deciding whether or to what extent it
should trust an IoT device. They may resort to the existing
remote attestation techniques, but these techniques are only
effective at detecting the basic attacks (e.g., device or code
modiﬁcation) while leaving advanced attacks undetected (e.g.,
ROP, data-only attacks, etc.). As a result, IoT backends have
no choice but to trust IoT devices and assume they would
faithfully execute commands and generate genuine data or
requests. This blind and unwarranted trust can subject IoT
backends to deceptions and manipulations. For example, a
compromised robotic arm can drop a command yet still report
a success back to its controller; a compromised industrial
syringe can perform an unauthorized chemical injection, or
change an authorized injection volume, without the controller’s
knowledge.
Our work enables IoT backends to reliably verify if an
operation performed by a device has suffered from control
or data attacks. It solves an important open problem that IoT
backends currently have no means to determine if data, results,
or requests sent from (insecure) IoT devices are trustworthy.
Moreover, it allows backends to reconstruct attack control
ﬂows, which are valuable for forensic analysis.
B. ARM TrustZone
Our system relies on ARM TrustZone to establish the
TCB (Trusted Computing Base). TrustZone is a hardware