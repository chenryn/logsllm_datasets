tion u is a utility function scraped together to handle the removal of pad-
ding data after decryption. This is a necessary step, but beyond the scope 
of this discussion. Do some research on Public Key Cryptography Standards 
(PKCS) #7 padding for more information. It’s a relevant topic for AES, as it’s 
used to ensure that our data has proper block alignment. For this example, 
just know that you’ll need the function later to clean up your data. The 
function itself assumes some facts that you’d want to explicitly validate in a 
real-world scenario. Specifically, you’d want to confirm that the value of the 
padding bytes is valid, that the slice offsets are valid, and that the result is 
of appropriate length.
The most interesting logic exists within the decrypt() function v, which 
takes two byte slices: the ciphertext you need to decrypt and the symmetric 
key you’ll use to do it. The function performs some validation to confirm 
that the ciphertext is at least as long as your block size w. This is a necessary 
step, because CBC mode encryption uses an initialization vector (IV) for 
randomness. This IV, like a salt value for password hashing, doesn’t need 
to remain secret. The IV, which is the same length as a single AES block, is 
prepended onto your ciphertext during encryption. If the ciphertext length 
is less than the expected block size, you know that you either have an issue 
with the cipher text or are missing the IV. You also check whether the cipher-
text length is a multiple of the AES block size x. If it’s not, decryption will 
fail spectacularly, because CBC mode expects the ciphertext length to be a 
multiple of the block size.
前沿信安资讯阵地  公众号：i nf osrc
244   Chapter 11
Once you’ve completed your validation checks, you can proceed to 
decrypt the ciphertext. As mentioned previously, the IV is prepended to the 
ciphertext, so the first thing you do is extract the IV from the ciphertext y. 
You use the aes.BlockSize constant to retrieve the IV and then redefine 
your ciphertext variable to the remainder of your ciphertext via ciphertext 
= [aes.BlockSize:]. You now have your encrypted data separate from your IV.
Next, you call aes.NewCipher(), passing it your symmetric-key value z. 
This initializes your AES block mode cipher, assigning it to a variable named 
block. You then instruct your AES cipher to operate in CBC mode by call-
ing cipher.NewCBCDecryptor(block, iv) {. You assign the result to a variable 
named mode. (The crypto/cipher package contains additional initialization 
functions for other AES modes, but you’re using only CBC decryption 
here.) You then issue a call to mode.CryptBlocks(plaintext, ciphertext) to 
decrypt the contents of ciphertext | and store the result in the plaintext 
byte slice. Lastly, you } remove your PKCS #7 padding by calling your unpad() 
utility function. You return the result. If all went well, this should be the 
plaintext value of the credit card number.
A sample run of the program produces the expected result:
$ go run main.go 
key        = aca2d6b47cb5c04beafc3e483b296b20d07c32db16029a52808fde98786646c8
ciphertext = 7ff4a8272d6b60f1e7cfc5d8f5bcd047395e31e5fc83d062716082010f637c8f21150eabace62  
--snip--
plaintext  = 4321123456789090
Notice that you didn’t define a main() function in this sample code. Why 
not? Well, decrypting data in unfamiliar environments has a variety of poten-
tial nuances and variations. Are the ciphertext and key values encoded or raw 
binary? If they’re encoded, are they a hex string or Base64? Is the data locally 
accessible, or do you need to extract it from a data source or interact with a 
hardware security module, for example? The point is, decryption is rarely a 
copy-and-paste endeavor and often requires some level of understanding of 
algorithms, modes, database interaction, and data encoding. For this reason, 
we’ve chosen to lead you to the answer with the expectation that you’ll inevit-
ably have to figure it out when the time is right.
Knowing just a little bit about symmetric-key encryption can make your 
penetrations tests much more successful. For example, in our experience 
pilfering client source-code repositories, we’ve found that people often 
use the AES encryption algorithm, either in CBC or Electronic Codebook 
(ECB) mode. ECB mode has some inherent weaknesses and CBC isn’t any 
better, if implemented incorrectly. Crypto can be hard to understand, so 
often developers assume that all crypto ciphers and modes are equally 
effective and are ignorant of their subtleties. Although we don’t consider 
ourselves cryptographers, we know just enough to implement crypto 
securely in Go—and to exploit other people’s deficient implementations. 
Although symmetric-key encryption is faster than asymmetric crypto-
graphy, it suffers from inherent key-management challenges. After all, to 
use it, you must distribute the same key to any and all systems or applica-
tions that perform the encryption or decryption functions on the data. 
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   245
You must distribute the key securely, often following strict processes and 
auditing requirements. Also, relying solely on symmetric-key cryptography 
prevents arbitrary clients from, for example, establishing encrypted com-
munications with other nodes. There isn’t a good way to negotiate the 
secret key, nor are there authentication or integrity assurances for many 
common algorithms and modes.1 That means anyone, whether authorized 
or malicious, who obtains the secret key can proceed to use it. 
This is where asymmetric cryptography can be of use.
Asymmetric Cryptography
Many of the problems associated with symmetric-key encryption are solved by 
asymmetric (or public-key) cryptography, which uses two separate but mathemati-
cally related keys. One is available to the public and the other is kept private. 
Data encrypted by the private key can be decrypted only by the public key, 
and data encrypted by the public key can be decrypted only by the private 
key. If the private key is protected properly and kept, well, private, then 
data encrypted with the public key remains confidential, since you need the 
closely guarded private key to decrypt it. Not only that, but you could use the 
private key to authenticate a user. The user could use the private key to sign 
messages, for example, which the public could decrypt using the public key. 
So, you might be asking, “What’s the catch? If public-key cryptography 
provides all these assurances, why do we even have symmetric-key crypto-
graphy?” Good question, you! The problem with public-key encryption is its 
speed; it’s a lot slower than its symmetric counterpart. To get the best of both 
worlds (and avoid the worst), you’ll often find organizations using a hybrid 
approach: they’ll use asymmetric crypto for the initial communications nego-
tiation, establishing an encrypted channel through which they create and 
exchange a symmetric key (often called a session key). Because the session key 
is fairly small, using public-key crypto for this process requires little overhead. 
Both the client and server then have a copy of the session key, which they use 
to make future communications faster. 
Let’s look at a couple of common use cases for public-key crypto. 
Specifically, we’ll look at encryption, signature validation, and mutual 
authentication.
Encryption and Signature Validation
For this first example, you’ll use public-key crypto to encrypt and decrypt 
a message. You’ll also create the logic to sign a message and validate that 
signature. For simplicity, you’ll include all of this logic in a single main() 
function. This is meant to show you the core functionality and logic so that 
you can implement it. In a real-world scenario, the process is a little more 
complex, since you’re likely to have two remote nodes communicating with 
each other. These nodes would have to exchange public keys. Fortunately, 
this exchange process doesn’t require the same security assurances as 
1. Some operating modes, such as Galois/Counter Mode (GCM), provide integrity assurance.
前沿信安资讯阵地  公众号：i nf osrc
246   Chapter 11
exchanging symmetric keys. Recall that any data encrypted with the pub-
lic key can be decrypted only by the related private key. So, even if you 
perform a man-in-the-middle attack to intercept the public-key exchange 
and future communications, you won’t be able to decrypt any of the data 
encrypted by the same public key. Only the private key can decrypt it. 
Let’s take a look at the implementation shown in Listing 11-5. We’ll elab-
orate on the logic and cryptographic functionality as we review the example.
func main() {
    var (
        err                                              error
        privateKey                                       *rsa.PrivateKey
        publicKey                                        *rsa.PublicKey
        message, plaintext, ciphertext, signature, label []byte
    )   
    if privateKey, err = rsa.GenerateKey(rand.Reader, 2048)u; err != nil {
        log.Fatalln(err)
    }   
    publicKey = &privateKey.PublicKey v
    label = []byte("")
    message = []byte("Some super secret message, maybe a session key even")
    ciphertext, err = rsa.EncryptOAEP(sha256.New(), rand.Reader, publicKey, message, label) w
    if err != nil {
        log.Fatalln(err)
    } 
    fmt.Printf("Ciphertext: %x\n", ciphertext)
    plaintext, err = rsa.DecryptOAEP(sha256.New(), rand.Reader, privateKey, ciphertext, label) x
    if err != nil {
        log.Fatalln(err)
    }   
    fmt.Printf("Plaintext: %s\n", plaintext)
    h := sha256.New()
    h.Write(message)
    signature, err = rsa.SignPSS(rand.Reader, privateKey, crypto.SHA256, h.Sum(nil), nil) y
    if err != nil {
        log.Fatalln(err)
    }   
    fmt.Printf("Signature: %x\n", signature)
    err = rsa.VerifyPSS(publicKey, crypto.SHA256, h.Sum(nil), signature, nil)z 
    if err != nil {
        log.Fatalln(err)
    }   
    fmt.Println("Signature verified")
}
Listing 11-5: Asymmetric, or public-key, encryption (/ch-11/public-key /main.go/)
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   247
The program demonstrates two separate but related public-key crypto 
functions: encryption/decryption and message signing. You first generate a 
public/private key pair by calling the rsa.GenerateKey() function u. You sup-
ply a random reader and a key length as input parameters to the function. 
Assuming the random reader and key lengths are adequate to generate a 
key, the result is an *rsa.PrivateKey instance that contains a field whose value 
is the public key. You now have a working key pair. You assign the public key 
to its own variable  for the sake of convenience v. 
This program generates this key pair every time it’s run. In most cir-
cumstances, such as SSH communications, you’ll generate the key pair a 
single time, and then save and store the keys to disk. The private key will be 
kept secure, and the public key will be distributed to endpoints. We’re skip-
ping key distribution, protection, and management here, and focusing only 
on the cryptographic functions.
Now that you’ve created the keys, you can start using them for encryp-
tion. You do so by calling the function rsa.EncryptOAEP() w, which accepts a 
hashing function, a reader to use for padding and randomness, your public 
key, the message you wish to encrypt, and an optional label. This function 
returns an error (if the inputs cause the algorithm to fail) and our cipher-
text. You can then pass the same hashing function, a reader, your private 
key, your ciphertext, and a label into the function rsa.DecryptOAEP() x. The 
function decrypts the ciphertext by using your private key and returns the 
cleartext result.
Notice that you’re encrypting the message with the public key. This 
ensures that only the holder of the private key will have the ability to decrypt 
the data. Next you create a digital signature by calling rsa.SignPSS() y. You 
pass to it, again, a random reader, your private key, the hashing function 
you’re using, the hash value of the message, and a nil value representing 
additional options. The function returns any errors and the resulting signa-
ture value. Much like human DNA or fingerprints, this signature uniquely 
identifies the identity of the signer (that is, the private key). Anybody hold-
ing the public key can validate the signature to not only determine the 
authenticity of the signature but also validate the integrity of the message. 
To validate the signature, you pass the public key, hash function, hash value, 
signature, and additional options to rsa.VerifyPSS() z. Notice that in this 
case you’re passing the public key, not the private key, into this function. 
Endpoints wishing to validate the signature won’t have access to the private 
key, nor will validation succeed if you input the wrong key value. The rsa 
.VerifyPSS() function returns nil when the signature is valid and an error 
when it’s invalid.
Here is a sample run of the program. It behaves as expected, encrypt-
ing the message by using a public key, decrypting it by using a private key, 
and validating the signature:
$ go run main.go 
Ciphertext: a9da77a0610bc2e5329bc324361b480ba042e09ef58e4d8eb106c8fc0b5 
--snip--
Plaintext: Some super secret message, maybe a session key even
前沿信安资讯阵地  公众号：i nf osrc
248   Chapter 11
Signature: 68941bf95bbc12edc12be369f3fd0463497a1220d9a6ab741cf9223c6793 
--snip--
Signature verified
Next up, let’s look at another application of public-key cryptography: 
mutual authentication.
Mutual Authentication
Mutual authentication is the process by which a client and server authenticate 
each other. They do this with public-key cryptography; both the client and 
server generate public/private key pairs, exchange public keys, and use the 
public keys to validate the authenticity and identity of the other endpoint. 
To accomplish this feat, both the client and server must do some legwork to 
set up the authorization, explicitly defining the public key value with which 
they intend to validate the other. The downside to this process is the admin-
istrative overhead of having to create unique key pairs for every single node 
and ensuring that the server and the client nodes have the appropriate data 
to proceed properly.
To begin, you’ll knock out the administrative tasks of creating key 
pairs. You’ll store the public keys as self-signed, PEM-encoded certificates. 
Let’s use the openssl utility to create these files. On your server, you’ll create 
the server’s private key and certificate by entering the following:
$ openssl req -nodes -x509 -newkey rsa:4096 -keyout serverKey.pem -out serverCrt.pem -days 365
The openssl command will prompt you for various inputs, to which you 
can supply arbitrary values for this example. The command creates two 
files: serverKey.pem and serverCrt.pem. The file serverKey.pem contains your pri-
vate key, and you should protect it. The serverCrt.pem file contains the serv-
er’s public key, which you’ll distribute to each of your connecting clients.
For every connecting client, you’ll run a command similar to the 
preceding one:
$ openssl req -nodes -x509 -newkey rsa:4096 -keyout clientKey.pem -out clientCrt.pem -days 365
This command also generates two files: clientKey.pem and clientCrt.pem. 
Much as with the server output, you should protect the client’s private 
key. The clientCrt.pem certificate file will be transferred to your server and 
loaded by your program. This will allow you to configure and identify the 
client as an authorized endpoint. You’ll have to create, transfer, and con-
figure a certificate for each additional client so that the server can identify 
and explicitly authorize them.
In Listing 11-6, you set up an HTTPS server that requires a client to 
provide a legitimate, authorized certificate.
func helloHandler(w http.ResponseWriter, r *http.Request) { u
    fmt.Printf("Hello: %s\n", r.TLS.PeerCertificates[0].Subject.CommonName) v
    fmt.Fprint(w, "Authentication successful")
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   249
}
func main() {
    var (
        err        error
        clientCert []byte
        pool       *x509.CertPool
        tlsConf    *tls.Config
        server     *http.Server
    )   
    http.HandleFunc("/hello", helloHandler)
    if clientCert, err = ioutil.ReadFile("../client/clientCrt.pem")w; err != nil {
        log.Fatalln(err)
    }   
    pool = x509.NewCertPool()
    pool.AppendCertsFromPEM(clientCert) x
    tlsConf = &tls.Config{ y
        ClientCAs:  pool,
        ClientAuth: tls.RequireAndVerifyClientCert,
    }   
    tlsConf.BuildNameToCertificate() z
    server = &http.Server{
        Addr:      ":9443",
        TLSConfig: tlsConf, {
    }   
    log.Fatalln(server.ListenAndServeTLS("serverCrt.pem", "serverKey.pem")|)
}
Listing 11-6: Setting up a mutual authentication server (/ch-11 /mutual-auth/cmd /server/main.go)
Outside the main() function, the program defines a helloHandler() func-
tion u. As we discussed way back in Chapters 3 and 4, the handler function 
accepts an http.ResponseWriter instance and the http.Request itself. This 
handler is pretty boring. It logs the common name of the client certificate 
received v. The common name is accessed by inspecting the http.Request’s 
TLS field and drilling down into the certificate PeerCertificates data. The 
handler function also sends the client a message indicating that authentica-
tion was successful. 
But how do you define which clients are authorized, and how do you 
authenticate them? The process is fairly painless. You first read the client’s 
certificate from the PEM file the client created previously w. Because it’s 
possible to have more than one authorized client certificate, you create 
a certificate pool and call pool.AppendCertsFromPEM(clientCert) to add the 
client certificate to your pool x. You perform this step for each additional 
client you wish to authenticate. 
Next, you create your TLS configuration. You explicitly set the ClientCAs 
field to your pool and configure ClientAuth to tls.RequireAndVerifyClientCert y. 
前沿信安资讯阵地  公众号：i nf osrc
250   Chapter 11
This configuration defines your pool of authorized clients and requires 
clients to properly identify themselves before they’ll be allowed to proceed. 
You issue a call to tlsConf.BuildNameToCertificate() so that the client’s com-
mon and subject alternate names—the domain names for which the cer-
tificate was generated—will properly map to their given certificate z. You 
define your HTTP server, explicitly setting your custom configuration {, 
and start the server by calling server.ListenAndServeTLS(), passing to it the 
server certificate and private-key files you created previously |. Note that 
you don’t use the client’s private-key file anywhere in the server code. As 
we’ve said before, the private key remains private; your server will be able 
to identify and authorize clients by using only the client’s public key. This is 
the brilliance of public-key crypto.
You can validate your server by using curl. If you generate and supply a 
bogus, unauthorized client certificate and key, you’ll be greeted with a ver-
bose message telling you so:
$ curl -ik -X GET --cert badCrt.pem --key badKey.pem \
  https://server.blackhat-go.local:9443/hello
curl: (35) gnutls_handshake() failed: Certificate is bad
You’ll also get a more verbose message on the server, something like this:
http: TLS handshake error from 127.0.0.1:61682: remote error: tls: unknown certificate authority
On the flip side, if you supply the valid certificate and the key that 
matches the certificate configured in the server pool, you’ll enjoy a small 
moment of glory as it successfully authenticates: