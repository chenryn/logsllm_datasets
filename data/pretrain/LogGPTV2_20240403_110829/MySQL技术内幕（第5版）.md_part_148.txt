它指的是从服务
MySQL5.6.3里引人的。
它指的是从服务器的执行模式，取值可以为 STRICT（默认）或IDEMPOTENT。后面那个设
支持使用压缩协议才行。
此变量决定着是否要对从服务器和主服务器之间的通信进行压缩。这需要主、
器
1GB。
径
如
“键未找到”的错误。
置
附录 D系统变量、状态变量和用户变量参考
底解决更好。）如果此变量的值为al1，则会忽略所有的错误。否则，此变量的值应该是
复制过程挂走
果启用了从服务器多线程执行（请参考slave_parallel_threads），则此变量控
上接收到的所有事件的那个SQL线程，实际上会变成执行这些事件的那个工作线程
名。此变量的默认值是系统变量tmpdir的值。
果服务器是一个复制从服务器，那么它指的是用于处理LOADDATA语句的那个目录的路
对于涉及循环或多个主服务器的复制拓扑可能很有用，可用于防止出现“键重复”和
误，复制过程会
服务器的SQL线程是否应该验证中继日志里读取到的事件的校验和。如果校验
起。
会停止。默认值为OFF。此变量是在MySQL5.6.2里引入的。
（不过，与利用这个选项来忽略错误的做法相比，还是找出问题的根源并
：直接设置；作用范围：全局；动态）
。任何线程的创建时间超过这个值时，都会导致状
、从服务器都
务
---
## Page 647
口
口
口s
口
 sql_big_selects（作用范围：全局、会话；动态）
口 sql_auto_is_null（作用范围：全局、会话；动态）
口
口slow_query_log_file（启动：直接设置；作用范围：全局；动态）
口slow_query_log（启动：直接设置；作用范围：全局；动态）
便地一次设置多种SQL模式。模式值不区分大小写。
为。其他的则是复合模式，每种复合 SQL模式涵盖多种简单 SQL模式，这使得用户可以方
之前的版本，其值为空串。有些模式值很简单，它们可以单独使用以启用某种特定的行
而构成的一系列值。自MySQL 5.6.6起，其默认值为 NO_ENGINE_SUBSTITUTION；而对于
串（这将清除以前设置的SQL模式）或者是由下面将要介绍的一个或多个模式值以逗号分隔
准或是与其他数据库服务器或老版本的 MySQL服务器保持兼容。此变量的值应该是一个空
服务器的SQL模式。这个变量将改变MySQL服务器的某些行为，使它更符合SQL语言标
sql_mode（启动：直接设置；作用范围：全局、会话；动态）
此。该变量只有在启用普通查询日志记录的情况下才会发挥作用。
将这个变量的会话值设置为0或1，可以启用或禁用当前客户端会话的普通查询日志记录。
sql_log_off（作用范围：全后
该
将这个变量的会计
sql_log_bin（作用范围：全局、会话；动态）
将此变量设置为1，会导致服务器使用内部临时表来保存 SELECT语句的结果。带来的效果
将max_join_size设置为DEFAULT以外的某个值，会自动将sql_big_selects 设置为0。
max_join_size的值，那么服务器将返回一个错误，而不会执行该查询。
max_join_size的值：服务器会对它需要检查的行组合数量进行估算，如果该值超过
认），服务器会接受那些返回任意大小结果集的查询。如果 sql_big_selects为0，服多
服务器会把此变量与系统变量max_join_size一起使用。如果 sql_big_selects 为1(默
5.5.3之前默认为1）。
在
是
ODBC 程序会使用此功能。
IS NULL形式的子句来进行查询，其中，col_name是AUTO_INCREMENT 列的名称。有些
如果此变量设置为1，那么最近生成的AUTO_INCREMENT值可以选择使用WHEREcol_name
一时间进行排序操作，就不应该把这个值设置得很大（超过1MB）。
供那些用来完成排序操作（GROUP BY 或ORDER BY）的线程使用的缓冲区的大小。如有必
它指的是Unix域套接字的路径名或Windows中命名管道的名字。
socket（启动：直接设置；作用范围：全局）
件名是以相对路径形式给出的，则服务器会将它解释为相对于数据目录。
据目录里的HOSTNAME-slow.1og文件，其中，HOSTNAME是服务器主机的名字。如果其文
它指的是慢查询日志文件的名字。在
输出目标。
它用于指定是否要启用慢查询日志记录。如果要启用，则 log_output 变量会控制日志的
要
运行时，客户端必须拥有 SUPER权限才能更改这个变量，即使是更改其会话值也是如
变量只有在启用二进制日志记录的情况下才会发挥作用。
行时，客户端必须拥有SUPER权限才能更改这个变量，即使是更改其会话值也是如此。
会拒绝那些有可能返回大量行的查询。在这种情况下，执行连接操作时，会使月
，
，每个客户端都能分配到一个这样的缓冲区。
服务器可以快速地释放由生成结果的那个表所占用的锁。默认值为0。
话值设置为0或1，可以禁用或启用当前客户端会话的二进制日志记录。在
，如果要禁用它，
局、会话；动态）
在启用了FILE日志目标时，会用到它。它的默认值是数
，可以将此变量设置为0。默认是0（在MySQL
。一般来说，如果你有许多个客户端会在同
D.1系统变量
627
一
用
务
---
## Page 648
628
NO_AUTO_VALUE_ON_ZERO
NO_AUTO_CREATE_USER
口
HIGH_NOT_PRECEDENCE
ALLOW_INVALID_DATES
下面列出了一些简单的SQL模式值。
细的讨论。
严格。本书的3.3节对严格模式和其他几个会对输入数据处理产生影响的SQL模式进行了详
STRICT_TRANS_TABLES和STRICT_ALL_TABLES，以便让服务器在对数据进行检查时更力
术语“严格模式”（strict mode）指的是这样一种sql_mode设置：它启用了
口
附录D系统变量、状态变量和用户变量参考
模式，那么会出现一个错误，并且该表不会被创建（或更改)。如果禁用了此模式，那么
定的存储引擎不可用——此时，这个模式便决定着服务器将如何处理它们。如果启用了此
当服务器遇到带有ENGINE选项的CREATETABLE或ALTER TABLE语句时，该模式所指
INO_ENGINE_SUBSTITUTION
表选项。
NO_DIR_IN_CREATE
而不是当作一个字符串的转义字符。
NO_BACKSLASH_ESCAPES
防止GRANT 语句创建不安全的新账户。也就是说，如果某个账户不存在，那么 GRANT会
保留字。
那个左括号必须紧跟在函数名的后面，其中间不允许有间隔。此模式会使函数名被当作
让服务器忽略内建函数名与引入参数表的那个左括号“（”之间的空格。默认情况下，
IGNORE_SPACE
此模式可以更改NOT操作符的优先级，使其与！操作符的优先级相同。
忽
如
列
执
IGNORE。
新时出现错误，并且产生一个NULL值和警告信息，可以使用INSERTIGNORE或UPDATE
会
模式将更改这种行为。如果没有启用严格模式，那么以零为除数时结果将为NULL值，但
的结果通常是NULL，且不会返回任何警告信息。启用ERROR_FOR_DIVISION_BY_ZERO
对于行插人或修改操作，即使是在严格模式下，以零为除数的除法（或求余数）运算得到
ERROR_FOR_DIVISION_BY_ZERO
符串使用的引号字符。（不管这个模式是否启用，都可以用反引号来当作名字的引号字符。)
把双引号字符解释为供标识符（如数据库名、表名和列名）使用的引号字符，而不是供字
ANSI_QUOTES
不管是否启用了这个SQL模式，它们都必须是有效的。
月份的取值范围必须为1~12,日期的取值范围必须为1到31。但TIMASTAMP值是个例外：
在严格模式里，禁止对 DATE 和DATETIME 值进行全面的日期有效性检查。唯一的要求是
国
略 CREATE TABLE 和 ALTER TABLE语句里的 DATA DIRECTORY 和 INDEX DIRECTORY
和果启用了这个模式，那么反斜线字符（“\"）将被当作一个没有特殊含义的普通字符，
里插入0将会把数字0存入该列。
成下一个序列编号，并把它保存在该列里。如果启用了此模式，那么往AUTO_INCREMENT
直常情况下，把O插入一个AUTO_INCREMENT列，等效于插入NULL值：MySQL将自动
句，或者包含有一个指定身份验证插件的IDENTIFIEDWITH子句。
行失败，并且不会创建账户，除非该语句包含一个指定有非空密码的IDENTIFIED
以零为除数的情况时，将产生一个错误，并且该语句会失败。如果想要禁止在插入或更
返回一条警告信息；如果启用了严格模式，那么在执行INSERT或UPDATE语句期间遇
BY
加
---
## Page 649
STRICT_TRANS_TABLES
STRICT_ALL_TABLES
口
NO_ZERO_IN_DATE
口
NO_UNSIGNED_SUBTRACTION
如果启用了这个模式，
口
口
MySQL拒绝接受绝大多数非法值。如果想要更加严格，可以使用TRADITIONAL模式。
如果启用了这个模式，那么所有的存储引擎都将对输人数据做更严格的检查，这将导致
如果启用了这个模式，那么数据类型REAL将与FLOAT同义，而不是等同于DOUBLE。
INSERT 语句)，非事务型存储引擎也将对输入数据做严格的检查。如果想要更加严格，可
如果启用了这个模式，那么事务型存储引擎将对输入数据值做严格的检查，这将导致
以使用TRADITIONAL模式。
REAL_AS_FLOAT
PIPES_AS_CONCAT
MySQL拒绝接受绝大多数非法值。在此基础上，只要有可能（例如，遇到插入单个行的
服务器将禁止删除CHAR列的尾部空格，这样，检索到的值的长度就等于列的定义宽度。
通常情况下，服务器在检索CHAR列值时会删除其尾部空格。如果启用了这个模式，MySQL
SELECT a，b, COUNT(*） FROM t GROUP BY a，b;
ONLY_FULL_GROOUP_BY标志要求非聚合型输出列(或HAVING列)都被列在GROUPBY里：
通常情况下，MySQL允许SELECT语句的输出列列表里带有非聚合型列，或者使用不是
ONLY_FULL_GROUP_BY
IGNORE语句，MySQL将把这样的日期值保存为·0000-00-00＇。
情况下，MySQL允许存储这样的日期值。在非严格模式下，或者如果用户发出的是INSERT
在严格模式下，拒绝接受月或日部分是零的日期值。（年份是零的日期值是允许的。）通常
法来覆盖。
在严格模式下，拒绝接受+0000-00-00·作为一个有效日期值。通常情况下，MySQL允许
NO_ZERO_DATE
这样做，可以与MySQL4.0版之前的行为保持兼容。
果就将是一个无符号整数。启用这个模式，可以使上述运算的结果是一个带符号整数一
默认情况下，如果在参与整数减法运算的两个操作数里有一个是无符号整数，那么计算结
了让这条语句的输出有更好的可移植性。
让 SHOWCREATETABLE语句的输出不包含MySQL独有的与表有关的选项，其目的是为
NO_TABLE_OPTIONS
为了让这条语句的输出有更好的可移植性。
让 SHOW CREATE TABLE语句的输出不包含MySQL独有的与索引有关的选项，其目的是
NO_KEY_OPTIONS
了让这条语句的输出有更好的可移植性。
让 SHOW CREATE TABLE 语句的输出不包含 MySQL 独有的与列有关的选项，其目的是为
SELECT a,b,COUNT(*) FROM t GROUP BY a;
列
允许替换为默认的存储引擎。
在GROUPBY子句里的HAVING子句。例如：
储“零”
日期值。这个模式可以通过使用INSERTIGNORE语句代替INSERT语句的办
，那么丨将被解释为字符串连接操作符，而不会解释为逻辑或。
D.1系统变量
629
---
## Page 650
630
 ssl_xxx
 sql_slave_skip_counter（作用范围：全局；动态）
口
口
口
ssl_xxx
会报告）。对于默认值O，则只会针对插入多个行的INSERT语句报告警告统计信息。
如果将此变量设置为1，那么MySQL会报告警告统计信息（即使对于单个行的插入操作也
sql_warnings（作用范围：全局、会话；动态）
件）的中间，那么从服务器还会跳过该组里的其余事件。
下来从其主服务器接收到的n个事件。如果最后的位置位于一组事件（如某个事务的一组事
拥有SUPER权限的用户可以把此变量当作GLOBAL变量设置为n，告诉复制从服务器跳过接
对于存储例程或那些不会把行返回给客户端的 SELECT 操作（如子查询、
的值，可以使用值DEFAULT来恢复其默认值。
的优先级要高于此变量。默认值为每个表所能容纳的最大行数。
此变量指定的是SELECT语句返回的最大行数。如果显式地给出了LIMIT子句，那么该子句
sql_select_limit（作用范围：全局、会话；动态）
子句，服务器才会接受UPDATE和DELETE。当使用默认值O时，无这种限制。
如果将此变量设置为1，那么只有这些被修改的行是通过键值来确定的，或者使用了LIMIT
sql_safe_updates（作用范围：全局、会话；动态）
如果禁用了SQL 模式ANSI_QUOTES，
保留字或者没有包含特殊字符。
CREATE TABLE语句时，不使用引号会带来好处。如果禁用引号，则一定要确保表没有使用
用引号）。将此变量设置为0，可以不要求使用引号。当生产用于其他数据库服务器自
此变量控制的是，在语句 SHOW CREATE TABLE 和 SHOW CREATE DATABASE 的输出结果身
sql_quote_show_create（作用范围：全局、会话；动态）
号
将此变量设置为0或1（默认值），可以控制服务器是禁止还是记录Note级的警告。
sql_log_off（作用范围：全局、会话；动态）
是对于更加严格的检查又包含了几个附加的约束。
之所以称之为TRADITIONAL模式，是因为它启用这样的模式一
下表列出的是复合SQL模式，以及每种复合模式所包含的模式内容。
附录D系统变量、状态变量和用户变量参考
（"）。
否需要将标识符（数据库名、表名、列名和索引名）用引号引起来。默认为1（即需要
TRADITIONAL
POSTGRESQL
ORACLE
MYSQL40
MYSQL323
MSSQL
MAXDB