PostgreSQL
Foreign Data Wrappers
(pg_fdw)
Objectives
• Foreign Data Wrappers(FDW)简介与特性
• Postgres_FDW部署
• FDW执行原理
• 本地外部表操作
Foreign Data Wrappers
• Foreign Data Wrappers (FDW)
部署
FDW
• 部署FDW（在客户端部署）
1、编译postgres_fdw
cd /soft/postgresql-12.2/contrib/postgres_fdw
make
make install
2、安装postgres_fdw (哪个database上使用，就在哪个database上安装）
create extension postgres_fdw;
部署
FDW
• 部署FDW（续）
3、创建fdw服务器
CREATE SERVER pgdb FOREIGN DATA WRAPPER postgres_fdw
OPTIONS (host 'pg2',port '1922',dbname 'testdb');
Host：远程主机名、ip地址
Port：远程数据库监听端口
Dbname：远程服务器名字
4、授权
GRANT USAGE ON FOREIGN SERVER pgdb TO pg_fdw1;
部署
FDW
• 部署FDW（续）
5、创建用户映射（本地用户与远程用户映射）
CREATE USER MAPPING FOR pg_fdw1 SERVER pgdb
OPTIONS (user 'scott', password 'tiger');
user：远程数据库用户
password：用户密码
6、创建FDW表（以pg_fdw1用户创建）
GRANT USAGE ON FOREIGN SERVER pgdb TO scott_pg;
部署
FDW
• 部署FDW（续）
6、创建FDW表（以pg_fdw1用户创建）
CREATE FOREIGN TABLE emp_fdw (
EMPNO int ,
ENAME VARCHAR(10),
JOB VARCHAR(9),
MGR int,
HIREDATE date,
SAL float4,
COMM float4,
DEPTNO int
) SERVER pgdb OPTIONS (schema_name 'public', table_name 'emp');
Schema_name：public，特定schema用户创建的表，则写该schema名字
Table_name：需要访问的表表名
部署
FDW
• 部署FDW（续）
7、创建FDW表（以pg_fdw1用户创建）
CREATE FOREIGN TABLE dept_fdw (
deptno integer,
dname character varying(14),
loc character varying(13)
)SERVER pgdb OPTIONS (schema_name ‘public', table_name 'dept');;
Schema_name：public，特定schema用户创建的表，则写该schema名字
Table_name：需要访问的表表名
部署
FDW
• 部署FDW（续）
8、访问FDW表（以pg_fdw1用户访问）
SELECT * FROM emp_fdw;
SELECT * FROM dept_fdw;
*访问FDW表的语法与访问本地表一样。
原理
FDW
• FDW执行流程
原理
FDW
• FDW执行流程
1、Creating a Query Tree（访问pg_catalog.pg_class和pg_catalog.pg_foreign_table）
2、Connecting to the Remote Server（使用libpq库）
3、Creating a Plan Tree Using EXPLAIN Commands (Optional)（访问
pg_catalog.pg_user_mapping和pg_catalog.pg_foreign_server）
4、Deparesing（postgres_fdw从通过解析和分析创建的查询树中重新创建一个纯文本
文件，在PostgreSQL中称为deparsing。）
5、Sending SQL Statements and Receiving Result
原理
FDW
• FDW执行流程（PG-PG）
在远程服务器端打开日志，可以查看
到访问流程：
log_destination = 'csvlog'
logging_collector = on
log_directory = 'pg_log
log_filename = 'postgresql-%Y-%m-%d'
log_truncate_on_rotation = off
log_rotation_age = 1d
log_rotation_size = 0
log_error_verbosity = verbose
log_statement = all
原理
FDW
• 版本演进
各个版本功能演进
Version Description
9.3 postgres_fdw module is released.
9.6
• Consider performing sorts on the remote server.
• Consider performing joins on the remote server.
• When feasible, perform UPDATE or DELETE entirely on the remote
server.
• Allow the fetch size to be set as a server or table option.
10 Push aggregate functions to the remote server, when possible.
原理
FDW
• 执行DML操作（PG-PG支持DML操作，其它不支持）
PostgreSQL_FDW不会检测死锁
localdb=# -- Client A localdb=# -- Client B
localdb=# BEGIN; localdb=# BEGIN;
BEGIN BEGIN
localdb=# UPDATE tbl_local SET data = 0 WHERE localdb=# UPDATE tbl_remote SET data = 0
id = 1; WHERE id = 1;
UPDATE 1 UPDATE 1
localdb=# UPDATE tbl_remote SET data = 0 localdb=# UPDATE tbl_local SET data = 0
WHERE id = 1; WHERE id = 1;
UPDATE 1 UPDATE 1
原理
FDW
• 多表查询
Version 9.6以前版本
localdb=# EXPLAIN verbose SELECT * FROM tbl_a AS a, tbl_b AS b WHERE a.id = b.id AND a.id
 Sort (cost=200.59..202.72 rows=853 width=8)
Sort Key: a.id
-> Foreign Scan on tbl_a a (cost=100.00..159.06 rows=853 width=8)
-> Sort (cost=331.72..338.12 rows=2560 width=8)
Sort Key: b.id
-> Foreign Scan on tbl_b b (cost=100.00..186.80 rows=2560 width=8)
(8 rows)
原理
FDW
• 多表查询
（PG-PG）如果使用ALTER SERVER命令将use_remote_estimate选项设置为on，则计划器
将通过执行EXPLAIN命令向远程服务器查询计划的成本，此时连接操作在远程进行，提
高性能。
ALTER SERVER pgdb OPTIONS (use_remote_estimate 'on');
\des+
localdb=# EXPLAIN verbose SELECT * FROM tbl_a AS a, tbl_b AS b WHERE a.id = b.id AND a.id  Foreign Scan on tbl_a a (cost=100.00..159.06 rows=853 width=8)
(3 rows)
原理
FDW
• 排序操作
在9.6或以后版本中：
localdb=# EXPLAIN verbose SELECT * FROM tbl_a AS a WHERE a.id  Foreign Scan on tbl_a a (cost=100.00..166.06 rows=975 width=4)
(2 rows)
原理
FDW
• 聚组函数操作
在10或以后版本中：
localdb=# EXPLAIN verbose SELECT AVG(data) FROM tbl_a AS a WHERE a.id < 200;
QUERY PLAN
-----------------------------------------------------
Foreign Scan (cost=102.44..149.03 rows=1 width=32)
Relations: Aggregate on (public.tbl_a a)
(2 rows)
本地外部表
• 本地外部表
1、--添加扩展
CREATE EXTENSION file_fdw;
2、--创建SERVER FOR file
create server pg_file_server foreign data wrapper file_fdw;
本地外部表
• 本地外部表
3、--创建外部表，与外部文件结构一致
create foreign table emp_file_fdw
(EMPNO int,
ENAME varchar(10),
JOB varchar(9),
MGR int,
HIREDATE DATE,
SAL int,
COMM int,
DEPTNO int)
server pg_file_server
options(filename '/home/postgres/emp.csv',format 'csv',header 'true',delimiter ',');
总结
• Foreign Data Wrappers(FDW)简介与特性
• Postgres_FDW部署
• FDW执行原理
• 本地外部表操作
练习
• 1、配置postgresql.conf, 开启csvlog. 开启log statement=all.
• 2、创建file_fdw插件
• 3、使用file_fdw创建postgresql日志csv文件的外部表, 并使用SQL分析csv文件的内容.