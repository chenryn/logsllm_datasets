title:binpac: a yacc for writing application protocol parsers
author:Ruoming Pang and
Vern Paxson and
Robin Sommer and
Larry L. Peterson
binpac: A yacc for Writing Application Protocol Parsers
Ruoming Pang∗
Google, Inc.
New York, NY, USA
PI:EMAIL
International Computer Science Institute
Robin Sommer
Berkeley, CA, USA
PI:EMAIL
ABSTRACT
A key step in the semantic analysis of network trafﬁc is to parse the
trafﬁc stream according to the high-level protocols it contains. This
process transforms raw bytes into structured, typed, and semanti-
cally meaningful data ﬁelds that provide a high-level representation
of the trafﬁc. However, constructing protocol parsers by hand is a
tedious and error-prone affair due to the complexity and sheer num-
ber of application protocols.
This paper presents binpac, a declarative language and com-
piler designed to simplify the task of constructing robust and efﬁ-
cient semantic analyzers for complex network protocols. We dis-
cuss the design of the binpac language and a range of issues
in generating efﬁcient parsers from high-level speciﬁcations. We
have used binpac to build several protocol parsers for the “Bro”
network intrusion detection system, replacing some of its existing
analyzers (handcrafted in C++), and supplementing its operation
with analyzers for new protocols. We can then use Bro’s power-
ful scripting language to express application-level analysis of net-
work trafﬁc in high-level terms that are both concise and expres-
sive. binpac is now part of the open-source Bro distribution.
Categories and Subject Descriptors: C.2.2 [Network Protocols]:
Applications
General Terms: Languages
Keywords: Parser Generator, Protocol
1.
INTRODUCTION
Many network measurement studies involve analyzing network
trafﬁc in application-layer terms. For example, when studying Web
trafﬁc [2, 13] one often must parse HTTP headers to extract infor-
mation about message length, content type, and caching behavior.
∗
The work was mostly done while the author was with Princeton University.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
Vern Paxson
International Computer Science Institute and
Lawrence Berkeley National Laboratory
Berkeley, CA, USA
PI:EMAIL
Larry Peterson
Princeton University
Princeton, NJ, USA
PI:EMAIL
Similarly, studies of Email trafﬁc [21, 46], peer-to-peer applica-
tions [37], online gaming, and Internet attacks [29] require under-
standing application-level trafﬁc semantics. However, it is tedious,
error-prone, and sometimes prohibitively time-consuming to build
application-level analysis tools from scratch, due to the complexity
of dealing with low-level trafﬁc data.
We can signiﬁcantly simplify the process if we can leverage a
common platform for various kinds of application-level trafﬁc anal-
ysis. A key element of such a platform is application-protocol
parsers that translate packet streams into high-level representations
of the trafﬁc, on top of which we can then use measurement scripts
that manipulate semantically meaningful data elements such as
HTTP content types or Email senders/recipients, instead of raw IP
packets. Application-protocol parsers are also useful beyond net-
work measurements—they form important components of network
monitoring tools (e.g., tcpdump [19], Ethereal [12], NetDude [24,
23]), real-time network intrusion detection systems (e.g., Snort [35,
36] and Bro [31]), smart ﬁrewalls, and application layer proxies.
Building application-protocol parsers might appear straightfor-
ward at ﬁrst glance, given a speciﬁcation of the corresponding pro-
tocol. In practice, however, writing an efﬁcient and robust parser
is surprisingly difﬁcult for a number of reasons. First, many of
today’s protocols are complex. For example, when analyzing the
predominant HTTP protocol [14], one has to deal with pipelined
requests, chunked data transfers, and MIME multipart bodies. The
NetWare Core Protocol [33]—a common protocol used for remote
ﬁle access—has about 400 individual request types, each with a dis-
tinct syntax. Second, even for simpler protocols, it is tedious and
error-prone to manually write code to parse their structure: the code
must handle thousands of connections in real-time to cope with
the trafﬁc in large networks, and protocol speciﬁcations are seldom
comprehensive (i.e., they often ignore corner-cases, which a parser
nevertheless must handle robustly as they do occur in real-world
trafﬁc). In potentially adversarial environments, an attacker may
even deliberately craft ambiguous or non-conforming trafﬁc [34,
17]. Furthermore, several severe vulnerabilities have been discov-
ered in existing protocol parsers ([41, 42, 43, 44])—including one
which enabled a worm to propagate through 12,000 deployments
of a security product worldwide in tens of minutes [38, 25]—which
demonstrates how difﬁcult it is to comprehensively accommodate
non-conforming input with hand-written code.
Given the care that writing a good protocol analyzer requires,
it is unfortunate that existing analyzers are generally not reusable,
because their operation is usually tightly coupled with their spe-
ciﬁc application environments. For instance, the two major open-
source network intrusion detection systems (NIDSs), Snort [36]
and Bro [31], both provide their own HTTP analyzers, each ex-
hibiting different features and shortcomings. Ethereal contains a
huge collection of protocol parsers, but it is very difﬁcult to reuse
them for, e.g., Bro due to their quite different interfaces and data
structures. Even inside a single software product, low-level code is
generally inlined rather than factored into modules. For example,
the Ethereal version 0.99 source code contains more than 8,000 in-
stances of incrementing or decrementing by a hard-coded numeric
constant, the vast majority of which are adjusting a pointer or a
length while stepping through a buffer. Any instance of an incor-
rect constant can of course result in an incorrect parsing of a pro-
tocol, but is not detectable at compile-time since using the wrong
numeric constant still type-checks.
We believe that the major reason for all of these difﬁculties is a
signiﬁcant lack of abstraction. In the programming language com-
munity, no one writes parsers manually.
Instead, there are tools
like yacc [20] and ANTLR [30] that support declarative program-
ming: one expresses the syntax of the language of interest in a high-
level meta-grammar, along with associated semantics. The parser
generator then translates the speciﬁcation into low-level code auto-
matically. In this work, we propose to use similar abstractions for
application-layer network protocols. By doing so, users building
analyzers can concentrate on high-level protocol semantics, while
at the same time achieving correctness, robustness, efﬁciency, and
reusability.
However, we observe that existing parser-generation tools are
not suitable for parsing network protocols. Common idioms of net-
work protocols, such as data ﬁelds preceded by their actual length
(sometimes not adjacent), cannot be easily expressed as a context-
free grammar. Furthermore, when analyzing protocols, we often
need to correlate across the two directions of a single connection;
sometimes even syntax depends on the semantics of the byte stream
in the other direction. Finally, parsers generated by these tools pro-
cess input in a “pull” mode and thus cannot concurrently parse mul-
tiple, incomplete input streams.
To improve this situation we designed and implemented
binpac—a declarative language and its compiler—to simplify the
task of building protocol analyzers. Users specify parsers by deﬁn-
ing message formats, dependencies between message ﬁelds, and
additional computations to perform (e.g., printing ASCII records
or triggering further analysis) upon parsing different message ele-
ments. The compiler translates the declarations into parsers in C++.
binpac takes care of all the common and tedious (and thus error-
prone) low-level tasks, such as byte-order handling, application-
layer fragment reassembly, incremental input, boundary checking,
and support for debugging. binpac also facilitates protocol parser
reuse by supporting separation of different components of analyz-
ers. One can readily plug in or remove one part of a protocol an-
alyzer without modifying others. Such separation allows analysis-
independent protocol speciﬁcations to be reused by different analy-
sis tasks, and simpliﬁes the task of protocol extension (for example,
adding or removing NFS to the RPC parser).
Our goal is to ensure that the generated parsers are as efﬁcient
as carefully hand-written ones, so that they can handle large traf-
ﬁc volumes. Our main strategy is to leverage data dependency
analysis—to tailor the generated parser to the analysis require-
ments at compilation time. For example, binpac identiﬁes ap-
propriate units for buffering of incomplete input based on the data
layout speciﬁed by the user.
To demonstrate the power of our approach, we have used
binpac to build several protocol parsers for the Bro NIDS, in-
cluding HTTP, DNS, CIFS/SMB, DCE/RPC, NCP, and Sun RPC.
(We emphasize that binpac is not however tied in any signiﬁcant
way to Bro.) Having written many protocol analyzers manually in
the past, our experience is that binpac greatly eases the process.
In future work we envision further using these binpac speciﬁca-
tions to compile analyzers to alternative execution models: in par-
ticular, directly to custom hardware, without any intermediate C++
code, as sketched in [32].
The rest of this paper is organized as follows. We begin with
related work in Section 2. In Section 3 we discuss speciﬁc charac-
teristics of application protocols compared to languages targeted by
traditional parser-generators. Section 4 describes the binpac lan-
guage for specifying protocols and how the user associates seman-
tic protocol analysis along with the description. Section 5 discusses
the process of generating a parser from a binpac speciﬁcation,
including handling incremental input as well as performing robust
error detection and recovery. Section 6 presents our experiences
with using binpac to develop protocol parsers for the Bro NIDS,
and we compare their performance with that of manually written
ones. We summarize and present future directions in Section 7.
2. RELATED WORK
Considerable previous work has addressed facets of describing
data and protocol layouts using declarative languages. First, there
are various Interface Description Languages for describing the ser-
vice interface for speciﬁc protocols. For instance, the External Data
Representation Standard (XDR) [40] deﬁnes the way to describe
procedure parameters and return values for the Remote Procedure
Call (RPC) protocol [39]. The XDR compiler generates the under-
lying code to marshal/unmarshal data to/from raw bytes. Targeting
a wider range of protocols, ASN.1 [3] is a language for describing
the abstract syntax of communication protocols, including a set of
encoding schemes. Unlike binpac, these languages dictate the
underlying data representation or focus on a speciﬁc type of proto-
col, while binpac tries to describe the data layout of a wide range
of existing (thus, already designed) protocols that span a variety of
formats and styles.
Augmented BNF (ABNF) [9] is used in many protocol standards
to specify the protocol syntax. However, the goal of ABNF is to
provide a concise, yet incomplete, way to deﬁne a protocol, rather
than for complete protocol speciﬁcation from which one can gen-
erate a parser. In addition, ABNF targets ASCII protocols.
People have also designed languages for writing network proto-
col implementations, including both protocol parsing and process-
ing logic. Abbott et al. [1] proposed a language for designing and
implementing new network protocols. Prolac [22] is a language for
writing modular implementations of networking protocols such as
TCP. Biagioni et al. [5] experimented with implementing a TCP/IP
network stack in ML. These efforts differ from binpac in that the
goal is to build end-system implementations, instead of analyzers,
of protocols. They also target protocols at the network and trans-
port layers, rather than the wide range of application protocols.
There is also a rich body of work, e.g. [18, 6], in formal veri-
ﬁcation of design of protocols and, more generally, asynchronous
process systems. These veriﬁcation frameworks focus on abstract
protocol behavior, instead of details of protocol syntax.
More related to binpac, there are efforts in the abstract de-
scription of existing protocol syntax. McCann and Chandra intro-
duced PACKETTYPES [26], a language that helps programmers to
handle binary data structures in network packets as if they were C
types. Borisov et al. designed and implemented GAPA [7], a frame-
work for application protocol analyzers. Its protocol speciﬁcation
language, GAPAL, is based on (augmented) BNF and supports both
ASCII and binary protocols. A protocol speciﬁcation in GAPAL
includes protocol syntax as well as analysis state and logic. While
GAPA and binpac both target application-level trafﬁc analysis in
general, they are designed with different sets of goals and therefore
take quite different approaches. GAPA targets trafﬁc analysis at
individual end hosts, and uses an interpreted, type-safe language.
The binpac compiler, on the other hand, generates C++ parsers
intended to process trafﬁc of much higher volume at network gate-
ways. Second, GAPA is a self-contained system that handles both
protocol parsing and trafﬁc analysis. binpac, on the other hand,
focuses on parser generation and is designed as a building block
for the construction of parsers that can be used by separate trafﬁc
analysis systems such as Bro.
Beyond network protocols, there are a number of languages for
describing data formats in general. DATASCRIPT [4] is a scripting
language with support for describing and parsing binary data. De-
veloped more recently, PADS is a language for describing ad hoc
data formats [15]. PADS’s approach to data layout description is
similar to that of binpac in a number of ways, such as the use of
parameterized types. On the other hand, it is designed for a more
general purpose than parsing network protocols, so it lacks abstrac-
tions and features particular to processing communication trafﬁc,
and the generated parsers cannot handle many input streams simul-
taneously. Related to PADS, Fisher et al. [16] described a calculus
for reasoning about properties and features of data description lan-
guages in general. The calculus is used to discover subtle bugs,
to prove the type correctness of PADS, and to guide the design of
language features.
Hand-written application-layer protocol parsers are an important
part of many network analysis tools. Packet monitors such as tcp-
dump [19], Ethereal [12], and DSniff [11] display protocol infor-
mation. NetDude [24, 23] provides both visualization and editing
of packet traces. NIDS such as Snort [36], Bro [31], and Network
Flight Recorder [28] analyze protocol communications to detect
malicious behavior. Protocol parsers are also components of smart
ﬁrewalls and application-layer proxies.
3. CHARACTERISTICS OF
APPLICATION PROTOCOLS
In this section we examine characteristics of network protocols
which differ signiﬁcantly from the sorts of languages targeted by
traditional parser-generators. We discuss them in terms of syntax
and grammar, input model, and robustness.
3.1 Syntax and Grammar Issues
In terms of syntax and grammar, application-layer protocols
can be broadly categorized into two classes: binary protocols and
human-readable ASCII protocols. The messages of binary pro-
tocols, like DNS and CIFS, consist of a (not necessarily ﬁxed)
number of data ﬁelds. These ﬁelds directly map to a set of ba-
sic data types such as integers and strings. Clear-text ASCII
protocols, on the other hand, typically restrict their payload to
a human-readable request/reply structure, using only printable
ASCII-characters. Many of these protocols, such as HTTP and
SMTP, are primarily line-based, i.e., requests/replies are separated
by carriage-return/line-feed (CR/LF) tuples, and their syntax is usu-
ally speciﬁed with grammar production rules in protocol standards.
While these two types of protocols appear to exhibit quite dis-
tinct language characteristics, we in fact ﬁnd enough underlying
commonality between binary and ASCII protocols that we can treat
both styles in a uniform fashion within declarative binpac spec-
iﬁcations, as we will develop below. On the other hand, there are
some critical differences between the grammars of network pro-
tocols (binary as well as ASCII) and those of programming lan-
guages:
Variable-length arrays. A common pattern in protocol syntax is
to use one ﬁeld to indicate the length of a later array. Such a length
ﬁeld often delimits the length of a subsequent (not necessarily con-
tiguous) byte sequence, e.g., the HTTP “Content-Length” ﬁeld, but
can also indicate the number of complex elements, such as in the
case of DNS [27] question and answer arrays. A conceptual variant
of variable-length arrays is padding, i.e., ﬁlling a ﬁeld with addi-
tional bytes to reach a speciﬁc length.
As long as the length-ﬁeld has constant width, it is theoretically
possible to describe arrays and padding with a context-free gram-
mar. However, doing so is cumbersome and leads to complex gram-
mars.
Selecting among grammar production rules. Both binary and
ASCII protocols often use one or multiple data ﬁelds to select the
interpretation of a subsequent element from a range of options. For
example, DNS uses a type ﬁeld to differentiate between various
kinds of “resource records”. HTTP uses multiple header ﬁelds
to determine whether the message body is a consecutive byte se-
quence, a sequence of byte chunks, or multipart entities. Some-
times the selector even comes from the opposite ﬂow of the con-
nection, e.g., the syntax of a SUN/RPC reply depends on program
and procedure ﬁelds in the corresponding RPC call [39]. In general
such a selector can be easily expressed in a grammar by param-
eterizing non-terminal symbols—a very limited form of context-
sensitive grammar which we describe later in Section 4.1.2, How-
ever it is very hard to specify a selector with a context-free gram-
mar.
Encoding. In binary protocols, record ﬁelds directly correspond to
values. Therefore it is crucial to consider the correct byte-encoding
when parsing ﬁelds. For example, integers are often either encoded
in big-endian or little-endian byte order. Similarly, string characters
may be given in a (single-byte) ASCII encoding or in a (two-byte)
Unicode representation. To complicate the problem, the byte order
need not be ﬁxed for a given protocol. For example, there is a ﬁeld
in DCE/RPC [10] header which explicitly indicates the byte order
in which subsequent integers are encoded. In CIFS [8], a similar
ﬁeld gives the character encoding for strings (which in fact does
not apply to all strings: certain ones are always in ASCII; similarly
in CIFS, not all integers use the same byte-order). Handling data
encoding is a tedious and error-prone task when writing a parser
manually, and it is hardly expressible by means of an LALR gram-