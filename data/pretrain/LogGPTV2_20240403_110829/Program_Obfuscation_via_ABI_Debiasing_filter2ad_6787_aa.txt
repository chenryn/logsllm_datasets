title:Program Obfuscation via ABI Debiasing
author:David Demicco and
Rukayat Erinfolami and
Aravind Prakash
Program Obfuscation via ABI Debiasing
David Demicco
Computer Science
Binghamton University
United States
PI:EMAIL
Rukayat Erinfolami
Computer Science
Binghamton University
United States
PI:EMAIL
Aravind Prakash
Computer Science
Binghamton University
United States
PI:EMAIL
ABSTRACT
The Itanium ABI is the most popular C++ ABI that defines data
structures essential to implement underlying object-oriented con-
cepts in C++. Specifically, name mangling rules, object and VTable
layouts, alignment, etc. are all mandated by the ABI. Adherence
to the ABI comes with undesirable side effects. While it allows
interoperability, past research efforts have shown that it provides
robust inference points that an attacker can leverage to reveal sensi-
tive design information through binary reverse engineering. In this
work, we aim to reduce the ability of an attacker to successfully
reverse engineer a binary. We do this via removal of what we call
ABI Bias, i.e., the reverse engineering bias that manifests due to a
compiler’s adherence to the ABI.
Specifically, we identify two types of ABI biases that are cen-
tral to past reverse engineering works on C++ binaries: VTable
ordering bias and Function Pointer bias. We present compiler-based
techniques that can correctly and efficiently debias a given binary
from the aforementioned biases. We evaluate our proof-of-concept
implementation on a corpus of real world programs for binary size,
correctness and performance. We report an average increase of
1.42% in binary size compared to the baseline, very low performance
overhead and lastly, correct execution of evaluation programs in
comparison to the baseline. Finally, we demonstrate efficacy of our
approach by hindering DeClassifier, a state-of-the-art C++ reverse
engineering framework.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation.
KEYWORDS
C++, security, reverse engineering
ACM Reference Format:
David Demicco, Rukayat Erinfolami, and Aravind Prakash. 2021. Program
Obfuscation via ABI Debiasing. In Annual Computer Security Applications
Conference (ACSAC ’21), December 6–10, 2021, Virtual Event, USA. ACM, New
York, NY, USA, 12 pages. https://doi.org/10.1145/3485832.3488017
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3488017
1 INTRODUCTION
Interfaces, particularly ABIs, are central to software re-usability
and interoperability. As such, multiple factors play a role during
ABI design. Ease and feasibility of implementation, performance,
and compliance to existing standards are key considerations and
frequently debated topics during ABI design [13].
Once standardized, ABIs must withstand the test of time and
offer very little room (if any) for modification. While popular ABIs
(e.g., Itanium ABI) have been successful in meeting the functional
and performance goals of modern software, their inability to adapt
to evolving security threats has been a problem. For instance, dis-
cussions in the mailing list archives for the cxx-abi discussion
group [13] typically originate with a sample implementation and
lack discussion on security implications including reversibility of bi-
naries.
A binary’s adherence to an ABI provides robust security-
sensitive inference points for reverse engineers. There are two types
of information that are of interest to a reverse engineer. On the one
hand, there is the valuable program logic itself. There has been a
substantial amount of work in the field of decompilation that aims
at program logic recovery. However, there has also been concerted
effort at obfuscation that aims to deter program logic recovery [17].
On the other hand, there is the high-level design information (e.g.,
class inheritance) that is revealed by the very virtue of adherence
to an ABI. In order to ensure interoperability, there can be no com-
promise on ABI adherance. In fact, recent efforts [7, 23, 28] have
shown that ABI adherence can indeed reveal sensitive high-level
semantics. For example, until recently, Itanium ABI [1] mandated
that secondary VTables of a complete-object VTable immediately
follow the primary VTable. While such a mandate may seem benign
and inconsequential, reverse engineers [7, 23] rely on such a strict
ordering of secondary VTables to recover valuable semantics (e.g.,
class inheritance graph) from the binary.
In fairness to the committee on Itanium ABI standard, the strict
ordering requirement has been recently relaxed (see [2] §2.5.2, last
para), however the relaxation is primarily motivated by performance
and ease of implementation, and not security and/or reversibility.
Furthermore, the LLVM and GCC compilers (two most popular
compilers that subscribe to the Itanium ABI) continue to emit VTa-
bles that conform to earlier versions of the ABI—i.e., secondary
VTables are emitted immediately after the primary VTable of a
complete-object VTable.
In this paper, we address the dichotomy that exists between a con-
stantly changing threat model and fairly stagnant ABIs. Specifically,
we define ABI-bias that aids in reverse engineering and present
compiler techniques that can eliminate bias—without compromising
the conformance of the binary to the ABI. We look at the C++ Itanium
ABI due to its wide commercial use and the attention it gets from
146ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
David Demicco, Rukayat Erinfolami, and Aravind Prakash
both attackers [4, 9, 25] and defenders [3, 14, 15, 19, 20, 22, 26, 27]
alike.
ABI Bias: We present the notion of ABI bias, a pro-reverse-
engineering bias that manifests due to a program’s conformance to
an ABI standard. Because these biases are inherent to ABI confor-
mance, they are impervious to obfuscation. While obfuscators can
hide program logic, conformance to ABI specification must be re-
tained in order to preserve interoperability. We focus on two specific
biases that are central to past reverse-engineering efforts on C++
binaries. First, there is the VTable ordering bias or VTBias that man-
ifests due to strong guarantees provided by the ABI regarding or-
dering of VTables of polymorphic classes. Past efforts [6, 21, 23, 28]
have relied on such an ordering to identify complete-object VTables
that uniquely represent polymorphic classes in the binary. Second,
there is the Function Pointer bias or FPBias that is a result of the
number of function pointers in a VTable. The number of function
pointers and their ordering reveal valuable inheritance information
in the binary. Past efforts [10, 11] have relied on this primitive to es-
tablish directionality of polymorphic inheritance graphs recovered
from C++ binaries.
We also present the notion of Lingering Bias. The idea that even
if an ABI is changed, programs that where created with the older
ABI can still leave important information available to reverse engi-
neers. This can happen when a change in the ABI[1] is backwards-
compatible.
We present principled compiler-based techniques to debias the
Itanium ABI. By focusing on insensitive aspects of the ABI that
do not impact program interoperability or execution (more in Sec-
tion 3), our solution eliminates bias and poses significant hurdles
to reverse engineering while preserving backward compatibility.
Particularly, we implement debiasing solutions against VT bias and
FP bias on the LLVM compiler while incurring near-zero runtime
overhead.
We applied our solution to a wide range of real world applications
with varying complexities (ranging from 944 to 14635 polymorphic
classes). Our results show that the file size increase for eliminating
VT bias is less than 0.1% in most cases. The file size overhead
introduced by elimination of FP bias varies depending on other
optimizations that are in place, however it typically stays < 2%. We
found the median runtime overhead while debiasing FP bias to be <
1%. We also tested our solution against DeClassifier [7], a modern
reverse engineering tool, demonstrating that it breaks the VTable
groupings it relies on leading to incorrect groupings and results.
Our contributions can be summarized as follows:
(1) We present the notion of ABI bias, a bias that aids in reverse
engineering by very virtue of conformance to an ABI. We
identify 2 distinct biases: VTable bias and Function-Pointer
bias that arise from the ABI requirement for how VTables
and functions within them must be laid out.
(2) We present an implementation based on the LLVM com-
piler that eliminates VT and FP biases while ensuring that
backward compatibility is not lost.
(3) We evaluate our solution against a corpus of 7 real-world
programs (including 2 C++ programs from SPEC 2017 suite)
and demonstrate correctness, interoperability and low per-
formance overhead.
(4) We demonstrate the efficacy of our solution against DeClas-
sifier, a modern reverse engineering tool.
The rest of the document is organized as follows. The Section 2
provides technical background necessary to understand the remain-
der of the paper, Section 3 presents an overview of our approach,
Section 4 and 5 present the technical details of our solution. Sec-
tions 6 and 7 present the evaluation and security analysis of our
work respectively. We present the related work in Section 8 and
finally conclude in Section 9.
2 BACKGROUND
2.1 Polymorphism in C++
Polymorphism is one of the features of C++ that allows functions to
behave differently depending on the runtime type of the object they
are invoked on. This capability can be implemented when there is
inheritance, that is one or more classes derived from one or more
other classes. A function in the base class can be overridden and
implemented differently in the derived class. Such functions must be
defined as virtual functions. A class that defines virtual function(s)
is referred to as a polymorphic class. The Itanium ABI [2] defines a
per-polymorphic-class structure called a VTable, which contains a
list of pointers to all virtual functions of that polymorphic class in
the order in which they are laid out in the source code. Function
pointers are used at runtime to dispatch virtual functions. Since
C++ permits a class to inherit directly from multiple classes (called
multiple inheritance), a class can comprise of more than one VTable
(or sub-VTables). The collection of all VTables belonging to a class
is referred to as a complete-object VTable. A class shares its primary
VTable with its primary base class and has secondary VTable(s)
corresponding to its secondary base(s).
An object of a class will contain multiple sub-objects if it inherits
from multiple bases. Like VTables, the derived class sub-object
is shared with the primary base and every secondary base has a
corresponding sub-object. The constructor of a class writes the
primary VTable pointer (vptr) into the primary sub-object and does
the same for the other sub-objects. Such patterns occur frequently
enough in practice to be a concern [8].
2.2 VTable Layout
A VTable contains some mandatory fields namely: OTT (offset-
to-top), RTTI (runtime type information) and one or more virtual
function pointers. The OTT specifies the offset that must be added
to the address of a sub-object to obtain the address of the com-
plete (derived) object. The OTT is zero for primary VTables and a
negative value for secondary VTables. The RTTI points to a struc-
ture that contains the class hierarchy information of a given class.
Specifically, it contains pointers to the RTTI of the base classes in
the order in which they occur in the class hierarchy. It is useful for
performing dynamic_cast to verify at runtime if the type an object
is to be cast is valid. RTTIs are generated only for polymorphic
classes. If RTTI is disabled (using -fno-rtti flag on g++), the RTTI
field of the VTable contains value zero. Lastly the virtual function
pointer fields point to virtual functions.
The primary VTable of a class contains the pointers to all the
functions defined by the primary base class (with overridden func-
tions replaced with pointers to the overriding functions), followed
147ABI Debiasing
ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
by the functions defined by the derived class including overridden
functions of secondary base(s). A secondary VTable contains point-
ers to functions defined in the secondary base, with overridden
functions replaced with “thunks" that perform necessary adjust-
ment to the this pointer before transferring control to the overriding
function in the primary VTable.
2.3 Object Memory Layout and VTable Pointers
The first item in a newly constructed polymorphic object is a VTable
pointer. The pointer to the object is referred to as the this pointer,
and it points to the VTable that is associated with this class in
memory, giving it access to the function pointers that are members
of the class. The VTable pointer is then followed by any other data
members the object contains, initialized (or not) by the constructor
during construction.
In the case of inheritance however, the constructor has a bit more
to do, and the layout in memory can get more complex. Consider
the simple case seen in Figure 1. The object consists of a pointer
to C’s VTable, followed by the data members of A, then a second
pointer to the VTable of B::C, followed by B’s data members, and
finally c’s data members. The ordering and layout of the VTable is
specified by the ABI.
Figure 1: Simple VTable layout in memory, showing VTable
Pointers.
2.4 ABI-Based Semantics Inference
The ABI’s specification on the implementation of certain aspects
of the C++ language provides robust means of inferring semantics
such as class hierarchy from the binary. Some existing hierarchy
recovery tools use analysis techniques that are based on such spec-
ifications.
VTable Scanning and Grouping. Almost all reverse engineering
efforts start by excavating VTables from binaries through a scan-
ning process, also known as VTable scanning (see Table 1, column
VTSc). First, distinct VTable signatures are derived from the ABI
Table 1: Binary level defenses and their adopted techniques.
VTSc: VTable scanning, VTG: VTable grouping, OA: Over-
write analysis, VTS: VTable size, CC: Constructor call.
Defense
DeClassifier [7]
vfGuard [23]
Marx [21]
ROCK [18]
SmartDec [10]
VCI [6]
VTSc
✓
✓