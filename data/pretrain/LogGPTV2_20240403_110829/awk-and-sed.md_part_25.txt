列
这里对规则以及与之相关的操作设置了编号，
束...
关的操作是在文件大小的位置上打印””。
件的大小。在规则3中我们测试一个目录，用”d”作为第一个字符来表示。
字符“_“，
用另一个模式来匹配行的第一个字符。在规则2中我们测试行的第一个位置
表示块总量的行匹配。因为我们希望对目录和文件做不同的处理，所以我
。因此，规则2和规则3测试NF是否等于9.这可以使我们避免与奇数空行
表包含文件的9个字段。Awk 在系统变量NF 中给出了一个记录中的字段的个
/~\..*:$/
NF == 1 
用&操作符将两个模式结合起来。两个模式都必须匹配表达式的值才为
#打印所有文件总的大小和文件数目
#5所有工作已完
#4 测试 Is -IR line./dir:
#1输出列的标题
#filesum：列出文件和总的字节数
END{
print"\t"$O #打印用制表符处理的行
print "",
print $5,
++filenum # 
BEGIN I print "BYTES",
#
Is -l $*丨 awk 
3
2
3测试9个字段，
2 测试9个字段，
输入：由命令“ls-丨“生成的长列表
，这表示一个文件。如果匹配则递增与之相关的文件计数器并累计
"\t",
QQ群：
系统文件个数
累
如果行以句点开头，其后跟有任意数量的字符并以冒号结
计文件大小
"\t", $9 # print  and name 
 $9 #打印大小和文件名
文件以"-"开始
目录由"d"开始
50192241
"\t"，"FILE" }
- 172
以便进行讨论。由Is－丨产生的
。规则2和规则3是符合表达
第七章 
编写 awk 脚本
---
## Page 173
d
C
字符
表 7-6：用在 printf 的格式说明符
示十进制整数（注7）。
它和格式说明相对应。在格式说明前面有一个百分号（%）
括起的字符串常量的形式提供。第二部分是一个参数列表，
其中的圆括号是可选的。
Printf语句的完整语法由两部分组成：
首先可以看出，printf 和 print 的主要区别是 printf 没有提供自动换行功
能
Printf 语句和print 语句一样可以打印一个简单的字符串。
awk 提供的 printf 可以代替 print 语句，printf 是借用了C程序设计语言。
的。程序filesum 可以很好地处理数据，但它的报告缺乏整齐的格式。
awk 的大多数功能是产生报告，因此以整齐的样式产生格式化报告是很重要
出进行适当的格式化。
到现在为止，我们编写的许多脚本可以很好地实现对数据的操作，
格式化打印
处理符号连接。
了）。如果想修改以上程序，可以为目录增加一个计数器，或简历一个规则来
写程序的一个很好的思路（尽管由于排版和草率的想法产生的语法错误被忽略
程序filesum演示了 awk 中的许多基本的结构。更重要的是，
规则5是END模式，它的操作只被执行一次，用于打印出文件总的尺寸和数
表
语句组成。
我们采用后面的表达式，
7-6 列出的字符之一。
。必须明确地为它指定
（~）来测试第一个字段是否匹配一个正则表达式。相关的操作只由一个print
printf ( for mat-expression [, ar guments] )
awk
$1
′BEGIN  printf ("Hello, world\n") }′
/^\..*:$/
十进制整数
ASCII字符
定义
QQ群：
，这是因为基本的print 语句所能做的工作有限。因为
。两个主要的格式说明符是s 和d，s 表示字符串，d表
定“\n”
第一部分是一个用来描述格式的表达式，
因为它似乎是最具有针对性的。它使用匹配操作符
50192241
如果域上匹配正则表达式..．
173
第七章
，而格式说明符号为
，例如变量名列表，
它提供了如何编
编写 awk 脚本
通常以引号
但没有对输
---
## Page 174
为向右对齐。必须指定“-”来设置左对齐。因此，
描述输出字段宽度的width是一个数值。
修饰符组成，跟在“%”后面，并出现在格式说明符之前。
Printf语句可以规定输出域的宽度和对齐方式。
注
注
8)。对每个格式说明必须提供一个相应的参数。
该语句输出$5的值，
段上的字符串和十进制值：
×
n
S
0
G
E
1
例在程序filenum的规则2中用Printf产生一个输出。它输出不同的两个字
.
7:
%-width. precision format-specifier 
printf("%d\t%s\n", $5, $9)
printf 进行舍入的方式在附录二中讨论。
行符，
将这条语句与filesum程序中打印标题行的语句进行比较。Print 语
句自动提供换行符（ORS 的值）；当使用 printf时，你必须提供换
字面字符%
无符号的十六进制，用A-F表示10-15
无符号的十六进制，用a-f 表示10-15
无符号的十进制
无符号的八进制
E或f的转换形式，
字符串
e 或千的转换形式，长度最短，末尾的0被去掉
浮点格式（[-]ddd.precision）
浮点格式（[-]d.precisionE[+-]dd)
浮点格式（[-]d.precisione[+-—]dd)
十进制整数（在POSIX中增加的)
它永远不会自动产生。
QQ群：
后面是制表符\t和$9、
50192241
长度最短，末尾的0被去掉
- 174 -
，当指定域宽度时，这个域的内容默认
然后输出一个换行符（\n）（注
一个格式表达式由3个可选的
“%-20s”输出的是向左对
第七章
编写 awk 脚本
---
## Page 175
使用格式表达式的完整语法可以解决filesum 中的各个字段和标题的对齐问
Print 语句输出数值的默认精度可以通过设置系统变量 OFMT 来改变。例如，如
在这个例子中，宽度是5，精度为3，要打印的值来自 myvar。
precision。通过用星号实际的值来实现这个功能：
可以根据 print 或 printf 的参数列表中的值，动态地指定宽度width 和精度
注意，数值的默认 precision值为“%.6g”
precision 修饰符用于十进制或浮点数，
结果是：
结果是：
这就是我们所希望的十进制值的表示。
域的宽度为15个字符并且字符左对齐。
我们来重新调整filesum报告的输出域。
法能够固定输出域的宽度，因此，每个域在相同的列开始。
的可能性更大，
果使用 awk 打印报告，其中包含美元（$）数值，可以将OFMT设置为
于字符串型值，
度。第一个例子是右对齐的文本：
个域在相同的位置开始。域宽度应放置在%和转换说明符之间。
齐的一个域长度为20个字符的字符串，如果字符串少于20个字符，那么这个
题
“%. 2f ”
。我们在文件名前输出文件大小的一个原因，
一个例子是左对齐的文本：
printf("%*,*g\n", 5, 3, myvar);
printf("l%-10sl\n", "hello")
printf("|%10s|\n", "hello")
[hello 
 hel lol
在很大程度上它们可以自己对齐。Printf提供给我们的解决方
它用于控制要打印的字符的最大数量。
QQ群：
50192241
- 175.
，我们希望得到最小的域宽度使得第二
用于控制小数点右边的数字位数。对
“%10d”中没有连字符，是右对齐的，
就是以这种顺序输出字段对齐
第七章 
“%-15s”规定
编写 awk 脚本
---
## Page 176
如果这个 shel丨脚本被命名为 awket，可以如下调用它：
数，依此类推）（注9）。例如，参阅前面命令的 shelI脚本：
在脚本中，
每一项都必须作为单一的参数来解释。因此，
脚本的后面，文件名前面。
变量，这个变量可以在 awk 脚本中访问。这个变量可以在命令行上设置，放在
向脚本传递参数
生如下的结果：
在 BEGIN 规则中的标题也被适当地改变了。通过使用 printf 语句。filesum 产
语句在END 中是如何被应用的：
这将产生一个报告，其中的数据按列对齐并且数字是右对齐的。看一下 printf 
（shelI按位置提供了命令行参数变量：$1表示第一个参数，$2表示第二个参
入一个shel|脚本的实现中，
ow，
 awk -f scriptfile "high=$1" "low=$2" datafile
 $ awk -f scriptfile high=100 low=60 datafile 
printf("Total: %d bytes (%d files)\n", sum, filenum)
printf("%-15s\t%10d\n"，$9，$5）# 打印文件名和大小
awk
Total: 4680 bytes (9 files)
gawk 2237
g 23
FILE BYTES
$ filesum g*
可以用下面的代码调用 awk：
grepscript 6 
grades.awk 231
grades 64
gfilesum 610
gawkro 264 
gawk. test 74
gawk. mail 1171
，这两个变量可以作为 awk 的任何变量来访问。
’script’
QQ群：
 var=value inputfile 
50192241
则可以以数值的形式传递 shel丨的命令行参数
- 176 -
，在等号的两边不允许出现空格。
第七章 
，如果要将这以脚本写
编写 awk 脚本
---
## Page 177
一个参数是一个文件而不是一个变量赋值。该文件会知道 BEGIN过程执行后才
BEGIN过程中的参数n返回值为空，因此 print语句将打印一个空行。如果第
在还记着BEGIN过程即“在处理输入之前所要做的”
这里有4个命令行参数：
参阅下面的脚本，该脚本将变量n设置为一个命令行参数。
个文件名）被求值时才进行。
行传递的参数就好像文件名一样被处理。赋值操作知道这个变量（如果它是一
命令行参数的一个重要限制是它们在 BEGIN过程中是不可用的。
注9：注意！不要将 shel 中的参数同 awk 中的字段变量混淆。
输出字段分隔符被重定义为句点跟一个空格。
也可以使用命令行参数定义系统变量，像在下面的例子一样：
的）。
“$cwd”返回变量cwd 的值，即当前的工作路径（仅是csh）。
子
另
“100”对应于$1，其值将赋给变量high。
外，
awk ’BEGIN {print n}
$ awk ′{print NR, $O}’ OFS=′.
awk
$ awket 100 60
4
1. Tom 656-5789
awk
环境变量或命令的输出结果也可以作为变量的值来传递。这里有两个例
Joe 543-221
(n == 2) print "Reading the second file"
(n == 1) print "Reading the first file"
Mary 543-1122
Dale 653-2133
 n=1 test n=2 test2
QQ群：
directory=‘pwd ‘ file1 
directory=$cwd file1 ...
50192241
- 177 -
“n=2”和“test2”
names
第七章 
你将会理解为什么在
编写 awk 脚本
也就是说，
第二个例子使
如果你现
---
## Page 178
下面这个首字母缩写词列表是一个简单的数据库。
独立的单词组成的行。
件。文本文件的结构化越好，对其处理就越容易工作，尽管这个结果不过是由
awk 程序可以用于检索数据库中的信息，数据库实际上是各种类型的文本文
我们将在第八章“条件、循环和数组”
和C程序语言类似，awk 也提供系统变量 ARGC 和 ARGV。
每个传递给程序的变量赋值都需要一个不同的-V选项。
注 10：-v 选项并不是 nawk 原始版本（它仍然在 Sun0S4.1x系统和一些
信息的检索
列命令使用-v选项为多行记录设置记录分隔符。
在读入第一个输入行之前）。-V选项必须在一个命令行脚本前说明。例如：下
POSIX awk 提供了一个解决这个问题的方法，
在 shel丨脚本中测试命令行参数。
以这种方法对参数求值的后果是不能用 BEGIN过程测试或检验命令行提供的参
数，并将n赋值为 2。最后，第四个参数提供了第二个文件名。这时在主过程
第一个参数为变量n赋初值1，
被打开。
数
数
。用-V选项（注10）指定要在执行 BEGIN过程之前得到变量赋值（也就是，
“NR==1”并使用它的过程来检验参数的赋值。另一个方法是在调用 awk 之前
文。只有当输入一行后它们才能够使用。要了解这种局限性，可以通过编写规
$ awk -F"\n" -v RS="" ′↓ print }’ 
 GIRL Generalized Information Retrieval Language 
GIGO Garbage In, Garbage Out 
DBMS Data Base Management System
COBOL Common Business Oriented Language
CICS Customer Information Control System
BASIC Beginner'
$ cat acronyms
的 POSIX规范的一部分。
致同意在 BEGIN块中可用的命令行上设置变量的方式，现在，它是 awk
SystemVRelease3.x系统上使用）的一部分，
为真。
QQ群：
 s All-Purpose Symbolic Instruction Code 
50192241
，第二个参数提供了文件名。因此，
，在读完test 中的所有行之后，
- 178-
’中讨论这些特点。
phones.block
，即在任何输入被读入前定义参
第七章 
，因为这需要了解数组，
：它是1989年在BelI
编写 awk 脚本
计算第三个参
对于 test 中
---
## Page 179
this
quite
Emmett Hogan：写的原始信件：
如果它出现了一个可以用awk解决的问题，就会向我们发出一跳信息。下面是
查找小故障
注意，
下面的例子演示了如何用这个程序在列表中找到特殊的首字母缩写词。
代表命令行提供的第一个参数。）
乱，因为在 awk 程序中$1 代表每个输入行的第一个字段，
在 shell命令行中的第一个参数（$1）被赋给变量 search，
写词的名字）并将它传递给 awk 脚本，acro脚本如下：