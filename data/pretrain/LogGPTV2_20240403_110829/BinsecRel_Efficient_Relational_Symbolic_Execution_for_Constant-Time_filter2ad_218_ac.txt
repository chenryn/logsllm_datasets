for now, it will be explained in Section V-A). Note that the
returned expression is always duplicated as the select must
be performed in the left and right memories independently.
D_JUMP is the evaluation of a dynamic jump. The rule
ﬁnds a concrete value l(cid:48) for the jump target, and updates
the path predicate and the location. Note that this rule is
nondeterministic as l(cid:48) can be any concrete value satisfying the
constraint. In practice, we call the solver to enumerate jump
targets up to a given bound and continue the execution along
the valid targets (which jump to an executable section).
ITE-TRUE is the evaluation of a conditional jump when
the expression evaluates to true (the false case is analogous).
The rule updates the path predicate and the next location
accordingly.
STORE is the evaluation of a store instruction. The rule
evaluates the index and value of the store and updates the
symbolic memories and the path predicate with a logical store
operation.
LOAD
(cid:94) (cid:44) (cid:104)select(µ
ϕ
(cid:94)
(cid:94)
D_JUMP
P.l = goto e
∃ M (cid:15) π(cid:48)
ITE-TRUE
STORE
l(cid:48) = l + 1
(cid:94)(cid:48) (cid:44) (cid:104)store(µ
µ
(cid:94)(cid:48)
π(cid:48) (cid:44) π ∧ µ
|l = store(µ
(cid:94)
(cid:94)
(cid:94)
secLeak (φ
)
(cid:94)
π(cid:48) (cid:44) π ∧ (ϕ
|l = ϕ
(cid:94)
secLeak (ϕ
)
(cid:94)
|r)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
|l)
|l, φ
|r, φ
|r)(cid:105)
l(cid:48) (cid:44) M (ϕ
|l)| select(µ
(cid:94)(cid:1) e (cid:96) φ
(cid:0)ρ, µ
(cid:0)ρ, µ
(cid:94)(cid:1) @e (cid:96) ϕ
(cid:0)ρ, µ
(cid:94)(cid:1) e (cid:96) ϕ
(cid:0)l, ρ, µ
, π(cid:1) (cid:32)(cid:0)l(cid:48), ρ, µ
, π(cid:48)(cid:1)
(cid:94)(cid:1) e (cid:96) ϕ
(cid:0)ρ, µ
(cid:0)l, ρ, µ
, π(cid:1) (cid:32)(cid:0)l(cid:48), ρ, µ
, π(cid:48)(cid:1)
(cid:0)ρ, µ
(cid:0)ρ, µ
(cid:94)(cid:1) e (cid:96) ϕ
(cid:94)(cid:1) e(cid:48) (cid:96) φ
, π(cid:48)(cid:1)
, π(cid:1) (cid:32)(cid:0)l(cid:48), ρ, µ
(cid:0)l, ρ, µ
|l)| store(µ
|l, ϕ
(cid:94)(cid:48)
|l) ∧ µ
|l, ϕ
(cid:94)
secLeak (ϕ
)
P.l = ite e ? ltrue: lf alse
l(cid:48) (cid:44) ltrue
|r, φ
|r = store(µ
P.l = @e := e(cid:48)
|l, φ
|l, φ
|l = ϕ
(cid:15) π(cid:48)
|r, ϕ
|r)
(cid:94)(cid:48)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
|r)(cid:105)
|r, ϕ
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
(cid:94)
|r, φ
|r)
π(cid:48) (cid:44) π ∧ (true = ϕ
(cid:94)
(cid:94)
secLeak (ϕ
)
Figure 4: Symbolic evaluation of DBA instructions and ex-
pressions (excerpt).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1026
Speciﬁcation of high and low input. By default, the content
of the memory and registers is low so we have to specify
addresses that initially contain secret inputs. The addresses of
high variables can be speciﬁed as offsets from the initial stack
pointer esp. A pair (cid:104)β| β(cid:48)(cid:105) ∈ Bv8 of fresh symbolic variables
is stored at each given offset h and modiﬁes the symbolic con-
ﬁguration just as a store instruction @[esp + h] := (cid:104)β| β(cid:48)(cid:105)
would. Similarly, offsets containing low inputs can be set to
simple symbolic expressions (cid:104)λ(cid:105) – although it is not necessary
since the initial memory is equal in both executions.
Bug-Finding. A vulnerability is found when the function
secLeak (ϕ) evaluates to false. In this case, the insecurity
query is satisﬁable and we have: ∃M (cid:15) π ∧ (ϕ
(cid:86)
|r).
|l
The model M returned by the solver assigns concrete values
to variables, that satisfy the insecurity query. It can be returned
as a counterexample that triggers the vulnerability, along with
the current location l of the vulnerability.
(cid:54)= ϕ
(cid:86)
A. Optimizations for binary-level SE
Relational symbolic execution does not scale in the context
of binary-level analysis (see RelSE in Table V). In order
to achieve better scalability, we enrich our analysis with
an optimization, called on-the-ﬂy-read-over-write (FlyRow in
Table VI), based on read-over-write [66]. This optimization
simpliﬁes expressions and resolves load operations ahead of
the solver, often avoiding to resort to the duplicated memory
and allowing to spare insecurity queries. We also enrich our
analysis with two further optimizations, called untainting and
fault-packing (Unt and fp in Table VI), speciﬁcally targeting
SE for information ﬂow analysis.
1) On-the-Fly Read-Over-Write: Solver calls are the main
bottleneck of symbolic execution, and reasoning about store
and select operations in arrays is particularly challenging [66].
Read-over-write (Row) [66] is a simpliﬁcation for the theory
of arrays that efﬁciently resolves select operations. This
simpliﬁcation is particularly efﬁcient in the context of binary-
level analysis because the memory is represented as an array
and formulas contain many store and select operations.
The standard read-over-write optimization [66] has been
implemented as a solver-pre-processing, simplifying a formula
before sending it to the solver. While it has proven to be
very efﬁcient
to simplify individual formulas of a single
execution [66], we show in Section VII-B that it does not scale
in the context of relational reasoning, where formulas model
two executions and a lot of queries are sent to the solver.
Thereby, we introduce on-the-ﬂy read-over-write (FlyRow)
to track secret-dependencies in the memory and spare inse-
curity queries in the context of information ﬂow analysis.
By keeping track of relational store expressions along the
symbolic execution, it can resolve select operations – often
avoiding to resort to the duplicated memory – and drastically
reduces the number of queries sent to the solver, improving
the performances of the analysis.
Lookup. The symbolic memory can be seen as the history
of the successive store operations beginning with the initial
memory µ0. Therefore, a memory select can be resolved by
going back up the history and comparing the index to load,
with indexes previously stored. Our optimization consists in
replacing selection in the memory (Figure 4, LOAD rule, boxed
hypothesis) by a new function lookup : ((Array Bv32 Bv8)×
(Array Bv32 Bv8)) × Bv32 → Bv8 which takes a relational
memory and an index, and returns the relational value stored
at that index. The lookup function can be lifted to relational
indexes but for simplicity we only deﬁne it for simple indexes
and assume that relational store operations happen to the same
index in both sides – note that for constant-time analysis, this
hypothesis holds. The function returns a relational bitvector
formula, and is deﬁned as follows:
0|r, i)(cid:105)
0|l, i)| select(µ
(cid:86)
(cid:86)
(cid:86)
lookup (µ
(cid:86)
lookup (µ
0, i) = (cid:104)select(µ
n, i) =
(cid:104)ϕl(cid:105)
(cid:104)ϕl| ϕr(cid:105)
(cid:86)
lookup (µ
(cid:86)
φ
if eq#(i, j) ∧ eq#(ϕl, ϕr)
if eq#(i, j) ∧ ¬eq#(ϕl, ϕr)
if ¬eq#(i, j)
if eq#(i, j) = ⊥
n−1, i)
where
(cid:86)
(cid:44) (cid:104)store(µ
(cid:86)
µ
n
(cid:86) (cid:44) (cid:104)select(µ
φ
(cid:86)
(cid:86)
n−1|l, j, ϕl)| store(µ
n|r, i)(cid:105)
n|l, i)| select(µ
(cid:86)
n−1|r, j, ϕr)(cid:105)
where eq#(i, j) is a comparison function relying on syntactic
term equality, which returns true (resp. false) only if i and j
are equal (resp. different) in any interpretation. If the terms
are not comparable, it is undeﬁned, denoted ⊥.
Example 1 (Lookup). Let us consider the memory:
(cid:86)
µ
= ebp − 4 (cid:104)λ(cid:105)
ebp − 8 (cid:104)β| β(cid:48)(cid:105)
esp (cid:104)ebp(cid:105)
[ ]
(cid:86)
• A call to lookup (µ
(cid:86)
• A call to lookup (µ
, ebp − 4) returns λ.
, ebp − 8) ﬁrst compares the indexes
[ebp−4] and [ebp−8]. Because it can determine that these
indexes are syntactically distinct, the function moves to
the second element, determines the syntactic equality of
indexes and returns (cid:104)β| β(cid:48)(cid:105).
, esp) tries to compare the indexes
[ebp−4] and [esp]. Without further information, the equal-
ity or disequality of ebp and esp cannot be determined,
therefore the lookup is aborted and the select operation
cannot be simpliﬁed.
(cid:86)
• A call to lookup (µ
Term rewriting. To improve the conclusiveness of this syn-
tactic comparison, the terms are assumed to be in normalized
form β + o where β is a base (i.e. an expression on symbolic
variables) and o is a constant offset. In order to apply FlyRow,
we normalize all the formulas created during the symbolic
execution (details of our normalization function are ommited
for space reasons). The comparison of two terms β + o and
β(cid:48) + o(cid:48) in normalized form can be efﬁciently computed as
follows: if the bases β and β(cid:48) are syntactically equal, then
return o = o(cid:48), otherwise the terms are not comparable.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1027
(cid:86)
untaint(ρ, µ
,(cid:104)vl| vr(cid:105)) = (ρ[vr\vl], µ
[vr\vl])
(cid:86)
untaint(ρ, µ
(cid:86)
untaint(ρ, µ
(cid:86)
untaint(ρ, µ
(cid:86)
untaint(ρ, µ
(cid:86)
untaint(ρ, µ
,(cid:104)¬tl|¬tr(cid:105))
,(cid:104)−tl| − tr(cid:105))
,(cid:104)tl + k| tr + k(cid:105))
,(cid:104)tl − k| tr − k(cid:105))
,(cid:104)tl :: k| tr :: k(cid:105))
(cid:86)
 = untaint(ρ, µ
(cid:86)
,(cid:104)tl| tr(cid:105))
Figure 5: Untainting rules where vl, vr are bitvector variables
and tl, tr, k are arbitrary bitvector terms, and f [vr\vl] indi-
cates that the variable vr is substituted with vl in f.
In order to increase the conclusiveness of FlyRow, we also
need variable inlining. However, inlining all variables is not
a viable option as it would lead to an exponential term size
growth. Instead, we deﬁne a canonical form v + o where v
is a bitvector variable, and o is a constant bitvector offset,
and we only inline formulas that are in canonical form. It
enables rewriting of most of the memory accesses on the stack
which are of the form ebp + bv while avoiding term-size
explosion.
2) Untainting: After the evaluation of a rule with the pred-
icate secLeak for a duplicated expression (cid:104)ϕl| ϕr(cid:105), we know
that the equality ϕl = ϕr holds in the current conﬁguration.
From this equality, we can deduce useful information about
variables that must be equal in both executions. We can then
propagate this information to the register map and memory in
order to spare subsequent insecurity queries concerning these
variables. For instance, consider the leak of the duplicated
expression (cid:104)vl + 1 | vr + 1(cid:105), where vl and vr are symbolic
variables. If the leak is secure, we can deduce that vl = vr and
replace all occurrences of vr by vl in the rest of the symbolic
execution.
(cid:86)
We deﬁne a function untaint (ρ, µ
(cid:86)
, and a duplicated expression ϕ
) that takes a register
(cid:86)
map ρ, a memory µ
; it applies
the rules deﬁned in Fig. 5 which deduce variable equalities
(cid:86)
(cid:86)
, and return a pair of updated
, propagate them in ρ and µ
from ϕ
(cid:86)(cid:48)
register map and memory (ρ(cid:48), µ
). Intuitively, if the equality
(cid:86)
of variables vl and vr can be deduced from secLeak (ϕ
),
the untaint function replaces occurences of vr by vl
in
the memory and the register map. As a result, a duplicated
expression (cid:104)vl| vr(cid:105) would be replaced by the simple expression
(cid:104)vl(cid:105) in the rest of the execution3.
3) Fault-Packing: For CT, the number of insecurity checks
generated along the symbolic execution is substantial. The
fault-packing (fp) optimization gathers these insecurity checks
along a path and postpones their resolution to the end of the