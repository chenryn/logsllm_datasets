### Migration Constraints and Adversary Strategies

Migration constraints in the Client API limit certain types of attacks, such as launching a large number of VMs or inducing churn, because these actions either incur high costs or are easily detectable. Figure 9 illustrates the effectiveness of our system against a strategic adversary who launched 30 non-movable VMs at epoch 10. The base case, which involves an adversary with only 2 VMs, and the "without Nomad" system, which uses random initial placements for all arriving VMs, serve as points of comparison. This result confirms our hypothesis that Nomad is resilient to strategic adversaries exploiting the "non-migration" constraints of the Client API (§5).

**Figure 9: CDF of client-to-adversary information leakage at epoch 19 for a sliding window of 5 epochs (cluster size: 200, number of clients: 200)**

### Discussion

Before concluding, we address four key issues:

1. **Network Impact:**
   - **Concern:** The overall network impact of Nomad due to migration could be a concern.
   - **Mitigation:** Modern datacenters have well-provisioned networks (e.g., 10Gbps full bisection bandwidth [17]). Additionally, Nomad’s migrations are predictable and amenable to traffic engineering [7]. Techniques like incremental diffs can reduce the transfer size by up to 50% compared to the base VM memory image [18]. Therefore, we expect minimal network impact from Nomad, especially given that datacenters handle much larger (tens of GB) flows [17].

2. **Fairness Across Clients:**
   - **Issues:** Two main fairness concerns arise: the leakage guarantees each client achieves and the migration costs each client faces.
   - **Current Algorithm:** Our current algorithm does not explicitly account for fairness objectives, but empirical evaluations show that the greedy algorithm naturally achieves a reasonably fair outcome.
   - **Future Work:** Extending the basic algorithm to support fairness goals, particularly in a heterogeneous environment where different clients have varying numbers of VMs, degrees of replication, and sensitivity to migration, is an interesting direction. Concepts like dominant resource fairness might be useful here [15].

3. **Handling Heterogeneous Client Workloads:**
   - **Current Approach:** Our current Placement Algorithm uses a different approach for each deployment model.
   - **Future Extension:** Designing a hybrid Placement Algorithm that enables a cloud provider to handle heterogeneous client workloads under an adversarial model (i.e., clients specifying to be R or NR under C or NC scenarios) is an interesting extension.

4. **Incentives for Adoption:**
   - **Client Incentive:** Security-conscious cloud clients have a natural incentive to opt-in to the Nomad service to minimize the impact of side channels. The impact of Nomad migrations on applications for reasonable epoch durations is likely to be small, making the cost low.
   - **Provider Incentive:** Providers also have a natural incentive to enable Nomad as a service, as it might introduce new monetization avenues. For example, Nomad can be offered as a value-added security service for a slight, additional fee. This vision aligns with the real-world economics of cloud computing.

### Conclusions

Co-residency side channels in public cloud deployments pose a real and growing threat. Existing solutions often require detailed changes to hardware, software, and client applications, or they sacrifice the multiplexing benefits of clouds. Nomad offers a practical, vector-agnostic, and robust defense against arbitrary (and future) side channels. It is effective against strong adversary models where client VMs can collaborate, and it does not require identifying the adversary. The key insight is leveraging provider-assisted VM migration to bound co-residency and limit information leakage across all client pairs. We have demonstrated that Nomad can scale to large cloud deployments and imposes low overhead on client applications. While there are open questions (e.g., very fast side channels, heterogeneous guarantees), we believe that the core idea of Nomad is powerful and can complement attack-specific side channel defenses. In a broader context, Nomad demonstrates a novel cloud provider-assisted security solution and can enable robust defenses against other security problems.

### Acknowledgments

This work was supported in part by NSF awards CNS-1440065 and CNS-1330599. We thank Anupam Gupta, Ravishankar Krishnaswamy, Kyle Soska, the anonymous reviewers, and our shepherd Cristiano Giuffrida for their helpful suggestions.

### References

[References listed as provided in the original text]

### Appendix

#### A. ILP Formulation

In this section, we describe the ILP formulation for the optimization problem that the Nomad Placement Algorithm needs to solve every epoch. The objective function is to minimize the total information leakage across all client pairs.

- **Control Variables:** Binary indicator variables \( d_{c,i,k}(t) \) denote the placement assignment of a specific VM instance \( i \) of client \( c \) at machine \( k \) in epoch \( t \).
- **Constraints:**
  - **Machine Capacity:** The total number of VMs assigned to a machine should not exceed its capacity (Equation 9).
  - **Unique Assignment:** Each VM should only have one machine assignment (Equation 10).
  - **Co-Residency:** Per-epoch binary co-residence relationships indicate if two VMs are co-resident in a machine \( k \) at epoch \( t \) (Equations 11-12).
  - **Information Leakage:** Summarize the information leakage over time, adversary's VMs, and client's VMs (Equation 13).
  - **Migration Cost:** Binary indicators \( m_{vc,i,m}(t) \) indicate whether a VM has migrated from the previous epoch \( t-1 \) (Equations 14-16). The total number of migrations should not exceed a specified percentage budget (Equation 16).

**Figure 10: \(\langle R, C \rangle\): ILP formulation for Nomad Placement Algorithm**

The ILP formulation is also applicable for three other deployment models; Equation 13 needs to be adjusted to reflect the correct InfoLeakage model.

**Migration Budget:**
- **Binary Indicator:** \( m_{vc,i,m}(t) \) indicates whether VM \( c,i \) has moved away or into machine \( k \) (Equation 14).
- **Total Migrations:** Summing over this variable for each VM instance gives the total number of migrations from the previous epoch (Equation 15).
- **Budget Constraint:** The total number of migrations should not exceed a specified percentage of the total workloads (Equation 16).

This formulation ensures that the Nomad Placement Algorithm can effectively manage VM placements while minimizing information leakage and adhering to migration constraints.