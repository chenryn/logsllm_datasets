---
author: Ted Young
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 3436
date: '2020-02-03 00:44:37'
editorchoice: false
excerpt: 了解分布式跟踪中的主要体系结构决策，以及各部分如何组合在一起。
fromurl: https://opensource.com/article/18/5/distributed-tracing
id: 11845
islctt: true
largepic: /data/attachment/album/202002/03/004447wc2cxeb5ro9l05si.jpg
permalink: /article-11845-1.html
pic: /data/attachment/album/202002/03/004447wc2cxeb5ro9l05si.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 了解分布式跟踪中的主要体系结构决策，以及各部分如何组合在一起。
tags:
- 跟踪
thumb: false
title: 分布式跟踪系统的四大功能模块如何协同工作
titlepic: true
translator: chenmu-kk
updated: '2020-02-03 00:44:37'
---
> 
> 了解分布式跟踪中的主要体系结构决策，以及各部分如何组合在一起。
> 
> 
> 
![](/data/attachment/album/202002/03/004447wc2cxeb5ro9l05si.jpg)
早在十年前，认真研究过分布式跟踪基本上只有学者和一小部分大型互联网公司中的人。对于任何采用微服务的组织来说，它如今成为一种筹码。其理由是确立的：微服务通常会发生让人意想不到的错误，而分布式跟踪则是描述和诊断那些错误的最好方法。
也就是说，一旦你准备将分布式跟踪集成到你自己的应用程序中，你将很快意识到对于不同的人来说“ 分布式跟踪   Distributed Tracing ”一词意味着不同的事物。此外，跟踪生态系统里挤满了具有相似内容的重叠项目。本文介绍了分布式跟踪系统中四个（可能）独立的功能模块，并描述了它们间将如何协同工作。
### 分布式跟踪：一种思维模型
大多数用于跟踪的思维模型来源于 [Google 的 Dapper 论文](https://research.google.com/pubs/pub36356.html)。[OpenTracing](http://opentracing.io/) 使用相似的术语，因此，我们从该项目借用了以下术语：
![Tracing](/data/attachment/album/202002/03/004452quhjuxjaj1wp7uws.png "Tracing")
*  跟踪   Trace ：事物在分布式系统运行的过程描述。
*  跨度   Span ：一种命名的定时操作，表示工作流的一部分。跨度可接受键值对标签以及附加到特定跨度实例的细粒度的、带有时间戳的结构化日志。
*  跨度上下文   Span context ：携带分布式事务的跟踪信息，包括当它通过网络或消息总线将服务传递给服务时。跨度上下文包含跟踪标识符、跨度标识符以及跟踪系统所需传播到下游服务的任何其他数据。
如果你想要深入研究这种思维模式的细节，请仔细参照 [OpenTracing 技术规范](https://research.google.com/pubs/pub36356.html)。
### 四大功能模块
从应用层分布式跟踪系统的观点来看，现代软件系统架构如下图所示：
![Tracing](/data/attachment/album/202002/03/004500dl1kkhbiml6pir61.png "Tracing")
现代软件系统的组件可分为三类：
* **应用程序和业务逻辑**：你的代码。
* **广泛共享库**：他人的代码
* **广泛共享服务**：他人的基础架构
这三类组件有着不同的需求，驱动着监控应用程序的分布式跟踪系统的设计。最终的设计得到了四个重要的部分：
*  跟踪检测 API   A tracing instrumentation API ：修饰应用程序代码
*  线路协议   Wire protocol ：在 RPC 请求中与应用程序数据一同发送的规定
*  数据协议   Data protocol ：将异步信息（带外）发送到你的分析系统的规定
*  分析系统   Analysis system ：用于处理跟踪数据的数据库和交互式用户界面
为了更深入的解释这个概念，我们将深入研究驱动该设计的细节。如果你只需要我的一些建议，请跳转至下方的四大解决方案。
### 需求，细节和解释
应用程序代码、共享库以及共享式服务在操作上有显著的差别，这种差别严重影响了对其进行检测的请求操作。
#### 检测应用程序代码和业务逻辑
在任何特定的微服务中，由微服务开发者编写的大部分代码是应用程序或者商业逻辑。这部分代码规定了特定区域的操作。通常，它包含任何特殊、独一无二的逻辑判断，这些逻辑判断首先证明了创建新型微服务的合理性。基本上按照定义，**该代码通常不会在多个服务中共享或者以其他方式出现。**
也即是说你仍需了解它，这也意味着需要以某种方式对它进行检测。一些监控和跟踪分析系统使用 黑盒代理   black-box agents 自动检测代码，另一些系统更想使用显式的白盒检测工具。对于后者，抽象跟踪 API 提供了许多对于微服务的应用程序代码来说更为实用的优势：