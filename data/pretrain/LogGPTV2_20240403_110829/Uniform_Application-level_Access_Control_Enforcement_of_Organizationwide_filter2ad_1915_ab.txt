### Access Interface and View Connectors in Authorization Systems

#### Introduction
The access interface within an organization remains relatively constant and is often specific to the application domain, driven by high-level policy rules. For instance, in a financial organization, the value of a transaction might be crucial for access decisions, whereas in a hospital, it may be important to determine if an access request is an override. The access interface facilitates communication between a centrally managed authorization engine and applications, enabling the engine to receive notifications of access attempts and query applications for state information to make informed decisions. This paper introduces the concept of view connectors, which map application-specific concepts to those represented in the access interface, allowing for declarative configuration without invasive code changes.

#### 3.1. Access Interface
The access interface explicitly defines the contract between the authorization engine and applications, specifying the provided and expected functionality and data. The authorization engine provides decisions on access requests and expects applications to:
1. Notify the engine of relevant accesses.
2. Provide necessary information about these accesses.
3. Enforce the decision on the access request.

An access request is a request by a subject to perform an action on an object. Our design assumes that objects are classified into domains (e.g., medical data) and subjects into roles (e.g., physician). The information required to decide on an access request can vary based on the domain and role involved.

**Formalization:**
- An access interface \( A \) consists of a set \( O \) of object interfaces (one per domain) and a set \( S \) of subject interfaces (one per role).

**Object Interfaces:**
- An object interface \( O \) for a given domain is a pair \( (attr, act) \), where:
  - \( attr \) denotes a set of attribute names, specifying the information the authorization engine needs about objects. \( Values(a) \) denotes the set of possible values for a given attribute \( a \in O:attr \).
  - \( act \) denotes the set of relevant actions about which the authorization engine expects to be notified.

**Example:**
- **ObjectInterface MedicalData:**
  - Attributes: `status`, `closingTime`, `ResponsiblePhysician`, `GP`
  - Actions: `view`, `append`, `close`

**Security Objects and Subjects:**
- The access control view on an application consists of a set \( O \) of security objects and a set \( S \) of security subjects.
- Each security object \( o \in O \) has an associated object interface \( objectinterface(o) \), and each security subject \( s \in S \) has an associated subject interface \( subjectinterface(s) \).
- The security state of a security object or subject is determined by the values of the attributes specified in their respective interfaces.

**Subject Interfaces:**
- A subject interface \( S \) for a given role specifies the information the authorization engine needs about subjects in that role, in the form of a set of attributes \( attr \). \( Values(a) \) denotes the set of possible values for a given attribute \( a \in S:attr \).

**Example:**
- **SubjectInterface Physician:**
  - Attributes: `licenseID`, `accessmode` (normal, overrule)

**Implementing the Policy:**
- An access request is a triple \( (s, o, a) \) consisting of a security subject \( s \), a security object \( o \), and an action name \( a \) in the action name set \( act \) of \( objectinterface(o) \).
- The access policy is a function that, given an access request and the security states, returns whether the access is allowed or not.
- Example Ponder rule: The responsible physician for a piece of medical data can view, append, or close that data as long as its status is open.

#### 3.2. View Connectors
The access interface specifies access requests at an abstract level, which must be translated to actual application concepts. This translation is the role of the view connector, which binds an application to the access interface. Each application requires its own view connector.

**Steps to Implement a View Connector:**
1. Map application objects to security objects and subjects.
2. Identify all operations on such data and map them to the corresponding actions in the object interface.
3. Determine how to compute the necessary attributes for security objects and subjects.

**Attribute Computation:**
- The view connector specifies how each access interface attribute is computed for the given application.
- Example: An ICP object in a medical application is mapped to the `MedicalData` object interface, with attributes like `ResponsiblePhysician` and `GP` computed via getter methods.

**Access Enforcement Points:**
- These are points in the application execution where an access check is needed.
- Inserting access checks can be done using aspect-oriented programming, which allows injecting new code at specified points without modifying the application source code.

**Prototype Implementation:**
- Our prototype uses an aspect-oriented application container, which supports pointcuts (expressions denoting sets of execution points) and injection of new code at these points.
- An extensible application container is extended with an aspect component configured with a view connector, which specifies attribute computation and action mappings.

#### 4. Discussion
We evaluate our approach against the requirements mentioned in Section 2.4 and show that it does not negatively impact other important properties of an access control infrastructure for distributed object systems.

**Expressiveness:**
- The access interface does not restrict the expressiveness of policies for practical use.
- Extending the subject interface to support more complex principals would enhance expressiveness.

**Separation of Concerns and Evolution:**
- Responsibilities are clearly separated: the security officer specifies the access interface, and the application deployer configures the view connector.
- Policy evolution is straightforward, as adding new rules or extending interfaces can be managed through view connectors.

**Performance and Administration Scalability:**
- Performance overhead depends on the implementation, but centralized management with distributed enforcement can achieve good performance.
- The separation of concerns positively influences administration scalability.

**Requirements from the Object Paradigm:**
1. **Objects:**
   - The access interface shields complex method semantics from the security officer.
   - Grouping objects and methods ensures scalability.
2. **Collections:**
   - Flexibility in grouping objects is supported, independent of existing application structure.
3. **Names:**
   - Human intervention for transient objects depends on the view connector implementation.

By addressing these requirements, our approach provides a robust and flexible solution for access control in diverse applications.