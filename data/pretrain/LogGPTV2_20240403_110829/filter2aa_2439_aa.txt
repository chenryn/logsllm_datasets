# DEF CON 24: Side-Channel Attacks on High-Security Electronic Safe Locks

## Presenter: [Your Name]
## Contact: [Your Email]

### Agenda
1. Background on Electronic Safe Locks
2. Cracking the S&G 6120 Safe Lock
   - Recovering Keycode Using Power Analysis
3. Cracking the S&G Titan PivotBolt Safe Lock
   - Recovering Keycode Using Timing Attack
   - Defeating Incorrect-Code Lockout

### Background: Electronic Safe Locks
**Image: ellenm1 on Flickr / CC BY-NC**

#### Certification and Scope
- **Certification**: UL Type 1 High-Security Electronic Lock
- **Scope**: This presentation focuses on certified, high-security electronic locks.
- **Out of Scope**: Cheap, non-certified locks that can be easily brute-forced, "spiked" (bolt motor driven directly), or bypassed mechanically.

### Sargent & Greenleaf 6120-332

#### System Model
- **MCU**: Microcontroller Unit
- **Outside of Safe**: Battery, Keypad, Buzzer
- **Inside of Safe**: EEPROM, Bolt Motor, Lock
- **Steel Safe Door**: ¼” hole for wires

#### Design
- **Keycodes Stored in Clear Text in EEPROM**
- **Communication**: MCU reads/writes EEPROM via a 3-wire serial interface ("Microwire," similar to SPI)
- **Speed**: EEPROM to MCU ~1.5 kbit/s, hundreds of milliseconds to read all data
- **Operation**: The lock reads all keycodes from EEPROM on every attempt

#### Vulnerability
- **Power Analysis**: The amount of current consumed during EEPROM read-out changes based on keycode bit values.
- **Translation**: Current changes are translated into key values, which can then be entered on the keypad.
- **No Modification Required**: Covert entry with no evidence of tampering.

#### Circuit Model
- **Data Line Volts**: Vcc (5 volts) and GND (0 volts)
- **Current Consumption**: Higher current consumption indicates a 0 bit, lower current indicates a 1 bit.
- **Setup**: Amplifier, Oscilloscope, Sense Resistor, Battery, MCU

#### Full Scope Trace
- **Keycode Format**: 1 nibble per keycode digit
- **EEPROM Usage**: Only the lower byte in each EEPROM word is used; the upper byte is always 0x00.

### S&G 6120 Demo
- **Demo**: [Insert demo details here]

### S&G Titan PivotBolt

#### Software Design
- **Keycodes Stored in EEPROM within MCU**
- **Supports 10 Keycodes**
- **Lockout Mechanism**: 10-minute lockout after 5 incorrect codes in a row, persists across power removal, failed-attempt count stored in EEPROM

#### Timing Attack
- **Keypad Sequence Capture**: The entire six-digit keypad sequence is captured before starting comparison to the key from EEPROM.
- **Pseudocode**:
  ```c
  bool check_code(int enteredCode[6], int actualCode[6]) {
      for (int digit = 0; digit < 6; digit++) {
          if (enteredCode[digit] != actualCode[digit]) {
              return false;
          }
      }
      return true;
  }
  ```
- **Timing Delta**: Each iteration takes approximately 28 seconds.
- **Attack Algorithm**:
  1. Try keycode starting with 0, remaining five digits as don't-care.
  2. Watch for timing signs showing trial digit match/mismatch.
  3. If mismatch, try again with keycode starting with 1, and so on.
  4. Once the first digit is discovered, repeat for subsequent digits.
  5. Sixth digit is brute-forced (10 possibilities).
  6. Reduces worst-case attempt count from 1,000,000 to as few as 60.

#### Lockout Defeat
- **Normal Operation**: 5 incorrect codes in a row lead to a 10-minute penalty lockout period.
- **Goals**:
  - Prevent increment of failure counter.
  - Reset failure counter.
- **EEPROM Write Timeline**:
  - **t≈0**: EEPROM erase of destination block begins.
  - **t=0**: EEPROM write begins.
  - **t=2.5 ms**: New data starts to be readable.
  - **t=3.0 ms**: Earliest time MCU considers write complete.
  - **t=6.0 ms**: Latest time MCU considers write complete.
  - **t=500 s**: Block already erased, 500 s (or less) to commit new data.
  - **t=500 s**: Existing data in block, about 500 s until old data no longer readable and bytes return 0x00.

#### Normal Wrong Code
- **Sequence**:
  - User enters incorrect keycode.
  - Debounce complete, FW starts comparing entered keycode to stored keycode.
  - Mismatch found, EEPROM write starts for failed attempt counter.
  - EEPROM block erased, failed-attempt count at 0x00.
  - EEPROM write of new non-zero failed attempt count complete.
  - "Wrong code" buzzer sounds.

#### Lockout Prevention
- **Sequence**:
  - User enters incorrect keycode.
  - Debounce complete, FW starts comparing entered keycode to stored keycode.
  - Mismatch found, EEPROM write starts for failed attempt counter.
  - Remove battery power.
  - MCU drops below minimum voltage before EEPROM write completes.
  - Invalid-attempt count left at 0x00 (default EEPROM erased value).

### Support Hardware: Custom PCB
- **Microammeter**:
  - Low-side current sense for simplicity.
  - Gain: 40 dB.
  - Low-pass filter (second-order, fc=25 kHz).
- **Power Control**: Quickly apply or remove power to/from lock.
- **Keypress Simulator**: Use DAC and buffer to provide voltages that simulate keys being pressed on the keypad.

### Automated Code Recovery
- **Runs on External MCU (STM32L476G)**
- **Uses Functionality from the Custom PCB**
- **Sends Keycodes in Sequence During Search**
- **Measures Time Deltas to Infer Correct Values**
- **Modulates Lock Power to Avoid Lockout**
- **Outputs Results**

### Titan Demo
- **Demo**: [Insert demo details here]

### Conclusions
- **Would I Still Buy/Use an Electronic Safe Lock?**
  - Yes! (But probably not the 6120)
- **Burglars' Perspective**: They will likely use more straightforward methods like a saw or crowbar.

**Image: HomeSpotHQ on Flickr / CC BY**

Feel free to email me: [Your Email]