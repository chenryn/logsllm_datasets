for distributing 8 characters across any given c (c is an integer 
between 1 and 8) chunks. On the other hand, in our experiments, 
scenarios where c=1, 2 or 3 have never occurred.  
its  neighbors,  which  would  make  it  much  more  complicated  to 
implement the algorithm. 
4.6  Segmenting connected characters 
The  previous  step  has 
identified  any  object(s)  containing 
connected characters,  as  well  as  the  number  of these  characters, 
denoted by c, contained in each object. We observed that often, a 
simple  “even  cut”  method  works  to  segment  the  connected 
characters in an object as follows.  
1)  Work out the width of the object by identifying its left-
most and right-most pixels;  
2)  Vertically  divide  the  object  into  c  parts  of  the  same 
width, each part being a proper segment.  
For example, it was determined that the last object in Fig 8 and 
the  3rd  object  in  Fig  10  contain  two  connected  characters.  For 
these  objects,  what  our  algorithm  does  is  to  evenly  divide  them 
into  two  segments,  each  being  a  character.  Fig  11  shows  the 
finalised 8 segments for both challenges. 
(a)  
(b) 
Fig 11. Completely segmented images 
5.  RESULTS  
Success rate. Our segmentation attack has achieved a success rate 
of 91% on the sample set. That is, 91 out of 100 challenges were 
segmented correctly. To check whether it was generic enough, we 
ran  our  attack  on  a  test  set  of  500  random  challenges  -  our 
program had no prior knowledge about any sample in this set. Our 
attack  achieved  a  success  rate  of  92%  on  the  test  set  (the 
distribution  of  samples  in  the  test  set  slightly  favours  our 
algorithm).  For both the sample and test sets, the success rate was 
manually established.  
We analysed all cases of failure of our segmentation attack in both 
the  sample  and  test  sets,  and  found  that  three  types  of  failure 
occurred as follows.  
•  Failure of arc removal: some thick arcs were undetected.  
•  Failure  of  identifying  connected  characters.  A  typical  case 
was: when a single character (e.g. ‘W’) was much wider than 
two  connected  characters,  the  former,  rather  than  the  latter, 
might  be 
the  one  containing  connected 
characters.  On  the  other  hand,  when  thick  arcs  were  not 
detected but treated as valid characters, they could also cause 
our algorithm to fail to detect connected characters.  
identified  as 
•  Failure  of  “even  cut”.  It  is  unsurprising  that  this  simple 
to  segment  connected 
method  does  not  always  work 
characters.  
We also compared the percentage of each failure type in both the 
sample and test sets. The failure patterns in both sets are similar. 
The details of our failure analysis are in [22].  
Attack  speed.  We  implemented  our  attack  in  Java  (little  effort 
was spent in optimizing the run-time of code), and tested it on a 
desktop computer with a 1.86 GHz Intel Core 2 CPU and 2 GB 
RAM. The attack was run ten times on both the sample and test 
sets, and the average speed was taken (see Table 3). The figures in 
the table show that our attack is very efficient: on average, it takes 
only slightly more than 80 ms to completely segment a challenge 
in both sets.  
Table 3. Attack speed  
Speed 
(ms/challenge) 
Sample set 
Test set 
Average  Max  Min 
82.8 
84.2 
91.4 
95.5 
81.4 
82.8 
Implications. State of the art of machine learning can achieve a 
success rate of at least 95% for recognising individual characters 
in  the  MSN  scheme,  after  they  are  segmented  [5,  6].  However, 
this  rate  is  a  conservative  estimate  for  recognising  characters  in 
samples  we  have  collected  for  this  study,  for  the  following 
reasons.  
•  First, we checked all samples in our test set after we measured 
the  success  rate  of  our  attack,  and  found  that  although  the 
same types of distortion techniques were applied to characters 
in  our  samples  and  those  listed  in  Table  1,  the  former  were 
much less distorted than the latter. The same observation also 
applied to the sample set. 
•  Second,  by  manually  inspecting  all  the  samples  that  were 
correctly  segmented  by  our  attack,  we  observed  no  artifacts 
that would be introduced by any step of the attack to interfere 
with the final recognition step. 
to  be  recognised  by  standard  machine 
•  Third, we have simple methods to get rid of some portions of 
“intersecting  thin  arcs”  in  each  segmented  character  so  that 
these  characters  are  even  less  distorted  and  consequently 
easier 
learning 
techniques. For example, one of our methods is to guess the 
area  of  the  real  character  inside  an  object  by  checking  the 
density  of  foreground  pixels  for  the  object.  As  illustrated  in 
Fig 12 (where the example is taken from the last segment in 
Fig 11 (a)), the majority of columns and rows inside the red 
box have a pixel count higher than a threshold value (3 in this 
case), while for portions outside of this box, the majority of 
columns and rows have a lower pixel count, which is in the 
range  of  the  thicknesses  of  thin  intersecting  arcs.  Thus, 
portions  of  such  arcs  are  rightly  recognised  and  removed  as 
distortion.  
use (at Yahoo’s site in China) was March 8, 2008. Our attack has 
achieved a segmentation rate of around 77% on this CAPTCHA. 
As a result, we estimate that this scheme could be broken with an 
overall (segmentation and then recognition) success rate of about 
60%  (≈.77*.95^5;  the  average  text  length  in  this  scheme  is  5). 
That is, in theory, our work can lead to the most successful attack 
to  date  on  the  scheme4.  Alerted,  Yahoo  has  ceased  to  use  this 
CAPTCHA.  
Fig  13  shows  example  challenges  generated  by  this  Yahoo 
CAPTCHA,  which  we  call  Yahoo  Scheme  1.  By  analysing  100 
random samples, we observed that the use of intersecting arcs was 
the main segmentation resistance mechanism in this scheme, and 
the arcs could have the same thickness as some portions of valid 
characters. 
Fig 13. Yahoo Scheme 1: example challenges.  
Our attack on this scheme works as follows. After binarizing an 
image,  we  segment  it  into  a  set  of  connected  components  (i.e., 
objects)  by  applying  the  CFS  method  –  this  method  not  only 
achieves partial segmentation, but also contributes to our divide-
and-conquer strategy.  
Then, for each object, we use a method, which is extended from 
the  vertical  segmentation  in  Section  4.2,  to  detect  and  remove 
arcs. This method is a major extension to our work on the MSN 
scheme, and its key technique is the following histogram analysis. 
First, we map each object to two histograms, one representing the 
number  of  foreground  pixels  per  column,  and 
the  other 
representing  the  number  of  foreground  pixels  per  row  in  the 
object. We call them X- and Y- histograms, since they are created 
as if the object is projected to the X- and Y- axis respectively. Fig 
14 (b) shows X- (in green color) and Y- histograms (in blue color) 
for each of the three objects identified in Fig 14 (a) by the CFS 
method. 
Fig 12. Thin arc removal using pixel-density based bounding 
box estimation. 
(a) 
As such, our segmentation attack suggests that the MSN scheme 
can  be  broken  with  at  least  an  overall  (segmentation  and 
recognition) success rate of 61% (≈ .92*.95^8).   
6.  APPLICABILITY  
Our  attack  on 
CAPTCHAs. In this section, we discuss a few cases.  
6.1  Yahoo CAPTCHA  
We successfully applied a variant of our attack to a CAPTCHA 
that  was  deployed  by  Yahoo  at  their  global  websites  until  very 
recently - the last day that we observed this scheme was in active 
the  MSN  scheme 
is  applicable 
to  other 
4 A Russian security team claimed that they have broken the same 
scheme with a success of around 35% [20]. No technical detail 
of their attack was publicly available, however. 
As  shown  in  Fig  16,  this  step  successfully  removed  some 
horizontal portions of arcs in both objects. 
(a) 
Fig 16. Arc removal: (a) low-density columns are identified, 
(b) 
and (b) after step 3. 
Lastly, clean up. Some small portions of arcs can still stay after 
the above steps, e.g. the first object in Fig 16 (b). However, these 
portions tend to have a much smaller pixel count than any valid 
characters, and therefore are easy to identify and remove.  
Fig 17 (a) shows the challenge image after the whole arc removal 
process.  Apparently,  our  algorithm  not  only  removes  standalone 
arcs, but also contributes to segmentation by removing portions of 
arcs that connect different characters. 
(a) 
(b) 
Fig 17. (a) After arc removal, and (b) a segmented challenge. 
After arc removal, we use a method that is very similar to Section 
4.5 for locating remaining connected characters and estimating the 
number  of  such  characters.  Finally  we  use  the  same  “even  cut” 
method as in Section 4.6 to segment them.  
(b) 
Fig 14. (a) The result of CFS; (b) X- and Y-histograms for 
each identified object.  
Then, our arc removal algorithm is mainly an ordered sequence of 
histogram analysis, and it works as follows.  
First, the algorithm checks the highest peak value of each object’s 
histograms. If the peak value of either its X- or Y-histogram is too 
small,  then  the  object  is  either  too  flat  or  thin  to  be  a  valid 
character, and it is removed as an arc. When this step was applied, 
the third object in Fig 14 (a) was correctly removed as an arc, but 
the other two stayed.  
Second,  the  algorithm  examines  each  remaining  object’s  Y-
histogram  to  identify  low-density  rows,  which  have  only  a  tiny 
number of pixels. When a sufficient number of such rows (at least 
4 in our experiments) are consecutive, they typically constitute a 
region  that  has  a  low  density  of  foreground  pixels.  Such  region 
typically indicates that these rows contain only (portions of) arcs, 
and they can be safely removed.  
As shown in Fig 15, this step correctly removed portions of arcs 
in both the top and bottom areas of the second object in Fig 14 (a), 
although it had no effect on the first object. 
Fig 15. Arc removal: (a) low-density rows are identified, and 
(b) after step 2. 
If  any  arc  is  removed  from  an  object,  the  object’s  X-histogram 
should  be  updated  at  the  end  of  this  step  (for  the  sakes  of  both 
efficiency and accuracy of further arc removal).  
As the third step, the algorithm examines an object’s X-histogram 
to identify low-density columns. When a sufficient number of such 
columns are consecutive, they constitute a region that has a low 
density of foreground pixels. Such region typically indicates that 
these columns are (portions of) arcs that can be safely removed. 
For  example,  for  the  image  in  Fig  17  (a),  our  algorithm 
determined  that  the  most  likelihood  was  that  Object5  had  two 
connected characters because of its size, and thus the object was 
evenly  segmented  to  two  parts.  Fig  17  (b)  shows  the  final 
segmentation result, which is correct.  
A  detailed  failure  analysis  for  our  attack  on  Yahoo  scheme  1  is 
available in [2]. 
6.2  Google CAPTCHA  
We also tested a CAPTCHA that is deployed by Google to protect 
their  online  services  (see  Fig  18)  with  our  attack  on  the  MSN 
scheme. We correctly segmented 12 out of 100 random samples 
we collected, leading to a success rate of 12%. This could lead to 
an overall success rate of 8.7% (≈ .12 * .95^6.25; the average text 
length in this scheme is 6.25). However, the segmentation success 
was  exclusively  contributed  by  the  CFS  method.  At  the  time  of 
preparing  the  camera-ready  version  of  the  present  paper,  it 
appears that Google have fixed this vulnerability.  
Fig 18. The Google CAPTCHA: sample challenges.  
6.3  Other CAPTCHAs  
It is worthwhile to note that both the Yahoo and Google schemes 
we  discussed  above  were  designed  to  be  segmentation  resistant. 
For CAPTCHAs that do not follow the principle of segmentation 
resistance, it would be trivial for the CFS method to segment them 
correctly. For example, the CFS method would be a more efficient 
and  effective  way  of  attacking  Captchaservice.org  schemes  that 
were broken in our earlier work [14]. 
7.  ON SEGMENTATION RESISTANCE 
The Microsoft, Yahoo and Google CAPTCHAs discussed above 
represent  three  mainstream  styles  of  segmentation  resistance 
mechanisms  implemented  to  date,  which  are  summarised  as 
follows. 
• 
• 
• 
Applying our novel segmentation attack, we identified that these 
mechanisms,  as  currently  implemented,  have  security  flaws. 
However,  we  do  not  claim  that  the  segmentation  resistance 
principle  is  overturned.  For  example,  it  is  feasible  to  defend 
against  our  attack  on  the  Google  scheme  by  removing  gaps 
between  adjacent  characters  to  stick  the  latter  together  –  this 
would  entirely  defeat  our  attack.  (However,  this  might  make  it 
worse a usability issue that, as discussed later on, already exists in 
the current implementation of the scheme, if care is not taken).  
There are  also  simple  methods  for  improving  the  MSN  scheme, 
for example:  
•  Adopting  the  “crowding  characters  together”  method,  e.g. 
The Microsoft style: random arcs as false characters. 
The Yahoo style: random angled connecting lines.  
The Google style: crowding characters together. 
letting characters touch or overlap with each other.  
•  Making  it  harder  to  tell  characters  and  arcs  apart  (e.g.  by 
juxtaposing characters and arcs in any direction). 
•  Using  randomly  varied  widths  for  characters  could  also 
confuse some parts of our attack. 
Although  there  is  no  conclusive  technical  evidence  yet,  the 