            open("resource/%s.txt" % md5(captcha),'w' ).write(captcha)
> solve.py
    #!/usr/bin/env python
    import os 
    import telnetlib
    compares = {}
    for walkers in os.walk('compare'):
        for compare_file in walkers[2]:
            c = open("compare/%s" % compare_file).read()
            compares[c] = compare_file 
    channel = telnetlib.Telnet('210.32.4.14', 13373)
    for l in range(21):
        captchas = ['','','','','','']
        screen = channel.read_until("your captcha:")
        print(screen) 
        #print(screen.replace(" ","X"))
        captcha_blocks = screen[-1103:]
        #print captcha_blocks 
        for i in range(10):
            for j in range(6):
                cursor = i*109+j*18
                captchas[j] += captcha_blocks[ cursor:cursor+18 ] + '\n'
        tap = ''
        for captcha in captchas:
            tap += compares[captcha]
        print tap
        channel.write(tap+'\n')
### YouChat
> 由py文件可知,得到nonce就通过aes-cbc解密出flag  
>  其中流量包中包含  
>  n1 =
> 2788345359890551962905543699268136771176146000595129094648687559760519824698082876750649883170679922128843046651835660067369815643046909474111978619841667476365660977739880668233159866349478217053419208643682425092527541427901937121285804453341270303876060899970827193040944247320434441820601552072772196631  
>  n =
> 178922502641382884719655444473401202320992695012776499435228267035240519083789199752508747615390185778922172217091588694375036275788509347056710981158505765839784659343157937299004903271202878247597396606459115904969445633597329631641132639838853464328381065150951561416618657054418909973015950955119221913709  
>  e = 65537  
>  n2 =
> 122909506930720148822026880183728012525703992834932769580248844377225531647180931058151093428767439482846732968693811513424900749181859575037932026377525177691863042999954304430740868140773963404578870118560546364210827023511095073900617051661314244461840751860152430809513488211355892785320736409017285674252  
>  Z5x2stZPTMLCdUwBZcw0uwDVMaLDS1xME7+JwmeUYZb4jep2HZBF1V0IKwDL4Vse  
>  可以通过bsgs跑出nouce，然而数据包泄漏时间，直接暴力跑，  
>  nonce = int(time.time()) * 0xdeadbeef  
>  print 'using nonce: %d' % nonce  
>  nonce这样产生的,根据捕获数据包的时间可以算出nonce,直接解密flag
    In [31]: time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1537000000))
    Out[31]: '2018-09-15 16:26:40'
    In [32]: for  i in range(1537000000,1538000000):
        ...:     if pow(0x10001,i*0xdeadbeef,17892250264138288471965544447340120232099269501277649943522826703524051908378919975250874761539018577892217221709158869437503627578850934705671098115
        ...: 8505765839784659343157937299004903271202878247597396606459115904969445633597329631641132639838853464328381065150951561416618657054418909973015950955119221913709)==278834535989055196
        ...: 2905543699268136771176146000595129094648687559760519824698082876750649883170679922128843046651835660067369815643046909474111978619841667476365660977739880668233159866349478217053419
        ...: 208643682425092527541427901937121285804453341270303876060899970827193040944247320434441820601552072772196631:
        ...:         print i
        ...:         break
        ...:     
    key = pow(n2,1537004467*0xdeadbeef, n)
    1537004467
    In [19]: from Crypto.Cipher import AES
        ...: from pwn import *
        ...: FLAG = "flag{xxxxxxxxxxxxxxxxx}"
        ...: 
        ...: context.log_level="debug"
        ...: server_port = 0x1337
        ...: 
        ...: 
        ...: nonce = int(time.time()) * 0xdeadbeef
        ...: print 'using nonce: %d' % nonce
        ...: 
        ...: 
        ...: def newaes(key):
        ...:     aes_key = 0
        ...:     while key > 0:
        ...:         aes_key ^= key & (2 ** 256 - 1)
        ...:         key >>= 256
        ...:     try:
        ...:         aes_key = ('%x' % aes_key).strip('L').decode('hex')
        ...:     except:
        ...:         aes_key = ('0%x' % aes_key).strip('L').decode('hex')
        ...:     aes = AES.new(aes_key, AES.MODE_CBC, '0' * 16)
        ...:     return aes
        ...: 
    using nonce: 5762140749942402892
    In [27]: newaes(key).decrypt("Z5x2stZPTMLCdUwBZcw0uwDVMaLDS1xME7+JwmeUYZb4jep2HZBF1V0IKwDL4Vse".decode('base64'))
    Out[27]: 'EIS{annonce_nonce_once_once_once_bounce}\x08\x08\x08\x08\x08\x08\x08\x08'
### ELFRand
> 固定地址,暴力跑就可以了,可以发现flag位置前后距离不一样,0x10,0x20,可以这样二分查找,懒得写了,就多跑几遍暴力吧.
    # -*- coding: utf-8 -*-    
    from pwn import *
    import re
    base = 0xb2890
    while 1:
        p = remote("210.32.4.13", 13372)
        for i in range(-10,10):
            tem  = i
            p.recvuntil("offset: ")
            p.sendline(str(hex(base+i*0x60*10))[2:])
            data  = p.recv(16)
            xx = data.decode("hex")
            print xx
            if "\x00\x00\x00\x00\x00\x00\x00\x00"== xx and tem==-10:
                base = base+0x20
            # if "\x00\x00\x00\x00\x00\x00\x00\x00"== xx and tem!=-10:
            #   for j in range(1,10):
            #       p.recvuntil("offset: ")
            #       p.sendline(str(hex(base+(tem-1)*0x60*20+0x60*j))[2:])
            #       data  = p.recv(16)
            #       xx = data.decode("hex")
            #       print xx
            elif not re.match("[0-9a-f]{8}", xx):
                print "hhhhhhhhhhhhhhhhhhhhhhhhh"
                for j in range(-2,8):
                    p.recvuntil("offset: ")
                    p.sendline(str(hex(base+tem*0x60*10+8*j))[2:])
                    data  = p.recv(16)
                    xx = data.decode("hex")
                    print xx
        p.close()
    [*] Closed connection to 210.32.4.13 port 13372
    [+] Opening connection to 210.32.4.13 on port 13372: Done
    \x00\x00\x00\x00\x00\x00\x00\x00
    bf53c3ce
    52eb1445
    d5ea3ebd
    8e5bd798
    abd71e54
    a02ca07b
    2ecab3ac
    _123_bef
    hhhhhhhhhhhhhhhhhhhhhhhhh
    EIS{need
    _to_know
    _123_bef
    ore_hack
    ing_lol}
    \x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00
    82704618
    d1a03aad
    ab596fca