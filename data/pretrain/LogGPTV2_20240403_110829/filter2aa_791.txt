# Abusing Adobe Reader’s JavaScript APIs

## Authors
- **Brian Gorenc**: Manager, Vulnerability Research
- **AbdulAziz Hariri**: Security Researcher
- **Jasiel Spelman**: Security Researcher

## Agenda
1. Introduction
2. Understanding the Attack Surface
3. Vulnerability Discovery
4. Constructing the Exploit

## Introduction
### HP Zero Day Initiative
- **AbdulAziz Hariri (@abdhariri)**: Security Researcher at the Zero Day Initiative, specializing in root cause analysis, vulnerability discovery, and exploit development.
- **Jasiel Spelman (@WanderingGlitch)**: Security Researcher at the Zero Day Initiative, with expertise in root cause analysis, vulnerability discovery, and exploit development.
- **Brian Gorenc (@maliciousinput)**: Head of Zero Day Initiative and Organizer of Pwn2Own Hacking Competitions.

### Research Overview
- The research began in December 2014.
- Focus on bug hunting and patching vulnerabilities in Adobe Reader and Acrobat.

### Patched Vulnerabilities


### Unpatched Vulnerabilities
- ZDI-CAN-3051, ZDI-CAN-3050, ZDI-CAN-3049, ZDI-CAN-3048, ZDI-CAN-3047, ZDI-CAN-3046, ZDI-CAN-3043, ZDI-CAN-3036, ZDI-CAN-3022, ZDI-CAN-3021, ZDI-CAN-2019, ZDI-CAN-3018, ZDI-CAN-3017, ZDI-CAN-3016, ZDI-CAN-3015, ZDI-CAN-2998, ZDI-CAN-2997, ZDI-CAN-2958, ZDI-CAN-2816, ZDI-CAN-2892, ZDI-CAN-2893
- More to be discovered.

## Understanding the Attack Surface
### Prior Research and Resources
- **Gábor Molnár's Work (CVE-2014-0521)**: Highlighted a JavaScript API bypass issue that led to information disclosure. [Link](https://molnarg.github.io/cve-2014-0521/#/)
- **MWR Labs' Research**: Identified various attack vectors on Adobe Reader. [Link](https://labs.mwrinfosecurity.com/system/assets/979/original/Why_bother_assessing_popular_software.pdf)

### ZDI Research Stats
- Primary Adobe research started internally in December 2014.
- Goal: Identify and patch as many bugs as possible.
- Internal discoveries included:
  - JavaScript API Restriction Bypasses
  - Memory Leaks
  - Use-After-Frees
  - Elevation of Privileges

### Insights into Reader’s JavaScript APIs
- Adobe Acrobat/Reader exposes a rich JavaScript API for forms, annotations, and collaboration.
- Mitigations exist for the JavaScript APIs.
- Some APIs are only available in Acrobat Pro/Acrobat Standard.
- JavaScript APIs are executed in two contexts:
  - **Privileged Context**: Only trusted functions can call it (e.g., `app.trustedFunction`).
  - **Non-Privileged Context**.

### Folder-Level Scripts
- Scripts stored in the JavaScript folder inside the Acrobat/Reader folder.
- Used for automation purposes and contain trusted functions that execute privileged APIs.
- By default, Acrobat/Reader ships with `JSByteCodeWin.bin`, which is loaded during startup and exposed to the document when opened.

### Decompiling
- `JSByteCodeWin.bin` is compiled into SpiderMonkey 1.8 XDR bytecode.
- Contains interesting trusted functions.
- A decompiler for SpiderMonkey is available: [Link](https://github.com/molnarg/dead0007)

## Vulnerability Discovery
### JavaScript Method/Property Overloading
- Techniques like `__defineGetter__`, `__defineSetter__`, and `__proto__` can be used to overload methods and properties.

### Code Auditing for Overloading Opportunities
- Search for `eval` and `app.beginPriv("`.
- Achieving system-level `eval()` by overloading property access with a custom function.
- Executing privileged APIs by replacing a property with a privileged function.

### Vulnerability Chaining
- Set up the system-level `eval` to execute the bulk of the payload.
- Create a replacement attribute that calls a privileged API.
- Trigger the call.

### Proof of Concept – CVE-2015-3073

## Constructing the Exploit
### Overview
- Research triggered from Adobe's security bulletin: [Link](https://helpx.adobe.com/security/products/reader/apsb14-15.html)
- Challenge: Gain Remote Code Execution through the bypass issue using known JS APIs.

### Because Documentation Sucks...
- Needed to find a way to dump a file on disk.
- The Collab object in the JS API was particularly interesting.

### Show Me What You Got
- Overview of the Collab.uri* API:
  - Used for collaboration.
  - `uriDeleteFolder`, `uriDeleteFile`, `uriPutData`, and `uriCreateFolder` are privileged APIs.
  - `uriEnumerateFiles` is not privileged.
  - Takes a URI path as an argument, expected to be a UNC path starting with `smb://` or `file://`.
  - Fails to sanitize the UNC path, check the file type, and check the content of the `oData` object.

### Gaining RCE
- Two methods:
  1. Write a file to the startup and wait for a logoff/logon.
  2. Write a DLL that would be loaded by Adobe Acrobat.

### Putting It All Together (Adobe Acrobat Pro)
1. Attach the payload to the PDF.
2. Create a JavaScript that executes when the document is open.
3. JavaScript composed of:
   - Extraction of the attachment.
   - Bypassing JS privileges.
   - Executing `Collab.uriPutData` to output the payload (startup/dll).

### Demo
Thank you.