Abusing Adobe Reader’s  
JavaScript APIs
Brian Gorenc, Manager, Vulnerability Research
AbdulAziz Hariri, Security Researcher
Jasiel Spelman, Security Researcher
Agenda
•  Introduction
•  Understanding the Attack Surface
•  Vulnerability Discovery
•  Constructing the Exploit
Introduction
Introduction
4
HP Zero Day Initiative
AbdulAziz Hariri - @abdhariri
Security Researcher at the Zero Day Initiative
Root cause analysis, vulnerability discovery, and exploit development
Jasiel Spelman - @WanderingGlitch
Security Researcher at the Zero Day Initiative
Root cause analysis, vulnerability discovery, and exploit development
Brian Gorenc - @maliciousinput
Head of Zero Day Initiative
Organizer of Pwn2Own Hacking Competitions
Research starting in December 2014
Bug Hunters
Patched Vulnerabilities
CVE-2015-5085, CVE-2015-5086, CVE-2015-5090, 
CVE-2015-5091, CVE-2015-4438, CVE-2015-4447, 
CVE-2015-4452, CVE-2015-5093, CVE-2015-5094, 
CVE-2015-5095, CVE-2015-5101, CVE-2015-5102, 
CVE-2015-5103, CVE-2015-5104, CVE-2015-5113, 
CVE-2015-5114, CVE-2015-5115, CVE-2015-5100, 
CVE-2015-5111, CVE-2015-4435, CVE-2015-4441, 
CVE-2015-4445, CVE-2015-3053, CVE-2015-3055, 
CVE-2015-3057, CVE-2015-3058, CVE-2015-3065, 
CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, 
CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, 
CVE-2015-3054, CVE-2015-3056, CVE-2015-3061, 
CVE-2015-3063, CVE-2015-3064, CVE-2015-3069, 
CVE-2015-3060, CVE-2015-3062
Unpatched Vulnerabilities
ZDI-CAN-3051, ZDI-CAN-3050, ZDI-CAN-3049, 
ZDI-CAN-3048, ZDI-CAN-3047, ZDI-CAN-3046, 
ZDI-CAN-3043, ZDI-CAN-3036, ZDI-CAN-3022, 
ZDI-CAN-3021, ZDI-CAN-2019, ZDI-CAN-3018, 
ZDI-CAN-3017, ZDI-CAN-3016, ZDI-CAN-3015, 
ZDI-CAN-2998, ZDI-CAN-2997, ZDI-CAN-2958, 
ZDI-CAN-2816, ZDI-CAN-2892, ZDI-CAN-2893
…more to come. 
5
Understanding the Attack Surface
Understanding Attack Surface
7
Prior research and resources
•  The life of an Adobe Reader JavaScript bug (CVE-2014-0521) - Gábor Molnár
•  First to highlight the JS API bypass issue
•  The bug was patched in APSB14-15 and was assigned CVE-2014-0521
•  According to Adobe, this could lead to information disclosure
•  https://molnarg.github.io/cve-2014-0521/#/
•  Why Bother Assessing Popular Software? – MWR Labs
•  Highlights various attack vectors on Adobe reader
•  https://labs.mwrinfosecurity.com/system/assets/979/original/Why_bother_assessing_popular_software.pdf
Understanding Attack Surface
8
ZDI Research Stats
•  Primary Adobe research started internally in December 2014
•  We were not getting many cases in Reader/Acrobat
•  Main goal was to kill as much bugs as possible
•  Internal discoveries varied in bug type
–  JavaScript API Restriction Bypasses
–  Memory Leaks
–  Use-After-Frees
–  Elevation of Privileges
–  etc.
Understanding Attack Surface
9
Insights Into Reader’s JavaScript API’s
•  Adobe Acrobat/Reader exposes a rich JS API
•  JavaScript API documentation is available on the Adobe website
•  A lot can be done through the JavaScript API (Forms, Annotations, Collaboration etc..)
•  Mitigations exist for the JavaScript APIs
•  Some API’s deﬁned in the documentation are only available in Acrobat Pro/Acrobat standard
•  Basically JavaScript API’s are executed in two contexts:
–  Privileged Context – Only Trusted functions can call it (app.trustedFunction)
–  Non-Privileged Context
Understanding Attack Surface
10
Insights Into Reader’s JavaScript API’s
•  Privileged vs Non-Privileged contexts are deﬁned in the JS API documentation:
•  A lot of API’s are privileged and cannot be executed from non-privileged contexts:
Understanding Attack Surface
11
Insights Into Reader’s JavaScript API’s
•  Privileged API’s warning example from a non-privileged context:
Understanding Attack Surface
12
Folder-Level Scripts
•  Scripts stored in the JavaScript folder inside the Acrobat/Reader folder
•  Used to implement functions for automation purposes
•  Contains Trusted functions that execute privileged API’s
•  By default Acrobat/Reader ships with JSByteCodeWin.bin
•  JSByteCodeWin.bin is loaded when Acrobat/Reader starts up
•  It’s loaded inside Root, and exposed to the Doc when a document is open
Understanding Attack Surface
13
Decompiling 
•  JSByteCodeWin.bin is compiled into SpiderMoney 1.8 XDR bytecode 
•  JSByteCodeWin.bin contains interesting Trusted functions
•  Molnarg was kind enough to publish a decompiler for SpiderMonkey
–  https://github.com/molnarg/dead0007
–  Usage: ./dead0007 JSByteCodeWin.bin > output.js
–  Output needs to be prettiﬁed
–  ~27,000 lines of Javascript
Vulnerability Discovery
Vulnerability Discovery
15
JavaScript Method/Property Overloading
•  __deﬁneGetter__ and __deﬁneSetter__
Vulnerability Discovery
16
JavaScript Method/Property Overloading
•  __proto__
Vulnerability Discovery
17
Code Auditing for Overloading Opportunities
•  Search for ‘eval’
Vulnerability Discovery
18
Code Auditing for Overloading Opportunities
•  Search for ‘app.beginPriv(“
Vulnerability Discovery
19
Achieving System-Level eval()
•  Overload property access with a custom function
Vulnerability Discovery
20
Executing Privileged APIs
•  Replace a property with a privileged function
Vulnerability Discovery
21
Vulnerability Chaining
•  Set up the system-level eval such that it executes the bulk of the payload
•  Create the replacement attribute such that it now calls a privileged API
•  Trigger the call
Vulnerability Discovery
22
Proof of Concept – CVE-2015-3073
Constructing the Exploit
Constructing the exploit
24
Overview
•  Research triggered from https://helpx.adobe.com/security/products/reader/apsb14-15.html:
•  Challenge:  Gain Remote Code Execution through the bypass issue
•  We might be able to do that through the JS API’s that we know about
Constructing the exploit
25
Because documentation sucks..
•  We needed to ﬁnd a way to dump a ﬁle on disk
•  The ﬁle can be of any type (try to avoid restrictions)
•  Let’s have a look at the Collab object…through the JS API from Adobe:
•  Through the console:
Constructing the exploit
26
“If you want to keep a secret, you must also hide it from yourself.” – G. Orwell 
•  From all the 128 undocumented methods, the Collab.uri* family is speciﬁcally interesting:
Constructing the exploit
27
“The more you leave out, the more you highlight what you leave in.”  - H. Green
•  Too good to be true, so I consulted uncle Google before digging more: 
Constructing the exploit
28
Show me what you got...
•  Quick overview of the interesting methods:
Constructing the exploit
29
•  Overview of the Collab.uri* API’s:
–  The API’s are used for “Collaboration”
–  uriDeleteFolder/uriDeleteFile/uriPutData/uriCreateFolder are privileged API’s
–  uriEnumerateFiles is NOT privileged
–  The Collab.uri* methods take a URI path as an argument (at least)
–  The path expected should be a UNC path
–  The UNC path should start with smb:// or ﬁle://
•  The API’s fail to:
–  Sanitize the UNC path (smb://localhost/C$/XXX works)
–  Check the ﬁletype of the ﬁlename to be written on disk (in the case of uriPutData)
–  Check the content of oData object to be dumped (in the case of uriPutData)
Constructing the exploit
30
•  What we have so far:
–  We can dump ﬁles on disk using the Collab.uriPutData() method
–  The ﬁle contents that we want to dump should be passed as the oData object
–  We can attach ﬁles in PDF documents and extract the contents
–  We should chain the uriPutData call with one of the bypasses that we discussed earlier
Then what ? How can we get RCE? Actually there are two obvious ways..
Constructing the exploit
31
Gaining RCE
•  First way…a la Vupen:
Basically write a ﬁle to the startup and wait for a logoﬀ/logon !
•  Second way is writing a DLL that would be loaded by Adobe Acrobat:
Constructing the exploit
32
Putting it all together (Adobe Acrobat Pro)
1.  Attach our payload to the PDF
2.  Create a JS that would execute when the document is open
3.  JS is composed of:
1. 
Extraction of the attachment
2. 
Bypass JS privileges
3. 
Execute Collab.uriPutData to output our payload (startup/dll)
Extract 
Attachment
Bypass JS 
Privileges
Call uriPutData 
with the extracted 
attachment
RCE
Constructing the exploit
33
Putting it all together (Adobe Acrobat Pro)
DEMO
Thank you