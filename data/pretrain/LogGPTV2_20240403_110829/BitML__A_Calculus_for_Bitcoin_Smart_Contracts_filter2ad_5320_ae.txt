semantics of BitML, where deposits can be spent arbitrarily.
Reveal / choice. Recall from Section 2 the timed commitment
contract TC = D1 + D2, where D1 = reveal a . withdraw A and
D2 = after t : withdraw B. The contract precondition is G =
A:! 1B @ x | A:secret a | B:! 0B @ y. Before running the com-
piler, A generates a random nonce sa, and broadcasts its hash
ha = H (sa ). Honest participants will choose a nonce of length
greater than a public security parameter η. A large enough parame-
ter (e.g., η = 128) ensures that the other participants cannot infer
sa (assuming H to be preimage resistant), nor its length. Further, A
cannot later on reveal a different secret or a different length (assum-
ing collision resistance). After that, both participants can compile
{G}TC, obtaining the following transactions:
Tinit
in: 0 (cid:55)→ Tx , 1 (cid:55)→ Ty
wit: 0 (cid:55)→ sigK(A)
out:
, 1 (cid:55)→ sigK(B)
(λ⃗ς β .versigK(D1,{A,B}) (⃗ς ) ∧ H (β ) = ha ∧ |β| ≥ η
∨ versigK(D2,{A,B}) (⃗ς ),
1B)
Treveal
in: Tinit
wit: sigK(D1,{A,B})
out: (λ⃗ς .versigK(withdraw A,{A,B}) (⃗ς ), 1B)
[sa]
TA
in: Treveal
wit: sigK(withdraw A,{A,B})
out: (λς . versigK(A) (ς ), 1B)
TB
in: Tinit
wit: sigK(D2,{A,B})
out: (λς . versigK(B) (ς ), 1B)
absLock: t
−
and sigK(D2,B)
Transaction Tinit can be redeemed in two ways, according to
the two clauses in the disjunction of its output script: (i) with both
(corresponding to the reveal
signatures sigK(D1,A)
and sigK(D1,B)
branch), or (ii) with both signatures sigK(D2,A)
(cor-
responding to the after branch).
In case (i), also the secret value sa must be provided in the wit
field of Treveal. As indicated by the square brackets around sa in
Treveal, such value is not provided at compilation time, but added
at runtime. Crucially, altering the wit field does not invalidate the
signatures sigK(D1,A)
on Treveal (since signatures
neglect the wit field), nor the actual identifier of Treveal used in the
in field of TA. This relies on the SegWit feature (activated in August
2017), which allows to neglect witnesses in the computation of
and sigK(D1,B)
transaction identifiers. Revealing the secret and appending Treveal
correspond to the following computation steps in BitML (time is
omitted, because immaterial in this case):
{A : a#N} | ⟨TC, 1B⟩ −→ A : a#N | ⟨TC, 1B⟩ −→ ⟨withdraw A , 1B⟩
After that, anyone can append the transaction TA to the blockchain
to transfer 1B under A’s control. Note that once Treveal is on the
blockchain, it will be no longer possible to append TB, since both
transactions want to redeem Tinit.
In case (ii), the absLock guarantees that TB can be appended to
the blockchain only after time t, coherently with the after clause
in BitML. Indeed, appending TB (which makes 1B available to B)
corresponds to the following step in BitML (where t′ ≥ t):
⟨TC, 1B⟩ | t
′ −→ ⟨B, 1B⟩ | t
′
8 COHERENCE
Our computational soundness result is based on a correspondence
between symbolic and computational runs, that we call coherence.
Intuitively, a symbolic run Rs is coherent with a computational
run Rc when each symbolic step in Rs is matched by the computa-
tional step corresponding to its implementation in Rc (in symbols,
Rs ∼r Rc, where r is the randomness source used by participants).
We illustrate the coherence relation following the possible symbolic
steps (see Appendix A.6 for the formal details).
Advertisement. Advertising a contract {G}C in Rs is performed
through the following step:
Γ −→ Γ | {G}C
which requires that all the deposits mentioned in G (either persis-
tent or volatile) occur in Γ. This step corresponds, in Rc, to broad-
casting a bitstring which encodes the symbolic term {G}C. In the
bitstring, the deposit names in G are encoded as the identifiers of
their corresponding Bitcoin transaction outputs.
Stipulation: committing secrets. After advertisement, commit-
ting secrets is done in Rs performing a step such as:
Γ | {G}C −→ Γ | {G}C | {A : a#N} | A[# ▷ {G}C] = Γ1
assuming, for simplicity, that G only requires A:secret a . In Rc,
this step corresponds to a broadcast of a message m(C, h, ⃗k ) which
comprises the encoding of the contract advertisement C, the hash h
of the secret of A, and the sequence ⃗k of all the public keys K(D , B)
for any D subterm of C, and any participant B occurring in G. Note
that A can obtain ⃗k by previously exchanging the public keys with
other participants in Rc. Message m is then signed using key KA.
We further require that, in Rc, the value h was indeed generated
by querying the oracle O with some bitstring of length N + η. If
h is not generated through the oracle, or if the required length is
shorter than η, the computational commitment would be coherent,
instead, with the symbolic commitment {A : a#⊥}, which models a
dishonestly chosen secret.
Stipulation: authorizing deposits. The stipulation phase pro-
ceeds, in the symbolic model, by providing the authorizations to
spend the persistent deposits required by G. This is done in Rs by
performing a step such as:
Γ1 −→ Γ1 | A[x ▷ {G}C] = Γ2
assuming, for simplicity, that G only requires A:! vB @ x. In Rc,
this step corresponds to the broadcast of a signature on the Tinit
transaction made with A’s key ˆKA. This signature authorizes Tinit
to redeem the transaction output corresponding to the symbolic
persistent deposit ⟨A, vB⟩x . The unsigned Tinit transaction is ob-
tained from the compiler, using the hashes and the keys in the
commitment messages m(C, h, ⃗k ) broadcast in Rc by each partic-
ipant. Note that an honest participant would sign Tinit only after
having exchanged with the other participants the signatures for all
the other transactions generated by the compiler.
Stipulation: activating the contract. The stipulation phase is
finalised by gathering all the required persistent deposits, and pro-
ducing an active contract with an initial balance equal to their sum.
This is done in Rs by performing a step such as:
Γ2 −→ ⟨C , vB⟩ | Γ0
where Γ = Γ0 | ⟨A, vB⟩x
In Rc, this step corresponds to appending Tinit to the blockchain.
In the symbolic run, once the active contract
Contract actions.
⟨C , vB⟩ is created, it can be executed by performing its actions,
causing in Rs steps such as:
⟨C , vB⟩ −→ ⟨C
′
, vB⟩
In the computational run, each of these steps corresponds to ap-
pending to the blockchain a transaction. The blockchain initially
contains a compiler-generated transaction TC , with an unspent
output (say, at index i) corresponding to C. Performing the com-
putational step consists in appending another compiler-generated
transaction TC ′, which redeems the output i of TC . In turn, TC ′ has
an output corresponding to C ′. The case of split steps, where:
⟨C , vB⟩ −→ ⟨C1, v1B⟩ | · · · | ⟨Cn, vnB⟩
is similar: TC ′ will now have n outputs, corresponding to the n
active contracts produced by the symbolic step.
Some symbolic steps can only be performed under certain condi-
tions. For instance, C = A : τ .C ′ (recall that τ = reveal∅) requires
A’s authorization before it can move forward. In the symbolic model,
this authorization is provided by the step:
⟨C , vB⟩x −→ ⟨C , vB⟩x | A[x ▷ C]
In the computational setting, TC can be redeemed with the sig-
natures of all the participants. During the stipulation phase, all
such signatures of TC ′ are exchanged, except for A’s one. Partici-
pant A can give her authorization at runtime by broadcasting such
signature, coherently with the symbolic step above.
Another symbolic step which requires the intervention of a given
participant is that of firing a reveal prefix. Indeed, in a symbolic
run, C = reveal a .C ′ can only proceed once the secret a has been
revealed through a step:
⟨C , v⟩ | {A : a#N} −→ ⟨C , v⟩ | A : a#N
In the computational run, this corresponds to broadcasting a preim-
age of the hash value which was broadcast during the stipulation.
After. Symbolic delays trivially correspond to computational ones.
11
Deposits. Symbolic steps which manage deposits have an imme-
diate computational counterpart. For instance, joining two deposits
⟨A, v⟩x and ⟨A, v′⟩y into a single deposit ⟨A, v + v′⟩z corresponds
to appending to the blockchain a transaction with two inputs Tx
and Ty and one output, with value v + v′. Its witnesses comprise
two signatures with ˆKA, and its output script verifies a signature
with the same key. In the symbolic run, before the join action can
be performed, A needs to authorize the spending of x and y, using
two distinct steps. In the computational run, these steps correspond
to two messages, where A broadcasts the two signatures.
Dually, dividing a deposit ⟨A, v + v′⟩ into two parts ⟨A, v⟩ and
⟨A, v′⟩ corresponds, in the computational run, to appending to the
blockchain a transaction with a single input and two outputs. Trans-
forming ⟨A, v⟩x into ⟨B, v⟩y (i.e., donating a deposit) corresponds,
in the computational run, to appending to the blockchain a trans-
action having as input Tx , as witness a signature with ˆKA, and a
single output of value v, redeemable with ˆKB.
Computational broadcasts. As described above, symbolic au-
thorization or reveal steps correspond to computational broadcasts
of suitable messages, such as signatures or hash preimages. Compu-
tational participants, however, can also broadcasts other messages,
e.g. for exchanging their public keys during stipulation. Further,
dishonest computational participants can broadcast any arbitrary
bitstring they can compute in PPTIME. Coherence ignores any com-
putational broadcast which does not correspond to any of the above
mentioned symbolic steps. That is, such broadcasts correspond to
no symbolic steps. Ignoring these messages does not affect the se-
curity of contracts, because the other computational messages (in
particular, the appended transactions) are enough to reconstruct,
from a computational run, the BitML steps in the symbolic run.
Appending non-compiler-generated transactions. A subtle
case in the definition of coherence is when dishonest participants
append transactions to the blockchain. To illustrate the issue, sup-
pose that a dishonest A owns vB, represented in the symbolic run
as a term ⟨A, v⟩x , and in the computational run as a transaction Tx
redeemable with ˆKA. Since A knows her key ˆKA, she can sign an
arbitrary transaction T′ which redeems vB from Tx , and append it
to the blockchain. Crucially, T′ could be a transaction that can never
be generated by the BitML compiler. In such case, it is not possible
to precisely match this computational step with a symbolic one. To
obtain a correspondence, we let the appending of T′ to be coherent
with the symbolic destruction of the deposit ⟨A, v⟩x , which makes
it disappear from the symbolic configuration. In subsequent steps,
coherence will ignore the descendants of T′ in the computational
run. While, in principle, this loss of information at the symbolic
level could allow for computational attacks without a symbolic
counterpart, in fact this is not the case, since computational attacks
can always be adapted so to have a symbolic counterpart. Indeed, to
attack honest participants, A has to stipulate contracts with them:
this requires A to put a deposit, computationally represented as a
transaction T′′. Instead of obtaining T′′ from T′, which makes T′′
unrepresentable at the symbolic level, A can perform symbolically-
representable actions to create from T a deposit T′′′ with the same
value of T′′, to be used in the computational attack. This adaptation
is feasible, because unrepresentable computational actions do not
allow the adversary to artificially increase his wealth. Hence, the
12
value of T′′ can not exceed the value of T, so making it possible to
produce T′′′ with symbolic actions.
Note that, unlike A’s deposits, active contracts involving A can
not be destroyed by A in the symbolic run. Hence, if in the compu-
tational run A can somehow redeem a transaction T which corre-
sponds to an active contract, using a transaction T′ which is not
symbolically representable, then such computational step is not co-
herent with any symbolic step. This is intended, since in such case
A succeeded in an attack which made the active contract deviate
from its symbolic behavior.
Deposits and coherence. The following lemma ensures that de-
posits in a symbolic run Rs have a correspondent transaction output
in any computational run Rc coherent with Rs. A similar correspon-
dence also exists for active contracts (see Appendix A.6).
Lemma 1. Let Rs ∼r Rc . For each deposit ⟨A, v⟩ occurring in ΓRs ,
there exists a corresponding unspent transaction output in BRc with
value v, redeemable with a signature with key ˆKA.
9 COMPUTATIONAL SOUNDNESS
To state the correctness of the BitML compiler, we need to describe
how to convert any symbolic strategy Σs
to a computational strat-
A
egy Σc
A ), which realizes the symbolic behaviour in the
A
computational model. Here, we provide the key intuition behind
the construction (see Appendix A.7 for details). Strategy Σc
re-
A
ceives as input a (stripped) computational run Rc. From this, Σc
A
can reconstruct a (stripped) symbolic run Rs coherent with Rc. At
this point, Σc
on Rs, obtaining a set of symbolic actions
A
Λs. This is then converted to a set of corresponding computational
moves Λc, so that performing any of the computational moves will
produce an extension of Rc which is still coherent with Rs, possibly
extended with one of the symbolic moves in Λs. This conversion
closely follows the definition of coherence.
runs Σs
A
= ℵ(Σs
In the statement above, r represents the randomness used by
all participants, including Adv. Formally, r maps each participant
to an infinite string of independent and uniformly distributed bits.
Once r is fixed, the behavior of the participants is deterministic,
resulting in a single run. Hence, the probability that r drives a run
Rc satisfying some property p, as done in the statement, can be seen
as the probability that a random run Rc, sampled according to the
Our computational soundness result follows (see Appendix A.8
for its proof). We assume that honest participants have a symbolic
strategy, and that their computational strategy is consequently
obtained through the mapping ℵ sketched above. Our computa-
tional soundness result establishes that any computational run
conforming to the (computational) strategies, with overwhelming
probability has a corresponding symbolic run conforming to the
(symbolic) strategies.
Theorem 2 (Computational soundness). Let Σs be a set of sym-
bolic strategies for all A ∈ Hon. Let Σc be a set of computational
A ) for all A ∈ Hon, including an arbi-
= ℵ(Σs
strategies such that Σc
A
Adv. Fix k ∈ N. Then, the following set has
trary adversary strategy Σc
(cid:26)
(cid:27)
overwhelming probability: