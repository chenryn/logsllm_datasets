tual miners as each member of the consensus group is
allowed to hold multiple shares. This means that the
number of available shares gives an upper bound on the
latency of the consensus mechanism with the worst case
being that each member holds exactly one share.
In order to choose a value for w appropriately one
must take into account not only consensus latency and
the desired security level (ideally ≥ 99%) but also the in-
creased chance for resource churn when values of w be-
come large. From a security perspective the results of Ta-
ble 1 suggest that the share window size should not be set
to values lower than w = 144. Ideally, values of w = 288
and above should be chosen to obtain a reasonable secu-
rity margin and, as demonstrated in Section 4, values up
to w = 1008 provide excellent performance numbers.
Finally, care should be taken when bootstrapping the
protocol, as for small values of w there is a high proba-
bility that a malicious adversary is able to take over con-
trol. For this reason we suggest that ByzCoin starts with
vanilla Nakamoto consensus and only after w keyblocks
are mined the ByzCoin consensus is activated.
5.3 Defense Against Bitcoin Attacks
0-conﬁrmation Double-Spend Attacks. Race [35]
and Finney [26] attacks belong to the family of 0-
conﬁrmation double-spend attacks which might affect
traders that provide real-time services to their clients. In
such scenarios the time between exchange of currency
and goods is usually short because traders often cannot
afford to wait an extended period of time (10 or more
minutes) until a transaction they received can be consid-
ered indeed conﬁrmed.
ByzCoin can mitigate both attacks by putting the mer-
chant’s transaction in a collectively signed microblock
whose veriﬁcation latency is in the order of a few sec-
onds up to a minute. If this latency is also unacceptable,
then he can send a single transaction for signing, which
will cost more, but is secured in less than 4 seconds.
N-conﬁrmation Double-Spend Attacks. The
as-
sumption underlying this family of attacks [7] is that,
after receiving a transaction for a trade, a merchant
waits N − 1 additional blocks until he concludes the
interaction with his client. At this point, a malicious
client creates a new double-spending transaction and
tries to fork the blockchain, which has a non-negligible
success-probability if the adversary has enough hash
power.
if N = 3 then an adversary
holding 10% of the network’s hash power has a 5%
success-chance to mount the above attack [47].
For example,
In ByzCoin the merchant would simply check the
collective signature of the microblock that includes the
Figure 11: Successful double-spending attack probabil-
ity
Figure 12: Client-perceived secure transaction latency
P [X ≤ c] =
c
k=0(cid:31)w
∑
k(cid:30)pk (1− p)w−k
(2)
Table 1 displays the results for the evaluation of Eq. (2)
for various window sizes w both in the common threat
model where an adversary controls up to 25% hash
power and in the situation where the system faces a
stronger adversary with up to 30% computing power.
The latter might temporarily occur due to hash power
variations and resource churn.
Table 1: Expected proof-of-membership security levels
2016
p | w
0.25
1.000
0.999
0.30
12
0.842
0.723
1008
0.999
0.989
288
0.999
0.902
100
0.972
0.779
144
0.990
0.832
At this point, recall that w speciﬁes the number of
13
USENIX Association  
25th USENIX Security Symposium  291
transaction, which allows him to verify that it was ac-
cepted by a super-majority of the network. Afterwards
the attacker cannot succeed in forking the blockchain as
the rest of the signers will not accept his new block. Even
if the attacker is the leader, the proposed microblock will
be rejected, and a view change will occur.
Eclipse and Delivery-Tampering Attacks.
In an
eclipse attack [34] it is assumed that an adversary con-
trols a sufﬁciently large number of connections between
the victim and the Bitcoin network. This enables the at-
tacker to mount attacks such as 0- and N-conﬁrmation
double-spends with an ever increasing chance of suc-
cess the longer the adversary manages to keep his control
over the network. Delivery-tampering attacks [31] ex-
ploit Bitcoin’s scalability measures to delay propagation
of blocks without causing a network partition. This al-
lows an adversary to control information that the victim
receives and simpliﬁes to mount 0- and 1-conﬁrmation
double-spend attacks as well as selﬁsh-mining.
While ByzCoin does not prevent an attacker from
eclipsing a victim or delaying messages in the peer-to-
peer network, its use of collective signatures in transac-
tion commitment ensure that a victim cannot be tricked
into accepting an alternate attacker-controlled transac-
tion history produced in a partitioned network fragment.
Selﬁsh and Stubborn Mining Attacks. Selﬁsh min-
ing [25] allows a miner to increase his proﬁt by adding
newly mined blocks to a hidden blockchain instead of in-
stantly broadcasting them. This effect can be further am-
pliﬁed if the malicious miner has good connectivity to the
Bitcoin network. The authors of selﬁsh mining propose
a countermeasure that thwarts the attack if a miner has
less than 25% hash power under normal circumstances or
less than 33% in case of an optimal network. Stubborn
mining [48] further generalizes the ideas behind selﬁsh
mining and combines it with eclipse attacks in order to
increase the adversary’s revenue.
In ByzCoin, these strategies are ineffective as forks are
instantly resolved in a deterministic manner, hence build-
ing a hidden blockchain only wastes resources and min-
imizes revenue. Another approach to prevent the above
attacks would be to include bias-resistant public random-
ness [40] in every keyblock. This way even if an attacker
gains control over the consensus mechanism (e.g., by
having > 33% hash power) he would still be unable to
mine hidden blocks. We leave exploring this approach
for future research.
Transaction Censorship.
In Bitcoin-NG, a malicious
leader can censor transactions for the duration of his
epoch(s). The same applies for ByzCoin. However, as
not every leader is malicious, the censored transactions
are only delayed and will be processed eventually by the
next honest leader. ByzCoin can improve on this, as the
leader’s actions are double-checked by all the other min-
ers in the consensus group. A client can announce his
censored transaction just like in classic PBFT; this will
indicate a potential leader fault and will either stop cen-
sorship efforts or lead to a view-change to remove the
malicious leader. Finally, in Bitcoin(-NG) a miner can
announce his intention to fork over a block that includes
a transaction, giving an incentive to other miners to ex-
clude this transaction. In ByzCoin using fork-based at-
tacks to censor transactions is no longer possible due to
ByzCoin’s deterministic fork resolution mechanism. An
attacker can therefore only vote down a leader’s propos-
als by refusing to co-sign. This is also a limitation, how-
ever, as an adversary who controls more than 33% of the
shares (Section 7) deny service and can censor transac-
tions for as long as he wants.
6 Related Work
ByzCoin and Bitcoin [47] share the same primary ob-
jective:
implement a state machine replication (SMR)
system with open membership [9, 29]. Both therefore
differ from more classic approaches to Byzantine fault-
tolerant SMRs with static or slowly changing consensus
groups such as PBFT [14], Tendermint [10], or Hyper-
ledger [42].
Bitcoin has well-known performance shortcomings;
there are several proposals [41, 57] on how to address
these. The GHOST protocol [53] changes the chain se-
lection rule when a fork occurs. While Bitcoin declares
the fork with the most proof-of-work as the new valid
chain, GHOST instead chooses the entire subtree that
received the most computational effort. Put differently,
the subtree that was considered correct for the longest
time will have a high possibility of being selected, mak-
ing an intentional fork much harder. One limitation of
GHOST is that no node will know the full tree, as in-
valid blocks are not propagated. While all blocks could
be propagated, this makes the system vulnerable to DoS
attacks since an adversary can simply ﬂood the network
with low-difﬁculty blocks.
Off-chain transactions, an idea that originated from the
two-point channel protocol [33], are another alternative
to improve latency and throughput of the Bitcoin net-
work. Other similar proposals include the Bitcoin Light-
ning Network [50] and micro-payment channels [20],
which allow transactions without a trusted middleman.
They use contracts so that any party can generate proof-
of-fraud on the main blockchain and thereby deny rev-
enue to an attacker. Although these systems enable faster
cryptocurrencies, they do not address the core problem
292  25th USENIX Security Symposium 
USENIX Association
14
of scaling SMR systems, thus sacriﬁcing the open and
distributed nature of Bitcoin. Finally, the idea behind
sidechains [5] is to connect multiple chains with each
other and enable the transfer of Bitcoins from one chain
to another. This enables the workload distribution to
multiple subsets of nodes that run the same protocol.
There are several proposals that, like ByzCoin, tar-
get the consensus mechanism and try to improve differ-
ent aspects. Ripple [52] implements and runs a variant
of PBFT that is low-latency and based on collectively-
trusted subnetworks with slow membership changes.
The degree of decentralization depends on the concrete
conﬁguration of an instance. Tendermint [10] also im-
plements a PBFT-like algorithm, but evaluates it with at
most 64 “validators”. Furthermore, Tendermint does not
address important challenges such as the link-bandwidth
between validators, which we found to be a primary bot-
tleneck. PeerCensus [19] is an interesting alternative that
shares similarities with ByzCoin, but is only a prelimi-
nary theoretical analysis.
Finally, Stellar [43] proposes a novel consensus proto-
col named Federated Byzantine Agreement, which intro-
duces Quorum slices that enable a BFT protocol “open
for anyone to participate”. Its security, however, depends
on a nontrivial and unfamiliar trust model requiring cor-
rect conﬁguration of trustees by each client.
7 Limitations and Future Work
This section brieﬂy outlines several of ByzCoin’s impor-
tant remaining limitations, and areas for future work.
Consensus-Group Exclusion. A malicious ByzCoin
leader can potentially exclude nodes from the consen-
sus process. This is easier in the ﬂat variant, where
the leader is responsible for contacting every participat-
ing miner, but it is also possible in the tree-based ver-
sion, if the leader “reorganizes” the tree and puts nodes
targeted for exclusion in subtrees where the roots are
colluding nodes. A malicious leader faces a dilemma,
though: excluded nodes lose their share of newly minted
coins which increases the overall value per coin and thus
the leader’s reward. The victims, however, will quickly
broadcast view-change messages in an attempt to remove
the Byzantine leader.
As an additional countermeasure to mitigate such an
attack, miners could run a peer-to-peer network on top of
the tree to communicate protocol details. Thus each node
potentially receives information from multiple sources.
If the parent of a node fails to deliver the announcement
message of a new round, this node could then choose
to attach itself (together with its entire subtree) to an-
other participating (honest) miner. This self-adapting
tree could mitigate the leader’s effort to exclude miners.
As a last resort, the malicious leader could exclude the
commitments of the victims from the aggregate commit-
ment, but as parts of the tree have witnessed these com-
mitments, the risk of triggering a view-change is high.
In summary, the above attack seems irrational as the
drawbacks of trying to exclude miners seem to outweigh
the beneﬁts. We leave a more thorough analysis of this
situation for future work.
Defenses Against 33%+ Attacks. An attacker pow-
erful enough to control more than 1
3 of the consensus
shares can, in the Byzantine threat model, trivially censor
transactions by withholding votes, and double-spend by
splitting honest nodes in two disjoint groups and collect-
ing enough signatures for two conﬂicting microblocks.
Fig. 12 shows how the safety of ByzCoin fails at 30%,
whereas Bitcoin remains safe even for 48%, if a client
can wait long enough.
However, the assumption that an attacker completely
controls the network is rather unrealistic, especially if
messages are authenticated and spooﬁng is impossi-
ble [3]. The existence of the peer-to-peer network on
top of the tree, mentioned in the previous paragraph, en-
ables the detection of equivocation attacks such as mi-
croblock forks and mitigates the double-spending efforts,
as honest nodes will stop following the leader. Thus,
double-spending and history rewriting attacks in Byz-
Coin become trivial only after the attacker has 66% of
the shares, effectively increasing the threshold from 51%
to 66%. This assumption is realistic, as an attacker con-
trolling the complete network can actually split Bitcoin’s
network in two halves and trivially double-spend on the
weaker side. This is possible because the weak side cre-
ates blocks that will be orphaned once the partition heals.
We again leave a more thorough analysis of this situation
for future work.
Proof-of-Work Alternatives. Bitcoin’s hash-based
proof-of-work has many drawbacks, such as energy
waste and the efﬁciency advantages of custom ASICs
that have made mining by “normal users” impracti-
cal. Many promising alternatives are available, such
as memory-intensive puzzles [4], or proof-of-stake de-
signs [37]. Consensus group membership might in prin-
ciple also be based on other Sybil attack-resistant meth-
ods, such as those based on social trust networks [58].