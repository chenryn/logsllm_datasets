AOSP (Android Open-Source Project) 4.3 and 4.4 deﬁnes
ﬁve domains within its policy ﬁles: platform_app;
shared_app;
and
untrusted_app. The last one is the domain assigned to
all third-party applications installed by the user, in accord
with Android’s adversary model. These policy ﬁles are
ready-only and compiled into the Android kernel code. They
are enforced by security hooks placed at different system
functions at the kernel layer. For example, the function open
is instrumented to check the compliance of each call with
the policies: it gets the type of the ﬁle to be opened and the
domain of the caller, and then runs avc_has_perm with the
SIDs of both the subject and object to ﬁnd out whether this
operation is allowed by the policies. Here avc_has_perm
ﬁrst searches an Access Vector Cache (AVC) that caches the
policies enforced recently and then the whole policy ﬁle. In
addition to the components built into the kernel, SEAndroid
also includes a separate middleware MAC (MMAC) that
works on the application-framework/library layer. The current
implementation of MMAC on AOSP is limited to just assigning
a security tag (seinfo) to a newly installed application.
When Zygote forks a process for an app to be launched, it uses
that tag in tandem with a policy ﬁle (seapp_contexts) to
decide which SELinux domain should be assigned to it.
The current design of SEAndroid still cannot achieve the
granularity for controlling external resources. It does not have
types deﬁned for the address of a Bluetooth device, the serial
number for an NFC device, the SMS ID and the Audio port,
nor does it place security hooks at the channels related to such
resources. To control access to the resources, system functions
at both the kernel layer and the framework/library layer need
to be instrumented. SEAndroid does include a mechanism to
mediate a range of IP addresses a process can connect to.
However, the policy is hard-coded within the Linux kernel and
its enforcement has not been exposed to Android’s DAC. As
a result, an ordinary user cannot specify rules to protect her
Internet resources. In our research, we extended both the MAC
and MMAC layers that are currently integrated into AOSP
(Section IV), to protect those channels and further leveraged
the enforcement mechanism to support a DAC system that
guards a wide spectrum of external resources.
III. UNDERSTANDING THE THREATS
To understand the security threats to Android external
resources, we analyzed a set of prominent accessories and
online services that utilize popular channels. Our ﬁndings
echo the prior studies on Bluetooth and the Internet (local
socket connections) channels [28], [24]. In particular, we
previously found that security-critical Bluetooth devices are
under the threats of information stealing and data injection
attacks from an unauthorized app with the BLUETOOTH and
BLUETOOTH_ADMIN permissions [28]. In addition, others
illustrated that all no-root third-party screenshot services can
be exploited by a malicious app connecting to them through
the Internet channel, which can also be abused to break other
security policies, e.g., unauthorized access to enterprise internal
servers. This work further shows that the SMS, Audio and
NFC channels are equally under-protected, exposing private user
information like bank account balances, password reset links
etc. Those ﬁndings point to the security challenges posed by the
4
widening gap between the coarse-grained Android protection
and the current way of using external resources.
A. Methodology
Apps and external resources. In our study, we ﬁrst looked
at the permissions for accessing main channels that apps
use to communicate with their external resources, including
Audio, NFC, SMS, Bluetooth and Internet. Our purpose is
to ﬁnd out how pervasive these permissions are among third-
party apps and how popular those apps are among Android
users (indicating their willingness to grant the permissions to
the apps). To this end, we studied 13,500 top-ranking apps
collected from Google Play, whose total and average number
of installations are presented in Table I. Some of these apps
indeed need the permissions to provide services. An example is
GoLocker [5], which uses the RECEIVE_SMS permission to
record and process incoming messages, and notify the user of
the event on her lock screen. Others are just over-privileged [20],
asking for permissions they never use. Either way, Android
users have to grant those apps what they want in order to
install them, and many of them do, as indicated by billions of
installations reported by Google Play.
We further investigated whether the apps using these
permissions (particularly for Audio, NFC and SMS) to ex-
change sensitive data with their external resources do it in
a secure manner. This is important because if this resource-
app protection is not in place, other apps with the same
permissions can get their hands on the data, due to Android’s
coarse-grained control on the channels. For this purpose,
we chose from our collection a small set of top-ranking
apps handling private information, including 13 Audio and
17 NFC apps. For SMS, we looked into 14 popular online
services, including those provided by leading ﬁnancial institutes
(Bank of America, Chase, Wells Fargo, PayPal) and social
networks (Facebook, Twitter, WhatsApp, WeChat, Naver Line,
etc.), and a web mail (Gmail). Those services communicate
with com.android.sms and sometimes, their own apps
using short text messages. For Bluetooth and Internet, privacy
threats to these channels have already been reported by prior
research [28], [24].
Table II provides examples for the apps and services used in
our study. All the services we analyzed clearly involve private
user data. Such sensitive information is also handled by all
ﬁve apps subjected to our analysis, i.e two credit-card-related
NFC apps, one credit-card-related Audio app, one ﬁtness Audio
app and one app using SMS for two-step authentication. Some
other payment related apps using the Audio jack, are heavily
obfuscated and we were not able to decompile them using
popular de-compilation tools (dex2jar, apktool). Most of the
other apps in the Audio category are remote controllers or
sensors that work with a dongle attached to the phone’s Audio
jack. Although those devices do not appear to be particularly
sensitive (e.g., the camera that can be commanded remotely to
take pictures), such functionalities (e.g., remote control) could
have security implications when they are applied to control
more sensitive devices. Our study also reveals that the most
prevalent use of NFC apps is for reading and writing NFC tags
(tags with microchips for short-range radio communication),
which can be used to keep sensitive user data (e.g., a password
for connecting to one’s Wi-Fi access point) or trigger operations
TABLE I: Environment Study: 13,500 top apps (500 top apps for each of 27 Google Play categories) from Google Play. #downloads (total and average) and #apps per sensitive
permission
No
1
2
3
4
5
6
7
8
9
10
11
Permission(s)
Total Downloads
READ SMS (and not 2)
RECEIVE SMS (and not 1)
1 AND 2
BLUETOOTH (and not 5)
BLUETOOTH ADMIN (and not 4)
4 AND 5
RECORD AUDIO (and not 8)
MODIFY AUDIO SETTINGS (and not 7)
7 AND 8
NFC
INTERNET
1,519,670,000
641,104,000
1,220,503,000
1,968,116,000
0
1,215,007,600
1,960,964,950
417,355,500
3,164,060,000
2,583,934,500
20,153,137,630
Average
Downloads
11,965,906
3,727,349
4,676,257
9,283,566
0
3,310,647
2,689,938
1,662,771
8,218,338
14,850,198
1,694,965
Number
of apps
127
172
261
212
0
367
729
251
385
174
11890
Channel App
AUDIO
EMS+
Usage
Credit card reader
# of downloads
5,000 - 10,000
TABLE II: Critical Examples
AUDIO
UP
SMS
All bank services
Tracks sleep, physical activity
and nutritional info
Alert messages and Text bank-
ing
100,000 - 500,000
NA
SMS
NFC
NFC
Chat and SNS
SquareLess
Authentication
Credit card reader
100,000,000 - 1,000,000,000
10,000 - 50,000
Electronic
Pickpocket RFID
Credit card reader
10,000 - 50,000
Details
Decrypt : Creates a private key of RSA with hardcoded modulus
and private exponent. Uses it to load session key which is used in
AES to process messages from credit card dongle.
Doesn’t include any authentication features. A repackaged app with
different credential is able to read existing data from the band.
Both SMS can be read by any app with SMS permission.Alert
messages: sensitive ﬁnancial activity and amount info. Text banking:
receive, send money and check balance.
2 step authentication; veriﬁcation code sent via SMS.
Reads credit card information. Malicious apps may also read credit
card data as this app does.
Reads credit card information. Malicious apps may also read credit
card data as this app does.
(e.g., Wi-Fi connection). A more sensitive application of NFC
is payment through a digital wallet. However, related NFC
equipment is hard to come by.
Security analysis. Over those apps and services, we conducted
both dynamic and static analyses to determine whether there is
any protection in place when they use those channels. For SMS,
we simply built an app with the RECEIVE_SMS permission to
ﬁnd out what it can get. All NFC apps were studied using NFC
tags, in the presence of an unauthorized app with the NFC
permission. For those in the Audio category, we analyzed
a Jawbone UP wristband, a popular ﬁtness device whose
app (com.jawbone.up) has 100,000 to 500,000 downloads
on Google Play, to understand its security weakness. In the
absence of other Audio dongles, relevant apps were decompiled
for a static code inspection to ﬁnd out whether there is any
authentication and encryption protection during those apps’
communication with their external devices. Speciﬁcally, we
looked for standard or home-grown cryptographic libraries (e.g.,
javax.crypto, BouncyCastle, SpongyCastle) within the code,
which are needed for establishing a secret with the dongles.
Also, the apps are expected to process the data collected from
their dongles locally, instead of just relaying it to online servers,
as a few payment apps do. This forces them to decrypt the data
if it has been encrypted. Finally, we ran those apps to check
whether a password or other secrets are needed to establish a
connection with their dongles. Our analysis was performed on
a Nexus 4 with Android 4.4.
B. Results
SMS. The SMS channel turns out to be intricate. Whenever the
Telephony service on the phone receives a text message from
the radio layer, the InboundSmsHandler puts it in an Intent,
and then calls SMSDispatcher to broadcast it to all the
apps that register with the event (SMS_RECEIVED_ACTION
or SMS_DELIVER_ACTION) and have the RECEIVE_SMS
permission. Also the InboundSmsHandler stores the mes-
sage to the content provider of SMS. Such a message is limited
to text content with up to 160 characters. To overcome this
constraint, the message delivered today mainly goes through
the Multimedia Messaging Service (MMS), which supports
larger message length and non-text content such as pictures.
What really happens when sending such a message (which can
include multimedia content) is that a simple text message is
ﬁrst constructed and transmitted through SMS to the MMS
on the phone, which provides a URI for downloading the
actual message. Then, MMS broadcasts the message through
the Intent to recipients with the RECEIVE_MMS permission
and also saves the message locally through its content provider.
An app with the READ_SMS permission can query both the
SMS and MMS content providers for their contents. Our study
shows that this mechanism can leak sensitive information.
As expected, all short messages from leading online services
delivered to our Nexus 4 phone were fully exposed to the
unauthorized app with the READ_SMS or the RECEIVE_SMS
permission. Note that such messages should only be received
and read by com.android.sms to display their content to
the owner of the phone, as well as those services’ ofﬁcial apps:
for example, Facebook, Naver Line, WeChat and WhatsApp,
directly extract a veriﬁcation code from their servers’ messages
to complete a two-step authentication on the owner’s behalf.
Information leaks through this under-regulated channel are
serious and in some cases, catastrophic. A malicious app
can easily get such sensitive information as account balances,
incoming/outgoing wire transfers, debit card transactions, ATM
withdrawals, a transaction’s history, etc. from Chase, Bank of
America and Wells Fargo, authorized amount for a transaction,
available credit, etc. from Chase Credit Card and Wells Fargo
Visa, and notiﬁcations for receiving money and others from
5
PayPal. It can also receive authentication secrets from Facebook,
Gmail, WhatsApp, WeChat, Naver Line and KakaoTalk, and
even locations of family members from Life360, the most
prominent family safety online service. An adversary who
controls the app can also readily get into the device owner’s
Facebook and Twitter accounts: all she needs to do is to generate
an account reset request, which will cause those services to send
the owner a message with a reset link and conﬁrmation code.
With such information, even the app itself can automatically
reset the owner’s passwords, by simply sending requests through
the link using the mobile browser. A video demo of those attacks
is posted online [7]. Note that almost all banks provide mobile
banking, which allows enrolled customers to check their account
and transaction status through SMS messages. Given the fact
that even among our collection of 13,500 apps, already hundreds
of third-party apps with the READ_SMS or RECEIVE_SMS
permission have been installed billions of times (see Table I),
for millions of users, their conﬁdential information (account
details, authentication secret, etc.) has already been exposed to
those apps.
Audio. We analyzed the Jawbone UP wristband [6], one of the
most popular ﬁtness devices that utilize the low-cost Audio
channel. The device tracks its user’s daily activities, when she
moves, sleeps and eats, and provides summary information to
help the user manage her lifestyle. Such information can be
private. However, we found that it is completely unprotected.
We ran an unauthorized app that dumped such data from the
device when it was connected to the phone’s Audio jack.
For all other apps in the Audio category, we did not have
their hardware pieces and therefore could only analyze their
code statically. Speciﬁcally, among all 5 credit-card reading
apps, PayPal, Square and Intuit are all heavily obfuscated, which
prevented us from decompiling them. Those devices are known
to have cryptographic protection and designed to send encrypted
credit-card information from their card readers directly to the
corresponding web services [9], [17]. The other two apps,
EMS+ and Payment Jack, were decompiled in our research. Our
analysis shows that both of them also receive ciphertext from
their card-reader dongles. However, they decrypt the data on
the phone using a hard-coded secret key. Since all the instances
of these apps share the same key, an adversary can easily
extract it and use it to decrypt a user’s credit-card information
downloaded from the app’s payment dongle. Furthermore, all
other apps, which either support sensors (e.g, wind meter) or
remote controllers (e.g., remote picture taking), are unprotected,
without authentication and encryption at all. This demonstrates
the challenge for the device manufacturer and app developer to
come up with a practical resource-device protection mechanism,
highlighting the need for an OS-level solution.
NFC. Android employs a dispatcher mechanism to decide
which app can access an NFC device or tag. The dis-
patcher will choose an app to get NDEF data and the
device/tag’s serial number, according to the priorities that
the apps register with through Intent-ﬁlters. These priorities
from the highest to the lowest are: NDEF_DISCOVERED,
TECH_DISCOVERED and TAG_DISCOVERED. The system