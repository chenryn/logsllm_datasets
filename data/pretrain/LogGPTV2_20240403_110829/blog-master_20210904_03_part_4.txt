resp: 6.02 resp_io: 5.00 resp_cpu: 7157811  
HA Join             #hash join  
Outer table:   
resc: 2.00 card 94.01 bytes: 4 deg: 1 resp: 2.00  
Inner table: T1 Alias: T1  
resc: 3.01 card: 87.37 bytes: 29 deg: 1 resp: 3.01  
using dmeth: 2 #groups: 1  
Cost per ptn: 0.50 #ptns: 1  
hash_area: 0 (max=0) Hash join: Resc: 5.52 Resp: 5.52 [multiMatchCost=0.00]  
HA cost: 5.52             #hash join的代价为5.52，这里计算出来的代价值和上面T1关联T表的代价值相等，那么CBO会继续比较串行执行和并行执行的IO和CPU代价  
resc: 5.52 resc_io: 5.00 resc_cpu: 3632662         #串行执行的CPU代价为3632662大于上面计算出来的3632312   
resp: 5.52 resp_io: 5.00 resp_cpu: 3632662         #并行执行的CPU代价为3632662大于上面计算出来的3632312   
Join order aborted: cost > best plan cost         # 废弃该join方式  
***********************  
(newjo-stop-1) k:0, spcnt:0, perm:2, maxperm:2000  
*********************************  
Number of join permutations tried: 2  
*********************************  
(newjo-save) [1 0 ]  
Final - All Rows Plan: Best join order: 1         # 得出结论，采用T1表hash joinT表的方式   
Cost: 5.5156 Degree: 1 Card: 86.0000 Bytes: 2838         # 具体代价  
Resc: 5.5156 Resc_io: 5.0000 Resc_cpu: 3632312  
Resp: 5.5156 Resp_io: 5.0000 Resc_cpu: 3632312  
kkoipt: Query block SEL$1 (#0)  
******* UNPARSED QUERY IS *******  
SELECT "T1"."ID" "ID","T1"."OBJECT_NAME" "OBJECT_NAME" FROM "HR"."T1" "T1","HR"."T" "T" WHERE "T1"."ID"<:B1 AND "T"."X"="T1"."ID" AND "T"."X"<:B2  
kkoqbc-end  
: call(in-use=43384, alloc=49112), compile(in-use=37140, alloc=37692)  
apadrv-end: call(in-use=43384, alloc=49112), compile(in-use=37760, alloc=41816)  
sql_id=azdnm8t9dwdb3.  
Current SQL statement for this session:  
select t1.* from t1,t where t.x<:c and t.x=t1.id  
============  
Plan Table  
============  
------------------------------------------------+-----------------------------------+  
| Id | Operation | Name | Rows | Bytes | Cost | Time |  
------------------------------------------------+-----------------------------------+  
| 0 | SELECT STATEMENT | | | | 6 | |  
| 1 | HASH JOIN | | 3 | 99 | 6 | 00:00:01 |  
| 2 | INDEX RANGE SCAN | T_IDX | 3 | 12 | 2 | 00:00:01 |  
| 3 | TABLE ACCESS BY INDEX ROWID | T1 | 5 | 145 | 3 | 00:00:01 |  
| 4 | INDEX RANGE SCAN | T1_IDX | 5 | | 2 | 00:00:01 |  
------------------------------------------------+-----------------------------------+  
Predicate Information:  
----------------------  
1 - access("T"."X"="T1"."ID")  
2 - access("T"."X"<:C)  
4 - access("T1"."ID"<:C)  
Content of other_xml column  
执行计划  
===========================  
db_version : 10.2.0.1  
parse_schema : HR  
plan_hash : 1611193875  
Outline Data:  
/*+  
BEGIN_OUTLINE_DATA  
IGNORE_OPTIM_EMBEDDED_HINTS  
OPTIMIZER_FEATURES_ENABLE('10.2.0.1')  
OPT_PARAM('_b_tree_bitmap_plans' 'false')  
OPT_PARAM('optimizer_dynamic_sampling' 3)  
ALL_ROWS  
OUTLINE_LEAF(@"SEL$1")  
INDEX(@"SEL$1" "T1"@"SEL$1" ("T1"."ID"))  
INDEX(@"SEL$1" "T"@"SEL$1" ("T"."X"))  
LEADING(@"SEL$1" "T1"@"SEL$1" "T"@"SEL$1")  
USE_HASH(@"SEL$1" "T"@"SEL$1")  
END_OUTLINE_DATA  
*/  
Optimizer environment:  
optimizer_mode_hinted = false  
optimizer_features_hinted = 0.0.0  
参数和bug信息  
。。。。。省略若干行。。。。。。  
Query Block Registry:  
*********************  
MISC$1 0xb7f4ac90 (PARSER) [FINAL]  
Optimizer State Dump: call(in-use=84156, alloc=84156), compile(in-use=38936, alloc=82100)  
                        深入解析10053事件  
你是否想知道一句sql语句如何执行，它是否走索引，是否采用不同得驱动表，是否用nestloop join,hash join…..?这一切对你是否很神秘呢？或许你会说execution plan能看到这些东西，但是你是否清楚execution plan是如何得到？这篇文章就是给出了隐藏在execution plan底下的具体实现。  
10053事件  
10053事件是oracle提供的用于跟踪sql语句成本计算的内部事件，它能记载CBO模式下oracle优化器如何计算sql成本，生成相应的执行计划。  
如何设置10053事件  
设置本session的10053  
开启：  
Alter session set events’10053 trace name context forever[,level {1/2}]’;  
关闭：  
Alter session set events’10053 trace name context off’;  
设置其他session的10053  
开启：  
SYS.DBMS_SYSTEM.SET_EV (, , 10053, {1|2}, '')  
关闭：  
SYS.DBMS_SYSTEM.SET_EV (, , 10053,0, '')  
跟其他跟踪事件不同，10053提供了两个跟踪级别，但是级别2的跟踪信息比级别1少（其他跟踪事件如10046跟踪级别越高信息越多），跟踪信息将被记录到user_dump_dest目录底下。注意，要实现跟踪必须满足两个条件：sql语句必须被hard parse并且必须使用CBO优化器模式。如果sql语句已经被parse过，那么10053不生成跟踪信息。如果你使用RULE优化器，那么10053也不会生成跟踪信息。  
跟踪内容  
跟踪文件包括6部分：  
Sql语句  
优化器相关参数  
基本统计信息  
基本表访问成本  
综合计划  
特殊功能的成本重计算  
这篇文章将会涉及到前4项和一部分第5项的内容，我们将会用以下语句作为例子：  
select dname, ename from emp, dept  
where emp.deptno = dept.deptno  
and ename = :b1  
sql语句：  
这部分是整个跟踪文件里最容易理解的部分，包括了所执行的sql语句，如果你采用RULE模式优化器，那么除了这一部分外将不会有多余信息出现在跟踪文件里。  
优化器相关参数：  
记载了所有影响成本计算的参数  
***************************************  
PARAMETERS USED BY THE OPTIMIZER  
********************************  
OPTIMIZER_FEATURES_ENABLE = 8.1.6  
OPTIMIZER_MODE/GOAL = Choose  
OPTIMIZER_PERCENT_PARALLEL = 0  
HASH_AREA_SIZE = 131072  
HASH_JOIN_ENABLED = TRUE  
HASH_MULTIBLOCK_IO_COUNT = 0  
OPTIMIZER_SEARCH_LIMIT = 5  
PARTITION_VIEW_ENABLED = FALSE  
_ALWAYS_STAR_TRANSFORMATION = FALSE  
_B_TREE_BITMAP_PLANS = FALSE  
STAR_TRANSFORMATION_ENABLED = FALSE  
_COMPLEX_VIEW_MERGING = FALSE  
_PUSH_JOIN_PREDICATE = FALSE  
PARALLEL_BROADCAST_ENABLED = FALSE  
OPTIMIZER_MAX_PERMUTATIONS = 80000  
OPTIMIZER_INDEX_CACHING = 0  
OPTIMIZER_INDEX_COST_ADJ = 100  
QUERY_REWRITE_ENABLED = TRUE  
QUERY_REWRITE_INTEGRITY = ENFORCED  
_INDEX_JOIN_ENABLED = FALSE  
_SORT_ELIMINATION_COST_RATIO = 0  
_OR_EXPAND_NVL_PREDICATE = FALSE  
_NEW_INITIAL_JOIN_ORDERS = FALSE  
_OPTIMIZER_MODE_FORCE = TRUE  
_OPTIMIZER_UNDO_CHANGES = FALSE  
_UNNEST_SUBQUERY = FALSE  
_PUSH_JOIN_UNION_VIEW = FALSE  
_FAST_FULL_SCAN_ENABLED = TRUE  
_OPTIM_ENHANCE_NNULL_DETECTION = TRUE  
_ORDERED_NESTED_LOOP = FALSE  
_NESTED_LOOP_FUDGE = 100  
_NO_OR_EXPANSION = FALSE  
_QUERY_COST_REWRITE = TRUE  
QUERY_REWRITE_EXPRESSION = TRUE  
_IMPROVED_ROW_LENGTH_ENABLED = TRUE  
_USE_NOSEGMENT_INDEXES = FALSE  
_ENABLE_TYPE_DEP_SELECTIVITY = TRUE  
_IMPROVED_OUTERJOIN_CARD = TRUE  
_OPTIMIZER_ADJUST_FOR_NULLS = TRUE  
_OPTIMIZER_CHOOSE_PERMUTATION = 0  
_USE_COLUMN_STATS_FOR_FUNCTION = FALSE  
_SUBQUERY_PRUNING_ENABLED = TRUE  
_SUBQUERY_PRUNING_REDUCTION_FACTOR = 50  
_SUBQUERY_PRUNING_COST_FACTOR = 20  
_LIKE_WITH_BIND_AS_EQUALITY = FALSE  
_TABLE_SCAN_COST_PLUS_ONE = FALSE  
_SORTMERGE_INEQUALITY_JOIN_OFF = FALSE  
_DEFAULT_NON_EQUALITY_SEL_CHECK = TRUE  
_ONESIDE_COLSTAT_FOR_EQUIJOINS = TRUE  
DB_FILE_MULTIBLOCK_READ_COUNT = 32  
SORT_AREA_SIZE = 131072  
基本统计信息:  
下一部分是所有表和索引的基本统计信息  
基本统计信息包括  
表:  
Trace label         dba_tables column  
CDN                     NUM_ROWS                       表记录数  
NBLKS                   BLOCKS                           高水位以下的block数  
TABLE_SCAN_CST                                           全表扫描的I/O成本  
AVG_ROW_LEN      AVG_ROW_LEN                       平均行长  
索引:  
Trace label         dba_indexes column  
Index#, col#                                      索引号及表列号  
LVLS                   BLEVEL                             BTREE索引高度  
#LB                    LEAF_BLOCKS                      索引叶块数  
#DK                   DISTINCT_KEYS                     不重复索引关键字  
LB/K              AVG_LEAF_BLOCKS_PER_KEY          叶块/关键字  
DB/K             AVG_DATA_BLOCKS_PER_KEY          数据块/关键字  
CLUF              CLUSTERING_FACTOR                    索引聚合因子  
***************************************  
BASE STATISTICAL INFORMATION  
***********************  
Table stats Table: DEPT Alias: DEPT  
TOTAL :: CDN: 16 NBLKS: 1 TABLE_SCAN_CST: 1 AVG_ROW_LEN: 20  
-- Index stats  
INDEX#: 23577 COL#: 1  
TOTAL :: LVLS: 0 #LB: 1 #DK: 16 LB/K: 1 DB/K: 1 CLUF: 1  
***********************  
Table stats Table: EMP Alias: EMP  
TOTAL :: CDN: 7213 NBLKS: 85 TABLE_SCAN_CST: 6 AVG_ROW_LEN: 36  
-- Index stats  
INDEX#: 23574 COL#: 1  
TOTAL :: LVLS: 1 #LB: 35 #DK: 7213 LB/K: 1 DB/K: 1 CLUF: 4125  
INDEX#: 23575 COL#: 2  
TOTAL :: LVLS: 1 #LB: 48 #DK: 42 LB/K: 1 DB/K: 36 CLUF: 1534  
INDEX#: 23576 COL#: 8  
TOTAL :: LVLS: 1 #LB: 46 #DK: 12 LB/K: 3 DB/K: 34 CLUF: 418  
***************************************  
基本表访问成本：  
这里开始CBO将会计算单表访问的成本  
单表访问路径  