的，对吗？那是监管工作必须注意的事情。监管所遇到的困难（我
类似这样的问题时都会进入“命令与控制”模式。进行监管的人会认
为他们是在做管理的。
他们试图决定项目的走向，他们的介入太过积极，他们给团队加上
了太多的负担。他们并始要求团队定期产生状态报告或是参加月度
控制委员会的会议，或是要求几个月并一次里程碑会议并要求团队
证明他们所做的事情。这给团队增加了很多不必要的负担。好的监
管应当与授权和激励有关，不应当成为命令和控制的方式，不应当
成为负担。显然，监管会有一些额外并销，但是不应当太多。如果
太多了，监管工作就会变得有害，这是我们面临的非常严重的挑
战。
Jenny：你是如何处理那种挑战的？为了确保没有强迫团队容忍有害
的监管，首先要做的事情是什么？
Scott：你要尽可能地实现自动化监管。我和PerKroll在大约一年半
前写过一篇这方面的白皮书，叫做“精益并发监管”，我们的观点是
尽可能实现自动化监管，以便尽可能容易地准确地汇报度量值，而
且要让负责监管的人理解不同的团队面临的情况是不同的。做监管
的人需要灵活，需要明白，一个5人的团队和一个50人的团队的工
作方式是不一样的。一个构建数据仓库的团队的工作方式和开发网
站的团队是不一样的。即使我们使用的是相同的技术构建类似的产
316
---
## Page 318
品，也要知道，我们都是不同的人，我们都是不同的团队。因为这
个原因，那些团队需要以不同的方式监管。
做监管的人最常犯的一个错误是试图把同样的过程和同样的监管体
系强加给不同的团队，因为不同的团队需要不同的方法来监管，所
以这种方法是行不通的。目标可能是一样的，但是实现这些目标的
方法是不同的。我想说的是你应当实现可重复的结果，不是可重复
的过程。但是对于那些僵化和官僚的人来说，很难做到这一点。
Jenny：我觉得很有趣，因为当你谈到使用很多自动化解决方案来处
理这种东西时，实际上会让我们变得像写很多文档一样紧重。为了
将质量活动事先自动化，需要创建很多的测试框架并把自动化脚本
放进去，还需要把很多实践方法都放进去。由此带来的工程量似乎
很繁重。
Scot：你观察得很仔细。如果你要生产自已所有的工具，确实是很
繁重。我认为这是敏捷领域面临的另外一个难题。很多敏捷团队都
依赖于并源软件，这种做法是很有道理的。但是也有限制，其中一
个限制是集成，特别把监管和准确的度量报告集成进去。你需要超
越一些敏捷讨论。
例如，有一个例子叫做Jazz，在http:/jazz.net可以下载它的一些演示
用的副本。但是在RationalTeamConcert（它是基于Jazz的）中我们
把所有这些内容都自动化了。敏捷团队手头的所有东西一—缺陷跟
踪报告和燃尽图，不管是他们需要报告还是不需要报告的东西，都
是手工做的，现在也可以实时地自动产生的。所以说，不存在真正
的屏障。但那是因为已经实现了。
如果所有的都必须由你自已实现，工作量将会非常大。所以我们看
到主流敏捷领域现在所做的事情有一些局限，同时也有一些滩题。
没有哪家银行或保险公司的并发团队想要并发他们自已的编译器。
编译器是购买或免费下载的。你开始看到集成得更好的工具，提供
了帮助你有效监管所需的信息。但是你肯定不希望手头全都是这些
事情，都由你自己实现，因为这是一个巨大的负担。
Andrew：我们谈到了构建软件的很多障碍，在访谈结束的时候我们
很想说一些令人愉快的事情。你能告诉我们一个你曾经工作过的优
秀团队吗？
317
---
## Page 319
Scot：我工作的最好的一个团队不是软件团队。那是我所在的空手
道训练学校。我接受了10年的空手道训练，直到一次受伤后被道停
止，非常不幸，但情况就是这样。那里有一些可以让很多团队受益
的有趣的哲学思想。其中一条哲学思想或者说是一个规则是在北美
的空手道有一个带的概念：你依次通过白带、黄带等，直到黑带。
有一个规则是低带选手或经验不多的选手总是可以找高带的人一起
训练，寻求他们的帮助。那个人负责帮助他们展现出最好的能力。
其中一部分帮助可以这样表达：“我不知道怎么样向你描述，但是
这里的这个人可以帮助我们，所以让我们在这上下点功夫，做得更
好。”
愿意寻求帮助是至关重要的。但是愿意给予帮助也是至关重要的，
武术的一个原则是通过帮助与教导别人，比你自已学习能够学到的
东西要多。这是很多人都能认同的观点。
如果房间里只有橙带，你们仍旧可以一起合作，彼此帮助实现所需
的东西。我在空手道中学到了彼此愿意合作的精神，我也试着把它
在软件团队中用起来。很有意思的是，敏捷社区有编码的套路和编
码训练班。我觉得有相当多的人将武术的思想带到了软件开发中。
武术已经存在了很长时间，他们已经知道如何传授给人们。因为它
在很大程度是出于自愿的：作为成人，你参加武术班是因为你想学
武术，也可能是想强身健体，也可能是其他目标。但是不管是什么
目标，你参加武术班是为了让自已变得更好。
Andrew：你说的这些内容非常有趣。我学过另外一种日本武术合气
道，学了大约10年。我非常喜欢合气道的一个地方是大家总是在一
起训练。向初级的人传授武术也是训练的一个重要部分，特别是当
你资历越来越深时。有一件我一再发现的事情是一—我并没有指望
着发现，但是我确实发现了一—我在传授别人东西时所学到的比我
在由别人教的时候学到的还要多。
这是另外一件可以很好地转换到编程和软件世界的事情。例如，当
我和Jemmy编写《深入浅出C#》这本教授别人编程的书时，我需要向
新人来解释一些概念，在这个过程中我学到了很多。我的意思是，
我完全理解了一些内容，比如说，项目中使用的的面向对象并发的
核心原理。我深切地感觉到，如何向一位刚并始学习C#的程序员解
释他们为什么应当关心封装，或关心接口与抽象类的差异，以他们
能够理解的方式向他们解释，这让我自己的理解水平也上了一个全
新的台阶。
318
---
## Page 320
我发现这些都可以直接转换到我的工作中。我发现作为经理，特别
是我的部分工作是训练团队中的成员，不仅要帮助他们完成工作，
还要帮助他们以专业的方式并发，在这个过程中我从他们那里学习
到了很多，常常是无意识的，但有时候是有意识的。有时候一位仪
有几年编程经验的人会有一些我从来没有听说过的好想法。所以我
完全理解你说的这些话。
非
合。比如说，如果新手和专家结对，他们会发现彼此都会受益。显
然，新手和专家一起工作时会学到很多。但是，专家在回答那些向
题时也会有所收获。可能会是一个些简单明了的问题：“你为什么
要那样做？”嗯，是因为.....等一下，我是为什么要这样做呢？这
种方式会强迫你考虑你的一些实践方法，这就是一个提升的机会。
“这样做没有多大意义，也许我可以做得更好。”
Andrew：啊。你刚才说的这些和我与Jenny在编写我们的第一本书
遇到的情况几乎是完全一样的。实际上，我在书中也写了一—在讲
述结对编程的一节中，在谈到资历浅的成员和资历深的成员的时
题，但是最后发现这个问题是一个严重问题。特别是那些资深成员
早已习惯、不会再注意到的问题。”有时候代码问题的严重程度只
有在解释给其他人听的时候才会变得清楚。这和你刚才所说的是完
全一样的。
这又让我想到了一个问题：为什么很难让程序员去做呢？在所有的
实践方法中，敏捷也好，其他方法也好，我们的团队也做过，也和
其他人讨论后，结对编程是一个几乎无法让团队采用的方法。让他
Jenny：我想是因为有一种直觉的想法，让两个人同时干一件事情是
固有的浪费，人们不想这样做。
Scot：有很多这种情况。另外，人们也不习惯这种做法。你自己在
办公桌边说自己的话，做自已的事情，非常有趣，而结对编程很枯
燥。你做上五六个小时就精疲力尽了，因为你是在真正地工作。
我做的一件有点苛刻的事情是强制推行这种方式。我的技巧是把这
个想法带到团队中：这就是所有的内容，这就是你要采取的方式。
但是很难。我们要好好谈谈，谈谈为什么这么难。我要让团队做的
319
---
## Page 321
是同意试上一个月。我们定期交换结对的伙伴一一每天都应当换一
个人，不再是昨天的那个人。我们好好协商一下。我们在那一整个
月中都不充许再独自编程。到了那个月结束的时候，我们再决定是
否还要这么做下去。我发现强制实施这种方式后，让人们连续地使
用这种方法，到了那个月结束的时候，很少有人愿意再倒回去采取
独自编程的方式了。但是需要花些时间。这是一种“没有痛苦就没
有收获"的交易一一或者是其他的说法，不管怎么说，有时候只能
逆来顺受、依样执行。结对编程就是一种需要强制推行一段时间
的。因为并始的时候很不习惯。它让人觉得奇怪，让很多人都感到
不习惯。所以你只能是要求他们做。我发现选择了这种方法的团队
程方式的人也许只有5%。但是需要一个月的时间才能让他们接受结
对编程。
Andrew：你觉得是因为如果一个人以前从来没有做过，就很难理解
其他人为什么要这样做？
Scott：我想是的。结对编程开始是一件很难的事情，但是能够带来
很多好处。有一个固有的好处很难直接观察到，这正是问题所在。
对于这种事情，你很容易得出结论：“两个人在同一个桌子前面工
作，每个人的生产率会降低一半。"如果你从来没有做过，很容易
会产生贬低它的作用。但是一旦经历过这件事，就相当好了。
Andrew：你认为这是让团队接受变革的一般规则吗？不管开始的时
候有多么大的牢骚，一旦尝试过了，就不愿意再回到原来的方式？
Scot：我得出的一般结论是，如果有些事情引发了很多的讨论，有
很多证据表明它是可行的，那就值得一试了。我不知道你现在是否
认识到了多吃糠的好处一—你肯定会认识到它的好处，相信我！并
始的时候你不愿吃这种东西。但是过上一段时间，你就会想：
“嗯，这种东西给我带来不少好处。”总之，你需要做的就是坚持到
底做下去。
第27章质量与速度
为什么需要选择？
Johanna Rothman
320
---
## Page 322
在担任一个项目的项目经理时，我曾经和公司的一个高级经理有过
这样一段对话：
大奶酪：“停止那些代码评审。这种评审降低了项目的速度。”
Johanna：“但是不做代码评审我们就不知道缺陷在哪里。我们需要
代码评审。”
大奶酪：“停止代码评审，不然我并除你。”
Johanna：“你因为我做了正确的事情而开除我？”
大奶酪：“在目前的情况下，正确的事情是尽快完成项目。停止那
些代码评审。”相当奇怪的谈话，对吧？
我希望这只是一个个别事件。但是虽然这段对话是20年前发生的，
但直到现在，每天在某个地方都还会看到这样的事情。这个故事中
所讲述的团队对于管理人员施加的快速完成项目的压力没有做出让
步。他们知道，如果工作做得非常好，通过正确的方式，是可以让
速度快起来的。
我们的项目是怎么并始的
让我们打并时间倒转机器，回到项目开始的时候，大奶酪把项目团
队带到一起，说道：“我有一个好消息。我推销了一个新版本的
ProcessControlApp。但是第3个版本必须快速完成，要有这5个新功
能。并且，在6个月后就要用它。”
项目团队的6个并发人员聚到一起讨论问题。他们作为团队已经一
起工作好几年了。最新的团队成员在这个产品上和团队一起工作了
18个月，资历最深的并发人员在4年前就启动了这个产品。他们相
互了解，知道应该如何一起工作。
ProcessControlApp是集成到生产线中的，所以没有界面。应用程序
的输入、输出都是通过命令行或API进行的。ProcessControlApp对生