```
在文件**/etc/dovecot/conf.d/auth-sql.conf.ext**里，设置以下参数：
```
passdb {
  driver = sql
  args = /etc/dovecot/dovecot-sql.conf.ext
}
userdb {
  driver = static
  args = uid=mail gid=mail home=/var/mail/%d/%n
}
```
这是告诉dovecot用户的邮件保存在目录/var/mail/domainname/username下，以及如何从我们刚建立的数据库里查找密码。现在我们还需要告诉dovecot具体如何使用数据库。这样需要把下面的内容加入**/etc/dovecot/dovecot-sql.conf.ext**文件：
```
driver = mysql
connect = host=localhost dbname=mailserver user=mailuser password=mailuserpass
default_pass_scheme = SHA512-CRYPT
password_query = SELECT email as user, password FROM virtual_users WHERE email='%u';
```
我们现在修改一下配置文件的权限
```
chown -R mail:dovecot /etc/dovecot
chmod -R o-rwx /etc/dovecot
```
基本差不多了！只是还需要再多编辑几个文件。在文件**/etc/dovecot/conf.d/10-master.conf**里，设置以下参数：
```
service imap-login {
  inet_listener imap {
    #port = 143
    port = 0
  }
  inet_listener imaps {
    port = 993
    ssl = yes
  }
}
service pop3-login {
 inet_listener pop3 {
    #port = 110
    port = 0
  }
  inet_listener pop3s {
    #port = 995
    #ssl = yes
    port = 0
  }
}
service lmtp {
  unix_listener /var/spool/postfix/private/dovecot-lmtp {
    mode = 0666
    group = postfix
    user = postfix
  }
  user = mail
}
service auth {
  unix_listener auth-userdb {
    mode = 0600
    user = mail
    #group = 
  }
  # Postfix smtp-auth
  unix_listener /var/spool/postfix/private/auth {
    mode = 0666
    user = postfix
    group = postfix
  }
  # Auth process is run as this user.
  #user = $default_internal_user
  user = dovecot
}
service auth-worker {
  user = mail
}
```
注意下我们把除了imaps之外所有服务的端口都设置成了0，这样可以有效地禁止这些服务。然后，在文件**/etc/dovecot/conf.d/15-lda.conf**里，指定一个邮箱管理地址：
```
postmaster_address = PI:EMAIL
```
最后但很重要的一点，我们为服务器需要生成一对公钥和私钥，可以同时用于dovecot和postfix：
```
openssl req -new -newkey rsa:4096 -x509 -days 365 -nodes -out "/etc/ssl/certs/cloud.crt" -keyout "/etc/ssl/private/cloud.key"
```
请确保你指定了服务器的完全限定域名（FQDN），在本文的例子里：
```
Common Name (e.g. server FQDN or YOUR name) []:cloud.jhausse.net
```
如果没有的话，我们的客户端会抱怨在SSL证书里的服务器名字和所连接的服务器名字不一致。我们将通过修改配置文件**/etc/dovecot/conf.d/10-ssl.conf**里的如下选项来告诉dovecot使用刚生成的密钥：
```
ssl = required
ssl_cert = : Relay access denied
```
这个没问题：如果服务器能接受这封邮件而不是返回如上的拒绝消息，那意味着我们架设的postfix是一个对全世界所有垃圾邮件都开放的中继，这将完全没法使用。除了'Relay access denied'消息，你也可能会收到这样的响应：
```
554 5.7.1 Service unavailable; Client host [87.68.61.119] blocked using zen.spamhaus.org; http://www.spamhaus.org/query/bl?ip=87.68.61.119
```
意思是你正尝试从一个被标记成垃圾邮件发送者的IP地址连接服务器。我在通过普通的因特网服务提供商（ISP）连接服务器时曾收到过这样的消息。要解决这个问题，可以试着从另一个主机发起连接，比如另外一个你可以SSH登录的主机。另外一种方式是，你可以修改postfix的**main.cf**配置文件，不要使用Spamhous的RBL，重启postfix服务，然后再检查上面的测试是否正常。不管用哪种方式，最重要的是你要确定一个能工作的，因为我们后面马上要测试其他功能。如果你选择了重新配置postfix不使用RBL，别忘了在完成本文后重新开启RBL并重启postfix，以避免收到一些不必要的垃圾邮件。（LCTT 译者注：在国内可以使用 CASA 的 RBL：cblplus.anti-spam.org.cn，参见： 。）
现在，我们试一下往SMTP端口25发送一封有效的邮件，这是一般正常的邮件服务器用来彼此对话的方式：
```
openssl s_client -connect cloud.jhausse.net:25 -starttls smtp
EHLO cloud.jhausse.net
MAIL FROM:PI:EMAIL
RCPT TO:PI:EMAIL
```
服务器应该有这样的响应：
```
Client host rejected: Greylisted, see http://postgrey.schweikert.ch/help/jhausse.net.html
```
这意味着[postgrey](http://postgrey.schweikert.ch/)工作正常。postgrey做的是用临时错误拒绝未知发送者的邮件。邮件的技术规则是要求邮件服务器尝试重新发送邮件。在5分钟后，postgrey就会接收这封邮件。一般世界范围内遵守规则的邮件服务器都会尝试为我们重复投递邮件，但大多数垃圾邮件发送者不会这样做。所以，等上5分钟，再次通过上面的命令发送一次，然后检查postfix应该正常接收了邮件。
之后，我们检查一下我们可以通过IMAP和dovecot对话获取刚才发送的两封邮件。
```
openssl s_client -crlf -connect cloud.jhausse.net:993
1 login PI:EMAIL "mypassword"
2 LIST "" "*"
3 SELECT INBOX
4 UID fetch 1:1 (UID RFC822.SIZE FLAGS BODY.PEEK[])
5 LOGOUT
```
这里，你应该把*mypassword*替换为你自己为这个邮件账号设定的密码。如果能正常工作，基本上我们已经拥有一个能接收邮件的邮件服务器了，通过它我们可以在各种设备（PC/笔记本、平板、手机...）上收取邮件了。
### 外发（中继）邮件
但是我们不能把邮件给它发送出去，除非我们自己从服务器发送。现在我们将让postfix为我们转发邮件，但是这个只有成功登录才可以，这是为了保证邮件是由服务器上的某个有效帐号发出来的。要做到这个，我们要打开一个特殊的，全程SSL连接的，SASL鉴权的邮件提交服务。在文件**/etc/postfix/master.cf**里设置下面的参数：
```
submission inet n       -       -       -       -       smtpd
  -o syslog_name=postfix/submission
  -o smtpd_tls_security_level=encrypt
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
  -o smtpd_sasl_type=dovecot
  -o smtpd_sasl_path=private/auth
  -o smtpd_sasl_security_options=noanonymous
  -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject_non_fqdn_recipient,reject_unauth_destination
```
然后重启postfix服务：
```
service postfix reload
```
现在，让我们试试从一台不同的机器连接这个服务，确定一下postfix现在能够正常中继我们自己的而不是其他任何人的邮件：
```
openssl s_client -connect cloud.jhausse.net:587 -starttls smtp
EHLO cloud.jhausse.net