{"file.elf.header.version": {"dashed_name": "file-elf-header-version", "description": "Version of the ELF header.", "flat_name": "file.elf.header.version", "ignore_above": 1024, "level": "extended", "name": "header.version", "normalize": [], "original_fieldset": "elf", "short": "Version of the ELF header."}}
{"file.elf.import_hash": {"dashed_name": "file-elf-import-hash", "description": "A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThis is an ELF implementation of the Windows PE imphash.", "example": "d41d8cd98f00b204e9800998ecf8427e", "flat_name": "file.elf.import_hash", "ignore_above": 1024, "level": "extended", "name": "import_hash", "normalize": [], "original_fieldset": "elf", "short": "A hash of the imports in an ELF file."}}
{"file.elf.imports": {"dashed_name": "file-elf-imports", "description": "List of imported element names and types.", "flat_name": "file.elf.imports", "level": "extended", "name": "imports", "normalize": ["array"], "original_fieldset": "elf", "short": "List of imported element names and types.", "type": "flattened"}}
{"file.elf.imports_names_entropy": {"dashed_name": "file-elf-imports-names-entropy", "description": "Shannon entropy calculation from the list of imported element names and types.", "flat_name": "file.elf.imports_names_entropy", "format": "number", "level": "extended", "name": "imports_names_entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"file.elf.imports_names_var_entropy": {"dashed_name": "file-elf-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of imported element names and types.", "flat_name": "file.elf.imports_names_var_entropy", "format": "number", "level": "extended", "name": "imports_names_var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"file.elf.sections": {"dashed_name": "file-elf-sections", "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.", "flat_name": "file.elf.sections", "level": "extended", "name": "sections", "normalize": ["array"], "original_fieldset": "elf", "short": "Section information of the ELF file.", "type": "nested"}}
{"file.elf.sections.chi2": {"dashed_name": "file-elf-sections-chi2", "description": "Chi-square probability distribution of the section.", "flat_name": "file.elf.sections.chi2", "format": "number", "level": "extended", "name": "sections.chi2", "normalize": [], "original_fieldset": "elf", "short": "Chi-square probability distribution of the section.", "type": "long"}}
{"file.elf.sections.entropy": {"dashed_name": "file-elf-sections-entropy", "description": "Shannon entropy calculation from the section.", "flat_name": "file.elf.sections.entropy", "format": "number", "level": "extended", "name": "sections.entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the section.", "type": "long"}}
{"file.elf.sections.flags": {"dashed_name": "file-elf-sections-flags", "description": "ELF Section List flags.", "flat_name": "file.elf.sections.flags", "ignore_above": 1024, "level": "extended", "name": "sections.flags", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List flags."}}
{"file.elf.sections.name": {"dashed_name": "file-elf-sections-name", "description": "ELF Section List name.", "flat_name": "file.elf.sections.name", "ignore_above": 1024, "level": "extended", "name": "sections.name", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List name."}}
{"file.elf.sections.physical_offset": {"dashed_name": "file-elf-sections-physical-offset", "description": "ELF Section List offset.", "flat_name": "file.elf.sections.physical_offset", "ignore_above": 1024, "level": "extended", "name": "sections.physical_offset", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List offset."}}
{"file.elf.sections.physical_size": {"dashed_name": "file-elf-sections-physical-size", "description": "ELF Section List physical size.", "flat_name": "file.elf.sections.physical_size", "format": "bytes", "level": "extended", "name": "sections.physical_size", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List physical size.", "type": "long"}}
{"file.elf.sections.type": {"dashed_name": "file-elf-sections-type", "description": "ELF Section List type.", "flat_name": "file.elf.sections.type", "ignore_above": 1024, "level": "extended", "name": "sections.type", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List type."}}
{"file.elf.sections.var_entropy": {"dashed_name": "file-elf-sections-var-entropy", "description": "Variance for Shannon entropy calculation from the section.", "flat_name": "file.elf.sections.var_entropy", "format": "number", "level": "extended", "name": "sections.var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the section.", "type": "long"}}
{"file.elf.sections.virtual_address": {"dashed_name": "file-elf-sections-virtual-address", "description": "ELF Section List virtual address.", "flat_name": "file.elf.sections.virtual_address", "format": "string", "level": "extended", "name": "sections.virtual_address", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List virtual address.", "type": "long"}}
{"file.elf.sections.virtual_size": {"dashed_name": "file-elf-sections-virtual-size", "description": "ELF Section List virtual size.", "flat_name": "file.elf.sections.virtual_size", "format": "string", "level": "extended", "name": "sections.virtual_size", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List virtual size.", "type": "long"}}
{"file.elf.segments": {"dashed_name": "file-elf-segments", "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.", "flat_name": "file.elf.segments", "level": "extended", "name": "segments", "normalize": ["array"], "original_fieldset": "elf", "short": "ELF object segment list.", "type": "nested"}}
{"file.elf.segments.sections": {"dashed_name": "file-elf-segments-sections", "description": "ELF object segment sections.", "flat_name": "file.elf.segments.sections", "ignore_above": 1024, "level": "extended", "name": "segments.sections", "normalize": [], "original_fieldset": "elf", "short": "ELF object segment sections."}}
{"file.elf.segments.type": {"dashed_name": "file-elf-segments-type", "description": "ELF object segment type.", "flat_name": "file.elf.segments.type", "ignore_above": 1024, "level": "extended", "name": "segments.type", "normalize": [], "original_fieldset": "elf", "short": "ELF object segment type."}}
{"file.elf.shared_libraries": {"dashed_name": "file-elf-shared-libraries", "description": "List of shared libraries used by this ELF object.", "flat_name": "file.elf.shared_libraries", "ignore_above": 1024, "level": "extended", "name": "shared_libraries", "normalize": ["array"], "original_fieldset": "elf", "short": "List of shared libraries used by this ELF object."}}
{"file.elf.telfhash": {"dashed_name": "file-elf-telfhash", "description": "telfhash symbol hash for ELF file.", "flat_name": "file.elf.telfhash", "ignore_above": 1024, "level": "extended", "name": "telfhash", "normalize": [], "original_fieldset": "elf", "short": "telfhash hash for ELF file."}}
{"file.extension": {"dashed_name": "file-extension", "description": "File extension, excluding the leading dot.\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").", "example": "png", "flat_name": "file.extension", "ignore_above": 1024, "level": "extended", "name": "extension", "normalize": [], "short": "File extension, excluding the leading dot."}}
{"file.fork_name": {"dashed_name": "file-fork-name", "description": "A fork is additional data associated with a filesystem object.\nOn Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.\nOn NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\\path\\to\\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.", "example": "Zone.Identifer", "flat_name": "file.fork_name", "ignore_above": 1024, "level": "extended", "name": "fork_name", "normalize": [], "short": "A fork is additional data associated with a filesystem object."}}
{"file.gid": {"dashed_name": "file-gid", "description": "Primary group ID (GID) of the file.", "example": "1001", "flat_name": "file.gid", "ignore_above": 1024, "level": "extended", "name": "gid", "normalize": [], "short": "Primary group ID (GID) of the file."}}
{"file.group": {"dashed_name": "file-group", "description": "Primary group name of the file.", "example": "alice", "flat_name": "file.group", "ignore_above": 1024, "level": "extended", "name": "group", "normalize": [], "short": "Primary group name of the file."}}
{"file.hash.md5": {"dashed_name": "file-hash-md5", "description": "MD5 hash.", "flat_name": "file.hash.md5", "ignore_above": 1024, "level": "extended", "name": "md5", "normalize": [], "original_fieldset": "hash", "short": "MD5 hash."}}
{"file.hash.sha1": {"dashed_name": "file-hash-sha1", "description": "SHA1 hash.", "flat_name": "file.hash.sha1", "ignore_above": 1024, "level": "extended", "name": "sha1", "normalize": [], "original_fieldset": "hash", "short": "SHA1 hash."}}
{"file.hash.sha256": {"dashed_name": "file-hash-sha256", "description": "SHA256 hash.", "flat_name": "file.hash.sha256", "ignore_above": 1024, "level": "extended", "name": "sha256", "normalize": [], "original_fieldset": "hash", "short": "SHA256 hash."}}
{"file.hash.sha384": {"dashed_name": "file-hash-sha384", "description": "SHA384 hash.", "flat_name": "file.hash.sha384", "ignore_above": 1024, "level": "extended", "name": "sha384", "normalize": [], "original_fieldset": "hash", "short": "SHA384 hash."}}
{"file.hash.sha512": {"dashed_name": "file-hash-sha512", "description": "SHA512 hash.", "flat_name": "file.hash.sha512", "ignore_above": 1024, "level": "extended", "name": "sha512", "normalize": [], "original_fieldset": "hash", "short": "SHA512 hash."}}
{"file.hash.ssdeep": {"dashed_name": "file-hash-ssdeep", "description": "SSDEEP hash.", "flat_name": "file.hash.ssdeep", "ignore_above": 1024, "level": "extended", "name": "ssdeep", "normalize": [], "original_fieldset": "hash", "short": "SSDEEP hash."}}
{"file.hash.tlsh": {"dashed_name": "file-hash-tlsh", "description": "TLSH hash.", "flat_name": "file.hash.tlsh", "ignore_above": 1024, "level": "extended", "name": "tlsh", "normalize": [], "original_fieldset": "hash", "short": "TLSH hash."}}
{"file.inode": {"dashed_name": "file-inode", "description": "Inode representing the file in the filesystem.", "example": "256383", "flat_name": "file.inode", "ignore_above": 1024, "level": "extended", "name": "inode", "normalize": [], "short": "Inode representing the file in the filesystem."}}
{"file.macho.go_import_hash": {"dashed_name": "file-macho-go-import-hash", "description": "A hash of the Go language imports in a Mach-O file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThe algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).", "example": "10bddcb4cee42080f76c88d9ff964491", "flat_name": "file.macho.go_import_hash", "ignore_above": 1024, "level": "extended", "name": "go_import_hash", "normalize": [], "original_fieldset": "macho", "short": "A hash of the Go language imports in a Mach-O file."}}
{"file.macho.go_imports": {"dashed_name": "file-macho-go-imports", "description": "List of imported Go language element names and types.", "flat_name": "file.macho.go_imports", "level": "extended", "name": "go_imports", "normalize": [], "original_fieldset": "macho", "short": "List of imported Go language element names and types.", "type": "flattened"}}
{"file.macho.go_imports_names_entropy": {"dashed_name": "file-macho-go-imports-names-entropy", "description": "Shannon entropy calculation from the list of Go imports.", "flat_name": "file.macho.go_imports_names_entropy", "format": "number", "level": "extended", "name": "go_imports_names_entropy", "normalize": [], "original_fieldset": "macho", "short": "Shannon entropy calculation from the list of Go imports.", "type": "long"}}