result += textafter.gsub(/"([^"]*)"/,
#\1"*)
讨论
实例3.13讲解了如何使用两个正则表达式找到位于文件中特定部分（第一个正则式的
184
第3章
www.TopSage.com
---
## Page 201
匹配）中的匹配（第二个正则式）。这个实例的解答也会使用同样的技巧来只对自标字
符串中的特定片段进行查找和替换。
需要注意的一点是你用来查找片段的正则表达式总是在对原始的目标字符串进行操
作。如果修改了原始的目标字符串，那么你就必须在内层正则式添加或删除字符的同
时，修改外层正则式的起始位置。更重要的是，这样的修改可能会带来意想不到的副
作用。例如，如果你的外层正则式使用了定位符来匹配-行起始处的内容，而内
层正则式则在外层正则式找到的每个片段的结尾添加一个换行符，那么由于新添加了
换行符，那么外层正则式中的个就会匹配到上一个片段之后的位置。
虽然这个实例的解决方案看起来都比较长，但是实际上它们并不难理解。我们使用了
两个正则表达式。“外层”正则表达式，]*>，会匹配一对尖括号以及二者之间
除了尖括号之外的所有内容。这是一种用来匹配任意HTMLtag的比较粗糙的方法。只
要在HTML文件中不包含任何没有被编码为实体的字面尖括号的情况下，这个解答都
是可以正确工作的。我们实现这个正则表达式的代码与在实例3.11中给出的代码是相
同的。唯一的区别是在前面代码中的占位符注释被替换为进行实际查找和替换的代码。
在循环中进行查找和替换的代码则参照了在实例3.14中给出的代码。查找和替换使用
的自标学符事是在外层正则式的上一次匹配和这次匹配之间的文本。我们把内层正则
式查找和替换的结果附加到总的结果字符事之上。我们同样还把外层正则表达式的匹
配原封不动地添加到结果字符串中。
当外层正则式无法找到更多匹配的时候，我们会再一次执行内存查找和替换操作，这
次针对的是外层正则式最后一次匹配之后的文本。
在循环中用于查找和替换的正则式，或x{201C}>匹配一个Unicode代码点，但是
本书中讨论的所有编程语言都不会在替代文本中支持这种记号。如果最终用户想要在
使用编辑控制框输入的替代文本中插人智能引号，那么就必须从字符映射表中粘贴过
来才行。在源代码中，如果你的编程语言支持把Unicode转义作为字面字符串的一部分，
那么你可以在替代文本中使用Unicode转义序列。例如，C#和Java支持在字符串中使
用\u201C，但VB.NET则不支持在字符串中对Unicode字符进行转义。在VB.NET中，
你可以使用ChrW函数来把Unicode代码点转换为一个字符。
使用正则表达式编程185
www.TopSage.com
---
## Page 202
Perl和Ruby
Perl和Ruby的解答中使用了我们还没有介绍过的两个特殊变量。$（美元符号+反引号）
中包含目标匹配左边的文本，而$（美元符号+单引号）则会包含目标匹配右边的文本。
我们没有在原来的自标字符事之上遍历匹配，而是在前一个匹配之后的字符事片段上
开始一次新的搜索。这样，我们用变量$就可以很容易获取本次匹配和上一次匹配之间
的文本。
Python
这段代码的结果是一个Unicode字符串，因为替代文本被说明为一个Unicode字符串。
你可能会需要调用encode0才能显示这个字符串，例如：
print result.encode('1252')
参见
实例3.11、3.13和3.16。
3.19拆分字符串
问题描述
你想要使用正则表达式来拆分一个字符串。在拆分之后，你会得到由位于正则表达式
匹配之间的字符串组成的一个数组或者列表。
例如，你想要使用HTMLtag来拆分一个包含HTMLtag的字符串。把I·like·
bold·and·italic·fonts拆分之后应当得到一个包含如下5个字符串的数组：
Iolike、bold、·ando、italic和·fonts。
解决方案
#
当你打算只使用同-个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
string[] splitArray = null;
tryf
[>]>x
）catch (ArgumentNullException ex){
186第3童
www.TopSage.com
---
## Page 203
//Cannot pass null as the regular expression or subject string
}catch (ArgumentException ex){
//Syntax error in the regular expression
如果你想要把同一个正则表达式用于大量的字符串之上，那么就需要构造一个Regex
对象：
（]>）xabay u=qoxbaxab
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Regex对象：
string[] splitArray = null;
try
（]>）xab mau=qoxab xab
try{
splitArray = regexObj.Split(subjectString);
}catch (ArgumentNullException ex)(
//Cannot pass null as the subject string
}
}catch （ArgumentException ex)(
// Syntax error in the regular expression
VB.NET
当你打算只使用同一个正则表达式处理少量字符串的时候，可以使用如下的静态调用：
([>1>x=
如果该正则式是由最终用户提供的，那么你就需要在使用静态调用时进行完整的例外
处理：
Dim SplitArray As String()
[>]>x
Catch ex As ArgumentNullException
'Cannot pass null as the regular expression or subject string
·Catch ex As ArgumentException
Syntax error in the regular expression
End Try
如果你想要把同一个正则表达式用于大量的字符串之上，那么就需要构造一个Regex
对象：
Dim RegexObj As New Regex("]*>")
Dim SplitArray = RegexObj.Split(SubjectString)
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Regex
对象：
使用正则表达式编程
187
www.TopSage.com
---
## Page 204
Dim SplitArray As String()
Try
Dim RegexObj As New Regex("]*>")
TrY
SplitArray = RegexObj.Split(SubjectString)
Catch ex As ArgumentNullException
Cannot pass null as the subject string
End Try
Catch ex As ArgumentException
'Syntax error in the regular expression
x pug
Java
当你打算只使用同一个正则表达式处理一个字符事的时候，可以直接调用String.SplitO：
（>> =]
如果该正则式是由最终用户提供的，那么你还需要进行完整的例外处理：
tryf
(]>)=]
}catch (PatternSyntaxException ex){
//Syntax error in the regular expression
如果想要把同一个正则表达式用于大量的字符串之上，那么就需要构造一个Patterm
对象：
Pattern regex =Pattern.compile("]*>");
如果该正则式是由最终用户提供的，那么你应当使用带有完整例外处理的Patterm
对象：
String[] splitArray = null;
try1
Pattern regex = Pattern.compile("]*>");
splitArray = regex.split(subjectString);
}catch (ArgumentException ex){
// Syntax error in the regular expression
JavaScript
string.splitO函数可以使用正则表达式来拆分字符串：
result = subject.split(/]*>/);
但是，当用string.splitO来处理正则表达式的时候，会存在许多跨浏览器的问题。如果
用自已的代码来构造一个列表会更加可靠：
188
第3章
www.TopSage.com
---
## Page 205
var list = [];
var regex=/]*>/g;
var match = null;
var lastIndex =0;
while (match = regex.exec(subject)){
//Don't let browsers such as Firefox get stuck in an infinite loop
if (match.index = regex.lastIndex) regex.lastIndex++;
//Add the text before the match
list,push(subject.substring(lastIndex, match.index));
lastIndex = match.index + match[0].length;
//Add the remainder after the last match
list.push(subject.substr(lastIndex));
PHP
$result=preg_split('/]*>/'，$subject);
Perl
@result = split(m/]*>/， $subject);
Python
如果只需要处理少量字符事，你可以使用全局函数：
result = re.split("]*>", subject))
如果要反复使用同一个正则表达式，那么就需要使用一个编译好的对象：
reobj = re.compile("]*>")
result = reobj.split(subject)
Ruby
result = subject.split(/]*>/)
讨论
使用正则表达式拆分字符串实质上就是要产生与实例3.10相反的结果。我们想要获取
的不是所有正则匹配的一个列表，而是位于匹配之间的文本的一个列表，其中也包含
了在第一个匹配之前和最后一个匹配之后的文本。正则匹配自身则不会出现在拆分函
数的输出中。
C#andVB.NET
在.NET中，你总是可以使用Regex.SplitO方法来利用正则表达式拆分一个字符串。
SplitO期望的第一个参数是包含你想要拆分的目标文本的字符串。这个参数不能是null。
使用正则表达式编程
189
www.TopSage.com
---
## Page 206
如果它是空的话，那么SplitO就会产生一个ArgumentNullException例外。SplitO的返回
值永远是一个字符事数组。
如果只需要使用一个正则表达式少数几次，那么你可以使用静态调用。第二个参数因
此就是你想要使用的正则表达式。你还可以在可选的第三个参数中传递正则选项。如
果你的正则表达式中包含语法错误的话，那么就会产生一个ArgumentException例外。
如果想要在多个字符串之上使用同一个正则表达式，那么你可以首先构造一个Regex
对象，然后用它来调用Split()，这样的做法效率更高。这样的话唯一必需的参数就是目
标字符串。
当使用Regex类的一个实例来调用SplitO时，你还可以传递一些额外的参数来对拆分操
作进行限制。如果你不用这些参数，那么字符事就会拆分自标字符事中的所有正则表
达式匹配。SplitO的静态重载形式不支持使用这些额外的参数。它们总是会按照所有的
匹配来拆分目标字符串。
在目标字符串之后的可选的第二个参数中，可以指定你想要最终得到的拆分字符串的
最大数目。例如，如果你调用regexObj.Split(subject,3)，那么就会得到一个最多包含3
个字符串的数组。SplitO函数会尝试找到两个正则匹配，然后返回一个数组，其中包括
第一个匹配之前的文本、两个匹配之间的文本和第二个匹配之后的文本。在该目标字
符串之后所有可能的正则匹配都会被忽略掉，因此会全部被放到数组中的最后-一个字