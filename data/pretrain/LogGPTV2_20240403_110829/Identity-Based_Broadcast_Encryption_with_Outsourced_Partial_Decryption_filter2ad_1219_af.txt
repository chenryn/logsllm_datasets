2 )T )sθ H−1
2 (g ˆz2
2 )T )s(cid:48)
θ · H−1
2,θ ,
2,θ = gα2
β(T−T ∗)
2 (gz2
= gs(cid:48)
2 .
θ · H−1
)s(cid:48)
sθ−
T−T ∗ = g
2
k , the update key is correctly distributed from the setting
1,θ)−1,
θ = sθ as:
2 (g ˆz1
−α1
2 H−1
2 )T )sθ g
2 )T )sθ (H(cid:48)
2 (gz1
1,θ = gα1
2 (g ˆz1
2,θ)−1,KU3,θ = gsθ
2 )T )sθ(H(cid:48)
2 = gs(cid:48)
2 .
2 H2,θ, s(cid:48)
1,θ = gα1
2 (gz1
2,θ = gα2
2 (gz2
2 (g ˆz2
1
θ
θ
2 )rθ . According to the DKGen(SKID, KUT )
Fourthly, we show that the decryption key is correct. As we have proved be-
fore, both the private key SKID and the update key KUT are correctly distribut-
ed, the resulting decryption key must be correctly distributed by running the
DKGen(SKID, KUT ) algorithm. Furthermore, if ID is not revoked before T , we
can prove that the decryption key for (DK1,θ, DK2,θ) is also correctly distributed
directly with SKID = {K1,θ, K2,θ, K3,θ, (K4,i,θ, K5,i,θ, ktagi,θ)m
i=1}θ∈P ath(BT,η)
and KUT = {KU1,θ, KU2,θ, KU3,θ}θ∈KUNode(BT,RL,T ).
In the case of ID ∈ S∗, for the time T (cid:54)= T ∗, there must exist a node
1+T ˆz(cid:48)
T−T ∗ =
n with KU1,θ = (gz1
2 )T )sθ H−1
1,θ (g
2 (g ˆz1
1
β
2 )
− z(cid:48)
1
θ·H−1
2 )T )s(cid:48)
1,θ and K1,θ = H1,θ·(gw1
2 )T )s(cid:48)
2 )T )s(cid:48)
θ ∈ KUNode(BT, RL, T ) ∩ N∗
gα1
2 (gz1
2 (g ˆz1
algorithm:
K1,θ · KU1,θ = H1,θ · (gw1
2 )rθ · gα1
2 (gz1
2 (g ˆz1
2 )rθ · gα2
K2,θ · KU2,θ = H2,θ · (gw2
2 (g ˆz2
2 (gz2
θ·w1
θ·(z1+T·ˆz1)
Thus, DK1 = K1,θ·KU1,θ·gr(cid:48)
gs(cid:48)
have the correct distribution.
2 )T )sθ H−1
2 )rθ · H1,θ · (gz1
2 )rθ · H1,θ(gz2
In the case of ID /∈ S∗, as K1,θ = K1· (gw1
1,θ , KU2,θ = (gz2
2 (g ˆz1
2 (g ˆz2
2
2
θ · H−1
θ · H−1
1,θ = gα1
2,θ = gα2
2 · (gw1
2 · (gw2
and DK2 = K2,θ·KU2,θ·gr(cid:48)
2 )rθ · (gz1
2 )T )s(cid:48)
2 (g ˆz1
θ ,
2 )rθ · (gz2
2 )T )s(cid:48)
2 (g ˆz2
θ .
θ·w2
θ·(z2+T·ˆz2)
gs(cid:48)
2 )rθ · H1,θ, K2,θ = K2· (gw2
2 )rθ · H2,θ
2 (g ˆz2
2,θ , it is easy to check:
2 )rθ · (gz1
2 )T )sθ H−1
2 )T )sθ ,
2 )rθ · (gz2
2 )T )sθ H−1
2 )T )sθ .
2 )T )sθ H−1
1,θ = K1· (gw1
1,θ = K2 · (gw2
2 (g ˆz1
2 (g ˆz2
2
2
1 = gs
2 , C∗
0 = gs
2 = (gb
1)s, C∗
·(cid:81)n
1, ID∗
3 = (W ctag
and KU1,θ = (gz1
2 (g ˆz1
K1,θ · KU1,θ = K1· (gw1
K2,θ · KU2,θ = K2 · (gw2
Thus, DK1 and DK2 also have the correct distribution.
Finally, we show that the challenge ciphertext is correct. For the challenge
session key K∗
1 , C∗
3 , ctag∗) that
C receives with a privileged set S∗ = {ID∗
n} is of the following
distribution: C∗
1 )yi )s. Thus, for the
same privileged set S∗, the challenge header Hdr = (C1, C2, C3, C4, ctag) that
A is given from C is also well formed since:
1 )−T ∗ · (g ˆz(cid:48)
1 )s = (gz(cid:48)
C3 = (Z1 · ˆZ T ∗
1)z(cid:48)
2(gβα
1 (gb
= (gz(cid:48)
2·T ∗
)s = (C∗
1 )z(cid:48)
1)z(cid:48)
(gb
T , the challenge header Hdr∗ = (C∗
2, ..., ID∗
1, C∗
i=0 (gui
Theorem 4. The resulting revocable IBE scheme (cid:81)
under chosen plaintext attacks for m = 1, if the basic IBBE scheme (cid:81)
scheme (cid:81)
gorithm C to break the adaptive security of the IBE scheme (cid:81)
described in Section 3.1 is adaptively secure.
Proof. If there exists an adversary A that attacks the above revocable IBE
RIBE with a non-negligible advantage, we will construct a PPT al-
IBE for m = 1
(cid:117)(cid:116)
RIBE is adaptively secure
IBBE
1
This completes the proof of Lemma 4.
1 ))T ∗
2(gβα
2·T ∗
2+ˆz(cid:48)
1 (gb
1·T ∗ · (C∗
1)ˆz(cid:48)
2 )z(cid:48)
1+ˆz(cid:48)
1+ˆz(cid:48)
2+ˆz(cid:48)
1·T ∗
)s
1
.
1
1
21
1
1
,gT , g2,gu1
,W1 = gw1+bw2
1,U 1 = gu1+bu2
described in Section 3.1. In the following proof, we will omit some detailed dis-
cussion due to page limitation. Especially, we focus on the part that are diﬀerent
from the proof of Theorem 3.
At the beginning, C receives public parameters of the IBE scheme (cid:81)
IBE:
(g1, gb
) with
u1 = (u1,0, u1,1), u2 = (u2,0, u2,1) for m = 1. During the process, C can access to
the secret key generation oracle KeyGenIBE(·), which can receive a private key of
SKID ={K1, K2, K3, K4, K5, ktag} with: K1 = gα1
2 )r, K3 =
2, K4 = ((gw1
gr
2 ·(gw1
2 )ktaggu2,1
As the adversary A won’t declare the target identity ID∗ and time period
T ∗ at the initial phase for the adaptive security model, C should ﬁrst guess the
right T ∗ that A submits the target identity in the challenge phase, which holds
with probability 1/|T | for polynomial-size T .
2 ·(gw2
)ID)r.
)ID)r, K5 = ((gw2
2 )r, K2 = gα2
2 )ktaggu1,1
−u2,0
(g
2
−u1,0
(g
2
1 ,gβα1
2 , gw2
2 , gw1
2 ,gβα
2 ,gu2
,gβα2
,g1/β
2
2
2
2
2
Furthermore, for the challenge ID∗, C should guess the exact index of queries
i∗ that A issues ID∗ to the SKGen or DKGen oracles for the ﬁrst time. More
precisely, i∗ ∈ {1, 2,··· , q1} denotes that A ﬁrst issues ID∗ to C at the i∗-
th identity for the private key query or the decryption key query in the Key
Extraction Phase 1, where q1 is the maximum number of private key queries
and the decryption key queries before the challenge phase. i∗ = q1 + 1 denotes
that A does not query any private key or decryption for ID∗ before the challenge
phase, but it can issue a private key query or decryption key query for ID∗ in the
Key Extraction Phase 2. C makes a random guess i∗ ∈ {1, 2,··· , q1, q1 + 1}
for the adversary A. Similar as in [33], the adversary A can be divided into the
following two types: A is a Type-a adversary if i∗ ∈ {1, 2,··· , q1}; and A is a
Type-b adversary if i∗ = q1 + 1. Note that A is a still a Type-b adversary even
A has never queried ID∗ for any private key or decryption key, in which case
the target identity ID∗ is already known by C in the challenge phase. In the rest
of the proof, we assume that C’s guess for i∗ is right. Once C ﬁnds the guess is
wrong, it terminates the simulation and outputs a random bit β(cid:48) ∈ {0, 1}.
Setup: C ﬁrst creates a binary tree BT with N leaves. It chooses a random leaf
node η∗ for a target identity ID∗ in advance, that is, η∗ is pre-assigned to ID∗
R←− Zp and
that will be used in the challenge phase. C then chooses z(cid:48)
= gz(cid:48)
computes: Z1 = gz1+b·z2
1)ˆz(cid:48)
2(gβα
1 ),
2 = gz(cid:48)
2 = gz(cid:48)
, gz2
gz1
. Finally,
1, z(cid:48)
2, ˆz(cid:48)
1, ˆz(cid:48)
2
= g ˆz(cid:48)
, ˆZ1 = g ˆz1+b·ˆz2
1)z(cid:48)
1 (gb
1 (gb
1
2 = g ˆz(cid:48)
2 gβα2
2 /(gβα2
, g ˆz2
RIBE is then sent to A with:
2 , gz2
the public parameters P P of(cid:81)
P P = (g1, gb
Key Extraction Phase 1 for Type-a adversary: A is a Type-a adversary
in the case of i∗ (cid:54) q1. C will keep an integer i to count the number of queries
from A for private key or decryption key up to the current time. Similar as
in [38], we also classify type-a adversary more speciﬁcally: type-a-1 and type-a-0
adversary. A is a type-a-0 adversary if the private key of ID∗ has been queried.
Otherwise, A is a type-a-0 adversary if A has never queried the private key
SKID∗ . C interacts with A in the following steps:
1 )T ∗
2/(gβα
2 = g ˆz(cid:48)
)T ∗
, g ˆz1
1, U 1, W1, Z1, ˆZ1, gT , g2, gu1
2 /(gβα1
2 , gw2
2 , gw1
2 , gu2
2 gβα1
2 , gz1
2 , g ˆz1
2 , g ˆz2
)T ∗
2 ).
1
2
2
2
2
1
1
1
2
1
2
22
– If this is a private key or decryption key query for an identity ID from a
type-a-1 adversary A, C performs as follows:
• Case i < i∗: In this case, ID (cid:54)= ID∗, C will transfer ID to the oracle:
KeyGenIBE(·), and can get the private key {K1, K2, K3, K4, K5, ktag}.
C then assigns ID to a random leaf η from BT and stores ID in the leaf
node η if ID is ﬁrst issued to C for the private key or decryption key,
otherwise, C uses the stored leaf node η for ID.
∗ Private key query: If this is a private key query for an identity ID,