## PostgreSQL 图式搜索(graph search)实践 - 百亿级图谱，毫秒响应       
### 作者                              
digoal                              
### 日期                              
2018-01-02                             
### 标签                              
PostgreSQL , CTE , 递归查询 , cycle , depth , loop , deep , level , 层级 , array , row array , JSON , 图式搜索 , graph search        
----                              
## 背景           
图式搜索是PostgreSQL在（包括流计算、全文检索、图式搜索、K-V存储、图像搜索、指纹搜索、空间数据、时序数据、推荐等）诸多特性中的一个。      
采用CTE语法，可以很方便的实现图式搜索（N度搜索、最短路径、点、边属性等）。      
其中图式搜索中的：层级深度，是否循环，路径，都是可表述的。      
![pic](20180102_04_pic_001.png)      
![pic](20180102_04_pic_002.jpg)      
## 例子      
创建1000万用户，每5万作为一个有牵连的群体，平均每个用户牵连500个用户，形成50亿的大规模关系网。         
在此基础上，演示如下      
1、如何实现N度搜索，边的属性查看，以及最短路径搜索等需求。      
2、如何去除循环点，如何控制深度，如何展示路径等。      
3、如何生成绘图数据。      
### 创建50亿测试数据      
创建1000万用户，每5万作为一个有牵连的群体，平均每个用户牵连500个用户，形成50亿的大规模关系网。         
1、建表，表结构如下，可以描述点、边。      
```      
为了加快数据生成速度, 使用unlogged table.  
create unlogged table a(      
  c1 int,                -- 点1      
  c2 int,                -- 点2      
  prop jsonb,            -- 点1,2对应的边的属性，使用JSON存储，包括权重，关系等等。      
  primary key (c1,c2)    -- 主键      
);      
为了加快数据生成速度, 关闭表的autovacuum, 全部写入完成再执行 vacuum analyze a;
alter table a set (autovacuum_enabled =off);
alter table a set (toast.autovacuum_enabled =off);
create index on a(c1, COALESCE(((prop ->> 'weight'::text))::float8, 0));    
如果不需要查权重, 可以不用加以上索引, c1是驱动列, c1的过滤查询会直接走PK.   
```      
2、生成测试数据：      
```    
1000万用户每5万隔离成一个有连接的群体, 总共分成200个独立bucket区间,  ((width_bucket(:id,1,10000000,200)-1)*50000 + (random()*50000)::int)  
这条sql 一次生成1个ID的500条关系.  generate_series(1,500)
drop UNLOGGED sequence seq;
create sequence seq INCREMENT 1 START 1 ; 
vi test.sql      
select nextval('seq') as id \gset
insert into a select :id, ((width_bucket(:id,1,10000001,200)-1)*50000 + ceil(random()*50000)::int) from generate_series(1,500) on conflict (c1,c2) do nothing;  
```      
```  
50个并发, 每个执行200000次刚好覆盖1千万用户. 
10000000/50 = 200000  
nohup pgbench -M prepared -n -r -P 5 -f ./test.sql -c 50 -j 50 -t 200000 >./graph.log 2>&1 &       
```      
3、数据约340GB          
### 如何去除循环点、控制深度、展示路径      
1、当路径中重复出现某个点时，说明发生了循环。      
2、每递归一次，深度加1。      
3、使用数组存储路径。单列数组，或多列（ROW数组），多列路径参考:  https://www.postgresql.org/docs/10/static/queries-with.html         
SQL如下：      
```      
WITH RECURSIVE search_graph(      
  c1,   -- 点1      
  c2,   -- 点2      
  prop, -- 边的属性      
  depth, -- 深度，从1开始      
  path  -- 路径，数组存储      
) AS (      
        SELECT    -- ROOT节点查询      
          g.c1,   -- 点1      
          g.c2,   -- 点2      
          g.prop,   -- 边的属性      
          1 as depth,        -- 初始深度=1      
          ARRAY[g.c1] as path  -- 初始路径         
        FROM a AS g       
        WHERE       
          c1 = ?         -- ROOT节点=?      
      UNION ALL      
        SELECT     -- 递归子句      
          g.c1,    -- 点1      
          g.c2,    -- 点2      
          g.prop,          -- 边的属性      
          sg.depth + 1 as depth,    -- 深度+1      
          path || g.c1 as path   -- 路径中加入新的点      
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN      
        WHERE       
          g.c1 = sg.c2         -- 递归JOIN条件      
          AND (g.c1 <> ALL(sg.path))        -- 防止循环      
          AND sg.depth  ALL(sg.path))        -- 防止循环      
          AND sg.depth  ALL(sg.path))        -- 防止循环      
--          AND sg.depth  ALL(sg.path))        -- 防止循环      
--          AND sg.depth <= ?    -- 搜索深度=? 也可以保留，防止搜索太深影响性能，比如深入10以后就不返回了        
)      
SELECT * FROM search_graph      
  where c2 = 100   -- 最短路径的终点      
  limit 1;       -- 查询递归表，可以加LIMIT输出，也可以使用游标     
```      
如果要控制深度，比如5度以内搜不到就不搜了，把搜索深度的条件再加进去即可。      
### 如何生成绘图数据      
为了提高响应速度，使用游标返回。      
```      
begin;      
declare cur1 cursor for $query;      
FETCH 1000 from cur1;      
....      
close cur1;      
end;      
```      
响应时间飞快，毫秒级响应。      