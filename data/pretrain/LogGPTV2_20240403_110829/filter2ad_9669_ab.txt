    // 部分源码经过省略
原因跟注册处的储存型XSS一样，都是没有经过严格的过滤而导致的。
复现：直接将内容修改为XSS Payload即可
### 后台TimeLine处储存型XSS漏洞
TimeLine是一个类似于留言板的地方，而传入留言板的内容也没有经过过滤直接储存到数据库内。最后渲染出来造成XSS漏洞。
pkg/post/post.go：
    func ShowAddPostPage(w http.ResponseWriter, r *http.Request) {
        if r.Method == "GET" {
            // 代码经过省略
        } else if r.Method == "POST" {
            if cookie.CheckSessionID(r) {
                // 代码经过省略
                postText := r.FormValue("post")
                fmt.Println(reflect.TypeOf(postText))
                StorePost(uid, postText) // 传递到这
                http.Redirect(w, r, "/post", 301)
            }
        } else {
            http.NotFound(w, nil)
        }
    }
跟踪`StorePost()`：
    func StorePost(uid int, postText string) {
        db, err := sql.Open("mysql", "root:root@tcp(127.0.0.1:3306)/vulnapp")
        if err != nil {
            fmt.Printf("%+v\n", err)
            return
        }
        defer db.Close()
        _, err = db.Exec("insert into vulnapp.posts(uid,post) values (?,?)", uid, postText) // 前面都没有经过过滤
        if err != nil {
            fmt.Printf("%+v\n", err)
            return
        }
    }
原因跟前面的XSS一样，都是没有经过严格的过滤而导致的。
复现：在文本框中输入XSS Payload即可
## SQL注入
在这个系统当中，大部分传递SQL语句是这样传递的：
    if err := db.QueryRow("select id from user where mail=?", mail).Scan(&userID); err != nil {
                fmt.Println("no set :", err)
    }
    log.Println(userID)
语句的"?"相当于一个占位符，将第二个参数mail替换过去。而替换过去的mail会被转义。相当于经过了一次`addslashes()`处理。
比如我给mail定义：`PI:EMAIL' and if(1=1,sleep(5),1)#` 那最终会被执行的SQL语句如下：
`select id from user where mail='PI:EMAIL\' and if(1=1,sleep(5),1)#'`
所以，如果要去寻找SQL注入漏洞的话，就得去寻找没有过滤并且是字符串之间直接拼接的点。
### 后台TimeLine搜索处存在SQL注入漏洞
pkg/search/search.go：
    func SearchPosts(w http.ResponseWriter, r *http.Request) {
        if r.Method == "POST" {
            searchWord := r.FormValue("post")
            fmt.Println("value : ", searchWord)
            testStr := "mysql -h 127.0.0.1 -u root -proot -e 'select post,created_at from vulnapp.posts where post like \"%" + searchWord + "%\"'"
            fmt.Println(testStr)
            testres, err := exec.Command("sh", "-c", testStr).Output()
            // 部分源码经过省略
        } else {
            http.NotFound(w, nil)
        }
    }
从testStr赋值处可以看到，这里的SQL语句是直接用`+`进行拼接的，没有使用"?"进行替换。所以这里能够直接构造Payload进行SQL注入。
复现：TimeLine搜索内容：`123%" and if(sleep(5),1,1)#` 页面延迟，构造其他语句就可以进一步进行利用。
## 任意文件上传
### 后台头像上传处存在任意文件上传漏洞
在后台Profile处可以上传头像，但是对文件名及文件内容没有经过过滤。导致任意任意文件上传。具体代码如下：
pkg/image/imageUploader.go
    func UploadImage(w http.ResponseWriter, r *http.Request) {
        if r.Method == "POST" {
            // 部分源码经过省略 
            if cookie.CheckSessionID(r) {
                file, handler, err := r.FormFile("uploadfile")  // 获取文件数据
                if err != nil {
                    fmt.Printf("%+v\n", err)
                    return
                }
                defer file.Close() 
                f, err := os.OpenFile("./assets/img/"+handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)
                // 创建一个文件
                if err != nil {
                    fmt.Printf("%+v\n", err)
                    return
                }
                defer f.Close()
                io.Copy(f, file) // 将获取到的文件数据写入到本地创建的那个文件中去
                UpdateDatabase(r, handler.Filename) // 更新数据库中的用户信息
                http.Redirect(w, r, "/profile", 301)
            }
        } else {
            http.NotFound(w, nil)
        }
    }
漏洞复现：直接用Brupsuite抓包可以修改上传的地址。
问题来了，怎么进行Getshell呢？Go语言跟PHP不太一样，它没有类似一句话这样的“工具”。并且要通过路由定义才能够通过web访问到。我最初的想法是能不能覆盖一个路由中已有的函数文件，通过修改函数中的语句来达到命令执行的效果。但在参考文章中有一个的方式更加方便，就是通过修改crontabs定时任务来进行利用。如图：
(图片取自参考文章内)
这次搭建的题目环境是windows，配置linux环境太麻烦，就不复现了(怕了配置环境)。
## 命令执行
### 管理员后台处存在命令执行漏洞
首先来看`pkg/admin/admin.go`中的ShowAdminPage函数
    func ShowAdminPage(w http.ResponseWriter, r *http.Request) {
        if r.Method == "GET" {
            adminSID, err := r.Cookie("adminSID") // 通过Cookie获取adminSID
            if err != nil {
                fmt.Printf("%+v\n", err)
            }
            fmt.Println(adminSID.Value)
            adminUid, err := GetAdminSid(adminSID.Value) // 调用了GetAdminSid
            // 部分源码经过省略 
        } else {
            http.NotFound(w, nil)
        }
    }
继续跟踪GetAdminSid：
    func GetAdminSid(adminSessionCookie string) (results string, err error) {
        commandLine := "mysql -h mysql -u root -prootwolf -e 'select adminsid from vulnapp.adminsessions where adminsessionid=\"" + adminSessionCookie + "\";'"
        res, err := exec.Command("sh", "-c", commandLine).Output()
        if err != nil {
            fmt.Println(err)
        }
        results = string(res)
        if results != "" {
            return results, nil
        }
        err = xerrors.New("recode was not set")
        return "", err
    }
可以看到，commandLine是会被传递到exec.Command命令当中去执行命令，而commandLine中的语句，是直接通过与adminSessionCookie进行拼接得到的，没有经过任何的过滤。所以这里造成了命令执行漏洞。
同样的问题，在admin/confirm.go的也是造成了命令执行漏洞。
## CSRF漏洞
### 后台多处存在CSRF漏洞
先来看`pkg./user/usermanager.go`中的`ConfirmPasswdChange`函数
    func ConfirmPasswdChange(w http.ResponseWriter, r *http.Request) {
        if r.Method == "POST" {
            if cookie.CheckSessionID(r) {
                if r.Referer() == "http://127.0.0.1/profile/changepasswd" {
                    // 接着进行修改密码的操作
        } else {
            http.NotFound(w, nil)
        }
    }
可以看到，这里是限制了Referer只能为`http://127.0.0.1/profile/changepasswd`所以这里是没有CSRF的，但是整个后台，除了修改密码处验证了Referer，其他修改内容功能的点都没有验证，因此都存在CSRF漏洞。比如Profie用户信息修改，TimeLine发送留言等。
比如TimeLine发送留言：
直接用Brupsuite构造CSRF的poc即可。
## 参考
  * [Go Web 编程](https://astaxie.gitbooks.io/build-web-application-with-golang/zh/)
  * [Go语言代码安全审计分享](https://mp.weixin.qq.com/s/8Ju05hYCYk6bOgkvjtP11A)