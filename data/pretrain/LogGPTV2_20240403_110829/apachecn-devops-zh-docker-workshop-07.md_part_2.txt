    ```
    寻找`testsize`容器。你会发现尺寸是`0B (virtual 188MB)`:
    ```
    CONTAINER ID    IMAGE          COMMAND      CREATED
      STATUS     PORTS    NAMES      SIZE
    9f2d2d1ee3e0    ubuntu:14.04   "/bin/bash"  6 seconds ago
      Up 6 minutes        testsize   0B (virtual 188MB)
    ```
    `SIZE`列仅指示容器的薄读/写层的大小，而虚拟大小指示薄读/写层和封装在容器中的所有先前层的大小。因此，在这种情况下，薄层等于`0B`，虚拟尺寸等于映像尺寸。
4.  现在，安装`wget`包。在第一个终端运行`apt-get update`命令。在 Linux 中，一般的建议是在安装任何软件包之前运行`apt-get update`，以更新您系统中当前软件包的最新版本:
    ```
    root@9f2d2d1ee3e0: apt-get update
    ```
5.  当容器完成更新时，运行以下命令，在基础映像上安装`wget`包。`-y`选项用于自动回答所有安装问题:
    ```
    root@9f2d2d1ee3e: apt-get install -y wget
    ```
6.  When it finishes installing `wget` on top of `ubuntu:14.04`, recheck the container's size by running the `ls -s` command in the second terminal:
    ```
    $docker container ls -s
    ```
    从下面的片段可以看到，`testsize`容器的大小为`27.8 MB (virtual 216 MB)`:
    ```
    CONTAINER ID    IMAGE          COMMAND      CREATED
      STATUS     PORTS    NAMES      SIZE
    9f2d2d1ee3e0    ubuntu:14.04   "/bin/bash"  9 seconds ago
      Up 9 minutes        testsize   27.8MB (virtual 216MB)
    ```
    现在，薄层等于`27.8MB`，虚拟尺寸等于所有层的尺寸。在本练习中，图层是基础映像，大小为 188 MB 更新；和尺寸为 27.8 兆字节的`wget`层。因此，近似后的总大小将为 216 MB。
在本练习中，您学习了与`docker container ls`子命令一起使用的`-s`选项的功能。此选项用于显示基础映像的大小和顶部可写层的大小。了解每个容器消耗的大小对于避免磁盘空间不足异常非常有用。此外，它可以帮助我们排除故障并为每个容器设置最大尺寸。
注意
Docker 使用存储驱动程序写入可写层。存储驱动程序因您使用的操作系统而异。要查找存储驱动程序的更新列表，请查看 https://docs . docker . com/storage/storage driver/select-storage-driver/。
要了解您的操作系统使用的驱动程序，请运行`$docker info`命令。
了解 Docker 容器生命周期事件为研究为什么一些应用可能需要或可能不需要持久存储提供了一个很好的背景，并概述了在显式移除容器之前 Docker 的默认主机存储区域(文件系统位置)。
现在，让我们深入研究有状态和无状态模式，以决定哪个容器需要持久存储。
# 有状态与无状态容器/服务
容器和服务可以以两种模式运行:**有状态**和**无状态**。无状态服务是不保留持久数据的服务。这种类型比有状态类型更容易扩展和更新。有状态服务需要持久存储(如在数据库中)。因此，因为有状态服务需要与应用的其他组件同步，所以更难归档。
假设您正在处理一个需要特定文件才能正常工作的应用。如果这个文件保存在一个容器中，就像在有状态模式中一样，当这个容器因为任何原因被移除时，整个应用就会崩溃。但是，如果该文件保存在卷或外部数据库中，任何容器都可以访问它，应用也可以正常工作。假设业务正在蓬勃发展，我们需要扩大容器的数量来满足客户的需求。所有的容器都能够访问文件，缩放将变得容易和平滑。
Apache 和 NGINX 是无状态服务的例子，而数据库是有状态容器的例子。 *Docker 卷和状态持久性*部分将关注数据库映像正常运行所需的卷。
在下面的练习中，您将首先创建一个无状态服务，然后创建一个有状态服务。两者都将使用 Docker 游乐场，这是一个在几秒钟内提供 Docker Engine 的网站。它是浏览器中的一个免费虚拟机，您可以在其中执行 Docker 命令，并以集群模式创建集群。
## 练习 7.03:创建和扩展无状态服务，NGINX
通常，在基于 web 的应用中，有前端和后端。例如，在全景徒步应用中，您可以在前端使用 NGINX，因为它可以处理大量的连接，并将负载分配给后端较慢的数据库。因此，NGINX 被用作反向代理服务器和负载平衡器。
在本练习中，您将专注于单独创建一个无状态服务 NGINX，并看看扩展它有多容易。您将初始化一个群来创建一个集群，并在其上扩展 NGINX。您将使用 Docker 游乐场以群体模式工作:
1.  Connect to the Docker playground at https://labs.play-with-docker.com/, as in *Figure 7.2*:
    ![Figure 7.2: The Docker playground ](img/B15021_07_02.jpg)
    图 7.2:Docker 游乐场
2.  点击左侧菜单中的`ADD NEW INSTANCE`创建一个新节点。从顶部节点信息部分获取节点 IP。现在，使用带有`–advertise-addr`选项的`docker swarm init`命令创建一个群来指定节点 IP。如*图 7.2* 所示，Docker 引擎生成一个长令牌，允许其他节点，无论是经理还是工人，加入集群:
    ```
    $docker swarm init --advertise-addr 
    ```
3.  Use the `docker service create` command to create a service and specify port `80` using the `-p` option. Set the number of replicas as `2` for the `--replicas` option of the `nginx:1.14.2` image:
    ```
    $ docker service create -p 80 --replicas 2 nginx:1.14.2
    ```
    `docker service create`命令在容器内的港口`80`从`nginx:1.14.2`映像创建两个复制服务。Docker 守护程序选择任何可用的主机端口。在这种情况下，选择端口`30000`，如*图 7.2* 顶部所示。
4.  To verify that the service has been created, list all of the available services using the `docker service ls` command:
    ```
    $docker service ls
    ```
    如以下输出所示，Docker 守护程序自动生成了一个服务 ID，并为该服务分配了一个名称`amazing_hellman`，因为您没有使用`--name`选项指定一个名称:
    ```
    ID            NAME             MODE        REPLICAS  IMAGE
         PORTS
    xmnp23wc0m6c  amazing_hellman  replicated  2/2       nginx:1.14.2
         *:30000->80/tcp
    ```
    注意
    在容器中，Docker 守护进程为容器分配一个随机的**形容词 _ 名词**名称。
5.  Use the `curl ` Linux command to see the output of the service and connect to it without using a browser:
    ```
    $curl 192.168.0.223:3000
    ```
    输出是`NGINX`欢迎页面的 HTML 版本。这表明它已正确安装:
    ```
    Welcome to nginx!
    Welcome to nginx!
    If you see this page, the nginx web server is successfully 
    installed and working. Further configuration is required. 
    For online documentation and support please refer to
    nginx.org.
    Commercial support is available at
    nginx.com.
    Thank you for using nginx.
    ```
6.  Assume that business is booming even more, and two replicas are not enough. You need to scale it to five replicas instead of two. Use the `docker service scale =` subcommand:
    ```
    $docker service scale amazing_hellman=5
    ```
    您将获得如下输出:
    ```
    amazing_hellman scaled to 5
    overall progress: 5 out of 5 tasks
    1/5: running
    2/5: running
    3/5: running
    4/5: running
    5/5: running
    verify: Service converged
    ```
7.  To verify that the Docker swarm replicated the service, use the `docker service ls` subcommand one more time:
    ```
    $docker service ls
    ```
    输出显示副本数量从`2`增加到`5`副本:
    ```
    ID            NAME             MODE        REPLICAS  IMAGE
         PORTS
    xmnp23wc0m6c  amazing_hellman  replicated  5/5       nginx:1.14.2
         *:30000->80/tcp
    ```
8.  Delete the service using the `docker service rm` subcommand:
    ```
    $docker service rm amazing_hellman
    ```
    该命令将返回服务的名称:
    ```
    amazing_hellman
    ```
9.  To verify that the service has been deleted, list the service one more time using the `docker service ls` subcommand:
    ```
    $docker service ls
    ```
    输出将是一个空列表:
    ```
    ID       NAME      MODE      REPLICAS      IMAGE      PORTS
    ```
在本练习中，您部署了一个无状态服务 NGINX，并使用`docker service scale`命令对其进行了缩放。然后你使用了 Docker 游乐场(一个免费的解决方案，你可以用它来创建一个集群，用 Swarm 来初始化一个集群)。
注意
本练习使用 Docker Swarm。要使用 Kubernetes 执行同样的操作，您可以按照 https://Kubernetes . io/docs/tasks/run-application/run-无状态-application-deployment/。
现在，我们已经完成了 NGINX 的前端示例。在下一个练习中，您将看到如何创建需要持久数据的有状态服务。我们将使用数据库服务 MySQL 来完成以下练习。
## 练习 7.04:部署有状态服务，MySQL
如前所述，基于 web 的应用有前端和后端。在前面的练习中，您已经看到了前端组件的示例。在本练习中，您将部署一个有状态的 MySQL 容器作为数据库后端组件。
要安装 MySQL，请按照 https://hub.docker.com/_/mysql 的`via stack deploy`部分中的步骤进行操作。选择`stack.yml`文件并复制到内存中:
1.  Use an editor to paste the `stack.yml` file. You can use the `vi` or `nano` Linux commands to open a text editor in Linux and paste the YAML file:
    ```
    $vi stack.yml
    ```
    粘贴以下代码:
    ```
    # Use root/example as user/password credentials
    version: '3.1'
    services:
      db:
        image: mysql
        command: --default-authentication-plugin=      mysql_native_password
        restart: always
        environment:
          MYSQL_ROOT_PASSWORD: example
      adminer:
        image: adminer
        restart: always
        ports:
          - 8080:8080
    ```
    在这个 YAML 文件中，您有两个服务:`db`和`adminer`。`db`服务基于`mysql`形象，而`adminer`形象是`adminer`服务的基础形象。`adminer`映像是一个数据库管理工具。在`db`服务中，您输入命令并设置环境变量，该变量具有数据库密码和一个策略，如果由于任何原因失败，该策略将始终重新启动。此外，在`adminer`服务中，如果由于任何原因失败，策略将被设置为始终重新启动。
2.  按下键盘上的 *Esc* 键。然后，运行以下命令退出并保存代码:
    ```
    :wq
    ```
3.  To verify that the file has saved correctly, use the `cat` Linux command to display the `stack.yml` contents:
    ```
    $cat stack.yml
    ```
    将显示该文件。如果有错误，请重复前面的步骤。
4.  If the code is correct, deploy the `YML` file by using the `docker stack deploy` subcommand:
    ```
    $docker stack deploy -c stack.yml mysql
    ```
    您应该会看到如下输出:
    ```
    Ignoring unsupported options: restart
    Creating network mysql_default
    Creating service mysql_db
    Creating service mysql_adminer
    ```
    要连接到服务，右键单击 Docker 游乐场窗口中节点 IP 旁边顶部的端口`8080`，并在新窗口中打开它:
    ![Figure 7.3: Connecting to the service ](img/B15021_07_03.jpg)
    图 7.3:连接到服务
5.  Use the `docker stack ls` subcommand to list the stacks:
    ```
    $docker stack ls
    ```
    您应该会看到如下输出:
    ```
    NAME     SERVICES    ORCHESTRATOR
    mysql    2           Swarm
    ```
6.  Use the `docker stack rm` subcommand to remove the stack:
    ```
    $docker stack rm mysql
    ```
    移除栈时，Docker 将移除两个服务:`db`和`adminer`。它还将删除默认情况下为连接所有服务而创建的网络:
    ```
    Removing service mysql_adminer
    Removing service mysql_db
    Removing network mysql_default
    ```
在本练习中，您部署了一个有状态服务 MySQL，并且能够从浏览器访问数据库服务。同样，我们使用 Docker 操场作为我们执行练习的平台。
注意
复制 MySQL 不是一件容易的事情。您不能像我们在*练习 7.03* 、*创建和扩展无状态服务 NGINX* 中所做的那样，在一个数据文件夹上运行多个副本。这种方法不起作用，因为必须应用数据一致性、数据库锁定和缓存来确保数据是正确的。因此，MySQL 使用了一个主复制和一个从属复制，在这种情况下，您向主复制写入数据，数据同步到从属复制。要了解更多关于 MySQL 复制的信息，请访问 https://dev.mysql.com/doc/refman/8.0/en/replication.html.
我们已经了解到，容器需要持久存储，这种存储要比容器的生命周期更长，但是我们还没有讨论如何做到这一点。在下一节中，我们将了解用于保存持久数据的卷。
# Docker 卷和状态持久性
我们可以使用卷来保存持久数据，而不依赖于容器。您可以将卷视为共享文件夹。在任何情况下，如果将卷装载到任意数量的容器中，容器将能够访问卷中的数据。创建卷有两种方法: