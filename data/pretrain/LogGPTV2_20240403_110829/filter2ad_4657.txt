title:SymNet: Scalable symbolic execution for modern networks
author:Radu Stoenescu and
Matei Popovici and
Lorina Negreanu and
Costin Raiciu
Symnet:	
scalable	symbolic	execution	for	
modern	networks
University	Politehnica of	Bucharest
Radu Stoenescu,	Matei Popovici,	Lorina Negreanu and	
Costin	Raiciu
Networks	are	increasingly	complex
2
Understand	the	network
A
Reachability
Packet	modifications
Security	policy	violations
B
3
Static	verification	to	the	rescue
Data	plane	snapshot
Symbolic	Execution	Friendly	Language	(SEFL)	- Network	model
Network	model
Symnet – Verification	engine
Verification	engine
4
Choosing	a	modeling	language
C	code
• Expressive,	well	understood
• Symbolic	execution	captures	
many	properties
• Very	expensive	to	verify
Middle	ground
Header	Space	Analysis
• Cheap,	scalable
• No	arbitrary	protocol	layering
• Only	captures	reachability
5
Symbol	execution	of	firewall	- C	code
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
6
Symbol	execution	of	firewall	- C	code
Path	1
p=*
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
7
Symbol	execution	of	firewall	- C	code
Path	1
p=*
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
8
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port=80 p->dst_port!=80
9
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port=80 p->dst_port!=80
10
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port!=80
p->dst_port=80
filter	=	p
11
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port!=80
p->dst_port=80
filter	=	p
12
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port!=80
p->dst_port=80
filter	=	p
13
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port=80
filter	=	p
p=NULL
14
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port=80
filter	=	p
p=NULL
15
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port=80
filter	=	p
p=NULL
filter=NULL
16
Symbol	execution	of	firewall	- C	code
Path	2
Path	1
if (p->dst_port==80) 
1: packet* filter(packet* p){
2:
4:
5:
6:
7:
8:
9:}
free p;
return NULL;
return p;
else {
}
p->dst_port=80
filter	=	p
p=NULL
filter=NULL
Two	symbolic	paths	vs.	one	viable	in	the	network
Non-packet	processing	being	executed
17
Symbol	execution	of	firewall		- C	code
s
Firewall	#1
Firewall	#2
Firewall	#3
N-1	unnecessary	symbolic	paths
18
Symbolic	execution	of	network	data	plane	
implementations	does	not	scale
• A	core	IP	router	results	in	hundreds	of	
thousands	of	paths
• For	a	TCP	options-parsing	middlebox,	runtime	
depends	on	option	length	(	Use	models	of	networks	instead	of	real	code
Only	analyze	relevant	code
=>	1	execution	path	==	1	network	packet
Complex	data	structures	kill	symbolic	execution
=>	Use	symbolic-execution	friendly	data	structures	
Loops	+	conditionals	are	dangerous
=>	Careful	looping	semantics	with	low	branching	factor
20
Our	solution
SEFL symbolic	execution	friendly	language
Symnet symbolic	execution	tool
Memory	safety	by	design
• The	memory	space	is	the	packet
• No	pointers
• Memory	access	via	concrete	offsets;	validated
Symbolic	execution	constructs	part	of	the	language
• Explicit	forking	of	new	execution	paths
• Explicit	stating	of	path	constraints
No	arbitrary	data	structures
• Only	a	map	data	structure
21
SEFL symbolic	execution	friendly	language
• Variables	are	packet	headers	or	metadata
– Packet	headers	allocated	at	specific	addresses	in	
the	packet	header
– Metadata are	key/value	pairs	in	a	map	data	
structure
22
The	packet	header	in	SEFL
L2
MAC		DST
L3
IP	SRC
192.168.
IP	DST
*
0
96
32
CreateTag(“L3”,0)
Allocate(Tag("L3")+96,32)
Allocate(IpSrc,32) //IpSrc = Tag(“L3”)+96 
Assign(IpSrc,"192.168.1.1") 
Allocate(IpDst,32)
Assign(IpDst,Symbolic) 
CreateTag(“L2”,Tag(“L3)-112)
Assign(DstMac,Symbolic) 
ERROR
23
Firewall
C
SEFL
1: filter(){
2:
3: }
constrain(IpDst==80); 
return p;
1:packet* filter(packet* p){
2: if (p->dst_port==80) 
4:
5: else {
6:
7:
8: }
9:}
free p;
return NULL;
Only	relevant	paths	explored
Concise
24
Symnet symbolic	execution	tool
• 10K	LOC	of	Scala;	Z3	for	constraint	solving	
Input:	SEFL	network	model
– SEFL	models	of	individual	network	elements
– Connections	between	elements
Output:	all	feasible	symbolic	paths
– Values	of	header	and	metadata	fields
– Path	constraints
25
SEFL	Network	Models
P
0
P
{…}
{...}	
1
Element	A
{…}
0
P
{…}
1
P
{…}
0
Element	B
P
{…}
0
Symbolic	execution	of	filter	+	DNAT
Element A model
InputPort(0):
Constrain(IPDst==1.1.1.1),
If (Constrain(TcpDst==20),
InstructionBlock(
Assign(IPDst,192.168.0.1),
Assign(TcpDst,30),
Forward(OutputPort(0))
),
Forward(OutputPort(1)),
Packet	1
Packet	2
IpDst=*								TcpDst=*
IpDst=1,1…	TcpDst=*
IpDst=1.1…TcpDst=20 IpDst=1.1,		
IpDst=192…TcpDst=20
IpDst=192…TcpDst=30
TcpDst !=	20
CrtPort =	0
CrtPort =	1
• Reachability
• Loop	detection
• Invariant	header	fields
• Header	memory	safety
27
Ready-made	network	models
Modeling	network	boxes	is	fairly	difficult
We	have	developed	parsers	that	output	SEFL	
code	from:
• Router/switch	forwarding	table	snapshots
• CISCO	ASA	firewall	configuration
• Click	modular	router	configurations
• Openstack Neutron	network	configurations
28
Evaluation
Model	correctness
Functionality
Scalability
29
Verifiable	properties
Property
Reachability
Loop	Detection
Header	Field Invariance
Arbitrary	Packet Layout
Tunneling
Stateful Data Plane	Processing
Payload-sensitive		Processing
Properties Across	Multiple	Flows
HSA
✔
NoD
✔
✔
✖
✖
✖
✖
✖
✖
✖
✖
✔
✖
✔
✖
✖
SymNet
✔
✔
✔
✔
✔
✔
✖
✖
30
Does	Symnet scale?
31
Does	Symnet scale?
32
Does	Symnet scale?
33
Analyzing	bigger	networks
• Stanford	university	backbone	network
• Switches,	routers	and	VLANs
– Two-layer	topology
– Core	routers	have	180.000	entries	in	their	FIBs
Model	 Generation	
Time
Runtime
HSA
3.2	min
24s
Symnet
8.1	min
37s
34
Conclusions
SEFL +	Symnet offers	a	deeper	understanding	of	
modern	data	planes	at	a	low	price.		
Symnet is	open-source
Check	demo	session	tomorrow
35
Backup	slides
36
TCP	options	parsing
Symbolic	variable
Path	1
int crt = 0;
while (crt>=0 && crt=0 && crt<length &&
options[crt]){
switch(options[crt]){
case 1:
crt++; break;
case 2://MSS
case 3://WINDOW SCALE
case 4://SACK PERMITTED
case 8://TIMESTAMP
crt += options[crt+1]; break;
default:
//unknown options, scrub
int len = options[crt+1];
for (i=crt;i<crt+len;i++)
options[i] = 1;
crt += len; break;
}
}
38
TCP	Options	parsing
Leave	the	TCP	options	header	outside	of	
symbolic	execution
Model	TCP	options	as	metadata	instead
“OPT-x”	models	the	presence	of	option	x
“SZ-x”	size	of	the	option	in	bytes
“DATA-x”	value	of	the	option
39
Does	Symnet scale?
Symbolic	execution	of	a	core	router
40
Running	Klee	for	options	parsing
41