beta.megacorpone.com. 5 IN A 51.222.169.209
fs1.megacorpone.com. 5 IN A 51.222.169.210
intranet.megacorpone.com. 5 IN A 51.222.169.211
mail.megacorpone.com. 5 IN A 51.222.169.212
mail2.megacorpone.com. 5 IN A 51.222.169.213
ns1.megacorpone.com. 5 IN A 51.79.37.18
ns2.megacorpone.com. 5 IN A 51.222.39.63
ns3.megacorpone.com. 5 IN A 66.70.207.180
router.megacorpone.com. 5 IN A 51.222.169.214
siem.megacorpone.com. 5 IN A 51.222.169.215
snmp.megacorpone.com. 5 IN A 51.222.169.216
syslog.megacorpone.com. 5 IN A 51.222.169.217
test.megacorpone.com. 5 IN A 51.222.169.219
vpn.megacorpone.com. 5 IN A 51.222.169.220
www.megacorpone.com. 5 IN A 149.56.244.87
www2.megacorpone.com. 5 IN A y 149.56.244.87
megacorpone.com class C netranges: k
___________________________________
s
51.79.37.0/24
51.222.39.0/24
51.222.169.0/24 o
66.70.207.0/24
149.56.244.0/24
n
Performing reverse lookup on 1280 ip addresses:
________________________________i________________
z
18.37.79.51.in-addr.arpa. 86400 IN PTR ns1.megacorpone.com.
...
D
Listing 49 - Using dnsenum to automate DNS enumeration
We have now discovered several previously-unknown hosts as a result of our extensive DNS
enumeration. As mentioned at the beginning of this Module, information gathering has a cyclic
pattern, so we’ll need to perform all the other passive and active enumeration tasks on this new
subset of hosts to disclose any new potential details.
The enumeration tools covered are practical and straightforward, and we should familiarize
ourselves with each before continuing.
Having covered Kali tools, let’s explore what kind of DNS enumeration we can perform from a
Windows perspective.
Although not in the LOLBAS listing, nslookup is another great utility for Windows DNS
enumeration and still used during ‘Living off the Land’ scenarios.
Applications that can provide unintended code execution are normally listed
under the LOLBAS project
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 137
Made in Morocco
Penetration Testing with Kali Linux
Once connected on the Windows 11 client, we can run a simple query to resolve the A record for
the mail.megacorptwo.com host.
C:\Users\student>nslookup mail.megacorptwo.com
DNS request timed out.
timeout was 2 seconds.
Server: UnKnown
Address: 192.168.50.151
Name: mail.megacorptwo.com
Address: 192.168.50.154
Listing 50 - Using nslookup to perform a simple host enumeration
In the above output, we queried the default DNS server (192.168.50.151) to resolve the IP address
of mail.megacorptwo.com, which the DNS server then answered with “192.168.50.154”.
y
Similarly to the Linux host command, nslookup can perform more granular queries. For instance,
we can query a given DNS about a TXT record that belongs to a specific host.
k
C:\Users\student>nslookup -type=TXT info.megacorptwo.com 192.168.50.151
Server: UnKnown s
Address: 192.168.50.151
o
info.megacorptwo.com text =
"greetings from the TXT record body"
n
Listing 51 - Using nslookup to perform a more specific query
In this example, we are specifically querying the 192.168.50.151 DNS server for any TXT record
i
related to the info.megacorptwo.com host.
z
The nslookup utility is as versatile as the Linux host command and the queries can also be further
automated through PowerShell or Batch scripting.
D
6.3.2 TCP/UDP Port Scanning Theory
Port scanning is the process of inspecting TCP or UDP ports on a remote machine with the
intention of detecting what services are running on the target and what potential attack vectors
may exist.
Please note that port scanning is not representative of traditional user activity
and could be considered illegal in some jurisdictions. Therefore, it should not be
performed outside the labs without direct, written permission from the target
network owner.
It is essential to understand the implications of port scanning, as well as the impact that specific
port scans can have. Due to the amount of traffic some scans can generate, along with their
intrusive nature, running port scans blindly can have adverse effects on target systems or the
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 138
Made in Morocco
Penetration Testing with Kali Linux
client network such as overloading servers and network links or triggering an IDS/IPS.251 Running
the wrong scan could result in downtime for the customer.
Using a proper port scanning methodology can significantly improve our efficiency as penetration
testers while also limiting many of the risks. Depending on the scope of the engagement, instead
of running a full port scan against the target network, we can start by only scanning for ports 80
and 443. With a list of possible web servers, we can run a full port scan against these servers in
the background while performing other enumeration. Once the full port scan is complete, we can
further narrow our scans to probe for more and more information with each subsequent scan.
Port scanning should be understood as a dynamic process that is unique to each engagement.
The results of one scan determine the type and scope of the next scan.
We’ll begin our exploration of port scanning with a simple TCP and UDP port scan using Netcat. It
should be noted that Netcat is not a port scanner, but it can be used as such in a rudimentary way
to showcase how a typical port scanner works. y
Since Netcat is already present on many systems, we can repurpose some of its functionality to
k
mimic a basic port scan when we are not in need of a fully-featured port scanner. We will also
explore better tools dedicated to port scanning in detail.
s
Let’s start by covering TCP scanning techniques, focusing on UDP later. The simplest TCP port
scanning technique, usually called CONNECT scanning, relies on the three-way TCP handshake252
o
mechanism. This mechanism is designed so that two hosts attempting to communicate can
negotiate the parameters of the network TCP socket connection before transmitting any data.
n
In basic terms, a host sends a TCP SYN packet to a server on a destination port. If the destination
port is open, the server responds with a SYN-ACK packet and the client host sends an ACK packet
to complete the handshake. If the ihandshake completes successfully, the port is considered
open. z
We can demonstrate this by running a TCP Netcat port scan on ports 3388-3390. We’ll use the -w
D
option to specify the connection timeout in seconds, as well as -z to specify zero-I/O mode, which
is used for scanning and sends no data.
kali@kali:~$ nc -nvv -w 1 -z 192.168.50.152 3388-3390
(UNKNOWN) [192.168.50.152] 3390 (?) : Connection refused
(UNKNOWN) [192.168.50.152] 3389 (ms-wbt-server) open
(UNKNOWN) [192.168.50.152] 3388 (?) : Connection refused
sent 0, rcvd 0
Listing 52 - Using netcat to perform a TCP port scan
Based on this output, we know that port 3389 is open, while connections on ports 3388 and 3390
have been refused. The screenshot below shows the Wireshark capture of this scan.
251 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Intrusion_detection_system
252 (Microsoft, 2010), http://support.microsoft.com/kb/172983
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 139
Made in Morocco
Penetration Testing with Kali Linux
Figure 31: Wireshark capture of the Netcat port scan
In this capture (Figure 31), Netcat sent several TCP SYN packets to ports 3390, 3389, and 3388
on packets 1, 3, and 7, respectively. Due to a variety of factors, including timing issues, the
packets may appear out of order in Wireshark. We’ll observe that the server sent a TCP SYN-ACK
packet from port 3389 on packet 4, indicating that the port is open. The other ports did not reply
with a similar SYN-ACK packet, and actively rejected the connection attempt via a RST-ACK
packet. Finally, on packet 6, Netcat closed this connection by sending a FIN-ACK packet.
y
Now that we have a good understanding of the TCP handshake and have examined how a TCP
scan works behind the scenes, let’s cover UDP scanning. Sinkce UDP is stateless and does not
involve a three-way handshake, the mechanism behind UDP port scanning is different from TCP.
s
Let’s run a UDP Netcat port scan against ports 120-123 on a different target. We’ll use the only nc
option we have not covered yet, -u, which indicates a UDP scan.
o
kali@kali:~$ nc -nv -u -z -w 1 192.168.50.149 120-123
(UNKNOWN) [192.168.50.149] 123 (ntp) open
n
Listing 53 - Using Netcat to perform a UDP port scan
From the Wireshark capture, we’ll notice that the UDP scan uses a different mechanism than a
i
TCP scan.
z
D
Figure 32: Wireshark capture of a UDP Netcat port scan
As shown in Figure 32, an empty UDP packet is sent to a specific port (packets 2, 3, 5, and 7). If
the destination UDP port is open, the packet will be passed to the application layer. The response
received will depend on how the application is programmed to respond to empty packets. In this
example, the application sends no response. However, if the destination UDP port is closed, the
target should respond with an ICMP port unreachable (as shown in packets 5, 7, and 9), sent by
the UDP/IP stack of the target machine.
Most UDP scanners tend to use the standard “ICMP port unreachable” message to infer the
status of a target port. However, this method can be completely unreliable when the target port is
filtered by a firewall. In fact, in these cases the scanner will report the target port as open because
of the absence of the ICMP message.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 140
Made in Morocco
Penetration Testing with Kali Linux
Now that we have covered both TCP and UDP scanning techniques, let’s review a few common
pitfalls that can occur when performing such scans.
UDP scanning can be problematic for several reasons. First, UDP scanning is often unreliable, as
firewalls and routers may drop ICMP packets. This can lead to false positives and ports showing
as open when they are, in fact, closed. Second, many port scanners do not scan all available
ports, and usually have a pre-set list of “interesting ports” that are scanned. This means open UDP
ports can go unnoticed. Using a protocol-specific UDP port scanner may help to obtain more
accurate results. Finally, penetration testers often forget to scan for open UDP ports, instead
focusing on the “more exciting” TCP ports. Although UDP scanning can be unreliable, there are
plenty of attack vectors lurking behind open UDP ports. A TCP scan also generates much more
traffic than a UDP scan, due to overhead and packet retransmissions.
6.3.3 Port Scanning with Nmap
y
Having built a solid understanding of port scanning fundamentals, let’s now learn about Nmap,
the de-facto tool for port scanning.
k
Nmap253 (written by Gordon Lyon, aka Fyodor) is one of the most popular, versatile, and robust
port scanners available. It has been actively developed fosr over two decades and offers numerous
features beyond port scanning.
o
Some of the Nmap example scans we’ll cover in this Module are run using sudo. This is because
quite a few Nmap scanning options require access to raw sockets,254 which in turn require root
privileges. Raw sockets allow for surgical mnanipulation of TCP and UDP packets. Without access
to raw sockets, Nmap is limited as it falls back to crafting packets by using the standard Berkeley
socket API.255
i
Before exploring some port scanzning examples, we should understand the footprint that each
Nmap scan leaves on the wire and the scanned hosts.
D
A default Nmap TCP scan will scan the 1000 most popular ports on a given machine. Before we
start running scans blindly, let’s examine the amount of traffic sent by this type of scan. We’ll
scan one of the lab machines while monitoring the amount of traffic sent to the target host using
iptables.256
We will use several iptables options. First, let’s use the -I option to insert a new rule into a given
chain, which in this case includes both the INPUT (Inbound) and OUTPUT (Outbound) chains,
followed by the rule number. We can use -s to specify a source IP address, -d to specify a
destination IP address, and -j to ACCEPT the traffic. Finally, we’ll use the -Z option to zero the
packet and byte counters in all chains.
kali@kali:~$ sudo iptables -I INPUT 1 -s 192.168.50.149 -j ACCEPT
kali@kali:~$ sudo iptables -I OUTPUT 1 -d 192.168.50.149 -j ACCEPT
253 (Nmap, 2022), http://nmap.org/
254 (Man7, 2017), http://man7.org/linux/man-pages/man7/raw.7.html
255 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Berkeley_sockets#Socket_API_functions
256 (netfilter, 2014), http://netfilter.org/projects/iptables/index.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 141
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ sudo iptables -Z
Listing 54 - Configuring our iptables rules for the scan
Next, let’s generate some traffic using nmap:
kali@kali:~$ nmap 192.168.50.149
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-09 05:12 EST
Nmap scan report for 192.168.50.149
Host is up (0.10s latency).
Not shown: 989 closed tcp ports (conn-refused)
PORT STATE SERVICE
53/tcp open domain
88/tcp open kerberos-sec
135/tcp open msrpc
139/tcp open netbios-ssn
y
389/tcp open ldap
445/tcp open microsoft-ds
464/tcp open kpasswd5 k
593/tcp open http-rpc-epmap
636/tcp open ldapssl
s
3268/tcp open globalcatLDAP
3269/tcp open globalcatLDAPssl
o
Nmap done: 1 IP address (1 host up) scanned in 10.95 seconds
Listing 55 - Scanning an IP for the 1000 most popular TCP ports
n
The scan completed and revealed a few open ports.
Now let’s review some iptables staitistics to get a clearer idea of how much traffic our scan
generated. We can use the -v opztion to add some verbosity to our output, -n to enable numeric
output, and -L to list the rules present in all chains.
D
kali@kali:~$ sudo iptables -vn -L
Chain INPUT (policy ACCEPT 1270 packets, 115K bytes)
pkts bytes target prot opt in out source destination
1196 47972 ACCEPT all -- * * 192.168.50.149 0.0.0.0/0
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
pkts bytes target prot opt in out source destination
Chain OUTPUT (policy ACCEPT 1264 packets, 143K bytes)
pkts bytes target prot opt in out source destination
1218 72640 ACCEPT all -- * * 0.0.0.0/0 192.168.50.149
Listing 56 - Using iptables to monitor nmap traffic for a top 1000 port scan
According to the output, this default 1000-port scan generated around 72 KB of traffic.
Let’s use iptables -Z to zero the packet and byte counters in all chains again and run another
nmap scan, this time using -p to specify all TCP ports.
kali@kali:~$ sudo iptables -Z
kali@kali:~$ nmap -p 1-65535 192.168.50.149
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-09 05:23 EST
Nmap scan report for 192.168.50.149
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 142
Made in Morocco
Penetration Testing with Kali Linux
Host is up (0.11s latency).
Not shown: 65510 closed tcp ports (conn-refused)
PORT STATE SERVICE
53/tcp open domain
88/tcp open kerberos-sec
135/tcp open msrpc
139/tcp open netbios-ssn
389/tcp open ldap
445/tcp open microsoft-ds
464/tcp open kpasswd5
593/tcp open http-rpc-epmap
636/tcp open ldapssl
3268/tcp open globalcatLDAP
3269/tcp open globalcatLDAPssl
5985/tcp open wsman
9389/tcp open adws y
47001/tcp open winrm
49664/tcp open unknown
... k
Nmap done: 1 IP address (1 host up) scanned in 2141.22 seconds
s
kali@kali:~$ sudo iptables -vn -L
Chain INPUT (policy ACCEPT 67996 packets, 625o3K bytes)
pkts bytes target prot opt in out source destination
68724 2749K ACCEPT all -- * * 192.168.50.149 0.0.0.0/0
n
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)