### DNS Records for Megacorpone.com
- **beta.megacorpone.com.** 5 IN A 51.222.169.209
- **fs1.megacorpone.com.** 5 IN A 51.222.169.210
- **intranet.megacorpone.com.** 5 IN A 51.222.169.211
- **mail.megacorpone.com.** 5 IN A 51.222.169.212
- **mail2.megacorpone.com.** 5 IN A 51.222.169.213
- **ns1.megacorpone.com.** 5 IN A 51.79.37.18
- **ns2.megacorpone.com.** 5 IN A 51.222.39.63
- **ns3.megacorpone.com.** 5 IN A 66.70.207.180
- **router.megacorpone.com.** 5 IN A 51.222.169.214
- **siem.megacorpone.com.** 5 IN A 51.222.169.215
- **snmp.megacorpone.com.** 5 IN A 51.222.169.216
- **syslog.megacorpone.com.** 5 IN A 51.222.169.217
- **test.megacorpone.com.** 5 IN A 51.222.169.219
- **vpn.megacorpone.com.** 5 IN A 51.222.169.220
- **www.megacorpone.com.** 5 IN A 149.56.244.87
- **www2.megacorpone.com.** 5 IN A 149.56.244.87

### Megacorpone.com Class C Netranges
- 51.79.37.0/24
- 51.222.39.0/24
- 51.222.169.0/24
- 66.70.207.0/24
- 149.56.244.0/24

### Reverse Lookup on 1280 IP Addresses
- **18.37.79.51.in-addr.arpa.** 86400 IN PTR ns1.megacorpone.com.
- ...

### DNS Enumeration Using `dnsenum`
We have discovered several previously unknown hosts through extensive DNS enumeration. As information gathering is a cyclic process, we need to perform all other passive and active enumeration tasks on this new subset of hosts to uncover additional details.

The tools covered in this section are practical and straightforward, and it is essential to familiarize yourself with each one before proceeding.

### Windows DNS Enumeration with `nslookup`
Although not listed in the LOLBAS project, `nslookup` is a useful utility for DNS enumeration on Windows and is still used in "Living off the Land" scenarios.

#### Example: Resolving an A Record
```sh
C:\Users\student>nslookup mail.megacorptwo.com
DNS request timed out.
timeout was 2 seconds.
Server: UnKnown
Address: 192.168.50.151
Name: mail.megacorptwo.com
Address: 192.168.50.154
```

In this example, the default DNS server (192.168.50.151) resolved the IP address of `mail.megacorptwo.com` as 192.168.50.154.

#### Example: Querying a TXT Record
```sh
C:\Users\student>nslookup -type=TXT info.megacorptwo.com 192.168.50.151
Server: UnKnown
Address: 192.168.50.151
info.megacorptwo.com text = "greetings from the TXT record body"
```

Here, we specifically queried the 192.168.50.151 DNS server for any TXT records related to `info.megacorptwo.com`.

`nslookup` is as versatile as the Linux `host` command and can be further automated using PowerShell or Batch scripting.

### TCP/UDP Port Scanning Theory
Port scanning involves inspecting TCP or UDP ports on a remote machine to detect running services and potential attack vectors. It is important to note that port scanning is not typical user activity and may be illegal in some jurisdictions. Always obtain written permission from the target network owner before conducting such scans.

Port scanning can generate significant traffic and may have adverse effects on target systems or networks, such as overloading servers and triggering IDS/IPS. A proper methodology can improve efficiency and reduce risks. For example, start by scanning common ports like 80 and 443, then narrow down subsequent scans based on results.

### TCP Port Scanning with Netcat
Netcat, while not a dedicated port scanner, can be used for basic port scanning. Let's demonstrate a TCP scan on ports 3388-3390:

```sh
kali@kali:~$ nc -nvv -w 1 -z 192.168.50.152 3388-3390
(UNKNOWN) [192.168.50.152] 3390 (?) : Connection refused
(UNKNOWN) [192.168.50.152] 3389 (ms-wbt-server) open
(UNKNOWN) [192.168.50.152] 3388 (?) : Connection refused
sent 0, rcvd 0
```

From the output, we know that port 3389 is open, while connections on ports 3388 and 3390 were refused.

### UDP Port Scanning with Netcat
UDP scanning uses a different mechanism due to its stateless nature. Let's run a UDP scan on ports 120-123:

```sh
kali@kali:~$ nc -nv -u -z -w 1 192.168.50.149 120-123
(UNKNOWN) [192.168.50.149] 123 (ntp) open
```

UDP scanning can be unreliable due to firewalls and routers dropping ICMP packets, leading to false positives. Dedicated UDP scanners may provide more accurate results.

### Port Scanning with Nmap
Nmap is a powerful and versatile port scanner. Many Nmap options require root privileges for raw socket access, which allows for precise manipulation of TCP and UDP packets.

#### Example: Default Nmap Scan
```sh
kali@kali:~$ nmap 192.168.50.149
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-09 05:12 EST
Nmap scan report for 192.168.50.149
Host is up (0.10s latency).
Not shown: 989 closed tcp ports (conn-refused)
PORT STATE SERVICE
53/tcp open domain
88/tcp open kerberos-sec
...
Nmap done: 1 IP address (1 host up) scanned in 10.95 seconds
```

This scan revealed several open ports.

#### Monitoring Traffic with `iptables`
To monitor the traffic generated by the scan, we can use `iptables`:

```sh
kali@kali:~$ sudo iptables -I INPUT 1 -s 192.168.50.149 -j ACCEPT
kali@kali:~$ sudo iptables -I OUTPUT 1 -d 192.168.50.149 -j ACCEPT
kali@kali:~$ sudo iptables -Z
kali@kali:~$ nmap 192.168.50.149
...
kali@kali:~$ sudo iptables -vn -L
Chain INPUT (policy ACCEPT 1270 packets, 115K bytes)
pkts bytes target prot opt in out source destination
1196 47972 ACCEPT all -- * * 192.168.50.149 0.0.0.0/0
...
```

The default 1000-port scan generated around 72 KB of traffic.

#### Full TCP Port Scan
```sh
kali@kali:~$ sudo iptables -Z
kali@kali:~$ nmap -p 1-65535 192.168.50.149
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-09 05:23 EST
Nmap scan report for 192.168.50.149
...
Nmap done: 1 IP address (1 host up) scanned in 2141.22 seconds
kali@kali:~$ sudo iptables -vn -L
Chain INPUT (policy ACCEPT 67996 packets, 6253K bytes)
pkts bytes target prot opt in out source destination
68724 2749K ACCEPT all -- * * 192.168.50.149 0.0.0.0/0
...
```

A full TCP port scan generated significantly more traffic, highlighting the importance of understanding the impact of different scan types.

---

**PWK - Copyright Â© 2023 OffSec Services Limited. All rights reserved.**  
**Made in Morocco**  
**Penetration Testing with Kali Linux**