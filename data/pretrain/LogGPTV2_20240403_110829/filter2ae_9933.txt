# 强网杯2021 线上赛 ezmath Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
题目思路很新颖，需要通过分析代码理解背后的数学公式
* * *
## 比赛期间的分析
ida逆向，发现init_array有自修改
主要函数：
* * *
sub_1301：
    double __fastcall sub_1301(double x)
    {
      int i; // [rsp+Ch] [rbp-1Ch]
      double power; // [rsp+10h] [rbp-18h]
      double sum; // [rsp+18h] [rbp-10h]
      double factorial; // [rsp+20h] [rbp-8h]
      power = 1.0;
      sum = 1.0;
      factorial = 1.0;
      for ( i = 1; i ）
* * *
sub_13F3：
    double __fastcall sub_13F3(int n)
    {
      int i; // [rsp+8h] [rbp-Ch]
      double v; // [rsp+Ch] [rbp-8h]
      v = 0.2021;
      for ( i = 0x2021; i ）
    from math import e
    def p16(n):
        return n.to_bytes(2, "little")
    global_cache = [None]*0x10000
    v = 0.00004147642328261315    # n=0x10000
    for i in range(0x10000, 0, -1):
        lastv = v
        v = (e-v)/i
        assert v > lastv
        global_cache[i-1] = v
    def calc(n):
        global global_cache
        assert n = d >= fb
                return a if fa-d = fmid >= fb
            if fmid > d:
                a = mid
                fa = fmid
            else:
                b = mid
                fb = fmid
    # dbl_4020
    numbers = [
        0.00009794904266317233, 0.00010270456917442, 0.00009194256152777895,
        0.0001090322021913372, 0.0001112636336217534, 0.0001007442677411854,
        0.0001112636336217534, 0.0001047063607908828, 0.0001112818534005219,
        0.0001046861985862495, 0.0001112818534005219, 0.000108992856167966,
        0.0001112636336217534, 0.0001090234561758122, 0.0001113183108652088,
        0.0001006882924839248, 0.0001112590796092291, 0.0001089841164633298,
        0.00008468431512187874
    ]
    finalnums = [bsearch(d) for d in numbers]
    flag = b""
    for n in finalnums:
        flag += p16(n)
    print(flag)    # flag{saam_dim_gei_lei_jam_caa_sin_laa}
（正确的flag输入给程序却返回wrong，作为逆向题不该这样吧2333）
* * *
## 赛后分析1
看到其他队的writeup，直接用e除以最终比较的数就能直接得到flag……（这就是这题做出人数这么多的原因吗？）
尝试推导一波：
在  时有
同时乘得：
计算定积分：
记
则有
所以可以直接用e除以最终比较的数得出flag
    from math import e
    def p16(n):
        return n.to_bytes(2, "little")
    # dbl_4020
    numbers = [
        0.00009794904266317233, 0.00010270456917442, 0.00009194256152777895,
        0.0001090322021913372, 0.0001112636336217534, 0.0001007442677411854,
        0.0001112636336217534, 0.0001047063607908828, 0.0001112818534005219,
        0.0001046861985862495, 0.0001112818534005219, 0.000108992856167966,
        0.0001112636336217534, 0.0001090234561758122, 0.0001113183108652088,
        0.0001006882924839248, 0.0001112590796092291, 0.0001089841164633298,
        0.00008468431512187874
    ]
    finalnums = [int(e/n)-1 for n in numbers]
    flag = b""
    for n in finalnums:
        flag += p16(n)
    print(flag)
* * *
## 赛后分析2
即使没有init_array的提示，单纯根据`sub_13F3`的递推式也是可以得到积分式的  
已知
两边同时除以 ：
迭代下去，得出通项公式：
考虑  带积分余项的展开式：
代入 ：
代入到通项公式中：