title:On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1
v1.5 Encryption
author:Tibor Jager and
J&quot;org Schwenk and
Juraj Somorovsky
On the Security of TLS 1.3 and QUIC
Against Weaknesses in PKCS#1 v1.5 Encryption
Tibor Jager
Horst Görtz Institute
Ruhr University Bochum
PI:EMAIL
Jörg Schwenk
Horst Görtz Institute
Ruhr University Bochum
PI:EMAIL
Juraj Somorovsky
Horst Görtz Institute
Ruhr University Bochum
PI:EMAIL
ABSTRACT
Encrypted key transport with RSA-PKCS#1 v1.5 is the most com-
monly deployed key exchange method in all current versions of the
Transport Layer Security (TLS) protocol, including the most re-
cent version 1.2. However, it has several well-known issues, most
importantly that it does not provide forward secrecy, and that it is
prone to side channel attacks that may enable an attacker to learn
the session key used for a TLS session. A long history of attacks
shows that RSA-PKCS#1 v1.5 is extremely difﬁcult to implement
securely. The current draft of TLS version 1.3 dispenses with this
encrypted key transport method. But is this sufﬁcient to protect
against weaknesses in RSA-PKCS#1 v1.5?
We describe attacks which transfer the potential weakness of
prior TLS versions to two recently proposed protocols that do not
even support PKCS#1 v1.5 encryption, namely Google’s QUIC pro-
tocol and TLS 1.3. These attacks enable an attacker to impersonate
a server by using a vulnerable TLS-RSA server implementation as
a “signing oracle” to compute valid signatures for messages chosen
by the attacker.
The ﬁrst attack (on TLS 1.3) requires a very fast “Bleichenbacher-
oracle” to create the TLS CertificateVerify message before
the client drops the connection. Even though this limits the prac-
tical impact of this attack, it demonstrates that simply removing
a legacy algorithm from a standard is not necessarily sufﬁcient to
protect against its weaknesses.
The second attack on Google’s QUIC protocol is much more
practical. It can also be applied in settings where forging a sig-
nature with the help of a “Bleichenbacher-oracle” may take an ex-
tremely long time. This is because signed values in QUIC are inde-
pendent of the client’s connection request. Therefore the attacker
is able to pre-compute the signature long before the client starts a
connection. This makes the attack practical. Moreover, the impact
on QUIC is much more dramatic, because creating a single forged
signature is essentially equivalent to retrieving the long-term secret
key of the server.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813657.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network Proto-
cols; K.4.4 [Computers and Society]: Electronic Commerce –
Security
Keywords
Cross-protocol attack; chosen-ciphertext attack; TLS
INTRODUCTION
1.
TLS and PKCS#1 v1.5 encryption. Transport layer security (TLS)
is the most important security protocol on the Internet. It is very
ﬂexible, as it allows two communicating parties to negotiate the
cryptographic algorithms used for a TLS connection at the begin-
ning of each session. For each new TLS session, the peers may
choose from different selections of cryptographic algorithms for
key establishment, symmetric encryption, and message authentica-
tion. The current TLS version is 1.2 [12], it was published in 2008.
All current TLS versions include RSA-based PKCS#1 v1.5 en-
cryption [24]. Even though this scheme has been updated [21,
19] and has been subject to many attacks [7, 22, 9, 18, 4, 28,
36] (in TLS and other applications), it is the most commonly used
method for TLS key establishment in practice. Moreover, the only
mandatory-to-implement cipher suite in TLS 1.2 is based on this
encryption scheme.
TLS 1.3. Version 1.3 of TLS is currently under development [13].
It is the ﬁrst version which dispenses with PKCS#1 v1.5 encryp-
tion. There are several reasons for this, including the lack of for-
ward secrecy, that the PremasterSecret of previous TLS ver-
sions may depend only on client randomness, and that PKCS#1
v1.5 encryption has proven to be extremely difﬁcult to implement
securely in TLS [7, 22, 4, 28].
In this paper, we analyze the security of the current version of
the TLS 1.3 draft against weaknesses in PKCS#1 v1.5 encryption.
We show that even though this encryption scheme is not even used
in TLS 1.3, the coexistence with older TLS versions may enable
cross-protocol attacks [33, 26].
Google’s QUIC protocol. Quick UDP Internet Connections (QUIC)
[32] is a key-exchange protocol based on UDP connections, which
aims at reducing the relatively high latency of protocols like TLS.
The latency in TLS(-over-TCP) stems from the handshake mes-
sages (for both TCP and TLS) to be sent before the ﬁrst encrypted
message can be transmitted. QUIC’s goal is to reduce the number
of “round trips” for key establishment to a minimum, while provid-
ing all security guarantees expected from a key-exchange protocol
on the Internet.
QUIC is currently considered experimental, but put forward by
Google and implemented in recent versions of Google’s Chrome
web browser, the Opera browser, and available on Google web
servers. Google has announced that QUIC will be proposed as an
IETF standard.1 Currently, draft version 01 is available.2
Relevance and recurrence of Bleichenbacher attacks. At Crypto
1998 [7] Bleichenbacher presented a seminal attack on RSA-based
PKCS#1 v1.5 encryption. Essentially, it assumes the existence of
an “oracle” that allows an attacker to distinguish “valid” from “in-
valid” PKCS#1 v1.5-padded ciphertexts. Such an oracle may in
practice be given by a TLS server, which responds with appropriate
error messages, or allows in any other way to tell whether a given
ciphertext has a “valid” padding or not (for instance by observing
the timing behavior of the server when processing the ciphertext).
Bleichenbacher showed that such an oracle is sufﬁcient to decrypt
PKCS#1 v1.5 ciphertexts. Today there exist many variants and re-
ﬁnements of this attack [7, 22, 9, 18, 4, 28, 36], the TLS RFCs [10,
11, 12] give recommendations for implementing PKCS#1 v1.5 en-
cryption securely (which are however kept quite general).
One may think that seventeen years after the publication of Ble-
ichenbacher’s attack we should have developed a very good under-
standing of this weakness, and that at least important, widely-used
applications that still use this scheme (possibly for legacy reasons,
like TLS) ﬁnally implement it securely. However, there is vast evi-
dence that this belief is false:
1. Increasingly sophisticated analysis techniques and new side
channels allow one to apply Bleichenbacher-like attacks in
settings where these attacks were previously believed to be
impossible. A recent example was described at USENIX Se-
curity 2014 by Meyer et al. [28]. The authors discover new
timing-based side channels that allow one to apply Bleichen-
bacher’s attack to widely-used TLS implementations, like
Java’s JSSE or hardware security appliances using Cavium’s
Nitrox SSL accelerator. Similar new attack techniques are
developed perpetually. Further examples include attacks on
Europay-Mastercard-Visa (EMV) [9], XML Encryption [18],
and more attacks on TLS implementations [22, 4].
2. New applications provide new opportunities to adversaries,
by enabling side channels and attack techniques that have not
been considered before. For instance, at ACM CCS 2014,
Zhang et al. [36] showed very efﬁcient Bleichenbacher-type
attacks in Platform-as-a-Service (PaaS) applications. These
attacks exploit the fact that, due to virtualization of machines,
an attacker may have access to the same physical resources as
the victim, which is different from the classical network at-
tacker model. Even though the application considered in [36]
implemented all existing countermeasures against Bleichen-
bacher’s attack, and thus was considered not exploitable, the
new attack technique circumvents all these countermeasures.
Please note also that the efﬁciency of a Bleichenbacher at-
tack may depend on the attacker model: In [28], a network
attacker model was used against OpenSSL. An answer from
the oracle could only be used with low probability 2−40 to
advance the Bleichenbacher attack by one step. In contrast,
Zhang et al. [35] achieve a signiﬁcantly better success prob-
ability of roughly 2−16 against the same OpenSSL version,
because their cross-tenant attacker model allowed the attacker
to “look inside the PKCS#1 v1.5-checking machine”.
1http://blog.chromium.org/2015/04/
a-quic-update-on-googles-experimental.html
2http://tools.ietf.org/html/
draft-tsvwg-quic-protocol-01
3. While Bleichenbacher’s attack and its early applications [7,
22] were originally rather inefﬁcient, much faster versions
are known today [25, 4]. This makes such attacks applicable
in settings where they were previously considered infeasible.
Thus, in summary, PKCS#1 v1.5 encryption has proven to be
extremely difﬁcult to implement securely. Considering all possible
side channels (some of which might not even be conceivable today)
seems virtually impossible.
Transferring the weaknesses of PKCS#1 v1.5 encryption to mod-
ern protocols. For the reasons explained above, it seems a wise de-
cision that PKCS#1 v1.5 encryption is not used in QUIC and will
ﬁnally be removed from TLS in version 1.3. However, the question
that motivates our research is the following:
Is this sufﬁcient to protect TLS 1.3 and QUIC against the
weaknesses of PKCS#1 v1.5 encryption?
We analyze the security of both protocols under the hypothe-
sis that Bleichenbacher-like attacks on PKCS#1 v1.5 encryption in
TLS versions prior to 1.3 will remain a realistic threat in the future,
and study the impact of such attacks on TLS 1.3 and QUIC.
For the analysis of TLS 1.3, we consider a setting where there is
a TLS client C that supports only TLS 1.3, and thus may expect that
it is immune against weaknesses in PKCS#1 v1.5 encryption. The
client connects to a server S, which offers TLS 1.3, and at least one
previous TLS version which allows to use PKCS#1 v1.5 encryp-
tion, say TLS 1.2. Note that today’s TLS servers are typically not
conﬁgured to offer only the most recent TLS version 1.2 (or any
other single version), but they usually offer many TLS versions in
parallel, to maximize compatibility with different TLS clients. Ac-
cording to SSL Pulse [1], TLS 1.2 and 1.1 are supported by about
60%, and TLS 1.0 is supported by nearly 100% of the TLS servers
analyzed in April 2015. We consider a setting where the server uses
the same RSA certiﬁcate for both TLS versions.3 We show that a
vulnerability of the old TLS version against Bleichenbacher’s at-
tack gives rise to a man-in-the-middle attack on TLS 1.3, which
allows an attacker to impersonate S towards C.
The attack (see Figure 1) is based on the observation that Ble-
ichenbacher’s attack enables the attacker to perform an RSA secret-
key operation without knowing the secret RSA key. It exploits that
this is sufﬁcient to compute a “forged” RSA signature, which in
turn is sufﬁcient to impersonate S towards C in TLS 1.3 (and also
in previous TLS versions). A similar technique was used in [9, 17]
to compute forged RSA signatures, but to attack different applica-
tions. See Section 6 for a detailed description.
The analysis of QUIC is nearly identical. That is, we consider a
setting with a client which implements only QUIC (and thus may
assume to be immune against Bleichenbacher-attacks on TLS), a
server which implements QUIC and some TLS version ≤ 1.2, say
for interoperability or backwards-compatibility reasons, and where
TLS server uses an RSA certiﬁcate.
The potentially devastating impact on QUIC. A Bleichenbacher-
attack against a TLS server prior to version 1.3 usually allows to de-
crypt the PremasterSecret of a session, which can be assumed
to be unique for each session. Moreover, in most practical cases
(where performing the Bleichenbacher attack takes longer than the
life time of the TLS session) the attacker would only be able to read
encrypted messages after the session has ﬁnished, but usually not
be able to impersonate the server or to inject adversarially-chosen
messages. In our attack against TLS 1.3, the attacker is able to im-
personate the server, however, the attacker has to compute a new
3We explain below why this is a very reasonable assumption.
Figure 1: Simpliﬁed illustration of the MITM attack against TLS-(EC)DHE-RSA.
signature by mounting a Bleichenbacher-attack for each attacked
TLS session, which may be infeasible if this step takes too long.
In contrast, an attacker which obtains a validly signed QUIC
SCFG (serialized server conﬁg) message, by performing Bleichen-
bacher’s attack once, is able to impersonate the server in an ar-
bitrary number of sessions and against an arbitrary number of
clients, until the SCFG message has expired. Note that the ex-
piry date is also chosen by the attacker, thus, this date can be as
far ahead in the future as the attacker likes. For the attacker this
is essentially equivalent to obtaining the server’s secret key — by
performing only a single Bleichenbacher attack.
Thus, in the realistic setting where a web server uses an X.509
certiﬁcate for PKCS#1 v1.5 encryption in TLS, and where this
same (valid, legitimate) certiﬁcate is accepted by a TLS 1.3/QUIC
client has a serious but still limited impact on the security of TLS,
but a completely devastating impact on the security of QUIC. Note
that this works even if the real QUIC server actually uses a com-
pletely different certiﬁcate.
Cross-Ciphersuite Attacks. At CCS’12, a cross-ciphersuite attack
for TLS was presented [26], and at CCS’14, a formal model for this
type of attack was proposed [5]. Both papers have extended the
research on cryptographic protocols to cover more practically rele-
vant aspects. The present paper can be seen as an extension to this
line of research, by proposing the ﬁrst cross-ciphersuite-family at-
tack from TLS-RSA to TLS-DHE, the ﬁrst cross-protocol-version
attack (TLS 1.2 to TLS 1.3), and even the ﬁrst cross-protocol at-
tack (TLS to QUIC). Moreover, while the success probability of
the attack from [26] was ﬁxed to 2−40, the success probability of
our attack depends on the environment and may even be completely
realistic against QUIC.
Practical evaluation. We conducted experiments to assess the fea-
sibility of this attack. There are no reference implementations of
TLS 1.3 yet available, and for QUIC there is only experimental
server code available, which unfortunately does not support signed
SCFG messages. However, note that the approach extends easily
to previous TLS versions, as a cross-ciphersuite attack. Therefore
we analyzed a server which implements only TLS version 1.2, but
offers two different cipher suites, one from the TLS_RSA family
which is vulnerable, and one from the TLS_ECDHE_RSA family
(to mimic TLS 1.3), using the same RSA key for both cipher suites.