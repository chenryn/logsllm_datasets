Token Kidnapping's
Revenge
Author: Cesar Cerrudo
(cesar.at.argeniss.dot.com)
Argeniss – Information Security & Software
Table of contents
Table of contents..................................................................................................................................2
Abstract.................................................................................................................................................3
Introduction..........................................................................................................................................4
Some theory..........................................................................................................................................5
The Tools..............................................................................................................................................6
Finding the vulnerabilities....................................................................................................................6
Bypassing Microsoft fix for Token Kidnapping on Windows 2003 and XP.....................................10
Preventing exploitation.......................................................................................................................13
Conclusion..........................................................................................................................................14
Special Thanks....................................................................................................................................15
About the author.................................................................................................................................16
References..........................................................................................................................................17
About Argeniss...................................................................................................................................18
-2-                                       www.argeniss.com
Argeniss – Information Security & Software
Abstract
This document describes some Microsoft Windows elevation of privilege vulnerabilities, how 
they were found with the use of simple tools and how they can be exploited. Starting with a 
little  security  issue  that  then  leads  to  more  significant  vulnerabilities  finding.  All  the 
vulnerabilities detailed here are not publicly know at the time of this document release.
-3-                                       www.argeniss.com
Argeniss – Information Security & Software
Introduction
Token Kidnapping [1] is the name of a research I did some time ago, it consisted of security 
issues and techniques that allowed elevation of privileges on all recent Windows operating 
systems. On Windows 2003 and XP it allowed to elevate to Local System account from any 
account that had impersonation rights. On Windows Vista and 2008 it allowed to elevate to 
Local System account from Network Service and Local Service accounts.
The old Token Kidnapping issues were fixed by Microsoft. This new research, presented in this 
document, demonstrates that those Microsoft fixes were not enough and elevation of privileges 
is still possible on all Windows versions.
Many people wonder how security research is performed, what tools are used, how is the 
process of vulnerability finding, etc. Based on that I tried to make this document as practical 
and detailed as possible in order to the reader can learn and easily understand it.
-4-                                       www.argeniss.com
Argeniss – Information Security & Software
Some theory
Before starting we need to understand some theory, people with enough knowledge could skip 
this part.
Impersonation
Is the ability of a thread to execute using different security information than the process that 
owns the thread. Threads impersonate in order to run code under another user account, all 
ACL checks are done against the impersonated users. Impersonation can only be performed by 
processes  with  the  following  privilege:  “Impersonate  a  client  after  authentication” 
(SeImpersonatePrivilege). When a thread impersonates it has an associated impersonation 
token.
Token
An access token is an object that describes the security context of a process or thread. It 
includes the identity and privileges of the user account associated with the process or thread. 
They can be Primary or Impersonation tokens, Primary ones are those that are assigned to 
processes, Impersonation ones are those that can be get when impersonation occurs. There 
are four impersonation levels: SecurityAnonymous, SecurityIdentity, SecurityImpersonation, 
SecurityDelegation. Impersonation takes place  mostly during Inter Process Communication 
(IPC) using Local Procedure Call (LPC), Named Pipes, etc. Impersonation can be limited by 
clients by setting proper options on the calling APIs.
Windows 2003 and XP services security
Services run under Local System, Network Service, Local Service and regular user accounts. All 
services can impersonate. Some Windows services that impersonate privileged accounts are 
protected, they are created with “special” permissions, for instance a service running under 
Network Service account can't access a protected service running under the same account. 
This protection was introduced as a patch to fix the issues detailed in my previous Token 
Kidnapping research [1]. Before this patch it was possible to elevate privileges by getting 
privileged impersonation tokens from other processes, the patch restricts processes to access 
some other processes running under the same account that have privileged impersonation 
tokens.
Windows 7, Vista and 2008 R1 & R2 services security
There are lots of security improvements in latest Windows versions, there are new protections 
such as: 
•
Session 0 isolation: protect against Shatter attacks [5] by running services in a 
different session (session 0) than regular user processes.
•
Least privilege: allow  to run Windows services with only the minimum required 
privileges.
•
Per service SID: each service process has a unique security identification, this allows 
service processes to be armored. Service running under “X” account can't access 
other service resources no matter the other service is running under the same “X” 
account.
•
Write restricted token: services can have write access to resources only if explicitly 
granted to the service SID, logon SID, Everyone SID or write-restricted SID.
•
Restricted  network  access: services  can  only  accept  and  make  connections  on 
specified ports and protocols. Services can be restricted to have no network access. 
-5-                                       www.argeniss.com
Argeniss – Information Security & Software
This is implemented as firewall rules that can't be disabled after service starts.
•
In Windows 7 and 2008 R2, IIS 7.5 worker processes don't run any more under 
Network Service account by default as they did on Windows 2008 R1 and Windows 
2003. Now they run under a special account named DefaultAppPool. This provides 
more  protection  since  web  applications  can't  access  processes  running  under 
Network Service account nor their resources. But DefaultAppPool account has the 
same privileges as Network Service account, it can impersonate.
The Tools
Let's describe the tools that will be used:
•
Process Explorer (ProcExp): this tool displays information about all Windows processes, 
by selecting a process you can see information such as: Process ID, Windows objects 
handles  opened  and  their  names,  user  name  that  the  process  is  running  under, 
processes and objects DACL, etc.
•
Process Monitor (ProcMon): this tool displays information about registry, file system and 
network access by Windows processes.
•
WinDbg: it's a user mode and kernel mode debugger for Windows, part of Debugging 
tools for Windows.
•
Registry Editor (Regedit): Windows tool to display and edit Windows registry.
Finding the vulnerabilities
I was waiting for Windows 7 (Win7) RC to take a quick look at it, mostly for finding low 
hanging fruit security issues since I didn't have much free time. I wanted to check also if there 
were some new issues similar to the ones described in my previous Token Kidnapping research 
[1], basically issues that would allow to elevate privileges and to bypass new protections.
After Win7 RC was released I got a copy, installed it and started to take a look at it. I ran 
ProcExp and looked at processes checking for DACLs issues on services, processes and on 
process objects such as threads, shared sections, mutexes, etc. Everything looked good so far. 
After  a  while  I  couldn’t  find  anything  interesting  by  just  clicking  around  in  ProcExp.  I 
remembered I had found some little issue on Windows 2008 R1 (Win2k8) and I thought I 
should check if it was still present on Win7. 
The issue is that Telephony service (TapiSrv) has a process object handle from some service 
that runs under Local System account and the handle has DuplicateHandle privileges on it. This 
means  that  Telephony  service  process can  duplicate  any  handle  from  this  other  process. 
Telephony service runs under Network Service account and it could, for instance, duplicate a 
Local System impersonation token handle from the other service process and use it to elevate 
privileges.
The issue is not important since in order to exploit it you must first exploit some vulnerability 
on Telephony service. But it's security issue anyways that can be exploited to bypass new 
Windows services protections. So I tested it on Win7 and it was still present there, that was 
good news, it meant Win7 wasn't perfect.
I continued looking around a little more at Win7 but couldn't find any low hanging fruit, I 
decided to focus on the only issue I had so far. I didn't know any details about the Telephony 
service issue, why “sometimes” it had that process handle with those privileges? it was a 
mystery for me. I say “sometimes” because in some tests the process handle wasn't there. I 
had to research more the issue. 
-6-                                       www.argeniss.com
Argeniss – Information Security & Software
I thought about what I knew about Telephony service:
−
It provides functionality for programs that controls telephony devices: modems, VoIP, 
etc.
−
It doesn't run by default.
−
Any user can start it by issuing a “net start tapisrv” command.
−
It runs under Network Service account on Win2k8 R1 & R2, Vista and Win7 and it runs 
under Local System account in WinXP and Win2k3.
−
It has had some remote and local vulnerabilities in the past.
I needed to know more about inner and outer workings of that service, what files and registry 
keys it uses, how it communicates with other processes, what applications use its functionality, 
etc. I always start by trying the easiest tests that don’t require much time and effort. I thought 
I would start by looking at file and registry interaction. 
File Monitor and Registry Monitor tools would help, I checked the web for new versions and I 
found ProcMon which was a better tool for the job, you can monitor registry, files and  network 
access with the same tool. After installing ProcMon I ran it and set a filter to just display 
Telephony service process activities. This service runs under a Generic Host Process for Win32 
Services (svchost.exe process) together with other services. Using ProcExp I identified the 
svchost.exe process hosting Telephony service and got its process ID (PID), then I used this 
PID to create a filter in ProcMon to just display all activities related only to that process.
The tool was ready I just needed to find a way to interact with Telephony service to force it to 
access files, registry, network, etc. I started by stopping the service running: “net stop tapisrv” 
and then started it: “net start tapisrv”, obviously this produced a lot of file and registry access 
activity. I got dozens of file and registry access items to analyze, but what I would look for?
The first step was to try to quickly understand what the service was doing, what registry keys 
and files it accessed and why. This could be a little difficult if you don't have enough Windows 
OS knowledge but with some effort you can quickly get practice and experience. 
I didn't  understand everything about TapiSrv actions, luckily ignorance makes you asking 
some questions and try to answer them in a way that makes some sense.
I saw TapiSrv was accessing HKLM\Software\Microsoft\Tracing\tapisrv registry key, I haven't 
seen that registry key before so it got my attention. I ran Regedit and located the key. The 
first thing that came to my mind was to check key ACL permissions, there was a surprise 
there. Network Service, Local Service and Users accounts had the same permissions and they 
included the “Set Value” permission. Clearly there was an issue there since any user could 
manipulate values that then are read and used by privileged processes. A little smile was being 