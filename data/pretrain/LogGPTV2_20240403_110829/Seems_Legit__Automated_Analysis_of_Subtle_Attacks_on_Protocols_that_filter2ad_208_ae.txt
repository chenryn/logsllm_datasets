5 FURTHER CASE STUDIES
We now demonstrate the utility of our approach on more com-
plex case studies. We automatically find three attacks on different
real world protocols, two of which are novel and previously unre-
ported. Furthermore, all three protocols have undergone previous
formal analysis using the traditional model of digital signatures
and reported to be secure:
(i) a known attack on an earlier version of the Let’s Encrypt
certificate issuance protocol, arising from a key substitution
property;
(ii) a previously unreported attack on a WS-Security Handshake,
arising from a key substitution property. This attack was missed
despite having been analysed using ProVerif in two separate
papers.
(iii) a previously unreported attack on DRKey, a key exchange
protocol, arising from a weak signature property. This last
attack was missed in a previous formal analysis, and allows
us to violate the security claims of OPT, an origin and path
tracing protocol which uses DRKey.
5.1 Let’s Encrypt
Let’s Encrypt (LE) is the world’s most popular Certificate Authority.
To issue certificates automatically, it uses the ACME protocol for
issuance, renewal and revocation, as standardised by the Internet
Engineering Task Force (IETF) [11]. ACME allows a website owner
to prove ownership of a domain and request a certificate from a CA
via a choice of signature-based challenge-response protocols. If the
protocol succeeds, LE issues a certificate to the owner.
ACME went through a number of drafts prior to (and after)
release. Draft Barnes 01 [3] was the first incarnation in which DNS
challenges are completed by placing a nonce in a DNS record. The
DNS challenge mechanism was then updated in Draft Barnes 03 [4]
to be a signature over the nonce by the account holder’s public key.
Draft Barnes 04 [5], only a minor refinement of 03, was then
adopted by the ACME working group as IETF Draft 00 [7], at which
point—only six weeks before LE was loaded into major browsers’
certificate stores—a signature key substitution attack was discov-
ered and reported [6] to the IETF ACME mailing list. (IETF ACME
Draft 00 is also known as Barnes Draft 04.) The attack allowed an
active attacker to pass the ACME challenge and receive a valid
TLS certificate for any website using LE DNS Challenges, and thus
intercept and modify any such website’s TLS traffic. This prompted
the DNS Challenge to be updated to a hash of the account public
key and the nonce (known as a key thumbprint) in IETF Draft 02
[8]. This mechanism remains in use today [11].
The attack stems from Draft 00’s use of a DNS-based signature
challenge, shown in Figure 7a: the website owner requests a ran-
dom nonce from LE, signs the nonce with a key to be used in the
new certificate, and places the signature in a DNS record for the do-
main. LE then extracts and verifies the signature from the website’s
DNS records, concluding that the owner controls (i) the claimed
private key and (ii) the DNS records for that website. Based on that
conclusion, it issues a certificate for the corresponding public key.
In the attack, depicted in Figure 7b, suppose Alex has completed
a LE ACME challenge as normal, and has placed the signature in
their DNS records. The adversary can begin a new instance of the
challenge response protocol with the CA, claiming ownership of
Alex’s website and receive a token to sign and display in Alex’s DNS
records. The adversary then performs a key substitution (no-DEO)
attack on Alex’s signature and the new token value (and updates
their account key accordingly). Afterwards, they trigger the second
phase of the protocol by sending the Ready message. LE retrieves
Alex’s signature and verifies it against the adversary’s malicious
public key. This succeeds and LE will now issue the adversary a
certificate for Alex’s website and the adversary’s public key.
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2174skac , id
Owner
skca, Act(id, pkac)
Let’s Encrypt (LE)
Adr
DNS Server
skatk , ida
Attacker
skca, Act(id, pkatk)
Let’s Encrypt (LE)
Adr
DNS Server
Register,Adr,id
Generate token
token
σ := sign(token, skac)
DNS-UPD(Adr, σ))
Ready,JSON(σ)
DNS-Req(Adr,TXT)
DNS-RSP(σ)
Register,Adr,ida
Generate token2
token2
(skdeo, pkdeo) := DEO(token2, σ))
Update pkdeo
Ready,JSON(σ)
DNS-Req(Adr,TXT)
DNS-RSP(σ)
Vf(σ, token, pkac)
Approved
Vf(σ, token2, pkdeo)
Approved
(a) Normal Operation of the ACME Draft 00 Protocol
(b) Attack on the ACME Draft 00 Protocol
Figure 7: ACME Draft 00 Let’s Encrypt DNS Challenge Response Protocol. The dotted arrows indicate that the channel is assumed to be
authentic.
5.1.1 Analysis of ACME. We developed a Tamarin model of the
vulnerable draft of the ACME certificate issuance protocol. Us-
ing our model from §4, we automatically find the reported attack.
We check that using the traditional symbolic model of signatures
Tamarin successfully verifies ACME, confirming that it misses
this attack without our improvements. We also provide a Tamarin
model corresponding to IETF ACME Draft 02 [8], the patched ver-
sion of ACME. Although the IETF could have elected to use a
signature scheme which provides DEO, they it felt it safer to forgo
the use of signatures entirely, instead replacing the signed value
with a hash of the account public key and the token. Using our SVS
model, Tamarin verifies the attack is no longer possible. We collect
these results in Table 4.
This example also illustrates the complementary uses of SVS and
our attack finding models, such as ‘no-DEO’. Whilst SVS reports an
attack, the attack trace does not correspond exactly to the attack
reported on the mailing list [6]—rather, the trace simply allows an
adversary to successfully pass the verification directly, since this
possibility is not excluded by the EUF-CMA definition. If we then
use our ‘no-DEO’ equation from §3, Tamarin recovers the exact
attack trace from the initial report. This demonstrates the utility of
our two-pronged approach.
Previously, Bhargavan et al. [34] presented a symbolic model
of draft Barnes 01 [3] (which they refer to as ACME Draft 1) and
draft IETF 00 [7] (referred to as ACME Draft 4) using ProVerif.
Due to the traditional symbolic signature model, their analysis
missed this attack. In fact, their analysis concluded the (vulnerable)
draft IETF 00 satisfied stronger security properties than the earlier
(secure) draft Barnes 01, which contradicts our findings.
5.2 WS-Security
In 2004, the OASIS Consortium published the Web Services Security
Standard [1], which defines a suite of protocols for securing XML
web requests and responses without requiring the use of TLS (which
was not yet widely deployed). This standard enjoyed considerable
popularity until it was overtaken by SAML and later TLS based
solutions. Nonetheless, it is still in use and supported by many
enterprise frameworks such as gSOAP [15], Apache CXF [13], IBM
Websphere [19], and Microsoft’s WCF [18].
As well as suffering from a number of implementation flaws,
primarily due to the complexities of XML parsing and canonicali-
sation [20], the complexity and popularity of the standard made it
of considerable interest to the automated verification community
[24, 33, 35–37], leading to the creation of verified cross compilers
which could accept a protocol specification from the standard and
produce both an automated proof of security using ProVerif and an
executable implementation in F# [37].
The 1.0 standard published in 2004 was later superseded by the
1.1 standard released in 2006 [1]. One of the motivations for the
updated standard was the introduction of Signature Confirmation,
a mechanism for correlating requests and responses to prevent
adversarial manipulation [33]. The principal idea of Signature Con-
firmation is that after receiving a signed request, the responder’s
signature should also cover the signature from the request.
Although the standard only directly defined a method for speci-
fying particular message formats and how to parse them, a number
of example handshakes and ‘scenarios’ were also provided. One
such scenario which saw widespread adoption was WSS1.1-MA-
X509-SE [21] which is depicted in Figure 8a. It supports a request
response framework where each party holds a X.509 certificate and
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2175ski , certi
Initiator
skr , certr
Responder
ski , certi
Initiator
ska, certa
Attacker
skr , certr
Responder
certa,T , aencpkr
senck1(RQ), σ1
(k1),
(k2),
certr , aencpka
senck2(RE), signskr
(RE, σ1)
(k1),
certi ,T , aencpkr
senck1(RQ), signski
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
(RQ,T)
σ1
(k1),
certi ,T , aencpkr
senck1(RQ), signski
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
(RQ,T)
σ1
(k2),
certr , aencpki
senck2(RE), signskr
(RE, σ1)
(k2),
certr , aencpki
senck2(RE), signskr
(RE, σ1)
(a) Normal Protocol Flow. T is a timestamp used to pre-
vent replay attacks, RQ is the request payload and RE is
the response payload.
(b) This attack violates request correlation and response secrecy. The Attacker passes off the
Initiator’s request as their own by replacing the certificate, can then learn the response and can
even pass it back to the Initiator. Note that the responder does check the match of signature σ1
and certificate certa, but is fooled due to no-CEO.
Figure 8: The WSS1.1-MA-X509-SE protocol from [21] and the attack we automatically discovered.
corresponding private key and claims to provide mutual authenti-
cation of the communicating parties, as well as binding requests
and response together securely using signature confirmation. In
addition to being the default setting in IBM’s Websphere Platform
[19], documentation of its use as a default can still be found for the
Spring Framework [12], the Windows Communication Foundation
[9], Oracle’s Fusion Middleware [2] and Apache CXF [10].
In 2006, a team at Microsoft Research verified the design of this
protocol and the benefits of signature confirmation using ProVerif
[35]. In addition to proving the secrecy of requests and responses
made in the protocol, they also proved ‘request correlation’, that
every accepted response matched the intended request. This anal-
ysis was also followed up on in [37], where it was dubbed ‘WS
Request-Response’ and the authors presented a tool for extracting
ProVerif models of the protocol from F# implementations.
Using our new model for signature verification, we revisit this
protocol in Tamarin. We automatically discover a number of at-
tacks, the most devastating of which makes use of the no-CEO
property to ‘steal’ a client’s request and is depicted in Figure 8b.
Not only does this violate the request correlation property that
signature confirmation was introduced to ensure, but furthermore
the attacker can learn the contents of the response to the honest
request, violating the secrecy requirement.
There are many scenarios in which this would be damaging,
notably if the request contained login credentials and the response
a cookie or other secret authentication response. The previous
analyses in ProVerif could not have discovered this attack, as they
used the traditional symbolic model of signatures, which does not
consider these types of attacks.
We stress that whilst we demonstrate our attack on this particular
protocol, it is the very mechanism of signature confirmation which
is flawed. Signing a signature does not (necessarily) create a unique
binding to the contents or public key of the signed signature. Instead,
it is much better practice to directly sign the original message
and original public key. Using our SVS model, we verify that this
proposal fixes the security issues in the original protocol.
5.3 DRKey and OPT
The “Dynamically Recreatable Key” Protocol (DRKey) was first
published in 2014 [64] and was supported by a mechanised proof
performed using Coq [74]. It is a lightweight key exchange protocol
for routers on a packet-switched network to agree on symmetric
keys, used as part of a secure routing architecture.
At a high level, DRKey participants generate directional sym-
metric secret keys, one for use with each other participant. They
send both a public-key encryption and signature of the key to the
recipient, thereby securely transporting and authenticating the
keys to other participants. These keys are then used as part of a
higher-level protocol called “Origin and Path Trace” (OPT) [64].
OPT aims to prevent malicious routers from altering the paths of
packets through a wider network, using the keys generated by
DRKey to authenticate each link in turn. One of OPT’s security
goals is that malicious routers should only be able to affect routes
to their immediate neighbours:
“When there are multiple adjacent malicious nodes on the intended
path, a wormhole is present: an honest node down the path can only
conclude that the packet has entered the hole via the first malicious
node and exited from the last malicious node.”
Zhang et al. [74, Section 6.2] presents a formal analysis and
claims that this non-collusion property holds. We automatically
find a previously unreported attack on this property with Tamarin.
We also show that using the traditional model of digital signatures
leads to a successful Tamarin verification which misses our attack.
We describe the attack using an example topology, in which
S and D are an honest source and destination, H1, H2 are honest
routers, and M1, M2, M3 are malicious routers. S wishes to send a
packet to D along the intended upper path shown in black. H2 is
an honest router, not on the intended path; the malicious routers
collude to route the packet through H2 on the lower path (in red)
while S and D believe that it took its intended route via M2. This
violates the security requirement we quoted earlier, which requires
that the packets travel the edge H1 → M2, whereas due to our
attack they will instead transit H1 → H2.
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2176Protocol
Previous traditional verification
Ref
Year Methodology
Attacks found in this work by adding our new signature models
Properties violated
Model
Time (s)
Section
First Reported
Correlation & Secrecy
[35]
[37]
[70]
[70]