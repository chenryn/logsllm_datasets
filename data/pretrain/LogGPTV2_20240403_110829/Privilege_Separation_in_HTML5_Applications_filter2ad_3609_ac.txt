### Creating a Child with Bootstrap Code

```javascript
var sbContent = "";
sbContent += "<!DOCTYPE html><html><head><base href='" + window.location.href + "'>";
// The base URL is the current window URI, so that relative URIs work.
sbContent += "</head><body>";
// Contents of app.txt
sbContent += applicationCode;
// Attribute values are URI-decoded by the HTML parser
sbContent = encodeURIComponent(sbContent);
var fr = document.createElement("iframe");
fr.src = "data:text/html; charset=utf-8," + sbContent;
// Sandboxed frames run in a fresh origin
fr.setAttribute('sandbox', 'allow-scripts');
document.body.appendChild(fr);
```

**Listing 1: Bootstrap Code (JavaScript)**

### Implementation

As outlined in Section 3, the parent code executes when the user navigates to the application. The bootstrap code is responsible for creating an unprivileged sandbox and executing the unprivileged application code within it. The shim code and policy also run in the parent, but we focus on the bootstrap and shim code implementation in this section. The unprivileged child code and the security policy vary for each application, and we discuss these in our case studies (Section 5).

Figure 3 outlines the steps involved in creating one unprivileged child. First, the user navigates to the application, and the parent’s bootstrap code starts executing (Step 1 in Figure 3). In Step 2, the parent’s bootstrap code retrieves the application HTML code (as plain text files) and the security policy of the application. For client-side platforms like Chrome and Windows 8, this is a local file retrieval.

### Steps Involved in Creating an Unprivileged Child

1. **Bootstrap Code Execution**: The user navigates to the application, and the parent’s bootstrap code starts executing.
2. **Retrieve Application Code and Policy**: The parent’s bootstrap code retrieves the application HTML code and the security policy.
3. **Create Child**: The parent creates an unprivileged child using an iframe.
4. **Source Policy Code**: The policy code is sourced and applied to the child.

### Example: `captureVisibleTab` Function

#### Child Shim

```javascript
tabs.captureVisibleTab = function(windowid, options, callback) {
    var id = callbackCtr++;
    cached_callbacks[id] = callback;
    sendToParent({
        "type": "tabs.captureVisibleTab",
        "windowid": windowid,
        "options": options,
        "callbackid": id
    });
};
```

**Listing 2: Child shim for `captureVisibleTab`**

#### Parent Shim

```javascript
if (m.type === 'tabs.captureVisibleTab') {
    // Fail if policy does not allow
    if (!policy.allowCall(m)) { return; }
    tabs.captureVisibleTab(
        m.windowid,
        m.options,
        function(imgData) {
            sendToChild({
                type: "cb_tabs.captureVisibleTab",
                id: m.callbackid,
                imgData: imgData
            });
        }
    );
}
```

**Listing 3: Parent shim for `captureVisibleTab`**

### Privileged Call Proxying

The privileged call is syntactically the same as what the child would have made, except for the callback. The modified callback forwards the returned image data to the child, and the original callback still executes in the child.

#### Child Callback

```javascript
if (m.type === 'cb_tabs.captureVisibleTab') {
    var cb_id = m.callbackid;
    var savedCb = cached_callbacks[cb_id];
    savedCb.call(window, m.imgData);
    delete cached_callbacks[cb_id];
}
```

**Listing 4: Child shim for `captureVisibleTab`: Part 2**

### Persistent State

We take a different approach to data persistence APIs like `window.localStorage` and `document.cookie`. It is necessary that the data stored using these APIs is also stored in the parent since the next time a child is created, it will run in a fresh origin, and the previous data will be lost. Enabling persistent storage while maintaining compatibility requires some changes to code. Persistent storage APIs (like `window.localStorage`) in today’s platforms are synchronous, but our proxy mechanism uses `postMessage`, which is asynchronous. To facilitate compatibility, we implement a wrapper for these synchronous API calls in the child shim code and asynchronously update the parent via `postMessage`.

#### Example: `localStorage` Shim

```javascript
setItem: function(key, value) {
    data[key] = value + '';
    saveToMainCache(data);
},
saveToMainCache: function(data) {
    sendToParent({
        "type": "localStorage_save",
        "value": data
    });
}
```

**Listing 5: `localStorage` Shim in the Child Frame**

### Case Studies

We retrofitted our design onto three HTML5 applications to demonstrate that our architecture can be adopted by applications today:

- **Awesome Screenshot**: A widely used Chrome extension (802,526 users) similar to ScreenCap.
- **SourceKit**: A full-fledged text editor available as a Chrome packaged web application.
- **SQL Buddy**: A PHP web application for database administration.

Our goal in this evaluation is to measure:
1. The reduction in TCB achieved by our architecture.
2. The amount of code changes necessary to retrofit our design.
3. Performance overheads (user latency, CPU overheads, and memory footprint impact) compared to platform redesign approaches.

**Table 1: Overview of Case Studies**

| Application         | Number of Users | Initial TCB (KB) | New Lines Changed | TCB (KB) |
|---------------------|-----------------|------------------|-------------------|----------|
| Awesome Screenshot  | 802,526         | 15,000           | 0                 | 5.1      |
| SourceKit           | 580             | 16.4             | 13                | 5.38     |
| SQL Buddy           | 14,344          | 45,419           | 11                | 2.67     |

### Awesome Screenshot

The Awesome Screenshot extension allows a user to capture a screenshot of a webpage. It consists of three components: `background.html`, `popup.html`, and `editor.html`. A typical interaction involves the user clicking the Awesome Screenshot button, which opens `popup.html`. The user selects her desired action, and `popup.html` forwards the choice to `background.html`, which captures a screenshot and sends it to the image editor (`editor.html`) for post-processing.

### Privilege Redesign

We redesigned Awesome Screenshot following the model laid out in Section 3 (Figure 2). Each component runs in an unprivileged temporary origin. The parent mediates access to privileged APIs, and the policy keeps this access to the minimum required by the component in question.