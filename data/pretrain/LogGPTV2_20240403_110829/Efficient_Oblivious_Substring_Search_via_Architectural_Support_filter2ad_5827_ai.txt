(IS, stS) ← S0(LSetup , LLoad)
res0 ← P.Load(IS)
∀i ∈ {1, . . . , d}:
disagi [LQuery, j]i−1
dis (qS
i , occS
dis resi ← P.Query(qS
i )
dis if resi (cid:44) abort: resi ← Rqi
out ← {[resi]d
i =0,[TQuery,i]d
i =1, TSetup , TLoad , stA}
i , occS
i , stS) ← Si(stS, LSetup , LLoad ,[LQuery, j]i
Figure 5: Security Experiments for PPSS protocol P
scheme, the paths being written back after fetch or eviction ap-
pear as indistinguishable random data in both the experiments. In
conclusion, the traces TAcc,i, i = 1, . . . , d are computationally in-
distinguishable between the Realρ,A and Idealρ,A,S experiments.
Regarding the results resi of the Access procedure, the integrity
check mechanism ensures that any tampering on the path fetched
from the DORAM tree is detected in both experiments. Conversely,
in case the adversary decides to tamper with a randomly chosen
path before knowing which path will be fetched, the results be-
tween the two experiments may differ; nonetheless, as the adversary
cannot guess with other than uniform probability the path being
fetched in the Access procedure in both experiments, the statistical
distribution of tampering detection is equivalent to the distribu-
tion of correctly guessing the path being fetched, which is uniform
in both experiments. The adversary has no other ways to tamper
with data and computation, thus proving that the results resi are
computationally indistinguishable between the experiments.
□
A.2 ObSQRE Security Analysis
We now prove the security guarantees of ObSQRE, assuming that a
DORAM fulfilling the security requirements of Thm. 1 is employed
in our oblivious substring search algorithms. Some of these algo-
rithms may employ several parameters, such as the sample period
employed in the construction of the ABWT; since these parameters
are not sensitive and can be derived by the adversary itself, for
simplicity in our security analysis we assume that the same value
is always employed. Similarly, we assume that the alphabet of the
documents in the document collection D is publicly known.
As in the DORAM security analysis, we define the traces of
the three procedures as the information observed by the adversary
throughout the execution of these procedures. For the ones running
inside the enclave, namely Load and Query, the traces TLoad and
TQuery are defined as in Def. 1, with the DORAM client being
trivially replaced by the corresponding procedure; instead, since the
Setup procedure is executed at data-owner’s side, its trace TSetup is
limited to the encrypted full-text index sent to the untrusted server,
denoted as I. We also define the leakage L as the information
inferred by the adversary about the document collection D, the
substring queried q and the occurrences of q in D; we split L
in three components LSetup, LLoad and LQuery, denoting the
leakage in the corresponding ObSQRE procedure.
In our security definition, we consider a modified Query proce-
dure that, instead of retrieving all the oq occurrences of a string
q in D, allows to specify the number occ of occurrences to be re-
trieved. This procedure can be implemented by fetching occ entries
instead of oq ones from the suffix array SA in the second phase of
backwards search algorithm (lines 6-7 of Alg. 1). This modification
allows to prove that ObSQRE is secure against an adversary that
can choose the query to be performed after observing the traces
of previous queries. In this way, the protocol remains secure even
if the adversary can somehow control ObSQRE operations (e.g.,
forcing to always querying the same string).
Definition 3 (PPSS Security). Given a security parameter λ, a
PPSS protocol P with trace T = {TSetup , TLoad , TQuery}, leakage
L = {LInit , LLoad , LQuery} and an integer d ≥ 1, consider the
two interactive experiments RealP,A and IdealP,A,S, outlined in
Fig. 5, between a challenger and an adversary A consisting of d+1
probabilistic polynomial time algorithms A0, A1, . . . , Ad . Through-
out the experiments, the challenger may invoke the protocol P and
a probabilistic polynomial time simulator S consisting of d+1 prob-
abilistic polynomial time algorithms S0,S1, . . . ,Sd ; the adversary
A can tamper with data and computation of the PPSS protocol as de-
scribed in our threat model. Denoting as D a probabilistic polynomial
time algorithm that, given the output o of an experiment determines
if o refers to RealP,A (D(o) = 0) or IdealP,A,S (D(o) = 1) exper-
iment, the PPSS protocol P, with leakage L and trace T , is secure
against malicious probabilistic polynomial time adversaries A if, for
every possible A, there exists a simulator S such that for every D:
Pr(D(o)=1|o←RealP,A)−Pr(D(o)=1|o←IdealP,A,S)≤ϵ(λ)
where ϵ(·) is a negligible function.
Theorem 3. For a document collection D={D1, . . . , Dz} with z≥1
documents and d ≥ 1 strings q1, . . . , qd , assuming that a DORAM
with the security guarantees outlined in Thm. 1 is employed, ObSQRE
is secure according to Def. 3 with a leakage L = {LSetup , LLoad ,
LQuery,1, ...,LQuery,d } defined as:
i =j |Dj|}
• LSetup = {z, n =z
• LLoad = {n}
• LQuery,i = {mi , occi}, i ∈ {1, . . . , d}, where mi =|qi| and
occi is the number of occurrences of qi in D retrieved by the
user
ACSAC 2020, December 7–11, 2020, Austin, USA
N. Mainardi, D. Sampietro, A. Barenghi, G. Pelosi
Proof. To prove the theorem, we describe the simulator S and
we show that the output of the IdealP,A,S experiment is compu-
tationally indistinguishable from the output of the RealP,A one.
Simulator S0. This simulator, upon receiving LSetup and LLoad,
constructs a document collection DS over the publicly known al-
phabet Σ by randomly sampling z strings whose lengths sum up
to n. Then, the simulator computes the ABWT-based full-text in-
dex from DS and encrypts it with an AEAD scheme, obtaining the
encrypted index IS. This index has the same size of the index I
computed from the document collection D chosen by the adversary;
furthermore, each of its entries are encrypted with a semantically
secure scheme, in turn making the indexes I,IS (and thus the
traces TSetup in the experiments) computationally indistinguish-
able. The traces TLoad are also computationally indistinguishable
in both the experiments. Indeed, in the Load procedure, IS is
decrypted, and then the ABWT and the SA are inserted into the
DORAM through the Init operation. The security guarantees of the
DORAM ensures that this operation leaks only the number and the
size of the DORAM blocks: their number is proportional, for both
the ABWT and the SA, to n, which is the same in both experiments;
the size of each block corresponds to the size of each entry of the
ABWT and the SA, respectively, which are already known to the
adversary. Finally, the security guarantees of the DORAM ensures
that Init procedure is secure against any tampering to the DORAM
tree, while the AEAD scheme guarantees that any tampering on
the encrypted indexes I, IS is detected in the Load procedure,
hence making the results res0 equivalent in both experiments.
Simulator Si, i ∈ {1, . . . , d}. This simulator, upon receiving the
leakage LQuery,i, chooses a random string qS
of length mi and
sets occS
= occi. The Query procedure employs the oblivious
i
backward search algorithm with ABWT based oblivious Rank pro-
cedure. The number of iterations of backwards search depends
only on mi and occi in both the experiments. The linear sweeps
over the dictionary C adds to the trace TQuery only its size |Σ|, as
each entry is involved in an oblivious write. The oblivious Rank
procedure, outlined in Alg. 6, retrieves a block from the DORAM,
whose security guarantees ensures that no information is leaked
during the Access operation. After retrieving such block, the Rank
procedure obliviously sweeps over this block, an operation that
reveals only the block size, which is already known from TLoad.
Concerning the result of the query, all the operations, except for the
DORAM Access, are performed inside the SGX enclave, where any
i
code and data tampering is prevented. As the security guarantees
of DORAM ensures that accesses are secure against any tamper-
ing strategy, then the results of the queries are computationally
indistinguishable in both experiments.
□
A.3 Oblivious EarlyReshuffle Analysis
We prove that the strategy employed by EarlyReshuffle procedure
of our Ring DORAM places Z blocks out of the Z +D slots available
in the bucket uniformly at random. To this extent, we define the
event Ei, j, i∈{1, . . . , Z}, j∈{0, . . . , Z +D−1}, which is verified if the
slot j of the bucket is full in the i-th iteration. Similarly, we define
the event Bi, j, i∈{1, . . . , Z}, j∈{0, . . . , Z +D−1}, which is verified
if the i-th block placed by EarlyReshuffle is assigned to the slot
chosen in all previous iterations, i.e, Bi, j =i−1
j of the bucket. Clearly, the i-th block is assigned to the slot j if
and only if this slot is chosen in the i-th iteration and it is never
h=1 ¬Eh, j ∧Ei, j. The
probability of the event Bij can be thus computed as:
¬Ehj)Pr(i−1
¬Eh, j ∧ Ei j) = Pr(Ei, j | i−1
Pr(Bi, j) = Pr(i−1
¬Eh, j)Pr(¬Ei−1, j |Pr(i−2
¬Eh, j))Pr(i−2
= Pr(Ei, j | i−1
¬Eh, j)Pr(¬Ei−1, j |Pr(i−2
= Pr(Ei, j | i−1
. Pr(¬Eh, j|h−1
form probability, then Pr(¬Eh, j|h−1
Pr(Ei, j|i−1
Z +D−i+1 ones, then Pr(Ei, j|i−1
i−1
We now compute each of these probabilities. Pr(¬E1, j) is the prob-
ability that the slot j is not chosen in the first iteration; since
each of the Z +D slots may be chosen with uniform probability,
Pr(¬E1, j) = Z +D−1
k =1 ¬Ek, j) is the probability that
the slot j is not chosen among the Z +D−h+1 ones still available
in the h-th iteration; since each of them may be chosen with uni-
Z +D−h+1. Finally,
z=1 ¬Ez, j) is the probability that the slot j is chosen in
the i-th iteration; as the slot is chosen uniformly at random among
Z +D−i +1. Substitut-
k =1 ¬Ek, j) = Z +D−h
z=1 ¬Ez, j) =
¬Eh, j) · · · Pr(¬E1, j)
ing these probabilities in Equation 1, we obtain:
Z + D − h
Z + D − h + 1 =
Z + D − i + 1
Pr(Bi, j) =
1
¬Eh, j)
(1)
h=1
h=1
h=1
h=1
h=1
h=1
1
Z + D
¬Eh, j)
h=1
h=1
Z +D
1
h=1
Since the analysis may be repeated for each slot j and for each of
the z blocks, we conclude that each block is placed with uniform
probability over all the Z +D slots of the bucket.