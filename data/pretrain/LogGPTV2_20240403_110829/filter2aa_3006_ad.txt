3 
27 
11000 
Lsl #3 (9)
0011 
3 
12 
1100 
Lsl #2 (4)
0011 
3 
6 
0110 
Lsl #1 (2)
0011 
3 
Page 18 of 18                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
what is more important is that a hex editor allows a user to easily alter the hex code to 
new values. In addition to basic manipulation, some hex editors also provide search tools, 
ASCII views, macros and more.  
UltraEdit-32 
UltraEdit-32 is a windows based hex editing program that does all of the above and more. 
As you can see from figure 2, UltraEdit-32 contains the three basic, but very necessary 
fields required to edit hex code. The memory address on the left is used to locate the 
particular characters that you want to change. This address will be provided by the 
disassembler, which is discussed next. Once the correct line is located, the next step is to 
find the hex code in the line that represents the information you want to alter. The ASCII 
view, which is not always necessary, can provide some interesting and useful 
information, especially if you were changing plain text information in a file. 
Figure 2 Ultra Edit screen shot 
4.2 Disassemblers 
While it would be possible for a person to reverse-engineering a program, as it exists in 
hex format, it would be very difficult and would require a very deep understanding of hex 
Page 19 of 19                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
and binary code. Since this level of knowledge is impractical, the concept of the 
disassembler was designed to help us humans find a workable method of communicating 
with a computer. 
As we previously discussed, there are several levels of languages. The upper languages 
like Visual Basic are easy to follow and program with. This is because the syntax of the 
language follows spoken language. Unfortunately, a computer cannot directly understand 
upper level languages. So, after a program is written, it is compiled, or rewritten using 
code a computer can understand. This code, while it actually exists as hex or binary, can 
easily be converted to a low level language known as assembler. 
Assembler code is relatively basic, once you understand it. While the syntax is different 
for each processor type (e.g. RISC, Intel, Motorola), the general commands are relatively 
the same. Using a set of opcodes, assembler controls the processor and how it interacts 
with RAM and other parts of the computer. In other words, assembler speaks to the heart 
and nervous systems of the computer.  
Once a program is compiled, it creates a hex file (or set of files) that the computer loads 
into memory and reads. As previously mentioned, this code is stored as hex, but is 
converted to its binary equivalent and then process by the computer. To facilitate human 
understanding, a disassembler takes the same hex file and converts it to assembler code.  
Since there is no real difference, other than format and appearance, a person can use the 
assembler code to see the path the program takes when it is executed. In addition, a good 
disassembler will also provide the user with the information they need to alter the 
assembler code, through the use of a hex editor. By researching the code, a hacker can 
find the point in the program, for example, that a serial number is checked. They could 
then look up the memory location, and use the hex editor to remove the serial number 
check from the program. 
IDA Pro 
By far, IDA Pro (The Interactive Disassembler) is one of the best disassembler programs 
on the market. In fact, “IDA Pro was a 2001 PC Magazine Technical Excellence 
Award Finalist, defeated only by Microsoft and its Visual Studio .NET”, according to 
their web site. While there are many other disassemblers available, some for free, this 
program does a marvelous job providing its user with a wide selection of supported 
processor types, and a plethora of tools to assist in disassembling. 
While we could spend an entire paper delving into the many features and functionality of 
this program, it is outside the scope of this paper. However, there are several key features 
that need to be outlined.  
The first feature is that this program supports more processors than any other 
disassembler, and the list keeps growing. In other words, you can disassemble everything 
from the processor used in an iPAQ to your desktop computer. In addition to this, IDA 
includes several proprietary features that help to identify many of the standard function 
Page 20 of 20                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
calls made in a program. By providing this information, you do not have to track the code 
to the function yourself. Another proprietary feature includes the incorporation of a C like 
programming language that can be used to automate certain routines, such as decryption. 
However, it is the ease of use and amount of information provided by IDA Pro that 
makes it a great program. As you can see in figure 3 IDA Pro provides a wealth of 
information, much of it I can't fit on one screen shot. However, in this one shot, you can 
IDA has located the functions that are being called, and used their names in place of the 
memory address that would normally exist. In addition, you can see that IDA has listed 
all the window names, and provides a colorful look at how the data is laid out in the 
memory. In IDA 4.21+, the program also provides a graphical diagram of how functions 
are tied together.  
Figure 3 IDA Pro Screen shot.  
4.3 Debuggers 
The debugger is the third major program in any reverse-engineers bag of tools. This 
program is used to watch the code execute live and helps the reverse engineer watch the 
action in real time. Using such a tool, a reverse-engineer can monitor the register values, 
status flags, modes, etc. of a program as it executes. In addition, a good debugger will 
allow the user to alter the values being used by the program. Memory, registers, status 
flags and more can be updated to control the direction of the programs execution. This 
type of control can reduce the amount of time a user has to spend working with raw 
assembler code. 
Due to the limited environment of the PPC platform, and in particular the Pocket PC OS, 
there are few choices for a debugger. In fact, there is really only one that actually debugs 
live on the PPC device. This debugger is free and is actually included with the SDK from 
Page 21 of 21                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Microsoft. To obtain it, go to www.microsoft.com and download embedded Visual Tools. 
This will come with VB and VC++ for the Pocket PC OS. While these are programming 
tools, the VC++ includes a debugger that is ready for action (see figure 4.  
Figure 4:EVC Debugger 
We will be demonstrating how this program works in the next section, but the follow is a 
list of pointers to help you get started. 
To get connected to a program on the PPC, copy it first to the PC and open it from the 
local computer. 
• The debugger will copy the file BACK over to the PPC device, so be sure to 
define where you want the file to go (Project  Settings). 
• It is best to launch the program using the F11 key. This is the ‘Step into’ function 
and will only load the program and place the pointer at the first line of actual 
Page 22 of 22                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
code. If you use the Run command, you will execute the program as it would 
normally execute, which could make it difficult to break cleanly at the point you 
want to debug. 
• Make extensive use of breakpoints (Alt-F9) 
• Use your disassembler to determine the relative address, which corresponds to the 
actual address in the debugger. 
• If all else fails, use the break option at the top. However, note that this will force a 
complete reload of your program for further debugging. 
In summary, a debugger is not necessary, but is so helpful that it really should be used. 
Debugging on the PPC platform is painfully slow if you use the standard USB/serial 
connection that provides the default HotSync connection. If you want much faster access 
and response time, take the time to configure you PPC device to Sync up over a network 
 connection. 
5. Practical Reverse-Engineering 
Reverse engineering is not a subject that can be learned by simple reading. In order to 
understand the intricacies involved, you must practice. This segment will provide a legal 
and hands on tutorial on how to bypass a serial protection. This will only describe one 
method of circumvention, of only one protection scheme, which means there is more than 
one 'right' way to do it. We will use information previously discussed as a foundation. 
5.1 Overview 
For our example, we will use our own program. This program was written in Visual C++ 
to provide you with a real working product to test and practice your newly acquired 
knowledge. Our program simulates a simple serial number check that imitates those of   
many professional programs. You will see first hand how a cracker can reverse-engineer 
a program to allow any serial number, regardless of length or value. 
5.2 Loading the target 
The first step in reverse-engineering a program requires you to tear it apart. This is 
accomplished via a disassembler program, one of which is IDA Pro. There are many 
other disassemblers available; however, IDA Pro has earned the respect of both 
legitimate debuggers and crackers alike for its simplicity, power, and versatility.  
To load the target into the disassembler, step through the following steps. 
1. Open IDA (click OK through splash screen) 
2. Click [New] button at Welcome screen and select test.exe from hard drive, then click 
[Open] 
3. Check the 'Load resources' box, change the Processor type drop down menu to ARM 
processors: ARM and click [OK] as illustrated by figure ??.  
4. Click [OK] again if prompted to change processor type. 
Page 23 of 23                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Figure 5 IDA Pro loading screen 
4. Locate any requested *.dll file and wait for IDA to disassemble program. 
Note: You will need to find the requested files on the Windows CE device and transfer 
them over to a local folder on your PC. This will allow IDA to fully disassemble the 
program. The disassembly of serial.exe will require the mfcee300.dll and olece300.dll. 
Other programs may require different *.dll files, which can be found online or on the 
PPC device.  
5.3 Practical Disassembly 
Once the program is open, you should see a screen similar to figure 6, this screen is the 
default disassembly screen that shows you the program fully disassembled. On the left 
side of the window, you will see a “.text: ########” column that represents the memory 
address of the line. The right side of the window holds the disassembled code, which is 
processed by the PPC device.  
Page 24 of 24                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Figure 6: IDA Pro 
In addition to the data on the default screen, you have access to several other important 
pieces of information, one of the most helpful of which is the Names window. This dialog 
window provides you with a listing of all the functions used by the program. In many 
ways, this is a bookmark list that can be used to jump to a particular function or call that 
could lead to a valuable piece of code. In this window you will find names such as, 
LoadStringW, MessageboxW, wcscmp, wcslen, and more. These are flares to reverse-
engineers because they are often used to read in serial numbers, popup a warning, 
compare two strings, or check the length to be sure it is correct. In fact, some programs 
call their functions by VERY obvious names, such as ValidSerial or SerialCheck. These 
programs might as well include a crack with the program for all the security they have. 
However, it is also possible to throw a cracker off track by using this knowledge to 
misname windows. Imagine if a program threw in a bogus serial check that only resulted 
in a popup window that congratulated the cracker of their fine job! 
5.4 Locating a Weakness 
From here, a cracker basically has to start digging. While our serial.exe is basic, we can 
still see that the Names window still offers us a place to start. If you scroll through the 
many names, you will eventually come to the wcscmp function, as illustrated in figure 7. 
If you recall, this function is used to compare two values together. To access the point in 
the program where the wcscmp function is located, double click on the line.  
Page 25 of 25                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Figure 7: Locating wcscmp in Names window 
Once the IDA disassembly screen moves to the wcscmp function, you should take note of 
a few items. The first is that this function is an imported function from a supporting .dll 
(coredll.dll in this case), the second item to notice is the part of the data that is circle in 
figure 8. At each function, you will find one or two items listed at the top right corner. 
These list the addresses in the program that the function is used. Note, if there are three 
dots to the right of the second address listing, this means the function is used more than 
twice. To access the list of addresses, simply click on the dots. In larger programs, a 
wcscmp function can be called tens, if not hundreds of times. However, we are in luck, 
the wcscmp function in serial.exe is only referenced once. To jump to that part of the 
disassembled program, double click on the address. Once the IDA screen refreshes itself 
with the location of the selected address, it is time to start rebuilding the program.  
Page 26 of 26                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
Figure 8: Viewing wcscmp function call in IDA 
5.5 Reverse-Engineering the Algorithm 
Since serial.exe is a relatively simple program, all the code we will need to review and 
play with is located within a few lines. They are as follows: 
.text:00011224                  MOV     R4, R0 
.text:00011228                  ADD     R0, SP, #0xC 
.text:0001122C                 BL      CString::CString(void) 
.text:00011230                  ADD     R0, SP, #8 
.text:00011234                  BL      CString::CString(void) 
.text:00011238                  ADD     R0, SP, #4 
.text:0001123C                 BL      CString::CString(void) 
.text:00011240                  ADD     R0, SP, #0x10 
.text:00011244                  BL      CString::CString(void) 
.text:00011248                  ADD     R0, SP, #0 
.text:0001124C                 BL      CString::CString(void) 
.text:00011250                  LDR     R1, =unk_131A4 
.text:00011254                  ADD     R0, SP, #0xC 
.text:00011258                  BL      CString::operator=(ushort) 
.text:0001125C                 LDR     R1, =unk_131B0 
.text:00011260                  ADD     R0, SP, #8 
.text:00011264                  BL      CString::operator=(ushort) 
.text:00011268                  LDR     R1, =unk_131E0 
.text:0001126C                 ADD     R0, SP, #4 
Page 27 of 27                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
.text:00011270                  BL      ; CString::operator=(ushort) 
.text:00011274                  LDR     R1, =unk_1321C 
.text:00011278                  ADD     R0, SP, #0 
.text:0001127C                 BL      CString::operator=(ushort) 
.text:00011280                  MOV     R1, #1 
.text:00011284                  MOV     R0, R4 
.text:00011288                  BL      CWnd::UpdateData(int) 
.text:0001128C                 LDR     R1, [R4,#0x7C] 
.text:00011290                  LDR     R0, [R1,#-8] 
.text:00011294                  CMP     R0, #8 
.text:00011298                  BLT     loc_112E4 
.text:0001129C                 BGT     loc_112E4 
.text:000112A0                 LDR     R0, [SP,#0xC] 
.text:000112A4                 BL      wcscmp 
.text:000112A8                 MOV     R2, #0 
.text:000112AC                MOVS    R3, R0 
.text:000112B0                 MOV     R0, #1 