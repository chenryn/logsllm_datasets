# LegoSNARK: Modular Design and Composition of Succinct Zero-Knowledge Proofs

## Authors
Matteo Campanelli<sup>1</sup>, Dario Fiore<sup>1</sup>, and Anaïs Querol<sup>1,2</sup>

1. IMDEA Software Institute  
2. Universidad Politécnica de Madrid  

## Abstract
We investigate the problem of constructing non-interactive proof systems in a modular fashion by linking specialized "gadget" SNARKs in a lightweight manner. Our motivation is both theoretical and practical. Theoretically, modular SNARK designs offer flexibility and reusability. Practically, specialized SNARKs can be more efficient than general-purpose schemes, which are the focus of most existing work. When a computation naturally consists of different components (e.g., an arithmetic circuit and a boolean circuit), a general-purpose scheme would homogenize them into a single representation, leading to performance overhead. A modular approach, on the other hand, allows for exploiting the nuances of the computation and choosing the best gadget for each component.

Our contribution is **LegoSNARK**, a framework for commit-and-prove zkSNARKs (CP-SNARKs) that includes:

1. **General Composition Tools**: These tools allow for building new CP-SNARKs from proof gadgets for basic relations in a straightforward manner.
2. **A Lifting Tool**: This is a compiler that adds commit-and-prove capabilities to a wide range of existing zkSNARKs efficiently, making them interoperable within the same computation. For example, one QAP-based scheme can be used to prove one component, while another GKR-based scheme can be used for another.
3. **A Collection of Succinct Proof Gadgets**: These gadgets cover a variety of relations, enabling the construction of new succinct proof systems. Notably:
   - **LegoGro16**: A commit-and-prove version of the Groth16 zkSNARK, which operates over data committed with a classical Pedersen vector commitment, achieving a 5000× speedup in proving time.
   - **LegoUAC**: A pairing-based SNARK for arithmetic circuits with a universal, circuit-independent CRS, and linear proving time in the number of circuit gates, compared to the recent scheme by Groth et al. (CRYPTO'18) with quadratic CRS and quasilinear proving time.
   - **CP-SNARKs for Matrix Multiplication**: These achieve optimal proving complexity.
4. **A C++ Codebase**: This codebase provides highly composable zkSNARKs with commit-and-prove capabilities, available at [https://github.com/imdea-software/legosnark](https://github.com/imdea-software/legosnark).

## Table of Contents
1. Introduction
   1.1 Our Results
   1.2 Related Work
   1.3 Roadmap
2. Preliminaries
   2.1 Relations
   2.2 Commitment Schemes
   2.3 Zero-Knowledge SNARKs
3. Building the LegoSNARK Framework
   3.1 Commit and Prove SNARKs
   3.2 Composition Properties of CP-SNARKs
   3.3 Commit-Carrying SNARKs
   3.4 Existing CP-SNARKs and cc-SNARKs
   3.5 Bootstrapping our Framework
4. CP-SNARKs for Pedersen-like Commitments
   4.1 CP-SNARK for Pedersen Verification
   4.2 CP-SNARK for Linear Properties
5. Efficient CP-SNARKs for Polynomial Commitments
   5.1 Preliminaries and Building Blocks
   5.2 A CP-SNARK for Sum-Check
   5.3 A CP-SNARK for Hadamard Products
   5.4 A CP-SNARK for Self Permutation
   5.5 A CP-SNARK for Linear Properties of Committed Vector
   5.6 A CP-SNARK for Matrix Multiplication
6. LegoSNARK Applications and Evaluation
   6.1 Preliminaries and Building Blocks
   6.2 Arithmetic Circuit Satisfiability
   6.3 Parallel Computation on Joint Inputs
7. Experimental Evaluation
   7.1 Commit-and-Prove SNARKs
   7.2 Matrix Multiplication
   7.3 LegoAC1 for Arithmetic Circuits
   7.4 Parallel Checks on Joint Inputs
8. Conclusions

## 1. Introduction
Zero-knowledge proofs (ZKPs), introduced by Goldwasser, Micali, and Rackoff [GMR89], enable a prover to convince a verifier of a statement without revealing any additional information beyond its validity. This powerful feature—providing both integrity and privacy—has found numerous applications, including multiparty computation [GMW87], signature schemes [Sch91], public-key encryption [NY90], and, more recently, blockchain systems [BCG+14, AJ18].

Succinct zero-knowledge proofs, or zkSNARKs, have short and efficiently verifiable proofs [Mic00, GW11, BCCT12]. Succinctness is generally desirable but is especially critical in applications where verifiers cannot invest significant computational resources, such as for reasons of scalability, cost, or computational limitations.

### Motivation
Recent years have seen remarkable progress in the construction of zkSNARKs. Various lines of work (detailed in Section 1.2) have developed highly expressive schemes that support general computations in the class NP. The general-purpose nature of these schemes makes them very attractive to practitioners. However, this high expressivity comes at a cost in terms of performance. To achieve generality, these constructions abstract specific features of computation by assuming a single unifying representation (e.g., boolean or arithmetic circuits, state-machine transitions, RAM computations), which often introduces overhead.

First, general-purpose zkSNARKs may miss opportunities for significant optimizations by not exploiting the nuances of a computation. In contrast, specialized solutions can gain efficiency by leveraging specific structural properties. For example, recent works [CMT12, WTas+17] show how to optimize the GKR protocol [GKR08] for parallel computations. Another example is the specialized protocol for n × n matrix multiplication we propose in Section 5.6, where the prover runs in O(n²) time, compared to at least O(n³) time for any circuit-based approach.

Second, computations are often heterogeneous, consisting of several subroutines of different natures, such as both arithmetic and boolean components. If we design SNARKs assuming a single general representation, we will not be able to provide the best match for all different subroutines. Specialized protocols, while efficient for specific tasks, fail when faced with non-homogeneous computations. For instance, GKR-like protocols are highly efficient for parallel computations but are not succinct if the computation also includes heavily sequential subroutines (e.g., iterated block ciphers).

### A Modular Approach for zk-SNARKs
In this paper, we explore an alternative approach to designing zkSNARKs that leverages the advantages of specialized proof systems without inheriting their shortcomings when applied to heterogeneous computations. We propose to build zkSNARKs in a modular "bottom-up" fashion. Most current works use a "top-down" approach, building general-purpose schemes with a single representation shared across all subroutines. In contrast, we consider designing a "global" SNARK for a computation C by linking smaller, specialized SNARKs for the different subroutines composing C. We call these interlinked specialized SNARKs "proof gadgets," as they act as basic building blocks that can be composed and reused according to the situation.

The modular approach offers several benefits. First, it reduces complexity by focusing on smaller, more specific problems (e.g., log-depth computation, membership proof, range proof, algebraic group relation), allowing for more efficient solutions. This way, each subroutine of C can be handled by a different proof system, specialized and efficient for that type of computation. Second, modularity provides flexibility and cost reduction, as proof gadgets can be reused in multiple systems, and new solutions can be easily integrated or old ones replaced.

### Modularity from Commit-and-Prove SNARKs
To realize this modular approach, we rely on the well-known commit-and-prove (CP) methodology [Kil89, CLOS02]. With a CP scheme, one can prove statements of the form “cck(x) contains x such that R(x, w)” where cck(x) is a commitment. For example, to prove that ∃w : z = h(x; w), where h(x; w) := g(f(x; w); w), one can combine two CP systems Πf and Πg for f and g, respectively. The prover creates a commitment cck(y) of y, and then uses Πf (resp. Πg) to prove that “cck(y) contains y = f(x; w)” (resp. “contains y such that z = g(y; w)”).

### Challenges of the CP Modular Composition
The composition idea sketched above implicitly assumes that Πf and Πg work on the same commitment cck(y). To be composed, the gadgets must be compatible in terms of the commitments they use.