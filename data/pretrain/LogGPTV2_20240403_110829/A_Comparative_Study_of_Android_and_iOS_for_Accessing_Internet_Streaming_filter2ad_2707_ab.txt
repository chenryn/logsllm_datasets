256 MB
512 MB
256 MB
512 MB
Name
# of HTTP
Received
Connections Trafﬁc (Bytes)
iPod Touch
iPhone 3G
iPhone 3GS
iPhone 4S
261
301
105
67
83,410,351
82,616,828
63,713,281
51,625,429
Re-downloaded
(Bytes)
26,450,851
37,449,911
11,523,915
9,292,410
more details for us to explore the underlying reasons. Thus, in this section, we further
investigate these observations using the state-of-the-art Android and iOS devices.
For iOS, because we cannot access its source code, we mainly conduct client-side
experiments in a controlled environment to infer how it works by analyzing the captured
trafﬁc. For Android, in addition to the client-side experiments, we are able to get a better
idea of how it works by accessing the source code of its mediaplayer.
The client-side experiments are conducted in our lab with a dedicated 802.11 b/g ac-
cess point (AP). We use six different mobile devices running different mobile operating
systems and different versions of the mobile OS. Table 2 lists these devices. We use 4
different iOS devices and 2 different Android devices. Note that although Kindle Fire
uses a customized version of Android, it uses the same mediaplayer framework as other
Android devices including the Nexus One we use in our experiments.
In order to examine all the incoming and outgoing trafﬁc to/from our testing devices,
we set up Wireshark [8] running on a laptop computer to listen on the same channel as
the AP in promiscuous mode. Packets are captured in real-time and processed ofﬂine.
3.1 iOS and AppleCoreMedia
The mediaplayer in iOS is called AppleCoreMedia. When Pseudo Streaming is used to
access a video ﬁle, AppleCoreMedia will send out HTTP requests for the video ﬁle. On
the server’s side, it can be identiﬁed with User-Agent of AppleCoreMedia/1.0.0.
On iOS devices, a mobile user may access the video streaming service in various ways,
e.g., from the mobile browser of MobileSafari, or a third party streaming application
installed on the iOS device. AppleCoreMedia will be called when the mobile browser
or the application has to handle a streaming request. AppleCoreMedia usually speciﬁes
a range in its HTTP requests. For example, if it is requesting the entire video ﬁle, it will
send out an HTTP request with the range speciﬁed from 0 to ﬁlesize−1.
To study the behavior of AppleCoreMedia in downloading media content, we use our
testing devices to access a same 480-second YouTube video via their mobile browsers.
The ﬁle size of that video is 38,517,389 Bytes. In each experiment, we let an iOS device
watch the entire video (8 minutes) from the beginning to the end without any manual
activities. Figure 4 shows the accumulative trafﬁc pattern of 4 different iOS devices
accessing this video along time as well as the playback progress. Note the total trafﬁc
in this ﬁgure only includes the media content. That is, protocol headers are all excluded.
We ﬁnd that during the ﬁrst 30 seconds of each session, AppleCoreMedia downloads
with a high speed, and slows down afterwards. Clearly, this is the initial buffering phase
of a video streaming session, which is also called fast start [9]. More interestingly, we
notice that the amount of received trafﬁc by iOS devices is larger than the video ﬁle size
A Comparative Study of Android and iOS
109
(cid:39)(cid:82)(cid:90)(cid:81)(cid:79)(cid:82)(cid:68)(cid:71)
(cid:51)(cid:79)(cid:68)(cid:92)(cid:69)(cid:68)(cid:70)(cid:78)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:12)
(cid:86)
(cid:72)
(cid:87)
(cid:92)
(cid:37)
(cid:48)
(cid:11)
(cid:3)
(cid:70)
(cid:76)
(cid:73)
(cid:73)
(cid:68)
(cid:85)
(cid:55)
(cid:3)
(cid:79)
(cid:68)
(cid:87)
(cid:82)
(cid:55)
(cid:39)(cid:82)(cid:90)(cid:81)(cid:79)(cid:82)(cid:68)(cid:71)
(cid:51)(cid:79)(cid:68)(cid:92)(cid:69)(cid:68)(cid:70)(cid:78)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:12)
(cid:86)
(cid:72)
(cid:87)
(cid:92)
(cid:37)
(cid:48)
(cid:11)
(cid:3)
(cid:70)
(cid:76)
(cid:73)
(cid:73)
(cid:68)
(cid:85)
(cid:55)
(cid:3)
(cid:79)
(cid:68)
(cid:87)
(cid:82)
(cid:55)
(cid:39)(cid:82)(cid:90)(cid:81)(cid:79)(cid:82)(cid:68)(cid:71)
(cid:51)(cid:79)(cid:68)(cid:92)(cid:69)(cid:68)(cid:70)(cid:78)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:12)
(cid:86)
(cid:72)
(cid:87)
(cid:92)
(cid:37)
(cid:48)
(cid:11)
(cid:3)
(cid:70)
(cid:76)
(cid:73)
(cid:73)
(cid:68)
(cid:85)
(cid:55)
(cid:3)
(cid:79)
(cid:68)
(cid:87)
(cid:82)
(cid:55)
(cid:39)(cid:82)(cid:90)(cid:81)(cid:79)(cid:82)(cid:68)(cid:71)
(cid:51)(cid:79)(cid:68)(cid:92)(cid:69)(cid:68)(cid:70)(cid:78)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:12)
(cid:86)
(cid:72)
(cid:87)
(cid:92)
(cid:37)
(cid:48)
(cid:11)
(cid:3)
(cid:70)
(cid:76)
(cid:73)
(cid:73)
(cid:68)
(cid:85)
(cid:55)
(cid:3)
(cid:79)
(cid:68)
(cid:87)
(cid:82)
(cid:55)
(cid:19)
(cid:19)
(cid:20)
(cid:22)
(cid:21)
(cid:25)
(cid:55)(cid:76)(cid:80)(cid:72)(cid:3)(cid:11)(cid:80)(cid:76)(cid:81)(cid:88)(cid:87)(cid:72)(cid:86)(cid:12)
(cid:23)
(cid:24)
(cid:26)
(cid:19)
(cid:27)
(cid:19)
(cid:19)
(cid:20)
(cid:22)
(cid:21)
(cid:25)
(cid:55)(cid:76)(cid:80)(cid:72)(cid:3)(cid:11)(cid:80)(cid:76)(cid:81)(cid:88)(cid:87)(cid:72)(cid:86)(cid:12)
(cid:23)
(cid:24)
(cid:26)
(cid:19)
(cid:27)
(cid:19)
(cid:19)
(cid:20)
(cid:22)
(cid:21)
(cid:25)
(cid:55)(cid:76)(cid:80)(cid:72)(cid:3)(cid:11)(cid:80)(cid:76)(cid:81)(cid:88)(cid:87)(cid:72)(cid:86)(cid:12)
(cid:23)
(cid:24)
(cid:26)
(cid:19)
(cid:27)
(cid:19)
(cid:19)
(cid:20)
(cid:22)
(cid:21)
(cid:25)
(cid:55)(cid:76)(cid:80)(cid:72)(cid:3)(cid:11)(cid:80)(cid:76)(cid:81)(cid:88)(cid:87)(cid:72)(cid:86)(cid:12)
(cid:23)
(cid:24)
(cid:27)(cid:19)
(cid:26)(cid:19)
(cid:25)(cid:19)
(cid:24)(cid:19)
(cid:23)(cid:19)
(cid:22)(cid:19)
(cid:21)(cid:19)
(cid:20)(cid:19)
(cid:26)
(cid:19)
(cid:27)
(a) iPod Touch
(b) iPhone 3G
(c) iPhone 3GS
(d) iPhone 4S
Fig. 4. Trafﬁc Pattern of iOS Devices Accessing a YouTube Video
(36.7 MBytes). For iPod Touch and iPhone 3G, the total received trafﬁc amount is even
more than twice of the actual video ﬁle size.
Table 3 summarizes the amount of total trafﬁc received during these sessions by 4
iOS devices. Note that these sessions are normal sessions without early terminations or
any replays. Analyzing the corresponding packet-level workload we have captured, we
ﬁnd that multiple HTTP range requests are issued to download the streaming content.
That is, instead of using a standard HTTP request, iOS devices always issue multiple
range requests to download media content. This is consistent with what we have ob-
served from the server-side workload shown in Figure 2. It is noticeable that iPhone 3G
even issued more than 300 HTTP requests to download the video ﬁle. For devices with
an increased memory size, such as iPhone 3GS and iPhone 4S, the number of HTTP
requests is reduced to 105 and 67, respectively.
The above results show that the multiple HTTP range requests used by iOS are not
due to Vuclip, as the same phenomenon has been observed in other popular streaming
services as well. Besides YouTube, we have also tested against two other popular sites
Dailymotion and Veoh, we have found similar patterns.
In addition, we also ﬁnd in Table 3 that the received trafﬁc amount on these iOS
devices is signiﬁcantly larger than the actual ﬁle size. Recall that we have observed
different amounts of trafﬁc delivered to Android and iOS devices in the server-side log.
We are interested in whether such extra trafﬁc received on iOS devices is related to the
content requesting approach, i.e., the multiple HTTP range requests.
Inspecting the packet-level workload we have captured for these experiments, we
ﬁnd that while AppleCoreMedia always starts with an HTTP range request instead of
a standard HTTP request, it constantly terminates the HTTP connection spontaneously
before the full response to that range request is received. Subsequently, it will issue
another HTTP range request. Having carefully studied the workload, our conjecture is
that such behaviors are closely related to the available memory space in a mobile device.
Our packet level traces across all these experiments consistently show that AppleCore-
Media always resets (via TCP-RST) the active connection used for the HTTP request.
The most likely reason is due to the lack of the memory space for the playout buffer.
With a small amount of available memory, AppleCoreMedia has to frequently abort the
current connection because the playout buffer is going to overﬂow.
Besides highly frequent connection aborts (which also necessitates multiple HTTP
range requests after aborts), we also ﬁnd that AppleCoreMedia always re-downloads
the beginning part of the video after it has received the entire video ﬁle. Recall that
with Pseudo Streaming, the entire ﬁle is usually received before the user ﬁnishes the
playback. However, as shown by the last column in Table 3, a signiﬁcant amount of
110
Y. Liu et al.
trafﬁc has been transmitted afterwards for re-downloading the beginning part of the
video again. Such re-downloading is also found in our experiments with Vuclip, Daily-
motion, and Veoh. Intuitively, this seems to prepare for the potential re-play activities
of the user. With the beginning part in the buffer, the user would experience low start-
up delay. However, due to the insufﬁcient memory supply on the mobile devices, the
beginning part might have been evicted from the buffer after its ﬁrst-time playback in
order to make room for the to-be-played content. Such re-downloading behavior, likely
due to insufﬁcient memory size as well, apparently contributes to the redundant trafﬁc
we have observed in Figure 3.
For the same reason, for iOS devices with a larger memory size (such as iPhone 3GS
and iPhone 4S), the re-downloading trafﬁc amount is much smaller as shown in Table 3.
This indicates that with more available memory, AppleCoreMedia can get more buffer
space, and put a larger portion of the video ﬁle in its buffer.