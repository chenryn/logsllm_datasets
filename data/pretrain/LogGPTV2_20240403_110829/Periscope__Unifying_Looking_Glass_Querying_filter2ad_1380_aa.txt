title:Periscope: Unifying Looking Glass Querying
author:Vasileios Giotsas and
Amogh Dhamdhere and
Kimberly C. Claffy
Periscope: Unifying Looking Glass Querying
Vasileios Giotsas(B), Amogh Dhamdhere, and K.C. Claﬀy
CAIDA, UC San Diego, San Diego, USA
{vgiotsas,amogh,kc}@caida.org
Abstract. Looking glasses (LG) servers enhance our visibility into
Internet connectivity and performance by oﬀering a set of distributed
vantage points that allow both data plane and control plane mea-
surements. However, the lack of input and output standardization and
limitations in querying frequency have hindered the development of auto-
mated measurement tools that would allow systematic use of LGs. In
this paper we introduce Periscope, a publicly-accessible overlay that uni-
ﬁes LGs into a single platform and automates the discovery and use of
LG capabilities. The system architecture combines crowd-sourced and
cloud-hosted querying mechanisms to automate and scale the available
querying resources. Periscope can handle large bursts of requests, with
an intelligent controller coordinating multiple concurrent user queries
without violating the various LG querying rate limitations. As of Decem-
ber 2015 Periscope has automatically extracted 1,691 LG nodes in 297
Autonomous Systems. We show that Periscope signiﬁcantly extends our
view of Internet topology obtained through RIPE Atlas and CAIDA’s
Ark, while the combination of traceroute and BGP measurements allows
more sophisticated measurement studies.
1 Introduction
Measurement and monitoring tools are essential to many Internet research
and engineering tasks, ranging from topology discovery to detection of secu-
rity threats and network anomalies. However, the development of such tools
is challenged by the decentralized nature of Internet infrastructure. For years,
researchers have attributed measurement artifacts to the limited coverage of
available measurement vantage points [14,17], which has motivated revision of
Internet measurement practices. Large-scale distributed measurement projects
either crowd-source the hosting of traceroute vantage points [1,7,27,28], or lever-
age cooperation from academic networks [25]. Network operators deploy their
own monitoring infrastructure, including Looking Glass (LG) servers, which
enable remote execution of non-privileged diagnostic tools, such as traceroute,
ping or BGP commands, through a web interface. Although the primary pur-
pose of LGs is operational, i.e., to debug connectivity and performance issues,
LGs have also expanded researchers’ cartographic and monitoring capabili-
ties [15,19,20,23,29,30].
LGs have two characteristics that beneﬁt Internet research. First, LGs often
permit the execution of both traceroute and BGP queries, oﬀering data and
c(cid:2) Springer International Publishing Switzerland 2016
T. Karagiannis and X. Dimitropoulos (Eds.): PAM 2016, LNCS 9631, pp. 177–189, 2016.
DOI: 10.1007/978-3-319-30505-9 14
178
V. Giotsas et al.
control plane views from the same location. Second, in contrast to crowd-sourced
traceroute monitors that are deployed at end-hosts (e.g. home clients), LGs are
typically deployed near or at core and border routers. Despite these advantages,
the use of LGs has been sporadic due to design features that limit their use
for scientiﬁc studies that require systematic and repeatable measurement. First,
LGs do not form a uniﬁed measurement network of homogeneous probes, such
as the RIPE Atlas or Ark infrastructures. Each LG is independently owned
and operated; there is no centralized index of available LGs, nor standardized
querying or output formats. Furthermore, LG command sets change over time,
there is attrition of LG infrastructure, and because LGs are generally intended
for low-frequency (manual) querying, operators often conﬁgure query rate limits
to mitigate the risk of DoS attacks against them (or using them).
In this paper we introduce Periscope, a platform that uniﬁes the disparate
LG interfaces into a standardized publicly-accessible querying API that supports
on-demand measurements. The core of the Periscope architecture is a central
controller that coordinates queries from multiple users to prevent concurrent
requests to the same LG from violating rate limits conﬁgured by that LG. The
controller dispatches LG requests to crowd-sourced and cloud-hosted querying
instances, which scale as necessary to handle large bursts of queries. A parser
transforms the LG results into a set of standardized output formats (JSON
and iPlane), and aggregates them in a repository for future analysis. A daemon
checks periodically for changes in the HTML interfaces of the LGs, and auto-
matically extracts and updates the LG conﬁgurations. The Periscope API and
the repository of raw data are publicly accessible to authenticated users.1
This paper describes the Periscope architecture and how each Periscope
component tackles the challenges related to LG measurements. We compare
Periscope’s querying capabilities and coverage with those of two major mea-
surement platforms (RIPE Atlas and Ark). Finally, we demonstrate the utility
of having colocated BGP and traceroute vantage points with two case studies
involving the validation of IP-to-AS mapping, and the geolocation of border
router interfaces.
2 Architecture
We have four design goals to mitigate four key challenges related to using
deployed LGs for systematic measurement:
– There is no authoritative list of active LGs. Periscope must automatically
discover, extract and validate LG speciﬁcations from various sources.
– LGs are volatile, both in terms of availability and speciﬁcation. Periscope
must detect changes and automatically update LG speciﬁcations.
– There is no input/output standardization across LGs, so Periscope must trans-
late query requests to the format supported by each individual LG and the
output of individual LGs to a user-friendly format.
1 A user requests access through email describing the intended use and we issue a
unique security token which he/she uses to sign measurement requests.
Periscope: Unifying Looking Glass Querying
179
Fig. 1. End-to-end workﬂow to discover
and extract looking glass speciﬁcations
from web sources.
Fig. 2. The Periscope architecture,
which sits on top of but does not itself
include the LGs.
– LGs are intended for low-frequency querying and will block clients that exceed
the conﬁgured querying rate limitations. Periscope should support multiple
concurrent users without violating any LG limits.
2.1 Workﬂow of Periscope System
Figure 1 describes the Periscope workﬂow for integrating LGs into its querying
system, which is repeated every month to update the list of supported LGs.
The starting point of Periscope’s workﬂow is the discovery of active LG servers,
using public web sources that publish LG URLs, including PeeringDB [5] and
traceroute.org. The system can easily integrate other listings of LG servers as
they become available. Since these sources are non-authoritative, the published
URLs may be stale or unresponsive. A Web Crawler visits each link and ﬁlters
out pages that respond with HTTP errors.
To determine whether the collected URLs correspond to LGs, we attempt
to automatically detect whether the HTML source contains web forms of LG
interfaces. The automatic detection utilizes the fact that most LG deployments
are based on open-source projects that determine the structure of the expected
queries, the output format and the corresponding web interfaces [16]. We have
processed seven popular open source projects [2,3,6,10–13] and created a tem-
plate for each implementation, which describes the HTTP elements and the
180
V. Giotsas et al.
Table 1. Template for the input parameters of the Version6 LG [12].
Input name Input type Expected values Meaning
query
addr
router
protocol
radio
text
select
select
[bgp, trace, ping]
[sh ip bgp, traceroute, ping]
*
*
Query target
Router identiﬁer
[IPv4,IPv6]
IP version
HTML parameters that comprise the input and output interfaces. Table 1 shows
an example of such a template.
A Web Scraper extracts the  elements from the HTML code of active
LGs and compares the input ﬁelds with the corresponding ﬁelds of each tem-
plate to test for matches. A match occurs when each input ﬁeld in the form
is described in the template. It is not necessary for the extracted HTML form
to have all input ﬁelds in the template, because some LGs may support only a
subset of commands. For example, the template of Table 1 has three parameters
that must be implemented (query, addr, router) and one optional parameter
(protocol version) which when omitted defaults to IPv4.
When a form matches an LG template, Periscope generates a JSON conﬁg-
uration ﬁle that describes the interface of the LG, including the request HTTP
method, the input parameters and their permissible values, the mapping of input
combinations to network commands and the HTML elements that enclose the
reply. The JSON conﬁguration is used by the Query Parser to translate measure-
ment requests to the format supported by each LG. When a form does not match
with a template, the Web Scraper searches for LG-speciﬁc keywords (such as the
name of network commands), to determine if the form contains LG inputs. If such
keywords are found, we parse the form manually and update the LG templates as
necessary to enable the automatic processing of similar forms in the future.
The ﬁnal step of the workﬂow is to test the correctness of the auto-generated
LG conﬁgurations. A Health Checker uses the Query Parser to issue measurement
requests and process the replies. If the output is empty or if an HTTP error code
is returned, the Health Checker will signal the error and mark that LG for manual
inspection. The Health Checker runs these tests periodically to detect changes
in LG templates, input parameters, or the response HTTP status.
2.2 Components of Periscope Architecture
Figure 2 illustrates how components of Periscope’s architecture inter-operate to
satisfy measurement requests. Periscope exposes a RESTful API that can be
used to query the available LGs, request new measurements, and retrieve results.
Every request is logged in the Repository which works as a broker between the
API and the rest of the Periscope components.
An LG Client receives measurement requests submitted to the Repository
and translates them to LG queries. The LG Client executes requests through
Periscope: Unifying Looking Glass Querying
181
Selenium [9], a web browser automation suite2 that interacts with the LGs
through a headless (without screen) browser according to the JSON conﬁgu-
ration ﬁle produced at the end of the Periscope workﬂow.
If LGs did not impose query rate limits, Periscope could transmit all mea-
surement requests directly to LGs from a single LG client. But most LGs bound
the number of requests a given client IP can submit during a given time interval.
For example, the Telephone LG [11] software logs the time and IP address of
queries in a database, and checks subsequent queries against the last query from
the same IP address; if it is less than a conﬁgured timeout (e.g., 1 min), the
LG drops the query. If Periscope had only a single LG Client (or multiple LG
Clients behind the same public IP address), concurrent Periscope users would be
limited to single-user querying frequencies. Although Periscope aims to prevent
query rate violations, we also want to avoid very limited querying frequencies
that would make Periscope impractical. For Periscope to scale to multiple users
while being faithful to the per-user LG query rate, the system runs multiple LG
client instances, using one IP address per end user.
Our ﬁrst approach of assigning diﬀerent public IPs to LG clients is by crowd-
sourcing their hosting as User Agents in end-user machines. As of December
2015 we had crowd-sourced 5 Periscope LG Clients. Because the Periscope
client is software-based, we can extend coverage using cloud-hosted Virtual
Machines (VMs), where each VM instance has a public IP address from the
cloud provider’s address space. Periscope uses two cloud platforms: Google Com-
pute Cloud (GCC) and Amazon Web Services (AWS). Each VM Instance hosts
a single LG Client. The elasticity of cloud resources allows Periscope to start
VM instances only when needed to satisfy request volume, and terminate them
when not in use. Periscope needs as many LG Clients as the maximum number
of users that concurrently query a single LG. Periscope ﬁrst attempts to satisfy
the requests using the active crowd-sourced User Agents; if it needs more agents,
it launches VM instances.
A central Controller assigns measurement requests to LG Clients; it has a
global view of system resources and coordinates execution of LG queries so as to
stay within the LG query limits. The controller manages the number of cloud-
hosted instances, and every crowd-sourced instance sends a keep-alive message
every 5 min to inform the Controller that they can still accept measurements.
When Periscope receives a new measurement request, the Controller decides
when to dispatch it and which Client instance will execute it. The Controller’s
logic is based on two LG-speciﬁc variables that restrict the maximum number
of concurrent queries submitted to an LG3:
1. A timeout that expresses the minimum time interval between two consecutive
LG queries by the same user
2 Although most requests can be satisﬁed with simple HTTP requests, Selenium allows
easier handling of HTTP sessions and cookies.
3 We derived empirically conservative values for the timeout and number of slots for
each LG.
182
V. Giotsas et al.
Data: A set of measurement requests M for lg, and a set of active instances I
Result: Assignment of a client instance i ∈ I
(cid:2) ⊇ I for each m ∈ M
1 for m ∈ M do
*/
*/
*/
*/
/* Timestamp of next permitted user query
m.ts ← lastQuery(m.user, lg) + lgTimeout(lg)
/* Queue measurements in asceding m.ts order
mQueue.add(m)
2
3
4 end
5 while mQueue (cid:5)= ∅ do
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
measurement = mQueue.pop()
slots ← totalSlots(lg) - activeSlots(lg)
while (now()  now() + lgTimeout(lg) then
assignedInstance ← i
break
end
end
if assignedInstance is false then
assignedInstance ← newCloudInstance()
end
22 end
Algorithm 1. The Controller’s
measurement requests for an LG to the appropriate Client instances.
algorithm to
assign concurrent
2. A number of query slots that indicate the maximum number of queries that
Periscope will accept for an LG at any given moment.
Essentially, the timeout expresses a user-speciﬁc limit while the query slots
impose a user-wide limit. If an LG has no available query slots it cannot be
queried even if a user has not queried this LG for a period longer than the
timeout. Algorithm 1 presents the Controller’s decision process. For each query
request the Controller calculates its execution time based on the timestamp of
the last query from the same user toward the same LG, and the timeout of the
LG (line 3). If the query does not conform to either of the two rate limits, it
is queued inside the Controller (line 9) until the timeout expires and if at least
one slot becomes available. When a query exits the queue, the Controller will
choose an eligible Client instance to execute it. An instance is eligible if it has
not executed a query to the same LG for a period longer than the timeout (line
15). If no active Client instance is eligible to execute the query, the Controller
Periscope: Unifying Looking Glass Querying
183
Fig. 3. Geographical distribution of LG VPs.
Fig. 4. CDF of router-level
and city-level VPs per LG
will request a new cloud-hosted instance (line 21). The required number of active
Client instances will therefore depend only on the number of concurrent queries
to the same LG from diﬀerent users, and not on the total number of active users
or queried LGs.
3 Analysis
3.1 Coverage and Capabilities
As of December 2015 Periscope has extracted LGs for 297 Autonomous Systems.