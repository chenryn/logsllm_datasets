cada conjunto s as suas tarefas foram organizadas de forma a estabelecer os blocos
i
paralelos e sequenciais existentes.
Fig. 3. Blocos paralelos e sequenciais definidos para os conjunto si criados a partir das funções
de escalonamento
Estruturas condicionais não podem ocorrer para os conjuntos s porque o não-
i
determinismo já foi capturado pelas funções de escalonamento.
A identificação dos blocos paralelos e sequenciais pode requerer o uso de activida-
des null (também conhecidas por actividades dummy). Uma actividade null não tem
uma realização. Estas actividades podem ser utilizadas para modificar o workflow de
forma a obter propriedades estruturais (e.g. bem estruturado) ou para possibilitar a
modelação de procedimentos específicos de um processo de negócio.
Os dois primeiros passos podem ser automatizados, enquanto que o terceiro passo
requer intervenção humana. Não obstante, acreditamos que o último passo pode ser
parcialmente automatizado. Uma possível aproximação pode ser a análise das depen-
dências dos dados e da informação entre tarefas. A dependência de dados existe entre
duas tarefas se os dados de entrada de uma tarefa dependem da saída dos dados de
outra tarefa. A dependência de informação existe entre duas tarefas se o conteúdo ou
apresentação de uma tarefa segue o conteúdo lógico de outra tarefa. Por exemplo,
vamos considerar que uma sequência de tarefas é utilizada para mostrar um contrato
de negócio ao utilizador. Tendo sido identificado que diversas secções do documento
necessitavam de ser aceites individualmente, foi decidido fragmentar o documento em
partes. Cada parte foi associada a uma tarefa requerendo intervenção humana. Neste
caso, existe uma dependência de informação entre as tarefas, desde que as tarefas
porque necessitem de ser ordenadas de maneira a que o contrato seja lido em sequên-
cia lógica seguindo o documento original.
3.3.2 Identificar Estruturas Condicionais
No ponto anterior já foram identificados os blocos paralelos e os blocos sequenciais.
O passo seguinte é identificar as blocos condicionais (formados por xor-splits) com
base nos conjuntos s. O objectivo é identificar os blocos condicionais de um work-
i
flow e determinar como controlam e organizam os conjuntos anteriormente identifica-
dos (i.e. blocos paralelos e sequenciais).
Para identificar os blocos condicionais utilizamos o algoritmo de Identificação de
Bloco Condicional (CBI – Conditional Block Identification) (Cardoso 2005). O algo-
ritmo CBI pode ser visto como uma metodologia iterativs, com uma envolvente
humana, para estruturar conjuntos s de um workflow. Este algoritmo recorre a um
i
conjunto de assumpções e regras que são utilizados para estruturar os conjuntos de
escalonamento num workflow. Depois de aplicar o algoritmo CBI, os conjuntos s
i
apresentam dependências entre si representadas por transições como é mostrado na
Figura 4.
Fig. 4. Workflow com transições automaticamente criadas pelo algoritmo CBI
Contudo, vários elementos do workflow estão em falta. É aparente no exemplo que
o workflow não inclui nenhuma junção dos xor-splits e o workfow tem vários pontos
de saída. Ambos os problemas podem ser resolvidos pelo acerto dos xor-splits com
xor-joins. Aalst (Aalst 2000) indicou a importância do equilíbrio do xor/and-splits e
xor/and-joins para obter o que é chamado de “bom” workflow. Por exemplo, dois
fluxos condicionais criados por um xor-split, não devem ser sincronizados por um
and-join, mas por um xor-join. Equilibrar xor/and-splits pode requerer o uso de acti-
vidades null or dummy.
3.4 Limpeza, Análise e Implementação do Workflow
Na última fase, são excluídas as actividades null (dummy) e, caso necessário, o work-
flow poderá ser reestruturado ou modificado por motivos de clareza. Uma vez finali-
zadas as fases de limpeza e análise, o processo de desenho está pronto a ser imple-
mentado. O método WIDE proposto em (Casati, Fugini et al. 2002) poderá ser utiliza-
do para esse fim. O método foca em aspectos mais técnicos e inclui a selecção do
sistema de gestão de workflows alvo e o mapeamento dos workflows descrevendo um
processo de negócio de alto nível na implementação do workflow. A Figura 5 ilustra a
integração da metodologia Poseidon com a metodologia WISE.
Fig. 5. Integração da metodologia Poseidon com a metodologia WISE
Na fase de desenho do workflow, a metodologia WIDE fornece conceitos que per-
mitem implementar o workflow resultante em diferentes sistemas de gestão de work-
flow, tendo em conta as diferentes características dos sistemas. No fim da fase de
desenho o seguinte resultado é obtido: um esquema do workflow, a especificação das
excepções e transacções, e especificação das interacções com aplicações externas. A
fase de desenho do workflow da metodologia WIDE pode ser substituída ou comple-
mentada pela metodologia Poseidon. A metodologia Poseidon é mais poderosa pois
permite a o desenho semi-automático dos esquemas de workflows.
4 Implementação
Foram consideradas várias linguagens de programação durante a fase de análise da
aplicação Poseidon. O MS Visual Basic, linguagem C e Java. Mas desde cedo tornou-
se evidente que a implementação multiplataforma e a portabilidade do código eram
aspectos que se revestiam de grande importância tendo influenciado a nossa escolha
pela selecção da linguagem Java. Para o desenho gráfico dos workflows consideramos
inicialmente usar os componentes Swing que a linguagem Java oferece ou usar uma
ferramenta direccionada para a implementação rápida e prática de aplicações que
manipulem grafos. A implementação da aplicação com o uso dos componentes Swing
iria revelar-se trabalhosa e demorada, uma vez que todas funcionalidades associadas
com o desenho de workflows teriam de ser programadas. Tendo em conta que os
requisitos da aplicação Poseidon eram relativamente standards do ponto de vista da
interface gráfica, optamos por analisar as ferramentas JGraph (www.jgraph.com) e
JHotDraw (http://www.jhotdraw.org/). Finalmente, seleccionamos o JHotDraw pois a
sua arquitectura foi desenvolvida com base num conjunto conhecido de patterns que
forneciam soluções arquitectónicas para as funcionalidade que necessitávamos para a
aplicação Poseidon.
4 Conclusões
Apesar da investigação realizada no sentido de evoluir os sistemas de gestão de work-
flow, o trabalho realizado sobre ferramentas, metodologias e métodos para suportar a
fase de desenho dos workflows é praticamente inexistente.
O desenvolvimento de métodos e ferramentas adequadas é de grande importância
para garantir que os workflows sejam construídos de acordo com as especificações
iniciais. Infelizmente, é reconhecido que apesar da difusão dos sistemas de gestão de
workflow, as ferramentas para suportar o desenho de workflows continuam a ser uma
lacuna. Neste artigo, é descrito uma aplicação, chamada Poseidon, para assistir os
analistas de processos durante as entrevistas com o pessoal administrativo, gestores e
empregados em geral, de forma a possibilitar o desenho semi-automático de work-
flows.
A aplicação Poseidon apresentada foi utilizada com sucesso para desenhar work-
flows administrativos de média dimensão numa empresa do sector aeronáutico. Existe
a convicção de que a aplicação é igualmente apropriada para desenhar workflows de
grande escala, bem como o facto da aplicação representar um passo em frente na
modelação de processos de negócio.
Referências
Aalst, W. M. P. v. d. (1998). "The Application of Petri Nets to Workflow Management." The
Journal of Circuits, Systems and Computers 8(1): 21-66.
Aalst, W. M. P. v. d. (2000). Workflow Verification: Finding Control-Flow Errors Using Petri-
Net-Based Techniques. Business Process Management: Models, Techniques, and
Empirical Studies. W. M. P. v. d. Aalst, J. Desel and A. Oberweis. Berlin, Springer-
Verlag. 1806: 161-183.
Aalst, W. M. P. v. d., A. P. Barros, et al. (2000). Advanced Workflow Patterns. Seventh IFCIS
International Conference on Cooperative Information Systems, September 2000.Vol:
pp. 18-29,
Aalst, W. M. P. v. d. and A. H. M. t. Hofstede (2003). YAWL: Yet Another Workflow Lan-
guage (Revised Version). Brisbane, Queensland University of Technology2003.
ARIS (2005). ARIS Design Platform. http://www.ids-scheer.com/.
BPML (2004). Business Process Modeling Language. 2004.
BPMN (2005). Business Process Modeling Notation - http://www.bpmn.org/.
Cardoso, J. (2005). "Poseidon: A framework to assist Web process design based on business
cases." International Journal of Cooperative Information Systems (IJCIS)(accepted
for publication).
Cardoso, J., J. Miller, et al. (2004). "Modeling Quality of Service for workflows and web ser-
vice processes." Web Semantics: Science, Services and Agents on the World Wide
Web Journal 1(3): 281-308.
Cardoso, J. and A. Sheth (2003). "Semantic e-Workflow Composition." Journal of Intelligent
Information Systems (JIIS). 21(3): 191-225.
Casati, F., M. Fugini, et al. (2002). "WIRES: a Methodology for Designing Workflow Applica-
tions." Requirements Engineering Journal 7(2): 73-106.
COSA (2005). COSA Workflow - http://www.cosa-bpm.com/.
Karnaugh, M. (1953). "The Map Method for Synthesis of Combinational Logic Circuits."
Transaction IEEE 72(9): 593-599.
Kochut, K. J. (1999). METEOR Model version 3. Athens, GA, Large Scale Distributed Infor-
mation Systems Lab, Department of Computer Science, University of Georgia.
McCluskey, E. J. (1956). "Minimization of Boolean functions." Bell System Technical Journal
35(5): 1417-1444.
McCready, S. (1992). There is more than one kind of workflow software. Computerworld.
November 2: 86-90.
Miller, J., A. Sheth, et al. (1996). "CORBA-based Run Time Architectures for Workflow Man-
agement Systems." Journal of Database Management, Special Issue on Multidatases
7(1): 16-27.
Sheth, A., D. Georgakopoulos, et al. (1996). Report from the NSF Workshop on Workflow and
Process Automation in Information Systems. Athens, GA, Deptartment of Computer
Science, University of Georgia.
Sheth, A. P., W. v. d. Aalst, et al. (1999). "Processes Driving the Networked Economy." IEEE
Concurrency 7(3): 18-31.
TIBCO (2002). TIBCO InConcert, TIBCO.
WS-BEPL (2005). Business Process Execution Language for Web Services, http://www-
128.ibm.com/developerworks/library/specification/ws-bpel/.