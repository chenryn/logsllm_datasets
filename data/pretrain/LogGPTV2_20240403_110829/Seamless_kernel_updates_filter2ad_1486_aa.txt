# Seamless Kernel Updates

## Authors
Maxim Siniavine and Ashvin Goel

## Abstract
Kernel patches are frequently released to fix security vulnerabilities and bugs. However, users and system administrators often delay installing these updates because they require a system reboot, which disrupts service and causes the loss of application state. The longer an out-of-date system remains operational, the higher the likelihood of it being exploited.

Approaches such as dynamic patching and hot swapping have been proposed for updating the kernel. However, these methods either limit the types of updates that are supported or require significant programming effort to manage.

We have designed a system that checkpoints application-visible state, updates the kernel, and restores the application state. By checkpointing high-level state, our system no longer depends on the precise implementation of a patch and can apply all backward-compatible patches. Our results show that updates to major kernel releases can be applied with minimal changes.

## Acknowledgements
I would like to express sincere gratitude to my advisor, Prof. Ashvin Goel, for his patience and invaluable advice. His guidance was instrumental throughout the research and writing of this thesis.

I also extend my thanks to the committee members: Professor Angela Brown, Professor Michael Stumm, and Professor Raviraj Adve, for their insightful comments and challenging questions. I thank my fellow graduate students, Vladan Djeric, Zoe Chow, Isaac Good, and Stan Kvasov, for providing an intellectually stimulating and supportive environment. Finally, I would like to thank my family for their encouragement and support.

## Table of Contents
1. Introduction
2. Related Work
3. Approach
   3.1 Implementation Overview
   3.2 Quiescence
   3.3 Restarting System Calls
   3.4 Checkpoint Format and Code
4. Implementation
   4.1 Implementation of Checkpoint and Restore
      4.1.1 Threads
      4.1.2 Address Space
      4.1.3 Files
      4.1.4 Network Sockets
         4.1.4.1 UDP Sockets
         4.1.4.2 TCP Sockets
      4.1.5 Pipes
      4.1.6 Unix Sockets
      4.1.7 Terminals and Keyboard
      4.1.8 Framebuffer
      4.1.9 Mouse
   4.2 System Call Interface
   4.3 Limitations
5. Evaluation
   5.1 Code Analysis
   5.2 Experience with Updating Kernels
   5.3 Performance
      5.3.1 Application Benchmarks
         5.3.1.1 Quake
         5.3.1.2 MySQL
         5.3.1.3 Memcached
      5.3.2 Microbenchmarks
6. Conclusions

## List of Tables
- Table 3.1: Analysis of `vm_area_struct`
- Table 5.1: Kernel Structures and Checkpoint Format
- Table 5.2: New or Modified Lines of Code
- Table 5.3: Summary of Updates Needed for Checkpoint Code
- Table 5.4: Per-Application Checkpoint Time and Size
- Table 5.5: Kernel Restart Time

## List of Figures
- Figure 3.1: Timeline for Regular and Seamless Kernel Update
- Figure 5.1: Quake Reboot vs. Update
- Figure 5.2: Mysql/sysbench Update
- Figure 5.3: Memcached Results After Reboot vs. Update
- Figure 5.4: Mmap Checkpoint-Restore Time

## Chapter 1: Introduction
Operating system maintainers regularly release kernel patches to fix security vulnerabilities and bugs and to add features. However, users and system administrators often delay installing these updates because they require a system reboot, which disrupts service and causes the loss of application state. For example, updating the operating system for a game server requires all client users to stop playing, wait for the server to come back up, log in again, and generally start from the beginning, which is particularly annoying for shooter and other real-time games.

Today, operating systems are updated infrequently due to the need for careful management. However, the longer an out-of-date system remains operational, the higher the risk of triggering a bug or being exploited, as most exploits target existing vulnerabilities. Additionally, users cannot benefit from new features, such as performance optimizations, available in kernel updates.

Recognizing these issues, application programmers are increasingly designing programs that can be updated without significant disruption. For instance, web applications can be updated without user awareness, and many large applications save and restore their state during updates, reducing disruption. Operating system kernels, however, remain a major component that requires significant time for updates and loses state after an update.

Existing kernel update systems work at varying granularities. Dynamic patching performs updates at the function level, and hot swapping at the object or module level. These techniques require significant programmer effort to implement patch, object, or module-specific state transfer functions that synchronize the state of an updated component with an existing one. For example, while dynamic patching can be applied relatively easily to patches that only change code, carefully crafted state transfer functions are needed for patching updated data structures. Similarly, object and module granularity update systems require component-specific transfer functions for the updated stateful components and must handle changes to component interfaces.

These techniques do not handle cross-cutting changes due to major restructuring of code that occurs across major kernel revisions. For example, the Linux kernel is updated with five patches every hour, and developers release a major kernel release every 2-3 months. Each of these releases often consists of over a million lines of modified or new code. Requiring programmers to write state transfer functions for each patch or module is impractical, especially given the frequency of kernel patches and the scale of major revisions.

Our goal is to reliably install major kernel updates with minimal programmer effort and without requiring user intervention or any changes to applications. The main insight is that applying updates at a coarser granularity reduces the required programming effort. At a higher level of abstraction, implementation details are hidden, reducing the need to write state transfer functions for each patch. For example, if a transfer function exists for a stateful module, a patch that changes internal module state will not require an additional transfer function because this state is not exposed, making the patch easier to apply.

Taking this idea to the limit, we have designed a system for the Linux kernel that checkpoints application-visible state, reboots and updates the entire kernel, and restores the application state. The checkpointed state includes information exposed by the kernel to applications via system calls, such as memory layout and open files, and via the network, such as network protocol state. Our update system requires the least amount of additional programmer effort for installing a patch because it hides most kernel implementation details, including interfaces between kernel components. Furthermore, the kernel and applications are strongly isolated from each other by memory management hardware and communicate by passing messages (i.e., system calls). This eliminates the need to detect and update references from old to new data structures or determine when the update process can terminate, which poses challenges in dynamic patching systems. Another significant benefit is that our system can handle all backward-compatible patches because they do not affect application-visible state. Kernel patches generally provide such compatibility to minimize disruption. The main drawback of rebooting the kernel is that it is human-perceptible, but we believe that the primary impediment to applying updates today is the loss of application state rather than brief system unavailability.

Designing a reliable and practical update system raises several challenges. Ensuring that the system will restore applications reliably requires taking a consistent checkpoint. When kernel data structures are inconsistent, e.g., when a system call is in progress, a consistent checkpoint cannot be taken. Waiting for system calls to finish is unreasonable since many system calls can block indefinitely. Interrupting system calls is another solution, but many applications are not designed to handle interrupted calls. Unlike dynamic patching and hot swapping methods, our solution guarantees quiescence, allowing consistent checkpoints to be taken for all updates. For system calls, we start with the POSIX specification for restarting system calls when a signal occurs and provide a method for resuming system calls transparently to applications.

A practical system should require minimal programmer effort for applying kernel updates. To achieve this, the checkpoint format and the checkpoint/restore procedures must be as independent of the kernel implementation as possible. We checkpoint data in the same format as exposed by the system call API and the network protocols. Both are standardized, so our checkpoint format is independent of the kernel version and evolves slowly over time. An additional benefit of this approach is that we can use existing kernel functionality to convert the data to and from the kernel to the checkpoint, as this functionality is already needed to perform these conversions during system calls. When the kernel is updated, the updated functions will perform the conversion correctly. To minimize changes to the checkpoint procedures, we use kernel API functions as far as possible. These include system call functions and functions exported to kernel modules, both of which evolve more slowly than internal kernel functions.

This work makes three contributions:
1. We design a reliable and practical kernel update system.
2. We ensure quiescence, allowing consistent checkpoints to be taken for all updates.
3. We minimize programmer effort by using a checkpoint format and procedures that are independent of the kernel implementation.