288.2
IR Size
7.61 MB
13.7 MB
12.8 MB
116 KB
12.9 MB
36.8 KB
2.74 MB
1.42 MB
693 KB
3.46 MB
5.46MB
Traversing Time (seconds)
574
0.1
358
26
327
0.3
667
445
113
426
293.6
Table 3. Evaluation Result on Efﬁciency
Name
GDI32.dll
comctl32.dll
QEMU
Xine
Mplayer
MPD
GOOM
faad2
Hamstedb
Average
6 Related Work
Integer Misuse Detection and Protection. To prevent
integer based vulnerabilities, several techniques like com-
piler extensions and safe C++ integer classes have been pro-
posed. With -ftrapv option, the GCC compiler will insert
additional calls (e.g., _addvsi3) before signed addition op-
erations to catch overﬂow errors. Similarly, RICH [32] in-
serts run-time checks with low overhead according to for-
mal semantics for safe C integer operations. It is inevitable
for such runtime check techniques to generate false positives
because of benign integer overﬂows. Using other safe C++
class (such as SafeInt, IntSafe) or arbitrary precision arith-
metic packages (such as GMP [9], CLN [3]) could relax in-
teger security problems, however, the performance overhead
is still non-trivial.
Using taint analysis to detect integer misuse vulnera-
bilities in C programs has proven to be highly effective
[29, 37, 49]. For example, Ebrima N. Ceesay et al.
[37]
implemented a static analysis tool on top of Cqual [41] to
track the untrusted data. The tool in [37] uses a dataﬂow-
insensitive analysis and generates an alarm when an un-
trusted integer variable is used to access memory.
Ashcraft and Engler [29] presented a range checker to
track whether an untrusted value is bounds checked before
the value is used in trusting sinks. Because range checker
only cares whether the untrusted value is bounds checked,
untrusted data after bounds checking are considered safe
data, which may miss subtle integer overﬂow bugs.
Sarkar et al. [49] proposed a constraint graph to describe
sanitization checks. The nodes in the constraint graph repre-
sent the integer expressions, and the edges represent ordering
relationships between the integer expressions. For an expres-
sion used in memory allocation, its sub-expressions are iter-
atively walked. If any sub-expression is unveriﬁed, it reports
an alarm [49].
UQBTng [53] is a tool to automatically ﬁnd integer over-
ﬂows in Win32 binaries. UQBTng ﬁrst makes use of UQBT
[21] to translate binaries into C code; then UQBTng inserts
assert statements before the calls to memory allocation
functions; ﬁnally, UQBTng uses CBMC [39], a Bounded
Model Checker, to verify the program property. UQBTng
completely depends on the ability of the translator. However,
the automatic decompilation of binary ﬁles to equivalent C
code is still quite challenging. Unlike UQBTng, IntScope
simulates program execution according to the semantics of
low-level instructions.
Binary Analysis. Vine [22] is a static analysis compo-
nent in the BitBlaze [2] project. Vine can accurately trans-
late each x86 instruction into a RISC-like intermediate repre-
sentation(IR) and it implements a dataﬂow and control ﬂow
analysis on that IR. We believe our techniques for detecting
integer overﬂow can be implemented on top of Vine as well.
CodeSurfer/x86 [48, 47, 31, 30] is a binary analysis plat-
form which makes use of both IDA Pro and the CodeSurfer
system [4], a toolkit for building program analysis and in-
spection tools. CodeSurfer/x86 uses the Value-Set Analysis
(VSA) algorithm [30] to recover variable-like entities in bi-
naries, and translates x86 binary code into an IR which can
be accepted by the CodeSurfer system.
Chevarista [1] is a project for automated vulnerability
analysis on SPARC binary code. Chevarista demonstrates
how to translate binary code into SSA form and model vari-
able bounds by interval analysis to detect buffer overﬂows
or integer overﬂows. Chevarista also mentions techniques to
check race conditions based on model checking theory.
Symbolic Execution. Symbolic execution is widely used
in many projects, such as EXE[36], CUTE[50], DART[43],
SAGE [44], BitScope [33], and Archer [54]. Archer, EXE,
CUTE and DART insert a symbolic execution engine into
program source code and use a mixed execution to gener-
ate test inputs or ﬁnd potential bugs on feasible paths. Un-
like DART and CUTE, SAGE ﬁrst runs the target program
and collects a real trace. Then it virtually re-executes the
recorded trace to collect input-related constraints and gener-
ates new inputs. BitScope implements a mixed execution to
analyze malicious binaries.
7 Conclusion
In this paper, we have presented the use of symbolic ex-
ecution to automatically detect integer overﬂow vulnerabili-
ties in x86 binaries with the goal of identifying the vulner-
abilities before an attacker does. Our approach simulates
program execution, tracks the propagation of taint data, and
checks whether a tainted symbolic expression used in a sink
can overﬂow under path constraints. We have implemented
our approach in a system called IntScope and applied it to an-
alyze a number of real-world binaries. Experimental results
show that our approach is highly effective and practical. We
found more than 20 zero-day integer overﬂow vulnerabilities
in several popular software packages, including QEMU, Xen
and Xine.
8 Acknowledgements
We are grateful to our shepherd Michael Locasto, and the
anonymous reviewers for their hard work, insightful com-
ments and suggestions. We also thank Ryan Riley, and Jian-
wei Zhuge for their feedback in preparing this paper. This
research was supported in part by the National High Tech-
nology Research and Development Program of China (No.
2006AA01Z402 and No. 2006AA01Z410) and a National
Development and Reform Commission Project of China.
References
[1] Automated
in machine
http://www.phrack.com/issues.html?issue=64&id=8.
vulnerability
auditing
code.
[2] BitBlaze: The BitBlaze Binary Analysis Platform Project.
http://bitblaze.cs.berkeley.edu/index.html.
[3] CLN: Class Library for Numbers. http://www.ginac.de/CLN/.
[4] CodeSurfer:
Automated Source-code Analysis Tool.
http://www.grammatech.com/products/codesurfer/.
[5] Cve:
Vulnerability
type
distributions.
http://cwe.mitre.org/documents/vuln-trends/index.html.
[6] CXimage:
Image Processing and Conversion Library.
http://www.xdp.it/cximage.htm.
[7] FAAD2:
A MPEG-4 and MPEG-2 AAC Decoder.
http://www.audiocoding.com/faad2.html.
Computer
Algebra
Aystem.
[8] GiNaC:
Free
http://www.ginac.de/.
A
[9] GMP: GNU Multiple Precision Arithmetic Library.
[10] GOOM: Visual Effects Generator.
http://www.ios-
http://gmplib.org/.
software.com/.
http://hamsterdb.com/.
[11] Hamsterdb:
A Lightweight
Embedded Database.
[12] Ida pro. http://www.hex-rays.com/idapro/.
[13] Malware attack exploiting ﬂash zero day vulnerabil-
http://ddanchev.blogspot.com/2008/05/malware-attack-
ity.
exploiting-ﬂash-zero.html.
[14] MPD:Music Player Daemon. http://www.musicpd.org/.
[15] MPlayer: The Movie Player. http://www.mplayerhq.hu/.
[16] National vulnerability database. http://nvd.nist.gov/.
[17] Qcow2:
QCOW2
Image
The
www.gnome.org/ markmc/qcow-image-format.html.
Format.
Source
Processor
Emulator.
[18] QEMU:
An
Open
http://www.qemu.org/.
Buffer
[19] QEMU
Overﬂow
Vulnerability.
http://www.frsirt.com/english/advisories/2008/2919.
[20] The Xen Hypervisor. http://www.xen.org/.
[21] UQBT: A Resourceable and Retargetable Binary Translator.
http://www.itee.uq.edu.au/ cristina/uqbt.html.
Analysis
BitBlaze
Static
[22] Vine:
http://bitblaze.cs.berkeley.edu/vine.html.
Component.
[23] VLC: Media
Player
and
Streaming
Server.
http://www.videolan.org/vlc/.
[24] Windows Metaﬁle AttemptWrite Heap Overﬂow.
http://research.eeye.com/html/advisories/published/
AD20070814b.html.
[25] Xine: A Free Video Player. http://xinehq.de/.
[26] Zero
day
viewfoldericon
http://research.eeye.com/html/alerts/AL20061002.html.
setslice
exploit
alert:
Web-
vulnerability.
[27] Zero
day
exploit
in
pdf with
adobe
reader.
http://it.slashdot.org/article.pl?sid=07/09/22/1040225.
[28] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman. Compilers:
Princiles, Techniques, and Tools (Second Edition). Addison-
Wesley, 2006.
[29] K. Ashcraft and D. Engler. Using programmer-written com-
In Proceedings of
piler extensions to catch security holes.
the 2002 IEEE Symposium on Security and Privacy, Oakland,
California, USA, May, 2002.
[45] D. Gopan and T. Reps. Low-level library analysis and sum-
In 19th International Conference on Computer
marization.
Aided Veriﬁcation (CAV’07), Berlin, Germany, 2007.
[46] Z. Lin, X. Zhang, and D. Xu. Convicting exploitable soft-
ware vulnerabilities: An efﬁcient input provenance based ap-
proach. In Proceedings of the 38th Annual IEEE/IFIP Inter-
national Conference on Dependable Systems and Networks
(DSN’08), Anchorage, Alaska, USA, June 2008.
[47] T. Reps, G. Balakrishnan, and J. Lim.
Intermediate-
representation recovery from low-level code. In Proceedings
of the 2006 ACM SIGPLAN Workshop on Partial Evaluation
and Semantics-based Program Manipulation, Charleston,
South Carolina, USA, 2006.
[48] T. Reps, G. Balakrishnan, J. Lim, and T. Teitelbaum. A next-
generation platform for analyzing executables. In The Third
Asian Symposium on Programming Languages and Systems,
Tsukuba, Japan, 2005.
[49] D. Sarkar, M. Jagannathan, J. Thiagarajan, and R. Venkat-
apathy. Flow-insensitive static analysis for detecting integer
anomalies in programs. In Proceedings of the 25th conference
on IASTED International Multi-Conference, pages 334–340,
Anaheim, CA, USA, 2007. ACTA Press.
[50] K. Sen, D. Marinov, and G. Agha. Cute: a concolic unit
In Proceedings of the 10th European
testing engine for c.
software engineering conference held jointly with 13th ACM
SIGSOFT international symposium on Foundations of soft-
ware engineering, pages 263–272, 2005.
[51] T. Wei, J. Mao, W. Zou, and Y. Chen. A new algorithm
for identifying loops in decompilation. In 14th International
Static Analysis Symposium (SAS’07), volume 4634 of Lecture
Notes in Computer Science, pages 170–183. Springer, 2007.
[52] T. Wei, J. Mao, W. Zou, and Y. Chen. Structuring 2-way
branches in binary executables. In 31st Annual International
Computer Software and Applications Conference (COMP-
SAC’07), 2007.
[53] R. Wojtczuk. Uqbtng: a tool capable of automatically ﬁnding
integer overﬂows in win32 binaries. In 22nd Chaos Commu-
nication Congress, 2005.
[54] Y. Xie, A. Chou, and D. Engler. Archer: using symbolic,
path-sensitive analysis to detect memory access errors. SIG-
SOFT Softw. Eng. Notes, 28(5):327–336, 2003.
[30] G. Balakrishnan and T. Reps. Analyzing memory accesses
in x86 executables. In Proceedings of the 13th International
Conference on Compiler Construction, pages 5–23, 2004.
[31] G. Balakrishnan and T. Reps. Divine: Discovering variables
in executables. In Proceedings of Internation Conf. on Veriﬁ-
cation Model Checking and Abstract Interpretation (VMCAI),
2007.
[32] D. Brumley, T. cker Chiueh, R. Johnson, H. Lin, and D. Song.
Rich: Automatically protecting against integer-based vulner-
abilities. In Proceedings of the 14th Annual Network and Dis-
tributed System Security Symposium (NDSS’07), 2007.
[33] D. Brumley, C. Hartwig, M. G. Kang, Z. Liang, J. Newsome,
P. Poosankam, D. Song, and H. Yin. Bitscope: Automatically
dissecting malicious binaries, 2007. Technical Report CMU-
CS-07-133, Carnegie Mellon University.
[34] D. Brumley, P. Poosankam, D. Song, and J. Zheng. Automatic
patch-based exploit generation is possible: Techniques and
In Proceedings of the 2008 IEEE Symposium
implications.
on Security and Privacy, May, 2008.
[35] C. Cadar, D. Dunbar, and D. Engler. Klee: Unassisted and
automatic generation of high-coverage tests for complex sys-
In USENIX Symposium on Operating Sys-
tems programs.
tems Design and Implementation (OSDI’08), San Diego, CA,
2008.
[36] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R.
Engler. Exe: automatically generating inputs of death.
In
Proceedings of the 13th ACM conference on Computer and
communications security (CCS’06), pages 322–335, 2006.
[37] E. Ceesay, J. Zhou, M. Gertz, K. Levitt, and M. Bishop. Us-
ing type qualiﬁers to analyze untrusted integers and detecting
security ﬂaws in c programs. In Detection of Intrusions and
Malware & Vulnerability Assessment, 2006.
[38] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-
In Proceedings of
control-data attacks are realistic threats.
the 14th conference on USENIX Security Symposium, pages
12–12, 2005.
[39] E. Clarke, D. Kroening, and F. Lerda. A tool for checking
ANSI-C programs. In Tools and Algorithms for the Construc-
tion and Analysis of Systems (TACAS), volume 2988 of Lec-
ture Notes in Computer Science, pages 168–176. Springer,
2004.
[40] M. V. Emmerik and T. Waddington. Using a decompiler for
real-world source recovery. In Proceedings of the 11th Work-
ing Conference on Reverse Engineering, pages 27–36, 2004.
[41] J. S. Foster, T. Terauchi, and A. Aiken. Flow-sensitive type
qualiﬁers. In Proceedings of the ACM SIGPLAN 2002 Con-
ference on Programming Language Design and Implementa-
tion (PLDI’02), pages 1–12, Berlin, Germany, 2002.
[42] V. Ganesh and D. L. Dill. A decision procedure for bit-vectors
and arrays. In Computer Aided Veriﬁcation (CAV ’07), Berlin,
Germany, July 2007. Springer-Verlag.
[43] P. Godefroid, N. Klarlund, and K. Sen. Dart: directed au-
In Proceedings of the 2005 ACM
tomated random testing.
SIGPLAN conference on Programming language design and
implementation (PLDI’05), pages 213–223, 2005.
[44] P. Godefroid, M. Levin, and D. Molnar. Automated white-
box fuzz testing. In Proceedings of the 15th Annual Network
and Distributed System Security Symposium (NDSS’08), San
Diego, CA, February 2008.