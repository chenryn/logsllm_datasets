n.sh<==利用大括号输出15个位置参数并定向到
文件n.sh里。
[rootθoldboy-]#cat n.sh
$1$2S3S4$5$6$7$8S9S10$11$12$13S14$15
echo S1S2S3$4 S5$6$7 S8 S9 S10 $11 S12$13S14S15<增加echo会令打
[rooteoldboy scripts]+ cat n.sh
印所有参数，这是最终的测试代码，前面的都是为了写代码，读者也可以用vim编辑录入。
[rootθoldboyscripta]echo（a..2}<==测试打印26个字母a~z并以空格分展。
abcdefghijklmnopgrstuvvxyz
[root8oldboy scripts]shn.8h[a..z）<==传入26个字母a~z，以空格分隔，作为
26个参数。
abcde1gh1a0ala2a3a4a5<==位置参数的数字大于9后，输出的内容就不对了。
其实，当我们使用vim编辑脚本时，利用vim的高亮功能就会看到脚本呈现异常的
颜色显示，如图4-1所示。
---
## Page 61
第4章Shel变量知识进阶与实践43
echo $1 $2 $3 $4 $5 $6 $7 $8 $9 310 $11 $12 $13 $11 $15
图4-1vim高亮功能量现脚本的异常
当位置参数数字大于9时，需要用大括号将数字括起来，如下：
[root8oldboy scripts] cat n.sh
echo S1 $2 $3 $4 S5 S6$7 $8 $9 s(10) S(11) $(12) S(13) S(14) $(15)
#<==数字大于9，必须给数字加大括号才能输出正确内容。
图4-2是加上括号后的高亮颜色，可以看到，颜色已经是正常的了，vim的语法高
亮显示对编程很有帮助，有关vim的开发环境配置，见第16章。
eche $1 $2 $3 $4 85 $6 $7 $8 $9 $(10) [11) $(12] $(13) $(14]$(15)
图4-2长方形线内为正常的颜色显示
以下是有关“S1,S2.S3”这些位置参数的系统生产场景案例。对此，读者可以
多参考rpcbind、NFS两个软件启动的脚本，这两个服务的启动脚本简单、规范。若是
最小化安装的系统，则表示没有安装rpcbind、NFS，可以通过执行yum instlla nfs-utils
rpcbind-y来安装。
在生产场景中，执行/etc/init.d/rpcbind start之后，rpcbind脚本后携带的start参数
会传给脚本里的“S1”进行判断，脚本中传递参数的关键case语句节选如下：
case*S1*in<=这里的S1用于接收执行此脚本命令行的第一个参数，规范用法是用宽引号引起来。
start）<=m如果S1接收的值匹配start，则执行下文的start函数及内部的指令。
start<==调用脚本中的start函数
RETVAL=S？<==这里是记录start函数执行的遮因值，s？包是重要的变量，暂时可
以忽略，后面有会绍。
stop）<==如果s1接收的值匹配stop.则执行下文的stop函数及内部的指令。
1
stop
RETVAL=$?
statuB）<==如果S1接收的值匹配status，则执行下文的status函数及内部的指令。
status Sprog
RETVAL=$?
1
…省略部分内容
说明：读者只需要关注特殊变量（$1）的内容，case等其他语句后文会细讲。
2.$0特殊变量的作用及变量实践
$0的作用为取出执行脚本的名称（包括路径），下面是该功能的实践。
---
## Page 62
4跟老男孩学Linux运维：Shel编程实战
范例4-4：获取脚本的名称及路径。
[root@oldboy scripts]catn.sh
echo s0
若不带路径执行脚本，那么输出结果就是脚本的名字，如下：
[rooteoldboy scripts]+sh n.sh
n.sh<w=So获取的值就是脚本的名字，因此这原输出了n.ah
若使用全路径执行脚本，那么输出结果就是全路径加上脚本的名字，如下：
[rootsoldboy scripta]sh/server/scripts/n.ah
/server/scripts/n.sh#<=如果执行的脚本中零有路径，么so获取的佳就是脚本的名字加路径。
当要执行的脚本为全路径时，S0也会带着路径。此时如果希望单独获取名称或路径，
则可用范例4-5的方法。
范例4-5：dirname及basename命令自身的功能和用法。
[rooteoldboy seripts]+dirname/server/scripts/n.sh
/server/scripts
<andirname命令的作用是获取脚本的离径。
[rootaoldboy acripts]basename /server/scripts/n.sh
n.sh
<==basenane命令的作用是获取脚本的名字。
说明：以后读者可以根据需求，用不同的命令获取对应的结果。
范例4-6：利用S0和上述命令（dirmame、basename）分别取出脚本名称和脚本路径。
[rootaoldboy scripts]catn.sh
dirnane so
basenane so
/server/scripts
[rootaoldboy acripts]sh/server/scripts/n.sh
<==这就是dirnames0的输出结果。
n.sh
<==这就是basename S0的输出结来。
有关“S0”这个位置参数的系统生产场景案例如下，其中采用rpcbind系统脚本。
[rooteoldboyscripta]#tail-6/etc/init.d/rpcbind<x=查看结尾6行
reloadlcondrestartitry-restart)*
echo S"usage:so(startlstoplstatuslrestartlreloadiforce
S0的基本生产场景就是，当用户的输入不特合脚本的要求时，就打印脚本的名字及使用帮助。
RETVAL=2
exit SRBTVAL
[rootBoldboyscripts]/etc/init.d/rpcbind<==不带任何参数执行rpcbind脚本
Usage:/etc/init.d/rpcbind(startistoplstatus|restartlreloadlforce