title:A Security-Mode for Carrier-Grade SDN Controllers
author:Changhoon Yoon and
Seungwon Shin and
Phillip A. Porras and
Vinod Yegneswaran and
Heedo Kang and
Martin W. Fong and
Brian O'Connor and
Thomas Vachuska
A Security-Mode for Carrier-Grade SDN Controllers
Changhoon Yoon
Phillip Porras
SRI International
PI:EMAIL
Martin Fong
SRI International
PI:EMAIL
Vinod Yegneswaran
PI:EMAIL
Heedo Kang
Seungwon Shin
KAIST
KAIST
SRI International
PI:EMAIL
KAIST
PI:EMAIL
PI:EMAIL
Brian O’Connor
Open Networking Laboratory
PI:EMAIL
ABSTRACT
Management approaches to modern networks are increasingly in-
fluenced by software-defined networks (SDNs), and this increased
influence is reflected in the growth of commercially available inno-
vative SDN-based switches, controllers and applications. To date,
there have been a number of commercial and open-source SDN
operating systems (NOS) introduced for various purposes, includ-
ing distributed controller frameworks targeting large, carrier-grade
networks such as the Open Network Operating System (ONOS) and
OpenDayLight (ODL). These frameworks are distinguished by their
(i) elastic cluster controller architecture, (ii) network virtualization
support, and (iii) modular design. Given their flexible design, grow-
ing list of supported features, and collaborative community support,
these are attractive hosting platforms for a wide range of third-party
distributed network management applications. This paper identifies
the common security requirements for policy enforcement in such
distributed controller environments. We present the design of a
network application permission-enforcement model and an inte-
grated security subsystem (SM-ONOS) for managing distributed
applications running on an ONOS controller. We discuss the under-
lying motivations of its security extensions and their implications
for improving our understanding of how to securely manage large-
scale SDNs. Our performance assessments demonstrate that the
security-mode extension imposed reasonable overheads (ranging
from 5 to 20% for 1-7 node clusters).
ACM Reference Format:
Changhoon Yoon, Seungwon Shin, Phillip Porras, Vinod Yegneswaran,
Heedo Kang, Martin Fong, Brian O’Connor, and Thomas Vachuska. 2017. A
Security-Mode for Carrier-Grade SDN Controllers. In Proceedings of ACSAC
2017. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3134600.
3134603
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134603
Thomas Vachuska
Open Networking Laboratory
PI:EMAIL
1 INTRODUCTION
The advent of the software-defined Network Operation System
(NOS) began with the appearance of the first OpenFlow controller,
NOX [10]. Since NOX, many different NOSs were proposed and
implemented in order to overcome the limitations of the predeces-
sors. For example, Beacon [7] has eliminated several limitations
of NOX; it was written in Java to improve the developer produc-
tivity while achieving high-performance, and enabled the ability
to (de)activate SDN applications at runtime. The ONIX [14] con-
troller mitigated the fundamental scalability problems experienced
in SDNs by proposing a distributed NOS architecture. Today, by
extending and improving upon their predecessors, Open Network
Operating System (ONOS) [4] and OpenDaylight (ODL) [2] now
represent two of the most popular and advanced open-source NOS
projects aspiring for high scalability, reliability and extensibility.
In this paper, we introduce a new security subsystem designed
to improve distributed, carrier-grade NOSs, such as ONOS and
ODL. These security extensions introduce an administrative per-
mission enforcement service for imposing access constraints on
each distributed SDN application hosted on the NOS. Prior efforts
to guarantee non-interference in SDNs include network-slicing ap-
proaches [3, 25] and application compartmentalization [12, 23, 24]
strategies. Unlike these efforts, our work is focused on large-scale
SDNs with hundreds of switches, where a single logical controller
is instantiated across many virtual instances. Here, we tackle this
challenge by adopting a fundamentally different approach which
we validate can be scalably enforced in a modern, large-scale, dis-
tributed SDN control framework.
Specifically, our proposed security extensions enable the NOSs
to enforce two types of access control policies: developer-specified
policies and NOS operator-specified policies. Developer-specified
policies enumerate the bundle authority type, application services,
and the per-service APIs that are required by the application at
runtime. These permissions are specified within the application
configuration manifest, and allow the operator to evaluate exactly
which services and API an application may use when deployed.
Operator-specified policies allow a network administrator to
compartmentalize an SDN application’s access to certain segments
of the network topology or to impose network header criteria con-
straints to limit the type of traffic the application can manage.
For operator-specified policies, we introduce two new permission
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
C. Yoon et al.
mechanisms: topology permissions and header-space permissions.
Topology permissions impose constraints on which portions of the
global network topology graph (i.e., which network devices) an
application may access at runtime. This permission enables the
NOS operator to partition the authority of applications into virtual
subnetworks. Header-space permissions enable the operator to con-
strain applications to a subset of traffic that match header-space
criteria.
In order to evaluate the effectiveness of our security subsys-
tem, we implement Security-Mode ONOS (SM-ONOS). Section 5
discusses the implementation solutions to overcome the challenges
in extending ONOS to support application permission enforcement.
Specifically, we propose a scheme for security policy expression
of SDN applications. The specification is designed to be both intu-
itive, such that NOS operators can use it to evaluate the privilege
requirements of an SDN application, as well as highly inclusive to
fully constrain the application behavior. We further introduce an
SDN application vetting mechanism that ensures NOS operators
have reviewed and approved the security policy prior to the actual
activation of the SDN application in a distributed NOS environment.
Finally, we introduce a new capability for per-app network access
control in a distributed NOS environment. Finally, in Section 7 we
assess the effectiveness of SM-ONOS by presenting three practical
use-cases, and by measuring key performance characteristics, such
as its impact on flow mod installation throughput.
This paper provides several research contributions:
• We present the design of several application-layer security exten-
sions to the emerging class of distributed (carrier-grade) OpenFlow-
based NOSs, such as ONOS and ODL. While SDN application
security mediation has been explored in prior work on smaller-
scale networks, here we propose pragmatic privilege enforcement
mechanisms that target networks with hundreds of switches and
physically distributed topologies.
• We introduce the notion of the SDN application security man-
ifest, addressing two fundamental challenges in administering
networks in which third-party SDN applications are hosted: 1)
existing NOSs offer no mechanisms to compare SDN applications
against their privilege requirements, 2) NOS administrators have
no current methods to restrain application privilege usage within
a target deployment.
• We present an implementation of our security extensions within
one of the top distributed, carrier-grade, OpenFlow NOSs: ONOS.
We refer to our implementation as SM-ONOS, which is now
integrated as a new opensource subsystem within the ONOS dis-
tribution package. We describe various use cases and deployment
scenarios for SM-ONOS.
• We examine the performance overhead of SM-ONOS, including
its performance characteristics in distributed WAN topologies
with up to seven distributed network locations. We also explore
optimizations such as permission-check caching to further en-
hance the scalability of our security extensions.
2 BACKGROUND
In this section, we discuss some key aspects of SDN and the most
popular open-source network operating systems (NOS) available
today; ONOS (Open Network Operating System) and ODL (Open-
Daylight), which both employ the OSGi (Open Services Gateway
initiative) framework.
2.1 Open SDN
Since its emergence, SDN has steadily matured to become an effec-
tive and viable networking technology that is gradually supplanting
legacy network infrastructures. The success of SDN could be at-
tributed to academic papers, open-source community development
efforts and industry partnerships. These have stimulated the de-
velopment of protocol standards like OpenFlow [18] and a suite of
SDN controllers [2, 4].
Furthermore, SDN controllers are now publishing Northbound
APIs, which allow independent developers to write useful SDN
applications. Such open APIs accelerate innovation and encour-
age wider adoption of SDN technology. In the case of ONOS and
ODL, many developers from the open-source community and part-
ner companies have already contributed a number of useful SDN
applications. These cutting-edge SDN controllers support hot de-
ployment of applications to assure continuous and flexible network
service provisioning. While these novel and advanced capabilities
invigorate the SDN application ecosystem, they also introduce new
security issues, as we will discuss in Section 3.
2.2 OSGi and open-source NOS projects
ONOS and ODL are two popular open-source NOSs, and both are
built on the OSGi framework, which is often referred to as a dy-
namic module system. OSGi [21] allows one to dynamically install,
uninstall, start and stop modules (or OSGi bundles) without shut-
ting down the entire system, thus providing a reliable infrastruc-
ture for NOSs. In addition to the dynamic configurability, OSGi
also allows open-source NOS projects to easily establish a modular
architecture, which increases architectural coherence, testability,
and maintainability. Wielding significant influence, the industry
is also participating in ONOS and ODL projects, and major NOS
vendors (e.g., Brocade, Cisco, Ericsson, HP and etc.) have already
built commercial NOS products based on both ONOS and ODL.
OSGi includes an optional security layer based on the Java 2
security architecture. Within the OSGi service platform, a code
unit can be authenticated based on the (download) location of the
OSGi bundle. Since OSGi manages its special protection domain, or
bundle location, it provides a dedicated services for managing those
permissions that are associated with the authenticated unit of code.
For example, the Permission Admin service allows management of
security policies by granting permissions to OSGi bundles based
on their full location strings. Although the framework security is
an optional layer, the Felix OSGi framework project implements
the security layer as a subproject of the Felix project [27].
3 MOTIVATING CHALLENGES
A vital adoption incentive for any NOS among the increasingly
competitive SDN landscape involves the extent to which the NOS
hosts a diverse range of active network application projects. How-
ever, a wide selection of third-party network applications also raises
an interesting vetting challenge to a NOS operator: how to select
an effective combination of network applications that can coexist
A Security-Mode for Carrier-Grade SDN Controllers
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
together in a secure and stable manner? The central goal of this
paper is to offer one exemplar distributed NOS security service that
addresses this concern. Here, we break down this challenge into
the following concerns:
How to compare SDN application privilege requirements?
An SDN ecosystem with a diverse set of third-party applications
increases the need for efficient application vetting with respect to
the services and functions that each candidate application requires.
One obvious approach to application vetting is for the NOS opera-
tor to conduct a pre-deployment source-code review, to evaluate
whether the services and functions that an application perform is
reasonable, given the target object. Unfortunately, conducting a
code review is not only a daunting task, but is itself prone to human
error and may be hindered by code that is obfuscated to avoid IP
theft. Thus, we desire a mechanism that will allow SDN application
developers to express which services and API permissions are nec-
essary for the application to function. Such an application manifest
should provide an efficient means for administrative review, and an
ability for the administrator to adjust the manifest to disable those
functions deemed unnecessary.
However, even when an SDN application is thoroughly inspected
and deployed to the network, this inspection does not eliminate the
possibility that an application unexpectedly executes functions that
were not part of the inspected manifest. If the specification of the
manifest is incomplete, then those accesses that are not explicitly
granted at deployment time should be denied.
How to avoid application conflicts in large network topolo-
gies? SDN applications have the potential to conflict and interfere
with other applications as they each work to manage their global
network topology. ONOS, for example, employs a distributed ar-
chitecture that instantiates both the ONOS stack and applications
across multiple physically distributed servers, allowing it to scale
across wide area networks or other segmented topologies. Each
ONOS instance, referred to as a node, operates an instance of each
deployed SDN application, and all applications share a common
access to the global network topology. Currently, NOSs lack mech-
anisms to constrain applications to specific sub-portions of the
global topology (i.e., each application instance within each node
has the ability to fully access the global topology). Even if an SDN
application is designed specifically to provide management for a
target subnetwork, it operates unconstrained in order to alter other
portions of the topology.
The ONOS project will soon introduce a virtual network ab-