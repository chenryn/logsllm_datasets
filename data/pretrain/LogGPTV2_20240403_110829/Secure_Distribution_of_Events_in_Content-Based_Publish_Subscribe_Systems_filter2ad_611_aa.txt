# Secure Distribution of Events in Content-Based Publish-Subscribe Systems

**Authors:**
Lukasz Opyrchal and Atul Prakash

**Conference:**
Proceedings of the 10th USENIX Security Symposium, Washington, D.C., USA, August 13–17, 2001

**Publisher:**
USENIX Association
Phone: +1 510 528 8649
FAX: +1 510 548 5738
Email: [PI:EMAIL]
Website: http://www.usenix.org

**Copyright:**
© 2001 by The USENIX Association. All Rights Reserved.
The rights to individual papers remain with the authors or their employers. Permission is granted for noncommercial reproduction for educational or research purposes, provided this copyright notice is included.

**Affiliation:**
Electrical Engineering and Computer Science Department, University of Michigan, Ann Arbor, MI 48109-2122, USA
Emails: lukasz@eecs.umich.edu, aprakash@eecs.umich.edu

## Abstract
Content-based publish-subscribe systems are an emerging paradigm for building a wide range of distributed applications. A specific challenge in these systems is the secure distribution of events to subscribing clients. In content-based systems, each event can potentially have a different set of interested subscribers. To ensure confidentiality, messages must be encrypted so that only the intended subscribers can read them. For \( n \) clients, there can be up to \( 2^n \) subgroups, and each event may be delivered to a different subgroup. The primary problem is managing subgroup keys to minimize the number of encryptions per event. This paper first highlights the difficulties in applying existing group key management techniques to this problem. We then propose and compare several approaches to reduce the number of encryptions and increase message throughput. We provide both analytical analysis and simulation results for the proposed algorithms.

## 1. Introduction
Many modern Internet applications require high scalability and strict security guarantees. These include large-scale wireless delivery services, inter-enterprise supply-chain management, financial applications, workflow systems, and network management. A popular messaging technology for such applications is the publish-subscribe (pub-sub) model. In pub-sub systems, subscribers specify the type of content they wish to receive via subscriptions, and publishers send messages (events) that are delivered only to the interested subscribers. This decoupling of publishers and subscribers enhances scalability but complicates the implementation of secure solutions.

### Support
This work is partially supported by the IBM Research Partnership Award and by the Defense Advanced Research Projects Agency (DARPA) and Air Force Research Laboratory, Air Force Materiel Command, USAF, under agreement number F30602-00-2-0508. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes. The views and conclusions expressed herein are those of the authors and do not necessarily represent the official policies or endorsements of DARPA, the U.S. Government, or the Air Force Research Laboratory.

### Early Pub-Sub Systems
Early pub-sub systems used subject-based subscription, where each message is labeled with one of a fixed set of subjects. Subscribers subscribe to all messages within a particular subject or set of subjects. This approach leverages group-based multicast techniques for scalability and performance. However, it limits selectivity to predefined subjects.

### Content-Based Pub-Sub Systems
An emerging alternative is content-based messaging systems, which support an event schema defining the type of information in each event. Subscriptions in content-based systems are predicates against the event schema. For example, a stock trading application might use the schema `[issue: string, price: dollar, volume: integer]` and a subscription predicate like `(issue = "IBM" & price > 1000)`. Only events that match the subscription predicate are delivered to the subscriber. This provides greater flexibility in choosing filtering criteria without requiring pre-defined subjects.

### Security Requirements
Applications in content-based pub-sub systems require various security guarantees, such as confidentiality, integrity, and sender authenticity. Confidentiality ensures that only authorized (paying) subscribers can access the data. Integrity ensures that reports are not modified in transit, and sender authenticity ensures that fake reports are not sent by third parties. The lack of these security guarantees has hindered the wider adoption of content-based systems.

### Challenges
In content-based systems, every event can potentially go to a different subset of subscribers, making the implementation of confidentiality guarantees difficult. With \( N \) subscribers, there are \( 2^N \) possible subsets. Setting up static security groups for every possible subset is infeasible, especially with thousands of subscribers. Even using trusted intermediate brokers can leave each broker with a large number of subscribers, making the number of possible groups too large.

### Paper Structure
This paper presents and compares several algorithms for secure delivery of events from a broker to its subscribers. Section 2 details the problem. Section 3 covers related work. Section 4 explores multiple subgroup key caching approaches to address the secure end-point delivery problem, including theoretical analysis. Section 5 describes our simulation setup, experiment results, and analysis. Section 6 discusses the results and provides theoretical bounds. Finally, Section 7 presents conclusions and directions for future work.

## 2. Problem Description
A messaging system routes events from a publisher to endpoint brokers, which then distribute the events to their subscribers. In content-based systems, each message can potentially go to a different set of subscribers. The security requirement we focus on is confidentiality, ensuring that only authorized subscribers can read an event. Data must be protected from unauthorized subscribers and malicious users on the network.

We assume that events are protected on their way from the publisher to the endpoint brokers. This paper focuses on the last leg of data security from the endpoint brokers to the subscribers, assuming all brokers are trusted and all subscribers and publishers are properly authenticated. Each subscriber and publisher has an individual symmetric pair-key shared only with their broker, generated during the authentication process. Future work will address security in transit between publishers and endpoint brokers, as well as broker trust issues.

### Dynamic Access Control
The pub-sub system allows dynamic access control, meaning a predicate can be used at event publish time to check the set of authorized subscribers. It is possible for a subscriber to be interested in an event but not authorized to read it due to publisher restrictions. For simplicity, we assume all interested subscribers are also authorized. Dynamic access control makes it infeasible to set up static security groups, as each event can have a different set of authorized subscribers.

### Scenarios
We consider two scenarios: (1) events go to random subgroups of subscribers, and (2) there are some popular and some unpopular subgroups. The simplest solution is to encrypt each event separately for every subscriber, but this does not scale due to the throughput reduction of encryption algorithms like DES. This paper explores dynamic caching approaches to reduce the number of encryptions and increase message throughput.

### Performance Considerations
Encrypting each event separately for every subscriber receiving the event is infeasible for large, high-volume systems. For brokers with thousands of subscribers, this could mean hundreds or thousands of encryptions per event. Changing keys for each encryption drastically slows down encryption algorithms like DES. Our tests show that changing keys for each subscription results in throughput as low as 10% of the total throughput when using a single key.

### Problem Statement
The problem is to preserve confidentiality using a small number of encryptions while distributing events from the endpoint broker to its subscribers. Due to the lack of good workloads in this area, we consider two extreme scenarios.

## 3. Related Work
Efficiently delivering events in a confidential manner to only interested subscribers has not been addressed in content-based systems. However, related research includes secure group communication and broadcast encryption.

### Secure Group Communication
Secure group communication systems provide a secure channel for data exchange between group members, often identified by a session key known to all group members. Key management services facilitate member joins, leaves, and periodic re-keying. A simple group key distribution method creates a pair-key between each subscriber and its broker. When there is a membership change, the new session key is distributed to each member using their pair key. This approach can be costly for large groups.

### Broadcast Encryption
Broadcast encryption was introduced by Fiat and Naor in the context of pay-TV. Their methods allow only a selected subset of users to decrypt the information while coalitions of up to \( k \) unprivileged users learn nothing. However, these schemes require a large number of keys to be stored at the receivers or large broadcast messages. Luby and Staddon studied the trade-off between the number of keys stored in the receivers and the transmission length, proving a lower bound that shows either the transmission must be very long or a prohibitive number of keys must be stored in the receivers.

### Iolus System
Mittra’s Iolus system introduces locally maintained subgroups, each maintaining its own session key, which is modified on membership events. Subgroups are arranged in a tree hierarchy, making it more scalable than simple group key distribution. However, in the worst case, the session keys for all subgroups may need to be changed for each event, potentially requiring a linear number of encryptions in the number of subscribers within each subgroup.

### Logical Key Hierarchies
Approaches based on logical key hierarchies (LKH) provide an efficient way to achieve scalable, secure key distribution on membership changes. An LKH is a singly rooted d-ary tree of cryptographic keys. A trusted session leader assigns the interior node keys, and each leaf node key is a secret key shared between the session leader and a single member. Re-keying is performed by replacing only the keys known by the leaving (joining) member, scaling logarithmically with group size. If the change in membership is \( O(N) \), it may require up to \( O(N \log(N)) \) encryptions. If the tree is entirely reconstituted for each event, the number of encryptions required per event is at least \( k \), which can still be large.

### VersaKey System
The VersaKey system extends the LKH algorithm by converting the key hierarchy into a table of keys based on binary digits in the identifiers of the members. In this scheme, no key distribution to current members is necessary in the case of joins. However, the VersaKey approach is vulnerable to certain attacks.

## 4. Proposed Approaches
We explore several approaches based on the idea of using and caching multiple subgroup keys to address the secure end-point delivery problem. We describe the use of these schemes and present theoretical analysis of many of these approaches.

### Approach 1: Simple Pair-Key Method
Each subscriber and broker share a pair-key. For each event, the broker encrypts the event with the pair-keys of the interested subscribers. This approach is straightforward but scales poorly with the number of subscribers.

### Approach 2: Subgroup Key Caching
We introduce a caching mechanism to store and reuse subgroup keys. When a new event arrives, the broker checks if a suitable subgroup key already exists. If not, a new subgroup key is created and distributed to the interested subscribers. This reduces the number of encryptions required per event.

### Approach 3: Hybrid Key Management
This approach combines the benefits of pair-key and subgroup key methods. The broker maintains a pool of subgroup keys and dynamically assigns subscribers to these subgroups based on their subscription patterns. This approach balances the overhead of key management and the number of encryptions.

### Approach 4: Tree-Based Key Hierarchy
We use a tree-based key hierarchy to manage subgroup keys. Each node in the tree represents a subgroup, and the keys are distributed along the paths from the root to the leaf nodes. This approach scales well with the number of subscribers and provides efficient re-keying.

### Approach 5: Intermediate Key Caching
Instead of rebuilding the tree for each event, the broker searches the tree to find the smallest subset of intermediate keys that cover all interested subscribers. This approach reduces the number of encryptions and provides efficient key management.

## 5. Simulation and Analysis
We describe our simulation setup, experiment results, and analysis. The simulations are conducted using a custom-built simulator that models the behavior of the pub-sub system under various conditions. We compare the performance of the proposed approaches in terms of the number of encryptions, message throughput, and key management overhead.

### Simulation Setup
- **Number of Subscribers:** Varies from 100 to 10,000
- **Event Arrival Rate:** Varies from 10 to 100 events per second
- **Subscription Patterns:** Random and clustered
- **Key Management Overhead:** Measured in terms of the number of key updates and key distributions

### Experiment Results
- **Simple Pair-Key Method:** High number of encryptions, low throughput
- **Subgroup Key Caching:** Moderate number of encryptions, moderate throughput
- **Hybrid Key Management:** Balanced number of encryptions, high throughput
- **Tree-Based Key Hierarchy:** Low number of encryptions, high throughput
- **Intermediate Key Caching:** Very low number of encryptions, very high throughput

### Analysis
The results show that the intermediate key caching approach provides the best balance between the number of encryptions and message throughput. The tree-based key hierarchy also performs well, especially for large numbers of subscribers. The hybrid key management approach is a good compromise, offering high throughput with manageable key management overhead.

## 6. Discussion and Theoretical Bounds
We discuss the results and present some theoretical bounds on the problem. The theoretical analysis shows that the number of encryptions required per event is bounded by the number of interested subscribers and the structure of the key hierarchy. The intermediate key caching approach achieves near-optimal performance, with the number of encryptions scaling logarithmically with the number of subscribers.

### Theoretical Bounds
- **Lower Bound:** The minimum number of encryptions required per event is \( \log_2(n) \), where \( n \) is the number of subscribers.
- **Upper Bound:** The maximum number of encryptions required per event is \( n \), where \( n \) is the number of subscribers.

### Practical Implications
The proposed approaches provide practical solutions for secure event distribution in content-based pub-sub systems. The intermediate key caching and tree-based key hierarchy methods are particularly effective for large-scale systems with thousands of subscribers.

## 7. Conclusions and Future Work
This paper addresses the problem of secure event distribution in content-based pub-sub systems. We propose and compare several approaches to reduce the number of encryptions and increase message throughput. The intermediate key caching and tree-based key hierarchy methods provide the best performance, with the number of encryptions scaling logarithmically with the number of subscribers.

### Future Work
- **Security in Transit:** Address the security of data in transit between publishers and endpoint brokers.
- **Broker Trust:** Investigate the impact of broker trust on the overall security of the system.
- **Scalability:** Extend the proposed approaches to handle even larger numbers of subscribers and higher event arrival rates.
- **Dynamic Membership:** Explore more efficient methods for handling dynamic membership changes in content-based pub-sub systems.

By addressing these challenges, we aim to further enhance the security and scalability of content-based pub-sub systems, enabling their wider adoption in a variety of applications.