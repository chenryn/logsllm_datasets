The result is shown in Table 6. The columns show the
following metrics from left to right: (1) coverage of basic
blocks; (2) coverage of basic blocks when excluding the
basic blocks in those functions that are not executed; (3)
coverage of functions; (4) percentage of fully-covered
functions; (5) the number of different paths that S2E ex-
plored. Observe that the coverage is much lower than X-
Force in general. 176.gcc, 253.perlbmk and 254.gap
are parsers/compilers. They have poor coverage on S2E
because they get stuck in the parsing loops/automatas,
whose termination conditions are dependent on the sym-
bolic input. Regarding 255.vortex, S2E fails to solve
the constraints when an indirect jump uses the symbolic
variable as the index of jump table. As a result, S2E fails
to identify most of the indirect call edges due to the fail-
ure of creating different objects. In 252.eon, S2E fails
to solve the constraints of the input ﬁle format, which
must contain a speciﬁc string as header. The program
throws exception and terminates quickly, which leads to
poor coverage.
253.perlbmk is a difﬁcult case for X-Force. It parses
perl source code to generate syntax trees. The indirect
call targets are stored in the nodes of syntax trees. How-
ever, since the syntax tree construction is driven by ﬁ-
nite automata, path coverage does not seem to be able to
cover enough states in the automata to generate enough
syntax trees of various forms. A few other benchmarks
such as 176.gcc and 254.gap also leverage automata
based parsers, however their indirect call targets are not
so closely-coupled with the state of the automata and
hence X-Force can still get good coverage. We will leave
it to our future work to address this problem.
The last ﬁve columns show some statistics of X-Force.
The run time and the number of explorations are largely
linear regarding the number of instructions except for a
small number of functions on which quadratic search is
performed. Some take a long time (e.g., close to 50 hours
for 176.gcc) due to their complexity. The average num-
ber of exceptions is the number of exceptions encoun-
tered and recovered from in each execution (e.g. memory
exceptions, division by zero). The numbers are smaller
than we expected given that we execute these programs
without any inputs and switch branch outcomes. It shows
that our exception recovery could effectively prevent cas-
cading exceptions. The linear set sizes are manageable.
The last column shows the average number of switched
predicates versus the average number of predicate in-
stances in total in an execution. It shows that X-Force
may violate path feasibility only in a very small part of
execution. The performance overhead of X-Force com-
pared to the vanilla PIN is 473 times on average. It is
measured by comparing the number of instructions that
could be executed by X-Force and the vanilla PIN within
the same amount of time.
5.2 Malware Analysis
One common approach to understanding the behavior of
an unknown malware sample is by looking at the library
calls it makes. This could be done by static, dynamic
or symbolic analysis; however, they all have limitations.
USENIX Association  
23rd USENIX Security Symposium  837
Table 7: Result of using X-Force for malware analysis compared with IDA Pro and native run.
Number of Library Call Sites
Number of Library Functions
Name
MD5
File Size(KB)
4ec0027bef4d7e1786a04d021fa8a67f
dg003.exe
04eb2e58a145462334f849791bc75d18
Win32/PWSteal.F
995442f722cc037885335340fc297ea0
APT1.DAIRY
0c5e9f564115bfcbee66377a829de55f
APT1.GREENCAT
APT1.HELAUTO
47e7f92419eb4b98ff4124c3ca11b738
APT1.STARSYPOUND 1f2eb7b090018d975e6d9b40868c94ca
36cd49ad631e99125a3bb2786e405cea
APT1.WARP
APT1.NEWSREEL
2c49f47c98203b110799ab622265f4ef
57f98d16ac439a11012860f88db21831
APT1.GOGGLES
APT1.BOUNCER
6ebd05a02459d3b22a9d4a79b8626bf1
192
20
19
14.5
8.5
7
45.5
21
10.5
56
Static analysis could not obtain the parameters of library
calls that are dynamically computed and is infeasible
when the sample is packed or obfuscated. Traditional
dynamic analysis can obtain parameters and is immune
to packing and obfuscation, however, it could only ex-
plore some of the execution paths depending on the input
and the environment. Unfortunately, the input is usually
unknown for malware. Symbolic analysis, while being
able to construct input according to path conditions, has
difﬁculty in handling complex or packed binaries.
X-Force overcomes these problems as traditional dy-
namic analysis could be built upon X-Force to explore
various execution paths without providing any inputs or
the environment. In this case study, we demonstrate the
use of a library call analysis system we built on top of
X-Force to analyze real-world malware samples.
When we implement library call analysis on top of
X-Force, we slightly adjust X-Force to make it suitable
for handling malware: (1) We enable the concrete exe-
cution of most library functions including output func-
tions because many packers use output functions (e.g.
RtlDecompressBuffer()) to unpack code. We con-
tinue to skip some library calls such as Sleep() and
DeleteFile(); (2) We intercept a few functions that
allocate memory and change page attributes, such as
VirtualAlloc() and VirtualProtect(). This is for
tracking the memory areas of code and data which keep
changing at runtime due to self-modifying and dynami-
cally generated code.
Given a malware sample, we use X-Force to explore
its paths. We use the linear search algorithm (Sec-
tion 3.2) as it provides a good balance between efﬁciency
and coverage. During each execution, we record a trace
of function calls. For library calls, we also record the
parameter values. The trace is then transformed into an
interprocedural ﬂow graph that has control transfer in-
structions, including jumps and calls, as its nodes, and
control-ﬂow/call edges as its edges. The parameters
of library calls are also annotated on the graph. The
graphs generated in multiple executions are unioned to
produce the ﬁnal graph. We then manually inspect the
ﬁnal graphs to understand malware behavior.
IDA Pro Native Run X-Force
252
42
100
64
39
36
79
67
36
97
147
7
90
66
41
37
77
67
35
11
129
21
40
26
16
14
47
31
21
16
IDA Pro Native Run X-Force
1750
94
236
302
109
80
414
192
131
562
808
9
213
303
109
80
495
189
127
24
546
28
68
114
33
15
156
49
45
39
No. of Runs
in X-Force
800
30
121
112
30
25
221
93
42
298
(cid:36)(cid:71)(cid:71)(cid:85)(cid:72)(cid:86)(cid:86)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:71)(cid:69)(cid:24)(cid:19) (cid:38)(cid:82)(cid:83)(cid:92)(cid:3)(cid:86)(cid:72)(cid:79)(cid:73)(cid:3)(cid:87)(cid:82)(cid:3)(cid:8)(cid:36)(cid:83)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:39)(cid:68)(cid:87)(cid:68)(cid:8)(cid:63)(cid:90)(cid:86)(cid:21)(cid:75)(cid:79)(cid:83)(cid:17)(cid:72)(cid:91)(cid:72)
(cid:48)(cid:68)(cid:79)(cid:76)(cid:70)(cid:76)(cid:82)(cid:88)(cid:86)(cid:3)(cid:37)(cid:72)(cid:75)(cid:68)(cid:89)(cid:76)(cid:82)(cid:85)
(cid:68)(cid:81)(cid:71)(cid:3)(cid:72)(cid:91)(cid:72)(cid:70)(cid:88)(cid:87)(cid:72)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:5)(cid:88)(cid:83)(cid:71)(cid:68)(cid:87)(cid:72)(cid:5)(cid:3)(cid:68)(cid:85)(cid:74)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:25)(cid:20)(cid:27)(cid:19) (cid:40)(cid:91)(cid:72)(cid:70)(cid:88)(cid:87)(cid:72)(cid:3)(cid:68)(cid:3)(cid:70)(cid:82)(cid:80)(cid:80)(cid:68)(cid:81)(cid:71)(cid:3)(cid:86)(cid:72)(cid:81)(cid:87)(cid:3)(cid:69)(cid:92)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:38)(cid:9)(cid:38)(cid:3)(cid:86)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:24)(cid:71)(cid:27)(cid:19) (cid:39)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:3)(cid:68)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:3)(cid:86)(cid:72)(cid:81)(cid:87)(cid:3)(cid:69)(cid:92)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:38)(cid:9)(cid:38)(cid:3)(cid:86)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:73)(cid:20)(cid:22)(cid:19) (cid:53)(cid:72)(cid:69)(cid:82)(cid:82)(cid:87)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:68)(cid:70)(cid:75)(cid:76)(cid:81)(cid:72)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:72)(cid:68)(cid:26)(cid:19) (cid:54)(cid:72)(cid:79)(cid:73)(cid:16)(cid:85)(cid:72)(cid:80)(cid:82)(cid:89)(cid:68)(cid:79)(cid:3)(cid:73)(cid:85)(cid:82)(cid:80)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:3)(cid:80)(cid:68)(cid:70)(cid:75)(cid:76)(cid:81)(cid:72)
(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:24)(cid:72)(cid:71)(cid:19) (cid:39)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:3)(cid:68)(cid:79)(cid:79)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:86)(cid:3)(cid:82)(cid:81)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:75)(cid:68)(cid:85)(cid:71)(cid:3)(cid:71)(cid:76)(cid:86)(cid:78)
(cid:81)(cid:87)(cid:82)(cid:75)(cid:79)(cid:11)(cid:19)(cid:91)(cid:19)(cid:12)(cid:3)(cid:32)(cid:3)(cid:19)(cid:91)(cid:19)(cid:3)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:20)(cid:28)(cid:71)(cid:19)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:20)(cid:19)(cid:71)(cid:19)
(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)
(cid:70)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:20)(cid:23)(cid:27)(cid:19)
(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)
(cid:70)(cid:80)(cid:83)(cid:3)(cid:72)(cid:68)(cid:91)(cid:15)(cid:3)(cid:19)(cid:91)(cid:20)(cid:28)(cid:25)
(cid:77)(cid:68)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:71)(cid:19)(cid:73)(cid:22)
(cid:70)(cid:80)(cid:83)(cid:3)(cid:72)(cid:68)(cid:91)(cid:15)(cid:3)(cid:19)(cid:91)(cid:20)(cid:73)(cid:23)
(cid:77)(cid:68)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:71)(cid:28)(cid:22)(cid:24)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:71)(cid:79)(cid:15)(cid:3)(cid:20)(cid:19)(cid:19)(cid:19)(cid:71)(cid:68)(cid:23)(cid:27)(cid:62)(cid:72)(cid:68)(cid:91)(cid:64)
(cid:77)(cid:80)(cid:83)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:71)(cid:68)(cid:19)(cid:23)(cid:62)(cid:72)(cid:71)(cid:91)(cid:13)(cid:23)(cid:64)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:24)(cid:72)(cid:71)(cid:19)
(cid:77)(cid:80)(cid:83)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:71)(cid:68)(cid:71)(cid:70)(cid:62)(cid:72)(cid:68)(cid:91)(cid:13)(cid:23)(cid:64)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:24)(cid:71)(cid:27)(cid:19)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:71)(cid:69)(cid:24)(cid:19)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:25)(cid:20)(cid:27)(cid:19)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:72)(cid:68)(cid:26)(cid:19)
(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:73)(cid:20)(cid:22)(cid:19)
(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)
(cid:54)(cid:79)(cid:72)(cid:72)(cid:83)(cid:11)(cid:19)(cid:91)(cid:22)(cid:72)(cid:27)(cid:12)(cid:3)(cid:32)(cid:3)(cid:19)(cid:91)(cid:19)(cid:3)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:20)(cid:19)(cid:22)(cid:19)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:3)(cid:19)(cid:91)(cid:20)(cid:19)(cid:19)(cid:19)(cid:20)(cid:19)(cid:22)(cid:19)
Figure 5: The ﬂow graph of the function at 0x1000c630
generated by X-Force when analyzing dg003.exe.
We evaluate our system on 10 real-world malware
samples which are either wild-captured virus/trojan or
APT samples described in [9]. Since our analysis fo-
cuses on library calls, we choose the number of identiﬁed
library functions and the total number of their call sites
as the evaluation metric5. We also compare our results
with IDA-Pro and the native run. In IDA, library func-
tions are identiﬁed from the import table; the call sites
are identiﬁed by scanning the disassemblies. In the na-
tive run, we execute the malware without any arguments
and record the library calls using a PIN tool.
The results are shown in Table 7. We can see that
for packed or obfuscated samples such as dg003.exe,
Win32/PWSteal.F, APT1.DAIRY, and APT1.BOUNCER,
IDA gets fewer library functions and call sites compared
to X-Force. For other samples that are not packed or
obfuscated, since the executables could be properly dis-
assembled, the metrics obtained in IDA and X-Force are
5We exclude the C/C++ runtime initialization functions which are
only called before the main function.
838  23rd USENIX Security Symposium 
USENIX Association
very close. However, even in such cases, static analysis
is insufﬁcient to understand the malicious behavior be-
cause it does not show the values of the library function
parameters. Compared to the native run method, X-Force
can identify more library functions and call sites.
Next, we present detailed analysis for two representa-
tive samples.
(cid:11)(cid:12)(cid:13)(cid:14)(cid:11)(cid:12)(cid:29)(cid:30)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:31)(cid:2)(cid:20)(cid:25)(cid:26)(cid:32)(cid:33)(cid:34)(cid:32)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:8)(cid:9)(cid:24)(cid:20)(cid:25)(cid:26)(cid:5)(cid:6)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)(cid:10)(cid:14)(cid:2)(cid:8)(cid:20)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:11)(cid:12)(cid:29)(cid:30)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:35)(cid:36)(cid:31)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:34)(cid:32)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:8)(cid:24)(cid:5)(cid:31)(cid:25)(cid:26)(cid:5)(cid:6)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)(cid:10)(cid:14)(cid:2)(cid:14)(cid:5)
(cid:1)(cid:2)(cid:3)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:5)(cid:5)(cid:5)(cid:8)(cid:9)(cid:10)(cid:5)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:11)(cid:12)(cid:29)(cid:30)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:7)(cid:40)(cid:5)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:34)(cid:32)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:8)(cid:5)(cid:9)(cid:5)(cid:25)(cid:26)(cid:5)(cid:6)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)(cid:10)(cid:8)(cid:9)(cid:40)(cid:20)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:11)(cid:12)(cid:29)(cid:30)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:20)(cid:31)(cid:8)(cid:36)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:41)(cid:16)(cid:3)(cid:16)(cid:2)(cid:30)(cid:16)(cid:33)(cid:34)(cid:32)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:20)(cid:9)(cid:10)(cid:36)(cid:25)(cid:26)(cid:5)(cid:6)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)(cid:10)(cid:8)(cid:31)(cid:42)(cid:5)
(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:6)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:14)(cid:2)(cid:8)(cid:20)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:8)(cid:9)(cid:24)(cid:20)(cid:25)(cid:26)(cid:5)(cid:6)(cid:23)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:6)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:14)(cid:2)(cid:8)(cid:20)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:8)(cid:9)(cid:24)(cid:20)(cid:25)(cid:26)(cid:5)(cid:6)(cid:23)(cid:24)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:6)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:14)(cid:2)(cid:8)(cid:20)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:8)(cid:9)(cid:24)(cid:20)(cid:25)(cid:26)(cid:5)(cid:6)(cid:23)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:6)(cid:17)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:14)(cid:2)(cid:8)(cid:20)(cid:21)(cid:4)(cid:22)(cid:7)(cid:23)(cid:8)(cid:9)(cid:24)(cid:20)(cid:25)(cid:26)(cid:5)(cid:6)(cid:23)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:1)(cid:3)(cid:37)(cid:30)(cid:16)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:8)(cid:31)(cid:42)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:1)(cid:3)(cid:37)(cid:30)(cid:16)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:8)(cid:9)(cid:40)(cid:20)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:1)(cid:3)(cid:37)(cid:30)(cid:16)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:8)(cid:9)(cid:40)(cid:20)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:11)(cid:12)(cid:13)(cid:14)(cid:1)(cid:3)(cid:37)(cid:30)(cid:16)(cid:19)(cid:5)(cid:6)(cid:7)(cid:10)(cid:14)(cid:2)(cid:14)(cid:5)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)
(cid:43)(cid:16)(cid:3)(cid:16)(cid:17)(cid:16)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:31)(cid:2)(cid:20)(cid:25)(cid:26)(cid:32)(cid:33)(cid:18)(cid:44)(cid:45)(cid:46)(cid:47)(cid:48)(cid:47)(cid:1)(cid:28)(cid:49)(cid:18)(cid:45)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:43)(cid:16)(cid:3)(cid:16)(cid:17)(cid:16)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:31)(cid:2)(cid:20)(cid:25)(cid:26)(cid:32)(cid:33)(cid:9)(cid:37)(cid:37)(cid:17)(cid:28)(cid:12)(cid:13)(cid:12)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:43)(cid:16)(cid:3)(cid:16)(cid:17)(cid:16)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:31)(cid:2)(cid:20)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:40)(cid:50)(cid:28)(cid:17)(cid:6)(cid:17)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:43)(cid:16)(cid:3)(cid:16)(cid:17)(cid:16)(cid:11)(cid:12)(cid:3)(cid:16)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:31)(cid:2)(cid:20)(cid:25)(cid:26)(cid:32)(cid:33)(cid:1)(cid:46)(cid:15)(cid:11)(cid:51)(cid:52)(cid:28)(cid:53)(cid:54)(cid:53)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)
(cid:41)(cid:16)(cid:55)(cid:37)(cid:56)(cid:16)(cid:43)(cid:12)(cid:29)(cid:16)(cid:31)(cid:17)(cid:37)(cid:29)(cid:57)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:7)(cid:40)(cid:5)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:41)(cid:16)(cid:3)(cid:16)(cid:2)(cid:30)(cid:16)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:41)(cid:16)(cid:55)(cid:37)(cid:56)(cid:16)(cid:43)(cid:12)(cid:29)(cid:16)(cid:31)(cid:17)(cid:37)(cid:29)(cid:57)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:35)(cid:36)(cid:31)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:41)(cid:16)(cid:55)(cid:37)(cid:56)(cid:16)(cid:43)(cid:12)(cid:29)(cid:16)(cid:31)(cid:17)(cid:37)(cid:29)(cid:57)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:35)(cid:36)(cid:31)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:33)(cid:41)(cid:16)(cid:3)(cid:16)(cid:2)(cid:30)(cid:16)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:41)(cid:16)(cid:55)(cid:37)(cid:56)(cid:16)(cid:43)(cid:12)(cid:29)(cid:16)(cid:31)(cid:17)(cid:37)(cid:29)(cid:57)(cid:18)(cid:19)(cid:22)(cid:7)(cid:23)(cid:8)(cid:31)(cid:2)(cid:20)(cid:25)(cid:26)(cid:32)(cid:33)(cid:31)(cid:37)(cid:13)(cid:17)(cid:29)(cid:37)(cid:3)(cid:3)(cid:16)(cid:29)(cid:38)(cid:6)(cid:39)(cid:40)(cid:37)(cid:29)(cid:31)(cid:16)(cid:32)(cid:27)(cid:4)(cid:26)(cid:4)(cid:5)
(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)
Figure 6: The ﬂow graph of the function at 0x10009b50
in dg003.exe that delete all ﬁles on the hard disk.
Dg003.exe.
This is a typical APT malware sam-