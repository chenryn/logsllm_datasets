当收到  的 HTTP 请求时，会出现以下（抽象的）逻辑。
  1. 当 Apache **httpd** 解析 URI 请求时，他在请求的 **request_rec** 结构体中设置以下成员字段。
  * **uri** = “/index.html/a.srv”
  * **filename** = “/usr/html/index.html” # 假设 web 根目录是 /usr/html
  * **path_info** = “/a.srv”
2.对 web 根目录下的文件访问由 Axis 自定义的授权代码 **so** 模块控制（由于 httpd 配置文件中的 /usr/html 目录指令中需要
axis-group-file 指令）。
自定义的权限代码执行授权验证仅基于 **request.filename** ,会忽略 **path_info** 特性的存在，因此授予
**/index.html/a.srv** 的访问权限。应为请求被认为是针对可读文件 **/usr/html/index.html**
（不需要任何身份验证）。
3.既然请求获得了授权，那么配置的 `` 指令与 URI（我们请求的完整
uri，见上文）进行正则匹配。因为通过正则表达式匹配到的 URI 都是以 **.srv** 结尾，因此调用 **.srv 处理代码** –
“TransferMime /var/run/ssid/ssidsocket” 处理。它的功能是将请求传输到
/var/run/ssid/ssidsocket unix 套接字，以便 /bin/ssid 进程处理。
4.随后，/bin/ **ssid** 进程接收到这个请求检查其（完整的）URI，并将请求视为对 **.srv** 文件的合法请求 —— 允许请求到达
**.srv** 功能。  
在 **mod_authz_axisgroupfile.so** 模块中 **axis_group_file_provider** 函数的 IDA
截图可以看到，它被注册(通过
[ap_register_auth_provider](https://ci.apache.org/projects/httpd/trunk/doxygen/group__APACHE__CORE__REQ__AUTH.html#ga61e52c5759944ff0b556c933d3678c97)
函数)为路径(受到 `Require axis-group-file` 指令限制的路径)授权提供程序。在截图的上部可以看到，
**request.filename** 用于检查文件是否可以被读取。在我们上面例子中， **request.filename** 的可读文件路径为
/usr/html/index.html。接下来程序调用参数 **group_name** 为空的
**check_user_authz_by_file_owner_gid** 函数。 当 **group_name**
为空时，后面的函数会跳过所有授权检查并授予对请求的访问权。
因此，攻击者将获得对 /bin/ssid 的 .srv 功能的未授权访问。
**POC**
为了展示能够到达 /bin/ **ssid** 的 .srv 功能，我们发送一个带有 `return_page` 参数的请求。这是用于 HTTP
重定向的一个特殊参数。 当参数值（字符串 “it_worked”）出现在响应中，我们就知道了我们已经到达了 /bin/ **ssid** 的 .srv
功能。  
###  CVE-2018-10662 —— .srv 功能用户不受限制的 dbus 访问
达到 /bin/ssid 的 .srv 功能的合法请求可以通过在请求的查询字符串中设置操作参数来选择其中的一个功能。其中的一个功能是 **dbus**
，它允许用户以 root（/bin/ **ssid** 进程的 uid 和 gid） 权限调用任何 dbus
请求，并且不会受到目的地或者内容的限制。由于是来自 root 进程的 dbus 请求 —— 被授权不受限制的访问许多 dbus
服务接口。之所以会这样，是因为旨在限制此类请求的授权机制 **PliocyKit** 被配置成为来自 root 的请求自动授予访问权。  
查看 PolicyKit.conf 手册得知，/etc/PolicyKit/PolicyKit.conf 最初设置为 “yes” 意味着已授予权限。
虽然 /bin/ **ssid** 中 的 dbus 接口仅用于从某些特定的启用了 dbus
的服务中获取特定值，但是它暴露了更广泛的功能，从而产生了安全后果。
例如，该接口允许用户控制设备 **parhand** 参数的任意值。可以通过发送 **dbus** 请求来调用 **policykit_parhand**
进程的 dbus-interface (PolicyKitParhand)函数来实现。这个接口提供了可由 root dbus-client 调用的
**SetParameter** 和 **SynchParameter** 方法。通过在执行 **SynchParameter** 后面的
**SetParameter** ，用户可以设置任意的 **parhand** 参数值并应用更改。
**POC**
摄像头的 **parhand** 参数值 Image.I0.Overlay.Enabled 用来控制是否在视频上方显示图片。例如，我们利用这个漏洞把它的值从
“no” 改为 “yes”。  
在存在此漏洞的摄像头上运行这些命令后，视频的左上方会叠加一张图片（默认是 Axis 的小标志）。可以登录到 web 界面查看：  
###  CVE-2018-1066 —— shell 命令注入漏洞
需要有修改参数 **parhand** 的权限才能利用这个漏洞。这可以通过以下几步实现：
  1. 获得/拥有管理员权限（通过使用 cgi 接口）
  2. 在 **upnp** 守护进程中执行代码
  3. 找到其他方法来控制 **parhand** 参数 —— CVE-2018-10662 在直接调用 policykit_parhand 函数的示例中实现了这一点(见上文)。
**parhand** 参数处理程序负责获取、存储、更改设备的许多内部参数。当用户通过 web 界面设置参数时，相关的 CGI 脚本（param.cgi）
转发设置参数请求到二进制文件 **parhand** ,它检查访问权限，并将参数值保存在相关的配置文件中。
一些参数用于提供 shell 脚本，并被定义为 shell 挂载（在 **parhand** 配置文件中 mount =“shell()”）。参数值由
**parhand** shell 解析器解析，它不清理特殊的 shell 字符，也不引用参数值。其中的一些参数（例如，我们使用的
**Time.DEST.Enable** ）以 shell 赋值的格式（例如，FOO=Bar）保存在配置（例如，
**/etc/sysconfig/openntpd.conf** ）文件末尾。之后，shell 初始化脚本（例如， **parhand-systemctl
restart time-source.service** ），它们作为设置命令的结果运行，该命令在为参数应用新值时执行 —— 通过 sync 命令。
shell 脚本直接执行配置文件（目的是包含配置参数），并且通过使用分号(“;”)设置参数值，使我们能够以 root 权限注入任意命令。
这个漏洞的关键因素在于:
  * 解析 shell 环境中输入值时缺乏过滤
  * 设备使用了一个过时的方法，使用 shell 脚本去是设置参数并将它们以 shell 赋值的方式存贮在文件中，然后执行这些文件。
请注意这些参数不仅能够通过摄像头的 **upnp** 守护进程设置。如果攻击者恰巧有能力在 UPnP 守护进程中执行代码，也能利用这个漏洞来提升权限。
**POC**
在可能的选择之外，我们选择使用需要管理员凭证的 **param.cgi** 接口来触发这个漏洞。我们注入 **id**
命令，它可以通过标准输出打印出当前用户的用户和组信息。在我们的示例中，标准输出被重定向到了系统日志。  
POC 的验证效果 —— 执行这些命令之后，我们以管理员权限登录摄像头的接口查看系统日志（[http://CAMERA_IP/axis-cgi/admin/systemlog.cgi），我能够在其中看到](http://CAMERA_IP/axis-cgi/admin/systemlog.cgi%EF%BC%89%EF%BC%8C%E6%88%91%E8%83%BD%E5%A4%9F%E5%9C%A8%E5%85%B6%E4%B8%AD%E7%9C%8B%E5%88%B0)
**id** 命令的输出（末行的 **uid** 和 **gid** ）。  
## 其他漏洞
这一节中介绍的是在上面攻击中没有使用到的四个漏洞的细节。
###  CVE-2018-10664 —— 使 httpd 进程崩溃
这个漏洞允许未授权的攻击者击崩 httpd 进程 —— 导致（至少）使用默认配置的用户通过 web 界面查看到的视频界面为黑屏状态。
在触发这个漏洞后，系统日志会出现以下一行（接下来是崩溃转储）。
    [ ERR     ] kernel: [ 2819.017996] httpd: httpd: potentially unexpected fatal signal 11.